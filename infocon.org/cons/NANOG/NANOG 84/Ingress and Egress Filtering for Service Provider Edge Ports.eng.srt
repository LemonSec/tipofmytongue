1
00:00:00,000 --> 00:00:04,799
[Music]

2
00:00:04,799 --> 00:00:06,480
i would now

3
00:00:06,480 --> 00:00:08,000
like to introduce brian knight

4
00:00:08,000 --> 00:00:10,639
presenting ingress and egress filtering

5
00:00:10,639 --> 00:00:13,120
for service provider edge ports

6
00:00:13,120 --> 00:00:15,200
brian heads the engineering time team at

7
00:00:15,200 --> 00:00:18,080
knighto did i say that right okay

8
00:00:18,080 --> 00:00:20,400
which is a business telecom provider his

9
00:00:20,400 --> 00:00:22,640
team operates a service provider network

10
00:00:22,640 --> 00:00:25,519
along with sd-wan and firewall services

11
00:00:25,519 --> 00:00:27,199
this is brian's second time presenting

12
00:00:27,199 --> 00:00:28,640
at nanak and we are certainly happy to

13
00:00:28,640 --> 00:00:30,400
have him speaking with us today welcome

14
00:00:30,400 --> 00:00:32,720
brian

15
00:00:37,520 --> 00:00:39,520
sounds good

16
00:00:39,520 --> 00:00:41,760
all right thank you all for coming and

17
00:00:41,760 --> 00:00:43,600
for staying for

18
00:00:43,600 --> 00:00:46,160
the final talk of the day

19
00:00:46,160 --> 00:00:48,800
i know that

20
00:00:50,480 --> 00:00:52,559
excuse me

21
00:00:52,559 --> 00:00:53,760
i'm going to be giving a talk about

22
00:00:53,760 --> 00:00:55,920
ingress and egress filtering at the

23
00:00:55,920 --> 00:00:57,920
internet edge for service provider

24
00:00:57,920 --> 00:00:59,280
networks today

25
00:00:59,280 --> 00:01:01,120
i've only got 30 minutes so

26
00:01:01,120 --> 00:01:03,359
let's get right to it

27
00:01:03,359 --> 00:01:06,000
uh who am i my name's brian knight i'm

28
00:01:06,000 --> 00:01:09,080
engineering director over at nytel

29
00:01:09,080 --> 00:01:11,840
as53828 based out of chicago i've been

30
00:01:11,840 --> 00:01:15,840
slinging packets for 25 years

31
00:01:15,840 --> 00:01:17,200
we do

32
00:01:17,200 --> 00:01:20,400
at 53808 we do business eyeballs uh

33
00:01:20,400 --> 00:01:23,040
internet dia mpls vpns

34
00:01:23,040 --> 00:01:25,040
layer 2 ethernet and sd-wan

35
00:01:25,040 --> 00:01:28,400
there's my email and my linkedin so

36
00:01:28,400 --> 00:01:31,680
so you can check out my profile

37
00:01:31,680 --> 00:01:34,479
so in this talk i want to discuss

38
00:01:34,479 --> 00:01:36,079
what was our motivation for doing this

39
00:01:36,079 --> 00:01:38,880
project uh what were the key decisions

40
00:01:38,880 --> 00:01:41,840
that we made i'll dig into a few select

41
00:01:41,840 --> 00:01:44,720
uh packet forwarding scenarios

42
00:01:44,720 --> 00:01:46,880
i'll talk about how we implemented uh

43
00:01:46,880 --> 00:01:48,240
the filtering

44
00:01:48,240 --> 00:01:49,680
i'll talk about what we saw when we

45
00:01:49,680 --> 00:01:51,920
implemented the filtering uh and and

46
00:01:51,920 --> 00:01:53,439
tested the filtering

47
00:01:53,439 --> 00:01:54,880
and then finally a short list of

48
00:01:54,880 --> 00:01:57,679
recommendations

49
00:01:57,920 --> 00:02:01,040
um i'm sorry casey i might butcher your

50
00:02:01,040 --> 00:02:04,960
name i'm sorry um casey decchio's dsav

51
00:02:04,960 --> 00:02:05,759
team

52
00:02:05,759 --> 00:02:08,399
from brigham young university in october

53
00:02:08,399 --> 00:02:11,520
of 2020 notified us of dns spoofing

54
00:02:11,520 --> 00:02:13,360
vulnerabilities for

55
00:02:13,360 --> 00:02:15,599
the dns servers that we operate for our

56
00:02:15,599 --> 00:02:16,800
customers

57
00:02:16,800 --> 00:02:18,000
and their team was measuring

58
00:02:18,000 --> 00:02:20,480
vulnerability to dns amplification

59
00:02:20,480 --> 00:02:22,000
attacks

60
00:02:22,000 --> 00:02:24,319
so when we got this email we found that

61
00:02:24,319 --> 00:02:27,840
in fact uh dns spoofing was possible

62
00:02:27,840 --> 00:02:30,800
mainly because we had no anti-spoofing

63
00:02:30,800 --> 00:02:34,800
enabled on our network edge ports

64
00:02:35,519 --> 00:02:37,519
we did a quick google search of course

65
00:02:37,519 --> 00:02:40,640
and we could not find an easy how-to for

66
00:02:40,640 --> 00:02:43,200
how to configure that anti-spoofing uh

67
00:02:43,200 --> 00:02:46,640
on a service provider not work um so i

68
00:02:46,640 --> 00:02:49,440
uh i did what uh what i often do is i

69
00:02:49,440 --> 00:02:51,200
post it to nana again and pose the

70
00:02:51,200 --> 00:02:52,640
question to

71
00:02:52,640 --> 00:02:55,120
uh to the community and we found that

72
00:02:55,120 --> 00:02:57,840
many eyeball networks uh in the nano

73
00:02:57,840 --> 00:02:59,519
community did in fact do ingress

74
00:02:59,519 --> 00:03:01,120
filtering

75
00:03:01,120 --> 00:03:04,560
uh they would also do uh

76
00:03:04,560 --> 00:03:07,200
they performed egress filtering

77
00:03:07,200 --> 00:03:10,560
um they would also block invalid ips so

78
00:03:10,560 --> 00:03:12,879
they would do ball gun filtering

79
00:03:12,879 --> 00:03:15,280
uh they would block invalid ports as

80
00:03:15,280 --> 00:03:19,120
well so uh ports such as netbios

81
00:03:19,120 --> 00:03:22,800
microsoft file sharing sun rpc

82
00:03:22,800 --> 00:03:25,040
uh and there would also block traffic uh

83
00:03:25,040 --> 00:03:27,120
to critical infrastructure such as

84
00:03:27,120 --> 00:03:30,239
router loopback ips and uh internal

85
00:03:30,239 --> 00:03:32,560
point-to-point subnets

86
00:03:32,560 --> 00:03:34,159
but even with this guidance we still

87
00:03:34,159 --> 00:03:36,959
struggle to find a clear how-to uh and

88
00:03:36,959 --> 00:03:39,360
template uh on on how to implement this

89
00:03:39,360 --> 00:03:40,799
and and that's what this presentation

90
00:03:40,799 --> 00:03:43,200
strives to be strives to be a template

91
00:03:43,200 --> 00:03:45,599
for this

92
00:03:45,760 --> 00:03:47,760
so one of the first resources that the

93
00:03:47,760 --> 00:03:50,480
community recommended was bcp84

94
00:03:50,480 --> 00:03:52,959
uh the title of that bcp is ingress

95
00:03:52,959 --> 00:03:54,720
filtering for multi-home networks

96
00:03:54,720 --> 00:03:56,959
perfect for what we were looking for

97
00:03:56,959 --> 00:03:59,439
uh it outlines five techniques for

98
00:03:59,439 --> 00:04:02,720
anti-spoofing measures

99
00:04:03,519 --> 00:04:05,760
those those five techniques really boil

100
00:04:05,760 --> 00:04:08,400
down to a static

101
00:04:08,400 --> 00:04:10,560
access control list placed on edge

102
00:04:10,560 --> 00:04:11,760
interfaces

103
00:04:11,760 --> 00:04:14,480
versus unicast reverse path forwarding

104
00:04:14,480 --> 00:04:16,878
checks

105
00:04:17,279 --> 00:04:20,320
bcp84 has the same overarching goal as

106
00:04:20,320 --> 00:04:24,080
bcp38 bcp38 has been widely

107
00:04:24,080 --> 00:04:26,639
socialized within the community

108
00:04:26,639 --> 00:04:31,199
but 38 mainly deals with filtering um

109
00:04:31,199 --> 00:04:33,120
traffic from single home sites into the

110
00:04:33,120 --> 00:04:35,199
service provider network so these are

111
00:04:35,199 --> 00:04:37,199
service provider customers

112
00:04:37,199 --> 00:04:40,080
sending traffic back in

113
00:04:40,080 --> 00:04:42,639
bcp 84's audience however uh includes

114
00:04:42,639 --> 00:04:45,600
any multi-home network um so it's

115
00:04:45,600 --> 00:04:47,360
perfect for a service provider network

116
00:04:47,360 --> 00:04:48,720
because it is

117
00:04:48,720 --> 00:04:51,759
they're typically widely multi-homed

118
00:04:51,759 --> 00:04:53,040
um

119
00:04:53,040 --> 00:04:55,440
bcp84 deals mainly with security at the

120
00:04:55,440 --> 00:04:57,840
data plane so please don't throw out

121
00:04:57,840 --> 00:04:59,919
your your route maps and your prefix

122
00:04:59,919 --> 00:05:01,280
list you still need those at the control

123
00:05:01,280 --> 00:05:04,240
plane not that anybody here would but

124
00:05:04,240 --> 00:05:07,120
please don't throw those

125
00:05:08,840 --> 00:05:11,280
out so going into some of the decisions

126
00:05:11,280 --> 00:05:14,400
that we made um as we looked at bcp 84

127
00:05:14,400 --> 00:05:16,000
instead of these acls really seemed to

128
00:05:16,000 --> 00:05:17,520
be the only way

129
00:05:17,520 --> 00:05:20,720
we looked at i mentioned a moment ago

130
00:05:20,720 --> 00:05:22,320
that it has five anti-spoofing

131
00:05:22,320 --> 00:05:25,039
techniques so i'll run through those uh

132
00:05:25,039 --> 00:05:25,720
real quick

133
00:05:25,720 --> 00:05:27,280
[Music]

134
00:05:27,280 --> 00:05:30,560
it it talks about uh loose reverse path

135
00:05:30,560 --> 00:05:32,960
forwarding

136
00:05:32,960 --> 00:05:34,479
loose rpf

137
00:05:34,479 --> 00:05:37,520
uh says that if a route exists within

138
00:05:37,520 --> 00:05:39,919
the routing table except the packet

139
00:05:39,919 --> 00:05:42,160
uh regardless of what interface it comes

140
00:05:42,160 --> 00:05:44,080
on

141
00:05:44,080 --> 00:05:46,080
that we felt had too little granularity

142
00:05:46,080 --> 00:05:48,160
we wanted to make sure that

143
00:05:48,160 --> 00:05:50,880
if a packet is accepted we wanted to

144
00:05:50,880 --> 00:05:52,560
make sure that there was a valid route

145
00:05:52,560 --> 00:05:55,280
going back to it not just at an existing

146
00:05:55,280 --> 00:05:56,639
route

147
00:05:56,639 --> 00:05:58,400
so we rejected that

148
00:05:58,400 --> 00:05:59,360
um

149
00:05:59,360 --> 00:06:01,919
there's a degenerate case where loose

150
00:06:01,919 --> 00:06:05,600
rpf will ignore the default route

151
00:06:05,600 --> 00:06:06,880
so

152
00:06:06,880 --> 00:06:09,039
again that isn't going to work for our

153
00:06:09,039 --> 00:06:11,360
case

154
00:06:11,600 --> 00:06:14,080
strict rpf on the other hand takes us in

155
00:06:14,080 --> 00:06:15,440
the other direction

156
00:06:15,440 --> 00:06:18,080
and says if the route exists in the rib

157
00:06:18,080 --> 00:06:19,520
and the packet came from the best

158
00:06:19,520 --> 00:06:21,759
destination interface then except the

159
00:06:21,759 --> 00:06:22,800
packet

160
00:06:22,800 --> 00:06:23,919
um

161
00:06:23,919 --> 00:06:27,120
that would be fine except for

162
00:06:27,120 --> 00:06:30,560
uh when that when the route or when the

163
00:06:30,560 --> 00:06:32,400
packet arrives on an interface and it

164
00:06:32,400 --> 00:06:34,800
happens not to be the best path at that

165
00:06:34,800 --> 00:06:36,240
moment

166
00:06:36,240 --> 00:06:38,000
there's a risk then that the packet

167
00:06:38,000 --> 00:06:41,680
would be dropped so that was too strict

168
00:06:41,680 --> 00:06:45,120
feasible rpf is the uh the fifth

169
00:06:45,120 --> 00:06:46,560
uh

170
00:06:46,560 --> 00:06:48,720
technique that's discussed

171
00:06:48,720 --> 00:06:50,639
if the route exists in the rib

172
00:06:50,639 --> 00:06:52,720
and the packet comes in on any valid

173
00:06:52,720 --> 00:06:54,639
destination interface

174
00:06:54,639 --> 00:06:56,880
then accept the packet so in other words

175
00:06:56,880 --> 00:07:00,240
if my bgp route for prefix

176
00:07:00,240 --> 00:07:02,479
is received on multiple interfaces

177
00:07:02,479 --> 00:07:04,560
even though my router is only going to

178
00:07:04,560 --> 00:07:06,319
install one path

179
00:07:06,319 --> 00:07:08,160
in the forwarding information base the

180
00:07:08,160 --> 00:07:09,039
fib

181
00:07:09,039 --> 00:07:11,280
inbound traffic would still be permitted

182
00:07:11,280 --> 00:07:13,280
on both paths

183
00:07:13,280 --> 00:07:16,240
that seems perfect for our application

184
00:07:16,240 --> 00:07:17,919
except for it didn't seem to be an

185
00:07:17,919 --> 00:07:20,720
option on ios xr

186
00:07:20,720 --> 00:07:21,840
so

187
00:07:21,840 --> 00:07:25,440
we decided on static acls

188
00:07:26,080 --> 00:07:29,360
in terms of what to drop we decided that

189
00:07:29,360 --> 00:07:30,800
we were going to

190
00:07:30,800 --> 00:07:31,919
follow as many of the nanak

191
00:07:31,919 --> 00:07:33,919
recommendations as we could uh we wanted

192
00:07:33,919 --> 00:07:34,960
to block

193
00:07:34,960 --> 00:07:37,120
invalid traffic on egress as well as

194
00:07:37,120 --> 00:07:39,199
ingress

195
00:07:39,199 --> 00:07:41,199
we wanted to block bug on traffic in and

196
00:07:41,199 --> 00:07:42,319
out

197
00:07:42,319 --> 00:07:44,080
we wanted to block multicast traffic as

198
00:07:44,080 --> 00:07:45,440
well

199
00:07:45,440 --> 00:07:48,160
any invalid services or ports should

200
00:07:48,160 --> 00:07:50,479
also be blocked and initially we focused

201
00:07:50,479 --> 00:07:53,360
on udp and tcp

202
00:07:53,360 --> 00:07:57,199
port 0 and port 445

203
00:07:57,199 --> 00:07:59,840
and then finally infrastructure uh we

204
00:07:59,840 --> 00:08:02,639
said that except for icmp and traceroute

205
00:08:02,639 --> 00:08:03,759
nothing

206
00:08:03,759 --> 00:08:05,360
should be permitted to hit our router

207
00:08:05,360 --> 00:08:06,879
loopbacks or internal point-to-point

208
00:08:06,879 --> 00:08:09,120
links from outside

209
00:08:09,120 --> 00:08:12,280
our network

210
00:08:13,440 --> 00:08:14,319
so

211
00:08:14,319 --> 00:08:17,840
for us uh being a smaller isp ease of

212
00:08:17,840 --> 00:08:20,479
ease of administration was key

213
00:08:20,479 --> 00:08:22,400
we said that the implementation should

214
00:08:22,400 --> 00:08:25,599
be the same on every device so

215
00:08:25,599 --> 00:08:27,360
what that meant for us was we wanted to

216
00:08:27,360 --> 00:08:29,759
implement the same set of acls

217
00:08:29,759 --> 00:08:32,080
configured the exact same way on all of

218
00:08:32,080 --> 00:08:33,440
our edge routers

219
00:08:33,440 --> 00:08:35,279
and we wanted to not only that we wanted

220
00:08:35,279 --> 00:08:37,599
to use the same object groups even and

221
00:08:37,599 --> 00:08:39,760
have the object groups have exactly the

222
00:08:39,760 --> 00:08:42,880
same prefixes on every router that way

223
00:08:42,880 --> 00:08:44,959
we could deploy a change and have it

224
00:08:44,959 --> 00:08:47,200
consistently deployed across the entire

225
00:08:47,200 --> 00:08:49,519
fleet

226
00:08:50,640 --> 00:08:52,800
so i don't have time to go through every

227
00:08:52,800 --> 00:08:54,560
packet forwarding scenario and i'm not

228
00:08:54,560 --> 00:08:55,600
going to

229
00:08:55,600 --> 00:08:57,839
um i i certainly don't have the time for

230
00:08:57,839 --> 00:09:00,399
it but i do want to call out a couple of

231
00:09:00,399 --> 00:09:04,560
uh of key ones so uh in this scenario

232
00:09:04,560 --> 00:09:08,000
um we have a packet coming in from uh

233
00:09:08,000 --> 00:09:11,279
from one of our upstreams uh sen uh sent

234
00:09:11,279 --> 00:09:13,360
from someone out on the internet uh and

235
00:09:13,360 --> 00:09:15,440
the source ip

236
00:09:15,440 --> 00:09:18,160
is uh

237
00:09:18,160 --> 00:09:19,440
is

238
00:09:19,440 --> 00:09:21,440
one of the networks that we ourselves

239
00:09:21,440 --> 00:09:22,560
originate

240
00:09:22,560 --> 00:09:25,600
in this example so um the the service

241
00:09:25,600 --> 00:09:28,080
provider network uh originates

242
00:09:28,080 --> 00:09:31,080
192.0.2.0.24

243
00:09:31,519 --> 00:09:35,640
packet has 192.0.2.1.

244
00:09:36,399 --> 00:09:38,560
we want to make sure that that would be

245
00:09:38,560 --> 00:09:41,519
that that would be blocked on ingress

246
00:09:41,519 --> 00:09:43,519
however

247
00:09:43,519 --> 00:09:46,959
for customers where we

248
00:09:46,959 --> 00:09:49,279
would disaggregate some of our own space

249
00:09:49,279 --> 00:09:51,760
and assign it to them uh to announce to

250
00:09:51,760 --> 00:09:53,760
another provider

251
00:09:53,760 --> 00:09:55,920
and you'll see in the corner uh where i

252
00:09:55,920 --> 00:09:58,640
have uh as6449

253
00:09:58,640 --> 00:10:01,279
originated networks um

254
00:10:01,279 --> 00:10:03,279
assuming for the moment that you could

255
00:10:03,279 --> 00:10:05,440
announce a slash 29 to the larger

256
00:10:05,440 --> 00:10:08,399
internet and not uh not be blocked by

257
00:10:08,399 --> 00:10:12,720
uh by a prefix list

258
00:10:12,880 --> 00:10:15,839
what i have here is a packet originating

259
00:10:15,839 --> 00:10:19,240
from 203.0.1

260
00:10:20,240 --> 00:10:22,399
which falls within the originated

261
00:10:22,399 --> 00:10:24,880
networks

262
00:10:25,600 --> 00:10:26,640
coming uh

263
00:10:26,640 --> 00:10:28,399
that we're assigned to six four four

264
00:10:28,399 --> 00:10:29,600
nine nine

265
00:10:29,600 --> 00:10:30,800
and

266
00:10:30,800 --> 00:10:33,519
that packet is traversing their other

267
00:10:33,519 --> 00:10:35,360
provider coming through

268
00:10:35,360 --> 00:10:36,640
uh

269
00:10:36,640 --> 00:10:38,800
the uh one of the service provider

270
00:10:38,800 --> 00:10:40,399
networks up streams

271
00:10:40,399 --> 00:10:42,000
coming back into

272
00:10:42,000 --> 00:10:45,040
the sp network and we we want to permit

273
00:10:45,040 --> 00:10:46,399
this because

274
00:10:46,399 --> 00:10:47,760
if that link

275
00:10:47,760 --> 00:10:49,839
uh to the uh to the service provider

276
00:10:49,839 --> 00:10:51,360
network we still want to be able to

277
00:10:51,360 --> 00:10:53,839
offer services uh to that customer even

278
00:10:53,839 --> 00:10:55,440
though their connection to us may be

279
00:10:55,440 --> 00:10:56,800
down

280
00:10:56,800 --> 00:10:58,720
so we made a choice to permit that

281
00:10:58,720 --> 00:11:01,720
traffic

282
00:11:01,760 --> 00:11:04,240
just one other scenario

283
00:11:04,240 --> 00:11:06,880
on egress

284
00:11:06,880 --> 00:11:10,160
we have the uh with the the customer

285
00:11:10,160 --> 00:11:12,720
again running bgp

286
00:11:12,720 --> 00:11:15,600
they're originating some traffic uh that

287
00:11:15,600 --> 00:11:17,200
isn't um

288
00:11:17,200 --> 00:11:18,399
um

289
00:11:18,399 --> 00:11:20,640
isn't part of their network set

290
00:11:20,640 --> 00:11:23,120
so they would send a packet uh with some

291
00:11:23,120 --> 00:11:24,720
bogus address

292
00:11:24,720 --> 00:11:25,760
normally

293
00:11:25,760 --> 00:11:28,560
our prefix lists to that customer should

294
00:11:28,560 --> 00:11:30,720
catch that traffic and block it but in

295
00:11:30,720 --> 00:11:32,000
case it doesn't in case of

296
00:11:32,000 --> 00:11:34,399
misconfiguration we now have another

297
00:11:34,399 --> 00:11:36,959
layer of protection

298
00:11:36,959 --> 00:11:38,880
against that

299
00:11:38,880 --> 00:11:40,399
that customer being able to send that

300
00:11:40,399 --> 00:11:42,399
traffic outside of our

301
00:11:42,399 --> 00:11:45,760
own uh as

302
00:11:49,040 --> 00:11:50,959
so in terms of implementation

303
00:11:50,959 --> 00:11:51,839
um

304
00:11:51,839 --> 00:11:53,600
this is exactly what we did

305
00:11:53,600 --> 00:11:55,600
we we implemented what we decided which

306
00:11:55,600 --> 00:11:58,240
was uh we wanted the static acl approach

307
00:11:58,240 --> 00:12:00,639
uh we configured the the four acls

308
00:12:00,639 --> 00:12:03,680
inbound and outbound for v4 and v6 uh

309
00:12:03,680 --> 00:12:05,680
made sure to configure the object groups

310
00:12:05,680 --> 00:12:06,399
and

311
00:12:06,399 --> 00:12:08,320
we achieved the goal of

312
00:12:08,320 --> 00:12:10,079
making the content the same across all

313
00:12:10,079 --> 00:12:12,399
of the routers

314
00:12:12,399 --> 00:12:14,399
so i wanted to walk through some of the

315
00:12:14,399 --> 00:12:16,399
object groups that we set up

316
00:12:16,399 --> 00:12:18,320
uh the

317
00:12:18,320 --> 00:12:22,160
uh the first three groups um uh the x

318
00:12:22,160 --> 00:12:25,279
group purewan and tran win those all

319
00:12:25,279 --> 00:12:27,839
contain the directly connected subnets

320
00:12:27,839 --> 00:12:28,639
so

321
00:12:28,639 --> 00:12:31,040
uh for the x for example uh it would be

322
00:12:31,040 --> 00:12:33,519
the slice 24 or slash 23

323
00:12:33,519 --> 00:12:34,480
um

324
00:12:34,480 --> 00:12:36,480
put into that

325
00:12:36,480 --> 00:12:38,399
put into that object group and then

326
00:12:38,399 --> 00:12:40,399
referencing the acl

327
00:12:40,399 --> 00:12:41,360
um

328
00:12:41,360 --> 00:12:44,959
for pure and uh and tran when uh

329
00:12:44,959 --> 00:12:47,040
as you can see it's the the slash

330
00:12:47,040 --> 00:12:51,399
thirties slash 126 is

331
00:12:53,440 --> 00:12:55,279
the uh

332
00:12:55,279 --> 00:12:57,600
the ipv4 cust

333
00:12:57,600 --> 00:13:00,000
those were our customer uh provider

334
00:13:00,000 --> 00:13:03,360
independent and provider uh uh provider

335
00:13:03,360 --> 00:13:05,839
assigned prefixes so anything that a bgp

336
00:13:05,839 --> 00:13:07,600
customer

337
00:13:07,600 --> 00:13:12,000
might uh might use and might uh send out

338
00:13:12,000 --> 00:13:14,639
on our uh

339
00:13:14,639 --> 00:13:16,480
on the uh

340
00:13:16,480 --> 00:13:18,720
across their backup wan connection we

341
00:13:18,720 --> 00:13:20,480
want to make sure that that traffic is

342
00:13:20,480 --> 00:13:23,760
then permitted inbound

343
00:13:23,760 --> 00:13:27,120
uh ipv4 and ipv6 bogon those are the

344
00:13:27,120 --> 00:13:31,279
list of invalid prefixes uh ipv4 infra

345
00:13:31,279 --> 00:13:33,200
that's all of our router the backs and

346
00:13:33,200 --> 00:13:34,480
point to points that we wanted to

347
00:13:34,480 --> 00:13:37,680
specifically uh protect

348
00:13:37,680 --> 00:13:40,480
against outside attacks

349
00:13:40,480 --> 00:13:44,800
and then uh bgp ag those are the uh the

350
00:13:44,800 --> 00:13:47,360
prefixes that we would have configured

351
00:13:47,360 --> 00:13:50,160
in our um

352
00:13:50,160 --> 00:13:51,839
in our

353
00:13:51,839 --> 00:13:53,680
network statements

354
00:13:53,680 --> 00:13:57,279
in bgp on all of our routers

355
00:13:57,519 --> 00:13:59,839
and then uh the last group is uh is an

356
00:13:59,839 --> 00:14:01,040
interesting one

357
00:14:01,040 --> 00:14:02,720
backdoor backdoor

358
00:14:02,720 --> 00:14:05,360
was created for possibly valid traffic

359
00:14:05,360 --> 00:14:07,360
uh that was uh observed during

360
00:14:07,360 --> 00:14:09,120
implementation i'll get into that in in

361
00:14:09,120 --> 00:14:12,240
just a little bit uh with the uh

362
00:14:12,240 --> 00:14:15,839
in the observation section

363
00:14:15,839 --> 00:14:18,880
there are four static acls uh

364
00:14:18,880 --> 00:14:21,839
uh pv4i net n nine and out and then v6

365
00:14:21,839 --> 00:14:24,720
and v6 out

366
00:14:25,839 --> 00:14:28,079
in broad strokes this is what the acl

367
00:14:28,079 --> 00:14:31,040
looks like this is the intent of the acl

368
00:14:31,040 --> 00:14:34,079
the the very first uh part of it is

369
00:14:34,079 --> 00:14:36,560
we're going to block the invalid um

370
00:14:36,560 --> 00:14:39,519
prefixes the uh

371
00:14:39,519 --> 00:14:41,360
the address base that's

372
00:14:41,360 --> 00:14:42,480
that should never be used on the

373
00:14:42,480 --> 00:14:44,000
internet

374
00:14:44,000 --> 00:14:45,120
the

375
00:14:45,120 --> 00:14:46,240
next we're going to block the invalid

376
00:14:46,240 --> 00:14:49,120
ports then we're going to permit all of

377
00:14:49,120 --> 00:14:52,240
the traffic to and from those transit x

378
00:14:52,240 --> 00:14:54,800
and peering directly connected networks

379
00:14:54,800 --> 00:14:58,160
then we deny multicast

380
00:14:58,160 --> 00:15:00,880
next we permit where the source is bgp

381
00:15:00,880 --> 00:15:04,639
customer ipspace so this is where that

382
00:15:04,639 --> 00:15:05,600
uh

383
00:15:05,600 --> 00:15:09,040
that path from the customer's uh backup

384
00:15:09,040 --> 00:15:12,480
connection or primary connection um

385
00:15:12,480 --> 00:15:14,959
can come back into the into our network

386
00:15:14,959 --> 00:15:17,680
to be able to use services

387
00:15:17,680 --> 00:15:20,000
uh next we deny where source equals

388
00:15:20,000 --> 00:15:22,320
aggregate ipspace so this is our that's

389
00:15:22,320 --> 00:15:24,240
our anti-spoofing rule

390
00:15:24,240 --> 00:15:26,639
uh and then next we permit any traffic

391
00:15:26,639 --> 00:15:28,399
where the destination

392
00:15:28,399 --> 00:15:31,279
is our aggregate or our customers ip

393
00:15:31,279 --> 00:15:35,839
space and then deny any at the end

394
00:15:36,639 --> 00:15:38,959
on the egress side looks very similar we

395
00:15:38,959 --> 00:15:41,360
start out same way denying bog on ips

396
00:15:41,360 --> 00:15:43,680
denying invalid ports

397
00:15:43,680 --> 00:15:45,600
we permit all traffic on the directly

398
00:15:45,600 --> 00:15:48,320
connected networks deny multicast

399
00:15:48,320 --> 00:15:50,720
we then permit where destination equals

400
00:15:50,720 --> 00:15:53,600
customer ip space

401
00:15:53,600 --> 00:15:56,160
it may seem a little bit odd but uh and

402
00:15:56,160 --> 00:15:58,639
it is um what this does is it covers a

403
00:15:58,639 --> 00:16:00,320
strange behavior that we uncovered

404
00:16:00,320 --> 00:16:03,440
during testing and i'll get into that uh

405
00:16:03,440 --> 00:16:06,800
when we get into the observation section

406
00:16:06,800 --> 00:16:08,639
uh next we permit where the source is

407
00:16:08,639 --> 00:16:10,240
the nitrile aggregate and customer ip

408
00:16:10,240 --> 00:16:12,320
space that lets valid traffic out and

409
00:16:12,320 --> 00:16:16,079
then deny any any at the end

410
00:16:17,519 --> 00:16:20,079
so our plan was to create the initial

411
00:16:20,079 --> 00:16:24,320
acls and apply them to to our ports

412
00:16:24,320 --> 00:16:26,480
we enabled blocking for bagon ports

413
00:16:26,480 --> 00:16:28,160
immediate or bargain prefixes

414
00:16:28,160 --> 00:16:29,920
immediately

415
00:16:29,920 --> 00:16:30,720
but

416
00:16:30,720 --> 00:16:32,720
where rules were intended to be denied

417
00:16:32,720 --> 00:16:35,279
we made them permit and log entries

418
00:16:35,279 --> 00:16:37,680
for the testing period so that we didn't

419
00:16:37,680 --> 00:16:40,560
accidentally block anything that was

420
00:16:40,560 --> 00:16:42,240
bona fide traffic

421
00:16:42,240 --> 00:16:44,240
and then our plan was to analyze the

422
00:16:44,240 --> 00:16:46,480
logs for the matching traffic

423
00:16:46,480 --> 00:16:48,560
and we would go then go through a cycle

424
00:16:48,560 --> 00:16:51,040
of refining that acl until finally

425
00:16:51,040 --> 00:16:54,880
unwanted traffic uh only on when excuse

426
00:16:54,880 --> 00:16:55,680
me

427
00:16:55,680 --> 00:16:57,759
only unwanted traffic was being logged

428
00:16:57,759 --> 00:17:00,000
and then we would switch that uh that

429
00:17:00,000 --> 00:17:03,720
permit to deny

430
00:17:06,799 --> 00:17:09,679
so during our traffic review um

431
00:17:09,679 --> 00:17:12,640
we uh we took the took the logs we

432
00:17:12,640 --> 00:17:14,720
processed them into a big csv file

433
00:17:14,720 --> 00:17:17,520
dumped it into excel uh created a pivot

434
00:17:17,520 --> 00:17:20,559
table to summarize and view the data

435
00:17:20,559 --> 00:17:22,959
cross-reference that with our systems

436
00:17:22,959 --> 00:17:25,919
uh and what we saw uh was

437
00:17:25,919 --> 00:17:29,280
that uh uh for bogon prefixes uh there

438
00:17:29,280 --> 00:17:32,799
were no surprises there uh everything

439
00:17:32,799 --> 00:17:34,480
that we saw that was logged appeared to

440
00:17:34,480 --> 00:17:35,360
be

441
00:17:35,360 --> 00:17:38,479
traffic that was unwanted

442
00:17:40,640 --> 00:17:44,480
on the invalid port side we saw that

443
00:17:44,480 --> 00:17:48,160
port zero uh initially we saw a lot of

444
00:17:48,160 --> 00:17:49,679
random traffic

445
00:17:49,679 --> 00:17:50,480
and

446
00:17:50,480 --> 00:17:51,760
we um

447
00:17:51,760 --> 00:17:54,880
as we dug into it we found that ios xr

448
00:17:54,880 --> 00:17:59,600
actually logs fragments with port zero

449
00:17:59,600 --> 00:18:01,200
because the router doesn't have

450
00:18:01,200 --> 00:18:03,679
necessarily the full um

451
00:18:03,679 --> 00:18:06,480
layer 4 information so it defaults to

452
00:18:06,480 --> 00:18:09,600
port zero so we saw we saw this long

453
00:18:09,600 --> 00:18:12,080
list of uh of ports and

454
00:18:12,080 --> 00:18:13,919
we're like what what in the world was

455
00:18:13,919 --> 00:18:14,720
this

456
00:18:14,720 --> 00:18:17,360
um and we came to find out that it was

457
00:18:17,360 --> 00:18:21,120
actually um icmp fragments so uh we

458
00:18:21,120 --> 00:18:23,440
added a specific rule to block those uh

459
00:18:23,440 --> 00:18:25,840
icmp fragments silently uh and that

460
00:18:25,840 --> 00:18:30,000
noise uh uh went way down

461
00:18:30,000 --> 00:18:32,559
uh once once that noise went down we saw

462
00:18:32,559 --> 00:18:34,960
plenty of scanning and abuse uh no real

463
00:18:34,960 --> 00:18:37,360
traffic was observed i

464
00:18:37,360 --> 00:18:39,679
in in many network tools just don't even

465
00:18:39,679 --> 00:18:43,039
permit the use of port zero um but but

466
00:18:43,039 --> 00:18:46,240
we did see that traffic

467
00:18:46,240 --> 00:18:47,440
um

468
00:18:47,440 --> 00:18:50,559
for port 445

469
00:18:50,559 --> 00:18:52,880
we did observe traffic that uh appeared

470
00:18:52,880 --> 00:18:54,480
to be bona fide we found a customer

471
00:18:54,480 --> 00:18:57,919
using it between several of their sites

472
00:18:57,919 --> 00:19:00,400
um and they had been sending that

473
00:19:00,400 --> 00:19:05,280
traffic out uh out of our own uh network

474
00:19:05,280 --> 00:19:07,679
to internet destinations

475
00:19:07,679 --> 00:19:10,640
um it did appear to be bona fide um we

476
00:19:10,640 --> 00:19:13,520
decided to abandon it uh in case that

477
00:19:13,520 --> 00:19:15,440
traffic truly was

478
00:19:15,440 --> 00:19:18,480
um truly was legitimate

479
00:19:18,480 --> 00:19:20,000
so we

480
00:19:20,000 --> 00:19:23,039
um in the current state the uh invalid

481
00:19:23,039 --> 00:19:27,120
port acl only blocks port zero

482
00:19:27,440 --> 00:19:29,520
the infrastructure side

483
00:19:29,520 --> 00:19:31,840
a lot of abuse hit our infrastructure

484
00:19:31,840 --> 00:19:33,840
it was all different ports none of it

485
00:19:33,840 --> 00:19:35,760
was valid traffic

486
00:19:35,760 --> 00:19:37,600
except for that ipsec tunnel terminating

487
00:19:37,600 --> 00:19:39,520
to an old concentrator

488
00:19:39,520 --> 00:19:42,880
fortunately we found that the hard way

489
00:19:42,880 --> 00:19:44,799
but fortunately we were able to find

490
00:19:44,799 --> 00:19:46,320
that and

491
00:19:46,320 --> 00:19:50,520
rectify that problem very quickly

492
00:19:53,919 --> 00:19:56,640
so as we analyze the traffic we've found

493
00:19:56,640 --> 00:19:58,240
many um

494
00:19:58,240 --> 00:20:01,200
uh what i call mpls of vpn ips coming in

495
00:20:01,200 --> 00:20:03,760
coming back in via our transits um these

496
00:20:03,760 --> 00:20:06,159
are ips that we assign to our mpls

497
00:20:06,159 --> 00:20:07,840
customers

498
00:20:07,840 --> 00:20:09,280
so they're

499
00:20:09,280 --> 00:20:10,720
they're globally unique

500
00:20:10,720 --> 00:20:12,559
but they should never be routed across a

501
00:20:12,559 --> 00:20:14,159
public internet yet we were seeing that

502
00:20:14,159 --> 00:20:17,200
traffic come back into our as

503
00:20:17,200 --> 00:20:18,159
so

504
00:20:18,159 --> 00:20:20,640
our theory was that these customers

505
00:20:20,640 --> 00:20:22,799
likely didn't have firewalls uh or

506
00:20:22,799 --> 00:20:24,880
likely had firewalls i hope they have

507
00:20:24,880 --> 00:20:26,799
firewalls

508
00:20:26,799 --> 00:20:29,360
that uh they didn't nap for the globally

509
00:20:29,360 --> 00:20:31,120
unique ips

510
00:20:31,120 --> 00:20:32,559
um

511
00:20:32,559 --> 00:20:35,679
so all of that traffic uh never they

512
00:20:35,679 --> 00:20:37,919
there were um there were tcp sessions

513
00:20:37,919 --> 00:20:39,360
that were trying to be set up they were

514
00:20:39,360 --> 00:20:41,760
obviously weren't completing so uh we

515
00:20:41,760 --> 00:20:43,919
didn't do anything uh special for those

516
00:20:43,919 --> 00:20:48,520
we we chose to block those

517
00:20:49,360 --> 00:20:52,559
uh on the inbound uh anti-spoofing side

518
00:20:52,559 --> 00:20:54,960
uh i mentioned earlier the uh the back

519
00:20:54,960 --> 00:20:57,840
door uh routing or the the backdoor

520
00:20:57,840 --> 00:20:59,280
object group and

521
00:20:59,280 --> 00:21:01,840
this is this is where it comes into play

522
00:21:01,840 --> 00:21:05,840
we did find a few internet lan ips

523
00:21:05,840 --> 00:21:07,039
with

524
00:21:07,039 --> 00:21:08,400
with that backdoor routing where they

525
00:21:08,400 --> 00:21:10,799
were coming back into our aes

526
00:21:10,799 --> 00:21:13,120
from outside

527
00:21:13,120 --> 00:21:15,919
and those interestingly enough seemed to

528
00:21:15,919 --> 00:21:17,039
be working

529
00:21:17,039 --> 00:21:19,280
um so in the interest of not breaking

530
00:21:19,280 --> 00:21:21,200
things um those were explicitly

531
00:21:21,200 --> 00:21:23,600
permitted uh they have their their

532
00:21:23,600 --> 00:21:25,039
the object group that i talked about

533
00:21:25,039 --> 00:21:26,000
earlier

534
00:21:26,000 --> 00:21:30,280
and they have an entry in the acl

535
00:21:31,200 --> 00:21:32,480
um

536
00:21:32,480 --> 00:21:35,200
the on the catch-all deny rule we didn't

537
00:21:35,200 --> 00:21:38,640
see any significant traffic

538
00:21:39,760 --> 00:21:42,799
on the outbound side

539
00:21:43,039 --> 00:21:45,520
we saw where um

540
00:21:45,520 --> 00:21:48,480
we were trying to send a lot of traffic

541
00:21:48,480 --> 00:21:51,679
uh from other carriers mpls vrfs where

542
00:21:51,679 --> 00:21:54,400
the wan ip wasn't assigned to us so uh

543
00:21:54,400 --> 00:21:55,919
one thing that uh

544
00:21:55,919 --> 00:21:56,880
that

545
00:21:56,880 --> 00:21:58,480
used to be very common on our network

546
00:21:58,480 --> 00:22:01,440
was we would buy a handful of

547
00:22:01,440 --> 00:22:04,640
uh of vrfs or a handful of circuits from

548
00:22:04,640 --> 00:22:06,799
another provider uh and then we would

549
00:22:06,799 --> 00:22:08,480
take their mpls network and then connect

550
00:22:08,480 --> 00:22:12,720
it to our uh global internet vrf well a

551
00:22:12,720 --> 00:22:15,440
lot of these other carriers would

552
00:22:15,440 --> 00:22:17,440
assign their own lan ips

553
00:22:17,440 --> 00:22:18,720
so

554
00:22:18,720 --> 00:22:20,880
in some cases we had routers that were

555
00:22:20,880 --> 00:22:24,159
trying to connect outbound uh to the

556
00:22:24,159 --> 00:22:25,280
internet

557
00:22:25,280 --> 00:22:27,280
using that lan ip that that that the

558
00:22:27,280 --> 00:22:28,799
other carrier had assigned of course it

559
00:22:28,799 --> 00:22:32,159
could couldn't communicate

560
00:22:32,159 --> 00:22:33,840
um

561
00:22:33,840 --> 00:22:36,000
we also saw lots of other back door

562
00:22:36,000 --> 00:22:37,679
connections where

563
00:22:37,679 --> 00:22:39,840
the customer router uh would receive

564
00:22:39,840 --> 00:22:42,720
traffic on on another uh provider's want

565
00:22:42,720 --> 00:22:44,320
ip and then the reply would be sent

566
00:22:44,320 --> 00:22:45,440
through us

567
00:22:45,440 --> 00:22:47,039
uh and

568
00:22:47,039 --> 00:22:48,880
both of these types of traffic

569
00:22:48,880 --> 00:22:52,000
or both of these types of uh situations

570
00:22:52,000 --> 00:22:54,640
we didn't see any uh any valid traffic

571
00:22:54,640 --> 00:22:57,440
so those were blocked

572
00:22:58,400 --> 00:22:59,760
so this is

573
00:22:59,760 --> 00:23:01,280
a really uh

574
00:23:01,280 --> 00:23:03,600
this was the most interesting case uh to

575
00:23:03,600 --> 00:23:07,440
me uh as i was digging into this

576
00:23:07,440 --> 00:23:10,640
we had a situation where bgp customers

577
00:23:10,640 --> 00:23:12,320
would send traffic

578
00:23:12,320 --> 00:23:13,280
from

579
00:23:13,280 --> 00:23:14,720
their ass they would use the other

580
00:23:14,720 --> 00:23:17,280
provider to send the traffic up to a

581
00:23:17,280 --> 00:23:19,280
content provider

582
00:23:19,280 --> 00:23:21,360
but that reply to the from the content

583
00:23:21,360 --> 00:23:24,559
provider would come back to us

584
00:23:24,559 --> 00:23:27,919
through through some routing policy i i

585
00:23:27,919 --> 00:23:30,320
hadn't worked out exactly how this could

586
00:23:30,320 --> 00:23:31,440
have happened

587
00:23:31,440 --> 00:23:32,240
but

588
00:23:32,240 --> 00:23:33,200
the

589
00:23:33,200 --> 00:23:35,280
traffic the reply traffic would be

590
00:23:35,280 --> 00:23:38,080
routed across the x to us

591
00:23:38,080 --> 00:23:39,919
and then we would route that traffic

592
00:23:39,919 --> 00:23:41,200
right back out

593
00:23:41,200 --> 00:23:43,679
to one of our transit providers to go

594
00:23:43,679 --> 00:23:46,320
back to the customer

595
00:23:46,320 --> 00:23:47,279
so

596
00:23:47,279 --> 00:23:49,039
as you're implementing this

597
00:23:49,039 --> 00:23:50,559
if you implement this on your network

598
00:23:50,559 --> 00:23:52,480
you can't assume that bgb customer

599
00:23:52,480 --> 00:23:54,559
traffic will be routed to them uh

600
00:23:54,559 --> 00:23:57,120
directly through you um it might touch

601
00:23:57,120 --> 00:23:59,600
your network before it

602
00:23:59,600 --> 00:24:02,000
it's routed uh it's routed back out of

603
00:24:02,000 --> 00:24:03,919
your network and then comes to them

604
00:24:03,919 --> 00:24:06,960
through that alternate path

605
00:24:10,240 --> 00:24:13,520
on the administrative side

606
00:24:13,679 --> 00:24:16,159
the new acl of course carried process

607
00:24:16,159 --> 00:24:18,159
and procedure implications

608
00:24:18,159 --> 00:24:20,320
any new bgp customer

609
00:24:20,320 --> 00:24:23,039
must have their prefixes added to the

610
00:24:23,039 --> 00:24:25,039
to the relevant object groups on on all

611
00:24:25,039 --> 00:24:28,640
routers any new aggregate blocks

612
00:24:28,640 --> 00:24:29,679
that

613
00:24:29,679 --> 00:24:31,840
that you purchase they need to be added

614
00:24:31,840 --> 00:24:34,720
to the to the aggregate groups

615
00:24:34,720 --> 00:24:36,000
and

616
00:24:36,000 --> 00:24:38,640
one one thing that was there was a a

617
00:24:38,640 --> 00:24:41,120
difficult shift for us was if a customer

618
00:24:41,120 --> 00:24:42,799
calls in with an issue where traffic is

619
00:24:42,799 --> 00:24:44,080
not getting through

620
00:24:44,080 --> 00:24:46,159
um we mentioned we might need to look at

621
00:24:46,159 --> 00:24:48,559
those filters uh it could be that that

622
00:24:48,559 --> 00:24:51,200
traffic is being dropped at your edge

623
00:24:51,200 --> 00:24:53,520
um but fortunately in practice this has

624
00:24:53,520 --> 00:24:56,400
not cost us that much in terms of of an

625
00:24:56,400 --> 00:24:58,080
admin time

626
00:24:58,080 --> 00:25:00,960
um we had uh two issues with this since

627
00:25:00,960 --> 00:25:03,039
implementation uh and and both of them

628
00:25:03,039 --> 00:25:05,279
were resolved very quickly

629
00:25:05,279 --> 00:25:06,320
um

630
00:25:06,320 --> 00:25:09,279
and uh lastly after implementation uh we

631
00:25:09,279 --> 00:25:11,279
checked back with the dsav team and they

632
00:25:11,279 --> 00:25:13,120
showed we were no longer vulnerable to

633
00:25:13,120 --> 00:25:16,479
that spoof dns traffic

634
00:25:18,159 --> 00:25:21,279
so a quick set of recommendations

635
00:25:21,279 --> 00:25:24,320
agree internally what you plan to block

636
00:25:24,320 --> 00:25:26,000
get all the stakeholders involved early

637
00:25:26,000 --> 00:25:27,679
and communicate often

638
00:25:27,679 --> 00:25:30,799
and test test test and test some more

639
00:25:30,799 --> 00:25:33,279
um start with the rules uh that permit

640
00:25:33,279 --> 00:25:35,440
uh start with the the

641
00:25:35,440 --> 00:25:37,279
changing the deny rules over to permit

642
00:25:37,279 --> 00:25:39,360
and and log those and run down make sure

643
00:25:39,360 --> 00:25:40,799
you just run down everything in your

644
00:25:40,799 --> 00:25:42,320
logs before you switch those rules to

645
00:25:42,320 --> 00:25:46,799
deny uh shouldn't be any surprises here

646
00:25:47,360 --> 00:25:49,760
um a little bit of future work

647
00:25:49,760 --> 00:25:51,600
we're looking at doing some automation

648
00:25:51,600 --> 00:25:52,880
of the

649
00:25:52,880 --> 00:25:54,640
object group management

650
00:25:54,640 --> 00:25:56,480
we're looking at doing further security

651
00:25:56,480 --> 00:25:58,320
analysis and lockdown of the

652
00:25:58,320 --> 00:26:01,200
point-to-point subnets uh right now uh

653
00:26:01,200 --> 00:26:03,760
these are open wide from any subnet to

654
00:26:03,760 --> 00:26:06,559
the slash 30 or slash 126.

655
00:26:06,559 --> 00:26:07,360
um

656
00:26:07,360 --> 00:26:09,520
a better practice might be to block all

657
00:26:09,520 --> 00:26:12,559
unnecessary protocols um

658
00:26:12,559 --> 00:26:15,360
so that might be an area of uh a future

659
00:26:15,360 --> 00:26:17,600
work uh and further characterization of

660
00:26:17,600 --> 00:26:19,760
the infrastructure subnets

661
00:26:19,760 --> 00:26:22,640
um deciding what we want to uh

662
00:26:22,640 --> 00:26:25,120
what specifically um we want to block is

663
00:26:25,120 --> 00:26:26,960
is this blocking enough

664
00:26:26,960 --> 00:26:29,919
should we be doing more

665
00:26:30,720 --> 00:26:32,000
and uh

666
00:26:32,000 --> 00:26:35,520
that is uh that's all i have um i do

667
00:26:35,520 --> 00:26:38,080
want to stress in the the appendix of

668
00:26:38,080 --> 00:26:39,039
this

669
00:26:39,039 --> 00:26:41,200
slideshow i do have an example of some

670
00:26:41,200 --> 00:26:42,799
of the object groups that we set up so

671
00:26:42,799 --> 00:26:43,679
this is

672
00:26:43,679 --> 00:26:45,520
um this is a sample of what we've

673
00:26:45,520 --> 00:26:48,400
actually configured on the routers

674
00:26:48,400 --> 00:26:49,919
and

675
00:26:49,919 --> 00:26:52,000
a sample of the access list these are

676
00:26:52,000 --> 00:26:54,240
actually the access lists that that

677
00:26:54,240 --> 00:26:56,320
we've deployed

678
00:26:56,320 --> 00:26:58,159
and then at the very end uh there's a

679
00:26:58,159 --> 00:27:01,039
short list of references

680
00:27:01,039 --> 00:27:02,400
and with that

681
00:27:02,400 --> 00:27:04,840
i'll take your

682
00:27:04,840 --> 00:27:07,039
questions right we do have a few

683
00:27:07,039 --> 00:27:10,159
questions um on the virtual platform

684
00:27:10,159 --> 00:27:12,559
abby friedman asks was there any concern

685
00:27:12,559 --> 00:27:15,279
about volume of acl deny locking on cpu

686
00:27:15,279 --> 00:27:17,600
and was there any impact seen

687
00:27:17,600 --> 00:27:20,080
um there was a concern

688
00:27:20,080 --> 00:27:21,840
with the way that the acl is structured

689
00:27:21,840 --> 00:27:23,600
certainly um

690
00:27:23,600 --> 00:27:26,159
we did have a concern we did look at uh

691
00:27:26,159 --> 00:27:28,480
the uh the capability of our hardware we

692
00:27:28,480 --> 00:27:29,919
run um

693
00:27:29,919 --> 00:27:34,240
asr 9900 routers um and those seem to

694
00:27:34,240 --> 00:27:36,880
have more than enough capacity so it was

695
00:27:36,880 --> 00:27:38,880
something that we looked at and

696
00:27:38,880 --> 00:27:42,240
uh fortunately hasn't been a problem

697
00:27:42,559 --> 00:27:43,840
okay still the one in person i've got

698
00:27:43,840 --> 00:27:45,120
another question for you here from

699
00:27:45,120 --> 00:27:47,600
matthew p tech who says good talk brian

700
00:27:47,600 --> 00:27:49,440
if you blocked all port equal zero

701
00:27:49,440 --> 00:27:51,120
traffic does that imply you block

702
00:27:51,120 --> 00:27:52,480
inbound fragments that could

703
00:27:52,480 --> 00:27:54,159
legitimately be destined for your

704
00:27:54,159 --> 00:27:56,240
customers did that generate many

705
00:27:56,240 --> 00:27:57,919
customer complaints

706
00:27:57,919 --> 00:28:00,480
um it did block fragments uh and that

707
00:28:00,480 --> 00:28:01,760
has not generated any customer

708
00:28:01,760 --> 00:28:04,480
complaints to date awesome

709
00:28:04,480 --> 00:28:06,799
and one more from virtual tony tobor

710
00:28:06,799 --> 00:28:08,640
asks i'm not positive that i followed it

711
00:28:08,640 --> 00:28:11,039
all correctly but if the same

712
00:28:11,039 --> 00:28:13,679
broad inbound acl forcing source within

713
00:28:13,679 --> 00:28:15,600
your address space does that mean a

714
00:28:15,600 --> 00:28:17,440
customer could spoof another address

715
00:28:17,440 --> 00:28:19,919
within that same space eg assigned to

716
00:28:19,919 --> 00:28:21,520
another customer

717
00:28:21,520 --> 00:28:23,360
yes there is that risk

718
00:28:23,360 --> 00:28:26,000
yes absolutely um we we regarded that

719
00:28:26,000 --> 00:28:27,360
risk as

720
00:28:27,360 --> 00:28:28,799
um

721
00:28:28,799 --> 00:28:32,080
low to medium uh our real goal was to

722
00:28:32,080 --> 00:28:34,240
was to block the the majority of the

723
00:28:34,240 --> 00:28:37,039
noise uh and and uh

724
00:28:37,039 --> 00:28:38,880
you're you're absolutely correct uh and

725
00:28:38,880 --> 00:28:42,000
that could be an area for future work

726
00:28:42,000 --> 00:28:42,960
yep

727
00:28:42,960 --> 00:28:46,399
anybody else have any questions here

728
00:28:47,120 --> 00:28:48,880
thank you for your time brian thank you

729
00:28:48,880 --> 00:28:51,830
so much

730
00:28:51,830 --> 00:28:55,939
[Applause]

731
00:28:55,960 --> 00:28:59,600
[Music]

732
00:28:59,600 --> 00:29:01,678
you

