1
00:00:00,000 --> 00:00:04,560
[Music]

2
00:00:04,560 --> 00:00:06,080
uh hey everyone my name is uh phil

3
00:00:06,080 --> 00:00:08,160
bedard i'm a principal engineer here at

4
00:00:08,160 --> 00:00:11,040
uh cisco systems um i'm here today at

5
00:00:11,040 --> 00:00:13,679
the nanaga 84 here i've done a couple

6
00:00:13,679 --> 00:00:15,200
other nanak presentations in the past

7
00:00:15,200 --> 00:00:17,920
but today talking about sdn or software

8
00:00:17,920 --> 00:00:20,160
defined networking for sp networks and

9
00:00:20,160 --> 00:00:21,520
this is kind of a

10
00:00:21,520 --> 00:00:23,680
2022 edition of this

11
00:00:23,680 --> 00:00:25,359
sdn has been around for quite some time

12
00:00:25,359 --> 00:00:26,880
this is a bit of an update on kind of

13
00:00:26,880 --> 00:00:29,279
what's going on in the industry

14
00:00:29,279 --> 00:00:32,640
and the overall landscape with sdn today

15
00:00:32,640 --> 00:00:34,160
we'll go ahead and

16
00:00:34,160 --> 00:00:36,480
get started

17
00:00:36,480 --> 00:00:38,320
uh brief agenda uh it's not a

18
00:00:38,320 --> 00:00:40,719
complicated agenda today it's really you

19
00:00:40,719 --> 00:00:42,640
know what is sdn i think most people

20
00:00:42,640 --> 00:00:45,039
understand what sdn is or at least have

21
00:00:45,039 --> 00:00:46,239
heard the term

22
00:00:46,239 --> 00:00:48,960
uh over the last you know 18 years or so

23
00:00:48,960 --> 00:00:51,039
since it originated

24
00:00:51,039 --> 00:00:52,320
and then we'll talk a bit about you know

25
00:00:52,320 --> 00:00:54,399
what is an sdn controller like what is

26
00:00:54,399 --> 00:00:56,640
the the element that's actually enabling

27
00:00:56,640 --> 00:00:58,800
sps to you know do sdn in their network

28
00:00:58,800 --> 00:01:00,719
today what are the standards and

29
00:01:00,719 --> 00:01:03,359
industry initiatives behind those

30
00:01:03,359 --> 00:01:05,360
um and like i said we'll take a look at

31
00:01:05,360 --> 00:01:07,520
these you know the implementations that

32
00:01:07,520 --> 00:01:09,760
are that are out there today um all the

33
00:01:09,760 --> 00:01:11,360
groups and all the standards that are

34
00:01:11,360 --> 00:01:13,680
going into you know how sps might use

35
00:01:13,680 --> 00:01:14,880
sdn

36
00:01:14,880 --> 00:01:17,200
as it's currently you know looked at in

37
00:01:17,200 --> 00:01:18,799
the industry

38
00:01:18,799 --> 00:01:20,799
we'll touch upon a couple of network use

39
00:01:20,799 --> 00:01:21,840
cases

40
00:01:21,840 --> 00:01:24,320
these aren't new use cases they're

41
00:01:24,320 --> 00:01:26,320
problems that sps have had to solve for

42
00:01:26,320 --> 00:01:28,400
quite some time in their networks

43
00:01:28,400 --> 00:01:30,000
but we'll take a look at how we can use

44
00:01:30,000 --> 00:01:31,920
sort of what we call an sdn controller

45
00:01:31,920 --> 00:01:34,240
to really enact those changes in the

46
00:01:34,240 --> 00:01:35,920
network and sort of the standards and

47
00:01:35,920 --> 00:01:38,320
data that goes into that

48
00:01:38,320 --> 00:01:40,880
obviously sdn is kind of a loaded term

49
00:01:40,880 --> 00:01:43,040
uh people overuse the term sdn and they

50
00:01:43,040 --> 00:01:44,720
have for many years to meet different

51
00:01:44,720 --> 00:01:45,600
things

52
00:01:45,600 --> 00:01:47,200
um so we'll kind of go ahead and look

53
00:01:47,200 --> 00:01:48,479
and you know give a little bit of

54
00:01:48,479 --> 00:01:50,720
background to ssdn and this is really

55
00:01:50,720 --> 00:01:52,720
kind of maybe what it means to me

56
00:01:52,720 --> 00:01:54,960
and how i've learned you know to to grow

57
00:01:54,960 --> 00:01:58,320
or love or hate at the term sdn uh and

58
00:01:58,320 --> 00:01:59,680
first of all a little bit of background

59
00:01:59,680 --> 00:02:00,719
is you know what do we consider a

60
00:02:00,719 --> 00:02:03,040
non-sdn network or a non-software

61
00:02:03,040 --> 00:02:04,640
defined network

62
00:02:04,640 --> 00:02:07,759
uh and really for sps that's you know 99

63
00:02:07,759 --> 00:02:09,440
of networks that are deployed today and

64
00:02:09,440 --> 00:02:12,000
have been deployed for for many decades

65
00:02:12,000 --> 00:02:13,760
you know this is a network where most of

66
00:02:13,760 --> 00:02:15,440
the intelligence and the control plane

67
00:02:15,440 --> 00:02:17,360
is embedded in the device and the device

68
00:02:17,360 --> 00:02:19,280
level software

69
00:02:19,280 --> 00:02:21,440
these are our traditional igps so things

70
00:02:21,440 --> 00:02:24,239
like routing protocols distribute routes

71
00:02:24,239 --> 00:02:25,760
end to end

72
00:02:25,760 --> 00:02:27,599
and then in turn the device has software

73
00:02:27,599 --> 00:02:29,280
that installs you know forwarding

74
00:02:29,280 --> 00:02:30,640
information

75
00:02:30,640 --> 00:02:32,640
i think most people are are really

76
00:02:32,640 --> 00:02:34,480
familiar with how these networks work

77
00:02:34,480 --> 00:02:35,920
today

78
00:02:35,920 --> 00:02:37,680
and it's not to say that these networks

79
00:02:37,680 --> 00:02:39,440
aren't intelligent

80
00:02:39,440 --> 00:02:41,120
we've added through standards and

81
00:02:41,120 --> 00:02:43,440
extensions uh over the years many

82
00:02:43,440 --> 00:02:45,519
different uh things to enhance the

83
00:02:45,519 --> 00:02:48,000
intelligence of the protocols and really

84
00:02:48,000 --> 00:02:50,080
the embedded networks themselves and the

85
00:02:50,080 --> 00:02:51,440
control planes when you look at things

86
00:02:51,440 --> 00:02:53,280
like rcvt

87
00:02:53,280 --> 00:02:54,720
uh and what we're doing with that

88
00:02:54,720 --> 00:02:57,040
segment routing uh things like bgp flow

89
00:02:57,040 --> 00:02:57,920
spec

90
00:02:57,920 --> 00:02:59,280
they're really adding intelligence to

91
00:02:59,280 --> 00:03:01,599
the network and more capabilities

92
00:03:01,599 --> 00:03:03,200
and if you look even at an application

93
00:03:03,200 --> 00:03:05,280
like auto bandwidth which is

94
00:03:05,280 --> 00:03:08,239
deployed at a lot of rsvt type networks

95
00:03:08,239 --> 00:03:10,159
that's really you can consider that an

96
00:03:10,159 --> 00:03:12,000
sdn application it's really an

97
00:03:12,000 --> 00:03:13,760
intelligent application that's taking in

98
00:03:13,760 --> 00:03:15,760
information from

99
00:03:15,760 --> 00:03:16,879
across the network to make more

100
00:03:16,879 --> 00:03:19,440
intelligent path routing decisions

101
00:03:19,440 --> 00:03:21,840
um but it's still limited in what can it

102
00:03:21,840 --> 00:03:24,640
could do uh being embedded into a device

103
00:03:24,640 --> 00:03:26,560
uh and the capabilities that

104
00:03:26,560 --> 00:03:28,319
mainly based off of the data that it's

105
00:03:28,319 --> 00:03:29,840
able to consume

106
00:03:29,840 --> 00:03:31,519
and make decisions on

107
00:03:31,519 --> 00:03:33,680
when we take a look at sdn or software

108
00:03:33,680 --> 00:03:35,599
defined networking i i've got a couple

109
00:03:35,599 --> 00:03:38,000
different views of it that i'll present

110
00:03:38,000 --> 00:03:39,519
really the purest view and this was the

111
00:03:39,519 --> 00:03:40,480
original

112
00:03:40,480 --> 00:03:42,319
intent of sdn

113
00:03:42,319 --> 00:03:44,080
was to have an external control plane

114
00:03:44,080 --> 00:03:46,400
that's very intelligent it's managing a

115
00:03:46,400 --> 00:03:48,720
set of relatively simple forwarding

116
00:03:48,720 --> 00:03:50,879
elements in the network

117
00:03:50,879 --> 00:03:52,799
i think everyone who knows the history

118
00:03:52,799 --> 00:03:55,439
of sdn is familiar with openflow

119
00:03:55,439 --> 00:03:58,480
openflow is really a a construct to

120
00:03:58,480 --> 00:04:00,720
implement a strict forwarding on a

121
00:04:00,720 --> 00:04:02,560
device level basis and the idea was i

122
00:04:02,560 --> 00:04:04,000
would have this

123
00:04:04,000 --> 00:04:06,319
brain or control element that was

124
00:04:06,319 --> 00:04:08,239
forwarding the end to end paths for

125
00:04:08,239 --> 00:04:10,080
applications

126
00:04:10,080 --> 00:04:13,200
or just routing across the network

127
00:04:13,200 --> 00:04:14,560
that didn't really you know come to

128
00:04:14,560 --> 00:04:17,680
fruition uh i think that you know what

129
00:04:17,680 --> 00:04:20,320
people wanted to do with sdn was a noble

130
00:04:20,320 --> 00:04:21,120
goal

131
00:04:21,120 --> 00:04:22,960
but there were a lot of gaps you know in

132
00:04:22,960 --> 00:04:24,639
sp networks just things like local

133
00:04:24,639 --> 00:04:26,720
protection and rerouting traffic when

134
00:04:26,720 --> 00:04:28,960
failures occur being able to handle

135
00:04:28,960 --> 00:04:30,560
those in a quick manner is difficult

136
00:04:30,560 --> 00:04:33,199
with a centralized control plane

137
00:04:33,199 --> 00:04:34,800
so we still needed a distributed control

138
00:04:34,800 --> 00:04:36,560
plane to really handle you know some of

139
00:04:36,560 --> 00:04:38,400
those use cases what it did help with

140
00:04:38,400 --> 00:04:40,160
though is to define what we call like

141
00:04:40,160 --> 00:04:42,960
you know standard interfaces for how we

142
00:04:42,960 --> 00:04:44,400
talk to devices

143
00:04:44,400 --> 00:04:46,320
uh standard languages for how we

144
00:04:46,320 --> 00:04:48,160
describe you know forwarding constructs

145
00:04:48,160 --> 00:04:49,680
you know openflow is kind of the initial

146
00:04:49,680 --> 00:04:52,320
one p4 is has emerged uh

147
00:04:52,320 --> 00:04:54,960
more recently as a way to do that and

148
00:04:54,960 --> 00:04:57,280
it's widely adopted for a variety of use

149
00:04:57,280 --> 00:05:00,080
cases so sdn has brought some benefits

150
00:05:00,080 --> 00:05:01,759
in getting people to look at how we can

151
00:05:01,759 --> 00:05:03,919
be more programmatic on how we manage

152
00:05:03,919 --> 00:05:05,199
these networks

153
00:05:05,199 --> 00:05:07,840
um you know my take on sdn is something

154
00:05:07,840 --> 00:05:09,680
that i really kind of call hybrid sdn

155
00:05:09,680 --> 00:05:12,240
and i'm not the originator of that term

156
00:05:12,240 --> 00:05:14,639
and it's really a more pragmatic view of

157
00:05:14,639 --> 00:05:16,639
where we're not you know discarding the

158
00:05:16,639 --> 00:05:17,919
the intelligence that's in the

159
00:05:17,919 --> 00:05:20,320
distributed control plane today

160
00:05:20,320 --> 00:05:22,160
it's really enhancing that with

161
00:05:22,160 --> 00:05:23,680
additional capabilities that are

162
00:05:23,680 --> 00:05:25,919
difficult to put into a device level

163
00:05:25,919 --> 00:05:26,960
software

164
00:05:26,960 --> 00:05:28,639
um so it's really about augmenting

165
00:05:28,639 --> 00:05:30,080
different layers of the network whether

166
00:05:30,080 --> 00:05:32,080
it's the service layer uh the traffic

167
00:05:32,080 --> 00:05:34,639
forwarding layer uh or you know the

168
00:05:34,639 --> 00:05:36,800
routing layer that drives that

169
00:05:36,800 --> 00:05:38,240
um so like i said it's really about

170
00:05:38,240 --> 00:05:39,759
enhancing the network and enhancing

171
00:05:39,759 --> 00:05:41,039
what's done today and i think when we

172
00:05:41,039 --> 00:05:43,199
look at what most sps want to do today

173
00:05:43,199 --> 00:05:46,080
that that really fits in that that story

174
00:05:46,080 --> 00:05:47,919
um a very simple example of something

175
00:05:47,919 --> 00:05:48,639
that

176
00:05:48,639 --> 00:05:50,800
you know some people do today those that

177
00:05:50,800 --> 00:05:52,560
are familiar with path computation

178
00:05:52,560 --> 00:05:55,120
elements that help to manage uh traffic

179
00:05:55,120 --> 00:05:56,880
engineering paths and to end across the

180
00:05:56,880 --> 00:05:57,919
network

181
00:05:57,919 --> 00:06:00,240
a pce is is you could consider that a

182
00:06:00,240 --> 00:06:02,400
form of sdn control in this hybrid

183
00:06:02,400 --> 00:06:04,960
network because i'm using some type of

184
00:06:04,960 --> 00:06:07,039
external data or constraints to add

185
00:06:07,039 --> 00:06:09,280
intelligence to a distributed network

186
00:06:09,280 --> 00:06:12,560
that's running uh traditional protocols

187
00:06:12,560 --> 00:06:14,160
um something that often goes hand in

188
00:06:14,160 --> 00:06:16,240
hand and is also kind of a buzz word in

189
00:06:16,240 --> 00:06:18,240
itself is this idea of intent based

190
00:06:18,240 --> 00:06:19,280
networks

191
00:06:19,280 --> 00:06:21,680
or intent driven networks like i said

192
00:06:21,680 --> 00:06:23,520
you often hear this sort of hand in hand

193
00:06:23,520 --> 00:06:25,440
when someone talks about sdn and a lot

194
00:06:25,440 --> 00:06:27,280
of times it is just sort of a buzzwordy

195
00:06:27,280 --> 00:06:28,800
term

196
00:06:28,800 --> 00:06:30,720
really the whole goal though is to move

197
00:06:30,720 --> 00:06:33,120
to what we call more declarative simple

198
00:06:33,120 --> 00:06:34,720
configurations

199
00:06:34,720 --> 00:06:37,520
to drive more complex network functions

200
00:06:37,520 --> 00:06:38,960
and this comes more into play when you

201
00:06:38,960 --> 00:06:41,759
talk about you know multiple sdn

202
00:06:41,759 --> 00:06:43,600
controller elements talking to each

203
00:06:43,600 --> 00:06:44,639
other

204
00:06:44,639 --> 00:06:46,800
the idea is to abstract a lot of the

205
00:06:46,800 --> 00:06:48,800
complexity of the underlying network

206
00:06:48,800 --> 00:06:50,800
from the upstream controller

207
00:06:50,800 --> 00:06:52,960
and really allow the the controllers

208
00:06:52,960 --> 00:06:54,720
that are managing you know more complex

209
00:06:54,720 --> 00:06:56,960
parts of the network to decompose those

210
00:06:56,960 --> 00:06:59,680
instructions into something that's uh

211
00:06:59,680 --> 00:07:00,960
can be configured on the network

212
00:07:00,960 --> 00:07:02,800
directly like i said it's all about

213
00:07:02,800 --> 00:07:05,440
abstracting sort of complexity as you go

214
00:07:05,440 --> 00:07:07,360
up layers in the network

215
00:07:07,360 --> 00:07:10,160
and being able to have like a simple

216
00:07:10,160 --> 00:07:13,039
call like i need service between a and z

217
00:07:13,039 --> 00:07:16,160
at a say an oss layer of the network and

218
00:07:16,160 --> 00:07:17,680
then have something intelligent

219
00:07:17,680 --> 00:07:19,840
underneath decompose that into the more

220
00:07:19,840 --> 00:07:21,919
explicit configuration

221
00:07:21,919 --> 00:07:23,919
versus that upper layer having to you

222
00:07:23,919 --> 00:07:25,759
know know how to do that

223
00:07:25,759 --> 00:07:28,000
across the multi-vendor networks

224
00:07:28,000 --> 00:07:29,360
end-to-end

225
00:07:29,360 --> 00:07:31,599
i mentioned the term controller a few

226
00:07:31,599 --> 00:07:33,440
times uh a controller when we looked at

227
00:07:33,440 --> 00:07:35,599
the kind of purist view of sdn that is

228
00:07:35,599 --> 00:07:37,599
the the external element that's helping

229
00:07:37,599 --> 00:07:39,199
to control the network

230
00:07:39,199 --> 00:07:41,039
um the definition of controller it's

231
00:07:41,039 --> 00:07:43,759
simply something that directs or the

232
00:07:43,759 --> 00:07:45,919
actions or functions of something in

233
00:07:45,919 --> 00:07:47,680
this case it's the network it's network

234
00:07:47,680 --> 00:07:49,280
devices or it's potentially you know

235
00:07:49,280 --> 00:07:50,960
other controllers

236
00:07:50,960 --> 00:07:52,639
because we can have controllers as

237
00:07:52,639 --> 00:07:54,720
you'll see it in a hierarchy

238
00:07:54,720 --> 00:07:56,319
and that really lets us build a more

239
00:07:56,319 --> 00:07:58,560
kind of scalable solution and how we

240
00:07:58,560 --> 00:08:00,560
enact sdn on the network uh there's some

241
00:08:00,560 --> 00:08:02,479
key components to that obviously on the

242
00:08:02,479 --> 00:08:04,400
southbound side you know i have to talk

243
00:08:04,400 --> 00:08:05,680
to the network elements and that's

244
00:08:05,680 --> 00:08:07,440
through a variety of you know protocols

245
00:08:07,440 --> 00:08:10,400
today both open and proprietary

246
00:08:10,400 --> 00:08:12,319
and then i have to aggregate that data

247
00:08:12,319 --> 00:08:14,879
um if i really want to deploy this in a

248
00:08:14,879 --> 00:08:16,960
multi-vendor network we have to

249
00:08:16,960 --> 00:08:18,879
normalize that data from different

250
00:08:18,879 --> 00:08:20,720
vendors into you know what we call

251
00:08:20,720 --> 00:08:22,240
standard models and i'll present a

252
00:08:22,240 --> 00:08:24,479
little bit about that later

253
00:08:24,479 --> 00:08:26,319
but this is really key to how we have

254
00:08:26,319 --> 00:08:28,400
good interaction between uh different

255
00:08:28,400 --> 00:08:30,879
controllers and you know be able to make

256
00:08:30,879 --> 00:08:33,440
this sort of a more multi-vendor open uh

257
00:08:33,440 --> 00:08:35,760
way of managing the networks

258
00:08:35,760 --> 00:08:37,200
the other part is rendering northbound

259
00:08:37,200 --> 00:08:38,719
interfaces i talked a bit about

260
00:08:38,719 --> 00:08:41,760
abstraction and the idea of sort of a

261
00:08:41,760 --> 00:08:43,839
low-level controller is to you know

262
00:08:43,839 --> 00:08:45,600
abstract the network from a higher level

263
00:08:45,600 --> 00:08:47,200
controller it has to

264
00:08:47,200 --> 00:08:48,800
be able to put that in a format that it

265
00:08:48,800 --> 00:08:50,080
can consume

266
00:08:50,080 --> 00:08:52,080
um and there are standards and there's

267
00:08:52,080 --> 00:08:54,000
initiatives today where where a lot of

268
00:08:54,000 --> 00:08:55,519
that's being worked on

269
00:08:55,519 --> 00:08:56,959
uh to make this a more you know

270
00:08:56,959 --> 00:08:59,680
multi-vendor multi-vendor interoperable

271
00:08:59,680 --> 00:09:01,839
type of architecture

272
00:09:01,839 --> 00:09:04,399
and really sdn is about intelligent

273
00:09:04,399 --> 00:09:06,880
applications um you know it's something

274
00:09:06,880 --> 00:09:08,320
that either has to make the network

275
00:09:08,320 --> 00:09:10,080
easier to operate

276
00:09:10,080 --> 00:09:12,560
um or enhance some type of functionality

277
00:09:12,560 --> 00:09:14,959
uh so really that's the key growth key

278
00:09:14,959 --> 00:09:17,360
goal of that otherwise you know why why

279
00:09:17,360 --> 00:09:18,880
implement something like software

280
00:09:18,880 --> 00:09:20,399
defined networking in the in the

281
00:09:20,399 --> 00:09:22,720
beginning like i said most this as i

282
00:09:22,720 --> 00:09:24,880
talk about it you know really is around

283
00:09:24,880 --> 00:09:27,040
the hybrid sdn view where i'm not

284
00:09:27,040 --> 00:09:29,120
throwing out the existing network uh

285
00:09:29,120 --> 00:09:30,720
it's really about adding functionality

286
00:09:30,720 --> 00:09:33,440
and covering specific use cases to help

287
00:09:33,440 --> 00:09:35,360
sort of enhance services or the

288
00:09:35,360 --> 00:09:37,279
infrastructure itself

289
00:09:37,279 --> 00:09:39,920
uh so why use sdn um and this is sort of

290
00:09:39,920 --> 00:09:42,080
the the agile question of you know what

291
00:09:42,080 --> 00:09:44,080
is it buying me is it helping me you

292
00:09:44,080 --> 00:09:45,760
know save money or make money hit some

293
00:09:45,760 --> 00:09:48,080
way sometimes it comes down to that

294
00:09:48,080 --> 00:09:50,480
there's a variety of use cases today uh

295
00:09:50,480 --> 00:09:53,040
really kind of the the definition view

296
00:09:53,040 --> 00:09:55,519
of it really it's enhancing the network

297
00:09:55,519 --> 00:09:57,760
uh these sda controllers and sdn in

298
00:09:57,760 --> 00:10:00,320
general uh the idea is to take in data

299
00:10:00,320 --> 00:10:02,560
generally it's not available in a

300
00:10:02,560 --> 00:10:05,040
distributed control plane um and add

301
00:10:05,040 --> 00:10:06,800
intelligence to to what's going on in

302
00:10:06,800 --> 00:10:08,640
the network

303
00:10:08,640 --> 00:10:10,160
we've done a lot of enhancements like i

304
00:10:10,160 --> 00:10:12,240
said to add intelligence to you know

305
00:10:12,240 --> 00:10:14,240
device level software and standard

306
00:10:14,240 --> 00:10:15,760
routing protocols

307
00:10:15,760 --> 00:10:17,760
at some point that becomes difficult

308
00:10:17,760 --> 00:10:20,240
obviously all sps know it's difficult to

309
00:10:20,240 --> 00:10:21,839
upgrade you know

310
00:10:21,839 --> 00:10:24,000
software on devices over time we've made

311
00:10:24,000 --> 00:10:26,800
that easier by having some application

312
00:10:26,800 --> 00:10:28,560
you know independent

313
00:10:28,560 --> 00:10:30,720
upgrade processes but still it's very

314
00:10:30,720 --> 00:10:32,320
difficult to do that heads and across

315
00:10:32,320 --> 00:10:33,360
the network

316
00:10:33,360 --> 00:10:35,200
uh it's very painful

317
00:10:35,200 --> 00:10:37,760
so really sdn allows us to have i'll say

318
00:10:37,760 --> 00:10:39,440
a more modern sort of application

319
00:10:39,440 --> 00:10:42,079
delivery outside of the device uh and

320
00:10:42,079 --> 00:10:43,839
the interfaces do the device stay

321
00:10:43,839 --> 00:10:46,560
standard they don't change very often

322
00:10:46,560 --> 00:10:48,320
so really i can rebuild that application

323
00:10:48,320 --> 00:10:49,920
as needed without touching the device

324
00:10:49,920 --> 00:10:51,040
itself

325
00:10:51,040 --> 00:10:52,399
i'll talk a bit about multi-layer

326
00:10:52,399 --> 00:10:54,240
networks and when i call talk about

327
00:10:54,240 --> 00:10:56,560
multi-layer typically i'm speaking about

328
00:10:56,560 --> 00:10:58,560
ip and optical networks and if you've

329
00:10:58,560 --> 00:11:01,279
seen sdn presentations in the past uh

330
00:11:01,279 --> 00:11:03,680
many of them cover how we better manage

331
00:11:03,680 --> 00:11:06,079
ip and optical layers together

332
00:11:06,079 --> 00:11:08,560
uh there was a lot of work put into like

333
00:11:08,560 --> 00:11:11,839
gm plus and gm pls was a device level

334
00:11:11,839 --> 00:11:13,040
protocol

335
00:11:13,040 --> 00:11:15,279
uh set of standards that were meant to

336
00:11:15,279 --> 00:11:17,600
really marry together ipn optical and be

337
00:11:17,600 --> 00:11:19,600
able to exchange data between the two

338
00:11:19,600 --> 00:11:21,600
make intelligent decisions

339
00:11:21,600 --> 00:11:23,680
after many many years it really never

340
00:11:23,680 --> 00:11:25,440
took off

341
00:11:25,440 --> 00:11:27,839
just due to a lot of interrupt type of

342
00:11:27,839 --> 00:11:28,959
issues

343
00:11:28,959 --> 00:11:30,959
even though these are standard protocols

344
00:11:30,959 --> 00:11:31,760
uh

345
00:11:31,760 --> 00:11:33,360
i once called sdn it's sort of the

346
00:11:33,360 --> 00:11:34,800
savior of that

347
00:11:34,800 --> 00:11:36,000
because really you're just kind of you

348
00:11:36,000 --> 00:11:38,480
know punting the intelligence upstream

349
00:11:38,480 --> 00:11:40,480
and i'm able to handle these multi-layer

350
00:11:40,480 --> 00:11:42,000
networks

351
00:11:42,000 --> 00:11:44,720
you know at the sda controller level

352
00:11:44,720 --> 00:11:46,800
and not necessarily between two devices

353
00:11:46,800 --> 00:11:48,640
themselves you know obviously optimizing

354
00:11:48,640 --> 00:11:50,399
network resources that's sort of a

355
00:11:50,399 --> 00:11:52,639
boilerplate you know reason to run

356
00:11:52,639 --> 00:11:54,240
things like sdn

357
00:11:54,240 --> 00:11:56,079
there's a lot of ancillary benefits and

358
00:11:56,079 --> 00:11:58,160
things like network visibility and

359
00:11:58,160 --> 00:12:00,000
that's mostly due to the amount of data

360
00:12:00,000 --> 00:12:01,760
that i'm getting from the network

361
00:12:01,760 --> 00:12:04,000
uh in the applications that you know the

362
00:12:04,000 --> 00:12:05,839
sda controller runs

363
00:12:05,839 --> 00:12:08,079
really allows me to analyze and inspect

364
00:12:08,079 --> 00:12:09,600
that data and get more out of the

365
00:12:09,600 --> 00:12:12,320
network uh i said if nothing else it's

366
00:12:12,320 --> 00:12:14,560
going to enhance visibility by doing a

367
00:12:14,560 --> 00:12:16,480
lot of data collection for the network

368
00:12:16,480 --> 00:12:19,600
itself uh who's using sdn today uh i'll

369
00:12:19,600 --> 00:12:21,760
say even today very very few people are

370
00:12:21,760 --> 00:12:23,200
using you know software-defined

371
00:12:23,200 --> 00:12:25,920
networking especially in sp networks

372
00:12:25,920 --> 00:12:28,399
uh you'll hear you've seen papers and

373
00:12:28,399 --> 00:12:30,079
maybe some nano presentations from

374
00:12:30,079 --> 00:12:32,240
content providers and those are doing a

375
00:12:32,240 --> 00:12:34,240
lot of you know egress traffic steering

376
00:12:34,240 --> 00:12:36,079
of bgp controllers or routing

377
00:12:36,079 --> 00:12:37,760
controllers that they're using and to

378
00:12:37,760 --> 00:12:39,440
end across their network

379
00:12:39,440 --> 00:12:41,440
those are a bit advanced

380
00:12:41,440 --> 00:12:43,040
obviously there's people doing it the

381
00:12:43,040 --> 00:12:45,040
amount is pretty low

382
00:12:45,040 --> 00:12:47,200
most sps are looking at you know more

383
00:12:47,200 --> 00:12:49,760
what we call this hybrid sdn model

384
00:12:49,760 --> 00:12:52,160
and on the bottom this is if people

385
00:12:52,160 --> 00:12:54,160
haven't seen it this is kind of the

386
00:12:54,160 --> 00:12:56,000
the gartner hype curve

387
00:12:56,000 --> 00:12:58,240
i mean definitely sdn went through its

388
00:12:58,240 --> 00:13:00,399
uh you know eras or multiple eras of

389
00:13:00,399 --> 00:13:02,480
this sort of peak of uh

390
00:13:02,480 --> 00:13:05,040
uh inflated expectations

391
00:13:05,040 --> 00:13:06,880
uh and sort of disillusionment means

392
00:13:06,880 --> 00:13:08,240
that you know nothing's really happening

393
00:13:08,240 --> 00:13:09,440
with it i think we're at a point now

394
00:13:09,440 --> 00:13:10,399
where we're starting to see more

395
00:13:10,399 --> 00:13:12,720
initiatives around uh sdn and sp

396
00:13:12,720 --> 00:13:14,639
networks where we're kind of on the

397
00:13:14,639 --> 00:13:18,079
upstream uh or the upswing uh of the

398
00:13:18,079 --> 00:13:19,839
sort of enlightenment phase we're not

399
00:13:19,839 --> 00:13:21,839
quite to a productivity phase yet but i

400
00:13:21,839 --> 00:13:24,240
think we're we're somewhere on this uh

401
00:13:24,240 --> 00:13:26,639
on this uh this line or trajectory up

402
00:13:26,639 --> 00:13:27,519
now

403
00:13:27,519 --> 00:13:30,000
uh mainly driven by a lot of industry

404
00:13:30,000 --> 00:13:32,320
initiatives around sdm that have come to

405
00:13:32,320 --> 00:13:34,800
life in the last few years so i'll talk

406
00:13:34,800 --> 00:13:36,320
i'll spend a bit of time about talking

407
00:13:36,320 --> 00:13:38,000
about kind of standards and initiatives

408
00:13:38,000 --> 00:13:40,399
that are going on right now

409
00:13:40,399 --> 00:13:41,760
key to this i talked a bit about

410
00:13:41,760 --> 00:13:43,279
multi-vendor

411
00:13:43,279 --> 00:13:45,760
and to drive multi-vendor we really need

412
00:13:45,760 --> 00:13:48,000
interop between between these different

413
00:13:48,000 --> 00:13:49,440
controllers between the different

414
00:13:49,440 --> 00:13:50,720
elements

415
00:13:50,720 --> 00:13:52,399
there's been a lot of push towards

416
00:13:52,399 --> 00:13:54,320
standardizing a lot of that

417
00:13:54,320 --> 00:13:56,160
in the last few years

418
00:13:56,160 --> 00:13:57,519
you know we need a standard kind of

419
00:13:57,519 --> 00:13:59,519
architectural definition kind of roles

420
00:13:59,519 --> 00:14:01,120
and responsibilities of what different

421
00:14:01,120 --> 00:14:02,800
controllers do in the network when it

422
00:14:02,800 --> 00:14:04,639
comes to sdn

423
00:14:04,639 --> 00:14:05,920
and the thing that's really helped you

424
00:14:05,920 --> 00:14:07,519
know drive a lot of the standard data

425
00:14:07,519 --> 00:14:09,519
models uh yang

426
00:14:09,519 --> 00:14:10,800
i think most people are familiar with

427
00:14:10,800 --> 00:14:12,240
gang at this point

428
00:14:12,240 --> 00:14:14,399
it's the de facto standard of how we

429
00:14:14,399 --> 00:14:17,680
model data at the device level the

430
00:14:17,680 --> 00:14:19,040
service level

431
00:14:19,040 --> 00:14:20,880
even you know how we describe network

432
00:14:20,880 --> 00:14:23,440
topologies and i'll show that in a bit

433
00:14:23,440 --> 00:14:25,120
and it's really necessary to normalize

434
00:14:25,120 --> 00:14:26,639
you know what's often proprietary

435
00:14:26,639 --> 00:14:29,519
network data into vendor agnostic data

436
00:14:29,519 --> 00:14:31,120
so that we could share you know not only

437
00:14:31,120 --> 00:14:33,440
to applications uh within an sda

438
00:14:33,440 --> 00:14:35,199
controller but also to other controllers

439
00:14:35,199 --> 00:14:36,480
themselves

440
00:14:36,480 --> 00:14:38,320
and also protocols standard interface

441
00:14:38,320 --> 00:14:41,040
protocols and how things interact uh and

442
00:14:41,040 --> 00:14:43,920
you know the models drive the apis

443
00:14:43,920 --> 00:14:46,079
really so the standard models drive

444
00:14:46,079 --> 00:14:47,760
standard apis having standard

445
00:14:47,760 --> 00:14:50,240
communication protocols is also key

446
00:14:50,240 --> 00:14:52,000
at the device level we have net complete

447
00:14:52,000 --> 00:14:53,600
things like gmi that have seen a lot of

448
00:14:53,600 --> 00:14:55,839
traction in the last you know five to

449
00:14:55,839 --> 00:14:58,000
ten years now netcomp is obviously

450
00:14:58,000 --> 00:15:00,079
widely implemented on these vendor

451
00:15:00,079 --> 00:15:01,600
devices today

452
00:15:01,600 --> 00:15:03,600
from controller to controller rest comp

453
00:15:03,600 --> 00:15:05,760
is really the de facto standard i think

454
00:15:05,760 --> 00:15:07,760
everyone is kind of collect on using

455
00:15:07,760 --> 00:15:08,639
that

456
00:15:08,639 --> 00:15:10,959
it does have some drawbacks but it is

457
00:15:10,959 --> 00:15:12,320
sort of the standard and it's the way

458
00:15:12,320 --> 00:15:14,399
that uh controllers communicate between

459
00:15:14,399 --> 00:15:16,480
each other uh so i mentioned having an

460
00:15:16,480 --> 00:15:19,360
architectural framework uh to to really

461
00:15:19,360 --> 00:15:21,360
build this you know uh

462
00:15:21,360 --> 00:15:23,760
sda controller architecture

463
00:15:23,760 --> 00:15:25,519
um and some of that's being driven by

464
00:15:25,519 --> 00:15:27,920
the ietf it's specifically the actn

465
00:15:27,920 --> 00:15:29,759
working group the abstraction control of

466
00:15:29,759 --> 00:15:31,360
traffic engineered networks and they've

467
00:15:31,360 --> 00:15:34,079
defined rc 8453

468
00:15:34,079 --> 00:15:35,920
and really it's a loose framework of

469
00:15:35,920 --> 00:15:39,199
controllers in how sdn works that

470
00:15:39,199 --> 00:15:40,720
what it really allows you to do is move

471
00:15:40,720 --> 00:15:41,759
away from

472
00:15:41,759 --> 00:15:43,920
sort of a big monolithic

473
00:15:43,920 --> 00:15:45,360
type of piece of software that's

474
00:15:45,360 --> 00:15:47,519
controlling

475
00:15:47,519 --> 00:15:49,279
you know many different network types

476
00:15:49,279 --> 00:15:51,120
different domains and breaks that into

477
00:15:51,120 --> 00:15:52,320
you know

478
00:15:52,320 --> 00:15:55,040
more easily consumable you know the

479
00:15:55,040 --> 00:15:56,800
smaller controllers that are responsible

480
00:15:56,800 --> 00:15:59,440
for just their own specific tasks

481
00:15:59,440 --> 00:16:01,519
uh so you'll often see these terms in

482
00:16:01,519 --> 00:16:03,680
the in the actin framework of like an

483
00:16:03,680 --> 00:16:05,440
mdsc you'll see that called a

484
00:16:05,440 --> 00:16:08,399
hierarchical controller in other text

485
00:16:08,399 --> 00:16:10,320
and this notion of a pnc is really

486
00:16:10,320 --> 00:16:12,320
similar to a domain controller it's what

487
00:16:12,320 --> 00:16:14,240
controls a specific domain of the

488
00:16:14,240 --> 00:16:16,639
network uh that it has some sort of you

489
00:16:16,639 --> 00:16:18,720
know technical knowledge of

490
00:16:18,720 --> 00:16:20,480
so it's the lowest layer controller

491
00:16:20,480 --> 00:16:22,480
that's actually talking to the network

492
00:16:22,480 --> 00:16:23,680
devices

493
00:16:23,680 --> 00:16:25,279
so we talked a bit about roles and the

494
00:16:25,279 --> 00:16:26,240
roles of these different different

495
00:16:26,240 --> 00:16:28,240
controllers the cnc or customer network

496
00:16:28,240 --> 00:16:31,519
controller that's an oss bss system it's

497
00:16:31,519 --> 00:16:33,440
often an orchestration system or a

498
00:16:33,440 --> 00:16:35,360
workflow manager

499
00:16:35,360 --> 00:16:37,040
so that's where you want to extract you

500
00:16:37,040 --> 00:16:39,440
know most of the intent to so like i

501
00:16:39,440 --> 00:16:41,120
said if you have a service that says i

502
00:16:41,120 --> 00:16:44,320
just need a vpn from a to z um you know

503
00:16:44,320 --> 00:16:46,639
that's the type of you know function

504
00:16:46,639 --> 00:16:49,519
call it would make to a multi-domain

505
00:16:49,519 --> 00:16:51,279
service controller

506
00:16:51,279 --> 00:16:53,040
which then is broken down into you know

507
00:16:53,040 --> 00:16:55,199
more consumable bytes and then sent to

508
00:16:55,199 --> 00:16:57,600
specific provisioning controllers

509
00:16:57,600 --> 00:17:00,160
absolutely so the hco or the mdsc it

510
00:17:00,160 --> 00:17:01,680
aggregates information from all the

511
00:17:01,680 --> 00:17:03,279
domains so it can make intelligent

512
00:17:03,279 --> 00:17:05,359
decisions and like if it does get a

513
00:17:05,359 --> 00:17:08,400
request for a service from a

514
00:17:08,400 --> 00:17:09,520
cnc

515
00:17:09,520 --> 00:17:11,679
it's able to decompose that into its

516
00:17:11,679 --> 00:17:13,439
constituent parts and send it to where

517
00:17:13,439 --> 00:17:15,119
it needs to go

518
00:17:15,119 --> 00:17:16,880
for example an ip plus optical

519
00:17:16,880 --> 00:17:19,359
provisioning uh operation would be

520
00:17:19,359 --> 00:17:21,679
handled by an mdsc

521
00:17:21,679 --> 00:17:23,280
the provisioning network controller like

522
00:17:23,280 --> 00:17:25,760
i said that's really it uses its sbi to

523
00:17:25,760 --> 00:17:28,799
connect to the devices themselves

524
00:17:28,799 --> 00:17:30,559
it could be other controllers as well

525
00:17:30,559 --> 00:17:32,640
there's no strict hierarchy with this it

526
00:17:32,640 --> 00:17:34,320
doesn't have to be three layers of

527
00:17:34,320 --> 00:17:35,760
controllers

528
00:17:35,760 --> 00:17:37,039
you could have many different layers of

529
00:17:37,039 --> 00:17:38,799
controllers that interact and

530
00:17:38,799 --> 00:17:41,360
communicate with each other

531
00:17:41,360 --> 00:17:44,080
and ectn doesn't specifically

532
00:17:44,080 --> 00:17:46,240
define the protocols used between the

533
00:17:46,240 --> 00:17:47,919
controllers and the interfaces like i

534
00:17:47,919 --> 00:17:49,600
said it's more of this sort of loose

535
00:17:49,600 --> 00:17:51,440
architecture of how they should

536
00:17:51,440 --> 00:17:52,880
communicate with each other but not the

537
00:17:52,880 --> 00:17:55,360
underlying low-level uh protocols and

538
00:17:55,360 --> 00:17:56,559
things like that

539
00:17:56,559 --> 00:17:58,559
uh what else is the ietf doing specific

540
00:17:58,559 --> 00:18:01,600
to sdn uh we talked about yearly leading

541
00:18:01,600 --> 00:18:03,840
standardization at every level

542
00:18:03,840 --> 00:18:07,280
um so the l2nm l3 and m those are

543
00:18:07,280 --> 00:18:09,280
standard network models for vpn

544
00:18:09,280 --> 00:18:10,880
configuration

545
00:18:10,880 --> 00:18:12,880
so it really gives a vendor agnostic way

546
00:18:12,880 --> 00:18:15,280
to describe vpn services and then it's

547
00:18:15,280 --> 00:18:17,440
up to the the controllers themselves to

548
00:18:17,440 --> 00:18:19,360
translate that into you know device

549
00:18:19,360 --> 00:18:21,200
level and configuration

550
00:18:21,200 --> 00:18:23,760
um so we've seen a good adoption of you

551
00:18:23,760 --> 00:18:25,120
know these models like they still have

552
00:18:25,120 --> 00:18:27,120
some gaps they need work and i

553
00:18:27,120 --> 00:18:28,799
you know it would be good for more

554
00:18:28,799 --> 00:18:30,400
operators to be involved in those

555
00:18:30,400 --> 00:18:31,360
efforts

556
00:18:31,360 --> 00:18:33,200
uh there's also been a lot of work done

557
00:18:33,200 --> 00:18:35,039
in the last five or six years around

558
00:18:35,039 --> 00:18:37,360
network models and how we describe

559
00:18:37,360 --> 00:18:39,520
networks uh and this really comes into

560
00:18:39,520 --> 00:18:41,600
play when you talk about controller

561
00:18:41,600 --> 00:18:43,440
to controller interaction

562
00:18:43,440 --> 00:18:45,360
and i'll talk a bit about that in the

563
00:18:45,360 --> 00:18:46,880
coming up

564
00:18:46,880 --> 00:18:49,120
and then really continued work on all

565
00:18:49,120 --> 00:18:51,280
the protocols that sort of enable sdn

566
00:18:51,280 --> 00:18:53,039
these are the standard interfaces to the

567
00:18:53,039 --> 00:18:55,120
devices into the controllers

568
00:18:55,120 --> 00:18:56,880
the ones i list here are more device

569
00:18:56,880 --> 00:18:58,799
level uh standards but you know

570
00:18:58,799 --> 00:19:01,039
enhancements to psep you know continued

571
00:19:01,039 --> 00:19:03,440
you know isis and igp

572
00:19:03,440 --> 00:19:04,720
extensions

573
00:19:04,720 --> 00:19:08,080
bgpls is an important one because bgpls

574
00:19:08,080 --> 00:19:09,039
is a

575
00:19:09,039 --> 00:19:10,799
common kind of de facto way that i

576
00:19:10,799 --> 00:19:12,559
learned topology information from a

577
00:19:12,559 --> 00:19:14,720
network um and then things like network

578
00:19:14,720 --> 00:19:16,559
telemetry framework to

579
00:19:16,559 --> 00:19:18,080
you know create more standards-based

580
00:19:18,080 --> 00:19:19,919
ways to get uh you know performance

581
00:19:19,919 --> 00:19:22,320
measurement data off the network

582
00:19:22,320 --> 00:19:23,840
another group that's really driving

583
00:19:23,840 --> 00:19:25,679
these sdn standards and i would say

584
00:19:25,679 --> 00:19:26,720
doing

585
00:19:26,720 --> 00:19:28,880
a lot of work currently

586
00:19:28,880 --> 00:19:32,000
is the onf tip project so it's the

587
00:19:32,000 --> 00:19:34,480
telecom infra project

588
00:19:34,480 --> 00:19:36,640
so onf is open networking foundation and

589
00:19:36,640 --> 00:19:38,240
they have a number of different projects

590
00:19:38,240 --> 00:19:39,840
and then under those have a bunch of

591
00:19:39,840 --> 00:19:41,440
different groups

592
00:19:41,440 --> 00:19:44,480
and specifically this is the opt group

593
00:19:44,480 --> 00:19:46,640
and then even another consortium under

594
00:19:46,640 --> 00:19:48,960
that is one that we call mustin

595
00:19:48,960 --> 00:19:50,720
for short you just kind of call it tip

596
00:19:50,720 --> 00:19:52,799
must and it stands for better mandatory

597
00:19:52,799 --> 00:19:55,760
use case requirements for transport sdn

598
00:19:55,760 --> 00:19:57,280
uh what they're really focused on is

599
00:19:57,280 --> 00:20:00,720
defining like that the sbi the nbi

600
00:20:00,720 --> 00:20:02,960
uh protocols and things so this is where

601
00:20:02,960 --> 00:20:05,039
you know operators are trying to define

602
00:20:05,039 --> 00:20:06,880
some of the low-level constructs that

603
00:20:06,880 --> 00:20:08,720
are used for sdn

604
00:20:08,720 --> 00:20:10,480
and it really gives guidance to you know

605
00:20:10,480 --> 00:20:12,080
those in the open source community as

606
00:20:12,080 --> 00:20:13,760
well as vendors on you know what they

607
00:20:13,760 --> 00:20:15,440
should be building

608
00:20:15,440 --> 00:20:17,840
as a controller within a controller

609
00:20:17,840 --> 00:20:19,679
they're also defining use cases so a use

610
00:20:19,679 --> 00:20:22,080
case might be you know provision a vpn

611
00:20:22,080 --> 00:20:23,760
from a to z or

612
00:20:23,760 --> 00:20:25,360
you know provision an optical circuit

613
00:20:25,360 --> 00:20:26,880
from a to z

614
00:20:26,880 --> 00:20:28,480
so they're defining those use cases and

615
00:20:28,480 --> 00:20:30,240
those workflows

616
00:20:30,240 --> 00:20:32,320
so if you know those that are building

617
00:20:32,320 --> 00:20:34,159
the controllers you know want some

618
00:20:34,159 --> 00:20:36,080
guidance on what they should be building

619
00:20:36,080 --> 00:20:37,760
what operators are looking for that's

620
00:20:37,760 --> 00:20:40,480
what this group is trying to define

621
00:20:40,480 --> 00:20:42,559
this group is driven by operators

622
00:20:42,559 --> 00:20:44,640
there's no vendor participation in the

623
00:20:44,640 --> 00:20:46,640
must group and as of today i think

624
00:20:46,640 --> 00:20:48,240
there's 10 different operators that are

625
00:20:48,240 --> 00:20:50,400
involved but definitely

626
00:20:50,400 --> 00:20:52,240
if others want to get involved simply

627
00:20:52,240 --> 00:20:54,400
reach out to that team uh always looking

628
00:20:54,400 --> 00:20:56,240
for for more involvement um and they've

629
00:20:56,240 --> 00:20:58,480
just they've you know when i talk about

630
00:20:58,480 --> 00:21:00,320
sdn architectures you know they've

631
00:21:00,320 --> 00:21:02,960
defined their own uh architecture but as

632
00:21:02,960 --> 00:21:04,240
you can see it looks almost like

633
00:21:04,240 --> 00:21:06,640
dynacall to the actin architecture uh

634
00:21:06,640 --> 00:21:07,919
some of the names are a little bit

635
00:21:07,919 --> 00:21:09,520
different uh but that's for a reason you

636
00:21:09,520 --> 00:21:11,760
know we want to coalesce really on one

637
00:21:11,760 --> 00:21:14,720
type of uh sdn architecture

638
00:21:14,720 --> 00:21:15,840
for networks

639
00:21:15,840 --> 00:21:18,000
specifically sp networks

640
00:21:18,000 --> 00:21:20,159
um so i said a lot of similarities to

641
00:21:20,159 --> 00:21:22,000
what you see with actin and how they

642
00:21:22,000 --> 00:21:25,120
define the the controller interactions

643
00:21:25,120 --> 00:21:26,400
so we talk about

644
00:21:26,400 --> 00:21:28,559
and most of that you know covers both ip

645
00:21:28,559 --> 00:21:30,000
and optical we talk about the

646
00:21:30,000 --> 00:21:32,080
architectures that are involved and how

647
00:21:32,080 --> 00:21:34,640
we define that and the tip must they're

648
00:21:34,640 --> 00:21:36,640
working on use cases for both ip and

649
00:21:36,640 --> 00:21:37,760
optical

650
00:21:37,760 --> 00:21:39,360
one thing that i want to mention uh

651
00:21:39,360 --> 00:21:41,679
specific in onf as well in the otcc

652
00:21:41,679 --> 00:21:42,640
project

653
00:21:42,640 --> 00:21:45,840
is the transport api or tapi

654
00:21:45,840 --> 00:21:47,440
and it's a little bit different tapi is

655
00:21:47,440 --> 00:21:49,360
a set of yang models

656
00:21:49,360 --> 00:21:51,360
that really describe all the functions i

657
00:21:51,360 --> 00:21:53,200
need to manage an optical transport

658
00:21:53,200 --> 00:21:54,400
network

659
00:21:54,400 --> 00:21:55,760
optical transport networks are

660
00:21:55,760 --> 00:21:58,159
traditionally very proprietary uh

661
00:21:58,159 --> 00:22:00,720
there's no real device level interop at

662
00:22:00,720 --> 00:22:02,559
with optical networks like we have with

663
00:22:02,559 --> 00:22:05,200
ip and routers and switches

664
00:22:05,200 --> 00:22:07,360
um they haven't you know gm plus exists

665
00:22:07,360 --> 00:22:08,960
but it's not really interoperable

666
00:22:08,960 --> 00:22:10,480
between vendors there's a lot of secret

667
00:22:10,480 --> 00:22:13,440
sauce that happens so tapia is a way to

668
00:22:13,440 --> 00:22:15,520
standardize a set of models

669
00:22:15,520 --> 00:22:16,640
that really is rendered on the

670
00:22:16,640 --> 00:22:18,960
northbound side of a controller

671
00:22:18,960 --> 00:22:20,559
and it abstracts all the functions to

672
00:22:20,559 --> 00:22:22,080
manage those networks

673
00:22:22,080 --> 00:22:24,559
and really tapi has seen very widespread

674
00:22:24,559 --> 00:22:27,679
adoption over the last three or so years

675
00:22:27,679 --> 00:22:29,840
it's really come to a point where almost

676
00:22:29,840 --> 00:22:31,840
all of the optical vendors have a tapi

677
00:22:31,840 --> 00:22:33,840
based controller they can be used to

678
00:22:33,840 --> 00:22:35,360
manage their networks there's still

679
00:22:35,360 --> 00:22:36,720
differences in those they have to be

680
00:22:36,720 --> 00:22:38,880
worked out but there's still some gaps

681
00:22:38,880 --> 00:22:41,039
in tapi but it's it's been a really good

682
00:22:41,039 --> 00:22:43,200
initiative to sort of cost the industry

683
00:22:43,200 --> 00:22:45,280
on a single sort of standard set of

684
00:22:45,280 --> 00:22:47,039
models for how we manage optical

685
00:22:47,039 --> 00:22:48,320
networks

686
00:22:48,320 --> 00:22:50,000
um and there's also been you know

687
00:22:50,000 --> 00:22:51,200
interop events and you can find

688
00:22:51,200 --> 00:22:53,600
information that say that oif has done

689
00:22:53,600 --> 00:22:57,440
specifically with tappy interop events

690
00:22:57,440 --> 00:22:59,120
and it's referenced by these groups like

691
00:22:59,120 --> 00:23:01,440
tip must who's you know defining some of

692
00:23:01,440 --> 00:23:03,919
the low-level interactions uh you know

693
00:23:03,919 --> 00:23:06,000
they're using tappy to do that so

694
00:23:06,000 --> 00:23:08,080
definitely would look into tapping and

695
00:23:08,080 --> 00:23:09,840
the things that are being done in with

696
00:23:09,840 --> 00:23:12,000
transport api today it's a very simple

697
00:23:12,000 --> 00:23:14,480
example of a tapi connectivity service

698
00:23:14,480 --> 00:23:15,679
and this is an example of like a

699
00:23:15,679 --> 00:23:19,200
wavelength service across a dwdm network

700
00:23:19,200 --> 00:23:21,520
everything in tapi is hierarchical like

701
00:23:21,520 --> 00:23:22,880
most networks

702
00:23:22,880 --> 00:23:25,679
optical networks are built in layers

703
00:23:25,679 --> 00:23:27,600
so tapi has a way to describe you know

704
00:23:27,600 --> 00:23:28,799
each layer as well as the

705
00:23:28,799 --> 00:23:30,559
interconnections between between those

706
00:23:30,559 --> 00:23:32,320
layers

707
00:23:32,320 --> 00:23:34,640
as a quick example of a tapi uh to

708
00:23:34,640 --> 00:23:36,559
create that last service like this is

709
00:23:36,559 --> 00:23:38,880
what a tappy rest comp call looks like

710
00:23:38,880 --> 00:23:42,000
it's more for looking out later tapi is

711
00:23:42,000 --> 00:23:44,080
quite complicated at times uh it's

712
00:23:44,080 --> 00:23:46,799
definitely not meant to be human driven

713
00:23:46,799 --> 00:23:48,880
you a human would not write one of these

714
00:23:48,880 --> 00:23:50,559
types of requests it's really meant to

715
00:23:50,559 --> 00:23:52,640
be consumed by controllers and driven by

716
00:23:52,640 --> 00:23:53,919
controllers

717
00:23:53,919 --> 00:23:56,159
so one of the key parts to these sdn

718
00:23:56,159 --> 00:23:57,919
controllers is really data ingestion

719
00:23:57,919 --> 00:24:00,080
data ingestion is what's needed uh in

720
00:24:00,080 --> 00:24:02,320
order to enact changes to the network

721
00:24:02,320 --> 00:24:04,000
it's sort of you know table stakes for

722
00:24:04,000 --> 00:24:06,320
what sdn needs to do it needs data from

723
00:24:06,320 --> 00:24:08,880
the network to make uh its applications

724
00:24:08,880 --> 00:24:11,520
more intelligent and to make decisions

725
00:24:11,520 --> 00:24:13,200
and i kind of separate this between

726
00:24:13,200 --> 00:24:16,400
packet and optical like i said this is

727
00:24:16,400 --> 00:24:18,159
ip and optical that's really kind of the

728
00:24:18,159 --> 00:24:19,919
the drivers for what a lot of folks are

729
00:24:19,919 --> 00:24:22,720
doing in sdn today at least within sp

730
00:24:22,720 --> 00:24:23,919
networks

731
00:24:23,919 --> 00:24:25,760
uh so really i need you know topology

732
00:24:25,760 --> 00:24:28,159
data to make uh routing decisions i need

733
00:24:28,159 --> 00:24:29,919
topology data as well as you know say

734
00:24:29,919 --> 00:24:32,640
performance metric data off the network

735
00:24:32,640 --> 00:24:33,919
um and

736
00:24:33,919 --> 00:24:36,000
i'd say the industry is within the last

737
00:24:36,000 --> 00:24:38,640
few years and probably even longer now

738
00:24:38,640 --> 00:24:41,120
five or six years has really driven to a

739
00:24:41,120 --> 00:24:42,720
set of standards and they're more de

740
00:24:42,720 --> 00:24:44,400
facto standards

741
00:24:44,400 --> 00:24:46,159
than really hard advanced standards but

742
00:24:46,159 --> 00:24:48,799
you know bgpls is is used those that

743
00:24:48,799 --> 00:24:51,120
aren't familiar with bgp ls is bgp link

744
00:24:51,120 --> 00:24:52,240
state

745
00:24:52,240 --> 00:24:54,799
and it's a way to translate igp data

746
00:24:54,799 --> 00:24:56,799
into bgp nlri

747
00:24:56,799 --> 00:24:58,799
uh which just makes it easier to package

748
00:24:58,799 --> 00:25:01,840
and for an external system to consume it

749
00:25:01,840 --> 00:25:03,600
rather than trying to participate into

750
00:25:03,600 --> 00:25:06,159
the the igp itself

751
00:25:06,159 --> 00:25:10,000
and then piece up this is a path

752
00:25:10,000 --> 00:25:12,080
computation element protocol

753
00:25:12,080 --> 00:25:13,600
it's really the de facto standard for

754
00:25:13,600 --> 00:25:15,200
how we get traffic engineering

755
00:25:15,200 --> 00:25:17,200
information off the network

756
00:25:17,200 --> 00:25:19,679
so psep on a device has the ability to

757
00:25:19,679 --> 00:25:21,679
report lsps that are

758
00:25:21,679 --> 00:25:23,200
going through that device or it's the

759
00:25:23,200 --> 00:25:25,039
head end for

760
00:25:25,039 --> 00:25:26,960
so if you look at sort of ip controllers

761
00:25:26,960 --> 00:25:28,720
or packet layer controllers that vendors

762
00:25:28,720 --> 00:25:30,720
have built or even open source

763
00:25:30,720 --> 00:25:32,880
they always include you know bgp lls and

764
00:25:32,880 --> 00:25:35,279
psep components to it

765
00:25:35,279 --> 00:25:36,880
there's still a lot of direct device

766
00:25:36,880 --> 00:25:38,960
interrogation for getting data off you

767
00:25:38,960 --> 00:25:41,760
know either cli screen scraping snmp not

768
00:25:41,760 --> 00:25:44,000
everything is available in your

769
00:25:44,000 --> 00:25:46,000
standardized protocols

770
00:25:46,000 --> 00:25:47,279
that you might need so when you talk

771
00:25:47,279 --> 00:25:49,120
about a domain controller

772
00:25:49,120 --> 00:25:51,200
it might have different ways but the key

773
00:25:51,200 --> 00:25:52,799
is that it needs to expose that

774
00:25:52,799 --> 00:25:55,840
northbound in a standard interface

775
00:25:55,840 --> 00:25:57,120
so when we look at controller to

776
00:25:57,120 --> 00:25:59,039
controller interaction that's a really

777
00:25:59,039 --> 00:26:00,400
sort of key

778
00:26:00,400 --> 00:26:02,080
and we look at topology information

779
00:26:02,080 --> 00:26:04,000
which is like i said sort of table

780
00:26:04,000 --> 00:26:06,960
stakes for doing this sda control

781
00:26:06,960 --> 00:26:09,440
the ietf has defined a lot of rfcs

782
00:26:09,440 --> 00:26:12,480
around a standardized network model and

783
00:26:12,480 --> 00:26:15,440
there's a base model in rc 8345 and

784
00:26:15,440 --> 00:26:17,279
there's a number of rcs and drafts that

785
00:26:17,279 --> 00:26:20,000
build upon that so they add data to the

786
00:26:20,000 --> 00:26:21,600
base network model which may just

787
00:26:21,600 --> 00:26:23,520
include say node information so if i

788
00:26:23,520 --> 00:26:26,159
want to add t information l2 information

789
00:26:26,159 --> 00:26:28,320
even segment routing information

790
00:26:28,320 --> 00:26:30,159
there's other drafts that now add

791
00:26:30,159 --> 00:26:32,159
information to that

792
00:26:32,159 --> 00:26:34,400
we also have test models that describe

793
00:26:34,400 --> 00:26:36,080
in great detail traffic engineering

794
00:26:36,080 --> 00:26:37,840
networks and there's also hooks between

795
00:26:37,840 --> 00:26:39,919
the teas models and the the standardized

796
00:26:39,919 --> 00:26:41,679
network models that we could combine a

797
00:26:41,679 --> 00:26:42,799
really rich

798
00:26:42,799 --> 00:26:44,559
uh combined network model and i think

799
00:26:44,559 --> 00:26:46,480
what you'll find is you know most like i

800
00:26:46,480 --> 00:26:48,880
said most ip controllers i've kind of

801
00:26:48,880 --> 00:26:51,120
coalesced on these now these models in

802
00:26:51,120 --> 00:26:53,440
order to describe and uh consume uh

803
00:26:53,440 --> 00:26:56,320
network data uh just for references is

804
00:26:56,320 --> 00:26:59,440
what the rc 8345 your topology model

805
00:26:59,440 --> 00:27:01,120
looks like with a couple of nodes as

806
00:27:01,120 --> 00:27:03,200
well as a couple of links uh with and

807
00:27:03,200 --> 00:27:05,840
this uses both l2 and l3 extensions as

808
00:27:05,840 --> 00:27:08,799
well as the sr draft extensions

809
00:27:08,799 --> 00:27:10,400
for the network model in order to

810
00:27:10,400 --> 00:27:12,559
describe a

811
00:27:12,559 --> 00:27:14,640
ip topology and typically this is being

812
00:27:14,640 --> 00:27:16,240
consumed by like a hierarchical

813
00:27:16,240 --> 00:27:18,960
controller or even an ossps system it

814
00:27:18,960 --> 00:27:20,880
just depends on the uh

815
00:27:20,880 --> 00:27:23,520
the use cases involved

816
00:27:23,520 --> 00:27:25,760
in many cases you also need metric data

817
00:27:25,760 --> 00:27:27,440
this is what i call metric data which is

818
00:27:27,440 --> 00:27:29,279
really interface stats

819
00:27:29,279 --> 00:27:32,320
flow data through like netflow or ipfix

820
00:27:32,320 --> 00:27:33,919
if you want to make you know even really

821
00:27:33,919 --> 00:27:35,919
application level traffic decisions

822
00:27:35,919 --> 00:27:37,600
across the network that you're trying to

823
00:27:37,600 --> 00:27:38,559
control

824
00:27:38,559 --> 00:27:40,080
and like i said that metric data is

825
00:27:40,080 --> 00:27:42,399
overly overlaid on top of the topology

826
00:27:42,399 --> 00:27:45,840
data or te data even uh it really gives

827
00:27:45,840 --> 00:27:49,120
you a very powerful you know way to

828
00:27:49,120 --> 00:27:50,720
build an intelligent application for

829
00:27:50,720 --> 00:27:52,480
traffic steering and other types of

830
00:27:52,480 --> 00:27:54,000
applications

831
00:27:54,000 --> 00:27:55,600
so we look at network data on the

832
00:27:55,600 --> 00:27:56,960
optical side

833
00:27:56,960 --> 00:27:59,120
so the controller to the network

834
00:27:59,120 --> 00:28:02,000
that's still very often proprietary it

835
00:28:02,000 --> 00:28:04,880
might be tl1 some cases snfp

836
00:28:04,880 --> 00:28:06,720
some vendors have moved to even using

837
00:28:06,720 --> 00:28:08,240
things like netcount

838
00:28:08,240 --> 00:28:10,080
but typically all the coding the models

839
00:28:10,080 --> 00:28:12,240
that are used on the ip side we have a

840
00:28:12,240 --> 00:28:14,320
lot of standardized models for you know

841
00:28:14,320 --> 00:28:16,159
device level interaction either through

842
00:28:16,159 --> 00:28:18,799
ietf or openconfig

843
00:28:18,799 --> 00:28:20,960
the optical the device level is you know

844
00:28:20,960 --> 00:28:22,720
very proprietary

845
00:28:22,720 --> 00:28:24,000
um and that's the reason why the

846
00:28:24,000 --> 00:28:25,840
controller to controller

847
00:28:25,840 --> 00:28:28,559
you know is so important uh because it's

848
00:28:28,559 --> 00:28:31,200
really rendering that proprietary data

849
00:28:31,200 --> 00:28:33,679
into something that's normalized

850
00:28:33,679 --> 00:28:36,080
it's standard across different vendors

851
00:28:36,080 --> 00:28:38,240
so something like the inventory from an

852
00:28:38,240 --> 00:28:40,240
optical device

853
00:28:40,240 --> 00:28:42,640
looks the same and tappy

854
00:28:42,640 --> 00:28:44,240
you know from one vendor to another

855
00:28:44,240 --> 00:28:46,399
vendor uh that's i said that's really

856
00:28:46,399 --> 00:28:48,080
the key in making this interoperable and

857
00:28:48,080 --> 00:28:49,440
being able to build sort of a

858
00:28:49,440 --> 00:28:52,640
multi-vendor open uh sdn architecture

859
00:28:52,640 --> 00:28:55,120
uh like a tapi is a de facto standard

860
00:28:55,120 --> 00:28:56,799
there's a number of models that are used

861
00:28:56,799 --> 00:28:59,279
to describe both the hardware as well as

862
00:28:59,279 --> 00:29:01,679
the topology that's created

863
00:29:01,679 --> 00:29:03,440
as well as the services that are created

864
00:29:03,440 --> 00:29:05,840
over that like i said it's quite uh it's

865
00:29:05,840 --> 00:29:07,919
quite rich today and what they've built

866
00:29:07,919 --> 00:29:10,640
uh and i said there's a number of

867
00:29:10,640 --> 00:29:12,880
implementations of it already

868
00:29:12,880 --> 00:29:14,399
yeah so we've talked a bit about network

869
00:29:14,399 --> 00:29:17,279
data and how network data is consumed by

870
00:29:17,279 --> 00:29:19,840
this hierarchy of controllers uh in this

871
00:29:19,840 --> 00:29:21,440
case you can see this is just kind of a

872
00:29:21,440 --> 00:29:22,799
graphical view of what i just talked

873
00:29:22,799 --> 00:29:24,720
about so you know the optical domain

874
00:29:24,720 --> 00:29:27,440
controllers and you know this is where

875
00:29:27,440 --> 00:29:29,840
i'm using typically proprietary methods

876
00:29:29,840 --> 00:29:31,279
to get that data

877
00:29:31,279 --> 00:29:33,360
uh and then ipcontroller you know like i

878
00:29:33,360 --> 00:29:35,200
said we're more standardized on the ips

879
00:29:35,200 --> 00:29:37,120
or router switch side of how you get

880
00:29:37,120 --> 00:29:39,039
data off the device

881
00:29:39,039 --> 00:29:40,880
not always but in many cases we have

882
00:29:40,880 --> 00:29:43,360
more options than on optical uh but the

883
00:29:43,360 --> 00:29:44,640
key is you know what gets rendered

884
00:29:44,640 --> 00:29:46,320
northbound of those controllers is all

885
00:29:46,320 --> 00:29:48,960
standardized data uh that way the the

886
00:29:48,960 --> 00:29:51,440
hierarchical controller or hco you know

887
00:29:51,440 --> 00:29:52,880
it could be from different vendors that

888
00:29:52,880 --> 00:29:54,880
are consuming that data

889
00:29:54,880 --> 00:29:56,480
and the applications on those

890
00:29:56,480 --> 00:29:58,159
controllers that are able to use the

891
00:29:58,159 --> 00:30:00,640
data in a normalized manner no matter

892
00:30:00,640 --> 00:30:02,080
where it came from

893
00:30:02,080 --> 00:30:03,760
so where do we have standards gaps with

894
00:30:03,760 --> 00:30:05,919
this i would say most of the gaps are on

895
00:30:05,919 --> 00:30:08,320
the ip side the good thing about tapi is

896
00:30:08,320 --> 00:30:10,320
tapi really kind of covers

897
00:30:10,320 --> 00:30:11,840
just about everything on the optical

898
00:30:11,840 --> 00:30:13,120
side

899
00:30:13,120 --> 00:30:15,600
from topology equipment inventory fault

900
00:30:15,600 --> 00:30:16,960
data

901
00:30:16,960 --> 00:30:18,960
we have good topology data on the ip

902
00:30:18,960 --> 00:30:20,240
side

903
00:30:20,240 --> 00:30:21,440
but that's about it you know when you

904
00:30:21,440 --> 00:30:23,360
talk about physical inventory and this

905
00:30:23,360 --> 00:30:25,600
is really controller to controller we

906
00:30:25,600 --> 00:30:27,600
spent a lot of time and effort in the ip

907
00:30:27,600 --> 00:30:30,000
world on standardizing device models or

908
00:30:30,000 --> 00:30:32,320
device level models uh we haven't done a

909
00:30:32,320 --> 00:30:34,080
lot when we talk about you know

910
00:30:34,080 --> 00:30:35,360
controller

911
00:30:35,360 --> 00:30:38,399
ipcontroller to say hco models

912
00:30:38,399 --> 00:30:40,080
um so there's still things like fault

913
00:30:40,080 --> 00:30:42,320
data uh physical inventory did and

914
00:30:42,320 --> 00:30:44,240
recently a draft was introduced and it

915
00:30:44,240 --> 00:30:45,679
says optical but i think it'll be

916
00:30:45,679 --> 00:30:48,080
expanded to cover you know packet layer

917
00:30:48,080 --> 00:30:49,919
devices as well and it's really just a

918
00:30:49,919 --> 00:30:51,840
way to aggregate data from multiple

919
00:30:51,840 --> 00:30:54,159
devices into a single model that could

920
00:30:54,159 --> 00:30:55,919
be exposed northbound to different

921
00:30:55,919 --> 00:30:57,120
controllers

922
00:30:57,120 --> 00:30:58,880
so i said in the ip world we've got a

923
00:30:58,880 --> 00:31:01,760
few gaps that i figure need to be solved

924
00:31:01,760 --> 00:31:04,240
in order to make that you know more more

925
00:31:04,240 --> 00:31:05,679
applicable

926
00:31:05,679 --> 00:31:08,159
um just a couple you know statements on

927
00:31:08,159 --> 00:31:10,159
you know open source controllers uh you

928
00:31:10,159 --> 00:31:11,279
know we see more and more vendor

929
00:31:11,279 --> 00:31:13,200
controllers and i think if you look at

930
00:31:13,200 --> 00:31:14,480
sort of the leading

931
00:31:14,480 --> 00:31:16,960
three or four you know equipment vendors

932
00:31:16,960 --> 00:31:19,360
uh you know they may have hcos they

933
00:31:19,360 --> 00:31:20,480
probably have you know domain

934
00:31:20,480 --> 00:31:23,279
controllers specific to optical and ip

935
00:31:23,279 --> 00:31:24,960
if those are you know equipment that

936
00:31:24,960 --> 00:31:26,320
they supply

937
00:31:26,320 --> 00:31:27,600
uh there's a lot of open source

938
00:31:27,600 --> 00:31:29,679
controllers as well the two really kind

939
00:31:29,679 --> 00:31:31,600
of popular ones and i think people have

940
00:31:31,600 --> 00:31:33,600
probably heard about open daylight as an

941
00:31:33,600 --> 00:31:35,200
sdn controller

942
00:31:35,200 --> 00:31:36,880
it's been around for quite quite some

943
00:31:36,880 --> 00:31:37,919
time

944
00:31:37,919 --> 00:31:39,919
it's a java based system it's it's very

945
00:31:39,919 --> 00:31:41,600
plug-and-play and you know it's got

946
00:31:41,600 --> 00:31:42,880
different use cases and different

947
00:31:42,880 --> 00:31:45,039
applications that it solved over time

948
00:31:45,039 --> 00:31:47,120
it still remained the base uh for

949
00:31:47,120 --> 00:31:48,880
different open source as well as you

950
00:31:48,880 --> 00:31:51,120
know commercial vendor controllers so

951
00:31:51,120 --> 00:31:52,960
really it is a framework for building

952
00:31:52,960 --> 00:31:54,640
applications and sharing data between

953
00:31:54,640 --> 00:31:56,960
those applications that enables these

954
00:31:56,960 --> 00:32:00,240
sdn apps to run on the open daylight

955
00:32:00,240 --> 00:32:01,440
architecture

956
00:32:01,440 --> 00:32:04,320
uh onos uh open network operating system

957
00:32:04,320 --> 00:32:07,120
you know network also started you know

958
00:32:07,120 --> 00:32:09,519
10 plus years ago now uh is now part of

959
00:32:09,519 --> 00:32:13,279
the onf uh very similar architecture to

960
00:32:13,279 --> 00:32:15,519
daylight they have progressed there's a

961
00:32:15,519 --> 00:32:17,679
micro services based version of onos

962
00:32:17,679 --> 00:32:20,080
today uh and they're tackling a wide

963
00:32:20,080 --> 00:32:21,919
range of use cases uh i'll say the

964
00:32:21,919 --> 00:32:24,640
development you know onos is probably uh

965
00:32:24,640 --> 00:32:25,919
as

966
00:32:25,919 --> 00:32:27,600
there's more people working on odos

967
00:32:27,600 --> 00:32:29,360
today as well as you know modern use

968
00:32:29,360 --> 00:32:33,039
cases around 5g bng or openbag

969
00:32:33,039 --> 00:32:34,480
so there's been actually a lot of work

970
00:32:34,480 --> 00:32:36,080
and even you know some

971
00:32:36,080 --> 00:32:38,720
actual production implementations of

972
00:32:38,720 --> 00:32:40,320
things that are done with onos so it

973
00:32:40,320 --> 00:32:42,320
definitely would

974
00:32:42,320 --> 00:32:43,919
take a look at that and the initiatives

975
00:32:43,919 --> 00:32:46,080
that they have and see if others want to

976
00:32:46,080 --> 00:32:47,919
get involved in those

977
00:32:47,919 --> 00:32:49,360
so we'll talk a little bit about network

978
00:32:49,360 --> 00:32:50,640
use cases

979
00:32:50,640 --> 00:32:53,039
and these are sdn use cases

980
00:32:53,039 --> 00:32:54,640
they're not new use cases but they're

981
00:32:54,640 --> 00:32:56,080
things that can be solved in a better

982
00:32:56,080 --> 00:32:58,320
way typically with some type of external

983
00:32:58,320 --> 00:33:00,880
controller or sdn control

984
00:33:00,880 --> 00:33:02,480
outside of what you're doing just in the

985
00:33:02,480 --> 00:33:05,279
the network itself um at first though

986
00:33:05,279 --> 00:33:06,880
i'll talk about sort of real world view

987
00:33:06,880 --> 00:33:08,720
of where people are with sda controllers

988
00:33:08,720 --> 00:33:11,039
today and this plays a part in sort of

989
00:33:11,039 --> 00:33:14,080
use cases in how you solve problems uh

990
00:33:14,080 --> 00:33:15,760
with sdn today

991
00:33:15,760 --> 00:33:17,200
you really consider the controller as

992
00:33:17,200 --> 00:33:18,640
part of the network

993
00:33:18,640 --> 00:33:20,880
i think that's a good way of looking at

994
00:33:20,880 --> 00:33:22,480
it and it's really part of the network

995
00:33:22,480 --> 00:33:25,039
control plane um so the applications

996
00:33:25,039 --> 00:33:26,720
that are built are are meant to be

997
00:33:26,720 --> 00:33:29,200
real-time sort of closed-loop automated

998
00:33:29,200 --> 00:33:31,120
uh you know control applications when it

999
00:33:31,120 --> 00:33:33,440
comes to things like traffic steering or

1000
00:33:33,440 --> 00:33:35,840
resource steering in the network

1001
00:33:35,840 --> 00:33:38,080
i think when you look at so some

1002
00:33:38,080 --> 00:33:39,279
applications you know they're not

1003
00:33:39,279 --> 00:33:41,760
necessarily closed loop applications

1004
00:33:41,760 --> 00:33:44,720
uh a lot of them are visibility based uh

1005
00:33:44,720 --> 00:33:46,320
things just making it easier to manage

1006
00:33:46,320 --> 00:33:48,080
the network through data collection and

1007
00:33:48,080 --> 00:33:50,000
kind of this is the first entry point we

1008
00:33:50,000 --> 00:33:51,039
see for

1009
00:33:51,039 --> 00:33:53,360
uh for sdn controllers or what you would

1010
00:33:53,360 --> 00:33:56,159
want to call it a modern sda controller

1011
00:33:56,159 --> 00:33:58,000
especially in sp networks it's starting

1012
00:33:58,000 --> 00:33:59,840
with visibility it's really bringing

1013
00:33:59,840 --> 00:34:01,440
data into the network

1014
00:34:01,440 --> 00:34:02,720
and i think as i mentioned earlier

1015
00:34:02,720 --> 00:34:04,240
there's a lot of benefits of just the

1016
00:34:04,240 --> 00:34:06,399
visibility aspect of bringing the data

1017
00:34:06,399 --> 00:34:09,440
into a single sort of repository and

1018
00:34:09,440 --> 00:34:11,359
then if if you're feeding that into an

1019
00:34:11,359 --> 00:34:14,159
hco or a hierarchical controller

1020
00:34:14,159 --> 00:34:16,000
then you get you know a good view of

1021
00:34:16,000 --> 00:34:18,159
that data across multiple domains so you

1022
00:34:18,159 --> 00:34:19,918
get things like fault correlation that

1023
00:34:19,918 --> 00:34:21,440
maybe you didn't have before because you

1024
00:34:21,440 --> 00:34:23,440
didn't have all that data in a single

1025
00:34:23,440 --> 00:34:25,280
repository

1026
00:34:25,280 --> 00:34:27,679
or a set of applications that could look

1027
00:34:27,679 --> 00:34:29,440
at data from multiple domains and be

1028
00:34:29,440 --> 00:34:30,879
able to you know make some sort of

1029
00:34:30,879 --> 00:34:32,320
intelligent

1030
00:34:32,320 --> 00:34:34,480
decision or correlate some type of fault

1031
00:34:34,480 --> 00:34:36,239
between those domains in an intelligent

1032
00:34:36,239 --> 00:34:37,679
way

1033
00:34:37,679 --> 00:34:39,520
uh like i said fully close-up automation

1034
00:34:39,520 --> 00:34:41,359
that's still pretty rare although that

1035
00:34:41,359 --> 00:34:42,879
happens in our distributed control

1036
00:34:42,879 --> 00:34:44,560
planes today uh not a lot of people

1037
00:34:44,560 --> 00:34:47,280
trust the uh the centralized box to make

1038
00:34:47,280 --> 00:34:49,040
those types of decisions so often what

1039
00:34:49,040 --> 00:34:50,879
we see today is is more of like a

1040
00:34:50,879 --> 00:34:52,800
recommendation engine

1041
00:34:52,800 --> 00:34:54,239
as i say

1042
00:34:54,239 --> 00:34:56,000
speaking of our deployments and what we

1043
00:34:56,000 --> 00:34:57,280
do

1044
00:34:57,280 --> 00:34:59,520
the real sdn control type applications

1045
00:34:59,520 --> 00:35:00,480
usually

1046
00:35:00,480 --> 00:35:02,240
they start with a recommendation and

1047
00:35:02,240 --> 00:35:03,520
then there's a button for someone to

1048
00:35:03,520 --> 00:35:05,119
push or something you know for them to

1049
00:35:05,119 --> 00:35:07,440
enact a change on the network uh fully

1050
00:35:07,440 --> 00:35:09,119
closed loop we're not not quite there

1051
00:35:09,119 --> 00:35:10,000
yet

1052
00:35:10,000 --> 00:35:12,560
uh for for the majority of service

1053
00:35:12,560 --> 00:35:14,880
providers uh so one use case it's sort

1054
00:35:14,880 --> 00:35:17,119
of near dear to me is this notion of

1055
00:35:17,119 --> 00:35:19,520
shared risk lead groups

1056
00:35:19,520 --> 00:35:21,520
and like i said a lot of all a lot of

1057
00:35:21,520 --> 00:35:22,240
the

1058
00:35:22,240 --> 00:35:24,800
sdn applications that we look at today

1059
00:35:24,800 --> 00:35:25,680
are

1060
00:35:25,680 --> 00:35:27,760
talk about multi-layer networks with ip

1061
00:35:27,760 --> 00:35:30,480
and optical and this is definitely an ip

1062
00:35:30,480 --> 00:35:33,200
and optical type of use case

1063
00:35:33,200 --> 00:35:35,599
so typically at dwdm networks today you

1064
00:35:35,599 --> 00:35:37,680
know we have multiple wavelengths there

1065
00:35:37,680 --> 00:35:40,240
could be multiple ip interfaces

1066
00:35:40,240 --> 00:35:42,960
that use the same path of the network

1067
00:35:42,960 --> 00:35:44,480
and we don't want to

1068
00:35:44,480 --> 00:35:45,599
you know

1069
00:35:45,599 --> 00:35:47,440
we don't want to step on those uh you

1070
00:35:47,440 --> 00:35:49,040
know two interfaces that are using the

1071
00:35:49,040 --> 00:35:51,359
same ddm link so you don't want say one

1072
00:35:51,359 --> 00:35:53,200
interface protecting another interface

1073
00:35:53,200 --> 00:35:55,040
that share the same fiber

1074
00:35:55,040 --> 00:35:57,040
uh you know fiber cuts are the most

1075
00:35:57,040 --> 00:35:58,800
common by far the most common type of

1076
00:35:58,800 --> 00:36:00,480
failure networks today

1077
00:36:00,480 --> 00:36:02,880
so for certain services and interfaces

1078
00:36:02,880 --> 00:36:04,560
you you know you don't want to protect

1079
00:36:04,560 --> 00:36:07,040
one using another over the same fiber or

1080
00:36:07,040 --> 00:36:09,359
conduit or node

1081
00:36:09,359 --> 00:36:11,920
and we seed information on the ip

1082
00:36:11,920 --> 00:36:15,040
networks traditionally with srlg data

1083
00:36:15,040 --> 00:36:16,880
from the optical network but it's it's

1084
00:36:16,880 --> 00:36:18,640
quite cumbersome

1085
00:36:18,640 --> 00:36:20,480
in many cases to get data off the

1086
00:36:20,480 --> 00:36:22,240
optical network and correlate it with

1087
00:36:22,240 --> 00:36:23,839
the ip network

1088
00:36:23,839 --> 00:36:25,680
because we just you don't have a good

1089
00:36:25,680 --> 00:36:27,280
way to share that information between

1090
00:36:27,280 --> 00:36:28,960
the two different systems

1091
00:36:28,960 --> 00:36:31,359
gmpls has solved some of this

1092
00:36:31,359 --> 00:36:34,400
but it's a very vendor closed solution

1093
00:36:34,400 --> 00:36:36,800
you can't you know hook up a gmpls

1094
00:36:36,800 --> 00:36:38,800
router from one vendor and a gmpls

1095
00:36:38,800 --> 00:36:41,040
optical mode from another vendor

1096
00:36:41,040 --> 00:36:42,640
and have this type of sharing takes

1097
00:36:42,640 --> 00:36:44,720
place they've been vendor proprietary

1098
00:36:44,720 --> 00:36:47,280
solutions and even those solutions are

1099
00:36:47,280 --> 00:36:48,960
are not widely deployed at all because

1100
00:36:48,960 --> 00:36:50,880
they're they're quite complicated yeah

1101
00:36:50,880 --> 00:36:52,240
so we look at

1102
00:36:52,240 --> 00:36:54,800
risk link groups or srlgs the use case

1103
00:36:54,800 --> 00:36:56,480
is really where the ip layer it needs

1104
00:36:56,480 --> 00:36:58,480
the optical layer information for things

1105
00:36:58,480 --> 00:37:00,880
like protection diversity uh and to be

1106
00:37:00,880 --> 00:37:02,880
honest it's just an easier problem to

1107
00:37:02,880 --> 00:37:04,960
solve by sending all of this data

1108
00:37:04,960 --> 00:37:07,040
upstream to a more intelligent you know

1109
00:37:07,040 --> 00:37:09,359
called sdn application

1110
00:37:09,359 --> 00:37:11,440
so they can dynamically learn what's on

1111
00:37:11,440 --> 00:37:13,520
the optical network and then it can see

1112
00:37:13,520 --> 00:37:16,079
the ip network with that information

1113
00:37:16,079 --> 00:37:18,720
so if it dynamically changes

1114
00:37:18,720 --> 00:37:20,480
things like optical restoration so

1115
00:37:20,480 --> 00:37:22,960
optical restoration changes the optical

1116
00:37:22,960 --> 00:37:25,760
path dynamically and if the ip layer is

1117
00:37:25,760 --> 00:37:27,520
unaware of that and normally it is

1118
00:37:27,520 --> 00:37:29,119
unaware of that

1119
00:37:29,119 --> 00:37:31,119
then the data that it has about shared

1120
00:37:31,119 --> 00:37:33,520
risk is already out of date

1121
00:37:33,520 --> 00:37:35,920
so one very simple application is being

1122
00:37:35,920 --> 00:37:37,920
able to take all this data together

1123
00:37:37,920 --> 00:37:39,119
correlate it

1124
00:37:39,119 --> 00:37:40,880
and then seed the router with updated

1125
00:37:40,880 --> 00:37:42,800
information almost in real time as it

1126
00:37:42,800 --> 00:37:44,160
happens

1127
00:37:44,160 --> 00:37:46,000
and this is an application that's been

1128
00:37:46,000 --> 00:37:48,000
looked at for for many years when it

1129
00:37:48,000 --> 00:37:50,800
comes to using sdn and sda controllers

1130
00:37:50,800 --> 00:37:53,359
and getting data off the network

1131
00:37:53,359 --> 00:37:54,960
but like i said this is

1132
00:37:54,960 --> 00:37:56,800
one very simple common use case that

1133
00:37:56,800 --> 00:37:59,680
could be solved with an sdi controller

1134
00:37:59,680 --> 00:38:01,520
another common use case is just you know

1135
00:38:01,520 --> 00:38:03,359
traffic balancing this is really more of

1136
00:38:03,359 --> 00:38:06,800
a bgp ebgp external edge traffic

1137
00:38:06,800 --> 00:38:08,720
balancing use case and when you look at

1138
00:38:08,720 --> 00:38:10,720
the sdm like controllers that are built

1139
00:38:10,720 --> 00:38:13,359
by by content providers

1140
00:38:13,359 --> 00:38:15,839
and others probably more on the advanced

1141
00:38:15,839 --> 00:38:17,440
stage of automation

1142
00:38:17,440 --> 00:38:19,680
they've definitely you know

1143
00:38:19,680 --> 00:38:20,560
have

1144
00:38:20,560 --> 00:38:22,480
solved this use case

1145
00:38:22,480 --> 00:38:25,280
over time another use case is edge

1146
00:38:25,280 --> 00:38:27,119
traffic balancing and this is a use case

1147
00:38:27,119 --> 00:38:29,440
it's been solved over time by different

1148
00:38:29,440 --> 00:38:31,280
content providers they're systems that

1149
00:38:31,280 --> 00:38:34,079
they've published white papers on even

1150
00:38:34,079 --> 00:38:35,680
that describe how they do this in a

1151
00:38:35,680 --> 00:38:38,079
really an sdn controlled manner and a

1152
00:38:38,079 --> 00:38:39,280
lot of that

1153
00:38:39,280 --> 00:38:41,200
in a true sdn sense it's really about

1154
00:38:41,200 --> 00:38:43,680
using network data to make those uh

1155
00:38:43,680 --> 00:38:46,000
those decisions and not just you know

1156
00:38:46,000 --> 00:38:48,079
you know standard network data like i

1157
00:38:48,079 --> 00:38:49,839
said the the real benefit to an sda

1158
00:38:49,839 --> 00:38:52,560
application is being able to consume uh

1159
00:38:52,560 --> 00:38:54,320
you know more granular data or things

1160
00:38:54,320 --> 00:38:55,680
that maybe you just don't even get off

1161
00:38:55,680 --> 00:38:57,440
the network uh maybe there's things like

1162
00:38:57,440 --> 00:39:00,079
cost maps that come from another source

1163
00:39:00,079 --> 00:39:02,640
uh geographic maps as far as you know

1164
00:39:02,640 --> 00:39:04,880
routing people to a specific location

1165
00:39:04,880 --> 00:39:07,520
like so those are very uh

1166
00:39:07,520 --> 00:39:09,839
you know common content provider or you

1167
00:39:09,839 --> 00:39:11,599
know sort of request routing type of

1168
00:39:11,599 --> 00:39:12,960
decisions

1169
00:39:12,960 --> 00:39:15,200
but you know enacting those into network

1170
00:39:15,200 --> 00:39:16,640
routing and network forwarding that's

1171
00:39:16,640 --> 00:39:18,240
where you know these sda controllers

1172
00:39:18,240 --> 00:39:20,160
come into play uh so this case is a

1173
00:39:20,160 --> 00:39:21,680
simple where i have traffic that you

1174
00:39:21,680 --> 00:39:23,599
know and i really have my intent and you

1175
00:39:23,599 --> 00:39:25,280
know if it's really an sdn based

1176
00:39:25,280 --> 00:39:26,480
application

1177
00:39:26,480 --> 00:39:28,400
i want to give it my intent is to

1178
00:39:28,400 --> 00:39:30,079
balance traffic across you know all

1179
00:39:30,079 --> 00:39:32,240
these peering connections uh and in

1180
00:39:32,240 --> 00:39:34,240
normal bgp and this is outbound traffic

1181
00:39:34,240 --> 00:39:36,560
which is a bit easier to control uh but

1182
00:39:36,560 --> 00:39:38,640
in normal say bgp that you know that

1183
00:39:38,640 --> 00:39:40,000
doesn't happen there's there's other

1184
00:39:40,000 --> 00:39:41,760
things that are built in bgp that steer

1185
00:39:41,760 --> 00:39:44,000
traffic a specific way

1186
00:39:44,000 --> 00:39:45,599
but i want to take you know all this

1187
00:39:45,599 --> 00:39:46,640
data and then i want to make an

1188
00:39:46,640 --> 00:39:49,440
intelligent traffic routing decision um

1189
00:39:49,440 --> 00:39:51,440
and like this then really it's the job

1190
00:39:51,440 --> 00:39:53,200
of the the controller

1191
00:39:53,200 --> 00:39:55,839
is really to decompose that ask or that

1192
00:39:55,839 --> 00:39:58,079
intent into the specific actions on the

1193
00:39:58,079 --> 00:39:59,040
network

1194
00:39:59,040 --> 00:40:00,480
and that's really where the the real

1195
00:40:00,480 --> 00:40:03,280
intelligence of sdn comes into play like

1196
00:40:03,280 --> 00:40:05,119
i said this is a use case that's it's

1197
00:40:05,119 --> 00:40:07,359
been solved in other ways over time

1198
00:40:07,359 --> 00:40:09,119
but we do see more and more controllers

1199
00:40:09,119 --> 00:40:10,960
that are able to take care of this type

1200
00:40:10,960 --> 00:40:13,359
of use case like i said these are just a

1201
00:40:13,359 --> 00:40:15,119
couple of use cases

1202
00:40:15,119 --> 00:40:16,960
you know the sdn can be used for there's

1203
00:40:16,960 --> 00:40:18,720
a lot of more advanced you know traffic

1204
00:40:18,720 --> 00:40:19,680
routing

1205
00:40:19,680 --> 00:40:22,000
traffic optimization use cases

1206
00:40:22,000 --> 00:40:24,000
so the key is being able to take data

1207
00:40:24,000 --> 00:40:25,359
you know not just from the network but

1208
00:40:25,359 --> 00:40:27,119
from other places as well

1209
00:40:27,119 --> 00:40:28,720
and collate that as well as you know

1210
00:40:28,720 --> 00:40:30,960
multi-domain or multi-layer information

1211
00:40:30,960 --> 00:40:32,720
to make a more sort of intelligent

1212
00:40:32,720 --> 00:40:34,960
decision that can't be made by just the

1213
00:40:34,960 --> 00:40:37,200
on-box control plan

1214
00:40:37,200 --> 00:40:38,560
and that is it for me

1215
00:40:38,560 --> 00:40:41,440
this has been my session on sdn and sda

1216
00:40:41,440 --> 00:40:43,280
controllers that i realize it's a bit on

1217
00:40:43,280 --> 00:40:45,760
the high level side of things

1218
00:40:45,760 --> 00:40:47,599
but really the industry initiatives and

1219
00:40:47,599 --> 00:40:49,920
the industry push for this

1220
00:40:49,920 --> 00:40:51,920
i encourage folks to get involved in

1221
00:40:51,920 --> 00:40:54,960
that uh take a look at that uh and join

1222
00:40:54,960 --> 00:40:57,680
groups like the the ietf uh the tip

1223
00:40:57,680 --> 00:40:59,839
working groups uh if you have sdn use

1224
00:40:59,839 --> 00:41:01,040
cases that you would like to see you

1225
00:41:01,040 --> 00:41:03,440
know have broader coverage of

1226
00:41:03,440 --> 00:41:05,280
um i definitely like that i encourage

1227
00:41:05,280 --> 00:41:07,520
you to join those those industry groups

1228
00:41:07,520 --> 00:41:09,920
but uh from that uh thank everybody for

1229
00:41:09,920 --> 00:41:12,079
your time i hope you enjoyed the session

1230
00:41:12,079 --> 00:41:16,440
and enjoy the rest of nanowrimo

1231
00:41:20,400 --> 00:41:22,880
hi phil hello i'm here hey everybody

1232
00:41:22,880 --> 00:41:24,800
you're here uh we have somebody walking

1233
00:41:24,800 --> 00:41:26,960
up to the microphone now please state

1234
00:41:26,960 --> 00:41:30,480
your name and organization

1235
00:41:30,880 --> 00:41:32,960
is this mike there we go hi chris

1236
00:41:32,960 --> 00:41:35,359
woodfield with twitter um

1237
00:41:35,359 --> 00:41:37,280
you were you mentioned openflow very

1238
00:41:37,280 --> 00:41:39,839
early in the talk and

1239
00:41:39,839 --> 00:41:41,520
i got the impression that you were

1240
00:41:41,520 --> 00:41:45,040
referring to it in the past tense um is

1241
00:41:45,040 --> 00:41:47,680
that still a relevant protocol or has it

1242
00:41:47,680 --> 00:41:50,480
largely been supplanted by the newer

1243
00:41:50,480 --> 00:41:51,920
newer protocols you've mentioned at this

1244
00:41:51,920 --> 00:41:53,599
point

1245
00:41:53,599 --> 00:41:54,800
yeah i think it's been largely

1246
00:41:54,800 --> 00:41:56,240
supplanted i'm not going to say open

1247
00:41:56,240 --> 00:41:58,720
flow's completely dead and has no no use

1248
00:41:58,720 --> 00:42:01,280
cases i would say in the sp context it

1249
00:42:01,280 --> 00:42:02,880
probably has you know even less use

1250
00:42:02,880 --> 00:42:05,680
cases than what we see in data centers

1251
00:42:05,680 --> 00:42:07,280
uh but i think do you think modern more

1252
00:42:07,280 --> 00:42:08,960
flexible you know ways of doing

1253
00:42:08,960 --> 00:42:11,520
programming p4 is very low level but i

1254
00:42:11,520 --> 00:42:13,920
you know like i said open flow

1255
00:42:13,920 --> 00:42:15,520
had a lot of good ideas and full flow

1256
00:42:15,520 --> 00:42:17,760
version two kind of you know uh

1257
00:42:17,760 --> 00:42:20,240
improved on that but yeah as an industry

1258
00:42:20,240 --> 00:42:22,240
has just not seen widespread adoption

1259
00:42:22,240 --> 00:42:23,200
now

1260
00:42:23,200 --> 00:42:25,280
okay thank you

1261
00:42:25,280 --> 00:42:27,119
okay thank you chris

1262
00:42:27,119 --> 00:42:29,520
uh we have one coming in from the

1263
00:42:29,520 --> 00:42:31,280
outside

1264
00:42:31,280 --> 00:42:34,240
from randy bush

1265
00:42:34,720 --> 00:42:37,280
high level could you relate these 42

1266
00:42:37,280 --> 00:42:40,400
complex mechanical protocol ietfish

1267
00:42:40,400 --> 00:42:42,160
approaches to the forever work in

1268
00:42:42,160 --> 00:42:45,040
progress on the network as a program

1269
00:42:45,040 --> 00:42:47,839
magic of mcallen rexford adelia

1270
00:42:47,839 --> 00:42:49,680
it seems a bit of software implemented

1271
00:42:49,680 --> 00:42:51,839
network and missing some abstraction to

1272
00:42:51,839 --> 00:42:53,200
be software

1273
00:42:53,200 --> 00:42:54,640
defined

1274
00:42:54,640 --> 00:42:56,880
as opposed to hacked aren't we still

1275
00:42:56,880 --> 00:42:59,839
using tweezers

1276
00:43:00,960 --> 00:43:02,800
yeah i think that's a lot a lot to

1277
00:43:02,800 --> 00:43:05,040
unpack i need you to repeat that one a

1278
00:43:05,040 --> 00:43:07,040
bit but i think it's just the complexity

1279
00:43:07,040 --> 00:43:08,640
of what's still there

1280
00:43:08,640 --> 00:43:11,200
and still the i mean if randy if i'm

1281
00:43:11,200 --> 00:43:12,720
completely misconstruing this let me

1282
00:43:12,720 --> 00:43:16,160
know but uh the idea it's uh it's still

1283
00:43:16,160 --> 00:43:18,400
complex and it's still a lot of you know

1284
00:43:18,400 --> 00:43:20,319
stringing glue that

1285
00:43:20,319 --> 00:43:22,640
is kind of binding these things together

1286
00:43:22,640 --> 00:43:24,319
um i think the one thing that we have a

1287
00:43:24,319 --> 00:43:26,880
bit more of today is less ietf heads

1288
00:43:26,880 --> 00:43:28,880
yeah i want to say that in a bad way per

1289
00:43:28,880 --> 00:43:31,280
se but people driving this and that's

1290
00:43:31,280 --> 00:43:32,800
where i think the operators that are

1291
00:43:32,800 --> 00:43:35,040
driving it and trying to drive the

1292
00:43:35,040 --> 00:43:36,400
abstractions

1293
00:43:36,400 --> 00:43:39,280
i think that's really key um otherwise

1294
00:43:39,280 --> 00:43:41,280
yeah we're just kind of back in the the

1295
00:43:41,280 --> 00:43:43,359
day of where we call automation

1296
00:43:43,359 --> 00:43:45,200
uh where we just they use this blanket

1297
00:43:45,200 --> 00:43:47,520
term of automation in sdn and it's still

1298
00:43:47,520 --> 00:43:49,359
super super complicated

1299
00:43:49,359 --> 00:43:51,359
but uh sorry if i'm miss identifying

1300
00:43:51,359 --> 00:43:53,200
that but uh contact me offline if you

1301
00:43:53,200 --> 00:43:56,079
want me to uh to

1302
00:43:56,079 --> 00:43:59,119
address it in a different way

1303
00:43:59,359 --> 00:44:01,200
okay thank you phil

1304
00:44:01,200 --> 00:44:03,599
randy hope that solved it for you and

1305
00:44:03,599 --> 00:44:05,359
hope to see you in the person again

1306
00:44:05,359 --> 00:44:07,119
sometime

1307
00:44:07,119 --> 00:44:09,119
um so

1308
00:44:09,119 --> 00:44:10,960
thank you for your presentation uh we're

1309
00:44:10,960 --> 00:44:15,880
out of time on that um thanks everyone

1310
00:44:15,880 --> 00:44:19,619
[Music]

