1
00:00:00,380 --> 00:00:06,420
so there's any cast in<font color="#E5E5E5"> this presentation</font>

2
00:00:02,879 --> 00:00:08,099
but not the scary kind it's a this is a

3
00:00:06,420 --> 00:00:10,290
team sort of self-contained caged

4
00:00:08,099 --> 00:00:15,570
anycast not the wild rampaging any cars

5
00:00:10,290 --> 00:00:17,038
we heard<font color="#E5E5E5"> about before so what I'm</font>

6
00:00:15,570 --> 00:00:18,600
talking about here<font color="#CCCCCC"> is building clusters</font>

7
00:00:17,039 --> 00:00:20,430
of services or clusters of<font color="#E5E5E5"> hosts to</font>

8
00:00:18,600 --> 00:00:23,160
<font color="#E5E5E5">provide a service and in particular and</font>

9
00:00:20,430 --> 00:00:25,230
talking<font color="#CCCCCC"> about the DNS</font><font color="#E5E5E5"> i'll mention very</font>

10
00:00:23,160 --> 00:00:26,820
briefly at the<font color="#E5E5E5"> end how this might be</font>

11
00:00:25,230 --> 00:00:28,199
applicable<font color="#E5E5E5"> to other protocols and things</font>

12
00:00:26,820 --> 00:00:31,579
but<font color="#CCCCCC"> i'm really just talking about dns</font>

13
00:00:28,199 --> 00:00:33,630
here so our starting point with this

14
00:00:31,579 --> 00:00:35,010
without deploying any of the stuff that

15
00:00:33,630 --> 00:00:38,489
I'm about to describe what do people

16
00:00:35,010 --> 00:00:40,500
<font color="#E5E5E5">have well for authority servers people</font>

17
00:00:38,489 --> 00:00:44,578
have several servers or thought it for

18
00:00:40,500 --> 00:00:46,559
one's own or multiple zones at least two

19
00:00:44,579 --> 00:00:48,360
<font color="#E5E5E5">hopefully more they are hopefully</font>

20
00:00:46,559 --> 00:00:49,440
dispersed geographically they're not in

21
00:00:48,360 --> 00:00:53,309
the adjacent addresses on the same

22
00:00:49,440 --> 00:00:55,230
switch so that's<font color="#E5E5E5"> Authority servers and</font>

23
00:00:53,309 --> 00:00:57,750
for recursive resolvers they have

24
00:00:55,230 --> 00:01:01,160
several hopefully<font color="#E5E5E5"> two and these are the</font>

25
00:00:57,750 --> 00:01:03,290
things that clients use to look up names

26
00:01:01,160 --> 00:01:05,099
so<font color="#E5E5E5"> before we start considering</font>

27
00:01:03,290 --> 00:01:06,330
enhancements we can make it sometimes

28
00:01:05,099 --> 00:01:09,449
useful to work out what's broken in the

29
00:01:06,330 --> 00:01:11,039
first place so<font color="#CCCCCC"> we have single points of</font>

30
00:01:09,450 --> 00:01:13,680
failure and delivering this<font color="#E5E5E5"> DNS service</font>

31
00:01:11,040 --> 00:01:15,780
in both case<font color="#CCCCCC"> of both cases we have an</font>

32
00:01:13,680 --> 00:01:17,130
issue with maintenance windows if we

33
00:01:15,780 --> 00:01:20,400
want<font color="#E5E5E5"> to take one</font><font color="#CCCCCC"> of these hosts down for</font>

34
00:01:17,130 --> 00:01:23,339
maintenance the service gets degraded<font color="#E5E5E5"> to</font>

35
00:01:20,400 --> 00:01:25,020
some extent and if we<font color="#CCCCCC"> need to scale the</font>

36
00:01:23,340 --> 00:01:26,850
service to support higher requests loads

37
00:01:25,020 --> 00:01:28,740
than we have individual servers that we

38
00:01:26,850 --> 00:01:31,320
need<font color="#E5E5E5"> to upgrade which again impinge is</font>

39
00:01:28,740 --> 00:01:32,850
on the maintenance windows and if we

40
00:01:31,320 --> 00:01:34,979
scale vertically per server then maybe

41
00:01:32,850 --> 00:01:36,298
we have some sort of limiting factor or

42
00:01:34,979 --> 00:01:39,060
limit to the number of queries we can

43
00:01:36,299 --> 00:01:41,420
sustain<font color="#E5E5E5"> on a single platform so these</font>

44
00:01:39,060 --> 00:01:44,670
are<font color="#CCCCCC"> the things that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> broken</font>

45
00:01:41,420 --> 00:01:47,790
so for authority servers it's<font color="#E5E5E5"> not</font>

46
00:01:44,670 --> 00:01:49,649
actually that broken if his own has

47
00:01:47,790 --> 00:01:51,899
multiple in NS records multiple

48
00:01:49,649 --> 00:01:53,189
authority of servers but then resolvers

49
00:01:51,899 --> 00:01:54,390
are generally pretty good trying

50
00:01:53,189 --> 00:01:57,119
different servers and then they<font color="#CCCCCC"> cash the</font>

51
00:01:54,390 --> 00:01:59,759
<font color="#E5E5E5">results anyway so if a single server in</font>

52
00:01:57,119 --> 00:02:01,350
an NS set is down chances are the people

53
00:01:59,759 --> 00:02:03,299
trying<font color="#E5E5E5"> to actually use the DNS servers</font>

54
00:02:01,350 --> 00:02:05,880
to look up names probably won't<font color="#CCCCCC"> even</font>

55
00:02:03,299 --> 00:02:07,079
<font color="#CCCCCC">notice that the servers are</font><font color="#E5E5E5"> down it does</font>

56
00:02:05,880 --> 00:02:08,549
depend a bit on how important those

57
00:02:07,079 --> 00:02:10,049
owners obviously if you're serving the

58
00:02:08,550 --> 00:02:11,489
root zone then you hope from you hope to

59
00:02:10,050 --> 00:02:13,500
have high availability for all the

60
00:02:11,489 --> 00:02:15,660
servers if<font color="#E5E5E5"> you're</font>

61
00:02:13,500 --> 00:02:17,760
zone that has less is a lower profile

62
00:02:15,660 --> 00:02:19,560
sort<font color="#E5E5E5"> of Zone in</font><font color="#CCCCCC"> the world then probably</font>

63
00:02:17,760 --> 00:02:21,170
having a server or two out<font color="#E5E5E5"> of commission</font>

64
00:02:19,560 --> 00:02:28,620
at any one time for maintenance or

65
00:02:21,170 --> 00:02:30,029
unplanned outage is tolerable<font color="#E5E5E5"> the</font>

66
00:02:28,620 --> 00:02:32,370
recursive resolvers is actually more

67
00:02:30,030 --> 00:02:34,950
broken and this is because<font color="#E5E5E5"> clients are</font>

68
00:02:32,370 --> 00:02:36,300
generally quite stupid in using more

69
00:02:34,950 --> 00:02:38,190
than one server even if you provide them

70
00:02:36,300 --> 00:02:40,140
with more than one address to use her

71
00:02:38,190 --> 00:02:41,760
recursive resolver they'll use one

72
00:02:40,140 --> 00:02:43,529
they'll take a long time to time out

73
00:02:41,760 --> 00:02:44,970
then they'll use another one<font color="#E5E5E5"> and quite</font>

74
00:02:43,530 --> 00:02:46,590
often they won't learn<font color="#E5E5E5"> the next time</font>

75
00:02:44,970 --> 00:02:47,940
they do another look up they'll go back

76
00:02:46,590 --> 00:02:50,220
<font color="#E5E5E5">to the same broken server and do another</font>

77
00:02:47,940 --> 00:02:52,260
timeout and for users that<font color="#E5E5E5"> means that</font>

78
00:02:50,220 --> 00:02:53,430
the internet is broken and when the

79
00:02:52,260 --> 00:02:55,709
Internet's broken<font color="#E5E5E5"> the help desk phone</font>

80
00:02:53,430 --> 00:02:58,590
rings and<font color="#E5E5E5"> never breaks very stressed so</font>

81
00:02:55,709 --> 00:03:00,330
in terms<font color="#E5E5E5"> of the help desk phone metric</font>

82
00:02:58,590 --> 00:03:03,800
<font color="#E5E5E5">of brokenness of the internet then</font>

83
00:03:00,330 --> 00:03:03,800
recursive resolvers are quite important

84
00:03:04,130 --> 00:03:09,810
so some solutions for doing this kind of

85
00:03:07,140 --> 00:03:12,600
stuff in fact of building clusters and

86
00:03:09,810 --> 00:03:13,860
officer clusters in general there are

87
00:03:12,600 --> 00:03:15,920
commercial products you can buy<font color="#E5E5E5"> from</font>

88
00:03:13,860 --> 00:03:18,390
people like<font color="#CCCCCC"> Sun and HP that will do</font><font color="#E5E5E5"> this</font>

89
00:03:15,920 --> 00:03:20,458
you can stick commercial load balancing

90
00:03:18,390 --> 00:03:24,359
appliances in front of multiple hosts

91
00:03:20,459 --> 00:03:28,170
made by people like Cisco or nortel

92
00:03:24,360 --> 00:03:32,610
foundry you can kind of use carp which

93
00:03:28,170 --> 00:03:34,500
is the<font color="#CCCCCC"> openbsd derived vrp thing and</font><font color="#E5E5E5"> I</font>

94
00:03:32,610 --> 00:03:35,790
actually<font color="#E5E5E5"> understood briefly once how</font>

95
00:03:34,500 --> 00:03:37,230
people said you could load balance using

96
00:03:35,790 --> 00:03:39,150
carp and I decided it wasn't really

97
00:03:37,230 --> 00:03:41,609
<font color="#E5E5E5">applicable to this but</font><font color="#CCCCCC"> I've long since</font>

98
00:03:39,150 --> 00:03:43,290
lost my reasoning so that's not very

99
00:03:41,610 --> 00:03:44,519
convincing but<font color="#E5E5E5"> I think carp is not</font>

100
00:03:43,290 --> 00:03:45,989
particularly applicable<font color="#CCCCCC"> on this but</font>

101
00:03:44,519 --> 00:03:49,470
maybe could be shoehorned into something

102
00:03:45,989 --> 00:03:51,360
approaching it and the last approach

103
00:03:49,470 --> 00:03:53,549
<font color="#E5E5E5">I've listed here is the one we're going</font>

104
00:03:51,360 --> 00:03:55,320
<font color="#E5E5E5">to talk about here which is any cast any</font>

105
00:03:53,549 --> 00:04:00,750
cast with deliberately equal cost paths

106
00:03:55,320 --> 00:04:02,250
and flow hashing so all of the things in

107
00:04:00,750 --> 00:04:04,079
the previous slide have the common

108
00:04:02,250 --> 00:04:06,209
requirement that the<font color="#E5E5E5"> service that you're</font>

109
00:04:04,079 --> 00:04:08,519
<font color="#E5E5E5">trying to distribute across a cluster</font>

110
00:04:06,209 --> 00:04:10,440
has an IP address associated with<font color="#E5E5E5"> it</font>

111
00:04:08,519 --> 00:04:12,049
that's independent of this<font color="#CCCCCC"> of the</font>

112
00:04:10,440 --> 00:04:15,959
infrastructure<font color="#CCCCCC"> that provides the service</font>

113
00:04:12,049 --> 00:04:17,940
so the arrow point<font color="#CCCCCC"> Alti on type people</font>

114
00:04:15,959 --> 00:04:19,048
<font color="#E5E5E5">used to call as a VIP which was</font>

115
00:04:17,940 --> 00:04:22,079
confusing at<font color="#E5E5E5"> the time that we had lips</font>

116
00:04:19,048 --> 00:04:24,690
and routers virtual IP and pituitary use

117
00:04:22,079 --> 00:04:26,130
of the word virtual and this can be

118
00:04:24,690 --> 00:04:26,760
useful for other reasons than just load

119
00:04:26,130 --> 00:04:28,320
balancing the

120
00:04:26,760 --> 00:04:30,539
can be useful for example for having a

121
00:04:28,320 --> 00:04:32,070
stable address for a service that allows

122
00:04:30,540 --> 00:04:34,140
you<font color="#E5E5E5"> to move the service between machines</font>

123
00:04:32,070 --> 00:04:40,320
if one machine is taken down or maybe to

124
00:04:34,140 --> 00:04:43,830
move a machine between sites so our tool

125
00:04:40,320 --> 00:04:46,159
bag here in our open source solution is

126
00:04:43,830 --> 00:04:50,010
to use some kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> UNIX operating</font>

127
00:04:46,160 --> 00:04:51,450
system we use<font color="#CCCCCC"> freebsd at ISC to use some</font>

128
00:04:50,010 --> 00:04:55,170
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> dns software obviously we use</font>

129
00:04:51,450 --> 00:04:57,330
bind and to use some kind<font color="#CCCCCC"> of host based</font>

130
00:04:55,170 --> 00:04:59,640
routing protocol implementation we've

131
00:04:57,330 --> 00:05:02,190
used zebra and quagga we've also used

132
00:04:59,640 --> 00:05:06,090
gate<font color="#CCCCCC"> D in the</font><font color="#E5E5E5"> past something they can</font>

133
00:05:02,190 --> 00:05:11,940
talk ospf in any<font color="#CCCCCC"> case and this</font><font color="#E5E5E5"> is</font>

134
00:05:06,090 --> 00:05:13,560
generally what it looks like so what we

135
00:05:11,940 --> 00:05:15,630
have for IP addressing we have a<font color="#CCCCCC"> global</font>

136
00:05:13,560 --> 00:05:18,420
<font color="#CCCCCC">unique unicast address on every single</font>

137
00:05:15,630 --> 00:05:20,070
host and we have the same service

138
00:05:18,420 --> 00:05:26,820
address configured on loopback addresses

139
00:05:20,070 --> 00:05:29,219
on multiple hosts the routers and hosts

140
00:05:26,820 --> 00:05:31,770
communicate with in some sort of layer

141
00:05:29,220 --> 00:05:35,400
<font color="#E5E5E5">to fabric a VLAN for a switch maybe just</font>

142
00:05:31,770 --> 00:05:37,200
once which may<font color="#E5E5E5"> be multiple switches the</font>

143
00:05:35,400 --> 00:05:38,940
hosts<font color="#CCCCCC"> are autonomous so what I mean by</font>

144
00:05:37,200 --> 00:05:41,670
<font color="#CCCCCC">that</font><font color="#E5E5E5"> is any host on its own as capable</font>

145
00:05:38,940 --> 00:05:42,900
providing the service functionally it

146
00:05:41,670 --> 00:05:44,610
may<font color="#E5E5E5"> not</font><font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> handle the load of</font>

147
00:05:42,900 --> 00:05:48,150
service you might require more than one

148
00:05:44,610 --> 00:05:50,160
host of scale hosts respond to requests

149
00:05:48,150 --> 00:05:53,010
on a service address and are managed by

150
00:05:50,160 --> 00:05:54,300
their unique unicast addresses so what

151
00:05:53,010 --> 00:05:56,190
this means is that a request will come

152
00:05:54,300 --> 00:05:57,780
in with the destination address which is

153
00:05:56,190 --> 00:06:00,330
bound to a loopback address on the host

154
00:05:57,780 --> 00:06:01,799
the response will go back but the source

155
00:06:00,330 --> 00:06:03,780
<font color="#E5E5E5">address set to that same service address</font>

156
00:06:01,800 --> 00:06:05,220
but if you're trying to manage the hosts

157
00:06:03,780 --> 00:06:07,679
you don't use those anycast addresses

158
00:06:05,220 --> 00:06:13,710
you use the unicast addresses<font color="#E5E5E5"> which are</font>

159
00:06:07,680 --> 00:06:17,670
<font color="#E5E5E5">unique the routers and hosts speak ospf</font>

160
00:06:13,710 --> 00:06:19,140
and the reason<font color="#CCCCCC"> they do that is hosts can</font>

161
00:06:17,670 --> 00:06:21,150
originate routing information for that

162
00:06:19,140 --> 00:06:23,550
loopback connected service address

163
00:06:21,150 --> 00:06:25,080
towards the routers which provides<font color="#E5E5E5"> the</font>

164
00:06:23,550 --> 00:06:27,180
balance with the way to route<font color="#CCCCCC"> requests</font>

165
00:06:25,080 --> 00:06:28,740
to those address to the hosts and the

166
00:06:27,180 --> 00:06:31,820
routers in return originally a default

167
00:06:28,740 --> 00:06:31,820
route mapped back to the hosts

168
00:06:34,919 --> 00:06:38,440
so requests from the internet<font color="#E5E5E5"> are</font>

169
00:06:37,090 --> 00:06:41,198
rounded down to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> top of that cloud</font>

170
00:06:38,440 --> 00:06:43,270
through one of those routers towards one

171
00:06:41,199 --> 00:06:44,590
<font color="#E5E5E5">of those hosts and the response are</font>

172
00:06:43,270 --> 00:06:46,930
generated by the<font color="#CCCCCC"> hostess in up towards</font>

173
00:06:44,590 --> 00:06:49,919
one of the routers and life is good and

174
00:06:46,930 --> 00:06:55,330
I've ignored all the<font color="#E5E5E5"> difficult parts</font>

175
00:06:49,919 --> 00:06:56,919
which are now going<font color="#E5E5E5"> to describe so first</font>

176
00:06:55,330 --> 00:06:58,240
of all on the routers the routers need

177
00:06:56,919 --> 00:07:01,330
to be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> support equal cost</font>

178
00:06:58,240 --> 00:07:03,099
multipath which means they have multiple

179
00:07:01,330 --> 00:07:04,930
candidate routes to the same destination

180
00:07:03,099 --> 00:07:06,159
so this<font color="#E5E5E5"> is for the application while</font>

181
00:07:04,930 --> 00:07:07,360
they're trying<font color="#E5E5E5"> to share load across is</font>

182
00:07:06,159 --> 00:07:08,500
<font color="#E5E5E5">collect the collection of hosts we're</font>

183
00:07:07,360 --> 00:07:11,830
not just trying<font color="#E5E5E5"> to provide some sort of</font>

184
00:07:08,500 --> 00:07:12,909
failover in the<font color="#E5E5E5"> event of failure so the</font>

185
00:07:11,830 --> 00:07:15,130
router is actually capable of installing

186
00:07:12,909 --> 00:07:16,690
multiple wraps of the<font color="#E5E5E5"> FIB and and</font>

187
00:07:15,130 --> 00:07:18,610
varying<font color="#E5E5E5"> the route</font><font color="#CCCCCC"> that they</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> for in</font>

188
00:07:16,690 --> 00:07:20,710
down packets using some heuristic and

189
00:07:18,610 --> 00:07:23,340
most commercial<font color="#CCCCCC"> Valders have no problem</font>

190
00:07:20,710 --> 00:07:25,299
with this however host-based routers

191
00:07:23,340 --> 00:07:27,159
generally do and that's usually<font color="#CCCCCC"> a</font>

192
00:07:25,300 --> 00:07:29,080
restriction of the<font color="#E5E5E5"> colonel the idea of</font>

193
00:07:27,159 --> 00:07:31,000
<font color="#CCCCCC">having</font><font color="#E5E5E5"> two identical routes to different</font>

194
00:07:29,080 --> 00:07:36,639
destinations is not something that works

195
00:07:31,000 --> 00:07:38,440
well with free unix routing code<font color="#CCCCCC"> dls</font>

196
00:07:36,639 --> 00:07:41,530
most<font color="#CCCCCC"> DNS queries are carried</font><font color="#E5E5E5"> over UDP</font>

197
00:07:38,440 --> 00:07:43,630
and for UDP datagrams with no

198
00:07:41,530 --> 00:07:45,400
fragmentation transaction is just a

199
00:07:43,630 --> 00:07:47,860
single request packet single response

200
00:07:45,400 --> 00:07:49,419
packet and basically everything we've

201
00:07:47,860 --> 00:07:55,810
described up till here is sufficient to

202
00:07:49,419 --> 00:07:57,460
handle that case transactions that are

203
00:07:55,810 --> 00:08:01,150
carried over<font color="#E5E5E5"> TCP obviously involved more</font>

204
00:07:57,460 --> 00:08:02,650
<font color="#CCCCCC">than one packet so the important thing</font>

205
00:08:01,150 --> 00:08:04,690
here is that we need all the<font color="#E5E5E5"> packets</font>

206
00:08:02,650 --> 00:08:07,029
associated with a single transaction to

207
00:08:04,690 --> 00:08:08,590
be delivered to the same host if we get

208
00:08:07,029 --> 00:08:10,449
<font color="#E5E5E5">different packets in the TCP setup</font>

209
00:08:08,590 --> 00:08:11,710
sequence which is deliver two different

210
00:08:10,449 --> 00:08:17,440
hosts then it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to actually</font>

211
00:08:11,710 --> 00:08:20,318
result in anything good so the<font color="#E5E5E5"> way we do</font>

212
00:08:17,440 --> 00:08:22,810
this is we told the routers to use a

213
00:08:20,319 --> 00:08:24,819
hash based algorithm to select one of

214
00:08:22,810 --> 00:08:26,650
the candidate routes for the destination

215
00:08:24,819 --> 00:08:30,069
according to some<font color="#E5E5E5"> something which</font>

216
00:08:26,650 --> 00:08:31,029
identifies the flow so we take<font color="#E5E5E5"> a hash of</font>

217
00:08:30,069 --> 00:08:32,500
something like<font color="#E5E5E5"> a source address</font>

218
00:08:31,029 --> 00:08:34,719
destination address source port

219
00:08:32,500 --> 00:08:36,099
destination<font color="#CCCCCC"> port protocol something like</font>

220
00:08:34,719 --> 00:08:38,770
<font color="#E5E5E5">that which</font><font color="#CCCCCC"> is sufficient</font><font color="#E5E5E5"> to identify a</font>

221
00:08:36,099 --> 00:08:40,539
single flow and we use<font color="#E5E5E5"> that to identify</font>

222
00:08:38,770 --> 00:08:42,370
which<font color="#CCCCCC"> of many candidate routes the</font>

223
00:08:40,539 --> 00:08:44,560
router should<font color="#E5E5E5"> use when they deliver a</font>

224
00:08:42,370 --> 00:08:45,370
packet towards the host the idea here<font color="#CCCCCC"> is</font>

225
00:08:44,560 --> 00:08:46,630
<font color="#E5E5E5">keep all the</font>

226
00:08:45,370 --> 00:08:51,160
the packets associated with a single

227
00:08:46,630 --> 00:08:52,689
flow delivered to the same host so here

228
00:08:51,160 --> 00:08:55,209
<font color="#E5E5E5">we have the same</font><font color="#CCCCCC"> thing in pictures on</font>

229
00:08:52,690 --> 00:08:58,029
the<font color="#E5E5E5"> Left we have</font><font color="#CCCCCC"> the possible</font><font color="#E5E5E5"> set of</font>

230
00:08:55,210 --> 00:08:59,620
results for a hash function on some

231
00:08:58,029 --> 00:09:01,870
collection of stuff which defines a flow

232
00:08:59,620 --> 00:09:03,220
and we just say we have three routes

233
00:09:01,870 --> 00:09:05,529
three candidate routes for this

234
00:09:03,220 --> 00:09:07,089
destination will take the first third of

235
00:09:05,529 --> 00:09:08,770
the hash space and wrap that<font color="#E5E5E5"> torch the</font>

236
00:09:07,089 --> 00:09:10,630
first route will follow the second route

237
00:09:08,770 --> 00:09:15,490
for<font color="#E5E5E5"> the next third and we'll follow the</font>

238
00:09:10,630 --> 00:09:17,890
Valastro out for the remaining third so

239
00:09:15,490 --> 00:09:20,440
on cisco's we do this with<font color="#CCCCCC"> Seth turning</font>

240
00:09:17,890 --> 00:09:22,240
on safe just makes this happen and on

241
00:09:20,440 --> 00:09:23,920
junipers that we use load balance per

242
00:09:22,240 --> 00:09:25,330
packet which has a somewhat sort of

243
00:09:23,920 --> 00:09:29,740
thing there's actually a bit more

244
00:09:25,330 --> 00:09:32,080
<font color="#E5E5E5">Jennifer configuration required but so</font>

245
00:09:29,740 --> 00:09:33,670
the<font color="#CCCCCC"> hash table</font><font color="#E5E5E5"> is / router we have more</font>

246
00:09:32,080 --> 00:09:35,680
<font color="#E5E5E5">than</font><font color="#CCCCCC"> one router we have to make sure</font>

247
00:09:33,670 --> 00:09:37,150
that the flow the packets associated

248
00:09:35,680 --> 00:09:39,760
with a single flow are also delivered to

249
00:09:37,150 --> 00:09:41,740
the same router because if we have

250
00:09:39,760 --> 00:09:42,819
<font color="#CCCCCC">multiple packets</font><font color="#E5E5E5"> or different packets in</font>

251
00:09:41,740 --> 00:09:44,440
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> float love it's a different</font>

252
00:09:42,820 --> 00:09:46,060
routers then that hash algorithm is

253
00:09:44,440 --> 00:09:47,680
going to produce a different result so

254
00:09:46,060 --> 00:09:49,390
we might end<font color="#E5E5E5"> up spraying the requests</font>

255
00:09:47,680 --> 00:09:52,120
over multiple hosts even though an

256
00:09:49,390 --> 00:09:53,709
individual router wouldn't do that so we

257
00:09:52,120 --> 00:09:56,290
can<font color="#CCCCCC"> either</font><font color="#E5E5E5"> we can do a few things we can</font>

258
00:09:53,709 --> 00:09:58,569
avoid ecmp<font color="#E5E5E5"> routes all together we can</font>

259
00:09:56,290 --> 00:10:00,849
turn on<font color="#E5E5E5"> SEF everywhere so we have some</font>

260
00:09:58,570 --> 00:10:02,920
deterministic<font color="#CCCCCC"> ass hash-based destination</font>

261
00:10:00,850 --> 00:10:05,800
through the network for any given

262
00:10:02,920 --> 00:10:08,439
destination or we just use routing

263
00:10:05,800 --> 00:10:09,939
protocols that don't support ecmp or in

264
00:10:08,440 --> 00:10:12,400
fact<font color="#E5E5E5"> we have a topology that</font><font color="#CCCCCC"> has no</font>

265
00:10:09,940 --> 00:10:13,779
multiple paths at all or has a choke

266
00:10:12,400 --> 00:10:15,189
point somewhere we earlier<font color="#E5E5E5"> a single path</font>

267
00:10:13,779 --> 00:10:18,720
but again<font color="#CCCCCC"> that's probably not realistic</font>

268
00:10:15,190 --> 00:10:21,190
the idea is to<font color="#CCCCCC"> make things</font><font color="#E5E5E5"> more reliable</font>

269
00:10:18,720 --> 00:10:22,360
so this<font color="#E5E5E5"> is pretty easy but at least I</font>

270
00:10:21,190 --> 00:10:25,360
have the<font color="#E5E5E5"> only slide so far that has</font>

271
00:10:22,360 --> 00:10:28,600
rather configuration stuff on it this is

272
00:10:25,360 --> 00:10:32,050
a video that's true that's true how<font color="#E5E5E5"> take</font>

273
00:10:28,600 --> 00:10:33,490
<font color="#E5E5E5">it all back so we turn on set that's</font>

274
00:10:32,050 --> 00:10:35,469
basically<font color="#CCCCCC"> it that's the thing here we</font>

275
00:10:33,490 --> 00:10:38,860
have an ospf process running no rocket

276
00:10:35,470 --> 00:10:40,990
science here the hosts have no need for

277
00:10:38,860 --> 00:10:42,370
<font color="#E5E5E5">ecmp is important because the host just</font>

278
00:10:40,990 --> 00:10:44,230
need to send a packet back to the<font color="#E5E5E5"> world</font>

279
00:10:42,370 --> 00:10:46,450
and the<font color="#E5E5E5"> address that they're directing</font>

280
00:10:44,230 --> 00:10:47,800
their packets to is not any cast it's

281
00:10:46,450 --> 00:10:49,750
the source address<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the original query</font>

282
00:10:47,800 --> 00:10:53,740
which is unique<font color="#E5E5E5"> in the world if the if</font>

283
00:10:49,750 --> 00:10:55,660
the client expects to get a response the

284
00:10:53,740 --> 00:10:56,680
availability of the service is signal to

285
00:10:55,660 --> 00:10:59,380
the routers you

286
00:10:56,680 --> 00:11:00,640
LS Ayres so if one host decides it's not

287
00:10:59,380 --> 00:11:02,290
<font color="#E5E5E5">going to participate in providing a</font>

288
00:11:00,640 --> 00:11:04,080
particular service anymore it just

289
00:11:02,290 --> 00:11:06,520
<font color="#E5E5E5">basically withdraws throughout</font>

290
00:11:04,080 --> 00:11:08,440
corresponding to that service and then

291
00:11:06,520 --> 00:11:12,399
<font color="#E5E5E5">pack in</font><font color="#CCCCCC"> Iran will receives traffic with</font>

292
00:11:08,440 --> 00:11:14,230
that destination<font color="#E5E5E5"> address so here's some</font>

293
00:11:12,399 --> 00:11:19,029
zebra configuration which<font color="#CCCCCC"> is remarkably</font>

294
00:11:14,230 --> 00:11:20,800
similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Cisco one there's no real</font>

295
00:11:19,029 --> 00:11:23,890
complicated bind configuration required

296
00:11:20,800 --> 00:11:25,240
to make this work the key<font color="#E5E5E5"> parts are that</font>

297
00:11:23,890 --> 00:11:27,730
you bind to the service<font color="#E5E5E5"> address for</font>

298
00:11:25,240 --> 00:11:29,170
receiving requests and use the unique

299
00:11:27,730 --> 00:11:30,520
unique unicast address for everything

300
00:11:29,170 --> 00:11:31,990
else so if you're<font color="#E5E5E5"> doing zone transfers</font>

301
00:11:30,520 --> 00:11:34,209
you don't source those from your anycast

302
00:11:31,990 --> 00:11:40,779
address you source them from the global

303
00:11:34,209 --> 00:11:42,939
unique unicast address so there<font color="#E5E5E5"> is a</font>

304
00:11:40,779 --> 00:11:44,140
slight complication here because we have

305
00:11:42,940 --> 00:11:45,430
a large number of people<font color="#CCCCCC"> in the world</font>

306
00:11:44,140 --> 00:11:47,740
who<font color="#CCCCCC"> still think it's a good idea to</font>

307
00:11:45,430 --> 00:11:50,410
restrict zone transfers based on source

308
00:11:47,740 --> 00:11:52,240
IP address and somebody else in the

309
00:11:50,410 --> 00:11:54,160
world who's asked you to be a slave for

310
00:11:52,240 --> 00:11:55,330
their zone doesn't necessarily know or

311
00:11:54,160 --> 00:11:56,439
care whether you have a<font color="#E5E5E5"> single name</font>

312
00:11:55,330 --> 00:11:58,360
server or whether you have a cluster of

313
00:11:56,440 --> 00:11:59,589
nameservers they<font color="#E5E5E5"> just want the request</font>

314
00:11:58,360 --> 00:12:01,600
to come from<font color="#E5E5E5"> the one address which</font>

315
00:11:59,589 --> 00:12:04,209
corresponds<font color="#CCCCCC"> to your name server which is</font>

316
00:12:01,600 --> 00:12:08,110
the service address so in this case we

317
00:12:04,209 --> 00:12:09,939
have a<font color="#CCCCCC"> problem if he is a slave servers</font>

318
00:12:08,110 --> 00:12:12,160
down at the bottom these hosts hosts one

319
00:12:09,940 --> 00:12:14,320
host to<font color="#E5E5E5"> host three and host for then</font>

320
00:12:12,160 --> 00:12:16,689
when they source their zone transfer

321
00:12:14,320 --> 00:12:18,400
attempts from the anycast address which

322
00:12:16,690 --> 00:12:20,050
is<font color="#E5E5E5"> bound to the loopback address then</font>

323
00:12:18,400 --> 00:12:23,199
only one in n request is going to

324
00:12:20,050 --> 00:12:25,990
succeed because you're basically waiting

325
00:12:23,200 --> 00:12:27,310
for the one lucky host which corresponds

326
00:12:25,990 --> 00:12:30,430
to<font color="#CCCCCC"> the hash for the return packets</font>

327
00:12:27,310 --> 00:12:31,989
pointing at the same host so this is<font color="#CCCCCC"> a</font>

328
00:12:30,430 --> 00:12:33,279
bit messy what<font color="#E5E5E5"> this means is you have n</font>

329
00:12:31,990 --> 00:12:34,900
hosts and most of them are<font color="#E5E5E5"> gonna fail</font>

330
00:12:33,279 --> 00:12:39,279
most of the time every now and then one

331
00:12:34,900 --> 00:12:41,439
<font color="#E5E5E5">of them will succeed so there's you can</font>

332
00:12:39,279 --> 00:12:42,579
mitigate this it's<font color="#E5E5E5"> still ugly but what</font>

333
00:12:41,440 --> 00:12:44,140
<font color="#E5E5E5">you can do is configure each of these</font>

334
00:12:42,579 --> 00:12:45,930
hosts to design transfers from each

335
00:12:44,140 --> 00:12:48,069
other as well as from<font color="#E5E5E5"> the master server</font>

336
00:12:45,930 --> 00:12:49,329
so<font color="#E5E5E5"> you've rely on the fact that most of</font>

337
00:12:48,070 --> 00:12:50,529
<font color="#E5E5E5">them are going to fail when they try</font><font color="#CCCCCC"> and</font>

338
00:12:49,329 --> 00:12:51,849
contact the master server at least one

339
00:12:50,529 --> 00:12:54,070
of them<font color="#CCCCCC"> will succeed occasionally and</font>

340
00:12:51,850 --> 00:12:55,450
when that<font color="#CCCCCC"> one does succeed you will</font>

341
00:12:54,070 --> 00:12:58,660
basically spray the information towards

342
00:12:55,450 --> 00:13:00,190
the<font color="#E5E5E5"> other hosts now this the same</font>

343
00:12:58,660 --> 00:13:01,390
alternative to this<font color="#E5E5E5"> is just use TCP</font>

344
00:13:00,190 --> 00:13:04,440
instead and stop using source addresses

345
00:13:01,390 --> 00:13:04,439
as an ACL

346
00:13:07,460 --> 00:13:11,670
one thing that<font color="#CCCCCC"> we</font><font color="#E5E5E5"> need to make sure of</font>

347
00:13:09,690 --> 00:13:13,830
we build clusters like this is<font color="#E5E5E5"> that if a</font>

348
00:13:11,670 --> 00:13:17,189
name server goes bad we<font color="#CCCCCC"> don't want to</font>

349
00:13:13,830 --> 00:13:18,720
send requests to it now what we do with

350
00:13:17,190 --> 00:13:20,640
without<font color="#E5E5E5"> clusters that we build with by</font>

351
00:13:18,720 --> 00:13:23,130
nine we rely<font color="#CCCCCC"> on the fact that by nine is</font>

352
00:13:20,640 --> 00:13:24,600
riddled with it with assertions and if

353
00:13:23,130 --> 00:13:26,580
anything<font color="#E5E5E5"> happens within the code which</font>

354
00:13:24,600 --> 00:13:28,650
suggests that the name<font color="#CCCCCC"> servers become a</font>

355
00:13:26,580 --> 00:13:30,840
turned itself into an unexpected state

356
00:13:28,650 --> 00:13:33,030
it will dump core so this is named<font color="#CCCCCC"> e</font>

357
00:13:30,840 --> 00:13:38,280
dumping core as a feature officially not

358
00:13:33,030 --> 00:13:40,020
a bug so this<font color="#E5E5E5"> is actually quite nice</font>

359
00:13:38,280 --> 00:13:41,819
from<font color="#E5E5E5"> the point of view of configuring</font>

360
00:13:40,020 --> 00:13:43,890
these clusters because we can write a

361
00:13:41,820 --> 00:13:45,780
pretty simple wrapper around name<font color="#CCCCCC"> D we</font>

362
00:13:43,890 --> 00:13:47,670
can run it we can stop it demonizing we

363
00:13:45,780 --> 00:13:49,290
can wait for<font color="#E5E5E5"> it to dump core I should</font>

364
00:13:47,670 --> 00:13:51,360
<font color="#E5E5E5">put an F in there somewhere but we'll</font>

365
00:13:49,290 --> 00:13:53,010
<font color="#E5E5E5">wait for when it does dump core and when</font>

366
00:13:51,360 --> 00:13:54,330
it does we can pull down the the

367
00:13:53,010 --> 00:13:58,770
loopback interface corresponding to the

368
00:13:54,330 --> 00:14:00,270
service which will trigger an LSA was

369
00:13:58,770 --> 00:14:02,189
basically remove that node from service

370
00:14:00,270 --> 00:14:03,990
we then might do something like wait ten

371
00:14:02,190 --> 00:14:06,720
minutes then start it up again to avoid

372
00:14:03,990 --> 00:14:08,250
clapping but basically<font color="#E5E5E5"> what this means</font>

373
00:14:06,720 --> 00:14:09,930
is we can tie the availability of the

374
00:14:08,250 --> 00:14:11,760
service with the routing information to

375
00:14:09,930 --> 00:14:18,839
whether or<font color="#E5E5E5"> not the server itself is</font>

376
00:14:11,760 --> 00:14:20,460
running common to pretty much all these

377
00:14:18,840 --> 00:14:22,200
approaches that are listed here on the

378
00:14:20,460 --> 00:14:24,300
on the third or<font color="#CCCCCC"> fourth slide em for</font>

379
00:14:22,200 --> 00:14:26,340
building these clusters and also for

380
00:14:24,300 --> 00:14:29,120
most other applications of any cast is

381
00:14:26,340 --> 00:14:31,200
the problem of service monitoring

382
00:14:29,120 --> 00:14:32,670
building enough infrastructure to be

383
00:14:31,200 --> 00:14:34,710
able to reliably monitor these things as

384
00:14:32,670 --> 00:14:36,260
is difficult and it's arguable as to

385
00:14:34,710 --> 00:14:39,390
whether you<font color="#E5E5E5"> can reliably monitor them</font>

386
00:14:36,260 --> 00:14:41,040
absolutely at all you can check

387
00:14:39,390 --> 00:14:42,600
individual hosts to make sure the

388
00:14:41,040 --> 00:14:43,800
individual hosts are working but you're

389
00:14:42,600 --> 00:14:45,390
not<font color="#E5E5E5"> necessarily checking the anycast</font>

390
00:14:43,800 --> 00:14:47,969
addresses unless you check from<font color="#CCCCCC"> the host</font>

391
00:14:45,390 --> 00:14:49,260
itself so you're not really<font color="#E5E5E5"> doing a test</font>

392
00:14:47,970 --> 00:14:52,640
that's representative of what happens

393
00:14:49,260 --> 00:14:52,640
with real clients in the real network

394
00:14:55,800 --> 00:15:00,880
from in bind<font color="#CCCCCC"> 8 and in by nine from nine</font>

395
00:14:59,080 --> 00:15:03,840
point three we have<font color="#E5E5E5"> this thing called</font>

396
00:15:00,880 --> 00:15:06,160
first name dot bind in the class chaos

397
00:15:03,840 --> 00:15:08,020
which if you query it look for text

398
00:15:06,160 --> 00:15:11,500
results records you'll<font color="#E5E5E5"> get a string</font>

399
00:15:08,020 --> 00:15:13,510
which returns the name of the server so

400
00:15:11,500 --> 00:15:14,680
in terms of trying to<font color="#E5E5E5"> trouble to a name</font>

401
00:15:13,510 --> 00:15:17,860
server which appears<font color="#E5E5E5"> to have gone bad</font>

402
00:15:14,680 --> 00:15:19,689
this can be of some use not especially a

403
00:15:17,860 --> 00:15:21,070
huge amount of use because of course

404
00:15:19,690 --> 00:15:24,400
<font color="#E5E5E5">you're sending a different query to the</font>

405
00:15:21,070 --> 00:15:26,080
one that was causing the<font color="#E5E5E5"> problem there</font>

406
00:15:24,400 --> 00:15:28,180
is<font color="#E5E5E5"> apparently</font><font color="#CCCCCC"> well there's continued</font>

407
00:15:26,080 --> 00:15:29,140
talk of an e<font color="#E5E5E5"> DNS extension which will</font>

408
00:15:28,180 --> 00:15:31,239
actually allow this kind of

409
00:15:29,140 --> 00:15:32,980
instrumentation to happen<font color="#E5E5E5"> on a real</font>

410
00:15:31,240 --> 00:15:34,570
query so you can get an answer back

411
00:15:32,980 --> 00:15:36,280
which also contains some indication of

412
00:15:34,570 --> 00:15:38,080
the host name or the instance of the

413
00:15:36,280 --> 00:15:41,470
node that answered it but nothing like

414
00:15:38,080 --> 00:15:43,030
<font color="#E5E5E5">that is deployed right now the main</font>

415
00:15:41,470 --> 00:15:44,200
issue here for troubleshooting is that

416
00:15:43,030 --> 00:15:45,610
you have you have<font color="#E5E5E5"> the potential for</font>

417
00:15:44,200 --> 00:15:47,440
customers to call up and say this name

418
00:15:45,610 --> 00:15:48,520
server is not<font color="#E5E5E5"> working and you</font><font color="#CCCCCC"> have to</font>

419
00:15:47,440 --> 00:15:49,690
help desk checking it<font color="#E5E5E5"> and saying well</font>

420
00:15:48,520 --> 00:15:51,970
actually it is because I just checked in

421
00:15:49,690 --> 00:15:53,080
<font color="#E5E5E5">its fine and everyone is gleefully</font>

422
00:15:51,970 --> 00:15:54,490
ignorant of the fact that there are

423
00:15:53,080 --> 00:15:58,420
multiple servers deployed and they might

424
00:15:54,490 --> 00:15:59,440
both be checking different servers so as

425
00:15:58,420 --> 00:16:01,479
I say the bottom the customer<font color="#E5E5E5"> is not</font>

426
00:15:59,440 --> 00:16:06,580
necessarily lying I'm not<font color="#CCCCCC"> sure that's a</font>

427
00:16:01,480 --> 00:16:08,320
good general rule but<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> sir so</font>

428
00:16:06,580 --> 00:16:11,260
limitations of this particular technique

429
00:16:08,320 --> 00:16:12,970
the<font color="#E5E5E5"> commercial load balancing appliances</font>

430
00:16:11,260 --> 00:16:14,710
that I mentioned some of earlier they

431
00:16:12,970 --> 00:16:15,940
<font color="#E5E5E5">usually have a large number of different</font>

432
00:16:14,710 --> 00:16:17,740
heuristics or different approaches they

433
00:16:15,940 --> 00:16:19,810
can use to choose candidate routes or to

434
00:16:17,740 --> 00:16:22,060
choose individual hosts in a cluster

435
00:16:19,810 --> 00:16:23,829
like least recently used least loaded

436
00:16:22,060 --> 00:16:27,430
server things like that this doesn't

437
00:16:23,830 --> 00:16:28,870
this<font color="#E5E5E5"> is far more clumsy than that as I</font>

438
00:16:27,430 --> 00:16:30,790
mentioned<font color="#CCCCCC"> doing rigorous real-life test</font>

439
00:16:28,870 --> 00:16:32,260
is next to impossible<font color="#E5E5E5"> this stuff you can</font>

440
00:16:30,790 --> 00:16:34,329
<font color="#CCCCCC">you can get a fair degree of confidence</font>

441
00:16:32,260 --> 00:16:36,310
that all the nodes all the hosts in the

442
00:16:34,330 --> 00:16:37,839
nodal working and you always have the

443
00:16:36,310 --> 00:16:40,229
help desk phone ringing metric to

444
00:16:37,839 --> 00:16:42,400
confirm that nothing is in fact wrong

445
00:16:40,230 --> 00:16:43,900
but in<font color="#E5E5E5"> general it's not possible to</font>

446
00:16:42,400 --> 00:16:45,880
determine exactly which hosts answered

447
00:16:43,900 --> 00:16:49,870
any particular query so this<font color="#CCCCCC"> is a this</font>

448
00:16:45,880 --> 00:16:51,010
<font color="#CCCCCC">is the</font><font color="#E5E5E5"> problem now in terms of actually</font>

449
00:16:49,870 --> 00:16:52,930
deploying these things at our network

450
00:16:51,010 --> 00:16:55,890
what this boils down to is having people

451
00:16:52,930 --> 00:17:00,010
who normally look after servers

452
00:16:55,890 --> 00:17:02,290
participate in a GPS with routers which

453
00:17:00,010 --> 00:17:03,460
in small organizations like is see when

454
00:17:02,290 --> 00:17:04,839
the host<font color="#E5E5E5"> people in the router people are</font>

455
00:17:03,460 --> 00:17:07,329
sometimes the<font color="#E5E5E5"> same people that's</font><font color="#CCCCCC"> not</font>

456
00:17:04,839 --> 00:17:08,230
really<font color="#CCCCCC"> that big a deal but in bigger</font>

457
00:17:07,329 --> 00:17:09,579
networks the ID

458
00:17:08,230 --> 00:17:11,530
your<font color="#CCCCCC"> assistance people coming and</font><font color="#E5E5E5"> saying</font>

459
00:17:09,579 --> 00:17:13,059
well we have<font color="#CCCCCC"> this Microsoft server and</font>

460
00:17:11,530 --> 00:17:14,709
we'd like<font color="#E5E5E5"> to do any class we want this</font>

461
00:17:13,059 --> 00:17:16,750
<font color="#E5E5E5">Microsoft box to talk ospf to your</font>

462
00:17:14,709 --> 00:17:19,540
network it's<font color="#E5E5E5"> not necessarily the most</font>

463
00:17:16,750 --> 00:17:21,609
popular idea that could<font color="#E5E5E5"> be floated so</font>

464
00:17:19,540 --> 00:17:25,030
you can get<font color="#E5E5E5"> around this somewhat by</font>

465
00:17:21,609 --> 00:17:26,829
making small server specific I GPS so

466
00:17:25,030 --> 00:17:28,030
<font color="#E5E5E5">you effectively build a firewall you</font>

467
00:17:26,829 --> 00:17:29,230
have a completely separate area which

468
00:17:28,030 --> 00:17:31,270
just has a service talking to some

469
00:17:29,230 --> 00:17:33,190
routers and you carefully registry

470
00:17:31,270 --> 00:17:34,929
throughout backwards and forwards so at

471
00:17:33,190 --> 00:17:36,280
least the flapping is isolated to a

472
00:17:34,929 --> 00:17:42,130
particular area which doesn't affect the

473
00:17:36,280 --> 00:17:44,428
rest of the network so as i mentioned<font color="#CCCCCC"> i</font>

474
00:17:42,130 --> 00:17:46,480
talked about<font color="#CCCCCC"> dns in this presentation</font>

475
00:17:44,429 --> 00:17:47,919
which has them sort<font color="#E5E5E5"> of peculiar</font>

476
00:17:46,480 --> 00:17:50,260
characteristics the most traffic<font color="#E5E5E5"> is</font>

477
00:17:47,919 --> 00:17:52,929
stateless and the traffic<font color="#E5E5E5"> that isn't</font>

478
00:17:50,260 --> 00:17:54,220
stateless that is stateful is comprised

479
00:17:52,929 --> 00:17:56,950
<font color="#CCCCCC">of transactions was generally pretty</font>

480
00:17:54,220 --> 00:17:58,480
short this is obviously<font color="#E5E5E5"> not the same as</font>

481
00:17:56,950 --> 00:18:00,820
most protocols which happened on the on

482
00:17:58,480 --> 00:18:02,620
<font color="#CCCCCC">the Internet in general deploying any</font>

483
00:18:00,820 --> 00:18:03,700
carts with staple protocols is in mine

484
00:18:02,620 --> 00:18:05,590
field and you have to be<font color="#CCCCCC"> very careful</font>

485
00:18:03,700 --> 00:18:08,020
but that's<font color="#E5E5E5"> not to say</font><font color="#CCCCCC"> that it can't</font><font color="#E5E5E5"> be</font>

486
00:18:05,590 --> 00:18:10,030
done there<font color="#E5E5E5"> are a large number of</font>

487
00:18:08,020 --> 00:18:11,379
variables with node placement and the

488
00:18:10,030 --> 00:18:13,960
<font color="#E5E5E5">nature of protocols the nature of the</font>

489
00:18:11,380 --> 00:18:15,460
<font color="#E5E5E5">routing systems and who runs them which</font>

490
00:18:13,960 --> 00:18:17,290
all mixed together on a giant cauldron

491
00:18:15,460 --> 00:18:19,390
could produce the the answer that any

492
00:18:17,290 --> 00:18:22,659
cast is a very<font color="#E5E5E5"> sensible thing to do but</font>

493
00:18:19,390 --> 00:18:24,429
<font color="#E5E5E5">in many</font><font color="#CCCCCC"> cases it doesn't however I</font><font color="#E5E5E5"> don't</font>

494
00:18:22,660 --> 00:18:26,710
<font color="#E5E5E5">think it's reasonable to say that any</font>

495
00:18:24,429 --> 00:18:27,820
cast and TCP never mix and can never be

496
00:18:26,710 --> 00:18:29,919
made<font color="#E5E5E5"> to</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> because it's clearly not</font>

497
00:18:27,820 --> 00:18:32,110
true it clearly does work a lot<font color="#E5E5E5"> of the</font>

498
00:18:29,919 --> 00:18:34,299
time you just have<font color="#E5E5E5"> to be careful and</font>

499
00:18:32,110 --> 00:18:37,379
consider that you are you<font color="#E5E5E5"> need the right</font>

500
00:18:34,299 --> 00:18:37,379
tool<font color="#CCCCCC"> to fix the right problem</font>

501
00:18:39,779 --> 00:18:46,019
so related to this and and most often

502
00:18:43,409 --> 00:18:48,330
found in the case of<font color="#E5E5E5"> a recursive server</font>

503
00:18:46,019 --> 00:18:50,820
is the<font color="#E5E5E5"> idea of just distributing a</font>

504
00:18:48,330 --> 00:18:52,468
service throughout an igp not just

505
00:18:50,820 --> 00:18:54,178
<font color="#E5E5E5">building a cluster and a single rack</font>

506
00:18:52,469 --> 00:18:56,700
attached to a single sweatshirt<font color="#E5E5E5"> Paris</font>

507
00:18:54,179 --> 00:18:58,649
witches but taking some service like a

508
00:18:56,700 --> 00:19:01,080
recursive resolver<font color="#E5E5E5"> I'm sticking for</font>

509
00:18:58,649 --> 00:19:03,178
example one box in every pop all number

510
00:19:01,080 --> 00:19:05,129
with the same address<font color="#E5E5E5"> so that any time a</font>

511
00:19:03,179 --> 00:19:07,619
user tries to use a local name so<font color="#CCCCCC"> that</font>

512
00:19:05,129 --> 00:19:09,389
they do really use a<font color="#E5E5E5"> local one I've seen</font>

513
00:19:07,619 --> 00:19:11,009
this deployed in many places it<font color="#E5E5E5"> was</font>

514
00:19:09,389 --> 00:19:12,779
perhaps more common to deploy things

515
00:19:11,009 --> 00:19:15,629
this way back when links between pups

516
00:19:12,779 --> 00:19:17,009
were very expensive<font color="#CCCCCC"> and</font><font color="#E5E5E5"> very slow so</font>

517
00:19:15,629 --> 00:19:18,629
that<font color="#CCCCCC"> you could</font><font color="#E5E5E5"> answer clearly locally</font>

518
00:19:17,009 --> 00:19:20,940
without touching the 56k length and<font color="#E5E5E5"> that</font>

519
00:19:18,629 --> 00:19:23,158
was a big win but there are<font color="#E5E5E5"> so many</font>

520
00:19:20,940 --> 00:19:25,799
<font color="#E5E5E5">people who still do this and it has</font>

521
00:19:23,159 --> 00:19:27,629
similar sort of issues surrounding it as

522
00:19:25,799 --> 00:19:31,469
the clusters trust a project that I just

523
00:19:27,629 --> 00:19:32,759
described the only possible difference

524
00:19:31,469 --> 00:19:34,679
really is that<font color="#E5E5E5"> the load sharing</font>

525
00:19:32,759 --> 00:19:36,929
considerations are different there may

526
00:19:34,679 --> 00:19:42,419
be no ecmp routes between the different

527
00:19:36,929 --> 00:19:44,309
<font color="#E5E5E5">name souls the other related exercise is</font>

528
00:19:42,419 --> 00:19:46,200
<font color="#CCCCCC">the global distribution</font><font color="#E5E5E5"> of a service</font>

529
00:19:44,309 --> 00:19:47,879
using any cast which is what the

530
00:19:46,200 --> 00:19:50,190
previous two presentations were talking

531
00:19:47,879 --> 00:19:51,449
about measuring and the key difference

532
00:19:50,190 --> 00:19:54,409
between this and<font color="#E5E5E5"> the thing</font><font color="#CCCCCC"> that I</font>

533
00:19:51,450 --> 00:19:57,769
described is that the global anycast

534
00:19:54,409 --> 00:20:01,679
idea depends<font color="#E5E5E5"> on other people's networks</font>

535
00:19:57,769 --> 00:20:03,059
it arguably<font color="#E5E5E5"> depeche MP issues although</font>

536
00:20:01,679 --> 00:20:05,429
some of<font color="#E5E5E5"> the measurements suggest if not</font>

537
00:20:03,059 --> 00:20:07,019
that's not not zero and the routing

538
00:20:05,429 --> 00:20:08,039
protocols use a difference so there<font color="#E5E5E5"> are</font>

539
00:20:07,019 --> 00:20:13,649
some key differences there that make

540
00:20:08,039 --> 00:20:17,629
this make this kind<font color="#E5E5E5"> of different and</font>

541
00:20:13,649 --> 00:20:17,629
that's all are there any<font color="#CCCCCC"> questions</font>

542
00:20:21,340 --> 00:20:26,810
<font color="#CCCCCC">Devin Allah Mukherjee Mellon University</font>

543
00:20:23,600 --> 00:20:29,120
we've<font color="#E5E5E5"> been doing DNS via any</font><font color="#CCCCCC"> cast in our</font>

544
00:20:26,810 --> 00:20:30,080
local area with ospf for some time as

545
00:20:29,120 --> 00:20:31,909
you're probably aware because i think

546
00:20:30,080 --> 00:20:34,300
<font color="#E5E5E5">you know kevin millar who used to work</font>

547
00:20:31,910 --> 00:20:38,000
for<font color="#CCCCCC"> us</font><font color="#E5E5E5"> and did the original deployment</font>

548
00:20:34,300 --> 00:20:40,100
on the service monitoring issue we

549
00:20:38,000 --> 00:20:43,700
definitely<font color="#CCCCCC"> saw similar things to what</font>

550
00:20:40,100 --> 00:20:45,649
you're talking about the if the quagga

551
00:20:43,700 --> 00:20:48,470
<font color="#CCCCCC">Damon on one machine failed we need to</font>

552
00:20:45,650 --> 00:20:50,300
know that things<font color="#E5E5E5"> like that the approach</font>

553
00:20:48,470 --> 00:20:52,670
we've taken that is actually assigning

554
00:20:50,300 --> 00:20:55,550
an additional anycast address that's

555
00:20:52,670 --> 00:20:57,590
unique<font color="#CCCCCC"> to each server so in addition to</font>

556
00:20:55,550 --> 00:21:00,530
<font color="#E5E5E5">the one that the service is running on</font>

557
00:20:57,590 --> 00:21:04,070
there's one per machine and we monitor

558
00:21:00,530 --> 00:21:07,040
on those so we know if we can talk dns

559
00:21:04,070 --> 00:21:12,260
on that IP then that particular machine

560
00:21:07,040 --> 00:21:14,600
is running<font color="#E5E5E5"> DNS and running quagga but it</font>

561
00:21:12,260 --> 00:21:17,360
it is a unicast address but we're we're

562
00:21:14,600 --> 00:21:20,149
announcing it via ospf and only via ospf

563
00:21:17,360 --> 00:21:21,350
how that makes sense right so there's

564
00:21:20,150 --> 00:21:23,210
still<font color="#E5E5E5"> some fairly much that wouldn't</font>

565
00:21:21,350 --> 00:21:25,370
pick up but it would certainly it so

566
00:21:23,210 --> 00:21:26,990
it's only<font color="#E5E5E5"> announced as a / 32 and it's</font>

567
00:21:25,370 --> 00:21:30,709
in the same range of addresses as all of

568
00:21:26,990 --> 00:21:32,090
our other addresses so it helps you

569
00:21:30,710 --> 00:21:33,710
 with in the case was ever goes

570
00:21:32,090 --> 00:21:35,360
mad<font color="#CCCCCC"> and tried to take right will it's</font>

571
00:21:33,710 --> 00:21:38,150
also helped us in case of noticing a

572
00:21:35,360 --> 00:21:40,510
router losing ospf adjacency with that

573
00:21:38,150 --> 00:21:43,130
server because the router load spiked

574
00:21:40,510 --> 00:21:47,000
and we've seen<font color="#CCCCCC"> that actually very</font>

575
00:21:43,130 --> 00:21:50,720
recently the other thing that we've had

576
00:21:47,000 --> 00:21:52,610
recently<font color="#E5E5E5"> is we re-engineered our entire</font>

577
00:21:50,720 --> 00:21:55,070
network and deployed hsrp everywhere and

578
00:21:52,610 --> 00:22:00,110
discovered many interaction problems

579
00:21:55,070 --> 00:22:02,360
with hsrp and ospf anycast because now

580
00:22:00,110 --> 00:22:05,449
sudden we had routers who could see each

581
00:22:02,360 --> 00:22:07,250
<font color="#E5E5E5">other across more than one link because</font>

582
00:22:05,450 --> 00:22:09,050
in addition to seeing the any casted

583
00:22:07,250 --> 00:22:11,210
server speak in ospf they saw the other

584
00:22:09,050 --> 00:22:15,050
member of<font color="#E5E5E5"> the hsrp pod over that same</font>

585
00:22:11,210 --> 00:22:16,610
network and that led<font color="#CCCCCC"> to interesting</font>

586
00:22:15,050 --> 00:22:18,560
problems and we had to come up with some

587
00:22:16,610 --> 00:22:21,139
interesting<font color="#E5E5E5"> rules on how to solve it so</font>

588
00:22:18,560 --> 00:22:24,889
interesting<font color="#CCCCCC"> might be a topic for a paper</font>

589
00:22:21,140 --> 00:22:28,030
<font color="#CCCCCC">I do at some point thanks</font>

590
00:22:24,890 --> 00:22:28,030
anybody<font color="#E5E5E5"> else</font>

591
00:22:28,770 --> 00:22:31,940
nope thanks so<font color="#E5E5E5"> much</font>

