1
00:00:09,850 --> 00:00:14,290
good morning

2
00:00:12,490 --> 00:00:16,240
here from Yahoo's Network<font color="#CCCCCC"> automation</font>

3
00:00:14,290 --> 00:00:19,509
team<font color="#CCCCCC"> and we're going to</font><font color="#E5E5E5"> give a technical</font>

4
00:00:16,239 --> 00:00:21,970
deep dive of our<font color="#CCCCCC"> real-time</font><font color="#E5E5E5"> network</font>

5
00:00:19,510 --> 00:00:26,590
telemetry platform which we've codenamed

6
00:00:21,970 --> 00:00:29,740
not these<font color="#CCCCCC"> the key</font><font color="#E5E5E5"> challenge we had to</font>

7
00:00:26,590 --> 00:00:32,229
<font color="#E5E5E5">meet when developing Panoptix was</font>

8
00:00:29,740 --> 00:00:33,960
scaling<font color="#E5E5E5"> our platforms</font><font color="#CCCCCC"> pulling and</font>

9
00:00:32,229 --> 00:00:36,690
persistence layers

10
00:00:33,960 --> 00:00:40,180
simply put<font color="#CCCCCC"> we needed to</font><font color="#E5E5E5"> provide</font>

11
00:00:36,690 --> 00:00:42,489
real-time telemetry from Yahoo's<font color="#E5E5E5"> tens of</font>

12
00:00:40,180 --> 00:00:46,299
thousands of<font color="#E5E5E5"> network devices to Yahoo's</font>

13
00:00:42,489 --> 00:00:48,430
thousands of<font color="#E5E5E5"> employees we hope that if</font>

14
00:00:46,299 --> 00:00:50,860
<font color="#E5E5E5">we made this data</font><font color="#CCCCCC"> easy to consume</font><font color="#E5E5E5"> our</font>

15
00:00:48,430 --> 00:00:53,170
fellow engineers<font color="#CCCCCC"> who live and breathe</font>

16
00:00:50,860 --> 00:00:55,210
this infrastructure<font color="#CCCCCC"> everyday would</font>

17
00:00:53,170 --> 00:00:56,799
create<font color="#CCCCCC"> amazing tools with it and as</font>

18
00:00:55,210 --> 00:01:01,089
you'll<font color="#CCCCCC"> see later</font><font color="#E5E5E5"> in this talk we were</font>

19
00:00:56,799 --> 00:01:03,220
not disappointed but before<font color="#E5E5E5"> we get into</font>

20
00:01:01,089 --> 00:01:05,289
the new platform<font color="#CCCCCC"> let's take a</font><font color="#E5E5E5"> step</font><font color="#CCCCCC"> back</font>

21
00:01:03,220 --> 00:01:08,039
and examine some of<font color="#E5E5E5"> the issues we had</font>

22
00:01:05,290 --> 00:01:10,330
<font color="#E5E5E5">with our legacy network monitoring tools</font>

23
00:01:08,040 --> 00:01:14,080
one of the biggest issues we had was

24
00:01:10,330 --> 00:01:15,520
over polling over polling is when you

25
00:01:14,080 --> 00:01:19,048
have two different<font color="#E5E5E5"> monitoring systems</font>

26
00:01:15,520 --> 00:01:21,310
<font color="#E5E5E5">who query advice for the exact same data</font>

27
00:01:19,049 --> 00:01:25,090
naturally this taxes that devices

28
00:01:21,310 --> 00:01:26,469
<font color="#E5E5E5">control</font><font color="#CCCCCC"> plan</font><font color="#E5E5E5"> for no reason the second</font>

29
00:01:25,090 --> 00:01:28,979
<font color="#CCCCCC">problem we had was with data</font>

30
00:01:26,469 --> 00:01:31,839
accessibility we couldn't easily

31
00:01:28,979 --> 00:01:35,710
<font color="#E5E5E5">correlate data that existed in multiple</font>

32
00:01:31,840 --> 00:01:40,270
different<font color="#E5E5E5"> systems and lastly all of our</font>

33
00:01:35,710 --> 00:01:42,309
legacy tools were dependent on SNMP we

34
00:01:40,270 --> 00:01:44,798
wanted our new platform<font color="#CCCCCC"> to benefit from</font>

35
00:01:42,310 --> 00:01:47,140
modern control plane features like

36
00:01:44,799 --> 00:01:49,090
performant rest and net comp<font color="#CCCCCC"> ap</font><font color="#E5E5E5"> is and</font>

37
00:01:47,140 --> 00:01:52,749
whatever else<font color="#E5E5E5"> might</font><font color="#CCCCCC"> come along</font><font color="#E5E5E5"> in the</font>

38
00:01:49,090 --> 00:01:55,920
<font color="#CCCCCC">future these</font><font color="#E5E5E5"> problems informed many of</font>

39
00:01:52,749 --> 00:01:58,960
the design goals<font color="#CCCCCC"> we had for penalties</font>

40
00:01:55,920 --> 00:02:01,569
<font color="#E5E5E5">our first design goal was to</font><font color="#CCCCCC"> minimize</font>

41
00:01:58,960 --> 00:02:04,030
the<font color="#CCCCCC"> effort required to pull</font><font color="#E5E5E5"> different</font>

42
00:02:01,569 --> 00:02:07,359
types of<font color="#CCCCCC"> devices or a different set of</font>

43
00:02:04,030 --> 00:02:09,940
<font color="#CCCCCC">metrics</font><font color="#E5E5E5"> the flexibility allows us to</font>

44
00:02:07,359 --> 00:02:13,590
avoid vendor lock-in<font color="#E5E5E5"> and quickly provide</font>

45
00:02:09,940 --> 00:02:16,810
new services<font color="#CCCCCC"> to our internal customers</font>

46
00:02:13,590 --> 00:02:19,390
secondly horizontal scalability<font color="#E5E5E5"> was</font>

47
00:02:16,810 --> 00:02:21,400
<font color="#E5E5E5">enough given our scale and of course</font>

48
00:02:19,390 --> 00:02:25,599
horizontal scalability<font color="#E5E5E5"> is just</font>

49
00:02:21,400 --> 00:02:27,730
<font color="#E5E5E5">increasing scale by adding more</font><font color="#CCCCCC"> hardware</font>

50
00:02:25,599 --> 00:02:30,010
and our last major design goal was to

51
00:02:27,730 --> 00:02:33,659
<font color="#E5E5E5">make this data easy to consume</font><font color="#CCCCCC"> through</font>

52
00:02:30,010 --> 00:02:36,370
<font color="#E5E5E5">clean and understandable restful api s</font>

53
00:02:33,659 --> 00:02:38,620
and later on in the talk<font color="#CCCCCC"> Brunel's going</font>

54
00:02:36,370 --> 00:02:39,969
to walk through<font color="#CCCCCC"> some</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> AP</font><font color="#E5E5E5"> is that</font>

55
00:02:38,620 --> 00:02:45,250
were built on<font color="#CCCCCC"> top of the</font><font color="#E5E5E5"> not these</font>

56
00:02:39,969 --> 00:02:48,129
collected data<font color="#E5E5E5"> not these consists of</font>

57
00:02:45,250 --> 00:02:50,260
three major subsystem<font color="#CCCCCC"> we have a</font>

58
00:02:48,129 --> 00:02:53,590
<font color="#E5E5E5">discovery layer which enumerates</font><font color="#CCCCCC"> this</font>

59
00:02:50,260 --> 00:02:55,328
devices<font color="#E5E5E5"> to collect telemetry from we</font>

60
00:02:53,590 --> 00:02:57,370
have a collection layer<font color="#E5E5E5"> that issues</font>

61
00:02:55,329 --> 00:02:59,409
<font color="#E5E5E5">queries to collect Plumtree</font>

62
00:02:57,370 --> 00:03:03,280
and then finally we have a persistence

63
00:02:59,409 --> 00:03:08,769
layer that<font color="#E5E5E5"> sends telemetry from our data</font>

64
00:03:03,280 --> 00:03:11,219
bus<font color="#CCCCCC"> Kafka</font><font color="#E5E5E5"> to various data stores we</font>

65
00:03:08,769 --> 00:03:13,739
implemented<font color="#CCCCCC"> scalable discovery and</font>

66
00:03:11,219 --> 00:03:16,569
pulling through<font color="#E5E5E5"> a</font><font color="#CCCCCC"> plugin architecture</font>

67
00:03:13,739 --> 00:03:19,719
where<font color="#E5E5E5"> plugins are simply Python modules</font>

68
00:03:16,569 --> 00:03:22,179
<font color="#E5E5E5">on the other hand the persistent</font><font color="#CCCCCC"> flairs</font>

69
00:03:19,719 --> 00:03:24,790
main unit of work is a group of<font color="#E5E5E5"> Python</font>

70
00:03:22,180 --> 00:03:26,650
consumer processes which consume<font color="#E5E5E5"> data</font>

71
00:03:24,790 --> 00:03:29,858
from Kafka and load it into<font color="#E5E5E5"> a</font>

72
00:03:26,650 --> 00:03:32,259
configurable<font color="#CCCCCC"> data store with this</font>

73
00:03:29,859 --> 00:03:34,509
high-level<font color="#CCCCCC"> overview in mind</font><font color="#E5E5E5"> let's look</font>

74
00:03:32,259 --> 00:03:38,978
<font color="#E5E5E5">at how not these fits into Yahoo's</font>

75
00:03:34,509 --> 00:03:41,619
production<font color="#E5E5E5"> network</font><font color="#CCCCCC"> for the purpose</font><font color="#E5E5E5"> of</font>

76
00:03:38,979 --> 00:03:44,349
this talk we'll consider consider our

77
00:03:41,620 --> 00:03:47,109
global network<font color="#E5E5E5"> as a series of data</font>

78
00:03:44,349 --> 00:03:50,349
centers<font color="#E5E5E5"> pops and pods connected by a</font>

79
00:03:47,109 --> 00:03:52,959
backbone<font color="#E5E5E5"> network within each data center</font>

80
00:03:50,349 --> 00:03:56,589
in some pops and pods<font color="#E5E5E5"> we have our three</font>

81
00:03:52,959 --> 00:04:00,069
main cannot be sub systems<font color="#E5E5E5"> our discovery</font>

82
00:03:56,590 --> 00:04:02,199
pulling and persistence layers<font color="#E5E5E5"> we chose</font>

83
00:04:00,069 --> 00:04:05,319
to<font color="#E5E5E5"> put a persistence layer in each data</font>

84
00:04:02,199 --> 00:04:07,329
center because<font color="#E5E5E5"> we wanted telemetry to</font>

85
00:04:05,319 --> 00:04:10,179
still be accessible<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the event of</font><font color="#E5E5E5"> a</font>

86
00:04:07,329 --> 00:04:12,459
network partition<font color="#E5E5E5"> in fact you would not</font>

87
00:04:10,180 --> 00:04:14,349
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be without telemetry during a</font>

88
00:04:12,459 --> 00:04:17,259
<font color="#E5E5E5">catastrophic event like a network</font>

89
00:04:14,349 --> 00:04:18,880
partition<font color="#CCCCCC"> later on in this talk Bruin</font>

90
00:04:17,259 --> 00:04:22,870
will discuss the scenario in much more

91
00:04:18,880 --> 00:04:27,340
detail<font color="#E5E5E5"> but let's step through</font><font color="#CCCCCC"> each layer</font>

92
00:04:22,870 --> 00:04:29,050
in detail now starting with polling at

93
00:04:27,340 --> 00:04:32,859
the polling layer we have<font color="#CCCCCC"> our polling</font>

94
00:04:29,050 --> 00:04:37,180
<font color="#CCCCCC">plugins</font><font color="#E5E5E5"> a celery task queue which queues</font>

95
00:04:32,860 --> 00:04:39,030
polling<font color="#CCCCCC"> plugin tasks</font><font color="#E5E5E5"> for execution and a</font>

96
00:04:37,180 --> 00:04:42,090
series of<font color="#E5E5E5"> polar</font><font color="#CCCCCC"> host which</font>

97
00:04:39,030 --> 00:04:45,239
cutes the<font color="#E5E5E5"> task</font><font color="#CCCCCC"> as I mentioned</font><font color="#E5E5E5"> earlier a</font>

98
00:04:42,090 --> 00:04:49,590
<font color="#E5E5E5">polling</font><font color="#CCCCCC"> plug-in is a</font><font color="#E5E5E5"> Python module that</font>

99
00:04:45,240 --> 00:04:52,860
targets a certain type<font color="#CCCCCC"> of device within</font>

100
00:04:49,590 --> 00:04:56,669
the modules code<font color="#E5E5E5"> we specify how to pull</font>

101
00:04:52,860 --> 00:04:58,500
telemetry from that device<font color="#CCCCCC"> Python has</font>

102
00:04:56,670 --> 00:05:00,600
emerged as the lingua franca of the

103
00:04:58,500 --> 00:05:02,760
<font color="#E5E5E5">Network automation world so we have</font>

104
00:05:00,600 --> 00:05:05,640
<font color="#CCCCCC">ample open-source libraries to use in</font>

105
00:05:02,760 --> 00:05:12,060
our polling<font color="#CCCCCC"> plugins everything from SNMP</font>

106
00:05:05,640 --> 00:05:14,039
engines to vendor specific<font color="#E5E5E5"> clients so</font>

107
00:05:12,060 --> 00:05:16,170
<font color="#CCCCCC">plugins scheduling begins at the</font>

108
00:05:14,040 --> 00:05:18,450
discovery layer the discovery layer

109
00:05:16,170 --> 00:05:21,660
calls an internal service to enumerate

110
00:05:18,450 --> 00:05:23,940
which devices<font color="#CCCCCC"> to poll for service</font>

111
00:05:21,660 --> 00:05:28,080
resiliency<font color="#E5E5E5"> we</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> of devices</font>

112
00:05:23,940 --> 00:05:30,480
for seven days again this allows<font color="#CCCCCC"> to not</font>

113
00:05:28,080 --> 00:05:33,710
<font color="#E5E5E5">these</font><font color="#CCCCCC"> two function</font><font color="#E5E5E5"> in the event the</font>

114
00:05:30,480 --> 00:05:37,080
central service is<font color="#E5E5E5"> unavailable or down</font>

115
00:05:33,710 --> 00:05:40,169
once<font color="#E5E5E5"> we have our list of devices we try</font>

116
00:05:37,080 --> 00:05:43,229
to find a matching polling<font color="#CCCCCC"> plug-in by</font>

117
00:05:40,170 --> 00:05:47,670
matching that<font color="#E5E5E5"> devices metadata with each</font>

118
00:05:43,230 --> 00:05:49,680
polling<font color="#E5E5E5"> plugins target</font><font color="#CCCCCC"> information then</font>

119
00:05:47,670 --> 00:05:52,140
to<font color="#CCCCCC"> actually execute</font><font color="#E5E5E5"> the polling plugin</font>

120
00:05:49,680 --> 00:05:55,380
we place its<font color="#CCCCCC"> tasks</font><font color="#E5E5E5"> on the celery task</font>

121
00:05:52,140 --> 00:06:00,030
queue and wait for a polar host<font color="#E5E5E5"> to fetch</font>

122
00:05:55,380 --> 00:06:03,409
and execute<font color="#E5E5E5"> that task here we see a</font>

123
00:06:00,030 --> 00:06:05,789
polling host<font color="#E5E5E5"> fetching tasks from celery</font>

124
00:06:03,410 --> 00:06:08,220
executing those tasks by issuing<font color="#E5E5E5"> their</font>

125
00:06:05,790 --> 00:06:10,820
commands and then placing the<font color="#E5E5E5"> results</font>

126
00:06:08,220 --> 00:06:14,910
<font color="#CCCCCC">onto Kappa for</font><font color="#E5E5E5"> the persistence layer</font>

127
00:06:10,820 --> 00:06:16,200
consumer<font color="#CCCCCC"> process groups to handle now</font>

128
00:06:14,910 --> 00:06:20,610
that we've talked<font color="#E5E5E5"> about how we pull</font>

129
00:06:16,200 --> 00:06:23,520
<font color="#E5E5E5">let's take a look at what we pull</font><font color="#CCCCCC"> soap</font>

130
00:06:20,610 --> 00:06:27,000
<font color="#CCCCCC">not these pulls dimensions</font><font color="#E5E5E5"> counters and</font>

131
00:06:23,520 --> 00:06:30,299
gauges<font color="#E5E5E5"> a dimension as a category</font>

132
00:06:27,000 --> 00:06:33,210
<font color="#E5E5E5">expressed as a string in this example</font>

133
00:06:30,300 --> 00:06:36,060
the dimension<font color="#E5E5E5"> is the local address of</font>

134
00:06:33,210 --> 00:06:38,900
<font color="#CCCCCC">the BGP</font><font color="#E5E5E5"> adjacency and the value is the</font>

135
00:06:36,060 --> 00:06:41,700
string one dot one dot one dot one<font color="#E5E5E5"> a</font>

136
00:06:38,900 --> 00:06:44,340
counter is a non-negative<font color="#CCCCCC"> integer that</font>

137
00:06:41,700 --> 00:06:46,349
increases monotonically<font color="#E5E5E5"> an example</font>

138
00:06:44,340 --> 00:06:49,200
counter is<font color="#E5E5E5"> the number of packets</font><font color="#CCCCCC"> sent by</font>

139
00:06:46,350 --> 00:06:53,000
an interface you can also think of the

140
00:06:49,200 --> 00:06:53,000
counter like the domitor in your car

141
00:06:53,699 --> 00:06:58,259
on the other<font color="#E5E5E5"> hand at gage is a point in</font>

142
00:06:56,280 --> 00:07:02,638
time measurement that increases or

143
00:06:58,259 --> 00:07:05,759
decreases<font color="#CCCCCC"> which is like the rate of</font>

144
00:07:02,639 --> 00:07:08,039
packets set on an<font color="#E5E5E5"> interface or going</font>

145
00:07:05,759 --> 00:07:10,919
with the car analogy<font color="#CCCCCC"> it's like the</font>

146
00:07:08,039 --> 00:07:13,378
speedometer in your car the goal<font color="#E5E5E5"> of our</font>

147
00:07:10,919 --> 00:07:15,389
<font color="#CCCCCC">polling layer is to produce a metrics</font>

148
00:07:13,379 --> 00:07:20,099
group which consists of these dimensions

149
00:07:15,389 --> 00:07:22,500
<font color="#E5E5E5">counters and gauges</font><font color="#CCCCCC"> then we place the</font>

150
00:07:20,099 --> 00:07:27,690
metrics group<font color="#CCCCCC"> onto the cap bus for the</font>

151
00:07:22,500 --> 00:07:29,190
<font color="#CCCCCC">persistence layer to handle but before</font>

152
00:07:27,690 --> 00:07:31,349
<font color="#E5E5E5">we before we get to the persistence</font>

153
00:07:29,190 --> 00:07:33,210
<font color="#E5E5E5">let's take a quick look at how we</font>

154
00:07:31,349 --> 00:07:36,659
implement our SNMP based polling

155
00:07:33,210 --> 00:07:38,758
<font color="#CCCCCC">plug-ins</font><font color="#E5E5E5"> again our polling</font><font color="#CCCCCC"> plug-ins</font><font color="#E5E5E5"> do</font>

156
00:07:36,659 --> 00:07:41,009
not have to be written<font color="#E5E5E5"> in SMP this is</font>

157
00:07:38,759 --> 00:07:51,050
just a<font color="#E5E5E5"> subset of all</font><font color="#CCCCCC"> the polling</font><font color="#E5E5E5"> plugins</font>

158
00:07:41,009 --> 00:07:54,629
we have in our repository we made

159
00:07:51,050 --> 00:07:57,360
extensible SNMP polling by<font color="#CCCCCC"> writing an</font>

160
00:07:54,629 --> 00:07:59,610
evaluator library that<font color="#E5E5E5"> takes a Python</font>

161
00:07:57,360 --> 00:08:03,029
dictionary<font color="#CCCCCC"> as input and produces a group</font>

162
00:07:59,610 --> 00:08:06,569
of metrics as an output<font color="#CCCCCC"> in</font><font color="#E5E5E5"> this example</font>

163
00:08:03,029 --> 00:08:09,889
<font color="#CCCCCC">we specified a target</font><font color="#E5E5E5"> o ID whose value</font>

164
00:08:06,569 --> 00:08:14,069
is<font color="#E5E5E5"> the local address of a BGP adjacency</font>

165
00:08:09,889 --> 00:08:17,460
along with the OID<font color="#E5E5E5"> we have metadata</font><font color="#CCCCCC"> that</font>

166
00:08:14,069 --> 00:08:19,620
specifies what<font color="#E5E5E5"> transformations to apply</font>

167
00:08:17,460 --> 00:08:23,669
to this data<font color="#E5E5E5"> before putting it into</font><font color="#CCCCCC"> the</font>

168
00:08:19,620 --> 00:08:26,009
<font color="#CCCCCC">novice we also say the name that we want</font>

169
00:08:23,669 --> 00:08:32,699
<font color="#CCCCCC">to give</font><font color="#E5E5E5"> to this metric and its type</font>

170
00:08:26,009 --> 00:08:34,260
either<font color="#E5E5E5"> a dimension metric or gauge okay</font>

171
00:08:32,700 --> 00:08:36,479
so now<font color="#E5E5E5"> that we've made</font><font color="#CCCCCC"> it through</font>

172
00:08:34,260 --> 00:08:38,039
discovery in<font color="#E5E5E5"> polling I'm going to hand</font>

173
00:08:36,479 --> 00:08:40,680
it<font color="#E5E5E5"> off to Varun who's going to talk</font>

174
00:08:38,039 --> 00:08:42,598
about the<font color="#E5E5E5"> persistence layer API</font><font color="#CCCCCC"> vests</font>

175
00:08:40,679 --> 00:08:45,109
<font color="#E5E5E5">and applications that we built on top of</font>

176
00:08:42,599 --> 00:08:45,110
<font color="#E5E5E5">the</font><font color="#CCCCCC"> Nazis</font>

177
00:08:46,250 --> 00:08:54,269
<font color="#E5E5E5">so um after we've</font><font color="#CCCCCC"> done with bollock had</font>

178
00:08:50,279 --> 00:08:56,070
an<font color="#CCCCCC"> episode we actually thought it's</font>

179
00:08:54,269 --> 00:08:57,360
<font color="#E5E5E5">going to be and you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> wait for</font><font color="#CCCCCC"> this</font>

180
00:08:56,070 --> 00:08:59,040
it will be<font color="#CCCCCC"> a breakthrough in the</font>

181
00:08:57,360 --> 00:09:01,800
industry if you actually<font color="#E5E5E5"> started storing</font>

182
00:08:59,040 --> 00:09:03,459
this data<font color="#E5E5E5"> so with that tragically</font><font color="#CCCCCC"> lost</font>

183
00:09:01,800 --> 00:09:06,069
we changing idea

184
00:09:03,459 --> 00:09:07,929
we use we decided to use<font color="#CCCCCC"> Gasca to just</font>

185
00:09:06,069 --> 00:09:10,628
get the data so that downstream

186
00:09:07,929 --> 00:09:12,160
consumers could do untold unholy and

187
00:09:10,629 --> 00:09:15,189
probably unsafe things with the data

188
00:09:12,160 --> 00:09:17,439
<font color="#CCCCCC">that we've</font><font color="#E5E5E5"> produced now one of the</font>

189
00:09:15,189 --> 00:09:20,498
things we do<font color="#E5E5E5"> with the data is that we</font>

190
00:09:17,439 --> 00:09:23,139
convert interface counters in<font color="#E5E5E5"> real-time</font>

191
00:09:20,499 --> 00:09:26,309
<font color="#E5E5E5">to rates because obviously that's a</font><font color="#CCCCCC"> very</font>

192
00:09:23,139 --> 00:09:28,540
<font color="#E5E5E5">common use</font><font color="#CCCCCC"> case in network arbitration</font>

193
00:09:26,309 --> 00:09:31,149
now this is<font color="#CCCCCC"> interesting since</font><font color="#E5E5E5"> the</font>

194
00:09:28,540 --> 00:09:33,939
traditional way<font color="#CCCCCC"> of calculating rate has</font>

195
00:09:31,149 --> 00:09:37,269
been to actually take a data point

196
00:09:33,939 --> 00:09:40,420
<font color="#E5E5E5">storage get</font><font color="#CCCCCC"> the next data point fetch it</font>

197
00:09:37,269 --> 00:09:42,519
back<font color="#E5E5E5"> calculate</font><font color="#CCCCCC"> the value difference</font>

198
00:09:40,420 --> 00:09:45,579
<font color="#E5E5E5">right the time difference and then you</font>

199
00:09:42,519 --> 00:09:47,410
know come<font color="#CCCCCC"> up with a final</font><font color="#E5E5E5"> rate</font><font color="#CCCCCC"> what</font>

200
00:09:45,579 --> 00:09:49,170
we've done instead<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that we've made</font>

201
00:09:47,410 --> 00:09:51,999
this<font color="#E5E5E5"> conversion as part of the pipeline</font>

202
00:09:49,170 --> 00:09:54,729
<font color="#E5E5E5">so</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> available to all downstream</font>

203
00:09:51,999 --> 00:09:57,429
<font color="#E5E5E5">consumers</font><font color="#CCCCCC"> now this is similar to the</font>

204
00:09:54,730 --> 00:09:59,980
<font color="#CCCCCC">derived data type in collecti or weight</font>

205
00:09:57,429 --> 00:10:03,279
in data<font color="#CCCCCC"> log</font><font color="#E5E5E5"> for those of you who are</font>

206
00:09:59,980 --> 00:10:05,889
into that sort of<font color="#CCCCCC"> thing because we had</font>

207
00:10:03,279 --> 00:10:10,230
to solve various scaling problems to do

208
00:10:05,889 --> 00:10:17,410
this<font color="#CCCCCC"> rate conversion at our data volume</font>

209
00:10:10,230 --> 00:10:19,389
now<font color="#CCCCCC"> this is a graphical view</font><font color="#E5E5E5"> of what</font>

210
00:10:17,410 --> 00:10:22,420
we're doing<font color="#E5E5E5"> what we mean when we say</font>

211
00:10:19,389 --> 00:10:24,220
they<font color="#E5E5E5"> have multiple consumers</font><font color="#CCCCCC"> we take the</font>

212
00:10:22,420 --> 00:10:25,899
data that<font color="#E5E5E5"> have is produced and we</font>

213
00:10:24,220 --> 00:10:28,959
currently store it in two places

214
00:10:25,899 --> 00:10:30,730
we store<font color="#E5E5E5"> it in</font><font color="#CCCCCC"> a central Aries</font><font color="#E5E5E5"> time</font>

215
00:10:28,959 --> 00:10:33,910
series<font color="#E5E5E5"> database that is available as a</font>

216
00:10:30,730 --> 00:10:39,399
service within Yahoo<font color="#E5E5E5"> and we also store</font>

217
00:10:33,910 --> 00:10:40,480
<font color="#E5E5E5">an in Colo cash in my sequel and then to</font>

218
00:10:39,399 --> 00:10:44,559
the rest<font color="#E5E5E5"> of these slides</font><font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> talk about</font>

219
00:10:40,480 --> 00:10:46,299
<font color="#E5E5E5">why we</font><font color="#CCCCCC"> actually have it in Colo cash</font><font color="#E5E5E5"> you</font>

220
00:10:44,559 --> 00:10:50,049
would also see that we<font color="#E5E5E5"> have a dotted box</font>

221
00:10:46,299 --> 00:10:51,850
<font color="#E5E5E5">and line for a future compute and the</font>

222
00:10:50,049 --> 00:10:53,639
example<font color="#CCCCCC"> future consumer we've shown here</font>

223
00:10:51,850 --> 00:10:56,589
<font color="#E5E5E5">is</font><font color="#CCCCCC"> storage which is actually another</font>

224
00:10:53,639 --> 00:10:58,240
<font color="#E5E5E5">time series database but you know after</font>

225
00:10:56,589 --> 00:10:59,589
<font color="#E5E5E5">hearing some of the talks here maybe we</font>

226
00:10:58,240 --> 00:11:01,749
could work<font color="#CCCCCC"> with the Sonata team or the</font>

227
00:10:59,589 --> 00:11:07,940
<font color="#E5E5E5">Panda team two feet downstream</font><font color="#CCCCCC"> telemetry</font>

228
00:11:01,749 --> 00:11:11,770
<font color="#CCCCCC">- or integrates with them as well oh</font><font color="#E5E5E5"> now</font>

229
00:11:07,940 --> 00:11:14,690
next up<font color="#E5E5E5"> for an example of the API that</font>

230
00:11:11,770 --> 00:11:15,230
<font color="#CCCCCC">we have built on top</font><font color="#E5E5E5"> of the data that we</font>

231
00:11:14,690 --> 00:11:20,270
collect

232
00:11:15,230 --> 00:11:23,360
now this API is<font color="#E5E5E5"> built from the in</font><font color="#CCCCCC"> Colo</font>

233
00:11:20,270 --> 00:11:25,340
my sequel cache<font color="#CCCCCC"> the reasons</font><font color="#E5E5E5"> were we</font>

234
00:11:23,360 --> 00:11:27,170
obviously want the<font color="#E5E5E5"> data to be available</font>

235
00:11:25,340 --> 00:11:29,330
<font color="#E5E5E5">in case of a network partition at</font><font color="#CCCCCC"> math</font>

236
00:11:27,170 --> 00:11:32,630
<font color="#CCCCCC">as mentioned and we also wanted</font><font color="#E5E5E5"> to be</font>

237
00:11:29,330 --> 00:11:35,240
performant<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thing with time series</font>

238
00:11:32,630 --> 00:11:36,980
data bases are is that<font color="#E5E5E5"> they tend to</font><font color="#CCCCCC"> be</font>

239
00:11:35,240 --> 00:11:40,280
optimized for<font color="#CCCCCC"> serving a large amount of</font>

240
00:11:36,980 --> 00:11:41,450
data<font color="#CCCCCC"> they tend to be optimized for being</font>

241
00:11:40,280 --> 00:11:43,040
able to run a lot<font color="#E5E5E5"> of interesting</font>

242
00:11:41,450 --> 00:11:45,440
aggregates<font color="#E5E5E5"> against them but they're</font><font color="#CCCCCC"> not</font>

243
00:11:43,040 --> 00:11:48,260
necessarily optimized for speed and

244
00:11:45,440 --> 00:11:50,150
<font color="#E5E5E5">returning one data point as fast as</font>

245
00:11:48,260 --> 00:11:51,439
possible

246
00:11:50,150 --> 00:11:57,230
and that's the<font color="#E5E5E5"> problem we wanted to</font>

247
00:11:51,440 --> 00:12:00,590
solve with the building<font color="#E5E5E5"> a custom API now</font>

248
00:11:57,230 --> 00:12:02,120
I know<font color="#E5E5E5"> this blurring might remind you of</font>

249
00:12:00,590 --> 00:12:04,070
products of the Japanese adult

250
00:12:02,120 --> 00:12:11,840
entertainment industry but it's the best

251
00:12:04,070 --> 00:12:13,760
<font color="#CCCCCC">API ever here is what we actually do</font>

252
00:12:11,840 --> 00:12:15,440
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> build custom</font>

253
00:12:13,760 --> 00:12:20,450
visualizations we with custom

254
00:12:15,440 --> 00:12:24,590
applications on top<font color="#CCCCCC"> of this this UI is</font>

255
00:12:20,450 --> 00:12:27,350
actually used<font color="#E5E5E5"> by a network network</font>

256
00:12:24,590 --> 00:12:29,120
operators who<font color="#E5E5E5"> publish things to answer</font>

257
00:12:27,350 --> 00:12:33,260
various questions and actually<font color="#CCCCCC"> even</font><font color="#E5E5E5"> for</font>

258
00:12:29,120 --> 00:12:36,290
capacity planning there is the view<font color="#CCCCCC"> of</font>

259
00:12:33,260 --> 00:12:39,770
<font color="#E5E5E5">what happens to the data that we send to</font>

260
00:12:36,290 --> 00:12:41,719
<font color="#E5E5E5">us to a centralized telemetry store</font><font color="#CCCCCC"> you</font>

261
00:12:39,770 --> 00:12:43,790
know the standard use case of sending

262
00:12:41,720 --> 00:12:45,350
this data<font color="#E5E5E5"> is graphing which you see up</font>

263
00:12:43,790 --> 00:12:50,360
on the<font color="#E5E5E5"> screen</font><font color="#CCCCCC"> and then being able to</font>

264
00:12:45,350 --> 00:12:53,150
<font color="#CCCCCC">generate alerts as well now one of the</font>

265
00:12:50,360 --> 00:12:55,100
things that matter<font color="#CCCCCC"> to Esteban was what</font>

266
00:12:53,150 --> 00:12:57,230
was<font color="#E5E5E5"> very important for</font><font color="#CCCCCC"> us was to make</font>

267
00:12:55,100 --> 00:13:00,470
sure<font color="#CCCCCC"> that we can survive</font><font color="#E5E5E5"> network</font>

268
00:12:57,230 --> 00:13:02,750
partitions now when I say a network

269
00:13:00,470 --> 00:13:06,200
partition<font color="#E5E5E5"> and referring to one</font><font color="#CCCCCC"> of our</font>

270
00:13:02,750 --> 00:13:09,350
network sites<font color="#CCCCCC"> not</font><font color="#E5E5E5"> being available to the</font>

271
00:13:06,200 --> 00:13:10,910
backbone<font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> referring to a network</font>

272
00:13:09,350 --> 00:13:12,820
partition within<font color="#CCCCCC"> our</font><font color="#E5E5E5"> network</font><font color="#CCCCCC"> site not</font>

273
00:13:10,910 --> 00:13:14,900
never<font color="#CCCCCC"> partition</font><font color="#E5E5E5"> within a data center</font>

274
00:13:12,820 --> 00:13:16,400
because<font color="#E5E5E5"> obviously when our network</font>

275
00:13:14,900 --> 00:13:18,380
partition happens we would obviously

276
00:13:16,400 --> 00:13:19,579
<font color="#E5E5E5">want to use</font><font color="#CCCCCC"> network telemetry data to be</font>

277
00:13:18,380 --> 00:13:20,759
<font color="#E5E5E5">able to troubleshoot why the network</font>

278
00:13:19,580 --> 00:13:23,740
partition happened

279
00:13:20,759 --> 00:13:28,240
so the way we solve this<font color="#CCCCCC"> problem is</font><font color="#E5E5E5"> by</font>

280
00:13:23,740 --> 00:13:31,569
data Federation<font color="#E5E5E5"> what happens is</font><font color="#CCCCCC"> that</font>

281
00:13:28,240 --> 00:13:33,999
each data center<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> knows about</font>

282
00:13:31,569 --> 00:13:37,029
the<font color="#E5E5E5"> metadata in each other or in all</font>

283
00:13:33,999 --> 00:13:38,980
other<font color="#E5E5E5"> data centers</font><font color="#CCCCCC"> so you can have a two</font>

284
00:13:37,029 --> 00:13:41,679
step process<font color="#E5E5E5"> the in first step you can</font>

285
00:13:38,980 --> 00:13:44,230
hit any data center and say hey I want

286
00:13:41,679 --> 00:13:45,939
<font color="#E5E5E5">to get telemetry about this device or</font>

287
00:13:44,230 --> 00:13:48,369
you know various other filtering<font color="#E5E5E5"> keys</font>

288
00:13:45,939 --> 00:13:49,899
<font color="#CCCCCC">you know not just the</font><font color="#E5E5E5"> device and then a</font>

289
00:13:48,369 --> 00:13:52,209
few others like<font color="#E5E5E5"> you know devices</font><font color="#CCCCCC"> which</font>

290
00:13:49,899 --> 00:13:55,480
<font color="#CCCCCC">on this IP version or</font><font color="#E5E5E5"> devices which</font>

291
00:13:52,209 --> 00:13:58,599
belong to the site etc etc it's a find

292
00:13:55,480 --> 00:14:00,429
API<font color="#E5E5E5"> and what that site would return you</font>

293
00:13:58,600 --> 00:14:02,740
is a response saying<font color="#E5E5E5"> that hey I don't</font>

294
00:14:00,429 --> 00:14:04,389
have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data but</font><font color="#CCCCCC"> I know this site has</font>

295
00:14:02,740 --> 00:14:06,879
the<font color="#E5E5E5"> data</font><font color="#CCCCCC"> the response is a JSON object</font>

296
00:14:04,389 --> 00:14:10,660
<font color="#E5E5E5">and then what the client does is uses</font>

297
00:14:06,879 --> 00:14:13,389
the response to follow and connect to

298
00:14:10,660 --> 00:14:16,179
<font color="#E5E5E5">the site which actually contains</font><font color="#CCCCCC"> the</font>

299
00:14:13,389 --> 00:14:18,519
data<font color="#CCCCCC"> now in the normal course of</font>

300
00:14:16,179 --> 00:14:20,379
operations what happens is this<font color="#CCCCCC"> is all</font>

301
00:14:18,519 --> 00:14:22,389
<font color="#E5E5E5">transparent to our users</font><font color="#CCCCCC"> the</font>

302
00:14:20,379 --> 00:14:24,459
<font color="#CCCCCC">applications that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> have and the</font>

303
00:14:22,389 --> 00:14:26,679
wrapper libraries they have do this

304
00:14:24,459 --> 00:14:28,149
<font color="#E5E5E5">two-step call and as well as the users</font>

305
00:14:26,679 --> 00:14:31,689
<font color="#E5E5E5">are</font><font color="#CCCCCC"> concerned</font><font color="#E5E5E5"> they ask a question</font><font color="#CCCCCC"> and</font>

306
00:14:28,149 --> 00:14:34,120
<font color="#CCCCCC">again they get the results back however</font>

307
00:14:31,689 --> 00:14:37,929
<font color="#CCCCCC">in the case of a network partition</font><font color="#E5E5E5"> what</font>

308
00:14:34,120 --> 00:14:40,059
happens is that<font color="#CCCCCC"> network operators can</font>

309
00:14:37,929 --> 00:14:41,350
reach any of these data centers<font color="#E5E5E5"> through</font>

310
00:14:40,059 --> 00:14:44,649
and out of the<font color="#CCCCCC"> out-of-band</font><font color="#E5E5E5"> management</font>

311
00:14:41,350 --> 00:14:47,170
<font color="#E5E5E5">network and do local queries</font><font color="#CCCCCC"> and you</font>

312
00:14:44,649 --> 00:14:49,929
will see as like I said that was<font color="#E5E5E5"> the</font>

313
00:14:47,170 --> 00:14:53,498
motivation<font color="#E5E5E5"> of federating the data and</font>

314
00:14:49,929 --> 00:14:55,899
not centralizing it<font color="#CCCCCC"> now the data which</font>

315
00:14:53,499 --> 00:14:57,399
currently<font color="#E5E5E5"> store in each data center is</font>

316
00:14:55,899 --> 00:14:59,649
the last point<font color="#E5E5E5"> in time greater in my</font>

317
00:14:57,399 --> 00:15:02,379
sequel and we are considering and

318
00:14:59,649 --> 00:15:04,660
looking at using<font color="#E5E5E5"> druid as an in</font><font color="#CCCCCC"> collude</font>

319
00:15:02,379 --> 00:15:06,040
longer term metrics<font color="#E5E5E5"> tour so operators</font>

320
00:15:04,660 --> 00:15:08,170
<font color="#E5E5E5">could not religious ask what</font><font color="#CCCCCC"> happens</font>

321
00:15:06,040 --> 00:15:11,980
last but what happened<font color="#E5E5E5"> over the period</font>

322
00:15:08,170 --> 00:15:16,479
of some time with<font color="#E5E5E5"> that let's talk</font><font color="#CCCCCC"> about</font>

323
00:15:11,980 --> 00:15:18,129
<font color="#CCCCCC">the current status</font><font color="#E5E5E5"> so Panoptix is being</font>

324
00:15:16,480 --> 00:15:22,329
deployed to all our production<font color="#CCCCCC"> data</font>

325
00:15:18,129 --> 00:15:24,490
centers and we pull process store index

326
00:15:22,329 --> 00:15:29,049
<font color="#E5E5E5">cache a millions of data points per</font>

327
00:15:24,490 --> 00:15:31,779
minute<font color="#CCCCCC"> yahoo service owners actually</font><font color="#E5E5E5"> use</font>

328
00:15:29,049 --> 00:15:33,129
the data<font color="#CCCCCC"> that we generating for their</font>

329
00:15:31,779 --> 00:15:35,309
day-to-day operations<font color="#CCCCCC"> as well as</font>

330
00:15:33,129 --> 00:15:35,309
capacity

331
00:15:35,470 --> 00:15:40,180
a recent win for the data<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we've</font>

332
00:15:37,300 --> 00:15:44,170
produced<font color="#E5E5E5"> through this platform is</font><font color="#CCCCCC"> that</font>

333
00:15:40,180 --> 00:15:47,229
our load balancer operation team was

334
00:15:44,170 --> 00:15:49,510
able<font color="#CCCCCC"> to use this data</font><font color="#E5E5E5"> tried to ask how</font>

335
00:15:47,230 --> 00:15:50,860
many whips<font color="#E5E5E5"> have been configured but not</font>

336
00:15:49,510 --> 00:15:56,110
actually are not actually being utilized

337
00:15:50,860 --> 00:15:57,820
<font color="#CCCCCC">and the answer was surprisingly a lot</font><font color="#E5E5E5"> so</font>

338
00:15:56,110 --> 00:16:01,090
we were actually<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to cut</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> about</font>

339
00:15:57,820 --> 00:16:03,910
25%<font color="#E5E5E5"> of our load balancer resource</font>

340
00:16:01,090 --> 00:16:10,240
utilization<font color="#CCCCCC"> by analyzing the data that</font>

341
00:16:03,910 --> 00:16:15,939
this platform<font color="#E5E5E5"> had produced a few lessons</font>

342
00:16:10,240 --> 00:16:18,520
<font color="#E5E5E5">learned</font><font color="#CCCCCC"> so we knew</font><font color="#E5E5E5"> going with Python</font>

343
00:16:15,940 --> 00:16:20,440
<font color="#E5E5E5">would be the path of least resistance at</font>

344
00:16:18,520 --> 00:16:24,189
<font color="#E5E5E5">smattered said because it's becoming the</font>

345
00:16:20,440 --> 00:16:27,280
choice of development language<font color="#E5E5E5"> in the</font>

346
00:16:24,190 --> 00:16:30,010
network DevOps world<font color="#E5E5E5"> and</font><font color="#CCCCCC"> python has</font>

347
00:16:27,280 --> 00:16:32,439
<font color="#E5E5E5">delivered</font><font color="#CCCCCC"> it was easy and actually</font><font color="#E5E5E5"> fun -</font>

348
00:16:30,010 --> 00:16:35,560
Gordon<font color="#CCCCCC"> - but it's also kind of slow and</font>

349
00:16:32,440 --> 00:16:39,510
the<font color="#E5E5E5"> slowness of Python actually</font><font color="#CCCCCC"> becomes</font>

350
00:16:35,560 --> 00:16:42,550
glaringly obvious at our scale

351
00:16:39,510 --> 00:16:44,920
luckily interacting with<font color="#CCCCCC"> unlikely</font>

352
00:16:42,550 --> 00:16:47,199
libraries through Python<font color="#CCCCCC"> see and we did</font>

353
00:16:44,920 --> 00:16:50,319
<font color="#E5E5E5">kind of hand optimize scenarios for</font>

354
00:16:47,200 --> 00:16:52,630
<font color="#CCCCCC">example</font><font color="#E5E5E5"> we don't use the pure Python</font>

355
00:16:50,320 --> 00:16:55,150
implementation of SNMP<font color="#CCCCCC"> we actually use a</font>

356
00:16:52,630 --> 00:17:00,189
<font color="#CCCCCC">Python module which wraps</font><font color="#E5E5E5"> the C</font><font color="#CCCCCC"> library</font>

357
00:16:55,150 --> 00:17:02,560
is given by netizen<font color="#CCCCCC"> mp4 speed another</font>

358
00:17:00,190 --> 00:17:05,530
thing<font color="#E5E5E5"> that we learned is that creating a</font>

359
00:17:02,560 --> 00:17:07,869
<font color="#CCCCCC">lookalike</font><font color="#E5E5E5"> network which would even</font>

360
00:17:05,530 --> 00:17:09,639
remotely mirror the complexity and<font color="#E5E5E5"> scale</font>

361
00:17:07,869 --> 00:17:12,819
of a<font color="#E5E5E5"> production network was going to be</font>

362
00:17:09,640 --> 00:17:14,680
very<font color="#E5E5E5"> expensive and</font><font color="#CCCCCC"> time consuming so</font>

363
00:17:12,819 --> 00:17:20,470
please<font color="#E5E5E5"> don't ask me how</font><font color="#CCCCCC"> we solved this</font>

364
00:17:14,680 --> 00:17:23,020
problem<font color="#E5E5E5"> and finally I bet that juice</font>

365
00:17:20,470 --> 00:17:25,420
<font color="#E5E5E5">that the the best use for</font><font color="#CCCCCC"> data B</font>

366
00:17:23,020 --> 00:17:28,180
produces not simply to<font color="#E5E5E5"> feed it</font><font color="#CCCCCC"> into an</font>

367
00:17:25,420 --> 00:17:30,820
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> and/or</font><font color="#E5E5E5"> a reporting system</font><font color="#CCCCCC"> but</font>

368
00:17:28,180 --> 00:17:33,610
to<font color="#E5E5E5"> make</font><font color="#CCCCCC"> it available</font><font color="#E5E5E5"> to engineers has</font>

369
00:17:30,820 --> 00:17:36,100
come<font color="#E5E5E5"> true</font><font color="#CCCCCC"> one example of this is we are</font>

370
00:17:33,610 --> 00:17:39,219
hammered by<font color="#CCCCCC"> requests by teams throughout</font>

371
00:17:36,100 --> 00:17:41,199
<font color="#E5E5E5">Yahoo to use our API so that</font><font color="#CCCCCC"> they can</font>

372
00:17:39,220 --> 00:17:43,170
make it part<font color="#E5E5E5"> of their</font><font color="#CCCCCC"> Vict</font><font color="#E5E5E5"> pipelines and</font>

373
00:17:41,200 --> 00:17:45,400
<font color="#E5E5E5">they can</font><font color="#CCCCCC"> actually look at the real Times</font>

374
00:17:43,170 --> 00:17:47,350
<font color="#E5E5E5">state of the network while they're doing</font>

375
00:17:45,400 --> 00:17:47,860
<font color="#E5E5E5">automated deployments and they can take</font>

376
00:17:47,350 --> 00:17:51,370
<font color="#E5E5E5">this</font>

377
00:17:47,860 --> 00:17:52,809
<font color="#CCCCCC">turns on their deployments based on how</font>

378
00:17:51,370 --> 00:17:54,959
the network is here is doing at that

379
00:17:52,809 --> 00:17:54,960
<font color="#E5E5E5">time</font>

380
00:17:57,250 --> 00:18:01,030
future<font color="#E5E5E5"> this is where I get to be</font>

381
00:17:58,990 --> 00:18:07,799
<font color="#E5E5E5">hand-wavy and convince my bosses to find</font>

382
00:18:01,030 --> 00:18:10,629
this forever<font color="#E5E5E5"> so we know</font><font color="#CCCCCC"> that getting</font>

383
00:18:07,799 --> 00:18:13,420
<font color="#E5E5E5">high-quality high-resolution enriched</font>

384
00:18:10,630 --> 00:18:17,350
<font color="#E5E5E5">data is the first step to being able to</font>

385
00:18:13,420 --> 00:18:19,780
generate<font color="#E5E5E5"> insights</font><font color="#CCCCCC"> because you know once</font>

386
00:18:17,350 --> 00:18:22,209
we are close<font color="#E5E5E5"> to solving the problem of</font>

387
00:18:19,780 --> 00:18:25,178
collecting metrics at that scale<font color="#CCCCCC"> and at</font>

388
00:18:22,210 --> 00:18:27,179
that<font color="#CCCCCC"> resolution the obvious next</font><font color="#E5E5E5"> step is</font>

389
00:18:25,179 --> 00:18:30,940
to try and<font color="#E5E5E5"> feed this data through</font>

390
00:18:27,179 --> 00:18:32,590
<font color="#E5E5E5">machine learning and on anomaly</font>

391
00:18:30,940 --> 00:18:37,059
detection and possibly even use it for

392
00:18:32,590 --> 00:18:38,889
<font color="#CCCCCC">auto remediation also as Matt pointed</font>

393
00:18:37,059 --> 00:18:40,870
out at the<font color="#E5E5E5"> start of the presentation</font>

394
00:18:38,890 --> 00:18:44,020
SNMP<font color="#CCCCCC"> booth served our industry quite</font>

395
00:18:40,870 --> 00:18:47,350
well<font color="#CCCCCC"> issuing its age</font>

396
00:18:44,020 --> 00:18:50,410
we have already incorporated<font color="#CCCCCC"> vendor</font>

397
00:18:47,350 --> 00:18:52,030
specific<font color="#E5E5E5"> API based polling</font><font color="#CCCCCC"> plugins</font><font color="#E5E5E5"> but</font>

398
00:18:50,410 --> 00:18:54,010
one of<font color="#E5E5E5"> the next things we want to do is</font>

399
00:18:52,030 --> 00:18:56,620
also to support ingesting streaming

400
00:18:54,010 --> 00:19:01,120
telemetry from various devices into

401
00:18:56,620 --> 00:19:04,928
properties in<font color="#E5E5E5"> terms of coverage within</font>

402
00:19:01,120 --> 00:19:07,989
<font color="#E5E5E5">Yahoo we would be standing properties to</font>

403
00:19:04,929 --> 00:19:09,820
pour all the rack switches<font color="#E5E5E5"> this will be</font>

404
00:19:07,990 --> 00:19:12,309
an order of magnitude<font color="#CCCCCC"> increase in the</font>

405
00:19:09,820 --> 00:19:14,139
number of<font color="#E5E5E5"> devices we pull though only</font>

406
00:19:12,309 --> 00:19:16,330
<font color="#E5E5E5">about</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 3x increase in the number of</font>

407
00:19:14,140 --> 00:19:18,400
metrics<font color="#E5E5E5"> we generate and the reason</font><font color="#CCCCCC"> for</font>

408
00:19:16,330 --> 00:19:20,260
that is<font color="#CCCCCC"> that the current set of devices</font>

409
00:19:18,400 --> 00:19:23,440
<font color="#E5E5E5">we pull actually covers a large</font><font color="#CCCCCC"> surface</font>

410
00:19:20,260 --> 00:19:27,129
area of the young of Yahoo's<font color="#E5E5E5"> network and</font>

411
00:19:23,440 --> 00:19:28,809
then finally a<font color="#CCCCCC"> European optics</font><font color="#E5E5E5"> would not</font>

412
00:19:27,130 --> 00:19:30,880
have<font color="#CCCCCC"> existed without open source and</font>

413
00:19:28,809 --> 00:19:32,110
<font color="#E5E5E5">therefore we have a mandate from our</font>

414
00:19:30,880 --> 00:19:34,299
<font color="#CCCCCC">leadership to actually</font><font color="#E5E5E5"> open source</font>

415
00:19:32,110 --> 00:19:35,949
properties so hopefully in<font color="#CCCCCC"> one of the</font>

416
00:19:34,299 --> 00:19:37,629
future<font color="#CCCCCC"> Nanak's</font><font color="#E5E5E5"> Matt and I would be in</font>

417
00:19:35,950 --> 00:19:41,140
front<font color="#CCCCCC"> of</font><font color="#E5E5E5"> you announcing open sourcing of</font>

418
00:19:37,630 --> 00:19:43,660
phone optics and finally it was a big

419
00:19:41,140 --> 00:19:46,000
project<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a big shout-out to Ian</font><font color="#E5E5E5"> Sean</font>

420
00:19:43,660 --> 00:19:47,679
stormy<font color="#E5E5E5"> so</font><font color="#CCCCCC"> Tom Malcolm</font><font color="#E5E5E5"> Jess and the</font>

421
00:19:46,000 --> 00:19:51,809
<font color="#CCCCCC">rector</font><font color="#E5E5E5"> for making this happen</font>

422
00:19:47,679 --> 00:19:51,809
<font color="#E5E5E5">and with that we will take questions</font>

423
00:19:53,630 --> 00:20:03,980
<font color="#CCCCCC">how he started</font><font color="#E5E5E5"> people into silence</font><font color="#CCCCCC"> david</font>

424
00:20:01,100 --> 00:20:06,469
<font color="#CCCCCC">Hankins twitter as a fellow monitoring</font>

425
00:20:03,980 --> 00:20:08,480
developer<font color="#CCCCCC"> I'm more interested in sort of</font>

426
00:20:06,470 --> 00:20:09,350
<font color="#E5E5E5">the performance characteristics</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

427
00:20:08,480 --> 00:20:13,390
<font color="#E5E5E5">system</font>

428
00:20:09,350 --> 00:20:16,310
what most cycle<font color="#E5E5E5"> you reached and sort of</font>

429
00:20:13,390 --> 00:20:17,930
maybe a<font color="#E5E5E5"> number of devices per</font><font color="#CCCCCC"> quart or</font>

430
00:20:16,310 --> 00:20:20,270
devices per make of<font color="#CCCCCC"> RAM however you</font>

431
00:20:17,930 --> 00:20:21,710
measure that in terms of how you would

432
00:20:20,270 --> 00:20:24,139
scale it<font color="#E5E5E5"> out I assume</font><font color="#CCCCCC"> you just</font><font color="#E5E5E5"> go</font>

433
00:20:21,710 --> 00:20:26,840
horizontally<font color="#E5E5E5"> sure yeah we do scan</font>

434
00:20:24,140 --> 00:20:29,930
horizontally<font color="#CCCCCC"> I'd make a few comments</font>

435
00:20:26,840 --> 00:20:32,240
<font color="#E5E5E5">about this one of the things</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> knew by</font>

436
00:20:29,930 --> 00:20:34,220
-<font color="#E5E5E5"> by</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> with Python is that we were</font>

437
00:20:32,240 --> 00:20:36,200
trading<font color="#CCCCCC"> off a lot of performance for</font>

438
00:20:34,220 --> 00:20:40,220
easier development so that's you<font color="#CCCCCC"> know</font>

439
00:20:36,200 --> 00:20:42,200
something<font color="#E5E5E5"> we knew upfront our criteria</font>

440
00:20:40,220 --> 00:20:44,330
to measure scaling is not necessarily

441
00:20:42,200 --> 00:20:46,460
devices because we tend to<font color="#E5E5E5"> have devices</font>

442
00:20:44,330 --> 00:20:49,189
<font color="#CCCCCC">produced tons</font><font color="#E5E5E5"> and tons and tons of time</font>

443
00:20:46,460 --> 00:20:51,050
series so for us a better<font color="#E5E5E5"> measurement</font>

444
00:20:49,190 --> 00:20:52,930
criteria<font color="#CCCCCC"> tends</font><font color="#E5E5E5"> to be the number of time</font>

445
00:20:51,050 --> 00:20:56,690
series<font color="#E5E5E5"> that we can process</font>

446
00:20:52,930 --> 00:20:58,040
<font color="#E5E5E5">simultaneously um in terms</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

447
00:20:56,690 --> 00:20:59,930
performance<font color="#CCCCCC"> characteristics maybe I'll</font>

448
00:20:58,040 --> 00:21:01,760
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> to you about that offline I have to</font>

449
00:20:59,930 --> 00:21:07,580
<font color="#E5E5E5">check if I</font><font color="#CCCCCC"> can even</font><font color="#E5E5E5"> give you the numbers</font>

450
00:21:01,760 --> 00:21:13,460
it<font color="#E5E5E5"> I will tell you that this our key</font>

451
00:21:07,580 --> 00:21:17,090
focus more than then scaling performance

452
00:21:13,460 --> 00:21:18,410
was killing horizontally<font color="#E5E5E5"> that make sense</font>

453
00:21:17,090 --> 00:21:20,080
<font color="#E5E5E5">and I'm sure you get</font><font color="#CCCCCC"> why I said that</font>

454
00:21:18,410 --> 00:21:22,700
<font color="#E5E5E5">that makes total sense</font>

455
00:21:20,080 --> 00:21:25,040
we made exactly the same decision about

456
00:21:22,700 --> 00:21:28,070
using Python in the head end of for

457
00:21:25,040 --> 00:21:30,290
precisely the same<font color="#E5E5E5"> reasons and also</font><font color="#CCCCCC"> I</font>

458
00:21:28,070 --> 00:21:32,870
have<font color="#E5E5E5"> merge request number</font><font color="#CCCCCC"> 10 going</font><font color="#E5E5E5"> to</font>

459
00:21:30,290 --> 00:21:36,500
<font color="#E5E5E5">netis an</font><font color="#CCCCCC"> NP</font><font color="#E5E5E5"> to push our version of the</font><font color="#CCCCCC"> C</font>

460
00:21:32,870 --> 00:21:37,939
bindings<font color="#E5E5E5"> up upstream sounds like we're</font>

461
00:21:36,500 --> 00:21:40,850
solving those problems in parallel

462
00:21:37,940 --> 00:21:43,880
awesome yeah we use easy SNMP but you

463
00:21:40,850 --> 00:21:46,879
know we look at what you<font color="#E5E5E5"> have a fork of</font>

464
00:21:43,880 --> 00:21:49,730
<font color="#CCCCCC">easy</font><font color="#E5E5E5"> SNP actually yeah we tried easier</font>

465
00:21:46,880 --> 00:21:51,860
<font color="#CCCCCC">Snoopy</font><font color="#E5E5E5"> and peyote and I think six others</font>

466
00:21:49,730 --> 00:21:56,780
and they all fell<font color="#CCCCCC"> down somewhere for us</font>

467
00:21:51,860 --> 00:21:58,639
yeah<font color="#E5E5E5"> actually state of my turn SNMP was</font>

468
00:21:56,780 --> 00:22:00,379
quite appalling I was it was sad to<font color="#CCCCCC"> see</font>

469
00:21:58,640 --> 00:22:04,370
it<font color="#E5E5E5"> I agree with you I'm glad you guys</font>

470
00:22:00,380 --> 00:22:07,010
are<font color="#E5E5E5"> solving that problem too many</font><font color="#CCCCCC"> to</font>

471
00:22:04,370 --> 00:22:11,540
<font color="#CCCCCC">account yes so one</font>

472
00:22:07,010 --> 00:22:13,850
issue I<font color="#E5E5E5"> think that</font><font color="#CCCCCC"> one of us is you get</font>

473
00:22:11,540 --> 00:22:15,139
legacy tools that expect<font color="#CCCCCC"> us an MP role</font>

474
00:22:13,850 --> 00:22:17,120
<font color="#CCCCCC">in directing the rounders and you get</font>

475
00:22:15,140 --> 00:22:19,940
the<font color="#E5E5E5"> neat thing</font><font color="#CCCCCC"> that takes it</font><font color="#E5E5E5"> from some</font>

476
00:22:17,120 --> 00:22:23,540
<font color="#CCCCCC">data store like</font><font color="#E5E5E5"> how do you you know</font>

477
00:22:19,940 --> 00:22:26,150
merge it so you can deal with the green

478
00:22:23,540 --> 00:22:29,210
fields<font color="#E5E5E5"> in the brown field and</font><font color="#CCCCCC"> get it</font>

479
00:22:26,150 --> 00:22:31,250
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of common view</font><font color="#E5E5E5"> of things so there's</font>

480
00:22:29,210 --> 00:22:32,720
a<font color="#E5E5E5"> two part solution to that the first</font>

481
00:22:31,250 --> 00:22:34,850
thing that we're doing<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a we're</font>

482
00:22:32,720 --> 00:22:37,400
obviously<font color="#E5E5E5"> a multi dependent</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> so</font>

483
00:22:34,850 --> 00:22:41,870
for any class of<font color="#E5E5E5"> device that</font><font color="#CCCCCC"> we pull we</font>

484
00:22:37,400 --> 00:22:44,299
come up with a<font color="#E5E5E5"> pooling data model so if</font>

485
00:22:41,870 --> 00:22:46,639
we are<font color="#E5E5E5"> for example pulling</font><font color="#CCCCCC"> BGP telemetry</font>

486
00:22:44,299 --> 00:22:48,679
regardless of the platform<font color="#E5E5E5"> we do it we</font>

487
00:22:46,640 --> 00:22:51,650
try<font color="#E5E5E5"> and do a survey of whatever we use</font>

488
00:22:48,679 --> 00:22:53,210
<font color="#E5E5E5">and say okay this is the minimum common</font>

489
00:22:51,650 --> 00:22:55,040
subset of information I will<font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

490
00:22:53,210 --> 00:22:56,660
get<font color="#E5E5E5"> from all my existing devices</font><font color="#CCCCCC"> and</font>

491
00:22:55,040 --> 00:22:58,850
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is what I want and you</font><font color="#CCCCCC"> know try and</font>

492
00:22:56,660 --> 00:23:00,650
declare a model saying that no matter

493
00:22:58,850 --> 00:23:03,980
<font color="#E5E5E5">what device I'm polling I must produce</font>

494
00:23:00,650 --> 00:23:06,530
this<font color="#CCCCCC"> information today as of</font><font color="#E5E5E5"> today</font>

495
00:23:03,980 --> 00:23:09,740
that's done by contract but the plan<font color="#CCCCCC"> is</font>

496
00:23:06,530 --> 00:23:13,280
to<font color="#CCCCCC"> actually sort of try and standardize</font>

497
00:23:09,740 --> 00:23:15,559
it I mean I think<font color="#CCCCCC"> of it as</font><font color="#E5E5E5"> trying to</font>

498
00:23:13,280 --> 00:23:18,590
<font color="#E5E5E5">declare you know hopefully</font><font color="#CCCCCC"> maybe an</font>

499
00:23:15,559 --> 00:23:20,990
industry<font color="#E5E5E5"> standard for what the data</font>

500
00:23:18,590 --> 00:23:24,350
model of pole telemetry should<font color="#E5E5E5"> like look</font>

501
00:23:20,990 --> 00:23:27,020
like a abstracting<font color="#CCCCCC"> away</font><font color="#E5E5E5"> vendor specifics</font>

502
00:23:24,350 --> 00:23:29,209
so that's one part the<font color="#CCCCCC"> other</font><font color="#E5E5E5"> part is</font>

503
00:23:27,020 --> 00:23:31,879
integrate<font color="#E5E5E5"> so you know on the</font><font color="#CCCCCC"> pudding</font>

504
00:23:29,210 --> 00:23:34,340
side no matter what<font color="#E5E5E5"> mechanism we</font><font color="#CCCCCC"> use we</font>

505
00:23:31,880 --> 00:23:36,250
<font color="#E5E5E5">normalized to that data model the</font><font color="#CCCCCC"> other</font>

506
00:23:34,340 --> 00:23:38,449
part is<font color="#E5E5E5"> we knew that there will be</font>

507
00:23:36,250 --> 00:23:40,070
downstream legacy systems we need<font color="#E5E5E5"> to</font>

508
00:23:38,450 --> 00:23:43,130
feed and that's what<font color="#E5E5E5"> cost</font><font color="#CCCCCC"> coterminous</font>

509
00:23:40,070 --> 00:23:44,928
<font color="#CCCCCC">and as a choice</font><font color="#E5E5E5"> one of the examples I</font>

510
00:23:43,130 --> 00:23:46,910
will<font color="#E5E5E5"> give you is we depend a lot on mrtg</font>

511
00:23:44,929 --> 00:23:48,080
like I'm sure you know a<font color="#E5E5E5"> lot of us</font><font color="#CCCCCC"> too</font>

512
00:23:46,910 --> 00:23:51,770
and<font color="#E5E5E5"> we have a lot of cooling built</font>

513
00:23:48,080 --> 00:23:53,510
around mrtg<font color="#E5E5E5"> so we don't want to break</font>

514
00:23:51,770 --> 00:23:55,520
any of<font color="#E5E5E5"> that while we migrating to the</font>

515
00:23:53,510 --> 00:23:58,160
new system<font color="#CCCCCC"> so one of the plans we have</font>

516
00:23:55,520 --> 00:23:59,809
in motion is<font color="#CCCCCC"> actually to do the polling</font>

517
00:23:58,160 --> 00:24:02,780
through<font color="#E5E5E5"> the system but right out mrtg</font>

518
00:23:59,809 --> 00:24:04,090
files so you<font color="#E5E5E5"> know cut out the polling</font>

519
00:24:02,780 --> 00:24:07,129
this<font color="#E5E5E5"> is why you know</font><font color="#CCCCCC"> putting</font><font color="#E5E5E5"> its</font>

520
00:24:04,090 --> 00:24:09,290
<font color="#CCCCCC">persistence is</font><font color="#E5E5E5"> decoupled so not only</font>

521
00:24:07,130 --> 00:24:12,200
<font color="#E5E5E5">will I free</font><font color="#CCCCCC"> to you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> mines equal our</font>

522
00:24:09,290 --> 00:24:13,879
central telemetry store possibly an

523
00:24:12,200 --> 00:24:15,559
<font color="#CCCCCC">incall telemetry store but</font><font color="#E5E5E5"> also rather</font>

524
00:24:13,880 --> 00:24:17,450
dramatically files<font color="#E5E5E5"> so that I can</font>

525
00:24:15,559 --> 00:24:18,720
continue<font color="#E5E5E5"> to maintain compatibility with</font>

526
00:24:17,450 --> 00:24:21,429
my legs

527
00:24:18,720 --> 00:24:23,980
does that<font color="#CCCCCC"> on</font><font color="#E5E5E5"> confession</font>

528
00:24:21,429 --> 00:24:26,039
yeah<font color="#E5E5E5"> sometimes you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> easier said than</font>

529
00:24:23,980 --> 00:24:26,039
<font color="#CCCCCC">done</font>

530
00:24:35,780 --> 00:24:39,470
<font color="#CCCCCC">okay thank</font><font color="#E5E5E5"> you guys</font>

