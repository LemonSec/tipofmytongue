1
00:00:10,070 --> 00:00:14,789
<font color="#E5E5E5">okay thank you so I'm going to be</font>

2
00:00:13,440 --> 00:00:16,560
<font color="#CCCCCC">talking about</font><font color="#E5E5E5"> two tools I've been</font>

3
00:00:14,789 --> 00:00:18,720
working on with<font color="#E5E5E5"> collaborators at</font>

4
00:00:16,560 --> 00:00:21,509
Princeton Microsoft and intention net

5
00:00:18,720 --> 00:00:24,200
for proactively finding and preventing

6
00:00:21,509 --> 00:00:26,939
bugs and network configurations

7
00:00:24,200 --> 00:00:28,710
so this work<font color="#E5E5E5"> was</font><font color="#CCCCCC"> very much motivated by</font>

8
00:00:26,939 --> 00:00:30,930
the observation<font color="#CCCCCC"> that network</font>

9
00:00:28,710 --> 00:00:33,480
configuration is still to this day<font color="#CCCCCC"> very</font>

10
00:00:30,930 --> 00:00:35,190
hard and it's<font color="#CCCCCC"> hard for a number of</font>

11
00:00:33,480 --> 00:00:37,110
<font color="#E5E5E5">different reasons so for example one of</font>

12
00:00:35,190 --> 00:00:40,079
<font color="#E5E5E5">these</font><font color="#CCCCCC"> reasons is that networks are</font>

13
00:00:37,110 --> 00:00:42,960
inherently<font color="#E5E5E5"> very complex typical network</font>

14
00:00:40,079 --> 00:00:46,170
is running multiple protocols<font color="#E5E5E5"> like BGP</font>

15
00:00:42,960 --> 00:00:48,060
<font color="#CCCCCC">OSPF and</font><font color="#E5E5E5"> these protocols can interact in</font>

16
00:00:46,170 --> 00:00:51,180
<font color="#E5E5E5">very subtle ways</font><font color="#CCCCCC"> with mechanisms</font><font color="#E5E5E5"> like</font>

17
00:00:48,060 --> 00:00:52,710
route redistribution in addition the

18
00:00:51,180 --> 00:00:54,750
configuration languages that<font color="#E5E5E5"> are</font>

19
00:00:52,710 --> 00:00:55,530
<font color="#E5E5E5">provided</font><font color="#CCCCCC"> by vendors are typically</font><font color="#E5E5E5"> very</font>

20
00:00:54,750 --> 00:00:58,290
<font color="#CCCCCC">low-level</font>

21
00:00:55,530 --> 00:00:59,880
so you have to talk<font color="#E5E5E5"> about protocol level</font>

22
00:00:58,290 --> 00:01:02,250
parameters you have<font color="#E5E5E5"> to configure</font>

23
00:00:59,880 --> 00:01:04,280
interface<font color="#E5E5E5"> level metrics and filters like</font>

24
00:01:02,250 --> 00:01:06,509
route maps and access control lists and

25
00:01:04,280 --> 00:01:10,259
even if you can do this correctly<font color="#E5E5E5"> for</font>

26
00:01:06,509 --> 00:01:11,579
one device<font color="#CCCCCC"> a</font><font color="#E5E5E5"> network is made up of many</font>

27
00:01:10,259 --> 00:01:14,009
devices<font color="#E5E5E5"> so now you have to configure</font>

28
00:01:11,579 --> 00:01:15,749
every device correctly<font color="#CCCCCC"> and do so in such</font>

29
00:01:14,009 --> 00:01:17,369
a way<font color="#CCCCCC"> that the emergent behavior of all</font>

30
00:01:15,749 --> 00:01:20,369
of these devices<font color="#E5E5E5"> does the correct thing</font>

31
00:01:17,369 --> 00:01:22,139
<font color="#CCCCCC">and in</font><font color="#E5E5E5"> particular this gets even more</font>

32
00:01:20,369 --> 00:01:25,380
<font color="#E5E5E5">complicated when you factor in</font><font color="#CCCCCC"> the fact</font>

33
00:01:22,139 --> 00:01:28,170
<font color="#CCCCCC">that</font><font color="#E5E5E5"> links and routers</font><font color="#CCCCCC"> and a</font><font color="#E5E5E5"> network can</font>

34
00:01:25,380 --> 00:01:29,399
fail some sort of arbitrarily<font color="#E5E5E5"> and</font><font color="#CCCCCC"> when</font>

35
00:01:28,170 --> 00:01:31,469
you put all<font color="#CCCCCC"> of these together it's not</font>

36
00:01:29,399 --> 00:01:33,450
<font color="#E5E5E5">so surprising</font><font color="#CCCCCC"> that Mis configurations</font>

37
00:01:31,469 --> 00:01:36,958
are much more<font color="#E5E5E5"> common</font><font color="#CCCCCC"> than you would</font>

38
00:01:33,450 --> 00:01:39,630
expect<font color="#E5E5E5"> so for example a quick Google</font>

39
00:01:36,959 --> 00:01:41,159
search will<font color="#CCCCCC"> reveal</font><font color="#E5E5E5"> dozens of</font><font color="#CCCCCC"> top-line</font>

40
00:01:39,630 --> 00:01:42,539
news articles about<font color="#E5E5E5"> major</font><font color="#CCCCCC"> network</font>

41
00:01:41,159 --> 00:01:44,880
outages related to this configuration

42
00:01:42,539 --> 00:01:47,670
<font color="#E5E5E5">and</font><font color="#CCCCCC"> you can find new ones</font><font color="#E5E5E5"> seemingly</font>

43
00:01:44,880 --> 00:01:50,009
every couple of<font color="#E5E5E5"> months or</font><font color="#CCCCCC"> so and in</font>

44
00:01:47,670 --> 00:01:52,770
particular these<font color="#CCCCCC"> misconfigurations can</font>

45
00:01:50,009 --> 00:01:55,289
<font color="#E5E5E5">be very</font><font color="#CCCCCC"> expensive as well</font><font color="#E5E5E5"> so in terms of</font>

46
00:01:52,770 --> 00:01:57,029
operator time that's spent debugging and

47
00:01:55,289 --> 00:01:59,639
finding these problems and<font color="#CCCCCC"> in terms of</font>

48
00:01:57,029 --> 00:02:04,289
lost revenue to<font color="#E5E5E5"> the outages they can</font>

49
00:01:59,639 --> 00:02:05,339
<font color="#E5E5E5">quickly tally up a very large expense so</font>

50
00:02:04,289 --> 00:02:07,319
in the<font color="#E5E5E5"> rest of the talk I'm</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font>

51
00:02:05,340 --> 00:02:09,179
describing<font color="#E5E5E5"> two tools we've been building</font>

52
00:02:07,319 --> 00:02:11,819
to<font color="#E5E5E5"> try to find and prevent these kinds</font>

53
00:02:09,179 --> 00:02:13,560
of<font color="#E5E5E5"> bugs in your networks the first part</font>

54
00:02:11,819 --> 00:02:15,480
of the talk will be<font color="#CCCCCC"> about minesweeper</font>

55
00:02:13,560 --> 00:02:19,230
<font color="#E5E5E5">which is a new</font><font color="#CCCCCC"> open-source tool for</font>

56
00:02:15,480 --> 00:02:21,359
finding<font color="#CCCCCC"> bugs and legacy networks and the</font>

57
00:02:19,230 --> 00:02:22,119
second part of the talk will be<font color="#CCCCCC"> about</font>

58
00:02:21,360 --> 00:02:24,580
<font color="#E5E5E5">propane</font>

59
00:02:22,120 --> 00:02:26,290
which goes the other direction<font color="#CCCCCC"> it's a</font>

60
00:02:24,580 --> 00:02:28,870
top-down approach which lets you design

61
00:02:26,290 --> 00:02:30,099
<font color="#E5E5E5">at a very high level new networks and</font>

62
00:02:28,870 --> 00:02:33,610
then it will generate<font color="#CCCCCC"> all of the</font>

63
00:02:30,099 --> 00:02:34,510
<font color="#CCCCCC">low-level configurations for you</font><font color="#E5E5E5"> okay so</font>

64
00:02:33,610 --> 00:02:37,299
<font color="#E5E5E5">let me talk a little bit about</font>

65
00:02:34,510 --> 00:02:39,519
<font color="#E5E5E5">minesweeper so in order to understand</font>

66
00:02:37,299 --> 00:02:41,110
why we thought<font color="#CCCCCC"> of tool like minesweeper</font>

67
00:02:39,519 --> 00:02:42,849
would be useful<font color="#E5E5E5"> let's think</font><font color="#CCCCCC"> about how</font>

68
00:02:41,110 --> 00:02:46,480
you can<font color="#E5E5E5"> go about finding bugs in your</font>

69
00:02:42,849 --> 00:02:48,010
<font color="#E5E5E5">network currently so one approach is</font>

70
00:02:46,480 --> 00:02:49,420
what I'm going<font color="#CCCCCC"> to call heuristics</font><font color="#E5E5E5"> and</font>

71
00:02:48,010 --> 00:02:51,459
there's a<font color="#CCCCCC"> number of tools that will do</font>

72
00:02:49,420 --> 00:02:53,950
this and the<font color="#E5E5E5"> idea is</font><font color="#CCCCCC"> to take</font><font color="#E5E5E5"> your</font>

73
00:02:51,459 --> 00:02:55,690
network configurations<font color="#E5E5E5"> do some sort of</font>

74
00:02:53,950 --> 00:02:57,640
string matching on those configurations

75
00:02:55,690 --> 00:03:00,459
to look for the<font color="#E5E5E5"> presence</font><font color="#CCCCCC"> or absence</font><font color="#E5E5E5"> of</font>

76
00:02:57,640 --> 00:03:02,108
certain configuration features and then

77
00:03:00,459 --> 00:03:03,790
flag potential issues accordingly

78
00:03:02,109 --> 00:03:07,000
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example you can detect things</font>

79
00:03:03,790 --> 00:03:11,290
like violations of best practices or you

80
00:03:07,000 --> 00:03:14,709
know<font color="#E5E5E5"> poorly designed passwords for</font>

81
00:03:11,290 --> 00:03:16,000
<font color="#CCCCCC">different devices and so on the problem</font>

82
00:03:14,709 --> 00:03:19,090
with this approach<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it can miss</font>

83
00:03:16,000 --> 00:03:21,250
many bugs<font color="#E5E5E5"> it can report false positives</font>

84
00:03:19,090 --> 00:03:23,200
<font color="#E5E5E5">things that aren't</font><font color="#CCCCCC"> actually bugs</font><font color="#E5E5E5"> and in</font>

85
00:03:21,250 --> 00:03:24,430
general it's<font color="#CCCCCC"> very hard</font><font color="#E5E5E5"> to test any kind</font>

86
00:03:23,200 --> 00:03:27,488
of<font color="#E5E5E5"> forwarding</font><font color="#CCCCCC"> behavior of your network</font>

87
00:03:24,430 --> 00:03:28,780
using<font color="#E5E5E5"> this approach so if you do want to</font>

88
00:03:27,489 --> 00:03:30,669
<font color="#E5E5E5">test the forwarding behavior of your</font>

89
00:03:28,780 --> 00:03:32,500
network<font color="#CCCCCC"> the current sort of best</font>

90
00:03:30,669 --> 00:03:34,810
approach is to<font color="#CCCCCC"> either use simulation or</font>

91
00:03:32,500 --> 00:03:36,010
emulation<font color="#E5E5E5"> so the idea is</font><font color="#CCCCCC"> to take the</font>

92
00:03:34,810 --> 00:03:37,840
network control play in all<font color="#CCCCCC"> of the</font>

93
00:03:36,010 --> 00:03:39,849
configurations run them through a

94
00:03:37,840 --> 00:03:42,069
simulator<font color="#E5E5E5"> or an emulator produce the</font>

95
00:03:39,849 --> 00:03:43,418
<font color="#E5E5E5">data plane and then check the data plane</font>

96
00:03:42,069 --> 00:03:45,190
for correctness by using<font color="#E5E5E5"> tools</font><font color="#CCCCCC"> like</font>

97
00:03:43,419 --> 00:03:48,519
<font color="#CCCCCC">tracer out</font><font color="#E5E5E5"> investigating the forwarding</font>

98
00:03:45,190 --> 00:03:50,440
tables and so<font color="#E5E5E5"> on but this also has a</font>

99
00:03:48,519 --> 00:03:51,760
<font color="#E5E5E5">number</font><font color="#CCCCCC"> of limitations so for example</font>

100
00:03:50,440 --> 00:03:53,680
certain bugs are only going to<font color="#E5E5E5"> be</font>

101
00:03:51,760 --> 00:03:56,858
<font color="#CCCCCC">triggered in the</font><font color="#E5E5E5"> presence</font><font color="#CCCCCC"> of very</font>

102
00:03:53,680 --> 00:03:58,690
specific<font color="#E5E5E5"> ebgp routing advertisements for</font>

103
00:03:56,859 --> 00:04:02,500
neighbors and so if you're using<font color="#CCCCCC"> a</font>

104
00:03:58,690 --> 00:04:04,269
simulator<font color="#E5E5E5"> you can't realistically test</font>

105
00:04:02,500 --> 00:04:05,590
out<font color="#CCCCCC"> all possible combinations of routing</font>

106
00:04:04,269 --> 00:04:06,790
advertisements from<font color="#E5E5E5"> your neighbors</font>

107
00:04:05,590 --> 00:04:09,449
because<font color="#CCCCCC"> you'd have</font><font color="#E5E5E5"> to rerun the tool</font>

108
00:04:06,790 --> 00:04:11,948
<font color="#CCCCCC">over and</font><font color="#E5E5E5"> over again for</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> combination</font>

109
00:04:09,449 --> 00:04:14,440
<font color="#E5E5E5">similarly certain configuration bugs are</font>

110
00:04:11,949 --> 00:04:16,750
only going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a presence in</font><font color="#E5E5E5"> certain</font>

111
00:04:14,440 --> 00:04:18,219
links fail and again a simulator you

112
00:04:16,750 --> 00:04:20,769
can't<font color="#CCCCCC"> realistically</font><font color="#E5E5E5"> for large enough</font>

113
00:04:18,220 --> 00:04:22,120
networks try out every combination of

114
00:04:20,769 --> 00:04:25,210
link failures to see if your networks

115
00:04:22,120 --> 00:04:27,190
still going to be<font color="#E5E5E5"> running correctly so</font>

116
00:04:25,210 --> 00:04:30,099
minesweeper was developed to<font color="#E5E5E5"> try to</font>

117
00:04:27,190 --> 00:04:31,539
overcome<font color="#E5E5E5"> these limitations it can check</font>

118
00:04:30,099 --> 00:04:33,640
a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> properties of your network</font>

119
00:04:31,539 --> 00:04:34,810
for<font color="#CCCCCC"> all</font><font color="#E5E5E5"> possible combinations of</font>

120
00:04:33,640 --> 00:04:36,880
external routing

121
00:04:34,810 --> 00:04:39,540
<font color="#CCCCCC">Edge's and for all possible combinations</font>

122
00:04:36,880 --> 00:04:41,590
of<font color="#E5E5E5"> link failures and it does this by</font>

123
00:04:39,540 --> 00:04:44,020
translating<font color="#E5E5E5"> your network into a</font>

124
00:04:41,590 --> 00:04:45,669
collection<font color="#CCCCCC"> of logical constraints which</font>

125
00:04:44,020 --> 00:04:47,500
can then<font color="#E5E5E5"> be solved by an off-the-shelf</font>

126
00:04:45,669 --> 00:04:49,810
constraint<font color="#E5E5E5"> solver and these tools have</font>

127
00:04:47,500 --> 00:04:52,990
been developed<font color="#CCCCCC"> over</font><font color="#E5E5E5"> many many decades to</font>

128
00:04:49,810 --> 00:04:55,450
be very efficient at finding inputs that

129
00:04:52,990 --> 00:04:57,280
can violate constraints it's available

130
00:04:55,450 --> 00:04:59,590
<font color="#E5E5E5">as open source software and</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> find</font>

131
00:04:57,280 --> 00:05:02,799
it on github<font color="#E5E5E5"> and we've use it to find</font>

132
00:04:59,590 --> 00:05:04,719
bugs<font color="#E5E5E5"> in real networks as well</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

133
00:05:02,800 --> 00:05:07,510
the typical workflow of a tool like

134
00:05:04,720 --> 00:05:09,419
minesweeper is as follows so you start

135
00:05:07,510 --> 00:05:12,460
with some<font color="#E5E5E5"> collection of vendor specific</font>

136
00:05:09,419 --> 00:05:14,080
<font color="#E5E5E5">configurations</font><font color="#CCCCCC"> you'll have them in</font>

137
00:05:12,460 --> 00:05:16,570
various<font color="#E5E5E5"> formats maybe Cisco maybe</font>

138
00:05:14,080 --> 00:05:18,669
juniper maybe Arista we run these

139
00:05:16,570 --> 00:05:20,500
through a tool called batfish<font color="#CCCCCC"> wicken</font>

140
00:05:18,669 --> 00:05:23,590
which can parse them into a<font color="#E5E5E5"> vendor</font>

141
00:05:20,500 --> 00:05:25,180
<font color="#E5E5E5">independent format from here we use</font>

142
00:05:23,590 --> 00:05:27,909
minesweeper to translate this<font color="#E5E5E5"> into</font>

143
00:05:25,180 --> 00:05:30,160
logical constraints you can<font color="#CCCCCC"> then add a</font>

144
00:05:27,910 --> 00:05:32,470
query on top of this and<font color="#E5E5E5"> we throw it out</font>

145
00:05:30,160 --> 00:05:34,360
as a constraint<font color="#E5E5E5"> solver which can then</font>

146
00:05:32,470 --> 00:05:36,340
check whether<font color="#E5E5E5"> or not</font><font color="#CCCCCC"> there ever going</font><font color="#E5E5E5"> to</font>

147
00:05:34,360 --> 00:05:39,940
be<font color="#E5E5E5"> inputs to your network</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> can cause</font>

148
00:05:36,340 --> 00:05:41,679
issues so just<font color="#CCCCCC"> to dive a little bit into</font>

149
00:05:39,940 --> 00:05:43,780
<font color="#E5E5E5">sort of more technically what's</font>

150
00:05:41,680 --> 00:05:45,760
happening in<font color="#E5E5E5"> terms of how minesweeper</font>

151
00:05:43,780 --> 00:05:47,169
works if you<font color="#CCCCCC"> have a network</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> I've</font>

152
00:05:45,760 --> 00:05:50,800
shown on the left<font color="#CCCCCC"> here with</font><font color="#E5E5E5"> three</font>

153
00:05:47,169 --> 00:05:52,840
routers r1 r2 and<font color="#CCCCCC"> r3 the first thing we</font>

154
00:05:50,800 --> 00:05:54,520
do is we deconstruct this<font color="#E5E5E5"> network into</font>

155
00:05:52,840 --> 00:05:57,039
what I'm going<font color="#CCCCCC"> to call a protocol view</font>

156
00:05:54,520 --> 00:05:59,200
of the network<font color="#CCCCCC"> so each router gets split</font>

157
00:05:57,039 --> 00:06:01,210
into<font color="#E5E5E5"> the constituent protocols that run</font>

158
00:05:59,200 --> 00:06:03,400
on that router so for example<font color="#E5E5E5"> r1 might</font>

159
00:06:01,210 --> 00:06:05,349
be running<font color="#E5E5E5"> BGP which is connected to its</font>

160
00:06:03,400 --> 00:06:08,320
neighbor<font color="#E5E5E5"> r2 and it might be connected to</font>

161
00:06:05,350 --> 00:06:09,729
some<font color="#E5E5E5"> external peer as well and one it</font>

162
00:06:08,320 --> 00:06:11,200
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> running OSPF with other</font>

163
00:06:09,729 --> 00:06:15,010
neighbors as<font color="#E5E5E5"> well as a number</font><font color="#CCCCCC"> of other</font>

164
00:06:11,200 --> 00:06:16,930
protocols we can then refine<font color="#E5E5E5"> this a bit</font>

165
00:06:15,010 --> 00:06:18,190
<font color="#CCCCCC">further by zooming in on a particular</font>

166
00:06:16,930 --> 00:06:20,289
protocol so this is what<font color="#E5E5E5"> I'm going to</font>

167
00:06:18,190 --> 00:06:23,050
call<font color="#E5E5E5"> the constraint view of the BGP</font>

168
00:06:20,289 --> 00:06:24,969
process and r1 and the idea is that

169
00:06:23,050 --> 00:06:27,039
<font color="#E5E5E5">we're going to add arrows between the</font>

170
00:06:24,970 --> 00:06:30,460
different processes running on<font color="#E5E5E5"> these</font>

171
00:06:27,039 --> 00:06:32,440
routers to indicate the flow<font color="#CCCCCC"> of control</font>

172
00:06:30,460 --> 00:06:34,810
<font color="#CCCCCC">point</font><font color="#E5E5E5"> information so for example if</font>

173
00:06:32,440 --> 00:06:37,270
connected routes are redistributed<font color="#CCCCCC"> into</font>

174
00:06:34,810 --> 00:06:39,580
<font color="#E5E5E5">BGP then we're going to add an arrow</font>

175
00:06:37,270 --> 00:06:43,780
between<font color="#E5E5E5"> the r1 connected protocol and</font>

176
00:06:39,580 --> 00:06:45,669
the r1<font color="#E5E5E5"> BGP protocol and the idea then is</font>

177
00:06:43,780 --> 00:06:48,159
<font color="#CCCCCC">that we're going</font><font color="#E5E5E5"> to associate protocol</font>

178
00:06:45,669 --> 00:06:48,680
<font color="#CCCCCC">messages along each of these edges</font><font color="#E5E5E5"> in</font>

179
00:06:48,159 --> 00:06:51,530
this data

180
00:06:48,680 --> 00:06:53,419
structure<font color="#CCCCCC"> so basically are</font><font color="#E5E5E5"> ones bgp</font>

181
00:06:51,530 --> 00:06:56,479
process might export certain routes to

182
00:06:53,419 --> 00:06:59,030
<font color="#E5E5E5">r2s bgp process and are similarly</font><font color="#CCCCCC"> our</font>

183
00:06:56,479 --> 00:07:01,270
<font color="#E5E5E5">two's bgp process will import certain</font>

184
00:06:59,030 --> 00:07:03,109
messages from our<font color="#E5E5E5"> ones</font><font color="#CCCCCC"> bgp process</font>

185
00:07:01,270 --> 00:07:04,580
the main difference though is that

186
00:07:03,110 --> 00:07:06,560
<font color="#E5E5E5">rather than computing what these</font>

187
00:07:04,580 --> 00:07:08,780
protocol messages<font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to be using</font>

188
00:07:06,560 --> 00:07:10,820
something like simulation<font color="#E5E5E5"> we're going to</font>

189
00:07:08,780 --> 00:07:11,989
<font color="#E5E5E5">treat these as unknown values we're</font>

190
00:07:10,820 --> 00:07:13,909
going to<font color="#E5E5E5"> treat them as variables whose</font>

191
00:07:11,990 --> 00:07:16,970
values we don't know so<font color="#E5E5E5"> for example a</font>

192
00:07:13,910 --> 00:07:20,000
BGP message has a prefix which is 32

193
00:07:16,970 --> 00:07:21,860
bits in<font color="#E5E5E5"> the case of ipv4 but we're not</font>

194
00:07:20,000 --> 00:07:25,419
going<font color="#CCCCCC"> to say what exactly that</font><font color="#E5E5E5"> prefix is</font>

195
00:07:21,860 --> 00:07:27,440
and the idea<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> of</font>

196
00:07:25,419 --> 00:07:30,409
simulating the network we're going to

197
00:07:27,440 --> 00:07:31,910
constrain the<font color="#CCCCCC"> various protocol messages</font>

198
00:07:30,410 --> 00:07:34,340
in the network using<font color="#CCCCCC"> these logical</font>

199
00:07:31,910 --> 00:07:36,050
constraints and in particular the import

200
00:07:34,340 --> 00:07:37,669
<font color="#E5E5E5">and export filters in</font><font color="#CCCCCC"> your</font>

201
00:07:36,050 --> 00:07:40,669
configurations are going to define<font color="#E5E5E5"> the</font>

202
00:07:37,669 --> 00:07:43,190
<font color="#CCCCCC">relationships between these messages</font><font color="#E5E5E5"> so</font>

203
00:07:40,669 --> 00:07:45,320
for<font color="#E5E5E5"> example if our ones</font><font color="#CCCCCC"> bgp process has</font>

204
00:07:43,190 --> 00:07:48,469
an import filter from<font color="#CCCCCC"> our 2's bgp</font>

205
00:07:45,320 --> 00:07:50,240
process<font color="#CCCCCC"> this defines a collection of</font>

206
00:07:48,470 --> 00:07:53,180
constraints relating the messages sent

207
00:07:50,240 --> 00:07:56,810
<font color="#E5E5E5">by</font><font color="#CCCCCC"> r2 and the messages received</font><font color="#E5E5E5"> from r1</font>

208
00:07:53,180 --> 00:07:58,340
and<font color="#CCCCCC"> PGT okay so just to make this a bit</font>

209
00:07:56,810 --> 00:08:00,470
<font color="#E5E5E5">more concrete</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> thought I would show an</font>

210
00:07:58,340 --> 00:08:02,599
example<font color="#E5E5E5"> demo of how</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> actually use</font>

211
00:08:00,470 --> 00:08:04,400
<font color="#E5E5E5">minesweeper on a real network so I'm</font>

212
00:08:02,599 --> 00:08:06,800
going to<font color="#E5E5E5"> be using it to analyze the</font>

213
00:08:04,400 --> 00:08:08,719
<font color="#CCCCCC">network I have</font><font color="#E5E5E5"> shown here</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

214
00:08:06,800 --> 00:08:10,520
simplified<font color="#CCCCCC"> version of a campus network</font>

215
00:08:08,720 --> 00:08:13,370
where<font color="#CCCCCC"> the campus network is autonomous</font>

216
00:08:10,520 --> 00:08:15,169
system a<font color="#E5E5E5"> s2 it has a collection of</font>

217
00:08:13,370 --> 00:08:18,440
border routers which connect to upstream

218
00:08:15,169 --> 00:08:19,969
ISPs<font color="#CCCCCC"> a connection</font><font color="#E5E5E5"> tier of core routers</font>

219
00:08:18,440 --> 00:08:22,130
which serve as route reflectors in<font color="#CCCCCC"> the</font>

220
00:08:19,970 --> 00:08:23,840
network and<font color="#E5E5E5"> a tier of distribution</font>

221
00:08:22,130 --> 00:08:26,539
routers which connect<font color="#CCCCCC"> to individual</font>

222
00:08:23,840 --> 00:08:27,888
<font color="#CCCCCC">academic departments</font><font color="#E5E5E5"> and so in</font>

223
00:08:26,539 --> 00:08:29,900
particular I'm just going<font color="#CCCCCC"> to be</font><font color="#E5E5E5"> showing</font>

224
00:08:27,889 --> 00:08:31,729
<font color="#E5E5E5">how I can check a reach ability property</font>

225
00:08:29,900 --> 00:08:34,159
between<font color="#E5E5E5"> one of the hosts</font><font color="#CCCCCC"> in this</font>

226
00:08:31,729 --> 00:08:35,360
department<font color="#CCCCCC"> and border routers in this</font>

227
00:08:34,159 --> 00:08:36,828
network<font color="#CCCCCC"> so I want</font><font color="#E5E5E5"> to make sure that the</font>

228
00:08:35,360 --> 00:08:42,529
border routers will always have a route

229
00:08:36,828 --> 00:08:44,899
<font color="#CCCCCC">to host one here ok so the</font><font color="#E5E5E5"> first thing I</font>

230
00:08:42,529 --> 00:08:47,510
<font color="#CCCCCC">would do with my minesweeper is I can</font>

231
00:08:44,899 --> 00:08:50,630
load up<font color="#E5E5E5"> the batfish analysis tool in</font>

232
00:08:47,510 --> 00:08:52,220
interactive<font color="#E5E5E5"> mode to run queries this is</font>

233
00:08:50,630 --> 00:08:53,720
going to bring<font color="#E5E5E5"> up the batfish interface</font>

234
00:08:52,220 --> 00:08:56,779
where<font color="#CCCCCC"> I can then parse the</font>

235
00:08:53,720 --> 00:08:58,279
configurations for this<font color="#E5E5E5"> network I do</font>

236
00:08:56,779 --> 00:08:59,630
<font color="#E5E5E5">this by pointing it at a folder that</font>

237
00:08:58,279 --> 00:09:01,350
<font color="#CCCCCC">contains all of the network</font>

238
00:08:59,630 --> 00:09:02,730
configurations in it and that

239
00:09:01,350 --> 00:09:04,500
the<font color="#E5E5E5"> only input that you need to give it</font>

240
00:09:02,730 --> 00:09:07,860
<font color="#CCCCCC">it'll infer the topology and</font><font color="#E5E5E5"> everything</font>

241
00:09:04,500 --> 00:09:09,630
<font color="#E5E5E5">from here once the considerations are</font>

242
00:09:07,860 --> 00:09:11,760
parsed and loaded by that fish we can

243
00:09:09,630 --> 00:09:13,460
run minesweeper queries on it<font color="#E5E5E5"> so for</font>

244
00:09:11,760 --> 00:09:15,840
<font color="#E5E5E5">example I wanted to check reach ability</font>

245
00:09:13,460 --> 00:09:18,540
<font color="#E5E5E5">between two</font><font color="#CCCCCC"> devices</font><font color="#E5E5E5"> in my network so I</font>

246
00:09:15,840 --> 00:09:20,490
can issue a reach ability query<font color="#E5E5E5"> I'm</font>

247
00:09:18,540 --> 00:09:22,140
going to specify<font color="#E5E5E5"> where</font><font color="#CCCCCC"> packets can start</font>

248
00:09:20,490 --> 00:09:23,550
start from where I'm<font color="#E5E5E5"> injecting them into</font>

249
00:09:22,140 --> 00:09:27,030
<font color="#E5E5E5">the network so I care about reach</font>

250
00:09:23,550 --> 00:09:28,620
ability<font color="#E5E5E5"> from any ingress node</font><font color="#CCCCCC"> any border</font>

251
00:09:27,030 --> 00:09:31,949
ingress and<font color="#E5E5E5"> hood which I specify with a</font>

252
00:09:28,620 --> 00:09:33,570
regular expression<font color="#E5E5E5"> here I'm interested</font>

253
00:09:31,950 --> 00:09:35,340
in packets<font color="#E5E5E5"> being able to reach a</font>

254
00:09:33,570 --> 00:09:37,320
<font color="#CCCCCC">destination node which is the</font><font color="#E5E5E5"> department</font>

255
00:09:35,340 --> 00:09:40,800
router<font color="#CCCCCC"> I was talking about</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> s2</font>

256
00:09:37,320 --> 00:09:42,720
<font color="#CCCCCC">department one and</font><font color="#E5E5E5"> I'm particular I'm</font>

257
00:09:40,800 --> 00:09:44,670
interested<font color="#CCCCCC"> in a reach ability</font><font color="#E5E5E5"> to a</font>

258
00:09:42,720 --> 00:09:46,140
destination interface which is<font color="#CCCCCC"> a</font>

259
00:09:44,670 --> 00:09:49,680
particular interface on that<font color="#CCCCCC"> department</font>

260
00:09:46,140 --> 00:09:51,660
<font color="#CCCCCC">one router and so I can issue this</font>

261
00:09:49,680 --> 00:09:54,359
command to<font color="#E5E5E5"> minesweeper</font><font color="#CCCCCC"> and it will check</font>

262
00:09:51,660 --> 00:09:55,560
and try to<font color="#E5E5E5"> find some possible collection</font>

263
00:09:54,360 --> 00:09:57,690
of inputs<font color="#E5E5E5"> to this network that can</font>

264
00:09:55,560 --> 00:09:59,369
<font color="#CCCCCC">violate the property</font><font color="#E5E5E5"> and so in this</font>

265
00:09:57,690 --> 00:10:01,950
<font color="#E5E5E5">example what it's done is</font><font color="#CCCCCC"> it's found an</font>

266
00:09:59,370 --> 00:10:03,840
example where<font color="#E5E5E5"> this property doesn't hold</font>

267
00:10:01,950 --> 00:10:06,000
so<font color="#CCCCCC"> it gives us a</font><font color="#E5E5E5"> packet including the</font>

268
00:10:03,840 --> 00:10:08,280
various fields that<font color="#E5E5E5"> are relevant for the</font>

269
00:10:06,000 --> 00:10:10,920
counter example<font color="#E5E5E5"> in this case the source</font>

270
00:10:08,280 --> 00:10:12,600
and<font color="#E5E5E5"> destination IP and nothing else it</font>

271
00:10:10,920 --> 00:10:14,400
also gives us a<font color="#CCCCCC"> collection of</font><font color="#E5E5E5"> BGP</font>

272
00:10:12,600 --> 00:10:16,140
routing advertisements from<font color="#E5E5E5"> neighbors so</font>

273
00:10:14,400 --> 00:10:18,329
for<font color="#E5E5E5"> example here it found that a</font>

274
00:10:16,140 --> 00:10:20,670
particular BGP advertisement from one of

275
00:10:18,330 --> 00:10:22,920
the ISPs<font color="#E5E5E5"> with particular community</font>

276
00:10:20,670 --> 00:10:25,969
values attached and a particular prefix

277
00:10:22,920 --> 00:10:27,990
<font color="#E5E5E5">and prefix length and BGP path length is</font>

278
00:10:25,970 --> 00:10:29,760
basically<font color="#E5E5E5"> going to cause a problem and</font>

279
00:10:27,990 --> 00:10:31,530
<font color="#CCCCCC">the problem</font><font color="#E5E5E5"> is that this BGP</font>

280
00:10:29,760 --> 00:10:33,420
advertisement is essentially hijacking

281
00:10:31,530 --> 00:10:35,430
traffic away<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the intended</font>

282
00:10:33,420 --> 00:10:37,349
<font color="#CCCCCC">destination of</font><font color="#E5E5E5"> host</font><font color="#CCCCCC"> 1 in our network and</font>

283
00:10:35,430 --> 00:10:39,540
then finally the tool is<font color="#CCCCCC"> going to give</font>

284
00:10:37,350 --> 00:10:41,790
us<font color="#CCCCCC"> the</font><font color="#E5E5E5"> forwarding behavior</font><font color="#CCCCCC"> under</font><font color="#E5E5E5"> this</font>

285
00:10:39,540 --> 00:10:45,180
counter example that it found<font color="#E5E5E5"> in the</font>

286
00:10:41,790 --> 00:10:46,920
network<font color="#E5E5E5"> ok so the</font><font color="#CCCCCC"> problem was that</font><font color="#E5E5E5"> we're</font>

287
00:10:45,180 --> 00:10:48,449
not filtering<font color="#E5E5E5"> the this type of</font>

288
00:10:46,920 --> 00:10:51,030
<font color="#E5E5E5">advertisement from our neighbor in our</font>

289
00:10:48,450 --> 00:10:53,910
configurations<font color="#E5E5E5"> so if we wanted</font><font color="#CCCCCC"> to fix</font>

290
00:10:51,030 --> 00:10:55,800
this<font color="#CCCCCC"> problem what we could go do is go</font>

291
00:10:53,910 --> 00:10:58,380
into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> configuration and add an</font>

292
00:10:55,800 --> 00:11:03,240
additional route map entry which blocks

293
00:10:58,380 --> 00:11:05,070
advertisements<font color="#E5E5E5"> from this is p4 the the</font>

294
00:11:03,240 --> 00:11:07,410
types of routes<font color="#E5E5E5"> that I'm supposed to be</font>

295
00:11:05,070 --> 00:11:08,820
<font color="#E5E5E5">outbound from my network so I can go</font>

296
00:11:07,410 --> 00:11:10,439
<font color="#E5E5E5">ahead and add an additional route map</font>

297
00:11:08,820 --> 00:11:13,670
entry for outbound routes in this

298
00:11:10,440 --> 00:11:14,760
<font color="#CCCCCC">configuration file for the border router</font>

299
00:11:13,670 --> 00:11:17,010
then

300
00:11:14,760 --> 00:11:19,830
I'm going to<font color="#E5E5E5"> reparse</font><font color="#CCCCCC"> the configurations</font>

301
00:11:17,010 --> 00:11:24,450
using<font color="#CCCCCC"> batfish and then reissue the reach</font>

302
00:11:19,830 --> 00:11:25,620
ability command<font color="#CCCCCC"> and minesweeper and so</font>

303
00:11:24,450 --> 00:11:26,520
this time it's going<font color="#E5E5E5"> to come</font><font color="#CCCCCC"> back and</font>

304
00:11:25,620 --> 00:11:28,290
<font color="#E5E5E5">it's going to tell us</font><font color="#CCCCCC"> that it was</font>

305
00:11:26,520 --> 00:11:30,630
actually<font color="#E5E5E5"> able to guarantee</font><font color="#CCCCCC"> that this</font>

306
00:11:28,290 --> 00:11:32,430
property<font color="#CCCCCC"> holds no matter</font><font color="#E5E5E5"> what bgp</font>

307
00:11:30,630 --> 00:11:34,830
routing<font color="#E5E5E5"> advertisements you hear from</font>

308
00:11:32,430 --> 00:11:37,079
peers<font color="#CCCCCC"> I might</font><font color="#E5E5E5"> also be</font><font color="#CCCCCC"> interested in</font>

309
00:11:34,830 --> 00:11:39,150
<font color="#CCCCCC">checking that this property holds</font><font color="#E5E5E5"> in my</font>

310
00:11:37,080 --> 00:11:41,520
network<font color="#E5E5E5"> for all single failures so I can</font>

311
00:11:39,150 --> 00:11:43,800
add<font color="#E5E5E5"> the arguments</font><font color="#CCCCCC"> that it should</font>

312
00:11:41,520 --> 00:11:46,140
consider all<font color="#E5E5E5"> combinations of one</font><font color="#CCCCCC"> network</font>

313
00:11:43,800 --> 00:11:47,750
failure and so once again<font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> come</font>

314
00:11:46,140 --> 00:11:49,770
<font color="#E5E5E5">back and it'll tell us that it's able to</font>

315
00:11:47,750 --> 00:11:52,140
<font color="#E5E5E5">guarantee that this property holds</font><font color="#CCCCCC"> for</font>

316
00:11:49,770 --> 00:11:55,230
<font color="#CCCCCC">all possible combinations of now one</font>

317
00:11:52,140 --> 00:11:57,390
failure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> BGP</font><font color="#E5E5E5"> advertisements</font><font color="#CCCCCC"> and if I</font>

318
00:11:55,230 --> 00:11:59,280
did<font color="#E5E5E5"> this for</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> failures then it would</font>

319
00:11:57,390 --> 00:12:03,510
find another<font color="#E5E5E5"> counter example because it</font>

320
00:11:59,280 --> 00:12:04,920
could partition the<font color="#CCCCCC"> topology so I showed</font>

321
00:12:03,510 --> 00:12:07,170
<font color="#CCCCCC">how</font><font color="#E5E5E5"> you can check properties like reach</font>

322
00:12:04,920 --> 00:12:08,670
ability<font color="#E5E5E5"> in a network there also a number</font>

323
00:12:07,170 --> 00:12:10,740
of other properties we can<font color="#E5E5E5"> check with</font>

324
00:12:08,670 --> 00:12:12,569
minesweeper<font color="#E5E5E5"> so for example we can check</font>

325
00:12:10,740 --> 00:12:14,820
if multiple routers<font color="#E5E5E5"> in your network are</font>

326
00:12:12,570 --> 00:12:18,090
always going to<font color="#E5E5E5"> have equal length</font><font color="#CCCCCC"> paths</font>

327
00:12:14,820 --> 00:12:19,770
<font color="#E5E5E5">to a particular destination we can check</font>

328
00:12:18,090 --> 00:12:21,630
if<font color="#CCCCCC"> there's any packet which will ever</font>

329
00:12:19,770 --> 00:12:25,050
<font color="#E5E5E5">experience</font><font color="#CCCCCC"> a routing loop under any</font>

330
00:12:21,630 --> 00:12:28,350
situation<font color="#E5E5E5"> we can check if you're using</font>

331
00:12:25,050 --> 00:12:30,300
<font color="#E5E5E5">ecmp if basically you ever drop a packet</font>

332
00:12:28,350 --> 00:12:31,560
<font color="#E5E5E5">on one path</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> not along another path</font>

333
00:12:30,300 --> 00:12:33,300
<font color="#CCCCCC">which might arise</font><font color="#E5E5E5"> if you have a</font>

334
00:12:31,560 --> 00:12:35,939
misconfigured access control list for

335
00:12:33,300 --> 00:12:38,250
example<font color="#E5E5E5"> we can also check properties</font>

336
00:12:35,940 --> 00:12:40,410
like<font color="#CCCCCC"> the two routers</font><font color="#E5E5E5"> serve equal roles</font>

337
00:12:38,250 --> 00:12:41,940
like in a data<font color="#E5E5E5"> center so you might have</font>

338
00:12:40,410 --> 00:12:44,280
<font color="#CCCCCC">to spine routers that you want to check</font>

339
00:12:41,940 --> 00:12:48,570
basically<font color="#E5E5E5"> that do the</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> thing for all</font>

340
00:12:44,280 --> 00:12:50,819
possible inputs the current features

341
00:12:48,570 --> 00:12:53,850
<font color="#E5E5E5">that minesweeper supports are basically</font>

342
00:12:50,820 --> 00:12:55,620
most of<font color="#CCCCCC"> OSPF as well as bgp so right now</font>

343
00:12:53,850 --> 00:12:58,140
we support<font color="#CCCCCC"> bgp local preference</font>

344
00:12:55,620 --> 00:13:01,410
communities meds<font color="#E5E5E5"> prepending aggregation</font>

345
00:12:58,140 --> 00:13:02,790
as well as<font color="#E5E5E5"> i</font><font color="#CCCCCC"> bgp and route reflectors we</font>

346
00:13:01,410 --> 00:13:04,890
also<font color="#E5E5E5"> support static routes throughout</font>

347
00:13:02,790 --> 00:13:07,589
redistribution<font color="#E5E5E5"> multipath routing and</font>

348
00:13:04,890 --> 00:13:09,689
<font color="#CCCCCC">ackles we currently don't</font><font color="#E5E5E5"> support ipv6</font>

349
00:13:07,590 --> 00:13:14,250
<font color="#CCCCCC">although there's no</font><font color="#E5E5E5"> technical reason</font><font color="#CCCCCC"> why</font>

350
00:13:09,690 --> 00:13:17,430
this can't<font color="#E5E5E5"> be</font><font color="#CCCCCC"> added in the future so to</font>

351
00:13:14,250 --> 00:13:19,830
look at how well minesweeper performs<font color="#E5E5E5"> we</font>

352
00:13:17,430 --> 00:13:22,109
basically ran it<font color="#E5E5E5"> on a collection</font><font color="#CCCCCC"> of 152</font>

353
00:13:19,830 --> 00:13:25,140
<font color="#E5E5E5">legacy data center networks we obtained</font>

354
00:13:22,110 --> 00:13:26,340
from a large cloud provider and we

355
00:13:25,140 --> 00:13:27,990
didn't really<font color="#E5E5E5"> know what the intended</font>

356
00:13:26,340 --> 00:13:29,280
policy in this<font color="#CCCCCC"> network was so we tried</font>

357
00:13:27,990 --> 00:13:31,170
<font color="#E5E5E5">to check properties that we thought</font>

358
00:13:29,280 --> 00:13:33,839
would should always hold sort of

359
00:13:31,170 --> 00:13:35,670
regardless<font color="#E5E5E5"> of the the network so</font><font color="#CCCCCC"> we</font>

360
00:13:33,840 --> 00:13:38,100
checked<font color="#E5E5E5"> two properties in particular</font><font color="#CCCCCC"> one</font>

361
00:13:35,670 --> 00:13:40,740
was reach<font color="#E5E5E5"> ability to management</font>

362
00:13:38,100 --> 00:13:43,410
<font color="#CCCCCC">interfaces in the network</font><font color="#E5E5E5"> surprisingly</font>

363
00:13:40,740 --> 00:13:45,990
we actually found<font color="#E5E5E5"> 67 violations of this</font>

364
00:13:43,410 --> 00:13:47,880
property most of them were caused by

365
00:13:45,990 --> 00:13:50,430
some<font color="#CCCCCC"> particular environment so</font><font color="#E5E5E5"> basically</font>

366
00:13:47,880 --> 00:13:52,680
had<font color="#E5E5E5"> a</font><font color="#CCCCCC"> BGP hijacking type of attack where</font>

367
00:13:50,430 --> 00:13:54,329
a<font color="#E5E5E5"> BGP peer</font><font color="#CCCCCC"> was send an advertisement</font>

368
00:13:52,680 --> 00:13:56,640
<font color="#E5E5E5">within particular prefix</font><font color="#CCCCCC"> planks and path</font>

369
00:13:54,330 --> 00:13:58,350
length<font color="#CCCCCC"> and would override</font><font color="#E5E5E5"> the BGP</font>

370
00:13:56,640 --> 00:14:01,560
decision process on one or<font color="#CCCCCC"> more of the</font>

371
00:13:58,350 --> 00:14:04,670
<font color="#CCCCCC">putters we also checked</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> equivalence</font>

372
00:14:01,560 --> 00:14:07,140
of<font color="#E5E5E5"> routers property on a bunch of these</font>

373
00:14:04,670 --> 00:14:09,270
routers<font color="#E5E5E5"> in the data center based on the</font>

374
00:14:07,140 --> 00:14:11,370
<font color="#E5E5E5">naming</font><font color="#CCCCCC"> scheme so similarly</font><font color="#E5E5E5"> named routers</font>

375
00:14:09,270 --> 00:14:13,890
we figured should probably be roughly

376
00:14:11,370 --> 00:14:16,530
configured equivalently<font color="#CCCCCC"> we found</font><font color="#E5E5E5"> about</font>

377
00:14:13,890 --> 00:14:18,660
<font color="#CCCCCC">29</font><font color="#E5E5E5"> violations of this property and most</font>

378
00:14:16,530 --> 00:14:20,819
of them were<font color="#E5E5E5"> seem to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> caused by some</font>

379
00:14:18,660 --> 00:14:23,189
sort<font color="#CCCCCC"> of like fat-finger</font><font color="#E5E5E5"> copy-paste style</font>

380
00:14:20,820 --> 00:14:25,620
mistake where every router in a group

381
00:14:23,190 --> 00:14:27,930
would<font color="#E5E5E5"> have the same exact configuration</font>

382
00:14:25,620 --> 00:14:32,370
except one or<font color="#E5E5E5"> two which would be missing</font>

383
00:14:27,930 --> 00:14:34,709
a<font color="#E5E5E5"> couple of echo entries in terms of</font>

384
00:14:32,370 --> 00:14:37,290
<font color="#E5E5E5">scalability of the tool so the</font><font color="#CCCCCC"> network's</font>

385
00:14:34,710 --> 00:14:39,270
we tested on so far<font color="#E5E5E5"> have</font><font color="#CCCCCC"> been mostly</font>

386
00:14:37,290 --> 00:14:42,569
somewhat small<font color="#E5E5E5"> around the order of like</font>

387
00:14:39,270 --> 00:14:44,430
30 30 routers<font color="#CCCCCC"> but</font><font color="#E5E5E5"> the tool does seem to</font>

388
00:14:42,570 --> 00:14:46,740
be fairly fast for these so this is

389
00:14:44,430 --> 00:14:48,959
showing<font color="#CCCCCC"> the time it takes</font><font color="#E5E5E5"> to verify the</font>

390
00:14:46,740 --> 00:14:51,090
reach ability<font color="#E5E5E5"> and the equivalence of</font>

391
00:14:48,960 --> 00:14:52,890
these router properties for these

392
00:14:51,090 --> 00:14:55,410
various networks sorted by lines of

393
00:14:52,890 --> 00:14:57,330
configuration<font color="#CCCCCC"> and so the takeaway was</font>

394
00:14:55,410 --> 00:14:58,829
that<font color="#CCCCCC"> it can be very fast</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> practice so</font>

395
00:14:57,330 --> 00:15:00,930
it<font color="#E5E5E5"> found a lot of these violations in</font>

396
00:14:58,830 --> 00:15:03,360
about 60 milliseconds for<font color="#E5E5E5"> the reach</font>

397
00:15:00,930 --> 00:15:07,650
ability<font color="#E5E5E5"> at about 400 milliseconds for</font>

398
00:15:03,360 --> 00:15:10,230
the<font color="#E5E5E5"> equivalence of routers so just to</font>

399
00:15:07,650 --> 00:15:12,420
conclude for minesweepers so it's again

400
00:15:10,230 --> 00:15:14,760
it's<font color="#E5E5E5"> a new general-purpose control</font><font color="#CCCCCC"> plane</font>

401
00:15:12,420 --> 00:15:16,650
verification tool it can check out

402
00:15:14,760 --> 00:15:19,380
variety of<font color="#E5E5E5"> properties for all possible</font>

403
00:15:16,650 --> 00:15:21,360
collections of<font color="#CCCCCC"> BGP advertisements for</font>

404
00:15:19,380 --> 00:15:22,950
<font color="#E5E5E5">all possible combinations of link</font>

405
00:15:21,360 --> 00:15:24,360
failures and<font color="#E5E5E5"> it does this by translating</font>

406
00:15:22,950 --> 00:15:26,280
<font color="#CCCCCC">the</font><font color="#E5E5E5"> network into these logical</font>

407
00:15:24,360 --> 00:15:28,320
constraints<font color="#CCCCCC"> that constraint solvers can</font>

408
00:15:26,280 --> 00:15:30,480
solve fairly efficiently<font color="#E5E5E5"> rather than</font>

409
00:15:28,320 --> 00:15:32,160
simulating the network we've used<font color="#E5E5E5"> this</font>

410
00:15:30,480 --> 00:15:34,500
to find many bugs and<font color="#CCCCCC"> real networks and</font>

411
00:15:32,160 --> 00:15:36,949
again you can<font color="#CCCCCC"> find this on github</font><font color="#E5E5E5"> as</font>

412
00:15:34,500 --> 00:15:36,950
open source

413
00:15:37,150 --> 00:15:41,439
okay so the second tool I want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> talk</font>

414
00:15:38,740 --> 00:15:43,660
<font color="#CCCCCC">about is called propane and so propane</font>

415
00:15:41,440 --> 00:15:45,550
takes sort of the exact a very different

416
00:15:43,660 --> 00:15:47,350
approach so it says why are we still

417
00:15:45,550 --> 00:15:50,170
writing configuration files in this

418
00:15:47,350 --> 00:15:51,460
<font color="#CCCCCC">low-level assembly like language why</font>

419
00:15:50,170 --> 00:15:53,349
<font color="#E5E5E5">don't we have a new</font><font color="#CCCCCC"> higher-level</font>

420
00:15:51,460 --> 00:15:55,570
<font color="#E5E5E5">language where we describe only the</font>

421
00:15:53,350 --> 00:15:57,100
<font color="#CCCCCC">intents of</font><font color="#E5E5E5"> the entire network and then</font>

422
00:15:55,570 --> 00:15:58,420
we<font color="#CCCCCC"> generate the configurations</font><font color="#E5E5E5"> from</font>

423
00:15:57,100 --> 00:16:02,470
there in a way that<font color="#CCCCCC"> we know they're</font>

424
00:15:58,420 --> 00:16:04,810
going<font color="#E5E5E5"> to be correct so at a very</font><font color="#CCCCCC"> high</font>

425
00:16:02,470 --> 00:16:06,670
<font color="#CCCCCC">level</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> way propane works</font><font color="#E5E5E5"> is it you</font>

426
00:16:04,810 --> 00:16:08,829
start with one of<font color="#E5E5E5"> these</font><font color="#CCCCCC"> Network wide</font>

427
00:16:06,670 --> 00:16:11,469
routing policies which I'm going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> call</font>

428
00:16:08,830 --> 00:16:14,170
<font color="#CCCCCC">a propane</font><font color="#E5E5E5"> policy you feed</font><font color="#CCCCCC"> that to</font><font color="#E5E5E5"> the</font>

429
00:16:11,470 --> 00:16:16,900
<font color="#CCCCCC">propane compiler</font><font color="#E5E5E5"> along with the</font><font color="#CCCCCC"> network</font>

430
00:16:14,170 --> 00:16:18,969
<font color="#CCCCCC">topology and then the</font><font color="#E5E5E5"> compiler will</font>

431
00:16:16,900 --> 00:16:21,819
generate<font color="#E5E5E5"> these configurations</font><font color="#CCCCCC"> that will</font>

432
00:16:18,970 --> 00:16:23,290
run<font color="#E5E5E5"> on unmodified vendor</font><font color="#CCCCCC"> hardware and in</font>

433
00:16:21,820 --> 00:16:26,410
particular we targeted<font color="#CCCCCC"> BGP</font>

434
00:16:23,290 --> 00:16:28,150
configurations with propane<font color="#E5E5E5"> just because</font>

435
00:16:26,410 --> 00:16:29,860
it's a very flexible routing protocol

436
00:16:28,150 --> 00:16:33,279
that can<font color="#CCCCCC"> implement a variety of</font>

437
00:16:29,860 --> 00:16:35,100
different<font color="#CCCCCC"> types of policies</font><font color="#E5E5E5"> so in a</font>

438
00:16:33,279 --> 00:16:37,689
<font color="#E5E5E5">little more detail what propane can do</font>

439
00:16:35,100 --> 00:16:40,060
is<font color="#E5E5E5"> basically it has two</font><font color="#CCCCCC"> components so</font><font color="#E5E5E5"> it</font>

440
00:16:37,690 --> 00:16:42,670
has a language<font color="#E5E5E5"> where you talk about</font><font color="#CCCCCC"> your</font>

441
00:16:40,060 --> 00:16:44,469
network<font color="#E5E5E5"> wide routing policy you do this</font>

442
00:16:42,670 --> 00:16:46,029
in terms<font color="#E5E5E5"> of what</font><font color="#CCCCCC"> I call path constraints</font>

443
00:16:44,470 --> 00:16:49,000
and preferences<font color="#CCCCCC"> so you can say things</font>

444
00:16:46,029 --> 00:16:51,209
<font color="#E5E5E5">like I prefer the traffic leaves my</font>

445
00:16:49,000 --> 00:16:53,260
network through one peer over<font color="#E5E5E5"> another or</font>

446
00:16:51,209 --> 00:16:56,739
traffic<font color="#E5E5E5"> should never go through some</font>

447
00:16:53,260 --> 00:16:58,810
<font color="#E5E5E5">autonomous system and basically you use</font>

448
00:16:56,740 --> 00:17:01,120
the same language<font color="#CCCCCC"> to write both your</font>

449
00:16:58,810 --> 00:17:03,160
intra and Inter domain routing<font color="#E5E5E5"> policy so</font>

450
00:17:01,120 --> 00:17:06,760
the compiler<font color="#E5E5E5"> takes care of figuring out</font>

451
00:17:03,160 --> 00:17:08,500
what<font color="#E5E5E5"> should go where the</font><font color="#CCCCCC"> second part of</font>

452
00:17:06,760 --> 00:17:11,559
propane is this compiler<font color="#E5E5E5"> it generates</font>

453
00:17:08,500 --> 00:17:13,300
<font color="#CCCCCC">BGP configurations</font><font color="#E5E5E5"> and it's taking the</font>

454
00:17:11,559 --> 00:17:15,280
centralized policy and breaking it<font color="#E5E5E5"> down</font>

455
00:17:13,300 --> 00:17:17,589
into<font color="#E5E5E5"> a distributed implementation with</font>

456
00:17:15,280 --> 00:17:20,349
BGP<font color="#E5E5E5"> and the guarantee</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> it makes is</font>

457
00:17:17,589 --> 00:17:23,109
that<font color="#E5E5E5"> basically modulo any compiler bugs</font>

458
00:17:20,349 --> 00:17:24,579
<font color="#E5E5E5">you have policy</font><font color="#CCCCCC"> compliance so it means</font>

459
00:17:23,109 --> 00:17:27,639
it always does<font color="#E5E5E5"> what the centralized</font>

460
00:17:24,579 --> 00:17:29,050
policy<font color="#E5E5E5"> intended for all possible</font>

461
00:17:27,640 --> 00:17:30,760
combinations of failures so it always

462
00:17:29,050 --> 00:17:34,600
uses<font color="#CCCCCC"> the</font><font color="#E5E5E5"> best route available according</font>

463
00:17:30,760 --> 00:17:37,510
<font color="#CCCCCC">to the policy wrote so to see how</font>

464
00:17:34,600 --> 00:17:38,770
propane can work on a simple toy example

465
00:17:37,510 --> 00:17:41,410
I thought<font color="#E5E5E5"> I'd show how we can configure</font>

466
00:17:38,770 --> 00:17:43,690
<font color="#E5E5E5">a little data center network so I've got</font>

467
00:17:41,410 --> 00:17:46,570
a data center here shown<font color="#CCCCCC"> in yellow</font><font color="#E5E5E5"> with</font>

468
00:17:43,690 --> 00:17:49,700
a collection of routers the data center

469
00:17:46,570 --> 00:17:52,039
<font color="#E5E5E5">is connected to two autonomous systems</font>

470
00:17:49,700 --> 00:17:54,320
one is an inter data center network that

471
00:17:52,039 --> 00:17:56,419
connects various<font color="#E5E5E5"> data centers</font><font color="#CCCCCC"> another is</font>

472
00:17:54,320 --> 00:17:59,059
a core sort of<font color="#E5E5E5"> backbone transit network</font>

473
00:17:56,419 --> 00:18:00,559
that connects to other<font color="#E5E5E5"> networks and the</font>

474
00:17:59,059 --> 00:18:02,750
data<font color="#E5E5E5"> center</font><font color="#CCCCCC"> is partitioned</font><font color="#E5E5E5"> so I have</font>

475
00:18:00,559 --> 00:18:04,789
some<font color="#E5E5E5"> top-of-rack routers which might</font>

476
00:18:02,750 --> 00:18:06,889
have services<font color="#CCCCCC"> that should be globally</font>

477
00:18:04,789 --> 00:18:08,870
accessible<font color="#CCCCCC"> and I might</font><font color="#E5E5E5"> have some others</font>

478
00:18:06,889 --> 00:18:11,469
that<font color="#CCCCCC"> are local services that should be</font>

479
00:18:08,870 --> 00:18:13,610
<font color="#E5E5E5">reachable only inside my data center</font>

480
00:18:11,470 --> 00:18:16,190
<font color="#CCCCCC">okay so I might have some policy</font>

481
00:18:13,610 --> 00:18:18,260
objectives<font color="#E5E5E5"> like the local services</font>

482
00:18:16,190 --> 00:18:19,730
should be reachable internally only the

483
00:18:18,260 --> 00:18:21,740
global prefixes should be<font color="#E5E5E5"> reachable</font>

484
00:18:19,730 --> 00:18:24,110
<font color="#E5E5E5">everywhere</font><font color="#CCCCCC"> I might want to</font><font color="#E5E5E5"> perform</font>

485
00:18:21,740 --> 00:18:25,850
aggregation in my network<font color="#CCCCCC"> at the border</font>

486
00:18:24,110 --> 00:18:28,309
of<font color="#E5E5E5"> the network to reduce the size of my</font>

487
00:18:25,850 --> 00:18:29,928
<font color="#CCCCCC">routing tables I might have other</font>

488
00:18:28,309 --> 00:18:32,029
constraints<font color="#CCCCCC"> that I care about</font><font color="#E5E5E5"> so for</font>

489
00:18:29,929 --> 00:18:34,639
example I<font color="#E5E5E5"> might prefer that</font><font color="#CCCCCC"> traffic</font>

490
00:18:32,029 --> 00:18:36,559
<font color="#E5E5E5">leaves my network through one peer</font><font color="#CCCCCC"> over</font>

491
00:18:34,639 --> 00:18:37,990
another peer so for example I might

492
00:18:36,559 --> 00:18:40,129
<font color="#E5E5E5">prefer that</font><font color="#CCCCCC"> traffic leaves through the</font>

493
00:18:37,990 --> 00:18:43,039
highly optimized<font color="#CCCCCC"> inter data center</font>

494
00:18:40,130 --> 00:18:44,450
network over the<font color="#E5E5E5"> core</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> I also</font>

495
00:18:43,039 --> 00:18:46,190
might want<font color="#E5E5E5"> to do things like prevent</font>

496
00:18:44,450 --> 00:18:48,230
transit<font color="#CCCCCC"> traffic between</font><font color="#E5E5E5"> two different</font>

497
00:18:46,190 --> 00:18:51,220
peers of my data center<font color="#E5E5E5"> so I never want</font>

498
00:18:48,230 --> 00:18:53,990
my<font color="#E5E5E5"> data center to become a transit point</font>

499
00:18:51,220 --> 00:18:57,110
<font color="#E5E5E5">okay so let's see how we can configure</font>

500
00:18:53,990 --> 00:19:00,409
this network using propane<font color="#E5E5E5"> so this is an</font>

501
00:18:57,110 --> 00:19:02,779
example<font color="#E5E5E5"> of a propane file</font><font color="#CCCCCC"> so it consists</font>

502
00:19:00,409 --> 00:19:06,620
of a sequence<font color="#CCCCCC"> of definitions</font><font color="#E5E5E5"> so I've</font>

503
00:19:02,779 --> 00:19:11,360
defined<font color="#E5E5E5"> a collection of and could you</font>

504
00:19:06,620 --> 00:19:12,590
run the demo<font color="#E5E5E5"> please thank you and so it</font>

505
00:19:11,360 --> 00:19:16,219
consists of a<font color="#E5E5E5"> sequence of these</font>

506
00:19:12,590 --> 00:19:17,899
<font color="#E5E5E5">definitions so I've defined names for</font>

507
00:19:16,220 --> 00:19:20,600
various prefixes in<font color="#E5E5E5"> my network at the</font>

508
00:19:17,899 --> 00:19:22,969
top of the file<font color="#CCCCCC"> I've defined for example</font>

509
00:19:20,600 --> 00:19:25,100
<font color="#CCCCCC">what is a local prefix so a local prefix</font>

510
00:19:22,970 --> 00:19:27,230
in this case might be<font color="#E5E5E5"> either prefix 3 or</font>

511
00:19:25,100 --> 00:19:30,289
3 fix<font color="#CCCCCC"> 4 corresponding</font><font color="#E5E5E5"> to these</font>

512
00:19:27,230 --> 00:19:31,970
<font color="#E5E5E5">top-of-rack routers</font><font color="#CCCCCC"> I can define</font><font color="#E5E5E5"> things</font>

513
00:19:30,289 --> 00:19:33,889
like what<font color="#E5E5E5"> is a peer</font><font color="#CCCCCC"> of my network</font><font color="#E5E5E5"> up</font>

514
00:19:31,970 --> 00:19:36,559
here is either the inter data center

515
00:19:33,889 --> 00:19:38,870
network or it's the core backbone

516
00:19:36,559 --> 00:19:42,460
<font color="#CCCCCC">network</font><font color="#E5E5E5"> and so I can describe that using</font>

517
00:19:38,870 --> 00:19:44,779
the set notation<font color="#E5E5E5"> here and then I can add</font>

518
00:19:42,460 --> 00:19:47,240
constraints on how<font color="#CCCCCC"> I want traffic</font><font color="#E5E5E5"> to be</font>

519
00:19:44,779 --> 00:19:50,870
<font color="#E5E5E5">routed</font><font color="#CCCCCC"> through my network so for</font><font color="#E5E5E5"> example</font>

520
00:19:47,240 --> 00:19:52,429
for the global prefix prefix<font color="#E5E5E5"> 1 I want</font><font color="#CCCCCC"> to</font>

521
00:19:50,870 --> 00:19:54,620
<font color="#E5E5E5">add the constraint</font><font color="#CCCCCC"> that traffic</font><font color="#E5E5E5"> for that</font>

522
00:19:52,429 --> 00:19:56,720
<font color="#E5E5E5">prefix should end up at router a that's</font>

523
00:19:54,620 --> 00:19:59,059
the final<font color="#CCCCCC"> destination</font><font color="#E5E5E5"> for that traffic</font>

524
00:19:56,720 --> 00:20:01,820
<font color="#CCCCCC">and I can add</font><font color="#E5E5E5"> similar constraints for</font>

525
00:19:59,059 --> 00:20:03,320
these other prefixes<font color="#CCCCCC"> in my network</font><font color="#E5E5E5"> for</font>

526
00:20:01,820 --> 00:20:04,909
any other<font color="#E5E5E5"> traffic which is now</font>

527
00:20:03,320 --> 00:20:06,710
internal to my<font color="#CCCCCC"> network I can add a</font>

528
00:20:04,910 --> 00:20:08,780
constraint<font color="#CCCCCC"> that says basically it</font><font color="#E5E5E5"> should</font>

529
00:20:06,710 --> 00:20:10,850
leave my network it needs to<font color="#E5E5E5"> end outside</font>

530
00:20:08,780 --> 00:20:12,530
my<font color="#E5E5E5"> network and I can add other</font>

531
00:20:10,850 --> 00:20:14,389
constraints so for example I<font color="#E5E5E5"> want it to</font>

532
00:20:12,530 --> 00:20:16,040
exit my network through either the<font color="#E5E5E5"> inter</font>

533
00:20:14,390 --> 00:20:17,930
data center network<font color="#E5E5E5"> or the core</font><font color="#CCCCCC"> network</font>

534
00:20:16,040 --> 00:20:20,540
<font color="#CCCCCC">and I'm going to</font><font color="#E5E5E5"> have a preference for</font>

535
00:20:17,930 --> 00:20:22,280
the<font color="#E5E5E5"> inter data center network here and</font>

536
00:20:20,540 --> 00:20:25,670
that's what the arrow arrow operator<font color="#E5E5E5"> is</font>

537
00:20:22,280 --> 00:20:28,040
saying<font color="#CCCCCC"> I can also add additional</font>

538
00:20:25,670 --> 00:20:30,530
constraints<font color="#E5E5E5"> to this policy so I can</font>

539
00:20:28,040 --> 00:20:33,110
specify that<font color="#CCCCCC"> I want the local</font><font color="#E5E5E5"> prefixes</font>

540
00:20:30,530 --> 00:20:34,310
<font color="#CCCCCC">to stay internal to my</font><font color="#E5E5E5"> network so I'm</font>

541
00:20:33,110 --> 00:20:36,979
going<font color="#E5E5E5"> to add a new constraint which</font>

542
00:20:34,310 --> 00:20:38,000
applies to<font color="#CCCCCC"> these local prefixes and it's</font>

543
00:20:36,980 --> 00:20:41,750
just going<font color="#E5E5E5"> to say that these should be</font>

544
00:20:38,000 --> 00:20:43,100
internal<font color="#E5E5E5"> routes only and then I</font>

545
00:20:41,750 --> 00:20:45,050
basically<font color="#E5E5E5"> just add that to the routing</font>

546
00:20:43,100 --> 00:20:46,699
policy I tell the propane compiler that

547
00:20:45,050 --> 00:20:50,899
<font color="#CCCCCC">I wanted</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> satisfy this locality</font>

548
00:20:46,700 --> 00:20:52,340
constraint for the no transit constraint

549
00:20:50,900 --> 00:20:54,800
<font color="#CCCCCC">again I can just add an</font><font color="#E5E5E5"> additional</font>

550
00:20:52,340 --> 00:20:57,560
constraint<font color="#E5E5E5"> to this policy it's saying</font>

551
00:20:54,800 --> 00:20:59,930
<font color="#CCCCCC">that I'm going to call it no transit at</font>

552
00:20:57,560 --> 00:21:01,520
the policy constraint here<font color="#E5E5E5"> is going to</font>

553
00:20:59,930 --> 00:21:04,400
<font color="#E5E5E5">apply to</font><font color="#CCCCCC"> all traffic</font><font color="#E5E5E5"> which I'm going to</font>

554
00:21:01,520 --> 00:21:06,560
<font color="#E5E5E5">write I true which matches any traffic</font>

555
00:21:04,400 --> 00:21:08,660
<font color="#CCCCCC">and I'm going</font><font color="#E5E5E5"> to add the constraints</font>

556
00:21:06,560 --> 00:21:11,210
that<font color="#CCCCCC"> traffic should not transit</font><font color="#E5E5E5"> between</font>

557
00:21:08,660 --> 00:21:13,040
two<font color="#E5E5E5"> peers of my network</font><font color="#CCCCCC"> and I can define</font>

558
00:21:11,210 --> 00:21:15,980
what<font color="#CCCCCC"> that means so transit in my network</font>

559
00:21:13,040 --> 00:21:17,720
<font color="#E5E5E5">between</font><font color="#CCCCCC"> up here X and Appy</font><font color="#E5E5E5"> or Y is any</font>

560
00:21:15,980 --> 00:21:21,230
traffic<font color="#E5E5E5"> that enters my network through X</font>

561
00:21:17,720 --> 00:21:25,520
or Y and also<font color="#E5E5E5"> is going to exit my</font>

562
00:21:21,230 --> 00:21:27,590
<font color="#E5E5E5">network through either X or Y and that's</font>

563
00:21:25,520 --> 00:21:30,530
<font color="#E5E5E5">it so this is</font><font color="#CCCCCC"> a single policy file that</font>

564
00:21:27,590 --> 00:21:31,669
I<font color="#E5E5E5"> write</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> entire network</font><font color="#CCCCCC"> and I can</font>

565
00:21:30,530 --> 00:21:33,710
basically<font color="#E5E5E5"> just add all of these</font>

566
00:21:31,670 --> 00:21:36,410
<font color="#CCCCCC">constraints together and I'll send this</font>

567
00:21:33,710 --> 00:21:38,360
off to<font color="#CCCCCC"> the propane compiler I give it</font>

568
00:21:36,410 --> 00:21:40,730
<font color="#CCCCCC">the</font><font color="#E5E5E5"> policy file I just wrote as an input</font>

569
00:21:38,360 --> 00:21:43,760
<font color="#E5E5E5">and I give it a topology file which is</font>

570
00:21:40,730 --> 00:21:45,650
<font color="#CCCCCC">specified</font><font color="#E5E5E5"> in XML and I just run the</font>

571
00:21:43,760 --> 00:21:47,870
compiler<font color="#E5E5E5"> and it generates</font><font color="#CCCCCC"> bgp</font>

572
00:21:45,650 --> 00:21:50,540
configurations<font color="#E5E5E5"> so it generates</font><font color="#CCCCCC"> a</font>

573
00:21:47,870 --> 00:21:52,879
configuration file here<font color="#CCCCCC"> and you can load</font>

574
00:21:50,540 --> 00:21:55,610
them up<font color="#E5E5E5"> it's using you know traditional</font>

575
00:21:52,880 --> 00:22:00,740
<font color="#E5E5E5">commands like prefix lists community</font>

576
00:21:55,610 --> 00:22:02,389
lists route maps etc<font color="#CCCCCC"> ok so you can also</font>

577
00:22:00,740 --> 00:22:04,520
add<font color="#CCCCCC"> like I was mentioning</font><font color="#E5E5E5"> things like</font>

578
00:22:02,390 --> 00:22:07,100
aggregation so you have purely control

579
00:22:04,520 --> 00:22:08,450
plane constraints so I can add a

580
00:22:07,100 --> 00:22:10,010
constraint<font color="#CCCCCC"> which says that I want to</font>

581
00:22:08,450 --> 00:22:11,900
perform aggregation at the border of<font color="#E5E5E5"> my</font>

582
00:22:10,010 --> 00:22:14,150
network<font color="#E5E5E5"> so I'm going to add this control</font>

583
00:22:11,900 --> 00:22:15,170
plane constraint to the policy<font color="#E5E5E5"> and I'm</font>

584
00:22:14,150 --> 00:22:17,370
going<font color="#E5E5E5"> to say that I want to perform</font>

585
00:22:15,170 --> 00:22:21,750
aggregation for

586
00:22:17,370 --> 00:22:24,239
<font color="#E5E5E5">sixteen prefix which summarizes the</font>

587
00:22:21,750 --> 00:22:25,830
<font color="#CCCCCC">Global Services of my network and I want</font>

588
00:22:24,240 --> 00:22:28,530
to perform<font color="#E5E5E5"> aggregation from internal</font>

589
00:22:25,830 --> 00:22:30,689
routers to external routers and so once

590
00:22:28,530 --> 00:22:33,600
again<font color="#E5E5E5"> I'm going to run the propane</font>

591
00:22:30,690 --> 00:22:34,950
compiler and it'll compile this<font color="#CCCCCC"> again</font>

592
00:22:33,600 --> 00:22:36,629
the difference here<font color="#CCCCCC"> is that it was</font>

593
00:22:34,950 --> 00:22:39,360
<font color="#E5E5E5">actually able to find a potential</font><font color="#CCCCCC"> issue</font>

594
00:22:36,630 --> 00:22:41,100
with this policy<font color="#E5E5E5"> as I wrote it</font><font color="#CCCCCC"> so it's</font>

595
00:22:39,360 --> 00:22:43,110
doing<font color="#E5E5E5"> static analysis to figure out</font>

596
00:22:41,100 --> 00:22:45,419
potential issues that can go wrong with

597
00:22:43,110 --> 00:22:47,850
the policy so here it's found that

598
00:22:45,420 --> 00:22:50,340
<font color="#CCCCCC">basically the network is only safe for</font>

599
00:22:47,850 --> 00:22:52,590
up to one link failure and in particular

600
00:22:50,340 --> 00:22:54,600
<font color="#CCCCCC">after two link failures</font><font color="#E5E5E5"> you can get an</font>

601
00:22:52,590 --> 00:22:57,360
aggregation<font color="#CCCCCC"> induced black</font><font color="#E5E5E5"> hole and so it</font>

602
00:22:54,600 --> 00:23:00,530
<font color="#E5E5E5">provides an example of how and such an</font>

603
00:22:57,360 --> 00:23:03,240
aggregation<font color="#CCCCCC"> in this black hole</font><font color="#E5E5E5"> can arise</font>

604
00:23:00,530 --> 00:23:06,000
so at a<font color="#CCCCCC"> high level the</font><font color="#E5E5E5"> way the compiler</font>

605
00:23:03,240 --> 00:23:08,070
works<font color="#E5E5E5"> is it transforms the policy</font><font color="#CCCCCC"> right</font>

606
00:23:06,000 --> 00:23:10,580
<font color="#E5E5E5">in through a sequence of intermediate</font>

607
00:23:08,070 --> 00:23:13,500
representations so you write the initial

608
00:23:10,580 --> 00:23:16,020
<font color="#E5E5E5">propane policy which is parsed by the</font>

609
00:23:13,500 --> 00:23:17,580
front<font color="#E5E5E5"> end of the compiler this gets</font>

610
00:23:16,020 --> 00:23:19,200
converted into a slightly simpler

611
00:23:17,580 --> 00:23:20,960
version that combines all<font color="#E5E5E5"> these</font>

612
00:23:19,200 --> 00:23:23,429
constraints<font color="#CCCCCC"> together called</font><font color="#E5E5E5"> the RIR</font>

613
00:23:20,960 --> 00:23:25,470
we then merge<font color="#E5E5E5"> this</font><font color="#CCCCCC"> with the topology</font>

614
00:23:23,429 --> 00:23:27,150
into a data structure which lets us

615
00:23:25,470 --> 00:23:29,190
analyze both the topology<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

616
00:23:27,150 --> 00:23:30,870
<font color="#CCCCCC">routing policy</font><font color="#E5E5E5"> together and so this is</font>

617
00:23:29,190 --> 00:23:33,890
where we can figure out how<font color="#E5E5E5"> to decompose</font>

618
00:23:30,870 --> 00:23:36,270
the policy right<font color="#CCCCCC"> into device by device</font>

619
00:23:33,890 --> 00:23:38,309
configurations<font color="#E5E5E5"> how to set</font><font color="#CCCCCC"> up things like</font>

620
00:23:36,270 --> 00:23:41,309
<font color="#CCCCCC">bgp local preference</font><font color="#E5E5E5"> and communities and</font>

621
00:23:38,309 --> 00:23:43,678
so on from here<font color="#E5E5E5"> we generate a slightly</font>

622
00:23:41,309 --> 00:23:46,440
<font color="#E5E5E5">higher level intermediate representation</font>

623
00:23:43,679 --> 00:23:49,770
than vendor specific<font color="#E5E5E5"> languages so I call</font>

624
00:23:46,440 --> 00:23:52,559
it abstract<font color="#E5E5E5"> BGP</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so it's basically</font>

625
00:23:49,770 --> 00:23:54,150
things like route maps<font color="#E5E5E5"> access control</font>

626
00:23:52,559 --> 00:23:56,370
lists<font color="#E5E5E5"> and whatnot but</font><font color="#CCCCCC"> not tied to any</font>

627
00:23:54,150 --> 00:23:58,650
vendor<font color="#E5E5E5"> we do a number</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> minimization</font>

628
00:23:56,370 --> 00:24:01,169
steps to try<font color="#E5E5E5"> to make the policy as small</font>

629
00:23:58,650 --> 00:24:03,780
and human understandable<font color="#E5E5E5"> and readable as</font>

630
00:24:01,170 --> 00:24:05,730
possible and then as a final step<font color="#E5E5E5"> we</font>

631
00:24:03,780 --> 00:24:08,040
generate individual vendor

632
00:24:05,730 --> 00:24:10,200
configurations and so right<font color="#E5E5E5"> now we're</font>

633
00:24:08,040 --> 00:24:12,510
mostly<font color="#E5E5E5"> targeting</font><font color="#CCCCCC"> Cisco</font><font color="#E5E5E5"> and quagga</font>

634
00:24:10,200 --> 00:24:16,860
although it's<font color="#E5E5E5"> fairly easy to extend this</font>

635
00:24:12,510 --> 00:24:19,470
to<font color="#CCCCCC"> add new vendor languages so more</font>

636
00:24:16,860 --> 00:24:21,719
specifically the<font color="#E5E5E5"> propane compiler as I</font>

637
00:24:19,470 --> 00:24:23,850
mentioned<font color="#E5E5E5"> generate Cisco and quagga it</font>

638
00:24:21,720 --> 00:24:26,400
includes a number of other analyses that

639
00:24:23,850 --> 00:24:29,610
<font color="#CCCCCC">I really haven't</font><font color="#E5E5E5"> gone into so it has</font>

640
00:24:26,400 --> 00:24:31,890
things like<font color="#E5E5E5"> detecting unused backup pads</font>

641
00:24:29,610 --> 00:24:33,389
if you write a policy<font color="#E5E5E5"> which says to</font>

642
00:24:31,890 --> 00:24:35,010
prefer one<font color="#E5E5E5"> path over another but it</font>

643
00:24:33,390 --> 00:24:36,300
figures out that that second path can

644
00:24:35,010 --> 00:24:38,910
never actually<font color="#E5E5E5"> be used</font><font color="#CCCCCC"> it'll let you</font>

645
00:24:36,300 --> 00:24:41,010
<font color="#CCCCCC">know it can flag potential reach ability</font>

646
00:24:38,910 --> 00:24:42,420
issues<font color="#E5E5E5"> that it thinks things should be</font>

647
00:24:41,010 --> 00:24:45,540
reachable<font color="#E5E5E5"> but the way you've written it</font>

648
00:24:42,420 --> 00:24:47,100
might<font color="#E5E5E5"> just</font><font color="#CCCCCC"> be a mistake it can find</font>

649
00:24:45,540 --> 00:24:49,530
aggregation in these black holes as I

650
00:24:47,100 --> 00:24:53,219
showed you<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> demo as</font><font color="#CCCCCC"> well as unused</font>

651
00:24:49,530 --> 00:24:55,110
prefixes unused aggregates and so forth

652
00:24:53,220 --> 00:24:56,280
you can also have<font color="#CCCCCC"> a configure the</font>

653
00:24:55,110 --> 00:24:57,899
compiler with a number<font color="#E5E5E5"> of</font><font color="#CCCCCC"> different</font>

654
00:24:56,280 --> 00:24:59,490
commands<font color="#E5E5E5"> so you can tell it that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> do</font>

655
00:24:57,900 --> 00:25:02,820
or<font color="#E5E5E5"> don't want to</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> various</font><font color="#CCCCCC"> BGP</font>

656
00:24:59,490 --> 00:25:06,750
attributes like meds or<font color="#CCCCCC"> prepending</font><font color="#E5E5E5"> or so</font>

657
00:25:02,820 --> 00:25:08,970
on and so forth so to test out the

658
00:25:06,750 --> 00:25:10,020
propane compiler we we were<font color="#E5E5E5"> really</font>

659
00:25:08,970 --> 00:25:12,960
<font color="#E5E5E5">interested in</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at two different</font>

660
00:25:10,020 --> 00:25:14,610
<font color="#CCCCCC">things one was you know can you actually</font>

661
00:25:12,960 --> 00:25:17,400
<font color="#CCCCCC">Express real policies and in the</font>

662
00:25:14,610 --> 00:25:18,899
<font color="#E5E5E5">language and the second is you know can</font>

663
00:25:17,400 --> 00:25:21,840
the compiler actually<font color="#E5E5E5"> scale to real</font>

664
00:25:18,900 --> 00:25:24,690
networks<font color="#E5E5E5"> so for the expressiveness part</font>

665
00:25:21,840 --> 00:25:27,480
we were able<font color="#E5E5E5"> to acquire configurations</font>

666
00:25:24,690 --> 00:25:29,310
<font color="#E5E5E5">from a large cloud provider and we try</font>

667
00:25:27,480 --> 00:25:31,290
<font color="#E5E5E5">to basically tried our best to convert</font>

668
00:25:29,310 --> 00:25:34,860
these configurations into<font color="#E5E5E5"> an equivalent</font>

669
00:25:31,290 --> 00:25:37,170
<font color="#E5E5E5">propane policy and these configurations</font>

670
00:25:34,860 --> 00:25:40,290
were described in<font color="#CCCCCC"> high-level english</font>

671
00:25:37,170 --> 00:25:43,050
documents that the<font color="#CCCCCC"> network's had for the</font>

672
00:25:40,290 --> 00:25:44,760
design<font color="#E5E5E5"> of the network</font><font color="#CCCCCC"> and we tried</font><font color="#E5E5E5"> this</font>

673
00:25:43,050 --> 00:25:49,020
<font color="#E5E5E5">for both data center networks as well</font><font color="#CCCCCC"> as</font>

674
00:25:44,760 --> 00:25:50,580
<font color="#E5E5E5">for transit networks and for compiler</font>

675
00:25:49,020 --> 00:25:52,200
performance we use the same<font color="#CCCCCC"> routing</font>

676
00:25:50,580 --> 00:25:54,210
policies that we<font color="#E5E5E5"> can convert it from</font>

677
00:25:52,200 --> 00:25:56,520
<font color="#E5E5E5">this cloud provider but then scaled</font>

678
00:25:54,210 --> 00:25:59,420
their topology by the number of<font color="#CCCCCC"> routers</font>

679
00:25:56,520 --> 00:26:02,400
to see how well the compiler<font color="#E5E5E5"> could scale</font>

680
00:25:59,420 --> 00:26:07,140
so in terms of<font color="#E5E5E5"> the expressiveness of the</font>

681
00:26:02,400 --> 00:26:09,180
language<font color="#CCCCCC"> basically the the full policy</font>

682
00:26:07,140 --> 00:26:12,780
<font color="#E5E5E5">for the entire</font><font color="#CCCCCC"> network took on the order</font>

683
00:26:09,180 --> 00:26:15,240
<font color="#CCCCCC">of about 30</font><font color="#E5E5E5"> to 50 lines of propane's to</font>

684
00:26:12,780 --> 00:26:17,460
configure<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the actual generated</font>

685
00:26:15,240 --> 00:26:19,860
networks are more<font color="#E5E5E5"> like thousands of</font>

686
00:26:17,460 --> 00:26:21,960
lines of<font color="#E5E5E5"> configuration per router so</font>

687
00:26:19,860 --> 00:26:25,500
this seems<font color="#E5E5E5"> to at least be promising</font>

688
00:26:21,960 --> 00:26:27,990
start<font color="#CCCCCC"> in terms of compiler performance</font>

689
00:26:25,500 --> 00:26:30,360
<font color="#E5E5E5">we were able to scale up</font><font color="#CCCCCC"> to about 1,400</font>

690
00:26:27,990 --> 00:26:33,720
routers for the data<font color="#E5E5E5"> center example we</font>

691
00:26:30,360 --> 00:26:35,939
had and about 200 routers for the

692
00:26:33,720 --> 00:26:37,650
backbone<font color="#CCCCCC"> network the data</font><font color="#E5E5E5"> center the</font>

693
00:26:35,940 --> 00:26:40,750
largest one took<font color="#E5E5E5"> about nine minutes to</font>

694
00:26:37,650 --> 00:26:42,160
compile and the largest backbone<font color="#E5E5E5"> that</font>

695
00:26:40,750 --> 00:26:44,530
<font color="#E5E5E5">work took about three minutes to compile</font>

696
00:26:42,160 --> 00:26:46,180
and this is a completely<font color="#E5E5E5"> offline process</font>

697
00:26:44,530 --> 00:26:52,170
so it's<font color="#E5E5E5"> not like you have to rerun the</font>

698
00:26:46,180 --> 00:26:55,270
<font color="#E5E5E5">compiler</font><font color="#CCCCCC"> in real</font><font color="#E5E5E5"> time</font><font color="#CCCCCC"> okay so just to</font>

699
00:26:52,170 --> 00:26:57,400
summarize on the propane portion of the

700
00:26:55,270 --> 00:26:59,800
talk<font color="#E5E5E5"> so propane is again a new</font>

701
00:26:57,400 --> 00:27:02,860
<font color="#CCCCCC">high-level language it gives you</font>

702
00:26:59,800 --> 00:27:04,810
centralized<font color="#CCCCCC"> Network</font><font color="#E5E5E5"> program ability and</font>

703
00:27:02,860 --> 00:27:07,479
it lets you<font color="#E5E5E5"> write constraints in terms</font>

704
00:27:04,810 --> 00:27:09,909
<font color="#CCCCCC">of preferred paths and</font><font color="#E5E5E5"> backup paths and</font>

705
00:27:07,480 --> 00:27:12,040
what types of shape of<font color="#CCCCCC"> path</font><font color="#E5E5E5"> traffic</font>

706
00:27:09,910 --> 00:27:14,020
<font color="#E5E5E5">should take through your network the</font>

707
00:27:12,040 --> 00:27:15,340
core policy<font color="#CCCCCC"> is tends to be</font><font color="#E5E5E5"> quite concise</font>

708
00:27:14,020 --> 00:27:18,970
because<font color="#E5E5E5"> you're writing one configuration</font>

709
00:27:15,340 --> 00:27:20,770
<font color="#E5E5E5">for your</font><font color="#CCCCCC"> entire network and the compiler</font>

710
00:27:18,970 --> 00:27:22,540
<font color="#E5E5E5">then takes this policy and generates a</font>

711
00:27:20,770 --> 00:27:25,990
completely distributed<font color="#E5E5E5"> implementation</font>

712
00:27:22,540 --> 00:27:30,670
via<font color="#CCCCCC"> bgp bgp we chose bgp because it's a</font>

713
00:27:25,990 --> 00:27:32,140
very flexible routing language<font color="#CCCCCC"> and it</font>

714
00:27:30,670 --> 00:27:34,540
does the compiler<font color="#CCCCCC"> also does static</font>

715
00:27:32,140 --> 00:27:38,320
<font color="#E5E5E5">analysis</font><font color="#CCCCCC"> to basically check policy</font>

716
00:27:34,540 --> 00:27:40,450
compliance with these<font color="#E5E5E5"> bgp configurations</font>

717
00:27:38,320 --> 00:27:42,220
for all<font color="#E5E5E5"> possible failures it also has a</font>

718
00:27:40,450 --> 00:27:43,900
<font color="#E5E5E5">number of another other analyses for</font>

719
00:27:42,220 --> 00:27:46,960
checking the correctness in case you

720
00:27:43,900 --> 00:27:49,480
made certain<font color="#E5E5E5"> types of</font><font color="#CCCCCC"> mistakes</font><font color="#E5E5E5"> and it</font>

721
00:27:46,960 --> 00:27:51,520
can scale<font color="#E5E5E5"> to</font><font color="#CCCCCC"> many realistic sized and</font>

722
00:27:49,480 --> 00:27:53,980
<font color="#CCCCCC">work topologies and routing policies and</font>

723
00:27:51,520 --> 00:27:56,080
again the propane is available as open

724
00:27:53,980 --> 00:28:00,040
<font color="#E5E5E5">source you can find it on</font><font color="#CCCCCC"> propane lang</font>

725
00:27:56,080 --> 00:28:01,810
org and so with that<font color="#CCCCCC"> i</font><font color="#E5E5E5"> will summarize</font>

726
00:28:00,040 --> 00:28:03,820
<font color="#E5E5E5">since it's the last talk we can get out</font>

727
00:28:01,810 --> 00:28:05,470
<font color="#CCCCCC">of</font><font color="#E5E5E5"> here a little bit early and I'll take</font>

728
00:28:03,820 --> 00:28:07,060
any<font color="#CCCCCC"> questions you</font><font color="#E5E5E5"> can email me if</font><font color="#CCCCCC"> you</font>

729
00:28:05,470 --> 00:28:09,850
<font color="#E5E5E5">have any questions comments and concerns</font>

730
00:28:07,060 --> 00:28:12,000
<font color="#E5E5E5">at my Princeton email thank you very</font>

731
00:28:09,850 --> 00:28:12,000
much

732
00:28:13,650 --> 00:28:16,809
[Applause]

733
00:28:21,590 --> 00:28:26,279
great talk thank you Matt<font color="#CCCCCC"> peak on Yahoo</font>

734
00:28:24,090 --> 00:28:28,590
I noticed in your definition<font color="#E5E5E5"> file for a</font>

735
00:28:26,279 --> 00:28:31,889
propane<font color="#E5E5E5"> you have things like prefix</font>

736
00:28:28,590 --> 00:28:33,599
<font color="#CCCCCC">curly braces zero two to the 32</font><font color="#E5E5E5"> curly</font>

737
00:28:31,889 --> 00:28:35,099
brace<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then it's</font><font color="#CCCCCC"> and I sort of said</font>

738
00:28:33,599 --> 00:28:38,789
well<font color="#CCCCCC"> I don't do I can be</font><font color="#E5E5E5"> six</font><font color="#CCCCCC"> bit should</font>

739
00:28:35,099 --> 00:28:41,399
<font color="#CCCCCC">be easy to add if you're doing</font><font color="#E5E5E5"> iterative</font>

740
00:28:38,789 --> 00:28:45,749
testing for the entire range of

741
00:28:41,399 --> 00:28:48,539
constraints like that<font color="#E5E5E5"> while v40 to</font><font color="#CCCCCC"> two</font>

742
00:28:45,749 --> 00:28:50,940
to the 32 isn't that bad<font color="#CCCCCC"> I think it</font>

743
00:28:48,539 --> 00:28:54,929
would be slightly non-trivial to do that

744
00:28:50,940 --> 00:28:57,869
for the v6<font color="#CCCCCC"> pace so uh yeah so actually</font><font color="#E5E5E5"> I</font>

745
00:28:54,929 --> 00:29:00,929
<font color="#CCCCCC">think so the way</font><font color="#E5E5E5"> these tools work</font><font color="#CCCCCC"> so</font>

746
00:28:57,869 --> 00:29:02,369
when I say<font color="#CCCCCC"> it's a sum 32-bit value the</font>

747
00:29:00,929 --> 00:29:05,219
tool isn't actually searching through

748
00:29:02,369 --> 00:29:06,869
all<font color="#E5E5E5"> 32-bit prefixes so there's some</font>

749
00:29:05,219 --> 00:29:09,809
constraints<font color="#CCCCCC"> that we generate which says</font>

750
00:29:06,869 --> 00:29:12,089
that the prefix is some integer which<font color="#CCCCCC"> is</font>

751
00:29:09,809 --> 00:29:14,249
bounded between 0<font color="#CCCCCC"> and 2 to the</font><font color="#E5E5E5"> 32 and</font>

752
00:29:12,089 --> 00:29:15,450
the way these constraint solvers work is

753
00:29:14,249 --> 00:29:17,580
<font color="#E5E5E5">basically they're going to search</font>

754
00:29:15,450 --> 00:29:20,009
through<font color="#CCCCCC"> the</font><font color="#E5E5E5"> space of values symbolically</font>

755
00:29:17,580 --> 00:29:21,599
<font color="#E5E5E5">so rather than looking at every</font>

756
00:29:20,009 --> 00:29:24,089
particular<font color="#E5E5E5"> value they're going to look</font>

757
00:29:21,599 --> 00:29:25,859
<font color="#E5E5E5">at</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> the ones that</font><font color="#CCCCCC"> are relevant</font><font color="#E5E5E5"> given</font>

758
00:29:24,089 --> 00:29:28,529
<font color="#CCCCCC">the configurations you've written so if</font>

759
00:29:25,859 --> 00:29:30,769
I have a<font color="#E5E5E5"> configuration file</font><font color="#CCCCCC"> which has</font><font color="#E5E5E5"> a</font>

760
00:29:28,529 --> 00:29:32,820
route<font color="#CCCCCC"> map that filters on a particular</font>

761
00:29:30,769 --> 00:29:35,039
prefix and that's the only filter I have

762
00:29:32,820 --> 00:29:36,418
then there's really two cases the ones

763
00:29:35,039 --> 00:29:38,489
that hit<font color="#E5E5E5"> that filter</font><font color="#CCCCCC"> and the ones that</font>

764
00:29:36,419 --> 00:29:41,940
<font color="#E5E5E5">don't and so it's exploring them like in</font>

765
00:29:38,489 --> 00:29:44,759
that way<font color="#E5E5E5"> so when you go to ipv6</font><font color="#CCCCCC"> the</font>

766
00:29:41,940 --> 00:29:47,339
<font color="#E5E5E5">constraint is basically going from 0 to</font>

767
00:29:44,759 --> 00:29:49,950
<font color="#CCCCCC">2 to</font><font color="#E5E5E5"> the 64 but it's still</font><font color="#CCCCCC"> only having</font>

768
00:29:47,339 --> 00:29:52,619
to check a number<font color="#CCCCCC"> of different examples</font>

769
00:29:49,950 --> 00:29:54,859
<font color="#E5E5E5">that's proportional to the policy wrote</font>

770
00:29:52,619 --> 00:29:57,809
rather<font color="#E5E5E5"> than the actual space of values</font>

771
00:29:54,859 --> 00:30:00,989
so at least we<font color="#CCCCCC"> think it should scale</font>

772
00:29:57,809 --> 00:30:02,908
fairly nicely<font color="#E5E5E5"> recombinant for exactly</font>

773
00:30:00,989 --> 00:30:05,179
<font color="#CCCCCC">that's awesome</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> much thank</font>

774
00:30:02,909 --> 00:30:09,779
you Stage Left

775
00:30:05,179 --> 00:30:11,789
hi I'm<font color="#E5E5E5"> Chris</font><font color="#CCCCCC"> be IBM software you're</font>

776
00:30:09,779 --> 00:30:14,100
presenting on the protein line I know

777
00:30:11,789 --> 00:30:16,289
dropping<font color="#E5E5E5"> their</font><font color="#CCCCCC"> clog</font><font color="#E5E5E5"> a flash Cisco config</font>

778
00:30:14,100 --> 00:30:17,639
<font color="#CCCCCC">algebra</font><font color="#E5E5E5"> visit</font><font color="#CCCCCC"> add like another vendor</font>

779
00:30:16,289 --> 00:30:20,309
like turnip or<font color="#E5E5E5"> something or something</font>

780
00:30:17,639 --> 00:30:22,529
<font color="#CCCCCC">ideally</font><font color="#E5E5E5"> or any we call absolutely</font>

781
00:30:20,309 --> 00:30:23,759
<font color="#E5E5E5">everything yeah so I think that's</font>

782
00:30:22,529 --> 00:30:25,950
actually<font color="#E5E5E5"> the easiest part</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

783
00:30:23,759 --> 00:30:27,629
compiler<font color="#CCCCCC"> I think the you know it's like</font>

784
00:30:25,950 --> 00:30:29,789
50<font color="#E5E5E5"> lines of code is the actual</font>

785
00:30:27,629 --> 00:30:30,928
translation<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know maybe 50 to 100</font>

786
00:30:29,789 --> 00:30:33,090
lines of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> to translate to a</font>

787
00:30:30,929 --> 00:30:35,249
particular vendor<font color="#E5E5E5"> so the intermediate</font>

788
00:30:33,090 --> 00:30:37,799
representation we<font color="#CCCCCC"> use is things like</font>

789
00:30:35,249 --> 00:30:40,590
<font color="#E5E5E5">route maps access control lists things</font>

790
00:30:37,799 --> 00:30:42,629
<font color="#E5E5E5">that are very easily easy to translate</font>

791
00:30:40,590 --> 00:30:46,978
<font color="#E5E5E5">to something like Cisco that's just a</font>

792
00:30:42,629 --> 00:30:49,080
syntactic<font color="#E5E5E5"> change and the other thing is</font>

793
00:30:46,979 --> 00:30:51,269
that we're really because we're

794
00:30:49,080 --> 00:30:53,279
targeting<font color="#CCCCCC"> we're generating these</font>

795
00:30:51,269 --> 00:30:55,139
configurations in a particular way<font color="#E5E5E5"> we're</font>

796
00:30:53,279 --> 00:30:57,529
choosing<font color="#E5E5E5"> certain</font><font color="#CCCCCC"> bgp features but not</font>

797
00:30:55,139 --> 00:31:01,408
others we only have to support<font color="#E5E5E5"> that</font>

798
00:30:57,529 --> 00:31:03,210
<font color="#CCCCCC">fraction</font><font color="#E5E5E5"> of the configuration language</font>

799
00:31:01,409 --> 00:31:05,999
<font color="#E5E5E5">that the vendor has so we only have to</font>

800
00:31:03,210 --> 00:31:08,159
describe translation for you<font color="#CCCCCC"> know this</font>

801
00:31:05,999 --> 00:31:10,759
subset of<font color="#CCCCCC"> BGP</font><font color="#E5E5E5"> which also makes it a bit</font>

802
00:31:08,159 --> 00:31:10,759
easier<font color="#CCCCCC"> as well</font>

803
00:31:17,279 --> 00:31:21,159
thanks a<font color="#CCCCCC"> lot I was just asked would</font><font color="#E5E5E5"> you</font>

804
00:31:19,240 --> 00:31:23,740
<font color="#E5E5E5">mind putting your github link back up</font>

805
00:31:21,159 --> 00:31:25,230
<font color="#CCCCCC">it's a Google isms</font><font color="#E5E5E5"> finding minesweeper</font>

806
00:31:23,740 --> 00:31:35,710
<font color="#E5E5E5">easily</font><font color="#CCCCCC"> oh yeah sorry</font>

807
00:31:25,230 --> 00:31:38,110
<font color="#E5E5E5">see ya</font><font color="#CCCCCC"> so it's available</font><font color="#E5E5E5"> as under</font><font color="#CCCCCC"> the</font>

808
00:31:35,710 --> 00:31:42,100
batfish project which is an<font color="#CCCCCC"> open source</font>

809
00:31:38,110 --> 00:31:44,320
<font color="#CCCCCC">a network analysis framework</font><font color="#E5E5E5"> and yeah</font>

810
00:31:42,100 --> 00:31:46,240
<font color="#E5E5E5">you can find it as a branch</font><font color="#CCCCCC"> on batfish</font>

811
00:31:44,320 --> 00:31:49,830
and there's instructions for installing

812
00:31:46,240 --> 00:31:49,830
and running minesweeper at that URL

813
00:31:53,039 --> 00:31:58,049
<font color="#CCCCCC">alright great thank you</font><font color="#E5E5E5"> very much</font><font color="#CCCCCC"> Ryan I</font>

814
00:31:55,240 --> 00:31:58,049
was very informative

