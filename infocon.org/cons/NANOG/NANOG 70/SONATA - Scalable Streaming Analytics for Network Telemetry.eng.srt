1
00:00:08,889 --> 00:00:13,669
<font color="#CCCCCC">all right thanks for</font><font color="#E5E5E5"> the introduction</font>

2
00:00:11,090 --> 00:00:15,769
<font color="#E5E5E5">and I'd like to thank</font><font color="#CCCCCC"> you T for awesome</font>

3
00:00:13,670 --> 00:00:19,160
talk and setting up the<font color="#CCCCCC"> platform for</font><font color="#E5E5E5"> my</font>

4
00:00:15,769 --> 00:00:22,009
talk<font color="#CCCCCC"> so I'll slice out the network</font>

5
00:00:19,160 --> 00:00:24,529
<font color="#E5E5E5">telemetry piece from his talk and show</font>

6
00:00:22,009 --> 00:00:26,480
you what is our like be a<font color="#E5E5E5"> Princeton</font>

7
00:00:24,529 --> 00:00:29,570
think about how<font color="#E5E5E5"> network telemetry should</font>

8
00:00:26,480 --> 00:00:31,730
change<font color="#CCCCCC"> involve so before I talk about</font>

9
00:00:29,570 --> 00:00:33,470
what<font color="#E5E5E5"> sanata is let's take a quick</font>

10
00:00:31,730 --> 00:00:35,420
overview<font color="#E5E5E5"> of what conventional network</font>

11
00:00:33,470 --> 00:00:39,589
telemetry looks like we have these

12
00:00:35,420 --> 00:00:41,570
network devices across<font color="#E5E5E5"> the network then</font>

13
00:00:39,589 --> 00:00:43,489
there<font color="#E5E5E5"> are a bunch of protocols and tools</font>

14
00:00:41,570 --> 00:00:45,050
that<font color="#E5E5E5"> are used</font><font color="#CCCCCC"> for collecting data from</font>

15
00:00:43,489 --> 00:00:47,989
<font color="#E5E5E5">these monitoring</font><font color="#CCCCCC"> sensors across</font><font color="#E5E5E5"> the</font>

16
00:00:45,050 --> 00:00:51,589
network<font color="#CCCCCC"> these</font><font color="#E5E5E5"> tools can be</font><font color="#CCCCCC"> NetFlow</font>

17
00:00:47,989 --> 00:00:54,949
packet capture<font color="#CCCCCC"> s flow etc right so all</font>

18
00:00:51,590 --> 00:00:57,770
<font color="#E5E5E5">this data is now collected to a storage</font>

19
00:00:54,949 --> 00:01:00,170
<font color="#E5E5E5">or warehouse where you have compute</font>

20
00:00:57,770 --> 00:01:02,780
resources<font color="#E5E5E5"> over</font><font color="#CCCCCC"> which the queries are</font>

21
00:01:00,170 --> 00:01:04,610
executed and<font color="#E5E5E5"> you get answers right so</font>

22
00:01:02,780 --> 00:01:07,430
conventional<font color="#CCCCCC"> network deliberately now I</font>

23
00:01:04,610 --> 00:01:09,800
show you here can be divided<font color="#CCCCCC"> into two</font>

24
00:01:07,430 --> 00:01:11,180
stages<font color="#E5E5E5"> one is the collection we use the</font>

25
00:01:09,800 --> 00:01:14,929
monitoring sensors the other is the

26
00:01:11,180 --> 00:01:18,319
analysis<font color="#E5E5E5"> so notice that the analysis</font>

27
00:01:14,929 --> 00:01:21,200
stage<font color="#CCCCCC"> is driven by</font><font color="#E5E5E5"> collection but</font><font color="#CCCCCC"> Weiss</font>

28
00:01:18,319 --> 00:01:23,720
<font color="#E5E5E5">versa is not true like the collection is</font>

29
00:01:21,200 --> 00:01:25,340
<font color="#CCCCCC">actually not</font><font color="#E5E5E5"> driven</font><font color="#CCCCCC"> by what analysis has</font>

30
00:01:23,720 --> 00:01:27,380
been<font color="#CCCCCC"> done on</font><font color="#E5E5E5"> the network or</font><font color="#CCCCCC"> the other</font>

31
00:01:25,340 --> 00:01:30,619
traffic so I<font color="#CCCCCC"> talked about what's the</font>

32
00:01:27,380 --> 00:01:32,179
problem with<font color="#E5E5E5"> that</font><font color="#CCCCCC"> so this is if this is</font>

33
00:01:30,619 --> 00:01:34,220
<font color="#E5E5E5">the</font><font color="#CCCCCC"> status curve of how network</font>

34
00:01:32,179 --> 00:01:36,920
telemetry is done<font color="#CCCCCC"> the problems with</font><font color="#E5E5E5"> this</font>

35
00:01:34,220 --> 00:01:39,110
are<font color="#CCCCCC"> of two types one</font><font color="#E5E5E5"> is about Express</font>

36
00:01:36,920 --> 00:01:40,729
ability<font color="#E5E5E5"> as I mentioned that there are</font>

37
00:01:39,110 --> 00:01:42,280
since there are two different stages<font color="#E5E5E5"> if</font>

38
00:01:40,729 --> 00:01:45,590
you are a<font color="#E5E5E5"> network operator you have two</font>

39
00:01:42,280 --> 00:01:47,450
individually configured<font color="#E5E5E5"> these two stages</font>

40
00:01:45,590 --> 00:01:49,340
<font color="#E5E5E5">that if you have to figure</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> like what</font>

41
00:01:47,450 --> 00:01:50,660
collection<font color="#E5E5E5"> pool you</font><font color="#CCCCCC"> have to use and then</font>

42
00:01:49,340 --> 00:01:52,220
among them like<font color="#E5E5E5"> how do you configure</font>

43
00:01:50,660 --> 00:01:54,380
those devices<font color="#E5E5E5"> to</font><font color="#CCCCCC"> collect the data</font><font color="#E5E5E5"> and</font>

44
00:01:52,220 --> 00:01:56,810
<font color="#E5E5E5">then based on your collection strategy</font>

45
00:01:54,380 --> 00:01:59,060
you<font color="#CCCCCC"> choose how</font><font color="#E5E5E5"> to analyze the data these</font>

46
00:01:56,810 --> 00:02:01,720
data collection tools and protocols<font color="#E5E5E5"> are</font>

47
00:01:59,060 --> 00:02:04,910
sometimes static and often<font color="#CCCCCC"> coarse-grain</font>

48
00:02:01,720 --> 00:02:07,160
<font color="#E5E5E5">the analysis setup because it is driven</font>

49
00:02:04,910 --> 00:02:10,220
by<font color="#E5E5E5"> your choice of collection tool it's</font>

50
00:02:07,160 --> 00:02:11,930
kind<font color="#E5E5E5"> of brittle so it's very hard</font><font color="#CCCCCC"> once I</font>

51
00:02:10,220 --> 00:02:13,879
logged in with the type<font color="#CCCCCC"> of</font><font color="#E5E5E5"> collection</font>

52
00:02:11,930 --> 00:02:15,440
<font color="#E5E5E5">tool I want to</font><font color="#CCCCCC"> deploy in my network it's</font>

53
00:02:13,879 --> 00:02:17,810
<font color="#E5E5E5">very hard for me to kind</font><font color="#CCCCCC"> of like make a</font>

54
00:02:15,440 --> 00:02:18,410
decision I want<font color="#E5E5E5"> to change how I want to</font>

55
00:02:17,810 --> 00:02:20,690
<font color="#E5E5E5">collect the data</font>

56
00:02:18,410 --> 00:02:22,060
<font color="#E5E5E5">this is give an example the nature</font><font color="#CCCCCC"> of</font>

57
00:02:20,690 --> 00:02:26,319
queries can be<font color="#E5E5E5"> very</font>

58
00:02:22,060 --> 00:02:28,150
diverse and not<font color="#CCCCCC"> all collection types can</font>

59
00:02:26,319 --> 00:02:30,579
fit the<font color="#CCCCCC"> different queries that you want</font>

60
00:02:28,150 --> 00:02:32,920
to run in the network<font color="#E5E5E5"> be more specific</font>

61
00:02:30,580 --> 00:02:35,230
you can choose to<font color="#CCCCCC"> do packet cast</font><font color="#E5E5E5"> across</font>

62
00:02:32,920 --> 00:02:37,510
<font color="#E5E5E5">the network and answer very fine-grained</font>

63
00:02:35,230 --> 00:02:39,369
queries<font color="#E5E5E5"> but</font><font color="#CCCCCC"> at the same</font><font color="#E5E5E5"> time that is too</font>

64
00:02:37,510 --> 00:02:41,290
much<font color="#CCCCCC"> of</font><font color="#E5E5E5"> data to process and analyze so</font>

65
00:02:39,370 --> 00:02:42,880
you might go on with making a<font color="#CCCCCC"> decision</font>

66
00:02:41,290 --> 00:02:45,429
about using s flow<font color="#E5E5E5"> or net flow kind of</font>

67
00:02:42,880 --> 00:02:47,140
tools to analyze<font color="#CCCCCC"> the traffic at the flow</font>

68
00:02:45,430 --> 00:02:48,970
level so there is either too<font color="#CCCCCC"> much of</font>

69
00:02:47,140 --> 00:02:50,559
data or too less of data<font color="#E5E5E5"> and that</font>

70
00:02:48,970 --> 00:02:52,150
creates a<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> respective</font>

71
00:02:50,560 --> 00:02:53,950
<font color="#CCCCCC">Express ability that you</font><font color="#E5E5E5"> should know</font>

72
00:02:52,150 --> 00:02:56,530
ahead<font color="#CCCCCC"> of time</font><font color="#E5E5E5"> what kind</font><font color="#CCCCCC"> of analysis you</font>

73
00:02:53,950 --> 00:02:58,988
want<font color="#E5E5E5"> to do the second challenge</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> in</font>

74
00:02:56,530 --> 00:03:00,580
terms<font color="#E5E5E5"> of scalability</font><font color="#CCCCCC"> that as the traffic</font>

75
00:02:58,989 --> 00:03:02,170
<font color="#E5E5E5">volume increases or the number of</font>

76
00:03:00,580 --> 00:03:04,390
monitoring queries or telemetry queries

77
00:03:02,170 --> 00:03:05,829
<font color="#CCCCCC">that you want to</font><font color="#E5E5E5"> network increase then</font>

78
00:03:04,390 --> 00:03:08,140
it becomes<font color="#CCCCCC"> very hard to</font><font color="#E5E5E5"> answer these</font>

79
00:03:05,830 --> 00:03:11,680
queries in reality and that's the key if

80
00:03:08,140 --> 00:03:13,899
you<font color="#E5E5E5"> want to build statistics</font><font color="#CCCCCC"> self driven</font>

81
00:03:11,680 --> 00:03:15,790
networks or<font color="#CCCCCC"> even</font><font color="#E5E5E5"> in the current world if</font>

82
00:03:13,900 --> 00:03:17,650
you<font color="#E5E5E5"> want to answer or solve problems in</font>

83
00:03:15,790 --> 00:03:19,480
real time<font color="#E5E5E5"> you want the Z</font><font color="#CCCCCC"> Square is to be</font>

84
00:03:17,650 --> 00:03:20,769
<font color="#E5E5E5">answered in real time but</font><font color="#CCCCCC"> as a</font><font color="#E5E5E5"> volume of</font>

85
00:03:19,480 --> 00:03:22,780
traffic increases or<font color="#CCCCCC"> the number of</font>

86
00:03:20,769 --> 00:03:25,000
queries<font color="#CCCCCC"> increases it's</font><font color="#E5E5E5"> very hard</font><font color="#CCCCCC"> also</font>

87
00:03:22,780 --> 00:03:26,680
given this set of collection tools that

88
00:03:25,000 --> 00:03:28,060
you have<font color="#CCCCCC"> a cross</font><font color="#E5E5E5"> and network it's very</font>

89
00:03:26,680 --> 00:03:31,390
hard to transport<font color="#E5E5E5"> the data from the</font>

90
00:03:28,060 --> 00:03:33,190
collection to storage<font color="#CCCCCC"> where office so</font><font color="#E5E5E5"> to</font>

91
00:03:31,390 --> 00:03:35,350
<font color="#CCCCCC">summarize the problems the status</font><font color="#E5E5E5"> quo of</font>

92
00:03:33,190 --> 00:03:38,320
<font color="#E5E5E5">network telemetry</font><font color="#CCCCCC"> it is actually very</font>

93
00:03:35,350 --> 00:03:40,060
hard to both<font color="#CCCCCC"> Express as well as scale</font>

94
00:03:38,320 --> 00:03:42,010
<font color="#E5E5E5">these</font><font color="#CCCCCC"> network telemetry tasks</font>

95
00:03:40,060 --> 00:03:44,470
<font color="#E5E5E5">so this is where Sinatra comes into</font>

96
00:03:42,010 --> 00:03:46,420
picture so<font color="#CCCCCC"> sonata</font><font color="#E5E5E5"> in summary is</font>

97
00:03:44,470 --> 00:03:48,850
basically query driven telemetry<font color="#E5E5E5"> and</font>

98
00:03:46,420 --> 00:03:51,309
it's pivoted across around<font color="#E5E5E5"> three ideas</font>

99
00:03:48,850 --> 00:03:53,290
<font color="#E5E5E5">so the first idea is uniform programming</font>

100
00:03:51,310 --> 00:03:55,420
abstraction will be allowed network

101
00:03:53,290 --> 00:03:58,000
operators to<font color="#E5E5E5"> express queries as dataflow</font>

102
00:03:55,420 --> 00:03:59,768
operations over packet<font color="#E5E5E5"> tuples the second</font>

103
00:03:58,000 --> 00:04:00,790
idea<font color="#CCCCCC"> is about query partitioning that</font><font color="#E5E5E5"> we</font>

104
00:03:59,769 --> 00:04:02,470
<font color="#CCCCCC">observed that there are these</font><font color="#E5E5E5"> very</font>

105
00:04:00,790 --> 00:04:04,540
<font color="#E5E5E5">configurable and programmable devices</font>

106
00:04:02,470 --> 00:04:06,130
<font color="#E5E5E5">across and networks that can be used to</font>

107
00:04:04,540 --> 00:04:08,230
execute<font color="#CCCCCC"> subsets of dataflow</font><font color="#E5E5E5"> operations</font>

108
00:04:06,130 --> 00:04:11,109
<font color="#E5E5E5">in data plane and third ideas iterative</font>

109
00:04:08,230 --> 00:04:12,429
refinement<font color="#E5E5E5"> there we observe that the</font>

110
00:04:11,109 --> 00:04:14,200
portion of traffic that satisfies the

111
00:04:12,430 --> 00:04:16,000
query is actually a very small<font color="#CCCCCC"> subset of</font>

112
00:04:14,200 --> 00:04:17,529
the total<font color="#CCCCCC"> traffic so we</font><font color="#E5E5E5"> come up with</font>

113
00:04:16,000 --> 00:04:21,360
this<font color="#E5E5E5"> idea of a strategy zooming in on</font>

114
00:04:17,529 --> 00:04:24,070
<font color="#CCCCCC">prophec</font><font color="#E5E5E5"> traffic of interest I'm sorry</font>

115
00:04:21,360 --> 00:04:27,539
I'll grab some water so that<font color="#CCCCCC"> are more</font>

116
00:04:24,070 --> 00:04:27,539
clear with my<font color="#E5E5E5"> transition</font>

117
00:04:29,100 --> 00:04:36,910
<font color="#E5E5E5">all right so the idea of Sanada is to</font>

118
00:04:35,590 --> 00:04:38,590
kind of<font color="#E5E5E5"> make it easier for network</font>

119
00:04:36,910 --> 00:04:40,060
<font color="#E5E5E5">operators to express as well as scale</font>

120
00:04:38,590 --> 00:04:42,969
the network<font color="#CCCCCC"> telemetry queries that</font><font color="#E5E5E5"> they</font>

121
00:04:40,060 --> 00:04:44,530
have so let's talk<font color="#CCCCCC"> about the</font><font color="#E5E5E5"> first idea</font>

122
00:04:42,970 --> 00:04:46,780
<font color="#CCCCCC">the first idea is</font><font color="#E5E5E5"> about uniform</font>

123
00:04:44,530 --> 00:04:47,950
programming abstraction<font color="#E5E5E5"> so the key</font>

124
00:04:46,780 --> 00:04:49,809
problem<font color="#E5E5E5"> which I was talking</font><font color="#CCCCCC"> about</font>

125
00:04:47,950 --> 00:04:51,310
earlier<font color="#E5E5E5"> was like this because you</font><font color="#CCCCCC"> have</font>

126
00:04:49,810 --> 00:04:53,020
<font color="#E5E5E5">this plethora of collection tools that</font>

127
00:04:51,310 --> 00:04:55,510
that you have to make decision about<font color="#E5E5E5"> and</font>

128
00:04:53,020 --> 00:04:57,250
then<font color="#CCCCCC"> configure them so as a network</font>

129
00:04:55,510 --> 00:04:59,200
operator you<font color="#CCCCCC"> have to be aware of where</font>

130
00:04:57,250 --> 00:05:01,000
or how your query is going<font color="#CCCCCC"> to get</font>

131
00:04:59,200 --> 00:05:03,039
<font color="#E5E5E5">executed</font><font color="#CCCCCC"> and how the data collection has</font>

132
00:05:01,000 --> 00:05:04,360
<font color="#CCCCCC">to happen</font><font color="#E5E5E5"> which becomes cumbersome</font>

133
00:05:03,040 --> 00:05:05,470
<font color="#CCCCCC">because you don't know ahead of time</font>

134
00:05:04,360 --> 00:05:07,510
like<font color="#E5E5E5"> what is the nature of</font><font color="#CCCCCC"> codes that</font>

135
00:05:05,470 --> 00:05:09,670
<font color="#E5E5E5">you want execute in the network right so</font>

136
00:05:07,510 --> 00:05:11,800
the extensible<font color="#E5E5E5"> socketable abstraction</font><font color="#CCCCCC"> is</font>

137
00:05:09,670 --> 00:05:13,870
that we<font color="#E5E5E5"> provide the abstraction in which</font>

138
00:05:11,800 --> 00:05:14,590
network operators can express queries

139
00:05:13,870 --> 00:05:18,070
<font color="#CCCCCC">over</font>

140
00:05:14,590 --> 00:05:19,900
<font color="#E5E5E5">arbitrary arbitrary fields of collection</font>

141
00:05:18,070 --> 00:05:21,700
of arbitrary fields called tuples<font color="#E5E5E5"> and</font>

142
00:05:19,900 --> 00:05:22,989
assuming that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> can express these</font>

143
00:05:21,700 --> 00:05:25,479
queries<font color="#E5E5E5"> would execute these queries for</font>

144
00:05:22,990 --> 00:05:27,400
look any location the network<font color="#E5E5E5"> any packet</font>

145
00:05:25,480 --> 00:05:29,290
any location in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> right the</font>

146
00:05:27,400 --> 00:05:31,120
second<font color="#E5E5E5"> aspect of this programming</font>

147
00:05:29,290 --> 00:05:32,980
abstraction is the expressive<font color="#E5E5E5"> dataflow</font>

148
00:05:31,120 --> 00:05:34,780
operations<font color="#E5E5E5"> we</font><font color="#CCCCCC"> observe that</font><font color="#E5E5E5"> most of the</font>

149
00:05:32,980 --> 00:05:37,180
<font color="#CCCCCC">network delimited tasks require</font>

150
00:05:34,780 --> 00:05:40,570
collecting aggregate<font color="#CCCCCC"> statistics over the</font>

151
00:05:37,180 --> 00:05:42,430
<font color="#CCCCCC">subsets of</font><font color="#E5E5E5"> the traffic and sometimes you</font>

152
00:05:40,570 --> 00:05:45,700
want<font color="#CCCCCC"> to do correlation and you want to</font>

153
00:05:42,430 --> 00:05:49,660
join<font color="#E5E5E5"> multiple streams or packet</font><font color="#CCCCCC"> couples</font>

154
00:05:45,700 --> 00:05:51,430
together<font color="#E5E5E5"> so using or making a choice of</font>

155
00:05:49,660 --> 00:05:53,440
decorator is like expressing<font color="#E5E5E5"> those your</font>

156
00:05:51,430 --> 00:05:55,660
queries as decorative queries<font color="#CCCCCC"> composed</font>

157
00:05:53,440 --> 00:05:57,400
of dataflow operations operators<font color="#E5E5E5"> kind of</font>

158
00:05:55,660 --> 00:05:59,470
makes<font color="#E5E5E5"> it easier or makes it a natural</font>

159
00:05:57,400 --> 00:06:01,030
<font color="#CCCCCC">choice of like what kind of programming</font>

160
00:05:59,470 --> 00:06:05,770
<font color="#E5E5E5">language or abstraction you want to</font>

161
00:06:01,030 --> 00:06:07,719
choose for expressing<font color="#CCCCCC"> your queries so I</font>

162
00:06:05,770 --> 00:06:09,280
will give a<font color="#CCCCCC"> few examples to give you a</font>

163
00:06:07,720 --> 00:06:10,990
more sense of<font color="#E5E5E5"> a better sense of like</font>

164
00:06:09,280 --> 00:06:12,909
what<font color="#CCCCCC"> this uniform programming</font>

165
00:06:10,990 --> 00:06:14,890
abstraction looks like so<font color="#E5E5E5"> let's take</font><font color="#CCCCCC"> two</font>

166
00:06:12,910 --> 00:06:17,200
<font color="#E5E5E5">very simple</font><font color="#CCCCCC"> examples it's a security</font>

167
00:06:14,890 --> 00:06:18,640
application where you want to detect<font color="#CCCCCC"> you</font>

168
00:06:17,200 --> 00:06:22,360
want to detect traffic anomalies in the

169
00:06:18,640 --> 00:06:23,620
network the anomaly is<font color="#CCCCCC"> due to which is</font>

170
00:06:22,360 --> 00:06:24,790
<font color="#E5E5E5">very common for the</font><font color="#CCCCCC"> deflection attacks</font>

171
00:06:23,620 --> 00:06:26,200
in which there<font color="#CCCCCC"> are too many source IP</font>

172
00:06:24,790 --> 00:06:28,390
sending traffic to<font color="#CCCCCC"> a particular victim</font>

173
00:06:26,200 --> 00:06:31,390
<font color="#CCCCCC">right I call it potential victim because</font>

174
00:06:28,390 --> 00:06:33,010
that might not<font color="#CCCCCC"> be the only feature you</font>

175
00:06:31,390 --> 00:06:33,550
want<font color="#E5E5E5"> to extract to confirm presence of</font>

176
00:06:33,010 --> 00:06:35,770
such an attack

177
00:06:33,550 --> 00:06:36,940
so you express the query<font color="#CCCCCC"> over</font><font color="#E5E5E5"> packet</font>

178
00:06:35,770 --> 00:06:38,919
stream and<font color="#CCCCCC"> package stream can be</font>

179
00:06:36,940 --> 00:06:40,990
arbitrary<font color="#E5E5E5"> collection of tuples which can</font>

180
00:06:38,920 --> 00:06:42,040
be headers<font color="#CCCCCC"> payloads</font><font color="#E5E5E5"> for the context of</font>

181
00:06:40,990 --> 00:06:44,080
the bracket

182
00:06:42,040 --> 00:06:46,150
so on that packet stream you specify the

183
00:06:44,080 --> 00:06:48,310
window which<font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> apply these</font>

184
00:06:46,150 --> 00:06:49,719
<font color="#E5E5E5">reductions and</font><font color="#CCCCCC"> up operations and the</font>

185
00:06:48,310 --> 00:06:52,300
first operator you apply is basically<font color="#E5E5E5"> a</font>

186
00:06:49,720 --> 00:06:54,430
<font color="#CCCCCC">filter which does packet dot source code</font>

187
00:06:52,300 --> 00:06:55,900
which is part of the<font color="#CCCCCC"> packets</font><font color="#E5E5E5"> header</font>

188
00:06:54,430 --> 00:06:58,720
field you make sure that<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> looking</font>

189
00:06:55,900 --> 00:07:00,219
on the DNS responses<font color="#E5E5E5"> and then you do a</font>

190
00:06:58,720 --> 00:07:02,020
map operation<font color="#E5E5E5"> you where you kind of like</font>

191
00:07:00,220 --> 00:07:03,640
extract out the<font color="#E5E5E5"> destination in the like</font>

192
00:07:02,020 --> 00:07:06,370
couple of pair of<font color="#CCCCCC"> predestination</font><font color="#E5E5E5"> and</font>

193
00:07:03,640 --> 00:07:07,599
<font color="#CCCCCC">source IP and you apply a distinct</font>

194
00:07:06,370 --> 00:07:09,280
operation in<font color="#E5E5E5"> which you get the unique</font>

195
00:07:07,600 --> 00:07:11,590
pairs of these destination and source

196
00:07:09,280 --> 00:07:13,809
<font color="#E5E5E5">IPS and then you apply another map</font>

197
00:07:11,590 --> 00:07:15,099
operation<font color="#CCCCCC"> to kind of</font><font color="#E5E5E5"> like ignore because</font>

198
00:07:13,810 --> 00:07:16,420
you're not<font color="#E5E5E5"> interested in what the exact</font>

199
00:07:15,100 --> 00:07:18,370
source IP is but you<font color="#E5E5E5"> are interested in</font>

200
00:07:16,420 --> 00:07:19,570
how many unique source IPS are we apply

201
00:07:18,370 --> 00:07:21,130
another map then<font color="#E5E5E5"> you apply another</font>

202
00:07:19,570 --> 00:07:23,590
reduce and then you finally apply<font color="#CCCCCC"> a</font>

203
00:07:21,130 --> 00:07:25,420
filter<font color="#E5E5E5"> in which if the number of source</font>

204
00:07:23,590 --> 00:07:26,770
IP is sending traffic to<font color="#E5E5E5"> a particular</font>

205
00:07:25,420 --> 00:07:28,510
host<font color="#E5E5E5"> exceeds our particular</font><font color="#CCCCCC"> pre</font>

206
00:07:26,770 --> 00:07:30,609
<font color="#CCCCCC">specified</font><font color="#E5E5E5"> threshold then you report that</font>

207
00:07:28,510 --> 00:07:35,039
destination<font color="#CCCCCC"> so this is a simple way in</font>

208
00:07:30,610 --> 00:07:37,840
which you can express your query<font color="#E5E5E5"> so</font>

209
00:07:35,040 --> 00:07:39,790
notice<font color="#E5E5E5"> here that you don't have to worry</font>

210
00:07:37,840 --> 00:07:41,619
<font color="#E5E5E5">about very exactly this query is going</font>

211
00:07:39,790 --> 00:07:43,030
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> executed in the network and how</font>

212
00:07:41,620 --> 00:07:44,740
is it<font color="#CCCCCC"> going to get executed so network</font>

213
00:07:43,030 --> 00:07:46,630
operator is abstracted away from these

214
00:07:44,740 --> 00:07:48,760
complexities<font color="#E5E5E5"> and details all they have</font>

215
00:07:46,630 --> 00:07:50,680
to<font color="#E5E5E5"> worry</font><font color="#CCCCCC"> about like on the packet what</font>

216
00:07:48,760 --> 00:07:52,990
header fields you are interested in

217
00:07:50,680 --> 00:07:54,970
<font color="#E5E5E5">Express the query that</font><font color="#CCCCCC"> way another</font>

218
00:07:52,990 --> 00:07:58,300
<font color="#E5E5E5">example is if</font><font color="#CCCCCC"> you want to confirm this</font>

219
00:07:54,970 --> 00:08:00,910
reflection attack and<font color="#E5E5E5"> like so you want</font>

220
00:07:58,300 --> 00:08:03,280
<font color="#CCCCCC">to detect host which showed the traffic</font>

221
00:08:00,910 --> 00:08:05,890
anomalies<font color="#E5E5E5"> and out of the type</font><font color="#CCCCCC"> RSX</font><font color="#E5E5E5"> right</font>

222
00:08:03,280 --> 00:08:07,929
so it's a very simple<font color="#CCCCCC"> transformation the</font>

223
00:08:05,890 --> 00:08:10,030
key<font color="#E5E5E5"> operator to notice here is the</font><font color="#CCCCCC"> join</font>

224
00:08:07,930 --> 00:08:11,520
operation<font color="#E5E5E5"> in which from the previous</font>

225
00:08:10,030 --> 00:08:15,130
transformation I was<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> extract the</font>

226
00:08:11,520 --> 00:08:18,280
potential victim<font color="#E5E5E5"> IPS and I join it with</font>

227
00:08:15,130 --> 00:08:20,290
<font color="#E5E5E5">the packet stream again and then apply</font>

228
00:08:18,280 --> 00:08:22,419
<font color="#CCCCCC">filters checking if it's of the type</font><font color="#E5E5E5"> rr6</font>

229
00:08:20,290 --> 00:08:24,010
<font color="#E5E5E5">right and if it like</font><font color="#CCCCCC"> let's do some</font>

230
00:08:22,420 --> 00:08:25,540
<font color="#E5E5E5">MapReduce get a sense of like whether it</font>

231
00:08:24,010 --> 00:08:27,460
<font color="#CCCCCC">exceeds so</font><font color="#E5E5E5"> please specified threshold or</font>

232
00:08:25,540 --> 00:08:30,130
not and report the destination<font color="#CCCCCC"> IDs so</font>

233
00:08:27,460 --> 00:08:31,479
<font color="#CCCCCC">the key takeaway here</font><font color="#E5E5E5"> is like with this</font>

234
00:08:30,130 --> 00:08:33,700
kind<font color="#CCCCCC"> of programming abstraction it is</font>

235
00:08:31,480 --> 00:08:35,850
actually possible<font color="#E5E5E5"> for you to</font><font color="#CCCCCC"> combine or</font>

236
00:08:33,700 --> 00:08:37,840
join multiple<font color="#CCCCCC"> packet stream like</font>

237
00:08:35,850 --> 00:08:39,930
analysis over multiple packet streams

238
00:08:37,840 --> 00:08:44,380
<font color="#CCCCCC">together</font>

239
00:08:39,929 --> 00:08:46,150
so<font color="#E5E5E5"> does it</font><font color="#CCCCCC"> change the</font><font color="#E5E5E5"> status curve in</font>

240
00:08:44,380 --> 00:08:49,270
terms of<font color="#CCCCCC"> express ability yes it does</font>

241
00:08:46,150 --> 00:08:50,590
<font color="#E5E5E5">because now you can express the</font><font color="#CCCCCC"> dataflow</font>

242
00:08:49,270 --> 00:08:51,910
queries over<font color="#E5E5E5"> a packet</font><font color="#CCCCCC"> also you don't</font>

243
00:08:50,590 --> 00:08:53,540
<font color="#CCCCCC">have to worry</font><font color="#E5E5E5"> about like</font><font color="#CCCCCC"> the low-level</font>

244
00:08:51,910 --> 00:08:56,959
configurations

245
00:08:53,540 --> 00:08:59,149
you're not tied to the<font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> ApS or</font>

246
00:08:56,959 --> 00:09:01,518
platform-specific<font color="#E5E5E5"> ApS that</font><font color="#CCCCCC"> you would</font>

247
00:08:59,149 --> 00:09:03,529
<font color="#E5E5E5">using for collecting data or because you</font>

248
00:09:01,519 --> 00:09:04,850
were now you're<font color="#E5E5E5"> not locking in or you're</font>

249
00:09:03,529 --> 00:09:06,889
not differentiating between collection

250
00:09:04,850 --> 00:09:09,560
and analysis<font color="#CCCCCC"> so you're not like it's</font>

251
00:09:06,889 --> 00:09:11,240
it's kind of less brittle<font color="#CCCCCC"> or very</font>

252
00:09:09,560 --> 00:09:13,069
flexible in the<font color="#CCCCCC"> sense that it's very</font>

253
00:09:11,240 --> 00:09:14,810
<font color="#E5E5E5">trivial now to add new queries on the</font>

254
00:09:13,070 --> 00:09:18,829
fly or change the collection tools

255
00:09:14,810 --> 00:09:20,779
completely right so it<font color="#E5E5E5"> it is now easy to</font>

256
00:09:18,829 --> 00:09:22,579
express<font color="#CCCCCC"> Network telemetry tasks if we go</font>

257
00:09:20,779 --> 00:09:23,720
with this<font color="#E5E5E5"> programming abstraction the</font>

258
00:09:22,579 --> 00:09:26,000
second<font color="#E5E5E5"> question is like</font><font color="#CCCCCC"> how do</font><font color="#E5E5E5"> you</font>

259
00:09:23,720 --> 00:09:28,940
execute queries expressed this<font color="#E5E5E5"> way right</font>

260
00:09:26,000 --> 00:09:31,339
<font color="#E5E5E5">so unnatural candidate</font><font color="#CCCCCC"> because the</font>

261
00:09:28,940 --> 00:09:33,589
dataflow programming<font color="#E5E5E5"> abstraction or</font>

262
00:09:31,339 --> 00:09:35,329
paradigm is more suited to stream

263
00:09:33,589 --> 00:09:36,769
processors<font color="#E5E5E5"> or the state of our stream</font>

264
00:09:35,329 --> 00:09:38,420
processor when I say stream processor

265
00:09:36,769 --> 00:09:41,959
<font color="#E5E5E5">I'm referring</font><font color="#CCCCCC"> to something like</font><font color="#E5E5E5"> Apache</font>

266
00:09:38,420 --> 00:09:43,910
<font color="#E5E5E5">spark or storm some of the tools and a</font>

267
00:09:41,959 --> 00:09:46,000
nice<font color="#E5E5E5"> solution can be that okay</font><font color="#CCCCCC"> if you</font>

268
00:09:43,910 --> 00:09:48,649
<font color="#E5E5E5">express queries with this level of</font>

269
00:09:46,000 --> 00:09:52,040
flexibility and<font color="#E5E5E5"> program ability what</font>

270
00:09:48,649 --> 00:09:53,600
what if you basically process<font color="#E5E5E5"> all or</font>

271
00:09:52,040 --> 00:09:55,550
subset<font color="#CCCCCC"> of traffic collected from</font><font color="#E5E5E5"> the</font>

272
00:09:53,600 --> 00:09:56,990
network<font color="#E5E5E5"> send it to a</font><font color="#CCCCCC"> state-of-art</font><font color="#E5E5E5"> stream</font>

273
00:09:55,550 --> 00:09:59,319
processor and let<font color="#E5E5E5"> it let the magic work</font>

274
00:09:56,990 --> 00:10:02,660
<font color="#E5E5E5">right so this sounds</font><font color="#CCCCCC"> like an excellent</font>

275
00:09:59,319 --> 00:10:05,240
solution<font color="#E5E5E5"> but at the scale at which these</font>

276
00:10:02,660 --> 00:10:06,920
networks operate<font color="#E5E5E5"> specifically if I talk</font>

277
00:10:05,240 --> 00:10:09,139
<font color="#E5E5E5">about a large exchange point for example</font>

278
00:10:06,920 --> 00:10:11,269
<font color="#CCCCCC">the exchange</font><font color="#E5E5E5"> traffic at the rate of few</font>

279
00:10:09,139 --> 00:10:12,769
terabytes per second the these stream

280
00:10:11,269 --> 00:10:15,610
<font color="#CCCCCC">processors are actually not designed to</font>

281
00:10:12,769 --> 00:10:18,589
<font color="#E5E5E5">handle traffic at</font><font color="#CCCCCC"> that scale right</font><font color="#E5E5E5"> so</font>

282
00:10:15,610 --> 00:10:21,920
these these<font color="#E5E5E5"> solutions can be expressible</font>

283
00:10:18,589 --> 00:10:24,079
<font color="#E5E5E5">to let you express policies the way we</font>

284
00:10:21,920 --> 00:10:25,610
were<font color="#E5E5E5"> talking about but sending all the</font>

285
00:10:24,079 --> 00:10:27,709
traffic to stream processor is<font color="#CCCCCC"> not a</font>

286
00:10:25,610 --> 00:10:30,199
<font color="#E5E5E5">scalable</font><font color="#CCCCCC"> solution so let's talk about</font>

287
00:10:27,709 --> 00:10:32,689
how<font color="#CCCCCC"> sanata makes things work</font><font color="#E5E5E5"> and scale</font>

288
00:10:30,199 --> 00:10:35,389
the solution<font color="#E5E5E5"> scale query execution so</font>

289
00:10:32,690 --> 00:10:37,579
there<font color="#E5E5E5"> are two key ideas here for very</font>

290
00:10:35,389 --> 00:10:39,500
<font color="#E5E5E5">like scaling the query execution</font><font color="#CCCCCC"> one is</font>

291
00:10:37,579 --> 00:10:41,479
about<font color="#E5E5E5"> query partitioning the second is</font>

292
00:10:39,500 --> 00:10:43,069
about iterative refinement<font color="#CCCCCC"> so when I say</font>

293
00:10:41,480 --> 00:10:44,360
query partitioning the idea is that<font color="#CCCCCC"> we</font>

294
00:10:43,069 --> 00:10:46,660
observe that<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are these</font>

295
00:10:44,360 --> 00:10:50,569
programmable devices<font color="#E5E5E5"> across the network</font>

296
00:10:46,660 --> 00:10:52,370
<font color="#E5E5E5">you can call them</font><font color="#CCCCCC"> Sdn</font><font color="#E5E5E5"> or I call them</font>

297
00:10:50,569 --> 00:10:54,860
<font color="#E5E5E5">just</font><font color="#CCCCCC"> reconfigure it below programmable</font>

298
00:10:52,370 --> 00:10:56,690
devices in the network<font color="#CCCCCC"> we go the</font><font color="#E5E5E5"> idea is</font>

299
00:10:54,860 --> 00:10:58,819
<font color="#CCCCCC">that they can actually</font><font color="#E5E5E5"> execute</font><font color="#CCCCCC"> subset of</font>

300
00:10:56,690 --> 00:11:00,019
the<font color="#CCCCCC"> dataflow operations</font><font color="#E5E5E5"> that you express</font>

301
00:10:58,819 --> 00:11:03,019
on the net<font color="#E5E5E5"> in the network operator</font>

302
00:11:00,019 --> 00:11:04,310
<font color="#E5E5E5">Express and this reduces the packet</font>

303
00:11:03,019 --> 00:11:05,569
tuples at the cost of<font color="#E5E5E5"> life you might</font>

304
00:11:04,310 --> 00:11:06,489
<font color="#CCCCCC">require some</font><font color="#E5E5E5"> additional</font><font color="#CCCCCC"> state in the</font>

305
00:11:05,569 --> 00:11:07,810
network

306
00:11:06,490 --> 00:11:10,660
and the second idea<font color="#CCCCCC"> is about iterative</font>

307
00:11:07,810 --> 00:11:12,930
refinement<font color="#CCCCCC"> that we iteratively zoom in</font>

308
00:11:10,660 --> 00:11:15,100
on traffic<font color="#E5E5E5"> of interest reducing the</font>

309
00:11:12,930 --> 00:11:16,779
state at<font color="#CCCCCC"> the cost</font><font color="#E5E5E5"> of additional delays</font>

310
00:11:15,100 --> 00:11:18,610
so I'll<font color="#E5E5E5"> talk about it in more detail</font>

311
00:11:16,779 --> 00:11:21,010
<font color="#CCCCCC">let's start with the query partitioning</font>

312
00:11:18,610 --> 00:11:22,600
so the key observation<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is that data</font>

313
00:11:21,010 --> 00:11:24,399
plane can actually process<font color="#CCCCCC"> packet rate</font>

314
00:11:22,600 --> 00:11:26,589
line<font color="#CCCCCC"> rate right</font><font color="#E5E5E5"> this is a capability</font>

315
00:11:24,399 --> 00:11:28,149
<font color="#E5E5E5">that is relatively unique compared to</font>

316
00:11:26,589 --> 00:11:29,920
the other use cases of stream processing

317
00:11:28,149 --> 00:11:31,899
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> have a data</font><font color="#E5E5E5"> plane that can</font>

318
00:11:29,920 --> 00:11:33,790
process packets at line rate<font color="#CCCCCC"> so how it</font>

319
00:11:31,899 --> 00:11:35,529
works<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like you can execute</font><font color="#CCCCCC"> if you</font>

320
00:11:33,790 --> 00:11:37,420
have the targets<font color="#E5E5E5"> or the data plane</font>

321
00:11:35,529 --> 00:11:39,130
targets<font color="#E5E5E5"> are of using something</font><font color="#CCCCCC"> like open</font>

322
00:11:37,420 --> 00:11:41,229
<font color="#E5E5E5">flow so it's kind</font><font color="#CCCCCC"> of easier for you to</font>

323
00:11:39,130 --> 00:11:43,029
apply<font color="#E5E5E5"> transformations or the data flow</font>

324
00:11:41,230 --> 00:11:44,800
operations like filter and sampler<font color="#E5E5E5"> so a</font>

325
00:11:43,029 --> 00:11:47,230
sampling<font color="#E5E5E5"> in the data plane which are</font>

326
00:11:44,800 --> 00:11:49,300
relatively simple<font color="#E5E5E5"> but bit effective the</font>

327
00:11:47,230 --> 00:11:50,380
second<font color="#E5E5E5"> set</font><font color="#CCCCCC"> of hardware devices or the</font>

328
00:11:49,300 --> 00:11:52,240
<font color="#E5E5E5">targets that I am talking about our</font>

329
00:11:50,380 --> 00:11:53,709
<font color="#E5E5E5">piece of</font><font color="#CCCCCC"> base which is</font><font color="#E5E5E5"> the protocol</font>

330
00:11:52,240 --> 00:11:56,770
independence which architecture which

331
00:11:53,709 --> 00:11:58,119
uses p4s programming language so in

332
00:11:56,770 --> 00:12:00,730
addition<font color="#E5E5E5"> to</font><font color="#CCCCCC"> filtering</font><font color="#E5E5E5"> sample you can</font>

333
00:11:58,120 --> 00:12:03,160
<font color="#CCCCCC">actually do flexible Map Reduce</font><font color="#E5E5E5"> and</font>

334
00:12:00,730 --> 00:12:06,279
<font color="#E5E5E5">distinct operation in the data plane</font><font color="#CCCCCC"> so</font>

335
00:12:03,160 --> 00:12:07,660
the<font color="#E5E5E5"> trade-off is that you you trade</font>

336
00:12:06,279 --> 00:12:09,610
packet processing cost with<font color="#CCCCCC"> the</font>

337
00:12:07,660 --> 00:12:12,699
additional<font color="#E5E5E5"> state in the network in the</font>

338
00:12:09,610 --> 00:12:14,589
data plane<font color="#E5E5E5"> so I'll make a point about</font>

339
00:12:12,700 --> 00:12:16,450
<font color="#E5E5E5">visa targets for query partitioning</font>

340
00:12:14,589 --> 00:12:17,980
because that's what we use for<font color="#CCCCCC"> building</font>

341
00:12:16,450 --> 00:12:19,420
<font color="#E5E5E5">or that's the prime thing</font><font color="#CCCCCC"> which you</font>

342
00:12:17,980 --> 00:12:20,380
which we use<font color="#CCCCCC"> for building</font><font color="#E5E5E5"> the prototype</font>

343
00:12:19,420 --> 00:12:23,199
<font color="#E5E5E5">of</font><font color="#CCCCCC"> funada</font>

344
00:12:20,380 --> 00:12:25,209
so there are<font color="#CCCCCC"> four key aspects of pieces</font>

345
00:12:23,200 --> 00:12:27,910
switches or<font color="#E5E5E5"> PCR targets that allow us to</font>

346
00:12:25,209 --> 00:12:29,859
<font color="#CCCCCC">effectively</font><font color="#E5E5E5"> do very partitioning one is</font>

347
00:12:27,910 --> 00:12:32,949
that it enables<font color="#E5E5E5"> programmable parsing</font>

348
00:12:29,860 --> 00:12:34,630
that<font color="#E5E5E5"> you can have like new query</font>

349
00:12:32,950 --> 00:12:36,940
specific header fields<font color="#CCCCCC"> which</font><font color="#E5E5E5"> that you</font>

350
00:12:34,630 --> 00:12:39,459
can define on the fly<font color="#E5E5E5"> and you can parse</font>

351
00:12:36,940 --> 00:12:40,870
and deeper those header fields<font color="#CCCCCC"> second</font><font color="#E5E5E5"> is</font>

352
00:12:39,459 --> 00:12:42,819
like you can carry state in the<font color="#CCCCCC"> packets</font>

353
00:12:40,870 --> 00:12:45,520
<font color="#E5E5E5">and also maintain state in the network</font>

354
00:12:42,820 --> 00:12:47,740
devices we hardware itself<font color="#E5E5E5"> and third is</font>

355
00:12:45,520 --> 00:12:49,720
the<font color="#CCCCCC"> customizable hash</font><font color="#E5E5E5"> functions</font><font color="#CCCCCC"> that it</font>

356
00:12:47,740 --> 00:12:50,829
supports hash functions<font color="#E5E5E5"> over flexible</font>

357
00:12:49,720 --> 00:12:51,579
set of fields<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> define</font>

358
00:12:50,829 --> 00:12:53,859
programmatically

359
00:12:51,579 --> 00:12:56,410
and finally the flexible match action

360
00:12:53,860 --> 00:12:57,520
<font color="#E5E5E5">tables which kind of like you can define</font>

361
00:12:56,410 --> 00:13:00,339
the<font color="#CCCCCC"> order in which these match action</font>

362
00:12:57,520 --> 00:13:01,630
<font color="#E5E5E5">tables have to apply and like support my</font>

363
00:13:00,339 --> 00:13:04,390
traction tables with these programmable

364
00:13:01,630 --> 00:13:06,910
actions so

365
00:13:04,390 --> 00:13:09,069
using these kind<font color="#E5E5E5"> of hardware or targets</font>

366
00:13:06,910 --> 00:13:10,839
<font color="#CCCCCC">it is</font><font color="#E5E5E5"> kind of like now</font><font color="#CCCCCC"> straightforward</font>

367
00:13:09,070 --> 00:13:14,010
relatively straightforward for compiling

368
00:13:10,839 --> 00:13:16,480
data flow<font color="#CCCCCC"> operators</font><font color="#E5E5E5"> in the data plane</font>

369
00:13:14,010 --> 00:13:18,910
executing map filter and sample is

370
00:13:16,480 --> 00:13:20,170
<font color="#E5E5E5">relatively easy because</font><font color="#CCCCCC"> you all you</font><font color="#E5E5E5"> have</font>

371
00:13:18,910 --> 00:13:21,639
to do is like apply

372
00:13:20,170 --> 00:13:22,930
the sequence of<font color="#CCCCCC"> my section tables in</font>

373
00:13:21,639 --> 00:13:24,940
which you can<font color="#E5E5E5"> figure out like water head</font>

374
00:13:22,930 --> 00:13:27,189
<font color="#CCCCCC">of what</font><font color="#E5E5E5"> set of fields you want to apply</font>

375
00:13:24,940 --> 00:13:29,500
<font color="#CCCCCC">a map map</font><font color="#E5E5E5"> operation on or how you want</font>

376
00:13:27,190 --> 00:13:31,389
to<font color="#E5E5E5"> filter</font><font color="#CCCCCC"> in samples</font><font color="#E5E5E5"> they're distinct</font>

377
00:13:29,500 --> 00:13:33,040
introduced<font color="#CCCCCC"> are relatively</font><font color="#E5E5E5"> complex so the</font>

378
00:13:31,389 --> 00:13:35,139
<font color="#CCCCCC">way it works is when</font><font color="#E5E5E5"> the packet comes in</font>

379
00:13:33,040 --> 00:13:36,670
<font color="#E5E5E5">you basically compute the index in the</font>

380
00:13:35,139 --> 00:13:38,589
hash table for which you have to<font color="#CCCCCC"> update</font>

381
00:13:36,670 --> 00:13:40,479
you read the index<font color="#E5E5E5"> value</font><font color="#CCCCCC"> to the</font><font color="#E5E5E5"> packets</font>

382
00:13:38,589 --> 00:13:43,540
<font color="#E5E5E5">header then apply the transformations</font>

383
00:13:40,480 --> 00:13:45,279
<font color="#E5E5E5">and then update</font><font color="#CCCCCC"> these or like</font><font color="#E5E5E5"> write back</font>

384
00:13:43,540 --> 00:13:47,380
<font color="#CCCCCC">the</font><font color="#E5E5E5"> updated value to be hash table and</font>

385
00:13:45,279 --> 00:13:49,209
the packet goes on with the updated

386
00:13:47,380 --> 00:13:50,680
<font color="#CCCCCC">state and then you apply different</font>

387
00:13:49,209 --> 00:13:54,130
transformations on<font color="#CCCCCC"> the packet which has</font>

388
00:13:50,680 --> 00:13:57,069
<font color="#E5E5E5">all these state captured</font><font color="#CCCCCC"> from the hash</font>

389
00:13:54,130 --> 00:13:58,480
tables itself so in addition<font color="#CCCCCC"> to applying</font>

390
00:13:57,070 --> 00:14:00,760
<font color="#CCCCCC">just these normal hash tables we</font>

391
00:13:58,480 --> 00:14:02,410
actually also<font color="#E5E5E5"> explored the idea of using</font>

392
00:14:00,760 --> 00:14:04,870
sketches in the data<font color="#E5E5E5"> plane which is not</font>

393
00:14:02,410 --> 00:14:06,389
a new idea<font color="#CCCCCC"> but directly transforming</font>

394
00:14:04,870 --> 00:14:08,860
these<font color="#E5E5E5"> Map Reduce operations into these</font>

395
00:14:06,389 --> 00:14:11,800
sketches<font color="#CCCCCC"> that we can apply</font><font color="#E5E5E5"> in the data</font>

396
00:14:08,860 --> 00:14:14,290
plane<font color="#E5E5E5"> was very exciting and we were</font>

397
00:14:11,800 --> 00:14:16,689
<font color="#E5E5E5">actually able</font><font color="#CCCCCC"> to implement</font><font color="#E5E5E5"> these reduce</font>

398
00:14:14,290 --> 00:14:18,160
operations with<font color="#E5E5E5"> reduce with like the</font>

399
00:14:16,690 --> 00:14:20,680
function transformation function is some

400
00:14:18,160 --> 00:14:22,540
as<font color="#CCCCCC"> count min sketches and distinct</font>

401
00:14:20,680 --> 00:14:24,399
operation<font color="#E5E5E5"> as basically bloom filters and</font>

402
00:14:22,540 --> 00:14:26,439
we are also<font color="#CCCCCC"> currently exploring</font><font color="#E5E5E5"> how we</font>

403
00:14:24,399 --> 00:14:29,680
can use<font color="#E5E5E5"> hyper log-log</font><font color="#CCCCCC"> plus hyper</font><font color="#E5E5E5"> la plus</font>

404
00:14:26,440 --> 00:14:31,990
plus<font color="#E5E5E5"> sketches here there are of course</font>

405
00:14:29,680 --> 00:14:33,880
limitations in terms of<font color="#E5E5E5"> what all you can</font>

406
00:14:31,990 --> 00:14:35,529
do in the data plane so<font color="#E5E5E5"> we cannot do</font>

407
00:14:33,880 --> 00:14:38,529
complex transformation like applying

408
00:14:35,529 --> 00:14:40,300
<font color="#CCCCCC">logs on the stream of data packets here</font>

409
00:14:38,529 --> 00:14:42,070
<font color="#E5E5E5">also we cannot do reg X in the data</font>

410
00:14:40,300 --> 00:14:43,479
plane<font color="#E5E5E5"> so it's not important</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we have</font>

411
00:14:42,070 --> 00:14:45,310
to do everything<font color="#E5E5E5"> in the data plane it</font><font color="#CCCCCC"> is</font>

412
00:14:43,480 --> 00:14:46,600
important<font color="#E5E5E5"> that we can do some subset of</font>

413
00:14:45,310 --> 00:14:51,099
the<font color="#CCCCCC"> dataflow transformations or</font>

414
00:14:46,600 --> 00:14:52,300
operations in the data<font color="#E5E5E5"> plane so just to</font>

415
00:14:51,100 --> 00:14:54,279
give you<font color="#CCCCCC"> a sense of</font><font color="#E5E5E5"> like how</font><font color="#CCCCCC"> Kerry</font>

416
00:14:52,300 --> 00:14:56,019
partitioning works in action<font color="#CCCCCC"> as the</font>

417
00:14:54,279 --> 00:14:58,420
network operator expresses the queries

418
00:14:56,019 --> 00:15:01,029
to<font color="#CCCCCC"> the runtime</font><font color="#E5E5E5"> runtime basically should</font>

419
00:14:58,420 --> 00:15:03,370
decide what<font color="#CCCCCC"> data</font><font color="#E5E5E5"> flow operations have to</font>

420
00:15:01,029 --> 00:15:06,189
be<font color="#E5E5E5"> partitioned and executed in the data</font>

421
00:15:03,370 --> 00:15:08,170
<font color="#E5E5E5">plane itself</font><font color="#CCCCCC"> it compiles those data flow</font>

422
00:15:06,190 --> 00:15:10,329
operators<font color="#E5E5E5"> to the configurations with the</font>

423
00:15:08,170 --> 00:15:12,219
network<font color="#E5E5E5"> data plane or the data plane can</font>

424
00:15:10,329 --> 00:15:14,829
understand and when the packet comes in

425
00:15:12,220 --> 00:15:16,540
it first applies those transformations

426
00:15:14,829 --> 00:15:18,040
<font color="#CCCCCC">that data plane itself and then the</font>

427
00:15:16,540 --> 00:15:20,829
transform packet tuples are sent to the

428
00:15:18,040 --> 00:15:22,540
stream processor<font color="#E5E5E5"> so note</font><font color="#CCCCCC"> that like</font><font color="#E5E5E5"> if we</font>

429
00:15:20,829 --> 00:15:24,130
have these<font color="#CCCCCC"> piece are target's</font><font color="#E5E5E5"> what we</font>

430
00:15:22,540 --> 00:15:26,290
actually<font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to do is like</font><font color="#E5E5E5"> whatever</font>

431
00:15:24,130 --> 00:15:27,910
is the computed<font color="#CCCCCC"> State each packet can</font>

432
00:15:26,290 --> 00:15:30,130
carry that state as an additional header

433
00:15:27,910 --> 00:15:31,300
field to the stream processor if if the

434
00:15:30,130 --> 00:15:32,709
payload<font color="#E5E5E5"> is not required we can just</font>

435
00:15:31,300 --> 00:15:33,969
prune<font color="#CCCCCC"> that information from</font><font color="#E5E5E5"> the packet</font>

436
00:15:32,709 --> 00:15:35,170
and then that information

437
00:15:33,970 --> 00:15:38,860
you can go to the stream process for

438
00:15:35,170 --> 00:15:40,120
determined<font color="#E5E5E5"> air of the transformations so</font>

439
00:15:38,860 --> 00:15:41,920
let's talk<font color="#CCCCCC"> about the other idea which</font><font color="#E5E5E5"> is</font>

440
00:15:40,120 --> 00:15:43,899
<font color="#E5E5E5">iterative refinement</font><font color="#CCCCCC"> so the key</font>

441
00:15:41,920 --> 00:15:45,490
observation<font color="#CCCCCC"> that we made was that there</font>

442
00:15:43,899 --> 00:15:47,470
<font color="#CCCCCC">is only a small fraction</font><font color="#E5E5E5"> of traffic that</font>

443
00:15:45,490 --> 00:15:49,480
satisfies most of the monitoring queries

444
00:15:47,470 --> 00:15:51,310
<font color="#CCCCCC">just to give you a sense</font><font color="#E5E5E5"> like if you are</font>

445
00:15:49,480 --> 00:15:53,589
<font color="#CCCCCC">talking about the</font><font color="#E5E5E5"> DDoS query that we</font>

446
00:15:51,310 --> 00:15:55,329
were<font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about I observe that for a</font>

447
00:15:53,589 --> 00:15:57,250
large exchange point traffic<font color="#E5E5E5"> data and we</font>

448
00:15:55,329 --> 00:15:58,750
observe like<font color="#E5E5E5"> it's then whenever there</font><font color="#CCCCCC"> is</font>

449
00:15:57,250 --> 00:16:01,089
an attack it's usually<font color="#CCCCCC"> 1 percent</font><font color="#E5E5E5"> of the</font>

450
00:15:58,750 --> 00:16:02,439
traffic<font color="#CCCCCC"> that is satisfying</font><font color="#E5E5E5"> the query so</font>

451
00:16:01,089 --> 00:16:03,819
with<font color="#E5E5E5"> that observation we were exploring</font>

452
00:16:02,439 --> 00:16:05,379
<font color="#E5E5E5">like is there a better way</font><font color="#CCCCCC"> in which we</font>

453
00:16:03,819 --> 00:16:08,829
can make efficient use<font color="#CCCCCC"> of the available</font>

454
00:16:05,379 --> 00:16:10,240
<font color="#CCCCCC">resources</font><font color="#E5E5E5"> and so we came</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> with this</font>

455
00:16:08,829 --> 00:16:12,579
idea of<font color="#E5E5E5"> iterative refinement in which</font>

456
00:16:10,240 --> 00:16:16,779
what<font color="#E5E5E5"> we do is like we meant the</font>

457
00:16:12,579 --> 00:16:19,239
operators query to observe the traffic

458
00:16:16,779 --> 00:16:20,680
at<font color="#E5E5E5"> coarser level of granularity and when</font>

459
00:16:19,240 --> 00:16:23,529
we observe<font color="#E5E5E5"> something interesting at the</font>

460
00:16:20,680 --> 00:16:24,910
courses level then we<font color="#E5E5E5"> winnow</font><font color="#CCCCCC"> out things</font>

461
00:16:23,529 --> 00:16:26,290
that are uninteresting or that don't

462
00:16:24,910 --> 00:16:29,110
satisfy the query at the<font color="#E5E5E5"> coarser level</font>

463
00:16:26,290 --> 00:16:30,219
<font color="#E5E5E5">and iteratively zoom in on portions of</font>

464
00:16:29,110 --> 00:16:31,870
traffic<font color="#E5E5E5"> that were identified</font><font color="#CCCCCC"> is</font>

465
00:16:30,220 --> 00:16:33,730
interesting iteratively zoom in and

466
00:16:31,870 --> 00:16:36,310
figure out<font color="#E5E5E5"> like what is the portion</font><font color="#CCCCCC"> of</font>

467
00:16:33,730 --> 00:16:38,649
traffic that is satisfying the query so

468
00:16:36,310 --> 00:16:40,989
there is<font color="#E5E5E5"> of course trade-off here</font>

469
00:16:38,649 --> 00:16:43,059
because like<font color="#E5E5E5"> you are able to reduce the</font>

470
00:16:40,990 --> 00:16:43,990
<font color="#CCCCCC">amount of packets that have</font><font color="#E5E5E5"> to be or</font>

471
00:16:43,059 --> 00:16:45,339
amount<font color="#E5E5E5"> of state that</font><font color="#CCCCCC"> you have to</font>

472
00:16:43,990 --> 00:16:46,839
<font color="#CCCCCC">maintain</font><font color="#E5E5E5"> the data plane or the number of</font>

473
00:16:45,339 --> 00:16:49,629
packets<font color="#CCCCCC"> with the stream processor has to</font>

474
00:16:46,839 --> 00:16:50,709
process<font color="#E5E5E5"> but</font><font color="#CCCCCC"> at the same</font><font color="#E5E5E5"> time this comes</font>

475
00:16:49,629 --> 00:16:53,319
<font color="#E5E5E5">at</font><font color="#CCCCCC"> the cost</font><font color="#E5E5E5"> that when you're doing</font>

476
00:16:50,709 --> 00:16:54,939
iterative<font color="#E5E5E5"> refinement</font><font color="#CCCCCC"> it requires an</font>

477
00:16:53,319 --> 00:16:56,500
additional<font color="#E5E5E5"> delay that you zoom in from</font>

478
00:16:54,939 --> 00:16:58,599
<font color="#CCCCCC">pourcel level</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> PI another and final</font>

479
00:16:56,500 --> 00:17:01,750
refinement level right so there is a

480
00:16:58,600 --> 00:17:03,399
natural period of here so<font color="#E5E5E5"> just to give</font>

481
00:17:01,750 --> 00:17:05,020
you<font color="#E5E5E5"> a sense of like how iterative</font>

482
00:17:03,399 --> 00:17:06,760
refinement works in action<font color="#CCCCCC"> it's like</font>

483
00:17:05,020 --> 00:17:08,020
once the<font color="#CCCCCC"> aquarias will express once</font>

484
00:17:06,760 --> 00:17:10,119
<font color="#E5E5E5">three data plane configurations have</font>

485
00:17:08,020 --> 00:17:11,470
been updated<font color="#CCCCCC"> when the packet comes in</font>

486
00:17:10,119 --> 00:17:13,658
the packet<font color="#E5E5E5"> tuples are reporting stream</font>

487
00:17:11,470 --> 00:17:16,240
<font color="#E5E5E5">processor the output of stream process</font>

488
00:17:13,659 --> 00:17:18,309
goes back to the<font color="#E5E5E5"> runtime that updates or</font>

489
00:17:16,240 --> 00:17:20,109
that helps<font color="#CCCCCC"> runtime to make decisions</font><font color="#E5E5E5"> or</font>

490
00:17:18,309 --> 00:17:21,639
like for<font color="#E5E5E5"> the next window interval what</font>

491
00:17:20,109 --> 00:17:23,408
should<font color="#E5E5E5"> be the next</font><font color="#CCCCCC"> configuration</font><font color="#E5E5E5"> for the</font>

492
00:17:21,640 --> 00:17:26,770
data plane<font color="#E5E5E5"> and the stream processor</font>

493
00:17:23,409 --> 00:17:28,929
itself<font color="#E5E5E5"> so notice that like initially</font><font color="#CCCCCC"> I</font>

494
00:17:26,770 --> 00:17:30,429
made a comment<font color="#CCCCCC"> that the current state of</font>

495
00:17:28,929 --> 00:17:32,710
<font color="#E5E5E5">art is such that the collection is not</font>

496
00:17:30,429 --> 00:17:34,480
driven by analysis now<font color="#E5E5E5"> in this using</font>

497
00:17:32,710 --> 00:17:35,740
<font color="#E5E5E5">this idea of iterative refinement</font><font color="#CCCCCC"> the</font>

498
00:17:34,480 --> 00:17:37,059
key takeaway here is<font color="#E5E5E5"> that like</font>

499
00:17:35,740 --> 00:17:39,250
collection is actually<font color="#E5E5E5"> now driven by</font>

500
00:17:37,059 --> 00:17:40,928
<font color="#CCCCCC">analysis that the output of</font><font color="#E5E5E5"> the stream</font>

501
00:17:39,250 --> 00:17:42,610
processor out output<font color="#E5E5E5"> of your analysis</font>

502
00:17:40,929 --> 00:17:44,500
<font color="#E5E5E5">kind of like sent back as feedback to</font>

503
00:17:42,610 --> 00:17:46,899
the<font color="#E5E5E5"> runtime</font><font color="#CCCCCC"> as reconfigures</font><font color="#E5E5E5"> data</font>

504
00:17:44,500 --> 00:17:48,760
pipelines so<font color="#CCCCCC"> that like your collections</font>

505
00:17:46,899 --> 00:17:50,408
actually<font color="#E5E5E5"> like whatever you do or</font><font color="#CCCCCC"> you</font>

506
00:17:48,760 --> 00:17:53,640
find<font color="#E5E5E5"> as interesting is actually</font>

507
00:17:50,409 --> 00:17:53,640
processed<font color="#CCCCCC"> in the next window intervals</font>

508
00:17:54,000 --> 00:17:58,899
so we talked about<font color="#CCCCCC"> two ideas of query</font>

509
00:17:57,250 --> 00:18:01,149
partitioning and iterative refinement<font color="#CCCCCC"> a</font>

510
00:17:58,899 --> 00:18:02,439
force capable query execution<font color="#E5E5E5"> the key</font>

511
00:18:01,149 --> 00:18:03,879
<font color="#E5E5E5">question here is like there are</font>

512
00:18:02,440 --> 00:18:06,909
<font color="#E5E5E5">different ways</font><font color="#CCCCCC"> in which I can partition</font>

513
00:18:03,880 --> 00:18:10,630
<font color="#E5E5E5">the query and refine the query right so</font>

514
00:18:06,909 --> 00:18:12,789
if I take the examples<font color="#E5E5E5"> of the the</font>

515
00:18:10,630 --> 00:18:16,120
traffic<font color="#E5E5E5"> anomaly query that I discussed</font>

516
00:18:12,789 --> 00:18:19,179
in<font color="#CCCCCC"> discuss</font><font color="#E5E5E5"> earlier so I can partition it</font>

517
00:18:16,120 --> 00:18:20,830
portion level<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> / 8 / 16</font><font color="#CCCCCC"> or something</font>

518
00:18:19,179 --> 00:18:21,940
and there can be multiple<font color="#E5E5E5"> levels in</font>

519
00:18:20,830 --> 00:18:23,260
which I do this<font color="#E5E5E5"> iterative refinement</font>

520
00:18:21,940 --> 00:18:25,210
right so there are different choices

521
00:18:23,260 --> 00:18:27,039
<font color="#CCCCCC">that I have in</font><font color="#E5E5E5"> terms of how I want to do</font>

522
00:18:25,210 --> 00:18:28,809
iterative refinement<font color="#E5E5E5"> how I want how I</font>

523
00:18:27,039 --> 00:18:30,820
can do query partitioning<font color="#E5E5E5"> so the</font>

524
00:18:28,809 --> 00:18:32,350
question is<font color="#CCCCCC"> like how</font><font color="#E5E5E5"> do you select what</font>

525
00:18:30,820 --> 00:18:36,070
is<font color="#E5E5E5"> the best plan for a</font><font color="#CCCCCC"> particular way</font>

526
00:18:32,350 --> 00:18:37,840
right<font color="#E5E5E5"> so let's take</font><font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> to</font>

527
00:18:36,070 --> 00:18:40,510
get a sense of<font color="#CCCCCC"> like how query planning</font>

528
00:18:37,840 --> 00:18:43,570
<font color="#E5E5E5">works so going back to the traffic and</font>

529
00:18:40,510 --> 00:18:46,210
<font color="#CCCCCC">omlie query</font><font color="#E5E5E5"> just for reference this</font><font color="#CCCCCC"> is</font>

530
00:18:43,570 --> 00:18:47,770
<font color="#E5E5E5">the query</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we talked about that you</font>

531
00:18:46,210 --> 00:18:49,809
apply a bunch<font color="#E5E5E5"> of MapReduce operations</font>

532
00:18:47,770 --> 00:18:52,090
from<font color="#E5E5E5"> the packet stream</font><font color="#CCCCCC"> we take a very</font>

533
00:18:49,809 --> 00:18:54,370
simple case<font color="#E5E5E5"> for illustration here that</font>

534
00:18:52,090 --> 00:18:56,110
the<font color="#CCCCCC"> partitioning plants are</font><font color="#E5E5E5"> just binary</font>

535
00:18:54,370 --> 00:18:57,520
<font color="#CCCCCC">that is either you execute</font><font color="#E5E5E5"> all these</font>

536
00:18:56,110 --> 00:18:59,139
<font color="#E5E5E5">operations on the data plane or you</font>

537
00:18:57,520 --> 00:19:01,030
<font color="#CCCCCC">execute all these operations on stream</font>

538
00:18:59,140 --> 00:19:02,860
processors<font color="#E5E5E5"> right and the define</font><font color="#CCCCCC"> meant</font>

539
00:19:01,030 --> 00:19:04,030
plans are says that the<font color="#E5E5E5"> refinement key</font>

540
00:19:02,860 --> 00:19:05,620
the key one which you are applying<font color="#CCCCCC"> this</font>

541
00:19:04,030 --> 00:19:07,809
<font color="#E5E5E5">iterative refinement is the destination</font>

542
00:19:05,620 --> 00:19:10,559
IP and the refinement levels that<font color="#E5E5E5"> I want</font>

543
00:19:07,809 --> 00:19:14,440
to consider<font color="#CCCCCC"> is like / 8 and / 32 right</font>

544
00:19:10,559 --> 00:19:18,340
so let's see how the query planning

545
00:19:14,440 --> 00:19:19,780
works so we came we came up<font color="#E5E5E5"> with this</font>

546
00:19:18,340 --> 00:19:22,629
<font color="#E5E5E5">abstraction of like expressing these</font>

547
00:19:19,780 --> 00:19:24,730
different plans as<font color="#E5E5E5"> query plan graph and</font>

548
00:19:22,630 --> 00:19:28,059
the source<font color="#E5E5E5"> is</font><font color="#CCCCCC"> basically like all traffic</font>

549
00:19:24,730 --> 00:19:30,490
<font color="#E5E5E5">and there are two ways</font><font color="#CCCCCC"> in which</font><font color="#E5E5E5"> I can</font>

550
00:19:28,059 --> 00:19:32,139
run this<font color="#E5E5E5"> if I am running it as the</font><font color="#CCCCCC"> IT /</font>

551
00:19:30,490 --> 00:19:35,020
32 or the finest level<font color="#E5E5E5"> of granularity</font>

552
00:19:32,140 --> 00:19:36,640
itself that I execute<font color="#E5E5E5"> either complete</font>

553
00:19:35,020 --> 00:19:37,840
this query completely in the stream

554
00:19:36,640 --> 00:19:41,710
processor or completely<font color="#E5E5E5"> in the data</font>

555
00:19:37,840 --> 00:19:43,059
plane<font color="#E5E5E5"> right and then like that's that's</font>

556
00:19:41,710 --> 00:19:44,679
the finest level granularity so<font color="#E5E5E5"> there is</font>

557
00:19:43,059 --> 00:19:47,350
<font color="#E5E5E5">nothing else to do here</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> the other</font>

558
00:19:44,679 --> 00:19:50,470
option is<font color="#E5E5E5"> that I can</font><font color="#CCCCCC"> actually execute</font>

559
00:19:47,350 --> 00:19:52,178
this query 8/8 first<font color="#E5E5E5"> again executing</font>

560
00:19:50,470 --> 00:19:53,620
this query 8/8 there are two<font color="#CCCCCC"> options</font>

561
00:19:52,179 --> 00:19:55,179
that<font color="#E5E5E5"> I do completely in the data plane</font>

562
00:19:53,620 --> 00:19:59,590
<font color="#E5E5E5">or I do completely in the stream</font>

563
00:19:55,179 --> 00:20:00,429
processor and then I move to<font color="#E5E5E5"> / 32 that</font>

564
00:19:59,590 --> 00:20:02,320
<font color="#CCCCCC">is the finest</font>

565
00:20:00,429 --> 00:20:04,179
<font color="#CCCCCC">of</font><font color="#E5E5E5"> granularity and again</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> there I</font>

566
00:20:02,320 --> 00:20:06,220
have two choices<font color="#CCCCCC"> so if you notice here</font>

567
00:20:04,179 --> 00:20:08,200
<font color="#E5E5E5">there are like six different ways in</font>

568
00:20:06,220 --> 00:20:10,179
which<font color="#CCCCCC"> you can execute the query so how</font>

569
00:20:08,200 --> 00:20:12,909
do you<font color="#CCCCCC"> select what is</font><font color="#E5E5E5"> the best plan so</font>

570
00:20:10,179 --> 00:20:16,539
what we rely on right currently is that

571
00:20:12,909 --> 00:20:18,960
<font color="#E5E5E5">we use training data</font><font color="#CCCCCC"> to enumerate the</font>

572
00:20:16,539 --> 00:20:21,610
weights<font color="#E5E5E5"> here right</font><font color="#CCCCCC"> so the weights here a</font>

573
00:20:18,960 --> 00:20:23,110
normalized<font color="#CCCCCC"> value of the amount</font><font color="#E5E5E5"> of</font>

574
00:20:21,610 --> 00:20:24,789
package setup<font color="#E5E5E5"> process</font><font color="#CCCCCC"> the number of</font>

575
00:20:23,110 --> 00:20:26,709
packet data processed by the stream

576
00:20:24,789 --> 00:20:28,240
processor<font color="#E5E5E5"> or the amount of state that is</font>

577
00:20:26,710 --> 00:20:29,470
required in the data plane<font color="#E5E5E5"> so that's a</font>

578
00:20:28,240 --> 00:20:31,539
normalized collection of these two

579
00:20:29,470 --> 00:20:33,610
different cost<font color="#CCCCCC"> metrics and</font><font color="#E5E5E5"> you can this</font>

580
00:20:31,539 --> 00:20:35,559
is<font color="#E5E5E5"> curable so you can whatever is more</font>

581
00:20:33,610 --> 00:20:37,418
important to you if the resources are

582
00:20:35,559 --> 00:20:39,009
data plane are more scarce then you can

583
00:20:37,419 --> 00:20:42,190
tune the normalized parameters

584
00:20:39,009 --> 00:20:43,600
accordingly<font color="#E5E5E5"> but that weighted cost</font><font color="#CCCCCC"> you'd</font>

585
00:20:42,190 --> 00:20:45,669
like the sum of<font color="#E5E5E5"> weighted cost should be</font>

586
00:20:43,600 --> 00:20:48,519
<font color="#E5E5E5">minimum and that's how we select the</font>

587
00:20:45,669 --> 00:20:50,110
query<font color="#E5E5E5"> plan here so in this example I am</font>

588
00:20:48,519 --> 00:20:52,090
selecting<font color="#CCCCCC"> slash it and then</font><font color="#E5E5E5"> going to</font>

589
00:20:50,110 --> 00:20:53,740
<font color="#E5E5E5">slash</font><font color="#CCCCCC"> 32 but notice that when I am using</font>

590
00:20:52,090 --> 00:20:56,110
slash<font color="#CCCCCC"> AIDS and I'm executing</font><font color="#E5E5E5"> everything</font>

591
00:20:53,740 --> 00:20:57,279
in data plane and 4/32<font color="#E5E5E5"> after applying</font>

592
00:20:56,110 --> 00:20:59,168
all<font color="#E5E5E5"> those</font><font color="#CCCCCC"> filters it kind of makes sense</font>

593
00:20:57,279 --> 00:21:03,039
<font color="#E5E5E5">to execute the query in the stream</font>

594
00:20:59,169 --> 00:21:05,619
processor<font color="#CCCCCC"> itself so talking about</font><font color="#E5E5E5"> the</font>

595
00:21:03,039 --> 00:21:08,289
implementation<font color="#CCCCCC"> and</font><font color="#E5E5E5"> or the architecture</font>

596
00:21:05,619 --> 00:21:10,389
so<font color="#CCCCCC"> sonata has three key components</font><font color="#E5E5E5"> one</font>

597
00:21:08,289 --> 00:21:11,710
is<font color="#E5E5E5"> the application</font><font color="#CCCCCC"> interface where the</font>

598
00:21:10,389 --> 00:21:14,350
network operators are expressing the

599
00:21:11,710 --> 00:21:15,879
queries without<font color="#E5E5E5"> getting without worrying</font>

600
00:21:14,350 --> 00:21:17,619
about like where<font color="#E5E5E5"> and how those queries</font>

601
00:21:15,879 --> 00:21:19,779
are going to get executed<font color="#E5E5E5"> then there is</font>

602
00:21:17,619 --> 00:21:21,970
this<font color="#E5E5E5"> runtime system of the brain</font><font color="#CCCCCC"> of this</font>

603
00:21:19,779 --> 00:21:23,950
system which basically<font color="#E5E5E5"> takes some</font>

604
00:21:21,970 --> 00:21:26,499
training<font color="#CCCCCC"> data</font><font color="#E5E5E5"> takes the input</font><font color="#CCCCCC"> from the</font>

605
00:21:23,950 --> 00:21:28,409
operators<font color="#E5E5E5"> and then enumerates different</font>

606
00:21:26,499 --> 00:21:30,519
query plans<font color="#E5E5E5"> and then apply those</font>

607
00:21:28,409 --> 00:21:32,019
<font color="#E5E5E5">Dijkstra algorithm the query plan graph</font>

608
00:21:30,519 --> 00:21:34,690
to<font color="#E5E5E5"> figure out like what is the best</font>

609
00:21:32,019 --> 00:21:36,700
query plan for this query and then the

610
00:21:34,690 --> 00:21:38,259
final finally we have these data<font color="#CCCCCC"> plan</font><font color="#E5E5E5"> of</font>

611
00:21:36,700 --> 00:21:40,090
<font color="#E5E5E5">streaming drivers so these drivers</font>

612
00:21:38,259 --> 00:21:41,529
compiled the input queries which<font color="#E5E5E5"> are</font>

613
00:21:40,090 --> 00:21:44,049
expressed to the which are<font color="#E5E5E5"> sent to them</font>

614
00:21:41,529 --> 00:21:46,629
as like<font color="#CCCCCC"> dataflow queries into the target</font>

615
00:21:44,049 --> 00:21:48,309
specific configuration so if I have a

616
00:21:46,629 --> 00:21:50,080
piece<font color="#CCCCCC"> a target then they will translate</font>

617
00:21:48,309 --> 00:21:51,490
<font color="#E5E5E5">that to a p4 program if I have an open</font>

618
00:21:50,080 --> 00:21:54,039
flow target and it will<font color="#E5E5E5"> translate</font><font color="#CCCCCC"> to a</font>

619
00:21:51,490 --> 00:21:55,179
bunch of match action<font color="#E5E5E5"> rules similarly</font>

620
00:21:54,039 --> 00:21:57,009
the streaming drivers currently we are

621
00:21:55,179 --> 00:21:58,659
<font color="#E5E5E5">using a patch</font><font color="#CCCCCC"> as part but like that can</font>

622
00:21:57,009 --> 00:22:01,840
be<font color="#E5E5E5"> replaced by something else that that</font>

623
00:21:58,659 --> 00:22:04,240
is<font color="#CCCCCC"> well-suited</font><font color="#E5E5E5"> for your application so</font>

624
00:22:01,840 --> 00:22:05,918
<font color="#E5E5E5">let's get more visual about like how the</font>

625
00:22:04,240 --> 00:22:08,259
implementation<font color="#E5E5E5"> or how the system works</font>

626
00:22:05,919 --> 00:22:10,720
<font color="#CCCCCC">so the first state the</font><font color="#E5E5E5"> network operators</font>

627
00:22:08,259 --> 00:22:12,909
express their telemetry<font color="#E5E5E5"> task as the</font>

628
00:22:10,720 --> 00:22:14,260
<font color="#CCCCCC">Sinatra queries using the</font><font color="#E5E5E5"> API</font><font color="#CCCCCC"> that we</font>

629
00:22:12,909 --> 00:22:16,090
expose

630
00:22:14,260 --> 00:22:18,280
then these queries are sent to the

631
00:22:16,090 --> 00:22:21,520
<font color="#CCCCCC">runtime</font><font color="#E5E5E5"> which basically takes into</font>

632
00:22:18,280 --> 00:22:23,830
consideration<font color="#CCCCCC"> the</font><font color="#E5E5E5"> different queries</font>

633
00:22:21,520 --> 00:22:25,270
<font color="#E5E5E5">together and also takes</font><font color="#CCCCCC"> training data</font>

634
00:22:23,830 --> 00:22:26,919
into consideration<font color="#E5E5E5"> to figure out like</font>

635
00:22:25,270 --> 00:22:28,510
what's the best<font color="#E5E5E5"> plan for executing the</font>

636
00:22:26,920 --> 00:22:30,970
<font color="#E5E5E5">query once the plan for each query is</font>

637
00:22:28,510 --> 00:22:32,890
decided<font color="#E5E5E5"> then</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> sends these</font><font color="#CCCCCC"> dataflow</font>

638
00:22:30,970 --> 00:22:34,390
queries which take into<font color="#E5E5E5"> consideration</font>

639
00:22:32,890 --> 00:22:36,070
the partitioning<font color="#E5E5E5"> and refinement to data</font>

640
00:22:34,390 --> 00:22:38,020
plane and<font color="#CCCCCC"> the streaming driver</font><font color="#E5E5E5"> so that's</font>

641
00:22:36,070 --> 00:22:39,850
query partitioning<font color="#E5E5E5"> for you and then</font>

642
00:22:38,020 --> 00:22:42,730
<font color="#E5E5E5">these data plane drivers send the</font>

643
00:22:39,850 --> 00:22:44,379
configuration to the data<font color="#E5E5E5"> plane</font><font color="#CCCCCC"> and this</font>

644
00:22:42,730 --> 00:22:47,260
stream processing so when the packet

645
00:22:44,380 --> 00:22:48,760
comes in<font color="#E5E5E5"> like a bunch of data flow</font>

646
00:22:47,260 --> 00:22:51,100
transformations MapReduce operations

647
00:22:48,760 --> 00:22:53,650
<font color="#E5E5E5">were executed metadata plane itself and</font>

648
00:22:51,100 --> 00:22:56,800
then the normal packet<font color="#E5E5E5"> goes out so we</font>

649
00:22:53,650 --> 00:22:59,200
only focus on<font color="#E5E5E5"> mirroring out as less</font>

650
00:22:56,800 --> 00:23:00,220
possible<font color="#E5E5E5"> packets here and on those</font>

651
00:22:59,200 --> 00:23:02,050
mirrored packet we have these

652
00:23:00,220 --> 00:23:03,520
transformations<font color="#CCCCCC"> supplied and</font><font color="#E5E5E5"> the traffic</font>

653
00:23:02,050 --> 00:23:05,770
or<font color="#CCCCCC"> the packets</font><font color="#E5E5E5"> going to the stream</font>

654
00:23:03,520 --> 00:23:07,510
processor have a minimal<font color="#CCCCCC"> information</font>

655
00:23:05,770 --> 00:23:10,540
that is required<font color="#E5E5E5"> at the stream process</font>

656
00:23:07,510 --> 00:23:12,400
to complete<font color="#E5E5E5"> the query so the output of</font>

657
00:23:10,540 --> 00:23:14,920
stream processor goes back to the

658
00:23:12,400 --> 00:23:17,200
<font color="#CCCCCC">runtime here with the query ID specified</font>

659
00:23:14,920 --> 00:23:19,900
so that<font color="#CCCCCC"> Levantine knows which</font><font color="#E5E5E5"> ways</font>

660
00:23:17,200 --> 00:23:22,030
output<font color="#CCCCCC"> of</font><font color="#E5E5E5"> this answer</font><font color="#CCCCCC"> and then runtime</font>

661
00:23:19,900 --> 00:23:25,210
again updates the data plane driver and

662
00:23:22,030 --> 00:23:26,530
updates<font color="#E5E5E5"> of streaming driver so the key</font>

663
00:23:25,210 --> 00:23:28,540
takeaway<font color="#CCCCCC"> or the key message that I was</font>

664
00:23:26,530 --> 00:23:30,580
trying<font color="#E5E5E5"> to make was like correctly the</font>

665
00:23:28,540 --> 00:23:33,280
collection is not driven by<font color="#CCCCCC"> analysis but</font>

666
00:23:30,580 --> 00:23:34,840
like the way we<font color="#CCCCCC"> were building</font><font color="#E5E5E5"> the system</font>

667
00:23:33,280 --> 00:23:37,210
is like we<font color="#E5E5E5"> want to make</font><font color="#CCCCCC"> it easier to</font>

668
00:23:34,840 --> 00:23:38,290
<font color="#E5E5E5">express and scale but at same time focus</font>

669
00:23:37,210 --> 00:23:42,130
<font color="#E5E5E5">on this key concept that collection</font>

670
00:23:38,290 --> 00:23:44,680
<font color="#E5E5E5">should be driven</font><font color="#CCCCCC"> from analysis so I'll</font>

671
00:23:42,130 --> 00:23:47,320
quickly talk about<font color="#CCCCCC"> the evaluation of</font>

672
00:23:44,680 --> 00:23:49,240
<font color="#E5E5E5">this work just</font><font color="#CCCCCC"> to get a sense of</font><font color="#E5E5E5"> like</font>

673
00:23:47,320 --> 00:23:51,159
this is not<font color="#E5E5E5"> just fluff idea we actually</font>

674
00:23:49,240 --> 00:23:53,890
<font color="#E5E5E5">implemented and tested the</font><font color="#CCCCCC"> idea over</font>

675
00:23:51,160 --> 00:23:56,410
<font color="#E5E5E5">real world places so we use a larger XP</font>

676
00:23:53,890 --> 00:23:59,020
<font color="#CCCCCC">network to hours of long</font><font color="#E5E5E5"> IP</font><font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> races</font>

677
00:23:56,410 --> 00:24:00,730
<font color="#E5E5E5">and we selected queries which were like</font>

678
00:23:59,020 --> 00:24:02,860
header specific so like because the

679
00:24:00,730 --> 00:24:04,720
<font color="#E5E5E5">traffic or the data which we had was IP</font>

680
00:24:02,860 --> 00:24:06,610
fixed data so we couldn't apply queries

681
00:24:04,720 --> 00:24:08,380
that required payload processing<font color="#E5E5E5"> and we</font>

682
00:24:06,610 --> 00:24:10,360
<font color="#CCCCCC">compared it</font><font color="#E5E5E5"> against three different</font>

683
00:24:08,380 --> 00:24:11,860
approaches<font color="#E5E5E5"> so the first approaches in</font>

684
00:24:10,360 --> 00:24:14,169
<font color="#CCCCCC">which we do query partitioning but we</font>

685
00:24:11,860 --> 00:24:15,669
only do<font color="#CCCCCC"> filter</font><font color="#E5E5E5"> and sample</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the data</font>

686
00:24:14,170 --> 00:24:17,470
plane<font color="#E5E5E5"> because it's the open flow target</font>

687
00:24:15,670 --> 00:24:18,940
<font color="#CCCCCC">the second is</font><font color="#E5E5E5"> like we do for a</font>

688
00:24:17,470 --> 00:24:20,050
partitioning with the<font color="#CCCCCC"> PISA</font><font color="#E5E5E5"> target itself</font>

689
00:24:18,940 --> 00:24:21,820
<font color="#E5E5E5">but we don't do any</font><font color="#CCCCCC"> iterative refinement</font>

690
00:24:20,050 --> 00:24:23,020
<font color="#E5E5E5">and third is like we do iterative</font>

691
00:24:21,820 --> 00:24:26,580
refinement but<font color="#E5E5E5"> it's like fixed and</font>

692
00:24:23,020 --> 00:24:27,720
<font color="#CCCCCC">statics so</font>

693
00:24:26,580 --> 00:24:29,340
this graph<font color="#E5E5E5"> basically kind of like</font>

694
00:24:27,720 --> 00:24:31,200
demonstrates a<font color="#CCCCCC"> very benefit of query</font>

695
00:24:29,340 --> 00:24:33,209
partitioning<font color="#CCCCCC"> we have these three</font>

696
00:24:31,200 --> 00:24:34,710
<font color="#CCCCCC">different applications results shown</font>

697
00:24:33,210 --> 00:24:37,710
independently and then all<font color="#CCCCCC"> of them</font>

698
00:24:34,710 --> 00:24:38,909
<font color="#E5E5E5">running together the system and the</font><font color="#CCCCCC"> y</font>

699
00:24:37,710 --> 00:24:40,470
<font color="#CCCCCC">axis is basically the</font><font color="#E5E5E5"> number of</font><font color="#CCCCCC"> tuples</font>

700
00:24:38,909 --> 00:24:42,029
<font color="#E5E5E5">that</font><font color="#CCCCCC"> are processed</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> the stream</font>

701
00:24:40,470 --> 00:24:45,059
<font color="#E5E5E5">processor</font><font color="#CCCCCC"> so as you can</font><font color="#E5E5E5"> see like</font>

702
00:24:42,029 --> 00:24:47,130
compared to if you just<font color="#CCCCCC"> two samples and</font>

703
00:24:45,059 --> 00:24:49,500
filter at the<font color="#E5E5E5"> data plane</font><font color="#CCCCCC"> compared to</font>

704
00:24:47,130 --> 00:24:51,179
<font color="#CCCCCC">that if you</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to do MapReduce</font>

705
00:24:49,500 --> 00:24:52,590
operations within<font color="#CCCCCC"> the</font><font color="#E5E5E5"> data plane itself</font>

706
00:24:51,179 --> 00:24:54,090
<font color="#CCCCCC">so we are able to reduce</font><font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of</font>

707
00:24:52,590 --> 00:24:56,639
packets process<font color="#CCCCCC"> for a stream processor</font>

708
00:24:54,090 --> 00:24:57,870
and key take away is<font color="#E5E5E5"> like executing</font>

709
00:24:56,640 --> 00:24:59,340
stateful operations the data plane

710
00:24:57,870 --> 00:25:02,070
reduces<font color="#CCCCCC"> workload on the stream</font>

711
00:24:59,340 --> 00:25:03,750
<font color="#CCCCCC">processors</font><font color="#E5E5E5"> the second is the benefit of</font>

712
00:25:02,070 --> 00:25:05,158
<font color="#E5E5E5">iterative refinement that we compare it</font>

713
00:25:03,750 --> 00:25:07,409
against<font color="#E5E5E5"> the solutions in which you don't</font>

714
00:25:05,159 --> 00:25:09,570
either<font color="#CCCCCC"> you don't do it a refinement</font><font color="#E5E5E5"> or</font>

715
00:25:07,409 --> 00:25:11,279
you<font color="#E5E5E5"> don't do any kind of learning and</font>

716
00:25:09,570 --> 00:25:13,678
you<font color="#E5E5E5"> just have a static way of refining</font>

717
00:25:11,279 --> 00:25:15,990
the query and we show like the in terms

718
00:25:13,679 --> 00:25:18,269
of amount of<font color="#E5E5E5"> state that</font><font color="#CCCCCC"> is required at</font>

719
00:25:15,990 --> 00:25:19,710
the data plane and what we are<font color="#E5E5E5"> able to</font>

720
00:25:18,269 --> 00:25:21,360
<font color="#E5E5E5">show is like if</font><font color="#CCCCCC"> you do iterative</font>

721
00:25:19,710 --> 00:25:25,470
refinement it reduces the state required

722
00:25:21,360 --> 00:25:26,879
by the data<font color="#E5E5E5"> plane targets in so the</font>

723
00:25:25,470 --> 00:25:29,100
other result is about the benefit of

724
00:25:26,880 --> 00:25:30,570
query planning just<font color="#CCCCCC"> to like this</font><font color="#E5E5E5"> this is</font>

725
00:25:29,100 --> 00:25:33,449
<font color="#E5E5E5">very colorful graph so just to give you</font>

726
00:25:30,570 --> 00:25:36,389
<font color="#CCCCCC">a sense of read each color in this graph</font>

727
00:25:33,450 --> 00:25:39,029
as a different query plan right and the

728
00:25:36,389 --> 00:25:40,889
constraints here is like you<font color="#CCCCCC"> have the</font>

729
00:25:39,029 --> 00:25:42,240
<font color="#E5E5E5">maximum state you can specify like this</font>

730
00:25:40,889 --> 00:25:44,428
is the maximum state I can<font color="#E5E5E5"> support in</font>

731
00:25:42,240 --> 00:25:45,929
the network in my data plane and you can

732
00:25:44,429 --> 00:25:47,429
also specify<font color="#E5E5E5"> this is the maximum packet</font>

733
00:25:45,929 --> 00:25:48,960
second process and given those

734
00:25:47,429 --> 00:25:50,220
<font color="#E5E5E5">constraints the</font><font color="#CCCCCC"> sanata can basically</font>

735
00:25:48,960 --> 00:25:52,169
figure<font color="#E5E5E5"> out like what's the best query</font>

736
00:25:50,220 --> 00:25:54,299
plan for<font color="#CCCCCC"> exit for a particular</font>

737
00:25:52,169 --> 00:25:55,980
application<font color="#CCCCCC"> so compared to all other</font>

738
00:25:54,299 --> 00:25:58,230
approaches what you need to like the key

739
00:25:55,980 --> 00:25:59,639
takeaway here is<font color="#E5E5E5"> like it can figure out</font>

740
00:25:58,230 --> 00:26:02,970
different<font color="#E5E5E5"> query plans under different</font>

741
00:25:59,639 --> 00:26:04,500
<font color="#E5E5E5">constraints and effectively make best</font>

742
00:26:02,970 --> 00:26:06,090
use of available<font color="#E5E5E5"> resources so once you</font>

743
00:26:04,500 --> 00:26:07,740
specify the constraints in<font color="#CCCCCC"> terms of what</font>

744
00:26:06,090 --> 00:26:09,240
you can<font color="#E5E5E5"> support in the network so</font><font color="#CCCCCC"> not I</font>

745
00:26:07,740 --> 00:26:12,360
can come<font color="#CCCCCC"> up with a better</font><font color="#E5E5E5"> query plan for</font>

746
00:26:09,240 --> 00:26:14,880
each<font color="#E5E5E5"> of those constraints so getting</font>

747
00:26:12,360 --> 00:26:16,559
<font color="#E5E5E5">back</font><font color="#CCCCCC"> to this the quest here is like</font><font color="#E5E5E5"> we</font>

748
00:26:14,880 --> 00:26:18,659
want<font color="#CCCCCC"> to change how this status quo works</font>

749
00:26:16,559 --> 00:26:20,370
and we talked<font color="#E5E5E5"> about the explicit bility</font>

750
00:26:18,659 --> 00:26:22,049
with the programming abstraction with

751
00:26:20,370 --> 00:26:23,489
these two key ideas<font color="#CCCCCC"> of partitioning and</font>

752
00:26:22,049 --> 00:26:25,350
iterative<font color="#E5E5E5"> refinement we are now able</font><font color="#CCCCCC"> to</font>

753
00:26:23,490 --> 00:26:27,360
answer queries<font color="#E5E5E5"> hundreds of queries in</font>

754
00:26:25,350 --> 00:26:29,219
real time for traffic<font color="#E5E5E5"> volume as high as</font>

755
00:26:27,360 --> 00:26:30,750
few<font color="#E5E5E5"> EVPs</font><font color="#CCCCCC"> it's based on some</font><font color="#E5E5E5"> of the</font>

756
00:26:29,220 --> 00:26:32,010
<font color="#CCCCCC">evaluations that</font><font color="#E5E5E5"> we have done and it</font>

757
00:26:30,750 --> 00:26:33,480
kind of<font color="#E5E5E5"> like strikes a balance between</font>

758
00:26:32,010 --> 00:26:35,250
the available resources so the two

759
00:26:33,480 --> 00:26:36,480
<font color="#CCCCCC">resources</font><font color="#E5E5E5"> that you have</font><font color="#CCCCCC"> is the amount</font><font color="#E5E5E5"> of</font>

760
00:26:35,250 --> 00:26:38,070
<font color="#E5E5E5">state you can maintain the data plane</font>

761
00:26:36,480 --> 00:26:39,929
<font color="#E5E5E5">compared to the number of packets you</font>

762
00:26:38,070 --> 00:26:41,908
can<font color="#E5E5E5"> process at the stream processors and</font>

763
00:26:39,929 --> 00:26:43,200
the query planning aspect of<font color="#CCCCCC"> sonata</font>

764
00:26:41,909 --> 00:26:44,909
basically comes up with<font color="#E5E5E5"> a plan which</font>

765
00:26:43,200 --> 00:26:47,730
makes or which<font color="#CCCCCC"> strike</font><font color="#E5E5E5"> the right balance</font>

766
00:26:44,909 --> 00:26:49,649
between<font color="#E5E5E5"> the</font><font color="#CCCCCC"> two resources so the</font>

767
00:26:47,730 --> 00:26:53,159
solution<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not expressible</font><font color="#E5E5E5"> and scalable</font>

768
00:26:49,649 --> 00:26:55,199
so summarize my talk<font color="#E5E5E5"> saying that</font><font color="#CCCCCC"> Sonata</font>

769
00:26:53,159 --> 00:26:57,389
makes it easier to both<font color="#E5E5E5"> Express and</font>

770
00:26:55,200 --> 00:27:00,059
scale<font color="#CCCCCC"> Network telemetry tasks and the</font>

771
00:26:57,389 --> 00:27:02,070
three key ideas<font color="#CCCCCC"> around which sonnet</font><font color="#E5E5E5"> is</font>

772
00:27:00,059 --> 00:27:03,389
pivoted is uniform programming

773
00:27:02,070 --> 00:27:05,039
abstraction which makes it easier for

774
00:27:03,389 --> 00:27:06,959
network operators<font color="#CCCCCC"> to express their</font>

775
00:27:05,039 --> 00:27:08,669
queries and then we use two techniques

776
00:27:06,960 --> 00:27:10,529
<font color="#CCCCCC">such as query partitioning and iterative</font>

777
00:27:08,669 --> 00:27:12,539
refinement to scale<font color="#E5E5E5"> how this query</font>

778
00:27:10,529 --> 00:27:14,460
execution was so we actually<font color="#E5E5E5"> have a</font>

779
00:27:12,539 --> 00:27:16,019
running code<font color="#E5E5E5"> feel free to go to our</font>

780
00:27:14,460 --> 00:27:18,090
github repo there are a<font color="#CCCCCC"> bunch of</font>

781
00:27:16,019 --> 00:27:21,240
<font color="#CCCCCC">tutorials and</font><font color="#E5E5E5"> demos that we have added</font>

782
00:27:18,090 --> 00:27:23,850
there<font color="#CCCCCC"> like the name of this</font><font color="#E5E5E5"> website</font>

783
00:27:21,240 --> 00:27:27,240
<font color="#E5E5E5">should be simpler that's how we</font><font color="#CCCCCC"> envision</font>

784
00:27:23,850 --> 00:27:28,559
<font color="#E5E5E5">and we got a more snazzy URL here if you</font>

785
00:27:27,240 --> 00:27:30,779
go to the<font color="#CCCCCC"> web site you will actually get</font>

786
00:27:28,559 --> 00:27:33,210
to see a demo<font color="#CCCCCC"> that I planned for</font><font color="#E5E5E5"> today</font>

787
00:27:30,779 --> 00:27:35,249
<font color="#CCCCCC">it did</font><font color="#E5E5E5"> work out logistically but like</font>

788
00:27:33,210 --> 00:27:37,139
feel<font color="#CCCCCC"> free to go to that website and</font>

789
00:27:35,249 --> 00:27:40,110
<font color="#E5E5E5">check out the</font><font color="#CCCCCC"> demo that</font><font color="#E5E5E5"> we have there</font>

790
00:27:37,139 --> 00:27:41,820
<font color="#E5E5E5">you will also find a link</font><font color="#CCCCCC"> to the to add</font>

791
00:27:40,110 --> 00:27:43,199
more detailed paper which I where I talk

792
00:27:41,820 --> 00:27:46,559
<font color="#CCCCCC">about</font><font color="#E5E5E5"> all the</font><font color="#CCCCCC"> details about</font><font color="#E5E5E5"> how we</font>

793
00:27:43,200 --> 00:27:47,999
execute and evaluate the<font color="#CCCCCC"> system so with</font>

794
00:27:46,559 --> 00:27:50,960
that I'll end the talk I'll take

795
00:27:47,999 --> 00:27:50,960
<font color="#E5E5E5">questions now</font><font color="#CCCCCC"> thank</font><font color="#E5E5E5"> you</font>

796
00:27:56,690 --> 00:28:01,230
<font color="#CCCCCC">i'm matthew tachyon whoo very good talk</font>

797
00:27:59,460 --> 00:28:03,240
<font color="#E5E5E5">I noticed in there you're</font><font color="#CCCCCC"> talking about</font>

798
00:28:01,230 --> 00:28:05,340
collecting queries into<font color="#E5E5E5"> your</font><font color="#CCCCCC"> runtime</font>

799
00:28:03,240 --> 00:28:07,799
then passing them down to the data plane

800
00:28:05,340 --> 00:28:10,470
and making changes in the data<font color="#CCCCCC"> plane as</font>

801
00:28:07,799 --> 00:28:12,899
far as how the packets are processed

802
00:28:10,470 --> 00:28:14,159
through if you've got<font color="#E5E5E5"> different queries</font>

803
00:28:12,899 --> 00:28:16,949
that<font color="#CCCCCC"> have potentially conflicting</font>

804
00:28:14,159 --> 00:28:19,320
requirements on the data<font color="#E5E5E5"> plane does the</font>

805
00:28:16,950 --> 00:28:20,610
runtime deconflict those ahead of time

806
00:28:19,320 --> 00:28:22,439
or do you potentially push down

807
00:28:20,610 --> 00:28:24,959
<font color="#CCCCCC">instructions</font><font color="#E5E5E5"> in the data plane that may</font>

808
00:28:22,440 --> 00:28:27,299
be trying<font color="#E5E5E5"> to do conflicting operations</font>

809
00:28:24,960 --> 00:28:29,039
on the packets so I think<font color="#E5E5E5"> like at this</font>

810
00:28:27,299 --> 00:28:31,499
<font color="#E5E5E5">point of time we don't solve the</font>

811
00:28:29,039 --> 00:28:33,240
conflicting<font color="#E5E5E5"> problem right now</font><font color="#CCCCCC"> but that</font>

812
00:28:31,499 --> 00:28:36,029
<font color="#CCCCCC">is definitely a possibility</font><font color="#E5E5E5"> so what we</font>

813
00:28:33,240 --> 00:28:38,580
<font color="#E5E5E5">like correctly do is that or what we did</font>

814
00:28:36,029 --> 00:28:40,019
was like we enumerated<font color="#CCCCCC"> 1015 different</font>

815
00:28:38,580 --> 00:28:41,519
applications that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can focus on</font><font color="#E5E5E5"> and</font>

816
00:28:40,019 --> 00:28:42,690
<font color="#E5E5E5">identify like if they're running</font>

817
00:28:41,519 --> 00:28:44,730
independently<font color="#E5E5E5"> like what is the</font>

818
00:28:42,690 --> 00:28:46,200
requirement terms of how<font color="#E5E5E5"> many updates</font>

819
00:28:44,730 --> 00:28:47,429
have to be made and all those things<font color="#E5E5E5"> but</font>

820
00:28:46,200 --> 00:28:48,450
like conflict<font color="#E5E5E5"> is definitely a problem</font>

821
00:28:47,429 --> 00:28:50,279
<font color="#E5E5E5">that we are not</font><font color="#CCCCCC"> sure yet</font>

822
00:28:48,450 --> 00:28:51,299
so<font color="#E5E5E5"> if it's one person</font><font color="#CCCCCC"> asking questions</font>

823
00:28:50,279 --> 00:28:52,740
it's great but if six different

824
00:28:51,299 --> 00:28:55,050
<font color="#E5E5E5">operators want to do different</font>

825
00:28:52,740 --> 00:28:56,580
<font color="#E5E5E5">you might have more of a challenge</font><font color="#CCCCCC"> I say</font>

826
00:28:55,050 --> 00:28:58,678
that<font color="#E5E5E5"> again I didn't so if one person is</font>

827
00:28:56,580 --> 00:29:00,300
formulating the queries it'll work well

828
00:28:58,679 --> 00:29:01,710
but if you<font color="#CCCCCC"> have six different network</font>

829
00:29:00,300 --> 00:29:04,320
operators that want to ask different

830
00:29:01,710 --> 00:29:06,750
questions they may need<font color="#E5E5E5"> to talk to each</font>

831
00:29:04,320 --> 00:29:09,450
other first<font color="#CCCCCC"> before trying</font><font color="#E5E5E5"> to do this so</font>

832
00:29:06,750 --> 00:29:10,950
so<font color="#CCCCCC"> yes</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think like correctly since</font><font color="#E5E5E5"> we</font>

833
00:29:09,450 --> 00:29:12,510
did address<font color="#E5E5E5"> it from resource</font><font color="#CCCCCC"> perspective</font>

834
00:29:10,950 --> 00:29:14,160
like how<font color="#CCCCCC"> exactly what kind of conflicts</font>

835
00:29:12,510 --> 00:29:15,270
are possible<font color="#E5E5E5"> and how things can work so</font>

836
00:29:14,160 --> 00:29:17,130
<font color="#CCCCCC">that's the</font><font color="#E5E5E5"> state right now but I think</font>

837
00:29:15,270 --> 00:29:18,570
<font color="#CCCCCC">like that</font><font color="#E5E5E5"> is something which is so there</font>

838
00:29:17,130 --> 00:29:20,100
are different other<font color="#E5E5E5"> works or previous</font>

839
00:29:18,570 --> 00:29:21,750
work<font color="#CCCCCC"> that has kind of solved the problem</font>

840
00:29:20,100 --> 00:29:23,070
from a<font color="#CCCCCC"> different perspective so we can</font>

841
00:29:21,750 --> 00:29:24,480
take<font color="#CCCCCC"> ideas from there and apply</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> here</font>

842
00:29:23,070 --> 00:29:26,250
but<font color="#E5E5E5"> like that has not been done so I</font>

843
00:29:24,480 --> 00:29:27,630
don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to over came here but</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> I</font>

844
00:29:26,250 --> 00:29:29,340
<font color="#E5E5E5">think that is the pollak that can be</font>

845
00:29:27,630 --> 00:29:30,540
automated I don't see that network

846
00:29:29,340 --> 00:29:37,590
operators have<font color="#E5E5E5"> to talk to each other</font>

847
00:29:30,540 --> 00:29:39,770
before<font color="#E5E5E5"> pushing their policies go all</font>

848
00:29:37,590 --> 00:29:39,770
<font color="#E5E5E5">right</font>

