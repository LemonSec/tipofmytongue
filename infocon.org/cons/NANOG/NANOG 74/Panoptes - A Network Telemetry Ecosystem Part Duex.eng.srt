1
00:00:08,980 --> 00:00:14,980
my name is Ian Flint<font color="#E5E5E5"> this is Vern Varma</font>

2
00:00:11,350 --> 00:00:18,340
and we work at both<font color="#E5E5E5"> company formerly</font>

3
00:00:14,980 --> 00:00:20,590
known as Yahoo and AOL and<font color="#CCCCCC"> EdgeCast so</font>

4
00:00:18,340 --> 00:00:24,460
we were all combined as a part<font color="#E5E5E5"> of the</font>

5
00:00:20,590 --> 00:00:27,189
acquisition<font color="#E5E5E5"> of Yahoo by Verizon</font><font color="#CCCCCC"> and I</font>

6
00:00:24,460 --> 00:00:29,680
run Network automation<font color="#CCCCCC"> one of the big</font>

7
00:00:27,189 --> 00:00:32,079
<font color="#CCCCCC">challenges</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> faced when I came on</font>

8
00:00:29,680 --> 00:00:35,110
to the team was<font color="#E5E5E5"> the proliferation of</font>

9
00:00:32,079 --> 00:00:37,870
point solutions for doing monitoring<font color="#E5E5E5"> of</font>

10
00:00:35,110 --> 00:00:40,030
devices and so we had a whole<font color="#CCCCCC"> bunch of</font>

11
00:00:37,870 --> 00:00:42,129
them we have a significant mrtg

12
00:00:40,030 --> 00:00:43,780
footprint that's hitting our devices<font color="#E5E5E5"> we</font>

13
00:00:42,130 --> 00:00:45,940
<font color="#CCCCCC">have a custom SNMP poehler</font>

14
00:00:43,780 --> 00:00:48,550
called why watch that's hitting<font color="#E5E5E5"> our</font>

15
00:00:45,940 --> 00:00:51,160
devices<font color="#CCCCCC"> we have a point solution</font><font color="#E5E5E5"> around</font>

16
00:00:48,550 --> 00:00:53,739
load balancers just all of these systems

17
00:00:51,160 --> 00:00:56,620
that<font color="#E5E5E5"> had grown up organically</font><font color="#CCCCCC"> over the</font>

18
00:00:53,740 --> 00:00:59,560
years<font color="#E5E5E5"> and the systems that depended on</font>

19
00:00:56,620 --> 00:01:02,349
them<font color="#E5E5E5"> that had also grown</font><font color="#CCCCCC"> up around them</font>

20
00:00:59,560 --> 00:01:04,750
<font color="#CCCCCC">and so one of</font><font color="#E5E5E5"> the challenges that we</font>

21
00:01:02,350 --> 00:01:06,460
undertook to to solve was to take those

22
00:01:04,750 --> 00:01:09,220
and consolidate them<font color="#CCCCCC"> into a single</font>

23
00:01:06,460 --> 00:01:12,070
<font color="#CCCCCC">polling platform</font><font color="#E5E5E5"> Universal polling and</font>

24
00:01:09,220 --> 00:01:14,200
metrics distribution platform<font color="#CCCCCC"> which we</font>

25
00:01:12,070 --> 00:01:18,339
called Panoptix that's what we're<font color="#E5E5E5"> going</font>

26
00:01:14,200 --> 00:01:20,830
<font color="#E5E5E5">to be talking about today so I my name</font>

27
00:01:18,340 --> 00:01:25,360
<font color="#E5E5E5">is Varun</font><font color="#CCCCCC"> I'm the lead engineer upon</font>

28
00:01:20,830 --> 00:01:28,259
<font color="#CCCCCC">Optus and as unit mentioned</font><font color="#E5E5E5"> so</font>

29
00:01:25,360 --> 00:01:32,430
essentially we<font color="#CCCCCC"> will</font><font color="#E5E5E5"> pan</font><font color="#CCCCCC"> Optus as a</font>

30
00:01:28,260 --> 00:01:36,250
python-based<font color="#CCCCCC"> network telemetry platform</font>

31
00:01:32,430 --> 00:01:38,700
<font color="#CCCCCC">there are three distinct components that</font>

32
00:01:36,250 --> 00:01:41,229
<font color="#E5E5E5">Panoptix has this discovery</font><font color="#CCCCCC"> pooling and</font>

33
00:01:38,700 --> 00:01:44,159
enrichment<font color="#E5E5E5"> and we'll be talking about</font>

34
00:01:41,229 --> 00:01:46,990
<font color="#E5E5E5">some of these details during this talk</font>

35
00:01:44,159 --> 00:01:50,560
<font color="#E5E5E5">here is an overview architecture diagram</font>

36
00:01:46,990 --> 00:01:52,869
of what Panoptix like so it's based on

37
00:01:50,560 --> 00:01:55,710
some supporting services there is<font color="#E5E5E5"> celery</font>

38
00:01:52,869 --> 00:01:58,000
<font color="#E5E5E5">which is a very popular Python</font>

39
00:01:55,710 --> 00:02:00,280
distributed job management<font color="#E5E5E5"> system</font>

40
00:01:58,000 --> 00:02:03,340
there's readers which is an<font color="#E5E5E5"> extremely</font>

41
00:02:00,280 --> 00:02:06,040
fast<font color="#E5E5E5"> in-memory</font><font color="#CCCCCC"> key</font><font color="#E5E5E5"> value data store the</font>

42
00:02:03,340 --> 00:02:08,019
zookeeper that provides distributed

43
00:02:06,040 --> 00:02:09,670
locking and leader election services

44
00:02:08,019 --> 00:02:13,049
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> and then of course there's</font>

45
00:02:09,669 --> 00:02:16,298
Kafka for which we<font color="#E5E5E5"> use as a message pass</font>

46
00:02:13,049 --> 00:02:19,749
on top<font color="#E5E5E5"> of all of this we</font><font color="#CCCCCC"> actually built</font>

47
00:02:16,299 --> 00:02:20,889
a plug-in framework<font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> going into</font>

48
00:02:19,749 --> 00:02:23,900
<font color="#E5E5E5">some of the details later</font>

49
00:02:20,889 --> 00:02:26,840
now we implement three types of

50
00:02:23,900 --> 00:02:29,959
against<font color="#E5E5E5"> discovery polling enrichment</font><font color="#CCCCCC"> and</font>

51
00:02:26,840 --> 00:02:32,870
then on top<font color="#CCCCCC"> of this entire framework</font><font color="#E5E5E5"> or</font>

52
00:02:29,959 --> 00:02:35,599
the<font color="#E5E5E5"> stack we implement device specific</font>

53
00:02:32,870 --> 00:02:38,629
<font color="#E5E5E5">plugins currently which we have plugins</font>

54
00:02:35,599 --> 00:02:41,659
<font color="#E5E5E5">that use SNMP and</font><font color="#CCCCCC"> api's to</font><font color="#E5E5E5"> actually</font>

55
00:02:38,629 --> 00:02:43,760
collect telemetry data<font color="#CCCCCC"> there's a bunch</font>

56
00:02:41,659 --> 00:02:46,010
of supporting services in addition<font color="#CCCCCC"> to</font>

57
00:02:43,760 --> 00:02:47,720
the core<font color="#CCCCCC"> platform</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> obviously</font>

58
00:02:46,010 --> 00:02:50,239
after<font color="#E5E5E5"> we collect this entire data we</font>

59
00:02:47,720 --> 00:02:52,959
have to store this and<font color="#E5E5E5"> analyze it so we</font>

60
00:02:50,239 --> 00:02:56,599
have a time series<font color="#E5E5E5"> database that we</font><font color="#CCCCCC"> use</font>

61
00:02:52,959 --> 00:02:59,090
<font color="#CCCCCC">we have an internal</font><font color="#E5E5E5"> CMDB that we use for</font>

62
00:02:56,599 --> 00:03:05,030
device discovery<font color="#E5E5E5"> and then we use chef</font>

63
00:02:59,090 --> 00:03:06,260
<font color="#CCCCCC">for for</font><font color="#E5E5E5"> deployment and configuration</font><font color="#CCCCCC"> I'm</font>

64
00:03:05,030 --> 00:03:08,889
going to go through<font color="#E5E5E5"> some of the core</font>

65
00:03:06,260 --> 00:03:12,230
concepts that Panoptix as a platform<font color="#E5E5E5"> has</font>

66
00:03:08,889 --> 00:03:15,439
so the very first concept is the<font color="#E5E5E5"> I this</font>

67
00:03:12,230 --> 00:03:18,290
notion of<font color="#E5E5E5"> plugins</font><font color="#CCCCCC"> and this is where</font>

68
00:03:15,439 --> 00:03:21,739
panopticon<font color="#E5E5E5"> de mentally different from a</font>

69
00:03:18,290 --> 00:03:26,689
<font color="#CCCCCC">lot of SNMP based</font><font color="#E5E5E5"> polling solutions so</font>

70
00:03:21,739 --> 00:03:28,970
what a<font color="#E5E5E5"> plug-in is is essentially a pipe</font>

71
00:03:26,689 --> 00:03:32,269
<font color="#CCCCCC">an</font><font color="#E5E5E5"> implementation of a very defined</font>

72
00:03:28,970 --> 00:03:35,569
<font color="#E5E5E5">Python interface class</font><font color="#CCCCCC"> so you can</font>

73
00:03:32,269 --> 00:03:39,230
essentially because it's Python code<font color="#E5E5E5"> you</font>

74
00:03:35,569 --> 00:03:40,790
can<font color="#CCCCCC"> actually write code</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> collect from</font>

75
00:03:39,230 --> 00:03:43,159
<font color="#E5E5E5">any source that</font><font color="#CCCCCC"> you like it could</font><font color="#E5E5E5"> be</font>

76
00:03:40,790 --> 00:03:45,400
SNMP could be<font color="#CCCCCC"> a PSC Li or anything</font><font color="#E5E5E5"> else</font>

77
00:03:43,159 --> 00:03:47,899
<font color="#E5E5E5">that might come</font><font color="#CCCCCC"> up</font><font color="#E5E5E5"> in the future</font>

78
00:03:45,400 --> 00:03:49,609
<font color="#CCCCCC">as I'd mentioned there are</font><font color="#E5E5E5"> three</font><font color="#CCCCCC"> types</font>

79
00:03:47,900 --> 00:03:53,449
<font color="#E5E5E5">of plugins discovery enrichment and</font>

80
00:03:49,609 --> 00:03:56,389
metric plugins<font color="#CCCCCC"> another core concept</font><font color="#E5E5E5"> in</font>

81
00:03:53,449 --> 00:03:58,549
Panoptix is this notion of resources so

82
00:03:56,389 --> 00:04:00,440
what a resource is is it's essentially

83
00:03:58,549 --> 00:04:03,379
an abstraction of<font color="#CCCCCC"> what should</font><font color="#E5E5E5"> be</font>

84
00:04:00,440 --> 00:04:05,900
<font color="#E5E5E5">monitored in the most common</font><font color="#CCCCCC"> case a</font>

85
00:04:03,379 --> 00:04:09,078
device or a network<font color="#E5E5E5"> device or host is a</font>

86
00:04:05,900 --> 00:04:12,680
resource but<font color="#E5E5E5"> a resource could be an</font>

87
00:04:09,079 --> 00:04:14,959
external API endpoint<font color="#CCCCCC"> there's metadata</font>

88
00:04:12,680 --> 00:04:17,269
associated with resources<font color="#CCCCCC"> another</font>

89
00:04:14,959 --> 00:04:20,358
interesting thing<font color="#E5E5E5"> in Panoptix is that</font>

90
00:04:17,269 --> 00:04:23,930
we've come up<font color="#CCCCCC"> with a</font><font color="#E5E5E5"> DSL which</font><font color="#CCCCCC"> actually</font>

91
00:04:20,358 --> 00:04:27,620
mirrors or is quite close to sequel

92
00:04:23,930 --> 00:04:31,310
which lets you actually<font color="#E5E5E5"> select resources</font>

93
00:04:27,620 --> 00:04:32,270
<font color="#E5E5E5">you can see an example</font><font color="#CCCCCC"> of the DSL on the</font>

94
00:04:31,310 --> 00:04:34,849
screen

95
00:04:32,270 --> 00:04:36,799
where we're saying okay I want<font color="#E5E5E5"> you to</font>

96
00:04:34,849 --> 00:04:38,569
apply<font color="#E5E5E5"> a certain type of polling</font>

97
00:04:36,800 --> 00:04:40,940
only<font color="#E5E5E5"> two devices which match this</font>

98
00:04:38,569 --> 00:04:44,750
criteria<font color="#E5E5E5"> now typically these types</font><font color="#CCCCCC"> of</font>

99
00:04:40,940 --> 00:04:47,960
<font color="#E5E5E5">diesels are available within time</font><font color="#CCCCCC"> CDs</font>

100
00:04:44,750 --> 00:04:49,909
databases on analytic tools<font color="#E5E5E5"> but here the</font>

101
00:04:47,960 --> 00:04:52,849
<font color="#CCCCCC">difference is that</font><font color="#E5E5E5"> we actually have</font><font color="#CCCCCC"> made</font>

102
00:04:49,909 --> 00:04:57,610
it available<font color="#E5E5E5"> even at the time of</font>

103
00:04:52,849 --> 00:04:57,610
deciding what to pull and how to<font color="#E5E5E5"> call it</font>

104
00:04:57,729 --> 00:05:02,840
<font color="#CCCCCC">another</font><font color="#E5E5E5"> concept is metrics which</font>

105
00:05:00,139 --> 00:05:06,710
obviously is one of the core<font color="#E5E5E5"> things</font><font color="#CCCCCC"> a</font>

106
00:05:02,840 --> 00:05:09,758
metric is anything that<font color="#E5E5E5"> can be measured</font>

107
00:05:06,710 --> 00:05:11,900
so it's essentially<font color="#CCCCCC"> always a</font><font color="#E5E5E5"> number</font>

108
00:05:09,759 --> 00:05:15,289
<font color="#E5E5E5">metrics typically tend to be fast</font>

109
00:05:11,900 --> 00:05:16,729
changing and<font color="#E5E5E5"> I why let might sound</font>

110
00:05:15,289 --> 00:05:18,318
obvious I'm going to<font color="#E5E5E5"> contrast it with</font>

111
00:05:16,729 --> 00:05:21,800
<font color="#E5E5E5">something</font><font color="#CCCCCC"> called enrichments later on</font>

112
00:05:18,319 --> 00:05:24,050
<font color="#E5E5E5">and like I</font><font color="#CCCCCC"> said because of the plug-in</font>

113
00:05:21,800 --> 00:05:28,069
<font color="#E5E5E5">architecture metrics can actually be</font>

114
00:05:24,050 --> 00:05:30,169
collected through<font color="#E5E5E5"> any mechanism okay</font>

115
00:05:28,069 --> 00:05:33,080
another<font color="#E5E5E5"> answer that we have introduced</font>

116
00:05:30,169 --> 00:05:36,919
is<font color="#CCCCCC"> the notion of</font><font color="#E5E5E5"> enrichments now what</font>

117
00:05:33,080 --> 00:05:39,008
enrichments<font color="#E5E5E5"> are are things that are not</font>

118
00:05:36,919 --> 00:05:41,180
numbers they could<font color="#E5E5E5"> be numbers but</font>

119
00:05:39,009 --> 00:05:44,300
essentially thinks these<font color="#E5E5E5"> are things</font>

120
00:05:41,180 --> 00:05:46,130
which are not<font color="#E5E5E5"> that frequently changing a</font>

121
00:05:44,300 --> 00:05:48,740
perfect<font color="#CCCCCC"> example would</font><font color="#E5E5E5"> be when we</font>

122
00:05:46,130 --> 00:05:51,529
<font color="#E5E5E5">collecting telemetry data for interface</font>

123
00:05:48,740 --> 00:05:54,319
metrics right<font color="#E5E5E5"> so the interface counters</font>

124
00:05:51,529 --> 00:05:59,199
are metrics but<font color="#E5E5E5"> the interface name is</font>

125
00:05:54,319 --> 00:05:59,199
<font color="#E5E5E5">actually an enrichment that we apply and</font>

126
00:05:59,440 --> 00:06:05,599
the other thing is and enrichments might

127
00:06:03,800 --> 00:06:07,159
not<font color="#CCCCCC"> necessarily just come from the</font>

128
00:06:05,599 --> 00:06:09,949
device<font color="#CCCCCC"> that's being monitored it might</font>

129
00:06:07,159 --> 00:06:12,740
<font color="#E5E5E5">come from</font><font color="#CCCCCC"> external systems one</font><font color="#E5E5E5"> example</font>

130
00:06:09,949 --> 00:06:16,610
is when we<font color="#CCCCCC"> poll</font><font color="#E5E5E5"> advice for say bgp</font>

131
00:06:12,740 --> 00:06:18,080
sessions<font color="#E5E5E5"> we get back SN numbers now we</font>

132
00:06:16,610 --> 00:06:20,150
might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> interested in reporting the</font>

133
00:06:18,080 --> 00:06:22,729
actual<font color="#CCCCCC"> peer name not just the s and</font>

134
00:06:20,150 --> 00:06:24,080
number and that's where you know<font color="#E5E5E5"> that's</font>

135
00:06:22,729 --> 00:06:26,889
not<font color="#E5E5E5"> something</font><font color="#CCCCCC"> we can query from the</font>

136
00:06:24,080 --> 00:06:29,210
device<font color="#CCCCCC"> itself</font><font color="#E5E5E5"> so that's again a place</font>

137
00:06:26,889 --> 00:06:31,550
where the enrichment framework comes in

138
00:06:29,210 --> 00:06:33,799
where<font color="#E5E5E5"> I can query and enhance the data</font>

139
00:06:31,550 --> 00:06:39,110
that we've collected<font color="#CCCCCC"> from the device by</font>

140
00:06:33,800 --> 00:06:41,180
using<font color="#E5E5E5"> external lookups also because</font>

141
00:06:39,110 --> 00:06:44,810
metrics are typically not numbers

142
00:06:41,180 --> 00:06:46,399
<font color="#E5E5E5">they're typically strings they tend to</font>

143
00:06:44,810 --> 00:06:49,060
be more<font color="#E5E5E5"> expensive to process than</font>

144
00:06:46,399 --> 00:06:51,880
metrics and that's

145
00:06:49,060 --> 00:06:53,500
the reasons we you know<font color="#E5E5E5"> that</font><font color="#CCCCCC"> sometimes</font>

146
00:06:51,880 --> 00:06:54,100
<font color="#E5E5E5">there's transformation and</font><font color="#CCCCCC"> lookups</font>

147
00:06:53,500 --> 00:06:56,140
needed

148
00:06:54,100 --> 00:06:59,200
case in point for<font color="#CCCCCC"> example I mentioned</font>

149
00:06:56,140 --> 00:07:01,570
<font color="#CCCCCC">the ESN</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> to name lookup</font><font color="#E5E5E5"> it's not</font>

150
00:06:59,200 --> 00:07:05,110
something you want to do on every<font color="#CCCCCC"> poll</font>

151
00:07:01,570 --> 00:07:07,620
cycle<font color="#CCCCCC"> it's also something that because</font>

152
00:07:05,110 --> 00:07:12,070
they're expensive<font color="#CCCCCC"> we</font><font color="#E5E5E5"> tend to</font><font color="#CCCCCC"> cash a them</font>

153
00:07:07,620 --> 00:07:14,080
<font color="#CCCCCC">again an example is interface names</font>

154
00:07:12,070 --> 00:07:15,670
interface aliases things like this which

155
00:07:14,080 --> 00:07:19,419
we don't<font color="#CCCCCC"> actually need to</font><font color="#E5E5E5"> collect them</font>

156
00:07:15,670 --> 00:07:21,250
every poll cycle<font color="#CCCCCC"> overall what this does</font>

157
00:07:19,420 --> 00:07:24,280
is by being<font color="#E5E5E5"> able to divide matrix and</font>

158
00:07:21,250 --> 00:07:28,180
enrichments<font color="#E5E5E5"> is it actually lets us scale</font>

159
00:07:24,280 --> 00:07:30,219
<font color="#E5E5E5">a lot because we don't</font><font color="#CCCCCC"> have to collect</font>

160
00:07:28,180 --> 00:07:35,290
the complete set<font color="#E5E5E5"> of</font><font color="#CCCCCC"> data on every</font><font color="#E5E5E5"> poll</font>

161
00:07:30,220 --> 00:07:38,350
cycles<font color="#CCCCCC"> now</font><font color="#E5E5E5"> a word about the data</font>

162
00:07:35,290 --> 00:07:41,470
encoding<font color="#E5E5E5"> and distribution Panoptix was</font>

163
00:07:38,350 --> 00:07:45,030
built from<font color="#E5E5E5"> a day one as a distributed</font>

164
00:07:41,470 --> 00:07:47,890
system<font color="#E5E5E5"> we knew that at our scale</font>

165
00:07:45,030 --> 00:07:49,599
building a<font color="#CCCCCC"> system which could only</font><font color="#E5E5E5"> scale</font>

166
00:07:47,890 --> 00:07:52,120
vertically<font color="#E5E5E5"> which means we could all we</font>

167
00:07:49,600 --> 00:07:54,310
had to add more<font color="#E5E5E5"> processes or more memory</font>

168
00:07:52,120 --> 00:07:56,920
to<font color="#CCCCCC"> the same host</font><font color="#E5E5E5"> would simply not work</font>

169
00:07:54,310 --> 00:07:59,530
<font color="#E5E5E5">so we've actually built</font><font color="#CCCCCC"> it as a</font>

170
00:07:56,920 --> 00:08:01,600
horizontally scalable system<font color="#E5E5E5"> and the two</font>

171
00:07:59,530 --> 00:08:04,270
dimensions to<font color="#E5E5E5"> that one is the</font><font color="#CCCCCC"> fact</font><font color="#E5E5E5"> that</font>

172
00:08:01,600 --> 00:08:06,580
the three subsystems that<font color="#CCCCCC"> I mentioned</font>

173
00:08:04,270 --> 00:08:10,030
<font color="#E5E5E5">distribution sorry discovery enrichment</font>

174
00:08:06,580 --> 00:08:12,010
and<font color="#E5E5E5"> pooling are completely decoupled</font><font color="#CCCCCC"> and</font>

175
00:08:10,030 --> 00:08:14,530
which<font color="#E5E5E5"> means we can scale them out</font>

176
00:08:12,010 --> 00:08:17,050
individually<font color="#E5E5E5"> it also means that within</font>

177
00:08:14,530 --> 00:08:20,590
<font color="#CCCCCC">each of</font><font color="#E5E5E5"> these systems we can actually</font>

178
00:08:17,050 --> 00:08:22,960
spin up more<font color="#E5E5E5"> hosts and for example if I</font>

179
00:08:20,590 --> 00:08:25,390
need<font color="#E5E5E5"> more</font><font color="#CCCCCC"> polling capacity I can simply</font>

180
00:08:22,960 --> 00:08:28,620
spin up more hosts and becomes part of a

181
00:08:25,390 --> 00:08:32,020
<font color="#CCCCCC">cluster and I get more polling capacity</font>

182
00:08:28,620 --> 00:08:33,580
<font color="#CCCCCC">because these systems</font><font color="#E5E5E5"> are because it's a</font>

183
00:08:32,020 --> 00:08:36,579
distributed<font color="#CCCCCC"> system we obviously need a</font>

184
00:08:33,580 --> 00:08:39,490
way<font color="#E5E5E5"> to pass data between them</font><font color="#CCCCCC"> we use</font>

185
00:08:36,580 --> 00:08:41,560
Kafka and<font color="#E5E5E5"> readers depending on different</font>

186
00:08:39,490 --> 00:08:45,210
use cases<font color="#CCCCCC"> to</font><font color="#E5E5E5"> actually pass data between</font>

187
00:08:41,559 --> 00:08:47,619
<font color="#E5E5E5">these subsystems</font><font color="#CCCCCC"> the other thing is</font>

188
00:08:45,210 --> 00:08:50,290
again<font color="#E5E5E5"> because we're passing data we need</font>

189
00:08:47,620 --> 00:08:51,550
<font color="#E5E5E5">to choose a serialization format so we</font>

190
00:08:50,290 --> 00:08:54,370
decided<font color="#E5E5E5"> to</font><font color="#CCCCCC"> go with JSON</font>

191
00:08:51,550 --> 00:08:56,949
now JSON is extremely<font color="#E5E5E5"> inefficient and</font>

192
00:08:54,370 --> 00:08:59,590
it's slow<font color="#E5E5E5"> but then it is actually</font><font color="#CCCCCC"> very</font>

193
00:08:56,950 --> 00:09:02,690
operator and developer friendly so it's

194
00:08:59,590 --> 00:09:05,400
a cost we were<font color="#E5E5E5"> willing to pay</font>

195
00:09:02,690 --> 00:09:07,740
<font color="#CCCCCC">this is what the</font><font color="#E5E5E5"> overall workflow for</font>

196
00:09:05,400 --> 00:09:10,140
this looks like<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know obviously</font><font color="#E5E5E5"> it</font>

197
00:09:07,740 --> 00:09:11,850
begins<font color="#E5E5E5"> by us collecting data there is</font>

198
00:09:10,140 --> 00:09:13,880
<font color="#E5E5E5">some</font><font color="#CCCCCC"> post-processing support that we</font>

199
00:09:11,850 --> 00:09:17,010
<font color="#CCCCCC">have we</font><font color="#E5E5E5"> call these transformations</font><font color="#CCCCCC"> an</font>

200
00:09:13,880 --> 00:09:21,090
example for transformation is that<font color="#CCCCCC"> when</font>

201
00:09:17,010 --> 00:09:24,090
we collect raw counters<font color="#E5E5E5"> from a from a</font>

202
00:09:21,090 --> 00:09:26,220
device<font color="#CCCCCC"> sometimes it's not</font><font color="#E5E5E5"> meaningful to</font>

203
00:09:24,090 --> 00:09:29,190
send it as is<font color="#E5E5E5"> downstream so we can</font>

204
00:09:26,220 --> 00:09:32,550
actually convert<font color="#E5E5E5"> them into gauges and</font>

205
00:09:29,190 --> 00:09:34,500
then once we do the post-processing<font color="#E5E5E5"> we</font>

206
00:09:32,550 --> 00:09:37,680
place the data on the message pass<font color="#E5E5E5"> and</font>

207
00:09:34,500 --> 00:09:39,360
then we have<font color="#E5E5E5"> different consumers</font><font color="#CCCCCC"> here</font>

208
00:09:37,680 --> 00:09:41,069
are<font color="#CCCCCC"> to workflows that I've shown there's</font>

209
00:09:39,360 --> 00:09:43,980
one workflow that takes the<font color="#E5E5E5"> data and</font>

210
00:09:41,070 --> 00:09:46,470
puts it in<font color="#E5E5E5"> a time series database which</font>

211
00:09:43,980 --> 00:09:48,810
we actually use for<font color="#CCCCCC"> traffic alerting and</font>

212
00:09:46,470 --> 00:09:50,760
our internal<font color="#E5E5E5"> time series</font><font color="#CCCCCC"> database is</font>

213
00:09:48,810 --> 00:09:52,619
actually<font color="#CCCCCC"> also stores the</font><font color="#E5E5E5"> data on</font><font color="#CCCCCC"> our</font>

214
00:09:50,760 --> 00:09:55,650
internal grid<font color="#E5E5E5"> which we use for</font>

215
00:09:52,620 --> 00:09:58,500
<font color="#E5E5E5">analytical analytics and reporting at</font>

216
00:09:55,650 --> 00:10:02,250
the<font color="#E5E5E5"> same time there are use cases where</font>

217
00:09:58,500 --> 00:10:04,710
we need a<font color="#E5E5E5"> the most recent data not</font>

218
00:10:02,250 --> 00:10:06,930
necessarily the historical data<font color="#E5E5E5"> so we</font>

219
00:10:04,710 --> 00:10:08,820
<font color="#CCCCCC">actually have a</font><font color="#E5E5E5"> consumer which stores</font>

220
00:10:06,930 --> 00:10:11,430
the<font color="#E5E5E5"> state and my sequel and exposes this</font>

221
00:10:08,820 --> 00:10:13,860
<font color="#E5E5E5">through an API and then we built you</font>

222
00:10:11,430 --> 00:10:16,500
<font color="#E5E5E5">eyes and CLI is based</font><font color="#CCCCCC"> embraced on top of</font>

223
00:10:13,860 --> 00:10:22,500
those<font color="#CCCCCC"> ap eyes and I'll be showing</font><font color="#E5E5E5"> an</font>

224
00:10:16,500 --> 00:10:26,820
<font color="#CCCCCC">example of what that</font><font color="#E5E5E5"> looks like so given</font>

225
00:10:22,500 --> 00:10:28,560
that<font color="#E5E5E5"> we serve</font><font color="#CCCCCC"> a billion</font><font color="#E5E5E5"> bus customers</font>

226
00:10:26,820 --> 00:10:31,590
<font color="#CCCCCC">obviously we have a very large footprint</font>

227
00:10:28,560 --> 00:10:37,800
<font color="#E5E5E5">and there are a lot of things that we</font>

228
00:10:31,590 --> 00:10:40,110
<font color="#E5E5E5">learnt while operating this first let's</font>

229
00:10:37,800 --> 00:10:44,400
talk<font color="#E5E5E5"> about what scale we</font><font color="#CCCCCC"> are operating</font>

230
00:10:40,110 --> 00:10:45,840
<font color="#E5E5E5">at is now this is indication of orders</font>

231
00:10:44,400 --> 00:10:48,120
of<font color="#E5E5E5"> magnitude these are not absolute</font>

232
00:10:45,840 --> 00:10:50,340
numbers so we have hundreds<font color="#E5E5E5"> of thousands</font>

233
00:10:48,120 --> 00:10:52,500
of<font color="#E5E5E5"> servers we have tens of thousands of</font>

234
00:10:50,340 --> 00:10:56,730
<font color="#E5E5E5">network devices we have</font><font color="#CCCCCC"> millions of</font>

235
00:10:52,500 --> 00:11:00,240
<font color="#CCCCCC">time-series</font><font color="#E5E5E5"> we do collect data every 60</font>

236
00:10:56,730 --> 00:11:02,040
seconds which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> actually is faster than</font>

237
00:11:00,240 --> 00:11:07,440
<font color="#E5E5E5">typically what we were doing with mrtg</font>

238
00:11:02,040 --> 00:11:11,819
of every five minutes now<font color="#E5E5E5"> some of the</font>

239
00:11:07,440 --> 00:11:13,680
scaling<font color="#CCCCCC"> issues we faced I mentioned</font>

240
00:11:11,820 --> 00:11:14,020
earlier the<font color="#CCCCCC"> monopolies was designed to</font>

241
00:11:13,680 --> 00:11:17,560
be

242
00:11:14,020 --> 00:11:20,110
scalable and<font color="#E5E5E5"> this was intentional</font><font color="#CCCCCC"> we</font>

243
00:11:17,560 --> 00:11:23,229
paid a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> upfront development cost</font>

244
00:11:20,110 --> 00:11:25,779
<font color="#E5E5E5">to do this because frankly this is not</font>

245
00:11:23,230 --> 00:11:27,640
<font color="#CCCCCC">easy to bolt on scalability is not a</font>

246
00:11:25,779 --> 00:11:29,050
feature it's a design principle<font color="#CCCCCC"> so you</font>

247
00:11:27,640 --> 00:11:32,470
kind of have<font color="#CCCCCC"> to take care of it while</font>

248
00:11:29,050 --> 00:11:34,839
designing the system<font color="#CCCCCC"> we</font><font color="#E5E5E5"> decided to go</font>

249
00:11:32,470 --> 00:11:37,149
with Python<font color="#E5E5E5"> it is extremely slow</font>

250
00:11:34,839 --> 00:11:38,950
extremely inefficient<font color="#CCCCCC"> something we were</font>

251
00:11:37,149 --> 00:11:43,990
prepared for<font color="#E5E5E5"> and you know it turned out</font>

252
00:11:38,950 --> 00:11:46,959
to<font color="#E5E5E5"> be true</font><font color="#CCCCCC"> what we have done is there</font>

253
00:11:43,990 --> 00:11:49,510
are some high<font color="#E5E5E5"> throughput actions like</font>

254
00:11:46,959 --> 00:11:51,910
<font color="#E5E5E5">specifically as in the actual SNMP</font>

255
00:11:49,510 --> 00:11:54,069
protocol interactions<font color="#E5E5E5"> which we've</font>

256
00:11:51,910 --> 00:11:57,189
delegated to<font color="#E5E5E5"> see extension modules so</font>

257
00:11:54,070 --> 00:11:58,990
that<font color="#CCCCCC"> we can actually get performance and</font>

258
00:11:57,190 --> 00:12:01,089
then again at our scale<font color="#CCCCCC"> we</font><font color="#E5E5E5"> broke</font>

259
00:11:58,990 --> 00:12:04,000
everything<font color="#E5E5E5"> all the defaults in stalls</font>

260
00:12:01,089 --> 00:12:05,890
<font color="#E5E5E5">were read a zookeeper Kafka</font><font color="#CCCCCC"> they would</font>

261
00:12:04,000 --> 00:12:08,620
just fall<font color="#CCCCCC"> over</font><font color="#E5E5E5"> because we would hit all</font>

262
00:12:05,890 --> 00:12:10,330
the default limits<font color="#CCCCCC"> so there's a lot of</font>

263
00:12:08,620 --> 00:12:15,040
tuning we had to do for<font color="#E5E5E5"> each</font><font color="#CCCCCC"> of these</font>

264
00:12:10,330 --> 00:12:19,750
systems<font color="#E5E5E5"> the other aspect for scaling was</font>

265
00:12:15,040 --> 00:12:21,730
with data this large we did not want<font color="#E5E5E5"> to</font>

266
00:12:19,750 --> 00:12:24,700
<font color="#E5E5E5">build a centralized cyst or a</font>

267
00:12:21,730 --> 00:12:28,149
centralized system<font color="#E5E5E5"> both for performance</font>

268
00:12:24,700 --> 00:12:30,459
<font color="#CCCCCC">and availability</font><font color="#E5E5E5"> reasons so the way we</font>

269
00:12:28,149 --> 00:12:32,230
did this<font color="#E5E5E5"> instead was that we have these</font>

270
00:12:30,459 --> 00:12:36,910
local deployments in each of<font color="#E5E5E5"> our data</font>

271
00:12:32,230 --> 00:12:40,510
centers<font color="#CCCCCC"> and what we do is these data</font>

272
00:12:36,910 --> 00:12:42,640
centers collect data for<font color="#CCCCCC"> their obviously</font>

273
00:12:40,510 --> 00:12:45,279
all the network<font color="#E5E5E5"> devices within the data</font>

274
00:12:42,640 --> 00:12:49,540
center<font color="#E5E5E5"> but</font><font color="#CCCCCC"> also collect devices for</font>

275
00:12:45,279 --> 00:12:52,930
nearby regional sites<font color="#E5E5E5"> at the same time</font>

276
00:12:49,540 --> 00:12:55,270
we don't want<font color="#E5E5E5"> we</font><font color="#CCCCCC"> don't want discovery of</font>

277
00:12:52,930 --> 00:12:57,819
data to be problematic<font color="#E5E5E5"> so somebody using</font>

278
00:12:55,270 --> 00:13:00,430
an API<font color="#CCCCCC"> should not have to</font><font color="#E5E5E5"> figure</font><font color="#CCCCCC"> out</font>

279
00:12:57,820 --> 00:13:02,800
where they<font color="#CCCCCC"> can get this data so what we</font>

280
00:13:00,430 --> 00:13:05,770
did was<font color="#CCCCCC"> we came up with</font><font color="#E5E5E5"> a federated API</font>

281
00:13:02,800 --> 00:13:07,899
structure where what we do is between

282
00:13:05,770 --> 00:13:12,010
all these<font color="#E5E5E5"> data centers we actually cross</font>

283
00:13:07,899 --> 00:13:14,980
populate the metadata<font color="#E5E5E5"> so each data</font>

284
00:13:12,010 --> 00:13:16,990
center<font color="#CCCCCC"> does not have all the</font><font color="#E5E5E5"> data but it</font>

285
00:13:14,980 --> 00:13:18,640
knows where<font color="#CCCCCC"> to get all the radar so you</font>

286
00:13:16,990 --> 00:13:20,709
can make a query<font color="#CCCCCC"> and say</font><font color="#E5E5E5"> okay I'm</font>

287
00:13:18,640 --> 00:13:22,569
interested<font color="#CCCCCC"> in deep data</font><font color="#E5E5E5"> about device X</font>

288
00:13:20,709 --> 00:13:24,279
<font color="#E5E5E5">and you might get a response saying</font>

289
00:13:22,570 --> 00:13:24,760
here's<font color="#E5E5E5"> the data or you might get a</font>

290
00:13:24,279 --> 00:13:26,110
response

291
00:13:24,760 --> 00:13:27,710
<font color="#E5E5E5">okay I don't have the data but</font><font color="#CCCCCC"> I know</font>

292
00:13:26,110 --> 00:13:30,650
who does<font color="#E5E5E5"> so why don't you ask</font>

293
00:13:27,710 --> 00:13:33,320
that person and this design has helped

294
00:13:30,650 --> 00:13:40,699
<font color="#E5E5E5">us both with scalability and</font>

295
00:13:33,320 --> 00:13:44,440
fault-tolerance<font color="#CCCCCC"> we the plugins that we</font>

296
00:13:40,700 --> 00:13:47,780
have already<font color="#E5E5E5"> written we have you know</font>

297
00:13:44,440 --> 00:13:51,170
support for<font color="#CCCCCC"> arista cisco juniper matrix</font>

298
00:13:47,780 --> 00:13:54,380
<font color="#CCCCCC">we have system metrics</font><font color="#E5E5E5"> we have something</font>

299
00:13:51,170 --> 00:13:56,270
we called functional metrics<font color="#E5E5E5"> which is go</font>

300
00:13:54,380 --> 00:13:58,220
beyond just<font color="#E5E5E5"> the CPU memory and they're</font>

301
00:13:56,270 --> 00:13:59,930
very very<font color="#E5E5E5"> device and platform specific</font>

302
00:13:58,220 --> 00:14:02,900
and more importantly their usage

303
00:13:59,930 --> 00:14:06,319
<font color="#CCCCCC">specifics so if you're using an 8 end</font>

304
00:14:02,900 --> 00:14:08,030
load balancer for load balancing<font color="#CCCCCC"> we have</font>

305
00:14:06,320 --> 00:14:11,750
different functional metrics<font color="#CCCCCC"> versus when</font>

306
00:14:08,030 --> 00:14:14,030
we use<font color="#E5E5E5"> it</font><font color="#CCCCCC"> for large-scale nuts what</font>

307
00:14:11,750 --> 00:14:16,550
we've<font color="#E5E5E5"> also done is because this is a</font>

308
00:14:14,030 --> 00:14:19,220
platform for telemetry<font color="#E5E5E5"> collection we've</font>

309
00:14:16,550 --> 00:14:21,790
actually also<font color="#E5E5E5"> built state and tamaak</font>

310
00:14:19,220 --> 00:14:23,690
topology collection for<font color="#CCCCCC"> cisco devices</font>

311
00:14:21,790 --> 00:14:25,459
<font color="#E5E5E5">this is something we're</font><font color="#CCCCCC"> looking</font><font color="#E5E5E5"> at</font>

312
00:14:23,690 --> 00:14:28,520
actually integrating back into our

313
00:14:25,460 --> 00:14:29,900
discovery so that we don't only figure

314
00:14:28,520 --> 00:14:32,390
out what<font color="#E5E5E5"> devices to monitor through our</font>

315
00:14:29,900 --> 00:14:37,400
<font color="#E5E5E5">CMDB but through an actual walk of the</font>

316
00:14:32,390 --> 00:14:40,430
network<font color="#CCCCCC"> some operational experiences</font>

317
00:14:37,400 --> 00:14:42,050
that we've<font color="#CCCCCC"> had and you know any anybody</font>

318
00:14:40,430 --> 00:14:46,880
<font color="#E5E5E5">who's worked with network telemetry I'm</font>

319
00:14:42,050 --> 00:14:48,920
sure would<font color="#E5E5E5"> have seen these we had a lot</font>

320
00:14:46,880 --> 00:14:51,980
of<font color="#E5E5E5"> inconsistencies between metrics which</font>

321
00:14:48,920 --> 00:14:53,870
were<font color="#E5E5E5"> reported from different platforms</font>

322
00:14:51,980 --> 00:14:56,090
<font color="#E5E5E5">and different OS versions of the same</font>

323
00:14:53,870 --> 00:14:57,590
platform<font color="#E5E5E5"> and frankly in terms</font><font color="#CCCCCC"> of</font>

324
00:14:56,090 --> 00:15:03,440
development<font color="#E5E5E5"> this was our single biggest</font>

325
00:14:57,590 --> 00:15:06,620
<font color="#E5E5E5">time</font><font color="#CCCCCC"> train SNMP you know it is really</font>

326
00:15:03,440 --> 00:15:09,620
<font color="#E5E5E5">old I believe</font><font color="#CCCCCC"> the snmpv2 specification</font>

327
00:15:06,620 --> 00:15:12,020
came out 21<font color="#E5E5E5"> years ago so it is old but</font>

328
00:15:09,620 --> 00:15:14,060
it<font color="#E5E5E5"> is you because as much as we'd like</font>

329
00:15:12,020 --> 00:15:16,939
<font color="#E5E5E5">to</font><font color="#CCCCCC"> you be able to use API and streaming</font>

330
00:15:14,060 --> 00:15:19,339
telemetry<font color="#CCCCCC"> they're just</font><font color="#E5E5E5"> simply are many</font>

331
00:15:16,940 --> 00:15:21,200
<font color="#CCCCCC">cases</font><font color="#E5E5E5"> where a lot of telemetry data is</font>

332
00:15:19,340 --> 00:15:24,050
<font color="#E5E5E5">not exposed through those so you know</font>

333
00:15:21,200 --> 00:15:25,550
something we have to live with API

334
00:15:24,050 --> 00:15:27,979
performance tends to be much<font color="#E5E5E5"> better than</font>

335
00:15:25,550 --> 00:15:29,150
SNMP again<font color="#E5E5E5"> anybody who's done telemetry</font>

336
00:15:27,980 --> 00:15:33,080
would

337
00:15:29,150 --> 00:15:35,750
<font color="#CCCCCC">no this the other thing is when we</font><font color="#E5E5E5"> were</font>

338
00:15:33,080 --> 00:15:38,240
<font color="#E5E5E5">building this we had some use cases</font><font color="#CCCCCC"> like</font>

339
00:15:35,750 --> 00:15:40,940
<font color="#CCCCCC">ian had mentioned that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> there</font>

340
00:15:38,240 --> 00:15:42,590
was a whole class of services<font color="#E5E5E5"> or systems</font>

341
00:15:40,940 --> 00:15:45,140
<font color="#E5E5E5">that we had and we knew what we</font><font color="#CCCCCC"> wanted</font>

342
00:15:42,590 --> 00:15:47,600
<font color="#E5E5E5">to replace but we also knew we didn't</font>

343
00:15:45,140 --> 00:15:50,840
know how this data<font color="#E5E5E5"> would</font><font color="#CCCCCC"> be used</font><font color="#E5E5E5"> and</font>

344
00:15:47,600 --> 00:15:53,270
that's where<font color="#E5E5E5"> for example using Kafka</font>

345
00:15:50,840 --> 00:15:55,760
<font color="#E5E5E5">proved to be the right</font><font color="#CCCCCC"> choice we already</font>

346
00:15:53,270 --> 00:15:58,040
have three types of downstream consumers

347
00:15:55,760 --> 00:16:00,110
which transform the<font color="#E5E5E5"> data and send it</font><font color="#CCCCCC"> to</font>

348
00:15:58,040 --> 00:16:01,849
different<font color="#CCCCCC"> systems and this is a much</font>

349
00:16:00,110 --> 00:16:03,800
better<font color="#CCCCCC"> approach than</font><font color="#E5E5E5"> trying</font><font color="#CCCCCC"> to collect</font>

350
00:16:01,850 --> 00:16:05,540
data<font color="#CCCCCC"> in</font><font color="#E5E5E5"> at the same data in</font><font color="#CCCCCC"> different</font>

351
00:16:03,800 --> 00:16:10,280
<font color="#CCCCCC">ways so different downstream systems can</font>

352
00:16:05,540 --> 00:16:14,709
consume it I'm sorry<font color="#CCCCCC"> I think</font><font color="#E5E5E5"> the slides</font>

353
00:16:10,280 --> 00:16:14,709
been repeated<font color="#E5E5E5"> oh sorry I'm going back</font>

354
00:16:15,580 --> 00:16:21,590
one interesting thing is one<font color="#E5E5E5"> thing we</font>

355
00:16:19,760 --> 00:16:24,880
were<font color="#CCCCCC"> very</font><font color="#E5E5E5"> careful about is even though</font>

356
00:16:21,590 --> 00:16:28,730
we place on a date<font color="#E5E5E5"> on Kafka we do not</font>

357
00:16:24,880 --> 00:16:30,830
<font color="#E5E5E5">integrate those raw streams in with</font>

358
00:16:28,730 --> 00:16:32,540
<font color="#CCCCCC">third-party</font><font color="#E5E5E5"> systems now this might sound</font>

359
00:16:30,830 --> 00:16:34,190
counterintuitive because<font color="#E5E5E5"> you know one</font><font color="#CCCCCC"> of</font>

360
00:16:32,540 --> 00:16:35,510
the big advantages<font color="#CCCCCC"> of using Kafka is</font>

361
00:16:34,190 --> 00:16:36,830
there's so many consumers that you

362
00:16:35,510 --> 00:16:39,740
should be able<font color="#CCCCCC"> to hook</font><font color="#E5E5E5"> in any consumer</font>

363
00:16:36,830 --> 00:16:42,860
<font color="#E5E5E5">and get the data but here's the</font><font color="#CCCCCC"> problem</font>

364
00:16:39,740 --> 00:16:44,480
<font color="#CCCCCC">if you do do that you can never upgrade</font>

365
00:16:42,860 --> 00:16:45,950
<font color="#E5E5E5">because the problem you will</font><font color="#CCCCCC"> have is</font>

366
00:16:44,480 --> 00:16:47,540
you'll<font color="#E5E5E5"> you'll be tied</font><font color="#CCCCCC"> in to a certain</font>

367
00:16:45,950 --> 00:16:48,980
<font color="#E5E5E5">Kafka version because there's a</font>

368
00:16:47,540 --> 00:16:51,260
downstream consumer<font color="#E5E5E5"> that depends on that</font>

369
00:16:48,980 --> 00:16:52,910
Kafka version or you<font color="#CCCCCC"> will be tied into a</font>

370
00:16:51,260 --> 00:16:56,930
specific serialization format whatever

371
00:16:52,910 --> 00:17:00,920
<font color="#CCCCCC">you were exposing on sending or</font>

372
00:16:56,930 --> 00:17:02,540
serializing<font color="#E5E5E5"> breathe on Kafka</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> ever</font>

373
00:17:00,920 --> 00:17:06,020
<font color="#CCCCCC">change that</font><font color="#E5E5E5"> your downstream consumers</font>

374
00:17:02,540 --> 00:17:09,379
will break what we did do instead is

375
00:17:06,020 --> 00:17:12,650
<font color="#E5E5E5">that we actually take this data and we</font>

376
00:17:09,380 --> 00:17:16,459
store<font color="#CCCCCC"> it in a transient my sequel</font>

377
00:17:12,650 --> 00:17:18,170
database and expose<font color="#E5E5E5"> api's and I'm going</font>

378
00:17:16,459 --> 00:17:22,070
<font color="#E5E5E5">to show an example of</font><font color="#CCCCCC"> the pairs we have</font>

379
00:17:18,170 --> 00:17:24,370
and the advantage<font color="#CCCCCC"> that has is I can it</font>

380
00:17:22,069 --> 00:17:26,720
completely<font color="#E5E5E5"> decoupled my system we can</font>

381
00:17:24,369 --> 00:17:28,129
change the internal serialization heck

382
00:17:26,720 --> 00:17:30,560
we can<font color="#E5E5E5"> even get rid</font><font color="#CCCCCC"> of Kafka</font><font color="#E5E5E5"> for</font>

383
00:17:28,130 --> 00:17:35,240
something else that<font color="#CCCCCC"> comes along without</font>

384
00:17:30,560 --> 00:17:37,850
our external contracts changing<font color="#CCCCCC"> we built</font>

385
00:17:35,240 --> 00:17:40,570
<font color="#E5E5E5">custom UIs</font><font color="#CCCCCC"> again I'll</font><font color="#E5E5E5"> show a couple of</font>

386
00:17:37,850 --> 00:17:44,480
<font color="#E5E5E5">examples of what</font><font color="#CCCCCC"> that looks like</font>

387
00:17:40,570 --> 00:17:47,809
this is these<font color="#CCCCCC"> are examples of AP</font><font color="#E5E5E5"> is that</font>

388
00:17:44,480 --> 00:17:50,540
we have on the left<font color="#E5E5E5"> you would see this</font>

389
00:17:47,809 --> 00:17:55,370
is<font color="#CCCCCC"> a very purpose specific API that</font>

390
00:17:50,540 --> 00:17:59,510
we've built<font color="#CCCCCC"> to get data for whips from</font>

391
00:17:55,370 --> 00:18:01,520
load balancers<font color="#CCCCCC"> at the same time on and</font>

392
00:17:59,510 --> 00:18:04,840
this tends to<font color="#E5E5E5"> be very</font><font color="#CCCCCC"> easy to use and</font>

393
00:18:01,520 --> 00:18:09,080
performant<font color="#E5E5E5"> we also only expose the last</font>

394
00:18:04,840 --> 00:18:15,409
data<font color="#E5E5E5"> point through the API we also have</font>

395
00:18:09,080 --> 00:18:19,340
a API which actually exposes historical

396
00:18:15,410 --> 00:18:24,050
data and you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> ad hoc queries on it</font>

397
00:18:19,340 --> 00:18:25,220
this is actually an open<font color="#E5E5E5"> TST</font><font color="#CCCCCC"> B API so</font>

398
00:18:24,050 --> 00:18:29,178
this is not something<font color="#E5E5E5"> we've built</font>

399
00:18:25,220 --> 00:18:31,130
internally we use open<font color="#CCCCCC"> TST B tends to be</font>

400
00:18:29,179 --> 00:18:32,750
slower<font color="#E5E5E5"> but then you know you can run</font>

401
00:18:31,130 --> 00:18:38,030
aggregations and<font color="#E5E5E5"> you can get historical</font>

402
00:18:32,750 --> 00:18:40,309
data<font color="#CCCCCC"> one of the things I mentioned in</font>

403
00:18:38,030 --> 00:18:43,340
the architecture slide is<font color="#CCCCCC"> that we have a</font>

404
00:18:40,309 --> 00:18:47,360
time<font color="#E5E5E5"> series database so we actually have</font>

405
00:18:43,340 --> 00:18:49,070
an in-house<font color="#E5E5E5"> time series database and</font>

406
00:18:47,360 --> 00:18:52,010
visualization solutions which again

407
00:18:49,070 --> 00:18:53,990
actually had architect<font color="#CCCCCC"> it's based on</font>

408
00:18:52,010 --> 00:18:56,179
open TST B with a lot of<font color="#E5E5E5"> obviously</font>

409
00:18:53,990 --> 00:18:59,870
performance<font color="#E5E5E5"> optimizations a lot of other</font>

410
00:18:56,179 --> 00:19:03,020
<font color="#E5E5E5">improvements</font><font color="#CCCCCC"> this is an example of a</font>

411
00:18:59,870 --> 00:19:06,860
dashboard<font color="#E5E5E5"> that we've built based on our</font>

412
00:19:03,020 --> 00:19:12,559
internal<font color="#CCCCCC"> PSDB and the internal UI that</font>

413
00:19:06,860 --> 00:19:14,419
we have now because it's centralized<font color="#CCCCCC"> TST</font>

414
00:19:12,559 --> 00:19:16,610
<font color="#CCCCCC">BV our team doesn't</font><font color="#E5E5E5"> have to manage it</font>

415
00:19:14,420 --> 00:19:19,010
it's managed for by a central team for

416
00:19:16,610 --> 00:19:20,780
the whole of<font color="#E5E5E5"> oath and you</font><font color="#CCCCCC"> know this</font>

417
00:19:19,010 --> 00:19:26,420
economies of scale<font color="#E5E5E5"> and operations are</font>

418
00:19:20,780 --> 00:19:29,178
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> here's an</font><font color="#E5E5E5"> example of a couple of</font>

419
00:19:26,420 --> 00:19:30,890
custom UIs<font color="#CCCCCC"> that we've built</font><font color="#E5E5E5"> the</font>

420
00:19:29,179 --> 00:19:33,380
<font color="#CCCCCC">left-hand side is actually a device</font>

421
00:19:30,890 --> 00:19:38,120
dashboard<font color="#E5E5E5"> the right-hand side is</font>

422
00:19:33,380 --> 00:19:41,120
actually a whip dashboard<font color="#E5E5E5"> now these have</font>

423
00:19:38,120 --> 00:19:44,540
<font color="#E5E5E5">been built using the purpose specific</font>

424
00:19:41,120 --> 00:19:46,100
API<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that I had shown</font><font color="#E5E5E5"> and because they</font>

425
00:19:44,540 --> 00:19:48,500
<font color="#E5E5E5">only expose the last point and time data</font>

426
00:19:46,100 --> 00:19:51,850
they tend to be performant<font color="#E5E5E5"> so you guys</font>

427
00:19:48,500 --> 00:19:51,850
are actually<font color="#CCCCCC"> quite responsive</font>

428
00:19:53,830 --> 00:19:57,850
looking forward one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the next things</font>

429
00:19:56,109 --> 00:20:01,029
<font color="#CCCCCC">that we want to work on is actually</font>

430
00:19:57,850 --> 00:20:04,539
streaming telemetry<font color="#E5E5E5"> we have a framework</font>

431
00:20:01,029 --> 00:20:06,609
in mind<font color="#E5E5E5"> where we</font><font color="#CCCCCC"> use a streaming</font>

432
00:20:04,539 --> 00:20:10,600
telemetry collection you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> Jay nmi is</font>

433
00:20:06,609 --> 00:20:13,629
the<font color="#E5E5E5"> leading contender</font><font color="#CCCCCC"> but we also reuse</font>

434
00:20:10,600 --> 00:20:17,439
the the the infrastructure<font color="#CCCCCC"> that as we</font>

435
00:20:13,629 --> 00:20:20,230
have for example<font color="#E5E5E5"> for in the j GN</font><font color="#CCCCCC"> MI case</font>

436
00:20:17,440 --> 00:20:21,820
we do<font color="#E5E5E5"> need to create outbound</font>

437
00:20:20,230 --> 00:20:23,619
connections to actually get streaming

438
00:20:21,820 --> 00:20:25,570
telemetry from them and for<font color="#E5E5E5"> that you</font>

439
00:20:23,619 --> 00:20:27,129
<font color="#CCCCCC">need an authoritative source of devices</font>

440
00:20:25,570 --> 00:20:29,918
<font color="#E5E5E5">or resources to connect to you know</font>

441
00:20:27,129 --> 00:20:34,059
that's something Panoptix has similarly

442
00:20:29,919 --> 00:20:35,950
<font color="#CCCCCC">for GN mi you would want to the</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rod</font>

443
00:20:34,059 --> 00:20:37,869
metrics or telemetry data that you get

444
00:20:35,950 --> 00:20:40,960
<font color="#E5E5E5">over streaming you will again want to</font>

445
00:20:37,869 --> 00:20:42,879
<font color="#E5E5E5">enrich them examples of enrichment I</font>

446
00:20:40,960 --> 00:20:44,649
gave the s an<font color="#CCCCCC"> example but there's</font>

447
00:20:42,879 --> 00:20:46,748
another example<font color="#E5E5E5"> for example the</font>

448
00:20:44,649 --> 00:20:48,939
<font color="#E5E5E5">geolocation the physical geolocation of</font>

449
00:20:46,749 --> 00:20:50,559
<font color="#E5E5E5">the device is not necessarily something</font>

450
00:20:48,940 --> 00:20:52,690
<font color="#CCCCCC">that you can figure out</font><font color="#E5E5E5"> from the device</font>

451
00:20:50,559 --> 00:20:56,678
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> so these are external</font><font color="#E5E5E5"> enrichments</font>

452
00:20:52,690 --> 00:21:01,809
that we can apply<font color="#CCCCCC"> to the raw metrics</font>

453
00:20:56,679 --> 00:21:04,210
that we collect now<font color="#E5E5E5"> we've actually</font>

454
00:21:01,809 --> 00:21:09,700
spoken<font color="#E5E5E5"> and presented a lot of this at</font>

455
00:21:04,210 --> 00:21:12,309
<font color="#E5E5E5">nanak 70 so the big thing</font><font color="#CCCCCC"> though is the</font>

456
00:21:09,700 --> 00:21:15,100
stuff<font color="#CCCCCC"> that we've done</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> that when we</font>

457
00:21:12,309 --> 00:21:17,980
<font color="#CCCCCC">presented it at nanak 70 we had</font>

458
00:21:15,100 --> 00:21:20,799
discovery and polling we did not have

459
00:21:17,980 --> 00:21:23,409
enrichment<font color="#CCCCCC"> what that meant was that</font><font color="#E5E5E5"> and</font>

460
00:21:20,799 --> 00:21:25,570
on every poll cycle<font color="#CCCCCC"> we would actually be</font>

461
00:21:23,409 --> 00:21:28,210
getting<font color="#E5E5E5"> all the static information again</font>

462
00:21:25,570 --> 00:21:29,710
which had scalability problems both for

463
00:21:28,210 --> 00:21:31,509
the platform<font color="#CCCCCC"> at as well</font><font color="#E5E5E5"> as for the</font>

464
00:21:29,710 --> 00:21:33,399
network devices<font color="#CCCCCC"> by adding an enrichment</font>

465
00:21:31,509 --> 00:21:39,519
subsystem we have alleviated<font color="#CCCCCC"> those</font>

466
00:21:33,399 --> 00:21:41,529
concerns we<font color="#E5E5E5"> having implemented a we</font>

467
00:21:39,519 --> 00:21:44,350
<font color="#CCCCCC">actually have implemented a whole bunch</font>

468
00:21:41,529 --> 00:21:46,989
<font color="#E5E5E5">of plugins</font><font color="#CCCCCC"> to give us full</font><font color="#E5E5E5"> coverage</font><font color="#CCCCCC"> or</font>

469
00:21:44,350 --> 00:21:48,629
close to<font color="#E5E5E5"> full coverage</font><font color="#CCCCCC"> with a</font><font color="#E5E5E5"> network</font>

470
00:21:46,989 --> 00:21:51,820
which is a<font color="#E5E5E5"> multi-generational</font>

471
00:21:48,629 --> 00:21:53,889
<font color="#CCCCCC">multi-layered network like ours we</font>

472
00:21:51,820 --> 00:21:56,080
worked out scaling issues obviously<font color="#E5E5E5"> that</font>

473
00:21:53,889 --> 00:21:58,869
required a<font color="#E5E5E5"> lot of platform changes and</font>

474
00:21:56,080 --> 00:22:00,879
tuning and things like<font color="#E5E5E5"> that but most</font>

475
00:21:58,869 --> 00:22:02,470
importantly what we wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk to</font>

476
00:22:00,879 --> 00:22:04,090
you about is that today<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> actually</font>

477
00:22:02,470 --> 00:22:06,080
announcing the open sourcing of<font color="#CCCCCC"> our</font>

478
00:22:04,090 --> 00:22:11,780
<font color="#CCCCCC">Noctis</font>

479
00:22:06,080 --> 00:22:13,699
we're releasing<font color="#CCCCCC"> in an MVP we're open</font>

480
00:22:11,780 --> 00:22:15,168
sourcing the<font color="#E5E5E5"> core platform</font><font color="#CCCCCC"> that includes</font>

481
00:22:13,700 --> 00:22:19,490
the three<font color="#CCCCCC"> subsystems that</font><font color="#E5E5E5"> I've been</font>

482
00:22:15,169 --> 00:22:21,919
<font color="#E5E5E5">talking about we are open sourcing</font>

483
00:22:19,490 --> 00:22:24,980
<font color="#E5E5E5">interface metrics and enrichment plugins</font>

484
00:22:21,919 --> 00:22:27,140
<font color="#E5E5E5">this is a very small set a small subset</font>

485
00:22:24,980 --> 00:22:29,419
of the plugins we have but in in the<font color="#E5E5E5"> eye</font>

486
00:22:27,140 --> 00:22:30,799
in the spirit of releasing<font color="#E5E5E5"> an MVP this</font>

487
00:22:29,419 --> 00:22:36,049
<font color="#E5E5E5">is what will</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> going to mark it with</font>

488
00:22:30,799 --> 00:22:38,030
and<font color="#E5E5E5"> we are also introducing an</font>

489
00:22:36,049 --> 00:22:43,160
integration with<font color="#CCCCCC"> influx TB as a</font><font color="#E5E5E5"> time</font>

490
00:22:38,030 --> 00:22:46,250
<font color="#E5E5E5">series database so this is an example of</font>

491
00:22:43,160 --> 00:22:48,200
an influx TB dashboard that<font color="#CCCCCC"> you can</font>

492
00:22:46,250 --> 00:22:52,370
create<font color="#E5E5E5"> if you actually use</font><font color="#CCCCCC"> the open</font>

493
00:22:48,200 --> 00:22:55,540
source<font color="#E5E5E5"> time series the open source</font>

494
00:22:52,370 --> 00:23:00,370
implementation that<font color="#CCCCCC"> monopoly's has and</font>

495
00:22:55,540 --> 00:23:04,299
you can actually go<font color="#E5E5E5"> get it at this URL</font>

496
00:23:00,370 --> 00:23:04,299
<font color="#E5E5E5">and questions</font>

497
00:23:05,570 --> 00:23:14,039
[Applause]

498
00:23:15,700 --> 00:23:21,860
<font color="#E5E5E5">hey turn it out for a</font><font color="#CCCCCC"> comcast</font><font color="#E5E5E5"> it looks</font>

499
00:23:18,620 --> 00:23:24,530
like very<font color="#CCCCCC"> good stuff</font><font color="#E5E5E5"> and you know setup</font>

500
00:23:21,860 --> 00:23:27,799
<font color="#E5E5E5">the way</font><font color="#CCCCCC"> I would think</font><font color="#E5E5E5"> to us also with</font>

501
00:23:24,530 --> 00:23:31,549
the enrichment cache<font color="#E5E5E5"> you actually put</font>

502
00:23:27,799 --> 00:23:33,168
<font color="#CCCCCC">the enrichment data in with the you</font>

503
00:23:31,549 --> 00:23:35,299
<font color="#E5E5E5">wouldn't put</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> in the time series of</font>

504
00:23:33,169 --> 00:23:39,380
<font color="#E5E5E5">anyone sit on the side and</font><font color="#CCCCCC"> you join it</font>

505
00:23:35,299 --> 00:23:42,650
when you need<font color="#E5E5E5"> it</font><font color="#CCCCCC"> or something we okay so</font>

506
00:23:39,380 --> 00:23:46,610
<font color="#E5E5E5">the stitching happens</font><font color="#CCCCCC"> actually at the</font>

507
00:23:42,650 --> 00:23:49,970
time<font color="#E5E5E5"> of polling the pulling plug-in can</font>

508
00:23:46,610 --> 00:23:52,129
actually choose to<font color="#E5E5E5"> use gold and get data</font>

509
00:23:49,970 --> 00:23:55,700
from<font color="#E5E5E5"> the device or actually use the data</font>

510
00:23:52,130 --> 00:23:58,549
<font color="#E5E5E5">from the cache so but what happens is</font>

511
00:23:55,700 --> 00:24:01,669
when the polling<font color="#E5E5E5"> plugin is done what</font>

512
00:23:58,549 --> 00:24:03,559
comes out of<font color="#E5E5E5"> this is a consistent model</font>

513
00:24:01,669 --> 00:24:05,690
<font color="#CCCCCC">actually I forgot</font><font color="#E5E5E5"> I didn't really touch</font>

514
00:24:03,559 --> 00:24:07,070
upon that<font color="#E5E5E5"> we actually have defined a</font>

515
00:24:05,690 --> 00:24:08,929
very different internal<font color="#E5E5E5"> models for</font>

516
00:24:07,070 --> 00:24:11,000
everything so for example taking<font color="#E5E5E5"> the</font>

517
00:24:08,929 --> 00:24:13,340
example<font color="#E5E5E5"> of interfaces when we collect</font>

518
00:24:11,000 --> 00:24:14,960
interface metrics no matter what

519
00:24:13,340 --> 00:24:16,970
platform<font color="#CCCCCC"> what version what we're</font>

520
00:24:14,960 --> 00:24:19,880
collecting<font color="#E5E5E5"> interface metrics from</font><font color="#CCCCCC"> V</font>

521
00:24:16,970 --> 00:24:21,110
free<font color="#E5E5E5"> plugin must produce interface</font>

522
00:24:19,880 --> 00:24:23,419
<font color="#E5E5E5">metrics which has a certain set of</font>

523
00:24:21,110 --> 00:24:26,090
metrics<font color="#E5E5E5"> and a certain set</font><font color="#CCCCCC"> of dimensions</font>

524
00:24:23,419 --> 00:24:27,650
<font color="#CCCCCC">or tags and those dimensions or tags</font>

525
00:24:26,090 --> 00:24:30,470
could either come from<font color="#E5E5E5"> the device or</font>

526
00:24:27,650 --> 00:24:34,159
come<font color="#E5E5E5"> from the enrichment cache does</font><font color="#CCCCCC"> it</font>

527
00:24:30,470 --> 00:24:37,730
make<font color="#CCCCCC"> sense okay</font><font color="#E5E5E5"> but I mean it</font><font color="#CCCCCC"> seems like</font>

528
00:24:34,159 --> 00:24:40,580
extra if you're storing it and every

529
00:24:37,730 --> 00:24:43,520
metric<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> you know all this</font>

530
00:24:40,580 --> 00:24:45,590
metadata in<font color="#E5E5E5"> the same place that's kind</font>

531
00:24:43,520 --> 00:24:47,780
of redundant<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's always</font><font color="#E5E5E5"> the</font>

532
00:24:45,590 --> 00:24:50,689
same<font color="#CCCCCC"> or the same for days on end or that</font>

533
00:24:47,780 --> 00:24:52,908
is that is<font color="#CCCCCC"> true but most</font><font color="#E5E5E5"> time series</font>

534
00:24:50,690 --> 00:24:55,700
databases actually optimize that oh yeah

535
00:24:52,909 --> 00:24:56,360
<font color="#E5E5E5">yeah so we we count on essentially that</font>

536
00:24:55,700 --> 00:24:58,190
yes

537
00:24:56,360 --> 00:25:00,320
well<font color="#E5E5E5"> oftentimes the enrichments change</font>

538
00:24:58,190 --> 00:25:02,090
over time as well<font color="#E5E5E5"> right they do so you</font>

539
00:25:00,320 --> 00:25:03,230
don't<font color="#E5E5E5"> want to store it with</font><font color="#CCCCCC"> the with the</font>

540
00:25:02,090 --> 00:25:05,539
source data so that<font color="#CCCCCC"> if you do</font>

541
00:25:03,230 --> 00:25:08,030
aggregations based on those that you get

542
00:25:05,539 --> 00:25:13,850
an<font color="#E5E5E5"> accurate answer yeah okay yeah that's</font>

543
00:25:08,030 --> 00:25:17,059
a good thanks<font color="#CCCCCC"> hi I did hear from Marissa</font>

544
00:25:13,850 --> 00:25:19,580
a quick question<font color="#CCCCCC"> on how granular is the</font>

545
00:25:17,059 --> 00:25:23,059
time<font color="#CCCCCC"> Siri timestamps on the time series</font>

546
00:25:19,580 --> 00:25:27,408
<font color="#E5E5E5">graph is it millisecond granularity one</font>

547
00:25:23,059 --> 00:25:29,270
second<font color="#E5E5E5"> we are collecting so plugins okay</font>

548
00:25:27,409 --> 00:25:31,130
because<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> pulling it's not gonna be</font>

549
00:25:29,270 --> 00:25:33,710
<font color="#CCCCCC">accurate</font><font color="#E5E5E5"> it is</font><font color="#CCCCCC"> going to be the time when</font>

550
00:25:31,130 --> 00:25:36,890
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> made it to the</font><font color="#CCCCCC"> boolean</font>

551
00:25:33,710 --> 00:25:39,679
collection system<font color="#E5E5E5"> the</font><font color="#CCCCCC"> plug-in is</font>

552
00:25:36,890 --> 00:25:41,179
<font color="#E5E5E5">configurable you there's a parameter</font>

553
00:25:39,679 --> 00:25:43,010
called execute frequency so as

554
00:25:41,179 --> 00:25:45,710
frequently as you<font color="#E5E5E5"> wanted to collect the</font>

555
00:25:43,010 --> 00:25:47,600
data<font color="#CCCCCC"> currently in our production system</font>

556
00:25:45,710 --> 00:25:52,190
we have set it to collect<font color="#E5E5E5"> to every 60</font>

557
00:25:47,600 --> 00:25:55,100
seconds<font color="#E5E5E5"> we could go down more for some</font>

558
00:25:52,190 --> 00:25:57,320
devices<font color="#CCCCCC"> rest'll devices sure but some of</font>

559
00:25:55,100 --> 00:25:59,928
the other platforms<font color="#CCCCCC"> they just won't</font><font color="#E5E5E5"> be</font>

560
00:25:57,320 --> 00:26:01,399
<font color="#CCCCCC">able to</font><font color="#E5E5E5"> handle</font><font color="#CCCCCC"> the SNMP load</font><font color="#E5E5E5"> okay</font>

561
00:25:59,929 --> 00:26:04,159
<font color="#E5E5E5">think it's just</font><font color="#CCCCCC"> by a student telemetry</font>

562
00:26:01,400 --> 00:26:08,720
has<font color="#CCCCCC"> to come in</font><font color="#E5E5E5"> I believe our back end is</font>

563
00:26:04,159 --> 00:26:12,919
supports one second resolution<font color="#E5E5E5"> yes</font><font color="#CCCCCC"> but</font>

564
00:26:08,720 --> 00:26:14,990
we<font color="#CCCCCC"> poll currently at</font><font color="#E5E5E5"> 60 second also just</font>

565
00:26:12,919 --> 00:26:17,750
an implementation<font color="#CCCCCC"> detail the timestamp</font>

566
00:26:14,990 --> 00:26:21,039
resolution is millisecond right yeah

567
00:26:17,750 --> 00:26:21,039
that's<font color="#E5E5E5"> what the platform is</font><font color="#CCCCCC"> capable of</font>

568
00:26:22,830 --> 00:26:26,340
now the questions

569
00:26:26,669 --> 00:26:35,959
thanks guys

570
00:26:29,410 --> 00:26:35,959
[Applause]

571
00:26:40,980 --> 00:26:43,040
you

