1
00:00:11,059 --> 00:00:15,850
Hey

2
00:00:13,260 --> 00:00:18,400
get<font color="#E5E5E5"> started here</font>

3
00:00:15,850 --> 00:00:21,910
talk is<font color="#E5E5E5"> called new data architectures</font>

4
00:00:18,400 --> 00:00:23,650
<font color="#CCCCCC">for Network flow analytics and before</font>

5
00:00:21,910 --> 00:00:25,000
<font color="#CCCCCC">just jumping into the talk</font><font color="#E5E5E5"> I want to</font>

6
00:00:23,650 --> 00:00:28,810
<font color="#CCCCCC">give you</font><font color="#E5E5E5"> guys a brief introduction of</font>

7
00:00:25,000 --> 00:00:31,750
<font color="#E5E5E5">myself my name is</font><font color="#CCCCCC"> benjin a lot of people</font>

8
00:00:28,810 --> 00:00:33,699
call<font color="#CCCCCC"> me FJ</font><font color="#E5E5E5"> and I'm a co-founder</font><font color="#CCCCCC"> of a</font>

9
00:00:31,750 --> 00:00:37,269
<font color="#E5E5E5">technology company based out in the bay</font>

10
00:00:33,700 --> 00:00:39,580
area called imply<font color="#E5E5E5"> and actually prior to</font>

11
00:00:37,270 --> 00:00:41,770
the<font color="#E5E5E5"> startup world</font><font color="#CCCCCC"> I spent most of my</font>

12
00:00:39,580 --> 00:00:44,920
<font color="#CCCCCC">career in</font><font color="#E5E5E5"> building highly available</font>

13
00:00:41,770 --> 00:00:46,780
highly scalable distributed systems<font color="#CCCCCC"> so</font>

14
00:00:44,920 --> 00:00:48,850
this talk will actually<font color="#E5E5E5"> focus a lot on</font>

15
00:00:46,780 --> 00:00:51,220
<font color="#CCCCCC">my experience</font><font color="#E5E5E5"> on working with network</font>

16
00:00:48,850 --> 00:00:53,680
flow data and building out different

17
00:00:51,220 --> 00:00:57,820
<font color="#E5E5E5">types of databases and</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> systems for</font>

18
00:00:53,680 --> 00:00:59,710
<font color="#E5E5E5">network flow data so just a brief</font>

19
00:00:57,820 --> 00:01:01,570
<font color="#CCCCCC">overview</font><font color="#E5E5E5"> of this talk</font><font color="#CCCCCC"> what I would</font>

20
00:00:59,710 --> 00:01:04,989
recovering is really some of<font color="#CCCCCC"> the</font>

21
00:01:01,570 --> 00:01:07,180
problems I see<font color="#E5E5E5"> today with</font><font color="#CCCCCC"> network flow</font>

22
00:01:04,989 --> 00:01:09,520
analytics<font color="#E5E5E5"> I'll be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about</font>

23
00:01:07,180 --> 00:01:11,740
different technologies<font color="#CCCCCC"> that we use to</font>

24
00:01:09,520 --> 00:01:13,869
<font color="#E5E5E5">solve some of these problems</font><font color="#CCCCCC"> I'm going</font>

25
00:01:11,740 --> 00:01:15,640
to be<font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> a class of databases</font>

26
00:01:13,870 --> 00:01:17,560
a new class of databases called

27
00:01:15,640 --> 00:01:19,990
<font color="#E5E5E5">operational analytics data bases and</font>

28
00:01:17,560 --> 00:01:21,909
also<font color="#E5E5E5"> going to be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about an open</font>

29
00:01:19,990 --> 00:01:24,130
source<font color="#CCCCCC"> project called</font><font color="#E5E5E5"> Apache druid which</font>

30
00:01:21,909 --> 00:01:25,329
is something<font color="#CCCCCC"> that I work on that's</font><font color="#E5E5E5"> kind</font>

31
00:01:24,130 --> 00:01:27,460
of relate<font color="#CCCCCC"> to this whole idea</font><font color="#E5E5E5"> of</font>

32
00:01:25,329 --> 00:01:29,139
<font color="#E5E5E5">operation I don't like databases</font><font color="#CCCCCC"> now I'm</font>

33
00:01:27,460 --> 00:01:31,059
<font color="#CCCCCC">going to be</font><font color="#E5E5E5"> going into details about</font><font color="#CCCCCC"> the</font>

34
00:01:29,140 --> 00:01:32,859
architecture<font color="#CCCCCC"> of how these operation</font><font color="#E5E5E5"> I</font>

35
00:01:31,060 --> 00:01:35,079
<font color="#E5E5E5">don't like databases work and how can</font>

36
00:01:32,859 --> 00:01:38,460
they be deployed<font color="#CCCCCC"> in</font><font color="#E5E5E5"> practice and at the</font>

37
00:01:35,079 --> 00:01:41,048
end<font color="#E5E5E5"> we'll take a few</font><font color="#CCCCCC"> questions as well</font>

38
00:01:38,460 --> 00:01:43,089
<font color="#E5E5E5">so just</font><font color="#CCCCCC"> getting started</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to</font>

39
00:01:41,049 --> 00:01:44,530
start with some very<font color="#CCCCCC"> high-level problems</font>

40
00:01:43,090 --> 00:01:46,630
and<font color="#E5E5E5"> then get into increasingly more</font>

41
00:01:44,530 --> 00:01:48,070
detail more sophistication<font color="#E5E5E5"> around some</font>

42
00:01:46,630 --> 00:01:51,189
of<font color="#E5E5E5"> the problems I've seen with</font><font color="#CCCCCC"> Network</font>

43
00:01:48,070 --> 00:01:53,740
flows so very<font color="#CCCCCC"> high-level I think we all</font>

44
00:01:51,189 --> 00:01:55,419
know this<font color="#CCCCCC"> network flow data continues to</font>

45
00:01:53,740 --> 00:01:57,729
<font color="#E5E5E5">grow in scale and complexity today</font>

46
00:01:55,420 --> 00:01:59,530
especially<font color="#CCCCCC"> a major enterprises</font><font color="#E5E5E5"> more</font>

47
00:01:57,729 --> 00:02:02,439
applications are being deployed<font color="#CCCCCC"> on the</font>

48
00:01:59,530 --> 00:02:04,840
network<font color="#CCCCCC"> and it's very very</font><font color="#E5E5E5"> critical</font><font color="#CCCCCC"> for</font>

49
00:02:02,439 --> 00:02:06,158
analysts operators and<font color="#E5E5E5"> even monitoring</font>

50
00:02:04,840 --> 00:02:08,259
teams out there<font color="#E5E5E5"> to understand</font>

51
00:02:06,159 --> 00:02:10,570
performance<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> network and also</font><font color="#E5E5E5"> to</font>

52
00:02:08,258 --> 00:02:12,700
be as quickly as possible<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

53
00:02:10,570 --> 00:02:14,980
troubleshoot issues in the network<font color="#E5E5E5"> so</font>

54
00:02:12,700 --> 00:02:17,260
this data it can be flowing<font color="#CCCCCC"> in</font><font color="#E5E5E5"> real time</font>

55
00:02:14,980 --> 00:02:19,450
a lot of<font color="#E5E5E5"> operators are working with live</font>

56
00:02:17,260 --> 00:02:21,190
data about their network but historical

57
00:02:19,450 --> 00:02:23,019
data is also important as well<font color="#E5E5E5"> in order</font>

58
00:02:21,190 --> 00:02:24,430
<font color="#CCCCCC">to</font><font color="#E5E5E5"> understand anomalies in order to</font>

59
00:02:23,020 --> 00:02:25,780
understand problems<font color="#E5E5E5"> in the network</font>

60
00:02:24,430 --> 00:02:27,520
<font color="#E5E5E5">especially</font><font color="#CCCCCC"> what's happening right now</font>

61
00:02:25,780 --> 00:02:29,730
<font color="#E5E5E5">you have to understand what has</font><font color="#CCCCCC"> happened</font>

62
00:02:27,520 --> 00:02:29,730
in the past

63
00:02:29,760 --> 00:02:35,470
so talking<font color="#CCCCCC"> very broadly about the data</font>

64
00:02:33,150 --> 00:02:37,930
flows that<font color="#E5E5E5"> can come in many</font><font color="#CCCCCC"> different</font>

65
00:02:35,470 --> 00:02:42,130
<font color="#E5E5E5">forms you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> have net flows at Flo's IP</font>

66
00:02:37,930 --> 00:02:44,680
fix<font color="#E5E5E5"> etc</font><font color="#CCCCCC"> Network data</font><font color="#E5E5E5"> can oftentimes also</font>

67
00:02:42,130 --> 00:02:46,720
be enriched with application level data

68
00:02:44,680 --> 00:02:48,940
<font color="#CCCCCC">so information about the types of</font>

69
00:02:46,720 --> 00:02:51,190
applications<font color="#CCCCCC"> running the</font><font color="#E5E5E5"> network as well</font>

70
00:02:48,940 --> 00:02:53,850
<font color="#CCCCCC">as user data so what types of</font><font color="#E5E5E5"> users are</font>

71
00:02:51,190 --> 00:02:56,680
what using what types<font color="#E5E5E5"> of applications</font>

72
00:02:53,850 --> 00:02:58,450
what's pretty common with<font color="#CCCCCC"> network flow</font>

73
00:02:56,680 --> 00:03:01,030
data that I've<font color="#E5E5E5"> seen is there's really</font>

74
00:02:58,450 --> 00:03:04,089
three<font color="#CCCCCC"> types of</font><font color="#E5E5E5"> components</font><font color="#CCCCCC"> to this data</font>

75
00:03:01,030 --> 00:03:06,190
<font color="#E5E5E5">so one there's a time stamp</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this</font>

76
00:03:04,090 --> 00:03:08,170
time stamp indicates when the<font color="#E5E5E5"> flow is</font>

77
00:03:06,190 --> 00:03:10,030
<font color="#E5E5E5">created when it occurred when some event</font>

78
00:03:08,170 --> 00:03:12,100
<font color="#E5E5E5">occurred and then there's a set</font><font color="#CCCCCC"> of</font>

79
00:03:10,030 --> 00:03:14,470
attributes<font color="#CCCCCC"> or dimensions so these are</font>

80
00:03:12,100 --> 00:03:16,120
properties that<font color="#E5E5E5"> describe the flow these</font>

81
00:03:14,470 --> 00:03:17,920
<font color="#E5E5E5">are things like your source address</font>

82
00:03:16,120 --> 00:03:19,780
source port destination address

83
00:03:17,920 --> 00:03:22,179
<font color="#CCCCCC">destination port and so on and so forth</font>

84
00:03:19,780 --> 00:03:24,310
so<font color="#CCCCCC"> attributes or dimensions are things</font>

85
00:03:22,180 --> 00:03:27,790
that you would group on as we do<font color="#E5E5E5"> our</font>

86
00:03:24,310 --> 00:03:29,560
analysis<font color="#CCCCCC"> and most of the time as you're</font>

87
00:03:27,790 --> 00:03:31,000
now as part<font color="#CCCCCC"> of your analysis and</font><font color="#E5E5E5"> part of</font>

88
00:03:29,560 --> 00:03:33,370
your<font color="#E5E5E5"> data you</font><font color="#CCCCCC"> also have a set of</font>

89
00:03:31,000 --> 00:03:34,720
measures or metrics as<font color="#CCCCCC"> well</font><font color="#E5E5E5"> so these are</font>

90
00:03:33,370 --> 00:03:36,519
the numbers you actually<font color="#CCCCCC"> want to crunch</font>

91
00:03:34,720 --> 00:03:38,530
<font color="#CCCCCC">as</font><font color="#E5E5E5"> part of any sort of analysis with</font>

92
00:03:36,519 --> 00:03:40,060
<font color="#CCCCCC">network flows so these are things like</font>

93
00:03:38,530 --> 00:03:41,739
just a number of flows it could be a

94
00:03:40,060 --> 00:03:43,660
number<font color="#E5E5E5"> of packets it can be bytes per</font>

95
00:03:41,739 --> 00:03:45,489
second<font color="#E5E5E5"> it could be quantiles and</font>

96
00:03:43,660 --> 00:03:47,890
histograms on performance<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> network</font>

97
00:03:45,489 --> 00:03:49,870
and so on and so forth<font color="#E5E5E5"> so measures are</font>

98
00:03:47,890 --> 00:03:51,700
<font color="#E5E5E5">usually numeric things that that you</font>

99
00:03:49,870 --> 00:03:58,180
want<font color="#E5E5E5"> to crunch and dimensions are things</font>

100
00:03:51,700 --> 00:03:59,980
that<font color="#E5E5E5"> you want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> group on so the use</font>

101
00:03:58,180 --> 00:04:02,049
case with network flow data<font color="#E5E5E5"> as I</font>

102
00:03:59,980 --> 00:04:03,670
mentioned a<font color="#CCCCCC"> very high level</font><font color="#E5E5E5"> we want to</font>

103
00:04:02,049 --> 00:04:05,680
be able<font color="#E5E5E5"> to monitor in the network we</font>

104
00:04:03,670 --> 00:04:08,589
want<font color="#CCCCCC"> to be able to proactively</font><font color="#E5E5E5"> detect</font>

105
00:04:05,680 --> 00:04:11,290
<font color="#E5E5E5">issues and when issues occur we want to</font>

106
00:04:08,590 --> 00:04:13,510
<font color="#E5E5E5">resolve them as fast as</font><font color="#CCCCCC"> possible going</font>

107
00:04:11,290 --> 00:04:15,190
<font color="#CCCCCC">into more detail about what does it</font><font color="#E5E5E5"> take</font>

108
00:04:13,510 --> 00:04:16,630
to resolve<font color="#E5E5E5"> issues with flows what does</font>

109
00:04:15,190 --> 00:04:18,790
it take to<font color="#CCCCCC"> resolve issues in</font><font color="#E5E5E5"> your</font>

110
00:04:16,630 --> 00:04:20,680
network<font color="#CCCCCC"> usually the types of queries</font>

111
00:04:18,790 --> 00:04:23,740
<font color="#CCCCCC">that are made on top of this flow data</font>

112
00:04:20,680 --> 00:04:25,900
<font color="#E5E5E5">tends to be</font><font color="#CCCCCC"> rank</font><font color="#E5E5E5"> and order</font><font color="#CCCCCC"> so for</font>

113
00:04:23,740 --> 00:04:27,850
example for a given<font color="#E5E5E5"> destination address</font>

114
00:04:25,900 --> 00:04:32,320
<font color="#CCCCCC">I want to see the top sources addresses</font>

115
00:04:27,850 --> 00:04:33,820
that it came<font color="#E5E5E5"> from</font><font color="#CCCCCC"> or it could be you</font>

116
00:04:32,320 --> 00:04:35,590
know a lot<font color="#E5E5E5"> of different types of top</font>

117
00:04:33,820 --> 00:04:36,960
<font color="#E5E5E5">ends on various</font><font color="#CCCCCC"> attributes of the</font>

118
00:04:35,590 --> 00:04:38,820
network

119
00:04:36,960 --> 00:04:41,099
a lot<font color="#CCCCCC"> of queries also involve search and</font>

120
00:04:38,820 --> 00:04:43,110
filter so perhaps<font color="#E5E5E5"> you want to be able to</font>

121
00:04:41,100 --> 00:04:45,270
<font color="#E5E5E5">resolve issues on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> particular subnet</font>

122
00:04:43,110 --> 00:04:48,750
address or on a particular<font color="#CCCCCC"> single IP</font>

123
00:04:45,270 --> 00:04:51,900
address so for the system used to<font color="#E5E5E5"> power</font>

124
00:04:48,750 --> 00:04:53,250
<font color="#E5E5E5">these types of</font><font color="#CCCCCC"> queries and to be able to</font>

125
00:04:51,900 --> 00:04:55,260
answer<font color="#E5E5E5"> these types of analytic queries</font>

126
00:04:53,250 --> 00:04:57,300
we want our analytic system in<font color="#E5E5E5"> general</font>

127
00:04:55,260 --> 00:04:59,250
to be very cheap<font color="#CCCCCC"> very efficient because</font>

128
00:04:57,300 --> 00:05:00,660
<font color="#E5E5E5">there's a lot of network data and we</font>

129
00:04:59,250 --> 00:05:05,850
don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to spend that much money on</font>

130
00:05:00,660 --> 00:05:08,040
hardware<font color="#E5E5E5"> okay so before</font><font color="#CCCCCC"> can I</font><font color="#E5E5E5"> just jump</font>

131
00:05:05,850 --> 00:05:09,300
<font color="#E5E5E5">into data architectures and jumping</font><font color="#CCCCCC"> into</font>

132
00:05:08,040 --> 00:05:11,700
<font color="#CCCCCC">and classifying different types of</font>

133
00:05:09,300 --> 00:05:13,440
systems<font color="#CCCCCC"> I thought I would</font><font color="#E5E5E5"> just go</font>

134
00:05:11,700 --> 00:05:15,750
<font color="#CCCCCC">through a</font><font color="#E5E5E5"> video of a</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> quick demo</font>

135
00:05:13,440 --> 00:05:17,580
just<font color="#CCCCCC"> to showcase</font><font color="#E5E5E5"> what it means to</font>

136
00:05:15,750 --> 00:05:20,400
diagnose something interesting

137
00:05:17,580 --> 00:05:22,650
<font color="#E5E5E5">within</font><font color="#CCCCCC"> Network flow data and this is</font>

138
00:05:20,400 --> 00:05:24,150
really<font color="#CCCCCC"> just</font><font color="#E5E5E5"> to provide context for the</font>

139
00:05:22,650 --> 00:05:25,530
rest of<font color="#E5E5E5"> this talk as we start going</font>

140
00:05:24,150 --> 00:05:27,929
<font color="#CCCCCC">through different</font><font color="#E5E5E5"> types of architectures</font>

141
00:05:25,530 --> 00:05:31,619
<font color="#E5E5E5">so this video and this demo is really</font>

142
00:05:27,930 --> 00:05:32,910
just about<font color="#E5E5E5"> UI</font><font color="#CCCCCC"> that's being used</font><font color="#E5E5E5"> it's</font>

143
00:05:31,620 --> 00:05:34,290
being powered<font color="#CCCCCC"> by</font><font color="#E5E5E5"> some of these data</font>

144
00:05:32,910 --> 00:05:36,360
systems<font color="#CCCCCC"> I'll be talking about a little</font>

145
00:05:34,290 --> 00:05:38,280
<font color="#CCCCCC">bit</font><font color="#E5E5E5"> later and how this UI can be used</font>

146
00:05:36,360 --> 00:05:46,620
for<font color="#CCCCCC"> solving different</font><font color="#E5E5E5"> types of problems</font>

147
00:05:38,280 --> 00:05:47,849
<font color="#CCCCCC">with flow data so</font><font color="#E5E5E5"> I don't know if</font>

148
00:05:46,620 --> 00:05:50,160
there's actually<font color="#CCCCCC"> any sound with this</font>

149
00:05:47,850 --> 00:05:53,100
<font color="#E5E5E5">video so I'm</font><font color="#CCCCCC"> basically just gonna kind</font>

150
00:05:50,160 --> 00:05:55,410
of commentate over<font color="#E5E5E5"> what's happening here</font>

151
00:05:53,100 --> 00:05:57,840
so this<font color="#E5E5E5"> is a UI describing flow data</font>

152
00:05:55,410 --> 00:06:00,600
<font color="#E5E5E5">this is actually live data that's</font>

153
00:05:57,840 --> 00:06:03,570
feeding<font color="#E5E5E5"> that's coming from implies own</font>

154
00:06:00,600 --> 00:06:06,630
<font color="#E5E5E5">network and our infrastructure is</font>

155
00:06:03,570 --> 00:06:09,270
actually<font color="#E5E5E5"> being entirely deployed in AWS</font>

156
00:06:06,630 --> 00:06:10,680
<font color="#E5E5E5">today so on the</font><font color="#CCCCCC"> left hand</font><font color="#E5E5E5"> side you</font><font color="#CCCCCC"> see</font>

157
00:06:09,270 --> 00:06:13,080
those dimensions and attributes<font color="#CCCCCC"> with</font>

158
00:06:10,680 --> 00:06:15,810
flows I'm talking about<font color="#E5E5E5"> like the</font>

159
00:06:13,080 --> 00:06:18,180
interface<font color="#E5E5E5"> the action source destination</font>

160
00:06:15,810 --> 00:06:21,330
<font color="#E5E5E5">address on the right hand side we</font><font color="#CCCCCC"> have</font>

161
00:06:18,180 --> 00:06:22,800
various types<font color="#CCCCCC"> of measures in this in</font>

162
00:06:21,330 --> 00:06:28,890
this<font color="#CCCCCC"> example</font><font color="#E5E5E5"> right now we're really just</font>

163
00:06:22,800 --> 00:06:31,290
<font color="#E5E5E5">looking</font><font color="#CCCCCC"> at like account of flows and at</font>

164
00:06:28,890 --> 00:06:32,610
some point<font color="#E5E5E5"> I'm gonna actually think when</font>

165
00:06:31,290 --> 00:06:33,750
I recorded<font color="#E5E5E5"> this video I'm</font><font color="#CCCCCC"> going to start</font>

166
00:06:32,610 --> 00:06:35,730
dragging and dropping different

167
00:06:33,750 --> 00:06:38,850
attributes<font color="#E5E5E5"> into the center and going</font>

168
00:06:35,730 --> 00:06:42,150
<font color="#E5E5E5">through a workflow basically diagnosing</font>

169
00:06:38,850 --> 00:06:43,950
and understanding why<font color="#CCCCCC"> traffic is getting</font>

170
00:06:42,150 --> 00:06:45,929
rejected<font color="#E5E5E5"> in our network</font><font color="#CCCCCC"> but right now I</font>

171
00:06:43,950 --> 00:06:47,520
think<font color="#E5E5E5"> so if you see on the</font><font color="#CCCCCC"> right-hand</font>

172
00:06:45,930 --> 00:06:49,860
<font color="#CCCCCC">side it's just a bunch of</font><font color="#E5E5E5"> different</font>

173
00:06:47,520 --> 00:06:50,128
types<font color="#E5E5E5"> of measures or metrics</font><font color="#CCCCCC"> relate</font><font color="#E5E5E5"> to</font>

174
00:06:49,860 --> 00:06:53,550
flow

175
00:06:50,129 --> 00:06:55,739
things like<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> bytes per second</font><font color="#CCCCCC"> bits</font>

176
00:06:53,550 --> 00:06:58,919
per second<font color="#E5E5E5"> percentage</font><font color="#CCCCCC"> of traffic</font><font color="#E5E5E5"> that's</font>

177
00:06:55,739 --> 00:07:00,659
accepted or rejected<font color="#CCCCCC"> and with any good</font>

178
00:06:58,919 --> 00:07:02,188
kind of<font color="#E5E5E5"> network flow system we want to</font>

179
00:07:00,659 --> 00:07:03,779
be able to slice and dice these metrics

180
00:07:02,189 --> 00:07:12,179
<font color="#E5E5E5">based on the dimensions</font><font color="#CCCCCC"> and attributes</font>

181
00:07:03,779 --> 00:07:14,279
<font color="#E5E5E5">of the data so here what we're</font><font color="#CCCCCC"> looking</font>

182
00:07:12,179 --> 00:07:17,729
at is we're just<font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> account of</font>

183
00:07:14,279 --> 00:07:19,499
flows over<font color="#E5E5E5"> the</font><font color="#CCCCCC"> latest</font><font color="#E5E5E5"> hour</font><font color="#CCCCCC"> you know</font>

184
00:07:17,729 --> 00:07:20,729
there's there's various<font color="#E5E5E5"> other views we</font>

185
00:07:19,499 --> 00:07:23,969
can<font color="#E5E5E5"> look at we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> look at maybe the</font>

186
00:07:20,729 --> 00:07:26,159
<font color="#E5E5E5">last six hours latest day</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> dragging</font>

187
00:07:23,969 --> 00:07:28,050
action<font color="#E5E5E5"> to the center what we're looking</font>

188
00:07:26,159 --> 00:07:29,879
<font color="#E5E5E5">at are the actions that are</font><font color="#CCCCCC"> happening</font>

189
00:07:28,050 --> 00:07:32,069
<font color="#E5E5E5">actually in our own internal network</font>

190
00:07:29,879 --> 00:07:34,889
<font color="#CCCCCC">which percentage</font><font color="#E5E5E5"> of traffic is accepted</font>

191
00:07:32,069 --> 00:07:37,349
which percent is rejected<font color="#CCCCCC"> over the last</font>

192
00:07:34,889 --> 00:07:39,509
hour<font color="#E5E5E5"> and I believe what I'm gonna do now</font>

193
00:07:37,349 --> 00:07:41,789
is<font color="#CCCCCC"> actually just filter in and really</font>

194
00:07:39,509 --> 00:07:43,499
look at<font color="#CCCCCC"> the rejected traffic as you can</font>

195
00:07:41,789 --> 00:07:44,789
see here there's a non-trivial set of

196
00:07:43,499 --> 00:07:47,189
flows in our network that's<font color="#E5E5E5"> being</font>

197
00:07:44,789 --> 00:07:50,279
rejected<font color="#CCCCCC"> so the immediate question that</font>

198
00:07:47,189 --> 00:07:59,369
comes is why why<font color="#CCCCCC"> are so many flows being</font>

199
00:07:50,279 --> 00:08:00,749
rejected what's the cause of it<font color="#CCCCCC"> so one</font>

200
00:07:59,369 --> 00:08:02,999
of the things might investigate<font color="#E5E5E5"> right</font>

201
00:08:00,749 --> 00:08:04,619
away is the<font color="#E5E5E5"> destination port in which</font>

202
00:08:02,999 --> 00:08:06,059
the rejected traffic is happening and

203
00:08:04,619 --> 00:08:08,729
what we can<font color="#CCCCCC"> actually see here through</font>

204
00:08:06,059 --> 00:08:11,699
this UI is most of the<font color="#E5E5E5"> rejected traffic</font>

205
00:08:08,729 --> 00:08:14,369
is actually<font color="#E5E5E5"> happening</font><font color="#CCCCCC"> on poor 63 79 and</font>

206
00:08:11,699 --> 00:08:17,279
maybe<font color="#CCCCCC"> why actually want</font><font color="#E5E5E5"> to understand on</font>

207
00:08:14,369 --> 00:08:20,189
port<font color="#CCCCCC"> 63 79</font><font color="#E5E5E5"> what are the top destination</font>

208
00:08:17,279 --> 00:08:22,469
addresses<font color="#E5E5E5"> in which flow tractive traffic</font>

209
00:08:20,189 --> 00:08:24,659
is<font color="#CCCCCC"> getting rejected</font><font color="#E5E5E5"> on so here we see a</font>

210
00:08:22,469 --> 00:08:26,519
<font color="#E5E5E5">particular IP in our network is where</font>

211
00:08:24,659 --> 00:08:27,959
the vast<font color="#CCCCCC"> majority of rejected flows is</font>

212
00:08:26,519 --> 00:08:32,099
coming from so we can actually search

213
00:08:27,959 --> 00:08:33,419
filter and focus entirely on<font color="#E5E5E5"> this IP and</font>

214
00:08:32,099 --> 00:08:35,370
look at the service name<font color="#E5E5E5"> of this IP</font>

215
00:08:33,419 --> 00:08:38,519
<font color="#E5E5E5">which in this case it's an unmanaged</font>

216
00:08:35,370 --> 00:08:40,679
service the<font color="#E5E5E5"> service name next thing we</font>

217
00:08:38,519 --> 00:08:42,000
want to do knowing<font color="#E5E5E5"> that a given IP is</font>

218
00:08:40,679 --> 00:08:44,098
where<font color="#E5E5E5"> most</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> rejected traffic is</font>

219
00:08:42,000 --> 00:08:46,560
<font color="#CCCCCC">coming from is look at the sources of</font>

220
00:08:44,099 --> 00:08:51,269
<font color="#CCCCCC">that traffic</font><font color="#E5E5E5"> so in this case what we see</font>

221
00:08:46,560 --> 00:08:53,099
<font color="#E5E5E5">is actually two</font><font color="#CCCCCC"> IPs</font><font color="#E5E5E5"> well generating</font>

222
00:08:51,269 --> 00:08:55,949
extremely uniform<font color="#CCCCCC"> traffic so</font><font color="#E5E5E5"> these two</font>

223
00:08:53,100 --> 00:08:57,839
sources<font color="#CCCCCC"> just comparing</font><font color="#E5E5E5"> their traffic it</font>

224
00:08:55,949 --> 00:08:59,790
looks like both<font color="#CCCCCC"> of these source IPS are</font>

225
00:08:57,839 --> 00:09:01,800
generating extremely uniform<font color="#E5E5E5"> traffic</font>

226
00:08:59,790 --> 00:09:04,800
<font color="#E5E5E5">against one of our destination</font><font color="#CCCCCC"> addresses</font>

227
00:09:01,800 --> 00:09:06,839
<font color="#E5E5E5">and we're directing all of that traffic</font>

228
00:09:04,800 --> 00:09:08,040
so the<font color="#CCCCCC"> workflow that</font><font color="#E5E5E5"> I'm trying to</font>

229
00:09:06,839 --> 00:09:09,720
showcase<font color="#CCCCCC"> to you right now and the</font>

230
00:09:08,040 --> 00:09:13,019
workflow<font color="#CCCCCC"> that I want to be</font><font color="#E5E5E5"> talking about</font>

231
00:09:09,720 --> 00:09:14,730
<font color="#E5E5E5">a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> later on is this one</font><font color="#CCCCCC"> of</font>

232
00:09:13,019 --> 00:09:16,980
being<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to arbitrarily slice and dice</font>

233
00:09:14,730 --> 00:09:19,110
flow data and really start<font color="#CCCCCC"> examining it</font>

234
00:09:16,980 --> 00:09:20,910
based on<font color="#E5E5E5"> an arbitrary set</font><font color="#CCCCCC"> of attributes</font>

235
00:09:19,110 --> 00:09:22,740
<font color="#CCCCCC">so try and understand</font><font color="#E5E5E5"> why rejected</font>

236
00:09:20,910 --> 00:09:24,920
traffic might be<font color="#E5E5E5"> happening so in this</font>

237
00:09:22,740 --> 00:09:27,060
case what we see<font color="#E5E5E5"> is there's two IPS that</font>

238
00:09:24,920 --> 00:09:28,259
<font color="#E5E5E5">issuing live traffic to one of our</font>

239
00:09:27,060 --> 00:09:30,268
destination<font color="#E5E5E5"> addresses we're rejecting</font>

240
00:09:28,259 --> 00:09:32,069
<font color="#E5E5E5">all of it we're looking</font><font color="#CCCCCC"> at this traffic</font>

241
00:09:30,269 --> 00:09:34,470
on a minute<font color="#CCCCCC"> Lea basis and it seems like</font>

242
00:09:32,069 --> 00:09:36,719
actually every<font color="#E5E5E5"> three seconds one of</font>

243
00:09:34,470 --> 00:09:38,880
these IPS<font color="#CCCCCC"> is issuing</font><font color="#E5E5E5"> a request so this</font>

244
00:09:36,720 --> 00:09:42,240
clearly<font color="#E5E5E5"> seems like automation gets one</font>

245
00:09:38,880 --> 00:09:44,009
of our<font color="#CCCCCC"> internal servers actually looking</font>

246
00:09:42,240 --> 00:09:46,380
into<font color="#E5E5E5"> what these source IP is are these</font>

247
00:09:44,009 --> 00:09:48,060
are<font color="#E5E5E5"> actually like</font><font color="#CCCCCC"> Amazon</font><font color="#E5E5E5"> servers which</font>

248
00:09:46,380 --> 00:09:50,339
is which is<font color="#CCCCCC"> kind of interesting</font><font color="#E5E5E5"> so it's</font>

249
00:09:48,060 --> 00:09:52,349
probably some other organization<font color="#E5E5E5"> that's</font>

250
00:09:50,339 --> 00:09:55,110
deployed<font color="#E5E5E5"> in AWS trying to connect to</font>

251
00:09:52,350 --> 00:09:57,029
trying<font color="#E5E5E5"> to connect to us but</font><font color="#CCCCCC"> hopefully</font>

252
00:09:55,110 --> 00:09:58,980
that gives you an idea<font color="#CCCCCC"> of kind of the</font>

253
00:09:57,029 --> 00:10:01,110
analytics workflow the exploratory

254
00:09:58,980 --> 00:10:03,350
<font color="#E5E5E5">workflow the investigative workflow that</font>

255
00:10:01,110 --> 00:10:07,290
we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to start doing</font><font color="#E5E5E5"> with flow traffic</font>

256
00:10:03,350 --> 00:10:09,180
<font color="#E5E5E5">so some of the challenges of</font><font color="#CCCCCC"> being able</font>

257
00:10:07,290 --> 00:10:12,089
<font color="#CCCCCC">to investigate flow traffic and</font>

258
00:10:09,180 --> 00:10:13,769
understand why things<font color="#E5E5E5"> are happening</font><font color="#CCCCCC"> why</font>

259
00:10:12,089 --> 00:10:15,750
trends<font color="#CCCCCC"> patterns</font><font color="#E5E5E5"> or anomalies are</font>

260
00:10:13,769 --> 00:10:17,759
happening<font color="#E5E5E5"> some of the challenges are</font>

261
00:10:15,750 --> 00:10:19,889
just<font color="#E5E5E5"> around the scale infrastructure</font>

262
00:10:17,759 --> 00:10:22,529
<font color="#CCCCCC">part to handle the data</font><font color="#E5E5E5"> and some of the</font>

263
00:10:19,889 --> 00:10:25,470
<font color="#E5E5E5">challenges around enabling very fast</font>

264
00:10:22,529 --> 00:10:29,910
investigative<font color="#CCCCCC"> Cory's on the data</font><font color="#E5E5E5"> so</font>

265
00:10:25,470 --> 00:10:31,620
looking at looking at flow data<font color="#E5E5E5"> today</font><font color="#CCCCCC"> if</font>

266
00:10:29,910 --> 00:10:33,750
you're a pretty large<font color="#E5E5E5"> enterprise if</font>

267
00:10:31,620 --> 00:10:35,269
you're dealing<font color="#CCCCCC"> with a non-trivial set of</font>

268
00:10:33,750 --> 00:10:38,189
flow data<font color="#E5E5E5"> you're probably dealing with</font>

269
00:10:35,269 --> 00:10:39,810
<font color="#E5E5E5">millions of events per second</font><font color="#CCCCCC"> and most</font>

270
00:10:38,189 --> 00:10:41,550
of this<font color="#E5E5E5"> data is coming in real time</font>

271
00:10:39,810 --> 00:10:43,609
however<font color="#CCCCCC"> you might have a bunch of</font>

272
00:10:41,550 --> 00:10:45,660
historical<font color="#CCCCCC"> data about</font><font color="#E5E5E5"> your flows as well</font>

273
00:10:43,610 --> 00:10:47,699
<font color="#E5E5E5">this data as I mentioned at the very</font>

274
00:10:45,660 --> 00:10:50,910
beginning<font color="#CCCCCC"> is becoming increasingly</font>

275
00:10:47,699 --> 00:10:53,579
<font color="#E5E5E5">complex</font><font color="#CCCCCC"> so complexity really relates in</font>

276
00:10:50,910 --> 00:10:55,920
my world<font color="#E5E5E5"> in my mind to dimensionality</font>

277
00:10:53,579 --> 00:10:57,779
<font color="#CCCCCC">and cardinality so dimensionality is</font>

278
00:10:55,920 --> 00:10:59,939
about having<font color="#E5E5E5"> many different attributes</font>

279
00:10:57,779 --> 00:11:01,620
in your flow data<font color="#CCCCCC"> so everything about</font>

280
00:10:59,939 --> 00:11:03,899
the<font color="#E5E5E5"> interfaces everything about the</font>

281
00:11:01,620 --> 00:11:05,550
source destination<font color="#E5E5E5"> ports and potentially</font>

282
00:11:03,899 --> 00:11:09,209
enriching this data with application

283
00:11:05,550 --> 00:11:11,430
information<font color="#CCCCCC"> as well</font><font color="#E5E5E5"> cardinality is this</font>

284
00:11:09,209 --> 00:11:13,589
term to describe<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of unique</font>

285
00:11:11,430 --> 00:11:15,550
<font color="#E5E5E5">values kind of within a single dimension</font>

286
00:11:13,589 --> 00:11:17,470
so if one<font color="#CCCCCC"> of your dimensions is</font>

287
00:11:15,550 --> 00:11:19,390
<font color="#CCCCCC">address and</font><font color="#E5E5E5"> you have millions of IP</font>

288
00:11:17,470 --> 00:11:21,310
addresses<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want to rank them on</font>

289
00:11:19,390 --> 00:11:23,560
some particular<font color="#CCCCCC"> metric</font><font color="#E5E5E5"> that can be a</font>

290
00:11:21,310 --> 00:11:25,630
<font color="#E5E5E5">very complex very difficult operation</font><font color="#CCCCCC"> to</font>

291
00:11:23,560 --> 00:11:27,640
do<font color="#E5E5E5"> if you have a lot of</font><font color="#CCCCCC"> unique</font><font color="#E5E5E5"> IP</font>

292
00:11:25,630 --> 00:11:30,790
addresses<font color="#E5E5E5"> or a lot of unique values</font>

293
00:11:27,640 --> 00:11:32,470
within<font color="#E5E5E5"> a single dimension another one of</font>

294
00:11:30,790 --> 00:11:34,180
the<font color="#E5E5E5"> challenges of</font><font color="#CCCCCC"> working with flow data</font>

295
00:11:32,470 --> 00:11:37,150
is just<font color="#E5E5E5"> around the structure of the data</font>

296
00:11:34,180 --> 00:11:39,189
<font color="#E5E5E5">so more and more so flow data is</font>

297
00:11:37,150 --> 00:11:41,740
<font color="#E5E5E5">becoming unstructured it could be</font>

298
00:11:39,190 --> 00:11:43,750
arbitrarily nested you could have JSON

299
00:11:41,740 --> 00:11:47,170
blobs which don't have a predefined

300
00:11:43,750 --> 00:11:48,730
schema to them<font color="#E5E5E5"> this the the events from</font>

301
00:11:47,170 --> 00:11:51,819
time to time<font color="#CCCCCC"> are evolving and constantly</font>

302
00:11:48,730 --> 00:11:53,590
<font color="#CCCCCC">changing so</font><font color="#E5E5E5"> your schema for one hour to</font>

303
00:11:51,820 --> 00:11:54,550
<font color="#CCCCCC">the next hour might be very different</font>

304
00:11:53,590 --> 00:11:57,040
because you're seeing very different

305
00:11:54,550 --> 00:11:59,939
types of events<font color="#E5E5E5"> so these are all</font>

306
00:11:57,040 --> 00:12:02,560
<font color="#CCCCCC">challenges</font><font color="#E5E5E5"> around both storing and</font>

307
00:11:59,940 --> 00:12:04,750
computing kind of the base flow<font color="#E5E5E5"> data</font>

308
00:12:02,560 --> 00:12:06,699
that we're<font color="#CCCCCC"> working with now in terms of</font>

309
00:12:04,750 --> 00:12:08,530
accessing<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> you know more and</font>

310
00:12:06,700 --> 00:12:10,060
<font color="#CCCCCC">more so</font><font color="#E5E5E5"> people are not issuing sequel</font>

311
00:12:08,530 --> 00:12:11,890
queries<font color="#E5E5E5"> and not issuing programmatic</font>

312
00:12:10,060 --> 00:12:13,959
queries against<font color="#E5E5E5"> the data people are</font>

313
00:12:11,890 --> 00:12:16,660
leveraging<font color="#E5E5E5"> you eyes</font><font color="#CCCCCC"> to investigate and</font>

314
00:12:13,960 --> 00:12:18,910
understand flow traffic<font color="#E5E5E5"> so a good UI</font>

315
00:12:16,660 --> 00:12:21,550
needs both reporting and exploring

316
00:12:18,910 --> 00:12:23,829
capabilities<font color="#E5E5E5"> and to leverage the UN or</font>

317
00:12:21,550 --> 00:12:25,990
do troubleshooting<font color="#CCCCCC"> you have to have very</font>

318
00:12:23,830 --> 00:12:28,720
<font color="#E5E5E5">fast</font><font color="#CCCCCC"> search and filter you have</font><font color="#E5E5E5"> to very</font>

319
00:12:25,990 --> 00:12:30,910
fast<font color="#E5E5E5"> drill down and this allows you to</font>

320
00:12:28,720 --> 00:12:32,830
very<font color="#E5E5E5"> quickly slice and dice the</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> to</font>

321
00:12:30,910 --> 00:12:35,890
pinpoint various issues<font color="#E5E5E5"> within your flow</font>

322
00:12:32,830 --> 00:12:39,040
traffic<font color="#CCCCCC"> and then the last</font><font color="#E5E5E5"> kind of</font>

323
00:12:35,890 --> 00:12:40,840
challenge with you is in general<font color="#E5E5E5"> is</font><font color="#CCCCCC"> in</font>

324
00:12:39,040 --> 00:12:42,910
most enterprises I see today there's

325
00:12:40,840 --> 00:12:44,680
<font color="#E5E5E5">really kind</font><font color="#CCCCCC"> of one central team that's</font>

326
00:12:42,910 --> 00:12:46,540
providing flow analytics<font color="#E5E5E5"> out to many</font>

327
00:12:44,680 --> 00:12:48,189
<font color="#E5E5E5">different other teams that require this</font>

328
00:12:46,540 --> 00:12:50,920
<font color="#E5E5E5">data so there's this</font><font color="#CCCCCC"> idea of</font>

329
00:12:48,190 --> 00:12:52,900
multi-tenancy<font color="#E5E5E5"> in</font><font color="#CCCCCC"> UI's which</font><font color="#E5E5E5"> is being</font>

330
00:12:50,920 --> 00:12:54,579
able to<font color="#E5E5E5"> support potentially thousands of</font>

331
00:12:52,900 --> 00:13:00,550
concurrent users trying<font color="#E5E5E5"> to access the</font>

332
00:12:54,580 --> 00:13:02,560
same data at the same time right<font color="#E5E5E5"> so to</font>

333
00:13:00,550 --> 00:13:04,810
solve these challenges<font color="#E5E5E5"> to really build a</font>

334
00:13:02,560 --> 00:13:06,729
system<font color="#E5E5E5"> that's great for understanding</font>

335
00:13:04,810 --> 00:13:08,380
flows and for troubleshooting<font color="#CCCCCC"> and</font>

336
00:13:06,730 --> 00:13:09,940
investigating<font color="#E5E5E5"> issues that we see in</font>

337
00:13:08,380 --> 00:13:11,410
flows there's a lot of different

338
00:13:09,940 --> 00:13:13,600
technologies that<font color="#E5E5E5"> we consider and</font>

339
00:13:11,410 --> 00:13:16,030
there's kind<font color="#CCCCCC"> of three broad classes of</font>

340
00:13:13,600 --> 00:13:18,760
technologies<font color="#E5E5E5"> that I see the most often</font>

341
00:13:16,030 --> 00:13:21,490
most oftenly deployed<font color="#E5E5E5"> so these</font>

342
00:13:18,760 --> 00:13:23,860
technologies are log search systems<font color="#E5E5E5"> so</font>

343
00:13:21,490 --> 00:13:26,380
this<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> elk stack these are search</font>

344
00:13:23,860 --> 00:13:29,140
systems such as<font color="#CCCCCC"> Splunk</font><font color="#E5E5E5"> and other systems</font>

345
00:13:26,380 --> 00:13:29,470
in that category<font color="#E5E5E5"> another data system I</font>

346
00:13:29,140 --> 00:13:32,199
see

347
00:13:29,470 --> 00:13:34,750
often our analytic query engines<font color="#E5E5E5"> so</font>

348
00:13:32,200 --> 00:13:36,880
sometimes these are traditional analytic

349
00:13:34,750 --> 00:13:38,530
databases such as<font color="#CCCCCC"> Vertica sometimes</font>

350
00:13:36,880 --> 00:13:42,040
there<font color="#E5E5E5"> are new sequel</font><font color="#CCCCCC"> hadoop solutions</font>

351
00:13:38,530 --> 00:13:44,319
such as presto<font color="#E5E5E5"> and then the last set of</font>

352
00:13:42,040 --> 00:13:46,750
technologies I see commonly deployed our

353
00:13:44,320 --> 00:13:49,390
time<font color="#E5E5E5"> series databases so the systems</font>

354
00:13:46,750 --> 00:13:51,940
such as<font color="#E5E5E5"> open TST</font><font color="#CCCCCC"> be Prometheus and</font>

355
00:13:49,390 --> 00:13:53,110
<font color="#CCCCCC">influx</font><font color="#E5E5E5"> DB as well and I'm</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> going to</font>

356
00:13:51,940 --> 00:13:55,090
<font color="#CCCCCC">actually talk</font><font color="#E5E5E5"> about some</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

357
00:13:53,110 --> 00:13:56,860
<font color="#E5E5E5">advantages and disadvantages</font><font color="#CCCCCC"> of these</font>

358
00:13:55,090 --> 00:13:58,420
different types<font color="#E5E5E5"> of systems and then</font>

359
00:13:56,860 --> 00:14:00,280
discuss<font color="#E5E5E5"> this idea of operational</font>

360
00:13:58,420 --> 00:14:02,740
analytic days databases which is a new

361
00:14:00,280 --> 00:14:05,170
architecture that's<font color="#CCCCCC"> potentially in my</font>

362
00:14:02,740 --> 00:14:07,330
mind<font color="#E5E5E5"> solving some of the the issues</font><font color="#CCCCCC"> that</font>

363
00:14:05,170 --> 00:14:10,209
<font color="#E5E5E5">we see with these three prop</font><font color="#CCCCCC"> three</font>

364
00:14:07,330 --> 00:14:14,830
legacy classic approaches to handling

365
00:14:10,210 --> 00:14:17,080
flows so the first set of systems are

366
00:14:14,830 --> 00:14:18,670
locks<font color="#E5E5E5"> or systems so this is very</font>

367
00:14:17,080 --> 00:14:20,830
<font color="#E5E5E5">commonly I see this use with network</font>

368
00:14:18,670 --> 00:14:23,740
traffic so the<font color="#CCCCCC"> ELQ stack and also Splunk</font>

369
00:14:20,830 --> 00:14:25,450
as well<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the major advantages of</font>

370
00:14:23,740 --> 00:14:27,760
systems<font color="#E5E5E5"> like</font><font color="#CCCCCC"> Splunk and elasticsearch</font>

371
00:14:25,450 --> 00:14:29,500
<font color="#E5E5E5">one is they're</font><font color="#CCCCCC"> very good at doing</font>

372
00:14:27,760 --> 00:14:32,230
real-time<font color="#E5E5E5"> ingest so you can feed</font><font color="#CCCCCC"> in live</font>

373
00:14:29,500 --> 00:14:34,030
flow traffic they're<font color="#E5E5E5"> very good for being</font>

374
00:14:32,230 --> 00:14:35,970
able to<font color="#E5E5E5"> handle handle</font><font color="#CCCCCC"> semi-structured</font>

375
00:14:34,030 --> 00:14:38,980
<font color="#E5E5E5">and unstructured data so you can</font><font color="#CCCCCC"> have</font>

376
00:14:35,970 --> 00:14:41,050
<font color="#E5E5E5">arbitrarily nested blobs of JSON and and</font>

377
00:14:38,980 --> 00:14:43,330
Avro and other data formats you can<font color="#E5E5E5"> just</font>

378
00:14:41,050 --> 00:14:45,370
kind of feed<font color="#E5E5E5"> into these systems</font><font color="#CCCCCC"> and then</font>

379
00:14:43,330 --> 00:14:48,400
they're also very<font color="#E5E5E5"> good at fast</font><font color="#CCCCCC"> search</font>

380
00:14:45,370 --> 00:14:50,470
and filter so investigation<font color="#E5E5E5"> in flow data</font>

381
00:14:48,400 --> 00:14:54,790
<font color="#E5E5E5">oftentimes</font><font color="#CCCCCC"> requires fast very fast</font><font color="#E5E5E5"> slow</font>

382
00:14:50,470 --> 00:14:56,740
and<font color="#E5E5E5"> search and filter</font><font color="#CCCCCC"> the problem that</font><font color="#E5E5E5"> I</font>

383
00:14:54,790 --> 00:15:00,579
usually<font color="#E5E5E5"> see talking of different people</font>

384
00:14:56,740 --> 00:15:02,860
<font color="#E5E5E5">that</font><font color="#CCCCCC"> UC systems</font><font color="#E5E5E5"> is around performance</font><font color="#CCCCCC"> so</font>

385
00:15:00,580 --> 00:15:05,470
one systems like the<font color="#CCCCCC"> elk stack and</font>

386
00:15:02,860 --> 00:15:06,970
<font color="#CCCCCC">Splunk</font><font color="#E5E5E5"> they're not they're not the most</font>

387
00:15:05,470 --> 00:15:09,430
performant when you have high

388
00:15:06,970 --> 00:15:11,140
dimensional high cardinality data<font color="#E5E5E5"> so if</font>

389
00:15:09,430 --> 00:15:13,479
<font color="#CCCCCC">your flow traffic</font><font color="#E5E5E5"> doesn't have you know</font>

390
00:15:11,140 --> 00:15:15,340
<font color="#E5E5E5">five attributes to pass 50 attributes if</font>

391
00:15:13,480 --> 00:15:17,590
it has a hundred<font color="#CCCCCC"> attributes and</font><font color="#E5E5E5"> you want</font>

392
00:15:15,340 --> 00:15:18,940
<font color="#E5E5E5">to group on</font><font color="#CCCCCC"> rank sort and order</font><font color="#E5E5E5"> all</font>

393
00:15:17,590 --> 00:15:20,050
these different<font color="#CCCCCC"> attributes you want to</font>

394
00:15:18,940 --> 00:15:22,210
slice and dice across all these

395
00:15:20,050 --> 00:15:23,829
<font color="#CCCCCC">attributes then a lot</font><font color="#E5E5E5"> of these</font><font color="#CCCCCC"> lobster</font>

396
00:15:22,210 --> 00:15:26,890
systems start really slowing<font color="#E5E5E5"> down in</font>

397
00:15:23,830 --> 00:15:29,530
<font color="#E5E5E5">terms of performance</font><font color="#CCCCCC"> another drawback</font>

398
00:15:26,890 --> 00:15:31,420
I've heard<font color="#E5E5E5"> often around</font><font color="#CCCCCC"> locks er systems</font>

399
00:15:29,530 --> 00:15:33,939
<font color="#E5E5E5">is their</font><font color="#CCCCCC"> performance for numerical</font>

400
00:15:31,420 --> 00:15:35,560
aggregation<font color="#E5E5E5"> so if you're just crunching</font>

401
00:15:33,940 --> 00:15:37,630
the number of flows maybe you want<font color="#E5E5E5"> to</font>

402
00:15:35,560 --> 00:15:39,969
count the<font color="#CCCCCC"> number of unique devices</font><font color="#E5E5E5"> that</font>

403
00:15:37,630 --> 00:15:41,740
are available<font color="#CCCCCC"> in</font><font color="#E5E5E5"> your in your network or</font>

404
00:15:39,970 --> 00:15:42,940
these types of<font color="#CCCCCC"> queries that require</font>

405
00:15:41,740 --> 00:15:45,130
adding a bunch of<font color="#E5E5E5"> numbers</font>

406
00:15:42,940 --> 00:15:46,660
together<font color="#E5E5E5"> these this is fundamentally</font><font color="#CCCCCC"> not</font>

407
00:15:45,130 --> 00:15:48,220
what the Elks definitely not what

408
00:15:46,660 --> 00:15:49,719
systems like<font color="#CCCCCC"> Splunk are designed</font><font color="#E5E5E5"> to do</font>

409
00:15:48,220 --> 00:15:51,790
they're really<font color="#CCCCCC"> designed for search and</font>

410
00:15:49,720 --> 00:15:56,650
filter and not so much<font color="#E5E5E5"> for metric</font>

411
00:15:51,790 --> 00:15:59,020
aggregation and crunching numbers so

412
00:15:56,650 --> 00:16:00,189
what<font color="#E5E5E5"> is designed for very fast analytic</font>

413
00:15:59,020 --> 00:16:02,230
queries and involved crunching numbers

414
00:16:00,190 --> 00:16:04,750
are what are known analytic query

415
00:16:02,230 --> 00:16:06,970
engines or OLAP systems<font color="#E5E5E5"> so systems like</font>

416
00:16:04,750 --> 00:16:08,800
<font color="#CCCCCC">Vertica system like presto</font><font color="#E5E5E5"> even more</font>

417
00:16:06,970 --> 00:16:11,350
old-school data warehouses<font color="#CCCCCC"> like Terra</font>

418
00:16:08,800 --> 00:16:14,229
data<font color="#E5E5E5"> and the way</font><font color="#CCCCCC"> that a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of these</font>

419
00:16:11,350 --> 00:16:16,240
databases<font color="#E5E5E5"> work</font><font color="#CCCCCC"> is they have a column</font>

420
00:16:14,230 --> 00:16:17,650
<font color="#CCCCCC">Orange it's storage which makes them</font>

421
00:16:16,240 --> 00:16:19,990
really really<font color="#E5E5E5"> good for crunching numbers</font>

422
00:16:17,650 --> 00:16:22,180
<font color="#CCCCCC">they're designed to support large</font>

423
00:16:19,990 --> 00:16:23,890
complex group<font color="#CCCCCC"> buys</font><font color="#E5E5E5"> that are designed to</font>

424
00:16:22,180 --> 00:16:25,599
<font color="#CCCCCC">support</font><font color="#E5E5E5"> all different types complex</font>

425
00:16:23,890 --> 00:16:27,430
aggregation so you can build histograms

426
00:16:25,600 --> 00:16:30,220
you can build quantiles<font color="#CCCCCC"> you can</font>

427
00:16:27,430 --> 00:16:33,670
calculate rates of a lot of different

428
00:16:30,220 --> 00:16:36,010
types of<font color="#E5E5E5"> flow traffic</font><font color="#CCCCCC"> the main</font><font color="#E5E5E5"> drawback</font>

429
00:16:33,670 --> 00:16:38,740
of a lot of analytic<font color="#E5E5E5"> databases actually</font>

430
00:16:36,010 --> 00:16:39,670
are<font color="#E5E5E5"> probably on the ingest side so</font>

431
00:16:38,740 --> 00:16:41,260
they're not really<font color="#CCCCCC"> designed for</font>

432
00:16:39,670 --> 00:16:42,939
real-time<font color="#E5E5E5"> ingest</font><font color="#CCCCCC"> so they're not</font><font color="#E5E5E5"> really</font>

433
00:16:41,260 --> 00:16:45,939
good<font color="#CCCCCC"> for streaming</font><font color="#E5E5E5"> and flow traffic</font>

434
00:16:42,940 --> 00:16:47,770
<font color="#CCCCCC">they're they</font><font color="#E5E5E5"> really require DBA to start</font>

435
00:16:45,940 --> 00:16:50,740
designing<font color="#E5E5E5"> schemas so if</font><font color="#CCCCCC"> your flow</font>

436
00:16:47,770 --> 00:16:53,980
traffic has nested<font color="#CCCCCC"> JSON or</font><font color="#E5E5E5"> has an</font>

437
00:16:50,740 --> 00:16:55,600
evolving schema<font color="#CCCCCC"> these types</font><font color="#E5E5E5"> of systems</font>

438
00:16:53,980 --> 00:16:58,090
are not really built to<font color="#E5E5E5"> deal with</font>

439
00:16:55,600 --> 00:17:00,580
changing schemas<font color="#E5E5E5"> and the final thing is</font>

440
00:16:58,090 --> 00:17:03,010
most analytic query engines things like

441
00:17:00,580 --> 00:17:04,810
presto and<font color="#CCCCCC"> Vertica are very slow for</font>

442
00:17:03,010 --> 00:17:06,849
<font color="#E5E5E5">search and filter</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> means that if you</font>

443
00:17:04,810 --> 00:17:08,889
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> start doing investigation by ad</font>

444
00:17:06,849 --> 00:17:14,290
<font color="#E5E5E5">hoc analysis of your data</font><font color="#CCCCCC"> this is not a</font>

445
00:17:08,890 --> 00:17:16,540
super<font color="#CCCCCC"> great</font><font color="#E5E5E5"> fit</font><font color="#CCCCCC"> last set of databases</font>

446
00:17:14,290 --> 00:17:18,930
<font color="#E5E5E5">here that I see starting to get more</font>

447
00:17:16,540 --> 00:17:22,359
popularity<font color="#E5E5E5"> our systems such</font><font color="#CCCCCC"> as</font>

448
00:17:18,930 --> 00:17:24,790
Prometheus<font color="#CCCCCC"> and flux DB</font><font color="#E5E5E5"> or open TS DB</font>

449
00:17:22,359 --> 00:17:26,740
which<font color="#E5E5E5"> are time series databases and the</font>

450
00:17:24,790 --> 00:17:29,620
way that time series databases<font color="#E5E5E5"> work is</font>

451
00:17:26,740 --> 00:17:32,620
that they're very very<font color="#E5E5E5"> efficient for</font><font color="#CCCCCC"> at</font>

452
00:17:29,620 --> 00:17:34,929
adding<font color="#CCCCCC"> numbers and then partitioning and</font>

453
00:17:32,620 --> 00:17:37,330
<font color="#E5E5E5">filtering on time so time series</font>

454
00:17:34,930 --> 00:17:39,100
databases have time<font color="#CCCCCC"> optimized charting</font>

455
00:17:37,330 --> 00:17:40,689
they have time optimized storage and

456
00:17:39,100 --> 00:17:44,110
then you can aggregate metric values

457
00:17:40,690 --> 00:17:46,660
extremely quickly<font color="#CCCCCC"> the main</font><font color="#E5E5E5"> drawback that</font>

458
00:17:44,110 --> 00:17:49,209
<font color="#E5E5E5">I've heard with systems like Prometheus</font>

459
00:17:46,660 --> 00:17:51,040
<font color="#E5E5E5">and influx DB is that they're</font><font color="#CCCCCC"> very slow</font>

460
00:17:49,210 --> 00:17:53,590
when you start grouping ranking and

461
00:17:51,040 --> 00:17:56,350
sorting on your dimensions which<font color="#E5E5E5"> are not</font>

462
00:17:53,590 --> 00:17:57,189
time<font color="#E5E5E5"> so if you want to look at a given</font>

463
00:17:56,350 --> 00:17:58,750
source<font color="#E5E5E5"> IP</font>

464
00:17:57,190 --> 00:18:00,850
and then all the destination IPS<font color="#E5E5E5"> that</font>

465
00:17:58,750 --> 00:18:02,500
feed into<font color="#CCCCCC"> that source IP and maybe all</font>

466
00:18:00,850 --> 00:18:05,110
the<font color="#CCCCCC"> interfaces across all those</font>

467
00:18:02,500 --> 00:18:07,030
destination IPs<font color="#CCCCCC"> this is a</font><font color="#E5E5E5"> three level</font>

468
00:18:05,110 --> 00:18:08,620
<font color="#CCCCCC">multi-dimensional group I this is</font>

469
00:18:07,030 --> 00:18:10,389
something<font color="#CCCCCC"> that time series databases are</font>

470
00:18:08,620 --> 00:18:13,300
<font color="#CCCCCC">not really</font><font color="#E5E5E5"> designed to do because it's a</font>

471
00:18:10,390 --> 00:18:14,590
<font color="#E5E5E5">pretty complex analytic queries</font><font color="#CCCCCC"> and then</font>

472
00:18:13,300 --> 00:18:16,629
<font color="#E5E5E5">the other drawback</font><font color="#CCCCCC"> of Time series</font>

473
00:18:14,590 --> 00:18:18,340
<font color="#CCCCCC">databases is they're not</font><font color="#E5E5E5"> great for</font>

474
00:18:16,630 --> 00:18:20,140
search and filter so as you start<font color="#CCCCCC"> doing</font>

475
00:18:18,340 --> 00:18:24,129
<font color="#E5E5E5">more investigations they're not great</font>

476
00:18:20,140 --> 00:18:25,330
for<font color="#E5E5E5"> fast slice and dice but what I want</font>

477
00:18:24,130 --> 00:18:26,950
<font color="#E5E5E5">to try and</font><font color="#CCCCCC"> highlight why talk about</font>

478
00:18:25,330 --> 00:18:30,399
<font color="#E5E5E5">three</font><font color="#CCCCCC"> different classes</font><font color="#E5E5E5"> of data systems</font>

479
00:18:26,950 --> 00:18:32,230
<font color="#CCCCCC">is each</font><font color="#E5E5E5"> of them has attributes which</font>

480
00:18:30,400 --> 00:18:34,090
make them really<font color="#E5E5E5"> I deal</font><font color="#CCCCCC"> with working</font>

481
00:18:32,230 --> 00:18:37,990
with network traffic<font color="#E5E5E5"> data with network</font>

482
00:18:34,090 --> 00:18:39,939
flow data and really recently we've seen

483
00:18:37,990 --> 00:18:42,310
a new class of<font color="#CCCCCC"> data system that's</font>

484
00:18:39,940 --> 00:18:43,990
starting to<font color="#CCCCCC"> emerge then the whole</font><font color="#E5E5E5"> idea</font>

485
00:18:42,310 --> 00:18:46,389
behind<font color="#E5E5E5"> this class of</font><font color="#CCCCCC"> data system is</font>

486
00:18:43,990 --> 00:18:48,910
trying<font color="#E5E5E5"> to combine ideas</font><font color="#CCCCCC"> from time series</font>

487
00:18:46,390 --> 00:18:51,130
data bases from<font color="#E5E5E5"> analytic</font><font color="#CCCCCC"> databases</font><font color="#E5E5E5"> and</font>

488
00:18:48,910 --> 00:18:54,190
<font color="#E5E5E5">also from slog search systems as well</font>

489
00:18:51,130 --> 00:18:58,540
<font color="#E5E5E5">and this new class of data system is</font>

490
00:18:54,190 --> 00:19:00,460
designed<font color="#E5E5E5"> to try and remove all</font><font color="#CCCCCC"> the cons</font>

491
00:18:58,540 --> 00:19:04,389
of<font color="#CCCCCC"> these three types</font><font color="#E5E5E5"> of databases and</font>

492
00:19:00,460 --> 00:19:06,010
merge all the pros together so I don't

493
00:19:04,390 --> 00:19:08,470
<font color="#CCCCCC">think</font><font color="#E5E5E5"> there's an industry standard term</font>

494
00:19:06,010 --> 00:19:10,540
for<font color="#E5E5E5"> this</font><font color="#CCCCCC"> class of database yet however</font>

495
00:19:08,470 --> 00:19:13,420
<font color="#CCCCCC">I'm gonna kind of make one up</font><font color="#E5E5E5"> and call</font>

496
00:19:10,540 --> 00:19:14,980
an operational<font color="#CCCCCC"> Aleks database and the</font>

497
00:19:13,420 --> 00:19:16,990
whole<font color="#CCCCCC"> idea behind this new class of</font>

498
00:19:14,980 --> 00:19:19,390
<font color="#E5E5E5">systems is is trying to combine the</font>

499
00:19:16,990 --> 00:19:22,150
<font color="#CCCCCC">benefits of time-series</font><font color="#E5E5E5"> analytic and</font>

500
00:19:19,390 --> 00:19:24,340
<font color="#E5E5E5">lock search systems so this new class of</font>

501
00:19:22,150 --> 00:19:26,740
<font color="#E5E5E5">database what it can do is it</font><font color="#CCCCCC"> can</font>

502
00:19:24,340 --> 00:19:29,230
provide<font color="#CCCCCC"> the ingest and the search and</font>

503
00:19:26,740 --> 00:19:32,550
filter capabilities of systems like<font color="#CCCCCC"> elk</font>

504
00:19:29,230 --> 00:19:35,380
<font color="#E5E5E5">and also</font><font color="#CCCCCC"> Splunk it</font><font color="#E5E5E5"> they store data</font>

505
00:19:32,550 --> 00:19:37,659
<font color="#CCCCCC">fundamentally in a column format similar</font>

506
00:19:35,380 --> 00:19:39,940
to<font color="#CCCCCC"> Vertica somewhere</font><font color="#E5E5E5"> to presto so the</font>

507
00:19:37,660 --> 00:19:41,650
idea<font color="#E5E5E5"> is you</font><font color="#CCCCCC"> can have all the query and</font>

508
00:19:39,940 --> 00:19:44,560
analytic capabilities of some of these

509
00:19:41,650 --> 00:19:46,870
analytic query engines and then<font color="#E5E5E5"> these</font>

510
00:19:44,560 --> 00:19:49,899
data<font color="#E5E5E5"> systems also have</font><font color="#CCCCCC"> time-specific</font>

511
00:19:46,870 --> 00:19:51,820
<font color="#CCCCCC">charting</font><font color="#E5E5E5"> time specific optimizations</font>

512
00:19:49,900 --> 00:19:54,520
similar to systems<font color="#E5E5E5"> like Prometheus and</font>

513
00:19:51,820 --> 00:19:56,050
also in flux as well<font color="#E5E5E5"> so the overall</font><font color="#CCCCCC"> idea</font>

514
00:19:54,520 --> 00:20:00,400
is we<font color="#E5E5E5"> can do the best of all three</font>

515
00:19:56,050 --> 00:20:02,350
worlds<font color="#E5E5E5"> so there's a bunch of different</font>

516
00:20:00,400 --> 00:20:04,030
types<font color="#E5E5E5"> of operational</font><font color="#CCCCCC"> analog databases</font>

517
00:20:02,350 --> 00:20:06,939
<font color="#E5E5E5">one point in</font><font color="#CCCCCC"> time there's really only</font>

518
00:20:04,030 --> 00:20:09,030
one<font color="#E5E5E5"> but now I would say there's five or</font>

519
00:20:06,940 --> 00:20:11,020
so that I hear about pretty frequently

520
00:20:09,030 --> 00:20:12,760
<font color="#CCCCCC">I'm one</font><font color="#E5E5E5"> of the</font>

521
00:20:11,020 --> 00:20:14,889
<font color="#E5E5E5">committers on</font><font color="#CCCCCC"> Apache</font><font color="#E5E5E5"> drew it so</font><font color="#CCCCCC"> I'm</font>

522
00:20:12,760 --> 00:20:16,780
obviously<font color="#E5E5E5"> very biased in</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> I think</font>

523
00:20:14,890 --> 00:20:18,340
it's the most popular operational

524
00:20:16,780 --> 00:20:19,629
analytics database out there and a<font color="#E5E5E5"> lot</font>

525
00:20:18,340 --> 00:20:20,760
<font color="#E5E5E5">of this talk</font><font color="#CCCCCC"> is gonna</font><font color="#E5E5E5"> focus on the</font>

526
00:20:19,630 --> 00:20:23,950
architecture of druid

527
00:20:20,760 --> 00:20:25,720
however there's<font color="#CCCCCC"> Scooba at</font><font color="#E5E5E5"> Facebook</font><font color="#CCCCCC"> so</font>

528
00:20:23,950 --> 00:20:27,820
for folks<font color="#CCCCCC"> that work</font><font color="#E5E5E5"> at Facebook or may</font>

529
00:20:25,720 --> 00:20:29,140
<font color="#CCCCCC">have interacted</font><font color="#E5E5E5"> with Facebook</font><font color="#CCCCCC"> scuba is</font>

530
00:20:27,820 --> 00:20:31,300
an example of an operational analytics

531
00:20:29,140 --> 00:20:34,060
database that's used for<font color="#CCCCCC"> all different</font>

532
00:20:31,300 --> 00:20:37,169
<font color="#E5E5E5">types of workloads at Facebook there's P</font>

533
00:20:34,060 --> 00:20:39,399
no<font color="#E5E5E5"> that's coming from LinkedIn there is</font>

534
00:20:37,170 --> 00:20:41,590
<font color="#CCCCCC">Paulo</font><font color="#E5E5E5"> which actually I think is now</font>

535
00:20:39,400 --> 00:20:44,020
called Daisy<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> coming from Baidu</font>

536
00:20:41,590 --> 00:20:47,760
<font color="#E5E5E5">and then there's</font><font color="#CCCCCC"> click house which is</font>

537
00:20:44,020 --> 00:20:50,590
made by<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Russian search engine Yandex</font>

538
00:20:47,760 --> 00:20:52,900
<font color="#E5E5E5">basically these four or five systems</font>

539
00:20:50,590 --> 00:20:54,790
<font color="#CCCCCC">architecture</font><font color="#E5E5E5"> aliy are virtually</font>

540
00:20:52,900 --> 00:20:57,220
identical they all have the same<font color="#E5E5E5"> ideas</font>

541
00:20:54,790 --> 00:21:00,850
they all combine<font color="#E5E5E5"> ideas from these legacy</font>

542
00:20:57,220 --> 00:21:02,770
systems<font color="#CCCCCC"> their storage</font><font color="#E5E5E5"> formats are almost</font>

543
00:21:00,850 --> 00:21:05,230
identical as well<font color="#E5E5E5"> so how they store</font><font color="#CCCCCC"> data</font>

544
00:21:02,770 --> 00:21:07,600
how they core data the fundamental

545
00:21:05,230 --> 00:21:09,160
<font color="#CCCCCC">actors is very very similar so I'm</font><font color="#E5E5E5"> gonna</font>

546
00:21:07,600 --> 00:21:11,290
<font color="#E5E5E5">talk about how these operational</font>

547
00:21:09,160 --> 00:21:13,750
analytics databases work<font color="#E5E5E5"> but I'm gonna</font>

548
00:21:11,290 --> 00:21:15,430
be using<font color="#E5E5E5"> druid as a case study</font><font color="#CCCCCC"> because</font>

549
00:21:13,750 --> 00:21:16,720
one it's an open source<font color="#E5E5E5"> project it's</font>

550
00:21:15,430 --> 00:21:18,910
part of<font color="#E5E5E5"> its incubating in the Apache</font>

551
00:21:16,720 --> 00:21:20,080
Software Foundation<font color="#E5E5E5"> and two it's because</font>

552
00:21:18,910 --> 00:21:21,640
it's<font color="#CCCCCC"> the one that I have the most</font>

553
00:21:20,080 --> 00:21:26,379
experience<font color="#E5E5E5"> working on and I understand</font>

554
00:21:21,640 --> 00:21:28,870
the<font color="#CCCCCC"> architecture</font><font color="#E5E5E5"> the most deeply so drew</font>

555
00:21:26,380 --> 00:21:31,210
it runs in production at many<font color="#CCCCCC"> different</font>

556
00:21:28,870 --> 00:21:33,070
companies<font color="#E5E5E5"> of many different sizes</font><font color="#CCCCCC"> I just</font>

557
00:21:31,210 --> 00:21:34,510
put up a<font color="#E5E5E5"> couple of links that you</font><font color="#CCCCCC"> can</font>

558
00:21:33,070 --> 00:21:36,760
find out the internet about how various

559
00:21:34,510 --> 00:21:38,350
people are using druid it is very very

560
00:21:36,760 --> 00:21:40,660
<font color="#E5E5E5">commonly</font><font color="#CCCCCC"> used for network traffic</font>

561
00:21:38,350 --> 00:21:47,919
<font color="#E5E5E5">Network flow analysis</font><font color="#CCCCCC"> and investigation</font>

562
00:21:40,660 --> 00:21:50,280
as well so how does druid store data so

563
00:21:47,920 --> 00:21:53,260
let's look at some raw data right now

564
00:21:50,280 --> 00:21:54,700
<font color="#CCCCCC">this might</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> - some raw flow data so</font>

565
00:21:53,260 --> 00:21:57,280
there's a<font color="#CCCCCC"> timestamp</font><font color="#E5E5E5"> of when the flow</font>

566
00:21:54,700 --> 00:21:59,020
occurred and then just for<font color="#CCCCCC"> simplicity</font>

567
00:21:57,280 --> 00:22:01,330
sake there's only two dimensions there's

568
00:21:59,020 --> 00:22:03,639
an action which was the was<font color="#CCCCCC"> the traffic</font>

569
00:22:01,330 --> 00:22:05,169
<font color="#E5E5E5">accepted or rejected and what was the</font>

570
00:22:03,640 --> 00:22:07,240
sort of the<font color="#E5E5E5"> protocol</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> flow and</font>

571
00:22:05,170 --> 00:22:11,200
then<font color="#CCCCCC"> the count of flows for a</font><font color="#E5E5E5"> particular</font>

572
00:22:07,240 --> 00:22:13,540
period<font color="#E5E5E5"> in time so the first thing that</font>

573
00:22:11,200 --> 00:22:15,910
druid actually does with the data is a

574
00:22:13,540 --> 00:22:18,399
pre aggregation<font color="#E5E5E5"> or summarization step</font>

575
00:22:15,910 --> 00:22:19,810
and in the summarization step what

576
00:22:18,400 --> 00:22:21,790
<font color="#CCCCCC">Rudy's going</font><font color="#E5E5E5"> to do and this is something</font>

577
00:22:19,810 --> 00:22:24,730
<font color="#E5E5E5">that's optional is it's going</font><font color="#CCCCCC"> to</font>

578
00:22:21,790 --> 00:22:27,159
truncate<font color="#E5E5E5"> the time in which raw data</font>

579
00:22:24,730 --> 00:22:30,070
appeared at and it's gonna<font color="#E5E5E5"> try and find</font>

580
00:22:27,160 --> 00:22:33,190
commonalities<font color="#E5E5E5"> basically in the</font>

581
00:22:30,070 --> 00:22:35,290
dimensions of the raw<font color="#E5E5E5"> data</font><font color="#CCCCCC"> so in this</font>

582
00:22:33,190 --> 00:22:37,690
case we're truncating data to an hourly

583
00:22:35,290 --> 00:22:39,970
granularity<font color="#E5E5E5"> and you can see that once we</font>

584
00:22:37,690 --> 00:22:41,470
truncate<font color="#E5E5E5"> the timestamp basically there's</font>

585
00:22:39,970 --> 00:22:43,750
a bunch of<font color="#CCCCCC"> different rows that have the</font>

586
00:22:41,470 --> 00:22:45,610
exact<font color="#E5E5E5"> same set of attributes and what we</font>

587
00:22:43,750 --> 00:22:48,460
can do with<font color="#E5E5E5"> this flow metric is we can</font>

588
00:22:45,610 --> 00:22:51,100
<font color="#CCCCCC">just aggregate it together and this</font><font color="#E5E5E5"> in</font>

589
00:22:48,460 --> 00:22:53,140
practice<font color="#CCCCCC"> can be very good at reducing</font>

590
00:22:51,100 --> 00:22:55,120
sort of the raw<font color="#E5E5E5"> data</font><font color="#CCCCCC"> you actually</font><font color="#E5E5E5"> end up</font>

591
00:22:53,140 --> 00:22:58,210
<font color="#E5E5E5">storing this system what you</font><font color="#CCCCCC"> trade</font><font color="#E5E5E5"> off</font>

592
00:22:55,120 --> 00:23:00,189
<font color="#E5E5E5">is information about the time and which</font>

593
00:22:58,210 --> 00:23:02,050
events occurred but<font color="#E5E5E5"> what you gain is</font>

594
00:23:00,190 --> 00:23:03,970
potentially a<font color="#E5E5E5"> lot of storage savings and</font>

595
00:23:02,050 --> 00:23:06,280
also performance improvements as well

596
00:23:03,970 --> 00:23:07,990
<font color="#E5E5E5">and in this</font><font color="#CCCCCC"> example we're not</font><font color="#E5E5E5"> losing any</font>

597
00:23:06,280 --> 00:23:10,690
fidelity of the<font color="#E5E5E5"> data</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> this flows</font>

598
00:23:07,990 --> 00:23:15,840
metric is still<font color="#CCCCCC"> gonna be</font><font color="#E5E5E5"> accurate</font><font color="#CCCCCC"> for</font>

599
00:23:10,690 --> 00:23:17,920
the<font color="#E5E5E5"> given</font><font color="#CCCCCC"> timestamp the next thing that</font>

600
00:23:15,840 --> 00:23:20,620
drew it and all<font color="#E5E5E5"> these operational</font>

601
00:23:17,920 --> 00:23:22,570
analytic<font color="#E5E5E5"> databases do is they partition</font>

602
00:23:20,620 --> 00:23:24,340
data by time so this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> how every time</font>

603
00:23:22,570 --> 00:23:27,429
<font color="#E5E5E5">series database works and this is how</font>

604
00:23:24,340 --> 00:23:30,100
Druid works as well<font color="#E5E5E5"> where once we roll</font>

605
00:23:27,430 --> 00:23:31,960
<font color="#CCCCCC">up the data then we look at can we</font><font color="#E5E5E5"> split</font>

606
00:23:30,100 --> 00:23:34,510
<font color="#E5E5E5">this data up by time in some meaningful</font>

607
00:23:31,960 --> 00:23:36,250
<font color="#E5E5E5">way</font><font color="#CCCCCC"> so in this example</font><font color="#E5E5E5"> what we're</font>

608
00:23:34,510 --> 00:23:39,250
actually doing<font color="#CCCCCC"> is we're partitioning</font>

609
00:23:36,250 --> 00:23:41,200
data<font color="#E5E5E5"> based on our so every shard of data</font>

610
00:23:39,250 --> 00:23:44,530
every partition of data within<font color="#E5E5E5"> druid is</font>

611
00:23:41,200 --> 00:23:46,960
representing an hour's worth of flows in

612
00:23:44,530 --> 00:23:49,930
practice<font color="#CCCCCC"> each one of these shards or</font>

613
00:23:46,960 --> 00:23:52,570
segments is<font color="#E5E5E5"> containing millions of rows</font>

614
00:23:49,930 --> 00:23:55,770
of actual data<font color="#CCCCCC"> but this level</font><font color="#E5E5E5"> of</font>

615
00:23:52,570 --> 00:23:58,210
partitioning allows us to do very<font color="#E5E5E5"> quick</font>

616
00:23:55,770 --> 00:24:00,340
<font color="#CCCCCC">queries based on time so if we're only</font>

617
00:23:58,210 --> 00:24:01,900
querying for<font color="#CCCCCC"> an hour's worth</font><font color="#E5E5E5"> of data</font><font color="#CCCCCC"> we</font>

618
00:24:00,340 --> 00:24:03,429
<font color="#E5E5E5">don't need to hit all these other shards</font>

619
00:24:01,900 --> 00:24:05,410
we can actually just<font color="#E5E5E5"> find the shard that</font>

620
00:24:03,430 --> 00:24:07,270
contains that the hours worth of data

621
00:24:05,410 --> 00:24:08,620
<font color="#E5E5E5">that we care about and only scan that</font>

622
00:24:07,270 --> 00:24:10,270
data<font color="#E5E5E5"> so it's one of the performance</font>

623
00:24:08,620 --> 00:24:14,709
improvements of our operational

624
00:24:10,270 --> 00:24:17,290
<font color="#CCCCCC">analytics</font><font color="#E5E5E5"> database</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> these shards</font><font color="#CCCCCC"> or</font>

625
00:24:14,710 --> 00:24:19,150
segments in Druid they are a very

626
00:24:17,290 --> 00:24:21,100
fundamental storage unit<font color="#E5E5E5"> they're</font>

627
00:24:19,150 --> 00:24:23,980
basically<font color="#E5E5E5"> immutable once they're created</font>

628
00:24:21,100 --> 00:24:26,350
<font color="#CCCCCC">and they're designed to be very read</font>

629
00:24:23,980 --> 00:24:27,790
optimized<font color="#E5E5E5"> so we don't have this</font>

630
00:24:26,350 --> 00:24:30,159
contention between reads and writes

631
00:24:27,790 --> 00:24:32,560
<font color="#E5E5E5">basically once a segment is created it's</font>

632
00:24:30,160 --> 00:24:35,290
designed to<font color="#E5E5E5"> be read as fast as possible</font>

633
00:24:32,560 --> 00:24:37,090
and<font color="#E5E5E5"> the paralyzation model how how an</font>

634
00:24:35,290 --> 00:24:38,470
operational analytic database<font color="#E5E5E5"> actually</font>

635
00:24:37,090 --> 00:24:40,299
scales<font color="#E5E5E5"> is you</font>

636
00:24:38,470 --> 00:24:42,159
kind of one thread<font color="#E5E5E5"> allocate to one</font>

637
00:24:40,299 --> 00:24:44,740
segment at a<font color="#CCCCCC"> time so when you add more</font>

638
00:24:42,159 --> 00:24:49,720
CPUs to<font color="#E5E5E5"> your cluster</font><font color="#CCCCCC"> you can stand a lot</font>

639
00:24:44,740 --> 00:24:51,190
<font color="#E5E5E5">of</font><font color="#CCCCCC"> data a lot more data in parallel so I</font>

640
00:24:49,720 --> 00:24:53,019
talked a little bit about<font color="#E5E5E5"> how it really</font>

641
00:24:51,190 --> 00:24:55,840
<font color="#CCCCCC">looks like a time series</font><font color="#E5E5E5"> database in how</font>

642
00:24:53,019 --> 00:24:57,519
partitions data based<font color="#E5E5E5"> on time</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

643
00:24:55,840 --> 00:24:59,649
really<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how true it looks actually</font>

644
00:24:57,519 --> 00:25:02,620
<font color="#CCCCCC">like an analytic database</font><font color="#E5E5E5"> and that</font><font color="#CCCCCC"> it</font>

645
00:24:59,649 --> 00:25:05,439
stores<font color="#E5E5E5"> all attributes and all dimensions</font>

646
00:25:02,620 --> 00:25:07,120
fundamentally in columns so column

647
00:25:05,440 --> 00:25:09,279
stores in the analytic database world

648
00:25:07,120 --> 00:25:11,139
<font color="#CCCCCC">are known for</font><font color="#E5E5E5"> being able to aggregate</font>

649
00:25:09,279 --> 00:25:12,850
numbers very very quickly

650
00:25:11,139 --> 00:25:14,439
they're<font color="#CCCCCC"> also known for</font><font color="#E5E5E5"> being</font><font color="#CCCCCC"> very good</font>

651
00:25:12,850 --> 00:25:18,219
at compressing different types of

652
00:25:14,440 --> 00:25:19,899
attributes<font color="#CCCCCC"> so in this case this is</font><font color="#E5E5E5"> an</font>

653
00:25:18,220 --> 00:25:23,529
<font color="#E5E5E5">example</font><font color="#CCCCCC"> of something called dictionary</font>

654
00:25:19,899 --> 00:25:25,750
coding the idea is in our flow data we

655
00:25:23,529 --> 00:25:28,960
might have an action dimension and a

656
00:25:25,750 --> 00:25:31,299
protocol dimension and we<font color="#E5E5E5"> might have two</font>

657
00:25:28,960 --> 00:25:33,639
<font color="#E5E5E5">values</font><font color="#CCCCCC"> for action accept or reject</font><font color="#E5E5E5"> and</font>

658
00:25:31,299 --> 00:25:35,950
as opposed<font color="#E5E5E5"> to storing these variable</font>

659
00:25:33,639 --> 00:25:38,678
length strings directly<font color="#E5E5E5"> we</font><font color="#CCCCCC"> can actually</font>

660
00:25:35,950 --> 00:25:41,470
assign an integer<font color="#E5E5E5"> value to each string</font>

661
00:25:38,679 --> 00:25:43,659
so<font color="#E5E5E5"> except get signed to a value of</font><font color="#CCCCCC"> zero</font>

662
00:25:41,470 --> 00:25:46,090
reject gets signed to a value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> one and</font>

663
00:25:43,659 --> 00:25:47,799
in terms of the protocol<font color="#E5E5E5"> TCP might get</font>

664
00:25:46,090 --> 00:25:49,840
signed to<font color="#E5E5E5"> a value of zero UDP gets</font>

665
00:25:47,799 --> 00:25:52,059
signed<font color="#E5E5E5"> to a value of one so when we</font>

666
00:25:49,840 --> 00:25:54,399
actually get end up<font color="#E5E5E5"> storing this data</font>

667
00:25:52,059 --> 00:25:56,230
<font color="#CCCCCC">within our database we're</font><font color="#E5E5E5"> not storing</font>

668
00:25:54,399 --> 00:25:58,508
<font color="#E5E5E5">these raw strings what we're storing is</font>

669
00:25:56,230 --> 00:26:00,220
integer encoded IDs and then there's a

670
00:25:58,509 --> 00:26:02,320
look<font color="#E5E5E5"> up between the integer value</font><font color="#CCCCCC"> and</font>

671
00:26:00,220 --> 00:26:03,490
the string value<font color="#E5E5E5"> and in practice</font>

672
00:26:02,320 --> 00:26:05,320
<font color="#CCCCCC">especially when you have a high</font>

673
00:26:03,490 --> 00:26:07,690
carnality dimension with a lot of<font color="#E5E5E5"> string</font>

674
00:26:05,320 --> 00:26:12,730
values<font color="#E5E5E5"> this can resort result in</font>

675
00:26:07,690 --> 00:26:15,909
significant storage savings<font color="#CCCCCC"> what other</font>

676
00:26:12,730 --> 00:26:17,740
thing here so<font color="#E5E5E5"> so drew it also looks in</font>

677
00:26:15,909 --> 00:26:19,960
all<font color="#CCCCCC"> operation outlet</font><font color="#E5E5E5"> databases they also</font>

678
00:26:17,740 --> 00:26:21,490
look in part like a search<font color="#E5E5E5"> system so</font>

679
00:26:19,960 --> 00:26:24,129
they look a little bit<font color="#CCCCCC"> like</font><font color="#E5E5E5"> elk as well</font>

680
00:26:21,490 --> 00:26:26,289
<font color="#E5E5E5">and the idea</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> create</font>

681
00:26:24,129 --> 00:26:29,408
different<font color="#CCCCCC"> types</font><font color="#E5E5E5"> of search indexes for</font>

682
00:26:26,289 --> 00:26:32,408
very fast<font color="#CCCCCC"> search and filter so in this</font>

683
00:26:29,409 --> 00:26:35,409
example basically we have you know<font color="#CCCCCC"> our</font>

684
00:26:32,409 --> 00:26:37,899
action attribute<font color="#E5E5E5"> which has two values</font>

685
00:26:35,409 --> 00:26:41,049
accept and reject<font color="#CCCCCC"> we can actually</font><font color="#E5E5E5"> create</font>

686
00:26:37,899 --> 00:26:43,299
<font color="#CCCCCC">a lookup which tells us in which rows</font>

687
00:26:41,049 --> 00:26:46,389
the accept value is seen and which rows

688
00:26:43,299 --> 00:26:48,789
the reject value is seen so<font color="#CCCCCC"> except is</font>

689
00:26:46,389 --> 00:26:51,908
seen in rows<font color="#E5E5E5"> 0 & 1 so we can build this</font>

690
00:26:48,789 --> 00:26:53,500
binary<font color="#E5E5E5"> array that basically</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a laser</font>

691
00:26:51,909 --> 00:26:57,490
pointer<font color="#E5E5E5"> here</font>

692
00:26:53,500 --> 00:26:58,930
that basically indicates<font color="#CCCCCC"> that accept</font>

693
00:26:57,490 --> 00:27:00,700
occurs in these<font color="#CCCCCC"> two rows and doesn't</font>

694
00:26:58,930 --> 00:27:02,140
occur anywhere<font color="#E5E5E5"> else reject</font><font color="#CCCCCC"> it only</font><font color="#E5E5E5"> cares</font>

695
00:27:00,700 --> 00:27:04,150
and release these<font color="#E5E5E5"> four rows and not</font>

696
00:27:02,140 --> 00:27:05,710
anywhere<font color="#CCCCCC"> else and the idea is when</font><font color="#E5E5E5"> we</font>

697
00:27:04,150 --> 00:27:07,750
issue a query<font color="#E5E5E5"> just an all of our</font>

698
00:27:05,710 --> 00:27:09,220
rejected traffic<font color="#E5E5E5"> we don't have to scan</font>

699
00:27:07,750 --> 00:27:11,920
through<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> our data we can</font><font color="#CCCCCC"> actually</font>

700
00:27:09,220 --> 00:27:14,080
<font color="#E5E5E5">just look at rows</font><font color="#CCCCCC"> 2 3 & 4 and add up</font><font color="#E5E5E5"> the</font>

701
00:27:11,920 --> 00:27:15,610
number<font color="#CCCCCC"> of flows</font><font color="#E5E5E5"> in in those rows and</font>

702
00:27:14,080 --> 00:27:17,980
<font color="#E5E5E5">this is something that all search</font>

703
00:27:15,610 --> 00:27:19,570
systems do for very fast<font color="#CCCCCC"> search and</font>

704
00:27:17,980 --> 00:27:22,630
filter for<font color="#E5E5E5"> very fast investigative</font>

705
00:27:19,570 --> 00:27:24,610
analysis<font color="#E5E5E5"> and similarly because with</font>

706
00:27:22,630 --> 00:27:26,770
these<font color="#E5E5E5"> binary arrays indicating where</font>

707
00:27:24,610 --> 00:27:29,189
values exist<font color="#E5E5E5"> or don't exist we can do</font>

708
00:27:26,770 --> 00:27:32,770
boolean operations over them to

709
00:27:29,190 --> 00:27:34,540
basically indicate which which rows

710
00:27:32,770 --> 00:27:35,950
contain either the accept value or the

711
00:27:34,540 --> 00:27:38,920
reject value so in this case it's

712
00:27:35,950 --> 00:27:41,050
actually<font color="#E5E5E5"> every row and of course a lot</font>

713
00:27:38,920 --> 00:27:45,640
of<font color="#E5E5E5"> these a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these indexes can be</font>

714
00:27:41,050 --> 00:27:47,290
compressed as well<font color="#CCCCCC"> kind of one</font><font color="#E5E5E5"> last</font>

715
00:27:45,640 --> 00:27:49,950
<font color="#E5E5E5">thing I want to talk about in relation</font>

716
00:27:47,290 --> 00:27:52,960
to storage is approximation algorithms

717
00:27:49,950 --> 00:27:56,140
<font color="#CCCCCC">many aggregations</font><font color="#E5E5E5"> in the network flows</font>

718
00:27:52,960 --> 00:27:58,150
world<font color="#E5E5E5"> don't quite require exactness so</font>

719
00:27:56,140 --> 00:28:00,490
for example count count distinct

720
00:27:58,150 --> 00:28:02,920
<font color="#E5E5E5">histograms and quantiles and different</font>

721
00:28:00,490 --> 00:28:05,440
forms of set analysis you don't<font color="#E5E5E5"> have to</font>

722
00:28:02,920 --> 00:28:06,670
do<font color="#E5E5E5"> these exact anymore most the time</font>

723
00:28:05,440 --> 00:28:09,940
when people<font color="#E5E5E5"> are</font><font color="#CCCCCC"> looking at our general</font>

724
00:28:06,670 --> 00:28:11,500
patterns or trends<font color="#E5E5E5"> to see if it's if the</font>

725
00:28:09,940 --> 00:28:14,170
changes or the<font color="#E5E5E5"> deltas are actually</font>

726
00:28:11,500 --> 00:28:15,940
<font color="#E5E5E5">meaningful</font><font color="#CCCCCC"> and because we</font><font color="#E5E5E5"> don't need</font>

727
00:28:14,170 --> 00:28:18,160
exactness always then we can start

728
00:28:15,940 --> 00:28:20,310
<font color="#CCCCCC">leveraging approximation</font><font color="#E5E5E5"> and approximate</font>

729
00:28:18,160 --> 00:28:22,540
algorithms can<font color="#CCCCCC"> be very powerful for</font>

730
00:28:20,310 --> 00:28:24,399
<font color="#CCCCCC">providing fast queries while kind</font><font color="#E5E5E5"> of</font>

731
00:28:22,540 --> 00:28:27,070
reducing the storage requirements<font color="#CCCCCC"> and</font>

732
00:28:24,400 --> 00:28:28,960
just kind of give you an example here<font color="#CCCCCC"> so</font>

733
00:28:27,070 --> 00:28:31,720
this is how true it does<font color="#E5E5E5"> roll up I</font>

734
00:28:28,960 --> 00:28:34,660
talked about this<font color="#E5E5E5"> a few slides ago if we</font>

735
00:28:31,720 --> 00:28:36,340
were to enrich this basic flow data with

736
00:28:34,660 --> 00:28:37,900
a device ID so maybe we want<font color="#E5E5E5"> to</font>

737
00:28:36,340 --> 00:28:40,240
understand<font color="#E5E5E5"> all the</font><font color="#CCCCCC"> devices running</font><font color="#E5E5E5"> our</font>

738
00:28:37,900 --> 00:28:43,090
network and<font color="#CCCCCC"> we have a lot of</font><font color="#E5E5E5"> unique</font>

739
00:28:40,240 --> 00:28:44,980
devices<font color="#CCCCCC"> this basically prevents our</font>

740
00:28:43,090 --> 00:28:46,510
ability this basically prevents<font color="#CCCCCC"> our</font>

741
00:28:44,980 --> 00:28:47,680
ability<font color="#CCCCCC"> to roll up the data and</font><font color="#E5E5E5"> really</font>

742
00:28:46,510 --> 00:28:50,410
get<font color="#E5E5E5"> those storage and performance</font>

743
00:28:47,680 --> 00:28:53,170
benefits<font color="#E5E5E5"> so as opposed to storing every</font>

744
00:28:50,410 --> 00:28:55,300
single unique device ID<font color="#CCCCCC"> we can actually</font>

745
00:28:53,170 --> 00:28:57,010
store an approximation of the<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of</font>

746
00:28:55,300 --> 00:28:58,930
unique<font color="#CCCCCC"> devices that we've seen</font><font color="#E5E5E5"> and this</font>

747
00:28:57,010 --> 00:29:00,730
is<font color="#E5E5E5"> something very powerful</font><font color="#CCCCCC"> where we</font>

748
00:28:58,930 --> 00:29:02,530
actually<font color="#E5E5E5"> convert device ID into an</font>

749
00:29:00,730 --> 00:29:03,800
approximate metric that allows us to

750
00:29:02,530 --> 00:29:05,960
<font color="#E5E5E5">roll up our data again</font>

751
00:29:03,800 --> 00:29:07,520
and and this allows<font color="#CCCCCC"> us</font><font color="#E5E5E5"> to get all the</font>

752
00:29:05,960 --> 00:29:11,860
storage<font color="#E5E5E5"> and performance benefits of</font>

753
00:29:07,520 --> 00:29:14,720
<font color="#CCCCCC">having a smaller reduced data set</font><font color="#E5E5E5"> okay</font>

754
00:29:11,860 --> 00:29:17,240
<font color="#CCCCCC">just going</font><font color="#E5E5E5"> into the architecture of of</font>

755
00:29:14,720 --> 00:29:20,690
these operational<font color="#CCCCCC"> like</font><font color="#E5E5E5"> databases</font><font color="#CCCCCC"> pretty</font>

756
00:29:17,240 --> 00:29:22,250
much you know scuba<font color="#CCCCCC"> Pinot click house</font>

757
00:29:20,690 --> 00:29:24,580
<font color="#CCCCCC">through it</font><font color="#E5E5E5"> all of these architectures</font>

758
00:29:22,250 --> 00:29:27,950
<font color="#E5E5E5">are pretty similar</font>

759
00:29:24,580 --> 00:29:29,389
the architecture of druid is that of a

760
00:29:27,950 --> 00:29:31,190
you can think of<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> kind of a</font>

761
00:29:29,390 --> 00:29:33,200
<font color="#E5E5E5">disassembled database so there's</font>

762
00:29:31,190 --> 00:29:34,850
different<font color="#E5E5E5"> types of processes and each</font>

763
00:29:33,200 --> 00:29:37,400
process can be kind<font color="#E5E5E5"> of fine-tuned</font>

764
00:29:34,850 --> 00:29:39,949
depending on your workload<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> idea</font>

765
00:29:37,400 --> 00:29:42,350
is you would have<font color="#E5E5E5"> some raw data in</font>

766
00:29:39,950 --> 00:29:43,700
either in<font color="#CCCCCC"> a file system a clear raw data</font>

767
00:29:42,350 --> 00:29:45,169
it<font color="#E5E5E5"> could be a stream of data it can be</font>

768
00:29:43,700 --> 00:29:47,480
<font color="#CCCCCC">collected it could be something in Kafka</font>

769
00:29:45,170 --> 00:29:50,090
and what druid is gonna do is it's<font color="#CCCCCC"> gonna</font>

770
00:29:47,480 --> 00:29:52,970
convert raw data into this optimized

771
00:29:50,090 --> 00:29:55,010
<font color="#E5E5E5">partition segment format so the</font><font color="#CCCCCC"> segment</font>

772
00:29:52,970 --> 00:29:58,280
I talked about<font color="#E5E5E5"> a few slides ago is is</font>

773
00:29:55,010 --> 00:30:00,320
this<font color="#CCCCCC"> column oriented storage with search</font>

774
00:29:58,280 --> 00:30:02,720
indexes<font color="#E5E5E5"> built in that's time partition</font>

775
00:30:00,320 --> 00:30:04,490
<font color="#E5E5E5">and that's the thing that</font><font color="#CCCCCC"> druid is</font>

776
00:30:02,720 --> 00:30:08,750
fundamentally working with for all

777
00:30:04,490 --> 00:30:10,460
<font color="#E5E5E5">queries so you have raw data</font><font color="#CCCCCC"> that's</font>

778
00:30:08,750 --> 00:30:13,040
<font color="#E5E5E5">getting converted into segments on an</font>

779
00:30:10,460 --> 00:30:15,650
indexing process<font color="#E5E5E5"> and then these segments</font>

780
00:30:13,040 --> 00:30:17,480
are loaded across a set of<font color="#E5E5E5"> historical</font>

781
00:30:15,650 --> 00:30:19,250
and historical<font color="#CCCCCC"> czar processes they're</font>

782
00:30:17,480 --> 00:30:21,890
basically<font color="#E5E5E5"> designed to read segments and</font>

783
00:30:19,250 --> 00:30:24,260
that's pretty<font color="#E5E5E5"> much all they do and</font><font color="#CCCCCC"> then</font>

784
00:30:21,890 --> 00:30:27,230
you<font color="#E5E5E5"> have a set of processes called</font>

785
00:30:24,260 --> 00:30:29,510
brokers and brokers are responsible for

786
00:30:27,230 --> 00:30:31,700
<font color="#CCCCCC">kind</font><font color="#E5E5E5"> of query scatter gather so the idea</font>

787
00:30:29,510 --> 00:30:33,440
is queries we hit a broker<font color="#CCCCCC"> broker's</font>

788
00:30:31,700 --> 00:30:35,300
<font color="#CCCCCC">nowhere which segments are getting</font>

789
00:30:33,440 --> 00:30:37,280
created live on the indexers and which

790
00:30:35,300 --> 00:30:39,680
ones are already<font color="#E5E5E5"> completed and living on</font>

791
00:30:37,280 --> 00:30:42,080
historical<font color="#CCCCCC"> x'</font><font color="#E5E5E5"> so brokers do query</font>

792
00:30:39,680 --> 00:30:43,760
<font color="#CCCCCC">scatter gather these guys crunch their</font>

793
00:30:42,080 --> 00:30:47,360
portion of the answer in parallel<font color="#E5E5E5"> and</font>

794
00:30:43,760 --> 00:30:50,060
then return results to the query broker

795
00:30:47,360 --> 00:30:53,899
<font color="#E5E5E5">and then the broker unifies</font><font color="#CCCCCC"> all results</font>

796
00:30:50,060 --> 00:30:56,210
<font color="#CCCCCC">together and then how do you actually</font>

797
00:30:53,900 --> 00:30:58,970
query these things<font color="#E5E5E5"> there's JSON over</font>

798
00:30:56,210 --> 00:31:00,080
HTTP sequel<font color="#E5E5E5"> our Python Ruby pretty much</font>

799
00:30:58,970 --> 00:31:02,380
whatever<font color="#E5E5E5"> language</font><font color="#CCCCCC"> you're comfortable</font>

800
00:31:00,080 --> 00:31:04,909
with you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually query</font><font color="#CCCCCC"> droid</font><font color="#E5E5E5"> with</font>

801
00:31:02,380 --> 00:31:06,650
so by the numbers

802
00:31:04,910 --> 00:31:08,930
most of these operational allocated

803
00:31:06,650 --> 00:31:10,430
<font color="#CCCCCC">bases are designed to scale to you know</font>

804
00:31:08,930 --> 00:31:12,410
they're all<font color="#E5E5E5"> designed to be horizontally</font>

805
00:31:10,430 --> 00:31:14,810
scalable<font color="#E5E5E5"> they're all designed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do with</font>

806
00:31:12,410 --> 00:31:16,220
some<font color="#E5E5E5"> pretty tremendous volume</font><font color="#CCCCCC"> druid in</font>

807
00:31:14,810 --> 00:31:17,480
particular has a lot<font color="#CCCCCC"> of public</font>

808
00:31:16,220 --> 00:31:19,490
information<font color="#E5E5E5"> about some of this</font>

809
00:31:17,480 --> 00:31:21,260
<font color="#CCCCCC">the</font><font color="#E5E5E5"> clusters out there so some of these</font>

810
00:31:19,490 --> 00:31:23,659
clusters<font color="#CCCCCC"> are now at a hundred</font><font color="#E5E5E5"> trillion</font>

811
00:31:21,260 --> 00:31:26,029
raw events ingesting more than 300

812
00:31:23,659 --> 00:31:28,549
billion<font color="#CCCCCC"> events daily and even on</font>

813
00:31:26,029 --> 00:31:31,309
clusters of<font color="#E5E5E5"> this size there's a verage</font>

814
00:31:28,549 --> 00:31:33,260
<font color="#CCCCCC">quarry</font><font color="#E5E5E5"> latencies of about half a second</font>

815
00:31:31,309 --> 00:31:35,149
<font color="#E5E5E5">so really when your quarry latencies</font>

816
00:31:33,260 --> 00:31:36,350
become less<font color="#CCCCCC"> than a second you</font><font color="#E5E5E5"> can start</font>

817
00:31:35,149 --> 00:31:39,469
doing<font color="#CCCCCC"> really fast</font><font color="#E5E5E5"> slice-and-dice</font>

818
00:31:36,350 --> 00:31:41,510
<font color="#CCCCCC">quarries through a UI you can start</font>

819
00:31:39,470 --> 00:31:42,919
really<font color="#E5E5E5"> exploring do an ad hoc analysis</font>

820
00:31:41,510 --> 00:31:45,590
of data<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> is I think</font><font color="#E5E5E5"> very</font>

821
00:31:42,919 --> 00:31:47,090
important in the<font color="#CCCCCC"> NetFlow world and some</font>

822
00:31:45,590 --> 00:31:49,490
of these benchmarks were presented on a

823
00:31:47,090 --> 00:31:51,709
data set that<font color="#CCCCCC"> has about 30 dimensions or</font>

824
00:31:49,490 --> 00:31:56,899
20 metrics which is similar<font color="#E5E5E5"> to what you</font>

825
00:31:51,710 --> 00:31:58,909
would see<font color="#E5E5E5"> with</font><font color="#CCCCCC"> NetFlow data so the last</font>

826
00:31:56,899 --> 00:32:00,860
thing here is<font color="#CCCCCC"> just kind of end-to-end</font>

827
00:31:58,909 --> 00:32:02,419
architecture where would you deploy an

828
00:32:00,860 --> 00:32:05,719
operational analytics database how does

829
00:32:02,419 --> 00:32:08,149
it fit into<font color="#CCCCCC"> a modern data stack so the</font>

830
00:32:05,720 --> 00:32:11,269
<font color="#E5E5E5">modern data stack that I see most common</font>

831
00:32:08,149 --> 00:32:13,279
within<font color="#E5E5E5"> the enterprise</font><font color="#CCCCCC"> today</font><font color="#E5E5E5"> is one where</font>

832
00:32:11,269 --> 00:32:15,500
there's really dedicated systems for

833
00:32:13,279 --> 00:32:18,200
dedicated workloads<font color="#CCCCCC"> so the most</font><font color="#E5E5E5"> common</font>

834
00:32:15,500 --> 00:32:20,389
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> is you would</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> raw events that</font>

835
00:32:18,200 --> 00:32:21,769
get created<font color="#E5E5E5"> somewhere and then they're</font>

836
00:32:20,389 --> 00:32:23,689
either collected through some sort of

837
00:32:21,769 --> 00:32:25,309
collector and then<font color="#E5E5E5"> they're fed into a</font>

838
00:32:23,690 --> 00:32:28,159
<font color="#E5E5E5">message delivery system known as</font><font color="#CCCCCC"> a</font>

839
00:32:25,309 --> 00:32:30,379
message bus<font color="#CCCCCC"> the most popular message bus</font>

840
00:32:28,159 --> 00:32:31,970
<font color="#E5E5E5">I see is probably Apache Kafka</font><font color="#CCCCCC"> I see a</font>

841
00:32:30,380 --> 00:32:34,760
lot of<font color="#CCCCCC"> NetFlow data</font><font color="#E5E5E5"> go through Kafka</font>

842
00:32:31,970 --> 00:32:37,669
<font color="#E5E5E5">today</font><font color="#CCCCCC"> there's other message buses in</font>

843
00:32:34,760 --> 00:32:39,440
Amazon there's AWS<font color="#E5E5E5"> Kinesis there's</font>

844
00:32:37,669 --> 00:32:42,380
Google<font color="#E5E5E5"> pops up and I think Microsoft has</font>

845
00:32:39,440 --> 00:32:45,440
their own thing as well<font color="#CCCCCC"> so the next</font>

846
00:32:42,380 --> 00:32:47,029
<font color="#E5E5E5">stage after data is kind of collected</font>

847
00:32:45,440 --> 00:32:48,500
and being delivered for<font color="#CCCCCC"> the message bus</font>

848
00:32:47,029 --> 00:32:51,620
is through some sort<font color="#E5E5E5"> of data processing</font>

849
00:32:48,500 --> 00:32:54,440
<font color="#CCCCCC">or ETL system</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> NetFlow world the</font>

850
00:32:51,620 --> 00:32:56,449
most<font color="#E5E5E5"> common path is through</font><font color="#CCCCCC"> a some sort</font>

851
00:32:54,440 --> 00:33:00,110
of stream processor<font color="#E5E5E5"> so the idea behind</font>

852
00:32:56,450 --> 00:33:01,669
the stream processor<font color="#CCCCCC"> is to enrich the</font>

853
00:33:00,110 --> 00:33:03,139
net flow data<font color="#E5E5E5"> to add things</font><font color="#CCCCCC"> like</font>

854
00:33:01,669 --> 00:33:05,840
<font color="#CCCCCC">application information</font><font color="#E5E5E5"> potentially</font>

855
00:33:03,139 --> 00:33:07,820
<font color="#CCCCCC">adding</font><font color="#E5E5E5"> user information</font><font color="#CCCCCC"> as well so the</font>

856
00:33:05,840 --> 00:33:11,500
stream processor popular systems out

857
00:33:07,820 --> 00:33:13,668
there include<font color="#E5E5E5"> Apache flink</font><font color="#CCCCCC"> pachi Sansa</font>

858
00:33:11,500 --> 00:33:15,559
<font color="#CCCCCC">Kafka streams they're all designed to do</font>

859
00:33:13,669 --> 00:33:18,049
the<font color="#E5E5E5"> same thing designed</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> transform and</font>

860
00:33:15,559 --> 00:33:20,210
enrich<font color="#E5E5E5"> underlying raw data and then</font>

861
00:33:18,049 --> 00:33:22,580
finally<font color="#E5E5E5"> where the enriched data ends up</font>

862
00:33:20,210 --> 00:33:25,279
is in some sort<font color="#CCCCCC"> of query layer so in</font>

863
00:33:22,580 --> 00:33:27,289
this case it's going to be druid<font color="#CCCCCC"> so the</font>

864
00:33:25,279 --> 00:33:30,019
intent architecture looks like I collect

865
00:33:27,289 --> 00:33:31,160
flows from somewhere I put<font color="#CCCCCC"> it the Kafka</font>

866
00:33:30,019 --> 00:33:32,810
<font color="#E5E5E5">maybe from Kafka</font>

867
00:33:31,160 --> 00:33:34,880
to deliver it<font color="#E5E5E5"> to a file system maybe</font><font color="#CCCCCC"> I</font>

868
00:33:32,810 --> 00:33:36,290
<font color="#CCCCCC">will</font><font color="#E5E5E5"> deliver to</font><font color="#CCCCCC"> my ETL there and then</font>

869
00:33:34,880 --> 00:33:38,570
I'm<font color="#E5E5E5"> gonna put it into a serving layer</font>

870
00:33:36,290 --> 00:33:40,190
where my queries<font color="#E5E5E5"> and where my users are</font>

871
00:33:38,570 --> 00:33:43,629
<font color="#CCCCCC">interact</font><font color="#E5E5E5"> with it where my applications</font>

872
00:33:40,190 --> 00:33:43,630
are<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> start</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> it as well</font>

873
00:33:44,830 --> 00:33:50,300
<font color="#E5E5E5">so</font><font color="#CCCCCC"> drew it being an open-source project</font>

874
00:33:48,290 --> 00:33:52,280
<font color="#CCCCCC">it</font><font color="#E5E5E5"> really works out of</font><font color="#CCCCCC"> the box with a</font>

875
00:33:50,300 --> 00:33:54,020
<font color="#E5E5E5">lot a lot of other</font><font color="#CCCCCC"> open-source projects</font>

876
00:33:52,280 --> 00:33:56,090
as well<font color="#E5E5E5"> and we're really big believers</font>

877
00:33:54,020 --> 00:33:58,250
in sort of a more disassembled data

878
00:33:56,090 --> 00:34:01,300
stack nowadays so<font color="#CCCCCC"> druid works out of the</font>

879
00:33:58,250 --> 00:34:04,610
<font color="#E5E5E5">box with message buses like Kafka</font>

880
00:34:01,300 --> 00:34:07,159
<font color="#E5E5E5">Kinesis</font><font color="#CCCCCC"> at Google pops up and works with</font>

881
00:34:04,610 --> 00:34:09,980
file systems like<font color="#E5E5E5"> Hadoop s3 it also</font>

882
00:34:07,160 --> 00:34:15,200
works<font color="#E5E5E5"> with stream processors like spark</font>

883
00:34:09,980 --> 00:34:17,330
streaming<font color="#CCCCCC"> flanks storm and others so</font>

884
00:34:15,199 --> 00:34:19,189
just to<font color="#CCCCCC"> kind of</font><font color="#E5E5E5"> summarize this talk I</font>

885
00:34:17,330 --> 00:34:20,719
think operational analyze data bases<font color="#E5E5E5"> I</font>

886
00:34:19,190 --> 00:34:23,990
think they're<font color="#CCCCCC"> very useful</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> NetFlow</font>

887
00:34:20,719 --> 00:34:25,370
world<font color="#E5E5E5"> I think they're</font><font color="#CCCCCC"> very helpful for</font>

888
00:34:23,989 --> 00:34:26,659
being able to not<font color="#E5E5E5"> just do analytic</font>

889
00:34:25,370 --> 00:34:28,819
queries and not just do search<font color="#E5E5E5"> and</font>

890
00:34:26,659 --> 00:34:30,259
filter queries but<font color="#E5E5E5"> to able to really be</font>

891
00:34:28,820 --> 00:34:31,910
able<font color="#E5E5E5"> to do different</font><font color="#CCCCCC"> types of search</font><font color="#E5E5E5"> and</font>

892
00:34:30,260 --> 00:34:34,280
investigation<font color="#E5E5E5"> as well as reporting and</font>

893
00:34:31,909 --> 00:34:35,989
monitoring and as I mentioned druid is a

894
00:34:34,280 --> 00:34:37,640
<font color="#CCCCCC">project</font><font color="#E5E5E5"> that's incubating the Apache</font>

895
00:34:35,989 --> 00:34:40,009
Software Foundation<font color="#CCCCCC"> it's a community run</font>

896
00:34:37,639 --> 00:34:41,480
project<font color="#E5E5E5"> there's about</font><font color="#CCCCCC"> 10 or</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> different</font>

897
00:34:40,010 --> 00:34:43,850
companies are actively contributing to

898
00:34:41,480 --> 00:34:45,290
<font color="#E5E5E5">it we have</font><font color="#CCCCCC"> a community</font><font color="#E5E5E5"> web page that you</font>

899
00:34:43,850 --> 00:34:46,730
<font color="#CCCCCC">can</font><font color="#E5E5E5"> go to and</font><font color="#CCCCCC"> you can download</font><font color="#E5E5E5"> it and</font>

900
00:34:45,290 --> 00:34:48,620
<font color="#CCCCCC">then there's also sort</font><font color="#E5E5E5"> of an</font>

901
00:34:46,730 --> 00:34:53,060
enterprising version that we host on

902
00:34:48,620 --> 00:34:55,790
imply as well<font color="#E5E5E5"> so with that that's my</font>

903
00:34:53,060 --> 00:34:59,590
<font color="#CCCCCC">talk</font><font color="#E5E5E5"> and I'm happy to answer a couple</font>

904
00:34:55,790 --> 00:34:59,590
<font color="#E5E5E5">questions if anyone has any at this</font><font color="#CCCCCC"> time</font>

905
00:35:00,790 --> 00:35:07,779
[Applause]

906
00:35:08,650 --> 00:35:14,930
<font color="#E5E5E5">hey you going</font><font color="#CCCCCC"> ski</font><font color="#E5E5E5"> Yahoo slash</font><font color="#CCCCCC"> oath we</font>

907
00:35:13,309 --> 00:35:17,329
use a lot of druid<font color="#E5E5E5"> and a bunch of our</font>

908
00:35:14,930 --> 00:35:19,308
operational analysis engines<font color="#E5E5E5"> one thing</font>

909
00:35:17,329 --> 00:35:22,789
that I kind<font color="#CCCCCC"> of uncertain about</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

910
00:35:19,309 --> 00:35:24,200
use of<font color="#E5E5E5"> druid for flow</font><font color="#CCCCCC"> the way that I see</font>

911
00:35:22,789 --> 00:35:26,990
<font color="#CCCCCC">it is</font><font color="#E5E5E5"> that flow has a couple of use</font>

912
00:35:24,200 --> 00:35:30,049
cases<font color="#E5E5E5"> flow could</font><font color="#CCCCCC"> be real instantaneous</font>

913
00:35:26,990 --> 00:35:32,660
<font color="#E5E5E5">I need super high route to what fidelity</font>

914
00:35:30,049 --> 00:35:34,450
<font color="#CCCCCC">of data</font><font color="#E5E5E5"> what happened in the last five</font>

915
00:35:32,660 --> 00:35:36,500
minutes and<font color="#CCCCCC"> I</font><font color="#E5E5E5"> needed super high fidelity</font>

916
00:35:34,450 --> 00:35:38,538
<font color="#E5E5E5">doing any sort of roll ups that you're</font>

917
00:35:36,500 --> 00:35:40,490
suggesting will completely make that go

918
00:35:38,539 --> 00:35:42,500
away<font color="#CCCCCC"> then there's what you're</font><font color="#E5E5E5"> suggesting</font>

919
00:35:40,490 --> 00:35:44,149
which is roll<font color="#CCCCCC"> up to five</font><font color="#E5E5E5"> minutes I</font>

920
00:35:42,500 --> 00:35:47,390
probably want to<font color="#E5E5E5"> keep that for about a</font>

921
00:35:44,150 --> 00:35:48,980
month<font color="#E5E5E5"> but</font><font color="#CCCCCC"> a months ago every five</font>

922
00:35:47,390 --> 00:35:50,450
minutes roll<font color="#E5E5E5"> up to kind of irrelevant</font><font color="#CCCCCC"> so</font>

923
00:35:48,980 --> 00:35:52,670
like how do<font color="#E5E5E5"> you see this architecture</font>

924
00:35:50,450 --> 00:35:54,879
where<font color="#CCCCCC"> you almost</font><font color="#E5E5E5"> have three different</font>

925
00:35:52,670 --> 00:35:59,000
tiers<font color="#E5E5E5"> of data that needs to</font><font color="#CCCCCC"> be available</font>

926
00:35:54,880 --> 00:36:01,099
<font color="#E5E5E5">all as a fast search which</font><font color="#CCCCCC"> is ultra high</font>

927
00:35:59,000 --> 00:36:03,710
fidelity<font color="#E5E5E5"> high resolution last hour so</font>

928
00:36:01,099 --> 00:36:07,180
<font color="#CCCCCC">two of operational troubleshooting break</font>

929
00:36:03,710 --> 00:36:09,049
fix like very high level<font color="#E5E5E5"> data and then</font>

930
00:36:07,180 --> 00:36:11,690
what happened over the<font color="#CCCCCC"> last five years</font>

931
00:36:09,049 --> 00:36:14,270
showed me a trend<font color="#E5E5E5"> which also has to</font><font color="#CCCCCC"> be</font>

932
00:36:11,690 --> 00:36:16,819
<font color="#E5E5E5">aggregated probably by interface by</font>

933
00:36:14,270 --> 00:36:18,109
property by customer type tons of

934
00:36:16,819 --> 00:36:20,480
different<font color="#E5E5E5"> dimensions</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> if you're doing</font>

935
00:36:18,109 --> 00:36:22,339
aggregation that<font color="#E5E5E5"> does approximation</font>

936
00:36:20,480 --> 00:36:25,490
which I'm not quite sure what you<font color="#E5E5E5"> meant</font>

937
00:36:22,339 --> 00:36:28,460
by that but if by approximation you mean

938
00:36:25,490 --> 00:36:30,410
loss of accurate data<font color="#CCCCCC"> of this</font><font color="#E5E5E5"> was</font>

939
00:36:28,460 --> 00:36:32,000
customer a versus customer being<font color="#E5E5E5"> that</font>

940
00:36:30,410 --> 00:36:35,058
might be an issue<font color="#E5E5E5"> like how do you deal</font>

941
00:36:32,000 --> 00:36:37,640
with<font color="#E5E5E5"> that yeah</font><font color="#CCCCCC"> so the very short answer</font>

942
00:36:35,059 --> 00:36:40,730
<font color="#E5E5E5">is</font><font color="#CCCCCC"> actually enjoy today all the role of</font>

943
00:36:37,640 --> 00:36:42,650
<font color="#E5E5E5">the approximation is optional so you can</font>

944
00:36:40,730 --> 00:36:45,740
<font color="#E5E5E5">actually disable</font><font color="#CCCCCC"> roll-up</font><font color="#E5E5E5"> and just</font>

945
00:36:42,650 --> 00:36:48,079
maintain your raw<font color="#CCCCCC"> data</font><font color="#E5E5E5"> so very one very</font>

946
00:36:45,740 --> 00:36:50,899
<font color="#E5E5E5">common model that I see is people don't</font>

947
00:36:48,079 --> 00:36:52,279
roll up<font color="#CCCCCC"> raw data</font><font color="#E5E5E5"> for a very recent span</font>

948
00:36:50,900 --> 00:36:54,410
of<font color="#E5E5E5"> time whether that's the recent hour</font>

949
00:36:52,279 --> 00:36:56,839
or<font color="#E5E5E5"> the most recent day they basically</font>

950
00:36:54,410 --> 00:36:59,118
<font color="#CCCCCC">just keep the raw data around</font><font color="#E5E5E5"> and then</font>

951
00:36:56,839 --> 00:37:00,890
because historical data is<font color="#CCCCCC"> also</font>

952
00:36:59,119 --> 00:37:03,109
important and<font color="#E5E5E5"> it gets prohibit ly</font>

953
00:37:00,890 --> 00:37:05,089
expensive to store flow data for up to

954
00:37:03,109 --> 00:37:06,650
like two years<font color="#E5E5E5"> then there's different</font>

955
00:37:05,089 --> 00:37:08,420
<font color="#CCCCCC">levels to roll-ups</font><font color="#E5E5E5"> and start getting</font>

956
00:37:06,650 --> 00:37:10,339
applied across a time line<font color="#CCCCCC"> so</font><font color="#E5E5E5"> for</font>

957
00:37:08,420 --> 00:37:11,960
example you<font color="#E5E5E5"> might keep the most recent</font>

958
00:37:10,339 --> 00:37:13,460
data<font color="#E5E5E5"> for raw data and the most recent</font>

959
00:37:11,960 --> 00:37:15,230
<font color="#E5E5E5">month wrote up to five minutes and then</font>

960
00:37:13,460 --> 00:37:15,830
<font color="#E5E5E5">everything old not rolled up to like an</font>

961
00:37:15,230 --> 00:37:18,980
<font color="#CCCCCC">hourly</font>

962
00:37:15,830 --> 00:37:20,330
because<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> that gets</font><font color="#CCCCCC"> HDL I just seen</font>

963
00:37:18,980 --> 00:37:21,980
most people don't<font color="#CCCCCC"> need</font><font color="#E5E5E5"> to query like</font>

964
00:37:20,330 --> 00:37:23,660
what happened at precise millisecond in

965
00:37:21,980 --> 00:37:25,970
time it's<font color="#E5E5E5"> actually more</font><font color="#CCCCCC"> about broader</font>

966
00:37:23,660 --> 00:37:27,410
trends within the data<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> is</font>

967
00:37:25,970 --> 00:37:29,810
<font color="#E5E5E5">something that you it does support today</font>

968
00:37:27,410 --> 00:37:32,330
<font color="#E5E5E5">and it is it's</font><font color="#CCCCCC"> very common now for</font>

969
00:37:29,810 --> 00:37:34,790
<font color="#CCCCCC">people</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> to roll up data the second</font>

970
00:37:32,330 --> 00:37:36,830
part of<font color="#E5E5E5"> that answer</font><font color="#CCCCCC"> is we believe in a</font>

971
00:37:34,790 --> 00:37:38,690
lot of like disassembled architecture so

972
00:37:36,830 --> 00:37:41,000
<font color="#CCCCCC">polling raw data from like a message by</font>

973
00:37:38,690 --> 00:37:43,010
such as Kafka<font color="#E5E5E5"> so for both Kafka and</font>

974
00:37:41,000 --> 00:37:45,860
Kinesis we actually<font color="#E5E5E5"> are providing very</font>

975
00:37:43,010 --> 00:37:47,900
strict guarantees on<font color="#E5E5E5"> data loss so we</font>

976
00:37:45,860 --> 00:37:49,190
actually guarantee no loss of<font color="#E5E5E5"> data no</font>

977
00:37:47,900 --> 00:37:51,830
duplication of data<font color="#CCCCCC"> so we're</font>

978
00:37:49,190 --> 00:37:54,380
guaranteeing<font color="#E5E5E5"> exactly once</font><font color="#CCCCCC"> consumption</font>

979
00:37:51,830 --> 00:37:56,480
semantics<font color="#E5E5E5"> and that's what the over idea</font>

980
00:37:54,380 --> 00:37:57,710
that<font color="#E5E5E5"> your your whatever queries you</font>

981
00:37:56,480 --> 00:37:59,780
issue are gonna be a<font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> percent</font>

982
00:37:57,710 --> 00:38:01,810
<font color="#E5E5E5">accurate</font><font color="#CCCCCC"> so all the approximation can</font><font color="#E5E5E5"> be</font>

983
00:37:59,780 --> 00:38:03,980
<font color="#E5E5E5">turned off there's obviously going to be</font>

984
00:38:01,810 --> 00:38:05,240
performance and storage trade-offs there

985
00:38:03,980 --> 00:38:06,470
<font color="#E5E5E5">but if fidelity</font><font color="#CCCCCC"> of your data is</font>

986
00:38:05,240 --> 00:38:08,959
important and<font color="#E5E5E5"> that is something that's</font>

987
00:38:06,470 --> 00:38:10,759
<font color="#CCCCCC">being strongly supported today so what</font>

988
00:38:08,960 --> 00:38:13,640
would the performance<font color="#E5E5E5"> implications be if</font>

989
00:38:10,760 --> 00:38:16,460
you turn<font color="#CCCCCC"> off all those roll-ups it</font>

990
00:38:13,640 --> 00:38:19,279
<font color="#E5E5E5">really depends on what your data like</font>

991
00:38:16,460 --> 00:38:20,630
looks like<font color="#E5E5E5"> so with some data sets you</font>

992
00:38:19,280 --> 00:38:22,460
know people can't like a<font color="#E5E5E5"> two to one</font><font color="#CCCCCC"> role</font>

993
00:38:20,630 --> 00:38:23,810
<font color="#CCCCCC">off which</font><font color="#E5E5E5"> means that data stored in true</font>

994
00:38:22,460 --> 00:38:26,900
it is about half the<font color="#CCCCCC"> size of the raw</font>

995
00:38:23,810 --> 00:38:29,420
data<font color="#E5E5E5"> volume some people get a thousand</font>

996
00:38:26,900 --> 00:38:30,530
<font color="#E5E5E5">to one roll-ups where the data store</font>

997
00:38:29,420 --> 00:38:31,970
enjoyed is a thousand<font color="#E5E5E5"> times</font><font color="#CCCCCC"> less than</font>

998
00:38:30,530 --> 00:38:33,890
<font color="#E5E5E5">the raw data and really depends on the</font>

999
00:38:31,970 --> 00:38:35,540
number of<font color="#E5E5E5"> attributes and then number of</font>

1000
00:38:33,890 --> 00:38:37,759
unique<font color="#CCCCCC"> values within</font><font color="#E5E5E5"> those attributes</font><font color="#CCCCCC"> if</font>

1001
00:38:35,540 --> 00:38:39,230
you have as a number of<font color="#CCCCCC"> dimensions</font>

1002
00:38:37,760 --> 00:38:41,660
starts increasing as<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> flow</font>

1003
00:38:39,230 --> 00:38:43,340
data it might be not that impactful but

1004
00:38:41,660 --> 00:38:45,350
it<font color="#E5E5E5"> really varies from data set to data</font>

1005
00:38:43,340 --> 00:38:47,180
set and it's just a<font color="#CCCCCC"> trade-off that</font><font color="#E5E5E5"> the</font>

1006
00:38:45,350 --> 00:38:48,680
operator has<font color="#CCCCCC"> to make</font><font color="#E5E5E5"> you know how much</font>

1007
00:38:47,180 --> 00:38:49,819
do you want to spend on storage how much

1008
00:38:48,680 --> 00:38:51,740
you want to<font color="#E5E5E5"> spend for better performance</font>

1009
00:38:49,820 --> 00:38:54,050
versus how what kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> fidelity of the</font>

1010
00:38:51,740 --> 00:38:55,700
<font color="#CCCCCC">data do we want to</font><font color="#E5E5E5"> ensure so are you</font>

1011
00:38:54,050 --> 00:38:57,200
almost suggesting that there's two

1012
00:38:55,700 --> 00:38:59,419
different<font color="#E5E5E5"> operational</font><font color="#CCCCCC"> databases one</font>

1013
00:38:57,200 --> 00:39:01,160
that's<font color="#E5E5E5"> designed for the last hour and</font>

1014
00:38:59,420 --> 00:39:04,580
<font color="#E5E5E5">another one that</font><font color="#CCCCCC"> just does constant</font>

1015
00:39:01,160 --> 00:39:06,440
roll-ups<font color="#CCCCCC"> what I would say is it's not</font>

1016
00:39:04,580 --> 00:39:08,900
<font color="#CCCCCC">like two types of database</font><font color="#E5E5E5"> but it's</font>

1017
00:39:06,440 --> 00:39:10,400
actually<font color="#E5E5E5"> a more</font><font color="#CCCCCC"> sophisticated data model</font>

1018
00:39:08,900 --> 00:39:13,220
so within<font color="#E5E5E5"> a system like druid it would</font>

1019
00:39:10,400 --> 00:39:15,080
be kind of one data set but part of<font color="#CCCCCC"> that</font>

1020
00:39:13,220 --> 00:39:16,790
data set<font color="#E5E5E5"> is the raw data part of that</font>

1021
00:39:15,080 --> 00:39:17,840
data set is a more<font color="#CCCCCC"> roll-up data</font><font color="#E5E5E5"> and</font>

1022
00:39:16,790 --> 00:39:19,340
<font color="#CCCCCC">maybe part of</font><font color="#E5E5E5"> that data set</font><font color="#CCCCCC"> is an</font>

1023
00:39:17,840 --> 00:39:20,600
aggressively<font color="#CCCCCC"> roll-up data where certain</font>

1024
00:39:19,340 --> 00:39:23,630
attributes are even stripped from the

1025
00:39:20,600 --> 00:39:26,390
data<font color="#E5E5E5"> to get better roll-up</font><font color="#CCCCCC"> so it's a</font>

1026
00:39:23,630 --> 00:39:27,910
it's so I guess it<font color="#E5E5E5"> would be in a single</font>

1027
00:39:26,390 --> 00:39:29,730
table there's no there's not<font color="#CCCCCC"> a</font>

1028
00:39:27,910 --> 00:39:31,379
uniformity<font color="#E5E5E5"> of</font>

1029
00:39:29,730 --> 00:39:33,000
how things are compressed and stored

1030
00:39:31,380 --> 00:39:34,619
within a<font color="#E5E5E5"> single table you actually have</font>

1031
00:39:33,000 --> 00:39:36,359
homogeneity<font color="#CCCCCC"> but that and that's what's</font>

1032
00:39:34,619 --> 00:39:38,070
ultimately<font color="#E5E5E5"> I think gonna fit best with</font>

1033
00:39:36,359 --> 00:39:40,440
the use case<font color="#E5E5E5"> while maintaining fidelity</font>

1034
00:39:38,070 --> 00:39:42,480
<font color="#CCCCCC">so I mean that's kind of my question</font><font color="#E5E5E5"> is</font>

1035
00:39:40,440 --> 00:39:43,710
I<font color="#E5E5E5"> mean I know you'll contribute</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> draw</font>

1036
00:39:42,480 --> 00:39:46,590
it<font color="#E5E5E5"> so thank you very much</font>

1037
00:39:43,710 --> 00:39:48,960
yeah<font color="#E5E5E5"> like we love using that but you're</font>

1038
00:39:46,590 --> 00:39:52,500
comparing it<font color="#E5E5E5"> to other things do you feel</font>

1039
00:39:48,960 --> 00:39:55,590
<font color="#E5E5E5">that the some systems are better than</font>

1040
00:39:52,500 --> 00:39:57,750
others<font color="#CCCCCC"> well I think this like roll up</font>

1041
00:39:55,590 --> 00:39:59,130
problem is not something<font color="#CCCCCC"> that really</font><font color="#E5E5E5"> any</font>

1042
00:39:57,750 --> 00:40:00,600
system has solved I think the

1043
00:39:59,130 --> 00:40:02,430
homogeneity<font color="#CCCCCC"> and the roll-up is actually</font>

1044
00:40:00,600 --> 00:40:03,660
like roll up is a concept that's like

1045
00:40:02,430 --> 00:40:06,629
native to<font color="#E5E5E5"> Drew and it doesn't really</font>

1046
00:40:03,660 --> 00:40:08,700
<font color="#CCCCCC">even exist a lot of other</font><font color="#E5E5E5"> systems</font><font color="#CCCCCC"> like</font>

1047
00:40:06,630 --> 00:40:10,080
<font color="#CCCCCC">if you were to use the elk stack for</font>

1048
00:40:08,700 --> 00:40:11,490
example you<font color="#E5E5E5"> don't have this option even</font>

1049
00:40:10,080 --> 00:40:13,619
<font color="#CCCCCC">to compressor today or basically to</font>

1050
00:40:11,490 --> 00:40:15,629
store in the raw<font color="#E5E5E5"> data as is so you can</font>

1051
00:40:13,619 --> 00:40:17,750
always<font color="#E5E5E5"> just do that in droid</font><font color="#CCCCCC"> but I</font><font color="#E5E5E5"> think</font>

1052
00:40:15,630 --> 00:40:20,460
no<font color="#E5E5E5"> true</font><font color="#CCCCCC"> it adds</font><font color="#E5E5E5"> that additional level</font>

1053
00:40:17,750 --> 00:40:21,990
<font color="#CCCCCC">sophistication to be able to start pre</font>

1054
00:40:20,460 --> 00:40:27,560
aggregating<font color="#CCCCCC"> say more</font><font color="#E5E5E5"> data if you need it</font>

1055
00:40:21,990 --> 00:40:27,560
for your<font color="#E5E5E5"> use case thank you</font>

1056
00:40:31,440 --> 00:40:37,180
hi Dave seagull seagull group could you

1057
00:40:35,440 --> 00:40:39,789
provide<font color="#E5E5E5"> an example of what this</font>

1058
00:40:37,180 --> 00:40:43,598
approximated value<font color="#E5E5E5"> looks like you give</font>

1059
00:40:39,789 --> 00:40:45,640
the example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the device ID</font><font color="#CCCCCC"> what does</font>

1060
00:40:43,599 --> 00:40:48,490
that<font color="#E5E5E5"> look like like Howard how is that</font>

1061
00:40:45,640 --> 00:40:52,288
approximation doing it what kind<font color="#E5E5E5"> of data</font>

1062
00:40:48,490 --> 00:40:54,279
<font color="#CCCCCC">being lost yeah so there's a range of</font>

1063
00:40:52,289 --> 00:40:56,530
approximation<font color="#E5E5E5"> algorithms are also called</font>

1064
00:40:54,280 --> 00:40:57,819
like<font color="#E5E5E5"> sketch algorithms and and some of</font>

1065
00:40:56,530 --> 00:41:00,160
them are they're<font color="#E5E5E5"> really around like</font>

1066
00:40:57,819 --> 00:41:02,259
analysis<font color="#E5E5E5"> so imagine you</font><font color="#CCCCCC"> have like a set</font>

1067
00:41:00,160 --> 00:41:03,670
<font color="#E5E5E5">of elements</font><font color="#CCCCCC"> and one of the queries that</font>

1068
00:41:02,260 --> 00:41:06,640
you want to do is count<font color="#E5E5E5"> the</font><font color="#CCCCCC"> number of</font>

1069
00:41:03,670 --> 00:41:09,549
like unique items within a set so if you

1070
00:41:06,640 --> 00:41:11,410
have a dimension that's<font color="#CCCCCC"> like</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> vise ID</font>

1071
00:41:09,549 --> 00:41:13,359
<font color="#E5E5E5">and if you have if you start having</font>

1072
00:41:11,410 --> 00:41:15,399
<font color="#E5E5E5">millions or billions of unique device</font>

1073
00:41:13,359 --> 00:41:17,410
IDs<font color="#E5E5E5"> most of time you don't care</font><font color="#CCCCCC"> about</font>

1074
00:41:15,400 --> 00:41:18,849
every single<font color="#E5E5E5"> unique device</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> you care</font>

1075
00:41:17,410 --> 00:41:21,640
about<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> a number of unique devices</font>

1076
00:41:18,849 --> 00:41:23,289
<font color="#E5E5E5">that you</font><font color="#CCCCCC"> have at any</font><font color="#E5E5E5"> given point in time</font>

1077
00:41:21,640 --> 00:41:25,270
and this is<font color="#CCCCCC"> something common</font><font color="#E5E5E5"> with like</font><font color="#CCCCCC"> a</font>

1078
00:41:23,289 --> 00:41:26,740
<font color="#E5E5E5">user ID as well so if you have a user ID</font>

1079
00:41:25,270 --> 00:41:28,119
<font color="#E5E5E5">or session ID you don't really</font><font color="#CCCCCC"> care</font>

1080
00:41:26,740 --> 00:41:29,649
about every unique<font color="#CCCCCC"> session well you care</font>

1081
00:41:28,119 --> 00:41:32,020
about the number<font color="#CCCCCC"> of unique sessions that</font>

1082
00:41:29,650 --> 00:41:33,160
<font color="#E5E5E5">you have so this</font><font color="#CCCCCC"> is like the type of</font>

1083
00:41:32,020 --> 00:41:34,869
workflow<font color="#E5E5E5"> that can be calculated</font>

1084
00:41:33,160 --> 00:41:36,520
<font color="#E5E5E5">approximately this is uses an</font>

1085
00:41:34,869 --> 00:41:40,210
approximation algorithm called hyper log

1086
00:41:36,520 --> 00:41:42,490
log<font color="#E5E5E5"> and the idea is that as opposed to</font>

1087
00:41:40,210 --> 00:41:44,410
<font color="#E5E5E5">storing every single like unique user ID</font>

1088
00:41:42,490 --> 00:41:46,660
<font color="#E5E5E5">and then counting all</font><font color="#CCCCCC"> of them you store</font>

1089
00:41:44,410 --> 00:41:48,430
it in like a probabilistic mathematical

1090
00:41:46,660 --> 00:41:51,190
data structure which gives<font color="#CCCCCC"> you</font><font color="#E5E5E5"> about 98</font>

1091
00:41:48,430 --> 00:41:52,960
percentile<font color="#E5E5E5"> accuracy</font><font color="#CCCCCC"> put the ID but</font><font color="#E5E5E5"> if</font>

1092
00:41:51,190 --> 00:41:54,460
you can start<font color="#CCCCCC"> approximating some queries</font>

1093
00:41:52,960 --> 00:41:56,710
you<font color="#CCCCCC"> can get significantly better</font>

1094
00:41:54,460 --> 00:41:58,990
performance<font color="#CCCCCC"> on those queries while</font>

1095
00:41:56,710 --> 00:42:00,760
significant reducing storage<font color="#E5E5E5"> as</font><font color="#CCCCCC"> well so</font>

1096
00:41:58,990 --> 00:42:02,859
if you<font color="#E5E5E5"> have a billion unique users maybe</font>

1097
00:42:00,760 --> 00:42:06,160
your approximate query gives you you

1098
00:42:02,859 --> 00:42:07,720
know 999<font color="#E5E5E5"> million but that's enough to</font>

1099
00:42:06,160 --> 00:42:09,069
<font color="#E5E5E5">understand kind of the trend and that</font>

1100
00:42:07,720 --> 00:42:10,990
core<font color="#CCCCCC"> it can</font><font color="#E5E5E5"> be done</font><font color="#CCCCCC"> 10 to 100</font><font color="#E5E5E5"> times</font>

1101
00:42:09,069 --> 00:42:15,970
<font color="#E5E5E5">faster than</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> stored every single</font>

1102
00:42:10,990 --> 00:42:18,578
user ID and<font color="#E5E5E5"> counted all</font><font color="#CCCCCC"> of them that</font>

1103
00:42:15,970 --> 00:42:20,578
<font color="#CCCCCC">makes sense kind of I guess I'd have to</font>

1104
00:42:18,579 --> 00:42:23,079
<font color="#E5E5E5">play with it see what it's actually yeah</font>

1105
00:42:20,579 --> 00:42:25,869
<font color="#CCCCCC">it's it sounds</font><font color="#E5E5E5"> like it would</font><font color="#CCCCCC"> make the</font>

1106
00:42:23,079 --> 00:42:27,369
column mostly useless<font color="#E5E5E5"> for a lot</font><font color="#CCCCCC"> of</font>

1107
00:42:25,869 --> 00:42:30,819
<font color="#E5E5E5">different</font><font color="#CCCCCC"> variables that</font><font color="#E5E5E5"> have a lot</font><font color="#CCCCCC"> of</font>

1108
00:42:27,369 --> 00:42:33,930
uniqueness<font color="#CCCCCC"> it depends so like the</font>

1109
00:42:30,819 --> 00:42:37,089
trade-off is<font color="#CCCCCC"> that you lose information</font>

1110
00:42:33,930 --> 00:42:38,740
<font color="#E5E5E5">about like using user ideas as an</font>

1111
00:42:37,089 --> 00:42:42,038
example<font color="#E5E5E5"> you would lose information</font><font color="#CCCCCC"> about</font>

1112
00:42:38,740 --> 00:42:44,020
every single unique user ID<font color="#CCCCCC"> but that's</font>

1113
00:42:42,039 --> 00:42:46,750
okay if all you're trying<font color="#E5E5E5"> to do</font>

1114
00:42:44,020 --> 00:42:48,250
is count<font color="#E5E5E5"> the number</font><font color="#CCCCCC"> of unique users if</font>

1115
00:42:46,750 --> 00:42:50,140
<font color="#E5E5E5">you actually care about the unique</font>

1116
00:42:48,250 --> 00:42:52,120
session<font color="#E5E5E5"> IDs or user IDs you have to</font>

1117
00:42:50,140 --> 00:42:53,680
maintain<font color="#E5E5E5"> iam then approximation is</font><font color="#CCCCCC"> not</font>

1118
00:42:52,120 --> 00:42:54,910
going to work<font color="#E5E5E5"> but if all you care about</font>

1119
00:42:53,680 --> 00:42:56,379
is counting<font color="#E5E5E5"> the number of unique</font>

1120
00:42:54,910 --> 00:42:58,089
sessions and unique users<font color="#E5E5E5"> then</font>

1121
00:42:56,380 --> 00:43:01,510
approximation is something that can<font color="#E5E5E5"> be</font>

1122
00:42:58,090 --> 00:43:03,730
potentially<font color="#CCCCCC"> considered okay</font>

1123
00:43:01,510 --> 00:43:05,470
my other question<font color="#CCCCCC"> related to scalability</font>

1124
00:43:03,730 --> 00:43:09,190
like if you were to try and<font color="#E5E5E5"> put this</font>

1125
00:43:05,470 --> 00:43:10,870
<font color="#E5E5E5">into a large network at scale yeah this</font>

1126
00:43:09,190 --> 00:43:14,470
<font color="#E5E5E5">is the hardware</font><font color="#CCCCCC"> and those search times</font>

1127
00:43:10,870 --> 00:43:16,299
do they<font color="#E5E5E5"> or do they scale in a linear</font><font color="#CCCCCC"> way</font>

1128
00:43:14,470 --> 00:43:18,879
or do they get<font color="#E5E5E5"> more challenging do you</font>

1129
00:43:16,300 --> 00:43:21,250
get any optimizations as you get<font color="#E5E5E5"> into</font>

1130
00:43:18,880 --> 00:43:23,740
the trillions of<font color="#CCCCCC"> rows</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the database</font>

1131
00:43:21,250 --> 00:43:29,920
and<font color="#E5E5E5"> that works that are ingesting you</font>

1132
00:43:23,740 --> 00:43:31,540
know terabytes per second<font color="#E5E5E5"> values</font><font color="#CCCCCC"> yeah so</font>

1133
00:43:29,920 --> 00:43:33,010
with most distributed systems when a

1134
00:43:31,540 --> 00:43:34,750
system like<font color="#CCCCCC"> J</font><font color="#E5E5E5"> which I talked about</font>

1135
00:43:33,010 --> 00:43:36,820
they're designed to be horizontally

1136
00:43:34,750 --> 00:43:38,500
scalable so the idea is<font color="#CCCCCC"> that performance</font>

1137
00:43:36,820 --> 00:43:40,600
<font color="#CCCCCC">ingestion rates and</font><font color="#E5E5E5"> also query</font>

1138
00:43:38,500 --> 00:43:43,330
<font color="#CCCCCC">performance are going to be</font><font color="#E5E5E5"> consistent</font>

1139
00:43:40,600 --> 00:43:45,190
<font color="#CCCCCC">even</font><font color="#E5E5E5"> as your data scales</font><font color="#CCCCCC"> so as you go</font>

1140
00:43:43,330 --> 00:43:46,990
<font color="#CCCCCC">into petabytes of data</font><font color="#E5E5E5"> your query</font>

1141
00:43:45,190 --> 00:43:48,370
performance is<font color="#E5E5E5"> actually like if you're</font>

1142
00:43:46,990 --> 00:43:49,990
<font color="#E5E5E5">targeting for sub second query</font>

1143
00:43:48,370 --> 00:43:51,670
performance<font color="#CCCCCC"> at gigabytes and</font><font color="#E5E5E5"> go to</font>

1144
00:43:49,990 --> 00:43:52,839
petabytes<font color="#CCCCCC"> you should still be</font><font color="#E5E5E5"> able to</font>

1145
00:43:51,670 --> 00:43:54,430
<font color="#CCCCCC">maintain that sub second</font><font color="#E5E5E5"> query</font>

1146
00:43:52,840 --> 00:43:57,250
<font color="#CCCCCC">performance by</font><font color="#E5E5E5"> adding new hardware to</font>

1147
00:43:54,430 --> 00:44:00,520
the cluster so it doesn't<font color="#E5E5E5"> break at some</font>

1148
00:43:57,250 --> 00:44:01,950
point when it it just<font color="#E5E5E5"> stops you can't</font>

1149
00:44:00,520 --> 00:44:04,270
grow it<font color="#CCCCCC"> anymore</font>

1150
00:44:01,950 --> 00:44:06,279
there hasn't been a cluster out there

1151
00:44:04,270 --> 00:44:07,960
that's<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> pushed the limits</font><font color="#CCCCCC"> you</font>

1152
00:44:06,280 --> 00:44:09,430
know<font color="#E5E5E5"> all systems I</font><font color="#CCCCCC"> think have have an</font>

1153
00:44:07,960 --> 00:44:10,900
upper limit but<font color="#E5E5E5"> I think of all real</font>

1154
00:44:09,430 --> 00:44:14,020
world<font color="#E5E5E5"> data sets that we've ever seen</font>

1155
00:44:10,900 --> 00:44:15,610
we've never seen<font color="#E5E5E5"> that limit yet so what</font>

1156
00:44:14,020 --> 00:44:18,580
would you say the biggest system is that

1157
00:44:15,610 --> 00:44:20,500
you've<font color="#E5E5E5"> tested it with I've seen so I</font>

1158
00:44:18,580 --> 00:44:22,960
used to<font color="#E5E5E5"> work on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> tree cluster</font><font color="#CCCCCC"> that was</font>

1159
00:44:20,500 --> 00:44:24,850
a<font color="#E5E5E5"> few</font><font color="#CCCCCC"> hundred petabytes of data and then</font>

1160
00:44:22,960 --> 00:44:26,620
the data compressed down to about<font color="#E5E5E5"> a few</font>

1161
00:44:24,850 --> 00:44:28,720
hundred terabytes across a few hundred

1162
00:44:26,620 --> 00:44:30,009
nodes<font color="#CCCCCC"> I know if some systems out there</font>

1163
00:44:28,720 --> 00:44:32,020
<font color="#CCCCCC">that are about</font><font color="#E5E5E5"> a few thousand nodes</font>

1164
00:44:30,010 --> 00:44:33,520
<font color="#E5E5E5">today</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> these are some of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> largest</font>

1165
00:44:32,020 --> 00:44:35,200
<font color="#E5E5E5">data sets the world some of the largest</font>

1166
00:44:33,520 --> 00:44:37,570
networking<font color="#E5E5E5"> data sets in the world as</font>

1167
00:44:35,200 --> 00:44:43,020
well<font color="#E5E5E5"> so at that scale sales seems to be</font>

1168
00:44:37,570 --> 00:44:43,020
okay all right thanks thank you

1169
00:44:44,959 --> 00:44:50,549
pollutant<font color="#CCCCCC"> NTT communications I don't</font>

1170
00:44:49,109 --> 00:44:53,219
have a<font color="#E5E5E5"> question</font><font color="#CCCCCC"> actually I have a</font>

1171
00:44:50,549 --> 00:44:56,309
<font color="#E5E5E5">comment</font><font color="#CCCCCC"> which</font><font color="#E5E5E5"> is linked with</font><font color="#CCCCCC"> the</font>

1172
00:44:53,219 --> 00:45:00,719
previous questions or comments<font color="#E5E5E5"> so</font>

1173
00:44:56,309 --> 00:45:01,319
although I'm not contributing<font color="#E5E5E5"> to do it</font>

1174
00:45:00,719 --> 00:45:04,979
myself

1175
00:45:01,319 --> 00:45:07,489
I'm a big supporter of<font color="#CCCCCC"> droid in NTT</font>

1176
00:45:04,979 --> 00:45:11,609
<font color="#E5E5E5">communications we are using droid for</font>

1177
00:45:07,489 --> 00:45:15,589
variety<font color="#CCCCCC"> of different use cases ranging</font>

1178
00:45:11,609 --> 00:45:18,089
from<font color="#E5E5E5"> flow collection to collecting</font><font color="#CCCCCC"> bgp</font>

1179
00:45:15,589 --> 00:45:21,779
SNMP streaming telemetry<font color="#CCCCCC"> and things like</font>

1180
00:45:18,089 --> 00:45:27,328
<font color="#CCCCCC">that and so for</font><font color="#E5E5E5"> example there was this</font>

1181
00:45:21,779 --> 00:45:28,589
whole focus<font color="#CCCCCC"> on the roll-up versus not</font>

1182
00:45:27,329 --> 00:45:32,789
roll-up and<font color="#E5E5E5"> things like that</font>

1183
00:45:28,589 --> 00:45:34,380
right<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example I use flow</font>

1184
00:45:32,789 --> 00:45:36,989
collection mainly for business

1185
00:45:34,380 --> 00:45:40,670
<font color="#E5E5E5">intelligence purposes and in that case</font>

1186
00:45:36,989 --> 00:45:44,670
it's a lot<font color="#E5E5E5"> of data and I use roll-ups</font>

1187
00:45:40,670 --> 00:45:48,089
<font color="#CCCCCC">because for</font><font color="#E5E5E5"> example if you know a</font>

1188
00:45:44,670 --> 00:45:51,749
<font color="#CCCCCC">specific flow was that whatever megabits</font>

1189
00:45:48,089 --> 00:45:54,119
per second at five<font color="#E5E5E5"> minutes before</font><font color="#CCCCCC"> or</font>

1190
00:45:51,749 --> 00:45:56,249
after I don't<font color="#E5E5E5"> really care because it's</font>

1191
00:45:54,119 --> 00:45:58,739
not<font color="#CCCCCC"> for n6</font><font color="#E5E5E5"> it's you know business</font>

1192
00:45:56,249 --> 00:46:00,718
intelligence<font color="#E5E5E5"> but for</font><font color="#CCCCCC"> example I have</font>

1193
00:45:58,739 --> 00:46:03,509
other<font color="#CCCCCC"> datasets</font><font color="#E5E5E5"> where I am collecting</font>

1194
00:46:00,719 --> 00:46:05,910
<font color="#CCCCCC">Bijapur streaming telemetry</font><font color="#E5E5E5"> and there I</font>

1195
00:46:03,509 --> 00:46:07,979
really don't want<font color="#CCCCCC"> to miss on any single</font>

1196
00:46:05,910 --> 00:46:11,428
<font color="#CCCCCC">point of data and for example</font><font color="#E5E5E5"> the</font>

1197
00:46:07,979 --> 00:46:13,169
<font color="#E5E5E5">roll-ups are disabled right so I want to</font>

1198
00:46:11,429 --> 00:46:15,589
just to clarify that<font color="#E5E5E5"> make that comment</font>

1199
00:46:13,170 --> 00:46:19,559
<font color="#E5E5E5">and congratulate fanzine for a great</font>

1200
00:46:15,589 --> 00:46:22,410
thanks<font color="#E5E5E5"> fella</font><font color="#CCCCCC"> yeah so much</font><font color="#E5E5E5"> appreciated so</font>

1201
00:46:19,559 --> 00:46:24,209
it you<font color="#E5E5E5"> know there's from</font><font color="#CCCCCC"> Yahoo</font><font color="#E5E5E5"> that</font>

1202
00:46:22,410 --> 00:46:25,890
presented<font color="#CCCCCC"> and Paulo spoke about some of</font>

1203
00:46:24,209 --> 00:46:27,569
<font color="#E5E5E5">its use cases</font><font color="#CCCCCC"> druid is pretty widely</font>

1204
00:46:25,890 --> 00:46:29,640
adopted out there<font color="#E5E5E5"> there's a lot of</font>

1205
00:46:27,569 --> 00:46:31,140
<font color="#E5E5E5">public use cases online public use cases</font>

1206
00:46:29,640 --> 00:46:33,420
<font color="#E5E5E5">about different companies at different</font>

1207
00:46:31,140 --> 00:46:35,999
<font color="#E5E5E5">scales so encourage everyone if they're</font>

1208
00:46:33,420 --> 00:46:37,380
interested to<font color="#CCCCCC"> check that out if there's</font>

1209
00:46:35,999 --> 00:46:40,459
no other<font color="#E5E5E5"> questions want to thank</font>

1210
00:46:37,380 --> 00:46:40,459
everyone again for<font color="#CCCCCC"> their time</font>

1211
00:46:40,520 --> 00:46:42,580
you

1212
00:46:51,859 --> 00:46:53,920
<font color="#E5E5E5">you</font>

