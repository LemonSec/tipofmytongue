1
00:00:12,790 --> 00:00:20,900
good morning<font color="#E5E5E5"> so before taking a deep</font>

2
00:00:17,869 --> 00:00:23,000
dive<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the robot framework</font><font color="#CCCCCC"> I'd like</font>

3
00:00:20,900 --> 00:00:25,369
to just ask a general question how<font color="#CCCCCC"> many</font>

4
00:00:23,000 --> 00:00:28,840
<font color="#E5E5E5">of you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> involved</font><font color="#CCCCCC"> into some kind of</font>

5
00:00:25,369 --> 00:00:31,698
testing<font color="#E5E5E5"> beat like feature capability or</font>

6
00:00:28,840 --> 00:00:33,890
verifying the operation status whether

7
00:00:31,699 --> 00:00:35,840
<font color="#E5E5E5">it's in a lab environment or a</font>

8
00:00:33,890 --> 00:00:39,040
production<font color="#CCCCCC"> or</font><font color="#E5E5E5"> something like that</font><font color="#CCCCCC"> can I</font>

9
00:00:35,840 --> 00:00:39,040
<font color="#E5E5E5">get a</font><font color="#CCCCCC"> headcount</font><font color="#E5E5E5"> or something like that</font>

10
00:00:39,550 --> 00:00:47,569
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> it's 30% of the people a lot of</font>

11
00:00:45,170 --> 00:00:50,450
<font color="#E5E5E5">times this testing is done manually and</font>

12
00:00:47,570 --> 00:00:53,540
<font color="#CCCCCC">I feature by feature</font><font color="#E5E5E5"> so I'll be talking</font>

13
00:00:50,450 --> 00:00:55,879
<font color="#E5E5E5">about how to use Python or using robot</font>

14
00:00:53,540 --> 00:00:59,030
framework<font color="#E5E5E5"> to automate this certification</font>

15
00:00:55,879 --> 00:01:01,399
<font color="#CCCCCC">a lot</font><font color="#E5E5E5"> of times there</font><font color="#CCCCCC"> are several code</font>

16
00:00:59,030 --> 00:01:03,890
revisions for different<font color="#E5E5E5"> devices or</font><font color="#CCCCCC"> beat</font>

17
00:01:01,399 --> 00:01:05,990
<font color="#CCCCCC">a</font><font color="#E5E5E5"> router</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> firewall</font><font color="#CCCCCC"> load balancer</font><font color="#E5E5E5"> and</font>

18
00:01:03,890 --> 00:01:07,640
<font color="#E5E5E5">there are bugs</font><font color="#CCCCCC"> in a particular</font><font color="#E5E5E5"> version</font>

19
00:01:05,990 --> 00:01:10,190
<font color="#E5E5E5">and then our next version is rolled out</font>

20
00:01:07,640 --> 00:01:12,410
so<font color="#E5E5E5"> before a version gets deployed into</font>

21
00:01:10,190 --> 00:01:14,179
production<font color="#CCCCCC"> you just want to test the</font>

22
00:01:12,410 --> 00:01:16,340
<font color="#E5E5E5">various features now whether the</font>

23
00:01:14,180 --> 00:01:19,429
capability is working simple things like

24
00:01:16,340 --> 00:01:21,920
OSPF<font color="#CCCCCC"> bgp NAT whether they are working an</font>

25
00:01:19,429 --> 00:01:24,709
art<font color="#CCCCCC"> a system which</font><font color="#E5E5E5"> is already in</font>

26
00:01:21,920 --> 00:01:26,300
production whether it has<font color="#E5E5E5"> the</font>

27
00:01:24,709 --> 00:01:28,819
operational status correctly so for

28
00:01:26,300 --> 00:01:30,470
example the<font color="#CCCCCC"> BGP</font><font color="#E5E5E5"> neighbors are the</font>

29
00:01:28,819 --> 00:01:35,479
counters are going on<font color="#E5E5E5"> so things like</font>

30
00:01:30,470 --> 00:01:38,330
<font color="#E5E5E5">that so starting with robot framework</font>

31
00:01:35,479 --> 00:01:40,970
<font color="#CCCCCC">it's an</font><font color="#E5E5E5"> open source framework for</font>

32
00:01:38,330 --> 00:01:42,920
acceptance based testing so for a

33
00:01:40,970 --> 00:01:45,319
<font color="#E5E5E5">particular test</font><font color="#CCCCCC"> criteria there are only</font>

34
00:01:42,920 --> 00:01:48,319
two outputs<font color="#E5E5E5"> either it is a pass or a</font>

35
00:01:45,319 --> 00:01:50,740
fail<font color="#E5E5E5"> there is nothing in between that so</font>

36
00:01:48,319 --> 00:01:53,289
a<font color="#E5E5E5"> test condition will either pass your</font>

37
00:01:50,740 --> 00:01:55,339
acceptance criteria<font color="#E5E5E5"> or it will fail</font>

38
00:01:53,289 --> 00:01:57,380
<font color="#E5E5E5">there are certain like you know various</font>

39
00:01:55,340 --> 00:01:59,630
vendor tools also<font color="#CCCCCC"> available for</font>

40
00:01:57,380 --> 00:02:03,289
automating the testing<font color="#E5E5E5"> but this is an</font>

41
00:01:59,630 --> 00:02:06,649
<font color="#E5E5E5">open source one it has some</font><font color="#CCCCCC"> learning</font>

42
00:02:03,289 --> 00:02:09,160
curve but<font color="#CCCCCC"> once you are into it it</font><font color="#E5E5E5"> is</font>

43
00:02:06,649 --> 00:02:14,390
<font color="#E5E5E5">very easy</font><font color="#CCCCCC"> to just</font><font color="#E5E5E5"> write frameworks and</font>

44
00:02:09,160 --> 00:02:16,459
automate your configuration pretty much

45
00:02:14,390 --> 00:02:19,040
like the name mentions the robot

46
00:02:16,459 --> 00:02:21,680
framework<font color="#E5E5E5"> it's just like you tell</font><font color="#CCCCCC"> it's</font>

47
00:02:19,040 --> 00:02:22,230
<font color="#E5E5E5">something to do</font><font color="#CCCCCC"> you supply the values of</font>

48
00:02:21,680 --> 00:02:25,110
the

49
00:02:22,230 --> 00:02:27,329
<font color="#E5E5E5">attributes and you</font><font color="#CCCCCC"> expect this result so</font>

50
00:02:25,110 --> 00:02:29,459
it's pretty<font color="#E5E5E5"> much like that it's driven</font>

51
00:02:27,330 --> 00:02:31,890
<font color="#E5E5E5">by keywords so you just want to say</font>

52
00:02:29,459 --> 00:02:34,409
check whether<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> BGP neighbors are</font>

53
00:02:31,890 --> 00:02:38,670
up check whether<font color="#E5E5E5"> NAT is working or</font>

54
00:02:34,409 --> 00:02:41,640
something<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> the underlying</font>

55
00:02:38,670 --> 00:02:44,670
<font color="#E5E5E5">implementation is</font><font color="#CCCCCC"> done using Python or</font>

56
00:02:41,640 --> 00:02:47,160
Java<font color="#E5E5E5"> and the networking industry is</font>

57
00:02:44,670 --> 00:02:51,238
definitely inclining towards<font color="#E5E5E5"> Python for</font>

58
00:02:47,160 --> 00:02:53,430
all types<font color="#E5E5E5"> of automation</font><font color="#CCCCCC"> the idle</font>

59
00:02:51,239 --> 00:02:55,590
implementation is where you know<font color="#E5E5E5"> the</font>

60
00:02:53,430 --> 00:02:57,239
network automation engineers<font color="#CCCCCC"> write the</font>

61
00:02:55,590 --> 00:02:58,980
<font color="#E5E5E5">Python code for it and the network</font>

62
00:02:57,239 --> 00:03:01,680
engineers are just<font color="#E5E5E5"> able to use those</font>

63
00:02:58,980 --> 00:03:05,190
functions<font color="#E5E5E5"> put them into their framework</font>

64
00:03:01,680 --> 00:03:07,140
<font color="#E5E5E5">and then just run those tests this</font>

65
00:03:05,190 --> 00:03:09,989
framework<font color="#E5E5E5"> is not specifically made for</font>

66
00:03:07,140 --> 00:03:11,640
<font color="#E5E5E5">network based testing so now if you</font><font color="#CCCCCC"> go</font>

67
00:03:09,989 --> 00:03:15,480
on<font color="#E5E5E5"> the web</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> look for examples it</font><font color="#CCCCCC"> is</font>

68
00:03:11,640 --> 00:03:17,849
difficult to find<font color="#E5E5E5"> how you would find a</font>

69
00:03:15,480 --> 00:03:21,629
way<font color="#CCCCCC"> to you</font><font color="#E5E5E5"> know jump start to write a</font>

70
00:03:17,849 --> 00:03:24,358
general<font color="#E5E5E5"> generic framework the good part</font>

71
00:03:21,629 --> 00:03:27,090
<font color="#CCCCCC">about this is</font><font color="#E5E5E5"> that it is</font><font color="#CCCCCC"> data-driven</font><font color="#E5E5E5"> so</font>

72
00:03:24,359 --> 00:03:28,950
<font color="#E5E5E5">the framework is very generous you do</font>

73
00:03:27,090 --> 00:03:32,790
not need to hard code any values in that

74
00:03:28,950 --> 00:03:35,040
<font color="#E5E5E5">you can just supply variables</font><font color="#CCCCCC"> and you</font>

75
00:03:32,790 --> 00:03:37,980
know that way<font color="#CCCCCC"> you can use the same trick</font>

76
00:03:35,040 --> 00:03:40,380
<font color="#E5E5E5">framework for different tests</font>

77
00:03:37,980 --> 00:03:43,200
it is also OS an application independent

78
00:03:40,380 --> 00:03:45,630
<font color="#E5E5E5">so if you're using it on Windows Linux</font>

79
00:03:43,200 --> 00:03:49,048
or<font color="#E5E5E5"> Mac it will work in the</font><font color="#CCCCCC"> same way</font>

80
00:03:45,630 --> 00:03:51,209
<font color="#E5E5E5">however the underlying Python code is</font>

81
00:03:49,049 --> 00:03:53,130
generally not like<font color="#CCCCCC"> an always independent</font>

82
00:03:51,209 --> 00:03:55,319
<font color="#CCCCCC">there are some functions</font><font color="#E5E5E5"> which don't</font>

83
00:03:53,130 --> 00:03:59,910
<font color="#E5E5E5">work well with Linux and Windows so</font>

84
00:03:55,319 --> 00:04:02,130
sometimes you got to<font color="#E5E5E5"> check that so</font>

85
00:03:59,910 --> 00:04:04,410
talking about<font color="#E5E5E5"> the major components of</font>

86
00:04:02,130 --> 00:04:07,079
the robot framework system now you have

87
00:04:04,410 --> 00:04:08,790
like<font color="#CCCCCC"> a say a server or a VM which you</font>

88
00:04:07,079 --> 00:04:11,459
are using for<font color="#CCCCCC"> testing which has</font>

89
00:04:08,790 --> 00:04:14,429
connectivity<font color="#E5E5E5"> to a networking device like</font>

90
00:04:11,459 --> 00:04:17,668
a router switch<font color="#E5E5E5"> load balancer or a</font>

91
00:04:14,430 --> 00:04:21,329
firewall the main part is the framework

92
00:04:17,668 --> 00:04:24,330
<font color="#CCCCCC">itself which is a file with a dot remote</font>

93
00:04:21,329 --> 00:04:27,000
extension<font color="#E5E5E5"> it has certain dependencies</font>

94
00:04:24,330 --> 00:04:29,219
and settings parameters to define<font color="#CCCCCC"> you</font>

95
00:04:27,000 --> 00:04:31,830
<font color="#CCCCCC">know the configuration files the</font>

96
00:04:29,220 --> 00:04:35,320
variables which libraries are<font color="#CCCCCC"> being used</font>

97
00:04:31,830 --> 00:04:37,930
and then<font color="#CCCCCC"> you have a series of test cases</font>

98
00:04:35,320 --> 00:04:40,719
each test case has a<font color="#E5E5E5"> keyword which</font>

99
00:04:37,930 --> 00:04:42,840
defines what<font color="#E5E5E5"> the test case is what you</font>

100
00:04:40,720 --> 00:04:45,400
intend<font color="#CCCCCC"> to do and then</font><font color="#E5E5E5"> you supply the</font>

101
00:04:42,840 --> 00:04:48,580
variables<font color="#CCCCCC"> that you want to send to that</font>

102
00:04:45,400 --> 00:04:51,250
<font color="#E5E5E5">function it uses the underlying Python</font>

103
00:04:48,580 --> 00:04:54,669
code for that<font color="#E5E5E5"> or the functions in the</font>

104
00:04:51,250 --> 00:04:57,340
<font color="#E5E5E5">inside the Python code are</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of the</font>

105
00:04:54,670 --> 00:04:59,710
same name as that<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> keywords so if</font>

106
00:04:57,340 --> 00:05:01,690
<font color="#E5E5E5">you're using a particular keyword</font><font color="#CCCCCC"> in the</font>

107
00:04:59,710 --> 00:05:03,940
framework<font color="#E5E5E5"> you need to have a Python</font>

108
00:05:01,690 --> 00:05:07,150
function for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in the underlying</font>

109
00:05:03,940 --> 00:05:10,600
Python code it's preferable to<font color="#E5E5E5"> have a</font>

110
00:05:07,150 --> 00:05:12,609
gender ik<font color="#E5E5E5"> function in Python</font><font color="#CCCCCC"> because you</font>

111
00:05:10,600 --> 00:05:14,530
don't want to get<font color="#CCCCCC"> too detail</font><font color="#E5E5E5"> so that</font><font color="#CCCCCC"> you</font>

112
00:05:12,610 --> 00:05:16,960
can use the same code over<font color="#E5E5E5"> and over for</font>

113
00:05:14,530 --> 00:05:20,349
different types of frameworks<font color="#E5E5E5"> you can</font>

114
00:05:16,960 --> 00:05:23,409
have you<font color="#CCCCCC"> know like arguments applied to</font>

115
00:05:20,350 --> 00:05:25,780
it so that<font color="#E5E5E5"> you send it variables and it</font>

116
00:05:23,410 --> 00:05:28,150
gives you the<font color="#CCCCCC"> output automatically</font><font color="#E5E5E5"> also</font>

117
00:05:25,780 --> 00:05:30,520
the<font color="#E5E5E5"> Python function should have a return</font>

118
00:05:28,150 --> 00:05:32,530
value so<font color="#E5E5E5"> this return value is sent back</font>

119
00:05:30,520 --> 00:05:34,719
<font color="#E5E5E5">to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> free test case in the framework</font>

120
00:05:32,530 --> 00:05:37,090
<font color="#CCCCCC">and then you are comparing it with</font><font color="#E5E5E5"> an</font>

121
00:05:34,720 --> 00:05:40,930
<font color="#E5E5E5">expected value to the</font><font color="#CCCCCC"> value which you</font>

122
00:05:37,090 --> 00:05:43,780
got finally there are pointers to

123
00:05:40,930 --> 00:05:45,760
configuration<font color="#E5E5E5"> files so for sometimes for</font>

124
00:05:43,780 --> 00:05:48,010
some types of feature<font color="#E5E5E5"> you want to load</font>

125
00:05:45,760 --> 00:05:50,289
the capability<font color="#CCCCCC"> you know load the</font>

126
00:05:48,010 --> 00:05:51,430
configuration<font color="#CCCCCC"> and then verify</font><font color="#E5E5E5"> whether it</font>

127
00:05:50,290 --> 00:05:55,390
is working<font color="#E5E5E5"> or not</font>

128
00:05:51,430 --> 00:05:57,730
for<font color="#E5E5E5"> example the</font><font color="#CCCCCC"> Triple A</font><font color="#E5E5E5"> feature you</font>

129
00:05:55,390 --> 00:05:59,500
<font color="#E5E5E5">want to load this is the configuration</font><font color="#CCCCCC"> /</font>

130
00:05:57,730 --> 00:06:04,630
<font color="#E5E5E5">Triple A and then verify whether it is</font>

131
00:05:59,500 --> 00:06:07,750
working<font color="#CCCCCC"> or not this is the structure of</font>

132
00:06:04,630 --> 00:06:12,310
<font color="#E5E5E5">the framework so you</font><font color="#CCCCCC"> have your</font>

133
00:06:07,750 --> 00:06:13,570
automation directory on your<font color="#E5E5E5"> VM we have</font>

134
00:06:12,310 --> 00:06:17,950
the test suite directory which contains

135
00:06:13,570 --> 00:06:20,560
<font color="#CCCCCC">several</font><font color="#E5E5E5"> Suites of test cases each suite</font>

136
00:06:17,950 --> 00:06:23,200
has different test case parameters so

137
00:06:20,560 --> 00:06:25,330
you<font color="#E5E5E5"> want to generally have separate the</font>

138
00:06:23,200 --> 00:06:28,360
<font color="#CCCCCC">different test Suites</font><font color="#E5E5E5"> by the type</font><font color="#CCCCCC"> of</font>

139
00:06:25,330 --> 00:06:30,729
feature<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example all the routing</font>

140
00:06:28,360 --> 00:06:33,100
capabilities in<font color="#E5E5E5"> a one single test suite</font>

141
00:06:30,730 --> 00:06:36,790
the switching capabilities in a the test

142
00:06:33,100 --> 00:06:39,400
suite the<font color="#E5E5E5"> NAT stuff</font><font color="#CCCCCC"> for the ntp stuff in</font>

143
00:06:36,790 --> 00:06:42,130
a different<font color="#CCCCCC"> test</font><font color="#E5E5E5"> weight there is also a</font>

144
00:06:39,400 --> 00:06:43,989
resource directory<font color="#E5E5E5"> this is where you add</font>

145
00:06:42,130 --> 00:06:46,630
the configuration files so if you are

146
00:06:43,990 --> 00:06:48,310
<font color="#E5E5E5">into feature testing for a device then</font>

147
00:06:46,630 --> 00:06:48,999
you<font color="#E5E5E5"> need the configuration file</font><font color="#CCCCCC"> so that</font>

148
00:06:48,310 --> 00:06:51,759
you<font color="#E5E5E5"> can</font>

149
00:06:48,999 --> 00:06:54,009
and then verify<font color="#E5E5E5"> if you're just</font><font color="#CCCCCC"> checking</font>

150
00:06:51,759 --> 00:06:56,019
the<font color="#E5E5E5"> operation status of a device already</font>

151
00:06:54,009 --> 00:06:58,119
in production<font color="#CCCCCC"> then you</font><font color="#E5E5E5"> don't want to</font>

152
00:06:56,019 --> 00:06:59,529
load any configuration you<font color="#E5E5E5"> you don't</font>

153
00:06:58,119 --> 00:07:01,239
need<font color="#E5E5E5"> any such files you just are</font>

154
00:06:59,529 --> 00:07:04,149
verifying the status of different

155
00:07:01,239 --> 00:07:07,628
outputs that<font color="#E5E5E5"> is at the library directory</font>

156
00:07:04,149 --> 00:07:09,699
which has<font color="#E5E5E5"> the underlying Python code</font><font color="#CCCCCC"> you</font>

157
00:07:07,629 --> 00:07:11,769
can have different<font color="#E5E5E5"> Python codes and you</font>

158
00:07:09,699 --> 00:07:14,139
know just point them in<font color="#E5E5E5"> the framework</font>

159
00:07:11,769 --> 00:07:17,349
<font color="#CCCCCC">itself or have all the functions in a</font>

160
00:07:14,139 --> 00:07:19,479
single<font color="#E5E5E5"> in a single Python code finally</font>

161
00:07:17,349 --> 00:07:21,909
there is the variable directory it

162
00:07:19,479 --> 00:07:24,669
generally just contains one<font color="#CCCCCC"> ml type of</font>

163
00:07:21,909 --> 00:07:27,039
file so<font color="#E5E5E5"> you have the different variables</font>

164
00:07:24,669 --> 00:07:29,349
<font color="#E5E5E5">and the values that they</font><font color="#CCCCCC"> hold so for</font>

165
00:07:27,039 --> 00:07:32,709
<font color="#CCCCCC">different types of</font><font color="#E5E5E5"> testing only</font><font color="#CCCCCC"> the</font>

166
00:07:29,349 --> 00:07:34,688
variable file has to<font color="#CCCCCC"> be changed so you</font>

167
00:07:32,709 --> 00:07:37,419
might want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get the IP address the</font>

168
00:07:34,689 --> 00:07:39,039
<font color="#CCCCCC">username credentials or something</font><font color="#E5E5E5"> like</font>

169
00:07:37,419 --> 00:07:41,229
<font color="#E5E5E5">that</font>

170
00:07:39,039 --> 00:07:44,558
running the robot framework<font color="#E5E5E5"> is pretty</font>

171
00:07:41,229 --> 00:07:46,959
simple<font color="#CCCCCC"> you first install it</font><font color="#E5E5E5"> by simply by</font>

172
00:07:44,559 --> 00:07:49,289
pip install robot framework<font color="#CCCCCC"> and then you</font>

173
00:07:46,959 --> 00:07:52,569
use the robot key keyboard<font color="#E5E5E5"> to run that</font>

174
00:07:49,289 --> 00:07:55,989
robot extension file<font color="#E5E5E5"> after running the</font>

175
00:07:52,569 --> 00:07:59,369
robot file the good part<font color="#CCCCCC"> about it is</font>

176
00:07:55,989 --> 00:08:02,018
that<font color="#E5E5E5"> it provides you a HTML</font><font color="#CCCCCC"> based</font><font color="#E5E5E5"> report</font>

177
00:07:59,369 --> 00:08:04,839
<font color="#E5E5E5">it contains the details of how the test</font>

178
00:08:02,019 --> 00:08:07,209
went<font color="#E5E5E5"> each test case whether it past</font>

179
00:08:04,839 --> 00:08:12,399
<font color="#E5E5E5">whether it failed what exactly failed in</font>

180
00:08:07,209 --> 00:08:17,050
that so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the format</font><font color="#E5E5E5"> of the</font>

181
00:08:12,399 --> 00:08:19,149
framework the framework is you know it

182
00:08:17,050 --> 00:08:22,360
has the<font color="#CCCCCC"> extension</font><font color="#E5E5E5"> of dot robot but there</font>

183
00:08:19,149 --> 00:08:25,499
are four types of files you<font color="#E5E5E5"> can use to</font>

184
00:08:22,360 --> 00:08:28,449
define the framework<font color="#E5E5E5"> once the HTML based</font>

185
00:08:25,499 --> 00:08:31,329
framework<font color="#E5E5E5"> the advantage of this is that</font>

186
00:08:28,449 --> 00:08:34,930
it has a<font color="#E5E5E5"> very nice visually appealing</font>

187
00:08:31,329 --> 00:08:39,039
<font color="#E5E5E5">file it is easier to understand it is</font>

188
00:08:34,929 --> 00:08:39,638
properly separated it has different<font color="#E5E5E5"> HTML</font>

189
00:08:39,039 --> 00:08:42,490
<font color="#E5E5E5">tags</font>

190
00:08:39,639 --> 00:08:45,040
however the problem<font color="#CCCCCC"> that I have with</font>

191
00:08:42,490 --> 00:08:47,290
HTML files is it's difficult<font color="#CCCCCC"> to find</font><font color="#E5E5E5"> a</font>

192
00:08:45,040 --> 00:08:51,099
good<font color="#CCCCCC"> editor</font><font color="#E5E5E5"> to you know edit the HTML</font>

193
00:08:47,290 --> 00:08:52,990
files<font color="#E5E5E5"> the other option is to use tab</font>

194
00:08:51,100 --> 00:08:55,420
separated values so these are

195
00:08:52,990 --> 00:08:56,889
essentially like spreadsheets<font color="#E5E5E5"> which are</font>

196
00:08:55,420 --> 00:08:58,630
a program you know it's easy<font color="#CCCCCC"> to program</font>

197
00:08:56,889 --> 00:09:01,329
<font color="#E5E5E5">them because you can import values</font>

198
00:08:58,630 --> 00:09:03,029
export values from them and the values

199
00:09:01,329 --> 00:09:05,589
are<font color="#CCCCCC"> just separated by tab</font>

200
00:09:03,029 --> 00:09:07,930
what I prefer<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the plain text version</font>

201
00:09:05,589 --> 00:09:10,750
you know as you know<font color="#E5E5E5"> when is</font><font color="#CCCCCC"> the best</font>

202
00:09:07,930 --> 00:09:12,880
editor<font color="#CCCCCC"> so it's easier to edit</font><font color="#E5E5E5"> it this</font>

203
00:09:10,750 --> 00:09:15,399
file<font color="#E5E5E5"> using them and just define the</font>

204
00:09:12,880 --> 00:09:18,630
framework in a plain text<font color="#CCCCCC"> format there</font>

205
00:09:15,399 --> 00:09:21,160
is also a restructured format available

206
00:09:18,630 --> 00:09:23,140
several Python documentation is

207
00:09:21,160 --> 00:09:26,709
generally<font color="#CCCCCC"> written in this</font><font color="#E5E5E5"> restructure</font>

208
00:09:23,140 --> 00:09:31,240
format which is<font color="#CCCCCC"> a balance</font><font color="#E5E5E5"> of like plain</font>

209
00:09:26,709 --> 00:09:33,459
text and HTML based version in this you

210
00:09:31,240 --> 00:09:40,420
<font color="#CCCCCC">have the Python code the framework</font><font color="#E5E5E5"> the</font>

211
00:09:33,459 --> 00:09:42,430
variables<font color="#E5E5E5"> all in a single file this is a</font>

212
00:09:40,420 --> 00:09:45,910
structure of the framework

213
00:09:42,430 --> 00:09:47,380
it's very modular<font color="#CCCCCC"> which means that the</font>

214
00:09:45,910 --> 00:09:49,719
test cases are defined<font color="#E5E5E5"> in different</font>

215
00:09:47,380 --> 00:09:51,310
blocks<font color="#E5E5E5"> so when you you know when an</font>

216
00:09:49,720 --> 00:09:53,440
engineer is even reading a particular

217
00:09:51,310 --> 00:09:56,319
<font color="#E5E5E5">test framework it is easier to figure</font>

218
00:09:53,440 --> 00:09:59,170
out what test case is being tested<font color="#CCCCCC"> or</font>

219
00:09:56,320 --> 00:10:00,730
verified<font color="#E5E5E5"> it contains the settings</font><font color="#CCCCCC"> you</font>

220
00:09:59,170 --> 00:10:03,490
know which are<font color="#CCCCCC"> like</font><font color="#E5E5E5"> just pointers to</font>

221
00:10:00,730 --> 00:10:05,279
what libraries are<font color="#CCCCCC"> being used whereas</font>

222
00:10:03,490 --> 00:10:08,020
the location of the configuration files

223
00:10:05,279 --> 00:10:11,610
there's an option<font color="#E5E5E5"> to do a</font><font color="#CCCCCC"> pre test setup</font>

224
00:10:08,020 --> 00:10:14,560
so for example if there<font color="#CCCCCC"> is a particular</font>

225
00:10:11,610 --> 00:10:16,000
test which<font color="#CCCCCC"> you need to include in all of</font>

226
00:10:14,560 --> 00:10:18,219
your test cases then you<font color="#CCCCCC"> can include</font>

227
00:10:16,000 --> 00:10:20,350
<font color="#E5E5E5">that</font><font color="#CCCCCC"> in the pre test setup so for</font>

228
00:10:18,220 --> 00:10:22,630
example when<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> using you know</font>

229
00:10:20,350 --> 00:10:25,740
testing networking devices<font color="#E5E5E5"> we always</font>

230
00:10:22,630 --> 00:10:29,200
need to<font color="#CCCCCC"> have that SSH session from</font><font color="#E5E5E5"> the</font>

231
00:10:25,740 --> 00:10:31,240
test VM to the networking device so it's

232
00:10:29,200 --> 00:10:32,890
better<font color="#E5E5E5"> to define that session</font><font color="#CCCCCC"> object</font><font color="#E5E5E5"> in</font>

233
00:10:31,240 --> 00:10:36,790
the pre test<font color="#E5E5E5"> setup and then use that</font>

234
00:10:32,890 --> 00:10:38,589
<font color="#E5E5E5">same session for all the test</font><font color="#CCCCCC"> cases</font><font color="#E5E5E5"> then</font>

235
00:10:36,790 --> 00:10:40,990
<font color="#E5E5E5">there is the test</font><font color="#CCCCCC"> criteria so this</font>

236
00:10:38,589 --> 00:10:43,690
contains several test cases<font color="#E5E5E5"> one after</font>

237
00:10:40,990 --> 00:10:46,930
<font color="#CCCCCC">the other you can include</font><font color="#E5E5E5"> as many test</font>

238
00:10:43,690 --> 00:10:49,750
cases<font color="#E5E5E5"> as</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> finally there is the</font>

239
00:10:46,930 --> 00:10:51,819
test<font color="#E5E5E5"> clean up so after</font><font color="#CCCCCC"> you will come</font>

240
00:10:49,750 --> 00:10:54,550
you've completed running all the tests

241
00:10:51,820 --> 00:10:56,860
<font color="#CCCCCC">you just want to gracefully clear the</font>

242
00:10:54,550 --> 00:11:00,120
session close the SSH session<font color="#CCCCCC"> so you</font>

243
00:10:56,860 --> 00:11:03,399
<font color="#E5E5E5">have a post test clean up option also</font>

244
00:11:00,120 --> 00:11:05,230
then each test has a binary<font color="#E5E5E5"> value the</font>

245
00:11:03,399 --> 00:11:07,959
output<font color="#CCCCCC"> is binary either it's true or</font>

246
00:11:05,230 --> 00:11:11,470
false<font color="#E5E5E5"> because either a test has passed</font>

247
00:11:07,959 --> 00:11:14,829
<font color="#CCCCCC">all tests</font><font color="#E5E5E5"> failed each test can have</font>

248
00:11:11,470 --> 00:11:16,329
multiple<font color="#CCCCCC"> functions</font><font color="#E5E5E5"> so suppose you're you</font>

249
00:11:14,829 --> 00:11:18,579
know<font color="#E5E5E5"> testing or</font>

250
00:11:16,329 --> 00:11:20,290
PF capability<font color="#E5E5E5"> so first you want to load</font>

251
00:11:18,579 --> 00:11:21,878
that<font color="#E5E5E5"> function you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to verify</font>

252
00:11:20,290 --> 00:11:23,529
connectivity you want to verify<font color="#E5E5E5"> the</font>

253
00:11:21,879 --> 00:11:24,999
neighbors are up<font color="#E5E5E5"> you want to verify the</font>

254
00:11:23,529 --> 00:11:26,829
counters are going on or<font color="#E5E5E5"> not</font>

255
00:11:24,999 --> 00:11:29,769
so each test case can have multiple

256
00:11:26,829 --> 00:11:32,829
<font color="#CCCCCC">functions and it's a top-down approach</font>

257
00:11:29,769 --> 00:11:35,410
<font color="#CCCCCC">for test case this means</font><font color="#E5E5E5"> that if any</font>

258
00:11:32,829 --> 00:11:37,628
<font color="#E5E5E5">test test function in a particular test</font>

259
00:11:35,410 --> 00:11:43,299
case fails<font color="#E5E5E5"> then the</font><font color="#CCCCCC"> whole test case is</font>

260
00:11:37,629 --> 00:11:46,209
considered<font color="#E5E5E5"> as failed this is</font><font color="#CCCCCC"> a sample of</font>

261
00:11:43,299 --> 00:11:48,879
the<font color="#CCCCCC"> framework</font><font color="#E5E5E5"> so as you see we first</font>

262
00:11:46,209 --> 00:11:50,618
define<font color="#CCCCCC"> the settings you</font><font color="#E5E5E5"> can define</font>

263
00:11:48,879 --> 00:11:53,799
what's the documentation<font color="#E5E5E5"> now it's a good</font>

264
00:11:50,619 --> 00:11:56,139
good practice to<font color="#E5E5E5"> just mention what is</font>

265
00:11:53,799 --> 00:11:58,360
this framework<font color="#E5E5E5"> being used for then you</font>

266
00:11:56,139 --> 00:12:00,309
define the<font color="#E5E5E5"> libraries for</font><font color="#CCCCCC"> example here</font>

267
00:11:58,360 --> 00:12:03,100
I've defined<font color="#E5E5E5"> operating system which is</font>

268
00:12:00,309 --> 00:12:05,139
<font color="#E5E5E5">the built-in library used for several OS</font>

269
00:12:03,100 --> 00:12:07,360
<font color="#E5E5E5">level functions and then that is</font><font color="#CCCCCC"> the</font>

270
00:12:05,139 --> 00:12:09,639
reference<font color="#CCCCCC"> to the</font><font color="#E5E5E5"> Python code view which</font>

271
00:12:07,360 --> 00:12:11,889
I which was written so that's also

272
00:12:09,639 --> 00:12:13,420
<font color="#CCCCCC">another library that</font><font color="#E5E5E5"> you are</font><font color="#CCCCCC"> using then</font>

273
00:12:11,889 --> 00:12:16,480
you reference the<font color="#E5E5E5"> location of the</font>

274
00:12:13,420 --> 00:12:17,949
variable file which is the<font color="#CCCCCC"> ml file</font><font color="#E5E5E5"> where</font>

275
00:12:16,480 --> 00:12:21,249
you've defined all<font color="#CCCCCC"> the variables</font><font color="#E5E5E5"> and</font>

276
00:12:17,949 --> 00:12:23,738
<font color="#CCCCCC">their</font><font color="#E5E5E5"> at and their keys finally we have</font>

277
00:12:21,249 --> 00:12:27,160
the sweet<font color="#E5E5E5"> setup and the sweet teardown</font>

278
00:12:23,739 --> 00:12:29,470
<font color="#E5E5E5">so as you see below there</font><font color="#CCCCCC"> is a section</font>

279
00:12:27,160 --> 00:12:31,689
for<font color="#E5E5E5"> key words so what you defined in</font>

280
00:12:29,470 --> 00:12:34,360
<font color="#E5E5E5">sweet sweat sweet setup and sweet ed</font>

281
00:12:31,689 --> 00:12:36,519
teardown that has been<font color="#CCCCCC"> elaborated in the</font>

282
00:12:34,360 --> 00:12:39,239
<font color="#CCCCCC">key word</font><font color="#E5E5E5"> section so for first you're</font>

283
00:12:36,519 --> 00:12:41,939
<font color="#CCCCCC">just opening</font><font color="#E5E5E5"> a connection running some</font>

284
00:12:39,239 --> 00:12:44,410
running running<font color="#E5E5E5"> some particular function</font>

285
00:12:41,939 --> 00:12:46,689
<font color="#CCCCCC">next you are setting the sweet variable</font>

286
00:12:44,410 --> 00:12:49,029
so you're<font color="#E5E5E5"> just defining that the result</font>

287
00:12:46,689 --> 00:12:51,998
obtained in the<font color="#CCCCCC"> previous line is being</font>

288
00:12:49,029 --> 00:12:55,239
used as the<font color="#E5E5E5"> variable some result for</font><font color="#CCCCCC"> all</font>

289
00:12:51,999 --> 00:12:56,949
the test<font color="#CCCCCC"> cases you also have that</font><font color="#E5E5E5"> sweet</font>

290
00:12:55,239 --> 00:13:00,489
teardown where you are gracefully

291
00:12:56,949 --> 00:13:03,069
closing<font color="#CCCCCC"> a connection the test</font><font color="#E5E5E5"> cases here</font>

292
00:13:00,489 --> 00:13:04,689
are just<font color="#CCCCCC"> two simple tests test cases one</font>

293
00:13:03,069 --> 00:13:07,540
one is we are<font color="#E5E5E5"> just fetching the</font>

294
00:13:04,689 --> 00:13:09,610
interface status<font color="#E5E5E5"> so it just has two</font>

295
00:13:07,540 --> 00:13:12,509
functions<font color="#E5E5E5"> one is you know it's some</font>

296
00:13:09,610 --> 00:13:14,889
random function taking some attribute

297
00:13:12,509 --> 00:13:17,769
<font color="#CCCCCC">defining</font><font color="#E5E5E5"> the return value in a variable</font>

298
00:13:14,889 --> 00:13:20,259
called<font color="#E5E5E5"> output</font><font color="#CCCCCC"> in the second</font><font color="#E5E5E5"> line it just</font>

299
00:13:17,769 --> 00:13:22,089
<font color="#E5E5E5">logs that output to the console so when</font>

300
00:13:20,259 --> 00:13:25,119
you run<font color="#E5E5E5"> the test case you can see what</font>

301
00:13:22,089 --> 00:13:26,980
was the<font color="#E5E5E5"> output like the second sample</font>

302
00:13:25,119 --> 00:13:29,080
test case<font color="#CCCCCC"> here is loading a particular</font>

303
00:13:26,980 --> 00:13:31,450
configuration<font color="#CCCCCC"> so</font>

304
00:13:29,080 --> 00:13:32,890
<font color="#CCCCCC">you're suppose</font><font color="#E5E5E5"> you're running some</font>

305
00:13:31,450 --> 00:13:36,010
particular function<font color="#E5E5E5"> again with some</font>

306
00:13:32,890 --> 00:13:37,420
variables<font color="#E5E5E5"> getting an output</font><font color="#CCCCCC"> second I'm</font>

307
00:13:36,010 --> 00:13:39,490
you<font color="#E5E5E5"> are again running another function</font>

308
00:13:37,420 --> 00:13:41,920
<font color="#CCCCCC">getting an</font><font color="#E5E5E5"> output and the third time</font><font color="#CCCCCC"> you</font>

309
00:13:39,490 --> 00:13:43,270
<font color="#CCCCCC">are</font><font color="#E5E5E5"> just probably comparing the values</font>

310
00:13:41,920 --> 00:13:46,060
of both the functions and checking

311
00:13:43,270 --> 00:13:51,610
<font color="#E5E5E5">whether the expected value is matching</font>

312
00:13:46,060 --> 00:13:53,290
<font color="#E5E5E5">the actual output these are the robot</font>

313
00:13:51,610 --> 00:13:54,850
command options so when you run<font color="#E5E5E5"> the</font>

314
00:13:53,290 --> 00:13:58,599
robot<font color="#E5E5E5"> file there are</font><font color="#CCCCCC"> several options</font>

315
00:13:54,850 --> 00:14:00,790
<font color="#E5E5E5">available to</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> well you know some of</font>

316
00:13:58,600 --> 00:14:02,800
<font color="#E5E5E5">them</font><font color="#CCCCCC"> are setting</font><font color="#E5E5E5"> your documentation so</font>

317
00:14:00,790 --> 00:14:05,020
for<font color="#E5E5E5"> example for</font><font color="#CCCCCC"> a different framework</font>

318
00:14:02,800 --> 00:14:07,060
<font color="#CCCCCC">you just want to alter some of</font><font color="#E5E5E5"> the</font>

319
00:14:05,020 --> 00:14:08,800
documentation<font color="#E5E5E5"> or it's a particular</font>

320
00:14:07,060 --> 00:14:10,300
different type of version that you are

321
00:14:08,800 --> 00:14:12,459
<font color="#E5E5E5">testing you just want to make a note</font><font color="#CCCCCC"> of</font>

322
00:14:10,300 --> 00:14:15,609
<font color="#E5E5E5">it you can separately add documentation</font>

323
00:14:12,459 --> 00:14:18,910
using<font color="#CCCCCC"> the command options you can</font><font color="#E5E5E5"> also</font>

324
00:14:15,610 --> 00:14:21,010
<font color="#E5E5E5">set the report name as I mentioned</font>

325
00:14:18,910 --> 00:14:22,990
<font color="#CCCCCC">previously it has a very good HTML</font>

326
00:14:21,010 --> 00:14:25,450
report which is which gets generated<font color="#E5E5E5"> at</font>

327
00:14:22,990 --> 00:14:28,330
the end so<font color="#CCCCCC"> that can be</font><font color="#E5E5E5"> also defined you</font>

328
00:14:25,450 --> 00:14:30,480
can<font color="#E5E5E5"> define tags so for example certain</font>

329
00:14:28,330 --> 00:14:32,709
<font color="#E5E5E5">test cases are like critical</font><font color="#CCCCCC"> test cases</font>

330
00:14:30,480 --> 00:14:34,510
<font color="#E5E5E5">some of them are just basic</font>

331
00:14:32,709 --> 00:14:38,170
functionality checking<font color="#E5E5E5"> so you can add</font>

332
00:14:34,510 --> 00:14:40,569
those tags to the test cases you<font color="#CCCCCC"> can</font>

333
00:14:38,170 --> 00:14:42,490
<font color="#E5E5E5">rerun a certain type of test cases so</font>

334
00:14:40,570 --> 00:14:44,110
<font color="#CCCCCC">for example in the initial</font>

335
00:14:42,490 --> 00:14:46,089
troubleshooting that<font color="#E5E5E5"> you're doing you're</font>

336
00:14:44,110 --> 00:14:48,520
running a series of test cases and<font color="#E5E5E5"> maybe</font>

337
00:14:46,089 --> 00:14:50,260
<font color="#CCCCCC">Phi of them failed</font><font color="#E5E5E5"> that might not</font>

338
00:14:48,520 --> 00:14:50,740
necessarily mean that the feature has

339
00:14:50,260 --> 00:14:52,660
<font color="#E5E5E5">failed</font>

340
00:14:50,740 --> 00:14:54,279
maybe there was a connectivity error or

341
00:14:52,660 --> 00:14:56,290
<font color="#E5E5E5">something like that so now after</font>

342
00:14:54,279 --> 00:14:58,240
troubleshooting that<font color="#E5E5E5"> we just want to</font>

343
00:14:56,290 --> 00:15:00,790
rerun<font color="#E5E5E5"> those</font><font color="#CCCCCC"> fail tests and not run</font>

344
00:14:58,240 --> 00:15:03,399
though all the tests again<font color="#CCCCCC"> and then you</font>

345
00:15:00,790 --> 00:15:08,680
can also define<font color="#E5E5E5"> time stamps for</font><font color="#CCCCCC"> now</font>

346
00:15:03,399 --> 00:15:10,630
logging and things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is</font>

347
00:15:08,680 --> 00:15:12,819
<font color="#E5E5E5">the style conventions used in the</font>

348
00:15:10,630 --> 00:15:15,700
framework<font color="#E5E5E5"> as we saw the variable is</font>

349
00:15:12,820 --> 00:15:19,270
defined<font color="#E5E5E5"> in curly braces preceded by a</font>

350
00:15:15,700 --> 00:15:22,029
dollar sign the function name can be

351
00:15:19,270 --> 00:15:24,189
<font color="#CCCCCC">separated by a</font><font color="#E5E5E5"> single space or you can</font>

352
00:15:22,029 --> 00:15:26,770
have<font color="#E5E5E5"> it all together so</font><font color="#CCCCCC"> for example we</font>

353
00:15:24,190 --> 00:15:28,600
have the check interface config<font color="#E5E5E5"> there</font>

354
00:15:26,770 --> 00:15:31,329
are two ways either<font color="#E5E5E5"> you have a single</font>

355
00:15:28,600 --> 00:15:34,480
space in between<font color="#E5E5E5"> that or just define it</font>

356
00:15:31,329 --> 00:15:36,489
<font color="#E5E5E5">all together for passing variables to</font>

357
00:15:34,480 --> 00:15:39,459
the function names<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example we</font>

358
00:15:36,490 --> 00:15:42,250
have the<font color="#E5E5E5"> show interface function you are</font>

359
00:15:39,459 --> 00:15:44,619
<font color="#E5E5E5">you have at least four</font><font color="#CCCCCC"> white spaces</font>

360
00:15:42,250 --> 00:15:50,560
<font color="#E5E5E5">to separate that and then you add the</font>

361
00:15:44,620 --> 00:15:54,790
variables this<font color="#E5E5E5"> is how you would create a</font>

362
00:15:50,560 --> 00:15:56,589
sample<font color="#CCCCCC"> in a simple test case</font><font color="#E5E5E5"> the test</font>

363
00:15:54,790 --> 00:15:59,800
case are defined under<font color="#E5E5E5"> the test cases</font>

364
00:15:56,590 --> 00:16:02,380
section the<font color="#CCCCCC"> keyword</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> means what</font><font color="#E5E5E5"> the</font>

365
00:15:59,800 --> 00:16:05,229
test case is doing is essentially what

366
00:16:02,380 --> 00:16:07,510
you<font color="#CCCCCC"> are trying</font><font color="#E5E5E5"> to achieve and</font><font color="#CCCCCC"> not how we</font>

367
00:16:05,230 --> 00:16:09,730
are<font color="#E5E5E5"> trying to achieve</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example you</font>

368
00:16:07,510 --> 00:16:12,460
are just<font color="#E5E5E5"> taking the VLAN status so we</font>

369
00:16:09,730 --> 00:16:13,930
<font color="#E5E5E5">just mention show VLAN status you don't</font>

370
00:16:12,460 --> 00:16:17,590
need to<font color="#CCCCCC"> mention how you are doing</font><font color="#E5E5E5"> it</font>

371
00:16:13,930 --> 00:16:19,540
<font color="#CCCCCC">what attributes you are checking</font><font color="#E5E5E5"> so for</font>

372
00:16:17,590 --> 00:16:22,390
<font color="#E5E5E5">example here</font><font color="#CCCCCC"> we have this function</font>

373
00:16:19,540 --> 00:16:24,640
called<font color="#CCCCCC"> copy file</font><font color="#E5E5E5"> sometimes the arguments</font>

374
00:16:22,390 --> 00:16:26,949
are mandatory<font color="#E5E5E5"> sometimes they can be</font>

375
00:16:24,640 --> 00:16:28,860
<font color="#E5E5E5">deferred default so for a</font><font color="#CCCCCC"> copy the copy</font>

376
00:16:26,950 --> 00:16:31,480
file function<font color="#CCCCCC"> you need at least two</font>

377
00:16:28,860 --> 00:16:33,460
<font color="#CCCCCC">arguments in order to define what file</font>

378
00:16:31,480 --> 00:16:36,670
is the source<font color="#E5E5E5"> and what file this is the</font>

379
00:16:33,460 --> 00:16:39,520
<font color="#E5E5E5">destination</font><font color="#CCCCCC"> to create a file for this</font>

380
00:16:36,670 --> 00:16:41,829
function<font color="#E5E5E5"> the sum</font><font color="#CCCCCC"> of the arguments</font><font color="#E5E5E5"> are</font>

381
00:16:39,520 --> 00:16:44,230
optional<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> need to define what file</font>

382
00:16:41,830 --> 00:16:46,270
is<font color="#CCCCCC"> being created but the content and the</font>

383
00:16:44,230 --> 00:16:48,100
type<font color="#CCCCCC"> of encoding</font><font color="#E5E5E5"> for the file either it</font>

384
00:16:46,270 --> 00:16:54,339
can take the default value or you can

385
00:16:48,100 --> 00:16:58,600
supply<font color="#CCCCCC"> to it this</font><font color="#E5E5E5"> is the first example</font>

386
00:16:54,339 --> 00:17:01,330
<font color="#E5E5E5">of a simple framework using the robot</font>

387
00:16:58,600 --> 00:17:03,630
framework<font color="#E5E5E5"> so here we are</font><font color="#CCCCCC"> just verifying</font>

388
00:17:01,330 --> 00:17:06,310
the version info of a particular

389
00:17:03,630 --> 00:17:08,619
networking device which is juniper MX

390
00:17:06,310 --> 00:17:11,290
<font color="#E5E5E5">box in this</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> so here we have defined</font>

391
00:17:08,619 --> 00:17:14,349
<font color="#E5E5E5">the variables we are</font><font color="#CCCCCC"> using the operating</font>

392
00:17:11,290 --> 00:17:16,389
<font color="#E5E5E5">system which</font><font color="#CCCCCC"> is the default default</font>

393
00:17:14,349 --> 00:17:18,219
<font color="#E5E5E5">library</font><font color="#CCCCCC"> inbuilt library available in</font>

394
00:17:16,390 --> 00:17:20,560
that we<font color="#E5E5E5"> are using the Python code</font>

395
00:17:18,220 --> 00:17:23,410
<font color="#E5E5E5">developed for</font><font color="#CCCCCC"> that and then we are</font>

396
00:17:20,560 --> 00:17:25,448
<font color="#CCCCCC">adding the test case the test case</font><font color="#E5E5E5"> the</font>

397
00:17:23,410 --> 00:17:27,459
first line mentions the variable

398
00:17:25,449 --> 00:17:29,950
<font color="#E5E5E5">connection n which is connection enable</font>

399
00:17:27,459 --> 00:17:33,520
so first we<font color="#CCCCCC"> are using the function MX</font>

400
00:17:29,950 --> 00:17:36,490
connect<font color="#E5E5E5"> adding the</font><font color="#CCCCCC"> attributes like IP</font>

401
00:17:33,520 --> 00:17:38,500
address credentials<font color="#E5E5E5"> and the session</font>

402
00:17:36,490 --> 00:17:41,650
<font color="#E5E5E5">object is being stored in the variable</font>

403
00:17:38,500 --> 00:17:43,810
<font color="#E5E5E5">called connection enable on the next</font>

404
00:17:41,650 --> 00:17:46,570
line<font color="#CCCCCC"> v you want to use this session</font>

405
00:17:43,810 --> 00:17:48,850
object<font color="#E5E5E5"> and just</font><font color="#CCCCCC"> get the</font><font color="#E5E5E5"> version info of</font>

406
00:17:46,570 --> 00:17:51,850
<font color="#E5E5E5">the device so we use the function MX</font>

407
00:17:48,850 --> 00:17:54,669
verify facts<font color="#E5E5E5"> use this connection enable</font>

408
00:17:51,850 --> 00:17:55,990
variable<font color="#E5E5E5"> and get the output on the</font><font color="#CCCCCC"> third</font>

409
00:17:54,670 --> 00:17:58,030
line<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have the</font>

410
00:17:55,990 --> 00:18:00,370
good<font color="#E5E5E5"> lord to console so when you will</font>

411
00:17:58,030 --> 00:18:03,309
run the framework finally you will get

412
00:18:00,370 --> 00:18:06,399
<font color="#E5E5E5">the output on on your console now the</font>

413
00:18:03,309 --> 00:18:09,639
functions you use your MX<font color="#E5E5E5"> connect and</font>

414
00:18:06,400 --> 00:18:12,400
<font color="#CCCCCC">mix verify</font><font color="#E5E5E5"> facts and log to console log</font>

415
00:18:09,640 --> 00:18:14,110
to console is an<font color="#E5E5E5"> built-in function</font>

416
00:18:12,400 --> 00:18:15,940
available<font color="#E5E5E5"> from the operating</font><font color="#CCCCCC"> system</font>

417
00:18:14,110 --> 00:18:18,340
library<font color="#E5E5E5"> so you don't need to define that</font>

418
00:18:15,940 --> 00:18:20,440
<font color="#CCCCCC">it will know how to do</font><font color="#E5E5E5"> that for MX</font>

419
00:18:18,340 --> 00:18:22,120
connect and MX verify facts you need to

420
00:18:20,440 --> 00:18:24,280
<font color="#CCCCCC">define what exactly that function will</font>

421
00:18:22,120 --> 00:18:28,840
do so the hair has to<font color="#CCCCCC"> be defined</font><font color="#E5E5E5"> in the</font>

422
00:18:24,280 --> 00:18:30,820
underlying Python code the variables

423
00:18:28,840 --> 00:18:33,520
used for this<font color="#E5E5E5"> which we you know added in</font>

424
00:18:30,820 --> 00:18:36,428
the test cases over like the IP address

425
00:18:33,520 --> 00:18:38,110
<font color="#E5E5E5">the username the</font><font color="#CCCCCC"> password</font><font color="#E5E5E5"> so that is as</font>

426
00:18:36,429 --> 00:18:40,990
you see it's this defined separately in

427
00:18:38,110 --> 00:18:42,070
<font color="#CCCCCC">our ml file and if you are using a if</font>

428
00:18:40,990 --> 00:18:44,050
you're running<font color="#E5E5E5"> the framework for a</font>

429
00:18:42,070 --> 00:18:49,000
different<font color="#E5E5E5"> networking device</font><font color="#CCCCCC"> we just need</font>

430
00:18:44,050 --> 00:18:52,300
to change these key<font color="#CCCCCC"> values coming</font><font color="#E5E5E5"> to the</font>

431
00:18:49,000 --> 00:18:55,090
functions used in<font color="#E5E5E5"> that test case one is</font>

432
00:18:52,300 --> 00:18:58,510
the MX verify facts and ii was<font color="#E5E5E5"> dmx</font>

433
00:18:55,090 --> 00:19:00,520
connect<font color="#E5E5E5"> as you see</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> I've used the</font>

434
00:18:58,510 --> 00:19:03,879
junipers<font color="#E5E5E5"> built-in library which is the</font>

435
00:19:00,520 --> 00:19:05,980
<font color="#CCCCCC">PI easy for you know easy connection to</font>

436
00:19:03,880 --> 00:19:09,070
the networking device and loading some

437
00:19:05,980 --> 00:19:11,800
functions so the verify the MX verify

438
00:19:09,070 --> 00:19:13,990
facts<font color="#E5E5E5"> just uses the</font><font color="#CCCCCC"> PI</font><font color="#E5E5E5"> Z library called</font>

439
00:19:11,800 --> 00:19:17,139
connect<font color="#E5E5E5"> dot facts to get the</font><font color="#CCCCCC"> version</font>

440
00:19:13,990 --> 00:19:19,720
info and the MX connect is just the

441
00:19:17,140 --> 00:19:21,820
simple function which is the device

442
00:19:19,720 --> 00:19:23,800
function<font color="#E5E5E5"> you add the attributes to it</font>

443
00:19:21,820 --> 00:19:26,320
and then you get the<font color="#E5E5E5"> session object as</font>

444
00:19:23,800 --> 00:19:28,840
<font color="#E5E5E5">you see</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is also return values in</font>

445
00:19:26,320 --> 00:19:32,370
the<font color="#CCCCCC"> in this functions so this return</font>

446
00:19:28,840 --> 00:19:32,370
values are sent back to<font color="#E5E5E5"> the framework</font>

447
00:19:32,730 --> 00:19:38,110
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know running this file this is how</font>

448
00:19:35,500 --> 00:19:40,870
the output<font color="#CCCCCC"> would look</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is just</font>

449
00:19:38,110 --> 00:19:43,270
a single<font color="#E5E5E5"> test</font><font color="#CCCCCC"> case so there we had the</font>

450
00:19:40,870 --> 00:19:45,939
version info log to the console<font color="#CCCCCC"> it logs</font>

451
00:19:43,270 --> 00:19:49,389
all the information<font color="#E5E5E5"> since it completed</font>

452
00:19:45,940 --> 00:19:52,330
this test<font color="#CCCCCC"> it gives the output saying</font>

453
00:19:49,390 --> 00:19:54,429
this test passed all the tests<font color="#E5E5E5"> kaor the</font>

454
00:19:52,330 --> 00:19:57,669
test<font color="#CCCCCC"> criteria mentioned and finally it</font>

455
00:19:54,429 --> 00:20:00,160
provides<font color="#E5E5E5"> the output files as you</font><font color="#CCCCCC"> see</font>

456
00:19:57,670 --> 00:20:02,590
there<font color="#E5E5E5"> are three type of</font><font color="#CCCCCC"> output files</font><font color="#E5E5E5"> one</font>

457
00:20:00,160 --> 00:20:05,140
is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> output file which is in an XML</font>

458
00:20:02,590 --> 00:20:07,720
format<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that other two are HTML based</font>

459
00:20:05,140 --> 00:20:09,010
reports<font color="#E5E5E5"> one is just a simple report of</font>

460
00:20:07,720 --> 00:20:11,290
the test cases

461
00:20:09,010 --> 00:20:16,330
and the second one is a detailed log

462
00:20:11,290 --> 00:20:19,659
report this<font color="#E5E5E5"> is how the log report in</font>

463
00:20:16,330 --> 00:20:21,010
HTML looks like<font color="#E5E5E5"> the best part is you</font>

464
00:20:19,660 --> 00:20:23,320
know it gives<font color="#E5E5E5"> you a clear indication</font>

465
00:20:21,010 --> 00:20:25,450
<font color="#E5E5E5">whether all the test cases passed or any</font>

466
00:20:23,320 --> 00:20:28,360
of them failed<font color="#E5E5E5"> so on your left</font><font color="#CCCCCC"> side you</font>

467
00:20:25,450 --> 00:20:30,520
<font color="#CCCCCC">see</font><font color="#E5E5E5"> it's a green colored report which</font>

468
00:20:28,360 --> 00:20:32,620
mentions all the test<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> past it</font>

469
00:20:30,520 --> 00:20:34,780
gives you statistics about you know how

470
00:20:32,620 --> 00:20:37,330
much<font color="#E5E5E5"> time it took where is the log file</font>

471
00:20:34,780 --> 00:20:40,389
<font color="#E5E5E5">located what test condition was being</font>

472
00:20:37,330 --> 00:20:42,129
<font color="#E5E5E5">tested on your right you see a</font><font color="#CCCCCC"> failed</font>

473
00:20:40,390 --> 00:20:44,260
report saying<font color="#E5E5E5"> you know hey a particular</font>

474
00:20:42,130 --> 00:20:46,000
test<font color="#E5E5E5"> case failed and that's why the</font>

475
00:20:44,260 --> 00:20:50,190
<font color="#E5E5E5">whole test report is considered as</font>

476
00:20:46,000 --> 00:20:52,780
failed<font color="#E5E5E5"> when you click</font><font color="#CCCCCC"> on the log</font><font color="#E5E5E5"> HTML</font>

477
00:20:50,190 --> 00:20:56,200
pointer which is around the center<font color="#E5E5E5"> of</font>

478
00:20:52,780 --> 00:20:58,149
<font color="#E5E5E5">the file you get a detailed report</font><font color="#CCCCCC"> so on</font>

479
00:20:56,200 --> 00:21:00,610
<font color="#E5E5E5">your left you see it gives details about</font>

480
00:20:58,150 --> 00:21:03,940
what<font color="#E5E5E5"> was the test case what different</font>

481
00:21:00,610 --> 00:21:05,770
functions were used what function did

482
00:21:03,940 --> 00:21:07,930
specifically you know whether it was

483
00:21:05,770 --> 00:21:09,610
requesting some value from the

484
00:21:07,930 --> 00:21:12,940
<font color="#E5E5E5">networking device performing some</font>

485
00:21:09,610 --> 00:21:14,409
operation<font color="#CCCCCC"> on the right side it again</font>

486
00:21:12,940 --> 00:21:16,750
gives you the same details mentioning

487
00:21:14,410 --> 00:21:19,510
what exactly failed<font color="#E5E5E5"> so as you see below</font>

488
00:21:16,750 --> 00:21:22,000
<font color="#CCCCCC">it gives the status saying it failed</font>

489
00:21:19,510 --> 00:21:23,110
the reason<font color="#E5E5E5"> was mentioned on the</font><font color="#CCCCCC"> last</font>

490
00:21:22,000 --> 00:21:24,970
line which was a connection

491
00:21:23,110 --> 00:21:26,679
authentication error<font color="#CCCCCC"> so that was not a</font>

492
00:21:24,970 --> 00:21:28,000
<font color="#E5E5E5">problem with the networking device but</font>

493
00:21:26,680 --> 00:21:33,130
there was a<font color="#E5E5E5"> problem with the</font><font color="#CCCCCC"> network</font>

494
00:21:28,000 --> 00:21:34,960
<font color="#E5E5E5">connectivity we mentioned about</font><font color="#CCCCCC"> suite</font>

495
00:21:33,130 --> 00:21:37,750
setup and<font color="#E5E5E5"> suite teardown</font><font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to</font>

496
00:21:34,960 --> 00:21:40,780
have an<font color="#CCCCCC"> ssh</font><font color="#E5E5E5"> object defined to</font><font color="#CCCCCC"> be used in</font>

497
00:21:37,750 --> 00:21:42,610
all the test<font color="#E5E5E5"> cases</font><font color="#CCCCCC"> so here we have we</font>

498
00:21:40,780 --> 00:21:45,070
are<font color="#CCCCCC"> using this suite setup and teardown</font>

499
00:21:42,610 --> 00:21:47,709
which is the first is<font color="#E5E5E5"> open connection to</font>

500
00:21:45,070 --> 00:21:50,379
the<font color="#E5E5E5"> Junos box it's defined below</font><font color="#CCCCCC"> and</font>

501
00:21:47,710 --> 00:21:52,720
under the keyword section<font color="#CCCCCC"> so what we did</font>

502
00:21:50,380 --> 00:21:54,970
previously in the first example<font color="#E5E5E5"> now just</font>

503
00:21:52,720 --> 00:21:57,250
connect using<font color="#E5E5E5"> the session object</font><font color="#CCCCCC"> to</font>

504
00:21:54,970 --> 00:21:59,230
connect it to<font color="#CCCCCC"> the box</font><font color="#E5E5E5"> and use</font><font color="#CCCCCC"> that</font>

505
00:21:57,250 --> 00:22:01,330
session<font color="#E5E5E5"> object</font><font color="#CCCCCC"> for all the test</font><font color="#E5E5E5"> cases</font>

506
00:21:59,230 --> 00:22:03,550
<font color="#E5E5E5">which is defining it we are just</font>

507
00:22:01,330 --> 00:22:06,639
<font color="#CCCCCC">defining it here so that it</font><font color="#E5E5E5"> can be used</font>

508
00:22:03,550 --> 00:22:08,230
<font color="#E5E5E5">for all</font><font color="#CCCCCC"> the test</font><font color="#E5E5E5"> cases towards the end</font>

509
00:22:06,640 --> 00:22:10,210
<font color="#E5E5E5">of the test you</font><font color="#CCCCCC"> want to gracefully</font><font color="#E5E5E5"> shut</font>

510
00:22:08,230 --> 00:22:13,360
<font color="#E5E5E5">down the connection so you use the</font>

511
00:22:10,210 --> 00:22:15,960
disconnect<font color="#E5E5E5"> function to close the session</font>

512
00:22:13,360 --> 00:22:15,959
gracefully

513
00:22:19,320 --> 00:22:24,490
also<font color="#E5E5E5"> initially while developing the</font>

514
00:22:21,940 --> 00:22:27,070
<font color="#CCCCCC">framework you encounter a lot of</font>

515
00:22:24,490 --> 00:22:29,590
<font color="#CCCCCC">troubleshooting errors</font><font color="#E5E5E5"> it does not mean</font>

516
00:22:27,070 --> 00:22:32,110
the networking<font color="#E5E5E5"> device has failed it just</font>

517
00:22:29,590 --> 00:22:32,679
means<font color="#E5E5E5"> that something was not configured</font>

518
00:22:32,110 --> 00:22:34,840
properly

519
00:22:32,680 --> 00:22:36,760
perhaps the configuration<font color="#E5E5E5"> was incorrect</font>

520
00:22:34,840 --> 00:22:40,090
<font color="#E5E5E5">perhaps the way of verification was</font>

521
00:22:36,760 --> 00:22:42,640
incorrect<font color="#E5E5E5"> the troubleshooting with robot</font>

522
00:22:40,090 --> 00:22:44,949
framework<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not very efficient so when</font>

523
00:22:42,640 --> 00:22:46,630
a<font color="#E5E5E5"> particular test case fails you</font>

524
00:22:44,950 --> 00:22:49,210
definitely<font color="#E5E5E5"> get the detailed report and</font>

525
00:22:46,630 --> 00:22:50,650
<font color="#CCCCCC">you can look into what</font><font color="#E5E5E5"> feel exactly but</font>

526
00:22:49,210 --> 00:22:52,600
most<font color="#E5E5E5"> of the times you are working in a</font>

527
00:22:50,650 --> 00:22:54,700
<font color="#E5E5E5">CA</font><font color="#CCCCCC"> light-up</font><font color="#E5E5E5"> environment and you don't</font>

528
00:22:52,600 --> 00:22:56,800
want to<font color="#E5E5E5"> just switch to a GUI based to</font>

529
00:22:54,700 --> 00:23:00,550
see what<font color="#E5E5E5"> exactly failed so what I do</font>

530
00:22:56,800 --> 00:23:03,250
generally for this is add the is used

531
00:23:00,550 --> 00:23:05,740
the<font color="#E5E5E5"> logging module in Python this allows</font>

532
00:23:03,250 --> 00:23:07,330
you<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have all the errors or anything</font>

533
00:23:05,740 --> 00:23:09,270
like that directly<font color="#CCCCCC"> outputted to the</font>

534
00:23:07,330 --> 00:23:13,060
console<font color="#CCCCCC"> so when you're running</font><font color="#E5E5E5"> the</font>

535
00:23:09,270 --> 00:23:15,129
framework it will directly give you what

536
00:23:13,060 --> 00:23:20,560
failed or what<font color="#E5E5E5"> what is exactly happening</font>

537
00:23:15,130 --> 00:23:22,480
in that<font color="#E5E5E5"> function so there are standard</font>

538
00:23:20,560 --> 00:23:25,120
<font color="#CCCCCC">libraries and then there</font><font color="#E5E5E5"> are extended</font>

539
00:23:22,480 --> 00:23:27,190
libraries in the<font color="#E5E5E5"> robot framework these</font>

540
00:23:25,120 --> 00:23:29,469
<font color="#E5E5E5">are the set of standard libraries the</font>

541
00:23:27,190 --> 00:23:32,110
first one is the built-in library<font color="#CCCCCC"> this</font>

542
00:23:29,470 --> 00:23:35,020
allows you to you know<font color="#CCCCCC"> evaluate certain</font>

543
00:23:32,110 --> 00:23:36,969
<font color="#E5E5E5">things run with certain conditions so</font>

544
00:23:35,020 --> 00:23:40,150
for example you want<font color="#E5E5E5"> to run a test case</font>

545
00:23:36,970 --> 00:23:42,280
<font color="#CCCCCC">only if a</font><font color="#E5E5E5"> particular test different test</font>

546
00:23:40,150 --> 00:23:44,140
criteria<font color="#CCCCCC"> is matching a naught you want</font>

547
00:23:42,280 --> 00:23:46,360
to just match the output saying hey this

548
00:23:44,140 --> 00:23:47,950
<font color="#CCCCCC">should be true or this</font><font color="#E5E5E5"> should be equal</font>

549
00:23:46,360 --> 00:23:49,719
<font color="#E5E5E5">to</font><font color="#CCCCCC"> ten</font><font color="#E5E5E5"> you can use the</font><font color="#CCCCCC"> built-in</font>

550
00:23:47,950 --> 00:23:52,050
functions for that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> don't need to</font>

551
00:23:49,720 --> 00:23:54,790
develop<font color="#E5E5E5"> a separate Python code for that</font>

552
00:23:52,050 --> 00:23:57,280
the<font color="#E5E5E5"> other is a</font><font color="#CCCCCC"> process-oriented</font><font color="#E5E5E5"> library</font>

553
00:23:54,790 --> 00:23:59,590
<font color="#E5E5E5">so this allows you to you know run</font>

554
00:23:57,280 --> 00:24:02,680
different process get process attribute

555
00:23:59,590 --> 00:24:07,840
values like the PID switch processes if

556
00:24:02,680 --> 00:24:10,570
required there's also a date/time

557
00:24:07,840 --> 00:24:12,429
library so if you are playing with<font color="#E5E5E5"> time</font>

558
00:24:10,570 --> 00:24:15,370
values or something like<font color="#E5E5E5"> that you just</font>

559
00:24:12,430 --> 00:24:17,710
<font color="#E5E5E5">want</font><font color="#CCCCCC"> to it's difficult to you directly</font>

560
00:24:15,370 --> 00:24:19,719
<font color="#E5E5E5">you know extract the time convert it</font>

561
00:24:17,710 --> 00:24:21,520
into the time version<font color="#CCCCCC"> so here you</font><font color="#E5E5E5"> can</font>

562
00:24:19,720 --> 00:24:23,740
use the date/time library to convert it

563
00:24:21,520 --> 00:24:25,110
or to whatever you<font color="#E5E5E5"> want to add times to</font>

564
00:24:23,740 --> 00:24:27,910
subtract time or<font color="#E5E5E5"> something</font><font color="#CCCCCC"> like that</font>

565
00:24:25,110 --> 00:24:30,219
there<font color="#E5E5E5"> is</font><font color="#CCCCCC"> os-level functions</font><font color="#E5E5E5"> so this</font>

566
00:24:27,910 --> 00:24:31,200
allows you<font color="#CCCCCC"> to do something</font><font color="#E5E5E5"> with file</font>

567
00:24:30,220 --> 00:24:33,510
level<font color="#E5E5E5"> or</font>

568
00:24:31,200 --> 00:24:36,690
level stuff<font color="#E5E5E5"> so if you want to check the</font>

569
00:24:33,510 --> 00:24:39,059
file size<font color="#CCCCCC"> whether the file exists or not</font>

570
00:24:36,690 --> 00:24:40,860
<font color="#E5E5E5">what are the number</font><font color="#CCCCCC"> of files in a</font>

571
00:24:39,059 --> 00:24:44,100
particular<font color="#E5E5E5"> directory</font><font color="#CCCCCC"> then you can do</font>

572
00:24:40,860 --> 00:24:46,049
this<font color="#E5E5E5"> so for example if you're loading</font><font color="#CCCCCC"> a</font>

573
00:24:44,100 --> 00:24:47,549
particular configuration<font color="#CCCCCC"> from a file you</font>

574
00:24:46,049 --> 00:24:49,529
<font color="#E5E5E5">first want to</font><font color="#CCCCCC"> verify that the file is</font>

575
00:24:47,549 --> 00:24:54,929
actually<font color="#E5E5E5"> present</font><font color="#CCCCCC"> and then take</font><font color="#E5E5E5"> that file</font>

576
00:24:49,529 --> 00:24:57,240
<font color="#E5E5E5">and load it into the</font><font color="#CCCCCC"> configuration there</font>

577
00:24:54,929 --> 00:25:00,330
is string functions<font color="#E5E5E5"> so this allows you</font>

578
00:24:57,240 --> 00:25:02,580
<font color="#CCCCCC">to do any changes to a particular</font><font color="#E5E5E5"> string</font>

579
00:25:00,330 --> 00:25:04,830
output so if you get a<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> value</font>

580
00:25:02,580 --> 00:25:06,449
<font color="#E5E5E5">output</font><font color="#CCCCCC"> from a particular function</font><font color="#E5E5E5"> you</font>

581
00:25:04,830 --> 00:25:08,699
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> just measure the size</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> it</font>

582
00:25:06,450 --> 00:25:11,940
<font color="#CCCCCC">converted into like lowercase or</font>

583
00:25:08,700 --> 00:25:14,070
uppercase<font color="#E5E5E5"> get the number of lines</font><font color="#CCCCCC"> so</font>

584
00:25:11,940 --> 00:25:16,380
this is useful<font color="#E5E5E5"> when you you know suppose</font>

585
00:25:14,070 --> 00:25:18,210
you're testing the BGP status or whether

586
00:25:16,380 --> 00:25:20,610
the BGP neighbors are up you know for

587
00:25:18,210 --> 00:25:23,279
example<font color="#E5E5E5"> that you have 50 neighbors in</font>

588
00:25:20,610 --> 00:25:25,229
<font color="#E5E5E5">your show BGP statistics output on the</font>

589
00:25:23,279 --> 00:25:27,179
networking<font color="#E5E5E5"> device</font><font color="#CCCCCC"> so you</font><font color="#E5E5E5"> know you just</font>

590
00:25:25,230 --> 00:25:29,429
get the output and verify whether the

591
00:25:27,179 --> 00:25:33,029
line count is as expected whether it's

592
00:25:29,429 --> 00:25:34,950
60 or<font color="#E5E5E5"> 50</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> whatever it</font><font color="#CCCCCC"> is there</font><font color="#E5E5E5"> is a</font>

593
00:25:33,029 --> 00:25:37,830
connect<font color="#E5E5E5"> collection standard library</font>

594
00:25:34,950 --> 00:25:39,870
which allows you to<font color="#CCCCCC"> you know use any</font>

595
00:25:37,830 --> 00:25:42,059
type of<font color="#E5E5E5"> lists or dictionaries just like</font>

596
00:25:39,870 --> 00:25:44,539
how you use in<font color="#E5E5E5"> Python so it allows you</font>

597
00:25:42,059 --> 00:25:46,399
<font color="#E5E5E5">to</font><font color="#CCCCCC"> combine various</font><font color="#E5E5E5"> variables or</font>

598
00:25:44,539 --> 00:25:49,500
something like<font color="#E5E5E5"> that</font>

599
00:25:46,399 --> 00:25:51,209
<font color="#E5E5E5">there's dynamic input option so when you</font>

600
00:25:49,500 --> 00:25:53,190
are running<font color="#E5E5E5"> the robot framework if you</font>

601
00:25:51,210 --> 00:25:55,320
want to have a prompt<font color="#E5E5E5"> and all like a</font>

602
00:25:53,190 --> 00:25:57,059
prompt<font color="#CCCCCC"> to just give the value</font>

603
00:25:55,320 --> 00:25:59,939
dynamically you can also do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> and</font>

604
00:25:57,059 --> 00:26:02,100
finally<font color="#CCCCCC"> you can also take screenshots so</font>

605
00:25:59,940 --> 00:26:05,549
if you are into GUI<font color="#E5E5E5"> based testing</font><font color="#CCCCCC"> now</font>

606
00:26:02,100 --> 00:26:07,590
just testing whether<font color="#E5E5E5"> the web UI of a</font>

607
00:26:05,549 --> 00:26:09,840
particular networking device works or

608
00:26:07,590 --> 00:26:11,908
not<font color="#CCCCCC"> you can just</font><font color="#E5E5E5"> grab the screenshots</font>

609
00:26:09,840 --> 00:26:13,620
while running the<font color="#E5E5E5"> test case and</font><font color="#CCCCCC"> later</font>

610
00:26:11,909 --> 00:26:18,870
<font color="#CCCCCC">this</font><font color="#E5E5E5"> verify the screenshots are as</font>

611
00:26:13,620 --> 00:26:21,510
expected<font color="#E5E5E5"> or not then there are external</font>

612
00:26:18,870 --> 00:26:23,039
libraries because the<font color="#CCCCCC"> built-in</font><font color="#E5E5E5"> libraries</font>

613
00:26:21,510 --> 00:26:26,220
don't<font color="#E5E5E5"> do all the functions</font><font color="#CCCCCC"> which are</font>

614
00:26:23,039 --> 00:26:28,139
<font color="#E5E5E5">required one is the selenium one which</font>

615
00:26:26,220 --> 00:26:31,440
is definitely<font color="#E5E5E5"> obviously based on Python</font>

616
00:26:28,139 --> 00:26:33,990
this<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to automate with web UI</font>

617
00:26:31,440 --> 00:26:36,779
options<font color="#E5E5E5"> so if you're doing anything with</font>

618
00:26:33,990 --> 00:26:39,720
web UI<font color="#E5E5E5"> it's easier to use the selenium</font>

619
00:26:36,779 --> 00:26:42,149
library to identify what tab you are

620
00:26:39,720 --> 00:26:43,489
<font color="#E5E5E5">clicking</font><font color="#CCCCCC"> whether you are filling a</font>

621
00:26:42,149 --> 00:26:45,768
particular

622
00:26:43,489 --> 00:26:48,889
inputbox with some values or something

623
00:26:45,769 --> 00:26:51,320
like<font color="#E5E5E5"> that there is also library for a no</font>

624
00:26:48,889 --> 00:26:53,209
pubsub types of systems<font color="#CCCCCC"> yeah it's the</font>

625
00:26:51,320 --> 00:26:55,129
<font color="#CCCCCC">MQTT library you</font><font color="#E5E5E5"> know if there is</font><font color="#CCCCCC"> a</font>

626
00:26:53,210 --> 00:26:56,989
particular<font color="#CCCCCC"> polling or something which</font>

627
00:26:55,129 --> 00:27:00,859
needs<font color="#CCCCCC"> to be done you</font><font color="#E5E5E5"> can use this</font>

628
00:26:56,989 --> 00:27:03,979
library there is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> faker library this</font>

629
00:27:00,859 --> 00:27:05,928
you know generates random fake words or

630
00:27:03,979 --> 00:27:08,269
<font color="#E5E5E5">documentation or something like that</font><font color="#CCCCCC"> so</font>

631
00:27:05,929 --> 00:27:12,019
<font color="#CCCCCC">just like in a documentation sometimes</font>

632
00:27:08,269 --> 00:27:13,879
we<font color="#E5E5E5"> just want to in documentation we</font>

633
00:27:12,019 --> 00:27:15,979
would<font color="#E5E5E5"> just want to highlight how the</font>

634
00:27:13,879 --> 00:27:17,718
documentation<font color="#E5E5E5"> would look like and we use</font>

635
00:27:15,979 --> 00:27:19,909
those if some lorem or something like

636
00:27:17,719 --> 00:27:22,940
<font color="#E5E5E5">that to fake those words similarly you</font>

637
00:27:19,909 --> 00:27:25,399
<font color="#E5E5E5">can use the fake library here there is</font>

638
00:27:22,940 --> 00:27:28,389
the<font color="#CCCCCC"> SSH library so if a particular</font>

639
00:27:25,399 --> 00:27:31,820
<font color="#E5E5E5">networking device does</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> have its own</font>

640
00:27:28,389 --> 00:27:35,089
library<font color="#E5E5E5"> for SSH</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> most</font>

641
00:27:31,820 --> 00:27:36,678
commonly views<font color="#E5E5E5"> net</font><font color="#CCCCCC"> miko pi easy</font><font color="#E5E5E5"> or</font>

642
00:27:35,089 --> 00:27:39,139
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but if a networking</font>

643
00:27:36,679 --> 00:27:42,710
<font color="#CCCCCC">device does not have that</font><font color="#E5E5E5"> library you</font>

644
00:27:39,139 --> 00:27:45,769
can use<font color="#CCCCCC"> the SSH library and still run</font>

645
00:27:42,710 --> 00:27:47,539
all your commands using<font color="#E5E5E5"> that there is a</font>

646
00:27:45,769 --> 00:27:49,969
library<font color="#E5E5E5"> for database so if you're paying</font>

647
00:27:47,539 --> 00:27:52,849
if<font color="#E5E5E5"> you're playing with my sequel and now</font>

648
00:27:49,969 --> 00:27:54,229
creating databases<font color="#CCCCCC"> merging something you</font>

649
00:27:52,849 --> 00:27:57,139
can use the<font color="#CCCCCC"> database library</font><font color="#E5E5E5"> for that</font>

650
00:27:54,229 --> 00:28:03,409
<font color="#E5E5E5">you can also archive with certain files</font>

651
00:27:57,139 --> 00:28:05,359
using the archive library<font color="#CCCCCC"> I mentioned</font>

652
00:28:03,409 --> 00:28:09,259
about tagging previously that<font color="#CCCCCC"> you can</font>

653
00:28:05,359 --> 00:28:10,908
set tags<font color="#E5E5E5"> using the options if you don't</font>

654
00:28:09,259 --> 00:28:12,769
want to set tags<font color="#E5E5E5"> using options you can</font>

655
00:28:10,909 --> 00:28:15,589
<font color="#E5E5E5">also</font><font color="#CCCCCC"> define tagging in the</font><font color="#E5E5E5"> framework</font>

656
00:28:12,769 --> 00:28:16,489
itself<font color="#E5E5E5"> so for example there are three</font>

657
00:28:15,589 --> 00:28:19,279
types<font color="#E5E5E5"> of tags</font>

658
00:28:16,489 --> 00:28:21,409
one is the force tags<font color="#E5E5E5"> so for example</font>

659
00:28:19,279 --> 00:28:24,649
here<font color="#CCCCCC"> we have</font><font color="#E5E5E5"> to find</font><font color="#CCCCCC"> Nanak 74 as the</font>

660
00:28:21,409 --> 00:28:27,529
force tags this means that this tag<font color="#CCCCCC"> gets</font>

661
00:28:24,649 --> 00:28:28,998
<font color="#E5E5E5">applied</font><font color="#CCCCCC"> to all the test cases</font><font color="#E5E5E5"> no matter</font>

662
00:28:27,529 --> 00:28:31,419
whether<font color="#E5E5E5"> you like it or not</font>

663
00:28:28,999 --> 00:28:34,129
so that's forced<font color="#CCCCCC"> onto all the test cases</font>

664
00:28:31,419 --> 00:28:36,589
<font color="#E5E5E5">then there are default tags so here</font>

665
00:28:34,129 --> 00:28:39,019
<font color="#E5E5E5">we've defined user</font><font color="#CCCCCC"> one and security as</font>

666
00:28:36,589 --> 00:28:41,450
the default tags so for a<font color="#E5E5E5"> particular</font>

667
00:28:39,019 --> 00:28:43,700
test case<font color="#CCCCCC"> if you have not defined</font><font color="#E5E5E5"> the</font>

668
00:28:41,450 --> 00:28:45,109
tags<font color="#E5E5E5"> explicitly</font><font color="#CCCCCC"> into that test case it</font>

669
00:28:43,700 --> 00:28:49,339
will use those default

670
00:28:45,109 --> 00:28:51,829
tags so in the test<font color="#E5E5E5"> case we see for the</font>

671
00:28:49,339 --> 00:28:54,889
<font color="#CCCCCC">first test case</font><font color="#E5E5E5"> just a sample test case</font>

672
00:28:51,829 --> 00:28:57,070
<font color="#E5E5E5">we have not mentioned any tags so it</font>

673
00:28:54,889 --> 00:28:59,350
will have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> force</font><font color="#E5E5E5"> tag</font>

674
00:28:57,070 --> 00:29:00,879
which is<font color="#E5E5E5"> nano 74 and it will also have</font>

675
00:28:59,350 --> 00:29:03,669
<font color="#E5E5E5">the default tags</font><font color="#CCCCCC"> because you did not</font>

676
00:29:00,880 --> 00:29:05,860
mention<font color="#E5E5E5"> any tags for the second test</font>

677
00:29:03,670 --> 00:29:08,560
case<font color="#E5E5E5"> you're mentioning their tags like</font>

678
00:29:05,860 --> 00:29:10,810
Canada<font color="#E5E5E5"> and</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> so it will use the</font>

679
00:29:08,560 --> 00:29:13,060
force tags<font color="#E5E5E5"> because it gets forced onto</font>

680
00:29:10,810 --> 00:29:15,310
all test<font color="#E5E5E5"> cases and then it will use</font><font color="#CCCCCC"> the</font>

681
00:29:13,060 --> 00:29:19,060
tags mentioned here<font color="#E5E5E5"> it will not use the</font>

682
00:29:15,310 --> 00:29:21,639
default tags here so this you know helps

683
00:29:19,060 --> 00:29:23,830
to separate different<font color="#E5E5E5"> type of test cases</font>

684
00:29:21,640 --> 00:29:26,410
<font color="#E5E5E5">if you want to have certain</font><font color="#CCCCCC"> test</font><font color="#E5E5E5"> cases</font>

685
00:29:23,830 --> 00:29:28,389
<font color="#E5E5E5">no critical certain test cases specific</font>

686
00:29:26,410 --> 00:29:31,030
to<font color="#E5E5E5"> switching certain test cases specific</font>

687
00:29:28,390 --> 00:29:33,070
<font color="#E5E5E5">to routing or peering or something like</font>

688
00:29:31,030 --> 00:29:35,560
<font color="#E5E5E5">that so you</font><font color="#CCCCCC"> can set those</font><font color="#E5E5E5"> tags and when</font>

689
00:29:33,070 --> 00:29:37,360
you run the<font color="#E5E5E5"> whole test case when it</font>

690
00:29:35,560 --> 00:29:44,139
fails<font color="#E5E5E5"> you identify what feature is not</font>

691
00:29:37,360 --> 00:29:46,780
working using editors I still I

692
00:29:44,140 --> 00:29:50,050
personally prefer using<font color="#E5E5E5"> them</font><font color="#CCCCCC"> it's simple</font>

693
00:29:46,780 --> 00:29:52,120
use enough for editing the<font color="#E5E5E5"> framework</font>

694
00:29:50,050 --> 00:29:54,550
file<font color="#E5E5E5"> but there are all these types of</font>

695
00:29:52,120 --> 00:29:57,639
editors available<font color="#E5E5E5"> I</font><font color="#CCCCCC"> know Eclipse</font><font color="#E5E5E5"> sublime</font>

696
00:29:54,550 --> 00:30:00,460
some people still use Emacs<font color="#E5E5E5"> so you can</font>

697
00:29:57,640 --> 00:30:05,590
still use<font color="#E5E5E5"> them to edit the</font><font color="#CCCCCC"> frame book</font>

698
00:30:00,460 --> 00:30:07,510
file this<font color="#E5E5E5"> is the example</font><font color="#CCCCCC"> - of how the</font>

699
00:30:05,590 --> 00:30:09,520
<font color="#E5E5E5">framework would look like so here we</font>

700
00:30:07,510 --> 00:30:12,160
have taken<font color="#CCCCCC"> the example of SNMP</font><font color="#E5E5E5"> polling</font>

701
00:30:09,520 --> 00:30:14,350
<font color="#E5E5E5">here we are loading a particular</font>

702
00:30:12,160 --> 00:30:16,870
configuration<font color="#E5E5E5"> and verifying whether the</font>

703
00:30:14,350 --> 00:30:19,899
SNMP polling is working or not<font color="#E5E5E5"> so in the</font>

704
00:30:16,870 --> 00:30:23,080
first<font color="#E5E5E5"> test</font><font color="#CCCCCC"> case there are like 8 to 10</font>

705
00:30:19,900 --> 00:30:25,180
different<font color="#CCCCCC"> lines now it first what we are</font>

706
00:30:23,080 --> 00:30:27,100
essentially doing<font color="#E5E5E5"> here is before loading</font>

707
00:30:25,180 --> 00:30:29,920
<font color="#CCCCCC">the configuration we</font><font color="#E5E5E5"> are just verifying</font>

708
00:30:27,100 --> 00:30:31,929
that the snmpwalk feature does not<font color="#E5E5E5"> get</font>

709
00:30:29,920 --> 00:30:34,330
any output<font color="#E5E5E5"> so</font><font color="#CCCCCC"> here we are setting the</font>

710
00:30:31,930 --> 00:30:37,780
variable<font color="#E5E5E5"> to 1 which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the SNMP version</font>

711
00:30:34,330 --> 00:30:39,699
<font color="#E5E5E5">1 you know later in the function we</font><font color="#CCCCCC"> are</font>

712
00:30:37,780 --> 00:30:42,730
also setting it to<font color="#CCCCCC"> 2 C so that's we are</font>

713
00:30:39,700 --> 00:30:45,040
<font color="#E5E5E5">checking the SNMP</font><font color="#CCCCCC"> version to</font><font color="#E5E5E5"> see for</font>

714
00:30:42,730 --> 00:30:47,880
<font color="#E5E5E5">that what we essentially doing is that</font>

715
00:30:45,040 --> 00:30:50,440
be running the snmpwalk function

716
00:30:47,880 --> 00:30:53,020
supplying it attributes like the IP

717
00:30:50,440 --> 00:30:55,330
address a particular<font color="#E5E5E5"> community value and</font>

718
00:30:53,020 --> 00:30:57,970
the version value and then<font color="#E5E5E5"> getting the</font>

719
00:30:55,330 --> 00:30:59,919
<font color="#CCCCCC">output of it on the</font><font color="#E5E5E5"> subsequent lines we</font>

720
00:30:57,970 --> 00:31:02,350
compare the output<font color="#E5E5E5"> to the expected value</font>

721
00:30:59,920 --> 00:31:04,710
so now<font color="#CCCCCC"> before loading</font><font color="#E5E5E5"> the configuration</font>

722
00:31:02,350 --> 00:31:07,540
file<font color="#E5E5E5"> we would expect that the timeout</font>

723
00:31:04,710 --> 00:31:09,310
<font color="#CCCCCC">the output should contain a timeout</font>

724
00:31:07,540 --> 00:31:10,509
response because without the

725
00:31:09,310 --> 00:31:13,208
configuration<font color="#E5E5E5"> you</font>

726
00:31:10,509 --> 00:31:14,679
get any SNMP<font color="#E5E5E5"> Pauline so that's what we</font>

727
00:31:13,209 --> 00:31:17,049
<font color="#CCCCCC">are</font><font color="#E5E5E5"> doing essentially before loading the</font>

728
00:31:14,679 --> 00:31:19,570
configuration in the last two or<font color="#CCCCCC"> three</font>

729
00:31:17,049 --> 00:31:21,489
lines<font color="#E5E5E5"> of the first test case first you</font>

730
00:31:19,570 --> 00:31:22,629
see<font color="#E5E5E5"> the file should exist so behave</font>

731
00:31:21,489 --> 00:31:23,649
<font color="#CCCCCC">anywhere loading the particular</font>

732
00:31:22,629 --> 00:31:25,029
configuration file

733
00:31:23,649 --> 00:31:27,488
you're just verifying the file is

734
00:31:25,029 --> 00:31:29,799
existing on<font color="#CCCCCC"> the next line you're loading</font>

735
00:31:27,489 --> 00:31:31,959
the<font color="#E5E5E5"> file and you're not committing the</font>

736
00:31:29,799 --> 00:31:33,789
configuration and on the third<font color="#E5E5E5"> line</font>

737
00:31:31,959 --> 00:31:36,639
you're just verifying whether the commit

738
00:31:33,789 --> 00:31:39,129
was done<font color="#E5E5E5"> properly or</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> in the second</font>

739
00:31:36,639 --> 00:31:41,799
test case we are<font color="#CCCCCC"> verifying whether the</font>

740
00:31:39,129 --> 00:31:44,259
SNMP polling feature worked or<font color="#CCCCCC"> not this</font>

741
00:31:41,799 --> 00:31:46,989
<font color="#E5E5E5">is we are doing it for ipv6</font><font color="#CCCCCC"> so now we</font>

742
00:31:44,259 --> 00:31:48,999
use<font color="#CCCCCC"> those same test functions which we</font>

743
00:31:46,989 --> 00:31:51,669
used previously<font color="#CCCCCC"> so like you know a set</font>

744
00:31:48,999 --> 00:31:53,409
variable snmpwalk<font color="#E5E5E5"> this time the</font>

745
00:31:51,669 --> 00:31:55,749
configuration has been<font color="#E5E5E5"> done correctly</font><font color="#CCCCCC"> so</font>

746
00:31:53,409 --> 00:31:58,119
we<font color="#E5E5E5"> expect</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> the output should not</font>

747
00:31:55,749 --> 00:32:00,069
contain<font color="#CCCCCC"> timeout response</font><font color="#E5E5E5"> instead it</font>

748
00:31:58,119 --> 00:32:02,619
should give<font color="#E5E5E5"> us</font><font color="#CCCCCC"> certain value for example</font>

749
00:32:00,069 --> 00:32:05,529
<font color="#CCCCCC">here</font><font color="#E5E5E5"> it should give Juniper Networks or</font>

750
00:32:02,619 --> 00:32:08,589
something like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end</font><font color="#E5E5E5"> you don't</font>

751
00:32:05,529 --> 00:32:10,449
<font color="#E5E5E5">want this configuration to</font><font color="#CCCCCC"> be on the Box</font>

752
00:32:08,589 --> 00:32:14,529
<font color="#E5E5E5">forever so you just roll back the</font>

753
00:32:10,449 --> 00:32:17,019
configuration these are the<font color="#E5E5E5"> variables</font>

754
00:32:14,529 --> 00:32:19,569
used for<font color="#E5E5E5"> that sample framework you know</font>

755
00:32:17,019 --> 00:32:23,049
<font color="#E5E5E5">we had IP address username credentials</font>

756
00:32:19,569 --> 00:32:25,599
<font color="#CCCCCC">the SNMP IP IP address the community</font>

757
00:32:23,049 --> 00:32:27,489
values one was the wrong community value

758
00:32:25,599 --> 00:32:28,989
one was the right<font color="#E5E5E5"> community value for</font>

759
00:32:27,489 --> 00:32:31,239
checking whether it's<font color="#E5E5E5"> working</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

760
00:32:28,989 --> 00:32:34,619
right one and not the wrong<font color="#CCCCCC"> one</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> then</font>

761
00:32:31,239 --> 00:32:36,909
the<font color="#E5E5E5"> location of the configuration files</font>

762
00:32:34,619 --> 00:32:38,978
this was the<font color="#E5E5E5"> Python code used for</font><font color="#CCCCCC"> that</font>

763
00:32:36,909 --> 00:32:41,649
so we<font color="#E5E5E5"> just had to</font><font color="#CCCCCC"> use three</font><font color="#E5E5E5"> functions</font>

764
00:32:38,979 --> 00:32:43,059
<font color="#CCCCCC">all the other</font><font color="#E5E5E5"> functions which we used in</font>

765
00:32:41,649 --> 00:32:47,708
the framework<font color="#CCCCCC"> were</font><font color="#E5E5E5"> pretty much built in</font>

766
00:32:43,059 --> 00:32:50,529
so first is the snmpwalk function as you

767
00:32:47,709 --> 00:32:53,379
see here the snmpwalk function in<font color="#CCCCCC"> Python</font>

768
00:32:50,529 --> 00:32:57,179
it uses<font color="#CCCCCC"> sub-process to actually use the</font>

769
00:32:53,379 --> 00:32:59,408
SNMP<font color="#CCCCCC"> command in Linux</font><font color="#E5E5E5"> it gives a</font>

770
00:32:57,179 --> 00:33:02,529
variables<font color="#E5E5E5"> the arguments for that so like</font>

771
00:32:59,409 --> 00:33:05,529
the version<font color="#E5E5E5"> number the string which</font><font color="#CCCCCC"> is a</font>

772
00:33:02,529 --> 00:33:07,869
community<font color="#E5E5E5"> the IP address and you know</font>

773
00:33:05,529 --> 00:33:10,209
<font color="#E5E5E5">gets the output returns it</font><font color="#CCCCCC"> back to the</font>

774
00:33:07,869 --> 00:33:12,458
<font color="#E5E5E5">function the second function we used was</font>

775
00:33:10,209 --> 00:33:14,499
the loading loading of<font color="#CCCCCC"> the file in</font>

776
00:33:12,459 --> 00:33:17,559
committing<font color="#E5E5E5"> that so it was the load set</font>

777
00:33:14,499 --> 00:33:21,039
file and execute so we use the junipers

778
00:33:17,559 --> 00:33:22,299
library to do that<font color="#CCCCCC"> services using the</font>

779
00:33:21,039 --> 00:33:24,129
connection variable which is the

780
00:33:22,299 --> 00:33:26,290
<font color="#E5E5E5">assistant</font><font color="#CCCCCC"> SSH object which was</font>

781
00:33:24,130 --> 00:33:28,000
previously<font color="#E5E5E5"> and loading the configuration</font>

782
00:33:26,290 --> 00:33:30,940
file into it and finally<font color="#E5E5E5"> committing it</font>

783
00:33:28,000 --> 00:33:33,100
that third function<font color="#E5E5E5"> used here was the</font>

784
00:33:30,940 --> 00:33:37,900
<font color="#CCCCCC">rollback</font><font color="#E5E5E5"> function it simply does the</font>

785
00:33:33,100 --> 00:33:41,080
rollback<font color="#E5E5E5"> on the configuration there is</font>

786
00:33:37,900 --> 00:33:43,180
also an option<font color="#CCCCCC"> to add loops and just</font>

787
00:33:41,080 --> 00:33:45,820
like how we use loops in<font color="#CCCCCC"> python we can</font>

788
00:33:43,180 --> 00:33:46,810
use<font color="#E5E5E5"> the loops in the robot framework for</font>

789
00:33:45,820 --> 00:33:49,659
a point<font color="#E5E5E5"> I know if you have certain</font>

790
00:33:46,810 --> 00:33:51,820
repetitive tasks to do<font color="#CCCCCC"> this is the</font>

791
00:33:49,660 --> 00:33:54,370
syntax<font color="#CCCCCC"> for that however I personally do</font>

792
00:33:51,820 --> 00:33:56,679
not<font color="#E5E5E5"> prefer</font><font color="#CCCCCC"> using loops in the framework</font>

793
00:33:54,370 --> 00:33:59,080
<font color="#E5E5E5">because it makes it messy it makes it</font>

794
00:33:56,680 --> 00:34:03,270
difficult to<font color="#E5E5E5"> read</font><font color="#CCCCCC"> I prefer having</font><font color="#E5E5E5"> all</font>

795
00:33:59,080 --> 00:34:03,270
the logic<font color="#E5E5E5"> in the Python code itself</font>

796
00:34:03,390 --> 00:34:08,310
these<font color="#CCCCCC"> are some additional</font><font color="#E5E5E5"> tools</font>

797
00:34:05,500 --> 00:34:10,480
available with the robot framework<font color="#E5E5E5"> so</font>

798
00:34:08,310 --> 00:34:13,330
<font color="#E5E5E5">you know if you want to</font><font color="#CCCCCC"> do something</font>

799
00:34:10,480 --> 00:34:15,969
<font color="#CCCCCC">with the XML output that you</font><font color="#E5E5E5"> get you can</font>

800
00:34:13,330 --> 00:34:17,949
use the<font color="#CCCCCC"> rebirth</font><font color="#E5E5E5"> tool you can merge</font>

801
00:34:15,969 --> 00:34:19,480
different<font color="#E5E5E5"> reports so that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know if</font>

802
00:34:17,949 --> 00:34:21,310
you want<font color="#E5E5E5"> to submit it</font><font color="#CCCCCC"> to their</font>

803
00:34:19,480 --> 00:34:22,719
leadership<font color="#E5E5E5"> team or</font><font color="#CCCCCC"> the executives you</font>

804
00:34:21,310 --> 00:34:25,570
want all the reports to be combined

805
00:34:22,719 --> 00:34:28,149
together and then send<font color="#CCCCCC"> to them sometimes</font>

806
00:34:25,570 --> 00:34:30,490
<font color="#CCCCCC">you</font><font color="#E5E5E5"> know like you know I'm lazy I do not</font>

807
00:34:28,149 --> 00:34:32,710
<font color="#E5E5E5">write</font><font color="#CCCCCC"> a lot of documentation</font><font color="#E5E5E5"> inside the</font>

808
00:34:30,489 --> 00:34:35,649
code so you can use the Lib doc<font color="#E5E5E5"> feature</font>

809
00:34:32,710 --> 00:34:38,230
to generate documentation what it does

810
00:34:35,649 --> 00:34:40,509
is that it identifies<font color="#CCCCCC"> the</font><font color="#E5E5E5"> key words used</font>

811
00:34:38,230 --> 00:34:43,330
in that and automatically<font color="#CCCCCC"> defines</font><font color="#E5E5E5"> a set</font>

812
00:34:40,510 --> 00:34:46,120
<font color="#E5E5E5">of documentation for that you can also</font>

813
00:34:43,330 --> 00:34:48,250
use a DB<font color="#E5E5E5"> bot so this helps if you want</font>

814
00:34:46,120 --> 00:34:50,770
all the reports sent directly to<font color="#CCCCCC"> a</font>

815
00:34:48,250 --> 00:34:53,050
sequel database or sequel Lite format so

816
00:34:50,770 --> 00:34:55,629
you<font color="#CCCCCC"> can store all</font><font color="#E5E5E5"> the reports together</font>

817
00:34:53,050 --> 00:35:00,520
<font color="#E5E5E5">merge the different reports in a sequel</font>

818
00:34:55,629 --> 00:35:02,680
format there's a very nice additional

819
00:35:00,520 --> 00:35:04,930
<font color="#E5E5E5">tool log which is</font><font color="#CCCCCC"> a robot</font><font color="#E5E5E5"> coder</font><font color="#CCCCCC"> so if</font>

820
00:35:02,680 --> 00:35:07,509
<font color="#E5E5E5">you're working with web UI or something</font>

821
00:35:04,930 --> 00:35:09,279
like<font color="#E5E5E5"> that you don't</font><font color="#CCCCCC"> want to</font><font color="#E5E5E5"> write the</font>

822
00:35:07,510 --> 00:35:12,550
framework from<font color="#E5E5E5"> scratch what you can you</font>

823
00:35:09,280 --> 00:35:14,410
do is that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can launch this robot</font>

824
00:35:12,550 --> 00:35:17,950
code or a tool what it does is that it

825
00:35:14,410 --> 00:35:20,109
captures all your<font color="#CCCCCC"> gooey actions what you</font>

826
00:35:17,950 --> 00:35:21,910
what you did on<font color="#E5E5E5"> the web page or the tool</font>

827
00:35:20,110 --> 00:35:23,500
and then it automatically generates<font color="#CCCCCC"> a</font>

828
00:35:21,910 --> 00:35:25,210
framework<font color="#E5E5E5"> based on the actions you did</font>

829
00:35:23,500 --> 00:35:27,460
<font color="#E5E5E5">so you just have</font><font color="#CCCCCC"> to run the test case</font>

830
00:35:25,210 --> 00:35:29,920
once manually<font color="#E5E5E5"> it will automatically</font>

831
00:35:27,460 --> 00:35:31,900
<font color="#E5E5E5">generate</font><font color="#CCCCCC"> the framework</font><font color="#E5E5E5"> for that and then</font>

832
00:35:29,920 --> 00:35:34,030
there are<font color="#CCCCCC"> a couple</font><font color="#E5E5E5"> of other tools for</font>

833
00:35:31,900 --> 00:35:35,800
parallel execution of test cases<font color="#CCCCCC"> for</font>

834
00:35:34,030 --> 00:35:36,680
example<font color="#E5E5E5"> if you have 80 or 100 different</font>

835
00:35:35,800 --> 00:35:39,589
tests

836
00:35:36,680 --> 00:35:41,328
you don't want it to take too<font color="#CCCCCC"> long</font><font color="#E5E5E5"> they</font>

837
00:35:39,589 --> 00:35:46,160
are not<font color="#E5E5E5"> dependent on each other</font><font color="#CCCCCC"> so you</font>

838
00:35:41,329 --> 00:35:48,589
<font color="#E5E5E5">can</font><font color="#CCCCCC"> run</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> parallel II there</font><font color="#E5E5E5"> is also a</font>

839
00:35:46,160 --> 00:35:51,140
<font color="#E5E5E5">API</font><font color="#CCCCCC"> available to run the framework</font><font color="#E5E5E5"> you</font>

840
00:35:48,589 --> 00:35:54,349
<font color="#CCCCCC">know it's kind of</font><font color="#E5E5E5"> running code using</font>

841
00:35:51,140 --> 00:35:57,290
code<font color="#CCCCCC"> I have not really</font><font color="#E5E5E5"> found a</font>

842
00:35:54,349 --> 00:35:59,059
particular use for the API yet<font color="#E5E5E5"> but it's</font>

843
00:35:57,290 --> 00:36:01,460
available you<font color="#E5E5E5"> know you can use all the</font>

844
00:35:59,059 --> 00:36:05,000
robot command options and the<font color="#CCCCCC"> additional</font>

845
00:36:01,460 --> 00:36:07,550
tools<font color="#CCCCCC"> little retrieve reports</font><font color="#E5E5E5"> using the</font>

846
00:36:05,000 --> 00:36:10,910
API and now dynamically supply variables

847
00:36:07,550 --> 00:36:13,520
or something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font>

848
00:36:10,910 --> 00:36:14,690
example<font color="#CCCCCC"> 3 of the framework</font><font color="#E5E5E5"> here we are</font>

849
00:36:13,520 --> 00:36:17,030
verifying<font color="#E5E5E5"> whether the</font><font color="#CCCCCC"> Triple A</font>

850
00:36:14,690 --> 00:36:20,359
configuration is working as intended<font color="#E5E5E5"> or</font>

851
00:36:17,030 --> 00:36:23,390
<font color="#CCCCCC">not so in the</font><font color="#E5E5E5"> first test case we're</font><font color="#CCCCCC"> just</font>

852
00:36:20,359 --> 00:36:25,058
loading<font color="#CCCCCC"> the configuration file so again</font>

853
00:36:23,390 --> 00:36:27,828
we are<font color="#E5E5E5"> checking whether</font><font color="#CCCCCC"> the file exists</font>

854
00:36:25,059 --> 00:36:29,450
<font color="#E5E5E5">then we load the file and then we verify</font>

855
00:36:27,829 --> 00:36:32,030
whether it got committed correctly or

856
00:36:29,450 --> 00:36:35,598
not in the second test function we are

857
00:36:32,030 --> 00:36:37,670
<font color="#CCCCCC">verifying the</font><font color="#E5E5E5"> triple FH feature so you</font>

858
00:36:35,599 --> 00:36:39,530
know it's another networking device<font color="#E5E5E5"> we</font>

859
00:36:37,670 --> 00:36:41,420
using the router<font color="#E5E5E5"> connect and the router</font>

860
00:36:39,530 --> 00:36:43,099
<font color="#E5E5E5">show function which was similar</font><font color="#CCCCCC"> to the</font>

861
00:36:41,420 --> 00:36:45,859
ones used on the Juniper like<font color="#E5E5E5"> no MX</font>

862
00:36:43,099 --> 00:36:48,109
<font color="#CCCCCC">connect and MX verify facts</font><font color="#E5E5E5"> so we just</font>

863
00:36:45,859 --> 00:36:50,029
<font color="#E5E5E5">supply the attributes of the networking</font>

864
00:36:48,109 --> 00:36:52,040
device<font color="#E5E5E5"> like you know what type</font><font color="#CCCCCC"> of</font>

865
00:36:50,030 --> 00:36:54,410
networking device is it is it<font color="#E5E5E5"> the IP</font>

866
00:36:52,040 --> 00:36:56,299
address<font color="#E5E5E5"> the credentials and then since</font>

867
00:36:54,410 --> 00:36:58,609
it's a triple a verification<font color="#E5E5E5"> we are</font>

868
00:36:56,299 --> 00:37:00,829
<font color="#CCCCCC">verifying whether a particular</font><font color="#E5E5E5"> test user</font>

869
00:36:58,609 --> 00:37:03,319
has the privilege<font color="#CCCCCC"> to do configuration or</font>

870
00:37:00,829 --> 00:37:04,970
not for a test user we want<font color="#E5E5E5"> you know</font>

871
00:37:03,319 --> 00:37:08,390
<font color="#E5E5E5">here we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> checking that the user</font>

872
00:37:04,970 --> 00:37:10,308
<font color="#CCCCCC">should not have the privilege to commit</font>

873
00:37:08,390 --> 00:37:12,230
a particular configuration<font color="#E5E5E5"> so we want</font>

874
00:37:10,309 --> 00:37:14,450
the you know we we<font color="#E5E5E5"> are checking the</font>

875
00:37:12,230 --> 00:37:17,900
<font color="#E5E5E5">check enable status on the networking</font>

876
00:37:14,450 --> 00:37:20,930
device and we want that<font color="#E5E5E5"> to be false the</font>

877
00:37:17,900 --> 00:37:22,790
next time<font color="#CCCCCC"> you know if you've done the</font>

878
00:37:20,930 --> 00:37:24,618
<font color="#CCCCCC">same function with an</font><font color="#E5E5E5"> elevated user</font>

879
00:37:22,790 --> 00:37:26,390
privilege we want to verify<font color="#CCCCCC"> whether that</font>

880
00:37:24,619 --> 00:37:30,710
enable function is actually<font color="#CCCCCC"> working</font><font color="#E5E5E5"> on</font>

881
00:37:26,390 --> 00:37:32,029
<font color="#E5E5E5">that or not this was the variables used</font>

882
00:37:30,710 --> 00:37:34,040
for<font color="#E5E5E5"> that which are</font><font color="#CCCCCC"> defined</font><font color="#E5E5E5"> in the</font>

883
00:37:32,030 --> 00:37:36,829
separate variable file again similar

884
00:37:34,040 --> 00:37:38,960
things like<font color="#E5E5E5"> IP address credentials the</font>

885
00:37:36,829 --> 00:37:42,619
test user credentials<font color="#E5E5E5"> the location of</font>

886
00:37:38,960 --> 00:37:44,960
the<font color="#E5E5E5"> file this</font><font color="#CCCCCC"> is the Python code used</font>

887
00:37:42,619 --> 00:37:46,579
for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so similarly we had a one</font>

888
00:37:44,960 --> 00:37:49,640
function for<font color="#E5E5E5"> loading the file</font><font color="#CCCCCC"> and</font>

889
00:37:46,579 --> 00:37:50,570
<font color="#E5E5E5">executing it one function</font><font color="#CCCCCC"> for actually</font>

890
00:37:49,640 --> 00:37:53,180
generating<font color="#CCCCCC"> the</font>

891
00:37:50,570 --> 00:37:55,370
session object<font color="#E5E5E5"> to the device itself so</font>

892
00:37:53,180 --> 00:37:57,140
now<font color="#E5E5E5"> connecting to that router checking</font>

893
00:37:55,370 --> 00:37:59,500
the enable set you know the

894
00:37:57,140 --> 00:38:02,750
<font color="#E5E5E5">configuration status by using the check</font>

895
00:37:59,500 --> 00:38:04,370
the router connect<font color="#E5E5E5"> feature</font><font color="#CCCCCC"> and then the</font>

896
00:38:02,750 --> 00:38:06,290
router show function where<font color="#CCCCCC"> we were just</font>

897
00:38:04,370 --> 00:38:10,910
verifying whether this particular<font color="#CCCCCC"> user</font>

898
00:38:06,290 --> 00:38:13,070
existed in the<font color="#CCCCCC"> status 6 or not there are</font>

899
00:38:10,910 --> 00:38:15,859
<font color="#E5E5E5">some do's and don'ts associated with the</font>

900
00:38:13,070 --> 00:38:18,020
<font color="#E5E5E5">framework you know</font><font color="#CCCCCC"> you should</font><font color="#E5E5E5"> you should</font>

901
00:38:15,860 --> 00:38:20,300
try to not be lazy like<font color="#CCCCCC"> me</font><font color="#E5E5E5"> and add more</font>

902
00:38:18,020 --> 00:38:22,280
documentation<font color="#CCCCCC"> in the framework you know</font>

903
00:38:20,300 --> 00:38:23,720
<font color="#E5E5E5">you know after a month or after six</font>

904
00:38:22,280 --> 00:38:24,800
<font color="#E5E5E5">months when you're really looking at the</font>

905
00:38:23,720 --> 00:38:26,540
<font color="#CCCCCC">framework</font><font color="#E5E5E5"> you should be able to</font>

906
00:38:24,800 --> 00:38:29,810
understand<font color="#E5E5E5"> what is what exactly</font><font color="#CCCCCC"> you did</font>

907
00:38:26,540 --> 00:38:31,820
or<font color="#CCCCCC"> what some other</font><font color="#E5E5E5"> person did also</font><font color="#CCCCCC"> I</font>

908
00:38:29,810 --> 00:38:34,340
would not add too much<font color="#E5E5E5"> of documentation</font>

909
00:38:31,820 --> 00:38:36,920
<font color="#CCCCCC">because then it</font><font color="#E5E5E5"> makes it messy and then</font>

910
00:38:34,340 --> 00:38:39,890
it makes it too detailed<font color="#E5E5E5"> to view it</font>

911
00:38:36,920 --> 00:38:42,200
properly<font color="#E5E5E5"> the naming of the</font><font color="#CCCCCC"> keywords</font>

912
00:38:39,890 --> 00:38:45,410
should<font color="#E5E5E5"> be short and easy so essentially</font>

913
00:38:42,200 --> 00:38:47,720
we<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to identify</font><font color="#E5E5E5"> what we are doing</font>

914
00:38:45,410 --> 00:38:49,940
and<font color="#CCCCCC"> not</font><font color="#E5E5E5"> how we are doing so for example</font>

915
00:38:47,720 --> 00:38:52,370
we are<font color="#E5E5E5"> you know loading the remotes this</font>

916
00:38:49,940 --> 00:38:54,110
log<font color="#E5E5E5"> remotes this</font><font color="#CCCCCC"> log capability we don't</font>

917
00:38:52,370 --> 00:38:56,330
<font color="#E5E5E5">need to define</font><font color="#CCCCCC"> how we are</font><font color="#E5E5E5"> verifying the</font>

918
00:38:54,110 --> 00:38:58,820
whole feature<font color="#CCCCCC"> we just need to define</font>

919
00:38:56,330 --> 00:39:00,620
<font color="#E5E5E5">what</font><font color="#CCCCCC"> we are doing</font><font color="#E5E5E5"> you should also have</font>

920
00:38:58,820 --> 00:39:03,140
<font color="#E5E5E5">uniformity in your</font><font color="#CCCCCC"> framework so that you</font>

921
00:39:00,620 --> 00:39:05,569
know it's easier to read so<font color="#CCCCCC"> here since</font>

922
00:39:03,140 --> 00:39:07,819
we have<font color="#CCCCCC"> everything separated by tabs or</font>

923
00:39:05,570 --> 00:39:09,830
spaces<font color="#E5E5E5"> you can identify what is</font><font color="#CCCCCC"> the</font>

924
00:39:07,820 --> 00:39:14,840
function what variables you are<font color="#CCCCCC"> passing</font>

925
00:39:09,830 --> 00:39:17,509
where is the output<font color="#E5E5E5"> going as I mentioned</font>

926
00:39:14,840 --> 00:39:20,300
previously<font color="#CCCCCC"> all the logic</font><font color="#E5E5E5"> it's better to</font>

927
00:39:17,510 --> 00:39:21,650
have all the logic in the code instead

928
00:39:20,300 --> 00:39:24,080
<font color="#CCCCCC">of having loops or something like</font><font color="#E5E5E5"> that</font>

929
00:39:21,650 --> 00:39:25,670
<font color="#CCCCCC">in the framework itself it is</font><font color="#E5E5E5"> data</font>

930
00:39:24,080 --> 00:39:27,860
driven<font color="#E5E5E5"> so you don't need to</font><font color="#CCCCCC"> hard-code</font>

931
00:39:25,670 --> 00:39:30,410
any variables in the framework<font color="#CCCCCC"> you can</font>

932
00:39:27,860 --> 00:39:35,270
<font color="#E5E5E5">add all the key values in the variable</font>

933
00:39:30,410 --> 00:39:37,700
file<font color="#E5E5E5"> also a particular don't which I</font>

934
00:39:35,270 --> 00:39:39,590
want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> mention is it's better to do</font>

935
00:39:37,700 --> 00:39:41,509
polling<font color="#E5E5E5"> instead of sleeping so for</font>

936
00:39:39,590 --> 00:39:44,060
<font color="#CCCCCC">certain type of functions</font><font color="#E5E5E5"> you might have</font>

937
00:39:41,510 --> 00:39:45,440
to know wait<font color="#E5E5E5"> for 15 seconds or 30</font>

938
00:39:44,060 --> 00:39:47,390
seconds<font color="#CCCCCC"> before you actually get</font><font color="#E5E5E5"> the</font>

939
00:39:45,440 --> 00:39:49,610
output you know on<font color="#CCCCCC"> our networking</font>

940
00:39:47,390 --> 00:39:51,770
devices if you are checking a particular

941
00:39:49,610 --> 00:39:53,240
show<font color="#CCCCCC"> commands status it takes like</font>

942
00:39:51,770 --> 00:39:55,640
sometimes<font color="#E5E5E5"> 10 second to get the whole</font>

943
00:39:53,240 --> 00:39:57,529
output<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> sometimes you</font><font color="#CCCCCC"> have to</font>

944
00:39:55,640 --> 00:39:59,629
sleep the function for some time so you

945
00:39:57,530 --> 00:40:01,670
<font color="#E5E5E5">get the whole whole output of the show</font>

946
00:39:59,630 --> 00:40:03,610
command but instead<font color="#E5E5E5"> of</font><font color="#CCCCCC"> sleeping you can</font>

947
00:40:01,670 --> 00:40:05,830
what I actually do is<font color="#CCCCCC"> that do</font>

948
00:40:03,610 --> 00:40:07,510
polling which is no wait till the

949
00:40:05,830 --> 00:40:10,150
creation of a particular<font color="#E5E5E5"> file so that</font>

950
00:40:07,510 --> 00:40:12,910
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know that</font><font color="#E5E5E5"> helps to run the framework</font>

951
00:40:10,150 --> 00:40:17,410
faster and not<font color="#E5E5E5"> just have it idle or</font>

952
00:40:12,910 --> 00:40:18,819
sleeping this<font color="#E5E5E5"> is the final example of</font>

953
00:40:17,410 --> 00:40:21,370
<font color="#CCCCCC">the framework you know</font><font color="#E5E5E5"> we are verifying</font>

954
00:40:18,820 --> 00:40:23,470
<font color="#E5E5E5">the packet loss</font><font color="#CCCCCC"> and whether the syn</font>

955
00:40:21,370 --> 00:40:25,330
flood is getting blocked or not<font color="#E5E5E5"> so here</font>

956
00:40:23,470 --> 00:40:27,580
we are<font color="#E5E5E5"> using the H ping which is a</font>

957
00:40:25,330 --> 00:40:30,970
<font color="#CCCCCC">simple Linux command tool for generating</font>

958
00:40:27,580 --> 00:40:33,610
<font color="#E5E5E5">a simple DDoS type of traffic</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> we</font>

959
00:40:30,970 --> 00:40:35,080
<font color="#E5E5E5">are</font><font color="#CCCCCC"> China sending a H ping flood</font><font color="#E5E5E5"> weather</font>

960
00:40:33,610 --> 00:40:37,600
verifying whether the packet<font color="#E5E5E5"> loss</font><font color="#CCCCCC"> is</font>

961
00:40:35,080 --> 00:40:39,490
<font color="#CCCCCC">zero or whether it is below a particular</font>

962
00:40:37,600 --> 00:40:41,470
limit then<font color="#CCCCCC"> we are actually</font><font color="#E5E5E5"> loading the</font>

963
00:40:39,490 --> 00:40:45,310
configuration so that<font color="#E5E5E5"> it</font><font color="#CCCCCC"> actually blocks</font>

964
00:40:41,470 --> 00:40:47,680
<font color="#CCCCCC">the DDoS traffic in the second test case</font>

965
00:40:45,310 --> 00:40:49,600
the verify syn flood<font color="#E5E5E5"> we are</font><font color="#CCCCCC"> using the</font>

966
00:40:47,680 --> 00:40:51,600
same commands the same functions again

967
00:40:49,600 --> 00:40:53,410
<font color="#E5E5E5">we are again generating an H ping flood</font>

968
00:40:51,600 --> 00:40:55,150
verifying what<font color="#E5E5E5"> is the packet loss and</font>

969
00:40:53,410 --> 00:40:59,710
<font color="#CCCCCC">this time you know we are</font><font color="#E5E5E5"> comparing it</font>

970
00:40:55,150 --> 00:41:01,420
<font color="#E5E5E5">with the expected value these</font><font color="#CCCCCC"> are the</font>

971
00:40:59,710 --> 00:41:03,340
server<font color="#CCCCCC"> variables used for</font><font color="#E5E5E5"> that again the</font>

972
00:41:01,420 --> 00:41:06,940
IP addresses the credentials<font color="#E5E5E5"> the</font>

973
00:41:03,340 --> 00:41:09,340
location of the file that's this<font color="#E5E5E5"> is the</font>

974
00:41:06,940 --> 00:41:12,010
<font color="#E5E5E5">Python code used for that it uses the H</font>

975
00:41:09,340 --> 00:41:14,800
ping flood<font color="#CCCCCC"> h ping packet packet loss</font>

976
00:41:12,010 --> 00:41:16,420
loading the files and<font color="#E5E5E5"> then a simple on</font>

977
00:41:14,800 --> 00:41:21,370
the function to check whether<font color="#E5E5E5"> the value</font>

978
00:41:16,420 --> 00:41:23,350
<font color="#CCCCCC">is greater than</font><font color="#E5E5E5"> what is expected</font><font color="#CCCCCC"> I have</font>

979
00:41:21,370 --> 00:41:26,890
got<font color="#CCCCCC"> a demo of</font><font color="#E5E5E5"> that I'm not sure if I</font><font color="#CCCCCC"> can</font>

980
00:41:23,350 --> 00:41:33,970
<font color="#E5E5E5">pay it from here</font><font color="#CCCCCC"> if someone from</font><font color="#E5E5E5"> the</font>

981
00:41:26,890 --> 00:41:35,440
team can<font color="#E5E5E5"> play it</font><font color="#CCCCCC"> ok there we go so this</font>

982
00:41:33,970 --> 00:41:38,259
<font color="#E5E5E5">is where I was checking the different</font>

983
00:41:35,440 --> 00:41:41,020
<font color="#CCCCCC">features on the SRX firewall you know</font>

984
00:41:38,260 --> 00:41:43,270
verifying whether<font color="#CCCCCC"> syslog</font><font color="#E5E5E5"> is working NTP</font>

985
00:41:41,020 --> 00:41:45,310
is working<font color="#E5E5E5"> the Triple A is working so</font>

986
00:41:43,270 --> 00:41:47,170
you<font color="#CCCCCC"> know once you load the framework</font><font color="#E5E5E5"> it</font>

987
00:41:45,310 --> 00:41:49,840
will automatically let you know whether

988
00:41:47,170 --> 00:41:52,360
a feature has passed or failed<font color="#E5E5E5"> we see</font>

989
00:41:49,840 --> 00:41:54,820
here<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple of feature failed this was</font>

990
00:41:52,360 --> 00:41:57,250
in<font color="#E5E5E5"> the initial days</font><font color="#CCCCCC"> of the framework</font>

991
00:41:54,820 --> 00:41:59,380
being built<font color="#CCCCCC"> so when it failed it didn't</font>

992
00:41:57,250 --> 00:42:03,960
mean<font color="#CCCCCC"> that the SRX firewall failed</font><font color="#E5E5E5"> it was</font>

993
00:41:59,380 --> 00:42:03,960
some problem with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> configuration</font><font color="#CCCCCC"> you</font>

994
00:42:05,010 --> 00:42:10,600
<font color="#CCCCCC">see the ipv4</font><font color="#E5E5E5"> and ipv6</font><font color="#CCCCCC"> access capability</font>

995
00:42:08,950 --> 00:42:13,689
being checked<font color="#E5E5E5"> the management</font>

996
00:42:10,600 --> 00:42:16,920
<font color="#CCCCCC">configuration the SNMP polling for v1 v2</font>

997
00:42:13,690 --> 00:42:16,920
see<font color="#E5E5E5"> v3</font>

998
00:42:17,950 --> 00:42:23,240
so all this feature testing which would

999
00:42:20,720 --> 00:42:24,709
generally take<font color="#E5E5E5"> you days</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> now once</font>

1000
00:42:23,240 --> 00:42:26,959
you've developed the framework<font color="#CCCCCC"> you can</font>

1001
00:42:24,710 --> 00:42:28,579
run this<font color="#E5E5E5"> framework for any type you know</font>

1002
00:42:26,960 --> 00:42:30,380
any particular networking device and

1003
00:42:28,579 --> 00:42:36,140
then you just get the output in like

1004
00:42:30,380 --> 00:42:38,150
<font color="#E5E5E5">five or</font><font color="#CCCCCC"> ten minutes as</font><font color="#E5E5E5"> you see it</font>

1005
00:42:36,140 --> 00:42:41,770
<font color="#CCCCCC">sometimes gives you details about why a</font>

1006
00:42:38,150 --> 00:42:41,770
particular<font color="#E5E5E5"> test case failed</font>

1007
00:42:54,450 --> 00:42:58,950
some test cases do take a while<font color="#CCCCCC"> again oh</font>

1008
00:42:57,180 --> 00:43:00,990
<font color="#E5E5E5">five</font><font color="#CCCCCC"> or ten seconds</font><font color="#E5E5E5"> to run completely</font>

1009
00:42:58,950 --> 00:43:02,759
<font color="#E5E5E5">sometimes they are polling sometimes</font>

1010
00:43:00,990 --> 00:43:06,410
they<font color="#E5E5E5"> are getting the whole output and</font>

1011
00:43:02,760 --> 00:43:06,410
matching<font color="#CCCCCC"> to the expected</font><font color="#E5E5E5"> value</font>

1012
00:43:12,720 --> 00:43:17,520
and finally we have the output files one

1013
00:43:15,120 --> 00:43:20,450
<font color="#E5E5E5">is the XML format and other two are the</font>

1014
00:43:17,520 --> 00:43:20,450
HTML files

1015
00:43:40,340 --> 00:43:44,540
so this is the<font color="#E5E5E5"> report it gives you an</font>

1016
00:43:42,590 --> 00:43:46,820
<font color="#E5E5E5">overview of</font><font color="#CCCCCC"> weather</font><font color="#E5E5E5"> test cases all</font>

1017
00:43:44,540 --> 00:43:48,620
weather all<font color="#CCCCCC"> of them passed or failed</font><font color="#E5E5E5"> the</font>

1018
00:43:46,820 --> 00:43:51,050
year it shows that five<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> test</font>

1019
00:43:48,620 --> 00:43:53,029
critical<font color="#E5E5E5"> test cases were failed now how</font>

1020
00:43:51,050 --> 00:43:55,400
much time<font color="#E5E5E5"> it took you know and then it</font>

1021
00:43:53,030 --> 00:43:58,300
gives<font color="#CCCCCC"> you</font><font color="#E5E5E5"> the option to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> more detailed</font>

1022
00:43:55,400 --> 00:43:58,300
into the log file

1023
00:44:04,510 --> 00:44:09,550
so as you see the log file gives a

1024
00:44:06,579 --> 00:44:11,950
<font color="#E5E5E5">detailed you know information one of</font>

1025
00:44:09,550 --> 00:44:13,930
<font color="#E5E5E5">what</font><font color="#CCCCCC"> cast cases failed</font><font color="#E5E5E5"> what exactly</font>

1026
00:44:11,950 --> 00:44:15,970
<font color="#E5E5E5">keywords were on how much time it took</font>

1027
00:44:13,930 --> 00:44:18,220
what function did it do to<font color="#CCCCCC"> the</font>

1028
00:44:15,970 --> 00:44:20,618
<font color="#E5E5E5">networking device</font><font color="#CCCCCC"> no same for a</font>

1029
00:44:18,220 --> 00:44:22,779
particular failed kind of for a failed

1030
00:44:20,619 --> 00:44:28,599
test case<font color="#E5E5E5"> it defines what exactly failed</font>

1031
00:44:22,780 --> 00:44:32,710
<font color="#E5E5E5">now</font><font color="#CCCCCC"> why it failed on reasons for that so</font>

1032
00:44:28,599 --> 00:44:35,109
yeah that's pretty<font color="#E5E5E5"> much it</font><font color="#CCCCCC"> so you know</font>

1033
00:44:32,710 --> 00:44:36,730
<font color="#E5E5E5">there's initial initial learning curve</font>

1034
00:44:35,109 --> 00:44:39,369
<font color="#E5E5E5">to understanding how robot framework</font>

1035
00:44:36,730 --> 00:44:41,650
<font color="#E5E5E5">will work and how you will develop it</font>

1036
00:44:39,369 --> 00:44:43,839
for<font color="#CCCCCC"> a particular network device but once</font>

1037
00:44:41,650 --> 00:44:45,820
you identify how to develop it once it

1038
00:44:43,839 --> 00:44:48,160
is developed<font color="#E5E5E5"> and it is very easy to</font>

1039
00:44:45,820 --> 00:44:49,869
<font color="#CCCCCC">automate the testing for all the several</font>

1040
00:44:48,160 --> 00:44:53,170
and our<font color="#CCCCCC"> subsequent models for the same</font>

1041
00:44:49,869 --> 00:44:57,820
<font color="#E5E5E5">vendor these are some helpful resources</font>

1042
00:44:53,170 --> 00:45:00,550
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that and finally I understand this</font>

1043
00:44:57,820 --> 00:45:03,609
was a<font color="#E5E5E5"> very deep dive you know it was too</font>

1044
00:45:00,550 --> 00:45:05,710
much<font color="#CCCCCC"> for 45 minutes</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> the slides</font>

1045
00:45:03,609 --> 00:45:07,540
are available<font color="#E5E5E5"> on on the</font><font color="#CCCCCC"> Nano website if</font>

1046
00:45:05,710 --> 00:45:10,300
there are any questions<font color="#E5E5E5"> please feel free</font>

1047
00:45:07,540 --> 00:45:13,119
to contact<font color="#E5E5E5"> me</font><font color="#CCCCCC"> on pratik dot lotia at</font>

1048
00:45:10,300 --> 00:45:16,560
charter comm<font color="#E5E5E5"> and we might have</font><font color="#CCCCCC"> a couple</font>

1049
00:45:13,119 --> 00:45:18,920
<font color="#CCCCCC">of</font><font color="#E5E5E5"> minutes for questions</font><font color="#CCCCCC"> if anybody has</font>

1050
00:45:16,560 --> 00:45:27,549
thank you

1051
00:45:18,920 --> 00:45:27,550
[Applause]

1052
00:45:33,600 --> 00:45:36,650
<font color="#E5E5E5">all right</font>

1053
00:45:39,450 --> 00:45:46,578
yep looks good<font color="#CCCCCC"> alright thank you</font>

1054
00:45:42,710 --> 00:45:46,579
[Applause]

1055
00:45:50,910 --> 00:45:52,970
you

