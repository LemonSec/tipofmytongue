1
00:00:07,050 --> 00:00:11,820
hey guys<font color="#E5E5E5"> so I'm</font>

2
00:00:12,759 --> 00:00:17,970
and I'm going<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> European</font>

3
00:00:15,820 --> 00:00:20,410
<font color="#CCCCCC">Monitoring</font><font color="#E5E5E5"> in segments or networks</font>

4
00:00:17,970 --> 00:00:25,270
unfortunately clay can't join me<font color="#E5E5E5"> so</font>

5
00:00:20,410 --> 00:00:27,160
you'll have<font color="#E5E5E5"> to live with</font><font color="#CCCCCC"> me so turbine</font>

6
00:00:25,270 --> 00:00:29,830
<font color="#CCCCCC">monitoring of course is</font><font color="#E5E5E5"> very near and</font>

7
00:00:27,160 --> 00:00:31,539
<font color="#CCCCCC">dear to most of the operators</font><font color="#E5E5E5"> you want</font>

8
00:00:29,830 --> 00:00:35,379
to make<font color="#CCCCCC"> sure your network</font><font color="#E5E5E5"> is functioning</font>

9
00:00:31,539 --> 00:00:37,239
<font color="#E5E5E5">correctly</font><font color="#CCCCCC"> everything is going the</font><font color="#E5E5E5"> way it</font>

10
00:00:35,379 --> 00:00:40,079
should there no traffic black<font color="#E5E5E5"> holes</font><font color="#CCCCCC"> or</font>

11
00:00:37,239 --> 00:00:43,510
other<font color="#CCCCCC"> faults</font><font color="#E5E5E5"> opening in the network so</font>

12
00:00:40,079 --> 00:00:45,850
<font color="#CCCCCC">for</font><font color="#E5E5E5"> most of the slides</font><font color="#CCCCCC"> I'll just use</font>

13
00:00:43,510 --> 00:00:48,510
this topology over here so it's pretty

14
00:00:45,850 --> 00:00:53,620
simple<font color="#CCCCCC"> I'll be describing it only</font><font color="#E5E5E5"> to</font>

15
00:00:48,510 --> 00:00:55,809
basically memorize it<font color="#CCCCCC"> so black holes</font>

16
00:00:53,620 --> 00:00:59,288
occur when a router starts dropping

17
00:00:55,809 --> 00:01:01,660
traffic and it could be that<font color="#E5E5E5"> we are</font>

18
00:00:59,289 --> 00:01:03,519
<font color="#E5E5E5">dropping it could be our single prefix</font>

19
00:01:01,660 --> 00:01:05,349
it could be just<font color="#E5E5E5"> over a particular link</font>

20
00:01:03,519 --> 00:01:07,630
<font color="#E5E5E5">it could be all</font><font color="#CCCCCC"> the traffic</font><font color="#E5E5E5"> over the</font>

21
00:01:05,349 --> 00:01:09,940
network<font color="#E5E5E5"> and there are</font><font color="#CCCCCC"> multiple reasons</font>

22
00:01:07,630 --> 00:01:12,399
that it could occur<font color="#E5E5E5"> sometime there's a</font>

23
00:01:09,940 --> 00:01:14,259
forwarding Incans<font color="#E5E5E5"> inconsistency where</font>

24
00:01:12,399 --> 00:01:17,679
one of<font color="#E5E5E5"> the network let's say one of the</font>

25
00:01:14,259 --> 00:01:20,440
line cards<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> big behind it doesn't</font>

26
00:01:17,679 --> 00:01:22,750
have the<font color="#CCCCCC"> latest update</font><font color="#E5E5E5"> sometimes our</font>

27
00:01:20,440 --> 00:01:25,270
control<font color="#CCCCCC"> panes of the</font><font color="#E5E5E5"> two devices can get</font>

28
00:01:22,750 --> 00:01:28,660
out<font color="#E5E5E5"> of sync and user can also of course</font>

29
00:01:25,270 --> 00:01:30,848
<font color="#E5E5E5">can make a mistake</font><font color="#CCCCCC"> miss</font><font color="#E5E5E5"> configure and</font>

30
00:01:28,660 --> 00:01:32,830
that<font color="#E5E5E5"> would lead to a black hole so</font><font color="#CCCCCC"> there</font>

31
00:01:30,849 --> 00:01:35,349
various causes<font color="#CCCCCC"> it's a significant pain</font>

32
00:01:32,830 --> 00:01:39,610
point and something that we want<font color="#CCCCCC"> to</font>

33
00:01:35,349 --> 00:01:41,920
address in any<font color="#E5E5E5"> decent om solution so</font>

34
00:01:39,610 --> 00:01:44,500
I'll just highlight this using a very

35
00:01:41,920 --> 00:01:47,200
simple<font color="#E5E5E5"> example so here we have a VPN</font>

36
00:01:44,500 --> 00:01:49,950
which<font color="#CCCCCC"> see device</font><font color="#E5E5E5"> c1 we just want to send</font>

37
00:01:47,200 --> 00:01:52,800
<font color="#E5E5E5">traffic</font><font color="#CCCCCC"> towards</font><font color="#E5E5E5"> c2 or the MPLS network</font>

38
00:01:49,950 --> 00:01:55,869
so in this case it<font color="#E5E5E5"> will send the packet</font>

39
00:01:52,800 --> 00:01:58,890
<font color="#CCCCCC">to node 1</font><font color="#E5E5E5"> so node 1 will slap</font><font color="#CCCCCC"> the</font>

40
00:01:55,869 --> 00:02:03,069
transport label and the VPN label<font color="#E5E5E5"> and</font>

41
00:01:58,890 --> 00:02:06,099
then send the packet was next<font color="#E5E5E5"> up so if</font>

42
00:02:03,069 --> 00:02:08,319
<font color="#CCCCCC">you</font><font color="#E5E5E5"> notice over here the label ampere</font>

43
00:02:06,099 --> 00:02:12,190
<font color="#E5E5E5">stable that is being sent it is</font>

44
00:02:08,318 --> 00:02:14,200
<font color="#E5E5E5">unlabeled</font><font color="#CCCCCC"> on the next hop so on</font><font color="#E5E5E5"> and this</font>

45
00:02:12,190 --> 00:02:16,209
<font color="#CCCCCC">is very this is not a very</font><font color="#E5E5E5"> uncommon</font>

46
00:02:14,200 --> 00:02:19,359
scenario in the network encounters in

47
00:02:16,209 --> 00:02:22,209
this<font color="#E5E5E5"> case it may just pop</font><font color="#CCCCCC"> that label</font><font color="#E5E5E5"> and</font>

48
00:02:19,360 --> 00:02:24,549
<font color="#CCCCCC">just</font><font color="#E5E5E5"> expose the VPN label prematurely</font>

49
00:02:22,209 --> 00:02:26,610
<font color="#E5E5E5">and send it towards the next hop and</font>

50
00:02:24,549 --> 00:02:28,410
<font color="#E5E5E5">because</font><font color="#CCCCCC"> of course the next stop is a</font>

51
00:02:26,610 --> 00:02:31,200
<font color="#CCCCCC">or node it does not understand the VPN</font>

52
00:02:28,410 --> 00:02:35,549
label or<font color="#CCCCCC"> the payload</font><font color="#E5E5E5"> underneath it it's</font>

53
00:02:31,200 --> 00:02:37,560
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> drop the traffic and in MPLS</font>

54
00:02:35,550 --> 00:02:39,450
networks<font color="#E5E5E5"> typically it could also happen</font>

55
00:02:37,560 --> 00:02:41,970
<font color="#E5E5E5">that you have ecmp in the network in</font>

56
00:02:39,450 --> 00:02:44,760
this case you may send the packet

57
00:02:41,970 --> 00:02:46,530
towards incorrect<font color="#E5E5E5"> node and</font><font color="#CCCCCC"> that will</font>

58
00:02:44,760 --> 00:02:48,600
lead to<font color="#CCCCCC"> a black</font><font color="#E5E5E5"> hole as well with</font>

59
00:02:46,530 --> 00:02:51,030
<font color="#E5E5E5">segment routing the labels are global</font>

60
00:02:48,600 --> 00:02:52,680
<font color="#E5E5E5">which means that most of the network</font>

61
00:02:51,030 --> 00:02:57,120
<font color="#E5E5E5">device the network devices understand</font>

62
00:02:52,680 --> 00:02:59,160
the labels<font color="#CCCCCC"> so even if the traffic is not</font>

63
00:02:57,120 --> 00:03:00,690
sent<font color="#E5E5E5"> the</font><font color="#CCCCCC"> part is to</font><font color="#E5E5E5"> the correct node it</font>

64
00:02:59,160 --> 00:03:02,790
will<font color="#E5E5E5"> still end up reaching the</font>

65
00:03:00,690 --> 00:03:05,790
destination<font color="#CCCCCC"> but not to the expected path</font>

66
00:03:02,790 --> 00:03:08,280
<font color="#E5E5E5">it will take a path that</font><font color="#CCCCCC"> is probably</font>

67
00:03:05,790 --> 00:03:11,579
longer<font color="#E5E5E5"> or maybe</font><font color="#CCCCCC"> introduce congestion in</font>

68
00:03:08,280 --> 00:03:13,860
the network it may<font color="#CCCCCC"> even break SLS</font><font color="#E5E5E5"> so</font>

69
00:03:11,580 --> 00:03:17,580
this is what I'm using as path

70
00:03:13,860 --> 00:03:19,260
divergence so in again I'm going<font color="#E5E5E5"> to</font>

71
00:03:17,580 --> 00:03:21,840
<font color="#CCCCCC">highlight</font><font color="#E5E5E5"> it using an</font><font color="#CCCCCC"> example over here</font>

72
00:03:19,260 --> 00:03:23,910
so here let's say we<font color="#E5E5E5"> have a policy</font><font color="#CCCCCC"> we</font>

73
00:03:21,840 --> 00:03:28,680
<font color="#E5E5E5">want to send that traffic from node 1 to</font>

74
00:03:23,910 --> 00:03:30,359
<font color="#E5E5E5">node 7 through node 5 so in this case we</font>

75
00:03:28,680 --> 00:03:32,580
can have<font color="#CCCCCC"> a MPLS label stack where the</font>

76
00:03:30,360 --> 00:03:35,549
first table<font color="#CCCCCC"> 16,000 5 is</font><font color="#E5E5E5"> the label to</font>

77
00:03:32,580 --> 00:03:39,420
reach node 5<font color="#E5E5E5"> and then the next one is</font>

78
00:03:35,549 --> 00:03:42,959
<font color="#CCCCCC">label tree node 7 so node 1 builds</font><font color="#E5E5E5"> this</font>

79
00:03:39,420 --> 00:03:45,359
package and it<font color="#CCCCCC"> word the next top</font><font color="#E5E5E5"> 3 so 3</font>

80
00:03:42,959 --> 00:03:47,640
is<font color="#E5E5E5"> a penultimate hop so it's supposed to</font>

81
00:03:45,360 --> 00:03:50,640
pop the label and then send the<font color="#CCCCCC"> traffic</font>

82
00:03:47,640 --> 00:03:53,850
towards<font color="#E5E5E5"> 5 but let's say there was a</font>

83
00:03:50,640 --> 00:03:56,880
issue in<font color="#CCCCCC"> 3</font><font color="#E5E5E5"> so instead of popping</font><font color="#CCCCCC"> the</font>

84
00:03:53,850 --> 00:03:58,769
label and sending it towards node 5 it

85
00:03:56,880 --> 00:04:01,890
instead send it towards node 6 and

86
00:03:58,769 --> 00:04:04,440
because the package still have<font color="#E5E5E5"> 16,000</font><font color="#CCCCCC"> 7</font>

87
00:04:01,890 --> 00:04:05,640
node 6 will pop the table it understands

88
00:04:04,440 --> 00:04:09,720
<font color="#E5E5E5">it and send it towards</font>

89
00:04:05,640 --> 00:04:11,760
<font color="#E5E5E5">7 so now the packet did reach the</font>

90
00:04:09,720 --> 00:04:13,739
destination<font color="#CCCCCC"> but it is not taking the</font>

91
00:04:11,760 --> 00:04:16,978
path that we<font color="#CCCCCC"> expect it to take and that</font>

92
00:04:13,739 --> 00:04:20,280
<font color="#CCCCCC">is can lead to congestion other issues I</font>

93
00:04:16,978 --> 00:04:22,140
<font color="#CCCCCC">mentioned above so currently there are</font>

94
00:04:20,279 --> 00:04:25,500
<font color="#E5E5E5">various fault detection mechanisms</font>

95
00:04:22,140 --> 00:04:27,840
available for operators broadly we<font color="#CCCCCC"> can</font>

96
00:04:25,500 --> 00:04:29,700
categorize them as proactive<font color="#CCCCCC"> which means</font>

97
00:04:27,840 --> 00:04:31,260
they are constantly scanning<font color="#E5E5E5"> the network</font>

98
00:04:29,700 --> 00:04:34,740
and<font color="#E5E5E5"> making sure everything is working</font>

99
00:04:31,260 --> 00:04:38,159
<font color="#E5E5E5">the way it should</font><font color="#CCCCCC"> but for large network</font>

100
00:04:34,740 --> 00:04:40,120
that<font color="#E5E5E5"> gets really complicated because you</font>

101
00:04:38,160 --> 00:04:44,169
it's tough<font color="#E5E5E5"> to prove actually</font><font color="#CCCCCC"> might other</font>

102
00:04:40,120 --> 00:04:48,070
<font color="#CCCCCC">dier Network</font><font color="#E5E5E5"> very easily so then</font>

103
00:04:44,169 --> 00:04:51,159
operator have to<font color="#CCCCCC"> also rely</font><font color="#E5E5E5"> on reactive</font>

104
00:04:48,070 --> 00:04:53,349
tools as well<font color="#E5E5E5"> so in reactive you</font><font color="#CCCCCC"> get</font>

105
00:04:51,160 --> 00:04:57,220
<font color="#E5E5E5">alerted by a fault</font><font color="#CCCCCC"> and then you start</font>

106
00:04:53,350 --> 00:04:58,930
<font color="#CCCCCC">your use</font><font color="#E5E5E5"> your arsenal of</font><font color="#CCCCCC"> AM to identify</font>

107
00:04:57,220 --> 00:05:00,490
the fault<font color="#E5E5E5"> and the point of</font><font color="#CCCCCC"> failure so</font>

108
00:04:58,930 --> 00:05:03,490
<font color="#CCCCCC">you can take a</font><font color="#E5E5E5"> corrective action against</font>

109
00:05:00,490 --> 00:05:05,470
<font color="#E5E5E5">it and then we can also say</font><font color="#CCCCCC"> that the</font>

110
00:05:03,490 --> 00:05:07,810
tools available<font color="#E5E5E5"> to you right now they</font>

111
00:05:05,470 --> 00:05:09,760
<font color="#CCCCCC">could be local which means that they</font>

112
00:05:07,810 --> 00:05:12,100
<font color="#CCCCCC">just rely on</font><font color="#E5E5E5"> the node they don't send</font>

113
00:05:09,760 --> 00:05:15,550
any probes or anything<font color="#E5E5E5"> outside</font><font color="#CCCCCC"> our box</font>

114
00:05:12,100 --> 00:05:17,650
so for example<font color="#CCCCCC"> some routers wishes have</font>

115
00:05:15,550 --> 00:05:21,550
our<font color="#E5E5E5"> label our route consistency checkers</font>

116
00:05:17,650 --> 00:05:25,900
which make sure that label<font color="#E5E5E5"> our routing</font>

117
00:05:21,550 --> 00:05:27,490
database is in sync with faith and but

118
00:05:25,900 --> 00:05:31,330
on the<font color="#E5E5E5"> other</font><font color="#CCCCCC"> hand we have a less</font>

119
00:05:27,490 --> 00:05:34,060
<font color="#CCCCCC">sweeping</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> BFD</font><font color="#E5E5E5"> and these tools</font><font color="#CCCCCC"> start</font>

120
00:05:31,330 --> 00:05:34,990
<font color="#E5E5E5">up</font><font color="#CCCCCC"> verified well get the entire LSP so</font>

121
00:05:34,060 --> 00:05:37,870
if something<font color="#E5E5E5"> is broken</font>

122
00:05:34,990 --> 00:05:41,199
BFD can monitor it proactively<font color="#CCCCCC"> at a very</font>

123
00:05:37,870 --> 00:05:43,180
fast rate and<font color="#CCCCCC"> LSP paying can it's not</font>

124
00:05:41,199 --> 00:05:45,070
<font color="#E5E5E5">meant to</font><font color="#CCCCCC"> be constant very</font><font color="#E5E5E5"> fast rate but</font>

125
00:05:43,180 --> 00:05:48,220
it can detect<font color="#E5E5E5"> more faults and various</font>

126
00:05:45,070 --> 00:05:50,650
other<font color="#CCCCCC"> uses as well but overall we can</font>

127
00:05:48,220 --> 00:05:53,380
say that in this<font color="#CCCCCC"> case these</font><font color="#E5E5E5"> tools are</font>

128
00:05:50,650 --> 00:05:55,210
incomplete<font color="#E5E5E5"> because they only identify a</font>

129
00:05:53,380 --> 00:05:57,729
subset of faults

130
00:05:55,210 --> 00:06:00,400
for example<font color="#CCCCCC"> BFT Alice with pain they</font>

131
00:05:57,729 --> 00:06:03,039
cannot detect<font color="#CCCCCC"> pathogens to cast package</font>

132
00:06:00,400 --> 00:06:06,520
to reach the destination<font color="#E5E5E5"> so it will</font>

133
00:06:03,039 --> 00:06:08,260
<font color="#E5E5E5">report everything</font><font color="#CCCCCC"> is ok</font><font color="#E5E5E5"> and then there</font>

134
00:06:06,520 --> 00:06:10,330
are<font color="#E5E5E5"> also scalability challenges with it</font>

135
00:06:08,260 --> 00:06:12,729
because<font color="#E5E5E5"> you have high number of ecmp and</font>

136
00:06:10,330 --> 00:06:15,400
<font color="#CCCCCC">ecmp combinations it just gets into a</font>

137
00:06:12,729 --> 00:06:20,139
<font color="#CCCCCC">cmp explosion it's nearly impossible to</font>

138
00:06:15,400 --> 00:06:22,388
<font color="#CCCCCC">monitor every single path and to end so</font>

139
00:06:20,139 --> 00:06:25,210
we think<font color="#CCCCCC"> that we need a tool that can</font>

140
00:06:22,389 --> 00:06:27,940
complement<font color="#E5E5E5"> the existing tool set</font><font color="#CCCCCC"> that</font>

141
00:06:25,210 --> 00:06:30,638
<font color="#E5E5E5">can well we're not going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get go away</font>

142
00:06:27,940 --> 00:06:32,229
from and to end monitoring our local

143
00:06:30,639 --> 00:06:33,760
tools<font color="#E5E5E5"> but we can come up</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> something</font>

144
00:06:32,229 --> 00:06:35,409
<font color="#CCCCCC">that complements</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> too might have</font>

145
00:06:33,760 --> 00:06:39,969
<font color="#CCCCCC">more</font><font color="#E5E5E5"> fast that can remain otherwise</font>

146
00:06:35,410 --> 00:06:42,340
undetected and for this purpose<font color="#CCCCCC"> we are</font>

147
00:06:39,970 --> 00:06:47,950
<font color="#E5E5E5">introducing segment routing data pain</font>

148
00:06:42,340 --> 00:06:50,530
monitoring so<font color="#E5E5E5"> SRD</font><font color="#CCCCCC"> p.m. is independent</font>

149
00:06:47,950 --> 00:06:53,099
solution that allows a node<font color="#E5E5E5"> to test its</font>

150
00:06:50,530 --> 00:06:55,559
entire forwarding path

151
00:06:53,100 --> 00:06:57,960
and to end and to end in the sense

152
00:06:55,560 --> 00:07:00,660
ingress<font color="#CCCCCC"> to</font><font color="#E5E5E5"> egress on the same device not</font>

153
00:06:57,960 --> 00:07:02,250
including the network sense<font color="#E5E5E5"> for any MPLS</font>

154
00:07:00,660 --> 00:07:07,200
<font color="#CCCCCC">traffic that could</font><font color="#E5E5E5"> be received from any</font>

155
00:07:02,250 --> 00:07:09,030
upstream<font color="#CCCCCC"> towards any downstream ECM B so</font>

156
00:07:07,200 --> 00:07:11,789
in this case we<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> adjusting just</font>

157
00:07:09,030 --> 00:07:13,619
<font color="#E5E5E5">one path we're not just testing local</font>

158
00:07:11,790 --> 00:07:17,070
probe and sending it out we try to model

159
00:07:13,620 --> 00:07:20,450
the customer traffic<font color="#E5E5E5"> exactly and we do</font>

160
00:07:17,070 --> 00:07:23,760
this<font color="#E5E5E5"> through</font><font color="#CCCCCC"> a distributed and localized</font>

161
00:07:20,450 --> 00:07:27,300
<font color="#E5E5E5">detection mechanism that is based on so</font>

162
00:07:23,760 --> 00:07:29,130
solving paradigm<font color="#E5E5E5"> so in this case it can</font>

163
00:07:27,300 --> 00:07:31,950
monitor the<font color="#E5E5E5"> entire network it came under</font>

164
00:07:29,130 --> 00:07:34,200
<font color="#CCCCCC">the</font><font color="#E5E5E5"> network proactively constantly going</font>

165
00:07:31,950 --> 00:07:37,200
<font color="#E5E5E5">on in the background</font><font color="#CCCCCC"> protecting any</font>

166
00:07:34,200 --> 00:07:40,050
faults and it's localized<font color="#E5E5E5"> because we</font>

167
00:07:37,200 --> 00:07:42,780
don't go beyond one half<font color="#E5E5E5"> each node just</font>

168
00:07:40,050 --> 00:07:45,360
checks itself<font color="#E5E5E5"> and then its immediate</font>

169
00:07:42,780 --> 00:07:46,679
neighbors<font color="#E5E5E5"> it doesn't try to go beyond</font>

170
00:07:45,360 --> 00:07:49,530
<font color="#E5E5E5">that</font><font color="#CCCCCC"> because then we'll run</font><font color="#E5E5E5"> into the</font>

171
00:07:46,680 --> 00:07:53,790
same issues that<font color="#CCCCCC"> we have with</font><font color="#E5E5E5"> end-to-end</font>

172
00:07:49,530 --> 00:07:56,280
<font color="#E5E5E5">tools instead we can distribute the</font>

173
00:07:53,790 --> 00:07:58,530
detection<font color="#CCCCCC"> mechanism</font><font color="#E5E5E5"> detection</font><font color="#CCCCCC"> over</font><font color="#E5E5E5"> work</font>

174
00:07:56,280 --> 00:08:00,840
<font color="#E5E5E5">to different devices</font><font color="#CCCCCC"> in the network</font><font color="#E5E5E5"> so</font>

175
00:07:58,530 --> 00:08:02,969
<font color="#CCCCCC">each device can just check itself</font><font color="#E5E5E5"> and</font>

176
00:08:00,840 --> 00:08:06,960
its neighbors and don't have to rely<font color="#CCCCCC"> on</font>

177
00:08:02,970 --> 00:08:11,010
just<font color="#CCCCCC"> a single tool or one end-to-end</font>

178
00:08:06,960 --> 00:08:13,250
mechanism and because<font color="#E5E5E5"> underneath we use</font>

179
00:08:11,010 --> 00:08:16,320
a specially crafted<font color="#E5E5E5"> LSP paying package</font>

180
00:08:13,250 --> 00:08:19,200
so<font color="#CCCCCC"> olestra paying is widely supported by</font>

181
00:08:16,320 --> 00:08:21,570
<font color="#E5E5E5">most vendors</font><font color="#CCCCCC"> at empty list</font><font color="#E5E5E5"> level and</font>

182
00:08:19,200 --> 00:08:24,120
most operators probably would apply MPLS

183
00:08:21,570 --> 00:08:27,060
they use it every day so<font color="#CCCCCC"> you don't have</font>

184
00:08:24,120 --> 00:08:29,160
to go to<font color="#CCCCCC"> IETF writer drafts Tendai</font>

185
00:08:27,060 --> 00:08:30,750
<font color="#E5E5E5">estate and hope that all</font><font color="#CCCCCC"> your other</font>

186
00:08:29,160 --> 00:08:34,169
vendors<font color="#E5E5E5"> also support it it's</font>

187
00:08:30,750 --> 00:08:35,970
interoperable by design<font color="#E5E5E5"> and because</font><font color="#CCCCCC"> we</font>

188
00:08:34,169 --> 00:08:37,978
<font color="#CCCCCC">are relying on source routing</font><font color="#E5E5E5"> so in this</font>

189
00:08:35,970 --> 00:08:40,169
case<font color="#CCCCCC"> off-roading</font><font color="#E5E5E5"> has adjacency</font><font color="#CCCCCC"> said</font>

190
00:08:37,979 --> 00:08:44,010
which<font color="#E5E5E5"> means that we can pin</font><font color="#CCCCCC"> down exact</font>

191
00:08:40,169 --> 00:08:46,439
<font color="#CCCCCC">or it</font><font color="#E5E5E5"> link in this case we can pin down</font>

192
00:08:44,010 --> 00:08:48,360
<font color="#E5E5E5">the upstream and downstream and using</font>

193
00:08:46,440 --> 00:08:50,190
this<font color="#CCCCCC"> we can</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure that we test</font><font color="#E5E5E5"> each</font>

194
00:08:48,360 --> 00:08:51,900
upstream and downstream combination

195
00:08:50,190 --> 00:08:53,790
because<font color="#CCCCCC"> you could have</font><font color="#E5E5E5"> multiple line</font>

196
00:08:51,900 --> 00:08:56,640
cards and<font color="#E5E5E5"> maybe if you test just one</font><font color="#CCCCCC"> of</font>

197
00:08:53,790 --> 00:08:59,699
them it<font color="#E5E5E5"> doesn't mean that the other line</font>

198
00:08:56,640 --> 00:09:02,610
<font color="#E5E5E5">cars will function the way</font><font color="#CCCCCC"> it should so</font>

199
00:08:59,700 --> 00:09:04,290
now I'll<font color="#CCCCCC"> go</font><font color="#E5E5E5"> into the mechanics of data</font>

200
00:09:02,610 --> 00:09:06,840
plane monitoring where<font color="#CCCCCC"> I'll</font><font color="#E5E5E5"> highlight</font>

201
00:09:04,290 --> 00:09:09,599
what exactly how it works

202
00:09:06,840 --> 00:09:13,080
so broadly<font color="#CCCCCC"> it's a two-stage process</font><font color="#E5E5E5"> or</font>

203
00:09:09,600 --> 00:09:14,580
how we call phases<font color="#E5E5E5"> so first before the</font>

204
00:09:13,080 --> 00:09:16,470
real<font color="#E5E5E5"> work we want</font><font color="#CCCCCC"> to do is we want to</font>

205
00:09:14,580 --> 00:09:18,900
<font color="#CCCCCC">make sure</font><font color="#E5E5E5"> that we are forwarding every</font>

206
00:09:16,470 --> 00:09:21,510
prefix that<font color="#E5E5E5"> can get from upstream</font>

207
00:09:18,900 --> 00:09:22,800
<font color="#CCCCCC">towards the correct downstream node</font><font color="#E5E5E5"> but</font>

208
00:09:21,510 --> 00:09:25,470
before<font color="#E5E5E5"> doing that we</font><font color="#CCCCCC"> want to make sure</font>

209
00:09:22,800 --> 00:09:27,479
<font color="#E5E5E5">that all or links are forwarding traffic</font>

210
00:09:25,470 --> 00:09:29,370
correctly it's not<font color="#CCCCCC"> the one let's say if</font>

211
00:09:27,480 --> 00:09:31,830
one<font color="#E5E5E5"> of the links is broken</font><font color="#CCCCCC"> then we'll</font>

212
00:09:29,370 --> 00:09:33,690
see the same breakage across all

213
00:09:31,830 --> 00:09:35,279
prefixes and we may think<font color="#E5E5E5"> that it's a</font>

214
00:09:33,690 --> 00:09:37,680
issue<font color="#CCCCCC"> with the previous when it's</font><font color="#E5E5E5"> really</font>

215
00:09:35,279 --> 00:09:40,410
a link issue so we addresses using

216
00:09:37,680 --> 00:09:42,239
adjacency validation<font color="#E5E5E5"> and once we have</font>

217
00:09:40,410 --> 00:09:44,850
that<font color="#E5E5E5"> one then it will also use it as a</font>

218
00:09:42,240 --> 00:09:49,440
<font color="#CCCCCC">building block</font><font color="#E5E5E5"> for or prefix validation</font>

219
00:09:44,850 --> 00:09:51,839
phase so here adjacency validation the

220
00:09:49,440 --> 00:09:53,400
basically<font color="#E5E5E5"> idea is that you want</font><font color="#CCCCCC"> to make</font>

221
00:09:51,839 --> 00:09:56,100
<font color="#CCCCCC">sure that you are able to send and</font>

222
00:09:53,400 --> 00:09:58,230
receive traffic correctly to each one<font color="#E5E5E5"> of</font>

223
00:09:56,100 --> 00:10:01,950
your neighbors<font color="#E5E5E5"> so here let's assume</font><font color="#CCCCCC"> that</font>

224
00:09:58,230 --> 00:10:04,260
we have this topology again so we<font color="#E5E5E5"> are</font>

225
00:10:01,950 --> 00:10:06,870
working on<font color="#E5E5E5"> node</font><font color="#CCCCCC"> three that is</font><font color="#E5E5E5"> only</font><font color="#CCCCCC"> Road</font>

226
00:10:04,260 --> 00:10:09,029
only<font color="#CCCCCC"> node</font><font color="#E5E5E5"> that is running TPM no other</font>

227
00:10:06,870 --> 00:10:12,270
device in the network<font color="#E5E5E5"> is running DPM</font>

228
00:10:09,029 --> 00:10:14,910
right now so in this case it has<font color="#E5E5E5"> links</font>

229
00:10:12,270 --> 00:10:16,260
to neighbors<font color="#CCCCCC"> one two five</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> six and</font>

230
00:10:14,910 --> 00:10:17,790
<font color="#E5E5E5">right now I'm showing all these single</font>

231
00:10:16,260 --> 00:10:20,970
links but of course you could have<font color="#E5E5E5"> ecmp</font>

232
00:10:17,790 --> 00:10:24,150
there as well on these nodes<font color="#E5E5E5"> so for each</font>

233
00:10:20,970 --> 00:10:26,100
neighboring<font color="#E5E5E5"> link node</font><font color="#CCCCCC"> three will</font>

234
00:10:24,150 --> 00:10:28,740
construct an<font color="#CCCCCC"> equal</font><font color="#E5E5E5"> request packet that</font>

235
00:10:26,100 --> 00:10:32,520
goes<font color="#CCCCCC"> to the neighbor</font><font color="#E5E5E5"> and then comes back</font>

236
00:10:28,740 --> 00:10:34,320
<font color="#E5E5E5">on the same link it will just transit to</font>

237
00:10:32,520 --> 00:10:36,900
the<font color="#E5E5E5"> neighbor it will not get</font><font color="#CCCCCC"> punted on</font>

238
00:10:34,320 --> 00:10:38,280
the<font color="#CCCCCC"> Box the Box</font><font color="#E5E5E5"> doesn't need to any</font><font color="#CCCCCC"> of</font>

239
00:10:36,900 --> 00:10:40,620
the<font color="#CCCCCC"> neighboring path</font><font color="#E5E5E5"> doesn't need to do</font>

240
00:10:38,280 --> 00:10:42,480
any software processing there it will

241
00:10:40,620 --> 00:10:42,839
<font color="#E5E5E5">just simply switch</font><font color="#CCCCCC"> the packet back to</font>

242
00:10:42,480 --> 00:10:45,360
you

243
00:10:42,839 --> 00:10:48,210
and then once we receive<font color="#CCCCCC"> the package we</font>

244
00:10:45,360 --> 00:10:50,339
<font color="#CCCCCC">can validate if we</font><font color="#E5E5E5"> were then kind target</font>

245
00:10:48,210 --> 00:10:53,190
so in this case for<font color="#CCCCCC"> example we have</font>

246
00:10:50,339 --> 00:10:55,980
<font color="#E5E5E5">adjacency</font><font color="#CCCCCC"> state label first one two four</font>

247
00:10:53,190 --> 00:11:00,000
zero three<font color="#CCCCCC"> one</font><font color="#E5E5E5"> to take it from node 3</font><font color="#CCCCCC"> 2</font>

248
00:10:55,980 --> 00:11:04,350
1 and then 1 2 4 0<font color="#CCCCCC"> 1 3 we'll bring</font><font color="#E5E5E5"> it</font>

249
00:11:00,000 --> 00:11:05,850
<font color="#CCCCCC">back from</font><font color="#E5E5E5"> 1 2</font><font color="#CCCCCC"> 3 so if we receive the</font>

250
00:11:04,350 --> 00:11:07,650
packet back<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cash back you will have</font>

251
00:11:05,850 --> 00:11:09,660
<font color="#E5E5E5">enough information coordinate will now</font>

252
00:11:07,650 --> 00:11:11,819
<font color="#CCCCCC">that we are then kind target and we</font>

253
00:11:09,660 --> 00:11:14,790
received<font color="#E5E5E5"> it on the correct link let's</font>

254
00:11:11,820 --> 00:11:16,650
<font color="#E5E5E5">say packet end up on node 4 then</font><font color="#CCCCCC"> we will</font>

255
00:11:14,790 --> 00:11:19,280
receive a fault<font color="#CCCCCC"> this link is not</font>

256
00:11:16,650 --> 00:11:19,280
<font color="#E5E5E5">functioning correctly</font>

257
00:11:19,339 --> 00:11:24,360
we can do<font color="#E5E5E5"> this for the remaining links</font>

258
00:11:22,649 --> 00:11:26,910
as well<font color="#CCCCCC"> so we did it for</font><font color="#E5E5E5"> note</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> now we</font>

259
00:11:24,360 --> 00:11:29,339
can do the same thing for<font color="#CCCCCC"> note 5 using</font>

260
00:11:26,910 --> 00:11:34,949
its own<font color="#CCCCCC"> adjust senses</font><font color="#E5E5E5"> read labels</font><font color="#CCCCCC"> to and</font>

261
00:11:29,339 --> 00:11:37,290
from<font color="#CCCCCC"> for node 6 and then</font><font color="#E5E5E5"> node 2 so once</font>

262
00:11:34,950 --> 00:11:39,450
we have<font color="#CCCCCC"> that one in this case we know</font>

263
00:11:37,290 --> 00:11:41,610
that<font color="#E5E5E5"> all</font><font color="#CCCCCC"> our links are functioning</font>

264
00:11:39,450 --> 00:11:43,529
<font color="#CCCCCC">correctly and again I'm gonna add trait</font>

265
00:11:41,610 --> 00:11:44,760
that<font color="#E5E5E5"> there's no software processing</font>

266
00:11:43,529 --> 00:11:46,050
involved in the neighboring device

267
00:11:44,760 --> 00:11:48,569
<font color="#CCCCCC">they're just gonna</font><font color="#E5E5E5"> switch the packet</font>

268
00:11:46,050 --> 00:11:50,819
back to the<font color="#CCCCCC"> D UT in this case node 3</font>

269
00:11:48,570 --> 00:11:54,930
node 3 is<font color="#E5E5E5"> only one which is sending and</font>

270
00:11:50,820 --> 00:11:57,570
receiving probes so in once we have that

271
00:11:54,930 --> 00:11:59,760
<font color="#E5E5E5">one</font><font color="#CCCCCC"> then we</font><font color="#E5E5E5"> can identify if there's any</font>

272
00:11:57,570 --> 00:12:01,200
malfunctioning<font color="#E5E5E5"> link so malfunction could</font>

273
00:11:59,760 --> 00:12:03,950
be that maybe the link is dropping

274
00:12:01,200 --> 00:12:06,209
traffic<font color="#E5E5E5"> it could be that it is</font>

275
00:12:03,950 --> 00:12:08,220
<font color="#E5E5E5">forwarding the traffic either like the</font>

276
00:12:06,209 --> 00:12:09,949
<font color="#E5E5E5">duty or the neighboring device it</font><font color="#CCCCCC"> is</font>

277
00:12:08,220 --> 00:12:13,050
sending it towards<font color="#CCCCCC"> ingrate link or</font>

278
00:12:09,950 --> 00:12:15,240
incorrect device entirely<font color="#E5E5E5"> so we can't</font>

279
00:12:13,050 --> 00:12:16,740
<font color="#E5E5E5">use if there's any malfunction</font><font color="#CCCCCC"> we can't</font>

280
00:12:15,240 --> 00:12:20,540
<font color="#E5E5E5">use</font><font color="#CCCCCC"> that particular</font><font color="#E5E5E5"> link</font>

281
00:12:16,740 --> 00:12:25,260
<font color="#CCCCCC">we'll have to exclude it from or further</font>

282
00:12:20,540 --> 00:12:27,899
validations<font color="#CCCCCC"> and also we use this as a</font>

283
00:12:25,260 --> 00:12:32,459
<font color="#E5E5E5">building</font><font color="#CCCCCC"> block for</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> next phase</font><font color="#E5E5E5"> as</font>

284
00:12:27,899 --> 00:12:34,320
you'll see so prefix validation is what

285
00:12:32,459 --> 00:12:36,810
we really are<font color="#E5E5E5"> interested in we want to</font>

286
00:12:34,320 --> 00:12:39,260
make<font color="#CCCCCC"> sure that we are able to send and</font>

287
00:12:36,810 --> 00:12:41,880
receive<font color="#E5E5E5"> traffic from any upstream</font>

288
00:12:39,260 --> 00:12:43,620
towards<font color="#E5E5E5"> any of our dancing neighbor for</font>

289
00:12:41,880 --> 00:12:47,070
that prefix<font color="#CCCCCC"> ID and we want to do it for</font>

290
00:12:43,620 --> 00:12:48,720
every prefix<font color="#E5E5E5"> said in the network and we</font>

291
00:12:47,070 --> 00:12:49,860
achieve it by looping the traffic

292
00:12:48,720 --> 00:12:51,300
<font color="#E5E5E5">because we want to simulate customer</font>

293
00:12:49,860 --> 00:12:53,010
traffic<font color="#CCCCCC"> path we don't want to just</font>

294
00:12:51,300 --> 00:12:54,750
<font color="#E5E5E5">generate a probe locally from our PA</font>

295
00:12:53,010 --> 00:12:56,810
send it out of<font color="#E5E5E5"> a line card because then</font>

296
00:12:54,750 --> 00:12:59,100
customer<font color="#CCCCCC"> traffic doesn't</font><font color="#E5E5E5"> take that path</font>

297
00:12:56,810 --> 00:13:01,709
customer traffic<font color="#E5E5E5"> comes on an ingress</font>

298
00:12:59,100 --> 00:13:03,360
line card and then goes out we<font color="#CCCCCC"> have the</font>

299
00:13:01,709 --> 00:13:05,729
egress line card and we want to model

300
00:13:03,360 --> 00:13:07,200
<font color="#E5E5E5">that customer traffic path so we do this</font>

301
00:13:05,730 --> 00:13:09,149
<font color="#E5E5E5">by looping the traffic using the</font>

302
00:13:07,200 --> 00:13:12,959
<font color="#E5E5E5">adjacency label we just just discussed</font>

303
00:13:09,149 --> 00:13:15,660
and then using this looping<font color="#E5E5E5"> we can</font>

304
00:13:12,959 --> 00:13:17,250
actually<font color="#CCCCCC"> get</font><font color="#E5E5E5"> the packet back on the</font>

305
00:13:15,660 --> 00:13:18,810
device and<font color="#E5E5E5"> then we have a prefix</font><font color="#CCCCCC"> ID</font>

306
00:13:17,250 --> 00:13:21,510
label<font color="#CCCCCC"> once we</font><font color="#E5E5E5"> receive the packet the</font>

307
00:13:18,810 --> 00:13:22,680
<font color="#CCCCCC">next table</font><font color="#E5E5E5"> will be</font><font color="#CCCCCC"> prefix</font><font color="#E5E5E5"> it label which</font>

308
00:13:21,510 --> 00:13:25,829
<font color="#E5E5E5">will take it</font><font color="#CCCCCC"> towards one of</font><font color="#E5E5E5"> the</font>

309
00:13:22,680 --> 00:13:29,339
<font color="#E5E5E5">downstream devices</font><font color="#CCCCCC"> so now for any let's</font>

310
00:13:25,829 --> 00:13:31,189
say like we<font color="#E5E5E5"> have our D</font><font color="#CCCCCC"> UT 3 4 we can do</font>

311
00:13:29,339 --> 00:13:33,410
the we can identify the upstream

312
00:13:31,190 --> 00:13:35,449
and the downstream link<font color="#E5E5E5"> for any prefix</font>

313
00:13:33,410 --> 00:13:38,060
<font color="#E5E5E5">it and if one of them is malfunctioning</font>

314
00:13:35,449 --> 00:13:40,008
<font color="#CCCCCC">we can exclude</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> in this case we</font>

315
00:13:38,060 --> 00:13:42,619
for any prefix it will go through<font color="#E5E5E5"> this</font>

316
00:13:40,009 --> 00:13:46,370
process<font color="#E5E5E5"> so here we have for each</font>

317
00:13:42,620 --> 00:13:49,100
upstream and downstream combination the

318
00:13:46,370 --> 00:13:52,069
<font color="#E5E5E5">D</font><font color="#CCCCCC"> UT in this case the device hundred s</font>

319
00:13:49,100 --> 00:13:54,079
node<font color="#E5E5E5"> three it will build a packet and</font>

320
00:13:52,069 --> 00:13:57,290
press echo request packet because<font color="#E5E5E5"> that's</font>

321
00:13:54,079 --> 00:14:00,589
what we<font color="#CCCCCC"> used for this one that will go</font>

322
00:13:57,290 --> 00:14:03,050
to our<font color="#E5E5E5"> upstream neighbor comes back to</font>

323
00:14:00,589 --> 00:14:05,389
<font color="#E5E5E5">us and then expires at a</font><font color="#CCCCCC"> mediate</font>

324
00:14:03,050 --> 00:14:08,060
downstream neighbor and we do<font color="#E5E5E5"> we can set</font>

325
00:14:05,389 --> 00:14:11,449
the TTL<font color="#CCCCCC"> to</font><font color="#E5E5E5"> three to make sure that way</font>

326
00:14:08,060 --> 00:14:13,790
the packet doesn't go beyond one half we

327
00:14:11,449 --> 00:14:16,310
just<font color="#CCCCCC"> go</font><font color="#E5E5E5"> one stream one half up and then</font>

328
00:14:13,790 --> 00:14:18,110
one half down and that way we<font color="#CCCCCC"> are just</font>

329
00:14:16,310 --> 00:14:20,359
<font color="#E5E5E5">limited in this one we don't have to</font>

330
00:14:18,110 --> 00:14:24,709
worry<font color="#E5E5E5"> about the scalability challenges</font>

331
00:14:20,360 --> 00:14:26,329
of<font color="#E5E5E5"> end-to-end mechanisms and then we</font>

332
00:14:24,709 --> 00:14:28,819
have the prefix<font color="#CCCCCC"> available because</font><font color="#E5E5E5"> then</font>

333
00:14:26,329 --> 00:14:30,739
the packet comes back at<font color="#E5E5E5"> the D</font><font color="#CCCCCC"> u T node</font>

334
00:14:28,819 --> 00:14:32,240
<font color="#CCCCCC">three it will only have prefix</font><font color="#E5E5E5"> with</font>

335
00:14:30,740 --> 00:14:34,069
label the adjacency labels would<font color="#E5E5E5"> have</font>

336
00:14:32,240 --> 00:14:36,079
been<font color="#CCCCCC"> popped so in a way customer traffic</font>

337
00:14:34,069 --> 00:14:37,880
<font color="#E5E5E5">as well will have the same label so we</font>

338
00:14:36,079 --> 00:14:41,810
are forwarding exactly like any customer

339
00:14:37,880 --> 00:14:45,110
traffic<font color="#CCCCCC"> would and because we could have</font>

340
00:14:41,810 --> 00:14:46,880
multiple ICMP here we have two ECM<font color="#CCCCCC"> PS so</font>

341
00:14:45,110 --> 00:14:50,630
we want to make<font color="#CCCCCC"> sure that we can test</font>

342
00:14:46,880 --> 00:14:53,720
each<font color="#E5E5E5"> one</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> correct separately so</font>

343
00:14:50,630 --> 00:14:55,370
LS shipping has 127<font color="#E5E5E5"> /a destination</font>

344
00:14:53,720 --> 00:14:57,230
addresses and we can play around<font color="#E5E5E5"> with</font>

345
00:14:55,370 --> 00:15:00,829
the entropy<font color="#E5E5E5"> to make sure that we can</font>

346
00:14:57,230 --> 00:15:02,300
test<font color="#E5E5E5"> each one</font><font color="#CCCCCC"> of them correctly</font><font color="#E5E5E5"> and once</font>

347
00:15:00,829 --> 00:15:03,800
we send it out<font color="#CCCCCC"> to the correct</font><font color="#E5E5E5"> downstream</font>

348
00:15:02,300 --> 00:15:05,959
we want to make sure<font color="#E5E5E5"> that it reaches</font>

349
00:15:03,800 --> 00:15:07,519
there let's say like if hardware and

350
00:15:05,959 --> 00:15:09,680
software out of<font color="#CCCCCC"> thing we thought we</font><font color="#E5E5E5"> are</font>

351
00:15:07,519 --> 00:15:11,060
sending<font color="#E5E5E5"> it towards node</font><font color="#CCCCCC"> five but it ends</font>

352
00:15:09,680 --> 00:15:13,819
up<font color="#CCCCCC"> at node six we can</font><font color="#E5E5E5"> detect that</font>

353
00:15:11,060 --> 00:15:15,768
<font color="#CCCCCC">scenario</font><font color="#E5E5E5"> so we include enough</font>

354
00:15:13,819 --> 00:15:18,559
<font color="#CCCCCC">information in the Eco request packet</font>

355
00:15:15,769 --> 00:15:20,360
<font color="#E5E5E5">then we can do that so we include the ID</font>

356
00:15:18,559 --> 00:15:23,180
of<font color="#CCCCCC"> the destination that we are</font><font color="#E5E5E5"> trying to</font>

357
00:15:20,360 --> 00:15:24,980
reach and then the<font color="#CCCCCC"> information about the</font>

358
00:15:23,180 --> 00:15:28,609
label stack that should be<font color="#E5E5E5"> expected at</font>

359
00:15:24,980 --> 00:15:29,930
the next half the in the interface<font color="#E5E5E5"> on</font>

360
00:15:28,610 --> 00:15:33,079
which<font color="#E5E5E5"> the next up should receive the</font>

361
00:15:29,930 --> 00:15:36,138
packet and<font color="#E5E5E5"> of course the next hop ID so</font>

362
00:15:33,079 --> 00:15:38,000
we send this packet out<font color="#E5E5E5"> it reaches the</font>

363
00:15:36,139 --> 00:15:40,250
downstream device and then downstream

364
00:15:38,000 --> 00:15:42,319
can make sure that it has a<font color="#CCCCCC"> labeled path</font>

365
00:15:40,250 --> 00:15:45,449
to reach<font color="#E5E5E5"> the destination here our</font>

366
00:15:42,319 --> 00:15:47,549
destination is<font color="#CCCCCC"> seven so</font>

367
00:15:45,449 --> 00:15:49,738
note<font color="#CCCCCC"> five can make sure that it has a</font>

368
00:15:47,549 --> 00:15:53,579
path to<font color="#CCCCCC"> reach</font><font color="#E5E5E5"> the destination seven and</font>

369
00:15:49,739 --> 00:15:55,199
that path<font color="#CCCCCC"> is labeled</font><font color="#E5E5E5"> and then it can</font>

370
00:15:53,579 --> 00:15:57,299
<font color="#E5E5E5">also make sure that it was the intended</font>

371
00:15:55,199 --> 00:15:59,040
<font color="#CCCCCC">destination we didn't mean to</font><font color="#E5E5E5"> send up a</font>

372
00:15:57,299 --> 00:16:01,829
key to<font color="#CCCCCC"> node</font><font color="#E5E5E5"> six and it somehow ended up</font>

373
00:15:59,040 --> 00:16:04,949
at node 5 and it was received<font color="#E5E5E5"> on the</font>

374
00:16:01,829 --> 00:16:07,439
correct link and this information<font color="#E5E5E5"> along</font>

375
00:16:04,949 --> 00:16:10,589
with<font color="#CCCCCC"> the information of the next hop</font>

376
00:16:07,439 --> 00:16:12,689
from node<font color="#E5E5E5"> five is sent back towards</font>

377
00:16:10,589 --> 00:16:14,759
three in<font color="#CCCCCC"> our</font><font color="#E5E5E5"> echo reply so this is</font>

378
00:16:12,689 --> 00:16:17,069
<font color="#E5E5E5">standard echo reply here</font><font color="#CCCCCC"> nor</font><font color="#E5E5E5"> three is</font>

379
00:16:14,759 --> 00:16:19,319
not running DPM it's not even DPM aware

380
00:16:17,069 --> 00:16:20,998
from its<font color="#E5E5E5"> perspective it</font><font color="#CCCCCC"> just received</font>

381
00:16:19,319 --> 00:16:24,929
the echo request packet and it is just

382
00:16:20,999 --> 00:16:27,359
replying to that echo request so it

383
00:16:24,929 --> 00:16:29,790
could<font color="#CCCCCC"> be a non</font><font color="#E5E5E5"> Cisco box it could be</font>

384
00:16:27,359 --> 00:16:31,679
<font color="#E5E5E5">running an older version it should it</font>

385
00:16:29,790 --> 00:16:35,879
that is<font color="#E5E5E5"> that makes it that's the beauty</font>

386
00:16:31,679 --> 00:16:38,579
of it<font color="#CCCCCC"> it's interoperable</font><font color="#E5E5E5"> by design so</font>

387
00:16:35,879 --> 00:16:40,410
once we receive that<font color="#E5E5E5"> reply we can make</font>

388
00:16:38,579 --> 00:16:42,508
sure<font color="#CCCCCC"> okay if there was any fault</font><font color="#E5E5E5"> then we</font>

389
00:16:40,410 --> 00:16:45,480
can alert<font color="#CCCCCC"> the operator that for</font><font color="#E5E5E5"> this</font>

390
00:16:42,509 --> 00:16:47,759
<font color="#E5E5E5">particular combination we are seeing an</font>

391
00:16:45,480 --> 00:16:49,649
issue you may want<font color="#CCCCCC"> to monitor and we</font><font color="#E5E5E5"> go</font>

392
00:16:47,759 --> 00:16:52,410
so I<font color="#E5E5E5"> will talk about remediation as well</font>

393
00:16:49,649 --> 00:16:54,600
that's<font color="#CCCCCC"> also</font><font color="#E5E5E5"> possible</font><font color="#CCCCCC"> and then we can go</font>

394
00:16:52,410 --> 00:16:57,419
on<font color="#CCCCCC"> to test the remaining combinations so</font>

395
00:16:54,600 --> 00:16:58,919
here for the same downstream<font color="#E5E5E5"> five the</font>

396
00:16:57,419 --> 00:17:01,799
traffic could potentially come from the

397
00:16:58,919 --> 00:17:04,349
other upstream as<font color="#CCCCCC"> well and similarly</font><font color="#E5E5E5"> we</font>

398
00:17:01,799 --> 00:17:05,730
can test it for the downstream six<font color="#E5E5E5"> for</font>

399
00:17:04,349 --> 00:17:09,480
combinations and then four remaining

400
00:17:05,730 --> 00:17:12,120
prefixes as well so that way we can<font color="#E5E5E5"> test</font>

401
00:17:09,480 --> 00:17:14,370
each upstream and downstream combination

402
00:17:12,119 --> 00:17:17,898
for any<font color="#E5E5E5"> prefix set in the network so I</font>

403
00:17:14,369 --> 00:17:17,898
<font color="#E5E5E5">don't just describe it</font><font color="#CCCCCC"> for node</font><font color="#E5E5E5"> seven</font>

404
00:17:17,990 --> 00:17:26,279
okay so as<font color="#CCCCCC"> we saw we are not going</font>

405
00:17:22,289 --> 00:17:28,649
beyond<font color="#E5E5E5"> one half so in this case each</font>

406
00:17:26,279 --> 00:17:31,490
node<font color="#E5E5E5"> just takes the packet</font><font color="#CCCCCC"> to upstream</font>

407
00:17:28,649 --> 00:17:34,350
<font color="#CCCCCC">and then downstream not beyond</font><font color="#E5E5E5"> that one</font>

408
00:17:31,490 --> 00:17:36,120
so it<font color="#E5E5E5"> will detect any forwarding because</font>

409
00:17:34,350 --> 00:17:39,928
we are<font color="#CCCCCC"> exercising entire forwarding</font>

410
00:17:36,120 --> 00:17:41,428
chain at D u T so<font color="#CCCCCC"> if there's any</font>

411
00:17:39,929 --> 00:17:44,010
forwarding<font color="#E5E5E5"> issue for the particular</font>

412
00:17:41,429 --> 00:17:46,830
prefix said we will detect that prefix

413
00:17:44,010 --> 00:17:49,379
<font color="#E5E5E5">that will detect</font><font color="#CCCCCC"> that issue</font><font color="#E5E5E5"> regardless</font>

414
00:17:46,830 --> 00:17:52,350
of upstream<font color="#E5E5E5"> or downstream</font><font color="#CCCCCC"> neighbor that</font>

415
00:17:49,380 --> 00:17:55,139
<font color="#E5E5E5">we have and it can detect</font>

416
00:17:52,350 --> 00:17:56,519
<font color="#E5E5E5">also detect most forwarding issues at or</font>

417
00:17:55,139 --> 00:17:58,908
neighbors<font color="#CCCCCC"> arrow down from neighbors for</font>

418
00:17:56,519 --> 00:18:02,299
example if downstream does not

419
00:17:58,909 --> 00:18:04,279
<font color="#E5E5E5">nice that prefix</font><font color="#CCCCCC"> head label it doesn't</font>

420
00:18:02,299 --> 00:18:06,080
have a path<font color="#CCCCCC"> onward so it receives a</font>

421
00:18:04,279 --> 00:18:09,109
packet little bit label but it cannot

422
00:18:06,080 --> 00:18:10,728
send<font color="#E5E5E5"> further with the label it can</font>

423
00:18:09,109 --> 00:18:13,249
<font color="#E5E5E5">assign it unlabeled we can detect that</font>

424
00:18:10,729 --> 00:18:17,059
kind<font color="#CCCCCC"> of scenarios as well but if there's</font>

425
00:18:13,249 --> 00:18:18,830
anything beyond<font color="#CCCCCC"> 1/2 in this case</font><font color="#E5E5E5"> 7 or 8</font>

426
00:18:17,059 --> 00:18:21,379
or<font color="#E5E5E5"> 4 they are not our immediate</font>

427
00:18:18,830 --> 00:18:24,019
<font color="#E5E5E5">neighbors</font><font color="#CCCCCC"> so of</font><font color="#E5E5E5"> course we are not</font>

428
00:18:21,379 --> 00:18:27,859
<font color="#E5E5E5">sending any probe to them so we will not</font>

429
00:18:24,019 --> 00:18:29,539
detect<font color="#E5E5E5"> first there but DPM is meant to</font>

430
00:18:27,859 --> 00:18:31,820
be deployed throughout<font color="#E5E5E5"> it's a</font>

431
00:18:29,539 --> 00:18:33,379
distributed<font color="#CCCCCC"> detection mechanism</font><font color="#E5E5E5"> so</font>

432
00:18:31,820 --> 00:18:35,509
instead of deploying on a single node

433
00:18:33,379 --> 00:18:37,879
and trying to test entire network

434
00:18:35,509 --> 00:18:39,499
<font color="#E5E5E5">instead you can offer the world</font><font color="#CCCCCC"> two</font>

435
00:18:37,879 --> 00:18:42,408
<font color="#E5E5E5">different devices so</font><font color="#CCCCCC"> you can deploy DPM</font>

436
00:18:39,499 --> 00:18:44,509
at strategic nodes in the network to

437
00:18:42,409 --> 00:18:49,129
<font color="#E5E5E5">make sure you have a good coverage in</font>

438
00:18:44,509 --> 00:18:52,039
the network and of course you want to

439
00:18:49,129 --> 00:18:54,349
<font color="#CCCCCC">make sure that operator gets a</font><font color="#E5E5E5"> really</font>

440
00:18:52,039 --> 00:18:55,820
good fault<font color="#CCCCCC"> it can better</font><font color="#E5E5E5"> get a</font><font color="#CCCCCC"> false</font>

441
00:18:54,349 --> 00:18:58,399
<font color="#E5E5E5">notification message and that</font>

442
00:18:55,820 --> 00:18:59,178
notification<font color="#E5E5E5"> message is infirmity</font><font color="#CCCCCC"> and</font>

443
00:18:58,399 --> 00:19:03,168
accurate

444
00:18:59,179 --> 00:19:05,809
so when DPM detects a fault<font color="#E5E5E5"> it will</font>

445
00:19:03,169 --> 00:19:08,269
alert operator<font color="#E5E5E5"> it could be through a</font>

446
00:19:05,809 --> 00:19:10,759
message on the box<font color="#E5E5E5"> or it could be</font>

447
00:19:08,269 --> 00:19:12,320
through telemetry mechanism but<font color="#E5E5E5"> in it</font>

448
00:19:10,759 --> 00:19:15,919
will notify<font color="#E5E5E5"> it and that notification</font>

449
00:19:12,320 --> 00:19:18,049
<font color="#E5E5E5">will contain the information of the</font>

450
00:19:15,919 --> 00:19:20,779
fault<font color="#E5E5E5"> it will include the links that are</font>

451
00:19:18,049 --> 00:19:23,179
involved<font color="#E5E5E5"> the prefix the prefix</font><font color="#CCCCCC"> and label</font>

452
00:19:20,779 --> 00:19:24,950
as well<font color="#CCCCCC"> as a brief error description of</font>

453
00:19:23,179 --> 00:19:27,049
what really went wrong<font color="#E5E5E5"> so you can take</font>

454
00:19:24,950 --> 00:19:28,849
and we can also have a remediation

455
00:19:27,049 --> 00:19:30,559
action because once we<font color="#E5E5E5"> know all this</font>

456
00:19:28,849 --> 00:19:34,158
<font color="#CCCCCC">information we have effectively</font><font color="#E5E5E5"> isolated</font>

457
00:19:30,559 --> 00:19:36,979
the fault<font color="#E5E5E5"> in the device we know what's</font>

458
00:19:34,159 --> 00:19:39,590
going<font color="#E5E5E5"> on what's</font><font color="#CCCCCC"> going wrong with</font><font color="#E5E5E5"> which</font>

459
00:19:36,979 --> 00:19:41,379
prefix<font color="#CCCCCC"> what are the nodes and what are</font>

460
00:19:39,590 --> 00:19:43,970
the links involved in this one and then

461
00:19:41,379 --> 00:19:45,799
<font color="#CCCCCC">based on the</font><font color="#E5E5E5"> error description</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can</font>

462
00:19:43,970 --> 00:19:48,349
now the<font color="#E5E5E5"> rack</font><font color="#CCCCCC"> of what particular message</font>

463
00:19:45,799 --> 00:19:51,349
maybe it's an unlabeled packet<font color="#E5E5E5"> maybe in</font>

464
00:19:48,349 --> 00:19:52,729
<font color="#E5E5E5">this</font><font color="#CCCCCC"> case the</font><font color="#E5E5E5"> next hop is not being</font>

465
00:19:51,349 --> 00:19:56,090
shown correctly maybe one of<font color="#CCCCCC"> the devices</font>

466
00:19:52,729 --> 00:19:58,779
<font color="#E5E5E5">running slow</font><font color="#CCCCCC"> so we can take a demolition</font>

467
00:19:56,090 --> 00:20:01,189
<font color="#CCCCCC">action let us say read out the</font><font color="#E5E5E5"> traffic</font>

468
00:19:58,779 --> 00:20:05,570
reinstall the forwarding<font color="#E5E5E5"> and</font><font color="#CCCCCC"> three etc</font>

469
00:20:01,190 --> 00:20:07,370
and then we<font color="#CCCCCC"> will try to avoid fault as</font>

470
00:20:05,570 --> 00:20:10,639
well

471
00:20:07,370 --> 00:20:14,959
<font color="#E5E5E5">okay so so</font><font color="#CCCCCC"> far I have discussed this</font>

472
00:20:10,640 --> 00:20:17,530
<font color="#E5E5E5">mechanism as proactive</font><font color="#CCCCCC"> where it is</font>

473
00:20:14,960 --> 00:20:21,590
constantly running in the background and

474
00:20:17,530 --> 00:20:23,450
then detecting faults<font color="#E5E5E5"> but we want to be</font>

475
00:20:21,590 --> 00:20:26,600
flexible<font color="#CCCCCC"> we know that some operators</font>

476
00:20:23,450 --> 00:20:28,520
<font color="#CCCCCC">maybe they're running some their own</font>

477
00:20:26,600 --> 00:20:32,060
probes at a very high rate and they

478
00:20:28,520 --> 00:20:33,760
don't want<font color="#E5E5E5"> to run DPM very very fast</font>

479
00:20:32,060 --> 00:20:35,780
rate instead<font color="#E5E5E5"> they</font><font color="#CCCCCC"> may want to run slowly</font>

480
00:20:33,760 --> 00:20:37,520
<font color="#CCCCCC">overall but then based on certain</font>

481
00:20:35,780 --> 00:20:39,740
<font color="#CCCCCC">Network event maybe</font><font color="#E5E5E5"> they want to just</font>

482
00:20:37,520 --> 00:20:42,290
test a particular prefix is installed

483
00:20:39,740 --> 00:20:44,630
correctly<font color="#E5E5E5"> across all the line cards</font>

484
00:20:42,290 --> 00:20:46,040
<font color="#E5E5E5">across all the links so you can test a</font>

485
00:20:44,630 --> 00:20:48,740
single<font color="#E5E5E5"> prefix as you can test all</font>

486
00:20:46,040 --> 00:20:51,110
prefixes or<font color="#CCCCCC"> maybe you want to</font><font color="#E5E5E5"> do it</font>

487
00:20:48,740 --> 00:20:53,630
based on<font color="#CCCCCC"> certain Network event because</font>

488
00:20:51,110 --> 00:20:57,770
typically faults<font color="#E5E5E5"> don't occur in steady</font>

489
00:20:53,630 --> 00:20:59,600
States<font color="#E5E5E5"> maybe a link went down some new</font>

490
00:20:57,770 --> 00:21:02,300
link our device got added so now you

491
00:20:59,600 --> 00:21:04,820
have forwarding updates your<font color="#CCCCCC"> IGP</font>

492
00:21:02,300 --> 00:21:07,909
converged<font color="#E5E5E5"> it's going to install a bunch</font>

493
00:21:04,820 --> 00:21:11,300
<font color="#E5E5E5">of forwarding updates on the control</font>

494
00:21:07,910 --> 00:21:12,920
plane<font color="#E5E5E5"> to Hardware path and it</font><font color="#CCCCCC"> that's</font>

495
00:21:11,300 --> 00:21:14,389
<font color="#CCCCCC">where in this sequence you are doing</font>

496
00:21:12,920 --> 00:21:16,100
<font color="#CCCCCC">this installation</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you're installing</font>

497
00:21:14,390 --> 00:21:18,500
<font color="#E5E5E5">these forwarding updates that's where</font>

498
00:21:16,100 --> 00:21:21,560
you can potentially<font color="#E5E5E5"> cause issues where</font>

499
00:21:18,500 --> 00:21:23,770
it is<font color="#E5E5E5"> then if</font><font color="#CCCCCC"> there is any bar</font><font color="#E5E5E5"> or maybe</font>

500
00:21:21,560 --> 00:21:26,120
<font color="#CCCCCC">one of the line cards is slow so it</font>

501
00:21:23,770 --> 00:21:29,450
didn't get updates<font color="#CCCCCC"> is running</font><font color="#E5E5E5"> stale</font>

502
00:21:26,120 --> 00:21:32,510
version then when you have these kind<font color="#CCCCCC"> of</font>

503
00:21:29,450 --> 00:21:36,590
triggers<font color="#E5E5E5"> in this case it could be a link</font>

504
00:21:32,510 --> 00:21:38,660
<font color="#E5E5E5">going down or alert from</font><font color="#CCCCCC"> IGP</font><font color="#E5E5E5"> that it's</font>

505
00:21:36,590 --> 00:21:40,459
converged<font color="#CCCCCC"> there's no further update for</font>

506
00:21:38,660 --> 00:21:43,190
<font color="#CCCCCC">let's say certain amount of time then</font>

507
00:21:40,460 --> 00:21:44,840
<font color="#E5E5E5">you can run DPM to make sure that all</font>

508
00:21:43,190 --> 00:21:47,450
the forwarding entries are installed

509
00:21:44,840 --> 00:21:49,370
correctly<font color="#E5E5E5"> it could even be a controller</font>

510
00:21:47,450 --> 00:21:51,680
driven trick<font color="#CCCCCC"> so we can let operator now</font>

511
00:21:49,370 --> 00:21:54,620
<font color="#CCCCCC">okay whenever they send a particular</font>

512
00:21:51,680 --> 00:21:57,320
trigger<font color="#E5E5E5"> then we can monitor a particular</font>

513
00:21:54,620 --> 00:22:05,750
set of<font color="#E5E5E5"> or all the prefixes in the</font>

514
00:21:57,320 --> 00:22:09,860
network<font color="#CCCCCC"> so in conclusion we believe that</font>

515
00:22:05,750 --> 00:22:13,340
DPM<font color="#E5E5E5"> is innovative solution to</font><font color="#CCCCCC"> deco</font>

516
00:22:09,860 --> 00:22:16,520
<font color="#E5E5E5">development consistency and identify any</font>

517
00:22:13,340 --> 00:22:18,889
<font color="#E5E5E5">traffic black holes in the network it</font>

518
00:22:16,520 --> 00:22:20,840
instead of<font color="#E5E5E5"> trying to do</font><font color="#CCCCCC"> n to n fault</font>

519
00:22:18,890 --> 00:22:22,029
detection<font color="#CCCCCC"> or try to</font>

520
00:22:20,840 --> 00:22:25,100
just all the possible combinations

521
00:22:22,029 --> 00:22:27,080
<font color="#CCCCCC">instead we distribute the detection</font><font color="#E5E5E5"> work</font>

522
00:22:25,100 --> 00:22:29,750
through the devices<font color="#E5E5E5"> in the</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> where</font>

523
00:22:27,080 --> 00:22:32,750
each node<font color="#CCCCCC"> just-just itself</font><font color="#E5E5E5"> and immediate</font>

524
00:22:29,750 --> 00:22:35,270
neighbors<font color="#E5E5E5"> and because we are</font><font color="#CCCCCC"> using LSP</font>

525
00:22:32,750 --> 00:22:38,059
pain so<font color="#E5E5E5"> it's interoperable by design</font>

526
00:22:35,270 --> 00:22:39,650
<font color="#E5E5E5">there's no standardization required your</font>

527
00:22:38,059 --> 00:22:42,139
neighbors doesn't<font color="#E5E5E5"> have to be running a</font>

528
00:22:39,650 --> 00:22:46,340
<font color="#CCCCCC">particular version of</font><font color="#E5E5E5"> a software or a</font>

529
00:22:42,140 --> 00:22:48,890
particular vendor<font color="#E5E5E5"> etc as long as they</font>

530
00:22:46,340 --> 00:22:51,230
are<font color="#E5E5E5"> able to send and receive eco reply</font>

531
00:22:48,890 --> 00:22:53,659
as an eco request<font color="#E5E5E5"> they should be</font><font color="#CCCCCC"> able to</font>

532
00:22:51,230 --> 00:22:55,850
work and we<font color="#E5E5E5"> are not planning</font><font color="#CCCCCC"> to as I</font>

533
00:22:53,659 --> 00:22:58,399
<font color="#E5E5E5">mentioned earlier we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> not intending</font>

534
00:22:55,850 --> 00:23:00,740
<font color="#E5E5E5">to it replace existing to set that you</font>

535
00:22:58,399 --> 00:23:02,330
<font color="#CCCCCC">have in your</font><font color="#E5E5E5"> arsenal</font><font color="#CCCCCC"> they have their own</font>

536
00:23:00,740 --> 00:23:04,100
pace<font color="#CCCCCC"> they are really suitable we don't</font>

537
00:23:02,330 --> 00:23:05,809
try to<font color="#E5E5E5"> be we are</font><font color="#CCCCCC"> not trying to be be FD</font>

538
00:23:04,100 --> 00:23:07,850
<font color="#E5E5E5">we're not trying to be a</font><font color="#CCCCCC"> less with pain</font>

539
00:23:05,809 --> 00:23:10,700
or discovering all the possible paths in

540
00:23:07,850 --> 00:23:12,949
the network etc<font color="#E5E5E5"> instead we</font><font color="#CCCCCC"> believe this</font>

541
00:23:10,700 --> 00:23:17,539
tool complements the existing<font color="#E5E5E5"> solutions</font>

542
00:23:12,950 --> 00:23:20,390
that operators may have and then<font color="#E5E5E5"> instead</font>

543
00:23:17,539 --> 00:23:22,760
of<font color="#E5E5E5"> replacing them and of course</font><font color="#CCCCCC"> it is</font>

544
00:23:20,390 --> 00:23:24,289
ready for<font color="#CCCCCC"> adoption by customers we are</font>

545
00:23:22,760 --> 00:23:26,539
<font color="#E5E5E5">working</font><font color="#CCCCCC"> very closely with</font><font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the</font>

546
00:23:24,289 --> 00:23:29,179
customers so in this case<font color="#CCCCCC"> Bell</font><font color="#E5E5E5"> is has</font>

547
00:23:26,539 --> 00:23:32,450
joined us as<font color="#CCCCCC"> a</font><font color="#E5E5E5"> quarter of this talk and</font>

548
00:23:29,179 --> 00:23:44,690
if you have any question I'll be<font color="#CCCCCC"> very</font>

549
00:23:32,450 --> 00:23:47,299
happy to<font color="#E5E5E5"> answer these questions</font><font color="#CCCCCC"> under</font>

550
00:23:44,690 --> 00:23:49,909
<font color="#CCCCCC">requesting service have you done any</font>

551
00:23:47,299 --> 00:23:52,129
scalability testing for with solution

552
00:23:49,909 --> 00:23:53,630
<font color="#E5E5E5">yeah of course so scalability is very</font>

553
00:23:52,130 --> 00:23:56,690
important the thing is you<font color="#E5E5E5"> could have</font>

554
00:23:53,630 --> 00:23:58,309
some<font color="#E5E5E5"> networks may be running few hundred</font>

555
00:23:56,690 --> 00:24:01,039
or even<font color="#CCCCCC"> less than hundred other could be</font>

556
00:23:58,309 --> 00:24:03,020
<font color="#E5E5E5">running thousands of prefixes so yes we</font>

557
00:24:01,039 --> 00:24:04,460
<font color="#CCCCCC">are scalability is important concern</font>

558
00:24:03,020 --> 00:24:06,918
that we have various<font color="#E5E5E5"> tuning parameters</font>

559
00:24:04,460 --> 00:24:09,529
because<font color="#CCCCCC"> in then we</font><font color="#E5E5E5"> don't want we want</font>

560
00:24:06,919 --> 00:24:11,450
<font color="#E5E5E5">the solution to be flexible</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> case</font>

561
00:24:09,529 --> 00:24:13,909
you may<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> have a solution which</font>

562
00:24:11,450 --> 00:24:17,270
where you can tune the detection

563
00:24:13,909 --> 00:24:19,429
interval you can<font color="#E5E5E5"> tune the package per</font>

564
00:24:17,270 --> 00:24:23,029
second<font color="#E5E5E5"> that we are sending with so using</font>

565
00:24:19,429 --> 00:24:25,039
these<font color="#CCCCCC"> two new parameters</font><font color="#E5E5E5"> you can we plan</font>

566
00:24:23,029 --> 00:24:26,809
to cover up to several thousand of

567
00:24:25,039 --> 00:24:28,760
prefixes I can give you we can discuss

568
00:24:26,809 --> 00:24:30,830
separately<font color="#E5E5E5"> but we can I can give you the</font>

569
00:24:28,760 --> 00:24:32,379
numbers on<font color="#CCCCCC"> that one</font><font color="#E5E5E5"> and of course for</font>

570
00:24:30,830 --> 00:24:34,659
<font color="#E5E5E5">each one</font><font color="#CCCCCC"> of them we can have a high</font>

571
00:24:32,380 --> 00:24:39,630
of<font color="#E5E5E5"> ecmp as well upstream as well as</font>

572
00:24:34,660 --> 00:24:39,630
downstream<font color="#E5E5E5"> okay thank you</font>

573
00:24:44,150 --> 00:24:48,850
<font color="#E5E5E5">okay I guess guys have five</font><font color="#CCCCCC"> minutes</font>

574
00:24:55,180 --> 00:24:57,240
you

