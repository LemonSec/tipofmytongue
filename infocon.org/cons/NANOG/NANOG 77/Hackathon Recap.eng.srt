1
00:00:09,320 --> 00:00:13,920
hello good afternoon my name is Matt and

2
00:00:12,120 --> 00:00:17,970
I am a network automation engineer at

3
00:00:13,920 --> 00:00:20,430
Facebook the theme we had for the

4
00:00:17,970 --> 00:00:23,130
hackathon this session was traffic

5
00:00:20,430 --> 00:00:26,130
exceptions so we know that traditional

6
00:00:23,130 --> 00:00:28,110
routing we have prescriptive desired

7
00:00:26,130 --> 00:00:30,900
topologies and we use protocols and

8
00:00:28,110 --> 00:00:33,480
costs to define desired traffic flows we

9
00:00:30,900 --> 00:00:36,180
use BGP policy to express business logic

10
00:00:33,480 --> 00:00:37,819
as reach ability or we can use te to add

11
00:00:36,180 --> 00:00:40,019
constraints to our path selection

12
00:00:37,820 --> 00:00:43,290
reactive scenarios tend to focus around

13
00:00:40,020 --> 00:00:46,200
link failure and we try to solve how do

14
00:00:43,290 --> 00:00:48,960
we retain connectivity and capacity so

15
00:00:46,200 --> 00:00:52,560
we have IDP reconvergence of constraint

16
00:00:48,960 --> 00:00:54,390
SPF LSP signals over available capacity

17
00:00:52,560 --> 00:00:57,540
and really all this work is to try to

18
00:00:54,390 --> 00:00:59,040
get back to our desired topology but

19
00:00:57,540 --> 00:01:02,070
what if we could react to individual

20
00:00:59,040 --> 00:01:04,019
traffic flows so there are three main

21
00:01:02,070 --> 00:01:06,360
components to handling traffic

22
00:01:04,019 --> 00:01:07,409
exceptions as I see it - first is

23
00:01:06,360 --> 00:01:09,929
traffic triggering and this is

24
00:01:07,409 --> 00:01:11,460
monitoring traffic flows for and

25
00:01:09,930 --> 00:01:14,130
flagging those flows based on desired

26
00:01:11,460 --> 00:01:16,199
characteristics we have Network config

27
00:01:14,130 --> 00:01:17,850
which is a config that exists on our

28
00:01:16,200 --> 00:01:20,400
network today that supports the desired

29
00:01:17,850 --> 00:01:22,320
outcome for example redirecting traffic

30
00:01:20,400 --> 00:01:23,520
or dropping traffic and then we have

31
00:01:22,320 --> 00:01:25,408
traffic influenced which is the

32
00:01:23,520 --> 00:01:29,130
mechanism that connects the trigger to

33
00:01:25,409 --> 00:01:30,690
the config you might think right now yes

34
00:01:29,130 --> 00:01:33,420
madam already running this on my network

35
00:01:30,690 --> 00:01:36,509
it's called DDoS so or DDoS mitigation

36
00:01:33,420 --> 00:01:38,280
sorry that you'd ask so traffic

37
00:01:36,510 --> 00:01:40,620
triggering tends to be we detect attacks

38
00:01:38,280 --> 00:01:42,720
via rules or machine learning a customer

39
00:01:40,620 --> 00:01:44,790
phone call and we have config we have

40
00:01:42,720 --> 00:01:46,920
BGP policies with communities and if we

41
00:01:44,790 --> 00:01:51,299
see prefixes for these communities we

42
00:01:46,920 --> 00:01:52,979
talk traffic or and we can influence

43
00:01:51,299 --> 00:01:57,510
this traffic based on BGP flowspec

44
00:01:52,979 --> 00:01:58,619
or remotely trigger blackhole but I

45
00:01:57,510 --> 00:02:01,170
really think that we could do so much

46
00:01:58,619 --> 00:02:04,409
more in a reactive Network we have

47
00:02:01,170 --> 00:02:05,850
traffic triggering like we could do more

48
00:02:04,409 --> 00:02:08,580
advanced things looking at malicious

49
00:02:05,850 --> 00:02:10,439
layer 7 API requests or counting a

50
00:02:08,580 --> 00:02:12,930
retreat TCP retransmits and doing

51
00:02:10,439 --> 00:02:14,879
further analysis maybe using TTL as a

52
00:02:12,930 --> 00:02:17,069
source defined priority so if we have a

53
00:02:14,879 --> 00:02:18,540
TTL that comes in at our network of

54
00:02:17,069 --> 00:02:20,730
higher than 200 you send it around the

55
00:02:18,540 --> 00:02:22,010
scenic route I'm even doing more

56
00:02:20,730 --> 00:02:24,560
advanced things like

57
00:02:22,010 --> 00:02:29,019
encoding vgp communities and GCP option

58
00:02:24,560 --> 00:02:30,980
headers and doing intent-based in every

59
00:02:29,019 --> 00:02:32,599
Network configure we do things like

60
00:02:30,980 --> 00:02:35,268
network segments that attract traffic

61
00:02:32,599 --> 00:02:36,500
via BGP flowspec and then maybe for our

62
00:02:35,269 --> 00:02:39,349
traffic influence we use things like

63
00:02:36,500 --> 00:02:42,739
Excel btp to provide an API to advertise

64
00:02:39,349 --> 00:02:44,238
these flows spec rules thank you I'm

65
00:02:42,739 --> 00:02:46,400
going to now hand this off to our three

66
00:02:44,239 --> 00:02:48,700
teams and they're gonna talk about their

67
00:02:46,400 --> 00:02:48,700
demos

68
00:03:10,250 --> 00:03:15,090
hello good afternoon everybody

69
00:03:12,300 --> 00:03:16,970
we are team Cu buffs from the University

70
00:03:15,090 --> 00:03:22,110
of Colorado Boulder

71
00:03:16,970 --> 00:03:26,459
this is my team sadly but Sahana and

72
00:03:22,110 --> 00:03:28,739
Akshay our hack was handling multiple

73
00:03:26,459 --> 00:03:31,560
HTTP requests that enter into the

74
00:03:28,739 --> 00:03:33,989
network in a given interval of time and

75
00:03:31,560 --> 00:03:36,810
then rate limiting the traffic based on

76
00:03:33,989 --> 00:03:39,690
whatever is received the key points of

77
00:03:36,810 --> 00:03:42,930
our hacker exception traffic handling of

78
00:03:39,690 --> 00:03:46,319
exception traffic using exhibition dscp

79
00:03:42,930 --> 00:03:49,319
marking and traffic shaping for traffic

80
00:03:46,319 --> 00:03:52,140
monitoring we used Twilio api and trash

81
00:03:49,319 --> 00:03:54,540
tasks for failover handling of traffic

82
00:03:52,140 --> 00:03:57,359
we used route manipulation and for

83
00:03:54,540 --> 00:04:00,989
traffic visualization we used Ravana and

84
00:03:57,360 --> 00:04:04,349
matplotlib this is the rough flow of our

85
00:04:00,989 --> 00:04:06,540
hack we would sniff and analyze any

86
00:04:04,349 --> 00:04:08,730
traffic that enters into our network if

87
00:04:06,540 --> 00:04:12,090
the traffic crosses a certain threshold

88
00:04:08,730 --> 00:04:15,358
the HTTP requests we detect the source

89
00:04:12,090 --> 00:04:17,280
of the traffic using Skippy and send the

90
00:04:15,359 --> 00:04:21,299
traffic for monitoring of visualization

91
00:04:17,279 --> 00:04:24,570
and at the same time using exhibition we

92
00:04:21,298 --> 00:04:26,280
inject a route into a network and after

93
00:04:24,570 --> 00:04:28,800
injecting the route when the traffic

94
00:04:26,280 --> 00:04:33,510
comes in we rate limit the traffic over

95
00:04:28,800 --> 00:04:36,599
to sadhvi so we live capture traffic

96
00:04:33,510 --> 00:04:39,870
exiting host 1 and periodically transfer

97
00:04:36,599 --> 00:04:42,360
this to a sniffer using cron job and our

98
00:04:39,870 --> 00:04:44,580
sync the sniffer then analyzes this

99
00:04:42,360 --> 00:04:47,190
traffic to identify any exception

100
00:04:44,580 --> 00:04:49,320
traffic which we are defining as a bunch

101
00:04:47,190 --> 00:04:51,169
of HTTP requests from a single source

102
00:04:49,320 --> 00:04:53,969
which is exceeding a certain threshold

103
00:04:51,169 --> 00:04:56,880
when this is identified the sniffer then

104
00:04:53,970 --> 00:04:59,210
notifies the ex of BGP to make config

105
00:04:56,880 --> 00:05:03,900
changes into a topology to handle this

106
00:04:59,210 --> 00:05:05,820
exception traffic the X sub D to P do

107
00:05:03,900 --> 00:05:08,700
notify the exome vgp we initially tried

108
00:05:05,820 --> 00:05:11,000
using net miko which SS hatches into the

109
00:05:08,700 --> 00:05:14,490
exhibition makes conflict file changes

110
00:05:11,000 --> 00:05:16,680
and then the XMPP process is restarted

111
00:05:14,490 --> 00:05:19,770
since this wasn't super efficient to do

112
00:05:16,680 --> 00:05:21,840
every time we needed to change conflicts

113
00:05:19,770 --> 00:05:24,240
in the topology when

114
00:05:21,840 --> 00:05:27,419
option traffic was identified we opted

115
00:05:24,240 --> 00:05:29,520
for the secure API which leveraged XMB

116
00:05:27,419 --> 00:05:31,409
gp's existing API to make conflict

117
00:05:29,520 --> 00:05:33,150
changes without having to actually start

118
00:05:31,410 --> 00:05:36,510
back so bgp process every single time

119
00:05:33,150 --> 00:05:39,299
over to action thank you

120
00:05:36,510 --> 00:05:42,719
whenever the example GP API is called we

121
00:05:39,300 --> 00:05:45,389
will inject her out on the r2 router so

122
00:05:42,720 --> 00:05:47,400
we use flowspec for this and we use

123
00:05:45,389 --> 00:05:49,889
flowspec because we can match on source

124
00:05:47,400 --> 00:05:52,229
IP we can do destination IP as well as

125
00:05:49,889 --> 00:05:55,290
the layer 4 headers once auto gets this

126
00:05:52,229 --> 00:05:57,479
advertisement from exhibition propagate

127
00:05:55,290 --> 00:06:01,320
this information in its bgp network and

128
00:05:57,479 --> 00:06:03,479
our 1 and alpha will know about this the

129
00:06:01,320 --> 00:06:06,540
best part of is that we have marked this

130
00:06:03,479 --> 00:06:09,900
particular out with a DHCP value of 10

131
00:06:06,540 --> 00:06:13,020
and we use a policy map to throttle this

132
00:06:09,900 --> 00:06:15,690
traffic on r1 this is because whenever

133
00:06:13,020 --> 00:06:17,549
there is a failover or r3 we will have

134
00:06:15,690 --> 00:06:20,280
all the exception traffic as well as the

135
00:06:17,550 --> 00:06:22,680
good traffic flow from the only path by

136
00:06:20,280 --> 00:06:24,780
r2 so whenever there is a congestion we

137
00:06:22,680 --> 00:06:26,340
need to throttle the exception traffic

138
00:06:24,780 --> 00:06:29,280
and we need to let the good traffic pass

139
00:06:26,340 --> 00:06:31,619
by we attract all the exception traffic

140
00:06:29,280 --> 00:06:34,159
to r2 using a higher local preference

141
00:06:31,620 --> 00:06:37,050
over to sana

142
00:06:34,160 --> 00:06:38,610
apart from detecting and handling the

143
00:06:37,050 --> 00:06:41,460
exceptions we felt the need to visualize

144
00:06:38,610 --> 00:06:43,889
the traffic so we kept account of

145
00:06:41,460 --> 00:06:45,388
packets that were responsible for the

146
00:06:43,889 --> 00:06:47,700
exceptional traffic on the sniffer

147
00:06:45,389 --> 00:06:49,470
itself and we pushed it into a database

148
00:06:47,700 --> 00:06:52,560
which was hosted on sniffer

149
00:06:49,470 --> 00:06:54,630
we used pythons own matplotlib library

150
00:06:52,560 --> 00:06:57,389
for this graph we also pushed into

151
00:06:54,630 --> 00:07:01,169
Pravana for further visualization and

152
00:06:57,389 --> 00:07:03,660
this is what you can see there oh thank

153
00:07:01,169 --> 00:07:06,539
you another major component of the hack

154
00:07:03,660 --> 00:07:09,000
was to do the notification like we don't

155
00:07:06,539 --> 00:07:11,070
want not people to not know about it so

156
00:07:09,000 --> 00:07:12,900
we use a tool called freshness which

157
00:07:11,070 --> 00:07:14,760
what it will do is like whenever there

158
00:07:12,900 --> 00:07:17,190
is an traffic exception in our network

159
00:07:14,760 --> 00:07:19,860
it will just erase a ticket on this tool

160
00:07:17,190 --> 00:07:21,539
and network admins can like just walk on

161
00:07:19,860 --> 00:07:23,880
it and they will get notified about it

162
00:07:21,539 --> 00:07:26,430
but this doesn't it this is not like

163
00:07:23,880 --> 00:07:29,190
efficient so we used a Twilio api which

164
00:07:26,430 --> 00:07:31,770
will do a live like a real-time call to

165
00:07:29,190 --> 00:07:33,539
the network admins and it it will notify

166
00:07:31,770 --> 00:07:35,370
them like yeah there is a traffic

167
00:07:33,539 --> 00:07:36,030
exception in your network from this

168
00:07:35,370 --> 00:07:37,860
particular

169
00:07:36,030 --> 00:07:40,140
and this type of exception has occurred

170
00:07:37,860 --> 00:07:43,140
so we use the Twilio API for that

171
00:07:40,140 --> 00:07:45,060
purpose there are a future scope for the

172
00:07:43,140 --> 00:07:47,490
project like we can definitely scale the

173
00:07:45,060 --> 00:07:49,140
idea for like a higher level of networks

174
00:07:47,490 --> 00:07:51,930
like the products and great networks and

175
00:07:49,140 --> 00:07:54,300
we can like since in our hack we just

176
00:07:51,930 --> 00:07:56,250
use HTTP traffic as our exceptions we

177
00:07:54,300 --> 00:07:58,770
can use like DNS or jumbo frames as a

178
00:07:56,250 --> 00:08:00,900
exception traffic as well we can

179
00:07:58,770 --> 00:08:03,330
definitely like make use of this

180
00:08:00,900 --> 00:08:04,950
application to like have IDs or IPS or

181
00:08:03,330 --> 00:08:08,130
traffic backhauling mechanism in our

182
00:08:04,950 --> 00:08:10,740
network some key takeaway from this hack

183
00:08:08,130 --> 00:08:12,719
was like we got exposure to many

184
00:08:10,740 --> 00:08:17,070
different new tools like eggs a beachy P

185
00:08:12,720 --> 00:08:19,080
and video api's teamwork and time

186
00:08:17,070 --> 00:08:21,840
management was definitely a big part of

187
00:08:19,080 --> 00:08:23,940
for this hack to be successful we would

188
00:08:21,840 --> 00:08:25,679
like to thank all the sponsors and all

189
00:08:23,940 --> 00:08:27,810
the mentors for helping throughout the

190
00:08:25,680 --> 00:08:29,940
hack and specially or a professor dr.

191
00:08:27,810 --> 00:08:31,440
Levi Perico for helping us for the eggs

192
00:08:29,940 --> 00:08:35,030
and we would like to thank nano

193
00:08:31,440 --> 00:08:40,820
forgiveness and opportunity thank you

194
00:08:35,030 --> 00:08:40,819
[Applause]

195
00:08:55,100 --> 00:09:00,420
alright hey everyone I'm at Sony Blevins

196
00:08:57,989 --> 00:09:03,509
I'm with Netflix and I'm here with David

197
00:09:00,420 --> 00:09:04,709
testa from Verizon Media and Tony

198
00:09:03,509 --> 00:09:07,199
Franklin and Kyla bean from Ball State

199
00:09:04,709 --> 00:09:08,368
University our team name was pod one

200
00:09:07,199 --> 00:09:10,920
because that's the pod we were assigned

201
00:09:08,369 --> 00:09:13,499
and we're really creative so I'm just

202
00:09:10,920 --> 00:09:14,849
gonna give an start with the so

203
00:09:13,499 --> 00:09:17,059
basically what we did is we created just

204
00:09:14,850 --> 00:09:20,069
a bit of opera's operant

205
00:09:17,059 --> 00:09:21,629
operationalization on top of the

206
00:09:20,069 --> 00:09:24,360
existing demo that Facebook opened

207
00:09:21,629 --> 00:09:25,559
breath as part of the hackathon so just

208
00:09:24,360 --> 00:09:29,610
a quick overview of what the topology

209
00:09:25,559 --> 00:09:31,949
was at the start so similar technology

210
00:09:29,610 --> 00:09:35,069
to what you guys saw from the previous

211
00:09:31,949 --> 00:09:36,738
team but we had a sniffer running

212
00:09:35,069 --> 00:09:40,229
attached to router one that was

213
00:09:36,739 --> 00:09:42,959
detecting using escapee to detect Rafic

214
00:09:40,230 --> 00:09:45,059
coming through that link and it had some

215
00:09:42,959 --> 00:09:47,189
rules sets that if it detected a certain

216
00:09:45,059 --> 00:09:48,868
number of retransmits through that

217
00:09:47,189 --> 00:09:52,980
script it went forward some rules to

218
00:09:48,869 --> 00:09:56,249
exit bgp over an HTTP api and that is

219
00:09:52,980 --> 00:09:58,139
PGP rule would reroute traffic through

220
00:09:56,249 --> 00:10:00,089
router 2 and what we called our analysis

221
00:09:58,139 --> 00:10:01,649
segment where there might be other tools

222
00:10:00,089 --> 00:10:06,059
hosted that could then analyze that

223
00:10:01,649 --> 00:10:07,860
traffic further look for trends etc so

224
00:10:06,059 --> 00:10:10,639
I'm just a quick overview of what we did

225
00:10:07,860 --> 00:10:13,529
and rather than having the rule

226
00:10:10,639 --> 00:10:15,299
immediately for data to exit BGP we

227
00:10:13,529 --> 00:10:18,600
actually had it send all data that it

228
00:10:15,299 --> 00:10:19,949
analyzed to an API and then in the cases

229
00:10:18,600 --> 00:10:22,889
that the retransmit threshold was

230
00:10:19,949 --> 00:10:24,508
exceeded it went ahead and alerted ana

231
00:10:22,889 --> 00:10:26,999
slack notification to our team channel

232
00:10:24,509 --> 00:10:31,290
and then we just tossed up a quick HTML

233
00:10:26,999 --> 00:10:34,860
and CSS front-end to to get the status

234
00:10:31,290 --> 00:10:37,709
and to manually redirect to that traffic

235
00:10:34,860 --> 00:10:39,179
when they did when it was desired so I'm

236
00:10:37,709 --> 00:10:39,809
just gonna give a quick demo of what

237
00:10:39,179 --> 00:10:42,329
this looked like

238
00:10:39,809 --> 00:10:44,040
so unrar one or matter to the initial

239
00:10:42,329 --> 00:10:48,540
state we didn't have any routes in the

240
00:10:44,040 --> 00:10:50,248
flow table the sniffer ran and for the

241
00:10:48,540 --> 00:10:52,769
purposes of the screenshots here this

242
00:10:50,249 --> 00:10:54,749
was just using lis a pre-existing pcap

243
00:10:52,769 --> 00:10:57,299
but this actually also works live on the

244
00:10:54,749 --> 00:10:58,739
wire you can see for every packet that

245
00:10:57,299 --> 00:11:02,100
are processed that it sent a status

246
00:10:58,739 --> 00:11:04,610
message to our exit the GPU based API

247
00:11:02,100 --> 00:11:06,920
and then

248
00:11:04,610 --> 00:11:09,860
soon as the retransmit threshold was hit

249
00:11:06,920 --> 00:11:13,160
which was in this case five it sent a

250
00:11:09,860 --> 00:11:16,010
notification to slack and continued to

251
00:11:13,160 --> 00:11:18,199
son data to the API so this is what the

252
00:11:16,010 --> 00:11:19,850
slack notification looked like and this

253
00:11:18,200 --> 00:11:21,170
is actually one per run so it's not

254
00:11:19,850 --> 00:11:22,579
gonna send a message every time the

255
00:11:21,170 --> 00:11:24,769
threshold is exceeded only the first

256
00:11:22,579 --> 00:11:27,109
time and then if you were to click into

257
00:11:24,769 --> 00:11:30,470
that slack notification it would take

258
00:11:27,110 --> 00:11:31,910
you to this front-end from here you can

259
00:11:30,470 --> 00:11:33,890
decide whether or not you wanted to

260
00:11:31,910 --> 00:11:35,480
announce the redirect Xzibit each PE to

261
00:11:33,890 --> 00:11:37,519
send the traffic to the traffic analysis

262
00:11:35,480 --> 00:11:39,980
segment so if you were to click that

263
00:11:37,519 --> 00:11:42,130
announce redirect button you would get

264
00:11:39,980 --> 00:11:47,480
these commands executed to the eggs ebgp

265
00:11:42,130 --> 00:11:49,100
process and then if you were looking at

266
00:11:47,480 --> 00:11:53,870
the eggs of UDP process output you could

267
00:11:49,100 --> 00:11:55,640
see the flow added messages and on the

268
00:11:53,870 --> 00:11:59,470
router one you could see the new routes

269
00:11:55,640 --> 00:12:02,779
in the flow table same on a router too

270
00:11:59,470 --> 00:12:04,130
from there you may choose to you know

271
00:12:02,779 --> 00:12:05,390
withdraw that announcements withdraw

272
00:12:04,130 --> 00:12:06,649
that redirect you've got the data you

273
00:12:05,390 --> 00:12:08,510
want you want to go ahead and turn off

274
00:12:06,649 --> 00:12:11,060
that that redirect so you can hit the

275
00:12:08,510 --> 00:12:12,319
withdraw redirect button commands

276
00:12:11,060 --> 00:12:16,430
execute again you look up the withdraw

277
00:12:12,320 --> 00:12:19,190
flow out messages to exit BGP same

278
00:12:16,430 --> 00:12:22,489
messages on the from the X BGP process

279
00:12:19,190 --> 00:12:24,699
it's time removing and you get to those

280
00:12:22,490 --> 00:12:27,980
routes have been cleared from the table

281
00:12:24,699 --> 00:12:30,050
so um just a quick overview of how we

282
00:12:27,980 --> 00:12:33,050
did this so in the original detector he

283
00:12:30,050 --> 00:12:34,550
transmits Python script it was calling

284
00:12:33,050 --> 00:12:37,699
XE BGP directly as soon as the

285
00:12:34,550 --> 00:12:40,430
retransmits occurred we added a few we

286
00:12:37,699 --> 00:12:42,439
had several api's to the the original

287
00:12:40,430 --> 00:12:45,709
api so to accept status data to display

288
00:12:42,440 --> 00:12:49,510
status data and to allow for

289
00:12:45,709 --> 00:12:51,979
programmatic announces and redirects or

290
00:12:49,510 --> 00:12:53,329
announces some withdrawals rather we

291
00:12:51,980 --> 00:12:55,490
added a front-end it's literally just

292
00:12:53,329 --> 00:12:56,989
HTML and CSS I'd really didn't want to

293
00:12:55,490 --> 00:13:00,709
write JavaScript but it could be a lot

294
00:12:56,990 --> 00:13:02,360
prettier with some JavaScript and on the

295
00:13:00,709 --> 00:13:05,119
X of UDP process this is probably the

296
00:13:02,360 --> 00:13:06,230
most technical change in that we really

297
00:13:05,120 --> 00:13:08,899
want to be able to run this on port 80

298
00:13:06,230 --> 00:13:11,269
so we could easily access the UI without

299
00:13:08,899 --> 00:13:13,640
having to do SSH tunneling and so we

300
00:13:11,269 --> 00:13:15,560
actually separated out the API from the

301
00:13:13,640 --> 00:13:16,630
X of BTP process and so it's running a

302
00:13:15,560 --> 00:13:19,329
new HD

303
00:13:16,630 --> 00:13:22,870
and the bridge between us G and the xbt

304
00:13:19,329 --> 00:13:24,339
process is a named pipe XE BGP I already

305
00:13:22,870 --> 00:13:25,750
had native support for that but it

306
00:13:24,339 --> 00:13:28,779
wasn't quite working in our case so we

307
00:13:25,750 --> 00:13:30,339
added a process within XE BGP that was

308
00:13:28,779 --> 00:13:32,019
tail laughing that named pipe and then

309
00:13:30,339 --> 00:13:33,959
getting the messages standard out that

310
00:13:32,019 --> 00:13:36,880
way

311
00:13:33,959 --> 00:13:39,040
so obviously there's a lot of ways this

312
00:13:36,880 --> 00:13:41,110
could grow some JavaScript a bit great

313
00:13:39,040 --> 00:13:42,790
his sort and filter that table and if

314
00:13:41,110 --> 00:13:46,720
you run that too tight retransmits

315
00:13:42,790 --> 00:13:47,980
script without the P cap is input and it

316
00:13:46,720 --> 00:13:49,509
gets all the traffic that's on the wire

317
00:13:47,980 --> 00:13:51,550
and what's really fun about that is if

318
00:13:49,509 --> 00:13:54,519
you don't add in any filtering it'll

319
00:13:51,550 --> 00:13:55,990
every request to the API creates a new

320
00:13:54,519 --> 00:13:57,459
flow on the wire because it's all from

321
00:13:55,990 --> 00:13:59,019
the same networks you get an infinite

322
00:13:57,459 --> 00:14:00,609
have set of packets that are being

323
00:13:59,019 --> 00:14:01,870
forwarded to the API which it handles

324
00:14:00,610 --> 00:14:03,639
just fine because this is all within a

325
00:14:01,870 --> 00:14:06,790
local network but not something you

326
00:14:03,639 --> 00:14:08,800
would want in production obviously we

327
00:14:06,790 --> 00:14:10,509
would want the ability to customize what

328
00:14:08,800 --> 00:14:11,889
our X a BGP actions are so you could

329
00:14:10,509 --> 00:14:14,800
have more advanced form so than just

330
00:14:11,889 --> 00:14:16,209
clicking a button we could get

331
00:14:14,800 --> 00:14:18,040
confirmation that those commands

332
00:14:16,209 --> 00:14:21,569
actually resulted in matter changes by

333
00:14:18,040 --> 00:14:25,389
setting up either you know pulling via

334
00:14:21,569 --> 00:14:27,310
CLI via genome I if it's available that

335
00:14:25,389 --> 00:14:28,959
kind of functionality could exist to

336
00:14:27,310 --> 00:14:32,109
just show the success of the commands

337
00:14:28,959 --> 00:14:35,399
and obviously would be good to type

338
00:14:32,110 --> 00:14:39,750
traffic anomalies other than retransmits

339
00:14:35,399 --> 00:14:47,250
so that's our project thank you

340
00:14:39,750 --> 00:14:47,250
[Applause]

341
00:14:54,810 --> 00:14:59,339
good afternoon everyone so I'm so home

342
00:14:57,360 --> 00:15:01,230
from path my team path faces

343
00:14:59,340 --> 00:15:05,270
unfortunately some of the folks are not

344
00:15:01,230 --> 00:15:08,730
here if it's me currently so get started

345
00:15:05,270 --> 00:15:10,890
so what we had is we had like two sub

346
00:15:08,730 --> 00:15:12,680
teams within the main team one of them

347
00:15:10,890 --> 00:15:16,230
was trying to look at how we can address

348
00:15:12,680 --> 00:15:19,859
ecmp and traceroute issues together to

349
00:15:16,230 --> 00:15:23,190
get a better data from a traceroute

350
00:15:19,860 --> 00:15:25,580
where when we do a CMP and another was

351
00:15:23,190 --> 00:15:27,930
working on the Facebook hack which was

352
00:15:25,580 --> 00:15:31,620
analyzing the flow and determining a

353
00:15:27,930 --> 00:15:35,459
better traffic flow for IGP BGP as well

354
00:15:31,620 --> 00:15:37,830
as custom traffic drain if required so

355
00:15:35,460 --> 00:15:40,080
what we eventually wanted to reach a

356
00:15:37,830 --> 00:15:42,120
stage was if we can run this custom

357
00:15:40,080 --> 00:15:44,880
trace route and find the hop which does

358
00:15:42,120 --> 00:15:46,290
not give back the data we need and then

359
00:15:44,880 --> 00:15:48,780
we can analyze that link and then

360
00:15:46,290 --> 00:15:50,699
basically take it out of the network but

361
00:15:48,780 --> 00:15:53,810
we couldn't complete the integration at

362
00:15:50,700 --> 00:15:53,810
and at the end

363
00:15:54,290 --> 00:16:00,089
so yeah the context was to be able to

364
00:15:57,540 --> 00:16:02,430
investigate routes which have ecmp and

365
00:16:00,089 --> 00:16:04,560
then be able to influence the link state

366
00:16:02,430 --> 00:16:06,329
the underlying IGP for for the same and

367
00:16:04,560 --> 00:16:08,280
then being able to automatically respond

368
00:16:06,330 --> 00:16:13,080
to route traffic through some other

369
00:16:08,280 --> 00:16:15,990
paths we use napalm for like as a

370
00:16:13,080 --> 00:16:18,960
centralized service to collect data for

371
00:16:15,990 --> 00:16:21,330
the interface and the link stats we took

372
00:16:18,960 --> 00:16:23,070
curve approach like we basically

373
00:16:21,330 --> 00:16:25,650
investigated Paris trace route which

374
00:16:23,070 --> 00:16:27,600
kind of uses TCP and UDP for checksum

375
00:16:25,650 --> 00:16:29,819
and sequence numbers and plays around

376
00:16:27,600 --> 00:16:32,070
with it to get more better data for the

377
00:16:29,820 --> 00:16:34,260
normal trace route which we have and we

378
00:16:32,070 --> 00:16:37,680
also came across midway through the hack

379
00:16:34,260 --> 00:16:40,410
about the Facebook FB tracer tool and we

380
00:16:37,680 --> 00:16:42,329
try to then work through it and make and

381
00:16:40,410 --> 00:16:43,890
and you know identify what we can do

382
00:16:42,330 --> 00:16:47,850
better by using both of these together

383
00:16:43,890 --> 00:16:49,830
so our first attempt like I told was to

384
00:16:47,850 --> 00:16:51,690
understand Paris - Paris trace route

385
00:16:49,830 --> 00:16:54,450
which is written in C++ what you wanted

386
00:16:51,690 --> 00:16:57,030
to do is write it in go line and we

387
00:16:54,450 --> 00:16:59,910
began to write kind of implemented using

388
00:16:57,030 --> 00:17:02,220
UDP and then we discovered that SBT

389
00:16:59,910 --> 00:17:05,310
result has already this mechanism but it

390
00:17:02,220 --> 00:17:07,569
does using TCP so our second attempt was

391
00:17:05,310 --> 00:17:09,510
if we can use go line

392
00:17:07,569 --> 00:17:12,550
using concurrency and goroutines and

393
00:17:09,510 --> 00:17:15,670
then get a logic to kind of you know

394
00:17:12,550 --> 00:17:18,579
test various details some of the things

395
00:17:15,670 --> 00:17:22,750
which we wanted to add was UDP and ICMP

396
00:17:18,579 --> 00:17:26,440
data and we also wanted to build a CLI

397
00:17:22,750 --> 00:17:29,530
utility rather than a library so we kind

398
00:17:26,440 --> 00:17:31,720
of fogged the FB tracer version and we

399
00:17:29,530 --> 00:17:35,260
try to add whatever we can like this is

400
00:17:31,720 --> 00:17:39,040
the first part of that so here are the

401
00:17:35,260 --> 00:17:40,960
like the results which we got we it's

402
00:17:39,040 --> 00:17:43,960
not clear but basically we were able to

403
00:17:40,960 --> 00:17:48,130
get some better data out of the current

404
00:17:43,960 --> 00:17:50,110
FB trace or utility for multiple AAS

405
00:17:48,130 --> 00:17:53,020
numbers and some of the source addresses

406
00:17:50,110 --> 00:17:56,110
so on the left side is the one which is

407
00:17:53,020 --> 00:17:58,030
currently was there and the right side

408
00:17:56,110 --> 00:18:00,879
is the one which we try to for can get

409
00:17:58,030 --> 00:18:05,620
some data better visualization for the

410
00:18:00,880 --> 00:18:08,800
same next we wanted to influence traffic

411
00:18:05,620 --> 00:18:11,620
for the current FB hack so we we try to

412
00:18:08,800 --> 00:18:13,450
use the sniffer service and run a health

413
00:18:11,620 --> 00:18:16,000
check service of sorts which would

414
00:18:13,450 --> 00:18:18,910
basically combine and combined with the

415
00:18:16,000 --> 00:18:21,250
sniffer and identify traffic paths which

416
00:18:18,910 --> 00:18:23,800
can be used in case we have we hit a

417
00:18:21,250 --> 00:18:25,540
scenario where in the alternative path

418
00:18:23,800 --> 00:18:27,520
has been taken but the alternative path

419
00:18:25,540 --> 00:18:29,710
some segments in in it has taken some

420
00:18:27,520 --> 00:18:32,110
errors so what do you do in that case so

421
00:18:29,710 --> 00:18:33,310
we identify the rogue link we run the

422
00:18:32,110 --> 00:18:36,189
health check service which I mentioned

423
00:18:33,310 --> 00:18:39,159
and we look out for interface errors

424
00:18:36,190 --> 00:18:42,790
flaps or utilization based on it we try

425
00:18:39,160 --> 00:18:45,010
to drain it by making the IGP cost as

426
00:18:42,790 --> 00:18:49,210
high as possible so that the underlying

427
00:18:45,010 --> 00:18:51,760
IP doesn't prefer it anymore so this was

428
00:18:49,210 --> 00:18:54,840
kind of a traffic flow let's say r1 r3

429
00:18:51,760 --> 00:18:57,460
and r4 is the normal flow you take it

430
00:18:54,840 --> 00:18:59,530
basically you you use the exception

431
00:18:57,460 --> 00:19:02,650
traffic to make it go through r1 r2 and

432
00:18:59,530 --> 00:19:05,920
r4 however let's say you have consistent

433
00:19:02,650 --> 00:19:07,990
flaps happening between r2 and r4 you

434
00:19:05,920 --> 00:19:09,190
try to mitigate it as far as possible

435
00:19:07,990 --> 00:19:10,750
but you're still hitting the same error

436
00:19:09,190 --> 00:19:12,970
because your production traffic is going

437
00:19:10,750 --> 00:19:15,790
to take a hit if there's a flap so this

438
00:19:12,970 --> 00:19:17,920
is what we try to do we kind of

439
00:19:15,790 --> 00:19:20,999
continuously maintain a state using

440
00:19:17,920 --> 00:19:23,099
napalm for the interface and if we

441
00:19:20,999 --> 00:19:26,699
if we have a custom defined threshold we

442
00:19:23,099 --> 00:19:29,218
had a 300 302nd for this one so if it is

443
00:19:26,699 --> 00:19:32,129
last flat before that what we try to do

444
00:19:29,219 --> 00:19:33,809
is we log in and make the IGP cost as

445
00:19:32,129 --> 00:19:35,819
high as possible so that a lot of

446
00:19:33,809 --> 00:19:37,709
traffic then goes and reroutes even

447
00:19:35,819 --> 00:19:39,239
though it's a less preferred path but at

448
00:19:37,709 --> 00:19:43,139
least it won't the packets won't get

449
00:19:39,239 --> 00:19:46,589
dropped so here's the interface where we

450
00:19:43,139 --> 00:19:49,198
try to kind of flap it and then run a

451
00:19:46,589 --> 00:19:52,499
manual test for it so we increase the

452
00:19:49,199 --> 00:19:55,499
metric over here it's a we use OSPF in

453
00:19:52,499 --> 00:19:58,289
the current hack in terms of learnings

454
00:19:55,499 --> 00:20:01,319
what we did not know about Paris

455
00:19:58,289 --> 00:20:03,839
traceroute and as well as the wonderful

456
00:20:01,319 --> 00:20:06,688
implementation of FB tracer we learnt a

457
00:20:03,839 --> 00:20:08,729
lot about it during the hack we would

458
00:20:06,689 --> 00:20:11,789
have loved to get more time and be able

459
00:20:08,729 --> 00:20:13,319
to do more justice to it but and we also

460
00:20:11,789 --> 00:20:15,089
learned about the various exception

461
00:20:13,319 --> 00:20:17,789
traffic and the flows which we can

462
00:20:15,089 --> 00:20:19,649
utilize and minimize the kind of impact

463
00:20:17,789 --> 00:20:24,539
which we regularly see in our networks

464
00:20:19,649 --> 00:20:26,938
so to conclude it's always like we try

465
00:20:24,539 --> 00:20:28,859
to get the requisite data concurrency

466
00:20:26,939 --> 00:20:30,479
remains an issue as as we scale it's

467
00:20:28,859 --> 00:20:33,869
difficult to run a centralized service

468
00:20:30,479 --> 00:20:36,269
which can fetch data as we need so and

469
00:20:33,869 --> 00:20:37,889
we also try to do some part of like

470
00:20:36,269 --> 00:20:39,839
route dampening basically ensuring that

471
00:20:37,889 --> 00:20:41,879
you know we drain the traffic which we

472
00:20:39,839 --> 00:20:45,119
do not want to go through the link and

473
00:20:41,879 --> 00:20:47,399
use alternative form of some traffic our

474
00:20:45,119 --> 00:20:49,978
code is available on the link which has

475
00:20:47,399 --> 00:20:52,279
been indicated and with that thank you

476
00:20:49,979 --> 00:20:52,279
so much

477
00:20:52,680 --> 00:20:57,789
[Applause]

478
00:21:00,760 --> 00:21:08,900
do we have any questions for any of our

479
00:21:03,350 --> 00:21:11,469
teams okay so thank you Matt and thank

480
00:21:08,900 --> 00:21:11,470
you winning teams

481
00:21:16,760 --> 00:21:18,820
you

