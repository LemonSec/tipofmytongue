1
00:00:08,490 --> 00:00:13,340
all right

2
00:00:10,580 --> 00:00:16,250
my presentation will probably run a bit

3
00:00:13,340 --> 00:00:17,660
early as well and this is something that

4
00:00:16,250 --> 00:00:19,630
I've kind of given a couple of times now

5
00:00:17,660 --> 00:00:21,320
it's several different venues so

6
00:00:19,630 --> 00:00:23,599
apologies that you've seen this before

7
00:00:21,320 --> 00:00:26,740
but I just wanted to talk today about

8
00:00:23,599 --> 00:00:29,869
some work we've been doing at Princeton

9
00:00:26,740 --> 00:00:31,509
to analyze the costs of DNS in doe for

10
00:00:29,869 --> 00:00:33,650
the modern web what we mean by that is

11
00:00:31,509 --> 00:00:35,960
we're really trying to understand how

12
00:00:33,650 --> 00:00:37,430
these different protocols affect the

13
00:00:35,960 --> 00:00:39,710
end-user experience

14
00:00:37,430 --> 00:00:42,710
so not just measuring and things like

15
00:00:39,710 --> 00:00:44,690
query response times but also page load

16
00:00:42,710 --> 00:00:47,239
times and then emulating different

17
00:00:44,690 --> 00:00:53,209
cellular conditions as well and seeing

18
00:00:47,239 --> 00:00:55,339
how he perform so you know Dino's

19
00:00:53,210 --> 00:00:58,730
privacy has become a significant concern

20
00:00:55,339 --> 00:01:00,800
recently especially within the ITF we

21
00:00:58,730 --> 00:01:03,529
know that on path network observers can

22
00:01:00,800 --> 00:01:06,229
observe traditional DNS traffic and the

23
00:01:03,530 --> 00:01:09,680
clear so this is what I'm gonna refer to

24
00:01:06,230 --> 00:01:10,850
the rest of the talk as doe 53 and so

25
00:01:09,680 --> 00:01:12,530
they've been to protocols that have been

26
00:01:10,850 --> 00:01:16,699
proposed to encrypt this traffic

27
00:01:12,530 --> 00:01:19,340
there's DNS over TLS or dot and then DNS

28
00:01:16,700 --> 00:01:23,810
over HTTPS which I'll be referring to as

29
00:01:19,340 --> 00:01:25,160
doe and so what we wanted to do as I

30
00:01:23,810 --> 00:01:26,600
mentioned is do it an extensive

31
00:01:25,160 --> 00:01:28,759
performance study of these different

32
00:01:26,600 --> 00:01:30,770
protocols so again not only measuring

33
00:01:28,760 --> 00:01:34,130
query response times but also page load

34
00:01:30,770 --> 00:01:36,020
times and measuring how the protocol is

35
00:01:34,130 --> 00:01:38,330
performed on emulated network conditions

36
00:01:36,020 --> 00:01:41,179
and we perform these measurements from

37
00:01:38,330 --> 00:01:43,130
five different Coble vantage points but

38
00:01:41,180 --> 00:01:46,400
for the sake of brevity I'm just going

39
00:01:43,130 --> 00:01:48,770
to be focusing on one in this talk but

40
00:01:46,400 --> 00:01:51,730
we have some ongoing work and which

41
00:01:48,770 --> 00:01:55,300
you'll be able to see the full results

42
00:01:51,730 --> 00:01:57,920
so the kind of key takeaway that I want

43
00:01:55,300 --> 00:02:01,399
for you to take away from this talk is

44
00:01:57,920 --> 00:02:02,060
that despite higher response times for

45
00:02:01,400 --> 00:02:03,440
doe

46
00:02:02,060 --> 00:02:07,160
we're actually observing that the page

47
00:02:03,440 --> 00:02:09,139
load times can be faster than with doe

48
00:02:07,160 --> 00:02:12,650
53 this is actually with dot and oh I

49
00:02:09,139 --> 00:02:15,440
should say which we didn't expect at all

50
00:02:12,650 --> 00:02:17,120
going into this work and we'll give a

51
00:02:15,440 --> 00:02:21,859
couple of reasons of why we think that

52
00:02:17,120 --> 00:02:23,630
might be the case so just starting out

53
00:02:21,860 --> 00:02:26,959
this is some DNS response signs we

54
00:02:23,630 --> 00:02:28,280
observed from CloudFlare at Ohio so

55
00:02:26,959 --> 00:02:33,230
the way we configured this is we use

56
00:02:28,280 --> 00:02:36,230
cloud flairs 1.1 1.1 resolver just

57
00:02:33,230 --> 00:02:39,379
measuring DNS response times to it so

58
00:02:36,230 --> 00:02:43,730
whenever we use dot endo we also reuse

59
00:02:39,379 --> 00:02:47,569
the TLS connections and as you can see

60
00:02:43,730 --> 00:02:50,149
here we see that for about 20 foot doe

61
00:02:47,569 --> 00:02:52,310
outperforms about 25 percent of dot

62
00:02:50,150 --> 00:02:55,040
queries as you can see on the bottom

63
00:02:52,310 --> 00:02:57,049
this is just for the first about 250

64
00:02:55,040 --> 00:03:00,530
milliseconds on the x-axis but then you

65
00:02:57,049 --> 00:03:02,840
can see on the shorter plot that this is

66
00:03:00,530 --> 00:03:06,530
going up to fifteen hundred milliseconds

67
00:03:02,840 --> 00:03:09,790
so although dot is taking over in the

68
00:03:06,530 --> 00:03:12,049
beginning doe manages to outperform it

69
00:03:09,790 --> 00:03:13,638
then what we're seeing is that actually

70
00:03:12,049 --> 00:03:15,230
in this kind of tail of the initial

71
00:03:13,639 --> 00:03:18,049
response times that doe is actually

72
00:03:15,230 --> 00:03:20,358
catching up to do 53 so it's not

73
00:03:18,049 --> 00:03:22,069
strictly the case that if you use an

74
00:03:20,359 --> 00:03:25,879
encrypted transport that you're going to

75
00:03:22,069 --> 00:03:27,230
get slower DNS response times and we see

76
00:03:25,879 --> 00:03:29,629
this with dot as well that's also

77
00:03:27,230 --> 00:03:33,198
catching up and I want to note that this

78
00:03:29,629 --> 00:03:34,940
is not only the case where we're

79
00:03:33,199 --> 00:03:37,459
catching up to a local resolver which

80
00:03:34,940 --> 00:03:40,400
when I say default though 53 I'm

81
00:03:37,459 --> 00:03:44,090
referring to the local just DNS resolver

82
00:03:40,400 --> 00:03:47,530
getting us to us over DHCP but this is

83
00:03:44,090 --> 00:03:53,989
also outperforming even CloudFlare zone

84
00:03:47,530 --> 00:03:55,159
dns resolver for Jeff 83 which will also

85
00:03:53,989 --> 00:03:58,729
go into that a bit more of why we think

86
00:03:55,159 --> 00:04:01,459
it might be the case this is with Google

87
00:03:58,729 --> 00:04:05,810
as well so same idea we have a vantage

88
00:04:01,459 --> 00:04:07,900
point on Amazon ec2 in Ohio we're

89
00:04:05,810 --> 00:04:10,370
comparing all the different protocols

90
00:04:07,900 --> 00:04:12,139
with Google's resolver and then also

91
00:04:10,370 --> 00:04:15,349
comparing the reference to the local

92
00:04:12,139 --> 00:04:18,139
resolver given by Amazon and we're

93
00:04:15,349 --> 00:04:19,909
seeing similar behavior that kind of in

94
00:04:18,139 --> 00:04:21,918
this tail responds times that doe is

95
00:04:19,909 --> 00:04:24,130
catching up to the different protocols

96
00:04:21,918 --> 00:04:27,198
so again it's not strictly the case that

97
00:04:24,130 --> 00:04:29,120
you're getting slower response times but

98
00:04:27,199 --> 00:04:30,860
rather there's this kind of interesting

99
00:04:29,120 --> 00:04:33,349
trend where you know very quickly

100
00:04:30,860 --> 00:04:34,789
actually within 250 milliseconds

101
00:04:33,349 --> 00:04:37,520
response times that the protocols are

102
00:04:34,789 --> 00:04:40,789
all catching up to each other and then

103
00:04:37,520 --> 00:04:42,349
lastly this is from quad 9 so

104
00:04:40,790 --> 00:04:45,260
interestingly we found that dough is

105
00:04:42,350 --> 00:04:48,100
actually a performing dot for almost all

106
00:04:45,260 --> 00:04:50,900
the queries there seems to be this

107
00:04:48,100 --> 00:04:54,050
behavior we observed where it appears as

108
00:04:50,900 --> 00:04:58,159
if the DNS responses are being cached

109
00:04:54,050 --> 00:04:59,930
from a quad nines dot resolver we

110
00:04:58,160 --> 00:05:01,880
reached out to them and try to

111
00:04:59,930 --> 00:05:04,550
understand the performance that we got

112
00:05:01,880 --> 00:05:05,780
showed them our source code and we had

113
00:05:04,550 --> 00:05:09,380
some initial conversation but it

114
00:05:05,780 --> 00:05:11,179
couldn't come to the conclusion but then

115
00:05:09,380 --> 00:05:14,150
we're also observing once again as with

116
00:05:11,180 --> 00:05:17,030
Google and CloudFlare that doe is

117
00:05:14,150 --> 00:05:22,820
catching up to traditional DNS or Dover

118
00:05:17,030 --> 00:05:24,799
t3 in the Taylor response times so the

119
00:05:22,820 --> 00:05:26,210
kind of key takeaway here is just in

120
00:05:24,800 --> 00:05:28,070
terms of query response times that doe

121
00:05:26,210 --> 00:05:30,370
can actually catch up to and even

122
00:05:28,070 --> 00:05:34,730
outperform we noticed in some cases

123
00:05:30,370 --> 00:05:36,590
dovid III this is within you know within

124
00:05:34,730 --> 00:05:38,780
CloudFlare within quad nine and within

125
00:05:36,590 --> 00:05:40,489
Google and so to kind of dig into what I

126
00:05:38,780 --> 00:05:42,919
mean by that a little more is we found

127
00:05:40,490 --> 00:05:45,770
that in terms of response times though

128
00:05:42,920 --> 00:05:49,250
actually has a higher mean overall but a

129
00:05:45,770 --> 00:05:52,820
lower variance then unencrypted DNS much

130
00:05:49,250 --> 00:05:54,530
lower variance and this is a result that

131
00:05:52,820 --> 00:05:57,290
we observed across different vantage

132
00:05:54,530 --> 00:05:58,429
points as well but again for this talk

133
00:05:57,290 --> 00:06:01,850
I'm only going to go into the results

134
00:05:58,430 --> 00:06:04,460
observed from ohio NAC jus and there's a

135
00:06:01,850 --> 00:06:06,380
couple of explanations we thought about

136
00:06:04,460 --> 00:06:08,539
one is just why a format caching where

137
00:06:06,380 --> 00:06:13,430
it might be the case that the entire Y

138
00:06:08,540 --> 00:06:15,710
format of is getting cached and for HTTP

139
00:06:13,430 --> 00:06:18,020
and that might enable faster response

140
00:06:15,710 --> 00:06:20,570
times not exactly clear how much they

141
00:06:18,020 --> 00:06:23,120
might improve response times but we also

142
00:06:20,570 --> 00:06:26,360
thought that maybe in the case of a CDN

143
00:06:23,120 --> 00:06:28,700
like CloudFlare they might be doing HTTP

144
00:06:26,360 --> 00:06:31,930
caching at the edge very close to the

145
00:06:28,700 --> 00:06:34,930
user which might also be improving

146
00:06:31,930 --> 00:06:40,220
response times for doe in comparison to

147
00:06:34,930 --> 00:06:41,600
traditional DNS so we also want as I

148
00:06:40,220 --> 00:06:45,470
mentioned earlier wanted to emulate

149
00:06:41,600 --> 00:06:46,970
different set of their conditions so the

150
00:06:45,470 --> 00:06:48,200
reason why we did this is that you know

151
00:06:46,970 --> 00:06:50,210
we're starting to see that doe and dot

152
00:06:48,200 --> 00:06:53,300
are being offered on phones whether it's

153
00:06:50,210 --> 00:06:55,370
cloud layers 1.1 don't one-to-one

154
00:06:53,300 --> 00:06:58,760
we're also saying that Android 9

155
00:06:55,370 --> 00:07:00,170
supports d-o-t and so we thought it

156
00:06:58,760 --> 00:07:01,880
would be important to measure how these

157
00:07:00,170 --> 00:07:03,860
different protocols perform on phones

158
00:07:01,880 --> 00:07:07,610
and given that they're becoming more

159
00:07:03,860 --> 00:07:09,290
adoption for encrypted DNS protocols and

160
00:07:07,610 --> 00:07:12,290
we figured the performance might also be

161
00:07:09,290 --> 00:07:14,780
significantly different but

162
00:07:12,290 --> 00:07:16,760
unfortunately we weren't able to set up

163
00:07:14,780 --> 00:07:19,700
a our measurements on a real mobile

164
00:07:16,760 --> 00:07:22,820
network so we settled for emulating

165
00:07:19,700 --> 00:07:25,159
these cellular conditions so we did 4g

166
00:07:22,820 --> 00:07:27,980
kind of a lossy 4g where it's the same

167
00:07:25,160 --> 00:07:32,300
4G conditions but with 1% more packet

168
00:07:27,980 --> 00:07:36,530
loss and 3G these were conditions that

169
00:07:32,300 --> 00:07:38,950
we were able to emulate based on numbers

170
00:07:36,530 --> 00:07:43,369
that we got from an open signal report

171
00:07:38,950 --> 00:07:45,440
so this is comparing all the different

172
00:07:43,370 --> 00:07:47,330
protocols for CloudFlare at Ohio in

173
00:07:45,440 --> 00:07:50,620
terms of page load times and the way you

174
00:07:47,330 --> 00:07:54,919
can read this is that this is taking the

175
00:07:50,620 --> 00:07:56,630
difference in page load times for you

176
00:07:54,920 --> 00:07:58,430
know given two protocols for example the

177
00:07:56,630 --> 00:08:00,740
left you have CloudFlare dot and client

178
00:07:58,430 --> 00:08:02,330
flare doe 53 you're taking the page load

179
00:08:00,740 --> 00:08:05,960
times comparing them to each other and

180
00:08:02,330 --> 00:08:07,490
subtract the difference and the kind of

181
00:08:05,960 --> 00:08:10,609
vertical line you see in the middle is

182
00:08:07,490 --> 00:08:13,430
the medium so basically the way you can

183
00:08:10,610 --> 00:08:16,460
read this is that if you're looking at

184
00:08:13,430 --> 00:08:18,770
dot doe and doe 53 in terms of page load

185
00:08:16,460 --> 00:08:21,049
times in the meeting case they're all

186
00:08:18,770 --> 00:08:22,909
performing very similarly right there

187
00:08:21,050 --> 00:08:26,060
doesn't seem to be this observable

188
00:08:22,910 --> 00:08:28,790
difference between the protocols and

189
00:08:26,060 --> 00:08:30,500
page load times and this is on in just

190
00:08:28,790 --> 00:08:32,900
the default network conditions without

191
00:08:30,500 --> 00:08:37,010
any kind of emulation or traffic shaping

192
00:08:32,900 --> 00:08:38,990
at all so for example we see that dot

193
00:08:37,010 --> 00:08:42,860
was actually only one millisecond slower

194
00:08:38,990 --> 00:08:44,920
in the median page load time than 53 so

195
00:08:42,860 --> 00:08:47,540
really no observable difference there

196
00:08:44,920 --> 00:08:52,760
and the case of doe it was 19

197
00:08:47,540 --> 00:08:54,170
milliseconds slower then doe 53 so we're

198
00:08:52,760 --> 00:08:56,569
kind of seeing this ordering of where

199
00:08:54,170 --> 00:08:58,910
you know dot is performing slightly

200
00:08:56,570 --> 00:09:03,380
slower than w3 and then doe is

201
00:08:58,910 --> 00:09:06,170
performing slightly slower than dot so

202
00:09:03,380 --> 00:09:08,209
now we go on to the emulated 4G and

203
00:09:06,170 --> 00:09:10,040
our conditions what we're seeing is that

204
00:09:08,209 --> 00:09:13,760
the performance is changing a little bit

205
00:09:10,040 --> 00:09:16,969
so we still see the same performance

206
00:09:13,760 --> 00:09:18,740
with dot we're on these emulated 4G

207
00:09:16,970 --> 00:09:21,680
network conditions that dot is

208
00:09:18,740 --> 00:09:23,769
performing just slightly slower then doe

209
00:09:21,680 --> 00:09:26,630
53 in the kind of median page load time

210
00:09:23,769 --> 00:09:29,060
but when you look at doe it's gotten

211
00:09:26,630 --> 00:09:30,800
significantly slower where doe is 70

212
00:09:29,060 --> 00:09:36,199
milliseconds slower in the median page

213
00:09:30,800 --> 00:09:37,819
load time in doe 53 and now if you go

214
00:09:36,199 --> 00:09:39,740
into the lossy for Janee where we took

215
00:09:37,820 --> 00:09:42,829
the same 4G settings then add an

216
00:09:39,740 --> 00:09:44,750
additional 1% packet loss was things

217
00:09:42,829 --> 00:09:47,779
even more interesting behavior right

218
00:09:44,750 --> 00:09:52,250
we're now dot has gotten 62 milliseconds

219
00:09:47,779 --> 00:09:54,470
faster than traditional DNS in page load

220
00:09:52,250 --> 00:09:58,910
times which we didn't expect to see at

221
00:09:54,470 --> 00:10:02,180
all and but though now doe is actually

222
00:09:58,910 --> 00:10:06,230
also gotten faster than 253 in terms of

223
00:10:02,180 --> 00:10:07,910
page load times now 20 milliseconds so

224
00:10:06,230 --> 00:10:10,699
there's this kind of interesting

225
00:10:07,910 --> 00:10:13,279
behavior whereas you've gotten to worse

226
00:10:10,699 --> 00:10:15,349
than a network conditions that dot doe

227
00:10:13,279 --> 00:10:20,540
are both actually outperform traditional

228
00:10:15,350 --> 00:10:24,380
DNS but everything kind of collapses

229
00:10:20,540 --> 00:10:27,680
when you go to 3G network conditions so

230
00:10:24,380 --> 00:10:30,410
you're seeing here that dot and OU are

231
00:10:27,680 --> 00:10:34,040
performing much slower than unencrypted

232
00:10:30,410 --> 00:10:39,130
traditional DNS so in this case dot is

233
00:10:34,040 --> 00:10:41,120
197 milliseconds slower than doe 53 and

234
00:10:39,130 --> 00:10:45,649
similar you're saying with though that

235
00:10:41,120 --> 00:10:47,690
it's 260 milliseconds slower so the kind

236
00:10:45,649 --> 00:10:51,199
of key takeaway here just to reiterate

237
00:10:47,690 --> 00:10:53,420
is that we're seeing that it's not

238
00:10:51,199 --> 00:10:55,819
necessarily the case that just because

239
00:10:53,420 --> 00:10:58,430
they're using dot or doe that you're

240
00:10:55,819 --> 00:10:59,569
going to get worsening performance that

241
00:10:58,430 --> 00:11:01,099
actually under certain Network

242
00:10:59,569 --> 00:11:04,189
conditions you might observe the case

243
00:11:01,100 --> 00:11:06,110
where it's actually faster and this was

244
00:11:04,190 --> 00:11:08,269
a really unexpected finding we weren't

245
00:11:06,110 --> 00:11:09,380
sure how to how we gotten to this but

246
00:11:08,269 --> 00:11:11,019
the kind of most likely explanation

247
00:11:09,380 --> 00:11:13,850
we've got to is that it might be

248
00:11:11,019 --> 00:11:17,870
retransmission times with TCP compared

249
00:11:13,850 --> 00:11:19,160
to UDP so the TCP packets could be

250
00:11:17,870 --> 00:11:24,139
retransmitted with

251
00:11:19,160 --> 00:11:26,089
two round-trip times whereas for doe 53

252
00:11:24,139 --> 00:11:28,550
the timeout is set to five seconds by

253
00:11:26,089 --> 00:11:32,569
default and Linux with the resolve

254
00:11:28,550 --> 00:11:34,699
confer as you get into lossy or network

255
00:11:32,569 --> 00:11:38,000
conditions particularly as you observed

256
00:11:34,699 --> 00:11:40,758
it going from 4G to the lossy 4G it

257
00:11:38,000 --> 00:11:42,139
might be the case that as packets are

258
00:11:40,759 --> 00:11:45,310
getting retransmitted that you could

259
00:11:42,139 --> 00:11:48,589
actually retransmit faster over TCP

260
00:11:45,310 --> 00:11:50,628
which we think might help the

261
00:11:48,589 --> 00:11:52,459
performance of dot and oh and page load

262
00:11:50,629 --> 00:11:57,620
times despite the fact that you might

263
00:11:52,459 --> 00:11:59,719
have higher DNS response times so just

264
00:11:57,620 --> 00:12:01,730
to summarize we did a performance study

265
00:11:59,720 --> 00:12:03,709
of deputy through dokdo where we're

266
00:12:01,730 --> 00:12:07,009
comparing query response times page load

267
00:12:03,709 --> 00:12:09,170
times and emulate Network conditions a

268
00:12:07,009 --> 00:12:10,910
future work we're wanting to do reforms

269
00:12:09,170 --> 00:12:13,819
analysis over a diverse set of networks

270
00:12:10,910 --> 00:12:15,800
where might be residential ISPs across

271
00:12:13,819 --> 00:12:18,680
the United States rather than just I'm

272
00:12:15,800 --> 00:12:21,410
Amazon ec2 instances and we also want to

273
00:12:18,680 --> 00:12:24,800
do measurements in networks that are

274
00:12:21,410 --> 00:12:27,380
kind of further away from CD ins we're

275
00:12:24,800 --> 00:12:29,569
working with a University in South

276
00:12:27,380 --> 00:12:32,560
Africa it's been colleagues there to run

277
00:12:29,569 --> 00:12:35,779
some measurements across Africa and some

278
00:12:32,560 --> 00:12:38,300
instances they have set up there so I

279
00:12:35,779 --> 00:12:40,160
know this was a short talk and last talk

280
00:12:38,300 --> 00:12:41,959
of the day so I appreciate you taking

281
00:12:40,160 --> 00:12:44,079
the time to listen and I'll take any

282
00:12:41,959 --> 00:12:44,079
questions

283
00:12:50,960 --> 00:12:56,170
yeah I'm Carl Auerbach and I was

284
00:12:53,779 --> 00:12:58,850
wondering for you to observe any sort of

285
00:12:56,170 --> 00:13:02,240
issues with slow start and congested

286
00:12:58,850 --> 00:13:03,320
back off on TC the underlying TCP that's

287
00:13:02,240 --> 00:13:04,940
one of my questions once can give you

288
00:13:03,320 --> 00:13:06,620
the whole ystem you can dresser the

289
00:13:04,940 --> 00:13:08,000
other always have you tried anything out

290
00:13:06,620 --> 00:13:09,440
with quick to see if there's any other

291
00:13:08,000 --> 00:13:11,660
variations the using that is the

292
00:13:09,440 --> 00:13:13,730
underlying transport and the third part

293
00:13:11,660 --> 00:13:16,120
has have you dealt with it this sort of

294
00:13:13,730 --> 00:13:18,560
thing over any buffer bloat situations

295
00:13:16,120 --> 00:13:20,779
so to your second question about whether

296
00:13:18,560 --> 00:13:23,089
we've tried this a quick we haven't yet

297
00:13:20,779 --> 00:13:24,860
this was a strictly over using for

298
00:13:23,089 --> 00:13:26,720
example for dough using just HTTP to

299
00:13:24,860 --> 00:13:29,300
which we'd configure just because that

300
00:13:26,720 --> 00:13:32,089
was the recommended setting and the RFC

301
00:13:29,300 --> 00:13:33,829
848 for as far as any issues with buffer

302
00:13:32,089 --> 00:13:35,810
bloat that wasn't something that we had

303
00:13:33,830 --> 00:13:40,130
measured or observed but that would be

304
00:13:35,810 --> 00:13:41,959
an interesting thing to look into yeah I

305
00:13:40,130 --> 00:13:48,080
mean that's just something that we we

306
00:13:41,959 --> 00:13:51,199
didn't look into her measure and it's

307
00:13:48,080 --> 00:13:53,510
all a con and so all your DNS over 53

308
00:13:51,200 --> 00:13:56,420
queries UDP or were there any TCP

309
00:13:53,510 --> 00:13:59,750
queries in there they were just over UDP

310
00:13:56,420 --> 00:14:01,010
for this study but you know again as we

311
00:13:59,750 --> 00:14:02,510
got in comments on this presentation

312
00:14:01,010 --> 00:14:04,790
before about wanting to also measure

313
00:14:02,510 --> 00:14:06,860
over TCP because we just didn't expect

314
00:14:04,790 --> 00:14:08,900
at all to get this kind of a result

315
00:14:06,860 --> 00:14:10,100
so in ongoing measurements that we're

316
00:14:08,900 --> 00:14:12,339
doing now we're also going to be

317
00:14:10,100 --> 00:14:16,990
measuring over a TCP to really tease out

318
00:14:12,339 --> 00:14:16,990
this performance it Thanks

319
00:14:22,080 --> 00:14:32,389
all right thank you

320
00:14:24,340 --> 00:14:32,389
[Applause]

321
00:14:37,720 --> 00:14:39,779
you

