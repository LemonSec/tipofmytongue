1
00:00:10,099 --> 00:00:13,980
good afternoon I hope you all had a good

2
00:00:12,330 --> 00:00:17,880
lunch either at the Women in Technology

3
00:00:13,980 --> 00:00:19,439
lunch or the Maine lunch or somewhere

4
00:00:17,880 --> 00:00:20,580
out eating good barbecue which is

5
00:00:19,439 --> 00:00:23,460
something I hope to do when I'm still

6
00:00:20,580 --> 00:00:25,560
here so this afternoon we have a network

7
00:00:23,460 --> 00:00:28,050
automation focus and our speaker for

8
00:00:25,560 --> 00:00:30,900
this tutorial will be Gerry Shulman who

9
00:00:28,050 --> 00:00:32,580
works for MLB my energy does not know

10
00:00:30,900 --> 00:00:35,910
all the start baseball players so you

11
00:00:32,580 --> 00:00:37,890
can ask but anyways he's gonna learn

12
00:00:35,910 --> 00:00:39,330
about network ready for use test he's

13
00:00:37,890 --> 00:00:40,440
gonna teach us about network ready for

14
00:00:39,330 --> 00:00:42,030
use testing which is something I'm

15
00:00:40,440 --> 00:00:44,099
fascinated by so I'll be sitting and

16
00:00:42,030 --> 00:00:46,110
watching the whole thing - Jeremy thank

17
00:00:44,100 --> 00:00:48,540
you thank you thanks everybody for

18
00:00:46,110 --> 00:00:50,460
joining after lunch this is uh this is a

19
00:00:48,540 --> 00:00:55,949
tough slot and we've got two hours

20
00:00:50,460 --> 00:00:59,549
together so everybody settle in what I'm

21
00:00:55,949 --> 00:01:01,470
gonna do is show you something we built

22
00:00:59,549 --> 00:01:05,390
at major league baseball to help us

23
00:01:01,470 --> 00:01:08,548
through a project so we use the term

24
00:01:05,390 --> 00:01:11,070
network ready for use and this approach

25
00:01:08,549 --> 00:01:13,200
uses an open source piece of software

26
00:01:11,070 --> 00:01:15,719
called PI test I'm gonna show you what

27
00:01:13,200 --> 00:01:17,520
we did with it just a little bit about

28
00:01:15,719 --> 00:01:19,140
me I've been in the networking business

29
00:01:17,520 --> 00:01:22,259
for twenty years mostly on the vendor

30
00:01:19,140 --> 00:01:24,000
side so I am now heading up network

31
00:01:22,259 --> 00:01:26,070
automation at major league baseball it's

32
00:01:24,000 --> 00:01:27,539
the first time that I've been on the

33
00:01:26,070 --> 00:01:29,158
customer side which is really great

34
00:01:27,539 --> 00:01:33,200
because now I get to go to all the fancy

35
00:01:29,159 --> 00:01:36,179
dinners and not pay for them I've been

36
00:01:33,200 --> 00:01:39,450
exclusively focused in the area of

37
00:01:36,179 --> 00:01:41,219
Network automation since 2012 I happen

38
00:01:39,450 --> 00:01:42,479
to been at Juniper Networks at the time

39
00:01:41,219 --> 00:01:45,149
and got to do some really amazing things

40
00:01:42,479 --> 00:01:48,539
and really started looking at how can we

41
00:01:45,149 --> 00:01:50,310
take the tools that the server and now

42
00:01:48,539 --> 00:01:53,369
DevOps people use and apply them to

43
00:01:50,310 --> 00:01:55,259
networking I'm 100% focused on network

44
00:01:53,369 --> 00:01:56,420
automation I don't identify as a network

45
00:01:55,259 --> 00:01:58,649
engineer I'm not a network engineer

46
00:01:56,420 --> 00:02:00,119
that's too hard for me I'm a software

47
00:01:58,649 --> 00:02:02,369
engineer that's it's a lot easier than

48
00:02:00,119 --> 00:02:04,289
being a network engineer trust me I do a

49
00:02:02,369 --> 00:02:06,810
lot of open source and community stuff I

50
00:02:04,289 --> 00:02:08,759
really love doing this type of thing so

51
00:02:06,810 --> 00:02:10,949
thank you nanog for letting me for

52
00:02:08,758 --> 00:02:13,220
having me and many thanks to major

53
00:02:10,949 --> 00:02:15,149
league baseball for letting me be here

54
00:02:13,220 --> 00:02:17,040
what we're going to cover in this

55
00:02:15,150 --> 00:02:19,710
tutorial everything that I'm going to

56
00:02:17,040 --> 00:02:21,600
show you is available on github so you

57
00:02:19,710 --> 00:02:23,130
can always go back and play with this in

58
00:02:21,600 --> 00:02:25,230
fact my hope

59
00:02:23,130 --> 00:02:26,910
with presenting this information to you

60
00:02:25,230 --> 00:02:28,769
is not for you to understand all the

61
00:02:26,910 --> 00:02:30,299
things that I'm gonna talk about but

62
00:02:28,770 --> 00:02:31,950
it's just to get you interested so that

63
00:02:30,300 --> 00:02:33,660
you will spend some time and play with

64
00:02:31,950 --> 00:02:36,019
it and I hope that I've made the

65
00:02:33,660 --> 00:02:38,430
tutorial information on github

66
00:02:36,020 --> 00:02:39,930
accessible so that you have an easy time

67
00:02:38,430 --> 00:02:42,060
using it but I'm going to go through all

68
00:02:39,930 --> 00:02:44,190
of the things so that you can hopefully

69
00:02:42,060 --> 00:02:45,630
have a good time with it I'm going to

70
00:02:44,190 --> 00:02:47,070
talk about what I mean by network ready

71
00:02:45,630 --> 00:02:48,150
for use

72
00:02:47,070 --> 00:02:50,940
I'm going to talk about some general

73
00:02:48,150 --> 00:02:54,600
testing concepts I'm going to focus a

74
00:02:50,940 --> 00:02:56,700
lot on using PI test as a tool and I'm

75
00:02:54,600 --> 00:03:00,960
going to be doing a lot of live coding

76
00:02:56,700 --> 00:03:03,119
so if you are new to the world of Python

77
00:03:00,960 --> 00:03:04,920
then you're gonna see a lot of Python if

78
00:03:03,120 --> 00:03:06,360
you're familiar with Python then you're

79
00:03:04,920 --> 00:03:09,299
gonna see some really interesting stuff

80
00:03:06,360 --> 00:03:11,340
with Python if you have questions I'm

81
00:03:09,300 --> 00:03:12,600
gonna take like little breaks in between

82
00:03:11,340 --> 00:03:13,920
so we're gonna do a little bit of slides

83
00:03:12,600 --> 00:03:15,750
a little bit of coding a little bit

84
00:03:13,920 --> 00:03:18,149
slides a little coding just to break it

85
00:03:15,750 --> 00:03:20,130
up and if you have some really poignant

86
00:03:18,150 --> 00:03:21,360
questions you'd like to ask please do or

87
00:03:20,130 --> 00:03:25,290
if you'd like to hold them to the end

88
00:03:21,360 --> 00:03:28,020
I'll try to save time so about you guys

89
00:03:25,290 --> 00:03:30,090
I'm hoping that some of you have

90
00:03:28,020 --> 00:03:31,530
experience with Python just by a raise

91
00:03:30,090 --> 00:03:36,150
of hands how many people have been

92
00:03:31,530 --> 00:03:37,410
working with Python for over a year okay

93
00:03:36,150 --> 00:03:39,870
so for the people who can't see the

94
00:03:37,410 --> 00:03:41,010
audience that's that's probably 70% of

95
00:03:39,870 --> 00:03:43,550
the audience how many people been

96
00:03:41,010 --> 00:03:48,510
working with it for over two years

97
00:03:43,550 --> 00:03:49,830
okay maybe 50% over three years okay now

98
00:03:48,510 --> 00:03:51,750
we're getting down into the the teams

99
00:03:49,830 --> 00:03:55,170
okay how many people are familiar with

100
00:03:51,750 --> 00:03:56,880
PI tests have used PI tests okay so a

101
00:03:55,170 --> 00:03:58,920
good number of people not not the vast

102
00:03:56,880 --> 00:04:00,510
majority so this will also be a little

103
00:03:58,920 --> 00:04:03,959
bit of an introduction to PI test and

104
00:04:00,510 --> 00:04:05,399
what we do with it I'm presuming most of

105
00:04:03,960 --> 00:04:07,860
the folks here are network engineers who

106
00:04:05,400 --> 00:04:09,690
are working on automation projects but

107
00:04:07,860 --> 00:04:13,070
how many people here are software

108
00:04:09,690 --> 00:04:16,380
developers working with networking teams

109
00:04:13,070 --> 00:04:18,959
ok so there's about maybe 10 folks here

110
00:04:16,380 --> 00:04:20,100
that's really encouraging I think we're

111
00:04:18,959 --> 00:04:22,739
gonna see more and more of that over

112
00:04:20,100 --> 00:04:25,860
time I'm very encouraged by that ok

113
00:04:22,740 --> 00:04:27,300
about PI test PI test is an open-source

114
00:04:25,860 --> 00:04:30,660
piece of software that software

115
00:04:27,300 --> 00:04:33,330
engineers use primarily to unit test

116
00:04:30,660 --> 00:04:35,250
their software so if I write code and I

117
00:04:33,330 --> 00:04:35,900
want to test my functions before I you

118
00:04:35,250 --> 00:04:39,320
know put it

119
00:04:35,900 --> 00:04:41,510
production I would use this code to test

120
00:04:39,320 --> 00:04:44,120
my stuff to make sure that it works

121
00:04:41,510 --> 00:04:45,590
before I hand it off for use we are not

122
00:04:44,120 --> 00:04:48,080
going to use it for that purpose

123
00:04:45,590 --> 00:04:49,359
we are going to consider our network as

124
00:04:48,080 --> 00:04:51,770
the code you hear the term

125
00:04:49,360 --> 00:04:53,690
infrastructure is code a lot so we're

126
00:04:51,770 --> 00:04:55,130
going to think of our network as code

127
00:04:53,690 --> 00:04:58,219
we're going to treat it as such which

128
00:04:55,130 --> 00:05:00,590
means we're going to test it and what

129
00:04:58,220 --> 00:05:04,310
we're going to test is the operational

130
00:05:00,590 --> 00:05:05,750
states of our network so most of the

131
00:05:04,310 --> 00:05:07,400
talks that I've seen for Network

132
00:05:05,750 --> 00:05:10,130
automation have to do with configuration

133
00:05:07,400 --> 00:05:11,989
management that's great it's important

134
00:05:10,130 --> 00:05:13,400
this is not that we're not going to be

135
00:05:11,990 --> 00:05:15,470
talking about any configuration

136
00:05:13,400 --> 00:05:17,419
management this is all about the

137
00:05:15,470 --> 00:05:18,919
operational state of the network and

138
00:05:17,419 --> 00:05:23,690
I'll get into the details of what that

139
00:05:18,919 --> 00:05:25,490
means so when I talk about network ready

140
00:05:23,690 --> 00:05:29,330
for use what we're really trying to

141
00:05:25,490 --> 00:05:31,970
capture is does the network operational

142
00:05:29,330 --> 00:05:36,198
State meet the desired outcome of the

143
00:05:31,970 --> 00:05:38,180
design so normally you would have this

144
00:05:36,199 --> 00:05:39,860
workflow pattern of I'm going to design

145
00:05:38,180 --> 00:05:41,450
a network or I'm going to design some

146
00:05:39,860 --> 00:05:44,120
kind of change that I want to make to

147
00:05:41,450 --> 00:05:45,830
the network I'm going to build that

148
00:05:44,120 --> 00:05:46,639
change I'm going to make a configuration

149
00:05:45,830 --> 00:05:48,620
change I'm going to push that

150
00:05:46,639 --> 00:05:49,970
configuration change out and then I'm

151
00:05:48,620 --> 00:05:51,620
going to run some tests to make sure

152
00:05:49,970 --> 00:05:55,010
that the the resulting state of the

153
00:05:51,620 --> 00:05:56,539
network is I is as I expect it to be so

154
00:05:55,010 --> 00:05:58,729
maybe you're making a routing change on

155
00:05:56,539 --> 00:06:00,320
one router and then you go and you look

156
00:05:58,729 --> 00:06:02,389
at the five other routers to see did

157
00:06:00,320 --> 00:06:04,430
that route propagate so when I talk

158
00:06:02,389 --> 00:06:06,979
about operational state of the network

159
00:06:04,430 --> 00:06:09,320
what I mean is is did the the route

160
00:06:06,979 --> 00:06:12,590
propagate for example like do I see it

161
00:06:09,320 --> 00:06:15,169
where I expect to see it and in order to

162
00:06:12,590 --> 00:06:16,580
understand if our job is done as a

163
00:06:15,169 --> 00:06:18,320
network engineer or our change is

164
00:06:16,580 --> 00:06:20,659
complete we want to have some confidence

165
00:06:18,320 --> 00:06:23,330
that everything is working as we expect

166
00:06:20,660 --> 00:06:25,820
and so as part of this validation block

167
00:06:23,330 --> 00:06:27,770
we we run what is called network ready

168
00:06:25,820 --> 00:06:29,930
for use and so that's just a term that

169
00:06:27,770 --> 00:06:31,460
we use I think other people might use

170
00:06:29,930 --> 00:06:34,160
that term has anybody heard Network

171
00:06:31,460 --> 00:06:36,979
ready for use as a term ok so it's not

172
00:06:34,160 --> 00:06:38,990
very popular term I heard it because we

173
00:06:36,979 --> 00:06:41,719
actually asked a vendor to quote a

174
00:06:38,990 --> 00:06:43,909
software to build to do what I'm showing

175
00:06:41,720 --> 00:06:46,550
you and they use that term so I like

176
00:06:43,909 --> 00:06:49,200
that term so I'm gonna talk about what

177
00:06:46,550 --> 00:06:51,000
we did at major league baseball we

178
00:06:49,200 --> 00:06:54,090
are moving into a new building it's very

179
00:06:51,000 --> 00:06:55,500
shiny but we have our old we have queue

180
00:06:54,090 --> 00:06:57,570
offices and we're moving into one new

181
00:06:55,500 --> 00:07:00,210
building and that one new building is

182
00:06:57,570 --> 00:07:02,969
multiple floors like maybe six floors in

183
00:07:00,210 --> 00:07:04,289
this new building and we have hundreds

184
00:07:02,970 --> 00:07:05,010
of pieces of equipment that we're

185
00:07:04,290 --> 00:07:06,690
putting into it

186
00:07:05,010 --> 00:07:09,360
hundreds of switches that we're putting

187
00:07:06,690 --> 00:07:11,160
into it all different types of models

188
00:07:09,360 --> 00:07:13,650
they do different types of functions in

189
00:07:11,160 --> 00:07:16,740
our network but what makes it very

190
00:07:13,650 --> 00:07:17,909
challenging is that in New York the only

191
00:07:16,740 --> 00:07:20,850
people that can actually do the

192
00:07:17,910 --> 00:07:21,930
installation are the Union folk so we

193
00:07:20,850 --> 00:07:24,090
have one group of people that is

194
00:07:21,930 --> 00:07:25,470
physically installing the racks another

195
00:07:24,090 --> 00:07:27,659
group that is physically installing the

196
00:07:25,470 --> 00:07:29,610
the switches and power another group

197
00:07:27,660 --> 00:07:30,450
that is running cabling and then

198
00:07:29,610 --> 00:07:31,830
depending if we're going through

199
00:07:30,450 --> 00:07:33,060
different rooms or different floors we

200
00:07:31,830 --> 00:07:35,969
have all this other different cabling

201
00:07:33,060 --> 00:07:37,830
and so while this is a Greenfield

202
00:07:35,970 --> 00:07:40,440
environment what we're really doing is

203
00:07:37,830 --> 00:07:42,930
we're we wanted to be able to awed it

204
00:07:40,440 --> 00:07:44,730
did the installation team do their job

205
00:07:42,930 --> 00:07:47,010
like when they say they're done they

206
00:07:44,730 --> 00:07:49,440
said yeah we set up you know MDF a and

207
00:07:47,010 --> 00:07:51,690
that room is done we since we didn't

208
00:07:49,440 --> 00:07:53,400
install it we need to know did they did

209
00:07:51,690 --> 00:07:54,930
they do it right is it cabled correctly

210
00:07:53,400 --> 00:07:57,599
did they do their job is it is it

211
00:07:54,930 --> 00:07:59,160
actually done and if it isn't done how

212
00:07:57,600 --> 00:08:01,050
can we pinpoint where the mistakes are

213
00:07:59,160 --> 00:08:04,610
so that we can give them information so

214
00:08:01,050 --> 00:08:07,410
they they can go fix their problems so

215
00:08:04,610 --> 00:08:10,080
we broke this up into two phases the

216
00:08:07,410 --> 00:08:12,720
first phase was specifically and only on

217
00:08:10,080 --> 00:08:15,060
the physical layer meaning you know did

218
00:08:12,720 --> 00:08:16,260
we have our devices on net meaning when

219
00:08:15,060 --> 00:08:18,000
they plugged them in and turn them on

220
00:08:16,260 --> 00:08:20,010
did we see them on our management

221
00:08:18,000 --> 00:08:22,470
network could we onboard them into our

222
00:08:20,010 --> 00:08:24,810
management platforms were the optics

223
00:08:22,470 --> 00:08:26,490
installed properly and was cabling

224
00:08:24,810 --> 00:08:29,100
installed properly meaning did they

225
00:08:26,490 --> 00:08:32,810
cable things together correctly now as

226
00:08:29,100 --> 00:08:35,370
as kind of basic as this might sound

227
00:08:32,809 --> 00:08:37,109
this was a really interesting use case

228
00:08:35,370 --> 00:08:38,400
for operational state because it had

229
00:08:37,110 --> 00:08:40,349
nothing to do with configuration

230
00:08:38,400 --> 00:08:42,959
management and there's nothing on the

231
00:08:40,349 --> 00:08:45,000
Box quote configured that we could use

232
00:08:42,960 --> 00:08:47,910
to know whether or not they did the job

233
00:08:45,000 --> 00:08:49,980
right you know we had to have this set

234
00:08:47,910 --> 00:08:52,020
of information that we knew what it was

235
00:08:49,980 --> 00:08:53,430
supposed to be based on our design like

236
00:08:52,020 --> 00:08:55,920
we knew that these types of optics had

237
00:08:53,430 --> 00:08:59,699
to be long range versus short range etc

238
00:08:55,920 --> 00:09:01,319
etc we knew what that was so when we

239
00:08:59,700 --> 00:09:02,730
would say that they were done it was a

240
00:09:01,320 --> 00:09:05,040
function of the

241
00:09:02,730 --> 00:09:06,329
halation crew was done so that our

242
00:09:05,040 --> 00:09:08,819
network engineering team could then

243
00:09:06,329 --> 00:09:11,699
deploy the services that we could then

244
00:09:08,820 --> 00:09:13,470
allow the rest of the business to turn

245
00:09:11,699 --> 00:09:16,949
up their boxes so that would be phase

246
00:09:13,470 --> 00:09:20,790
two phase two was checking all of the

247
00:09:16,949 --> 00:09:23,370
protocol states you know em lag LACP BGP

248
00:09:20,790 --> 00:09:25,439
all of the protocols did they come up as

249
00:09:23,370 --> 00:09:27,779
we expect them so that when the when the

250
00:09:25,440 --> 00:09:30,300
phone team wants to deploy their phones

251
00:09:27,779 --> 00:09:32,279
they would work or when the broadcast

252
00:09:30,300 --> 00:09:34,199
media feed people wanted to deploy their

253
00:09:32,279 --> 00:09:35,970
equipment and use the network that it

254
00:09:34,199 --> 00:09:37,769
would work because we have all these

255
00:09:35,970 --> 00:09:39,720
many many different teams and

256
00:09:37,769 --> 00:09:43,139
organizations throughout our company

257
00:09:39,720 --> 00:09:45,269
that are users of our network so network

258
00:09:43,139 --> 00:09:48,510
ready for use for them meant they could

259
00:09:45,269 --> 00:09:50,519
start to deploy their equipment so I'm

260
00:09:48,510 --> 00:09:53,310
only going to focus on phase one which

261
00:09:50,519 --> 00:09:56,339
is you know optics and cabling and and

262
00:09:53,310 --> 00:09:58,109
the way that this story begins is we as

263
00:09:56,339 --> 00:10:00,389
network engineers we handed over these

264
00:09:58,110 --> 00:10:01,829
spreadsheets to the the installation

265
00:10:00,389 --> 00:10:04,470
crew and maybe you've seen spreadsheets

266
00:10:01,829 --> 00:10:06,120
like these which basically says this box

267
00:10:04,470 --> 00:10:07,589
on this interface is supposed to have

268
00:10:06,120 --> 00:10:09,269
this optic it's supposed to use this

269
00:10:07,589 --> 00:10:11,880
type of cable and it's supposed to be

270
00:10:09,269 --> 00:10:13,319
plugged into this other other end and we

271
00:10:11,880 --> 00:10:14,850
would give them this information and

272
00:10:13,319 --> 00:10:18,750
they would go off and do their

273
00:10:14,850 --> 00:10:20,190
installation job and what we had to do

274
00:10:18,750 --> 00:10:21,990
is we had to audit that we wanted to

275
00:10:20,190 --> 00:10:23,160
make sure that transceiver the right

276
00:10:21,990 --> 00:10:26,100
transceivers were in the right

277
00:10:23,160 --> 00:10:27,660
interfaces and not the wrong interfaces

278
00:10:26,100 --> 00:10:29,250
because if somebody puts a hundred gig

279
00:10:27,660 --> 00:10:31,560
optic in the wrong interface and it's

280
00:10:29,250 --> 00:10:34,910
not being used that's $10,000 we just

281
00:10:31,560 --> 00:10:37,349
lost in a sea of 20,000 interfaces so

282
00:10:34,910 --> 00:10:38,550
finding all these mistakes is our

283
00:10:37,350 --> 00:10:40,769
needles in a haystack

284
00:10:38,550 --> 00:10:43,109
almost types of problems and when it

285
00:10:40,769 --> 00:10:44,699
comes into the cabling what we what we

286
00:10:43,110 --> 00:10:46,740
discovered is a lot of the cabling

287
00:10:44,699 --> 00:10:48,660
problems weren't just that they cabled

288
00:10:46,740 --> 00:10:50,430
something to the wrong port sometimes

289
00:10:48,660 --> 00:10:52,319
they flipped the polarity on the

290
00:10:50,430 --> 00:10:55,410
fiber-optic so that the link didn't even

291
00:10:52,319 --> 00:10:57,000
come up but as an installation crew they

292
00:10:55,410 --> 00:10:58,889
didn't see that mistake they just said

293
00:10:57,000 --> 00:11:00,480
we plugged it in we're done and they

294
00:10:58,889 --> 00:11:02,370
couldn't see the lights because there's

295
00:11:00,480 --> 00:11:04,019
so many fibers running through these you

296
00:11:02,370 --> 00:11:05,699
know ITF systems that they just couldn't

297
00:11:04,019 --> 00:11:07,769
see the light so they thought they were

298
00:11:05,699 --> 00:11:11,399
doing their job they you know and then

299
00:11:07,769 --> 00:11:12,870
we were able to audit them so what we

300
00:11:11,399 --> 00:11:15,510
wanted to be able to do was give them

301
00:11:12,870 --> 00:11:16,230
pinpoint auditing meaning we could run a

302
00:11:15,510 --> 00:11:17,910
report

303
00:11:16,230 --> 00:11:20,550
it would produce a spreadsheet that said

304
00:11:17,910 --> 00:11:22,110
on this box on this interface there was

305
00:11:20,550 --> 00:11:24,359
a mistake and here's what you need to do

306
00:11:22,110 --> 00:11:27,590
to correct it it gave them corrective

307
00:11:24,360 --> 00:11:30,390
action in in a form that they could

308
00:11:27,590 --> 00:11:34,130
understand so it was not in network ease

309
00:11:30,390 --> 00:11:36,330
it was in you know installation ease and

310
00:11:34,130 --> 00:11:38,330
from this reports what we were able to

311
00:11:36,330 --> 00:11:40,800
do is then produce a dashboard that

312
00:11:38,330 --> 00:11:43,200
allowed us to get a really clean

313
00:11:40,800 --> 00:11:45,329
heads-up of how far we were into being

314
00:11:43,200 --> 00:11:46,560
done now what I'm showing you here is

315
00:11:45,330 --> 00:11:48,000
just a Google spreadsheet there's

316
00:11:46,560 --> 00:11:51,479
nothing really fancy here it was just

317
00:11:48,000 --> 00:11:53,550
pulling in data into from CSV files into

318
00:11:51,480 --> 00:11:56,190
spreadsheets but what I want to

319
00:11:53,550 --> 00:11:58,680
highlight here is every single mistake

320
00:11:56,190 --> 00:12:00,810
that you see here is a test case failure

321
00:11:58,680 --> 00:12:03,120
so if I was running a test case all of

322
00:12:00,810 --> 00:12:04,949
these are failures but what we had to do

323
00:12:03,120 --> 00:12:08,040
is we had to prioritize those failures

324
00:12:04,950 --> 00:12:11,610
in terms of was it an error or was it a

325
00:12:08,040 --> 00:12:12,900
warning or was it a to-do and an error

326
00:12:11,610 --> 00:12:15,390
was something that was a mistake that

327
00:12:12,900 --> 00:12:17,220
was service effecting for example they

328
00:12:15,390 --> 00:12:19,680
cabled something to the wrong port so

329
00:12:17,220 --> 00:12:22,080
that was that's a mistake if they put

330
00:12:19,680 --> 00:12:23,430
the wrong optic if they put an optic in

331
00:12:22,080 --> 00:12:25,230
to a port that wasn't supposed to use an

332
00:12:23,430 --> 00:12:26,520
optic that's just a warning it's not

333
00:12:25,230 --> 00:12:27,900
going to harm the system it's just you

334
00:12:26,520 --> 00:12:30,210
know they just made a mistake they need

335
00:12:27,900 --> 00:12:32,400
to fix it and then to do essentially

336
00:12:30,210 --> 00:12:34,650
indicates every test that failed that

337
00:12:32,400 --> 00:12:36,540
meant that they had more work to do for

338
00:12:34,650 --> 00:12:38,220
example maybe they needed to put an

339
00:12:36,540 --> 00:12:40,560
optic into a port or they needed to

340
00:12:38,220 --> 00:12:41,820
cable something my cabling test failed

341
00:12:40,560 --> 00:12:44,339
but it was simply because they just

342
00:12:41,820 --> 00:12:45,780
hadn't done the work yet so what I'm

343
00:12:44,340 --> 00:12:47,430
going to show you is not only can you

344
00:12:45,780 --> 00:12:50,459
use PI tests to run tests and get a

345
00:12:47,430 --> 00:12:51,750
pass/fail but you can categorize or

346
00:12:50,460 --> 00:12:56,190
prioritize them into things that are

347
00:12:51,750 --> 00:12:59,880
meaningful to you so why did we have to

348
00:12:56,190 --> 00:13:02,610
automate this again it comes to scale a

349
00:12:59,880 --> 00:13:04,080
lot of times people ask me why should I

350
00:13:02,610 --> 00:13:07,350
automate something and is it due to

351
00:13:04,080 --> 00:13:09,060
scale you know I have 30 boxes you know

352
00:13:07,350 --> 00:13:11,280
do I need to automate my system I don't

353
00:13:09,060 --> 00:13:13,619
have that big of a scale well it really

354
00:13:11,280 --> 00:13:16,470
is what is the facet or the measurement

355
00:13:13,620 --> 00:13:17,970
of that scale I have 300 devices you

356
00:13:16,470 --> 00:13:21,150
know we're not Google or Facebook with

357
00:13:17,970 --> 00:13:23,010
10,000 devices but if I calculated the

358
00:13:21,150 --> 00:13:26,790
number of tests that we would have to

359
00:13:23,010 --> 00:13:29,670
run it was almost 23,000 tests that's

360
00:13:26,790 --> 00:13:32,370
300 devices and those devices add you

361
00:13:29,670 --> 00:13:34,349
know 48 to 60 number of ports but if an

362
00:13:32,370 --> 00:13:36,900
if somebody was manually and

363
00:13:34,350 --> 00:13:39,900
individually testing every facet they

364
00:13:36,900 --> 00:13:41,430
would have to do 23,000 tests nobody's

365
00:13:39,900 --> 00:13:42,900
gonna do that you know they might run a

366
00:13:41,430 --> 00:13:45,900
few show command and eyeball it but

367
00:13:42,900 --> 00:13:48,360
nobody is going to do this and what we

368
00:13:45,900 --> 00:13:49,949
found was is because we were staggering

369
00:13:48,360 --> 00:13:51,240
our deployment we couldn't just run one

370
00:13:49,950 --> 00:13:53,010
test and be done it was sort of like

371
00:13:51,240 --> 00:13:54,510
we'd run a test on a room and then the

372
00:13:53,010 --> 00:13:56,790
next week they'd get another room done

373
00:13:54,510 --> 00:13:58,290
and then the next week we found out we

374
00:13:56,790 --> 00:14:00,689
had to make a design change we're like

375
00:13:58,290 --> 00:14:01,949
oh no we need three more switches in

376
00:14:00,690 --> 00:14:04,710
this room so we'd have to change our

377
00:14:01,950 --> 00:14:06,360
design add more switches recompute all

378
00:14:04,710 --> 00:14:08,460
of our test cases and then rerun

379
00:14:06,360 --> 00:14:10,740
everything again so even though we

380
00:14:08,460 --> 00:14:12,360
didn't have a lot of boxes the scale and

381
00:14:10,740 --> 00:14:15,270
complexity had to do with the number of

382
00:14:12,360 --> 00:14:17,490
tests and then the change in our

383
00:14:15,270 --> 00:14:19,470
environment right so that we had

384
00:14:17,490 --> 00:14:21,810
actually many changes throughout the

385
00:14:19,470 --> 00:14:23,370
installation like we discovered that one

386
00:14:21,810 --> 00:14:24,989
room didn't have enough power and so we

387
00:14:23,370 --> 00:14:27,060
had to move boxes around where we

388
00:14:24,990 --> 00:14:28,860
discovered that oh you know the server

389
00:14:27,060 --> 00:14:30,869
guys made a mistake we need four more

390
00:14:28,860 --> 00:14:32,670
switches to support all the new

391
00:14:30,870 --> 00:14:34,350
interfaces that they had - there was

392
00:14:32,670 --> 00:14:38,150
there's a little bit of design change

393
00:14:34,350 --> 00:14:38,150
and then refactoring of our test cases

394
00:14:38,330 --> 00:14:45,090
okay so what I want to do is quickly

395
00:14:43,530 --> 00:14:47,130
show you what this looks like when we

396
00:14:45,090 --> 00:14:49,020
run the tests because I like to show

397
00:14:47,130 --> 00:14:50,670
that I like to do like the cooking show

398
00:14:49,020 --> 00:14:52,949
I like to show you the turkey before I

399
00:14:50,670 --> 00:14:53,910
tell you how we make the turkey so what

400
00:14:52,950 --> 00:14:56,460
I'm going to do is I'm going to show you

401
00:14:53,910 --> 00:14:58,260
a few screenshots and then I'm gonna

402
00:14:56,460 --> 00:14:59,610
drop in and I'm gonna actually run PI

403
00:14:58,260 --> 00:15:00,000
tests so you can see what this looks

404
00:14:59,610 --> 00:15:03,720
like

405
00:15:00,000 --> 00:15:05,840
in kind of a real-world environment and

406
00:15:03,720 --> 00:15:09,540
you guys see that okay

407
00:15:05,840 --> 00:15:12,300
okay all right so when you run PI test

408
00:15:09,540 --> 00:15:14,189
from the command line you can get it to

409
00:15:12,300 --> 00:15:17,339
output in a way that shows you every

410
00:15:14,190 --> 00:15:20,190
single test case and gives you a brief

411
00:15:17,340 --> 00:15:22,410
result just test you know passes or

412
00:15:20,190 --> 00:15:24,300
fails so you can quickly see these are

413
00:15:22,410 --> 00:15:26,069
all passing you get a summarization at

414
00:15:24,300 --> 00:15:27,990
the bottom you can see how many things

415
00:15:26,070 --> 00:15:29,910
that you're running and if you get a

416
00:15:27,990 --> 00:15:32,010
failure case it'll you noticed they

417
00:15:29,910 --> 00:15:35,100
failed and you can see you know the

418
00:15:32,010 --> 00:15:37,290
summarization at the bottom now what I

419
00:15:35,100 --> 00:15:38,760
wanted to do was get more data I wanted

420
00:15:37,290 --> 00:15:41,870
to understand well what was the nature

421
00:15:38,760 --> 00:15:44,420
of that failure so I'm

422
00:15:41,870 --> 00:15:46,520
a plug-in that you can get with PI test

423
00:15:44,420 --> 00:15:49,729
allows you to get your reports in an

424
00:15:46,520 --> 00:15:51,530
HTML output and you can then bring up a

425
00:15:49,730 --> 00:15:53,600
page and then you can kind of point and

426
00:15:51,530 --> 00:15:56,120
click through that page and here what

427
00:15:53,600 --> 00:15:57,890
I'm doing does I've opened up a little

428
00:15:56,120 --> 00:16:00,590
bit more detail on this failure so it

429
00:15:57,890 --> 00:16:03,650
shows you for example that we're an

430
00:16:00,590 --> 00:16:06,830
optic was expected there wasn't one

431
00:16:03,650 --> 00:16:08,870
right and so that's a mismatch in in in

432
00:16:06,830 --> 00:16:11,180
the vernacular of my test case that was

433
00:16:08,870 --> 00:16:12,140
a mismatch I had a certain expectation

434
00:16:11,180 --> 00:16:14,630
that there would be an optic of a

435
00:16:12,140 --> 00:16:16,550
certain type and the actual was there

436
00:16:14,630 --> 00:16:18,740
was no optic now that's a test case

437
00:16:16,550 --> 00:16:21,469
failure but when I translated that to

438
00:16:18,740 --> 00:16:23,780
the OP to the to the facilities people

439
00:16:21,470 --> 00:16:26,500
it was that's a to do you need to

440
00:16:23,780 --> 00:16:28,910
install an optic in that in that place

441
00:16:26,500 --> 00:16:31,700
so what I'm going to do now is I'm going

442
00:16:28,910 --> 00:16:33,469
to drop in and show you what this looks

443
00:16:31,700 --> 00:16:36,770
like and I'm going to take you through a

444
00:16:33,470 --> 00:16:37,730
few command-line options with PI test so

445
00:16:36,770 --> 00:16:39,850
you can kind of see what's available

446
00:16:37,730 --> 00:16:42,290
with PI test

447
00:16:39,850 --> 00:16:43,820
I'm also later going to show you how to

448
00:16:42,290 --> 00:16:45,410
install it and do all the things but I'm

449
00:16:43,820 --> 00:16:47,620
just want to get to the good parts right

450
00:16:45,410 --> 00:16:47,620
away

451
00:16:51,070 --> 00:16:59,510
alright everybody see this ok alright so

452
00:16:55,730 --> 00:17:03,650
in the github repo there is an offline

453
00:16:59,510 --> 00:17:04,819
demo and there is an online demo so the

454
00:17:03,650 --> 00:17:08,449
difference between the two is the

455
00:17:04,819 --> 00:17:10,579
offline demo is going to use output that

456
00:17:08,449 --> 00:17:13,189
I've captured from devices and saved to

457
00:17:10,579 --> 00:17:15,198
file because the world series is going

458
00:17:13,189 --> 00:17:19,310
on right now I am NOT going to touch the

459
00:17:15,199 --> 00:17:21,380
network okay but if you also want to

460
00:17:19,310 --> 00:17:23,599
play with online devices I actually have

461
00:17:21,380 --> 00:17:24,740
an online demo environment so I'm going

462
00:17:23,599 --> 00:17:27,980
to show you both I'm gonna try to show

463
00:17:24,740 --> 00:17:31,610
you both today but I'm going to

464
00:17:27,980 --> 00:17:33,530
demonstrate the offline demo now what

465
00:17:31,610 --> 00:17:36,169
you see in this directory is a bunch of

466
00:17:33,530 --> 00:17:39,530
files that begin with the word test by

467
00:17:36,170 --> 00:17:41,890
default PI test will find every file

468
00:17:39,530 --> 00:17:44,450
that begins with test underscore

469
00:17:41,890 --> 00:17:46,970
automatically and then inside those

470
00:17:44,450 --> 00:17:49,910
files it will run every function that

471
00:17:46,970 --> 00:17:51,230
begins with test underscore so that's

472
00:17:49,910 --> 00:17:52,610
what they would call their collection

473
00:17:51,230 --> 00:17:54,870
process they are collecting all their

474
00:17:52,610 --> 00:17:57,719
tests now I put these new

475
00:17:54,870 --> 00:18:00,270
Erick's you know zero zero zero one so

476
00:17:57,720 --> 00:18:03,030
that PI test would run those tests in

477
00:18:00,270 --> 00:18:03,990
those order in that order by default

478
00:18:03,030 --> 00:18:06,240
it's just going to run them in

479
00:18:03,990 --> 00:18:10,800
alphabetical order and that allowed me

480
00:18:06,240 --> 00:18:13,500
to force force it in this way now if I

481
00:18:10,800 --> 00:18:15,270
type in PI test and I'm using a

482
00:18:13,500 --> 00:18:20,880
virtualized environment so this is just

483
00:18:15,270 --> 00:18:22,080
installed in my on my laptop you know in

484
00:18:20,880 --> 00:18:23,010
in a virtual environment

485
00:18:22,080 --> 00:18:26,159
everybody knows what a virtual

486
00:18:23,010 --> 00:18:29,720
environment is the reason okay alright

487
00:18:26,160 --> 00:18:32,160
alright so if I just type in PI test

488
00:18:29,720 --> 00:18:34,350
it's gonna say hey man something's wrong

489
00:18:32,160 --> 00:18:37,530
there's a couple of arguments that are

490
00:18:34,350 --> 00:18:38,909
required now PI test obviously doesn't

491
00:18:37,530 --> 00:18:43,350
know anything about inner foo these are

492
00:18:38,910 --> 00:18:45,240
arguments that I added to PI test so I

493
00:18:43,350 --> 00:18:46,740
will show you how that works because

494
00:18:45,240 --> 00:18:49,500
what I want to be able to do is say I

495
00:18:46,740 --> 00:18:51,929
want to run the PI test set of tests

496
00:18:49,500 --> 00:18:54,780
against a specific device so this would

497
00:18:51,929 --> 00:18:57,150
be like the host name of your device my

498
00:18:54,780 --> 00:19:01,620
device is called device one and I have a

499
00:18:57,150 --> 00:19:03,120
directory of test cases here which I'll

500
00:19:01,620 --> 00:19:05,250
show you in a little bit later but

501
00:19:03,120 --> 00:19:07,739
that's where my test cases are stored so

502
00:19:05,250 --> 00:19:12,559
I'm going to say my test cases are in

503
00:19:07,740 --> 00:19:15,450
this directory called dev one test cases

504
00:19:12,559 --> 00:19:17,460
now if I hit return what it's going to

505
00:19:15,450 --> 00:19:19,020
do it's going to run those those test

506
00:19:17,460 --> 00:19:21,030
case files you can see they're an order

507
00:19:19,020 --> 00:19:23,190
these dots indicate you know things

508
00:19:21,030 --> 00:19:25,129
passed okay everything works great but

509
00:19:23,190 --> 00:19:27,230
that doesn't really show me each

510
00:19:25,130 --> 00:19:31,410
individual test case like you saw before

511
00:19:27,230 --> 00:19:35,610
so if I do - V for verbose what it's

512
00:19:31,410 --> 00:19:38,640
going to do is I'm gonna stretch this

513
00:19:35,610 --> 00:19:40,559
out a little bit so you can see it it's

514
00:19:38,640 --> 00:19:42,480
going to show you every test case and

515
00:19:40,559 --> 00:19:43,950
it's going to show you the name of the

516
00:19:42,480 --> 00:19:46,230
test case and this is really important

517
00:19:43,950 --> 00:19:48,929
you can see this is the this is the

518
00:19:46,230 --> 00:19:50,790
module that it ran this is the function

519
00:19:48,929 --> 00:19:53,250
in that module so there's a function

520
00:19:50,790 --> 00:19:57,780
called test optic inventory and then

521
00:19:53,250 --> 00:20:00,030
this is the test case name now this is

522
00:19:57,780 --> 00:20:03,210
really relevant because PI tests allows

523
00:20:00,030 --> 00:20:06,270
you to do filtering for example if I

524
00:20:03,210 --> 00:20:09,070
only wanted to run my optic inventory I

525
00:20:06,270 --> 00:20:11,110
could use a - kay

526
00:20:09,070 --> 00:20:12,908
and I could just say the word optic and

527
00:20:11,110 --> 00:20:14,799
in this case it's only gonna it's going

528
00:20:12,909 --> 00:20:18,909
to pattern match on this entire string

529
00:20:14,799 --> 00:20:22,360
so it's it found optic for example or I

530
00:20:18,909 --> 00:20:25,210
might want to do spine and it would show

531
00:20:22,360 --> 00:20:26,709
these are my spine leaf so it has a

532
00:20:25,210 --> 00:20:28,870
built-in filtering mechanism it's not

533
00:20:26,710 --> 00:20:31,630
super powerful but it allows you to

534
00:20:28,870 --> 00:20:36,219
control exactly what kinds of tests you

535
00:20:31,630 --> 00:20:38,649
want to run so far so good

536
00:20:36,220 --> 00:20:41,019
all right so another thing that you can

537
00:20:38,649 --> 00:20:43,149
do is I don't necessarily want to run

538
00:20:41,019 --> 00:20:45,220
the test maybe I just want to know what

539
00:20:43,149 --> 00:20:47,979
tests would run sometimes you hear that

540
00:20:45,220 --> 00:20:49,690
as dry run mode in some of the other

541
00:20:47,980 --> 00:20:53,860
tools they have this option called

542
00:20:49,690 --> 00:20:57,090
collect only and this will show you

543
00:20:53,860 --> 00:21:00,240
these are all the tests that I would run

544
00:20:57,090 --> 00:21:04,269
but I'm not actually going to run them

545
00:21:00,240 --> 00:21:06,009
okay now what I'm going to do next is

546
00:21:04,269 --> 00:21:07,210
I'm going to cause the test to fail so

547
00:21:06,009 --> 00:21:09,309
you can kind of see what that looks like

548
00:21:07,210 --> 00:21:11,230
and in order to do that I'm going to

549
00:21:09,309 --> 00:21:16,658
just simply change one of my test cases

550
00:21:11,230 --> 00:21:19,360
so in my test cases directory I have a

551
00:21:16,659 --> 00:21:20,379
cabling file here and I'm going to go

552
00:21:19,360 --> 00:21:22,209
into this in a little bit more detail

553
00:21:20,379 --> 00:21:24,279
but I'm going to just change this

554
00:21:22,210 --> 00:21:26,710
expected remote interface instead of

555
00:21:24,279 --> 00:21:32,980
being three minutes just changes to 13

556
00:21:26,710 --> 00:21:36,279
and if I run this again not in dry run

557
00:21:32,980 --> 00:21:39,549
mode what's going to happen is it blew

558
00:21:36,279 --> 00:21:42,940
up it basically created this this

559
00:21:39,549 --> 00:21:44,950
exception like oh it's all this nasty

560
00:21:42,940 --> 00:21:47,350
terrible stuff that like what's going on

561
00:21:44,950 --> 00:21:49,120
with this and it's trying to tell you if

562
00:21:47,350 --> 00:21:50,379
I was a software engineer is trying to

563
00:21:49,120 --> 00:21:51,908
tell me where in my code there was a

564
00:21:50,379 --> 00:21:55,029
mistake because as a developer I'd want

565
00:21:51,909 --> 00:21:56,860
to know that but I don't want to see all

566
00:21:55,029 --> 00:21:59,799
this detail so what I'm going to do is

567
00:21:56,860 --> 00:22:02,139
I'm just gonna say trick these trace

568
00:21:59,799 --> 00:22:04,750
backs which is this trace back and make

569
00:22:02,139 --> 00:22:06,549
it short so now it's going to give me

570
00:22:04,750 --> 00:22:08,200
you know a short explanation of what

571
00:22:06,549 --> 00:22:11,490
failed it said well I've got this

572
00:22:08,200 --> 00:22:15,220
expected data it expected you know

573
00:22:11,490 --> 00:22:17,769
interface 13 but the actual data was was

574
00:22:15,220 --> 00:22:20,710
three right or if I want to turn that

575
00:22:17,769 --> 00:22:22,580
off completely I could say no trace back

576
00:22:20,710 --> 00:22:25,760
and you can see that there's just an

577
00:22:22,580 --> 00:22:27,939
F here four failed and again if I put

578
00:22:25,760 --> 00:22:31,908
the dash V back then I could see exactly

579
00:22:27,940 --> 00:22:33,919
which test case you know here failed now

580
00:22:31,909 --> 00:22:38,690
while this is going on

581
00:22:33,919 --> 00:22:41,960
I could also turn on the HTML so in this

582
00:22:38,690 --> 00:22:44,330
directory there's a little script here a

583
00:22:41,960 --> 00:22:48,110
shell script here called run demo so you

584
00:22:44,330 --> 00:22:52,090
can just say run demo and what you'll

585
00:22:48,110 --> 00:22:54,740
see here is I have to say run demo dev 1

586
00:22:52,090 --> 00:22:57,439
and what you'll see here is it saying

587
00:22:54,740 --> 00:23:01,549
I've created an offline demo report in

588
00:22:57,440 --> 00:23:06,139
dev 1 HTML so it actually created an

589
00:23:01,549 --> 00:23:09,049
HTML report and that's because I added

590
00:23:06,139 --> 00:23:11,719
these flags here you know make an HTML

591
00:23:09,049 --> 00:23:14,629
report and make the HTML report

592
00:23:11,720 --> 00:23:16,250
self-contained which means the HTML file

593
00:23:14,630 --> 00:23:17,750
that I produced I could email it to

594
00:23:16,250 --> 00:23:20,120
somebody and they could open it up and

595
00:23:17,750 --> 00:23:22,580
it's all one file so I don't have like

596
00:23:20,120 --> 00:23:26,620
seus CSS files and all this other crazy

597
00:23:22,580 --> 00:23:30,559
garbage so if I wanted to open that file

598
00:23:26,620 --> 00:23:32,120
this is just the the HTML file and I

599
00:23:30,559 --> 00:23:34,309
could see this and I'll make this little

600
00:23:32,120 --> 00:23:35,719
bit bigger I can see that this is my

601
00:23:34,309 --> 00:23:37,820
error and I could say I only want to

602
00:23:35,720 --> 00:23:45,649
look at errors and you can see right

603
00:23:37,820 --> 00:23:48,980
away what the error was okay all right

604
00:23:45,649 --> 00:23:50,600
so I'm going to close that out so what

605
00:23:48,980 --> 00:23:52,340
we've covered really is you know what

606
00:23:50,600 --> 00:23:55,820
pie chest is some of the some of the

607
00:23:52,340 --> 00:23:57,500
command-line options we've covered some

608
00:23:55,820 --> 00:23:59,210
of the ways you can get verbose details

609
00:23:57,500 --> 00:24:01,639
out a couple different ways to see the

610
00:23:59,210 --> 00:24:05,620
information but more importantly how you

611
00:24:01,639 --> 00:24:05,620
can filter out some of that information

612
00:24:08,830 --> 00:24:14,080
now while I'm demonstrating the fact

613
00:24:11,590 --> 00:24:16,270
that this is this was a greenfield use

614
00:24:14,080 --> 00:24:18,040
case for us everything that I'm showing

615
00:24:16,270 --> 00:24:19,600
you could be used for brownfield you

616
00:24:18,040 --> 00:24:21,430
know the fact that we're using PI tests

617
00:24:19,600 --> 00:24:23,800
to gather information off the network

618
00:24:21,430 --> 00:24:25,180
and check its state could be used for

619
00:24:23,800 --> 00:24:26,590
brownfield environments so I don't want

620
00:24:25,180 --> 00:24:30,490
you to come away thinking this just a

621
00:24:26,590 --> 00:24:32,020
greenfield type of use case before I go

622
00:24:30,490 --> 00:24:35,320
into the next section does anybody have

623
00:24:32,020 --> 00:24:39,330
any questions that on this part okay

624
00:24:35,320 --> 00:24:39,330
okay yep

625
00:24:41,669 --> 00:24:45,329
so as a workflow which as you said could

626
00:24:43,829 --> 00:24:46,589
be greenfield or could be round field it

627
00:24:45,329 --> 00:24:48,719
could be I run this test in my

628
00:24:46,589 --> 00:24:50,249
datacenter you know is it still ready to

629
00:24:48,719 --> 00:24:52,349
run maybe you call it instead of is it

630
00:24:50,249 --> 00:24:53,999
ready to run you showed the idea of

631
00:24:52,349 --> 00:24:55,889
having you know the list of exceptions

632
00:24:53,999 --> 00:24:57,419
that you give to people either

633
00:24:55,889 --> 00:24:59,189
datacenter robots that you program with

634
00:24:57,419 --> 00:25:01,529
Python or people that are gonna go swap

635
00:24:59,190 --> 00:25:04,950
optics and stuff do you give them a link

636
00:25:01,529 --> 00:25:07,320
to the ability to rerun the test on

637
00:25:04,950 --> 00:25:09,479
their own or how do you envision the

638
00:25:07,320 --> 00:25:11,820
workflow of these sets of things need to

639
00:25:09,479 --> 00:25:13,769
be done and how much autonomy do you

640
00:25:11,820 --> 00:25:16,649
give them to see you know to sort of run

641
00:25:13,769 --> 00:25:18,059
the component test that failed next to

642
00:25:16,649 --> 00:25:19,678
the thing that you're asking the action

643
00:25:18,059 --> 00:25:22,049
yeah excellent question

644
00:25:19,679 --> 00:25:23,879
so you'll hear me say this a lot you

645
00:25:22,049 --> 00:25:26,190
know your mileage may vary based on your

646
00:25:23,879 --> 00:25:28,349
you know specifics of your use case our

647
00:25:26,190 --> 00:25:30,899
specific of our use case was we had

648
00:25:28,349 --> 00:25:32,639
third-party installation crews so what

649
00:25:30,899 --> 00:25:35,039
we had to provide them were spreadsheets

650
00:25:32,639 --> 00:25:37,199
that the foreman would then go talk to

651
00:25:35,039 --> 00:25:39,359
the actual installation crew but even

652
00:25:37,200 --> 00:25:41,009
before we would hand those over the

653
00:25:39,359 --> 00:25:43,259
network engineers would look over this

654
00:25:41,009 --> 00:25:44,339
report and they would kind of cleaned it

655
00:25:43,259 --> 00:25:46,079
up a little bit they would say oh you

656
00:25:44,339 --> 00:25:47,369
know what this the reason why you're

657
00:25:46,079 --> 00:25:49,109
seeing this failure in this report is

658
00:25:47,369 --> 00:25:50,879
because we didn't even deploy that

659
00:25:49,109 --> 00:25:52,739
switch yet and you thought we did you

660
00:25:50,879 --> 00:25:56,208
know so we would actually do a little

661
00:25:52,739 --> 00:25:56,209
bit of grooming before we sent it out

662
00:25:57,440 --> 00:26:01,829
that's right yeah so we would run the

663
00:26:00,089 --> 00:26:03,479
tool we would produce the spreadsheets

664
00:26:01,829 --> 00:26:05,789
we would groom it and then we would hand

665
00:26:03,479 --> 00:26:07,859
over the spreadsheets that said you know

666
00:26:05,789 --> 00:26:10,349
if we wanted to make a you know more

667
00:26:07,859 --> 00:26:11,699
robust tool for the internal use of our

668
00:26:10,349 --> 00:26:13,379
own team and we wanted to use this

669
00:26:11,700 --> 00:26:15,089
long-running we would take a separate

670
00:26:13,379 --> 00:26:23,519
you know a separate self service type of

671
00:26:15,089 --> 00:26:26,599
portal approach okay yes that is later

672
00:26:23,519 --> 00:26:28,979
on the tutorial so every little piece of

673
00:26:26,599 --> 00:26:31,918
nifty thing I'm going to show you piece

674
00:26:28,979 --> 00:26:34,589
by piece code by code how many of you

675
00:26:31,919 --> 00:26:36,599
are doing testing you know in some

676
00:26:34,589 --> 00:26:39,570
semblance of just testing in general

677
00:26:36,599 --> 00:26:41,999
like automated testing in some way okay

678
00:26:39,570 --> 00:26:43,079
all right so afterwards I'd love to talk

679
00:26:41,999 --> 00:26:44,700
to you and see understand what kind of

680
00:26:43,079 --> 00:26:47,190
tools you use because I'm a tools junky

681
00:26:44,700 --> 00:26:49,229
but I'm going to talk about a few

682
00:26:47,190 --> 00:26:51,329
concepts of testing you know why do we

683
00:26:49,229 --> 00:26:54,839
do testing and what is its purpose

684
00:26:51,329 --> 00:26:55,559
so for us we wanted to determine whether

685
00:26:54,839 --> 00:26:57,418
the network will

686
00:26:55,559 --> 00:26:59,519
ready ready for use as I've talked about

687
00:26:57,419 --> 00:27:01,499
and the way that we would measure

688
00:26:59,519 --> 00:27:05,460
coverage you'll hear the term test

689
00:27:01,499 --> 00:27:08,519
coverage is in our world for networking

690
00:27:05,460 --> 00:27:10,529
it was how many devices do we plan to

691
00:27:08,519 --> 00:27:13,379
deploy so let's say we had 300 devices

692
00:27:10,529 --> 00:27:15,029
it was the total number of devices under

693
00:27:13,379 --> 00:27:17,580
test that were available versus the

694
00:27:15,029 --> 00:27:20,070
total number of devices that would be so

695
00:27:17,580 --> 00:27:21,629
if we only deployed 150 devices we

696
00:27:20,070 --> 00:27:23,999
already knew that we're only 50 percent

697
00:27:21,629 --> 00:27:26,610
you know capable to do coverage and then

698
00:27:23,999 --> 00:27:28,830
for every single device under test it

699
00:27:26,610 --> 00:27:32,490
had its own unique set of test cases so

700
00:27:28,830 --> 00:27:35,039
maybe a spine had 100 test cases and a

701
00:27:32,490 --> 00:27:37,049
leaf had 30 test cases so it was a

702
00:27:35,039 --> 00:27:40,110
function of for every device under test

703
00:27:37,049 --> 00:27:42,119
how many tests were specific to that

704
00:27:40,110 --> 00:27:44,309
device and how many passed vs. failed

705
00:27:42,119 --> 00:27:47,220
and that's how we knew what if we were

706
00:27:44,309 --> 00:27:49,678
done so if we were to take any given

707
00:27:47,220 --> 00:27:51,659
device that we were testing against we

708
00:27:49,679 --> 00:27:54,179
have these three specific test functions

709
00:27:51,659 --> 00:27:56,100
and then based on the design and the use

710
00:27:54,179 --> 00:27:57,720
of that device we knew how many test

711
00:27:56,100 --> 00:28:00,090
cases that we were doing so in this case

712
00:27:57,720 --> 00:28:01,259
we were testing you know 30 optics you

713
00:28:00,090 --> 00:28:03,330
know we were checking to make sure that

714
00:28:01,259 --> 00:28:05,909
30 optics were placed correctly we're

715
00:28:03,330 --> 00:28:07,499
making sure that you know 36 interfaces

716
00:28:05,909 --> 00:28:10,440
were in the up state or the down state

717
00:28:07,499 --> 00:28:12,570
correctly and then we had 34 cable tests

718
00:28:10,440 --> 00:28:14,429
that we wanted to run so this one device

719
00:28:12,570 --> 00:28:18,689
you know this one theoretical device had

720
00:28:14,429 --> 00:28:20,490
100 test cases so what I want what I'm

721
00:28:18,690 --> 00:28:23,940
showing you here is what does a test

722
00:28:20,490 --> 00:28:27,600
case look like now what I'm showing you

723
00:28:23,940 --> 00:28:30,360
here is the data for a test case now I

724
00:28:27,600 --> 00:28:33,480
have a file and in this file I have many

725
00:28:30,360 --> 00:28:36,479
test cases and the way I've arranged

726
00:28:33,480 --> 00:28:39,480
this is I have a file per test function

727
00:28:36,480 --> 00:28:41,610
so this case is the cabling the test

728
00:28:39,480 --> 00:28:44,129
cabling so I'm gonna have one file all

729
00:28:41,610 --> 00:28:46,740
it has our cabling tests in it and in

730
00:28:44,129 --> 00:28:49,289
this particular file it's for the same

731
00:28:46,740 --> 00:28:51,960
one device under test and what you'll

732
00:28:49,289 --> 00:28:54,450
see in here are parameters for this test

733
00:28:51,960 --> 00:28:58,230
this is saying on this device I want to

734
00:28:54,450 --> 00:29:00,749
check interface 49 / 1 and its role

735
00:28:58,230 --> 00:29:02,490
happens to be a spine leaf and I expect

736
00:29:00,749 --> 00:29:05,399
to see on the other side switch 21

737
00:29:02,490 --> 00:29:07,289
connected on Ethernet 3 so you're seeing

738
00:29:05,399 --> 00:29:09,560
the type of test that I want to run

739
00:29:07,289 --> 00:29:12,660
cabling the device that I'm running it

740
00:29:09,560 --> 00:29:15,169
the parameters to run through the test

741
00:29:12,660 --> 00:29:18,420
function and then the expected results

742
00:29:15,170 --> 00:29:20,640
now where this information comes from

743
00:29:18,420 --> 00:29:23,190
and how this file is generated I'm going

744
00:29:20,640 --> 00:29:25,080
to talk about later on but the

745
00:29:23,190 --> 00:29:26,910
organization of this file and the

746
00:29:25,080 --> 00:29:28,949
structure of this was entirely my own

747
00:29:26,910 --> 00:29:30,780
design like if you want to do something

748
00:29:28,950 --> 00:29:34,620
different do something different if you

749
00:29:30,780 --> 00:29:36,240
want to use XML use XML but the takeaway

750
00:29:34,620 --> 00:29:38,879
here is it's structured data that I can

751
00:29:36,240 --> 00:29:41,190
process right and I'm showing both the

752
00:29:38,880 --> 00:29:43,740
parameters that I'm going to use as well

753
00:29:41,190 --> 00:29:45,300
as the expected state because how else

754
00:29:43,740 --> 00:29:50,340
am I going to know whether or not the

755
00:29:45,300 --> 00:29:52,020
the test passes the actual data is the

756
00:29:50,340 --> 00:29:53,760
data that comes from the device meaning

757
00:29:52,020 --> 00:29:56,310
this is the operational State so when I

758
00:29:53,760 --> 00:29:57,690
talk about actual data this is you know

759
00:29:56,310 --> 00:29:59,580
if I were to go on to in this case an

760
00:29:57,690 --> 00:30:02,160
Aristo box and do show LD P neighbors

761
00:29:59,580 --> 00:30:05,129
this is the output that I can get off

762
00:30:02,160 --> 00:30:08,910
the CLI in JSON format or extractors

763
00:30:05,130 --> 00:30:11,120
versus via e API so this is the actual

764
00:30:08,910 --> 00:30:14,240
data and so when we're talking about

765
00:30:11,120 --> 00:30:16,679
comparing a test case versus actual data

766
00:30:14,240 --> 00:30:19,560
you know we're going to take information

767
00:30:16,680 --> 00:30:22,020
from the device use the test case run it

768
00:30:19,560 --> 00:30:23,909
through a function right and that

769
00:30:22,020 --> 00:30:25,770
function is going to give us a pass or

770
00:30:23,910 --> 00:30:27,570
it's going to give us a fail right and

771
00:30:25,770 --> 00:30:30,780
so that's how we put all this together

772
00:30:27,570 --> 00:30:34,169
we have actual data the test cases a

773
00:30:30,780 --> 00:30:36,600
test function and pass and fail now what

774
00:30:34,170 --> 00:30:39,750
you saw when I did the PI test function

775
00:30:36,600 --> 00:30:42,209
when I when I ran PI test is a test case

776
00:30:39,750 --> 00:30:45,810
fails when an exception is generated

777
00:30:42,210 --> 00:30:47,190
right in my case this test function the

778
00:30:45,810 --> 00:30:49,800
one that validates the cabling

779
00:30:47,190 --> 00:30:51,300
information it generates an exception

780
00:30:49,800 --> 00:30:54,659
I'll show you the code you know it says

781
00:30:51,300 --> 00:30:56,820
does my does my remote host match this

782
00:30:54,660 --> 00:30:59,460
value and it doesn't it generates a

783
00:30:56,820 --> 00:31:02,189
mismatch exception I do that because PI

784
00:30:59,460 --> 00:31:04,380
tests naturally traps that accept

785
00:31:02,190 --> 00:31:06,240
exception as a failure and reports on it

786
00:31:04,380 --> 00:31:07,320
and that's what I want it to do so I'll

787
00:31:06,240 --> 00:31:12,060
show you how that worked a little bit

788
00:31:07,320 --> 00:31:13,590
later now I get a lot of questions from

789
00:31:12,060 --> 00:31:15,990
people like well how should I design

790
00:31:13,590 --> 00:31:17,490
certain things and so I wanted to take a

791
00:31:15,990 --> 00:31:19,800
minute just to step back from the

792
00:31:17,490 --> 00:31:23,300
technology and just talk about when you

793
00:31:19,800 --> 00:31:25,950
design a testing strategy

794
00:31:23,300 --> 00:31:28,050
it's important to separate the what from

795
00:31:25,950 --> 00:31:31,710
the how and and really what I mean by

796
00:31:28,050 --> 00:31:34,620
separate what you want from how you get

797
00:31:31,710 --> 00:31:37,080
it right for example the actual data you

798
00:31:34,620 --> 00:31:39,149
know we know we need the actual data but

799
00:31:37,080 --> 00:31:40,560
how do we get how do we get the actual

800
00:31:39,150 --> 00:31:43,500
data and how do we get it from the

801
00:31:40,560 --> 00:31:45,620
device and the test cases you know how

802
00:31:43,500 --> 00:31:48,330
are these test cases created I had

803
00:31:45,620 --> 00:31:50,370
23,000 test cases I did not create them

804
00:31:48,330 --> 00:31:52,710
manually I did not artisanally handcraft

805
00:31:50,370 --> 00:31:55,020
JSON that's not what I do

806
00:31:52,710 --> 00:31:57,270
where are they stored and how does the

807
00:31:55,020 --> 00:32:01,680
test function itself get those test

808
00:31:57,270 --> 00:32:03,840
cases into PI tests and this element of

809
00:32:01,680 --> 00:32:07,400
how does this information get into PI

810
00:32:03,840 --> 00:32:09,780
test is the main focus of the coding lab

811
00:32:07,400 --> 00:32:12,920
so it's kind of an interesting

812
00:32:09,780 --> 00:32:15,660
application of PI test all right

813
00:32:12,920 --> 00:32:17,640
obtaining the actual data one approach

814
00:32:15,660 --> 00:32:19,020
is to go to the data at the time you're

815
00:32:17,640 --> 00:32:22,080
running your test function for example

816
00:32:19,020 --> 00:32:23,730
I'm going using pi e API I'm going

817
00:32:22,080 --> 00:32:25,199
directly to the device I'm getting it in

818
00:32:23,730 --> 00:32:27,210
real time I'm using the real time

819
00:32:25,200 --> 00:32:29,790
information that's what I do for the

820
00:32:27,210 --> 00:32:31,740
online demo but for the offline demo

821
00:32:29,790 --> 00:32:33,870
I've actually taken a snapshot of all

822
00:32:31,740 --> 00:32:35,730
that data saved it's a data files and my

823
00:32:33,870 --> 00:32:37,919
PI test functions are reading these

824
00:32:35,730 --> 00:32:39,630
snapshot data file which is a completely

825
00:32:37,920 --> 00:32:42,330
legitimate use case I mean you might

826
00:32:39,630 --> 00:32:44,040
snapshot date off network and then run

827
00:32:42,330 --> 00:32:46,679
it through an offline

828
00:32:44,040 --> 00:32:47,909
you know audit when I was at a vendor

829
00:32:46,680 --> 00:32:49,200
when I was working as a vendor we do

830
00:32:47,910 --> 00:32:50,610
this all the time with our customers

831
00:32:49,200 --> 00:32:52,230
we'd say you know run these commands

832
00:32:50,610 --> 00:32:54,000
save them an output send it to us we'll

833
00:32:52,230 --> 00:32:57,330
analyze your data this is just an

834
00:32:54,000 --> 00:32:59,430
automated process of doing that another

835
00:32:57,330 --> 00:33:00,840
approach is maybe you have a collector

836
00:32:59,430 --> 00:33:02,970
that's collecting all this information

837
00:33:00,840 --> 00:33:05,330
game Ian did a presentation earlier

838
00:33:02,970 --> 00:33:07,770
today about collecting data into

839
00:33:05,330 --> 00:33:09,090
database and and so forth so maybe you

840
00:33:07,770 --> 00:33:11,310
have a collector where all this data is

841
00:33:09,090 --> 00:33:12,990
coming from or maybe your vendor sells

842
00:33:11,310 --> 00:33:14,040
you a product that's collecting all this

843
00:33:12,990 --> 00:33:17,270
data and you want to go to their

844
00:33:14,040 --> 00:33:19,620
controllers so that's that's an option

845
00:33:17,270 --> 00:33:22,230
another option or another question that

846
00:33:19,620 --> 00:33:24,120
always comes up is do you normalize the

847
00:33:22,230 --> 00:33:26,580
data so you only have to write your test

848
00:33:24,120 --> 00:33:29,669
cases once no I don't do that that's

849
00:33:26,580 --> 00:33:31,860
ridiculous I don't believe in that for a

850
00:33:29,670 --> 00:33:32,880
lot of reasons but kind of that's a

851
00:33:31,860 --> 00:33:35,490
different pedal stool for another day

852
00:33:32,880 --> 00:33:36,750
but maybe normalizing you know in

853
00:33:35,490 --> 00:33:39,210
formation is important to you and that's

854
00:33:36,750 --> 00:33:41,580
what you want to do that's a choice you

855
00:33:39,210 --> 00:33:45,990
make but there's no requirement to do

856
00:33:41,580 --> 00:33:47,970
that the test cases now this is where I

857
00:33:45,990 --> 00:33:50,340
do have an opinion when you're going to

858
00:33:47,970 --> 00:33:51,660
make test cases write a piece of

859
00:33:50,340 --> 00:33:53,490
software that automates your test cases

860
00:33:51,660 --> 00:33:55,679
it build your test cases for you for

861
00:33:53,490 --> 00:33:57,750
example I had that spreadsheet that you

862
00:33:55,679 --> 00:34:00,390
saw on slide number three I could

863
00:33:57,750 --> 00:34:02,910
process that spreadsheet and generate

864
00:34:00,390 --> 00:34:03,630
all my test cases and if you're never

865
00:34:02,910 --> 00:34:06,000
done

866
00:34:03,630 --> 00:34:07,200
Python automation programming and you're

867
00:34:06,000 --> 00:34:08,489
just getting started and you're like

868
00:34:07,200 --> 00:34:10,918
what's the first thing I should learn

869
00:34:08,489 --> 00:34:12,918
how to do learn how to do that like you

870
00:34:10,918 --> 00:34:15,540
know take a spreadsheet dump it to a CSV

871
00:34:12,918 --> 00:34:16,770
process the data automate some test

872
00:34:15,540 --> 00:34:18,330
cases you know because really all you're

873
00:34:16,770 --> 00:34:23,790
doing is creating you know JSON files

874
00:34:18,330 --> 00:34:25,409
it's a very simple or it's a not complex

875
00:34:23,790 --> 00:34:29,610
use case to start developing Python

876
00:34:25,409 --> 00:34:31,619
skills so where would you get them you

877
00:34:29,610 --> 00:34:34,169
know like spreadsheet I like that I have

878
00:34:31,619 --> 00:34:35,730
an internal database that that keeps all

879
00:34:34,168 --> 00:34:38,279
this information for me

880
00:34:35,730 --> 00:34:39,360
maybe Usenet box and net box is the

881
00:34:38,280 --> 00:34:40,980
source of truth for you you could

882
00:34:39,360 --> 00:34:42,990
actually pull your network information

883
00:34:40,980 --> 00:34:44,550
off the net box and use it as a source

884
00:34:42,989 --> 00:34:48,449
of truth there are a lot of different

885
00:34:44,550 --> 00:34:49,800
options and then finally when you write

886
00:34:48,449 --> 00:34:51,839
your test functions and I'll show you

887
00:34:49,800 --> 00:34:54,750
one when I'm writing the test function

888
00:34:51,840 --> 00:34:57,750
that tests the EOS cabling for example

889
00:34:54,750 --> 00:35:00,300
my test function is very specific to the

890
00:34:57,750 --> 00:35:03,090
output of a OS and I have a different

891
00:35:00,300 --> 00:35:05,760
one if it was for Cisco and that's okay

892
00:35:03,090 --> 00:35:07,980
right don't try to over engineer

893
00:35:05,760 --> 00:35:11,580
solution to try to abstract all the

894
00:35:07,980 --> 00:35:14,190
things because it's not necessary and

895
00:35:11,580 --> 00:35:16,440
it's a lot easier to write specific

896
00:35:14,190 --> 00:35:18,180
pieces of code in order to focus in on

897
00:35:16,440 --> 00:35:20,240
the problem you're trying to solve now

898
00:35:18,180 --> 00:35:23,069
if you want to add layers of abstraction

899
00:35:20,240 --> 00:35:26,819
that's okay too but don't feel like you

900
00:35:23,070 --> 00:35:32,790
always have to do that okay

901
00:35:26,820 --> 00:35:35,359
so just a quick recap test coverage is a

902
00:35:32,790 --> 00:35:37,770
collection of testing functions and then

903
00:35:35,359 --> 00:35:40,920
how many functions you run over every

904
00:35:37,770 --> 00:35:44,270
device it's okay to write tightly

905
00:35:40,920 --> 00:35:47,190
coupled test cases and test functions I

906
00:35:44,270 --> 00:35:48,180
generally would would suggest when you

907
00:35:47,190 --> 00:35:51,930
write the test

908
00:35:48,180 --> 00:35:54,569
cases keep the same definition of the

909
00:35:51,930 --> 00:35:56,339
test cases although the data that you

910
00:35:54,569 --> 00:35:58,020
put in there might be vendor specific

911
00:35:56,339 --> 00:36:01,558
for example the the interface names may

912
00:35:58,020 --> 00:36:03,540
be juniper or iOS or Cisco specific but

913
00:36:01,559 --> 00:36:06,089
the structure of that test case the fact

914
00:36:03,540 --> 00:36:10,440
that you had params and expected keep

915
00:36:06,089 --> 00:36:15,058
that consistent okay any questions

916
00:36:10,440 --> 00:36:16,849
before I go into the next segment all

917
00:36:15,059 --> 00:36:18,660
right we're getting into the Kodi parts

918
00:36:16,849 --> 00:36:22,589
okay

919
00:36:18,660 --> 00:36:27,750
intro to PI tests so my goal here is to

920
00:36:22,589 --> 00:36:31,140
give you a brief tutorial about some of

921
00:36:27,750 --> 00:36:34,559
the ways that you write Python for pi

922
00:36:31,140 --> 00:36:36,660
test I could spend two hours just giving

923
00:36:34,559 --> 00:36:38,550
an introduction and covering all of this

924
00:36:36,660 --> 00:36:40,290
material I have some links at the end

925
00:36:38,550 --> 00:36:42,329
where you can watch some really great

926
00:36:40,290 --> 00:36:44,520
videos on you know really getting to

927
00:36:42,329 --> 00:36:45,809
know PI tests but I'm going to just try

928
00:36:44,520 --> 00:36:50,220
to touch on the things that we're going

929
00:36:45,809 --> 00:36:52,109
to be using today we'll cover test

930
00:36:50,220 --> 00:36:54,500
functions we're going to talk about

931
00:36:52,109 --> 00:36:57,930
fixtures we're going to talk about

932
00:36:54,500 --> 00:37:00,660
parameterizing tests a little bit of

933
00:36:57,930 --> 00:37:05,460
running these filters against the tests

934
00:37:00,660 --> 00:37:08,040
and creating the HTML output all right

935
00:37:05,460 --> 00:37:10,020
last slide before we jump into code to

936
00:37:08,040 --> 00:37:12,390
install PI test into a virtualized

937
00:37:10,020 --> 00:37:17,359
environment you only have to do pip

938
00:37:12,390 --> 00:37:20,069
install PI test and there are over 700

939
00:37:17,359 --> 00:37:22,740
plugins that you can use with PI test I

940
00:37:20,069 --> 00:37:25,799
happen to be using the HTML version or

941
00:37:22,740 --> 00:37:28,859
the HTML plug-in so there's a PI test

942
00:37:25,799 --> 00:37:30,630
HTML but there's this great web page you

943
00:37:28,859 --> 00:37:33,990
can go to and they've got loads and

944
00:37:30,630 --> 00:37:36,359
loads of stuff all right let's do some

945
00:37:33,990 --> 00:37:38,368
good fun stuff all right everybody who

946
00:37:36,359 --> 00:37:40,470
doesn't want to see Python coding and

947
00:37:38,369 --> 00:37:42,569
now would be a good time to go because

948
00:37:40,470 --> 00:37:49,290
the rest of this is we're gonna be

949
00:37:42,569 --> 00:37:51,630
cutting all right all right let me clean

950
00:37:49,290 --> 00:37:54,130
all this up

951
00:37:51,630 --> 00:37:56,230
all right so let's go in through a

952
00:37:54,130 --> 00:37:58,030
little bit the first thing you know we

953
00:37:56,230 --> 00:38:00,340
already covered the fact about you know

954
00:37:58,030 --> 00:38:02,620
test functions begin with a word Tet or

955
00:38:00,340 --> 00:38:06,160
test files or modules begin with tests

956
00:38:02,620 --> 00:38:10,180
there's also a special file called

957
00:38:06,160 --> 00:38:13,899
Comcast py now you can think of this

958
00:38:10,180 --> 00:38:15,700
file as an automatically imported module

959
00:38:13,900 --> 00:38:18,580
by PI test so anything you put in here

960
00:38:15,700 --> 00:38:20,560
is share it across all of your all of

961
00:38:18,580 --> 00:38:23,940
your files this is where you're gonna

962
00:38:20,560 --> 00:38:27,940
put common common functions or fixtures

963
00:38:23,940 --> 00:38:30,490
so if you see this I'll show you what's

964
00:38:27,940 --> 00:38:31,900
in here it's not required but that's

965
00:38:30,490 --> 00:38:37,779
just where you put kind of I think about

966
00:38:31,900 --> 00:38:39,760
it like Global's right so what I'm going

967
00:38:37,780 --> 00:38:44,050
to do is I'm gonna create like a brand

968
00:38:39,760 --> 00:38:46,540
new directory just brand new we'll just

969
00:38:44,050 --> 00:38:53,460
start from nothing I'll just make a

970
00:38:46,540 --> 00:38:53,460
directory called today demo all right

971
00:38:53,880 --> 00:39:00,760
nothing in here okay so I have today

972
00:38:57,580 --> 00:39:04,540
demo I'm gonna create my first file I'll

973
00:39:00,760 --> 00:39:06,580
call it you know test this and all I

974
00:39:04,540 --> 00:39:10,420
have to do is make a function I'll make

975
00:39:06,580 --> 00:39:12,340
this bigger all I have to do is make a

976
00:39:10,420 --> 00:39:15,880
function it just has to be the word test

977
00:39:12,340 --> 00:39:19,770
I can call this and I can return any

978
00:39:15,880 --> 00:39:24,040
value this doesn't do anything obviously

979
00:39:19,770 --> 00:39:25,710
but if I just do PI test it's gonna run

980
00:39:24,040 --> 00:39:29,890
test this you'll see a little dot here

981
00:39:25,710 --> 00:39:33,610
worked alright if I do - V it says that

982
00:39:29,890 --> 00:39:35,290
it passed not very exciting now you'll

983
00:39:33,610 --> 00:39:39,370
notice that even though I returned false

984
00:39:35,290 --> 00:39:41,710
here it still passed because this test

985
00:39:39,370 --> 00:39:44,560
didn't cause an exception right if I

986
00:39:41,710 --> 00:39:49,960
want to cause an exception like I could

987
00:39:44,560 --> 00:39:50,770
say assert I can type assert true is

988
00:39:49,960 --> 00:39:54,240
equal to false

989
00:39:50,770 --> 00:39:57,640
now obviously true is not equal to false

990
00:39:54,240 --> 00:39:58,930
so if I run that you can see that it

991
00:39:57,640 --> 00:39:59,650
tells me if sure enough true is not

992
00:39:58,930 --> 00:40:01,629
equal to false

993
00:39:59,650 --> 00:40:04,000
it gives me an assertion error it tells

994
00:40:01,630 --> 00:40:08,980
me this failed and this is how I

995
00:40:04,000 --> 00:40:10,030
raised an assertion okay now what you

996
00:40:08,980 --> 00:40:12,540
can do is you can put some helpful

997
00:40:10,030 --> 00:40:17,890
message here you could say you know duh

998
00:40:12,540 --> 00:40:21,040
true true is not false and if I ran this

999
00:40:17,890 --> 00:40:24,129
again you can see that you get a little

1000
00:40:21,040 --> 00:40:27,550
bit more you know information here okay

1001
00:40:24,130 --> 00:40:29,410
and if I gave it trace back is equal to

1002
00:40:27,550 --> 00:40:33,490
no remember this will just tell me that

1003
00:40:29,410 --> 00:40:36,520
it's failed and if I do short here it'll

1004
00:40:33,490 --> 00:40:40,060
just give me a little bit okay just a

1005
00:40:36,520 --> 00:40:42,430
little bit just by way of comparison I'm

1006
00:40:40,060 --> 00:40:49,120
gonna flip back over to my offline demo

1007
00:40:42,430 --> 00:40:52,359
and I'm gonna run this this this thing

1008
00:40:49,120 --> 00:40:56,380
right here the the PI test I'm gonna let

1009
00:40:52,360 --> 00:40:59,500
my EOS function blow up all right I'm

1010
00:40:56,380 --> 00:41:04,840
gonna let it I'm gonna run PI test nerf

1011
00:40:59,500 --> 00:41:08,710
oooh device dev wonderfu device our test

1012
00:41:04,840 --> 00:41:11,530
case dear test case dear you have one

1013
00:41:08,710 --> 00:41:16,920
test cases I'm only gonna test the

1014
00:41:11,530 --> 00:41:16,920
cabling nope test case the pic cabling

1015
00:41:18,180 --> 00:41:23,279
your food test case dear

1016
00:41:25,809 --> 00:41:37,250
yeah yeah yeah thank you

1017
00:41:30,730 --> 00:41:39,260
it's live all right okay so what you're

1018
00:41:37,250 --> 00:41:41,839
gonna see here is it's showing me the

1019
00:41:39,260 --> 00:41:43,910
code where this blew up right and if I

1020
00:41:41,839 --> 00:41:48,529
scroll up you'll see that there's a

1021
00:41:43,910 --> 00:41:51,140
function called test cabling right it

1022
00:41:48,529 --> 00:41:53,569
even tells me where this you know where

1023
00:41:51,140 --> 00:41:55,940
this blew up at so if I was a software

1024
00:41:53,569 --> 00:41:58,069
engineer and my code had an error in it

1025
00:41:55,940 --> 00:42:01,519
this is really really helpful right it

1026
00:41:58,069 --> 00:42:06,259
tells me exactly the line in my code

1027
00:42:01,519 --> 00:42:07,910
where it's raising an error you know in

1028
00:42:06,260 --> 00:42:12,220
this in this piece of code here I can

1029
00:42:07,910 --> 00:42:12,220
see the exception type that it's raising

1030
00:42:13,569 --> 00:42:18,019
but for us when I do this test right in

1031
00:42:16,369 --> 00:42:19,190
this file it's not really interesting

1032
00:42:18,019 --> 00:42:21,979
it's like it's just happening in that

1033
00:42:19,190 --> 00:42:23,960
file right okay there's one there's

1034
00:42:21,980 --> 00:42:27,440
another way you can generate an error if

1035
00:42:23,960 --> 00:42:29,450
you import PI tests rather than us doing

1036
00:42:27,440 --> 00:42:34,420
it assertion you can just say PI test

1037
00:42:29,450 --> 00:42:34,419
fail you know this test case failed

1038
00:42:39,880 --> 00:42:43,480
so you can see that it gives you a

1039
00:42:41,470 --> 00:42:45,160
different type of error just failed so

1040
00:42:43,480 --> 00:42:47,290
if you're writing your test case logic

1041
00:42:45,160 --> 00:42:49,779
you know maybe you write your test

1042
00:42:47,290 --> 00:42:51,130
functions to generate exceptions which

1043
00:42:49,780 --> 00:42:52,750
PI test will catch normally and that's

1044
00:42:51,130 --> 00:42:55,120
the way it's supposed to work or maybe

1045
00:42:52,750 --> 00:42:56,410
you want to use PI test fail as a direct

1046
00:42:55,120 --> 00:42:58,150
function there's no right or wrong

1047
00:42:56,410 --> 00:43:02,170
answer these are just choices you can

1048
00:42:58,150 --> 00:43:03,910
make okay the next thing that I want to

1049
00:43:02,170 --> 00:43:08,260
show you is something called a fixture

1050
00:43:03,910 --> 00:43:10,240
now when PI test runs functions like if

1051
00:43:08,260 --> 00:43:19,570
I made another function in here called

1052
00:43:10,240 --> 00:43:21,339
test that you can see like you know the

1053
00:43:19,570 --> 00:43:24,210
same function it's running it's testing

1054
00:43:21,340 --> 00:43:26,560
these two functions when I was creating

1055
00:43:24,210 --> 00:43:28,990
test cases that was running the same

1056
00:43:26,560 --> 00:43:30,880
function again and again and again but

1057
00:43:28,990 --> 00:43:33,100
had different test cases what I was

1058
00:43:30,880 --> 00:43:35,620
doing is I was parameterizing that test

1059
00:43:33,100 --> 00:43:37,980
case right to pass in a different set of

1060
00:43:35,620 --> 00:43:39,970
options over and over again it's called

1061
00:43:37,980 --> 00:43:41,680
parameterization and there's two ways

1062
00:43:39,970 --> 00:43:42,939
that you can do this I'm going to show

1063
00:43:41,680 --> 00:43:44,319
you the way that you're gonna read on

1064
00:43:42,940 --> 00:43:45,610
the Internet and then I'm going to show

1065
00:43:44,320 --> 00:43:47,890
you the way that I learned how to do it

1066
00:43:45,610 --> 00:43:54,400
for this particular use case which is a

1067
00:43:47,890 --> 00:43:57,670
which is a dynamic way okay so a fixture

1068
00:43:54,400 --> 00:44:01,750
is a function that essentially returns

1069
00:43:57,670 --> 00:44:03,580
data so let's call it these items this

1070
00:44:01,750 --> 00:44:09,040
is a function and I want to return a

1071
00:44:03,580 --> 00:44:11,680
list called this that bananas all right

1072
00:44:09,040 --> 00:44:16,470
this is a function now what I want to be

1073
00:44:11,680 --> 00:44:19,870
able to do is I want to pass these items

1074
00:44:16,470 --> 00:44:21,730
to this test function okay it seems a

1075
00:44:19,870 --> 00:44:23,710
little weird I know just just hang with

1076
00:44:21,730 --> 00:44:26,230
me for a second here and what I want to

1077
00:44:23,710 --> 00:44:28,960
be able to do is I want to look at these

1078
00:44:26,230 --> 00:44:30,760
values and let's say my test was does it

1079
00:44:28,960 --> 00:44:33,720
begin with the letter T right so I would

1080
00:44:30,760 --> 00:44:37,900
say you know for item in these items

1081
00:44:33,720 --> 00:44:42,069
assert that item starts with the letter

1082
00:44:37,900 --> 00:44:44,260
T okay now if I try to do this this is

1083
00:44:42,070 --> 00:44:45,240
going to be an error it's gonna tell me

1084
00:44:44,260 --> 00:44:47,520
it's an error

1085
00:44:45,240 --> 00:44:51,359
you can tell you hey this is not a

1086
00:44:47,520 --> 00:44:54,750
fixture so what you do is you say I want

1087
00:44:51,359 --> 00:44:57,359
to declare this as a fixture this is a

1088
00:44:54,750 --> 00:44:59,849
fixture and a fixture can has it can

1089
00:44:57,359 --> 00:45:03,270
have a scope and what a scope means is

1090
00:44:59,849 --> 00:45:05,849
it means how often do I rerun this

1091
00:45:03,270 --> 00:45:08,549
function so if I say scope is equal to

1092
00:45:05,849 --> 00:45:11,130
module it means that this this function

1093
00:45:08,549 --> 00:45:14,640
is not only going to be invoked once for

1094
00:45:11,130 --> 00:45:16,950
this module right if it's if it's by a

1095
00:45:14,640 --> 00:45:20,308
function it means that this is going to

1096
00:45:16,950 --> 00:45:22,710
be returned every time this function is

1097
00:45:20,309 --> 00:45:24,690
called there's another one called

1098
00:45:22,710 --> 00:45:26,460
session which is a lot like module

1099
00:45:24,690 --> 00:45:30,000
except session means just globally once

1100
00:45:26,460 --> 00:45:36,029
for every single file so now when I run

1101
00:45:30,000 --> 00:45:39,450
this what you'll see is I have this one

1102
00:45:36,029 --> 00:45:41,660
test case and it failed and it told me

1103
00:45:39,450 --> 00:45:45,419
you know bananas doesn't start with tea

1104
00:45:41,660 --> 00:45:49,160
so far so good right but this doesn't

1105
00:45:45,420 --> 00:45:52,920
give me a test case per per value right

1106
00:45:49,160 --> 00:45:57,359
that's what I want so what I want to do

1107
00:45:52,920 --> 00:45:59,039
is I want to parameterize these items so

1108
00:45:57,359 --> 00:46:03,390
rather than doing it as a fixture this

1109
00:45:59,039 --> 00:46:06,359
way I'll comment that out what we want

1110
00:46:03,390 --> 00:46:09,210
to do is we want to use something called

1111
00:46:06,359 --> 00:46:11,970
parameterize and what we're saying is we

1112
00:46:09,210 --> 00:46:20,430
want to parameterize these items with

1113
00:46:11,970 --> 00:46:21,959
the value this that and bananas okay so

1114
00:46:20,430 --> 00:46:24,629
what this is saying is it's it's going

1115
00:46:21,960 --> 00:46:26,130
to take this this is the the variable

1116
00:46:24,630 --> 00:46:29,069
that we're going to parameterize it has

1117
00:46:26,130 --> 00:46:32,539
to match this word here and it's going

1118
00:46:29,069 --> 00:46:32,538
to invoke this function three times

1119
00:46:36,110 --> 00:46:43,680
so now it says you know this that these

1120
00:46:39,090 --> 00:46:49,670
all failed because this is no longer a

1121
00:46:43,680 --> 00:46:49,669
list right this is now an item right so

1122
00:46:49,700 --> 00:46:56,970
because this is being iterative iterated

1123
00:46:54,120 --> 00:46:58,770
the value is first the string and then

1124
00:46:56,970 --> 00:47:01,770
it's that and then it's bananas and so I

1125
00:46:58,770 --> 00:47:05,400
was iterating over a string that's the

1126
00:47:01,770 --> 00:47:14,130
wrong thing so really what I would do is

1127
00:47:05,400 --> 00:47:15,870
I would change this to be item and this

1128
00:47:14,130 --> 00:47:24,720
is item now it's going to iterate over

1129
00:47:15,870 --> 00:47:30,089
each and I have to get it have to match

1130
00:47:24,720 --> 00:47:32,810
the words and now you can see like this

1131
00:47:30,090 --> 00:47:38,310
past that past but bananas failed okay

1132
00:47:32,810 --> 00:47:40,170
so the the main the reason why I'm

1133
00:47:38,310 --> 00:47:41,759
presenting this material like this about

1134
00:47:40,170 --> 00:47:43,500
parameterization is because the main

1135
00:47:41,760 --> 00:47:45,090
function of everything that I'm about to

1136
00:47:43,500 --> 00:47:48,450
show you next has to do with

1137
00:47:45,090 --> 00:47:51,540
parameterizing the test cases based on

1138
00:47:48,450 --> 00:47:52,740
the device because one device is going

1139
00:47:51,540 --> 00:47:55,380
to have a different collection of test

1140
00:47:52,740 --> 00:47:59,069
cases now what you're seeing me do here

1141
00:47:55,380 --> 00:48:01,110
is I'm hard coding these values now if

1142
00:47:59,070 --> 00:48:03,090
you have a database full of test cases

1143
00:48:01,110 --> 00:48:05,430
you can't hard code them you can't hard

1144
00:48:03,090 --> 00:48:06,360
code them based on a device so what you

1145
00:48:05,430 --> 00:48:09,330
really have to do is you have to

1146
00:48:06,360 --> 00:48:11,280
dynamically parameterize these tests and

1147
00:48:09,330 --> 00:48:13,410
this was the really the aha thing that I

1148
00:48:11,280 --> 00:48:14,880
had to figure out how to do and this

1149
00:48:13,410 --> 00:48:15,839
material has never been presented I've

1150
00:48:14,880 --> 00:48:17,310
never seen this material presented

1151
00:48:15,840 --> 00:48:19,500
online so what I'm about to show you

1152
00:48:17,310 --> 00:48:22,410
today I've never seen it presented even

1153
00:48:19,500 --> 00:48:25,410
in like programming workshops I showed

1154
00:48:22,410 --> 00:48:27,330
this material to a PI test expert like

1155
00:48:25,410 --> 00:48:28,890
who reviewed my slides he's like I

1156
00:48:27,330 --> 00:48:31,259
haven't seen this done before this is

1157
00:48:28,890 --> 00:48:32,940
really cutting-edge stuff so good luck

1158
00:48:31,260 --> 00:48:35,610
with that so

1159
00:48:32,940 --> 00:48:40,200
so you guys get to see it first all

1160
00:48:35,610 --> 00:48:44,370
right any questions about this level of

1161
00:48:40,200 --> 00:48:47,609
introduction about PI test okay I'm

1162
00:48:44,370 --> 00:48:50,009
gonna get back to the slides doing okay

1163
00:48:47,610 --> 00:48:56,210
on time actually I'm doing great on time

1164
00:48:50,010 --> 00:48:56,210
so am I going too fast all right good

1165
00:49:00,140 --> 00:49:06,620
all right so now we're gonna go through

1166
00:49:02,990 --> 00:49:09,379
every single piece of code that I had to

1167
00:49:06,620 --> 00:49:11,270
write and use with PI tests in order to

1168
00:49:09,380 --> 00:49:14,420
make it work for this particular use

1169
00:49:11,270 --> 00:49:19,100
case I'm going to show you about four or

1170
00:49:14,420 --> 00:49:21,440
five advanced techniques of PI test if

1171
00:49:19,100 --> 00:49:23,569
you buy the PI test book which I highly

1172
00:49:21,440 --> 00:49:28,310
recommend and it is excellent you will

1173
00:49:23,570 --> 00:49:30,260
not see any of this material okay but

1174
00:49:28,310 --> 00:49:33,340
here's what we're gonna do I'm going to

1175
00:49:30,260 --> 00:49:36,530
show you how to create your own options

1176
00:49:33,340 --> 00:49:39,980
because you might want to have a whole

1177
00:49:36,530 --> 00:49:42,680
different set of options than I have you

1178
00:49:39,980 --> 00:49:44,690
can also set up config files like an ini

1179
00:49:42,680 --> 00:49:47,629
type a file and pass that into PI test

1180
00:49:44,690 --> 00:49:49,790
it does support file based configuration

1181
00:49:47,630 --> 00:49:51,430
I'm not showing that but I just just to

1182
00:49:49,790 --> 00:49:53,570
let you know that it does support that

1183
00:49:51,430 --> 00:49:56,509
the second thing that I'm going to show

1184
00:49:53,570 --> 00:49:58,610
you is we want to verify that the device

1185
00:49:56,510 --> 00:50:00,680
is online and reachable before we run

1186
00:49:58,610 --> 00:50:02,690
tests for example if I've got a hundred

1187
00:50:00,680 --> 00:50:03,890
test cases I don't want to try to run a

1188
00:50:02,690 --> 00:50:05,090
hundred tests against a device that

1189
00:50:03,890 --> 00:50:07,129
isn't even online and get a hundred

1190
00:50:05,090 --> 00:50:08,720
failures that I want to know that the

1191
00:50:07,130 --> 00:50:11,750
device was unreachable because that's a

1192
00:50:08,720 --> 00:50:13,700
different type of failure to me now once

1193
00:50:11,750 --> 00:50:16,220
I have validated that the device is

1194
00:50:13,700 --> 00:50:18,259
online and reachable there are a few

1195
00:50:16,220 --> 00:50:20,870
things that I want to do the first is

1196
00:50:18,260 --> 00:50:23,330
after I make a device connection I'm

1197
00:50:20,870 --> 00:50:25,580
gonna have like a variable called device

1198
00:50:23,330 --> 00:50:27,049
which allows me to communicate to the

1199
00:50:25,580 --> 00:50:30,650
device how many of you guys have done

1200
00:50:27,050 --> 00:50:32,360
things like napalm or you know PI easy

1201
00:50:30,650 --> 00:50:34,580
or these types of libraries we have a

1202
00:50:32,360 --> 00:50:36,260
device instance ok so this is what I

1203
00:50:34,580 --> 00:50:38,150
mean you have that you have a mechanism

1204
00:50:36,260 --> 00:50:40,760
by which to communicate information back

1205
00:50:38,150 --> 00:50:44,240
and forth that it is the device so how

1206
00:50:40,760 --> 00:50:46,010
do we pass that to the device the answer

1207
00:50:44,240 --> 00:50:47,799
is it's going to be a fixture and I'll

1208
00:50:46,010 --> 00:50:50,720
show you how we would build that and

1209
00:50:47,800 --> 00:50:53,210
then I'm gonna spend a lot of time

1210
00:50:50,720 --> 00:50:56,600
talking about how we dynamically load

1211
00:50:53,210 --> 00:50:59,690
the test cases for the device and

1212
00:50:56,600 --> 00:51:01,730
parameterize our test cases and then I'm

1213
00:50:59,690 --> 00:51:04,100
going to talk about bulk data type of

1214
00:51:01,730 --> 00:51:06,620
device commands these are commands that

1215
00:51:04,100 --> 00:51:07,610
maybe give you a lot of data like the

1216
00:51:06,620 --> 00:51:09,410
example I'm going to show you show

1217
00:51:07,610 --> 00:51:10,880
inventory where you use that same data

1218
00:51:09,410 --> 00:51:13,490
again and again and again through

1219
00:51:10,880 --> 00:51:14,030
multiple iterations of a command you're

1220
00:51:13,490 --> 00:51:17,450
not

1221
00:51:14,030 --> 00:51:19,880
doing show inventory 100 times okay all

1222
00:51:17,450 --> 00:51:21,350
right now I'm going to take I'm going to

1223
00:51:19,880 --> 00:51:26,930
take a little while to explain the slide

1224
00:51:21,350 --> 00:51:29,420
so I'm gonna explain my testing strategy

1225
00:51:26,930 --> 00:51:34,609
and and how I'm doing this with you guys

1226
00:51:29,420 --> 00:51:38,150
today I have written a single test file

1227
00:51:34,610 --> 00:51:42,050
or module per test function so I didn't

1228
00:51:38,150 --> 00:51:45,470
write one Python file that had test

1229
00:51:42,050 --> 00:51:48,470
optics test cabling test interface I

1230
00:51:45,470 --> 00:51:53,930
didn't do that I like each specific test

1231
00:51:48,470 --> 00:51:55,520
function was its own Python module and

1232
00:51:53,930 --> 00:51:58,970
there was a reason for that which I'll

1233
00:51:55,520 --> 00:52:01,070
go into but every single file has a say

1234
00:51:58,970 --> 00:52:03,200
a basic formula that you're going to see

1235
00:52:01,070 --> 00:52:07,210
repeated there's a section of code that

1236
00:52:03,200 --> 00:52:10,730
says how to load the test cases for that

1237
00:52:07,210 --> 00:52:12,650
specific function there's a particular

1238
00:52:10,730 --> 00:52:14,900
way that I'm going to get the device the

1239
00:52:12,650 --> 00:52:17,120
information from the device if we were

1240
00:52:14,900 --> 00:52:19,190
doing an online example and I'll show

1241
00:52:17,120 --> 00:52:22,130
you the code it would make a call out to

1242
00:52:19,190 --> 00:52:24,590
PI API PI e API to talk to the device

1243
00:52:22,130 --> 00:52:28,250
we're gonna do pulling the data from

1244
00:52:24,590 --> 00:52:30,500
from a snapshot file and then there is a

1245
00:52:28,250 --> 00:52:33,050
PI test function that's going to get

1246
00:52:30,500 --> 00:52:35,660
invoked and what it's really doing is

1247
00:52:33,050 --> 00:52:39,890
calling another function so I've built a

1248
00:52:35,660 --> 00:52:42,980
library that is currently called nerve

1249
00:52:39,890 --> 00:52:45,080
root PI test iOS and and what this

1250
00:52:42,980 --> 00:52:47,300
library is is just the test function

1251
00:52:45,080 --> 00:52:48,560
validators has nuk it actually has

1252
00:52:47,300 --> 00:52:51,260
nothing to do with pi test I'm gonna

1253
00:52:48,560 --> 00:52:53,660
change the name all it's looking at is

1254
00:52:51,260 --> 00:52:56,360
the actual data against against a test

1255
00:52:53,660 --> 00:52:58,220
case and the reason why I did that is

1256
00:52:56,360 --> 00:53:00,770
because I wanted to potentially use that

1257
00:52:58,220 --> 00:53:02,390
same library with a different testing

1258
00:53:00,770 --> 00:53:05,120
framework maybe I wanted to use robot

1259
00:53:02,390 --> 00:53:07,759
maybe I wanted to use ansible maybe I

1260
00:53:05,120 --> 00:53:09,350
wanted to use something else right maybe

1261
00:53:07,760 --> 00:53:12,170
you have your own testing framework but

1262
00:53:09,350 --> 00:53:15,230
writing the validator you know is the

1263
00:53:12,170 --> 00:53:16,640
same no matter what framework so so

1264
00:53:15,230 --> 00:53:20,480
there's a library that you're gonna see

1265
00:53:16,640 --> 00:53:21,500
in the in the github repo and and it

1266
00:53:20,480 --> 00:53:22,880
looks and I'm going to show it to you

1267
00:53:21,500 --> 00:53:26,060
now because I want to show you what a

1268
00:53:22,880 --> 00:53:28,420
test function looks like in the repo

1269
00:53:26,060 --> 00:53:31,910
you'll see it's called

1270
00:53:28,420 --> 00:53:34,010
right here and you'll see that there's a

1271
00:53:31,910 --> 00:53:35,560
bunch of functions in here I'll go

1272
00:53:34,010 --> 00:53:39,320
through these in a little bit of detail

1273
00:53:35,560 --> 00:53:43,029
but every single PI test function

1274
00:53:39,320 --> 00:53:46,340
follows the same basic formula okay and

1275
00:53:43,030 --> 00:53:50,180
every single device has a directory of

1276
00:53:46,340 --> 00:53:52,820
test cases so in my offline demo you'll

1277
00:53:50,180 --> 00:53:56,660
see that I have a directory called dev

1278
00:53:52,820 --> 00:54:01,010
one test cases and here are my cabling

1279
00:53:56,660 --> 00:54:03,680
right you can see that this is really

1280
00:54:01,010 --> 00:54:07,630
just a JSON file it's a list and you can

1281
00:54:03,680 --> 00:54:12,740
put that so that's weird

1282
00:54:07,630 --> 00:54:17,440
nope thank you let me get over to that

1283
00:54:12,740 --> 00:54:21,410
get out of that thank you

1284
00:54:17,440 --> 00:54:23,210
so in the repo you'll see that in the

1285
00:54:21,410 --> 00:54:25,100
offline demo there's a directory of test

1286
00:54:23,210 --> 00:54:26,720
cases all right

1287
00:54:25,100 --> 00:54:28,730
you can see like there's one for cabling

1288
00:54:26,720 --> 00:54:32,029
there's one for interface status the one

1289
00:54:28,730 --> 00:54:35,210
for from for optic inventory so I've

1290
00:54:32,030 --> 00:54:37,430
segregated every single test case by

1291
00:54:35,210 --> 00:54:39,110
function now in my production

1292
00:54:37,430 --> 00:54:41,330
environment I have a database and I read

1293
00:54:39,110 --> 00:54:43,040
from a database and it's all very nice

1294
00:54:41,330 --> 00:54:44,600
and magical but that doesn't demo well

1295
00:54:43,040 --> 00:54:46,730
you know in this kind of environment so

1296
00:54:44,600 --> 00:54:48,140
I wanted to make everything easy for you

1297
00:54:46,730 --> 00:54:50,270
guys to play with so if you wanted to

1298
00:54:48,140 --> 00:54:52,069
download this github repo and tweak it

1299
00:54:50,270 --> 00:54:53,330
and play with it I like to call that you

1300
00:54:52,070 --> 00:54:54,650
know cake decorating I'll give you

1301
00:54:53,330 --> 00:54:56,060
something that works you can you can

1302
00:54:54,650 --> 00:54:57,590
kind of ice the cake the way you want it

1303
00:54:56,060 --> 00:54:58,850
and you can play around with it didn't

1304
00:54:57,590 --> 00:55:00,350
want to put the database and the mix of

1305
00:54:58,850 --> 00:55:02,540
things that would overly complicate it

1306
00:55:00,350 --> 00:55:04,819
but what you're seeing here is really

1307
00:55:02,540 --> 00:55:06,170
just a dump of my database into files so

1308
00:55:04,820 --> 00:55:09,530
that we could use it for today's

1309
00:55:06,170 --> 00:55:12,010
presentation so every single test case

1310
00:55:09,530 --> 00:55:14,630
you know essentially is a dictionary

1311
00:55:12,010 --> 00:55:16,880
which says you know its function the

1312
00:55:14,630 --> 00:55:20,720
device the parameters and so forth so

1313
00:55:16,880 --> 00:55:23,570
this one I'm just going to fix back so

1314
00:55:20,720 --> 00:55:27,500
it's not broken and that's how every

1315
00:55:23,570 --> 00:55:29,810
single file is laid out for the offline

1316
00:55:27,500 --> 00:55:32,210
for this offline demonstration what

1317
00:55:29,810 --> 00:55:33,740
you'll also see is this directory where

1318
00:55:32,210 --> 00:55:36,260
I have all the output for the show

1319
00:55:33,740 --> 00:55:38,990
commands so here's the output again for

1320
00:55:36,260 --> 00:55:40,270
show lldp neighbor I just captured some

1321
00:55:38,990 --> 00:55:43,000
information and I

1322
00:55:40,270 --> 00:55:46,060
kind of cleaned it up for our demo same

1323
00:55:43,000 --> 00:55:48,100
thing for show inventory you know here's

1324
00:55:46,060 --> 00:55:49,810
some information from the inventory

1325
00:55:48,100 --> 00:55:56,020
section you know that were you going to

1326
00:55:49,810 --> 00:56:00,520
use for our demo now the next thing I

1327
00:55:56,020 --> 00:56:07,930
want to show you is a check so this is a

1328
00:56:00,520 --> 00:56:08,590
function that is in this library and in

1329
00:56:07,930 --> 00:56:11,620
this library

1330
00:56:08,590 --> 00:56:13,210
it's called test cabling now if I had to

1331
00:56:11,620 --> 00:56:15,609
do this all over I would probably not

1332
00:56:13,210 --> 00:56:17,350
call this test cabling because in the PI

1333
00:56:15,610 --> 00:56:19,000
test modules also called test cabling

1334
00:56:17,350 --> 00:56:21,160
and so a little confusing so maybe I

1335
00:56:19,000 --> 00:56:23,320
would call this verify cabling because

1336
00:56:21,160 --> 00:56:26,410
really what it's doing is it's is taking

1337
00:56:23,320 --> 00:56:28,090
the actual data from the device and it's

1338
00:56:26,410 --> 00:56:29,319
taking the test case data and all its

1339
00:56:28,090 --> 00:56:30,940
really doing is comparing the

1340
00:56:29,320 --> 00:56:33,970
information in this industry to

1341
00:56:30,940 --> 00:56:37,000
dictionaries so what does that logic

1342
00:56:33,970 --> 00:56:39,939
look like the first thing that it does

1343
00:56:37,000 --> 00:56:42,490
is it says in the actual you know in the

1344
00:56:39,940 --> 00:56:45,220
actual data I have this data structure

1345
00:56:42,490 --> 00:56:47,859
called lldp neighbors and in my test

1346
00:56:45,220 --> 00:56:50,319
case parameters I have an interface so

1347
00:56:47,860 --> 00:56:52,450
what I end up doing is I first check to

1348
00:56:50,320 --> 00:56:56,080
make sure that that interface shows up

1349
00:56:52,450 --> 00:56:58,000
in the lldp output because maybe it's

1350
00:56:56,080 --> 00:57:00,520
there and maybe it's not and if it's not

1351
00:56:58,000 --> 00:57:03,130
there then what I generate is a missing

1352
00:57:00,520 --> 00:57:06,070
error I say that this information is

1353
00:57:03,130 --> 00:57:07,720
missing I can't I can't perform my test

1354
00:57:06,070 --> 00:57:10,570
case because the thing that I'm trying

1355
00:57:07,720 --> 00:57:13,720
to measure is missing so I've created a

1356
00:57:10,570 --> 00:57:15,790
very specific exception type called

1357
00:57:13,720 --> 00:57:17,980
missing error which I'll show you in a

1358
00:57:15,790 --> 00:57:20,410
minute but rather than using a generic

1359
00:57:17,980 --> 00:57:22,360
type of error from Python like value

1360
00:57:20,410 --> 00:57:25,600
error or runtime error you can create

1361
00:57:22,360 --> 00:57:27,070
your own exception classes and it's this

1362
00:57:25,600 --> 00:57:28,960
process by which I could then use to

1363
00:57:27,070 --> 00:57:31,780
prioritize is that an error is that a

1364
00:57:28,960 --> 00:57:34,210
warning et cetera so you have a lot of

1365
00:57:31,780 --> 00:57:36,190
capability to customize the type of

1366
00:57:34,210 --> 00:57:40,030
exception and how you interpret that

1367
00:57:36,190 --> 00:57:42,430
exception through PI test so I do this a

1368
00:57:40,030 --> 00:57:44,320
lot because sometimes in in the

1369
00:57:42,430 --> 00:57:45,549
networking when we pull out data there's

1370
00:57:44,320 --> 00:57:47,860
things that we want to measure things

1371
00:57:45,550 --> 00:57:50,590
that are ephemeral pieces of information

1372
00:57:47,860 --> 00:57:52,780
like an ARP entry or an lldp entry and

1373
00:57:50,590 --> 00:57:54,070
if it's not there you want to know that

1374
00:57:52,780 --> 00:57:55,630
it's not there versus

1375
00:57:54,070 --> 00:57:58,210
it's there and you're measuring it and

1376
00:57:55,630 --> 00:58:00,970
it's wrong so that's the first thing I

1377
00:57:58,210 --> 00:58:02,980
do is make sure that it's there and then

1378
00:58:00,970 --> 00:58:04,660
I look and I see you know does the

1379
00:58:02,980 --> 00:58:07,690
interface or does the remote device

1380
00:58:04,660 --> 00:58:10,480
match and so here I'm kind of looking at

1381
00:58:07,690 --> 00:58:12,580
the actual data compared to the expected

1382
00:58:10,480 --> 00:58:13,930
data and I'm and I'm lowering the string

1383
00:58:12,580 --> 00:58:16,569
so that I don't to worry about string

1384
00:58:13,930 --> 00:58:18,850
compares for capitalization or whatnot

1385
00:58:16,570 --> 00:58:20,680
so I'm saying you know does the remote

1386
00:58:18,850 --> 00:58:23,350
system match you know is it switch five

1387
00:58:20,680 --> 00:58:25,509
when I think it's switch five and I'm

1388
00:58:23,350 --> 00:58:27,910
basically generating a list of types of

1389
00:58:25,510 --> 00:58:29,560
errors so because there could be more

1390
00:58:27,910 --> 00:58:31,330
than one error like maybe it's the wrong

1391
00:58:29,560 --> 00:58:32,470
device and it's the wrong interface or

1392
00:58:31,330 --> 00:58:34,569
it could be just the wrong interface on

1393
00:58:32,470 --> 00:58:36,879
the correct device etc etc so I'm trying

1394
00:58:34,570 --> 00:58:39,340
to like check all the things and then I

1395
00:58:36,880 --> 00:58:41,200
just kind of put them into a list and if

1396
00:58:39,340 --> 00:58:43,000
I have any errors at all what I'm then

1397
00:58:41,200 --> 00:58:46,060
generated is I generate a mismatch error

1398
00:58:43,000 --> 00:58:49,420
and you can see that this type of error

1399
00:58:46,060 --> 00:58:56,980
actually supports an actual and expected

1400
00:58:49,420 --> 00:58:59,440
and an actual so this is my this is my

1401
00:58:56,980 --> 00:59:01,420
exception and the reason why I do this

1402
00:58:59,440 --> 00:59:04,270
is because I want to be able to capture

1403
00:59:01,420 --> 00:59:05,710
the data in my exception and pull that

1404
00:59:04,270 --> 00:59:07,720
data back out with having the string

1405
00:59:05,710 --> 00:59:09,040
parse anything I just want the data so

1406
00:59:07,720 --> 00:59:11,109
that I can manipulate and use that data

1407
00:59:09,040 --> 00:59:14,130
and I can and create you know valuable

1408
00:59:11,110 --> 00:59:17,350
types of reports based on that data and

1409
00:59:14,130 --> 00:59:20,380
you can see that every type of class of

1410
00:59:17,350 --> 00:59:22,509
exception that I create I do implement

1411
00:59:20,380 --> 00:59:24,490
the string method and this is what shows

1412
00:59:22,510 --> 00:59:26,890
up by PI test this is when they

1413
00:59:24,490 --> 00:59:28,419
interpret that exception it translates

1414
00:59:26,890 --> 00:59:30,609
that exception into a string so you get

1415
00:59:28,420 --> 00:59:33,160
that output on this on the either the

1416
00:59:30,610 --> 00:59:36,220
CLI or what you saw in the HTML report

1417
00:59:33,160 --> 00:59:37,830
so you have control over what you want

1418
00:59:36,220 --> 00:59:40,569
to report and how you want to see it and

1419
00:59:37,830 --> 00:59:41,890
that's how you do this this nerve

1420
00:59:40,570 --> 00:59:44,290
through exception is really just

1421
00:59:41,890 --> 00:59:45,730
implementing or sub classing runtime

1422
00:59:44,290 --> 00:59:47,050
error it doesn't have to be runtime

1423
00:59:45,730 --> 00:59:50,950
error it just needs to be an exception

1424
00:59:47,050 --> 00:59:56,590
class again all this code is available

1425
00:59:50,950 --> 00:59:58,120
for you guys to look at all right so

1426
00:59:56,590 --> 00:59:59,920
that's what a testing function looks

1427
00:59:58,120 --> 01:00:01,509
like it's really just comparing those

1428
00:59:59,920 --> 01:00:03,070
two pieces of the data and generating

1429
01:00:01,510 --> 01:00:06,300
the exception based on the logic that

1430
01:00:03,070 --> 01:00:08,650
you have all right

1431
01:00:06,300 --> 01:00:17,080
I'm going to go back to the slide deck

1432
01:00:08,650 --> 01:00:19,120
now so the first thing that we want to

1433
01:00:17,080 --> 01:00:21,549
do is we want to be able to customize

1434
01:00:19,120 --> 01:00:25,330
the the command line arguments to PI

1435
01:00:21,550 --> 01:00:27,490
test PI test is one of the most

1436
01:00:25,330 --> 01:00:29,650
extensible framework pieces of software

1437
01:00:27,490 --> 01:00:32,529
I've ever worked with in Pi of Python

1438
01:00:29,650 --> 01:00:35,590
it's it's probably my number one package

1439
01:00:32,530 --> 01:00:38,590
to use in in Python land of all time it

1440
01:00:35,590 --> 01:00:40,870
is is quite amazing piece of software I

1441
01:00:38,590 --> 01:00:44,230
can't say enough nice things about this

1442
01:00:40,870 --> 01:00:47,230
stuff I when I teach automation

1443
01:00:44,230 --> 01:00:48,400
programming to networking people this is

1444
01:00:47,230 --> 01:00:49,930
one of the first things I try to teach

1445
01:00:48,400 --> 01:00:55,180
them is testing like you know I try to

1446
01:00:49,930 --> 01:00:57,759
teach testing first the the parameters

1447
01:00:55,180 --> 01:01:00,069
that I wanted to create was this is the

1448
01:00:57,760 --> 01:01:02,020
device that I want to connect to this is

1449
01:01:00,070 --> 01:01:03,040
usually the host name of the device this

1450
01:01:02,020 --> 01:01:05,620
is how I'm going to make a connection to

1451
01:01:03,040 --> 01:01:10,570
it and then the directory where the test

1452
01:01:05,620 --> 01:01:14,680
cases are located okay now the way in

1453
01:01:10,570 --> 01:01:17,860
which you hook into the PI test

1454
01:01:14,680 --> 01:01:20,859
framework is through a series of very

1455
01:01:17,860 --> 01:01:23,530
specific functions and they're called

1456
01:01:20,860 --> 01:01:25,810
hooks so if you go on to the PI test

1457
01:01:23,530 --> 01:01:28,630
documentation site there's this there's

1458
01:01:25,810 --> 01:01:30,610
a very specific section called hooks and

1459
01:01:28,630 --> 01:01:32,200
they're not I mean they're documented

1460
01:01:30,610 --> 01:01:33,550
like you would imagine a software

1461
01:01:32,200 --> 01:01:36,609
programmer would document them but they

1462
01:01:33,550 --> 01:01:40,750
don't really explain how to really use

1463
01:01:36,610 --> 01:01:42,970
them you know you're hunting around so

1464
01:01:40,750 --> 01:01:48,580
the purpose of this tutorial to show you

1465
01:01:42,970 --> 01:01:50,980
how to use these things all right so I'm

1466
01:01:48,580 --> 01:01:52,390
gonna actually show you the code I'm

1467
01:01:50,980 --> 01:01:54,940
gonna play with the code so you can kind

1468
01:01:52,390 --> 01:01:57,910
of see how we do this there is a hook

1469
01:01:54,940 --> 01:02:01,120
called PI test add option and you put

1470
01:01:57,910 --> 01:02:04,420
that in the the comp test py that

1471
01:02:01,120 --> 01:02:07,660
top-level file and this gets called

1472
01:02:04,420 --> 01:02:09,880
before everything is run and your and it

1473
01:02:07,660 --> 01:02:11,440
works a lot like parse args if you're

1474
01:02:09,880 --> 01:02:14,680
familiar with Python general artist

1475
01:02:11,440 --> 01:02:16,600
processing and in it you you can tell it

1476
01:02:14,680 --> 01:02:18,759
which arguments that you want you can

1477
01:02:16,600 --> 01:02:24,368
tell if it's required or not and you can

1478
01:02:18,760 --> 01:02:29,170
do it a little bit of help so I'm gonna

1479
01:02:24,369 --> 01:02:35,350
go back into the offline demo and if I

1480
01:02:29,170 --> 01:02:38,380
do PI test - - help and I look for a

1481
01:02:35,350 --> 01:02:41,950
nooner foo you're gonna see that there

1482
01:02:38,380 --> 01:02:45,100
are these custom options and you can see

1483
01:02:41,950 --> 01:02:46,629
that I have nerve food device I have one

1484
01:02:45,100 --> 01:02:48,670
called nerve root test case director

1485
01:02:46,630 --> 01:02:51,550
which you've seen and then I also have

1486
01:02:48,670 --> 01:02:53,560
one called SSH config I don't know if

1487
01:02:51,550 --> 01:02:55,750
anybody uses SSH config files a lot I

1488
01:02:53,560 --> 01:02:58,029
use them a lot because a lot of times my

1489
01:02:55,750 --> 01:03:01,750
devices are not in a DNS or a hostname

1490
01:02:58,030 --> 01:03:03,880
and I use an SSH config file to deal

1491
01:03:01,750 --> 01:03:10,660
with IP addresses and usernames and

1492
01:03:03,880 --> 01:03:13,990
passwords and so forth okay so if we

1493
01:03:10,660 --> 01:03:16,629
look at in the library in nerf OOP I

1494
01:03:13,990 --> 01:03:20,589
test iOS if you look in that config test

1495
01:03:16,630 --> 01:03:23,530
dot py file you'll see this PI test add

1496
01:03:20,590 --> 01:03:26,170
option right where this has got defined

1497
01:03:23,530 --> 01:03:27,630
so if you import this library you import

1498
01:03:26,170 --> 01:03:31,630
this function you get it automatically

1499
01:03:27,630 --> 01:03:36,250
so in in the offline demo for example if

1500
01:03:31,630 --> 01:03:38,710
we opened up that PI test comp file what

1501
01:03:36,250 --> 01:03:40,690
you can see is that I imported you know

1502
01:03:38,710 --> 01:03:43,570
from this library I just imported that

1503
01:03:40,690 --> 01:03:47,770
that that hook which means I get it by

1504
01:03:43,570 --> 01:03:51,780
default okay now if I wanted to override

1505
01:03:47,770 --> 01:03:51,780
that and do anything that I wanted

1506
01:03:55,670 --> 01:04:00,010
like say I wanted to kind of mess with

1507
01:03:57,680 --> 01:04:00,009
this

1508
01:04:05,680 --> 01:04:11,700
right now I'm not gonna add any special

1509
01:04:07,930 --> 01:04:18,098
any any special items so now if I do

1510
01:04:11,700 --> 01:04:21,990
this and I go to custom you know there's

1511
01:04:18,099 --> 01:04:21,990
not gonna be any nerf ooh in here

1512
01:04:23,190 --> 01:04:27,069
there's no nerf or in here because I

1513
01:04:25,150 --> 01:04:29,500
kind of got something there so if I

1514
01:04:27,069 --> 01:04:34,599
wanted to create one I could say you

1515
01:04:29,500 --> 01:04:36,279
know parser dot add option you can see

1516
01:04:34,599 --> 01:04:39,180
like there's an add option function you

1517
01:04:36,279 --> 01:04:43,049
give it the command that you want so add

1518
01:04:39,180 --> 01:04:49,118
option and I can say you know hostname

1519
01:04:43,049 --> 01:04:52,740
you know help cool you know this is Bo's

1520
01:04:49,119 --> 01:04:56,740
name now I didn't say required is true

1521
01:04:52,740 --> 01:04:59,470
right so that I can do grep hostname you

1522
01:04:56,740 --> 01:05:02,169
can see now there's host name and if I

1523
01:04:59,470 --> 01:05:04,538
wanted to make it required this means

1524
01:05:02,170 --> 01:05:06,819
that it won't run unless I provide the

1525
01:05:04,539 --> 01:05:08,319
value you saw that before how the

1526
01:05:06,819 --> 01:05:13,029
program wouldn't run unless I provided

1527
01:05:08,319 --> 01:05:15,910
some value so all that is doing is that

1528
01:05:13,029 --> 01:05:17,710
setting up a data structure inside of PI

1529
01:05:15,910 --> 01:05:20,230
test it's not actually doing anything

1530
01:05:17,710 --> 01:05:22,660
with it it's just setting it up so that

1531
01:05:20,230 --> 01:05:26,049
I can use that information later it's

1532
01:05:22,660 --> 01:05:27,970
setting up this object called config so

1533
01:05:26,049 --> 01:05:29,829
in PI testers a config object that

1534
01:05:27,970 --> 01:05:31,799
allows us to store store that

1535
01:05:29,829 --> 01:05:34,799
information and make use of it later

1536
01:05:31,799 --> 01:05:34,799
okay

1537
01:05:39,150 --> 01:05:43,070
all right

1538
01:05:41,120 --> 01:05:45,529
so the next thing that we want to do is

1539
01:05:43,070 --> 01:05:47,900
is now that we've provided the host name

1540
01:05:45,530 --> 01:05:49,220
or the device name we want to reach out

1541
01:05:47,900 --> 01:05:50,990
and touch it we want to make sure that

1542
01:05:49,220 --> 01:05:54,319
it's reachable that our credentials are

1543
01:05:50,990 --> 01:05:57,049
correct that things are ok and if it

1544
01:05:54,320 --> 01:06:01,040
isn't ok we want PI tests to exit out

1545
01:05:57,050 --> 01:06:04,310
immediately ok I'm going to show you

1546
01:06:01,040 --> 01:06:06,110
both offline and online I can't do the

1547
01:06:04,310 --> 01:06:08,720
online test because again world series

1548
01:06:06,110 --> 01:06:10,550
but I'll show you the offline version of

1549
01:06:08,720 --> 01:06:21,439
this and we'll do a little cake

1550
01:06:10,550 --> 01:06:27,290
decorating as we go along all right so

1551
01:06:21,440 --> 01:06:29,000
for the online the way we do this is

1552
01:06:27,290 --> 01:06:33,529
there's another hook function called

1553
01:06:29,000 --> 01:06:36,920
session start and it has passed a

1554
01:06:33,530 --> 01:06:40,520
session object and the session object

1555
01:06:36,920 --> 01:06:43,550
has the config object so where we just

1556
01:06:40,520 --> 01:06:46,930
set our nur foo device name and our nur

1557
01:06:43,550 --> 01:06:49,670
foo test case this is what stores that

1558
01:06:46,930 --> 01:06:53,540
now I'm doing something a little fancy

1559
01:06:49,670 --> 01:06:56,360
here but really what it amounts to is I

1560
01:06:53,540 --> 01:06:58,120
am creating a private piece of data this

1561
01:06:56,360 --> 01:07:00,470
is why you see the underscore and

1562
01:06:58,120 --> 01:07:02,390
because I'm passing because I have

1563
01:07:00,470 --> 01:07:05,060
access to this config object throughout

1564
01:07:02,390 --> 01:07:07,490
all of my test functions I'm gonna want

1565
01:07:05,060 --> 01:07:09,950
to refer back to this information again

1566
01:07:07,490 --> 01:07:14,990
and again and again so I'm gonna store

1567
01:07:09,950 --> 01:07:17,240
this information for my config so here's

1568
01:07:14,990 --> 01:07:21,589
minor foo and what I'm doing is is I'm

1569
01:07:17,240 --> 01:07:24,350
storing a my test case directory so that

1570
01:07:21,590 --> 01:07:28,040
I have it available to me as a Python

1571
01:07:24,350 --> 01:07:30,049
path object so I can read from it so

1572
01:07:28,040 --> 01:07:31,940
here I'm getting the device name from my

1573
01:07:30,050 --> 01:07:34,580
options so you can see how I'm getting

1574
01:07:31,940 --> 01:07:36,950
it I'm getting the SSH config to see if

1575
01:07:34,580 --> 01:07:39,920
it was passed and then this is you know

1576
01:07:36,950 --> 01:07:42,620
PI e a P I device object and it's going

1577
01:07:39,920 --> 01:07:44,480
to pull in that device object and and

1578
01:07:42,620 --> 01:07:48,529
create it based on the device name and

1579
01:07:44,480 --> 01:07:51,260
some of my SSH config and then what I do

1580
01:07:48,530 --> 01:07:53,900
is I probe to see is my device reachable

1581
01:07:51,260 --> 01:07:54,970
if my device is not reachable meaning

1582
01:07:53,900 --> 01:07:57,730
the IP address is not

1583
01:07:54,970 --> 01:08:00,279
line then I'm going to call this

1584
01:07:57,730 --> 01:08:02,320
function PI test exit and this is what

1585
01:08:00,280 --> 01:08:05,320
causes PI test to exit the way you saw

1586
01:08:02,320 --> 01:08:06,610
we're just it'll stop immediately but to

1587
01:08:05,320 --> 01:08:08,890
me that's not good enough you know just

1588
01:08:06,610 --> 01:08:10,300
just to make sure that I can test it you

1589
01:08:08,890 --> 01:08:11,560
know IP reachable is one thing but I

1590
01:08:10,300 --> 01:08:14,290
want to make sure that my credentials

1591
01:08:11,560 --> 01:08:15,970
were okay as well so I try to run one

1592
01:08:14,290 --> 01:08:20,380
command I do like show version just to

1593
01:08:15,970 --> 01:08:22,059
make sure that that it works or I happen

1594
01:08:20,380 --> 01:08:24,609
to be passing environment variable is

1595
01:08:22,060 --> 01:08:27,040
called a OS user an EOS password maybe I

1596
01:08:24,609 --> 01:08:31,120
forgot to set them which happens a lot

1597
01:08:27,040 --> 01:08:33,160
so right and so I'll try to execute this

1598
01:08:31,120 --> 01:08:34,870
command and if it generates a connection

1599
01:08:33,160 --> 01:08:38,439
error you know I say hey maybe you

1600
01:08:34,870 --> 01:08:39,670
forgot to do this and I exit or if it's

1601
01:08:38,439 --> 01:08:41,649
not a connection error it's some other

1602
01:08:39,670 --> 01:08:43,540
type of error that I don't know it'll

1603
01:08:41,649 --> 01:08:45,729
just tell me hey I don't know how to get

1604
01:08:43,540 --> 01:08:48,310
to this device but here's the yours the

1605
01:08:45,729 --> 01:08:50,979
interesting thing I then once I have

1606
01:08:48,310 --> 01:08:53,110
this device object I then actually hold

1607
01:08:50,979 --> 01:08:54,399
on to it I store it now this is not like

1608
01:08:53,109 --> 01:08:57,639
you know it's not normally what you

1609
01:08:54,399 --> 01:08:59,679
should do but it works so you know open

1610
01:08:57,640 --> 01:09:01,690
source software so what I ended up doing

1611
01:08:59,680 --> 01:09:03,040
is I because I'm already connected to

1612
01:09:01,689 --> 01:09:04,359
this device and I know that it's good I

1613
01:09:03,040 --> 01:09:06,100
want to hold on to it because I want to

1614
01:09:04,359 --> 01:09:09,519
get to it later right

1615
01:09:06,100 --> 01:09:11,170
so I actually store it I attach it to my

1616
01:09:09,520 --> 01:09:15,310
little private piece of area and I call

1617
01:09:11,170 --> 01:09:16,930
it dot device now for the offline I

1618
01:09:15,310 --> 01:09:19,380
don't have an actual device what I'm

1619
01:09:16,930 --> 01:09:22,570
talking to you what I have is a

1620
01:09:19,380 --> 01:09:24,640
directory full of the actual show data

1621
01:09:22,569 --> 01:09:29,099
right so let's take a look at what that

1622
01:09:24,640 --> 01:09:29,100
looks like that looks somewhat different

1623
01:09:31,889 --> 01:09:39,299
so for my offline demo again I'll go

1624
01:09:35,009 --> 01:09:39,779
into into this PI test or the contest up

1625
01:09:39,299 --> 01:09:43,290
UI

1626
01:09:39,779 --> 01:09:45,509
I have PI test session start and you'll

1627
01:09:43,290 --> 01:09:47,368
notice that again you know I set up this

1628
01:09:45,509 --> 01:09:48,868
config nerve through private dictionary

1629
01:09:47,368 --> 01:09:51,899
I have this I just set up a dictionary

1630
01:09:48,868 --> 01:09:54,889
and I say my show outputs directory is

1631
01:09:51,899 --> 01:09:58,409
the the directory that I happen to be in

1632
01:09:54,889 --> 01:10:00,960
the device name and then - show outputs

1633
01:09:58,409 --> 01:10:02,670
this is you know again it's a demo but

1634
01:10:00,960 --> 01:10:04,739
you can see I've got device name - show

1635
01:10:02,670 --> 01:10:07,860
outputs up here and this is where all

1636
01:10:04,739 --> 01:10:10,379
this this data is but you don't see me

1637
01:10:07,860 --> 01:10:13,500
actually doing a test like well what

1638
01:10:10,380 --> 01:10:15,420
happens if I if I provided a device name

1639
01:10:13,500 --> 01:10:17,940
that didn't exist and I didn't have that

1640
01:10:15,420 --> 01:10:20,040
data and then it tried to use it well

1641
01:10:17,940 --> 01:10:23,489
this is what happens if I try to do that

1642
01:10:20,040 --> 01:10:25,650
if I say dev - it's going to try to run

1643
01:10:23,489 --> 01:10:28,138
stuff and I get all these errors like I

1644
01:10:25,650 --> 01:10:32,849
get all these errors because that file

1645
01:10:28,139 --> 01:10:37,860
doesn't exist right I do let me do this

1646
01:10:32,850 --> 01:10:44,460
way PI test nor food device dev - nor

1647
01:10:37,860 --> 01:10:49,860
foo test case directory one test cases

1648
01:10:44,460 --> 01:10:51,840
you see it basically said every single

1649
01:10:49,860 --> 01:10:56,400
test case failed right this is what I

1650
01:10:51,840 --> 01:11:00,170
don't want to do all right let me just

1651
01:10:56,400 --> 01:11:00,170
do that again with - TB equals

1652
01:11:01,840 --> 01:11:06,520
so essentially this was I can't get my

1653
01:11:05,200 --> 01:11:08,080
data this is what this is really telling

1654
01:11:06,520 --> 01:11:08,950
me I couldn't get my data because dev 2

1655
01:11:08,080 --> 01:11:11,559
doesn't exist

1656
01:11:08,950 --> 01:11:13,929
but I didn't put that check in my

1657
01:11:11,560 --> 01:11:16,840
session start so what would I do

1658
01:11:13,930 --> 01:11:19,570
so let's do a little cake decorating I'm

1659
01:11:16,840 --> 01:11:22,900
gonna go in here and I've got this show

1660
01:11:19,570 --> 01:11:25,150
outputs directory right so maybe I want

1661
01:11:22,900 --> 01:11:32,610
to make sure that that works right so I

1662
01:11:25,150 --> 01:11:40,240
wanna say session config nor foo show

1663
01:11:32,610 --> 01:11:44,620
outputs beer exists or I could say is

1664
01:11:40,240 --> 01:11:48,940
directory you know if not directory then

1665
01:11:44,620 --> 01:11:54,660
you know PI test exit no directory for

1666
01:11:48,940 --> 01:11:54,660
this device right

1667
01:11:58,510 --> 01:12:10,510
and of course you can have coding errors

1668
01:12:02,530 --> 01:12:12,309
all the time fix that and this says no

1669
01:12:10,510 --> 01:12:14,020
director for this device so this is what

1670
01:12:12,310 --> 01:12:15,730
I mean by cake duct decorating you know

1671
01:12:14,020 --> 01:12:17,230
I'm giving you something that works you

1672
01:12:15,730 --> 01:12:18,700
know in the sample directory you can

1673
01:12:17,230 --> 01:12:21,700
kind of play around and tweak with it

1674
01:12:18,700 --> 01:12:25,809
okay all right

1675
01:12:21,700 --> 01:12:29,349
so that covers you know how do we verify

1676
01:12:25,810 --> 01:12:30,790
that a device is online now you might

1677
01:12:29,350 --> 01:12:31,840
have multiple things that you're

1678
01:12:30,790 --> 01:12:33,070
connecting to maybe you're trying to

1679
01:12:31,840 --> 01:12:34,750
connect to your database maybe you're

1680
01:12:33,070 --> 01:12:36,309
trying to connect to a controller maybe

1681
01:12:34,750 --> 01:12:38,140
you're trying to connect to three or

1682
01:12:36,310 --> 01:12:39,520
four different things in order to

1683
01:12:38,140 --> 01:12:40,660
automate your processes maybe you're

1684
01:12:39,520 --> 01:12:42,220
trying to connect to ansible Tower

1685
01:12:40,660 --> 01:12:44,260
because you want to run some jobs with

1686
01:12:42,220 --> 01:12:46,690
ansible Tower you know this is a this is

1687
01:12:44,260 --> 01:12:48,070
where you would hook in ensure that you

1688
01:12:46,690 --> 01:12:50,080
have reach ability to all the systems

1689
01:12:48,070 --> 01:12:52,599
that you want to test or communicate

1690
01:12:50,080 --> 01:12:55,769
with and do that once before you start

1691
01:12:52,600 --> 01:12:57,970
launching into all your test cases so

1692
01:12:55,770 --> 01:13:01,780
this is a slide that talks about that

1693
01:12:57,970 --> 01:13:05,140
which we've covered and and now that we

1694
01:13:01,780 --> 01:13:07,480
have this device this device object you

1695
01:13:05,140 --> 01:13:09,520
know how do we get that device into our

1696
01:13:07,480 --> 01:13:12,190
test case because we want to use that

1697
01:13:09,520 --> 01:13:13,900
object in order to communicate with the

1698
01:13:12,190 --> 01:13:16,629
device for example what I'm showing here

1699
01:13:13,900 --> 01:13:19,000
is for this cabling test I want to run

1700
01:13:16,630 --> 01:13:21,010
the command show lldp neighbors for the

1701
01:13:19,000 --> 01:13:23,860
given interface so that I have that

1702
01:13:21,010 --> 01:13:28,090
actual data but I need that that device

1703
01:13:23,860 --> 01:13:30,759
instance the way that we we achieve that

1704
01:13:28,090 --> 01:13:33,040
is through that fixture right remember

1705
01:13:30,760 --> 01:13:37,030
we defined a fixture and we have this

1706
01:13:33,040 --> 01:13:39,700
fixture called device so in any file in

1707
01:13:37,030 --> 01:13:42,219
anywhere in my in my test case or my

1708
01:13:39,700 --> 01:13:44,760
testing infrastructure I can use that

1709
01:13:42,220 --> 01:13:48,910
fixture called device because it was

1710
01:13:44,760 --> 01:13:50,500
located in that global comcast file so

1711
01:13:48,910 --> 01:13:53,470
no matter where it is no matter what

1712
01:13:50,500 --> 01:13:57,010
function you can use it and that's why

1713
01:13:53,470 --> 01:13:58,900
it's designated as a scope equal session

1714
01:13:57,010 --> 01:14:01,600
session means that this function is

1715
01:13:58,900 --> 01:14:03,879
going to be run once and only once no

1716
01:14:01,600 --> 01:14:05,590
matter how many modules use it no matter

1717
01:14:03,880 --> 01:14:08,860
how many function calls happen it's only

1718
01:14:05,590 --> 01:14:10,720
going to be invoked once and here what

1719
01:14:08,860 --> 01:14:11,860
I'm showing is I'm just creating a

1720
01:14:10,720 --> 01:14:13,570
device in

1721
01:14:11,860 --> 01:14:16,389
since and I'm returning that device

1722
01:14:13,570 --> 01:14:18,880
instance now that's one way of doing it

1723
01:14:16,389 --> 01:14:20,969
but the way I did it because I'm you

1724
01:14:18,880 --> 01:14:24,280
know I did it a little bit more fancy

1725
01:14:20,969 --> 01:14:27,130
was in the online version remember in

1726
01:14:24,280 --> 01:14:33,909
the online version we actually kept it

1727
01:14:27,130 --> 01:14:36,040
around we kept this device around and so

1728
01:14:33,909 --> 01:14:40,388
this fixture is really simple it just

1729
01:14:36,040 --> 01:14:45,369
says in the scope session in this device

1730
01:14:40,389 --> 01:14:46,630
I have this have another fixture again

1731
01:14:45,369 --> 01:14:48,369
remember this is all it's kind of

1732
01:14:46,630 --> 01:14:52,239
advanced right I have another fixture

1733
01:14:48,369 --> 01:14:55,659
called request request is a standard PI

1734
01:14:52,239 --> 01:14:58,480
test fixture object and it allows you to

1735
01:14:55,659 --> 01:15:01,000
gain access to all sorts of really good

1736
01:14:58,480 --> 01:15:03,699
things that PI test is holding on to one

1737
01:15:01,000 --> 01:15:05,889
of which is the config object so if you

1738
01:15:03,699 --> 01:15:08,379
ever want to get information about the

1739
01:15:05,889 --> 01:15:10,179
config in any one of your tests no

1740
01:15:08,380 --> 01:15:13,510
matter where it is all you have to do is

1741
01:15:10,179 --> 01:15:15,460
include the request fixture in your test

1742
01:15:13,510 --> 01:15:18,429
function and then from that you can get

1743
01:15:15,460 --> 01:15:20,770
information out so what I'm doing is I'm

1744
01:15:18,429 --> 01:15:22,960
using that to gain access to the config

1745
01:15:20,770 --> 01:15:26,469
structure to gain access to my private

1746
01:15:22,960 --> 01:15:28,869
inner foo config and it just returns the

1747
01:15:26,469 --> 01:15:30,449
device instance that was actually first

1748
01:15:28,869 --> 01:15:34,780
created when we started our session

1749
01:15:30,449 --> 01:15:36,519
right now this is a little bit fancy you

1750
01:15:34,780 --> 01:15:38,050
know you could just recreate the device

1751
01:15:36,520 --> 01:15:40,630
you know make a second connection

1752
01:15:38,050 --> 01:15:43,989
there's nothing wrong with that but this

1753
01:15:40,630 --> 01:15:46,690
is the way I did it okay if you look at

1754
01:15:43,989 --> 01:15:51,129
the offline demo version of the same

1755
01:15:46,690 --> 01:15:53,500
function what it's really doing is it's

1756
01:15:51,130 --> 01:15:55,750
creating this device instance it's never

1757
01:15:53,500 --> 01:15:57,310
trying to connect to it right I want to

1758
01:15:55,750 --> 01:16:00,280
maintain the same device instance

1759
01:15:57,310 --> 01:16:03,429
structure but I just tack on this

1760
01:16:00,280 --> 01:16:06,969
directory called show outputs dear right

1761
01:16:03,429 --> 01:16:08,920
because this is where you know this is

1762
01:16:06,969 --> 01:16:10,739
where I stored it you'll see where I use

1763
01:16:08,920 --> 01:16:14,380
this in the test functions in a minute

1764
01:16:10,739 --> 01:16:17,409
so again the whole the whole purpose of

1765
01:16:14,380 --> 01:16:19,389
this fixture is to return the device

1766
01:16:17,409 --> 01:16:22,540
object that my function is going to use

1767
01:16:19,389 --> 01:16:25,230
again it's a session it's a session

1768
01:16:22,540 --> 01:16:25,230
level fixture

1769
01:16:25,450 --> 01:16:32,269
all right when I first started just as

1770
01:16:30,710 --> 01:16:33,950
an aside when I first started using PI

1771
01:16:32,270 --> 01:16:35,720
test my brain exploded with all this

1772
01:16:33,950 --> 01:16:37,820
fixture stuff it was like really really

1773
01:16:35,720 --> 01:16:39,950
weird it's like why are there fixtures

1774
01:16:37,820 --> 01:16:41,559
why are there different scopes for these

1775
01:16:39,950 --> 01:16:44,480
fixtures how do you use them together

1776
01:16:41,560 --> 01:16:46,670
there are there again 45-minute video

1777
01:16:44,480 --> 01:16:49,610
presentations just on the use of

1778
01:16:46,670 --> 01:16:51,920
fixtures so my goal here again is to

1779
01:16:49,610 --> 01:16:54,170
expose you to these terms get you

1780
01:16:51,920 --> 01:16:57,170
interested in it let you guys you know

1781
01:16:54,170 --> 01:17:02,450
dig in as much as you want and in detail

1782
01:16:57,170 --> 01:17:13,220
as much as you want so the next part is

1783
01:17:02,450 --> 01:17:16,730
the real real hard stuff ok so now that

1784
01:17:13,220 --> 01:17:19,640
we've dynamically set the host you know

1785
01:17:16,730 --> 01:17:21,980
is it dev 1 is it dev 2 we pass that as

1786
01:17:19,640 --> 01:17:24,590
a parameter what we want to be able to

1787
01:17:21,980 --> 01:17:26,839
do is pull in the test functions and the

1788
01:17:24,590 --> 01:17:30,200
test cases that are specific to that

1789
01:17:26,840 --> 01:17:32,900
device now here I'm saying my you know

1790
01:17:30,200 --> 01:17:35,570
my test files are located in this

1791
01:17:32,900 --> 01:17:37,370
directory so switch 21 dot build one is

1792
01:17:35,570 --> 01:17:39,230
a directory and a cain't contains files

1793
01:17:37,370 --> 01:17:40,760
for all my test cases in my production

1794
01:17:39,230 --> 01:17:41,750
environment that actually I might not

1795
01:17:40,760 --> 01:17:44,750
have that it might just be I'm just

1796
01:17:41,750 --> 01:17:46,520
pulling from a database but I'm telling

1797
01:17:44,750 --> 01:17:49,580
you know PI tests where to get this test

1798
01:17:46,520 --> 01:17:52,190
case data because and I don't want to

1799
01:17:49,580 --> 01:17:56,000
re-emphasize this because what I want to

1800
01:17:52,190 --> 01:17:58,700
do is I want an individual test case run

1801
01:17:56,000 --> 01:17:59,990
for every single test test case I don't

1802
01:17:58,700 --> 01:18:02,870
want there to be just one function that

1803
01:17:59,990 --> 01:18:04,820
is 20 test cases and if one failed the

1804
01:18:02,870 --> 01:18:07,010
whole thing fails I want individual

1805
01:18:04,820 --> 01:18:12,969
context sensitive information so I can

1806
01:18:07,010 --> 01:18:16,640
pinpoint what needs to get fixed okay

1807
01:18:12,970 --> 01:18:18,200
how you do this so what we're going to

1808
01:18:16,640 --> 01:18:20,900
do is we're going to introduce a new

1809
01:18:18,200 --> 01:18:23,690
font of another fixture this fixture is

1810
01:18:20,900 --> 01:18:25,790
going to be the test case this test case

1811
01:18:23,690 --> 01:18:27,919
is going to be one and only one

1812
01:18:25,790 --> 01:18:30,470
dictionary of information that I showed

1813
01:18:27,920 --> 01:18:32,690
you if I got a file of 100 test cases

1814
01:18:30,470 --> 01:18:34,790
this fixture is going to contain only

1815
01:18:32,690 --> 01:18:37,190
one dictionary you know the one that

1816
01:18:34,790 --> 01:18:40,040
we're iterating through and we're

1817
01:18:37,190 --> 01:18:46,699
use that information so that we can then

1818
01:18:40,040 --> 01:18:48,380
call the the actual pi pi e EO s cabling

1819
01:18:46,699 --> 01:18:50,389
test function so you can see like I'm

1820
01:18:48,380 --> 01:18:51,650
using that word test function or test

1821
01:18:50,390 --> 01:18:53,750
cabling twice and it looks a little

1822
01:18:51,650 --> 01:18:56,089
confusing I'll clean this up in the next

1823
01:18:53,750 --> 01:18:58,100
you know pass of this where the nerve

1824
01:18:56,090 --> 01:19:00,410
foods a nerve root verify cabling

1825
01:18:58,100 --> 01:19:02,660
because what's happening in the nerve

1826
01:19:00,410 --> 01:19:04,340
root test cabling function is that's

1827
01:19:02,660 --> 01:19:08,059
where it's comparing the actual versus

1828
01:19:04,340 --> 01:19:10,400
the expected values but the question is

1829
01:19:08,060 --> 01:19:14,170
is how do we parameterize that test

1830
01:19:10,400 --> 01:19:19,219
cases file or that test cases fixture

1831
01:19:14,170 --> 01:19:22,190
now the way we do this is there's

1832
01:19:19,219 --> 01:19:27,140
another hook function and it's called

1833
01:19:22,190 --> 01:19:30,830
generate tests and its sole purpose well

1834
01:19:27,140 --> 01:19:35,810
its primary purpose is to parameterize

1835
01:19:30,830 --> 01:19:39,230
fixtures okay so what what's happening

1836
01:19:35,810 --> 01:19:41,719
is is that this this function called PI

1837
01:19:39,230 --> 01:19:44,959
test generate test it exists in every

1838
01:19:41,719 --> 01:19:46,969
single module so in in test cabling

1839
01:19:44,960 --> 01:19:48,620
there's a there's this function in test

1840
01:19:46,969 --> 01:19:51,260
optics there's this function they're all

1841
01:19:48,620 --> 01:19:55,790
every file gets its own copy of this of

1842
01:19:51,260 --> 01:19:57,170
this function and PI test will call this

1843
01:19:55,790 --> 01:20:00,230
when it's trying to figure out what

1844
01:19:57,170 --> 01:20:02,330
tests it wants to run and what we're

1845
01:20:00,230 --> 01:20:04,400
doing here is we're saying okay

1846
01:20:02,330 --> 01:20:06,170
I know the test case directory because I

1847
01:20:04,400 --> 01:20:08,299
was passed to me from my options and

1848
01:20:06,170 --> 01:20:10,730
what I want to do is I want to go find

1849
01:20:08,300 --> 01:20:13,880
the file test cases - cabling in this

1850
01:20:10,730 --> 01:20:18,169
case JSON and I want to load that that

1851
01:20:13,880 --> 01:20:19,280
file and the contents of that file are

1852
01:20:18,170 --> 01:20:21,230
going to be what is going to

1853
01:20:19,280 --> 01:20:24,679
parameterize the fixture called test

1854
01:20:21,230 --> 01:20:25,968
case so it's a lot of blocking and

1855
01:20:24,680 --> 01:20:30,710
tackling in here we'll go through it a

1856
01:20:25,969 --> 01:20:32,570
little bit specifically this file again

1857
01:20:30,710 --> 01:20:34,370
we're gonna load it we're gonna get the

1858
01:20:32,570 --> 01:20:36,710
JSON payload out that's going to be a

1859
01:20:34,370 --> 01:20:39,949
list of dictionaries that list of

1860
01:20:36,710 --> 01:20:43,160
dictionaries is going to set the fixture

1861
01:20:39,949 --> 01:20:44,750
called test case and I'm going to get

1862
01:20:43,160 --> 01:20:48,170
into the thing called IDs in just a

1863
01:20:44,750 --> 01:20:48,980
second so we'll come back to that but

1864
01:20:48,170 --> 01:20:50,989
again

1865
01:20:48,980 --> 01:20:55,489
what's really really important is that

1866
01:20:50,989 --> 01:20:58,489
the string value here test case matches

1867
01:20:55,489 --> 01:21:00,440
what you have in your test function just

1868
01:20:58,489 --> 01:21:02,000
like we did the PI test mark dot

1869
01:21:00,440 --> 01:21:05,000
parameterize remember how those two

1870
01:21:02,000 --> 01:21:06,680
names had to line up specifically same

1871
01:21:05,000 --> 01:21:09,230
exact rule right

1872
01:21:06,680 --> 01:21:13,970
this string identifies the fixture in

1873
01:21:09,230 --> 01:21:15,769
the function alright so let me let me

1874
01:21:13,970 --> 01:21:18,670
kind of flip over to some code so you

1875
01:21:15,770 --> 01:21:18,670
can kind of see how that works

1876
01:21:25,470 --> 01:21:32,970
okay so here I have my test function

1877
01:21:28,590 --> 01:21:35,760
called test cabling and these are all

1878
01:21:32,970 --> 01:21:37,380
fixtures any parameters this is

1879
01:21:35,760 --> 01:21:40,410
important to note any parameters that

1880
01:21:37,380 --> 01:21:43,650
you pass to a PI test function our

1881
01:21:40,410 --> 01:21:46,200
fixtures right because PI test is

1882
01:21:43,650 --> 01:21:49,920
invoking this function so here's my test

1883
01:21:46,200 --> 01:21:52,019
case and you can see in this in this

1884
01:21:49,920 --> 01:21:56,910
particular file I've got this function

1885
01:21:52,020 --> 01:21:59,670
generate tests generate tests is passed

1886
01:21:56,910 --> 01:22:01,710
this thing called a meta func I don't

1887
01:21:59,670 --> 01:22:03,210
know why they called it this it this is

1888
01:22:01,710 --> 01:22:04,140
just sort of like abstract magic you

1889
01:22:03,210 --> 01:22:07,740
know they just gave it a name

1890
01:22:04,140 --> 01:22:10,770
but in this meta func you can gain

1891
01:22:07,740 --> 01:22:12,420
access to the config object for which

1892
01:22:10,770 --> 01:22:14,250
you had your test cases directory

1893
01:22:12,420 --> 01:22:17,460
remember we got that out of our test

1894
01:22:14,250 --> 01:22:21,210
cases and because I created this as a

1895
01:22:17,460 --> 01:22:23,310
Python path object what I'm doing is I'm

1896
01:22:21,210 --> 01:22:25,440
taking you know that directory and I'm

1897
01:22:23,310 --> 01:22:27,900
saying find me the file test case is

1898
01:22:25,440 --> 01:22:32,099
JSON and that's gonna be my test cases

1899
01:22:27,900 --> 01:22:34,710
file and I'm gonna load that file into

1900
01:22:32,100 --> 01:22:36,990
the test cases fixture so there's this

1901
01:22:34,710 --> 01:22:39,930
function here called parameterized you

1902
01:22:36,990 --> 01:22:42,510
can only call this once you can only

1903
01:22:39,930 --> 01:22:44,430
call this function once so everything

1904
01:22:42,510 --> 01:22:48,860
that you want to stick into this fixture

1905
01:22:44,430 --> 01:22:52,440
has to be done once and only once and

1906
01:22:48,860 --> 01:22:54,420
then if there's a hundred of those this

1907
01:22:52,440 --> 01:22:55,799
test case here gets called you know this

1908
01:22:54,420 --> 01:22:58,140
function gets called a hundred times and

1909
01:22:55,800 --> 01:23:02,910
this test case changes for each of those

1910
01:22:58,140 --> 01:23:07,200
those values so this is a this is really

1911
01:23:02,910 --> 01:23:11,970
kind of tricky here the reason why this

1912
01:23:07,200 --> 01:23:18,809
function exists in this file and not in

1913
01:23:11,970 --> 01:23:24,330
the global contest UI file is because if

1914
01:23:18,810 --> 01:23:27,150
it was in the global file then you would

1915
01:23:24,330 --> 01:23:28,530
have to determine which function you

1916
01:23:27,150 --> 01:23:30,150
were trying to load am I trying to load

1917
01:23:28,530 --> 01:23:32,610
the cabling am i trying to load the

1918
01:23:30,150 --> 01:23:35,160
optics am i trying to road load the

1919
01:23:32,610 --> 01:23:36,900
interfaces because this is essentially

1920
01:23:35,160 --> 01:23:39,360
hard coding a I want to load this file

1921
01:23:36,900 --> 01:23:43,110
right I originally

1922
01:23:39,360 --> 01:23:45,240
had this function in the conf test py

1923
01:23:43,110 --> 01:23:47,339
global file and then I had this big

1924
01:23:45,240 --> 01:23:49,769
if-then-else you know if it's this then

1925
01:23:47,340 --> 01:23:52,110
you load this file else this load this

1926
01:23:49,770 --> 01:23:54,450
file else else else I'll say no and it

1927
01:23:52,110 --> 01:23:56,730
got really unwieldy and what I learned

1928
01:23:54,450 --> 01:23:59,370
through experimentation is that if I put

1929
01:23:56,730 --> 01:24:01,860
this function directly in the in the

1930
01:23:59,370 --> 01:24:04,500
test file then I never had to worry

1931
01:24:01,860 --> 01:24:06,599
about what the fixture name was I could

1932
01:24:04,500 --> 01:24:11,180
always call it test case because it only

1933
01:24:06,600 --> 01:24:14,010
applied to the values in this file okay

1934
01:24:11,180 --> 01:24:16,620
I'm gonna say this again if you put this

1935
01:24:14,010 --> 01:24:18,870
function in the global then you'd have

1936
01:24:16,620 --> 01:24:20,490
to change your fixture name to uniquely

1937
01:24:18,870 --> 01:24:21,870
identify that function instead of it

1938
01:24:20,490 --> 01:24:24,179
calling a test case maybe you call it

1939
01:24:21,870 --> 01:24:26,340
test case cabling or if it was optic

1940
01:24:24,180 --> 01:24:27,870
you'd call it test case optic because if

1941
01:24:26,340 --> 01:24:30,120
it was in the global file you'd have to

1942
01:24:27,870 --> 01:24:32,519
know which fixture you were

1943
01:24:30,120 --> 01:24:34,849
parameterizing and that again became

1944
01:24:32,520 --> 01:24:37,800
unwieldy so that's why I basically

1945
01:24:34,850 --> 01:24:40,590
isolated or you know tightly coupled

1946
01:24:37,800 --> 01:24:43,320
that function in that file and it's also

1947
01:24:40,590 --> 01:24:45,120
why every test function has its own file

1948
01:24:43,320 --> 01:24:53,889
so it keeps everything nice and clean

1949
01:24:45,120 --> 01:24:59,650
and modular okay all right

1950
01:24:53,889 --> 01:25:01,989
I know this is a lot to digest so we're

1951
01:24:59,650 --> 01:25:08,530
doing we're right on time though so well

1952
01:25:01,989 --> 01:25:11,199
plenty time for questions all right the

1953
01:25:08,530 --> 01:25:13,929
next really cool part is is remember how

1954
01:25:11,199 --> 01:25:16,509
are showing you you could filter based

1955
01:25:13,929 --> 01:25:19,210
on the test case name so you will want

1956
01:25:16,510 --> 01:25:20,409
to control your test case name because

1957
01:25:19,210 --> 01:25:21,909
if you want to filter by it you're gonna

1958
01:25:20,409 --> 01:25:27,638
want to control what that name is and

1959
01:25:21,909 --> 01:25:32,369
the way that that works is by also

1960
01:25:27,639 --> 01:25:36,699
providing a function to the parameterize

1961
01:25:32,369 --> 01:25:40,960
call that says for every dictionary of

1962
01:25:36,699 --> 01:25:42,790
data for every item in this list call

1963
01:25:40,960 --> 01:25:45,520
this function and that function returns

1964
01:25:42,790 --> 01:25:47,019
the test case name so really what this

1965
01:25:45,520 --> 01:25:49,719
this function is doing is it's looking

1966
01:25:47,020 --> 01:25:52,420
at the data my test case data and it's

1967
01:25:49,719 --> 01:25:55,540
building the test case name based on the

1968
01:25:52,420 --> 01:25:57,369
test case data and that's how I get you

1969
01:25:55,540 --> 01:25:58,480
know this interface on this device is

1970
01:25:57,369 --> 01:26:00,460
supposed to be connected to this

1971
01:25:58,480 --> 01:26:03,159
interface on this device you can see

1972
01:26:00,460 --> 01:26:05,020
that the test case says this this this

1973
01:26:03,159 --> 01:26:06,400
parameter interface meaning that test

1974
01:26:05,020 --> 01:26:09,100
the interface that I'm testing against

1975
01:26:06,400 --> 01:26:11,440
should be connected to you know through

1976
01:26:09,100 --> 01:26:14,710
this role because I have role in my test

1977
01:26:11,440 --> 01:26:17,230
case to this remote host and interface

1978
01:26:14,710 --> 01:26:18,750
but you can arbitrarily control that

1979
01:26:17,230 --> 01:26:21,428
whatever you want the test case to be

1980
01:26:18,750 --> 01:26:25,030
now I'm showing this here in the in the

1981
01:26:21,429 --> 01:26:27,250
parametrize hook function this is also

1982
01:26:25,030 --> 01:26:28,719
true if you were using at PI test mark

1983
01:26:27,250 --> 01:26:32,920
dot parameterize so if you're not using

1984
01:26:28,719 --> 01:26:34,810
dynamic this dynamic mechanism you can

1985
01:26:32,920 --> 01:26:38,560
also use it in the in the static

1986
01:26:34,810 --> 01:26:39,790
mechanism so controlling your test case

1987
01:26:38,560 --> 01:26:42,880
names is really really important for

1988
01:26:39,790 --> 01:26:47,110
filtering you know taking advantage of

1989
01:26:42,880 --> 01:26:49,239
that of capability because ultimately

1990
01:26:47,110 --> 01:26:51,549
this is what we want to get to again we

1991
01:26:49,239 --> 01:26:53,138
want to have individual tests run for

1992
01:26:51,550 --> 01:26:55,060
each of those test cases and we want to

1993
01:26:53,139 --> 01:26:59,440
control their name so we get pinpoint

1994
01:26:55,060 --> 01:27:02,409
information of what we wanted all right

1995
01:26:59,440 --> 01:27:05,710
this is the last use case this is

1996
01:27:02,409 --> 01:27:07,690
dealing with bulk data so what you saw

1997
01:27:05,710 --> 01:27:09,400
before was I had a test phone

1998
01:27:07,690 --> 01:27:12,040
that said oK you've given me the

1999
01:27:09,400 --> 01:27:13,509
interface I'm gonna call show LBP

2000
01:27:12,040 --> 01:27:15,010
neighbor on that interface I'm going to

2001
01:27:13,510 --> 01:27:16,900
get just the data for that interface

2002
01:27:15,010 --> 01:27:20,560
that's my actual data we've got my test

2003
01:27:16,900 --> 01:27:23,080
case I compare the data report but many

2004
01:27:20,560 --> 01:27:25,900
times on operating systems you have to

2005
01:27:23,080 --> 01:27:27,940
do one call or maybe you have to do a

2006
01:27:25,900 --> 01:27:29,589
couple calls that that have data that

2007
01:27:27,940 --> 01:27:32,500
you're going to use again and again and

2008
01:27:29,590 --> 01:27:33,969
again so on my Arista equipment for

2009
01:27:32,500 --> 01:27:35,940
example if I want to know where the

2010
01:27:33,969 --> 01:27:37,930
information about the transceivers

2011
01:27:35,940 --> 01:27:39,400
there's not like a show interface

2012
01:27:37,930 --> 01:27:40,600
transceiver that gives me back my

2013
01:27:39,400 --> 01:27:43,449
transceiver data I have to do show

2014
01:27:40,600 --> 01:27:45,430
inventory and I don't want to call show

2015
01:27:43,449 --> 01:27:47,469
inventory multiple times once for each

2016
01:27:45,430 --> 01:27:50,140
interface because it's the same you know

2017
01:27:47,469 --> 01:27:52,210
not gonna change so I just want to do it

2018
01:27:50,140 --> 01:27:55,120
once that's what I mean by a bulk data

2019
01:27:52,210 --> 01:27:56,710
and the way that we do this we already

2020
01:27:55,120 --> 01:27:59,469
learned the concept that the construct

2021
01:27:56,710 --> 01:28:02,260
here is we're going to create a fixture

2022
01:27:59,469 --> 01:28:04,750
that's module level so again in this

2023
01:28:02,260 --> 01:28:06,340
case we're going to create a fixture we

2024
01:28:04,750 --> 01:28:08,680
can put this fixture in the test

2025
01:28:06,340 --> 01:28:11,590
function itself in the test module sorry

2026
01:28:08,680 --> 01:28:14,440
the the module itself we don't have to

2027
01:28:11,590 --> 01:28:16,150
put all the fixtures in in comp dot test

2028
01:28:14,440 --> 01:28:19,419
py you know you can put fixtures

2029
01:28:16,150 --> 01:28:21,370
anywhere you want and and here you can

2030
01:28:19,420 --> 01:28:22,989
see that it's calling show inventory and

2031
01:28:21,370 --> 01:28:28,719
that's going to get called once and only

2032
01:28:22,989 --> 01:28:32,290
once for the module right if you if you

2033
01:28:28,719 --> 01:28:34,060
do not provide scope you don't

2034
01:28:32,290 --> 01:28:36,519
specifically say scope is equal to

2035
01:28:34,060 --> 01:28:38,920
module or scope is equal to session it

2036
01:28:36,520 --> 01:28:40,930
defaults the function so if I didn't if

2037
01:28:38,920 --> 01:28:43,420
I didn't say this fixture was a module

2038
01:28:40,930 --> 01:28:45,910
every time I ran that that test it would

2039
01:28:43,420 --> 01:28:47,320
call show inventory so if I uh you know

2040
01:28:45,910 --> 01:28:48,910
30 interfaces it would call show

2041
01:28:47,320 --> 01:28:51,880
inventory 30 times and we don't want to

2042
01:28:48,910 --> 01:28:55,389
do that so that's how we get that data

2043
01:28:51,880 --> 01:28:57,730
in there as bulk and then again when you

2044
01:28:55,390 --> 01:28:59,710
look at the the test of the verification

2045
01:28:57,730 --> 01:29:01,059
function itself it's going to look

2046
01:28:59,710 --> 01:29:06,960
through the data structure to find which

2047
01:29:01,060 --> 01:29:09,940
what you need just to to highlight that

2048
01:29:06,960 --> 01:29:12,910
I'll go into the actual testing

2049
01:29:09,940 --> 01:29:16,410
validation function here which is the

2050
01:29:12,910 --> 01:29:16,410
the optic

2051
01:29:16,530 --> 01:29:25,259
and you can see that this test optic

2052
01:29:19,470 --> 01:29:26,910
inventory looks at the actual data it

2053
01:29:25,260 --> 01:29:29,310
looks for the transceiver slots in this

2054
01:29:26,910 --> 01:29:30,599
case and does the same pattern you know

2055
01:29:29,310 --> 01:29:32,790
I'm looking for the interface you know

2056
01:29:30,600 --> 01:29:35,160
make sure the interface exists you know

2057
01:29:32,790 --> 01:29:37,530
in my inventory and if it doesn't you

2058
01:29:35,160 --> 01:29:38,940
know say interface not found and then it

2059
01:29:37,530 --> 01:29:42,360
goes through and then checks the

2060
01:29:38,940 --> 01:29:44,730
expected model okay in every one of

2061
01:29:42,360 --> 01:29:46,769
these files what you'll see at the top

2062
01:29:44,730 --> 01:29:49,740
is what the test case structure looks

2063
01:29:46,770 --> 01:29:51,720
like and then you'll see what the

2064
01:29:49,740 --> 01:29:53,969
inventory information looks like so I

2065
01:29:51,720 --> 01:29:55,530
tried to document these so you'll have a

2066
01:29:53,970 --> 01:30:02,570
sense of what information is being

2067
01:29:55,530 --> 01:30:02,570
captured and compared okay

2068
01:30:08,579 --> 01:30:13,409
all right thanks for hanging in there

2069
01:30:10,920 --> 01:30:15,690
for an hour and a half I'm just gonna

2070
01:30:13,409 --> 01:30:20,969
recap and then I'll I'll take some

2071
01:30:15,690 --> 01:30:24,119
questions you know I've been working on

2072
01:30:20,969 --> 01:30:26,699
this problem of operational validation

2073
01:30:24,119 --> 01:30:29,190
for for quite some time in in the

2074
01:30:26,699 --> 01:30:30,299
networking automation space for a very

2075
01:30:29,190 --> 01:30:32,009
long time everybody's been talking about

2076
01:30:30,300 --> 01:30:34,050
config automation can say god of Mission

2077
01:30:32,010 --> 01:30:36,900
config automation I personally believe

2078
01:30:34,050 --> 01:30:40,260
that that validating operational State

2079
01:30:36,900 --> 01:30:42,360
is a much harder problem a much harder

2080
01:30:40,260 --> 01:30:44,309
problem because you have to understand

2081
01:30:42,360 --> 01:30:46,920
what the expected values are you have to

2082
01:30:44,309 --> 01:30:49,679
understand or know the expected State

2083
01:30:46,920 --> 01:30:51,360
and how you keep track of that is really

2084
01:30:49,679 --> 01:30:53,849
based on the design of your network

2085
01:30:51,360 --> 01:30:54,900
which is a distributed systems problem

2086
01:30:53,849 --> 01:30:58,290
it's very complicated

2087
01:30:54,900 --> 01:31:00,058
so as network engineers you deal with

2088
01:30:58,290 --> 01:31:01,710
this complication all the time and

2089
01:31:00,059 --> 01:31:04,559
you're manually doing these tests in

2090
01:31:01,710 --> 01:31:06,869
your brain you know based on some Visio

2091
01:31:04,559 --> 01:31:08,639
diagram or whatever it is you know what

2092
01:31:06,869 --> 01:31:10,079
you expect to see and you run these

2093
01:31:08,639 --> 01:31:12,780
commands and you're doing this manually

2094
01:31:10,079 --> 01:31:14,190
but but automating that process or

2095
01:31:12,780 --> 01:31:15,960
providing tools to help you automate

2096
01:31:14,190 --> 01:31:19,348
that process so that you have the Iron

2097
01:31:15,960 --> 01:31:21,599
Man suit of automated testing is not a

2098
01:31:19,349 --> 01:31:23,909
subject that we hear a lot about right

2099
01:31:21,599 --> 01:31:25,320
now so I'm hoping we hear more and more

2100
01:31:23,909 --> 01:31:28,049
about how people are automating their

2101
01:31:25,320 --> 01:31:29,308
operational state testing you know in

2102
01:31:28,050 --> 01:31:31,290
the future because I think this is a

2103
01:31:29,309 --> 01:31:33,710
really one of the harder problems to

2104
01:31:31,290 --> 01:31:36,300
really contemplate in Network automation

2105
01:31:33,710 --> 01:31:39,960
PI test is a good framework for doing

2106
01:31:36,300 --> 01:31:42,210
this there are many I like using PI test

2107
01:31:39,960 --> 01:31:44,520
because it gives me a very native Python

2108
01:31:42,210 --> 01:31:46,889
programming interface there are other

2109
01:31:44,520 --> 01:31:49,320
testing frameworks out there like robot

2110
01:31:46,889 --> 01:31:52,829
which have their own kind of programming

2111
01:31:49,320 --> 01:31:54,960
language or mechanisms and they offer

2112
01:31:52,829 --> 01:31:56,610
different capabilities so there's not a

2113
01:31:54,960 --> 01:31:58,530
right or a wrong it's just what you're

2114
01:31:56,610 --> 01:32:00,598
comfortable using and what you want to

2115
01:31:58,530 --> 01:32:02,940
take advantage of I know a lot of

2116
01:32:00,599 --> 01:32:05,520
vendors are actually producing robot

2117
01:32:02,940 --> 01:32:07,290
libraries so that you can use them

2118
01:32:05,520 --> 01:32:09,480
without having to roll your own

2119
01:32:07,290 --> 01:32:11,670
so there's a lot of you know interest in

2120
01:32:09,480 --> 01:32:14,790
robot I haven't seen a lot of stuff in

2121
01:32:11,670 --> 01:32:18,659
PI tests to be honest again this is my

2122
01:32:14,790 --> 01:32:21,239
preference as a Python programmer it has

2123
01:32:18,659 --> 01:32:23,249
a huge following PI test is

2124
01:32:21,239 --> 01:32:25,169
is one of the largest test frameworks

2125
01:32:23,249 --> 01:32:27,210
out there for Python programming in

2126
01:32:25,170 --> 01:32:30,599
general so it's it's a very

2127
01:32:27,210 --> 01:32:33,300
well-established very large community

2128
01:32:30,599 --> 01:32:37,920
there's tons of plugins you know there's

2129
01:32:33,300 --> 01:32:40,739
lots of presentations online again I am

2130
01:32:37,920 --> 01:32:43,079
using it in the world of networking you

2131
01:32:40,739 --> 01:32:44,909
know I adapt these tools that we find

2132
01:32:43,079 --> 01:32:46,679
out there for the problems that we have

2133
01:32:44,909 --> 01:32:48,268
in networking because in networking we

2134
01:32:46,679 --> 01:32:49,499
really don't have any cool tools of our

2135
01:32:48,269 --> 01:32:51,480
own you know we've been trapped in this

2136
01:32:49,499 --> 01:32:53,730
world of vendors will sell you products

2137
01:32:51,480 --> 01:32:54,869
that don't work very well you know and

2138
01:32:53,730 --> 01:32:55,980
then they say that they'll fix them but

2139
01:32:54,869 --> 01:32:56,880
they don't really mean it because you

2140
01:32:55,980 --> 01:32:58,110
bought their hardware and then they

2141
01:32:56,880 --> 01:33:01,289
don't really care about you about your

2142
01:32:58,110 --> 01:33:04,380
software so I think things might be

2143
01:33:01,289 --> 01:33:06,210
getting better but honestly we don't

2144
01:33:04,380 --> 01:33:08,400
have a lot of really good tools in the

2145
01:33:06,210 --> 01:33:11,070
networking space so I've been looking at

2146
01:33:08,400 --> 01:33:13,039
the server world in the DevOps world you

2147
01:33:11,070 --> 01:33:15,179
know I was very early on in applying

2148
01:33:13,039 --> 01:33:18,360
ansible to networking and some of the

2149
01:33:15,179 --> 01:33:21,300
other tools so I always look to see what

2150
01:33:18,360 --> 01:33:23,759
the server guys in the cloud the server

2151
01:33:21,300 --> 01:33:27,210
people in the cloud people are doing and

2152
01:33:23,760 --> 01:33:29,369
try to adapt it everything I've shown

2153
01:33:27,210 --> 01:33:31,769
you that the techniques that can be

2154
01:33:29,369 --> 01:33:34,440
adapted for brownfield or greenfield or

2155
01:33:31,769 --> 01:33:36,389
both you know to me you know greenfield

2156
01:33:34,440 --> 01:33:37,829
is just brownfield minus one you know

2157
01:33:36,389 --> 01:33:40,260
the moment you put something out its

2158
01:33:37,829 --> 01:33:41,940
brownfield you know boom done right the

2159
01:33:40,260 --> 01:33:44,190
story that I was telling you about when

2160
01:33:41,940 --> 01:33:46,049
we were deploying our new equipment into

2161
01:33:44,190 --> 01:33:47,610
our building the second week it was

2162
01:33:46,050 --> 01:33:48,780
brownfield because we had a change to

2163
01:33:47,610 --> 01:33:50,848
our design and you know so it was

2164
01:33:48,780 --> 01:33:52,710
brownfield so to me there's no such

2165
01:33:50,849 --> 01:33:55,710
thing as greenfield and brownfield in

2166
01:33:52,710 --> 01:34:00,300
the application of these ideas you can

2167
01:33:55,710 --> 01:34:01,440
use them for any any use case you still

2168
01:34:00,300 --> 01:34:02,820
have a lot of work to do you know

2169
01:34:01,440 --> 01:34:03,719
there's there's not a free lunch here

2170
01:34:02,820 --> 01:34:05,549
you still have to write your test

2171
01:34:03,719 --> 01:34:08,969
functions you have to still come up with

2172
01:34:05,550 --> 01:34:10,590
your strategies that I talked about some

2173
01:34:08,969 --> 01:34:11,909
people have approached me about you know

2174
01:34:10,590 --> 01:34:14,010
taking this nerve through stuff and

2175
01:34:11,909 --> 01:34:15,480
making it a little bit cleaner so that

2176
01:34:14,010 --> 01:34:17,280
you know there's a community of test

2177
01:34:15,480 --> 01:34:19,079
functions and libraries and a little bit

2178
01:34:17,280 --> 01:34:21,300
of you know more things that people

2179
01:34:19,079 --> 01:34:23,039
could share if there's interest in that

2180
01:34:21,300 --> 01:34:24,210
you know I I think that'd be great you

2181
01:34:23,039 --> 01:34:27,659
know but I think there's an opportunity

2182
01:34:24,210 --> 01:34:30,479
here for for from more operational

2183
01:34:27,659 --> 01:34:33,960
automation tooling and testing you know

2184
01:34:30,479 --> 01:34:35,460
because we don't have a lot of it these

2185
01:34:33,960 --> 01:34:37,710
are the reference

2186
01:34:35,460 --> 01:34:39,780
the first one is again the the link to

2187
01:34:37,710 --> 01:34:42,390
my github repo where you'll find all of

2188
01:34:39,780 --> 01:34:44,700
the code all the docs you know online

2189
01:34:42,390 --> 01:34:46,590
and offline examples I can't tell you

2190
01:34:44,700 --> 01:34:47,370
it's perfect if you do try it out and

2191
01:34:46,590 --> 01:34:49,890
you find an issue

2192
01:34:47,370 --> 01:34:52,920
oh you no problem open an issue in

2193
01:34:49,890 --> 01:34:55,080
github and I'll try to fix it a lot of

2194
01:34:52,920 --> 01:34:58,650
these other links and references are to

2195
01:34:55,080 --> 01:34:59,969
the PI test Docs themselves so I tried

2196
01:34:58,650 --> 01:35:04,230
to highlight the ones that we've covered

2197
01:34:59,969 --> 01:35:07,440
today there is one that is the talks so

2198
01:35:04,230 --> 01:35:10,500
the the fourth bullet down that page

2199
01:35:07,440 --> 01:35:12,599
itself has a whole list of talks and

2200
01:35:10,500 --> 01:35:14,790
videos and presentations that cover a

2201
01:35:12,600 --> 01:35:17,640
wide range of beginner to intermediate

2202
01:35:14,790 --> 01:35:18,989
level stuff so if you look if you heard

2203
01:35:17,640 --> 01:35:20,390
me say the word fixture a dozen times

2204
01:35:18,989 --> 01:35:23,610
and you're still like what's a fixture

2205
01:35:20,390 --> 01:35:27,270
because that happens there's a lot of

2206
01:35:23,610 --> 01:35:29,309
really good stuff out there the book the

2207
01:35:27,270 --> 01:35:31,110
one with a rocket ship I personally own

2208
01:35:29,310 --> 01:35:33,420
it's excellent

2209
01:35:31,110 --> 01:35:35,130
I think it's really really great the

2210
01:35:33,420 --> 01:35:36,450
gentleman who wrote it Brian

2211
01:35:35,130 --> 01:35:38,340
Aachen if that's how you pronounce his

2212
01:35:36,450 --> 01:35:41,370
name he actually reviewed my slides

2213
01:35:38,340 --> 01:35:42,810
which you know thank you Brian and and

2214
01:35:41,370 --> 01:35:45,390
he's like this is really cool stuff so

2215
01:35:42,810 --> 01:35:47,280
please talk about it the other book I I

2216
01:35:45,390 --> 01:35:49,560
don't have myself but it comes highly

2217
01:35:47,280 --> 01:35:50,969
recommended these are both very not

2218
01:35:49,560 --> 01:35:53,969
expensive and if you're very serious

2219
01:35:50,969 --> 01:35:56,880
about getting involved in using PI test

2220
01:35:53,969 --> 01:36:00,330
I recommend them highway this Python

2221
01:35:56,880 --> 01:36:02,370
testing dotnet website is all you could

2222
01:36:00,330 --> 01:36:04,800
eat man there's like you know podcast

2223
01:36:02,370 --> 01:36:07,710
and video presentations and articles

2224
01:36:04,800 --> 01:36:10,410
just all about Python testing etc set

2225
01:36:07,710 --> 01:36:12,000
are great great resources and then if

2226
01:36:10,410 --> 01:36:14,780
you want to follow them on Twitter PI

2227
01:36:12,000 --> 01:36:17,760
chest org as their Twitter handle so

2228
01:36:14,780 --> 01:36:21,540
with that I've got twenty minutes to

2229
01:36:17,760 --> 01:36:23,070
answer questions or show any code or do

2230
01:36:21,540 --> 01:36:25,469
anything you want to see that's in more

2231
01:36:23,070 --> 01:36:29,429
detail anybody can ask questions even

2232
01:36:25,469 --> 01:36:31,680
even Damien it's Remy explora

2233
01:36:29,430 --> 01:36:34,560
presentation a very simple question

2234
01:36:31,680 --> 01:36:35,820
actor you mentioned you had 300 devices

2235
01:36:34,560 --> 01:36:38,730
but you know every time you were

2236
01:36:35,820 --> 01:36:40,320
actually it was like for one device he

2237
01:36:38,730 --> 01:36:42,839
was actually mandatory options for one

2238
01:36:40,320 --> 01:36:45,690
device how do you manage the tests on

2239
01:36:42,840 --> 01:36:48,580
the 300 devices at once yeah excellent

2240
01:36:45,690 --> 01:36:51,040
question so what I glossed over

2241
01:36:48,580 --> 01:36:53,620
was when I was running PI tests I did it

2242
01:36:51,040 --> 01:36:57,490
on a per device basis right so if I have

2243
01:36:53,620 --> 01:37:01,780
300 devices I would have to run 300 PI

2244
01:36:57,490 --> 01:37:04,030
test calls which I did like I had a bash

2245
01:37:01,780 --> 01:37:06,759
script and I just iterated over over

2246
01:37:04,030 --> 01:37:08,230
them and so it wasn't very efficient but

2247
01:37:06,760 --> 01:37:09,880
it was cheap and easy for me to like you

2248
01:37:08,230 --> 01:37:12,190
know dump my database of interface you

2249
01:37:09,880 --> 01:37:14,020
know of devices and then I just ran a

2250
01:37:12,190 --> 01:37:17,400
script that that went through that list

2251
01:37:14,020 --> 01:37:20,410
not very efficient but the reason why I

2252
01:37:17,400 --> 01:37:22,570
designed PI test and that purpose was if

2253
01:37:20,410 --> 01:37:25,450
I wanted to say docker eyes it and then

2254
01:37:22,570 --> 01:37:28,210
launch a bunch of docker containers one

2255
01:37:25,450 --> 01:37:29,800
per device I could spin up a fleet of

2256
01:37:28,210 --> 01:37:32,440
containers every container with one

2257
01:37:29,800 --> 01:37:36,460
device and I could do them all in

2258
01:37:32,440 --> 01:37:38,679
parallel or PI tests actually has a

2259
01:37:36,460 --> 01:37:40,990
parallel plugin I haven't played with it

2260
01:37:38,680 --> 01:37:43,990
myself but if you actually wanted to try

2261
01:37:40,990 --> 01:37:45,910
to run multiple tests in parallel it

2262
01:37:43,990 --> 01:37:48,940
actually will fork itself and do that

2263
01:37:45,910 --> 01:37:50,650
kind of parallel action but to answer

2264
01:37:48,940 --> 01:37:52,599
your question specifically one

2265
01:37:50,650 --> 01:37:54,370
invocation equals one device and I wrote

2266
01:37:52,600 --> 01:37:56,620
a bash script to iterate through it so

2267
01:37:54,370 --> 01:37:58,780
this kind of simple and cheap and easy

2268
01:37:56,620 --> 01:38:00,580
but you know I would I'd watch it in the

2269
01:37:58,780 --> 01:38:02,139
morning you know grab coffee and then

2270
01:38:00,580 --> 01:38:07,200
that have my spreadsheet you know ready

2271
01:38:02,140 --> 01:38:09,910
to go so good question though yeah so

2272
01:38:07,200 --> 01:38:12,400
ansible is kind of a big thing right

2273
01:38:09,910 --> 01:38:13,900
people are vlogging and it may be more

2274
01:38:12,400 --> 01:38:15,099
than they should and I've had a lot of

2275
01:38:13,900 --> 01:38:17,259
people come to me and say well you

2276
01:38:15,100 --> 01:38:19,270
should use ansible for this so not only

2277
01:38:17,260 --> 01:38:20,650
to pull this stuff off your devices if

2278
01:38:19,270 --> 01:38:23,560
you don't have something like the EOS

2279
01:38:20,650 --> 01:38:25,420
API but put all your test logic and

2280
01:38:23,560 --> 01:38:27,250
ansible and then you know use it to call

2281
01:38:25,420 --> 01:38:28,690
other things to analyze your output and

2282
01:38:27,250 --> 01:38:31,120
stuff you clearly have a different

2283
01:38:28,690 --> 01:38:32,679
philosophy can you talk about maybe how

2284
01:38:31,120 --> 01:38:35,290
those fit together in the case where you

2285
01:38:32,680 --> 01:38:37,450
don't have you know a nice router API

2286
01:38:35,290 --> 01:38:38,290
you can call directly from Python yeah

2287
01:38:37,450 --> 01:38:43,510
yeah absolutely

2288
01:38:38,290 --> 01:38:47,290
can I get the the video back up yeah

2289
01:38:43,510 --> 01:38:50,940
thank you so it's exactly your question

2290
01:38:47,290 --> 01:38:53,380
exactly is the reason why I

2291
01:38:50,940 --> 01:38:55,089
compartmentalize the the verification

2292
01:38:53,380 --> 01:38:57,370
functions and I actually have a friend

2293
01:38:55,090 --> 01:38:59,700
of mine who took those functions and

2294
01:38:57,370 --> 01:39:02,380
turn them into ansible modules so that

2295
01:38:59,700 --> 01:39:04,179
ansible could then gather the action

2296
01:39:02,380 --> 01:39:07,510
well data it was collecting the data and

2297
01:39:04,179 --> 01:39:09,580
then they they wrapped this library as a

2298
01:39:07,510 --> 01:39:11,380
series of modules and then they could

2299
01:39:09,580 --> 01:39:16,120
use ansible to drive the collection and

2300
01:39:11,380 --> 01:39:18,040
execution in a way replacing PI test you

2301
01:39:16,120 --> 01:39:19,389
know but there was logic that they would

2302
01:39:18,040 --> 01:39:21,580
have to build in to iterate through

2303
01:39:19,389 --> 01:39:23,800
every single test case and there was a

2304
01:39:21,580 --> 01:39:27,280
reason why perhaps they wanted to do it

2305
01:39:23,800 --> 01:39:29,380
that way but that library that says PI

2306
01:39:27,280 --> 01:39:31,840
test really isn't and that's why I said

2307
01:39:29,380 --> 01:39:33,820
it's a misnomer and I'll fix it and it

2308
01:39:31,840 --> 01:39:36,429
could be used you know invocation as a

2309
01:39:33,820 --> 01:39:39,219
you'd have to still wrap and ansible

2310
01:39:36,429 --> 01:39:42,280
there anta Balma jewel mechanisms around

2311
01:39:39,219 --> 01:39:45,300
it but it's it's a very fair approach

2312
01:39:42,280 --> 01:39:51,360
there's nothing wrong with that approach

2313
01:39:45,300 --> 01:39:51,360
yeah so I'll just stop there yep

2314
01:39:53,260 --> 01:39:59,230
thank you I'm sorry sorry to jump in

2315
01:39:56,950 --> 01:40:00,910
actually I think it's I appreciate

2316
01:39:59,230 --> 01:40:03,040
trying and I think it's the wrong idea

2317
01:40:00,910 --> 01:40:05,950
to using civil for that because their

2318
01:40:03,040 --> 01:40:09,100
default strategy is that you will have

2319
01:40:05,950 --> 01:40:10,780
you know a list of tests that will be

2320
01:40:09,100 --> 01:40:12,310
excluded per device but the first one

2321
01:40:10,780 --> 01:40:14,200
that failed the actually doesn't execute

2322
01:40:12,310 --> 01:40:16,720
the next one so unless you actually

2323
01:40:14,200 --> 01:40:18,250
explicitly say keep executing and all

2324
01:40:16,720 --> 01:40:19,480
that and that the reporting is actually

2325
01:40:18,250 --> 01:40:21,550
absolutely not designed for this use

2326
01:40:19,480 --> 01:40:23,589
case so personally I think there's a lot

2327
01:40:21,550 --> 01:40:25,180
of use case where in civil is great but

2328
01:40:23,590 --> 01:40:26,739
I personally use try to use that for

2329
01:40:25,180 --> 01:40:29,170
testing and I think it's it's not a good

2330
01:40:26,739 --> 01:40:31,599
one like like somebody was saying on

2331
01:40:29,170 --> 01:40:35,350
Twitter yesterday you really know a tool

2332
01:40:31,600 --> 01:40:37,420
when you know when not to use it I used

2333
01:40:35,350 --> 01:40:42,220
it for that and I will not use it

2334
01:40:37,420 --> 01:40:43,480
anymore yeah yeah and I and I and I

2335
01:40:42,220 --> 01:40:49,560
don't disagree with many of the things

2336
01:40:43,480 --> 01:40:52,209
that you both said yeah another question

2337
01:40:49,560 --> 01:40:54,160
Kent with Apple um so I'm curious how

2338
01:40:52,210 --> 01:40:57,430
you built your expected results was that

2339
01:40:54,160 --> 01:40:59,769
all by hand for those 300 devices no for

2340
01:40:57,430 --> 01:41:03,640
what you're playing to build it out yeah

2341
01:40:59,770 --> 01:41:06,130
so so I'm gonna give you two answers you

2342
01:41:03,640 --> 01:41:10,000
know the answer that I would recommend

2343
01:41:06,130 --> 01:41:12,070
people to do is you have some source of

2344
01:41:10,000 --> 01:41:14,500
truth for example for example that

2345
01:41:12,070 --> 01:41:17,170
spreadsheet you know and then you

2346
01:41:14,500 --> 01:41:20,530
programmatically use that as your input

2347
01:41:17,170 --> 01:41:23,650
to generate your test case out play

2348
01:41:20,530 --> 01:41:26,349
right I happen to have a very

2349
01:41:23,650 --> 01:41:29,230
sophisticated piece of software that is

2350
01:41:26,350 --> 01:41:32,380
the design of my network that is a is a

2351
01:41:29,230 --> 01:41:36,489
graph model database and from that I can

2352
01:41:32,380 --> 01:41:38,380
I know what those relationships are and

2353
01:41:36,489 --> 01:41:40,870
what I want to validate for example I

2354
01:41:38,380 --> 01:41:43,630
know my BGP peers I know you know my M

2355
01:41:40,870 --> 01:41:47,559
lag interfaces I have a lot of very

2356
01:41:43,630 --> 01:41:50,790
context aware knowledge and and and I'm

2357
01:41:47,560 --> 01:41:52,840
using a database in order to extract out

2358
01:41:50,790 --> 01:41:54,280
you know the relationships is that

2359
01:41:52,840 --> 01:41:56,650
database that actually produced that

2360
01:41:54,280 --> 01:41:59,620
spreadsheet for example but there are

2361
01:41:56,650 --> 01:42:02,320
many many tools out there that that you

2362
01:41:59,620 --> 01:42:03,690
could use you know that aren't like roll

2363
01:42:02,320 --> 01:42:06,040
your own database like mr. jeremy did

2364
01:42:03,690 --> 01:42:06,730
like net box for example if you're using

2365
01:42:06,040 --> 01:42:08,950
that

2366
01:42:06,730 --> 01:42:10,719
and I think it's a very popular source

2367
01:42:08,950 --> 01:42:11,920
of truth thing it actually can give you

2368
01:42:10,720 --> 01:42:14,620
some of this information you could pull

2369
01:42:11,920 --> 01:42:17,050
from its api's or if you're buying a

2370
01:42:14,620 --> 01:42:19,650
vendor product and it has topology

2371
01:42:17,050 --> 01:42:22,060
information you could pull from it so I

2372
01:42:19,650 --> 01:42:24,370
know did that answer your question yes

2373
01:42:22,060 --> 01:42:27,070
it did I was mostly curious because it's

2374
01:42:24,370 --> 01:42:28,780
Japan which egg you have first can that

2375
01:42:27,070 --> 01:42:30,790
database can then become the rest of

2376
01:42:28,780 --> 01:42:34,660
your your chickens for your patch plans

2377
01:42:30,790 --> 01:42:36,790
and your yeah yeah I subscribe to that

2378
01:42:34,660 --> 01:42:38,470
to that newsletter you know I you know

2379
01:42:36,790 --> 01:42:40,930
from from the when you tell that design

2380
01:42:38,470 --> 01:42:42,490
build the ploy operate you know which is

2381
01:42:40,930 --> 01:42:44,350
a very common pattern and a theme that

2382
01:42:42,490 --> 01:42:46,360
you'll see in every single vendor

2383
01:42:44,350 --> 01:42:50,230
product or platform piece of technology

2384
01:42:46,360 --> 01:42:52,120
the design part is you know have some

2385
01:42:50,230 --> 01:42:54,280
database that represents your network

2386
01:42:52,120 --> 01:42:56,110
design from that you can build your

2387
01:42:54,280 --> 01:42:58,120
configs you can get your test cases you

2388
01:42:56,110 --> 01:43:00,820
could build the artifacts like your

2389
01:42:58,120 --> 01:43:02,320
cabling map all sorts of things so but

2390
01:43:00,820 --> 01:43:04,240
it's a very large investment if you're

2391
01:43:02,320 --> 01:43:05,980
trying to build it yourself there's a

2392
01:43:04,240 --> 01:43:07,870
couple products on the market that you

2393
01:43:05,980 --> 01:43:10,080
know are worth looking at that that are

2394
01:43:07,870 --> 01:43:13,240
very specific on their use cases but

2395
01:43:10,080 --> 01:43:16,269
yeah unless you have the right kind of

2396
01:43:13,240 --> 01:43:16,599
engineering it's hard to do yeah for

2397
01:43:16,270 --> 01:43:19,950
sure

2398
01:43:16,600 --> 01:43:19,950
thank you yeah thank you good question

2399
01:43:21,150 --> 01:43:27,519
follow-up to that question is the spy

2400
01:43:24,940 --> 01:43:29,589
test provided infrastructure to compare

2401
01:43:27,520 --> 01:43:32,440
test results for example sometimes it

2402
01:43:29,590 --> 01:43:34,510
happens like I upgrade my code and did a

2403
01:43:32,440 --> 01:43:36,910
convergence test and suddenly the

2404
01:43:34,510 --> 01:43:39,820
convergence number are way beyond what

2405
01:43:36,910 --> 01:43:42,460
it was result as a test before run right

2406
01:43:39,820 --> 01:43:45,040
so there are we we can compare test

2407
01:43:42,460 --> 01:43:47,860
results it's the pass or fail criteria I

2408
01:43:45,040 --> 01:43:49,180
mean like previous tests yes it does

2409
01:43:47,860 --> 01:43:52,150
actually it's an interesting question

2410
01:43:49,180 --> 01:43:54,640
one that I have not explored a lot but

2411
01:43:52,150 --> 01:43:56,379
in a recent version of PI test they

2412
01:43:54,640 --> 01:43:59,830
introduced this concept called a cache

2413
01:43:56,380 --> 01:44:02,230
which what they use it for wow they

2414
01:43:59,830 --> 01:44:04,120
advertise its uses I only want to run

2415
01:44:02,230 --> 01:44:05,709
tests that failed the last time so it's

2416
01:44:04,120 --> 01:44:07,390
sort of like I don't want to rerun all

2417
01:44:05,710 --> 01:44:08,890
my tests I only want to run the tests

2418
01:44:07,390 --> 01:44:12,100
that failed and they have this cache

2419
01:44:08,890 --> 01:44:13,990
mechanism so it's possible to exploit or

2420
01:44:12,100 --> 01:44:15,970
take advantage of that of that

2421
01:44:13,990 --> 01:44:18,490
technology in order to achieve the goal

2422
01:44:15,970 --> 01:44:20,350
you just you just talked about because I

2423
01:44:18,490 --> 01:44:21,700
think it's a very similar pattern

2424
01:44:20,350 --> 01:44:23,410
but I haven't I haven't tried it myself

2425
01:44:21,700 --> 01:44:25,540
it's on my list of like next things to

2426
01:44:23,410 --> 01:44:27,430
try right because it is definitely not a

2427
01:44:25,540 --> 01:44:29,500
pass in field criteria it's just like my

2428
01:44:27,430 --> 01:44:32,110
Convergys numbers increase right so how

2429
01:44:29,500 --> 01:44:34,150
do you you know quantify it as the test

2430
01:44:32,110 --> 01:44:36,519
field or pass right something like that

2431
01:44:34,150 --> 01:44:38,889
yeah so there's there's something that I

2432
01:44:36,520 --> 01:44:41,530
didn't show you guys which was is how do

2433
01:44:38,890 --> 01:44:45,310
I take the failure information and then

2434
01:44:41,530 --> 01:44:47,769
use that to then segment it into errors

2435
01:44:45,310 --> 01:44:50,470
and warnings and info right and I didn't

2436
01:44:47,770 --> 01:44:51,910
show you that because I felt that I was

2437
01:44:50,470 --> 01:44:53,890
going to run out of time and and that

2438
01:44:51,910 --> 01:44:54,639
little pieces is that actually pretty

2439
01:44:53,890 --> 01:44:56,530
pretty

2440
01:44:54,640 --> 01:45:00,280
another interesting little trick right

2441
01:44:56,530 --> 01:45:03,009
but through the use of their cash and

2442
01:45:00,280 --> 01:45:04,690
and through the use of and I'll show you

2443
01:45:03,010 --> 01:45:06,490
to you since you asked just so you have

2444
01:45:04,690 --> 01:45:14,290
something to look up when one more thing

2445
01:45:06,490 --> 01:45:15,750
to look up there is no I don't have it

2446
01:45:14,290 --> 01:45:18,250
on my fingertips I'll show you after

2447
01:45:15,750 --> 01:45:19,720
yeah but I would look into their cache

2448
01:45:18,250 --> 01:45:21,790
like they have this thing called a cache

2449
01:45:19,720 --> 01:45:23,560
and and I think I actually want to try

2450
01:45:21,790 --> 01:45:25,330
to take advantage of that myself yeah

2451
01:45:23,560 --> 01:45:30,010
yeah yeah thank you for the ex-members

2452
01:45:25,330 --> 01:45:32,710
yeah other questions that's a good

2453
01:45:30,010 --> 01:45:37,030
question all right does anybody you know

2454
01:45:32,710 --> 01:45:39,310
want to try doing this like just yeah it

2455
01:45:37,030 --> 01:45:41,349
was not too scary it's like I know this

2456
01:45:39,310 --> 01:45:42,430
is a lot of material I really do it's

2457
01:45:41,350 --> 01:45:44,650
you know I was a little concerned that

2458
01:45:42,430 --> 01:45:48,010
this was going to be you know a lot of

2459
01:45:44,650 --> 01:45:48,969
material but again it's recorded you're

2460
01:45:48,010 --> 01:45:50,500
going you'll have access to the

2461
01:45:48,970 --> 01:45:53,290
presentation you'll have access to all

2462
01:45:50,500 --> 01:45:55,060
the references I've had people come up

2463
01:45:53,290 --> 01:45:56,710
to me after they've seen other some of

2464
01:45:55,060 --> 01:45:59,320
my other presentations like months later

2465
01:45:56,710 --> 01:46:02,110
and they start trying it out so I do

2466
01:45:59,320 --> 01:46:04,690
hope you do give it a try yeah I have a

2467
01:46:02,110 --> 01:46:08,019
question um so this seems to be all

2468
01:46:04,690 --> 01:46:09,490
pass/fail right everything has to be it

2469
01:46:08,020 --> 01:46:11,290
matches or it doesn't because is there

2470
01:46:09,490 --> 01:46:16,150
any way to turn this into some type of

2471
01:46:11,290 --> 01:46:19,960
you know value gathering device I want

2472
01:46:16,150 --> 01:46:21,790
to know you know what the optic levels

2473
01:46:19,960 --> 01:46:23,830
are I want to know you know like that

2474
01:46:21,790 --> 01:46:28,060
instead of just is it right or is it

2475
01:46:23,830 --> 01:46:29,470
wrong yeah yeah so I don't know that's

2476
01:46:28,060 --> 01:46:31,360
an issue we have with some of our

2477
01:46:29,470 --> 01:46:32,200
testing is like some of the things just

2478
01:46:31,360 --> 01:46:34,780
don't fit in

2479
01:46:32,200 --> 01:46:36,429
to pass or fail you know so we might

2480
01:46:34,780 --> 01:46:38,019
have to go is it within this range which

2481
01:46:36,430 --> 01:46:41,470
is sort of good but we'd really like to

2482
01:46:38,020 --> 01:46:42,610
know some value sometimes okay so I'm

2483
01:46:41,470 --> 01:46:45,030
gonna I'm gonna answer that question two

2484
01:46:42,610 --> 01:46:47,200
different ways so one way is is

2485
01:46:45,030 --> 01:46:50,050
harvesting data and putting it into a

2486
01:46:47,200 --> 01:46:51,820
data store I don't know if you sat in on

2487
01:46:50,050 --> 01:46:53,530
Damien's presentation earlier about you

2488
01:46:51,820 --> 01:46:55,660
know gathering telemetry and sticking it

2489
01:46:53,530 --> 01:46:58,389
into a database but that you know this

2490
01:46:55,660 --> 01:46:59,769
this part of your answer which is is if

2491
01:46:58,390 --> 01:47:01,930
you're constantly if you want to

2492
01:46:59,770 --> 01:47:03,970
constantly gather telemetry and stick it

2493
01:47:01,930 --> 01:47:07,330
in a database and even in a time series

2494
01:47:03,970 --> 01:47:08,830
database to look over a time that's half

2495
01:47:07,330 --> 01:47:10,870
of the equation the other half of equate

2496
01:47:08,830 --> 01:47:12,550
because that's your actual data the

2497
01:47:10,870 --> 01:47:16,210
other the other part of the equation is

2498
01:47:12,550 --> 01:47:19,750
is validating the information as a

2499
01:47:16,210 --> 01:47:21,250
criteria right meaning you know you're

2500
01:47:19,750 --> 01:47:24,450
gonna set up that criteria here's the

2501
01:47:21,250 --> 01:47:26,620
acceptable range did it pass or fail or

2502
01:47:24,450 --> 01:47:29,200
maybe I'm gonna look at this range and

2503
01:47:26,620 --> 01:47:31,210
I'm gonna categorize it as you know you

2504
01:47:29,200 --> 01:47:32,920
know kind of red green you know red

2505
01:47:31,210 --> 01:47:34,600
yellow green like red this is really bad

2506
01:47:32,920 --> 01:47:37,510
yellow you know should keep an eye on at

2507
01:47:34,600 --> 01:47:38,830
green it's okay and and since two of you

2508
01:47:37,510 --> 01:47:40,660
have now asked the same question I'm

2509
01:47:38,830 --> 01:47:42,730
gonna let me give me a second I'll pull

2510
01:47:40,660 --> 01:47:44,880
up this piece of code what it allows you

2511
01:47:42,730 --> 01:47:47,709
to do is it says after a test case is

2512
01:47:44,880 --> 01:47:49,600
executed and you get tests passed or

2513
01:47:47,710 --> 01:47:51,880
failed what do you want to do next and

2514
01:47:49,600 --> 01:47:53,920
that's how I generated the is it an

2515
01:47:51,880 --> 01:47:56,290
error is it a warning is it at whatever

2516
01:47:53,920 --> 01:47:58,540
you would use that same exact technique

2517
01:47:56,290 --> 01:48:02,340
so let me bring that up and I'll show it

2518
01:47:58,540 --> 01:48:02,340
to you really really quickly

2519
01:48:09,920 --> 01:48:15,379
so

2520
01:48:12,220 --> 01:48:15,379
[Music]

2521
01:48:22,940 --> 01:48:37,019
okay so inside of this is like super

2522
01:48:34,860 --> 01:48:39,780
advanced stuff okay inside of your

2523
01:48:37,020 --> 01:48:43,890
global contest file this is what you

2524
01:48:39,780 --> 01:48:51,300
want to do you want to add a hook called

2525
01:48:43,890 --> 01:48:55,110
PI test run test make report now and I

2526
01:48:51,300 --> 01:48:58,160
just hang with me for a sec what this

2527
01:48:55,110 --> 01:49:01,889
little piece of magic does is it says

2528
01:48:58,160 --> 01:49:03,960
before you run this hook run the

2529
01:49:01,890 --> 01:49:05,640
built-in hook to gather the report okay

2530
01:49:03,960 --> 01:49:07,320
so that's really important to do right

2531
01:49:05,640 --> 01:49:09,720
so it's going to gather the actual

2532
01:49:07,320 --> 01:49:13,320
report and then then it's going to run

2533
01:49:09,720 --> 01:49:15,750
my function right and in here I'm gonna

2534
01:49:13,320 --> 01:49:17,940
get the outcome of the test you know did

2535
01:49:15,750 --> 01:49:20,520
it pass did it fail this is how you do

2536
01:49:17,940 --> 01:49:22,410
this you basically say give me the yield

2537
01:49:20,520 --> 01:49:25,710
says give me what the test result was

2538
01:49:22,410 --> 01:49:29,059
and now you have this outcome which you

2539
01:49:25,710 --> 01:49:32,250
get what you get via this mechanism here

2540
01:49:29,060 --> 01:49:35,070
from that report you say when the report

2541
01:49:32,250 --> 01:49:38,100
was called and the outcome was failed at

2542
01:49:35,070 --> 01:49:41,790
this point what you would do is you

2543
01:49:38,100 --> 01:49:44,040
would look at the the failure and make a

2544
01:49:41,790 --> 01:49:47,880
determination on what to do next for

2545
01:49:44,040 --> 01:49:49,380
example in my case was the cabling err

2546
01:49:47,880 --> 01:49:51,810
you know was the cabling test case

2547
01:49:49,380 --> 01:49:54,510
failure an error or is it a warning or

2548
01:49:51,810 --> 01:50:02,190
the to do so I'll show you how I how I

2549
01:49:54,510 --> 01:50:06,330
do that so this is a function that got

2550
01:50:02,190 --> 01:50:08,820
called by that other function just hang

2551
01:50:06,330 --> 01:50:15,030
with me there so so what this is

2552
01:50:08,820 --> 01:50:17,910
basically saying is I actually get the

2553
01:50:15,030 --> 01:50:19,500
the exception that was trapped like

2554
01:50:17,910 --> 01:50:21,900
because when I ran my test case

2555
01:50:19,500 --> 01:50:24,480
I got an exception so now I know what

2556
01:50:21,900 --> 01:50:25,920
that exception is and so if the

2557
01:50:24,480 --> 01:50:29,129
exception happened to be a missing error

2558
01:50:25,920 --> 01:50:31,250
I'm going to turn that into it to do if

2559
01:50:29,130 --> 01:50:35,520
it was a mismatch error

2560
01:50:31,250 --> 01:50:37,470
and and in this case if the actual data

2561
01:50:35,520 --> 01:50:39,540
was localhost it meant that I haven't

2562
01:50:37,470 --> 01:50:41,760
CTP this box yet and so the management

2563
01:50:39,540 --> 01:50:42,930
probably isn't hooked up yet so this was

2564
01:50:41,760 --> 01:50:44,850
like hey man you might want to check

2565
01:50:42,930 --> 01:50:46,920
your management port too you know the

2566
01:50:44,850 --> 01:50:50,400
other device because your management

2567
01:50:46,920 --> 01:50:52,020
interface isn't up or maybe this is an

2568
01:50:50,400 --> 01:50:55,589
error it's actually cabled to the wrong

2569
01:50:52,020 --> 01:50:57,660
wrong place so when I was talking about

2570
01:50:55,590 --> 01:51:01,650
earlier about crafting your own custom

2571
01:50:57,660 --> 01:51:04,130
exceptions you can use that in order to

2572
01:51:01,650 --> 01:51:06,690
then generate your own custom reports

2573
01:51:04,130 --> 01:51:08,850
yeah and in this case what I was doing

2574
01:51:06,690 --> 01:51:10,440
is I was just saving this to a CSV file

2575
01:51:08,850 --> 01:51:12,000
that's my punch list but you could write

2576
01:51:10,440 --> 01:51:14,820
that into a database you could do

2577
01:51:12,000 --> 01:51:18,300
whatever you want this little this

2578
01:51:14,820 --> 01:51:21,750
little piece of magic here this run test

2579
01:51:18,300 --> 01:51:24,720
make report this is not in the in the

2580
01:51:21,750 --> 01:51:26,900
demo the tutorial demo because I just

2581
01:51:24,720 --> 01:51:30,210
thought I was going to run out of time

2582
01:51:26,900 --> 01:51:32,849
it's recorded here I'll probably try to

2583
01:51:30,210 --> 01:51:38,850
move in this example into the yeah yeah

2584
01:51:32,850 --> 01:51:41,430
sure yeah it's another hook function the

2585
01:51:38,850 --> 01:51:43,500
the PI test docks if you if you go there

2586
01:51:41,430 --> 01:51:45,930
and you look for hook functions you know

2587
01:51:43,500 --> 01:51:47,820
I went I went kind of archaeologically

2588
01:51:45,930 --> 01:51:49,860
exploring what all these things do so

2589
01:51:47,820 --> 01:51:51,480
some of them are documented really well

2590
01:51:49,860 --> 01:51:54,809
and then and then I try to google them

2591
01:51:51,480 --> 01:51:56,280
to see what they did and yeah this this

2592
01:51:54,810 --> 01:51:58,050
was this is actually really cool this is

2593
01:51:56,280 --> 01:52:00,450
how I ended up making those CSV files

2594
01:51:58,050 --> 01:52:04,920
yeah yeah yep

2595
01:52:00,450 --> 01:52:07,440
yeah all right yes yeah Jessica monthly

2596
01:52:04,920 --> 01:52:09,300
from Laura Colorado River Authority do

2597
01:52:07,440 --> 01:52:11,490
you use this as kind of even a

2598
01:52:09,300 --> 01:52:14,490
repository with your designs say hey

2599
01:52:11,490 --> 01:52:17,790
we're gonna new we issued this or we use

2600
01:52:14,490 --> 01:52:19,230
this with future design as well you're

2601
01:52:17,790 --> 01:52:21,269
making changes to the network you're

2602
01:52:19,230 --> 01:52:22,139
you're adding new things you said like

2603
01:52:21,270 --> 01:52:25,460
this is brownfield

2604
01:52:22,140 --> 01:52:29,040
so are you issuing this and using this

2605
01:52:25,460 --> 01:52:30,620
when you do that addition as well yeah

2606
01:52:29,040 --> 01:52:35,100
that's that's a really excellent

2607
01:52:30,620 --> 01:52:37,470
forward-looking kind of question so if

2608
01:52:35,100 --> 01:52:39,300
you're the kind of company that can have

2609
01:52:37,470 --> 01:52:40,950
the discipline to maintain your design

2610
01:52:39,300 --> 01:52:44,310
in a database and keep that up to date

2611
01:52:40,950 --> 01:52:46,500
and that is your source of truth meaning

2612
01:52:44,310 --> 01:52:47,550
your CLI and your network device is no

2613
01:52:46,500 --> 01:52:49,380
longer your source of truth but

2614
01:52:47,550 --> 01:52:51,000
everything comes from your design

2615
01:52:49,380 --> 01:52:52,980
whether it's a collection of

2616
01:52:51,000 --> 01:52:55,590
spreadsheets or it's a fancy database as

2617
01:52:52,980 --> 01:52:56,879
long as that becomes your your source of

2618
01:52:55,590 --> 01:52:59,760
truth then you can always

2619
01:52:56,880 --> 01:53:03,120
programmatically then recreate your set

2620
01:52:59,760 --> 01:53:04,950
of test cases from it so if you can if

2621
01:53:03,120 --> 01:53:08,240
you can have that kind of discipline you

2622
01:53:04,950 --> 01:53:10,830
know props because that's hard to do

2623
01:53:08,240 --> 01:53:13,590
without having a really easy tool for

2624
01:53:10,830 --> 01:53:15,660
people to use but I think that that is

2625
01:53:13,590 --> 01:53:17,970
kind of the the answer to this question

2626
01:53:15,660 --> 01:53:18,690
it like I think that's the right thing

2627
01:53:17,970 --> 01:53:20,490
to do

2628
01:53:18,690 --> 01:53:21,960
and one of the one of the next things

2629
01:53:20,490 --> 01:53:25,880
that I was I'm looking at maybe talking

2630
01:53:21,960 --> 01:53:27,960
giving a talk on is how to implement a a

2631
01:53:25,880 --> 01:53:29,550
lightweight version of that using like

2632
01:53:27,960 --> 01:53:32,340
google spreadsheets just because that's

2633
01:53:29,550 --> 01:53:33,750
something I see a lot so you know doing

2634
01:53:32,340 --> 01:53:35,730
graph databases is really really cool

2635
01:53:33,750 --> 01:53:37,230
not everybody wants to do that you know

2636
01:53:35,730 --> 01:53:38,639
but spreadsheets you know we can do

2637
01:53:37,230 --> 01:53:42,059
spreadsheets and if you if you keep your

2638
01:53:38,640 --> 01:53:43,890
spreadsheets up to date then yeah that's

2639
01:53:42,060 --> 01:53:45,990
a way to do it but you have to be

2640
01:53:43,890 --> 01:53:48,000
disciplined you have to you have to get

2641
01:53:45,990 --> 01:53:49,950
off of the CLI you have to get you know

2642
01:53:48,000 --> 01:53:52,590
we've got a pry the CLI from you know

2643
01:53:49,950 --> 01:53:54,030
they're cold dead hands yeah but I do

2644
01:53:52,590 --> 01:53:57,120
think it's the right thing to do it's

2645
01:53:54,030 --> 01:53:59,340
just hard one other question so do you

2646
01:53:57,120 --> 01:54:01,380
use is this tool able to be used for

2647
01:53:59,340 --> 01:54:03,030
like from operation for ten point like

2648
01:54:01,380 --> 01:54:04,650
hey let's just check everything

2649
01:54:03,030 --> 01:54:06,660
nothing's gone on when there's an

2650
01:54:04,650 --> 01:54:08,190
incident or anything like that is it is

2651
01:54:06,660 --> 01:54:10,740
it reasonable to expect this to do that

2652
01:54:08,190 --> 01:54:12,660
or is it just yeah don't worry about it

2653
01:54:10,740 --> 01:54:15,719
yeah it's it's all how you kind of plumb

2654
01:54:12,660 --> 01:54:19,019
that workflow you know for example we

2655
01:54:15,720 --> 01:54:20,790
use slack at MLB and I wrote a slack bot

2656
01:54:19,020 --> 01:54:23,010
that the operations guys can do a slack

2657
01:54:20,790 --> 01:54:25,890
command and they can run tests or do

2658
01:54:23,010 --> 01:54:27,810
things and so but the back end after

2659
01:54:25,890 --> 01:54:29,730
they hit that command could then invoke

2660
01:54:27,810 --> 01:54:32,160
PI test run and stuff and give them

2661
01:54:29,730 --> 01:54:33,839
results so it's all about for a lot of

2662
01:54:32,160 --> 01:54:35,820
folks it's all about the the the user

2663
01:54:33,840 --> 01:54:38,340
experience whether you do it with like

2664
01:54:35,820 --> 01:54:40,019
say ServiceNow is a front end or use

2665
01:54:38,340 --> 01:54:42,300
ansible tower as a front end or you have

2666
01:54:40,020 --> 01:54:44,850
some front end most of the time people

2667
01:54:42,300 --> 01:54:46,890
don't want to type PI test but you know

2668
01:54:44,850 --> 01:54:48,120
they don't want to like do the crafty

2669
01:54:46,890 --> 01:54:50,270
command-line you have to give them a

2670
01:54:48,120 --> 01:54:52,460
more consumable user experience but

2671
01:54:50,270 --> 01:54:55,890
absolutely I think it's a great idea

2672
01:54:52,460 --> 01:54:59,270
yeah yeah

2673
01:54:55,890 --> 01:55:01,590
all right five minutes other questions

2674
01:54:59,270 --> 01:55:04,200
all right we're really clocking right on

2675
01:55:01,590 --> 01:55:06,030
time thank you so much for hanging out

2676
01:55:04,200 --> 01:55:07,800
with me I only lost like 50% of the

2677
01:55:06,030 --> 01:55:09,780
audience I thought that was that was

2678
01:55:07,800 --> 01:55:12,200
pretty good I was actually worried so

2679
01:55:09,780 --> 01:55:12,200
thank you

