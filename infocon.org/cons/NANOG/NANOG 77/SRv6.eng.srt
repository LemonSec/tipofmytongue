1
00:00:10,490 --> 00:00:16,039
okay we're here to talk about SR v6 plus

2
00:00:13,639 --> 00:00:19,488
we've already talked about the fact

3
00:00:16,039 --> 00:00:21,070
that it's been renamed let's talk about

4
00:00:19,489 --> 00:00:23,779
segment routing in the state of it today

5
00:00:21,070 --> 00:00:26,119
segment routing is a traffic engineering

6
00:00:23,779 --> 00:00:28,189
mechanism it allows a source node to

7
00:00:26,119 --> 00:00:30,169
steer a packet through an SR path and

8
00:00:28,189 --> 00:00:33,079
segment routing you won't hear people

9
00:00:30,169 --> 00:00:35,659
talk about LSPs there are no label well

10
00:00:33,079 --> 00:00:38,780
there are no label switching there are

11
00:00:35,659 --> 00:00:42,320
SR paths a source node encodes an SR

12
00:00:38,780 --> 00:00:45,110
path in each packet and this alleviates

13
00:00:42,320 --> 00:00:46,940
the need for transit knows to maintain

14
00:00:45,110 --> 00:00:49,339
path State that's the big difference

15
00:00:46,940 --> 00:00:53,330
between segment routing and rsvp-te

16
00:00:49,339 --> 00:00:55,549
signaled MPLS and segment routing source

17
00:00:53,330 --> 00:00:58,580
node encodes the SR path in each packet

18
00:00:55,549 --> 00:01:03,579
and there's no need to signal a path

19
00:00:58,580 --> 00:01:06,439
from end to end today we have SR MPLS

20
00:01:03,579 --> 00:01:09,560
fairly mature and being deployed it

21
00:01:06,439 --> 00:01:12,829
encodes the SR path and an MPLS label

22
00:01:09,560 --> 00:01:17,079
stack each entry in the label stack

23
00:01:12,829 --> 00:01:17,079
represents a segment in the SR path

24
00:01:18,070 --> 00:01:25,190
we're starting to experiment with SR and

25
00:01:21,440 --> 00:01:28,880
ipv6 and there are two flavors of SR and

26
00:01:25,190 --> 00:01:34,850
SR VIP v6 one is called SR v6 the other

27
00:01:28,880 --> 00:01:38,390
SR v6 + or SRM sex both encode the SR

28
00:01:34,850 --> 00:01:40,220
path in an ipv6 routing header this is

29
00:01:38,390 --> 00:01:43,610
the ipv6 routing header that's been

30
00:01:40,220 --> 00:01:46,030
around for a good 25 years each member

31
00:01:43,610 --> 00:01:49,240
of the routing headers segment list

32
00:01:46,030 --> 00:01:51,560
represents a segment in the SR path

33
00:01:49,240 --> 00:01:54,710
there's a heated debate right now

34
00:01:51,560 --> 00:01:57,500
between SR v6 and sr v 6 + going on in

35
00:01:54,710 --> 00:01:59,179
the IETF spring working group for those

36
00:01:57,500 --> 00:02:01,070
of you who've been following it I

37
00:01:59,180 --> 00:02:04,549
apologize for having blown up your

38
00:02:01,070 --> 00:02:07,070
mailboxes each has a unique encoding

39
00:02:04,549 --> 00:02:09,349
mechanism and each has a unique approach

40
00:02:07,070 --> 00:02:11,689
to network programming an ipv6

41
00:02:09,348 --> 00:02:17,310
extensibility and we're going to deep

42
00:02:11,689 --> 00:02:20,890
dive into that in the next 42 minutes so

43
00:02:17,310 --> 00:02:23,890
SR v6 preserves the best SR v6 +

44
00:02:20,890 --> 00:02:26,790
preserves the best of SR v6 and there

45
00:02:23,890 --> 00:02:29,200
are some things that they have in common

46
00:02:26,790 --> 00:02:33,250
the first is the concept of a track

47
00:02:29,200 --> 00:02:35,769
traffic engineered tunnel they share the

48
00:02:33,250 --> 00:02:37,840
concept of a path and s our path

49
00:02:35,770 --> 00:02:39,640
provides unidirectional connectivity

50
00:02:37,840 --> 00:02:42,190
from an ingress node to an egress node

51
00:02:39,640 --> 00:02:44,769
it can follow a least-cost path or a

52
00:02:42,190 --> 00:02:46,690
traffic engineering path and it's

53
00:02:44,770 --> 00:02:49,480
defined by the segment's that it

54
00:02:46,690 --> 00:02:51,310
contains ok we've introduced this

55
00:02:49,480 --> 00:02:54,730
concept of a segment what's a segment

56
00:02:51,310 --> 00:02:56,800
well a segment provides unidirectional

57
00:02:54,730 --> 00:03:00,100
connectivity from its ingress to its

58
00:02:56,800 --> 00:03:03,280
egress and it's defined by its ingress

59
00:03:00,100 --> 00:03:05,859
node and a topological instruction that

60
00:03:03,280 --> 00:03:07,540
controls it so here's where segment

61
00:03:05,860 --> 00:03:09,100
routing starts to get a little bit

62
00:03:07,540 --> 00:03:12,120
unique that it has this concept of

63
00:03:09,100 --> 00:03:15,120
instructions now what is a topological

64
00:03:12,120 --> 00:03:18,040
instruction well a topological

65
00:03:15,120 --> 00:03:21,310
instruction executes on the segment

66
00:03:18,040 --> 00:03:23,530
ingress node it defines the segment

67
00:03:21,310 --> 00:03:25,480
egress node and the method by which the

68
00:03:23,530 --> 00:03:27,700
ingress node forwards the packet to the

69
00:03:25,480 --> 00:03:30,250
egress and there are a few types of

70
00:03:27,700 --> 00:03:32,769
topological instructions one is an

71
00:03:30,250 --> 00:03:34,480
adjacency instruction it forwards a

72
00:03:32,770 --> 00:03:37,510
packet through a specified interface

73
00:03:34,480 --> 00:03:39,730
it's strict routing another is a node

74
00:03:37,510 --> 00:03:42,640
segment it forwards a packet through the

75
00:03:39,730 --> 00:03:45,310
least-cost path to the egress node this

76
00:03:42,640 --> 00:03:47,980
is loose source routing and then there's

77
00:03:45,310 --> 00:03:49,540
a binding instruction the binding

78
00:03:47,980 --> 00:03:52,390
instruction fords a packet through

79
00:03:49,540 --> 00:03:53,859
another tunnel it applies it allows

80
00:03:52,390 --> 00:03:56,100
segment routing to be applied

81
00:03:53,860 --> 00:03:56,100
recursively

82
00:03:59,240 --> 00:04:04,940
now we have one more concept to deal

83
00:04:01,670 --> 00:04:07,489
with segments are identified by segment

84
00:04:04,940 --> 00:04:09,350
identifier x' a segment identifier is

85
00:04:07,490 --> 00:04:14,000
the thing that shows up in that routing

86
00:04:09,350 --> 00:04:18,860
header an SR v6 + a segment identifier

87
00:04:14,000 --> 00:04:21,440
is 16 or 32-bit unsigned integer this is

88
00:04:18,860 --> 00:04:25,970
a major difference between SR v6 + sr v6

89
00:04:21,440 --> 00:04:29,060
+ + sr v6 a segment identifier is a

90
00:04:25,970 --> 00:04:32,930
hundred twenty eight bit entity it looks

91
00:04:29,060 --> 00:04:34,310
like an ipv6 address but it's really not

92
00:04:32,930 --> 00:04:37,760
it's different and we'll talk about the

93
00:04:34,310 --> 00:04:41,960
differences in a little while in SRV 6 +

94
00:04:37,760 --> 00:04:47,630
a segment identifier is 16 or 32 bytes

95
00:04:41,960 --> 00:04:50,870
it's a key into a fib that contains the

96
00:04:47,630 --> 00:04:52,670
real segment instruction because there's

97
00:04:50,870 --> 00:04:54,940
one-to-one relationship between a

98
00:04:52,670 --> 00:04:57,410
segment and the topological can

99
00:04:54,940 --> 00:04:59,000
instruction that controls it thus if

100
00:04:57,410 --> 00:05:01,310
that identify as a segment also

101
00:04:59,000 --> 00:05:03,020
identifies the topological instruction

102
00:05:01,310 --> 00:05:05,420
that controls it this becomes

103
00:05:03,020 --> 00:05:08,030
interesting in a while a Sid has

104
00:05:05,420 --> 00:05:13,970
strictly node local significance just

105
00:05:08,030 --> 00:05:16,239
like a well let's say what else has no

106
00:05:13,970 --> 00:05:19,550
local significance

107
00:05:16,240 --> 00:05:22,420
well not global significance and it's

108
00:05:19,550 --> 00:05:25,850
distributed by the IGP

109
00:05:22,420 --> 00:05:28,070
now the next concept is network

110
00:05:25,850 --> 00:05:30,380
programming programmability this is

111
00:05:28,070 --> 00:05:33,920
something that SR v6 and SRV six-plus

112
00:05:30,380 --> 00:05:37,070
have in common we have some instructions

113
00:05:33,920 --> 00:05:40,930
that are topological that force a packet

114
00:05:37,070 --> 00:05:43,430
from one node to another we have other

115
00:05:40,930 --> 00:05:45,500
instructions that are not topological

116
00:05:43,430 --> 00:05:48,310
they do other things and there are two

117
00:05:45,500 --> 00:05:51,470
classes of these service instructions

118
00:05:48,310 --> 00:05:54,470
one class is a per segment service

119
00:05:51,470 --> 00:05:57,260
instruction it's executed on each

120
00:05:54,470 --> 00:05:59,510
segment egress node and it does things

121
00:05:57,260 --> 00:06:01,700
like expose a packet to a firewall

122
00:05:59,510 --> 00:06:04,520
policy expose a packet to a sampling

123
00:06:01,700 --> 00:06:08,659
policy these kind of instructions are

124
00:06:04,520 --> 00:06:11,120
useful for service function chaining the

125
00:06:08,660 --> 00:06:13,640
next kind of instruction is a per path

126
00:06:11,120 --> 00:06:16,970
instruction it's executed on the path

127
00:06:13,640 --> 00:06:20,810
egress node generally it overrides the

128
00:06:16,970 --> 00:06:24,260
default payload handling rules for ipv6

129
00:06:20,810 --> 00:06:27,740
for example the default payload handling

130
00:06:24,260 --> 00:06:29,690
rule is pop off the ipv6 header in all

131
00:06:27,740 --> 00:06:32,870
its extensions and process the next

132
00:06:29,690 --> 00:06:35,660
header an example of a per path service

133
00:06:32,870 --> 00:06:37,820
instruction would be D cap solute D

134
00:06:35,660 --> 00:06:40,910
capsulate the payload and forwarded

135
00:06:37,820 --> 00:06:42,860
through a specified interface or D

136
00:06:40,910 --> 00:06:45,020
capsulate the payload and forward it

137
00:06:42,860 --> 00:06:48,950
using a specified forwarding table maybe

138
00:06:45,020 --> 00:06:51,530
a VPN and forwarding table of e RF now a

139
00:06:48,950 --> 00:06:53,840
service instruction augments but does

140
00:06:51,530 --> 00:06:54,440
not define an SR path what does that

141
00:06:53,840 --> 00:06:56,359
mean

142
00:06:54,440 --> 00:06:58,520
it means one packet can be sent through

143
00:06:56,360 --> 00:07:00,890
an SR path with one set of service

144
00:06:58,520 --> 00:07:03,650
instructions another packet sent through

145
00:07:00,890 --> 00:07:07,969
the exact same path with a different set

146
00:07:03,650 --> 00:07:09,919
of service instructions now let's pull

147
00:07:07,970 --> 00:07:12,260
it all together in a picture here we

148
00:07:09,919 --> 00:07:15,890
have an SR path at Cantone contains

149
00:07:12,260 --> 00:07:19,700
nodes a through F the path contains

150
00:07:15,890 --> 00:07:23,360
three segments you can see them ACC D D

151
00:07:19,700 --> 00:07:26,030
F each has a topological instruction and

152
00:07:23,360 --> 00:07:27,560
a service instruction and there's one

153
00:07:26,030 --> 00:07:28,070
service instruction at the end of the

154
00:07:27,560 --> 00:07:31,430
path

155
00:07:28,070 --> 00:07:33,440
now clearly not all s our paths have all

156
00:07:31,430 --> 00:07:36,050
types of instructions the topological

157
00:07:33,440 --> 00:07:43,150
instructions are mandatory the service

158
00:07:36,050 --> 00:07:47,560
instructions are optional now SR v6

159
00:07:43,150 --> 00:07:50,989
leverages the ipv6 extensibility model

160
00:07:47,560 --> 00:07:54,680
ipv6 as it was defined many many moons

161
00:07:50,990 --> 00:07:58,490
ago gave us a bunch of mechanisms for

162
00:07:54,680 --> 00:07:59,690
extending it and SR v6 one of them well

163
00:07:58,490 --> 00:08:05,110
probably the biggest difference between

164
00:07:59,690 --> 00:08:08,630
SR v6 + + sr v6 is that SR v6 +

165
00:08:05,110 --> 00:08:10,970
leverages the extensibility mechanisms

166
00:08:08,630 --> 00:08:15,770
of ipv6 as they were defined way back

167
00:08:10,970 --> 00:08:19,070
when so first let's have a little

168
00:08:15,770 --> 00:08:22,310
refresher in ipv6 extension headers

169
00:08:19,070 --> 00:08:24,590
ipv6 defines many extension headers and

170
00:08:22,310 --> 00:08:27,050
they're processed in the order that they

171
00:08:24,590 --> 00:08:29,630
appear in a packet they basically fall

172
00:08:27,050 --> 00:08:32,169
into three categories per hop per

173
00:08:29,630 --> 00:08:35,150
segment and per path extension headers

174
00:08:32,169 --> 00:08:37,370
per hop extension headers are processed

175
00:08:35,150 --> 00:08:39,470
by every hop along the path there's only

176
00:08:37,370 --> 00:08:43,570
one per hop extension header it's called

177
00:08:39,470 --> 00:08:46,460
the hop by hop per segments are

178
00:08:43,570 --> 00:08:49,760
processed by every segment end point

179
00:08:46,460 --> 00:08:51,770
along a path they only occur if there's

180
00:08:49,760 --> 00:08:55,370
a routing header in the in the packet

181
00:08:51,770 --> 00:08:57,800
the per segment extension headers of the

182
00:08:55,370 --> 00:09:01,340
routing header and a destination options

183
00:08:57,800 --> 00:09:05,000
header that may precede it and then the

184
00:09:01,340 --> 00:09:08,420
per path extension headers are processed

185
00:09:05,000 --> 00:09:09,980
only by the egress node by the path

186
00:09:08,420 --> 00:09:12,729
egress node and there are a bunch of

187
00:09:09,980 --> 00:09:15,260
that fragment authentication header

188
00:09:12,730 --> 00:09:19,580
encapsulating security payload and

189
00:09:15,260 --> 00:09:21,920
another destination options now an SR v6

190
00:09:19,580 --> 00:09:25,490
packet can carry any valid combination

191
00:09:21,920 --> 00:09:28,099
of ipv6 extension headers but it

192
00:09:25,490 --> 00:09:29,570
leverages the routing and destination

193
00:09:28,100 --> 00:09:32,570
options header and we're going to talk

194
00:09:29,570 --> 00:09:37,940
about how it leverages those two headers

195
00:09:32,570 --> 00:09:42,230
in just a second let's have a quick

196
00:09:37,940 --> 00:09:44,900
refresher routing headers the routing

197
00:09:42,230 --> 00:09:47,390
header is used by an ipv6 source to list

198
00:09:44,900 --> 00:09:49,130
one or more Internet intermediate nodes

199
00:09:47,390 --> 00:09:54,170
to be visited by a packet on the way to

200
00:09:49,130 --> 00:09:56,000
its destination this is from RFC 8200

201
00:09:54,170 --> 00:10:00,079
and it's basically saying that the

202
00:09:56,000 --> 00:10:03,590
routing header is ipv6 as traffic

203
00:10:00,080 --> 00:10:06,280
traffic engineering mechanism it gives

204
00:10:03,590 --> 00:10:10,610
you a loose source routing mechanism and

205
00:10:06,280 --> 00:10:12,470
it has five fields in it a next header

206
00:10:10,610 --> 00:10:16,040
tells you the type of the next header in

207
00:10:12,470 --> 00:10:18,650
the extension header chain a header

208
00:10:16,040 --> 00:10:22,040
length a routing type because there are

209
00:10:18,650 --> 00:10:24,590
many variants of routing headers SR v6

210
00:10:22,040 --> 00:10:27,230
defines one variant SR v6 + defines

211
00:10:24,590 --> 00:10:29,120
another variant the number of segments

212
00:10:27,230 --> 00:10:31,230
left that's the number of segments still

213
00:10:29,120 --> 00:10:34,260
to be visited along the SR path

214
00:10:31,230 --> 00:10:36,149
and type specific data type specific

215
00:10:34,260 --> 00:10:38,700
data can contain anything but it always

216
00:10:36,149 --> 00:10:40,529
contains a segment list the list of

217
00:10:38,700 --> 00:10:46,230
segment endpoints you have to be to be

218
00:10:40,529 --> 00:10:48,420
visited now how do we process a routing

219
00:10:46,230 --> 00:10:50,190
header well the first thing we do is

220
00:10:48,420 --> 00:10:52,800
take a look at the segment's left field

221
00:10:50,190 --> 00:10:54,600
if segments left equals zero skip it and

222
00:10:52,800 --> 00:10:57,930
proceed to the next header you are at

223
00:10:54,600 --> 00:11:00,630
the path aggress node if segments left

224
00:10:57,930 --> 00:11:02,609
is greater than zero decrement segments

225
00:11:00,630 --> 00:11:05,880
left and update the destination address

226
00:11:02,610 --> 00:11:08,370
to reflect the next segment ingress node

227
00:11:05,880 --> 00:11:13,079
and then for the packet don't process

228
00:11:08,370 --> 00:11:14,730
the next header if you update the

229
00:11:13,079 --> 00:11:16,680
destination address for to the

230
00:11:14,730 --> 00:11:19,279
destination address don't look at the

231
00:11:16,680 --> 00:11:25,560
next set or beyond the routing header

232
00:11:19,279 --> 00:11:28,769
now SRV six-plus defines a new routing

233
00:11:25,560 --> 00:11:32,250
header type it's called the compressed

234
00:11:28,769 --> 00:11:34,980
routing header it resembles the generic

235
00:11:32,250 --> 00:11:37,350
routing header defined in RFC 8200 it

236
00:11:34,980 --> 00:11:41,130
has the same set of five fields the same

237
00:11:37,350 --> 00:11:44,070
simple function there are two flavors of

238
00:11:41,130 --> 00:11:48,420
this compressed routing header a CRH 16

239
00:11:44,070 --> 00:11:50,190
in a CRH 32 one defines the cid in 16

240
00:11:48,420 --> 00:11:53,339
bits the other in 32 bits otherwise

241
00:11:50,190 --> 00:11:56,850
they're identical and there's a local

242
00:11:53,339 --> 00:11:59,730
data structure called the CID forwarding

243
00:11:56,850 --> 00:12:05,160
information base or the s fib that map's

244
00:11:59,730 --> 00:12:11,220
this 16 or 32 bit CID to an ipv6 address

245
00:12:05,160 --> 00:12:13,199
and affording instruction so what does

246
00:12:11,220 --> 00:12:16,980
this routing header look like not many

247
00:12:13,199 --> 00:12:19,829
surprises the 16-bit version has the

248
00:12:16,980 --> 00:12:27,000
four mandatory fields followed by a list

249
00:12:19,829 --> 00:12:28,769
of 16-bit SIDS the 32-bit version the

250
00:12:27,000 --> 00:12:34,769
mandatory fields followed by a list of

251
00:12:28,769 --> 00:12:36,860
32-bit fit SIDS now what does this

252
00:12:34,769 --> 00:12:39,810
forwarding information base look like

253
00:12:36,860 --> 00:12:43,680
well remember when we're processing the

254
00:12:39,810 --> 00:12:44,670
CRH we look at segments left it is an

255
00:12:43,680 --> 00:12:49,020
indexed into the

256
00:12:44,670 --> 00:12:53,310
said list we find us said and we look

257
00:12:49,020 --> 00:12:58,350
for an S Pittman member that is indexed

258
00:12:53,310 --> 00:13:02,250
by that CID that member contains an ipv6

259
00:12:58,350 --> 00:13:04,610
address we will copy that ipv6 address

260
00:13:02,250 --> 00:13:07,620
to the destination address of the packet

261
00:13:04,610 --> 00:13:11,330
then we'll take a look at the segment

262
00:13:07,620 --> 00:13:15,180
type it can be adjacency node or binding

263
00:13:11,330 --> 00:13:21,270
if it's an adjacency said we forward the

264
00:13:15,180 --> 00:13:25,020
packet to a through an interface that is

265
00:13:21,270 --> 00:13:28,170
defined by a in this s fehb if it's a

266
00:13:25,020 --> 00:13:29,939
node said we forward it through the

267
00:13:28,170 --> 00:13:31,589
least-cost path to the destination

268
00:13:29,940 --> 00:13:36,720
address if it's a binding said we

269
00:13:31,590 --> 00:13:43,710
encapsulate and forward now a quick

270
00:13:36,720 --> 00:13:47,280
analysis of the CR h the CR h is used by

271
00:13:43,710 --> 00:13:49,260
an ipv6 source to list one or more

272
00:13:47,280 --> 00:13:50,870
intermediate nodes to be listed on the

273
00:13:49,260 --> 00:13:53,010
weight of the packets destination

274
00:13:50,870 --> 00:13:55,350
there's nothing nothing more nothing

275
00:13:53,010 --> 00:13:58,380
less basically what we're saying in this

276
00:13:55,350 --> 00:14:02,220
bullet is that the CR h is used exactly

277
00:13:58,380 --> 00:14:06,630
the way RFC 8200 says to use routing

278
00:14:02,220 --> 00:14:10,830
headers there are no surprises here the

279
00:14:06,630 --> 00:14:13,410
CR H is relatively short if you take a

280
00:14:10,830 --> 00:14:14,640
look at routing headers over time how

281
00:14:13,410 --> 00:14:16,290
many of you who have ever deployed a

282
00:14:14,640 --> 00:14:20,100
routing header in your networks

283
00:14:16,290 --> 00:14:21,839
I see no hands well one reason is

284
00:14:20,100 --> 00:14:23,460
because there's not a whole lot of ipv6

285
00:14:21,840 --> 00:14:26,550
deployment but even for those of you

286
00:14:23,460 --> 00:14:28,740
who've deployed ipv6 the reason you

287
00:14:26,550 --> 00:14:30,900
haven't deployed routing headers is

288
00:14:28,740 --> 00:14:35,580
because they get really long really fast

289
00:14:30,900 --> 00:14:40,260
if a routing header has a list of 128

290
00:14:35,580 --> 00:14:44,280
bit segment identifiers in it it can get

291
00:14:40,260 --> 00:14:46,740
to be 56 64 bytes really long that's a

292
00:14:44,280 --> 00:14:48,480
sex unfriendly it consumes a lot of

293
00:14:46,740 --> 00:14:49,980
bandwidth it's one of the reasons the

294
00:14:48,480 --> 00:14:52,650
routing header never really took off

295
00:14:49,980 --> 00:14:56,490
well we've compressed the routing header

296
00:14:52,650 --> 00:15:01,120
so you can fit a fairly long path

297
00:14:56,490 --> 00:15:03,430
into 24 bytes of routing header this is

298
00:15:01,120 --> 00:15:07,060
a sick friendly and it doesn't consume

299
00:15:03,430 --> 00:15:08,349
lots and lots of bandwidth by the way

300
00:15:07,060 --> 00:15:12,250
that's one of the big differences

301
00:15:08,350 --> 00:15:14,560
between SR v6 + + sr v6 that's our v6 +

302
00:15:12,250 --> 00:15:18,720
1 of s our v6 + is biggest selling

303
00:15:14,560 --> 00:15:18,719
points is this compressed routing header

304
00:15:19,260 --> 00:15:29,590
ok while we're doing our look back at

305
00:15:26,700 --> 00:15:32,160
ipv6 extensibility mechanisms we'll take

306
00:15:29,590 --> 00:15:34,330
a look at the destination options header

307
00:15:32,160 --> 00:15:37,060
destinations options headers used to

308
00:15:34,330 --> 00:15:39,330
carry optional information to be

309
00:15:37,060 --> 00:15:42,910
examined by a packets destination nodes

310
00:15:39,330 --> 00:15:48,280
and a packet can carry to destination

311
00:15:42,910 --> 00:15:50,290
options header in fact in RFC 8200 there

312
00:15:48,280 --> 00:15:52,990
is only one extension header that's

313
00:15:50,290 --> 00:15:55,930
allowed to occur twice in a packet

314
00:15:52,990 --> 00:15:57,760
that's the destination options header it

315
00:15:55,930 --> 00:16:00,339
can occur once preceding the routing

316
00:15:57,760 --> 00:16:03,280
header and that one is processed by

317
00:16:00,340 --> 00:16:06,670
every segment egg point endpoint and it

318
00:16:03,280 --> 00:16:09,130
can be occur another time before the

319
00:16:06,670 --> 00:16:10,839
upper layer header that instance of the

320
00:16:09,130 --> 00:16:17,170
destination options header is only

321
00:16:10,840 --> 00:16:21,190
processed by the path egress node now SR

322
00:16:17,170 --> 00:16:23,319
v6 defines two new options one is the

323
00:16:21,190 --> 00:16:26,200
per a segment service instruction

324
00:16:23,320 --> 00:16:28,180
identifier it's encoded in a destination

325
00:16:26,200 --> 00:16:30,190
option that precedes the routing option

326
00:16:28,180 --> 00:16:33,760
header which means it's processed by

327
00:16:30,190 --> 00:16:36,670
every segment endpoint it identifies a

328
00:16:33,760 --> 00:16:38,560
service chain each node learns the

329
00:16:36,670 --> 00:16:40,630
function that it executes syn the count

330
00:16:38,560 --> 00:16:42,910
and the context of that service chain

331
00:16:40,630 --> 00:16:47,589
from a controller and it has network

332
00:16:42,910 --> 00:16:51,010
wide significance this IP option is

333
00:16:47,589 --> 00:16:53,020
optional this well an optional option

334
00:16:51,010 --> 00:16:56,290
what does that mean the first two bits

335
00:16:53,020 --> 00:16:58,420
of an option identifier tell a

336
00:16:56,290 --> 00:17:01,780
processing node what to do if it does

337
00:16:58,420 --> 00:17:03,579
not recognize this particular option the

338
00:17:01,780 --> 00:17:05,678
first two bits of this option are 0

339
00:17:03,580 --> 00:17:07,510
which means if the processing node does

340
00:17:05,679 --> 00:17:09,310
not recognize it just skip over it

341
00:17:07,510 --> 00:17:11,260
process the next

342
00:17:09,310 --> 00:17:15,359
option or the next extension header in

343
00:17:11,260 --> 00:17:15,359
the packet so it's an optional option

344
00:17:16,380 --> 00:17:24,640
SRB six-plus can defines another option

345
00:17:22,119 --> 00:17:26,949
called the per path service instruction

346
00:17:24,640 --> 00:17:28,750
identifier this is encoded in the

347
00:17:26,950 --> 00:17:31,840
destination option header that precedes

348
00:17:28,750 --> 00:17:34,390
the upper layer header it's processed by

349
00:17:31,840 --> 00:17:36,939
the path egress node so the distinction

350
00:17:34,390 --> 00:17:39,640
between the two one is the first one is

351
00:17:36,940 --> 00:17:41,350
processed at every segment end point

352
00:17:39,640 --> 00:17:44,140
this one is processed only at the path

353
00:17:41,350 --> 00:17:47,340
egress it identifies a perp a thin

354
00:17:44,140 --> 00:17:50,200
struction it has node local significance

355
00:17:47,340 --> 00:17:51,760
it's advertised by a located and

356
00:17:50,200 --> 00:17:55,360
advertised by the processing node

357
00:17:51,760 --> 00:17:57,400
advertised by bgp it basically replaces

358
00:17:55,360 --> 00:18:00,639
an MPLS service label something that you

359
00:17:57,400 --> 00:18:03,010
would have seen in l3 VPN it's

360
00:18:00,640 --> 00:18:06,040
processing is not optional if a node

361
00:18:03,010 --> 00:18:12,360
sees this it must either recognize it

362
00:18:06,040 --> 00:18:17,889
and process it or drop the packet now

363
00:18:12,360 --> 00:18:22,929
SRV six-plus avoids some of the pitfalls

364
00:18:17,890 --> 00:18:29,080
of SR v6 and let's talk about some of

365
00:18:22,930 --> 00:18:35,910
the pitfalls of SR v6 s our v6 modifies

366
00:18:29,080 --> 00:18:40,210
the semantics of an ipv6 address the

367
00:18:35,910 --> 00:18:43,360
destination address field in SR v6 the

368
00:18:40,210 --> 00:18:46,450
destination address field can contain

369
00:18:43,360 --> 00:18:49,389
either an ipv6 address that identifies

370
00:18:46,450 --> 00:18:53,580
an interface the way RFC 42 91 says it

371
00:18:49,390 --> 00:18:56,610
should or it can contain an SR v6 said

372
00:18:53,580 --> 00:18:59,649
sins are copied from the routing header

373
00:18:56,610 --> 00:19:01,060
to the NS our v6 they're copied from the

374
00:18:59,650 --> 00:19:04,300
routing header to the destination

375
00:19:01,060 --> 00:19:09,970
address now a CID semantics is different

376
00:19:04,300 --> 00:19:13,450
from an IP v6 of the semantics in SR v6

377
00:19:09,970 --> 00:19:17,370
the high order bits of a CID represent

378
00:19:13,450 --> 00:19:20,200
the locator and the low-order bits

379
00:19:17,370 --> 00:19:22,870
represent a function and arguments so

380
00:19:20,200 --> 00:19:26,170
what does the CID represent an SR visa

381
00:19:22,870 --> 00:19:28,870
well it is a function instantiated on a

382
00:19:26,170 --> 00:19:30,400
node the node is identified by the high

383
00:19:28,870 --> 00:19:34,989
order bits the locator

384
00:19:30,400 --> 00:19:37,210
the function is identified in the low

385
00:19:34,990 --> 00:19:40,780
order bits so what I did with a

386
00:19:37,210 --> 00:19:46,530
topological instruction and put in a fib

387
00:19:40,780 --> 00:19:49,899
and distributed and what what s rv6 did

388
00:19:46,530 --> 00:19:55,750
with a instruction and put in a fib and

389
00:19:49,900 --> 00:19:59,140
distributed with an IG p sr v6 encodes

390
00:19:55,750 --> 00:20:02,950
in an ipv6 address basically there using

391
00:19:59,140 --> 00:20:06,730
the low order bits of an ipv6 address to

392
00:20:02,950 --> 00:20:10,210
tell the processing node what to do when

393
00:20:06,730 --> 00:20:13,030
it receives a packet this is kind of a

394
00:20:10,210 --> 00:20:16,870
subtle point so I'll I'll try to

395
00:20:13,030 --> 00:20:22,149
articulate it one other way in ipv6 and

396
00:20:16,870 --> 00:20:25,449
SR v6 plus an ipv6 address means exactly

397
00:20:22,150 --> 00:20:32,310
one thing it identifies an interface

398
00:20:25,450 --> 00:20:37,810
period end of story an S our v6 plus an

399
00:20:32,310 --> 00:20:41,950
ipv6 address identifies an instruction

400
00:20:37,810 --> 00:20:44,320
to be executed on a node the address

401
00:20:41,950 --> 00:20:46,570
isn't the destination the address

402
00:20:44,320 --> 00:20:48,399
represents what a package what should be

403
00:20:46,570 --> 00:20:55,169
done with a packet once it reaches the

404
00:20:48,400 --> 00:20:58,090
destination in my opinion redefining

405
00:20:55,170 --> 00:21:00,070
something as fundamental as an ipv6

406
00:20:58,090 --> 00:21:03,699
address it's kind of a dangerous thing

407
00:21:00,070 --> 00:21:05,470
to do Lord knows how much of the

408
00:21:03,700 --> 00:21:11,550
internet relies on the semantics of an

409
00:21:05,470 --> 00:21:11,550
ipv6 address whoops wrong direction

410
00:21:12,929 --> 00:21:22,989
let's say and we've already gone over

411
00:21:17,109 --> 00:21:26,918
this the next issue is SRB six couples

412
00:21:22,989 --> 00:21:31,299
topological and service instructions you

413
00:21:26,919 --> 00:21:34,929
remember in SRV six plus we put

414
00:21:31,299 --> 00:21:38,440
topological instructions in a fib

415
00:21:34,929 --> 00:21:40,600
and that fib is referenced with a

416
00:21:38,440 --> 00:21:43,299
routing header so the routing header

417
00:21:40,600 --> 00:21:48,639
does nothing but traffic engineering an

418
00:21:43,299 --> 00:21:50,980
SRP six plus we've put both topological

419
00:21:48,639 --> 00:21:53,258
and we've encoded both topological and

420
00:21:50,980 --> 00:21:55,600
service instructions and an ipv6 address

421
00:21:53,259 --> 00:22:00,100
and we made a stack of them in the

422
00:21:55,600 --> 00:22:02,459
routing header so an SR v6 both

423
00:22:00,100 --> 00:22:04,389
topological and service instructions are

424
00:22:02,460 --> 00:22:07,749
encoded in the routing header

425
00:22:04,389 --> 00:22:10,258
even though ipv6 provides a destination

426
00:22:07,749 --> 00:22:12,429
options to encode service for the

427
00:22:10,259 --> 00:22:17,830
specific purpose of encoding service

428
00:22:12,429 --> 00:22:19,720
instructions now what happens if an

429
00:22:17,830 --> 00:22:25,359
instruction gets bigger than the

430
00:22:19,720 --> 00:22:27,190
low-order bits of an ipv6 address well

431
00:22:25,359 --> 00:22:31,749
then we have to start expanding that

432
00:22:27,190 --> 00:22:33,389
routing header SR v6 defines a routing

433
00:22:31,749 --> 00:22:36,279
header called the segment routing header

434
00:22:33,389 --> 00:22:39,699
it has more fields than the compressed

435
00:22:36,279 --> 00:22:44,739
routing header it has tags flags and

436
00:22:39,700 --> 00:22:50,619
tlvs when all the information you need

437
00:22:44,739 --> 00:22:53,109
for to process a packet can't be fit in

438
00:22:50,619 --> 00:22:55,480
the lower order bits of the address they

439
00:22:53,109 --> 00:22:57,820
start building these tags flags and tlvs

440
00:22:55,480 --> 00:22:59,999
in the segment routing header this means

441
00:22:57,820 --> 00:23:06,039
the segment routing header is going to

442
00:22:59,999 --> 00:23:08,529
contain more and more information given

443
00:23:06,039 --> 00:23:10,980
that this will need to be processed by a

444
00:23:08,529 --> 00:23:15,309
sex that's probably got not good news

445
00:23:10,980 --> 00:23:17,049
also new security mechanisms are you

446
00:23:15,309 --> 00:23:19,840
know this coupling requires new security

447
00:23:17,049 --> 00:23:22,749
mechanisms the routing header can't be

448
00:23:19,840 --> 00:23:23,080
protected by ipv6 authentication or ESP

449
00:23:22,749 --> 00:23:25,870
header

450
00:23:23,080 --> 00:23:33,039
so they've had to define a new s rh h

451
00:23:25,870 --> 00:23:35,260
mac TLB the next issue is difference

452
00:23:33,039 --> 00:23:37,750
between s or v6 and sr v 6 plus as

453
00:23:35,260 --> 00:23:42,730
routing header size we talked about the

454
00:23:37,750 --> 00:23:44,950
big benefit of sr v 6 plus is being able

455
00:23:42,730 --> 00:23:48,490
to fit lots of SIDS in a small routing

456
00:23:44,950 --> 00:23:53,860
header well here let's say you have a

457
00:23:48,490 --> 00:23:58,090
fairly average path with maybe 5

458
00:23:53,860 --> 00:24:01,719
segments in it an SR v6 you need an ad

459
00:23:58,090 --> 00:24:06,908
by outing header to encode that in SRV 6

460
00:24:01,720 --> 00:24:13,830
plus with 16 bits erh you only need a 16

461
00:24:06,909 --> 00:24:19,769
byte routing header to encode okay

462
00:24:13,830 --> 00:24:24,158
at the last IETF there was a proposal to

463
00:24:19,769 --> 00:24:29,320
reduce the size of routing headers for

464
00:24:24,159 --> 00:24:33,460
SR v6 and that proposal introduced a new

465
00:24:29,320 --> 00:24:36,750
CID type called the Micro said the Micro

466
00:24:33,460 --> 00:24:39,460
said modified ipv6 semantics even more

467
00:24:36,750 --> 00:24:42,549
basically the way it works is a network

468
00:24:39,460 --> 00:24:45,399
operator obtains a splash 32 from micro

469
00:24:42,549 --> 00:24:49,899
side processing so let's say he gets 201

470
00:24:45,399 --> 00:24:57,219
DB 8 / 32 then from that slash 32 he

471
00:24:49,899 --> 00:25:01,360
assigns a slash 48 to each node now the

472
00:24:57,220 --> 00:25:04,179
path for any from node 1 to node 3 let's

473
00:25:01,360 --> 00:25:12,820
say the path to node 1 via node 3 and

474
00:25:04,179 --> 00:25:15,880
node 2 is represented by the 32 followed

475
00:25:12,820 --> 00:25:20,379
by the unique 16 bits of each so it's

476
00:25:15,880 --> 00:25:24,690
represented by 201 DB 8 3 2 1 then as we

477
00:25:20,380 --> 00:25:29,500
go from path to path from node to node

478
00:25:24,690 --> 00:25:31,929
you shift 16 bits of the address I won't

479
00:25:29,500 --> 00:25:34,570
read through the slide because it's you

480
00:25:31,929 --> 00:25:36,980
know fairly complicated but you'll see

481
00:25:34,570 --> 00:25:40,340
what we're doing we're basically chain

482
00:25:36,980 --> 00:25:44,660
changing the address to to make the path

483
00:25:40,340 --> 00:25:46,970
work this is clearly changing the

484
00:25:44,660 --> 00:25:53,690
semantics of an ipv6 address something

485
00:25:46,970 --> 00:25:56,020
you probably don't want to do so there

486
00:25:53,690 --> 00:25:59,090
were some there were some impediment Stu

487
00:25:56,020 --> 00:26:02,290
deploying this IP visa this micro said

488
00:25:59,090 --> 00:26:04,970
first is you have to obtain a slash 32

489
00:26:02,290 --> 00:26:06,980
second the network operator has to

490
00:26:04,970 --> 00:26:12,260
maintain a specific numbering policy in

491
00:26:06,980 --> 00:26:15,470
order to make the solution work for

492
00:26:12,260 --> 00:26:18,309
instance you know if a slash 48

493
00:26:15,470 --> 00:26:20,600
represents a micro SID you better not

494
00:26:18,309 --> 00:26:22,580
advertise anything more specific than

495
00:26:20,600 --> 00:26:25,520
that slash 48 or else you create black

496
00:26:22,580 --> 00:26:29,110
holes and it further modifies the ipv6

497
00:26:25,520 --> 00:26:31,700
addressing semantics so let's take a

498
00:26:29,110 --> 00:26:35,780
look at the implementations and

499
00:26:31,700 --> 00:26:39,799
deployments of SRV 6 plus there's a POC

500
00:26:35,780 --> 00:26:42,830
implementation of SR v6 + on Linux with

501
00:26:39,799 --> 00:26:45,889
Juno CRPD if anybody's interested in

502
00:26:42,830 --> 00:26:50,059
playing with it contact me later there's

503
00:26:45,890 --> 00:26:51,530
an MX park to be complete let's say may

504
00:26:50,059 --> 00:26:53,059
be completed by time of Nanog

505
00:26:51,530 --> 00:26:55,340
presentation we didn't make it it's

506
00:26:53,059 --> 00:27:00,980
gonna be another 4 weeks or so liquid

507
00:26:55,340 --> 00:27:03,309
telecom has done a implementation with

508
00:27:00,980 --> 00:27:05,360
their data plane developer's kit and

509
00:27:03,309 --> 00:27:07,428
they've also demonstrated

510
00:27:05,360 --> 00:27:11,540
interoperability between the Linux and

511
00:27:07,429 --> 00:27:14,390
DP DK implementations liquid has also

512
00:27:11,540 --> 00:27:16,639
done an experimental deployment in their

513
00:27:14,390 --> 00:27:21,110
network and there'll be more deployments

514
00:27:16,640 --> 00:27:24,700
coming in the next few weeks so what

515
00:27:21,110 --> 00:27:28,280
conclusions do we have here s our v6

516
00:27:24,700 --> 00:27:31,549
preserves the best of SR v6 + preserves

517
00:27:28,280 --> 00:27:34,899
the best of SR v6 it's traffic

518
00:27:31,549 --> 00:27:40,520
engineering its network program ability

519
00:27:34,900 --> 00:27:42,590
but SR v6 + is more deployable because

520
00:27:40,520 --> 00:27:45,168
it defines this little new protocol

521
00:27:42,590 --> 00:27:47,750
machinery as possible instead of

522
00:27:45,169 --> 00:27:49,810
deploying new protocol machinery it

523
00:27:47,750 --> 00:27:53,060
leverages

524
00:27:49,810 --> 00:27:55,190
available ipv6 extensibility mechanisms

525
00:27:53,060 --> 00:27:57,950
a routing header the destination options

526
00:27:55,190 --> 00:28:01,220
header and it doesn't attempt to

527
00:27:57,950 --> 00:28:04,580
redefine fundamental ipv6 concepts like

528
00:28:01,220 --> 00:28:09,740
the ipv6 address semantics or acceptable

529
00:28:04,580 --> 00:28:22,340
use of a routing header thank you and we

530
00:28:09,740 --> 00:28:26,060
have any questions yes hi Lee Howard

531
00:28:22,340 --> 00:28:27,290
ipv4 global um thank you this is you

532
00:28:26,060 --> 00:28:29,240
know always interesting I'm not even

533
00:28:27,290 --> 00:28:30,710
subscribed to spring I'm one six man and

534
00:28:29,240 --> 00:28:33,890
that's been busy enough and just talking

535
00:28:30,710 --> 00:28:36,350
about the semantics here I'm not

536
00:28:33,890 --> 00:28:39,500
terribly worried about redefining

537
00:28:36,350 --> 00:28:42,679
certain semantics within ipv6 addressing

538
00:28:39,500 --> 00:28:45,020
because it seems to me that the last 64

539
00:28:42,680 --> 00:28:46,640
bit but you said well you we don't we

540
00:28:45,020 --> 00:28:49,370
know what a host is it defines an

541
00:28:46,640 --> 00:28:51,350
interface when I was in the IAB we kept

542
00:28:49,370 --> 00:28:53,510
grappling with what what is an endpoint

543
00:28:51,350 --> 00:28:56,209
what does that even mean defining a

544
00:28:53,510 --> 00:28:58,040
service as an endpoint that ship sailed

545
00:28:56,210 --> 00:29:00,140
we've already got that now when you get

546
00:28:58,040 --> 00:29:02,920
to slash 48 yeah sure that's a huge that

547
00:29:00,140 --> 00:29:07,220
that's a big deal um so you talked about

548
00:29:02,920 --> 00:29:09,050
the the the the implemented the proof of

549
00:29:07,220 --> 00:29:10,520
concepts that already exist you

550
00:29:09,050 --> 00:29:13,639
mentioned you specifically mention

551
00:29:10,520 --> 00:29:15,050
liquid telecoms DP DK is that the DP

552
00:29:13,640 --> 00:29:17,240
decay that I'm familiar with that I've

553
00:29:15,050 --> 00:29:18,860
used before or is that a proprietary no

554
00:29:17,240 --> 00:29:20,390
no it's it's the one that you've used

555
00:29:18,860 --> 00:29:22,909
before they've just implemented over it

556
00:29:20,390 --> 00:29:24,440
okay they're using the the well-known DP

557
00:29:22,910 --> 00:29:25,910
DK yeah they're plently doing stuff on

558
00:29:24,440 --> 00:29:28,190
top of that cool and I'll ask I'll ask

559
00:29:25,910 --> 00:29:36,110
Andrew for his particular details Thanks

560
00:29:28,190 --> 00:29:38,030
okay hi Ron Phil Bernard from Cisco so I

561
00:29:36,110 --> 00:29:39,860
had white question I've been following

562
00:29:38,030 --> 00:29:42,440
in the spring and the six man working

563
00:29:39,860 --> 00:29:45,740
groups and it seemed like they concluded

564
00:29:42,440 --> 00:29:48,310
with moving forward with the original SR

565
00:29:45,740 --> 00:29:51,110
v6 architecture and completing that work

566
00:29:48,310 --> 00:29:54,919
I guess where do you see the future for

567
00:29:51,110 --> 00:29:57,709
SR you know m6 in the IETF and and how

568
00:29:54,920 --> 00:30:00,320
that's gonna progress well we're clearly

569
00:29:57,710 --> 00:30:02,460
going to keep pushing it but the

570
00:30:00,320 --> 00:30:05,340
customers who've shown interest

571
00:30:02,460 --> 00:30:07,049
and we're hoping that the you know I

572
00:30:05,340 --> 00:30:10,408
can't speak for the spring chairs or the

573
00:30:07,049 --> 00:30:17,730
spring ad we're hoping that they will

574
00:30:10,409 --> 00:30:18,210
follow along okay thank you uh hi Rob

575
00:30:17,730 --> 00:30:20,759
Kronk

576
00:30:18,210 --> 00:30:24,539
I'm from Ball State University I kind of

577
00:30:20,759 --> 00:30:26,249
have two part questions my first I want

578
00:30:24,539 --> 00:30:29,639
to preface I really appreciated this

579
00:30:26,249 --> 00:30:33,629
presentation ipv6 is going to be huge

580
00:30:29,639 --> 00:30:38,309
especially in my lifetime but one thing

581
00:30:33,629 --> 00:30:42,449
I'm concern is you mentioned that s our

582
00:30:38,309 --> 00:30:44,789
v6 RS r v6 plus one of its biggest

583
00:30:42,450 --> 00:30:46,320
benefits is it's going to be compressing

584
00:30:44,789 --> 00:30:49,320
that routing header to a much more

585
00:30:46,320 --> 00:30:51,629
manageable size what happens when you

586
00:30:49,320 --> 00:30:53,700
implement that on a large-scale network

587
00:30:51,629 --> 00:30:56,340
and the routers are dealing with several

588
00:30:53,700 --> 00:30:59,549
packets with this compressed router head

589
00:30:56,340 --> 00:31:02,428
won't it still face the same issue that

590
00:30:59,549 --> 00:31:04,408
sr v6 has it's still going to slow down

591
00:31:02,429 --> 00:31:07,320
the network there's an engineering

592
00:31:04,409 --> 00:31:09,899
trade-off and the trade-off is between

593
00:31:07,320 --> 00:31:13,799
the size of the routing of the extension

594
00:31:09,899 --> 00:31:16,199
header chain and an extra lookup one

595
00:31:13,799 --> 00:31:21,090
thing you can do is put the entire

596
00:31:16,200 --> 00:31:22,919
instruction in the routing header if you

597
00:31:21,090 --> 00:31:25,529
do that you get a really large routing

598
00:31:22,919 --> 00:31:27,899
header chain and what you need to do at

599
00:31:25,529 --> 00:31:29,580
the beginning of every packet at the

600
00:31:27,899 --> 00:31:32,610
beginning of processing every packet is

601
00:31:29,580 --> 00:31:37,470
copy the packet from packet memory into

602
00:31:32,610 --> 00:31:41,129
ASIC memory so you can do it that's

603
00:31:37,470 --> 00:31:43,889
expensive another choice you can make is

604
00:31:41,129 --> 00:31:46,799
compress the routing header chain so

605
00:31:43,889 --> 00:31:51,658
what's in the routing header is an index

606
00:31:46,799 --> 00:31:55,619
to a fib entry now you have a short copy

607
00:31:51,659 --> 00:31:58,610
and another lookup to do as it turns out

608
00:31:55,619 --> 00:32:01,439
the short copy and another lookup is

609
00:31:58,610 --> 00:32:04,019
more friendly you're better off doing

610
00:32:01,440 --> 00:32:06,480
the short copy and another lookup and

611
00:32:04,019 --> 00:32:09,110
having a short routing header than

612
00:32:06,480 --> 00:32:13,030
having a routing header that goes out to

613
00:32:09,110 --> 00:32:15,290
hundreds of bytes long because

614
00:32:13,030 --> 00:32:17,840
there are two reasons you don't want a

615
00:32:15,290 --> 00:32:19,940
really rep long routing header chain one

616
00:32:17,840 --> 00:32:23,980
is the asic issue you don't want to have

617
00:32:19,940 --> 00:32:26,690
to copy lots and lots of bytes from

618
00:32:23,980 --> 00:32:29,920
buffer memory into ASIC memory to

619
00:32:26,690 --> 00:32:35,680
process the other is overhead in the

620
00:32:29,920 --> 00:32:38,990
Internet today packets tend to be short

621
00:32:35,680 --> 00:32:40,610
I think the you know one of you folks

622
00:32:38,990 --> 00:32:42,860
can probably give you a better number

623
00:32:40,610 --> 00:32:45,740
than me but the average size of a packet

624
00:32:42,860 --> 00:32:47,570
and the Internet today is 500 700 bytes

625
00:32:45,740 --> 00:32:50,450
something like that anybody have a

626
00:32:47,570 --> 00:32:52,310
better feel than than that one a world

627
00:32:50,450 --> 00:32:56,350
where of the average size of a packet is

628
00:32:52,310 --> 00:32:58,340
500 or 700 bytes a hundred bytes of

629
00:32:56,350 --> 00:32:59,230
extension header overhead is just

630
00:32:58,340 --> 00:33:04,610
unacceptable

631
00:32:59,230 --> 00:33:07,640
so much better compression thank you for

632
00:33:04,610 --> 00:33:11,149
that my second question is more so on

633
00:33:07,640 --> 00:33:12,590
the opposite side so one of the things

634
00:33:11,150 --> 00:33:14,900
I'm currently learning in my master's

635
00:33:12,590 --> 00:33:17,510
program is software-defined networking I

636
00:33:14,900 --> 00:33:19,220
don't have a too much of a grasp on it I

637
00:33:17,510 --> 00:33:22,010
don't want to it could be answered

638
00:33:19,220 --> 00:33:24,410
whatever but I know when the biggest

639
00:33:22,010 --> 00:33:26,450
benefits of it it allows for dynamic

640
00:33:24,410 --> 00:33:30,650
networking and one of the points you

641
00:33:26,450 --> 00:33:32,930
made was SRV six-plus effectively lets

642
00:33:30,650 --> 00:33:37,310
these nodes learn dynamically what they

643
00:33:32,930 --> 00:33:40,910
need to do in the network so what would

644
00:33:37,310 --> 00:33:42,980
you say SR v6 what implications does

645
00:33:40,910 --> 00:33:46,130
that have for a software-defined network

646
00:33:42,980 --> 00:33:48,370
in the next five to ten years okay we

647
00:33:46,130 --> 00:33:55,130
talked about something called an S fib

648
00:33:48,370 --> 00:33:57,649
the S fib translates SIDS to ipv6

649
00:33:55,130 --> 00:34:00,710
addresses and the actions associated

650
00:33:57,650 --> 00:34:02,870
with the SID right now we're

651
00:34:00,710 --> 00:34:06,080
distributing that that's it information

652
00:34:02,870 --> 00:34:10,759
in IGP you could distribute it from a

653
00:34:06,080 --> 00:34:12,440
controller just as well the service

654
00:34:10,760 --> 00:34:14,720
instructions - per path service

655
00:34:12,440 --> 00:34:17,570
instructions right now we're talking

656
00:34:14,719 --> 00:34:19,819
about distributing them with BGP because

657
00:34:17,570 --> 00:34:21,649
the machinery is there you can

658
00:34:19,820 --> 00:34:26,109
distribute it with a controller just as

659
00:34:21,649 --> 00:34:29,109
well services the ones that are executed

660
00:34:26,109 --> 00:34:31,299
three segments endpoint those will

661
00:34:29,109 --> 00:34:38,409
almost certainly be distributed from a

662
00:34:31,299 --> 00:34:40,210
controller so putting the smarts in in

663
00:34:38,409 --> 00:34:44,549
SIDS that are distributed from

664
00:34:40,210 --> 00:34:46,809
controllers to network processors that

665
00:34:44,549 --> 00:34:51,509
really facilitates software-defined

666
00:34:46,809 --> 00:34:51,509
networks yeah thank you

667
00:34:53,940 --> 00:34:58,539
hi

668
00:34:56,230 --> 00:35:01,539
are we reintroducing the need for state

669
00:34:58,539 --> 00:35:03,579
when each node would SRB six-plus I'm

670
00:35:01,539 --> 00:35:06,400
sorry the question are we reintroducing

671
00:35:03,579 --> 00:35:08,170
the need for state within each node ah

672
00:35:06,400 --> 00:35:12,849
the question good question this is a

673
00:35:08,170 --> 00:35:16,539
very insightful segment routing got rid

674
00:35:12,849 --> 00:35:18,549
of per path state there was no longer a

675
00:35:16,539 --> 00:35:23,829
need to signal per path State

676
00:35:18,549 --> 00:35:28,059
Information RSVP LDP in SRV six and SRV

677
00:35:23,829 --> 00:35:30,730
6 plus we still have no per pass state

678
00:35:28,059 --> 00:35:35,769
what we have is per segment state and

679
00:35:30,730 --> 00:35:41,079
lots of it it turns out the amount of

680
00:35:35,769 --> 00:35:44,078
per segment state maintained in SRV 6

681
00:35:41,079 --> 00:35:46,869
plus is almost identical to the amount

682
00:35:44,079 --> 00:35:51,910
of per segment state maintained in SR

683
00:35:46,869 --> 00:35:55,690
MPLS how do I know that because the

684
00:35:51,910 --> 00:35:58,839
state is signaled by the IGP exactly the

685
00:35:55,690 --> 00:36:03,400
way it used to be and the tlvs used a

686
00:35:58,839 --> 00:36:07,058
signal SR v6 + state or a subset of the

687
00:36:03,400 --> 00:36:10,839
tlvs used to signal SR MPLS State in

688
00:36:07,059 --> 00:36:14,230
fact when I wrote the is is extensions

689
00:36:10,839 --> 00:36:17,410
document for SR v6 + I basically did it

690
00:36:14,230 --> 00:36:19,569
by cloning the SR MPLS document changing

691
00:36:17,410 --> 00:36:22,598
the names of a few tlvs and deleting a

692
00:36:19,569 --> 00:36:25,808
few others so yes there is per segment

693
00:36:22,599 --> 00:36:28,059
state no there is no per path State got

694
00:36:25,809 --> 00:36:31,599
it so it could be a hybrid right I could

695
00:36:28,059 --> 00:36:33,609
have a very dumb middle right in at the

696
00:36:31,599 --> 00:36:36,069
edges square the ingress and egress I

697
00:36:33,609 --> 00:36:38,440
could have note that basically

698
00:36:36,069 --> 00:36:39,870
understand the state nodes understand

699
00:36:38,440 --> 00:36:42,660
state

700
00:36:39,870 --> 00:36:44,310
well if a note understands the state for

701
00:36:42,660 --> 00:36:47,370
the segment's in which it participates

702
00:36:44,310 --> 00:36:49,200
it does not understand what paths pass

703
00:36:47,370 --> 00:36:51,600
through it it has no idea what paths

704
00:36:49,200 --> 00:36:55,470
pass through it and this is true for SR

705
00:36:51,600 --> 00:36:57,860
MPLS as our v6 and that's our v6 + ok

706
00:36:55,470 --> 00:36:57,859
thank you

707
00:36:58,970 --> 00:37:06,569
I'm trying to wrap my head around what

708
00:37:02,490 --> 00:37:08,299
it'll be like to diagnose behaviors in a

709
00:37:06,570 --> 00:37:12,600
network like this do you have any

710
00:37:08,300 --> 00:37:15,900
comments on that okay and in

711
00:37:12,600 --> 00:37:18,420
particularly the two schemes like what

712
00:37:15,900 --> 00:37:22,110
will be explicitly visible in a packet

713
00:37:18,420 --> 00:37:26,730
that I source versus okay the questions

714
00:37:22,110 --> 00:37:28,440
are how to OAM work an SR v6 + O am work

715
00:37:26,730 --> 00:37:31,710
splitting pretty much the way it does in

716
00:37:28,440 --> 00:37:34,490
IP and the reason why is we haven't

717
00:37:31,710 --> 00:37:37,020
changed the semantics of an ipv6 address

718
00:37:34,490 --> 00:37:41,250
traceroute still looks like traceroute

719
00:37:37,020 --> 00:37:44,370
now granted when you look at the

720
00:37:41,250 --> 00:37:49,110
original packet and the traceroute you

721
00:37:44,370 --> 00:37:50,970
will see a you know extension headers

722
00:37:49,110 --> 00:37:53,660
just the way you wouldn't any other ipv6

723
00:37:50,970 --> 00:37:58,980
traceroute pain still works like ping

724
00:37:53,660 --> 00:38:05,000
now an SR v6 you need new OEM mechanisms

725
00:37:58,980 --> 00:38:08,280
if you send an ICMP echo request to

726
00:38:05,000 --> 00:38:10,860
128-bit entity that is a CID and not an

727
00:38:08,280 --> 00:38:13,350
ipv6 address you won't get an echo reply

728
00:38:10,860 --> 00:38:18,170
back you'll get an ICMP parameter

729
00:38:13,350 --> 00:38:20,370
problem message back so there s our v6

730
00:38:18,170 --> 00:38:22,680
compensates by creating new OEM

731
00:38:20,370 --> 00:38:26,940
mechanisms these just don't need it and

732
00:38:22,680 --> 00:38:28,529
that's our v6 + it looks like is Ivan IP

733
00:38:26,940 --> 00:38:30,570
and IP encapsulation

734
00:38:28,530 --> 00:38:33,770
but that isn't there a trade-off there

735
00:38:30,570 --> 00:38:38,460
right these s fibs with which our local

736
00:38:33,770 --> 00:38:41,640
identifiers right so you know the

737
00:38:38,460 --> 00:38:45,900
context of what's gonna occur to my

738
00:38:41,640 --> 00:38:47,879
packet is not totally and encoded in the

739
00:38:45,900 --> 00:38:50,490
packet at source right I well trace we

740
00:38:47,880 --> 00:38:53,670
trace route this will show you what

741
00:38:50,490 --> 00:38:56,189
happened at every hop it will show you

742
00:38:53,670 --> 00:38:58,260
which Sid translated to which IP address

743
00:38:56,190 --> 00:39:00,869
but yes there is a level of indirection

744
00:38:58,260 --> 00:39:10,619
and with every level of indirection a

745
00:39:00,869 --> 00:39:15,930
new level of co2 level of complexity any

746
00:39:10,619 --> 00:39:17,910
more questions well thank you very much

747
00:39:15,930 --> 00:39:20,730
if anybody wants to corner me with Oh

748
00:39:17,910 --> 00:39:22,740
one more coming no not one more coming

749
00:39:20,730 --> 00:39:31,180
okay well thank you very much

750
00:39:22,740 --> 00:39:31,180
[Applause]

751
00:39:36,180 --> 00:39:38,240
you

