1
00:00:09,990 --> 00:00:15,820
hello everyone

2
00:00:13,210 --> 00:00:19,150
my name is Patrick Pacheco entertainer

3
00:00:15,820 --> 00:00:21,460
and I work with seasoned Eclipse on

4
00:00:19,150 --> 00:00:23,560
project which is called not resolver and

5
00:00:21,460 --> 00:00:25,720
that's new implementation of DNS

6
00:00:23,560 --> 00:00:27,939
resolver and today we will have a look

7
00:00:25,720 --> 00:00:30,640
how we benchmark the software and how we

8
00:00:27,939 --> 00:00:34,660
can make the DNS resolver benchmarking

9
00:00:30,640 --> 00:00:38,370
more realistic let me see if I can

10
00:00:34,660 --> 00:00:44,679
operate clicker apparently I can't oh

11
00:00:38,370 --> 00:00:46,629
okay that's too far great ok motivation

12
00:00:44,680 --> 00:00:49,450
for benchmarking is very clear if you

13
00:00:46,630 --> 00:00:51,430
are operating DNS resolver for a

14
00:00:49,450 --> 00:00:54,220
significant number of clients it costs

15
00:00:51,430 --> 00:00:55,989
real money obviously optimization can

16
00:00:54,220 --> 00:01:00,670
translate to cost savings

17
00:00:55,989 --> 00:01:02,620
that's easy one drink okay this will be

18
00:01:00,670 --> 00:01:07,119
fun because the picture looks like

19
00:01:02,620 --> 00:01:09,550
graphics on a slide broke well the most

20
00:01:07,119 --> 00:01:12,220
important thing to remember for this

21
00:01:09,550 --> 00:01:16,119
talk and for any DNS benchmarking you

22
00:01:12,220 --> 00:01:19,330
ever do is that the DNS query can be

23
00:01:16,119 --> 00:01:23,020
resolved in two different processes in

24
00:01:19,330 --> 00:01:25,750
the first case it is so-called DNS cache

25
00:01:23,020 --> 00:01:27,729
hit and it practically means that the

26
00:01:25,750 --> 00:01:30,189
DNS resolver has all the data in its

27
00:01:27,729 --> 00:01:31,900
local cache and just pulls out the

28
00:01:30,189 --> 00:01:33,939
answer from the cache and senses back

29
00:01:31,900 --> 00:01:37,090
sends it back to the client

30
00:01:33,939 --> 00:01:39,699
that's super fast the other option is

31
00:01:37,090 --> 00:01:41,979
that the DNS resolver doesn't have all

32
00:01:39,700 --> 00:01:45,070
the data and has to go to the internet

33
00:01:41,979 --> 00:01:47,049
which is orders of magnitude slower so

34
00:01:45,070 --> 00:01:51,820
keep in mind this difference that it is

35
00:01:47,049 --> 00:01:54,640
super important now we can have a look

36
00:01:51,820 --> 00:01:56,919
at a very classical benchmarking method

37
00:01:54,640 --> 00:02:00,310
which is implemented in tool called

38
00:01:56,920 --> 00:02:02,740
raspberry and basically the tool is

39
00:02:00,310 --> 00:02:05,409
reading list of queries from a text file

40
00:02:02,740 --> 00:02:08,100
and sending Curie's to the DNS resolver

41
00:02:05,409 --> 00:02:11,799
under test at ever-increasing speed

42
00:02:08,100 --> 00:02:15,400
QPS is acronym for a queue is per second

43
00:02:11,799 --> 00:02:17,019
and the rest part starts at with a low

44
00:02:15,400 --> 00:02:20,019
number of trees per second and is

45
00:02:17,019 --> 00:02:22,180
increasing the speed and at the same

46
00:02:20,019 --> 00:02:26,320
time monitoring responses from the DNS

47
00:02:22,180 --> 00:02:26,980
resolver it if there is over is able to

48
00:02:26,320 --> 00:02:28,659
respond to

49
00:02:26,980 --> 00:02:30,869
almost all the queries there is part of

50
00:02:28,659 --> 00:02:33,280
goes on and just increases the load

51
00:02:30,870 --> 00:02:35,530
until it reaches a point where the

52
00:02:33,280 --> 00:02:37,810
resolver is not able to respond to all

53
00:02:35,530 --> 00:02:39,879
of the queries and at that point the

54
00:02:37,810 --> 00:02:43,299
rest parish will declare a victory again

55
00:02:39,879 --> 00:02:45,220
over the DNS resolver and say okay the

56
00:02:43,299 --> 00:02:48,519
maximum number of queries per second

57
00:02:45,220 --> 00:02:51,599
this resolver can handle is X so it will

58
00:02:48,519 --> 00:02:54,819
give you basically one number that's it

59
00:02:51,599 --> 00:02:58,390
the problem is that this is not really

60
00:02:54,819 --> 00:03:00,970
realistic because as I've mentioned on

61
00:02:58,390 --> 00:03:03,129
the previous slide the input for the

62
00:03:00,970 --> 00:03:05,440
rest preface a text file and it is just

63
00:03:03,129 --> 00:03:08,260
going from top down through the text

64
00:03:05,440 --> 00:03:10,090
file and it is completely ignoring any

65
00:03:08,260 --> 00:03:13,209
timing information which was in the

66
00:03:10,090 --> 00:03:15,250
original traffic and again there is a

67
00:03:13,209 --> 00:03:17,799
super important difference between cache

68
00:03:15,250 --> 00:03:22,209
me cache miss and cache hit in the DNS

69
00:03:17,799 --> 00:03:24,989
resolver and by ignoring the DNS DTLS we

70
00:03:22,209 --> 00:03:27,220
completely mangle the cache iterate and

71
00:03:24,989 --> 00:03:29,739
thus we completely mangle the

72
00:03:27,220 --> 00:03:32,950
performance characteristics of that

73
00:03:29,739 --> 00:03:35,349
given DNS resolver that's the most

74
00:03:32,950 --> 00:03:38,530
important problem second problem is that

75
00:03:35,349 --> 00:03:41,138
in practice you never see ramped up

76
00:03:38,530 --> 00:03:42,910
traffic because if you restart your DNS

77
00:03:41,139 --> 00:03:44,769
resolver clients don't care they will

78
00:03:42,910 --> 00:03:45,489
just shoot the DNS queries at it and

79
00:03:44,769 --> 00:03:47,579
that's it

80
00:03:45,489 --> 00:03:52,510
so the ramp up is not realistic at all

81
00:03:47,579 --> 00:03:55,299
so we can summarize that and say that

82
00:03:52,510 --> 00:03:57,340
the rest pref is typically over focusing

83
00:03:55,299 --> 00:03:59,889
on the QPS and the number of queries per

84
00:03:57,340 --> 00:04:03,940
second but that's not really what you

85
00:03:59,889 --> 00:04:06,310
need right if you are operating serious

86
00:04:03,940 --> 00:04:08,349
network you need the information how

87
00:04:06,310 --> 00:04:10,359
many clients the resolver can handle and

88
00:04:08,349 --> 00:04:12,369
not the number of queries per second

89
00:04:10,359 --> 00:04:15,010
otherwise you have to somehow magically

90
00:04:12,370 --> 00:04:16,959
convert your number of trees per second

91
00:04:15,010 --> 00:04:20,469
to number of your clients in your

92
00:04:16,959 --> 00:04:24,910
population obviously this conversion is

93
00:04:20,470 --> 00:04:26,710
not in a general equation right because

94
00:04:24,910 --> 00:04:28,960
every client is behaving little bit

95
00:04:26,710 --> 00:04:31,599
differently when to IOT device we have

96
00:04:28,960 --> 00:04:35,380
completely different DNS characteristics

97
00:04:31,599 --> 00:04:37,690
than mail server so the answer how many

98
00:04:35,380 --> 00:04:40,270
clients the resolver can handle is not

99
00:04:37,690 --> 00:04:41,100
going to generalize for all the

100
00:04:40,270 --> 00:04:43,020
populations of

101
00:04:41,100 --> 00:04:47,880
clients and all that works keep that in

102
00:04:43,020 --> 00:04:50,070
mind for more realistic benchmarking we

103
00:04:47,880 --> 00:04:53,670
had these ethnic labs developed tool

104
00:04:50,070 --> 00:04:57,780
called DNS shotgun it's based on awesome

105
00:04:53,670 --> 00:05:03,720
library by DNS orc and most importantly

106
00:04:57,780 --> 00:05:06,900
for you it's open source ok principle of

107
00:05:03,720 --> 00:05:09,620
the tool is that it ingests your real

108
00:05:06,900 --> 00:05:14,460
traffic capture and then it generates

109
00:05:09,620 --> 00:05:17,250
load based on your own real traffic and

110
00:05:14,460 --> 00:05:19,890
then of course it was pretty charts so

111
00:05:17,250 --> 00:05:23,010
the data preparation is basically taking

112
00:05:19,890 --> 00:05:26,070
your original pcap preferably taken from

113
00:05:23,010 --> 00:05:28,980
the real operating DNS resolver used by

114
00:05:26,070 --> 00:05:30,030
the real clients and then it will

115
00:05:28,980 --> 00:05:32,880
progenitor

116
00:05:30,030 --> 00:05:35,219
bulks of data for a different number of

117
00:05:32,880 --> 00:05:37,740
simulated clients so it will generate

118
00:05:35,220 --> 00:05:39,690
new pcap with hundred thousand clients

119
00:05:37,740 --> 00:05:41,550
in it and the second pickup with two

120
00:05:39,690 --> 00:05:45,020
hundred thousand clients in it and so on

121
00:05:41,550 --> 00:05:47,430
and so on as as many clients as you want

122
00:05:45,020 --> 00:05:50,520
now we have the peak apps which is

123
00:05:47,430 --> 00:05:54,630
simulated clients prepared and we can

124
00:05:50,520 --> 00:05:57,060
start the actual test so now we take the

125
00:05:54,630 --> 00:06:00,050
pickup and reply to the resolver and

126
00:05:57,060 --> 00:06:03,510
most importantly we keep the timing

127
00:06:00,050 --> 00:06:05,790
through the test so if the one

128
00:06:03,510 --> 00:06:08,159
particular client was sending one query

129
00:06:05,790 --> 00:06:10,680
and then had one second delay and send

130
00:06:08,160 --> 00:06:13,380
different query because the TTL was one

131
00:06:10,680 --> 00:06:15,600
second for example the tool will keep

132
00:06:13,380 --> 00:06:19,020
the timing so the cache we trade will be

133
00:06:15,600 --> 00:06:23,850
realistic or much more much closer to

134
00:06:19,020 --> 00:06:27,240
realistic I should say this is the

135
00:06:23,850 --> 00:06:29,730
basics the basic process is very similar

136
00:06:27,240 --> 00:06:31,080
to a sprayer we start with a number of

137
00:06:29,730 --> 00:06:34,260
clients let's say hundred thousand

138
00:06:31,080 --> 00:06:36,479
clients then we applied the traffic to

139
00:06:34,260 --> 00:06:38,700
the DNS is over antoinette responses

140
00:06:36,480 --> 00:06:40,860
that's the same if the resolver is

141
00:06:38,700 --> 00:06:43,289
keeping up and answering almost all the

142
00:06:40,860 --> 00:06:46,230
queries we can increase the number of

143
00:06:43,290 --> 00:06:48,180
clients to the reply again again check

144
00:06:46,230 --> 00:06:51,390
that the resolver is keeping up and so

145
00:06:48,180 --> 00:06:53,490
on and so on at the point where the

146
00:06:51,390 --> 00:06:54,750
resolver is not able to answer all of

147
00:06:53,490 --> 00:06:56,910
the queries we

148
00:06:54,750 --> 00:06:58,980
can declare the victory and say okay

149
00:06:56,910 --> 00:07:04,200
there is over can handle this maximum

150
00:06:58,980 --> 00:07:06,200
number of clients and that's it okay now

151
00:07:04,200 --> 00:07:09,150
we have a serious problem

152
00:07:06,200 --> 00:07:11,820
can we please get the presentation from

153
00:07:09,150 --> 00:07:13,530
PDF I sent you this PowerPoint is

154
00:07:11,820 --> 00:07:19,050
totally broken and it doesn't have the

155
00:07:13,530 --> 00:07:24,719
charts in it so it's useless eventually

156
00:07:19,050 --> 00:07:26,130
you will see a pretty chart every line

157
00:07:24,720 --> 00:07:28,620
on the chart describes a different

158
00:07:26,130 --> 00:07:30,120
client population so we have like one

159
00:07:28,620 --> 00:07:32,760
measurement for a hundred thousand

160
00:07:30,120 --> 00:07:35,430
clients second measurement from to two

161
00:07:32,760 --> 00:07:39,150
hundred thousand clients and so on and

162
00:07:35,430 --> 00:07:42,060
so on and on the x-axis is time we start

163
00:07:39,150 --> 00:07:44,549
with empty cash in time zero and then as

164
00:07:42,060 --> 00:07:48,060
the time goes on during the test the

165
00:07:44,550 --> 00:07:50,250
resolver is building its cash and so it

166
00:07:48,060 --> 00:07:52,169
it's performance is actually improving

167
00:07:50,250 --> 00:07:57,570
over time because again the cash hit

168
00:07:52,169 --> 00:08:01,890
rate is the most important parameter let

169
00:07:57,570 --> 00:08:09,560
me see do we have some hope of getting

170
00:08:01,890 --> 00:08:12,360
the PDF okay working on it the tool

171
00:08:09,560 --> 00:08:14,669
gives you an answer which is not

172
00:08:12,360 --> 00:08:17,310
generally valid for everyone in this

173
00:08:14,669 --> 00:08:20,549
room or not even for every deployment of

174
00:08:17,310 --> 00:08:22,560
mine because the performance very much

175
00:08:20,550 --> 00:08:24,780
depends on the particle configuration of

176
00:08:22,560 --> 00:08:27,000
the resolver on the hardware you use on

177
00:08:24,780 --> 00:08:30,179
the version of network drivers you

178
00:08:27,000 --> 00:08:32,880
actually use version of Linux kernel the

179
00:08:30,180 --> 00:08:36,719
client population basically everything

180
00:08:32,880 --> 00:08:39,299
so the most important takeaway is don't

181
00:08:36,719 --> 00:08:42,210
forget about the Khajiit rate and the

182
00:08:39,299 --> 00:08:44,310
second most important takeaway is always

183
00:08:42,210 --> 00:08:46,890
measure it yourself because whatever I

184
00:08:44,310 --> 00:08:51,119
tell you will not probably apply to your

185
00:08:46,890 --> 00:08:54,120
situation so really get it to get your

186
00:08:51,120 --> 00:08:56,670
data from your real traffic and try to

187
00:08:54,120 --> 00:08:58,290
measure it yourself because you will

188
00:08:56,670 --> 00:09:01,079
always get different results with

189
00:08:58,290 --> 00:09:03,680
different configurations and client

190
00:09:01,080 --> 00:09:03,680
populations

191
00:09:06,040 --> 00:09:11,360
four minutes left

192
00:09:07,940 --> 00:09:17,590
well does it include some pictures or

193
00:09:11,360 --> 00:09:19,990
not yeah so this is the take away

194
00:09:17,590 --> 00:09:23,390
because we don't have the pictures yet

195
00:09:19,990 --> 00:09:24,770
we'll jump to conclusions and then we

196
00:09:23,390 --> 00:09:28,189
will get back to pictures if we

197
00:09:24,770 --> 00:09:31,460
eventually get them so the tool is open

198
00:09:28,190 --> 00:09:33,820
source there is an URL oh great thank

199
00:09:31,460 --> 00:09:33,820
you much

200
00:09:34,640 --> 00:09:43,819
oh yeah we now have different version of

201
00:09:42,440 --> 00:09:49,250
the presentation but again without

202
00:09:43,820 --> 00:09:55,280
pictures it's not really useful anyway I

203
00:09:49,250 --> 00:09:57,500
will jump to the end and you'll see the

204
00:09:55,280 --> 00:09:59,870
tool is open source so you can have a

205
00:09:57,500 --> 00:10:03,560
look yourself the limitation right now

206
00:09:59,870 --> 00:10:06,170
is that it's doing only UDP if you are

207
00:10:03,560 --> 00:10:08,930
interested in benchmarking TCP Tiaras or

208
00:10:06,170 --> 00:10:11,000
other fancy protocols please talk to me

209
00:10:08,930 --> 00:10:17,229
we are looking for sponsors to make it

210
00:10:11,000 --> 00:10:20,900
happen and again I repeat please do not

211
00:10:17,230 --> 00:10:24,590
generalize the results you see in anyone

212
00:10:20,900 --> 00:10:27,110
elses slides or results you really

213
00:10:24,590 --> 00:10:28,790
should measure performance yourself

214
00:10:27,110 --> 00:10:32,390
because it will be different for you

215
00:10:28,790 --> 00:10:35,420
trust me if you feel that this talk is

216
00:10:32,390 --> 00:10:39,410
incomplete somehow you can have a look

217
00:10:35,420 --> 00:10:42,260
and in ripe 17:9 archives there is a

218
00:10:39,410 --> 00:10:44,300
video of longer version of this talk

219
00:10:42,260 --> 00:10:47,210
with actually pretty pictures and

220
00:10:44,300 --> 00:10:49,650
description of them so look it up and

221
00:10:47,210 --> 00:10:54,480
thank you for attention

222
00:10:49,650 --> 00:10:57,250
[Applause]

223
00:10:54,480 --> 00:10:59,500
if there happened to be any questions

224
00:10:57,250 --> 00:11:01,920
even though we didn't you didn't see

225
00:10:59,500 --> 00:11:06,700
anything I'm happy to take them

226
00:11:01,920 --> 00:11:09,370
hi rubber story USCIS I how do you

227
00:11:06,700 --> 00:11:11,350
generate additional clients when you

228
00:11:09,370 --> 00:11:13,350
need a load higher than the number of

229
00:11:11,350 --> 00:11:16,510
clients you have in your current pcaps

230
00:11:13,350 --> 00:11:21,750
yeah that's for the long version of the

231
00:11:16,510 --> 00:11:24,250
talk but the idea is that you you can

232
00:11:21,750 --> 00:11:26,260
okay the basic idea is that you can

233
00:11:24,250 --> 00:11:29,320
capture the traffic for a longer time so

234
00:11:26,260 --> 00:11:29,740
you keep recording your traffic for one

235
00:11:29,320 --> 00:11:32,860
day

236
00:11:29,740 --> 00:11:36,130
and then you can compress the pcap to

237
00:11:32,860 --> 00:11:38,529
like 10 minutes so you basically take

238
00:11:36,130 --> 00:11:41,829
first ten minutes and that's n clients

239
00:11:38,529 --> 00:11:44,889
you have in your recap and then you take

240
00:11:41,829 --> 00:11:46,870
second ten minute window and run it in

241
00:11:44,889 --> 00:11:48,490
parallel with the first ten minute

242
00:11:46,870 --> 00:11:49,930
window and then you increase the number

243
00:11:48,490 --> 00:11:52,889
of clients of that that's the basic

244
00:11:49,930 --> 00:11:56,089
principle there is much more to that

245
00:11:52,889 --> 00:12:03,259
okay that's it thank you

246
00:11:56,090 --> 00:12:03,259
[Applause]

247
00:12:08,100 --> 00:12:10,160
you

