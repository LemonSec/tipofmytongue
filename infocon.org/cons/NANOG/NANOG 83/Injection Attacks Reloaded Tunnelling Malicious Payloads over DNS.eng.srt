1
00:00:00,000 --> 00:00:05,759
[Music]

2
00:00:05,759 --> 00:00:07,680
welcome to injection attacks reload

3
00:00:07,680 --> 00:00:10,000
tunneling malicious payloads over dns

4
00:00:10,000 --> 00:00:11,679
i'm philippe eitner and i'll present to

5
00:00:11,679 --> 00:00:14,000
you today our paper which was originally

6
00:00:14,000 --> 00:00:15,440
published at the using security

7
00:00:15,440 --> 00:00:17,520
conference this year

8
00:00:17,520 --> 00:00:19,840
so our general idea

9
00:00:19,840 --> 00:00:21,840
or the general motivation for the paper

10
00:00:21,840 --> 00:00:22,640
was

11
00:00:22,640 --> 00:00:25,199
that the general internet principle is

12
00:00:25,199 --> 00:00:27,199
to be strict when sending and tolerant

13
00:00:27,199 --> 00:00:28,560
when receiving

14
00:00:28,560 --> 00:00:31,760
and dns domain name system generally

15
00:00:31,760 --> 00:00:34,399
follows this principle by meaning that

16
00:00:34,399 --> 00:00:36,160
the validation of anything like the

17
00:00:36,160 --> 00:00:38,640
record format etc

18
00:00:38,640 --> 00:00:41,680
um must be handled by the endpoints

19
00:00:41,680 --> 00:00:44,239
ied applications and if you have like a

20
00:00:44,239 --> 00:00:46,239
new record type the resolvers don't have

21
00:00:46,239 --> 00:00:48,079
to understand that

22
00:00:48,079 --> 00:00:50,640
and so our question for the paper was

23
00:00:50,640 --> 00:00:52,879
if we could abuse this dns transparency

24
00:00:52,879 --> 00:00:55,120
principle for attacks like typical

25
00:00:55,120 --> 00:00:56,640
injection attacks

26
00:00:56,640 --> 00:00:58,960
like the sql injections you you probably

27
00:00:58,960 --> 00:01:00,399
know from like

28
00:01:00,399 --> 00:01:02,559
here's a here's a comic but yeah you

29
00:01:02,559 --> 00:01:06,158
hopefully know sql injections

30
00:01:06,240 --> 00:01:07,119
um

31
00:01:07,119 --> 00:01:09,520
so here's what a typical dns resolution

32
00:01:09,520 --> 00:01:10,960
chain looks like

33
00:01:10,960 --> 00:01:12,880
first we have like an application which

34
00:01:12,880 --> 00:01:14,479
triggers a query because it wants to

35
00:01:14,479 --> 00:01:16,479
know something from the dns like it

36
00:01:16,479 --> 00:01:18,640
wants to know the address of a server

37
00:01:18,640 --> 00:01:20,320
but you can also start as things in the

38
00:01:20,320 --> 00:01:23,360
dns for example like the spf policies

39
00:01:23,360 --> 00:01:25,280
etc

40
00:01:25,280 --> 00:01:27,360
then this query gets forwarded to the

41
00:01:27,360 --> 00:01:29,759
name server we don't really care for the

42
00:01:29,759 --> 00:01:32,079
process where it comes to that

43
00:01:32,079 --> 00:01:33,680
and the name server then provides the

44
00:01:33,680 --> 00:01:35,119
record in the

45
00:01:35,119 --> 00:01:37,680
wire format of the dns

46
00:01:37,680 --> 00:01:40,240
and essentially this can contain any

47
00:01:40,240 --> 00:01:41,439
value so

48
00:01:41,439 --> 00:01:43,759
in our case we essentially assume that

49
00:01:43,759 --> 00:01:45,600
the name server is the attacker so

50
00:01:45,600 --> 00:01:47,439
anything can happen here this then gets

51
00:01:47,439 --> 00:01:49,360
forwarded to the resolver

52
00:01:49,360 --> 00:01:51,119
and the resolver trusts the data

53
00:01:51,119 --> 00:01:53,119
transparently essentially it just looks

54
00:01:53,119 --> 00:01:54,479
if the

55
00:01:54,479 --> 00:01:55,759
response

56
00:01:55,759 --> 00:01:57,759
is to the to the query which was sent

57
00:01:57,759 --> 00:01:59,840
but it doesn't do anything else

58
00:01:59,840 --> 00:02:01,680
and after that the

59
00:02:01,680 --> 00:02:03,680
responses are generally decoded by the

60
00:02:03,680 --> 00:02:06,240
stab resolver or another dns library

61
00:02:06,240 --> 00:02:08,399
which translates the wire format into

62
00:02:08,399 --> 00:02:10,318
the textual form so the application can

63
00:02:10,318 --> 00:02:12,400
handle it sometimes they also have more

64
00:02:12,400 --> 00:02:14,480
complicated apis but it doesn't really

65
00:02:14,480 --> 00:02:15,440
matter

66
00:02:15,440 --> 00:02:17,280
and in the end the application handles

67
00:02:17,280 --> 00:02:19,520
the data

68
00:02:19,520 --> 00:02:22,319
so now what is the problem and we will

69
00:02:22,319 --> 00:02:24,560
first look at the unanswered servers as

70
00:02:24,560 --> 00:02:26,720
i said reservists should and do

71
00:02:26,720 --> 00:02:29,440
typically handle data transparently

72
00:02:29,440 --> 00:02:31,760
and the problem here is kind of that

73
00:02:31,760 --> 00:02:33,840
there are two formats for domain names

74
00:02:33,840 --> 00:02:34,959
essentially

75
00:02:34,959 --> 00:02:36,959
you probably know the text format which

76
00:02:36,959 --> 00:02:40,080
is just like google.com maybe the

77
00:02:40,080 --> 00:02:43,200
leading or the dot in the end whatever

78
00:02:43,200 --> 00:02:46,080
um but there's also the wire format and

79
00:02:46,080 --> 00:02:47,680
in the wire format it's actually

80
00:02:47,680 --> 00:02:49,200
different than in the text format where

81
00:02:49,200 --> 00:02:50,959
you're in the text format you have like

82
00:02:50,959 --> 00:02:52,720
strings and then you have the dots and

83
00:02:52,720 --> 00:02:55,200
these dots separate labels

84
00:02:55,200 --> 00:02:57,200
but in the wire format you have a list

85
00:02:57,200 --> 00:02:59,040
of labels and the length of each label

86
00:02:59,040 --> 00:03:01,360
is prepended to the label

87
00:03:01,360 --> 00:03:03,280
so in this example here for example in

88
00:03:03,280 --> 00:03:04,879
the above

89
00:03:04,879 --> 00:03:07,760
one we have google which has like the

90
00:03:07,760 --> 00:03:10,720
label six because google is six bytes

91
00:03:10,720 --> 00:03:13,599
then google and then label three because

92
00:03:13,599 --> 00:03:15,680
com is three bytes and then zero because

93
00:03:15,680 --> 00:03:19,040
the list ends there and so the question

94
00:03:19,040 --> 00:03:21,599
now is essentially

95
00:03:21,599 --> 00:03:23,280
what happens if we do weird stuff with

96
00:03:23,280 --> 00:03:25,360
these labels for example you can put

97
00:03:25,360 --> 00:03:27,440
zero bytes in the labels and some

98
00:03:27,440 --> 00:03:29,280
applications might not be able to handle

99
00:03:29,280 --> 00:03:30,159
that

100
00:03:30,159 --> 00:03:32,080
and you can also put period signs inside

101
00:03:32,080 --> 00:03:34,480
labels which is a special weird case for

102
00:03:34,480 --> 00:03:36,560
dns because as we said in the wire

103
00:03:36,560 --> 00:03:38,879
format the dots which in detects from

104
00:03:38,879 --> 00:03:41,360
separate labels in the wire form you can

105
00:03:41,360 --> 00:03:43,280
actually have periods or dots inside

106
00:03:43,280 --> 00:03:46,239
labels which would result in this weird

107
00:03:46,239 --> 00:03:47,920
example in the

108
00:03:47,920 --> 00:03:48,720
uh

109
00:03:48,720 --> 00:03:51,200
in the bottom where you have only one

110
00:03:51,200 --> 00:03:52,560
label which is

111
00:03:52,560 --> 00:03:54,480
the have a chest length 10 and which

112
00:03:54,480 --> 00:03:56,799
says google.com and not

113
00:03:56,799 --> 00:04:00,000
not like two labels google.com

114
00:04:00,000 --> 00:04:02,560
so what can you do with this uh

115
00:04:02,560 --> 00:04:04,239
essentially we

116
00:04:04,239 --> 00:04:06,319
constructed an attack which is really

117
00:04:06,319 --> 00:04:07,360
simple

118
00:04:07,360 --> 00:04:08,720
when excuse

119
00:04:08,720 --> 00:04:12,000
exploits essentially the zero byte where

120
00:04:12,000 --> 00:04:13,680
we have a domain name which is

121
00:04:13,680 --> 00:04:15,360
controlled by the attacker

122
00:04:15,360 --> 00:04:17,199
because there are that's because it's

123
00:04:17,199 --> 00:04:18,959
called attacker.com

124
00:04:18,959 --> 00:04:22,160
and this c names to domain victim.com

125
00:04:22,160 --> 00:04:24,080
essentially a cname is just an alias so

126
00:04:24,080 --> 00:04:25,759
you just forward it to another domain

127
00:04:25,759 --> 00:04:28,160
that's not really the point um but then

128
00:04:28,160 --> 00:04:30,160
after victim.com we essentially add a

129
00:04:30,160 --> 00:04:31,919
zero byte and then we add dot

130
00:04:31,919 --> 00:04:33,440
attacker.com

131
00:04:33,440 --> 00:04:35,280
which makes this a subdomain of

132
00:04:35,280 --> 00:04:37,919
attacker.com and as i said in the dns

133
00:04:37,919 --> 00:04:40,240
format this is a totally valid domain

134
00:04:40,240 --> 00:04:42,639
name so it's just like

135
00:04:42,639 --> 00:04:44,400
this is essentially a label which is

136
00:04:44,400 --> 00:04:46,320
called com and then there's a zero byte

137
00:04:46,320 --> 00:04:47,840
and then there's the next label which is

138
00:04:47,840 --> 00:04:49,440
attacker

139
00:04:49,440 --> 00:04:50,560
um

140
00:04:50,560 --> 00:04:52,800
and then we have this domain again

141
00:04:52,800 --> 00:04:53,919
which

142
00:04:53,919 --> 00:04:56,240
since it's a subdomain of attacker.com

143
00:04:56,240 --> 00:04:58,160
the attacker can specify its ib address

144
00:04:58,160 --> 00:05:00,720
in this case it's 666 because it's the

145
00:05:00,720 --> 00:05:02,160
attacker

146
00:05:02,160 --> 00:05:04,800
and our attack now works by essentially

147
00:05:04,800 --> 00:05:07,199
we are querying for attacker.com making

148
00:05:07,199 --> 00:05:10,240
the resolver processes chain and then we

149
00:05:10,240 --> 00:05:12,240
are asking for victim.com

150
00:05:12,240 --> 00:05:14,400
and maybe the resolver essentially

151
00:05:14,400 --> 00:05:16,400
misinterpreted the zero byte for a

152
00:05:16,400 --> 00:05:18,320
string terminator because

153
00:05:18,320 --> 00:05:21,600
in c zero bytes are string germinators

154
00:05:21,600 --> 00:05:23,759
and if it is vulnerable then it will

155
00:05:23,759 --> 00:05:26,080
answer with that victim.com has the ip

156
00:05:26,080 --> 00:05:28,880
address 666 even though that this domain

157
00:05:28,880 --> 00:05:30,560
has nothing to do with victim.com

158
00:05:30,560 --> 00:05:33,440
essentially in dns terms at least

159
00:05:33,440 --> 00:05:35,759
and so now you would say okay but this

160
00:05:35,759 --> 00:05:38,800
will never work right and you're kind of

161
00:05:38,800 --> 00:05:39,600
right

162
00:05:39,600 --> 00:05:40,960
um

163
00:05:40,960 --> 00:05:42,720
we tested like the the well-known

164
00:05:42,720 --> 00:05:45,520
implementations like bind and unbound

165
00:05:45,520 --> 00:05:47,840
and they went vulnerable to this and we

166
00:05:47,840 --> 00:05:49,680
also tested some public or servers like

167
00:05:49,680 --> 00:05:52,160
google and cloudflare and there was one

168
00:05:52,160 --> 00:05:54,320
vulnerable but only in the corner case

169
00:05:54,320 --> 00:05:57,199
which is now actually defunct so

170
00:05:57,199 --> 00:05:59,280
this is also not an issue anymore

171
00:05:59,280 --> 00:06:01,680
however then we tested the general

172
00:06:01,680 --> 00:06:03,680
internet and by the general internet i

173
00:06:03,680 --> 00:06:04,840
mean open

174
00:06:04,840 --> 00:06:06,880
resolvers and

175
00:06:06,880 --> 00:06:08,720
found that eight percent of those open

176
00:06:08,720 --> 00:06:10,560
resolvers were actually vulnerable to

177
00:06:10,560 --> 00:06:11,680
this attack

178
00:06:11,680 --> 00:06:13,600
which is weird considering that we

179
00:06:13,600 --> 00:06:15,120
haven't found any

180
00:06:15,120 --> 00:06:17,840
implementations before

181
00:06:17,840 --> 00:06:18,880
and

182
00:06:18,880 --> 00:06:21,919
so currently actually we are um

183
00:06:21,919 --> 00:06:24,000
evaluating this and our data suggests

184
00:06:24,000 --> 00:06:25,520
that the problem really lies in four

185
00:06:25,520 --> 00:06:26,560
waters

186
00:06:26,560 --> 00:06:28,720
essentially the dns

187
00:06:28,720 --> 00:06:32,160
stop things you have in your home router

188
00:06:32,160 --> 00:06:33,759
and we bought many routers as you can

189
00:06:33,759 --> 00:06:36,000
see in the picture and stay tuned for

190
00:06:36,000 --> 00:06:37,919
the results of that that was not part of

191
00:06:37,919 --> 00:06:40,720
the original paper

192
00:06:40,720 --> 00:06:42,720
and so now that we

193
00:06:42,720 --> 00:06:44,319
essentially looked at forwarders and

194
00:06:44,319 --> 00:06:47,360
reservers um the actual problem or the

195
00:06:47,360 --> 00:06:50,479
actual more depth issue here

196
00:06:50,479 --> 00:06:52,319
is in stop reservers and applications in

197
00:06:52,319 --> 00:06:54,080
our opinion

198
00:06:54,080 --> 00:06:56,960
because there's another issue in zns

199
00:06:56,960 --> 00:06:59,120
which is the domain name versus host

200
00:06:59,120 --> 00:07:00,400
name

201
00:07:00,400 --> 00:07:03,360
problem as we call it and what it is is

202
00:07:03,360 --> 00:07:06,000
essentially that the posix standard um

203
00:07:06,000 --> 00:07:08,400
specifies that subreservers operate on

204
00:07:08,400 --> 00:07:09,840
host names

205
00:07:09,840 --> 00:07:11,759
but the problem is that the project

206
00:07:11,759 --> 00:07:13,440
center doesn't actually define what a

207
00:07:13,440 --> 00:07:15,360
host name can be it only defines that

208
00:07:15,360 --> 00:07:17,280
the hostname is represented as a c

209
00:07:17,280 --> 00:07:18,639
string because that's how the library

210
00:07:18,639 --> 00:07:20,000
works

211
00:07:20,000 --> 00:07:22,000
and so if you want to know what a

212
00:07:22,000 --> 00:07:23,680
hostname is you have to look for an

213
00:07:23,680 --> 00:07:27,120
ancient fc which actually doesn't even

214
00:07:27,120 --> 00:07:29,199
is part of dns because it's before dns

215
00:07:29,199 --> 00:07:30,960
was even standardized

216
00:07:30,960 --> 00:07:32,639
which says that the host name can only

217
00:07:32,639 --> 00:07:34,800
be like alpha numerical characters and

218
00:07:34,800 --> 00:07:38,240
that's actually maybe the rule you know

219
00:07:38,240 --> 00:07:40,960
or you don't know it depends

220
00:07:40,960 --> 00:07:42,000
however

221
00:07:42,000 --> 00:07:43,680
anyway we

222
00:07:43,680 --> 00:07:45,680
can conclude from that that the step

223
00:07:45,680 --> 00:07:48,000
reserves since it operates on host names

224
00:07:48,000 --> 00:07:50,000
when it speaks to the application should

225
00:07:50,000 --> 00:07:52,400
validate that a name when it gives it to

226
00:07:52,400 --> 00:07:53,919
the application should be a valid

227
00:07:53,919 --> 00:07:56,000
hostname right

228
00:07:56,000 --> 00:07:58,080
well we checked that and it's

229
00:07:58,080 --> 00:08:00,240
essentially only true for one reservoir

230
00:08:00,240 --> 00:08:02,240
which is glipc

231
00:08:02,240 --> 00:08:05,840
uh it does decide since 1998 i think

232
00:08:05,840 --> 00:08:08,400
and none of the others do that and we

233
00:08:08,400 --> 00:08:10,720
also found that seven out of the ten sub

234
00:08:10,720 --> 00:08:12,720
reservoirs we tested actually

235
00:08:12,720 --> 00:08:15,840
misinterpret our zero byte or

236
00:08:15,840 --> 00:08:19,520
um dot period injection payloads which

237
00:08:19,520 --> 00:08:22,319
might be linked to the thing that we

238
00:08:22,319 --> 00:08:24,720
found vulnerable reserves in the wild

239
00:08:24,720 --> 00:08:26,240
but it's not quite sure because

240
00:08:26,240 --> 00:08:27,919
typically cyber servers don't contain

241
00:08:27,919 --> 00:08:29,039
caches and you shouldn't build a

242
00:08:29,039 --> 00:08:31,280
recursive resolver with them so it's

243
00:08:31,280 --> 00:08:33,760
kind of weird

244
00:08:33,760 --> 00:08:36,640
anyway so we now know that subresolvers

245
00:08:36,640 --> 00:08:39,580
and resolvers aren't handling the

246
00:08:39,580 --> 00:08:40,719
[Music]

247
00:08:40,719 --> 00:08:42,479
validation essentially which is kind of

248
00:08:42,479 --> 00:08:43,839
expected

249
00:08:43,839 --> 00:08:46,080
so the applications have to do it the

250
00:08:46,080 --> 00:08:47,360
problem here is

251
00:08:47,360 --> 00:08:49,120
that from an application developer

252
00:08:49,120 --> 00:08:52,399
standpoint it's kind of unclear because

253
00:08:52,399 --> 00:08:54,880
first the dns data is kind of seems to

254
00:08:54,880 --> 00:08:56,959
come from the operating system you're

255
00:08:56,959 --> 00:08:58,640
doing an operating system called like

256
00:08:58,640 --> 00:09:00,800
get address info or something

257
00:09:00,800 --> 00:09:02,880
and also the application developers

258
00:09:02,880 --> 00:09:04,959
typically don't know that much about dns

259
00:09:04,959 --> 00:09:06,320
they don't know what it is this host

260
00:09:06,320 --> 00:09:07,680
name and domain name thing and that

261
00:09:07,680 --> 00:09:10,080
maybe reservers on different os's behave

262
00:09:10,080 --> 00:09:11,600
differently

263
00:09:11,600 --> 00:09:12,399
so

264
00:09:12,399 --> 00:09:14,959
we tested essentially how applications

265
00:09:14,959 --> 00:09:17,200
validate dns input especially when

266
00:09:17,200 --> 00:09:18,959
considering host names

267
00:09:18,959 --> 00:09:21,920
and in our study actually none of the

268
00:09:21,920 --> 00:09:24,560
applications did any special validation

269
00:09:24,560 --> 00:09:26,800
in terms of that they test that the host

270
00:09:26,800 --> 00:09:28,399
name is

271
00:09:28,399 --> 00:09:30,720
domain name is the valid hostname

272
00:09:30,720 --> 00:09:33,519
and we found eight applications have

273
00:09:33,519 --> 00:09:35,600
kind of exploitable vulnerabilities due

274
00:09:35,600 --> 00:09:37,839
to this

275
00:09:38,160 --> 00:09:39,839
so you might ask okay what makes an

276
00:09:39,839 --> 00:09:41,760
application vulnerable or exploitable

277
00:09:41,760 --> 00:09:44,160
because as i said none of them validate

278
00:09:44,160 --> 00:09:45,519
but it doesn't mean that everything is

279
00:09:45,519 --> 00:09:46,800
exploitable

280
00:09:46,800 --> 00:09:48,800
essentially it comes down to that the

281
00:09:48,800 --> 00:09:50,800
attacker first must be able to trigger

282
00:09:50,800 --> 00:09:52,800
dns query to a custom domain with the

283
00:09:52,800 --> 00:09:54,320
application otherwise you have to do

284
00:09:54,320 --> 00:09:56,399
cache poisoning and then you're doing an

285
00:09:56,399 --> 00:09:58,720
attack to do an attack so

286
00:09:58,720 --> 00:10:00,880
it's not really an issue anymore and the

287
00:10:00,880 --> 00:10:02,880
other thing is that the query result

288
00:10:02,880 --> 00:10:05,279
must essentially be used out of context

289
00:10:05,279 --> 00:10:07,440
so the attacker makes it makes it query

290
00:10:07,440 --> 00:10:09,839
to its own domain and then you must have

291
00:10:09,839 --> 00:10:11,839
a different transaction which kind of

292
00:10:11,839 --> 00:10:13,760
uses the old data again because

293
00:10:13,760 --> 00:10:16,839
otherwise the attacker can only

294
00:10:16,839 --> 00:10:18,800
essentially

295
00:10:18,800 --> 00:10:20,480
do weird stuff with his own transaction

296
00:10:20,480 --> 00:10:21,920
but he can't actually affect anything

297
00:10:21,920 --> 00:10:23,920
else

298
00:10:23,920 --> 00:10:25,760
we have some example vulnerabilities

299
00:10:25,760 --> 00:10:28,160
here which we found for example we found

300
00:10:28,160 --> 00:10:30,000
the cross-site scripting vulnerability

301
00:10:30,000 --> 00:10:31,920
in openvit where you can inject

302
00:10:31,920 --> 00:10:33,680
javascript and essentially control the

303
00:10:33,680 --> 00:10:35,360
router with that

304
00:10:35,360 --> 00:10:37,600
and we also find the configuration

305
00:10:37,600 --> 00:10:39,680
injection in redsec proxy which is a

306
00:10:39,680 --> 00:10:42,959
radius proxy typically used in edirom

307
00:10:42,959 --> 00:10:44,959
where you can essentially inject things

308
00:10:44,959 --> 00:10:47,760
in a dynamically generated configuration

309
00:10:47,760 --> 00:10:49,279
and essentially do anything that

310
00:10:49,279 --> 00:10:50,959
configuration can do

311
00:10:50,959 --> 00:10:52,880
for example graduate or unauthorized

312
00:10:52,880 --> 00:10:54,160
network

313
00:10:54,160 --> 00:10:57,200
so our conclusions are essentially that

314
00:10:57,200 --> 00:10:58,640
first that this is a problem and it's

315
00:10:58,640 --> 00:11:01,360
not really known and that the

316
00:11:01,360 --> 00:11:02,959
standardization for subway servers is

317
00:11:02,959 --> 00:11:05,120
kind of lacking because the posix senate

318
00:11:05,120 --> 00:11:06,800
only defines host names

319
00:11:06,800 --> 00:11:08,399
but it doesn't really says what a

320
00:11:08,399 --> 00:11:10,160
hosting can be

321
00:11:10,160 --> 00:11:11,760
and we find that there's a lot of

322
00:11:11,760 --> 00:11:14,160
missing knowledge between the dns

323
00:11:14,160 --> 00:11:16,160
formats and what they can be and what

324
00:11:16,160 --> 00:11:17,360
they cannot be

325
00:11:17,360 --> 00:11:19,519
and essentially what component and

326
00:11:19,519 --> 00:11:21,120
resolution chain

327
00:11:21,120 --> 00:11:23,200
should do the validation and the problem

328
00:11:23,200 --> 00:11:25,120
here is that since nobody really knows

329
00:11:25,120 --> 00:11:28,079
who should do it it can be that nobody

330
00:11:28,079 --> 00:11:29,839
does it because everyone essentially

331
00:11:29,839 --> 00:11:31,360
thinks that someone else is doing it

332
00:11:31,360 --> 00:11:33,839
which creates a problem

333
00:11:33,839 --> 00:11:36,720
um in terms of mitigations and patches

334
00:11:36,720 --> 00:11:38,720
we reported the vulnerabilities we found

335
00:11:38,720 --> 00:11:41,440
which led to some cvs you can see here

336
00:11:41,440 --> 00:11:42,560
and

337
00:11:42,560 --> 00:11:44,240
we are currently pushing for format

338
00:11:44,240 --> 00:11:46,320
checking and subreservers since that's

339
00:11:46,320 --> 00:11:48,240
essentially the

340
00:11:48,240 --> 00:11:50,240
point in the resolutions change you can

341
00:11:50,240 --> 00:11:52,399
say okay that's still end to end because

342
00:11:52,399 --> 00:11:54,320
it's still on the end point

343
00:11:54,320 --> 00:11:55,680
but you don't have to change every

344
00:11:55,680 --> 00:11:57,440
application in the world essentially to

345
00:11:57,440 --> 00:11:59,600
add validation to it

346
00:11:59,600 --> 00:12:02,160
and you can read our paper and also test

347
00:12:02,160 --> 00:12:04,639
your reserver for the cash overwriting

348
00:12:04,639 --> 00:12:05,360
or

349
00:12:05,360 --> 00:12:07,360
cash poisoning vulnerability at our

350
00:12:07,360 --> 00:12:08,880
website and

351
00:12:08,880 --> 00:12:10,800
otherwise that's the end of my talk and

352
00:12:10,800 --> 00:12:13,680
thank you for your time

353
00:12:18,880 --> 00:12:20,000
and we have

354
00:12:20,000 --> 00:12:21,680
philip with us now i have at least one

355
00:12:21,680 --> 00:12:23,360
question ready and queued up for you

356
00:12:23,360 --> 00:12:25,040
philip i'll go ahead and ask that it's

357
00:12:25,040 --> 00:12:27,839
from online from michael doherty

358
00:12:27,839 --> 00:12:30,240
yes do you have a list of the stub

359
00:12:30,240 --> 00:12:32,560
revolvers that are vulnerable along with

360
00:12:32,560 --> 00:12:34,800
the vendor platforms of that eight

361
00:12:34,800 --> 00:12:35,920
percent

362
00:12:35,920 --> 00:12:38,399
uh that failed in in your test and i i

363
00:12:38,399 --> 00:12:41,040
would maybe add to that um

364
00:12:41,040 --> 00:12:43,440
presumably you maybe reached out to at

365
00:12:43,440 --> 00:12:45,360
least some of them what was the response

366
00:12:45,360 --> 00:12:46,320
to

367
00:12:46,320 --> 00:12:47,839
to your um

368
00:12:47,839 --> 00:12:49,839
your finding

369
00:12:49,839 --> 00:12:52,079
uh so you have to differentiate between

370
00:12:52,079 --> 00:12:54,000
the eight percent and the stepper

371
00:12:54,000 --> 00:12:55,920
servers so the stub reserves we tested

372
00:12:55,920 --> 00:12:57,440
like in our lab

373
00:12:57,440 --> 00:13:00,000
and to them we also like that was

374
00:13:00,000 --> 00:13:02,480
implementations like glibc and actually

375
00:13:02,480 --> 00:13:04,720
also the microsoft one and windows

376
00:13:04,720 --> 00:13:06,480
and we reach out to them and some of

377
00:13:06,480 --> 00:13:07,440
them

378
00:13:07,440 --> 00:13:08,560
actually

379
00:13:08,560 --> 00:13:12,000
there was different uh or

380
00:13:12,000 --> 00:13:13,360
some of them essentially said yeah

381
00:13:13,360 --> 00:13:15,440
that's a that's the thing and actually

382
00:13:15,440 --> 00:13:16,959
although some of them didn't really

383
00:13:16,959 --> 00:13:19,360
consider the vulnerability

384
00:13:19,360 --> 00:13:22,320
uh we haven't really reached out to the

385
00:13:22,320 --> 00:13:24,079
open resolver so the eight percent

386
00:13:24,079 --> 00:13:25,519
you're referring to

387
00:13:25,519 --> 00:13:26,560
um

388
00:13:26,560 --> 00:13:27,920
since

389
00:13:27,920 --> 00:13:30,240
so what we're doing is we are doing this

390
00:13:30,240 --> 00:13:33,279
this router study currently but

391
00:13:33,279 --> 00:13:34,560
the

392
00:13:34,560 --> 00:13:37,120
it's not like um i mean we could use the

393
00:13:37,120 --> 00:13:38,639
who is database maybe to find an

394
00:13:38,639 --> 00:13:41,040
administrator or then say okay we test

395
00:13:41,040 --> 00:13:44,560
the dns reservers in your network um but

396
00:13:44,560 --> 00:13:47,199
it's like kind of complicated to do that

397
00:13:47,199 --> 00:13:49,519
and yeah so

398
00:13:49,519 --> 00:13:51,920
essentially we we communicated to the

399
00:13:51,920 --> 00:13:53,760
implementers but we haven't communicated

400
00:13:53,760 --> 00:13:56,160
to any operators as of now at least not

401
00:13:56,160 --> 00:13:59,519
for the resolvers

402
00:14:00,160 --> 00:14:01,199
okay

403
00:14:01,199 --> 00:14:02,800
and i'm seeing no more questions online

404
00:14:02,800 --> 00:14:05,199
are in the queue even the most finely

405
00:14:05,199 --> 00:14:07,040
assembled and presented talk

406
00:14:07,040 --> 00:14:09,440
uh before lunch is a is a tough time for

407
00:14:09,440 --> 00:14:11,120
getting people to in mass to come up to

408
00:14:11,120 --> 00:14:12,720
the queue so with that we'll thank you

409
00:14:12,720 --> 00:14:14,160
once again thank you very much for

410
00:14:14,160 --> 00:14:17,590
presenting here at nandog

411
00:14:17,590 --> 00:14:20,240
[Applause]

412
00:14:20,240 --> 00:14:24,539
[Music]

