1
00:00:00,000 --> 00:00:05,520
[Music]

2
00:00:05,520 --> 00:00:07,919
hey nanak and thank you for hosting us

3
00:00:07,919 --> 00:00:09,120
today we will talk to you about

4
00:00:09,120 --> 00:00:11,040
container lab which allows you to run

5
00:00:11,040 --> 00:00:12,639
networking labs with docker user

6
00:00:12,639 --> 00:00:14,160
experience

7
00:00:14,160 --> 00:00:16,640
and before we dive into it

8
00:00:16,640 --> 00:00:18,800
let's first set the stage here by

9
00:00:18,800 --> 00:00:20,800
understanding that networking labs or

10
00:00:20,800 --> 00:00:22,480
virtual networking labs are really

11
00:00:22,480 --> 00:00:24,480
critical today it's our

12
00:00:24,480 --> 00:00:27,599
means to test things before they go into

13
00:00:27,599 --> 00:00:29,920
production and their next best best

14
00:00:29,920 --> 00:00:31,359
thing to

15
00:00:31,359 --> 00:00:34,399
uh hardware labs or production networks

16
00:00:34,399 --> 00:00:37,040
so what options do we have today to run

17
00:00:37,040 --> 00:00:39,760
virtual networking topologies

18
00:00:39,760 --> 00:00:42,239
i would like first to start with the

19
00:00:42,239 --> 00:00:43,680
elephant in the room the network

20
00:00:43,680 --> 00:00:46,079
emulation software projects such as even

21
00:00:46,079 --> 00:00:49,760
g or gns3 they are specifically built to

22
00:00:49,760 --> 00:00:52,079
answer the need for building virtual

23
00:00:52,079 --> 00:00:54,320
networking topologies they are proven we

24
00:00:54,320 --> 00:00:56,079
know how they work and everybody

25
00:00:56,079 --> 00:00:57,840
probably had some experience with one of

26
00:00:57,840 --> 00:00:58,719
them

27
00:00:58,719 --> 00:01:00,559
they are at the same time free you can

28
00:01:00,559 --> 00:01:02,879
easily download them and use

29
00:01:02,879 --> 00:01:04,799
although some premium features for even

30
00:01:04,799 --> 00:01:08,240
g might require some extra payments

31
00:01:08,240 --> 00:01:10,400
they have a nice ui which allow you to

32
00:01:10,400 --> 00:01:12,479
create your topology by simply drag and

33
00:01:12,479 --> 00:01:14,240
dropping elements on the pane and

34
00:01:14,240 --> 00:01:16,640
interconnect the links with the mouse

35
00:01:16,640 --> 00:01:18,640
which is really nice and it's really a

36
00:01:18,640 --> 00:01:19,600
human

37
00:01:19,600 --> 00:01:21,119
friendly interface

38
00:01:21,119 --> 00:01:23,520
but it's not all that bright in this

39
00:01:23,520 --> 00:01:25,759
network emulation software cap for

40
00:01:25,759 --> 00:01:27,759
example these tools are really vm

41
00:01:27,759 --> 00:01:30,000
centric which is quite understandable

42
00:01:30,000 --> 00:01:31,119
because the

43
00:01:31,119 --> 00:01:33,280
the networking operating systems they

44
00:01:33,280 --> 00:01:37,200
were packaged in a vms uh before that

45
00:01:37,200 --> 00:01:39,520
and hence they have a weak container

46
00:01:39,520 --> 00:01:42,320
support we'll talk later more about why

47
00:01:42,320 --> 00:01:44,159
do we think this is very important but

48
00:01:44,159 --> 00:01:46,240
for now let's just take it as a minus

49
00:01:46,240 --> 00:01:47,600
here

50
00:01:47,600 --> 00:01:49,520
another thing that is not so great about

51
00:01:49,520 --> 00:01:51,439
them is that they are heavy and not

52
00:01:51,439 --> 00:01:53,520
fully open

53
00:01:53,520 --> 00:01:56,320
for example to install an evg or gns3

54
00:01:56,320 --> 00:01:58,159
you need to allocate a server or a vm

55
00:01:58,159 --> 00:02:00,079
and you need to keep it running for as

56
00:02:00,079 --> 00:02:02,479
long as you need to run your labs

57
00:02:02,479 --> 00:02:03,520
and

58
00:02:03,520 --> 00:02:06,000
although the ui i was just referring to

59
00:02:06,000 --> 00:02:08,239
as a plus it can become as a challenge

60
00:02:08,239 --> 00:02:10,080
if you want to automate your networking

61
00:02:10,080 --> 00:02:12,879
labs in that case the ui is not really

62
00:02:12,879 --> 00:02:15,040
simple to automate and even even though

63
00:02:15,040 --> 00:02:17,440
that these tools have an api it's not

64
00:02:17,440 --> 00:02:19,680
that really and simple as a text file

65
00:02:19,680 --> 00:02:21,920
that you can generate or you know

66
00:02:21,920 --> 00:02:23,599
generate with a with a ginger template

67
00:02:23,599 --> 00:02:26,480
so something like that

68
00:02:26,720 --> 00:02:28,959
what tools do we have apart from the

69
00:02:28,959 --> 00:02:31,280
network emulation software we typically

70
00:02:31,280 --> 00:02:33,760
see that people try to reuse the vm

71
00:02:33,760 --> 00:02:36,400
orchestrators such as openstack to build

72
00:02:36,400 --> 00:02:38,480
the virtual networking topologies and

73
00:02:38,480 --> 00:02:40,800
these uh vm orchestrators they are quite

74
00:02:40,800 --> 00:02:42,400
common in the medium and large

75
00:02:42,400 --> 00:02:44,720
enterprises so it makes sense to reuse

76
00:02:44,720 --> 00:02:47,200
them to deploy the networking topologies

77
00:02:47,200 --> 00:02:49,760
but that's all that that's good about

78
00:02:49,760 --> 00:02:52,560
them because the complexity comes and

79
00:02:52,560 --> 00:02:55,599
takes its toll it's really hard to

80
00:02:55,599 --> 00:02:58,720
use openstack for example proxmox to

81
00:02:58,720 --> 00:03:01,040
create virtual networking topologies it

82
00:03:01,040 --> 00:03:02,840
requires quite a lot of integrational

83
00:03:02,840 --> 00:03:05,840
effort these tools again are vmcentric

84
00:03:05,840 --> 00:03:08,080
because they are vm orchestrators at the

85
00:03:08,080 --> 00:03:09,360
end of the day

86
00:03:09,360 --> 00:03:10,959
and it's not even

87
00:03:10,959 --> 00:03:13,840
that easy to have a clean data path when

88
00:03:13,840 --> 00:03:15,760
you have some linux bridges for example

89
00:03:15,760 --> 00:03:18,159
in the database then protocols such as

90
00:03:18,159 --> 00:03:22,239
ldp or lacp might not be really

91
00:03:22,239 --> 00:03:25,040
passing through those data paths

92
00:03:25,040 --> 00:03:27,040
and these tools although they have like

93
00:03:27,040 --> 00:03:30,319
generic uis and cli these two

94
00:03:30,319 --> 00:03:32,720
elements they are not specifically built

95
00:03:32,720 --> 00:03:35,440
to deploy your topologies hence there is

96
00:03:35,440 --> 00:03:38,239
no specifically built ui or cli that can

97
00:03:38,239 --> 00:03:40,239
spin up a topology for you based on

98
00:03:40,239 --> 00:03:40,959
these

99
00:03:40,959 --> 00:03:43,360
vm orchestrators

100
00:03:43,360 --> 00:03:45,840
and in the third bucket there are some

101
00:03:45,840 --> 00:03:47,920
custom automation solutions

102
00:03:47,920 --> 00:03:50,000
these are the bespoke scripts that

103
00:03:50,000 --> 00:03:52,400
somebody wrote and these scripts can

104
00:03:52,400 --> 00:03:55,920
deploy your vms or create containers or

105
00:03:55,920 --> 00:03:58,080
do whatever you want and they can really

106
00:03:58,080 --> 00:04:00,799
answer the needs of you they can be a

107
00:04:00,799 --> 00:04:02,879
silver bullet but the problem with these

108
00:04:02,879 --> 00:04:05,040
tools is that they are really tailored

109
00:04:05,040 --> 00:04:07,599
for only you and it would be really hard

110
00:04:07,599 --> 00:04:09,840
to make those scripts to work in a

111
00:04:09,840 --> 00:04:11,519
generic environment for example if you

112
00:04:11,519 --> 00:04:13,439
want to share these tools with the

113
00:04:13,439 --> 00:04:14,480
customer

114
00:04:14,480 --> 00:04:17,199
they might have hard time to integrate

115
00:04:17,199 --> 00:04:20,798
those scripts in their environment

116
00:04:20,798 --> 00:04:21,759
now

117
00:04:21,759 --> 00:04:24,240
what do we gain by moving away from vms

118
00:04:24,240 --> 00:04:26,400
because i mentioned that

119
00:04:26,400 --> 00:04:29,520
weak vm support was a downside of those

120
00:04:29,520 --> 00:04:31,280
three solutions

121
00:04:31,280 --> 00:04:34,240
and uh when we move from vms to

122
00:04:34,240 --> 00:04:36,560
containers we of course essentially have

123
00:04:36,560 --> 00:04:38,720
containerized nos support and if you

124
00:04:38,720 --> 00:04:40,320
think that containerized network

125
00:04:40,320 --> 00:04:42,240
operating systems are something that

126
00:04:42,240 --> 00:04:44,960
doesn't really exist it's not that true

127
00:04:44,960 --> 00:04:47,520
for example we currently have a few

128
00:04:47,520 --> 00:04:49,120
network operating systems which are

129
00:04:49,120 --> 00:04:51,199
packaged in a container format such as

130
00:04:51,199 --> 00:04:54,960
nokia sr linux iris the cus juniper crpd

131
00:04:54,960 --> 00:04:56,639
and more will come

132
00:04:56,639 --> 00:04:58,400
so having the

133
00:04:58,400 --> 00:05:00,479
containerized nos support from the

134
00:05:00,479 --> 00:05:03,199
ground up is really important

135
00:05:03,199 --> 00:05:05,360
also when we work with containers we are

136
00:05:05,360 --> 00:05:07,600
inherently light and fast containers

137
00:05:07,600 --> 00:05:09,520
that typically consume less resources

138
00:05:09,520 --> 00:05:12,479
than vms and it's far away faster to

139
00:05:12,479 --> 00:05:14,240
deploy them as compared to the

140
00:05:14,240 --> 00:05:16,160
full-fledged vms

141
00:05:16,160 --> 00:05:18,320
also we work with containers and they

142
00:05:18,320 --> 00:05:20,240
are imputable hence we can create

143
00:05:20,240 --> 00:05:22,479
repeatable labs because the

144
00:05:22,479 --> 00:05:24,000
the containers will be

145
00:05:24,000 --> 00:05:26,160
immutable when you deploy and destroy

146
00:05:26,160 --> 00:05:27,919
them

147
00:05:27,919 --> 00:05:29,360
at the same time when working with

148
00:05:29,360 --> 00:05:31,360
containers we can leverage all the

149
00:05:31,360 --> 00:05:34,160
familiar containers features we can do

150
00:05:34,160 --> 00:05:36,639
bindings we can do port exposure we can

151
00:05:36,639 --> 00:05:39,280
do environment variables propagation etc

152
00:05:39,280 --> 00:05:41,759
etc basically bridging the gap between

153
00:05:41,759 --> 00:05:44,240
the i.t workloads and the networking

154
00:05:44,240 --> 00:05:46,160
systems

155
00:05:46,160 --> 00:05:48,479
one of the most important features of

156
00:05:48,479 --> 00:05:51,120
containerized based labs is that

157
00:05:51,120 --> 00:05:54,080
we deploy or we define the labs in the

158
00:05:54,080 --> 00:05:56,000
text format such as for example docker

159
00:05:56,000 --> 00:05:57,520
compose

160
00:05:57,520 --> 00:06:00,080
we make this really git friendly

161
00:06:00,080 --> 00:06:01,520
so you can define your lab in

162
00:06:01,520 --> 00:06:03,680
declarative fashion you can check it in

163
00:06:03,680 --> 00:06:05,919
git and somebody else can pull it out

164
00:06:05,919 --> 00:06:07,600
and deploy your lab

165
00:06:07,600 --> 00:06:09,759
that is a really important step towards

166
00:06:09,759 --> 00:06:13,360
the infrastructure as code approaches

167
00:06:13,360 --> 00:06:15,520
what work with containers we inherently

168
00:06:15,520 --> 00:06:18,800
work with containerized images and now

169
00:06:18,800 --> 00:06:21,199
we work with images and container

170
00:06:21,199 --> 00:06:24,400
registries as opposed to the qcows and

171
00:06:24,400 --> 00:06:28,400
vda disks so we can you know check the

172
00:06:28,400 --> 00:06:30,560
image of the container to the container

173
00:06:30,560 --> 00:06:33,199
registry without

174
00:06:33,199 --> 00:06:35,440
in contrast to pushing the

175
00:06:35,440 --> 00:06:38,080
qcow disk to some

176
00:06:38,080 --> 00:06:41,360
dropbox or onedrive or whatever so that

177
00:06:41,360 --> 00:06:43,600
makes it really easy to share the images

178
00:06:43,600 --> 00:06:46,000
create the centralized store for them

179
00:06:46,000 --> 00:06:49,520
and reuse them and last but not least

180
00:06:49,520 --> 00:06:52,000
making the containerized virtual

181
00:06:52,000 --> 00:06:53,919
networking topologies make it really

182
00:06:53,919 --> 00:06:54,960
easy to

183
00:06:54,960 --> 00:06:57,440
use them in the cicd pipelines you can

184
00:06:57,440 --> 00:07:00,000
deploy your virtual topologies pretty

185
00:07:00,000 --> 00:07:02,000
much like you would deploy your it

186
00:07:02,000 --> 00:07:04,400
workloads and again it makes it very

187
00:07:04,400 --> 00:07:06,639
easy to incorporate in the cicd

188
00:07:06,639 --> 00:07:09,599
pipelines that you might have

189
00:07:09,599 --> 00:07:12,160
and that's where container lab comes in

190
00:07:12,160 --> 00:07:14,240
containerlab is a single binary small

191
00:07:14,240 --> 00:07:16,639
cli tool that allows you to deploy

192
00:07:16,639 --> 00:07:18,319
complex topologies such as cloud

193
00:07:18,319 --> 00:07:20,639
topologies and at the same time can be

194
00:07:20,639 --> 00:07:22,160
used as a really

195
00:07:22,160 --> 00:07:24,000
can be used with the topologies which

196
00:07:24,000 --> 00:07:25,759
are simple such as back to back

197
00:07:25,759 --> 00:07:26,960
connected

198
00:07:26,960 --> 00:07:29,199
network instances or some arbitrary

199
00:07:29,199 --> 00:07:31,199
topologies that you might use

200
00:07:31,199 --> 00:07:33,520
as i mentioned it is really lightweight

201
00:07:33,520 --> 00:07:35,680
it has a little footprint on the memory

202
00:07:35,680 --> 00:07:37,919
and it allows you to create topologies

203
00:07:37,919 --> 00:07:40,719
from the cli

204
00:07:40,880 --> 00:07:43,520
and to cover the container up features i

205
00:07:43,520 --> 00:07:45,680
would like to invite you on a journey

206
00:07:45,680 --> 00:07:48,240
where we'll have six milestones

207
00:07:48,240 --> 00:07:50,080
first we will install container lab and

208
00:07:50,080 --> 00:07:52,479
see how easy it is to get it running on

209
00:07:52,479 --> 00:07:55,039
practically every operating system

210
00:07:55,039 --> 00:07:57,599
then we will get to know what container

211
00:07:57,599 --> 00:07:58,400
lab

212
00:07:58,400 --> 00:08:01,680
uses as its topology definition syntax

213
00:08:01,680 --> 00:08:03,520
we then will deploy and manage a lot

214
00:08:03,520 --> 00:08:06,000
that we prepared for this talk

215
00:08:06,000 --> 00:08:08,000
we will access and configure the lab

216
00:08:08,000 --> 00:08:09,280
nodes to

217
00:08:09,280 --> 00:08:10,800
to let you know how you can really

218
00:08:10,800 --> 00:08:12,560
connect to the network operating system

219
00:08:12,560 --> 00:08:15,280
channels and configure them

220
00:08:15,280 --> 00:08:16,720
we will work with the configuration

221
00:08:16,720 --> 00:08:18,960
persistency and see how we can extract

222
00:08:18,960 --> 00:08:21,120
the configuration from the running nodes

223
00:08:21,120 --> 00:08:22,479
and store them

224
00:08:22,479 --> 00:08:25,440
for later use and a final step would be

225
00:08:25,440 --> 00:08:28,160
to package the lab and push it to a git

226
00:08:28,160 --> 00:08:30,479
repository so everybody can pull it

227
00:08:30,479 --> 00:08:32,479
afterwards and repeat all the steps that

228
00:08:32,479 --> 00:08:35,120
i will show you here

229
00:08:35,120 --> 00:08:37,599
okay so let's get going

230
00:08:37,599 --> 00:08:39,519
we prepared a simple lab for you here

231
00:08:39,519 --> 00:08:41,519
which is a multi-vendor lab that

232
00:08:41,519 --> 00:08:44,000
consists of three nodes on the right

233
00:08:44,000 --> 00:08:46,560
hand side you see the go bgp linux

234
00:08:46,560 --> 00:08:49,519
container that will act as the route

235
00:08:49,519 --> 00:08:50,800
injector

236
00:08:50,800 --> 00:08:52,720
in the center of the drawing you see the

237
00:08:52,720 --> 00:08:55,440
arista cus again the containerized

238
00:08:55,440 --> 00:08:57,760
network operating system that acts as a

239
00:08:57,760 --> 00:08:59,200
route reflector

240
00:08:59,200 --> 00:09:00,640
and on the left hand side we have the

241
00:09:00,640 --> 00:09:03,040
nokia s4 linux again

242
00:09:03,040 --> 00:09:05,040
containerized network operating system

243
00:09:05,040 --> 00:09:07,040
that will receive the route

244
00:09:07,040 --> 00:09:09,600
the timeline of events will

245
00:09:09,600 --> 00:09:11,360
happen like like this

246
00:09:11,360 --> 00:09:15,120
go bgp announces a single route 192 168

247
00:09:15,120 --> 00:09:17,040
0 1 32

248
00:09:17,040 --> 00:09:19,360
towards the it's only

249
00:09:19,360 --> 00:09:22,640
bgp peer which is arista cus aristo will

250
00:09:22,640 --> 00:09:24,720
act as a route reflector and as as we

251
00:09:24,720 --> 00:09:27,600
now know it will bridge the gap and

252
00:09:27,600 --> 00:09:29,600
propagate the route towards the nokia

253
00:09:29,600 --> 00:09:30,800
serial linux

254
00:09:30,800 --> 00:09:32,560
and sr linux will receive this

255
00:09:32,560 --> 00:09:34,320
announcement and install it in its

256
00:09:34,320 --> 00:09:35,680
routing table

257
00:09:35,680 --> 00:09:38,320
so that is a very simple lab but it

258
00:09:38,320 --> 00:09:40,880
shows you how to create the lab what are

259
00:09:40,880 --> 00:09:43,040
the topology syntax and how we can

260
00:09:43,040 --> 00:09:44,959
leverage different nodes inside the

261
00:09:44,959 --> 00:09:47,599
topology

262
00:09:47,680 --> 00:09:50,480
we start with the installation we

263
00:09:50,480 --> 00:09:52,000
believe that installation needs to be

264
00:09:52,000 --> 00:09:54,560
really simple and easy

265
00:09:54,560 --> 00:09:57,120
what you see here highlighted in in a

266
00:09:57,120 --> 00:09:59,519
dark blue color is the single

267
00:09:59,519 --> 00:10:01,040
installation command that you need to

268
00:10:01,040 --> 00:10:03,440
run to install container lab that's

269
00:10:03,440 --> 00:10:05,040
really all it takes

270
00:10:05,040 --> 00:10:06,800
and three seconds later you will have

271
00:10:06,800 --> 00:10:09,200
container lab installed on your system

272
00:10:09,200 --> 00:10:11,680
we support three different three three

273
00:10:11,680 --> 00:10:14,160
different platforms the microsoft with

274
00:10:14,160 --> 00:10:18,320
wsl2 support the linux operating systems

275
00:10:18,320 --> 00:10:20,880
and mac os so you can install container

276
00:10:20,880 --> 00:10:23,519
lab on three of those platforms without

277
00:10:23,519 --> 00:10:24,959
any problems

278
00:10:24,959 --> 00:10:27,360
uh down below you see a link to uh

279
00:10:27,360 --> 00:10:28,880
different installation options because

280
00:10:28,880 --> 00:10:31,839
we support more than just the uh

281
00:10:31,839 --> 00:10:32,720
bash

282
00:10:32,720 --> 00:10:36,079
command that i highlighted in blue we do

283
00:10:36,079 --> 00:10:37,839
have container with container lab

284
00:10:37,839 --> 00:10:39,839
installed we do have packages we do have

285
00:10:39,839 --> 00:10:42,480
manual installations from the code etc

286
00:10:42,480 --> 00:10:44,240
etc so do check out all the other

287
00:10:44,240 --> 00:10:46,399
options if you do not feel comfortable

288
00:10:46,399 --> 00:10:49,279
running some bash scripts in your lab

289
00:10:49,279 --> 00:10:51,040
environment

290
00:10:51,040 --> 00:10:53,839
now when container lab is installed

291
00:10:53,839 --> 00:10:57,040
we need to understand how it works and

292
00:10:57,040 --> 00:10:59,120
the way it works is that container lab

293
00:10:59,120 --> 00:11:01,839
consumes a topology file created in a

294
00:11:01,839 --> 00:11:04,480
yaml syntax with this topology file you

295
00:11:04,480 --> 00:11:07,440
define your lab which consists of nodes

296
00:11:07,440 --> 00:11:08,880
and links

297
00:11:08,880 --> 00:11:10,959
then container lab takes this file and

298
00:11:10,959 --> 00:11:14,480
deploys those nodes on your machine so

299
00:11:14,480 --> 00:11:18,000
it's really as easy as that

300
00:11:18,480 --> 00:11:22,000
the basic nodes configuration is the

301
00:11:22,000 --> 00:11:24,160
central piece of the topology definition

302
00:11:24,160 --> 00:11:25,040
file

303
00:11:25,040 --> 00:11:27,360
on the left hand side you see the file

304
00:11:27,360 --> 00:11:29,440
that i created for the lab which which

305
00:11:29,440 --> 00:11:30,680
is called

306
00:11:30,680 --> 00:11:33,760
rr.syllab.yaml and rr that stands for

307
00:11:33,760 --> 00:11:35,279
route reflection

308
00:11:35,279 --> 00:11:38,240
and the way you start populating these

309
00:11:38,240 --> 00:11:40,959
topology files that you create a name

310
00:11:40,959 --> 00:11:43,519
for this lab which is rr and then you

311
00:11:43,519 --> 00:11:45,120
start putting the nodes under the

312
00:11:45,120 --> 00:11:46,800
topology container

313
00:11:46,800 --> 00:11:50,320
so here i demonstrate a single container

314
00:11:50,320 --> 00:11:52,000
named sr linux

315
00:11:52,000 --> 00:11:54,320
so that i can show you what the node

316
00:11:54,320 --> 00:11:57,120
definition syntaxes

317
00:11:57,120 --> 00:11:59,200
every node must have a name

318
00:11:59,200 --> 00:12:02,160
in my case i named my sr linux node very

319
00:12:02,160 --> 00:12:04,480
creatively it is sr linux

320
00:12:04,480 --> 00:12:05,839
the

321
00:12:05,839 --> 00:12:08,079
name of the node can be really any

322
00:12:08,079 --> 00:12:09,600
string that you'd like

323
00:12:09,600 --> 00:12:11,920
they just need to be different

324
00:12:11,920 --> 00:12:14,000
what is important to mention here is

325
00:12:14,000 --> 00:12:16,399
that every node must have a kind and

326
00:12:16,399 --> 00:12:18,800
kind defines the flavor of the node it

327
00:12:18,800 --> 00:12:21,120
allows to tell container lab what

328
00:12:21,120 --> 00:12:23,680
operating system this node will be

329
00:12:23,680 --> 00:12:25,839
when we deployed the lab

330
00:12:25,839 --> 00:12:28,320
and with kind we basically encode the

331
00:12:28,320 --> 00:12:30,959
rules how to deploy different network

332
00:12:30,959 --> 00:12:33,920
operating systems on your machine

333
00:12:33,920 --> 00:12:35,920
of course since we work with containers

334
00:12:35,920 --> 00:12:38,000
we need to have the container image

335
00:12:38,000 --> 00:12:40,639
present and that is given with the image

336
00:12:40,639 --> 00:12:42,160
command here

337
00:12:42,160 --> 00:12:43,120
now

338
00:12:43,120 --> 00:12:45,680
you must understand that the string that

339
00:12:45,680 --> 00:12:48,000
you provide here the container image it

340
00:12:48,000 --> 00:12:50,720
must be either pullable from the public

341
00:12:50,720 --> 00:12:52,880
docker hub repository or github

342
00:12:52,880 --> 00:12:54,720
container registry or any other

343
00:12:54,720 --> 00:12:56,560
container register that

344
00:12:56,560 --> 00:12:58,480
that is accessible accessible from the

345
00:12:58,480 --> 00:13:00,480
node that you run it from

346
00:13:00,480 --> 00:13:02,800
so here i specify the

347
00:13:02,800 --> 00:13:04,880
public url for the nokia server linux

348
00:13:04,880 --> 00:13:06,800
image and container lab will be able to

349
00:13:06,800 --> 00:13:09,120
pull it

350
00:13:09,120 --> 00:13:10,800
now

351
00:13:10,800 --> 00:13:13,200
let's see how we can add different nodes

352
00:13:13,200 --> 00:13:16,160
we just saw that adding so linux node is

353
00:13:16,160 --> 00:13:18,639
really easy and it is exactly the same

354
00:13:18,639 --> 00:13:22,240
for cos for example we specify the kind

355
00:13:22,240 --> 00:13:24,800
which is cus for the aristocrac and we

356
00:13:24,800 --> 00:13:26,880
specify the image for this

357
00:13:26,880 --> 00:13:27,839
node

358
00:13:27,839 --> 00:13:30,560
as far as the go bgp is concerned we set

359
00:13:30,560 --> 00:13:32,560
the kind to linux because it's a simple

360
00:13:32,560 --> 00:13:35,519
linux container that we use and this

361
00:13:35,519 --> 00:13:37,360
container image will

362
00:13:37,360 --> 00:13:39,199
use go bgp

363
00:13:39,199 --> 00:13:40,880
as part of this

364
00:13:40,880 --> 00:13:42,720
so this image will already have google

365
00:13:42,720 --> 00:13:44,720
bgp installed

366
00:13:44,720 --> 00:13:46,480
with this topology definition file that

367
00:13:46,480 --> 00:13:48,800
you see on the left on the right hand

368
00:13:48,800 --> 00:13:50,959
side you see the logical view that our

369
00:13:50,959 --> 00:13:53,279
current topology file represents so we

370
00:13:53,279 --> 00:13:55,279
have three nodes we know how to deploy

371
00:13:55,279 --> 00:13:57,680
them we know their kinds but what we

372
00:13:57,680 --> 00:14:00,240
missing is links so let's

373
00:14:00,240 --> 00:14:02,399
get going and that let's add some links

374
00:14:02,399 --> 00:14:04,480
to this topology

375
00:14:04,480 --> 00:14:07,199
to add links is really simple you just

376
00:14:07,199 --> 00:14:09,279
add a new links container to the

377
00:14:09,279 --> 00:14:10,959
topology file

378
00:14:10,959 --> 00:14:13,440
and you specify the end points

379
00:14:13,440 --> 00:14:16,240
so here what we basically say is that i

380
00:14:16,240 --> 00:14:18,560
want to connect my sr linux node

381
00:14:18,560 --> 00:14:23,680
interface e11 to cus interface eth1 and

382
00:14:23,680 --> 00:14:26,000
that will create a vth pair between

383
00:14:26,000 --> 00:14:27,920
those two containers

384
00:14:27,920 --> 00:14:29,360
and

385
00:14:29,360 --> 00:14:31,279
thus we achieve the clean data path we

386
00:14:31,279 --> 00:14:33,279
create the vh pairs between the

387
00:14:33,279 --> 00:14:36,639
containers and we use this simple string

388
00:14:36,639 --> 00:14:38,560
representation of the end points to make

389
00:14:38,560 --> 00:14:39,090
that happen

390
00:14:39,090 --> 00:14:41,360
[Music]

391
00:14:41,360 --> 00:14:43,519
now when the topology is ready and

392
00:14:43,519 --> 00:14:45,600
that's really all it takes just nodes

393
00:14:45,600 --> 00:14:48,000
and links we can start and deploy the

394
00:14:48,000 --> 00:14:49,040
lab

395
00:14:49,040 --> 00:14:50,959
again it is just a simple command

396
00:14:50,959 --> 00:14:53,040
container lab deploy and we need just to

397
00:14:53,040 --> 00:14:55,040
refer to the topology file that we just

398
00:14:55,040 --> 00:14:56,160
created

399
00:14:56,160 --> 00:14:57,120
and

400
00:14:57,120 --> 00:14:58,959
approximately 30 seconds later for this

401
00:14:58,959 --> 00:15:01,199
lab you will have a summary table

402
00:15:01,199 --> 00:15:03,519
presented to you which say

403
00:15:03,519 --> 00:15:05,519
dear user i deployed these three

404
00:15:05,519 --> 00:15:07,839
containers they are

405
00:15:07,839 --> 00:15:10,160
they have these container ids they use

406
00:15:10,160 --> 00:15:12,880
these images and they also have these

407
00:15:12,880 --> 00:15:15,600
ipv4 and v6 addresses that container app

408
00:15:15,600 --> 00:15:17,120
assigned to them

409
00:15:17,120 --> 00:15:18,959
so using this information you will be

410
00:15:18,959 --> 00:15:22,000
able to access the nodes

411
00:15:22,000 --> 00:15:23,120
and

412
00:15:23,120 --> 00:15:25,040
to access the nodes we have

413
00:15:25,040 --> 00:15:27,440
several ways to do that actually

414
00:15:27,440 --> 00:15:30,160
first as we work with containers we can

415
00:15:30,160 --> 00:15:32,240
execute a container a process inside the

416
00:15:32,240 --> 00:15:33,519
container

417
00:15:33,519 --> 00:15:36,000
and to do that we will leverage the

418
00:15:36,000 --> 00:15:38,800
docker cli and its exact command

419
00:15:38,800 --> 00:15:41,600
so i have two examples here down below

420
00:15:41,600 --> 00:15:44,079
which demonstrate how you can execute

421
00:15:44,079 --> 00:15:46,880
the srcli process inside the sro linux

422
00:15:46,880 --> 00:15:47,920
container

423
00:15:47,920 --> 00:15:50,800
or you can call the bash container

424
00:15:50,800 --> 00:15:53,040
process inside the google bgp container

425
00:15:53,040 --> 00:15:55,519
for example

426
00:15:55,519 --> 00:15:58,160
for network operating systems such as

427
00:15:58,160 --> 00:16:02,720
cus sr linux vmx what have you you of

428
00:16:02,720 --> 00:16:05,759
course can use ssh and connect to the

429
00:16:05,759 --> 00:16:08,560
ssh server that these images run

430
00:16:08,560 --> 00:16:11,360
to do that you use the ssh command of

431
00:16:11,360 --> 00:16:14,399
course and you can use either the name

432
00:16:14,399 --> 00:16:17,279
that the container has such as clap

433
00:16:17,279 --> 00:16:19,680
error cos in the example number one on

434
00:16:19,680 --> 00:16:21,680
the right hand side or you can use the

435
00:16:21,680 --> 00:16:23,920
ap addresses that contain a lab assigned

436
00:16:23,920 --> 00:16:25,519
to the nodes

437
00:16:25,519 --> 00:16:28,639
that's how easy it is to connect to the

438
00:16:28,639 --> 00:16:31,360
nodes that have been deployed

439
00:16:31,360 --> 00:16:32,480
now when you

440
00:16:32,480 --> 00:16:34,880
manage to connect to the nodes it comes

441
00:16:34,880 --> 00:16:37,440
to the configuration process and there

442
00:16:37,440 --> 00:16:39,120
are of course many ways how you can

443
00:16:39,120 --> 00:16:40,880
configure the nodes you can connect to

444
00:16:40,880 --> 00:16:43,199
the cli as i explained on the slide

445
00:16:43,199 --> 00:16:46,160
before and tap in your commands or you

446
00:16:46,160 --> 00:16:48,399
can use some programmatical interfaces

447
00:16:48,399 --> 00:16:50,480
that the nodes will have

448
00:16:50,480 --> 00:16:52,160
as part of their

449
00:16:52,160 --> 00:16:53,920
startup configuration for example you

450
00:16:53,920 --> 00:16:57,680
can use gmi json rpc netconf or any

451
00:16:57,680 --> 00:16:58,959
other

452
00:16:58,959 --> 00:17:01,199
apis that the network operates and

453
00:17:01,199 --> 00:17:03,120
systems might have as part of their

454
00:17:03,120 --> 00:17:04,799
config

455
00:17:04,799 --> 00:17:06,640
you can also use the configuration

456
00:17:06,640 --> 00:17:09,119
mounts because you work with containers

457
00:17:09,119 --> 00:17:11,359
you can mount or bind mount the file

458
00:17:11,359 --> 00:17:13,280
from your local system towards the

459
00:17:13,280 --> 00:17:15,359
container process and you will be able

460
00:17:15,359 --> 00:17:19,039
to access these files and make them work

461
00:17:19,039 --> 00:17:22,079
as the startup configuration for example

462
00:17:22,079 --> 00:17:24,240
you can of course use some configuration

463
00:17:24,240 --> 00:17:25,839
management tools

464
00:17:25,839 --> 00:17:28,319
such as scrapply ansible nor near or

465
00:17:28,319 --> 00:17:30,240
your custom python scripts because you

466
00:17:30,240 --> 00:17:32,400
have network access to the nodes right

467
00:17:32,400 --> 00:17:34,960
out of the box when you deploy the lab

468
00:17:34,960 --> 00:17:37,039
and we also have container lab own

469
00:17:37,039 --> 00:17:40,480
configuration engine that allows you to

470
00:17:40,480 --> 00:17:42,720
create configurations based out of the

471
00:17:42,720 --> 00:17:44,480
templates and

472
00:17:44,480 --> 00:17:46,799
use some variables files that will be

473
00:17:46,799 --> 00:17:49,840
used as the as the variables to deploy

474
00:17:49,840 --> 00:17:52,799
or to uh template the configurations and

475
00:17:52,799 --> 00:17:56,160
use them when the nodes start

476
00:17:56,160 --> 00:17:58,640
so let's see how that works in action

477
00:17:58,640 --> 00:18:01,440
because that was quite quite something

478
00:18:01,440 --> 00:18:04,720
on the slides but let's dive into the

479
00:18:04,720 --> 00:18:07,120
cli and see how it really works

480
00:18:07,120 --> 00:18:09,760
so what i have i have here is the

481
00:18:09,760 --> 00:18:13,200
virtual machine that runs ubuntu linux

482
00:18:13,200 --> 00:18:16,720
it has container app not installed yet

483
00:18:16,720 --> 00:18:18,640
it has docker installed though which is

484
00:18:18,640 --> 00:18:20,480
the only prerequisite that you need to

485
00:18:20,480 --> 00:18:23,520
have to run container lab so i wanted to

486
00:18:23,520 --> 00:18:25,600
first show you how easy it is to install

487
00:18:25,600 --> 00:18:26,960
container lab

488
00:18:26,960 --> 00:18:29,320
to do that you go to the

489
00:18:29,320 --> 00:18:30,880
containerlab.userlinuxdev portal which

490
00:18:30,880 --> 00:18:32,720
is our main documentation portal with

491
00:18:32,720 --> 00:18:35,919
lots of information around container lab

492
00:18:35,919 --> 00:18:37,840
and here you will have the

493
00:18:37,840 --> 00:18:39,360
installation tab

494
00:18:39,360 --> 00:18:41,120
that will show you how to install

495
00:18:41,120 --> 00:18:45,120
container lab build in all the different

496
00:18:45,120 --> 00:18:46,320
processes

497
00:18:46,320 --> 00:18:48,799
so i will use the

498
00:18:48,799 --> 00:18:50,880
magic script that we have which will

499
00:18:50,880 --> 00:18:53,520
detect the operating system and install

500
00:18:53,520 --> 00:18:55,520
the right package for me so i'll just

501
00:18:55,520 --> 00:18:58,000
copy paste it here on my machine and i

502
00:18:58,000 --> 00:18:59,120
will start

503
00:18:59,120 --> 00:19:01,679
installing container lab it will take a

504
00:19:01,679 --> 00:19:04,480
couple of seconds to install it and

505
00:19:04,480 --> 00:19:06,320
just like that i have container lab is

506
00:19:06,320 --> 00:19:09,120
installed and it's ready to be used

507
00:19:09,120 --> 00:19:11,120
now what do we do when we have container

508
00:19:11,120 --> 00:19:13,440
lab installed we need to write the

509
00:19:13,440 --> 00:19:16,480
topology file as i just explained before

510
00:19:16,480 --> 00:19:17,600
in the slides

511
00:19:17,600 --> 00:19:20,640
so here i have this topology file

512
00:19:20,640 --> 00:19:23,039
already created

513
00:19:23,039 --> 00:19:26,160
it has the same exact

514
00:19:26,160 --> 00:19:28,400
content that we went through the slides

515
00:19:28,400 --> 00:19:29,360
it has

516
00:19:29,360 --> 00:19:32,559
three different nodes so linux cus and

517
00:19:32,559 --> 00:19:35,520
gold bgb and it has two links which

518
00:19:35,520 --> 00:19:38,720
interconnect these two nodes okay so

519
00:19:38,720 --> 00:19:40,400
this is really

520
00:19:40,400 --> 00:19:43,039
what you need to have to deploy the lab

521
00:19:43,039 --> 00:19:44,880
so how do you do that

522
00:19:44,880 --> 00:19:47,600
as i mentioned before all it takes is

523
00:19:47,600 --> 00:19:49,280
container lab

524
00:19:49,280 --> 00:19:52,000
deploy

525
00:19:52,000 --> 00:19:54,400
dash t for topology

526
00:19:54,400 --> 00:19:58,400
and i refer to my topology file

527
00:19:58,400 --> 00:20:00,720
now container lab will

528
00:20:00,720 --> 00:20:03,600
take the topology file analyze what's

529
00:20:03,600 --> 00:20:05,840
inside it and it will start creating the

530
00:20:05,840 --> 00:20:07,919
nodes so right now you see that we

531
00:20:07,919 --> 00:20:11,520
created three containers we created two

532
00:20:11,520 --> 00:20:14,960
links between the cus go bgp and sr

533
00:20:14,960 --> 00:20:16,880
linux and cus

534
00:20:16,880 --> 00:20:18,799
and now we are running some pause deploy

535
00:20:18,799 --> 00:20:21,760
actions for the nodes

536
00:20:21,760 --> 00:20:24,480
arista and nokia so linux what we do

537
00:20:24,480 --> 00:20:26,480
currently is that we make sure that the

538
00:20:26,480 --> 00:20:28,640
nodes boot we apply some startup

539
00:20:28,640 --> 00:20:30,640
configuration to them like basic startup

540
00:20:30,640 --> 00:20:31,919
configuration

541
00:20:31,919 --> 00:20:34,880
and 30 seconds later we have the lab

542
00:20:34,880 --> 00:20:36,320
running

543
00:20:36,320 --> 00:20:38,000
at this moment you can connect to the

544
00:20:38,000 --> 00:20:40,640
nodes and you can start configuring them

545
00:20:40,640 --> 00:20:42,320
so let me show you how you can connect

546
00:20:42,320 --> 00:20:45,600
to the nodes first i will switch to the

547
00:20:45,600 --> 00:20:47,679
cos tab that's where we will configure

548
00:20:47,679 --> 00:20:50,159
our aristocus

549
00:20:50,159 --> 00:20:54,080
and i will tap and connect to the cos

550
00:20:54,080 --> 00:20:56,640
so to do that i basically just copy the

551
00:20:56,640 --> 00:20:59,520
name of the cus node

552
00:20:59,520 --> 00:21:02,720
and i will do ssh admin

553
00:21:02,720 --> 00:21:04,640
the name of the container

554
00:21:04,640 --> 00:21:07,280
the default password is admin and here i

555
00:21:07,280 --> 00:21:10,720
am already in the cus cli

556
00:21:10,720 --> 00:21:12,880
now what i will do here is that i will

557
00:21:12,880 --> 00:21:16,000
paste the prepared config for the cos i

558
00:21:16,000 --> 00:21:19,360
have it here as part of my

559
00:21:19,360 --> 00:21:21,760
directory that i use for this lab

560
00:21:21,760 --> 00:21:24,080
there is the cus

561
00:21:24,080 --> 00:21:28,000
cli cfg file

562
00:21:28,000 --> 00:21:30,000
that actually has all the needed

563
00:21:30,000 --> 00:21:31,360
commands to

564
00:21:31,360 --> 00:21:33,360
configure the use case that we discussed

565
00:21:33,360 --> 00:21:34,320
before

566
00:21:34,320 --> 00:21:36,159
so i will just copy paste those

567
00:21:36,159 --> 00:21:38,159
interface configuration and bgp

568
00:21:38,159 --> 00:21:39,760
configuration

569
00:21:39,760 --> 00:21:41,280
and uh

570
00:21:41,280 --> 00:21:42,240
let me

571
00:21:42,240 --> 00:21:44,960
take it all

572
00:21:44,960 --> 00:21:48,480
i copy it here and i paste it to my

573
00:21:48,480 --> 00:21:50,880
cus cli

574
00:21:50,880 --> 00:21:52,480
okay my

575
00:21:52,480 --> 00:21:54,640
cus configuration is done

576
00:21:54,640 --> 00:21:57,360
i will do the same for the astro linux

577
00:21:57,360 --> 00:21:59,600
so again i have the azure linux config

578
00:21:59,600 --> 00:22:01,679
prepared here

579
00:22:01,679 --> 00:22:04,000
it does exactly the same thing but on

580
00:22:04,000 --> 00:22:05,679
the so linux side we configure the

581
00:22:05,679 --> 00:22:08,880
interfaces the loopbacks the bgp

582
00:22:08,880 --> 00:22:10,480
and we

583
00:22:10,480 --> 00:22:13,760
do this on the cli side

584
00:22:13,760 --> 00:22:16,080
so my sro linux is here

585
00:22:16,080 --> 00:22:19,360
to connect to it i use the same ssh

586
00:22:19,360 --> 00:22:23,679
access so i use the name of the sr linux

587
00:22:23,679 --> 00:22:27,039
node that we have in our lab

588
00:22:27,039 --> 00:22:29,520
it has the same default password admin

589
00:22:29,520 --> 00:22:32,720
now one once i'm in i will paste the

590
00:22:32,720 --> 00:22:34,880
configuration that i just copied

591
00:22:34,880 --> 00:22:36,799
and boom it's there

592
00:22:36,799 --> 00:22:39,039
so what i can do right now is that i can

593
00:22:39,039 --> 00:22:43,200
install the watch on the show command so

594
00:22:43,200 --> 00:22:44,799
what i'm interested in is that i'm

595
00:22:44,799 --> 00:22:47,360
interested if my sr linux node

596
00:22:47,360 --> 00:22:49,760
already has some routes received from

597
00:22:49,760 --> 00:22:50,480
the

598
00:22:50,480 --> 00:22:53,679
cus route with that route reflector

599
00:22:53,679 --> 00:22:54,559
so

600
00:22:54,559 --> 00:22:56,159
to do that i will do show network

601
00:22:56,159 --> 00:22:59,200
instance default protocols pgp

602
00:22:59,200 --> 00:23:01,600
i will leverage the

603
00:23:01,600 --> 00:23:04,000
highlighting features of the sr linux

604
00:23:04,000 --> 00:23:06,880
and i will check the received routes

605
00:23:06,880 --> 00:23:09,919
from the ipv4 headers family

606
00:23:09,919 --> 00:23:11,919
and this watch command will refresh

607
00:23:11,919 --> 00:23:14,400
every two seconds the show command that

608
00:23:14,400 --> 00:23:15,760
i just typed in

609
00:23:15,760 --> 00:23:18,000
and it will tell me if i have anything

610
00:23:18,000 --> 00:23:20,640
received from the bgp neighbor which i

611
00:23:20,640 --> 00:23:23,520
have and i do have only and i have

612
00:23:23,520 --> 00:23:26,400
nothing right now because there is no

613
00:23:26,400 --> 00:23:28,880
route reflected by the cos at this

614
00:23:28,880 --> 00:23:30,080
moment

615
00:23:30,080 --> 00:23:31,919
we will come back to this output to see

616
00:23:31,919 --> 00:23:33,440
what happens when we will configure the

617
00:23:33,440 --> 00:23:35,600
go bgp

618
00:23:35,600 --> 00:23:38,559
so the go bgp part is now

619
00:23:38,559 --> 00:23:41,440
our next guest so to do the go bgp

620
00:23:41,440 --> 00:23:45,440
configuration i will use the code bgp

621
00:23:45,440 --> 00:23:47,200
file that i prepared

622
00:23:47,200 --> 00:23:49,039
it is a bit more involved here because

623
00:23:49,039 --> 00:23:52,559
we need to use the code bgp

624
00:23:52,559 --> 00:23:55,039
configuration syntax so we

625
00:23:55,039 --> 00:23:57,440
create the config for the code bgp we

626
00:23:57,440 --> 00:23:59,840
start the bgp daemon and we create the

627
00:23:59,840 --> 00:24:03,039
announcement and then we will populate

628
00:24:03,039 --> 00:24:05,679
it we will basically announce it through

629
00:24:05,679 --> 00:24:07,840
the gold bgp but how do we connect to

630
00:24:07,840 --> 00:24:09,600
the go bgp because it's not a network

631
00:24:09,600 --> 00:24:11,919
operating system it's a linux container

632
00:24:11,919 --> 00:24:14,720
so there is no ssh server running there

633
00:24:14,720 --> 00:24:17,440
so we will use the option number one we

634
00:24:17,440 --> 00:24:20,559
will actually execute a bash process

635
00:24:20,559 --> 00:24:23,440
inside the container of go bgp

636
00:24:23,440 --> 00:24:25,440
so the go bgp

637
00:24:25,440 --> 00:24:29,039
container named clap rr go pgp

638
00:24:29,039 --> 00:24:30,640
and i will

639
00:24:30,640 --> 00:24:33,360
open the bash shell here so now i'm in

640
00:24:33,360 --> 00:24:36,080
the go bgp process go bgp container in

641
00:24:36,080 --> 00:24:37,919
the bash shell

642
00:24:37,919 --> 00:24:40,960
and i will copy this configuration to

643
00:24:40,960 --> 00:24:44,159
where to to the shell so that's

644
00:24:44,159 --> 00:24:46,480
what i did here i started the code bgp

645
00:24:46,480 --> 00:24:48,159
container

646
00:24:48,159 --> 00:24:50,000
go phpdemon sorry

647
00:24:50,000 --> 00:24:52,799
and now it is really ready to start

648
00:24:52,799 --> 00:24:56,240
announcing the route that we prepared

649
00:24:56,240 --> 00:25:00,960
so if i do this command here

650
00:25:00,960 --> 00:25:03,760
it should start

651
00:25:06,400 --> 00:25:08,880
announcing this thing

652
00:25:08,880 --> 00:25:11,279
and now if i go back to the sr linux you

653
00:25:11,279 --> 00:25:13,600
see i have this

654
00:25:13,600 --> 00:25:17,919
192 168 100.1 route received

655
00:25:17,919 --> 00:25:19,760
that means that code bgp announced the

656
00:25:19,760 --> 00:25:22,080
route to the cus you just reflected it

657
00:25:22,080 --> 00:25:25,120
back to sr linux and sr linux has it as

658
00:25:25,120 --> 00:25:28,799
part of the received routes from the cus

659
00:25:28,799 --> 00:25:31,440
so that's really the use case that i

660
00:25:31,440 --> 00:25:32,960
wanted to show you

661
00:25:32,960 --> 00:25:34,159
that

662
00:25:34,159 --> 00:25:36,559
demonstrates the way how you can start

663
00:25:36,559 --> 00:25:38,640
working with container app how easy it

664
00:25:38,640 --> 00:25:40,320
is to install it how to

665
00:25:40,320 --> 00:25:43,279
create a lab all the small one but still

666
00:25:43,279 --> 00:25:45,120
a multi-vendor lab with three different

667
00:25:45,120 --> 00:25:47,120
nodes leveraging the

668
00:25:47,120 --> 00:25:50,880
nokia sr linux aristocos and the linux

669
00:25:50,880 --> 00:25:54,320
container with gobi gp stack installed

670
00:25:54,320 --> 00:25:56,559
and now i wanted to go back to my

671
00:25:56,559 --> 00:25:59,039
presentation and i would like to talk to

672
00:25:59,039 --> 00:26:01,360
you about the configuration saving

673
00:26:01,360 --> 00:26:02,559
process

674
00:26:02,559 --> 00:26:04,080
so it's really

675
00:26:04,080 --> 00:26:05,600
most of the time when you work with the

676
00:26:05,600 --> 00:26:06,960
lab you

677
00:26:06,960 --> 00:26:09,120
dab in your commands you create some use

678
00:26:09,120 --> 00:26:11,440
case it's all good but then you need to

679
00:26:11,440 --> 00:26:13,760
save it you want to you know you want to

680
00:26:13,760 --> 00:26:15,600
save your process so that next time you

681
00:26:15,600 --> 00:26:17,520
can go back to your lab you can start

682
00:26:17,520 --> 00:26:19,360
not from the clean slate but from the

683
00:26:19,360 --> 00:26:21,600
status that that you left the lab before

684
00:26:21,600 --> 00:26:23,200
you shut it down

685
00:26:23,200 --> 00:26:24,960
and to save the configuration manually

686
00:26:24,960 --> 00:26:27,120
is a tedious process if you have many

687
00:26:27,120 --> 00:26:29,600
nodes in your lab so to do that in

688
00:26:29,600 --> 00:26:31,440
container lab we created the command

689
00:26:31,440 --> 00:26:33,600
container lab safe that will do this

690
00:26:33,600 --> 00:26:36,559
kind of sweep safe

691
00:26:36,559 --> 00:26:39,279
process and save the configurations

692
00:26:39,279 --> 00:26:40,720
running configurations to startup

693
00:26:40,720 --> 00:26:42,880
configurations on all the nodes that

694
00:26:42,880 --> 00:26:44,240
your lab has

695
00:26:44,240 --> 00:26:47,360
so let me show you how code works

696
00:26:47,360 --> 00:26:50,640
so here if i go back to my host machine

697
00:26:50,640 --> 00:26:53,600
and i will use container lab

698
00:26:53,600 --> 00:26:54,799
safe

699
00:26:54,799 --> 00:26:58,880
dash t for topology and i will use my

700
00:26:58,880 --> 00:27:00,960
topology file that we that we used in

701
00:27:00,960 --> 00:27:03,039
the lab

702
00:27:03,039 --> 00:27:05,840
and bum in the in under a second we

703
00:27:05,840 --> 00:27:07,919
saved running configuration to startup

704
00:27:07,919 --> 00:27:12,400
on both cus node and sr linux node

705
00:27:12,400 --> 00:27:15,279
what does it mean it means that now we

706
00:27:15,279 --> 00:27:17,760
save the configuration on the nodes

707
00:27:17,760 --> 00:27:20,720
but that's not only just like you know

708
00:27:20,720 --> 00:27:22,159
it's not only for the sake of saving the

709
00:27:22,159 --> 00:27:23,919
configuration we need to access that

710
00:27:23,919 --> 00:27:25,279
configuration

711
00:27:25,279 --> 00:27:26,720
and to do that

712
00:27:26,720 --> 00:27:29,440
there is a thing called lab directory

713
00:27:29,440 --> 00:27:31,600
container lab creates the lab directory

714
00:27:31,600 --> 00:27:34,080
for every lab that you deploy

715
00:27:34,080 --> 00:27:37,039
the goal for this directory is to store

716
00:27:37,039 --> 00:27:39,440
all the artifacts that contain lab might

717
00:27:39,440 --> 00:27:41,840
use or you might use as a user

718
00:27:41,840 --> 00:27:44,080
to keep some state when you work with

719
00:27:44,080 --> 00:27:45,120
the lab

720
00:27:45,120 --> 00:27:47,919
so when you deploy the lab that uh that

721
00:27:47,919 --> 00:27:50,320
has the three nodes that we just that we

722
00:27:50,320 --> 00:27:52,399
just deployed recently it will create a

723
00:27:52,399 --> 00:27:55,679
lab called c lab dash rr c lab is a

724
00:27:55,679 --> 00:27:58,320
fixed prefix and the rr is the lab name

725
00:27:58,320 --> 00:28:00,320
that you used in your topology and

726
00:28:00,320 --> 00:28:02,559
inside those this directory you will

727
00:28:02,559 --> 00:28:04,880
have all the configurations that these

728
00:28:04,880 --> 00:28:06,399
node use

729
00:28:06,399 --> 00:28:09,440
for example if i now just save the

730
00:28:09,440 --> 00:28:12,159
configuration on my on my containers i

731
00:28:12,159 --> 00:28:15,279
can really access it from my vm

732
00:28:15,279 --> 00:28:17,200
as easy as that i can do

733
00:28:17,200 --> 00:28:19,120
cat i will do the

734
00:28:19,120 --> 00:28:22,080
i will go into the club directory

735
00:28:22,080 --> 00:28:25,039
i know that my

736
00:28:25,360 --> 00:28:28,000
cus node is named ceos

737
00:28:28,000 --> 00:28:30,559
and inside the this directory there will

738
00:28:30,559 --> 00:28:32,480
be a flash directory the flash directory

739
00:28:32,480 --> 00:28:34,240
is something that arista creates for

740
00:28:34,240 --> 00:28:38,080
their uh persistent storage and here you

741
00:28:38,080 --> 00:28:40,320
will have the startup config file

742
00:28:40,320 --> 00:28:43,200
created by arista so if we cut this file

743
00:28:43,200 --> 00:28:44,880
you will see that it has

744
00:28:44,880 --> 00:28:46,640
all the configurations that we just

745
00:28:46,640 --> 00:28:49,520
tapped in through the cli the interfaces

746
00:28:49,520 --> 00:28:52,080
are configured the

747
00:28:52,080 --> 00:28:54,399
bgp is configured all the neighbors are

748
00:28:54,399 --> 00:28:55,600
there

749
00:28:55,600 --> 00:28:56,559
and it's

750
00:28:56,559 --> 00:28:58,960
in this file because we just made a save

751
00:28:58,960 --> 00:29:01,440
from the running configuration to the

752
00:29:01,440 --> 00:29:04,480
persistent startup config now you can

753
00:29:04,480 --> 00:29:07,279
really take this file copy it to some

754
00:29:07,279 --> 00:29:09,440
place check out it and git and it will

755
00:29:09,440 --> 00:29:11,600
be available to you whenever you hit

756
00:29:11,600 --> 00:29:13,200
save or use the

757
00:29:13,200 --> 00:29:16,480
container lab save command

758
00:29:16,640 --> 00:29:17,600
all right

759
00:29:17,600 --> 00:29:18,480
now

760
00:29:18,480 --> 00:29:20,960
that was quite something we just tapped

761
00:29:20,960 --> 00:29:23,360
a lot of commands i copy pasted prepared

762
00:29:23,360 --> 00:29:26,799
configs and we created the use case with

763
00:29:26,799 --> 00:29:28,480
the route reflection

764
00:29:28,480 --> 00:29:31,200
but what if you want to prepare all this

765
00:29:31,200 --> 00:29:32,320
thing

766
00:29:32,320 --> 00:29:34,080
all these things and then push it to

767
00:29:34,080 --> 00:29:36,000
repositories such as that

768
00:29:36,000 --> 00:29:38,240
your colleagues could pull it and you do

769
00:29:38,240 --> 00:29:40,480
not want them to you know tap those

770
00:29:40,480 --> 00:29:42,720
commands over and over as they want to

771
00:29:42,720 --> 00:29:45,360
test this specific bjp route reflection

772
00:29:45,360 --> 00:29:46,640
use case

773
00:29:46,640 --> 00:29:48,960
do we have any other means to do that

774
00:29:48,960 --> 00:29:50,159
yes we do

775
00:29:50,159 --> 00:29:52,080
we can have the persistent

776
00:29:52,080 --> 00:29:55,279
configurations mounted to the containers

777
00:29:55,279 --> 00:29:56,960
and they will be used as a startup

778
00:29:56,960 --> 00:29:59,200
config that is what i show here in this

779
00:29:59,200 --> 00:30:00,399
full slide

780
00:30:00,399 --> 00:30:02,720
so take a look at the

781
00:30:02,720 --> 00:30:05,360
left hand side where i have

782
00:30:05,360 --> 00:30:09,600
the startup config command given under

783
00:30:09,600 --> 00:30:12,799
the sr linux and cus containers

784
00:30:12,799 --> 00:30:15,120
what it means is that

785
00:30:15,120 --> 00:30:18,320
the these nodes will take those files

786
00:30:18,320 --> 00:30:19,919
which should be available on your

787
00:30:19,919 --> 00:30:20,960
machine

788
00:30:20,960 --> 00:30:24,080
and they will use it as a startup config

789
00:30:24,080 --> 00:30:27,039
now you can guess that the way it works

790
00:30:27,039 --> 00:30:28,799
is that you create your use case

791
00:30:28,799 --> 00:30:31,120
manually you can tap those commands as i

792
00:30:31,120 --> 00:30:33,360
just did for the demo and then you can

793
00:30:33,360 --> 00:30:35,919
save those files in some location and

794
00:30:35,919 --> 00:30:38,000
you can refer to them next time you

795
00:30:38,000 --> 00:30:39,440
start up your lab

796
00:30:39,440 --> 00:30:42,080
and then the labs the the nodes will

797
00:30:42,080 --> 00:30:45,039
come up already online with the config

798
00:30:45,039 --> 00:30:48,159
that is provided in those files

799
00:30:48,159 --> 00:30:50,399
and for the go bgp

800
00:30:50,399 --> 00:30:52,000
because it doesn't have a notion of a

801
00:30:52,000 --> 00:30:54,320
startup config per se we will use the

802
00:30:54,320 --> 00:30:56,880
docker bind so we will bind the go bgp

803
00:30:56,880 --> 00:30:59,679
shell script that i prepared to the

804
00:30:59,679 --> 00:31:01,919
slash go bgp shell location inside the

805
00:31:01,919 --> 00:31:03,919
container and then when you start the

806
00:31:03,919 --> 00:31:06,559
lab these two guys will come with the

807
00:31:06,559 --> 00:31:08,320
startup config already prepared and

808
00:31:08,320 --> 00:31:10,880
booted and for the go bgp you need to

809
00:31:10,880 --> 00:31:13,360
just execute this script and it will do

810
00:31:13,360 --> 00:31:14,559
all its

811
00:31:14,559 --> 00:31:17,039
forklifting with configuring the obg

812
00:31:17,039 --> 00:31:20,240
daemon and making the route announcement

813
00:31:20,240 --> 00:31:21,679
so now

814
00:31:21,679 --> 00:31:24,559
this thing can be checked into the git

815
00:31:24,559 --> 00:31:26,799
with all these files as a startup config

816
00:31:26,799 --> 00:31:28,640
and with go bgp

817
00:31:28,640 --> 00:31:30,000
shell script

818
00:31:30,000 --> 00:31:32,559
and anybody can pull it and replicate

819
00:31:32,559 --> 00:31:35,919
exactly the same stuff that i just did

820
00:31:35,919 --> 00:31:38,480
and that is what i did for the

821
00:31:38,480 --> 00:31:40,960
uh repository that you see on this slide

822
00:31:40,960 --> 00:31:43,840
so if you check this repository it has

823
00:31:43,840 --> 00:31:46,320
all these files and all the instructions

824
00:31:46,320 --> 00:31:48,559
how to run it all you need to do is just

825
00:31:48,559 --> 00:31:50,720
pull the container images for nokia's

826
00:31:50,720 --> 00:31:52,559
linux you can use the github container

827
00:31:52,559 --> 00:31:54,080
register and pull it without any

828
00:31:54,080 --> 00:31:57,120
obligations for cos you would need to

829
00:31:57,120 --> 00:31:59,039
register with the arista website and

830
00:31:59,039 --> 00:32:01,279
download guitar archive but at the end

831
00:32:01,279 --> 00:32:02,960
of the day you will be able to run this

832
00:32:02,960 --> 00:32:03,760
lab

833
00:32:03,760 --> 00:32:06,159
exactly as i just did on any machine

834
00:32:06,159 --> 00:32:07,279
that you have

835
00:32:07,279 --> 00:32:09,120
that's really a nice thing about

836
00:32:09,120 --> 00:32:11,840
container lab

837
00:32:11,840 --> 00:32:12,799
okay

838
00:32:12,799 --> 00:32:16,480
we just saw a lab which consists of

839
00:32:16,480 --> 00:32:18,559
containerized network operating systems

840
00:32:18,559 --> 00:32:19,679
that is the

841
00:32:19,679 --> 00:32:22,480
prime thing for container lab but we not

842
00:32:22,480 --> 00:32:24,960
only have containerized support we not

843
00:32:24,960 --> 00:32:27,360
only have containerized

844
00:32:27,360 --> 00:32:29,360
operating systems that we support

845
00:32:29,360 --> 00:32:32,000
currently we have nine different vendors

846
00:32:32,000 --> 00:32:34,480
and 15 different operating systems out

847
00:32:34,480 --> 00:32:35,440
of which

848
00:32:35,440 --> 00:32:36,480
60

849
00:32:36,480 --> 00:32:39,279
are actually vm based nodes and only 40

850
00:32:39,279 --> 00:32:41,679
of them are containerized nodes so that

851
00:32:41,679 --> 00:32:43,279
means that we can run

852
00:32:43,279 --> 00:32:45,519
not only containerized network operating

853
00:32:45,519 --> 00:32:48,399
system but vm-based ones as well

854
00:32:48,399 --> 00:32:51,919
so here i show the kinds that correspond

855
00:32:51,919 --> 00:32:52,799
to

856
00:32:52,799 --> 00:32:55,039
each vendor and the operating system

857
00:32:55,039 --> 00:32:56,480
that we support

858
00:32:56,480 --> 00:32:58,799
and we also have this nice pictogram of

859
00:32:58,799 --> 00:33:01,679
a container which indicates which image

860
00:33:01,679 --> 00:33:04,240
is a containerized package and which is

861
00:33:04,240 --> 00:33:05,840
a vm

862
00:33:05,840 --> 00:33:08,399
so as you see we have quite some support

863
00:33:08,399 --> 00:33:09,440
for the

864
00:33:09,440 --> 00:33:11,919
most common or most wanted vendors

865
00:33:11,919 --> 00:33:14,640
we do not have like a sheer support for

866
00:33:14,640 --> 00:33:17,200
some obnoxious vendor operating systems

867
00:33:17,200 --> 00:33:19,760
but still there's quite a lot of things

868
00:33:19,760 --> 00:33:21,360
that you can do already with container

869
00:33:21,360 --> 00:33:22,720
lab and of course contributions are

870
00:33:22,720 --> 00:33:25,600
welcome if you want to add more

871
00:33:25,600 --> 00:33:27,840
now you might wonder how do we make

872
00:33:27,840 --> 00:33:29,200
vm

873
00:33:29,200 --> 00:33:31,039
play in the same kind of containerized

874
00:33:31,039 --> 00:33:32,960
field with containers

875
00:33:32,960 --> 00:33:34,240
and

876
00:33:34,240 --> 00:33:36,559
before we made some

877
00:33:36,559 --> 00:33:40,240
things uh in the uh and before we made

878
00:33:40,240 --> 00:33:44,240
some uh integrations for vms

879
00:33:44,240 --> 00:33:46,559
in container lab we actually used a

880
00:33:46,559 --> 00:33:49,120
simple linux bridge to

881
00:33:49,120 --> 00:33:51,039
make sure that containers can talk to

882
00:33:51,039 --> 00:33:54,080
vms but that poses posed a problem

883
00:33:54,080 --> 00:33:56,640
because when you have a vm that is

884
00:33:56,640 --> 00:33:58,799
separately deployed and containers are

885
00:33:58,799 --> 00:34:01,519
deployed in a topology file there is no

886
00:34:01,519 --> 00:34:03,679
unification between the startup process

887
00:34:03,679 --> 00:34:04,840
you can

888
00:34:04,840 --> 00:34:08,000
really yeah you can really

889
00:34:08,000 --> 00:34:10,320
have problems with running those as a

890
00:34:10,320 --> 00:34:11,839
single entity

891
00:34:11,839 --> 00:34:13,918
so what we did actually is that we made

892
00:34:13,918 --> 00:34:16,560
sure that we can run vms

893
00:34:16,560 --> 00:34:18,879
inside the container so that it can be

894
00:34:18,879 --> 00:34:20,480
part of the same topology file that

895
00:34:20,480 --> 00:34:22,639
container lab will take and deploy the

896
00:34:22,639 --> 00:34:23,599
labs

897
00:34:23,599 --> 00:34:25,520
so the way it works is that we leverage

898
00:34:25,520 --> 00:34:28,639
the vr netlab open source project which

899
00:34:28,639 --> 00:34:31,918
allows to package a camo and of course

900
00:34:31,918 --> 00:34:33,199
the

901
00:34:33,199 --> 00:34:35,599
vm disk image inside the container and

902
00:34:35,599 --> 00:34:37,359
then as far as container lab is

903
00:34:37,359 --> 00:34:40,079
concerned it is just a regular container

904
00:34:40,079 --> 00:34:41,679
it will just spin it up

905
00:34:41,679 --> 00:34:45,599
and inside it will run your usual dmx or

906
00:34:45,599 --> 00:34:48,960
ios 6c or what have you

907
00:34:48,960 --> 00:34:50,399
so

908
00:34:50,399 --> 00:34:52,879
now as i mentioned we have a lot of

909
00:34:52,879 --> 00:34:55,839
operating systems already supported

910
00:34:55,839 --> 00:34:58,079
and it might be challenging for you to

911
00:34:58,079 --> 00:34:59,040
start

912
00:34:59,040 --> 00:35:01,520
not knowing the rows or ropes of the

913
00:35:01,520 --> 00:35:04,720
game to make this process easier for you

914
00:35:04,720 --> 00:35:07,520
we created the lab examples for

915
00:35:07,520 --> 00:35:09,359
practically every network operating

916
00:35:09,359 --> 00:35:11,280
system that we integrated with container

917
00:35:11,280 --> 00:35:13,040
lab so if you will go to the container

918
00:35:13,040 --> 00:35:15,599
lab.xr linux.dev you will have the lab

919
00:35:15,599 --> 00:35:18,720
examples section in the in the top menu

920
00:35:18,720 --> 00:35:21,280
and you will have on the left hand side

921
00:35:21,280 --> 00:35:24,079
all the various labs that we created for

922
00:35:24,079 --> 00:35:26,320
you with different operating systems so

923
00:35:26,320 --> 00:35:28,800
you can jump start with the operating

924
00:35:28,800 --> 00:35:31,599
system of your choice

925
00:35:31,599 --> 00:35:33,839
okay so that was the

926
00:35:33,839 --> 00:35:35,760
pretty basic example of container app

927
00:35:35,760 --> 00:35:39,119
but it allowed us to you know to start

928
00:35:39,119 --> 00:35:40,320
getting

929
00:35:40,320 --> 00:35:42,720
going with it but we have

930
00:35:42,720 --> 00:35:46,000
of course ability to run more advanced

931
00:35:46,000 --> 00:35:48,000
labs with container lab not only some

932
00:35:48,000 --> 00:35:50,000
something small as the three nodes labs

933
00:35:50,000 --> 00:35:52,160
and i invite my colleague corrine here

934
00:35:52,160 --> 00:35:55,119
to tell you more about it so the floor

935
00:35:55,119 --> 00:35:56,880
is yours karim

936
00:35:56,880 --> 00:35:59,599
hi uh okay so today i'll take you

937
00:35:59,599 --> 00:36:02,079
through a short

938
00:36:02,079 --> 00:36:04,640
demo of container lab a little bit

939
00:36:04,640 --> 00:36:07,040
more advanced using some of container

940
00:36:07,040 --> 00:36:08,320
lab

941
00:36:08,320 --> 00:36:09,520
more

942
00:36:09,520 --> 00:36:12,720
let's say advanced configuration fields

943
00:36:12,720 --> 00:36:14,960
so so far you've seen

944
00:36:14,960 --> 00:36:17,040
some of the basic

945
00:36:17,040 --> 00:36:18,880
commands that you can use

946
00:36:18,880 --> 00:36:21,920
and set under a note in your topology

947
00:36:21,920 --> 00:36:25,280
file such as kind type or the image

948
00:36:25,280 --> 00:36:28,000
you also have seen a startup config to

949
00:36:28,000 --> 00:36:30,960
start your containers with

950
00:36:30,960 --> 00:36:34,560
a predefined configuration

951
00:36:34,560 --> 00:36:36,079
there are also or there is also the

952
00:36:36,079 --> 00:36:39,440
possibility to create binds to share

953
00:36:39,440 --> 00:36:40,400
files

954
00:36:40,400 --> 00:36:42,480
from your localhost

955
00:36:42,480 --> 00:36:44,720
to the different nodes so those files

956
00:36:44,720 --> 00:36:47,680
can be shared in read to write or read

957
00:36:47,680 --> 00:36:48,560
only

958
00:36:48,560 --> 00:36:50,079
modes

959
00:36:50,079 --> 00:36:52,720
you can also bind ports

960
00:36:52,720 --> 00:36:54,640
between the nodes and

961
00:36:54,640 --> 00:36:57,920
your host to expose services running

962
00:36:57,920 --> 00:36:59,680
in your nodes whether it's

963
00:36:59,680 --> 00:37:03,520
gmi servers gny servers http servers if

964
00:37:03,520 --> 00:37:06,000
you need to and you can see that the

965
00:37:06,000 --> 00:37:07,280
syntax is

966
00:37:07,280 --> 00:37:10,320
similar if not exactly the same as

967
00:37:10,320 --> 00:37:11,359
the

968
00:37:11,359 --> 00:37:12,880
docker compose

969
00:37:12,880 --> 00:37:15,440
file so that allows you to

970
00:37:15,440 --> 00:37:17,680
copy your existing configurations

971
00:37:17,680 --> 00:37:20,839
directly into container labs

972
00:37:20,839 --> 00:37:24,320
topologies you can also or you have also

973
00:37:24,320 --> 00:37:27,359
control over the user that

974
00:37:27,359 --> 00:37:28,160
will

975
00:37:28,160 --> 00:37:29,520
spawn your

976
00:37:29,520 --> 00:37:31,680
container process if

977
00:37:31,680 --> 00:37:35,200
your image needs that

978
00:37:35,359 --> 00:37:38,160
uh with the nv field you can

979
00:37:38,160 --> 00:37:40,000
set environment variables that your

980
00:37:40,000 --> 00:37:43,200
container can use so if your application

981
00:37:43,200 --> 00:37:45,680
uh can use environment variables for

982
00:37:45,680 --> 00:37:48,560
configuration you can uh set that

983
00:37:48,560 --> 00:37:51,760
directly into the container lab topology

984
00:37:51,760 --> 00:37:53,359
file so

985
00:37:53,359 --> 00:37:56,240
this can be used for example to run

986
00:37:56,240 --> 00:37:58,640
multiple instances of the same

987
00:37:58,640 --> 00:38:01,440
application or if the same node with the

988
00:38:01,440 --> 00:38:03,359
same configuration file and you can

989
00:38:03,359 --> 00:38:05,839
customize the different instances

990
00:38:05,839 --> 00:38:07,359
using the environment

991
00:38:07,359 --> 00:38:09,839
variables

992
00:38:10,079 --> 00:38:12,880
command allows you to override the

993
00:38:12,880 --> 00:38:14,160
command that was

994
00:38:14,160 --> 00:38:16,720
set when the container was built that

995
00:38:16,720 --> 00:38:19,200
allows you to further customize

996
00:38:19,200 --> 00:38:20,079
your

997
00:38:20,079 --> 00:38:21,760
images and

998
00:38:21,760 --> 00:38:23,990
run containers

999
00:38:23,990 --> 00:38:25,200
[Music]

1000
00:38:25,200 --> 00:38:26,480
label field

1001
00:38:26,480 --> 00:38:27,920
allows you to assign

1002
00:38:27,920 --> 00:38:30,640
docker labels to your images

1003
00:38:30,640 --> 00:38:33,119
that way you'll be able to

1004
00:38:33,119 --> 00:38:36,160
query a certain subset uh of the nodes

1005
00:38:36,160 --> 00:38:40,000
running uh in your topology or filter uh

1006
00:38:40,000 --> 00:38:43,280
the ones you don't need

1007
00:38:43,280 --> 00:38:44,839
to have for

1008
00:38:44,839 --> 00:38:49,280
that specific command you are running

1009
00:38:49,280 --> 00:38:53,440
so there is also a management ipv4

1010
00:38:53,440 --> 00:38:56,000
field that allows you to set

1011
00:38:56,000 --> 00:38:58,640
a static ip as a management id for your

1012
00:38:58,640 --> 00:39:01,200
nodes and a similar field exists for

1013
00:39:01,200 --> 00:39:04,320
ipv6 management underscore ipv6

1014
00:39:04,320 --> 00:39:06,800
uh the full list of configuration

1015
00:39:06,800 --> 00:39:09,440
options uh is available in the link you

1016
00:39:09,440 --> 00:39:12,160
can see at the bottom of the slide so i

1017
00:39:12,160 --> 00:39:14,800
encourage you to go there and read more

1018
00:39:14,800 --> 00:39:17,440
details uh about them

1019
00:39:17,440 --> 00:39:18,400
so

1020
00:39:18,400 --> 00:39:22,800
next let's let's try to see a lab or uh

1021
00:39:22,800 --> 00:39:24,960
deploy a lab that uses some of these uh

1022
00:39:24,960 --> 00:39:26,640
configuration options

1023
00:39:26,640 --> 00:39:29,760
so uh the lab i will go through today is

1024
00:39:29,760 --> 00:39:34,240
a streaming uh telemetry lab using a

1025
00:39:34,240 --> 00:39:37,680
standard uh streaming telemetry stack

1026
00:39:37,680 --> 00:39:39,760
uh so generalized key as a collector

1027
00:39:39,760 --> 00:39:42,880
prometheus as a psdb

1028
00:39:42,880 --> 00:39:45,920
and graphana for visualization

1029
00:39:45,920 --> 00:39:48,000
console is also there

1030
00:39:48,000 --> 00:39:50,160
and it will be used for

1031
00:39:50,160 --> 00:39:52,320
service registration and orchestration

1032
00:39:52,320 --> 00:39:53,760
and that will

1033
00:39:53,760 --> 00:39:57,839
allow us to stitch the different

1034
00:39:58,640 --> 00:40:01,680
telemetry stack layers together

1035
00:40:01,680 --> 00:40:02,720
the

1036
00:40:02,720 --> 00:40:05,280
network topology itself will be a

1037
00:40:05,280 --> 00:40:09,280
standard claw topology with two pods two

1038
00:40:09,280 --> 00:40:12,079
spines and four leaves each and uh those

1039
00:40:12,079 --> 00:40:14,640
two parts will be interconnected with a

1040
00:40:14,640 --> 00:40:16,960
layer of two uh super spines

1041
00:40:16,960 --> 00:40:18,319
so um

1042
00:40:18,319 --> 00:40:20,720
all the notes in this topology will be

1043
00:40:20,720 --> 00:40:24,079
nokia's sr linux image using the image

1044
00:40:24,079 --> 00:40:25,359
that's available

1045
00:40:25,359 --> 00:40:27,200
publicly

1046
00:40:27,200 --> 00:40:28,400
so

1047
00:40:28,400 --> 00:40:31,200
this topology will be

1048
00:40:31,200 --> 00:40:34,640
deployed using

1049
00:40:34,720 --> 00:40:37,680
using github actions so

1050
00:40:37,680 --> 00:40:40,079
it will be triggered via

1051
00:40:40,079 --> 00:40:40,960
push

1052
00:40:40,960 --> 00:40:43,680
of a tag that

1053
00:40:43,680 --> 00:40:47,680
is named a certain way and those actions

1054
00:40:47,680 --> 00:40:49,520
will deploy the lab

1055
00:40:49,520 --> 00:40:51,599
and configure it on a self

1056
00:40:51,599 --> 00:40:53,440
hosted runner

1057
00:40:53,440 --> 00:40:56,560
okay so the whole uh all the files and

1058
00:40:56,560 --> 00:40:58,800
the configuration used in

1059
00:40:58,800 --> 00:41:01,359
the demo that's coming next can be found

1060
00:41:01,359 --> 00:41:02,319
in that

1061
00:41:02,319 --> 00:41:04,240
github repo

1062
00:41:04,240 --> 00:41:06,960
listed down

1063
00:41:06,960 --> 00:41:08,480
so let's have a

1064
00:41:08,480 --> 00:41:10,560
closer look at the telemetry stack

1065
00:41:10,560 --> 00:41:13,040
itself so uh

1066
00:41:13,040 --> 00:41:15,599
in this uh lab we will have three

1067
00:41:15,599 --> 00:41:18,319
instances of gmic running

1068
00:41:18,319 --> 00:41:20,480
as a cluster the three instances will

1069
00:41:20,480 --> 00:41:24,560
use uh console for leader election and

1070
00:41:24,560 --> 00:41:28,000
target uh load sharing and dispatching

1071
00:41:28,000 --> 00:41:32,079
uh each uh instance of uh genomic will

1072
00:41:32,079 --> 00:41:35,119
go and discover the nodes that are

1073
00:41:35,119 --> 00:41:38,240
running in the topology using a

1074
00:41:38,240 --> 00:41:40,400
docker loader feature which

1075
00:41:40,400 --> 00:41:43,359
allows gnmic to discover

1076
00:41:43,359 --> 00:41:45,520
docker images or docker containers

1077
00:41:45,520 --> 00:41:46,960
running

1078
00:41:46,960 --> 00:41:49,839
on a specified host

1079
00:41:49,839 --> 00:41:51,839
these genomic

1080
00:41:51,839 --> 00:41:54,400
instances will also register

1081
00:41:54,400 --> 00:41:57,119
a prometheus server in console and

1082
00:41:57,119 --> 00:42:00,640
expose http endpoints for prometheus to

1083
00:42:00,640 --> 00:42:01,680
to scrape

1084
00:42:01,680 --> 00:42:02,400
so

1085
00:42:02,400 --> 00:42:04,880
uh the prometheus server itself will

1086
00:42:04,880 --> 00:42:07,599
discover the gnmic

1087
00:42:07,599 --> 00:42:10,160
prometheus outputs by querying the

1088
00:42:10,160 --> 00:42:14,960
servers the services list from console

1089
00:42:14,960 --> 00:42:17,839
grafana is also part of

1090
00:42:17,839 --> 00:42:20,640
this lab and graphene boots with

1091
00:42:20,640 --> 00:42:23,200
prometheus and a few prometheus as a

1092
00:42:23,200 --> 00:42:26,000
data source pre-configured and then a

1093
00:42:26,000 --> 00:42:31,440
few dashboards that are pre-loaded

1094
00:42:31,440 --> 00:42:34,960
there are also four clients so uh

1095
00:42:34,960 --> 00:42:36,720
linux

1096
00:42:36,720 --> 00:42:39,119
linux images running there connected to

1097
00:42:39,119 --> 00:42:41,040
the leads so each there are four clients

1098
00:42:41,040 --> 00:42:44,400
each client is connected to a pair of so

1099
00:42:44,400 --> 00:42:47,040
those clients are uh not configured

1100
00:42:47,040 --> 00:42:49,440
in this in this lab and the purpose here

1101
00:42:49,440 --> 00:42:50,319
is to

1102
00:42:50,319 --> 00:42:51,599
be able to

1103
00:42:51,599 --> 00:42:53,760
generate some traffic through the leaves

1104
00:42:53,760 --> 00:42:54,960
send

1105
00:42:54,960 --> 00:42:56,640
send packets from one client to the

1106
00:42:56,640 --> 00:42:59,839
other through the topology and see what

1107
00:42:59,839 --> 00:43:02,079
what happens and test your

1108
00:43:02,079 --> 00:43:04,720
your configurations

1109
00:43:04,720 --> 00:43:07,440
so when it comes to the network topology

1110
00:43:07,440 --> 00:43:09,520
itself so um

1111
00:43:09,520 --> 00:43:12,880
we have uh super spine spines and leaves

1112
00:43:12,880 --> 00:43:14,480
the super spines

1113
00:43:14,480 --> 00:43:16,400
belong to the same

1114
00:43:16,400 --> 00:43:18,400
bgp as

1115
00:43:18,400 --> 00:43:19,760
each pair of

1116
00:43:19,760 --> 00:43:22,240
two spines has its own

1117
00:43:22,240 --> 00:43:24,400
autonomous system and each leaf is a

1118
00:43:24,400 --> 00:43:25,359
separate

1119
00:43:25,359 --> 00:43:26,880
autonomous system

1120
00:43:26,880 --> 00:43:28,400
so um

1121
00:43:28,400 --> 00:43:30,160
what i want to point out with this slide

1122
00:43:30,160 --> 00:43:33,440
is that uh each spine will have uh

1123
00:43:33,440 --> 00:43:36,079
six neighbors and that's basically the

1124
00:43:36,079 --> 00:43:38,640
criteria we will use to determine if our

1125
00:43:38,640 --> 00:43:41,839
lab started successfully or not

1126
00:43:41,839 --> 00:43:44,560
more advanced checks can be added of

1127
00:43:44,560 --> 00:43:46,319
course but for the purpose of this demo

1128
00:43:46,319 --> 00:43:48,160
we'll just stop by checking the number

1129
00:43:48,160 --> 00:43:49,119
of

1130
00:43:49,119 --> 00:43:52,000
neighbors for each of these

1131
00:43:52,000 --> 00:43:53,200
okay

1132
00:43:53,200 --> 00:43:56,000
so with that i will um

1133
00:43:56,000 --> 00:43:59,599
let's have a look uh at the

1134
00:43:59,599 --> 00:44:04,319
topology itself so uh by now i think you

1135
00:44:04,319 --> 00:44:06,079
know uh the different

1136
00:44:06,079 --> 00:44:09,359
fields that container lab uses in a

1137
00:44:09,359 --> 00:44:11,440
topology file so we have the defaults

1138
00:44:11,440 --> 00:44:15,359
here our default kind would be srm

1139
00:44:15,359 --> 00:44:17,680
and that kind will use the

1140
00:44:17,680 --> 00:44:18,640
srl

1141
00:44:18,640 --> 00:44:20,720
publicly available

1142
00:44:20,720 --> 00:44:24,000
container image under notes we have two

1143
00:44:24,000 --> 00:44:25,599
super spines four

1144
00:44:25,599 --> 00:44:27,599
spines and eight leaves

1145
00:44:27,599 --> 00:44:31,119
the super spines will be of type ixr6

1146
00:44:31,119 --> 00:44:31,920
the

1147
00:44:31,920 --> 00:44:34,720
spines will use the default type which

1148
00:44:34,720 --> 00:44:35,520
is

1149
00:44:35,520 --> 00:44:39,359
ixr d3 and r

1150
00:44:39,359 --> 00:44:41,760
all part of the group that is called

1151
00:44:41,760 --> 00:44:44,000
spines the purpose of the field group

1152
00:44:44,000 --> 00:44:45,359
here is to

1153
00:44:45,359 --> 00:44:47,520
group nodes together and they will all

1154
00:44:47,520 --> 00:44:49,119
have the same

1155
00:44:49,119 --> 00:44:50,560
docker container

1156
00:44:50,560 --> 00:44:51,599
label

1157
00:44:51,599 --> 00:44:52,560
called

1158
00:44:52,560 --> 00:44:54,560
container lab dash node dash group so

1159
00:44:54,560 --> 00:44:57,040
that allows us to run a single command

1160
00:44:57,040 --> 00:44:58,160
on all

1161
00:44:58,160 --> 00:45:00,560
the spines atoms

1162
00:45:00,560 --> 00:45:03,440
the leaves do not have any

1163
00:45:03,440 --> 00:45:05,280
configuration under them so they will

1164
00:45:05,280 --> 00:45:06,800
inherit

1165
00:45:06,800 --> 00:45:09,680
the kind and the default field so there

1166
00:45:09,680 --> 00:45:10,560
will be

1167
00:45:10,560 --> 00:45:11,599
srl

1168
00:45:11,599 --> 00:45:13,680
of current srl with the default type

1169
00:45:13,680 --> 00:45:16,319
ixrd3

1170
00:45:16,319 --> 00:45:18,800
as part of the topology we also have

1171
00:45:18,800 --> 00:45:22,880
four clients those are uh standard linux

1172
00:45:22,880 --> 00:45:24,960
images and belong to the group uh

1173
00:45:24,960 --> 00:45:27,359
clients

1174
00:45:27,839 --> 00:45:30,800
so coming to the uh telemetry stack so

1175
00:45:30,800 --> 00:45:33,280
as i mentioned uh

1176
00:45:33,280 --> 00:45:35,359
in the previous slide so we have three

1177
00:45:35,359 --> 00:45:38,160
instances of uh gmic acting as a

1178
00:45:38,160 --> 00:45:41,359
collector and gmic here uh

1179
00:45:41,359 --> 00:45:43,200
is using some of the advanced

1180
00:45:43,200 --> 00:45:45,839
configuration option options i mentioned

1181
00:45:45,839 --> 00:45:49,599
so uh default kind is or its kind is uh

1182
00:45:49,599 --> 00:45:52,480
linux and it has the few binds here so

1183
00:45:52,480 --> 00:45:54,720
the first bind is mounting the uh

1184
00:45:54,720 --> 00:45:56,800
default configuration file of gmic where

1185
00:45:56,800 --> 00:45:58,400
you set your

1186
00:45:58,400 --> 00:46:00,480
username and password for your targets

1187
00:46:00,480 --> 00:46:02,640
where you set uh the subscription and

1188
00:46:02,640 --> 00:46:06,079
the gmail paths that you want uh

1189
00:46:06,079 --> 00:46:09,520
to subscribe to the output in this case

1190
00:46:09,520 --> 00:46:10,720
it would be

1191
00:46:10,720 --> 00:46:13,200
a prometheus output so you can set the

1192
00:46:13,200 --> 00:46:16,079
type of output the address that will be

1193
00:46:16,079 --> 00:46:20,480
uh exposed to the prometheus server

1194
00:46:20,480 --> 00:46:22,560
the second bind is

1195
00:46:22,560 --> 00:46:23,520
the

1196
00:46:23,520 --> 00:46:26,560
docker unix socket file so what this

1197
00:46:26,560 --> 00:46:28,240
allows you to do or

1198
00:46:28,240 --> 00:46:31,359
let's jnmic do is have access to the

1199
00:46:31,359 --> 00:46:33,920
docker api that's running on the host

1200
00:46:33,920 --> 00:46:35,760
over the unix socket and allows it to

1201
00:46:35,760 --> 00:46:38,079
discover the nodes or the containers

1202
00:46:38,079 --> 00:46:42,000
that are running on dogs

1203
00:46:42,000 --> 00:46:44,720
ports here uh bind uh external and

1204
00:46:44,720 --> 00:46:47,440
internal ports uh to the container so

1205
00:46:47,440 --> 00:46:51,280
the first port is generici's uh rest api

1206
00:46:51,280 --> 00:46:53,599
which is used for uh clustering in this

1207
00:46:53,599 --> 00:46:55,920
case and the second part is the

1208
00:46:55,920 --> 00:46:58,800
prometheus output and point that

1209
00:46:58,800 --> 00:47:01,839
the prometheus server will script

1210
00:47:01,839 --> 00:47:04,960
so um these are these ports are exposed

1211
00:47:04,960 --> 00:47:06,640
and configured using

1212
00:47:06,640 --> 00:47:08,800
environment variables so

1213
00:47:08,800 --> 00:47:10,480
the api the

1214
00:47:10,480 --> 00:47:12,400
instance name the service address that

1215
00:47:12,400 --> 00:47:16,000
will be registered with uh console and

1216
00:47:16,000 --> 00:47:18,960
then the address which

1217
00:47:18,960 --> 00:47:21,760
gmyc will listen to and that prometheus

1218
00:47:21,760 --> 00:47:23,680
will go and scrape

1219
00:47:23,680 --> 00:47:24,880
so the

1220
00:47:24,880 --> 00:47:27,280
second genome ic instance using uses the

1221
00:47:27,280 --> 00:47:28,240
same

1222
00:47:28,240 --> 00:47:30,640
configuration file

1223
00:47:30,640 --> 00:47:32,880
but we will use the environment variable

1224
00:47:32,880 --> 00:47:34,480
to overwrite

1225
00:47:34,480 --> 00:47:36,480
some of the specific configuration that

1226
00:47:36,480 --> 00:47:39,440
the second instance needs

1227
00:47:39,440 --> 00:47:42,160
so here namely the api address or the

1228
00:47:42,160 --> 00:47:45,040
api port the instance name the service

1229
00:47:45,040 --> 00:47:48,880
address and uh the prometheus and

1230
00:47:48,880 --> 00:47:50,720
same goes for

1231
00:47:50,720 --> 00:47:53,680
the third instance

1232
00:47:53,680 --> 00:47:56,640
so next we have the console agent uh

1233
00:47:56,640 --> 00:47:58,400
there is nothing new or nothing special

1234
00:47:58,400 --> 00:48:00,800
here it's just a console agent

1235
00:48:00,800 --> 00:48:03,599
that's started and

1236
00:48:03,599 --> 00:48:06,400
as i mentioned before will be used to

1237
00:48:06,400 --> 00:48:08,880
register services and allow other nodes

1238
00:48:08,880 --> 00:48:11,760
to discover those services

1239
00:48:11,760 --> 00:48:15,040
prometheus boots with pretty much

1240
00:48:15,040 --> 00:48:17,599
a default config we mount this folder

1241
00:48:17,599 --> 00:48:20,480
here that has a configuration file that

1242
00:48:20,480 --> 00:48:22,800
specifies the different uh jobs that

1243
00:48:22,800 --> 00:48:24,319
prometheus will

1244
00:48:24,319 --> 00:48:26,400
run which is

1245
00:48:26,400 --> 00:48:29,359
scraping the gnmic instances that are

1246
00:48:29,359 --> 00:48:32,558
running as part of the lip

1247
00:48:32,800 --> 00:48:36,319
graphana uses uh the binds option and we

1248
00:48:36,319 --> 00:48:39,440
mount uh this data source yaml file that

1249
00:48:39,440 --> 00:48:41,599
sets prometheus as a data source in

1250
00:48:41,599 --> 00:48:42,720
rafana

1251
00:48:42,720 --> 00:48:45,119
uh we mount this dashboards.tml file

1252
00:48:45,119 --> 00:48:47,440
which specifies which dashboards should

1253
00:48:47,440 --> 00:48:48,880
be

1254
00:48:48,880 --> 00:48:52,640
loaded on startup and then

1255
00:48:52,640 --> 00:48:54,720
this directory graphing dashboards

1256
00:48:54,720 --> 00:48:57,200
contains the json definition of

1257
00:48:57,200 --> 00:48:58,160
those

1258
00:48:58,160 --> 00:49:00,079
dashboards

1259
00:49:00,079 --> 00:49:01,040
then

1260
00:49:01,040 --> 00:49:03,200
just like with the previous lab the list

1261
00:49:03,200 --> 00:49:07,280
of links between the different nodes

1262
00:49:07,280 --> 00:49:08,480
so this

1263
00:49:08,480 --> 00:49:11,280
lab can be started with this uh with a

1264
00:49:11,280 --> 00:49:14,880
script run dot sh so you can just clone

1265
00:49:14,880 --> 00:49:16,800
this repo and run

1266
00:49:16,800 --> 00:49:18,800
the script you will have

1267
00:49:18,800 --> 00:49:21,920
the whole lab up and running but

1268
00:49:21,920 --> 00:49:23,920
what i will do today is

1269
00:49:23,920 --> 00:49:28,640
run it using a github workflow

1270
00:49:28,640 --> 00:49:31,760
so uh this uh github action or github

1271
00:49:31,760 --> 00:49:32,960
workflow

1272
00:49:32,960 --> 00:49:35,200
is called deploy and will be uh

1273
00:49:35,200 --> 00:49:37,359
triggered either manually

1274
00:49:37,359 --> 00:49:41,119
if the workflow is dispatched or if

1275
00:49:41,119 --> 00:49:44,160
a tag starting with the letter v is

1276
00:49:44,160 --> 00:49:48,160
pushed to the ripple what this um

1277
00:49:48,160 --> 00:49:50,640
workflow will do is uh

1278
00:49:50,640 --> 00:49:52,319
install container lab if it's not

1279
00:49:52,319 --> 00:49:55,839
installed install gmic deploy the lab

1280
00:49:55,839 --> 00:49:57,200
and then go through different

1281
00:49:57,200 --> 00:49:59,040
configuration steps so configuring the

1282
00:49:59,040 --> 00:50:01,280
interfaces of interfaces routing

1283
00:50:01,280 --> 00:50:03,760
policies the network instance and then

1284
00:50:03,760 --> 00:50:04,800
bgp

1285
00:50:04,800 --> 00:50:08,400
all these configuration items will be

1286
00:50:08,400 --> 00:50:09,760
pushed using

1287
00:50:09,760 --> 00:50:11,760
gmic

1288
00:50:11,760 --> 00:50:15,520
set command so gnmi set rpc and the

1289
00:50:15,520 --> 00:50:17,680
configuration payloads are templates

1290
00:50:17,680 --> 00:50:20,640
that are rendered when the configuration

1291
00:50:20,640 --> 00:50:22,720
is pushed

1292
00:50:22,720 --> 00:50:25,359
once the configuration

1293
00:50:25,359 --> 00:50:28,720
is is done we will check the bgp status

1294
00:50:28,720 --> 00:50:30,559
for each node if

1295
00:50:30,559 --> 00:50:33,280
one of the nodes has uh bgb

1296
00:50:33,280 --> 00:50:34,079
down

1297
00:50:34,079 --> 00:50:36,800
then the whole workflow will fail

1298
00:50:36,800 --> 00:50:37,920
and the

1299
00:50:37,920 --> 00:50:40,559
second check we will do is checking the

1300
00:50:40,559 --> 00:50:42,079
uh

1301
00:50:42,079 --> 00:50:43,440
the spines

1302
00:50:43,440 --> 00:50:45,440
uh the spines

1303
00:50:45,440 --> 00:50:48,400
number of neighbors if it is different

1304
00:50:48,400 --> 00:50:50,400
than six then we will assume that our

1305
00:50:50,400 --> 00:50:51,920
lab deployment

1306
00:50:51,920 --> 00:50:54,920
failed

1307
00:50:56,480 --> 00:50:57,839
so i'll

1308
00:50:57,839 --> 00:51:00,640
go ahead and

1309
00:51:02,559 --> 00:51:05,520
first i will check if there are any

1310
00:51:05,520 --> 00:51:08,079
nodes running here so there's there are

1311
00:51:08,079 --> 00:51:10,000
no docker containers running

1312
00:51:10,000 --> 00:51:11,359
on my server

1313
00:51:11,359 --> 00:51:14,640
and i will uh just uncomment this line

1314
00:51:14,640 --> 00:51:17,680
which uh will create a second link from

1315
00:51:17,680 --> 00:51:20,559
client one to uh the second leaf in the

1316
00:51:20,559 --> 00:51:21,440
first

1317
00:51:21,440 --> 00:51:23,839
part

1318
00:51:25,280 --> 00:51:27,520
um before that i

1319
00:51:27,520 --> 00:51:29,599
will just

1320
00:51:29,599 --> 00:51:32,240
check that the runner is

1321
00:51:32,240 --> 00:51:33,359
still

1322
00:51:33,359 --> 00:51:36,160
up so my runner is registered as a

1323
00:51:36,160 --> 00:51:38,960
self-hosted runner on the repo

1324
00:51:38,960 --> 00:51:41,200
and

1325
00:51:43,119 --> 00:51:47,880
the service is up and running

1326
00:51:53,200 --> 00:51:56,960
so i uncommented this line i'll

1327
00:51:56,960 --> 00:51:58,319
go ahead and

1328
00:51:58,319 --> 00:52:01,720
commit it

1329
00:52:07,280 --> 00:52:10,960
i'll push the commit

1330
00:52:12,800 --> 00:52:14,880
verify that it's there

1331
00:52:14,880 --> 00:52:17,440
so commit is

1332
00:52:17,440 --> 00:52:21,119
pushed i'll create a new tag for this

1333
00:52:21,119 --> 00:52:23,280
and then go ahead and push it and we

1334
00:52:23,280 --> 00:52:25,280
should see the action being triggered so

1335
00:52:25,280 --> 00:52:26,960
the next tag would be

1336
00:52:26,960 --> 00:52:28,880
let's say 0 1 3

1337
00:52:28,880 --> 00:52:32,599
so i'll add

1338
00:52:42,079 --> 00:52:44,800
this tag and then push it to the github

1339
00:52:44,800 --> 00:52:47,800
ribbon

1340
00:52:51,119 --> 00:52:53,359
okay

1341
00:52:53,590 --> 00:52:56,679
[Music]

1342
00:52:57,119 --> 00:52:58,640
let's

1343
00:52:58,640 --> 00:53:00,960
reload okay so uh

1344
00:53:00,960 --> 00:53:03,520
we can see that one action was uh

1345
00:53:03,520 --> 00:53:05,119
triggered so

1346
00:53:05,119 --> 00:53:06,319
uh the

1347
00:53:06,319 --> 00:53:08,640
action deploy was triggered

1348
00:53:08,640 --> 00:53:11,359
when this commit uh was uh pushed right

1349
00:53:11,359 --> 00:53:14,400
now we can go and check uh the different

1350
00:53:14,400 --> 00:53:17,200
steps or what's happening in there so we

1351
00:53:17,200 --> 00:53:19,359
can see that it started with

1352
00:53:19,359 --> 00:53:21,599
the actions that are defined or the jobs

1353
00:53:21,599 --> 00:53:23,760
that are defined within this action

1354
00:53:23,760 --> 00:53:26,400
uh installing container lab and gmic

1355
00:53:26,400 --> 00:53:29,040
were successful it is now

1356
00:53:29,040 --> 00:53:33,119
running the deploy lab step

1357
00:53:39,760 --> 00:53:40,960
so

1358
00:53:40,960 --> 00:53:43,280
you can see here in the logs that the

1359
00:53:43,280 --> 00:53:46,800
lab deployment was successfully done

1360
00:53:46,800 --> 00:53:49,119
successfully completed you can see the

1361
00:53:49,119 --> 00:53:52,160
full logs and the list of nodes

1362
00:53:52,160 --> 00:53:54,480
that were deployed the next steps would

1363
00:53:54,480 --> 00:53:55,599
be

1364
00:53:55,599 --> 00:53:57,760
configuration so the first one would be

1365
00:53:57,760 --> 00:53:59,040
configuring the interfaces

1366
00:53:59,040 --> 00:54:01,920
sub-interfaces routing policies so this

1367
00:54:01,920 --> 00:54:05,599
is the step that's ongoing

1368
00:54:05,599 --> 00:54:07,119
meanwhile we can

1369
00:54:07,119 --> 00:54:08,559
go and check

1370
00:54:08,559 --> 00:54:10,720
what's happening with console and

1371
00:54:10,720 --> 00:54:12,480
prometheus so if i

1372
00:54:12,480 --> 00:54:15,839
uh navigate to the uh console

1373
00:54:15,839 --> 00:54:18,640
web ui i can see that a couple of

1374
00:54:18,640 --> 00:54:21,599
services or external services are

1375
00:54:21,599 --> 00:54:23,440
registered here so the first one would

1376
00:54:23,440 --> 00:54:26,240
be the jmic api again used for

1377
00:54:26,240 --> 00:54:28,000
clustering but

1378
00:54:28,000 --> 00:54:30,079
what is interesting for us here is the

1379
00:54:30,079 --> 00:54:32,720
uh prometheus output so each one of

1380
00:54:32,720 --> 00:54:34,960
those uh gmic instances went and

1381
00:54:34,960 --> 00:54:36,480
registered its

1382
00:54:36,480 --> 00:54:38,640
address that promedias can

1383
00:54:38,640 --> 00:54:40,400
come discover and

1384
00:54:40,400 --> 00:54:41,360
scrape

1385
00:54:41,360 --> 00:54:43,200
[Music]

1386
00:54:43,200 --> 00:54:45,440
let's check

1387
00:54:45,440 --> 00:54:47,119
a prometheus

1388
00:54:47,119 --> 00:54:49,520
ui

1389
00:54:49,680 --> 00:54:52,559
so if i go to service discovery here i

1390
00:54:52,559 --> 00:54:54,799
can see that prometheus

1391
00:54:54,799 --> 00:54:57,119
discovered a couple of

1392
00:54:57,119 --> 00:54:59,520
services one called gmic internals the

1393
00:54:59,520 --> 00:55:02,240
second is called genomizing telemetry

1394
00:55:02,240 --> 00:55:06,160
the first one is generacy own internal

1395
00:55:06,160 --> 00:55:08,400
telemetry metrics or own internal

1396
00:55:08,400 --> 00:55:11,040
metrics the second one is

1397
00:55:11,040 --> 00:55:13,520
the metrics retrieved from the sr linux

1398
00:55:13,520 --> 00:55:18,200
nodes and exposed to prometheus

1399
00:55:20,400 --> 00:55:24,079
okay so uh it seems that uh all the uh

1400
00:55:24,079 --> 00:55:26,160
workflow steps were uh completed

1401
00:55:26,160 --> 00:55:28,079
successfully we can go and check the

1402
00:55:28,079 --> 00:55:30,720
logs of our uh

1403
00:55:30,720 --> 00:55:33,200
two less steps which are checking uh if

1404
00:55:33,200 --> 00:55:35,520
our bgp is up and

1405
00:55:35,520 --> 00:55:37,119
the splines have

1406
00:55:37,119 --> 00:55:39,680
exactly six neighbors so it seems that

1407
00:55:39,680 --> 00:55:43,040
we all have we have all thumbs up so all

1408
00:55:43,040 --> 00:55:44,480
the bgp

1409
00:55:44,480 --> 00:55:45,760
demons

1410
00:55:45,760 --> 00:55:48,160
or processors are up on all the nodes

1411
00:55:48,160 --> 00:55:49,200
and

1412
00:55:49,200 --> 00:55:51,839
uh the

1413
00:55:51,839 --> 00:55:54,079
pgp neighbors so each of the spines has

1414
00:55:54,079 --> 00:55:56,640
six uh bgp neighbors so

1415
00:55:56,640 --> 00:55:57,440
all

1416
00:55:57,440 --> 00:55:59,920
uh bgp sessions were established uh

1417
00:55:59,920 --> 00:56:01,119
successfully

1418
00:56:01,119 --> 00:56:02,960
um if i

1419
00:56:02,960 --> 00:56:07,200
come back to the terminal here and

1420
00:56:08,240 --> 00:56:09,359
check

1421
00:56:09,359 --> 00:56:11,359
the

1422
00:56:11,359 --> 00:56:13,160
topology state

1423
00:56:13,160 --> 00:56:14,960
[Music]

1424
00:56:14,960 --> 00:56:17,599
instead

1425
00:56:22,880 --> 00:56:26,400
let's make eyes a little bit bigger

1426
00:56:27,119 --> 00:56:29,599
so we have all the notes uh running in

1427
00:56:29,599 --> 00:56:31,680
here and we can

1428
00:56:31,680 --> 00:56:34,960
for example go and double check if uh

1429
00:56:34,960 --> 00:56:37,119
spine uh one one the first spine in the

1430
00:56:37,119 --> 00:56:40,640
first boat the pod has uh

1431
00:56:40,640 --> 00:56:41,520
all

1432
00:56:41,520 --> 00:56:45,079
the um

1433
00:56:45,760 --> 00:56:47,040
all the neighbors

1434
00:56:47,040 --> 00:56:49,200
up

1435
00:56:51,839 --> 00:56:56,279
so if i show the neighbors list

1436
00:57:01,760 --> 00:57:03,760
right so the spine has

1437
00:57:03,760 --> 00:57:05,920
four leaves as neighbors and two uh

1438
00:57:05,920 --> 00:57:09,119
super spine as

1439
00:57:10,559 --> 00:57:13,280
the last step to check would be uh

1440
00:57:13,280 --> 00:57:17,680
graphing or the graphina dashboards

1441
00:57:17,680 --> 00:57:20,240
will be for 3000

1442
00:57:20,240 --> 00:57:23,240
if

1443
00:57:28,799 --> 00:57:29,680
okay

1444
00:57:29,680 --> 00:57:32,319
so uh let's check the data source if

1445
00:57:32,319 --> 00:57:35,040
prometheus was loaded as a data source

1446
00:57:35,040 --> 00:57:37,200
uh in this graph and instance so we can

1447
00:57:37,200 --> 00:57:39,359
see here that there is one

1448
00:57:39,359 --> 00:57:40,640
data source

1449
00:57:40,640 --> 00:57:43,359
and that's the data source part of our

1450
00:57:43,359 --> 00:57:44,880
topology

1451
00:57:44,880 --> 00:57:46,880
second would be the dashboards so we

1452
00:57:46,880 --> 00:57:49,839
have two groups of dashboards here gmic

1453
00:57:49,839 --> 00:57:53,200
internal metrics and dsr

1454
00:57:53,200 --> 00:57:55,200
linux metrics

1455
00:57:55,200 --> 00:57:56,240
so

1456
00:57:56,240 --> 00:57:58,400
the predefined dashboards here show the

1457
00:57:58,400 --> 00:58:00,480
number of bgp

1458
00:58:00,480 --> 00:58:03,920
pairs that are up for each of the nodes

1459
00:58:03,920 --> 00:58:06,640
a few interface throughput statistics

1460
00:58:06,640 --> 00:58:08,079
that are coming up and the number of

1461
00:58:08,079 --> 00:58:10,079
received routes for each

1462
00:58:10,079 --> 00:58:12,079
of the nodes

1463
00:58:12,079 --> 00:58:14,319
so all this was

1464
00:58:14,319 --> 00:58:15,680
built using

1465
00:58:15,680 --> 00:58:17,680
the files that you can find

1466
00:58:17,680 --> 00:58:19,839
in this repo you can

1467
00:58:19,839 --> 00:58:22,240
go ahead and clone it run it locally in

1468
00:58:22,240 --> 00:58:24,880
your machine or run it on your own

1469
00:58:24,880 --> 00:58:26,079
self-hosted

1470
00:58:26,079 --> 00:58:28,480
runner

1471
00:58:30,720 --> 00:58:32,000
so

1472
00:58:32,000 --> 00:58:34,160
the lab again is

1473
00:58:34,160 --> 00:58:37,040
combines both a telemetry stack and uh

1474
00:58:37,040 --> 00:58:39,040
the topology that

1475
00:58:39,040 --> 00:58:42,079
you're trying to uh instrument but

1476
00:58:42,079 --> 00:58:44,000
you can run this in a different way you

1477
00:58:44,000 --> 00:58:47,280
can run a separate telemetry lab with

1478
00:58:47,280 --> 00:58:50,400
your favorite telemetry stack and then

1479
00:58:50,400 --> 00:58:52,880
point that telemetry lab to different

1480
00:58:52,880 --> 00:58:55,200
labs that you are running on the same

1481
00:58:55,200 --> 00:58:56,480
host or

1482
00:58:56,480 --> 00:58:59,520
on a different host you are not

1483
00:58:59,520 --> 00:59:01,119
forced to combine

1484
00:59:01,119 --> 00:59:03,280
everything in the same lab you are able

1485
00:59:03,280 --> 00:59:05,520
to make your labs communicate with each

1486
00:59:05,520 --> 00:59:07,920
other complement each other and improve

1487
00:59:07,920 --> 00:59:10,000
each other

1488
00:59:10,000 --> 00:59:12,559
i think with that i'm done i will hand

1489
00:59:12,559 --> 00:59:15,200
back to rahman thanks kareem

1490
00:59:15,200 --> 00:59:16,400
that was

1491
00:59:16,400 --> 00:59:18,880
that was quite quite a change from the

1492
00:59:18,880 --> 00:59:22,000
simple three notes topology lab to

1493
00:59:22,000 --> 00:59:25,520
14 topology 14 notes technology

1494
00:59:25,520 --> 00:59:26,640
with

1495
00:59:26,640 --> 00:59:29,040
yeah with the aha for the telomere

1496
00:59:29,040 --> 00:59:31,520
collection gmic and all that kind good

1497
00:59:31,520 --> 00:59:33,839
stuff with console we'll make sure to

1498
00:59:33,839 --> 00:59:34,880
use the

1499
00:59:34,880 --> 00:59:37,280
parental advisory exclusive content next

1500
00:59:37,280 --> 00:59:38,720
time you will present something like

1501
00:59:38,720 --> 00:59:40,000
this

1502
00:59:40,000 --> 00:59:42,559
okay so uh let's continue with the

1503
00:59:42,559 --> 00:59:44,720
presentation because there is something

1504
00:59:44,720 --> 00:59:46,880
that i would like to tell you more and

1505
00:59:46,880 --> 00:59:49,359
that is the advanced networking options

1506
00:59:49,359 --> 00:59:52,480
that container lab has

1507
00:59:52,480 --> 00:59:53,280
so

1508
00:59:53,280 --> 00:59:55,359
it is quite often that

1509
00:59:55,359 --> 00:59:56,799
that somebody asks

1510
00:59:56,799 --> 00:59:59,520
how can i expose a certain service in my

1511
00:59:59,520 --> 01:00:01,680
container lab deployed lab if i happen

1512
01:00:01,680 --> 01:00:02,720
to have

1513
01:00:02,720 --> 01:00:05,440
a system that is not on the same machine

1514
01:00:05,440 --> 01:00:08,319
as the one that runs the container lab

1515
01:00:08,319 --> 01:00:10,160
and there are a few ways that you can

1516
01:00:10,160 --> 01:00:11,440
make this happen

1517
01:00:11,440 --> 01:00:13,280
first one is the

1518
01:00:13,280 --> 01:00:15,520
exposing the service that

1519
01:00:15,520 --> 01:00:17,920
that is done through the ports command

1520
01:00:17,920 --> 01:00:20,079
inside the topology so because we work

1521
01:00:20,079 --> 01:00:22,240
with containers we can leverage the port

1522
01:00:22,240 --> 01:00:23,359
exposure

1523
01:00:23,359 --> 01:00:25,440
and uh container lab first can leverage

1524
01:00:25,440 --> 01:00:27,680
that for example if you have the

1525
01:00:27,680 --> 01:00:30,720
telemetry running on your nodes and

1526
01:00:30,720 --> 01:00:33,200
i have two nodes here on the right hand

1527
01:00:33,200 --> 01:00:35,839
side uh in the diagram both of them

1528
01:00:35,839 --> 01:00:40,559
running gnmi over the port 57400

1529
01:00:40,559 --> 01:00:43,599
i can expose those gnmi services to the

1530
01:00:43,599 --> 01:00:47,200
host port using the port instruction

1531
01:00:47,200 --> 01:00:50,240
right here so i basically say my

1532
01:00:50,240 --> 01:00:52,480
cus node

1533
01:00:52,480 --> 01:00:57,440
will expose port 5700 as as a port 57

1534
01:00:57,440 --> 01:00:58,319
uh

1535
01:00:58,319 --> 01:01:02,400
401 on the host and the sro linux will

1536
01:01:02,400 --> 01:01:08,400
expose 5700 port as the 57 402 port

1537
01:01:08,400 --> 01:01:10,960
and by doing that we will be able to let

1538
01:01:10,960 --> 01:01:13,520
gmic to talk to those

1539
01:01:13,520 --> 01:01:15,839
uh services using the ip address of the

1540
01:01:15,839 --> 01:01:18,160
machine that these nodes are running at

1541
01:01:18,160 --> 01:01:20,079
and just by using different ports

1542
01:01:20,079 --> 01:01:22,240
because now we have like two different

1543
01:01:22,240 --> 01:01:25,280
parts which correspond to two different

1544
01:01:25,280 --> 01:01:26,240
nodes

1545
01:01:26,240 --> 01:01:27,839
and that is one of the easiest way how

1546
01:01:27,839 --> 01:01:30,880
you can expose your lab to a third party

1547
01:01:30,880 --> 01:01:33,040
tool or something that runs outside of

1548
01:01:33,040 --> 01:01:35,280
the node that that hosts your container

1549
01:01:35,280 --> 01:01:37,359
container lab

1550
01:01:37,359 --> 01:01:39,680
but that's not only that we also can

1551
01:01:39,680 --> 01:01:42,079
expose the management network

1552
01:01:42,079 --> 01:01:42,799
like

1553
01:01:42,799 --> 01:01:44,319
every node that you deploy with

1554
01:01:44,319 --> 01:01:46,319
container lab basically connects with

1555
01:01:46,319 --> 01:01:48,559
its management interface to a management

1556
01:01:48,559 --> 01:01:51,839
network it is a simple linux bridge that

1557
01:01:51,839 --> 01:01:54,160
connects all those management interfaces

1558
01:01:54,160 --> 01:01:55,280
together

1559
01:01:55,280 --> 01:01:58,799
so you can expose this network entirely

1560
01:01:58,799 --> 01:02:01,280
and make it reachable to your

1561
01:02:01,280 --> 01:02:03,119
uh to a system so

1562
01:02:03,119 --> 01:02:05,920
the user story goes here as we have the

1563
01:02:05,920 --> 01:02:07,760
network management system that is

1564
01:02:07,760 --> 01:02:09,920
deployed somewhere in your network and

1565
01:02:09,920 --> 01:02:11,280
we want to

1566
01:02:11,280 --> 01:02:13,119
basically make this network management

1567
01:02:13,119 --> 01:02:15,359
system to reach the nodes that you

1568
01:02:15,359 --> 01:02:18,079
deployed with container lab somewhere in

1569
01:02:18,079 --> 01:02:18,839
your

1570
01:02:18,839 --> 01:02:21,200
network one of the ways that you can do

1571
01:02:21,200 --> 01:02:24,000
that is that you can create a route in

1572
01:02:24,000 --> 01:02:24,799
the

1573
01:02:24,799 --> 01:02:26,160
machine that hosts your network

1574
01:02:26,160 --> 01:02:29,039
management system and this route will

1575
01:02:29,039 --> 01:02:31,520
say you know to reach those management

1576
01:02:31,520 --> 01:02:34,079
network that container lab creates and

1577
01:02:34,079 --> 01:02:37,839
by default we use 172 2020 network

1578
01:02:37,839 --> 01:02:40,000
so we can create a route that says

1579
01:02:40,000 --> 01:02:43,359
this network can be reached through the

1580
01:02:43,359 --> 01:02:46,480
ip address of the machine that hosts the

1581
01:02:46,480 --> 01:02:49,119
container lab and by doing that you will

1582
01:02:49,119 --> 01:02:53,039
be able to stitch your nms with your lab

1583
01:02:53,039 --> 01:02:55,280
so that is one of the ways but of course

1584
01:02:55,280 --> 01:02:58,559
you can you need to have your

1585
01:02:58,559 --> 01:03:01,280
machine that hosts your nms to be able

1586
01:03:01,280 --> 01:03:03,119
to configure the

1587
01:03:03,119 --> 01:03:05,200
route here

1588
01:03:05,200 --> 01:03:06,720
there are ways

1589
01:03:06,720 --> 01:03:09,359
where you can

1590
01:03:09,359 --> 01:03:11,440
have the same kind of connectivity but

1591
01:03:11,440 --> 01:03:13,760
without touching the routing stack on

1592
01:03:13,760 --> 01:03:14,799
your

1593
01:03:14,799 --> 01:03:17,039
machine that hosts your nms

1594
01:03:17,039 --> 01:03:19,200
and to do that you can leverage the

1595
01:03:19,200 --> 01:03:20,880
existing bridge capability that

1596
01:03:20,880 --> 01:03:23,119
container lab has what it allows you to

1597
01:03:23,119 --> 01:03:25,440
do is that it allows you to say

1598
01:03:25,440 --> 01:03:27,200
your container lab when you will deploy

1599
01:03:27,200 --> 01:03:29,280
the lab please use the existing bridge

1600
01:03:29,280 --> 01:03:31,599
that i have on my machine

1601
01:03:31,599 --> 01:03:34,720
and by doing so the container lab will

1602
01:03:34,720 --> 01:03:37,520
schedule the nodes to connect to the

1603
01:03:37,520 --> 01:03:40,400
bridge which is already being created by

1604
01:03:40,400 --> 01:03:43,760
your system administrator or by yourself

1605
01:03:43,760 --> 01:03:45,359
and then you will be able to just

1606
01:03:45,359 --> 01:03:47,520
address the notes through the ip

1607
01:03:47,520 --> 01:03:50,160
addressing that is available in your lab

1608
01:03:50,160 --> 01:03:52,799
and then you do not need to have a route

1609
01:03:52,799 --> 01:03:55,920
here because your nms knows how to reach

1610
01:03:55,920 --> 01:03:56,799
the

1611
01:03:56,799 --> 01:03:59,280
the address that you use in the bridge

1612
01:03:59,280 --> 01:04:01,839
and it will just make sure that uh it

1613
01:04:01,839 --> 01:04:05,119
can reach it so that is one one of the

1614
01:04:05,119 --> 01:04:08,079
advanced ways to expose a lab that runs

1615
01:04:08,079 --> 01:04:10,000
somewhere in your

1616
01:04:10,000 --> 01:04:13,119
lab network without really touching any

1617
01:04:13,119 --> 01:04:15,680
systems that that are outside of your

1618
01:04:15,680 --> 01:04:18,000
reach

1619
01:04:18,799 --> 01:04:21,039
and uh another thing that we would like

1620
01:04:21,039 --> 01:04:23,280
to mention is that all the container lab

1621
01:04:23,280 --> 01:04:25,680
is mostly about virtual

1622
01:04:25,680 --> 01:04:27,359
networking topologies where you deploy

1623
01:04:27,359 --> 01:04:29,119
your topology and it has all the virtual

1624
01:04:29,119 --> 01:04:32,640
nodes and you run your complex simple

1625
01:04:32,640 --> 01:04:35,280
use cases we also want to make sure that

1626
01:04:35,280 --> 01:04:37,920
you can connect some physical boxes to

1627
01:04:37,920 --> 01:04:38,640
it

1628
01:04:38,640 --> 01:04:40,240
for example there might be a traffic

1629
01:04:40,240 --> 01:04:41,920
generator that you bought for one

1630
01:04:41,920 --> 01:04:44,079
million dollars and you want to use it

1631
01:04:44,079 --> 01:04:45,599
so you want to connect your traffic

1632
01:04:45,599 --> 01:04:48,000
generator to your nodes which are

1633
01:04:48,000 --> 01:04:49,839
either containerized or vm in a

1634
01:04:49,839 --> 01:04:52,240
container how would you do that

1635
01:04:52,240 --> 01:04:54,559
you cannot say to container lab please

1636
01:04:54,559 --> 01:04:55,920
make sure that there is a traffic

1637
01:04:55,920 --> 01:04:58,079
generator connected to it but what you

1638
01:04:58,079 --> 01:05:00,319
can do is that you can breach the

1639
01:05:00,319 --> 01:05:02,640
interfaces of the nodes that you have

1640
01:05:02,640 --> 01:05:04,880
part of your topology with the traffic

1641
01:05:04,880 --> 01:05:06,079
generator

1642
01:05:06,079 --> 01:05:08,960
to do that you use the reach kind which

1643
01:05:08,960 --> 01:05:10,720
is a special kind in the topology

1644
01:05:10,720 --> 01:05:12,240
definition file

1645
01:05:12,240 --> 01:05:13,599
that says

1646
01:05:13,599 --> 01:05:16,880
these br-10 and br20 which are of kind

1647
01:05:16,880 --> 01:05:19,920
breach they are actually linux bridges

1648
01:05:19,920 --> 01:05:22,720
and container lab will use them

1649
01:05:22,720 --> 01:05:24,319
in these

1650
01:05:24,319 --> 01:05:26,880
endpoints configuration instructions so

1651
01:05:26,880 --> 01:05:28,880
what you say here is that i want my leaf

1652
01:05:28,880 --> 01:05:31,920
1 interface e12 to be connected to the

1653
01:05:31,920 --> 01:05:33,200
bridge 10

1654
01:05:33,200 --> 01:05:36,400
interface l1 so this interface is really

1655
01:05:36,400 --> 01:05:37,920
imaginary it doesn't really matter how

1656
01:05:37,920 --> 01:05:40,240
you name it but it will connect the leaf

1657
01:05:40,240 --> 01:05:42,799
one to the bridge and then all it takes

1658
01:05:42,799 --> 01:05:44,480
is for you to make sure that the traffic

1659
01:05:44,480 --> 01:05:46,160
generator will be connected to the same

1660
01:05:46,160 --> 01:05:48,880
bridge so you do your vlan propagation

1661
01:05:48,880 --> 01:05:51,520
or some other techniques that you use

1662
01:05:51,520 --> 01:05:54,000
but just to make sure that there will be

1663
01:05:54,000 --> 01:05:56,400
l2 connectivity between this bridge and

1664
01:05:56,400 --> 01:05:59,039
the traffic generator port that you use

1665
01:05:59,039 --> 01:06:01,680
so by doing that you can easily push

1666
01:06:01,680 --> 01:06:03,520
traffic from the traffic generator all

1667
01:06:03,520 --> 01:06:05,839
the way back to your topology that you

1668
01:06:05,839 --> 01:06:08,079
created with container lab and it will

1669
01:06:08,079 --> 01:06:11,440
all happen magically

1670
01:06:11,760 --> 01:06:13,119
and of course

1671
01:06:13,119 --> 01:06:15,359
every lab needs to have some packet

1672
01:06:15,359 --> 01:06:17,520
capture capabilities otherwise we cannot

1673
01:06:17,520 --> 01:06:18,480
really

1674
01:06:18,480 --> 01:06:20,319
say what what what is happening on the

1675
01:06:20,319 --> 01:06:21,359
wire

1676
01:06:21,359 --> 01:06:23,520
because container lab uses basic linux

1677
01:06:23,520 --> 01:06:26,400
primitives it is really easy to use tcp

1678
01:06:26,400 --> 01:06:28,319
damp or wire sharp

1679
01:06:28,319 --> 01:06:31,280
all those points that i uh depicted on

1680
01:06:31,280 --> 01:06:33,200
the left left hand side left hand side

1681
01:06:33,200 --> 01:06:34,960
those red dots

1682
01:06:34,960 --> 01:06:38,000
all these points you can tap to and

1683
01:06:38,000 --> 01:06:39,760
sniff the traffic from

1684
01:06:39,760 --> 01:06:43,200
so on the right hand side you see the

1685
01:06:43,200 --> 01:06:45,039
command that allows you to connect to

1686
01:06:45,039 --> 01:06:47,520
the container lab host

1687
01:06:47,520 --> 01:06:50,000
and by just doing the

1688
01:06:50,000 --> 01:06:52,240
classical tcp dump command and piping it

1689
01:06:52,240 --> 01:06:54,480
to the wireshark you can immediately

1690
01:06:54,480 --> 01:06:57,119
spawn your wireshark gui and see what is

1691
01:06:57,119 --> 01:06:59,520
happening what is flowing between each

1692
01:06:59,520 --> 01:07:01,200
of those points

1693
01:07:01,200 --> 01:07:02,960
so it makes it really easy without any

1694
01:07:02,960 --> 01:07:04,720
you know alterations to your

1695
01:07:04,720 --> 01:07:07,839
installation just bare linux commands

1696
01:07:07,839 --> 01:07:10,720
and uh that that will

1697
01:07:10,720 --> 01:07:12,319
happen that will happen instantly and

1698
01:07:12,319 --> 01:07:13,839
you will be able to

1699
01:07:13,839 --> 01:07:16,319
see all the traffic that floats between

1700
01:07:16,319 --> 01:07:19,520
the points that you sniff to

1701
01:07:19,520 --> 01:07:22,000
all right we are really at the end here

1702
01:07:22,000 --> 01:07:22,960
i

1703
01:07:22,960 --> 01:07:24,880
and i wanted to mention that container

1704
01:07:24,880 --> 01:07:26,640
lab is not something that

1705
01:07:26,640 --> 01:07:28,960
is designed to replace

1706
01:07:28,960 --> 01:07:30,559
these great software projects such as

1707
01:07:30,559 --> 01:07:32,480
even j and gns3

1708
01:07:32,480 --> 01:07:34,720
what we think container lab can do is to

1709
01:07:34,720 --> 01:07:37,280
complement those so for example if you

1710
01:07:37,280 --> 01:07:39,839
are mo more on this side of

1711
01:07:39,839 --> 01:07:42,079
automated topology generations if you

1712
01:07:42,079 --> 01:07:44,079
want to be able to

1713
01:07:44,079 --> 01:07:46,160
check out your topologies to the git

1714
01:07:46,160 --> 01:07:48,319
repository and you are module on the

1715
01:07:48,319 --> 01:07:51,119
devops site then container lab might

1716
01:07:51,119 --> 01:07:54,240
have more sense to you it may it might

1717
01:07:54,240 --> 01:07:56,960
it might provide some git friendliness

1718
01:07:56,960 --> 01:07:59,839
that was missing in those ui

1719
01:07:59,839 --> 01:08:01,119
first tools

1720
01:08:01,119 --> 01:08:03,920
and it can enable you to

1721
01:08:03,920 --> 01:08:07,200
make those repeatable lab builds and

1722
01:08:07,200 --> 01:08:10,240
also make some really nice ci pipelines

1723
01:08:10,240 --> 01:08:12,559
that will use the networking virtual

1724
01:08:12,559 --> 01:08:13,839
topologies

1725
01:08:13,839 --> 01:08:15,920
it also has a very small footprint which

1726
01:08:15,920 --> 01:08:17,759
makes it really easy for

1727
01:08:17,759 --> 01:08:19,679
all kinds of learning activities so if

1728
01:08:19,679 --> 01:08:20,719
you want to

1729
01:08:20,719 --> 01:08:23,439
learn something new or want to

1730
01:08:23,439 --> 01:08:24,560
get some

1731
01:08:24,560 --> 01:08:27,198
automation experience it is really easy

1732
01:08:27,198 --> 01:08:28,799
to deploy just a few nodes with

1733
01:08:28,799 --> 01:08:31,279
container lab and you know explore the

1734
01:08:31,279 --> 01:08:33,600
yang's or the netcons of the of the

1735
01:08:33,600 --> 01:08:35,600
nodes that you created without really

1736
01:08:35,600 --> 01:08:37,439
having anything but just docker

1737
01:08:37,439 --> 01:08:39,279
installed and your

1738
01:08:39,279 --> 01:08:42,000
your laptop or virtual machine

1739
01:08:42,000 --> 01:08:44,238
at the same time we do have fewer

1740
01:08:44,238 --> 01:08:46,799
traditional nozzles as part of the

1741
01:08:46,799 --> 01:08:49,520
support uh supported images

1742
01:08:49,520 --> 01:08:53,198
but we still strive to have some really

1743
01:08:53,198 --> 01:08:55,359
most wanted operating systems under our

1744
01:08:55,359 --> 01:08:56,319
belt

1745
01:08:56,319 --> 01:08:58,880
and there is still no ui to container

1746
01:08:58,880 --> 01:09:01,520
app so if you are really a ui person you

1747
01:09:01,520 --> 01:09:03,520
might find it problematic to use

1748
01:09:03,520 --> 01:09:06,399
container lab although the goals were to

1749
01:09:06,399 --> 01:09:10,399
really stay simple and text-based

1750
01:09:10,399 --> 01:09:12,880
so if this all sounds interesting and

1751
01:09:12,880 --> 01:09:15,279
fascinating i have some

1752
01:09:15,279 --> 01:09:18,560
steps for you to uh to go next first of

1753
01:09:18,560 --> 01:09:19,759
course go and explore the

1754
01:09:19,759 --> 01:09:22,080
containerlab.us or linux.dev site

1755
01:09:22,080 --> 01:09:23,839
because it has a lot of information that

1756
01:09:23,839 --> 01:09:27,040
can help you get started or explore some

1757
01:09:27,040 --> 01:09:29,120
advanced use cases such as karim showed

1758
01:09:29,120 --> 01:09:30,000
you

1759
01:09:30,000 --> 01:09:30,960
and

1760
01:09:30,960 --> 01:09:32,399
most of the questions that you might

1761
01:09:32,399 --> 01:09:34,960
have along the way they are already

1762
01:09:34,960 --> 01:09:36,479
being answered on this decontension

1763
01:09:36,479 --> 01:09:38,319
portal

1764
01:09:38,319 --> 01:09:40,080
then try to create a lab with the

1765
01:09:40,080 --> 01:09:41,759
network glass that is dearest to your

1766
01:09:41,759 --> 01:09:44,080
heart we have support for as i said

1767
01:09:44,080 --> 01:09:46,479
quite a few of them so you will probably

1768
01:09:46,479 --> 01:09:47,439
find

1769
01:09:47,439 --> 01:09:51,120
a system to uh to play with

1770
01:09:51,120 --> 01:09:53,120
if there is something that is missing or

1771
01:09:53,120 --> 01:09:55,760
you feel that you have a nice idea

1772
01:09:55,760 --> 01:09:57,760
please do not hesitate to reach us you

1773
01:09:57,760 --> 01:09:59,360
can uh

1774
01:09:59,360 --> 01:10:01,199
talk to us through github issues or

1775
01:10:01,199 --> 01:10:03,520
discussions and we also have a community

1776
01:10:03,520 --> 01:10:05,440
server on discord which everybody can

1777
01:10:05,440 --> 01:10:06,640
join and

1778
01:10:06,640 --> 01:10:10,480
yeah talk to us in the in the real time

1779
01:10:10,480 --> 01:10:13,280
of course if container labs is something

1780
01:10:13,280 --> 01:10:17,440
that really up to you and you liked it

1781
01:10:17,440 --> 01:10:20,000
you can give us a star and grab a

1782
01:10:20,000 --> 01:10:22,320
container lap sticker at nanak venue if

1783
01:10:22,320 --> 01:10:24,880
you are happy to be there

1784
01:10:24,880 --> 01:10:26,960
if you want to have some

1785
01:10:26,960 --> 01:10:29,440
large-scale network topologies built

1786
01:10:29,440 --> 01:10:32,080
with the same containerized flavor

1787
01:10:32,080 --> 01:10:33,920
you can also check the google knee

1788
01:10:33,920 --> 01:10:35,440
project which is

1789
01:10:35,440 --> 01:10:38,000
contain lab on steroids where you run

1790
01:10:38,000 --> 01:10:40,560
your labs on the kubernetes clusters so

1791
01:10:40,560 --> 01:10:42,320
if you are into the

1792
01:10:42,320 --> 01:10:45,120
into the you know big pools of of of

1793
01:10:45,120 --> 01:10:47,600
nodes do check this project

1794
01:10:47,600 --> 01:10:49,600
and with that we would like to thank you

1795
01:10:49,600 --> 01:10:52,640
for your time and see you next time

1796
01:10:52,640 --> 01:10:55,640
goodbye

1797
01:10:59,679 --> 01:11:02,440
thank you very much roman and kareem

1798
01:11:02,440 --> 01:11:04,719
[Music]

1799
01:11:04,719 --> 01:11:07,520
thank you thank you

1800
01:11:07,520 --> 01:11:11,960
if we have any questions in the room

1801
01:11:12,560 --> 01:11:15,120
no questions in the room i know you were

1802
01:11:15,120 --> 01:11:18,080
talking to some people on uh on the chat

1803
01:11:18,080 --> 01:11:20,960
so i know that there was a question that

1804
01:11:20,960 --> 01:11:23,120
i spotted

1805
01:11:23,120 --> 01:11:24,960
uh from uh

1806
01:11:24,960 --> 01:11:26,640
matthew patek

1807
01:11:26,640 --> 01:11:29,679
let me just find it

1808
01:11:32,960 --> 01:11:34,880
so his question was

1809
01:11:34,880 --> 01:11:37,600
how much memory overhead did it take to

1810
01:11:37,600 --> 01:11:39,679
insta is in

1811
01:11:39,679 --> 01:11:42,159
instant

1812
01:11:43,960 --> 01:11:46,640
instantiate sorry i'm foreigner

1813
01:11:46,640 --> 01:11:50,880
instantiate the container lab images

1814
01:11:51,520 --> 01:11:54,400
yeah so typically it takes less memory

1815
01:11:54,400 --> 01:11:56,880
and cpu for running container

1816
01:11:56,880 --> 01:11:58,800
containerized network operating systems

1817
01:11:58,800 --> 01:12:01,840
as opposed to the vm-based packaging

1818
01:12:01,840 --> 01:12:04,080
and that is of course due to the

1819
01:12:04,080 --> 01:12:06,159
lightweightness of containers in general

1820
01:12:06,159 --> 01:12:08,640
and shared kernel and all that stuff so

1821
01:12:08,640 --> 01:12:10,719
for example you can run like you know

1822
01:12:10,719 --> 01:12:12,960
eight nodes of

1823
01:12:12,960 --> 01:12:15,040
either cus or s4 linux or whatever

1824
01:12:15,040 --> 01:12:17,040
container image you use

1825
01:12:17,040 --> 01:12:19,440
with a system that only has let's say

1826
01:12:19,440 --> 01:12:21,840
six gigabytes of ram and two cpus that

1827
01:12:21,840 --> 01:12:24,000
would be just enough which is really

1828
01:12:24,000 --> 01:12:25,679
small footprint if you compare it to the

1829
01:12:25,679 --> 01:12:27,920
amps

1830
01:12:28,000 --> 01:12:30,480
excellent thank you very much

1831
01:12:30,480 --> 01:12:36,320
[Music]

1832
01:12:36,320 --> 01:12:38,400
you

