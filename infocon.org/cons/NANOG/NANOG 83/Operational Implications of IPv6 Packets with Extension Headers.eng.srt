1
00:00:00,000 --> 00:00:05,440
[Music]

2
00:00:05,440 --> 00:00:06,560
good morning

3
00:00:06,560 --> 00:00:08,720
good afternoon good evening depending on

4
00:00:08,720 --> 00:00:11,200
where you are my name is fernando gondt

5
00:00:11,200 --> 00:00:13,360
i'm director of information security at

6
00:00:13,360 --> 00:00:14,480
the juno

7
00:00:14,480 --> 00:00:16,800
and i will be doing a presentation on

8
00:00:16,800 --> 00:00:19,520
operational implications of ipv6 packets

9
00:00:19,520 --> 00:00:22,000
with extension headers

10
00:00:22,000 --> 00:00:23,439
um

11
00:00:23,439 --> 00:00:25,519
let's start with an introduction to the

12
00:00:25,519 --> 00:00:28,480
topic of ipv6 extension headers

13
00:00:28,480 --> 00:00:31,039
essentially ipv6 has changed the you

14
00:00:31,039 --> 00:00:34,559
know structure of uh you know id packets

15
00:00:34,559 --> 00:00:36,000
and um

16
00:00:36,000 --> 00:00:38,480
if you look at uh you know a sample ipv6

17
00:00:38,480 --> 00:00:41,200
packet you can see that um the

18
00:00:41,200 --> 00:00:43,280
destructor of the packet follows like a

19
00:00:43,280 --> 00:00:44,399
linked list

20
00:00:44,399 --> 00:00:46,719
type of structure where you have a

21
00:00:46,719 --> 00:00:49,680
mandatory ipv6 header

22
00:00:49,680 --> 00:00:54,079
uh then you have a variable number of

23
00:00:54,079 --> 00:00:56,320
extension headers and then as the last

24
00:00:56,320 --> 00:00:59,039
header you have the upper protocol you

25
00:00:59,039 --> 00:01:01,920
know payload or or header essentially

26
00:01:01,920 --> 00:01:05,438
the idea here is that rather than having

27
00:01:05,438 --> 00:01:08,400
or that including the possible options

28
00:01:08,400 --> 00:01:11,680
in the ipv6 scanner itself like

29
00:01:11,680 --> 00:01:13,040
you know in the way in the same way that

30
00:01:13,040 --> 00:01:16,560
it is done for ipv4 what we do in ipv6

31
00:01:16,560 --> 00:01:20,000
is to have a fixed length ipv6 header

32
00:01:20,000 --> 00:01:21,680
and if we need

33
00:01:21,680 --> 00:01:24,880
uh to introduce any kind of options we

34
00:01:24,880 --> 00:01:27,520
will introduce these options via

35
00:01:27,520 --> 00:01:29,840
extension headers that are inserted if

36
00:01:29,840 --> 00:01:33,119
you wish in between the base ipv6 header

37
00:01:33,119 --> 00:01:36,640
and the upper layer protocol okay

38
00:01:36,640 --> 00:01:39,200
so this is a very general you know

39
00:01:39,200 --> 00:01:42,000
structure of the packets and obviously

40
00:01:42,000 --> 00:01:45,360
the benefit uh if you wish is that there

41
00:01:45,360 --> 00:01:47,759
is no practical

42
00:01:47,759 --> 00:01:50,240
or there's no theoretical limit uh when

43
00:01:50,240 --> 00:01:52,240
it comes to the number of options that

44
00:01:52,240 --> 00:01:54,320
you could possibly include because you

45
00:01:54,320 --> 00:01:55,920
know if you need more options you add

46
00:01:55,920 --> 00:01:57,920
more extension headers in between and

47
00:01:57,920 --> 00:02:00,880
you can support as many options as you

48
00:02:00,880 --> 00:02:04,079
you might want uh to to support

49
00:02:04,079 --> 00:02:06,560
now what's the problem what's the basic

50
00:02:06,560 --> 00:02:08,959
problem with this uh you know basic

51
00:02:08,959 --> 00:02:12,160
structure the problem is that if for

52
00:02:12,160 --> 00:02:13,520
some reason

53
00:02:13,520 --> 00:02:16,720
uh you wanted to process you know layer

54
00:02:16,720 --> 00:02:18,640
four information

55
00:02:18,640 --> 00:02:20,800
the only way that you have to actually

56
00:02:20,800 --> 00:02:22,640
access that information

57
00:02:22,640 --> 00:02:25,760
is to process one each of the headers at

58
00:02:25,760 --> 00:02:28,480
the time jumping from one header to the

59
00:02:28,480 --> 00:02:31,599
next header so one until you get to the

60
00:02:31,599 --> 00:02:33,680
upper layer

61
00:02:33,680 --> 00:02:35,760
there's nothing like it you know like a

62
00:02:35,760 --> 00:02:38,400
pointer to the uh you know upper layer

63
00:02:38,400 --> 00:02:40,800
protocol header that would allow you to

64
00:02:40,800 --> 00:02:43,840
skip all the options and you know jump

65
00:02:43,840 --> 00:02:46,160
right into the uh you know upper layer

66
00:02:46,160 --> 00:02:49,120
particle so in this example for example

67
00:02:49,120 --> 00:02:50,959
in this you know sample packet where we

68
00:02:50,959 --> 00:02:53,360
have you know the basic 56 header and

69
00:02:53,360 --> 00:02:54,800
then we have a number of extension

70
00:02:54,800 --> 00:02:57,280
headers in between and then a tcp header

71
00:02:57,280 --> 00:03:00,400
if you know we had some device that you

72
00:03:00,400 --> 00:03:02,800
know for some reason needed to obtain

73
00:03:02,800 --> 00:03:05,840
tcp information

74
00:03:05,840 --> 00:03:07,040
you know it would have to start

75
00:03:07,040 --> 00:03:09,840
processing the ipv6 header then it would

76
00:03:09,840 --> 00:03:11,840
jump into the next header which in this

77
00:03:11,840 --> 00:03:14,319
case it's a hope by hub options

78
00:03:14,319 --> 00:03:15,760
extension header

79
00:03:15,760 --> 00:03:17,360
then it would look at the length of the

80
00:03:17,360 --> 00:03:19,280
header and based on that it would jump

81
00:03:19,280 --> 00:03:22,400
to the next header et cetera et cetera

82
00:03:22,400 --> 00:03:24,560
now there are a couple of your problems

83
00:03:24,560 --> 00:03:26,879
as you might expect that are associated

84
00:03:26,879 --> 00:03:29,440
with you know these um you know this

85
00:03:29,440 --> 00:03:31,120
kind of processing

86
00:03:31,120 --> 00:03:34,799
um the first one is that uh well the the

87
00:03:34,799 --> 00:03:36,959
structure of the packet is of variable

88
00:03:36,959 --> 00:03:39,200
length and there are you know a number

89
00:03:39,200 --> 00:03:41,360
of architectures for which this is not

90
00:03:41,360 --> 00:03:43,920
really friendly so you know the headers

91
00:03:43,920 --> 00:03:46,480
can be at you know any place in the you

92
00:03:46,480 --> 00:03:48,159
know in the packet because all of the

93
00:03:48,159 --> 00:03:50,319
you know headers are of barrier length

94
00:03:50,319 --> 00:03:52,879
so this is not friendly with a number

95
00:03:52,879 --> 00:03:55,680
you know of uh you know architectures

96
00:03:55,680 --> 00:03:57,760
on the other hand cargo architectures of

97
00:03:57,760 --> 00:03:59,680
course i'm referring to on the other

98
00:03:59,680 --> 00:04:00,480
hand

99
00:04:00,480 --> 00:04:02,799
if uh the packets were being processed

100
00:04:02,799 --> 00:04:05,280
by you know a general purpose cpu if you

101
00:04:05,280 --> 00:04:08,000
wish then that of having to jump you

102
00:04:08,000 --> 00:04:10,080
know from one header to another it's

103
00:04:10,080 --> 00:04:11,360
something that is going to have an

104
00:04:11,360 --> 00:04:14,319
impact for example on a cpu consumption

105
00:04:14,319 --> 00:04:15,840
okay

106
00:04:15,840 --> 00:04:18,238
so that's one part of the problem what

107
00:04:18,238 --> 00:04:20,000
is the other part of the problem when

108
00:04:20,000 --> 00:04:21,358
you look at

109
00:04:21,358 --> 00:04:23,840
architectures that uh for example

110
00:04:23,840 --> 00:04:26,320
implement the packet processing

111
00:04:26,320 --> 00:04:28,880
uh you know in hardware

112
00:04:28,880 --> 00:04:32,160
what they typically do is that they copy

113
00:04:32,160 --> 00:04:34,160
uh you know a part of the packet you

114
00:04:34,160 --> 00:04:36,639
know the the from the very beginning and

115
00:04:36,639 --> 00:04:39,280
part of of that packet into a fast

116
00:04:39,280 --> 00:04:42,160
memory such that they can essentially

117
00:04:42,160 --> 00:04:45,759
implement uh any kind of operations that

118
00:04:45,759 --> 00:04:47,520
they might need to operate

119
00:04:47,520 --> 00:04:51,040
uh using that fast memory okay the idea

120
00:04:51,040 --> 00:04:52,960
is that you want to copy a piece of the

121
00:04:52,960 --> 00:04:55,520
packet that contains all the you know

122
00:04:55,520 --> 00:04:58,160
necessary information but no more than

123
00:04:58,160 --> 00:05:00,160
that because obviously you know that's

124
00:05:00,160 --> 00:05:01,919
uh that would require you know like

125
00:05:01,919 --> 00:05:03,840
larger memories and that would increase

126
00:05:03,840 --> 00:05:06,800
the cost so obviously there is like uh

127
00:05:06,800 --> 00:05:09,280
an implicit trade-off on how many bytes

128
00:05:09,280 --> 00:05:11,759
you are going to copy into that kind of

129
00:05:11,759 --> 00:05:14,560
fast memory and you know if you look at

130
00:05:14,560 --> 00:05:16,800
um let's say real uh router

131
00:05:16,800 --> 00:05:19,759
implementations you know you can find

132
00:05:19,759 --> 00:05:22,560
values such as for example 64

133
00:05:22,560 --> 00:05:27,840
uh 128 bytes 256 bytes meaning that for

134
00:05:27,840 --> 00:05:31,360
all of these devices they somehow imply

135
00:05:31,360 --> 00:05:33,280
that all the information that you might

136
00:05:33,280 --> 00:05:35,199
need to process a packet that means the

137
00:05:35,199 --> 00:05:37,520
whole ipv6 header chain

138
00:05:37,520 --> 00:05:40,479
needs to be or is going to be within

139
00:05:40,479 --> 00:05:44,800
those first 64 bytes 128 bytes or 256

140
00:05:44,800 --> 00:05:46,800
bytes if you wish okay

141
00:05:46,800 --> 00:05:48,800
now what happens if

142
00:05:48,800 --> 00:05:51,120
that information is not there well you

143
00:05:51,120 --> 00:05:53,360
cannot do the fast processing of the

144
00:05:53,360 --> 00:05:56,080
packets that you would otherwise do and

145
00:05:56,080 --> 00:05:59,360
you might need you might need to make a

146
00:05:59,360 --> 00:06:02,240
decision in that case uh regarding what

147
00:06:02,240 --> 00:06:05,120
to do with the packet

148
00:06:05,520 --> 00:06:07,039
now um

149
00:06:07,039 --> 00:06:11,199
a related you know uh um issue with you

150
00:06:11,199 --> 00:06:13,280
know this topic of you know processing

151
00:06:13,280 --> 00:06:16,400
packets is that many people when you uh

152
00:06:16,400 --> 00:06:19,199
when you describe you know all the work

153
00:06:19,199 --> 00:06:22,160
that you know a device needs to do uh to

154
00:06:22,160 --> 00:06:24,560
um you know to spot the layer for

155
00:06:24,560 --> 00:06:25,759
information

156
00:06:25,759 --> 00:06:26,960
normally

157
00:06:26,960 --> 00:06:29,039
many people will come back to you and

158
00:06:29,039 --> 00:06:31,120
say well but you know if it's for

159
00:06:31,120 --> 00:06:33,600
example a network device why does the

160
00:06:33,600 --> 00:06:36,080
device you know even need to access

161
00:06:36,080 --> 00:06:37,680
layer 4 information at the end of the

162
00:06:37,680 --> 00:06:40,400
day aren't those just you know layer 3

163
00:06:40,400 --> 00:06:42,560
devices that you know should be able to

164
00:06:42,560 --> 00:06:44,720
process the packet with you know forward

165
00:06:44,720 --> 00:06:47,440
the packet just by looking at the say ip

166
00:06:47,440 --> 00:06:48,400
addresses

167
00:06:48,400 --> 00:06:50,960
well yeah in theory in some cases they

168
00:06:50,960 --> 00:06:53,520
might be right but you know in practice

169
00:06:53,520 --> 00:06:55,680
when you look at you know um you know

170
00:06:55,680 --> 00:06:56,560
real

171
00:06:56,560 --> 00:06:59,039
deployments there are a number of

172
00:06:59,039 --> 00:07:01,280
reasons for which a device let's call

173
00:07:01,280 --> 00:07:03,599
them middle boxes just so that we don't

174
00:07:03,599 --> 00:07:06,479
need to focus on you know a router a

175
00:07:06,479 --> 00:07:09,199
firewall an ids or any kind of specific

176
00:07:09,199 --> 00:07:11,440
device there are a number of reasons for

177
00:07:11,440 --> 00:07:13,919
which these devices might need to look

178
00:07:13,919 --> 00:07:16,960
into uh layer four information

179
00:07:16,960 --> 00:07:19,440
and let's briefly describe you know some

180
00:07:19,440 --> 00:07:20,880
of these reasons

181
00:07:20,880 --> 00:07:23,599
first one is to enforce infrastructure

182
00:07:23,599 --> 00:07:26,319
acls okay so you might have your network

183
00:07:26,319 --> 00:07:29,919
infrastructure and you want to

184
00:07:29,919 --> 00:07:31,199
essentially

185
00:07:31,199 --> 00:07:34,000
implement acls to protect your own

186
00:07:34,000 --> 00:07:36,319
infrastructure that means that you might

187
00:07:36,319 --> 00:07:39,599
load traffic to some of your devices for

188
00:07:39,599 --> 00:07:42,560
specific protocols but not for others

189
00:07:42,560 --> 00:07:44,240
and obviously the only way in which you

190
00:07:44,240 --> 00:07:45,919
can you know tell you know which

191
00:07:45,919 --> 00:07:47,599
particle you allow and which protocol

192
00:07:47,599 --> 00:07:49,680
you don't is by looking at the layer for

193
00:07:49,680 --> 00:07:52,000
information typically you know the uh

194
00:07:52,000 --> 00:07:53,919
the well-known portal of the service

195
00:07:53,919 --> 00:07:56,319
that you want to allow or filter

196
00:07:56,319 --> 00:07:58,800
so that's one of the reasons

197
00:07:58,800 --> 00:08:00,879
another of the reasons is for

198
00:08:00,879 --> 00:08:01,680
uh

199
00:08:01,680 --> 00:08:04,240
ddos management and customer requests

200
00:08:04,240 --> 00:08:05,440
for filtering

201
00:08:05,440 --> 00:08:08,000
so let's consider the scenario uh in

202
00:08:08,000 --> 00:08:10,080
which for example you have a you know a

203
00:08:10,080 --> 00:08:11,840
client

204
00:08:11,840 --> 00:08:14,720
and let's say your client has a you know

205
00:08:14,720 --> 00:08:17,520
a port that is open that for some reason

206
00:08:17,520 --> 00:08:19,680
they are unable to filter or they think

207
00:08:19,680 --> 00:08:21,199
that they are unable to

208
00:08:21,199 --> 00:08:23,599
filter so they require you as an

209
00:08:23,599 --> 00:08:24,639
operator

210
00:08:24,639 --> 00:08:26,479
uh to uh

211
00:08:26,479 --> 00:08:29,759
essentially filter that port for them

212
00:08:29,759 --> 00:08:31,759
so that means that you know

213
00:08:31,759 --> 00:08:34,159
before you actually forward uh your

214
00:08:34,159 --> 00:08:36,000
packets to your client

215
00:08:36,000 --> 00:08:38,880
uh you need to tell which of the packets

216
00:08:38,880 --> 00:08:41,039
you are going to forward or not based on

217
00:08:41,039 --> 00:08:44,080
the you know service that is being uh

218
00:08:44,080 --> 00:08:46,880
used based on the destination port for

219
00:08:46,880 --> 00:08:49,040
example destination tcp or destination

220
00:08:49,040 --> 00:08:50,480
udp

221
00:08:50,480 --> 00:08:52,720
that obviously requires processing the

222
00:08:52,720 --> 00:08:54,959
you know entire ipv6 scatter chain and

223
00:08:54,959 --> 00:08:58,160
looking at the layer for information for

224
00:08:58,160 --> 00:09:00,160
ddos management that's kind of like

225
00:09:00,160 --> 00:09:03,839
similar so uh you might have traffic uh

226
00:09:03,839 --> 00:09:06,240
you know coming from certain addresses

227
00:09:06,240 --> 00:09:10,080
and the um ddos traffic is associated

228
00:09:10,080 --> 00:09:12,800
with a specific service for example and

229
00:09:12,800 --> 00:09:15,519
to extend that is possible you like to

230
00:09:15,519 --> 00:09:18,720
you know drop packets that you assume

231
00:09:18,720 --> 00:09:21,120
are part of the ddos

232
00:09:21,120 --> 00:09:23,920
attack but not traffic that you know

233
00:09:23,920 --> 00:09:25,519
seems to be winning

234
00:09:25,519 --> 00:09:28,640
uh seems to be valid legitimate okay

235
00:09:28,640 --> 00:09:30,320
uh again

236
00:09:30,320 --> 00:09:32,160
in that kind of scenario what you need

237
00:09:32,160 --> 00:09:34,959
to do is not only look at the

238
00:09:34,959 --> 00:09:38,320
ip addresses but also at their you know

239
00:09:38,320 --> 00:09:40,240
the transport protocol ports which

240
00:09:40,240 --> 00:09:42,560
require that any device that is

241
00:09:42,560 --> 00:09:44,480
processing the packets to process the

242
00:09:44,480 --> 00:09:46,640
entire ipv6 header chain to get to the

243
00:09:46,640 --> 00:09:49,839
you know upper layer protocol

244
00:09:49,839 --> 00:09:51,760
the reasons for which you know a middle

245
00:09:51,760 --> 00:09:54,320
box a network device might need to look

246
00:09:54,320 --> 00:09:57,040
uh you know into layer 4 information for

247
00:09:57,040 --> 00:10:00,480
example when you have a ecmb or you know

248
00:10:00,480 --> 00:10:03,040
hash based load sharing typically you

249
00:10:03,040 --> 00:10:05,839
know uh you know what you try to the

250
00:10:05,839 --> 00:10:07,120
situation that you have the scenario

251
00:10:07,120 --> 00:10:08,480
that you have is that you have a network

252
00:10:08,480 --> 00:10:11,519
device and you have multiple links over

253
00:10:11,519 --> 00:10:13,839
which you could possibly forward packets

254
00:10:13,839 --> 00:10:14,720
okay

255
00:10:14,720 --> 00:10:16,839
so what you want to do

256
00:10:16,839 --> 00:10:17,920
uh you know

257
00:10:17,920 --> 00:10:20,079
normally is to you know

258
00:10:20,079 --> 00:10:22,720
share the load among all those links

259
00:10:22,720 --> 00:10:23,519
okay

260
00:10:23,519 --> 00:10:26,000
but and you could possibly you know

261
00:10:26,000 --> 00:10:28,160
share the law by just you know sending

262
00:10:28,160 --> 00:10:30,320
back to one link or the other round

263
00:10:30,320 --> 00:10:32,720
robin but the problem with that uh you

264
00:10:32,720 --> 00:10:35,519
know that approach for long sharing is

265
00:10:35,519 --> 00:10:38,160
that um you know for wedding uh or

266
00:10:38,160 --> 00:10:40,240
deciding they are they're going uh you

267
00:10:40,240 --> 00:10:42,800
know link ground robbing will normally

268
00:10:42,800 --> 00:10:45,519
lead to renumbering events that are not

269
00:10:45,519 --> 00:10:46,959
nice for the

270
00:10:46,959 --> 00:10:49,200
you know the the transport protocols and

271
00:10:49,200 --> 00:10:51,839
eventually uh you know has an impact a

272
00:10:51,839 --> 00:10:54,160
negative impact on the user exp on the

273
00:10:54,160 --> 00:10:56,800
user experience so what you normally

274
00:10:56,800 --> 00:10:58,000
want to do

275
00:10:58,000 --> 00:11:00,480
is to forward all of the packets that

276
00:11:00,480 --> 00:11:02,880
correspond to the same flow over the

277
00:11:02,880 --> 00:11:05,040
same link and you know as you might

278
00:11:05,040 --> 00:11:07,200
expect you know one of the typical or

279
00:11:07,200 --> 00:11:09,519
traditional ways to you know to do that

280
00:11:09,519 --> 00:11:10,640
is to

281
00:11:10,640 --> 00:11:13,040
compute a hash over a number of

282
00:11:13,040 --> 00:11:15,279
parameters such as you know the ip

283
00:11:15,279 --> 00:11:17,440
addresses involved and the transport

284
00:11:17,440 --> 00:11:18,959
protocol uh

285
00:11:18,959 --> 00:11:20,640
ports in bottle

286
00:11:20,640 --> 00:11:23,040
meaning again that in order to you know

287
00:11:23,040 --> 00:11:25,040
compute that hash you need to obtain the

288
00:11:25,040 --> 00:11:27,040
layer for information and in order to

289
00:11:27,040 --> 00:11:28,880
obtain the layer for information you

290
00:11:28,880 --> 00:11:31,680
need to process you need to process the

291
00:11:31,680 --> 00:11:32,880
entire

292
00:11:32,880 --> 00:11:34,959
scatter chain

293
00:11:34,959 --> 00:11:38,720
other you could say more obvious

294
00:11:38,720 --> 00:11:41,200
scenarios or requirements for accessing

295
00:11:41,200 --> 00:11:43,839
layer for information is firewalling

296
00:11:43,839 --> 00:11:46,240
obviously you know in the most common

297
00:11:46,240 --> 00:11:49,440
case you um implement and enforce file

298
00:11:49,440 --> 00:11:52,639
rules at least by looking at the ip

299
00:11:52,639 --> 00:11:54,480
addresses and you know transport

300
00:11:54,480 --> 00:11:55,519
protocol

301
00:11:55,519 --> 00:11:58,079
port numbers involved so that will

302
00:11:58,079 --> 00:12:00,720
obviously require the device to you know

303
00:12:00,720 --> 00:12:03,519
access the layer for information

304
00:12:03,519 --> 00:12:04,720
and

305
00:12:04,720 --> 00:12:06,639
last but not least

306
00:12:06,639 --> 00:12:08,399
you can also have

307
00:12:08,399 --> 00:12:11,120
scenarios where you're using an ideas or

308
00:12:11,120 --> 00:12:14,320
an ips and these devices obviously

309
00:12:14,320 --> 00:12:17,120
typically they look not only a layer but

310
00:12:17,120 --> 00:12:18,480
you know sometimes to the extent that is

311
00:12:18,480 --> 00:12:20,399
possible they even try to you know to

312
00:12:20,399 --> 00:12:23,040
look at uh you know application you know

313
00:12:23,040 --> 00:12:25,920
layer information again this requires

314
00:12:25,920 --> 00:12:28,320
that you access a piece there for

315
00:12:28,320 --> 00:12:30,399
information meaning that you need to

316
00:12:30,399 --> 00:12:34,560
process the entire ipv6 header chain now

317
00:12:34,560 --> 00:12:37,519
you might wonder okay what will happen

318
00:12:37,519 --> 00:12:39,360
if for some reason

319
00:12:39,360 --> 00:12:42,560
the a device needs to uh

320
00:12:42,560 --> 00:12:44,800
you know needs to process a packet needs

321
00:12:44,800 --> 00:12:46,399
to access layer for information to

322
00:12:46,399 --> 00:12:48,959
process the packet but for some reason

323
00:12:48,959 --> 00:12:51,040
is unable to access that layer for

324
00:12:51,040 --> 00:12:52,480
information

325
00:12:52,480 --> 00:12:54,079
think about for example the two

326
00:12:54,079 --> 00:12:56,000
scenarios that i described before like

327
00:12:56,000 --> 00:12:58,560
limits for example on cpu usage or

328
00:12:58,560 --> 00:13:00,480
limits on the you know the the size of

329
00:13:00,480 --> 00:13:02,959
the memory uh fast memory that is

330
00:13:02,959 --> 00:13:05,440
employed for packet processing well in

331
00:13:05,440 --> 00:13:07,279
those scenarios there are essentially

332
00:13:07,279 --> 00:13:10,560
two options one option is to uh or

333
00:13:10,560 --> 00:13:12,720
basically three options if you wish one

334
00:13:12,720 --> 00:13:14,639
is to just you know

335
00:13:14,639 --> 00:13:16,480
forward the packet without looking at

336
00:13:16,480 --> 00:13:19,040
the layer for information which you know

337
00:13:19,040 --> 00:13:21,279
it in many cases it doesn't make any

338
00:13:21,279 --> 00:13:24,240
sense at all the second option is to

339
00:13:24,240 --> 00:13:25,440
the packet

340
00:13:25,440 --> 00:13:27,440
you know and you know not process it at

341
00:13:27,440 --> 00:13:28,560
all

342
00:13:28,560 --> 00:13:30,959
and the possible third option would be

343
00:13:30,959 --> 00:13:34,079
to try to process the packet in software

344
00:13:34,079 --> 00:13:36,880
which as you might expect is a no-go

345
00:13:36,880 --> 00:13:39,680
you don't want to be you know uh

346
00:13:39,680 --> 00:13:42,079
you don't want to be throwing packets to

347
00:13:42,079 --> 00:13:45,040
your you know device cpu uh you know for

348
00:13:45,040 --> 00:13:47,519
the for the cpu to process it

349
00:13:47,519 --> 00:13:50,399
so what happens in you know many many

350
00:13:50,399 --> 00:13:52,800
cases is that you know operators

351
00:13:52,800 --> 00:13:55,680
configure devices such that when they

352
00:13:55,680 --> 00:13:57,440
cannot access the

353
00:13:57,440 --> 00:13:58,880
information that they require to

354
00:13:58,880 --> 00:14:01,279
properly process the packets

355
00:14:01,279 --> 00:14:05,120
they dropped the corresponding packets

356
00:14:05,120 --> 00:14:07,360
uh as i mentioned before we have

357
00:14:07,360 --> 00:14:08,959
essentially two different kinds of

358
00:14:08,959 --> 00:14:11,760
limits that you will see in practice so

359
00:14:11,760 --> 00:14:14,880
you will see devices that enforce limits

360
00:14:14,880 --> 00:14:17,440
or that have you know implicit limits on

361
00:14:17,440 --> 00:14:18,240
the

362
00:14:18,240 --> 00:14:20,320
number of headers that they are able to

363
00:14:20,320 --> 00:14:23,279
process so you might see the devices

364
00:14:23,279 --> 00:14:24,720
that you if you

365
00:14:24,720 --> 00:14:26,720
you know include a single extension

366
00:14:26,720 --> 00:14:28,959
header in a packet you know the packet

367
00:14:28,959 --> 00:14:30,880
will you know be forwarded and things

368
00:14:30,880 --> 00:14:34,079
will work as expected but if you include

369
00:14:34,079 --> 00:14:36,880
let's say over eight or over 16

370
00:14:36,880 --> 00:14:39,760
extension headers then the uh the

371
00:14:39,760 --> 00:14:41,680
corresponding ipv6 packet will get

372
00:14:41,680 --> 00:14:42,639
dropped

373
00:14:42,639 --> 00:14:44,320
on the other hand as i you know

374
00:14:44,320 --> 00:14:46,880
mentioned before uh there's also a limit

375
00:14:46,880 --> 00:14:50,079
associated with the length of the ipv6

376
00:14:50,079 --> 00:14:51,760
uh

377
00:14:51,760 --> 00:14:53,519
so it's not

378
00:14:53,519 --> 00:14:55,279
in this particular we're not talking

379
00:14:55,279 --> 00:14:57,440
about the number of uh

380
00:14:57,440 --> 00:14:59,760
extension headers but about the length

381
00:14:59,760 --> 00:15:02,399
of the extension header itself

382
00:15:02,399 --> 00:15:04,320
for example it could be the result of

383
00:15:04,320 --> 00:15:06,160
having a single

384
00:15:06,160 --> 00:15:08,639
extension header so just one extension

385
00:15:08,639 --> 00:15:12,560
header but of let's say 1000 or 2000

386
00:15:12,560 --> 00:15:14,240
bytes okay

387
00:15:14,240 --> 00:15:16,560
so there are these two limits in place

388
00:15:16,560 --> 00:15:18,800
and when you look at you know different

389
00:15:18,800 --> 00:15:20,800
kind of devices you might see one in

390
00:15:20,800 --> 00:15:22,959
place or the other place or in some

391
00:15:22,959 --> 00:15:25,360
cases both of them in place

392
00:15:25,360 --> 00:15:26,880
uh these are the

393
00:15:26,880 --> 00:15:29,360
the limits that you know when will

394
00:15:29,360 --> 00:15:31,920
typically result in the packets you know

395
00:15:31,920 --> 00:15:34,160
being been dropped

396
00:15:34,160 --> 00:15:35,040
um

397
00:15:35,040 --> 00:15:38,720
a few years ago we had a meeting the um

398
00:15:38,720 --> 00:15:40,959
called the ipv6 hackers meeting where we

399
00:15:40,959 --> 00:15:42,880
have a number of presentations quite

400
00:15:42,880 --> 00:15:45,279
interesting and one of the presentations

401
00:15:45,279 --> 00:15:47,920
that we had at the time was um an

402
00:15:47,920 --> 00:15:51,279
assessment um presented by eldad zack

403
00:15:51,279 --> 00:15:52,399
zack

404
00:15:52,399 --> 00:15:54,800
where you know one of the things that um

405
00:15:54,800 --> 00:15:57,759
he tried to uh you know to present was

406
00:15:57,759 --> 00:16:00,639
what was the performance of network

407
00:16:00,639 --> 00:16:02,000
devices

408
00:16:02,000 --> 00:16:02,959
uh

409
00:16:02,959 --> 00:16:05,040
on one hand you know when uh they have

410
00:16:05,040 --> 00:16:07,519
like you know ipv4 only traffic ipv6 uh

411
00:16:07,519 --> 00:16:10,240
only traffic or makes it ipv6 and ib for

412
00:16:10,240 --> 00:16:14,560
traffic but also um ldap had presented

413
00:16:14,560 --> 00:16:16,800
uh measurements

414
00:16:16,800 --> 00:16:20,000
uh of the performance of different

415
00:16:20,000 --> 00:16:22,880
network devices when uh

416
00:16:22,880 --> 00:16:23,600
the

417
00:16:23,600 --> 00:16:26,880
ipv6 traffic that they were processing

418
00:16:26,880 --> 00:16:28,000
um

419
00:16:28,000 --> 00:16:30,320
the traffic included ipv6 extension

420
00:16:30,320 --> 00:16:31,759
headers okay

421
00:16:31,759 --> 00:16:34,560
so in this slide essentially we have a

422
00:16:34,560 --> 00:16:36,399
summary of the measurements that you

423
00:16:36,399 --> 00:16:39,360
know elda did for you know a specific uh

424
00:16:39,360 --> 00:16:41,680
you know device where you have

425
00:16:41,680 --> 00:16:44,560
what's the uh you know the throughput

426
00:16:44,560 --> 00:16:47,360
when uh you have you know ipv6 traffic

427
00:16:47,360 --> 00:16:49,279
without extension headers

428
00:16:49,279 --> 00:16:52,720
and what's the throughput when or or the

429
00:16:52,720 --> 00:16:56,000
uh or the loss in throughput when the

430
00:16:56,000 --> 00:16:59,600
traffic uh incorporate extension headers

431
00:16:59,600 --> 00:17:02,480
so this uh you know

432
00:17:02,480 --> 00:17:04,799
this is like a data point which shows

433
00:17:04,799 --> 00:17:06,480
you that you know

434
00:17:06,480 --> 00:17:09,439
uh the extension headers have a concrete

435
00:17:09,439 --> 00:17:12,559
impact on you know real-world network

436
00:17:12,559 --> 00:17:16,079
devices and you as an operator when you

437
00:17:16,079 --> 00:17:17,919
know when phased with these with this

438
00:17:17,919 --> 00:17:20,559
kind of you know situations you might

439
00:17:20,559 --> 00:17:23,839
need you know to make a choice as to

440
00:17:23,839 --> 00:17:26,720
whether you know it's okay for you to

441
00:17:26,720 --> 00:17:28,799
deal with these uh for example

442
00:17:28,799 --> 00:17:31,280
performance implications or this is

443
00:17:31,280 --> 00:17:33,520
actually not acceptable at all and you

444
00:17:33,520 --> 00:17:34,320
might

445
00:17:34,320 --> 00:17:36,880
need to essentially drop packets that

446
00:17:36,880 --> 00:17:40,720
employ ipv6 potential headers

447
00:17:40,720 --> 00:17:42,160
um

448
00:17:42,160 --> 00:17:45,679
so so far what we have seen essentially

449
00:17:45,679 --> 00:17:49,120
is the uh impact that extension headers

450
00:17:49,120 --> 00:17:50,080
have

451
00:17:50,080 --> 00:17:53,039
on for the most part the performance of

452
00:17:53,039 --> 00:17:55,520
devices okay of network devices which

453
00:17:55,520 --> 00:17:58,400
obviously at times that also has

454
00:17:58,400 --> 00:18:00,400
has implications on security because you

455
00:18:00,400 --> 00:18:02,559
know if the performance is you know very

456
00:18:02,559 --> 00:18:04,240
negatively uh

457
00:18:04,240 --> 00:18:06,799
impacted you know that can lead to a

458
00:18:06,799 --> 00:18:10,240
denial of service uh situation but let's

459
00:18:10,240 --> 00:18:13,360
uh let's say let's dig a little bit more

460
00:18:13,360 --> 00:18:16,720
into the security implications of ipv6

461
00:18:16,720 --> 00:18:19,200
extension headers and i think that you

462
00:18:19,200 --> 00:18:21,600
know the best and easiest way to you

463
00:18:21,600 --> 00:18:24,320
know to provide a summary or a data

464
00:18:24,320 --> 00:18:27,440
point is that if you go and look at the

465
00:18:27,440 --> 00:18:30,160
bonneville vulnerability database and

466
00:18:30,160 --> 00:18:34,000
you search for ipv6 extension headers

467
00:18:34,000 --> 00:18:36,320
then you might get all of these

468
00:18:36,320 --> 00:18:38,559
advisories and this is you know a search

469
00:18:38,559 --> 00:18:40,480
that i did like you know a few months

470
00:18:40,480 --> 00:18:43,039
ago it's very likely that if you we do

471
00:18:43,039 --> 00:18:45,200
this search right now you will get even

472
00:18:45,200 --> 00:18:46,400
more of this

473
00:18:46,400 --> 00:18:49,120
and what i'm trying to summarize here

474
00:18:49,120 --> 00:18:52,160
is that for a single year like in this

475
00:18:52,160 --> 00:18:54,080
slide we have vulnerabilities that were

476
00:18:54,080 --> 00:18:56,559
published during 2020

477
00:18:56,559 --> 00:18:59,200
you have multiple vulnerabilities for

478
00:18:59,200 --> 00:19:01,039
different kinds of devices from

479
00:19:01,039 --> 00:19:03,360
different vendors where essentially the

480
00:19:03,360 --> 00:19:06,480
vulnerability has to do with the devices

481
00:19:06,480 --> 00:19:09,919
with the affected devices not being able

482
00:19:09,919 --> 00:19:12,000
to gracefully handle

483
00:19:12,000 --> 00:19:15,200
malformed ipv6 packets that include

484
00:19:15,200 --> 00:19:16,799
extension headers

485
00:19:16,799 --> 00:19:19,360
to or to put things in a different way

486
00:19:19,360 --> 00:19:20,360
it's

487
00:19:20,360 --> 00:19:24,320
2021 and we still have a lot of devices

488
00:19:24,320 --> 00:19:27,200
that cannot properly process you know

489
00:19:27,200 --> 00:19:30,400
packets that uh include ipv6 extension

490
00:19:30,400 --> 00:19:33,039
headers so what does this mean if you

491
00:19:33,039 --> 00:19:34,799
are an operator

492
00:19:34,799 --> 00:19:38,160
so this is a data point that might also

493
00:19:38,160 --> 00:19:40,720
influence your decision regarding

494
00:19:40,720 --> 00:19:43,200
whether you know to allow these packets

495
00:19:43,200 --> 00:19:45,520
you know into or through your network or

496
00:19:45,520 --> 00:19:46,400
not

497
00:19:46,400 --> 00:19:48,960
and if you don't have a very good use

498
00:19:48,960 --> 00:19:52,000
case for um you know extension headers

499
00:19:52,000 --> 00:19:54,400
well probably by looking at you know

500
00:19:54,400 --> 00:19:57,039
these numbers uh it's very likely that

501
00:19:57,039 --> 00:19:59,360
your decision might be to just drop

502
00:19:59,360 --> 00:20:01,360
packets that

503
00:20:01,360 --> 00:20:04,719
contain extension headers

504
00:20:04,960 --> 00:20:08,960
now you might wonder okay so um uh

505
00:20:08,960 --> 00:20:11,440
extension headers ib6 extension headers

506
00:20:11,440 --> 00:20:14,720
have you know implications on on the

507
00:20:14,720 --> 00:20:17,280
performance device performance

508
00:20:17,280 --> 00:20:19,039
they may also have

509
00:20:19,039 --> 00:20:21,280
implications on security

510
00:20:21,280 --> 00:20:24,799
uh and these two considerations might uh

511
00:20:24,799 --> 00:20:27,679
you know uh might end up

512
00:20:27,679 --> 00:20:29,840
causing operators to decide just to you

513
00:20:29,840 --> 00:20:32,080
know drop packets with extension headers

514
00:20:32,080 --> 00:20:35,520
in their networks so how often does this

515
00:20:35,520 --> 00:20:37,760
happen how often or you know what are

516
00:20:37,760 --> 00:20:39,919
what's the data or what are the stats

517
00:20:39,919 --> 00:20:42,240
regarding how often you know operators

518
00:20:42,240 --> 00:20:44,559
drop packets with extension headers so

519
00:20:44,559 --> 00:20:47,679
these are measurements that i uh perform

520
00:20:47,679 --> 00:20:51,520
for alexa's top 1 million domain names

521
00:20:51,520 --> 00:20:54,080
and what i try to do here is to

522
00:20:54,080 --> 00:20:57,280
measure for different kinds of uh you

523
00:20:57,280 --> 00:20:59,280
know end points in some cases they were

524
00:20:59,280 --> 00:21:01,440
web servers in other cases mail servers

525
00:21:01,440 --> 00:21:03,679
in other name servers and for different

526
00:21:03,679 --> 00:21:06,480
types of extension headers in this kind

527
00:21:06,480 --> 00:21:08,720
in this case we have destination options

528
00:21:08,720 --> 00:21:11,039
of eight bytes hope i hope options of

529
00:21:11,039 --> 00:21:13,520
eight bytes and a fragment header of in

530
00:21:13,520 --> 00:21:15,440
this case of about

531
00:21:15,440 --> 00:21:17,600
512

532
00:21:17,600 --> 00:21:18,559
bytes

533
00:21:18,559 --> 00:21:20,559
uh what's the drop rate

534
00:21:20,559 --> 00:21:24,159
and as you may see from this slide the

535
00:21:24,159 --> 00:21:26,559
drop rate depending on you know the type

536
00:21:26,559 --> 00:21:28,320
of service and the type of you know

537
00:21:28,320 --> 00:21:33,120
header is anywhere between 10 and 50

538
00:21:33,120 --> 00:21:34,159
okay

539
00:21:34,159 --> 00:21:36,400
this tells you a little bit about you

540
00:21:36,400 --> 00:21:39,919
know how reliable uh extension headers

541
00:21:39,919 --> 00:21:41,840
are and nowadays on the you know

542
00:21:41,840 --> 00:21:45,840
deployed ipv6 internet

543
00:21:45,919 --> 00:21:48,880
so um

544
00:21:49,200 --> 00:21:51,200
your conclusions from you know what i

545
00:21:51,200 --> 00:21:54,240
have uh described so far might be that

546
00:21:54,240 --> 00:21:56,080
okay well there's a little bit of a

547
00:21:56,080 --> 00:21:58,000
problem in there so there's problem at

548
00:21:58,000 --> 00:22:00,559
least awareness to be done and probably

549
00:22:00,559 --> 00:22:02,799
a few other things to be done and you

550
00:22:02,799 --> 00:22:05,600
know the idf in the last let's say 10

551
00:22:05,600 --> 00:22:09,039
years did a little bit of you know the

552
00:22:09,039 --> 00:22:11,280
required associated work

553
00:22:11,280 --> 00:22:12,960
so what are the things that you know we

554
00:22:12,960 --> 00:22:15,280
have done at the ietf uh you know

555
00:22:15,280 --> 00:22:18,000
associated with um you know extension

556
00:22:18,000 --> 00:22:19,360
headers

557
00:22:19,360 --> 00:22:20,480
uh

558
00:22:20,480 --> 00:22:22,640
the last rfc that we published on the

559
00:22:22,640 --> 00:22:25,840
topic has been rfc 1998 which

560
00:22:25,840 --> 00:22:28,480
essentially raises awareness about the

561
00:22:28,480 --> 00:22:30,640
operational implication of ipv6

562
00:22:30,640 --> 00:22:32,960
extension headers in other words you

563
00:22:32,960 --> 00:22:35,200
know this rxc covers the materials that

564
00:22:35,200 --> 00:22:37,280
i have covered you know throughout this

565
00:22:37,280 --> 00:22:39,120
presentation

566
00:22:39,120 --> 00:22:42,880
then we have rfc 7872

567
00:22:42,880 --> 00:22:45,600
which uh includes uh real-world

568
00:22:45,600 --> 00:22:47,760
measurements about the extent to which

569
00:22:47,760 --> 00:22:49,760
packets with extension schedules are

570
00:22:49,760 --> 00:22:52,320
dropped in the you know deployed ipv6

571
00:22:52,320 --> 00:22:54,320
internet

572
00:22:54,320 --> 00:22:56,600
uh if you look at rfc

573
00:22:56,600 --> 00:22:59,679
8200 which is you know the last revision

574
00:22:59,679 --> 00:23:01,600
of the ipv6 standard

575
00:23:01,600 --> 00:23:05,600
there's a lot of uh your work or changes

576
00:23:05,600 --> 00:23:07,840
associated with extension headers among

577
00:23:07,840 --> 00:23:10,640
other things this rfc incorporates the

578
00:23:10,640 --> 00:23:15,360
contents of many other rfcs 5722 71 12

579
00:23:15,360 --> 00:23:16,559
and others

580
00:23:16,559 --> 00:23:18,960
which essentially had changed or

581
00:23:18,960 --> 00:23:22,480
modified aspects regarding how

582
00:23:22,480 --> 00:23:24,880
extension headers are processed

583
00:23:24,880 --> 00:23:27,760
now an interesting thing resulting from

584
00:23:27,760 --> 00:23:30,159
all this work that was done on extension

585
00:23:30,159 --> 00:23:32,559
headers in the last revision of the ipv6

586
00:23:32,559 --> 00:23:35,840
standard is that essentially in

587
00:23:35,840 --> 00:23:38,240
number of bags several bags were

588
00:23:38,240 --> 00:23:40,640
introduced in the contents of the

589
00:23:40,640 --> 00:23:43,640
fragmentation and reassembly section in

590
00:23:43,640 --> 00:23:47,159
8200 so if you look at a

591
00:23:47,159 --> 00:23:50,240
rfc8200 you will find out that there is

592
00:23:50,240 --> 00:23:51,520
hanerata

593
00:23:51,520 --> 00:23:55,760
59 41 which is like a multi-page errata

594
00:23:55,760 --> 00:23:57,840
which essentially replaces the whole

595
00:23:57,840 --> 00:24:00,640
contents of fragmentation and reassembly

596
00:24:00,640 --> 00:24:03,919
from 82-0 because you know it contains a

597
00:24:03,919 --> 00:24:06,320
number of errors

598
00:24:06,320 --> 00:24:09,760
and finally we have another rfc that was

599
00:24:09,760 --> 00:24:13,000
published earlier this year rfc

600
00:24:13,000 --> 00:24:17,200
8900 which essentially uh describes many

601
00:24:17,200 --> 00:24:19,440
of these things that i have covered

602
00:24:19,440 --> 00:24:21,679
throughout this presentation but

603
00:24:21,679 --> 00:24:25,039
focusing on ip fragmentation the title

604
00:24:25,039 --> 00:24:28,320
of the r of that rfc is ip fragmentation

605
00:24:28,320 --> 00:24:30,000
considered fragile

606
00:24:30,000 --> 00:24:32,960
and uh you know it covers both ipv4

607
00:24:32,960 --> 00:24:35,919
fragmentation and ipv6 fragmentation and

608
00:24:35,919 --> 00:24:38,240
um you know there are issues obviously

609
00:24:38,240 --> 00:24:40,400
that i'm not going to rehash here about

610
00:24:40,400 --> 00:24:42,240
issues associated with fragmentation

611
00:24:42,240 --> 00:24:43,600
what is why

612
00:24:43,600 --> 00:24:46,000
it is harmful or undeservable if you

613
00:24:46,000 --> 00:24:46,799
wish

614
00:24:46,799 --> 00:24:49,600
but when it comes to the ipv6 version of

615
00:24:49,600 --> 00:24:51,600
fragmentation i would say that it's a

616
00:24:51,600 --> 00:24:53,760
composed problem so you have all

617
00:24:53,760 --> 00:24:55,919
problems that you have from ipv4

618
00:24:55,919 --> 00:24:58,400
fragmentation and on top of that you

619
00:24:58,400 --> 00:25:00,320
have the problems that are associated

620
00:25:00,320 --> 00:25:02,320
with extension headers since you know

621
00:25:02,320 --> 00:25:04,320
that's how fragmentation is implemented

622
00:25:04,320 --> 00:25:08,000
implemented in ipv6

623
00:25:08,000 --> 00:25:10,720
so conclusions about the you know the

624
00:25:10,720 --> 00:25:13,919
materials that we have covered so far

625
00:25:13,919 --> 00:25:16,159
essentially there are a number of

626
00:25:16,159 --> 00:25:18,559
challenges associated with ipv6

627
00:25:18,559 --> 00:25:20,080
extension headers

628
00:25:20,080 --> 00:25:21,120
and

629
00:25:21,120 --> 00:25:23,760
many of them if not most or all of them

630
00:25:23,760 --> 00:25:26,480
are associated with the very design and

631
00:25:26,480 --> 00:25:29,600
nature of ipv6 extension headers to put

632
00:25:29,600 --> 00:25:32,000
things in a different way that packet

633
00:25:32,000 --> 00:25:34,480
structure of you know having an

634
00:25:34,480 --> 00:25:36,640
arbitrary number of extension headers in

635
00:25:36,640 --> 00:25:39,440
between the base ipv6 extension

636
00:25:39,440 --> 00:25:41,679
between the base ipv6 scatter on the

637
00:25:41,679 --> 00:25:43,279
upper layer particle

638
00:25:43,279 --> 00:25:44,320
it's

639
00:25:44,320 --> 00:25:48,159
really not friendly with many of the for

640
00:25:48,159 --> 00:25:50,880
example rather architectures that

641
00:25:50,880 --> 00:25:52,720
we use nowadays

642
00:25:52,720 --> 00:25:56,159
um so that's a problem uh that part of

643
00:25:56,159 --> 00:25:58,400
the problem is associated with the

644
00:25:58,400 --> 00:26:01,360
the ip6 design itself then there are

645
00:26:01,360 --> 00:26:02,159
there

646
00:26:02,159 --> 00:26:05,200
there are also a number of problems or

647
00:26:05,200 --> 00:26:07,200
things associated with the you know

648
00:26:07,200 --> 00:26:08,840
specific

649
00:26:08,840 --> 00:26:12,720
implementations now that aside there's a

650
00:26:12,720 --> 00:26:14,880
chicken and egg problem associated with

651
00:26:14,880 --> 00:26:17,360
ipv6 extension headers

652
00:26:17,360 --> 00:26:19,760
on one hand you know uh

653
00:26:19,760 --> 00:26:23,200
you have a number of uh you know limits

654
00:26:23,200 --> 00:26:26,000
in implementations um

655
00:26:26,000 --> 00:26:28,400
that essentially uh

656
00:26:28,400 --> 00:26:30,240
introduces uh you know a number of

657
00:26:30,240 --> 00:26:33,279
operational challenges for operators

658
00:26:33,279 --> 00:26:35,440
and from the point of view of operators

659
00:26:35,440 --> 00:26:37,760
okay you know if these packets you know

660
00:26:37,760 --> 00:26:40,480
are causing problems and i don't really

661
00:26:40,480 --> 00:26:43,279
have a use case then the obvious choice

662
00:26:43,279 --> 00:26:45,760
might be to drop those packets okay

663
00:26:45,760 --> 00:26:47,600
so that's the situation in which we are

664
00:26:47,600 --> 00:26:49,760
right now on the other hand from the

665
00:26:49,760 --> 00:26:51,840
perspective of vendors

666
00:26:51,840 --> 00:26:54,400
if you know these uh you know if there's

667
00:26:54,400 --> 00:26:57,039
not really a good use case and you know

668
00:26:57,039 --> 00:26:59,279
the extension headers the the ibis

669
00:26:59,279 --> 00:27:01,840
extension header feature is not really

670
00:27:01,840 --> 00:27:03,679
uh you know really able and well

671
00:27:03,679 --> 00:27:06,400
supported there's not really much

672
00:27:06,400 --> 00:27:08,960
motivation to actually try to you know

673
00:27:08,960 --> 00:27:10,640
improve the support in their own

674
00:27:10,640 --> 00:27:14,080
products so what i what i think that we

675
00:27:14,080 --> 00:27:16,320
have and that we will have you know

676
00:27:16,320 --> 00:27:18,159
probably for you know quite some time

677
00:27:18,159 --> 00:27:19,039
now

678
00:27:19,039 --> 00:27:22,000
is that you know we will be uh you know

679
00:27:22,000 --> 00:27:24,320
facing this chicken and egg problem in

680
00:27:24,320 --> 00:27:27,679
which we will not see use cases for ipv6

681
00:27:27,679 --> 00:27:29,919
extension headers because the feature is

682
00:27:29,919 --> 00:27:32,159
really is not really well supported in

683
00:27:32,159 --> 00:27:34,640
the deployed internet and on the other

684
00:27:34,640 --> 00:27:38,320
hand uh ipv6 extension headers are not

685
00:27:38,320 --> 00:27:40,159
going to become well supported if

686
00:27:40,159 --> 00:27:44,159
there's not a use case okay so my take

687
00:27:44,159 --> 00:27:47,200
is that uh the usage of ipv6 extension

688
00:27:47,200 --> 00:27:49,919
headers is going to be limited to what

689
00:27:49,919 --> 00:27:52,159
is normally referred to as limited

690
00:27:52,159 --> 00:27:54,799
domains meaning you use extension

691
00:27:54,799 --> 00:27:57,520
headers within your network but you know

692
00:27:57,520 --> 00:28:00,159
not on the let's say public ipv6

693
00:28:00,159 --> 00:28:02,000
internet

694
00:28:02,000 --> 00:28:04,880
so that's so far for the um you know

695
00:28:04,880 --> 00:28:07,679
presentation uh i will be taking

696
00:28:07,679 --> 00:28:09,840
questions now and you know besides that

697
00:28:09,840 --> 00:28:11,520
you know the questions that you know you

698
00:28:11,520 --> 00:28:14,559
might uh rise um you

699
00:28:14,559 --> 00:28:16,640
can find in this slide my email address

700
00:28:16,640 --> 00:28:18,880
and you know after the presentation if

701
00:28:18,880 --> 00:28:20,880
you have any questions you may also you

702
00:28:20,880 --> 00:28:23,440
know send your questions via email to me

703
00:28:23,440 --> 00:28:26,000
and i will you know respond uh

704
00:28:26,000 --> 00:28:26,799
if

705
00:28:26,799 --> 00:28:29,960
if possible

706
00:28:34,000 --> 00:28:36,080
here's fernando hello there good to see

707
00:28:36,080 --> 00:28:38,559
you thank you very much

708
00:28:38,559 --> 00:28:40,480
we unfortunately fernando can you hear

709
00:28:40,480 --> 00:28:41,600
us okay

710
00:28:41,600 --> 00:28:44,399
yeah perfect thank you um we're we're

711
00:28:44,399 --> 00:28:47,200
slightly um squeezing up against time we

712
00:28:47,200 --> 00:28:48,880
may have time for one question i didn't

713
00:28:48,880 --> 00:28:50,559
see one online as i came up and i don't

714
00:28:50,559 --> 00:28:52,480
see one at the mic so let's do this

715
00:28:52,480 --> 00:28:54,480
not just to send you away immediately um

716
00:28:54,480 --> 00:28:57,200
i had a question of my own if if i could

717
00:28:57,200 --> 00:29:00,240
you most of the

718
00:29:00,240 --> 00:29:02,559
of the of the talk was centered around

719
00:29:02,559 --> 00:29:05,200
the forwarding of of packets and what

720
00:29:05,200 --> 00:29:06,640
the applications are with the headers is

721
00:29:06,640 --> 00:29:08,080
there anything that

722
00:29:08,080 --> 00:29:10,159
you see or foresee that could be a

723
00:29:10,159 --> 00:29:12,080
problem with the n-host and their

724
00:29:12,080 --> 00:29:14,080
interaction with headers in terms of

725
00:29:14,080 --> 00:29:15,279
probably

726
00:29:15,279 --> 00:29:17,279
amplification or somehow they might

727
00:29:17,279 --> 00:29:18,559
respond that might be a network

728
00:29:18,559 --> 00:29:21,039
operational problem or is this

729
00:29:21,039 --> 00:29:22,799
strictly a

730
00:29:22,799 --> 00:29:24,799
a intermediate node

731
00:29:24,799 --> 00:29:27,279
issue that you focused on

732
00:29:27,279 --> 00:29:31,279
uh yes um you know hosts are as bad as

733
00:29:31,279 --> 00:29:33,039
forwarding devices uh you know

734
00:29:33,039 --> 00:29:34,880
processing extension headers if you want

735
00:29:34,880 --> 00:29:37,840
a data point one of the few vulnerabili

736
00:29:37,840 --> 00:29:40,080
remotely exploitable vulnerabilities in

737
00:29:40,080 --> 00:29:42,720
open bsd that was discovered in the last

738
00:29:42,720 --> 00:29:45,360
20 years was based on ipv6 extension

739
00:29:45,360 --> 00:29:46,399
headers

740
00:29:46,399 --> 00:29:49,039
so you know the the quality of the code

741
00:29:49,039 --> 00:29:51,840
is really bad and you know that has

742
00:29:51,840 --> 00:29:54,799
associated security implications

743
00:29:54,799 --> 00:29:56,159
that's what i would say are the

744
00:29:56,159 --> 00:30:00,800
implications on the on the host side too

745
00:30:00,800 --> 00:30:05,099
[Music]

