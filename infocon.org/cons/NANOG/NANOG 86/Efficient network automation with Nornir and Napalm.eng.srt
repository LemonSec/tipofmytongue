1
00:00:00,000 --> 00:00:00,060
[Music]

2
00:00:00,060 --> 00:00:02,210
foreign

3
00:00:02,210 --> 00:00:05,939
[Music]

4
00:00:08,720 --> 00:00:11,280
who will be presenting efficient Network

5
00:00:11,280 --> 00:00:14,340
automation with nornier in nepalm nalima

6
00:00:14,340 --> 00:00:16,020
is a technical marketing engineer at

7
00:00:16,020 --> 00:00:18,359
Cisco focusing on service provider

8
00:00:18,359 --> 00:00:21,300
products and network automation tools

9
00:00:21,300 --> 00:00:22,980
her first time presenting at nanog

10
00:00:22,980 --> 00:00:25,080
nalima traveled from Dallas Texas and

11
00:00:25,080 --> 00:00:26,220
it's a pleasure to have her speaking

12
00:00:26,220 --> 00:00:30,320
with with us today welcome to Lima

13
00:00:34,800 --> 00:00:37,320
thanks for the introduction cat

14
00:00:37,320 --> 00:00:39,780
this is my first time at nanog and I'm

15
00:00:39,780 --> 00:00:42,120
excited to be here and I'm glad to see

16
00:00:42,120 --> 00:00:44,700
all the network engineers in the room I

17
00:00:44,700 --> 00:00:46,559
know you deal with the network devices

18
00:00:46,559 --> 00:00:48,600
in your day-to-day life

19
00:00:48,600 --> 00:00:51,120
and it's a point of time you might have

20
00:00:51,120 --> 00:00:53,840
wondered how to manage the device

21
00:00:53,840 --> 00:00:56,760
configurational and operational data of

22
00:00:56,760 --> 00:00:58,760
multiple devices

23
00:00:58,760 --> 00:01:01,260
efficiently in a given maintenance

24
00:01:01,260 --> 00:01:03,780
window well here is one of the solution

25
00:01:03,780 --> 00:01:06,000
for you today I'm here to give you an

26
00:01:06,000 --> 00:01:08,640
overview of efficient Network automation

27
00:01:08,640 --> 00:01:12,540
with non-year and napalm

28
00:01:12,540 --> 00:01:15,740
so in this session

29
00:01:16,619 --> 00:01:19,020
in this session you'll get an overview

30
00:01:19,020 --> 00:01:21,680
of what why and how about

31
00:01:21,680 --> 00:01:25,200
Napalm automation python library and

32
00:01:25,200 --> 00:01:27,840
non-air automation framework and then

33
00:01:27,840 --> 00:01:30,180
I'll tell you how to execute the napam

34
00:01:30,180 --> 00:01:33,119
apis using the non-air framework and

35
00:01:33,119 --> 00:01:34,740
finally I'll give you a demo on how to

36
00:01:34,740 --> 00:01:36,420
execute it

37
00:01:36,420 --> 00:01:39,299
so before I get started

38
00:01:39,299 --> 00:01:41,100
I want you all to listen carefully

39
00:01:41,100 --> 00:01:42,840
because I'll be asking you questions in

40
00:01:42,840 --> 00:01:45,000
in between my presentation

41
00:01:45,000 --> 00:01:46,799
are you already

42
00:01:46,799 --> 00:01:50,000
okay I'm just kidding

43
00:01:50,579 --> 00:01:54,299
so let's get started what is napam napam

44
00:01:54,299 --> 00:01:57,659
is a vendor neutral automation python

45
00:01:57,659 --> 00:02:01,560
Library which provides a set of apis to

46
00:02:01,560 --> 00:02:04,140
do the configuration or to manage the

47
00:02:04,140 --> 00:02:06,840
configuration and Ma operational data of

48
00:02:06,840 --> 00:02:09,899
your network devices and it is expanded

49
00:02:09,899 --> 00:02:12,000
as Network Automation and

50
00:02:12,000 --> 00:02:14,459
programmability abstraction layer with

51
00:02:14,459 --> 00:02:16,080
multi-vendor support

52
00:02:16,080 --> 00:02:18,300
that means it basically provides

53
00:02:18,300 --> 00:02:21,480
multi-vendor support like the multiple

54
00:02:21,480 --> 00:02:26,340
vendors or Cisco iOS XR iOS NX OS June

55
00:02:26,340 --> 00:02:29,640
OS and Arista EOS

56
00:02:29,640 --> 00:02:32,099
so to know to learn more platform

57
00:02:32,099 --> 00:02:33,900
supported by this community you can just

58
00:02:33,900 --> 00:02:37,800
check out this link on this slide

59
00:02:37,800 --> 00:02:41,099
so why should you even use knee Palm so

60
00:02:41,099 --> 00:02:42,540
let's consider

61
00:02:42,540 --> 00:02:45,900
in your in your field you have like

62
00:02:45,900 --> 00:02:48,560
thousands of different vendor devices

63
00:02:48,560 --> 00:02:52,700
like thousands of iOS XR iOS and xos

64
00:02:52,700 --> 00:02:57,180
junos EOS Etc and you are given a task

65
00:02:57,180 --> 00:02:59,340
to complete to push some huge

66
00:02:59,340 --> 00:03:02,040
configuration onto these devices in a

67
00:03:02,040 --> 00:03:03,780
given maintenance window

68
00:03:03,780 --> 00:03:05,819
so what are you gonna do

69
00:03:05,819 --> 00:03:08,879
the when there is no napam you have to

70
00:03:08,879 --> 00:03:11,220
assign a different network engineer for

71
00:03:11,220 --> 00:03:13,019
different platforms and these Network

72
00:03:13,019 --> 00:03:15,480
Engineers are going to explore the

73
00:03:15,480 --> 00:03:16,879
available

74
00:03:16,879 --> 00:03:20,280
automation tools so there are automation

75
00:03:20,280 --> 00:03:23,099
tools with the further respective

76
00:03:23,099 --> 00:03:25,620
operating systems so you have to explore

77
00:03:25,620 --> 00:03:27,360
it and you have to understand how it is

78
00:03:27,360 --> 00:03:28,800
working then you have to write a code

79
00:03:28,800 --> 00:03:31,319
and then use that code to automate the

80
00:03:31,319 --> 00:03:33,060
configuration on all the specific

81
00:03:33,060 --> 00:03:36,360
platforms instead you can just ha you

82
00:03:36,360 --> 00:03:40,260
have one network engineer you use Snape

83
00:03:40,260 --> 00:03:43,980
arm and napam supports multi vendors so

84
00:03:43,980 --> 00:03:46,920
you can just understand Nepal write a

85
00:03:46,920 --> 00:03:50,280
single code use a single code to execute

86
00:03:50,280 --> 00:03:53,640
on multiple vendors and configure all

87
00:03:53,640 --> 00:03:56,119
the devices

88
00:03:57,900 --> 00:04:00,780
so why is it important

89
00:04:00,780 --> 00:04:03,780
firstly it's open source it has around

90
00:04:03,780 --> 00:04:07,140
90 contributors 30 releases and 4200

91
00:04:07,140 --> 00:04:10,980
commits it has a active community so if

92
00:04:10,980 --> 00:04:13,680
you have if you face any issues or any

93
00:04:13,680 --> 00:04:15,959
bugs you can just lock the bugs over

94
00:04:15,959 --> 00:04:17,760
there Community will reach out to you

95
00:04:17,760 --> 00:04:20,579
they'll fix the issues and you can get

96
00:04:20,579 --> 00:04:23,880
the recent code and executed

97
00:04:23,880 --> 00:04:26,940
and it provides multiple vendor support

98
00:04:26,940 --> 00:04:29,520
it's easy to install and use it's

99
00:04:29,520 --> 00:04:31,380
completely written in python as it is

100
00:04:31,380 --> 00:04:33,540
open source you can get the code write

101
00:04:33,540 --> 00:04:36,720
your your own code on top of it so that

102
00:04:36,720 --> 00:04:39,180
you can customize it based on your

103
00:04:39,180 --> 00:04:40,199
requirement

104
00:04:40,199 --> 00:04:42,500
and it has well maintained documentation

105
00:04:42,500 --> 00:04:45,660
and most importantly it's free so who

106
00:04:45,660 --> 00:04:48,360
says note the free stuff right yesterday

107
00:04:48,360 --> 00:04:51,780
only the hand these and gear so

108
00:04:51,780 --> 00:04:54,960
yeah so how does it work

109
00:04:54,960 --> 00:04:58,440
it works based on the concept of

110
00:04:58,440 --> 00:05:01,979
abstraction and inheritance abstraction

111
00:05:01,979 --> 00:05:05,580
is basically what Napalm does is it has

112
00:05:05,580 --> 00:05:09,259
a base class with all abstracted apis

113
00:05:09,259 --> 00:05:13,440
so these abstracted apis are implemented

114
00:05:13,440 --> 00:05:14,699
by the

115
00:05:14,699 --> 00:05:18,660
uh the drivers the multiple drivers

116
00:05:18,660 --> 00:05:20,940
and the implementation is specific to

117
00:05:20,940 --> 00:05:23,759
the platform so what you are seeing here

118
00:05:23,759 --> 00:05:27,000
is the apis are going to be same across

119
00:05:27,000 --> 00:05:30,120
the vendors and the input arguments or

120
00:05:30,120 --> 00:05:31,979
the output structure is going to be the

121
00:05:31,979 --> 00:05:33,780
same

122
00:05:33,780 --> 00:05:37,460
so that is the benefit of

123
00:05:37,520 --> 00:05:40,919
so if you see here the output of get

124
00:05:40,919 --> 00:05:45,960
facts you have different apis in napalm

125
00:05:45,960 --> 00:05:48,539
this is the output of get facts

126
00:05:48,539 --> 00:05:50,280
basically facts means it provides a

127
00:05:50,280 --> 00:05:52,800
basic information of the devices

128
00:05:52,800 --> 00:05:55,080
so here we have uptime of the device

129
00:05:55,080 --> 00:05:59,039
vendor host name fqdn OS version

130
00:05:59,039 --> 00:06:02,720
serial number model and interfaces list

131
00:06:02,720 --> 00:06:06,240
this this output is across all different

132
00:06:06,240 --> 00:06:08,639
vendors and you can see the structure is

133
00:06:08,639 --> 00:06:10,560
the same the keys are highlighted the

134
00:06:10,560 --> 00:06:12,479
keys are going to be seen the but the

135
00:06:12,479 --> 00:06:14,940
values are specific to the operating

136
00:06:14,940 --> 00:06:17,360
system

137
00:06:18,960 --> 00:06:21,180
well let's understand what are the

138
00:06:21,180 --> 00:06:24,780
different apis napam provides to you it

139
00:06:24,780 --> 00:06:27,380
has configuration data management apis

140
00:06:27,380 --> 00:06:30,860
where you can load the configuration

141
00:06:30,860 --> 00:06:33,960
load load the configuration you can

142
00:06:33,960 --> 00:06:36,780
replace the candidate configuration or

143
00:06:36,780 --> 00:06:39,840
merge candidate configuration and then

144
00:06:39,840 --> 00:06:42,300
after loading the config you can compare

145
00:06:42,300 --> 00:06:44,900
the conf the changes between the

146
00:06:44,900 --> 00:06:47,280
candidate and the running and if you're

147
00:06:47,280 --> 00:06:49,319
good with the changes you can just go

148
00:06:49,319 --> 00:06:52,199
and commit the changes or if you're not

149
00:06:52,199 --> 00:06:54,240
good you can go and discard the changes

150
00:06:54,240 --> 00:06:56,819
or if you have already committed it you

151
00:06:56,819 --> 00:06:58,259
can always roll back to the previous

152
00:06:58,259 --> 00:07:00,060
commit

153
00:07:00,060 --> 00:07:01,800
and these are all the different

154
00:07:01,800 --> 00:07:04,319
operational data management apis

155
00:07:04,319 --> 00:07:07,979
available for you like get facts you can

156
00:07:07,979 --> 00:07:10,199
retrieve the information like facts

157
00:07:10,199 --> 00:07:13,860
interfaces bgp information

158
00:07:13,860 --> 00:07:18,780
bgp neighbors snmb lldp ntp and

159
00:07:18,780 --> 00:07:20,759
firewalls

160
00:07:20,759 --> 00:07:23,940
users the whole configuration the prop

161
00:07:23,940 --> 00:07:27,539
Etc you also have CLI API which allows

162
00:07:27,539 --> 00:07:30,479
you to get the output of show commands

163
00:07:30,479 --> 00:07:32,940
and ping to get the output of the

164
00:07:32,940 --> 00:07:36,440
reachability of a destination address

165
00:07:36,900 --> 00:07:40,979
so it has so many features have to use

166
00:07:40,979 --> 00:07:44,819
it it's very simple just install napam

167
00:07:44,819 --> 00:07:47,880
using the pip Python package and write a

168
00:07:47,880 --> 00:07:50,039
simple code to retrieve the data from

169
00:07:50,039 --> 00:07:51,900
the device or to load the data to the

170
00:07:51,900 --> 00:07:54,539
device here you can see there's a basic

171
00:07:54,539 --> 00:07:56,280
code available

172
00:07:56,280 --> 00:07:58,080
here I'm actually retrieving the

173
00:07:58,080 --> 00:08:00,120
interfaces from my device so you can

174
00:08:00,120 --> 00:08:03,419
write any complex complicated code so

175
00:08:03,419 --> 00:08:06,960
that you can make your job easy I'm just

176
00:08:06,960 --> 00:08:10,620
showing a very basic example so I have

177
00:08:10,620 --> 00:08:12,479
imported get network driver from the

178
00:08:12,479 --> 00:08:15,599
Nepal and I've provided the driver you

179
00:08:15,599 --> 00:08:17,639
can provide the any driver name like iOS

180
00:08:17,639 --> 00:08:25,139
XR iOS nxos or EOS junos Etc and to this

181
00:08:25,139 --> 00:08:27,240
driver just provide the credentials of

182
00:08:27,240 --> 00:08:29,280
the device the hostname username

183
00:08:29,280 --> 00:08:32,479
password and the port number

184
00:08:32,479 --> 00:08:36,120
and then call open once you call open it

185
00:08:36,120 --> 00:08:37,860
locks into the device using the

186
00:08:37,860 --> 00:08:39,659
credentials provided in the previous

187
00:08:39,659 --> 00:08:43,020
step then it once you call get

188
00:08:43,020 --> 00:08:45,959
interfaces or any getter from the napam

189
00:08:45,959 --> 00:08:48,660
it's going to return a dictionary with

190
00:08:48,660 --> 00:08:51,660
all the details of what you're

191
00:08:51,660 --> 00:08:54,240
retrieving and you can see the right

192
00:08:54,240 --> 00:08:57,420
side there is the output of interface

193
00:08:57,420 --> 00:09:00,540
details so this output is going to be

194
00:09:00,540 --> 00:09:02,399
similar for all the different vendors

195
00:09:02,399 --> 00:09:05,100
but the data is will be specific to the

196
00:09:05,100 --> 00:09:07,279
device

197
00:09:07,860 --> 00:09:10,019
well I hope you got a basic

198
00:09:10,019 --> 00:09:12,660
understanding about Napalm how to use it

199
00:09:12,660 --> 00:09:15,600
and why is it important let's understand

200
00:09:15,600 --> 00:09:18,779
what is non-air

201
00:09:18,779 --> 00:09:20,700
non-air is a network automation

202
00:09:20,700 --> 00:09:23,339
framework that abstract the inventory

203
00:09:23,339 --> 00:09:27,000
and task execution and it automates your

204
00:09:27,000 --> 00:09:29,820
network task very efficiently because it

205
00:09:29,820 --> 00:09:33,060
is multi-threaded so it creates multiple

206
00:09:33,060 --> 00:09:36,540
threads in order to execute tasks on the

207
00:09:36,540 --> 00:09:39,560
different hosts

208
00:09:40,320 --> 00:09:42,839
why is it important it's important for

209
00:09:42,839 --> 00:09:46,620
the same reasons as Nepal on top of it

210
00:09:46,620 --> 00:09:50,220
it's multi-threaded and it has Inventory

211
00:09:50,220 --> 00:09:53,420
management feature

212
00:09:53,580 --> 00:09:55,980
well it's open source so you can always

213
00:09:55,980 --> 00:09:59,220
develop uh features on top of it and

214
00:09:59,220 --> 00:10:01,620
customize it accordingly it's completely

215
00:10:01,620 --> 00:10:03,899
written in Python so it's easy to use

216
00:10:03,899 --> 00:10:07,920
install and you can also integrate other

217
00:10:07,920 --> 00:10:11,279
python Frameworks into it and it also

218
00:10:11,279 --> 00:10:13,560
reuses few existing libraries like

219
00:10:13,560 --> 00:10:17,100
netmico napam to connect and manage the

220
00:10:17,100 --> 00:10:18,500
devices

221
00:10:18,500 --> 00:10:22,140
it uses multi-threading so it greatly

222
00:10:22,140 --> 00:10:25,019
optimizes the time taken to execute

223
00:10:25,019 --> 00:10:29,120
tasks on all the hosts

224
00:10:29,160 --> 00:10:32,100
well how does it work it basically works

225
00:10:32,100 --> 00:10:36,440
with the collection of hosts it provides

226
00:10:36,440 --> 00:10:40,339
a benefit of using Inventory management

227
00:10:40,339 --> 00:10:43,140
separately you can manage the inventory

228
00:10:43,140 --> 00:10:45,240
separately and then you have you can

229
00:10:45,240 --> 00:10:47,160
create a configuration file where you

230
00:10:47,160 --> 00:10:49,079
can provide how many threads you want to

231
00:10:49,079 --> 00:10:52,980
create and then the main file the

232
00:10:52,980 --> 00:10:54,600
non-linear main file make use of this

233
00:10:54,600 --> 00:10:57,120
configuration execute the task on the

234
00:10:57,120 --> 00:11:00,200
given Inventory management

235
00:11:01,800 --> 00:11:04,079
so how to use this framework you have to

236
00:11:04,079 --> 00:11:07,560
just install non-air and install and on

237
00:11:07,560 --> 00:11:11,040
it plugins called non-util utilities it

238
00:11:11,040 --> 00:11:12,600
provides plugins like inventory

239
00:11:12,600 --> 00:11:15,779
functions processes and tasks

240
00:11:15,779 --> 00:11:19,380
then once you have all the packages you

241
00:11:19,380 --> 00:11:20,459
have to

242
00:11:20,459 --> 00:11:23,459
create the inventory files the yaml

243
00:11:23,459 --> 00:11:26,160
files here you can see the hosts groups

244
00:11:26,160 --> 00:11:29,339
and defaults yaml files in order to

245
00:11:29,339 --> 00:11:31,380
understand the structure of these

246
00:11:31,380 --> 00:11:33,420
inventory files you can write this code

247
00:11:33,420 --> 00:11:37,440
you can see it the python code you can

248
00:11:37,440 --> 00:11:39,839
retrieve the schema of this host groups

249
00:11:39,839 --> 00:11:41,640
and defaults

250
00:11:41,640 --> 00:11:44,519
and execute this python code and you can

251
00:11:44,519 --> 00:11:47,519
check out the structure of it

252
00:11:47,519 --> 00:11:51,959
okay now I hope the main the basic uh

253
00:11:51,959 --> 00:11:56,579
understanding of normal you got and uh

254
00:11:56,579 --> 00:11:59,420
basically Napalm is multi-vendor support

255
00:11:59,420 --> 00:12:04,019
and non-air is multi-threaded and it

256
00:12:04,019 --> 00:12:06,060
also helps to manage the inventory

257
00:12:06,060 --> 00:12:08,040
efficiently

258
00:12:08,040 --> 00:12:10,800
so now let's see how to execute these

259
00:12:10,800 --> 00:12:13,260
Napalm apis which we have discussed in

260
00:12:13,260 --> 00:12:14,760
the earlier slides

261
00:12:14,760 --> 00:12:18,000
to exit to execute it using this non-air

262
00:12:18,000 --> 00:12:20,940
framework in order to do that you have

263
00:12:20,940 --> 00:12:23,040
to first install the non-in a pump

264
00:12:23,040 --> 00:12:26,519
plugin the plugin of non-air and then

265
00:12:26,519 --> 00:12:29,459
create an inventory folder into it just

266
00:12:29,459 --> 00:12:33,600
have this inventory files hosted yaml

267
00:12:33,600 --> 00:12:36,240
groups Dot yaml and defaults.yaml

268
00:12:36,240 --> 00:12:40,079
basically here you can see the hosted

269
00:12:40,079 --> 00:12:42,839
yaml file with the host information the

270
00:12:42,839 --> 00:12:45,420
router information the host name and

271
00:12:45,420 --> 00:12:48,240
which platform is it either iOS XR EOS

272
00:12:48,240 --> 00:12:53,579
junos iOS Etc and you can also Define

273
00:12:53,579 --> 00:12:57,240
the host details as like the router 3

274
00:12:57,240 --> 00:13:00,060
how I mentioned the hostname platform

275
00:13:00,060 --> 00:13:02,519
username and password you can

276
00:13:02,519 --> 00:13:04,980
uh declare all the details in the

277
00:13:04,980 --> 00:13:07,380
host.yaml itself if you don't want to

278
00:13:07,380 --> 00:13:10,440
use the groups and defaults in files but

279
00:13:10,440 --> 00:13:12,720
if you want to use them the groups is

280
00:13:12,720 --> 00:13:16,260
used to manage the platform details of

281
00:13:16,260 --> 00:13:19,639
the devices and default is used to

282
00:13:19,639 --> 00:13:23,339
manage the authentication of these hosts

283
00:13:23,339 --> 00:13:24,920
if all the hosts have same

284
00:13:24,920 --> 00:13:27,839
authentication information username and

285
00:13:27,839 --> 00:13:30,000
password then just provide those

286
00:13:30,000 --> 00:13:34,220
information in defaust.yaml file

287
00:13:35,000 --> 00:13:37,980
so after you're done with the inventory

288
00:13:37,980 --> 00:13:42,240
files just create a config file

289
00:13:42,240 --> 00:13:46,019
here config file provides the inventory

290
00:13:46,019 --> 00:13:48,180
file location to the main file to the

291
00:13:48,180 --> 00:13:51,420
non-year main file and you also have run

292
00:13:51,420 --> 00:13:53,660
a section here you can

293
00:13:53,660 --> 00:13:56,760
assign threaded in the plugin

294
00:13:56,760 --> 00:13:59,160
if you assign it as threaded then you

295
00:13:59,160 --> 00:14:01,500
can provide the number of workers is

296
00:14:01,500 --> 00:14:03,000
going to be number of threads it's going

297
00:14:03,000 --> 00:14:05,459
to create so if it is threaded and if

298
00:14:05,459 --> 00:14:08,459
you want to set up how many threads it

299
00:14:08,459 --> 00:14:10,320
has to create then you you can just give

300
00:14:10,320 --> 00:14:13,920
me a number I have given number as 2

301
00:14:13,920 --> 00:14:16,260
but if you don't give any number then

302
00:14:16,260 --> 00:14:18,300
it's going to default it to 20 it's

303
00:14:18,300 --> 00:14:21,180
going to create 20 threads but if you

304
00:14:21,180 --> 00:14:22,399
have

305
00:14:22,399 --> 00:14:25,320
any issues you want to debug something

306
00:14:25,320 --> 00:14:27,420
while executing this you can just

307
00:14:27,420 --> 00:14:30,560
convert plugin to the serial

308
00:14:30,560 --> 00:14:32,100
serialized

309
00:14:32,100 --> 00:14:34,980
so when you do that the thread only one

310
00:14:34,980 --> 00:14:37,639
thread is going to get created and

311
00:14:37,639 --> 00:14:40,560
the configuration of the tasks will be

312
00:14:40,560 --> 00:14:42,720
executed on these hosts in a serialized

313
00:14:42,720 --> 00:14:45,600
manner in that way you can figure out

314
00:14:45,600 --> 00:14:49,519
the issues or debug the issues

315
00:14:51,720 --> 00:14:53,339
now once you're done with the

316
00:14:53,339 --> 00:14:55,639
configuration file just create an online

317
00:14:55,639 --> 00:14:59,519
main file so here just initialize the

318
00:14:59,519 --> 00:15:02,880
non-year and provide the config file and

319
00:15:02,880 --> 00:15:04,680
this config file should be in the same

320
00:15:04,680 --> 00:15:06,839
location where the mine file is

321
00:15:06,839 --> 00:15:10,139
and then execute this non-nair providing

322
00:15:10,139 --> 00:15:13,980
the task and the specific getter so task

323
00:15:13,980 --> 00:15:16,079
is going to be the Napalm tasks like

324
00:15:16,079 --> 00:15:20,040
Napalm gets CLI configuration or

325
00:15:20,040 --> 00:15:23,760
validation and then get us uh whichever

326
00:15:23,760 --> 00:15:26,820
tasks you provide it's respect to

327
00:15:26,820 --> 00:15:30,360
API should be provided here the API name

328
00:15:30,360 --> 00:15:34,260
like facts interfaces Etc and then once

329
00:15:34,260 --> 00:15:36,079
you print the result it is going to

330
00:15:36,079 --> 00:15:41,399
return the details of the task the

331
00:15:41,399 --> 00:15:44,579
resultant of the task executed for every

332
00:15:44,579 --> 00:15:48,060
router Router 1 and

333
00:15:48,060 --> 00:15:51,079
router 2

334
00:15:51,300 --> 00:15:55,139
so here you have naughty napam plugins

335
00:15:55,139 --> 00:15:56,839
you have different

336
00:15:56,839 --> 00:16:01,380
plugins like Napalm CLI to execute the

337
00:16:01,380 --> 00:16:02,760
show commands

338
00:16:02,760 --> 00:16:06,320
and configure to load or merge the

339
00:16:06,320 --> 00:16:09,420
configuration get is to execute the

340
00:16:09,420 --> 00:16:12,600
Getters of Napalm and ping is to execute

341
00:16:12,600 --> 00:16:15,600
the Ping API of Napalm and napam Valley

342
00:16:15,600 --> 00:16:17,839
date is to validate

343
00:16:17,839 --> 00:16:20,820
the running configuration of the device

344
00:16:20,820 --> 00:16:23,880
with the user input

345
00:16:23,880 --> 00:16:26,779
configuration

346
00:16:27,540 --> 00:16:31,199
now let's get into the demo let's see

347
00:16:31,199 --> 00:16:34,019
have you can execute it firstly if you

348
00:16:34,019 --> 00:16:37,440
want to get started just create a

349
00:16:37,440 --> 00:16:40,560
virtual virtual environment so here I

350
00:16:40,560 --> 00:16:42,060
have created Anonymous virtual

351
00:16:42,060 --> 00:16:44,220
environment and this is these are my

352
00:16:44,220 --> 00:16:47,100
versions python version and you can see

353
00:16:47,100 --> 00:16:49,680
the PIP list I have installed non-in

354
00:16:49,680 --> 00:16:55,500
apam let me go util utilities and napalm

355
00:16:56,160 --> 00:16:58,079
so

356
00:16:58,079 --> 00:17:01,500
once you're all set up with this uh

357
00:17:01,500 --> 00:17:04,199
virtual environment

358
00:17:04,199 --> 00:17:06,419
uh we are creating virtual environment

359
00:17:06,419 --> 00:17:07,740
because you don't want to interrupt the

360
00:17:07,740 --> 00:17:10,980
existing environment and you have to

361
00:17:10,980 --> 00:17:13,380
create an inventory folder as you see

362
00:17:13,380 --> 00:17:15,839
here I've created inventory folder and

363
00:17:15,839 --> 00:17:18,900
it has all the inventory files host or

364
00:17:18,900 --> 00:17:22,439
yaml groups.yaml and defaults.yaml with

365
00:17:22,439 --> 00:17:24,119
all the host information which we have

366
00:17:24,119 --> 00:17:26,220
seen in the previous slide

367
00:17:26,220 --> 00:17:29,100
so once that is done

368
00:17:29,100 --> 00:17:33,080
you can go and create a config file

369
00:17:33,080 --> 00:17:37,140
config.yaml file and this

370
00:17:37,140 --> 00:17:39,299
helps to provide the inventory

371
00:17:39,299 --> 00:17:41,700
information to the main file the

372
00:17:41,700 --> 00:17:43,260
inventory location

373
00:17:43,260 --> 00:17:46,140
and the runner if you wanted it to

374
00:17:46,140 --> 00:17:48,960
execute in a multi-threaded fashion or

375
00:17:48,960 --> 00:17:51,299
in a serialized mode

376
00:17:51,299 --> 00:17:55,200
then let's see how we can execute

377
00:17:55,200 --> 00:17:57,559
multiple napam tasks

378
00:17:57,559 --> 00:18:01,020
using non-nir

379
00:18:01,020 --> 00:18:03,539
as we have seen previously in the slide

380
00:18:03,539 --> 00:18:05,640
we have to just initialize the non-air

381
00:18:05,640 --> 00:18:07,620
and you can create multiple tasks at a

382
00:18:07,620 --> 00:18:09,200
time

383
00:18:09,200 --> 00:18:13,020
configure napam get and then execute

384
00:18:13,020 --> 00:18:15,059
these multiple tasks provide this that

385
00:18:15,059 --> 00:18:18,059
function in the task and execute it it

386
00:18:18,059 --> 00:18:20,340
is going to it's it is going to create

387
00:18:20,340 --> 00:18:22,380
two threads because I have only two

388
00:18:22,380 --> 00:18:26,460
routers in my host.yaml file and these

389
00:18:26,460 --> 00:18:29,400
two threads take care of each host

390
00:18:29,400 --> 00:18:31,440
separately and execute all those

391
00:18:31,440 --> 00:18:33,480
multiple tasks so you can see this is

392
00:18:33,480 --> 00:18:35,640
the output when there's a configuration

393
00:18:35,640 --> 00:18:38,340
change it says that uh there's there's

394
00:18:38,340 --> 00:18:40,559
some change happen in this router

395
00:18:40,559 --> 00:18:44,520
and this is a show version of the device

396
00:18:44,520 --> 00:18:46,860
so this is get facts and the interfaces

397
00:18:46,860 --> 00:18:49,159
list

398
00:18:49,679 --> 00:18:51,720
so this is how the output is going to

399
00:18:51,720 --> 00:18:54,240
look it is going to

400
00:18:54,240 --> 00:18:57,000
provide the output of all the routers at

401
00:18:57,000 --> 00:18:59,660
a time in instead of

402
00:18:59,660 --> 00:19:02,220
returning the output in a serialized

403
00:19:02,220 --> 00:19:05,900
Manner and now let's see how to execute

404
00:19:05,900 --> 00:19:08,760
multiple napam Getters you can also

405
00:19:08,760 --> 00:19:10,860
provide multiple Getters in the list

406
00:19:10,860 --> 00:19:13,679
like here have provided task is napam

407
00:19:13,679 --> 00:19:16,320
get and the Getters are facts uses

408
00:19:16,320 --> 00:19:19,740
interfaces you can just add on to it and

409
00:19:19,740 --> 00:19:23,120
then execute it

410
00:19:24,480 --> 00:19:28,140
and you're going to get the output of

411
00:19:28,140 --> 00:19:33,000
the users and the get facts

412
00:19:33,000 --> 00:19:37,260
of two routers separately

413
00:19:37,260 --> 00:19:39,120
so this is how the output is going to

414
00:19:39,120 --> 00:19:41,479
look like

415
00:19:42,059 --> 00:19:45,240
so now you have so many hosts in your

416
00:19:45,240 --> 00:19:48,000
host or yaml file and you don't want to

417
00:19:48,000 --> 00:19:51,299
execute some tasks on every router then

418
00:19:51,299 --> 00:19:54,360
you can always go go and use filters

419
00:19:54,360 --> 00:19:57,299
this filters help you to execute these

420
00:19:57,299 --> 00:20:00,240
tasks on a specific router

421
00:20:00,240 --> 00:20:02,940
so here is a filter you have non-air

422
00:20:02,940 --> 00:20:05,460
filter and provide the name of the

423
00:20:05,460 --> 00:20:07,559
router which you want to execute or

424
00:20:07,559 --> 00:20:10,140
execute it on instead of executing in

425
00:20:10,140 --> 00:20:12,120
all the routers

426
00:20:12,120 --> 00:20:14,700
the host file contains

427
00:20:14,700 --> 00:20:17,000
and then provide all the

428
00:20:17,000 --> 00:20:19,679
configuration all the tasks just Define

429
00:20:19,679 --> 00:20:22,020
all the tasks in this way

430
00:20:22,020 --> 00:20:24,740
and then execute it it is going to

431
00:20:24,740 --> 00:20:27,299
execute the task only on that one

432
00:20:27,299 --> 00:20:30,260
specific router

433
00:20:37,080 --> 00:20:40,919
so how many of you know python here

434
00:20:40,919 --> 00:20:45,000
okay great nice good to know

435
00:20:45,000 --> 00:20:47,280
so this is how it's going to

436
00:20:47,280 --> 00:20:50,780
return the output

437
00:20:51,179 --> 00:20:54,360
so that's all uh with my session and

438
00:20:54,360 --> 00:20:56,640
today we have learned what is napam what

439
00:20:56,640 --> 00:20:59,580
is the benefits of napalm uh its main

440
00:20:59,580 --> 00:21:02,160
feature is vendor neutral and open

441
00:21:02,160 --> 00:21:04,620
source it's free to use and non-air

442
00:21:04,620 --> 00:21:06,960
provides Inventory management and

443
00:21:06,960 --> 00:21:10,740
concurrency the multi-threaded uh

444
00:21:10,740 --> 00:21:15,120
feature so it's great to use if you get

445
00:21:15,120 --> 00:21:18,120
a chance please go ahead and try it out

446
00:21:18,120 --> 00:21:19,980
these are the different resources you

447
00:21:19,980 --> 00:21:21,480
can check it out and if you want to

448
00:21:21,480 --> 00:21:24,000
quick start with the Narnia Napa please

449
00:21:24,000 --> 00:21:26,580
check out this non-air overview block

450
00:21:26,580 --> 00:21:29,039
which I have returned it and it has step

451
00:21:29,039 --> 00:21:30,260
by step

452
00:21:30,260 --> 00:21:33,419
details on how to get started install it

453
00:21:33,419 --> 00:21:36,840
and execute

454
00:21:37,220 --> 00:21:40,620
your tasks and thank you so much for

455
00:21:40,620 --> 00:21:42,720
your time I really enjoyed presenting it

456
00:21:42,720 --> 00:21:45,120
to you and special thanks to Jeff who

457
00:21:45,120 --> 00:21:48,179
helped me out during the process uh from

458
00:21:48,179 --> 00:21:51,000
the PC team and Valerie thank you so

459
00:21:51,000 --> 00:21:52,700
much

460
00:21:52,700 --> 00:21:56,920
[Applause]

461
00:21:58,080 --> 00:22:00,299
I'm good to take questions now if you

462
00:22:00,299 --> 00:22:02,658
have any

463
00:22:07,200 --> 00:22:09,960
hi uh Chris Woodfield with Twitter

464
00:22:09,960 --> 00:22:13,380
um how would you compare nor near to

465
00:22:13,380 --> 00:22:16,919
other popular config management Fleet

466
00:22:16,919 --> 00:22:19,640
coordination tools such as ansible

467
00:22:19,640 --> 00:22:22,860
it doesn't have python coding I think

468
00:22:22,860 --> 00:22:25,740
you have to write some instructions in

469
00:22:25,740 --> 00:22:28,320
it so uh

470
00:22:28,320 --> 00:22:29,820
I'm not going to say anything about

471
00:22:29,820 --> 00:22:32,100
ansible because it's up to you like

472
00:22:32,100 --> 00:22:35,039
which is where is your comfort you can

473
00:22:35,039 --> 00:22:37,919
go for it if you're comfortable with the

474
00:22:37,919 --> 00:22:41,100
the non-neuro because it provides like

475
00:22:41,100 --> 00:22:43,559
concurrency multi-threading and you can

476
00:22:43,559 --> 00:22:46,500
also manage the inventory separately so

477
00:22:46,500 --> 00:22:49,260
then you can go for this if you want to

478
00:22:49,260 --> 00:22:51,299
if you don't want to get into python

479
00:22:51,299 --> 00:22:52,860
coding then you can come up with some

480
00:22:52,860 --> 00:22:54,900
instructions to return on it and use

481
00:22:54,900 --> 00:22:58,500
ansible so it's up to you have you want

482
00:22:58,500 --> 00:23:03,020
to use it thank you yeah thank you

483
00:23:05,340 --> 00:23:09,439
okay thank you

484
00:23:12,390 --> 00:23:16,119
[Music]

