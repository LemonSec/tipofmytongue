1
00:00:00,000 --> 00:00:00,060
[Music]

2
00:00:00,060 --> 00:00:02,210
foreign

3
00:00:02,210 --> 00:00:05,939
[Music]

4
00:00:06,259 --> 00:00:08,940
the agenda but I guess the next speaker

5
00:00:08,940 --> 00:00:11,400
is ready so

6
00:00:11,400 --> 00:00:13,080
um with that said I'd like to introduce

7
00:00:13,080 --> 00:00:16,079
next speaker who is Alex bortock

8
00:00:16,079 --> 00:00:18,539
who will be presenting Network CI with

9
00:00:18,539 --> 00:00:22,320
open traffic generator API Alex is a

10
00:00:22,320 --> 00:00:24,660
product manager at keysight Technologies

11
00:00:24,660 --> 00:00:26,760
and he traveled from Mountain View

12
00:00:26,760 --> 00:00:29,160
California to join us today this is Alex

13
00:00:29,160 --> 00:00:32,340
first time presenting at nanog and I do

14
00:00:32,340 --> 00:00:34,680
believe that Alex is going to have a

15
00:00:34,680 --> 00:00:36,480
Cooper Center as well

16
00:00:36,480 --> 00:00:38,940
so with that said uh welcome to the

17
00:00:38,940 --> 00:00:40,800
stage Alex

18
00:00:40,800 --> 00:00:42,660
all right thank you very much and hello

19
00:00:42,660 --> 00:00:43,920
everyone

20
00:00:43,920 --> 00:00:47,460
so yes I'm going to present a work that

21
00:00:47,460 --> 00:00:50,100
an xia team at keysight

22
00:00:50,100 --> 00:00:52,320
um was doing for the last couple of

23
00:00:52,320 --> 00:00:55,920
years which is culminated in open

24
00:00:55,920 --> 00:00:58,500
network Community project called open

25
00:00:58,500 --> 00:01:00,960
traffic generator API

26
00:01:00,960 --> 00:01:05,159
so this project already gained uh quite

27
00:01:05,159 --> 00:01:07,979
significant traction among a few other

28
00:01:07,979 --> 00:01:10,500
network open network Community projects

29
00:01:10,500 --> 00:01:13,140
and we feel like it's a good time to

30
00:01:13,140 --> 00:01:15,659
bring it to the attention of the larger

31
00:01:15,659 --> 00:01:17,700
Network operator audience

32
00:01:17,700 --> 00:01:21,479
to see how we can how you can extract

33
00:01:21,479 --> 00:01:23,759
more value how we can keep evolving the

34
00:01:23,759 --> 00:01:26,040
Project based on your needs along the

35
00:01:26,040 --> 00:01:29,340
lines of the network operator continuous

36
00:01:29,340 --> 00:01:31,700
integration pipeline

37
00:01:31,700 --> 00:01:35,159
so what I was going to do today is to

38
00:01:35,159 --> 00:01:37,320
give you a very brief overview what the

39
00:01:37,320 --> 00:01:40,380
traffic generator is and when people

40
00:01:40,380 --> 00:01:42,000
typically use it

41
00:01:42,000 --> 00:01:45,540
and then we'll see how we we think that

42
00:01:45,540 --> 00:01:48,299
the open traffic generator uh project

43
00:01:48,299 --> 00:01:51,899
can expand this usage across multiple

44
00:01:51,899 --> 00:01:54,180
use cases I'll have some information

45
00:01:54,180 --> 00:01:56,399
about my examples how to use open

46
00:01:56,399 --> 00:01:59,520
traffic generator API and then we're

47
00:01:59,520 --> 00:02:03,180
gonna dive into one use case we have

48
00:02:03,180 --> 00:02:05,939
among you know where we have most

49
00:02:05,939 --> 00:02:08,758
traction with open config project and

50
00:02:08,758 --> 00:02:11,640
then we'll explore uh New Opportunities

51
00:02:11,640 --> 00:02:14,220
we are looking for uh in the network

52
00:02:14,220 --> 00:02:17,359
operations space

53
00:02:17,520 --> 00:02:21,900
so in general when we use a traffic

54
00:02:21,900 --> 00:02:23,700
generator what it means is we want to

55
00:02:23,700 --> 00:02:27,180
test a network device or maybe a portion

56
00:02:27,180 --> 00:02:29,400
of the network and so what it means is

57
00:02:29,400 --> 00:02:31,980
we need to surround this

58
00:02:31,980 --> 00:02:34,440
device or network with a set of test

59
00:02:34,440 --> 00:02:35,459
ports

60
00:02:35,459 --> 00:02:37,080
from which we're going to be sending

61
00:02:37,080 --> 00:02:38,819
traffic

62
00:02:38,819 --> 00:02:42,120
um by you know kind of creating a cloud

63
00:02:42,120 --> 00:02:45,959
of generated Network and all hosts uh

64
00:02:45,959 --> 00:02:48,599
behind those test words and so the

65
00:02:48,599 --> 00:02:50,040
typical capabilities of the traffic

66
00:02:50,040 --> 00:02:52,620
generator that allow to do that is to

67
00:02:52,620 --> 00:02:55,080
create frames of you know flexible

68
00:02:55,080 --> 00:02:58,140
formats with different headers and so on

69
00:02:58,140 --> 00:03:00,420
um be able to schedule traffic flows

70
00:03:00,420 --> 00:03:04,920
with needed packet trade interval

71
00:03:04,920 --> 00:03:07,200
between packets packet sizes for how

72
00:03:07,200 --> 00:03:10,019
long you want to transmit that and so on

73
00:03:10,019 --> 00:03:13,560
and as part of that uh most oftenly we

74
00:03:13,560 --> 00:03:17,040
would also bring some proud genomial two

75
00:03:17,040 --> 00:03:18,900
protocols between the task words and the

76
00:03:18,900 --> 00:03:21,420
device under the test either so that the

77
00:03:21,420 --> 00:03:24,360
traffic would flow through the device or

78
00:03:24,360 --> 00:03:27,300
uh maybe we just want to exercise the

79
00:03:27,300 --> 00:03:28,980
control plane itself you know inject

80
00:03:28,980 --> 00:03:32,360
like a million routes for example right

81
00:03:32,360 --> 00:03:35,940
sometimes traffic generators go further

82
00:03:35,940 --> 00:03:38,459
um they might want to uh they might be

83
00:03:38,459 --> 00:03:40,459
able to emulate stateful tocp

84
00:03:40,459 --> 00:03:43,560
connections or or maybe even go into the

85
00:03:43,560 --> 00:03:45,540
application payload you know send real

86
00:03:45,540 --> 00:03:49,940
HTTP traffic and sleep traffic and so on

87
00:03:49,940 --> 00:03:53,099
uh one of the most important parts is of

88
00:03:53,099 --> 00:03:55,799
course measuring the result of this

89
00:03:55,799 --> 00:03:58,500
stress test and that's where we need an

90
00:03:58,500 --> 00:04:00,239
ability to pull the state of the

91
00:04:00,239 --> 00:04:02,940
protocol understand the metrics of the

92
00:04:02,940 --> 00:04:05,220
flows that Transit the device under the

93
00:04:05,220 --> 00:04:07,080
details to understand you know how many

94
00:04:07,080 --> 00:04:09,599
packets were lost what's the latency and

95
00:04:09,599 --> 00:04:11,959
so on

96
00:04:12,299 --> 00:04:14,400
now why people use traffic generator and

97
00:04:14,400 --> 00:04:17,760
where the most mature and established

98
00:04:17,760 --> 00:04:20,220
use cases of course with people who

99
00:04:20,220 --> 00:04:22,919
build natural products right they want

100
00:04:22,919 --> 00:04:25,680
to control quality they want to you know

101
00:04:25,680 --> 00:04:27,120
align with

102
00:04:27,120 --> 00:04:30,240
protocol specifications so they over the

103
00:04:30,240 --> 00:04:31,979
years it's just been like 20 years

104
00:04:31,979 --> 00:04:35,280
Journey 20 plus Years Journey they build

105
00:04:35,280 --> 00:04:37,080
um a lot of proprietary continuous

106
00:04:37,080 --> 00:04:39,240
integration pipelines internally that

107
00:04:39,240 --> 00:04:41,280
you know then they use to to achieve

108
00:04:41,280 --> 00:04:42,660
those goals

109
00:04:42,660 --> 00:04:44,840
now um when it comes to network

110
00:04:44,840 --> 00:04:48,000
operators there are like two parts the

111
00:04:48,000 --> 00:04:50,639
first part is when somebody is designing

112
00:04:50,639 --> 00:04:52,380
a network right you're preparing to

113
00:04:52,380 --> 00:04:55,620
build it it's a very common task to use

114
00:04:55,620 --> 00:04:58,800
a traffic generator to decide well which

115
00:04:58,800 --> 00:05:00,900
components to choose which perform

116
00:05:00,900 --> 00:05:04,860
better which live up to the expectations

117
00:05:04,860 --> 00:05:07,680
um it is sometimes also used when people

118
00:05:07,680 --> 00:05:10,320
use traffic generator to just see well

119
00:05:10,320 --> 00:05:12,600
overall design would it live up to the

120
00:05:12,600 --> 00:05:14,639
service level objectives that the

121
00:05:14,639 --> 00:05:16,440
business puts for the network

122
00:05:16,440 --> 00:05:18,900
um and then there is even less

123
00:05:18,900 --> 00:05:21,240
established area where people use the

124
00:05:21,240 --> 00:05:23,280
traffic generator to validate the whole

125
00:05:23,280 --> 00:05:24,840
design

126
00:05:24,840 --> 00:05:28,199
in fact when I joined ixia which is now

127
00:05:28,199 --> 00:05:31,020
decide like six years ago I I came from

128
00:05:31,020 --> 00:05:32,699
the network operation space and I was

129
00:05:32,699 --> 00:05:35,160
really hoping now I'm gonna know how to

130
00:05:35,160 --> 00:05:37,259
test a data center with much less time

131
00:05:37,259 --> 00:05:39,720
that I used to do it before it goes into

132
00:05:39,720 --> 00:05:43,380
production but it it wasn't the case and

133
00:05:43,380 --> 00:05:45,419
it's not because the traffic generator

134
00:05:45,419 --> 00:05:49,500
lacks capabilities it's more about

135
00:05:49,500 --> 00:05:52,919
you know there is no maybe a framework

136
00:05:52,919 --> 00:05:55,560
uh like well-established framework how

137
00:05:55,560 --> 00:05:59,400
would you test uh a network with it uh

138
00:05:59,400 --> 00:06:00,479
somebody would have it but it's

139
00:06:00,479 --> 00:06:02,699
proprietary so it's not commonly shared

140
00:06:02,699 --> 00:06:04,500
adopted and so on

141
00:06:04,500 --> 00:06:06,840
and that's important because if you go

142
00:06:06,840 --> 00:06:09,300
to the operator Network

143
00:06:09,300 --> 00:06:11,340
um the the use cases where we could use

144
00:06:11,340 --> 00:06:13,139
not the traffic generator but we don't

145
00:06:13,139 --> 00:06:15,060
uh you know that there are more and more

146
00:06:15,060 --> 00:06:17,460
of them because for example if you don't

147
00:06:17,460 --> 00:06:21,479
have a a well framework to test the data

148
00:06:21,479 --> 00:06:22,740
center for example with some other

149
00:06:22,740 --> 00:06:24,479
network before before it goes to

150
00:06:24,479 --> 00:06:27,120
production you wouldn't be able to uh

151
00:06:27,120 --> 00:06:29,699
test it when you have like a change when

152
00:06:29,699 --> 00:06:31,440
you're preparing a change you know it's

153
00:06:31,440 --> 00:06:32,900
just too much work

154
00:06:32,900 --> 00:06:35,340
to create some framework at this point

155
00:06:35,340 --> 00:06:38,039
so I we think that there is a lot of

156
00:06:38,039 --> 00:06:41,280
opportunities here if we open up a way

157
00:06:41,280 --> 00:06:43,139
to communicate with a with a traffic

158
00:06:43,139 --> 00:06:44,900
generator in a way that it is public

159
00:06:44,900 --> 00:06:48,720
vendor neutral which where uh Community

160
00:06:48,720 --> 00:06:51,120
can contribute the use cases that they

161
00:06:51,120 --> 00:06:54,240
have so that uh there could be workflows

162
00:06:54,240 --> 00:06:56,340
between those silos there could be a

163
00:06:56,340 --> 00:06:59,340
workflow between the vendor and the

164
00:06:59,340 --> 00:07:01,020
network operator and within the network

165
00:07:01,020 --> 00:07:02,699
operator between people who design

166
00:07:02,699 --> 00:07:04,259
networks and then people who maintain

167
00:07:04,259 --> 00:07:05,639
that Network so that they can use

168
00:07:05,639 --> 00:07:07,620
similar tools maybe tools would be

169
00:07:07,620 --> 00:07:09,240
different but they could talk the same

170
00:07:09,240 --> 00:07:12,840
API and that helps share the way you you

171
00:07:12,840 --> 00:07:14,460
we Implement those tools the way you use

172
00:07:14,460 --> 00:07:15,419
them

173
00:07:15,419 --> 00:07:18,240
so let me go through a couple of areas

174
00:07:18,240 --> 00:07:20,880
we we see we see the value here so as I

175
00:07:20,880 --> 00:07:23,160
mentioned the first one is the shared

176
00:07:23,160 --> 00:07:26,819
workflow between the vendor and the user

177
00:07:26,819 --> 00:07:28,880
um

178
00:07:28,979 --> 00:07:32,280
how the network operator tells to the

179
00:07:32,280 --> 00:07:33,900
vendor what kind of use cases they

180
00:07:33,900 --> 00:07:36,180
actually have how they want to test the

181
00:07:36,180 --> 00:07:39,780
equipment if the whole test content is

182
00:07:39,780 --> 00:07:41,940
you know proprietary right we don't want

183
00:07:41,940 --> 00:07:43,860
to have this vendor login we want to be

184
00:07:43,860 --> 00:07:48,240
able to share such information freely

185
00:07:48,360 --> 00:07:50,880
um it becomes especially important if we

186
00:07:50,880 --> 00:07:52,380
are talking about not just commercial

187
00:07:52,380 --> 00:07:56,240
vendors but you know open source laws uh

188
00:07:56,240 --> 00:08:00,259
developers you can have a open source

189
00:08:00,259 --> 00:08:03,120
developer who would like to write

190
00:08:03,120 --> 00:08:05,940
certain unit tests for the code he

191
00:08:05,940 --> 00:08:07,919
writes for

192
00:08:07,919 --> 00:08:11,340
for its component but of course quite

193
00:08:11,340 --> 00:08:14,280
often is not able to afford or doesn't

194
00:08:14,280 --> 00:08:17,340
think it's it makes sense to bring up a

195
00:08:17,340 --> 00:08:19,740
commercial tool to test

196
00:08:19,740 --> 00:08:21,660
um and so you know they use some open

197
00:08:21,660 --> 00:08:24,960
source uh testing uh

198
00:08:24,960 --> 00:08:27,060
you know two kids that could be found

199
00:08:27,060 --> 00:08:29,759
but then if you bring this open source

200
00:08:29,759 --> 00:08:32,760
project to the corporate user they want

201
00:08:32,760 --> 00:08:34,440
to test at scale right they want to

202
00:08:34,440 --> 00:08:37,260
really make sure that this now can fit

203
00:08:37,260 --> 00:08:39,719
into their Network on the same quality

204
00:08:39,719 --> 00:08:42,659
level as they typically expect from from

205
00:08:42,659 --> 00:08:44,760
the commercial vendors so it would be

206
00:08:44,760 --> 00:08:46,320
really nice to have the same test

207
00:08:46,320 --> 00:08:48,000
content that the original developer

208
00:08:48,000 --> 00:08:52,440
could use and then the uh corporate

209
00:08:52,440 --> 00:08:55,140
Network operator could uh could run as

210
00:08:55,140 --> 00:08:57,319
well

211
00:08:57,720 --> 00:09:00,300
um another area is integration with the

212
00:09:00,300 --> 00:09:02,040
third parties so let's say we have some

213
00:09:02,040 --> 00:09:05,000
Network automation network orchestration

214
00:09:05,000 --> 00:09:08,700
software developer who would like to

215
00:09:08,700 --> 00:09:11,100
enable certain validation capabilities

216
00:09:11,100 --> 00:09:13,680
provided by a traction generator without

217
00:09:13,680 --> 00:09:16,200
open API they have to integrate with

218
00:09:16,200 --> 00:09:19,620
each individual traffic generator one by

219
00:09:19,620 --> 00:09:22,200
one which is frankly not feasible and

220
00:09:22,200 --> 00:09:23,820
then it's hard to share it between

221
00:09:23,820 --> 00:09:27,060
within community and so if we have a

222
00:09:27,060 --> 00:09:30,240
common API we make this this job easier

223
00:09:30,240 --> 00:09:34,260
and multiple people can contribute

224
00:09:34,260 --> 00:09:36,480
um and finally the same thing goes to

225
00:09:36,480 --> 00:09:39,660
the use cases that go to the continuous

226
00:09:39,660 --> 00:09:42,000
integration for like change validation

227
00:09:42,000 --> 00:09:44,640
data center validation and so on that

228
00:09:44,640 --> 00:09:47,399
people can freely share and publish as

229
00:09:47,399 --> 00:09:49,820
examples

230
00:09:50,279 --> 00:09:52,260
with that let's take a look at what it

231
00:09:52,260 --> 00:09:56,100
takes to create a public API for the

232
00:09:56,100 --> 00:09:57,720
traffic generator

233
00:09:57,720 --> 00:10:00,120
so if you go back to this diagram

234
00:10:00,120 --> 00:10:03,360
uh so we have these test port and those

235
00:10:03,360 --> 00:10:05,820
test ports would need to create those

236
00:10:05,820 --> 00:10:08,580
logical objects routers and endpoints

237
00:10:08,580 --> 00:10:10,860
that would generate traffic so the first

238
00:10:10,860 --> 00:10:12,720
thing we need to do we need to tell it

239
00:10:12,720 --> 00:10:15,959
what we want uh the traffic generator to

240
00:10:15,959 --> 00:10:18,120
create so we need to define those

241
00:10:18,120 --> 00:10:19,200
objects

242
00:10:19,200 --> 00:10:22,200
once we do that uh the second step is to

243
00:10:22,200 --> 00:10:26,100
tell the engine when to when to start a

244
00:10:26,100 --> 00:10:27,839
protocol when to start the traffic right

245
00:10:27,839 --> 00:10:31,200
so it's the execution part and then when

246
00:10:31,200 --> 00:10:33,839
the the test is being executed we look

247
00:10:33,839 --> 00:10:36,420
into analyzing results we're getting

248
00:10:36,420 --> 00:10:38,459
metrics uh making certain decisions

249
00:10:38,459 --> 00:10:39,720
about it

250
00:10:39,720 --> 00:10:41,760
and so that kind of translates one to

251
00:10:41,760 --> 00:10:44,160
one to the uh open traffic generator

252
00:10:44,160 --> 00:10:46,860
model so the defined part it's the

253
00:10:46,860 --> 00:10:48,480
configuration

254
00:10:48,480 --> 00:10:50,940
um that you know starts from a very

255
00:10:50,940 --> 00:10:52,920
basic things of like what's the settings

256
00:10:52,920 --> 00:10:56,160
on the physical Port layer and then like

257
00:10:56,160 --> 00:10:57,779
if you need to aggregate ports what's

258
00:10:57,779 --> 00:10:59,519
the layer three configuration and so on

259
00:10:59,519 --> 00:11:01,500
and ends up with configuring logical

260
00:11:01,500 --> 00:11:04,380
devices protocols on them and flows

261
00:11:04,380 --> 00:11:05,459
between them

262
00:11:05,459 --> 00:11:08,339
the second part is the control where you

263
00:11:08,339 --> 00:11:11,459
bring up interfaces protocols start

264
00:11:11,459 --> 00:11:14,040
traffic so on and then the third third

265
00:11:14,040 --> 00:11:16,200
part is when you inquire state of

266
00:11:16,200 --> 00:11:18,180
protocols like for example

267
00:11:18,180 --> 00:11:21,660
did my bgp session came up uh did I get

268
00:11:21,660 --> 00:11:24,480
as many routes as I expected uh store

269
00:11:24,480 --> 00:11:27,120
that's installed and then uh put in the

270
00:11:27,120 --> 00:11:29,339
metrics about you know latency counters

271
00:11:29,339 --> 00:11:31,579
and so on

272
00:11:31,579 --> 00:11:35,040
I was thinking how to present this uh

273
00:11:35,040 --> 00:11:37,620
OTG configuration to you what it really

274
00:11:37,620 --> 00:11:41,220
is it follows the open open API standard

275
00:11:41,220 --> 00:11:44,220
which I mean it's a text file it's yaml

276
00:11:44,220 --> 00:11:47,640
or Json or it's a protobuf right a

277
00:11:47,640 --> 00:11:50,040
description of the configuration uh we

278
00:11:50,040 --> 00:11:52,380
have it published on the otg.dev website

279
00:11:52,380 --> 00:11:54,600
I'm just using here a virtual

280
00:11:54,600 --> 00:11:58,500
representation right uh to highlight the

281
00:11:58,500 --> 00:12:00,779
main components so in the middle we have

282
00:12:00,779 --> 00:12:02,820
device under the test that's kind of not

283
00:12:02,820 --> 00:12:05,700
the part of the model itself we have

284
00:12:05,700 --> 00:12:09,959
test ports connected to the dot and then

285
00:12:09,959 --> 00:12:11,579
behind test ports we have emulating

286
00:12:11,579 --> 00:12:13,680
devices we can have many of them as many

287
00:12:13,680 --> 00:12:16,079
as we want with different parameters

288
00:12:16,079 --> 00:12:18,240
like you know IPS and autonomous systems

289
00:12:18,240 --> 00:12:21,480
and so on and then behind that we expect

290
00:12:21,480 --> 00:12:24,240
to have like subnets that should talk to

291
00:12:24,240 --> 00:12:26,760
each other and the traffic flows that we

292
00:12:26,760 --> 00:12:28,860
create between devices represent this

293
00:12:28,860 --> 00:12:32,180
traffic between the devices

294
00:12:33,360 --> 00:12:34,920
um we have

295
00:12:34,920 --> 00:12:38,399
um several com so for this to happen we

296
00:12:38,399 --> 00:12:41,880
need several components to align to the

297
00:12:41,880 --> 00:12:43,800
specification the first part is the

298
00:12:43,800 --> 00:12:46,320
client part this is something that you

299
00:12:46,320 --> 00:12:48,899
use to talk to the traffic generator and

300
00:12:48,899 --> 00:12:50,760
tell it what to do

301
00:12:50,760 --> 00:12:51,959
um because

302
00:12:51,959 --> 00:12:55,680
OTG is an open API spec it's really

303
00:12:55,680 --> 00:12:58,740
um any anything that can talk rest API

304
00:12:58,740 --> 00:13:02,339
or erpc can be used as a client like

305
00:13:02,339 --> 00:13:04,260
kernel which is fine

306
00:13:04,260 --> 00:13:07,620
um but uh of course as you're gonna

307
00:13:07,620 --> 00:13:09,660
develop

308
00:13:09,660 --> 00:13:13,200
you know specific test cases it helps to

309
00:13:13,200 --> 00:13:15,779
have a library uh so for example you can

310
00:13:15,779 --> 00:13:18,779
use python or go to quickly iterate

311
00:13:18,779 --> 00:13:20,940
through the open traffic generator API

312
00:13:20,940 --> 00:13:23,279
without thinking about underlying API

313
00:13:23,279 --> 00:13:25,079
calls so we have this Library it's

314
00:13:25,079 --> 00:13:26,459
called snapping

315
00:13:26,459 --> 00:13:28,500
and then finally

316
00:13:28,500 --> 00:13:30,839
um for those who just need need to start

317
00:13:30,839 --> 00:13:32,579
somewhere and maybe don't want to go

318
00:13:32,579 --> 00:13:34,200
right into the developing the test

319
00:13:34,200 --> 00:13:37,440
program like Python program there is a

320
00:13:37,440 --> 00:13:40,800
CLI tool that I'm going to show uh in

321
00:13:40,800 --> 00:13:43,920
the next few slides how to use it that

322
00:13:43,920 --> 00:13:46,500
essentially implements the OTG API in a

323
00:13:46,500 --> 00:13:47,220
very

324
00:13:47,220 --> 00:13:50,399
you know easy to use manner so it's a

325
00:13:50,399 --> 00:13:51,839
good entry point

326
00:13:51,839 --> 00:13:54,060
so we have a client now the client need

327
00:13:54,060 --> 00:13:56,639
to talk to a server and the server is

328
00:13:56,639 --> 00:13:58,500
the traffic generator itself

329
00:13:58,500 --> 00:14:00,959
so by this moment we already have

330
00:14:00,959 --> 00:14:03,180
several implementations

331
00:14:03,180 --> 00:14:04,500
um of

332
00:14:04,500 --> 00:14:07,800
OTG API uh from different products so

333
00:14:07,800 --> 00:14:10,500
the first one we built it's called xcac

334
00:14:10,500 --> 00:14:13,320
it's the containerized version of xia

335
00:14:13,320 --> 00:14:15,440
traffic generator

336
00:14:15,440 --> 00:14:18,540
it's not open source but it has a free

337
00:14:18,540 --> 00:14:21,000
edition or like Community Edition right

338
00:14:21,000 --> 00:14:23,160
so you can freely download it

339
00:14:23,160 --> 00:14:26,399
launch it use it it's just limit it in

340
00:14:26,399 --> 00:14:28,560
certain regard but otherwise freely

341
00:14:28,560 --> 00:14:29,820
available

342
00:14:29,820 --> 00:14:33,000
then as part of the open config our

343
00:14:33,000 --> 00:14:36,720
friends there build Magna which is an

344
00:14:36,720 --> 00:14:38,700
open source traffic generator you can

345
00:14:38,700 --> 00:14:41,279
see actual how it's implemented and has

346
00:14:41,279 --> 00:14:44,940
like a plugable architecture uh it's

347
00:14:44,940 --> 00:14:47,579
sort of a skeleton so far but it's made

348
00:14:47,579 --> 00:14:50,040
in a way that can be extend extended so

349
00:14:50,040 --> 00:14:53,279
if somebody wants to add feature or

350
00:14:53,279 --> 00:14:55,740
maybe use that as a inspiration to build

351
00:14:55,740 --> 00:14:57,720
your own traffic generator that's a good

352
00:14:57,720 --> 00:14:59,300
place to start

353
00:14:59,300 --> 00:15:03,660
we also took uh on our self task to see

354
00:15:03,660 --> 00:15:05,880
like can we take some open source

355
00:15:05,880 --> 00:15:09,000
project which doesn't comply to the OTG

356
00:15:09,000 --> 00:15:12,540
API and make like a proxy so that we can

357
00:15:12,540 --> 00:15:15,120
use it with OTG so we took Cisco T-Rex

358
00:15:15,120 --> 00:15:18,000
project and created a plugin for it so

359
00:15:18,000 --> 00:15:20,760
that if you have an OTG test

360
00:15:20,760 --> 00:15:23,459
configuration you can apply it to T-Rex

361
00:15:23,459 --> 00:15:25,620
and it will do its job so you don't have

362
00:15:25,620 --> 00:15:27,839
to know how to use T-Rex really

363
00:15:27,839 --> 00:15:30,839
so and with that if there are any

364
00:15:30,839 --> 00:15:33,120
developers of T-Rex here or somebody who

365
00:15:33,120 --> 00:15:35,279
knows them we would love to continue

366
00:15:35,279 --> 00:15:37,740
this work and make this available with

367
00:15:37,740 --> 00:15:39,899
all the latest versions of both T-Rex as

368
00:15:39,899 --> 00:15:43,260
well as the OTG API and then we have a

369
00:15:43,260 --> 00:15:45,720
commercial product that you know has all

370
00:15:45,720 --> 00:15:48,240
the capabilities

371
00:15:48,240 --> 00:15:49,920
um and then of course it's important to

372
00:15:49,920 --> 00:15:52,260
have test content this is what's really

373
00:15:52,260 --> 00:15:54,420
lacking when we talk about just

374
00:15:54,420 --> 00:15:56,040
proprietary implementations nobody

375
00:15:56,040 --> 00:16:00,540
publishes uh example setups with that

376
00:16:00,540 --> 00:16:02,519
tool with proprietary configurations and

377
00:16:02,519 --> 00:16:05,699
apis and here we can change that so on

378
00:16:05,699 --> 00:16:08,220
the otg.ev website we have examples you

379
00:16:08,220 --> 00:16:11,399
it's very easy to clone reproduce repeat

380
00:16:11,399 --> 00:16:14,579
take a look how they work in addition to

381
00:16:14,579 --> 00:16:16,920
that open kinetic project has a big

382
00:16:16,920 --> 00:16:20,760
Library growing library of what is

383
00:16:20,760 --> 00:16:23,279
called feature profiles that has a lot

384
00:16:23,279 --> 00:16:25,019
of examples how to test different

385
00:16:25,019 --> 00:16:27,420
capabilities of network devices and

386
00:16:27,420 --> 00:16:29,940
you're gonna hear more about that today

387
00:16:29,940 --> 00:16:32,940
and then we have a couple of examples of

388
00:16:32,940 --> 00:16:36,240
contributions to Sonic ecosystem where

389
00:16:36,240 --> 00:16:38,639
we have some content there within an OTG

390
00:16:38,639 --> 00:16:40,940
as well

391
00:16:41,519 --> 00:16:43,740
really quickly how to use OTG API I'll

392
00:16:43,740 --> 00:16:45,899
give you a couple of examples so that

393
00:16:45,899 --> 00:16:49,019
you can get a sense so the very basic uh

394
00:16:49,019 --> 00:16:51,959
is when you just you don't emulate any

395
00:16:51,959 --> 00:16:53,699
logical devices you just want to have

396
00:16:53,699 --> 00:16:55,860
traffic from one port to another Port

397
00:16:55,860 --> 00:16:57,420
through your device under the test we

398
00:16:57,420 --> 00:16:59,300
call it raw traffic

399
00:16:59,300 --> 00:17:02,279
and I'm going to use this CLI utility to

400
00:17:02,279 --> 00:17:05,280
show how it really works so the first

401
00:17:05,280 --> 00:17:07,799
thing you do is say autogen create flow

402
00:17:07,799 --> 00:17:12,000
okay and the idea is when you run that

403
00:17:12,000 --> 00:17:13,679
and you give it parameters like what are

404
00:17:13,679 --> 00:17:15,240
the source APS you want in the

405
00:17:15,240 --> 00:17:17,579
destination APS and protocol and so on

406
00:17:17,579 --> 00:17:19,319
it will create a description of the flow

407
00:17:19,319 --> 00:17:22,140
that traffic generator understands it

408
00:17:22,140 --> 00:17:23,579
will be in the OTG format it's

409
00:17:23,579 --> 00:17:25,319
essentially going to be a yaml file on

410
00:17:25,319 --> 00:17:27,959
the output of this command all right and

411
00:17:27,959 --> 00:17:29,940
I have a visual representation what it

412
00:17:29,940 --> 00:17:32,160
contains but really it's just a text

413
00:17:32,160 --> 00:17:33,500
file

414
00:17:33,500 --> 00:17:36,960
so you have that what do you do next you

415
00:17:36,960 --> 00:17:40,500
can now use OTG otgen run command to

416
00:17:40,500 --> 00:17:42,780
ingest that yaml file and apply it to a

417
00:17:42,780 --> 00:17:45,720
traffic generator okay and when you

418
00:17:45,720 --> 00:17:47,280
apply to the traffic generator if there

419
00:17:47,280 --> 00:17:49,980
are no errors you say start traffic

420
00:17:49,980 --> 00:17:52,200
and then you pull metrics and then you

421
00:17:52,200 --> 00:17:54,179
send the metrics to the output so

422
00:17:54,179 --> 00:17:55,860
essentially with these two commands you

423
00:17:55,860 --> 00:17:58,140
can start traffic with random source and

424
00:17:58,140 --> 00:18:00,539
IP addresses you know random protocols

425
00:18:00,539 --> 00:18:02,580
whatever rotation

426
00:18:02,580 --> 00:18:05,220
um uh currently supports uh and then

427
00:18:05,220 --> 00:18:07,020
you'll get immediately

428
00:18:07,020 --> 00:18:08,880
um measurement results like this and

429
00:18:08,880 --> 00:18:10,679
these are Json strings that are being

430
00:18:10,679 --> 00:18:12,539
sent to the output you can save them

431
00:18:12,539 --> 00:18:15,539
they can analyze them somewhere uh parse

432
00:18:15,539 --> 00:18:18,120
them and we also provide a nice like

433
00:18:18,120 --> 00:18:20,940
reporting utility that condenses all

434
00:18:20,940 --> 00:18:23,640
that to certain ways of representing it

435
00:18:23,640 --> 00:18:26,580
like in a tabular format or graphs right

436
00:18:26,580 --> 00:18:28,980
so this is just to get us

437
00:18:28,980 --> 00:18:31,380
first feel of what the traffic generator

438
00:18:31,380 --> 00:18:33,539
uh could do

439
00:18:33,539 --> 00:18:34,919
um let's say if you have a more

440
00:18:34,919 --> 00:18:36,780
complicated example you want to create

441
00:18:36,780 --> 00:18:40,140
two devices that would have a bgp stack

442
00:18:40,140 --> 00:18:43,260
on them and then exchange routes and

443
00:18:43,260 --> 00:18:44,520
then that is going to be a traffic

444
00:18:44,520 --> 00:18:46,919
between those routes

445
00:18:46,919 --> 00:18:50,520
um so you do autogen create device

446
00:18:50,520 --> 00:18:52,320
two times because you want to devices

447
00:18:52,320 --> 00:18:53,700
talk to each other

448
00:18:53,700 --> 00:18:56,100
uh it'll tell what the IP address of the

449
00:18:56,100 --> 00:18:58,380
device would be and on what port the

450
00:18:58,380 --> 00:19:02,039
device sits so once you have that you

451
00:19:02,039 --> 00:19:04,559
gonna add bgp stack to those devices so

452
00:19:04,559 --> 00:19:06,059
it's essentially what happens here is

453
00:19:06,059 --> 00:19:09,720
this yaml file is getting you know more

454
00:19:09,720 --> 00:19:11,580
and more configuration added to it you

455
00:19:11,580 --> 00:19:13,500
say hey I want to have this autonomous

456
00:19:13,500 --> 00:19:15,600
system over there and I want the peer

457
00:19:15,600 --> 00:19:18,240
with an IP address of my DOT and then

458
00:19:18,240 --> 00:19:20,460
I'm gonna inject announce this prefix

459
00:19:20,460 --> 00:19:22,140
over here

460
00:19:22,140 --> 00:19:24,179
once you have that now you can create a

461
00:19:24,179 --> 00:19:26,640
flow between these two device

462
00:19:26,640 --> 00:19:29,400
hope it's logical enough

463
00:19:29,400 --> 00:19:31,799
now but now what really happens in the

464
00:19:31,799 --> 00:19:34,380
end people start writing test programs

465
00:19:34,380 --> 00:19:36,299
because this is what you actually want

466
00:19:36,299 --> 00:19:38,460
to run as part of your CI pipeline to

467
00:19:38,460 --> 00:19:41,900
see if it fails or succeeds right

468
00:19:41,900 --> 00:19:45,360
and to give you a sense of what to use

469
00:19:45,360 --> 00:19:46,940
sniper Library

470
00:19:46,940 --> 00:19:49,559
it follows these three steps so to

471
00:19:49,559 --> 00:19:52,679
define configuration like you create a

472
00:19:52,679 --> 00:19:55,740
packet where you add Ethernet with Mac

473
00:19:55,740 --> 00:19:58,559
addresses and then you say hey and then

474
00:19:58,559 --> 00:20:01,559
add ipv4 or IPv6 with IP addresses and

475
00:20:01,559 --> 00:20:03,240
then let's add a transport protocol

476
00:20:03,240 --> 00:20:05,059
right so you just sort of

477
00:20:05,059 --> 00:20:07,980
create Flow by flow what you need this

478
00:20:07,980 --> 00:20:10,440
way and then once you have it this is

479
00:20:10,440 --> 00:20:13,200
the configuration you can send to the

480
00:20:13,200 --> 00:20:15,000
traffic generator you just say set

481
00:20:15,000 --> 00:20:19,020
config if it accepts it no errors in the

482
00:20:19,020 --> 00:20:21,000
response you say hey transmit traffic

483
00:20:21,000 --> 00:20:23,700
for example if there is no protocols

484
00:20:23,700 --> 00:20:25,440
involved if there are protocols involved

485
00:20:25,440 --> 00:20:26,760
you start them first

486
00:20:26,760 --> 00:20:28,980
and then once when the traffic is

487
00:20:28,980 --> 00:20:31,440
running you just pull a statistics

488
00:20:31,440 --> 00:20:36,320
periodically uh and see how you're doing

489
00:20:36,360 --> 00:20:37,700
right

490
00:20:37,700 --> 00:20:40,860
because we you know

491
00:20:40,860 --> 00:20:42,780
have different people from Community

492
00:20:42,780 --> 00:20:46,080
trying it and we see where they fell at

493
00:20:46,080 --> 00:20:48,360
this point we sort of already aggregated

494
00:20:48,360 --> 00:20:50,880
some knowledge about the common pitfalls

495
00:20:50,880 --> 00:20:53,100
I'd like to share a few of them

496
00:20:53,100 --> 00:20:55,380
um the the biggest one is when try

497
00:20:55,380 --> 00:20:57,419
people try to write a python test

498
00:20:57,419 --> 00:20:59,700
program just using what they currently

499
00:20:59,700 --> 00:21:01,860
have on their laptop and typically they

500
00:21:01,860 --> 00:21:03,299
would have broken dependencies they

501
00:21:03,299 --> 00:21:04,380
don't know how to use Virtual

502
00:21:04,380 --> 00:21:06,299
environment it's all okay it's really

503
00:21:06,299 --> 00:21:08,820
hard you just start with a clean VM

504
00:21:08,820 --> 00:21:10,559
you're going to save yourself a bunch of

505
00:21:10,559 --> 00:21:13,020
time yes

506
00:21:13,020 --> 00:21:14,940
um then the other thing is when people

507
00:21:14,940 --> 00:21:17,160
start going after like really like oh

508
00:21:17,160 --> 00:21:19,620
this is my use cases what I with the

509
00:21:19,620 --> 00:21:21,559
configuration I have in my network

510
00:21:21,559 --> 00:21:23,940
you'll get there right but it will take

511
00:21:23,940 --> 00:21:26,120
time uh start with something very simple

512
00:21:26,120 --> 00:21:28,919
the simplest thing you can do is don't

513
00:21:28,919 --> 00:21:30,840
have any device under test at all just

514
00:21:30,840 --> 00:21:33,000
connect two test ports back to back

515
00:21:33,000 --> 00:21:35,159
anything if you send from one port it

516
00:21:35,159 --> 00:21:36,720
will end up on the other ports for sure

517
00:21:36,720 --> 00:21:38,880
right so you like eliminate a lot of

518
00:21:38,880 --> 00:21:41,820
broken uh things uh this way you make

519
00:21:41,820 --> 00:21:44,760
sure you you overall setup works and

520
00:21:44,760 --> 00:21:46,860
then you can add the device under the

521
00:21:46,860 --> 00:21:49,940
test in the middle and start testing it

522
00:21:49,940 --> 00:21:52,500
uh okay

523
00:21:52,500 --> 00:21:56,100
um and also you know it's a learning

524
00:21:56,100 --> 00:21:59,039
curve for some to start writing a Python

525
00:21:59,039 --> 00:22:01,740
program uh so that's fine we have a CLI

526
00:22:01,740 --> 00:22:04,020
tool you can use uh so you don't have to

527
00:22:04,020 --> 00:22:07,140
necessarily start with the with the with

528
00:22:07,140 --> 00:22:07,679
um

529
00:22:07,679 --> 00:22:09,480
with programming

530
00:22:09,480 --> 00:22:12,240
and also we have a bunch of examples as

531
00:22:12,240 --> 00:22:14,100
I said it's just clone the repository

532
00:22:14,100 --> 00:22:15,960
and execute those examples it's a good

533
00:22:15,960 --> 00:22:19,200
way to get started and the final one uh

534
00:22:19,200 --> 00:22:22,740
when we build Labs not in Hardware but

535
00:22:22,740 --> 00:22:25,020
uh using software you know containers

536
00:22:25,020 --> 00:22:28,080
virtual machines and so on just try to

537
00:22:28,080 --> 00:22:31,799
use one of those like declarative lab

538
00:22:31,799 --> 00:22:34,500
you know configurations either

539
00:22:34,500 --> 00:22:36,059
container lab

540
00:22:36,059 --> 00:22:37,980
kubernetes Network accumulation you're

541
00:22:37,980 --> 00:22:40,140
going to hear more about that today

542
00:22:40,140 --> 00:22:41,580
um or at least use Docker compose

543
00:22:41,580 --> 00:22:43,740
instead of just docking around it will

544
00:22:43,740 --> 00:22:46,020
it's just much more repeatable that way

545
00:22:46,020 --> 00:22:49,140
you eliminate a lot of errors

546
00:22:49,140 --> 00:22:51,780
all right so with that I'd like to

547
00:22:51,780 --> 00:22:54,780
invite one of the OTG contributors

548
00:22:54,780 --> 00:22:56,700
Marcos Heinz from Google who is

549
00:22:56,700 --> 00:23:00,299
representing the open config project

550
00:23:00,299 --> 00:23:02,400
howdy everybody

551
00:23:02,400 --> 00:23:03,720
um so I'm going to talk to you today

552
00:23:03,720 --> 00:23:06,299
just briefly on a some specific use

553
00:23:06,299 --> 00:23:09,419
cases that we have been using OTG in uh

554
00:23:09,419 --> 00:23:10,740
Google testing

555
00:23:10,740 --> 00:23:12,240
so

556
00:23:12,240 --> 00:23:14,880
um in one of our main use cases that we

557
00:23:14,880 --> 00:23:17,280
really are interested in solving is

558
00:23:17,280 --> 00:23:20,159
having a network emulation that can

559
00:23:20,159 --> 00:23:23,580
emulate our various vendor types in a uh

560
00:23:23,580 --> 00:23:25,500
you know virtual environment and so what

561
00:23:25,500 --> 00:23:26,820
we've actually built and we're actually

562
00:23:26,820 --> 00:23:28,020
going to talk to you all later today

563
00:23:28,020 --> 00:23:31,200
about King e is we have a kubernetes

564
00:23:31,200 --> 00:23:34,020
based Network emulation platform and

565
00:23:34,020 --> 00:23:35,640
we've worked in partnership with

566
00:23:35,640 --> 00:23:38,039
keysight to add traffic and protocol

567
00:23:38,039 --> 00:23:42,360
generation into that ecosystem and so in

568
00:23:42,360 --> 00:23:44,940
this scenario as you see before you this

569
00:23:44,940 --> 00:23:46,860
is just a simple system under test with

570
00:23:46,860 --> 00:23:48,840
a set of network devices that we bring

571
00:23:48,840 --> 00:23:53,220
up in our emulation environment and uh

572
00:23:53,220 --> 00:23:55,260
as part of that ecosystem we then attach

573
00:23:55,260 --> 00:23:58,919
the OTG ports to that to allow us to be

574
00:23:58,919 --> 00:24:00,299
able to do all of our protocol and we're

575
00:24:00,299 --> 00:24:02,220
out and traffic generation across those

576
00:24:02,220 --> 00:24:04,620
network devices

577
00:24:04,620 --> 00:24:06,659
uh and then within OTG it can actually

578
00:24:06,659 --> 00:24:09,360
then expand that topology to support uh

579
00:24:09,360 --> 00:24:12,320
virtual devices behind them

580
00:24:12,320 --> 00:24:15,840
as I said we were the routing protocols

581
00:24:15,840 --> 00:24:18,720
and the traffic then can be uh brought

582
00:24:18,720 --> 00:24:20,460
up and then forwarded across our Network

583
00:24:20,460 --> 00:24:23,760
emulation we can basically take uh

584
00:24:23,760 --> 00:24:26,580
something a purely containerized and

585
00:24:26,580 --> 00:24:30,120
then develop a set of tests against that

586
00:24:30,120 --> 00:24:33,900
and in openconfig we've uh referenced

587
00:24:33,900 --> 00:24:36,559
the feature profiles repo that's there

588
00:24:36,559 --> 00:24:40,320
that uses our undotra test framework to

589
00:24:40,320 --> 00:24:42,900
drive a set of functional specifications

590
00:24:42,900 --> 00:24:45,720
that we have developed for our internal

591
00:24:45,720 --> 00:24:49,740
use cases and we've open sourced and the

592
00:24:49,740 --> 00:24:52,260
real benefit we're going for is being

593
00:24:52,260 --> 00:24:54,419
able to have an emulated environment

594
00:24:54,419 --> 00:24:55,919
that can bring up containerized Network

595
00:24:55,919 --> 00:24:59,220
os's and the protocol and traffic

596
00:24:59,220 --> 00:25:00,240
testing

597
00:25:00,240 --> 00:25:03,539
as and then develop a hardware test bed

598
00:25:03,539 --> 00:25:05,700
and basically take our tests directly

599
00:25:05,700 --> 00:25:07,140
from being able to be run in the

600
00:25:07,140 --> 00:25:08,460
containerized environment and then bring

601
00:25:08,460 --> 00:25:10,940
them to hardware

602
00:25:11,220 --> 00:25:13,260
so thank you

603
00:25:13,260 --> 00:25:15,600
and

604
00:25:15,600 --> 00:25:18,900
um please stay if you can to listen more

605
00:25:18,900 --> 00:25:23,000
about knee and andatra later at around

606
00:25:23,000 --> 00:25:26,279
four for something it's the time for

607
00:25:26,279 --> 00:25:27,179
that talk

608
00:25:27,179 --> 00:25:28,980
all right thank you Marcus

609
00:25:28,980 --> 00:25:31,919
um and now in the final part of the

610
00:25:31,919 --> 00:25:35,360
presentation uh what I'd like to uh

611
00:25:35,360 --> 00:25:39,900
explore with you uh like how can you use

612
00:25:39,900 --> 00:25:42,539
this work and maybe try to apply it to

613
00:25:42,539 --> 00:25:45,539
your more daily work of operating a

614
00:25:45,539 --> 00:25:47,520
network like testing something that goes

615
00:25:47,520 --> 00:25:49,559
into that level okay

616
00:25:49,559 --> 00:25:53,159
so and there's a simple example uh I

617
00:25:53,159 --> 00:25:55,500
decided to take like something very

618
00:25:55,500 --> 00:25:57,240
basic what if you have to upgrade

619
00:25:57,240 --> 00:25:59,940
tonight to a new version of the network

620
00:25:59,940 --> 00:26:02,100
operating system right I do you know if

621
00:26:02,100 --> 00:26:03,960
it's gonna work or not like what does it

622
00:26:03,960 --> 00:26:06,120
take for you to figure it out

623
00:26:06,120 --> 00:26:08,400
uh and it probably would be much easier

624
00:26:08,400 --> 00:26:12,299
if for every new version of the uh

625
00:26:12,299 --> 00:26:15,840
operating system that you you know you

626
00:26:15,840 --> 00:26:18,120
care about there would be an automated

627
00:26:18,120 --> 00:26:20,159
script that run every time the the

628
00:26:20,159 --> 00:26:22,740
version gets published so that you know

629
00:26:22,740 --> 00:26:26,340
if certain things that it does will it

630
00:26:26,340 --> 00:26:28,620
break or not right it would probably

631
00:26:28,620 --> 00:26:31,559
help so let's take a look what does it

632
00:26:31,559 --> 00:26:35,279
take to create such an automated uh test

633
00:26:35,279 --> 00:26:37,260
setup

634
00:26:37,260 --> 00:26:39,380
um so we have some input

635
00:26:39,380 --> 00:26:43,440
criteria here the one is the NOS from a

636
00:26:43,440 --> 00:26:45,480
vendor and what's what kind of the model

637
00:26:45,480 --> 00:26:47,279
of that and yes and the version and so

638
00:26:47,279 --> 00:26:48,659
on and then we have some service

639
00:26:48,659 --> 00:26:50,340
objectives right you have a piece of the

640
00:26:50,340 --> 00:26:52,140
network where

641
00:26:52,140 --> 00:26:54,000
um you need to have certain connectivity

642
00:26:54,000 --> 00:26:55,260
so

643
00:26:55,260 --> 00:26:57,900
what does it translate to is that this

644
00:26:57,900 --> 00:27:01,740
NOS sits in a particular set of network

645
00:27:01,740 --> 00:27:04,380
segments you can describe them uh and

646
00:27:04,380 --> 00:27:06,120
hopefully you can emulate them right

647
00:27:06,120 --> 00:27:09,260
there is more and more

648
00:27:09,260 --> 00:27:13,080
possibilities now to instantiate a

649
00:27:13,080 --> 00:27:15,000
segment of your network using one of

650
00:27:15,000 --> 00:27:17,760
those software-based

651
00:27:17,760 --> 00:27:19,559
Network emulators

652
00:27:19,559 --> 00:27:22,320
and then these service objectives namely

653
00:27:22,320 --> 00:27:25,620
can be simple uh like if my DNS server

654
00:27:25,620 --> 00:27:28,799
is reachable from everywhere or like my

655
00:27:28,799 --> 00:27:31,740
SSH Port is never reachable from the

656
00:27:31,740 --> 00:27:34,679
outside or they can be more complex like

657
00:27:34,679 --> 00:27:36,419
for example it depends like how much

658
00:27:36,419 --> 00:27:38,279
traffic I can push here what's the

659
00:27:38,279 --> 00:27:40,260
latency should be although with network

660
00:27:40,260 --> 00:27:42,120
accumulation latency it's not really a

661
00:27:42,120 --> 00:27:43,020
thing

662
00:27:43,020 --> 00:27:44,520
but anyway

663
00:27:44,520 --> 00:27:47,580
um and uh so once you have both you can

664
00:27:47,580 --> 00:27:50,159
identify the network segment uh and then

665
00:27:50,159 --> 00:27:52,620
you have criteria so you can do you can

666
00:27:52,620 --> 00:27:54,360
instantiate

667
00:27:54,360 --> 00:27:57,659
um your CI pipeline uh with this network

668
00:27:57,659 --> 00:28:00,240
segment uh up and running and run the

669
00:28:00,240 --> 00:28:03,779
test script through it so it would you

670
00:28:03,779 --> 00:28:06,299
know bring up all necessary

671
00:28:06,299 --> 00:28:07,020
um

672
00:28:07,020 --> 00:28:09,059
protocols and traffic and see if it's

673
00:28:09,059 --> 00:28:11,640
still performing as the objectives that

674
00:28:11,640 --> 00:28:15,779
you have or would it fail and

675
00:28:15,779 --> 00:28:18,840
I took an example that I have so I had a

676
00:28:18,840 --> 00:28:21,299
lab that I built just for the sake of

677
00:28:21,299 --> 00:28:23,580
demonstrating how open traffic generator

678
00:28:23,580 --> 00:28:25,679
works and then I decided Well okay what

679
00:28:25,679 --> 00:28:30,120
if I try to apply this for workflow uh

680
00:28:30,120 --> 00:28:33,000
if I upgrade versions of the NOS on this

681
00:28:33,000 --> 00:28:35,700
C or P routers and in this lab what I

682
00:28:35,700 --> 00:28:38,279
have there are both frrs so that it's

683
00:28:38,279 --> 00:28:39,900
kind of easier for anyone to pull and

684
00:28:39,900 --> 00:28:41,480
run

685
00:28:41,480 --> 00:28:45,779
and what happens here this setup is is

686
00:28:45,779 --> 00:28:48,240
showing the it's a showcase for the Dos

687
00:28:48,240 --> 00:28:51,720
mitigation using rtbh okay so we have an

688
00:28:51,720 --> 00:28:54,240
as flow controller that gets information

689
00:28:54,240 --> 00:28:55,559
about

690
00:28:55,559 --> 00:28:57,840
flows that are flowing through the

691
00:28:57,840 --> 00:29:01,080
network and if there is any flow that

692
00:29:01,080 --> 00:29:02,880
has a traffic rate above a certain

693
00:29:02,880 --> 00:29:05,640
threshold considers that being a DDOS

694
00:29:05,640 --> 00:29:09,480
attack and it installs a route on the

695
00:29:09,480 --> 00:29:11,820
ISP side that will block black hole all

696
00:29:11,820 --> 00:29:14,940
this traffic right so the original lab

697
00:29:14,940 --> 00:29:18,260
was designed to Showcase that you can

698
00:29:18,260 --> 00:29:22,500
generate low rate Traffic High rate

699
00:29:22,500 --> 00:29:26,580
Traffic and then use that to demonstrate

700
00:29:26,580 --> 00:29:30,600
that the rtbh technique works so now the

701
00:29:30,600 --> 00:29:32,000
FR

702
00:29:32,000 --> 00:29:34,740
software that I'm using here there was

703
00:29:34,740 --> 00:29:36,360
actually a breaking change in it like a

704
00:29:36,360 --> 00:29:39,179
couple of years ago I knew about it so I

705
00:29:39,179 --> 00:29:42,179
thought it would be nice if I can roll

706
00:29:42,179 --> 00:29:44,100
back this lab using the older version

707
00:29:44,100 --> 00:29:46,679
make sure it works and then one by one

708
00:29:46,679 --> 00:29:49,679
bump the version of the FR to the point

709
00:29:49,679 --> 00:29:51,360
where the breaking change was introduced

710
00:29:51,360 --> 00:29:53,039
and will I catch it

711
00:29:53,039 --> 00:29:57,000
and so what I needed to to add to the

712
00:29:57,000 --> 00:29:59,279
setup to enable that

713
00:29:59,279 --> 00:30:02,399
um it's just a make file in which

714
00:30:02,399 --> 00:30:03,000
um

715
00:30:03,000 --> 00:30:06,419
when I run the CI pipeline using GitHub

716
00:30:06,419 --> 00:30:08,880
actions it's by the completely free way

717
00:30:08,880 --> 00:30:11,820
to run DCI if you have a GitHub

718
00:30:11,820 --> 00:30:13,320
repository

719
00:30:13,320 --> 00:30:16,380
I instantiate this lab using container

720
00:30:16,380 --> 00:30:17,039
lab

721
00:30:17,039 --> 00:30:19,380
and once it's up and running I just run

722
00:30:19,380 --> 00:30:22,320
the test okay so typically I would do

723
00:30:22,320 --> 00:30:24,120
that manually to show people how it

724
00:30:24,120 --> 00:30:26,940
works uh but it's the same way you can

725
00:30:26,940 --> 00:30:28,679
do that in the CI pipeline as you can

726
00:30:28,679 --> 00:30:31,320
see there are like in the table below

727
00:30:31,320 --> 00:30:33,600
draken it where I'm bumping the version

728
00:30:33,600 --> 00:30:36,240
of frr from version to version and when

729
00:30:36,240 --> 00:30:38,640
it gets to 7.4 where the breaking change

730
00:30:38,640 --> 00:30:41,700
was introduced to voila everything is

731
00:30:41,700 --> 00:30:43,620
breaking because actually no routes have

732
00:30:43,620 --> 00:30:45,960
been installed uh I need to adjust

733
00:30:45,960 --> 00:30:49,140
configuration to follow more strict bgp

734
00:30:49,140 --> 00:30:51,120
implementation that frr has starting

735
00:30:51,120 --> 00:30:54,120
from seven and four and now I'm again

736
00:30:54,120 --> 00:30:55,919
good to go

737
00:30:55,919 --> 00:30:58,440
okay simple example but I thought to

738
00:30:58,440 --> 00:31:01,260
share it uh because it's publicly

739
00:31:01,260 --> 00:31:02,880
available you can click on the link and

740
00:31:02,880 --> 00:31:05,279
see how to do it

741
00:31:05,279 --> 00:31:07,980
so what I want to show what I want to

742
00:31:07,980 --> 00:31:10,679
end with uh is a couple of references so

743
00:31:10,679 --> 00:31:13,380
we have otg.dev website where you can

744
00:31:13,380 --> 00:31:16,860
find a description of the model you can

745
00:31:16,860 --> 00:31:18,600
find links for the different

746
00:31:18,600 --> 00:31:21,360
implementations we have a slack channel

747
00:31:21,360 --> 00:31:23,820
so if you're gonna try one of the

748
00:31:23,820 --> 00:31:25,740
examples there or just want to try to do

749
00:31:25,740 --> 00:31:27,899
something yeah feel free ask questions

750
00:31:27,899 --> 00:31:31,080
there and hopefully that's all and

751
00:31:31,080 --> 00:31:33,299
hopefully you can ask more questions

752
00:31:33,299 --> 00:31:36,360
here as well

753
00:31:36,360 --> 00:31:39,080
thank you

754
00:31:42,070 --> 00:31:45,810
[Music]

