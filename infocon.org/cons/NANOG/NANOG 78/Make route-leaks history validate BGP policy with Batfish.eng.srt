1
00:00:00,000 --> 00:00:04,740
hey everybody thank you for being here

2
00:00:01,860 --> 00:00:07,109
thank you for coming to my session what

3
00:00:04,740 --> 00:00:09,269
I'm going to talk about is batfish which

4
00:00:07,109 --> 00:00:11,460
is an open source network validation

5
00:00:09,269 --> 00:00:12,870
solution that we and many others in our

6
00:00:11,460 --> 00:00:14,400
community have helped build over the

7
00:00:12,870 --> 00:00:17,549
years and we're going to talk about how

8
00:00:14,400 --> 00:00:19,410
I can we can use that to test for and

9
00:00:17,550 --> 00:00:21,060
prevent bgp route leaks as you're making

10
00:00:19,410 --> 00:00:24,240
changes to routing policy and

11
00:00:21,060 --> 00:00:26,369
configurations so what I'm going to do

12
00:00:24,240 --> 00:00:28,229
give you a brief overview of what is

13
00:00:26,369 --> 00:00:29,789
batfish how we get started what you can

14
00:00:28,230 --> 00:00:31,170
do with it and then I've got a couple of

15
00:00:29,789 --> 00:00:33,350
live demos that I'm gonna walk you

16
00:00:31,170 --> 00:00:36,570
through to show it in action

17
00:00:33,350 --> 00:00:37,890
so in terms of batfish what is it it's a

18
00:00:36,570 --> 00:00:40,440
pre deployment network validation

19
00:00:37,890 --> 00:00:42,210
solution so the genesis of batfish was

20
00:00:40,440 --> 00:00:45,480
actually a research project at Microsoft

21
00:00:42,210 --> 00:00:47,399
Research back in 2012 the story was what

22
00:00:45,480 --> 00:00:50,279
they Microsoft wanted to know is there a

23
00:00:47,399 --> 00:00:52,320
way to validate configuration changes

24
00:00:50,280 --> 00:00:53,730
before you make changes in the network

25
00:00:52,320 --> 00:00:55,800
before you push them in the network just

26
00:00:53,730 --> 00:00:56,788
like you can validate software changes

27
00:00:55,800 --> 00:00:58,379
you're about to make to your codebase

28
00:00:56,789 --> 00:01:01,320
that's just like you validate changes

29
00:00:58,379 --> 00:01:03,059
and designs of hardware FPGAs and Asics

30
00:01:01,320 --> 00:01:04,559
can we take some tools and techniques

31
00:01:03,059 --> 00:01:07,020
similar to that and apply it to the

32
00:01:04,559 --> 00:01:09,720
network with the network configure an

33
00:01:07,020 --> 00:01:12,420
Eliza so that started back in 2012

34
00:01:09,720 --> 00:01:14,640
batfish as a project in open source land

35
00:01:12,420 --> 00:01:16,950
came to be in 2014 under Apache 2

36
00:01:14,640 --> 00:01:19,380
license since then we've got a growing

37
00:01:16,950 --> 00:01:20,970
community of users and contributors to

38
00:01:19,380 --> 00:01:22,649
the codebase and then there's a

39
00:01:20,970 --> 00:01:24,150
commercial part of it from intention net

40
00:01:22,650 --> 00:01:25,979
that's being used in multiple networks

41
00:01:24,150 --> 00:01:27,390
today but that's not the topic I'm going

42
00:01:25,979 --> 00:01:29,460
to talk really about show you how you

43
00:01:27,390 --> 00:01:30,930
can use the open source part open so fat

44
00:01:29,460 --> 00:01:35,280
fish to validate network changes

45
00:01:30,930 --> 00:01:36,810
specifically for BGP so the design of

46
00:01:35,280 --> 00:01:39,150
the system the way batfish works is you

47
00:01:36,810 --> 00:01:42,140
feed batfish the configuration of your

48
00:01:39,150 --> 00:01:45,630
network so firewalls load balancers

49
00:01:42,140 --> 00:01:48,329
routers switches cloud instances as well

50
00:01:45,630 --> 00:01:50,460
so it can be ad up AWS config with v pcs

51
00:01:48,329 --> 00:01:52,770
and transit gateways and peering all

52
00:01:50,460 --> 00:01:55,048
that gets ingested by batfish so there's

53
00:01:52,770 --> 00:01:57,030
a pretty wide list of supported vendors

54
00:01:55,049 --> 00:01:59,159
and that list continues to evolve and

55
00:01:57,030 --> 00:02:00,990
grow so as we interact in the open

56
00:01:59,159 --> 00:02:02,579
source or the enterprise world with more

57
00:02:00,990 --> 00:02:04,860
customers we see more networks we add

58
00:02:02,579 --> 00:02:08,098
support for new config constructs and

59
00:02:04,860 --> 00:02:10,348
new platforms so what happens under the

60
00:02:08,098 --> 00:02:13,380
covers is batfish ingest those configs

61
00:02:10,348 --> 00:02:15,030
and builds a series of network models

62
00:02:13,380 --> 00:02:17,400
there's three primary Network models

63
00:02:15,030 --> 00:02:19,890
that we build the first is just a

64
00:02:17,400 --> 00:02:22,620
vendor-neutral configuration model so we

65
00:02:19,890 --> 00:02:24,480
take the vendor syntax config and we

66
00:02:22,620 --> 00:02:26,490
normalize it into an internal data model

67
00:02:24,480 --> 00:02:28,350
that allows us to sort of easily build a

68
00:02:26,490 --> 00:02:30,600
sort of analysis toolkit on top of it so

69
00:02:28,350 --> 00:02:32,010
we sort of normalized you know

70
00:02:30,600 --> 00:02:33,870
juniper might call something a firewall

71
00:02:32,010 --> 00:02:36,359
filter cisco calls of input access list

72
00:02:33,870 --> 00:02:37,800
we call it an input filter similar just

73
00:02:36,360 --> 00:02:40,740
trying to normalize the constructs so we

74
00:02:37,800 --> 00:02:42,540
can build our analysis on them the other

75
00:02:40,740 --> 00:02:44,130
core piece of the technology is a full

76
00:02:42,540 --> 00:02:45,959
routing and forwarding simulation so one

77
00:02:44,130 --> 00:02:47,640
of the unique things about batfish and

78
00:02:45,960 --> 00:02:49,440
its core is based on the device

79
00:02:47,640 --> 00:02:50,970
configurations and the models that have

80
00:02:49,440 --> 00:02:53,130
been built and encoded in the codebase

81
00:02:50,970 --> 00:02:55,170
we build the routing tables and

82
00:02:53,130 --> 00:02:56,910
forwarding tables for every vrf for

83
00:02:55,170 --> 00:02:59,519
every device in the network that you

84
00:02:56,910 --> 00:03:00,810
you've uploaded into batfish and that is

85
00:02:59,520 --> 00:03:02,880
sort of the core piece of the analysis

86
00:03:00,810 --> 00:03:04,860
that allows us to do things like BGP

87
00:03:02,880 --> 00:03:08,430
policy validation and reachability

88
00:03:04,860 --> 00:03:10,020
validation and the third set of models

89
00:03:08,430 --> 00:03:11,460
are what we call sort of mathematical

90
00:03:10,020 --> 00:03:12,990
models of network behavior so we take

91
00:03:11,460 --> 00:03:15,000
the device configs we take the routing

92
00:03:12,990 --> 00:03:16,860
and forwarding tables couple that with

93
00:03:15,000 --> 00:03:18,330
the forwarding pipelines and the routing

94
00:03:16,860 --> 00:03:19,710
pipelines we've built inside this is I'm

95
00:03:18,330 --> 00:03:21,630
going to create a series of equations

96
00:03:19,710 --> 00:03:23,430
that describe the behavior of the

97
00:03:21,630 --> 00:03:25,019
network so that we can understand how

98
00:03:23,430 --> 00:03:27,090
packets will flow through the network so

99
00:03:25,020 --> 00:03:28,590
we don't need to generate every packet

100
00:03:27,090 --> 00:03:30,900
type to tell you what packets can get

101
00:03:28,590 --> 00:03:32,610
from one subnet to the other we can

102
00:03:30,900 --> 00:03:33,840
solve an equation to say okay these are

103
00:03:32,610 --> 00:03:35,310
the packet headers that are allowed to

104
00:03:33,840 --> 00:03:37,350
traverse the network from this point to

105
00:03:35,310 --> 00:03:39,710
this other point so that's what these

106
00:03:37,350 --> 00:03:42,690
mathematical behavior models do for us

107
00:03:39,710 --> 00:03:44,790
that all couples within series of

108
00:03:42,690 --> 00:03:46,790
analysis engines under the covers and

109
00:03:44,790 --> 00:03:49,859
all of this by the way that there's a

110
00:03:46,790 --> 00:03:51,329
research there's a research paper that

111
00:03:49,860 --> 00:03:52,470
was published in SDI and there's an

112
00:03:51,330 --> 00:03:54,210
follow on research paper so the

113
00:03:52,470 --> 00:03:55,320
underlying algorithm is an architecture

114
00:03:54,210 --> 00:03:57,180
for each of these components are

115
00:03:55,320 --> 00:03:58,769
well-documented there and you can get

116
00:03:57,180 --> 00:04:01,230
all of that through the batfish website

117
00:03:58,770 --> 00:04:04,110
but the way you interact with it as a

118
00:04:01,230 --> 00:04:06,060
user is you can query the batfish engine

119
00:04:04,110 --> 00:04:07,230
and extract information from the

120
00:04:06,060 --> 00:04:09,150
different need data models that it's

121
00:04:07,230 --> 00:04:10,619
created so from the vendor mutual config

122
00:04:09,150 --> 00:04:12,870
model from the routing model from the

123
00:04:10,620 --> 00:04:14,250
forwarding behavior models and so you

124
00:04:12,870 --> 00:04:16,410
interact with the series of queries or

125
00:04:14,250 --> 00:04:18,269
defining a set of policies that batfish

126
00:04:16,410 --> 00:04:19,770
will evaluate for you and tell you if

127
00:04:18,269 --> 00:04:24,389
the network is going to violate those

128
00:04:19,769 --> 00:04:26,460
policies or not so

129
00:04:24,389 --> 00:04:28,409
from a category standpoint there's four

130
00:04:26,460 --> 00:04:30,388
broad categories of queries and policies

131
00:04:28,409 --> 00:04:32,639
that you can you interact with that fish

132
00:04:30,389 --> 00:04:35,669
from so one is just configuration audits

133
00:04:32,639 --> 00:04:37,710
so things like are your device compliant

134
00:04:35,669 --> 00:04:39,330
to a certain site standard so does

135
00:04:37,710 --> 00:04:40,710
everybody use the same NTP server or

136
00:04:39,330 --> 00:04:43,318
does everybody have the same DNS server

137
00:04:40,710 --> 00:04:44,969
configured then you can do analysis on

138
00:04:43,319 --> 00:04:46,710
protocol sessions if you got IPSec

139
00:04:44,969 --> 00:04:50,009
tunnels into the cloud do I have key

140
00:04:46,710 --> 00:04:52,620
pair matching between my on-prem and the

141
00:04:50,009 --> 00:04:54,960
IPSec endpoint and the cloud endpoint or

142
00:04:52,620 --> 00:04:56,759
is my M lag configuration correct is my

143
00:04:54,960 --> 00:04:57,900
bgp session configuration correct to

144
00:04:56,759 --> 00:04:59,340
make sure these sessions will get

145
00:04:57,900 --> 00:05:02,448
established so you can sort of audit the

146
00:04:59,340 --> 00:05:04,469
config without looking at the behavior

147
00:05:02,449 --> 00:05:06,240
then you can also do sort of stand-alone

148
00:05:04,469 --> 00:05:08,099
firewall an ACL analysis and without

149
00:05:06,240 --> 00:05:09,960
building the full routing table we have

150
00:05:08,099 --> 00:05:11,250
helped you understand what packets are

151
00:05:09,960 --> 00:05:12,680
going to be allowed through a firewall

152
00:05:11,250 --> 00:05:15,000
which packets are going to get denied

153
00:05:12,680 --> 00:05:16,349
how when you make a change how that

154
00:05:15,000 --> 00:05:18,089
change is going to impact the flows that

155
00:05:16,349 --> 00:05:21,688
are permitted or denied through the

156
00:05:18,089 --> 00:05:23,009
firewall or the ACL the third category

157
00:05:21,689 --> 00:05:24,389
which is sort of what the demos are

158
00:05:23,009 --> 00:05:26,430
gonna focus on is some of the routing

159
00:05:24,389 --> 00:05:28,680
and forwarding analysis so you can query

160
00:05:26,430 --> 00:05:30,330
batfish to understand what is the impact

161
00:05:28,680 --> 00:05:32,250
of a link failure or set of link

162
00:05:30,330 --> 00:05:33,719
failures well any services be

163
00:05:32,250 --> 00:05:35,460
disconnected so are there any flows in

164
00:05:33,719 --> 00:05:37,529
the network that were previously carried

165
00:05:35,460 --> 00:05:38,698
but now because I failed one or two or

166
00:05:37,529 --> 00:05:41,370
multiple links that are no longer

167
00:05:38,699 --> 00:05:42,990
carried in the network and then what

168
00:05:41,370 --> 00:05:44,490
happens if I make a change to my routing

169
00:05:42,990 --> 00:05:46,439
policy so if I make a change to a BGP

170
00:05:44,490 --> 00:05:48,149
routing policy or if I make a change to

171
00:05:46,439 --> 00:05:49,979
our redistributing routes from OSPF end

172
00:05:48,149 --> 00:05:51,689
of EGP what does that do to the overall

173
00:05:49,979 --> 00:05:53,310
forwarding behavior my network what does

174
00:05:51,689 --> 00:05:54,779
that do to availability and

175
00:05:53,310 --> 00:05:57,539
serviceability of the different services

176
00:05:54,779 --> 00:05:59,520
that are running there and then you can

177
00:05:57,539 --> 00:06:01,259
sort of aggregate all of this into sort

178
00:05:59,520 --> 00:06:03,299
of a comprehensive reachability analysis

179
00:06:01,259 --> 00:06:05,639
where you can have rules or policies and

180
00:06:03,300 --> 00:06:07,620
queries around tell me show me who can

181
00:06:05,639 --> 00:06:10,319
reach this subnet so you know you might

182
00:06:07,620 --> 00:06:12,120
have a protected segment so if you're

183
00:06:10,319 --> 00:06:13,949
doing micro segmentation you might want

184
00:06:12,120 --> 00:06:16,110
to know make sure there's nobody that

185
00:06:13,949 --> 00:06:18,120
can get from my PCI zone to my non pci

186
00:06:16,110 --> 00:06:20,969
zone or make sure nobody can get from

187
00:06:18,120 --> 00:06:23,399
subnet a to subnet b except for ssh

188
00:06:20,969 --> 00:06:25,469
traffic or HTTP so all of these things

189
00:06:23,399 --> 00:06:26,520
queries can be encoded and expressed in

190
00:06:25,469 --> 00:06:28,319
batfish

191
00:06:26,520 --> 00:06:30,719
and then you can understand every time

192
00:06:28,319 --> 00:06:32,490
you make a change what is different

193
00:06:30,719 --> 00:06:34,319
about the network in regards to these

194
00:06:32,490 --> 00:06:35,339
queries in these policies so if a change

195
00:06:34,319 --> 00:06:37,229
is going to violate one of these

196
00:06:35,339 --> 00:06:38,100
policies batfish will flag that for you

197
00:06:37,229 --> 00:06:43,469
so you don't push that

198
00:06:38,100 --> 00:06:45,060
change into your network so we're going

199
00:06:43,470 --> 00:06:48,690
to switch gears I'm gonna show you a

200
00:06:45,060 --> 00:06:50,160
couple of live demos the first demo is

201
00:06:48,690 --> 00:06:52,260
just gonna show you how I can use

202
00:06:50,160 --> 00:06:54,840
batfish for automatic policy validation

203
00:06:52,260 --> 00:06:56,400
the second one's gonna sort of show you

204
00:06:54,840 --> 00:06:58,289
how you can analyze a simple sort of

205
00:06:56,400 --> 00:06:59,570
route policy change and the third one's

206
00:06:58,290 --> 00:07:01,710
gonna put this all together and say okay

207
00:06:59,570 --> 00:07:03,060
give you a hypothetical scenario over

208
00:07:01,710 --> 00:07:05,280
adding policy change you want to make

209
00:07:03,060 --> 00:07:07,050
and how it could result in a route leak

210
00:07:05,280 --> 00:07:08,969
and then how you can catch that with

211
00:07:07,050 --> 00:07:10,230
batfish what you would look for and then

212
00:07:08,970 --> 00:07:14,640
how you can prevent that from being

213
00:07:10,230 --> 00:07:16,590
deployed in the network so demo number

214
00:07:14,640 --> 00:07:18,120
one this is our basic network scenario

215
00:07:16,590 --> 00:07:20,190
I've got a small network I've got two

216
00:07:18,120 --> 00:07:23,160
peering devices I got I'm talking to two

217
00:07:20,190 --> 00:07:24,600
different customers and what I want to

218
00:07:23,160 --> 00:07:27,030
do is I want to validate my policy

219
00:07:24,600 --> 00:07:28,770
towards these customers and I want to

220
00:07:27,030 --> 00:07:30,299
build a vendor agnostic test suite out

221
00:07:28,770 --> 00:07:31,770
of it so I don't want to I don't want to

222
00:07:30,300 --> 00:07:33,540
have to write something specific for a

223
00:07:31,770 --> 00:07:35,370
Juniper edge device versus a Cisco

224
00:07:33,540 --> 00:07:38,340
device versus a cumulus device and the

225
00:07:35,370 --> 00:07:40,470
risk that whatever it might be and a lot

226
00:07:38,340 --> 00:07:41,969
of these tests are sort of inspired by

227
00:07:40,470 --> 00:07:43,410
what the manners community has put

228
00:07:41,970 --> 00:07:44,880
together in their guidelines like they

229
00:07:43,410 --> 00:07:46,890
have you know what we're best set of

230
00:07:44,880 --> 00:07:48,719
tools that they want people to use as

231
00:07:46,890 --> 00:07:50,789
they're building bgp routing policy at

232
00:07:48,720 --> 00:07:52,440
the edge and so we've worked working

233
00:07:50,790 --> 00:07:55,200
with them we've turned those guidelines

234
00:07:52,440 --> 00:07:57,180
into a series of policies that batfish

235
00:07:55,200 --> 00:07:59,190
can execute for you every time you are

236
00:07:57,180 --> 00:08:02,430
looking to make a change to that peering

237
00:07:59,190 --> 00:08:04,800
config so let's take a look at one of

238
00:08:02,430 --> 00:08:06,240
these so again don't worry about trying

239
00:08:04,800 --> 00:08:08,490
to read the code everything that I'm

240
00:08:06,240 --> 00:08:10,680
showing you here is on a public github

241
00:08:08,490 --> 00:08:12,180
repo and towards the end I'll show you

242
00:08:10,680 --> 00:08:13,380
the link where you can download all the

243
00:08:12,180 --> 00:08:15,600
code and play with it and then the

244
00:08:13,380 --> 00:08:18,060
instructions on how to use batfish so

245
00:08:15,600 --> 00:08:20,100
here what I have is I have a policy

246
00:08:18,060 --> 00:08:22,470
that's wanting to make sure something

247
00:08:20,100 --> 00:08:23,820
simple that I don't ever configure a bgp

248
00:08:22,470 --> 00:08:25,410
session to a customer that doesn't have

249
00:08:23,820 --> 00:08:27,719
an input policy seems like a pretty

250
00:08:25,410 --> 00:08:29,100
basic thing you want easy to encode and

251
00:08:27,720 --> 00:08:30,750
write in batfish in a vendor agnostic

252
00:08:29,100 --> 00:08:32,820
way so you don't have to worry about

253
00:08:30,750 --> 00:08:34,229
again the differences of how vendors

254
00:08:32,820 --> 00:08:39,360
express policy and how they attach

255
00:08:34,229 --> 00:08:44,940
policy to pairing sessions so before so

256
00:08:39,360 --> 00:08:46,710
let me go and show you that in action so

257
00:08:44,940 --> 00:08:48,150
what I'm showing you here is I'm using a

258
00:08:46,710 --> 00:08:49,950
series of Jupiter notebook so the

259
00:08:48,150 --> 00:08:51,720
primary way you interact with batfish is

260
00:08:49,950 --> 00:08:53,699
through a Python SDK and

261
00:08:51,720 --> 00:08:55,769
jupiter notebooks give me a convenient

262
00:08:53,699 --> 00:08:57,000
way to run Python code in this

263
00:08:55,769 --> 00:09:00,089
environment so to show you what we're

264
00:08:57,000 --> 00:09:03,839
doing so here's my demo Network as I

265
00:09:00,089 --> 00:09:05,850
shown before to customers to Pease to

266
00:09:03,839 --> 00:09:07,889
get started with batfish there's a very

267
00:09:05,850 --> 00:09:09,810
simple sort of setup there's a couple of

268
00:09:07,889 --> 00:09:11,730
API calls that it just sets up your

269
00:09:09,810 --> 00:09:13,500
connection to batfish and uploads the

270
00:09:11,730 --> 00:09:15,449
config so this init snapshot call is

271
00:09:13,500 --> 00:09:17,370
just uploading a set of device configs

272
00:09:15,449 --> 00:09:20,430
for those four devices I had and telling

273
00:09:17,370 --> 00:09:22,230
batfish start analyzing it so we've

274
00:09:20,430 --> 00:09:25,489
built the snapshot about fish's built-in

275
00:09:22,230 --> 00:09:28,139
SATA model so what this is is just a

276
00:09:25,490 --> 00:09:29,220
simple query of the routing tables so

277
00:09:28,139 --> 00:09:30,329
what I'm trying to show you here is like

278
00:09:29,220 --> 00:09:32,759
hey you know let me see the routing

279
00:09:30,329 --> 00:09:34,589
tables for p1 I have a simple batfish

280
00:09:32,759 --> 00:09:36,750
API call that I can make but does that

281
00:09:34,589 --> 00:09:40,550
and to show you that this is truly a

282
00:09:36,750 --> 00:09:40,550
live demo I can run a different question

283
00:09:46,370 --> 00:09:50,210
and I don't

284
00:09:48,080 --> 00:09:53,210
I don't f pg3 my network so of course

285
00:09:50,210 --> 00:09:55,640
there's no routes but first a look at p2

286
00:09:53,210 --> 00:09:58,220
I can see I have a series of routes I

287
00:09:55,640 --> 00:09:59,480
just showed all of them but let's not

288
00:09:58,220 --> 00:10:01,070
scroll through them all but again it's

289
00:09:59,480 --> 00:10:03,140
very easy to extract any information the

290
00:10:01,070 --> 00:10:05,090
batfish is computed there's an API call

291
00:10:03,140 --> 00:10:06,590
that allows you to extract that the most

292
00:10:05,090 --> 00:10:07,940
common output is a table format then you

293
00:10:06,590 --> 00:10:11,450
can then integrate in any sort of

294
00:10:07,940 --> 00:10:13,130
automation workflow you might have so

295
00:10:11,450 --> 00:10:15,050
how do I turn this into a series of

296
00:10:13,130 --> 00:10:17,930
policies how do I check policy so the

297
00:10:15,050 --> 00:10:20,270
common way we sort of recommend people

298
00:10:17,930 --> 00:10:22,849
using batfish to interact with it on an

299
00:10:20,270 --> 00:10:24,650
automated pipe the CICE pipeline is to

300
00:10:22,850 --> 00:10:26,990
use something like a test framework like

301
00:10:24,650 --> 00:10:29,540
pi test so i've built out a series of

302
00:10:26,990 --> 00:10:31,790
policies in python using pi tests and

303
00:10:29,540 --> 00:10:32,930
I'm just going to run that and I can

304
00:10:31,790 --> 00:10:33,980
call that from here where I'm just

305
00:10:32,930 --> 00:10:35,630
running PI test from the command line

306
00:10:33,980 --> 00:10:38,720
and it's going to generate a report for

307
00:10:35,630 --> 00:10:42,890
me and that report is gonna look like

308
00:10:38,720 --> 00:10:45,320
this so I have a series of policies that

309
00:10:42,890 --> 00:10:48,350
are defined so all in all I have 15

310
00:10:45,320 --> 00:10:50,480
policies that are defined five paths ten

311
00:10:48,350 --> 00:10:52,580
failed and I can go through this report

312
00:10:50,480 --> 00:10:54,980
it's gonna tell me more about what why I

313
00:10:52,580 --> 00:10:57,260
had certain failures so it's pick on the

314
00:10:54,980 --> 00:10:59,780
first failure here test no.1 to find

315
00:10:57,260 --> 00:11:03,290
references so this is telling me hey on

316
00:10:59,780 --> 00:11:05,000
my PE device I'm using a route I'm

317
00:11:03,290 --> 00:11:06,709
referencing a route map for my BGP

318
00:11:05,000 --> 00:11:08,360
policy but I haven't defined that route

319
00:11:06,710 --> 00:11:09,860
map so not going to have the behavior

320
00:11:08,360 --> 00:11:11,990
I'm expecting so even though there's

321
00:11:09,860 --> 00:11:15,100
that line and the config that says BGP

322
00:11:11,990 --> 00:11:17,660
output policy route now foo in this case

323
00:11:15,100 --> 00:11:18,890
you're not going to see any impact for

324
00:11:17,660 --> 00:11:21,350
that because it's not defined and so

325
00:11:18,890 --> 00:11:23,240
this is an easy way to catch that a more

326
00:11:21,350 --> 00:11:25,760
sort of interesting one would be let's

327
00:11:23,240 --> 00:11:27,800
look at a test for advertise long prefix

328
00:11:25,760 --> 00:11:29,900
so I want to make sure my customers are

329
00:11:27,800 --> 00:11:31,910
not allowed to transmit prefixes that

330
00:11:29,900 --> 00:11:34,430
exceed a certain prefix line so I've

331
00:11:31,910 --> 00:11:36,230
decided it's slash 24 is the limit this

332
00:11:34,430 --> 00:11:37,430
is gonna find any time there's a route

333
00:11:36,230 --> 00:11:39,950
that they're sending me that exceeds

334
00:11:37,430 --> 00:11:42,859
that I can tell you if that if that's

335
00:11:39,950 --> 00:11:45,080
the case and that's a violation now in

336
00:11:42,860 --> 00:11:47,210
this scenario I could also make a test

337
00:11:45,080 --> 00:11:48,740
that says it's okay if they advertise it

338
00:11:47,210 --> 00:11:50,360
it's just not okay for me to accept it

339
00:11:48,740 --> 00:11:52,790
so I'm gonna make a chest to make sure

340
00:11:50,360 --> 00:11:53,930
that I don't accept that and then

341
00:11:52,790 --> 00:11:56,510
there's other things I can test to make

342
00:11:53,930 --> 00:11:58,430
sure you know I if I expect to see

343
00:11:56,510 --> 00:11:59,600
communities on routes that I receive so

344
00:11:58,430 --> 00:12:01,279
if I have an appearing agreement that

345
00:11:59,600 --> 00:12:03,529
says everything must be tagged

346
00:12:01,279 --> 00:12:04,939
a set of communities and the specific

347
00:12:03,529 --> 00:12:08,180
defined communities I can encode that as

348
00:12:04,939 --> 00:12:10,459
a policy and so on and so forth so any

349
00:12:08,180 --> 00:12:11,899
behavior you think you want to encode

350
00:12:10,459 --> 00:12:12,888
from a networking standpoint from a

351
00:12:11,899 --> 00:12:14,660
routing probably say weren't you can

352
00:12:12,889 --> 00:12:16,550
turn into a series of policies and have

353
00:12:14,660 --> 00:12:19,399
batfish analyze that every time you go

354
00:12:16,550 --> 00:12:20,660
and as a part of a CI CD pipeline this

355
00:12:19,399 --> 00:12:22,339
ply test framework will generate a

356
00:12:20,660 --> 00:12:24,199
report and then let you sort of prevent

357
00:12:22,339 --> 00:12:28,040
pushing changes to the network that

358
00:12:24,199 --> 00:12:31,309
would violate those rules so very sort

359
00:12:28,040 --> 00:12:35,629
of quick demo there so let's go back to

360
00:12:31,309 --> 00:12:37,850
our slides so now I want to show you

361
00:12:35,629 --> 00:12:39,860
just a you know that same sort of demo

362
00:12:37,850 --> 00:12:41,569
network how do I analyze a routing

363
00:12:39,860 --> 00:12:43,939
policy change and what are the sort of

364
00:12:41,569 --> 00:12:45,589
batfish constructs I can use to see if a

365
00:12:43,939 --> 00:12:50,420
policy change is gonna have the impact

366
00:12:45,589 --> 00:12:52,220
that I expect it to so here I have a

367
00:12:50,420 --> 00:12:55,490
prefix I have a policy that I've defined

368
00:12:52,220 --> 00:12:58,129
for my peer to customer one on PE one

369
00:12:55,490 --> 00:13:00,439
and this over here is letting everything

370
00:12:58,129 --> 00:13:01,670
in so I'm blocking bug on routes and

371
00:13:00,439 --> 00:13:03,290
then I'm saying okay I'll take this up

372
00:13:01,670 --> 00:13:04,878
anything else from you so let's say I

373
00:13:03,290 --> 00:13:06,500
want to amend this policy and I don't

374
00:13:04,879 --> 00:13:08,389
want to accept anything greater than

375
00:13:06,500 --> 00:13:10,279
slash twenty four so I want to make that

376
00:13:08,389 --> 00:13:12,110
last policy one that was non-compliant

377
00:13:10,279 --> 00:13:14,300
now be compliant so I'm going to update

378
00:13:12,110 --> 00:13:16,490
my policy to block anything that's

379
00:13:14,300 --> 00:13:17,540
greater than slash twenty four and now

380
00:13:16,490 --> 00:13:19,399
let's sort of take a look at what that

381
00:13:17,540 --> 00:13:23,029
means so there's a multi-step process

382
00:13:19,399 --> 00:13:24,860
that goes into evaluating a change the

383
00:13:23,029 --> 00:13:26,180
first one is I want to collect my BGP

384
00:13:24,860 --> 00:13:27,949
adjacency ribbon so there's multiple

385
00:13:26,180 --> 00:13:29,870
ways you can do it you know you could

386
00:13:27,949 --> 00:13:31,250
use open BMP so if you have an open BMP

387
00:13:29,870 --> 00:13:33,050
server where you're collecting that

388
00:13:31,250 --> 00:13:34,910
information from your paring you can

389
00:13:33,050 --> 00:13:37,579
feed that into batfish we can parse that

390
00:13:34,910 --> 00:13:38,839
and build that into the model you can

391
00:13:37,579 --> 00:13:40,279
collect that through a series of show

392
00:13:38,839 --> 00:13:42,500
commands a lot of the vendors will let

393
00:13:40,279 --> 00:13:45,500
you do show IP BGP received routes or

394
00:13:42,500 --> 00:13:46,910
some command of that nature that'll let

395
00:13:45,500 --> 00:13:48,620
you see exactly what your peers are

396
00:13:46,910 --> 00:13:50,929
sending you so you can again feed that

397
00:13:48,620 --> 00:13:52,790
into batfish and then you upload a

398
00:13:50,929 --> 00:13:54,949
snapshot so the snapshot is the config

399
00:13:52,790 --> 00:13:56,569
and the BGP rib for that's currently

400
00:13:54,949 --> 00:13:57,859
there and the proposed change you want

401
00:13:56,569 --> 00:13:59,509
to make and then there's a series of

402
00:13:57,860 --> 00:14:00,709
Python api's that allows you to evaluate

403
00:13:59,509 --> 00:14:02,829
so I'm going to show you what those look

404
00:14:00,709 --> 00:14:02,829
like

405
00:14:05,050 --> 00:14:11,179
so got my demo Network when I analyze my

406
00:14:08,870 --> 00:14:14,020
policy towards PPE one towards customer

407
00:14:11,179 --> 00:14:16,520
one and

408
00:14:14,020 --> 00:14:18,020
smaller so this is just sort of setting

409
00:14:16,520 --> 00:14:20,810
it up I'm telling about fish okay I care

410
00:14:18,020 --> 00:14:23,660
about PE one this specific pier and then

411
00:14:20,810 --> 00:14:26,630
I'm gonna retrieve the policy and now

412
00:14:23,660 --> 00:14:30,319
let's look at what the BGP adjacency rib

413
00:14:26,630 --> 00:14:32,900
is so I fed that into batfish now I'm

414
00:14:30,320 --> 00:14:35,420
gonna tree that and I'm gonna send that

415
00:14:32,900 --> 00:14:36,920
into my policy evaluation so the core

416
00:14:35,420 --> 00:14:38,719
query you're gonna use in this

417
00:14:36,920 --> 00:14:41,029
environment is this query we call test

418
00:14:38,720 --> 00:14:42,230
round policy so in batfish if you take

419
00:14:41,029 --> 00:14:44,150
the test rail policy question you

420
00:14:42,230 --> 00:14:45,589
identify a paring session you give it

421
00:14:44,150 --> 00:14:47,029
the routes that you were expecting to

422
00:14:45,589 --> 00:14:49,040
get from it and the policy name it'll

423
00:14:47,029 --> 00:14:50,000
tell you what that's gonna do so it's

424
00:14:49,040 --> 00:14:52,339
going to give you a complete evaluation

425
00:14:50,000 --> 00:14:54,560
of what the routing policy is gonna do

426
00:14:52,339 --> 00:14:56,600
to those incoming routes so you can see

427
00:14:54,560 --> 00:14:58,790
which routes are being denied so in this

428
00:14:56,600 --> 00:15:00,320
case that policy in its current form is

429
00:14:58,790 --> 00:15:04,219
not denying any of the routes that I've

430
00:15:00,320 --> 00:15:05,330
received from the peer and then I can

431
00:15:04,220 --> 00:15:06,830
look at which routes are being permitted

432
00:15:05,330 --> 00:15:08,120
so I see a series of routes I think

433
00:15:06,830 --> 00:15:10,040
getting permitted I'm only showing the

434
00:15:08,120 --> 00:15:11,990
first five but there's a lot more there

435
00:15:10,040 --> 00:15:14,750
but it also tells you how its transforms

436
00:15:11,990 --> 00:15:16,550
it's not just did I send it yes or no

437
00:15:14,750 --> 00:15:17,420
but what is my routing policy going to

438
00:15:16,550 --> 00:15:19,040
do to that route how am I gonna

439
00:15:17,420 --> 00:15:20,930
transform it and my prepending a/s paths

440
00:15:19,040 --> 00:15:22,849
and my changing community values by

441
00:15:20,930 --> 00:15:24,770
changing local pref any of those bgp

442
00:15:22,850 --> 00:15:26,510
attributes that are being defined in the

443
00:15:24,770 --> 00:15:31,490
policy you can see what that impact is

444
00:15:26,510 --> 00:15:32,870
by looking at this query and then I can

445
00:15:31,490 --> 00:15:34,790
look at routes that I'm receiving but

446
00:15:32,870 --> 00:15:36,200
I'm not modifying so there's nothing

447
00:15:34,790 --> 00:15:38,930
that's coming in that I'm not touching

448
00:15:36,200 --> 00:15:40,160
or tagging in some way so that's a good

449
00:15:38,930 --> 00:15:42,890
indication of the policies doing

450
00:15:40,160 --> 00:15:45,140
something so now let's change the policy

451
00:15:42,890 --> 00:15:47,839
so I'm gonna take that same policy I was

452
00:15:45,140 --> 00:15:50,480
showing you earlier around blocking my

453
00:15:47,839 --> 00:15:54,140
slash 24 prefixes I want to see how I

454
00:15:50,480 --> 00:15:56,089
can analyze that with batfish so the way

455
00:15:54,140 --> 00:15:57,620
to do at an analysis on a change is

456
00:15:56,089 --> 00:15:59,240
rather than feeding in the entire

457
00:15:57,620 --> 00:16:01,040
configs we have an API that lets you

458
00:15:59,240 --> 00:16:02,270
forecast nap shot saying okay this is

459
00:16:01,040 --> 00:16:04,370
the base snapshot this is what's running

460
00:16:02,270 --> 00:16:05,870
in my network today here's the change

461
00:16:04,370 --> 00:16:07,280
I'm gonna make here's the Delta so just

462
00:16:05,870 --> 00:16:09,320
feed in the Delta from your base and

463
00:16:07,280 --> 00:16:10,640
then batfish is going to recompile it's

464
00:16:09,320 --> 00:16:13,760
gonna build the full forwarding tables

465
00:16:10,640 --> 00:16:18,290
routing tables until you let you run

466
00:16:13,760 --> 00:16:21,020
interesting queries against it so real

467
00:16:18,290 --> 00:16:23,060
quick the config change so where you see

468
00:16:21,020 --> 00:16:26,259
here is I've added this prefix list

469
00:16:23,060 --> 00:16:29,378
block 24 I've updated my route map

470
00:16:26,259 --> 00:16:32,019
added adenine line for a sequence 10 and

471
00:16:29,379 --> 00:16:34,749
then I've changed the sequence numbers

472
00:16:32,019 --> 00:16:35,199
on the rest of it so let's see what this

473
00:16:34,749 --> 00:16:37,239
does

474
00:16:35,199 --> 00:16:39,008
so now I've written some code that takes

475
00:16:37,239 --> 00:16:41,559
the core batfish and now it compares the

476
00:16:39,009 --> 00:16:44,079
routing policy evaluation between what

477
00:16:41,559 --> 00:16:45,459
was running in my network verse and the

478
00:16:44,079 --> 00:16:47,498
change I'm about to make the change I

479
00:16:45,459 --> 00:16:48,368
wanted to see happen and so now I'm

480
00:16:47,499 --> 00:16:49,600
gonna interact with that I'm gonna

481
00:16:48,369 --> 00:16:51,639
extract different pieces of information

482
00:16:49,600 --> 00:16:53,319
so find new routes that are denied so

483
00:16:51,639 --> 00:16:55,629
from the routes that were being fed in

484
00:16:53,319 --> 00:16:58,209
for my peer and the change that I just

485
00:16:55,629 --> 00:17:01,479
made I'm gonna deny this slash 26 that I

486
00:16:58,209 --> 00:17:03,819
was previously accepting and then I can

487
00:17:01,479 --> 00:17:06,039
see if I'm denying anything

488
00:17:03,819 --> 00:17:07,599
that was permitting anything was

489
00:17:06,039 --> 00:17:08,919
previously denied so I can see that

490
00:17:07,599 --> 00:17:11,579
nothing else has changed so I'm not

491
00:17:08,919 --> 00:17:13,389
adding more prefixes into the mix and

492
00:17:11,579 --> 00:17:14,678
see if there's anything that's just

493
00:17:13,388 --> 00:17:17,289
being acceptable about modified so

494
00:17:14,679 --> 00:17:19,029
that's not the case either so just using

495
00:17:17,289 --> 00:17:21,609
a couple of these steps in a couple of

496
00:17:19,029 --> 00:17:23,349
queries I can understand exactly what

497
00:17:21,609 --> 00:17:25,299
our routing policy change is going to do

498
00:17:23,349 --> 00:17:27,099
for me and make sure that that's exactly

499
00:17:25,299 --> 00:17:28,809
what I want so I can inspect that in

500
00:17:27,099 --> 00:17:31,120
advance and you can do it instead of a

501
00:17:28,809 --> 00:17:32,620
vendor agnostic way before you push it

502
00:17:31,120 --> 00:17:34,510
to the network so you don't have to push

503
00:17:32,620 --> 00:17:37,239
it to your device and rely on unbox

504
00:17:34,510 --> 00:17:38,649
analysis from vendor A or B to see what

505
00:17:37,240 --> 00:17:44,700
the impact of a routing policy change is

506
00:17:38,649 --> 00:17:44,699
going to be all right

507
00:17:45,870 --> 00:17:50,799
so the last so the demo I want to show

508
00:17:48,460 --> 00:17:51,760
you is a little more it sort of builds

509
00:17:50,799 --> 00:17:53,590
on the other ones it's a little more

510
00:17:51,760 --> 00:17:55,419
involved is how do I now look at this

511
00:17:53,590 --> 00:17:57,220
and say okay I want to make a change I

512
00:17:55,419 --> 00:17:58,929
know it's going to permit certain routes

513
00:17:57,220 --> 00:18:01,450
but I want to make sure I don't leak it

514
00:17:58,929 --> 00:18:04,269
so this scenario I have here is I want

515
00:18:01,450 --> 00:18:06,309
to accept certain longer prefixes from

516
00:18:04,269 --> 00:18:08,470
up here because they want to load

517
00:18:06,309 --> 00:18:10,120
balanced traffic to me but obviously I

518
00:18:08,470 --> 00:18:11,769
don't want to provide that as transit to

519
00:18:10,120 --> 00:18:13,809
everybody I don't want that to leave my

520
00:18:11,769 --> 00:18:15,700
network so I don't want that to leak so

521
00:18:13,809 --> 00:18:17,649
into the rest of it so how am I going to

522
00:18:15,700 --> 00:18:19,870
evaluate that what's the process I could

523
00:18:17,649 --> 00:18:21,580
use to make sure that I can make a

524
00:18:19,870 --> 00:18:24,158
change safely and not leak that route to

525
00:18:21,580 --> 00:18:26,199
adjacent peers again it starts with

526
00:18:24,159 --> 00:18:27,639
collecting that BGP adjacency ribbon so

527
00:18:26,200 --> 00:18:29,740
that's sort of your starting point you

528
00:18:27,639 --> 00:18:31,269
have that data you know what your peer

529
00:18:29,740 --> 00:18:33,070
is sending you and now you can sort of

530
00:18:31,269 --> 00:18:35,919
analyze changes to the network to see

531
00:18:33,070 --> 00:18:38,168
what how that how the changes impact the

532
00:18:35,919 --> 00:18:40,179
routing policy and how the enroute

533
00:18:38,169 --> 00:18:42,279
tables and then you sort of rinse it

534
00:18:40,179 --> 00:18:43,509
repeat until you get the change in the

535
00:18:42,279 --> 00:18:45,159
scope that you want it to be so you

536
00:18:43,509 --> 00:18:46,360
accept the routes you want to you

537
00:18:45,159 --> 00:18:56,950
transmit the rest you want to and

538
00:18:46,360 --> 00:19:00,549
nothing else so so in this example you

539
00:18:56,950 --> 00:19:03,240
know I have so in this network is p1

540
00:19:00,549 --> 00:19:07,690
I've got two peering connections to it

541
00:19:03,240 --> 00:19:09,580
one on in my New York City pap device

542
00:19:07,690 --> 00:19:10,659
one in Denver and I'm accepting a series

543
00:19:09,580 --> 00:19:12,158
arrest from both of them and they want

544
00:19:10,659 --> 00:19:13,360
to load-balanced selectively across

545
00:19:12,159 --> 00:19:15,669
these two eggs of points they want

546
00:19:13,360 --> 00:19:18,758
controlling how I'm sending traffic to

547
00:19:15,669 --> 00:19:21,909
them in this example they have a slash

548
00:19:18,759 --> 00:19:24,039
16 14.1 slash 16 and they want to send

549
00:19:21,909 --> 00:19:27,340
me any prefix that's under that slash 16

550
00:19:24,039 --> 00:19:29,379
of any arbitrary length for load

551
00:19:27,340 --> 00:19:30,820
balancing purposes so this is what

552
00:19:29,379 --> 00:19:32,529
they'd like to send me I'm currently

553
00:19:30,820 --> 00:19:33,759
blocking all of these but I want to make

554
00:19:32,529 --> 00:19:34,899
sure that I'm blocking them so let's run

555
00:19:33,759 --> 00:19:36,610
some queries that allows me to

556
00:19:34,899 --> 00:19:38,350
understand what my current policy

557
00:19:36,610 --> 00:19:40,658
posture is so I've got a series of

558
00:19:38,350 --> 00:19:42,580
prefixes they're sending me I'm

559
00:19:40,659 --> 00:19:45,129
currently not accepting any of them so

560
00:19:42,580 --> 00:19:46,360
again this is some rapper code that I

561
00:19:45,129 --> 00:19:47,889
wrote for some underlying batfish

562
00:19:46,360 --> 00:19:49,360
functions that shows you you know

563
00:19:47,889 --> 00:19:51,610
whether these prefixes are being

564
00:19:49,360 --> 00:19:54,219
accepted or not so I can verify that

565
00:19:51,610 --> 00:19:56,320
these are not accepted

566
00:19:54,220 --> 00:19:58,299
so now let's propose a change and see

567
00:19:56,320 --> 00:20:02,200
what a change would look like to accept

568
00:19:58,299 --> 00:20:03,940
these prefixes so I'm going to change

569
00:20:02,200 --> 00:20:06,869
that input routing policy across both

570
00:20:03,940 --> 00:20:10,840
all my PE stores is p1 so both p1 and p3

571
00:20:06,869 --> 00:20:12,279
and so this is what the change is going

572
00:20:10,840 --> 00:20:14,860
to look like so the thing we're going to

573
00:20:12,279 --> 00:20:17,740
point out here is p1 is in this my

574
00:20:14,860 --> 00:20:20,769
example of cisco iOS device and p3 is a

575
00:20:17,740 --> 00:20:23,169
Juniper device so same underlying

576
00:20:20,769 --> 00:20:24,610
infrastructure vendor agnostic queries

577
00:20:23,169 --> 00:20:27,249
allows me to analyze both of these

578
00:20:24,610 --> 00:20:30,758
platforms at the same time so what I've

579
00:20:27,249 --> 00:20:32,710
done here I'm sort of enumerated okay I

580
00:20:30,759 --> 00:20:35,499
want to for anything that's under 14.1

581
00:20:32,710 --> 00:20:38,559
slash 16 up to / 32 I'm gonna permit

582
00:20:35,499 --> 00:20:40,570
that I'm gonna set my community when I

583
00:20:38,559 --> 00:20:42,850
accept it and I updated my prefix my

584
00:20:40,570 --> 00:20:45,009
policy same thing on the juniper box

585
00:20:42,850 --> 00:20:46,719
I've added an use term in my policy

586
00:20:45,009 --> 00:20:51,620
statement so that I can accept these

587
00:20:46,720 --> 00:20:52,700
slash 24s so

588
00:20:51,620 --> 00:20:54,800
let's take a look at some of the routes

589
00:20:52,700 --> 00:20:57,020
what I see in the network so now after

590
00:20:54,800 --> 00:20:58,610
that change I can see and I'm only

591
00:20:57,020 --> 00:21:00,680
showing you a subset of these not all of

592
00:20:58,610 --> 00:21:04,790
them I can see that these routes are

593
00:21:00,680 --> 00:21:05,180
being accepted on p1 and p3 so that's

594
00:21:04,790 --> 00:21:06,530
good

595
00:21:05,180 --> 00:21:09,920
so that was sort of what I wanted to do

596
00:21:06,530 --> 00:21:11,420
yeah I can also now look at let's look

597
00:21:09,920 --> 00:21:12,920
at the general routing table so another

598
00:21:11,420 --> 00:21:15,710
way I can compare it is rather than just

599
00:21:12,920 --> 00:21:17,360
looking at the snapshot the new snapshot

600
00:21:15,710 --> 00:21:20,030
in that routing table I can compare the

601
00:21:17,360 --> 00:21:21,860
routing tables so everything I'm doing

602
00:21:20,030 --> 00:21:23,540
here I can run differentially so in

603
00:21:21,860 --> 00:21:24,830
batfish I can ask you to show me the

604
00:21:23,540 --> 00:21:27,350
difference between the routing tables

605
00:21:24,830 --> 00:21:29,659
between this change I'm about to make

606
00:21:27,350 --> 00:21:31,639
and the snapshot that's running in my

607
00:21:29,660 --> 00:21:33,500
network and so here I can see a series

608
00:21:31,640 --> 00:21:35,960
of changes and what this is telling me

609
00:21:33,500 --> 00:21:37,550
is these prefixes are only in my

610
00:21:35,960 --> 00:21:39,710
snapshot so I only see them in the new

611
00:21:37,550 --> 00:21:42,080
snapshot I created they're not present

612
00:21:39,710 --> 00:21:43,550
in what's running in the snapshot that's

613
00:21:42,080 --> 00:21:46,189
running in the network today which is

614
00:21:43,550 --> 00:21:47,360
sort of what I've expect so I'm

615
00:21:46,190 --> 00:21:50,540
accepting that's great let's see if I'm

616
00:21:47,360 --> 00:21:52,309
leaking anything so here now I can see

617
00:21:50,540 --> 00:21:54,379
I'm leaking these because I'm sending

618
00:21:52,309 --> 00:21:56,210
these routes out of my network to my

619
00:21:54,380 --> 00:21:57,770
customers but again I can see that there

620
00:21:56,210 --> 00:21:59,900
were the entry presence key is telling

621
00:21:57,770 --> 00:22:01,820
me if it's only in that new snapshot not

622
00:21:59,900 --> 00:22:03,410
the old one so I made a change to accept

623
00:22:01,820 --> 00:22:08,120
them but I didn't prevent propagation

624
00:22:03,410 --> 00:22:09,590
outside of the AAS so I can mate now

625
00:22:08,120 --> 00:22:12,290
make another incremental change on top

626
00:22:09,590 --> 00:22:14,600
of that to see how I can accept them a

627
00:22:12,290 --> 00:22:16,580
block those from being leaked to the

628
00:22:14,600 --> 00:22:18,169
rest of the rest of the world I'm going

629
00:22:16,580 --> 00:22:20,419
to analyze the policy difference between

630
00:22:18,170 --> 00:22:21,830
snapshot 1 snapshot 2 before I make the

631
00:22:20,420 --> 00:22:23,630
change I want to understand more of what

632
00:22:21,830 --> 00:22:26,449
Baptist is telling me about the previous

633
00:22:23,630 --> 00:22:28,640
change so I'm going to compare the two

634
00:22:26,450 --> 00:22:30,500
routing policies I'm going to look at

635
00:22:28,640 --> 00:22:32,960
what routes were permitted so the thing

636
00:22:30,500 --> 00:22:34,460
I see is I didn't deny any routes so the

637
00:22:32,960 --> 00:22:35,840
change I made to accept the size 20

638
00:22:34,460 --> 00:22:39,380
forest didn't deny anything which is

639
00:22:35,840 --> 00:22:41,120
again a good thing now I want to look at

640
00:22:39,380 --> 00:22:44,030
what was previously denied but is now

641
00:22:41,120 --> 00:22:47,290
permitted so I can see a series of these

642
00:22:44,030 --> 00:22:50,059
longer prefixes under that 14.1 subnet

643
00:22:47,290 --> 00:22:51,800
slash 16 are being permitted so

644
00:22:50,059 --> 00:22:54,530
previously was denied and I was

645
00:22:51,800 --> 00:22:55,580
permitted and I'm got some community

646
00:22:54,530 --> 00:22:57,830
values so it's coming in with a

647
00:22:55,580 --> 00:23:02,120
community and then I'm remarking that to

648
00:22:57,830 --> 00:23:03,290
something else and then let's see if

649
00:23:02,120 --> 00:23:05,330
there's anything that was permitted but

650
00:23:03,290 --> 00:23:08,460
no attribute changes

651
00:23:05,330 --> 00:23:10,199
nothing there so that's good so as a

652
00:23:08,460 --> 00:23:12,510
core construct I know what that change

653
00:23:10,200 --> 00:23:15,270
is supposed to do it's doing at least

654
00:23:12,510 --> 00:23:17,340
part of what I wanted to do so let's

655
00:23:15,270 --> 00:23:20,520
make another change to that and say how

656
00:23:17,340 --> 00:23:21,959
do I now turn this into the final policy

657
00:23:20,520 --> 00:23:24,060
I really need so I'm gonna do another

658
00:23:21,960 --> 00:23:26,910
Fork snapshot or I'm gonna upload just

659
00:23:24,060 --> 00:23:28,530
another incremental change and here you

660
00:23:26,910 --> 00:23:29,970
can see the incremental changes I'm

661
00:23:28,530 --> 00:23:32,580
basically gonna add a no export

662
00:23:29,970 --> 00:23:35,400
community because I could go around in

663
00:23:32,580 --> 00:23:37,409
all my output policies basically block

664
00:23:35,400 --> 00:23:38,970
anything greater than a slash 24 or I

665
00:23:37,410 --> 00:23:40,980
could just say you know what my policy

666
00:23:38,970 --> 00:23:42,480
is I'm gonna mark things that don't need

667
00:23:40,980 --> 00:23:44,550
to propagate with an export and I'm

668
00:23:42,480 --> 00:23:46,200
gonna make sure and then the BGP native

669
00:23:44,550 --> 00:23:47,580
BGP policy and all the vendor platforms

670
00:23:46,200 --> 00:23:51,180
will take care of it won't export

671
00:23:47,580 --> 00:23:53,879
anything else of my a s so same thing I

672
00:23:51,180 --> 00:23:55,350
do that in Cisco and juniper and now I

673
00:23:53,880 --> 00:23:56,850
can now let's see if anything's being

674
00:23:55,350 --> 00:23:59,399
leaked so I'm gonna run that get leaked

675
00:23:56,850 --> 00:24:01,980
Prairie and I now I see the route

676
00:23:59,400 --> 00:24:03,540
presence is only in reference so it's

677
00:24:01,980 --> 00:24:04,920
only in the previous snapshot it's not

678
00:24:03,540 --> 00:24:06,510
in the current snapshot so that's good

679
00:24:04,920 --> 00:24:07,860
so I prevented that from leaving my

680
00:24:06,510 --> 00:24:13,620
network which is what I wanted to see

681
00:24:07,860 --> 00:24:15,030
happen and but let's make sure that I'm

682
00:24:13,620 --> 00:24:17,760
still accepting in and propagating

683
00:24:15,030 --> 00:24:19,410
within my network so I'm gonna do that

684
00:24:17,760 --> 00:24:22,140
again by just analyzing that policy

685
00:24:19,410 --> 00:24:24,750
using those core constructs so I'm going

686
00:24:22,140 --> 00:24:26,370
to take my to reference my to test nap

687
00:24:24,750 --> 00:24:28,920
shots I'm gonna compare the BGP policies

688
00:24:26,370 --> 00:24:31,010
so let's look at any new routes that

689
00:24:28,920 --> 00:24:34,710
were previously permitted now denied

690
00:24:31,010 --> 00:24:36,360
nothing there now I can easily look at

691
00:24:34,710 --> 00:24:37,920
what are mine you nearly permitted

692
00:24:36,360 --> 00:24:40,260
routes is anything that's previously

693
00:24:37,920 --> 00:24:41,570
permitted by the policy denied but I'm

694
00:24:40,260 --> 00:24:43,830
now permitted I don't see anything there

695
00:24:41,570 --> 00:24:45,870
what I expect to see is just a series of

696
00:24:43,830 --> 00:24:48,090
attribute changes so this is what I have

697
00:24:45,870 --> 00:24:50,429
I see I've accepted a series of routes

698
00:24:48,090 --> 00:24:54,320
that are slashed 24 or longer in length

699
00:24:50,430 --> 00:24:56,730
and rather than just marking him without

700
00:24:54,320 --> 00:24:58,230
community value I'm adding my no export

701
00:24:56,730 --> 00:24:59,640
community as well so I have two

702
00:24:58,230 --> 00:25:00,990
communities that are getting set and

703
00:24:59,640 --> 00:25:05,970
that is how I'm preventing it from

704
00:25:00,990 --> 00:25:08,280
propagating outside of my network and so

705
00:25:05,970 --> 00:25:09,720
this is how I know that this is a safe

706
00:25:08,280 --> 00:25:17,780
policy we're gonna push and now I can

707
00:25:09,720 --> 00:25:17,780
deploy that in my network all right so

708
00:25:22,070 --> 00:25:27,120
so hopefully this sort of gave you a

709
00:25:24,630 --> 00:25:29,010
sense of how you can use an open-source

710
00:25:27,120 --> 00:25:30,330
tool like something a batfish to analyze

711
00:25:29,010 --> 00:25:32,040
your routing policy changes I know it's

712
00:25:30,330 --> 00:25:35,100
a little fast and it's hard to look at

713
00:25:32,040 --> 00:25:37,020
code in a live demo but everything you

714
00:25:35,100 --> 00:25:38,310
need to get started there's a it's easy

715
00:25:37,020 --> 00:25:39,960
to get started with batfish there's a

716
00:25:38,310 --> 00:25:42,360
docker container that you can download

717
00:25:39,960 --> 00:25:44,340
from docker hub the read the docs has

718
00:25:42,360 --> 00:25:46,260
instructions on how to get set up how to

719
00:25:44,340 --> 00:25:48,120
install it we've put out a number of

720
00:25:46,260 --> 00:25:50,850
tutorials for how do you interact with

721
00:25:48,120 --> 00:25:52,709
batfish some very basic from how do I

722
00:25:50,850 --> 00:25:55,530
get node properties to how do I test

723
00:25:52,710 --> 00:25:57,870
routing policies to how do I test ACL

724
00:25:55,530 --> 00:25:59,220
and filter changes and then there's a

725
00:25:57,870 --> 00:26:00,469
set of YouTube videos that we've also

726
00:25:59,220 --> 00:26:02,790
put together to help walk you through

727
00:26:00,470 --> 00:26:05,370
the setup process and the interaction

728
00:26:02,790 --> 00:26:07,379
process and then obviously everything

729
00:26:05,370 --> 00:26:08,780
here so this presentation plus all the

730
00:26:07,380 --> 00:26:11,100
code that I was showing you guys

731
00:26:08,780 --> 00:26:12,750
examples snapshots and config so you can

732
00:26:11,100 --> 00:26:14,939
run all of that by going to my github

733
00:26:12,750 --> 00:26:17,160
repo it's public for you to clone

734
00:26:14,940 --> 00:26:18,540
download and run and you can sort of get

735
00:26:17,160 --> 00:26:19,770
a sense for how you could use batfish

736
00:26:18,540 --> 00:26:21,420
play around with it and see how you

737
00:26:19,770 --> 00:26:24,270
could adapt it to your specific

738
00:26:21,420 --> 00:26:25,920
environment the goal here was can I give

739
00:26:24,270 --> 00:26:28,530
you some building blocks that you can

740
00:26:25,920 --> 00:26:30,120
use when you're making manual changes to

741
00:26:28,530 --> 00:26:31,710
routing policies or if you're making not

742
00:26:30,120 --> 00:26:33,929
if you have an automated infrastructure

743
00:26:31,710 --> 00:26:35,520
to make changes to network config to

744
00:26:33,930 --> 00:26:37,080
deploy changes to your network you can

745
00:26:35,520 --> 00:26:39,450
sort of integrate batfish into that

746
00:26:37,080 --> 00:26:44,429
automated workflow and get validation

747
00:26:39,450 --> 00:26:46,320
before you deploy so last thing before

748
00:26:44,430 --> 00:26:47,250
I'll open it up for questions you know I

749
00:26:46,320 --> 00:26:49,560
wanted to keep a lot of time for

750
00:26:47,250 --> 00:26:51,360
questions there's a lot of ways you can

751
00:26:49,560 --> 00:26:53,850
reach us we have an open slack channel

752
00:26:51,360 --> 00:26:55,260
so if you go to our github site there's

753
00:26:53,850 --> 00:26:57,120
a lick pointer to join our psych channel

754
00:26:55,260 --> 00:26:58,830
if you go to to batface org there's a

755
00:26:57,120 --> 00:27:00,479
pointer to join the slack channel but

756
00:26:58,830 --> 00:27:02,429
you can reach us in any of these means

757
00:27:00,480 --> 00:27:04,620
open a github issue join our slack ask a

758
00:27:02,430 --> 00:27:07,230
question there's a large community not

759
00:27:04,620 --> 00:27:08,580
just us maintainer x' but also our users

760
00:27:07,230 --> 00:27:10,230
are there and other contributors that

761
00:27:08,580 --> 00:27:12,030
are there to help answer any questions

762
00:27:10,230 --> 00:27:13,410
you might have or on what platforms

763
00:27:12,030 --> 00:27:14,790
might be supported on batfish how you

764
00:27:13,410 --> 00:27:16,860
could use batfish to solve different

765
00:27:14,790 --> 00:27:19,920
problems in your network as you're

766
00:27:16,860 --> 00:27:21,750
building your automation so that is my

767
00:27:19,920 --> 00:27:24,080
last slide I will open it up for

768
00:27:21,750 --> 00:27:24,080
questions

769
00:27:28,720 --> 00:27:50,749
no questions too fast or every still

770
00:27:33,889 --> 00:27:53,570
wake caffeine after lunch hello hi I'll

771
00:27:50,749 --> 00:27:54,889
be Frieden have a question so yes you're

772
00:27:53,570 --> 00:27:57,529
looking at weather routes will be

773
00:27:54,889 --> 00:27:59,299
dropped do you have any thoughts or

774
00:27:57,529 --> 00:28:01,340
plans or does it currently have ability

775
00:27:59,299 --> 00:28:02,840
to integrate and say what kind of

776
00:28:01,340 --> 00:28:04,220
traffic will be affected or what kind of

777
00:28:02,840 --> 00:28:07,939
volume of traffic will be affected by

778
00:28:04,220 --> 00:28:10,639
that great question so we don't do

779
00:28:07,940 --> 00:28:12,049
volume analysis so because batfish is

780
00:28:10,639 --> 00:28:14,178
offline and it's just understanding your

781
00:28:12,049 --> 00:28:16,399
configs it can tell you what the reach

782
00:28:14,179 --> 00:28:18,110
ability matrix is going to look like so

783
00:28:16,399 --> 00:28:19,998
you can run a series of queries to say

784
00:28:18,110 --> 00:28:22,729
show me flows that were previously

785
00:28:19,999 --> 00:28:23,899
permitted that are now denied or flows

786
00:28:22,730 --> 00:28:25,820
that were previously denied that in are

787
00:28:23,899 --> 00:28:28,939
permitted and you can build a reach

788
00:28:25,820 --> 00:28:31,279
ability matrix to say who's affected but

789
00:28:28,940 --> 00:28:33,350
we're not ingesting any s flow or net

790
00:28:31,279 --> 00:28:35,090
flow data or any telemetry to see what

791
00:28:33,350 --> 00:28:37,039
volume of traffic would get impacted but

792
00:28:35,090 --> 00:28:39,139
in terms of endpoints or services you

793
00:28:37,039 --> 00:28:41,509
can absolutely understand what's the

794
00:28:39,139 --> 00:28:44,899
impact to the potential traffic in your

795
00:28:41,509 --> 00:28:46,279
network so is that per when you think

796
00:28:44,899 --> 00:28:49,820
about a flow that will be accepted or

797
00:28:46,279 --> 00:28:52,070
denied is that 32 or 64 or 128 or is it

798
00:28:49,820 --> 00:28:53,809
the prefix at the prefix length as

799
00:28:52,070 --> 00:28:55,908
specified in the routing table to some

800
00:28:53,809 --> 00:28:59,389
other prefix at that prefix length so

801
00:28:55,909 --> 00:29:02,029
you can look at it from hey if I specify

802
00:28:59,389 --> 00:29:03,649
a series of input sources so this is the

803
00:29:02,029 --> 00:29:06,110
boundary of my network show me all flows

804
00:29:03,649 --> 00:29:08,479
that enter here that weren't previously

805
00:29:06,110 --> 00:29:09,649
accepted but are now denied so that what

806
00:29:08,480 --> 00:29:10,940
that will do is it will take a

807
00:29:09,649 --> 00:29:12,678
combination of what routes you're

808
00:29:10,940 --> 00:29:15,830
sending out those interfaces to your

809
00:29:12,679 --> 00:29:16,789
peers so it your your prefix space or

810
00:29:15,830 --> 00:29:19,610
your outer space whatever it might be

811
00:29:16,789 --> 00:29:21,379
and tell you which what part of that

812
00:29:19,610 --> 00:29:23,658
traffic is impacted by this change but

813
00:29:21,379 --> 00:29:25,789
if it's zero slash zero slash zero on

814
00:29:23,659 --> 00:29:28,220
the other end are you projecting sort of

815
00:29:25,789 --> 00:29:30,259
across an internet routing table so yes

816
00:29:28,220 --> 00:29:33,019
we can't so if you depending on how much

817
00:29:30,259 --> 00:29:34,460
the internet cable you feed into it we

818
00:29:33,019 --> 00:29:36,859
can factor that into the header space as

819
00:29:34,460 --> 00:29:38,749
well so the flip side of it would be if

820
00:29:36,859 --> 00:29:39,449
you er have the Internet routing table

821
00:29:38,749 --> 00:29:41,250
coming over here

822
00:29:39,450 --> 00:29:43,470
connection we will use that as the

823
00:29:41,250 --> 00:29:45,409
source address space for flows until you

824
00:29:43,470 --> 00:29:47,820
okay what is the source address place

825
00:29:45,409 --> 00:29:50,220
matrix with your destination space which

826
00:29:47,820 --> 00:29:53,070
is part your network prefixes and tell

827
00:29:50,220 --> 00:29:55,559
you what flows are impacted okay so all

828
00:29:53,070 --> 00:29:58,110
potentials so like you know 30 8/8 is

829
00:29:55,559 --> 00:30:00,299
one of the routes to all my potential

830
00:29:58,110 --> 00:30:01,889
then if I make a routing change I don't

831
00:30:00,299 --> 00:30:04,080
know that I had traffic from there but

832
00:30:01,889 --> 00:30:06,149
I'd see that I could no longer exactly

833
00:30:04,080 --> 00:30:07,350
okay so yeah but first won't know if

834
00:30:06,149 --> 00:30:09,479
there was traffic there but it'll tell

835
00:30:07,350 --> 00:30:11,309
you theoretically if traffic was coming

836
00:30:09,480 --> 00:30:13,380
in there is that gonna still happen or

837
00:30:11,309 --> 00:30:15,120
is it gonna get denied or dropped cool

838
00:30:13,380 --> 00:30:17,549
what's the router vendor that you get

839
00:30:15,120 --> 00:30:20,760
most asked for that is not yet you know

840
00:30:17,549 --> 00:30:23,549
you don't have the translation yet it's

841
00:30:20,760 --> 00:30:25,440
the most common one so we have all the

842
00:30:23,549 --> 00:30:27,929
big ones there Arista cisco all the

843
00:30:25,440 --> 00:30:31,130
different flavors of Cisco IOS XE XR and

844
00:30:27,929 --> 00:30:35,100
Express juniper we've added cumulus

845
00:30:31,130 --> 00:30:37,500
recently we get a few requests for some

846
00:30:35,100 --> 00:30:38,219
of the older Dell boxes it's come up a

847
00:30:37,500 --> 00:30:40,309
couple of times

848
00:30:38,220 --> 00:30:43,950
had a couple users ask for brocade

849
00:30:40,309 --> 00:30:46,320
procurve micro writer Pro curve is not

850
00:30:43,950 --> 00:30:48,659
showing up that much mikrotik everyone's

851
00:30:46,320 --> 00:30:51,049
as well but not mostly for if you want

852
00:30:48,659 --> 00:30:52,380
to add management layer analysis but

853
00:30:51,049 --> 00:30:59,279
cool stuff

854
00:30:52,380 --> 00:31:06,750
thanks thanks awesome anybody else any

855
00:30:59,279 --> 00:31:08,820
questions alright there's nothing else I

856
00:31:06,750 --> 00:31:11,039
think we'll I'll give everybody about

857
00:31:08,820 --> 00:31:13,049
fourteen minutes back to stretch their

858
00:31:11,039 --> 00:31:14,730
legs before the next presentation thank

859
00:31:13,049 --> 00:31:21,020
you very much

860
00:31:14,730 --> 00:31:21,020
[Applause]

