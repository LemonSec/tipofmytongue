1
00:00:00,060 --> 00:00:08,010
alright DNS dot doe what does it all

2
00:00:04,950 --> 00:00:12,240
mean this is the last chance to leave

3
00:00:08,010 --> 00:00:15,570
for the RPK I talk no we're gonna take a

4
00:00:12,240 --> 00:00:18,509
different take on this so our goal with

5
00:00:15,570 --> 00:00:21,060
regard to this particular talk was to

6
00:00:18,510 --> 00:00:23,699
perform some measurements and see how

7
00:00:21,060 --> 00:00:27,169
things are being deployed now I have to

8
00:00:23,699 --> 00:00:31,320
say up front this is a very rapidly

9
00:00:27,170 --> 00:00:33,750
evolving field as as Paul just talked

10
00:00:31,320 --> 00:00:36,510
about things are in discussion even now

11
00:00:33,750 --> 00:00:38,250
and and so things have changed a lot so

12
00:00:36,510 --> 00:00:40,110
you have to take what I'm showing you

13
00:00:38,250 --> 00:00:42,000
today with a grain of salt in terms of

14
00:00:40,110 --> 00:00:45,180
where things are and where they are

15
00:00:42,000 --> 00:00:47,969
going but at least does provide some

16
00:00:45,180 --> 00:00:52,890
insight into where we are in terms of

17
00:00:47,969 --> 00:00:56,280
deploying DNS over over TLS DNS over

18
00:00:52,890 --> 00:00:59,520
HTTP and something called TCP fast open

19
00:00:56,280 --> 00:01:01,859
which I will get to in a little bit okay

20
00:00:59,520 --> 00:01:04,140
so some of this is going to be a little

21
00:01:01,859 --> 00:01:05,909
bit of review but for those of you those

22
00:01:04,140 --> 00:01:08,310
of you that do not work in the DNS

23
00:01:05,909 --> 00:01:09,750
everyday this may be helpful and so we

24
00:01:08,310 --> 00:01:13,680
have some visuals to go along with it

25
00:01:09,750 --> 00:01:16,140
okay so we have three basic roles in the

26
00:01:13,680 --> 00:01:18,240
DNS we have a stub resolver which is

27
00:01:16,140 --> 00:01:21,270
typically a library on your computer

28
00:01:18,240 --> 00:01:23,460
that communicates with a set of

29
00:01:21,270 --> 00:01:25,679
recursive resolvers which are typically

30
00:01:23,460 --> 00:01:28,369
fairly static and then the recursive

31
00:01:25,680 --> 00:01:31,799
resolver its job is to go out and find

32
00:01:28,369 --> 00:01:35,090
the answer from authoritative servers

33
00:01:31,799 --> 00:01:37,560
okay so we have these three basic roles

34
00:01:35,090 --> 00:01:40,590
and I should mention it said on the

35
00:01:37,560 --> 00:01:44,850
previous slide that DNS typically runs

36
00:01:40,590 --> 00:01:48,210
over UDP which is connectionless now

37
00:01:44,850 --> 00:01:50,119
there are many apologists formed you

38
00:01:48,210 --> 00:01:52,829
have many of the dangers and

39
00:01:50,119 --> 00:01:55,590
insecurities with the DNS I'll mention

40
00:01:52,829 --> 00:01:58,439
just a few of those here but one of them

41
00:01:55,590 --> 00:02:01,469
is if you're on path and this is

42
00:01:58,439 --> 00:02:04,500
actually isn't just UDP this is also TCP

43
00:02:01,469 --> 00:02:06,600
but if you're on path and then you can

44
00:02:04,500 --> 00:02:08,128
see everything that's going on if you

45
00:02:06,600 --> 00:02:10,799
see packets go by you can introspect

46
00:02:08,128 --> 00:02:12,629
those packets by default there is no

47
00:02:10,800 --> 00:02:13,890
encryption but there's also some other

48
00:02:12,629 --> 00:02:16,380
things because it's connection

49
00:02:13,890 --> 00:02:20,910
when using UDP then it's also vulnerable

50
00:02:16,380 --> 00:02:23,819
to spoofing for reflection and

51
00:02:20,910 --> 00:02:25,260
amplification type attacks and and other

52
00:02:23,819 --> 00:02:29,329
related attacks including cache

53
00:02:25,260 --> 00:02:31,649
poisoning that are off paths ok also

54
00:02:29,330 --> 00:02:34,230
because it's clear text it can also be

55
00:02:31,650 --> 00:02:37,290
used for filtering fairly easily think

56
00:02:34,230 --> 00:02:39,090
of the predictable port 53 where you can

57
00:02:37,290 --> 00:02:42,540
intercept things fairly easily if you

58
00:02:39,090 --> 00:02:45,360
wanted to or drop packets or do number

59
00:02:42,540 --> 00:02:47,000
of other things and also logging and

60
00:02:45,360 --> 00:02:49,709
collecting that data if you wanted to

61
00:02:47,000 --> 00:02:52,200
take advantage of that so you know

62
00:02:49,709 --> 00:02:53,700
insert your favorite sort of

63
00:02:52,200 --> 00:02:56,190
mischievious character in the middle

64
00:02:53,700 --> 00:02:58,010
there but also could even go on the

65
00:02:56,190 --> 00:03:00,989
other side as Paul mentioned between

66
00:02:58,010 --> 00:03:02,820
recursive and authoritative server so

67
00:03:00,989 --> 00:03:07,080
there are several places where where

68
00:03:02,820 --> 00:03:08,670
this filtering or observation can happen

69
00:03:07,080 --> 00:03:11,700
in the DNS and depending on your level

70
00:03:08,670 --> 00:03:13,380
of paranoia you may be concerned about

71
00:03:11,700 --> 00:03:15,720
that or may not be concerned about that

72
00:03:13,380 --> 00:03:17,209
but those are the things that we would

73
00:03:15,720 --> 00:03:19,200
be looking at in terms of

74
00:03:17,209 --> 00:03:21,510
characteristics that are inherent in the

75
00:03:19,200 --> 00:03:25,828
DNS that might be taken advantage of for

76
00:03:21,510 --> 00:03:31,320
malicious purposes so just to mention a

77
00:03:25,829 --> 00:03:32,940
few items here so often in terms of some

78
00:03:31,320 --> 00:03:34,680
categorizations and these are sort of

79
00:03:32,940 --> 00:03:36,750
loosely categorized because you can

80
00:03:34,680 --> 00:03:40,860
there's some bleed over from one to the

81
00:03:36,750 --> 00:03:42,360
other but Paul Paul I keep referring to

82
00:03:40,860 --> 00:03:44,040
Paul's talk because he did such a great

83
00:03:42,360 --> 00:03:46,560
job of outlining a number of different

84
00:03:44,040 --> 00:03:49,290
problems and solutions within the DNS

85
00:03:46,560 --> 00:03:51,090
and one of those is DNS SEC which is

86
00:03:49,290 --> 00:03:53,609
basically ensuring that an answer you

87
00:03:51,090 --> 00:03:56,820
get is correct no matter where you get

88
00:03:53,610 --> 00:03:59,130
it from ok but it doesn't tell you much

89
00:03:56,820 --> 00:04:01,769
about it doesn't encrypt your

90
00:03:59,130 --> 00:04:04,079
communications so that a passive

91
00:04:01,769 --> 00:04:08,670
observer could still get it it just once

92
00:04:04,079 --> 00:04:10,019
you've gotten it that is that once

93
00:04:08,670 --> 00:04:12,420
you've gotten it then you can tell that

94
00:04:10,019 --> 00:04:13,680
it's it's legitimate or not ok but we're

95
00:04:12,420 --> 00:04:17,459
not going to be talking about DNS SEC

96
00:04:13,680 --> 00:04:20,539
today the other category is ensuring

97
00:04:17,459 --> 00:04:22,320
confidentiality ok and and again there's

98
00:04:20,539 --> 00:04:24,270
depending on how you put these together

99
00:04:22,320 --> 00:04:26,039
there could be some amount of

100
00:04:24,270 --> 00:04:28,359
authenticity as well that I'm not going

101
00:04:26,039 --> 00:04:30,010
to distinguish a lot of that today

102
00:04:28,360 --> 00:04:31,930
but in terms of this list we have things

103
00:04:30,010 --> 00:04:36,340
like DNS over TLS which I'll talk about

104
00:04:31,930 --> 00:04:39,330
more DNS over HTTP DNS over DT LS DNS

105
00:04:36,340 --> 00:04:41,679
over quick and DNS script okay

106
00:04:39,330 --> 00:04:43,599
DNS curve is not on my list here but

107
00:04:41,680 --> 00:04:46,060
that was also an item that was mentioned

108
00:04:43,600 --> 00:04:47,980
in the previous one but those are mostly

109
00:04:46,060 --> 00:04:50,110
about confidentiality and ensuring a

110
00:04:47,980 --> 00:04:52,780
connection between two parties as

111
00:04:50,110 --> 00:04:54,480
opposed to authenticating the data that

112
00:04:52,780 --> 00:04:56,710
you get no matter where you got it from

113
00:04:54,480 --> 00:04:59,290
alright but the subject of my talk today

114
00:04:56,710 --> 00:05:04,539
is mainly these two bolded ones DNS or

115
00:04:59,290 --> 00:05:06,250
TLS and DNS over HTTP so let's talk

116
00:05:04,540 --> 00:05:07,690
about DNS server TLS so this was

117
00:05:06,250 --> 00:05:10,360
standardized there's actually the work

118
00:05:07,690 --> 00:05:12,820
goes back before 2016 but it was

119
00:05:10,360 --> 00:05:16,240
standardized in terms of the RFC that's

120
00:05:12,820 --> 00:05:19,960
in the IETF it back in 2016

121
00:05:16,240 --> 00:05:21,910
and so the idea is we use TLS to

122
00:05:19,960 --> 00:05:26,950
transmit a query it's actually very much

123
00:05:21,910 --> 00:05:28,420
like the DNS over standard TCP except

124
00:05:26,950 --> 00:05:30,820
now you're doing an over encrypted

125
00:05:28,420 --> 00:05:33,240
tunnel okay and actually turns out DNS

126
00:05:30,820 --> 00:05:35,020
over TCP is very much like DNS over UDP

127
00:05:33,240 --> 00:05:36,910
except that you're adding a length

128
00:05:35,020 --> 00:05:38,560
header at the very beginning of couple

129
00:05:36,910 --> 00:05:40,270
bites to indicate length okay so

130
00:05:38,560 --> 00:05:43,270
effectively what you're getting with DNS

131
00:05:40,270 --> 00:05:45,400
over TLS is a DNS query that's encrypted

132
00:05:43,270 --> 00:05:48,490
between two parties but what you get

133
00:05:45,400 --> 00:05:50,440
then is you get some server verification

134
00:05:48,490 --> 00:05:54,490
server you can verify the server

135
00:05:50,440 --> 00:05:56,410
certificate to verify that the end host

136
00:05:54,490 --> 00:05:58,960
that you're communicating with is who

137
00:05:56,410 --> 00:06:01,180
you think it is you could potentially do

138
00:05:58,960 --> 00:06:04,120
some sort of a client certificate as

139
00:06:01,180 --> 00:06:05,790
well since this is TLS okay and then

140
00:06:04,120 --> 00:06:07,930
once you've done that that verification

141
00:06:05,790 --> 00:06:10,720
everything between you is now encrypted

142
00:06:07,930 --> 00:06:12,490
so if you're an on if you're on path and

143
00:06:10,720 --> 00:06:16,600
you're observing this tracking traffic

144
00:06:12,490 --> 00:06:18,270
then it is no longer casually observed

145
00:06:16,600 --> 00:06:20,080
by the the person that's in

146
00:06:18,270 --> 00:06:22,090
introspecting this traffic

147
00:06:20,080 --> 00:06:26,050
they can't decrypt it without the

148
00:06:22,090 --> 00:06:29,320
appropriate keys it does use a dedicated

149
00:06:26,050 --> 00:06:34,300
port unlike the standard DNS which uses

150
00:06:29,320 --> 00:06:36,159
port 53 DNS over TLS or d-o-t uses 853 I

151
00:06:34,300 --> 00:06:41,529
can't bring myself to say dot and oh I'm

152
00:06:36,160 --> 00:06:43,569
sorry okay DoD uses dedicated port 853

153
00:06:41,529 --> 00:06:46,149
so as Paul mentioned earlier it is

154
00:06:43,569 --> 00:06:47,799
something you could pick out just by you

155
00:06:46,149 --> 00:06:49,479
could you could see that it's happening

156
00:06:47,799 --> 00:06:51,339
even if you can't introspect the queries

157
00:06:49,479 --> 00:06:54,279
and you could block and filter if you

158
00:06:51,339 --> 00:06:59,319
wanted to because a port is allocated

159
00:06:54,279 --> 00:07:01,569
specifically for D lat do T okay so so

160
00:06:59,319 --> 00:07:03,149
that's a breakdown of how DNS or TLS

161
00:07:01,569 --> 00:07:05,739
works and just to sort of illustrate

162
00:07:03,149 --> 00:07:06,969
over here because we'll come back to

163
00:07:05,739 --> 00:07:09,849
this in just a minute in terms of

164
00:07:06,969 --> 00:07:12,819
performance if you think of UDP standard

165
00:07:09,849 --> 00:07:15,449
UDP and presumably one of the reasons

166
00:07:12,819 --> 00:07:18,999
why UDP was used in the initial DNS is

167
00:07:15,449 --> 00:07:21,369
because you send a single query you get

168
00:07:18,999 --> 00:07:23,109
a single response and it happens it's a

169
00:07:21,369 --> 00:07:24,669
single packet exchange so you go one

170
00:07:23,109 --> 00:07:26,829
packet out one packet back in this one

171
00:07:24,669 --> 00:07:29,438
round-trip time okay but if you can see

172
00:07:26,829 --> 00:07:31,209
over here in the diagram we have to do

173
00:07:29,439 --> 00:07:34,239
the full TCP handshake for a full

174
00:07:31,209 --> 00:07:38,499
round-trip time and then you have an

175
00:07:34,239 --> 00:07:40,779
exchange for TLS for the TLS handshake

176
00:07:38,499 --> 00:07:43,359
and then you get to the application data

177
00:07:40,779 --> 00:07:45,489
part and so it takes it takes a little

178
00:07:43,359 --> 00:07:47,169
bit more - in this case we're at a two

179
00:07:45,489 --> 00:07:49,748
round-trip times and so there was some

180
00:07:47,169 --> 00:07:53,079
concern over that depending on how you

181
00:07:49,749 --> 00:07:56,049
use it but overhead wise it can be more

182
00:07:53,079 --> 00:07:58,479
significant okay all right in terms of

183
00:07:56,049 --> 00:07:59,919
DNS over HTTP which was standardized in

184
00:07:58,479 --> 00:08:04,479
2018 although there was some

185
00:07:59,919 --> 00:08:06,489
experimental instances before that we're

186
00:08:04,479 --> 00:08:10,839
sending queries and it doesn't have to

187
00:08:06,489 --> 00:08:14,948
be port 443 but most often is that again

188
00:08:10,839 --> 00:08:16,629
does create some troublesome creates

189
00:08:14,949 --> 00:08:18,369
some worry for network administrators

190
00:08:16,629 --> 00:08:21,659
that can't tell the difference between

191
00:08:18,369 --> 00:08:23,889
this and other web traffic particularly

192
00:08:21,659 --> 00:08:25,539
unless maybe they know where it's going

193
00:08:23,889 --> 00:08:27,969
and they can block certain destinations

194
00:08:25,539 --> 00:08:30,729
okay but but it can be a little bit

195
00:08:27,969 --> 00:08:32,409
trickier in that sense in this case this

196
00:08:30,729 --> 00:08:33,879
is just a little example of how it might

197
00:08:32,409 --> 00:08:38,019
be used where you're actually sending

198
00:08:33,879 --> 00:08:40,389
the wire message as the content of an

199
00:08:38,019 --> 00:08:43,568
HTTP POST or as part of the query string

200
00:08:40,389 --> 00:08:46,269
in an HTTP GET method okay and then you

201
00:08:43,568 --> 00:08:51,009
would receive it in the content of the

202
00:08:46,269 --> 00:08:52,600
response it's base base64 encoded but

203
00:08:51,009 --> 00:08:55,000
this is how I would typically go and you

204
00:08:52,600 --> 00:08:55,600
have to be provided a given URL for the

205
00:08:55,000 --> 00:08:59,380
store

206
00:08:55,600 --> 00:09:00,520
okay there are some examples in the RFC

207
00:08:59,380 --> 00:09:02,320
for this and actually in our

208
00:09:00,520 --> 00:09:04,540
experimentation later you'll see that we

209
00:09:02,320 --> 00:09:05,830
used one of the examples in the RFC to

210
00:09:04,540 --> 00:09:09,250
discover when we were actually looking

211
00:09:05,830 --> 00:09:12,610
around but really could be specified

212
00:09:09,250 --> 00:09:14,650
however a server wanted they would say

213
00:09:12,610 --> 00:09:20,740
here's our URL that we are going to use

214
00:09:14,650 --> 00:09:22,870
for DNS over HTTP okay so just this is a

215
00:09:20,740 --> 00:09:25,120
very very brief comparison not meant to

216
00:09:22,870 --> 00:09:27,220
be comprehensive but again you'll find

217
00:09:25,120 --> 00:09:29,020
that these are bleeding and these even

218
00:09:27,220 --> 00:09:34,630
within the last few weeks and months

219
00:09:29,020 --> 00:09:37,199
have sort of changed traditionally do T

220
00:09:34,630 --> 00:09:41,050
for example was more system-wide and

221
00:09:37,200 --> 00:09:42,520
could be used for all applications with

222
00:09:41,050 --> 00:09:44,620
something like get add or info but now

223
00:09:42,520 --> 00:09:47,560
we've seen that with the recent changes

224
00:09:44,620 --> 00:09:50,380
from Microsoft for example that's even a

225
00:09:47,560 --> 00:09:52,930
functionality that's that applies to do

226
00:09:50,380 --> 00:09:55,540
H as well so so it sort of depends again

227
00:09:52,930 --> 00:09:58,569
there's there's some bleed over in these

228
00:09:55,540 --> 00:10:00,670
I already mentioned this but do T is

229
00:09:58,570 --> 00:10:03,820
follows the same paradigm as DNS over

230
00:10:00,670 --> 00:10:07,120
HTTP in terms of how it works and then

231
00:10:03,820 --> 00:10:08,800
do H is a little bit easier to implement

232
00:10:07,120 --> 00:10:10,120
at application-level and one of the

233
00:10:08,800 --> 00:10:13,030
features of this because now you're

234
00:10:10,120 --> 00:10:15,430
doing an HTP you've opened up the things

235
00:10:13,030 --> 00:10:17,949
like JavaScript where you traditionally

236
00:10:15,430 --> 00:10:19,630
could only do for better or worse might

237
00:10:17,950 --> 00:10:21,370
I add I'm not advocating one way or the

238
00:10:19,630 --> 00:10:23,620
other I'm just saying that now you can

239
00:10:21,370 --> 00:10:25,000
do this over a JavaScript potentially

240
00:10:23,620 --> 00:10:27,040
because you're outside of the realm of

241
00:10:25,000 --> 00:10:30,100
your your traditional browser sandbox

242
00:10:27,040 --> 00:10:31,569
okay and again we've already talked

243
00:10:30,100 --> 00:10:34,060
about the ports that are used and

244
00:10:31,570 --> 00:10:37,600
there's some differentiation there okay

245
00:10:34,060 --> 00:10:39,189
so let's get to our measurements here we

246
00:10:37,600 --> 00:10:41,020
we measure things from three different

247
00:10:39,190 --> 00:10:43,720
perspectives and one of those was

248
00:10:41,020 --> 00:10:46,230
looking at resolvers now because we

249
00:10:43,720 --> 00:10:49,180
wanted to do sort of a mass scale

250
00:10:46,230 --> 00:10:51,280
empirical analysis the data set that we

251
00:10:49,180 --> 00:10:52,660
needed to come up with we had to come up

252
00:10:51,280 --> 00:10:54,850
with a large set of resolver so the

253
00:10:52,660 --> 00:10:57,880
first thing we did was identify a large

254
00:10:54,850 --> 00:11:00,700
number of open resolvers to see and so

255
00:10:57,880 --> 00:11:02,500
this is more like for the intentional

256
00:11:00,700 --> 00:11:05,410
ones this would be public DNS services

257
00:11:02,500 --> 00:11:06,970
for the unintentional maybe they're just

258
00:11:05,410 --> 00:11:08,980
something that they needed to close up

259
00:11:06,970 --> 00:11:11,740
but here's what we ended up finding

260
00:11:08,980 --> 00:11:13,899
so we're in every ipv4 address to see if

261
00:11:11,740 --> 00:11:15,970
it behaves like a resolver and the way

262
00:11:13,899 --> 00:11:18,459
we determined it in our particular case

263
00:11:15,970 --> 00:11:19,990
and I know there this wasn't an open

264
00:11:18,459 --> 00:11:22,149
resolvers study this was simply to

265
00:11:19,990 --> 00:11:25,949
identify them what we did was if we got

266
00:11:22,149 --> 00:11:28,690
a no error or an NX domain response and

267
00:11:25,949 --> 00:11:31,420
the RA flag was set so we wanted to sort

268
00:11:28,690 --> 00:11:33,550
of filter out the authoritative servers

269
00:11:31,420 --> 00:11:36,219
that were authoritative only that's what

270
00:11:33,550 --> 00:11:39,579
we did we got about 1.1 million servers

271
00:11:36,220 --> 00:11:41,889
that responded in that way ok and then

272
00:11:39,579 --> 00:11:44,410
we also did a similar test to discover

273
00:11:41,889 --> 00:11:46,930
which of those resolvers the subset of

274
00:11:44,410 --> 00:11:50,339
those that worked over TCP which was

275
00:11:46,930 --> 00:11:53,138
surprisingly few believe it or not and

276
00:11:50,339 --> 00:11:56,410
then when we got to that point we we

277
00:11:53,139 --> 00:11:58,930
sent a query using do T and do H with

278
00:11:56,410 --> 00:12:01,240
the with the URL that I mentioned

279
00:11:58,930 --> 00:12:03,430
earlier ok I'll talk a little bit more

280
00:12:01,240 --> 00:12:05,050
about that in just a minute what we

281
00:12:03,430 --> 00:12:08,620
didn't have in this particular case was

282
00:12:05,050 --> 00:12:10,540
a ipv6 equivalent test we didn't use an

283
00:12:08,620 --> 00:12:12,339
ipv6 hit list or anything like that to

284
00:12:10,540 --> 00:12:15,550
identify resolvers at this point we were

285
00:12:12,339 --> 00:12:21,850
simply doing scan for our data set ok

286
00:12:15,550 --> 00:12:24,729
and let's see so that was so so in terms

287
00:12:21,850 --> 00:12:26,260
of looking at resolvers so if you look

288
00:12:24,730 --> 00:12:27,519
at the highlighted portion of this we

289
00:12:26,260 --> 00:12:30,670
were looking at we were looking at

290
00:12:27,519 --> 00:12:34,209
initially the resolvers on the receiving

291
00:12:30,670 --> 00:12:36,459
end who is able to receive do T ok so

292
00:12:34,209 --> 00:12:38,800
that sort of Blue Square covering that

293
00:12:36,459 --> 00:12:40,630
the receiving end of the resolvers and

294
00:12:38,800 --> 00:12:42,189
we found that there were about 0.15

295
00:12:40,630 --> 00:12:44,470
percent of the resolvers the open

296
00:12:42,190 --> 00:12:48,630
resolvers that we hit that responded to

297
00:12:44,470 --> 00:12:53,430
do t so about 1700 about 1,500 of those

298
00:12:48,630 --> 00:12:56,319
correspond to the clean browsing group

299
00:12:53,430 --> 00:12:58,660
and they all supported do T which is

300
00:12:56,319 --> 00:13:01,209
quite interesting if we broke those down

301
00:12:58,660 --> 00:13:02,920
into autonomous systems the entire 1,700

302
00:13:01,209 --> 00:13:06,969
there were about 87 autonomous systems

303
00:13:02,920 --> 00:13:10,899
that had at least one resolver that was

304
00:13:06,970 --> 00:13:14,589
doing do T in terms of do H we found

305
00:13:10,899 --> 00:13:16,329
only nine that responded at the time now

306
00:13:14,589 --> 00:13:17,890
this was pre Google Google was still

307
00:13:16,329 --> 00:13:20,290
doing their experimental work so using

308
00:13:17,890 --> 00:13:22,540
the URL that we had Google did not show

309
00:13:20,290 --> 00:13:26,770
up of course they're a major player now

310
00:13:22,540 --> 00:13:28,660
as well but all the ones at the time all

311
00:13:26,770 --> 00:13:31,120
the IP addresses at the time that we did

312
00:13:28,660 --> 00:13:35,199
the the study were associated with quad

313
00:13:31,120 --> 00:13:37,660
nine or CloudFlare okay and we've done

314
00:13:35,200 --> 00:13:40,650
just a more recent study to sort of

315
00:13:37,660 --> 00:13:44,230
clean this up a little bit and we found

316
00:13:40,650 --> 00:13:48,400
35 so it's expanded quite a bit since we

317
00:13:44,230 --> 00:13:58,270
initially did the study okay so now we

318
00:13:48,400 --> 00:14:02,560
wanted to look at let's see sorry

319
00:13:58,270 --> 00:14:07,060
this ain't caught up here okay now we're

320
00:14:02,560 --> 00:14:08,829
looking at there we go at the TLS

321
00:14:07,060 --> 00:14:10,599
results for this case we wanted to

322
00:14:08,830 --> 00:14:12,700
analyze the certificates on the server

323
00:14:10,600 --> 00:14:14,920
side and see exactly what was going on

324
00:14:12,700 --> 00:14:16,900
in terms of what we were as a client

325
00:14:14,920 --> 00:14:20,319
what we were being presented since part

326
00:14:16,900 --> 00:14:23,020
of the idea of d-o-t is to have some

327
00:14:20,320 --> 00:14:23,920
assurance that the other side is who

328
00:14:23,020 --> 00:14:28,600
they say they are

329
00:14:23,920 --> 00:14:31,839
okay so between the 1700 resolvers that

330
00:14:28,600 --> 00:14:34,510
supported d-o-t we found just 22 unique

331
00:14:31,840 --> 00:14:36,940
certificate signers so GoDaddy and let's

332
00:14:34,510 --> 00:14:39,640
encrypt or the most popular among those

333
00:14:36,940 --> 00:14:41,740
we also found 11 certificates that were

334
00:14:39,640 --> 00:14:43,360
self signed and we measured that by

335
00:14:41,740 --> 00:14:44,590
looking that the issuer matched the

336
00:14:43,360 --> 00:14:45,940
subject line in there that's how we

337
00:14:44,590 --> 00:14:49,420
determined that they were self signed

338
00:14:45,940 --> 00:14:52,150
okay so you know there is some question

339
00:14:49,420 --> 00:14:54,939
about how much you really care about the

340
00:14:52,150 --> 00:14:58,120
client side being able to actually

341
00:14:54,940 --> 00:15:02,350
validate the authenticity of the

342
00:14:58,120 --> 00:15:04,720
certificate on the other side okay let's

343
00:15:02,350 --> 00:15:09,130
see in terms of version support we have

344
00:15:04,720 --> 00:15:12,340
the the new TLS 1.3 only about four

345
00:15:09,130 --> 00:15:16,390
point five percent of IPS supported TLS

346
00:15:12,340 --> 00:15:20,140
1.3 and one of the neat features about

347
00:15:16,390 --> 00:15:22,689
TLS 1.3 is that it supports something

348
00:15:20,140 --> 00:15:25,180
called 0 RTT and remember I talked about

349
00:15:22,690 --> 00:15:27,850
that we we go from one round-trip time

350
00:15:25,180 --> 00:15:31,870
with traditional UDP to three round-trip

351
00:15:27,850 --> 00:15:33,310
times if you use 0 RTT and something

352
00:15:31,870 --> 00:15:35,050
which I'll talk about a little bit later

353
00:15:33,310 --> 00:15:36,099
which is TCP fast hope and you can get

354
00:15:35,050 --> 00:15:38,620
things down

355
00:15:36,100 --> 00:15:41,199
- one round-trip time which is really

356
00:15:38,620 --> 00:15:43,899
great but only four point five of the

357
00:15:41,199 --> 00:15:46,599
IPAs IP supporting d-o-t we're actually

358
00:15:43,899 --> 00:15:48,009
implementing this so so there's some

359
00:15:46,600 --> 00:15:53,319
room for growth there in terms of

360
00:15:48,009 --> 00:15:56,860
deployment let's see in terms of at

361
00:15:53,319 --> 00:16:00,009
least supporting TLS 1.2 which is not

362
00:15:56,860 --> 00:16:01,690
yet end-of-life seventeen seventeen

363
00:16:00,009 --> 00:16:03,940
hundred or ninety seven percent of the

364
00:16:01,690 --> 00:16:06,160
IP supported one point two that was good

365
00:16:03,940 --> 00:16:09,069
and a few of them had turned off support

366
00:16:06,160 --> 00:16:11,560
for TLS one and TLS one point one which

367
00:16:09,069 --> 00:16:13,569
was a step in the right direction

368
00:16:11,560 --> 00:16:16,469
so there were just 80 of those and they

369
00:16:13,569 --> 00:16:21,819
actually coincided with the 79 there was

370
00:16:16,470 --> 00:16:23,230
there was an overlap there okay okay so

371
00:16:21,819 --> 00:16:25,329
in terms of measuring support at

372
00:16:23,230 --> 00:16:27,399
authoritative servers we also wanted to

373
00:16:25,329 --> 00:16:30,219
look this was sort of the the Charter

374
00:16:27,399 --> 00:16:33,069
was initially in the Charter in the IETF

375
00:16:30,220 --> 00:16:36,370
was initially designed to look at stub

376
00:16:33,069 --> 00:16:38,290
to recursive encryption but it's there's

377
00:16:36,370 --> 00:16:40,540
there's talk of expanding I'm not sure

378
00:16:38,290 --> 00:16:43,660
where it is in that stage I'm sorry but

379
00:16:40,540 --> 00:16:47,019
there there's vision towards also

380
00:16:43,660 --> 00:16:48,459
encrypting between recursive and

381
00:16:47,019 --> 00:16:49,839
authoritative and so we wanted to do a

382
00:16:48,459 --> 00:16:52,180
little bit of a survey to see where

383
00:16:49,839 --> 00:16:54,009
things were there and who was using it

384
00:16:52,180 --> 00:16:55,989
so we we started out by identifying a

385
00:16:54,009 --> 00:16:59,470
data set here as the authoritative

386
00:16:55,990 --> 00:17:01,689
servers for the top 5,000 alexis sites

387
00:16:59,470 --> 00:17:02,829
and all of the top-level domains okay

388
00:17:01,689 --> 00:17:05,438
that includes country code top-level

389
00:17:02,829 --> 00:17:09,579
domains generic top-level domains and

390
00:17:05,439 --> 00:17:12,159
and so this ended up being about 6500 or

391
00:17:09,579 --> 00:17:18,178
so domains and then the authoritative

392
00:17:12,159 --> 00:17:18,179
servers for all of those okay and so

393
00:17:19,409 --> 00:17:24,429
sorry dancing there okay so now if you

394
00:17:22,750 --> 00:17:26,020
look at the light blue light blue box

395
00:17:24,429 --> 00:17:28,089
that's sort of the area that we're now

396
00:17:26,020 --> 00:17:31,960
looking at it's the recursive to

397
00:17:28,089 --> 00:17:34,539
authoritative side so so these are the

398
00:17:31,960 --> 00:17:36,280
numbers we had about 60 100 unit unique

399
00:17:34,539 --> 00:17:38,320
IP addresses for the top-level domains

400
00:17:36,280 --> 00:17:40,000
and about 10,000 unique IP addresses for

401
00:17:38,320 --> 00:17:41,918
the Alexa sites in terms of target

402
00:17:40,000 --> 00:17:46,470
servers okay

403
00:17:41,919 --> 00:17:49,210
there was no instance in the TLD area of

404
00:17:46,470 --> 00:17:50,170
at the time we ran the survey in terms

405
00:17:49,210 --> 00:17:53,890
of

406
00:17:50,170 --> 00:17:57,520
using port 853 for d-o-t no no server

407
00:17:53,890 --> 00:18:00,580
responded on that port however there

408
00:17:57,520 --> 00:18:03,460
were twelve alexa IPS that responded

409
00:18:00,580 --> 00:18:06,520
over d-o-t and those were all owned by

410
00:18:03,460 --> 00:18:08,370
Facebook now this there was something in

411
00:18:06,520 --> 00:18:10,450
the news this actually wasn't unexpected

412
00:18:08,370 --> 00:18:12,550
CloudFlare had posted something a while

413
00:18:10,450 --> 00:18:14,830
back about encrypting DNS traffic

414
00:18:12,550 --> 00:18:17,260
between CloudFlare and facebook so this

415
00:18:14,830 --> 00:18:19,149
sort of matched what they were they were

416
00:18:17,260 --> 00:18:20,800
indicating so it was somewhat no

417
00:18:19,150 --> 00:18:23,980
surprise but but they were the only ones

418
00:18:20,800 --> 00:18:25,928
that we did find you know the the

419
00:18:23,980 --> 00:18:28,770
domains themselves were were all the

420
00:18:25,929 --> 00:18:32,470
Facebook domains so it included Facebook

421
00:18:28,770 --> 00:18:35,080
whatsapp and Instagram I'm probably

422
00:18:32,470 --> 00:18:39,429
missing something but some of those

423
00:18:35,080 --> 00:18:42,250
fancy apps okay so let's talk a little

424
00:18:39,429 --> 00:18:44,410
bit about TC fast tcp fast open so the

425
00:18:42,250 --> 00:18:47,230
idea behind tcp fast open was that hey

426
00:18:44,410 --> 00:18:48,309
it takes such a long time to do a

427
00:18:47,230 --> 00:18:50,380
handshake and if you've already

428
00:18:48,309 --> 00:18:52,178
established a relationship with a server

429
00:18:50,380 --> 00:18:55,059
couldn't you just speed it up the next

430
00:18:52,179 --> 00:18:58,540
time you talk to him and and this was

431
00:18:55,059 --> 00:19:01,059
important not just well first it became

432
00:18:58,540 --> 00:19:04,090
important in the HTTP realm back in 2011

433
00:19:01,059 --> 00:19:07,120
there was a paper presented at the

434
00:19:04,090 --> 00:19:09,399
conext conference and that first

435
00:19:07,120 --> 00:19:11,530
proposed this and then tcp fast opened

436
00:19:09,400 --> 00:19:13,480
was later standardized in 2014 but the

437
00:19:11,530 --> 00:19:16,270
idea behind it is if you look at the

438
00:19:13,480 --> 00:19:18,610
diagram here first thing that happens is

439
00:19:16,270 --> 00:19:20,889
when the client establishes a TCP

440
00:19:18,610 --> 00:19:23,830
connection it sends an extra TCP option

441
00:19:20,890 --> 00:19:27,550
the the TCP fast open option or TFO

442
00:19:23,830 --> 00:19:29,949
option and then the server responds in

443
00:19:27,550 --> 00:19:33,250
the typical way with the syn ACK but it

444
00:19:29,950 --> 00:19:34,900
also includes that option back the TCP

445
00:19:33,250 --> 00:19:37,630
fast open option but it includes what we

446
00:19:34,900 --> 00:19:40,270
call cookie okay and then that client

447
00:19:37,630 --> 00:19:42,400
stores that cookie they go through their

448
00:19:40,270 --> 00:19:46,270
their communication and wrap up and then

449
00:19:42,400 --> 00:19:47,410
the next time they communicate this so

450
00:19:46,270 --> 00:19:50,260
this would be the next time they

451
00:19:47,410 --> 00:19:52,570
communicate here the client then sends

452
00:19:50,260 --> 00:19:54,940
along with the syn they send some data

453
00:19:52,570 --> 00:19:57,639
and the cookie so in other words payload

454
00:19:54,940 --> 00:19:59,380
data in the TCP packet associated with

455
00:19:57,640 --> 00:20:01,030
the syn whereas normally you don't do

456
00:19:59,380 --> 00:20:03,040
that it's just it's just to establish

457
00:20:01,030 --> 00:20:06,220
the handshake what that means is

458
00:20:03,040 --> 00:20:07,810
for a DNS query if you if you have a

459
00:20:06,220 --> 00:20:09,970
cookie for a server because you have

460
00:20:07,810 --> 00:20:12,490
communicated with them previously you

461
00:20:09,970 --> 00:20:14,500
can now send data immediately and then

462
00:20:12,490 --> 00:20:15,960
the response can come back right in the

463
00:20:14,500 --> 00:20:19,060
syn ACK as long as you have the right

464
00:20:15,960 --> 00:20:20,890
cookie associated with that so it

465
00:20:19,060 --> 00:20:23,830
reduces your round-trip time in a normal

466
00:20:20,890 --> 00:20:26,320
TCP connection from two round trips to

467
00:20:23,830 --> 00:20:28,570
one round trip okay and in the TLS

468
00:20:26,320 --> 00:20:31,929
connection depending on what version you

469
00:20:28,570 --> 00:20:33,820
either go from three to two or if you

470
00:20:31,930 --> 00:20:35,830
include the zero RTT you can go actually

471
00:20:33,820 --> 00:20:38,560
go from three to one which is a great

472
00:20:35,830 --> 00:20:41,860
deal so so for if you're doing a lot of

473
00:20:38,560 --> 00:20:44,290
different connections to to a server

474
00:20:41,860 --> 00:20:46,719
using one of these newer encryption

475
00:20:44,290 --> 00:20:49,030
technologies tcp fast open can be your

476
00:20:46,720 --> 00:20:50,470
friend and so adopting it for the DNS

477
00:20:49,030 --> 00:20:51,790
was kind of a big deal and it was

478
00:20:50,470 --> 00:20:55,900
involved in a lot of the research that

479
00:20:51,790 --> 00:20:57,399
came out for it okay so um so the way we

480
00:20:55,900 --> 00:20:59,200
wanted to measure this we wanted to

481
00:20:57,400 --> 00:21:01,360
measure this from two perspectives one

482
00:20:59,200 --> 00:21:03,370
is by looking at the client-to-server

483
00:21:01,360 --> 00:21:05,350
ram and we sort of we did this

484
00:21:03,370 --> 00:21:07,750
generically looking at the regular DNS

485
00:21:05,350 --> 00:21:11,020
servers as well as the DNS over TLS

486
00:21:07,750 --> 00:21:15,010
servers and so but the way we did this

487
00:21:11,020 --> 00:21:17,980
first we sent a tcp syn with the TFO

488
00:21:15,010 --> 00:21:20,350
option and then we checked just to see

489
00:21:17,980 --> 00:21:22,240
if the the syn ack coming back also had

490
00:21:20,350 --> 00:21:23,169
the TFO option and and a cookie that

491
00:21:22,240 --> 00:21:25,510
came along with it

492
00:21:23,170 --> 00:21:28,210
the second thing we did was we actually

493
00:21:25,510 --> 00:21:30,610
we didn't want to just say oh we got a

494
00:21:28,210 --> 00:21:32,110
TFO option we should be good to go we

495
00:21:30,610 --> 00:21:34,179
wanted to see wasn't really actually

496
00:21:32,110 --> 00:21:36,010
working were they acknowledging our data

497
00:21:34,180 --> 00:21:38,170
when we used that cookie that they gave

498
00:21:36,010 --> 00:21:41,470
to us so we sent two queries

499
00:21:38,170 --> 00:21:43,240
back-to-back the first one requesting

500
00:21:41,470 --> 00:21:44,770
the cookie the second one using the

501
00:21:43,240 --> 00:21:46,270
cookie and we wanted to see if they

502
00:21:44,770 --> 00:21:53,080
acknowledged our data in the syn ACK

503
00:21:46,270 --> 00:21:55,060
okay all right so first thing we did we

504
00:21:53,080 --> 00:21:57,280
we looked at these same numbers of

505
00:21:55,060 --> 00:22:02,100
servers we were first doing this in the

506
00:21:57,280 --> 00:22:05,440
authoritative servers okay so let's see

507
00:22:02,100 --> 00:22:09,969
it we found that out of the TLD IP

508
00:22:05,440 --> 00:22:11,740
addresses there were 11 that included

509
00:22:09,970 --> 00:22:14,560
the TFO option and 10 of those were

510
00:22:11,740 --> 00:22:16,570
Google's that's all is this is abysmal e

511
00:22:14,560 --> 00:22:18,639
low in terms of this

512
00:22:16,570 --> 00:22:20,350
thing that's been about since first

513
00:22:18,639 --> 00:22:24,399
proposed in 2011 and standardized in

514
00:22:20,350 --> 00:22:25,658
2014 okay and five of the only five of

515
00:22:24,399 --> 00:22:27,939
those act data and you might be

516
00:22:25,659 --> 00:22:29,860
wondering what in the world why would

517
00:22:27,940 --> 00:22:31,299
you even do why would you even send a

518
00:22:29,860 --> 00:22:33,158
cookie back if you're not actually gonna

519
00:22:31,299 --> 00:22:34,929
use it you know accept it later on I'll

520
00:22:33,159 --> 00:22:37,029
get to that in just a minute but there

521
00:22:34,929 --> 00:22:38,769
are some weird things that have to do

522
00:22:37,029 --> 00:22:41,889
with load balancing okay that are out

523
00:22:38,769 --> 00:22:44,740
there okay so so again we found just 11

524
00:22:41,889 --> 00:22:46,449
out of the TLDs out of a lot out of the

525
00:22:44,740 --> 00:22:48,279
Alexa there was a slightly larger number

526
00:22:46,450 --> 00:22:50,980
out of those IP so we had about seven

527
00:22:48,279 --> 00:22:55,019
point one percent that sent the TFO

528
00:22:50,980 --> 00:22:58,330
option and then a only 18 the ACT data

529
00:22:55,019 --> 00:23:00,490
very interesting right so what we're

530
00:22:58,330 --> 00:23:02,730
finding then with TFO is that at least

531
00:23:00,490 --> 00:23:07,059
in the Alexa there's sort of this

532
00:23:02,730 --> 00:23:09,820
lukewarm effort to deploy it kind of and

533
00:23:07,059 --> 00:23:12,129
and we're not sure all the reasons why

534
00:23:09,820 --> 00:23:14,289
we were seeing this behavior but we did

535
00:23:12,129 --> 00:23:15,730
verify some of them okay where where it

536
00:23:14,289 --> 00:23:18,360
sort of works but but you're not

537
00:23:15,730 --> 00:23:21,490
actually getting the advantage of it

538
00:23:18,360 --> 00:23:24,610
okay so next we wanted to look at the

539
00:23:21,490 --> 00:23:25,929
root servers okay and the reason why

540
00:23:24,610 --> 00:23:28,199
we're looking at the root servers if you

541
00:23:25,929 --> 00:23:31,720
look at my diagram it down here again

542
00:23:28,200 --> 00:23:34,029
playing with TCP fast open requires the

543
00:23:31,720 --> 00:23:36,759
help of two parties you have to be a

544
00:23:34,029 --> 00:23:38,799
client that supports TFO to take

545
00:23:36,759 --> 00:23:41,590
advantage of it but the server on the

546
00:23:38,799 --> 00:23:42,879
other end also has to be taking

547
00:23:41,590 --> 00:23:46,149
advantage of and it turns out you need

548
00:23:42,879 --> 00:23:48,029
support both in your your OS as well as

549
00:23:46,149 --> 00:23:52,178
in your application you actually have to

550
00:23:48,029 --> 00:23:53,590
write it into your code to use TFO so it

551
00:23:52,179 --> 00:23:55,740
is a little bit involved you can't just

552
00:23:53,590 --> 00:23:58,720
simply plug it in and make it work okay

553
00:23:55,740 --> 00:24:00,399
so so it's a little bit involved but

554
00:23:58,720 --> 00:24:02,759
anyway first when I looked at the

555
00:24:00,399 --> 00:24:06,189
authoritative side we were looking at

556
00:24:02,759 --> 00:24:07,570
which which servers were supporting it

557
00:24:06,190 --> 00:24:09,490
then we wanted to look at which clients

558
00:24:07,570 --> 00:24:10,779
so we have this wonderful set of data

559
00:24:09,490 --> 00:24:15,360
that we call the day-in-the-life

560
00:24:10,779 --> 00:24:18,970
or the dental data that is a 48-hour

561
00:24:15,360 --> 00:24:21,908
capture from queries that are going to

562
00:24:18,970 --> 00:24:23,440
the root server in this case giru was

563
00:24:21,909 --> 00:24:25,840
not involved all the other root servers

564
00:24:23,440 --> 00:24:30,460
we got some portion of their traffic

565
00:24:25,840 --> 00:24:33,459
during 48 hours so we had about 3.7

566
00:24:30,460 --> 00:24:36,970
million unique IPS that queried the root

567
00:24:33,460 --> 00:24:38,530
servers over TCP by the way this is a

568
00:24:36,970 --> 00:24:40,600
shout-out to DNS Oh arc who collects

569
00:24:38,530 --> 00:24:42,220
this data it is wonderful for us

570
00:24:40,600 --> 00:24:43,780
researchers to have a looking glass into

571
00:24:42,220 --> 00:24:46,120
what's actually going on on the Internet

572
00:24:43,780 --> 00:24:48,340
okay so we had a nearly 4 million unique

573
00:24:46,120 --> 00:24:51,850
IPS that queried over TCP at one time or

574
00:24:48,340 --> 00:24:54,879
another during those 48 hours and if you

575
00:24:51,850 --> 00:25:01,629
can see we had 89 of those clients that

576
00:24:54,880 --> 00:25:05,920
included the TFO option ok and 32 of

577
00:25:01,630 --> 00:25:08,350
those included a cookie but didn't send

578
00:25:05,920 --> 00:25:10,300
any data in the syn in other words this

579
00:25:08,350 --> 00:25:12,850
time it was the client not taking

580
00:25:10,300 --> 00:25:14,620
advantage of the TFO we have no idea why

581
00:25:12,850 --> 00:25:16,990
this is and we're trying to figure it

582
00:25:14,620 --> 00:25:18,820
out in our lab environment why this was

583
00:25:16,990 --> 00:25:20,920
and the other it was sort of like a

584
00:25:18,820 --> 00:25:22,510
shame on the server you know before when

585
00:25:20,920 --> 00:25:24,430
it wasn't responding and we did find

586
00:25:22,510 --> 00:25:26,920
some behavioral reasons why that was in

587
00:25:24,430 --> 00:25:29,380
this case in this case we have no idea

588
00:25:26,920 --> 00:25:30,790
why the client was not doing it but very

589
00:25:29,380 --> 00:25:32,500
and we moved back and studied this

590
00:25:30,790 --> 00:25:34,750
several times sort of scratching our

591
00:25:32,500 --> 00:25:36,730
heads do we do the analysis wrong and in

592
00:25:34,750 --> 00:25:38,890
fact we're able to verify that's what we

593
00:25:36,730 --> 00:25:42,550
saw in the data so this is our snapshot

594
00:25:38,890 --> 00:25:46,780
of the state of TCP fast open rest in

595
00:25:42,550 --> 00:25:49,330
peace okay all right so just in

596
00:25:46,780 --> 00:25:51,399
conclusion here we've talked a little

597
00:25:49,330 --> 00:25:52,960
bit about do T and do H and and some of

598
00:25:51,400 --> 00:25:54,160
the benefits that they offer as well as

599
00:25:52,960 --> 00:25:56,830
some of the issues that we're

600
00:25:54,160 --> 00:25:58,960
encountering here do TIA adoption is

601
00:25:56,830 --> 00:26:01,120
limited but does include some of the

602
00:25:58,960 --> 00:26:03,310
most well-known Public DNS services

603
00:26:01,120 --> 00:26:06,760
because that's what we had access to in

604
00:26:03,310 --> 00:26:08,740
our particular study ok let's see we're

605
00:26:06,760 --> 00:26:11,110
talking about talked about do age this

606
00:26:08,740 --> 00:26:14,170
is sort of speculative might surpass do

607
00:26:11,110 --> 00:26:15,760
T and adoption but and then TFO is the

608
00:26:14,170 --> 00:26:17,020
last thing we've studied and there are

609
00:26:15,760 --> 00:26:19,450
some serious questions about its

610
00:26:17,020 --> 00:26:22,290
deployment so that's all I have and I'm

611
00:26:19,450 --> 00:26:22,290
happy to take some questions

612
00:26:28,169 --> 00:26:33,610
and yuxun writer from nokia I just

613
00:26:32,049 --> 00:26:39,460
wanted to make a observation I've

614
00:26:33,610 --> 00:26:42,129
actually seen recently a new dns

615
00:26:39,460 --> 00:26:44,919
resolver implemented in browser though I

616
00:26:42,130 --> 00:26:47,789
think that one was using a Chrome native

617
00:26:44,919 --> 00:26:58,150
client not actual straight JavaScript

618
00:26:47,789 --> 00:27:00,190
Wow ok thanks so much appreciate that hi

619
00:26:58,150 --> 00:27:02,169
there London Comcast so are you gonna be

620
00:27:00,190 --> 00:27:03,720
redoing your study now that especially

621
00:27:02,169 --> 00:27:05,740
around the DOE stuff now that there is a

622
00:27:03,720 --> 00:27:08,620
growing number of door resolver be

623
00:27:05,740 --> 00:27:11,049
Comcast as a resolver as BT is open

624
00:27:08,620 --> 00:27:13,059
resolvers now so they're really starting

625
00:27:11,049 --> 00:27:15,879
to pop up all over the place yeah that's

626
00:27:13,059 --> 00:27:17,918
a great question Glen and it turns out

627
00:27:15,880 --> 00:27:19,990
that that we would love to one of the

628
00:27:17,919 --> 00:27:21,669
things that we need to do especially one

629
00:27:19,990 --> 00:27:24,850
of the limitations we had here was that

630
00:27:21,669 --> 00:27:26,500
we were dealing with that resolvers that

631
00:27:24,850 --> 00:27:28,959
you know we could access which meant

632
00:27:26,500 --> 00:27:31,360
they had to be open resolvers the next

633
00:27:28,960 --> 00:27:33,190
thing that would be great is we if we

634
00:27:31,360 --> 00:27:35,860
were you know especially in the case of

635
00:27:33,190 --> 00:27:38,080
Comcast and and Comcast has been so good

636
00:27:35,860 --> 00:27:39,969
to work with us in the past in terms of

637
00:27:38,080 --> 00:27:41,530
providing access to you know otherwise

638
00:27:39,970 --> 00:27:43,809
closed resolvers things that are open to

639
00:27:41,530 --> 00:27:45,280
their customers but in terms of getting

640
00:27:43,809 --> 00:27:47,289
sort of a representative view we would

641
00:27:45,280 --> 00:27:48,850
need other parties to help us do that so

642
00:27:47,289 --> 00:27:51,450
we could get a view not only of Public

643
00:27:48,850 --> 00:27:53,139
DNS services but also of the different

644
00:27:51,450 --> 00:27:55,570
organizational ones and this would be a

645
00:27:53,140 --> 00:27:58,299
great addition to to this work and

646
00:27:55,570 --> 00:28:00,039
related work I will point out that while

647
00:27:58,299 --> 00:28:02,740
a lot of people are getting used to

648
00:28:00,039 --> 00:28:04,450
dough and experimenting with it a lot of

649
00:28:02,740 --> 00:28:07,480
operators are providing their dough

650
00:28:04,450 --> 00:28:09,789
servers as open resolvers currently so

651
00:28:07,480 --> 00:28:12,220
ours are open to resolver at Comcast and

652
00:28:09,789 --> 00:28:15,010
I know BTS are as well open resolvers so

653
00:28:12,220 --> 00:28:17,169
you have some you have a window up to

654
00:28:15,010 --> 00:28:22,900
play ok I was not aware of that thank

655
00:28:17,169 --> 00:28:25,030
you so much for the information the TCP

656
00:28:22,900 --> 00:28:28,539
frost open you mentioned that you had to

657
00:28:25,030 --> 00:28:30,820
from the server side sorry could you get

658
00:28:28,539 --> 00:28:33,039
a little closer to the mic sorry with

659
00:28:30,820 --> 00:28:34,629
it's easy be fast open you mentioned on

660
00:28:33,039 --> 00:28:35,480
the server side not sending data back

661
00:28:34,630 --> 00:28:38,540
that you might

662
00:28:35,480 --> 00:28:40,850
you might have been load-balancing I'm

663
00:28:38,540 --> 00:28:43,040
not sharing the cookie monks though all

664
00:28:40,850 --> 00:28:45,050
the servers that are supporting a

665
00:28:43,040 --> 00:28:46,670
cluster we able to communicate what they

666
00:28:45,050 --> 00:28:50,930
need of the authority of servo operators

667
00:28:46,670 --> 00:28:53,810
- okay yeah there was there was a little

668
00:28:50,930 --> 00:28:55,370
part experimentation let me tell you a

669
00:28:53,810 --> 00:28:56,899
little bit more about my expertise I

670
00:28:55,370 --> 00:28:59,209
didn't I didn't have a slide on this

671
00:28:56,900 --> 00:29:01,730
sort of deliberately because we're still

672
00:28:59,210 --> 00:29:04,220
investigating this but one of the places

673
00:29:01,730 --> 00:29:05,960
that we did that we did our

674
00:29:04,220 --> 00:29:09,290
experimentation with in terms of TCP

675
00:29:05,960 --> 00:29:11,060
fast open they had a single IP address

676
00:29:09,290 --> 00:29:12,770
that we're going to and when you asked

677
00:29:11,060 --> 00:29:15,139
that IP address let's say we gave it a

678
00:29:12,770 --> 00:29:18,110
thousand queries out of those 1,000

679
00:29:15,140 --> 00:29:20,570
queries over TCP you know brand new TCP

680
00:29:18,110 --> 00:29:22,310
connections there was a finite number of

681
00:29:20,570 --> 00:29:23,500
cookies that were so we yeah we're

682
00:29:22,310 --> 00:29:27,500
actually able to see that they were

683
00:29:23,500 --> 00:29:28,700
load-balancing to 80 exactly 80 backends

684
00:29:27,500 --> 00:29:30,350
you know and there there may have been

685
00:29:28,700 --> 00:29:33,950
more backends but at least in terms of

686
00:29:30,350 --> 00:29:36,139
TCP they were just not being sticky

687
00:29:33,950 --> 00:29:39,410
in terms of subsequent clinic

688
00:29:36,140 --> 00:29:40,580
connections now that isn't the answer to

689
00:29:39,410 --> 00:29:44,530
your question you asked did we

690
00:29:40,580 --> 00:29:47,929
communicate with with the operators and

691
00:29:44,530 --> 00:29:49,760
the answer is we have casually conversed

692
00:29:47,930 --> 00:29:51,920
with E with the operators about that

693
00:29:49,760 --> 00:29:53,030
we're sort of studying at just a little

694
00:29:51,920 --> 00:29:55,030
bit more because we want to find out

695
00:29:53,030 --> 00:29:57,350
what more we can learn about that from

696
00:29:55,030 --> 00:30:00,710
other operators that are that have

697
00:29:57,350 --> 00:30:02,360
similar configurations and it's not

698
00:30:00,710 --> 00:30:05,780
really hurting anybody at this point so

699
00:30:02,360 --> 00:30:07,550
it's sort of this anomaly that we want

700
00:30:05,780 --> 00:30:09,020
to take advantage of a little bit not in

701
00:30:07,550 --> 00:30:12,350
a bad way but in a measurement sort of

702
00:30:09,020 --> 00:30:14,180
way to understand a little bit that

703
00:30:12,350 --> 00:30:16,010
anyway that's that's the best answer I

704
00:30:14,180 --> 00:30:17,360
can give at the moment you know if it

705
00:30:16,010 --> 00:30:18,650
were something like a security

706
00:30:17,360 --> 00:30:20,060
vulnerability or something like that

707
00:30:18,650 --> 00:30:21,950
then we'd certainly be on top of it and

708
00:30:20,060 --> 00:30:24,290
and report that to them but it's sort of

709
00:30:21,950 --> 00:30:25,940
a nuance that isn't really hurting that

710
00:30:24,290 --> 00:30:27,080
much so so we're letting it linger a

711
00:30:25,940 --> 00:30:32,450
little bit while we communicate with

712
00:30:27,080 --> 00:30:38,070
them a fair answer okay any other

713
00:30:32,450 --> 00:30:40,490
questions all right Thank you very

714
00:30:38,070 --> 00:30:40,490
appreciate that

