1
00:00:00,030 --> 00:00:05,549
good afternoon my name is Rita I'm a

2
00:00:02,820 --> 00:00:08,209
development manager in Microsoft working

3
00:00:05,549 --> 00:00:10,860
on Sonic today I'm gonna talk about

4
00:00:08,210 --> 00:00:13,889
Sonic obviously I'll give you a full

5
00:00:10,860 --> 00:00:16,500
picture what it is how it originated

6
00:00:13,889 --> 00:00:22,380
from Microsoft what challenges are being

7
00:00:16,500 --> 00:00:35,519
soft and how it has been involved so why

8
00:00:22,380 --> 00:00:39,260
do we need sonic Microsoft operates our

9
00:00:35,520 --> 00:00:42,059
global set of data centers globally

10
00:00:39,260 --> 00:00:44,839
across a wide area network this

11
00:00:42,059 --> 00:00:47,280
represents a multi-billion dollar bet

12
00:00:44,840 --> 00:00:49,489
that means that we are needing to

13
00:00:47,280 --> 00:00:54,899
deliver services with high availability

14
00:00:49,489 --> 00:01:00,000
and serviceability to our customers the

15
00:00:54,899 --> 00:01:02,609
customers represents the trust on us who

16
00:01:00,000 --> 00:01:06,030
holds the applications in a show compute

17
00:01:02,609 --> 00:01:06,900
network as long as internal customers

18
00:01:06,030 --> 00:01:12,930
such as Bing

19
00:01:06,900 --> 00:01:15,030
office 365 so having a network who's

20
00:01:12,930 --> 00:01:17,310
always up it's something that we care a

21
00:01:15,030 --> 00:01:19,049
lot every minute every day and we see

22
00:01:17,310 --> 00:01:27,960
Sonic as a key part of this to

23
00:01:19,049 --> 00:01:29,970
accomplish this critical mission with

24
00:01:27,960 --> 00:01:32,729
the sector desegregated the network

25
00:01:29,970 --> 00:01:36,119
through sonic what does that mean is

26
00:01:32,729 --> 00:01:42,030
that we are able to choose different

27
00:01:36,119 --> 00:01:45,240
platform by having a set of api's using

28
00:01:42,030 --> 00:01:47,540
the api's in Sonic it allows us freedom

29
00:01:45,240 --> 00:01:51,869
to choose different platform as well as

30
00:01:47,540 --> 00:01:54,000
different software components managing a

31
00:01:51,869 --> 00:01:56,189
switch it's never just a standalone

32
00:01:54,000 --> 00:02:00,180
switch we need to manage many many

33
00:01:56,189 --> 00:02:01,559
switches in a huge network and therefore

34
00:02:00,180 --> 00:02:04,530
we need a system which is fully

35
00:02:01,560 --> 00:02:07,939
automated and easy to upgrade and easy

36
00:02:04,530 --> 00:02:07,939
to employ to deploy

37
00:02:10,008 --> 00:02:15,260
having a reliable network enables us to

38
00:02:12,780 --> 00:02:24,120
have fast technology evolution as well

39
00:02:15,260 --> 00:02:30,090
so that's the goals of sonic let me give

40
00:02:24,120 --> 00:02:32,579
a quick overview of what Sonic is there

41
00:02:30,090 --> 00:02:35,340
are three four takeaways for you first

42
00:02:32,579 --> 00:02:38,040
sonic is an open source network OS

43
00:02:35,340 --> 00:02:41,730
running on top of Linux so that you

44
00:02:38,040 --> 00:02:48,629
could use the familiar OS and familiar

45
00:02:41,730 --> 00:02:51,420
CEO eyes on your hammers second we have

46
00:02:48,629 --> 00:02:53,909
a switch abstraction interface course ID

47
00:02:51,420 --> 00:02:57,869
which allow something to be a second

48
00:02:53,909 --> 00:03:00,929
gnostics so that's very important third

49
00:02:57,870 --> 00:03:03,439
it has that weight stack which are

50
00:03:00,930 --> 00:03:07,530
containerized what that means is that

51
00:03:03,439 --> 00:03:10,769
the states are isolated and it allows us

52
00:03:07,530 --> 00:03:15,690
to be able to customize and extends it

53
00:03:10,769 --> 00:03:18,120
to our scenarios I thought there are

54
00:03:15,690 --> 00:03:21,510
reach two lengths based on the open

55
00:03:18,120 --> 00:03:23,519
sources in the industry and you could

56
00:03:21,510 --> 00:03:26,519
run different types of choose for

57
00:03:23,519 --> 00:03:32,400
example and SIBO kubernetes on top of

58
00:03:26,519 --> 00:03:34,530
Sonic so what it's I traditionally you

59
00:03:32,400 --> 00:03:37,139
know traditional network OS with

60
00:03:34,530 --> 00:03:39,359
different types of basics because they

61
00:03:37,139 --> 00:03:42,209
have different SDK that means that you

62
00:03:39,359 --> 00:03:44,310
need to have different ways to talk to

63
00:03:42,209 --> 00:03:47,250
them website and that's stretching

64
00:03:44,310 --> 00:03:49,199
interface the control brain software

65
00:03:47,250 --> 00:03:55,260
could talk to all the different types of

66
00:03:49,199 --> 00:03:59,790
faces in the same way so size is

67
00:03:55,260 --> 00:04:02,358
basically a set of api's which using the

68
00:03:59,790 --> 00:04:05,040
crop operational operations offer

69
00:04:02,359 --> 00:04:09,659
extensible entity attribute value data

70
00:04:05,040 --> 00:04:11,879
model essentially we define reference

71
00:04:09,659 --> 00:04:14,399
data playing behavior all the different

72
00:04:11,879 --> 00:04:17,060
types of Asics so even though different

73
00:04:14,400 --> 00:04:20,480
Asics might have slightly different

74
00:04:17,060 --> 00:04:24,050
personality but we will unify them so

75
00:04:20,480 --> 00:04:26,180
that there is a well determined behavior

76
00:04:24,050 --> 00:04:28,400
which is the same packet processing

77
00:04:26,180 --> 00:04:31,130
pipeline so what that means is that when

78
00:04:28,400 --> 00:04:33,830
the packet is entering this logical

79
00:04:31,130 --> 00:04:35,810
pipeline pipeline we know exactly how

80
00:04:33,830 --> 00:04:39,020
it's being processed and how it's being

81
00:04:35,810 --> 00:04:41,810
forwarded out this way the narrow

82
00:04:39,020 --> 00:04:45,469
application engineers can focus on their

83
00:04:41,810 --> 00:04:48,740
business needs without worrying what is

84
00:04:45,470 --> 00:04:51,530
different amount of an ASIC since the

85
00:04:48,740 --> 00:05:00,860
introduction of Sai in 2015

86
00:04:51,530 --> 00:05:03,409
oops we have seen significant future

87
00:05:00,860 --> 00:05:11,720
growth and panel growth around the sign

88
00:05:03,410 --> 00:05:14,420
community so I also give a quick

89
00:05:11,720 --> 00:05:18,940
overview of the sonic software and

90
00:05:14,420 --> 00:05:22,340
high-level architecture so how I switch

91
00:05:18,940 --> 00:05:24,920
if we simplify has several main highway

92
00:05:22,340 --> 00:05:29,150
components mainly for example the fan

93
00:05:24,920 --> 00:05:33,800
power LED transceivers and of course the

94
00:05:29,150 --> 00:05:36,260
switching ASIC we use we like we

95
00:05:33,800 --> 00:05:39,410
leverage Linux to manage the platform

96
00:05:36,260 --> 00:05:41,630
components we work with the platform

97
00:05:39,410 --> 00:05:45,200
partners to Ingrid in integrated

98
00:05:41,630 --> 00:05:48,830
platform drivers with sonic Sayyidi eyes

99
00:05:45,200 --> 00:05:51,260
are supported by ASIC benders the saiga

100
00:05:48,830 --> 00:05:57,469
internally would call the or would use

101
00:05:51,260 --> 00:06:00,409
the ASIC SDK to program the ASIC sonic

102
00:05:57,470 --> 00:06:04,760
runs on top of Linux a lot of them in

103
00:06:00,410 --> 00:06:05,480
the Linux UNIX user space and here in

104
00:06:04,760 --> 00:06:07,099
the middle layer

105
00:06:05,480 --> 00:06:11,210
they are the key infrastructure

106
00:06:07,100 --> 00:06:14,180
components for Sonic there's a switch

107
00:06:11,210 --> 00:06:18,190
service state subsystem within it

108
00:06:14,180 --> 00:06:20,840
there's a orchestration agent or agent

109
00:06:18,190 --> 00:06:23,410
he interfaces with many there were

110
00:06:20,840 --> 00:06:26,150
applications PGP being part of it and

111
00:06:23,410 --> 00:06:29,960
then he pushes the information

112
00:06:26,150 --> 00:06:32,380
southbound the cell phone interface is

113
00:06:29,960 --> 00:06:36,570
essentially an ASIC TV

114
00:06:32,380 --> 00:06:39,820
implemented as a form of Redis database

115
00:06:36,570 --> 00:06:41,950
then on the right side there is a st. e

116
00:06:39,820 --> 00:06:45,520
subsystem which will receive the

117
00:06:41,950 --> 00:06:54,630
information and then use AI api's to

118
00:06:45,520 --> 00:06:57,460
program the switching ASIC there's also

119
00:06:54,630 --> 00:07:00,880
libraries implemented in C purpose and

120
00:06:57,460 --> 00:07:03,789
Python which are represent all of the

121
00:07:00,880 --> 00:07:06,219
rayless that Redis database so that

122
00:07:03,790 --> 00:07:08,920
users could use those libraries to

123
00:07:06,220 --> 00:07:13,150
interact with the Redis database if they

124
00:07:08,920 --> 00:07:16,930
prefer so the subsystems in Sainik don't

125
00:07:13,150 --> 00:07:19,359
send messages to each other directly the

126
00:07:16,930 --> 00:07:21,910
messaging system is built upon the

127
00:07:19,360 --> 00:07:25,870
pops-up model with the Redis database

128
00:07:21,910 --> 00:07:28,240
and with this we are able to reduce our

129
00:07:25,870 --> 00:07:30,130
amount of messages that I exchanged

130
00:07:28,240 --> 00:07:31,870
directly that are otherwise has

131
00:07:30,130 --> 00:07:35,080
exchanged directly between subsystems

132
00:07:31,870 --> 00:07:38,020
and we could avoid race conditions that

133
00:07:35,080 --> 00:07:43,630
could easily happen you know around us

134
00:07:38,020 --> 00:07:45,390
on switches another key foundation of

135
00:07:43,630 --> 00:07:53,050
sonic that I must talk about it's

136
00:07:45,390 --> 00:07:56,260
containers there are many benefits of

137
00:07:53,050 --> 00:07:57,880
containers which are well established in

138
00:07:56,260 --> 00:08:01,630
terms of software engineering and

139
00:07:57,880 --> 00:08:05,110
deployment it gives clear clean

140
00:08:01,630 --> 00:08:07,480
isolations of the boundary software

141
00:08:05,110 --> 00:08:11,680
configuration settings and packaging

142
00:08:07,480 --> 00:08:15,580
that are required packaged in a

143
00:08:11,680 --> 00:08:18,280
containers and then it can give us a and

144
00:08:15,580 --> 00:08:22,810
then you could easily deploy it by

145
00:08:18,280 --> 00:08:25,479
orchestration systems it's also

146
00:08:22,810 --> 00:08:28,450
transactional if you are running one

147
00:08:25,480 --> 00:08:31,090
version of container you have a set of

148
00:08:28,450 --> 00:08:34,360
this size state and you can move it from

149
00:08:31,090 --> 00:08:37,809
this decide States to another set of the

150
00:08:34,360 --> 00:08:41,169
side State fairly easily through again

151
00:08:37,809 --> 00:08:42,010
the orchestration system and it's

152
00:08:41,169 --> 00:08:45,730
universal

153
00:08:42,010 --> 00:08:49,060
so we're really good at running software

154
00:08:45,730 --> 00:08:51,460
on servers if we are able to use the

155
00:08:49,060 --> 00:08:54,130
same level of excellence and discipline

156
00:08:51,460 --> 00:08:56,710
on our switches we'll be able to provide

157
00:08:54,130 --> 00:08:58,900
a very available network to our

158
00:08:56,710 --> 00:09:03,040
customers and again that is the job

159
00:08:58,900 --> 00:09:06,100
number one for a cloud datacenter so if

160
00:09:03,040 --> 00:09:10,900
we put containerization into Sonic what

161
00:09:06,100 --> 00:09:14,890
does that means we can upgrade the

162
00:09:10,900 --> 00:09:17,500
software we can upgrade a feature by

163
00:09:14,890 --> 00:09:19,960
upgrading a container so that's the

164
00:09:17,500 --> 00:09:22,990
surface ability and we could also add

165
00:09:19,960 --> 00:09:25,930
new feature by adding container so we

166
00:09:22,990 --> 00:09:29,110
can add one container into existing set

167
00:09:25,930 --> 00:09:32,469
or we could replace one container with

168
00:09:29,110 --> 00:09:35,650
another container fairly seamlessly and

169
00:09:32,470 --> 00:09:37,900
again in our open source community we

170
00:09:35,650 --> 00:09:39,250
have developers with different

171
00:09:37,900 --> 00:09:43,540
development environment

172
00:09:39,250 --> 00:09:45,970
so we've containers we can take software

173
00:09:43,540 --> 00:09:49,689
that are developing that are developed

174
00:09:45,970 --> 00:09:53,140
in different environment and I'll talk

175
00:09:49,690 --> 00:09:58,560
more about that and then we can deploy

176
00:09:53,140 --> 00:10:01,210
it across our switches across platforms

177
00:09:58,560 --> 00:10:02,319
so this is the example for if I'm a

178
00:10:01,210 --> 00:10:04,120
rolling stack

179
00:10:02,320 --> 00:10:08,530
there are many routing stacks out there

180
00:10:04,120 --> 00:10:10,540
and frankly you probably cannot get one

181
00:10:08,530 --> 00:10:13,750
routing stack that fits all the

182
00:10:10,540 --> 00:10:16,329
different users preferences so with

183
00:10:13,750 --> 00:10:19,510
container were able to support different

184
00:10:16,330 --> 00:10:21,910
types of routing stack without forcing

185
00:10:19,510 --> 00:10:24,220
the same development environment for

186
00:10:21,910 --> 00:10:28,600
example one could be developed with Red

187
00:10:24,220 --> 00:10:31,900
Hat Sonic it's in developed with Debian

188
00:10:28,600 --> 00:10:35,740
and then perhaps some developed with BSD

189
00:10:31,900 --> 00:10:40,090
etc another thing it's a we could also

190
00:10:35,740 --> 00:10:45,790
take a container without having a source

191
00:10:40,090 --> 00:10:48,490
code so we've container we can choose

192
00:10:45,790 --> 00:10:51,699
which container that fits our which

193
00:10:48,490 --> 00:10:54,100
which stack that fits our needs on an

194
00:10:51,700 --> 00:10:56,080
individual basis without forcing the

195
00:10:54,100 --> 00:11:00,330
commonality of development environment

196
00:10:56,080 --> 00:11:00,330
or even the base in

197
00:11:00,850 --> 00:11:05,950
another example is the monitoring system

198
00:11:03,160 --> 00:11:08,319
traditionally you might have SNMP

199
00:11:05,950 --> 00:11:12,610
running in your network right so we have

200
00:11:08,320 --> 00:11:15,220
SNMP as a dock in Sonic all the time you

201
00:11:12,610 --> 00:11:17,470
might be working on a telemetry solution

202
00:11:15,220 --> 00:11:21,339
in the in the network so you can have

203
00:11:17,470 --> 00:11:22,990
both simultaneously running in Sonic and

204
00:11:21,339 --> 00:11:26,470
then after you if you have fully

205
00:11:22,990 --> 00:11:30,339
migrated the system into telemetry you

206
00:11:26,470 --> 00:11:32,110
can check out the SNMP talker and just

207
00:11:30,339 --> 00:11:40,180
have the telemetry without affecting the

208
00:11:32,110 --> 00:11:43,750
rest of the stack in the sonic sonic

209
00:11:40,180 --> 00:11:45,819
it's designed for both our engineers and

210
00:11:43,750 --> 00:11:49,750
software engineers if you are familiar

211
00:11:45,820 --> 00:11:52,269
with the router style theorize operating

212
00:11:49,750 --> 00:11:55,360
sonic it's just like operating switches

213
00:11:52,269 --> 00:11:57,730
that you're used to it is also a

214
00:11:55,360 --> 00:12:00,670
software platform and Anita is rather

215
00:11:57,730 --> 00:12:05,190
database associated with the switch

216
00:12:00,670 --> 00:12:05,189
state service that I just talked about

217
00:12:05,970 --> 00:12:11,920
you could use a lot of the standard

218
00:12:08,829 --> 00:12:14,260
talker commands - in Iraq with the

219
00:12:11,920 --> 00:12:17,110
talkers of the Sonic you could lock into

220
00:12:14,260 --> 00:12:19,510
one of the talker or you could list all

221
00:12:17,110 --> 00:12:23,140
the talkers that are available here I

222
00:12:19,510 --> 00:12:25,680
share some screenshots for example the

223
00:12:23,140 --> 00:12:29,829
database container host the Redis

224
00:12:25,680 --> 00:12:34,239
database the BGP talk host a routing

225
00:12:29,829 --> 00:12:39,310
stack then you could walk into the PTV

226
00:12:34,240 --> 00:12:41,589
talker to see the PGP status or to see

227
00:12:39,310 --> 00:12:43,018
what is the vgb configuration if you

228
00:12:41,589 --> 00:12:48,959
like you could still use the traditional

229
00:12:43,019 --> 00:12:48,959
rather see Ice Show IP v GP for example

230
00:12:49,170 --> 00:12:55,630
and you could also log into the database

231
00:12:52,319 --> 00:13:00,189
docker to see what actually how the

232
00:12:55,630 --> 00:13:02,589
Rothery stored inside the database many

233
00:13:00,190 --> 00:13:07,540
of the CEO is in Sonic are incremented

234
00:13:02,589 --> 00:13:10,360
by our engineers who work with Sonic in

235
00:13:07,540 --> 00:13:12,279
a day-to-day basis they can have direct

236
00:13:10,360 --> 00:13:15,490
influence what and when

237
00:13:12,279 --> 00:13:23,589
Co is available to them just meet their

238
00:13:15,490 --> 00:13:26,620
needs so if you're interested here's a

239
00:13:23,589 --> 00:13:29,139
one-page how to view a sonic image the

240
00:13:26,620 --> 00:13:32,199
preparation is that you need a server or

241
00:13:29,139 --> 00:13:36,399
VM with least one terabytes of hotties

242
00:13:32,199 --> 00:13:39,420
running Ubuntu Linux 1604 or beyond and

243
00:13:36,399 --> 00:13:43,809
then you would want to install a Python

244
00:13:39,420 --> 00:13:46,809
installer and a ginger template for the

245
00:13:43,809 --> 00:13:51,189
Python related aspect and then you can

246
00:13:46,809 --> 00:13:55,779
go to the sonic hub to tack on chrome

247
00:13:51,189 --> 00:13:57,670
the sonic repos then you would do

248
00:13:55,779 --> 00:14:00,790
something make commands to configure the

249
00:13:57,670 --> 00:14:04,479
ASIC platform we organized the images

250
00:14:00,790 --> 00:14:07,990
based on a sec vendor and after you

251
00:14:04,480 --> 00:14:10,329
start to do let's say Mako then each

252
00:14:07,990 --> 00:14:13,180
module will come out a source code and

253
00:14:10,329 --> 00:14:18,128
generate the Debian packages and then we

254
00:14:13,180 --> 00:14:23,349
will further compile into talking images

255
00:14:18,129 --> 00:14:25,449
and then bundle into a single image you

256
00:14:23,350 --> 00:14:27,689
could go to our wiki to see more

257
00:14:25,449 --> 00:14:27,689
information

258
00:14:29,370 --> 00:14:35,040
so having an image is just one right how

259
00:14:31,890 --> 00:14:37,080
do we upgrade so sonic supports a warm

260
00:14:35,040 --> 00:14:41,189
boots feature what is one boot

261
00:14:37,080 --> 00:14:45,540
essentially is to be able to do a reboot

262
00:14:41,190 --> 00:14:47,460
or upgrade without downtime the high

263
00:14:45,540 --> 00:14:48,959
rate data playing disruption is less

264
00:14:47,460 --> 00:14:52,500
than a second Appalachian area many

265
00:14:48,960 --> 00:14:55,740
times were able to achieve without any

266
00:14:52,500 --> 00:14:58,500
time time for the data traffic with long

267
00:14:55,740 --> 00:15:02,520
reboot will reboot Linux OS and will

268
00:14:58,500 --> 00:15:05,100
reboot Sonic stack and the control plane

269
00:15:02,520 --> 00:15:08,430
will have a disruption of less than 90

270
00:15:05,100 --> 00:15:12,600
seconds meaning it will come back within

271
00:15:08,430 --> 00:15:18,109
90 seconds so then we avoid lack goes on

272
00:15:12,600 --> 00:15:20,760
and and also BGP won't go down and then

273
00:15:18,110 --> 00:15:22,200
and also we will use the VVD crystal

274
00:15:20,760 --> 00:15:25,830
restart so that the routing topology

275
00:15:22,200 --> 00:15:27,840
will not be impacted and stack is able

276
00:15:25,830 --> 00:15:30,890
to learn the route quickly when it comes

277
00:15:27,840 --> 00:15:35,250
back so when the stack comes back then

278
00:15:30,890 --> 00:15:39,689
we will compute the differences between

279
00:15:35,250 --> 00:15:42,570
the HFA ethic state and the desai state

280
00:15:39,690 --> 00:15:45,660
and then through the reconciliation then

281
00:15:42,570 --> 00:15:48,990
we can achieve no zero downtime of or

282
00:15:45,660 --> 00:15:53,100
less than a second data playing downtime

283
00:15:48,990 --> 00:15:56,430
across imagery boots so having a warm

284
00:15:53,100 --> 00:16:00,690
reboot capability it's very helpful for

285
00:15:56,430 --> 00:16:04,640
an important for providing a high

286
00:16:00,690 --> 00:16:04,640
availability network to our customers so

287
00:16:06,080 --> 00:16:12,390
able to image and up able to upload

288
00:16:09,720 --> 00:16:16,730
images just one of the challenge right

289
00:16:12,390 --> 00:16:20,670
and I want to walk through a typical

290
00:16:16,730 --> 00:16:22,560
data center network topology so

291
00:16:20,670 --> 00:16:26,640
Microsoft has been doing this for many

292
00:16:22,560 --> 00:16:29,010
many years down at the bottom we have a

293
00:16:26,640 --> 00:16:31,350
lot of servers and then the service are

294
00:16:29,010 --> 00:16:34,290
connected to what we call it Israel or

295
00:16:31,350 --> 00:16:36,750
RAC levels which is the rack level

296
00:16:34,290 --> 00:16:39,480
switches are connected to tier 1

297
00:16:36,750 --> 00:16:41,430
switches are what we call leaf level

298
00:16:39,480 --> 00:16:43,020
switches and then the leaf level

299
00:16:41,430 --> 00:16:46,589
switches will be

300
00:16:43,020 --> 00:16:49,710
connected to the tier twos spine

301
00:16:46,590 --> 00:16:53,580
switches through redundant links the

302
00:16:49,710 --> 00:16:55,950
tier two spine switches will have mashed

303
00:16:53,580 --> 00:16:59,630
redundant links connected to other data

304
00:16:55,950 --> 00:17:07,440
centers via the regional spine or tier 3

305
00:16:59,630 --> 00:17:10,709
regional spine switches Sonic is

306
00:17:07,440 --> 00:17:18,690
deployed in cheer zero and here one

307
00:17:10,709 --> 00:17:20,910
switches in the network so the never

308
00:17:18,690 --> 00:17:24,000
it's large and debugging a data center

309
00:17:20,910 --> 00:17:27,270
network it's a daunting task and I'll

310
00:17:24,000 --> 00:17:29,760
share an excerpt of previous

311
00:17:27,270 --> 00:17:33,139
presentation from Microsoft as well

312
00:17:29,760 --> 00:17:35,190
so data centers are large and complex

313
00:17:33,140 --> 00:17:38,040
easily we could have hundreds and

314
00:17:35,190 --> 00:17:39,870
thousands of low-cost devices but

315
00:17:38,040 --> 00:17:43,940
running complicated software stack and

316
00:17:39,870 --> 00:17:48,360
then in a daily basis we could have

317
00:17:43,940 --> 00:17:51,450
complex or some packet drops or various

318
00:17:48,360 --> 00:17:54,780
types of issues right like I could drop

319
00:17:51,450 --> 00:17:57,800
latency low throughput in different part

320
00:17:54,780 --> 00:18:01,050
of the network so existing tools are

321
00:17:57,800 --> 00:18:03,720
often insufficient the common tools are

322
00:18:01,050 --> 00:18:07,580
checking hunters pain trace wrong etc

323
00:18:03,720 --> 00:18:07,580
and I walk through why

324
00:18:09,430 --> 00:18:11,490
you

325
00:18:14,620 --> 00:18:16,679
you

326
00:18:17,130 --> 00:18:19,190
you

327
00:18:37,370 --> 00:18:43,799
we could have applications on the

328
00:18:40,830 --> 00:18:46,168
client-side send request to service on

329
00:18:43,799 --> 00:18:51,899
the right side and sometimes they get to

330
00:18:46,169 --> 00:19:01,649
get time out and then the application

331
00:18:51,899 --> 00:19:05,760
will retry right and then the retry it

332
00:19:01,649 --> 00:19:08,340
may may be successful and then we wonder

333
00:19:05,760 --> 00:19:10,679
why then the operators will then try to

334
00:19:08,340 --> 00:19:13,529
troubleshoot what is the intermittent

335
00:19:10,679 --> 00:19:15,720
time Oh happened and then we tracked us

336
00:19:13,529 --> 00:19:17,760
check the switch counters and very

337
00:19:15,720 --> 00:19:21,330
common there are no that significant

338
00:19:17,760 --> 00:19:26,639
drops and then they might try using

339
00:19:21,330 --> 00:19:28,710
trace row and then even after hours it's

340
00:19:26,639 --> 00:19:32,189
actually still not possible to pinpoint

341
00:19:28,710 --> 00:19:34,789
where exactly that transient situation

342
00:19:32,190 --> 00:19:38,570
happened and also and also trace route

343
00:19:34,789 --> 00:19:41,220
is unable to trace every single path and

344
00:19:38,570 --> 00:19:43,950
every single links it cannot trace

345
00:19:41,220 --> 00:19:52,260
beyond links length beyond or low

346
00:19:43,950 --> 00:19:54,710
balancer another example is latency

347
00:19:52,260 --> 00:19:54,710
spikes

348
00:19:58,390 --> 00:20:04,789
when there's a latency spy happened

349
00:20:01,490 --> 00:20:07,160
then again the never engineers or

350
00:20:04,789 --> 00:20:10,190
operators and try to figure out try to

351
00:20:07,160 --> 00:20:13,309
troubleshoot the existing queue size for

352
00:20:10,190 --> 00:20:16,130
the marks of a switch I often to call

353
00:20:13,309 --> 00:20:20,510
screen it can't we cannot Co relate to

354
00:20:16,130 --> 00:20:22,730
specific affected flow again the common

355
00:20:20,510 --> 00:20:27,260
tools like ping and traceroute I cannot

356
00:20:22,730 --> 00:20:29,720
measure the perhaps late delay so we

357
00:20:27,260 --> 00:20:33,890
have a solution however flow ever flow

358
00:20:29,720 --> 00:20:36,909
was joint effort from Microsoft and

359
00:20:33,890 --> 00:20:42,169
Prince University and UC Santa Barbara

360
00:20:36,909 --> 00:20:44,390
and it's also supported in sonic we

361
00:20:42,169 --> 00:20:46,940
program a set of match and mirror routes

362
00:20:44,390 --> 00:20:52,669
into the sonic switch into Sonic

363
00:20:46,940 --> 00:20:57,620
switches the switches will sample traces

364
00:20:52,669 --> 00:21:00,260
of traffic into a set of connectors then

365
00:20:57,620 --> 00:21:03,139
the set of collectors will filter and

366
00:21:00,260 --> 00:21:06,950
aggregate those traces into a

367
00:21:03,140 --> 00:21:08,590
distributed storage we will have a flow

368
00:21:06,950 --> 00:21:13,539
controller with a number of applications

369
00:21:08,590 --> 00:21:16,520
the controller will expose the curie api

370
00:21:13,539 --> 00:21:19,970
Curie's by a set of API to the

371
00:21:16,520 --> 00:21:24,080
applications one of the analysis

372
00:21:19,970 --> 00:21:28,429
application is packet drop debugger when

373
00:21:24,080 --> 00:21:31,090
there is any packet drop happen anywhere

374
00:21:28,429 --> 00:21:35,470
in the network it can quickly identify

375
00:21:31,090 --> 00:21:39,740
which might be the suspected switch and

376
00:21:35,470 --> 00:21:42,380
then with the guided proper then we can

377
00:21:39,740 --> 00:21:44,000
further confirm which accepts which is

378
00:21:42,380 --> 00:21:48,110
dropping packet and which specific

379
00:21:44,000 --> 00:21:52,610
interface and also using the ever flow

380
00:21:48,110 --> 00:21:56,120
solution for latency speights using the

381
00:21:52,610 --> 00:22:00,500
solution you can also identify or

382
00:21:56,120 --> 00:22:02,418
confirm way ferry the latency occur so

383
00:22:00,500 --> 00:22:07,580
this is one example how we integrate

384
00:22:02,419 --> 00:22:10,059
sonic into our data centers to solve the

385
00:22:07,580 --> 00:22:10,059
challenges

386
00:22:12,970 --> 00:22:19,429
so over the years we've added a number

387
00:22:16,100 --> 00:22:24,080
of features in the sonic of the first

388
00:22:19,429 --> 00:22:27,279
year 2016 when Sonic was first first

389
00:22:24,080 --> 00:22:30,678
released it supports basically a 2/3

390
00:22:27,279 --> 00:22:32,630
functionality with a solid docker

391
00:22:30,679 --> 00:22:35,899
container architecture and a Raider

392
00:22:32,630 --> 00:22:38,299
style database in a second year we added

393
00:22:35,899 --> 00:22:41,959
more advanced features such as our DMA

394
00:22:38,299 --> 00:22:45,460
support ipv6 doctor management via swarm

395
00:22:41,960 --> 00:22:49,129
and then the third year we added

396
00:22:45,460 --> 00:22:51,289
streaming telemetry pick up the config

397
00:22:49,129 --> 00:22:53,059
database and edit the warm reboot

398
00:22:51,289 --> 00:22:56,710
feature which I just talked about

399
00:22:53,059 --> 00:23:00,620
there's also virtualization features

400
00:22:56,710 --> 00:23:03,379
last year we spent a lot of efforts to

401
00:23:00,620 --> 00:23:07,969
add the advanced management framework

402
00:23:03,379 --> 00:23:09,799
with contributions from the community we

403
00:23:07,970 --> 00:23:12,980
improved the development and test

404
00:23:09,799 --> 00:23:17,059
experiences and continue to add more

405
00:23:12,980 --> 00:23:22,940
feature-rich features such as net in

406
00:23:17,059 --> 00:23:26,658
terms of ASIC and platform in the first

407
00:23:22,940 --> 00:23:29,809
year Sonic is supported in a few fact

408
00:23:26,659 --> 00:23:31,879
platforms with a few Asics after four

409
00:23:29,809 --> 00:23:34,460
years of contribution and efforts by the

410
00:23:31,879 --> 00:23:38,330
community members now Sonic is supported

411
00:23:34,460 --> 00:23:45,799
in 92 platforms and most as well as most

412
00:23:38,330 --> 00:23:48,168
advanced chip set it's actually a

413
00:23:45,799 --> 00:23:51,200
collaborative effort by the sonic

414
00:23:48,169 --> 00:23:54,620
community we appreciate the members who

415
00:23:51,200 --> 00:23:57,860
stay with us such as Rock'em Dow Mara

416
00:23:54,620 --> 00:24:00,350
Knox and we continue to add members in

417
00:23:57,860 --> 00:24:03,939
our past few few over the years last

418
00:24:00,350 --> 00:24:09,759
year 13 organizations joined including

419
00:24:03,940 --> 00:24:09,759
Juniper by - a few research institutions

420
00:24:12,759 --> 00:24:17,190
Sonic

421
00:24:13,920 --> 00:24:19,400
an open community and we invite your

422
00:24:17,190 --> 00:24:23,820
participation

423
00:24:19,400 --> 00:24:25,770
go to our website there are user manual

424
00:24:23,820 --> 00:24:27,689
Quick Start Guide and then you can come

425
00:24:25,770 --> 00:24:31,710
to the community to participate in

426
00:24:27,690 --> 00:24:33,960
design reviews try out the software or

427
00:24:31,710 --> 00:24:36,090
hardware and then you could test and

428
00:24:33,960 --> 00:24:39,660
deploy and you might find but then you

429
00:24:36,090 --> 00:24:42,750
can also report the issues by working

430
00:24:39,660 --> 00:24:45,540
with the community and the partner

431
00:24:42,750 --> 00:24:48,750
ecosystem we're looking to rationalize

432
00:24:45,540 --> 00:24:49,260
the network networking today and into

433
00:24:48,750 --> 00:25:02,580
the future

434
00:24:49,260 --> 00:25:05,060
with sonic thank you any suggestion or

435
00:25:02,580 --> 00:25:05,060
questions

436
00:25:13,269 --> 00:25:18,679
thank you for protection question is

437
00:25:16,159 --> 00:25:20,929
half of hardware vendors you presented

438
00:25:18,679 --> 00:25:21,320
support in mental imagery in different

439
00:25:20,929 --> 00:25:23,330
firms

440
00:25:21,320 --> 00:25:25,850
I found Broadcom but just happen on

441
00:25:23,330 --> 00:25:28,730
Mellanox how do you plan to integrate it

442
00:25:25,850 --> 00:25:31,639
and enable people to consume this

443
00:25:28,730 --> 00:25:34,700
information in been telemetry I'm sorry

444
00:25:31,639 --> 00:25:38,449
can you repeat the question in been

445
00:25:34,700 --> 00:25:40,940
telemetry how do we invent ulema tree is

446
00:25:38,450 --> 00:25:43,610
that the question no hardware vendor

447
00:25:40,940 --> 00:25:45,919
that support Sony have their own

448
00:25:43,610 --> 00:25:48,439
implementations of invent ulema tree I

449
00:25:45,919 --> 00:25:52,850
found Broadcom what just happened on

450
00:25:48,440 --> 00:25:55,669
Mellanox in tempe on barefoot there are

451
00:25:52,850 --> 00:25:57,918
some cut being pushed into Cernik as of

452
00:25:55,669 --> 00:25:59,330
today actually but has this

453
00:25:57,919 --> 00:26:01,249
functionality but some clear how it's

454
00:25:59,330 --> 00:26:02,439
going to be exposed and how people can

455
00:26:01,249 --> 00:26:07,190
use it

456
00:26:02,440 --> 00:26:09,710
so actually in terms of telemetry there

457
00:26:07,190 --> 00:26:12,580
is actually this high document for

458
00:26:09,710 --> 00:26:15,710
telemetry in Sonic right and then

459
00:26:12,580 --> 00:26:18,350
typically as futurism implemental has

460
00:26:15,710 --> 00:26:23,499
two parts one is the sonic application

461
00:26:18,350 --> 00:26:27,980
side and then there is the side part so

462
00:26:23,499 --> 00:26:30,230
so we would work with vendors to support

463
00:26:27,980 --> 00:26:33,139
the SCI a P is for to expose the

464
00:26:30,230 --> 00:26:35,090
telemetry capability yeah

465
00:26:33,139 --> 00:26:37,939
is that address you it's very generic

466
00:26:35,090 --> 00:26:41,509
constable yeah so I mean telemetry has

467
00:26:37,940 --> 00:26:44,210
has a lot of has a lot right so but for

468
00:26:41,509 --> 00:26:46,820
example it's important to define the SCI

469
00:26:44,210 --> 00:26:48,740
api's for telemetry what are the

470
00:26:46,820 --> 00:26:52,850
information that needs to be Explorer

471
00:26:48,740 --> 00:26:56,210
can be exposed like and then it depends

472
00:26:52,850 --> 00:26:58,580
on the ASA capability as well but then

473
00:26:56,210 --> 00:27:01,309
the Sai a P I needs to be generic enough

474
00:26:58,580 --> 00:27:03,889
such that you can covers perhaps a

475
00:27:01,309 --> 00:27:08,649
unified or a union of all the

476
00:27:03,889 --> 00:27:08,649
capabilities okay thank you yeah

477
00:27:14,190 --> 00:27:17,190
okay

