1
00:00:00,659 --> 00:00:04,710
good afternoon folks and thank you for

2
00:00:03,060 --> 00:00:07,820
sticking around on Wednesday afternoon

3
00:00:04,710 --> 00:00:10,610
my name is Bruce MacDougall I'm a

4
00:00:07,820 --> 00:00:13,320
solution systems architect for Francisco

5
00:00:10,610 --> 00:00:16,259
which means essentially I'm a few rungs

6
00:00:13,320 --> 00:00:18,180
down the ladder from Cisco fellow but

7
00:00:16,260 --> 00:00:20,580
I'm here as a substitute speaker for

8
00:00:18,180 --> 00:00:22,529
Clarence who's whose flight got canceled

9
00:00:20,580 --> 00:00:26,310
so he's unable to attend

10
00:00:22,529 --> 00:00:28,830
Clarence sends his regrets so with that

11
00:00:26,310 --> 00:00:32,449
said this is sr v6 update

12
00:00:28,830 --> 00:00:36,449
technology deployment and use cases

13
00:00:32,450 --> 00:00:37,860
first we wanted to acknowledge partners

14
00:00:36,450 --> 00:00:39,090
in this effort over the last couple of

15
00:00:37,860 --> 00:00:43,079
years we've been working with several

16
00:00:39,090 --> 00:00:45,510
lead operators and it's been a terrific

17
00:00:43,079 --> 00:00:46,920
partnership we've really appreciate

18
00:00:45,510 --> 00:00:49,410
their feedback in their embrace of the

19
00:00:46,920 --> 00:00:53,039
technology we've also been working with

20
00:00:49,410 --> 00:00:55,349
a kind of an expanding set of ecosystem

21
00:00:53,039 --> 00:00:58,379
partners so this is a set of hardware

22
00:00:55,350 --> 00:01:00,960
vendors that have invested in segment

23
00:00:58,379 --> 00:01:02,849
routing and sr v6 implementations in

24
00:01:00,960 --> 00:01:04,710
their in their equipment as well as a

25
00:01:02,850 --> 00:01:06,960
number of academic and open source

26
00:01:04,709 --> 00:01:09,240
partners that have made investments in

27
00:01:06,960 --> 00:01:12,119
segment routing in in some applications

28
00:01:09,240 --> 00:01:13,770
and open source tools finally a thank

29
00:01:12,119 --> 00:01:14,909
you to the Cisco segment routing team

30
00:01:13,770 --> 00:01:19,320
for all their hard work over the last

31
00:01:14,909 --> 00:01:20,640
couple years we did want to mention that

32
00:01:19,320 --> 00:01:22,860
an extended recording of this

33
00:01:20,640 --> 00:01:25,140
presentation will be available at Sigma

34
00:01:22,860 --> 00:01:28,200
routing net it should be posted either

35
00:01:25,140 --> 00:01:30,329
later today or tomorrow so what that

36
00:01:28,200 --> 00:01:33,210
said into the presentation itself a

37
00:01:30,329 --> 00:01:35,429
little bit of background review s our

38
00:01:33,210 --> 00:01:37,979
MPLS segment routing MPLS has become

39
00:01:35,430 --> 00:01:40,200
kind of de facto ipv4 solution and we've

40
00:01:37,979 --> 00:01:44,600
seen wide deployment and acceptance

41
00:01:40,200 --> 00:01:47,549
around the world segment routing is

42
00:01:44,600 --> 00:01:49,259
deployed across different market

43
00:01:47,549 --> 00:01:51,630
segments we see implementations and

44
00:01:49,259 --> 00:01:55,649
deployments in service provider web and

45
00:01:51,630 --> 00:01:57,509
enterprise and the bunch of logos at the

46
00:01:55,649 --> 00:01:59,909
bottom of the slide are here to

47
00:01:57,509 --> 00:02:02,479
illustrate just a few or a selection of

48
00:01:59,909 --> 00:02:05,219
the publicly announced implementations

49
00:02:02,479 --> 00:02:06,979
we expect this we figure this is

50
00:02:05,219 --> 00:02:09,119
actually kind of tip of the iceberg as

51
00:02:06,979 --> 00:02:11,599
these are just publicly announced

52
00:02:09,119 --> 00:02:11,599
deployments

53
00:02:11,819 --> 00:02:22,720
so but the talk to focus on s our v6 s

54
00:02:15,099 --> 00:02:23,950
our v6 is SR for ipv6 and the philosophy

55
00:02:22,720 --> 00:02:25,810
of segment routing from the very

56
00:02:23,950 --> 00:02:30,959
beginning has been simplicity and to

57
00:02:25,810 --> 00:02:33,940
simplify to simplify the stack SR v6

58
00:02:30,959 --> 00:02:37,480
builds upon this simplicity that we got

59
00:02:33,940 --> 00:02:40,060
from SR MPLS with SR MPLS the operator

60
00:02:37,480 --> 00:02:43,750
is able to remove the need for LDP and

61
00:02:40,060 --> 00:02:46,330
RSVP with SR v6 we also see the ability

62
00:02:43,750 --> 00:02:53,530
to start to remove other protocols and

63
00:02:46,330 --> 00:02:56,620
in in the control plane stack SR v6 as

64
00:02:53,530 --> 00:02:58,660
as an end-to-end ipv6 data plane offers

65
00:02:56,620 --> 00:03:01,390
the ability to move away from all of the

66
00:02:58,660 --> 00:03:03,609
the pro encapsulation stitching that

67
00:03:01,390 --> 00:03:06,250
occurs when you when IP v4 or

68
00:03:03,610 --> 00:03:08,349
when IP fabrics bump into MPLS fabrics

69
00:03:06,250 --> 00:03:11,829
it allows for the removal of in Ras

70
00:03:08,349 --> 00:03:15,130
option a b and c kind of stitching even

71
00:03:11,829 --> 00:03:17,709
the MPLS data plane and then sr v6 based

72
00:03:15,130 --> 00:03:20,440
overlays allow for moving away from kind

73
00:03:17,709 --> 00:03:23,440
of the the cluster of different IP

74
00:03:20,440 --> 00:03:26,130
overlays represented by like IP over UDP

75
00:03:23,440 --> 00:03:29,620
VX land and even network service headers

76
00:03:26,130 --> 00:03:32,350
so with sr v6 we get we get all of this

77
00:03:29,620 --> 00:03:34,900
potential simplification and a great

78
00:03:32,350 --> 00:03:37,690
deal of scale over before or over MPLS

79
00:03:34,900 --> 00:03:39,700
in addition to all that scale we're

80
00:03:37,690 --> 00:03:41,739
finding with the SR v6 network

81
00:03:39,700 --> 00:03:43,630
programming paradigm that we also see a

82
00:03:41,739 --> 00:03:48,609
significant like a big bump in

83
00:03:43,630 --> 00:03:50,079
functionality so SR v6 ecosystem that

84
00:03:48,609 --> 00:03:51,790
we've been working with and I should

85
00:03:50,079 --> 00:03:56,560
note that it's a growing ecosystem it's

86
00:03:51,790 --> 00:03:59,500
moving fast since about 2017 in March

87
00:03:56,560 --> 00:04:02,290
2017 were the first sort of meetings

88
00:03:59,500 --> 00:04:04,180
with the lead operators and in under two

89
00:04:02,290 --> 00:04:06,190
years we went from those initial

90
00:04:04,180 --> 00:04:08,650
meetings to actual announcements of

91
00:04:06,190 --> 00:04:12,099
commercial deployments in production at

92
00:04:08,650 --> 00:04:14,200
the beginning of 2019 then throughout

93
00:04:12,099 --> 00:04:16,358
the year 2019 that grew to eight

94
00:04:14,200 --> 00:04:19,870
commercial deployments additionally in

95
00:04:16,358 --> 00:04:23,349
2009 nineteen we saw announcement of 18

96
00:04:19,870 --> 00:04:25,950
line rate hardware implementations

97
00:04:23,350 --> 00:04:28,090
and announcement of 11 open-source

98
00:04:25,950 --> 00:04:30,099
applications or you know segment routing

99
00:04:28,090 --> 00:04:32,500
being developed and supported in a

100
00:04:30,100 --> 00:04:38,410
number of different software tools and

101
00:04:32,500 --> 00:04:41,020
apps we expect this certainly the list

102
00:04:38,410 --> 00:04:43,330
to grow in 2020 and beyond as well we

103
00:04:41,020 --> 00:04:45,010
wanted to highlight to those operators

104
00:04:43,330 --> 00:04:47,680
that announced commercial deployments

105
00:04:45,010 --> 00:04:50,650
Softbank and Iliad Softbank was the very

106
00:04:47,680 --> 00:04:53,320
first announcement in January of 2019

107
00:04:50,650 --> 00:04:56,109
and segment routing deployed in

108
00:04:53,320 --> 00:04:58,360
production and then just a couple weeks

109
00:04:56,110 --> 00:05:00,850
later Iliad an operator in Italy and

110
00:04:58,360 --> 00:05:03,720
France made an announcement that they

111
00:05:00,850 --> 00:05:06,670
had deployed a nationwide SR v6 network

112
00:05:03,720 --> 00:05:08,800
using both Cisco equipment as well as

113
00:05:06,670 --> 00:05:10,630
their homegrown Iliad node boxes and

114
00:05:08,800 --> 00:05:13,390
these are their their cell site routers

115
00:05:10,630 --> 00:05:14,710
where they actually implemented SR v6

116
00:05:13,390 --> 00:05:22,240
with in their own network operating

117
00:05:14,710 --> 00:05:24,370
system a quick logo slide on the

118
00:05:22,240 --> 00:05:26,710
ecosystem at the center of the logo

119
00:05:24,370 --> 00:05:29,530
slide is actually a little picture from

120
00:05:26,710 --> 00:05:35,739
an interruptus income did I think in the

121
00:05:29,530 --> 00:05:38,109
late 2017 maybe SR v6 is a proposed

122
00:05:35,740 --> 00:05:42,490
standard so RFC 80 402 has been

123
00:05:38,110 --> 00:05:46,750
allocated 80 402 defines SR v6 with key

124
00:05:42,490 --> 00:05:50,380
concepts such as sr h + sr b6 SIDS the

125
00:05:46,750 --> 00:05:53,770
SR extension header sr h itself is the

126
00:05:50,380 --> 00:05:58,120
the SR v6 data plane encapsulation and

127
00:05:53,770 --> 00:06:01,659
that one is through IETF last call in is

128
00:05:58,120 --> 00:06:03,280
awaiting it's RFC number assignment also

129
00:06:01,660 --> 00:06:06,370
within the spring working group there

130
00:06:03,280 --> 00:06:07,659
another three drafts that are that are

131
00:06:06,370 --> 00:06:09,700
working their way through there at last

132
00:06:07,660 --> 00:06:12,790
call status now so the network

133
00:06:09,700 --> 00:06:16,650
programming draft sr v6 extensions for

134
00:06:12,790 --> 00:06:16,650
is is NS r v6 o am

135
00:06:17,340 --> 00:06:22,659
very quickly just to show this is more

136
00:06:21,070 --> 00:06:23,260
for reference later if anyone's

137
00:06:22,660 --> 00:06:26,170
interested

138
00:06:23,260 --> 00:06:30,280
there are several I Oh SX are platforms

139
00:06:26,170 --> 00:06:33,610
that have shipping SR v6 feature set

140
00:06:30,280 --> 00:06:39,130
today same within the data center Nexus

141
00:06:33,610 --> 00:06:41,500
9000 has shipping SR v6 feature set s

142
00:06:39,130 --> 00:06:45,670
our v6 reminder this is actually a quick

143
00:06:41,500 --> 00:06:49,150
review if four of SR v6 network

144
00:06:45,670 --> 00:06:51,520
programming so SR v6 network programming

145
00:06:49,150 --> 00:06:53,049
essentially takes you know the idea of

146
00:06:51,520 --> 00:06:55,990
the the hundred and twenty eight bit

147
00:06:53,050 --> 00:06:58,900
destination address or the 128 bit say

148
00:06:55,990 --> 00:07:03,250
SIDS that are in the SRH that follow the

149
00:06:58,900 --> 00:07:06,010
outer header each of those 128 bit SIDS

150
00:07:03,250 --> 00:07:08,830
can represent a 128-bit program or

151
00:07:06,010 --> 00:07:11,440
instruction set so those instruction

152
00:07:08,830 --> 00:07:13,030
sets can be found in the outer

153
00:07:11,440 --> 00:07:16,330
destination address is the first

154
00:07:13,030 --> 00:07:18,010
instruction and then if needed there

155
00:07:16,330 --> 00:07:20,229
could be additional instructions in the

156
00:07:18,010 --> 00:07:26,490
SRH second instruction third instruction

157
00:07:20,230 --> 00:07:28,840
is so on and a little too fast there

158
00:07:26,490 --> 00:07:31,120
several of these network program

159
00:07:28,840 --> 00:07:33,669
instructions are actually codified in

160
00:07:31,120 --> 00:07:35,980
the network programming draft so they've

161
00:07:33,670 --> 00:07:38,050
made they've defined say some traffic

162
00:07:35,980 --> 00:07:40,030
engineering and fast reroute and VPN

163
00:07:38,050 --> 00:07:42,220
instruction sets I think there's a

164
00:07:40,030 --> 00:07:44,200
couple of other drafts that are in the

165
00:07:42,220 --> 00:07:47,410
works out there as well for additional

166
00:07:44,200 --> 00:07:49,330
SR v6 Network programs and we think

167
00:07:47,410 --> 00:07:51,280
there's there's an entire ecosystem of

168
00:07:49,330 --> 00:07:53,849
network programs that could emerge in

169
00:07:51,280 --> 00:07:53,849
the next couple years

170
00:07:55,230 --> 00:07:59,190
the SR v6 header a very quick overview

171
00:07:57,960 --> 00:08:02,849
of what it looks like

172
00:07:59,190 --> 00:08:04,440
so the actual outer ipv6 header source

173
00:08:02,850 --> 00:08:09,450
and destination address are at the top

174
00:08:04,440 --> 00:08:12,330
and then after that the SRH begins

175
00:08:09,450 --> 00:08:15,870
itself and the outer tag is essentially

176
00:08:12,330 --> 00:08:19,530
a space for defining group based policy

177
00:08:15,870 --> 00:08:21,420
the next field is segments left and that

178
00:08:19,530 --> 00:08:23,190
basically just tells us where we are

179
00:08:21,420 --> 00:08:26,700
within the program within the locator

180
00:08:23,190 --> 00:08:29,580
stack and then finally or within the CID

181
00:08:26,700 --> 00:08:34,200
stack sorry the CID list itself or the

182
00:08:29,580 --> 00:08:36,840
set of SIDS each 128 bit Sid can be

183
00:08:34,200 --> 00:08:38,490
broken or thought of as two pieces

184
00:08:36,840 --> 00:08:41,910
there's the outer piece which is a

185
00:08:38,490 --> 00:08:44,310
locator and then the the last bits which

186
00:08:41,909 --> 00:08:48,360
are a function so a locator is going to

187
00:08:44,310 --> 00:08:50,729
tend to be like essentially advertised

188
00:08:48,360 --> 00:08:52,860
and bound to a loopback address on a

189
00:08:50,730 --> 00:08:54,450
router and then the function is some

190
00:08:52,860 --> 00:08:56,820
sort of like either like a traffic

191
00:08:54,450 --> 00:08:59,640
engineering or a VPN or some other kind

192
00:08:56,820 --> 00:09:02,940
of function that that is completed or

193
00:08:59,640 --> 00:09:05,610
that are the last bits of 128 then we've

194
00:09:02,940 --> 00:09:08,340
got also at the end of the SRH is kind

195
00:09:05,610 --> 00:09:12,360
of the metadata TLV which is basically a

196
00:09:08,340 --> 00:09:15,150
optional unspecified size but this is a

197
00:09:12,360 --> 00:09:17,700
place where you one could embed all any

198
00:09:15,150 --> 00:09:19,260
sort of essentially metadata performance

199
00:09:17,700 --> 00:09:22,530
data for instance other kinds of data

200
00:09:19,260 --> 00:09:24,660
and that piece we would expect to be

201
00:09:22,530 --> 00:09:26,579
processed by like software tools and the

202
00:09:24,660 --> 00:09:29,219
like like after the after the routed

203
00:09:26,580 --> 00:09:31,570
Network has finished sort of moving the

204
00:09:29,220 --> 00:09:34,649
traffic through

205
00:09:31,570 --> 00:09:34,649
[Music]

206
00:09:35,450 --> 00:09:45,089
so I'll just jump to next sr v6 routed

207
00:09:43,079 --> 00:09:47,489
domain itself this is to just kind of

208
00:09:45,089 --> 00:09:49,700
illustrate sort of packet flow as

209
00:09:47,490 --> 00:09:52,860
traffic traverses from a customer

210
00:09:49,700 --> 00:09:54,390
through SR v6 encapsulated domain say

211
00:09:52,860 --> 00:10:00,450
like a service provider network so this

212
00:09:54,390 --> 00:10:02,130
could be an SRP six VPN so at at domain

213
00:10:00,450 --> 00:10:04,500
ingress let's say customer packet

214
00:10:02,130 --> 00:10:07,470
arrives at PE router one and it could be

215
00:10:04,500 --> 00:10:11,459
an ipv4 could be v6 or even a layer to

216
00:10:07,470 --> 00:10:14,670
frame it gets encapsulated in NSR v6 the

217
00:10:11,459 --> 00:10:18,119
outer ipv6 header includes a list of mr.

218
00:10:14,670 --> 00:10:20,040
h SE list of segments now in this case

219
00:10:18,120 --> 00:10:21,779
it doesn't it could just be an outer

220
00:10:20,040 --> 00:10:25,620
ipv6 header if there's no need to

221
00:10:21,779 --> 00:10:28,920
execute any kind of additional service

222
00:10:25,620 --> 00:10:30,690
on this packet and or it could actually

223
00:10:28,920 --> 00:10:34,740
have this rh if we're doing both the SE

224
00:10:30,690 --> 00:10:37,529
VPN and traffic steering so the traffic

225
00:10:34,740 --> 00:10:39,149
the packet is going to traverse the blue

226
00:10:37,529 --> 00:10:42,899
network here and it's going to just take

227
00:10:39,149 --> 00:10:45,570
ipv6 best path or the eius eius best

228
00:10:42,899 --> 00:10:47,370
path to the the egress point unless

229
00:10:45,570 --> 00:10:48,959
we've actually specified something in

230
00:10:47,370 --> 00:10:51,120
the network program that says it should

231
00:10:48,959 --> 00:10:55,619
steer it's going to arrive at the egress

232
00:10:51,120 --> 00:10:57,839
node and the egress node itself is going

233
00:10:55,620 --> 00:10:59,820
to pop it's going to it's going to read

234
00:10:57,839 --> 00:11:02,339
itself as the the location or the

235
00:10:59,820 --> 00:11:04,380
locator and read the function as the the

236
00:11:02,339 --> 00:11:07,050
pop function for whatever VPN it's

237
00:11:04,380 --> 00:11:08,850
executing in this case so remove that

238
00:11:07,050 --> 00:11:11,790
header and forwards on the original

239
00:11:08,850 --> 00:11:14,130
packet and we did want to emphasize that

240
00:11:11,790 --> 00:11:16,260
the end-to-end integrity of the the

241
00:11:14,130 --> 00:11:18,089
actual customer packets so the SR v6

242
00:11:16,260 --> 00:11:19,980
network itself is not changing the

243
00:11:18,089 --> 00:11:22,260
customer packet in any way it's behaving

244
00:11:19,980 --> 00:11:24,620
exactly like an MPLS VPN in the sense

245
00:11:22,260 --> 00:11:29,899
where it's simply encapsulating it in a

246
00:11:24,620 --> 00:11:29,899
v6 header sending it on and then decap

247
00:11:31,200 --> 00:11:39,570
so we've got actual deployed use cases

248
00:11:33,750 --> 00:11:41,430
here to discuss this one and from a from

249
00:11:39,570 --> 00:11:43,500
a terminology perspective VPN over

250
00:11:41,430 --> 00:11:45,420
best-effort 5g slice this could also

251
00:11:43,500 --> 00:11:49,770
just mean like MPLS VPN or the

252
00:11:45,420 --> 00:11:51,719
equivalent of of a layer 3 VPN let's say

253
00:11:49,770 --> 00:11:54,720
we've for the network design here we

254
00:11:51,720 --> 00:11:57,390
have assigned the the B address space or

255
00:11:54,720 --> 00:11:59,610
locator block and that B address space

256
00:11:57,390 --> 00:12:01,949
is associated with with the is is just

257
00:11:59,610 --> 00:12:05,550
kind of standard best path forwarding

258
00:12:01,950 --> 00:12:07,860
and router 3 is our egress point so when

259
00:12:05,550 --> 00:12:09,900
the packet enters the network at router

260
00:12:07,860 --> 00:12:13,530
1 it's going to encapsulate it in a

261
00:12:09,900 --> 00:12:17,880
locator plus a function S our v6 header

262
00:12:13,530 --> 00:12:20,910
so the egress PE node is b3 and then the

263
00:12:17,880 --> 00:12:22,650
function is worth nine in this case so

264
00:12:20,910 --> 00:12:24,240
this is a very simple encapsulation it's

265
00:12:22,650 --> 00:12:26,610
a simple program because we don't need

266
00:12:24,240 --> 00:12:29,250
to do anything complex with with routing

267
00:12:26,610 --> 00:12:33,350
here we're just ipv6 routing it so a

268
00:12:29,250 --> 00:12:38,460
simple ipv6 header on top no SRH so just

269
00:12:33,350 --> 00:12:39,630
some very little overhead jump and pass

270
00:12:38,460 --> 00:12:44,280
that because it's redundant with this

271
00:12:39,630 --> 00:12:47,520
one the VPN with low delay slice or just

272
00:12:44,280 --> 00:12:50,850
say VPN with an SLA option added to it

273
00:12:47,520 --> 00:12:54,480
so this one comes with a flex algorithm

274
00:12:50,850 --> 00:12:57,540
option where let's say we've defined an

275
00:12:54,480 --> 00:12:59,430
alternate is-is algorithm that says to

276
00:12:57,540 --> 00:13:01,709
measure the best path as the lowest

277
00:12:59,430 --> 00:13:05,160
delay path and so we've got you know

278
00:13:01,710 --> 00:13:06,750
we're measuring say link latency on all

279
00:13:05,160 --> 00:13:08,400
the links in the network and then the

280
00:13:06,750 --> 00:13:10,200
algorithm itself runs that and it

281
00:13:08,400 --> 00:13:13,680
measures and it determines that the best

282
00:13:10,200 --> 00:13:16,020
path from 1 to 3 is the at least from

283
00:13:13,680 --> 00:13:19,530
the low delay algorithms perspective is

284
00:13:16,020 --> 00:13:21,240
actually via 2 and then 5 so in this

285
00:13:19,530 --> 00:13:23,220
case we've got another say loopback

286
00:13:21,240 --> 00:13:25,380
address on the remote router that is

287
00:13:23,220 --> 00:13:26,820
assigned an address in the d-block and

288
00:13:25,380 --> 00:13:29,370
so we're going to encapsulate this

289
00:13:26,820 --> 00:13:32,160
packet because it's got low delay as its

290
00:13:29,370 --> 00:13:34,860
as its service or its SLA it gets

291
00:13:32,160 --> 00:13:38,010
encapsulated in de colon 3 which is the

292
00:13:34,860 --> 00:13:40,530
locator for the low delay path to router

293
00:13:38,010 --> 00:13:42,450
3 the egress node and then the function

294
00:13:40,530 --> 00:13:45,930
the end of the the destination

295
00:13:42,450 --> 00:13:49,139
on that the end cap is the again the the

296
00:13:45,930 --> 00:13:51,449
birth nine function so here we get VPN

297
00:13:49,139 --> 00:13:54,149
encapsulation and actually low delay

298
00:13:51,450 --> 00:13:58,639
traffic steering with a single header

299
00:13:54,149 --> 00:14:02,490
and no actual no additional SRH added

300
00:13:58,639 --> 00:14:05,370
and final use case that that we're

301
00:14:02,490 --> 00:14:07,769
exploring this is actually like consider

302
00:14:05,370 --> 00:14:09,630
this say there's integrated NFB and this

303
00:14:07,769 --> 00:14:11,670
in this path or there's it's kind of

304
00:14:09,630 --> 00:14:14,610
like a it's a service chain essentially

305
00:14:11,670 --> 00:14:16,740
where we want to we've got the same VPN

306
00:14:14,610 --> 00:14:18,480
with low delay but we also want to ship

307
00:14:16,740 --> 00:14:20,310
the traffic through some packet

308
00:14:18,480 --> 00:14:23,670
inspector or kind of firewall things

309
00:14:20,310 --> 00:14:26,369
somewhere in the middle so in this case

310
00:14:23,670 --> 00:14:29,490
we're actually we have an outer SR v6

311
00:14:26,370 --> 00:14:31,350
header and then a SRH with a single CID

312
00:14:29,490 --> 00:14:35,250
because we're basically it's a compound

313
00:14:31,350 --> 00:14:36,420
sort of stack here so the first SRH and

314
00:14:35,250 --> 00:14:40,190
we're still working within the d block

315
00:14:36,420 --> 00:14:43,050
because we want low delay and the first

316
00:14:40,190 --> 00:14:45,630
destination address is d : - and then

317
00:14:43,050 --> 00:14:49,050
whatever you know the bits to finish out

318
00:14:45,630 --> 00:14:51,269
128 bits that says stick send it to this

319
00:14:49,050 --> 00:14:53,729
snort node that's a that's hanging off a

320
00:14:51,269 --> 00:14:58,079
router to the packet comes back after

321
00:14:53,730 --> 00:15:00,589
inspection and the d : 3 CID has been

322
00:14:58,079 --> 00:15:03,779
promoted to the the destination address

323
00:15:00,589 --> 00:15:06,300
as and it takes the low latency path

324
00:15:03,779 --> 00:15:10,019
from from 2 to 3 which happens to be VF

325
00:15:06,300 --> 00:15:12,959
5 and so that now that outer destination

326
00:15:10,019 --> 00:15:14,519
address D 3 with v 9 it behaves just

327
00:15:12,959 --> 00:15:17,250
like the previous slide where when it

328
00:15:14,519 --> 00:15:19,649
arrives on egress we pop and we forward

329
00:15:17,250 --> 00:15:22,579
or look up on our within the verse

330
00:15:19,649 --> 00:15:22,579
lookup table

331
00:15:25,020 --> 00:15:29,170
additional I don't know if this is a use

332
00:15:27,100 --> 00:15:31,420
case per se but this is this is

333
00:15:29,170 --> 00:15:33,040
additional functionality that is really

334
00:15:31,420 --> 00:15:36,400
nice with us our v6 and that's load

335
00:15:33,040 --> 00:15:38,050
balancing and getting to load balance on

336
00:15:36,400 --> 00:15:39,250
a flow label that's right at the front

337
00:15:38,050 --> 00:15:41,469
of the packet

338
00:15:39,250 --> 00:15:43,480
so with MPLS you know we've got the

339
00:15:41,470 --> 00:15:46,540
potential for a deep label stack and

340
00:15:43,480 --> 00:15:48,520
it's hard to actually go many many

341
00:15:46,540 --> 00:15:51,280
hardware platforms are not able to hash

342
00:15:48,520 --> 00:15:53,140
on the inner IP after such and such a

343
00:15:51,280 --> 00:15:55,870
label stack so we've got other things

344
00:15:53,140 --> 00:15:58,630
like you know MPLS entropy labels and

345
00:15:55,870 --> 00:16:01,540
things like that and with ipv6 we

346
00:15:58,630 --> 00:16:04,180
actually just get flow label out of the

347
00:16:01,540 --> 00:16:08,230
box like it's a it's part of the

348
00:16:04,180 --> 00:16:10,750
protocol so the the ingress PE it as as

349
00:16:08,230 --> 00:16:14,020
say the customer traffic is coming in it

350
00:16:10,750 --> 00:16:17,320
is hashing on that that 5-tuple and then

351
00:16:14,020 --> 00:16:20,829
that PE can essentially mark like the

352
00:16:17,320 --> 00:16:24,100
hash index or a hash hash number in the

353
00:16:20,830 --> 00:16:26,350
flow label of the ipv6 and cap that that

354
00:16:24,100 --> 00:16:29,260
it's pushing on on those packets as so

355
00:16:26,350 --> 00:16:31,360
as the the SR v6 traffic and then

356
00:16:29,260 --> 00:16:33,490
traverses the downstream nodes right in

357
00:16:31,360 --> 00:16:35,770
front of the the header itself is a flow

358
00:16:33,490 --> 00:16:38,470
label so it's able to subdue stream

359
00:16:35,770 --> 00:16:40,510
nodes can then hash right on that and we

360
00:16:38,470 --> 00:16:46,930
get this for free with ipv6 so this is

361
00:16:40,510 --> 00:16:48,819
terrific another this is a use case this

362
00:16:46,930 --> 00:16:50,859
is kind of you know brownfield

363
00:16:48,820 --> 00:16:55,060
introduction of the technology use case

364
00:16:50,860 --> 00:16:58,870
so if the network supports a plane ipv6

365
00:16:55,060 --> 00:17:02,469
14 then one can introduce SR v6 in that

366
00:16:58,870 --> 00:17:05,770
network so introduction of SR v6 driven

367
00:17:02,470 --> 00:17:07,660
se VPNs can be done via upgrading the PE

368
00:17:05,770 --> 00:17:11,740
nodes that are participating in those SR

369
00:17:07,660 --> 00:17:13,480
v6 VPNs the the middle middle boxes the

370
00:17:11,740 --> 00:17:17,560
P nodes that are in between they just

371
00:17:13,480 --> 00:17:20,829
need to perform v6 forwarding itself if

372
00:17:17,560 --> 00:17:22,149
you wish to implement traffic

373
00:17:20,829 --> 00:17:24,250
engineering of some sort or path

374
00:17:22,150 --> 00:17:26,920
steering this doesn't require say

375
00:17:24,250 --> 00:17:30,550
wholesale implementation of SR v6 across

376
00:17:26,920 --> 00:17:32,800
all all nodes in the fleet if a te

377
00:17:30,550 --> 00:17:35,110
objective can be obtained by just

378
00:17:32,800 --> 00:17:37,510
enabling SR v6 at certain kind of

379
00:17:35,110 --> 00:17:41,250
strategic te waypoints that's that's

380
00:17:37,510 --> 00:17:41,250
it could be ruled out incrementally I

381
00:17:45,030 --> 00:17:50,620
wanted to mention prior to coming to the

382
00:17:48,790 --> 00:17:54,310
darkside I've worked as a network

383
00:17:50,620 --> 00:17:56,679
engineer at a web company and also at a

384
00:17:54,310 --> 00:17:59,440
couple service providers and and so I

385
00:17:56,680 --> 00:18:02,860
worked with with IP networks as well as

386
00:17:59,440 --> 00:18:05,020
MPLS networks and I really like prefix

387
00:18:02,860 --> 00:18:07,419
summarization when working with MPLS

388
00:18:05,020 --> 00:18:08,530
networks we lose prefix summarization or

389
00:18:07,420 --> 00:18:12,390
at least we don't you know we don't have

390
00:18:08,530 --> 00:18:15,730
MPA ability to to summarize MPLS labels

391
00:18:12,390 --> 00:18:16,630
and so we've got you know the the whole

392
00:18:15,730 --> 00:18:19,030
sort of BGP

393
00:18:16,630 --> 00:18:21,430
inner AAS sort of solution for that we

394
00:18:19,030 --> 00:18:24,250
can stick a BGP ALU label in front of

395
00:18:21,430 --> 00:18:26,680
say a VPN traffic with its transport and

396
00:18:24,250 --> 00:18:30,130
VPN label and that's kind of one of the

397
00:18:26,680 --> 00:18:32,590
ways that we scale MPLS networks with

398
00:18:30,130 --> 00:18:36,490
with sr v6 though we automatically

399
00:18:32,590 --> 00:18:39,159
inherit ipv6 prefix summarization so

400
00:18:36,490 --> 00:18:41,380
another kind of automatic additional

401
00:18:39,160 --> 00:18:43,420
bonus let's say we've got a metro with

402
00:18:41,380 --> 00:18:46,570
hundreds or even thousands of sr v6

403
00:18:43,420 --> 00:18:48,790
nodes on one side and we can summarize

404
00:18:46,570 --> 00:18:51,429
all of those nodes say with a single

405
00:18:48,790 --> 00:18:55,570
slash 48 advertisement that we push into

406
00:18:51,430 --> 00:18:56,950
the core again a remote Metro same kind

407
00:18:55,570 --> 00:19:00,100
of thing hundreds or thousands of nodes

408
00:18:56,950 --> 00:19:02,170
summarized as a single single entry into

409
00:19:00,100 --> 00:19:03,790
the core and so now we could imagine a

410
00:19:02,170 --> 00:19:05,620
global network where you've got hundreds

411
00:19:03,790 --> 00:19:06,879
of potentially thousands of metros where

412
00:19:05,620 --> 00:19:08,350
you've got hundreds or thousands of

413
00:19:06,880 --> 00:19:10,650
nodes and each one of them is

414
00:19:08,350 --> 00:19:13,360
potentially advertising just a single

415
00:19:10,650 --> 00:19:15,130
prefix into the core and your core is

416
00:19:13,360 --> 00:19:17,889
you know it's got just a couple hundred

417
00:19:15,130 --> 00:19:20,770
route entries at that point or or even a

418
00:19:17,890 --> 00:19:24,880
few thousand this is an amazing scaling

419
00:19:20,770 --> 00:19:26,950
mechanism and and I just really enjoy

420
00:19:24,880 --> 00:19:33,310
prefix summarization to create great

421
00:19:26,950 --> 00:19:35,530
capability so you know on top of prefix

422
00:19:33,310 --> 00:19:38,409
summarization I essentially sr v6 does

423
00:19:35,530 --> 00:19:41,139
have excellent native scale we find that

424
00:19:38,410 --> 00:19:45,100
a lot of the use cases we can support a

425
00:19:41,140 --> 00:19:49,300
lot of use cases with a single outer

426
00:19:45,100 --> 00:19:50,620
ipv6 header and then after that most use

427
00:19:49,300 --> 00:19:54,220
cases can be

428
00:19:50,620 --> 00:19:56,110
with with one or two SIDS and SRH we do

429
00:19:54,220 --> 00:19:58,419
get to the prefix summarization gain and

430
00:19:56,110 --> 00:20:00,039
really we've got we've got several

431
00:19:58,419 --> 00:20:02,230
operators that have implemented in

432
00:20:00,039 --> 00:20:03,669
production and and they're happy with

433
00:20:02,230 --> 00:20:07,440
what they're with what they're getting

434
00:20:03,669 --> 00:20:07,440
and definitely happy to share experience

435
00:20:13,500 --> 00:20:21,669
and because this is network operations

436
00:20:18,570 --> 00:20:23,168
we want to we can't just talk about

437
00:20:21,669 --> 00:20:25,090
simplification of architecture without

438
00:20:23,169 --> 00:20:30,010
talking about trying to simplify ops as

439
00:20:25,090 --> 00:20:33,639
well the the team has built a segment

440
00:20:30,010 --> 00:20:36,970
routing RS our v6 NSO an automation

441
00:20:33,640 --> 00:20:39,370
function pack for for the tail F NSO

442
00:20:36,970 --> 00:20:41,230
product so it includes basically all of

443
00:20:39,370 --> 00:20:43,928
the capabilities to automate rollout of

444
00:20:41,230 --> 00:20:46,510
address allocations sit allocation the

445
00:20:43,929 --> 00:20:48,370
ability to roll it out multi-domain to

446
00:20:46,510 --> 00:20:51,309
turn on latency measurement and BFD

447
00:20:48,370 --> 00:20:53,379
kinds of features things like that we

448
00:20:51,309 --> 00:20:55,770
also recognize though that many

449
00:20:53,380 --> 00:20:57,970
operators prefer to build their own

450
00:20:55,770 --> 00:21:01,330
their own automation and management

451
00:20:57,970 --> 00:21:02,860
systems and so at least within our

452
00:21:01,330 --> 00:21:05,189
implementation we're making sure that

453
00:21:02,860 --> 00:21:08,080
all of the the native yang data models

454
00:21:05,190 --> 00:21:10,779
supports sr v6 features as they are

455
00:21:08,080 --> 00:21:13,029
added and we're working with I know that

456
00:21:10,779 --> 00:21:15,279
the open config group is has at least

457
00:21:13,029 --> 00:21:22,890
gotten started on an SR v6 data model

458
00:21:15,279 --> 00:21:25,539
themselves another quick note on scale

459
00:21:22,890 --> 00:21:29,950
so when it comes to actual address

460
00:21:25,539 --> 00:21:31,658
allocation ipv6 space so the two

461
00:21:29,950 --> 00:21:34,090
operators that we highlight in the in

462
00:21:31,659 --> 00:21:37,270
the talk here iliad chose to make use of

463
00:21:34,090 --> 00:21:39,428
the the private FC slash h-space were

464
00:21:37,270 --> 00:21:42,220
there for their SID El Cid block

465
00:21:39,429 --> 00:21:44,679
allocation they basically decided to go

466
00:21:42,220 --> 00:21:47,350
with a slash 40 from that fc8 space

467
00:21:44,679 --> 00:21:50,289
which represents less than a billionth

468
00:21:47,350 --> 00:21:51,789
of the entire fc8 space so that's great

469
00:21:50,289 --> 00:21:55,470
because they've gotten room to grow

470
00:21:51,789 --> 00:21:59,790
should they need some more address space

471
00:21:55,470 --> 00:22:01,950
Softbank opted to use their own public

472
00:21:59,790 --> 00:22:05,310
v-6 base and they just allocated us

473
00:22:01,950 --> 00:22:09,780
slash 40 from their their slash 20 that

474
00:22:05,310 --> 00:22:12,629
they have from AP neck to designate for

475
00:22:09,780 --> 00:22:14,910
their SRB six CID block so that slash 40

476
00:22:12,630 --> 00:22:21,870
itself represents just one millionth of

477
00:22:14,910 --> 00:22:24,270
their address space all right so the the

478
00:22:21,870 --> 00:22:25,800
final piece of this talk and this is

479
00:22:24,270 --> 00:22:28,950
kind of one of the biggest pieces

480
00:22:25,800 --> 00:22:35,700
actually this is we're introducing SR v6

481
00:22:28,950 --> 00:22:38,460
micro program so micro program is a set

482
00:22:35,700 --> 00:22:40,890
of new micro instructions so if you'll

483
00:22:38,460 --> 00:22:45,180
recall from the network programming

484
00:22:40,890 --> 00:22:48,030
paradigm each 128-bit Sid represents an

485
00:22:45,180 --> 00:22:51,030
instruction or instruction set a program

486
00:22:48,030 --> 00:22:52,710
if you will and with micro program we

487
00:22:51,030 --> 00:22:55,170
look to take that hundred 28 bits and

488
00:22:52,710 --> 00:22:58,200
break it into potentially several

489
00:22:55,170 --> 00:23:00,810
smaller programs we want to mention the

490
00:22:58,200 --> 00:23:03,540
micro program also it completely

491
00:23:00,810 --> 00:23:06,090
leverages existing SRH encapsulation and

492
00:23:03,540 --> 00:23:08,070
SS our v6 control plane so there's zero

493
00:23:06,090 --> 00:23:13,830
extension required to to either the

494
00:23:08,070 --> 00:23:18,149
protocols so a reminder of the network

495
00:23:13,830 --> 00:23:21,629
program the first instruction is the the

496
00:23:18,150 --> 00:23:24,180
destination address second instruction

497
00:23:21,630 --> 00:23:26,070
third instruction if needed are the the

498
00:23:24,180 --> 00:23:29,880
SIDS that follow in the in the SRH

499
00:23:26,070 --> 00:23:35,189
itself so this is network programming as

500
00:23:29,880 --> 00:23:37,440
as we've first conceived now with SR v6

501
00:23:35,190 --> 00:23:39,510
micro program basically any of those

502
00:23:37,440 --> 00:23:41,460
instructions that we just showed could

503
00:23:39,510 --> 00:23:44,460
represent or could hold a micro program

504
00:23:41,460 --> 00:23:46,380
within it so the first instruction could

505
00:23:44,460 --> 00:23:48,570
carry an actual micro program with it

506
00:23:46,380 --> 00:23:51,180
the second instruction could carry micro

507
00:23:48,570 --> 00:23:54,230
program and maybe the third instruction

508
00:23:51,180 --> 00:23:58,350
actually doesn't maybe that's a normal

509
00:23:54,230 --> 00:23:59,730
128-bit network program or in

510
00:23:58,350 --> 00:24:02,219
alternatively maybe the outer

511
00:23:59,730 --> 00:24:05,100
destination address is 128 bit network

512
00:24:02,220 --> 00:24:06,730
program but then the the second and

513
00:24:05,100 --> 00:24:12,969
third said maybe those are carrying

514
00:24:06,730 --> 00:24:15,070
or programs within them so the micro

515
00:24:12,970 --> 00:24:18,250
program itself how this is constructed

516
00:24:15,070 --> 00:24:20,678
you know the SR v6 CID itself is 128

517
00:24:18,250 --> 00:24:22,750
bits in length and let's say you know we

518
00:24:20,679 --> 00:24:26,049
can break that up into eight groups of

519
00:24:22,750 --> 00:24:29,950
four nibbles each and/or eight groups of

520
00:24:26,049 --> 00:24:31,990
16 bits if you will so if we assume an

521
00:24:29,950 --> 00:24:35,500
allocation block we're going to say

522
00:24:31,990 --> 00:24:39,400
takes a b b / 32 and say this is our

523
00:24:35,500 --> 00:24:41,950
micro program block and then if we have

524
00:24:39,400 --> 00:24:45,610
micro instructions that take place in

525
00:24:41,950 --> 00:24:48,520
four nibbles IE in 16 bits length we can

526
00:24:45,610 --> 00:24:50,469
build a destination address or a CID

527
00:24:48,520 --> 00:24:52,750
that looks something like this where

528
00:24:50,470 --> 00:24:55,240
we've got the the first 32 bits are the

529
00:24:52,750 --> 00:24:57,760
BB block identifying this packet as

530
00:24:55,240 --> 00:25:01,000
having a micro program instruction set

531
00:24:57,760 --> 00:25:03,640
and then we potentially we have 6 chunks

532
00:25:01,000 --> 00:25:09,580
of port of 16 bits that follow that each

533
00:25:03,640 --> 00:25:12,220
can execute a SRV 6 micro program so 6

534
00:25:09,580 --> 00:25:16,840
micro instructions per SRV 6 instruction

535
00:25:12,220 --> 00:25:18,400
is what this means so a few slides to

536
00:25:16,840 --> 00:25:20,830
kind of walk through how this actually

537
00:25:18,400 --> 00:25:22,690
how this works let's we've got this

538
00:25:20,830 --> 00:25:25,059
network here where we want to send

539
00:25:22,690 --> 00:25:26,590
traffic from site a to site B but we

540
00:25:25,059 --> 00:25:28,360
want to set it send it over a very

541
00:25:26,590 --> 00:25:30,610
specific path we want it to go through

542
00:25:28,360 --> 00:25:34,209
router 8 and router 7 and router 2 and

543
00:25:30,610 --> 00:25:36,159
with normal SR v6 network programming

544
00:25:34,210 --> 00:25:38,380
this would require you know an outer

545
00:25:36,160 --> 00:25:41,770
destination address - router 8 and then

546
00:25:38,380 --> 00:25:43,630
to SIDS in the SRH sitting behind for

547
00:25:41,770 --> 00:25:49,860
getting traffic to router 7 and then

548
00:25:43,630 --> 00:25:52,900
it's a router to complete building here

549
00:25:49,860 --> 00:25:54,549
so with micro program though we can do

550
00:25:52,900 --> 00:25:56,320
all of we can do this easily with a

551
00:25:54,549 --> 00:26:00,040
single destination address we don't need

552
00:25:56,320 --> 00:26:03,280
to add additional SIDS and the way this

553
00:26:00,040 --> 00:26:07,629
works what we do is on ingress we impose

554
00:26:03,280 --> 00:26:10,299
a SR v6 header with with a destination

555
00:26:07,630 --> 00:26:13,809
address of our universe the first 32

556
00:26:10,299 --> 00:26:16,960
bits are our B block and then a set of

557
00:26:13,809 --> 00:26:18,610
each like the next three 16-bit chunks

558
00:26:16,960 --> 00:26:23,260
are essentially identify

559
00:26:18,610 --> 00:26:24,879
- that can be like stand-ins for the for

560
00:26:23,260 --> 00:26:27,070
the locator to get to router eight than

561
00:26:24,880 --> 00:26:32,080
seven than - so this is the initial

562
00:26:27,070 --> 00:26:34,899
outer destination address and the way

563
00:26:32,080 --> 00:26:37,419
that also works is you know that at zero

564
00:26:34,900 --> 00:26:39,940
eight zero zero that was the kind of

565
00:26:37,420 --> 00:26:41,830
came as the next 16 bits and the zero

566
00:26:39,940 --> 00:26:44,110
seven zero zero that was the next 16

567
00:26:41,830 --> 00:26:47,799
bits and zero two zero zero these are

568
00:26:44,110 --> 00:26:49,360
all basically loopback addresses on each

569
00:26:47,799 --> 00:26:53,500
of those notes respectively that they're

570
00:26:49,360 --> 00:26:58,780
all advertising into is is as / 48 so

571
00:26:53,500 --> 00:27:00,400
these are all its its ipv6 routing so

572
00:26:58,780 --> 00:27:03,780
traffic enters the network and gets

573
00:27:00,400 --> 00:27:08,410
encapsulated in the microprogram

574
00:27:03,780 --> 00:27:09,700
and initially we're not we're not doing

575
00:27:08,410 --> 00:27:11,590
anything with this program other than

576
00:27:09,700 --> 00:27:14,290
following the IGP best path to router

577
00:27:11,590 --> 00:27:22,720
eight so routers four and five don't

578
00:27:14,290 --> 00:27:25,149
even need to be SR v6 aware all right so

579
00:27:22,720 --> 00:27:26,860
we've arrived at router 8 mmm and this

580
00:27:25,150 --> 00:27:36,700
is key so I'm gonna take a drink of

581
00:27:26,860 --> 00:27:38,020
water the shifting forward sorry packet

582
00:27:36,700 --> 00:27:41,020
arrives at router eight and the

583
00:27:38,020 --> 00:27:43,139
destination address that it sees is as

584
00:27:41,020 --> 00:27:45,820
that zero eight zero zero followed by

585
00:27:43,140 --> 00:27:48,490
sixteen bits or micro programs for other

586
00:27:45,820 --> 00:27:50,260
routers it sees itself though as zero

587
00:27:48,490 --> 00:27:54,730
eight zero zero so it's the kind of

588
00:27:50,260 --> 00:27:56,290
micro program locator what router eight

589
00:27:54,730 --> 00:27:59,590
is going to do with this packet is it's

590
00:27:56,290 --> 00:28:02,260
going to take from after the first 32

591
00:27:59,590 --> 00:28:04,178
bits it's going to take actually after

592
00:28:02,260 --> 00:28:06,010
the first 48 bits it's going to shift

593
00:28:04,179 --> 00:28:09,120
forward sixteen bits it's going to

594
00:28:06,010 --> 00:28:12,610
essentially take its locator out of that

595
00:28:09,120 --> 00:28:16,239
ipv6 address so when it shifts it

596
00:28:12,610 --> 00:28:18,939
forward like that we have essentially a

597
00:28:16,240 --> 00:28:21,220
new destination address the the micro

598
00:28:18,940 --> 00:28:23,410
the last sort of micro instruction set

599
00:28:21,220 --> 00:28:26,230
is pushed on to the end of the address

600
00:28:23,410 --> 00:28:28,230
and with with no SR v6 network

601
00:28:26,230 --> 00:28:29,970
programming and micro program if

602
00:28:28,230 --> 00:28:32,250
the ending ending bits are zero that

603
00:28:29,970 --> 00:28:37,410
simply signifies end of the program

604
00:28:32,250 --> 00:28:39,840
so now we have a new IP ipv6 destination

605
00:28:37,410 --> 00:28:42,510
address as we've done a 16-bit shift and

606
00:28:39,840 --> 00:28:44,850
forward so that new address our router

607
00:28:42,510 --> 00:28:46,830
simply does a lookup on the updated

608
00:28:44,850 --> 00:28:52,290
destination address and it has a match

609
00:28:46,830 --> 00:28:54,030
for now you know the B block 0 748 that

610
00:28:52,290 --> 00:28:57,840
it learned from a normal is is

611
00:28:54,030 --> 00:29:02,879
advertisement and so it forwards to that

612
00:28:57,840 --> 00:29:04,409
address accordingly packet arrives at

613
00:29:02,880 --> 00:29:06,299
router 7 and essentially the same

614
00:29:04,410 --> 00:29:10,710
process repeats actually router seven

615
00:29:06,299 --> 00:29:15,179
C's that itself it's its locator is the

616
00:29:10,710 --> 00:29:18,540
address it's going to take that address

617
00:29:15,179 --> 00:29:21,950
perform a 16-bit shift and forward so it

618
00:29:18,540 --> 00:29:24,990
takes its own self out of that and then

619
00:29:21,950 --> 00:29:28,500
backfill the the last 16 bits with zeros

620
00:29:24,990 --> 00:29:30,840
and then it does a lookup on now the new

621
00:29:28,500 --> 00:29:32,580
slash 48 or the newest you know longest

622
00:29:30,840 --> 00:29:34,918
match which happens to be a slash 48

623
00:29:32,580 --> 00:29:36,570
which happens to be the advertisement we

624
00:29:34,919 --> 00:29:38,520
got from that the entire network got

625
00:29:36,570 --> 00:29:44,428
from router 2 so it does the lookup and

626
00:29:38,520 --> 00:29:46,500
it forwards accordingly and then via or

627
00:29:44,429 --> 00:29:48,419
as we go through routers 6 and 3 it's

628
00:29:46,500 --> 00:29:50,280
it's essentially we're back to ipv6

629
00:29:48,419 --> 00:29:51,960
routing at this point these guys don't

630
00:29:50,280 --> 00:29:56,418
have to be SR v6 aware they're just

631
00:29:51,960 --> 00:29:59,460
following their is is path to router to

632
00:29:56,419 --> 00:30:04,650
router 2 receives the packet longest

633
00:29:59,460 --> 00:30:06,630
match on itself the it's the locator and

634
00:30:04,650 --> 00:30:08,820
presumably there's a function in those

635
00:30:06,630 --> 00:30:14,490
bits after it they say D capsulate and

636
00:30:08,820 --> 00:30:16,799
cross connect to a customer at site B so

637
00:30:14,490 --> 00:30:20,250
there we steered through three kind of

638
00:30:16,799 --> 00:30:22,410
middle hops and executed a VPN use case

639
00:30:20,250 --> 00:30:24,360
all within a single destination address

640
00:30:22,410 --> 00:30:28,530
because we're able to use the 16-bit

641
00:30:24,360 --> 00:30:31,500
microprogram so this is this is really

642
00:30:28,530 --> 00:30:33,540
powerful this is really really scalable

643
00:30:31,500 --> 00:30:36,150
especially for traffic engineering kinds

644
00:30:33,540 --> 00:30:39,360
of use cases you know we can recalculate

645
00:30:36,150 --> 00:30:40,390
out that with a single 40 bytes SRH

646
00:30:39,360 --> 00:30:43,330
overhead you can get

647
00:30:40,390 --> 00:30:45,700
218 kind of like micro programs or you

648
00:30:43,330 --> 00:30:49,030
know steering hops or potentially like

649
00:30:45,700 --> 00:30:51,640
service chain hops out of a single

650
00:30:49,030 --> 00:30:54,250
destination or out of that single 40

651
00:30:51,640 --> 00:30:57,550
bite SRH so this is mathematically the

652
00:30:54,250 --> 00:31:00,130
best SR v6 compression solution we've

653
00:30:57,550 --> 00:31:03,700
also demonstrated it operating line rate

654
00:31:00,130 --> 00:31:05,560
and multi terabit hardware this solution

655
00:31:03,700 --> 00:31:09,430
is very friendly to merchants silicon

656
00:31:05,560 --> 00:31:11,740
it's it's trivial for for silicon to do

657
00:31:09,430 --> 00:31:13,900
address rewrites like this where every

658
00:31:11,740 --> 00:31:15,880
router rewrites a destination MAC

659
00:31:13,900 --> 00:31:18,370
address every on every packet anyway so

660
00:31:15,880 --> 00:31:20,740
this is really easy for for merchants

661
00:31:18,370 --> 00:31:22,659
and then it's also friendly on legacy

662
00:31:20,740 --> 00:31:25,210
equipment the sense that anything that

663
00:31:22,660 --> 00:31:27,790
is not s our v6 aware or micro program

664
00:31:25,210 --> 00:31:31,920
aware as long as it's an ipv6 router

665
00:31:27,790 --> 00:31:31,920
it's able to forward these packets long

666
00:31:32,880 --> 00:31:38,020
micro program comes at no cost

667
00:31:35,320 --> 00:31:40,060
so what we mean by that is it uses the

668
00:31:38,020 --> 00:31:42,430
existing that we're programming model it

669
00:31:40,060 --> 00:31:44,740
uses the existing SRH encapsulation and

670
00:31:42,430 --> 00:31:46,540
it uses the existing SR v6 control

671
00:31:44,740 --> 00:31:50,530
planes so there's no extension required

672
00:31:46,540 --> 00:31:54,550
for for the use of micro program we also

673
00:31:50,530 --> 00:31:57,370
a key benefit is the ability to oversee

674
00:31:54,550 --> 00:31:59,740
nism are the ability to actually do the

675
00:31:57,370 --> 00:32:02,889
SR v6 and microprogramming encapsulation

676
00:31:59,740 --> 00:32:04,420
at the hosts we know that there are

677
00:32:02,890 --> 00:32:06,550
several operators out there that are

678
00:32:04,420 --> 00:32:08,350
there doing this kind of thing we're in

679
00:32:06,550 --> 00:32:09,700
cap control happening at the host or

680
00:32:08,350 --> 00:32:11,409
hypervisor layer and this is really

681
00:32:09,700 --> 00:32:13,510
powerful because the the flexibility

682
00:32:11,410 --> 00:32:18,370
that you get with doing encapsulation

683
00:32:13,510 --> 00:32:20,050
there is amazing we have a couple of

684
00:32:18,370 --> 00:32:23,139
operators that have done some initial

685
00:32:20,050 --> 00:32:27,690
evaluation and testing of SR v6 micro

686
00:32:23,140 --> 00:32:30,190
program Alibaba first Dennis Chi

687
00:32:27,690 --> 00:32:32,410
architected Alibaba he reports a

688
00:32:30,190 --> 00:32:35,170
successful milestone in January and this

689
00:32:32,410 --> 00:32:39,040
is s our v6 micro program operating at

690
00:32:35,170 --> 00:32:41,710
line rate verified with equipment in the

691
00:32:39,040 --> 00:32:44,290
Cisco lab so this is Cisco 8000 series

692
00:32:41,710 --> 00:32:48,100
and cs50 500s r9k

693
00:32:44,290 --> 00:32:51,960
and alibaba's use case is is essentially

694
00:32:48,100 --> 00:32:55,060
end-to-end Sdn control of a common like

695
00:32:51,960 --> 00:32:57,190
ipv6 forwarding plane so the

696
00:32:55,060 --> 00:33:00,100
applications are already enabled ipv6

697
00:32:57,190 --> 00:33:02,260
enabled the network is ipv6 enabled they

698
00:33:00,100 --> 00:33:05,169
as the previous slide described you know

699
00:33:02,260 --> 00:33:07,180
performing the encapsulation at the host

700
00:33:05,170 --> 00:33:09,940
itself within their stack they they

701
00:33:07,180 --> 00:33:13,930
control the encapsulation point and so

702
00:33:09,940 --> 00:33:15,430
this gives them a a single data plane to

703
00:33:13,930 --> 00:33:20,800
operate and to end across their network

704
00:33:15,430 --> 00:33:23,380
which is very powerful second operator

705
00:33:20,800 --> 00:33:26,680
that has successfully tested micro

706
00:33:23,380 --> 00:33:28,900
program Bell Canada they tested and

707
00:33:26,680 --> 00:33:31,290
demonstrated micro program operating at

708
00:33:28,900 --> 00:33:35,350
line rate in in their lab this this time

709
00:33:31,290 --> 00:33:39,159
same set of hardware their use case is 5

710
00:33:35,350 --> 00:33:41,260
g 5 G scale and to provide data plane

711
00:33:39,160 --> 00:33:44,440
simplification a single end cap and to

712
00:33:41,260 --> 00:33:45,910
end their use case also they have an

713
00:33:44,440 --> 00:33:47,260
ambitious use case where they want to do

714
00:33:45,910 --> 00:33:50,980
all sorts of integrated traffic

715
00:33:47,260 --> 00:33:53,680
engineering slicing VPN integrated nfe

716
00:33:50,980 --> 00:33:55,960
and other stuff they also describe

717
00:33:53,680 --> 00:33:59,140
optimum load balancing as a key benefit

718
00:33:55,960 --> 00:34:01,200
and the ability to run this over a

719
00:33:59,140 --> 00:34:05,520
brownfield network as well to be able to

720
00:34:01,200 --> 00:34:05,520
to just make use of B 640

721
00:34:06,550 --> 00:34:11,889
we are in the process of and I think

722
00:34:09,580 --> 00:34:15,100
Jakob has actually completed this this

723
00:34:11,889 --> 00:34:17,799
interupt test so this is an interrupt

724
00:34:15,100 --> 00:34:22,029
test of micro program itself so in a

725
00:34:17,800 --> 00:34:24,429
Cisco lab Jakob horn did this tested the

726
00:34:22,030 --> 00:34:29,010
SR v6 micro program implementation in

727
00:34:24,429 --> 00:34:31,780
Linux and VPP and also barefoot Tofino

728
00:34:29,010 --> 00:34:33,970
jericho to marvel's falcon and then

729
00:34:31,780 --> 00:34:35,860
several cisco platforms are involved in

730
00:34:33,969 --> 00:34:37,480
this inter up and i think the

731
00:34:35,860 --> 00:34:39,790
announcement for its and the publication

732
00:34:37,480 --> 00:34:47,170
of it here is gonna happen either within

733
00:34:39,790 --> 00:34:50,110
this week or next so to conclude sr v6

734
00:34:47,170 --> 00:34:53,230
as part of the segment routing family

735
00:34:50,110 --> 00:34:58,450
simplicity is what we aim for it is the

736
00:34:53,230 --> 00:35:01,360
the prevailing factor looking to looking

737
00:34:58,450 --> 00:35:03,689
to have the ability to move to a common

738
00:35:01,360 --> 00:35:06,460
end-to-end data plane a common

739
00:35:03,690 --> 00:35:09,460
end-to-end encapsulation for both

740
00:35:06,460 --> 00:35:11,620
underlay and overlay technologies could

741
00:35:09,460 --> 00:35:14,350
allow us to turn off or eliminate a

742
00:35:11,620 --> 00:35:16,089
whole lot of a lot of kind of control

743
00:35:14,350 --> 00:35:20,290
plane and state and technologies that

744
00:35:16,090 --> 00:35:22,990
have that caused complexity sr v6 gives

745
00:35:20,290 --> 00:35:25,540
us incredible scale and with the network

746
00:35:22,990 --> 00:35:27,580
programming paradigm and micro program

747
00:35:25,540 --> 00:35:32,200
capabilities also a boatload of

748
00:35:27,580 --> 00:35:35,650
functionality this is all happening fast

749
00:35:32,200 --> 00:35:37,870
we're seeing great uptake and and are

750
00:35:35,650 --> 00:35:39,790
really excited about both customer

751
00:35:37,870 --> 00:35:42,279
implementations as well as the the

752
00:35:39,790 --> 00:35:46,210
growing list of hardware and open-source

753
00:35:42,280 --> 00:35:48,460
implementations and and again an

754
00:35:46,210 --> 00:35:50,920
extended version of this record or this

755
00:35:48,460 --> 00:35:53,760
presentation is recorded and going to be

756
00:35:50,920 --> 00:35:56,500
posted here in the next day or two

757
00:35:53,760 --> 00:35:58,300
final side just like some links for

758
00:35:56,500 --> 00:36:01,540
references places to learn more stuff

759
00:35:58,300 --> 00:36:04,210
like that and with that thank you very

760
00:36:01,540 --> 00:36:05,650
much thanks for sticking around too late

761
00:36:04,210 --> 00:36:08,220
in the afternoon on a wednesday at the

762
00:36:05,650 --> 00:36:08,220
end of the conference

763
00:36:13,210 --> 00:36:26,120
and I think we do have a bit of time if

764
00:36:16,070 --> 00:36:32,470
anyone has questions yeah yeah hi I deal

765
00:36:26,120 --> 00:36:35,029
from Alibaba mm-hmm I understand this

766
00:36:32,470 --> 00:36:38,000
segment routing technology has been

767
00:36:35,030 --> 00:36:40,460
already deployed in some the service

768
00:36:38,000 --> 00:36:43,430
provider network mm-hmm as well as the

769
00:36:40,460 --> 00:36:47,090
enterprise yeah maybe in their core

770
00:36:43,430 --> 00:36:50,830
networks do you see any chance to apply

771
00:36:47,090 --> 00:36:54,710
this technology into the data center or

772
00:36:50,830 --> 00:36:59,420
in your deployment case you I think I

773
00:36:54,710 --> 00:37:01,520
think s rv6 absolutely could apply in

774
00:36:59,420 --> 00:37:03,440
the data center I think it it has a

775
00:37:01,520 --> 00:37:06,170
better shot of applying than segment

776
00:37:03,440 --> 00:37:09,500
routing itself because data center

777
00:37:06,170 --> 00:37:11,000
fabrics have been IP only for so long

778
00:37:09,500 --> 00:37:14,630
it's it's very difficult to introduce

779
00:37:11,000 --> 00:37:17,480
MPLS and label switching into into data

780
00:37:14,630 --> 00:37:20,110
center especially that's like the MS DC

781
00:37:17,480 --> 00:37:23,120
kind of data center scaled data centers

782
00:37:20,110 --> 00:37:26,030
sr v6 though could absolutely be

783
00:37:23,120 --> 00:37:28,250
introduced in data center and as so long

784
00:37:26,030 --> 00:37:31,160
as the data center IP fabric is dual

785
00:37:28,250 --> 00:37:33,860
stack I know that at least cloud

786
00:37:31,160 --> 00:37:36,440
operators they they control the

787
00:37:33,860 --> 00:37:39,830
encapsulation at the at the host itself

788
00:37:36,440 --> 00:37:42,980
within the hypervisor stack so they

789
00:37:39,830 --> 00:37:44,509
could take advantage of SR v6 by just

790
00:37:42,980 --> 00:37:46,970
doing the end cap at the host and then

791
00:37:44,510 --> 00:37:49,580
keeping the data center at fabric itself

792
00:37:46,970 --> 00:37:55,390
ipv6 so I think it's hugely applicable

793
00:37:49,580 --> 00:37:55,390
to cloud operators yeah thank you yeah

794
00:37:56,990 --> 00:38:04,430
any others okay well thanks folks

795
00:38:02,010 --> 00:38:04,430
appreciate it

