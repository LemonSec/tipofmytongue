1
00:00:00,000 --> 00:00:03,929
<font color="#CCCCCC">it started</font><font color="#E5E5E5"> I'm hoping other people will</font>

2
00:00:02,310 --> 00:00:05,160
come in<font color="#E5E5E5"> the first part of the</font>

3
00:00:03,929 --> 00:00:06,720
presentation is more just<font color="#CCCCCC"> about like</font>

4
00:00:05,160 --> 00:00:07,980
what<font color="#E5E5E5"> Wireshark is where the current</font>

5
00:00:06,720 --> 00:00:12,389
<font color="#E5E5E5">status is what's going on with it and</font>

6
00:00:07,980 --> 00:00:13,740
<font color="#E5E5E5">stuff like that and let's get started if</font>

7
00:00:12,389 --> 00:00:15,629
you have any<font color="#E5E5E5"> questions</font><font color="#CCCCCC"> just send me an</font>

8
00:00:13,740 --> 00:00:17,910
email<font color="#E5E5E5"> a SS cocom there's obviously a</font>

9
00:00:15,630 --> 00:00:20,760
very good Wireshark support<font color="#E5E5E5"> ilyas that's</font>

10
00:00:17,910 --> 00:00:24,269
on there<font color="#CCCCCC"> I got references to it near the</font>

11
00:00:20,760 --> 00:00:27,029
<font color="#CCCCCC">end of</font><font color="#E5E5E5"> the presentation so what is</font>

12
00:00:24,269 --> 00:00:29,490
Wireshark so Wireshark is a free open

13
00:00:27,029 --> 00:00:30,420
source network protocol analyzer I'm not

14
00:00:29,490 --> 00:00:32,430
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to call it a network sniffer</font>

15
00:00:30,420 --> 00:00:34,980
apparently that's<font color="#E5E5E5"> a trademark name so</font>

16
00:00:32,430 --> 00:00:38,750
<font color="#E5E5E5">stay away from that it is multi-platform</font>

17
00:00:34,980 --> 00:00:42,328
he runs on Windows Linux Solaris the mac

18
00:00:38,750 --> 00:00:45,149
which is sort of<font color="#CCCCCC"> Applied net bsd freebsd</font>

19
00:00:42,329 --> 00:00:48,079
and a number of other platforms<font color="#CCCCCC"> there's</font>

20
00:00:45,149 --> 00:00:50,280
<font color="#E5E5E5">a CLI as well as a graphical display</font>

21
00:00:48,079 --> 00:00:52,020
there's hundreds of protocol supported

22
00:00:50,280 --> 00:00:53,399
their more being added every week so if

23
00:00:52,020 --> 00:00:55,500
you<font color="#E5E5E5"> just sit on the development list</font>

24
00:00:53,399 --> 00:01:00,289
you'll see like a new support then come

25
00:00:55,500 --> 00:01:02,460
<font color="#CCCCCC">in every pretty much every week even</font>

26
00:01:00,289 --> 00:01:04,140
though it is free there are people<font color="#CCCCCC"> that</font>

27
00:01:02,460 --> 00:01:05,729
work on it that spend lots of time on<font color="#CCCCCC"> it</font>

28
00:01:04,140 --> 00:01:07,830
it was originally<font color="#CCCCCC"> created by a drill</font>

29
00:01:05,729 --> 00:01:10,380
combs he would while he was a master

30
00:01:07,830 --> 00:01:13,439
student he was a greater easily

31
00:01:10,380 --> 00:01:15,500
developers since 1998 there's<font color="#E5E5E5"> lots of</font>

32
00:01:13,439 --> 00:01:18,449
other people to work on it guy Harris

33
00:01:15,500 --> 00:01:20,909
person from MIT he is one of<font color="#E5E5E5"> the main</font>

34
00:01:18,450 --> 00:01:23,130
Tanner's Gilbert Ramirez he's a<font color="#E5E5E5"> cisco</font>

35
00:01:20,909 --> 00:01:24,600
employee<font color="#E5E5E5"> moved over to</font><font color="#CCCCCC"> India he works on</font>

36
00:01:23,130 --> 00:01:25,770
the windows implementation he built it

37
00:01:24,600 --> 00:01:28,048
sends it<font color="#E5E5E5"> out and stuff like that there</font>

38
00:01:25,770 --> 00:01:30,449
<font color="#CCCCCC">are many many contribution tribute errs</font>

39
00:01:28,049 --> 00:01:32,159
and there's a there's an author lists

40
00:01:30,450 --> 00:01:33,570
<font color="#E5E5E5">I'm a self I'm on there there's lots of</font>

41
00:01:32,159 --> 00:01:35,790
you I'm sure there's people in this room

42
00:01:33,570 --> 00:01:38,520
that<font color="#E5E5E5"> have contributed to it there's a</font>

43
00:01:35,790 --> 00:01:40,200
lip pcap folks of you guys if you're

44
00:01:38,520 --> 00:01:42,210
<font color="#E5E5E5">familiar with the bsd implementations of</font>

45
00:01:40,200 --> 00:01:43,979
the pcap<font color="#CCCCCC"> richard stevens go through a</font>

46
00:01:42,210 --> 00:01:46,020
lot<font color="#CCCCCC"> of stuff in his book on it on a</font>

47
00:01:43,979 --> 00:01:47,880
seminal book then there's the<font color="#E5E5E5"> wind peek</font>

48
00:01:46,020 --> 00:01:49,589
at folks which have<font color="#E5E5E5"> taken the lippy cap</font>

49
00:01:47,880 --> 00:01:53,929
code and made it work on the<font color="#CCCCCC"> windows</font>

50
00:01:49,590 --> 00:01:56,700
<font color="#E5E5E5">platform and recently with wireshark</font>

51
00:01:53,930 --> 00:01:59,250
<font color="#E5E5E5">with the Wireshark renaming from me too</font>

52
00:01:56,700 --> 00:02:01,350
real there's a company that's been

53
00:01:59,250 --> 00:02:02,969
formed and<font color="#E5E5E5"> I'm probably going to not say</font>

54
00:02:01,350 --> 00:02:07,199
it right so I'll just spell it CAC<font color="#CCCCCC"> e</font>

55
00:02:02,969 --> 00:02:08,929
technologies which basically is funding

56
00:02:07,200 --> 00:02:12,150
a lot of some of the development for

57
00:02:08,929 --> 00:02:15,239
wooden pcap Wireshark a lot of

58
00:02:12,150 --> 00:02:16,530
<font color="#CCCCCC">the stuff okay they do trainings and</font>

59
00:02:15,239 --> 00:02:20,390
stuff like that I'm<font color="#CCCCCC"> not in any way</font>

60
00:02:16,530 --> 00:02:24,120
associated with them just a cisco person

61
00:02:20,390 --> 00:02:25,170
so how<font color="#E5E5E5"> is why shark used today like</font><font color="#CCCCCC"> i</font>

62
00:02:24,120 --> 00:02:26,239
said<font color="#CCCCCC"> i was in the attack we use it in</font>

63
00:02:25,170 --> 00:02:28,439
trouble shooting all the time

64
00:02:26,239 --> 00:02:30,239
performance<font color="#E5E5E5"> issues it really helps out</font>

65
00:02:28,439 --> 00:02:32,790
over there<font color="#CCCCCC"> attique as you know the pcap</font>

66
00:02:30,239 --> 00:02:34,140
format encodes the<font color="#CCCCCC"> timestamps of when</font>

67
00:02:32,790 --> 00:02:35,819
the packets were taken and you can take

68
00:02:34,140 --> 00:02:37,950
you can<font color="#E5E5E5"> do Delta's in between where the</font>

69
00:02:35,819 --> 00:02:39,839
packets are coming and going people use

70
00:02:37,950 --> 00:02:41,578
it<font color="#E5E5E5"> for security analysis see what ports</font>

71
00:02:39,840 --> 00:02:42,989
are open which ports are are going on

72
00:02:41,579 --> 00:02:46,590
what other ports of particular session

73
00:02:42,989 --> 00:02:48,659
is using i use it for learning about a

74
00:02:46,590 --> 00:02:50,970
protocol like when new things get added

75
00:02:48,659 --> 00:02:53,040
<font color="#E5E5E5">into bgp better I mean sometimes it's</font>

76
00:02:50,970 --> 00:02:55,019
better you have the RFC on one side<font color="#E5E5E5"> and</font>

77
00:02:53,040 --> 00:02:56,459
you have the debug trace on the other

78
00:02:55,019 --> 00:03:00,060
side and<font color="#E5E5E5"> you look at what actually the</font>

79
00:02:56,459 --> 00:03:01,379
implementation is doing many times what

80
00:03:00,060 --> 00:03:02,939
the RFC is saying is not what the

81
00:03:01,379 --> 00:03:05,548
implementation is doing even if it's

82
00:03:02,939 --> 00:03:07,950
written by<font color="#E5E5E5"> the authors so these things</font>

83
00:03:05,549 --> 00:03:09,720
have been known to happen protocol

84
00:03:07,950 --> 00:03:11,700
development so I know the<font color="#CCCCCC"> net flow</font>

85
00:03:09,720 --> 00:03:15,150
developer I'm actually the one of the

86
00:03:11,700 --> 00:03:17,638
one of<font color="#E5E5E5"> the tMI's for net flow and we use</font>

87
00:03:15,150 --> 00:03:18,989
<font color="#E5E5E5">it every day for</font><font color="#CCCCCC"> a net flow development</font>

88
00:03:17,639 --> 00:03:20,459
and but in fact<font color="#E5E5E5"> when you come up with</font>

89
00:03:18,989 --> 00:03:25,109
new fields and stuff like that we verify

90
00:03:20,459 --> 00:03:27,419
that<font color="#E5E5E5"> it's decoding it properly okay the</font>

91
00:03:25,109 --> 00:03:28,859
Wireshark website looks<font color="#E5E5E5"> like this it's</font>

92
00:03:27,419 --> 00:03:30,709
got you can get the source tarball you

93
00:03:28,859 --> 00:03:33,750
can get the svn repository used to BCBS

94
00:03:30,709 --> 00:03:36,480
svn is let's say it's<font color="#E5E5E5"> just a new name</font>

95
00:03:33,750 --> 00:03:38,129
for CBS<font color="#CCCCCC"> i'll come more into that there's</font>

96
00:03:36,480 --> 00:03:40,048
multi-platform compiled sources there

97
00:03:38,129 --> 00:03:41,190
there's documentation there I'm gonna

98
00:03:40,049 --> 00:03:43,019
answer the question which is<font color="#CCCCCC"> a partly</font>

99
00:03:41,190 --> 00:03:44,250
going to come up later is why is it

100
00:03:43,019 --> 00:03:46,590
called Wireshark and naughty thrill

101
00:03:44,250 --> 00:03:48,389
anymore the reason is that drill combs

102
00:03:46,590 --> 00:03:49,470
when he left the company that<font color="#E5E5E5"> he was</font>

103
00:03:48,389 --> 00:03:51,810
formula with and I don't know<font color="#E5E5E5"> the name</font>

104
00:03:49,470 --> 00:03:53,099
<font color="#E5E5E5">of the company it apparently had the</font>

105
00:03:51,810 --> 00:03:55,139
rights to<font color="#E5E5E5"> the ethereal name and the</font>

106
00:03:53,099 --> 00:03:57,478
website so rather<font color="#E5E5E5"> than trying to fight</font>

107
00:03:55,139 --> 00:04:03,449
<font color="#CCCCCC">with the company he just renamed the</font>

108
00:03:57,479 --> 00:04:04,260
program which is a GPL source<font color="#CCCCCC"> okay the</font>

109
00:04:03,449 --> 00:04:06,329
other<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> I found really interesting</font>

110
00:04:04,260 --> 00:04:08,310
is if started up a Wireshark wiki and

111
00:04:06,329 --> 00:04:11,340
there's lots<font color="#E5E5E5"> of protocol references over</font>

112
00:04:08,310 --> 00:04:12,599
there if<font color="#E5E5E5"> you go look up like like</font><font color="#CCCCCC"> dealer</font>

113
00:04:11,340 --> 00:04:14,190
<font color="#E5E5E5">i was looking at like for some stuff</font>

114
00:04:12,599 --> 00:04:15,418
under<font color="#E5E5E5"> truitt azhar because i think like</font>

115
00:04:14,190 --> 00:04:17,099
vista has a bug in it or something like

116
00:04:15,419 --> 00:04:21,630
that I won't say<font color="#CCCCCC"> that too loud with her</font>

117
00:04:17,099 --> 00:04:23,099
Redmond folks here but it has a pretty

118
00:04:21,630 --> 00:04:24,719
<font color="#E5E5E5">good description of how i tutor</font>

119
00:04:23,099 --> 00:04:25,370
<font color="#CCCCCC">softworks what it even</font><font color="#E5E5E5"> has a packet</font>

120
00:04:24,719 --> 00:04:26,719
trace

121
00:04:25,370 --> 00:04:27,830
what it should be<font color="#E5E5E5"> looking like and what</font>

122
00:04:26,720 --> 00:04:30,290
fuels should be filled in and how this

123
00:04:27,830 --> 00:04:31,940
should be<font color="#CCCCCC"> building there's a SAT there's</font>

124
00:04:30,290 --> 00:04:33,949
a growing sample pcap library if you

125
00:04:31,940 --> 00:04:36,830
guys have pcap so you can share please

126
00:04:33,949 --> 00:04:38,060
add it to that website<font color="#CCCCCC"> I'm taking out</font>

127
00:04:36,830 --> 00:04:40,909
any security things that you<font color="#E5E5E5"> have in</font>

128
00:04:38,060 --> 00:04:43,100
there I'm sure you guys are<font color="#E5E5E5"> already</font>

129
00:04:40,910 --> 00:04:45,199
familiar with this this is what the the

130
00:04:43,100 --> 00:04:48,260
GUI looks like less you'd be working in

131
00:04:45,199 --> 00:04:50,540
the middle pane this paint over here if

132
00:04:48,260 --> 00:04:52,010
you can see<font color="#CCCCCC"> the point yeah you can so</font>

133
00:04:50,540 --> 00:04:53,389
we'll be adding stuff that'll get

134
00:04:52,010 --> 00:04:57,860
populated over there i<font color="#E5E5E5"> have an example</font>

135
00:04:53,389 --> 00:04:59,300
<font color="#E5E5E5">that will be going</font><font color="#CCCCCC"> through</font><font color="#E5E5E5"> okay as you</font>

136
00:04:57,860 --> 00:05:01,340
know you can acquire packets<font color="#E5E5E5"> you can</font>

137
00:04:59,300 --> 00:05:02,570
choose there's a little display that

138
00:05:01,340 --> 00:05:03,919
shows up that shows you like how many

139
00:05:02,570 --> 00:05:06,169
<font color="#E5E5E5">packets you've captured what type they</font>

140
00:05:03,919 --> 00:05:07,340
are<font color="#E5E5E5"> I wish you really wish they had CDP</font>

141
00:05:06,169 --> 00:05:08,479
over there because<font color="#CCCCCC"> a lot of times</font><font color="#E5E5E5"> I'm</font>

142
00:05:07,340 --> 00:05:09,888
trying to figure<font color="#CCCCCC"> out I'm sitting on</font><font color="#E5E5E5"> the</font>

143
00:05:08,479 --> 00:05:11,900
<font color="#E5E5E5">host which hosts am I connected to</font>

144
00:05:09,889 --> 00:05:14,060
what's a switchboard I'm connected<font color="#CCCCCC"> to</font>

145
00:05:11,900 --> 00:05:15,289
and CDP really helps over there so I

146
00:05:14,060 --> 00:05:16,550
don't<font color="#CCCCCC"> have I don't know how long have to</font>

147
00:05:15,289 --> 00:05:22,090
wait to get this e to be back up<font color="#CCCCCC"> but</font>

148
00:05:16,550 --> 00:05:22,090
yeah<font color="#CCCCCC"> okay then there's capture</font><font color="#E5E5E5"> options</font>

149
00:05:22,389 --> 00:05:26,150
the only thing<font color="#E5E5E5"> I would I think you guys</font>

150
00:05:24,620 --> 00:05:28,220
probably familiar with us what's kind<font color="#E5E5E5"> of</font>

151
00:05:26,150 --> 00:05:30,320
nice is that you can have rotating

152
00:05:28,220 --> 00:05:33,710
buffers in queue which case if you<font color="#E5E5E5"> don't</font>

153
00:05:30,320 --> 00:05:34,669
<font color="#E5E5E5">really know how much in case you don't</font>

154
00:05:33,710 --> 00:05:35,840
<font color="#E5E5E5">really don't know how much traffic</font>

155
00:05:34,669 --> 00:05:37,909
you're going to be capturing you can

156
00:05:35,840 --> 00:05:39,530
capture to multiple places and it can

157
00:05:37,910 --> 00:05:41,030
keep on rotating through them you can

158
00:05:39,530 --> 00:05:43,849
have<font color="#E5E5E5"> another file to go through and</font>

159
00:05:41,030 --> 00:05:47,119
<font color="#E5E5E5">checks the the logs instead of the pcap</font>

160
00:05:43,849 --> 00:05:49,520
file and everything<font color="#E5E5E5"> okay one thing to</font>

161
00:05:47,120 --> 00:05:52,789
keep in mind about III ill and Wireshark

162
00:05:49,520 --> 00:05:56,510
and stuff like that is generally these

163
00:05:52,789 --> 00:05:58,370
tools run with with root so to put<font color="#E5E5E5"> the</font>

164
00:05:56,510 --> 00:05:59,659
port into promiscuous mode you<font color="#E5E5E5"> have to</font>

165
00:05:58,370 --> 00:06:01,729
be<font color="#E5E5E5"> super user and have to run a super</font>

166
00:05:59,660 --> 00:06:03,410
user<font color="#E5E5E5"> so there have been security issues</font>

167
00:06:01,729 --> 00:06:04,969
with wireshark code in the past and

168
00:06:03,410 --> 00:06:07,160
generally<font color="#E5E5E5"> I mean you have to realize</font>

169
00:06:04,970 --> 00:06:09,560
<font color="#CCCCCC">that there are lots of people putting in</font>

170
00:06:07,160 --> 00:06:11,690
code into Wireshark every single week so

171
00:06:09,560 --> 00:06:14,210
it's not surprising to have breakage

172
00:06:11,690 --> 00:06:16,940
here and there so one recommendation is

173
00:06:14,210 --> 00:06:18,799
to use another program TCP dump which

174
00:06:16,940 --> 00:06:20,510
also is capable generating a pcap file

175
00:06:18,800 --> 00:06:24,020
to do the actual capture and then you do

176
00:06:20,510 --> 00:06:25,940
the analysis then in e3l or white shirt

177
00:06:24,020 --> 00:06:28,340
or<font color="#CCCCCC"> the other option is</font><font color="#E5E5E5"> to use t-shirt</font>

178
00:06:25,940 --> 00:06:30,320
which and only use it for the actual

179
00:06:28,340 --> 00:06:32,530
capturing all right which is puts it at

180
00:06:30,320 --> 00:06:35,280
the same line is where TCP dump is today

181
00:06:32,530 --> 00:06:38,950
<font color="#CCCCCC">okay</font>

182
00:06:35,280 --> 00:06:39,969
in terms of getting the<font color="#CCCCCC"> captures this is</font>

183
00:06:38,950 --> 00:06:42,700
probably the only time<font color="#E5E5E5"> I'm going to be</font>

184
00:06:39,970 --> 00:06:44,770
talking about<font color="#E5E5E5"> Cisco so don't bash me for</font>

185
00:06:42,700 --> 00:06:47,229
like being<font color="#E5E5E5"> bender I just put in Juna so</font>

186
00:06:44,770 --> 00:06:49,510
should be hat it should be clear there

187
00:06:47,230 --> 00:06:51,220
so there are<font color="#E5E5E5"> lots of ways of getting the</font>

188
00:06:49,510 --> 00:06:53,050
pcap files or getting the capture data

189
00:06:51,220 --> 00:06:54,940
so if you have a switch there's features

190
00:06:53,050 --> 00:06:56,890
like span<font color="#CCCCCC"> are</font><font color="#E5E5E5"> span which lets you go to</font>

191
00:06:54,940 --> 00:06:58,480
a remote router and you can switch<font color="#CCCCCC"> to a</font>

192
00:06:56,890 --> 00:07:00,820
local analyze report you<font color="#E5E5E5"> have a PC</font>

193
00:06:58,480 --> 00:07:03,730
hanging off of their vendors have IP

194
00:07:00,820 --> 00:07:05,610
packet cop packet copy features so

195
00:07:03,730 --> 00:07:07,780
there's an ER span which basically

196
00:07:05,610 --> 00:07:09,910
encapsulate the captured packet into a

197
00:07:07,780 --> 00:07:11,710
GRE and<font color="#E5E5E5"> you can send it anywhere you</font>

198
00:07:09,910 --> 00:07:13,510
<font color="#E5E5E5">want and general people have have done</font>

199
00:07:11,710 --> 00:07:16,090
<font color="#CCCCCC">is they'll create like a</font><font color="#E5E5E5"> loop back on a</font>

200
00:07:13,510 --> 00:07:17,349
Linux box and advertise that lint of the

201
00:07:16,090 --> 00:07:20,560
reach ability for that prefix and

202
00:07:17,350 --> 00:07:23,020
they'll capture it on that box there's

203
00:07:20,560 --> 00:07:24,940
iOS IP traffic export which does the

204
00:07:23,020 --> 00:07:25,750
same thing on iOS<font color="#CCCCCC"> Fox the additional</font>

205
00:07:24,940 --> 00:07:27,580
feature with that is<font color="#E5E5E5"> you can actually</font>

206
00:07:25,750 --> 00:07:29,500
<font color="#E5E5E5">create the pcap file locally on your</font>

207
00:07:27,580 --> 00:07:31,780
flash or if you have<font color="#CCCCCC"> a you</font><font color="#E5E5E5"> and like the</font>

208
00:07:29,500 --> 00:07:33,070
newer boxes have USB keys you can<font color="#E5E5E5"> stick</font>

209
00:07:31,780 --> 00:07:35,500
in you can you can save it<font color="#E5E5E5"> on there as</font>

210
00:07:33,070 --> 00:07:37,480
<font color="#CCCCCC">well junus has port mirroring very</font>

211
00:07:35,500 --> 00:07:38,890
similar to the<font color="#CCCCCC"> span feature</font><font color="#E5E5E5"> I believe</font>

212
00:07:37,480 --> 00:07:41,980
you<font color="#E5E5E5"> can do sampling and filtering at the</font>

213
00:07:38,890 --> 00:07:43,300
same time flexible net flow if you

214
00:07:41,980 --> 00:07:45,760
aren't familiar with flexible net flow

215
00:07:43,300 --> 00:07:49,180
it has the capability to basically

216
00:07:45,760 --> 00:07:50,530
export the payload of the packet of the

217
00:07:49,180 --> 00:07:53,590
<font color="#E5E5E5">entire payload of the packet to the</font>

218
00:07:50,530 --> 00:07:54,940
Nephil collector<font color="#CCCCCC"> okay and I</font><font color="#E5E5E5"> think</font>

219
00:07:53,590 --> 00:07:57,549
there's alluded to earlier<font color="#E5E5E5"> this week</font>

220
00:07:54,940 --> 00:07:59,500
<font color="#E5E5E5">about that you can use the lawful</font>

221
00:07:57,550 --> 00:08:01,000
intercept features that are in our part

222
00:07:59,500 --> 00:08:02,260
in our<font color="#CCCCCC"> Hardware if you can figure out</font>

223
00:08:01,000 --> 00:08:04,990
how to use them<font color="#E5E5E5"> and if you know how to</font>

224
00:08:02,260 --> 00:08:08,260
use snmpv3 because that's how<font color="#E5E5E5"> you get to</font>

225
00:08:04,990 --> 00:08:11,050
<font color="#CCCCCC">it there's embedded capture there's a</font>

226
00:08:08,260 --> 00:08:13,240
6500 you can do a monitor type capture

227
00:08:11,050 --> 00:08:15,700
there's other like platforms out there

228
00:08:13,240 --> 00:08:17,020
that basically run t3 along them so one

229
00:08:15,700 --> 00:08:19,840
example that we have is there's a<font color="#CCCCCC"> woz</font>

230
00:08:17,020 --> 00:08:21,310
way module that we sell that<font color="#E5E5E5"> Cisco cells</font>

231
00:08:19,840 --> 00:08:22,869
that has the stuff that it can you

232
00:08:21,310 --> 00:08:24,400
basically run like the the free software

233
00:08:22,870 --> 00:08:26,440
on there and it captures the pcap file

234
00:08:24,400 --> 00:08:28,090
for you so a lot of platforms have that

235
00:08:26,440 --> 00:08:30,190
then there's also specialized hardware

236
00:08:28,090 --> 00:08:31,750
is that vendor cell so in the the cisco

237
00:08:30,190 --> 00:08:34,059
example for that is<font color="#E5E5E5"> nat modules you can</font>

238
00:08:31,750 --> 00:08:37,150
stick inside<font color="#E5E5E5"> a 6500 or nice are there's</font>

239
00:08:34,059 --> 00:08:39,130
a net QSI believed as the same type of i

240
00:08:37,150 --> 00:08:42,159
I'm sorry netscout probably does the

241
00:08:39,130 --> 00:08:43,450
same type of stuff as well<font color="#CCCCCC"> okay so there</font>

242
00:08:42,159 --> 00:08:45,939
are some current limitations with the

243
00:08:43,450 --> 00:08:47,920
pcap file format one is that there's

244
00:08:45,940 --> 00:08:48,850
<font color="#E5E5E5">only a single link type profile so if</font>

245
00:08:47,920 --> 00:08:50,649
you look<font color="#E5E5E5"> at this case</font>

246
00:08:48,850 --> 00:08:54,279
if you<font color="#E5E5E5"> look at the IP packet copy</font>

247
00:08:50,649 --> 00:08:55,600
feature<font color="#E5E5E5"> all right a router can have ATM</font>

248
00:08:54,279 --> 00:08:56,889
interfaces it can have ethernet

249
00:08:55,600 --> 00:08:58,990
interfaces it can have<font color="#E5E5E5"> variability</font>

250
00:08:56,889 --> 00:09:01,180
interfaces hanging off of it when it

251
00:08:58,990 --> 00:09:02,470
does when you're capturing on multiple

252
00:09:01,180 --> 00:09:03,910
interfaces let's say you're copying on a

253
00:09:02,470 --> 00:09:05,949
particular destination address or source

254
00:09:03,910 --> 00:09:07,360
address which how do you represent that

255
00:09:05,949 --> 00:09:09,219
in a peek at<font color="#E5E5E5"> all so today that's not</font>

256
00:09:07,360 --> 00:09:11,110
possible there are other things that are

257
00:09:09,220 --> 00:09:11,949
<font color="#E5E5E5">there running into limitations of peak</font>

258
00:09:11,110 --> 00:09:13,779
of like what if you want to do

259
00:09:11,949 --> 00:09:15,160
annotations within the<font color="#E5E5E5"> pcap file like</font>

260
00:09:13,779 --> 00:09:16,269
you were doing some sort<font color="#CCCCCC"> of analysis you</font>

261
00:09:15,160 --> 00:09:17,980
want to share your analysis of other

262
00:09:16,269 --> 00:09:19,600
people you want<font color="#E5E5E5"> to do commenting on on a</font>

263
00:09:17,980 --> 00:09:21,100
particular frame or a particular section

264
00:09:19,600 --> 00:09:24,819
of<font color="#E5E5E5"> the packet there isn't really a way</font>

265
00:09:21,100 --> 00:09:26,949
to do that today there is a solution

266
00:09:24,819 --> 00:09:29,920
that's<font color="#E5E5E5"> being going to be available in in</font>

267
00:09:26,949 --> 00:09:32,439
the<font color="#E5E5E5"> next version of Wireshark 0.99 6</font>

268
00:09:29,920 --> 00:09:33,579
it's called the<font color="#E5E5E5"> PPI the per packet</font>

269
00:09:32,440 --> 00:09:35,920
information header so you're<font color="#E5E5E5"> familiar</font>

270
00:09:33,579 --> 00:09:37,420
with mpls type technologies a bit or a

271
00:09:35,920 --> 00:09:41,500
toe to toe<font color="#CCCCCC"> on cue we they're basically</font>

272
00:09:37,420 --> 00:09:43,540
<font color="#E5E5E5">adding in a new shim in the pcap format</font>

273
00:09:41,500 --> 00:09:45,220
so this shim will allow you to basically

274
00:09:43,540 --> 00:09:46,529
add in utl v's and you can put in

275
00:09:45,220 --> 00:09:50,920
whatever type of information<font color="#E5E5E5"> you want</font>

276
00:09:46,529 --> 00:09:53,860
<font color="#CCCCCC">okay so once you've got your frames you</font>

277
00:09:50,920 --> 00:09:56,110
can<font color="#E5E5E5"> do</font><font color="#CCCCCC"> all sorts of analysis on it in</font>

278
00:09:53,860 --> 00:09:58,480
this example I'm doing I'm doing a

279
00:09:56,110 --> 00:10:00,250
filter a display filter for CDP it shows

280
00:09:58,480 --> 00:10:03,250
you all the CDP fault frames that were

281
00:10:00,250 --> 00:10:05,769
captured and this one it's showing you

282
00:10:03,250 --> 00:10:09,819
the session the the<font color="#CCCCCC"> back and forth of</font>

283
00:10:05,769 --> 00:10:12,040
some of the stuff and there's some

284
00:10:09,819 --> 00:10:13,329
expert analysis so there's some

285
00:10:12,040 --> 00:10:14,680
commercial programs that do this<font color="#E5E5E5"> a whole</font>

286
00:10:13,329 --> 00:10:16,269
<font color="#CCCCCC">lot better but this is the cheap man's</font>

287
00:10:14,680 --> 00:10:17,589
expert analysis it tells you that

288
00:10:16,269 --> 00:10:19,029
there's some duplicate acts there's some

289
00:10:17,589 --> 00:10:20,470
<font color="#CCCCCC">keep-alive</font><font color="#E5E5E5"> acts it gives you like</font><font color="#CCCCCC"> a</font>

290
00:10:19,029 --> 00:10:22,149
basically lay of the land of what's

291
00:10:20,470 --> 00:10:27,160
going<font color="#E5E5E5"> on with with your</font><font color="#CCCCCC"> CC Beach</font><font color="#E5E5E5"> essence</font>

292
00:10:22,149 --> 00:10:29,110
or with other sessions as well there's

293
00:10:27,160 --> 00:10:31,930
some histogram type stuff on packet

294
00:10:29,110 --> 00:10:33,459
length as well as so this is one of<font color="#E5E5E5"> the</font>

295
00:10:31,930 --> 00:10:36,099
more<font color="#E5E5E5"> interesting things I use this</font>

296
00:10:33,459 --> 00:10:38,500
recently with I was doing<font color="#E5E5E5"> net flow</font>

297
00:10:36,100 --> 00:10:40,660
performance analysis on routers like how

298
00:10:38,500 --> 00:10:42,880
fast can a router how many records<font color="#E5E5E5"> per</font>

299
00:10:40,660 --> 00:10:44,439
second can<font color="#E5E5E5"> I texsport so that's to keep</font>

300
00:10:42,880 --> 00:10:45,759
<font color="#E5E5E5">in mind that's not the same</font><font color="#CCCCCC"> as packets</font>

301
00:10:44,439 --> 00:10:48,130
per second because<font color="#E5E5E5"> there could be</font>

302
00:10:45,759 --> 00:10:51,880
multiple records inside of a packet so

303
00:10:48,130 --> 00:10:54,370
using the using an expression<font color="#E5E5E5"> you can</font>

304
00:10:51,880 --> 00:10:56,170
<font color="#E5E5E5">actually make Wireshark count the number</font>

305
00:10:54,370 --> 00:10:57,639
of net flow records that are inside of<font color="#CCCCCC"> a</font>

306
00:10:56,170 --> 00:10:59,349
particular packet and do a histogram

307
00:10:57,639 --> 00:11:01,000
analysis on and saying and you can come

308
00:10:59,350 --> 00:11:02,980
up with a chart very much like this that

309
00:11:01,000 --> 00:11:05,320
says on this particular

310
00:11:02,980 --> 00:11:06,639
time this was how many<font color="#CCCCCC"> records</font><font color="#E5E5E5"> per</font>

311
00:11:05,320 --> 00:11:08,709
second were being exported from the pack

312
00:11:06,639 --> 00:11:13,180
just by<font color="#E5E5E5"> that despite having the pcap</font>

313
00:11:08,709 --> 00:11:14,260
<font color="#E5E5E5">father for you all right just get</font><font color="#CCCCCC"> to the</font>

314
00:11:13,180 --> 00:11:16,149
stuff that we really want<font color="#E5E5E5"> to talk about</font>

315
00:11:14,260 --> 00:11:17,740
so first I'm going<font color="#E5E5E5"> to go through like</font>

316
00:11:16,149 --> 00:11:19,510
some basic architectural stuff like how

317
00:11:17,740 --> 00:11:20,980
<font color="#CCCCCC">does the actual dissection work which is</font>

318
00:11:19,510 --> 00:11:22,329
<font color="#E5E5E5">what they call decoding decoding is</font>

319
00:11:20,980 --> 00:11:23,620
known as dissection in the<font color="#E5E5E5"> wireshark</font>

320
00:11:22,329 --> 00:11:27,638
world and then we'll go through<font color="#E5E5E5"> an</font>

321
00:11:23,620 --> 00:11:29,019
actual example<font color="#CCCCCC"> okay wireshark</font>

322
00:11:27,639 --> 00:11:30,610
limitations the way it works is there's

323
00:11:29,019 --> 00:11:31,899
only really one file open at one time

324
00:11:30,610 --> 00:11:33,310
that you're analyzing if you want to

325
00:11:31,899 --> 00:11:35,800
open another file open up a new

326
00:11:33,310 --> 00:11:38,319
Wireshark each packet basically has a

327
00:11:35,800 --> 00:11:40,689
frame data structure and it's basically

328
00:11:38,320 --> 00:11:42,339
<font color="#E5E5E5">think of it as a dual link list where</font>

329
00:11:40,690 --> 00:11:44,110
one frame data structure points to the

330
00:11:42,339 --> 00:11:46,120
next packet data structure to<font color="#E5E5E5"> the next</font>

331
00:11:44,110 --> 00:11:47,829
packets frame data structure and this

332
00:11:46,120 --> 00:11:49,810
this some data structure basically has

333
00:11:47,829 --> 00:11:52,000
information about the packet such as the

334
00:11:49,810 --> 00:11:53,888
time of capture<font color="#CCCCCC"> the size of the packet</font>

335
00:11:52,000 --> 00:11:55,959
and most importantly where to get the

336
00:11:53,889 --> 00:11:57,310
data like where it is the location of

337
00:11:55,959 --> 00:12:02,219
<font color="#E5E5E5">the actual data for that frame in the</font>

338
00:11:57,310 --> 00:12:04,300
file<font color="#CCCCCC"> okay once protocol dissection</font>

339
00:12:02,220 --> 00:12:07,720
starts it starts basically when<font color="#CCCCCC"> you</font>

340
00:12:04,300 --> 00:12:09,790
select on the on the on the top pane the

341
00:12:07,720 --> 00:12:11,230
actual packet and it will go through and

342
00:12:09,790 --> 00:12:13,389
it will basically decode the entire

343
00:12:11,230 --> 00:12:15,970
packet up until the end<font color="#E5E5E5"> so there's a</font>

344
00:12:13,389 --> 00:12:17,529
there will<font color="#E5E5E5"> be a link link layer</font>

345
00:12:15,970 --> 00:12:19,660
dissector which is generally going to be

346
00:12:17,529 --> 00:12:22,689
<font color="#E5E5E5">Ethernet in our cases the ethernet layer</font>

347
00:12:19,660 --> 00:12:24,880
will call the IP and then IP will call

348
00:12:22,690 --> 00:12:27,160
<font color="#CCCCCC">TCP and</font><font color="#E5E5E5"> then TC will call</font><font color="#CCCCCC"> bgp and then</font>

349
00:12:24,880 --> 00:12:28,660
bgp will have its own little dissection

350
00:12:27,160 --> 00:12:31,480
schemes for you know the different types

351
00:12:28,660 --> 00:12:33,010
of message types that are in there<font color="#E5E5E5"> okay</font>

352
00:12:31,480 --> 00:12:34,600
it keeps on basically<font color="#E5E5E5"> it keeps on</font>

353
00:12:33,010 --> 00:12:35,800
changing<font color="#E5E5E5"> until there's no more that</font>

354
00:12:34,600 --> 00:12:38,529
there's a dissector that doesn't really

355
00:12:35,800 --> 00:12:40,300
call anybody else<font color="#E5E5E5"> okay the dissectors</font>

356
00:12:38,529 --> 00:12:41,709
register a<font color="#CCCCCC"> startup they create a</font>

357
00:12:40,300 --> 00:12:42,910
parent-child relationship with other

358
00:12:41,709 --> 00:12:44,439
protocols<font color="#E5E5E5"> net sector so it's basically</font>

359
00:12:42,910 --> 00:12:45,790
when<font color="#CCCCCC"> you start up wireshark you'll see</font>

360
00:12:44,440 --> 00:12:48,010
like a little graph going up<font color="#E5E5E5"> and that's</font>

361
00:12:45,790 --> 00:12:49,510
when<font color="#E5E5E5"> the different dissectors and</font>

362
00:12:48,010 --> 00:12:52,959
plugins are basically registering in

363
00:12:49,510 --> 00:12:55,449
into this parent-child relationship okay

364
00:12:52,959 --> 00:12:57,699
in terms of dissection this is what this

365
00:12:55,449 --> 00:13:03,430
<font color="#E5E5E5">is where the</font><font color="#CCCCCC"> magic happens so if you</font>

366
00:12:57,699 --> 00:13:05,859
bear with me don't fall<font color="#CCCCCC"> asleep the tree</font>

367
00:13:03,430 --> 00:13:09,010
pain which is this thing over<font color="#E5E5E5"> here where</font>

368
00:13:05,860 --> 00:13:12,910
you see the<font color="#CCCCCC"> type IP which is an ethernet</font>

369
00:13:09,010 --> 00:13:15,550
frame so it's type IP 0 0<font color="#E5E5E5"> X 800 that is</font>

370
00:13:12,910 --> 00:13:16,660
being generated by a type function and

371
00:13:15,550 --> 00:13:18,219
most of the things in worse

372
00:13:16,660 --> 00:13:19,660
our car actually type functions so if

373
00:13:18,220 --> 00:13:22,089
you are familiar with how network

374
00:13:19,660 --> 00:13:23,860
protocols work almost<font color="#E5E5E5"> everything a lot</font>

375
00:13:22,089 --> 00:13:27,190
<font color="#E5E5E5">of things these days are basically tale</font>

376
00:13:23,860 --> 00:13:30,819
vs or you have some<font color="#E5E5E5"> sort of field a</font>

377
00:13:27,190 --> 00:13:32,350
fixed field that has particular like a

378
00:13:30,819 --> 00:13:34,839
valuable map to some sort of meaning

379
00:13:32,350 --> 00:13:39,009
right so in the case of the IP ethertype

380
00:13:34,839 --> 00:13:41,310
field 0 x 800 means IP right so what

381
00:13:39,009 --> 00:13:44,470
this<font color="#CCCCCC"> is what this is</font><font color="#E5E5E5"> doing its saying</font>

382
00:13:41,310 --> 00:13:47,050
this EF<font color="#CCCCCC"> eath type that's the name of the</font>

383
00:13:44,470 --> 00:13:49,209
actual the header format the name is

384
00:13:47,050 --> 00:13:50,709
called type which maps to this type name

385
00:13:49,209 --> 00:13:53,349
showing up over here then<font color="#E5E5E5"> there's an</font>

386
00:13:50,709 --> 00:13:55,660
abbreviation<font color="#CCCCCC"> eath type this maps to the</font>

387
00:13:53,350 --> 00:13:57,189
<font color="#E5E5E5">search capability in wireshark so when</font>

388
00:13:55,660 --> 00:14:00,129
you when you're trying<font color="#E5E5E5"> to do a search on</font>

389
00:13:57,189 --> 00:14:01,959
like a pretty much anything this is the

390
00:14:00,129 --> 00:14:04,120
normal closure you<font color="#CCCCCC"> will use so you'll</font>

391
00:14:01,959 --> 00:14:06,518
say<font color="#CCCCCC"> eath that type equals 0</font><font color="#E5E5E5"> X 800 and it</font>

392
00:14:04,120 --> 00:14:11,639
will pop out all the all the IP packets

393
00:14:06,519 --> 00:14:14,949
on the ethernet ok but then fuel type

394
00:14:11,639 --> 00:14:17,589
unsigned integer 16 this<font color="#E5E5E5"> basically means</font>

395
00:14:14,949 --> 00:14:20,740
it's two bytes<font color="#E5E5E5"> so whatever</font><font color="#CCCCCC"> the size of</font>

396
00:14:17,589 --> 00:14:22,149
<font color="#CCCCCC">that thing</font><font color="#E5E5E5"> is it's two bytes long right</font>

397
00:14:20,740 --> 00:14:23,439
that's how much that's how much data

398
00:14:22,149 --> 00:14:26,290
it's going to go grab once you tell it

399
00:14:23,439 --> 00:14:27,819
where in the packet to go go get when

400
00:14:26,290 --> 00:14:29,649
you display it you're going<font color="#E5E5E5"> to display</font>

401
00:14:27,819 --> 00:14:31,240
it as hex which is where the 0 x 800

402
00:14:29,649 --> 00:14:33,699
thing is coming<font color="#E5E5E5"> from you can display it</font>

403
00:14:31,240 --> 00:14:35,470
as a bit field which would be<font color="#CCCCCC"> at 0 0 1 1</font>

404
00:14:33,699 --> 00:14:39,399
1 whatever or you can display at hex or

405
00:14:35,470 --> 00:14:41,290
or as or decimal so the ballast eat at

406
00:14:39,399 --> 00:14:43,839
<font color="#E5E5E5">wells</font><font color="#CCCCCC"> there's basically</font><font color="#E5E5E5"> points to a</font>

407
00:14:41,290 --> 00:14:46,420
table<font color="#E5E5E5"> which I have below over here which</font>

408
00:14:43,839 --> 00:14:49,209
has the mappings so ethertype underscore

409
00:14:46,420 --> 00:14:52,269
IP it's a constant set to 0<font color="#E5E5E5"> X 800 and</font>

410
00:14:49,209 --> 00:14:53,560
that is IP the ipv6 one is it defined

411
00:14:52,269 --> 00:14:55,259
underneath and this went on for like

412
00:14:53,560 --> 00:14:58,810
several hundred line so I didn't cub I

413
00:14:55,259 --> 00:15:00,610
suppose nice to you guys if there was<font color="#CCCCCC"> a</font>

414
00:14:58,810 --> 00:15:02,559
bit mass that you needed<font color="#E5E5E5"> to like flush</font>

415
00:15:00,610 --> 00:15:03,910
this against this field against then you

416
00:15:02,559 --> 00:15:05,529
would put it in where the bit<font color="#E5E5E5"> mass</font>

417
00:15:03,910 --> 00:15:06,699
<font color="#E5E5E5">cassette so right now 0 x0 which means</font>

418
00:15:05,529 --> 00:15:08,800
you're going<font color="#E5E5E5"> to get whatever you put in</font>

419
00:15:06,699 --> 00:15:11,319
all right there's no there's no masking

420
00:15:08,800 --> 00:15:13,449
going up and the blurb is something<font color="#E5E5E5"> just</font>

421
00:15:11,319 --> 00:15:16,029
descriptive about what this field is you

422
00:15:13,449 --> 00:15:17,319
can put it you can put cookies and milk

423
00:15:16,029 --> 00:15:18,699
whatever it doesn't really matter in

424
00:15:17,319 --> 00:15:20,469
fact<font color="#E5E5E5"> most of them are actually left</font>

425
00:15:18,699 --> 00:15:21,910
blank this one in<font color="#E5E5E5"> the code was as she</font>

426
00:15:20,470 --> 00:15:24,189
left blank I just put<font color="#CCCCCC"> in either type</font>

427
00:15:21,910 --> 00:15:29,170
just<font color="#E5E5E5"> to be nice so it doesn't it make</font>

428
00:15:24,189 --> 00:15:30,459
sense<font color="#CCCCCC"> ok so this</font><font color="#E5E5E5"> was how you define the</font>

429
00:15:29,170 --> 00:15:32,829
actual field

430
00:15:30,460 --> 00:15:35,350
<font color="#CCCCCC">okay now you need to map these fields</font>

431
00:15:32,830 --> 00:15:36,970
into the actual lay of the packet like

432
00:15:35,350 --> 00:15:39,040
<font color="#CCCCCC">we're how do you how does this feel</font>

433
00:15:36,970 --> 00:15:41,140
<font color="#CCCCCC">mapped to</font><font color="#E5E5E5"> an actual packet and these are</font>

434
00:15:39,040 --> 00:15:43,530
<font color="#E5E5E5">done by a bunch of functions that</font><font color="#CCCCCC"> are in</font>

435
00:15:41,140 --> 00:15:46,330
the format proto something do something

436
00:15:43,530 --> 00:15:49,360
so generally is going to be proto tree

437
00:15:46,330 --> 00:15:51,250
add item and you can refer<font color="#CCCCCC"> to one of the</font>

438
00:15:49,360 --> 00:15:53,050
HQ fields and<font color="#CCCCCC"> I have an example we have</font>

439
00:15:51,250 --> 00:15:55,030
an example<font color="#E5E5E5"> for the runtimes that or you</font>

440
00:15:53,050 --> 00:15:56,260
could actually completely ignore the HF

441
00:15:55,030 --> 00:15:58,270
feels that we defined<font color="#E5E5E5"> earlier and just</font>

442
00:15:56,260 --> 00:16:00,220
<font color="#E5E5E5">come up with your own string and just</font>

443
00:15:58,270 --> 00:16:01,780
say you<font color="#CCCCCC"> can you can just put in whatever</font>

444
00:16:00,220 --> 00:16:04,780
you want in there and have an example<font color="#CCCCCC"> of</font>

445
00:16:01,780 --> 00:16:06,280
that as well<font color="#CCCCCC"> okay basically what it</font>

446
00:16:04,780 --> 00:16:08,920
<font color="#CCCCCC">means what it does is it basically</font>

447
00:16:06,280 --> 00:16:11,620
attaches a new tree to an existing tree

448
00:16:08,920 --> 00:16:13,479
so you basically have to find so in this

449
00:16:11,620 --> 00:16:16,000
case this<font color="#CCCCCC"> ether type thing was attaching</font>

450
00:16:13,480 --> 00:16:17,800
to the end of the ethernet packet at

451
00:16:16,000 --> 00:16:19,240
that point in time right and<font color="#CCCCCC"> I'll show</font>

452
00:16:17,800 --> 00:16:22,089
<font color="#CCCCCC">you</font><font color="#E5E5E5"> how that works</font><font color="#CCCCCC"> when you work through</font>

453
00:16:19,240 --> 00:16:26,020
the example<font color="#CCCCCC"> okay the most important</font>

454
00:16:22,090 --> 00:16:28,540
<font color="#E5E5E5">thing in here is the start where it what</font>

455
00:16:26,020 --> 00:16:30,069
is the offset from the packet that this

456
00:16:28,540 --> 00:16:31,689
field that you're interested in where

457
00:16:30,070 --> 00:16:35,020
does it start and then what is its

458
00:16:31,690 --> 00:16:37,150
length so offset and then length and

459
00:16:35,020 --> 00:16:39,760
that is how much it's going<font color="#E5E5E5"> to grab and</font>

460
00:16:37,150 --> 00:16:41,860
if you look at this feat this section

461
00:16:39,760 --> 00:16:43,480
<font color="#CCCCCC">over here you'll notice that that offset</font>

462
00:16:41,860 --> 00:16:46,570
and length is what gets highlighted so

463
00:16:43,480 --> 00:16:48,340
when you select<font color="#E5E5E5"> something on the on the</font>

464
00:16:46,570 --> 00:16:50,920
pain it's nice enough to actually

465
00:16:48,340 --> 00:16:53,050
highlight that stuff in the hex hex

466
00:16:50,920 --> 00:16:54,550
window at the bottom as well so you can

467
00:16:53,050 --> 00:16:55,900
<font color="#E5E5E5">figure out a lot of times that's where a</font>

468
00:16:54,550 --> 00:16:57,010
lot of the problems are is like you'll

469
00:16:55,900 --> 00:16:59,650
notice what it's actually thinks

470
00:16:57,010 --> 00:17:02,140
something is is not what<font color="#CCCCCC"> its su mapping</font>

471
00:16:59,650 --> 00:17:07,889
to which is where a lot of<font color="#E5E5E5"> the bugs come</font>

472
00:17:02,140 --> 00:17:12,339
from<font color="#CCCCCC"> okay any questions</font><font color="#E5E5E5"> so far before</font>

473
00:17:07,890 --> 00:17:15,250
<font color="#CCCCCC">alright cool next section why would</font><font color="#E5E5E5"> you</font>

474
00:17:12,339 --> 00:17:17,169
want to add to Wireshark or III or to

475
00:17:15,250 --> 00:17:19,089
any basically protocol analyzer I mean

476
00:17:17,170 --> 00:17:21,100
what was the point of this so i did i

477
00:17:19,089 --> 00:17:22,569
did a<font color="#CCCCCC"> search on google and i don't</font>

478
00:17:21,099 --> 00:17:25,958
remember what i<font color="#CCCCCC"> was searching for but i</font>

479
00:17:22,569 --> 00:17:28,840
found<font color="#E5E5E5"> this this in this nice coat some</font>

480
00:17:25,959 --> 00:17:31,450
<font color="#CCCCCC">Dean Wilson and</font><font color="#E5E5E5"> I don't know if if he's</font>

481
00:17:28,840 --> 00:17:32,800
a famous person or<font color="#E5E5E5"> not so but there's a</font>

482
00:17:31,450 --> 00:17:35,980
guy called<font color="#E5E5E5"> Dean Wilson and this is what</font>

483
00:17:32,800 --> 00:17:37,330
he said the switch talking<font color="#CCCCCC"> to the master</font>

484
00:17:35,980 --> 00:17:38,950
radio did have a lot<font color="#E5E5E5"> of blinking lights</font>

485
00:17:37,330 --> 00:17:40,939
but watching blinking lights to measure

486
00:17:38,950 --> 00:17:43,580
traffic is about as accurate as using

487
00:17:40,940 --> 00:17:46,730
your tongue<font color="#E5E5E5"> on a battery tester so on a</font>

488
00:17:43,580 --> 00:17:48,919
6500 there is something akin to this

489
00:17:46,730 --> 00:17:51,710
they<font color="#CCCCCC"> have a</font><font color="#E5E5E5"> bunch of LEDs that go up and</font>

490
00:17:48,920 --> 00:17:53,660
down based on the load so you could be

491
00:17:51,710 --> 00:17:55,940
figuring out like how loaded your fabric

492
00:17:53,660 --> 00:17:57,290
is based just on that it doesn't really

493
00:17:55,940 --> 00:17:58,730
help you in trying to figure<font color="#CCCCCC"> out where</font>

494
00:17:57,290 --> 00:18:03,220
the problem is or who's doing the dots

495
00:17:58,730 --> 00:18:03,220
attack or what but that is one method

496
00:18:04,960 --> 00:18:10,280
but why would you<font color="#CCCCCC"> want it why would you</font>

497
00:18:07,550 --> 00:18:12,409
<font color="#E5E5E5">want to wear add to Wireshark I mean it</font>

498
00:18:10,280 --> 00:18:13,940
<font color="#CCCCCC">really helps you out in the end</font><font color="#E5E5E5"> and if</font>

499
00:18:12,410 --> 00:18:15,590
you look<font color="#CCCCCC"> at</font><font color="#E5E5E5"> the actual changes that go</font>

500
00:18:13,940 --> 00:18:17,360
through on white shark there are

501
00:18:15,590 --> 00:18:19,280
<font color="#E5E5E5">actually aren't that many actual new</font>

502
00:18:17,360 --> 00:18:22,459
protocols themselves they're<font color="#E5E5E5"> basically</font>

503
00:18:19,280 --> 00:18:24,170
additions to existing protocols so every

504
00:18:22,460 --> 00:18:26,000
month it'll be something addition added

505
00:18:24,170 --> 00:18:27,830
to bgp there will be something added to

506
00:18:26,000 --> 00:18:30,050
<font color="#CCCCCC">ldp there'll be something added to ospf</font>

507
00:18:27,830 --> 00:18:32,899
or something like that it's just<font color="#CCCCCC"> at it's</font>

508
00:18:30,050 --> 00:18:34,879
just like maybe 10 lines of code that's

509
00:18:32,900 --> 00:18:36,650
all<font color="#E5E5E5"> it is and if you know where to make</font>

510
00:18:34,880 --> 00:18:39,770
the changes it's an extremely simple<font color="#CCCCCC"> job</font>

511
00:18:36,650 --> 00:18:43,040
and it beats looking at linking lights

512
00:18:39,770 --> 00:18:44,629
by the way<font color="#CCCCCC"> okay the first thing you need</font>

513
00:18:43,040 --> 00:18:46,639
to do is basically get a build

514
00:18:44,630 --> 00:18:48,110
environment you can use windows as an

515
00:18:46,640 --> 00:18:49,880
environment but<font color="#E5E5E5"> I found it extremely</font>

516
00:18:48,110 --> 00:18:51,919
difficult to set up not<font color="#E5E5E5"> that many people</font>

517
00:18:49,880 --> 00:18:53,300
know how to<font color="#E5E5E5"> use it</font><font color="#CCCCCC"> and I think</font><font color="#E5E5E5"> the</font>

518
00:18:51,920 --> 00:18:55,340
windows people basically hang out in

519
00:18:53,300 --> 00:18:57,500
some other form and not on the<font color="#E5E5E5"> Wireshark</font>

520
00:18:55,340 --> 00:19:00,080
aliases or any of the forms where I hang

521
00:18:57,500 --> 00:19:01,790
out so if you know of a better way or if

522
00:19:00,080 --> 00:19:04,310
you have<font color="#E5E5E5"> an environment to get that let</font>

523
00:19:01,790 --> 00:19:05,590
<font color="#CCCCCC">me</font><font color="#E5E5E5"> know and I'll post it somewhere you</font>

524
00:19:04,310 --> 00:19:08,000
could use<font color="#E5E5E5"> cygwin under windows</font>

525
00:19:05,590 --> 00:19:10,939
apparently that does work very well it

526
00:19:08,000 --> 00:19:12,380
doesn't use the<font color="#E5E5E5"> native windows rendering</font>

527
00:19:10,940 --> 00:19:15,200
format<font color="#E5E5E5"> age you have to run the x server</font>

528
00:19:12,380 --> 00:19:17,090
that comes with cygwin<font color="#CCCCCC"> okay unix linux</font>

529
00:19:15,200 --> 00:19:19,790
including Mac coax environments very

530
00:19:17,090 --> 00:19:21,740
easier for Matco<font color="#E5E5E5"> X</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> actually pull</font>

531
00:19:19,790 --> 00:19:24,350
down to Fink sources and you can compile

532
00:19:21,740 --> 00:19:27,200
it right from there in terms of getting

533
00:19:24,350 --> 00:19:30,110
the source svn is the best you can<font color="#E5E5E5"> also</font>

534
00:19:27,200 --> 00:19:32,090
get the the tarball the svn thing is the

535
00:19:30,110 --> 00:19:33,919
reason why<font color="#CCCCCC"> i say is the best is the svn</font>

536
00:19:32,090 --> 00:19:35,570
the Wireshark maintainer is actually do

537
00:19:33,920 --> 00:19:37,190
a very good job of<font color="#E5E5E5"> making sure that</font>

538
00:19:35,570 --> 00:19:40,490
Wireshark at any point in<font color="#CCCCCC"> time is always</font>

539
00:19:37,190 --> 00:19:41,690
buildable so not<font color="#CCCCCC"> just anybody can go in</font>

540
00:19:40,490 --> 00:19:44,390
and commit code they ask you<font color="#E5E5E5"> run some</font>

541
00:19:41,690 --> 00:19:46,340
tests<font color="#E5E5E5"> even before they commit just</font>

542
00:19:44,390 --> 00:19:48,290
<font color="#E5E5E5">regular patches not just like the</font>

543
00:19:46,340 --> 00:19:49,730
release time type stuff<font color="#E5E5E5"> to they get</font>

544
00:19:48,290 --> 00:19:51,560
start worried about start getting

545
00:19:49,730 --> 00:19:53,570
worried about<font color="#E5E5E5"> this type of stuff so I</font>

546
00:19:51,560 --> 00:19:56,659
used to actually<font color="#E5E5E5"> maintain at one</font>

547
00:19:53,570 --> 00:20:00,139
wireshark III implementation for the

548
00:19:56,660 --> 00:20:01,610
engineering community within Cisco and I

549
00:20:00,140 --> 00:20:03,710
don't think I've ever actually

550
00:20:01,610 --> 00:20:05,719
downloaded the tarball to build that I

551
00:20:03,710 --> 00:20:07,070
<font color="#E5E5E5">always just check out like a CVS check</font>

552
00:20:05,720 --> 00:20:09,200
out and just build from that on a weekly

553
00:20:07,070 --> 00:20:10,820
basis until it<font color="#E5E5E5"> just became like</font>

554
00:20:09,200 --> 00:20:12,380
<font color="#CCCCCC">something happen with our solution were</font>

555
00:20:10,820 --> 00:20:16,399
more just stopped working but that's

556
00:20:12,380 --> 00:20:19,040
another story doing the checkout svn<font color="#E5E5E5"> CEO</font>

557
00:20:16,400 --> 00:20:20,090
and then you just give a URL and the

558
00:20:19,040 --> 00:20:22,430
director<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you want to</font><font color="#E5E5E5"> check it</font><font color="#CCCCCC"> out</font>

559
00:20:20,090 --> 00:20:24,919
in what this does is it's very<font color="#E5E5E5"> similar</font>

560
00:20:22,430 --> 00:20:26,210
<font color="#CCCCCC">to CVS it'll create a Wireshark</font>

561
00:20:24,920 --> 00:20:27,680
directory for you<font color="#CCCCCC"> checkout is from the</font>

562
00:20:26,210 --> 00:20:30,140
<font color="#E5E5E5">latest code from what they call the</font>

563
00:20:27,680 --> 00:20:31,190
trunk okay<font color="#CCCCCC"> it'll create an entire</font>

564
00:20:30,140 --> 00:20:32,240
directory structure<font color="#E5E5E5"> this is what the</font>

565
00:20:31,190 --> 00:20:35,030
directory<font color="#CCCCCC"> structure</font><font color="#E5E5E5"> sort of looks like</font>

566
00:20:32,240 --> 00:20:35,930
the interesting point is in terms of

567
00:20:35,030 --> 00:20:38,120
what we're trying to do which is

568
00:20:35,930 --> 00:20:39,800
basically add two protocols is in

569
00:20:38,120 --> 00:20:41,120
there's a directory called a pan and

570
00:20:39,800 --> 00:20:42,919
underneath<font color="#E5E5E5"> a pen there's a directory</font>

571
00:20:41,120 --> 00:20:47,600
called dissectors and that's where all

572
00:20:42,920 --> 00:20:52,340
the dissectors live okay in terms of

573
00:20:47,600 --> 00:20:55,040
building I do have a<font color="#E5E5E5"> VMware based linux</font>

574
00:20:52,340 --> 00:20:57,709
environment that if you want to copy

575
00:20:55,040 --> 00:20:59,180
your free you're free to copy it's all

576
00:20:57,710 --> 00:21:02,270
ready to<font color="#E5E5E5"> go it has all the build tools</font>

577
00:20:59,180 --> 00:21:03,980
for Wireshark it has<font color="#E5E5E5"> impact it has to</font>

578
00:21:02,270 --> 00:21:05,360
Wireshark checkouts and it has the code

579
00:21:03,980 --> 00:21:07,370
for what we're going through so<font color="#E5E5E5"> I have</font>

580
00:21:05,360 --> 00:21:10,010
it up here if anybody anybody wants it

581
00:21:07,370 --> 00:21:13,580
grab it<font color="#E5E5E5"> I would have put it up on some</font>

582
00:21:10,010 --> 00:21:15,320
website but it's<font color="#E5E5E5"> three gigs</font><font color="#CCCCCC"> so unless</font>

583
00:21:13,580 --> 00:21:16,970
somebody wants to host it for me and I

584
00:21:15,320 --> 00:21:23,030
don't<font color="#E5E5E5"> want to use bittorrent otherwise</font>

585
00:21:16,970 --> 00:21:24,260
my isp's will cut me off<font color="#E5E5E5"> okay after you</font>

586
00:21:23,030 --> 00:21:25,250
<font color="#CCCCCC">do the check out the next thing you want</font>

587
00:21:24,260 --> 00:21:27,230
to do is basically there's a script

588
00:21:25,250 --> 00:21:28,700
called<font color="#CCCCCC"> Auto</font><font color="#E5E5E5"> Genesis is basically set</font>

589
00:21:27,230 --> 00:21:30,740
further sets up your<font color="#E5E5E5"> environment it'll</font>

590
00:21:28,700 --> 00:21:32,480
create the configure script for you if

591
00:21:30,740 --> 00:21:33,980
you do the tarball if you don't if<font color="#E5E5E5"> you</font>

592
00:21:32,480 --> 00:21:36,050
download the tarball it will already<font color="#E5E5E5"> be</font>

593
00:21:33,980 --> 00:21:38,720
the origin will have already<font color="#CCCCCC"> been run on</font>

594
00:21:36,050 --> 00:21:40,730
it in some cases that<font color="#E5E5E5"> might be</font><font color="#CCCCCC"> the</font>

595
00:21:38,720 --> 00:21:43,070
better thing to do in our environment at

596
00:21:40,730 --> 00:21:44,750
<font color="#E5E5E5">Cisco what I've found is even autogen</font>

597
00:21:43,070 --> 00:21:46,669
doesn't work very well<font color="#E5E5E5"> so sometimes</font>

598
00:21:44,750 --> 00:21:49,460
<font color="#CCCCCC">they'll copy down the tarball and i'll</font>

599
00:21:46,670 --> 00:21:51,440
<font color="#CCCCCC">use that sometimes i won't work either</font>

600
00:21:49,460 --> 00:21:54,550
but that's that's a problem specifically

601
00:21:51,440 --> 00:21:57,090
at<font color="#E5E5E5"> cisco with our solaris environment</font>

602
00:21:54,550 --> 00:21:59,730
okay

603
00:21:57,090 --> 00:22:00,750
after you get done with the origin the

604
00:21:59,730 --> 00:22:04,410
next thing<font color="#E5E5E5"> you need to do is basically</font>

605
00:22:00,750 --> 00:22:06,300
run configure and<font color="#CCCCCC"> that'll go through and</font>

606
00:22:04,410 --> 00:22:08,100
it'll you know find water it needs to

607
00:22:06,300 --> 00:22:11,669
find and it'll generate most importantly

608
00:22:08,100 --> 00:22:12,870
is a make file once configure runs and

609
00:22:11,670 --> 00:22:14,340
runs without errors the next thing you

610
00:22:12,870 --> 00:22:16,050
<font color="#E5E5E5">want to do is type in the make command</font>

611
00:22:14,340 --> 00:22:18,030
in the Wireshark directory and that'll

612
00:22:16,050 --> 00:22:19,649
probably take like<font color="#CCCCCC"> 20-30</font><font color="#E5E5E5"> minutes it will</font>

613
00:22:18,030 --> 00:22:24,420
compile Wireshark for you and<font color="#CCCCCC"> after you</font>

614
00:22:19,650 --> 00:22:27,120
do that type in wireshark and something

615
00:22:24,420 --> 00:22:28,740
<font color="#E5E5E5">like this should pop up so once you get</font>

616
00:22:27,120 --> 00:22:30,629
<font color="#E5E5E5">to this point you're pretty much ready</font>

617
00:22:28,740 --> 00:22:35,760
to go<font color="#E5E5E5"> in terms of adding the new</font>

618
00:22:30,630 --> 00:22:37,200
protocol into your environment<font color="#CCCCCC"> okay and</font>

619
00:22:35,760 --> 00:22:39,180
you know that it's not<font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font>

620
00:22:37,200 --> 00:22:41,730
you added that messed up wireshark it

621
00:22:39,180 --> 00:22:43,680
worked out<font color="#CCCCCC"> of the box some words</font><font color="#E5E5E5"> of</font>

622
00:22:41,730 --> 00:22:46,050
caution if you<font color="#CCCCCC"> already if you are fairly</font>

623
00:22:43,680 --> 00:22:47,670
familiar with<font color="#E5E5E5"> to programmer programming</font>

624
00:22:46,050 --> 00:22:51,750
keep in<font color="#CCCCCC"> mind that Wireshark is a</font>

625
00:22:47,670 --> 00:22:53,220
multi-platform program there are some

626
00:22:51,750 --> 00:22:54,540
limitations on what you can do and what

627
00:22:53,220 --> 00:22:57,510
you're<font color="#E5E5E5"> not allowed to do because there's</font>

628
00:22:54,540 --> 00:22:59,220
some there's some platforms that don't

629
00:22:57,510 --> 00:23:02,100
work properly if you do you know certain

630
00:22:59,220 --> 00:23:04,890
types of things it's not C++ so don't do

631
00:23:02,100 --> 00:23:07,590
any comments with / / no zero length

632
00:23:04,890 --> 00:23:09,870
arrays no in lines there's a whole<font color="#CCCCCC"> list</font>

633
00:23:07,590 --> 00:23:11,790
of them<font color="#E5E5E5"> there's a readme developer</font>

634
00:23:09,870 --> 00:23:14,129
inside the docs directory that has a lot

635
00:23:11,790 --> 00:23:15,960
of this offend it's a fairly long list

636
00:23:14,130 --> 00:23:16,980
me myself what I do is I<font color="#CCCCCC"> just look at</font>

637
00:23:15,960 --> 00:23:19,260
what<font color="#CCCCCC"> other people have done and I just</font>

638
00:23:16,980 --> 00:23:20,580
<font color="#E5E5E5">do copy and paste so I'm actually pretty</font>

639
00:23:19,260 --> 00:23:24,480
good<font color="#E5E5E5"> in that that I won't be breaking</font>

640
00:23:20,580 --> 00:23:25,610
any rules that way ok so the sample

641
00:23:24,480 --> 00:23:28,890
exercise we're going to be doing is

642
00:23:25,610 --> 00:23:30,750
adding<font color="#E5E5E5"> bgp MDT support so what MDT</font>

643
00:23:28,890 --> 00:23:33,930
stands for is multicast distribution

644
00:23:30,750 --> 00:23:35,940
tree it's in addition to<font color="#E5E5E5"> MPs VPNs with</font>

645
00:23:33,930 --> 00:23:39,870
that allows multicast VPNs to be built

646
00:23:35,940 --> 00:23:42,780
over the core what the MDT specifically

647
00:23:39,870 --> 00:23:45,090
does is it carries the source what so

648
00:23:42,780 --> 00:23:47,850
whatever mb VPN works is it basically

649
00:23:45,090 --> 00:23:51,510
<font color="#E5E5E5">creates a multicast GRE tunnel from one</font>

650
00:23:47,850 --> 00:23:54,929
PE to<font color="#CCCCCC"> the other receiver</font><font color="#E5E5E5"> peas and what</font>

651
00:23:51,510 --> 00:23:56,820
<font color="#E5E5E5">BGP MDT does it advertises the source</font>

652
00:23:54,930 --> 00:23:59,190
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the group that that VPN is going to</font>

653
00:23:56,820 --> 00:24:01,830
be using the source being<font color="#E5E5E5"> inside the</font>

654
00:23:59,190 --> 00:24:03,120
pirata and inside the pcloud as well as

655
00:24:01,830 --> 00:24:05,879
the multicast group that's going to be

656
00:24:03,120 --> 00:24:08,250
used<font color="#CCCCCC"> ok there's an ITF draft I think</font>

657
00:24:05,880 --> 00:24:09,900
it's expired at this point where all

658
00:24:08,250 --> 00:24:10,870
this<font color="#E5E5E5"> is documented so currently</font>

659
00:24:09,900 --> 00:24:13,240
Wireshark at least

660
00:24:10,870 --> 00:24:14,500
this day still doesn't support MDT<font color="#CCCCCC"> safi</font>

661
00:24:13,240 --> 00:24:18,340
they're still waiting<font color="#CCCCCC"> for my chain set</font>

662
00:24:14,500 --> 00:24:20,740
to be committed so if you're quick

663
00:24:18,340 --> 00:24:24,429
<font color="#CCCCCC">enough you can get a svn check out and</font>

664
00:24:20,740 --> 00:24:25,480
you can<font color="#E5E5E5"> try this out yourself so the way</font>

665
00:24:24,430 --> 00:24:27,040
we're going<font color="#E5E5E5"> to go about</font><font color="#CCCCCC"> this is we're</font>

666
00:24:25,480 --> 00:24:28,960
<font color="#E5E5E5">going to first go ahead</font><font color="#CCCCCC"> and identify the</font>

667
00:24:27,040 --> 00:24:31,270
work items like what needs to be done

668
00:24:28,960 --> 00:24:32,440
and then actually<font color="#E5E5E5"> go out and implement</font>

669
00:24:31,270 --> 00:24:33,760
each one of them and test<font color="#E5E5E5"> each</font><font color="#CCCCCC"> one of</font>

670
00:24:32,440 --> 00:24:35,890
them individually that's all right about

671
00:24:33,760 --> 00:24:39,730
the final solution the pcap file that's

672
00:24:35,890 --> 00:24:41,260
being used is at<font color="#E5E5E5"> this website and in</font>

673
00:24:39,730 --> 00:24:45,190
addition if<font color="#CCCCCC"> you just replace the</font><font color="#E5E5E5"> file</font>

674
00:24:41,260 --> 00:24:46,809
name with MDT diff di FF that'll have

675
00:24:45,190 --> 00:24:49,740
actually to change the finalized

676
00:24:46,809 --> 00:24:52,240
chainset that we came up with<font color="#CCCCCC"> okay</font>

677
00:24:49,740 --> 00:24:54,429
identify work items so if you look at

678
00:24:52,240 --> 00:24:56,850
<font color="#E5E5E5">the</font><font color="#CCCCCC"> bgb trace what it looks like is the</font>

679
00:24:54,429 --> 00:24:58,630
MDT actually advertises the new

680
00:24:56,850 --> 00:25:02,469
multi-protocol reach ability and all

681
00:24:58,630 --> 00:25:05,590
right and it's a new one it's 66<font color="#CCCCCC"> safi 66</font>

682
00:25:02,470 --> 00:25:06,580
and you'll see<font color="#CCCCCC"> that excuse me Wireshark</font>

683
00:25:05,590 --> 00:25:08,620
is actually saying that it doesn't know

684
00:25:06,580 --> 00:25:10,928
what it is so that's one thing that

685
00:25:08,620 --> 00:25:14,500
isn't working<font color="#CCCCCC"> properly you should know</font>

686
00:25:10,929 --> 00:25:16,840
what what 66 is the<font color="#CCCCCC"> second thing that's</font>

687
00:25:14,500 --> 00:25:20,410
broken is that the next top address

688
00:25:16,840 --> 00:25:22,510
address the next top address isn't

689
00:25:20,410 --> 00:25:25,090
broken down into what it actually is if

690
00:25:22,510 --> 00:25:27,760
you look at if you look<font color="#CCCCCC"> at it down here</font>

691
00:25:25,090 --> 00:25:29,290
in the hex it is there just<font color="#CCCCCC"> the display</font>

692
00:25:27,760 --> 00:25:31,629
doesn't<font color="#E5E5E5"> like spell it</font><font color="#CCCCCC"> out for you so</font>

693
00:25:29,290 --> 00:25:34,840
that's the second thing and the<font color="#E5E5E5"> final</font>

694
00:25:31,630 --> 00:25:36,730
thing<font color="#CCCCCC"> is the actual NRI itself isn't</font>

695
00:25:34,840 --> 00:25:39,010
broken down into the actual components

696
00:25:36,730 --> 00:25:41,170
so it isn't telling you what the MDT

697
00:25:39,010 --> 00:25:42,760
source address is what<font color="#E5E5E5"> the MDT default</font>

698
00:25:41,170 --> 00:25:46,780
<font color="#E5E5E5">address is or what the rd is rather</font>

699
00:25:42,760 --> 00:25:48,730
route distinguisher is<font color="#CCCCCC"> okay okay so</font><font color="#E5E5E5"> the</font>

700
00:25:46,780 --> 00:25:50,500
things that<font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to do is fix MVP and</font>

701
00:25:48,730 --> 00:25:52,030
<font color="#E5E5E5">Sofia is unknown we need to fix the</font>

702
00:25:50,500 --> 00:25:54,100
<font color="#CCCCCC">next-hop address so</font><font color="#E5E5E5"> it's expanded into</font>

703
00:25:52,030 --> 00:25:56,320
an ipv4 address and we need<font color="#E5E5E5"> to fix the</font>

704
00:25:54,100 --> 00:25:57,850
NLRA information inside the update so

705
00:25:56,320 --> 00:26:00,520
it's how she understood rather than

706
00:25:57,850 --> 00:26:02,500
<font color="#E5E5E5">saying unknown safi so obviously all</font>

707
00:26:00,520 --> 00:26:04,120
three<font color="#CCCCCC"> items are related to bgp this</font>

708
00:26:02,500 --> 00:26:06,460
basically means that<font color="#E5E5E5"> you're constrained</font>

709
00:26:04,120 --> 00:26:09,580
to two files inside the dissectors

710
00:26:06,460 --> 00:26:13,210
directory packet bgpz and packet dash<font color="#CCCCCC"> be</font>

711
00:26:09,580 --> 00:26:15,159
gph so you'll<font color="#E5E5E5"> find it if you're working</font>

712
00:26:13,210 --> 00:26:16,510
in one specific protocol it's only going

713
00:26:15,160 --> 00:26:18,130
to<font color="#E5E5E5"> be two files at max you're going to</font>

714
00:26:16,510 --> 00:26:20,080
be touching and it's generally going to

715
00:26:18,130 --> 00:26:21,580
be and the<font color="#E5E5E5"> dust sectors are basically in</font>

716
00:26:20,080 --> 00:26:24,790
this format there's packet dodge some

717
00:26:21,580 --> 00:26:28,939
sort of protocol and then see your age

718
00:26:24,790 --> 00:26:32,000
<font color="#E5E5E5">okay so first problem the MVP and safy</font>

719
00:26:28,940 --> 00:26:34,640
is unknown so the<font color="#E5E5E5"> way the Wireshark code</font>

720
00:26:32,000 --> 00:26:36,950
is basically written is that they'll

721
00:26:34,640 --> 00:26:39,830
have like in BGP<font color="#E5E5E5"> seeds will have like a</font>

722
00:26:36,950 --> 00:26:41,480
list of<font color="#E5E5E5"> the value</font><font color="#CCCCCC"> to text mappings up</font>

723
00:26:39,830 --> 00:26:43,310
near the top and when we went through

724
00:26:41,480 --> 00:26:44,990
the hf fields how they have you<font color="#E5E5E5"> know</font>

725
00:26:43,310 --> 00:26:46,250
this either type maps<font color="#E5E5E5"> to IP this thing</font>

726
00:26:44,990 --> 00:26:48,410
maps to IP these are generally at the

727
00:26:46,250 --> 00:26:50,180
top of the file and interestingly enough

728
00:26:48,410 --> 00:26:51,980
<font color="#CCCCCC">I open up the</font><font color="#E5E5E5"> file and it's like the</font>

729
00:26:50,180 --> 00:26:56,120
20th line down you have the different

730
00:26:51,980 --> 00:26:57,320
safi to unicast so sappy<font color="#E5E5E5"> sapna multicast</font>

731
00:26:56,120 --> 00:26:59,270
means multi-cut so it has all the

732
00:26:57,320 --> 00:27:01,010
listing over there the problem is I

733
00:26:59,270 --> 00:27:03,050
don't<font color="#E5E5E5"> know where these wear these</font>

734
00:27:01,010 --> 00:27:05,090
constants are defined the<font color="#CCCCCC"> saff</font><font color="#E5E5E5"> num</font>

735
00:27:03,050 --> 00:27:06,770
unicast and all that stuff so<font color="#E5E5E5"> I just did</font>

736
00:27:05,090 --> 00:27:08,570
a grep for that and I found that it

737
00:27:06,770 --> 00:27:12,560
right<font color="#CCCCCC"> sapna muni cast is actually</font>

738
00:27:08,570 --> 00:27:14,270
defined in package B gph good enough so

739
00:27:12,560 --> 00:27:16,310
I added my new guy in there<font color="#E5E5E5"> I called it</font>

740
00:27:14,270 --> 00:27:18,560
saph num underscore<font color="#CCCCCC"> MDT and I</font><font color="#E5E5E5"> gave</font><font color="#CCCCCC"> it</font>

741
00:27:16,310 --> 00:27:21,200
the number 66 I reference the draft that

742
00:27:18,560 --> 00:27:24,169
was in and then I<font color="#E5E5E5"> went back</font><font color="#CCCCCC"> to the</font>

743
00:27:21,200 --> 00:27:26,480
original packet dash<font color="#CCCCCC"> PG PG and add it in</font>

744
00:27:24,170 --> 00:27:29,390
thus a fan of<font color="#CCCCCC"> mt that i just</font><font color="#E5E5E5"> created and</font>

745
00:27:26,480 --> 00:27:33,110
<font color="#E5E5E5">the text which is the multicast</font>

746
00:27:29,390 --> 00:27:35,450
distribution tree right easy enough are

747
00:27:33,110 --> 00:27:38,689
we compiled to<font color="#E5E5E5"> store</font><font color="#CCCCCC"> and make again and</font>

748
00:27:35,450 --> 00:27:41,200
it works<font color="#E5E5E5"> so it was just basically just</font>

749
00:27:38,690 --> 00:27:43,430
two lines of code for doing that<font color="#CCCCCC"> okay</font>

750
00:27:41,200 --> 00:27:44,960
notice<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you have to do much with</font>

751
00:27:43,430 --> 00:27:46,370
<font color="#E5E5E5">like the C code it was basically just</font>

752
00:27:44,960 --> 00:27:49,100
filling in a table and that's pretty

753
00:27:46,370 --> 00:27:52,129
much it most of the changes are going<font color="#E5E5E5"> to</font>

754
00:27:49,100 --> 00:27:53,810
be like<font color="#CCCCCC"> that by the way so next top the</font>

755
00:27:52,130 --> 00:27:56,680
second problem the next type address

756
00:27:53,810 --> 00:27:58,639
isn't expanded into the ipv4 components

757
00:27:56,680 --> 00:28:00,290
it just shows you<font color="#CCCCCC"> the length which is</font>

758
00:27:58,640 --> 00:28:02,480
<font color="#E5E5E5">four bytes we already know that an ipv4</font>

759
00:28:00,290 --> 00:28:05,629
address it's slightly more complicated

760
00:28:02,480 --> 00:28:07,880
last example what we'll do is again I'll

761
00:28:05,630 --> 00:28:09,290
open up the<font color="#CCCCCC"> packet</font><font color="#E5E5E5"> ash bgp file</font><font color="#CCCCCC"> i'll do</font>

762
00:28:07,880 --> 00:28:12,770
a search for that<font color="#E5E5E5"> text the next</font><font color="#CCCCCC"> hop</font>

763
00:28:09,290 --> 00:28:15,770
address next top network address and lo

764
00:28:12,770 --> 00:28:17,360
behold there it is I can see where is

765
00:28:15,770 --> 00:28:20,030
putting in the four bytes the next top

766
00:28:17,360 --> 00:28:21,860
length bite for bite so what I need<font color="#E5E5E5"> what</font>

767
00:28:20,030 --> 00:28:24,590
I need to<font color="#E5E5E5"> show up after that is some</font>

768
00:28:21,860 --> 00:28:25,850
sort of pull down tree that actually has

769
00:28:24,590 --> 00:28:28,669
the breakdown on what the actual IP

770
00:28:25,850 --> 00:28:30,649
address is<font color="#CCCCCC"> okay so node over here that</font>

771
00:28:28,670 --> 00:28:32,810
there's a new tree being added proto

772
00:28:30,650 --> 00:28:36,260
item add sub tree and a<font color="#CCCCCC"> subtree is</font>

773
00:28:32,810 --> 00:28:37,350
<font color="#E5E5E5">called three if you go on</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> sub</font>

774
00:28:36,260 --> 00:28:39,770
<font color="#CCCCCC">tree</font><font color="#E5E5E5"> is being added</font>

775
00:28:37,350 --> 00:28:44,459
the text for that is<font color="#E5E5E5"> coming from this</font>

776
00:28:39,770 --> 00:28:46,918
function this MP address to string<font color="#CCCCCC"> okay</font>

777
00:28:44,460 --> 00:28:50,039
if you look inside that function it's

778
00:28:46,919 --> 00:28:51,690
basically has a list has a case

779
00:28:50,039 --> 00:28:53,580
statement a switch statement that says

780
00:28:51,690 --> 00:28:55,230
if its unique a stiff<font color="#CCCCCC"> its multicast if</font>

781
00:28:53,580 --> 00:28:58,439
its meaning you know uni multicast if

782
00:28:55,230 --> 00:29:00,660
it's a tunnel and<font color="#CCCCCC"> the length is for you</font>

783
00:28:58,440 --> 00:29:03,900
printed out you print out that it's a

784
00:29:00,660 --> 00:29:05,970
ipv4 packet and you and you decode it as

785
00:29:03,900 --> 00:29:07,770
an ipv4 packet so all<font color="#E5E5E5"> that needed to be</font>

786
00:29:05,970 --> 00:29:12,450
added in that case was<font color="#E5E5E5"> that I just</font>

787
00:29:07,770 --> 00:29:14,429
needed to add my staff<font color="#E5E5E5"> num</font><font color="#CCCCCC"> safonov</font><font color="#E5E5E5"> MDT</font>

788
00:29:12,450 --> 00:29:18,080
that we already<font color="#E5E5E5"> defined in the first</font>

789
00:29:14,429 --> 00:29:25,169
section to that switch statement in here

790
00:29:18,080 --> 00:29:29,970
and that that was it say so it was easy

791
00:29:25,169 --> 00:29:32,850
enough is that<font color="#CCCCCC"> okay the third one is</font>

792
00:29:29,970 --> 00:29:34,350
actually<font color="#CCCCCC"> the most complicated one</font><font color="#E5E5E5"> this</font>

793
00:29:32,850 --> 00:29:36,510
<font color="#E5E5E5">is what the actual breakdown of that</font>

794
00:29:34,350 --> 00:29:38,789
<font color="#E5E5E5">NLRA looks like so there's eight bytes</font>

795
00:29:36,510 --> 00:29:40,169
of a route distinguisher there's the MDT

796
00:29:38,789 --> 00:29:42,480
source address which<font color="#CCCCCC"> is an ipv4</font>

797
00:29:40,169 --> 00:29:45,120
addresses the<font color="#CCCCCC"> BGP is usually the</font><font color="#E5E5E5"> BGP</font>

798
00:29:42,480 --> 00:29:46,740
next<font color="#E5E5E5"> top it doesn't have to be and then</font>

799
00:29:45,120 --> 00:29:48,689
there's the MDT group address which<font color="#CCCCCC"> is</font>

800
00:29:46,740 --> 00:29:52,049
the multicast address that the<font color="#E5E5E5"> GRE</font><font color="#CCCCCC"> tone</font>

801
00:29:48,690 --> 00:29:55,440
is<font color="#E5E5E5"> going to be destined towards</font><font color="#CCCCCC"> okay if</font>

802
00:29:52,049 --> 00:29:57,840
you look at in the case<font color="#CCCCCC"> that we actually</font>

803
00:29:55,440 --> 00:29:59,700
highlight NRI you'll notice<font color="#CCCCCC"> that it</font>

804
00:29:57,840 --> 00:30:02,010
would have highlighted the the hex code

805
00:29:59,700 --> 00:30:03,270
at the bottom and if you decode the hex

806
00:30:02,010 --> 00:30:06,780
code this is what it looks like<font color="#E5E5E5"> I mean</font>

807
00:30:03,270 --> 00:30:09,000
it has the rd in there it's 90 for colon

808
00:30:06,780 --> 00:30:09,928
82 this is not<font color="#CCCCCC"> a test network so it</font>

809
00:30:09,000 --> 00:30:11,789
doesn't really actually mean anything

810
00:30:09,929 --> 00:30:15,120
don't try to map this to like one of

811
00:30:11,789 --> 00:30:16,320
your competitors so it<font color="#E5E5E5"> has a source</font>

812
00:30:15,120 --> 00:30:18,629
address and it has the multicast

813
00:30:16,320 --> 00:30:21,270
destination and you'll note that it will

814
00:30:18,630 --> 00:30:25,730
repeat to the to the next start to the

815
00:30:21,270 --> 00:30:25,730
next NRI one after another<font color="#CCCCCC"> okay</font>

816
00:30:29,360 --> 00:30:33,540
so<font color="#E5E5E5"> looking through this is like the</font>

817
00:30:31,740 --> 00:30:35,190
fourth function inside the BGP file and

818
00:30:33,540 --> 00:30:38,010
you'll<font color="#CCCCCC"> notice that if you look at</font><font color="#E5E5E5"> any of</font>

819
00:30:35,190 --> 00:30:39,840
the other decodes that this the<font color="#CCCCCC"> nlr eyes</font>

820
00:30:38,010 --> 00:30:44,340
<font color="#CCCCCC">I should decoded using this function d</font>

821
00:30:39,840 --> 00:30:48,750
code prefix MP the way it starts off is

822
00:30:44,340 --> 00:30:51,330
that it starts to start soft decoding

823
00:30:48,750 --> 00:30:52,710
for ipv4 unicast multicast and label

824
00:30:51,330 --> 00:30:55,590
prefixes to what we need to do is

825
00:30:52,710 --> 00:30:57,960
basically add in a<font color="#E5E5E5"> section for our new</font>

826
00:30:55,590 --> 00:31:00,720
<font color="#CCCCCC">SAFF safi that</font><font color="#E5E5E5"> we created the SAFF</font><font color="#CCCCCC"> num</font>

827
00:30:57,960 --> 00:31:02,640
MDT and this is what the actual change

828
00:31:00,720 --> 00:31:03,930
set is and I'll and I'll break this down

829
00:31:02,640 --> 00:31:06,210
into separate components and I'll go

830
00:31:03,930 --> 00:31:08,460
through<font color="#CCCCCC"> each one of them so we created</font>

831
00:31:06,210 --> 00:31:09,570
the case statements after num MDT the

832
00:31:08,460 --> 00:31:12,120
next thing we<font color="#E5E5E5"> need to do is basically</font>

833
00:31:09,570 --> 00:31:14,580
the way the ELA riser are created inside

834
00:31:12,120 --> 00:31:17,489
<font color="#CCCCCC">BGP is each MRI has a length statement</font>

835
00:31:14,580 --> 00:31:18,899
that tells how long that NRI is that's

836
00:31:17,490 --> 00:31:21,060
useful when<font color="#E5E5E5"> you're when you're doing</font>

837
00:31:18,900 --> 00:31:23,190
like ipv4 in your advertising ipv4

838
00:31:21,060 --> 00:31:24,810
routes that can have variable prefix

839
00:31:23,190 --> 00:31:27,720
length because you're<font color="#E5E5E5"> you're advertising</font>

840
00:31:24,810 --> 00:31:29,700
the mask at that<font color="#E5E5E5"> same point</font><font color="#CCCCCC"> in our case</font>

841
00:31:27,720 --> 00:31:31,410
it's<font color="#E5E5E5"> not really useful so what</font><font color="#CCCCCC"> actually</font>

842
00:31:29,700 --> 00:31:32,760
happens in the actual encoding is it's

843
00:31:31,410 --> 00:31:35,370
always interview hundred twenty eight

844
00:31:32,760 --> 00:31:37,500
bits right<font color="#E5E5E5"> because we're advertising an</font>

845
00:31:35,370 --> 00:31:39,360
ipv4 address or advertising an ipv4

846
00:31:37,500 --> 00:31:41,430
multicast address and we're advertising

847
00:31:39,360 --> 00:31:43,560
the route distinguisher all of which are

848
00:31:41,430 --> 00:31:45,000
constant length so it's always<font color="#E5E5E5"> going to</font>

849
00:31:43,560 --> 00:31:48,030
be hundred twenty eight bits<font color="#E5E5E5"> sixteen</font>

850
00:31:45,000 --> 00:31:51,420
bytes anything<font color="#E5E5E5"> else is basically a</font>

851
00:31:48,030 --> 00:31:53,220
malformed down<font color="#CCCCCC"> alright so what this code</font>

852
00:31:51,420 --> 00:31:55,800
is basically doing over here it checks

853
00:31:53,220 --> 00:31:57,090
it grabs the first byte which is

854
00:31:55,800 --> 00:31:58,649
supposed to be<font color="#CCCCCC"> the length in</font><font color="#E5E5E5"> L right so</font>

855
00:31:57,090 --> 00:32:02,040
that's part of multi protocol bgp has

856
00:31:58,650 --> 00:32:03,900
nothing to do with<font color="#CCCCCC"> MDT</font><font color="#E5E5E5"> safi so far we</font>

857
00:32:02,040 --> 00:32:06,360
check the length of<font color="#CCCCCC"> that and if it's not</font>

858
00:32:03,900 --> 00:32:08,520
128 bits we basically print out an error

859
00:32:06,360 --> 00:32:10,530
message<font color="#CCCCCC"> onto the tree saying there's</font>

860
00:32:08,520 --> 00:32:14,070
something<font color="#E5E5E5"> wrong with</font><font color="#CCCCCC"> this MRI it isn't</font>

861
00:32:10,530 --> 00:32:19,410
supposed to be here<font color="#E5E5E5"> okay the</font><font color="#CCCCCC"> next</font>

862
00:32:14,070 --> 00:32:22,500
section what we do is we look at the rd

863
00:32:19,410 --> 00:32:23,490
and we move the offset counter by one so

864
00:32:22,500 --> 00:32:27,510
<font color="#E5E5E5">that's what we're doing over here we</font>

865
00:32:23,490 --> 00:32:29,100
move offset equals offset + 1 and this

866
00:32:27,510 --> 00:32:31,320
<font color="#CCCCCC">is where the rd is supposed to start and</font>

867
00:32:29,100 --> 00:32:34,980
remember the rd is<font color="#CCCCCC"> eight bytes</font><font color="#E5E5E5"> so what</font>

868
00:32:31,320 --> 00:32:36,389
we do is we grab we basically there's a

869
00:32:34,980 --> 00:32:38,700
new there's a<font color="#E5E5E5"> function over there called</font>

870
00:32:36,390 --> 00:32:41,280
rd to string and that basically converts

871
00:32:38,700 --> 00:32:41,530
the rd into the variety of<font color="#CCCCCC"> Rd formats</font>

872
00:32:41,280 --> 00:32:42,820
that

873
00:32:41,530 --> 00:32:44,560
this is one of the problems<font color="#E5E5E5"> with our d</font>

874
00:32:42,820 --> 00:32:46,389
is that<font color="#E5E5E5"> if you're familiar with route</font>

875
00:32:44,560 --> 00:32:48,879
targets and wrote just<font color="#E5E5E5"> our distinguishes</font>

876
00:32:46,390 --> 00:32:51,520
in in BGP is that they can<font color="#E5E5E5"> have a</font>

877
00:32:48,880 --> 00:32:53,230
variety<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different formats so there's</font>

878
00:32:51,520 --> 00:32:55,720
the colon format where you have number

879
00:32:53,230 --> 00:32:57,880
<font color="#E5E5E5">colon another number and there's there's</font>

880
00:32:55,720 --> 00:32:59,200
the ipv4 format where you have an IP

881
00:32:57,880 --> 00:33:01,390
address<font color="#CCCCCC"> and then colon than a number</font>

882
00:32:59,200 --> 00:33:03,580
what this<font color="#E5E5E5"> function does it basically</font>

883
00:33:01,390 --> 00:33:04,870
just<font color="#E5E5E5"> creates a string from either of</font>

884
00:33:03,580 --> 00:33:07,210
those<font color="#E5E5E5"> different types of formats it sort</font>

885
00:33:04,870 --> 00:33:09,760
of heights that complexity from you<font color="#E5E5E5"> okay</font>

886
00:33:07,210 --> 00:33:10,960
so you basically give the offset over to

887
00:33:09,760 --> 00:33:13,240
that function and what it will<font color="#E5E5E5"> do is it</font>

888
00:33:10,960 --> 00:33:15,310
<font color="#CCCCCC">will give us back the fixed string</font>

889
00:33:13,240 --> 00:33:20,230
inside this variable already underscore

890
00:33:15,310 --> 00:33:22,330
string and then what happens next is we

891
00:33:20,230 --> 00:33:26,500
move forward eight bytes and that's

892
00:33:22,330 --> 00:33:30,429
where the ipv4 sources and we grab that

893
00:33:26,500 --> 00:33:32,590
so so TVB is the buffer offset + 8 bytes

894
00:33:30,430 --> 00:33:36,460
we grab it that we get the ipv4 address

895
00:33:32,590 --> 00:33:38,709
so these are TVB<font color="#CCCCCC"> TBB get ipv4 is</font>

896
00:33:36,460 --> 00:33:41,350
actually a function<font color="#E5E5E5"> from Wireshark that</font>

897
00:33:38,710 --> 00:33:42,970
basically is good for getting ipv4

898
00:33:41,350 --> 00:33:44,350
addresses the other nice thing it does

899
00:33:42,970 --> 00:33:46,540
is it<font color="#CCCCCC"> actually quantifies that it is an</font>

900
00:33:44,350 --> 00:33:48,370
ipv4 address and if you do<font color="#E5E5E5"> DNS type</font>

901
00:33:46,540 --> 00:33:49,600
stuff it'll<font color="#CCCCCC"> be coded into like an actual</font>

902
00:33:48,370 --> 00:33:52,179
host address and<font color="#E5E5E5"> stuff like that for you</font>

903
00:33:49,600 --> 00:33:54,310
<font color="#CCCCCC">if you store those two values we store</font>

904
00:33:52,180 --> 00:33:56,590
that value<font color="#E5E5E5"> in ipv4 address a dress and</font>

905
00:33:54,310 --> 00:33:58,300
then we grab the next one which is<font color="#E5E5E5"> the</font>

906
00:33:56,590 --> 00:34:02,590
multicast address so you go ahead<font color="#E5E5E5"> for</font>

907
00:33:58,300 --> 00:34:04,810
more bites so offset + 12<font color="#CCCCCC"> ok grab that</font>

908
00:34:02,590 --> 00:34:06,399
guy stick it<font color="#CCCCCC"> in there the next thing we</font>

909
00:34:04,810 --> 00:34:08,949
so we have the three<font color="#E5E5E5"> pieces of</font>

910
00:34:06,400 --> 00:34:11,260
information we have the rd we have the

911
00:34:08,949 --> 00:34:14,739
ipv4 source and we have the ipv4

912
00:34:11,260 --> 00:34:16,870
destination multicast after that we just

913
00:34:14,739 --> 00:34:20,830
<font color="#CCCCCC">need to attach it to a</font><font color="#E5E5E5"> tree for display</font>

914
00:34:16,870 --> 00:34:22,480
<font color="#E5E5E5">purposes ok in this case it's just going</font>

915
00:34:20,830 --> 00:34:24,610
to be a free line of text showing the rd

916
00:34:22,480 --> 00:34:26,889
and i have an example over here so what

917
00:34:24,610 --> 00:34:29,260
it eventually looks like is it says<font color="#E5E5E5"> rd</font>

918
00:34:26,889 --> 00:34:31,989
equals some string comma next<font color="#CCCCCC"> hop equals</font>

919
00:34:29,260 --> 00:34:33,700
the IP IP source IP address and then

920
00:34:31,989 --> 00:34:35,500
comma default<font color="#E5E5E5"> m dt equals the</font>

921
00:34:33,699 --> 00:34:38,109
destination multicast address all that

922
00:34:35,500 --> 00:34:41,500
<font color="#E5E5E5">is done by</font><font color="#CCCCCC"> this line</font><font color="#E5E5E5"> over here where you</font>

923
00:34:38,110 --> 00:34:43,179
say proto tree add text and we add<font color="#CCCCCC"> it to</font>

924
00:34:41,500 --> 00:34:45,190
the existing tree from<font color="#CCCCCC"> the current</font>

925
00:34:43,179 --> 00:34:48,159
buffer we say the offset of where we

926
00:34:45,190 --> 00:34:51,280
currently are plus<font color="#CCCCCC"> 16 bytes so that's</font>

927
00:34:48,159 --> 00:34:52,860
<font color="#E5E5E5">the entire length of the NRI so we're</font>

928
00:34:51,280 --> 00:34:54,450
covering<font color="#E5E5E5"> the entire animal Ryan one go</font>

929
00:34:52,860 --> 00:34:55,560
and this is the text that we use to

930
00:34:54,449 --> 00:35:00,299
<font color="#CCCCCC">describe that thing and</font><font color="#E5E5E5"> that's what I</font>

931
00:34:55,560 --> 00:35:03,930
<font color="#E5E5E5">just went over okay the problem with</font>

932
00:35:00,300 --> 00:35:07,950
that is it basically gives you a line

933
00:35:03,930 --> 00:35:09,419
prayer and all right and that's<font color="#CCCCCC"> it's it</font>

934
00:35:07,950 --> 00:35:11,339
tells you what's<font color="#E5E5E5"> going on but in terms</font>

935
00:35:09,420 --> 00:35:13,020
<font color="#CCCCCC">of being able</font><font color="#E5E5E5"> to search the stuff we're</font>

936
00:35:11,340 --> 00:35:14,400
being able to break down into into the

937
00:35:13,020 --> 00:35:16,140
<font color="#E5E5E5">individual fields it isn't really</font>

938
00:35:14,400 --> 00:35:17,880
showing you that level of detail so if

939
00:35:16,140 --> 00:35:20,850
you went ahead and if you like clicked

940
00:35:17,880 --> 00:35:23,520
on the rd<font color="#E5E5E5"> 904 colon 82 it would just</font>

941
00:35:20,850 --> 00:35:25,200
<font color="#E5E5E5">show you the entire span of those 16</font>

942
00:35:23,520 --> 00:35:26,670
bytes highlighted you wouldn't really

943
00:35:25,200 --> 00:35:28,290
know which part is the<font color="#CCCCCC"> rd and all that</font>

944
00:35:26,670 --> 00:35:34,770
stuff so<font color="#E5E5E5"> that's the next part we're</font>

945
00:35:28,290 --> 00:35:37,050
going<font color="#CCCCCC"> to go ad ok so what we</font><font color="#E5E5E5"> need to do</font>

946
00:35:34,770 --> 00:35:39,270
is basically it create a new sub tree

947
00:35:37,050 --> 00:35:42,000
too attached to<font color="#E5E5E5"> that blob of text that</font>

948
00:35:39,270 --> 00:35:44,910
<font color="#E5E5E5">we created so we use the function proto</font>

949
00:35:42,000 --> 00:35:46,860
idem add sub tree and we create a tie we

950
00:35:44,910 --> 00:35:48,270
create a child off of that existing tree

951
00:35:46,860 --> 00:35:50,220
and<font color="#E5E5E5"> that's what's being done over here</font>

952
00:35:48,270 --> 00:35:57,830
when we call this new tree prefix

953
00:35:50,220 --> 00:35:57,830
underscore tree and yeah<font color="#CCCCCC"> ok</font>

954
00:35:59,930 --> 00:36:07,310
so the<font color="#E5E5E5"> first thing to add is the actual</font>

955
00:36:03,430 --> 00:36:10,850
um the prefix length of the MRI this is

956
00:36:07,310 --> 00:36:12,529
pretty<font color="#E5E5E5"> much hard-coded to 128 bits but</font>

957
00:36:10,850 --> 00:36:13,819
we're<font color="#CCCCCC"> just going to</font><font color="#E5E5E5"> grab it</font><font color="#CCCCCC"> and paste or</font>

958
00:36:12,530 --> 00:36:14,810
whatever the value is in there anyways

959
00:36:13,820 --> 00:36:16,340
we shouldn't<font color="#E5E5E5"> have gotten this far</font>

960
00:36:14,810 --> 00:36:17,779
anyways unless it was hundred twenty

961
00:36:16,340 --> 00:36:21,260
eight bits but we'll grab and put it in

962
00:36:17,780 --> 00:36:23,720
there so what we do is we do proto tree

963
00:36:21,260 --> 00:36:26,090
add text and to our new tree which is<font color="#CCCCCC"> a</font>

964
00:36:23,720 --> 00:36:27,200
prefix tree and we say we go to the

965
00:36:26,090 --> 00:36:29,450
start offset which is where the

966
00:36:27,200 --> 00:36:32,870
beginning of that NRI is and we go one

967
00:36:29,450 --> 00:36:34,879
byte deepen and whatever that value is

968
00:36:32,870 --> 00:36:37,100
<font color="#E5E5E5">over there we'll just say prefix length</font>

969
00:36:34,880 --> 00:36:42,500
is the<font color="#CCCCCC"> p line which is what we grabbed</font>

970
00:36:37,100 --> 00:36:45,259
earlier in the code ok the next thing

971
00:36:42,500 --> 00:36:46,790
after that is the route distinguisher so

972
00:36:45,260 --> 00:36:50,120
that's basically going to<font color="#E5E5E5"> be another</font>

973
00:36:46,790 --> 00:36:52,730
free text item and what we do in that

974
00:36:50,120 --> 00:36:54,920
<font color="#E5E5E5">case is we do another proto add text we</font>

975
00:36:52,730 --> 00:36:55,970
do the TVB we do the offset this time

976
00:36:54,920 --> 00:36:58,010
instead of the start off site which is

977
00:36:55,970 --> 00:37:02,779
<font color="#E5E5E5">one byte further in and this is eight</font>

978
00:36:58,010 --> 00:37:05,240
bytes deep so we do offset length 8 and

979
00:37:02,780 --> 00:37:08,570
then we use our<font color="#E5E5E5"> our</font><font color="#CCCCCC"> D string and we fill</font>

980
00:37:05,240 --> 00:37:14,319
in the route distinguisher with it and

981
00:37:08,570 --> 00:37:18,920
then the text route distinguisher ok ok

982
00:37:14,320 --> 00:37:22,130
so the<font color="#E5E5E5"> last two ones are the IPV sort</font>

983
00:37:18,920 --> 00:37:24,530
ipv4 source and the ipv4 multicast

984
00:37:22,130 --> 00:37:27,350
destination the way that we do that<font color="#CCCCCC"> we</font>

985
00:37:24,530 --> 00:37:29,090
<font color="#CCCCCC">su use the HF fields fields that we</font>

986
00:37:27,350 --> 00:37:30,470
talked about earlier and what I've done

987
00:37:29,090 --> 00:37:34,790
<font color="#CCCCCC">over here on the bottom you'll see that</font>

988
00:37:30,470 --> 00:37:36,770
you have hf bgp MDT default and hf bgp

989
00:37:34,790 --> 00:37:38,660
MDT source so these<font color="#E5E5E5"> are the new field</font>

990
00:37:36,770 --> 00:37:40,910
types that are created and one is called

991
00:37:38,660 --> 00:37:43,520
default MDT the other ones called MDT

992
00:37:40,910 --> 00:37:46,160
source then we<font color="#CCCCCC"> have the search text for</font>

993
00:37:43,520 --> 00:37:48,500
it which is bgp MDT underscore default

994
00:37:46,160 --> 00:37:50,450
and then<font color="#E5E5E5"> i define</font><font color="#CCCCCC"> what type of field it</font>

995
00:37:48,500 --> 00:37:52,820
is<font color="#E5E5E5"> so it's going to be a field type ipv4</font>

996
00:37:50,450 --> 00:37:56,180
and the base is<font color="#CCCCCC"> none it doesn't really</font>

997
00:37:52,820 --> 00:37:58,870
<font color="#E5E5E5">matter and i forget what this was</font>

998
00:37:56,180 --> 00:37:58,870
actually

999
00:38:01,869 --> 00:38:06,050
so there's no value this<font color="#CCCCCC"> is where the</font>

1000
00:38:04,160 --> 00:38:07,490
<font color="#E5E5E5">the value of mapping thing comes in and</font>

1001
00:38:06,050 --> 00:38:08,690
the table mapping stuff so there's

1002
00:38:07,490 --> 00:38:11,390
nothing to put in<font color="#E5E5E5"> there there's no bit</font>

1003
00:38:08,690 --> 00:38:13,040
mask there's no description really for

1004
00:38:11,390 --> 00:38:15,230
it and then that's the end end<font color="#E5E5E5"> of the</font>

1005
00:38:13,040 --> 00:38:17,779
thing so<font color="#CCCCCC"> once you define the field you</font>

1006
00:38:15,230 --> 00:38:18,859
basically in the proto tree item you say

1007
00:38:17,780 --> 00:38:21,020
you're<font color="#E5E5E5"> going to add it to the prefix</font>

1008
00:38:18,859 --> 00:38:23,509
tree it's going<font color="#E5E5E5"> to be using this fuel</font>

1009
00:38:21,020 --> 00:38:25,700
descriptor which is HF<font color="#E5E5E5"> bgp MDT source</font>

1010
00:38:23,510 --> 00:38:27,380
that's the buffer you're using<font color="#E5E5E5"> TVB and</font>

1011
00:38:25,700 --> 00:38:30,710
you're going<font color="#E5E5E5"> to be starting</font><font color="#CCCCCC"> at offset +</font>

1012
00:38:27,380 --> 00:38:31,640
8 so 8 remember was the the route

1013
00:38:30,710 --> 00:38:33,800
distinguisher so you're going<font color="#E5E5E5"> to go</font>

1014
00:38:31,640 --> 00:38:37,368
<font color="#E5E5E5">eight pass route distinguisher that's</font>

1015
00:38:33,800 --> 00:38:40,580
where the ipv4 source starts and it's

1016
00:38:37,369 --> 00:38:43,310
the length of four and that's that will

1017
00:38:40,580 --> 00:38:46,160
add<font color="#CCCCCC"> that 11 item to the tree and you do</font>

1018
00:38:43,310 --> 00:38:47,599
the<font color="#CCCCCC"> same thing with the MTT default and</font>

1019
00:38:46,160 --> 00:38:49,759
what it looks like in the end is like

1020
00:38:47,599 --> 00:38:51,530
this<font color="#E5E5E5"> so you have the NL right you have</font>

1021
00:38:49,760 --> 00:38:53,420
that one big blob of text<font color="#E5E5E5"> that we</font>

1022
00:38:51,530 --> 00:38:55,490
created right then we attached our sub

1023
00:38:53,420 --> 00:38:58,040
tree to it and this is the length that

1024
00:38:55,490 --> 00:39:01,160
we<font color="#E5E5E5"> added the 128 bits then we added the</font>

1025
00:38:58,040 --> 00:39:03,080
route distinguisher the MDT source which

1026
00:39:01,160 --> 00:39:05,029
<font color="#CCCCCC">is from</font><font color="#E5E5E5"> that hf field</font><font color="#CCCCCC"> i notice that it</font>

1027
00:39:03,080 --> 00:39:07,098
has<font color="#E5E5E5"> i mean it created this all by itself</font>

1028
00:39:05,030 --> 00:39:09,920
to all we said was basically that it was

1029
00:39:07,099 --> 00:39:11,540
MDT source and it<font color="#E5E5E5"> added the ipv4 address</font>

1030
00:39:09,920 --> 00:39:13,339
and<font color="#E5E5E5"> then there in the parenthesis the</font>

1031
00:39:11,540 --> 00:39:16,430
ipv4 address which we translate it into

1032
00:39:13,339 --> 00:39:18,740
like a<font color="#E5E5E5"> DNS hostname or something like</font>

1033
00:39:16,430 --> 00:39:21,410
that same thing with with<font color="#E5E5E5"> the multicast</font>

1034
00:39:18,740 --> 00:39:25,250
and you'll notice<font color="#CCCCCC"> that there's trees</font>

1035
00:39:21,410 --> 00:39:27,859
created for the further MDT Saffy's that

1036
00:39:25,250 --> 00:39:30,230
are there the other thing that's<font color="#E5E5E5"> done at</font>

1037
00:39:27,859 --> 00:39:34,580
the<font color="#E5E5E5"> same time is that remember these two</font>

1038
00:39:30,230 --> 00:39:38,060
guys that we<font color="#E5E5E5"> created the MDT MDT the</font><font color="#CCCCCC"> bgp</font>

1039
00:39:34,580 --> 00:39:40,250
MDT underscore default and the<font color="#E5E5E5"> bgp MDT</font>

1040
00:39:38,060 --> 00:39:42,380
underscore source those are now

1041
00:39:40,250 --> 00:39:43,550
available in the<font color="#E5E5E5"> search text so you can</font>

1042
00:39:42,380 --> 00:39:45,830
search for packets that are actually

1043
00:39:43,550 --> 00:39:48,940
<font color="#E5E5E5">being sent for a particular default MDT</font>

1044
00:39:45,830 --> 00:39:53,589
or being sent from a particular

1045
00:39:48,940 --> 00:39:53,589
multicast source<font color="#CCCCCC"> ok</font>

1046
00:39:54,410 --> 00:39:57,890
and here's an example of where I'm

1047
00:39:56,359 --> 00:40:01,640
actually looking for packets that are

1048
00:39:57,890 --> 00:40:04,578
being sent with a<font color="#E5E5E5"> BGP MTT default of 239</font>

1049
00:40:01,640 --> 00:40:06,618
to<font color="#CCCCCC"> 32 0 94 and as you filters out the</font>

1050
00:40:04,579 --> 00:40:11,480
awliya throws away all the other packets

1051
00:40:06,619 --> 00:40:14,510
and just shows me that update<font color="#CCCCCC"> ok after</font>

1052
00:40:11,480 --> 00:40:16,579
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have your set of chainsets done</font>

1053
00:40:14,510 --> 00:40:18,890
there's a nice utility that comes with a

1054
00:40:16,579 --> 00:40:23,539
source called fuzz tests and basically

1055
00:40:18,890 --> 00:40:25,730
what this does is it basically looks at

1056
00:40:23,539 --> 00:40:27,680
your existing capture files and it just

1057
00:40:25,730 --> 00:40:29,690
plays around with them it randomizes

1058
00:40:27,680 --> 00:40:31,848
them it tries to<font color="#E5E5E5"> figure out whether you</font>

1059
00:40:29,690 --> 00:40:34,039
know you've got<font color="#CCCCCC"> your decodes working</font>

1060
00:40:31,849 --> 00:40:35,809
with your pristine file what if you<font color="#E5E5E5"> what</font>

1061
00:40:34,039 --> 00:40:38,359
if there was<font color="#E5E5E5"> some changes with it does</font>

1062
00:40:35,809 --> 00:40:40,339
does your code break in those cases so

1063
00:40:38,359 --> 00:40:42,319
what it does<font color="#CCCCCC"> is you point it to you've</font>

1064
00:40:40,339 --> 00:40:43,880
got<font color="#CCCCCC"> your compiled Wireshark already what</font>

1065
00:40:42,319 --> 00:40:46,339
you do is you point it to a capture file

1066
00:40:43,880 --> 00:40:47,900
that you that you like that you think<font color="#CCCCCC"> is</font>

1067
00:40:46,339 --> 00:40:49,130
good and what I'll do is we'll go

1068
00:40:47,900 --> 00:40:50,660
through<font color="#CCCCCC"> and we'll just randomize</font>

1069
00:40:49,130 --> 00:40:54,530
portions of that packet file and<font color="#E5E5E5"> I'll</font>

1070
00:40:50,660 --> 00:40:56,000
compare it against see if<font color="#CCCCCC"> teach our</font>

1071
00:40:54,530 --> 00:40:57,589
complaints about anything if it does

1072
00:40:56,000 --> 00:40:59,480
it'll stop<font color="#E5E5E5"> otherwise we'll just keep on</font>

1073
00:40:57,589 --> 00:41:00,680
going forever you can set<font color="#CCCCCC"> it to go for</font>

1074
00:40:59,480 --> 00:41:05,359
like a hundred times<font color="#CCCCCC"> two hundred times</font>

1075
00:41:00,680 --> 00:41:08,180
whatever<font color="#CCCCCC"> ok once you're satisfied that</font>

1076
00:41:05,359 --> 00:41:10,190
your patch is good you can submit<font color="#E5E5E5"> it to</font>

1077
00:41:08,180 --> 00:41:12,169
the Wireshark website using the bug tool

1078
00:41:10,190 --> 00:41:13,880
or you can email it directly to the

1079
00:41:12,170 --> 00:41:15,140
Wireshark development alias what I

1080
00:41:13,880 --> 00:41:16,609
actually do is I send it to the alias

1081
00:41:15,140 --> 00:41:17,930
that<font color="#CCCCCC"> way at least they can</font><font color="#E5E5E5"> provide some</font>

1082
00:41:16,609 --> 00:41:19,578
commentary that you did something<font color="#E5E5E5"> right</font>

1083
00:41:17,930 --> 00:41:22,549
you did something<font color="#E5E5E5"> wrong they might pat</font>

1084
00:41:19,579 --> 00:41:24,170
you on the back it's it's a little bit

1085
00:41:22,549 --> 00:41:30,288
more better in terms of getting some

1086
00:41:24,170 --> 00:41:32,150
sort of feedback for your stuff in<font color="#E5E5E5"> fact</font>

1087
00:41:30,289 --> 00:41:34,609
I've like for this for this particular

1088
00:41:32,150 --> 00:41:36,319
patch I actually had a typo in there and

1089
00:41:34,609 --> 00:41:38,869
somebody caught that and I said<font color="#E5E5E5"> you need</font>

1090
00:41:36,319 --> 00:41:40,788
<font color="#E5E5E5">to go</font><font color="#CCCCCC"> ahead</font><font color="#E5E5E5"> and fix it so I created a</font>

1091
00:41:38,869 --> 00:41:41,990
new<font color="#E5E5E5"> passion sent that out so with the</font>

1092
00:41:40,789 --> 00:41:45,740
buggy might actually take them a longer

1093
00:41:41,990 --> 00:41:47,419
time<font color="#CCCCCC"> to get to get to it ok what you</font>

1094
00:41:45,740 --> 00:41:49,250
need to<font color="#CCCCCC"> do when you send out the email</font>

1095
00:41:47,420 --> 00:41:50,869
is obviously attach your stuff if you

1096
00:41:49,250 --> 00:41:52,430
have if you still have access<font color="#CCCCCC"> to your</font>

1097
00:41:50,869 --> 00:41:54,589
capture file and it doesn't contain<font color="#CCCCCC"> any</font>

1098
00:41:52,430 --> 00:41:55,940
sensitive information send<font color="#E5E5E5"> that along as</font>

1099
00:41:54,589 --> 00:41:58,730
well because they'll add it to their

1100
00:41:55,940 --> 00:42:01,369
build<font color="#CCCCCC"> form for what they use for sending</font>

1101
00:41:58,730 --> 00:42:03,770
out to further for the mass built and

1102
00:42:01,369 --> 00:42:04,140
they'll use they'll use fuzz tests on on

1103
00:42:03,770 --> 00:42:06,960
those

1104
00:42:04,140 --> 00:42:10,319
after<font color="#CCCCCC"> Falls as well</font><font color="#E5E5E5"> okay for additional</font>

1105
00:42:06,960 --> 00:42:12,390
help obviously you can you can email me

1106
00:42:10,320 --> 00:42:14,160
but the<font color="#E5E5E5"> best place is the</font><font color="#CCCCCC"> Wireshark</font>

1107
00:42:12,390 --> 00:42:16,640
developers list and there's a<font color="#E5E5E5"> really</font>

1108
00:42:14,160 --> 00:42:19,680
<font color="#E5E5E5">good art archive on the g main website</font>

1109
00:42:16,640 --> 00:42:23,100
so in summary Wireshark free open source

1110
00:42:19,680 --> 00:42:25,259
network protocol analyzer it's really it

1111
00:42:23,100 --> 00:42:27,960
has become the de facto network protocol

1112
00:42:25,260 --> 00:42:30,030
analyzer today I mean within<font color="#E5E5E5"> my company</font>

1113
00:42:27,960 --> 00:42:31,890
we use it<font color="#E5E5E5"> all the time we have like</font>

1114
00:42:30,030 --> 00:42:34,190
engineers that when we're testing<font color="#E5E5E5"> your</font>

1115
00:42:31,890 --> 00:42:35,940
protocols we build stuff out for it

1116
00:42:34,190 --> 00:42:38,010
there's some stuff that we don't

1117
00:42:35,940 --> 00:42:39,600
publicize out in the open there's some

1118
00:42:38,010 --> 00:42:41,430
stuff we keep to ourselves<font color="#E5E5E5"> but in</font>

1119
00:42:39,600 --> 00:42:43,740
general<font color="#E5E5E5"> it's it's basically the de facto</font>

1120
00:42:41,430 --> 00:42:45,359
tool for this type of stuff if you

1121
00:42:43,740 --> 00:42:47,279
wanted to keep stuff to yourself there's

1122
00:42:45,360 --> 00:42:49,680
an entire architecture for doing plugins

1123
00:42:47,280 --> 00:42:52,140
so you can have a compiled version of a

1124
00:42:49,680 --> 00:42:53,370
Wireshark you just put a plug in your

1125
00:42:52,140 --> 00:42:55,290
you<font color="#E5E5E5"> just throw your plugin into the</font>

1126
00:42:53,370 --> 00:42:59,640
plug-in directory and you have that

1127
00:42:55,290 --> 00:43:01,200
additional capability<font color="#CCCCCC"> okay there's a CLI</font>

1128
00:42:59,640 --> 00:43:02,730
as well as a graphical display<font color="#E5E5E5"> I</font><font color="#CCCCCC"> didn't</font>

1129
00:43:01,200 --> 00:43:05,220
really<font color="#E5E5E5"> go</font><font color="#CCCCCC"> into the CLI the graphical</font>

1130
00:43:02,730 --> 00:43:07,590
display<font color="#E5E5E5"> su makes for better presentation</font>

1131
00:43:05,220 --> 00:43:09,629
material but it is in some ways more

1132
00:43:07,590 --> 00:43:11,700
featured<font color="#E5E5E5"> than the graphical and because</font>

1133
00:43:09,630 --> 00:43:13,770
you can<font color="#E5E5E5"> put in more stuff there's</font>

1134
00:43:11,700 --> 00:43:17,180
hundreds of protocol supported there's

1135
00:43:13,770 --> 00:43:17,180
more being added every week every month

1136
00:43:18,500 --> 00:43:24,210
<font color="#CCCCCC">okay and the one thing</font><font color="#E5E5E5"> I basically</font>

1137
00:43:22,620 --> 00:43:25,980
wanted to<font color="#E5E5E5"> leave</font><font color="#CCCCCC"> you guys with the it is</font>

1138
00:43:24,210 --> 00:43:28,350
extremely<font color="#CCCCCC"> easy to add new protocols and</font>

1139
00:43:25,980 --> 00:43:29,760
there and the Wireshark development

1140
00:43:28,350 --> 00:43:31,200
people<font color="#E5E5E5"> are actually very nice i'm like</font>

1141
00:43:29,760 --> 00:43:32,580
some of the other mailing lists of the

1142
00:43:31,200 --> 00:43:34,910
<font color="#CCCCCC">open-source mailing list where they like</font>

1143
00:43:32,580 --> 00:43:36,990
get on your case about anything but

1144
00:43:34,910 --> 00:43:38,970
they're they're very nice people to help

1145
00:43:36,990 --> 00:43:42,020
you along the way and that's it for me

1146
00:43:38,970 --> 00:43:42,020
if you have any<font color="#E5E5E5"> questions please</font>

1147
00:43:49,010 --> 00:43:55,350
just now I went to Wireshark org slash

1148
00:43:52,530 --> 00:43:57,859
security and found that<font color="#E5E5E5"> in the last 11</font>

1149
00:43:55,350 --> 00:44:00,270
months there have been four different

1150
00:43:57,859 --> 00:44:02,310
security advisories which boil down to

1151
00:44:00,270 --> 00:44:04,410
the<font color="#E5E5E5"> following protocol of</font>

1152
00:44:02,310 --> 00:44:07,259
application-specific analyzer can cause

1153
00:44:04,410 --> 00:44:09,330
the following security issues the fact

1154
00:44:07,260 --> 00:44:11,330
that it can decode hundreds of different

1155
00:44:09,330 --> 00:44:14,580
protocols in many ways<font color="#E5E5E5"> as a security</font>

1156
00:44:11,330 --> 00:44:16,500
disadvantage so just<font color="#E5E5E5"> that as a caveat</font>

1157
00:44:14,580 --> 00:44:20,369
don't decode things that you don't

1158
00:44:16,500 --> 00:44:22,350
<font color="#E5E5E5">really need to decode it is relatively</font>

1159
00:44:20,369 --> 00:44:24,300
straightforward to capture the<font color="#E5E5E5"> bytes for</font>

1160
00:44:22,350 --> 00:44:27,600
a packet look at it<font color="#E5E5E5"> later if you</font><font color="#CCCCCC"> need it</font>

1161
00:44:24,300 --> 00:44:30,810
but doing<font color="#E5E5E5"> random decoding stuff that you</font>

1162
00:44:27,600 --> 00:44:33,630
not exceed you don't need exposes you to

1163
00:44:30,810 --> 00:44:35,279
considerable risk we<font color="#E5E5E5"> have fire shark in</font>

1164
00:44:33,630 --> 00:44:41,640
particular or any of these things in

1165
00:44:35,280 --> 00:44:43,290
general absolutely so you mentioned Jay

1166
00:44:41,640 --> 00:44:45,569
Moran AOL you mentioned there was a

1167
00:44:43,290 --> 00:44:47,910
plugins directory as far as the plugins

1168
00:44:45,570 --> 00:44:49,290
go are there example detectors already

1169
00:44:47,910 --> 00:44:51,149
out there that you can kind<font color="#CCCCCC"> of cut and</font>

1170
00:44:49,290 --> 00:44:52,859
<font color="#E5E5E5">paste so instead of</font><font color="#CCCCCC"> having to do the</font>

1171
00:44:51,150 --> 00:44:54,600
<font color="#E5E5E5">whole compile and everything yep so the</font>

1172
00:44:52,859 --> 00:44:56,700
question was how do we<font color="#E5E5E5"> get started with</font>

1173
00:44:54,600 --> 00:44:58,470
the plugins dissectors<font color="#E5E5E5"> there in</font><font color="#CCCCCC"> fact the</font>

1174
00:44:56,700 --> 00:45:00,839
plugins are exactly the<font color="#CCCCCC"> same as the</font>

1175
00:44:58,470 --> 00:45:01,980
existing dissectors they just in the

1176
00:45:00,840 --> 00:45:03,900
beginning of<font color="#E5E5E5"> the file date to say</font>

1177
00:45:01,980 --> 00:45:05,850
something special in<font color="#CCCCCC"> terms of this is a</font>

1178
00:45:03,900 --> 00:45:08,220
plugin<font color="#E5E5E5"> don't don't you know build this</font>

1179
00:45:05,850 --> 00:45:10,740
out with the rest<font color="#CCCCCC"> of the code and in the</font>

1180
00:45:08,220 --> 00:45:13,410
developers in the<font color="#E5E5E5"> in the Wireshark doc</font>

1181
00:45:10,740 --> 00:45:15,600
directory in the readme developer filed

1182
00:45:13,410 --> 00:45:18,330
there's actually a cookie cutter sheet

1183
00:45:15,600 --> 00:45:20,160
for the plugins themselves so you can

1184
00:45:18,330 --> 00:45:21,720
just<font color="#E5E5E5"> you just copy that sheet over and</font>

1185
00:45:20,160 --> 00:45:23,819
just plug it you<font color="#CCCCCC"> just you know fill in</font>

1186
00:45:21,720 --> 00:45:25,980
the stuff that's different for your plan

1187
00:45:23,820 --> 00:45:27,270
ok so the plugins don't have to be

1188
00:45:25,980 --> 00:45:29,010
compiled as part of the entire package

1189
00:45:27,270 --> 00:45:30,990
you can compile them stand alone exactly

1190
00:45:29,010 --> 00:45:32,250
then just add<font color="#E5E5E5"> them in yep exactly in</font>

1191
00:45:30,990 --> 00:45:34,410
fact they're supposed to be consistent

1192
00:45:32,250 --> 00:45:35,490
<font color="#CCCCCC">across releases ok cool and all the</font>

1193
00:45:34,410 --> 00:45:41,930
header files and everything for the

1194
00:45:35,490 --> 00:45:45,009
plugins are available<font color="#CCCCCC"> ok other stuff</font>

1195
00:45:41,930 --> 00:45:45,009
okay great thank you

