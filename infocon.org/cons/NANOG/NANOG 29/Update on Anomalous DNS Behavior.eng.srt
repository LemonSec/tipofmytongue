1
00:00:02,600 --> 00:00:11,010
this talk is<font color="#CCCCCC"> about root server abuse</font>

2
00:00:09,360 --> 00:00:17,490
sort of a follow-on<font color="#E5E5E5"> to a talk I gave</font>

3
00:00:11,010 --> 00:00:19,020
last year just doing this work with in

4
00:00:17,490 --> 00:00:20,490
conjunction with<font color="#E5E5E5"> kada and we're still</font>

5
00:00:19,020 --> 00:00:25,310
interested in understanding why the root

6
00:00:20,490 --> 00:00:25,310
servers are getting slammed so much and

7
00:00:25,460 --> 00:00:31,619
unlike the<font color="#E5E5E5"> previous study which where we</font>

8
00:00:28,710 --> 00:00:33,480
analyzed traffic<font color="#CCCCCC"> this one is a</font>

9
00:00:31,619 --> 00:00:35,640
simulation a lab simulation of various

10
00:00:33,480 --> 00:00:37,529
<font color="#CCCCCC">name servers caching name servers so</font>

11
00:00:35,640 --> 00:00:39,649
we're interested in seeing<font color="#E5E5E5"> are any</font>

12
00:00:37,530 --> 00:00:41,820
particular name server implementations

13
00:00:39,649 --> 00:00:44,430
worse than<font color="#CCCCCC"> others are</font><font color="#E5E5E5"> they more abusive</font>

14
00:00:41,820 --> 00:00:48,920
are they distributing the load as we

15
00:00:44,430 --> 00:00:51,030
would expect them to and here's a

16
00:00:48,920 --> 00:00:55,670
cartoon of the<font color="#E5E5E5"> test</font><font color="#CCCCCC"> Network</font><font color="#E5E5E5"> that I used</font>

17
00:00:51,030 --> 00:01:00,030
there's basically five boxes one box

18
00:00:55,670 --> 00:01:03,049
handles root server queries one handles

19
00:01:00,030 --> 00:01:04,890
top-level domains and one handles

20
00:01:03,049 --> 00:01:07,799
second-level domains and actually

21
00:01:04,890 --> 00:01:11,760
anything<font color="#E5E5E5"> beyond that third level fourth</font>

22
00:01:07,799 --> 00:01:16,439
level etc there's a simulated wide area

23
00:01:11,760 --> 00:01:18,900
network with packet loss and delays this

24
00:01:16,439 --> 00:01:20,339
guy is the the caching name server where

25
00:01:18,900 --> 00:01:22,650
this is<font color="#E5E5E5"> the the part that we're</font>

26
00:01:20,340 --> 00:01:24,590
interested in testing and there's a box

27
00:01:22,650 --> 00:01:28,590
that just submits<font color="#E5E5E5"> whole bunch of queries</font>

28
00:01:24,590 --> 00:01:32,840
as a user might the workload is taken

29
00:01:28,590 --> 00:01:35,549
from web proxy logs about 12 hours worth

30
00:01:32,840 --> 00:01:39,840
there were five and<font color="#E5E5E5"> half million total</font>

31
00:01:35,549 --> 00:01:44,119
dns queries with 107,000 unique host

32
00:01:39,840 --> 00:01:47,869
names 70,000 unique second-level domains

33
00:01:44,119 --> 00:01:53,060
431 top-level domains many of<font color="#E5E5E5"> which are</font>

34
00:01:47,869 --> 00:01:53,060
invalid and only one<font color="#E5E5E5"> root</font>

35
00:01:53,880 --> 00:02:02,729
I made<font color="#E5E5E5"> up a bunch of zone files and the</font>

36
00:01:58,350 --> 00:02:04,500
the contents of<font color="#E5E5E5"> those own files are sort</font>

37
00:02:02,729 --> 00:02:07,470
of based on reality for the for the<font color="#CCCCCC"> root</font>

38
00:02:04,500 --> 00:02:10,848
and<font color="#CCCCCC"> top-level</font><font color="#E5E5E5"> domains it uses</font><font color="#CCCCCC"> the actual</font>

39
00:02:07,470 --> 00:02:14,400
zone data for the number of nameservers

40
00:02:10,848 --> 00:02:19,349
the and the TTL<font color="#E5E5E5"> zon the name server and</font>

41
00:02:14,400 --> 00:02:20,459
glue records for the second-level domain

42
00:02:19,349 --> 00:02:22,440
since<font color="#E5E5E5"> there were so many of them it's</font>

43
00:02:20,459 --> 00:02:25,470
you know possible to have the actual

44
00:02:22,440 --> 00:02:27,709
values there so I<font color="#E5E5E5"> took a sample of real</font>

45
00:02:25,470 --> 00:02:32,690
data and then use that sample to

46
00:02:27,709 --> 00:02:35,069
generate random values again here the

47
00:02:32,690 --> 00:02:39,359
trying to mimic the<font color="#E5E5E5"> number of address</font>

48
00:02:35,069 --> 00:02:44,069
records / name and the TTL zon address

49
00:02:39,360 --> 00:02:45,930
name server<font color="#CCCCCC"> and cname records one thing</font>

50
00:02:44,069 --> 00:02:47,910
<font color="#E5E5E5">that's a</font><font color="#CCCCCC"> little different than reality</font>

51
00:02:45,930 --> 00:02:52,500
is each second-level domain has just two

52
00:02:47,910 --> 00:02:53,400
name servers and this this<font color="#CCCCCC"> last</font>

53
00:02:52,500 --> 00:02:55,319
<font color="#CCCCCC">measurement is thirty five percent</font>

54
00:02:53,400 --> 00:02:57,120
<font color="#E5E5E5">probability that any name is a cname</font>

55
00:02:55,319 --> 00:03:00,839
record was actually based<font color="#E5E5E5"> on actual</font>

56
00:02:57,120 --> 00:03:02,130
measurements as well here's a sample

57
00:03:00,840 --> 00:03:04,049
zone file I<font color="#E5E5E5"> don't expect you to be able</font>

58
00:03:02,130 --> 00:03:05,940
to read this at<font color="#E5E5E5"> least not on the screens</font>

59
00:03:04,049 --> 00:03:10,230
if you're really interested you can look

60
00:03:05,940 --> 00:03:13,190
at the slides but<font color="#E5E5E5"> this shows some</font>

61
00:03:10,230 --> 00:03:17,638
samples from from my simulated org zone

62
00:03:13,190 --> 00:03:19,530
this<font color="#E5E5E5"> is before the move to any cast</font>

63
00:03:17,639 --> 00:03:22,370
servers so there was something<font color="#CCCCCC"> like</font>

64
00:03:19,530 --> 00:03:25,670
eight or<font color="#E5E5E5"> nine different name servers and</font>

65
00:03:22,370 --> 00:03:28,230
on the right side<font color="#CCCCCC"> you see some sample</font>

66
00:03:25,670 --> 00:03:30,380
zones some<font color="#E5E5E5"> second-level zones under</font>

67
00:03:28,230 --> 00:03:30,380
there

68
00:03:32,880 --> 00:03:39,310
this is a<font color="#E5E5E5"> list of the caching software</font>

69
00:03:35,819 --> 00:03:43,720
that I<font color="#CCCCCC"> tested two versions of bind bind</font>

70
00:03:39,310 --> 00:03:49,959
<font color="#E5E5E5">Aten by nine djb dns and two versions of</font>

71
00:03:43,720 --> 00:03:52,480
<font color="#CCCCCC">Windows this these different software</font>

72
00:03:49,959 --> 00:03:54,790
packages run only<font color="#E5E5E5"> on the the caching</font>

73
00:03:52,480 --> 00:03:57,910
name server box the top<font color="#CCCCCC"> level domain</font>

74
00:03:54,790 --> 00:04:03,819
<font color="#E5E5E5">second level and the roots all run bind</font>

75
00:03:57,910 --> 00:04:07,030
eight I did six different test

76
00:04:03,819 --> 00:04:10,510
configurations the simplest<font color="#CCCCCC"> one has no</font>

77
00:04:07,030 --> 00:04:12,910
delays and no packet loss then I did one

78
00:04:10,510 --> 00:04:16,298
with constant hundred millisecond delays

79
00:04:12,910 --> 00:04:19,298
and no packet loss I have<font color="#E5E5E5"> three with</font>

80
00:04:16,298 --> 00:04:21,339
linear delays which<font color="#E5E5E5"> I'll explain in the</font>

81
00:04:19,298 --> 00:04:24,130
next slide what that's about one with no

82
00:04:21,339 --> 00:04:27,039
packet loss<font color="#E5E5E5"> 5% Becca Lawson 25% packet</font>

83
00:04:24,130 --> 00:04:32,530
loss and finally one with one<font color="#CCCCCC"> hundred</font>

84
00:04:27,040 --> 00:04:35,919
percent packet loss here's how the

85
00:04:32,530 --> 00:04:39,280
linear delays were configured on the

86
00:04:35,919 --> 00:04:42,969
first name server it was 40 milliseconds

87
00:04:39,280 --> 00:04:46,500
delay and increased by 10 milliseconds

88
00:04:42,970 --> 00:04:49,720
for every name server after that so the

89
00:04:46,500 --> 00:04:52,570
<font color="#E5E5E5">13th name server in in cases</font><font color="#CCCCCC"> where there</font>

90
00:04:49,720 --> 00:04:55,200
were 13 nameservers had 160 millisecond

91
00:04:52,570 --> 00:04:55,200
delays

92
00:04:57,920 --> 00:05:05,570
so there's a few results this graph

93
00:05:02,060 --> 00:05:08,480
shows total number of queries sent by

94
00:05:05,570 --> 00:05:11,210
each tested configuration each each

95
00:05:08,480 --> 00:05:15,260
version of the software for the<font color="#CCCCCC"> case of</font>

96
00:05:11,210 --> 00:05:18,830
no delays and no packet loss the blue

97
00:05:15,260 --> 00:05:20,840
represents queries sent to the roots the

98
00:05:18,830 --> 00:05:23,599
green is<font color="#E5E5E5"> query</font><font color="#CCCCCC"> since</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> top-level</font>

99
00:05:20,840 --> 00:05:26,210
domains and the red<font color="#CCCCCC"> is queries to the</font>

100
00:05:23,600 --> 00:05:30,770
second-level domain name servers and you

101
00:05:26,210 --> 00:05:33,710
can see that bind<font color="#CCCCCC"> 8 has the most queries</font>

102
00:05:30,770 --> 00:05:38,719
with just over 1 million total for this

103
00:05:33,710 --> 00:05:41,330
<font color="#CCCCCC">12-hour period and then then</font><font color="#E5E5E5"> they sort</font>

104
00:05:38,720 --> 00:05:42,950
<font color="#CCCCCC">of go down from there one of the</font><font color="#E5E5E5"> things</font>

105
00:05:41,330 --> 00:05:46,820
that's sort of striking about this is

106
00:05:42,950 --> 00:05:49,270
bind9 sends quite a bit more queries to

107
00:05:46,820 --> 00:05:57,200
the roots than any<font color="#E5E5E5"> of any of the others</font>

108
00:05:49,270 --> 00:05:59,320
although DJ<font color="#E5E5E5"> B DNS is similar there's a</font>

109
00:05:57,200 --> 00:06:05,719
few numbers down there just to show you

110
00:05:59,320 --> 00:06:07,790
<font color="#CCCCCC">just even</font><font color="#E5E5E5"> idea here's</font><font color="#CCCCCC"> another result of</font>

111
00:06:05,720 --> 00:06:09,440
a sort of a more realistic case with

112
00:06:07,790 --> 00:06:11,600
linear base delays and five percent

113
00:06:09,440 --> 00:06:15,110
packet loss and the numbers are about

114
00:06:11,600 --> 00:06:18,050
the same in most<font color="#E5E5E5"> cases there they just</font>

115
00:06:15,110 --> 00:06:23,060
<font color="#CCCCCC">went up a little bit due to the delays</font>

116
00:06:18,050 --> 00:06:25,580
on the loss so<font color="#E5E5E5"> x + 8 sends a lot of</font>

117
00:06:23,060 --> 00:06:29,290
queries and here are<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> the reasons</font>

118
00:06:25,580 --> 00:06:34,550
why at least<font color="#E5E5E5"> on in in my tests where I</font>

119
00:06:29,290 --> 00:06:37,850
had ipv6 on the box it sends both<font color="#CCCCCC"> quad a</font>

120
00:06:34,550 --> 00:06:40,310
<font color="#CCCCCC">&</font><font color="#E5E5E5"> a 6 queries to all of the nameservers</font>

121
00:06:37,850 --> 00:06:42,710
<font color="#E5E5E5">the roots the second level of top-level</font>

122
00:06:40,310 --> 00:06:49,520
domains for any name server address that

123
00:06:42,710 --> 00:06:51,530
has expired and bind<font color="#CCCCCC"> eight and actually</font>

124
00:06:49,520 --> 00:06:55,370
all<font color="#CCCCCC"> of the other software except for by</font>

125
00:06:51,530 --> 00:06:58,460
nine do what I call<font color="#E5E5E5"> they forward cache</font>

126
00:06:55,370 --> 00:07:01,820
misses for pending hits so they they

127
00:06:58,460 --> 00:07:04,729
forward misses for repeated queries and

128
00:07:01,820 --> 00:07:07,760
here's her sort of an<font color="#E5E5E5"> example of that a</font>

129
00:07:04,730 --> 00:07:10,409
TCP dump output where there's<font color="#CCCCCC"> two</font>

130
00:07:07,760 --> 00:07:13,649
queries right in a row for<font color="#E5E5E5"> the same name</font>

131
00:07:10,409 --> 00:07:17,729
and if you spent the time to follow<font color="#E5E5E5"> this</font>

132
00:07:13,649 --> 00:07:21,959
through you would see<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> bind9</font>

133
00:07:17,729 --> 00:07:25,019
<font color="#E5E5E5">caching name server sends for queries</font>

134
00:07:21,959 --> 00:07:27,899
all the way through through the roots

135
00:07:25,019 --> 00:07:30,689
the second-level domains until it gets

136
00:07:27,899 --> 00:07:33,569
the<font color="#E5E5E5"> first answer back so in the case</font>

137
00:07:30,689 --> 00:07:37,279
where<font color="#E5E5E5"> you have a high rate of queries</font>

138
00:07:33,569 --> 00:07:40,679
for a single a name you<font color="#CCCCCC"> can get a lot of</font>

139
00:07:37,279 --> 00:07:45,139
queries perhaps and onion esses ery

140
00:07:40,679 --> 00:07:47,909
amount of queries by nine is the only

141
00:07:45,139 --> 00:07:50,879
software that is sort of smart enough<font color="#E5E5E5"> to</font>

142
00:07:47,909 --> 00:07:54,929
realize<font color="#CCCCCC"> that it's expecting a reply for</font>

143
00:07:50,879 --> 00:07:57,629
this name any second now and it

144
00:07:54,929 --> 00:08:05,008
postpones later queries until that reply

145
00:07:57,629 --> 00:08:06,479
comes back but<font color="#E5E5E5"> on the other hand by nine</font>

146
00:08:05,009 --> 00:08:11,249
still sends a lot of queries to the

147
00:08:06,479 --> 00:08:17,329
roots and one of the reasons<font color="#CCCCCC"> is that it</font>

148
00:08:11,249 --> 00:08:21,449
sends a & a 6 queries for both expired

149
00:08:17,329 --> 00:08:25,559
name server records starting at the<font color="#E5E5E5"> root</font>

150
00:08:21,449 --> 00:08:30,029
so when the cached glue record expires

151
00:08:25,559 --> 00:08:32,370
it doesn't start<font color="#CCCCCC"> at the top level domain</font>

152
00:08:30,029 --> 00:08:36,029
it starts back at the root perhaps

153
00:08:32,370 --> 00:08:42,328
<font color="#E5E5E5">because it doesn't trust the the cached</font>

154
00:08:36,029 --> 00:08:43,740
data for the<font color="#CCCCCC"> top-level domain and below</font>

155
00:08:42,328 --> 00:08:46,550
there's there's sort of a real real

156
00:08:43,740 --> 00:08:49,920
world example where this might be

157
00:08:46,550 --> 00:08:54,329
excessive<font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> is a relatively</font>

158
00:08:49,920 --> 00:08:56,610
popular site they have for NS records

159
00:08:54,329 --> 00:08:59,339
for glue records with relatively low

160
00:08:56,610 --> 00:09:03,089
<font color="#CCCCCC">ttls so every time one of those blue</font>

161
00:08:59,339 --> 00:09:06,029
records expires a<font color="#E5E5E5"> bind9 caching name</font>

162
00:09:03,089 --> 00:09:08,360
server is going<font color="#CCCCCC"> to send eight queries to</font>

163
00:09:06,029 --> 00:09:08,360
the roots

164
00:09:10,280 --> 00:09:19,680
and DJ BDS is similar it requires the

165
00:09:16,320 --> 00:09:21,210
roots for the expired glue records but

166
00:09:19,680 --> 00:09:25,589
<font color="#E5E5E5">only for one of the nameservers it</font>

167
00:09:21,210 --> 00:09:28,230
doesn't query both unless I suppose the

168
00:09:25,590 --> 00:09:34,890
first one doesn't come back<font color="#E5E5E5"> and it only</font>

169
00:09:28,230 --> 00:09:36,210
sends ipv4 address queries one of the

170
00:09:34,890 --> 00:09:39,780
things that's unique about this software

171
00:09:36,210 --> 00:09:42,870
is that it if it gets a an additional

172
00:09:39,780 --> 00:09:45,030
record in a reply that is a glue record

173
00:09:42,870 --> 00:09:48,660
with an IP address<font color="#E5E5E5"> that has a TTL 0 it</font>

174
00:09:45,030 --> 00:09:52,829
is thinks there's something fishy about

175
00:09:48,660 --> 00:09:55,199
that and starts back at the roots<font color="#CCCCCC"> to get</font>

176
00:09:52,830 --> 00:09:57,900
that name servers IP address and here's

177
00:09:55,200 --> 00:10:02,690
an example of that the first line shows

178
00:09:57,900 --> 00:10:02,689
the user's query the second line shows

179
00:10:04,070 --> 00:10:12,240
shows the caching name server asking for

180
00:10:08,130 --> 00:10:15,240
this address at the top level domain the

181
00:10:12,240 --> 00:10:16,890
answer comes back<font color="#E5E5E5"> and there's a blue</font>

182
00:10:15,240 --> 00:10:18,750
record with a 0 TTL which you can't

183
00:10:16,890 --> 00:10:21,980
<font color="#E5E5E5">really see but in the fourth line there</font>

184
00:10:18,750 --> 00:10:28,310
you can<font color="#CCCCCC"> see that</font><font color="#E5E5E5"> it goes to</font><font color="#CCCCCC"> the roots</font>

185
00:10:21,980 --> 00:10:28,310
for NS a-- 0qu<font color="#CCCCCC"> jebo calm and so on</font>

186
00:10:31,600 --> 00:10:38,690
here's all of the results<font color="#CCCCCC"> for x + 8</font>

187
00:10:35,570 --> 00:10:41,180
except for the hundred percent loss test

188
00:10:38,690 --> 00:10:42,410
which I'll show separately one of the

189
00:10:41,180 --> 00:10:45,469
<font color="#E5E5E5">things that's interesting about this</font><font color="#CCCCCC"> is</font>

190
00:10:42,410 --> 00:10:49,310
as the sort<font color="#E5E5E5"> of network conditions get a</font>

191
00:10:45,470 --> 00:10:51,050
harsher bind9<font color="#CCCCCC"> their bind eight sends</font>

192
00:10:49,310 --> 00:10:52,849
slightly fewer queries it I don't know

193
00:10:51,050 --> 00:10:58,449
if you can tell with the the graphs go

194
00:10:52,850 --> 00:11:00,709
down a little<font color="#CCCCCC"> bit especially for the</font>

195
00:10:58,450 --> 00:11:02,630
hundred percent millisecond or 100

196
00:11:00,709 --> 00:11:08,020
millisecond delays there's quite a drop

197
00:11:02,630 --> 00:11:08,020
to the top<font color="#E5E5E5"> level domain queries there</font>

198
00:11:08,649 --> 00:11:14,330
here's<font color="#CCCCCC"> the same thing for by nine and</font>

199
00:11:12,830 --> 00:11:17,420
one of the<font color="#CCCCCC"> things interesting to note</font>

200
00:11:14,330 --> 00:11:20,149
here is that the number<font color="#CCCCCC"> of queries is</font>

201
00:11:17,420 --> 00:11:23,300
unaffected by network delays but only by

202
00:11:20,149 --> 00:11:25,279
loss so for the first three cases the

203
00:11:23,300 --> 00:11:32,300
the total number of queries is just

204
00:11:25,279 --> 00:11:37,610
about<font color="#CCCCCC"> the same just about equal the</font>

205
00:11:32,300 --> 00:11:42,500
results for djb dns nothing nothing

206
00:11:37,610 --> 00:11:49,300
<font color="#CCCCCC">really obvious to comment on here here's</font>

207
00:11:42,500 --> 00:11:49,300
<font color="#CCCCCC">windows 2000 and windows 2003</font>

208
00:11:53,509 --> 00:11:58,439
this graph I find particularly

209
00:11:56,579 --> 00:12:00,209
interesting however this is the the

210
00:11:58,439 --> 00:12:02,248
tests with<font color="#E5E5E5"> one</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> percent packet</font>

211
00:12:00,209 --> 00:12:05,729
loss so this<font color="#E5E5E5"> is what</font><font color="#CCCCCC"> happens when a</font>

212
00:12:02,249 --> 00:12:07,800
caching name server can send queries out

213
00:12:05,730 --> 00:12:13,410
to the roots but<font color="#E5E5E5"> for some reason those</font>

214
00:12:07,800 --> 00:12:14,729
responses aren't aren't getting back and

215
00:12:13,410 --> 00:12:16,680
there's quite a quite a lot<font color="#E5E5E5"> of</font>

216
00:12:14,730 --> 00:12:19,470
difference here between the different

217
00:12:16,680 --> 00:12:22,790
software on how they behave by nine is

218
00:12:19,470 --> 00:12:26,029
obviously lower than any others and

219
00:12:22,790 --> 00:12:29,430
remember from the workload slide that

220
00:12:26,029 --> 00:12:32,910
this workload has<font color="#E5E5E5"> five million total dns</font>

221
00:12:29,430 --> 00:12:35,839
queries<font color="#E5E5E5"> so in the case of bind eight it</font>

222
00:12:32,910 --> 00:12:38,430
ends up sending about 38 million

223
00:12:35,839 --> 00:12:41,040
<font color="#CCCCCC">quarters</font><font color="#E5E5E5"> out to the roots for those five</font>

224
00:12:38,430 --> 00:12:42,599
million original queries and obviously

225
00:12:41,040 --> 00:12:47,839
windows 2000 is even worse with

226
00:12:42,600 --> 00:12:50,009
something like 65 million here's a

227
00:12:47,839 --> 00:12:53,999
here's another way of looking at the

228
00:12:50,009 --> 00:12:56,809
same data these are traces of<font color="#E5E5E5"> the query</font>

229
00:12:53,999 --> 00:12:59,209
rates for all of the different

230
00:12:56,809 --> 00:13:04,529
configurations the black line shows

231
00:12:59,209 --> 00:13:07,229
queries generated by the user and as you

232
00:13:04,529 --> 00:13:09,449
can see<font color="#E5E5E5"> all of the software except for</font>

233
00:13:07,230 --> 00:13:14,279
by nine<font color="#E5E5E5"> actually amplifies the query</font>

234
00:13:09,449 --> 00:13:15,750
rates I don't<font color="#E5E5E5"> have the data shown here</font>

235
00:13:14,279 --> 00:13:21,420
but due to some other tests that I was

236
00:13:15,750 --> 00:13:22,800
running at a higher query rate some of

237
00:13:21,420 --> 00:13:26,490
these some<font color="#CCCCCC"> of the software would</font>

238
00:13:22,800 --> 00:13:31,410
<font color="#E5E5E5">actually throttle itself you can't see</font>

239
00:13:26,490 --> 00:13:36,240
that here but I think<font color="#E5E5E5"> windows 2000 did</font>

240
00:13:31,410 --> 00:13:38,759
not and bind eight and nine or<font color="#CCCCCC"> DJB</font><font color="#E5E5E5"> DNS</font>

241
00:13:36,240 --> 00:13:40,439
and find eight actually<font color="#E5E5E5"> did throttle</font>

242
00:13:38,759 --> 00:13:42,300
themselves at some higher-level say you

243
00:13:40,439 --> 00:13:44,569
know 2,000 queries per second was their

244
00:13:42,300 --> 00:13:44,569
limit

245
00:13:46,280 --> 00:13:51,240
I have a little<font color="#CCCCCC"> bit of data now on the</font>

246
00:13:49,410 --> 00:13:54,390
way<font color="#E5E5E5"> that these different caching</font>

247
00:13:51,240 --> 00:13:56,010
<font color="#CCCCCC">nameservers distributed the load to the</font>

248
00:13:54,390 --> 00:13:59,400
roots and<font color="#E5E5E5"> in one of the top level</font>

249
00:13:56,010 --> 00:14:02,910
domains so that the common perception is

250
00:13:59,400 --> 00:14:04,980
that the<font color="#E5E5E5"> name servers pick the best one</font>

251
00:14:02,910 --> 00:14:07,230
based on measurements they perform they

252
00:14:04,980 --> 00:14:11,190
know the network conditions they know

253
00:14:07,230 --> 00:14:13,710
the round trip<font color="#E5E5E5"> times and so on here's</font>

254
00:14:11,190 --> 00:14:18,390
here's an example of how this data looks

255
00:14:13,710 --> 00:14:20,790
there's a there's two datasets shown

256
00:14:18,390 --> 00:14:23,699
here the red shows queries sent to the

257
00:14:20,790 --> 00:14:29,120
roots<font color="#E5E5E5"> and the green shows queries sent</font>

258
00:14:23,700 --> 00:14:34,860
to the<font color="#CCCCCC"> calm</font><font color="#E5E5E5"> tlds the x axis has the 13</font>

259
00:14:29,120 --> 00:14:36,270
<font color="#CCCCCC">name servers for</font><font color="#E5E5E5"> each one</font><font color="#CCCCCC"> and the the to</font>

260
00:14:34,860 --> 00:14:40,730
y axis<font color="#CCCCCC"> is show that counts although</font>

261
00:14:36,270 --> 00:14:40,730
that's sort of not not critical here

262
00:14:40,850 --> 00:14:48,090
this is for bind<font color="#CCCCCC"> 8 and in the case</font><font color="#E5E5E5"> where</font>

263
00:14:46,140 --> 00:14:50,460
there's no packet loss of no delays by

264
00:14:48,090 --> 00:14:52,050
and eight just latches on to one

265
00:14:50,460 --> 00:14:54,530
particular name server and keeps using

266
00:14:52,050 --> 00:14:57,630
it there's no reason for it to switch

267
00:14:54,530 --> 00:14:58,890
the rest of this there's look pretty

268
00:14:57,630 --> 00:15:01,920
reasonable there's something funny going

269
00:14:58,890 --> 00:15:06,449
on however with the<font color="#E5E5E5"> hundred percent</font>

270
00:15:01,920 --> 00:15:07,680
packet loss case where it hits some root

271
00:15:06,450 --> 00:15:10,710
servers a little bit harder than<font color="#E5E5E5"> others</font>

272
00:15:07,680 --> 00:15:12,569
twice as much it looks like but for<font color="#E5E5E5"> the</font>

273
00:15:10,710 --> 00:15:13,980
the case is worth the linear delays it

274
00:15:12,570 --> 00:15:18,570
looks reasonable sort of what we do

275
00:15:13,980 --> 00:15:21,750
expect remember that the and all these

276
00:15:18,570 --> 00:15:25,740
the the first name server the a has the

277
00:15:21,750 --> 00:15:32,480
<font color="#CCCCCC">lowest latency in the M name server has</font>

278
00:15:25,740 --> 00:15:37,200
the highest here's buying date for the

279
00:15:32,480 --> 00:15:39,750
no packet loss no delay case it's much

280
00:15:37,200 --> 00:15:43,050
more even<font color="#E5E5E5"> it's round robin essentially</font>

281
00:15:39,750 --> 00:15:46,170
currying all nameservers equally and the

282
00:15:43,050 --> 00:15:49,380
same<font color="#E5E5E5"> for the other two cases there at</font>

283
00:15:46,170 --> 00:15:50,939
the<font color="#E5E5E5"> top and a nice exponential</font>

284
00:15:49,380 --> 00:15:53,390
distribution for all the linear delay

285
00:15:50,940 --> 00:15:53,390
cases

286
00:15:54,230 --> 00:16:01,080
<font color="#CCCCCC">djb</font><font color="#E5E5E5"> DNS always does essentially</font>

287
00:15:59,130 --> 00:16:04,860
round-robin distribution to the<font color="#E5E5E5"> name</font>

288
00:16:01,080 --> 00:16:09,050
<font color="#E5E5E5">servers regardless of packet loss or</font>

289
00:16:04,860 --> 00:16:12,920
delays and that's not no surprise they

290
00:16:09,050 --> 00:16:20,430
they mention that<font color="#E5E5E5"> in the software</font>

291
00:16:12,920 --> 00:16:23,520
description this is Windows 2000 and the

292
00:16:20,430 --> 00:16:26,479
surprising thing here is for the cases

293
00:16:23,520 --> 00:16:29,790
with linear delays that it seems<font color="#CCCCCC"> to</font>

294
00:16:26,480 --> 00:16:34,230
ignore any actual measurements at all I

295
00:16:29,790 --> 00:16:35,459
guess it always picks one names

296
00:16:34,230 --> 00:16:38,270
essentially always fixing one name

297
00:16:35,460 --> 00:16:41,190
server and just sticks with<font color="#CCCCCC"> it and</font>

298
00:16:38,270 --> 00:16:43,740
additionally for the for<font color="#CCCCCC"> the dot-com</font>

299
00:16:41,190 --> 00:16:48,570
name servers it always<font color="#E5E5E5"> ends up picking a</font>

300
00:16:43,740 --> 00:16:52,070
and sends all<font color="#CCCCCC"> of its queries to that for</font>

301
00:16:48,570 --> 00:16:55,950
the roots it's it's a little more random

302
00:16:52,070 --> 00:16:58,200
this this may<font color="#E5E5E5"> be an artifact of the the</font>

303
00:16:55,950 --> 00:17:00,960
way my test<font color="#E5E5E5"> was set up I'm</font><font color="#CCCCCC"> not sure or</font>

304
00:16:58,200 --> 00:17:03,630
it may just be that the way windows 2000

305
00:17:00,960 --> 00:17:08,250
works for the hundred percent packet

306
00:17:03,630 --> 00:17:10,680
loss case it's interesting that there's

307
00:17:08,250 --> 00:17:12,780
some green lines there which probably

308
00:17:10,680 --> 00:17:15,480
shouldn't be<font color="#E5E5E5"> there at the</font><font color="#CCCCCC"> x-axis shows</font>

309
00:17:12,780 --> 00:17:18,510
<font color="#CCCCCC">just one so it's sent one query to the</font>

310
00:17:15,480 --> 00:17:24,319
top<font color="#E5E5E5"> level domains for for a few cases</font>

311
00:17:18,510 --> 00:17:27,920
but that's sort<font color="#CCCCCC"> of an anomaly and here's</font>

312
00:17:24,319 --> 00:17:31,649
the current<font color="#CCCCCC"> version of windows 2003 and</font>

313
00:17:27,920 --> 00:17:35,130
it's a little<font color="#E5E5E5"> bit better still some</font>

314
00:17:31,650 --> 00:17:36,630
funny things going on with the one

315
00:17:35,130 --> 00:17:39,450
hundred percent packet loss case where

316
00:17:36,630 --> 00:17:42,090
some root nameservers get hit a lot more

317
00:17:39,450 --> 00:17:45,480
<font color="#E5E5E5">than others and in the linear delay</font>

318
00:17:42,090 --> 00:17:46,860
cases it's not quite as smooth or not

319
00:17:45,480 --> 00:17:48,680
not quite the distribution<font color="#E5E5E5"> I would</font>

320
00:17:46,860 --> 00:17:52,070
expect<font color="#E5E5E5"> to see but at least it is</font>

321
00:17:48,680 --> 00:17:52,070
<font color="#CCCCCC">distributed a little bit</font>

322
00:17:55,160 --> 00:18:03,210
so now<font color="#CCCCCC"> I have to say a few things about</font>

323
00:17:59,810 --> 00:18:04,860
this this quote is from slashdot based

324
00:18:03,210 --> 00:18:07,530
on the talk that I gave last year or the

325
00:18:04,860 --> 00:18:10,229
paper that<font color="#CCCCCC"> was presented</font><font color="#E5E5E5"> last year where</font>

326
00:18:07,530 --> 00:18:11,520
I mentioned<font color="#E5E5E5"> that two percent of only two</font>

327
00:18:10,230 --> 00:18:17,790
percent of the queries hitting the roots

328
00:18:11,520 --> 00:18:20,070
are valid basically and here's the punch

329
00:18:17,790 --> 00:18:22,139
line from last year's talk these are the

330
00:18:20,070 --> 00:18:25,889
nine<font color="#CCCCCC"> or so categories that I</font><font color="#E5E5E5"> came</font><font color="#CCCCCC"> up</font>

331
00:18:22,140 --> 00:18:27,270
<font color="#CCCCCC">with and I told</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> that you know</font>

332
00:18:25,890 --> 00:18:29,790
there's a<font color="#CCCCCC"> lot of repeats there was a lot</font>

333
00:18:27,270 --> 00:18:31,260
of unknown<font color="#E5E5E5"> top-level domains etc but the</font>

334
00:18:29,790 --> 00:18:37,370
legitimate category only got about two

335
00:18:31,260 --> 00:18:40,650
percent so I i took the the results from

336
00:18:37,370 --> 00:18:44,040
from this study my simulations<font color="#E5E5E5"> and ran</font>

337
00:18:40,650 --> 00:18:49,400
it through the software from last year's

338
00:18:44,040 --> 00:18:49,399
study and here are<font color="#CCCCCC"> some of</font><font color="#E5E5E5"> those numbers</font>

339
00:18:49,940 --> 00:18:56,190
unfortunately you know I didn't see<font color="#CCCCCC"> that</font>

340
00:18:52,860 --> 00:18:59,429
all<font color="#E5E5E5"> of my track all of my queries were</font>

341
00:18:56,190 --> 00:19:01,440
legitimate not surprisingly other I I

342
00:18:59,430 --> 00:19:03,210
would expect to see this unknown TLD

343
00:19:01,440 --> 00:19:04,920
category but I was a<font color="#E5E5E5"> little bit</font>

344
00:19:03,210 --> 00:19:08,760
disappointed to see so many repeated

345
00:19:04,920 --> 00:19:11,610
queries show up here and the referral

346
00:19:08,760 --> 00:19:17,190
not cached category has a<font color="#E5E5E5"> little bit too</font>

347
00:19:11,610 --> 00:19:19,379
high of percentages so the explanation

348
00:19:17,190 --> 00:19:21,990
is<font color="#E5E5E5"> that in last year's talk I was not</font>

349
00:19:19,380 --> 00:19:25,890
really aware of that software like bind9

350
00:19:21,990 --> 00:19:28,500
and DJ<font color="#CCCCCC"> be dns start over at the roots</font>

351
00:19:25,890 --> 00:19:32,760
for certain cases for expired name

352
00:19:28,500 --> 00:19:37,530
server records and you know 0 TTL glue

353
00:19:32,760 --> 00:19:40,680
records so if<font color="#E5E5E5"> I exclude those queries</font>

354
00:19:37,530 --> 00:19:43,620
from the result and running again this

355
00:19:40,680 --> 00:19:46,050
sort<font color="#E5E5E5"> of shows some of the some of the</font>

356
00:19:43,620 --> 00:19:50,520
numbers it's it's<font color="#E5E5E5"> better but it's still</font>

357
00:19:46,050 --> 00:19:53,790
not perfect another explanation may be

358
00:19:50,520 --> 00:19:57,000
that the last year study I assume that

359
00:19:53,790 --> 00:20:01,320
all the top level domains and the roots

360
00:19:57,000 --> 00:20:04,410
had TTL is longer than the time<font color="#CCCCCC"> of the</font>

361
00:20:01,320 --> 00:20:06,090
test so longer than 24 hours and in

362
00:20:04,410 --> 00:20:07,440
running these tests<font color="#E5E5E5"> that's certainly not</font>

363
00:20:06,090 --> 00:20:11,189
the case there certainly are top

364
00:20:07,440 --> 00:20:13,860
domains with<font color="#CCCCCC"> ttls shorter than 24 hours</font>

365
00:20:11,190 --> 00:20:16,980
but<font color="#E5E5E5"> I'm still not sure that it's just as</font>

366
00:20:13,860 --> 00:20:19,639
simple as that so this perhaps means

367
00:20:16,980 --> 00:20:25,860
that that number of two percent is

368
00:20:19,639 --> 00:20:27,899
higher and that the case where this

369
00:20:25,860 --> 00:20:30,149
referral not cached category which<font color="#CCCCCC"> is</font>

370
00:20:27,899 --> 00:20:34,018
about four percent those may actually

371
00:20:30,149 --> 00:20:35,549
have been legitimate queries and some of

372
00:20:34,019 --> 00:20:42,509
the repeated queries may have been

373
00:20:35,549 --> 00:20:48,860
legitimate also so I've just<font color="#CCCCCC"> a couple of</font>

374
00:20:42,509 --> 00:20:51,480
conclusion slides left here bind<font color="#E5E5E5"> eight</font>

375
00:20:48,860 --> 00:20:53,580
as we've seen can sort of latch on to a

376
00:20:51,480 --> 00:20:55,559
single name server in in a low latency

377
00:20:53,580 --> 00:20:57,120
low loss condition and unfortunately I

378
00:20:55,559 --> 00:20:58,559
didn't run more<font color="#E5E5E5"> tests and find what</font>

379
00:20:57,120 --> 00:21:00,330
those thresholds were there there must

380
00:20:58,559 --> 00:21:02,820
<font color="#E5E5E5">be some threshold where you know it's</font>

381
00:21:00,330 --> 00:21:03,928
decided something's not quite right and

382
00:21:02,820 --> 00:21:05,340
it starts to distribute the load a

383
00:21:03,929 --> 00:21:09,840
little bit but<font color="#E5E5E5"> I don't have those</font>

384
00:21:05,340 --> 00:21:13,830
<font color="#E5E5E5">numbers djb uses uniform distribution in</font>

385
00:21:09,840 --> 00:21:17,970
all cases ignoring ptl's<font color="#E5E5E5"> are knowing the</font>

386
00:21:13,830 --> 00:21:22,168
round trip<font color="#E5E5E5"> times and packet loss windows</font>

387
00:21:17,970 --> 00:21:23,820
2000 dns server is has a really really

388
00:21:22,169 --> 00:21:27,960
bad service selection algorithm as far

389
00:21:23,820 --> 00:21:29,879
as<font color="#E5E5E5"> i can tell and the 2003 algorithm is</font>

390
00:21:27,960 --> 00:21:32,690
maybe a little bit<font color="#E5E5E5"> better but</font><font color="#CCCCCC"> i think</font>

391
00:21:29,879 --> 00:21:32,689
it's still<font color="#E5E5E5"> be improved</font>

392
00:21:36,400 --> 00:21:43,480
it seems<font color="#E5E5E5"> to me that the fact that bind</font>

393
00:21:39,280 --> 00:21:46,629
<font color="#CCCCCC">eight at least in by nine also since</font>

394
00:21:43,480 --> 00:21:50,410
queries to the roots for ipv6 addresses

395
00:21:46,630 --> 00:21:52,420
may be causing a little bit of abuse<font color="#E5E5E5"> I</font>

396
00:21:50,410 --> 00:21:55,900
really love the fact that by nine does

397
00:21:52,420 --> 00:21:58,930
not forward cache misses for pending

398
00:21:55,900 --> 00:22:01,750
hits I think that's a very nice thing be

399
00:21:58,930 --> 00:22:06,640
and another thing<font color="#CCCCCC"> I</font><font color="#E5E5E5"> like about by nine</font>

400
00:22:01,750 --> 00:22:08,920
is that<font color="#E5E5E5"> it attenuates the the load in</font>

401
00:22:06,640 --> 00:22:11,260
the case where it's not communicating

402
00:22:08,920 --> 00:22:13,480
well with the root name server it

403
00:22:11,260 --> 00:22:17,550
doesn't<font color="#E5E5E5"> send more queries than the user</font>

404
00:22:13,480 --> 00:22:19,630
sends it sends fewer and finally as as I

405
00:22:17,550 --> 00:22:24,700
admitted we need to I need<font color="#E5E5E5"> to improve</font>

406
00:22:19,630 --> 00:22:27,160
<font color="#CCCCCC">the models for analyzing traces real</font>

407
00:22:24,700 --> 00:22:30,090
traces from real root servers and so on

408
00:22:27,160 --> 00:22:32,260
to see<font color="#E5E5E5"> if we can figure out how many</font>

409
00:22:30,090 --> 00:22:37,709
queries are legitimate and<font color="#E5E5E5"> how many are</font>

410
00:22:32,260 --> 00:22:37,710
bogus that's it

411
00:22:44,290 --> 00:22:49,700
you didn't go as long as I thought<font color="#E5E5E5"> you</font>

412
00:22:47,210 --> 00:22:56,570
did any questions from the assembled

413
00:22:49,700 --> 00:23:00,110
multitude for<font color="#CCCCCC"> Dwayne</font><font color="#E5E5E5"> okay I got 14 I've</font>

414
00:22:56,570 --> 00:23:04,760
got one for you are you as you try<font color="#CCCCCC"> and</font>

415
00:23:00,110 --> 00:23:06,799
create refine your technique are you

416
00:23:04,760 --> 00:23:11,150
going to try and refine your test bed to

417
00:23:06,799 --> 00:23:13,490
more accurate or accurately reflect DNA

418
00:23:11,150 --> 00:23:17,960
deployed DNS infrastructure or are you

419
00:23:13,490 --> 00:23:19,790
going to just work on the modeling and

420
00:23:17,960 --> 00:23:21,350
<font color="#E5E5E5">the software give me for example not</font>

421
00:23:19,790 --> 00:23:25,389
assuming that delays are linear across

422
00:23:21,350 --> 00:23:25,389
name servers and so on like that yeah

423
00:23:25,540 --> 00:23:32,860
yeah yeah I would I would I think that's

424
00:23:29,059 --> 00:23:36,950
an important next step it but it's

425
00:23:32,860 --> 00:23:39,139
obviously difficult because you know the

426
00:23:36,950 --> 00:23:40,700
route the<font color="#E5E5E5"> round-trip time distribution</font>

427
00:23:39,140 --> 00:23:43,270
depends on where you are who you<font color="#E5E5E5"> are and</font>

428
00:23:40,700 --> 00:23:45,950
that sort of thing I<font color="#CCCCCC"> guess that's</font>

429
00:23:43,270 --> 00:23:48,530
difficult with all the anycast name

430
00:23:45,950 --> 00:23:50,240
servers out there and so on that<font color="#E5E5E5"> that's</font>

431
00:23:48,530 --> 00:23:52,340
<font color="#E5E5E5">actually sort of intriguing because if</font>

432
00:23:50,240 --> 00:23:56,740
you actually put in any cast instance

433
00:23:52,340 --> 00:23:56,740
into play in<font color="#E5E5E5"> your test bed it would be</font>

434
00:23:56,860 --> 00:24:04,040
part of the problems with with managing

435
00:24:00,559 --> 00:24:07,190
anycast instances is how how do<font color="#E5E5E5"> you</font>

436
00:24:04,040 --> 00:24:09,020
actually mana monitor them and do load

437
00:24:07,190 --> 00:24:11,960
sharing among them<font color="#E5E5E5"> or do you just sort</font>

438
00:24:09,020 --> 00:24:14,120
of roughly guess and saying well that's

439
00:24:11,960 --> 00:24:15,559
sort of an underserved area or an

440
00:24:14,120 --> 00:24:18,350
underserved thing we'll put something

441
00:24:15,559 --> 00:24:20,899
there because latency is so high and you

442
00:24:18,350 --> 00:24:23,299
hope that things will work right on

443
00:24:20,900 --> 00:24:24,590
routing protocols and the like so it it

444
00:24:23,299 --> 00:24:26,150
would<font color="#CCCCCC"> be interesting to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> how you do</font>

445
00:24:24,590 --> 00:24:27,949
your test<font color="#E5E5E5"> bed yeah I don't I don't think</font>

446
00:24:26,150 --> 00:24:30,200
it's I<font color="#E5E5E5"> don't think I'm nearly to the</font>

447
00:24:27,950 --> 00:24:33,190
point where I could actually use actual

448
00:24:30,200 --> 00:24:36,590
any cat servers in<font color="#E5E5E5"> the test fit but</font>

449
00:24:33,190 --> 00:24:39,410
certainly it's it's easy to you know<font color="#E5E5E5"> say</font>

450
00:24:36,590 --> 00:24:43,990
change the distribution of<font color="#CCCCCC"> ttls</font><font color="#E5E5E5"> or round</font>

451
00:24:39,410 --> 00:24:43,990
trip times<font color="#CCCCCC"> nobody</font><font color="#E5E5E5"> interests</font>

