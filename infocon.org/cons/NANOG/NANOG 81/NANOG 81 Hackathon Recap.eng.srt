1
00:00:01,610 --> 00:00:05,759
[Music]

2
00:00:05,759 --> 00:00:07,520
this past weekend we held the manock

3
00:00:07,520 --> 00:00:08,320
hackathon

4
00:00:08,320 --> 00:00:10,080
which we hold the weekend before nano

5
00:00:10,080 --> 00:00:11,360
conferences

6
00:00:11,360 --> 00:00:13,440
it is organized by the program committee

7
00:00:13,440 --> 00:00:14,880
and its goal is to promote

8
00:00:14,880 --> 00:00:17,440
nanog's educational mission we aim to

9
00:00:17,440 --> 00:00:18,640
share knowledge

10
00:00:18,640 --> 00:00:20,880
to enable professional development and

11
00:00:20,880 --> 00:00:22,320
to develop the next generation of

12
00:00:22,320 --> 00:00:24,080
networking professionals

13
00:00:24,080 --> 00:00:25,840
we've experimented with a number of

14
00:00:25,840 --> 00:00:27,680
different formats over the years

15
00:00:27,680 --> 00:00:29,840
we've provided exercises to complete an

16
00:00:29,840 --> 00:00:31,439
achievement of a goal

17
00:00:31,439 --> 00:00:32,960
there have been participant driven

18
00:00:32,960 --> 00:00:34,960
projects centered on a theme

19
00:00:34,960 --> 00:00:36,960
and we've had entirely open-ended

20
00:00:36,960 --> 00:00:39,520
participant-driven projects

21
00:00:39,520 --> 00:00:41,680
participants choose to work individually

22
00:00:41,680 --> 00:00:43,840
or self-organize into groups

23
00:00:43,840 --> 00:00:45,920
and this time we had a theme which was

24
00:00:45,920 --> 00:00:47,920
configuration modeling

25
00:00:47,920 --> 00:00:49,360
modeling is foundational to

26
00:00:49,360 --> 00:00:51,680
configuration automation systems

27
00:00:51,680 --> 00:00:54,239
at any level of complexity from intent

28
00:00:54,239 --> 00:00:55,600
based networking

29
00:00:55,600 --> 00:00:57,840
or network graph systems to a single

30
00:00:57,840 --> 00:00:59,520
peer on a single device

31
00:00:59,520 --> 00:01:01,840
robust models are necessary in order to

32
00:01:01,840 --> 00:01:04,080
provide guarantees of correctness

33
00:01:04,080 --> 00:01:06,560
on how a network is configured to

34
00:01:06,560 --> 00:01:08,560
support heterogeneous networks

35
00:01:08,560 --> 00:01:10,640
vendor independent abstract models must

36
00:01:10,640 --> 00:01:12,000
be used

37
00:01:12,000 --> 00:01:14,159
as our first participant driven project

38
00:01:14,159 --> 00:01:16,000
theme in quite some time

39
00:01:16,000 --> 00:01:17,439
we thought it would be fitting to pay

40
00:01:17,439 --> 00:01:19,759
homage to the very first nano hackathon

41
00:01:19,759 --> 00:01:21,680
which took place nearly five years ago

42
00:01:21,680 --> 00:01:23,920
at nanak 67 in chicago

43
00:01:23,920 --> 00:01:26,159
the theme then was source of truth we've

44
00:01:26,159 --> 00:01:27,840
taken that foundational theme

45
00:01:27,840 --> 00:01:30,640
and encouraged participants to advance

46
00:01:30,640 --> 00:01:31,840
it

47
00:01:31,840 --> 00:01:33,680
since that inaugural hackathon at nanook

48
00:01:33,680 --> 00:01:35,920
67 we've held 11 more

49
00:01:35,920 --> 00:01:38,400
this is our second virtual one hackers

50
00:01:38,400 --> 00:01:39,520
worked all weekend

51
00:01:39,520 --> 00:01:41,280
but finished and uh finished ahead of

52
00:01:41,280 --> 00:01:43,360
the super bowl kickoff

53
00:01:43,360 --> 00:01:45,280
like last time we had participants from

54
00:01:45,280 --> 00:01:47,200
outside of north america

55
00:01:47,200 --> 00:01:49,520
tony yana colombo from south africa and

56
00:01:49,520 --> 00:01:51,759
his nanak 80 hackathon partner

57
00:01:51,759 --> 00:01:53,600
barry jones cook have been working

58
00:01:53,600 --> 00:01:55,520
together since the last hackathon

59
00:01:55,520 --> 00:01:56,960
you can read about them in a recent

60
00:01:56,960 --> 00:01:59,280
nanog story this time they were joined

61
00:01:59,280 --> 00:02:01,040
by jose montero

62
00:02:01,040 --> 00:02:04,000
martin of spain and pete wykowski and

63
00:02:04,000 --> 00:02:05,759
nate sales of the us

64
00:02:05,759 --> 00:02:08,160
a special note nate sales is currently a

65
00:02:08,160 --> 00:02:09,840
high school student and will be giving a

66
00:02:09,840 --> 00:02:10,318
talk

67
00:02:10,318 --> 00:02:13,680
on building an open source anycast cdn

68
00:02:13,680 --> 00:02:16,080
they were among a small but engaged and

69
00:02:16,080 --> 00:02:18,160
enthusiastic group of participants

70
00:02:18,160 --> 00:02:20,080
who work together on five projects in

71
00:02:20,080 --> 00:02:22,319
total either on our theme

72
00:02:22,319 --> 00:02:25,280
or on the topic of their choosing the

73
00:02:25,280 --> 00:02:26,480
projects included

74
00:02:26,480 --> 00:02:29,680
a netbox yang plugin

75
00:02:29,680 --> 00:02:32,560
configuration push via netconf and

76
00:02:32,560 --> 00:02:34,840
virtual infrastructure on vagrant on

77
00:02:34,840 --> 00:02:36,400
windows

78
00:02:36,400 --> 00:02:38,560
today you'll be seeing presentations on

79
00:02:38,560 --> 00:02:39,680
two projects

80
00:02:39,680 --> 00:02:42,239
zoe blevins will be presenting her work

81
00:02:42,239 --> 00:02:42,959
on config

82
00:02:42,959 --> 00:02:45,440
automation with open config and she'll

83
00:02:45,440 --> 00:02:47,599
be followed by tony barry jose

84
00:02:47,599 --> 00:02:51,360
p and nate on telemetry lab automation

85
00:02:51,360 --> 00:02:53,519
all right uh hi everyone my name is zoe

86
00:02:53,519 --> 00:02:55,599
blevins i'm a senior software engineer

87
00:02:55,599 --> 00:02:56,879
at netflix open connect

88
00:02:56,879 --> 00:02:59,040
and with a focus on creating kind of

89
00:02:59,040 --> 00:03:00,480
distributed systems and platforms to

90
00:03:00,480 --> 00:03:01,760
support our network and systems

91
00:03:01,760 --> 00:03:03,200
infrastructure

92
00:03:03,200 --> 00:03:04,640
and today i'm here to talk to you guys

93
00:03:04,640 --> 00:03:06,480
about a hack i did um

94
00:03:06,480 --> 00:03:08,000
to play around with config automation

95
00:03:08,000 --> 00:03:10,879
using open configuring models and gnmi

96
00:03:10,879 --> 00:03:12,400
and so just to start i'm gonna go over a

97
00:03:12,400 --> 00:03:15,200
little bit of terminology um

98
00:03:15,200 --> 00:03:17,040
so open config i'm gonna i went ahead

99
00:03:17,040 --> 00:03:18,720
and pulled this description straight

100
00:03:18,720 --> 00:03:19,760
from their website i don't want to put

101
00:03:19,760 --> 00:03:20,800
any words in their mouth so i'm going to

102
00:03:20,800 --> 00:03:22,800
read it as it is but um

103
00:03:22,800 --> 00:03:24,480
open can fix an informal working group

104
00:03:24,480 --> 00:03:26,480
of network operators sharing the goal of

105
00:03:26,480 --> 00:03:27,920
moving our networks toward a more

106
00:03:27,920 --> 00:03:28,480
dynamic

107
00:03:28,480 --> 00:03:30,159
programmable infrastructure by adopting

108
00:03:30,159 --> 00:03:31,760
software-defined networking principles

109
00:03:31,760 --> 00:03:33,280
such as declarative configuration and

110
00:03:33,280 --> 00:03:36,239
model-driven management and operations

111
00:03:36,239 --> 00:03:37,840
uh one of the things the openconfig

112
00:03:37,840 --> 00:03:40,159
group does is produce yang models

113
00:03:40,159 --> 00:03:43,280
that are based around modeling

114
00:03:43,280 --> 00:03:45,519
individual network elements and kind of

115
00:03:45,519 --> 00:03:48,319
driving us toward that intent based

116
00:03:48,319 --> 00:03:51,280
kind of network modeling and so yang

117
00:03:51,280 --> 00:03:52,959
itself is just a data modeling language

118
00:03:52,959 --> 00:03:54,480
it was created for the purpose of

119
00:03:54,480 --> 00:03:56,480
modeling that workstation configuration

120
00:03:56,480 --> 00:03:59,680
um there are also two protocols i'm

121
00:03:59,680 --> 00:04:00,000
gonna talk

122
00:04:00,000 --> 00:04:03,920
about here gnmi and gnoi gnmi is just a

123
00:04:03,920 --> 00:04:05,120
grpc interface

124
00:04:05,120 --> 00:04:08,480
um used to send um send and receive open

125
00:04:08,480 --> 00:04:09,280
config data

126
00:04:09,280 --> 00:04:12,319
to and from a router uh gnoi is more

127
00:04:12,319 --> 00:04:14,080
operational based so it's used for

128
00:04:14,080 --> 00:04:16,798
um kicking off operational tasks things

129
00:04:16,798 --> 00:04:18,399
like initiating pings

130
00:04:18,399 --> 00:04:20,880
um clearing interface counters rebooting

131
00:04:20,880 --> 00:04:21,918
a router

132
00:04:21,918 --> 00:04:23,199
operational things that aren't really

133
00:04:23,199 --> 00:04:24,880
tied to the network model or the network

134
00:04:24,880 --> 00:04:26,160
configuration

135
00:04:26,160 --> 00:04:27,520
and so a lot of what i'll be talking

136
00:04:27,520 --> 00:04:29,680
about today is taking those open the

137
00:04:29,680 --> 00:04:30,400
gang models

138
00:04:30,400 --> 00:04:33,199
populating them with data and sending

139
00:04:33,199 --> 00:04:34,800
that data to the router for the purpose

140
00:04:34,800 --> 00:04:35,840
of configuring it

141
00:04:35,840 --> 00:04:37,840
and so i went into this hack with two

142
00:04:37,840 --> 00:04:39,520
main goals and my goal was to fully

143
00:04:39,520 --> 00:04:41,360
configure a lab network using only

144
00:04:41,360 --> 00:04:43,360
openfig and gmi no um

145
00:04:43,360 --> 00:04:46,400
hand editing um no other ssh base tools

146
00:04:46,400 --> 00:04:48,080
just purely gmi

147
00:04:48,080 --> 00:04:49,360
and then also to perform state

148
00:04:49,360 --> 00:04:51,600
validation um using gmi after making

149
00:04:51,600 --> 00:04:53,840
those configuration changes

150
00:04:53,840 --> 00:04:55,440
so just a real quick look at my lab

151
00:04:55,440 --> 00:04:56,880
environment and

152
00:04:56,880 --> 00:04:58,320
i've got a management switch that's

153
00:04:58,320 --> 00:05:00,400
there just to connect my linux desktop

154
00:05:00,400 --> 00:05:02,080
directly into all the routers so i can

155
00:05:02,080 --> 00:05:03,840
perform management tasks such as ssh and

156
00:05:03,840 --> 00:05:05,840
due to my connections

157
00:05:05,840 --> 00:05:08,240
um and then i have two core routers that

158
00:05:08,240 --> 00:05:11,199
are in bgp as64512

159
00:05:11,199 --> 00:05:13,919
um and then two top of rack routers that

160
00:05:13,919 --> 00:05:14,479
are in

161
00:05:14,479 --> 00:05:19,360
um bgp 64 513 and 64 514 respectively

162
00:05:19,360 --> 00:05:22,240
those both have an ubuntu host hanging

163
00:05:22,240 --> 00:05:23,520
off of them and i've

164
00:05:23,520 --> 00:05:25,280
a locally configured vlan on the top of

165
00:05:25,280 --> 00:05:28,320
rack and all of the uh routers are

166
00:05:28,320 --> 00:05:30,320
running ceos just continuous

167
00:05:30,320 --> 00:05:34,000
um containerized version of arista's eos

168
00:05:34,000 --> 00:05:36,160
um and this is all kind of accomplished

169
00:05:36,160 --> 00:05:37,680
with gns3

170
00:05:37,680 --> 00:05:38,960
so i'm going to talk first about the

171
00:05:38,960 --> 00:05:40,320
configuration kind of individual

172
00:05:40,320 --> 00:05:41,840
configuration items i was able to

173
00:05:41,840 --> 00:05:43,600
achieve with open config

174
00:05:43,600 --> 00:05:45,120
first being creating point-to-point

175
00:05:45,120 --> 00:05:46,400
links between two devices this is

176
00:05:46,400 --> 00:05:47,840
bringing the interface up and applying

177
00:05:47,840 --> 00:05:49,360
an ip address

178
00:05:49,360 --> 00:05:51,199
i was able to initialize bgp with a

179
00:05:51,199 --> 00:05:53,360
given asn redistribute connected routes

180
00:05:53,360 --> 00:05:54,160
into bgp

181
00:05:54,160 --> 00:05:56,960
at the bgp neighbors create an svi and

182
00:05:56,960 --> 00:05:57,840
modify

183
00:05:57,840 --> 00:06:00,080
vlan settings on a port a little

184
00:06:00,080 --> 00:06:01,520
asterisk there for the svi

185
00:06:01,520 --> 00:06:03,759
and unfortunately there was a bug in the

186
00:06:03,759 --> 00:06:06,319
version of eos that my lab was running

187
00:06:06,319 --> 00:06:08,160
and so while the svi does get created

188
00:06:08,160 --> 00:06:09,919
and it gets created with mtu of zero

189
00:06:09,919 --> 00:06:12,000
which puts the uh the import in a pretty

190
00:06:12,000 --> 00:06:14,000
wonky state and does require a little

191
00:06:14,000 --> 00:06:15,600
bit of a manual tickle to get it up

192
00:06:15,600 --> 00:06:16,960
um so i then took those kind of

193
00:06:16,960 --> 00:06:18,720
individual configuration tasks and

194
00:06:18,720 --> 00:06:20,000
grouped them into apis

195
00:06:20,000 --> 00:06:22,080
for kind of common operational tasks i

196
00:06:22,080 --> 00:06:23,280
envision when managing

197
00:06:23,280 --> 00:06:25,919
um kind of a data center network and so

198
00:06:25,919 --> 00:06:27,600
those three tasks are provisioning the

199
00:06:27,600 --> 00:06:28,560
new top of rack

200
00:06:28,560 --> 00:06:30,240
and adding a vlan to a top of wrap and

201
00:06:30,240 --> 00:06:32,400
then editing access ports

202
00:06:32,400 --> 00:06:35,520
and so um the provision task creates the

203
00:06:35,520 --> 00:06:37,199
entry in the database for the top of

204
00:06:37,199 --> 00:06:38,560
rack it creates point point links to the

205
00:06:38,560 --> 00:06:39,280
core router

206
00:06:39,280 --> 00:06:41,120
um sets up bgp all that good stuff

207
00:06:41,120 --> 00:06:42,800
adding vlan obviously it creates

208
00:06:42,800 --> 00:06:45,840
the svi then um editing access vlans is

209
00:06:45,840 --> 00:06:47,199
exactly what it sounds like changing

210
00:06:47,199 --> 00:06:48,720
what the access port is maybe doing

211
00:06:48,720 --> 00:06:50,000
support descriptions things of that

212
00:06:50,000 --> 00:06:51,120
nature

213
00:06:51,120 --> 00:06:52,720
uh the backend database for the system

214
00:06:52,720 --> 00:06:54,240
is a really simple sqlite database

215
00:06:54,240 --> 00:06:56,000
there's not a lot of thought put into

216
00:06:56,000 --> 00:06:56,560
the um

217
00:06:56,560 --> 00:06:57,759
the structure of the database so please

218
00:06:57,759 --> 00:07:00,000
don't judge it too harshly um but for

219
00:07:00,000 --> 00:07:01,919
each device we just store the hostname

220
00:07:01,919 --> 00:07:03,520
the management ip and the role and then

221
00:07:03,520 --> 00:07:04,400
a set of

222
00:07:04,400 --> 00:07:05,520
we have a software table for

223
00:07:05,520 --> 00:07:07,840
configurations which are keyed off of

224
00:07:07,840 --> 00:07:09,199
the open config path

225
00:07:09,199 --> 00:07:11,520
and then store the actual json object

226
00:07:11,520 --> 00:07:13,599
that we want to send via gnmi

227
00:07:13,599 --> 00:07:16,319
and i chose to store each of these um

228
00:07:16,319 --> 00:07:18,080
open config paths as individual elements

229
00:07:18,080 --> 00:07:20,160
rather than using the top level trees

230
00:07:20,160 --> 00:07:22,319
for me that felt easier i could store

231
00:07:22,319 --> 00:07:23,440
the individual elements and interact

232
00:07:23,440 --> 00:07:24,639
with those individual elements

233
00:07:24,639 --> 00:07:27,120
cleanly versus having to download the

234
00:07:27,120 --> 00:07:28,000
database

235
00:07:28,000 --> 00:07:29,520
navigate the piece i want to edit and

236
00:07:29,520 --> 00:07:31,039
then store it back

237
00:07:31,039 --> 00:07:32,880
um i'm not positive that this was the

238
00:07:32,880 --> 00:07:34,479
best way to go about it this is again my

239
00:07:34,479 --> 00:07:36,240
first time playing with open config this

240
00:07:36,240 --> 00:07:37,759
is just what made the most sense to me

241
00:07:37,759 --> 00:07:38,319
and be

242
00:07:38,319 --> 00:07:39,680
definitely interested in hearing how

243
00:07:39,680 --> 00:07:42,000
other people can tackle that

244
00:07:42,000 --> 00:07:43,840
and so just a quick look at what that

245
00:07:43,840 --> 00:07:45,599
database looks like this is just output

246
00:07:45,599 --> 00:07:46,160
from my

247
00:07:46,160 --> 00:07:47,840
api you can see here as i mentioned we

248
00:07:47,840 --> 00:07:49,280
store the host name the role the

249
00:07:49,280 --> 00:07:50,479
management key for the top for the

250
00:07:50,479 --> 00:07:51,440
device

251
00:07:51,440 --> 00:07:53,360
and then we store a list of configs and

252
00:07:53,360 --> 00:07:55,520
i've included the internet1 config here

253
00:07:55,520 --> 00:07:56,960
and you can see that we have the path

254
00:07:56,960 --> 00:07:58,479
and this is the open config path for

255
00:07:58,479 --> 00:07:59,440
configuring

256
00:07:59,440 --> 00:08:01,199
and the actual json structure that we

257
00:08:01,199 --> 00:08:02,639
send to the device and you can see

258
00:08:02,639 --> 00:08:05,520
um yeah where the interface description

259
00:08:05,520 --> 00:08:06,080
gets set

260
00:08:06,080 --> 00:08:07,919
where we unshut setting it to enable

261
00:08:07,919 --> 00:08:09,680
truth kind of functionally the same as

262
00:08:09,680 --> 00:08:12,080
unchecked and we set up our ip address

263
00:08:12,080 --> 00:08:13,319
here um

264
00:08:13,319 --> 00:08:15,759
10.0.0.0 in this case and prefix length

265
00:08:15,759 --> 00:08:16,160
of

266
00:08:16,160 --> 00:08:19,199
31. and so i want to kind of take you

267
00:08:19,199 --> 00:08:20,000
guys through

268
00:08:20,000 --> 00:08:22,080
a quick demo of using the apis that i

269
00:08:22,080 --> 00:08:23,440
created and so

270
00:08:23,440 --> 00:08:25,680
part of setting up the lab and my api

271
00:08:25,680 --> 00:08:27,440
when it comes up it populates data

272
00:08:27,440 --> 00:08:29,759
for the for tour one for the two four

273
00:08:29,759 --> 00:08:30,639
routers

274
00:08:30,639 --> 00:08:32,080
but it leaves torque two completely

275
00:08:32,080 --> 00:08:34,159
unconfigured and unpopulated and so

276
00:08:34,159 --> 00:08:35,919
i'm going to step you through what it

277
00:08:35,919 --> 00:08:37,599
looks like to fully configure torque you

278
00:08:37,599 --> 00:08:38,559
from scratch

279
00:08:38,559 --> 00:08:40,479
and so here's our initial state and you

280
00:08:40,479 --> 00:08:41,919
can see if you remember from the lab

281
00:08:41,919 --> 00:08:43,760
diagram ethernet one on tor two

282
00:08:43,760 --> 00:08:45,440
connected up to core router run

283
00:08:45,440 --> 00:08:48,640
core router two rather um port nine

284
00:08:48,640 --> 00:08:50,240
um either net nine on torque two

285
00:08:50,240 --> 00:08:51,680
connected down to host two

286
00:08:51,680 --> 00:08:53,519
and then as i mentioned it had a vlan

287
00:08:53,519 --> 00:08:55,680
configured and it was using vgp as the

288
00:08:55,680 --> 00:08:56,399
um

289
00:08:56,399 --> 00:08:58,720
routing protocol so in this case i've

290
00:08:58,720 --> 00:09:00,160
got everything defaulted there's no

291
00:09:00,160 --> 00:09:01,440
configuration of those internet

292
00:09:01,440 --> 00:09:03,600
interfaces there's no vlan 102 yet

293
00:09:03,600 --> 00:09:04,959
there's no bgp running

294
00:09:04,959 --> 00:09:06,240
so here's a quick look at what that

295
00:09:06,240 --> 00:09:08,320
provision tour api looks like um you can

296
00:09:08,320 --> 00:09:09,600
see the inputs here the host name and

297
00:09:09,600 --> 00:09:11,279
management mp for the new device

298
00:09:11,279 --> 00:09:13,680
um what asn it's going to reside in the

299
00:09:13,680 --> 00:09:15,360
um prefix we want to use for the

300
00:09:15,360 --> 00:09:16,480
point-to-point link up to the core

301
00:09:16,480 --> 00:09:17,360
router and then

302
00:09:17,360 --> 00:09:19,200
what exact core router report we're

303
00:09:19,200 --> 00:09:21,200
connecting to that's important because

304
00:09:21,200 --> 00:09:22,000
this api

305
00:09:22,000 --> 00:09:23,440
actually configures both ends so it will

306
00:09:23,440 --> 00:09:25,600
hit core router 2 and torque 2.

307
00:09:25,600 --> 00:09:27,519
so assuming we've provided this data to

308
00:09:27,519 --> 00:09:29,440
the api and we hit submit

309
00:09:29,440 --> 00:09:31,200
in a few seconds we'll have this output

310
00:09:31,200 --> 00:09:33,519
on the tour so if we look at ethernet 1

311
00:09:33,519 --> 00:09:35,440
you can now see we've got our core

312
00:09:35,440 --> 00:09:37,920
router 2 either net 9 description there

313
00:09:37,920 --> 00:09:40,480
the ip address if i i made kind of a

314
00:09:40,480 --> 00:09:41,920
decision that the top of rack will

315
00:09:41,920 --> 00:09:43,279
always have the second ip

316
00:09:43,279 --> 00:09:46,800
and the prefix supplied so um ethernet 9

317
00:09:46,800 --> 00:09:49,279
on core router 2 has the 10.0.1.2

318
00:09:49,279 --> 00:09:52,560
um and this board has the 10.0.1.3

319
00:09:52,560 --> 00:09:54,240
uh you can also see here that it brought

320
00:09:54,240 --> 00:09:56,160
up bgp with the right as

321
00:09:56,160 --> 00:09:57,760
number uh it redistributed connected

322
00:09:57,760 --> 00:09:59,040
routes automatically and it configured

323
00:09:59,040 --> 00:10:00,320
that core router to

324
00:10:00,320 --> 00:10:03,040
ip as the enabler and then we can

325
00:10:03,040 --> 00:10:04,079
actually look at our route here

326
00:10:04,079 --> 00:10:05,920
and see all the routes that we learned

327
00:10:05,920 --> 00:10:07,839
from um core router 2

328
00:10:07,839 --> 00:10:11,519
including 11.0.1.0.24 which is the vlan

329
00:10:11,519 --> 00:10:12,240
that's running

330
00:10:12,240 --> 00:10:15,360
on the um on tour one that host one is

331
00:10:15,360 --> 00:10:16,640
connected to

332
00:10:16,640 --> 00:10:18,880
and so at this point the top of rack can

333
00:10:18,880 --> 00:10:21,600
connect topograph2 containing host one

334
00:10:21,600 --> 00:10:24,320
so the next step is to uh configure an

335
00:10:24,320 --> 00:10:24,959
svi

336
00:10:24,959 --> 00:10:26,560
configure that vlan 102 that i mentioned

337
00:10:26,560 --> 00:10:27,920
before on the top rack and so in this

338
00:10:27,920 --> 00:10:29,360
case we pass in

339
00:10:29,360 --> 00:10:31,600
the hostname again for our top rex we

340
00:10:31,600 --> 00:10:32,800
know exactly what device we're trying to

341
00:10:32,800 --> 00:10:33,920
configure on

342
00:10:33,920 --> 00:10:35,440
um the vlan number we're trying to

343
00:10:35,440 --> 00:10:37,519
configure the prefix to apply to that

344
00:10:37,519 --> 00:10:40,399
vlan and a description for it and when

345
00:10:40,399 --> 00:10:41,519
we hit submit

346
00:10:41,519 --> 00:10:43,519
this is what we see on the device and as

347
00:10:43,519 --> 00:10:45,200
i mentioned we hit that bug

348
00:10:45,200 --> 00:10:47,519
with a specific version of arista uh so

349
00:10:47,519 --> 00:10:48,880
you can see the iq address does get

350
00:10:48,880 --> 00:10:49,440
created

351
00:10:49,440 --> 00:10:50,959
the interface gets created and the np

352
00:10:50,959 --> 00:10:52,560
dress gets created the vlan

353
00:10:52,560 --> 00:10:55,920
shows up um but it's got an mtu of zero

354
00:10:55,920 --> 00:10:57,519
and another funny thing here is you can

355
00:10:57,519 --> 00:11:00,240
see that the show and vlan has the

356
00:11:00,240 --> 00:11:01,600
description but it doesn't actually show

357
00:11:01,600 --> 00:11:02,800
up in the config

358
00:11:02,800 --> 00:11:05,120
if i do hop on and run a no shut it

359
00:11:05,120 --> 00:11:06,320
cleans everything up the description

360
00:11:06,320 --> 00:11:07,760
does show up in the config and the

361
00:11:07,760 --> 00:11:08,880
interface works but

362
00:11:08,880 --> 00:11:11,200
in its current state add to that bug

363
00:11:11,200 --> 00:11:12,800
with the mtv being zero it's in kind of

364
00:11:12,800 --> 00:11:13,600
a wonky state

365
00:11:13,600 --> 00:11:15,360
and then the final step is to actually

366
00:11:15,360 --> 00:11:16,640
put our host two and

367
00:11:16,640 --> 00:11:19,519
um vlan 102 and so this is the set

368
00:11:19,519 --> 00:11:21,200
access vlan api

369
00:11:21,200 --> 00:11:22,720
again we give it the host name of the

370
00:11:22,720 --> 00:11:24,640
device we're trying to modify and then

371
00:11:24,640 --> 00:11:25,839
we set the port that we're trying to

372
00:11:25,839 --> 00:11:28,000
modify so ethernet nine in this case the

373
00:11:28,000 --> 00:11:29,680
access vlan will be 102 and a

374
00:11:29,680 --> 00:11:31,519
description to put on the port

375
00:11:31,519 --> 00:11:34,000
when we hit submit on our top of rack we

376
00:11:34,000 --> 00:11:35,839
can look at port 9 now and see if it's

377
00:11:35,839 --> 00:11:37,279
got description host 2 it's in

378
00:11:37,279 --> 00:11:40,399
access vm102 and so at this point host 2

379
00:11:40,399 --> 00:11:42,399
would now be able to ping post one

380
00:11:42,399 --> 00:11:44,640
across our lab network all right so um i

381
00:11:44,640 --> 00:11:46,000
kind of outlined my goals the start of

382
00:11:46,000 --> 00:11:47,200
the presentation i would talk a little

383
00:11:47,200 --> 00:11:47,920
bit about

384
00:11:47,920 --> 00:11:50,720
what i was able to achieve and so i did

385
00:11:50,720 --> 00:11:53,040
manage to fully configure my network my

386
00:11:53,040 --> 00:11:53,680
lab network

387
00:11:53,680 --> 00:11:55,680
using only openconfig and gmi with the

388
00:11:55,680 --> 00:11:57,760
exception of having to do that um no

389
00:11:57,760 --> 00:11:58,079
shut

390
00:11:58,079 --> 00:12:01,120
on the svi to make it work i also was

391
00:12:01,120 --> 00:12:01,600
able to

392
00:12:01,600 --> 00:12:04,000
edit some verification steps in um

393
00:12:04,000 --> 00:12:05,760
during the provision process that

394
00:12:05,760 --> 00:12:08,560
do um open config gmail or do gets

395
00:12:08,560 --> 00:12:10,079
against the open fig

396
00:12:10,079 --> 00:12:12,800
due to my paths for lgbt state and bgp

397
00:12:12,800 --> 00:12:13,200
state

398
00:12:13,200 --> 00:12:15,200
so between turning up the point-to-point

399
00:12:15,200 --> 00:12:16,800
link and adding the bgp neighbor i

400
00:12:16,800 --> 00:12:20,000
verify that the lldp neighbor is correct

401
00:12:20,000 --> 00:12:22,560
and then i also confirm um after that

402
00:12:22,560 --> 00:12:23,120
bgp

403
00:12:23,120 --> 00:12:25,120
neighbor line is added that the bgp

404
00:12:25,120 --> 00:12:26,560
state moves to established

405
00:12:26,560 --> 00:12:28,000
all right so i wanted to go through a

406
00:12:28,000 --> 00:12:29,760
few uh lessons i learned in the process

407
00:12:29,760 --> 00:12:31,440
of building this hack

408
00:12:31,440 --> 00:12:33,040
um the first thing i want to call out is

409
00:12:33,040 --> 00:12:34,720
that there's just not a lot of

410
00:12:34,720 --> 00:12:35,920
documentation out there

411
00:12:35,920 --> 00:12:39,040
for um using open fig for configuration

412
00:12:39,040 --> 00:12:40,880
rather than telemetry

413
00:12:40,880 --> 00:12:42,560
um i don't know if it's there's not a

414
00:12:42,560 --> 00:12:43,920
lot of people doing it or not a lot of

415
00:12:43,920 --> 00:12:45,120
people publishing it but

416
00:12:45,120 --> 00:12:46,800
it was really hard to find examples of

417
00:12:46,800 --> 00:12:49,040
what i was trying to do to combat that

418
00:12:49,040 --> 00:12:50,560
though uh one of the great things about

419
00:12:50,560 --> 00:12:52,959
openconvig models is that when you do a

420
00:12:52,959 --> 00:12:54,079
get on these paths

421
00:12:54,079 --> 00:12:56,079
you get the config and the state all in

422
00:12:56,079 --> 00:12:58,880
the same all the same requests

423
00:12:58,880 --> 00:13:01,120
and so i found the best pattern to use

424
00:13:01,120 --> 00:13:02,720
was to actually hand configure

425
00:13:02,720 --> 00:13:04,800
what i was trying to do on the device

426
00:13:04,800 --> 00:13:07,040
and then do it again against the path

427
00:13:07,040 --> 00:13:08,560
that i thought contained that piece of

428
00:13:08,560 --> 00:13:09,760
configuration

429
00:13:09,760 --> 00:13:12,079
and then build my request that way and

430
00:13:12,079 --> 00:13:13,360
and that actually ended up being really

431
00:13:13,360 --> 00:13:14,720
straightforward once i got a hang of

432
00:13:14,720 --> 00:13:16,560
that pattern

433
00:13:16,560 --> 00:13:18,079
the other thing i want to call out is

434
00:13:18,079 --> 00:13:20,560
that if you're looking at openconfig to

435
00:13:20,560 --> 00:13:22,399
be purely vendor agnostic i think you're

436
00:13:22,399 --> 00:13:23,760
going to be a little bit disappointed

437
00:13:23,760 --> 00:13:26,560
i found that even the kind of simple set

438
00:13:26,560 --> 00:13:28,639
of configuration i was trying to do

439
00:13:28,639 --> 00:13:30,480
for this lab was not able to be done

440
00:13:30,480 --> 00:13:32,160
without adding interest to augments

441
00:13:32,160 --> 00:13:33,839
specifically when configuring an ip on

442
00:13:33,839 --> 00:13:36,000
an interface i had to include the um

443
00:13:36,000 --> 00:13:38,480
aristo augment for address type and this

444
00:13:38,480 --> 00:13:40,160
augment makes total sense you know and

445
00:13:40,160 --> 00:13:41,680
in arista you can have a

446
00:13:41,680 --> 00:13:43,519
primary or secondary ip configured on an

447
00:13:43,519 --> 00:13:45,760
interface and the ip

448
00:13:45,760 --> 00:13:48,480
model just didn't cover that and so they

449
00:13:48,480 --> 00:13:49,680
needed this augment in order to

450
00:13:49,680 --> 00:13:50,480
differentiate

451
00:13:50,480 --> 00:13:51,760
um so i'm not really saying that it's a

452
00:13:51,760 --> 00:13:53,920
value judgment like this isn't um

453
00:13:53,920 --> 00:13:55,519
you know me saying arrested did it wrong

454
00:13:55,519 --> 00:13:57,600
convicted it wrong i think that

455
00:13:57,600 --> 00:13:59,279
if you're going to use open config for

456
00:13:59,279 --> 00:14:00,720
configuration automation you need to go

457
00:14:00,720 --> 00:14:01,920
in with the expectation that you're

458
00:14:01,920 --> 00:14:02,800
going to have to use

459
00:14:02,800 --> 00:14:04,880
augments you're not going to be purely

460
00:14:04,880 --> 00:14:06,000
vendor agnostic but you're going to be

461
00:14:06,000 --> 00:14:06,720
able to model

462
00:14:06,720 --> 00:14:08,959
quite a bit um and so i would highly

463
00:14:08,959 --> 00:14:10,320
recommend whatever you're using as your

464
00:14:10,320 --> 00:14:12,240
source of truth to also track what

465
00:14:12,240 --> 00:14:13,040
vendor

466
00:14:13,040 --> 00:14:14,639
you're applying the configuration to so

467
00:14:14,639 --> 00:14:16,240
you know exactly which augments to

468
00:14:16,240 --> 00:14:16,800
inject

469
00:14:16,800 --> 00:14:18,720
um so obviously this is just a you know

470
00:14:18,720 --> 00:14:20,800
two day hack it's uh pretty rough

471
00:14:20,800 --> 00:14:22,959
um but i have lots of ideas on how to

472
00:14:22,959 --> 00:14:24,160
grow it and so just a

473
00:14:24,160 --> 00:14:25,600
few things i want to call out um it

474
00:14:25,600 --> 00:14:27,680
would be really cool to add in some apis

475
00:14:27,680 --> 00:14:29,120
to surface some of that state data that

476
00:14:29,120 --> 00:14:30,480
i talked about before

477
00:14:30,480 --> 00:14:32,639
for example that lldp and pgp data that

478
00:14:32,639 --> 00:14:34,000
i used for verification it would be

479
00:14:34,000 --> 00:14:34,800
really neat to just

480
00:14:34,800 --> 00:14:36,480
be able to query an api and see the

481
00:14:36,480 --> 00:14:38,240
actual neighbors and php state and all

482
00:14:38,240 --> 00:14:39,440
that stuff

483
00:14:39,440 --> 00:14:41,120
and the other thing i was able to do

484
00:14:41,120 --> 00:14:42,959
because this was a lab environment was

485
00:14:42,959 --> 00:14:44,720
that all of those api calls were

486
00:14:44,720 --> 00:14:46,639
synchronous so you you submitted it all

487
00:14:46,639 --> 00:14:47,600
the changes happened

488
00:14:47,600 --> 00:14:49,360
and then the api didn't return success

489
00:14:49,360 --> 00:14:50,720
until the changes had gone all the way

490
00:14:50,720 --> 00:14:51,680
through

491
00:14:51,680 --> 00:14:53,279
this works great for a lab where

492
00:14:53,279 --> 00:14:54,560
everything's directly connected there's

493
00:14:54,560 --> 00:14:56,399
no latency and there's no wait

494
00:14:56,399 --> 00:14:58,639
and in practice that doesn't work you're

495
00:14:58,639 --> 00:14:59,920
going to want to implement some

496
00:14:59,920 --> 00:15:01,279
asynchronous task queues you're going to

497
00:15:01,279 --> 00:15:02,000
have your api

498
00:15:02,000 --> 00:15:04,000
start a task return a reference to that

499
00:15:04,000 --> 00:15:05,760
task and then monitor that that task

500
00:15:05,760 --> 00:15:07,040
through the life cycle

501
00:15:07,040 --> 00:15:09,360
and overkill for this hack but something

502
00:15:09,360 --> 00:15:10,639
that would definitely be necessary in a

503
00:15:10,639 --> 00:15:12,399
production system

504
00:15:12,399 --> 00:15:14,560
i was really hoping to get to the point

505
00:15:14,560 --> 00:15:16,560
of using gnoi to do some operational

506
00:15:16,560 --> 00:15:18,000
tests and unfortunately i just didn't

507
00:15:18,000 --> 00:15:18,639
have time

508
00:15:18,639 --> 00:15:20,720
um one one key place i was thinking of

509
00:15:20,720 --> 00:15:22,560
doing that was when i brought up the ips

510
00:15:22,560 --> 00:15:23,519
on the point point link it would have

511
00:15:23,519 --> 00:15:25,519
been cool to do some ping tests

512
00:15:25,519 --> 00:15:27,120
across that point point link to make

513
00:15:27,120 --> 00:15:28,639
sure there was no um

514
00:15:28,639 --> 00:15:31,279
you know no loss or anything like that

515
00:15:31,279 --> 00:15:32,480
um

516
00:15:32,480 --> 00:15:34,399
and obviously there's a lot of use cases

517
00:15:34,399 --> 00:15:36,000
this can be expanded to i covered three

518
00:15:36,000 --> 00:15:37,839
very basic operational tasks but

519
00:15:37,839 --> 00:15:39,920
there's there's a lot of room for for

520
00:15:39,920 --> 00:15:41,680
growth on that front

521
00:15:41,680 --> 00:15:43,839
um the final thing i want to call out is

522
00:15:43,839 --> 00:15:44,800
that i didn't

523
00:15:44,800 --> 00:15:46,399
ever figure out how to properly

524
00:15:46,399 --> 00:15:48,160
incorporate um augments

525
00:15:48,160 --> 00:15:49,519
in like that risk augment that i

526
00:15:49,519 --> 00:15:51,519
mentioned before using paying bind

527
00:15:51,519 --> 00:15:53,440
it's like a really awful hack where i

528
00:15:53,440 --> 00:15:55,839
dump the json produced by paying bind

529
00:15:55,839 --> 00:15:57,199
and then load it up into a dictionary

530
00:15:57,199 --> 00:15:58,639
and then inject the augment in the right

531
00:15:58,639 --> 00:15:59,600
spot

532
00:15:59,600 --> 00:16:01,839
um if anybody has a lot of experience

533
00:16:01,839 --> 00:16:03,440
with pioneers done

534
00:16:03,440 --> 00:16:04,880
you know use these augments before and

535
00:16:04,880 --> 00:16:06,560
knows the proper way to build those in i

536
00:16:06,560 --> 00:16:08,880
would love to hear it um

537
00:16:08,880 --> 00:16:11,680
but uh yeah i i imagine there's quite a

538
00:16:11,680 --> 00:16:12,639
bit that i did wrong

539
00:16:12,639 --> 00:16:14,399
just from not knowing open them not

540
00:16:14,399 --> 00:16:15,680
being familiar with it

541
00:16:15,680 --> 00:16:17,360
and so i'm really hoping some some

542
00:16:17,360 --> 00:16:19,040
people take a look at the code and uh

543
00:16:19,040 --> 00:16:22,639
shoot me some feedback so with that um

544
00:16:22,639 --> 00:16:24,639
that's my presentation i've got the um

545
00:16:24,639 --> 00:16:26,560
github link here as well as my contact

546
00:16:26,560 --> 00:16:28,560
info please um if you have some time

547
00:16:28,560 --> 00:16:30,399
this is something you're familiar with

548
00:16:30,399 --> 00:16:32,240
uh please please please rip apart my

549
00:16:32,240 --> 00:16:34,000
code tell me all the things i did wrong

550
00:16:34,000 --> 00:16:35,600
um i would love to hear what the kind of

551
00:16:35,600 --> 00:16:37,759
right way for interacting with this is

552
00:16:37,759 --> 00:16:40,800
and then if you have questions or um are

553
00:16:40,800 --> 00:16:42,320
trying to kind of build this lab on your

554
00:16:42,320 --> 00:16:43,920
own or having trouble uh feel free to

555
00:16:43,920 --> 00:16:44,880
reach out to me and i'll walk you

556
00:16:44,880 --> 00:16:45,360
through it

557
00:16:45,360 --> 00:16:49,199
thank you hi everyone and welcome to

558
00:16:49,199 --> 00:16:53,040
gt1 hackathon and i am part of

559
00:16:53,040 --> 00:16:55,759
team telemetry which includes barry

560
00:16:55,759 --> 00:16:56,800
jones cook

561
00:16:56,800 --> 00:16:59,920
jose monteiro martin nate sales pete

562
00:16:59,920 --> 00:17:01,120
vykovsky

563
00:17:01,120 --> 00:17:04,319
and myself tony andy colombo and the

564
00:17:04,319 --> 00:17:07,039
theme has been configuration modeling

565
00:17:07,039 --> 00:17:10,480
and configuration modeling really speaks

566
00:17:10,480 --> 00:17:11,039
to

567
00:17:11,039 --> 00:17:13,439
the hearts of network automation which

568
00:17:13,439 --> 00:17:16,400
can be great

569
00:17:16,480 --> 00:17:19,119
to to automate uh configuration

570
00:17:19,119 --> 00:17:20,240
management

571
00:17:20,240 --> 00:17:22,880
in an automated manner and of course

572
00:17:22,880 --> 00:17:23,439
with it

573
00:17:23,439 --> 00:17:25,760
is the possibility of also automating

574
00:17:25,760 --> 00:17:26,559
errors

575
00:17:26,559 --> 00:17:29,200
so care is always taken into making sure

576
00:17:29,200 --> 00:17:31,200
that we can improve on efficiency and

577
00:17:31,200 --> 00:17:32,080
reducing human

578
00:17:32,080 --> 00:17:35,200
error a typical toolbox

579
00:17:35,200 --> 00:17:38,559
in this environment would have our

580
00:17:38,559 --> 00:17:40,480
development test and production

581
00:17:40,480 --> 00:17:41,520
environments

582
00:17:41,520 --> 00:17:45,280
uh as as the base and we'd have a

583
00:17:45,280 --> 00:17:48,480
neighbor virtualization platform over

584
00:17:48,480 --> 00:17:49,919
which we would

585
00:17:49,919 --> 00:17:52,960
or bay metal and over that

586
00:17:52,960 --> 00:17:55,600
would have our network devices uh which

587
00:17:55,600 --> 00:17:57,520
we could represent in the form of a

588
00:17:57,520 --> 00:17:58,080
young

589
00:17:58,080 --> 00:18:00,640
data model and we would interface with

590
00:18:00,640 --> 00:18:04,240
that either using rest apis or grpc

591
00:18:04,240 --> 00:18:07,200
for the sake of this project we use grpc

592
00:18:07,200 --> 00:18:07,600
and

593
00:18:07,600 --> 00:18:11,039
as our team's name suggests

594
00:18:11,039 --> 00:18:14,960
we focused on telemetry and

595
00:18:14,960 --> 00:18:17,280
the use of build service and distributed

596
00:18:17,280 --> 00:18:19,039
source control

597
00:18:19,039 --> 00:18:21,360
is essential when you have multiple

598
00:18:21,360 --> 00:18:23,520
members of a team working together

599
00:18:23,520 --> 00:18:27,679
and this is what i environment typically

600
00:18:27,679 --> 00:18:28,080
looks

601
00:18:28,080 --> 00:18:30,160
like where we use git for version

602
00:18:30,160 --> 00:18:32,799
control ansible for infrastructure as

603
00:18:32,799 --> 00:18:33,360
code

604
00:18:33,360 --> 00:18:35,360
we had our dev environment running in

605
00:18:35,360 --> 00:18:37,679
vagrants and we used the git repository

606
00:18:37,679 --> 00:18:39,280
for the source control

607
00:18:39,280 --> 00:18:41,679
we had network simulation that we used

608
00:18:41,679 --> 00:18:44,960
in the cloud on amazon aws

609
00:18:44,960 --> 00:18:48,559
and there was some some coding

610
00:18:48,559 --> 00:18:51,200
that was done in order to do a bit of

611
00:18:51,200 --> 00:18:52,880
testing but we didn't focus

612
00:18:52,880 --> 00:18:55,280
much on that and of course for our chat

613
00:18:55,280 --> 00:18:57,280
ups we had some slack

614
00:18:57,280 --> 00:19:00,400
that we used and

615
00:19:00,400 --> 00:19:03,760
ansible was the main tool that we use

616
00:19:03,760 --> 00:19:04,240
for

617
00:19:04,240 --> 00:19:07,679
configuration automation and as you know

618
00:19:07,679 --> 00:19:11,120
ansible is an agentless ssh based

619
00:19:11,120 --> 00:19:14,640
open source automation tool and

620
00:19:14,640 --> 00:19:17,520
in essence it contains configuration

621
00:19:17,520 --> 00:19:19,919
management that we use to deploy

622
00:19:19,919 --> 00:19:23,039
our configuration to the network

623
00:19:23,039 --> 00:19:25,200
and i'm going to hand over to barry to

624
00:19:25,200 --> 00:19:26,160
grant you through

625
00:19:26,160 --> 00:19:30,559
the rest of our presentation

626
00:19:30,559 --> 00:19:34,080
thank you tony our team goals with this

627
00:19:34,080 --> 00:19:37,440
hackathon uh project were to start with

628
00:19:37,440 --> 00:19:40,320
a vagrant environment that tony had

629
00:19:40,320 --> 00:19:43,120
done some extensive work on before and

630
00:19:43,120 --> 00:19:43,520
used

631
00:19:43,520 --> 00:19:45,919
ansible within that environment to

632
00:19:45,919 --> 00:19:47,440
deploy cisco

633
00:19:47,440 --> 00:19:51,120
csr 1000b routers and hosts as aws

634
00:19:51,120 --> 00:19:54,799
ec2 instances we

635
00:19:54,799 --> 00:19:57,280
then wanted to create virtual private

636
00:19:57,280 --> 00:19:58,240
cloud subnets

637
00:19:58,240 --> 00:20:01,520
vpc subnets and eni's elastic network

638
00:20:01,520 --> 00:20:02,400
interfaces

639
00:20:02,400 --> 00:20:05,039
and attach them to the instances this

640
00:20:05,039 --> 00:20:06,480
allows you to

641
00:20:06,480 --> 00:20:09,600
create more interfaces on the virtual

642
00:20:09,600 --> 00:20:10,720
routers

643
00:20:10,720 --> 00:20:13,600
then we wanted to configure ip addresses

644
00:20:13,600 --> 00:20:16,480
ping across or use iperf to generate

645
00:20:16,480 --> 00:20:17,360
traffic

646
00:20:17,360 --> 00:20:19,120
and then stream telemetry from the

647
00:20:19,120 --> 00:20:20,400
routers using

648
00:20:20,400 --> 00:20:24,400
grpc then on another host we wanted to

649
00:20:24,400 --> 00:20:25,840
build gnmi gateway

650
00:20:25,840 --> 00:20:29,760
and subscribe to the telemetry stream

651
00:20:30,880 --> 00:20:34,720
our lab design looked like this we had

652
00:20:34,720 --> 00:20:38,400
two csr routers we named them csr0

653
00:20:38,400 --> 00:20:41,760
and csr1 and two hosts

654
00:20:41,760 --> 00:20:44,799
and then we ended up actually

655
00:20:44,799 --> 00:20:48,000
building gnmi gateway on jose's

656
00:20:48,000 --> 00:20:51,520
machine in spain so that is

657
00:20:51,520 --> 00:20:53,600
actually not in the virtual lab

658
00:20:53,600 --> 00:20:54,960
environment but

659
00:20:54,960 --> 00:20:58,159
it was successful anyway with that

660
00:20:58,159 --> 00:21:01,600
design in mind i'm going to switch

661
00:21:01,600 --> 00:21:04,880
to the ec2 management console

662
00:21:04,880 --> 00:21:07,760
and you can see here this was a previous

663
00:21:07,760 --> 00:21:08,720
run

664
00:21:08,720 --> 00:21:11,600
uh where we renamed them manually and

665
00:21:11,600 --> 00:21:12,480
this is the one

666
00:21:12,480 --> 00:21:16,080
run that just finished and the t2

667
00:21:16,080 --> 00:21:16,720
mediums

668
00:21:16,720 --> 00:21:20,240
are the csr routers and the tg micros

669
00:21:20,240 --> 00:21:22,159
are the two hosts and then the

670
00:21:22,159 --> 00:21:25,280
gnmi gateway host is in spain on jose's

671
00:21:25,280 --> 00:21:26,320
box

672
00:21:26,320 --> 00:21:28,080
and nate is going to talk about the

673
00:21:28,080 --> 00:21:30,159
ansible playbook that we

674
00:21:30,159 --> 00:21:33,840
created to run these thanks nate

675
00:21:33,840 --> 00:21:36,960
cool um so this is our ansible playbook

676
00:21:36,960 --> 00:21:37,679
that we are

677
00:21:37,679 --> 00:21:39,840
using to automate the creation and

678
00:21:39,840 --> 00:21:42,240
management of these routers and hosts

679
00:21:42,240 --> 00:21:43,840
so the top we're going to start by

680
00:21:43,840 --> 00:21:45,440
declaring some variables let me start

681
00:21:45,440 --> 00:21:47,120
finding a single config file

682
00:21:47,120 --> 00:21:48,880
and these contains things like secrets

683
00:21:48,880 --> 00:21:50,799
for your aws credentials

684
00:21:50,799 --> 00:21:52,640
and things that would be different from

685
00:21:52,640 --> 00:21:54,240
deployment um so if you want to spin

686
00:21:54,240 --> 00:21:55,679
this up yourself it's just one file to

687
00:21:55,679 --> 00:21:56,480
modify

688
00:21:56,480 --> 00:21:58,240
and it can contain all the unique config

689
00:21:58,240 --> 00:21:59,919
for your situation

690
00:21:59,919 --> 00:22:02,000
um going down we're first going to

691
00:22:02,000 --> 00:22:03,679
configure the network topology with

692
00:22:03,679 --> 00:22:06,480
some aws calls this is going to talk to

693
00:22:06,480 --> 00:22:08,480
the aws servers to set up these

694
00:22:08,480 --> 00:22:11,200
subnets and interfaces for for the

695
00:22:11,200 --> 00:22:13,039
topology itself

696
00:22:13,039 --> 00:22:14,640
um it's going down a little bit more

697
00:22:14,640 --> 00:22:16,480
starting at line 34 we're actually i'm

698
00:22:16,480 --> 00:22:18,080
going to initialize some of those csr

699
00:22:18,080 --> 00:22:19,280
1000b routers

700
00:22:19,280 --> 00:22:21,280
and these are running in ec2 and then

701
00:22:21,280 --> 00:22:23,280
we're also going to attach those to

702
00:22:23,280 --> 00:22:25,039
the host and spine subnets so that they

703
00:22:25,039 --> 00:22:26,559
can communicate with all

704
00:22:26,559 --> 00:22:28,960
knows the network starting at line 48

705
00:22:28,960 --> 00:22:30,559
we're going to create some t2 micro

706
00:22:30,559 --> 00:22:31,440
linux boxes

707
00:22:31,440 --> 00:22:33,120
and these are just um ping and iperf

708
00:22:33,120 --> 00:22:35,039
hosts just small machines that

709
00:22:35,039 --> 00:22:36,720
hang out with each router which can then

710
00:22:36,720 --> 00:22:38,240
send some traffic between each other

711
00:22:38,240 --> 00:22:39,200
and that's the traffic that we're

712
00:22:39,200 --> 00:22:41,679
looking to monitor with gnmi

713
00:22:41,679 --> 00:22:43,520
along 62 we are creating those spine

714
00:22:43,520 --> 00:22:45,520
interfaces and then later attaching them

715
00:22:45,520 --> 00:22:46,880
to the instances

716
00:22:46,880 --> 00:22:50,120
which allow us to peer between our two

717
00:22:50,120 --> 00:22:53,440
csr1000vs finishing up the playbook we

718
00:22:53,440 --> 00:22:54,080
are just doing

719
00:22:54,080 --> 00:22:56,640
some miscellaneous tasks holding for ssh

720
00:22:56,640 --> 00:22:57,440
to come up

721
00:22:57,440 --> 00:22:59,919
um and and then sorting out all of them

722
00:22:59,919 --> 00:23:02,000
the ssh host keys and fingerprints

723
00:23:02,000 --> 00:23:03,520
um in this case it's just a lab so we're

724
00:23:03,520 --> 00:23:05,280
ignoring any um host fingerprints

725
00:23:05,280 --> 00:23:07,200
there's no user interaction whatsoever

726
00:23:07,200 --> 00:23:08,720
of course if this were production system

727
00:23:08,720 --> 00:23:10,320
we would pin those fingerprints but this

728
00:23:10,320 --> 00:23:11,600
is just a lab

729
00:23:11,600 --> 00:23:14,080
and then we have our second step here

730
00:23:14,080 --> 00:23:16,000
which starts at a line 105.

731
00:23:16,000 --> 00:23:17,360
and this is actually going to log into

732
00:23:17,360 --> 00:23:19,360
the cisco routers and issue some cli

733
00:23:19,360 --> 00:23:20,080
commands

734
00:23:20,080 --> 00:23:21,520
i'm first just showing version and

735
00:23:21,520 --> 00:23:23,200
showing our description just to give us

736
00:23:23,200 --> 00:23:24,080
a preliminary

737
00:23:24,080 --> 00:23:26,559
kind of just status so that we actually

738
00:23:26,559 --> 00:23:28,159
have two writers operational

739
00:23:28,159 --> 00:23:29,520
um we're also going to set system

740
00:23:29,520 --> 00:23:32,480
hostname um so we can see which is which

741
00:23:32,480 --> 00:23:34,960
and then going down uh length of 134

742
00:23:34,960 --> 00:23:36,799
we're going to um to import

743
00:23:36,799 --> 00:23:38,960
the ssh public keys so we can each log

744
00:23:38,960 --> 00:23:39,919
into those routers

745
00:23:39,919 --> 00:23:42,320
and have a lab that's all totally ready

746
00:23:42,320 --> 00:23:43,360
to go and

747
00:23:43,360 --> 00:23:45,600
um can just be logged into remotely for

748
00:23:45,600 --> 00:23:48,000
the rest of the configuration

749
00:23:48,000 --> 00:23:50,159
all right and this shows the running

750
00:23:50,159 --> 00:23:51,840
config with the telemetry

751
00:23:51,840 --> 00:23:53,200
information that was created on the

752
00:23:53,200 --> 00:23:55,039
cisco csr1000v

753
00:23:55,039 --> 00:23:57,600
you can see that we've uh added a couple

754
00:23:57,600 --> 00:23:58,799
subscriptions for

755
00:23:58,799 --> 00:24:02,640
uh grpc but we're trying to do jmi here

756
00:24:02,640 --> 00:24:03,200
we can

757
00:24:03,200 --> 00:24:04,880
see that we've got a couple

758
00:24:04,880 --> 00:24:06,640
subscriptions in the detail

759
00:24:06,640 --> 00:24:09,600
and the subscriptions are working

760
00:24:09,600 --> 00:24:12,240
working as a little keyword here

761
00:24:12,240 --> 00:24:15,279
what we learned is that while certain

762
00:24:15,279 --> 00:24:16,240
devices

763
00:24:16,240 --> 00:24:18,880
do support gmi and other devices do

764
00:24:18,880 --> 00:24:19,360
support

765
00:24:19,360 --> 00:24:23,039
grpc based on the version of uh

766
00:24:23,039 --> 00:24:24,640
operating system that they have not

767
00:24:24,640 --> 00:24:27,279
every device is created equal

768
00:24:27,279 --> 00:24:28,880
the last thing we tried to do was we

769
00:24:28,880 --> 00:24:31,200
tried to enable genomiang

770
00:24:31,200 --> 00:24:34,400
on a cisco csr1000v and

771
00:24:34,400 --> 00:24:36,640
we found out that it doesn't really run

772
00:24:36,640 --> 00:24:37,440
it doesn't work

773
00:24:37,440 --> 00:24:40,480
not yet at least so

774
00:24:40,480 --> 00:24:43,120
what have we learned from this using the

775
00:24:43,120 --> 00:24:43,919
cloud

776
00:24:43,919 --> 00:24:45,520
does make testing of network

777
00:24:45,520 --> 00:24:47,919
technologies way faster and way easier

778
00:24:47,919 --> 00:24:48,400
to

779
00:24:48,400 --> 00:24:51,360
deploy with it's really nice to spin

780
00:24:51,360 --> 00:24:53,120
something up really quickly

781
00:24:53,120 --> 00:24:55,360
not have this big expensive router

782
00:24:55,360 --> 00:24:56,640
switch behind you

783
00:24:56,640 --> 00:24:58,240
creating a lot of heat costing a lot of

784
00:24:58,240 --> 00:25:01,440
money and generating a lot of noise

785
00:25:01,440 --> 00:25:03,840
it's faster and easier to test with when

786
00:25:03,840 --> 00:25:05,440
you're mocking things up

787
00:25:05,440 --> 00:25:07,600
and having playbooks to both create and

788
00:25:07,600 --> 00:25:10,480
destroy technologies and topologies

789
00:25:10,480 --> 00:25:12,799
allows you to do things really really

790
00:25:12,799 --> 00:25:14,000
quickly if you've got a bug

791
00:25:14,000 --> 00:25:15,840
or you're trying to iterate through

792
00:25:15,840 --> 00:25:17,120
things it makes life

793
00:25:17,120 --> 00:25:21,360
way easier to continue our future goals

794
00:25:21,360 --> 00:25:23,840
are to work on evolving the playbooks so

795
00:25:23,840 --> 00:25:25,760
that we can be vendor agnostic meaning

796
00:25:25,760 --> 00:25:28,080
any device that we want to look at or

797
00:25:28,080 --> 00:25:29,200
play with for

798
00:25:29,200 --> 00:25:32,400
gmi or anything else we can just kind of

799
00:25:32,400 --> 00:25:34,080
plug in it's no big deal

800
00:25:34,080 --> 00:25:35,840
we want to finish automating our iperf

801
00:25:35,840 --> 00:25:37,520
configuration of the host so that we can

802
00:25:37,520 --> 00:25:38,640
make sure that

803
00:25:38,640 --> 00:25:41,120
all the packets are flowing end to end

804
00:25:41,120 --> 00:25:42,480
as we want and we can actually test

805
00:25:42,480 --> 00:25:43,919
telemetry that way

806
00:25:43,919 --> 00:25:45,520
and we want to finish working on the

807
00:25:45,520 --> 00:25:47,440
genomic gateway utilization

808
00:25:47,440 --> 00:25:51,120
for streaming and visualization

809
00:25:51,279 --> 00:25:53,840
and with that we want to thank you for

810
00:25:53,840 --> 00:25:55,520
allowing us to present here

811
00:25:55,520 --> 00:25:57,760
thank you to our presenters and to all

812
00:25:57,760 --> 00:25:59,200
of our participants

813
00:25:59,200 --> 00:26:00,720
i'd also like to thank the other

814
00:26:00,720 --> 00:26:03,120
hackathon organizers aaron atash

815
00:26:03,120 --> 00:26:06,240
kat garinsky chris woodfield jeff bartig

816
00:26:06,240 --> 00:26:08,880
and valerie whitcop we're about to begin

817
00:26:08,880 --> 00:26:10,240
planning our next hackathon

818
00:26:10,240 --> 00:26:11,840
and we're looking for participants

819
00:26:11,840 --> 00:26:13,840
mentors and sponsors

820
00:26:13,840 --> 00:26:15,919
to help us in our planning please fill

821
00:26:15,919 --> 00:26:16,880
out your surveys

822
00:26:16,880 --> 00:26:18,400
and let us know what you think about the

823
00:26:18,400 --> 00:26:20,640
hackathon format and themes

824
00:26:20,640 --> 00:26:22,400
please be on the lookout for updates and

825
00:26:22,400 --> 00:26:24,770
we can't wait to see you in june

826
00:26:24,770 --> 00:26:35,099
[Music]

