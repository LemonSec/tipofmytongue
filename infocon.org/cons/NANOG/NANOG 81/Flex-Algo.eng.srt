1
00:00:01,610 --> 00:00:05,940
[Music]

2
00:00:06,240 --> 00:00:08,320
uh hello everyone my name is

3
00:00:08,320 --> 00:00:10,719
shadda hegde and i'm a principal

4
00:00:10,719 --> 00:00:11,840
engineer with

5
00:00:11,840 --> 00:00:15,599
juniper networks in the routing protocol

6
00:00:15,599 --> 00:00:18,160
team so today i'll be talking about

7
00:00:18,160 --> 00:00:20,160
flexible algorithms

8
00:00:20,160 --> 00:00:23,439
also we will we will go over um what is

9
00:00:23,439 --> 00:00:26,160
flex algo and why it is needed and we'll

10
00:00:26,160 --> 00:00:28,400
also go over some use cases

11
00:00:28,400 --> 00:00:31,359
uh where is where it is most suitable

12
00:00:31,359 --> 00:00:32,719
for deployments

13
00:00:32,719 --> 00:00:35,440
we will also talk about few examples and

14
00:00:35,440 --> 00:00:37,120
and see how exactly

15
00:00:37,120 --> 00:00:40,239
flexible algorithm works uh and then

16
00:00:40,239 --> 00:00:41,920
to end the presentation we also have

17
00:00:41,920 --> 00:00:44,559
some design guidelines and

18
00:00:44,559 --> 00:00:48,079
some operational requirements so without

19
00:00:48,079 --> 00:00:50,960
wasting any time let's jump into the

20
00:00:50,960 --> 00:00:54,399
topic so

21
00:00:54,399 --> 00:00:57,039
what is flex algo so we all know that

22
00:00:57,039 --> 00:00:58,879
igp traditionally computes

23
00:00:58,879 --> 00:01:01,600
best effort path uh so based on igp

24
00:01:01,600 --> 00:01:03,359
metric

25
00:01:03,359 --> 00:01:06,080
um so flex algo provides a way to

26
00:01:06,080 --> 00:01:06,799
compute

27
00:01:06,799 --> 00:01:09,840
traffic engineered paths in igp so what

28
00:01:09,840 --> 00:01:13,040
it means is based on various constraints

29
00:01:13,040 --> 00:01:17,439
flexelgo can give you different paths

30
00:01:17,920 --> 00:01:20,960
and all this computed in igp

31
00:01:20,960 --> 00:01:23,280
so the constraints could be like te

32
00:01:23,280 --> 00:01:24,400
metric

33
00:01:24,400 --> 00:01:27,200
you could also use latency metric and

34
00:01:27,200 --> 00:01:29,119
various other types of constraints such

35
00:01:29,119 --> 00:01:32,000
as admin colors or

36
00:01:32,000 --> 00:01:36,400
avoid certain node constraints and so on

37
00:01:36,400 --> 00:01:40,159
so flex algo also provides a way to kind

38
00:01:40,159 --> 00:01:42,320
of separate the topology in the sense

39
00:01:42,320 --> 00:01:44,079
that

40
00:01:44,079 --> 00:01:47,360
when you compute the path in the in a

41
00:01:47,360 --> 00:01:49,840
flex algo you will be computing

42
00:01:49,840 --> 00:01:53,759
a path in in the topology which is

43
00:01:53,759 --> 00:01:56,240
derived you know after applying these

44
00:01:56,240 --> 00:01:57,520
constraints

45
00:01:57,520 --> 00:02:00,560
so when you compute a backup path um

46
00:02:00,560 --> 00:02:03,759
a ti lfa backup path for example that

47
00:02:03,759 --> 00:02:06,960
that backup path will also

48
00:02:06,960 --> 00:02:10,239
satisfy the constraints

49
00:02:10,239 --> 00:02:12,720
so flex algo is is being standardized in

50
00:02:12,720 --> 00:02:13,280
ice

51
00:02:13,280 --> 00:02:16,640
ietf lsr working group uh

52
00:02:16,640 --> 00:02:20,959
it's almost uh uh you know

53
00:02:20,959 --> 00:02:23,200
becoming in on the way of becoming an

54
00:02:23,200 --> 00:02:24,959
rfc very soon

55
00:02:24,959 --> 00:02:28,640
so let's see um uh why uh we need flex

56
00:02:28,640 --> 00:02:29,280
algo so

57
00:02:29,280 --> 00:02:31,599
you may be wondering uh we have various

58
00:02:31,599 --> 00:02:32,319
ways of

59
00:02:32,319 --> 00:02:36,640
um uh you know uh computing the

60
00:02:36,640 --> 00:02:38,560
paths that satisfy certain constraints

61
00:02:38,560 --> 00:02:39,840
so this could be

62
00:02:39,840 --> 00:02:43,040
based on uh srte

63
00:02:43,040 --> 00:02:46,280
or based on other mechanisms such as

64
00:02:46,280 --> 00:02:50,640
multi-topology in igp so so why is this

65
00:02:50,640 --> 00:02:52,959
flexel go what is it different or why

66
00:02:52,959 --> 00:02:54,640
there is a need of another way of

67
00:02:54,640 --> 00:02:55,680
computing

68
00:02:55,680 --> 00:02:58,720
constrained paths

69
00:02:58,800 --> 00:03:00,239
so we can we can look at some

70
00:03:00,239 --> 00:03:02,400
requirements such as very strict te

71
00:03:02,400 --> 00:03:03,519
constraints

72
00:03:03,519 --> 00:03:07,680
such as avoid nodes or certain links

73
00:03:07,680 --> 00:03:09,519
or there could be requirements such as

74
00:03:09,519 --> 00:03:11,280
avoid the traffic

75
00:03:11,280 --> 00:03:13,360
going in another plane and we also may

76
00:03:13,360 --> 00:03:14,720
have requirements to

77
00:03:14,720 --> 00:03:17,120
honor these constraints for backup paths

78
00:03:17,120 --> 00:03:18,000
as well

79
00:03:18,000 --> 00:03:21,120
such as ti lfa backup paths so the

80
00:03:21,120 --> 00:03:23,280
possible alternates that we have for

81
00:03:23,280 --> 00:03:24,560
this kind of requirements

82
00:03:24,560 --> 00:03:28,400
is srte in segment routing

83
00:03:28,400 --> 00:03:30,879
so what srte would do is apply the

84
00:03:30,879 --> 00:03:33,280
constraint and come up with the path

85
00:03:33,280 --> 00:03:38,319
so as we know the path computed in srte

86
00:03:38,319 --> 00:03:41,120
consists of a stack of labels so if if

87
00:03:41,120 --> 00:03:42,000
there are

88
00:03:42,000 --> 00:03:44,959
10 hops that if you use adjacency sets

89
00:03:44,959 --> 00:03:46,959
you will have 10 labels

90
00:03:46,959 --> 00:03:49,760
that you stack and and then use that

91
00:03:49,760 --> 00:03:50,879
label stack

92
00:03:50,879 --> 00:03:54,080
to traverse this explicit path

93
00:03:54,080 --> 00:03:57,439
so in many cases

94
00:03:57,439 --> 00:03:59,599
large label stacks may not be very

95
00:03:59,599 --> 00:04:02,319
practical because of the

96
00:04:02,319 --> 00:04:06,000
limitations of the hardware limitations

97
00:04:06,000 --> 00:04:08,640
on the ingress router so then there are

98
00:04:08,640 --> 00:04:10,560
solutions such as compressed label

99
00:04:10,560 --> 00:04:11,599
stacks

100
00:04:11,599 --> 00:04:15,120
and these compressed label stacks

101
00:04:15,120 --> 00:04:18,959
will use node sets and these node sets

102
00:04:18,959 --> 00:04:21,440
generally

103
00:04:21,680 --> 00:04:25,520
use the spf paths so

104
00:04:25,520 --> 00:04:27,280
when you compress the label stack you

105
00:04:27,280 --> 00:04:28,800
can make sure that

106
00:04:28,800 --> 00:04:30,800
you know these when you use these notes

107
00:04:30,800 --> 00:04:32,800
they also satisfy constraints

108
00:04:32,800 --> 00:04:36,080
but what happens is that when there is

109
00:04:36,080 --> 00:04:38,080
an event in the network the network may

110
00:04:38,080 --> 00:04:38,960
be going

111
00:04:38,960 --> 00:04:41,280
through some convergence and during this

112
00:04:41,280 --> 00:04:42,000
convergence

113
00:04:42,000 --> 00:04:44,240
these node sets may not satisfy these

114
00:04:44,240 --> 00:04:45,440
constraints

115
00:04:45,440 --> 00:04:48,080
for short amount of uh time and by the

116
00:04:48,080 --> 00:04:48,479
time

117
00:04:48,479 --> 00:04:51,840
your head end or your controller figures

118
00:04:51,840 --> 00:04:53,440
out that you know these node

119
00:04:53,440 --> 00:04:55,840
nodes it's no longer satisfy the

120
00:04:55,840 --> 00:04:57,280
constraints

121
00:04:57,280 --> 00:05:00,400
uh and recompute the path

122
00:05:00,400 --> 00:05:03,600
and recompress the label stack for that

123
00:05:03,600 --> 00:05:04,639
amount of time

124
00:05:04,639 --> 00:05:07,360
the traffic may be going through certain

125
00:05:07,360 --> 00:05:08,560
nodes and links

126
00:05:08,560 --> 00:05:10,960
that uh you know do not satisfy the

127
00:05:10,960 --> 00:05:12,560
constraints

128
00:05:12,560 --> 00:05:14,720
so what flexelgo gives you is you know

129
00:05:14,720 --> 00:05:18,479
very uh you know kind of

130
00:05:18,639 --> 00:05:23,280
strict strictly constrained satisfied

131
00:05:23,280 --> 00:05:25,919
all the time even during convergence and

132
00:05:25,919 --> 00:05:26,479
all this

133
00:05:26,479 --> 00:05:29,360
comes with a single label and you really

134
00:05:29,360 --> 00:05:30,639
don't have the

135
00:05:30,639 --> 00:05:33,919
uh problem of having to uh

136
00:05:33,919 --> 00:05:37,759
stack the labels and then um you know

137
00:05:37,759 --> 00:05:40,800
limitations of hardware where you cannot

138
00:05:40,800 --> 00:05:45,199
go beyond certain number of labels

139
00:05:45,759 --> 00:05:49,440
so let's go on to the next slide

140
00:05:49,440 --> 00:05:52,800
so we'll see some some use cases

141
00:05:52,800 --> 00:05:57,440
real life use cases where flex algo

142
00:05:57,440 --> 00:06:00,800
is a suitable solution

143
00:06:00,800 --> 00:06:02,720
so this one is talking about routing

144
00:06:02,720 --> 00:06:04,240
plane separation

145
00:06:04,240 --> 00:06:06,479
so as we see in this picture we have

146
00:06:06,479 --> 00:06:08,319
some certain blue notes and

147
00:06:08,319 --> 00:06:11,919
certain uh red notes uh so you can

148
00:06:11,919 --> 00:06:12,800
imagine uh

149
00:06:12,800 --> 00:06:16,240
um some traffic uh you know having uh

150
00:06:16,240 --> 00:06:17,919
restrictions that it has to go

151
00:06:17,919 --> 00:06:20,960
in and only in blue paint plane

152
00:06:20,960 --> 00:06:23,360
or only in red plane so this is most

153
00:06:23,360 --> 00:06:25,360
likely in in case of

154
00:06:25,360 --> 00:06:27,520
financial applications so certain

155
00:06:27,520 --> 00:06:29,520
financial applications they multicast

156
00:06:29,520 --> 00:06:30,400
the traffic on

157
00:06:30,400 --> 00:06:32,400
onto both the planes like new plane and

158
00:06:32,400 --> 00:06:33,440
red plane

159
00:06:33,440 --> 00:06:36,560
and they have a strict requirement that

160
00:06:36,560 --> 00:06:37,039
you know

161
00:06:37,039 --> 00:06:40,160
the traffic that is uh taking the blue

162
00:06:40,160 --> 00:06:42,319
plane remains a blue plane irrespective

163
00:06:42,319 --> 00:06:42,639
of

164
00:06:42,639 --> 00:06:45,919
any failure or even in in case of uh

165
00:06:45,919 --> 00:06:47,680
if there is a plane separation like the

166
00:06:47,680 --> 00:06:49,919
blue plane is completely partitioned due

167
00:06:49,919 --> 00:06:50,639
to

168
00:06:50,639 --> 00:06:52,880
multiple failures so let's say in this

169
00:06:52,880 --> 00:06:53,840
diagram

170
00:06:53,840 --> 00:06:56,639
the blue plane is partitioned like p1 p5

171
00:06:56,639 --> 00:06:58,080
and p3

172
00:06:58,080 --> 00:07:01,120
um the

173
00:07:01,120 --> 00:07:04,240
the links between p1 p5 and p3 all the

174
00:07:04,240 --> 00:07:06,240
links are down then the blue plane gets

175
00:07:06,240 --> 00:07:07,280
partitioned

176
00:07:07,280 --> 00:07:10,639
and if such a catastrophic event happens

177
00:07:10,639 --> 00:07:13,759
um the the traffic in the blue plane

178
00:07:13,759 --> 00:07:14,560
should just

179
00:07:14,560 --> 00:07:17,840
drop and it should not flow on the red

180
00:07:17,840 --> 00:07:20,400
plane so

181
00:07:20,560 --> 00:07:22,319
so that's the requirement for certain

182
00:07:22,319 --> 00:07:24,240
financial applications and then flex

183
00:07:24,240 --> 00:07:25,360
algo solves it

184
00:07:25,360 --> 00:07:28,479
using um you know

185
00:07:28,479 --> 00:07:31,680
kind of two separate topologies so with

186
00:07:31,680 --> 00:07:33,599
flex i'll go what you can do is you can

187
00:07:33,599 --> 00:07:34,000
sub

188
00:07:34,000 --> 00:07:37,520
you can define a blue flex algo and then

189
00:07:37,520 --> 00:07:40,960
a red flex algo so

190
00:07:40,960 --> 00:07:43,919
a blue flex algo will will see nodes and

191
00:07:43,919 --> 00:07:44,879
links

192
00:07:44,879 --> 00:07:46,960
pertaining to only the blue plane

193
00:07:46,960 --> 00:07:49,039
whereas the red flags will go will see

194
00:07:49,039 --> 00:07:50,960
only the links and nodes pertaining to

195
00:07:50,960 --> 00:07:52,479
the red plane

196
00:07:52,479 --> 00:07:55,758
so in which case

197
00:07:55,840 --> 00:07:57,919
the traffic that is flowing on blue

198
00:07:57,919 --> 00:07:59,039
plane will remain

199
00:07:59,039 --> 00:08:01,759
in blue plane the primary traffic and

200
00:08:01,759 --> 00:08:02,080
even

201
00:08:02,080 --> 00:08:06,560
case of failures the backup traffic

202
00:08:06,560 --> 00:08:09,280
and the traffic would also in case of

203
00:08:09,280 --> 00:08:10,720
failures it would also the post

204
00:08:10,720 --> 00:08:12,080
convergence path would also

205
00:08:12,080 --> 00:08:14,639
lie only within the blue plane and the

206
00:08:14,639 --> 00:08:16,240
traffic would never go across

207
00:08:16,240 --> 00:08:19,680
the red plane so let's see another use

208
00:08:19,680 --> 00:08:21,680
case

209
00:08:21,680 --> 00:08:24,319
so this uh typically this kind of use

210
00:08:24,319 --> 00:08:25,280
cases arrive

211
00:08:25,280 --> 00:08:29,039
arise from the data sovereignty

212
00:08:29,280 --> 00:08:32,640
requirements mostly the geopolitical

213
00:08:32,640 --> 00:08:35,839
issues due to which you certain

214
00:08:35,839 --> 00:08:36,719
customers

215
00:08:36,719 --> 00:08:39,679
may want to restrict that their traffic

216
00:08:39,679 --> 00:08:40,958
do not traverse

217
00:08:40,958 --> 00:08:42,958
nodes and links located in certain

218
00:08:42,958 --> 00:08:45,680
geographical locations

219
00:08:45,680 --> 00:08:48,640
um uh and and these are very strict

220
00:08:48,640 --> 00:08:49,600
requirements in

221
00:08:49,600 --> 00:08:52,560
whatever uh you know in case of failures

222
00:08:52,560 --> 00:08:55,120
or even during you know post

223
00:08:55,120 --> 00:08:57,279
failure convergence events the traffic

224
00:08:57,279 --> 00:08:58,320
should never ever

225
00:08:58,320 --> 00:09:01,040
cross these geographical uh regions and

226
00:09:01,040 --> 00:09:01,680
then

227
00:09:01,680 --> 00:09:03,040
many a times these are kind of

228
00:09:03,040 --> 00:09:06,399
contractual asks from the customers

229
00:09:06,399 --> 00:09:09,440
so um uh the the way flexilgo solves

230
00:09:09,440 --> 00:09:10,080
this is

231
00:09:10,080 --> 00:09:13,760
define a flex algo which uh excludes red

232
00:09:13,760 --> 00:09:14,240
links

233
00:09:14,240 --> 00:09:17,519
and avoids red node uh and

234
00:09:17,519 --> 00:09:20,399
and with this um uh you know a topology

235
00:09:20,399 --> 00:09:21,360
uh the flex

236
00:09:21,360 --> 00:09:24,160
core topology that igp uses for path

237
00:09:24,160 --> 00:09:24,959
computation

238
00:09:24,959 --> 00:09:27,519
for this this flex i'll go would not see

239
00:09:27,519 --> 00:09:29,200
the red nodes and red links

240
00:09:29,200 --> 00:09:32,000
and enhance i would never traverse those

241
00:09:32,000 --> 00:09:32,880
nodes and

242
00:09:32,880 --> 00:09:36,160
links so let's also see some other

243
00:09:36,160 --> 00:09:39,839
uh use cases um that are applicable

244
00:09:39,839 --> 00:09:42,640
um as and when we are seeing uh you know

245
00:09:42,640 --> 00:09:44,640
more interest in uh flex algo

246
00:09:44,640 --> 00:09:45,839
deployments

247
00:09:45,839 --> 00:09:48,000
the other use cases there we that we are

248
00:09:48,000 --> 00:09:50,080
also coming across as

249
00:09:50,080 --> 00:09:54,480
like merging two networks into one so

250
00:09:54,480 --> 00:09:57,760
network consolidation use cases

251
00:09:57,760 --> 00:10:00,880
which you know want to use a single igp

252
00:10:00,880 --> 00:10:03,680
and then merge their network into the

253
00:10:03,680 --> 00:10:04,000
single

254
00:10:04,000 --> 00:10:07,200
igp but yet maintain the isolation for

255
00:10:07,200 --> 00:10:08,720
certain traffic especially high

256
00:10:08,720 --> 00:10:10,160
bandwidth traffic

257
00:10:10,160 --> 00:10:13,519
such as you know internet uh

258
00:10:13,519 --> 00:10:16,480
traffic they really don't want that

259
00:10:16,480 --> 00:10:17,360
traffic to

260
00:10:17,360 --> 00:10:21,040
you know use um for example vpn traffic

261
00:10:21,040 --> 00:10:22,399
which is more

262
00:10:22,399 --> 00:10:26,320
um which is uh

263
00:10:26,320 --> 00:10:29,519
more latency sensitive traffic

264
00:10:29,519 --> 00:10:32,640
so um what what is what can be done in

265
00:10:32,640 --> 00:10:35,760
in this kind of cases is um have the

266
00:10:35,760 --> 00:10:38,560
um the high bandwidth traffic use the

267
00:10:38,560 --> 00:10:39,519
flex algo

268
00:10:39,519 --> 00:10:43,279
and then restrict it to only the

269
00:10:43,279 --> 00:10:47,680
the plane that was meant for um

270
00:10:47,680 --> 00:10:50,160
internet traffic uh when the two

271
00:10:50,160 --> 00:10:50,800
networks

272
00:10:50,800 --> 00:10:53,279
were separate networks so what you get

273
00:10:53,279 --> 00:10:54,160
is uh

274
00:10:54,160 --> 00:10:57,279
in effect a single igp so a single

275
00:10:57,279 --> 00:10:58,880
operational team can maintain the

276
00:10:58,880 --> 00:11:02,399
network but then you get the isolation

277
00:11:02,399 --> 00:11:05,120
that you need for the high bandwidth

278
00:11:05,120 --> 00:11:07,120
traffic

279
00:11:07,120 --> 00:11:08,959
so another interesting use case is the

280
00:11:08,959 --> 00:11:11,279
low latency routing so

281
00:11:11,279 --> 00:11:13,200
for certain traffic you may want to use

282
00:11:13,200 --> 00:11:16,000
low latency routing and then

283
00:11:16,000 --> 00:11:18,240
so and it's a certain other traffic the

284
00:11:18,240 --> 00:11:20,399
normal

285
00:11:20,399 --> 00:11:23,200
low cost routing so the low latency

286
00:11:23,200 --> 00:11:23,839
routing

287
00:11:23,839 --> 00:11:25,839
can be in a flex i'll go and that uses

288
00:11:25,839 --> 00:11:27,760
latency metric

289
00:11:27,760 --> 00:11:31,839
to to calculate the path and then so

290
00:11:31,839 --> 00:11:35,920
gives you an end-to-end low latency path

291
00:11:38,240 --> 00:11:40,880
so let's let's go over some use cases

292
00:11:40,880 --> 00:11:42,800
and then see uh

293
00:11:42,800 --> 00:11:45,200
some examples like how flex algo is

294
00:11:45,200 --> 00:11:46,079
defined and

295
00:11:46,079 --> 00:11:48,880
and how flexilgo works uh for these use

296
00:11:48,880 --> 00:11:49,920
cases so

297
00:11:49,920 --> 00:11:52,000
first use case we will be talking about

298
00:11:52,000 --> 00:11:56,000
as low latency and high bandwidth paths

299
00:11:56,000 --> 00:12:00,000
so we can see the requirement here is to

300
00:12:00,000 --> 00:12:01,279
be

301
00:12:01,279 --> 00:12:04,320
able to compute low latency path and

302
00:12:04,320 --> 00:12:04,959
here we

303
00:12:04,959 --> 00:12:08,800
in this diagram on the right shows

304
00:12:08,800 --> 00:12:11,040
the latency as a function of circuit

305
00:12:11,040 --> 00:12:12,480
length

306
00:12:12,480 --> 00:12:16,079
um and we can see that r1 to r4

307
00:12:16,079 --> 00:12:19,760
r2 is 400 kilometers and that would be

308
00:12:19,760 --> 00:12:21,839
represented within uh with a metric of

309
00:12:21,839 --> 00:12:22,959
400

310
00:12:22,959 --> 00:12:25,519
and then r1 to r3 is 400 again and we

311
00:12:25,519 --> 00:12:27,440
can see that r1 to r

312
00:12:27,440 --> 00:12:29,760
4 is 300 and that will be represented

313
00:12:29,760 --> 00:12:31,920
using a metric of 300.

314
00:12:31,920 --> 00:12:36,399
and we can also see the link colors here

315
00:12:36,399 --> 00:12:38,560
blue links and red links the blue links

316
00:12:38,560 --> 00:12:40,560
are 100 gbps links

317
00:12:40,560 --> 00:12:44,320
and then the red link is a 10 gbps link

318
00:12:44,320 --> 00:12:47,440
so the requirement is all flows follow

319
00:12:47,440 --> 00:12:50,320
the lowest latency path

320
00:12:50,320 --> 00:12:52,800
but the high bandwidth flows must avoid

321
00:12:52,800 --> 00:12:54,000
the 10 gig links

322
00:12:54,000 --> 00:12:55,920
so that's the requirement and let's see

323
00:12:55,920 --> 00:12:59,279
how we can satisfy that using flex algo

324
00:12:59,279 --> 00:13:02,880
so we have these uh link advertisements

325
00:13:02,880 --> 00:13:04,959
uh and these link advertisement like

326
00:13:04,959 --> 00:13:06,160
traditional

327
00:13:06,160 --> 00:13:08,800
link advertisements no change uh

328
00:13:08,800 --> 00:13:09,519
whatsoever

329
00:13:09,519 --> 00:13:12,639
in in the existing link attribute

330
00:13:12,639 --> 00:13:14,639
advertisement in igps

331
00:13:14,639 --> 00:13:18,399
so r1 to r2 link um 400 as the agp

332
00:13:18,399 --> 00:13:19,279
metric

333
00:13:19,279 --> 00:13:22,320
and then administrative group

334
00:13:22,320 --> 00:13:25,760
is blue and then r1 to r3 400 again and

335
00:13:25,760 --> 00:13:26,160
then

336
00:13:26,160 --> 00:13:29,440
it's also blue and r1 to r4

337
00:13:29,440 --> 00:13:32,480
is 300 and then it's red administrative

338
00:13:32,480 --> 00:13:34,000
group because it's a

339
00:13:34,000 --> 00:13:37,600
10 gig link and then r2 to r4 and r3 to

340
00:13:37,600 --> 00:13:39,199
r4 similar

341
00:13:39,199 --> 00:13:41,680
400 being the metric and the

342
00:13:41,680 --> 00:13:42,720
administrative

343
00:13:42,720 --> 00:13:46,800
group being blue so now we define uh

344
00:13:46,800 --> 00:13:49,920
flex i'll go so flex algo will have

345
00:13:49,920 --> 00:13:51,199
something called

346
00:13:51,199 --> 00:13:53,680
flex alco definitions which which which

347
00:13:53,680 --> 00:13:55,360
will be advertised by

348
00:13:55,360 --> 00:13:59,519
one or two routers in the network so

349
00:13:59,519 --> 00:14:01,199
so basically all the routers in the

350
00:14:01,199 --> 00:14:04,240
network need to understand this fad

351
00:14:04,240 --> 00:14:06,639
but the fad will be configured on only

352
00:14:06,639 --> 00:14:09,120
one or two nodes in the network so that

353
00:14:09,120 --> 00:14:11,680
you know it is operationally simpler and

354
00:14:11,680 --> 00:14:13,600
then also you avoid uh

355
00:14:13,600 --> 00:14:16,639
errors uh during

356
00:14:16,639 --> 00:14:18,639
if you if you have to configure on every

357
00:14:18,639 --> 00:14:20,959
node you probably

358
00:14:20,959 --> 00:14:23,120
would have some config errors and that

359
00:14:23,120 --> 00:14:24,639
causing problems

360
00:14:24,639 --> 00:14:27,279
and and and flex algo simplifies this

361
00:14:27,279 --> 00:14:28,800
with single configuration

362
00:14:28,800 --> 00:14:32,240
uh one or two configurations on the

363
00:14:32,240 --> 00:14:34,639
on one or two nodes in the network so

364
00:14:34,639 --> 00:14:36,720
let's see for this use case what will be

365
00:14:36,720 --> 00:14:38,800
the fad definition

366
00:14:38,800 --> 00:14:41,519
so there is a low latency fad which will

367
00:14:41,519 --> 00:14:42,959
have metric type as

368
00:14:42,959 --> 00:14:46,880
igp and calculation type as spf

369
00:14:46,880 --> 00:14:48,880
and then it will have the constraints as

370
00:14:48,880 --> 00:14:50,720
include all

371
00:14:50,720 --> 00:14:52,800
and similarly there is a high bandwidth

372
00:14:52,800 --> 00:14:55,040
fad and that will have a metric type of

373
00:14:55,040 --> 00:14:56,639
igp

374
00:14:56,639 --> 00:14:59,680
and then calculation type of spf

375
00:14:59,680 --> 00:15:02,560
and then it will have exclude red as the

376
00:15:02,560 --> 00:15:04,000
constraint

377
00:15:04,000 --> 00:15:06,800
so the the flexible algorithm definition

378
00:15:06,800 --> 00:15:08,399
constitutes of

379
00:15:08,399 --> 00:15:10,880
metric type calculation type and and the

380
00:15:10,880 --> 00:15:11,680
constraints

381
00:15:11,680 --> 00:15:13,839
that that will be needed so this fad

382
00:15:13,839 --> 00:15:14,959
gets advertised

383
00:15:14,959 --> 00:15:19,360
to in in igp so every node receives it

384
00:15:19,360 --> 00:15:21,600
and all the nodes that participate in a

385
00:15:21,600 --> 00:15:22,560
particular

386
00:15:22,560 --> 00:15:26,320
uh flex algo we'll use this fad and

387
00:15:26,320 --> 00:15:27,120
compute

388
00:15:27,120 --> 00:15:30,079
paths so let's see uh in the next slide

389
00:15:30,079 --> 00:15:31,279
how that happens

390
00:15:31,279 --> 00:15:34,880
uh r1 r2 r3 and r4 so let's take the

391
00:15:34,880 --> 00:15:36,560
case of r4

392
00:15:36,560 --> 00:15:39,920
so r4 will advertise two segments a and

393
00:15:39,920 --> 00:15:41,199
b

394
00:15:41,199 --> 00:15:44,320
so one is low latency fad and another is

395
00:15:44,320 --> 00:15:45,519
high bandwidth

396
00:15:45,519 --> 00:15:49,360
fad so segment a is associated with low

397
00:15:49,360 --> 00:15:51,040
latency fad and segment b

398
00:15:51,040 --> 00:15:53,680
associated with high bandwidth fad and

399
00:15:53,680 --> 00:15:54,560
so now

400
00:15:54,560 --> 00:15:56,480
these segment a and b will also get

401
00:15:56,480 --> 00:15:57,839
advertised in

402
00:15:57,839 --> 00:16:00,959
igp and will be received by all the

403
00:16:00,959 --> 00:16:02,639
nodes and in the

404
00:16:02,639 --> 00:16:05,600
in the igp so r1 would also receive it

405
00:16:05,600 --> 00:16:06,880
and let's see now

406
00:16:06,880 --> 00:16:12,240
how r1 computes paths to these segments

407
00:16:12,720 --> 00:16:15,279
so r1 calculates the least cost path to

408
00:16:15,279 --> 00:16:16,399
segment a

409
00:16:16,399 --> 00:16:19,199
so segment a is low latency fad and then

410
00:16:19,199 --> 00:16:20,240
all the links

411
00:16:20,240 --> 00:16:23,759
will be a part of this flex i'll go

412
00:16:23,759 --> 00:16:27,199
for low latency so the

413
00:16:27,199 --> 00:16:29,600
next stop for r4 in this case will be

414
00:16:29,600 --> 00:16:32,160
the link r1 to r4

415
00:16:32,160 --> 00:16:35,279
because all the links are

416
00:16:35,279 --> 00:16:37,759
part of this uh flex i'll go and then

417
00:16:37,759 --> 00:16:38,800
the lowest

418
00:16:38,800 --> 00:16:41,920
latency path from r1 to r4 is via the r1

419
00:16:41,920 --> 00:16:43,040
r4 link

420
00:16:43,040 --> 00:16:45,759
uh so now let's see how next stop gets

421
00:16:45,759 --> 00:16:48,480
calculated for the high bandwidth pad

422
00:16:48,480 --> 00:16:50,880
so segment b is associated with high

423
00:16:50,880 --> 00:16:51,759
bandwidth

424
00:16:51,759 --> 00:16:54,320
fad uh and the high bandwidth the next

425
00:16:54,320 --> 00:16:55,600
stop for segment b

426
00:16:55,600 --> 00:16:58,880
will be an ecmp uh

427
00:16:58,880 --> 00:17:02,000
through r2 or r3 this is because

428
00:17:02,000 --> 00:17:05,359
the uh r1 to r4 link is a

429
00:17:05,359 --> 00:17:07,119
10 gig link and that one will be

430
00:17:07,119 --> 00:17:09,280
excluded from the high bandwidth

431
00:17:09,280 --> 00:17:11,520
flex i'll go and so that link will not

432
00:17:11,520 --> 00:17:13,919
be visible in the flexilgo topology

433
00:17:13,919 --> 00:17:16,319
so when r1 computes the next stop to

434
00:17:16,319 --> 00:17:17,280
segment b

435
00:17:17,280 --> 00:17:22,079
it will be uh via r2 and r3

436
00:17:22,079 --> 00:17:25,280
so let's move on to another uh use case

437
00:17:25,280 --> 00:17:27,359
which is a path diversity

438
00:17:27,359 --> 00:17:30,559
uh use case so here uh the requirement

439
00:17:30,559 --> 00:17:31,919
is that

440
00:17:31,919 --> 00:17:34,160
so all the red floors traverse the red

441
00:17:34,160 --> 00:17:35,120
links

442
00:17:35,120 --> 00:17:38,559
and no others and the orange flows

443
00:17:38,559 --> 00:17:40,480
prefer red links but they can fail over

444
00:17:40,480 --> 00:17:41,919
to buildings

445
00:17:41,919 --> 00:17:44,080
similarly blue flows traverse the blue

446
00:17:44,080 --> 00:17:46,160
links and no others

447
00:17:46,160 --> 00:17:48,400
and yellow flows prefer blue links but

448
00:17:48,400 --> 00:17:49,600
they can fail over to

449
00:17:49,600 --> 00:17:52,320
red links and the we can see the igp

450
00:17:52,320 --> 00:17:55,200
metric and te metric here

451
00:17:55,200 --> 00:17:57,760
so r1 to r2 will be a red link and we

452
00:17:57,760 --> 00:18:00,160
will have an igp metric of 200 and te

453
00:18:00,160 --> 00:18:01,919
metric of 400

454
00:18:01,919 --> 00:18:04,960
and r1 to r3 will be a blue link with

455
00:18:04,960 --> 00:18:05,760
400

456
00:18:05,760 --> 00:18:09,600
and 200 as 200 st metric

457
00:18:09,600 --> 00:18:12,240
an administrative group being blue and

458
00:18:12,240 --> 00:18:15,039
r2 to r4 is a red link and similarly r3

459
00:18:15,039 --> 00:18:17,919
to r4 is a blue link

460
00:18:17,919 --> 00:18:19,840
and we can see that flex algo

461
00:18:19,840 --> 00:18:21,440
definitions

462
00:18:21,440 --> 00:18:24,000
are here for red orange blue and yellow

463
00:18:24,000 --> 00:18:25,919
like salgos

464
00:18:25,919 --> 00:18:28,400
so the metric type is igp for red and

465
00:18:28,400 --> 00:18:29,120
orange

466
00:18:29,120 --> 00:18:31,679
and calculation type is spf and

467
00:18:31,679 --> 00:18:33,280
constraints for the red is

468
00:18:33,280 --> 00:18:35,360
exclude blue whereas for orange it's

469
00:18:35,360 --> 00:18:36,400
include all

470
00:18:36,400 --> 00:18:39,280
similarly for blue and yellow its metric

471
00:18:39,280 --> 00:18:41,440
type is te metric

472
00:18:41,440 --> 00:18:44,240
and the constraints are exclude red for

473
00:18:44,240 --> 00:18:46,080
blue and then include all four yellow

474
00:18:46,080 --> 00:18:49,120
and now we can see how the flex algo

475
00:18:49,120 --> 00:18:50,799
paths are calculated for each of the

476
00:18:50,799 --> 00:18:52,640
segments so we have four segments

477
00:18:52,640 --> 00:18:55,840
a b c d for red orange blue and yellow

478
00:18:55,840 --> 00:18:58,240
respectively

479
00:18:58,240 --> 00:19:01,120
and then uh each of these will get so

480
00:19:01,120 --> 00:19:02,240
segment a is

481
00:19:02,240 --> 00:19:04,960
associated with red b with orange c with

482
00:19:04,960 --> 00:19:05,679
blue and d

483
00:19:05,679 --> 00:19:08,240
with uh yellow and then r1 calculates

484
00:19:08,240 --> 00:19:09,360
least cost path

485
00:19:09,360 --> 00:19:11,840
to r4 now this time there are four

486
00:19:11,840 --> 00:19:13,440
flexel goes the

487
00:19:13,440 --> 00:19:16,880
path is calculated four times so we can

488
00:19:16,880 --> 00:19:17,200
see

489
00:19:17,200 --> 00:19:20,400
r1 to r4 for the

490
00:19:20,400 --> 00:19:24,720
prefix for the segment a which is

491
00:19:24,720 --> 00:19:27,360
uh in the red flecks i'll go the next

492
00:19:27,360 --> 00:19:28,960
stop will be via r2

493
00:19:28,960 --> 00:19:31,200
so and the and there is absolutely no

494
00:19:31,200 --> 00:19:33,280
failover because it does not

495
00:19:33,280 --> 00:19:35,919
include the buildings similarly for

496
00:19:35,919 --> 00:19:36,720
orange

497
00:19:36,720 --> 00:19:40,880
flex i'll go the next top is via r2

498
00:19:40,880 --> 00:19:43,280
uh and then at the end because igp

499
00:19:43,280 --> 00:19:45,679
metrics are lower on red links

500
00:19:45,679 --> 00:19:48,960
but there is a failover on r3 because

501
00:19:48,960 --> 00:19:52,400
blue links are also included

502
00:19:52,400 --> 00:19:55,280
similarly uh we will see uh for the

503
00:19:55,280 --> 00:19:57,919
segment c and segment d

504
00:19:57,919 --> 00:20:01,520
so um the pre prefix segment uh

505
00:20:01,520 --> 00:20:03,520
c which in the blue flex i'll go the

506
00:20:03,520 --> 00:20:05,360
next stop is r3

507
00:20:05,360 --> 00:20:07,600
because the metric is lower or the

508
00:20:07,600 --> 00:20:09,200
metric is lower on

509
00:20:09,200 --> 00:20:11,600
on the blue link and there is no

510
00:20:11,600 --> 00:20:12,880
failover because

511
00:20:12,880 --> 00:20:15,120
it excludes all the red links and

512
00:20:15,120 --> 00:20:16,320
similarly the

513
00:20:16,320 --> 00:20:19,520
the yellow fad which is which is for the

514
00:20:19,520 --> 00:20:20,000
segment

515
00:20:20,000 --> 00:20:23,200
d we can see that the next top is r3 but

516
00:20:23,200 --> 00:20:24,000
and there is a

517
00:20:24,000 --> 00:20:27,440
failover because it includes red links

518
00:20:27,440 --> 00:20:29,120
as well so if there's a failover

519
00:20:29,120 --> 00:20:33,520
you can see that the path is via

520
00:20:33,520 --> 00:20:37,760
the red links so let's move on to ipflex

521
00:20:37,760 --> 00:20:38,559
algo

522
00:20:38,559 --> 00:20:41,840
so what we discussed so far it it used

523
00:20:41,840 --> 00:20:46,480
prefix segments and srm pls data plane

524
00:20:46,480 --> 00:20:49,679
so we have another uh variation of this

525
00:20:49,679 --> 00:20:51,760
which is srv6

526
00:20:51,760 --> 00:20:54,960
which also uses srv6 data plane but we

527
00:20:54,960 --> 00:20:55,440
have a

528
00:20:55,440 --> 00:20:58,000
third option which is a plane ip network

529
00:20:58,000 --> 00:20:59,440
which is i

530
00:20:59,440 --> 00:21:02,960
which we call as ipflex go this flavor

531
00:21:02,960 --> 00:21:05,679
does not use any mpls or any srv6 data

532
00:21:05,679 --> 00:21:08,000
plane it's a pure ip data plane

533
00:21:08,000 --> 00:21:11,039
so how this works is

534
00:21:11,039 --> 00:21:14,320
we define so the the mechanisms that we

535
00:21:14,320 --> 00:21:14,960
discussed

536
00:21:14,960 --> 00:21:18,640
so far for defining the fad

537
00:21:18,640 --> 00:21:20,880
remains the same and all the procedures

538
00:21:20,880 --> 00:21:22,480
that are applicable

539
00:21:22,480 --> 00:21:24,240
to the fad processing and fat

540
00:21:24,240 --> 00:21:26,240
advertisement remains same and they all

541
00:21:26,240 --> 00:21:27,360
use the

542
00:21:27,360 --> 00:21:30,720
mechanisms described in this flex algo

543
00:21:30,720 --> 00:21:31,679
draft

544
00:21:31,679 --> 00:21:34,000
so what is different is we we have to

545
00:21:34,000 --> 00:21:35,919
define multiple loopbacks instead of

546
00:21:35,919 --> 00:21:36,880
multiple

547
00:21:36,880 --> 00:21:40,320
segments um so

548
00:21:40,320 --> 00:21:41,919
like in the previous example there were

549
00:21:41,919 --> 00:21:43,760
four flexol goes that so there would be

550
00:21:43,760 --> 00:21:44,080
four

551
00:21:44,080 --> 00:21:45,440
loop packs that that you need to

552
00:21:45,440 --> 00:21:47,440
advertise from that router and

553
00:21:47,440 --> 00:21:48,960
each loop pack would be also get

554
00:21:48,960 --> 00:21:51,360
associated with with a single flex i'll

555
00:21:51,360 --> 00:21:52,799
go

556
00:21:52,799 --> 00:21:55,360
and then the service prefixes uh which

557
00:21:55,360 --> 00:21:57,039
let's say there's a service prefix which

558
00:21:57,039 --> 00:21:58,080
which wants to use

559
00:21:58,080 --> 00:22:00,880
the red flex algo that would use a

560
00:22:00,880 --> 00:22:02,720
protocol next top corresponding to the

561
00:22:02,720 --> 00:22:04,640
red loop pack and similarly a

562
00:22:04,640 --> 00:22:07,360
blue one would use a blue loop pack and

563
00:22:07,360 --> 00:22:08,240
then uh the

564
00:22:08,240 --> 00:22:13,200
they would use ip and ip tunneling uh

565
00:22:13,200 --> 00:22:16,480
to route within the core network

566
00:22:16,480 --> 00:22:18,880
so this is being standardized in ietf

567
00:22:18,880 --> 00:22:21,120
again in lsr working group and the draft

568
00:22:21,120 --> 00:22:22,640
name is draft ietf

569
00:22:22,640 --> 00:22:26,080
lsri p-flex algo so

570
00:22:26,080 --> 00:22:28,880
we saw uh how this flex will go why it

571
00:22:28,880 --> 00:22:31,440
is needed and how it works and so on and

572
00:22:31,440 --> 00:22:33,840
let's see some of the design guidelines

573
00:22:33,840 --> 00:22:36,559
um that are applicable to choosing flex

574
00:22:36,559 --> 00:22:37,360
algos

575
00:22:37,360 --> 00:22:39,200
so one of the question that that you

576
00:22:39,200 --> 00:22:40,640
need uh may

577
00:22:40,640 --> 00:22:42,640
may be thinking of is like how many

578
00:22:42,640 --> 00:22:44,000
flexel gauzes

579
00:22:44,000 --> 00:22:46,240
can can be expected to be deployed in a

580
00:22:46,240 --> 00:22:47,760
network

581
00:22:47,760 --> 00:22:50,880
so i uh so most uh common use cases

582
00:22:50,880 --> 00:22:52,159
would require

583
00:22:52,159 --> 00:22:55,039
two to four flex all goes to be deployed

584
00:22:55,039 --> 00:22:56,720
um but to a maximum

585
00:22:56,720 --> 00:23:00,000
you you you might go up to 16 but

586
00:23:00,000 --> 00:23:03,360
if you happen to have hundreds of flexel

587
00:23:03,360 --> 00:23:04,720
goes in the network

588
00:23:04,720 --> 00:23:06,720
that's that's not advisable at all you

589
00:23:06,720 --> 00:23:07,919
know

590
00:23:07,919 --> 00:23:10,400
if you if if your network design

591
00:23:10,400 --> 00:23:12,240
requires of hundreds hundreds of flex

592
00:23:12,240 --> 00:23:13,039
all goes

593
00:23:13,039 --> 00:23:15,200
to be deployed on a single router then

594
00:23:15,200 --> 00:23:16,159
probably

595
00:23:16,159 --> 00:23:18,720
uh you need to think of your uh choice

596
00:23:18,720 --> 00:23:19,679
of

597
00:23:19,679 --> 00:23:22,880
using flex algo as your

598
00:23:22,880 --> 00:23:24,960
mechanism for achieving traffic

599
00:23:24,960 --> 00:23:26,320
engineering so

600
00:23:26,320 --> 00:23:29,520
so what's recommended is is most common

601
00:23:29,520 --> 00:23:30,799
is two to four

602
00:23:30,799 --> 00:23:34,480
and max of up to 16. another design

603
00:23:34,480 --> 00:23:36,640
guideline is like how often does a flex

604
00:23:36,640 --> 00:23:37,600
algo definition

605
00:23:37,600 --> 00:23:39,280
definition need to change so you have

606
00:23:39,280 --> 00:23:40,799
designed you know

607
00:23:40,799 --> 00:23:43,840
a certain flex algo uh and and a

608
00:23:43,840 --> 00:23:45,919
certain definition the metric type

609
00:23:45,919 --> 00:23:48,000
calculation type and constraints for a

610
00:23:48,000 --> 00:23:49,600
certain flex algo

611
00:23:49,600 --> 00:23:52,720
so this is this this has to remain

612
00:23:52,720 --> 00:23:54,720
this most likely is going to remain

613
00:23:54,720 --> 00:23:56,799
constant all the time

614
00:23:56,799 --> 00:23:59,360
uh even if it changes it it is very very

615
00:23:59,360 --> 00:24:00,080
rarely

616
00:24:00,080 --> 00:24:03,760
uh it should change very rarely

617
00:24:03,760 --> 00:24:06,480
so so and this flexible definition uh

618
00:24:06,480 --> 00:24:08,480
has to be very stable in the network so

619
00:24:08,480 --> 00:24:09,200
let's say

620
00:24:09,200 --> 00:24:11,919
flex algo128 is based on delay metric

621
00:24:11,919 --> 00:24:14,480
and 129 based on te metric that doesn't

622
00:24:14,480 --> 00:24:15,039
change at

623
00:24:15,039 --> 00:24:18,000
all most likely will remain stable all

624
00:24:18,000 --> 00:24:20,640
the time in your network

625
00:24:20,640 --> 00:24:22,480
so there's a case where you may have

626
00:24:22,480 --> 00:24:25,200
some constraints like flex algo130

627
00:24:25,200 --> 00:24:27,840
which is exclude red links this should

628
00:24:27,840 --> 00:24:28,640
remain

629
00:24:28,640 --> 00:24:31,440
you know stable the links that are

630
00:24:31,440 --> 00:24:33,679
colored red may change but the flex algo

631
00:24:33,679 --> 00:24:35,919
definition to exclude red links that

632
00:24:35,919 --> 00:24:37,760
that should remain stable so that that's

633
00:24:37,760 --> 00:24:38,960
kind of a

634
00:24:38,960 --> 00:24:41,840
thumb rule or a design guideline for

635
00:24:41,840 --> 00:24:44,840
example let's say you want to use this

636
00:24:44,840 --> 00:24:46,400
um

637
00:24:46,400 --> 00:24:49,520
red color for congested links so your

638
00:24:49,520 --> 00:24:51,120
flex algo

639
00:24:51,120 --> 00:24:53,120
definition says exclude red links so

640
00:24:53,120 --> 00:24:55,279
that will remain as exclude red links

641
00:24:55,279 --> 00:24:57,360
but the links that are congested may

642
00:24:57,360 --> 00:24:59,440
change from time to time so

643
00:24:59,440 --> 00:25:02,720
you may change the link colors based on

644
00:25:02,720 --> 00:25:06,320
you know which links are

645
00:25:06,320 --> 00:25:10,159
congested at any given time so

646
00:25:10,159 --> 00:25:12,400
the link colors can change more often

647
00:25:12,400 --> 00:25:14,320
but the flex algo definition will remain

648
00:25:14,320 --> 00:25:15,760
stable

649
00:25:15,760 --> 00:25:18,559
another aspect to consider is migrations

650
00:25:18,559 --> 00:25:20,400
the nodes that

651
00:25:20,400 --> 00:25:23,600
has to be part of the flexel go the

652
00:25:23,600 --> 00:25:25,440
nodes the legacy nodes that do not

653
00:25:25,440 --> 00:25:27,520
support flex algo they cannot be part of

654
00:25:27,520 --> 00:25:29,440
the flex alco they cannot participate in

655
00:25:29,440 --> 00:25:31,200
the flex algos that that's something

656
00:25:31,200 --> 00:25:34,320
that that you need to care about

657
00:25:34,320 --> 00:25:36,960
uh and flex algo can coexist with ldp

658
00:25:36,960 --> 00:25:38,400
and rsvp so

659
00:25:38,400 --> 00:25:41,120
if you have a network that has ldp rsvp

660
00:25:41,120 --> 00:25:42,960
deployed you can go ahead and

661
00:25:42,960 --> 00:25:44,880
upgrade your routers and then enable

662
00:25:44,880 --> 00:25:46,480
flex i'll go and and

663
00:25:46,480 --> 00:25:48,480
you know for some traffic you can start

664
00:25:48,480 --> 00:25:50,640
using flex algo because flexelgo

665
00:25:50,640 --> 00:25:52,720
uses different labels and that those

666
00:25:52,720 --> 00:25:54,240
labels do not

667
00:25:54,240 --> 00:25:57,440
uh conflict with ldp and rsvp labels so

668
00:25:57,440 --> 00:26:01,360
they can coexist without any problem

669
00:26:03,360 --> 00:26:06,799
so flex algo is a new feature so

670
00:26:06,799 --> 00:26:09,200
when you deploy this new feature you

671
00:26:09,200 --> 00:26:11,200
know operationally

672
00:26:11,200 --> 00:26:14,080
to deploy this or to debug this what

673
00:26:14,080 --> 00:26:15,039
would be needed

674
00:26:15,039 --> 00:26:19,039
and i have listed down some of the

675
00:26:19,039 --> 00:26:22,080
operational requirements that i think

676
00:26:22,080 --> 00:26:24,720
an implementation should support to be

677
00:26:24,720 --> 00:26:27,200
able to easily debug

678
00:26:27,200 --> 00:26:31,279
this feature so uh mpls ping and trace

679
00:26:31,279 --> 00:26:32,080
route as

680
00:26:32,080 --> 00:26:36,000
is is a very powerful tool

681
00:26:36,000 --> 00:26:38,400
especially the trace route for exploring

682
00:26:38,400 --> 00:26:39,440
all the ecmp

683
00:26:39,440 --> 00:26:42,960
paths in a network and

684
00:26:42,960 --> 00:26:46,240
for flex algo use cases that use

685
00:26:46,240 --> 00:26:49,520
mpls data plane srm pls data plane

686
00:26:49,520 --> 00:26:52,480
it is a very useful to have mpls ping

687
00:26:52,480 --> 00:26:53,919
and trace route support for

688
00:26:53,919 --> 00:26:57,360
the flex algo labels so another

689
00:26:57,360 --> 00:26:58,080
requirement

690
00:26:58,080 --> 00:27:00,799
is to be ability to build demand metrics

691
00:27:00,799 --> 00:27:02,880
like traffic traffic demand metrics

692
00:27:02,880 --> 00:27:06,400
on a per flex algo basis so ability to

693
00:27:06,400 --> 00:27:08,480
count the traffic on a per flex i'll go

694
00:27:08,480 --> 00:27:08,799
sid

695
00:27:08,799 --> 00:27:12,720
is something that that is very useful

696
00:27:13,039 --> 00:27:16,240
uh so the next thing is um is

697
00:27:16,240 --> 00:27:20,000
especially some of the requirements for

698
00:27:20,000 --> 00:27:22,640
debugging for example there may be some

699
00:27:22,640 --> 00:27:24,919
certain problems in the network uh

700
00:27:24,919 --> 00:27:27,679
misconfigured flexible definitions like

701
00:27:27,679 --> 00:27:29,600
if you have configured fad on two

702
00:27:29,600 --> 00:27:32,960
two nodes and there are some some

703
00:27:32,960 --> 00:27:35,760
config mistakes and then you may have to

704
00:27:35,760 --> 00:27:38,240
debug that

705
00:27:38,240 --> 00:27:40,640
so to be able to debug this kind of

706
00:27:40,640 --> 00:27:42,880
problems it's useful to have display of

707
00:27:42,880 --> 00:27:45,360
flex algorithm definitions

708
00:27:45,360 --> 00:27:48,159
and then which nodes are participating

709
00:27:48,159 --> 00:27:48,480
in

710
00:27:48,480 --> 00:27:51,440
in in which each node is participating

711
00:27:51,440 --> 00:27:52,000
in

712
00:27:52,000 --> 00:27:54,880
which flexel goes and also there is a

713
00:27:54,880 --> 00:27:57,279
tie breaking algorithm or tie breaking

714
00:27:57,279 --> 00:27:58,480
rules for

715
00:27:58,480 --> 00:28:01,200
um flex uh you know when there are

716
00:28:01,200 --> 00:28:03,200
multiple nodes advertising

717
00:28:03,200 --> 00:28:05,840
the fad i mean who wins there are some

718
00:28:05,840 --> 00:28:06,480
type

719
00:28:06,480 --> 00:28:08,399
breaking rules and then it will be

720
00:28:08,399 --> 00:28:10,480
useful to have that information like

721
00:28:10,480 --> 00:28:14,480
this node who it uh decided as a winner

722
00:28:14,480 --> 00:28:16,240
and what is what are the details of that

723
00:28:16,240 --> 00:28:18,960
winning fad

724
00:28:21,440 --> 00:28:24,399
yeah another useful uh display would

725
00:28:24,399 --> 00:28:25,120
also be

726
00:28:25,120 --> 00:28:30,720
ability to look at what each node

727
00:28:30,720 --> 00:28:33,520
derived the flexalgo topology and what

728
00:28:33,520 --> 00:28:35,440
are the nodes and links it derived as

729
00:28:35,440 --> 00:28:38,880
part of that flexible topology

730
00:28:38,880 --> 00:28:41,200
so another useful thing is because this

731
00:28:41,200 --> 00:28:41,919
is

732
00:28:41,919 --> 00:28:45,600
the the flex algo spf

733
00:28:45,600 --> 00:28:49,360
uh flex algo perflex low spfs are done

734
00:28:49,360 --> 00:28:50,720
in igp

735
00:28:50,720 --> 00:28:53,440
it is also useful to you know have

736
00:28:53,440 --> 00:28:54,240
displays

737
00:28:54,240 --> 00:28:57,919
which you know displays spf log details

738
00:28:57,919 --> 00:28:58,480
like

739
00:28:58,480 --> 00:29:01,360
for example how many spfs were triggered

740
00:29:01,360 --> 00:29:03,360
and why they were triggered

741
00:29:03,360 --> 00:29:06,320
uh and what is the reason for those so

742
00:29:06,320 --> 00:29:07,679
that you can see

743
00:29:07,679 --> 00:29:09,520
for a certain flex i'll go if certain

744
00:29:09,520 --> 00:29:11,039
computation is not proper

745
00:29:11,039 --> 00:29:12,799
will be able to see whether a reflex

746
00:29:12,799 --> 00:29:15,360
algo was triggered or even for use cases

747
00:29:15,360 --> 00:29:16,960
where you know too many flexel goes

748
00:29:16,960 --> 00:29:18,640
getting triggered in certain flexor go

749
00:29:18,640 --> 00:29:19,760
and you want to see

750
00:29:19,760 --> 00:29:22,320
what are the reasons for that those um

751
00:29:22,320 --> 00:29:23,840
spfs getting triggered in that

752
00:29:23,840 --> 00:29:24,960
particular flexor

753
00:29:24,960 --> 00:29:28,000
so you know display of spf log details

754
00:29:28,000 --> 00:29:29,840
is a very useful thing to have

755
00:29:29,840 --> 00:29:32,080
to debug networks when you have flexil

756
00:29:32,080 --> 00:29:34,159
go deployed

757
00:29:34,159 --> 00:29:36,559
so another useful stuff is to have

758
00:29:36,559 --> 00:29:38,960
flexible routes

759
00:29:38,960 --> 00:29:41,039
you know display of flex will go routes

760
00:29:41,039 --> 00:29:42,640
and so you you

761
00:29:42,640 --> 00:29:47,039
you can debug um you'll be able to debug

762
00:29:47,039 --> 00:29:50,320
if something wrong going on flapping

763
00:29:50,320 --> 00:29:52,720
routes in a certain flex algo

764
00:29:52,720 --> 00:29:54,799
or some problems in downloading flex and

765
00:29:54,799 --> 00:29:57,360
go routes

766
00:30:01,679 --> 00:30:04,240
so in summary flexulgo is a very

767
00:30:04,240 --> 00:30:05,760
powerful tool

768
00:30:05,760 --> 00:30:08,960
so many networks require

769
00:30:08,960 --> 00:30:11,679
coarse grained te as we discussed in use

770
00:30:11,679 --> 00:30:12,640
cases

771
00:30:12,640 --> 00:30:16,000
throughout this presentation

772
00:30:16,000 --> 00:30:18,000
and some of the benefits of deploying

773
00:30:18,000 --> 00:30:19,120
flexel go into such

774
00:30:19,120 --> 00:30:22,480
networks as you know the sr path is

775
00:30:22,480 --> 00:30:24,880
reduced to single segment

776
00:30:24,880 --> 00:30:26,640
uh and also you don't need any

777
00:30:26,640 --> 00:30:29,360
controller or a header based computation

778
00:30:29,360 --> 00:30:32,399
engine and you just use the

779
00:30:32,399 --> 00:30:36,000
igp compute to come up with these paths

780
00:30:36,000 --> 00:30:38,880
and operationally it is simple because

781
00:30:38,880 --> 00:30:39,279
uh

782
00:30:39,279 --> 00:30:42,000
the flex algo configuration uh the

783
00:30:42,000 --> 00:30:43,360
constraints and other

784
00:30:43,360 --> 00:30:45,360
flex algo definition configuration can

785
00:30:45,360 --> 00:30:46,640
be done on

786
00:30:46,640 --> 00:30:51,200
only a few nodes

787
00:30:51,200 --> 00:30:54,640
making it operationally simple

788
00:30:54,640 --> 00:30:56,960
so there are also benefits of deploying

789
00:30:56,960 --> 00:31:00,159
ip flex algo in pure ip networks

790
00:31:00,159 --> 00:31:03,200
so no mpls needed so you can think of

791
00:31:03,200 --> 00:31:06,720
data center networks or

792
00:31:06,720 --> 00:31:08,480
you know networks where you know the

793
00:31:08,480 --> 00:31:12,320
devices are not capable of mpls or srv6

794
00:31:12,320 --> 00:31:14,480
data planes they you can you can just

795
00:31:14,480 --> 00:31:15,440
use

796
00:31:15,440 --> 00:31:18,960
pure ip to you know get constrained

797
00:31:18,960 --> 00:31:19,760
paths

798
00:31:19,760 --> 00:31:22,158
um

799
00:31:22,880 --> 00:31:24,960
and you also don't need enlarged address

800
00:31:24,960 --> 00:31:27,279
blocks per flex algo you all you need is

801
00:31:27,279 --> 00:31:28,480
uh you know one

802
00:31:28,480 --> 00:31:31,200
loop pack address per flex will go and

803
00:31:31,200 --> 00:31:33,600
also no new protocols required just uses

804
00:31:33,600 --> 00:31:35,519
igp which is a bare minimum for any

805
00:31:35,519 --> 00:31:38,000
network

806
00:31:39,120 --> 00:31:42,159
so these are the references

807
00:31:42,159 --> 00:31:45,919
uh the drafts that we talked about uh

808
00:31:45,919 --> 00:31:49,840
lsr flex algo and lsr ip flex algo

809
00:31:49,840 --> 00:31:52,799
you can get these in the lsr working

810
00:31:52,799 --> 00:31:55,039
group

811
00:31:56,480 --> 00:32:01,730
so that's what i had thank you

812
00:32:01,730 --> 00:32:12,059
[Music]

