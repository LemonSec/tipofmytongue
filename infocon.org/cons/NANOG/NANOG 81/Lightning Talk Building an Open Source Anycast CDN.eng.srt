1
00:00:01,640 --> 00:00:05,279
[Music]

2
00:00:05,279 --> 00:00:05,759
all right

3
00:00:05,759 --> 00:00:07,759
so my name is nick sales and this

4
00:00:07,759 --> 00:00:09,200
presentation i'm going to be speaking

5
00:00:09,200 --> 00:00:11,120
about building an open source anycast

6
00:00:11,120 --> 00:00:12,880
city app

7
00:00:12,880 --> 00:00:14,799
so first a little bit about me my name

8
00:00:14,799 --> 00:00:16,480
is link i'm a high school student

9
00:00:16,480 --> 00:00:18,000
interested in software development and

10
00:00:18,000 --> 00:00:20,080
networking i run autonomous systems

11
00:00:20,080 --> 00:00:21,600
three four five by three

12
00:00:21,600 --> 00:00:23,519
which i use for a variety of projects

13
00:00:23,519 --> 00:00:25,279
and recently i wanted to experiment with

14
00:00:25,279 --> 00:00:26,480
content delivery

15
00:00:26,480 --> 00:00:28,160
as well as increasing the reliability of

16
00:00:28,160 --> 00:00:30,080
some of my public facing services things

17
00:00:30,080 --> 00:00:32,558
like dns and http traffic

18
00:00:32,558 --> 00:00:34,800
so the overview of the project is that i

19
00:00:34,800 --> 00:00:35,680
wanted to

20
00:00:35,680 --> 00:00:37,920
um prove any cast i'm so wrong with

21
00:00:37,920 --> 00:00:38,960
multiple next stops

22
00:00:38,960 --> 00:00:41,360
answer build a cdn that uses any cast as

23
00:00:41,360 --> 00:00:42,960
the running methodology

24
00:00:42,960 --> 00:00:46,000
to deliver traffic efficiently

25
00:00:46,000 --> 00:00:47,360
and one of the goals of having fast and

26
00:00:47,360 --> 00:00:49,360
instagram updates so if multiple people

27
00:00:49,360 --> 00:00:50,640
wanted to change

28
00:00:50,640 --> 00:00:52,000
some sort of data and that would be

29
00:00:52,000 --> 00:00:54,000
possible and then really the main goal

30
00:00:54,000 --> 00:00:55,360
was this was going to be a learning

31
00:00:55,360 --> 00:00:56,000
experience

32
00:00:56,000 --> 00:00:57,199
so i wanted to learn about new

33
00:00:57,199 --> 00:00:58,480
technologies sort of play with things

34
00:00:58,480 --> 00:00:59,199
hands-on

35
00:00:59,199 --> 00:01:01,039
um really sort of learn about incas um

36
00:01:01,039 --> 00:01:02,800
in a hands-on way

37
00:01:02,800 --> 00:01:04,239
um and figure out how this stuff all

38
00:01:04,239 --> 00:01:07,280
works um one of the

39
00:01:07,280 --> 00:01:08,880
technical aspects was keeping all

40
00:01:08,880 --> 00:01:10,479
content directly at the edge so no

41
00:01:10,479 --> 00:01:13,040
backbone no igp i'm no backlong traffic

42
00:01:13,040 --> 00:01:14,799
and this really makes networks simpler

43
00:01:14,799 --> 00:01:17,439
because there's no dealing with igps or

44
00:01:17,439 --> 00:01:19,280
issues with that conversion times and

45
00:01:19,280 --> 00:01:20,799
this is all just i'm

46
00:01:20,799 --> 00:01:22,799
talking directly from the edge via

47
00:01:22,799 --> 00:01:24,320
anycast to those content servers to

48
00:01:24,320 --> 00:01:26,000
deliver the content

49
00:01:26,000 --> 00:01:27,040
and then i also wanted to keep

50
00:01:27,040 --> 00:01:28,960
everything open source so if anybody

51
00:01:28,960 --> 00:01:30,240
wanted to take a look at the code

52
00:01:30,240 --> 00:01:32,720
sort of see how i did things and think

53
00:01:32,720 --> 00:01:33,600
about how they could do things

54
00:01:33,600 --> 00:01:34,159
differently

55
00:01:34,159 --> 00:01:37,200
and that'd be possible and of course one

56
00:01:37,200 --> 00:01:38,000
of the requirements

57
00:01:38,000 --> 00:01:39,439
was being a student i needed to keep

58
00:01:39,439 --> 00:01:41,759
this as cheap as possible

59
00:01:41,759 --> 00:01:43,040
so i knew from the start that i wanted

60
00:01:43,040 --> 00:01:45,280
to run an authoritative dns

61
00:01:45,280 --> 00:01:47,920
um so i spent a couple of bind vms um

62
00:01:47,920 --> 00:01:48,479
and

63
00:01:48,479 --> 00:01:51,280
pulled off the races um dns is mostly a

64
00:01:51,280 --> 00:01:52,320
udp service

65
00:01:52,320 --> 00:01:54,479
and and there's some tcp thrown in there

66
00:01:54,479 --> 00:01:56,000
for things like zone transfers

67
00:01:56,000 --> 00:01:57,600
um this makes it very simple for any

68
00:01:57,600 --> 00:01:59,119
cast because there's no

69
00:01:59,119 --> 00:02:00,719
issues with any cast state

70
00:02:00,719 --> 00:02:02,640
synchronization and one of the problems

71
00:02:02,640 --> 00:02:03,439
that people have

72
00:02:03,439 --> 00:02:06,479
um post with doing anycast is that

73
00:02:06,479 --> 00:02:09,360
tcp state can become out of sync for

74
00:02:09,360 --> 00:02:10,639
example if we have a packet that's going

75
00:02:10,639 --> 00:02:11,440
to one server

76
00:02:11,440 --> 00:02:13,280
and then ends up at a different server

77
00:02:13,280 --> 00:02:14,879
um for the app packet and then you just

78
00:02:14,879 --> 00:02:16,160
get a reset back and the connection

79
00:02:16,160 --> 00:02:16,959
drops

80
00:02:16,959 --> 00:02:18,400
and that's not a problem with gdp and

81
00:02:18,400 --> 00:02:20,160
because there is no state so which is

82
00:02:20,160 --> 00:02:22,800
sort of this um just packet goes there

83
00:02:22,800 --> 00:02:24,560
no sort of handshake or stage sync

84
00:02:24,560 --> 00:02:26,640
um anything like that it's all um

85
00:02:26,640 --> 00:02:27,760
directly

86
00:02:27,760 --> 00:02:30,879
back and forth um then http

87
00:02:30,879 --> 00:02:33,120
level https i wanted to play with

88
00:02:33,120 --> 00:02:34,879
caching um so this is one of the things

89
00:02:34,879 --> 00:02:35,360
that

90
00:02:35,360 --> 00:02:37,599
mcdms do very well is doing a caching

91
00:02:37,599 --> 00:02:38,720
proxy service

92
00:02:38,720 --> 00:02:42,239
so i use caddy and bars for this um and

93
00:02:42,239 --> 00:02:43,680
now that was how i built the caching

94
00:02:43,680 --> 00:02:46,720
network um this is of course mostly tcp

95
00:02:46,720 --> 00:02:48,239
um there is a little bit of udp with

96
00:02:48,239 --> 00:02:49,760
http 3 and quick

97
00:02:49,760 --> 00:02:51,599
which i am running on the network though

98
00:02:51,599 --> 00:02:52,879
um it's mostly tcp

99
00:02:52,879 --> 00:02:54,720
so so this is where you see problems

100
00:02:54,720 --> 00:02:56,720
like um packets arriving out of order

101
00:02:56,720 --> 00:02:58,239
air packs for the packets are running at

102
00:02:58,239 --> 00:02:59,120
different nodes

103
00:02:59,120 --> 00:03:03,040
which can cause issues with tcp services

104
00:03:03,040 --> 00:03:04,560
in terms of control plane architecture

105
00:03:04,560 --> 00:03:05,920
and the network is designed around a

106
00:03:05,920 --> 00:03:07,760
single central control plane machine

107
00:03:07,760 --> 00:03:09,760
and this was built there for simplicity

108
00:03:09,760 --> 00:03:12,319
um and it's just v1 of the code

109
00:03:12,319 --> 00:03:13,760
um so when the user is going to interact

110
00:03:13,760 --> 00:03:15,440
with the network for example they want

111
00:03:15,440 --> 00:03:16,800
to edit a dns record

112
00:03:16,800 --> 00:03:17,920
and they're going to be talking to a

113
00:03:17,920 --> 00:03:20,080
flask api probably through the user

114
00:03:20,080 --> 00:03:20,879
interface

115
00:03:20,879 --> 00:03:23,040
um so they're going to talk to ui and

116
00:03:23,040 --> 00:03:24,799
then the ui is going to be sending those

117
00:03:24,799 --> 00:03:27,760
http requests to flask flask then going

118
00:03:27,760 --> 00:03:29,040
to handle storing the data

119
00:03:29,040 --> 00:03:31,280
in is the database you think

120
00:03:31,280 --> 00:03:32,799
for persistent object storage

121
00:03:32,799 --> 00:03:35,920
um this source things like um dna

122
00:03:35,920 --> 00:03:39,040
dns records um for the caching servers

123
00:03:39,040 --> 00:03:40,560
storage uh backend ip addresses of the

124
00:03:40,560 --> 00:03:43,040
http endpoints and things like that

125
00:03:43,040 --> 00:03:45,280
blast is also going to send a message to

126
00:03:45,280 --> 00:03:47,440
beansuck a beanstalk is a message queue

127
00:03:47,440 --> 00:03:50,400
which sort of acts as a temporary store

128
00:03:50,400 --> 00:03:52,319
for operational changes

129
00:03:52,319 --> 00:03:54,640
this plays into the um fast asynchronous

130
00:03:54,640 --> 00:03:55,760
update goal that i had

131
00:03:55,760 --> 00:03:57,760
of being able to change data i have a

132
00:03:57,760 --> 00:03:59,439
queued um for then

133
00:03:59,439 --> 00:04:00,720
the operation that could take longer

134
00:04:00,720 --> 00:04:02,319
like deploying a record to the entire

135
00:04:02,319 --> 00:04:02,959
network

136
00:04:02,959 --> 00:04:04,239
so beanstalk helps with keeping those

137
00:04:04,239 --> 00:04:07,200
messages um cued and saying fast

138
00:04:07,200 --> 00:04:08,959
uh the second step um once the change

139
00:04:08,959 --> 00:04:10,640
has been made um is the orchestrator and

140
00:04:10,640 --> 00:04:12,080
which is a second python process

141
00:04:12,080 --> 00:04:13,280
and the orchestra is actually going to

142
00:04:13,280 --> 00:04:15,439
go um build templates um based on the

143
00:04:15,439 --> 00:04:16,560
mongodb config

144
00:04:16,560 --> 00:04:18,079
and then it's going to send those out to

145
00:04:18,079 --> 00:04:20,320
each edge um so the orchestrator talks

146
00:04:20,320 --> 00:04:20,880
to

147
00:04:20,880 --> 00:04:23,120
service salmons via control signals so

148
00:04:23,120 --> 00:04:24,639
this is going to be things like reloads

149
00:04:24,639 --> 00:04:25,360
and restarts

150
00:04:25,360 --> 00:04:26,880
and then the control is also going to

151
00:04:26,880 --> 00:04:28,639
talk directly to the file system of each

152
00:04:28,639 --> 00:04:29,199
node

153
00:04:29,199 --> 00:04:31,040
so things like um dns some files can

154
00:04:31,040 --> 00:04:32,639
copy directly as just file system

155
00:04:32,639 --> 00:04:33,199
objects

156
00:04:33,199 --> 00:04:35,919
um to the node and then and then the

157
00:04:35,919 --> 00:04:36,880
nodes themselves

158
00:04:36,880 --> 00:04:38,400
they are linux and as well as some

159
00:04:38,400 --> 00:04:40,240
service statements like blind for dns

160
00:04:40,240 --> 00:04:42,320
and then cadmium bars for http caching

161
00:04:42,320 --> 00:04:43,520
and proxy

162
00:04:43,520 --> 00:04:45,840
and then i'm also using bird for bgp i'm

163
00:04:45,840 --> 00:04:47,360
going to talk about a little bit more

164
00:04:47,360 --> 00:04:49,600
later but one of the challenges in

165
00:04:49,600 --> 00:04:50,479
bloomberg network

166
00:04:50,479 --> 00:04:52,000
was dealing with tls certificate

167
00:04:52,000 --> 00:04:54,639
requests um there are free cas such as

168
00:04:54,639 --> 00:04:55,440
lexicrypt

169
00:04:55,440 --> 00:04:58,400
which has a very nice automated acme

170
00:04:58,400 --> 00:04:58,960
process

171
00:04:58,960 --> 00:05:01,440
which allows you to validate your

172
00:05:01,440 --> 00:05:02,560
ownership of a domain

173
00:05:02,560 --> 00:05:06,639
and then have your tls or github

174
00:05:06,639 --> 00:05:09,120
issued for you now this is quite easy

175
00:05:09,120 --> 00:05:11,120
for a single uh unicast web server

176
00:05:11,120 --> 00:05:13,520
um things like certbot make this process

177
00:05:13,520 --> 00:05:14,560
super quick and easy

178
00:05:14,560 --> 00:05:16,240
um and web servers like caddy have

179
00:05:16,240 --> 00:05:18,240
built-in um acme clients which can sort

180
00:05:18,240 --> 00:05:20,240
of automate the process even further

181
00:05:20,240 --> 00:05:22,560
and this is not so simple of course with

182
00:05:22,560 --> 00:05:23,360
any cast

183
00:05:23,360 --> 00:05:24,880
because their validation servers could

184
00:05:24,880 --> 00:05:26,160
end up at any one of your anycast

185
00:05:26,160 --> 00:05:27,199
endpoints

186
00:05:27,199 --> 00:05:28,800
um so i designed a sort of three-step

187
00:05:28,800 --> 00:05:30,560
process with a certificate controller

188
00:05:30,560 --> 00:05:32,240
that acts as an intermediary

189
00:05:32,240 --> 00:05:34,880
um which handled sort of the issuance of

190
00:05:34,880 --> 00:05:36,080
those certificates

191
00:05:36,080 --> 00:05:37,360
and then i realized that let's encrypt

192
00:05:37,360 --> 00:05:40,080
supports dns um so you can use a dns 01

193
00:05:40,080 --> 00:05:40,880
challenge

194
00:05:40,880 --> 00:05:42,960
by creating a txt record for your zone

195
00:05:42,960 --> 00:05:44,720
um so i just threw all this code away

196
00:05:44,720 --> 00:05:46,320
and just called my own api to add a

197
00:05:46,320 --> 00:05:47,840
simple dns txt record

198
00:05:47,840 --> 00:05:49,919
to validate domain ownership um this was

199
00:05:49,919 --> 00:05:51,520
of course a whole lot simpler

200
00:05:51,520 --> 00:05:53,520
than dealing with a three-way handshake

201
00:05:53,520 --> 00:05:54,720
with acne clients and

202
00:05:54,720 --> 00:05:57,919
retries and all that so in terms of the

203
00:05:57,919 --> 00:05:58,560
network

204
00:05:58,560 --> 00:06:00,479
this is running two fully global on

205
00:06:00,479 --> 00:06:01,600
anycast networks

206
00:06:01,600 --> 00:06:03,039
and the first one is the primary name

207
00:06:03,039 --> 00:06:04,960
server which is now from all pops

208
00:06:04,960 --> 00:06:06,479
and this is now globally so multiple

209
00:06:06,479 --> 00:06:08,720
continents um and this is the

210
00:06:08,720 --> 00:06:11,440
main dns server and the second one

211
00:06:11,440 --> 00:06:12,560
shares the

212
00:06:12,560 --> 00:06:15,039
secondary dns with the hdb caching

213
00:06:15,039 --> 00:06:15,680
servers

214
00:06:15,680 --> 00:06:17,360
this is a second prefix and which is

215
00:06:17,360 --> 00:06:18,720
announced anycast as well

216
00:06:18,720 --> 00:06:20,880
but only from the larger pumps and the

217
00:06:20,880 --> 00:06:22,479
reason this is because certain smaller

218
00:06:22,479 --> 00:06:23,120
pops

219
00:06:23,120 --> 00:06:25,199
aren't really equipped to handle um

220
00:06:25,199 --> 00:06:26,560
loaded heb caching

221
00:06:26,560 --> 00:06:28,560
um small vms can handle dna just fine

222
00:06:28,560 --> 00:06:30,319
but they don't have enough storage or

223
00:06:30,319 --> 00:06:32,840
compute to really do http caching

224
00:06:32,840 --> 00:06:34,240
services

225
00:06:34,240 --> 00:06:36,000
um so each one of these they slash 24

226
00:06:36,000 --> 00:06:37,759
and slash 48

227
00:06:37,759 --> 00:06:39,280
and there's just two of them so two

228
00:06:39,280 --> 00:06:41,520
different networks um there's not enough

229
00:06:41,520 --> 00:06:42,479
ip space

230
00:06:42,479 --> 00:06:45,280
that i had on my budget um to really go

231
00:06:45,280 --> 00:06:46,479
for regional i guess

232
00:06:46,479 --> 00:06:48,319
so i certainly would have liked to have

233
00:06:48,319 --> 00:06:50,080
a sort of single block or

234
00:06:50,080 --> 00:06:52,000
a pair of blocks per continent so i

235
00:06:52,000 --> 00:06:53,360
could scope announcements and

236
00:06:53,360 --> 00:06:55,360
tune any cast just as a particular

237
00:06:55,360 --> 00:06:56,479
geographic region

238
00:06:56,479 --> 00:06:57,759
but unfortunately that wasn't going to

239
00:06:57,759 --> 00:07:00,160
work for this um the internet

240
00:07:00,160 --> 00:07:02,000
is fully dual sec so v4 basics

241
00:07:02,000 --> 00:07:04,639
everywhere and you do

242
00:07:04,639 --> 00:07:06,880
tend to engage in public peering um so

243
00:07:06,880 --> 00:07:08,479
this is all um

244
00:07:08,479 --> 00:07:11,520
intern network is built on as34553 um so

245
00:07:11,520 --> 00:07:12,319
you can see on the right

246
00:07:12,319 --> 00:07:15,360
are some of my um db that documented

247
00:07:15,360 --> 00:07:16,000
isps

248
00:07:16,000 --> 00:07:19,440
i'm not a pure app i'm from

249
00:07:19,440 --> 00:07:21,680
balancing i'm doing a global upload

250
00:07:21,680 --> 00:07:22,880
balancing with any guest

251
00:07:22,880 --> 00:07:24,560
um so both prefixes are announced the

252
00:07:24,560 --> 00:07:26,160
entire internet um globally

253
00:07:26,160 --> 00:07:28,639
um and then i'm using anycast they will

254
00:07:28,639 --> 00:07:30,080
find their way to the

255
00:07:30,080 --> 00:07:32,080
closest destination um the way that

256
00:07:32,080 --> 00:07:32,960
works i'm going to talk about a little

257
00:07:32,960 --> 00:07:34,080
bit later

258
00:07:34,080 --> 00:07:35,919
i'm fluid bouncing at a per pop level

259
00:07:35,919 --> 00:07:38,160
this is based on mostly ecmp

260
00:07:38,160 --> 00:07:40,800
so on the top we can have um this vgp

261
00:07:40,800 --> 00:07:42,319
route and this is appearing with them

262
00:07:42,319 --> 00:07:43,440
for the edge nodes

263
00:07:43,440 --> 00:07:45,919
um and we can see that there is a route

264
00:07:45,919 --> 00:07:46,960
to each of them

265
00:07:46,960 --> 00:07:48,960
and then using bird and we can see that

266
00:07:48,960 --> 00:07:51,360
on the bottom and

267
00:07:51,360 --> 00:07:53,120
i can see the route i'm injected into

268
00:07:53,120 --> 00:07:55,039
the legs kernel um which we can see

269
00:07:55,039 --> 00:07:56,879
and we have four next top so with equal

270
00:07:56,879 --> 00:07:58,960
costs and then we just let

271
00:07:58,960 --> 00:08:02,000
linux do um ecmp flow action

272
00:08:02,000 --> 00:08:03,919
and we can see here running 10 uh dns

273
00:08:03,919 --> 00:08:06,000
requests um towards the

274
00:08:06,000 --> 00:08:09,120
towards the anycast endpoint does

275
00:08:09,120 --> 00:08:10,800
results in a pretty even spread

276
00:08:10,800 --> 00:08:14,800
among those four dns servers

277
00:08:16,080 --> 00:08:17,680
so bdp automation is one of the things

278
00:08:17,680 --> 00:08:19,520
that's really important

279
00:08:19,520 --> 00:08:22,240
in the network the key here is doing

280
00:08:22,240 --> 00:08:23,120
simple

281
00:08:23,120 --> 00:08:24,800
repeatable configs and that can be

282
00:08:24,800 --> 00:08:26,400
templated easily and deployed

283
00:08:26,400 --> 00:08:28,639
consistently across the network

284
00:08:28,639 --> 00:08:30,240
for this i designed a tool um that

285
00:08:30,240 --> 00:08:32,799
handles rpki um ir critics list and max

286
00:08:32,799 --> 00:08:33,679
prefix limits

287
00:08:33,679 --> 00:08:36,320
um that pull automatically from pure db

288
00:08:36,320 --> 00:08:37,599
after the square query

289
00:08:37,599 --> 00:08:39,919
i'm here in db based on the asn and

290
00:08:39,919 --> 00:08:41,039
retrieve all this information about the

291
00:08:41,039 --> 00:08:41,839
as set

292
00:08:41,839 --> 00:08:44,320
max prefix limits um and if you're

293
00:08:44,320 --> 00:08:45,839
assumptions accordingly

294
00:08:45,839 --> 00:08:48,640
and the entire config is built um um by

295
00:08:48,640 --> 00:08:49,839
one file programmer

296
00:08:49,839 --> 00:08:52,480
so on the left we can see a simple 10 15

297
00:08:52,480 --> 00:08:54,720
line file um for one period one upstream

298
00:08:54,720 --> 00:08:57,760
um which can handle um filtering and

299
00:08:57,760 --> 00:08:59,360
um session generation all just

300
00:08:59,360 --> 00:09:01,600
automatically

301
00:09:01,600 --> 00:09:02,800
that file can be written in yaml

302
00:09:02,800 --> 00:09:04,640
tomorrow or json you can take your pic

303
00:09:04,640 --> 00:09:07,440
in your um for writing language and the

304
00:09:07,440 --> 00:09:08,800
code is open source and github

305
00:09:08,800 --> 00:09:10,640
and this is called a bcg for the bird

306
00:09:10,640 --> 00:09:12,000
configuration generator

307
00:09:12,000 --> 00:09:14,240
and this is then the tool that i've used

308
00:09:14,240 --> 00:09:16,080
and developed for

309
00:09:16,080 --> 00:09:19,680
bgp automation in the cdn

310
00:09:20,480 --> 00:09:22,080
so in terms of monitoring um there are

311
00:09:22,080 --> 00:09:23,519
three main strategies

312
00:09:23,519 --> 00:09:25,680
a three main strategy that i use uh a

313
00:09:25,680 --> 00:09:26,880
central road collector

314
00:09:26,880 --> 00:09:29,440
um is um sort of the way that i use to

315
00:09:29,440 --> 00:09:30,959
gain a just uh

316
00:09:30,959 --> 00:09:32,480
sort of general routing insight into the

317
00:09:32,480 --> 00:09:34,399
edge of the network since there is no

318
00:09:34,399 --> 00:09:35,920
backbone no igp

319
00:09:35,920 --> 00:09:37,600
all of the routers um have some sort of

320
00:09:37,600 --> 00:09:39,920
bgp session on them um and so they

321
00:09:39,920 --> 00:09:41,040
are going to be sending routes to the

322
00:09:41,040 --> 00:09:44,240
reflector via playhop ipgp sessions

323
00:09:44,240 --> 00:09:45,920
which can then let me see things like

324
00:09:45,920 --> 00:09:47,279
wdp communities

325
00:09:47,279 --> 00:09:49,760
and other writing attributes and the

326
00:09:49,760 --> 00:09:51,519
second sort of metrics based monitoring

327
00:09:51,519 --> 00:09:55,519
is built on um this is things like

328
00:09:55,519 --> 00:09:57,279
um just basic stats things like cpu

329
00:09:57,279 --> 00:09:58,720
usage bandwidth usage

330
00:09:58,720 --> 00:10:01,519
a number of query errors um cash cash

331
00:10:01,519 --> 00:10:02,320
ship ratio

332
00:10:02,320 --> 00:10:04,240
from things like that um so prometheus

333
00:10:04,240 --> 00:10:05,920
is my time series database

334
00:10:05,920 --> 00:10:07,920
um which is then feeding data to rafana

335
00:10:07,920 --> 00:10:10,320
for visualization

336
00:10:10,320 --> 00:10:12,480
and the third category is manual

337
00:10:12,480 --> 00:10:14,079
troubleshooting and optimization

338
00:10:14,079 --> 00:10:16,320
and this mostly relates to any cataract

339
00:10:16,320 --> 00:10:17,200
being propagated

340
00:10:17,200 --> 00:10:19,440
down to being propagated through through

341
00:10:19,440 --> 00:10:20,560
the dfz

342
00:10:20,560 --> 00:10:23,279
so um using tools like the analog ring

343
00:10:23,279 --> 00:10:24,160
and ripe atlas

344
00:10:24,160 --> 00:10:25,839
i'm allow me to sort of run trace routes

345
00:10:25,839 --> 00:10:27,760
and pings and be it multiple servers in

346
00:10:27,760 --> 00:10:28,399
the world

347
00:10:28,399 --> 00:10:30,560
um to see where these anycast routes are

348
00:10:30,560 --> 00:10:31,440
ending up

349
00:10:31,440 --> 00:10:32,640
and this has been very useful in

350
00:10:32,640 --> 00:10:34,399
troubleshooting certain routes or i'm

351
00:10:34,399 --> 00:10:36,160
running problems and making sure

352
00:10:36,160 --> 00:10:38,000
that the network is globally reachable

353
00:10:38,000 --> 00:10:40,079
um from every end point

354
00:10:40,079 --> 00:10:43,120
that i can measure so one of the biggest

355
00:10:43,120 --> 00:10:44,560
challenges that i faced

356
00:10:44,560 --> 00:10:45,760
when building this network with tuning

357
00:10:45,760 --> 00:10:48,480
anycast because both networks are

358
00:10:48,480 --> 00:10:49,760
fully global they're announced for

359
00:10:49,760 --> 00:10:51,519
multiple continents um this gets to be

360
00:10:51,519 --> 00:10:53,040
quite a beast to tune

361
00:10:53,040 --> 00:10:55,279
um the two strategies that i used here

362
00:10:55,279 --> 00:10:57,200
are prepends and export control

363
00:10:57,200 --> 00:10:59,440
um pre-pens are used apparently so i

364
00:10:59,440 --> 00:11:00,880
will pre-pen two or three times

365
00:11:00,880 --> 00:11:03,519
um any more than that um i will just use

366
00:11:03,519 --> 00:11:04,399
export control

367
00:11:04,399 --> 00:11:06,320
and cut off the announcement um so for

368
00:11:06,320 --> 00:11:08,240
example things like isp wrap servers

369
00:11:08,240 --> 00:11:10,399
i generally do not um send those anycast

370
00:11:10,399 --> 00:11:11,680
prefixes to

371
00:11:11,680 --> 00:11:13,519
because there's no way to control where

372
00:11:13,519 --> 00:11:15,120
the routes go from there

373
00:11:15,120 --> 00:11:17,279
certain isps have communities um for

374
00:11:17,279 --> 00:11:18,160
filtering that

375
00:11:18,160 --> 00:11:19,600
but it's a lot easier to establish

376
00:11:19,600 --> 00:11:21,200
bilateral appearing relationships

377
00:11:21,200 --> 00:11:22,959
um with the providers that i want to

378
00:11:22,959 --> 00:11:24,480
appear with i'm rather than trying to

379
00:11:24,480 --> 00:11:25,519
deal with

380
00:11:25,519 --> 00:11:29,600
scoped community announcements for xp's

381
00:11:29,600 --> 00:11:31,120
uh one of the things that bgp does not

382
00:11:31,120 --> 00:11:33,040
take into account um is latency impact

383
00:11:33,040 --> 00:11:33,519
loss

384
00:11:33,519 --> 00:11:34,880
now this is certainly important for

385
00:11:34,880 --> 00:11:37,920
things like dns as well http traffic

386
00:11:37,920 --> 00:11:39,839
um playing into time to first byte um

387
00:11:39,839 --> 00:11:42,160
with latency really is important so i

388
00:11:42,160 --> 00:11:43,040
developed a tool

389
00:11:43,040 --> 00:11:45,920
um called st to ping simultaneously from

390
00:11:45,920 --> 00:11:47,519
multiple source ips

391
00:11:47,519 --> 00:11:49,680
um this can be used for um balancing

392
00:11:49,680 --> 00:11:50,880
transits for example

393
00:11:50,880 --> 00:11:52,399
i'm sorry to pop with two trailer

394
00:11:52,399 --> 00:11:54,079
providers and i can ping from both of

395
00:11:54,079 --> 00:11:54,639
those

396
00:11:54,639 --> 00:11:57,200
dmark ips um to a common endpoint and

397
00:11:57,200 --> 00:11:58,720
then i can see the normal ping

398
00:11:58,720 --> 00:12:00,320
sort of statistics that you would see

399
00:12:00,320 --> 00:12:01,920
and what's just normal thing so we can

400
00:12:01,920 --> 00:12:02,720
see things like pair

401
00:12:02,720 --> 00:12:06,320
loss uh latency and what can help me to

402
00:12:06,320 --> 00:12:08,320
then tune things like pre-pens um to

403
00:12:08,320 --> 00:12:10,880
influence um outbound uh collection

404
00:12:10,880 --> 00:12:12,639
um so of course print times for inbounds

405
00:12:12,639 --> 00:12:14,000
um things like

406
00:12:14,000 --> 00:12:18,000
bgp local press for outbound traffic

407
00:12:18,000 --> 00:12:19,279
and that brings me towards the end of my

408
00:12:19,279 --> 00:12:20,959
presentation um so i'm always looking

409
00:12:20,959 --> 00:12:22,800
for you pops so if you have some spare

410
00:12:22,800 --> 00:12:25,120
vm infrastructure um do reach out and

411
00:12:25,120 --> 00:12:26,000
this project is

412
00:12:26,000 --> 00:12:29,040
fully open source um so prs and issues

413
00:12:29,040 --> 00:12:30,000
are certainly welcome

414
00:12:30,000 --> 00:12:31,920
and my github link will be at the end

415
00:12:31,920 --> 00:12:33,519
and thank you very much for listening

416
00:12:33,519 --> 00:12:35,360
feel free to reach out i'm always happy

417
00:12:35,360 --> 00:12:36,560
to talk over email

418
00:12:36,560 --> 00:12:38,000
um with people who are interested in

419
00:12:38,000 --> 00:12:39,440
this kind of stuff so feel free to shoot

420
00:12:39,440 --> 00:12:40,480
me an email

421
00:12:40,480 --> 00:12:42,720
um then below is my github which

422
00:12:42,720 --> 00:12:44,320
contains all the code for this project

423
00:12:44,320 --> 00:12:46,800
and the scp utility control plane stuff

424
00:12:46,800 --> 00:12:48,079
everything that was used for this

425
00:12:48,079 --> 00:12:48,560
project

426
00:12:48,560 --> 00:12:50,320
and this opens for github to take a look

427
00:12:50,320 --> 00:12:53,390
at so thank you very much for listening

428
00:12:53,390 --> 00:12:57,720
[Music]

429
00:12:58,079 --> 00:12:59,920
good afternoon good evening good morning

430
00:12:59,920 --> 00:13:01,440
uh thank you nate for that wonderful

431
00:13:01,440 --> 00:13:02,480
presentation

432
00:13:02,480 --> 00:13:04,480
we're gonna go to the q a section of

433
00:13:04,480 --> 00:13:06,320
this presentation

434
00:13:06,320 --> 00:13:08,959
right now i have approximately four

435
00:13:08,959 --> 00:13:09,920
questions

436
00:13:09,920 --> 00:13:12,880
the first one is from michael nate did

437
00:13:12,880 --> 00:13:15,120
you make the controller piece of the cdn

438
00:13:15,120 --> 00:13:18,639
high available if so how

439
00:13:18,639 --> 00:13:21,279
yeah um so in terms of v1 of the code

440
00:13:21,279 --> 00:13:22,639
which is what i presented on here

441
00:13:22,639 --> 00:13:24,240
um the controller is just a single

442
00:13:24,240 --> 00:13:25,839
machine um so it's not

443
00:13:25,839 --> 00:13:28,160
i'm highly available um for the um sort

444
00:13:28,160 --> 00:13:29,440
of control plane rewrite that i've been

445
00:13:29,440 --> 00:13:30,000
working on

446
00:13:30,000 --> 00:13:32,240
um it is going to be um highly available

447
00:13:32,240 --> 00:13:34,639
i'm using a mongodb replica set

448
00:13:34,639 --> 00:13:38,560
and um with fcd for a um sort of

449
00:13:38,560 --> 00:13:41,680
um a distributed configuration database

450
00:13:41,680 --> 00:13:42,880
um which i think should take care of

451
00:13:42,880 --> 00:13:44,959
some of the initial concerns i have

452
00:13:44,959 --> 00:13:46,839
both have availability and the control

453
00:13:46,839 --> 00:13:49,440
plane

454
00:13:49,440 --> 00:13:52,240
excellent we have another question from

455
00:13:52,240 --> 00:13:52,959
matthew

456
00:13:52,959 --> 00:13:56,240
nate how much disc storage did you plan

457
00:13:56,240 --> 00:13:59,600
on the caddy slash varnish boxes

458
00:13:59,600 --> 00:14:02,560
and how do you handle adding space for

459
00:14:02,560 --> 00:14:04,399
additional objects when necessary

460
00:14:04,399 --> 00:14:05,760
without having to

461
00:14:05,760 --> 00:14:09,360
rebuild the entire object cache

462
00:14:09,360 --> 00:14:12,480
yeah so for the object caching those

463
00:14:12,480 --> 00:14:16,560
boxes have anywhere from 200 gig of

464
00:14:16,560 --> 00:14:18,880
storage to a couple terabyte um

465
00:14:18,880 --> 00:14:20,720
they're not really consistent i'm giving

466
00:14:20,720 --> 00:14:21,920
them operating with just whatever i can

467
00:14:21,920 --> 00:14:22,639
find

468
00:14:22,639 --> 00:14:25,360
um so these are um still relatively

469
00:14:25,360 --> 00:14:26,079
small

470
00:14:26,079 --> 00:14:28,800
um in terms of their storage space and

471
00:14:28,800 --> 00:14:30,160
if i didn't need to upgrade i would pull

472
00:14:30,160 --> 00:14:31,279
another rotation

473
00:14:31,279 --> 00:14:32,959
um drain the cache and then have to fill

474
00:14:32,959 --> 00:14:35,518
it back up again

475
00:14:36,800 --> 00:14:38,320
the next one ultimately is not a

476
00:14:38,320 --> 00:14:40,079
question it's just uh

477
00:14:40,079 --> 00:14:43,360
a comment uh version says dave says

478
00:14:43,360 --> 00:14:44,560
impressive i think

479
00:14:44,560 --> 00:14:46,320
in high school i was discovering girls

480
00:14:46,320 --> 00:14:47,920
and performing

481
00:14:47,920 --> 00:14:50,639
a revolution uh hs computers back then

482
00:14:50,639 --> 00:14:52,800
were tty tooling local timeshare

483
00:14:52,800 --> 00:14:53,680
mainframe

484
00:14:53,680 --> 00:14:56,959
ultimately boring michael

485
00:14:56,959 --> 00:14:59,760
uh's question is were you peered to an

486
00:14:59,760 --> 00:15:01,600
isp or an ixp

487
00:15:01,600 --> 00:15:04,720
or was this fully simulated and this is

488
00:15:04,720 --> 00:15:05,279
all

489
00:15:05,279 --> 00:15:07,040
uh real bgp on the internet i'm

490
00:15:07,040 --> 00:15:08,480
appearing both with transit and um

491
00:15:08,480 --> 00:15:09,279
publicly

492
00:15:09,279 --> 00:15:12,079
and at exchanges um the system uh three

493
00:15:12,079 --> 00:15:13,360
four five five three if you wanna check

494
00:15:13,360 --> 00:15:14,880
out my peering db or such

495
00:15:14,880 --> 00:15:17,519
um so yeah it's not a simulation this is

496
00:15:17,519 --> 00:15:18,160
um

497
00:15:18,160 --> 00:15:21,120
a real gdp on the internet can you

498
00:15:21,120 --> 00:15:23,600
repeat that as number again please

499
00:15:23,600 --> 00:15:25,600
sure yeah it's a three four five five

500
00:15:25,600 --> 00:15:27,839
three

501
00:15:28,079 --> 00:15:30,639
it's writing it down for myself uh next

502
00:15:30,639 --> 00:15:31,120
question

503
00:15:31,120 --> 00:15:34,320
is from boris nate do you measure the

504
00:15:34,320 --> 00:15:36,720
latency by ping only

505
00:15:36,720 --> 00:15:38,000
um so there's a few things i mentioned

506
00:15:38,000 --> 00:15:39,680
there in terms of the monitoring setup

507
00:15:39,680 --> 00:15:40,800
with prometheus

508
00:15:40,800 --> 00:15:44,480
and that does do just raw icmp pings um

509
00:15:44,480 --> 00:15:46,399
to the management ips or the endpoints

510
00:15:46,399 --> 00:15:49,120
um that's of course not a realistic test

511
00:15:49,120 --> 00:15:50,560
in terms of what your actual services

512
00:15:50,560 --> 00:15:51,360
will be looking at

513
00:15:51,360 --> 00:15:53,360
so i'm also doing on basic service

514
00:15:53,360 --> 00:15:55,360
daemon health checks so things like

515
00:15:55,360 --> 00:15:56,560
checking in with caddy

516
00:15:56,560 --> 00:15:58,959
i'm timing the um full sort of time the

517
00:15:58,959 --> 00:15:59,680
first bite

518
00:15:59,680 --> 00:16:02,320
um that latency um dns of course um the

519
00:16:02,320 --> 00:16:03,519
entire time of

520
00:16:03,519 --> 00:16:07,199
um from dns requests um dns query to dns

521
00:16:07,199 --> 00:16:08,320
response um

522
00:16:08,320 --> 00:16:09,600
and measuring the latency it takes to

523
00:16:09,600 --> 00:16:12,399
complete the entire um

524
00:16:12,399 --> 00:16:14,320
the entire request um all the way up to

525
00:16:14,320 --> 00:16:15,440
layer seven um

526
00:16:15,440 --> 00:16:18,480
so i'm trying to get some realistic um

527
00:16:18,480 --> 00:16:20,079
latency measurements by i'm going all

528
00:16:20,079 --> 00:16:21,040
the way up to those layer

529
00:16:21,040 --> 00:16:24,880
and demons excellent

530
00:16:24,880 --> 00:16:27,279
the next one is not quite a question

531
00:16:27,279 --> 00:16:28,160
it's uh

532
00:16:28,160 --> 00:16:30,800
more of a comment uh it's from matthew

533
00:16:30,800 --> 00:16:32,480
if you hadn't realized you're doing

534
00:16:32,480 --> 00:16:34,639
a distributed interview at the moment

535
00:16:34,639 --> 00:16:37,040
with companies lying for your future

536
00:16:37,040 --> 00:16:38,880
kudos for catching the level of

537
00:16:38,880 --> 00:16:42,079
attention in high school

538
00:16:42,399 --> 00:16:45,519
we have approximately two minutes

539
00:16:45,519 --> 00:16:47,759
left uh if there's going to be any more

540
00:16:47,759 --> 00:16:51,839
questions please send them now

541
00:16:52,079 --> 00:16:53,920
in the meantime i'm just going to talk

542
00:16:53,920 --> 00:16:55,519
about a little bit of housekeeping

543
00:16:55,519 --> 00:16:57,440
as i had said before please fill out

544
00:16:57,440 --> 00:17:00,160
your surveys

545
00:17:00,320 --> 00:17:03,680
we value every single survey that comes

546
00:17:03,680 --> 00:17:05,760
in it gets read we go over it

547
00:17:05,760 --> 00:17:08,240
and we talk about it and provide

548
00:17:08,240 --> 00:17:10,480
feedback to that

549
00:17:10,480 --> 00:17:12,400
the winners of the survey could win a

550
00:17:12,400 --> 00:17:14,240
hundred dollar gift card so

551
00:17:14,240 --> 00:17:17,199
please get your surveys in by visiting

552
00:17:17,199 --> 00:17:19,119
dot org slash

553
00:17:19,119 --> 00:17:22,319
surveys you want to be internet famous

554
00:17:22,319 --> 00:17:24,400
we are looking for presentation

555
00:17:24,400 --> 00:17:30,000
proposals for nanog82 visit nano.org

556
00:17:30,840 --> 00:17:32,640
presentations

557
00:17:32,640 --> 00:17:34,320
trivia games are fun especially if

558
00:17:34,320 --> 00:17:35,760
you've been paying attention

559
00:17:35,760 --> 00:17:37,760
trivia will be held right after this

560
00:17:37,760 --> 00:17:38,960
presentation

561
00:17:38,960 --> 00:17:41,760
um which is the first break and sponsors

562
00:17:41,760 --> 00:17:43,520
will be giving out some awesome prizes

563
00:17:43,520 --> 00:17:47,840
to winners

564
00:17:52,480 --> 00:17:55,200
i got one more question here how did you

565
00:17:55,200 --> 00:17:56,480
get involved with nanog

566
00:17:56,480 --> 00:18:00,400
and what pushed you to do a talk

567
00:18:00,400 --> 00:18:01,919
yeah um so i've learned about niagara

568
00:18:01,919 --> 00:18:04,240
for a while um during this sort of

569
00:18:04,240 --> 00:18:06,880
um covered quarantine time um i've

570
00:18:06,880 --> 00:18:08,400
enjoyed uh watching a bunch of past

571
00:18:08,400 --> 00:18:09,679
snailing presentations so i think that

572
00:18:09,679 --> 00:18:11,120
was my big motivation was

573
00:18:11,120 --> 00:18:12,160
i'm seeing some of the really cool

574
00:18:12,160 --> 00:18:14,000
things people are working on and then

575
00:18:14,000 --> 00:18:15,200
getting some experience

576
00:18:15,200 --> 00:18:17,919
in sort of predicting my own work um

577
00:18:17,919 --> 00:18:18,960
this is the first time i've done

578
00:18:18,960 --> 00:18:20,080
something like this and i just really

579
00:18:20,080 --> 00:18:21,520
wanted to

580
00:18:21,520 --> 00:18:23,360
try something new and get myself out

581
00:18:23,360 --> 00:18:25,520
there

582
00:18:25,919 --> 00:18:29,440
excellent and adam

583
00:18:29,440 --> 00:18:31,360
has another question how many nodes do

584
00:18:31,360 --> 00:18:33,600
you have in your cdn

585
00:18:33,600 --> 00:18:37,440
currently um the node counts about

586
00:18:37,440 --> 00:18:41,440
40 41 i believe anything from

587
00:18:41,440 --> 00:18:44,640
a single vm with like one bgp session

588
00:18:44,640 --> 00:18:47,200
um to multiple servers um like i talked

589
00:18:47,200 --> 00:18:48,000
about

590
00:18:48,000 --> 00:18:51,520
both ecmp um so that pops range in size

591
00:18:51,520 --> 00:18:52,880
but you have about a 40 nodes at the

592
00:18:52,880 --> 00:18:54,880
moment

593
00:18:54,880 --> 00:18:58,160
last question uh awesome

594
00:18:58,160 --> 00:19:00,240
you have given so much thought to using

595
00:19:00,240 --> 00:19:02,960
anycast for the front end of the cdn

596
00:19:02,960 --> 00:19:05,120
are you doing anything to improve past

597
00:19:05,120 --> 00:19:07,360
selection and reliability between your

598
00:19:07,360 --> 00:19:08,400
cdn

599
00:19:08,400 --> 00:19:11,280
nodes and content origin origin

600
00:19:11,280 --> 00:19:13,440
infrastructure

601
00:19:13,440 --> 00:19:15,039
yeah um so currently um the

602
00:19:15,039 --> 00:19:16,559
communication between

603
00:19:16,559 --> 00:19:18,799
um the servers actually serving like the

604
00:19:18,799 --> 00:19:19,919
origin content

605
00:19:19,919 --> 00:19:22,640
goes not through any cast that's just um

606
00:19:22,640 --> 00:19:24,160
direct a unicast via

607
00:19:24,160 --> 00:19:26,240
a unique ips for each node um for

608
00:19:26,240 --> 00:19:27,360
example in

609
00:19:27,360 --> 00:19:30,480
the varnish caching cluster um each of

610
00:19:30,480 --> 00:19:30,960
the

611
00:19:30,960 --> 00:19:32,799
node is going to have a unique unicast

612
00:19:32,799 --> 00:19:34,320
ip um which sort of

613
00:19:34,320 --> 00:19:37,039
helps with simplicity in things like tcp

614
00:19:37,039 --> 00:19:39,600
retries um so i'm going to hold that tcp

615
00:19:39,600 --> 00:19:41,039
um connection open for as long as

616
00:19:41,039 --> 00:19:43,679
possible um hold the origin

617
00:19:43,679 --> 00:19:44,960
um which this of course doesn't work

618
00:19:44,960 --> 00:19:46,640
great with some of the previous versions

619
00:19:46,640 --> 00:19:47,679
of http

620
00:19:47,679 --> 00:19:49,840
with things like http 2 and we can open

621
00:19:49,840 --> 00:19:51,679
tcp connection keep that stream open and

622
00:19:51,679 --> 00:19:52,000
just

623
00:19:52,000 --> 00:19:54,960
force traffic down it which of course it

624
00:19:54,960 --> 00:19:55,760
helps with some of that

625
00:19:55,760 --> 00:19:59,039
the initial tcp um connection latency um

626
00:19:59,039 --> 00:20:01,600
so yeah it's unicast in the back end for

627
00:20:01,600 --> 00:20:04,719
communicating with the origin

628
00:20:04,799 --> 00:20:07,200
excellent nate uh thank you for your

629
00:20:07,200 --> 00:20:09,120
presentation nanak thanks you for

630
00:20:09,120 --> 00:20:19,760
your proposal and presentation

