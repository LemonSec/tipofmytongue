1
00:00:06,910 --> 00:00:11,150
so next up we have a<font color="#CCCCCC"> NYX lab coat from</font>

2
00:00:10,309 --> 00:00:13,759
juniper

3
00:00:11,150 --> 00:00:16,450
source routing<font color="#E5E5E5"> two point oh why now why</font>

4
00:00:13,759 --> 00:00:16,450
again

5
00:00:29,660 --> 00:00:37,110
good morning everybody so we start with

6
00:00:35,070 --> 00:00:42,120
<font color="#E5E5E5">a question how many made</font><font color="#CCCCCC"> it yesterday to</font>

7
00:00:37,110 --> 00:00:46,559
the<font color="#E5E5E5"> Facebook netops coding tutorial yay</font>

8
00:00:42,120 --> 00:00:49,860
<font color="#E5E5E5">Wow seems like most people I enjoyed it</font>

9
00:00:46,559 --> 00:00:52,559
a lot too what a great job by Facebook

10
00:00:49,860 --> 00:00:55,019
to tell us about their f bar system that

11
00:00:52,559 --> 00:00:56,578
allows<font color="#CCCCCC"> them to pretty much render their</font>

12
00:00:55,019 --> 00:00:59,699
network without a knock I think they

13
00:00:56,579 --> 00:01:02,519
said like one<font color="#E5E5E5"> guys on call what an</font>

14
00:00:59,699 --> 00:01:06,990
awesome job by David<font color="#CCCCCC"> Swofford for</font>

15
00:01:02,519 --> 00:01:09,630
keeping about 500 LS on track for three

16
00:01:06,990 --> 00:01:12,449
hours writing<font color="#E5E5E5"> Python code at</font><font color="#CCCCCC"> the end</font>

17
00:01:09,630 --> 00:01:14,759
even<font color="#CCCCCC"> I wrote something and now I</font><font color="#E5E5E5"> get to</font>

18
00:01:12,450 --> 00:01:19,920
wear a t-shirt with with some piping

19
00:01:14,759 --> 00:01:23,729
stuff on it so seriously though what

20
00:01:19,920 --> 00:01:25,530
Facebook did is they took a fairly old

21
00:01:23,729 --> 00:01:29,329
technology I<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> look it up last</font>

22
00:01:25,530 --> 00:01:32,189
<font color="#E5E5E5">night</font><font color="#CCCCCC"> Python has</font><font color="#E5E5E5"> been around since 1989</font>

23
00:01:29,329 --> 00:01:35,699
I think that's the the year when the

24
00:01:32,189 --> 00:01:38,369
<font color="#E5E5E5">Berlin Wall fell so they've taken a</font>

25
00:01:35,700 --> 00:01:42,420
fairly old technology they've added some

26
00:01:38,370 --> 00:01:44,760
<font color="#CCCCCC">new insights to it some pixie dust shall</font>

27
00:01:42,420 --> 00:01:48,479
we say and have developed something

28
00:01:44,760 --> 00:01:53,850
that's<font color="#E5E5E5"> pretty cutting edge I'll say the</font>

29
00:01:48,479 --> 00:01:58,350
<font color="#CCCCCC">n vehicle of meaning so I looked at the</font>

30
00:01:53,850 --> 00:02:00,630
age of of Python then I thought few

31
00:01:58,350 --> 00:02:03,289
technologies out there are as all this

32
00:02:00,630 --> 00:02:06,470
Python and source routing is one of them

33
00:02:03,290 --> 00:02:10,289
so we'll talk about source routing today

34
00:02:06,470 --> 00:02:12,510
again from a perspective of some new

35
00:02:10,288 --> 00:02:16,579
ideas some new insights that people have

36
00:02:12,510 --> 00:02:22,649
added to it in order to do cool<font color="#E5E5E5"> things</font>

37
00:02:16,580 --> 00:02:23,670
and where we're going to do that is<font color="#E5E5E5"> I'm</font>

38
00:02:22,650 --> 00:02:25,230
going<font color="#E5E5E5"> to go through a little bit of</font>

39
00:02:23,670 --> 00:02:27,780
history of source routing level<font color="#E5E5E5"> said</font>

40
00:02:25,230 --> 00:02:29,670
<font color="#E5E5E5">everybody on what that is but the real</font>

41
00:02:27,780 --> 00:02:32,640
reason<font color="#E5E5E5"> for talking about source routing</font>

42
00:02:29,670 --> 00:02:34,890
today is the resurgence of or the

43
00:02:32,640 --> 00:02:38,879
emergence<font color="#E5E5E5"> of this segment routing</font>

44
00:02:34,890 --> 00:02:40,738
technology which uses the concepts of

45
00:02:38,879 --> 00:02:42,388
source routing so this<font color="#E5E5E5"> is not going to</font>

46
00:02:40,739 --> 00:02:42,810
be a segment routing tutorial by all

47
00:02:42,389 --> 00:02:45,780
means

48
00:02:42,810 --> 00:02:47,790
there are better ones out<font color="#E5E5E5"> there all I'm</font>

49
00:02:45,780 --> 00:02:50,970
going to do is just<font color="#E5E5E5"> kind of mention a</font>

50
00:02:47,790 --> 00:02:52,799
few major concepts just so<font color="#E5E5E5"> that we all</font>

51
00:02:50,970 --> 00:02:56,660
understand the insights that came out<font color="#CCCCCC"> of</font>

52
00:02:52,800 --> 00:02:59,160
it and got implemented by some people

53
00:02:56,660 --> 00:03:01,730
<font color="#CCCCCC">calling spring inspirations by the way</font>

54
00:02:59,160 --> 00:03:04,880
so first a little<font color="#E5E5E5"> bit of a level set</font>

55
00:03:01,730 --> 00:03:08,459
<font color="#E5E5E5">I'll use these three terms fairly</font>

56
00:03:04,880 --> 00:03:10,349
extensively in this talk source routing

57
00:03:08,459 --> 00:03:15,150
is a very generic<font color="#CCCCCC"> tremens been there</font>

58
00:03:10,349 --> 00:03:16,920
forever<font color="#E5E5E5"> and it basically covers all</font>

59
00:03:15,150 --> 00:03:20,370
these technologies that allow you<font color="#E5E5E5"> to put</font>

60
00:03:16,920 --> 00:03:21,780
a prescriptive header in the packet and

61
00:03:20,370 --> 00:03:24,630
send that packet in the network and

62
00:03:21,780 --> 00:03:27,319
every router acts on that prescriptive

63
00:03:24,630 --> 00:03:29,989
header with regard to its forwarding

64
00:03:27,319 --> 00:03:32,429
<font color="#CCCCCC">segment routing on the other hand is a</font>

65
00:03:29,989 --> 00:03:34,830
specific incarnation of source routing

66
00:03:32,430 --> 00:03:38,849
<font color="#CCCCCC">it's kind of</font><font color="#E5E5E5"> the technology de jour</font>

67
00:03:34,830 --> 00:03:43,769
shall we say it kind of does the<font color="#E5E5E5"> same</font>

68
00:03:38,849 --> 00:03:46,768
thing in a particular way spring is the

69
00:03:43,769 --> 00:03:49,680
<font color="#E5E5E5">simply the name of the ITF group charter</font>

70
00:03:46,769 --> 00:03:54,060
with standardizing these source routing

71
00:03:49,680 --> 00:03:56,489
technologies<font color="#E5E5E5"> I will use the spring term</font>

72
00:03:54,060 --> 00:03:58,019
and the seminar during term pretty sort

73
00:03:56,489 --> 00:04:00,569
of interchangeably in this presentation

74
00:03:58,019 --> 00:04:05,010
and most people<font color="#E5E5E5"> do that anyway and it's</font>

75
00:04:00,569 --> 00:04:06,390
okay so the<font color="#E5E5E5"> main</font><font color="#CCCCCC"> idea in back to source</font>

76
00:04:05,010 --> 00:04:09,959
routing the kind<font color="#E5E5E5"> of the generic thing</font>

77
00:04:06,390 --> 00:04:12,298
the main<font color="#E5E5E5"> idea there</font><font color="#CCCCCC"> is let's prescribe</font>

78
00:04:09,959 --> 00:04:15,269
the path<font color="#E5E5E5"> of the packet in</font><font color="#CCCCCC"> the header of</font>

79
00:04:12,299 --> 00:04:17,940
<font color="#E5E5E5">the packet itself and then launch that</font>

80
00:04:15,269 --> 00:04:21,329
packet into the network<font color="#E5E5E5"> and each router</font>

81
00:04:17,940 --> 00:04:23,539
acts on that header and and that header

82
00:04:21,329 --> 00:04:26,160
tells them how to forward that packet a

83
00:04:23,539 --> 00:04:28,110
nice side<font color="#CCCCCC"> effect of that is that you get</font>

84
00:04:26,160 --> 00:04:31,320
<font color="#E5E5E5">to avoid loops and loops in</font><font color="#CCCCCC"> the network</font>

85
00:04:28,110 --> 00:04:33,810
quite easily by just describing where

86
00:04:31,320 --> 00:04:36,630
packets go and eliminating the<font color="#E5E5E5"> hub by</font>

87
00:04:33,810 --> 00:04:38,340
<font color="#E5E5E5">hub decision from routers another nice</font>

88
00:04:36,630 --> 00:04:39,990
side effect is<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> get to reduce</font>

89
00:04:38,340 --> 00:04:44,700
the forwarding state in the network

90
00:04:39,990 --> 00:04:46,770
which is always a good thing a few

91
00:04:44,700 --> 00:04:49,169
historical examples if you guys come

92
00:04:46,770 --> 00:04:50,909
<font color="#E5E5E5">from you</font><font color="#CCCCCC"> know high-performance computer</font>

93
00:04:49,169 --> 00:04:53,719
<font color="#E5E5E5">environment there's all these exotic</font>

94
00:04:50,909 --> 00:04:57,289
interconnects their space wire

95
00:04:53,720 --> 00:05:00,380
<font color="#CCCCCC">at they'll use source routing technology</font>

96
00:04:57,290 --> 00:05:02,630
in their forwarding those of you that

97
00:05:00,380 --> 00:05:05,150
are of certain age will probably

98
00:05:02,630 --> 00:05:07,550
remember token ring and<font color="#CCCCCC"> appn and all</font>

99
00:05:05,150 --> 00:05:12,020
these other technologies that also use

100
00:05:07,550 --> 00:05:13,700
source routing in their core but for

101
00:05:12,020 --> 00:05:17,150
most of you source routing probably

102
00:05:13,700 --> 00:05:19,789
means putting source router subscribe

103
00:05:17,150 --> 00:05:25,120
with headers in the IP packet and v4 and

104
00:05:19,790 --> 00:05:27,770
v6 both have definitions for that

105
00:05:25,120 --> 00:05:31,460
unfortunately all<font color="#CCCCCC"> of those definitions</font>

106
00:05:27,770 --> 00:05:35,030
have<font color="#E5E5E5"> been you know kind of deprecated</font>

107
00:05:31,460 --> 00:05:36,320
that simply didn't<font color="#CCCCCC"> work out and you</font>

108
00:05:35,030 --> 00:05:39,530
would<font color="#CCCCCC"> think that v6 will get it right</font>

109
00:05:36,320 --> 00:05:43,370
<font color="#E5E5E5">but it really didn't leading to you know</font>

110
00:05:39,530 --> 00:05:47,359
RFC 5095 pretty much banning routing

111
00:05:43,370 --> 00:05:49,460
headers from the packets tunneling on

112
00:05:47,360 --> 00:05:51,410
the other hand if you're on the in a

113
00:05:49,460 --> 00:05:54,169
service provider edge and if you<font color="#E5E5E5"> take a</font>

114
00:05:51,410 --> 00:05:56,530
packet and put it in a tunnel and then

115
00:05:54,169 --> 00:05:59,510
source throughout that tunnel packet

116
00:05:56,530 --> 00:06:01,729
that tends to be<font color="#E5E5E5"> treated with better</font>

117
00:05:59,510 --> 00:06:04,640
respect and consider more secure in fact

118
00:06:01,730 --> 00:06:06,890
<font color="#E5E5E5">all</font><font color="#CCCCCC"> of these mpls networks today that's</font>

119
00:06:04,640 --> 00:06:11,030
what they do you know if you're familiar

120
00:06:06,890 --> 00:06:12,800
with RSVP it uses<font color="#CCCCCC"> ER OS and euros and</font>

121
00:06:11,030 --> 00:06:16,719
<font color="#CCCCCC">northing nothing more than source routed</font>

122
00:06:12,800 --> 00:06:16,720
you know statements

123
00:06:19,630 --> 00:06:25,659
so why now are we talking about source

124
00:06:22,750 --> 00:06:29,200
routing again it<font color="#E5E5E5"> is because of the</font>

125
00:06:25,660 --> 00:06:33,610
industry interest in spring or seven

126
00:06:29,200 --> 00:06:35,890
routing technology again the key in

127
00:06:33,610 --> 00:06:38,170
spring is to tunnel packets from the

128
00:06:35,890 --> 00:06:41,890
source to the destination by describing

129
00:06:38,170 --> 00:06:44,560
the path of the packet in a header with

130
00:06:41,890 --> 00:06:49,150
a sequence of segments what that's what

131
00:06:44,560 --> 00:06:51,100
what<font color="#CCCCCC"> segment routing is calling it and</font>

132
00:06:49,150 --> 00:06:53,440
there's certain good flexibility there

133
00:06:51,100 --> 00:06:55,180
you can describe more or less in the

134
00:06:53,440 --> 00:06:56,950
<font color="#E5E5E5">header depending on</font><font color="#CCCCCC"> how much you care</font>

135
00:06:55,180 --> 00:07:00,490
<font color="#E5E5E5">about the specific path the packet needs</font>

136
00:06:56,950 --> 00:07:02,530
<font color="#CCCCCC">take the other reason why this new</font>

137
00:07:00,490 --> 00:07:05,920
interest in source routing is has come

138
00:07:02,530 --> 00:07:09,940
<font color="#E5E5E5">around is the resurgence of the interest</font>

139
00:07:05,920 --> 00:07:12,340
in centralized controllers and they are

140
00:07:09,940 --> 00:07:15,280
not<font color="#E5E5E5"> a not a new idea by themselves but</font>

141
00:07:12,340 --> 00:07:19,260
<font color="#CCCCCC">with all the interest in SDM of course</font>

142
00:07:15,280 --> 00:07:21,789
every Sdn has one of these so or more

143
00:07:19,260 --> 00:07:25,300
their job is generally to do path

144
00:07:21,790 --> 00:07:27,460
calculation and also<font color="#CCCCCC"> paths in position</font>

145
00:07:25,300 --> 00:07:29,760
at the ingress of the traffic<font color="#E5E5E5"> and the</font>

146
00:07:27,460 --> 00:07:32,530
<font color="#CCCCCC">ingress could be</font><font color="#E5E5E5"> their host or a router</font>

147
00:07:29,760 --> 00:07:35,380
but the kind<font color="#E5E5E5"> of the confluence of those</font>

148
00:07:32,530 --> 00:07:38,619
two factors has started<font color="#CCCCCC"> people thinking</font>

149
00:07:35,380 --> 00:07:42,190
again about hey what can I do with

150
00:07:38,620 --> 00:07:44,320
source routing these days so I'll go

151
00:07:42,190 --> 00:07:47,370
through a few slides only again just a

152
00:07:44,320 --> 00:07:49,480
couple of concepts around spring nothing

153
00:07:47,370 --> 00:07:54,010
inclusive really there's there's much

154
00:07:49,480 --> 00:07:56,020
more extensive tutorials out there there

155
00:07:54,010 --> 00:07:58,930
<font color="#CCCCCC">are two main concepts around spring one</font>

156
00:07:56,020 --> 00:08:02,440
is or segment routing one is that every

157
00:07:58,930 --> 00:08:05,110
router is going to assign a label to all

158
00:08:02,440 --> 00:08:07,510
of its interfaces as a matter of fact to

159
00:08:05,110 --> 00:08:09,610
sloop loopback<font color="#CCCCCC"> address as well</font><font color="#E5E5E5"> and it's</font>

160
00:08:07,510 --> 00:08:13,450
going to flood these<font color="#E5E5E5"> labels into the</font><font color="#CCCCCC"> igp</font>

161
00:08:09,610 --> 00:08:18,160
and with<font color="#E5E5E5"> that knowledge every router now</font>

162
00:08:13,450 --> 00:08:20,289
can craft the packet by<font color="#E5E5E5"> creating a label</font>

163
00:08:18,160 --> 00:08:22,390
stack and putting<font color="#CCCCCC"> on top of that packet</font>

164
00:08:20,290 --> 00:08:24,730
and that label stack pretty much

165
00:08:22,390 --> 00:08:27,130
describes the sequence of links in the

166
00:08:24,730 --> 00:08:30,250
network of how that<font color="#E5E5E5"> package should be</font>

167
00:08:27,130 --> 00:08:33,510
forwarded so that's pretty clear pretty

168
00:08:30,250 --> 00:08:36,190
sort of conceptually nice

169
00:08:33,510 --> 00:08:39,580
spring defines two major types of

170
00:08:36,190 --> 00:08:42,340
segments or labels the first one is this

171
00:08:39,580 --> 00:08:44,920
adjacency level and it's it's again

172
00:08:42,340 --> 00:08:47,560
<font color="#E5E5E5">pretty simple concept every every router</font>

173
00:08:44,920 --> 00:08:50,260
assigns a label to each of its

174
00:08:47,560 --> 00:08:52,810
adjacencies or<font color="#CCCCCC"> its it its</font><font color="#E5E5E5"> neighbors</font>

175
00:08:50,260 --> 00:08:54,220
basically and the interest the

176
00:08:52,810 --> 00:08:59,800
interesting labels here I have them in

177
00:08:54,220 --> 00:09:03,070
red so if a paper router say r1 wanted

178
00:08:59,800 --> 00:09:06,250
to send the packet to r5 all it needs to

179
00:09:03,070 --> 00:09:08,950
do is craft a header for that packet

180
00:09:06,250 --> 00:09:11,200
that kind of looks like this<font color="#E5E5E5"> with label</font>

181
00:09:08,950 --> 00:09:14,770
<font color="#E5E5E5">two or three on top and that label two</font>

182
00:09:11,200 --> 00:09:17,050
or three was announced by the next hop

183
00:09:14,770 --> 00:09:19,689
router router to and that label meant

184
00:09:17,050 --> 00:09:21,279
hey if I get<font color="#E5E5E5"> a packet with that label</font>

185
00:09:19,690 --> 00:09:22,510
I'm going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> forward it I'm going to pop</font>

186
00:09:21,279 --> 00:09:26,050
it first and then<font color="#E5E5E5"> I'm going to forward</font>

187
00:09:22,510 --> 00:09:28,510
it to router three and then router three

188
00:09:26,050 --> 00:09:31,630
is going to receive a top label of 307

189
00:09:28,510 --> 00:09:33,810
and do the same thing our server is

190
00:09:31,630 --> 00:09:36,550
<font color="#CCCCCC">going to do</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> same thing until the</font>

191
00:09:33,810 --> 00:09:39,520
packet header dwindles and the payload

192
00:09:36,550 --> 00:09:43,120
of that packet ends up in router five so

193
00:09:39,520 --> 00:09:46,390
<font color="#E5E5E5">we just source routed that packet couple</font>

194
00:09:43,120 --> 00:09:48,640
of observations around this the certain

195
00:09:46,390 --> 00:09:50,319
goodness that comes with this kind of

196
00:09:48,640 --> 00:09:53,170
source routing the packet you're

197
00:09:50,320 --> 00:09:55,860
reducing the state in<font color="#E5E5E5"> the network you no</font>

198
00:09:53,170 --> 00:09:58,540
longer<font color="#CCCCCC"> have to have end-to-end LSPs</font>

199
00:09:55,860 --> 00:10:00,460
instead each ingress can simply describe

200
00:09:58,540 --> 00:10:03,099
the path that<font color="#CCCCCC"> I'm that one wants</font><font color="#E5E5E5"> to take</font>

201
00:10:00,460 --> 00:10:07,540
and doesn't have to actually refer to an

202
00:10:03,100 --> 00:10:12,910
LSP for that path then again<font color="#CCCCCC"> if you are</font>

203
00:10:07,540 --> 00:10:14,740
relying on things that rely on / LSP

204
00:10:12,910 --> 00:10:17,610
state and networks such as bandwidth

205
00:10:14,740 --> 00:10:20,110
accounting such as traffic engineering

206
00:10:17,610 --> 00:10:22,350
you may lose some functionality if you

207
00:10:20,110 --> 00:10:24,670
just do<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this type of forwarding</font>

208
00:10:22,350 --> 00:10:26,500
there observe the other observation<font color="#E5E5E5"> I</font>

209
00:10:24,670 --> 00:10:30,029
have is<font color="#CCCCCC"> that it's a trivial method of</font>

210
00:10:26,500 --> 00:10:32,589
forwarding in a way that you<font color="#CCCCCC"> need to</font>

211
00:10:30,029 --> 00:10:34,150
expend quite a few labels in the packet

212
00:10:32,589 --> 00:10:37,209
in order to describe the path of the

213
00:10:34,150 --> 00:10:40,959
packet so that doesn't<font color="#CCCCCC"> come for free</font>

214
00:10:37,209 --> 00:10:42,160
either on merchant silicon or custom

215
00:10:40,959 --> 00:10:44,170
silicon you know there's some costs

216
00:10:42,160 --> 00:10:46,640
associated with<font color="#CCCCCC"> pushing these kinds of</font>

217
00:10:44,170 --> 00:10:49,020
deep labels tab

218
00:10:46,640 --> 00:10:51,930
and the third thing is that you<font color="#E5E5E5"> almost</font>

219
00:10:49,020 --> 00:10:55,800
never really care to describe the packet

220
00:10:51,930 --> 00:11:00,209
with this<font color="#E5E5E5"> level of specificity so enter</font>

221
00:10:55,800 --> 00:11:04,380
node<font color="#E5E5E5"> segment or node Sid or node label</font>

222
00:11:00,210 --> 00:11:07,490
all the<font color="#E5E5E5"> same thing pretty fundamental</font>

223
00:11:04,380 --> 00:11:13,130
and quite powerful concept in<font color="#E5E5E5"> spring</font>

224
00:11:07,490 --> 00:11:15,290
which calls for each router announcing

225
00:11:13,130 --> 00:11:18,030
itself let's say the loopback address

226
00:11:15,290 --> 00:11:19,980
it's it's<font color="#CCCCCC"> on loopback address with a</font>

227
00:11:18,030 --> 00:11:22,130
label<font color="#CCCCCC"> that is globally known to</font>

228
00:11:19,980 --> 00:11:25,740
everybody in<font color="#CCCCCC"> the segment routing domain</font>

229
00:11:22,130 --> 00:11:29,220
this is<font color="#E5E5E5"> very cool because everybody now</font>

230
00:11:25,740 --> 00:11:33,660
should use label 107 in order to send

231
00:11:29,220 --> 00:11:36,570
packets to<font color="#E5E5E5"> Robert 7 it's cool because I</font>

232
00:11:33,660 --> 00:11:38,670
know what<font color="#CCCCCC"> that label is and that's</font>

233
00:11:36,570 --> 00:11:41,340
useful for troubleshooting if I want<font color="#E5E5E5"> to</font>

234
00:11:38,670 --> 00:11:43,110
integrate a controller or whatever now

235
00:11:41,340 --> 00:11:45,210
there's the only problem with that is it

236
00:11:43,110 --> 00:11:50,610
breaks interoperability and it breaks it

237
00:11:45,210 --> 00:11:55,860
in at least two major ways so one of

238
00:11:50,610 --> 00:11:57,570
them is<font color="#CCCCCC"> that if some router from this</font>

239
00:11:55,860 --> 00:12:01,470
network was actually connected to

240
00:11:57,570 --> 00:12:04,320
another you know labeled domain say RSVP

241
00:12:01,470 --> 00:12:07,410
or LDP it may have already allocated

242
00:12:04,320 --> 00:12:09,270
that label<font color="#CCCCCC"> 107 for that protocol for</font>

243
00:12:07,410 --> 00:12:11,490
that other protocol so it may not<font color="#E5E5E5"> be</font>

244
00:12:09,270 --> 00:12:15,750
<font color="#E5E5E5">able to comply with the demand here to</font>

245
00:12:11,490 --> 00:12:18,930
use label 107 to reach router<font color="#CCCCCC"> 7 so that</font>

246
00:12:15,750 --> 00:12:20,880
<font color="#E5E5E5">would break the</font><font color="#CCCCCC"> other thing is that</font><font color="#E5E5E5"> it's</font>

247
00:12:18,930 --> 00:12:23,280
it breaks interoperability between

248
00:12:20,880 --> 00:12:26,370
vendors because if this was a

249
00:12:23,280 --> 00:12:28,920
multi-vendor network you would need<font color="#CCCCCC"> to</font>

250
00:12:26,370 --> 00:12:32,700
get all the vendors to agree<font color="#CCCCCC"> that label</font>

251
00:12:28,920 --> 00:12:35,520
107 is dedicated for this purpose well

252
00:12:32,700 --> 00:12:37,110
someone some some labels managers may

253
00:12:35,520 --> 00:12:40,829
have chosen to<font color="#E5E5E5"> already allocate</font><font color="#CCCCCC"> that</font>

254
00:12:37,110 --> 00:12:43,050
label to some<font color="#E5E5E5"> other purpose so you can't</font>

255
00:12:40,830 --> 00:12:45,930
assume these things you know if you

256
00:12:43,050 --> 00:12:47,969
wanted to achieve interoperability so

257
00:12:45,930 --> 00:12:49,739
time<font color="#E5E5E5"> doesn't permit me to actually go</font>

258
00:12:47,970 --> 00:12:51,600
through the workaround<font color="#E5E5E5"> and the solution</font>

259
00:12:49,740 --> 00:12:53,310
<font color="#E5E5E5">for this problem I do have a backup</font>

260
00:12:51,600 --> 00:12:55,110
slide at the end of<font color="#E5E5E5"> this deck that you</font>

261
00:12:53,310 --> 00:12:57,660
can kind of walk through<font color="#E5E5E5"> and it</font>

262
00:12:55,110 --> 00:12:59,970
describes how spring solves this

263
00:12:57,660 --> 00:13:02,550
this<font color="#E5E5E5"> problem in</font><font color="#CCCCCC"> terms of implementation</font>

264
00:12:59,970 --> 00:13:06,030
but the concept is there still that you

265
00:13:02,550 --> 00:13:10,189
have a globally unique address that<font color="#CCCCCC"> you</font>

266
00:13:06,030 --> 00:13:10,189
can use for your for your<font color="#E5E5E5"> destinations</font>

267
00:13:11,090 --> 00:13:16,140
last thing<font color="#E5E5E5"> I want to mention is</font><font color="#CCCCCC"> the</font>

268
00:13:13,350 --> 00:13:20,070
spring has the notion of a label stack

269
00:13:16,140 --> 00:13:22,170
compression and that's basically the

270
00:13:20,070 --> 00:13:23,880
combined use of adjacency labels and

271
00:13:22,170 --> 00:13:26,189
<font color="#E5E5E5">note labels in order to achieve</font>

272
00:13:23,880 --> 00:13:29,850
reduction in that overall size of<font color="#E5E5E5"> the</font>

273
00:13:26,190 --> 00:13:33,690
label stack again we kind of<font color="#CCCCCC"> established</font>

274
00:13:29,850 --> 00:13:36,900
that that<font color="#CCCCCC"> was a good thing</font><font color="#E5E5E5"> so by the top</font>

275
00:13:33,690 --> 00:13:39,180
example shows you simply using<font color="#E5E5E5"> adjacency</font>

276
00:13:36,900 --> 00:13:41,630
labels and you're going<font color="#E5E5E5"> to need for</font>

277
00:13:39,180 --> 00:13:44,400
labels in that stack and then if you

278
00:13:41,630 --> 00:13:47,370
combine<font color="#CCCCCC"> it with an old label in the</font>

279
00:13:44,400 --> 00:13:54,199
bottom example you can reduce the label

280
00:13:47,370 --> 00:13:56,570
stack size by at least one late<font color="#E5E5E5"> okay of</font>

281
00:13:54,200 --> 00:13:59,910
seriously last thing on<font color="#E5E5E5"> segment routing</font>

282
00:13:56,570 --> 00:14:02,760
you this is just<font color="#E5E5E5"> mostly for for</font>

283
00:13:59,910 --> 00:14:04,469
completeness you will probably encounter

284
00:14:02,760 --> 00:14:07,830
a bunch<font color="#E5E5E5"> of other segment types which</font>

285
00:14:04,470 --> 00:14:09,720
fundamentally are really similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

286
00:14:07,830 --> 00:14:12,450
first two<font color="#E5E5E5"> that I mentioned</font><font color="#CCCCCC"> the adjacency</font>

287
00:14:09,720 --> 00:14:15,870
<font color="#E5E5E5">and node but they're used</font><font color="#CCCCCC"> for different</font>

288
00:14:12,450 --> 00:14:17,850
use cases so there's peer<font color="#CCCCCC"> not peer</font>

289
00:14:15,870 --> 00:14:20,130
<font color="#E5E5E5">Jason's you know that you also probably</font>

290
00:14:17,850 --> 00:14:22,110
discover discussion about mapping

291
00:14:20,130 --> 00:14:24,990
servers which help in achieving

292
00:14:22,110 --> 00:14:27,740
interoperability with<font color="#CCCCCC"> ldp you'll also</font>

293
00:14:24,990 --> 00:14:31,170
probably discover discussion about<font color="#CCCCCC"> Sid</font>

294
00:14:27,740 --> 00:14:33,540
tlv mapping which is helpful<font color="#CCCCCC"> for</font>

295
00:14:31,170 --> 00:14:35,729
achieving interoperability with RSVP and

296
00:14:33,540 --> 00:14:38,910
lastly you'll probably discover a

297
00:14:35,730 --> 00:14:42,750
discussion<font color="#E5E5E5"> about incorporating segment</font>

298
00:14:38,910 --> 00:14:44,790
routing into<font color="#CCCCCC"> BGP which is the sort of</font>

299
00:14:42,750 --> 00:14:51,330
the de facto protocol for most large

300
00:14:44,790 --> 00:14:54,030
data centers<font color="#CCCCCC"> okay getting to the main</font>

301
00:14:51,330 --> 00:14:57,570
kind of the main points that I'm trying

302
00:14:54,030 --> 00:14:59,760
<font color="#E5E5E5">to make here first the the main the two</font>

303
00:14:57,570 --> 00:15:02,160
main insights that come out<font color="#CCCCCC"> of this</font>

304
00:14:59,760 --> 00:15:03,540
whole spring discussion that I wanted<font color="#E5E5E5"> to</font>

305
00:15:02,160 --> 00:15:06,540
bring<font color="#CCCCCC"> out where</font>

306
00:15:03,540 --> 00:15:08,160
<font color="#CCCCCC">where this there's certain goodness in</font>

307
00:15:06,540 --> 00:15:11,849
having predictable label values

308
00:15:08,160 --> 00:15:14,339
especially for<font color="#E5E5E5"> your destinations well</font>

309
00:15:11,850 --> 00:15:16,079
that's what the destination IP does is

310
00:15:14,339 --> 00:15:19,050
how the predictable label value except

311
00:15:16,079 --> 00:15:21,209
if we're tunneling the packet there's

312
00:15:19,050 --> 00:15:23,729
also value in the tunnel packet itself

313
00:15:21,209 --> 00:15:25,709
<font color="#E5E5E5">having a predictable destination which</font>

314
00:15:23,730 --> 00:15:27,569
is the label value it's good for

315
00:15:25,709 --> 00:15:29,670
<font color="#E5E5E5">troubleshooting it's also good if you</font>

316
00:15:27,569 --> 00:15:32,189
wanted to incorporate a controller in

317
00:15:29,670 --> 00:15:36,029
your network or if you wanted<font color="#E5E5E5"> to source</font>

318
00:15:32,190 --> 00:15:39,120
these packets from hosts that don't

319
00:15:36,029 --> 00:15:41,759
<font color="#E5E5E5">speak network routing protocols or label</font>

320
00:15:39,120 --> 00:15:44,250
distribution protocol so for<font color="#E5E5E5"> all those</font>

321
00:15:41,759 --> 00:15:46,079
reasons there's goodness in predictable

322
00:15:44,250 --> 00:15:49,589
<font color="#E5E5E5">label values so we want to achieve that</font>

323
00:15:46,079 --> 00:15:51,989
even in environments that are not spring

324
00:15:49,589 --> 00:15:55,860
or segment routing environments and then

325
00:15:51,990 --> 00:15:59,100
the second sort of idea is the<font color="#E5E5E5"> notion of</font>

326
00:15:55,860 --> 00:16:02,310
this note said there's there's certain

327
00:15:59,100 --> 00:16:05,459
elegance in being able<font color="#E5E5E5"> to to address a</font>

328
00:16:02,310 --> 00:16:07,430
node with one simple instruction from

329
00:16:05,459 --> 00:16:10,709
the ingress all the way to the egress

330
00:16:07,430 --> 00:16:13,050
<font color="#E5E5E5">and not have to care</font><font color="#CCCCCC"> about how to route</font>

331
00:16:10,709 --> 00:16:15,449
the packet throw<font color="#E5E5E5"> network the notes it</font>

332
00:16:13,050 --> 00:16:18,930
basically allows for the packet to get

333
00:16:15,449 --> 00:16:23,219
to the egress over whatever ecmp path is

334
00:16:18,930 --> 00:16:25,279
available to<font color="#E5E5E5"> that egress so again people</font>

335
00:16:23,220 --> 00:16:27,720
have looked at can<font color="#E5E5E5"> we do these things</font>

336
00:16:25,279 --> 00:16:30,769
without<font color="#E5E5E5"> actually having to upgrade</font><font color="#CCCCCC"> our</font>

337
00:16:27,720 --> 00:16:33,389
network to spring you know which is

338
00:16:30,769 --> 00:16:35,940
fairly large exercise you know that a

339
00:16:33,389 --> 00:16:37,649
minimum it's a software<font color="#E5E5E5"> upgrade it also</font>

340
00:16:35,940 --> 00:16:39,660
<font color="#E5E5E5">involves a completely different way of</font>

341
00:16:37,649 --> 00:16:44,040
forwarding so your operational staff

342
00:16:39,660 --> 00:16:45,540
needs to needs to<font color="#E5E5E5"> understand that who</font>

343
00:16:44,040 --> 00:16:52,349
knows it might even include some new

344
00:16:45,540 --> 00:16:54,990
bugs so this<font color="#CCCCCC"> is a fairly a commonly</font>

345
00:16:52,350 --> 00:16:56,639
referenced use case for segment routing

346
00:16:54,990 --> 00:17:01,439
for spring and there's a special draft

347
00:16:56,639 --> 00:17:05,839
that describes it and kind of<font color="#E5E5E5"> in essence</font>

348
00:17:01,439 --> 00:17:10,079
the idea is that if i wanted to exercise

349
00:17:05,839 --> 00:17:14,129
every path in a network with OEM probes

350
00:17:10,079 --> 00:17:15,490
I can just craft these OEM probes and

351
00:17:14,130 --> 00:17:18,169
use

352
00:17:15,490 --> 00:17:20,780
adjacency segments or combination of

353
00:17:18,169 --> 00:17:24,589
adjacency<font color="#E5E5E5"> EndNote segments to steer</font><font color="#CCCCCC"> the</font>

354
00:17:20,780 --> 00:17:26,359
packet every which way I want seminar in

355
00:17:24,589 --> 00:17:29,330
<font color="#E5E5E5">lends itself really well to that sort of</font>

356
00:17:26,359 --> 00:17:31,010
thing there are some enhancements to<font color="#CCCCCC"> it</font>

357
00:17:29,330 --> 00:17:34,250
toward that you know at the bottom i

358
00:17:31,010 --> 00:17:37,010
<font color="#CCCCCC">have this aggregated bundle</font><font color="#E5E5E5"> ethernet</font>

359
00:17:34,250 --> 00:17:38,780
bundle<font color="#CCCCCC"> i could assign segments to the</font>

360
00:17:37,010 --> 00:17:42,200
bundle itself but I could also assign

361
00:17:38,780 --> 00:17:44,330
segments to the constituent links or the

362
00:17:42,200 --> 00:17:46,940
child links in that bundle and exercise

363
00:17:44,330 --> 00:17:50,418
predictably those links which is kind of

364
00:17:46,940 --> 00:17:53,059
cool<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> too so the segment routing</font>

365
00:17:50,419 --> 00:17:55,070
approach to this would be I craft a

366
00:17:53,059 --> 00:17:57,470
packet like this and this packet says

367
00:17:55,070 --> 00:18:01,340
hey<font color="#CCCCCC"> Traverse that</font><font color="#E5E5E5"> ring in a clockwise</font>

368
00:17:57,470 --> 00:18:03,380
direction and in this particular you

369
00:18:01,340 --> 00:18:06,678
know stack of segments I don't care

370
00:18:03,380 --> 00:18:08,510
about which link of the bundle I

371
00:18:06,679 --> 00:18:12,169
exercise just go ahead and use the

372
00:18:08,510 --> 00:18:14,240
vendors load balancing algorithm and and

373
00:18:12,169 --> 00:18:16,549
the packet gets to them now if you do

374
00:18:14,240 --> 00:18:19,460
care about the witch which link you

375
00:18:16,549 --> 00:18:22,580
exercise predictably then you can make<font color="#CCCCCC"> a</font>

376
00:18:19,460 --> 00:18:26,870
slight modification to that stack and

377
00:18:22,580 --> 00:18:31,010
the<font color="#E5E5E5"> label</font><font color="#CCCCCC"> next-to-last</font><font color="#E5E5E5"> here is now 4011</font>

378
00:18:26,870 --> 00:18:33,289
<font color="#CCCCCC">I think or 4031 which causes this this</font>

379
00:18:31,010 --> 00:18:34,820
packet to be steered through the you

380
00:18:33,289 --> 00:18:38,090
know the top link in the bundle and

381
00:18:34,820 --> 00:18:41,928
exercise that<font color="#E5E5E5"> one predictably and then</font>

382
00:18:38,090 --> 00:18:45,408
lastly using that concept of<font color="#E5E5E5"> stack</font>

383
00:18:41,929 --> 00:18:47,059
compression if you don't care about all

384
00:18:45,409 --> 00:18:49,880
these specifics and if you want it to

385
00:18:47,059 --> 00:18:52,100
just exercise a link you<font color="#E5E5E5"> can say things</font>

386
00:18:49,880 --> 00:18:54,799
<font color="#E5E5E5">like hey get me to get that packet to</font>

387
00:18:52,100 --> 00:18:56,510
router for and then just exercise the

388
00:18:54,799 --> 00:18:57,918
top<font color="#E5E5E5"> linker than in that bundle and then</font>

389
00:18:56,510 --> 00:19:01,809
get it back to<font color="#E5E5E5"> the path management</font>

390
00:18:57,919 --> 00:19:04,280
server so lots of flexibility there

391
00:19:01,809 --> 00:19:07,100
turns out you can do these<font color="#E5E5E5"> things</font><font color="#CCCCCC"> in</font>

392
00:19:04,280 --> 00:19:10,510
other ways and people<font color="#E5E5E5"> have done them in</font>

393
00:19:07,100 --> 00:19:13,699
other<font color="#E5E5E5"> ways my first example comes from</font>

394
00:19:10,510 --> 00:19:20,929
Google who presented this a couple of

395
00:19:13,700 --> 00:19:25,400
nannaogsigurd unissued pls peas and they

396
00:19:20,929 --> 00:19:26,960
have injected<font color="#CCCCCC"> pro packets into into</font>

397
00:19:25,400 --> 00:19:28,360
those LSPs and then they've collected

398
00:19:26,960 --> 00:19:29,710
those<font color="#CCCCCC"> pro packets and</font>

399
00:19:28,360 --> 00:19:33,580
analyze them and made sense of them

400
00:19:29,710 --> 00:19:35,260
which links of aliens and so forth now

401
00:19:33,580 --> 00:19:37,899
the<font color="#E5E5E5"> only drawback with that solution is</font>

402
00:19:35,260 --> 00:19:41,559
that in doing so they've also created a

403
00:19:37,900 --> 00:19:43,299
full additional RSVP mesh which creates

404
00:19:41,559 --> 00:19:47,500
a lot<font color="#CCCCCC"> of extra state and then their</font>

405
00:19:43,299 --> 00:19:51,100
network so other operators have picked

406
00:19:47,500 --> 00:19:53,440
up<font color="#E5E5E5"> that idea and kind of move move moved</font>

407
00:19:51,100 --> 00:19:55,990
it on borrowing a couple of more

408
00:19:53,440 --> 00:19:57,700
concepts of segment routing except they

409
00:19:55,990 --> 00:20:01,390
have done it also without<font color="#E5E5E5"> Simon routing</font>

410
00:19:57,700 --> 00:20:03,400
they've done it but static LSPs the

411
00:20:01,390 --> 00:20:05,200
beauty of doing it with static LSPs is

412
00:20:03,400 --> 00:20:08,110
that you don't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> install any kind</font>

413
00:20:05,200 --> 00:20:10,780
of control control state and<font color="#CCCCCC"> in their</font>

414
00:20:08,110 --> 00:20:12,780
little<font color="#E5E5E5"> boy LSP state in their hours so</font>

415
00:20:10,780 --> 00:20:16,780
these are kind of config snippets and

416
00:20:12,780 --> 00:20:19,450
examples of how<font color="#E5E5E5"> this would work if you</font>

417
00:20:16,780 --> 00:20:23,139
were to craft a packet like like this

418
00:20:19,450 --> 00:20:26,440
<font color="#E5E5E5">one in the bottom and inject that packet</font>

419
00:20:23,140 --> 00:20:29,950
into into r1 r1 is going to act on the

420
00:20:26,440 --> 00:20:31,660
stop label of 1 million and two and that

421
00:20:29,950 --> 00:20:35,169
top label based on the configuration

422
00:20:31,660 --> 00:20:37,960
there says pop the pop the label and

423
00:20:35,169 --> 00:20:40,030
then send that<font color="#E5E5E5"> packet to the next top of</font>

424
00:20:37,960 --> 00:20:42,059
11 12 which happens to be router to

425
00:20:40,030 --> 00:20:45,700
router<font color="#CCCCCC"> to has a similar configuration</font>

426
00:20:42,059 --> 00:20:49,928
that would act on the next label in the

427
00:20:45,700 --> 00:20:51,669
stack million and three and then it's

428
00:20:49,929 --> 00:20:53,620
going<font color="#E5E5E5"> to look that send that packet to</font>

429
00:20:51,669 --> 00:20:56,470
our three hour 3 is going to act on the

430
00:20:53,620 --> 00:20:57,760
next level send it back to r1 and r1 is

431
00:20:56,470 --> 00:21:02,260
going to look at<font color="#E5E5E5"> the payload and send it</font>

432
00:20:57,760 --> 00:21:05,919
to<font color="#E5E5E5"> the to the path management server so</font>

433
00:21:02,260 --> 00:21:10,720
this is kind of easily done with sort<font color="#E5E5E5"> of</font>

434
00:21:05,919 --> 00:21:11,950
current means now the second example I

435
00:21:10,720 --> 00:21:15,970
want<font color="#E5E5E5"> to bring up as a bit of a</font>

436
00:21:11,950 --> 00:21:17,559
controversy so and it's a controversy

437
00:21:15,970 --> 00:21:24,490
because I'm used I'm<font color="#E5E5E5"> going to use the</font>

438
00:21:17,559 --> 00:21:26,830
words mpls in the data center<font color="#CCCCCC"> okay I get</font>

439
00:21:24,490 --> 00:21:31,929
it but I'm not<font color="#E5E5E5"> telling you to do mpls in</font>

440
00:21:26,830 --> 00:21:33,460
the data center unless you want to but i

441
00:21:31,929 --> 00:21:36,330
am telling you that<font color="#E5E5E5"> there are a couple</font>

442
00:21:33,460 --> 00:21:37,740
of good reasons for for<font color="#E5E5E5"> doing so and</font>

443
00:21:36,330 --> 00:21:40,620
and some<font color="#CCCCCC"> of them are discussed in</font><font color="#E5E5E5"> this</font>

444
00:21:37,740 --> 00:21:44,100
presentation that Yandex did some time

445
00:21:40,620 --> 00:21:47,149
ago but if you did want to do mpls in

446
00:21:44,100 --> 00:21:51,899
the data center you're likely to want to

447
00:21:47,149 --> 00:21:53,879
to create a packet or craft packets out

448
00:21:51,899 --> 00:22:00,418
of your servers that kind<font color="#E5E5E5"> of look like</font>

449
00:21:53,880 --> 00:22:03,000
this there's a 33 MPLS label stack with

450
00:22:00,419 --> 00:22:08,850
a depth of three labels and the<font color="#CCCCCC"> top</font>

451
00:22:03,000 --> 00:22:11,190
label the orange<font color="#E5E5E5"> one is the one we use</font>

452
00:22:08,850 --> 00:22:15,330
to address the egress<font color="#CCCCCC"> top-of-rack switch</font>

453
00:22:11,190 --> 00:22:17,850
the next green label is one that we used

454
00:22:15,330 --> 00:22:19,860
that that we used to address<font color="#E5E5E5"> the actual</font>

455
00:22:17,850 --> 00:22:22,949
server or port out of that<font color="#CCCCCC"> top-of-rack</font>

456
00:22:19,860 --> 00:22:25,110
<font color="#E5E5E5">switch and then the third label if you</font>

457
00:22:22,950 --> 00:22:29,250
have VMs that would be the label that

458
00:22:25,110 --> 00:22:32,789
would address a particular vm in that in

459
00:22:29,250 --> 00:22:34,500
that server so by doing an overlay like

460
00:22:32,789 --> 00:22:39,510
this you can you can<font color="#CCCCCC"> actually achieve</font>

461
00:22:34,500 --> 00:22:40,980
overlays pretty cheaply you hesitant to

462
00:22:39,510 --> 00:22:42,179
say that you don't<font color="#E5E5E5"> need a controller but</font>

463
00:22:40,980 --> 00:22:48,179
you could actually do it without a

464
00:22:42,179 --> 00:22:50,639
controller so the<font color="#E5E5E5"> bottom two labels are</font>

465
00:22:48,179 --> 00:22:54,059
not really concerned for this talk of

466
00:22:50,639 --> 00:22:55,229
they<font color="#E5E5E5"> usually will get you know they'll</font>

467
00:22:54,059 --> 00:22:58,289
usually actually<font color="#E5E5E5"> get assigned by a</font>

468
00:22:55,230 --> 00:23:00,809
controller or an Orchestrator and in the

469
00:22:58,289 --> 00:23:04,169
data center but the top label is the one

470
00:23:00,809 --> 00:23:07,820
we use to do forwarding on so how do<font color="#E5E5E5"> we</font>

471
00:23:04,169 --> 00:23:10,649
make the left router the ingress<font color="#CCCCCC"> store</font>

472
00:23:07,820 --> 00:23:15,600
switch rather how do we make that

473
00:23:10,649 --> 00:23:17,820
ingress store act on that label if we

474
00:23:15,600 --> 00:23:19,649
want to<font color="#E5E5E5"> inject that that packet from the</font>

475
00:23:17,820 --> 00:23:22,500
server how do we make the server know

476
00:23:19,649 --> 00:23:25,500
that<font color="#CCCCCC"> label those are all good questions</font>

477
00:23:22,500 --> 00:23:29,580
and there they have pretty<font color="#E5E5E5"> much three</font>

478
00:23:25,500 --> 00:23:31,980
conceivable answers one is this segment

479
00:23:29,580 --> 00:23:34,350
routing concept of a note note<font color="#CCCCCC"> SID it</font>

480
00:23:31,980 --> 00:23:36,750
lends itself quite nicely to this all

481
00:23:34,350 --> 00:23:39,689
the egress store needs<font color="#E5E5E5"> to do is simply</font>

482
00:23:36,750 --> 00:23:42,269
<font color="#E5E5E5">announce a note set for itself and then</font>

483
00:23:39,690 --> 00:23:45,299
everybody can use that node Sid<font color="#E5E5E5"> and we</font>

484
00:23:42,269 --> 00:23:47,760
have predictable way of addressing tour

485
00:23:45,299 --> 00:23:48,940
<font color="#E5E5E5">three two or three is the notes it for</font>

486
00:23:47,760 --> 00:23:51,220
two<font color="#E5E5E5"> or three</font>

487
00:23:48,940 --> 00:23:53,050
okay the only problem with that is you

488
00:23:51,220 --> 00:23:54,790
<font color="#CCCCCC">gotta upgrade your data center just to</font>

489
00:23:53,050 --> 00:23:57,280
spring<font color="#CCCCCC"> to segment routing data type of</font>

490
00:23:54,790 --> 00:24:01,300
technology you<font color="#E5E5E5"> could go the traditional</font>

491
00:23:57,280 --> 00:24:04,210
<font color="#CCCCCC">way and simply create an RSVP LSP mesh</font>

492
00:24:01,300 --> 00:24:07,050
in your data center you<font color="#CCCCCC"> will achieve</font>

493
00:24:04,210 --> 00:24:10,350
reach ability you will not<font color="#E5E5E5"> achieve</font>

494
00:24:07,050 --> 00:24:12,370
predictable label values because every

495
00:24:10,350 --> 00:24:15,689
you<font color="#E5E5E5"> know that they're going to be</font>

496
00:24:12,370 --> 00:24:18,310
<font color="#E5E5E5">dependent</font><font color="#CCCCCC"> on what RSVP assigned for you</font>

497
00:24:15,690 --> 00:24:22,080
which brings us to the third approach

498
00:24:18,310 --> 00:24:27,300
which is<font color="#E5E5E5"> let's use static LSPs with some</font>

499
00:24:22,080 --> 00:24:30,220
pixie dust to to make to achieve this

500
00:24:27,300 --> 00:24:31,780
label forwarding you have a very

501
00:24:30,220 --> 00:24:37,660
predictable<font color="#E5E5E5"> label values for the</font>

502
00:24:31,780 --> 00:24:41,170
destination so what we do also is we

503
00:24:37,660 --> 00:24:43,570
enable some sort of<font color="#E5E5E5"> a label protocol</font>

504
00:24:41,170 --> 00:24:45,820
within the data center but we don't<font color="#E5E5E5"> do a</font>

505
00:24:43,570 --> 00:24:48,179
full mesh out of it<font color="#E5E5E5"> between all of our</font>

506
00:24:45,820 --> 00:24:51,010
egress stores instead we do<font color="#E5E5E5"> hop-by-hop</font>

507
00:24:48,180 --> 00:24:54,220
you know label allocations so for in

508
00:24:51,010 --> 00:24:56,410
this example the<font color="#E5E5E5"> egress store uses</font><font color="#CCCCCC"> bgp</font>

509
00:24:54,220 --> 00:24:59,920
labeled unique<font color="#E5E5E5"> ass to announce its</font>

510
00:24:56,410 --> 00:25:02,980
loopback address to to its upstream

511
00:24:59,920 --> 00:25:05,410
switch then it uses<font color="#E5E5E5"> bgp level you guys</font>

512
00:25:02,980 --> 00:25:08,050
to announce that that loopback address

513
00:25:05,410 --> 00:25:10,900
to<font color="#E5E5E5"> everybody else that's a neighbor of</font>

514
00:25:08,050 --> 00:25:16,470
his so eventually the ingress store gets

515
00:25:10,900 --> 00:25:20,680
a label allocation for that 3333 address

516
00:25:16,470 --> 00:25:22,930
which is<font color="#E5E5E5"> nice but we can't know what</font>

517
00:25:20,680 --> 00:25:25,860
that label is it's not predictable it's

518
00:25:22,930 --> 00:25:28,990
up to<font color="#E5E5E5"> bgp label unicast to announce it</font>

519
00:25:25,860 --> 00:25:31,659
we haven't achieved our kind of main

520
00:25:28,990 --> 00:25:34,120
goal<font color="#CCCCCC"> here to have predictable label</font>

521
00:25:31,660 --> 00:25:36,910
allocations so the<font color="#E5E5E5"> way we do that is by</font>

522
00:25:34,120 --> 00:25:39,820
by having an extra extra configuration

523
00:25:36,910 --> 00:25:41,950
with a static LSP that says so<font color="#E5E5E5"> this</font>

524
00:25:39,820 --> 00:25:44,590
configuration pretty much says hey if

525
00:25:41,950 --> 00:25:51,660
you should get a packet with a<font color="#CCCCCC"> label of</font>

526
00:25:44,590 --> 00:25:56,760
a million<font color="#E5E5E5"> and three for that package to</font>

527
00:25:51,660 --> 00:26:00,040
this node 3333 that's the egress store

528
00:25:56,760 --> 00:26:02,050
so for<font color="#CCCCCC"> our packet there and stitch it to</font>

529
00:26:00,040 --> 00:26:04,930
whatever label path is available

530
00:26:02,050 --> 00:26:07,389
to you to forward it in this case the

531
00:26:04,930 --> 00:26:10,720
label<font color="#CCCCCC"> Pat</font><font color="#E5E5E5"> that's available to me came</font>

532
00:26:07,390 --> 00:26:12,640
from bgp labeled unicast and it has a

533
00:26:10,720 --> 00:26:15,490
label of something there which I<font color="#CCCCCC"> don't</font>

534
00:26:12,640 --> 00:26:19,180
really care about because this config

535
00:26:15,490 --> 00:26:22,960
call caused the this forwarding state to

536
00:26:19,180 --> 00:26:24,750
get installed in<font color="#E5E5E5"> top of</font><font color="#CCCCCC"> rac1</font><font color="#E5E5E5"> with this</font>

537
00:26:22,960 --> 00:26:27,610
forwarding state pretty much says

538
00:26:24,750 --> 00:26:32,640
incoming label a million<font color="#E5E5E5"> and three gets</font>

539
00:26:27,610 --> 00:26:35,020
swapped to label 299 something something

540
00:26:32,640 --> 00:26:38,320
which came from BTW playe of all you

541
00:26:35,020 --> 00:26:41,500
niggas now once<font color="#E5E5E5"> i do that i have a way</font>

542
00:26:38,320 --> 00:26:44,470
of addressing this egress top-of-rack

543
00:26:41,500 --> 00:26:47,920
switch by crafting a packet just like

544
00:26:44,470 --> 00:26:51,910
this<font color="#E5E5E5"> one the top label of the packet is</font>

545
00:26:47,920 --> 00:26:53,500
a million<font color="#E5E5E5"> and three and every ingress</font>

546
00:26:51,910 --> 00:26:55,480
store in this data center can just

547
00:26:53,500 --> 00:26:57,400
generate that one packet every every

548
00:26:55,480 --> 00:27:00,160
server router can generate that packet I

549
00:26:57,400 --> 00:27:05,830
know<font color="#CCCCCC"> that label million and three will</font>

550
00:27:00,160 --> 00:27:09,100
get me<font color="#E5E5E5"> to aggress tour three and I don't</font>

551
00:27:05,830 --> 00:27:12,210
have<font color="#E5E5E5"> to care what the underlying label</font>

552
00:27:09,100 --> 00:27:16,629
distribution protocol assignments were

553
00:27:12,210 --> 00:27:19,870
so in the eyes of a server this now

554
00:27:16,630 --> 00:27:25,480
looks a lot like a note said it's

555
00:27:19,870 --> 00:27:28,600
predictable and it's allowing you to

556
00:27:25,480 --> 00:27:35,130
reach the egress store with whatever

557
00:27:28,600 --> 00:27:38,949
path is available to you by<font color="#E5E5E5"> the way</font>

558
00:27:35,130 --> 00:27:40,810
these terms spring explorations I got<font color="#E5E5E5"> to</font>

559
00:27:38,950 --> 00:27:43,600
credit my friends to you or it was

560
00:27:40,810 --> 00:27:46,149
somewhere in the audience there if you

561
00:27:43,600 --> 00:27:52,810
guys like the term tell me if<font color="#E5E5E5"> you hate</font>

562
00:27:46,150 --> 00:27:55,900
it tell<font color="#CCCCCC"> him so the last thing</font><font color="#E5E5E5"> I want to</font>

563
00:27:52,810 --> 00:28:00,100
talk about<font color="#E5E5E5"> this last example is this</font>

564
00:27:55,900 --> 00:28:01,900
case for egress pure engineering that's

565
00:28:00,100 --> 00:28:04,300
the last spring exploration and it's not

566
00:28:01,900 --> 00:28:07,420
<font color="#CCCCCC">Aspen inspiration at all it has</font><font color="#E5E5E5"> been</font>

567
00:28:04,300 --> 00:28:10,240
around for years years before spring was

568
00:28:07,420 --> 00:28:12,250
was conceived in<font color="#E5E5E5"> fact the first</font>

569
00:28:10,240 --> 00:28:14,520
reference<font color="#E5E5E5"> I could find for it is from</font>

570
00:28:12,250 --> 00:28:19,310
five years ago coming out of this

571
00:28:14,520 --> 00:28:21,690
<font color="#CCCCCC">form Tom and and Richard kind of</font>

572
00:28:19,310 --> 00:28:23,250
explained that sort of the initial

573
00:28:21,690 --> 00:28:26,400
concepts around the sink respir

574
00:28:23,250 --> 00:28:29,670
engineering which are hey let's bypass

575
00:28:26,400 --> 00:28:31,650
the the forwarding decision the

576
00:28:29,670 --> 00:28:34,710
forwarding decision made in our clearing

577
00:28:31,650 --> 00:28:36,120
routers and the way we the reason we

578
00:28:34,710 --> 00:28:39,740
want to do that is because we want to

579
00:28:36,120 --> 00:28:44,030
override the BGP best path selection

580
00:28:39,740 --> 00:28:48,150
with something that<font color="#E5E5E5"> we think is better</font>

581
00:28:44,030 --> 00:28:50,639
so the<font color="#CCCCCC"> way springwood do that and again</font>

582
00:28:48,150 --> 00:28:57,030
that's kind<font color="#E5E5E5"> of described in details in</font>

583
00:28:50,640 --> 00:29:00,600
this purpose-built draft spring with a

584
00:28:57,030 --> 00:29:02,190
sign well spring in this kind<font color="#E5E5E5"> of</font>

585
00:29:00,600 --> 00:29:05,070
solution you have<font color="#E5E5E5"> three main components</font>

586
00:29:02,190 --> 00:29:07,530
the peering router the controller and

587
00:29:05,070 --> 00:29:09,000
the ingress so most of the

588
00:29:07,530 --> 00:29:11,370
functionalities in<font color="#CCCCCC"> the peering</font><font color="#E5E5E5"> Robert</font>

589
00:29:09,000 --> 00:29:14,730
the peering router<font color="#E5E5E5"> would use spring to</font>

590
00:29:11,370 --> 00:29:16,889
allocate segments to these<font color="#E5E5E5"> piers there's</font>

591
00:29:14,730 --> 00:29:19,110
going<font color="#CCCCCC"> to be individual unique segments</font>

592
00:29:16,890 --> 00:29:21,120
to each pier those things<font color="#E5E5E5"> are going</font><font color="#CCCCCC"> to</font>

593
00:29:19,110 --> 00:29:22,620
<font color="#E5E5E5">get announced to the controller the</font>

594
00:29:21,120 --> 00:29:25,379
controller is going to make its best

595
00:29:22,620 --> 00:29:27,719
path selection and it's going to impose

596
00:29:25,380 --> 00:29:30,510
<font color="#CCCCCC">that best path selection on the ingress</font>

597
00:29:27,720 --> 00:29:33,360
of the traffic either host or ingress

598
00:29:30,510 --> 00:29:36,030
router and the end result of that whole

599
00:29:33,360 --> 00:29:39,810
thing<font color="#E5E5E5"> is going to be that I can create</font>

600
00:29:36,030 --> 00:29:43,190
<font color="#E5E5E5">this steering policy that in this</font>

601
00:29:39,810 --> 00:29:47,399
example allows me to split<font color="#E5E5E5"> that prefix</font>

602
00:29:43,190 --> 00:29:51,390
8a / 8 for example in 22 /<font color="#CCCCCC"> 16s and</font><font color="#E5E5E5"> send</font>

603
00:29:47,400 --> 00:29:54,780
them different ways and<font color="#E5E5E5"> also you know</font>

604
00:29:51,390 --> 00:29:58,590
dictate where<font color="#E5E5E5"> B / 24 is going to go and</font>

605
00:29:54,780 --> 00:30:01,620
<font color="#E5E5E5">c / 20 is going to go same thing can be</font>

606
00:29:58,590 --> 00:30:06,540
done<font color="#E5E5E5"> and has been done with bgp label</font>

607
00:30:01,620 --> 00:30:09,510
unicast the same concept remains just

608
00:30:06,540 --> 00:30:12,149
<font color="#E5E5E5">the protocol changes bgp label unicast</font>

609
00:30:09,510 --> 00:30:14,940
along with an igp perhaps is used to

610
00:30:12,150 --> 00:30:19,380
announce these unique labels pointing to

611
00:30:14,940 --> 00:30:21,330
<font color="#E5E5E5">peers and the controller basically gets</font>

612
00:30:19,380 --> 00:30:24,450
the same amount of<font color="#E5E5E5"> information that</font>

613
00:30:21,330 --> 00:30:27,659
allows it to impose the same type of

614
00:30:24,450 --> 00:30:29,100
policy on the<font color="#E5E5E5"> ingress of the traffic</font>

615
00:30:27,660 --> 00:30:31,590
except this time the<font color="#E5E5E5"> policy looks a</font>

616
00:30:29,100 --> 00:30:33,480
little differently instead of a<font color="#CCCCCC"> note</font>

617
00:30:31,590 --> 00:30:41,010
segment on the<font color="#E5E5E5"> top you'll have an LSP</font>

618
00:30:33,480 --> 00:30:43,740
label in fact the interest in this use

619
00:30:41,010 --> 00:30:45,540
case from Spring has been made has

620
00:30:43,740 --> 00:30:48,330
resulted in a lot of enhancements that

621
00:30:45,540 --> 00:30:50,360
we got asked<font color="#E5E5E5"> as by customers mainly in</font>

622
00:30:48,330 --> 00:30:53,040
two areas you know one is to

623
00:30:50,360 --> 00:30:55,229
auto-generate these<font color="#CCCCCC"> bgp le routes</font>

624
00:30:53,040 --> 00:30:57,510
representing peers and the other one is

625
00:30:55,230 --> 00:31:00,660
to provide protection for that traffic

626
00:30:57,510 --> 00:31:02,340
that<font color="#CCCCCC"> is now labeled so that we don't</font>

627
00:31:00,660 --> 00:31:06,360
<font color="#E5E5E5">have to wait</font><font color="#CCCCCC"> for the controller to</font>

628
00:31:02,340 --> 00:31:09,179
notice any failures and and you know

629
00:31:06,360 --> 00:31:12,830
react to them so this<font color="#E5E5E5"> is just a config</font>

630
00:31:09,180 --> 00:31:12,830
snippet of how you do these<font color="#CCCCCC"> things</font>

631
00:31:13,100 --> 00:31:20,399
Spring has sparks people<font color="#CCCCCC"> of spark</font>

632
00:31:15,960 --> 00:31:24,620
people's imagination around ideas of an

633
00:31:20,400 --> 00:31:27,360
old technology source routing it has

634
00:31:24,620 --> 00:31:29,340
given<font color="#CCCCCC"> them</font><font color="#E5E5E5"> some insights that allowed</font>

635
00:31:27,360 --> 00:31:32,490
them to you know just take a second look

636
00:31:29,340 --> 00:31:35,040
<font color="#E5E5E5">at existing problems and solve them with</font>

637
00:31:32,490 --> 00:31:37,800
some present existing solutions without

638
00:31:35,040 --> 00:31:40,430
having to upgrade their network to

639
00:31:37,800 --> 00:31:43,200
spring capable you know code and routers

640
00:31:40,430 --> 00:31:45,360
so I kind<font color="#CCCCCC"> of covered three of those</font>

641
00:31:43,200 --> 00:31:48,090
hopefully they were kind<font color="#E5E5E5"> of meaningful</font>

642
00:31:45,360 --> 00:31:50,040
to you and useful and if you guys want

643
00:31:48,090 --> 00:31:52,620
to talk about<font color="#E5E5E5"> them I'll be happy to</font>

644
00:31:50,040 --> 00:31:59,030
discuss in the break do we<font color="#CCCCCC"> have</font><font color="#E5E5E5"> for time</font>

645
00:31:52,620 --> 00:31:59,030
for<font color="#E5E5E5"> question or done with that</font>

646
00:32:05,740 --> 00:32:08,740
sick

