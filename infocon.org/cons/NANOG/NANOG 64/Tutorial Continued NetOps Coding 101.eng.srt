1
00:00:08,080 --> 00:00:12,850
all right I don't<font color="#E5E5E5"> have too much to say</font>

2
00:00:11,240 --> 00:00:15,010
but

3
00:00:12,850 --> 00:00:20,230
and this is the continuation of the net

4
00:00:15,010 --> 00:00:21,580
ox<font color="#E5E5E5"> coding 101 and he'll give you a</font>

5
00:00:20,230 --> 00:00:23,770
little<font color="#E5E5E5"> more</font><font color="#CCCCCC"> information we do have</font>

6
00:00:21,580 --> 00:00:27,400
people to help if you have any questions

7
00:00:23,770 --> 00:00:31,570
or miss the earlier content<font color="#CCCCCC"> Thanks thank</font>

8
00:00:27,400 --> 00:00:33,580
you awesome thank you<font color="#E5E5E5"> so welcome back</font>

9
00:00:31,570 --> 00:00:36,520
<font color="#E5E5E5">everybody if you're new as well welcome</font>

10
00:00:33,580 --> 00:00:38,440
<font color="#CCCCCC">to welcome</font><font color="#E5E5E5"> as well</font><font color="#CCCCCC"> um so this is the</font>

11
00:00:36,520 --> 00:00:41,410
continuation of a tutorial from this

12
00:00:38,440 --> 00:00:43,059
morning where we started out walking

13
00:00:41,410 --> 00:00:46,209
through some of the Python basics and

14
00:00:43,059 --> 00:00:49,080
also showing you the model<font color="#E5E5E5"> of what we</font>

15
00:00:46,210 --> 00:00:51,699
use at<font color="#E5E5E5"> Facebook called f bar</font>

16
00:00:49,080 --> 00:00:54,909
specifically the tutorial is focused<font color="#E5E5E5"> on</font>

17
00:00:51,699 --> 00:00:57,190
building your first robot and to

18
00:00:54,909 --> 00:00:59,470
automate the detection of common<font color="#CCCCCC"> network</font>

19
00:00:57,190 --> 00:01:00,669
faults and write code to do the initial

20
00:00:59,470 --> 00:01:03,040
troubleshooting that you might otherwise

21
00:01:00,670 --> 00:01:05,260
do yourself so we are<font color="#E5E5E5"> going to continue</font>

22
00:01:03,040 --> 00:01:07,000
and not repeat from earlier out of

23
00:01:05,260 --> 00:01:09,220
<font color="#E5E5E5">respect for everybody's time but if you</font>

24
00:01:07,000 --> 00:01:10,810
<font color="#CCCCCC">are new this is going to be based</font><font color="#E5E5E5"> on a</font>

25
00:01:09,220 --> 00:01:13,298
<font color="#E5E5E5">virtual machine that everybody grabbed</font>

26
00:01:10,810 --> 00:01:15,250
earlier from<font color="#E5E5E5"> USB drives try to ask your</font>

27
00:01:13,299 --> 00:01:18,100
partner if they have one if you haven't

28
00:01:15,250 --> 00:01:19,899
gotten this yet it has a virtual machine

29
00:01:18,100 --> 00:01:22,449
of ubuntu desktop and installers for

30
00:01:19,899 --> 00:01:25,509
virtual box and we also have<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same as</font>

31
00:01:22,450 --> 00:01:27,899
I link from the 930am abstract on the

32
00:01:25,509 --> 00:01:29,950
bottom<font color="#CCCCCC"> section to google drive as well</font>

33
00:01:27,899 --> 00:01:31,930
so what we're going to continue on

34
00:01:29,950 --> 00:01:34,359
though is just a<font color="#E5E5E5"> quick rehash of the</font>

35
00:01:31,930 --> 00:01:35,710
final section at the end last time which

36
00:01:34,359 --> 00:01:38,619
<font color="#CCCCCC">is where we were building regular</font>

37
00:01:35,710 --> 00:01:45,189
expressions to parse out log messages

38
00:01:38,619 --> 00:01:46,960
sent by network devices and i do want<font color="#CCCCCC"> to</font>

39
00:01:45,189 --> 00:01:54,369
actually just give you one quick demo

40
00:01:46,960 --> 00:01:55,928
again of what we're building so in our

41
00:01:54,369 --> 00:01:57,579
<font color="#CCCCCC">vm we have this thing called ipython</font>

42
00:01:55,929 --> 00:01:59,619
that we're interacting with we can

43
00:01:57,579 --> 00:02:08,440
<font color="#E5E5E5">actually run the demo code by simply</font>

44
00:01:59,619 --> 00:02:10,240
typing run and nanog demo hi and so what

45
00:02:08,440 --> 00:02:11,890
we see is this imagine this code is

46
00:02:10,240 --> 00:02:13,390
running on your sis log server so this

47
00:02:11,890 --> 00:02:15,250
<font color="#E5E5E5">is the only real part that</font><font color="#CCCCCC"> I'll repeat</font>

48
00:02:13,390 --> 00:02:17,079
or to make sure we<font color="#CCCCCC"> all are familiar with</font>

49
00:02:15,250 --> 00:02:19,510
what we're building so imagine<font color="#CCCCCC"> this code</font>

50
00:02:17,080 --> 00:02:21,100
is running on your sis log server and is

51
00:02:19,510 --> 00:02:23,380
reading in the log files in real time

52
00:02:21,100 --> 00:02:24,609
it's trying to parse those log files and

53
00:02:23,380 --> 00:02:26,590
react to them and do troubleshooting

54
00:02:24,610 --> 00:02:28,540
that you otherwise would do

55
00:02:26,590 --> 00:02:30,310
for example logging into a network

56
00:02:28,540 --> 00:02:32,769
device that reported a link failure and

57
00:02:30,310 --> 00:02:35,230
try to issue relative related show

58
00:02:32,769 --> 00:02:37,540
commands to say hey is this link still

59
00:02:35,230 --> 00:02:39,429
down is it taking errors right now and

60
00:02:37,540 --> 00:02:41,769
if<font color="#E5E5E5"> it is try to evaluate the condition</font>

61
00:02:39,430 --> 00:02:44,440
by thing checking things like what are

62
00:02:41,769 --> 00:02:46,060
the optical light levels this could

63
00:02:44,440 --> 00:02:47,980
potentially send you an alarm that's a

64
00:02:46,060 --> 00:02:50,260
much more useful than a link down it

65
00:02:47,980 --> 00:02:52,690
could say instead hey this device which

66
00:02:50,260 --> 00:02:54,040
one had a link go down that link might

67
00:02:52,690 --> 00:02:55,870
be kind of important it could be your

68
00:02:54,040 --> 00:02:57,819
backbone peering link between data

69
00:02:55,870 --> 00:03:01,690
centers and it went down because<font color="#CCCCCC"> of this</font>

70
00:02:57,819 --> 00:03:05,679
reason because the fiber<font color="#E5E5E5"> is causing bad</font>

71
00:03:01,690 --> 00:03:06,880
signal levels and taking errors that

72
00:03:05,680 --> 00:03:09,220
frees you up because it gives you a much

73
00:03:06,880 --> 00:03:10,810
more<font color="#E5E5E5"> high signal alarm so that then you</font>

74
00:03:09,220 --> 00:03:13,780
<font color="#CCCCCC">can write on focus on building better</font>

75
00:03:10,810 --> 00:03:15,579
software and and and other<font color="#E5E5E5"> things like</font>

76
00:03:13,780 --> 00:03:17,379
<font color="#CCCCCC">that so what we're going to come back</font><font color="#E5E5E5"> to</font>

77
00:03:15,579 --> 00:03:20,200
<font color="#E5E5E5">is the final section at the end of last</font>

78
00:03:17,379 --> 00:03:22,239
time which<font color="#CCCCCC"> is where we are</font><font color="#E5E5E5"> building a</font>

79
00:03:20,200 --> 00:03:24,970
<font color="#CCCCCC">regex</font><font color="#E5E5E5"> to parse the actual syslog</font>

80
00:03:22,239 --> 00:03:26,860
messages emitted from our devices which

81
00:03:24,970 --> 00:03:28,959
these devices were using to demo with

82
00:03:26,860 --> 00:03:30,850
<font color="#E5E5E5">are just one of the standard vendors out</font>

83
00:03:28,959 --> 00:03:32,700
there nothing<font color="#E5E5E5"> fancy it's a standard</font>

84
00:03:30,850 --> 00:03:35,290
syslog message<font color="#E5E5E5"> going to a syslog server</font>

85
00:03:32,700 --> 00:03:39,940
imagine our machine is the syslog server

86
00:03:35,290 --> 00:03:40,870
that were prototyping on so here<font color="#CCCCCC"> is one</font>

87
00:03:39,940 --> 00:03:44,410
of the message<font color="#CCCCCC"> this is</font><font color="#E5E5E5"> that we're</font>

88
00:03:40,870 --> 00:03:46,690
<font color="#CCCCCC">looking at from 2015</font><font color="#E5E5E5"> April second we had</font>

89
00:03:44,410 --> 00:03:49,209
a device named switch one that reported

90
00:03:46,690 --> 00:03:52,090
<font color="#CCCCCC">I</font><font color="#E5E5E5"> F down interface removed interface</font>

91
00:03:49,209 --> 00:03:53,620
ethernet 5 /<font color="#E5E5E5"> one is down that's the</font>

92
00:03:52,090 --> 00:03:57,220
equivalent of<font color="#CCCCCC"> seeing the same</font><font color="#E5E5E5"> message in</font>

93
00:03:53,620 --> 00:03:59,410
output of show log so if you're new to

94
00:03:57,220 --> 00:04:01,720
<font color="#CCCCCC">this</font><font color="#E5E5E5"> section</font><font color="#CCCCCC"> I am</font><font color="#E5E5E5"> going to skip some</font>

95
00:03:59,410 --> 00:04:03,849
some of this because<font color="#E5E5E5"> we covered all the</font>

96
00:04:01,720 --> 00:04:05,530
basics of<font color="#E5E5E5"> reg ex as earlier but I am</font>

97
00:04:03,849 --> 00:04:06,790
going to just quickly rehash this part

98
00:04:05,530 --> 00:04:08,769
of it because<font color="#E5E5E5"> this is where we finally</font>

99
00:04:06,790 --> 00:04:11,319
got<font color="#CCCCCC"> to the full regex that we're going</font>

100
00:04:08,769 --> 00:04:13,810
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> to parse against this log message</font>

101
00:04:11,319 --> 00:04:17,289
and turn this log message from one line

102
00:04:13,810 --> 00:04:19,149
of text into structured data to give us

103
00:04:17,289 --> 00:04:21,639
things<font color="#E5E5E5"> about the log message we can</font>

104
00:04:19,149 --> 00:04:23,138
interact with so what I show here though

105
00:04:21,639 --> 00:04:26,320
is the final regex that we're going to

106
00:04:23,139 --> 00:04:27,400
that we're building and what<font color="#E5E5E5"> I want</font><font color="#CCCCCC"> to</font>

107
00:04:26,320 --> 00:04:30,490
<font color="#E5E5E5">point out though is it's actually</font>

108
00:04:27,400 --> 00:04:33,310
several regex is combined when we go to

109
00:04:30,490 --> 00:04:35,530
use it so one<font color="#CCCCCC"> tritton one tip when you</font>

110
00:04:33,310 --> 00:04:37,750
start to build regex is is that you can

111
00:04:35,530 --> 00:04:39,010
build them as individual units and then

112
00:04:37,750 --> 00:04:40,090
combine<font color="#E5E5E5"> them later once you know</font><font color="#CCCCCC"> that</font>

113
00:04:39,010 --> 00:04:45,190
each of individual

114
00:04:40,090 --> 00:04:47,979
works so a quick rehash we have date

115
00:04:45,190 --> 00:04:51,880
stamp re its matching on using this / d

116
00:04:47,980 --> 00:04:55,540
<font color="#CCCCCC">+</font><font color="#E5E5E5"> 2 full out 2015 / S Plus to grab the</font>

117
00:04:51,880 --> 00:04:59,110
space between that /w foster grab April

118
00:04:55,540 --> 00:05:02,770
and finally it ends with /s boston / d<font color="#CCCCCC"> +</font>

119
00:04:59,110 --> 00:05:06,250
grab the rest of this we use something

120
00:05:02,770 --> 00:05:08,289
<font color="#E5E5E5">new earlier we use a capital / S Plus to</font>

121
00:05:06,250 --> 00:05:10,600
match on the<font color="#E5E5E5"> hostname which simply says</font>

122
00:05:08,290 --> 00:05:13,300
match on anything that<font color="#E5E5E5"> is one or more</font>

123
00:05:10,600 --> 00:05:15,370
non-space characters and in<font color="#E5E5E5"> this log</font>

124
00:05:13,300 --> 00:05:18,460
message the vendor here is using spaces

125
00:05:15,370 --> 00:05:21,010
to separate things of the log message so

126
00:05:18,460 --> 00:05:23,620
we<font color="#CCCCCC"> can trust that anything that's</font><font color="#E5E5E5"> not a</font>

127
00:05:21,010 --> 00:05:26,169
space at this place in<font color="#E5E5E5"> the log message</font>

128
00:05:23,620 --> 00:05:31,180
is going<font color="#E5E5E5"> to be this data of switch one</font>

129
00:05:26,169 --> 00:05:33,340
for<font color="#CCCCCC"> example and in the next</font><font color="#E5E5E5"> section we</font>

130
00:05:31,180 --> 00:05:35,590
match on the actual error code or a

131
00:05:33,340 --> 00:05:38,500
category of this error message I<font color="#E5E5E5"> up/down</font>

132
00:05:35,590 --> 00:05:41,440
interface remove and this is where we

133
00:05:38,500 --> 00:05:43,300
again use the<font color="#CCCCCC"> uppercase</font><font color="#E5E5E5"> /s but then we</font>

134
00:05:41,440 --> 00:05:46,060
<font color="#E5E5E5">use our grouping symbols to our</font>

135
00:05:43,300 --> 00:05:51,160
advantage here the<font color="#CCCCCC"> parenthesis and we</font>

136
00:05:46,060 --> 00:05:54,100
say match exactly between parents<font color="#E5E5E5"> % and</font>

137
00:05:51,160 --> 00:05:56,110
colon and everything in between we

138
00:05:54,100 --> 00:06:00,669
actually want<font color="#E5E5E5"> to pull</font><font color="#CCCCCC"> out anything</font>

139
00:05:56,110 --> 00:06:06,490
that's not<font color="#E5E5E5"> a space and finally when we</font>

140
00:06:00,669 --> 00:06:09,310
get to error message we match on dot

141
00:06:06,490 --> 00:06:12,550
star to grab<font color="#E5E5E5"> everything until the end of</font>

142
00:06:09,310 --> 00:06:14,500
<font color="#E5E5E5">the line and so when we parse the log</font>

143
00:06:12,550 --> 00:06:15,970
lines earlier this morning we got back a

144
00:06:14,500 --> 00:06:18,610
list<font color="#E5E5E5"> of log lines so if you imagine</font>

145
00:06:15,970 --> 00:06:20,590
reading the syslog file we<font color="#E5E5E5"> have each log</font>

146
00:06:18,610 --> 00:06:22,660
line is one element in this<font color="#E5E5E5"> list that</font>

147
00:06:20,590 --> 00:06:24,900
we're walking<font color="#CCCCCC"> through so it's safe to</font>

148
00:06:22,660 --> 00:06:28,620
say that the end of this log line

149
00:06:24,900 --> 00:06:32,320
everything<font color="#CCCCCC"> from here on is the message</font>

150
00:06:28,620 --> 00:06:34,599
and so when<font color="#CCCCCC"> we go to combine this as a</font>

151
00:06:32,320 --> 00:06:36,639
single regex because what we want is to

152
00:06:34,599 --> 00:06:39,219
run a match against the entire log line

153
00:06:36,639 --> 00:06:43,030
as one unit and what we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get back</font>

154
00:06:39,220 --> 00:06:46,330
is all these individual pieces so

155
00:06:43,030 --> 00:06:49,599
earlier we built individual reg X's<font color="#E5E5E5"> to</font>

156
00:06:46,330 --> 00:06:51,880
match the components the date stamp the

157
00:06:49,599 --> 00:06:53,349
device name the error code a message for

158
00:06:51,880 --> 00:06:56,560
example

159
00:06:53,350 --> 00:07:00,150
since they are strings in<font color="#E5E5E5"> Python we can</font>

160
00:06:56,560 --> 00:07:03,130
use<font color="#CCCCCC"> just simple string note string our</font>

161
00:07:00,150 --> 00:07:05,260
methods for example like the plus sign

162
00:07:03,130 --> 00:07:07,750
to combine two or more strings together

163
00:07:05,260 --> 00:07:10,690
and so what I'm showing here<font color="#E5E5E5"> is that</font>

164
00:07:07,750 --> 00:07:13,120
we're actually combining each individual

165
00:07:10,690 --> 00:07:15,520
regex with another one that I skipped

166
00:07:13,120 --> 00:07:18,610
called column delimiter which is simply

167
00:07:15,520 --> 00:07:21,310
<font color="#E5E5E5">/ s plus because we're using spaces to</font>

168
00:07:18,610 --> 00:07:23,710
separate the sections we're just

169
00:07:21,310 --> 00:07:26,020
intermixing that here so what we're

170
00:07:23,710 --> 00:07:30,130
going to<font color="#E5E5E5"> get at the end here is this is</font>

171
00:07:26,020 --> 00:07:31,599
this a sis law or this of regular

172
00:07:30,130 --> 00:07:36,159
expression that will match the entire

173
00:07:31,600 --> 00:07:37,630
line at one time but because we have all

174
00:07:36,160 --> 00:07:39,070
these grouping elements around the

175
00:07:37,630 --> 00:07:41,530
different sections it's going to give<font color="#CCCCCC"> us</font>

176
00:07:39,070 --> 00:07:44,560
each of them as individual attributes of

177
00:07:41,530 --> 00:07:48,219
data so if we walk through actually you

178
00:07:44,560 --> 00:07:51,490
doing this again we have for wine in log

179
00:07:48,220 --> 00:07:54,040
lines the list of log lines we read we

180
00:07:51,490 --> 00:07:56,980
say matched equals the the result of

181
00:07:54,040 --> 00:07:58,510
running our V dot match and if you saw

182
00:07:56,980 --> 00:08:00,580
this<font color="#CCCCCC"> morning we imported the module</font>

183
00:07:58,510 --> 00:08:03,370
called re and<font color="#E5E5E5"> then we're using the</font>

184
00:08:00,580 --> 00:08:05,740
method called match passing in this is

185
00:08:03,370 --> 00:08:07,900
the pattern the syslog<font color="#E5E5E5"> or the the</font>

186
00:08:05,740 --> 00:08:12,040
regular expression is one thing followed

187
00:08:07,900 --> 00:08:14,679
by<font color="#E5E5E5"> the line if it did not match we</font><font color="#CCCCCC"> say</font>

188
00:08:12,040 --> 00:08:17,530
<font color="#CCCCCC">me and the flow of logic here and go</font>

189
00:08:14,680 --> 00:08:20,470
grab the next line and try<font color="#CCCCCC"> again but</font><font color="#E5E5E5"> if</font>

190
00:08:17,530 --> 00:08:23,049
<font color="#E5E5E5">it did match we're going</font><font color="#CCCCCC"> to expand out</font>

191
00:08:20,470 --> 00:08:26,980
the<font color="#CCCCCC"> results of the data that we</font><font color="#E5E5E5"> grabbed</font>

192
00:08:23,050 --> 00:08:28,240
by calling match groups and so matched

193
00:08:26,980 --> 00:08:30,910
here is an object<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> rate</font>

194
00:08:28,240 --> 00:08:33,640
expression module gave back<font color="#E5E5E5"> and it as a</font>

195
00:08:30,910 --> 00:08:36,729
method called groups that will return us

196
00:08:33,640 --> 00:08:40,510
back<font color="#E5E5E5"> oh the elements that matched in the</font>

197
00:08:36,729 --> 00:08:42,190
order that it matched and so what we see

198
00:08:40,510 --> 00:08:44,590
<font color="#CCCCCC">here is</font><font color="#E5E5E5"> we can assign each of those</font>

199
00:08:42,190 --> 00:08:46,930
attributes of data two variables

200
00:08:44,590 --> 00:08:49,060
directly for example date stamp

201
00:08:46,930 --> 00:08:51,760
<font color="#CCCCCC">timestamp device name error code and</font>

202
00:08:49,060 --> 00:08:53,619
error<font color="#E5E5E5"> message are now variables of</font>

203
00:08:51,760 --> 00:08:58,090
exactly that portion of data from the

204
00:08:53,620 --> 00:09:00,190
log message and so what we use just now

205
00:08:58,090 --> 00:09:03,070
is this call called groups off the

206
00:09:00,190 --> 00:09:05,080
matched object I want to<font color="#E5E5E5"> point out</font>

207
00:09:03,070 --> 00:09:07,209
because we we<font color="#CCCCCC"> covered this briefly this</font>

208
00:09:05,080 --> 00:09:08,860
morning<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that we're using print</font>

209
00:09:07,209 --> 00:09:12,670
this is in our regular expression

210
00:09:08,860 --> 00:09:16,629
pattern to say where is each group so<font color="#CCCCCC"> we</font>

211
00:09:12,670 --> 00:09:20,050
could build one giant regex to match all

212
00:09:16,629 --> 00:09:21,670
this and that could potentially work but

213
00:09:20,050 --> 00:09:23,679
by using these<font color="#E5E5E5"> parentheses intermix</font>

214
00:09:21,670 --> 00:09:25,959
between it we're saying<font color="#E5E5E5"> this is an</font>

215
00:09:23,679 --> 00:09:27,459
actual unit and we don't<font color="#E5E5E5"> really</font><font color="#CCCCCC"> care</font>

216
00:09:25,959 --> 00:09:29,229
about things<font color="#E5E5E5"> that are not in parentheses</font>

217
00:09:27,459 --> 00:09:32,949
even though we're using them to<font color="#E5E5E5"> do our</font>

218
00:09:29,230 --> 00:09:36,790
logic to match on so when we go through

219
00:09:32,949 --> 00:09:39,339
<font color="#CCCCCC">this because it's the final reg ex is a</font>

220
00:09:36,790 --> 00:09:41,259
string combined together that will

221
00:09:39,339 --> 00:09:45,550
maintain the order of each of these

222
00:09:41,259 --> 00:09:47,139
individual component reg<font color="#E5E5E5"> X's and so that</font>

223
00:09:45,550 --> 00:09:49,868
order is maintained as well for the

224
00:09:47,139 --> 00:09:52,360
grouping so when we call that groups the

225
00:09:49,869 --> 00:09:56,949
first group<font color="#E5E5E5"> will be the first thing in</font>

226
00:09:52,360 --> 00:09:59,800
the regex that matched<font color="#CCCCCC"> okay so we just</font>

227
00:09:56,949 --> 00:10:02,258
<font color="#CCCCCC">ended last section on this portion and</font>

228
00:09:59,800 --> 00:10:03,878
we really didn't<font color="#E5E5E5"> have time to try it out</font>

229
00:10:02,259 --> 00:10:05,290
so<font color="#E5E5E5"> I want to go</font><font color="#CCCCCC"> back to that so that</font>

230
00:10:03,879 --> 00:10:09,279
everybody has a chance to interact with

231
00:10:05,290 --> 00:10:16,868
<font color="#E5E5E5">this so in the virtual</font><font color="#CCCCCC"> machine that that</font>

232
00:10:09,279 --> 00:10:18,459
you've got<font color="#CCCCCC"> okay so back to the</font><font color="#E5E5E5"> virtual</font>

233
00:10:16,869 --> 00:10:20,949
machine if<font color="#E5E5E5"> you open up</font><font color="#CCCCCC"> the terminal it</font>

234
00:10:18,459 --> 00:10:22,479
automatically goes into ipython we have

235
00:10:20,949 --> 00:10:24,878
one hack in here in that we've already

236
00:10:22,480 --> 00:10:26,589
put<font color="#CCCCCC"> in the entire regex here so that you</font>

237
00:10:24,879 --> 00:10:28,360
can actually interact with it and not

238
00:10:26,589 --> 00:10:32,799
<font color="#CCCCCC">have to get stuck</font><font color="#E5E5E5"> on that part so if you</font>

239
00:10:28,360 --> 00:10:34,629
print in capital syslog re you'll see

240
00:10:32,799 --> 00:10:42,279
the entire regex that was combined in

241
00:10:34,629 --> 00:10:47,999
its final form and this is exactly so

242
00:10:42,279 --> 00:10:52,769
this is exactly what was passed it up

243
00:10:47,999 --> 00:10:52,769
there ok so yeah

244
00:10:55,970 --> 00:11:00,350
<font color="#E5E5E5">I just want make sure you can see this</font>

245
00:10:57,589 --> 00:11:02,449
so what we see here<font color="#E5E5E5"> is one large string</font>

246
00:11:00,350 --> 00:11:06,350
that is the regex we're using a parse

247
00:11:02,449 --> 00:11:08,779
against this syslog message it's a

248
00:11:06,350 --> 00:11:11,269
<font color="#E5E5E5">little hard to read right now but this</font>

249
00:11:08,779 --> 00:11:13,189
is everything<font color="#CCCCCC"> we built going up to it</font>

250
00:11:11,269 --> 00:11:15,709
<font color="#E5E5E5">and what we see</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> is actually</font>

251
00:11:13,189 --> 00:11:18,889
intermixed the grouping symbols so here

252
00:11:15,709 --> 00:11:20,839
we see group 1 followed by things<font color="#CCCCCC"> that</font>

253
00:11:18,889 --> 00:11:23,000
are outside<font color="#E5E5E5"> the grouping symbol those</font>

254
00:11:20,839 --> 00:11:25,069
are things for example<font color="#CCCCCC"> the / S Plus</font>

255
00:11:23,000 --> 00:11:27,079
that's the variable we called earlier

256
00:11:25,069 --> 00:11:28,939
called column delimiter we<font color="#E5E5E5"> don't really</font>

257
00:11:27,079 --> 00:11:31,638
<font color="#CCCCCC">care that they were in spaces because we</font>

258
00:11:28,939 --> 00:11:32,750
just want the data after it but we're

259
00:11:31,639 --> 00:11:34,699
going to<font color="#E5E5E5"> use this to separate between</font>

260
00:11:32,750 --> 00:11:37,490
the groups and so when this match is

261
00:11:34,699 --> 00:11:38,990
that will be thrown away and we'll<font color="#CCCCCC"> use</font>

262
00:11:37,490 --> 00:11:42,829
the data in between the grouping symbols

263
00:11:38,990 --> 00:11:45,589
so you can start<font color="#CCCCCC"> to see this so for</font>

264
00:11:42,829 --> 00:11:50,719
example the actual if we look at the

265
00:11:45,589 --> 00:11:52,250
logline world we're looking at<font color="#E5E5E5"> okay so</font>

266
00:11:50,720 --> 00:11:53,959
here's one of the log lines for example

267
00:11:52,250 --> 00:11:57,139
that we're going to<font color="#E5E5E5"> be parsing with this</font>

268
00:11:53,959 --> 00:11:58,369
<font color="#E5E5E5">red X and so log lines is a list of all</font>

269
00:11:57,139 --> 00:12:00,350
going to be read earlier and I'm<font color="#E5E5E5"> just</font>

270
00:11:58,370 --> 00:12:03,259
accessing the first line in this log

271
00:12:00,350 --> 00:12:05,980
lines list by calling bracket<font color="#CCCCCC"> zero it's</font>

272
00:12:03,259 --> 00:12:08,509
just a way to directly access an element

273
00:12:05,980 --> 00:12:10,000
so this<font color="#CCCCCC"> is the regex that's going to</font>

274
00:12:08,509 --> 00:12:12,680
match against it so we have<font color="#CCCCCC"> here</font>

275
00:12:10,000 --> 00:12:15,949
matching on the date<font color="#CCCCCC"> here's</font><font color="#E5E5E5"> going to</font>

276
00:12:12,680 --> 00:12:17,269
<font color="#CCCCCC">match on the time right here</font><font color="#E5E5E5"> and this</font>

277
00:12:15,949 --> 00:12:21,019
for<font color="#CCCCCC"> example will match the hostname and</font>

278
00:12:17,269 --> 00:12:23,360
so on<font color="#E5E5E5"> so you have this in</font><font color="#CCCCCC"> your ipython</font>

279
00:12:21,019 --> 00:12:25,639
right now so that<font color="#CCCCCC"> you don't have</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> have</font>

280
00:12:23,360 --> 00:12:27,620
to go through the pain of typing all

281
00:12:25,639 --> 00:12:30,319
that because<font color="#CCCCCC"> I want you to actually try</font>

282
00:12:27,620 --> 00:12:32,870
out interacting with the log lines and

283
00:12:30,319 --> 00:12:34,550
getting back this match data so if you

284
00:12:32,870 --> 00:12:38,660
taught and do for example for a line in

285
00:12:34,550 --> 00:12:41,719
log lines and try this out try saying

286
00:12:38,660 --> 00:12:44,449
matched equals the result<font color="#E5E5E5"> of our e dot</font>

287
00:12:41,720 --> 00:12:47,620
match and you're<font color="#CCCCCC"> going</font><font color="#E5E5E5"> to pass in the</font>

288
00:12:44,449 --> 00:12:50,209
first<font color="#E5E5E5"> thing is the pattern syslog re</font>

289
00:12:47,620 --> 00:12:54,620
followed by the thing to match against

290
00:12:50,209 --> 00:12:57,199
our line<font color="#CCCCCC"> and so this hasn't ran yet</font>

291
00:12:54,620 --> 00:12:58,610
because we're in ipython and so it's

292
00:12:57,199 --> 00:13:05,559
going to<font color="#E5E5E5"> let us type some more code so</font>

293
00:12:58,610 --> 00:13:08,329
let's say if it did not match continued

294
00:13:05,559 --> 00:13:09,889
which sin which allows us to grab the

295
00:13:08,329 --> 00:13:13,008
<font color="#E5E5E5">next line and try again</font>

296
00:13:09,889 --> 00:13:14,239
if it did though we know that if it did

297
00:13:13,009 --> 00:13:16,790
match we know that all those groups

298
00:13:14,239 --> 00:13:23,629
exist and so it's safe to access them

299
00:13:16,790 --> 00:13:28,399
and so we can now print matched<font color="#E5E5E5"> dot</font>

300
00:13:23,629 --> 00:13:29,959
groups for example and if<font color="#E5E5E5"> we hit enter</font>

301
00:13:28,399 --> 00:13:32,809
again that will actually get the logic

302
00:13:29,959 --> 00:13:35,899
and what we see now is that we have for

303
00:13:32,809 --> 00:13:38,868
each line that we walk through<font color="#E5E5E5"> a topple</font>

304
00:13:35,899 --> 00:13:44,869
back of each individual piece of the log

305
00:13:38,869 --> 00:13:46,549
message and so<font color="#E5E5E5"> that's still it's helpful</font>

306
00:13:44,869 --> 00:13:48,529
right now let's make<font color="#E5E5E5"> this a</font><font color="#CCCCCC"> little</font>

307
00:13:46,549 --> 00:13:50,209
smarter though we can directly assign

308
00:13:48,529 --> 00:13:51,499
those elements two variables and then

309
00:13:50,209 --> 00:13:53,238
our code can actually interact with

310
00:13:51,499 --> 00:13:57,799
those<font color="#E5E5E5"> variables by just changing that</font>

311
00:13:53,239 --> 00:13:59,919
slightly so we know<font color="#E5E5E5"> that we have five</font>

312
00:13:57,799 --> 00:14:02,569
things<font color="#E5E5E5"> that we're matching against and</font>

313
00:13:59,919 --> 00:14:04,549
we already<font color="#E5E5E5"> have names in our mind of</font>

314
00:14:02,569 --> 00:14:07,099
what these are the date stamp the time

315
00:14:04,549 --> 00:14:09,259
<font color="#E5E5E5">stamp the device name so we can directly</font>

316
00:14:07,100 --> 00:14:14,569
<font color="#E5E5E5">assign those two variables right now by</font>

317
00:14:09,259 --> 00:14:22,970
just doing this so we do date stamp

318
00:14:14,569 --> 00:14:24,639
comet I'm Sam<font color="#E5E5E5"> comma device come on then</font>

319
00:14:22,970 --> 00:14:28,759
the<font color="#CCCCCC"> next part was the error code and</font>

320
00:14:24,639 --> 00:14:29,929
then finally error message and will say

321
00:14:28,759 --> 00:14:35,029
that equals a result<font color="#E5E5E5"> of calling</font>

322
00:14:29,929 --> 00:14:36,709
matchlock groups at this<font color="#E5E5E5"> point we can</font>

323
00:14:35,029 --> 00:14:38,869
interact with the individual pieces of

324
00:14:36,709 --> 00:14:41,809
data from our log line for example

325
00:14:38,869 --> 00:14:47,209
device we see now that we're looking<font color="#CCCCCC"> at</font>

326
00:14:41,809 --> 00:14:51,049
switch to<font color="#E5E5E5"> and error code and finally</font>

327
00:14:47,209 --> 00:14:52,549
error message so this<font color="#CCCCCC"> is one of</font><font color="#E5E5E5"> the</font>

328
00:14:51,049 --> 00:14:54,199
really big hurdles to getting into

329
00:14:52,549 --> 00:14:55,519
<font color="#E5E5E5">building something like f bar or</font>

330
00:14:54,199 --> 00:14:58,248
automating these kinds of problems

331
00:14:55,519 --> 00:15:00,919
because<font color="#CCCCCC"> it is a lot to get over it until</font>

332
00:14:58,249 --> 00:15:03,439
you<font color="#E5E5E5"> get to this point because you've got</font>

333
00:15:00,919 --> 00:15:04,970
<font color="#E5E5E5">to get familiar with reg exes but the</font>

334
00:15:03,439 --> 00:15:07,309
cool part is that we just<font color="#E5E5E5"> built a</font>

335
00:15:04,970 --> 00:15:09,980
pattern that<font color="#CCCCCC"> matches every message sent</font>

336
00:15:07,309 --> 00:15:11,660
by this platform in this vendor so if

337
00:15:09,980 --> 00:15:14,149
you only have one vendor and maybe even

338
00:15:11,660 --> 00:15:15,889
only<font color="#E5E5E5"> one major platform you don't have</font>

339
00:15:14,149 --> 00:15:18,499
to do that part once to get the regex

340
00:15:15,889 --> 00:15:21,319
parsing into data and if you<font color="#E5E5E5"> and even if</font>

341
00:15:18,499 --> 00:15:22,850
you have a handful of vendors once

342
00:15:21,319 --> 00:15:23,959
you've got the first one down the rest

343
00:15:22,850 --> 00:15:25,340
you'll see are a lot easier

344
00:15:23,960 --> 00:15:27,350
a plug-and-play<font color="#E5E5E5"> you just keep trying</font>

345
00:15:25,340 --> 00:15:34,030
different combinations until you get

346
00:15:27,350 --> 00:15:34,030
back the data that<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> okay cool so</font>

347
00:15:34,870 --> 00:15:37,870
yeah

348
00:15:40,920 --> 00:15:51,849
<font color="#E5E5E5">okay so let's put that to use let's try</font>

349
00:15:44,920 --> 00:15:56,979
building our first remediation now<font color="#E5E5E5"> okay</font>

350
00:15:51,850 --> 00:15:58,749
so I i mentioned earlier that the vm is

351
00:15:56,980 --> 00:16:02,230
customized with some other modules and

352
00:15:58,749 --> 00:16:05,470
<font color="#E5E5E5">such one is this thing called para</font><font color="#CCCCCC"> miko</font>

353
00:16:02,230 --> 00:16:09,369
which is a<font color="#CCCCCC"> python library</font><font color="#E5E5E5"> to do direct</font>

354
00:16:05,470 --> 00:16:11,790
ssh from<font color="#E5E5E5"> python code it's not normally</font>

355
00:16:09,369 --> 00:16:14,559
with<font color="#E5E5E5"> python but it is a an external</font>

356
00:16:11,790 --> 00:16:15,790
download or install still simple<font color="#E5E5E5"> to</font>

357
00:16:14,559 --> 00:16:19,059
install but we have that on the vm

358
00:16:15,790 --> 00:16:21,368
already it does take some legwork and

359
00:16:19,059 --> 00:16:23,769
out of the out<font color="#E5E5E5"> of respect for time I'm</font>

360
00:16:21,369 --> 00:16:26,350
not showing you that legwork but I'm

361
00:16:23,769 --> 00:16:27,850
<font color="#E5E5E5">doing something different I'm giving you</font>

362
00:16:26,350 --> 00:16:30,489
what we use at<font color="#E5E5E5"> Facebook to make that</font>

363
00:16:27,850 --> 00:16:32,980
like work easier it's a file called<font color="#E5E5E5"> SSH</font>

364
00:16:30,489 --> 00:16:35,369
helper that<font color="#E5E5E5"> you'll see</font><font color="#CCCCCC"> in the vm on the</font>

365
00:16:32,980 --> 00:16:38,139
USB key and also on the<font color="#CCCCCC"> Google Drive way</font>

366
00:16:35,369 --> 00:16:40,809
it's almost word for word exactly what

367
00:16:38,139 --> 00:16:42,069
we use to interact with ssh it's simply

368
00:16:40,809 --> 00:16:44,889
<font color="#CCCCCC">a helper that handles all the</font>

369
00:16:42,069 --> 00:16:46,419
boilerplate code of exactly how<font color="#E5E5E5"> to set</font>

370
00:16:44,889 --> 00:16:48,009
up the<font color="#E5E5E5"> connection how to do some</font>

371
00:16:46,419 --> 00:16:49,869
specific things<font color="#E5E5E5"> that make it work for</font>

372
00:16:48,009 --> 00:16:52,299
network devices versus servers for

373
00:16:49,869 --> 00:16:53,980
example and some ways to make it a

374
00:16:52,299 --> 00:16:56,559
little easier so<font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to be</font>

375
00:16:53,980 --> 00:16:58,269
downloading with that module so you know

376
00:16:56,559 --> 00:17:00,339
how to<font color="#CCCCCC"> use it because it's much simpler</font>

377
00:16:58,269 --> 00:17:02,949
to start with<font color="#CCCCCC"> that then to actually open</font>

378
00:17:00,339 --> 00:17:06,010
the whole<font color="#CCCCCC"> ssh logic and walk through</font>

379
00:17:02,949 --> 00:17:07,539
that so the<font color="#E5E5E5"> first part here to get as</font>

380
00:17:06,010 --> 00:17:09,339
and to get output from the device using

381
00:17:07,539 --> 00:17:15,158
<font color="#CCCCCC">SSH is that we're going to import this</font>

382
00:17:09,339 --> 00:17:16,869
module called<font color="#CCCCCC"> SSH helper okay so if you</font>

383
00:17:15,159 --> 00:17:18,610
just<font color="#E5E5E5"> if you're not in the vm</font><font color="#CCCCCC"> and you</font>

384
00:17:16,869 --> 00:17:21,099
just type that this is probably<font color="#E5E5E5"> what you</font>

385
00:17:18,609 --> 00:17:23,168
saw so<font color="#CCCCCC"> i tried this on my mac natively</font>

386
00:17:21,099 --> 00:17:25,178
before i installed it<font color="#E5E5E5"> i get a trace back</font>

387
00:17:23,169 --> 00:17:28,600
that says import error no module para me

388
00:17:25,179 --> 00:17:30,669
go it's a<font color="#E5E5E5"> simple fix but it is something</font>

389
00:17:28,600 --> 00:17:32,889
<font color="#E5E5E5">to be aware of and if you</font><font color="#CCCCCC"> miss the talk</font>

390
00:17:30,669 --> 00:17:34,750
earlier one comment about<font color="#CCCCCC"> python and</font>

391
00:17:32,889 --> 00:17:36,519
specific that makes it a little

392
00:17:34,750 --> 00:17:38,169
different than some of the languages so

393
00:17:36,519 --> 00:17:40,690
it's what's called an interpreted

394
00:17:38,169 --> 00:17:43,090
language meaning that any<font color="#CCCCCC"> Python code</font>

395
00:17:40,690 --> 00:17:44,590
runs against the local interpreter and

396
00:17:43,090 --> 00:17:47,879
whatever files are installed in that

397
00:17:44,590 --> 00:17:50,649
machine parole<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> same same way</font>

398
00:17:47,880 --> 00:17:52,419
which means that<font color="#E5E5E5"> if I have paramedic Oh</font>

399
00:17:50,649 --> 00:17:54,239
installed and I build all this code and

400
00:17:52,419 --> 00:17:55,620
then I ship it<font color="#E5E5E5"> to another server</font>

401
00:17:54,240 --> 00:17:57,809
and that server does not impair amiko

402
00:17:55,620 --> 00:17:59,159
installed my code will no longer run and

403
00:17:57,809 --> 00:18:00,629
so I now I need to<font color="#E5E5E5"> worry about what's</font>

404
00:17:59,160 --> 00:18:03,330
called a dependency of installing<font color="#E5E5E5"> para</font>

405
00:18:00,630 --> 00:18:04,770
mica it<font color="#E5E5E5"> is just</font><font color="#CCCCCC"> a cat food caveat to be</font>

406
00:18:03,330 --> 00:18:07,919
aware of in there in like production

407
00:18:04,770 --> 00:18:10,889
<font color="#E5E5E5">environments but if you if you're on</font>

408
00:18:07,920 --> 00:18:12,240
<font color="#E5E5E5">something uh like Linux it slightly</font>

409
00:18:10,890 --> 00:18:14,610
different on Mac but if you're on Linux

410
00:18:12,240 --> 00:18:17,880
for example like ubuntu for here we have

411
00:18:14,610 --> 00:18:20,040
<font color="#E5E5E5">this handy helper called pip which is</font>

412
00:18:17,880 --> 00:18:21,840
part of one<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> python packages that</font>

413
00:18:20,040 --> 00:18:24,870
<font color="#E5E5E5">you can install for on a bun to which</font>

414
00:18:21,840 --> 00:18:26,250
automates locating and installing of

415
00:18:24,870 --> 00:18:28,530
third-party modules that are not

416
00:18:26,250 --> 00:18:29,940
natively with it so if you were if you

417
00:18:28,530 --> 00:18:33,540
<font color="#CCCCCC">were missing harami Co you could</font><font color="#E5E5E5"> simply</font>

418
00:18:29,940 --> 00:18:35,100
type sudo pip install para Miko the

419
00:18:33,540 --> 00:18:36,480
pseudo here being that it requires root

420
00:18:35,100 --> 00:18:41,070
privileges because it's installing in

421
00:18:36,480 --> 00:18:43,320
non user directories and it's just a few

422
00:18:41,070 --> 00:18:45,210
lines and that's relatively quick now if

423
00:18:43,320 --> 00:18:46,710
you do not have pip you can also install

424
00:18:45,210 --> 00:18:48,809
this from source which<font color="#CCCCCC"> is what</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> for</font>

425
00:18:46,710 --> 00:18:52,650
the<font color="#E5E5E5"> vm it's a little bit more involved</font>

426
00:18:48,809 --> 00:18:53,760
but it's not that<font color="#CCCCCC"> much more</font><font color="#E5E5E5"> ok cool</font>

427
00:18:52,650 --> 00:18:54,750
let's go back to<font color="#CCCCCC"> what we're actually</font>

428
00:18:53,760 --> 00:18:56,429
building though because at the end of

429
00:18:54,750 --> 00:18:57,980
the day we want to build something<font color="#E5E5E5"> to</font>

430
00:18:56,429 --> 00:19:00,900
handle some of these<font color="#CCCCCC"> Network faults and</font>

431
00:18:57,980 --> 00:19:02,570
make our lives easier by either

432
00:19:00,900 --> 00:19:05,040
troubleshooting it for us and

433
00:19:02,570 --> 00:19:06,510
potentially redirecting traffic or at

434
00:19:05,040 --> 00:19:08,428
least doing enough of the work so that

435
00:19:06,510 --> 00:19:15,240
we know exactly<font color="#E5E5E5"> what's wrong without</font>

436
00:19:08,429 --> 00:19:18,540
having<font color="#CCCCCC"> to dive into it ok so we're back</font>

437
00:19:15,240 --> 00:19:22,460
to our log line our log message switch

438
00:19:18,540 --> 00:19:25,230
one interface down interface remove and

439
00:19:22,460 --> 00:19:27,300
so this<font color="#E5E5E5"> is right</font><font color="#CCCCCC"> where we left off</font>

440
00:19:25,230 --> 00:19:30,179
earlier we parsed out the individual

441
00:19:27,300 --> 00:19:32,250
pieces of data from aunt and so<font color="#E5E5E5"> now we</font>

442
00:19:30,179 --> 00:19:35,960
have<font color="#E5E5E5"> these attributes that are the</font>

443
00:19:32,250 --> 00:19:40,080
result<font color="#CCCCCC"> of calling match talk groups and</font>

444
00:19:35,960 --> 00:19:42,960
so simply put we can just look at the

445
00:19:40,080 --> 00:19:45,149
individual error codes and start

446
00:19:42,960 --> 00:19:47,420
building<font color="#CCCCCC"> a map of them from our own</font>

447
00:19:45,150 --> 00:19:50,010
experience of what these might represent

448
00:19:47,420 --> 00:19:51,570
the same in<font color="#E5E5E5"> the same way that as a</font>

449
00:19:50,010 --> 00:19:53,309
<font color="#E5E5E5">network engineer when you see certain</font>

450
00:19:51,570 --> 00:19:55,290
messages you automatically troubleshoot

451
00:19:53,309 --> 00:19:56,970
in a certain way we're going<font color="#E5E5E5"> to build</font>

452
00:19:55,290 --> 00:20:02,399
our code to do just that<font color="#E5E5E5"> as well because</font>

453
00:19:56,970 --> 00:20:05,000
it's replicating us so we say if I have

454
00:20:02,400 --> 00:20:07,820
down interface removed in error code

455
00:20:05,000 --> 00:20:10,010
well this if we look at<font color="#CCCCCC"> our</font><font color="#E5E5E5"> the code we</font>

456
00:20:07,820 --> 00:20:12,460
earlier the demo we're going to print

457
00:20:10,010 --> 00:20:14,390
hey I found a known error on and then

458
00:20:12,460 --> 00:20:16,100
we're using something<font color="#E5E5E5"> new here we're</font>

459
00:20:14,390 --> 00:20:18,380
using string substitution to interject

460
00:20:16,100 --> 00:20:21,020
the device name in this in the<font color="#E5E5E5"> middle of</font>

461
00:20:18,380 --> 00:20:23,270
this string using these braces with the

462
00:20:21,020 --> 00:20:26,389
<font color="#E5E5E5">0 and then finally attempting</font>

463
00:20:23,270 --> 00:20:27,770
remediation and then to do that sir u

464
00:20:26,390 --> 00:20:30,410
substitution we just called it use this

465
00:20:27,770 --> 00:20:32,000
<font color="#CCCCCC">dot format call in doc format takes in</font>

466
00:20:30,410 --> 00:20:34,450
one or more arguments and it will

467
00:20:32,000 --> 00:20:37,010
<font color="#E5E5E5">replace the things in braces with those</font>

468
00:20:34,450 --> 00:20:45,950
the<font color="#E5E5E5"> 0 here being</font><font color="#CCCCCC"> the first thing if</font>

469
00:20:37,010 --> 00:20:48,140
there<font color="#E5E5E5"> were multiple so what we go next</font>

470
00:20:45,950 --> 00:20:49,730
<font color="#E5E5E5">to is that we need to actually start</font>

471
00:20:48,140 --> 00:20:52,280
interacting with<font color="#E5E5E5"> this device to get some</font>

472
00:20:49,730 --> 00:20:53,600
more<font color="#E5E5E5"> data to troubleshoot it so this</font><font color="#CCCCCC"> is</font>

473
00:20:52,280 --> 00:20:55,399
where regular expressions come back and

474
00:20:53,600 --> 00:20:56,929
that we really want<font color="#CCCCCC"> to issue the</font>

475
00:20:55,400 --> 00:20:58,880
equipment like show interface and get

476
00:20:56,930 --> 00:21:00,350
some stats about the device for example

477
00:20:58,880 --> 00:21:02,900
is the<font color="#E5E5E5"> interface still down</font><font color="#CCCCCC"> did it come</font>

478
00:21:00,350 --> 00:21:06,889
back<font color="#E5E5E5"> up so here we build another simple</font>

479
00:21:02,900 --> 00:21:09,530
regex to say parse out the module number

480
00:21:06,890 --> 00:21:10,970
of the interface and what<font color="#CCCCCC"> I</font><font color="#E5E5E5"> mentioned</font>

481
00:21:09,530 --> 00:21:12,530
early this morning is that<font color="#E5E5E5"> we're</font>

482
00:21:10,970 --> 00:21:15,170
approaching this log message as being

483
00:21:12,530 --> 00:21:16,610
suspect for a line card failure so even

484
00:21:15,170 --> 00:21:19,010
though it<font color="#CCCCCC"> says interface removed which</font>

485
00:21:16,610 --> 00:21:21,620
could be something simply as simple as

486
00:21:19,010 --> 00:21:22,940
pulling an optic out in the case<font color="#CCCCCC"> that</font>

487
00:21:21,620 --> 00:21:24,949
prompted this remediation we saw

488
00:21:22,940 --> 00:21:27,140
interface removed for all 48 ports on a

489
00:21:24,950 --> 00:21:29,360
line card at the exact same time the

490
00:21:27,140 --> 00:21:30,530
line car crashed and rebooted and there

491
00:21:29,360 --> 00:21:33,850
was no other message that the linker

492
00:21:30,530 --> 00:21:35,960
crashed so we built the logic<font color="#CCCCCC"> here</font>

493
00:21:33,850 --> 00:21:37,429
saying that when we see this let's at

494
00:21:35,960 --> 00:21:39,650
least troubleshoot the module because

495
00:21:37,430 --> 00:21:42,620
<font color="#E5E5E5">maybe that suspect of a software glitch</font>

496
00:21:39,650 --> 00:21:44,540
<font color="#E5E5E5">versus a hardware problem so here we're</font>

497
00:21:42,620 --> 00:21:46,610
<font color="#E5E5E5">going to peace out just the module</font>

498
00:21:44,540 --> 00:21:50,379
number and it's a slightly different

499
00:21:46,610 --> 00:21:59,469
regex than before in that we're saying

500
00:21:50,380 --> 00:22:03,350
dot plus followed by / d<font color="#E5E5E5"> plus in</font>

501
00:21:59,470 --> 00:22:04,910
parentheses so the<font color="#CCCCCC"> parentheses</font><font color="#E5E5E5"> here are</font>

502
00:22:03,350 --> 00:22:08,469
the thing we care about when we finally

503
00:22:04,910 --> 00:22:12,640
do the match but after<font color="#CCCCCC"> that we have a</font>

504
00:22:08,470 --> 00:22:16,390
forward slash followed by another

505
00:22:12,640 --> 00:22:16,390
followed by a backslash

506
00:22:16,930 --> 00:22:22,330
I think I slightly<font color="#E5E5E5"> screwed that up but</font>

507
00:22:20,200 --> 00:22:24,070
uh what I meant to say is we're trying

508
00:22:22,330 --> 00:22:27,399
to do an exact match on the forward

509
00:22:24,070 --> 00:22:28,929
slash because of the forward slash this

510
00:22:27,400 --> 00:22:30,820
screenshot is a little knew it my few

511
00:22:28,930 --> 00:22:34,930
slightly wrong but what we're trying<font color="#E5E5E5"> to</font>

512
00:22:30,820 --> 00:22:37,330
get here is to match out five from a 5 /

513
00:22:34,930 --> 00:22:38,740
<font color="#E5E5E5">1 and we're using things around the</font>

514
00:22:37,330 --> 00:22:40,570
grouping symbols to get to that point

515
00:22:38,740 --> 00:22:43,570
because we're running<font color="#CCCCCC"> this this regex</font>

516
00:22:40,570 --> 00:22:44,770
against the error message so here the

517
00:22:43,570 --> 00:22:47,200
error message is everything from

518
00:22:44,770 --> 00:22:50,470
interface ethernet 5 /<font color="#E5E5E5"> 1 is down to the</font>

519
00:22:47,200 --> 00:22:56,050
<font color="#E5E5E5">end when we run that we get back this</font>

520
00:22:50,470 --> 00:22:58,060
thing called interface and so when I

521
00:22:56,050 --> 00:23:01,169
when I looked<font color="#E5E5E5"> at this earlier i said if</font>

522
00:22:58,060 --> 00:23:03,940
not<font color="#E5E5E5"> interface or if not match continued</font>

523
00:23:01,170 --> 00:23:05,080
<font color="#E5E5E5">i'm showing you here what actually the</font>

524
00:23:03,940 --> 00:23:06,880
if statement is doing it under the

525
00:23:05,080 --> 00:23:08,470
covers it simply is calling the

526
00:23:06,880 --> 00:23:10,900
equivalent of the bull function to say

527
00:23:08,470 --> 00:23:15,250
does this evaluate actually as true or

528
00:23:10,900 --> 00:23:17,200
false so if i print the result of

529
00:23:15,250 --> 00:23:20,230
calling both with the<font color="#E5E5E5"> value of interface</font>

530
00:23:17,200 --> 00:23:23,040
i see<font color="#E5E5E5"> that it's true here so if i simply</font>

531
00:23:20,230 --> 00:23:26,740
printed interface I would get<font color="#E5E5E5"> back and</font>

532
00:23:23,040 --> 00:23:28,629
the object would print which wouldn't

533
00:23:26,740 --> 00:23:30,730
really tell me much other than<font color="#CCCCCC"> that the</font>

534
00:23:28,630 --> 00:23:32,830
class name and the memory pointer would

535
00:23:30,730 --> 00:23:34,570
be shown because<font color="#E5E5E5"> those are defaults that</font>

536
00:23:32,830 --> 00:23:38,020
print when the<font color="#E5E5E5"> actual code doesn't</font>

537
00:23:34,570 --> 00:23:39,639
define what prints but here i simply

538
00:23:38,020 --> 00:23:42,850
<font color="#E5E5E5">just want to know at this point that</font>

539
00:23:39,640 --> 00:23:46,090
this<font color="#E5E5E5"> regex did match and so now</font><font color="#CCCCCC"> i can</font>

540
00:23:42,850 --> 00:23:47,800
use the data from<font color="#CCCCCC"> the match to</font>

541
00:23:46,090 --> 00:23:50,860
intersperse that in new command that I

542
00:23:47,800 --> 00:23:52,510
issue to the device so what I'm trying

543
00:23:50,860 --> 00:23:55,060
<font color="#CCCCCC">to</font><font color="#E5E5E5"> get</font><font color="#CCCCCC"> to is the equipment</font><font color="#E5E5E5"> of running</font>

544
00:23:52,510 --> 00:23:58,150
show module<font color="#CCCCCC"> 5 because i want to</font><font color="#E5E5E5"> see if</font>

545
00:23:55,060 --> 00:24:01,510
module 5 is still down or if it came

546
00:23:58,150 --> 00:24:04,390
back and so when<font color="#CCCCCC"> i look</font><font color="#E5E5E5"> at the mashed</font>

547
00:24:01,510 --> 00:24:06,910
object i got back i can use this<font color="#CCCCCC"> group</font>

548
00:24:04,390 --> 00:24:10,120
method again and pass in the number to

549
00:24:06,910 --> 00:24:12,010
say what group i want to get and by

550
00:24:10,120 --> 00:24:14,020
saying group 1 i'm going<font color="#CCCCCC"> to grab the</font>

551
00:24:12,010 --> 00:24:17,710
first set of<font color="#CCCCCC"> parentheses which in this</font>

552
00:24:14,020 --> 00:24:20,530
case we only<font color="#E5E5E5"> have one set which is going</font>

553
00:24:17,710 --> 00:24:26,800
<font color="#E5E5E5">to match the</font><font color="#CCCCCC"> / t</font><font color="#E5E5E5"> plus before the the /</font>

554
00:24:20,530 --> 00:24:28,690
oh<font color="#E5E5E5"> i was wrong</font><font color="#CCCCCC"> i that is going to that</font>

555
00:24:26,800 --> 00:24:30,730
is going to<font color="#E5E5E5"> work so ignore what i</font>

556
00:24:28,690 --> 00:24:32,850
mentioned on the / that should match so

557
00:24:30,730 --> 00:24:34,540
we mentioned<font color="#CCCCCC"> earlier</font><font color="#E5E5E5"> the backslash</font>

558
00:24:32,850 --> 00:24:37,418
indicates that a<font color="#E5E5E5"> pattern-matching</font>

559
00:24:34,540 --> 00:24:39,668
character follows the forward slash is

560
00:24:37,419 --> 00:24:42,970
not actually is not going<font color="#E5E5E5"> to match</font>

561
00:24:39,669 --> 00:24:44,559
anything but there are ways where you

562
00:24:42,970 --> 00:24:46,299
use the forward slash to say ignore<font color="#CCCCCC"> what</font>

563
00:24:44,559 --> 00:24:48,070
follows but in this case it should match

564
00:24:46,299 --> 00:24:51,690
the exact /but throw it away because

565
00:24:48,070 --> 00:24:53,918
<font color="#E5E5E5">it's outside</font><font color="#CCCCCC"> of the grouping characters</font>

566
00:24:51,690 --> 00:24:55,059
so that gives<font color="#E5E5E5"> us the module number and</font>

567
00:24:53,919 --> 00:24:58,960
if we<font color="#E5E5E5"> print the</font><font color="#CCCCCC"> Monge number we have</font>

568
00:24:55,059 --> 00:25:00,129
five<font color="#CCCCCC"> okay cool</font><font color="#E5E5E5"> so we're trying to get</font>

569
00:24:58,960 --> 00:25:02,500
and starting to grow here a little bit

570
00:25:00,130 --> 00:25:06,340
so now we can build a command to send to

571
00:25:02,500 --> 00:25:10,690
the device show module<font color="#CCCCCC"> five and then try</font>

572
00:25:06,340 --> 00:25:12,189
to try to run<font color="#E5E5E5"> this okay so that was a</font>

573
00:25:10,690 --> 00:25:13,360
lot<font color="#E5E5E5"> to throw at you real quick so I want</font>

574
00:25:12,190 --> 00:25:18,400
<font color="#E5E5E5">to break for another quick tried out</font>

575
00:25:13,360 --> 00:25:20,439
section I want you to create a<font color="#E5E5E5"> regex to</font>

576
00:25:18,400 --> 00:25:24,250
pull out the<font color="#E5E5E5"> module number from what</font>

577
00:25:20,440 --> 00:25:25,690
I've shown here ethernet for / 48 so in

578
00:25:24,250 --> 00:25:28,000
<font color="#E5E5E5">your ipython she'll go and create a</font>

579
00:25:25,690 --> 00:25:30,490
string that's<font color="#E5E5E5"> equivalent to eat it up</font>

580
00:25:28,000 --> 00:25:33,130
force us 48 and then try<font color="#E5E5E5"> to build a</font>

581
00:25:30,490 --> 00:25:35,020
regex that will match against this and

582
00:25:33,130 --> 00:25:38,590
supposedly match and pull<font color="#CCCCCC"> out just</font><font color="#E5E5E5"> the</font>

583
00:25:35,020 --> 00:25:40,750
number for once you get that try

584
00:25:38,590 --> 00:25:42,790
substituting that<font color="#E5E5E5"> number into</font><font color="#CCCCCC"> the</font>

585
00:25:40,750 --> 00:25:44,679
command show module and try printing

586
00:25:42,790 --> 00:25:46,899
that we're going<font color="#E5E5E5"> to take a few minute</font>

587
00:25:44,679 --> 00:25:48,070
break for<font color="#E5E5E5"> this I we also have helpers</font>

588
00:25:46,900 --> 00:25:49,870
throughout so if you get stuck or have

589
00:25:48,070 --> 00:25:52,990
questions please throw your hand up my

590
00:25:49,870 --> 00:25:56,409
helpers are branded up front I've also

591
00:25:52,990 --> 00:26:00,360
got Joe up front and TJ over here as

592
00:25:56,410 --> 00:26:00,360
well cool so go<font color="#E5E5E5"> and give that a try</font>

593
00:29:06,310 --> 00:29:11,470
so if you take<font color="#E5E5E5"> a look</font><font color="#CCCCCC"> at the screen</font>

594
00:29:08,110 --> 00:29:13,149
where I just<font color="#CCCCCC"> tried this out as well out</font>

595
00:29:11,470 --> 00:29:15,640
of curiosity I just wanted to<font color="#E5E5E5"> try seeing</font>

596
00:29:13,150 --> 00:29:17,200
if I could build a regex that was a

597
00:29:15,640 --> 00:29:23,890
little bit more constrained to only

598
00:29:17,200 --> 00:29:25,060
<font color="#E5E5E5">match the digits so my first try so</font>

599
00:29:23,890 --> 00:29:27,940
here's here's where i created the

600
00:29:25,060 --> 00:29:29,770
message ethernet for size 48 is down and

601
00:29:27,940 --> 00:29:32,920
what we're<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to parse out is this</font>

602
00:29:29,770 --> 00:29:34,720
monomer the number four so you might

603
00:29:32,920 --> 00:29:36,910
have immediately thought of trying what

604
00:29:34,720 --> 00:29:41,080
<font color="#CCCCCC">i did here</font><font color="#E5E5E5"> of saying well let's just</font>

605
00:29:36,910 --> 00:29:46,680
look at the set of digits broken out by

606
00:29:41,080 --> 00:29:49,419
the slash in some cases that might work

607
00:29:46,680 --> 00:29:51,490
but not with the re not match method

608
00:29:49,420 --> 00:29:53,410
there's another method that<font color="#E5E5E5"> would call</font>

609
00:29:51,490 --> 00:29:55,630
it already not find all but we're not

610
00:29:53,410 --> 00:29:59,950
working with that right now but if we

611
00:29:55,630 --> 00:30:05,310
try to call re not matched it's going to

612
00:29:59,950 --> 00:30:08,980
<font color="#E5E5E5">try to match this at the beginning and</font>

613
00:30:05,310 --> 00:30:11,889
so we call this is oh so right now<font color="#E5E5E5"> i</font>

614
00:30:08,980 --> 00:30:14,170
have<font color="#E5E5E5"> ethernet in front of that so</font>

615
00:30:11,890 --> 00:30:15,790
<font color="#E5E5E5">because i don't say anything and he's in</font>

616
00:30:14,170 --> 00:30:17,500
front<font color="#E5E5E5"> of this this is the equivalent of</font>

617
00:30:15,790 --> 00:30:19,840
having like the carrot<font color="#E5E5E5"> there start a</font>

618
00:30:17,500 --> 00:30:22,060
line and so I called matched and I said

619
00:30:19,840 --> 00:30:24,909
are you doubt matched passing in my reg

620
00:30:22,060 --> 00:30:28,450
ex and followed by the message when I

621
00:30:24,910 --> 00:30:31,860
printed it earlier I got<font color="#E5E5E5"> none when I</font>

622
00:30:28,450 --> 00:30:34,150
change that to say match on dot plus so

623
00:30:31,860 --> 00:30:37,840
anything and one or more<font color="#CCCCCC"> of anything</font>

624
00:30:34,150 --> 00:30:39,520
before it then it did match and what<font color="#E5E5E5"> I</font>

625
00:30:37,840 --> 00:30:42,310
did here is I printed matched again and

626
00:30:39,520 --> 00:30:46,450
I get back the generic print statement

627
00:30:42,310 --> 00:30:47,860
for an<font color="#CCCCCC"> object that doesn't</font><font color="#E5E5E5"> really tell</font>

628
00:30:46,450 --> 00:30:49,990
you much other<font color="#E5E5E5"> than that it didn't match</font>

629
00:30:47,860 --> 00:30:51,429
because you've got<font color="#E5E5E5"> an object back and so</font>

630
00:30:49,990 --> 00:30:55,690
<font color="#CCCCCC">what we could you now is say print</font>

631
00:30:51,430 --> 00:30:57,970
matched group and we could say group<font color="#CCCCCC"> one</font>

632
00:30:55,690 --> 00:31:00,850
since we know<font color="#CCCCCC"> that the module number is</font>

633
00:30:57,970 --> 00:31:04,050
group<font color="#CCCCCC"> one like we use earlier we can</font>

634
00:31:00,850 --> 00:31:06,879
actually<font color="#E5E5E5"> also use groups so group</font>

635
00:31:04,050 --> 00:31:08,230
singular takes in the exact and input of

636
00:31:06,880 --> 00:31:11,680
the number of the group you want<font color="#E5E5E5"> to</font>

637
00:31:08,230 --> 00:31:13,660
<font color="#E5E5E5">access if we call groups plural with no</font>

638
00:31:11,680 --> 00:31:18,190
input we get back a toughie love what

639
00:31:13,660 --> 00:31:19,690
matched now having the couple of one

640
00:31:18,190 --> 00:31:21,789
element is still

641
00:31:19,690 --> 00:31:23,379
a little tricky but if you had five like

642
00:31:21,789 --> 00:31:27,700
we had<font color="#CCCCCC"> earlier we get all five is one</font>

643
00:31:23,379 --> 00:31:31,389
thing so right now we have the module

644
00:31:27,700 --> 00:31:34,000
number as the<font color="#CCCCCC"> result so we could say</font>

645
00:31:31,389 --> 00:31:37,750
module number equals the output of

646
00:31:34,000 --> 00:31:43,929
matched group and call one so we print

647
00:31:37,750 --> 00:31:45,700
module number we<font color="#E5E5E5"> can now use that to</font>

648
00:31:43,929 --> 00:31:47,769
build into the<font color="#E5E5E5"> command that we want to</font>

649
00:31:45,700 --> 00:31:50,860
run against the device for example if we

650
00:31:47,769 --> 00:31:52,750
say command equals show module and then

651
00:31:50,860 --> 00:31:56,139
we put in the string substitution

652
00:31:52,750 --> 00:31:59,409
characters using these brace notations

653
00:31:56,139 --> 00:32:01,090
followed by the<font color="#E5E5E5"> number of the thing</font>

654
00:31:59,409 --> 00:32:03,429
we're going<font color="#E5E5E5"> to substitute when</font><font color="#CCCCCC"> there for</font>

655
00:32:01,090 --> 00:32:07,168
example if there's multiple things at

656
00:32:03,429 --> 00:32:10,389
substitute<font color="#E5E5E5"> you could actually say like</font>

657
00:32:07,169 --> 00:32:12,519
13 like like<font color="#E5E5E5"> so and it's just counting</font>

658
00:32:10,389 --> 00:32:13,539
the number of the inputs but<font color="#CCCCCC"> says we</font>

659
00:32:12,519 --> 00:32:17,080
<font color="#E5E5E5">only have</font><font color="#CCCCCC"> one we're just going</font><font color="#E5E5E5"> to say</font>

660
00:32:13,539 --> 00:32:19,570
show module price 0 and then called up

661
00:32:17,080 --> 00:32:21,279
<font color="#E5E5E5">format after that to replace</font><font color="#CCCCCC"> the brace</font>

662
00:32:19,570 --> 00:32:25,269
with the thing which is<font color="#E5E5E5"> in this case</font>

663
00:32:21,279 --> 00:32:29,590
module number and then if we print

664
00:32:25,269 --> 00:32:33,389
command we have show module for a

665
00:32:29,590 --> 00:32:33,389
command that we might type on the device

666
00:32:38,870 --> 00:32:43,429
<font color="#E5E5E5">okay cool so</font><font color="#CCCCCC"> let's actually go back to</font>

667
00:32:41,000 --> 00:32:47,450
using that and really try out talking to

668
00:32:43,430 --> 00:32:50,840
a device over ssh so to do this we

669
00:32:47,450 --> 00:32:54,620
import ssh helper and then we simply

670
00:32:50,840 --> 00:32:59,840
<font color="#E5E5E5">open this instance of ssh helpers class</font>

671
00:32:54,620 --> 00:33:02,449
or object called ssh session it takes

672
00:32:59,840 --> 00:33:04,550
only three inputs at minimum it takes in

673
00:33:02,450 --> 00:33:08,600
a device<font color="#CCCCCC"> name a username and a password</font>

674
00:33:04,550 --> 00:33:10,010
for<font color="#CCCCCC"> the purpose of this demo I have a</font>

675
00:33:08,600 --> 00:33:12,409
small hack in there that will actually

676
00:33:10,010 --> 00:33:14,059
make all this work so it will take in

677
00:33:12,410 --> 00:33:17,150
any device name any user name and a

678
00:33:14,059 --> 00:33:18,500
password today it is only a three line

679
00:33:17,150 --> 00:33:20,090
hack at the bottom of<font color="#E5E5E5"> the file so when</font>

680
00:33:18,500 --> 00:33:23,570
you go try to this out on your own feel

681
00:33:20,090 --> 00:33:24,830
free to remove those but that's all

682
00:33:23,570 --> 00:33:26,090
that's all we're using so that you can

683
00:33:24,830 --> 00:33:27,800
actually try it out<font color="#CCCCCC"> and build code that</font>

684
00:33:26,090 --> 00:33:29,449
<font color="#E5E5E5">would still work and that you could</font>

685
00:33:27,800 --> 00:33:32,419
<font color="#CCCCCC">actually mock up and test on</font><font color="#E5E5E5"> your own</font>

686
00:33:29,450 --> 00:33:34,340
before you talk to<font color="#CCCCCC"> a real device so what</font>

687
00:33:32,420 --> 00:33:37,150
we do is we import<font color="#CCCCCC"> ssh helper and then</font>

688
00:33:34,340 --> 00:33:40,909
we create this new variable called<font color="#E5E5E5"> ssh</font>

689
00:33:37,150 --> 00:33:44,809
it equals the result of choline<font color="#CCCCCC"> ssh</font>

690
00:33:40,910 --> 00:33:49,130
helpers ssh session by passing in device

691
00:33:44,809 --> 00:33:50,300
name our username a password<font color="#E5E5E5"> i actually</font>

692
00:33:49,130 --> 00:33:52,550
want you to try this out so that you're

693
00:33:50,300 --> 00:33:55,879
<font color="#E5E5E5">familiar with this part so go ahead and</font>

694
00:33:52,550 --> 00:33:56,840
try to<font color="#E5E5E5"> import ssh helper and then here's</font>

695
00:33:55,880 --> 00:33:58,760
something different that we haven't

696
00:33:56,840 --> 00:34:01,580
shown earlier in that python has

697
00:33:58,760 --> 00:34:03,050
built-in help so if you're on an

698
00:34:01,580 --> 00:34:06,439
airplane<font color="#E5E5E5"> and you're trying to learn some</font>

699
00:34:03,050 --> 00:34:08,480
code this is actually really<font color="#E5E5E5"> handy when</font>

700
00:34:06,440 --> 00:34:11,780
prototyping this demo<font color="#CCCCCC"> i was flying back</font>

701
00:34:08,480 --> 00:34:13,460
<font color="#CCCCCC">to ohio one day and I was trying to</font><font color="#E5E5E5"> work</font>

702
00:34:11,780 --> 00:34:15,440
<font color="#E5E5E5">with some</font><font color="#CCCCCC"> of the sequel modules for</font>

703
00:34:13,460 --> 00:34:17,030
example and try to do<font color="#E5E5E5"> the database stuff</font>

704
00:34:15,440 --> 00:34:19,100
and I'm<font color="#CCCCCC"> like I'm on I'm on an airplane</font>

705
00:34:17,030 --> 00:34:20,179
for<font color="#E5E5E5"> like four hours straight no internet</font>

706
00:34:19,100 --> 00:34:22,159
access i didn't want<font color="#E5E5E5"> to buy internet</font>

707
00:34:20,179 --> 00:34:24,379
access and so I<font color="#E5E5E5"> just</font><font color="#CCCCCC"> started fumbling</font>

708
00:34:22,159 --> 00:34:26,030
around with the help and<font color="#E5E5E5"> it told me</font>

709
00:34:24,379 --> 00:34:27,080
everything I needed to know to the<font color="#E5E5E5"> point</font>

710
00:34:26,030 --> 00:34:30,080
<font color="#E5E5E5">where I was able to build a prototype</font>

711
00:34:27,080 --> 00:34:31,969
what I eat it so try this out try

712
00:34:30,080 --> 00:34:34,310
importing the module name SSH helper and

713
00:34:31,969 --> 00:34:35,779
then try calling help and then the help

714
00:34:34,310 --> 00:34:38,330
function takes in whatever you<font color="#E5E5E5"> want help</font>

715
00:34:35,780 --> 00:34:40,190
on and so it's going<font color="#E5E5E5"> to try to read into</font>

716
00:34:38,330 --> 00:34:42,290
the code and if the code has what's

717
00:34:40,190 --> 00:34:44,659
called docstrings to find it's going to

718
00:34:42,290 --> 00:34:46,190
show you those docstrings but if they

719
00:34:44,659 --> 00:34:48,500
which are comments that has developers

720
00:34:46,190 --> 00:34:50,060
we can write to help each other know

721
00:34:48,500 --> 00:34:52,070
what our code<font color="#CCCCCC"> is supposed to do</font><font color="#E5E5E5"> and what</font>

722
00:34:50,060 --> 00:34:52,668
the inputs and outputs are if there are

723
00:34:52,070 --> 00:34:54,319
<font color="#CCCCCC">no</font>

724
00:34:52,668 --> 00:34:55,549
none though by default it's still going

725
00:34:54,319 --> 00:34:57,139
<font color="#E5E5E5">to give you some</font><font color="#CCCCCC"> details about the</font>

726
00:34:55,549 --> 00:34:59,329
inputs and outputs so you can at<font color="#E5E5E5"> least</font>

727
00:34:57,139 --> 00:35:02,869
figure out what you need<font color="#E5E5E5"> to send it to</font>

728
00:34:59,329 --> 00:35:03,859
use this so go and try that out<font color="#E5E5E5"> give any</font>

729
00:35:02,869 --> 00:35:05,630
questions feel free to<font color="#E5E5E5"> raise your hand</font>

730
00:35:03,859 --> 00:35:15,069
<font color="#CCCCCC">and we're going</font><font color="#E5E5E5"> to just take a quick</font>

731
00:35:05,630 --> 00:35:15,069
like two minute break through that yeah

732
00:35:19,360 --> 00:35:30,050
let me actually show so the comment was

733
00:35:27,920 --> 00:35:31,820
the output of help<font color="#CCCCCC"> ssh helper is not</font>

734
00:35:30,050 --> 00:35:33,560
very helpful let<font color="#E5E5E5"> me actually show let's</font>

735
00:35:31,820 --> 00:35:35,800
show what that is and let's walk through

736
00:35:33,560 --> 00:35:35,799
that

737
00:35:44,430 --> 00:35:49,980
<font color="#E5E5E5">okay cool so what I'm showing here</font>

738
00:35:47,309 --> 00:35:52,170
actually is I really wouldn't you two

739
00:35:49,980 --> 00:35:54,480
more get familiar with calling help more

740
00:35:52,170 --> 00:35:57,089
<font color="#CCCCCC">than</font><font color="#E5E5E5"> anything else so when I mentioned</font>

741
00:35:54,480 --> 00:35:58,710
docstrings earlier those are<font color="#E5E5E5"> different</font>

742
00:35:57,089 --> 00:36:01,549
types of comments that can exist at

743
00:35:58,710 --> 00:36:04,050
different places in coat and so when I

744
00:36:01,550 --> 00:36:05,910
<font color="#CCCCCC">ssh helper is actually the module here</font>

745
00:36:04,050 --> 00:36:07,380
and so what I'm showing right now is

746
00:36:05,910 --> 00:36:11,308
<font color="#CCCCCC">that you can actually</font><font color="#E5E5E5"> read module level</font>

747
00:36:07,380 --> 00:36:14,579
documentation if it exists by calling to

748
00:36:11,309 --> 00:36:16,950
help commit but what I actually meant

749
00:36:14,579 --> 00:36:19,140
this to this hands-on portion of you is

750
00:36:16,950 --> 00:36:21,750
actually for<font color="#CCCCCC"> the class so if you say SSH</font>

751
00:36:19,140 --> 00:36:23,700
<font color="#E5E5E5">halpern ssh session thank you for</font>

752
00:36:21,750 --> 00:36:25,290
pointing that out by the way this is

753
00:36:23,700 --> 00:36:27,149
<font color="#E5E5E5">what I really meant for you to try this</font>

754
00:36:25,290 --> 00:36:29,640
is to see the doctoring of that object

755
00:36:27,150 --> 00:36:31,770
or that class to see what the inputs and

756
00:36:29,640 --> 00:36:33,868
outputs are of it so if you call that

757
00:36:31,770 --> 00:36:35,339
and you can do this with<font color="#CCCCCC"> any function</font>

758
00:36:33,869 --> 00:36:37,440
for example when we're<font color="#CCCCCC"> working with our</font>

759
00:36:35,339 --> 00:36:39,990
yacht match you<font color="#E5E5E5"> can say help re not</font>

760
00:36:37,440 --> 00:36:42,510
match and see what exactly it wants to

761
00:36:39,990 --> 00:36:45,750
take in and<font color="#E5E5E5"> what it returns and so here</font>

762
00:36:42,510 --> 00:36:48,030
I see class<font color="#CCCCCC"> ssh session it shows me</font><font color="#E5E5E5"> it's</font>

763
00:36:45,750 --> 00:36:49,619
doc string as well followed by what

764
00:36:48,030 --> 00:36:52,530
really matters<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> section called in</font>

765
00:36:49,619 --> 00:36:54,210
it we're<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to go too deep into</font>

766
00:36:52,530 --> 00:36:56,790
objects here because it can get pretty

767
00:36:54,210 --> 00:36:58,829
deep on its own and it deserves its own

768
00:36:56,790 --> 00:37:01,049
class but what we see<font color="#E5E5E5"> here is ignore</font>

769
00:36:58,829 --> 00:37:03,299
self which just talks about an instance

770
00:37:01,049 --> 00:37:05,880
of it and the things after are the

771
00:37:03,299 --> 00:37:08,160
required inputs for example a device and

772
00:37:05,880 --> 00:37:09,869
it actually has a default username and

773
00:37:08,160 --> 00:37:11,308
password of empty<font color="#CCCCCC"> strings so you could</font>

774
00:37:09,869 --> 00:37:14,160
really call this with only passing

775
00:37:11,309 --> 00:37:15,930
device and then what we see below here

776
00:37:14,160 --> 00:37:17,779
though is<font color="#E5E5E5"> I mentioned on the matched</font>

777
00:37:15,930 --> 00:37:20,578
object we have methods called groups

778
00:37:17,780 --> 00:37:24,480
just like that we have methods on this

779
00:37:20,579 --> 00:37:25,950
<font color="#CCCCCC">object to lie close and right and so</font>

780
00:37:24,480 --> 00:37:27,900
we're going to be actually<font color="#E5E5E5"> using</font><font color="#CCCCCC"> the</font>

781
00:37:25,950 --> 00:37:37,549
right command in a minute and it takes

782
00:37:27,900 --> 00:37:41,790
in one input of commands go so with that

783
00:37:37,549 --> 00:37:43,410
<font color="#E5E5E5">let's kind of continue on so now let's</font>

784
00:37:41,790 --> 00:37:46,380
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about how</font><font color="#E5E5E5"> to send commands</font><font color="#CCCCCC"> to a</font>

785
00:37:43,410 --> 00:37:48,299
device over<font color="#CCCCCC"> ssh so we've got our show</font>

786
00:37:46,380 --> 00:37:51,200
module command for example show module

787
00:37:48,299 --> 00:37:55,589
<font color="#E5E5E5">five or four from what we just did and</font>

788
00:37:51,200 --> 00:37:58,259
let's try writing that so if we type in

789
00:37:55,589 --> 00:38:00,720
at show module equals the result

790
00:37:58,260 --> 00:38:03,360
of ssh which is our object from<font color="#E5E5E5"> ssh</font>

791
00:38:00,720 --> 00:38:08,370
helper of of the session and we call

792
00:38:03,360 --> 00:38:10,320
right we pass in the input which is

793
00:38:08,370 --> 00:38:12,420
actually expecting a list of commands

794
00:38:10,320 --> 00:38:15,210
and since our command is one string

795
00:38:12,420 --> 00:38:18,300
right now we put that string or that

796
00:38:15,210 --> 00:38:21,240
<font color="#CCCCCC">that command into an</font><font color="#E5E5E5"> single a list of</font>

797
00:38:18,300 --> 00:38:26,430
one and so if we call show module<font color="#E5E5E5"> Eagles</font>

798
00:38:21,240 --> 00:38:27,839
the output of<font color="#CCCCCC"> that yeah so we look at</font>

799
00:38:26,430 --> 00:38:29,879
this the command is show module five

800
00:38:27,840 --> 00:38:32,460
that were<font color="#E5E5E5"> that this is based on if we</font>

801
00:38:29,880 --> 00:38:34,170
call output so output equal as a result

802
00:38:32,460 --> 00:38:35,610
<font color="#E5E5E5">of what we ran so that would be the same</font>

803
00:38:34,170 --> 00:38:37,350
<font color="#CCCCCC">as if</font><font color="#E5E5E5"> you ran show module five on the</font>

804
00:38:35,610 --> 00:38:40,680
device and<font color="#E5E5E5"> you were just looking at it</font>

805
00:38:37,350 --> 00:38:43,830
on screen so what I want to<font color="#E5E5E5"> show here</font>

806
00:38:40,680 --> 00:38:46,049
those how we could kind of inspect the

807
00:38:43,830 --> 00:38:50,190
output actually before we<font color="#E5E5E5"> go to that i</font>

808
00:38:46,050 --> 00:38:53,630
want to<font color="#E5E5E5"> show you that though so</font><font color="#CCCCCC"> let's</font>

809
00:38:50,190 --> 00:38:53,630
<font color="#E5E5E5">say our command was show module five</font>

810
00:38:58,170 --> 00:39:01,920
and<font color="#E5E5E5"> I know we did for earlier but i</font>

811
00:39:00,210 --> 00:39:04,830
think the actual mock-up is based on

812
00:39:01,920 --> 00:39:06,330
expecting number<font color="#E5E5E5"> five in this so let's</font>

813
00:39:04,830 --> 00:39:11,580
<font color="#E5E5E5">say</font><font color="#CCCCCC"> we have show module</font><font color="#E5E5E5"> five that we</font>

814
00:39:06,330 --> 00:39:14,910
want<font color="#E5E5E5"> to inspect so</font><font color="#CCCCCC"> ssh equals SNH helper</font>

815
00:39:11,580 --> 00:39:16,560
that ssh session Oh in one tip if you're

816
00:39:14,910 --> 00:39:18,210
<font color="#CCCCCC">an eye Python you can tab complete and</font>

817
00:39:16,560 --> 00:39:21,330
<font color="#E5E5E5">we'll finish to the point of being</font>

818
00:39:18,210 --> 00:39:23,940
unique so we pass it a device you can

819
00:39:21,330 --> 00:39:28,080
<font color="#E5E5E5">actually pass anything in this case so</font>

820
00:39:23,940 --> 00:39:29,910
we'll<font color="#CCCCCC"> just say switch one and I don't</font>

821
00:39:28,080 --> 00:39:31,440
think using yeah so<font color="#E5E5E5"> usually and password</font>

822
00:39:29,910 --> 00:39:34,680
are not actually required since<font color="#E5E5E5"> we're</font>

823
00:39:31,440 --> 00:39:37,230
using the demo if you call<font color="#CCCCCC"> ssh shot</font>

824
00:39:34,680 --> 00:39:43,399
right and we pass it that command in a

825
00:39:37,230 --> 00:39:46,350
list it's going<font color="#E5E5E5"> to try to run it and</font>

826
00:39:43,400 --> 00:39:47,580
<font color="#E5E5E5">it's since we're ni</font><font color="#CCCCCC"> Python ipython is</font>

827
00:39:46,350 --> 00:39:52,200
going to natively print out whatever

828
00:39:47,580 --> 00:39:55,620
returned back if it returns<font color="#E5E5E5"> something so</font>

829
00:39:52,200 --> 00:40:02,879
this is<font color="#CCCCCC"> the same as saying output equals</font>

830
00:39:55,620 --> 00:40:04,529
the result of<font color="#E5E5E5"> this command ok cool so in</font>

831
00:40:02,880 --> 00:40:06,240
if you're interacting with SH is

832
00:40:04,530 --> 00:40:07,380
obviously going to be some delay for the

833
00:40:06,240 --> 00:40:10,100
purpose of<font color="#E5E5E5"> this demo there's a sleep</font>

834
00:40:07,380 --> 00:40:12,180
statement there so we have this output

835
00:40:10,100 --> 00:40:13,410
so we can now inspect it and start

836
00:40:12,180 --> 00:40:15,899
interacting with it and try<font color="#E5E5E5"> to build our</font>

837
00:40:13,410 --> 00:40:18,960
code to look at it so what I show on the

838
00:40:15,900 --> 00:40:22,620
next slide is how to look at it a

839
00:40:18,960 --> 00:40:24,690
subsection of that output and I wanted

840
00:40:22,620 --> 00:40:26,850
<font color="#E5E5E5">to show you actually something a little</font>

841
00:40:24,690 --> 00:40:29,460
helpful to interact with<font color="#E5E5E5"> things like</font>

842
00:40:26,850 --> 00:40:32,279
<font color="#E5E5E5">lists and dictionaries the module called</font>

843
00:40:29,460 --> 00:40:34,680
<font color="#E5E5E5">P print or pretty print is what it's</font>

844
00:40:32,280 --> 00:40:36,240
actually home so if you import p print

845
00:40:34,680 --> 00:40:39,299
which is included with all copies of

846
00:40:36,240 --> 00:40:41,250
<font color="#CCCCCC">Python and you call p print</font><font color="#E5E5E5"> p print and</font>

847
00:40:39,300 --> 00:40:43,980
pass it something it's going<font color="#E5E5E5"> to give you</font>

848
00:40:41,250 --> 00:40:47,070
a nicely formatted view of what<font color="#E5E5E5"> you're</font>

849
00:40:43,980 --> 00:40:48,990
printing let's say<font color="#E5E5E5"> we only wanted to</font>

850
00:40:47,070 --> 00:40:52,140
<font color="#E5E5E5">print the first 5 lines though of this</font>

851
00:40:48,990 --> 00:40:54,419
output we can use<font color="#E5E5E5"> this new term here</font>

852
00:40:52,140 --> 00:40:56,310
called slicing which is where we access

853
00:40:54,420 --> 00:40:59,760
specific index positions and especially

854
00:40:56,310 --> 00:41:02,340
a range of positions of this list so

855
00:40:59,760 --> 00:41:06,420
what we see<font color="#CCCCCC"> here is we see output and in</font>

856
00:41:02,340 --> 00:41:09,810
brackets were accessing 0 colon 5 that

857
00:41:06,420 --> 00:41:11,440
means everything after 0 up until but

858
00:41:09,810 --> 00:41:13,900
before five

859
00:41:11,440 --> 00:41:16,750
so this should actually grab us the

860
00:41:13,900 --> 00:41:20,079
first four lines if I did my math right

861
00:41:16,750 --> 00:41:22,200
and so what we see here<font color="#E5E5E5"> is if we start</font>

862
00:41:20,079 --> 00:41:24,790
to think about inspecting this output in

863
00:41:22,200 --> 00:41:27,189
code we could say online<font color="#E5E5E5"> key equals</font>

864
00:41:24,790 --> 00:41:28,720
false so have like a default false in

865
00:41:27,190 --> 00:41:30,819
our code as its evaluating the device

866
00:41:28,720 --> 00:41:32,140
and let's say we<font color="#E5E5E5"> Rancho module we're</font>

867
00:41:30,819 --> 00:41:36,220
trying to decide<font color="#CCCCCC"> if the modules online</font>

868
00:41:32,140 --> 00:41:38,589
right now so for wine in the output we

869
00:41:36,220 --> 00:41:41,950
could then say do we see the status of

870
00:41:38,589 --> 00:41:43,569
<font color="#CCCCCC">okay in</font><font color="#E5E5E5"> that output so what I mentioned</font>

871
00:41:41,950 --> 00:41:46,779
<font color="#CCCCCC">earlier is that there are fancy api's</font>

872
00:41:43,569 --> 00:41:48,640
with bunches of devices now but if you

873
00:41:46,780 --> 00:41:50,770
have no api this is where you<font color="#E5E5E5"> can build</font>

874
00:41:48,640 --> 00:41:52,930
regex is to parse whatever it is<font color="#E5E5E5"> you</font>

875
00:41:50,770 --> 00:41:55,000
want without having to wait for a code

876
00:41:52,930 --> 00:41:57,848
upgrade or something to be supported and

877
00:41:55,000 --> 00:42:03,280
so here we can literally<font color="#E5E5E5"> just parse that</font>

878
00:41:57,849 --> 00:42:06,490
output and say if<font color="#CCCCCC"> ok is in here which we</font>

879
00:42:03,280 --> 00:42:10,180
see right here then we can say what we

880
00:42:06,490 --> 00:42:12,069
see<font color="#CCCCCC"> ok the modules online or potentially</font>

881
00:42:10,180 --> 00:42:13,598
<font color="#E5E5E5">other codes in this where you might want</font>

882
00:42:12,069 --> 00:42:15,220
to have a list of codes based on the

883
00:42:13,599 --> 00:42:20,500
different platforms you have in those

884
00:42:15,220 --> 00:42:21,669
modules and what they report and what

885
00:42:20,500 --> 00:42:24,040
we're<font color="#CCCCCC"> doing now is we're actually</font>

886
00:42:21,670 --> 00:42:26,650
checking without using a regex because

887
00:42:24,040 --> 00:42:28,720
the reg X's are great but they're not

888
00:42:26,650 --> 00:42:30,880
always<font color="#E5E5E5"> needed if you need just a simple</font>

889
00:42:28,720 --> 00:42:34,060
question to be asked and what we're

890
00:42:30,880 --> 00:42:37,030
saying is if ok exist in this larger

891
00:42:34,060 --> 00:42:38,470
stirring the line that's<font color="#E5E5E5"> the same as</font>

892
00:42:37,030 --> 00:42:41,470
using a regex without putting the<font color="#E5E5E5"> whole</font>

893
00:42:38,470 --> 00:42:43,868
pattern and what we're actually using

894
00:42:41,470 --> 00:42:45,339
here is lined out lower to turn the

895
00:42:43,869 --> 00:42:47,260
entire line into lower case so we<font color="#E5E5E5"> don't</font>

896
00:42:45,339 --> 00:42:49,359
have to deal with thinking about is it a

897
00:42:47,260 --> 00:42:54,520
capital o or a lowercase<font color="#E5E5E5"> o which might</font>

898
00:42:49,359 --> 00:42:56,259
change<font color="#CCCCCC"> over time and if we see that we</font>

899
00:42:54,520 --> 00:42:58,119
say it's online which could then break

900
00:42:56,260 --> 00:43:02,829
apart our flow of our elimination what's

901
00:42:58,119 --> 00:43:05,470
doing and so now we<font color="#E5E5E5"> can look at online</font>

902
00:43:02,829 --> 00:43:08,260
is true<font color="#E5E5E5"> ok so now I want to take a quick</font>

903
00:43:05,470 --> 00:43:10,240
break<font color="#CCCCCC"> to have you try that as well so</font>

904
00:43:08,260 --> 00:43:13,420
slowly try creating an instance of ssh

905
00:43:10,240 --> 00:43:15,399
session all you need<font color="#E5E5E5"> to pass in is some</font>

906
00:43:13,420 --> 00:43:19,180
value for the device at<font color="#E5E5E5"> the beginning</font>

907
00:43:15,400 --> 00:43:22,540
and then try writing show module number

908
00:43:19,180 --> 00:43:26,038
<font color="#CCCCCC">5</font><font color="#E5E5E5"> and try to look at just the first four</font>

909
00:43:22,540 --> 00:43:28,239
lines of output using<font color="#CCCCCC"> 0 co info</font>

910
00:43:26,039 --> 00:43:29,499
and we'll take<font color="#E5E5E5"> a quick break for that if</font>

911
00:43:28,239 --> 00:43:32,099
you have any questions or get stuck go

912
00:43:29,499 --> 00:43:32,098
ahead and raise<font color="#E5E5E5"> your hand</font>

913
00:43:46,190 --> 00:43:51,790
<font color="#CCCCCC">oh so the question was why did</font><font color="#E5E5E5"> I call</font>

914
00:43:49,400 --> 00:43:55,190
Pete print twice he print out p print um

915
00:43:51,790 --> 00:43:58,610
so this is<font color="#CCCCCC"> the</font><font color="#E5E5E5"> case where in the module</font>

916
00:43:55,190 --> 00:44:00,260
the<font color="#E5E5E5"> function is also called peopre so</font>

917
00:43:58,610 --> 00:44:02,660
when we imported p print we're importing

918
00:44:00,260 --> 00:44:05,450
the module but then to access anything

919
00:44:02,660 --> 00:44:09,950
under the module we have to call module

920
00:44:05,450 --> 00:44:11,540
dot thing so for<font color="#E5E5E5"> example with the yeah</font>

921
00:44:09,950 --> 00:44:13,580
so in this case the namespace which is

922
00:44:11,540 --> 00:44:17,210
the module p print has a<font color="#E5E5E5"> method by the</font>

923
00:44:13,580 --> 00:44:19,370
exact same name the<font color="#CCCCCC"> called p print so I</font>

924
00:44:17,210 --> 00:44:23,090
this is<font color="#CCCCCC"> one case where you'll commonly</font>

925
00:44:19,370 --> 00:44:25,130
see it renamed so if I<font color="#E5E5E5"> just import p</font>

926
00:44:23,090 --> 00:44:26,720
print the name stays<font color="#E5E5E5"> is</font><font color="#CCCCCC"> P print but</font>

927
00:44:25,130 --> 00:44:29,930
<font color="#E5E5E5">sometimes you'll see people import p</font>

928
00:44:26,720 --> 00:44:32,000
print as PP and save he feet print<font color="#E5E5E5"> and</font>

929
00:44:29,930 --> 00:44:34,549
so now<font color="#CCCCCC"> the namespace is shortened to</font>

930
00:44:32,000 --> 00:44:36,650
just the two letters oh that's perfectly

931
00:44:34,550 --> 00:44:39,230
fine it really is<font color="#E5E5E5"> more personal</font>

932
00:44:36,650 --> 00:44:41,390
preference i found it personally cleaner

933
00:44:39,230 --> 00:44:43,280
to just have a hard rule of always

934
00:44:41,390 --> 00:44:44,990
<font color="#E5E5E5">importing and stopping at the module and</font>

935
00:44:43,280 --> 00:44:46,880
then accessing to everything by the

936
00:44:44,990 --> 00:44:48,649
module because then you don't have<font color="#E5E5E5"> to</font>

937
00:44:46,880 --> 00:44:50,980
deal with tons of import statements that

938
00:44:48,650 --> 00:44:58,340
are inconsistent over time<font color="#E5E5E5"> and all that</font>

939
00:44:50,980 --> 00:45:00,550
any other questions right<font color="#CCCCCC"> now yeah in</font>

940
00:44:58,340 --> 00:45:00,550
the back

941
00:45:05,790 --> 00:45:13,058
actually I<font color="#E5E5E5"> came here a bit late but I</font>

942
00:45:09,849 --> 00:45:15,760
had a<font color="#E5E5E5"> simple question for you like can</font>

943
00:45:13,059 --> 00:45:17,770
<font color="#CCCCCC">you like highlight the difference</font>

944
00:45:15,760 --> 00:45:20,470
between<font color="#CCCCCC"> this library and net required</font>

945
00:45:17,770 --> 00:45:21,790
parameter which are oh yeah so all<font color="#E5E5E5"> right</font>

946
00:45:20,470 --> 00:45:25,839
that's<font color="#CCCCCC"> actually a good example to show</font>

947
00:45:21,790 --> 00:45:26,950
you what we've done um there's so<font color="#CCCCCC"> I'll</font>

948
00:45:25,839 --> 00:45:30,000
just show you the code real quick

949
00:45:26,950 --> 00:45:30,000
<font color="#E5E5E5">because this is a good point</font>

950
00:45:45,359 --> 00:45:49,859
okay so<font color="#CCCCCC"> I'm looking at the same version</font>

951
00:45:47,309 --> 00:45:53,849
of ssh helper on just on<font color="#E5E5E5"> my mac right</font>

952
00:45:49,859 --> 00:45:56,009
now so the oh it's<font color="#E5E5E5"> actually not a ton of</font>

953
00:45:53,849 --> 00:45:59,009
customization it's just a few pieces of

954
00:45:56,009 --> 00:46:00,450
what<font color="#CCCCCC"> we call boy boilerplate or stuff</font>

955
00:45:59,009 --> 00:46:03,119
<font color="#CCCCCC">that we would repeat in other places of</font>

956
00:46:00,450 --> 00:46:06,359
<font color="#E5E5E5">code and so what we have is we're just</font>

957
00:46:03,119 --> 00:46:09,690
<font color="#E5E5E5">defining a class ourselves here and it</font>

958
00:46:06,359 --> 00:46:12,420
takes in a few inputs device same

959
00:46:09,690 --> 00:46:16,529
username and password and then it

960
00:46:12,420 --> 00:46:18,390
connects on creation of the class now

961
00:46:16,529 --> 00:46:20,249
that's not<font color="#E5E5E5"> anything special though what</font>

962
00:46:18,390 --> 00:46:23,009
is actually<font color="#E5E5E5"> different yours what's under</font>

963
00:46:20,249 --> 00:46:25,669
connect so there's a few<font color="#CCCCCC"> things that we</font>

964
00:46:23,009 --> 00:46:29,249
found while just troubleshooting this

965
00:46:25,670 --> 00:46:32,309
one thing specifically is that it tries

966
00:46:29,249 --> 00:46:36,808
<font color="#CCCCCC">to look</font><font color="#E5E5E5"> at or work with the known hosts</font>

967
00:46:32,309 --> 00:46:38,789
file on the current box so if you you

968
00:46:36,809 --> 00:46:42,960
have<font color="#E5E5E5"> this basic setup of basically</font>

969
00:46:38,789 --> 00:46:45,180
saying auto add any missing keys that's

970
00:46:42,960 --> 00:46:47,160
actually<font color="#CCCCCC"> not</font><font color="#E5E5E5"> a big deal um the other</font>

971
00:46:45,180 --> 00:46:49,700
<font color="#E5E5E5">point is more of these other few lines</font>

972
00:46:47,160 --> 00:46:52,890
that just repeat all over our code

973
00:46:49,700 --> 00:46:55,410
finally the section with<font color="#E5E5E5"> the right is a</font>

974
00:46:52,890 --> 00:46:58,069
bit more involved<font color="#E5E5E5"> in that we found with</font>

975
00:46:55,410 --> 00:47:00,509
<font color="#E5E5E5">opens a specific platform that we had</font>

976
00:46:58,069 --> 00:47:02,460
that if we just tried to call the

977
00:47:00,509 --> 00:47:03,869
equipment so actually we just<font color="#E5E5E5"> walk</font>

978
00:47:02,460 --> 00:47:05,279
throughs a little more briefings you

979
00:47:03,869 --> 00:47:07,529
know if you're in para<font color="#CCCCCC"> Miko what you be</font>

980
00:47:05,279 --> 00:47:09,779
doing so if you're in para<font color="#E5E5E5"> Miko you</font>

981
00:47:07,529 --> 00:47:13,009
create an object by calling para<font color="#CCCCCC"> Miko</font>

982
00:47:09,779 --> 00:47:17,940
ssh client so you would import para mica

983
00:47:13,009 --> 00:47:19,619
and then you connect or open the

984
00:47:17,940 --> 00:47:23,249
connection to<font color="#E5E5E5"> the device by calling that</font>

985
00:47:19,619 --> 00:47:25,130
object connect and then<font color="#CCCCCC"> you pass in a</font>

986
00:47:23,249 --> 00:47:28,439
device name username and password

987
00:47:25,130 --> 00:47:31,019
identical to what we're<font color="#CCCCCC"> doing so far and</font>

988
00:47:28,440 --> 00:47:32,609
then allow agent disables public key

989
00:47:31,019 --> 00:47:34,680
authentication so you use<font color="#E5E5E5"> username and</font>

990
00:47:32,609 --> 00:47:36,450
password we found<font color="#E5E5E5"> that actually broke</font>

991
00:47:34,680 --> 00:47:37,890
some<font color="#E5E5E5"> of our devices work because they</font>

992
00:47:36,450 --> 00:47:41,879
would support<font color="#CCCCCC"> it but it</font><font color="#E5E5E5"> wasn't turn on</font>

993
00:47:37,890 --> 00:47:43,230
in some cases it's been<font color="#E5E5E5"> a while since I</font>

994
00:47:41,880 --> 00:47:44,730
looked at this so I'm<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to talk</font>

995
00:47:43,230 --> 00:47:49,109
to these other three lines for right now

996
00:47:44,730 --> 00:47:50,519
but if you look<font color="#E5E5E5"> at that right we had a</font>

997
00:47:49,109 --> 00:47:53,489
few<font color="#E5E5E5"> different use cases that we were</font>

998
00:47:50,519 --> 00:47:55,529
running into one was the issue of

999
00:47:53,489 --> 00:47:58,440
breaking up the<font color="#E5E5E5"> commands into slower</font>

1000
00:47:55,529 --> 00:47:59,190
things to send because we might be

1001
00:47:58,440 --> 00:48:02,160
<font color="#E5E5E5">configuring</font>

1002
00:47:59,190 --> 00:48:03,900
a lot of<font color="#E5E5E5"> bgp policy for example so in</font>

1003
00:48:02,160 --> 00:48:06,690
our environment when we redirect traffic

1004
00:48:03,900 --> 00:48:08,609
around a device say we have a large

1005
00:48:06,690 --> 00:48:11,369
chassis and we're redirecting like a few

1006
00:48:08,609 --> 00:48:14,009
hundred gigabits a second we redirect by

1007
00:48:11,369 --> 00:48:16,950
changing BGP route maps but we do it in

1008
00:48:14,010 --> 00:48:19,020
a staggered approach but we might send

1009
00:48:16,950 --> 00:48:23,419
<font color="#E5E5E5">the entire and but for safety reasons we</font>

1010
00:48:19,020 --> 00:48:25,859
send the entire set of changes

1011
00:48:23,420 --> 00:48:27,329
potentially as one actually I'm kind of

1012
00:48:25,859 --> 00:48:29,369
<font color="#E5E5E5">thing there's a few cases where we</font>

1013
00:48:27,329 --> 00:48:31,740
wanted<font color="#E5E5E5"> to send it as a line at a time</font>

1014
00:48:29,369 --> 00:48:33,599
<font color="#E5E5E5">but put delays in it but not have to put</font>

1015
00:48:31,740 --> 00:48:35,578
the delays in the implementation<font color="#CCCCCC"> of the</font>

1016
00:48:33,599 --> 00:48:37,470
code that<font color="#E5E5E5"> runs the drink for example or</font>

1017
00:48:35,579 --> 00:48:40,200
the traffic reduction so we could

1018
00:48:37,470 --> 00:48:42,209
instead put it in here and say<font color="#CCCCCC"> under</font>

1019
00:48:40,200 --> 00:48:44,009
<font color="#CCCCCC">right it says delay equals 2 that means</font>

1020
00:48:42,210 --> 00:48:47,280
between every line it's adding a

1021
00:48:44,010 --> 00:48:50,089
two-second<font color="#E5E5E5"> delay and so what we could</font>

1022
00:48:47,280 --> 00:48:52,890
have is a default delay and things like

1023
00:48:50,089 --> 00:48:55,890
chunking or for example of both sending

1024
00:48:52,890 --> 00:48:58,319
and reading so this is<font color="#CCCCCC"> actually a delay</font>

1025
00:48:55,890 --> 00:49:00,259
on right but while we write we're also

1026
00:48:58,319 --> 00:49:02,670
<font color="#E5E5E5">grabbing back output from the device and</font>

1027
00:49:00,260 --> 00:49:04,290
one specific case I found that it

1028
00:49:02,670 --> 00:49:05,839
literally took almost an entire

1029
00:49:04,290 --> 00:49:07,980
<font color="#E5E5E5">afternoon of like pulling my hair out</font>

1030
00:49:05,839 --> 00:49:09,990
was I had a device<font color="#E5E5E5"> that if I try to</font>

1031
00:49:07,980 --> 00:49:11,579
receive too much data at once it would

1032
00:49:09,990 --> 00:49:12,569
choke in the connection<font color="#CCCCCC"> we hang and the</font>

1033
00:49:11,579 --> 00:49:14,609
device would actually stop responding

1034
00:49:12,569 --> 00:49:16,230
the device would be fine like handling

1035
00:49:14,609 --> 00:49:17,819
traffic but that ssh connection would

1036
00:49:16,230 --> 00:49:19,890
just crap out and I wouldn't actually

1037
00:49:17,819 --> 00:49:21,480
get<font color="#CCCCCC"> the output back so what i'm doing</font>

1038
00:49:19,890 --> 00:49:23,520
here is i'm actually walking through and

1039
00:49:21,480 --> 00:49:26,250
so if you<font color="#E5E5E5"> look under this while loop</font><font color="#CCCCCC"> i'm</font>

1040
00:49:23,520 --> 00:49:28,770
asking<font color="#E5E5E5"> the actual parameter module are</font>

1041
00:49:26,250 --> 00:49:30,089
you ready to<font color="#E5E5E5"> send me data and so it has</font>

1042
00:49:28,770 --> 00:49:34,470
this function called receive ready

1043
00:49:30,089 --> 00:49:36,960
that's<font color="#E5E5E5"> just a true or false and so if it</font>

1044
00:49:34,470 --> 00:49:39,990
says I'm ready we walked through an<font color="#E5E5E5"> only</font>

1045
00:49:36,960 --> 00:49:43,290
grab right here eight bytes of data at a

1046
00:49:39,990 --> 00:49:44,819
time because the issue<font color="#E5E5E5"> iran's who is one</font>

1047
00:49:43,290 --> 00:49:47,670
device had a<font color="#E5E5E5"> problem where if it tried</font>

1048
00:49:44,819 --> 00:49:49,200
to<font color="#E5E5E5"> send too much it would it was</font>

1049
00:49:47,670 --> 00:49:51,780
<font color="#E5E5E5">absolutely platform like this might even</font>

1050
00:49:49,200 --> 00:49:52,828
<font color="#E5E5E5">be a problem for you but</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> just wanted</font>

1051
00:49:51,780 --> 00:49:54,720
<font color="#E5E5E5">to show this so that you don't have to</font>

1052
00:49:52,829 --> 00:49:56,880
<font color="#E5E5E5">fight the same problem</font><font color="#CCCCCC"> and have to</font>

1053
00:49:54,720 --> 00:50:00,060
reinvent it if if this would work as a

1054
00:49:56,880 --> 00:50:01,920
drop-in replacement that's actually

1055
00:50:00,060 --> 00:50:05,040
basically<font color="#CCCCCC"> the majority of it is really</font>

1056
00:50:01,920 --> 00:50:06,119
these<font color="#E5E5E5"> bugs or on our platforms we ran</font>

1057
00:50:05,040 --> 00:50:10,740
into where we<font color="#E5E5E5"> had to both slow it down</font>

1058
00:50:06,119 --> 00:50:12,069
sending commands and also swap to slowly

1059
00:50:10,740 --> 00:50:16,479
non receiving

1060
00:50:12,069 --> 00:50:17,650
the final reason actually<font color="#E5E5E5"> I think yeah I</font>

1061
00:50:16,479 --> 00:50:19,598
think that's it does that make sense

1062
00:50:17,650 --> 00:50:22,479
though um so there's not<font color="#E5E5E5"> actually lot of</font>

1063
00:50:19,599 --> 00:50:23,979
code in this but for the purpose of the

1064
00:50:22,479 --> 00:50:26,618
demo I I don't<font color="#E5E5E5"> have actually anything</font><font color="#CCCCCC"> I</font>

1065
00:50:23,979 --> 00:50:28,598
can ssh to but if you look<font color="#E5E5E5"> at the last</font>

1066
00:50:26,619 --> 00:50:30,400
three<font color="#E5E5E5"> lines those are the hacks that it</font>

1067
00:50:28,599 --> 00:50:31,930
make this work for right now we're

1068
00:50:30,400 --> 00:50:33,579
simply looking at<font color="#E5E5E5"> your hostname and it's</font>

1069
00:50:31,930 --> 00:50:44,379
returning a different version of it

1070
00:50:33,579 --> 00:50:48,640
right now<font color="#E5E5E5"> oh yeah oh you're right yeah</font>

1071
00:50:44,380 --> 00:50:52,390
yes yes I'm not<font color="#E5E5E5"> gonna math go any</font>

1072
00:50:48,640 --> 00:50:53,769
questions before we continue though okay

1073
00:50:52,390 --> 00:50:56,129
sweet soy we're<font color="#E5E5E5"> going to get going</font>

1074
00:50:53,769 --> 00:50:56,129
forward

1075
00:51:03,940 --> 00:51:08,530
ok cool so then<font color="#CCCCCC"> all we've gotten right</font>

1076
00:51:06,790 --> 00:51:10,090
<font color="#E5E5E5">now really though is getting the output</font>

1077
00:51:08,530 --> 00:51:11,710
of show modules so<font color="#CCCCCC"> we've looked at it</font>

1078
00:51:10,090 --> 00:51:13,480
and we said if it's online and do

1079
00:51:11,710 --> 00:51:15,010
something so now we're going<font color="#E5E5E5"> to just</font>

1080
00:51:13,480 --> 00:51:17,380
kind of walk through<font color="#E5E5E5"> and say run another</font>

1081
00:51:15,010 --> 00:51:19,180
command let's go and grab them up time

1082
00:51:17,380 --> 00:51:21,280
of that module to try to figure out<font color="#E5E5E5"> if</font>

1083
00:51:19,180 --> 00:51:23,649
it's rebooting and<font color="#E5E5E5"> power cycling or if</font>

1084
00:51:21,280 --> 00:51:25,960
it was just a one-time glitch because

1085
00:51:23,650 --> 00:51:28,300
we've seen cases where a module reboot

1086
00:51:25,960 --> 00:51:29,530
but it'll be fine for four days or

1087
00:51:28,300 --> 00:51:31,750
months and<font color="#CCCCCC"> just be the result of a</font>

1088
00:51:29,530 --> 00:51:34,630
software issue so here<font color="#CCCCCC"> we can go check</font>

1089
00:51:31,750 --> 00:51:36,850
<font color="#E5E5E5">the output of show module up time but in</font>

1090
00:51:34,630 --> 00:51:39,280
this case this platform does not so it

1091
00:51:36,850 --> 00:51:41,290
<font color="#E5E5E5">has show module and I can pass like show</font>

1092
00:51:39,280 --> 00:51:43,990
module<font color="#E5E5E5"> five for example but this</font>

1093
00:51:41,290 --> 00:51:46,870
platform wasn't quite consistent and so

1094
00:51:43,990 --> 00:51:49,509
<font color="#CCCCCC">uptime is all modules or nothing so here</font>

1095
00:51:46,870 --> 00:51:51,880
I wanted to show that you<font color="#E5E5E5"> can do your</font>

1096
00:51:49,510 --> 00:51:53,740
parsing on box as well if the box it'll

1097
00:51:51,880 --> 00:51:55,510
let you so this platform actually has

1098
00:51:53,740 --> 00:51:58,089
grew up<font color="#CCCCCC"> Annie</font><font color="#E5E5E5"> grab on the actual network</font>

1099
00:51:55,510 --> 00:52:02,410
device and so I can parse the output of

1100
00:51:58,090 --> 00:52:04,030
show module on box too eager up to grab

1101
00:52:02,410 --> 00:52:06,279
really the section<font color="#CCCCCC"> I care about so that</font>

1102
00:52:04,030 --> 00:52:09,340
I can make my inspecting of the output a

1103
00:52:06,280 --> 00:52:11,080
little bit simpler now one thing<font color="#E5E5E5"> you</font>

1104
00:52:09,340 --> 00:52:14,170
<font color="#E5E5E5">might be thinking about this really only</font>

1105
00:52:11,080 --> 00:52:16,150
works this kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like depth of using</font>

1106
00:52:14,170 --> 00:52:17,860
specific commands on box really only

1107
00:52:16,150 --> 00:52:19,810
makes sense if<font color="#E5E5E5"> you have a common like</font>

1108
00:52:17,860 --> 00:52:24,940
standard of what devices use and may<font color="#E5E5E5"> be</font>

1109
00:52:19,810 --> 00:52:26,259
a small set of variation so it your

1110
00:52:24,940 --> 00:52:28,150
mileage may vary with that part for us

1111
00:52:26,260 --> 00:52:29,980
we've been walking in that we've stayed

1112
00:52:28,150 --> 00:52:31,690
with generally a few platforms and a few

1113
00:52:29,980 --> 00:52:34,240
models and try to run them until they're

1114
00:52:31,690 --> 00:52:35,590
known or available or until we<font color="#E5E5E5"> get</font>

1115
00:52:34,240 --> 00:52:37,959
<font color="#E5E5E5">something better that works better but</font>

1116
00:52:35,590 --> 00:52:39,730
it's not<font color="#E5E5E5"> we generally</font><font color="#CCCCCC"> don't try</font>

1117
00:52:37,960 --> 00:52:40,900
something<font color="#E5E5E5"> out for five months try the</font>

1118
00:52:39,730 --> 00:52:42,580
<font color="#E5E5E5">next product try the next product we</font>

1119
00:52:40,900 --> 00:52:46,060
generally keep to one product for a

1120
00:52:42,580 --> 00:52:48,610
while so here<font color="#E5E5E5"> we get that back output</font>

1121
00:52:46,060 --> 00:52:50,020
and so<font color="#CCCCCC"> now what we could do is actually</font>

1122
00:52:48,610 --> 00:52:51,910
get a little bit more tricky and parks

1123
00:52:50,020 --> 00:52:53,740
the uptime and then we react based on

1124
00:52:51,910 --> 00:52:55,480
the value this is where if we<font color="#E5E5E5"> had a</font>

1125
00:52:53,740 --> 00:52:57,430
database we could start storing the fact

1126
00:52:55,480 --> 00:52:59,770
that we saw this<font color="#E5E5E5"> and start saying well</font>

1127
00:52:57,430 --> 00:53:01,870
did this happen yesterday because I

1128
00:52:59,770 --> 00:53:03,970
showed<font color="#CCCCCC"> that the modern is up for 45 days</font>

1129
00:53:01,870 --> 00:53:06,910
well that's based on my code running 45

1130
00:53:03,970 --> 00:53:08,020
days later that<font color="#CCCCCC"> would be</font><font color="#E5E5E5"> helpful if we</font>

1131
00:53:06,910 --> 00:53:10,270
could keep<font color="#CCCCCC"> track of that and keep</font>

1132
00:53:08,020 --> 00:53:12,730
running each day and then think about

1133
00:53:10,270 --> 00:53:14,740
how<font color="#CCCCCC"> long it's been up for the purpose of</font>

1134
00:53:12,730 --> 00:53:17,650
<font color="#E5E5E5">time I don't show that right now but I</font>

1135
00:53:14,740 --> 00:53:19,930
<font color="#E5E5E5">just want to throw that idea out there</font>

1136
00:53:17,650 --> 00:53:21,400
<font color="#E5E5E5">okay cool so what that was the simple</font>

1137
00:53:19,930 --> 00:53:23,259
radiation let's take a look<font color="#CCCCCC"> now a little</font>

1138
00:53:21,400 --> 00:53:25,599
bit deeper<font color="#CCCCCC"> one of a link that went down</font>

1139
00:53:23,260 --> 00:53:27,069
that we suspect might be flapping so

1140
00:53:25,599 --> 00:53:29,339
<font color="#E5E5E5">imagine you're a hundred gig back foot</font>

1141
00:53:27,069 --> 00:53:31,990
wing flapping every five or ten seconds

1142
00:53:29,339 --> 00:53:33,759
things my tree converge my cert passing

1143
00:53:31,990 --> 00:53:35,470
traffic if you lose<font color="#CCCCCC"> a second of traffic</font>

1144
00:53:33,760 --> 00:53:37,299
over that at full utilization that's a

1145
00:53:35,470 --> 00:53:40,288
lot of traffic and that's a lot of

1146
00:53:37,299 --> 00:53:42,579
unhappy people so we want to detect that

1147
00:53:40,289 --> 00:53:45,369
so here's the second log message we have

1148
00:53:42,579 --> 00:53:48,910
<font color="#E5E5E5">I F down link failure interface I</font>

1149
00:53:45,369 --> 00:53:50,559
<font color="#CCCCCC">Ethernet 1 / 4 is down it's slightly</font>

1150
00:53:48,910 --> 00:53:51,910
different link failure instead of

1151
00:53:50,559 --> 00:53:55,059
interface removed is really the big

1152
00:53:51,910 --> 00:53:56,859
difference here so we get back on the

1153
00:53:55,059 --> 00:53:59,289
same exact regex before we get back<font color="#CCCCCC"> the</font>

1154
00:53:56,859 --> 00:54:01,869
exact same data from calling mascot

1155
00:53:59,289 --> 00:54:03,910
groups and now we're simply looking for

1156
00:54:01,869 --> 00:54:05,980
at for the presence of a different error

1157
00:54:03,910 --> 00:54:09,520
code so if you're looking<font color="#CCCCCC"> at the code a</font>

1158
00:54:05,980 --> 00:54:13,359
simple<font color="#E5E5E5"> implementation of this is simply</font>

1159
00:54:09,520 --> 00:54:15,940
a big if LF else block so an<font color="#CCCCCC"> if-else</font>

1160
00:54:13,359 --> 00:54:19,900
block of is it this code do this if it's

1161
00:54:15,940 --> 00:54:21,430
<font color="#E5E5E5">not is it this code do this will show</font>

1162
00:54:19,900 --> 00:54:22,480
<font color="#E5E5E5">you a little</font><font color="#CCCCCC"> bit later towards the end</font>

1163
00:54:21,430 --> 00:54:24,669
<font color="#E5E5E5">of how to clean that up and make it</font>

1164
00:54:22,480 --> 00:54:26,289
<font color="#E5E5E5">scalable but for right now we're just</font>

1165
00:54:24,670 --> 00:54:31,660
checking if this other code exists<font color="#E5E5E5"> in</font>

1166
00:54:26,289 --> 00:54:32,770
the air card for the purpose of time<font color="#CCCCCC"> I'm</font>

1167
00:54:31,660 --> 00:54:34,920
actually<font color="#E5E5E5"> going to pass this because we</font>

1168
00:54:32,770 --> 00:54:38,200
<font color="#E5E5E5">just did the equivalent of this regex</font>

1169
00:54:34,920 --> 00:54:42,309
but let's go and continue right now so

1170
00:54:38,200 --> 00:54:47,140
we've got back interface equals<font color="#CCCCCC"> re</font><font color="#E5E5E5"> not</font>

1171
00:54:42,309 --> 00:54:48,579
match the output<font color="#CCCCCC"> of / D</font><font color="#E5E5E5"> plus and we're</font>

1172
00:54:47,140 --> 00:54:50,859
actually doing a slightly different

1173
00:54:48,579 --> 00:54:52,920
match this time so now we<font color="#E5E5E5"> have the</font>

1174
00:54:50,859 --> 00:54:55,808
grouping symbols around the entire thing

1175
00:54:52,920 --> 00:55:00,010
instead of<font color="#E5E5E5"> just the first number but</font>

1176
00:54:55,809 --> 00:55:02,289
that's<font color="#CCCCCC"> really the only difference and so</font>

1177
00:55:00,010 --> 00:55:06,010
what we get back is if interface if this

1178
00:55:02,289 --> 00:55:08,740
matches will have a group number<font color="#E5E5E5"> one be</font>

1179
00:55:06,010 --> 00:55:12,130
these<font color="#CCCCCC"> parentheses symbols around / D</font>

1180
00:55:08,740 --> 00:55:14,379
plus the forward slash and this other /

1181
00:55:12,130 --> 00:55:19,390
t plus in other words<font color="#E5E5E5"> we'll get back 1 /</font>

1182
00:55:14,380 --> 00:55:20,799
4 so we can<font color="#E5E5E5"> inter serves first that</font>

1183
00:55:19,390 --> 00:55:25,049
again in the command that we<font color="#CCCCCC"> sent to the</font>

1184
00:55:20,799 --> 00:55:25,049
device show interface ethernet 1 / 4

1185
00:55:27,380 --> 00:55:33,170
and as we did before we just<font color="#CCCCCC"> can</font><font color="#E5E5E5"> send</font>

1186
00:55:30,890 --> 00:55:36,460
this using the ssh help her write

1187
00:55:33,170 --> 00:55:39,680
commands<font color="#E5E5E5"> and we get back this output and</font>

1188
00:55:36,460 --> 00:55:43,130
then if we walk through for<font color="#E5E5E5"> a line in</font>

1189
00:55:39,680 --> 00:55:44,598
output we can now start to look at this

1190
00:55:43,130 --> 00:55:47,869
let's say we're considering that this

1191
00:55:44,599 --> 00:55:49,549
interface going down let's say that<font color="#CCCCCC"> we</font>

1192
00:55:47,869 --> 00:55:51,799
really want<font color="#E5E5E5"> to check to</font><font color="#CCCCCC"> see if it's</font>

1193
00:55:49,549 --> 00:55:54,470
flapping so now we can<font color="#E5E5E5"> look at interface</font>

1194
00:55:51,799 --> 00:55:56,150
resets so these are we building a regex

1195
00:55:54,470 --> 00:55:59,058
to match on the<font color="#CCCCCC"> output of show interface</font>

1196
00:55:56,150 --> 00:56:01,730
and to look at the value right before

1197
00:55:59,059 --> 00:56:03,109
the<font color="#CCCCCC"> text of interface resets which is</font>

1198
00:56:01,730 --> 00:56:05,299
what we're doing<font color="#E5E5E5"> here so what we're</font>

1199
00:56:03,109 --> 00:56:07,609
matching on is with the carrot beginning

1200
00:56:05,299 --> 00:56:10,819
of mine followed<font color="#E5E5E5"> by one or more spaces</font>

1201
00:56:07,609 --> 00:56:12,230
and then in<font color="#CCCCCC"> parenthesis saying we care</font>

1202
00:56:10,819 --> 00:56:14,869
about the next thing which<font color="#CCCCCC"> is one or</font>

1203
00:56:12,230 --> 00:56:17,180
more digits followed by exactly a space

1204
00:56:14,869 --> 00:56:21,799
and the word the words interface resets

1205
00:56:17,180 --> 00:56:23,779
and we're looking<font color="#CCCCCC"> at now</font><font color="#E5E5E5"> in the output</font>

1206
00:56:21,799 --> 00:56:25,160
of wine not lower lower casing the

1207
00:56:23,779 --> 00:56:26,809
output<font color="#E5E5E5"> that the device give us back just</font>

1208
00:56:25,160 --> 00:56:31,098
a simple way to make sure<font color="#CCCCCC"> we don't have</font>

1209
00:56:26,809 --> 00:56:33,140
<font color="#CCCCCC">to think</font><font color="#E5E5E5"> about</font><font color="#CCCCCC"> that and we say if not</font>

1210
00:56:31,099 --> 00:56:36,500
interface resets<font color="#E5E5E5"> continue so that way we</font>

1211
00:56:33,140 --> 00:56:38,839
grab the next line and try<font color="#CCCCCC"> again but</font><font color="#E5E5E5"> if</font>

1212
00:56:36,500 --> 00:56:42,349
<font color="#E5E5E5">we did we now know that interface resets</font>

1213
00:56:38,839 --> 00:56:43,849
matched but what we matched on and what

1214
00:56:42,349 --> 00:56:46,640
the data is that we<font color="#E5E5E5"> get back when</font>

1215
00:56:43,849 --> 00:56:49,069
calling that group command that data is

1216
00:56:46,640 --> 00:56:52,430
going<font color="#E5E5E5"> to be a string which means that we</font>

1217
00:56:49,069 --> 00:56:55,460
can't do math on that we can't evaluate

1218
00:56:52,430 --> 00:56:58,220
it to say how<font color="#CCCCCC"> many times has it gone</font>

1219
00:56:55,460 --> 00:57:00,440
down for example so we passed that to

1220
00:56:58,220 --> 00:57:02,450
this<font color="#E5E5E5"> function called int to convert it</font>

1221
00:57:00,440 --> 00:57:05,809
from a string to an integer in Python

1222
00:57:02,450 --> 00:57:08,288
and so what we say here is the number of

1223
00:57:05,809 --> 00:57:10,700
interface resets equals the equipment<font color="#E5E5E5"> of</font>

1224
00:57:08,289 --> 00:57:16,069
the result of<font color="#CCCCCC"> into interface resets</font>

1225
00:57:10,700 --> 00:57:17,390
<font color="#CCCCCC">group one which should be yeah which</font>

1226
00:57:16,069 --> 00:57:19,880
would be<font color="#CCCCCC"> the number of interface presets</font>

1227
00:57:17,390 --> 00:57:21,410
and then we can evaluate that and say if

1228
00:57:19,880 --> 00:57:22,519
the number is over<font color="#CCCCCC"> ten let's say it's</font>

1229
00:57:21,410 --> 00:57:25,848
<font color="#E5E5E5">just an arbitrary number for right now</font>

1230
00:57:22,519 --> 00:57:28,368
let's<font color="#E5E5E5"> do something something different</font>

1231
00:57:25,849 --> 00:57:30,650
based on that value so if it was 111

1232
00:57:28,369 --> 00:57:32,630
link down we may just send an alarm that

1233
00:57:30,650 --> 00:57:35,750
and if it's still down to send an alarm

1234
00:57:32,630 --> 00:57:36,920
say go check this this link is down but

1235
00:57:35,750 --> 00:57:39,109
if it's<font color="#E5E5E5"> going to up and down that's</font>

1236
00:57:36,920 --> 00:57:41,090
actually more of a<font color="#CCCCCC"> problem for us based</font>

1237
00:57:39,109 --> 00:57:42,950
on traffic volumes and so we want to

1238
00:57:41,090 --> 00:57:44,960
you a little bit more so here we just

1239
00:57:42,950 --> 00:57:47,960
<font color="#E5E5E5">say a print message the interface resets</font>

1240
00:57:44,960 --> 00:57:49,310
are too high but<font color="#E5E5E5"> then we can go check a</font>

1241
00:57:47,960 --> 00:57:52,370
little<font color="#CCCCCC"> bit more</font><font color="#E5E5E5"> ask the device again</font>

1242
00:57:49,310 --> 00:57:54,350
what are the interface light levels

1243
00:57:52,370 --> 00:57:57,170
right now the<font color="#E5E5E5"> output of show interface</font>

1244
00:57:54,350 --> 00:58:02,000
ethernet for example 1 / 4 transceiver

1245
00:57:57,170 --> 00:58:04,370
or currency for details and<font color="#E5E5E5"> then we can</font>

1246
00:58:02,000 --> 00:58:05,750
use<font color="#E5E5E5"> on box eager up to parse out so that</font>

1247
00:58:04,370 --> 00:58:08,029
we can filter that<font color="#E5E5E5"> I'll put a little bit</font>

1248
00:58:05,750 --> 00:58:11,860
to only look at the received power or

1249
00:58:08,030 --> 00:58:11,860
the line where receive power is listed

1250
00:58:13,210 --> 00:58:19,940
so this<font color="#E5E5E5"> is kind of a way where you start</font>

1251
00:58:15,740 --> 00:58:21,850
to get into something that would<font color="#CCCCCC"> be</font>

1252
00:58:19,940 --> 00:58:24,470
really<font color="#CCCCCC"> cool down code doing for you</font>

1253
00:58:21,850 --> 00:58:26,120
because by having the code go ask what

1254
00:58:24,470 --> 00:58:27,859
the light levels are you could start

1255
00:58:26,120 --> 00:58:30,140
reporting on it links that have but

1256
00:58:27,860 --> 00:58:31,520
light levels imagine<font color="#E5E5E5"> getting a report in</font>

1257
00:58:30,140 --> 00:58:33,589
the morning that says hey these<font color="#CCCCCC"> ten</font>

1258
00:58:31,520 --> 00:58:35,420
interfaces have bad light they're going

1259
00:58:33,590 --> 00:58:36,500
<font color="#E5E5E5">to be problematic in the future they</font>

1260
00:58:35,420 --> 00:58:38,180
should be<font color="#E5E5E5"> checked or they should be</font>

1261
00:58:36,500 --> 00:58:40,040
clean instead of<font color="#E5E5E5"> having to get the call</font>

1262
00:58:38,180 --> 00:58:42,919
at 2am when they're bad enough that

1263
00:58:40,040 --> 00:58:44,390
they're taking<font color="#E5E5E5"> down your site so now</font>

1264
00:58:42,920 --> 00:58:46,400
we're<font color="#CCCCCC"> just asking the dough ice using</font>

1265
00:58:44,390 --> 00:58:49,700
<font color="#CCCCCC">SSH out right what are the light levels</font>

1266
00:58:46,400 --> 00:58:51,860
and so we say for mine and output so the

1267
00:58:49,700 --> 00:58:53,720
output is the light the the data we<font color="#E5E5E5"> got</font>

1268
00:58:51,860 --> 00:58:56,150
back think<font color="#E5E5E5"> of this as show interface</font>

1269
00:58:53,720 --> 00:58:57,890
transceiver and we say the right level

1270
00:58:56,150 --> 00:59:02,300
power is the equivalent to<font color="#E5E5E5"> a new regex</font>

1271
00:58:57,890 --> 00:59:05,950
to match on based on the<font color="#CCCCCC"> output of that</font>

1272
00:59:02,300 --> 00:59:09,410
data the number<font color="#E5E5E5"> for that we see in in</font>

1273
00:59:05,950 --> 00:59:12,350
the power levels so for example we're

1274
00:59:09,410 --> 00:59:14,930
looking here for the word power with

1275
00:59:12,350 --> 00:59:18,650
anything before it and then after power

1276
00:59:14,930 --> 00:59:20,029
or one<font color="#CCCCCC"> or more spaces now we see the</font>

1277
00:59:18,650 --> 00:59:21,200
<font color="#E5E5E5">grouping symbols again and this is what</font>

1278
00:59:20,030 --> 00:59:23,120
were to actually turn to parse out and

1279
00:59:21,200 --> 00:59:24,950
what we care about especially<font color="#CCCCCC"> we weren't</font>

1280
00:59:23,120 --> 00:59:26,779
looking on exactly the the hyphen

1281
00:59:24,950 --> 00:59:31,819
because it's a<font color="#CCCCCC"> negative power level and</font>

1282
00:59:26,780 --> 00:59:33,710
then one or more digits a dot one or

1283
00:59:31,820 --> 00:59:36,490
more digits and then the end of the

1284
00:59:33,710 --> 00:59:41,660
<font color="#CCCCCC">parenthesis followed</font><font color="#E5E5E5"> by a space and DVM</font>

1285
00:59:36,490 --> 00:59:43,490
the notation for<font color="#E5E5E5"> power lines and then we</font>

1286
00:59:41,660 --> 00:59:45,049
<font color="#E5E5E5">just pass to that the</font><font color="#CCCCCC"> output of why not</font>

1287
00:59:43,490 --> 00:59:50,899
lower so the lowercase version of what

1288
00:59:45,050 --> 00:59:53,090
the device gave us and so if we<font color="#E5E5E5"> get that</font>

1289
00:59:50,900 --> 00:59:54,860
back the result is still a string so we

1290
00:59:53,090 --> 00:59:57,470
can't actually act on it yet

1291
00:59:54,860 --> 00:59:59,060
but the instead<font color="#E5E5E5"> of being an integer it's</font>

1292
00:59:57,470 --> 01:00:01,129
actually what we would want to call a

1293
00:59:59,060 --> 01:00:04,130
float because<font color="#E5E5E5"> it's got a decimal point</font>

1294
01:00:01,130 --> 01:00:08,270
so<font color="#CCCCCC"> now we've done what we were calling</font>

1295
01:00:04,130 --> 01:00:10,070
casting a string to a foot simply put

1296
01:00:08,270 --> 01:00:12,320
we're converting from one type of data

1297
01:00:10,070 --> 01:00:14,480
to another now you can't do this for

1298
01:00:12,320 --> 01:00:16,640
everything but things<font color="#E5E5E5"> that can</font><font color="#CCCCCC"> be</font>

1299
01:00:14,480 --> 01:00:19,670
converted you can so if the string is

1300
01:00:16,640 --> 01:00:21,950
literally quotes one and you call that

1301
01:00:19,670 --> 01:00:24,560
and you pass that into the in function

1302
01:00:21,950 --> 01:00:27,169
you<font color="#E5E5E5"> will never</font><font color="#CCCCCC"> have a quoted version of</font>

1303
01:00:24,560 --> 01:00:29,150
one you'll have one which lets you then

1304
01:00:27,170 --> 01:00:31,040
do math about it so you could or print

1305
01:00:29,150 --> 01:00:32,870
<font color="#CCCCCC">it directly so for example</font><font color="#E5E5E5"> if I print</font>

1306
01:00:31,040 --> 01:00:37,490
this the<font color="#E5E5E5"> output in this case was</font>

1307
01:00:32,870 --> 01:00:38,870
<font color="#E5E5E5">negative 8.84 DVM that allows</font><font color="#CCCCCC"> us to</font>

1308
01:00:37,490 --> 01:00:40,759
reacting code to what the current light

1309
01:00:38,870 --> 01:00:43,160
level is and this<font color="#CCCCCC"> is a good example</font>

1310
01:00:40,760 --> 01:00:45,350
where your threshold might be more

1311
01:00:43,160 --> 01:00:47,750
conservative or more aggressive than

1312
01:00:45,350 --> 01:00:49,480
what the vendor alarms up I think this

1313
01:00:47,750 --> 01:00:51,830
vendor actually alarms in like 13 or 14

1314
01:00:49,480 --> 01:00:53,630
but in our case on this platform we

1315
01:00:51,830 --> 01:00:56,000
wanted to alarm on seven to give us room

1316
01:00:53,630 --> 01:00:58,760
to check and clean it before it becomes

1317
01:00:56,000 --> 01:01:01,310
an actual problem and so here we say if

1318
01:00:58,760 --> 01:01:04,100
they are if the power<font color="#E5E5E5"> level is less than</font>

1319
01:01:01,310 --> 01:01:07,970
negative<font color="#E5E5E5"> seven let's go run some other</font>

1320
01:01:04,100 --> 01:01:11,650
<font color="#E5E5E5">code and for</font><font color="#CCCCCC"> example an alarm saying</font>

1321
01:01:07,970 --> 01:01:13,730
warning the power<font color="#CCCCCC"> level is too low at</font>

1322
01:01:11,650 --> 01:01:15,530
Facebook this actually goes another step

1323
01:01:13,730 --> 01:01:18,020
further and we redirect traffic off the

1324
01:01:15,530 --> 01:01:20,030
interface in what we call draining by

1325
01:01:18,020 --> 01:01:23,150
changing<font color="#CCCCCC"> bgb policy for the sessions on</font>

1326
01:01:20,030 --> 01:01:25,820
each side and so we remove the<font color="#E5E5E5"> link from</font>

1327
01:01:23,150 --> 01:01:28,370
<font color="#CCCCCC">the flow of traffic and then send an</font>

1328
01:01:25,820 --> 01:01:30,410
alarm or an email<font color="#E5E5E5"> it's physically true</font>

1329
01:01:28,370 --> 01:01:31,730
the group or the in the data centers

1330
01:01:30,410 --> 01:01:34,250
that actually handled cleaning the fiber

1331
01:01:31,730 --> 01:01:36,650
so it's no<font color="#CCCCCC"> longer a massive issue for us</font>

1332
01:01:34,250 --> 01:01:38,270
because we've detected it before it has

1333
01:01:36,650 --> 01:01:41,930
<font color="#E5E5E5">gotten battened that enough to cause</font>

1334
01:01:38,270 --> 01:01:44,180
actual errors but we've also taken

1335
01:01:41,930 --> 01:01:46,549
traffic off so that way now we eliminate

1336
01:01:44,180 --> 01:01:47,960
the<font color="#E5E5E5"> human ping-pong back and forth when</font>

1337
01:01:46,550 --> 01:01:49,580
somebody in the in<font color="#CCCCCC"> the datacenter wants</font>

1338
01:01:47,960 --> 01:01:51,200
to<font color="#CCCCCC"> actually work on it because in the</font>

1339
01:01:49,580 --> 01:01:53,540
past they would have<font color="#E5E5E5"> to go say hey I got</font>

1340
01:01:51,200 --> 01:01:55,549
this interface I want<font color="#E5E5E5"> to go clean</font><font color="#CCCCCC"> it can</font>

1341
01:01:53,540 --> 01:01:57,680
you check is the<font color="#E5E5E5"> traffic okay somebody</font>

1342
01:01:55,550 --> 01:02:00,290
on on net ops or one of the network

1343
01:01:57,680 --> 01:02:02,120
teams we'd have to say yes traffic's

1344
01:02:00,290 --> 01:02:03,770
<font color="#E5E5E5">okay we can ship traffic off they would</font>

1345
01:02:02,120 --> 01:02:05,859
then<font color="#E5E5E5"> login to the devices changing</font>

1346
01:02:03,770 --> 01:02:07,880
policy to get traffic off of it and<font color="#E5E5E5"> that</font>

1347
01:02:05,860 --> 01:02:08,770
might be a half<font color="#E5E5E5"> hour experience before</font>

1348
01:02:07,880 --> 01:02:10,810
the<font color="#E5E5E5"> person in the</font>

1349
01:02:08,770 --> 01:02:13,600
and data center can even try to clean

1350
01:02:10,810 --> 01:02:15,100
the fiber now we've got time<font color="#E5E5E5"> to handle</font>

1351
01:02:13,600 --> 01:02:16,569
the on the draining stuff that we just

1352
01:02:15,100 --> 01:02:18,759
<font color="#E5E5E5">single say hey we need to drain this</font>

1353
01:02:16,570 --> 01:02:20,440
link it's smart enough to know whether

1354
01:02:18,760 --> 01:02:22,450
or not safe because it potentially will

1355
01:02:20,440 --> 01:02:23,860
walk f bar in this case but if it<font color="#CCCCCC"> is</font>

1356
01:02:22,450 --> 01:02:26,740
safe then I don't let the full continue

1357
01:02:23,860 --> 01:02:32,470
and then we<font color="#E5E5E5"> just fix them as</font><font color="#CCCCCC"> we as we</font>

1358
01:02:26,740 --> 01:02:33,700
<font color="#CCCCCC">have time in</font><font color="#E5E5E5"> the data center okay are</font>

1359
01:02:32,470 --> 01:02:35,709
<font color="#E5E5E5">there</font><font color="#CCCCCC"> any questions so far because we're</font>

1360
01:02:33,700 --> 01:02:37,629
going<font color="#E5E5E5"> to break into kind of the next</font>

1361
01:02:35,710 --> 01:02:46,080
<font color="#CCCCCC">evolution of this of how to scale this</font>

1362
01:02:37,630 --> 01:02:48,970
bigger yeah yes I actually just thought

1363
01:02:46,080 --> 01:02:49,840
so I doubt is actually good point so

1364
01:02:48,970 --> 01:02:52,390
there's actually<font color="#E5E5E5"> a mistake in this</font>

1365
01:02:49,840 --> 01:02:54,430
regular expression so a dot in this one

1366
01:02:52,390 --> 01:02:56,830
is<font color="#E5E5E5"> going to match any character what you</font>

1367
01:02:54,430 --> 01:03:01,509
actually want is a an exact match for a

1368
01:02:56,830 --> 01:03:05,220
dot so here's how you change that so

1369
01:03:01,510 --> 01:03:05,220
let's<font color="#E5E5E5"> say we had our RX power</font>

1370
01:03:15,230 --> 01:03:23,300
and so what I originally put was dot

1371
01:03:20,540 --> 01:03:29,960
<font color="#E5E5E5">power so the dot here is one or more of</font>

1372
01:03:23,300 --> 01:03:32,600
any character or dot plus power followed

1373
01:03:29,960 --> 01:03:34,580
by / S Plus and then in the grouping

1374
01:03:32,600 --> 01:03:36,290
symbols were the actual maps for the

1375
01:03:34,580 --> 01:03:39,319
value we saw from show interface

1376
01:03:36,290 --> 01:03:42,140
transceiver the negative / deep us for

1377
01:03:39,320 --> 01:03:44,270
the<font color="#E5E5E5"> first digit here's the mistake that</font>

1378
01:03:42,140 --> 01:03:46,430
thank you I've hurt your name what was

1379
01:03:44,270 --> 01:03:48,200
your new Matthew cool Matthew just

1380
01:03:46,430 --> 01:03:50,868
pointed out so I actually put just a dot

1381
01:03:48,200 --> 01:03:52,609
so that technically does match but it

1382
01:03:50,869 --> 01:03:55,340
won't match exactly a dot it will match

1383
01:03:52,609 --> 01:03:59,359
one of any character so what I really

1384
01:03:55,340 --> 01:04:02,690
want is to to escape the match of that

1385
01:03:59,359 --> 01:04:04,640
and match exactly the dot by putting<font color="#E5E5E5"> a</font>

1386
01:04:02,690 --> 01:04:06,650
forward slash instead of a instead<font color="#E5E5E5"> of</font>

1387
01:04:04,640 --> 01:04:09,500
any other / and instead<font color="#E5E5E5"> of the dot</font>

1388
01:04:06,650 --> 01:04:11,810
itself so if i put<font color="#CCCCCC"> a forward slash that</font>

1389
01:04:09,500 --> 01:04:14,330
means ignore what's next and treated as

1390
01:04:11,810 --> 01:04:16,609
<font color="#E5E5E5">an exact match and don't treat it as a</font>

1391
01:04:14,330 --> 01:04:20,600
regular<font color="#CCCCCC"> expression but that's only for</font>

1392
01:04:16,609 --> 01:04:24,369
the exact character after this backward

1393
01:04:20,600 --> 01:04:27,618
slash wait that one<font color="#E5E5E5"> okay my bad my bad</font>

1394
01:04:24,369 --> 01:04:30,920
okay sweet sweet I've<font color="#E5E5E5"> looked at the</font>

1395
01:04:27,619 --> 01:04:32,390
slide so much it's<font color="#E5E5E5"> awesome cool and so</font>

1396
01:04:30,920 --> 01:04:34,520
<font color="#E5E5E5">what we say is backward slash ignore</font>

1397
01:04:32,390 --> 01:04:37,520
what I just said backward slash what was

1398
01:04:34,520 --> 01:04:41,359
your name Thank You<font color="#E5E5E5"> Casey awesome so</font>

1399
01:04:37,520 --> 01:04:48,020
backward slash dot and then we do again

1400
01:04:41,359 --> 01:04:49,730
the<font color="#E5E5E5"> backslash</font><font color="#CCCCCC"> d plus and then we close</font>

1401
01:04:48,020 --> 01:04:52,520
our parentheses to say<font color="#E5E5E5"> this is the end</font>

1402
01:04:49,730 --> 01:04:54,619
<font color="#E5E5E5">of the group and then I had an exact</font>

1403
01:04:52,520 --> 01:04:57,170
match for<font color="#CCCCCC"> an</font><font color="#E5E5E5"> S but we could also use / S</font>

1404
01:04:54,619 --> 01:05:02,210
Plus here followed by<font color="#CCCCCC"> the exact match of</font>

1405
01:04:57,170 --> 01:05:06,080
dbm and that was in the output<font color="#E5E5E5"> of</font>

1406
01:05:02,210 --> 01:05:09,200
Wyandotte lower now this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font>

1407
01:05:06,080 --> 01:05:10,460
break<font color="#E5E5E5"> her out</font><font color="#CCCCCC"> no so my line right now is</font>

1408
01:05:09,200 --> 01:05:12,740
the last thing<font color="#E5E5E5"> I worked</font><font color="#CCCCCC"> on so it's not</font>

1409
01:05:10,460 --> 01:05:14,750
actually<font color="#CCCCCC"> with the slides look nut but</font>

1410
01:05:12,740 --> 01:05:17,660
that technically should match the output

1411
01:05:14,750 --> 01:05:19,780
of that actually let's try that real

1412
01:05:17,660 --> 01:05:19,779
quick

1413
01:05:37,780 --> 01:05:41,950
ok cool so if you're not familiar with

1414
01:05:40,330 --> 01:05:46,230
this output I'm showing you right now I

1415
01:05:41,950 --> 01:05:49,689
actually have a sample<font color="#E5E5E5"> of it in here and</font>

1416
01:05:46,230 --> 01:05:51,490
so if you<font color="#E5E5E5"> look at any any common common</font>

1417
01:05:49,690 --> 01:05:54,190
device it's going to give you actually a

1418
01:05:51,490 --> 01:05:56,680
bunch of<font color="#E5E5E5"> data and the reason I pass this</font>

1419
01:05:54,190 --> 01:05:59,200
to<font color="#CCCCCC"> e grew up on box is the actual output</font>

1420
01:05:56,680 --> 01:06:03,069
of the device is in a pretty formatted

1421
01:05:59,200 --> 01:06:04,359
table using things like hyphens and it's

1422
01:06:03,070 --> 01:06:06,010
meant to be human friendly because<font color="#E5E5E5"> it</font>

1423
01:06:04,360 --> 01:06:07,750
actually gives you a ton of data things

1424
01:06:06,010 --> 01:06:10,240
like what<font color="#E5E5E5"> are the optical power levels</font>

1425
01:06:07,750 --> 01:06:12,130
of both receive and transmit and it also

1426
01:06:10,240 --> 01:06:15,100
tells you what are the alarming levels

1427
01:06:12,130 --> 01:06:17,500
of that platform so I cut off in this

1428
01:06:15,100 --> 01:06:21,040
output by using eager up to only<font color="#CCCCCC"> grab</font>

1429
01:06:17,500 --> 01:06:24,670
the line that contains either capital R

1430
01:06:21,040 --> 01:06:26,850
X or lowercase R X because I didn't have

1431
01:06:24,670 --> 01:06:28,990
a way to tell the device grabbed by

1432
01:06:26,850 --> 01:06:31,330
<font color="#E5E5E5">lowercase version of this output because</font>

1433
01:06:28,990 --> 01:06:35,200
it didn't understand<font color="#E5E5E5"> that but it with</font>

1434
01:06:31,330 --> 01:06:37,150
<font color="#E5E5E5">egret or grep this way I can pass</font>

1435
01:06:35,200 --> 01:06:39,160
multiple things and if any either of a

1436
01:06:37,150 --> 01:06:41,220
match it'll give you the output so here

1437
01:06:39,160 --> 01:06:49,750
<font color="#E5E5E5">I was actually looking on this value</font>

1438
01:06:41,220 --> 01:06:51,520
which is actually<font color="#E5E5E5"> the line yeah so if</font><font color="#CCCCCC"> I</font>

1439
01:06:49,750 --> 01:06:53,800
look<font color="#E5E5E5"> at this in this case output and</font>

1440
01:06:51,520 --> 01:06:57,030
then the element number one or at

1441
01:06:53,800 --> 01:07:00,610
position 1 the output that was actually

1442
01:06:57,030 --> 01:07:03,250
that we care about was this line here

1443
01:07:00,610 --> 01:07:04,750
<font color="#CCCCCC">are X power and then the first</font><font color="#E5E5E5"> value I</font>

1444
01:07:03,250 --> 01:07:08,170
just know by looking at that platform

1445
01:07:04,750 --> 01:07:09,220
that that is the<font color="#E5E5E5"> current value of it but</font>

1446
01:07:08,170 --> 01:07:12,220
then the other numbers are different

1447
01:07:09,220 --> 01:07:15,160
thresholds for<font color="#E5E5E5"> alarms I forget what this</font>

1448
01:07:12,220 --> 01:07:17,560
one is but this negative 13 point 397 is

1449
01:07:15,160 --> 01:07:20,410
the actual level where that device sends

1450
01:07:17,560 --> 01:07:22,120
an alarm or a syslog message well in our

1451
01:07:20,410 --> 01:07:25,629
case we we generally see that by the

1452
01:07:22,120 --> 01:07:27,100
time it hits like 10 to 11 it's causing

1453
01:07:25,630 --> 01:07:28,630
enough problem that users see the issue

1454
01:07:27,100 --> 01:07:30,850
and they're either having a bad

1455
01:07:28,630 --> 01:07:32,920
experience on facebook<font color="#E5E5E5"> or it's causing a</font>

1456
01:07:30,850 --> 01:07:35,140
bad experience internally so we

1457
01:07:32,920 --> 01:07:36,580
generally have a limit of about seven to

1458
01:07:35,140 --> 01:07:38,290
eight is where we try to get traffic off

1459
01:07:36,580 --> 01:07:39,940
of it try<font color="#E5E5E5"> to fix it generally by</font>

1460
01:07:38,290 --> 01:07:41,650
cleaning<font color="#E5E5E5"> the fibers or replacing the</font>

1461
01:07:39,940 --> 01:07:45,160
optics or replacing even the patch panel

1462
01:07:41,650 --> 01:07:47,110
<font color="#E5E5E5">pores and so what we're using this we're</font>

1463
01:07:45,160 --> 01:07:48,910
trying<font color="#CCCCCC"> to match yours the regex we just</font>

1464
01:07:47,110 --> 01:07:53,130
built is supposedly to pull out<font color="#E5E5E5"> this</font>

1465
01:07:48,910 --> 01:07:53,129
first<font color="#E5E5E5"> number here 8.84</font>

1466
01:07:58,440 --> 01:08:03,160
are there any questions so far I know

1467
01:08:00,849 --> 01:08:05,170
this is like lots and lots of regex as<font color="#E5E5E5"> I</font>

1468
01:08:03,160 --> 01:08:08,098
hope this<font color="#E5E5E5"> is useful so far but do we</font>

1469
01:08:05,170 --> 01:08:08,099
have any questions before we continue

1470
01:08:08,250 --> 01:08:12,310
<font color="#E5E5E5">okay cool so the next major section I</font>

1471
01:08:11,140 --> 01:08:16,180
want to go in through is more of like

1472
01:08:12,310 --> 01:08:17,738
how do you make this real world ready so

1473
01:08:16,180 --> 01:08:20,730
<font color="#E5E5E5">hopefully in your mind as you go through</font>

1474
01:08:17,738 --> 01:08:23,858
this you should have a lot<font color="#CCCCCC"> of questions</font>

1475
01:08:20,729 --> 01:08:27,519
because this idea is what really runs

1476
01:08:23,859 --> 01:08:30,190
our network at<font color="#E5E5E5"> Facebook it allows</font><font color="#CCCCCC"> us to</font>

1477
01:08:27,520 --> 01:08:31,779
have<font color="#CCCCCC"> a single person being an on-call by</font>

1478
01:08:30,189 --> 01:08:35,500
replacing most of what we used to do

1479
01:08:31,779 --> 01:08:37,390
<font color="#E5E5E5">biko which means that most of us now</font>

1480
01:08:35,500 --> 01:08:38,738
just write code to do that but there are

1481
01:08:37,390 --> 01:08:40,719
design issues as you try to build this

1482
01:08:38,738 --> 01:08:42,068
bigger and<font color="#E5E5E5"> I just want to share with you</font>

1483
01:08:40,719 --> 01:08:44,279
some food for<font color="#CCCCCC"> thought and things as</font>

1484
01:08:42,069 --> 01:08:46,630
you're trying to start this on your own

1485
01:08:44,279 --> 01:08:50,440
to make<font color="#E5E5E5"> you just to be in the back your</font>

1486
01:08:46,630 --> 01:08:52,239
head so the first major problem and if

1487
01:08:50,439 --> 01:08:54,700
you're actually looking at<font color="#E5E5E5"> the code we</font>

1488
01:08:52,238 --> 01:08:56,528
all the code on be demoing with is on

1489
01:08:54,700 --> 01:08:59,469
like the directories in the USB key

1490
01:08:56,529 --> 01:09:01,509
there's actually two copies I've been

1491
01:08:59,469 --> 01:09:04,120
demoing with one called nanog demo da

1492
01:09:01,509 --> 01:09:05,920
<font color="#CCCCCC">Hye I put together a sample of like an</font>

1493
01:09:04,120 --> 01:09:08,528
improved version called nanog demo

1494
01:09:05,920 --> 01:09:10,690
better that gives you something to look

1495
01:09:08,529 --> 01:09:16,380
at as an idea to apply what we're going

1496
01:09:10,689 --> 01:09:19,568
to look at so if you run that<font color="#E5E5E5"> one it</font>

1497
01:09:16,380 --> 01:09:20,980
changes slightly but the code if<font color="#CCCCCC"> you</font>

1498
01:09:19,569 --> 01:09:24,160
actually look at it will be a lot easier

1499
01:09:20,979 --> 01:09:25,778
<font color="#E5E5E5">to follow and read and it's doing the</font>

1500
01:09:24,160 --> 01:09:27,309
<font color="#E5E5E5">exact</font><font color="#CCCCCC"> same thing though but I just</font>

1501
01:09:25,779 --> 01:09:29,140
<font color="#E5E5E5">wanted to point that out because we're</font>

1502
01:09:27,310 --> 01:09:31,089
<font color="#E5E5E5">about to break</font><font color="#CCCCCC"> and all that um that you</font>

1503
01:09:29,140 --> 01:09:32,380
have two copies of this one<font color="#E5E5E5"> that's the</font>

1504
01:09:31,089 --> 01:09:34,568
really simple version that walks through

1505
01:09:32,380 --> 01:09:36,460
kind of in the same way we did the

1506
01:09:34,569 --> 01:09:39,160
tutorials and then a<font color="#CCCCCC"> little bit more</font>

1507
01:09:36,460 --> 01:09:41,980
<font color="#E5E5E5">advanced version so if we walk through</font>

1508
01:09:39,160 --> 01:09:43,450
the actual problems though one big

1509
01:09:41,979 --> 01:09:46,509
problem we have right<font color="#E5E5E5"> now is it's really</font>

1510
01:09:43,450 --> 01:09:53,108
untestable if you actually look at the

1511
01:09:46,509 --> 01:09:55,380
<font color="#E5E5E5">code for nanog demoed up high everything</font>

1512
01:09:53,109 --> 01:09:58,380
is<font color="#CCCCCC"> in what we call global global</font>

1513
01:09:55,380 --> 01:09:58,380
namespace

1514
01:09:59,870 --> 01:10:05,880
so we<font color="#E5E5E5"> walked</font><font color="#CCCCCC"> through this is the actual</font>

1515
01:10:02,310 --> 01:10:09,570
<font color="#E5E5E5">file I demoed with can everybody see</font>

1516
01:10:05,880 --> 01:10:11,400
them yeah and so what we have is<font color="#CCCCCC"> we</font><font color="#E5E5E5"> have</font>

1517
01:10:09,570 --> 01:10:13,110
all the regular expressions defined in

1518
01:10:11,400 --> 01:10:14,809
what we call global space so they're not

1519
01:10:13,110 --> 01:10:20,130
under a function or anything like that

1520
01:10:14,810 --> 01:10:21,930
we also open the file in<font color="#CCCCCC"> global space so</font>

1521
01:10:20,130 --> 01:10:23,250
when things are<font color="#CCCCCC"> not in functions and</font>

1522
01:10:21,930 --> 01:10:25,140
they're just all the way on<font color="#CCCCCC"> the side</font>

1523
01:10:23,250 --> 01:10:27,540
here<font color="#E5E5E5"> this is what we call a simple</font>

1524
01:10:25,140 --> 01:10:29,730
script in Python and so what happens

1525
01:10:27,540 --> 01:10:31,950
here<font color="#CCCCCC"> is when this code runs everything</font>

1526
01:10:29,730 --> 01:10:34,769
in order<font color="#E5E5E5"> top down is going</font><font color="#CCCCCC"> to run like</font>

1527
01:10:31,950 --> 01:10:38,130
it is this will lead<font color="#CCCCCC"> to a really</font><font color="#E5E5E5"> long</font>

1528
01:10:34,770 --> 01:10:40,340
file over time but the hardest<font color="#E5E5E5"> part is</font>

1529
01:10:38,130 --> 01:10:42,630
it leads to a file that can't be tested

1530
01:10:40,340 --> 01:10:44,820
so software<font color="#E5E5E5"> testing is</font><font color="#CCCCCC"> this idea that</font>

1531
01:10:42,630 --> 01:10:46,470
you eventually get to a point where you

1532
01:10:44,820 --> 01:10:48,990
have so much code that you can't<font color="#E5E5E5"> just</font>

1533
01:10:46,470 --> 01:10:51,240
react to when it breaks you can't<font color="#E5E5E5"> just</font>

1534
01:10:48,990 --> 01:10:52,980
write code and hope it<font color="#CCCCCC"> doesn't break you</font>

1535
01:10:51,240 --> 01:10:55,200
have to have some way to validate that

1536
01:10:52,980 --> 01:10:57,000
yes this change is not<font color="#E5E5E5"> going to break</font>

1537
01:10:55,200 --> 01:10:59,700
these other three hundred lines of code

1538
01:10:57,000 --> 01:11:02,940
and so the way we do that is we build

1539
01:10:59,700 --> 01:11:05,760
test cases around individual sections of

1540
01:11:02,940 --> 01:11:08,549
functionality but<font color="#E5E5E5"> to do that we have to</font>

1541
01:11:05,760 --> 01:11:10,800
have a<font color="#E5E5E5"> way for those test cases to run</font>

1542
01:11:08,550 --> 01:11:14,370
only exact functions of this script

1543
01:11:10,800 --> 01:11:15,690
without writing the whole thing so

1544
01:11:14,370 --> 01:11:18,000
that's<font color="#E5E5E5"> one big problem we have right now</font>

1545
01:11:15,690 --> 01:11:20,099
<font color="#E5E5E5">and so if you look through this this is</font>

1546
01:11:18,000 --> 01:11:23,340
the actual code and<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> walk</font><font color="#CCCCCC"> through</font>

1547
01:11:20,100 --> 01:11:24,930
and it's one giant if statement<font color="#E5E5E5"> for is</font>

1548
01:11:23,340 --> 01:11:26,940
actually walking through<font color="#E5E5E5"> in a for</font>

1549
01:11:24,930 --> 01:11:28,980
statement with an if statement so we

1550
01:11:26,940 --> 01:11:31,740
literally walk one line at a time try to

1551
01:11:28,980 --> 01:11:33,870
do the match and then we<font color="#E5E5E5"> try to inspect</font>

1552
01:11:31,740 --> 01:11:35,519
the out what's in there<font color="#E5E5E5"> and</font><font color="#CCCCCC"> try to see</font>

1553
01:11:33,870 --> 01:11:37,140
if<font color="#E5E5E5"> we have known conditions and then</font>

1554
01:11:35,520 --> 01:11:40,290
right away<font color="#E5E5E5"> we try to remediate against</font>

1555
01:11:37,140 --> 01:11:41,640
them this will lead<font color="#CCCCCC"> to a</font><font color="#E5E5E5"> really long</font>

1556
01:11:40,290 --> 01:11:43,350
file if<font color="#E5E5E5"> you keep it all in one file</font>

1557
01:11:41,640 --> 01:11:44,520
because imagine<font color="#E5E5E5"> all these regular</font>

1558
01:11:43,350 --> 01:11:46,830
expressions all these commands are going

1559
01:11:44,520 --> 01:11:48,690
running its devices it's going to become

1560
01:11:46,830 --> 01:11:50,519
a lot of scrolling which will become

1561
01:11:48,690 --> 01:11:52,620
really problematic when you have

1562
01:11:50,520 --> 01:11:57,870
multiple people working on the same file

1563
01:11:52,620 --> 01:11:59,580
and also hard<font color="#E5E5E5"> to kind of evolved okay so</font>

1564
01:11:57,870 --> 01:12:02,820
that's one problem and we're<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to go</font>

1565
01:11:59,580 --> 01:12:04,680
in a minute on how to fix these the

1566
01:12:02,820 --> 01:12:07,200
other design issue is<font color="#CCCCCC"> that it's really</font>

1567
01:12:04,680 --> 01:12:08,930
<font color="#CCCCCC">confusing if you look at</font><font color="#E5E5E5"> what I just</font>

1568
01:12:07,200 --> 01:12:12,450
showed you we're actually miss mixing

1569
01:12:08,930 --> 01:12:14,000
what we could call the system code with

1570
01:12:12,450 --> 01:12:16,679
the actual mediation

1571
01:12:14,000 --> 01:12:18,420
so imagine<font color="#CCCCCC"> this system that</font><font color="#E5E5E5"> you're</font>

1572
01:12:16,680 --> 01:12:20,940
building<font color="#CCCCCC"> is like a platform and then you</font>

1573
01:12:18,420 --> 01:12:22,500
have people implementing for example

1574
01:12:20,940 --> 01:12:24,629
your<font color="#CCCCCC"> knock engineers or your network</font>

1575
01:12:22,500 --> 01:12:26,610
team implementing the remediations of

1576
01:12:24,630 --> 01:12:28,620
what to do it's a nice way to split<font color="#E5E5E5"> it</font>

1577
01:12:26,610 --> 01:12:30,299
out as you grow to have more people but

1578
01:12:28,620 --> 01:12:32,070
right<font color="#CCCCCC"> now all of it runs together which</font>

1579
01:12:30,300 --> 01:12:35,850
means we don't have<font color="#E5E5E5"> any kind of clear</font>

1580
01:12:32,070 --> 01:12:37,410
line to separate the other issue that

1581
01:12:35,850 --> 01:12:40,320
hopefully sparks in your mind is that

1582
01:12:37,410 --> 01:12:41,639
<font color="#CCCCCC">this only runs on startup so if I'm</font>

1583
01:12:40,320 --> 01:12:43,980
running this on a syslog server and

1584
01:12:41,640 --> 01:12:46,050
let's say I have 500 devices writing the

1585
01:12:43,980 --> 01:12:49,110
syslog messages I'm gonna have to<font color="#E5E5E5"> keep</font>

1586
01:12:46,050 --> 01:12:50,640
running this over and over but so far I

1587
01:12:49,110 --> 01:12:51,630
haven't<font color="#E5E5E5"> saved any state about what's</font>

1588
01:12:50,640 --> 01:12:54,360
happened so I'm just going to<font color="#E5E5E5"> keep</font>

1589
01:12:51,630 --> 01:12:56,820
reprocessing those over and over so we

1590
01:12:54,360 --> 01:12:59,040
would need<font color="#E5E5E5"> to make this real time to be</font>

1591
01:12:56,820 --> 01:13:01,710
<font color="#CCCCCC">able to keep track of what it's already</font>

1592
01:12:59,040 --> 01:13:04,440
worked on but also be<font color="#CCCCCC"> able to read the</font>

1593
01:13:01,710 --> 01:13:06,510
log messages as they come in because<font color="#CCCCCC"> if</font>

1594
01:13:04,440 --> 01:13:08,490
<font color="#CCCCCC">you have five or</font><font color="#E5E5E5"> ten thousand devices</font>

1595
01:13:06,510 --> 01:13:10,740
saying<font color="#E5E5E5"> log messages you don't really</font>

1596
01:13:08,490 --> 01:13:12,780
<font color="#E5E5E5">want to stop everything run the script</font>

1597
01:13:10,740 --> 01:13:14,550
again and start over<font color="#E5E5E5"> because you might</font>

1598
01:13:12,780 --> 01:13:17,309
be trying<font color="#E5E5E5"> to remediate or work on</font>

1599
01:13:14,550 --> 01:13:19,590
hundreds of devices at once if you have

1600
01:13:17,310 --> 01:13:21,300
a lot of links going up and down or and

1601
01:13:19,590 --> 01:13:23,310
I only showed<font color="#E5E5E5"> links for example but</font>

1602
01:13:21,300 --> 01:13:25,800
<font color="#E5E5E5">imagine any problem you might</font><font color="#CCCCCC"> be faced</font>

1603
01:13:23,310 --> 01:13:28,350
you could troubleshoot like a really

1604
01:13:25,800 --> 01:13:31,350
<font color="#E5E5E5">common example that has saved a lot of</font>

1605
01:13:28,350 --> 01:13:33,900
time is we've run into cases<font color="#E5E5E5"> where the</font>

1606
01:13:31,350 --> 01:13:35,370
<font color="#CCCCCC">equipment</font><font color="#E5E5E5"> of show IP route doesn't</font>

1607
01:13:33,900 --> 01:13:37,290
actually match what the device is really

1608
01:13:35,370 --> 01:13:39,510
doing and so if<font color="#E5E5E5"> you have a big chassis</font>

1609
01:13:37,290 --> 01:13:41,040
with like distributed line cards there's

1610
01:13:39,510 --> 01:13:42,780
ways to ask the line cards what do you

1611
01:13:41,040 --> 01:13:45,060
think the routing table looks like in

1612
01:13:42,780 --> 01:13:46,710
the hardware forwarding table and so

1613
01:13:45,060 --> 01:13:48,750
we've<font color="#CCCCCC"> had enough outages caused by those</font>

1614
01:13:46,710 --> 01:13:51,120
being mismatched that we literally just

1615
01:13:48,750 --> 01:13:54,390
<font color="#E5E5E5">have remediations and alarms running in</font>

1616
01:13:51,120 --> 01:13:56,099
the background that are based on for one

1617
01:13:54,390 --> 01:13:57,660
example of this system is that there's

1618
01:13:56,100 --> 01:14:00,840
an audit that runs periodic it says

1619
01:13:57,660 --> 01:14:02,550
every<font color="#CCCCCC"> 30 minutes ask every device what's</font>

1620
01:14:00,840 --> 01:14:04,500
your writing table and then ask<font color="#E5E5E5"> a rewind</font>

1621
01:14:02,550 --> 01:14:06,660
card what's your routing table and if

1622
01:14:04,500 --> 01:14:08,910
there's a mismatch fire alarm to<font color="#E5E5E5"> Fr to</font>

1623
01:14:06,660 --> 01:14:11,190
work on it that's an example<font color="#E5E5E5"> where you</font>

1624
01:14:08,910 --> 01:14:12,690
<font color="#CCCCCC">can go from just simple League downs to</font>

1625
01:14:11,190 --> 01:14:14,460
troubleshooting things that might just

1626
01:14:12,690 --> 01:14:16,200
be black calling your traffic that could

1627
01:14:14,460 --> 01:14:20,430
<font color="#CCCCCC">easily take half an hour publishing time</font>

1628
01:14:16,200 --> 01:14:21,690
to figure out<font color="#CCCCCC"> okay so we're not real</font>

1629
01:14:20,430 --> 01:14:23,670
time right now and we're owing to<font color="#E5E5E5"> read</font>

1630
01:14:21,690 --> 01:14:26,009
<font color="#E5E5E5">analog message on startup so we we could</font>

1631
01:14:23,670 --> 01:14:26,880
fix<font color="#E5E5E5"> that by kind of keeping track of</font>

1632
01:14:26,010 --> 01:14:29,310
messages we've read

1633
01:14:26,880 --> 01:14:31,170
and then continuously opening the log

1634
01:14:29,310 --> 01:14:33,900
file and reading and looking at only the

1635
01:14:31,170 --> 01:14:36,030
change messages if we<font color="#E5E5E5"> wanted to get</font>

1636
01:14:33,900 --> 01:14:37,530
really<font color="#E5E5E5"> tricky we could go into like a</font>

1637
01:14:36,030 --> 01:14:39,870
circular pattern<font color="#E5E5E5"> where we continuously</font>

1638
01:14:37,530 --> 01:14:42,659
read but then throw away after certain a

1639
01:14:39,870 --> 01:14:44,070
certain age because one<font color="#CCCCCC"> thing you want</font>

1640
01:14:42,659 --> 01:14:46,710
<font color="#CCCCCC">to avoid is a memory</font><font color="#E5E5E5"> leak on a</font>

1641
01:14:44,070 --> 01:14:48,509
long-running thing like this so you

1642
01:14:46,710 --> 01:14:50,699
could in the simplest sense implement

1643
01:14:48,510 --> 01:14:52,050
this as like a cron job and just run it

1644
01:14:50,699 --> 01:14:54,178
and keep track of what you've worked on

1645
01:14:52,050 --> 01:14:55,949
the other sense to keep this<font color="#CCCCCC"> real-time</font>

1646
01:14:54,179 --> 01:14:57,510
<font color="#CCCCCC">is you could run it</font><font color="#E5E5E5"> like a circular</font>

1647
01:14:55,949 --> 01:15:01,320
pattern<font color="#E5E5E5"> where it continuously reads and</font>

1648
01:14:57,510 --> 01:15:03,300
then throws away the old messages so

1649
01:15:01,320 --> 01:15:06,509
that you don't store them forever in

1650
01:15:03,300 --> 01:15:09,480
memory<font color="#E5E5E5"> okay so the</font><font color="#CCCCCC"> other issue is we</font>

1651
01:15:06,510 --> 01:15:11,010
have no<font color="#E5E5E5"> sense of new verse known meaning</font>

1652
01:15:09,480 --> 01:15:14,250
that<font color="#E5E5E5"> if our code crashes and starts</font>

1653
01:15:11,010 --> 01:15:16,440
again we potentially rerun everything

1654
01:15:14,250 --> 01:15:18,150
we've worked on so if you have a couple

1655
01:15:16,440 --> 01:15:21,449
hundred events that you<font color="#E5E5E5"> worked on today</font>

1656
01:15:18,150 --> 01:15:23,638
your cook crashes and starts again you

1657
01:15:21,449 --> 01:15:26,129
don't<font color="#E5E5E5"> want to ignore this issue while</font>

1658
01:15:23,639 --> 01:15:27,810
you're reprocessing the first hundred so

1659
01:15:26,130 --> 01:15:29,670
that's<font color="#E5E5E5"> where getting into databases and</font>

1660
01:15:27,810 --> 01:15:33,270
interacting with data storage will let

1661
01:15:29,670 --> 01:15:34,860
you have<font color="#CCCCCC"> a way to to both save the fact</font>

1662
01:15:33,270 --> 01:15:38,270
that<font color="#CCCCCC"> you've worked on something but</font><font color="#E5E5E5"> then</font>

1663
01:15:34,860 --> 01:15:38,269
come back to it<font color="#E5E5E5"> to evaluate it later</font>

1664
01:15:38,540 --> 01:15:42,420
finally I briefly just got into this a

1665
01:15:40,889 --> 01:15:44,239
minute<font color="#CCCCCC"> ago but this is going to be</font>

1666
01:15:42,420 --> 01:15:46,739
<font color="#E5E5E5">really slow in</font><font color="#CCCCCC"> the way it</font><font color="#E5E5E5"> is right now</font>

1667
01:15:44,239 --> 01:15:48,480
because we're processing things in a

1668
01:15:46,739 --> 01:15:50,218
linear fashion<font color="#E5E5E5"> in that we're going to</font>

1669
01:15:48,480 --> 01:15:52,919
read each message and then<font color="#E5E5E5"> try to work</font>

1670
01:15:50,219 --> 01:15:55,260
on it meet in this all in order so if we

1671
01:15:52,920 --> 01:15:58,110
have 500 messages we're going<font color="#E5E5E5"> to be a</font>

1672
01:15:55,260 --> 01:16:01,110
lot slower than<font color="#E5E5E5"> if we had</font><font color="#CCCCCC"> 10 or or two</font>

1673
01:15:58,110 --> 01:16:05,190
messages okay so here's some<font color="#CCCCCC"> ideas on</font>

1674
01:16:01,110 --> 01:16:08,519
how we can<font color="#CCCCCC"> improve this so for the first</font>

1675
01:16:05,190 --> 01:16:10,980
part being untestable we can move almost

1676
01:16:08,520 --> 01:16:13,860
<font color="#E5E5E5">all of this hour of global scope by</font>

1677
01:16:10,980 --> 01:16:16,500
defining functions and instead of<font color="#E5E5E5"> having</font>

1678
01:16:13,860 --> 01:16:19,790
all this code in global space we can

1679
01:16:16,500 --> 01:16:19,790
<font color="#E5E5E5">have something like</font><font color="#CCCCCC"> this</font>

1680
01:16:29,490 --> 01:16:33,960
so it's a slightly different version<font color="#CCCCCC"> of</font>

1681
01:16:31,440 --> 01:16:35,099
the same same<font color="#E5E5E5"> exact thing I left the</font>

1682
01:16:33,960 --> 01:16:38,070
regular expressions in global space

1683
01:16:35,100 --> 01:16:40,710
because they're likely not to change but

1684
01:16:38,070 --> 01:16:44,070
then we we've turned read logs into a

1685
01:16:40,710 --> 01:16:45,420
function for<font color="#E5E5E5"> example and so now when we</font>

1686
01:16:44,070 --> 01:16:47,790
want to read the logs we just call the

1687
01:16:45,420 --> 01:16:50,160
function and then when we want to parse

1688
01:16:47,790 --> 01:16:53,220
the logs we have a separate function

1689
01:16:50,160 --> 01:16:56,309
that takes in the log lines and runs the

1690
01:16:53,220 --> 01:16:58,830
regex match against them<font color="#CCCCCC"> so and then</font>

1691
01:16:56,310 --> 01:17:02,250
<font color="#E5E5E5">finally the remediations are now run as</font>

1692
01:16:58,830 --> 01:17:05,010
a function individually so this lets us

1693
01:17:02,250 --> 01:17:06,300
build logic to test the individual

1694
01:17:05,010 --> 01:17:09,180
<font color="#CCCCCC">components of what we're building here</font>

1695
01:17:06,300 --> 01:17:10,890
and then make<font color="#CCCCCC"> sure that if we change</font>

1696
01:17:09,180 --> 01:17:12,630
something that one piece still works but

1697
01:17:10,890 --> 01:17:14,760
it also means<font color="#E5E5E5"> that if we changed a bunch</font>

1698
01:17:12,630 --> 01:17:16,680
of things or if<font color="#E5E5E5"> we only change one piece</font>

1699
01:17:14,760 --> 01:17:18,090
we likely only have to test<font color="#E5E5E5"> that one</font>

1700
01:17:16,680 --> 01:17:22,590
piece do you can discover what we're

1701
01:17:18,090 --> 01:17:27,300
doing<font color="#E5E5E5"> ok so let's look at a few of the</font>

1702
01:17:22,590 --> 01:17:28,830
other issues ok cool so the other<font color="#E5E5E5"> part</font>

1703
01:17:27,300 --> 01:17:30,870
is that it's<font color="#E5E5E5"> kind of confusing right now</font>

1704
01:17:28,830 --> 01:17:33,450
we're really mixing what we call

1705
01:17:30,870 --> 01:17:34,530
internal code with for mediation code so

1706
01:17:33,450 --> 01:17:36,440
the remediation goes the things you're

1707
01:17:34,530 --> 01:17:39,360
asking the device interacting with it

1708
01:17:36,440 --> 01:17:41,820
this is actually kind of cool because it

1709
01:17:39,360 --> 01:17:43,500
can<font color="#CCCCCC"> be easily separated and we could go</font>

1710
01:17:41,820 --> 01:17:45,809
<font color="#E5E5E5">from having one file to multiple files</font>

1711
01:17:43,500 --> 01:17:47,760
so earlier we imported different modules

1712
01:17:45,810 --> 01:17:51,330
we imported the re module we imported

1713
01:17:47,760 --> 01:17:53,670
SSH helper you can easily split your

1714
01:17:51,330 --> 01:17:55,559
code in some<font color="#CCCCCC"> ultimos too and so</font><font color="#E5E5E5"> that's</font>

1715
01:17:53,670 --> 01:17:58,170
<font color="#CCCCCC">actually that's</font><font color="#E5E5E5"> what I did with the</font>

1716
01:17:55,560 --> 01:18:00,360
second<font color="#E5E5E5"> one if you look at it</font><font color="#CCCCCC"> I actually</font>

1717
01:17:58,170 --> 01:18:02,760
put all the remediation code in in a

1718
01:18:00,360 --> 01:18:05,099
separate file called remediations so if

1719
01:18:02,760 --> 01:18:07,740
we<font color="#CCCCCC"> look</font><font color="#E5E5E5"> at this the one called nanog</font>

1720
01:18:05,100 --> 01:18:11,340
better demo we<font color="#E5E5E5"> actually have an import</font>

1721
01:18:07,740 --> 01:18:13,230
statement here of remediations and so

1722
01:18:11,340 --> 01:18:17,540
that's<font color="#E5E5E5"> our file in the current directory</font>

1723
01:18:13,230 --> 01:18:17,540
and then<font color="#CCCCCC"> if we look at where we use that</font>

1724
01:18:22,900 --> 01:18:27,820
yeah so if we look at where we use that

1725
01:18:24,700 --> 01:18:32,580
we actually reference sorry we actually

1726
01:18:27,820 --> 01:18:36,160
referenced the ravines and specifically

1727
01:18:32,580 --> 01:18:40,000
<font color="#E5E5E5">okay we actually referenced them in this</font>

1728
01:18:36,160 --> 01:18:41,860
dictionary here and so this is<font color="#CCCCCC"> actually</font>

1729
01:18:40,000 --> 01:18:45,460
how I'm splitting this up and making a

1730
01:18:41,860 --> 01:18:48,280
<font color="#CCCCCC">demark between the code that runs the</font>

1731
01:18:45,460 --> 01:18:51,190
actual like system or the parsing thing

1732
01:18:48,280 --> 01:18:58,570
with the actual remediation code and so

1733
01:18:51,190 --> 01:19:00,370
if we<font color="#CCCCCC"> look at the remediation file we</font>

1734
01:18:58,570 --> 01:19:03,250
see now that each remediation is a

1735
01:19:00,370 --> 01:19:04,990
function which going back to testing

1736
01:19:03,250 --> 01:19:07,300
means we can now test the religions as

1737
01:19:04,990 --> 01:19:10,630
individual units and alert when

1738
01:19:07,300 --> 01:19:12,430
individual remediations fail because you

1739
01:19:10,630 --> 01:19:14,680
know what output you built this against

1740
01:19:12,430 --> 01:19:17,200
so if you save a copy that output and

1741
01:19:14,680 --> 01:19:20,620
build a test based on I run this command

1742
01:19:17,200 --> 01:19:22,510
I expect this command if that<font color="#E5E5E5"> fails you</font>

1743
01:19:20,620 --> 01:19:24,400
know there's a bug some water but now

1744
01:19:22,510 --> 01:19:27,190
more simply though we've broken this up

1745
01:19:24,400 --> 01:19:29,440
so that each of our things or

1746
01:19:27,190 --> 01:19:31,089
remediations is a function so that

1747
01:19:29,440 --> 01:19:33,219
allows you to<font color="#E5E5E5"> actually separate the work</font>

1748
01:19:31,090 --> 01:19:35,140
<font color="#E5E5E5">too because now you can approach each</font>

1749
01:19:33,220 --> 01:19:36,970
problem instead<font color="#CCCCCC"> of adding this big four</font>

1750
01:19:35,140 --> 01:19:39,370
statement you can<font color="#E5E5E5"> say let's add another</font>

1751
01:19:36,970 --> 01:19:40,870
function to do this problem<font color="#E5E5E5"> and it</font>

1752
01:19:39,370 --> 01:19:42,849
allows you to<font color="#E5E5E5"> have a very small section</font>

1753
01:19:40,870 --> 01:19:46,599
of code like for example this line card

1754
01:19:42,850 --> 01:19:50,380
one it's no more than like 40 or 50

1755
01:19:46,600 --> 01:19:52,270
lines and one step to make this as its

1756
01:19:50,380 --> 01:19:54,940
groves you could actually go from one

1757
01:19:52,270 --> 01:19:56,920
remediation file to a file / remediation

1758
01:19:54,940 --> 01:20:05,080
and grow it horizontally instead of

1759
01:19:56,920 --> 01:20:06,880
vertically if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> prefer</font><font color="#CCCCCC"> ok I want to</font>

1760
01:20:05,080 --> 01:20:12,240
actually point out one more thing but I

1761
01:20:06,880 --> 01:20:12,240
have slides to that so I showed briefly

1762
01:20:12,510 --> 01:20:16,450
ok so<font color="#E5E5E5"> I just wanted to kind of point out</font>

1763
01:20:15,160 --> 01:20:18,880
<font color="#E5E5E5">a section of slides on what I just</font>

1764
01:20:16,450 --> 01:20:19,990
<font color="#CCCCCC">showed you so I mentioned</font><font color="#E5E5E5"> the</font>

1765
01:20:18,880 --> 01:20:22,720
remediations were actually in a

1766
01:20:19,990 --> 01:20:26,080
dictionary this is one way to kind of

1767
01:20:22,720 --> 01:20:28,890
simplify your code I have a dictionary

1768
01:20:26,080 --> 01:20:32,470
here called error codes to remediations

1769
01:20:28,890 --> 01:20:34,510
where my keys are now those error codes

1770
01:20:32,470 --> 01:20:35,950
that we were looking<font color="#CCCCCC"> at</font><font color="#E5E5E5"> earlier I up</font>

1771
01:20:34,510 --> 01:20:40,150
down interface removed for

1772
01:20:35,950 --> 01:20:42,099
I have to a link failure so this allows

1773
01:20:40,150 --> 01:20:44,740
you to actually pull all that out of

1774
01:20:42,100 --> 01:20:47,340
your four or if statements and build a

1775
01:20:44,740 --> 01:20:50,559
single mapping of when I see this code I

1776
01:20:47,340 --> 01:20:51,820
run this function and so what I have

1777
01:20:50,560 --> 01:20:54,460
here<font color="#E5E5E5"> is I imported the module called</font>

1778
01:20:51,820 --> 01:20:56,920
remediations and then I made the value

1779
01:20:54,460 --> 01:21:04,780
actually<font color="#CCCCCC"> be a reference to</font><font color="#E5E5E5"> the function</font>

1780
01:20:56,920 --> 01:21:06,760
itself without running the function and

1781
01:21:04,780 --> 01:21:07,900
so I<font color="#E5E5E5"> just want to make</font><font color="#CCCCCC"> sure that</font><font color="#E5E5E5"> was</font>

1782
01:21:06,760 --> 01:21:09,850
clear because it's kind<font color="#E5E5E5"> of an</font>

1783
01:21:07,900 --> 01:21:13,179
interesting<font color="#E5E5E5"> topic until you when you</font>

1784
01:21:09,850 --> 01:21:15,730
first<font color="#E5E5E5"> see</font><font color="#CCCCCC"> it so you can run functions by</font>

1785
01:21:13,180 --> 01:21:18,640
using those parentheses and put inputs

1786
01:21:15,730 --> 01:21:20,530
into them and try<font color="#E5E5E5"> to get data back but</font>

1787
01:21:18,640 --> 01:21:23,080
you can also interact with them as if

1788
01:21:20,530 --> 01:21:25,420
they're variables just like this where I

1789
01:21:23,080 --> 01:21:28,390
say that the value of this key is

1790
01:21:25,420 --> 01:21:30,280
actually pointing to the function it's

1791
01:21:28,390 --> 01:21:31,990
not<font color="#E5E5E5"> going to run the function but it</font>

1792
01:21:30,280 --> 01:21:35,019
lets me have a way to say when I see

1793
01:21:31,990 --> 01:21:38,010
this code what function is assigned<font color="#E5E5E5"> to</font>

1794
01:21:35,020 --> 01:21:42,940
that code without an if statement or a

1795
01:21:38,010 --> 01:21:45,790
large for loop and so to put<font color="#E5E5E5"> that to</font><font color="#CCCCCC"> use</font>

1796
01:21:42,940 --> 01:21:47,879
we can now replace our logic of asking

1797
01:21:45,790 --> 01:21:50,920
if this code exists in this error code

1798
01:21:47,880 --> 01:21:53,440
by just saying<font color="#E5E5E5"> for error known error</font>

1799
01:21:50,920 --> 01:21:56,250
code or for example<font color="#CCCCCC"> the keys of our</font>

1800
01:21:53,440 --> 01:21:58,660
mapping here of error codes remediations

1801
01:21:56,250 --> 01:22:02,320
if that is in the error code we're

1802
01:21:58,660 --> 01:22:05,050
looking at of the current<font color="#E5E5E5"> log line I can</font>

1803
01:22:02,320 --> 01:22:07,809
<font color="#CCCCCC">actually get</font><font color="#E5E5E5"> back the function</font><font color="#CCCCCC"> without</font>

1804
01:22:05,050 --> 01:22:11,170
knowing what<font color="#E5E5E5"> its name is by accessing</font>

1805
01:22:07,810 --> 01:22:13,570
<font color="#E5E5E5">the value of that dictionary and so here</font>

1806
01:22:11,170 --> 01:22:16,270
I say the remediation equals so

1807
01:22:13,570 --> 01:22:20,320
remediation now is a variable<font color="#E5E5E5"> that is</font>

1808
01:22:16,270 --> 01:22:22,330
the function equals the value assigned

1809
01:22:20,320 --> 01:22:27,009
to known error code in the dictionary of

1810
01:22:22,330 --> 01:22:28,059
error codes remediations so I really

1811
01:22:27,010 --> 01:22:30,070
<font color="#CCCCCC">want to</font><font color="#E5E5E5"> point this out to this kind of</font>

1812
01:22:28,060 --> 01:22:32,320
cool and that it lets you completely

1813
01:22:30,070 --> 01:22:34,420
eliminate a<font color="#E5E5E5"> bunch of code</font><font color="#CCCCCC"> to a simple</font>

1814
01:22:32,320 --> 01:22:35,650
mapping so now if you think about

1815
01:22:34,420 --> 01:22:38,200
<font color="#E5E5E5">building this bigger with a couple</font>

1816
01:22:35,650 --> 01:22:40,719
hundred mediations you go to having

1817
01:22:38,200 --> 01:22:43,420
let's say a file<font color="#CCCCCC"> of remediations or a</font>

1818
01:22:40,720 --> 01:22:44,980
couple<font color="#E5E5E5"> files remediations and then think</font>

1819
01:22:43,420 --> 01:22:47,680
of<font color="#E5E5E5"> it as having another file that's your</font>

1820
01:22:44,980 --> 01:22:49,879
mapping file and so this mapping not pie

1821
01:22:47,680 --> 01:22:51,800
for example could be entirely

1822
01:22:49,880 --> 01:22:54,710
file or a module that just has one

1823
01:22:51,800 --> 01:22:56,690
dictionary and it has all the import

1824
01:22:54,710 --> 01:23:00,050
statements of your other modules where

1825
01:22:56,690 --> 01:23:02,870
your Oxford mediations exist and so<font color="#E5E5E5"> now</font>

1826
01:23:00,050 --> 01:23:04,909
you maintain in a single place these

1827
01:23:02,870 --> 01:23:08,809
known conditions and what functions you

1828
01:23:04,909 --> 01:23:11,388
want to run against them that means<font color="#E5E5E5"> that</font>

1829
01:23:08,810 --> 01:23:14,449
when you people add to that it's a much

1830
01:23:11,389 --> 01:23:15,679
<font color="#CCCCCC">more straightforward way to grow but it</font>

1831
01:23:14,449 --> 01:23:17,900
also means<font color="#CCCCCC"> that you don't have to</font><font color="#E5E5E5"> go</font>

1832
01:23:15,679 --> 01:23:19,969
look in the code that<font color="#CCCCCC"> actually execute</font>

1833
01:23:17,900 --> 01:23:22,190
stuff on the remediation of what to do

1834
01:23:19,969 --> 01:23:26,480
and so what we're<font color="#CCCCCC"> doing here is we</font><font color="#E5E5E5"> grab</font>

1835
01:23:22,190 --> 01:23:28,159
back a copy of the<font color="#E5E5E5"> the function on the</font>

1836
01:23:26,480 --> 01:23:31,239
first section by accessing the<font color="#E5E5E5"> value</font>

1837
01:23:28,159 --> 01:23:33,650
assigned to the key of known<font color="#E5E5E5"> Erika and</font>

1838
01:23:31,239 --> 01:23:37,218
then we<font color="#E5E5E5"> simply run the function by using</font>

1839
01:23:33,650 --> 01:23:39,230
the parentheses as if we did before so

1840
01:23:37,219 --> 01:23:41,840
like when<font color="#E5E5E5"> you call re not match or time</font>

1841
01:23:39,230 --> 01:23:43,879
dot sleep you could do<font color="#E5E5E5"> the same year</font>

1842
01:23:41,840 --> 01:23:46,100
<font color="#E5E5E5">with those the function doesn't actually</font>

1843
01:23:43,880 --> 01:23:50,150
run until you pass in the<font color="#E5E5E5"> parentheses</font>

1844
01:23:46,100 --> 01:23:52,100
and so here we know the one caveat here

1845
01:23:50,150 --> 01:23:53,599
is if you're going<font color="#E5E5E5"> to do this all</font><font color="#CCCCCC"> the</font>

1846
01:23:52,100 --> 01:23:55,969
functions have to have the exact<font color="#E5E5E5"> same</font>

1847
01:23:53,600 --> 01:23:57,770
inputs and outputs so they have to be

1848
01:23:55,969 --> 01:23:58,730
consistent because<font color="#CCCCCC"> you're going</font><font color="#E5E5E5"> to</font>

1849
01:23:57,770 --> 01:24:01,310
basically run the function without

1850
01:23:58,730 --> 01:24:03,739
knowing its name and pass an expected

1851
01:24:01,310 --> 01:24:05,870
number of inputs and so here we pass it

1852
01:24:03,739 --> 01:24:07,790
and say an ID number for<font color="#CCCCCC"> the event that</font>

1853
01:24:05,870 --> 01:24:08,840
might be like a database number the

1854
01:24:07,790 --> 01:24:11,150
device name and maybe the error message

1855
01:24:08,840 --> 01:24:12,920
to parse and maybe the rest of the data

1856
01:24:11,150 --> 01:24:22,400
about this is in a database that<font color="#CCCCCC"> it goes</font>

1857
01:24:12,920 --> 01:24:23,690
and<font color="#E5E5E5"> fetches from</font><font color="#CCCCCC"> ok I'm I actually want</font>

1858
01:24:22,400 --> 01:24:25,759
<font color="#E5E5E5">to save a little bit of time for for</font>

1859
01:24:23,690 --> 01:24:28,669
questions but I do want to introduce<font color="#E5E5E5"> one</font>

1860
01:24:25,760 --> 01:24:30,050
<font color="#E5E5E5">note real quick um there is actually</font>

1861
01:24:28,670 --> 01:24:32,900
some sample code of interacting with a

1862
01:24:30,050 --> 01:24:35,510
database on<font color="#CCCCCC"> the demo especially using</font>

1863
01:24:32,900 --> 01:24:37,638
sequel light which is<font color="#CCCCCC"> a way to create</font><font color="#E5E5E5"> a</font>

1864
01:24:35,510 --> 01:24:39,550
database with just a file so you<font color="#E5E5E5"> don't</font>

1865
01:24:37,639 --> 01:24:42,440
actually need a full-on database server

1866
01:24:39,550 --> 01:24:44,480
there's demo code in<font color="#E5E5E5"> there it's DVD I um</font>

1867
01:24:42,440 --> 01:24:47,599
it actually walks through creating what

1868
01:24:44,480 --> 01:24:49,070
we call events where we actually<font color="#E5E5E5"> create</font>

1869
01:24:47,600 --> 01:24:50,989
database entries over the data we're

1870
01:24:49,070 --> 01:24:52,580
parsing and there's<font color="#CCCCCC"> actually functions</font>

1871
01:24:50,989 --> 01:24:54,650
there to show you how to get<font color="#E5E5E5"> back get</font>

1872
01:24:52,580 --> 01:24:57,110
back data from it<font color="#E5E5E5"> and to update data</font>

1873
01:24:54,650 --> 01:25:00,110
there it follows the same<font color="#E5E5E5"> kind of</font>

1874
01:24:57,110 --> 01:25:02,179
<font color="#E5E5E5">language as like sequel and if you look</font>

1875
01:25:00,110 --> 01:25:03,380
at the the second example that actually

1876
01:25:02,179 --> 01:25:04,489
puts it to you so

1877
01:25:03,380 --> 01:25:09,290
you have something<font color="#E5E5E5"> practical to work</font>

1878
01:25:04,489 --> 01:25:11,449
from oh and then the final thing I

1879
01:25:09,290 --> 01:25:12,860
<font color="#E5E5E5">promise and it was a long tutorial the</font>

1880
01:25:11,449 --> 01:25:15,888
final<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> how do we go from being</font>

1881
01:25:12,860 --> 01:25:17,960
linear of scale the time because right

1882
01:25:15,889 --> 01:25:20,090
now if<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> 5000 devices this will</font>

1883
01:25:17,960 --> 01:25:21,350
not scale because we're basically

1884
01:25:20,090 --> 01:25:23,870
reading log lines and then trying<font color="#E5E5E5"> to</font>

1885
01:25:21,350 --> 01:25:25,880
work on all all of<font color="#CCCCCC"> them at once that's</font>

1886
01:25:23,870 --> 01:25:28,070
where threading comes in and so which is

1887
01:25:25,880 --> 01:25:30,679
<font color="#E5E5E5">just simply a way to paralyze your work</font>

1888
01:25:28,070 --> 01:25:32,989
and so I gave<font color="#E5E5E5"> you</font><font color="#CCCCCC"> an idea here of what</font>

1889
01:25:30,679 --> 01:25:34,550
you could do so right now we're<font color="#CCCCCC"> running</font>

1890
01:25:32,989 --> 01:25:36,860
everything under like one thread or one

1891
01:25:34,550 --> 01:25:39,409
process what we could do is put this off

1892
01:25:36,860 --> 01:25:42,380
into<font color="#E5E5E5"> two things one that is our log</font>

1893
01:25:39,409 --> 01:25:44,349
processor or a log parser that<font color="#E5E5E5"> just</font>

1894
01:25:42,380 --> 01:25:47,449
reads the log files and continuously

1895
01:25:44,350 --> 01:25:49,070
parses them and then it could for

1896
01:25:47,449 --> 01:25:51,019
example create database entries of what

1897
01:25:49,070 --> 01:25:52,400
<font color="#E5E5E5">needs to be worked on and then we could</font>

1898
01:25:51,020 --> 01:25:55,820
<font color="#E5E5E5">have</font><font color="#CCCCCC"> a second thread that actually runs</font>

1899
01:25:52,400 --> 01:25:57,199
our remediations and does the work now

1900
01:25:55,820 --> 01:26:00,019
with this you<font color="#CCCCCC"> could run them</font><font color="#E5E5E5"> both in</font>

1901
01:25:57,199 --> 01:26:02,178
parallel that's one way to scale another

1902
01:26:00,020 --> 01:26:04,429
way is you can kind of take approach to

1903
01:26:02,179 --> 01:26:06,260
like what we're<font color="#CCCCCC"> doing in that we</font>

1904
01:26:04,429 --> 01:26:08,750
separated<font color="#E5E5E5"> the entire log processing</font>

1905
01:26:06,260 --> 01:26:10,790
pipeline as its own system independent

1906
01:26:08,750 --> 01:26:13,070
and then<font color="#CCCCCC"> that's its own distributed</font>

1907
01:26:10,790 --> 01:26:16,639
system scaled out as well with like a

1908
01:26:13,070 --> 01:26:17,719
bunch of bunch of bunch of servers but

1909
01:26:16,639 --> 01:26:19,280
that's one way where you could say

1910
01:26:17,719 --> 01:26:20,780
instead of having all the code in one

1911
01:26:19,280 --> 01:26:22,670
you could break it out and have this is

1912
01:26:20,780 --> 01:26:24,409
flawed system separate and then this

1913
01:26:22,670 --> 01:26:28,489
<font color="#CCCCCC">could be then the remediation system</font>

1914
01:26:24,409 --> 01:26:30,769
that interacts with what to do<font color="#E5E5E5"> okay go</font>

1915
01:26:28,489 --> 01:26:32,480
<font color="#CCCCCC">out one final note we did throw up</font>

1916
01:26:30,770 --> 01:26:34,820
facebook group to kind of have a way to

1917
01:26:32,480 --> 01:26:38,089
keep in<font color="#CCCCCC"> touch and</font><font color="#E5E5E5"> ask your questions so</font>

1918
01:26:34,820 --> 01:26:40,820
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you go to ft.com / groups / net n JH</font>

1919
01:26:38,090 --> 01:26:42,230
code it's a public group feel<font color="#E5E5E5"> free to</font>

1920
01:26:40,820 --> 01:26:45,019
join the discussion there and ask any

1921
01:26:42,230 --> 01:26:47,540
questions and we'll follow up<font color="#E5E5E5"> and give</font>

1922
01:26:45,020 --> 01:26:50,389
you any detail we can about this or even

1923
01:26:47,540 --> 01:26:52,219
about<font color="#E5E5E5"> f bar or problems that we face but</font>

1924
01:26:50,389 --> 01:26:54,340
thank you and I'll open up<font color="#E5E5E5"> the floor to</font>

1925
01:26:52,219 --> 01:26:54,340
questions

1926
01:26:56,340 --> 01:26:58,400
you

1927
01:27:09,179 --> 01:27:11,239
you

