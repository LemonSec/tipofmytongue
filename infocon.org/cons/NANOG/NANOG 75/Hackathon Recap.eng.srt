1
00:00:19,460 --> 00:00:24,960
all right or everyone who's still

2
00:00:22,710 --> 00:00:27,030
attending for the hackathon recap thank

3
00:00:24,960 --> 00:00:29,910
you for being here I wanted to give you

4
00:00:27,030 --> 00:00:32,790
a quick recap of what we did this Sunday

5
00:00:29,910 --> 00:00:34,230
at the hackathon that we organized I

6
00:00:32,790 --> 00:00:36,239
don't want to take too much time because

7
00:00:34,230 --> 00:00:37,949
there is a lot of things that the

8
00:00:36,239 --> 00:00:39,660
winning teams would like to present so

9
00:00:37,949 --> 00:00:41,790
I'll probably take only five minutes to

10
00:00:39,660 --> 00:00:44,578
give you context of what we are done

11
00:00:41,790 --> 00:00:46,920
what was the entire environment all

12
00:00:44,579 --> 00:00:50,430
about and what the goals were primarily

13
00:00:46,920 --> 00:00:52,410
so for those of you who are in the

14
00:00:50,430 --> 00:00:55,440
know-how of the hackathons that we've

15
00:00:52,410 --> 00:00:59,398
been organizing as well as participating

16
00:00:55,440 --> 00:01:02,879
in at nanog this is actually the sixth

17
00:00:59,399 --> 00:01:04,800
hackathon that is being organized and

18
00:01:02,879 --> 00:01:08,429
all of the ones that have been done

19
00:01:04,800 --> 00:01:12,090
earlier world by several other vendors

20
00:01:08,430 --> 00:01:16,440
and combinations of other operators that

21
00:01:12,090 --> 00:01:18,060
are available in this field so one of

22
00:01:16,440 --> 00:01:20,399
the main things we wanted to address as

23
00:01:18,060 --> 00:01:23,160
part of this particular hackathon is

24
00:01:20,399 --> 00:01:24,990
that we've slowly started evolving the

25
00:01:23,160 --> 00:01:27,690
goals of what the hackathon is meant to

26
00:01:24,990 --> 00:01:30,360
be all of the things that are involved

27
00:01:27,690 --> 00:01:33,319
in the infrastructure as well as the

28
00:01:30,360 --> 00:01:36,479
goals of the participants themselves and

29
00:01:33,319 --> 00:01:39,450
being a participant at the hackathons

30
00:01:36,479 --> 00:01:41,099
for the first few times myself I had

31
00:01:39,450 --> 00:01:42,750
some context of things that we had done

32
00:01:41,099 --> 00:01:44,550
earlier and therefore we wanted to

33
00:01:42,750 --> 00:01:46,979
incorporate some of the learnings from

34
00:01:44,550 --> 00:01:49,770
that and try and change what we can do

35
00:01:46,979 --> 00:01:51,810
hopefully this time to encourage more

36
00:01:49,770 --> 00:01:53,280
participation and hopefully look at more

37
00:01:51,810 --> 00:01:55,830
of the things that are available within

38
00:01:53,280 --> 00:01:58,229
the industry so our primary focus at

39
00:01:55,830 --> 00:02:00,630
this this juncture was to make sure that

40
00:01:58,229 --> 00:02:03,259
we focus on operations network

41
00:02:00,630 --> 00:02:06,630
operations which is certainly the strong

42
00:02:03,259 --> 00:02:09,500
suit of most people participating at

43
00:02:06,630 --> 00:02:11,640
nanog and therefore it allowed us to

44
00:02:09,500 --> 00:02:13,860
take a look at all of the different API

45
00:02:11,640 --> 00:02:15,660
is and tools that are available for us

46
00:02:13,860 --> 00:02:18,940
to incorporate as part of the hackathon

47
00:02:15,660 --> 00:02:20,440
now one of the things that we did

48
00:02:18,940 --> 00:02:23,740
make sure this time is that we had

49
00:02:20,440 --> 00:02:25,930
greater focus on pre-staged topologies

50
00:02:23,740 --> 00:02:28,360
and documentation that hackathon

51
00:02:25,930 --> 00:02:30,760
participants can have access to as part

52
00:02:28,360 --> 00:02:33,760
of the hackathon and this gives them

53
00:02:30,760 --> 00:02:36,429
clearly a an opportunity to utilize a

54
00:02:33,760 --> 00:02:38,140
large set of tools from the outset

55
00:02:36,430 --> 00:02:40,660
because it's available to them as part

56
00:02:38,140 --> 00:02:43,510
of the infrastructure we had seen in

57
00:02:40,660 --> 00:02:46,299
earlier hackathons that not providing an

58
00:02:43,510 --> 00:02:48,429
infrastructure leads them to either fend

59
00:02:46,300 --> 00:02:51,310
for themselves or figure out a lower

60
00:02:48,430 --> 00:02:53,860
utilization of tools than would be more

61
00:02:51,310 --> 00:02:56,740
appropriate so we certainly saw a lot of

62
00:02:53,860 --> 00:02:59,020
different participants come in and they

63
00:02:56,740 --> 00:03:01,090
were able to utilize most of the tools

64
00:02:59,020 --> 00:03:03,400
available and even build more things on

65
00:03:01,090 --> 00:03:06,850
top and you will actually see what they

66
00:03:03,400 --> 00:03:08,560
build in just a bit also we made sure

67
00:03:06,850 --> 00:03:10,000
that everything is public so if you want

68
00:03:08,560 --> 00:03:13,150
to take a look at things that were made

69
00:03:10,000 --> 00:03:14,860
available in terms of the topology the

70
00:03:13,150 --> 00:03:16,330
code that was provided to the

71
00:03:14,860 --> 00:03:18,520
participants things that they could

72
00:03:16,330 --> 00:03:21,430
utilize beforehand and then build on top

73
00:03:18,520 --> 00:03:23,260
everything is at the link there right so

74
00:03:21,430 --> 00:03:25,870
it will point you to both all the github

75
00:03:23,260 --> 00:03:28,840
repositories the website content that

76
00:03:25,870 --> 00:03:31,840
hosts this is well this was organized

77
00:03:28,840 --> 00:03:35,500
primarily as a partnership between Cisco

78
00:03:31,840 --> 00:03:36,910
and the suto and Cisco providing of

79
00:03:35,500 --> 00:03:40,180
course the network operating system

80
00:03:36,910 --> 00:03:42,579
which was iOS XR and the suit or

81
00:03:40,180 --> 00:03:45,100
providing the infrastructure which is

82
00:03:42,580 --> 00:03:46,989
hosted on top of Google Cloud and uses

83
00:03:45,100 --> 00:03:49,150
that entire platform an API is to be

84
00:03:46,989 --> 00:03:52,989
able to orchestrate it for all the teams

85
00:03:49,150 --> 00:03:55,209
that were involved this is the topology

86
00:03:52,989 --> 00:03:57,760
we ran with and I'm sure the teams will

87
00:03:55,209 --> 00:04:00,820
give you further context on this three

88
00:03:57,760 --> 00:04:03,010
Linux development instances per team so

89
00:04:00,820 --> 00:04:04,329
each team has access to a pod with all

90
00:04:03,010 --> 00:04:07,239
of the instances shown here

91
00:04:04,330 --> 00:04:09,310
and there are for iOS XR instances we

92
00:04:07,239 --> 00:04:11,230
went with iOS exam primarily because of

93
00:04:09,310 --> 00:04:13,870
all the api's and tools we wanted to use

94
00:04:11,230 --> 00:04:16,750
and it fit the bill in terms of support

95
00:04:13,870 --> 00:04:19,930
and capability so this is a quick

96
00:04:16,750 --> 00:04:22,120
snapshot of that and of course the basic

97
00:04:19,930 --> 00:04:24,970
premise which is we split up the team

98
00:04:22,120 --> 00:04:27,160
into three primary categories based on

99
00:04:24,970 --> 00:04:29,620
the days of operations that we wanted

100
00:04:27,160 --> 00:04:32,260
them to focus on so every team basically

101
00:04:29,620 --> 00:04:34,870
set out to try and automate

102
00:04:32,260 --> 00:04:37,180
it each particular day as you can see

103
00:04:34,870 --> 00:04:39,550
starting from zero touch provisioning to

104
00:04:37,180 --> 00:04:43,120
ansible based orchestration using wide

105
00:04:39,550 --> 00:04:45,880
EKG nmi and opener as a set of tools

106
00:04:43,120 --> 00:04:48,010
available to going even with traffic

107
00:04:45,880 --> 00:04:50,050
engineering using the GI buy API is in

108
00:04:48,010 --> 00:04:52,060
the open config consortium right so

109
00:04:50,050 --> 00:04:53,440
there's a huge variety of tools and ApS

110
00:04:52,060 --> 00:04:55,960
that we wanted them to take a look at

111
00:04:53,440 --> 00:04:58,030
and I think a lot of them was successful

112
00:04:55,960 --> 00:05:01,479
in incorporating them as part of their

113
00:04:58,030 --> 00:05:03,090
code and then doing more on top and I'd

114
00:05:01,480 --> 00:05:07,300
like to quickly give you some highlights

115
00:05:03,090 --> 00:05:08,440
I've been actually told that this the

116
00:05:07,300 --> 00:05:11,020
first statement might not be entirely

117
00:05:08,440 --> 00:05:13,000
accurate but it was certainly one of the

118
00:05:11,020 --> 00:05:17,109
more heavily attended hackathons we've

119
00:05:13,000 --> 00:05:19,630
had in a while and with around 70 odd

120
00:05:17,110 --> 00:05:22,260
participants on and off throughout the

121
00:05:19,630 --> 00:05:25,770
day which certainly gave us a lot of

122
00:05:22,260 --> 00:05:28,719
both participation feedback as well as

123
00:05:25,770 --> 00:05:30,820
incorporation of things that we'd like

124
00:05:28,720 --> 00:05:31,330
to do for further hackathons in the

125
00:05:30,820 --> 00:05:32,920
future

126
00:05:31,330 --> 00:05:34,990
there were several students from

127
00:05:32,920 --> 00:05:38,200
universities that participated in fact

128
00:05:34,990 --> 00:05:39,790
the team that won second place is from a

129
00:05:38,200 --> 00:05:41,770
university as well and they'll recount

130
00:05:39,790 --> 00:05:43,420
their experience and we had web and

131
00:05:41,770 --> 00:05:46,450
service provider participation as we

132
00:05:43,420 --> 00:05:49,570
always do several first-timers as always

133
00:05:46,450 --> 00:05:52,060
which implies that there is always room

134
00:05:49,570 --> 00:05:54,310
for more so folks who haven't actually

135
00:05:52,060 --> 00:05:56,050
tried to tread into the the world of

136
00:05:54,310 --> 00:05:57,910
hackathons and trying to code something

137
00:05:56,050 --> 00:06:00,640
up please please feel free to

138
00:05:57,910 --> 00:06:02,530
participate at least from next time we

139
00:06:00,640 --> 00:06:04,570
have people who've either never coded

140
00:06:02,530 --> 00:06:07,330
before or never participated in

141
00:06:04,570 --> 00:06:09,340
hackathons before coming in on most of

142
00:06:07,330 --> 00:06:11,830
these Sundays before the Nano so it's a

143
00:06:09,340 --> 00:06:13,570
good experience and I think the teams

144
00:06:11,830 --> 00:06:16,930
will sort of give you more insight into

145
00:06:13,570 --> 00:06:19,719
that so that's it from my side and I

146
00:06:16,930 --> 00:06:23,400
like to actually invite the team that

147
00:06:19,720 --> 00:06:23,400
won first place spot number 10

148
00:06:26,070 --> 00:06:29,570
[Applause]

149
00:06:35,019 --> 00:06:39,889
thanks everybody for sticking around my

150
00:06:37,489 --> 00:06:42,558
name is Adam Mills from roblox I'm the

151
00:06:39,889 --> 00:06:45,499
designated representative from ID pod

152
00:06:42,559 --> 00:06:47,449
10t what was really great about this

153
00:06:45,499 --> 00:06:49,159
hackathon and my hats off to Cisco and

154
00:06:47,449 --> 00:06:51,469
to sudo for getting all the

155
00:06:49,159 --> 00:06:53,360
infrastructure ready this was my third

156
00:06:51,469 --> 00:06:55,550
hackathon and this was without a doubt

157
00:06:53,360 --> 00:06:58,159
the the easiest to get into the tooling

158
00:06:55,550 --> 00:07:00,439
to actually start programming our team

159
00:06:58,159 --> 00:07:01,759
consisted of a number of different

160
00:07:00,439 --> 00:07:03,889
people from different varying

161
00:07:01,759 --> 00:07:05,360
backgrounds which was great there were

162
00:07:03,889 --> 00:07:07,369
some beginners some intermediates and

163
00:07:05,360 --> 00:07:09,349
some advanced network engineers and

164
00:07:07,369 --> 00:07:11,209
software programmers everybody was

165
00:07:09,349 --> 00:07:13,248
willing to chip in and help anybody who

166
00:07:11,209 --> 00:07:16,459
had questions and everybody on our on

167
00:07:13,249 --> 00:07:20,809
our pod participated in some way in

168
00:07:16,459 --> 00:07:22,819
making the hack work and so we've

169
00:07:20,809 --> 00:07:25,159
already gone over the hack goals which

170
00:07:22,819 --> 00:07:27,469
was the day zero with the ztp

171
00:07:25,159 --> 00:07:30,679
configuration to generate streaming

172
00:07:27,469 --> 00:07:32,839
telemetry and updating an answerable

173
00:07:30,679 --> 00:07:36,138
playbook to work for that and then to

174
00:07:32,839 --> 00:07:37,639
inject LSPs into the devices to try to

175
00:07:36,139 --> 00:07:40,069
manipulate the traffic based on the

176
00:07:37,639 --> 00:07:44,089
telemetry that is being received again

177
00:07:40,069 --> 00:07:45,229
just a recap on the on the topology so

178
00:07:44,089 --> 00:07:47,300
I'm gonna hand it off to Mercy and she's

179
00:07:45,229 --> 00:07:54,110
going to talk about the the goals of the

180
00:07:47,300 --> 00:07:57,219
day zero group hi my name is mercy mr.

181
00:07:54,110 --> 00:07:59,959
Dante Ball State University for day zero

182
00:07:57,219 --> 00:08:04,369
we had the fundamental framework already

183
00:07:59,959 --> 00:08:07,550
set up so our responsibility was to take

184
00:08:04,369 --> 00:08:11,959
the GTP Python script and updated su

185
00:08:07,550 --> 00:08:14,749
config or not only the name but also the

186
00:08:11,959 --> 00:08:17,899
interfaces and the other DP using the

187
00:08:14,749 --> 00:08:20,899
open config yang model we also modified

188
00:08:17,899 --> 00:08:23,029
the script to recognize which of the

189
00:08:20,899 --> 00:08:25,699
four routers was being configured by the

190
00:08:23,029 --> 00:08:29,119
script and just like every other team my

191
00:08:25,699 --> 00:08:33,110
team had a bit of an issue getting the

192
00:08:29,119 --> 00:08:36,339
open model to work so we found that

193
00:08:33,110 --> 00:08:36,339
using the

194
00:08:36,719 --> 00:08:45,569
okay thank you we found out that using

195
00:08:40,828 --> 00:08:47,910
the found that I using the vendor

196
00:08:45,569 --> 00:08:50,670
specific data mother actually works

197
00:08:47,910 --> 00:08:57,240
better and makes it a lot easier for us

198
00:08:50,670 --> 00:09:01,529
to accomplish the task after we had were

199
00:08:57,240 --> 00:09:05,790
able to to determine which config was

200
00:09:01,529 --> 00:09:09,720
from which device we had to use Python

201
00:09:05,790 --> 00:09:11,490
to load the configure the box and then

202
00:09:09,720 --> 00:09:15,149
commit the config which made it possible

203
00:09:11,490 --> 00:09:17,220
for the one part of the team that worked

204
00:09:15,149 --> 00:09:19,170
and they want to actually take over and

205
00:09:17,220 --> 00:09:20,610
before I hand off to Damian who is gonna

206
00:09:19,170 --> 00:09:22,319
take us on day one I want to use this

207
00:09:20,610 --> 00:09:25,079
opportunity to say thank you for this

208
00:09:22,319 --> 00:09:34,800
great opportunity I learned a lot and I

209
00:09:25,079 --> 00:09:37,739
grew thank you so much for what we call

210
00:09:34,800 --> 00:09:40,079
day one the goal was to turn on all the

211
00:09:37,740 --> 00:09:43,500
bgp configurations and the requirement

212
00:09:40,079 --> 00:09:46,829
was to only use open config interface so

213
00:09:43,500 --> 00:09:48,689
the team had to come up with the Python

214
00:09:46,829 --> 00:09:51,420
code that will load the yang models and

215
00:09:48,689 --> 00:09:53,790
be able to do that and have been an

216
00:09:51,420 --> 00:09:56,300
integration in package status and Sybil

217
00:09:53,790 --> 00:09:59,370
module so we are able to do all of that

218
00:09:56,300 --> 00:10:03,029
as barroso of this exercise we had to

219
00:09:59,370 --> 00:10:04,949
use open R and so for me in the team so

220
00:10:03,029 --> 00:10:07,860
it was interesting to see that we could

221
00:10:04,949 --> 00:10:10,439
use docker running on iOS 6r and open

222
00:10:07,860 --> 00:10:12,360
our was running inside docker we also

223
00:10:10,439 --> 00:10:14,790
took some times to investigate how we

224
00:10:12,360 --> 00:10:18,720
could use the native and civil modules

225
00:10:14,790 --> 00:10:20,910
to do that so we were able to since iOS

226
00:10:18,720 --> 00:10:21,820
6 ours really liked the news platform

227
00:10:20,910 --> 00:10:24,069
people

228
00:10:21,820 --> 00:10:27,580
to leverage as you can see here the

229
00:10:24,070 --> 00:10:30,100
native ansible docker container package

230
00:10:27,580 --> 00:10:31,780
and all this integration actually turned

231
00:10:30,100 --> 00:10:34,570
out really well

232
00:10:31,780 --> 00:10:36,550
we also had some workaround jean-mi but

233
00:10:34,570 --> 00:10:37,240
that's something we'll explain later in

234
00:10:36,550 --> 00:10:48,010
the presentation

235
00:10:37,240 --> 00:10:49,630
Thanks so the goal of day 2 was to

236
00:10:48,010 --> 00:10:52,240
create a controller and use that

237
00:10:49,630 --> 00:10:55,660
controller to inject routes into the

238
00:10:52,240 --> 00:10:58,270
device Rev and MPLS database so all the

239
00:10:55,660 --> 00:11:01,810
routers that you see here on the on the

240
00:10:58,270 --> 00:11:04,360
screens they're streaming telemetry to a

241
00:11:01,810 --> 00:11:08,229
calf Kafka bus which was set up by the

242
00:11:04,360 --> 00:11:10,750
day one team and we have with a parcel

243
00:11:08,230 --> 00:11:13,510
that's listening on this listening on

244
00:11:10,750 --> 00:11:16,050
the same Kafka bus listening for

245
00:11:13,510 --> 00:11:17,439
failures and injecting routes and

246
00:11:16,050 --> 00:11:20,910
creating as a

247
00:11:17,440 --> 00:11:24,850
LSPs base based on network availability

248
00:11:20,910 --> 00:11:29,620
so the topology that we have here is we

249
00:11:24,850 --> 00:11:34,800
have four routers and two hosts f1 and

250
00:11:29,620 --> 00:11:37,870
f2 so traffic from dev one to dev to

251
00:11:34,800 --> 00:11:41,439
first hits router one and then from

252
00:11:37,870 --> 00:11:44,200
there there's five available path the

253
00:11:41,440 --> 00:11:47,050
most preferred one is path 2 which is

254
00:11:44,200 --> 00:11:49,300
the green path you see on the screen

255
00:11:47,050 --> 00:11:52,930
so that's straight through between r1

256
00:11:49,300 --> 00:11:54,729
and and our four for some reason if that

257
00:11:52,930 --> 00:11:58,030
path isn't available then traffic would

258
00:11:54,730 --> 00:12:01,660
be will go over the over the top over r2

259
00:11:58,030 --> 00:12:05,380
and take that one or might take our

260
00:12:01,660 --> 00:12:08,410
three over the bottom and be routed that

261
00:12:05,380 --> 00:12:10,620
way for some reason if path 1 and PI 3

262
00:12:08,410 --> 00:12:13,709
both are not aware

263
00:12:10,620 --> 00:12:20,880
then traffic with trombone and take pad

264
00:12:13,710 --> 00:12:23,190
for or or pad 5 just by showing hands

265
00:12:20,880 --> 00:12:27,120
how many people are familiar with or

266
00:12:23,190 --> 00:12:32,640
have heard of ERP or G RIBA depending on

267
00:12:27,120 --> 00:12:36,720
how you like to pronounce it okay so few

268
00:12:32,640 --> 00:12:38,730
people all right so rebus stands for

269
00:12:36,720 --> 00:12:42,980
bratty information piece in the face

270
00:12:38,730 --> 00:12:46,440
it's an API that defines a standard

271
00:12:42,980 --> 00:12:50,400
interface for injecting routes into the

272
00:12:46,440 --> 00:12:52,170
device web and the MPLS database so all

273
00:12:50,400 --> 00:12:55,980
the routers that using the topology they

274
00:12:52,170 --> 00:13:00,000
all exposing northbound API and we have

275
00:12:55,980 --> 00:13:03,210
a big client which resides on the

276
00:13:00,000 --> 00:13:10,200
controller that talks the devices over G

277
00:13:03,210 --> 00:13:11,790
RPC channels one thing when into to

278
00:13:10,200 --> 00:13:15,570
machine also actually on the previous

279
00:13:11,790 --> 00:13:20,760
slide unlike open flow and other

280
00:13:15,570 --> 00:13:24,000
mechanism which try to program the

281
00:13:20,760 --> 00:13:25,950
forwarding plane directly GRP does not

282
00:13:24,000 --> 00:13:30,000
interact with the forwarding plane or

283
00:13:25,950 --> 00:13:32,160
with the fit it interacts with the with

284
00:13:30,000 --> 00:13:34,620
the control plane so all the interaction

285
00:13:32,160 --> 00:13:37,980
is with you with the rape and the MPLS

286
00:13:34,620 --> 00:13:40,800
database so think of it as just another

287
00:13:37,980 --> 00:13:44,670
routine instance or or another another

288
00:13:40,800 --> 00:13:51,469
RT database that live alongside your

289
00:13:44,670 --> 00:13:55,349
your ITP or an MPLS database the

290
00:13:51,470 --> 00:13:59,520
abstraction is the APS abstraction is

291
00:13:55,350 --> 00:14:01,950
done through JSON representations and

292
00:13:59,520 --> 00:14:04,650
we're just showing all the JSON files

293
00:14:01,950 --> 00:14:08,880
that we'll use in this topology these

294
00:14:04,650 --> 00:14:12,240
are the files that the parser execute

295
00:14:08,880 --> 00:14:13,020
and to to create a less species across

296
00:14:12,240 --> 00:14:16,080
the network

297
00:14:13,020 --> 00:14:19,680
so one JSON template where router pair

298
00:14:16,080 --> 00:14:21,900
their LSB and if you were to open one of

299
00:14:19,680 --> 00:14:24,000
those JSON files and look

300
00:14:21,900 --> 00:14:25,770
which was inside there you will see that

301
00:14:24,000 --> 00:14:27,930
all while doing really is just telling

302
00:14:25,770 --> 00:14:32,010
the router hey go ahead and inject this

303
00:14:27,930 --> 00:14:35,969
prefix with this with this next hub and

304
00:14:32,010 --> 00:14:39,810
out go on interface and do some MPLS

305
00:14:35,970 --> 00:14:41,700
label operation so depending whether on

306
00:14:39,810 --> 00:14:43,680
with that the traffic is entering or

307
00:14:41,700 --> 00:14:46,620
leaving the network the router would do

308
00:14:43,680 --> 00:14:48,900
push a swap or pop operation then

309
00:14:46,620 --> 00:14:51,630
alternate to ant want to talk next about

310
00:14:48,900 --> 00:14:55,529
the parcel and it's going to give me my

311
00:14:51,630 --> 00:14:58,790
dad hi my name is mondo annual from

312
00:14:55,529 --> 00:15:01,500
cloud temple so the first step was to

313
00:14:58,790 --> 00:15:04,110
yeah thank you so the first step was to

314
00:15:01,500 --> 00:15:06,779
reconfigure it yes please with the jism

315
00:15:04,110 --> 00:15:10,529
templates and the idea was them to go

316
00:15:06,779 --> 00:15:14,790
one step ahead and be able to react who

317
00:15:10,529 --> 00:15:16,680
they want telemetry data so we wrote a

318
00:15:14,790 --> 00:15:19,290
small Python controller which is able to

319
00:15:16,680 --> 00:15:23,069
read miss ages from Kafka and to pass

320
00:15:19,290 --> 00:15:26,000
them in order to trigger LSP creation

321
00:15:23,070 --> 00:15:29,520
and removal on the fly based on

322
00:15:26,000 --> 00:15:32,070
interface operational status changes so

323
00:15:29,520 --> 00:15:34,110
we embedded a basic model in the script

324
00:15:32,070 --> 00:15:36,420
a basic model of the network in order to

325
00:15:34,110 --> 00:15:42,060
maintain a snapshot of its state over

326
00:15:36,420 --> 00:15:45,479
time and the idea was whenever an

327
00:15:42,060 --> 00:15:48,869
interface change occurs the event is

328
00:15:45,480 --> 00:15:51,990
parsed and it triggers an update of the

329
00:15:48,870 --> 00:15:54,690
model enable some new paths and

330
00:15:51,990 --> 00:15:57,120
triggering path direction over time we

331
00:15:54,690 --> 00:16:02,490
are speaking of time we are ringing out

332
00:15:57,120 --> 00:16:04,200
so we prepared a short demonstration so

333
00:16:02,490 --> 00:16:07,230
here is a map of scheme of what we did

334
00:16:04,200 --> 00:16:09,450
on hackathons day we had it some little

335
00:16:07,230 --> 00:16:11,459
piece of magic with the influx DB graph

336
00:16:09,450 --> 00:16:18,380
on our to visualize what was actually

337
00:16:11,459 --> 00:16:18,380
going on in the network so yes

338
00:16:20,100 --> 00:16:29,810
so first we'll be we'll be having whole

339
00:16:25,430 --> 00:16:32,579
interfaces up in the in the network and

340
00:16:29,810 --> 00:16:40,280
then we cut some interfaces forcing the

341
00:16:32,580 --> 00:16:43,170
traffic to go along past five so okay so

342
00:16:40,280 --> 00:16:45,110
you can see here we are on dev 2 and

343
00:16:43,170 --> 00:16:56,250
we're running a ping to was dev one

344
00:16:45,110 --> 00:16:58,410
so is it running actually yes ok so the

345
00:16:56,250 --> 00:17:01,820
pink is not working because there's no

346
00:16:58,410 --> 00:17:05,129
LSD I'm running the script and

347
00:17:01,820 --> 00:17:06,780
everything is initialized to down and as

348
00:17:05,130 --> 00:17:10,740
soon that the script discovers new

349
00:17:06,780 --> 00:17:17,240
actual Network States it will tear up

350
00:17:10,740 --> 00:17:17,240
the press to LSP so the ping is working

351
00:17:17,720 --> 00:17:24,500
in the idea is now we were going to see

352
00:17:21,839 --> 00:17:30,050
through graph ana that the traffic is

353
00:17:24,500 --> 00:17:30,050
flowing between route 1 and which are 4

354
00:17:30,170 --> 00:17:37,050
and then we will shut down three

355
00:17:34,290 --> 00:17:40,670
interfaces forcing the past the traffic

356
00:17:37,050 --> 00:17:40,669
to flow along past 5

357
00:17:46,990 --> 00:17:52,120
it shall be automatically detected by

358
00:17:49,480 --> 00:17:53,860
the script and according to which pass

359
00:17:52,120 --> 00:17:56,110
is the best priority or which part

360
00:17:53,860 --> 00:17:58,559
available it will fall back to the

361
00:17:56,110 --> 00:17:58,559
proper one

362
00:18:17,000 --> 00:18:23,929
okay so now we can see that the achieve

363
00:18:20,539 --> 00:18:26,390
LSP is chipped down in order to tear up

364
00:18:23,929 --> 00:18:29,240
the proper one we only have passed five

365
00:18:26,390 --> 00:18:33,320
available and we will see in ravenna in

366
00:18:29,240 --> 00:18:42,429
a few seconds the interface change

367
00:18:33,320 --> 00:18:42,428
traffic so that's one route or - yes

368
00:18:56,130 --> 00:19:00,590
this actually takes a few seconds to

369
00:18:58,230 --> 00:19:00,590
refresh

370
00:19:04,090 --> 00:19:15,629
yes so I'm giving the mic to pod 12 for

371
00:19:12,610 --> 00:19:15,629
the next station

372
00:19:40,509 --> 00:19:49,489
everyone we are team buff vr6 students

373
00:19:44,690 --> 00:19:51,979
from yeah so beer six students myself

374
00:19:49,489 --> 00:19:52,309
Abhinav John Karthik noggin dervish

375
00:19:51,979 --> 00:19:53,809
Holly

376
00:19:52,309 --> 00:19:57,440
we are from University of Colorado

377
00:19:53,809 --> 00:20:00,969
Boulder ITP program and we were joined

378
00:19:57,440 --> 00:20:03,889
by Casey from Ball State University so

379
00:20:00,969 --> 00:20:06,769
I'll talk about the challenge first as

380
00:20:03,889 --> 00:20:09,408
oxes explained this challenge was

381
00:20:06,769 --> 00:20:12,409
focused on automation right from device

382
00:20:09,409 --> 00:20:15,019
provisioning to provision services and

383
00:20:12,409 --> 00:20:18,289
then taking it to traffic engineering

384
00:20:15,019 --> 00:20:20,839
day zero day one and day to day zero

385
00:20:18,289 --> 00:20:24,079
focused on device provisioning and once

386
00:20:20,839 --> 00:20:26,809
they have their basic configuration and

387
00:20:24,079 --> 00:20:29,119
IP set up day one focuses on

388
00:20:26,809 --> 00:20:31,999
provisioning different services and then

389
00:20:29,119 --> 00:20:35,559
day two takes into account all the basic

390
00:20:31,999 --> 00:20:39,589
networking and set up MPLS LSPs for

391
00:20:35,559 --> 00:20:42,829
traffic engineering so this was the

392
00:20:39,589 --> 00:20:45,489
topology given to us it it consists of

393
00:20:42,829 --> 00:20:48,559
four routers which were Cisco IOS faced

394
00:20:45,489 --> 00:20:51,289
three Linux devices to Def servers and

395
00:20:48,559 --> 00:20:54,499
1z TPE server which was a management

396
00:20:51,289 --> 00:20:56,299
server for ztp and it was connected to

397
00:20:54,499 --> 00:21:00,409
different devices through an out-of-band

398
00:20:56,299 --> 00:21:04,039
management network so getting into the

399
00:21:00,409 --> 00:21:06,649
objectives of day 0 we first start to

400
00:21:04,039 --> 00:21:08,209
complement comprehend how ztp works in

401
00:21:06,649 --> 00:21:10,789
the network and then we had to create

402
00:21:08,209 --> 00:21:14,239
XML files which would feed into NC

403
00:21:10,789 --> 00:21:16,158
client and then we had to trigger ztb to

404
00:21:14,239 --> 00:21:18,889
fetch a Python script which would run on

405
00:21:16,159 --> 00:21:23,119
the box itself and deploy the predefined

406
00:21:18,889 --> 00:21:25,488
configs devices that you see here in

407
00:21:23,119 --> 00:21:28,009
blue were the two devices we were asked

408
00:21:25,489 --> 00:21:31,099
by the organizer team to start the day

409
00:21:28,009 --> 00:21:33,679
zero with as and different other devices

410
00:21:31,099 --> 00:21:36,349
were being used by different members of

411
00:21:33,679 --> 00:21:39,799
the team for the in different days the

412
00:21:36,349 --> 00:21:43,409
so how we went about it was we created

413
00:21:39,799 --> 00:21:45,750
an XML format which would be easily if

414
00:21:43,410 --> 00:21:48,540
read into the NC client with all the

415
00:21:45,750 --> 00:21:51,390
parameters of like interfaces IP address

416
00:21:48,540 --> 00:21:55,770
hostname whatever was required and then

417
00:21:51,390 --> 00:21:59,640
we go about fetching the Python script

418
00:21:55,770 --> 00:22:02,430
the B point the DHCP server to a Python

419
00:21:59,640 --> 00:22:04,920
script and that such as the Python

420
00:22:02,430 --> 00:22:07,320
script in the box and the script runs on

421
00:22:04,920 --> 00:22:11,450
the boss itself and for any predefined

422
00:22:07,320 --> 00:22:14,700
configuration so here you see the

423
00:22:11,450 --> 00:22:17,900
snapshot of XML file that we created

424
00:22:14,700 --> 00:22:20,610
which was given to the anticline model

425
00:22:17,900 --> 00:22:22,650
then this is the Python script we

426
00:22:20,610 --> 00:22:24,780
created on so in a for loop it would

427
00:22:22,650 --> 00:22:27,900
fetch all the files for different route

428
00:22:24,780 --> 00:22:32,030
and nodes in the router and here you see

429
00:22:27,900 --> 00:22:35,700
the one line highlighted the DHCP server

430
00:22:32,030 --> 00:22:39,960
pointing it to the Python script for

431
00:22:35,700 --> 00:22:43,710
router two in this case and then the DP

432
00:22:39,960 --> 00:22:46,380
finally once we trigger it it actually

433
00:22:43,710 --> 00:22:48,570
applies the configuration and complete

434
00:22:46,380 --> 00:22:51,600
and commits it and the operation is

435
00:22:48,570 --> 00:22:55,169
completed and and that takes us to the

436
00:22:51,600 --> 00:22:58,709
basic networking that it has established

437
00:22:55,170 --> 00:23:02,670
in the topology and then we move on to

438
00:22:58,710 --> 00:23:05,400
day one so day one had so once the IPS

439
00:23:02,670 --> 00:23:08,400
and everything was configured dave day

440
00:23:05,400 --> 00:23:12,260
one revolved around you know

441
00:23:08,400 --> 00:23:16,320
provisioning services like BGP opener on

442
00:23:12,260 --> 00:23:20,790
all this using an master master ansible

443
00:23:16,320 --> 00:23:23,790
playbook it used ydk and gnm i api's and

444
00:23:20,790 --> 00:23:26,340
we then had to deploy opener as the ICP

445
00:23:23,790 --> 00:23:29,040
and also setup at elementary collector

446
00:23:26,340 --> 00:23:31,320
which would fetch all the network health

447
00:23:29,040 --> 00:23:33,240
information in real time and feed all

448
00:23:31,320 --> 00:23:37,649
that information to a Kafka consumer

449
00:23:33,240 --> 00:23:39,420
which would be set up later so devices

450
00:23:37,650 --> 00:23:42,230
here in blue were the devices we started

451
00:23:39,420 --> 00:23:45,630
day one with so our dev server and

452
00:23:42,230 --> 00:23:47,940
router one three and four to begin with

453
00:23:45,630 --> 00:23:50,520
but eventually we had to incorporate all

454
00:23:47,940 --> 00:23:53,160
the devices and run all of the

455
00:23:50,520 --> 00:23:55,710
operations on all devices

456
00:23:53,160 --> 00:23:58,500
so how we Bend about it was we created a

457
00:23:55,710 --> 00:24:01,130
ansible playbook as you can see this

458
00:23:58,500 --> 00:24:03,330
ansible playbook had all the BGP

459
00:24:01,130 --> 00:24:06,750
configuration which would be pushed to

460
00:24:03,330 --> 00:24:09,409
the topology and these parameters were

461
00:24:06,750 --> 00:24:13,380
being faced from an ansible host well

462
00:24:09,410 --> 00:24:18,300
here you see the by DK code which used a

463
00:24:13,380 --> 00:24:22,650
GN mi api's and gets the parameters as

464
00:24:18,300 --> 00:24:24,389
defined in the by the user so here you

465
00:24:22,650 --> 00:24:27,870
see the ansible playbook actually being

466
00:24:24,390 --> 00:24:32,100
run completed and the play pushes this

467
00:24:27,870 --> 00:24:35,820
ASPRS router ID and so on whatever was

468
00:24:32,100 --> 00:24:37,980
required to to push and to run BGP but

469
00:24:35,820 --> 00:24:40,080
once this ran and play was successful

470
00:24:37,980 --> 00:24:43,470
even then the BGP edges since he didn't

471
00:24:40,080 --> 00:24:46,500
come up for us so that was probably

472
00:24:43,470 --> 00:24:49,260
because we didn't have the IGP by then

473
00:24:46,500 --> 00:24:52,200
so we then went ahead and deployed open

474
00:24:49,260 --> 00:24:54,690
R as the IGP and as soon as we pulled

475
00:24:52,200 --> 00:24:56,610
the docker image on the box the

476
00:24:54,690 --> 00:24:59,070
application routes that you see here on

477
00:24:56,610 --> 00:25:02,429
the screen mark started propagating in

478
00:24:59,070 --> 00:25:06,139
the topology and when once that happened

479
00:25:02,430 --> 00:25:08,580
the BGP adjacencies came up immediately

480
00:25:06,140 --> 00:25:11,270
so moving onto the third objective of

481
00:25:08,580 --> 00:25:14,100
day one we also had to set up a

482
00:25:11,270 --> 00:25:16,350
telemetry server which would fetch the

483
00:25:14,100 --> 00:25:19,860
real-time health information from the

484
00:25:16,350 --> 00:25:23,699
network and push it to a Kafka consumer

485
00:25:19,860 --> 00:25:27,360
I'll get into this part which is tied in

486
00:25:23,700 --> 00:25:30,210
to date to west wall so day 2 so once in

487
00:25:27,360 --> 00:25:34,199
day zero and day one all the basic

488
00:25:30,210 --> 00:25:36,930
networking and interfacing and protocols

489
00:25:34,200 --> 00:25:39,780
were pushed so once we had all that we

490
00:25:36,930 --> 00:25:42,360
had to encompass the entire topology

491
00:25:39,780 --> 00:25:48,200
into getting and fetching all the

492
00:25:42,360 --> 00:25:50,820
information and establishing MPLS LSPs

493
00:25:48,200 --> 00:25:53,490
so these were the objectives so we have

494
00:25:50,820 --> 00:25:57,270
to understand how JIRA by works

495
00:25:53,490 --> 00:25:59,670
telemetry and open config and MPLS LSP

496
00:25:57,270 --> 00:26:01,350
is through JSON files and then finally

497
00:25:59,670 --> 00:26:04,320
deploying the telemetry collector and

498
00:26:01,350 --> 00:26:05,820
using all that information to modify the

499
00:26:04,320 --> 00:26:08,850
LSPs or traffic

500
00:26:05,820 --> 00:26:12,179
during our paths as and when the network

501
00:26:08,850 --> 00:26:15,090
events happen in real time so these were

502
00:26:12,180 --> 00:26:16,560
the paths that were set up as the

503
00:26:15,090 --> 00:26:19,080
organizer team gave us very good

504
00:26:16,560 --> 00:26:21,840
documentation an example of a single

505
00:26:19,080 --> 00:26:24,510
path and how these api's work together

506
00:26:21,840 --> 00:26:27,480
and we had to extrapolate all those

507
00:26:24,510 --> 00:26:30,450
informations all those information for

508
00:26:27,480 --> 00:26:32,730
to establish other paths so we

509
00:26:30,450 --> 00:26:36,380
established these paths through JSON

510
00:26:32,730 --> 00:26:40,710
files and then we had shell scripts to

511
00:26:36,380 --> 00:26:43,590
actually add or delete the paths as and

512
00:26:40,710 --> 00:26:46,500
when required by the user so here on the

513
00:26:43,590 --> 00:26:48,919
screen you look at the left-hand side

514
00:26:46,500 --> 00:26:51,150
you see the JSON file that we created

515
00:26:48,920 --> 00:26:55,020
this was this had all the information

516
00:26:51,150 --> 00:26:58,290
relevant to establish an MPLS LSP that

517
00:26:55,020 --> 00:27:00,540
labels IP address interface and so on

518
00:26:58,290 --> 00:27:02,970
and the on the right hand side is the

519
00:27:00,540 --> 00:27:06,780
script file which uses these JSON file

520
00:27:02,970 --> 00:27:09,870
to establish LSPs at this point we

521
00:27:06,780 --> 00:27:13,550
wanted to we had a cough consumer

522
00:27:09,870 --> 00:27:15,959
running on Def - as well and it was

523
00:27:13,550 --> 00:27:18,870
retrieving information from the servers

524
00:27:15,960 --> 00:27:20,910
established in day one and once that

525
00:27:18,870 --> 00:27:24,899
happened we wanted to parse that

526
00:27:20,910 --> 00:27:27,390
information to justify and traffic

527
00:27:24,900 --> 00:27:29,460
engineering all the LSPs that we had so

528
00:27:27,390 --> 00:27:33,420
example for example the interface goes

529
00:27:29,460 --> 00:27:35,970
down and that LSP Baathist should be

530
00:27:33,420 --> 00:27:38,460
teared down and then we should establish

531
00:27:35,970 --> 00:27:40,590
a new LSP without having that an

532
00:27:38,460 --> 00:27:45,380
interface in the path so that would have

533
00:27:40,590 --> 00:27:49,020
been our future work but here we see the

534
00:27:45,380 --> 00:27:52,230
MPLS once the script was run we could

535
00:27:49,020 --> 00:27:54,060
see the MPLS forwarding table with all

536
00:27:52,230 --> 00:27:56,790
the relevant labels that we pushed and

537
00:27:54,060 --> 00:28:00,679
once that happened we had end-to-end

538
00:27:56,790 --> 00:28:03,690
connectivity and ping was successful so

539
00:28:00,680 --> 00:28:05,280
going on to the learnings or all of the

540
00:28:03,690 --> 00:28:09,270
tools that were made available to us

541
00:28:05,280 --> 00:28:12,600
were new we had an idea about Howard

542
00:28:09,270 --> 00:28:15,330
Mason works but tools like GN mi api's

543
00:28:12,600 --> 00:28:16,120
like GN mi g Debye and then deploying

544
00:28:15,330 --> 00:28:17,860
open our

545
00:28:16,120 --> 00:28:22,239
and that too on a Cisco platform was

546
00:28:17,860 --> 00:28:25,600
very cool to see it we didn't we didn't

547
00:28:22,240 --> 00:28:27,280
use all these tools before and we had to

548
00:28:25,600 --> 00:28:29,320
integrate all of them in a master

549
00:28:27,280 --> 00:28:32,530
ansible playbook to get this working

550
00:28:29,320 --> 00:28:36,280
we're very curious to see what all doors

551
00:28:32,530 --> 00:28:39,670
and new ideas and use cases it opens up

552
00:28:36,280 --> 00:28:42,460
for the networking world also like we

553
00:28:39,670 --> 00:28:47,320
did all this and short framework time so

554
00:28:42,460 --> 00:28:48,970
that was really nice to see that I you'd

555
00:28:47,320 --> 00:28:51,340
like to use this opportunity to thank

556
00:28:48,970 --> 00:28:54,610
the organizers it was a great hackathon

557
00:28:51,340 --> 00:28:56,709
I should help a lot during the hackathon

558
00:28:54,610 --> 00:29:00,550
so the team was very supportive even

559
00:28:56,710 --> 00:29:03,070
though the tools were very new to us I'd

560
00:29:00,550 --> 00:29:06,040
like to thank Nanak as well have for

561
00:29:03,070 --> 00:29:08,409
having us here we ascend being students

562
00:29:06,040 --> 00:29:12,159
it's amazing to come here and present at

563
00:29:08,410 --> 00:29:15,670
this scale and also our professors Kevin

564
00:29:12,160 --> 00:29:17,590
Epperson and dr. Levi a pretty go in for

565
00:29:15,670 --> 00:29:21,420
accompanying us here and letting us have

566
00:29:17,590 --> 00:29:21,419
this opportunity thank you very much

567
00:29:24,519 --> 00:29:26,580
you

568
00:29:39,610 --> 00:29:41,669
you

