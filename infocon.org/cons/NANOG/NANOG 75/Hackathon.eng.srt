1
00:00:08,250 --> 00:00:12,090
all right good morning everyone

2
00:00:12,780 --> 00:00:19,349
hello hello good morning hey everybody

3
00:00:16,800 --> 00:00:21,689
welcome to the hackathon thanks so much

4
00:00:19,349 --> 00:00:22,369
for showing up so early on a Sunday

5
00:00:21,689 --> 00:00:26,340
morning

6
00:00:22,369 --> 00:00:33,239
anybody here their first Nanog hackathon

7
00:00:26,340 --> 00:00:35,489
oh ok excellent well welcome and anybody

8
00:00:33,239 --> 00:00:40,078
that had that had their hands raised

9
00:00:35,489 --> 00:00:44,040
first hackathon in general ok a fair

10
00:00:40,079 --> 00:00:46,280
number of people and is every from the

11
00:00:44,040 --> 00:00:49,079
people that are competing or

12
00:00:46,280 --> 00:00:52,920
participating for the first time how

13
00:00:49,079 --> 00:00:58,289
many are network engineers who are new

14
00:00:52,920 --> 00:01:00,719
to programming okay and are there any ok

15
00:00:58,289 --> 00:01:04,229
a couple and are there any programmers

16
00:01:00,719 --> 00:01:12,240
here that are new to networking oh wow

17
00:01:04,229 --> 00:01:14,700
excellent well welcome so I'm going to

18
00:01:12,240 --> 00:01:16,619
go over a couple of logistics I'm Michel

19
00:01:14,700 --> 00:01:17,939
with the program committee I'm gonna go

20
00:01:16,620 --> 00:01:20,549
over a couple of logistics before

21
00:01:17,939 --> 00:01:24,809
handing it off to auction who is going

22
00:01:20,549 --> 00:01:27,500
to go over what the what you're going to

23
00:01:24,810 --> 00:01:29,850
be working on today should you choose to

24
00:01:27,500 --> 00:01:32,009
take part in that that particular hack

25
00:01:29,850 --> 00:01:34,408
so first I want to thank our sponsors

26
00:01:32,009 --> 00:01:37,799
Cisco and to sudo for providing the

27
00:01:34,409 --> 00:01:39,299
infrastructure today we're gonna talk

28
00:01:37,799 --> 00:01:40,710
for about another minute and then handed

29
00:01:39,299 --> 00:01:42,750
off to auctions going to give an

30
00:01:40,710 --> 00:01:44,158
introduction after that people are going

31
00:01:42,750 --> 00:01:48,149
to break into teams if you haven't

32
00:01:44,159 --> 00:01:51,270
broken into teams already if you we want

33
00:01:48,149 --> 00:01:54,630
people we want teams to be no less than

34
00:01:51,270 --> 00:01:58,590
six no more than nine if you're having

35
00:01:54,630 --> 00:02:01,439
if you're like a onesie twosie team and

36
00:01:58,590 --> 00:02:03,960
need help building a team please come

37
00:02:01,439 --> 00:02:05,130
and see us afterwards the people that

38
00:02:03,960 --> 00:02:07,140
are going to be helping out with this

39
00:02:05,130 --> 00:02:10,199
are these two tables over here in the

40
00:02:07,140 --> 00:02:11,820
corner and then the other table about

41
00:02:10,199 --> 00:02:18,540
four down could you wave your hands

42
00:02:11,820 --> 00:02:20,040
Cisco thank you so we're going to break

43
00:02:18,540 --> 00:02:21,750
into groups as soon as awk shot is done

44
00:02:20,040 --> 00:02:25,769
with the introduction lunch is going to

45
00:02:21,750 --> 00:02:26,190
be here if anybody needs to use the

46
00:02:25,769 --> 00:02:28,370
restroom

47
00:02:26,190 --> 00:02:32,100
down the stairs right outside the door

48
00:02:28,370 --> 00:02:34,110
and then everything the lunch the break

49
00:02:32,100 --> 00:02:36,900
is taking place in this room except for

50
00:02:34,110 --> 00:02:39,750
the reception which is going to be just

51
00:02:36,900 --> 00:02:42,390
outside on that raised platform and then

52
00:02:39,750 --> 00:02:44,820
besides wishing everybody luck and

53
00:02:42,390 --> 00:02:46,170
wishing everybody to have a like a good

54
00:02:44,820 --> 00:02:48,590
time today and hopefully you learned

55
00:02:46,170 --> 00:02:52,619
something new and hopefully new people

56
00:02:48,590 --> 00:02:55,590
please as you're working on your on your

57
00:02:52,620 --> 00:02:57,470
hacks take the time and I'm going to say

58
00:02:55,590 --> 00:02:59,610
this probably once or twice more today

59
00:02:57,470 --> 00:03:00,990
this lab infrastructure is going to be

60
00:02:59,610 --> 00:03:02,880
broken down at the end of the day and

61
00:03:00,990 --> 00:03:06,420
you're going to need to do presentations

62
00:03:02,880 --> 00:03:07,650
at the end of the day and the best teams

63
00:03:06,420 --> 00:03:10,910
are going to be presenting at the

64
00:03:07,650 --> 00:03:13,950
conference so whatever you do if you're

65
00:03:10,910 --> 00:03:15,960
taking screen captures or doing movies

66
00:03:13,950 --> 00:03:18,030
of some script that's running please

67
00:03:15,960 --> 00:03:19,410
make sure to like be documenting this as

68
00:03:18,030 --> 00:03:20,760
you're going along today because it

69
00:03:19,410 --> 00:03:24,210
makes doing your presentations at the

70
00:03:20,760 --> 00:03:25,530
end of the day way easier and again if

71
00:03:24,210 --> 00:03:27,270
you have any other questions please come

72
00:03:25,530 --> 00:03:30,170
and find one of us and now I want to

73
00:03:27,270 --> 00:03:30,170
hand it over to our shot

74
00:03:33,360 --> 00:03:38,430
all right can you guys hear me fine all

75
00:03:36,750 --> 00:03:41,670
right so we've got a really long room

76
00:03:38,430 --> 00:03:43,320
what I would actually prefer is as many

77
00:03:41,670 --> 00:03:45,299
people as can actually come by to this

78
00:03:43,320 --> 00:03:46,890
table and to the tables in front that

79
00:03:45,300 --> 00:03:49,680
would be actually it will be easier for

80
00:03:46,890 --> 00:03:52,410
you to see what's going on and will then

81
00:03:49,680 --> 00:03:54,710
be able to you know both show here and

82
00:03:52,410 --> 00:03:57,570
then discuss how to arrange the groups

83
00:03:54,710 --> 00:04:00,420
what I want to start off with is

84
00:03:57,570 --> 00:04:02,459
actually explaining all of the different

85
00:04:00,420 --> 00:04:05,100
components that we have as part of the

86
00:04:02,460 --> 00:04:07,350
hack some of the things that we will do

87
00:04:05,100 --> 00:04:09,870
and there's a difference in the way

88
00:04:07,350 --> 00:04:12,570
we're arranging the hack this time so

89
00:04:09,870 --> 00:04:15,240
some of you been to other hackathons

90
00:04:12,570 --> 00:04:17,670
earlier might not be used to what we're

91
00:04:15,240 --> 00:04:20,010
going to do so let me actually dive into

92
00:04:17,670 --> 00:04:21,840
that and explain how can I have some of

93
00:04:20,010 --> 00:04:24,090
you at least moving the ones for really

94
00:04:21,839 --> 00:04:25,409
at the back come by here it will be

95
00:04:24,090 --> 00:04:29,760
really tough for you to see what's going

96
00:04:25,410 --> 00:04:32,580
on otherwise all right so what I want to

97
00:04:29,760 --> 00:04:36,300
start off with is to get each and every

98
00:04:32,580 --> 00:04:39,180
one of you on the website that's

99
00:04:36,300 --> 00:04:44,070
actually going to host your instructions

100
00:04:39,180 --> 00:04:47,370
for today now can can I have everyone

101
00:04:44,070 --> 00:04:54,510
browse to Nanak 75 dot github is slash

102
00:04:47,370 --> 00:04:58,290
hackathon Nanak's 75 dot github dot dot

103
00:04:54,510 --> 00:05:06,570
slash hackathon let me just put this on

104
00:04:58,290 --> 00:05:08,550
a terminal all right so let me now sort

105
00:05:06,570 --> 00:05:11,400
of give you an introduction of what we

106
00:05:08,550 --> 00:05:12,930
plan to do today with the hack this is

107
00:05:11,400 --> 00:05:14,849
the topology that we brought up for

108
00:05:12,930 --> 00:05:16,860
everyone to actually use we've gone

109
00:05:14,850 --> 00:05:19,410
through a few hackathons earlier at

110
00:05:16,860 --> 00:05:21,600
nanog where either we've not had an

111
00:05:19,410 --> 00:05:23,010
infrastructure in place or the

112
00:05:21,600 --> 00:05:25,740
infrastructure that's been in place is

113
00:05:23,010 --> 00:05:27,930
not necessarily used by everyone what we

114
00:05:25,740 --> 00:05:29,910
wanted to do this time is give you an

115
00:05:27,930 --> 00:05:31,320
infrastructure that is in place and has

116
00:05:29,910 --> 00:05:34,110
everything that you would potentially

117
00:05:31,320 --> 00:05:35,760
need but at the same time give you some

118
00:05:34,110 --> 00:05:37,770
amount of flexibility in being able to

119
00:05:35,760 --> 00:05:39,150
do something with respect to your own

120
00:05:37,770 --> 00:05:43,020
tools or the way you would like to

121
00:05:39,150 --> 00:05:45,810
combine things right so this we've tried

122
00:05:43,020 --> 00:05:46,740
to mix and match those possibilities so

123
00:05:45,810 --> 00:05:49,740
in case you phi

124
00:05:46,740 --> 00:05:52,710
that you have to stick to a certain

125
00:05:49,740 --> 00:05:54,240
paradigm of what we ask you to do bear

126
00:05:52,710 --> 00:05:56,758
with us because there are parts of the

127
00:05:54,240 --> 00:05:58,860
hack where you will get to experiment

128
00:05:56,759 --> 00:06:00,900
and add your own pieces right but what

129
00:05:58,860 --> 00:06:03,240
we wanted to do was create a topology

130
00:06:00,900 --> 00:06:06,750
create a goal that you need to attain as

131
00:06:03,240 --> 00:06:08,370
part of the overall hackathon and the

132
00:06:06,750 --> 00:06:10,020
way in which you accomplish it and of

133
00:06:08,370 --> 00:06:13,289
course the code that you write is up to

134
00:06:10,020 --> 00:06:15,240
you right but the specific set of tools

135
00:06:13,289 --> 00:06:17,818
that are available that are already

136
00:06:15,240 --> 00:06:20,520
working and they are provided to you as

137
00:06:17,819 --> 00:06:22,409
base code is very useful because you can

138
00:06:20,520 --> 00:06:24,359
start using that and adding your code on

139
00:06:22,409 --> 00:06:26,550
top there are some things that might be

140
00:06:24,360 --> 00:06:29,509
entirely new and complex for folks

141
00:06:26,550 --> 00:06:31,740
who've never coded before and therefore

142
00:06:29,509 --> 00:06:33,810
introducing that from scratch might be a

143
00:06:31,740 --> 00:06:37,440
burden that's why we provided base code

144
00:06:33,810 --> 00:06:38,849
for a lot of things in the hack now this

145
00:06:37,440 --> 00:06:40,349
is the topology we're going to use so

146
00:06:38,849 --> 00:06:42,599
thanks to the suto they have actually

147
00:06:40,349 --> 00:06:45,599
spun up a number of pods for everyone to

148
00:06:42,599 --> 00:06:50,219
use and these are all instances that are

149
00:06:45,599 --> 00:06:52,710
hosted on Google Cloud and also as the

150
00:06:50,220 --> 00:06:54,539
topology shows there are four routers in

151
00:06:52,710 --> 00:06:57,330
there these are all iOS eggs or

152
00:06:54,539 --> 00:06:59,099
instances and they are meant to

153
00:06:57,330 --> 00:07:02,190
basically provide the api's that you

154
00:06:59,099 --> 00:07:04,590
will utilize through the hack and those

155
00:07:02,190 --> 00:07:07,590
API is deliberately have been selected

156
00:07:04,590 --> 00:07:09,960
to be either community driven or vendor

157
00:07:07,590 --> 00:07:12,270
neutral api's so anything that is

158
00:07:09,960 --> 00:07:14,250
exhaust specific is already coded up for

159
00:07:12,270 --> 00:07:16,889
you right which means that it remains

160
00:07:14,250 --> 00:07:19,349
hidden just use it as is and for all the

161
00:07:16,889 --> 00:07:21,870
open config related community related

162
00:07:19,349 --> 00:07:25,680
API is you get to code on your own all

163
00:07:21,870 --> 00:07:27,810
right now you will also notice that you

164
00:07:25,680 --> 00:07:30,210
have these three other boxes floating

165
00:07:27,810 --> 00:07:33,150
around those four routers these are the

166
00:07:30,210 --> 00:07:35,489
development instances within the setup

167
00:07:33,150 --> 00:07:38,130
there are three development instances

168
00:07:35,490 --> 00:07:42,690
for a reason what we intend to do is

169
00:07:38,130 --> 00:07:46,680
actually divide up each team into three

170
00:07:42,690 --> 00:07:49,110
groups okay now these three groups are

171
00:07:46,680 --> 00:07:49,800
meant to actually handle different parts

172
00:07:49,110 --> 00:07:52,680
of the hack

173
00:07:49,800 --> 00:07:54,539
however they feed into each other to

174
00:07:52,680 --> 00:07:58,080
actually accomplish the final goal of

175
00:07:54,539 --> 00:07:59,840
the hack this is all about operations

176
00:07:58,080 --> 00:08:03,020
and automation which is

177
00:07:59,840 --> 00:08:04,310
means that we're trying to one delineate

178
00:08:03,020 --> 00:08:05,659
between the different types of

179
00:08:04,310 --> 00:08:08,240
operations that you can have on a

180
00:08:05,660 --> 00:08:09,860
network there is no fixed terminology

181
00:08:08,240 --> 00:08:11,810
for this so we are coming up with this

182
00:08:09,860 --> 00:08:13,130
stuff on the fly but it sort of makes

183
00:08:11,810 --> 00:08:15,500
sense to some people so we're sticking

184
00:08:13,130 --> 00:08:17,840
with it when you considered a zero ops

185
00:08:15,500 --> 00:08:19,850
we're essentially talking about the time

186
00:08:17,840 --> 00:08:22,400
when the Box boots up without a

187
00:08:19,850 --> 00:08:25,610
configuration and therefore it needs to

188
00:08:22,400 --> 00:08:27,198
either get a config or run a script so

189
00:08:25,610 --> 00:08:30,229
that it can be brought to a bootstrap

190
00:08:27,199 --> 00:08:32,260
state right so de 0 ops is going to be

191
00:08:30,229 --> 00:08:34,848
one particular group within your team

192
00:08:32,260 --> 00:08:38,330
right this particular group is

193
00:08:34,849 --> 00:08:42,380
responsible for running a script when

194
00:08:38,330 --> 00:08:44,270
the Box boots up and the the version of

195
00:08:42,380 --> 00:08:47,630
the Exile instances that you're running

196
00:08:44,270 --> 00:08:50,210
also have NC client support as part of

197
00:08:47,630 --> 00:08:53,150
the base image which means that you have

198
00:08:50,210 --> 00:08:56,960
to use models only to go ahead and

199
00:08:53,150 --> 00:08:58,880
configure the system if you use CLI it

200
00:08:56,960 --> 00:09:02,630
doesn't go all right

201
00:08:58,880 --> 00:09:04,100
so the entire infrastructure as well as

202
00:09:02,630 --> 00:09:05,720
the parts of the config that we go into

203
00:09:04,100 --> 00:09:07,040
you place have been set up in such a way

204
00:09:05,720 --> 00:09:09,980
that you don't actually have to use Eli

205
00:09:07,040 --> 00:09:12,680
anywhere so wherever you feel that CLI

206
00:09:09,980 --> 00:09:15,410
is going to be utilized reach out to us

207
00:09:12,680 --> 00:09:19,339
and either we'll find another way or

208
00:09:15,410 --> 00:09:22,069
we'll figure out what's wrong ok so in

209
00:09:19,339 --> 00:09:24,980
the entire premise as you go from day 0

210
00:09:22,070 --> 00:09:27,470
to day 1 to day 2 each one of them tend

211
00:09:24,980 --> 00:09:30,700
to feed into each other and sort of

212
00:09:27,470 --> 00:09:33,589
serve up another piece of automation

213
00:09:30,700 --> 00:09:36,260
characteristic that the next group has

214
00:09:33,589 --> 00:09:38,570
to solve but we recognize that you

215
00:09:36,260 --> 00:09:41,209
cannot have one group wait for another

216
00:09:38,570 --> 00:09:43,850
group to actually finish so we've

217
00:09:41,209 --> 00:09:45,619
separated out the concerns in terms of

218
00:09:43,850 --> 00:09:47,170
which set of routers are available to

219
00:09:45,620 --> 00:09:50,330
which group at any given point in time

220
00:09:47,170 --> 00:09:53,779
ok to sort of start off when you

221
00:09:50,330 --> 00:09:55,970
considered a 0 ops going back to this

222
00:09:53,779 --> 00:09:58,939
topology right at the top is what we

223
00:09:55,970 --> 00:10:00,740
have router 2 right router 2 is the one

224
00:09:58,940 --> 00:10:03,830
that's going to be available for the day

225
00:10:00,740 --> 00:10:06,709
0 folks too in order to do ztp you do

226
00:10:03,830 --> 00:10:08,690
not do ztp on any of the other instances

227
00:10:06,709 --> 00:10:09,969
that is do not reload them do anything

228
00:10:08,690 --> 00:10:12,970
of that sort because the

229
00:10:09,970 --> 00:10:15,039
groups will be utilizing them and the

230
00:10:12,970 --> 00:10:16,509
other groups remember that the router 2

231
00:10:15,039 --> 00:10:18,669
is not going to be available to you for

232
00:10:16,509 --> 00:10:20,949
your automation so whatever you automate

233
00:10:18,669 --> 00:10:22,959
do not try to include router 2 in the

234
00:10:20,949 --> 00:10:25,868
set of hosts that you automate against

235
00:10:22,959 --> 00:10:28,209
ok things are already set up for you

236
00:10:25,869 --> 00:10:30,039
with that perspective and so as you look

237
00:10:28,209 --> 00:10:34,388
at the code you sort of realize how how

238
00:10:30,039 --> 00:10:35,649
to get along the second aspect is coming

239
00:10:34,389 --> 00:10:38,470
to day one ops

240
00:10:35,649 --> 00:10:40,989
now I mentioned what day zero OPS's day

241
00:10:38,470 --> 00:10:43,559
1 ops is essentially about more of a

242
00:10:40,989 --> 00:10:45,729
network may avoid automation and

243
00:10:43,559 --> 00:10:47,618
configuration management tool usage and

244
00:10:45,729 --> 00:10:48,789
we wanted to concentrate on ansible

245
00:10:47,619 --> 00:10:51,099
primarily because it's probably the

246
00:10:48,789 --> 00:10:52,569
simplest of the lot and a lot of people

247
00:10:51,099 --> 00:10:53,999
seem to have experience with it so you

248
00:10:52,569 --> 00:10:56,829
can even if you've never done it before

249
00:10:53,999 --> 00:10:58,959
look up go to stack overflow go to

250
00:10:56,829 --> 00:11:00,669
ansible documentation whatever it is and

251
00:10:58,959 --> 00:11:04,628
you can pick out snippets that you can

252
00:11:00,669 --> 00:11:06,699
utilize ok and we've already done a lot

253
00:11:04,629 --> 00:11:09,639
of the code for the playbooks for you as

254
00:11:06,699 --> 00:11:11,978
well the goal that you have as part of

255
00:11:09,639 --> 00:11:14,349
the day 1 ops group is to create a

256
00:11:11,979 --> 00:11:15,999
single ansible playbook at the end that

257
00:11:14,349 --> 00:11:19,089
does all of the operations that you need

258
00:11:15,999 --> 00:11:20,649
to do right all the play books that

259
00:11:19,089 --> 00:11:24,279
exist have to feed into that single

260
00:11:20,649 --> 00:11:25,989
playbook right and there are a bunch of

261
00:11:24,279 --> 00:11:27,549
things that I will discuss in terms of

262
00:11:25,989 --> 00:11:32,379
what you actually need to accomplish as

263
00:11:27,549 --> 00:11:33,759
part of it now within the set of API set

264
00:11:32,379 --> 00:11:35,439
out to be utilized some of you might

265
00:11:33,759 --> 00:11:37,629
have heard of these api some of you

266
00:11:35,439 --> 00:11:39,909
might have not right but a lot of this

267
00:11:37,629 --> 00:11:42,159
comes from the open config community in

268
00:11:39,909 --> 00:11:44,679
terms of the API is that they've been

269
00:11:42,159 --> 00:11:48,069
working on the type of interactions that

270
00:11:44,679 --> 00:11:50,409
they've come out with both for

271
00:11:48,069 --> 00:11:55,118
configuration management telemetry as

272
00:11:50,409 --> 00:11:56,919
well as ephemeral state api's ok so I

273
00:11:55,119 --> 00:11:58,829
will talk about all of these and you

274
00:11:56,919 --> 00:12:01,659
will sort of see how they work together

275
00:11:58,829 --> 00:12:03,189
so on the day one off side while you

276
00:12:01,659 --> 00:12:05,049
will be using ansible to in order to

277
00:12:03,189 --> 00:12:06,879
create your final playbook the

278
00:12:05,049 --> 00:12:09,728
underlying towards that ansible will

279
00:12:06,879 --> 00:12:13,119
actually invoke involve things like ydk

280
00:12:09,729 --> 00:12:14,499
how many of you have order ydk ok so

281
00:12:13,119 --> 00:12:16,749
it's a yang development kit which

282
00:12:14,499 --> 00:12:18,399
essentially creates objects out of yang

283
00:12:16,749 --> 00:12:19,929
models and you can code against them

284
00:12:18,399 --> 00:12:21,490
right we're going to use ydk pi

285
00:12:19,929 --> 00:12:23,079
primarily so that you

286
00:12:21,490 --> 00:12:25,420
you will be coding in Python through

287
00:12:23,079 --> 00:12:27,399
throughout the exercise

288
00:12:25,420 --> 00:12:32,368
second is open are how many of you heard

289
00:12:27,399 --> 00:12:34,990
of opener alright so it's an open source

290
00:12:32,369 --> 00:12:37,540
AGP essentially comes from Facebook

291
00:12:34,990 --> 00:12:41,009
sometime in 2017 is when they release it

292
00:12:37,540 --> 00:12:43,569
and we've got open RS docker images

293
00:12:41,009 --> 00:12:44,800
available we will be spinning them up on

294
00:12:43,569 --> 00:12:47,050
the routers as iGPS

295
00:12:44,800 --> 00:12:49,389
ok there is a specific reason why they

296
00:12:47,050 --> 00:12:51,339
coming up they are effectively meant to

297
00:12:49,389 --> 00:12:52,959
be there to bring your bgp session up as

298
00:12:51,339 --> 00:12:54,490
you go through the hack you will realize

299
00:12:52,959 --> 00:12:57,429
how that works ok

300
00:12:54,490 --> 00:13:01,899
in addition to that we intend to use GN

301
00:12:57,429 --> 00:13:05,829
mi how many forward of gr mi alright

302
00:13:01,899 --> 00:13:07,899
so GN mi again comes from the open

303
00:13:05,829 --> 00:13:11,170
config community and the purpose of that

304
00:13:07,899 --> 00:13:13,059
is that it is in parallel to net conf

305
00:13:11,170 --> 00:13:15,248
it's another way of actually interacting

306
00:13:13,059 --> 00:13:16,959
with the Box right so it allows you to

307
00:13:15,249 --> 00:13:19,329
do configuration management using yang

308
00:13:16,959 --> 00:13:22,149
modal's it allows you to limit reusing

309
00:13:19,329 --> 00:13:23,979
yang models and it can be combined with

310
00:13:22,149 --> 00:13:28,449
other set of API is that we'll go to day

311
00:13:23,980 --> 00:13:30,009
two with okay so ydk itself has gnm eye

312
00:13:28,449 --> 00:13:32,160
support which means that you will

313
00:13:30,009 --> 00:13:36,009
actually be utilizing ydk with GN mi

314
00:13:32,160 --> 00:13:37,839
okay and open our will also be utilized

315
00:13:36,009 --> 00:13:40,839
in order to actually bring your reach

316
00:13:37,839 --> 00:13:43,899
ability up on all the devices the last

317
00:13:40,839 --> 00:13:46,929
part which is day to ops is primarily

318
00:13:43,899 --> 00:13:53,740
focused on creating LSPs label-switched

319
00:13:46,929 --> 00:13:57,309
parts on the fly okay so there is if you

320
00:13:53,740 --> 00:13:59,259
go back to the topology dev 1 and F 2

321
00:13:57,309 --> 00:14:02,799
was separated by an entire set of

322
00:13:59,259 --> 00:14:04,449
routers in the middle right they are not

323
00:14:02,799 --> 00:14:07,149
able to reach each other until there's

324
00:14:04,449 --> 00:14:10,059
an actual path that's established the

325
00:14:07,149 --> 00:14:12,970
day to ops guys have a new API that's

326
00:14:10,059 --> 00:14:14,769
now available called jeribai which also

327
00:14:12,970 --> 00:14:17,019
comes from the open config community and

328
00:14:14,769 --> 00:14:20,350
it is meant to be able to get you to

329
00:14:17,019 --> 00:14:22,389
push labels and routes into the rib or

330
00:14:20,350 --> 00:14:24,160
as well as the label switch database of

331
00:14:22,389 --> 00:14:26,170
the router so that you can create

332
00:14:24,160 --> 00:14:27,819
LSPs on the fly there is no

333
00:14:26,170 --> 00:14:30,429
configuration involved in these right

334
00:14:27,819 --> 00:14:32,550
this is a specific API and you can

335
00:14:30,429 --> 00:14:34,890
utilize that once you create those by

336
00:14:32,550 --> 00:14:36,750
things out of the proto file again

337
00:14:34,890 --> 00:14:38,430
because this is entirely new we don't

338
00:14:36,750 --> 00:14:40,050
expect people to start coding this from

339
00:14:38,430 --> 00:14:42,120
scratch so we've created the code for

340
00:14:40,050 --> 00:14:44,339
you right the only thing that you have

341
00:14:42,120 --> 00:14:46,920
to therefore do is understand how the

342
00:14:44,339 --> 00:14:49,320
JSON abstraction works create your own

343
00:14:46,920 --> 00:14:52,560
JSON files and then create a higher

344
00:14:49,320 --> 00:14:53,670
level controller which basically is able

345
00:14:52,560 --> 00:14:56,459
to push different

346
00:14:53,670 --> 00:15:00,180
LSPs into the router into the routers as

347
00:14:56,459 --> 00:15:02,939
different events come in okay so day one

348
00:15:00,180 --> 00:15:04,979
folks will create telemetry information

349
00:15:02,940 --> 00:15:07,350
which will be fed into day two and day

350
00:15:04,980 --> 00:15:09,750
two guys will use the telemetry

351
00:15:07,350 --> 00:15:13,680
information and change the LSP paths on

352
00:15:09,750 --> 00:15:17,720
the routers okay and as you create LSP

353
00:15:13,680 --> 00:15:20,519
paths Devon should be able to ping dev -

354
00:15:17,720 --> 00:15:23,459
okay what you will be able to accomplish

355
00:15:20,519 --> 00:15:26,579
if you complete the entire hack day zero

356
00:15:23,459 --> 00:15:28,739
day one and day two is that during day

357
00:15:26,579 --> 00:15:31,140
zero you will have a single gtp script

358
00:15:28,740 --> 00:15:33,470
which is available for all the routers

359
00:15:31,140 --> 00:15:36,510
and it is able to pull the right set of

360
00:15:33,470 --> 00:15:38,520
yang modeled XML files that can be used

361
00:15:36,510 --> 00:15:40,260
to provision the devices you will have a

362
00:15:38,520 --> 00:15:42,360
single ansible playbook which is part of

363
00:15:40,260 --> 00:15:46,950
day one that will be able to then go

364
00:15:42,360 --> 00:15:47,700
ahead and run all of the configurations

365
00:15:46,950 --> 00:15:50,160
that are required

366
00:15:47,700 --> 00:15:54,170
again using yang models over GN mi

367
00:15:50,160 --> 00:15:56,670
bringing up open or bringing a BGP

368
00:15:54,170 --> 00:16:01,199
testing out your pings across all of

369
00:15:56,670 --> 00:16:02,790
your routers and last is the day to guys

370
00:16:01,200 --> 00:16:05,160
who will have a controller that will

371
00:16:02,790 --> 00:16:07,800
listen to events such as interfaces

372
00:16:05,160 --> 00:16:10,680
going down along paths and using that to

373
00:16:07,800 --> 00:16:12,300
trigger LSP power generation okay there

374
00:16:10,680 --> 00:16:13,680
are quite a few pieces here and as I

375
00:16:12,300 --> 00:16:16,109
mentioned a lot of it is already coded

376
00:16:13,680 --> 00:16:17,520
up for you now what I'd like you to do

377
00:16:16,110 --> 00:16:19,050
is actually take a look at the

378
00:16:17,520 --> 00:16:23,339
documentation that's available so you

379
00:16:19,050 --> 00:16:26,520
can gather what's being done with

380
00:16:23,339 --> 00:16:30,029
respect to things that you can sort of

381
00:16:26,520 --> 00:16:32,939
build out of each one is a separate tab

382
00:16:30,029 --> 00:16:34,920
day 0 day 1 day 2 right what I'd like

383
00:16:32,940 --> 00:16:36,510
you to do as soon as I am done is to

384
00:16:34,920 --> 00:16:38,610
discuss who's going to be part of which

385
00:16:36,510 --> 00:16:40,319
group write whatever you feel

386
00:16:38,610 --> 00:16:41,970
comfortable with go ahead and form that

387
00:16:40,320 --> 00:16:43,480
group and then start concentrating only

388
00:16:41,970 --> 00:16:46,269
on that piece

389
00:16:43,480 --> 00:16:48,130
okay and it doesn't really matter if it

390
00:16:46,269 --> 00:16:49,570
all doesn't come together at the end the

391
00:16:48,130 --> 00:16:51,820
whole idea is that you should be able to

392
00:16:49,570 --> 00:16:54,010
focus on the piece that you have and see

393
00:16:51,820 --> 00:16:57,220
if in the end you're able to meet a goal

394
00:16:54,010 --> 00:17:00,670
of bringing ops for that stage to the

395
00:16:57,220 --> 00:17:03,070
completion stage okay now if you go for

396
00:17:00,670 --> 00:17:05,319
day zero for example there are three

397
00:17:03,070 --> 00:17:07,900
sets of instructions here they basically

398
00:17:05,319 --> 00:17:10,659
explain to you one what is gtp for

399
00:17:07,900 --> 00:17:13,030
things for people who do not know it

400
00:17:10,660 --> 00:17:15,579
also explains how to perform gtp

401
00:17:13,030 --> 00:17:17,709
manually you don't have to everytime

402
00:17:15,579 --> 00:17:19,418
wipe out the disk of the device reload

403
00:17:17,709 --> 00:17:22,150
and then wait for ten minutes you can do

404
00:17:19,419 --> 00:17:24,100
it within a few seconds right so do

405
00:17:22,150 --> 00:17:27,549
manual ztp follow the instructions there

406
00:17:24,099 --> 00:17:29,678
and you also have the last step which is

407
00:17:27,549 --> 00:17:34,240
actually taking the CLI configuration

408
00:17:29,679 --> 00:17:35,980
and converting it into yang XML and once

409
00:17:34,240 --> 00:17:38,370
you have that you have to set up your

410
00:17:35,980 --> 00:17:40,720
infrastructure such that when the device

411
00:17:38,370 --> 00:17:42,689
reloads it is able to get the right

412
00:17:40,720 --> 00:17:45,460
script and bring it to the final stage

413
00:17:42,690 --> 00:17:47,290
okay and therefore the exact

414
00:17:45,460 --> 00:17:49,630
configurations that are utilize are part

415
00:17:47,290 --> 00:17:51,549
of the instructions here so I would

416
00:17:49,630 --> 00:17:53,799
implore you to start reading through it

417
00:17:51,549 --> 00:17:56,080
and then figuring out what it is before

418
00:17:53,799 --> 00:17:59,918
you start hacking around with all the

419
00:17:56,080 --> 00:18:01,870
components okay in addition to that we

420
00:17:59,919 --> 00:18:05,080
have day 1 day 1 is also divided into

421
00:18:01,870 --> 00:18:06,309
three parts one it explains to you what

422
00:18:05,080 --> 00:18:09,610
are the day 1 operations that are going

423
00:18:06,309 --> 00:18:13,960
to be involved okay second one actually

424
00:18:09,610 --> 00:18:15,969
teaches you what ydk is what is that

425
00:18:13,960 --> 00:18:17,710
script actually look like and the code

426
00:18:15,970 --> 00:18:19,179
as I mentioned is already done for you

427
00:18:17,710 --> 00:18:22,360
the only piece of the code that you'll

428
00:18:19,179 --> 00:18:23,830
have to add is take a yang model figure

429
00:18:22,360 --> 00:18:26,139
out what objects there are and actually

430
00:18:23,830 --> 00:18:28,178
add a small piece of code that makes the

431
00:18:26,140 --> 00:18:30,549
whole script work and push the right

432
00:18:28,179 --> 00:18:33,160
configuration ok you will see it as you

433
00:18:30,549 --> 00:18:34,900
read along in addition to that we've

434
00:18:33,160 --> 00:18:38,410
already created a telemetry collector

435
00:18:34,900 --> 00:18:40,110
for you using ydk and GM I see the your

436
00:18:38,410 --> 00:18:42,640
task is to actually set up that

437
00:18:40,110 --> 00:18:45,699
telemetry collector so that it starts

438
00:18:42,640 --> 00:18:46,900
receiving information ok as you go

439
00:18:45,700 --> 00:18:50,020
through the instructions again it will

440
00:18:46,900 --> 00:18:51,490
tell you what you have to do and if you

441
00:18:50,020 --> 00:18:52,600
have any questions at any point or you

442
00:18:51,490 --> 00:18:53,890
feel like you don't want to do that I

443
00:18:52,600 --> 00:18:56,399
want to do something different we can

444
00:18:53,890 --> 00:18:59,340
discuss ok

445
00:18:56,400 --> 00:19:01,680
and of course right at the end your bgp

446
00:18:59,340 --> 00:19:04,709
sessions will only come up once you have

447
00:19:01,680 --> 00:19:06,300
open or running okay the playbook for

448
00:19:04,710 --> 00:19:09,570
that exists already you just have to run

449
00:19:06,300 --> 00:19:11,309
it the whole purpose of the end goal is

450
00:19:09,570 --> 00:19:14,360
to make sure that playbook becomes a

451
00:19:11,309 --> 00:19:17,370
part of your final playbook for the day

452
00:19:14,360 --> 00:19:18,659
okay so you are single playbook should

453
00:19:17,370 --> 00:19:22,020
invoke all of these play books that you

454
00:19:18,660 --> 00:19:26,730
create at the end and then finally we

455
00:19:22,020 --> 00:19:29,040
have day two this is probably in a sense

456
00:19:26,730 --> 00:19:30,660
simplest of the lot because the code is

457
00:19:29,040 --> 00:19:32,970
already done for you you just have to

458
00:19:30,660 --> 00:19:34,559
understand what this API is understand

459
00:19:32,970 --> 00:19:36,750
the structure of the JSON files which is

460
00:19:34,559 --> 00:19:39,270
explained here and then construct your

461
00:19:36,750 --> 00:19:40,920
own JSON files that can help create LSP

462
00:19:39,270 --> 00:19:43,200
parts it can get confusing so it

463
00:19:40,920 --> 00:19:44,640
requires somebody to sit with some pen

464
00:19:43,200 --> 00:19:46,410
and paper and actually write down what

465
00:19:44,640 --> 00:19:48,630
labels go where and what routes go there

466
00:19:46,410 --> 00:19:50,340
okay so the primary purpose of this is

467
00:19:48,630 --> 00:19:52,230
for you to understand how this API works

468
00:19:50,340 --> 00:19:54,090
and then try and utilize that to

469
00:19:52,230 --> 00:19:57,410
actually create a controller that that

470
00:19:54,090 --> 00:20:00,800
is able to perform these tasks all right

471
00:19:57,410 --> 00:20:03,800
any questions at this point any concerns

472
00:20:00,800 --> 00:20:03,800
yes

473
00:20:05,840 --> 00:20:11,189
no so you're free to create your own get

474
00:20:08,400 --> 00:20:13,890
repo for this the the actual base code

475
00:20:11,190 --> 00:20:15,870
is in a git repo so those instructions

476
00:20:13,890 --> 00:20:17,700
are already present so as you go along

477
00:20:15,870 --> 00:20:19,830
it will ask you to clone and use that

478
00:20:17,700 --> 00:20:22,080
and use that code right you can then

479
00:20:19,830 --> 00:20:29,699
create your own get repo and push your

480
00:20:22,080 --> 00:20:31,559
code changes there yeah yes it's all

481
00:20:29,700 --> 00:20:34,440
public here yeah

482
00:20:31,559 --> 00:20:37,678
also there is a repo that has completed

483
00:20:34,440 --> 00:20:39,120
code I am keeping it private for now if

484
00:20:37,679 --> 00:20:40,290
people have trouble and they're not able

485
00:20:39,120 --> 00:20:42,059
to complete something I'll make it

486
00:20:40,290 --> 00:20:44,129
public okay and then you can sort of

487
00:20:42,059 --> 00:20:45,660
look at that and then see how to make

488
00:20:44,130 --> 00:20:47,550
your code work all right

489
00:20:45,660 --> 00:20:50,370
so the first repository that you have

490
00:20:47,550 --> 00:20:52,020
access to is incomplete code it works

491
00:20:50,370 --> 00:20:53,250
but it doesn't take you to your final

492
00:20:52,020 --> 00:20:58,580
stage so you have to figure out how to

493
00:20:53,250 --> 00:20:58,580
make that work all right cool

494
00:21:08,750 --> 00:21:15,179
okay so as I mentioned there are totally

495
00:21:12,779 --> 00:21:17,610
sixth instances in the seven instances

496
00:21:15,179 --> 00:21:20,039
in the overall topology each group is

497
00:21:17,610 --> 00:21:23,370
going to have access to one dev instance

498
00:21:20,039 --> 00:21:26,340
each right so there is ztp dev instance

499
00:21:23,370 --> 00:21:29,129
for group day zero and then for day one

500
00:21:26,340 --> 00:21:31,889
its dev one and for day two its dev -

501
00:21:29,129 --> 00:21:33,269
okay and the instruction is to connect

502
00:21:31,889 --> 00:21:34,678
to them is all on the website when you

503
00:21:33,269 --> 00:21:36,570
click on connect to the pause it tells

504
00:21:34,679 --> 00:21:38,250
you exactly how are you supposed to

505
00:21:36,570 --> 00:21:40,590
connect plus I believe the port numbers

506
00:21:38,250 --> 00:21:42,929
have been given to each one of you right

507
00:21:40,590 --> 00:21:44,129
so based on that you should know what

508
00:21:42,929 --> 00:21:49,769
your URL is and then use that

509
00:21:44,129 --> 00:21:51,149
accordingly all right okay so let me

510
00:21:49,769 --> 00:21:54,059
quickly show you what's running right

511
00:21:51,149 --> 00:21:56,189
now I'm one of fresh instance and

512
00:21:54,059 --> 00:21:58,440
therefore this is basically the jump

513
00:21:56,190 --> 00:22:00,240
books the instructions also will show

514
00:21:58,440 --> 00:22:01,740
you that from the jump box you can

515
00:22:00,240 --> 00:22:04,289
actually console into the routers as

516
00:22:01,740 --> 00:22:06,929
well particularly for the CTP folks this

517
00:22:04,289 --> 00:22:08,820
is absolutely essential right because as

518
00:22:06,929 --> 00:22:10,379
you're doing ztp if something goes wrong

519
00:22:08,820 --> 00:22:12,000
you might lose access so you need

520
00:22:10,379 --> 00:22:16,860
console access to make sure you can

521
00:22:12,000 --> 00:22:19,590
correct it okay so once you're into the

522
00:22:16,860 --> 00:22:21,508
jump box which is the main URL you can

523
00:22:19,590 --> 00:22:23,699
basically get into any of the instances

524
00:22:21,509 --> 00:22:27,750
by using the name router one router to

525
00:22:23,700 --> 00:22:29,250
router three router for okay and the

526
00:22:27,750 --> 00:22:33,210
username and password that you have to

527
00:22:29,250 --> 00:22:34,950
use is router dev and nanog 75s F is the

528
00:22:33,210 --> 00:22:38,940
password you the instructions are there

529
00:22:34,950 --> 00:22:40,320
on the website alright so a quick

530
00:22:38,940 --> 00:22:43,919
representation for the folks who are

531
00:22:40,320 --> 00:22:47,039
going to do de 0 ok that is z TP how

532
00:22:43,919 --> 00:22:49,919
does this actually work this is my z TP

533
00:22:47,039 --> 00:22:52,639
instance right this box contains two

534
00:22:49,919 --> 00:22:55,169
entities a DHCP server and a web server

535
00:22:52,639 --> 00:22:58,590
when the router boots up or tries to do

536
00:22:55,169 --> 00:23:00,120
ztp it sends out a DHCP request based on

537
00:22:58,590 --> 00:23:03,360
the serial numbers identified in the

538
00:23:00,120 --> 00:23:05,459
DHCP request the ztp instance or the

539
00:23:03,360 --> 00:23:07,080
DHCP instance on the CTP is going to

540
00:23:05,460 --> 00:23:09,750
respond with the location of a script

541
00:23:07,080 --> 00:23:11,699
right that script will be executed on

542
00:23:09,750 --> 00:23:15,450
the router and then it should bring the

543
00:23:11,700 --> 00:23:17,429
router up to the final state ok majority

544
00:23:15,450 --> 00:23:19,110
of that script is already written the

545
00:23:17,429 --> 00:23:20,879
only thing that you have to focus on is

546
00:23:19,110 --> 00:23:21,750
making sure that you figure out the

547
00:23:20,879 --> 00:23:25,439
right yeah

548
00:23:21,750 --> 00:23:27,780
model XML putz and then write the code

549
00:23:25,440 --> 00:23:32,580
to be able to use NC client on box

550
00:23:27,780 --> 00:23:44,040
that's all right so let's quickly take a

551
00:23:32,580 --> 00:23:45,899
look at this it's too small all right so

552
00:23:44,040 --> 00:23:47,460
on the web server there is a structure

553
00:23:45,900 --> 00:23:49,650
that's available okay so there are

554
00:23:47,460 --> 00:23:51,300
configs configs actually contain the

555
00:23:49,650 --> 00:23:54,150
final configs that your out does need to

556
00:23:51,300 --> 00:23:55,919
reach okay you you have to take a look

557
00:23:54,150 --> 00:23:58,020
at that and then try and figure out what

558
00:23:55,920 --> 00:24:00,300
is in the XML that I need to actually

559
00:23:58,020 --> 00:24:01,830
reach that state right it is quite well

560
00:24:00,300 --> 00:24:03,960
explained in the instructions as well

561
00:24:01,830 --> 00:24:05,610
how do you do a diff what are the CLI

562
00:24:03,960 --> 00:24:08,690
that you actually took and what and then

563
00:24:05,610 --> 00:24:12,149
you will sort of get going based on that

564
00:24:08,690 --> 00:24:14,100
there is also package that the script

565
00:24:12,150 --> 00:24:16,680
installs it installs pip as part of the

566
00:24:14,100 --> 00:24:19,590
bring up process and then it can be used

567
00:24:16,680 --> 00:24:23,160
to install packages of your choice on

568
00:24:19,590 --> 00:24:24,990
the router right as an example we as

569
00:24:23,160 --> 00:24:26,700
part of the script we install XML to

570
00:24:24,990 --> 00:24:28,710
dict which means that it is able to

571
00:24:26,700 --> 00:24:30,810
convert your XML to dictionaries and

572
00:24:28,710 --> 00:24:33,830
that I think is fairly useful for a lot

573
00:24:30,810 --> 00:24:36,950
of folks who are working with XML data

574
00:24:33,830 --> 00:24:39,300
you can choose to install whatever other

575
00:24:36,950 --> 00:24:42,450
particular package you need this script

576
00:24:39,300 --> 00:24:45,000
allows you to do that now the script

577
00:24:42,450 --> 00:24:52,380
that gets downloaded currently as part

578
00:24:45,000 --> 00:24:55,530
of the ztp process is essentially here

579
00:24:52,380 --> 00:24:57,810
it's called ztp and seek line dot pi it

580
00:24:55,530 --> 00:24:59,610
does a bunch of things but primarily as

581
00:24:57,810 --> 00:25:01,889
you can see it imports NC client on the

582
00:24:59,610 --> 00:25:04,919
box when it runs there so NC client is

583
00:25:01,890 --> 00:25:06,750
part of the base image and you can

584
00:25:04,920 --> 00:25:08,160
ignore much of the initial part of the

585
00:25:06,750 --> 00:25:09,780
code it is basically setting up there

586
00:25:08,160 --> 00:25:11,250
are comments everywhere to explain to

587
00:25:09,780 --> 00:25:12,930
you what this piece of code does read

588
00:25:11,250 --> 00:25:16,800
through it understand what it does and

589
00:25:12,930 --> 00:25:18,330
then you can incorporate more and the

590
00:25:16,800 --> 00:25:19,350
serial numbers are extremely important

591
00:25:18,330 --> 00:25:21,330
ok

592
00:25:19,350 --> 00:25:23,490
serial numbers are used by the DHCP

593
00:25:21,330 --> 00:25:25,500
server to give it the right IP as well

594
00:25:23,490 --> 00:25:28,170
as the writes script or config that you

595
00:25:25,500 --> 00:25:30,179
need to provide and the script itself

596
00:25:28,170 --> 00:25:33,030
can use serial numbers to determine

597
00:25:30,179 --> 00:25:34,679
where to download XML files from so you

598
00:25:33,030 --> 00:25:35,250
can structure your web server in

599
00:25:34,679 --> 00:25:37,110
whatever

600
00:25:35,250 --> 00:25:39,210
you like map your serial numbers to

601
00:25:37,110 --> 00:25:41,610
router names which is already there as

602
00:25:39,210 --> 00:25:43,289
part of the script and use this map to

603
00:25:41,610 --> 00:25:45,389
make the correct

604
00:25:43,289 --> 00:25:50,250
request the call requests from your

605
00:25:45,390 --> 00:25:54,120
script itself ok and as the code goes on

606
00:25:50,250 --> 00:25:56,909
at one point you will see that the NC

607
00:25:54,120 --> 00:25:59,129
Client Manager is created for you and a

608
00:25:56,909 --> 00:26:00,960
very simple gate config is done right so

609
00:25:59,130 --> 00:26:03,090
it is able to do a gate config get an

610
00:26:00,960 --> 00:26:05,880
XML format of the running configuration

611
00:26:03,090 --> 00:26:09,000
all you have to do is now figure out

612
00:26:05,880 --> 00:26:10,650
your actual XML config do an edit config

613
00:26:09,000 --> 00:26:12,990
appropriately download those files

614
00:26:10,650 --> 00:26:15,150
wherever required and at the end do all

615
00:26:12,990 --> 00:26:19,260
your error checks until the script

616
00:26:15,150 --> 00:26:21,390
completes properly ok the steps to

617
00:26:19,260 --> 00:26:27,270
actually run them is all on the

618
00:26:21,390 --> 00:26:29,130
instructions as well all right now a

619
00:26:27,270 --> 00:26:32,070
quick look at what actually makes this

620
00:26:29,130 --> 00:26:33,210
go the DHCP server is has to be set up

621
00:26:32,070 --> 00:26:36,600
to actually respond with the right

622
00:26:33,210 --> 00:26:39,559
entities which means that this is again

623
00:26:36,600 --> 00:26:39,559
already done for you

624
00:26:47,110 --> 00:26:52,059
and you can see essentially for every

625
00:26:49,840 --> 00:26:54,580
router a corresponding IP it is

626
00:26:52,059 --> 00:26:56,799
statically assigned right now because we

627
00:26:54,580 --> 00:26:59,559
use that IP for netting purposes right

628
00:26:56,799 --> 00:27:00,879
so you don't change that at all the only

629
00:26:59,559 --> 00:27:04,750
thing that you're interested in changing

630
00:27:00,880 --> 00:27:06,039
is this boot file name all right

631
00:27:04,750 --> 00:27:08,460
so either you can supply the config

632
00:27:06,039 --> 00:27:11,350
directly if you just want things to work

633
00:27:08,460 --> 00:27:12,880
or you supply your script which is the

634
00:27:11,350 --> 00:27:15,610
one that actually gets downloaded when

635
00:27:12,880 --> 00:27:17,440
ztp happens now there is absolutely no

636
00:27:15,610 --> 00:27:19,059
need to always perform ztp in order to

637
00:27:17,440 --> 00:27:21,070
get this script running you can simply

638
00:27:19,059 --> 00:27:22,539
download it from the web server and run

639
00:27:21,070 --> 00:27:25,510
it locally to see how the script is

640
00:27:22,539 --> 00:27:27,250
working right so do ztp only when you

641
00:27:25,510 --> 00:27:29,080
need to try it for the CTP process

642
00:27:27,250 --> 00:27:30,700
otherwise run it like a normal Python

643
00:27:29,080 --> 00:27:37,120
script on a Linux box that's all it is

644
00:27:30,700 --> 00:27:39,600
so let's for example get into our intro

645
00:27:37,120 --> 00:27:39,600
router to

646
00:27:46,400 --> 00:27:51,380
now Robert to deliberately has been

647
00:27:49,100 --> 00:27:52,219
brought up to only a very basic state it

648
00:27:51,380 --> 00:27:55,400
doesn't have the full configuration

649
00:27:52,220 --> 00:27:57,680
right this is the guy that the day 0

650
00:27:55,400 --> 00:27:59,750
group will be focusing on so you will

651
00:27:57,680 --> 00:28:01,880
try and download the script you know

652
00:27:59,750 --> 00:28:03,290
through ztp or directly and then try to

653
00:28:01,880 --> 00:28:05,690
make it work until it gets to the

654
00:28:03,290 --> 00:28:08,260
required config how to create those XML

655
00:28:05,690 --> 00:28:12,890
files is explained in the instructions

656
00:28:08,260 --> 00:28:16,100
so as part of this as an example just to

657
00:28:12,890 --> 00:28:18,490
get get this going for now because I'm

658
00:28:16,100 --> 00:28:21,199
not going to change the script currently

659
00:28:18,490 --> 00:28:24,010
I'm just going to change for example on

660
00:28:21,200 --> 00:28:24,010
the DHCP server

661
00:28:31,430 --> 00:28:36,290
the boot filename to the actual config

662
00:28:33,320 --> 00:28:38,860
file so that it quickly brings it to the

663
00:28:36,290 --> 00:28:38,860
required state

664
00:28:45,970 --> 00:28:50,440
and whenever you make changes to a DHCP

665
00:28:48,100 --> 00:28:53,139
server make sure you restart it

666
00:28:50,440 --> 00:29:00,179
otherwise the changes will not take

667
00:28:53,139 --> 00:29:00,178
effect okay

668
00:29:02,549 --> 00:29:08,379
and there are quick instructions like

669
00:29:04,870 --> 00:29:09,820
these available to make it do manual ztp

670
00:29:08,379 --> 00:29:12,340
quickly right so this will force the

671
00:29:09,820 --> 00:29:15,158
router to send out a DHCP request and

672
00:29:12,340 --> 00:29:18,250
then try and fetch the script that's

673
00:29:15,159 --> 00:29:23,669
required now as it does that you have

674
00:29:18,250 --> 00:29:26,500
some options in terms of setting up your

675
00:29:23,669 --> 00:29:29,919
ztp instance to actually see what's

676
00:29:26,500 --> 00:29:31,750
going on you can use DHCP dump which

677
00:29:29,919 --> 00:29:37,269
gives you the exact DHCP requests that

678
00:29:31,750 --> 00:29:39,970
are coming in you can also as you can

679
00:29:37,269 --> 00:29:42,250
see you can see this is the file that

680
00:29:39,970 --> 00:29:43,659
was provided by the DHCP server and

681
00:29:42,250 --> 00:29:45,909
response to the request that came in

682
00:29:43,659 --> 00:29:48,549
from the router right this is the basic

683
00:29:45,909 --> 00:29:50,139
ztp process working now instead of this

684
00:29:48,549 --> 00:29:52,269
you will be providing the script and the

685
00:29:50,139 --> 00:29:56,769
script is what you have to complete all

686
00:29:52,269 --> 00:29:58,480
right now as this gets applied I don't

687
00:29:56,769 --> 00:30:00,639
expect any syslog but when you run the

688
00:29:58,480 --> 00:30:03,220
script there are utilities within the

689
00:30:00,639 --> 00:30:04,928
script to actually send sis logs out so

690
00:30:03,220 --> 00:30:05,919
you can look for sis logs on the ztp

691
00:30:04,929 --> 00:30:09,970
server you don't have to go to the

692
00:30:05,919 --> 00:30:11,860
router right and it'll come on port 500

693
00:30:09,970 --> 00:30:13,269
or set up your own sister Hawk server if

694
00:30:11,860 --> 00:30:17,139
you need and we'll give you details of

695
00:30:13,269 --> 00:30:19,870
what the script is doing now since this

696
00:30:17,139 --> 00:30:24,699
router is about to come up what we can

697
00:30:19,870 --> 00:30:26,889
do is actually take a look here yep you

698
00:30:24,700 --> 00:30:31,320
can see the interfaces coming up this is

699
00:30:26,889 --> 00:30:31,320
the configuring apply to the doctor okay

700
00:30:33,029 --> 00:30:38,080
so now this router is pretty much up

701
00:30:36,039 --> 00:30:39,519
there with the final state right and

702
00:30:38,080 --> 00:30:42,789
this is what you need to accomplish as

703
00:30:39,519 --> 00:30:44,980
part of your script as well okay now

704
00:30:42,789 --> 00:30:47,590
that's what day 0 folks will be focusing

705
00:30:44,980 --> 00:30:52,750
on now let's consider the day 1 as part

706
00:30:47,590 --> 00:30:55,658
of day 1 what I will do is jump into dev

707
00:30:52,750 --> 00:30:58,790
1 that's your instance you have access

708
00:30:55,659 --> 00:31:01,580
to all 3 routers router 1 3 and

709
00:30:58,790 --> 00:31:03,710
or not router - that's for the ztp folks

710
00:31:01,580 --> 00:31:05,240
so you will be there for running your

711
00:31:03,710 --> 00:31:08,750
ansible playbooks against all of these

712
00:31:05,240 --> 00:31:11,180
three instances whatever the day - folks

713
00:31:08,750 --> 00:31:12,890
will be doing is not going to impede you

714
00:31:11,180 --> 00:31:14,570
so they can continue to work on their

715
00:31:12,890 --> 00:31:16,700
own and it's not going to affect what

716
00:31:14,570 --> 00:31:18,500
you're doing so but or the two of you

717
00:31:16,700 --> 00:31:19,460
will share those three routers router

718
00:31:18,500 --> 00:31:27,760
one three and four

719
00:31:19,460 --> 00:31:27,760
okay now on dev one what we will do is I

720
00:31:28,180 --> 00:31:38,320
will clone my instance which is the

721
00:31:33,620 --> 00:31:38,320
completed one okay

722
00:32:00,400 --> 00:32:03,240
all right

723
00:32:04,730 --> 00:32:08,270
now this has already been arranged for

724
00:32:06,650 --> 00:32:12,080
you to actually try out the code as

725
00:32:08,270 --> 00:32:15,290
needed ansible telemetry ydk is all for

726
00:32:12,080 --> 00:32:17,780
day one ztp is basically for the day

727
00:32:15,290 --> 00:32:19,730
zero folks and jeribai is for the day

728
00:32:17,780 --> 00:32:21,680
two folks right and the code in each one

729
00:32:19,730 --> 00:32:23,450
of them is set up accordingly now let's

730
00:32:21,680 --> 00:32:26,990
take a look quickly at the ansible

731
00:32:23,450 --> 00:32:29,030
playbooks available the playbooks are

732
00:32:26,990 --> 00:32:32,600
set up into four different categories

733
00:32:29,030 --> 00:32:34,910
right so there is config BGP which is

734
00:32:32,600 --> 00:32:38,510
going to configure BGP between router

735
00:32:34,910 --> 00:32:42,020
one and out of four using y DK and GN m

736
00:32:38,510 --> 00:32:43,670
i open our bring up which is basically

737
00:32:42,020 --> 00:32:46,450
going to run linux commands and bring up

738
00:32:43,670 --> 00:32:49,280
a docker container on all the instances

739
00:32:46,450 --> 00:32:51,620
reach ability check which is again going

740
00:32:49,280 --> 00:32:53,330
to use y DK in order to test pings

741
00:32:51,620 --> 00:32:55,040
across all your network to make sure

742
00:32:53,330 --> 00:32:59,060
that opener was able to distribute

743
00:32:55,040 --> 00:33:01,190
properly and the telemetry setup which

744
00:32:59,060 --> 00:33:04,370
you have to do on your own is to figure

745
00:33:01,190 --> 00:33:09,130
out a playbook to spin up a docker

746
00:33:04,370 --> 00:33:11,239
instance of the telemetry collector ok

747
00:33:09,130 --> 00:33:14,870
those instructions are all in there so

748
00:33:11,240 --> 00:33:16,640
don't worry now the day one body ml that

749
00:33:14,870 --> 00:33:20,389
you see here is in the end simply

750
00:33:16,640 --> 00:33:23,390
importing all of the other playbooks for

751
00:33:20,390 --> 00:33:25,790
me right so I will execute just D 1

752
00:33:23,390 --> 00:33:27,560
which is also your end goal anyway have

753
00:33:25,790 --> 00:33:29,149
a single playbook that then goes ahead

754
00:33:27,560 --> 00:33:33,669
and calls all the other playbooks in

755
00:33:29,150 --> 00:33:33,670
order so let's try this

756
00:33:45,540 --> 00:33:51,379
okay if some instance already

757
00:34:00,630 --> 00:34:05,760
okay so this is gonna start connecting

758
00:34:02,640 --> 00:34:09,210
to my routers it was able to configure

759
00:34:05,760 --> 00:34:11,790
BGP properly for me now this guy is

760
00:34:09,210 --> 00:34:13,470
actually going to restart the docker

761
00:34:11,790 --> 00:34:14,880
daemon and all the instances because of

762
00:34:13,469 --> 00:34:16,679
the routing changes that took place and

763
00:34:14,880 --> 00:34:18,210
then it's going to pull the docker image

764
00:34:16,679 --> 00:34:20,219
that takes a little while so let it run

765
00:34:18,210 --> 00:34:22,409
right and on each of the routers is

766
00:34:20,219 --> 00:34:24,449
going to pull almost like it's a 2gig

767
00:34:22,409 --> 00:34:27,179
route docket image so it takes a while

768
00:34:24,449 --> 00:34:28,679
but all of the routers will pull that

769
00:34:27,179 --> 00:34:33,659
docker image and then eventually spin it

770
00:34:28,679 --> 00:34:35,879
up okay while this runs you can actually

771
00:34:33,659 --> 00:34:39,989
even go to the router and see what's

772
00:34:35,880 --> 00:34:41,490
happening so let's say I'm on router 2

773
00:34:39,989 --> 00:34:42,779
now good thing is of course ansible runs

774
00:34:41,489 --> 00:34:43,919
in parallel so it's going to pull the

775
00:34:42,780 --> 00:34:54,360
docker image and all the routers in

776
00:34:43,920 --> 00:34:56,340
parallel and here for example you can

777
00:34:54,360 --> 00:35:00,690
see it's about to initiate the docker

778
00:34:56,340 --> 00:35:04,760
pool anyway for me and if I just tore

779
00:35:00,690 --> 00:35:08,910
df- edge it hasn't started the pool yet

780
00:35:04,760 --> 00:35:10,830
but effectively the app underscore host

781
00:35:08,910 --> 00:35:12,930
directory that you see here that should

782
00:35:10,830 --> 00:35:15,270
fill up with the contents of the docker

783
00:35:12,930 --> 00:35:16,799
image and as it downloads you can see it

784
00:35:15,270 --> 00:35:17,820
incrementing right that's one way of

785
00:35:16,800 --> 00:35:19,680
checking that is actually working

786
00:35:17,820 --> 00:35:22,350
properly so all of these different

787
00:35:19,680 --> 00:35:24,359
routers as the pool will will wait for

788
00:35:22,350 --> 00:35:26,130
them to actually come up now in the

789
00:35:24,360 --> 00:35:28,440
meantime let me actually show you what

790
00:35:26,130 --> 00:35:30,390
happened with the first playbook that

791
00:35:28,440 --> 00:35:37,200
ran which is ydk configuring through

792
00:35:30,390 --> 00:35:39,089
cnmi so this is the configuration that

793
00:35:37,200 --> 00:35:41,549
was pushed to router 1 it's in it's a

794
00:35:39,090 --> 00:35:45,180
basic ibgp configuration right so it's

795
00:35:41,550 --> 00:35:47,760
trying to set up a bgp session between

796
00:35:45,180 --> 00:35:48,810
router 1 and out of 4 which is the end

797
00:35:47,760 --> 00:35:51,560
router ok

798
00:35:48,810 --> 00:35:55,290
and this session is not going to come up

799
00:35:51,560 --> 00:35:58,740
because of the fact that we're using

800
00:35:55,290 --> 00:36:00,090
loop backs to peer right and the loop

801
00:35:58,740 --> 00:36:02,129
backs have not been distributed because

802
00:36:00,090 --> 00:36:04,980
there is no AGP running which is why you

803
00:36:02,130 --> 00:36:10,560
have to get open or running okay that is

804
00:36:04,980 --> 00:36:13,619
why if you were to take a look at show

805
00:36:10,560 --> 00:36:16,349
bgp sessions you can see it's idle

806
00:36:13,619 --> 00:36:23,279
and we'll wait for the ansible playbook

807
00:36:16,349 --> 00:36:28,259
to complete in order to get to our

808
00:36:23,279 --> 00:36:37,200
required state where did I go okay let's

809
00:36:28,259 --> 00:36:39,319
see what this guy is doing yeah you can

810
00:36:37,200 --> 00:36:41,910
see it filling up it's like 1.4 gig now

811
00:36:39,319 --> 00:36:45,019
shall reach to gig soon that's basically

812
00:36:41,910 --> 00:36:45,019
the docket image being pulled up

813
00:37:21,130 --> 00:37:24,340
almost there

814
00:37:34,750 --> 00:37:42,780
okay think it's done yep so now it's

815
00:37:38,950 --> 00:37:45,310
gonna push all the files as needed and

816
00:37:42,780 --> 00:37:46,810
yep so I got the hashes for the opener

817
00:37:45,310 --> 00:37:48,430
instances right that means all the

818
00:37:46,810 --> 00:37:50,830
docker instances were brought up on on

819
00:37:48,430 --> 00:37:53,319
the four routers now it's going to I've

820
00:37:50,830 --> 00:37:55,420
put a pause for like 120 seconds it can

821
00:37:53,320 --> 00:37:57,390
be less it depends on how long opener

822
00:37:55,420 --> 00:37:59,800
might take to actually get those routes

823
00:37:57,390 --> 00:38:02,290
usually I've seen it happen within 30

824
00:37:59,800 --> 00:38:05,170
seconds but I've seen it fail as well so

825
00:38:02,290 --> 00:38:09,190
I'm just being a little bit conservative

826
00:38:05,170 --> 00:38:11,590
so put your pauses within the play books

827
00:38:09,190 --> 00:38:14,290
as necessary because Indiana Play Books

828
00:38:11,590 --> 00:38:15,910
have to test conditions so in this case

829
00:38:14,290 --> 00:38:18,250
my next play book is supposed to make

830
00:38:15,910 --> 00:38:20,589
sure that every router is able to ping

831
00:38:18,250 --> 00:38:22,359
the loopback of every other outer write

832
00:38:20,590 --> 00:38:24,220
and therefore as that list is passed in

833
00:38:22,359 --> 00:38:27,359
opener should be running and should have

834
00:38:24,220 --> 00:38:31,029
distributed the routes for me okay so

835
00:38:27,359 --> 00:38:37,900
let this guy keep running and I can

836
00:38:31,030 --> 00:38:39,820
actually go back to router 1 you see the

837
00:38:37,900 --> 00:38:41,530
bgp session is now established that is

838
00:38:39,820 --> 00:38:46,930
primarily because open i'll came up now

839
00:38:41,530 --> 00:38:48,609
let's do a shout and do you see these

840
00:38:46,930 --> 00:38:51,098
application routes air routes at the end

841
00:38:48,609 --> 00:38:53,170
these are routes being learned by opener

842
00:38:51,099 --> 00:38:54,520
from other open air instances right so

843
00:38:53,170 --> 00:38:56,410
you're running a third-party protocol

844
00:38:54,520 --> 00:38:59,380
you know separately as part of the

845
00:38:56,410 --> 00:39:00,970
vendor stack so the third-party protocol

846
00:38:59,380 --> 00:39:02,700
can then be utilized for all of its own

847
00:39:00,970 --> 00:39:05,259
api's and you can combine it together

848
00:39:02,700 --> 00:39:06,609
now once you have these open our

849
00:39:05,260 --> 00:39:09,970
instance running and bgp session has

850
00:39:06,609 --> 00:39:13,690
come up of course i can actually just

851
00:39:09,970 --> 00:39:15,160
make this guy start quickly they should

852
00:39:13,690 --> 00:39:17,880
start testing the reach ability of the

853
00:39:15,160 --> 00:39:17,879
loop backs for me

854
00:39:20,140 --> 00:39:25,450
and this is actually using ydk and

855
00:39:22,480 --> 00:39:27,130
Gianna mine to invoke the api's of the

856
00:39:25,450 --> 00:39:29,140
XR outer to actually do things for me

857
00:39:27,130 --> 00:39:31,540
right because it's not a Linux instance

858
00:39:29,140 --> 00:39:33,640
so I can't just ping so this this guy is

859
00:39:31,540 --> 00:39:35,560
actually utilizing the APS for that so

860
00:39:33,640 --> 00:39:37,359
you will be creating your own ansible

861
00:39:35,560 --> 00:39:43,090
module as part of the exercise to make

862
00:39:37,360 --> 00:39:46,720
this work and then I'm going to spin up

863
00:39:43,090 --> 00:39:49,840
finally the telemetry collector as a

864
00:39:46,720 --> 00:39:52,359
separate docker instance and one

865
00:39:49,840 --> 00:39:54,190
interesting thing is the way we make the

866
00:39:52,360 --> 00:39:55,870
day one guys give the telemetry

867
00:39:54,190 --> 00:39:58,120
information to the day two guys is

868
00:39:55,870 --> 00:40:01,240
through a Kafka bus in the middle so

869
00:39:58,120 --> 00:40:03,940
your telemetry instance that you spin up

870
00:40:01,240 --> 00:40:05,020
is going to push to Kafka and the day

871
00:40:03,940 --> 00:40:07,240
two guys are simply going to run a

872
00:40:05,020 --> 00:40:09,340
consumer right and the consumer will

873
00:40:07,240 --> 00:40:11,850
start getting the information needed so

874
00:40:09,340 --> 00:40:14,110
you you are able to isolate your

875
00:40:11,850 --> 00:40:17,549
telemetry concerns but at the same time

876
00:40:14,110 --> 00:40:17,550
feed your data into day two

877
00:40:27,520 --> 00:40:32,990
it's probably pulling the doctor image

878
00:40:29,600 --> 00:40:34,790
for that guy's well okay so now while

879
00:40:32,990 --> 00:40:37,549
that is going on I can actually jump on

880
00:40:34,790 --> 00:40:39,710
to day to day to is where we're trying

881
00:40:37,550 --> 00:40:43,370
to build a simple controller that is

882
00:40:39,710 --> 00:40:45,830
able to push LSPs parts into the routers

883
00:40:43,370 --> 00:40:47,630
so that you're able to finally get

884
00:40:45,830 --> 00:40:52,279
reachability from dev 1 - dev - at the

885
00:40:47,630 --> 00:40:54,920
end ok so for that purpose let's get

886
00:40:52,280 --> 00:40:58,490
into dev - here I'm going to try and

887
00:40:54,920 --> 00:41:01,130
ping 10:1 110 which is actually the IP

888
00:40:58,490 --> 00:41:03,319
address of dev 1 at the far end across

889
00:41:01,130 --> 00:41:10,240
the entire topology ok it's not going to

890
00:41:03,320 --> 00:41:10,240
be able to ping so let's get into

891
00:41:27,960 --> 00:41:32,369
now we're going to use JIRA bye-zee-bye

892
00:41:30,119 --> 00:41:35,069
is the new open config a pair that's

893
00:41:32,369 --> 00:41:37,890
come out it is not a configuration API

894
00:41:35,069 --> 00:41:39,869
it's an API that creates state directly

895
00:41:37,890 --> 00:41:42,150
into your rib or into your label switch

896
00:41:39,869 --> 00:41:43,410
database which means that you can set up

897
00:41:42,150 --> 00:41:45,720
LSPs on the fly

898
00:41:43,410 --> 00:41:47,308
it's like segment routing but the

899
00:41:45,720 --> 00:41:49,558
policies are in your controller or app

900
00:41:47,309 --> 00:41:52,319
there is no configuration at all on the

901
00:41:49,559 --> 00:41:53,940
devices okay and the state of course is

902
00:41:52,319 --> 00:41:56,220
only maintained for a certain period of

903
00:41:53,940 --> 00:41:59,369
time you can purge it whenever you need

904
00:41:56,220 --> 00:42:05,299
and basically your controller is the

905
00:41:59,369 --> 00:42:08,400
owner of that state all right now here

906
00:42:05,299 --> 00:42:10,859
we have a few folders available the

907
00:42:08,400 --> 00:42:14,220
proto's folder shows you the proto's

908
00:42:10,859 --> 00:42:16,920
that effectively the protobuf ideal or

909
00:42:14,220 --> 00:42:18,598
the model for this giri by api all your

910
00:42:16,920 --> 00:42:22,049
libraries and bindings are created from

911
00:42:18,599 --> 00:42:24,599
these protal files ok if you go up or

912
00:42:22,049 --> 00:42:26,309
not and check out the other stuff

913
00:42:24,599 --> 00:42:28,710
available as I mentioned the code is

914
00:42:26,309 --> 00:42:30,119
already done for you so Jerry by API is

915
00:42:28,710 --> 00:42:32,609
the one that actually connects to the

916
00:42:30,119 --> 00:42:36,329
instances over G RPC and is able to

917
00:42:32,609 --> 00:42:38,460
communicate and make the Gd by calls G

918
00:42:36,329 --> 00:42:41,190
by client on the other hand is the one

919
00:42:38,460 --> 00:42:43,109
that receives JSON information and

920
00:42:41,190 --> 00:42:45,779
converts into a format that the GI buy

921
00:42:43,109 --> 00:42:49,250
API can use okay so you will only be

922
00:42:45,779 --> 00:42:53,220
coordinating with the GD by client I

923
00:42:49,250 --> 00:42:57,480
have in the code sample that you will

924
00:42:53,220 --> 00:43:01,020
get I only have example for part 3 where

925
00:42:57,480 --> 00:43:02,460
all you really have to do is understand

926
00:43:01,020 --> 00:43:04,200
the JSON file that is provided here

927
00:43:02,460 --> 00:43:08,940
which I explain in great detail in the

928
00:43:04,200 --> 00:43:11,160
instructions so go through that and this

929
00:43:08,940 --> 00:43:13,319
basically takes all of the different

930
00:43:11,160 --> 00:43:15,390
values of the GD by API and just puts it

931
00:43:13,319 --> 00:43:17,849
out in the JSON format so you can read

932
00:43:15,390 --> 00:43:20,160
what it is right and you will basically

933
00:43:17,849 --> 00:43:23,220
be able to see how a route is structured

934
00:43:20,160 --> 00:43:25,440
before it is sent into the router ok and

935
00:43:23,220 --> 00:43:27,720
in the end you have to create multiple

936
00:43:25,440 --> 00:43:29,789
such JSON files for each path that you

937
00:43:27,720 --> 00:43:31,500
can create in the router to policy that

938
00:43:29,789 --> 00:43:34,079
we have shown there are five possible

939
00:43:31,500 --> 00:43:36,480
paths those are identified in the

940
00:43:34,079 --> 00:43:38,490
instructions so consider that write down

941
00:43:36,480 --> 00:43:40,470
exactly how you would put a label here

942
00:43:38,490 --> 00:43:41,459
or pop somewhere else and then you will

943
00:43:40,470 --> 00:43:44,069
be able to simply create

944
00:43:41,460 --> 00:43:45,839
JSON files and you look right no code to

945
00:43:44,070 --> 00:43:47,730
be written just it's just for you to

946
00:43:45,839 --> 00:43:50,369
figure out how to actually push the

947
00:43:47,730 --> 00:43:52,080
right information into this API your

948
00:43:50,369 --> 00:43:54,150
primary goal in the end is to be able to

949
00:43:52,080 --> 00:43:56,549
take the telemetry data and use that to

950
00:43:54,150 --> 00:43:58,140
create events right and that's the

951
00:43:56,550 --> 00:44:00,030
second part but if you're able to get

952
00:43:58,140 --> 00:44:04,098
through this itself that's a it's very

953
00:44:00,030 --> 00:44:07,410
good learning on its own part all right

954
00:44:04,099 --> 00:44:09,660
so let's consider for example I'll add

955
00:44:07,410 --> 00:44:18,230
two paths three now let me explain what

956
00:44:09,660 --> 00:44:18,230
part three is if you go to add a to a

957
00:44:20,089 --> 00:44:23,790
sort of end of explaining all the

958
00:44:22,109 --> 00:44:26,119
different paths that are possible in a

959
00:44:23,790 --> 00:44:33,540
given topology right so this is part 1

960
00:44:26,119 --> 00:44:35,970
part 2 part 3 part 4 part 5 okay so you

961
00:44:33,540 --> 00:44:38,880
can potentially select any one path and

962
00:44:35,970 --> 00:44:40,529
create a label switch path for that so

963
00:44:38,880 --> 00:44:42,660
that your traffic only follows along

964
00:44:40,530 --> 00:44:45,450
that path right you're trying to

965
00:44:42,660 --> 00:44:47,220
engineer your traffic in real time so

966
00:44:45,450 --> 00:44:49,560
for example when I give you the example

967
00:44:47,220 --> 00:44:52,589
for part 3 and part 2 you're basically

968
00:44:49,560 --> 00:44:54,869
saying when you set a path 3 then the

969
00:44:52,589 --> 00:44:57,330
traffic will flow through here and only

970
00:44:54,869 --> 00:44:59,010
there if path 3 goes away traffic will

971
00:44:57,330 --> 00:45:00,750
again stop flowing because it requires

972
00:44:59,010 --> 00:45:01,460
that label-switched path to actually

973
00:45:00,750 --> 00:45:06,060
exist

974
00:45:01,460 --> 00:45:08,780
so let's actually try this so I'm going

975
00:45:06,060 --> 00:45:08,779
to try a path 3

976
00:45:13,850 --> 00:45:20,160
right so just ran and you see the things

977
00:45:18,150 --> 00:45:21,570
that started the things are going

978
00:45:20,160 --> 00:45:32,460
through because the LSP path was set up

979
00:45:21,570 --> 00:45:34,170
I can stop this again when I delete

980
00:45:32,460 --> 00:45:39,180
everything that I created on the router

981
00:45:34,170 --> 00:45:41,490
right and the ping stop so this is it's

982
00:45:39,180 --> 00:45:42,990
a very basic flow you can even create an

983
00:45:41,490 --> 00:45:45,540
app that literally looks at ping

984
00:45:42,990 --> 00:45:46,950
information right and that is able to

985
00:45:45,540 --> 00:45:48,300
feed into your controller as well you

986
00:45:46,950 --> 00:45:50,669
don't necessarily even need to look at

987
00:45:48,300 --> 00:45:53,400
telemetry information this is all about

988
00:45:50,670 --> 00:45:56,010
how you think about doing monitoring for

989
00:45:53,400 --> 00:45:57,420
real-time decisions either the

990
00:45:56,010 --> 00:45:58,860
information can come from the network

991
00:45:57,420 --> 00:46:00,930
which is what telemetry data gives you

992
00:45:58,860 --> 00:46:03,360
or the information can come from an

993
00:46:00,930 --> 00:46:04,830
application like a ping which tells you

994
00:46:03,360 --> 00:46:06,810
hey I'm not able to run and that's

995
00:46:04,830 --> 00:46:11,790
enough of an event for you to try and

996
00:46:06,810 --> 00:46:14,490
change the LSP path okay so I know these

997
00:46:11,790 --> 00:46:16,080
are fairly complicated things but I've

998
00:46:14,490 --> 00:46:17,850
tried to explain all of these in detail

999
00:46:16,080 --> 00:46:21,810
and as I mentioned the code is already

1000
00:46:17,850 --> 00:46:23,520
there right so if if you feel it's it's

1001
00:46:21,810 --> 00:46:25,770
too much just start off and you'll see

1002
00:46:23,520 --> 00:46:27,330
you will get into it ok and we are all

1003
00:46:25,770 --> 00:46:29,640
here to answer any questions that you

1004
00:46:27,330 --> 00:46:31,710
might have but in the end your goal is

1005
00:46:29,640 --> 00:46:34,290
have a single ansible playbook as I just

1006
00:46:31,710 --> 00:46:36,990
ran be able to write a controller that's

1007
00:46:34,290 --> 00:46:41,610
able to get the traffic to flow or shut

1008
00:46:36,990 --> 00:46:44,160
off as needed and for ztp get at least a

1009
00:46:41,610 --> 00:46:45,420
router to up and running right ideal

1010
00:46:44,160 --> 00:46:47,009
goal would be you create the

1011
00:46:45,420 --> 00:46:49,980
corresponding XML files and scripts for

1012
00:46:47,010 --> 00:46:51,090
all the routers but that is that means

1013
00:46:49,980 --> 00:46:52,530
that you have to convince your other

1014
00:46:51,090 --> 00:46:54,210
guys that you're willing to wipe their

1015
00:46:52,530 --> 00:46:56,910
config off which is probably not going

1016
00:46:54,210 --> 00:46:58,710
to happen so focus on at least an outer

1017
00:46:56,910 --> 00:46:59,879
two and get that running right and in

1018
00:46:58,710 --> 00:47:01,800
the end if you're able to do all routers

1019
00:46:59,880 --> 00:47:03,870
kudos to you there will be there will be

1020
00:47:01,800 --> 00:47:08,390
a pretty good demo all right any

1021
00:47:03,870 --> 00:47:08,390
questions yes

1022
00:47:12,079 --> 00:47:17,119
okay

1023
00:47:14,020 --> 00:47:17,119
[Music]

1024
00:47:19,500 --> 00:47:23,310
potentially I mean it's possible that

1025
00:47:21,630 --> 00:47:28,920
the connection from here itself is a

1026
00:47:23,310 --> 00:47:32,869
little slow so but yeah okay yeah that's

1027
00:47:28,920 --> 00:47:35,940
probably something have to consider okay

1028
00:47:32,869 --> 00:47:41,250
anything related to the code itself any

1029
00:47:35,940 --> 00:47:44,160
questions no all right let's get started

1030
00:47:41,250 --> 00:47:45,630
and we're all here right so whatever

1031
00:47:44,160 --> 00:47:47,819
questions you have if nothing something

1032
00:47:45,630 --> 00:47:56,700
doesn't work just let us know all right

1033
00:47:47,820 --> 00:48:01,440
thank you all right everyone start

1034
00:47:56,700 --> 00:48:03,980
dividing into teams if you're having any

1035
00:48:01,440 --> 00:48:08,640
problems finding or organizing a team

1036
00:48:03,980 --> 00:48:11,010
please see Steve or Vince or me over in

1037
00:48:08,640 --> 00:48:12,720
this corner if you're having any

1038
00:48:11,010 --> 00:48:15,720
problems setting up infrastructure

1039
00:48:12,720 --> 00:48:18,029
please visit the pseudo people at this

1040
00:48:15,720 --> 00:48:19,410
front table and then as you're moving on

1041
00:48:18,030 --> 00:48:23,700
to the hack itself if you're having

1042
00:48:19,410 --> 00:48:26,460
problems understanding the understanding

1043
00:48:23,700 --> 00:48:31,520
the the hack please see the Cisco people

1044
00:48:26,460 --> 00:48:34,650
over in that corner and just to be clear

1045
00:48:31,520 --> 00:48:37,470
this that was presented on is one option

1046
00:48:34,650 --> 00:48:40,260
for you to do you're not required to do

1047
00:48:37,470 --> 00:48:42,868
this hack we'd encourage you because we

1048
00:48:40,260 --> 00:48:44,040
know this this material better than

1049
00:48:42,869 --> 00:48:45,990
anything else that you might come up

1050
00:48:44,040 --> 00:48:49,080
with but you can work on whatever you

1051
00:48:45,990 --> 00:48:53,129
would like to you today any uh any other

1052
00:48:49,080 --> 00:48:55,710
questions alright we're gonna be around

1053
00:48:53,130 --> 00:48:58,260
to tables to to find out who's on the

1054
00:48:55,710 --> 00:49:00,000
team please once you've organized write

1055
00:48:58,260 --> 00:49:02,130
down there are sheets that have your pod

1056
00:49:00,000 --> 00:49:03,900
number please write down your team name

1057
00:49:02,130 --> 00:49:06,270
you can make up a name if you'd like and

1058
00:49:03,900 --> 00:49:07,530
write down your team members names and

1059
00:49:06,270 --> 00:49:11,210
then we'll be around to see how

1060
00:49:07,530 --> 00:49:11,210
everybody's doing all right

1061
00:49:11,960 --> 00:49:16,829
everyone just wanted to let you know 15

1062
00:49:14,849 --> 00:49:21,809
minutes and then we're gonna roll into

1063
00:49:16,829 --> 00:49:24,440
the presentations so 15 minutes all

1064
00:49:21,809 --> 00:49:26,940
right it's six o'clock

1065
00:49:24,440 --> 00:49:29,819
since everybody should be done at this

1066
00:49:26,940 --> 00:49:34,259
point we'll just go in order of teams

1067
00:49:29,819 --> 00:49:38,849
that are from pod number so could pod

1068
00:49:34,259 --> 00:49:41,220
three please come up okay so we are

1069
00:49:38,849 --> 00:49:43,890
neural clacks and we did we'll just talk

1070
00:49:41,220 --> 00:49:46,470
about briefly what we did today zero we

1071
00:49:43,890 --> 00:49:49,019
ran a ztp script but it was really only

1072
00:49:46,470 --> 00:49:52,078
basically doing show commands so we just

1073
00:49:49,019 --> 00:49:53,249
basically edited that and we had to do a

1074
00:49:52,079 --> 00:49:55,529
little bit of research on the reader

1075
00:49:53,249 --> 00:49:57,598
Docs page for NC client to see kind of

1076
00:49:55,529 --> 00:49:59,369
how to run the edit config and commit

1077
00:49:57,599 --> 00:50:01,650
methods so we were playing with that

1078
00:49:59,369 --> 00:50:05,069
once we figured out just some test cases

1079
00:50:01,650 --> 00:50:08,609
to get things going on that way we

1080
00:50:05,069 --> 00:50:14,609
installed requests we added request to

1081
00:50:08,609 --> 00:50:18,180
the required required pip binaries for

1082
00:50:14,609 --> 00:50:20,640
in the router and then the router would

1083
00:50:18,180 --> 00:50:22,558
then use requests to loop through we did

1084
00:50:20,640 --> 00:50:25,529
a for loop and just loop through all the

1085
00:50:22,559 --> 00:50:28,859
filenames the XML Docs be created to

1086
00:50:25,529 --> 00:50:32,249
just basically pull those from the ztp

1087
00:50:28,859 --> 00:50:34,609
server and this is the important bit of

1088
00:50:32,249 --> 00:50:36,930
that CTP script that we modified

1089
00:50:34,609 --> 00:50:39,690
basically there was a helper function

1090
00:50:36,930 --> 00:50:41,819
called get serial number we use to pull

1091
00:50:39,690 --> 00:50:46,140
the serial and then we made sure that

1092
00:50:41,819 --> 00:50:47,960
the requesting router was going into the

1093
00:50:46,140 --> 00:50:49,859
right folder to request the file and

1094
00:50:47,960 --> 00:50:53,549
then we basically just looped through

1095
00:50:49,859 --> 00:50:57,299
all of our files and used e tree from L

1096
00:50:53,549 --> 00:50:58,739
XML and then fed at that config we did a

1097
00:50:57,299 --> 00:51:02,940
couple print statements so we knew what

1098
00:50:58,739 --> 00:51:04,979
this script was doing and then wanted to

1099
00:51:02,940 --> 00:51:07,170
show you these are the actual XML files

1100
00:51:04,979 --> 00:51:10,200
that we wrote a couple of the ones were

1101
00:51:07,170 --> 00:51:13,499
provided for us but we just added these

1102
00:51:10,200 --> 00:51:15,839
to a couple of notes here we use the we

1103
00:51:13,499 --> 00:51:17,160
had to use the cisco XR model not the

1104
00:51:15,839 --> 00:51:19,109
open config model because we couldn't

1105
00:51:17,160 --> 00:51:22,078
get the open config model working with

1106
00:51:19,109 --> 00:51:23,910
the XR but we were able to use the open

1107
00:51:22,079 --> 00:51:26,099
config model for so many other Docs

1108
00:51:23,910 --> 00:51:33,710
and that's pretty much it for a zero

1109
00:51:26,099 --> 00:51:37,980
they want good evening everyone

1110
00:51:33,710 --> 00:51:39,450
we just robot we thought that is two

1111
00:51:37,980 --> 00:51:42,150
options given to us so one was the easy

1112
00:51:39,450 --> 00:51:46,379
way another one was using ydk so used

1113
00:51:42,150 --> 00:51:47,970
ydk to write get all the conflicts

1114
00:51:46,380 --> 00:51:50,130
populate the classes avoid EK and then

1115
00:51:47,970 --> 00:51:53,520
we wrote an animal model for that and

1116
00:51:50,130 --> 00:51:56,460
use that to provision the router four

1117
00:51:53,520 --> 00:52:01,349
and one and then then we started to spin

1118
00:51:56,460 --> 00:52:07,920
up the containers for ansible we can try

1119
00:52:01,349 --> 00:52:09,599
to so basically we we have not done the

1120
00:52:07,920 --> 00:52:12,180
ansible model for idempotency six so

1121
00:52:09,599 --> 00:52:14,280
it's going to reconfigure the step and

1122
00:52:12,180 --> 00:52:16,859
spin the containers up for the telemetry

1123
00:52:14,280 --> 00:52:19,190
and then further each ability checks

1124
00:52:16,859 --> 00:52:20,730
making sure that everything is fine

1125
00:52:19,190 --> 00:52:23,359
that's about it

1126
00:52:20,730 --> 00:52:23,359
thank you

1127
00:52:30,590 --> 00:52:35,910
so we just we just worked on setting up

1128
00:52:34,080 --> 00:52:41,310
the Jason's to manually configure the

1129
00:52:35,910 --> 00:52:43,770
LSPs so we wrote this the shell scripts

1130
00:52:41,310 --> 00:52:45,900
to interact with the JSON files to

1131
00:52:43,770 --> 00:52:50,970
actually configure the different LSPs

1132
00:52:45,900 --> 00:52:53,460
for each path we had to drive we had to

1133
00:52:50,970 --> 00:52:55,049
draw out every single path and the

1134
00:52:53,460 --> 00:52:58,200
labels that we wanted to choose because

1135
00:52:55,050 --> 00:53:00,450
it's kind of complicated to just think

1136
00:52:58,200 --> 00:53:02,279
about in your head without without

1137
00:53:00,450 --> 00:53:04,950
drawing it out first so I can just show

1138
00:53:02,280 --> 00:53:07,590
you for example how we would bring up

1139
00:53:04,950 --> 00:53:11,910
path to so path to is the blue path and

1140
00:53:07,590 --> 00:53:19,490
that's just between router 1 and 4 it's

1141
00:53:11,910 --> 00:53:23,069
still flickering okay oh there we go

1142
00:53:19,490 --> 00:53:25,220
yeah so if I run if I run the script to

1143
00:53:23,070 --> 00:53:25,220
add

1144
00:53:38,700 --> 00:53:45,620
so the script just added the LSB between

1145
00:53:41,220 --> 00:53:49,049
path one and two and if I go on the jump

1146
00:53:45,620 --> 00:53:52,250
the jump box I can I'll see the LSP in

1147
00:53:49,050 --> 00:53:52,250
that and the routing table hold on

1148
00:54:13,620 --> 00:54:16,400
what's up

1149
00:54:18,940 --> 00:54:21,480
the pressure

1150
00:54:42,790 --> 00:54:46,310
so if I go to if I go to router one I'll

1151
00:54:45,680 --> 00:54:49,868
see that

1152
00:54:46,310 --> 00:54:49,869
LSP that we just added

1153
00:55:01,620 --> 00:55:05,819
so you see we have the MPLS forwarding

1154
00:55:04,020 --> 00:55:08,610
label in there and if we look at the

1155
00:55:05,820 --> 00:55:14,210
route we should see that application

1156
00:55:08,610 --> 00:55:14,210
route in the routing table right here

1157
00:55:17,430 --> 00:55:24,089
I actually do not see it that's weird

1158
00:55:19,830 --> 00:55:26,279
okay anyway we had some issues before

1159
00:55:24,090 --> 00:55:30,840
when we are if we tried to add multiple

1160
00:55:26,280 --> 00:55:32,430
LSPs at the same time if you try to do

1161
00:55:30,840 --> 00:55:34,740
delete it would fail so you'd have to

1162
00:55:32,430 --> 00:55:38,100
delete them in the in the reverse order

1163
00:55:34,740 --> 00:55:40,649
that you added them because jeribai

1164
00:55:38,100 --> 00:55:42,720
doesn't let you add multiple LSPs with

1165
00:55:40,650 --> 00:55:55,200
the same destination on top of each

1166
00:55:42,720 --> 00:55:58,680
other so that's our presentation to

1167
00:55:55,200 --> 00:56:01,500
begin with for the day 0 so what we did

1168
00:55:58,680 --> 00:56:05,580
was we created the open config requests

1169
00:56:01,500 --> 00:56:08,910
for the interfaces configuring ipv6 ipv4

1170
00:56:05,580 --> 00:56:11,940
lldp loopback 0 and then we made

1171
00:56:08,910 --> 00:56:13,890
modifications to the easy TP script so

1172
00:56:11,940 --> 00:56:17,330
that it will it will download all the

1173
00:56:13,890 --> 00:56:21,210
xml's so it will download the CTP script

1174
00:56:17,330 --> 00:56:23,430
from the ztp server onto the router and

1175
00:56:21,210 --> 00:56:25,620
which will in turn download all these

1176
00:56:23,430 --> 00:56:28,410
open convey request files for

1177
00:56:25,620 --> 00:56:35,040
configuring the lldp interfaces and MPLS

1178
00:56:28,410 --> 00:56:38,160
hostname and G RPC requests and so these

1179
00:56:35,040 --> 00:56:40,620
are some of the screenshots so this is

1180
00:56:38,160 --> 00:56:42,990
to just clear the configurations

1181
00:56:40,620 --> 00:56:45,990
initially so we ran the retry manual

1182
00:56:42,990 --> 00:56:48,870
setp SH and which would clear all the

1183
00:56:45,990 --> 00:56:51,089
configurations and then that Logging's

1184
00:56:48,870 --> 00:56:56,600
show that that is GTP script has

1185
00:56:51,090 --> 00:57:00,570
completed successfully ok so after

1186
00:56:56,600 --> 00:57:02,779
downloading all the xml's that we have

1187
00:57:00,570 --> 00:57:06,030
created to configure the respective

1188
00:57:02,780 --> 00:57:08,220
configurations so we can see that the

1189
00:57:06,030 --> 00:57:11,280
device has been configured with the

1190
00:57:08,220 --> 00:57:15,899
loopback the all the other interfaces

1191
00:57:11,280 --> 00:57:18,120
and lldp as well as g RPC and MPLS so

1192
00:57:15,900 --> 00:57:21,030
the Lubeck 0 was missing in the guide

1193
00:57:18,120 --> 00:57:24,600
but we figured it out and then we

1194
00:57:21,030 --> 00:57:27,560
manually configured it so that's about

1195
00:57:24,600 --> 00:57:27,560
it for the day 0

1196
00:57:30,590 --> 00:57:37,050
Thanks right good evening everyone my

1197
00:57:35,490 --> 00:57:39,330
name is Anna Rock I worked on the day

1198
00:57:37,050 --> 00:57:41,220
one part just quick overview we

1199
00:57:39,330 --> 00:57:43,140
configure the BG ibgp sessions between

1200
00:57:41,220 --> 00:57:44,609
r1 and r4 it's pretty much

1201
00:57:43,140 --> 00:57:48,240
straightforward as per the documentation

1202
00:57:44,609 --> 00:57:50,190
we use the mid use of net conf and SSH

1203
00:57:48,240 --> 00:57:54,509
for the instable to speak to router and

1204
00:57:50,190 --> 00:57:57,119
make changes and we just spin a couple

1205
00:57:54,510 --> 00:58:01,560
of docker images to make sure that we

1206
00:57:57,119 --> 00:58:03,000
use open R and for the IGP and tested

1207
00:58:01,560 --> 00:58:05,160
the loopback reach ability with the

1208
00:58:03,000 --> 00:58:08,250
instable setup the docker image for

1209
00:58:05,160 --> 00:58:10,080
collecting data and combine all the all

1210
00:58:08,250 --> 00:58:11,670
the playbooks into a single provoked

1211
00:58:10,080 --> 00:58:13,740
that's what single playbook is like

1212
00:58:11,670 --> 00:58:15,960
pretty much straightforward just

1213
00:58:13,740 --> 00:58:18,118
importing all four playbook so the first

1214
00:58:15,960 --> 00:58:19,800
one configuring the ibgp sessions the

1215
00:58:18,119 --> 00:58:23,430
second one con bringing up the docker

1216
00:58:19,800 --> 00:58:25,710
for opener the third one spinning up the

1217
00:58:23,430 --> 00:58:27,029
telemetry and the fourth one just

1218
00:58:25,710 --> 00:58:30,020
checking the reach ability so and then

1219
00:58:27,030 --> 00:58:33,690
we just see that everything is reachable

1220
00:58:30,020 --> 00:58:36,930
the telemetry one we wrote from scratch

1221
00:58:33,690 --> 00:58:38,940
so here we are making sure that Kafka

1222
00:58:36,930 --> 00:58:41,819
Python is present so we meet we made use

1223
00:58:38,940 --> 00:58:44,490
of pip module in the PI R in the indents

1224
00:58:41,820 --> 00:58:46,920
able and install that we made sure that

1225
00:58:44,490 --> 00:58:49,529
docker is present and eventually we just

1226
00:58:46,920 --> 00:58:52,470
pull the pull the telemetry from this

1227
00:58:49,530 --> 00:58:55,440
image and mounted the volume for the

1228
00:58:52,470 --> 00:58:58,140
telemetry py and just in just ran it

1229
00:58:55,440 --> 00:59:01,410
with on the on the docker container as

1230
00:58:58,140 --> 00:59:04,080
as it came up in the end checking the

1231
00:59:01,410 --> 00:59:05,730
reach ability when we are after

1232
00:59:04,080 --> 00:59:07,799
finishing all this when we when we run

1233
00:59:05,730 --> 00:59:09,089
the run the entire playbook we just see

1234
00:59:07,800 --> 00:59:10,710
that everything is reachable the

1235
00:59:09,089 --> 00:59:12,500
loopback reach ability is fine and it

1236
00:59:10,710 --> 00:59:18,950
confirms things are working

1237
00:59:12,500 --> 00:59:22,890
proceed with the day so day two was

1238
00:59:18,950 --> 00:59:25,169
involved using a gr ibi as a interface

1239
00:59:22,890 --> 00:59:27,118
connector to make changes to the rib and

1240
00:59:25,170 --> 00:59:28,920
the routing table on the routers so

1241
00:59:27,119 --> 00:59:30,660
there is one example that included path

1242
00:59:28,920 --> 00:59:32,430
3 which is the green one down here and

1243
00:59:30,660 --> 00:59:34,440
then the challenge was basically to

1244
00:59:32,430 --> 00:59:37,950
figure out how to modify the next hop

1245
00:59:34,440 --> 00:59:40,250
addresses and interfaces and MPLS labels

1246
00:59:37,950 --> 00:59:43,470
to complete the other paths

1247
00:59:40,250 --> 00:59:45,540
it's all done over RPC calls there was a

1248
00:59:43,470 --> 00:59:47,430
particular bit of config on the routers

1249
00:59:45,540 --> 00:59:51,440
that allowed this on port five seven

1250
00:59:47,430 --> 00:59:54,810
seven seven here you can kind of see

1251
00:59:51,440 --> 00:59:59,130
traceroute from dev to to dev one the

1252
00:59:54,810 --> 01:00:01,710
top instance is going from router 1 up

1253
00:59:59,130 --> 01:00:03,660
to router 2 and then down to a router

1254
01:00:01,710 --> 01:00:05,820
for well you can see the extra hop in

1255
01:00:03,660 --> 01:00:08,480
there and then the lower one is a direct

1256
01:00:05,820 --> 01:00:12,900
route between router 1 and router for

1257
01:00:08,480 --> 01:00:16,470
basically depending on which script you

1258
01:00:12,900 --> 01:00:19,470
pushed you could modify the the rip it C

1259
01:00:16,470 --> 01:00:21,899
and also a push and pop the MPLS labels

1260
01:00:19,470 --> 01:00:23,879
so in this case this was the direct

1261
01:00:21,900 --> 01:00:26,310
route between router 1 and router 4 or

1262
01:00:23,880 --> 01:00:28,710
in this case this was the route that

1263
01:00:26,310 --> 01:00:30,810
went between router 1 up to router 2 and

1264
01:00:28,710 --> 01:00:33,680
then over to router 4 and you can see

1265
01:00:30,810 --> 01:00:37,650
here where where router 2 basically like

1266
01:00:33,680 --> 01:00:40,830
pushes the different labels onto the

1267
01:00:37,650 --> 01:00:42,780
routes the kind of stretch goal at the

1268
01:00:40,830 --> 01:00:44,790
end was to turn this into like an

1269
01:00:42,780 --> 01:00:48,810
automated controller so you could use

1270
01:00:44,790 --> 01:00:51,120
the the telemetry data to basically

1271
01:00:48,810 --> 01:00:53,310
notice like topology changes in the

1272
01:00:51,120 --> 01:00:56,009
network and then based on those topology

1273
01:00:53,310 --> 01:00:57,600
changes if an interface went down you

1274
01:00:56,010 --> 01:00:58,890
could then you know trigger one of these

1275
01:00:57,600 --> 01:01:01,020
scripts to run that would change the

1276
01:00:58,890 --> 01:01:04,160
path so that was kind of the the last

1277
01:01:01,020 --> 01:01:04,160
bit of it

1278
01:01:10,880 --> 01:01:22,940
yeah and I think that's it so we did

1279
01:01:21,020 --> 01:01:26,509
something a little different instead of

1280
01:01:22,940 --> 01:01:32,480
the the challenge that was presented

1281
01:01:26,510 --> 01:01:35,050
we did some ansible with OpenBSD so how

1282
01:01:32,480 --> 01:01:39,170
many people have used OpenBSD before

1283
01:01:35,050 --> 01:01:42,710
curiosity okay so people that have used

1284
01:01:39,170 --> 01:01:45,950
it before you probably know that they

1285
01:01:42,710 --> 01:01:48,260
only release a CD with the current

1286
01:01:45,950 --> 01:01:50,419
packages current packages are never

1287
01:01:48,260 --> 01:01:53,090
updated and also the system is never

1288
01:01:50,420 --> 01:01:54,710
updated as far as the ISO goes so you

1289
01:01:53,090 --> 01:01:57,410
have to manually patch the system

1290
01:01:54,710 --> 01:01:59,300
yourself or run sis patch which for an

1291
01:01:57,410 --> 01:02:02,990
automated deployment really is not that

1292
01:01:59,300 --> 01:02:04,640
great ansible didn't have a why OpenBSD

1293
01:02:02,990 --> 01:02:09,410
because it's awesome and it has a great

1294
01:02:04,640 --> 01:02:11,720
firewall you can have end device session

1295
01:02:09,410 --> 01:02:15,170
sync and end device IP failover and load

1296
01:02:11,720 --> 01:02:18,410
balancing as far as the problems back to

1297
01:02:15,170 --> 01:02:20,630
what I was saying so there's no real

1298
01:02:18,410 --> 01:02:24,500
good way to deploy OpenBSD in an

1299
01:02:20,630 --> 01:02:28,420
automated manner so what we set out is

1300
01:02:24,500 --> 01:02:32,840
to fix at least some of these problems

1301
01:02:28,420 --> 01:02:36,830
so what we did today was we created

1302
01:02:32,840 --> 01:02:41,510
three ansible modules the first one is

1303
01:02:36,830 --> 01:02:43,880
open BSD sis patch which takes the takes

1304
01:02:41,510 --> 01:02:47,770
the patches that are in current open BSD

1305
01:02:43,880 --> 01:02:51,950
stable branch and applies them to a

1306
01:02:47,770 --> 01:02:53,720
device it can also revert them that

1307
01:02:51,950 --> 01:02:55,009
module is currently fully tested and

1308
01:02:53,720 --> 01:02:58,970
everything works

1309
01:02:55,010 --> 01:03:01,850
we also made two other modules to kind

1310
01:02:58,970 --> 01:03:04,939
of get toward a H a firewall deployment

1311
01:03:01,850 --> 01:03:06,319
the first one is open BSD carp which if

1312
01:03:04,940 --> 01:03:10,550
you're familiar with burp is a very

1313
01:03:06,320 --> 01:03:13,220
similar protocol but it's a little

1314
01:03:10,550 --> 01:03:16,960
different and then PF sync is the

1315
01:03:13,220 --> 01:03:20,000
session state between multiple firewalls

1316
01:03:16,960 --> 01:03:22,370
so the code is currently available at

1317
01:03:20,000 --> 01:03:23,800
github we plan on doing pull requests

1318
01:03:22,370 --> 01:03:27,940
for them later but

1319
01:03:23,800 --> 01:03:30,640
not done that yet so for the first

1320
01:03:27,940 --> 01:03:32,500
module says patch all it does is take

1321
01:03:30,640 --> 01:03:35,520
one variable state you can either give

1322
01:03:32,500 --> 01:03:39,480
it latest revert will revert a single

1323
01:03:35,520 --> 01:03:44,830
patch and revert all over all of them

1324
01:03:39,480 --> 01:03:47,200
the carp you give it a the variables you

1325
01:03:44,830 --> 01:03:50,110
need to create a carpenter face it does

1326
01:03:47,200 --> 01:03:55,390
it and then the same thing for PF sync

1327
01:03:50,110 --> 01:04:02,400
basically just a sync device and that's

1328
01:03:55,390 --> 01:04:02,400
about it so we can try a live demo

1329
01:04:11,910 --> 01:04:15,960
all right so I don't know if anybody can

1330
01:04:13,799 --> 01:04:18,809
see this but we do have a current

1331
01:04:15,960 --> 01:04:24,119
OpenBSD system here if we do this patch

1332
01:04:18,809 --> 01:04:31,609
- L will see there currently 10 patches

1333
01:04:24,119 --> 01:04:31,609
applied and we do the same thing

1334
01:04:42,490 --> 01:04:47,459
we'll see that there are some available

1335
01:04:44,460 --> 01:04:47,460
caches

1336
01:05:02,570 --> 01:05:07,730
so this will rerun the PlayBook on the

1337
01:05:05,840 --> 01:05:08,960
Baker clothes so right now the first

1338
01:05:07,730 --> 01:05:13,580
thing it's going to do is revert all

1339
01:05:08,960 --> 01:05:14,690
caches we go over here I'll see what

1340
01:05:13,580 --> 01:05:18,470
they're apparently don't that's just

1341
01:05:14,690 --> 01:05:27,050
play thanks think of deuce like latest

1342
01:05:18,470 --> 01:05:30,910
patches which things take a second but

1343
01:05:27,050 --> 01:05:30,910
you can see as it is applying patches

1344
01:05:47,280 --> 01:05:54,060
so once or twice old pensions will give

1345
01:05:49,560 --> 01:05:57,870
us the output the second gives you all

1346
01:05:54,060 --> 01:06:00,240
the system the standard error standard

1347
01:05:57,870 --> 01:06:02,580
out return codes for command run along

1348
01:06:00,240 --> 01:06:06,410
with like a summary which patches were

1349
01:06:02,580 --> 01:06:06,410
changed and

1350
01:06:16,550 --> 01:06:22,940
okay so there's no carpet interface

1351
01:06:20,520 --> 01:06:22,940
right now

1352
01:06:28,820 --> 01:06:33,200
and others

1353
01:06:31,510 --> 01:06:36,430
so

1354
01:06:33,200 --> 01:06:39,319
that's what we have future work would be

1355
01:06:36,430 --> 01:06:58,009
setting up the firewall for the roaming

1356
01:06:39,319 --> 01:07:01,849
static packages hi we are fab for myself

1357
01:06:58,010 --> 01:07:03,950
Rishikesh shadi sri me and Alex so we

1358
01:07:01,849 --> 01:07:06,109
were working on this course project

1359
01:07:03,950 --> 01:07:08,180
where we had to do a ztp first and then

1360
01:07:06,109 --> 01:07:10,430
upon the automation of ztp where it

1361
01:07:08,180 --> 01:07:12,259
automatically reloads the device to

1362
01:07:10,430 --> 01:07:13,578
complete zero eyes and then bring it

1363
01:07:12,260 --> 01:07:15,589
back with the complete configuration

1364
01:07:13,579 --> 01:07:18,170
where we would configure our - if we're

1365
01:07:15,589 --> 01:07:19,520
also going to do r1 and r3 but there was

1366
01:07:18,170 --> 01:07:21,170
another person also working on our three

1367
01:07:19,520 --> 01:07:23,030
we didn't want to disturb that so that

1368
01:07:21,170 --> 01:07:25,040
would be our future work now after

1369
01:07:23,030 --> 01:07:26,420
configuring using ztp the next thing

1370
01:07:25,040 --> 01:07:28,369
that was read at elementary using

1371
01:07:26,420 --> 01:07:30,440
ansible we didn't get to the part where

1372
01:07:28,369 --> 01:07:32,960
telemetry was implemented but we had the

1373
01:07:30,440 --> 01:07:34,970
part where ansible was used in order to

1374
01:07:32,960 --> 01:07:37,040
configure bgp on the required routers

1375
01:07:34,970 --> 01:07:38,779
and then at the end of it our future

1376
01:07:37,040 --> 01:07:41,390
work was to implement elementary so that

1377
01:07:38,780 --> 01:07:42,859
day to build into a lot of data we need

1378
01:07:41,390 --> 01:07:44,900
a day to air part we understood how the

1379
01:07:42,859 --> 01:07:47,660
script would function to add a basic LSP

1380
01:07:44,900 --> 01:07:49,910
that would be used to configure the path

1381
01:07:47,660 --> 01:07:53,839
accordingly we require but the achieved

1382
01:07:49,910 --> 01:07:55,250
a stood a word a0 and a1 eyelet fini

1383
01:07:53,839 --> 01:07:59,299
continue with the day zero and come back

1384
01:07:55,250 --> 01:08:01,790
okay hey guys so for day zero pretty

1385
01:07:59,299 --> 01:08:04,190
much the first step was like having the

1386
01:08:01,790 --> 01:08:06,710
setup ready so we made sure all the

1387
01:08:04,190 --> 01:08:09,770
devices were up a crowd one row to all

1388
01:08:06,710 --> 01:08:12,619
the four devices the CDP I mean during

1389
01:08:09,770 --> 01:08:14,420
this operation route one was like down

1390
01:08:12,619 --> 01:08:16,460
which we were trying to troubleshoot and

1391
01:08:14,420 --> 01:08:18,980
we which was not the use case but

1392
01:08:16,460 --> 01:08:20,899
eventually that came back up and we

1393
01:08:18,979 --> 01:08:24,229
started with router 2 so the first step

1394
01:08:20,899 --> 01:08:26,000
was we were kind of debating which XML

1395
01:08:24,229 --> 01:08:27,889
templates to use whether to use the open

1396
01:08:26,000 --> 01:08:29,988
config interfaces yang model or the

1397
01:08:27,890 --> 01:08:32,359
cisco ones because on online we were

1398
01:08:29,988 --> 01:08:35,238
trying to find most of the yang models

1399
01:08:32,359 --> 01:08:38,000
that were used from the Cisco model yang

1400
01:08:35,238 --> 01:08:40,068
model so and then eventually we stopped

1401
01:08:38,000 --> 01:08:42,380
eventually we made the open configure

1402
01:08:40,069 --> 01:08:44,179
interfaces the yang model work so we

1403
01:08:42,380 --> 01:08:45,710
created those two templates and then we

1404
01:08:44,179 --> 01:08:48,410
started editing the

1405
01:08:45,710 --> 01:08:52,730
GDP client script so in this basically

1406
01:08:48,410 --> 01:08:55,729
two steps one is making sure you have

1407
01:08:52,729 --> 01:08:58,160
the logic so that the XML all the XML

1408
01:08:55,729 --> 01:09:00,830
files that you have created that is

1409
01:08:58,160 --> 01:09:02,960
whence the DX equal process starts gets

1410
01:09:00,830 --> 01:09:04,700
downloaded onto the device and then it

1411
01:09:02,960 --> 01:09:07,160
starts calling each of these conflict

1412
01:09:04,700 --> 01:09:09,200
templates to configure the device and

1413
01:09:07,160 --> 01:09:11,299
then we did the testing of the CTP

1414
01:09:09,200 --> 01:09:14,689
process the way we did it was instead of

1415
01:09:11,299 --> 01:09:17,540
using the refresh or like the repair

1416
01:09:14,689 --> 01:09:20,419
that is probably why the console we what

1417
01:09:17,540 --> 01:09:23,299
we did was like configure replace that

1418
01:09:20,420 --> 01:09:26,660
basically replaces the entire device

1419
01:09:23,299 --> 01:09:28,640
convicts erases it and then it does the

1420
01:09:26,660 --> 01:09:31,009
bootstrap basically calls in DHCP and

1421
01:09:28,640 --> 01:09:32,989
then calls in all this config files if

1422
01:09:31,009 --> 01:09:37,479
we were able to achieve that I have a

1423
01:09:32,988 --> 01:09:37,479
couple of screenshots if you want to

1424
01:09:38,950 --> 01:09:45,469
okay so as she needs talk about these

1425
01:09:42,649 --> 01:09:49,009
were the open open config.xml that we

1426
01:09:45,469 --> 01:09:50,630
created one for lldp and one for the

1427
01:09:49,009 --> 01:09:52,880
interfaces the interfaces were pretty

1428
01:09:50,630 --> 01:09:54,650
difficult to found actually but we were

1429
01:09:52,880 --> 01:09:57,140
able to get it done and then later on

1430
01:09:54,650 --> 01:10:00,920
the way we actually extracted the XML

1431
01:09:57,140 --> 01:10:02,540
was the ztp script already had a get

1432
01:10:00,920 --> 01:10:04,910
serial number method so what we

1433
01:10:02,540 --> 01:10:07,060
basically did was I created a serial

1434
01:10:04,910 --> 01:10:09,769
number kind of variable in order to

1435
01:10:07,060 --> 01:10:11,930
create an object of the gets of the

1436
01:10:09,770 --> 01:10:13,790
class that they already gave us and then

1437
01:10:11,930 --> 01:10:15,560
extract the method using that and then

1438
01:10:13,790 --> 01:10:17,060
if you can see the host name that's

1439
01:10:15,560 --> 01:10:19,040
actually the router hostname that I'm

1440
01:10:17,060 --> 01:10:20,570
getting from the map which is also

1441
01:10:19,040 --> 01:10:20,930
present in the script that they provided

1442
01:10:20,570 --> 01:10:23,330
us

1443
01:10:20,930 --> 01:10:26,930
so I basically did a for loop to go

1444
01:10:23,330 --> 01:10:29,120
through all the all the contents of the

1445
01:10:26,930 --> 01:10:30,890
map and then if you see the XML

1446
01:10:29,120 --> 01:10:32,900
underscore URL that will generate a URL

1447
01:10:30,890 --> 01:10:35,300
which will be used later on to do add up

1448
01:10:32,900 --> 01:10:37,429
using ray I actually use requests in

1449
01:10:35,300 --> 01:10:40,040
order to get all the eczemas present in

1450
01:10:37,430 --> 01:10:42,590
that particular URL so it'll return all

1451
01:10:40,040 --> 01:10:44,510
the xml's from that particular place and

1452
01:10:42,590 --> 01:10:46,820
then at the same time create a file and

1453
01:10:44,510 --> 01:10:49,070
store it in the local directory where

1454
01:10:46,820 --> 01:10:51,950
the code is running from this basically

1455
01:10:49,070 --> 01:10:54,200
extracts of different files creates a

1456
01:10:51,950 --> 01:10:57,230
new file with the same name of the XML

1457
01:10:54,200 --> 01:11:00,490
that's how we extracted the values and

1458
01:10:57,230 --> 01:11:03,290
then if you can see here

1459
01:11:00,490 --> 01:11:05,080
so this is basically and then the main

1460
01:11:03,290 --> 01:11:07,460
thing was we used a manager which was

1461
01:11:05,080 --> 01:11:09,019
two things were happening here the

1462
01:11:07,460 --> 01:11:11,060
script that they provided is already

1463
01:11:09,020 --> 01:11:13,820
interacting with NCC Client Manager the

1464
01:11:11,060 --> 01:11:15,350
main one and they are all also have

1465
01:11:13,820 --> 01:11:16,700
another object we basically imported

1466
01:11:15,350 --> 01:11:19,070
their object so that it also imports

1467
01:11:16,700 --> 01:11:21,050
census a client manager and the NCC

1468
01:11:19,070 --> 01:11:23,000
client manager has edit conflict get

1469
01:11:21,050 --> 01:11:25,070
conflict in order to either get the

1470
01:11:23,000 --> 01:11:26,660
running config or edit into the running

1471
01:11:25,070 --> 01:11:28,309
conflict create a new config basically

1472
01:11:26,660 --> 01:11:31,730
so what we did was edit underscore

1473
01:11:28,310 --> 01:11:35,270
conflict and I as I said earlier we

1474
01:11:31,730 --> 01:11:38,360
created a couple of files from the ztp

1475
01:11:35,270 --> 01:11:40,280
linux server using those examples we

1476
01:11:38,360 --> 01:11:41,599
just read through them and then as we

1477
01:11:40,280 --> 01:11:43,849
read through them we also configured

1478
01:11:41,600 --> 01:11:45,950
them one difficult thing we missed was

1479
01:11:43,850 --> 01:11:47,780
view didn't we didn't actually committed

1480
01:11:45,950 --> 01:11:49,849
in the first because of which the

1481
01:11:47,780 --> 01:11:51,380
request was a success but it was not

1482
01:11:49,850 --> 01:11:52,640
actually committing the configuration so

1483
01:11:51,380 --> 01:11:54,260
it would have exit out and we would

1484
01:11:52,640 --> 01:11:56,690
still not see the configuration so the

1485
01:11:54,260 --> 01:11:58,970
moment we did in GNC manager dot commit

1486
01:11:56,690 --> 01:12:00,650
the request completed that actually

1487
01:11:58,970 --> 01:12:03,170
committed the conflict and we had a

1488
01:12:00,650 --> 01:12:05,120
successful open a successful ztp process

1489
01:12:03,170 --> 01:12:06,440
but a sheeny said the way we tested was

1490
01:12:05,120 --> 01:12:08,900
completely different we didn't do the

1491
01:12:06,440 --> 01:12:14,120
regular repair mode in the teller star

1492
01:12:08,900 --> 01:12:16,040
console so what we basically did was we

1493
01:12:14,120 --> 01:12:17,630
did commit replace zero is the box and

1494
01:12:16,040 --> 01:12:20,269
then run the CD player then just

1495
01:12:17,630 --> 01:12:22,790
reloaded the box it'll get a DHCP IP

1496
01:12:20,270 --> 01:12:24,290
boot up with the entire CTP config and

1497
01:12:22,790 --> 01:12:25,610
give us a so it's basically hands-off

1498
01:12:24,290 --> 01:12:27,590
process you just have to reload and I

1499
01:12:25,610 --> 01:12:29,599
will do everything so I'll let I'll give

1500
01:12:27,590 --> 01:12:36,110
Alex a chance to actually go through

1501
01:12:29,600 --> 01:12:39,770
that yeah so they won so that one was

1502
01:12:36,110 --> 01:12:43,339
about Cetina bgp with soap and coffee

1503
01:12:39,770 --> 01:12:47,360
and territory so we didn't do telemetry

1504
01:12:43,340 --> 01:12:51,350
but I will talk about BGP and what we do

1505
01:12:47,360 --> 01:12:55,370
what we did so we create a new on Siebel

1506
01:12:51,350 --> 01:12:59,600
with the basic config management IP and

1507
01:12:55,370 --> 01:13:02,540
all the neighbors we needed so the thing

1508
01:12:59,600 --> 01:13:07,610
is we want to have an inventory which

1509
01:13:02,540 --> 01:13:09,800
was a source of the backbone so if I

1510
01:13:07,610 --> 01:13:10,759
remove a neighbor I will remove to all

1511
01:13:09,800 --> 01:13:16,369
my peers

1512
01:13:10,760 --> 01:13:21,440
and that so I create a Python file based

1513
01:13:16,369 --> 01:13:24,409
on what we add the thing is we can chain

1514
01:13:21,440 --> 01:13:26,089
from Cisco to gene pelvises Buyten with

1515
01:13:24,409 --> 01:13:29,539
only I open coffee

1516
01:13:26,090 --> 01:13:31,969
if juniper and Cisco use the same

1517
01:13:29,539 --> 01:13:35,090
attributes because under this basic it's

1518
01:13:31,969 --> 01:13:39,920
simple but if you want to use some

1519
01:13:35,090 --> 01:13:43,820
policies it can be tricky so after that

1520
01:13:39,920 --> 01:13:46,519
we just did some playbook and have two

1521
01:13:43,820 --> 01:13:49,090
tasks so the task was to configure BGP

1522
01:13:46,519 --> 01:13:52,280
and the second was to ping the backs as

1523
01:13:49,090 --> 01:13:56,329
we didn't put the IGP it it wasn't

1524
01:13:52,280 --> 01:14:04,250
walking as a ping low back that's it so

1525
01:13:56,329 --> 01:14:06,619
even I think we don't have any time so

1526
01:14:04,250 --> 01:14:08,059
to tell that the day two we just started

1527
01:14:06,619 --> 01:14:09,650
understanding the situation's of future

1528
01:14:08,059 --> 01:14:11,840
work would be used a telemetry data from

1529
01:14:09,650 --> 01:14:13,039
day one and we were pretty much on a

1530
01:14:11,840 --> 01:14:14,929
basic approach you were thinking of

1531
01:14:13,039 --> 01:14:16,639
using ping in order to ping between the

1532
01:14:14,929 --> 01:14:18,800
different devices and if ping fails so

1533
01:14:16,639 --> 01:14:20,420
one it automatically creates a request

1534
01:14:18,800 --> 01:14:22,400
for the Nextel SVP but we couldn't able

1535
01:14:20,420 --> 01:14:23,989
to do that other than that we learned a

1536
01:14:22,400 --> 01:14:26,379
lot through this exercise for day zero

1537
01:14:23,989 --> 01:14:33,709
and day one thank you so much

1538
01:14:26,380 --> 01:14:33,709
[Applause]

1539
01:14:33,840 --> 01:14:41,679
all right I was on the team that was

1540
01:14:37,929 --> 01:14:45,190
heading up the day zero we started where

1541
01:14:41,679 --> 01:14:49,690
everybody else said was trying to update

1542
01:14:45,190 --> 01:15:01,900
the CDP NCC pretend there's a screenshot

1543
01:14:49,690 --> 01:15:03,428
here starting we tried to follow the

1544
01:15:01,900 --> 01:15:06,699
instructions as best we could we started

1545
01:15:03,429 --> 01:15:08,949
with the interfaces and the LDP we ran

1546
01:15:06,699 --> 01:15:11,919
into the same issue where we couldn't

1547
01:15:08,949 --> 01:15:14,919
get the open config model to work

1548
01:15:11,920 --> 01:15:19,420
properly with the box we were striving

1549
01:15:14,920 --> 01:15:20,739
to keep the rules used open config we

1550
01:15:19,420 --> 01:15:22,770
never ended up getting it to work

1551
01:15:20,739 --> 01:15:22,769
properly

1552
01:15:23,670 --> 01:15:26,670
yay

1553
01:15:34,329 --> 01:15:39,610
so yeah so we updated for the those two

1554
01:15:36,579 --> 01:15:41,349
the interfaces of C because they we

1555
01:15:39,610 --> 01:15:43,750
couldn't get those to work properly but

1556
01:15:41,349 --> 01:15:48,579
we did get the other three to work we

1557
01:15:43,750 --> 01:15:52,329
updated the CDP functions to include the

1558
01:15:48,579 --> 01:15:55,690
opening of the files and then loading

1559
01:15:52,329 --> 01:15:58,090
him directly into the config what was

1560
01:15:55,690 --> 01:15:59,799
really and I'll get into it was really

1561
01:15:58,090 --> 01:16:01,810
good as we actually committed on every

1562
01:15:59,800 --> 01:16:05,139
single snippet which helped us

1563
01:16:01,810 --> 01:16:07,780
troubleshoot later on this is us later

1564
01:16:05,139 --> 01:16:10,210
on an actual script we get the serial

1565
01:16:07,780 --> 01:16:13,780
number and then we go through we're

1566
01:16:10,210 --> 01:16:16,239
actually just getting using the the raw

1567
01:16:13,780 --> 01:16:18,790
shell command to W get the off the

1568
01:16:16,239 --> 01:16:20,650
server the snippets of config and then

1569
01:16:18,790 --> 01:16:24,760
we were calling that function again

1570
01:16:20,650 --> 01:16:28,420
every time so what worked the open

1571
01:16:24,760 --> 01:16:29,800
config example that were provided loaded

1572
01:16:28,420 --> 01:16:31,900
properly so that was great

1573
01:16:29,800 --> 01:16:33,460
our team was nice even when we couldn't

1574
01:16:31,900 --> 01:16:34,869
get the interfaces to work they didn't

1575
01:16:33,460 --> 01:16:37,210
they didn't get really mad at us so that

1576
01:16:34,869 --> 01:16:38,829
was good and actually committing after

1577
01:16:37,210 --> 01:16:40,150
each stanza was really helpful during

1578
01:16:38,829 --> 01:16:42,909
troubleshooting because we could verify

1579
01:16:40,150 --> 01:16:44,440
that the hostname was being configured

1580
01:16:42,909 --> 01:16:47,379
that the G RPC is being configured

1581
01:16:44,440 --> 01:16:50,169
everything was being set and we didn't

1582
01:16:47,380 --> 01:16:52,659
have just one blob of XML that we had to

1583
01:16:50,170 --> 01:16:54,550
parse through so that was good what

1584
01:16:52,659 --> 01:16:56,500
didn't work was we had a tough time

1585
01:16:54,550 --> 01:16:59,829
understanding the correlation between

1586
01:16:56,500 --> 01:17:02,829
the open config model and what the Cisco

1587
01:16:59,829 --> 01:17:05,019
device actually needed so when it got to

1588
01:17:02,829 --> 01:17:07,869
configuring the interfaces we were kind

1589
01:17:05,020 --> 01:17:09,159
of stumped troubleshooting the ztp was a

1590
01:17:07,869 --> 01:17:11,079
little bit tough because we couldn't

1591
01:17:09,159 --> 01:17:13,239
understand over console all of the

1592
01:17:11,079 --> 01:17:14,559
messages reading properly you guys have

1593
01:17:13,239 --> 01:17:15,940
been on console before you know that

1594
01:17:14,560 --> 01:17:18,760
sometimes the mess you can't scroll back

1595
01:17:15,940 --> 01:17:20,559
on the messages so we could have done a

1596
01:17:18,760 --> 01:17:23,949
better job and I'll get into what we're

1597
01:17:20,560 --> 01:17:25,540
going to do next time and then there

1598
01:17:23,949 --> 01:17:27,280
were some errors we realized the same

1599
01:17:25,540 --> 01:17:28,480
thing that the loopback interface wasn't

1600
01:17:27,280 --> 01:17:32,619
being configured so every time we

1601
01:17:28,480 --> 01:17:35,650
committed it would cut off the the ncnc

1602
01:17:32,619 --> 01:17:37,179
client which is an issue and then

1603
01:17:35,650 --> 01:17:40,269
resetting and restarting the entire

1604
01:17:37,179 --> 01:17:42,219
thing for the UI was pretty pretty rough

1605
01:17:40,270 --> 01:17:43,750
we're also getting a lot of default

1606
01:17:42,219 --> 01:17:45,190
messages of hackers trying to log in

1607
01:17:43,750 --> 01:17:49,300
using random names

1608
01:17:45,190 --> 01:17:50,879
is a difficult scent red hangs for us so

1609
01:17:49,300 --> 01:17:55,060
for next time we're gonna read up on the

1610
01:17:50,880 --> 01:17:56,320
an actual how ztp works on the iOS XR so

1611
01:17:55,060 --> 01:17:58,690
that we understand better where we

1612
01:17:56,320 --> 01:18:01,330
should can fit in the the stuff that we

1613
01:17:58,690 --> 01:18:03,009
needed to do to get it configured study

1614
01:18:01,330 --> 01:18:04,870
a little bit better on the open config

1615
01:18:03,010 --> 01:18:06,910
model and how it relates that iOS X are

1616
01:18:04,870 --> 01:18:07,900
setting up that syslog server at the

1617
01:18:06,910 --> 01:18:10,030
very first probably would have been

1618
01:18:07,900 --> 01:18:12,190
pretty helpful and then do better

1619
01:18:10,030 --> 01:18:13,269
logging within the script itself so we

1620
01:18:12,190 --> 01:18:18,940
could understand the outputs that were

1621
01:18:13,270 --> 01:18:21,400
coming out so for day one we were able

1622
01:18:18,940 --> 01:18:24,580
to configure the BGP sessions through

1623
01:18:21,400 --> 01:18:26,799
open config how many actually did all

1624
01:18:24,580 --> 01:18:32,170
this part in at the end everything was

1625
01:18:26,800 --> 01:18:33,790
was working we also so had a little off

1626
01:18:32,170 --> 01:18:34,810
script so we actually noticed that the

1627
01:18:33,790 --> 01:18:38,110
ansible

1628
01:18:34,810 --> 01:18:40,420
repo was using a lot of scripting what

1629
01:18:38,110 --> 01:18:42,400
was not using the native module so we

1630
01:18:40,420 --> 01:18:46,210
actually redesigned the old and simple

1631
01:18:42,400 --> 01:18:48,549
project to use the older native and

1632
01:18:46,210 --> 01:18:51,010
civil module for darker and all of that

1633
01:18:48,550 --> 01:18:53,140
we were using for example the instead of

1634
01:18:51,010 --> 01:18:55,750
having one file for adder we are using

1635
01:18:53,140 --> 01:18:58,810
templates and so we are able to deploy

1636
01:18:55,750 --> 01:19:01,360
open are using alternative modules and

1637
01:18:58,810 --> 01:19:05,469
without having any Python script running

1638
01:19:01,360 --> 01:19:08,469
directly that was pretty nice we also

1639
01:19:05,469 --> 01:19:10,480
wrote a Python script that was listening

1640
01:19:08,469 --> 01:19:13,630
on the Kefka bus and that send

1641
01:19:10,480 --> 01:19:16,360
information to a temporary database and

1642
01:19:13,630 --> 01:19:22,270
so later on the demo will show you how

1643
01:19:16,360 --> 01:19:23,620
how that works and so for the day too

1644
01:19:22,270 --> 01:19:26,020
and I think it's the most interesting

1645
01:19:23,620 --> 01:19:29,650
parts we actually managed to have a full

1646
01:19:26,020 --> 01:19:31,870
day to working so the team set up some a

1647
01:19:29,650 --> 01:19:33,639
controller that kept track of all the

1648
01:19:31,870 --> 01:19:37,420
paths and interfaces and was able to

1649
01:19:33,640 --> 01:19:38,530
listen to the bus and as just as the

1650
01:19:37,420 --> 01:19:40,540
last part we're going to show you a

1651
01:19:38,530 --> 01:19:44,040
little demo where you will actually shut

1652
01:19:40,540 --> 01:19:48,460
off shut up shut off in one interface

1653
01:19:44,040 --> 01:19:54,210
and we should be able to show you the

1654
01:19:48,460 --> 01:19:54,210
traffic getting

1655
01:19:55,100 --> 01:20:00,330
so right now you can see the traffic is

1656
01:19:57,510 --> 01:20:01,680
actually going on this interface and it

1657
01:20:00,330 --> 01:20:03,420
won't shut down this interface in the

1658
01:20:01,680 --> 01:20:05,370
traffic automatically basically it on

1659
01:20:03,420 --> 01:20:07,770
this one so it's going I screwed or

1660
01:20:05,370 --> 01:20:09,809
loops and we have all the data going

1661
01:20:07,770 --> 01:20:13,020
through Kefka the controller's listening

1662
01:20:09,810 --> 01:20:16,800
to kefka for the the states able to

1663
01:20:13,020 --> 01:20:20,160
propagate that and then I think we have

1664
01:20:16,800 --> 01:20:23,130
a latency of 30 seconds to a minute but

1665
01:20:20,160 --> 01:20:28,650
you should see the traffic moving on the

1666
01:20:23,130 --> 01:20:35,900
other direction that was the test we did

1667
01:20:28,650 --> 01:20:49,799
before you can see how there was sorry

1668
01:20:35,900 --> 01:20:51,870
very day thanks for your time sorry for

1669
01:20:49,800 --> 01:20:54,330
the technical difficulties so we are

1670
01:20:51,870 --> 01:20:56,460
team boss we are for students from unity

1671
01:20:54,330 --> 01:20:58,800
of Colorado Boulder and we were joined

1672
01:20:56,460 --> 01:21:02,700
by another student from ball University

1673
01:20:58,800 --> 01:21:04,710
KC Jones and we were given three

1674
01:21:02,700 --> 01:21:07,639
objectives to solve and we had a

1675
01:21:04,710 --> 01:21:10,460
tremendous experience solving them and

1676
01:21:07,640 --> 01:21:13,320
we mostly implemented all the objectives

1677
01:21:10,460 --> 01:21:15,690
so this was a topology given to us and

1678
01:21:13,320 --> 01:21:19,139
the day zero part was implemented by me

1679
01:21:15,690 --> 01:21:22,559
in the sense we have a given a server

1680
01:21:19,140 --> 01:21:28,770
where we are to provision a router based

1681
01:21:22,560 --> 01:21:30,990
on expulsion and this was the XML coding

1682
01:21:28,770 --> 01:21:32,850
that was done in the sense we had to

1683
01:21:30,990 --> 01:21:34,679
configure interfaces we had to configure

1684
01:21:32,850 --> 01:21:39,840
the loop backs and we also had to

1685
01:21:34,680 --> 01:21:42,990
configure all the GPC GM pcs ports so in

1686
01:21:39,840 --> 01:21:45,810
the sense we had difficulties in getting

1687
01:21:42,990 --> 01:21:49,380
the XML code ready as well as bringing

1688
01:21:45,810 --> 01:21:51,960
up the interfaces so thanks to the cisco

1689
01:21:49,380 --> 01:21:54,120
team for helping me with the deletion

1690
01:21:51,960 --> 01:21:57,690
part of the shutdown interface so that

1691
01:21:54,120 --> 01:21:59,880
the interfaces were coming up and this

1692
01:21:57,690 --> 01:22:02,759
was a score surface that we followed

1693
01:21:59,880 --> 01:22:05,070
where we kind of created a dictionary

1694
01:22:02,760 --> 01:22:07,800
and then we appended the service URL in

1695
01:22:05,070 --> 01:22:11,670
order to form a path to the XML

1696
01:22:07,800 --> 01:22:14,220
a file and after that the the XML files

1697
01:22:11,670 --> 01:22:16,530
favorite and the ultimate cost meter the

1698
01:22:14,220 --> 01:22:18,750
last so the testing was done in two

1699
01:22:16,530 --> 01:22:21,120
phases and since we did the on box

1700
01:22:18,750 --> 01:22:22,800
testing as well as we did the repair

1701
01:22:21,120 --> 01:22:25,140
testing as well so during the Hong Kong

1702
01:22:22,800 --> 01:22:26,400
box testing when we run the script these

1703
01:22:25,140 --> 01:22:30,060
were the log messages that were

1704
01:22:26,400 --> 01:22:32,670
displayed and hidden we were going for

1705
01:22:30,060 --> 01:22:35,190
the repair testing we pointed the file

1706
01:22:32,670 --> 01:22:37,670
to the Python script that was made in

1707
01:22:35,190 --> 01:22:41,099
the DHCP server configuration and

1708
01:22:37,670 --> 01:22:43,170
finally when when we repaired when we

1709
01:22:41,100 --> 01:22:45,990
made a repair it took our on 10 to 12

1710
01:22:43,170 --> 01:22:48,810
minutes for the sappy 30p to make the

1711
01:22:45,990 --> 01:22:50,190
device come up and the device was these

1712
01:22:48,810 --> 01:22:53,070
are the log pieces that were seen during

1713
01:22:50,190 --> 01:22:54,570
the CTP messages so the initially leg

1714
01:22:53,070 --> 01:22:56,790
cells RTP will be applying the

1715
01:22:54,570 --> 01:22:58,710
configuration and after that we'll be

1716
01:22:56,790 --> 01:23:01,080
seeing a reply message of what XML

1717
01:22:58,710 --> 01:23:02,520
transactions has been made and finally

1718
01:23:01,080 --> 01:23:04,380
when all the configurations has been

1719
01:23:02,520 --> 01:23:08,130
applied you'll be seeing as a typical

1720
01:23:04,380 --> 01:23:11,520
treated message so moving on to day one

1721
01:23:08,130 --> 01:23:13,530
my friends will be containing hi about

1722
01:23:11,520 --> 01:23:17,100
day one we took up the fun method using

1723
01:23:13,530 --> 01:23:18,840
the ytk file and using the parameters

1724
01:23:17,100 --> 01:23:22,550
derivative already defined the ansible

1725
01:23:18,840 --> 01:23:25,200
host file and extracted in the yml file

1726
01:23:22,550 --> 01:23:29,670
that were passed on to the code that we

1727
01:23:25,200 --> 01:23:31,200
wrote and extracted this was run using

1728
01:23:29,670 --> 01:23:33,930
ansible and we could be if we could

1729
01:23:31,200 --> 01:23:37,679
configure bgp on all of the three

1730
01:23:33,930 --> 01:23:39,750
routers sorry on r1 and r4 and this was

1731
01:23:37,680 --> 01:23:41,900
verified by installing opener on the

1732
01:23:39,750 --> 01:23:44,370
individual routers and checking the

1733
01:23:41,900 --> 01:23:48,629
application routes being populated on

1734
01:23:44,370 --> 01:23:51,059
each of each of them and moving further

1735
01:23:48,630 --> 01:23:54,150
we also caught the telemetry part where

1736
01:23:51,060 --> 01:23:57,690
we run the daka file on day one and on

1737
01:23:54,150 --> 01:23:59,280
tab 2 we ensure that we were able to see

1738
01:23:57,690 --> 01:24:02,370
the telemetry data and we were in the

1739
01:23:59,280 --> 01:24:07,349
process of parsing it moving further

1740
01:24:02,370 --> 01:24:09,330
today to I'll hand over for the day - we

1741
01:24:07,350 --> 01:24:11,490
have seen that we have five parts which

1742
01:24:09,330 --> 01:24:13,740
we had to handle and part three was

1743
01:24:11,490 --> 01:24:16,200
given as an example so we could

1744
01:24:13,740 --> 01:24:19,050
understand the basic mechanics of how

1745
01:24:16,200 --> 01:24:19,800
each JSON file was created and how they

1746
01:24:19,050 --> 01:24:22,140
are mapped into

1747
01:24:19,800 --> 01:24:24,420
and based on that we could write the

1748
01:24:22,140 --> 01:24:27,360
JSON files and the required Python

1749
01:24:24,420 --> 01:24:30,270
script duplication for all the different

1750
01:24:27,360 --> 01:24:32,610
parts and we could achieve do all the

1751
01:24:30,270 --> 01:24:34,950
parts successfully and this is just an

1752
01:24:32,610 --> 01:24:37,110
example of how we have done that and how

1753
01:24:34,950 --> 01:24:39,510
in do it this is like the next hawk the

1754
01:24:37,110 --> 01:24:42,330
IP address and the particular MPLS label

1755
01:24:39,510 --> 01:24:44,760
we have applied to and that is the

1756
01:24:42,330 --> 01:24:47,610
script output of how it's being applied

1757
01:24:44,760 --> 01:24:49,800
sequentially and once you see the

1758
01:24:47,610 --> 01:24:52,889
message it's being true you can actually

1759
01:24:49,800 --> 01:24:55,530
go into the device and check the actual

1760
01:24:52,890 --> 01:24:58,800
configuration with the tag the interface

1761
01:24:55,530 --> 01:25:00,719
and the IP next hop IP and once we could

1762
01:24:58,800 --> 01:25:03,900
do that we could verify the ping across

1763
01:25:00,720 --> 01:25:06,030
and this has been done for all the parts

1764
01:25:03,900 --> 01:25:08,879
which were given we had few troubles

1765
01:25:06,030 --> 01:25:11,040
with our to which I am come so for the

1766
01:25:08,880 --> 01:25:14,160
router true - because that was also

1767
01:25:11,040 --> 01:25:16,019
being finally used for the JTP we had

1768
01:25:14,160 --> 01:25:19,110
little trouble with the initialization

1769
01:25:16,020 --> 01:25:21,330
of the opener on that router so we had

1770
01:25:19,110 --> 01:25:22,589
to troubleshoot a lot for that but it

1771
01:25:21,330 --> 01:25:24,540
was good experience because we could

1772
01:25:22,590 --> 01:25:26,850
actually map everything we had learnt in

1773
01:25:24,540 --> 01:25:29,400
the JSON format and we were very clear

1774
01:25:26,850 --> 01:25:31,020
about what was happening and thanks to

1775
01:25:29,400 --> 01:25:32,910
the organizers they actually helped us

1776
01:25:31,020 --> 01:25:34,650
understand that opener was the issue in

1777
01:25:32,910 --> 01:25:38,160
that case and after that we could

1778
01:25:34,650 --> 01:25:40,950
implement it fine and for the telemetry

1779
01:25:38,160 --> 01:25:43,500
part we could get the telemetry data on

1780
01:25:40,950 --> 01:25:46,110
the dev - device received and process

1781
01:25:43,500 --> 01:25:49,110
and for the passing part we could write

1782
01:25:46,110 --> 01:25:51,420
a script to pass the data but we didn't

1783
01:25:49,110 --> 01:25:53,969
implement the change of LSP stack

1784
01:25:51,420 --> 01:25:57,180
mapping to that specific event that was

1785
01:25:53,970 --> 01:25:59,100
sort of because of the time delay but we

1786
01:25:57,180 --> 01:26:03,030
had a script which we were processing

1787
01:25:59,100 --> 01:26:05,370
the logs on the go to summarise these

1788
01:26:03,030 --> 01:26:08,490
were all the learning so I would I mean

1789
01:26:05,370 --> 01:26:11,610
I would be talking in for the whole team

1790
01:26:08,490 --> 01:26:13,260
is because all these tools were few of

1791
01:26:11,610 --> 01:26:15,540
them we just heard few of them we have

1792
01:26:13,260 --> 01:26:18,930
implemented in a basic scale but using

1793
01:26:15,540 --> 01:26:21,269
them at this scale and in few places it

1794
01:26:18,930 --> 01:26:23,040
totally different way rather than how we

1795
01:26:21,270 --> 01:26:26,700
have done it was definitely very

1796
01:26:23,040 --> 01:26:28,740
exciting and we definitely are planning

1797
01:26:26,700 --> 01:26:30,660
to look back on - all these tools and

1798
01:26:28,740 --> 01:26:32,500
see how we can implement in different

1799
01:26:30,660 --> 01:26:35,440
use cases and we

1800
01:26:32,500 --> 01:26:38,080
happy we are definitely being all of us

1801
01:26:35,440 --> 01:26:39,519
being students so I think we have done a

1802
01:26:38,080 --> 01:26:43,690
good job in implementing all the

1803
01:26:39,520 --> 01:26:45,310
required implementation and mostly we

1804
01:26:43,690 --> 01:26:48,669
have covered everything so that was a

1805
01:26:45,310 --> 01:27:02,890
good experience so we are team boss

1806
01:26:48,670 --> 01:27:05,710
thank you very much hi everybody we are

1807
01:27:02,890 --> 01:27:08,380
the ethical networkers my name is Lauren

1808
01:27:05,710 --> 01:27:12,190
we have David Victor Eric and then dan

1809
01:27:08,380 --> 01:27:14,380
is not with us so Eric and I were

1810
01:27:12,190 --> 01:27:15,940
working on day zero where the basic

1811
01:27:14,380 --> 01:27:17,740
objective was to start up the equipment

1812
01:27:15,940 --> 01:27:20,169
and ensure basic connectivity to the

1813
01:27:17,740 --> 01:27:22,809
network Eric and I are newbies so we had

1814
01:27:20,170 --> 01:27:25,470
a lot to learn and Eric is gonna

1815
01:27:22,810 --> 01:27:30,820
actually explain what the screenshot is

1816
01:27:25,470 --> 01:27:34,570
so just like everybody else we had to go

1817
01:27:30,820 --> 01:27:36,549
through and configure the ztp script so

1818
01:27:34,570 --> 01:27:44,530
we went through to the LDP and the

1819
01:27:36,550 --> 01:27:48,010
interface here we had the G RPC and went

1820
01:27:44,530 --> 01:27:51,700
through created these into the XML files

1821
01:27:48,010 --> 01:27:54,640
using the open config just like the

1822
01:27:51,700 --> 01:27:58,570
other groups we had some issues with the

1823
01:27:54,640 --> 01:28:00,700
yang model and also ran some error

1824
01:27:58,570 --> 01:28:02,590
messages from the CDP

1825
01:28:00,700 --> 01:28:06,490
like Lauren said we were both pretty new

1826
01:28:02,590 --> 01:28:08,770
to this so we learned a lot today how to

1827
01:28:06,490 --> 01:28:13,389
configure a router from a blank blank

1828
01:28:08,770 --> 01:28:15,640
slate the whole concept of ztp along

1829
01:28:13,390 --> 01:28:19,090
with the yang and the data modeling

1830
01:28:15,640 --> 01:28:22,570
frameworks and so then we're handed off

1831
01:28:19,090 --> 01:28:24,340
for over day one yep so I was working on

1832
01:28:22,570 --> 01:28:26,830
day one for the guys so one of the

1833
01:28:24,340 --> 01:28:28,870
things I think now you're not just that

1834
01:28:26,830 --> 01:28:32,290
red line there on the screen don't ever

1835
01:28:28,870 --> 01:28:36,250
ever do that in Python that's a mutable

1836
01:28:32,290 --> 01:28:37,930
default variable it will bite you not an

1837
01:28:36,250 --> 01:28:41,580
answerable case because it will be

1838
01:28:37,930 --> 01:28:44,770
instantiated once but yeah this part

1839
01:28:41,580 --> 01:28:45,399
always do that never do that always do

1840
01:28:44,770 --> 01:28:48,909
that

1841
01:28:45,399 --> 01:28:50,829
just free otherwise yeah but on the on

1842
01:28:48,909 --> 01:28:53,978
the day one on the domain stuff yeah as

1843
01:28:50,829 --> 01:28:57,570
some of the other teams I've it was for

1844
01:28:53,979 --> 01:28:59,829
me first time to work with the yd ydk

1845
01:28:57,570 --> 01:29:02,799
spend a lot of time trying to narrow

1846
01:28:59,829 --> 01:29:06,249
down the exact you know Python tree of

1847
01:29:02,800 --> 01:29:08,649
objects to the XML tree and as you can

1848
01:29:06,249 --> 01:29:10,898
see on the diff you know got every

1849
01:29:08,649 --> 01:29:13,119
everything covered and that was pretty

1850
01:29:10,899 --> 01:29:15,039
much the main part of the day one so

1851
01:29:13,119 --> 01:29:16,929
once that got this working all the rest

1852
01:29:15,039 --> 01:29:19,179
of the items was you know fairly easy to

1853
01:29:16,929 --> 01:29:21,249
do like you know rearrange to play books

1854
01:29:19,179 --> 01:29:26,260
and around telemetry which is already

1855
01:29:21,249 --> 01:29:28,898
done for us so that's me you know you

1856
01:29:26,260 --> 01:29:31,239
know exploring XML open config.xml and

1857
01:29:28,899 --> 01:29:33,969
again trying to narrow it down to the to

1858
01:29:31,239 --> 01:29:37,299
the ytk was was kind of fun part and new

1859
01:29:33,969 --> 01:29:43,479
for me I figured out happy it works

1860
01:29:37,300 --> 01:29:51,189
thanks I am David I was working on the

1861
01:29:43,479 --> 01:29:53,139
day two stuff so I didn't I haven't

1862
01:29:51,189 --> 01:29:55,479
worked with GE before so I wanted to get

1863
01:29:53,139 --> 01:29:57,659
an idea of the structure of the JSON

1864
01:29:55,479 --> 01:30:02,619
make sure I understood what it was

1865
01:29:57,659 --> 01:30:07,119
before I started to expand to that

1866
01:30:02,619 --> 01:30:10,589
larger label mess I wanted to similar

1867
01:30:07,119 --> 01:30:13,629
streamline it down to just one simple

1868
01:30:10,590 --> 01:30:17,050
connectivity which was from router one

1869
01:30:13,629 --> 01:30:19,989
to router for across that direct link so

1870
01:30:17,050 --> 01:30:23,649
I built I built the configs for that I

1871
01:30:19,989 --> 01:30:27,489
got the labels applied but unfortunately

1872
01:30:23,649 --> 01:30:29,169
it didn't work for me so spent spent a

1873
01:30:27,489 --> 01:30:31,299
lot of time to get to that point and

1874
01:30:29,169 --> 01:30:34,530
also tried to do some debugging but

1875
01:30:31,300 --> 01:30:38,610
wasn't be able to get past it

1876
01:30:34,530 --> 01:30:38,610
but that's it

1877
01:30:40,200 --> 01:30:48,420
[Applause]

1878
01:30:58,130 --> 01:31:08,460
okay we're going to call it at this

1879
01:31:00,420 --> 01:31:18,510
point so with 39% of the vote overall

1880
01:31:08,460 --> 01:31:21,450
pod 10 followed by team buffs and neural

1881
01:31:18,510 --> 01:31:28,500
clacks so thank you everybody

1882
01:31:21,450 --> 01:31:31,080
great work everybody I want to thank our

1883
01:31:28,500 --> 01:31:32,640
sponsor Cisco who provided all this

1884
01:31:31,080 --> 01:31:34,890
great merchandise that we're going to

1885
01:31:32,640 --> 01:31:37,680
raffle off right now as well as tons of

1886
01:31:34,890 --> 01:31:40,200
resources in making this hack day

1887
01:31:37,680 --> 01:31:42,000
possible this hackathon possible and two

1888
01:31:40,200 --> 01:31:43,740
pseudo as well for providing all the

1889
01:31:42,000 --> 01:31:45,240
infrastructure all the cloud

1890
01:31:43,740 --> 01:31:52,440
infrastructure that used today so please

1891
01:31:45,240 --> 01:31:53,790
let's give them a hand as well and as

1892
01:31:52,440 --> 01:31:56,429
soon as we finish up with the raffle

1893
01:31:53,790 --> 01:32:04,950
there's going to be a reception out in

1894
01:31:56,430 --> 01:32:07,650
the atrium with snacks and drinks sounds

1895
01:32:04,950 --> 01:32:13,400
good so let's start with small anchor

1896
01:32:07,650 --> 01:32:13,400
power charger yes

1897
01:32:15,979 --> 01:32:29,680
okay Caillou be ruined yeah come here

1898
01:32:22,010 --> 01:32:29,680
[Applause]

1899
01:32:32,260 --> 01:32:39,159
thank you echo dot

1900
01:32:42,729 --> 01:33:09,039
David Rogers oh you are lucky things oke

1901
01:33:01,659 --> 01:33:34,719
some Garmin smart tracker okay Chrissy

1902
01:33:09,039 --> 01:33:39,780
Sutton thank you even more data now okay

1903
01:33:34,719 --> 01:33:39,780
bigger encouraged to stay and wine more

1904
01:33:40,289 --> 01:33:54,009
approval shastri yay okie we're getting

1905
01:33:53,170 --> 01:33:59,829
serious

1906
01:33:54,010 --> 01:34:03,389
Jabra elite sport earbuds hey Curtis

1907
01:33:59,829 --> 01:34:03,389
schlong Bella

1908
01:34:07,420 --> 01:34:22,699
thank you okay so this is Stefan be

1909
01:34:14,570 --> 01:34:41,090
ready to carry it home - oh just one

1910
01:34:22,699 --> 01:34:55,699
tick Bunty yeah it's okey now buzzer

1911
01:34:41,090 --> 01:35:02,239
sound sports free Chris Eisner it's

1912
01:34:55,699 --> 01:35:10,669
orange will fit your sneakers yeah let's

1913
01:35:02,239 --> 01:35:12,940
go for Apple watch Mike series at PAX

1914
01:35:10,670 --> 01:35:12,940
toe

1915
01:35:13,890 --> 01:35:19,129
[Applause]

1916
01:35:21,770 --> 01:35:46,590
and you go bro GoPro six any bloggers

1917
01:35:28,860 --> 01:35:52,259
here alright Dan Norton whoa well do you

1918
01:35:46,590 --> 01:36:01,830
want to try one more yeah oh you do

1919
01:35:52,260 --> 01:36:05,160
another fuse number sorry Jamie

1920
01:36:01,830 --> 01:36:12,470
patella yeah

1921
01:36:05,160 --> 01:36:12,470
[Applause]

1922
01:36:16,920 --> 01:36:21,660
so let's shuffle it better for last one

1923
01:36:21,690 --> 01:36:45,969
iPad Android M well friend so for your

1924
01:36:44,020 --> 01:36:48,430
participation today I hope it was a

1925
01:36:45,970 --> 01:36:51,040
great hug and we learn a lot from both

1926
01:36:48,430 --> 01:36:54,400
sides and thanks to Sutra for reliable

1927
01:36:51,040 --> 01:36:56,980
infrastructure and we all get to see

1928
01:36:54,400 --> 01:36:59,070
your faces and your skills over here

1929
01:36:56,980 --> 01:37:05,089
today thank you

1930
01:36:59,070 --> 01:37:05,090
[Applause]

1931
01:37:14,059 --> 01:37:16,119
you

