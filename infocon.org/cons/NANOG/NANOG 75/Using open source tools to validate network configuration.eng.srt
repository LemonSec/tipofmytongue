1
00:00:09,250 --> 00:00:12,180
all right thanks Eddie

2
00:00:11,030 --> 00:00:14,219
and thanks everyone

3
00:00:12,180 --> 00:00:16,139
being here I wanted to say if you're

4
00:00:14,220 --> 00:00:18,390
sitting in the back you might want to

5
00:00:16,139 --> 00:00:20,070
move up I'm gonna be showing some videos

6
00:00:18,390 --> 00:00:21,360
of demos up here you might want to be

7
00:00:20,070 --> 00:00:24,450
able to see the screen should be pretty

8
00:00:21,360 --> 00:00:24,869
cool I hope anyway I'm really excited to

9
00:00:24,450 --> 00:00:27,150
be here

10
00:00:24,869 --> 00:00:29,310
talking to you it's a great opportunity

11
00:00:27,150 --> 00:00:31,259
and I want to tell you today about Pat

12
00:00:29,310 --> 00:00:33,150
bad fish and pie bad fish to open source

13
00:00:31,260 --> 00:00:34,760
projects we work on that will help you

14
00:00:33,150 --> 00:00:38,400
validate your networks

15
00:00:34,760 --> 00:00:40,260
so really engineers today are being

16
00:00:38,400 --> 00:00:42,390
asked to do increasingly complex tests

17
00:00:40,260 --> 00:00:44,820
at increasing scales so more devices

18
00:00:42,390 --> 00:00:47,160
more types of devices more deployment

19
00:00:44,820 --> 00:00:48,899
scenarios whether it's on Prem whether

20
00:00:47,160 --> 00:00:49,470
it's across site whether it's hybrid

21
00:00:48,899 --> 00:00:51,420
clouds

22
00:00:49,470 --> 00:00:53,670
you know integration with more systems

23
00:00:51,420 --> 00:00:55,470
automating things more and more types of

24
00:00:53,670 --> 00:00:57,719
audits you know building out entirely

25
00:00:55,470 --> 00:00:58,710
new data center designs now that you see

26
00:00:57,719 --> 00:01:02,070
the next generation needs to be

27
00:00:58,710 --> 00:01:03,840
different and my claim is that the

28
00:01:02,070 --> 00:01:06,180
existing tools we use for this really

29
00:01:03,840 --> 00:01:08,100
don't suffice so we have a lot of great

30
00:01:06,180 --> 00:01:10,770
monitoring tools but what monitoring

31
00:01:08,100 --> 00:01:12,809
does inherently is find a small class of

32
00:01:10,770 --> 00:01:14,970
specific bugs once they're in production

33
00:01:12,810 --> 00:01:16,170
it's incomplete because usually you're

34
00:01:14,970 --> 00:01:18,630
only finding the bugs that you're

35
00:01:16,170 --> 00:01:20,280
looking for and it's reactive because

36
00:01:18,630 --> 00:01:21,690
you don't actually find or fix these

37
00:01:20,280 --> 00:01:24,390
issues until they've already taken

38
00:01:21,690 --> 00:01:26,520
effect in your network then there's

39
00:01:24,390 --> 00:01:28,260
operational state validation where you

40
00:01:26,520 --> 00:01:30,030
actually collect and verify router

41
00:01:28,260 --> 00:01:32,729
runtime state maybe use ansible to log

42
00:01:30,030 --> 00:01:34,380
in to all the devices again this is

43
00:01:32,729 --> 00:01:36,000
incomplete because you're only able to

44
00:01:34,380 --> 00:01:38,189
verify certain properties certain things

45
00:01:36,000 --> 00:01:40,409
you measure and once again it's reactive

46
00:01:38,189 --> 00:01:41,908
because anything you can find from this

47
00:01:40,409 --> 00:01:44,549
runtime state validation is already

48
00:01:41,909 --> 00:01:46,350
affecting your network there are some

49
00:01:44,549 --> 00:01:48,570
approaches that are more proactive so

50
00:01:46,350 --> 00:01:50,250
you can emulate it change where you take

51
00:01:48,570 --> 00:01:51,539
a partial impact you know you take the

52
00:01:50,250 --> 00:01:52,830
change and you deploy it on a partial

53
00:01:51,540 --> 00:01:55,229
subset of your network that you've spun

54
00:01:52,830 --> 00:01:57,000
up in VMs SE and you can get a good

55
00:01:55,229 --> 00:01:58,770
sense of a partial impact of that change

56
00:01:57,000 --> 00:02:00,780
you can spot check some things you want

57
00:01:58,770 --> 00:02:01,979
to happen and make sure they do this is

58
00:02:00,780 --> 00:02:04,140
again a manual process

59
00:02:01,979 --> 00:02:06,929
it's resource intensive it's again

60
00:02:04,140 --> 00:02:08,610
incomplete because you're only able to

61
00:02:06,930 --> 00:02:10,170
rely on the part of the network you're

62
00:02:08,610 --> 00:02:11,430
able to spin up the part of the

63
00:02:10,169 --> 00:02:13,380
properties you're willing to check and

64
00:02:11,430 --> 00:02:14,940
often the limitations of the specific

65
00:02:13,380 --> 00:02:16,739
VMS the vendors make available for you

66
00:02:14,940 --> 00:02:18,180
to try your stuff out but at least it's

67
00:02:16,739 --> 00:02:20,389
proactive at least you are doing this

68
00:02:18,180 --> 00:02:22,829
test before the bugs hit the network

69
00:02:20,389 --> 00:02:25,520
however I claim we need something better

70
00:02:22,829 --> 00:02:27,230
we want tools that are both proactive

71
00:02:25,520 --> 00:02:29,480
so you're able to run your checks before

72
00:02:27,230 --> 00:02:31,399
your bugs hit your network and their

73
00:02:29,480 --> 00:02:33,290
comprehensive rather than checking just

74
00:02:31,400 --> 00:02:36,470
the bugs you look for they can find

75
00:02:33,290 --> 00:02:38,239
entire classes of bugs with very general

76
00:02:36,470 --> 00:02:40,100
search parameters and I'll show you some

77
00:02:38,240 --> 00:02:43,100
demos in this talk that explain a lot

78
00:02:40,100 --> 00:02:44,859
more what I mean the project that powers

79
00:02:43,100 --> 00:02:47,630
all the stuff he'll be talking about is

80
00:02:44,860 --> 00:02:49,160
called batfish and it's a suite of tools

81
00:02:47,630 --> 00:02:51,140
for proactive comprehensive and

82
00:02:49,160 --> 00:02:53,000
automated network analysis it's an open

83
00:02:51,140 --> 00:02:54,440
source project it's under the Apache 2

84
00:02:53,000 --> 00:02:56,300
license which means all of you can try

85
00:02:54,440 --> 00:02:59,180
it out it's used in production by

86
00:02:56,300 --> 00:03:01,970
multiple fortune 500 companies and its

87
00:02:59,180 --> 00:03:03,560
contributors these days our intention at

88
00:03:01,970 --> 00:03:05,300
the company I work for but a bunch of

89
00:03:03,560 --> 00:03:08,780
other organizations making real changes

90
00:03:05,300 --> 00:03:12,230
to to the code for their own uses this

91
00:03:08,780 --> 00:03:14,480
is the real open source project so I'm

92
00:03:12,230 --> 00:03:15,890
gonna explain to you in some demos and

93
00:03:14,480 --> 00:03:18,049
some slides the kinds of things bad fish

94
00:03:15,890 --> 00:03:19,429
can do and how it works so here are four

95
00:03:18,050 --> 00:03:21,170
of the core capabilities of that fish

96
00:03:19,430 --> 00:03:23,270
that fish can help you audit your

97
00:03:21,170 --> 00:03:24,589
configuration settings so check it

98
00:03:23,270 --> 00:03:26,600
whether devices are compliant with site

99
00:03:24,590 --> 00:03:28,760
standards check whether cross device

100
00:03:26,600 --> 00:03:31,640
configurations such as BGP or IPSec

101
00:03:28,760 --> 00:03:34,700
sessions are compatible to each other we

102
00:03:31,640 --> 00:03:36,470
can also do data plane analysis to say

103
00:03:34,700 --> 00:03:38,810
you know how this traffic flow from A to

104
00:03:36,470 --> 00:03:40,130
B and why and if you mix those two

105
00:03:38,810 --> 00:03:41,660
together now you can see we can ask

106
00:03:40,130 --> 00:03:44,630
questions like will all my tunnels come

107
00:03:41,660 --> 00:03:46,370
up these again are still very sort of

108
00:03:44,630 --> 00:03:47,930
monitoring related checks you can do

109
00:03:46,370 --> 00:03:50,000
this by just logging devices and dumping

110
00:03:47,930 --> 00:03:52,220
their config dumping their ribs this

111
00:03:50,000 --> 00:03:54,380
kind of thing however bad fish can also

112
00:03:52,220 --> 00:03:57,440
do a bunch of comprehensive reachable

113
00:03:54,380 --> 00:03:59,000
checks so for example our comprehensive

114
00:03:57,440 --> 00:04:01,280
reachability analysis can answer

115
00:03:59,000 --> 00:04:02,900
questions like can any flows violate

116
00:04:01,280 --> 00:04:04,070
cross-site isolation not just the flaws

117
00:04:02,900 --> 00:04:06,920
I'm looking for but is there any

118
00:04:04,070 --> 00:04:08,810
possible packet that will do this or can

119
00:04:06,920 --> 00:04:11,660
I ensure that all clients can reach my

120
00:04:08,810 --> 00:04:13,340
DNS server we can also do comprehensive

121
00:04:11,660 --> 00:04:15,410
analysis over things like Ackles and

122
00:04:13,340 --> 00:04:16,220
firewall rules so for example give it an

123
00:04:15,410 --> 00:04:17,899
a cadet in

124
00:04:16,220 --> 00:04:19,880
does every rule in here actually matter

125
00:04:17,899 --> 00:04:21,140
or did I mess up the order of my Akal so

126
00:04:19,880 --> 00:04:22,159
that some of my rules that I think are

127
00:04:21,140 --> 00:04:25,669
doing important things for me are

128
00:04:22,160 --> 00:04:27,290
actually totally unused and you can do

129
00:04:25,669 --> 00:04:29,330
analysis of firewalls where you can say

130
00:04:27,290 --> 00:04:31,669
things like tell me every single flow

131
00:04:29,330 --> 00:04:33,560
that can get from outside the network to

132
00:04:31,669 --> 00:04:35,030
inside the network and you can constrain

133
00:04:33,560 --> 00:04:36,800
these things and you can iterate this to

134
00:04:35,030 --> 00:04:37,400
build some really cool and just analysis

135
00:04:36,800 --> 00:04:39,430
of your network

136
00:04:37,400 --> 00:04:41,900
I'll do some demos of all this later

137
00:04:39,430 --> 00:04:43,099
so once you have these capabilities and

138
00:04:41,900 --> 00:04:45,198
there are more I'm not gonna get to talk

139
00:04:43,099 --> 00:04:47,180
about how can you use batfish to be

140
00:04:45,199 --> 00:04:48,439
proactive about your network so one

141
00:04:47,180 --> 00:04:50,360
thing you might do that we're really

142
00:04:48,439 --> 00:04:52,849
trying to encourage everyone to do is to

143
00:04:50,360 --> 00:04:55,340
build a CI CD pipeline for your network

144
00:04:52,849 --> 00:04:56,840
so you can do proactive analysis of your

145
00:04:55,340 --> 00:04:58,310
network by testing out changes you're

146
00:04:56,840 --> 00:05:00,799
gonna make before you deploy them to

147
00:04:58,310 --> 00:05:02,919
your network and you can do continuous

148
00:05:00,800 --> 00:05:04,849
testing of your network by for example

149
00:05:02,919 --> 00:05:06,409
downloading the running config every

150
00:05:04,849 --> 00:05:08,120
night seeing everything that's different

151
00:05:06,409 --> 00:05:09,710
making sure that even if someone man you

152
00:05:08,120 --> 00:05:12,349
logged into the device is outside the

153
00:05:09,710 --> 00:05:13,969
scope of your normal workflow that those

154
00:05:12,349 --> 00:05:15,830
changes have not messed up your network

155
00:05:13,969 --> 00:05:18,500
in in terms of its configuration

156
00:05:15,830 --> 00:05:21,198
correctness its compliance or your

157
00:05:18,500 --> 00:05:22,699
security reliability policies on top of

158
00:05:21,199 --> 00:05:24,710
that you can use batfish to do what if

159
00:05:22,699 --> 00:05:26,330
analysis to test specific scenarios

160
00:05:24,710 --> 00:05:28,159
you're interested in maybe you want to

161
00:05:26,330 --> 00:05:30,770
do maintenance maybe you want to check

162
00:05:28,159 --> 00:05:32,210
either your resilience of failures maybe

163
00:05:30,770 --> 00:05:34,250
you want to investigate device recovery

164
00:05:32,210 --> 00:05:36,888
you can do all of this by just mocking

165
00:05:34,250 --> 00:05:38,330
up that type of scenario in batfish and

166
00:05:36,889 --> 00:05:40,870
testing what would happen without

167
00:05:38,330 --> 00:05:42,948
actually impacting your running network

168
00:05:40,870 --> 00:05:45,349
so I've told you what bad fish can do

169
00:05:42,949 --> 00:05:46,789
and I'm gonna tell you how it works one

170
00:05:45,349 --> 00:05:49,250
thing to take away here is that the only

171
00:05:46,789 --> 00:05:50,750
thing bad fish needs is offline data so

172
00:05:49,250 --> 00:05:52,099
the primary form of input is the raw

173
00:05:50,750 --> 00:05:54,500
configuration for your networking

174
00:05:52,099 --> 00:05:56,750
constructs your show run configs from

175
00:05:54,500 --> 00:05:58,879
your vendors your JSON or XML dumps from

176
00:05:56,750 --> 00:06:00,830
your clouds if you have a linux-based or

177
00:05:58,879 --> 00:06:03,009
white box system you know the IP tables

178
00:06:00,830 --> 00:06:04,430
rules and other config like that and

179
00:06:03,009 --> 00:06:06,710
from that

180
00:06:04,430 --> 00:06:08,089
batfish is able to build two parts each

181
00:06:06,710 --> 00:06:09,948
of those vendor configurations and then

182
00:06:08,089 --> 00:06:13,819
build a unified vendor independent model

183
00:06:09,949 --> 00:06:16,099
so say we have you know you know Cisco

184
00:06:13,819 --> 00:06:17,839
IOS devices you might configure BGP

185
00:06:16,099 --> 00:06:20,449
using template peers using route maps

186
00:06:17,839 --> 00:06:22,399
using access lists and anjou now stir

187
00:06:20,449 --> 00:06:24,349
using BGP groups policy statements and

188
00:06:22,399 --> 00:06:26,569
firewall filters we parse this

189
00:06:24,349 --> 00:06:28,729
configuration we abstract it out we

190
00:06:26,569 --> 00:06:30,620
unify it into the batfish model where we

191
00:06:28,729 --> 00:06:33,560
only need to reason about bgp sessions

192
00:06:30,620 --> 00:06:36,379
routing policies and ACLs and again I'll

193
00:06:33,560 --> 00:06:38,569
show you how this works later so just as

194
00:06:36,379 --> 00:06:40,580
an example on the Left I have iOS config

195
00:06:38,569 --> 00:06:42,560
and on the right I have June OS config

196
00:06:40,580 --> 00:06:44,149
for BGP and the blue lines I've

197
00:06:42,560 --> 00:06:46,009
highlighted are roughly equivalent

198
00:06:44,149 --> 00:06:49,370
configuration across the two languages

199
00:06:46,009 --> 00:06:50,899
and and in the internal data model for

200
00:06:49,370 --> 00:06:51,879
batfish which users are not normally

201
00:06:50,899 --> 00:06:54,249
exposed to but I'm putting

202
00:06:51,879 --> 00:06:56,439
for your benefit we've unified this all

203
00:06:54,249 --> 00:06:59,860
into a single JSON structure where we

204
00:06:56,439 --> 00:07:01,300
have the details of a s4 we have you

205
00:06:59,860 --> 00:07:04,059
know we're aware of the vendor specific

206
00:07:01,300 --> 00:07:05,740
defaults that we know and honor we can

207
00:07:04,059 --> 00:07:07,899
track things like which import policies

208
00:07:05,740 --> 00:07:09,369
or export policies you use and we can

209
00:07:07,899 --> 00:07:11,619
also build an aggregate export policy

210
00:07:09,369 --> 00:07:13,419
that captures all the details here not

211
00:07:11,619 --> 00:07:14,919
just of the particular prefix list or

212
00:07:13,419 --> 00:07:16,779
route filter you use for your export

213
00:07:14,919 --> 00:07:19,589
policy but also vendor imitation

214
00:07:16,779 --> 00:07:23,110
specific details like default originate

215
00:07:19,589 --> 00:07:24,610
now that we've done this we now have you

216
00:07:23,110 --> 00:07:26,589
know unified model of all of your

217
00:07:24,610 --> 00:07:28,330
networks devices we know how they're

218
00:07:26,589 --> 00:07:30,519
connected and now we can do a routing

219
00:07:28,330 --> 00:07:31,539
simulation so we actually go through and

220
00:07:30,519 --> 00:07:32,769
simulate the routing of all the

221
00:07:31,539 --> 00:07:34,628
protocols that you're running your

222
00:07:32,769 --> 00:07:36,789
network we get the ribs and fibs for all

223
00:07:34,629 --> 00:07:39,759
devices and now we know how traffic will

224
00:07:36,789 --> 00:07:41,498
flow through your network finally we

225
00:07:39,759 --> 00:07:44,349
have a network verification and query

226
00:07:41,499 --> 00:07:46,929
engine that reasons about your network

227
00:07:44,349 --> 00:07:48,219
right unified model on the left ribs and

228
00:07:46,929 --> 00:07:49,539
fibs in the middle and on the right we

229
00:07:48,219 --> 00:07:51,009
now model your network and your network

230
00:07:49,539 --> 00:07:53,649
policy is a system of mathematical

231
00:07:51,009 --> 00:07:56,169
equations you put this together and we

232
00:07:53,649 --> 00:07:58,599
can reason about all possible traffic

233
00:07:56,169 --> 00:08:00,789
sources traffic destinations the actual

234
00:07:58,599 --> 00:08:03,099
flows you're sending how things might

235
00:08:00,789 --> 00:08:04,479
fail router presents you might receive

236
00:08:03,099 --> 00:08:06,579
we can reason about all possible of

237
00:08:04,479 --> 00:08:08,498
these things and answer questions and

238
00:08:06,579 --> 00:08:13,089
ensure that your policy is honored under

239
00:08:08,499 --> 00:08:14,649
all these conditions and this is a very

240
00:08:13,089 --> 00:08:16,419
small summary but batfish finds real

241
00:08:14,649 --> 00:08:18,069
bugs and real networks so our users have

242
00:08:16,419 --> 00:08:21,099
automatically detected bugs and things

243
00:08:18,069 --> 00:08:23,279
like misconfigured servers misconfigured

244
00:08:21,099 --> 00:08:25,990
ackles where for example in one case

245
00:08:23,279 --> 00:08:29,169
they were used they were mixing iOS and

246
00:08:25,990 --> 00:08:30,669
a sa masks in their ackles and so they

247
00:08:29,169 --> 00:08:33,039
thought they were allowing a single IP

248
00:08:30,669 --> 00:08:34,088
they were actually allowing all and you

249
00:08:33,039 --> 00:08:35,139
know it's really hard to notice when

250
00:08:34,089 --> 00:08:36,959
things are failing open because

251
00:08:35,139 --> 00:08:39,310
everything still works

252
00:08:36,958 --> 00:08:41,348
we found the configuration bugs where

253
00:08:39,309 --> 00:08:42,728
for example bgp sessions couldn't

254
00:08:41,349 --> 00:08:44,949
possibly come up because the two sides

255
00:08:42,729 --> 00:08:46,180
weren't configured compatibly or where

256
00:08:44,949 --> 00:08:47,349
the bgp sessions couldn't come up

257
00:08:46,180 --> 00:08:48,550
because there was an ankle in the middle

258
00:08:47,350 --> 00:08:50,860
blocking them from being established

259
00:08:48,550 --> 00:08:52,779
we've also found things like multi pad

260
00:08:50,860 --> 00:08:54,850
thick consistency where even though I

261
00:08:52,779 --> 00:08:56,259
have ecmp my network the flows have

262
00:08:54,850 --> 00:08:58,839
different dispositions you know some

263
00:08:56,259 --> 00:09:01,389
fail some succeed based on what paths

264
00:08:58,839 --> 00:09:04,240
they take the net result of this is

265
00:09:01,389 --> 00:09:05,020
inconsistency increased latency reduced

266
00:09:04,240 --> 00:09:07,149
capacity

267
00:09:05,020 --> 00:09:08,770
fragility and security holes that you

268
00:09:07,149 --> 00:09:13,330
just don't know about until someone

269
00:09:08,770 --> 00:09:14,829
finds them hopefully it's you so in the

270
00:09:13,330 --> 00:09:16,420
next section I've got a series of demos

271
00:09:14,830 --> 00:09:19,660
showing all the things I talked about so

272
00:09:16,420 --> 00:09:21,610
far for this first set of demos I'm

273
00:09:19,660 --> 00:09:23,949
using a sample data center network it's

274
00:09:21,610 --> 00:09:25,770
a realistic network it has 67 nodes it's

275
00:09:23,950 --> 00:09:27,940
a mix of juniper and Cisco devices

276
00:09:25,770 --> 00:09:29,649
there's two pods here on the left and

277
00:09:27,940 --> 00:09:30,490
the right we also have four Linux

278
00:09:29,649 --> 00:09:33,190
servers and different arts of the

279
00:09:30,490 --> 00:09:34,810
network the EGP guys you know we're

280
00:09:33,190 --> 00:09:37,209
using BGP and OSPF to route traffic

281
00:09:34,810 --> 00:09:39,849
throughout the network the length

282
00:09:37,209 --> 00:09:41,079
devices use IP tables and this is

283
00:09:39,850 --> 00:09:45,010
modeled on networks we've seen in

284
00:09:41,080 --> 00:09:45,790
production so the first case I told you

285
00:09:45,010 --> 00:09:48,339
back this can help you Auto

286
00:09:45,790 --> 00:09:51,099
configuration settings so in this demo

287
00:09:48,339 --> 00:09:52,420
I'm gonna be using a Jupiter notebook to

288
00:09:51,100 --> 00:09:54,850
drive the demo and this is a

289
00:09:52,420 --> 00:09:56,560
pre-recorded video so Jupiter notebooks

290
00:09:54,850 --> 00:09:59,170
have become a way that people do data

291
00:09:56,560 --> 00:10:00,729
science in modern environments it's a

292
00:09:59,170 --> 00:10:02,709
Python basically and you get to interact

293
00:10:00,730 --> 00:10:05,290
with it so the first thing I've done is

294
00:10:02,709 --> 00:10:07,270
I've just run some setup scripts to

295
00:10:05,290 --> 00:10:09,760
import the PI that fish libraries and to

296
00:10:07,270 --> 00:10:11,829
customize data output let's go look at

297
00:10:09,760 --> 00:10:13,600
the input so if I just list the config

298
00:10:11,829 --> 00:10:14,620
files you can see I have a bunch of show

299
00:10:13,600 --> 00:10:17,020
run output from a bunch of different

300
00:10:14,620 --> 00:10:19,839
devices we have border routers core

301
00:10:17,020 --> 00:10:22,480
routers distribution layer firewall

302
00:10:19,839 --> 00:10:24,310
storage things like that let's go look

303
00:10:22,480 --> 00:10:27,370
at tour 2a in the Seattle 2 network

304
00:10:24,310 --> 00:10:29,949
right this is a Cisco nx-os router let's

305
00:10:27,370 --> 00:10:31,570
go look at tour 2a and pod one this one

306
00:10:29,950 --> 00:10:33,430
is a Juniper router with you know apply

307
00:10:31,570 --> 00:10:36,220
groups and multi chassis lag and all

308
00:10:33,430 --> 00:10:37,689
those things so what bad fish does it

309
00:10:36,220 --> 00:10:39,550
takes all this configuration as raw

310
00:10:37,690 --> 00:10:42,490
input and then we're just going to run

311
00:10:39,550 --> 00:10:43,959
the we're gonna initialize the snapshot

312
00:10:42,490 --> 00:10:45,490
from those configurations and what bad

313
00:10:43,959 --> 00:10:47,170
fish has done is read all that config

314
00:10:45,490 --> 00:10:48,670
since I didn't keep it to apology will

315
00:10:47,170 --> 00:10:51,099
infer topology based on the l3

316
00:10:48,670 --> 00:10:52,540
configuration here and the first thing I

317
00:10:51,100 --> 00:10:54,100
run with the new network is just to see

318
00:10:52,540 --> 00:10:56,500
did batfish find anything interesting

319
00:10:54,100 --> 00:10:58,270
during Nishal ization so these are three

320
00:10:56,500 --> 00:11:00,130
issues we see fairly commonly they may

321
00:10:58,270 --> 00:11:02,050
not be issues at all actually we see

322
00:11:00,130 --> 00:11:03,939
empty prefix lists on a couple of

323
00:11:02,050 --> 00:11:05,740
devices this is fairly standard you

324
00:11:03,940 --> 00:11:06,279
don't have anyone malicious yet but you

325
00:11:05,740 --> 00:11:07,630
might later

326
00:11:06,279 --> 00:11:10,089
so you leave a hole and you put them in

327
00:11:07,630 --> 00:11:12,160
your policies this is fine we also see

328
00:11:10,089 --> 00:11:13,959
one interface has AI GRP settings I

329
00:11:12,160 --> 00:11:15,400
think the delay is configured but since

330
00:11:13,959 --> 00:11:16,680
the IGP is not running on that device

331
00:11:15,400 --> 00:11:18,149
we're just letting you know hey you

332
00:11:16,680 --> 00:11:19,680
may have some orphan configs here it

333
00:11:18,149 --> 00:11:21,210
could be that you didn't attach this to

334
00:11:19,680 --> 00:11:24,300
the process correctly or this is just

335
00:11:21,210 --> 00:11:25,770
old data you don't need so I mentioned

336
00:11:24,300 --> 00:11:26,969
that batfish gives you a structured

337
00:11:25,770 --> 00:11:28,890
vendor-neutral data model of your

338
00:11:26,970 --> 00:11:30,779
configuration so here I'm running the

339
00:11:28,890 --> 00:11:33,689
node properties questions but you can

340
00:11:30,779 --> 00:11:36,120
run this for OSPF bgp interfaces

341
00:11:33,690 --> 00:11:37,800
sessions IPSec and like lots of other

342
00:11:36,120 --> 00:11:40,020
things for each one of these properties

343
00:11:37,800 --> 00:11:41,459
we give you a table of the output note

344
00:11:40,020 --> 00:11:42,959
that the input here was from completely

345
00:11:41,459 --> 00:11:45,479
different vendors but we've put it all

346
00:11:42,959 --> 00:11:46,829
into one unified table so I think I'm

347
00:11:45,480 --> 00:11:49,080
showing you five rows of the table here

348
00:11:46,830 --> 00:11:51,270
we see one of our Linux servers and for

349
00:11:49,080 --> 00:11:53,610
the Juniper devices we have a canonical

350
00:11:51,270 --> 00:11:55,500
IP like the loopback we know which DNS

351
00:11:53,610 --> 00:11:57,149
servers are running we can see what

352
00:11:55,500 --> 00:11:58,860
domain name is configured what device

353
00:11:57,149 --> 00:12:00,300
type everyone is and there's a whole

354
00:11:58,860 --> 00:12:01,260
bunch of more properties that some of

355
00:12:00,300 --> 00:12:03,630
the vices have and some of the vices

356
00:12:01,260 --> 00:12:06,080
don't in terms of you know which ackles

357
00:12:03,630 --> 00:12:08,399
they have defined and so on and so forth

358
00:12:06,080 --> 00:12:09,870
even with something simple like this we

359
00:12:08,399 --> 00:12:11,279
have now taken a bunch of different

360
00:12:09,870 --> 00:12:13,230
device complexity and put it all on one

361
00:12:11,279 --> 00:12:15,660
queryable format so you can ask

362
00:12:13,230 --> 00:12:17,040
questions like for instance how are the

363
00:12:15,660 --> 00:12:19,860
logging servers configured throughout my

364
00:12:17,040 --> 00:12:22,230
network so this line of code line 8 is a

365
00:12:19,860 --> 00:12:24,180
standard panda's query so we have a

366
00:12:22,230 --> 00:12:26,250
panda's data frame which is a standard

367
00:12:24,180 --> 00:12:28,020
Python data science library and I'm just

368
00:12:26,250 --> 00:12:29,550
saying for every device pull out its

369
00:12:28,020 --> 00:12:31,260
hostname and the logging servers and

370
00:12:29,550 --> 00:12:32,729
then show me for each unique

371
00:12:31,260 --> 00:12:34,230
configuration of logging servers in the

372
00:12:32,730 --> 00:12:36,450
network show me all the devices that

373
00:12:34,230 --> 00:12:37,650
have that configuration so we see that

374
00:12:36,450 --> 00:12:38,970
the Linux hosts don't have certain

375
00:12:37,650 --> 00:12:42,150
logging servers configured you know

376
00:12:38,970 --> 00:12:43,230
their their Linux servers and then we

377
00:12:42,150 --> 00:12:47,610
have four different types of devices

378
00:12:43,230 --> 00:12:50,850
here every device has this 1065 14 20

379
00:12:47,610 --> 00:12:51,930
NTP server and in all the groupings but

380
00:12:50,850 --> 00:12:53,640
one there's actually two servers

381
00:12:51,930 --> 00:12:55,620
configured maybe that means that these

382
00:12:53,640 --> 00:12:58,800
two storage devices in pod one are

383
00:12:55,620 --> 00:13:00,630
misconfigured and then you can again see

384
00:12:58,800 --> 00:13:03,510
sort of role based assignment of servers

385
00:13:00,630 --> 00:13:05,339
to the different devices this is not

386
00:13:03,510 --> 00:13:07,680
meant to say anything super deep except

387
00:13:05,339 --> 00:13:08,880
to show you that we are able to provide

388
00:13:07,680 --> 00:13:12,120
a lot of insight into your different

389
00:13:08,880 --> 00:13:13,770
configurations and actually find useful

390
00:13:12,120 --> 00:13:17,160
relationships and potentially bugs based

391
00:13:13,770 --> 00:13:20,310
on that so the next thing I'll talk

392
00:13:17,160 --> 00:13:22,140
about is the data plane analysis so in

393
00:13:20,310 --> 00:13:23,819
this video what we're gonna do is start

394
00:13:22,140 --> 00:13:25,140
with our ribs and fibs we simulated and

395
00:13:23,820 --> 00:13:27,720
then we're going to go run a traceroute

396
00:13:25,140 --> 00:13:30,240
and this particular cell I'm going to

397
00:13:27,720 --> 00:13:33,450
simulate routing from

398
00:13:30,240 --> 00:13:36,000
traffic leaving from tour 1a in pod 3

399
00:13:33,450 --> 00:13:39,330
going to quad 8 which is Google's open

400
00:13:36,000 --> 00:13:40,740
DNS server and essentially I've asked in

401
00:13:39,330 --> 00:13:42,660
this query I'm running traceroute and

402
00:13:40,740 --> 00:13:44,580
I'm saying start from pod 8 with the

403
00:13:42,660 --> 00:13:45,870
destination IP at Google's DNS and give

404
00:13:44,580 --> 00:13:46,880
me up to three traces in the case of

405
00:13:45,870 --> 00:13:49,980
lots of ecmp

406
00:13:46,880 --> 00:13:52,200
if we scroll down we see you know the

407
00:13:49,980 --> 00:13:54,089
start location and location or end IP I

408
00:13:52,200 --> 00:13:55,709
specified but we also see batfish

409
00:13:54,089 --> 00:13:58,080
automatically populated a reasonable

410
00:13:55,709 --> 00:13:59,910
source IP and decide to use a UDP trace

411
00:13:58,080 --> 00:14:01,589
route and then on the right we can see

412
00:13:59,910 --> 00:14:04,110
what happens to this flow in the network

413
00:14:01,589 --> 00:14:05,580
so this particular flow is successfully

414
00:14:04,110 --> 00:14:07,980
exiting the network at the firewall it

415
00:14:05,580 --> 00:14:09,720
starts on tour 1a it's forwarded out

416
00:14:07,980 --> 00:14:11,880
using this particular I BGP default

417
00:14:09,720 --> 00:14:12,930
route it follows these interfaces and

418
00:14:11,880 --> 00:14:16,860
follows these other runs through the

419
00:14:12,930 --> 00:14:19,109
network we see I bgp BGP OSPF external

420
00:14:16,860 --> 00:14:21,089
type 1 eventually we see traffic reaches

421
00:14:19,110 --> 00:14:24,020
the firewall where it is accepted by the

422
00:14:21,089 --> 00:14:26,880
outgoing security policy on our each 0.6

423
00:14:24,020 --> 00:14:29,790
which is basically the inside to outside

424
00:14:26,880 --> 00:14:32,130
zone policy and we see on the right that

425
00:14:29,790 --> 00:14:33,599
there are 32 traces there so ecmp is

426
00:14:32,130 --> 00:14:35,100
active and there were 32 separate paths

427
00:14:33,600 --> 00:14:37,200
on the network and we can actually tell

428
00:14:35,100 --> 00:14:40,140
you about all of them so this first

429
00:14:37,200 --> 00:14:42,240
trace is going from tor 1a it's going

430
00:14:40,140 --> 00:14:43,140
through the spine then core 1a then

431
00:14:42,240 --> 00:14:46,410
border 1b

432
00:14:43,140 --> 00:14:48,209
if I look at the next race we'll see

433
00:14:46,410 --> 00:14:50,670
this is the spine core when a but now

434
00:14:48,209 --> 00:14:52,290
border 1a not border 1b and the next

435
00:14:50,670 --> 00:14:54,719
trace I think we'll go through core 1 B

436
00:14:52,290 --> 00:14:57,180
so we're able to show you very fine

437
00:14:54,720 --> 00:14:58,980
low-level details of exactly why traffic

438
00:14:57,180 --> 00:15:00,239
went from A to B in much finer

439
00:14:58,980 --> 00:15:01,410
granularity you're going to get out of

440
00:15:00,240 --> 00:15:02,790
stay running trace route for real

441
00:15:01,410 --> 00:15:05,040
because we're showing you all the routes

442
00:15:02,790 --> 00:15:06,949
matched all the interfaces taken all the

443
00:15:05,040 --> 00:15:09,150
apples traversed and things like that

444
00:15:06,950 --> 00:15:10,980
now I'm also going to run the reverse

445
00:15:09,150 --> 00:15:12,810
trace route so I'm going to say traffic

446
00:15:10,980 --> 00:15:14,790
coming in from that external interface

447
00:15:12,810 --> 00:15:16,439
on the firewall with a destination IP

448
00:15:14,790 --> 00:15:18,630
where I just copied the source IP from

449
00:15:16,440 --> 00:15:21,720
the previous flow in this case we see

450
00:15:18,630 --> 00:15:25,200
that the UDP flow is actually denied so

451
00:15:21,720 --> 00:15:28,020
it comes in the firewall on our ease 0.6

452
00:15:25,200 --> 00:15:29,610
but when it tries to send it out Ari 0.5

453
00:15:28,020 --> 00:15:31,589
to inside the network it's denied by

454
00:15:29,610 --> 00:15:34,190
that security policy will actually dig

455
00:15:31,589 --> 00:15:34,190
into this a bit later

456
00:15:37,430 --> 00:15:41,670
so the next edit right I showed you

457
00:15:40,020 --> 00:15:43,140
trace route right trace route is great

458
00:15:41,670 --> 00:15:44,699
for understanding what is happening in

459
00:15:43,140 --> 00:15:46,560
your network what paths clothes are

460
00:15:44,700 --> 00:15:49,649
taking but now let's do something more

461
00:15:46,560 --> 00:15:52,079
comprehensive so in that last example I

462
00:15:49,649 --> 00:15:53,610
showed you that a standard UDP trace

463
00:15:52,080 --> 00:15:55,820
route originating incoming at the

464
00:15:53,610 --> 00:15:58,440
firewall was not delivered to that tor

465
00:15:55,820 --> 00:16:00,089
however does that mean that no traffic

466
00:15:58,440 --> 00:16:02,010
gets through to that tor of course it

467
00:16:00,089 --> 00:16:04,529
doesn't all we did was try UDP tracer oh

468
00:16:02,010 --> 00:16:07,080
right a single flow so now I'm asking is

469
00:16:04,529 --> 00:16:08,640
there anything at all any packet that

470
00:16:07,080 --> 00:16:10,680
satisfies the constraint that it starts

471
00:16:08,640 --> 00:16:14,100
outside the firewall and it is destined

472
00:16:10,680 --> 00:16:15,750
to that tour and here that fish was able

473
00:16:14,100 --> 00:16:17,610
to find a flow it found that this

474
00:16:15,750 --> 00:16:20,580
particular source IP which is configured

475
00:16:17,610 --> 00:16:21,810
as the other side of that firewall the

476
00:16:20,580 --> 00:16:25,709
other side of the interface coming in

477
00:16:21,810 --> 00:16:28,410
using ICMP if that packet happens to be

478
00:16:25,709 --> 00:16:30,329
sent the flow will be accepted you can

479
00:16:28,410 --> 00:16:32,670
see there are 200 paths through this

480
00:16:30,330 --> 00:16:34,290
network I don't know exactly why that is

481
00:16:32,670 --> 00:16:36,599
you can see again exactly what routes

482
00:16:34,290 --> 00:16:38,459
are taken and you'll notice that the

483
00:16:36,600 --> 00:16:40,140
only information I seeded this with was

484
00:16:38,459 --> 00:16:42,209
where the traffic starts and what the

485
00:16:40,140 --> 00:16:44,329
destination IP is bad fish did the rest

486
00:16:42,209 --> 00:16:46,709
of the work to find all these results

487
00:16:44,329 --> 00:16:48,810
you'll notice here again that this time

488
00:16:46,709 --> 00:16:51,719
it was accepted or permitted by the

489
00:16:48,810 --> 00:16:55,829
security policies to aria 0.5 and we'll

490
00:16:51,720 --> 00:16:57,899
dig into that in just a minute so that

491
00:16:55,829 --> 00:17:00,290
brings me right to the comprehensive ACL

492
00:16:57,899 --> 00:17:04,530
and firewall analysis the batfish can do

493
00:17:00,290 --> 00:17:06,569
so we saw that this particular packet

494
00:17:04,530 --> 00:17:08,369
which batfish found without me telling

495
00:17:06,569 --> 00:17:10,349
them what to look for

496
00:17:08,369 --> 00:17:12,119
found that a particular ICMP packet with

497
00:17:10,349 --> 00:17:13,290
a particular source IP DES type e and

498
00:17:12,119 --> 00:17:15,149
coming a particular interface is

499
00:17:13,290 --> 00:17:20,790
delivered now let's try to understand

500
00:17:15,150 --> 00:17:23,010
why so here you can see that the I'm

501
00:17:20,790 --> 00:17:24,688
running the test filters question where

502
00:17:23,010 --> 00:17:26,309
I'm I've set up just those constraints

503
00:17:24,689 --> 00:17:29,309
that I copied from the previous output

504
00:17:26,309 --> 00:17:31,170
and when we run this it's going to

505
00:17:29,309 --> 00:17:36,540
explain to us why was this packet

506
00:17:31,170 --> 00:17:39,110
accepted I'm a little head of the video

507
00:17:36,540 --> 00:17:39,110
sorry

508
00:17:44,470 --> 00:17:48,370
so what we see is that this flow in

509
00:17:46,929 --> 00:17:49,960
particular was permitted by that

510
00:17:48,370 --> 00:17:51,610
security policy well we knew that RLE

511
00:17:49,960 --> 00:17:53,769
already but why was it permitted by the

512
00:17:51,610 --> 00:17:57,370
security policy in this case the second

513
00:17:53,769 --> 00:17:59,529
line in that policy is the the Juniper

514
00:17:57,370 --> 00:18:01,059
devices outside to inside zone policy

515
00:17:59,529 --> 00:18:03,850
and that it was allowed by that policy

516
00:18:01,059 --> 00:18:05,980
now let's recurse why was it allowed by

517
00:18:03,850 --> 00:18:07,600
that policy we don't yet know it turns

518
00:18:05,980 --> 00:18:09,490
out the fourth line in that policy is

519
00:18:07,600 --> 00:18:11,799
and this is a little complex notation

520
00:18:09,490 --> 00:18:15,220
we're making it prettier but in essence

521
00:18:11,799 --> 00:18:17,230
that it matched a particularly address

522
00:18:15,220 --> 00:18:18,330
book it's ICMP and it came from the

523
00:18:17,230 --> 00:18:20,830
right source interface

524
00:18:18,330 --> 00:18:22,299
so let's recurse again now we understand

525
00:18:20,830 --> 00:18:23,830
where the ICMP part and the interface

526
00:18:22,299 --> 00:18:26,289
part came from but let's see what this

527
00:18:23,830 --> 00:18:28,178
address book means so it turns out this

528
00:18:26,289 --> 00:18:30,340
particular destination IP is permitted

529
00:18:28,179 --> 00:18:31,629
by that address book because it matches

530
00:18:30,340 --> 00:18:33,309
the first line in the address book which

531
00:18:31,629 --> 00:18:37,570
is in reference to another address book

532
00:18:33,309 --> 00:18:39,928
called global RFC 1918 and then that

533
00:18:37,570 --> 00:18:42,610
reference itself is matched by another

534
00:18:39,929 --> 00:18:44,620
global address book or some sort of

535
00:18:42,610 --> 00:18:49,928
address group that is which is global

536
00:18:44,620 --> 00:18:51,639
RFC 1918 - 10 and then we can see now ok

537
00:18:49,929 --> 00:18:54,429
what happened is that this particular

538
00:18:51,639 --> 00:18:56,289
flow has a destination IP in the ten

539
00:18:54,429 --> 00:18:58,720
point zero point zero slash prophet IP

540
00:18:56,289 --> 00:19:00,279
space so we were able to use that

541
00:18:58,720 --> 00:19:02,259
through this deep understanding of the

542
00:19:00,279 --> 00:19:03,549
firewall rules to actually be reference

543
00:19:02,259 --> 00:19:04,809
complex behavior the batfish

544
00:19:03,549 --> 00:19:06,668
automatically discovered for us

545
00:19:04,809 --> 00:19:08,559
following it through many nested layers

546
00:19:06,669 --> 00:19:10,120
of transitive policies taking into

547
00:19:08,559 --> 00:19:14,889
account the aggregate firewall policy on

548
00:19:10,120 --> 00:19:16,799
the device I'm next going to show you a

549
00:19:14,889 --> 00:19:18,699
different type of ACL analysis we can do

550
00:19:16,799 --> 00:19:21,009
and this is a very simple question

551
00:19:18,700 --> 00:19:23,230
filter line reach ability that just says

552
00:19:21,009 --> 00:19:25,480
look at all the apples in my network and

553
00:19:23,230 --> 00:19:26,799
you can constrain the search and tell me

554
00:19:25,480 --> 00:19:28,600
whether any of those lines are not

555
00:19:26,799 --> 00:19:30,009
having any effect because every traffic

556
00:19:28,600 --> 00:19:32,289
they would handle has already been

557
00:19:30,009 --> 00:19:35,799
handled so for instance on these two

558
00:19:32,289 --> 00:19:38,529
tours you know wine ad says permit any

559
00:19:35,799 --> 00:19:41,049
OSPF traffic for particular / 32 source

560
00:19:38,529 --> 00:19:42,580
destination IP but line 70 says allow

561
00:19:41,049 --> 00:19:44,320
any OSB of traffic from any source and

562
00:19:42,580 --> 00:19:47,559
destination obviously this line is not

563
00:19:44,320 --> 00:19:49,330
used is not useful why do we think we

564
00:19:47,559 --> 00:19:50,470
needed it maybe it's old config and we

565
00:19:49,330 --> 00:19:52,090
added the allow all later

566
00:19:50,470 --> 00:19:53,529
maybe we added that allow all for

567
00:19:52,090 --> 00:19:55,350
debugging once and forgot to remove it

568
00:19:53,529 --> 00:19:57,070
maybe we should investigate

569
00:19:55,350 --> 00:19:58,330
however there

570
00:19:57,070 --> 00:20:00,668
this other column called different

571
00:19:58,330 --> 00:20:02,019
action which tells me when the first

572
00:20:00,669 --> 00:20:03,730
line the second line would do different

573
00:20:02,019 --> 00:20:06,190
things to the flow you know two permits

574
00:20:03,730 --> 00:20:07,269
is probably okay but a permit following

575
00:20:06,190 --> 00:20:09,940
and denying means we're not allowing

576
00:20:07,269 --> 00:20:11,259
some traffic we thought we wanted so in

577
00:20:09,940 --> 00:20:13,570
this case there's a rule called allow

578
00:20:11,259 --> 00:20:14,799
all I see me traffic from Seattle and we

579
00:20:13,570 --> 00:20:16,658
want to be allowing it through this

580
00:20:14,799 --> 00:20:18,370
border router but we're actually

581
00:20:16,659 --> 00:20:24,250
blocking it and we're blocking it due to

582
00:20:18,370 --> 00:20:26,408
a rule called block RFC 1918 and you can

583
00:20:24,250 --> 00:20:28,750
see because the different action column

584
00:20:26,409 --> 00:20:29,950
is true that this is you know we're

585
00:20:28,750 --> 00:20:31,899
denying traffic we thought we should

586
00:20:29,950 --> 00:20:33,940
allow so let's just go really quickly

587
00:20:31,899 --> 00:20:35,949
look at the configuration we can see

588
00:20:33,940 --> 00:20:38,200
that the the blocking term just says

589
00:20:35,950 --> 00:20:39,820
take any traffic with a source IP in a

590
00:20:38,200 --> 00:20:43,360
private address space and drop it on the

591
00:20:39,820 --> 00:20:45,009
floor after counting it but the policy

592
00:20:43,360 --> 00:20:46,809
we have here this allow all term

593
00:20:45,009 --> 00:20:48,460
actually says well if it matches this

594
00:20:46,809 --> 00:20:50,440
particular source prefix list and it's a

595
00:20:48,460 --> 00:20:53,169
particularly NP type then let it throw

596
00:20:50,440 --> 00:20:55,090
and if we again go and dereference that

597
00:20:53,169 --> 00:20:56,909
source prefix list we'll find out that

598
00:20:55,090 --> 00:20:59,379
that prefix list is in IP address space

599
00:20:56,909 --> 00:21:01,990
so we have one rule that's just saying

600
00:20:59,379 --> 00:21:04,269
block everything with this private

601
00:21:01,990 --> 00:21:07,240
source IP and another rule saying allow

602
00:21:04,269 --> 00:21:10,059
specific ICMP packets through that

603
00:21:07,240 --> 00:21:11,769
second rule is not being is not is not

604
00:21:10,059 --> 00:21:13,120
taking any effect its meaning there's

605
00:21:11,769 --> 00:21:14,799
ice many packets we thought we wanted or

606
00:21:13,120 --> 00:21:16,658
being dropped maybe this doesn't matter

607
00:21:14,799 --> 00:21:18,279
at all maybe when there's an outage and

608
00:21:16,659 --> 00:21:19,690
I'm using ping to debug my issues I'm

609
00:21:18,279 --> 00:21:21,370
not be able to find them because this

610
00:21:19,690 --> 00:21:25,389
rule I thought was allowing traffic that

611
00:21:21,370 --> 00:21:26,889
I wanted for debugging is not there so

612
00:21:25,389 --> 00:21:29,289
I've given you an overview of those for

613
00:21:26,889 --> 00:21:30,668
Bettis use cases now are for Baptist

614
00:21:29,289 --> 00:21:34,330
capabilities now let's talk about how

615
00:21:30,669 --> 00:21:36,129
they can be put to use so in this first

616
00:21:34,330 --> 00:21:38,710
demo I'm going to show you continuous

617
00:21:36,129 --> 00:21:40,178
integration namely how can we actually

618
00:21:38,710 --> 00:21:41,740
test that efficient use before we deploy

619
00:21:40,179 --> 00:21:44,230
them their test network changes with

620
00:21:41,740 --> 00:21:46,210
batfish before we deploy them so we have

621
00:21:44,230 --> 00:21:48,519
some changes we want to make right we

622
00:21:46,210 --> 00:21:49,870
talk to our peers about what we're going

623
00:21:48,519 --> 00:21:51,669
to do I'm going to log into this device

624
00:21:49,870 --> 00:21:53,768
I'm going to change this config we might

625
00:21:51,669 --> 00:21:55,899
emulate things we might not and then

626
00:21:53,769 --> 00:21:57,940
will deploy them I'll probably do some

627
00:21:55,899 --> 00:21:59,439
lab tests when we use that fish we can

628
00:21:57,940 --> 00:22:00,759
do all this ahead of time and we can be

629
00:21:59,440 --> 00:22:04,389
proactive in comprehensive when we're

630
00:22:00,759 --> 00:22:07,029
doing it so in this video I've set up a

631
00:22:04,389 --> 00:22:09,100
sample github repository with Network

632
00:22:07,029 --> 00:22:10,080
config and some tests and things like

633
00:22:09,100 --> 00:22:11,669
that

634
00:22:10,080 --> 00:22:14,129
the network we're using is a very simple

635
00:22:11,670 --> 00:22:15,900
network it has you know redundant border

636
00:22:14,130 --> 00:22:18,390
core and spine routers to application

637
00:22:15,900 --> 00:22:19,560
servers attached to a leaf host and what

638
00:22:18,390 --> 00:22:21,750
we want to do in this change just cost

639
00:22:19,560 --> 00:22:23,399
out that core one router this networks

640
00:22:21,750 --> 00:22:25,740
running OSPF so I'm just gonna raise the

641
00:22:23,400 --> 00:22:27,530
cost on core one and I'm gonna do that

642
00:22:25,740 --> 00:22:30,270
by just changing the config right here

643
00:22:27,530 --> 00:22:31,800
right a typical Network mop actually

644
00:22:30,270 --> 00:22:33,600
involves I'm gonna log into the slice

645
00:22:31,800 --> 00:22:36,210
and run these commands the net effective

646
00:22:33,600 --> 00:22:37,379
which is to change these configs maybe

647
00:22:36,210 --> 00:22:38,820
using something like open fig and you

648
00:22:37,380 --> 00:22:41,640
can just upload configs do a config

649
00:22:38,820 --> 00:22:43,500
replace instead but at a high level what

650
00:22:41,640 --> 00:22:45,360
I want to do is change these OSPF costs

651
00:22:43,500 --> 00:22:47,280
so I'm gonna go cost out core one I'm

652
00:22:45,360 --> 00:22:50,070
gonna create a branch you know cost out

653
00:22:47,280 --> 00:22:51,600
core one and I'm gonna propose this

654
00:22:50,070 --> 00:22:54,090
change to someone else on my team and

655
00:22:51,600 --> 00:22:55,800
now using the standard interface whether

656
00:22:54,090 --> 00:22:58,620
it's github or bitbucket or some other

657
00:22:55,800 --> 00:22:59,850
tool you choose two years I can go okay

658
00:22:58,620 --> 00:23:01,439
this is the change I want to make when

659
00:22:59,850 --> 00:23:04,469
I'm done with this change all these

660
00:23:01,440 --> 00:23:05,970
costs are going to change sound safe

661
00:23:04,470 --> 00:23:08,520
right that's the right way to cost out a

662
00:23:05,970 --> 00:23:10,680
device but does it actually you know can

663
00:23:08,520 --> 00:23:12,090
I actually deploy it or not so I've

664
00:23:10,680 --> 00:23:14,000
integrated with another system called

665
00:23:12,090 --> 00:23:16,470
Travis that spins up a virtual machine

666
00:23:14,000 --> 00:23:19,110
downloads the configs downloads batfish

667
00:23:16,470 --> 00:23:20,400
and then run some tests on it I'm happy

668
00:23:19,110 --> 00:23:21,689
for the video here because it's it's

669
00:23:20,400 --> 00:23:23,760
speeding up through a minute of vm

670
00:23:21,690 --> 00:23:25,800
booting up but in a second what we're

671
00:23:23,760 --> 00:23:28,680
gonna see is this yellow bar which has

672
00:23:25,800 --> 00:23:30,540
in progress switches to failing so

673
00:23:28,680 --> 00:23:32,970
actually costing out that device as we

674
00:23:30,540 --> 00:23:34,110
said did not succeed and so one of the

675
00:23:32,970 --> 00:23:36,390
policies I have in this network is

676
00:23:34,110 --> 00:23:38,159
called test reach ability and so I

677
00:23:36,390 --> 00:23:41,070
expect that there's no reach ability

678
00:23:38,160 --> 00:23:43,230
loss when I cost out this device in this

679
00:23:41,070 --> 00:23:45,120
case you know it found a flow that says

680
00:23:43,230 --> 00:23:47,250
hey if you start this particular packet

681
00:23:45,120 --> 00:23:50,129
on border one destined for the web

682
00:23:47,250 --> 00:23:52,260
server it now goes through Core two but

683
00:23:50,130 --> 00:23:54,540
once we expected but at core to its

684
00:23:52,260 --> 00:23:55,920
being nola routed and there are other

685
00:23:54,540 --> 00:23:58,920
variants of that that happen at

686
00:23:55,920 --> 00:24:02,580
different versions of the network you

687
00:23:58,920 --> 00:24:03,780
know because of these cmp so without

688
00:24:02,580 --> 00:24:05,699
anyone else having to look at this even

689
00:24:03,780 --> 00:24:07,680
though I correctly configured core 1 to

690
00:24:05,700 --> 00:24:09,480
cost it out we found a bug now I'm going

691
00:24:07,680 --> 00:24:10,950
to go back in the core 2 and I made this

692
00:24:09,480 --> 00:24:12,990
example will easy for the purposes of

693
00:24:10,950 --> 00:24:14,580
this demo and hey we have this old

694
00:24:12,990 --> 00:24:16,620
static null route lung around we didn't

695
00:24:14,580 --> 00:24:18,300
want we actually had all the information

696
00:24:16,620 --> 00:24:19,409
in the previous slide where we saw that

697
00:24:18,300 --> 00:24:20,840
it was nil routed and that it was

698
00:24:19,410 --> 00:24:23,460
following this particular static route

699
00:24:20,840 --> 00:24:24,750
so let's just delete this route here

700
00:24:23,460 --> 00:24:28,050
you know we added that for debugging

701
00:24:24,750 --> 00:24:30,360
some time ago we don't want it we make a

702
00:24:28,050 --> 00:24:32,370
new proposal for a new change we update

703
00:24:30,360 --> 00:24:37,080
our proposal I guess really with the

704
00:24:32,370 --> 00:24:38,939
aggregate of both changes and then we

705
00:24:37,080 --> 00:24:42,419
again say okay here's what I'd like to

706
00:24:38,940 --> 00:24:43,830
do so the same thing is gonna happen

707
00:24:42,420 --> 00:24:45,510
right I've automatically created a new

708
00:24:43,830 --> 00:24:47,250
version of this proposal the first one

709
00:24:45,510 --> 00:24:48,420
still remember we we know why it's

710
00:24:47,250 --> 00:24:50,430
failed we can get the links for why it

711
00:24:48,420 --> 00:24:52,200
failed and the new one now is going to

712
00:24:50,430 --> 00:24:53,940
run for a little bit and pass so now

713
00:24:52,200 --> 00:24:56,100
there has been fully automated analysis

714
00:24:53,940 --> 00:24:58,590
here finding out that you know even a

715
00:24:56,100 --> 00:24:59,760
correct change had hidden side effects

716
00:24:58,590 --> 00:25:01,560
because of lingering could figure on

717
00:24:59,760 --> 00:25:03,000
some other device we were able to find

718
00:25:01,560 --> 00:25:05,370
it and fix it without even a human

719
00:25:03,000 --> 00:25:06,870
needing to get involved in that initial

720
00:25:05,370 --> 00:25:08,250
review and this is type of thing that

721
00:25:06,870 --> 00:25:09,689
the initial review probably couldn't

722
00:25:08,250 --> 00:25:14,760
have caught because it was a problem on

723
00:25:09,690 --> 00:25:17,580
some other device finally let's talk

724
00:25:14,760 --> 00:25:19,500
about what if analysis so in this case

725
00:25:17,580 --> 00:25:21,870
in that original network you know we

726
00:25:19,500 --> 00:25:23,610
have a firewall we have redundant border

727
00:25:21,870 --> 00:25:25,020
routers and core routers we believe

728
00:25:23,610 --> 00:25:27,120
those writers are redundant so what

729
00:25:25,020 --> 00:25:28,530
happens if one fails what I've done in

730
00:25:27,120 --> 00:25:30,449
this first command is used the fork

731
00:25:28,530 --> 00:25:32,460
snapshot command so take based on the

732
00:25:30,450 --> 00:25:35,820
snapshot that I uploaded at first let's

733
00:25:32,460 --> 00:25:37,320
now also fail border 1a then I can run

734
00:25:35,820 --> 00:25:39,360
the same question I showed you in Travis

735
00:25:37,320 --> 00:25:40,560
which is did was there any change in

736
00:25:39,360 --> 00:25:42,570
reach ability in my network when this

737
00:25:40,560 --> 00:25:44,399
device went down so I'm just comparing

738
00:25:42,570 --> 00:25:46,290
reach ability between that tour in

739
00:25:44,400 --> 00:25:48,540
Google on the border when a device and

740
00:25:46,290 --> 00:25:49,740
lo and behold I found no change right

741
00:25:48,540 --> 00:25:53,159
that means that at least for this

742
00:25:49,740 --> 00:25:54,540
particular set space of flows the all

743
00:25:53,160 --> 00:25:55,830
flows that were delivered before are

744
00:25:54,540 --> 00:25:57,570
still delivered all flows that were

745
00:25:55,830 --> 00:25:59,490
blocked before are still blocked across

746
00:25:57,570 --> 00:26:03,270
all types of packets you know TCP UDP

747
00:25:59,490 --> 00:26:05,430
icmp etc however we can also see what

748
00:26:03,270 --> 00:26:07,080
changed so I can run the route question

749
00:26:05,430 --> 00:26:09,150
and say diff their route tables for me

750
00:26:07,080 --> 00:26:11,129
across these devices and we'll see some

751
00:26:09,150 --> 00:26:13,410
routes are only present in the original

752
00:26:11,130 --> 00:26:15,480
snapshot the reference the one where you

753
00:26:13,410 --> 00:26:17,100
know comparing against some routes are

754
00:26:15,480 --> 00:26:19,080
present in both but maybe lost to other

755
00:26:17,100 --> 00:26:21,169
variants of ecmp

756
00:26:19,080 --> 00:26:23,550
and then a bunch of routes were lost and

757
00:26:21,170 --> 00:26:26,100
again this is now again a standard

758
00:26:23,550 --> 00:26:29,899
pandas dataframe so we can also do some

759
00:26:26,100 --> 00:26:31,949
other analysis in a second for instance

760
00:26:29,900 --> 00:26:34,230
figuring out how many routes were lost

761
00:26:31,950 --> 00:26:36,030
on each device you can see of course the

762
00:26:34,230 --> 00:26:36,410
most affected routes were on border when

763
00:26:36,030 --> 00:26:38,770
a

764
00:26:36,410 --> 00:26:41,270
- be took down it now has zero routes

765
00:26:38,770 --> 00:26:43,070
but the paired border router the

766
00:26:41,270 --> 00:26:45,139
firewall of course is directly attached

767
00:26:43,070 --> 00:26:47,659
and then a couple of the layers nearby

768
00:26:45,140 --> 00:26:48,170
also saw the routing tables impacted by

769
00:26:47,660 --> 00:26:49,850
this change

770
00:26:48,170 --> 00:26:51,440
however we know there was no reach

771
00:26:49,850 --> 00:26:53,840
ability change at least for that search

772
00:26:51,440 --> 00:26:56,360
we did above so we still know this is

773
00:26:53,840 --> 00:26:58,490
safe we can also start to analyze what

774
00:26:56,360 --> 00:27:00,709
types of routes were impacted right so

775
00:26:58,490 --> 00:27:04,160
we see you know the majority changes

776
00:27:00,710 --> 00:27:07,610
were no SPF OSPF external type 1 e 2 and

777
00:27:04,160 --> 00:27:09,590
intra area routes and so you know you

778
00:27:07,610 --> 00:27:11,360
are now able to get a sense of here's a

779
00:27:09,590 --> 00:27:12,560
change I want to make what types of

780
00:27:11,360 --> 00:27:13,850
things you know and sure my properties

781
00:27:12,560 --> 00:27:15,710
still hold and then also let me

782
00:27:13,850 --> 00:27:17,030
investigate ad hoc in an ad hoc way what

783
00:27:15,710 --> 00:27:20,420
types of things are gonna are going to

784
00:27:17,030 --> 00:27:21,530
be impacted so we also want to emphasize

785
00:27:20,420 --> 00:27:23,510
that getting start with batfish is

786
00:27:21,530 --> 00:27:25,129
pretty easy so it's one line up docker

787
00:27:23,510 --> 00:27:27,080
to download a container that will spin

788
00:27:25,130 --> 00:27:28,700
it up both spin up the server and spin

789
00:27:27,080 --> 00:27:31,399
up a jupiter notebook for you to try it

790
00:27:28,700 --> 00:27:33,980
out on your own configs and every single

791
00:27:31,400 --> 00:27:35,900
demo i gave you today has a longer form

792
00:27:33,980 --> 00:27:38,360
in both a notebook tutorial and a

793
00:27:35,900 --> 00:27:39,890
youtube video that you can watch that

794
00:27:38,360 --> 00:27:42,679
gives you you know where I did you one

795
00:27:39,890 --> 00:27:43,790
minute you might get 5 or 10 minutes to

796
00:27:42,680 --> 00:27:48,560
explain more about how you can do these

797
00:27:43,790 --> 00:27:50,330
types of analyses and more so with that

798
00:27:48,560 --> 00:27:51,169
you know there are lots of ways to get

799
00:27:50,330 --> 00:27:53,030
in touch become part of our community

800
00:27:51,170 --> 00:27:56,720
Baptist is a serious open source project

801
00:27:53,030 --> 00:27:58,190
you can join us on slack on github come

802
00:27:56,720 --> 00:28:01,880
to our website to find our videos and

803
00:27:58,190 --> 00:28:04,900
other another links and yeah thank you

804
00:28:01,880 --> 00:28:11,040
and I'm happy to take your questions now

805
00:28:04,900 --> 00:28:15,370
[Applause]

806
00:28:11,040 --> 00:28:18,060
hi this is Jacob from Facebook I have a

807
00:28:15,370 --> 00:28:21,729
question that I have been running this

808
00:28:18,060 --> 00:28:25,120
test on the configuration and be able to

809
00:28:21,730 --> 00:28:26,800
find the bugs have you maintained a list

810
00:28:25,120 --> 00:28:30,159
of the box that you have found so far

811
00:28:26,800 --> 00:28:36,250
and work with the vendor like so scourge

812
00:28:30,160 --> 00:28:37,360
anything so let's see so the list of

813
00:28:36,250 --> 00:28:38,770
bugs we found usually are in

814
00:28:37,360 --> 00:28:41,530
configuration bugs all right customer

815
00:28:38,770 --> 00:28:42,580
configuration bugs so that's not to be

816
00:28:41,530 --> 00:28:44,350
something we service to the vendors

817
00:28:42,580 --> 00:28:47,710
themselves customer and user

818
00:28:44,350 --> 00:28:49,330
configuration bugs the and then in

819
00:28:47,710 --> 00:28:51,460
general you know I can give I can give

820
00:28:49,330 --> 00:28:52,720
lots of stories of bugs we found we

821
00:28:51,460 --> 00:28:55,090
don't have a public list I think there's

822
00:28:52,720 --> 00:28:57,130
a lot of sort proprietary data locked up

823
00:28:55,090 --> 00:29:00,250
in there but lots of bugs I'm happy to

824
00:28:57,130 --> 00:29:02,770
talk about blame thank you hi I'll be

825
00:29:00,250 --> 00:29:05,560
friedman from ken deck i have almost the

826
00:29:02,770 --> 00:29:08,710
opposite question but two questions one

827
00:29:05,560 --> 00:29:10,720
is have you thought about integrating

828
00:29:08,710 --> 00:29:14,050
this to some extent with actual virtual

829
00:29:10,720 --> 00:29:15,850
router or software to find bugs because

830
00:29:14,050 --> 00:29:17,139
your if you're modeling you're assuming

831
00:29:15,850 --> 00:29:18,580
they actually implement it correctly

832
00:29:17,140 --> 00:29:21,160
which we know doesn't always happen so

833
00:29:18,580 --> 00:29:23,500
can you combine the kind of config bugs

834
00:29:21,160 --> 00:29:25,390
you find with interaction Defender boats

835
00:29:23,500 --> 00:29:27,790
and the second is have you done any work

836
00:29:25,390 --> 00:29:29,230
looking at playing traffic through the

837
00:29:27,790 --> 00:29:31,389
model rather than an all points

838
00:29:29,230 --> 00:29:33,550
potential but looking at sort of these

839
00:29:31,390 --> 00:29:35,200
are your actual historical flows and I

840
00:29:33,550 --> 00:29:37,210
have a bias because that's where I come

841
00:29:35,200 --> 00:29:38,740
from but we've been very this looks very

842
00:29:37,210 --> 00:29:40,150
cool we're gonna take a look and it's

843
00:29:38,740 --> 00:29:41,890
very interesting those the two questions

844
00:29:40,150 --> 00:29:43,060
all right let's take a second number

845
00:29:41,890 --> 00:29:45,010
both questions the first question was

846
00:29:43,060 --> 00:29:46,659
have we integrated with the actual sort

847
00:29:45,010 --> 00:29:48,790
of virtual routers now for themselves I

848
00:29:46,660 --> 00:29:50,650
would say this this technology has been

849
00:29:48,790 --> 00:29:54,550
used to actual actually find vendor bugs

850
00:29:50,650 --> 00:29:56,200
and those been reported back I think I'd

851
00:29:54,550 --> 00:29:57,550
say the batfish itself is a little bit

852
00:29:56,200 --> 00:29:59,530
more of a core technology than that so

853
00:29:57,550 --> 00:30:01,330
that's something we build around it but

854
00:29:59,530 --> 00:30:03,250
that's absolutely completely doable so

855
00:30:01,330 --> 00:30:05,139
we do and you know people have used

856
00:30:03,250 --> 00:30:06,550
batfish to actually validate lots of

857
00:30:05,140 --> 00:30:09,700
other types of systems for implementing

858
00:30:06,550 --> 00:30:12,610
things and as you alluded to it is a bit

859
00:30:09,700 --> 00:30:14,440
of a symbiotic relationship at times and

860
00:30:12,610 --> 00:30:16,149
then your second question was traffic

861
00:30:14,440 --> 00:30:19,060
matrices playing back historic traffic

862
00:30:16,150 --> 00:30:19,690
to say would any of this not potential

863
00:30:19,060 --> 00:30:21,970
traffic

864
00:30:19,690 --> 00:30:24,640
from all points but my actual traffic or

865
00:30:21,970 --> 00:30:27,130
application workloads you know playing

866
00:30:24,640 --> 00:30:31,660
through the model right so we have used

867
00:30:27,130 --> 00:30:33,100
traffic data for instance to I guess one

868
00:30:31,660 --> 00:30:34,120
question would be why would you want to

869
00:30:33,100 --> 00:30:37,570
limit your search when you could search

870
00:30:34,120 --> 00:30:39,459
everything is it mostly performance well

871
00:30:37,570 --> 00:30:40,600
if you're actually looking at out to the

872
00:30:39,460 --> 00:30:42,460
Internet which i guess is the third

873
00:30:40,600 --> 00:30:45,100
question but we can take this offline is

874
00:30:42,460 --> 00:30:48,250
then you know it's hard to simulate all

875
00:30:45,100 --> 00:30:50,409
potential things so if you're actually

876
00:30:48,250 --> 00:30:52,810
saying that you can simulate every

877
00:30:50,410 --> 00:30:53,890
single kind of potential thing I guess

878
00:30:52,810 --> 00:30:56,350
the question is what's the baseline

879
00:30:53,890 --> 00:30:57,640
right sorry cuz so that when we're

880
00:30:56,350 --> 00:30:59,889
looking for all possible things we're

881
00:30:57,640 --> 00:31:01,840
not actually enumerated all possible to

882
00:30:59,890 --> 00:31:03,670
us we are doing mathematical proofs that

883
00:31:01,840 --> 00:31:06,760
you know this particular space of flows

884
00:31:03,670 --> 00:31:09,280
and we cover everything so we don't have

885
00:31:06,760 --> 00:31:11,410
to limit our search space because we can

886
00:31:09,280 --> 00:31:13,600
actually it's faster than what's broken

887
00:31:11,410 --> 00:31:15,130
in other words my network worked at this

888
00:31:13,600 --> 00:31:17,290
state it was configured this way this is

889
00:31:15,130 --> 00:31:19,960
my actual traffic now I've changed my

890
00:31:17,290 --> 00:31:22,240
network State on and maybe correctly but

891
00:31:19,960 --> 00:31:23,650
it breaks something which you know as an

892
00:31:22,240 --> 00:31:29,440
application flow how do you know that

893
00:31:23,650 --> 00:31:30,520
from just the config if there's a I mean

894
00:31:29,440 --> 00:31:32,620
that this is there to validate your

895
00:31:30,520 --> 00:31:34,360
configuration errors right so if your

896
00:31:32,620 --> 00:31:36,399
configuration has resulted in a changed

897
00:31:34,360 --> 00:31:38,080
network then we can do we can run your

898
00:31:36,400 --> 00:31:39,130
tracer out or whatever if you've

899
00:31:38,080 --> 00:31:42,330
triggered event are you talking like

900
00:31:39,130 --> 00:31:44,500
triggering a vendor bug no this is more

901
00:31:42,330 --> 00:31:53,889
will take yourself on okay let's take it

902
00:31:44,500 --> 00:31:55,030
offline Thanks so please yeah cutting

903
00:31:53,890 --> 00:31:56,950
the Mike's here please keep your

904
00:31:55,030 --> 00:32:00,490
questions brief so we have time for the

905
00:31:56,950 --> 00:32:03,190
next presenter Jay Hannigan with impulse

906
00:32:00,490 --> 00:32:06,070
you mentioned that you can take the

907
00:32:03,190 --> 00:32:08,410
running config from a vendor and that

908
00:32:06,070 --> 00:32:10,870
fish will then convert that to a generic

909
00:32:08,410 --> 00:32:13,420
config that batfish understands can it

910
00:32:10,870 --> 00:32:15,610
do the reverse can i take for example a

911
00:32:13,420 --> 00:32:19,510
cisco config run it into batfish and out

912
00:32:15,610 --> 00:32:20,949
port it as juniper or vice versa right

913
00:32:19,510 --> 00:32:23,350
so the question was can we then compile

914
00:32:20,950 --> 00:32:26,920
back into vendor configs the answer is

915
00:32:23,350 --> 00:32:29,949
maybe not yet so what we found in

916
00:32:26,920 --> 00:32:32,080
practice is that our integrated model is

917
00:32:29,950 --> 00:32:33,639
a little bit simpler than the vendor

918
00:32:32,080 --> 00:32:35,639
models so you may you know

919
00:32:33,639 --> 00:32:38,049
for instance you can configure your BGP

920
00:32:35,639 --> 00:32:40,059
templates 20 different ways at 20

921
00:32:38,049 --> 00:32:42,309
different layers we integrate that all

922
00:32:40,059 --> 00:32:44,408
into one data model so we can you know

923
00:32:42,309 --> 00:32:45,729
suggest like hey you know this MTU is

924
00:32:44,409 --> 00:32:47,289
wrong but you might want to fix it at

925
00:32:45,729 --> 00:32:51,669
ten different layers and that'll be

926
00:32:47,289 --> 00:32:54,489
config dependent anistar show them with

927
00:32:51,669 --> 00:32:58,359
Nutanix so can this tool model any

928
00:32:54,489 --> 00:33:03,129
configurations does it support MPLS VPN

929
00:32:58,359 --> 00:33:05,589
and ipv6 the feature set is very much

930
00:33:03,129 --> 00:33:07,359
user based so based on user demand ipv6

931
00:33:05,589 --> 00:33:08,649
it's a straight line from what we

932
00:33:07,359 --> 00:33:11,109
already do to implement it but there

933
00:33:08,649 --> 00:33:13,359
hasn't really been asked for it VPN the

934
00:33:11,109 --> 00:33:14,619
support is there to varying degrees

935
00:33:13,359 --> 00:33:15,849
depending on what specific features

936
00:33:14,619 --> 00:33:17,019
you're looking for so we can definitely

937
00:33:15,849 --> 00:33:19,958
tell you for instance whether tunnels

938
00:33:17,019 --> 00:33:21,609
come up an MPLS I think the support is

939
00:33:19,959 --> 00:33:23,559
pretty shallow right now we've most been

940
00:33:21,609 --> 00:33:25,570
working in the enterprise pit space but

941
00:33:23,559 --> 00:33:27,459
this is definitely all work that we know

942
00:33:25,570 --> 00:33:27,908
how to do when we have time and demand

943
00:33:27,459 --> 00:33:31,450
for it

944
00:33:27,909 --> 00:33:31,929
ok great war Thank You Alain Hanna the

945
00:33:31,450 --> 00:33:34,119
CrowdStrike

946
00:33:31,929 --> 00:33:35,619
I think my question overlaps I was going

947
00:33:34,119 --> 00:33:38,199
to ask if you do flow placement or

948
00:33:35,619 --> 00:33:39,458
volume of traffic so currently we're

949
00:33:38,200 --> 00:33:42,039
staying away from sort of any teeny

950
00:33:39,459 --> 00:33:44,709
performance type analysis so we can tell

951
00:33:42,039 --> 00:33:46,959
you so we definitely don't do any at all

952
00:33:44,709 --> 00:33:48,429
flow allocation load load planning that

953
00:33:46,959 --> 00:33:49,929
kind of thing and then a follow-up

954
00:33:48,429 --> 00:33:52,419
question you mentioned earlier it's open

955
00:33:49,929 --> 00:33:55,179
source but you don't publish bugs can

956
00:33:52,419 --> 00:33:56,950
you explain that to me uh sorry we

957
00:33:55,179 --> 00:33:58,629
advertise bugs in our own software I'm

958
00:33:56,950 --> 00:34:01,059
saying we don't publish the bugs our

959
00:33:58,629 --> 00:34:04,238
users encounter in their own networks

960
00:34:01,059 --> 00:34:06,219
because that would be revealing ok but

961
00:34:04,239 --> 00:34:09,490
the customers yeah yeah make sense

962
00:34:06,219 --> 00:34:11,799
Thanks sorry under a chemical

963
00:34:09,489 --> 00:34:14,109
athenahealth the first questions is very

964
00:34:11,799 --> 00:34:15,460
short you showed a list of vendors and

965
00:34:14,109 --> 00:34:17,529
like one in the beginning of the slides

966
00:34:15,460 --> 00:34:19,059
one of them was cumulus is that implied

967
00:34:17,529 --> 00:34:21,730
that cumulus is supported does one of

968
00:34:19,059 --> 00:34:23,649
the vendors did we're working on cumulus

969
00:34:21,730 --> 00:34:26,710
right now it's not fully there yet but

970
00:34:23,649 --> 00:34:29,078
yeah talk to me after ok and the second

971
00:34:26,710 --> 00:34:31,990
question is as network engineers we're

972
00:34:29,079 --> 00:34:34,119
very much used to compte and CLI and you

973
00:34:31,989 --> 00:34:35,918
know do things one at a time what is the

974
00:34:34,119 --> 00:34:37,659
skill set that is reasonably expected

975
00:34:35,918 --> 00:34:40,299
from a user of batfish

976
00:34:37,659 --> 00:34:42,639
like knowledge of Python knowledge of C

977
00:34:40,299 --> 00:34:43,590
ICD like what are these development

978
00:34:42,639 --> 00:34:45,270
skills that are

979
00:34:43,590 --> 00:34:46,800
we expected I think you know we're

980
00:34:45,270 --> 00:34:49,440
trying to make the bar as low as we can

981
00:34:46,800 --> 00:34:51,180
I think the Jupiter notebooks and the

982
00:34:49,440 --> 00:34:53,940
pandas data model it's kind of the

983
00:34:51,179 --> 00:34:55,560
standard entry level like Python data

984
00:34:53,940 --> 00:34:57,660
science stuff that you'll get if you're

985
00:34:55,560 --> 00:35:01,950
joining Silicon Valley in any number of

986
00:34:57,660 --> 00:35:05,190
roles I do think some basic Python

987
00:35:01,950 --> 00:35:06,299
fluency is really helpful but also you

988
00:35:05,190 --> 00:35:07,680
know from the enterprise point of view

989
00:35:06,300 --> 00:35:15,500
we're building even easier to use tools

990
00:35:07,680 --> 00:35:15,500
okay thank you thank you

991
00:35:20,870 --> 00:35:22,930
you

