1
00:00:09,840 --> 00:00:16,990
good evening so I'm sure<font color="#CCCCCC"> getting ready</font>

2
00:00:14,860 --> 00:00:19,599
for the<font color="#E5E5E5"> beer</font><font color="#CCCCCC"> and gear party uh</font><font color="#E5E5E5"> another</font>

3
00:00:16,990 --> 00:00:21,970
<font color="#E5E5E5">one or two us coincidentally this is a</font>

4
00:00:19,599 --> 00:00:23,410
session<font color="#CCCCCC"> on beer but this is a different</font>

5
00:00:21,970 --> 00:00:27,210
type of<font color="#E5E5E5"> beer</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> takes explicit</font>

6
00:00:23,410 --> 00:00:29,109
replication<font color="#CCCCCC"> Nagendra</font><font color="#E5E5E5"> from Cisco</font>

7
00:00:27,210 --> 00:00:32,140
this would be a<font color="#E5E5E5"> resident of for today's</font>

8
00:00:29,109 --> 00:00:34,000
presentation<font color="#CCCCCC"> we look into what you know</font>

9
00:00:32,140 --> 00:00:36,760
<font color="#E5E5E5">challenge or what problem</font><font color="#CCCCCC"> beard</font><font color="#E5E5E5"> is</font>

10
00:00:34,000 --> 00:00:37,989
trying to<font color="#E5E5E5"> solve what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> beer the control</font>

11
00:00:36,760 --> 00:00:40,690
plane and the forwarding plane<font color="#CCCCCC"> semantics</font>

12
00:00:37,989 --> 00:00:42,879
associated with beer followed by<font color="#E5E5E5"> the use</font>

13
00:00:40,690 --> 00:00:46,900
cases<font color="#E5E5E5"> and the current standardization</font>

14
00:00:42,879 --> 00:00:48,430
efforts so<font color="#E5E5E5"> before jumping into beer</font>

15
00:00:46,900 --> 00:00:50,409
let's pause for<font color="#E5E5E5"> a minute and see what</font>

16
00:00:48,430 --> 00:00:52,000
problem<font color="#CCCCCC"> 9</font><font color="#E5E5E5"> or beer is are trying to solve</font>

17
00:00:50,409 --> 00:00:54,309
<font color="#E5E5E5">so with current uh you know the</font>

18
00:00:52,000 --> 00:00:58,239
multicast architecture<font color="#CCCCCC"> B's job pin</font><font color="#E5E5E5"> based</font>

19
00:00:54,309 --> 00:01:00,070
or<font color="#E5E5E5"> ml DP based it basically uses</font><font color="#CCCCCC"> a you</font>

20
00:00:58,239 --> 00:01:01,869
know even trigger tree building<font color="#E5E5E5"> concept</font>

21
00:01:00,070 --> 00:01:03,850
where<font color="#CCCCCC"> the receivers are required to</font>

22
00:01:01,869 --> 00:01:05,650
build<font color="#CCCCCC"> a tree towards the source or the</font>

23
00:01:03,850 --> 00:01:07,060
rendezvous point<font color="#E5E5E5"> creating a lot of state</font>

24
00:01:05,650 --> 00:01:08,950
<font color="#E5E5E5">and trees data plane state</font><font color="#CCCCCC"> entries all</font>

25
00:01:07,060 --> 00:01:10,420
<font color="#E5E5E5">along the path so it's not</font><font color="#CCCCCC"> just you know</font>

26
00:01:08,950 --> 00:01:11,860
data plane<font color="#CCCCCC"> state entries even for the</font>

27
00:01:10,420 --> 00:01:13,899
multicast control planes like pay more

28
00:01:11,860 --> 00:01:16,509
<font color="#E5E5E5">ml DP in order to create establish</font>

29
00:01:13,899 --> 00:01:18,880
<font color="#CCCCCC">concession maintain a lot of control</font>

30
00:01:16,509 --> 00:01:20,979
plane state<font color="#E5E5E5"> owners you know state</font>

31
00:01:18,880 --> 00:01:23,920
entries are created and maintained in

32
00:01:20,979 --> 00:01:25,299
the year all along the network achieve

33
00:01:23,920 --> 00:01:28,149
eventually I know leads us to

34
00:01:25,299 --> 00:01:30,009
scalability related issues the current

35
00:01:28,149 --> 00:01:32,679
multicast architecture does not provide

36
00:01:30,009 --> 00:01:34,270
a very efficient way of controlling<font color="#E5E5E5"> the</font>

37
00:01:32,679 --> 00:01:37,569
path over<font color="#CCCCCC"> which the</font><font color="#E5E5E5"> traffic can be</font>

38
00:01:34,270 --> 00:01:39,548
steered across<font color="#E5E5E5"> so we can't efficiently I</font>

39
00:01:37,569 --> 00:01:41,259
know distribute the load the multicast

40
00:01:39,549 --> 00:01:41,859
<font color="#E5E5E5">will load in different part</font><font color="#CCCCCC"> of the</font>

41
00:01:41,259 --> 00:01:43,810
network

42
00:01:41,859 --> 00:01:46,059
another problem is you know<font color="#CCCCCC"> poor path</font>

43
00:01:43,810 --> 00:01:48,399
resiliency so whenever there is a link

44
00:01:46,060 --> 00:01:50,289
or a node failure<font color="#E5E5E5"> along the path the</font>

45
00:01:48,399 --> 00:01:52,359
downstream<font color="#E5E5E5"> route or is expected</font><font color="#CCCCCC"> to</font>

46
00:01:50,289 --> 00:01:53,979
detect the failure<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know recompute</font>

47
00:01:52,359 --> 00:01:55,749
the<font color="#E5E5E5"> path rebuild the path and start</font>

48
00:01:53,979 --> 00:01:57,490
receiving<font color="#CCCCCC"> the traffic</font><font color="#E5E5E5"> so technically</font>

49
00:01:55,749 --> 00:01:58,839
speaking<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> f4r</font><font color="#E5E5E5"> which is no</font>

50
00:01:57,490 --> 00:01:59,439
convergence within less<font color="#CCCCCC"> than 50</font>

51
00:01:58,840 --> 00:02:02,289
milliseconds

52
00:01:59,439 --> 00:02:03,758
<font color="#E5E5E5">now on top</font><font color="#CCCCCC"> of all these</font><font color="#E5E5E5"> challenges the</font>

53
00:02:02,289 --> 00:02:04,869
current multicast architecture<font color="#E5E5E5"> was not</font>

54
00:02:03,759 --> 00:02:06,999
really<font color="#E5E5E5"> ready for software-defined</font>

55
00:02:04,869 --> 00:02:08,258
networking<font color="#E5E5E5"> for those you know I'm sure</font>

56
00:02:06,999 --> 00:02:10,060
<font color="#CCCCCC">you might</font><font color="#E5E5E5"> be aware of software-defined</font>

57
00:02:08,258 --> 00:02:11,529
networking but<font color="#E5E5E5"> in a single line you know</font>

58
00:02:10,060 --> 00:02:13,180
it's more like having<font color="#E5E5E5"> a centralized</font>

59
00:02:11,530 --> 00:02:14,530
intelligence to control the<font color="#CCCCCC"> network now</font>

60
00:02:13,180 --> 00:02:16,110
the current architecture<font color="#E5E5E5"> is not ready</font>

61
00:02:14,530 --> 00:02:19,270
for<font color="#CCCCCC"> that</font>

62
00:02:16,110 --> 00:02:20,380
so the answer here<font color="#CCCCCC"> is beer bureau is</font>

63
00:02:19,270 --> 00:02:23,110
trying to solve this you know

64
00:02:20,380 --> 00:02:25,210
<font color="#CCCCCC">challengers the primary goal of</font>

65
00:02:23,110 --> 00:02:26,470
<font color="#E5E5E5">Bureau is</font><font color="#CCCCCC"> to eliminate the straight</font>

66
00:02:25,210 --> 00:02:28,300
entries the control plane on the state

67
00:02:26,470 --> 00:02:30,430
<font color="#CCCCCC">of data plane</font><font color="#E5E5E5"> state entries from you</font>

68
00:02:28,300 --> 00:02:32,110
know the the<font color="#CCCCCC"> transfer devices and move</font>

69
00:02:30,430 --> 00:02:33,820
the data<font color="#E5E5E5"> plane state entries directly to</font>

70
00:02:32,110 --> 00:02:37,570
the packet<font color="#E5E5E5"> header</font><font color="#CCCCCC"> like what we do with</font>

71
00:02:33,820 --> 00:02:39,459
segment routing how do<font color="#E5E5E5"> we do it</font><font color="#CCCCCC"> from a</font>

72
00:02:37,570 --> 00:02:42,340
control plane<font color="#CCCCCC"> no point of view it</font>

73
00:02:39,460 --> 00:02:44,200
requires a<font color="#E5E5E5"> unique assignment of bit</font>

74
00:02:42,340 --> 00:02:45,430
positions to different edge<font color="#CCCCCC"> devices</font>

75
00:02:44,200 --> 00:02:47,619
which are connected<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the receivers and</font>

76
00:02:45,430 --> 00:02:50,170
<font color="#E5E5E5">propagate this information through</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> GP</font>

77
00:02:47,620 --> 00:02:52,570
protocol extensions<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a data plane</font>

78
00:02:50,170 --> 00:02:54,640
point of view we encode the set of

79
00:02:52,570 --> 00:02:56,260
receivers directly in a bit string which

80
00:02:54,640 --> 00:02:57,369
will be carried<font color="#CCCCCC"> in the packet</font><font color="#E5E5E5"> header</font><font color="#CCCCCC"> so</font>

81
00:02:56,260 --> 00:02:59,950
basically the bit string will identify

82
00:02:57,370 --> 00:03:01,360
the set of receivers who are interested

83
00:02:59,950 --> 00:03:02,708
to receive the stream so this way you

84
00:03:01,360 --> 00:03:04,780
know we carry the<font color="#CCCCCC"> straight entry</font>

85
00:03:02,709 --> 00:03:07,120
<font color="#E5E5E5">directly in the packet header we look</font>

86
00:03:04,780 --> 00:03:09,820
into more<font color="#E5E5E5"> about you know</font><font color="#CCCCCC"> how each of</font><font color="#E5E5E5"> the</font>

87
00:03:07,120 --> 00:03:12,220
<font color="#E5E5E5">semantics</font><font color="#CCCCCC"> words so like I said</font><font color="#E5E5E5"> the very</font>

88
00:03:09,820 --> 00:03:15,489
first thing for beer is to assign a

89
00:03:12,220 --> 00:03:17,350
unique bit position so this<font color="#E5E5E5"> is an</font>

90
00:03:15,490 --> 00:03:19,540
example<font color="#E5E5E5"> with a bit string of size</font><font color="#CCCCCC"> five</font>

91
00:03:17,350 --> 00:03:22,720
<font color="#E5E5E5">but in reality we could have more like</font>

92
00:03:19,540 --> 00:03:24,850
you know 256 or 5 1 2 1 0<font color="#E5E5E5"> 2 4 or</font><font color="#CCCCCC"> even I</font>

93
00:03:22,720 --> 00:03:28,239
know<font color="#E5E5E5"> 2 0 5 6 so going with this</font><font color="#CCCCCC"> example</font>

94
00:03:24,850 --> 00:03:30,579
of a bit string of size<font color="#E5E5E5"> 5 each of this</font>

95
00:03:28,239 --> 00:03:32,260
bit positions will be<font color="#E5E5E5"> uniquely assigned</font>

96
00:03:30,580 --> 00:03:34,209
to each<font color="#CCCCCC"> of the edge devices</font><font color="#E5E5E5"> which are</font>

97
00:03:32,260 --> 00:03:36,399
<font color="#CCCCCC">connected to</font><font color="#E5E5E5"> the receivers again this is</font>

98
00:03:34,209 --> 00:03:40,060
<font color="#E5E5E5">bit position assignment and not a binary</font>

99
00:03:36,400 --> 00:03:43,000
assignment<font color="#E5E5E5"> so we call this as B of our</font>

100
00:03:40,060 --> 00:03:44,830
ID so the bit position of<font color="#E5E5E5"> one is</font>

101
00:03:43,000 --> 00:03:47,260
assigned<font color="#E5E5E5"> to r1 the bit position of</font><font color="#CCCCCC"> two</font>

102
00:03:44,830 --> 00:03:49,450
is<font color="#E5E5E5"> assigned to r2 and</font><font color="#CCCCCC"> so on so as you</font>

103
00:03:47,260 --> 00:03:51,280
could<font color="#CCCCCC"> see the the</font><font color="#E5E5E5"> bit position basically</font>

104
00:03:49,450 --> 00:03:53,290
defines what<font color="#E5E5E5"> you know position within</font>

105
00:03:51,280 --> 00:03:55,180
the string<font color="#E5E5E5"> so you can't have</font><font color="#CCCCCC"> something</font>

106
00:03:53,290 --> 00:03:58,690
like 0 0 0 1 1<font color="#E5E5E5"> which is not a bit</font>

107
00:03:55,180 --> 00:04:00,400
position now each devices will also be

108
00:03:58,690 --> 00:04:02,470
assigned with something called<font color="#CCCCCC"> b4 prefix</font>

109
00:04:00,400 --> 00:04:04,450
which is nothing<font color="#E5E5E5"> but</font><font color="#CCCCCC"> a reachable address</font>

110
00:04:02,470 --> 00:04:07,180
<font color="#E5E5E5">within that domain preferably our</font>

111
00:04:04,450 --> 00:04:08,799
loopback address so the combination of<font color="#E5E5E5"> B</font>

112
00:04:07,180 --> 00:04:10,600
of our ID and B<font color="#E5E5E5"> of our prefix needs to</font>

113
00:04:08,800 --> 00:04:12,970
be assigned<font color="#CCCCCC"> for each</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> H</font><font color="#E5E5E5"> devices</font>

114
00:04:10,600 --> 00:04:14,079
<font color="#E5E5E5">now once you have</font><font color="#CCCCCC"> this assignment the</font>

115
00:04:12,970 --> 00:04:16,298
next<font color="#CCCCCC"> step is to propagate</font><font color="#E5E5E5"> this</font>

116
00:04:14,080 --> 00:04:19,239
information to other<font color="#E5E5E5"> beer nodes within</font>

117
00:04:16,298 --> 00:04:21,579
the domain of call it as<font color="#CCCCCC"> B a</font><font color="#E5E5E5"> domain so</font>

118
00:04:19,238 --> 00:04:23,020
in<font color="#CCCCCC"> order to do this</font><font color="#E5E5E5"> the IGP protocols</font>

119
00:04:21,579 --> 00:04:25,810
<font color="#E5E5E5">like</font><font color="#CCCCCC"> you know the link</font><font color="#E5E5E5"> state protocols</font>

120
00:04:23,020 --> 00:04:27,430
like ISI<font color="#CCCCCC"> is an OSP of its</font><font color="#E5E5E5"> it's been</font>

121
00:04:25,810 --> 00:04:29,560
extended<font color="#E5E5E5"> using different</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> t lv</font>

122
00:04:27,430 --> 00:04:32,200
<font color="#E5E5E5">some sub TL B's which allows us to</font>

123
00:04:29,560 --> 00:04:35,860
propagate this<font color="#CCCCCC"> b of our ID and b of our</font>

124
00:04:32,200 --> 00:04:36,849
prefix once we have this information

125
00:04:35,860 --> 00:04:38,800
propagated

126
00:04:36,849 --> 00:04:40,688
all of the devices<font color="#E5E5E5"> within the domain the</font>

127
00:04:38,800 --> 00:04:43,149
third step is to<font color="#E5E5E5"> know compute and</font>

128
00:04:40,689 --> 00:04:45,669
populate the forwarding<font color="#E5E5E5"> entry the</font><font color="#CCCCCC"> Biot</font>

129
00:04:43,149 --> 00:04:47,949
<font color="#E5E5E5">forwarding entry so how do</font><font color="#CCCCCC"> we do it</font>

130
00:04:45,669 --> 00:04:50,229
we basically<font color="#E5E5E5"> you know use the shortest</font>

131
00:04:47,949 --> 00:04:51,999
path algorithm or any other algorithm

132
00:04:50,229 --> 00:04:54,580
associated with the<font color="#E5E5E5"> link</font><font color="#CCCCCC"> State protocols</font>

133
00:04:51,999 --> 00:04:57,209
like OSPF or<font color="#E5E5E5"> ISAs we identify the</font>

134
00:04:54,580 --> 00:04:59,409
shortest path to the B<font color="#E5E5E5"> of our prefix and</font>

135
00:04:57,209 --> 00:05:01,119
associate that<font color="#E5E5E5"> forwarding</font><font color="#CCCCCC"> information</font>

136
00:04:59,409 --> 00:05:03,879
directly<font color="#CCCCCC"> to the bf4</font><font color="#E5E5E5"> ID which was</font>

137
00:05:01,119 --> 00:05:06,159
associated<font color="#CCCCCC"> to the B of our prefix and if</font>

138
00:05:03,879 --> 00:05:07,809
we have<font color="#E5E5E5"> more than one B of our ID which</font>

139
00:05:06,159 --> 00:05:09,580
<font color="#CCCCCC">is actually using</font><font color="#E5E5E5"> the same egress</font>

140
00:05:07,809 --> 00:05:11,499
interface or same forwarding details

141
00:05:09,580 --> 00:05:13,240
those those B<font color="#E5E5E5"> of our IDs will be</font>

142
00:05:11,499 --> 00:05:15,069
combined together<font color="#E5E5E5"> using a boolean or</font>

143
00:05:13,240 --> 00:05:18,580
operation and will be created as one

144
00:05:15,069 --> 00:05:20,319
entry so in this example<font color="#CCCCCC"> D the node D is</font>

145
00:05:18,580 --> 00:05:22,839
<font color="#E5E5E5">actually using a as the next</font><font color="#CCCCCC"> off to</font>

146
00:05:20,319 --> 00:05:26,409
reach<font color="#E5E5E5"> r1 and r2 so the B of our idea of</font>

147
00:05:22,839 --> 00:05:28,869
r1 and<font color="#E5E5E5"> r2 which</font><font color="#CCCCCC"> is 0 0 0 0</font><font color="#E5E5E5"> 1</font><font color="#CCCCCC"> and 0 0 0 1</font>

148
00:05:26,409 --> 00:05:30,759
<font color="#CCCCCC">0 will be combined as one entry using</font>

149
00:05:28,869 --> 00:05:33,429
<font color="#E5E5E5">boolean or operation which will be a</font>

150
00:05:30,759 --> 00:05:36,939
resulting<font color="#E5E5E5"> of 0 0 0 1</font><font color="#CCCCCC"> 1 so this</font><font color="#E5E5E5"> entry</font>

151
00:05:33,429 --> 00:05:38,919
will be marked with<font color="#E5E5E5"> the next top of a so</font>

152
00:05:36,939 --> 00:05:40,629
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> just the edge devices all</font><font color="#E5E5E5"> the</font>

153
00:05:38,919 --> 00:05:42,339
other devices will basically<font color="#E5E5E5"> follow this</font>

154
00:05:40,629 --> 00:05:44,469
to populate<font color="#CCCCCC"> you</font><font color="#E5E5E5"> know the B of forwarding</font>

155
00:05:42,339 --> 00:05:46,089
again when I say all the<font color="#E5E5E5"> devices the</font>

156
00:05:44,469 --> 00:05:47,439
transit devices they<font color="#CCCCCC"> are not supposed</font><font color="#E5E5E5"> to</font>

157
00:05:46,089 --> 00:05:49,269
<font color="#E5E5E5">be out there</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> not required</font><font color="#CCCCCC"> to be</font>

158
00:05:47,439 --> 00:05:51,399
assigned with a<font color="#CCCCCC"> bfr ID or B of our</font>

159
00:05:49,269 --> 00:05:52,809
prefix<font color="#E5E5E5"> but because they participate and</font>

160
00:05:51,399 --> 00:05:55,089
<font color="#CCCCCC">B of forwarding they are required to</font>

161
00:05:52,809 --> 00:05:56,559
<font color="#E5E5E5">compute you know the shortest</font><font color="#CCCCCC"> paths for</font>

162
00:05:55,089 --> 00:06:00,849
<font color="#E5E5E5">each of the B o4 prefixes and they</font>

163
00:05:56,559 --> 00:06:02,199
populate<font color="#E5E5E5"> this be a forwarding table</font><font color="#CCCCCC"> okay</font>

164
00:06:00,849 --> 00:06:03,039
so let's now look<font color="#CCCCCC"> into</font><font color="#E5E5E5"> the data plane</font>

165
00:06:02,199 --> 00:06:06,759
encapsulation

166
00:06:03,039 --> 00:06:10,149
so for each stream<font color="#CCCCCC"> like I</font><font color="#E5E5E5"> said earlier</font>

167
00:06:06,759 --> 00:06:12,249
you<font color="#E5E5E5"> know we carry or we encode the set</font>

168
00:06:10,149 --> 00:06:14,649
of B of our IDs together to form a bit

169
00:06:12,249 --> 00:06:16,569
string<font color="#E5E5E5"> so in order to carry this bit</font>

170
00:06:14,649 --> 00:06:19,209
string in the packet header<font color="#E5E5E5"> there's a</font>

171
00:06:16,569 --> 00:06:21,369
new header has been proposed called as

172
00:06:19,209 --> 00:06:23,529
via header so the bit strength field of

173
00:06:21,369 --> 00:06:25,240
the be a header basically will encode

174
00:06:23,529 --> 00:06:28,058
all the B of<font color="#E5E5E5"> our IDs were actually</font>

175
00:06:25,240 --> 00:06:29,469
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> in receiving the stream there</font>

176
00:06:28,059 --> 00:06:31,839
are other fields<font color="#E5E5E5"> in this beer header</font>

177
00:06:29,469 --> 00:06:33,579
<font color="#E5E5E5">they basically</font><font color="#CCCCCC"> solve different</font><font color="#E5E5E5"> purposes</font>

178
00:06:31,839 --> 00:06:35,499
like<font color="#CCCCCC"> for</font><font color="#E5E5E5"> example the</font><font color="#CCCCCC"> DCP is</font><font color="#E5E5E5"> used for</font>

179
00:06:33,579 --> 00:06:36,999
<font color="#E5E5E5">quality of service purpose the protocol</font>

180
00:06:35,499 --> 00:06:38,619
type<font color="#E5E5E5"> will basically identify what</font>

181
00:06:36,999 --> 00:06:40,019
payload out what packet has been<font color="#E5E5E5"> you</font>

182
00:06:38,619 --> 00:06:43,269
know encapsulated with this beer header

183
00:06:40,019 --> 00:06:46,120
the entropy<font color="#E5E5E5"> is used for load sharing and</font>

184
00:06:43,269 --> 00:06:47,800
the<font color="#CCCCCC"> beer for IR or the</font><font color="#E5E5E5"> Bo forwarding</font>

185
00:06:46,120 --> 00:06:49,959
ingress<font color="#E5E5E5"> router basically identifies</font>

186
00:06:47,800 --> 00:06:50,600
<font color="#CCCCCC">whose the ingress device which basically</font>

187
00:06:49,959 --> 00:06:53,230
<font color="#CCCCCC">n caps</font>

188
00:06:50,600 --> 00:06:57,530
later the packet with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> spear header</font>

189
00:06:53,230 --> 00:06:59,510
now because this<font color="#E5E5E5"> is a new I know</font>

190
00:06:57,530 --> 00:07:01,309
<font color="#E5E5E5">encapsulation we need a way</font><font color="#CCCCCC"> to</font>

191
00:06:59,510 --> 00:07:03,020
differentiate that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> know this packet is</font>

192
00:07:01,310 --> 00:07:04,580
a<font color="#E5E5E5"> beer packet so it needs</font><font color="#CCCCCC"> to be</font>

193
00:07:03,020 --> 00:07:06,710
performed<font color="#CCCCCC"> a lookup</font><font color="#E5E5E5"> in a different table</font>

194
00:07:04,580 --> 00:07:09,109
not<font color="#CCCCCC"> the traditional ipv4 or</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> know the</font>

195
00:07:06,710 --> 00:07:10,580
MPLS label<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> obvious way is of</font>

196
00:07:09,110 --> 00:07:13,430
course<font color="#CCCCCC"> or you know get an</font><font color="#E5E5E5"> assignment</font>

197
00:07:10,580 --> 00:07:15,349
from I Triple E for<font color="#CCCCCC"> ether type</font><font color="#E5E5E5"> so the</font>

198
00:07:13,430 --> 00:07:17,540
ether type<font color="#E5E5E5"> assigned for</font><font color="#CCCCCC"> BRS you know a</font>

199
00:07:15,350 --> 00:07:19,160
<font color="#CCCCCC">be 30 someone which which can be</font>

200
00:07:17,540 --> 00:07:20,900
included<font color="#E5E5E5"> in the a type of the layer</font><font color="#CCCCCC"> 2 a</font>

201
00:07:19,160 --> 00:07:24,170
header which identifies that this<font color="#E5E5E5"> is a</font>

202
00:07:20,900 --> 00:07:25,940
<font color="#E5E5E5">beer packet now not all the hard ways</font>

203
00:07:24,170 --> 00:07:28,240
may support<font color="#CCCCCC"> this</font><font color="#E5E5E5"> because this</font><font color="#CCCCCC"> is pretty</font>

204
00:07:25,940 --> 00:07:30,500
new<font color="#E5E5E5"> so for backward compatibility</font>

205
00:07:28,240 --> 00:07:32,120
<font color="#CCCCCC">there's another way of doing it</font><font color="#E5E5E5"> which is</font>

206
00:07:30,500 --> 00:07:35,660
MPLS based encapsulation

207
00:07:32,120 --> 00:07:37,280
so with MPLS based encapsulation you

208
00:07:35,660 --> 00:07:39,470
could consider this as context

209
00:07:37,280 --> 00:07:42,799
<font color="#CCCCCC">identifier so each of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> devices they</font>

210
00:07:39,470 --> 00:07:44,900
assign a locally unique label but the

211
00:07:42,800 --> 00:07:46,700
forwarding<font color="#E5E5E5"> semantics associated in a way</font>

212
00:07:44,900 --> 00:07:49,760
that when the packet<font color="#CCCCCC"> is received with</font>

213
00:07:46,700 --> 00:07:51,950
the top<font color="#E5E5E5"> label as the beer MPLS label the</font>

214
00:07:49,760 --> 00:07:53,750
action is to pop the label and perform a

215
00:07:51,950 --> 00:07:55,490
lookup in the beer forwarding table not

216
00:07:53,750 --> 00:07:59,780
<font color="#E5E5E5">the traditional</font><font color="#CCCCCC"> elphaba you know table</font>

217
00:07:55,490 --> 00:08:01,610
lookup so in order to<font color="#E5E5E5"> do this again you</font>

218
00:07:59,780 --> 00:08:03,710
<font color="#CCCCCC">know in addition to</font><font color="#E5E5E5"> the B of our ID and</font>

219
00:08:01,610 --> 00:08:05,480
the beer for prefixes each divisors<font color="#E5E5E5"> are</font>

220
00:08:03,710 --> 00:08:08,239
required to assign a locally unique

221
00:08:05,480 --> 00:08:10,160
label and use<font color="#CCCCCC"> our raw IGP protocol</font>

222
00:08:08,240 --> 00:08:12,830
extensions to advertise the same<font color="#E5E5E5"> so</font>

223
00:08:10,160 --> 00:08:14,960
again while in this example we show that

224
00:08:12,830 --> 00:08:17,780
the Beaufort prefix<font color="#CCCCCC"> be FR ID and B are</font>

225
00:08:14,960 --> 00:08:19,340
MPLS label<font color="#CCCCCC"> if it is the edge device all</font>

226
00:08:17,780 --> 00:08:21,020
these<font color="#E5E5E5"> three information will be assigned</font>

227
00:08:19,340 --> 00:08:22,880
and advertised<font color="#CCCCCC"> if it is a transit device</font>

228
00:08:21,020 --> 00:08:26,330
we just will<font color="#CCCCCC"> have the beer MPLS label</font>

229
00:08:22,880 --> 00:08:27,680
advertised<font color="#CCCCCC"> okay let's now put these</font>

230
00:08:26,330 --> 00:08:31,640
things together<font color="#E5E5E5"> to see</font><font color="#CCCCCC"> how the packet</font>

231
00:08:27,680 --> 00:08:32,990
forwarding<font color="#E5E5E5"> books once we have you know</font>

232
00:08:31,640 --> 00:08:36,110
the table populated and<font color="#E5E5E5"> when we receive</font>

233
00:08:32,990 --> 00:08:39,110
<font color="#CCCCCC">the beer packet</font><font color="#E5E5E5"> the first step is to get</font>

234
00:08:36,110 --> 00:08:40,969
the bit string from the be a header<font color="#E5E5E5"> and</font>

235
00:08:39,110 --> 00:08:44,480
perform a<font color="#E5E5E5"> lookup in the B of forwarding</font>

236
00:08:40,969 --> 00:08:47,900
table and do a<font color="#E5E5E5"> boolean and operation and</font>

237
00:08:44,480 --> 00:08:49,790
the resulting<font color="#CCCCCC"> output will be rewritten</font>

238
00:08:47,900 --> 00:08:52,939
in the packet<font color="#E5E5E5"> and will be forwarded to</font>

239
00:08:49,790 --> 00:08:55,010
the<font color="#E5E5E5"> next all so this way we won't</font><font color="#CCCCCC"> have</font>

240
00:08:52,940 --> 00:08:57,410
any packet duplication the the semantics

241
00:08:55,010 --> 00:08:58,880
of performing a boolean<font color="#E5E5E5"> and operation</font>

242
00:08:57,410 --> 00:09:00,949
<font color="#E5E5E5">and</font><font color="#CCCCCC"> rewrite rewriting the bit string</font><font color="#E5E5E5"> in</font>

243
00:08:58,880 --> 00:09:03,080
the header<font color="#CCCCCC"> will basically</font><font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us to</font>

244
00:09:00,950 --> 00:09:04,370
you know<font color="#E5E5E5"> forward the traffic towards</font>

245
00:09:03,080 --> 00:09:05,870
different egress interface

246
00:09:04,370 --> 00:09:07,820
which are<font color="#E5E5E5"> actually leading towards the</font>

247
00:09:05,870 --> 00:09:10,070
actual receivers<font color="#E5E5E5"> again again without any</font>

248
00:09:07,820 --> 00:09:11,870
<font color="#E5E5E5">duplication so it</font><font color="#CCCCCC"> follows the same thing</font>

249
00:09:10,070 --> 00:09:13,550
and if there are<font color="#E5E5E5"> different</font><font color="#CCCCCC"> tigress</font>

250
00:09:11,870 --> 00:09:16,010
interfaces which is actually match which

251
00:09:13,550 --> 00:09:17,959
has<font color="#CCCCCC"> be of our ID matching the</font><font color="#E5E5E5"> one in the</font>

252
00:09:16,010 --> 00:09:20,330
bit string will you know<font color="#E5E5E5"> perform the</font>

253
00:09:17,960 --> 00:09:22,670
lookup perform and operation<font color="#CCCCCC"> rewrite</font><font color="#E5E5E5"> the</font>

254
00:09:20,330 --> 00:09:26,210
header with<font color="#CCCCCC"> the relevant bit string and</font>

255
00:09:22,670 --> 00:09:28,579
<font color="#CCCCCC">we'll be forwarding it out so the</font>

256
00:09:26,210 --> 00:09:31,279
holistic<font color="#CCCCCC"> view of how it works on a you</font>

257
00:09:28,580 --> 00:09:33,320
know<font color="#E5E5E5"> overall network so imagine you know</font>

258
00:09:31,279 --> 00:09:36,500
<font color="#E5E5E5">D is interested in receiving a stream</font>

259
00:09:33,320 --> 00:09:38,540
from a or connected this was<font color="#E5E5E5"> connected</font>

260
00:09:36,500 --> 00:09:41,720
to a so<font color="#CCCCCC"> its users</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> uses a</font><font color="#E5E5E5"> sort of</font><font color="#CCCCCC"> ban</font>

261
00:09:38,540 --> 00:09:45,230
mechanisms like<font color="#E5E5E5"> carp you know BGP</font><font color="#CCCCCC"> MV</font>

262
00:09:41,720 --> 00:09:48,140
<font color="#CCCCCC">payment</font><font color="#E5E5E5"> or other you know overlay modes</font>

263
00:09:45,230 --> 00:09:50,000
to send<font color="#CCCCCC"> its</font><font color="#E5E5E5"> interest to receive this</font>

264
00:09:48,140 --> 00:09:52,400
traffic<font color="#E5E5E5"> so when it does that it also</font>

265
00:09:50,000 --> 00:09:55,010
includes its own<font color="#CCCCCC"> bfr ID this case you</font>

266
00:09:52,400 --> 00:09:57,079
know<font color="#CCCCCC"> zero zero zero one</font><font color="#E5E5E5"> so a knows that</font>

267
00:09:55,010 --> 00:10:00,140
there is<font color="#CCCCCC"> only one receiver</font><font color="#E5E5E5"> interested to</font>

268
00:09:57,080 --> 00:10:01,880
receive the stream so the the<font color="#CCCCCC"> bureau</font>

269
00:10:00,140 --> 00:10:03,890
string in the data packet will basically

270
00:10:01,880 --> 00:10:05,000
<font color="#E5E5E5">will set to the B of our ID of D which</font>

271
00:10:03,890 --> 00:10:07,790
<font color="#E5E5E5">is zero</font><font color="#CCCCCC"> zero zero one</font>

272
00:10:05,000 --> 00:10:09,650
so all<font color="#E5E5E5"> along the path you know each of</font>

273
00:10:07,790 --> 00:10:11,120
the B of<font color="#E5E5E5"> our devices basically performs</font>

274
00:10:09,650 --> 00:10:13,130
the forwarding<font color="#E5E5E5"> lookup</font><font color="#CCCCCC"> that we saw</font><font color="#E5E5E5"> in the</font>

275
00:10:11,120 --> 00:10:14,990
previous slide<font color="#E5E5E5"> and deliver the packet</font>

276
00:10:13,130 --> 00:10:16,459
towards D now imagine<font color="#CCCCCC"> there's another</font>

277
00:10:14,990 --> 00:10:18,470
receiver<font color="#CCCCCC"> interested to receive the</font>

278
00:10:16,459 --> 00:10:19,849
strain stream so<font color="#CCCCCC"> E</font><font color="#E5E5E5"> uses</font><font color="#CCCCCC"> the same order</font>

279
00:10:18,470 --> 00:10:21,680
of<font color="#CCCCCC"> an mechanism to express</font><font color="#E5E5E5"> the since</font>

280
00:10:19,850 --> 00:10:24,020
interest to our receive the traffic to a

281
00:10:21,680 --> 00:10:26,000
so any subsequent packets basically will

282
00:10:24,020 --> 00:10:28,520
carry<font color="#E5E5E5"> both the B of our idea of B and E</font>

283
00:10:26,000 --> 00:10:30,200
so the the bit<font color="#E5E5E5"> string will carry</font><font color="#CCCCCC"> zero</font>

284
00:10:28,520 --> 00:10:33,110
<font color="#CCCCCC">one zero one</font><font color="#E5E5E5"> which which</font><font color="#CCCCCC"> is nothing but</font>

285
00:10:30,200 --> 00:10:35,390
the B<font color="#CCCCCC"> of our idea of both</font><font color="#E5E5E5"> D and E so</font><font color="#CCCCCC"> the</font>

286
00:10:33,110 --> 00:10:36,950
packet goes to B because<font color="#CCCCCC"> b has</font><font color="#E5E5E5"> different</font>

287
00:10:35,390 --> 00:10:38,990
egress interface which are pointing

288
00:10:36,950 --> 00:10:41,300
<font color="#E5E5E5">towards D and E it basically replicates</font>

289
00:10:38,990 --> 00:10:43,520
the packet<font color="#E5E5E5"> sends one copy to C and</font>

290
00:10:41,300 --> 00:10:46,250
another<font color="#E5E5E5"> copy to E and as you could see</font>

291
00:10:43,520 --> 00:10:48,709
the bit string in the outgoing<font color="#E5E5E5"> packet</font>

292
00:10:46,250 --> 00:10:50,540
will<font color="#CCCCCC"> be rewritten so based on the lookup</font>

293
00:10:48,709 --> 00:10:52,189
and the boolean<font color="#CCCCCC"> and operation the the</font>

294
00:10:50,540 --> 00:10:54,110
bit string and the you<font color="#E5E5E5"> know outgoing</font>

295
00:10:52,190 --> 00:10:56,480
packet will<font color="#E5E5E5"> be rewritten so when C</font>

296
00:10:54,110 --> 00:10:58,100
receives it<font color="#CCCCCC"> it is receiving</font><font color="#E5E5E5"> with the bit</font>

297
00:10:56,480 --> 00:11:00,589
string<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is instructing</font><font color="#E5E5E5"> to deliver</font>

298
00:10:58,100 --> 00:11:02,540
the packet<font color="#CCCCCC"> only to D and not to e so</font>

299
00:11:00,589 --> 00:11:04,040
<font color="#E5E5E5">this way you know he will</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> be</font>

300
00:11:02,540 --> 00:11:06,079
receiving any duplicate packet because

301
00:11:04,040 --> 00:11:11,230
<font color="#E5E5E5">of you know the bit string in</font><font color="#CCCCCC"> the I mean</font>

302
00:11:06,080 --> 00:11:13,400
<font color="#CCCCCC">the before</font><font color="#E5E5E5"> right in the</font><font color="#CCCCCC"> bit string</font><font color="#E5E5E5"> so</font>

303
00:11:11,230 --> 00:11:14,959
just to read it the characteristics of

304
00:11:13,400 --> 00:11:17,030
beer as you could<font color="#E5E5E5"> see it's completely</font>

305
00:11:14,959 --> 00:11:18,109
stateless in nature<font color="#CCCCCC"> there's no per group</font>

306
00:11:17,030 --> 00:11:19,579
or<font color="#E5E5E5"> state entries that are</font>

307
00:11:18,110 --> 00:11:22,850
quite to be created or maintained in the

308
00:11:19,579 --> 00:11:24,500
transit notes because of for the the

309
00:11:22,850 --> 00:11:25,970
semantics of final performing boolean

310
00:11:24,500 --> 00:11:28,700
and operation<font color="#E5E5E5"> and rewriting the header</font>

311
00:11:25,970 --> 00:11:30,230
<font color="#E5E5E5">we avoid packet duplications and it's</font>

312
00:11:28,700 --> 00:11:33,709
very flexible<font color="#CCCCCC"> I'm sorry</font>

313
00:11:30,230 --> 00:11:36,200
so it's<font color="#E5E5E5"> very flexible</font><font color="#CCCCCC"> the bit string</font><font color="#E5E5E5"> so</font>

314
00:11:33,709 --> 00:11:38,750
far we solve with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> size of</font><font color="#CCCCCC"> five or</font><font color="#E5E5E5"> four</font>

315
00:11:36,200 --> 00:11:39,980
but in reality depending on the hard

316
00:11:38,750 --> 00:11:42,649
ways capability or depending<font color="#E5E5E5"> on the</font>

317
00:11:39,980 --> 00:11:47,029
requirement it could be 256 or<font color="#CCCCCC"> you know</font>

318
00:11:42,649 --> 00:11:49,700
<font color="#E5E5E5">two zero five six now you have noticed</font>

319
00:11:47,029 --> 00:11:51,829
that you know<font color="#E5E5E5"> the bit string size</font>

320
00:11:49,700 --> 00:11:53,120
basically<font color="#E5E5E5"> limits the number of receivers</font>

321
00:11:51,829 --> 00:11:54,370
<font color="#E5E5E5">because you know each of the bit</font>

322
00:11:53,120 --> 00:11:57,769
position will be assigned to<font color="#E5E5E5"> different</font>

323
00:11:54,370 --> 00:11:59,630
<font color="#E5E5E5">egress</font><font color="#CCCCCC"> or I mean edge</font><font color="#E5E5E5"> devices so does it</font>

324
00:11:57,769 --> 00:12:02,089
mean that<font color="#E5E5E5"> we can't have more receivers</font>

325
00:11:59,630 --> 00:12:03,649
actually<font color="#E5E5E5"> beard supports more receivers</font>

326
00:12:02,089 --> 00:12:05,600
<font color="#E5E5E5">and that's where the</font><font color="#CCCCCC"> sub domain comes</font>

327
00:12:03,649 --> 00:12:09,200
into picture<font color="#CCCCCC"> so</font><font color="#E5E5E5"> sub</font><font color="#CCCCCC"> domain is nothing</font>

328
00:12:05,600 --> 00:12:11,450
<font color="#E5E5E5">but I know just dividing the</font><font color="#CCCCCC"> beer</font><font color="#E5E5E5"> domain</font>

329
00:12:09,200 --> 00:12:13,700
into multiple subdomains<font color="#E5E5E5"> it's analogous</font>

330
00:12:11,450 --> 00:12:15,529
to<font color="#CCCCCC"> I GPR multi area</font><font color="#E5E5E5"> and each of the</font>

331
00:12:13,700 --> 00:12:18,470
<font color="#CCCCCC">subdomains</font><font color="#E5E5E5"> will basically assigned with</font>

332
00:12:15,529 --> 00:12:20,750
a set identifier<font color="#E5E5E5"> so a</font><font color="#CCCCCC"> combination of set</font>

333
00:12:18,470 --> 00:12:23,240
identifier and the B<font color="#E5E5E5"> of our ID could be</font>

334
00:12:20,750 --> 00:12:25,610
used to<font color="#CCCCCC"> uniquely identify</font><font color="#E5E5E5"> the receiver</font>

335
00:12:23,240 --> 00:12:27,290
for<font color="#E5E5E5"> example in this case between you</font>

336
00:12:25,610 --> 00:12:30,649
know the subdomains we can reuse the

337
00:12:27,290 --> 00:12:32,719
same<font color="#CCCCCC"> VFR ID here a and D they both use</font>

338
00:12:30,649 --> 00:12:34,339
the same<font color="#CCCCCC"> B</font><font color="#E5E5E5"> of our ID which</font><font color="#CCCCCC"> is 0 0 0</font><font color="#E5E5E5"> 1</font>

339
00:12:32,720 --> 00:12:36,110
<font color="#CCCCCC">but</font><font color="#E5E5E5"> in this case they</font><font color="#CCCCCC"> both have</font>

340
00:12:34,339 --> 00:12:39,740
<font color="#E5E5E5">different sub domain</font><font color="#CCCCCC"> ID or</font><font color="#E5E5E5"> the set</font><font color="#CCCCCC"> I set</font>

341
00:12:36,110 --> 00:12:43,010
identifier<font color="#E5E5E5"> so for a belongs to set</font><font color="#CCCCCC"> I D 1</font>

342
00:12:39,740 --> 00:12:45,380
and D<font color="#E5E5E5"> belongs to set ID 2 so 1</font><font color="#CCCCCC"> column 0</font>

343
00:12:43,010 --> 00:12:48,470
0 0 1 basically identifies a and<font color="#CCCCCC"> 2</font>

344
00:12:45,380 --> 00:12:50,209
column 0 0 0 1 identifies node B<font color="#E5E5E5"> so a</font>

345
00:12:48,470 --> 00:12:52,339
combination<font color="#E5E5E5"> of the set identifier and</font>

346
00:12:50,209 --> 00:12:56,589
the B of<font color="#CCCCCC"> our ID will be</font><font color="#E5E5E5"> useful to</font>

347
00:12:52,339 --> 00:12:59,449
uniquely identify<font color="#CCCCCC"> the B of the receiver</font>

348
00:12:56,589 --> 00:13:02,060
so this is just<font color="#E5E5E5"> an example about how you</font>

349
00:12:59,449 --> 00:13:05,089
know<font color="#E5E5E5"> the set identifier can be derived</font>

350
00:13:02,060 --> 00:13:07,939
<font color="#E5E5E5">based on a different</font><font color="#CCCCCC"> tablet string so</font>

351
00:13:05,089 --> 00:13:09,560
<font color="#E5E5E5">imagine you</font><font color="#CCCCCC"> have as you know</font><font color="#E5E5E5"> the</font>

352
00:13:07,940 --> 00:13:11,690
requirement is<font color="#E5E5E5"> to have let's say you</font>

353
00:13:09,560 --> 00:13:14,449
know thousand<font color="#E5E5E5"> five hundred edge devices</font>

354
00:13:11,690 --> 00:13:17,390
<font color="#CCCCCC">and the example that</font><font color="#E5E5E5"> we took is 1 0 to 7</font>

355
00:13:14,449 --> 00:13:19,640
so if your hardware<font color="#E5E5E5"> or</font><font color="#CCCCCC"> the devices</font>

356
00:13:17,390 --> 00:13:22,850
<font color="#E5E5E5">support you know a bit bit string of</font>

357
00:13:19,640 --> 00:13:25,069
size 2 0 5 6 1 0<font color="#E5E5E5"> 2 7 comes well within</font>

358
00:13:22,850 --> 00:13:27,949
this range<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you don't need multiple</font>

359
00:13:25,070 --> 00:13:31,190
subdomains<font color="#CCCCCC"> so the the default subdomain</font>

360
00:13:27,949 --> 00:13:31,760
<font color="#E5E5E5">ID is or the set ID is 0 so the set</font>

361
00:13:31,190 --> 00:13:33,890
identifier

362
00:13:31,760 --> 00:13:36,500
<font color="#CCCCCC">be zero and</font><font color="#E5E5E5"> your bid position</font><font color="#CCCCCC"> is 1 0 to</font>

363
00:13:33,890 --> 00:13:39,410
<font color="#CCCCCC">7</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> imagine another scenario where you</font>

364
00:13:36,500 --> 00:13:42,620
<font color="#CCCCCC">have the bit</font><font color="#E5E5E5"> string size of 1 0</font><font color="#CCCCCC"> 2 4 so</font>

365
00:13:39,410 --> 00:13:44,750
we have<font color="#E5E5E5"> 1 0 2 4 and the you know 1 0 to</font>

366
00:13:42,620 --> 00:13:46,610
7<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the bit B of our idea of 1 0</font><font color="#E5E5E5"> to 7</font>

367
00:13:44,750 --> 00:13:48,680
basically comes<font color="#CCCCCC"> outside this so we need</font>

368
00:13:46,610 --> 00:13:50,720
<font color="#E5E5E5">to</font><font color="#CCCCCC"> subdomains and the second that</font>

369
00:13:48,680 --> 00:13:53,540
<font color="#CCCCCC">subdomain</font><font color="#E5E5E5"> we basically will get the B of</font>

370
00:13:50,720 --> 00:13:56,150
our ID of 1 0<font color="#E5E5E5"> to 7 so starting with 1 0</font>

371
00:13:53,540 --> 00:13:58,699
<font color="#CCCCCC">to 5 it would</font><font color="#E5E5E5"> be 1 0 to 5 to 6 and</font><font color="#CCCCCC"> to 7</font>

372
00:13:56,150 --> 00:14:00,829
so the set identifier would be 0<font color="#CCCCCC"> and</font><font color="#E5E5E5"> 1</font>

373
00:13:58,700 --> 00:14:09,020
<font color="#E5E5E5">so the set identifier is 1 and the bit</font>

374
00:14:00,830 --> 00:14:10,940
position is 3 so between you know the

375
00:14:09,020 --> 00:14:13,370
subdomains<font color="#E5E5E5"> or the set identifier we saw</font>

376
00:14:10,940 --> 00:14:16,490
that we<font color="#E5E5E5"> can have overlapping</font><font color="#CCCCCC"> B of our</font><font color="#E5E5E5"> ID</font>

377
00:14:13,370 --> 00:14:18,650
and bit string so the ingress is

378
00:14:16,490 --> 00:14:20,480
expected or<font color="#E5E5E5"> supposed to send multiple</font>

379
00:14:18,650 --> 00:14:22,040
copies for each subdomains

380
00:14:20,480 --> 00:14:23,780
so if you have receivers in different

381
00:14:22,040 --> 00:14:25,339
subdomains<font color="#CCCCCC"> the ingress will send</font>

382
00:14:23,780 --> 00:14:27,410
multiple<font color="#CCCCCC"> copies of</font><font color="#E5E5E5"> the same packet but</font>

383
00:14:25,340 --> 00:14:29,090
the different set identifier<font color="#E5E5E5"> and the</font>

384
00:14:27,410 --> 00:14:31,189
different you know bit string that

385
00:14:29,090 --> 00:14:32,600
<font color="#E5E5E5">belongs to the set identifier</font><font color="#CCCCCC"> so in this</font>

386
00:14:31,190 --> 00:14:34,700
case we have set<font color="#CCCCCC"> already four</font><font color="#E5E5E5"> one and</font>

387
00:14:32,600 --> 00:14:36,320
<font color="#CCCCCC">two</font><font color="#E5E5E5"> with receivers so J which is the</font>

388
00:14:34,700 --> 00:14:38,210
ingress<font color="#E5E5E5"> when it</font><font color="#CCCCCC"> since the</font><font color="#E5E5E5"> packet is</font>

389
00:14:36,320 --> 00:14:39,770
basically<font color="#E5E5E5"> since two packet one with the</font>

390
00:14:38,210 --> 00:14:41,210
set identity for<font color="#CCCCCC"> off</font><font color="#E5E5E5"> one and the</font>

391
00:14:39,770 --> 00:14:43,130
relevant bit string that belongs to<font color="#E5E5E5"> set</font>

392
00:14:41,210 --> 00:14:44,900
ID<font color="#E5E5E5"> one and another one would set</font>

393
00:14:43,130 --> 00:14:49,520
identifier to with the relevant bit

394
00:14:44,900 --> 00:14:51,350
string of satiety<font color="#CCCCCC"> 2 so this is an</font>

395
00:14:49,520 --> 00:14:52,850
example of the under layer protocol

396
00:14:51,350 --> 00:14:54,680
extensions like I said<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> IP</font>

397
00:14:52,850 --> 00:14:56,990
<font color="#E5E5E5">protocols like OSPF or nice</font><font color="#CCCCCC"> ice</font><font color="#E5E5E5"> or</font>

398
00:14:54,680 --> 00:14:59,630
extended for this purpose<font color="#CCCCCC"> these are</font>

399
00:14:56,990 --> 00:15:00,980
different<font color="#E5E5E5"> sub TL leaves and you know the</font>

400
00:14:59,630 --> 00:15:03,500
TVs and<font color="#E5E5E5"> sub theories that basically</font>

401
00:15:00,980 --> 00:15:05,270
<font color="#E5E5E5">carries the details like B of our ID</font><font color="#CCCCCC"> we</font>

402
00:15:03,500 --> 00:15:13,010
<font color="#E5E5E5">have</font><font color="#CCCCCC"> four prophets</font><font color="#E5E5E5"> and the beer MPLS</font>

403
00:15:05,270 --> 00:15:15,439
label<font color="#E5E5E5"> okay so use cases I'm sure you</font>

404
00:15:13,010 --> 00:15:18,890
know quite a few might have implemented

405
00:15:15,440 --> 00:15:20,720
<font color="#CCCCCC">the multicast MVP n so notice that the</font>

406
00:15:18,890 --> 00:15:23,540
underlay<font color="#E5E5E5"> network probably have different</font>

407
00:15:20,720 --> 00:15:26,240
<font color="#CCCCCC">options</font><font color="#E5E5E5"> like we can go with a pin</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> we</font>

408
00:15:23,540 --> 00:15:27,589
can go with<font color="#E5E5E5"> ml DP or even with an ml DP</font>

409
00:15:26,240 --> 00:15:29,870
we can go with a multi-point to

410
00:15:27,590 --> 00:15:31,790
multi-point or<font color="#E5E5E5"> mp2 MP or even point</font><font color="#CCCCCC"> to</font>

411
00:15:29,870 --> 00:15:33,710
<font color="#E5E5E5">multi-point</font><font color="#CCCCCC"> or we could go</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> you know</font>

412
00:15:31,790 --> 00:15:35,360
point to multi-point traffic engineering

413
00:15:33,710 --> 00:15:36,740
or ingress replication there are

414
00:15:35,360 --> 00:15:38,990
different types of you know<font color="#E5E5E5"> options</font>

415
00:15:36,740 --> 00:15:41,840
<font color="#CCCCCC">which shows different types of purpose</font>

416
00:15:38,990 --> 00:15:44,360
now one overlay<font color="#E5E5E5"> we can have either a BGP</font>

417
00:15:41,840 --> 00:15:45,370
<font color="#E5E5E5">M VPN or we could have</font><font color="#CCCCCC"> PIM so based on</font>

418
00:15:44,360 --> 00:15:47,140
these combinations

419
00:15:45,370 --> 00:15:50,170
there are like I know<font color="#CCCCCC"> 20-plus more than</font>

420
00:15:47,140 --> 00:15:51,580
<font color="#E5E5E5">20 MVP and profiles which like I said</font>

421
00:15:50,170 --> 00:15:53,589
<font color="#CCCCCC">you know solve which will be solving</font>

422
00:15:51,580 --> 00:15:56,529
different purposes<font color="#E5E5E5"> like you're concerned</font>

423
00:15:53,589 --> 00:15:58,630
<font color="#E5E5E5">about optimal traffic forwarding between</font>

424
00:15:56,529 --> 00:16:00,610
you know<font color="#E5E5E5"> PE devices then we'll go with</font>

425
00:15:58,630 --> 00:16:01,810
one profile<font color="#CCCCCC"> wherein if we</font><font color="#E5E5E5"> are concerned</font>

426
00:16:00,610 --> 00:16:03,370
about the number<font color="#E5E5E5"> of straight entries</font>

427
00:16:01,810 --> 00:16:04,989
<font color="#E5E5E5">that we are created but</font><font color="#CCCCCC"> we can</font>

428
00:16:03,370 --> 00:16:06,970
compromise with you know the optimality

429
00:16:04,990 --> 00:16:09,070
of<font color="#E5E5E5"> the traffic forwarding then</font><font color="#CCCCCC"> go we go</font>

430
00:16:06,970 --> 00:16:10,450
with<font color="#CCCCCC"> another profile</font><font color="#E5E5E5"> but because</font><font color="#CCCCCC"> all</font>

431
00:16:09,070 --> 00:16:12,760
these characteristics<font color="#CCCCCC"> are available with</font>

432
00:16:10,450 --> 00:16:14,410
beer<font color="#E5E5E5"> we can basically eliminate the need</font>

433
00:16:12,760 --> 00:16:15,910
for all these different<font color="#CCCCCC"> profiles</font><font color="#E5E5E5"> and we</font>

434
00:16:14,410 --> 00:16:18,310
can have just one profile where the

435
00:16:15,910 --> 00:16:22,180
<font color="#E5E5E5">underlay is beer and the overlay is BGP</font>

436
00:16:18,310 --> 00:16:25,900
you know<font color="#CCCCCC"> em</font><font color="#E5E5E5"> VPN so it's not</font><font color="#CCCCCC"> just about</font>

437
00:16:22,180 --> 00:16:28,029
the<font color="#CCCCCC"> probe profile hores implemented the</font>

438
00:16:25,900 --> 00:16:31,270
MVP<font color="#CCCCCC"> and probably might be aware that</font><font color="#E5E5E5"> we</font>

439
00:16:28,029 --> 00:16:33,400
the<font color="#E5E5E5"> very basic requirement is on a per</font>

440
00:16:31,270 --> 00:16:36,760
<font color="#CCCCCC">vr of</font><font color="#E5E5E5"> basis we need</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> minimum of one</font>

441
00:16:33,400 --> 00:16:38,939
default<font color="#CCCCCC"> M DT</font><font color="#E5E5E5"> now this M DT they want</font>

442
00:16:36,760 --> 00:16:42,339
default ability is used to I know

443
00:16:38,940 --> 00:16:43,990
propagate the traffic to all the P

444
00:16:42,339 --> 00:16:45,670
devices that belongs to<font color="#E5E5E5"> the same</font><font color="#CCCCCC"> beer</font><font color="#E5E5E5"> of</font>

445
00:16:43,990 --> 00:16:47,410
now if you're<font color="#E5E5E5"> concerned about the</font>

446
00:16:45,670 --> 00:16:49,060
<font color="#E5E5E5">optimal traffic forwarding because you</font>

447
00:16:47,410 --> 00:16:50,500
know unintended receivers or onion

448
00:16:49,060 --> 00:16:52,810
<font color="#CCCCCC">tattered P's may receive both the</font>

449
00:16:50,500 --> 00:16:55,570
<font color="#E5E5E5">traffic we optionally may also have to</font>

450
00:16:52,810 --> 00:16:57,310
enable of the data entity<font color="#E5E5E5"> now</font><font color="#CCCCCC"> with the</font>

451
00:16:55,570 --> 00:16:59,110
<font color="#E5E5E5">combination of default M DT and data M</font>

452
00:16:57,310 --> 00:17:02,680
DT we create<font color="#CCCCCC"> hella</font><font color="#E5E5E5"> lot of state entries</font>

453
00:16:59,110 --> 00:17:07,059
in the code<font color="#CCCCCC"> Network now let's see how</font>

454
00:17:02,680 --> 00:17:09,188
you<font color="#CCCCCC"> know it</font><font color="#E5E5E5"> is with beer</font><font color="#CCCCCC"> so if we can</font>

455
00:17:07,059 --> 00:17:11,500
replace<font color="#E5E5E5"> those under labor the beer</font><font color="#CCCCCC"> all</font>

456
00:17:09,189 --> 00:17:13,209
we need<font color="#E5E5E5"> is again respective</font><font color="#CCCCCC"> of the</font>

457
00:17:11,500 --> 00:17:15,579
number of<font color="#CCCCCC"> we Arabs</font><font color="#E5E5E5"> all we need is</font><font color="#CCCCCC"> just</font>

458
00:17:13,209 --> 00:17:18,339
one unique<font color="#E5E5E5"> bit position of beer for ID</font>

459
00:17:15,579 --> 00:17:19,869
for each of those<font color="#CCCCCC"> PE devices</font><font color="#E5E5E5"> so with</font>

460
00:17:18,339 --> 00:17:22,780
this we completely eliminate the need

461
00:17:19,869 --> 00:17:25,569
for you<font color="#CCCCCC"> know a purveyor of default</font>

462
00:17:22,780 --> 00:17:28,270
ability and because beer can just define

463
00:17:25,569 --> 00:17:30,370
the set of receivers in<font color="#E5E5E5"> the bit string</font>

464
00:17:28,270 --> 00:17:32,620
we can<font color="#E5E5E5"> also eliminate the need for data</font>

465
00:17:30,370 --> 00:17:34,629
<font color="#CCCCCC">MDT so with this you know in</font><font color="#E5E5E5"> this</font>

466
00:17:32,620 --> 00:17:37,350
example if PE one wants to<font color="#E5E5E5"> send the</font>

467
00:17:34,630 --> 00:17:39,700
<font color="#E5E5E5">traffic</font><font color="#CCCCCC"> to all the peas that are</font>

468
00:17:37,350 --> 00:17:41,649
connected to let's say we<font color="#E5E5E5"> are of</font><font color="#CCCCCC"> read</font>

469
00:17:39,700 --> 00:17:43,450
<font color="#E5E5E5">all it needs to do was just include the</font>

470
00:17:41,650 --> 00:17:45,100
bit string of all the remote<font color="#E5E5E5"> peas that</font>

471
00:17:43,450 --> 00:17:48,520
are connected to<font color="#CCCCCC"> gr of red in this case</font>

472
00:17:45,100 --> 00:17:50,889
it simply<font color="#E5E5E5"> will set one one one</font><font color="#CCCCCC"> zero</font>

473
00:17:48,520 --> 00:17:53,950
which will<font color="#CCCCCC"> deliver the packet</font><font color="#E5E5E5"> 2 P 3 P</font><font color="#CCCCCC"> 2</font>

474
00:17:50,890 --> 00:17:56,290
and<font color="#E5E5E5"> P 4 and if it is intended to send</font>

475
00:17:53,950 --> 00:17:58,690
the traffic<font color="#CCCCCC"> only</font><font color="#E5E5E5"> to receivers which are</font>

476
00:17:56,290 --> 00:18:00,399
connected to<font color="#CCCCCC"> P 3s we are</font><font color="#E5E5E5"> afraid</font>

477
00:17:58,690 --> 00:18:02,680
need to do is just<font color="#E5E5E5"> in the traffic but</font>

478
00:18:00,400 --> 00:18:04,930
zero one zero zero set so this way

479
00:18:02,680 --> 00:18:06,790
like<font color="#CCCCCC"> I said they know we get optimality</font>

480
00:18:04,930 --> 00:18:10,690
without creating any<font color="#CCCCCC"> state</font><font color="#E5E5E5"> entries so no</font>

481
00:18:06,790 --> 00:18:12,670
need for data<font color="#E5E5E5"> MDT another question a</font>

482
00:18:10,690 --> 00:18:14,230
common<font color="#E5E5E5"> question that we get whenever</font><font color="#CCCCCC"> we</font>

483
00:18:12,670 --> 00:18:16,450
talk about<font color="#E5E5E5"> beer to different customers</font>

484
00:18:14,230 --> 00:18:18,450
is okay do<font color="#E5E5E5"> I need</font><font color="#CCCCCC"> to enable my</font><font color="#E5E5E5"> entire</font>

485
00:18:16,450 --> 00:18:20,920
network to get<font color="#E5E5E5"> I know beer support</font>

486
00:18:18,450 --> 00:18:22,240
<font color="#E5E5E5">actually the answer is no of course you</font>

487
00:18:20,920 --> 00:18:24,100
need<font color="#E5E5E5"> to enable beer on all the edge</font>

488
00:18:22,240 --> 00:18:25,150
devices<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> they can perform you</font>

489
00:18:24,100 --> 00:18:27,100
<font color="#CCCCCC">know beer encapsulation and</font>

490
00:18:25,150 --> 00:18:28,660
decapsulation<font color="#CCCCCC"> but from a transit modes</font>

491
00:18:27,100 --> 00:18:30,820
point of<font color="#E5E5E5"> your a transit networks point</font>

492
00:18:28,660 --> 00:18:33,940
of view<font color="#CCCCCC"> Bo basically allows incremental</font>

493
00:18:30,820 --> 00:18:36,159
deployment<font color="#E5E5E5"> so in this case you know we</font>

494
00:18:33,940 --> 00:18:37,750
<font color="#CCCCCC">basically actually leverage the route or</font>

495
00:18:36,160 --> 00:18:39,760
advertisement capability of the<font color="#CCCCCC"> AGP</font>

496
00:18:37,750 --> 00:18:42,490
protocols like OSPF<font color="#E5E5E5"> on</font><font color="#CCCCCC"> iis which</font>

497
00:18:39,760 --> 00:18:46,470
basically<font color="#E5E5E5"> includes the</font><font color="#CCCCCC"> the capability if</font>

498
00:18:42,490 --> 00:18:49,240
or<font color="#CCCCCC"> not it can support</font><font color="#E5E5E5"> BIA forwarding so</font>

499
00:18:46,470 --> 00:18:50,620
when any of the node they have<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know</font>

500
00:18:49,240 --> 00:18:52,540
compute the view forwarding they can

501
00:18:50,620 --> 00:18:54,040
understand if or<font color="#E5E5E5"> not the next stop</font>

502
00:18:52,540 --> 00:18:55,810
basically<font color="#CCCCCC"> suppose</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> I'm</font>

503
00:18:54,040 --> 00:18:58,600
computing the path and if I realize that

504
00:18:55,810 --> 00:19:00,250
my next<font color="#E5E5E5"> job is not a lot support we are</font>

505
00:18:58,600 --> 00:19:03,189
forwarding<font color="#E5E5E5"> all you need to do is just</font>

506
00:19:00,250 --> 00:19:05,530
identify<font color="#E5E5E5"> the next available node that</font>

507
00:19:03,190 --> 00:19:08,950
can support beer<font color="#E5E5E5"> and create a tunnel LDP</font>

508
00:19:05,530 --> 00:19:10,780
<font color="#E5E5E5">or you know</font><font color="#CCCCCC"> p2</font><font color="#E5E5E5"> MP</font><font color="#CCCCCC"> Sarria RSVP tunnel and</font>

509
00:19:08,950 --> 00:19:13,090
use the tunnel - I know forward

510
00:19:10,780 --> 00:19:14,980
<font color="#E5E5E5">encapsulate and forward the beer packets</font>

511
00:19:13,090 --> 00:19:16,389
<font color="#CCCCCC">so this way</font><font color="#E5E5E5"> the node</font><font color="#CCCCCC"> that does not</font>

512
00:19:14,980 --> 00:19:18,640
support<font color="#CCCCCC"> don't even know that</font><font color="#E5E5E5"> this is a</font>

513
00:19:16,390 --> 00:19:23,770
beer packet all it do was<font color="#E5E5E5"> simply a label</font>

514
00:19:18,640 --> 00:19:26,830
<font color="#CCCCCC">switch the packet</font><font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> let's now look</font>

515
00:19:23,770 --> 00:19:28,690
<font color="#CCCCCC">into the standardization effort beer was</font>

516
00:19:26,830 --> 00:19:31,929
so first<font color="#CCCCCC"> year proposed</font><font color="#E5E5E5"> as butter further</font>

517
00:19:28,690 --> 00:19:34,990
and number 2014<font color="#CCCCCC"> got a very good</font><font color="#E5E5E5"> support</font>

518
00:19:31,930 --> 00:19:37,240
so one new work group was formed<font color="#CCCCCC"> a</font>

519
00:19:34,990 --> 00:19:38,700
friend a Greg<font color="#CCCCCC"> Shepherd</font><font color="#E5E5E5"> is the work group</font>

520
00:19:37,240 --> 00:19:42,610
I'm sure he's somewhere<font color="#CCCCCC"> on this ground</font>

521
00:19:38,700 --> 00:19:43,660
so the first RFC has been published<font color="#E5E5E5"> or</font>

522
00:19:42,610 --> 00:19:46,620
the beer architecture the base

523
00:19:43,660 --> 00:19:48,670
architecture has<font color="#CCCCCC"> been now published</font><font color="#E5E5E5"> 8279</font>

524
00:19:46,620 --> 00:19:50,409
it's basically enjoying<font color="#E5E5E5"> multi vendor</font>

525
00:19:48,670 --> 00:19:52,690
support<font color="#E5E5E5"> you know it's a good multi</font>

526
00:19:50,410 --> 00:19:53,710
vendor collaboration so other<font color="#E5E5E5"> vendors</font>

527
00:19:52,690 --> 00:19:56,260
like cisco juniper

528
00:19:53,710 --> 00:19:57,910
<font color="#CCCCCC">huawei</font><font color="#E5E5E5"> and even other windows are you</font>

529
00:19:56,260 --> 00:20:00,910
know<font color="#CCCCCC"> nokia</font><font color="#E5E5E5"> are actually working on</font>

530
00:19:57,910 --> 00:20:04,120
<font color="#E5E5E5">standardizing this offer these are</font>

531
00:20:00,910 --> 00:20:05,680
<font color="#CCCCCC">rather you know idea of active IETF</font>

532
00:20:04,120 --> 00:20:07,510
drafts so<font color="#E5E5E5"> ignore the first one actually</font>

533
00:20:05,680 --> 00:20:08,710
<font color="#CCCCCC">the first</font><font color="#E5E5E5"> and second one out published</font>

534
00:20:07,510 --> 00:20:10,890
as RFC

535
00:20:08,710 --> 00:20:13,090
the other you know

536
00:20:10,890 --> 00:20:15,460
<font color="#CCCCCC">drafts</font><font color="#E5E5E5"> which basically are</font><font color="#CCCCCC"> the building</font>

537
00:20:13,090 --> 00:20:17,770
blocks for<font color="#CCCCCC"> the</font><font color="#E5E5E5"> end to end beer or</font>

538
00:20:15,460 --> 00:20:20,860
underactive<font color="#CCCCCC"> no</font><font color="#E5E5E5"> standardization so the</font>

539
00:20:17,770 --> 00:20:23,860
<font color="#CCCCCC">IGP</font><font color="#E5E5E5"> protocol extensions</font><font color="#CCCCCC"> how to deploy</font>

540
00:20:20,860 --> 00:20:25,479
MVP<font color="#CCCCCC"> n over beer and the beer</font><font color="#E5E5E5"> ping or</font>

541
00:20:23,860 --> 00:20:27,850
basically<font color="#CCCCCC"> the OM functionalities or</font>

542
00:20:25,480 --> 00:20:29,230
<font color="#E5E5E5">under standardization there's also an</font>

543
00:20:27,850 --> 00:20:30,760
interesting interesting<font color="#E5E5E5"> couple of</font><font color="#CCCCCC"> drafts</font>

544
00:20:29,230 --> 00:20:35,620
about you know how<font color="#E5E5E5"> we can deploy a</font>

545
00:20:30,760 --> 00:20:38,950
<font color="#E5E5E5">traffic engineering in peer network so</font>

546
00:20:35,620 --> 00:20:41,709
just to reiterate<font color="#CCCCCC"> the advantages so</font>

547
00:20:38,950 --> 00:20:43,840
basically you know because we are<font color="#E5E5E5"> using</font>

548
00:20:41,710 --> 00:20:45,309
the<font color="#CCCCCC"> bf4 prefix which is a unicast</font>

549
00:20:43,840 --> 00:20:48,428
address which is<font color="#E5E5E5"> used to derive the beer</font>

550
00:20:45,309 --> 00:20:50,260
<font color="#E5E5E5">forwarding we basically can inherit the</font>

551
00:20:48,429 --> 00:20:52,330
you know benefits<font color="#E5E5E5"> associated with</font>

552
00:20:50,260 --> 00:20:55,360
<font color="#E5E5E5">unica's forwarding to beer like the</font><font color="#CCCCCC"> afar</font>

553
00:20:52,330 --> 00:20:57,100
<font color="#CCCCCC">are there's no</font><font color="#E5E5E5"> straight entries of the</font>

554
00:20:55,360 --> 00:20:58,449
transit<font color="#E5E5E5"> nodes it makes a</font><font color="#CCCCCC"> very good</font>

555
00:20:57,100 --> 00:20:59,770
<font color="#CCCCCC">plugin for</font><font color="#E5E5E5"> software-defined networking</font>

556
00:20:58,450 --> 00:21:01,240
<font color="#E5E5E5">because from a centralized controller</font>

557
00:20:59,770 --> 00:21:02,590
all you need to do is just<font color="#CCCCCC"> create the</font>

558
00:21:01,240 --> 00:21:04,450
<font color="#CCCCCC">straight entries on the ingress device</font>

559
00:21:02,590 --> 00:21:05,860
none of the transit nodes are required

560
00:21:04,450 --> 00:21:07,960
to<font color="#CCCCCC"> create any additional state</font><font color="#E5E5E5"> entries</font>

561
00:21:05,860 --> 00:21:10,000
so it makes<font color="#E5E5E5"> it a very</font><font color="#CCCCCC"> good plug-in for</font>

562
00:21:07,960 --> 00:21:11,710
<font color="#E5E5E5">no</font><font color="#CCCCCC"> Software Defined Networking</font><font color="#E5E5E5"> and on</font>

563
00:21:10,000 --> 00:21:13,659
top<font color="#CCCCCC"> of it there is</font><font color="#E5E5E5"> no multicast control</font>

564
00:21:11,710 --> 00:21:15,400
plane protocol<font color="#CCCCCC"> no dedicated multicast</font>

565
00:21:13,659 --> 00:21:17,080
control<font color="#E5E5E5"> plane protocol for beer rather</font>

566
00:21:15,400 --> 00:21:20,970
we leverage<font color="#E5E5E5"> our existing protocols like</font>

567
00:21:17,080 --> 00:21:22,299
the<font color="#E5E5E5"> IGP protocols like OSPF</font><font color="#CCCCCC"> on Isis</font>

568
00:21:20,970 --> 00:21:25,409
that's it

569
00:21:22,299 --> 00:21:25,408
any questions

570
00:21:29,260 --> 00:21:39,650
Lee Howard<font color="#E5E5E5"> ratafia all of your examples</font>

571
00:21:32,690 --> 00:21:41,990
used ipv4 just just<font color="#E5E5E5"> checking</font><font color="#CCCCCC"> good</font>

572
00:21:39,650 --> 00:21:44,240
question yeah so I was I was<font color="#CCCCCC"> using ipv4</font>

573
00:21:41,990 --> 00:21:51,380
as an<font color="#E5E5E5"> example but it supports ipv6 as</font>

574
00:21:44,240 --> 00:21:55,060
well it's good answer for<font color="#CCCCCC"> Mellanox is</font>

575
00:21:51,380 --> 00:21:59,120
there any plans<font color="#E5E5E5"> to do a IP underlay</font>

576
00:21:55,060 --> 00:22:01,250
instead<font color="#E5E5E5"> of Paris</font><font color="#CCCCCC"> yes</font><font color="#E5E5E5"> so like I said</font>

577
00:21:59,120 --> 00:22:04,550
<font color="#E5E5E5">there are two</font><font color="#CCCCCC"> ways of encapsulation so</font>

578
00:22:01,250 --> 00:22:07,820
one is using the the layer<font color="#CCCCCC"> 2 where</font><font color="#E5E5E5"> we</font>

579
00:22:04,550 --> 00:22:09,169
<font color="#E5E5E5">have a new</font><font color="#CCCCCC"> ether type a</font><font color="#E5E5E5"> b37 and the</font>

580
00:22:07,820 --> 00:22:10,939
other one is<font color="#E5E5E5"> I know the label based</font>

581
00:22:09,170 --> 00:22:13,160
encapsulation so the label<font color="#E5E5E5"> based</font>

582
00:22:10,940 --> 00:22:15,050
encapsulation<font color="#CCCCCC"> 4 is basically for easier</font>

583
00:22:13,160 --> 00:22:16,490
time to market<font color="#E5E5E5"> and a backward</font>

584
00:22:15,050 --> 00:22:19,909
compatibility to the existing hard<font color="#E5E5E5"> base</font>

585
00:22:16,490 --> 00:22:29,600
but yes<font color="#E5E5E5"> it can be deployed in the plain</font>

586
00:22:19,910 --> 00:22:30,720
ipv4 vanilla ipv4 yes<font color="#CCCCCC"> ok all right thank</font>

587
00:22:29,600 --> 00:22:34,429
<font color="#CCCCCC">you</font><font color="#E5E5E5"> thank you</font>

588
00:22:30,720 --> 00:22:34,430
[Applause]

