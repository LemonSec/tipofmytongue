1
00:00:01,040 --> 00:00:07,500
yeah all the other microphones up here

2
00:00:03,330 --> 00:00:08,849
seem to be ipv4 ones I just like<font color="#E5E5E5"> to</font>

3
00:00:07,500 --> 00:00:11,010
introduce<font color="#E5E5E5"> our next speaker which is dino</font>

4
00:00:08,849 --> 00:00:13,830
farinacci from from<font color="#CCCCCC"> Cisco with this</font>

5
00:00:11,010 --> 00:00:21,320
colleague Clarence Phyllis<font color="#CCCCCC"> will</font><font color="#E5E5E5"> be</font>

6
00:00:13,830 --> 00:00:21,320
<font color="#E5E5E5">talking about</font><font color="#CCCCCC"> some solutions for IPTV</font>

7
00:00:24,050 --> 00:00:30,869
okay can everybody hear me yeah<font color="#CCCCCC"> okay so</font>

8
00:00:28,039 --> 00:00:32,969
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> going to talk about on an idea</font>

9
00:00:30,869 --> 00:00:36,260
called multicast only fast free<font color="#CCCCCC"> robin</font>

10
00:00:32,969 --> 00:00:38,670
and<font color="#CCCCCC"> we'll describe</font><font color="#E5E5E5"> the problem statement</font>

11
00:00:36,260 --> 00:00:40,829
solution statement give two examples how

12
00:00:38,670 --> 00:00:43,440
it works and talk about<font color="#E5E5E5"> the failure</font>

13
00:00:40,829 --> 00:00:45,780
detection mode and then what hope Phylly

14
00:00:43,440 --> 00:00:47,070
<font color="#E5E5E5">will have</font><font color="#CCCCCC"> about five minutes for four</font>

15
00:00:45,780 --> 00:00:50,820
<font color="#E5E5E5">questions clearance and</font><font color="#CCCCCC"> I could field</font>

16
00:00:47,070 --> 00:00:52,289
questions so a problem<font color="#E5E5E5"> statement packet</font>

17
00:00:50,820 --> 00:00:54,800
loss is the greatest<font color="#CCCCCC"> impact on video</font>

18
00:00:52,289 --> 00:00:58,620
applications the mean time between

19
00:00:54,800 --> 00:01:00,930
artifacts<font color="#E5E5E5"> for human are is about two</font>

20
00:00:58,620 --> 00:01:03,989
hours<font color="#E5E5E5"> that's kind of the expected norm</font>

21
00:01:00,930 --> 00:01:05,760
in the industry there's been data that

22
00:01:03,989 --> 00:01:08,039
clearance<font color="#CCCCCC"> could give references later</font>

23
00:01:05,760 --> 00:01:10,380
that usually the<font color="#E5E5E5"> node and Link failures</font>

24
00:01:08,040 --> 00:01:14,220
have a mean time between arbitration or

25
00:01:10,380 --> 00:01:15,810
between artifacts at around 100 hours so

26
00:01:14,220 --> 00:01:18,330
we don't think network failures really

27
00:01:15,810 --> 00:01:20,670
can impact very much so we're just

28
00:01:18,330 --> 00:01:22,380
<font color="#CCCCCC">trying to give you a level set on we're</font>

29
00:01:20,670 --> 00:01:25,200
actually solving a very very small

30
00:01:22,380 --> 00:01:28,470
portion or small percentage we're

31
00:01:25,200 --> 00:01:30,270
failures occur losing<font color="#E5E5E5"> iframes with 50</font>

32
00:01:28,470 --> 00:01:32,610
millisecond rerouting has some visual

33
00:01:30,270 --> 00:01:33,750
impact but pretty<font color="#CCCCCC"> much the same as 400</font>

34
00:01:32,610 --> 00:01:35,939
milliseconds so that's kind of

35
00:01:33,750 --> 00:01:37,979
interesting as well so when people<font color="#E5E5E5"> say</font>

36
00:01:35,939 --> 00:01:39,899
they need 50 millisecond failover for

37
00:01:37,979 --> 00:01:42,950
video applications the work you have to

38
00:01:39,900 --> 00:01:45,360
<font color="#E5E5E5">ask the question if that's really true</font>

39
00:01:42,950 --> 00:01:48,180
so let's<font color="#E5E5E5"> look at some switch over time</font>

40
00:01:45,360 --> 00:01:51,360
frame requirement ranges we believe with

41
00:01:48,180 --> 00:01:53,880
tuning and fast convergence features of

42
00:01:51,360 --> 00:01:56,939
routing protocols that we can get<font color="#E5E5E5"> to 500</font>

43
00:01:53,880 --> 00:01:59,429
milliseconds to a second of switchover

44
00:01:56,939 --> 00:02:01,258
times we have also<font color="#CCCCCC"> seen cases where we</font>

45
00:01:59,430 --> 00:02:03,659
can<font color="#CCCCCC"> actually tune things much better to</font>

46
00:02:01,259 --> 00:02:05,700
get between<font color="#E5E5E5"> 100 and 500 milliseconds and</font>

47
00:02:03,659 --> 00:02:08,190
<font color="#E5E5E5">I think in reality that's what's really</font>

48
00:02:05,700 --> 00:02:10,470
needed the 50<font color="#CCCCCC"> millisecond 100</font>

49
00:02:08,190 --> 00:02:12,079
millisecond time frame is something

50
00:02:10,470 --> 00:02:13,970
that's probably outside of<font color="#E5E5E5"> what the you</font>

51
00:02:12,080 --> 00:02:15,830
<font color="#E5E5E5">cast protocols could do so we're going</font>

52
00:02:13,970 --> 00:02:17,930
to focus this multicast only faster ear

53
00:02:15,830 --> 00:02:20,120
out for the 50 millisecond time frame

54
00:02:17,930 --> 00:02:21,530
and there's a perception as that is

55
00:02:20,120 --> 00:02:24,740
what's needed so we're going to<font color="#E5E5E5"> try to</font>

56
00:02:21,530 --> 00:02:26,180
do it as fast as<font color="#CCCCCC"> we can and then</font><font color="#E5E5E5"> people</font>

57
00:02:24,740 --> 00:02:31,240
that feel they need that could use this

58
00:02:26,180 --> 00:02:33,680
solution so multicast streams need

59
00:02:31,240 --> 00:02:35,840
resiliency for<font color="#CCCCCC"> network</font><font color="#E5E5E5"> outages that's</font>

60
00:02:33,680 --> 00:02:38,330
the basic problem statement we need fast

61
00:02:35,840 --> 00:02:40,700
<font color="#E5E5E5">switchover times with near-zero packet</font>

62
00:02:38,330 --> 00:02:42,950
loss you<font color="#CCCCCC"> ask the video application guys</font>

63
00:02:40,700 --> 00:02:44,119
can we drop a few packets<font color="#E5E5E5"> you know one</font>

64
00:02:42,950 --> 00:02:45,530
in every hundred thousand they say

65
00:02:44,120 --> 00:02:47,720
absolutely not because everything goes

66
00:02:45,530 --> 00:02:49,910
bonkers right I don't know if that's

67
00:02:47,720 --> 00:02:52,250
true but that's what<font color="#E5E5E5"> they say so we're</font>

68
00:02:49,910 --> 00:02:53,660
going<font color="#E5E5E5"> to try to shoot</font><font color="#CCCCCC"> for the 50 to 100</font>

69
00:02:52,250 --> 00:02:55,220
millisecond range and see if we can

70
00:02:53,660 --> 00:02:58,070
solve<font color="#E5E5E5"> it with this problem with the</font>

71
00:02:55,220 --> 00:03:01,220
solution I mean there's some existence

72
00:02:58,070 --> 00:03:03,049
<font color="#CCCCCC">II existing redundancy models that</font>

73
00:03:01,220 --> 00:03:06,140
basically says you could have one source

74
00:03:03,050 --> 00:03:07,850
that's sending a video datastream that

75
00:03:06,140 --> 00:03:10,040
sends multiple streams on diverse

76
00:03:07,850 --> 00:03:11,720
network paths they could do<font color="#CCCCCC"> it from a</font>

77
00:03:10,040 --> 00:03:13,420
separate source address separate group

78
00:03:11,720 --> 00:03:16,430
addresses doesn't matter it just emits

79
00:03:13,420 --> 00:03:18,260
basically two streams or you can have

80
00:03:16,430 --> 00:03:21,470
multiple source to send the same stream

81
00:03:18,260 --> 00:03:24,320
on the same S&G on different network

82
00:03:21,470 --> 00:03:26,750
paths as well and then devices that are

83
00:03:24,320 --> 00:03:29,000
near the receivers drop the redundant

84
00:03:26,750 --> 00:03:30,769
frames and and only forward what they

85
00:03:29,000 --> 00:03:31,970
need<font color="#CCCCCC"> to and if they fed detective</font>

86
00:03:30,769 --> 00:03:34,340
failure they could go except the other

87
00:03:31,970 --> 00:03:39,830
data stream so these<font color="#E5E5E5"> are called source</font>

88
00:03:34,340 --> 00:03:42,260
redundancy<font color="#E5E5E5"> models but to really have a</font>

89
00:03:39,830 --> 00:03:44,269
good fast switchover you can't use

90
00:03:42,260 --> 00:03:45,920
messaging<font color="#CCCCCC"> you can't use protocol on</font>

91
00:03:44,269 --> 00:03:47,780
network messaging<font color="#E5E5E5"> because it takes too</font>

92
00:03:45,920 --> 00:03:49,670
long there's propagation time over the

93
00:03:47,780 --> 00:03:51,680
lengths there's queue and processing

94
00:03:49,670 --> 00:03:55,609
time in the routers so you need

95
00:03:51,680 --> 00:03:57,950
something<font color="#E5E5E5"> to be fixed or repaired or in</font>

96
00:03:55,610 --> 00:04:00,260
hot standby before the failure occurs

97
00:03:57,950 --> 00:04:01,970
<font color="#CCCCCC">okay so you can't you have to make</font>

98
00:04:00,260 --> 00:04:03,620
before break it's just that when you're

99
00:04:01,970 --> 00:04:05,900
<font color="#CCCCCC">working at this these timeframes that's</font>

100
00:04:03,620 --> 00:04:07,489
what you have<font color="#CCCCCC"> to do you can't depend</font><font color="#E5E5E5"> on</font>

101
00:04:05,900 --> 00:04:09,080
unicast routing convergence because we

102
00:04:07,489 --> 00:04:11,299
believe the fastest we can get it is

103
00:04:09,080 --> 00:04:13,489
around 100 millisecond range and if we

104
00:04:11,299 --> 00:04:16,430
want<font color="#E5E5E5"> to go faster unicast routing may</font>

105
00:04:13,489 --> 00:04:18,649
take too long for<font color="#CCCCCC"> this level of switch</font>

106
00:04:16,430 --> 00:04:20,299
over<font color="#E5E5E5"> and of course it always needs to be</font>

107
00:04:18,649 --> 00:04:22,370
relatively<font color="#CCCCCC"> low-cost</font><font color="#E5E5E5"> I don't know if</font>

108
00:04:20,298 --> 00:04:24,229
appropriating servers is the best way to

109
00:04:22,370 --> 00:04:25,170
do things so if<font color="#CCCCCC"> we try to solve the</font>

110
00:04:24,229 --> 00:04:26,669
problem in the<font color="#E5E5E5"> network</font>

111
00:04:25,170 --> 00:04:28,650
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> probably going to be lower</font><font color="#CCCCCC"> cost and</font>

112
00:04:26,670 --> 00:04:29,550
of course everything nowadays on the

113
00:04:28,650 --> 00:04:32,400
<font color="#CCCCCC">internet</font><font color="#E5E5E5"> has</font><font color="#CCCCCC"> to be incrementally</font>

114
00:04:29,550 --> 00:04:34,560
deployable so let's talk<font color="#E5E5E5"> about this</font>

115
00:04:32,400 --> 00:04:37,200
multicast only faster ear out<font color="#CCCCCC"> the reason</font>

116
00:04:34,560 --> 00:04:39,150
we call it multicast only is because the

117
00:04:37,200 --> 00:04:40,800
multicast protocol the single protocol

118
00:04:39,150 --> 00:04:42,120
is going to solve the problem is not

119
00:04:40,800 --> 00:04:43,800
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to depend on other parts of the</font>

120
00:04:42,120 --> 00:04:46,500
<font color="#E5E5E5">system or other parts of the protocol</font>

121
00:04:43,800 --> 00:04:49,410
system so it's going to solely depend on

122
00:04:46,500 --> 00:04:50,460
<font color="#CCCCCC">PIM and it and pim doesn't have pim or</font>

123
00:04:49,410 --> 00:04:52,200
the<font color="#CCCCCC"> am river or whatever your</font>

124
00:04:50,460 --> 00:04:54,180
implementation does does not have to

125
00:04:52,200 --> 00:04:55,800
wait<font color="#CCCCCC"> for the unicast routing protocol to</font>

126
00:04:54,180 --> 00:04:58,890
converge it's going<font color="#E5E5E5"> to make decisions</font>

127
00:04:55,800 --> 00:05:01,080
unilaterally and<font color="#CCCCCC"> of course it's going to</font>

128
00:04:58,890 --> 00:05:02,760
be<font color="#CCCCCC"> make for before break and it's an</font>

129
00:05:01,080 --> 00:05:05,010
alternative the source redundancy model

130
00:05:02,760 --> 00:05:06,330
but the the redundancy<font color="#E5E5E5"> or the extra data</font>

131
00:05:05,010 --> 00:05:08,400
that sent on the network<font color="#E5E5E5"> is done inside</font>

132
00:05:06,330 --> 00:05:09,719
<font color="#E5E5E5">the network rather than on the sources</font>

133
00:05:08,400 --> 00:05:11,580
so you don't have to provision extra

134
00:05:09,720 --> 00:05:12,840
sources you don't even have to sync data

135
00:05:11,580 --> 00:05:15,510
streams because we won't deliver

136
00:05:12,840 --> 00:05:18,239
duplicates to the receivers so that's

137
00:05:15,510 --> 00:05:20,250
important and<font color="#E5E5E5"> actually the upstream</font>

138
00:05:18,240 --> 00:05:21,720
routers don't have to<font color="#E5E5E5"> support this so</font>

139
00:05:20,250 --> 00:05:23,430
there's only parts<font color="#E5E5E5"> of the networker you</font>

140
00:05:21,720 --> 00:05:25,740
may have to put that put this in so it's

141
00:05:23,430 --> 00:05:28,100
not like<font color="#E5E5E5"> a your entire ISP network or</font>

142
00:05:25,740 --> 00:05:31,590
enterprise network has to support this

143
00:05:28,100 --> 00:05:33,360
to make<font color="#CCCCCC"> it work lean and mean and simple</font>

144
00:05:31,590 --> 00:05:36,330
there are disadvantages associated with

145
00:05:33,360 --> 00:05:38,970
it this usually depends on equal<font color="#CCCCCC"> costs</font>

146
00:05:36,330 --> 00:05:41,669
multipath<font color="#E5E5E5"> okay it could also work for</font>

147
00:05:38,970 --> 00:05:44,040
non equal cost multipath as well but you

148
00:05:41,670 --> 00:05:46,380
could do that<font color="#CCCCCC"> by</font><font color="#E5E5E5"> making longer paths</font>

149
00:05:44,040 --> 00:05:48,720
through extra hops look like equal cost

150
00:05:46,380 --> 00:05:50,219
paths from a unicast routing perspective

151
00:05:48,720 --> 00:05:53,970
or you can use feasible successor

152
00:05:50,220 --> 00:05:55,740
technology as you see in me I grp but

153
00:05:53,970 --> 00:05:58,200
we've also been able to make extensions

154
00:05:55,740 --> 00:06:00,060
for ring topologies we're not all nodes

155
00:05:58,200 --> 00:06:01,740
on a ring or actually equal cost to the

156
00:06:00,060 --> 00:06:04,650
source and will actually<font color="#CCCCCC"> show you an</font>

157
00:06:01,740 --> 00:06:06,270
example of that in a minute so what

158
00:06:04,650 --> 00:06:08,130
happens is the disadvantages is that

159
00:06:06,270 --> 00:06:10,169
redundant data does go in some parts of

160
00:06:08,130 --> 00:06:13,950
the network and that's the cost you have

161
00:06:10,170 --> 00:06:15,480
to pay<font color="#E5E5E5"> to make before break but as the</font>

162
00:06:13,950 --> 00:06:16,950
membership becomes more dense that's

163
00:06:15,480 --> 00:06:20,040
less of<font color="#E5E5E5"> a problem and we'll show you</font>

164
00:06:16,950 --> 00:06:21,690
with an<font color="#CCCCCC"> example here okay so we have</font>

165
00:06:20,040 --> 00:06:23,130
this we're going<font color="#E5E5E5"> to focus on router d</font>

166
00:06:21,690 --> 00:06:25,230
which is<font color="#E5E5E5"> at the bottom we have a source</font>

167
00:06:23,130 --> 00:06:27,090
at the<font color="#E5E5E5"> top and receiver that's directly</font>

168
00:06:25,230 --> 00:06:28,890
connected to<font color="#CCCCCC"> D just</font><font color="#E5E5E5"> assume the source</font>

169
00:06:27,090 --> 00:06:31,560
and receivers are off<font color="#CCCCCC"> ethernet cell for</font>

170
00:06:28,890 --> 00:06:33,860
those boxes what we want to do is we see

171
00:06:31,560 --> 00:06:37,800
that<font color="#CCCCCC"> D has an equal cost path to s</font>

172
00:06:33,860 --> 00:06:38,740
through B and C and we know that d

173
00:06:37,800 --> 00:06:41,889
typically

174
00:06:38,740 --> 00:06:43,990
today running<font color="#CCCCCC"> PIM will send a pimp joint</font>

175
00:06:41,889 --> 00:06:45,669
message choosing one of<font color="#E5E5E5"> those equal cost</font>

176
00:06:43,990 --> 00:06:48,460
<font color="#CCCCCC">Paz let's say in this</font><font color="#E5E5E5"> case it chooses</font>

177
00:06:45,669 --> 00:06:50,349
see well that join goes to CC propagates

178
00:06:48,460 --> 00:06:51,758
it to a and then we find out<font color="#CCCCCC"> that the</font>

179
00:06:50,349 --> 00:06:55,210
<font color="#CCCCCC">datapath comes down on</font><font color="#E5E5E5"> the right hand</font>

180
00:06:51,759 --> 00:06:56,979
side pretty basic stuff<font color="#CCCCCC"> ok the extension</font>

181
00:06:55,210 --> 00:06:59,830
what we want to do is we want<font color="#CCCCCC"> D that's</font>

182
00:06:56,979 --> 00:07:01,900
configured to do multicast only ferry

183
00:06:59,830 --> 00:07:04,150
route to actually send an alternate join

184
00:07:01,900 --> 00:07:05,469
this<font color="#E5E5E5"> is safe to send an alternate join</font>

185
00:07:04,150 --> 00:07:07,568
through be because<font color="#CCCCCC"> we know it's the</font>

186
00:07:05,470 --> 00:07:09,460
shortest path towards a so we don't have

187
00:07:07,569 --> 00:07:11,740
any routing loops we know we can send

188
00:07:09,460 --> 00:07:13,270
unicast packets both ways to ask without

189
00:07:11,740 --> 00:07:15,639
looping we could<font color="#E5E5E5"> certainly do that with</font>

190
00:07:13,270 --> 00:07:17,979
joins so we send this joint or BB

191
00:07:15,639 --> 00:07:20,560
propagates<font color="#CCCCCC"> into a what's interesting to</font>

192
00:07:17,979 --> 00:07:22,270
see is a thinks that there's 20 if's

193
00:07:20,560 --> 00:07:24,580
leading to to possibly different

194
00:07:22,270 --> 00:07:26,318
<font color="#CCCCCC">receivers but in this trait in this case</font>

195
00:07:24,580 --> 00:07:28,479
we're tricking<font color="#E5E5E5"> it it's actually the</font><font color="#CCCCCC"> same</font>

196
00:07:26,319 --> 00:07:31,539
receiver and we're pulling down data on

197
00:07:28,479 --> 00:07:33,099
both paths well that dotted line path on

198
00:07:31,539 --> 00:07:35,560
the left hand side is the repair path

199
00:07:33,099 --> 00:07:37,479
that's ready<font color="#CCCCCC"> to go and what will happen</font>

200
00:07:35,560 --> 00:07:39,370
<font color="#CCCCCC">is</font><font color="#E5E5E5"> when s sends data packets it's going</font>

201
00:07:37,479 --> 00:07:41,949
to go down both paths so the<font color="#CCCCCC"> left hand</font>

202
00:07:39,370 --> 00:07:44,320
<font color="#E5E5E5">side of this topology is actually</font>

203
00:07:41,949 --> 00:07:47,199
wasting data but of course d will RPF

204
00:07:44,320 --> 00:07:49,030
check when data is received it'll RPF

205
00:07:47,199 --> 00:07:51,070
succeed when the packets are received on

206
00:07:49,030 --> 00:07:52,989
the right hand side but RPF fail when it

207
00:07:51,070 --> 00:07:54,940
received on the left hand side so the

208
00:07:52,990 --> 00:07:58,000
packets are dropped so the receiver<font color="#E5E5E5"> only</font>

209
00:07:54,940 --> 00:08:01,419
gets one it doesn't get duplicate

210
00:07:58,000 --> 00:08:03,219
packets basically in this<font color="#E5E5E5"> scenario now</font>

211
00:08:01,419 --> 00:08:05,020
yes we're wasting bandwidth on that link

212
00:08:03,219 --> 00:08:07,090
<font color="#CCCCCC">right packets don't have to come down</font>

213
00:08:05,020 --> 00:08:09,758
<font color="#E5E5E5">there but we want to receive it because</font>

214
00:08:07,090 --> 00:08:12,280
if there's a failure at on the DC<font color="#CCCCCC"> link</font>

215
00:08:09,759 --> 00:08:14,560
or<font color="#CCCCCC"> the C router or the see a link we</font>

216
00:08:12,280 --> 00:08:16,809
want to be able to receive data right

217
00:08:14,560 --> 00:08:19,990
away we're also wasting bandwidth on

218
00:08:16,810 --> 00:08:21,849
that link as well ok now the impact of

219
00:08:19,990 --> 00:08:25,150
wasted data or redundant data is

220
00:08:21,849 --> 00:08:27,400
minimized if there's a receiver upstream

221
00:08:25,150 --> 00:08:28,690
if there's a receiver off of B then you

222
00:08:27,400 --> 00:08:32,620
find out that there's only wasted

223
00:08:28,690 --> 00:08:34,029
bandwidth there's only wasted bandwidth

224
00:08:32,620 --> 00:08:35,529
on<font color="#CCCCCC"> this link and there's not wasted</font>

225
00:08:34,029 --> 00:08:37,120
bandwidth on that link because a would

226
00:08:35,529 --> 00:08:38,740
have to forward to be any ways to<font color="#E5E5E5"> get</font>

227
00:08:37,120 --> 00:08:40,299
the data to the receiver so as

228
00:08:38,740 --> 00:08:42,849
membership becomes more and more dense

229
00:08:40,299 --> 00:08:47,219
the redundancies less of an impact<font color="#CCCCCC"> ok so</font>

230
00:08:42,849 --> 00:08:47,220
that's<font color="#E5E5E5"> the basic I the ecmp example</font>

231
00:08:48,690 --> 00:08:54,160
so what happens is now is when when C

232
00:08:51,820 --> 00:08:55,990
fails or the DC link fails d makes a

233
00:08:54,160 --> 00:08:58,480
<font color="#CCCCCC">local decision to accept packets from be</font>

234
00:08:55,990 --> 00:08:59,740
<font color="#E5E5E5">okay when it does that note that this</font>

235
00:08:58,480 --> 00:09:02,740
thing<font color="#E5E5E5"> is going to go away when i hit</font>

236
00:08:59,740 --> 00:09:04,480
click OK that that link fails d detects

237
00:09:02,740 --> 00:09:06,970
the failure<font color="#E5E5E5"> and then what it will do is</font>

238
00:09:04,480 --> 00:09:08,890
I'll start accepting packets there that

239
00:09:06,970 --> 00:09:10,600
will become<font color="#E5E5E5"> my new RPF interface that</font>

240
00:09:08,890 --> 00:09:12,730
decision<font color="#CCCCCC"> is</font><font color="#E5E5E5"> made locally by the</font>

241
00:09:10,600 --> 00:09:14,560
implementation there is no signaling

242
00:09:12,730 --> 00:09:17,320
going on nobody else has to tell what's

243
00:09:14,560 --> 00:09:19,599
going on now the big question is well

244
00:09:17,320 --> 00:09:21,010
it's easy to find out that<font color="#CCCCCC"> these</font><font color="#E5E5E5"> DC link</font>

245
00:09:19,600 --> 00:09:24,910
fails because it's directly connected to

246
00:09:21,010 --> 00:09:27,340
<font color="#CCCCCC">D and it's possibly easy to find the</font>

247
00:09:24,910 --> 00:09:28,959
failure when C fails the node fails but

248
00:09:27,340 --> 00:09:31,090
it might<font color="#CCCCCC"> be hard for</font><font color="#E5E5E5"> D to notice that</font>

249
00:09:28,960 --> 00:09:32,560
the AC link fails and then later in the

250
00:09:31,090 --> 00:09:34,060
presentation will tell you<font color="#E5E5E5"> about some</font>

251
00:09:32,560 --> 00:09:35,709
failure detection schemes that we have

252
00:09:34,060 --> 00:09:37,089
but now we're going<font color="#E5E5E5"> to talk about</font>

253
00:09:35,710 --> 00:09:42,460
building and repair paths and how they

254
00:09:37,090 --> 00:09:44,230
work<font color="#CCCCCC"> ok some observations there's more</font>

255
00:09:42,460 --> 00:09:47,290
<font color="#E5E5E5">we did there's more redundant data as</font>

256
00:09:44,230 --> 00:09:49,660
you have multiple layers<font color="#CCCCCC"> of</font><font color="#E5E5E5"> ecmp so each</font>

257
00:09:47,290 --> 00:09:51,969
hop is you're going<font color="#E5E5E5"> from a receiver side</font>

258
00:09:49,660 --> 00:09:54,040
of the network up to the source you<font color="#E5E5E5"> have</font>

259
00:09:51,970 --> 00:09:56,860
more redundant data that's flowing but

260
00:09:54,040 --> 00:09:59,589
what we're noticing is that RPF failures

261
00:09:56,860 --> 00:10:01,690
at each level help reduce so you have

262
00:09:59,590 --> 00:10:03,700
redundant layers basically there's one

263
00:10:01,690 --> 00:10:05,230
hop a second hop in a third hop you have

264
00:10:03,700 --> 00:10:06,910
the redundant data come to that third

265
00:10:05,230 --> 00:10:09,070
hop and it usually gets dropped because

266
00:10:06,910 --> 00:10:10,870
of<font color="#E5E5E5"> our</font><font color="#CCCCCC"> PF failures so the duplicates</font>

267
00:10:09,070 --> 00:10:13,090
actually don't go all the<font color="#CCCCCC"> way down the</font>

268
00:10:10,870 --> 00:10:20,140
tree and<font color="#CCCCCC"> that is really</font><font color="#E5E5E5"> good if it did</font>

269
00:10:13,090 --> 00:10:23,650
maybe a non-starter solution<font color="#CCCCCC"> ok so with</font>

270
00:10:20,140 --> 00:10:25,630
non-equal paths<font color="#E5E5E5"> are used even though</font>

271
00:10:23,650 --> 00:10:27,459
longer they may be less congested we're

272
00:10:25,630 --> 00:10:29,740
date of a rice faster some more packet

273
00:10:27,460 --> 00:10:31,810
loss could occur when there's a local

274
00:10:29,740 --> 00:10:33,520
switchover so that's the key is<font color="#CCCCCC"> that</font><font color="#E5E5E5"> if</font>

275
00:10:31,810 --> 00:10:35,229
you do switch over are you receiving

276
00:10:33,520 --> 00:10:36,699
packets that you've already<font color="#E5E5E5"> forwarded to</font>

277
00:10:35,230 --> 00:10:38,800
your receivers is there going to be some

278
00:10:36,700 --> 00:10:40,870
duplicate data that's being sent or if

279
00:10:38,800 --> 00:10:42,849
the other of the other side was fast

280
00:10:40,870 --> 00:10:45,040
they're<font color="#E5E5E5"> sending new data that you missed</font>

281
00:10:42,850 --> 00:10:46,240
on the other path so would you<font color="#E5E5E5"> also miss</font>

282
00:10:45,040 --> 00:10:48,640
data so those<font color="#CCCCCC"> are some of the</font>

283
00:10:46,240 --> 00:10:50,290
<font color="#E5E5E5">observations so when we say we can do</font>

284
00:10:48,640 --> 00:10:54,100
near zero packet loss it's a little bit

285
00:10:50,290 --> 00:10:56,560
subjective if it's near zero<font color="#E5E5E5"> ok so</font>

286
00:10:54,100 --> 00:10:58,630
<font color="#E5E5E5">talking about non equal cost multipath</font>

287
00:10:56,560 --> 00:11:00,729
is we made extensions to this<font color="#E5E5E5"> proposal</font>

288
00:10:58,630 --> 00:11:01,400
to work in ring topologies a lot of isp

289
00:11:00,730 --> 00:11:03,860
networks

290
00:11:01,400 --> 00:11:06,199
have fiber in the crown that are based

291
00:11:03,860 --> 00:11:07,490
on ring topologies and so we want<font color="#E5E5E5"> to be</font>

292
00:11:06,200 --> 00:11:09,650
able to<font color="#E5E5E5"> make it work in that case</font>

293
00:11:07,490 --> 00:11:11,840
because not every notes on the ring is

294
00:11:09,650 --> 00:11:13,550
equal cost so what we'll do is we'll

295
00:11:11,840 --> 00:11:15,410
distinguish each of the interfaces as

296
00:11:13,550 --> 00:11:17,060
ring in your interfaces we have to ring

297
00:11:15,410 --> 00:11:19,430
interfaces right when you're<font color="#E5E5E5"> on a ring</font>

298
00:11:17,060 --> 00:11:21,349
at least on one ring you have to ring

299
00:11:19,430 --> 00:11:23,599
interfaces and you have these other

300
00:11:21,350 --> 00:11:27,200
interfaces that are used as well and

301
00:11:23,600 --> 00:11:28,880
then you<font color="#CCCCCC"> one of the</font><font color="#E5E5E5"> ring interfaces the</font>

302
00:11:27,200 --> 00:11:30,830
shortest path or what's traditionally

303
00:11:28,880 --> 00:11:32,390
known<font color="#CCCCCC"> as the RPF interface and the other</font>

304
00:11:30,830 --> 00:11:34,100
path is called an alternate interface

305
00:11:32,390 --> 00:11:35,810
that alternate<font color="#E5E5E5"> interface that we showed</font>

306
00:11:34,100 --> 00:11:38,300
in the last example which you send

307
00:11:35,810 --> 00:11:39,739
alternate joins on<font color="#E5E5E5"> ok and then</font><font color="#CCCCCC"> you'll</font>

308
00:11:38,300 --> 00:11:40,880
accept the joint on either interface

309
00:11:39,740 --> 00:11:42,710
that's important and we'll show you in

310
00:11:40,880 --> 00:11:44,420
the example necks and that causes

311
00:11:42,710 --> 00:11:46,340
forwarding from<font color="#E5E5E5"> one ring interface to</font>

312
00:11:44,420 --> 00:11:48,219
another ring interface and when

313
00:11:46,340 --> 00:11:50,960
accepting packets in either inter phase

314
00:11:48,220 --> 00:11:53,270
you forward on the other ring interface

315
00:11:50,960 --> 00:11:54,560
so let's show you an example here so

316
00:11:53,270 --> 00:11:57,410
that<font color="#CCCCCC"> we have the source that's directly</font>

317
00:11:54,560 --> 00:11:58,790
connected<font color="#CCCCCC"> to two basically</font><font color="#E5E5E5"> two planes</font>

318
00:11:57,410 --> 00:12:00,680
and we have that ring that's in the

319
00:11:58,790 --> 00:12:03,439
center there Andy has a directly

320
00:12:00,680 --> 00:12:05,810
connected receiver let's<font color="#E5E5E5"> start off just</font>

321
00:12:03,440 --> 00:12:07,190
focusing on e and see what he does well

322
00:12:05,810 --> 00:12:09,380
he's going<font color="#E5E5E5"> to want</font><font color="#CCCCCC"> to send a joint on</font>

323
00:12:07,190 --> 00:12:11,510
behalf of the receiver you see that the

324
00:12:09,380 --> 00:12:14,000
solid blue line is a typical RPF<font color="#E5E5E5"> PIM</font>

325
00:12:11,510 --> 00:12:16,069
join that propagates upstream towards

326
00:12:14,000 --> 00:12:18,260
the source<font color="#E5E5E5"> and that forwarding paths is</font>

327
00:12:16,070 --> 00:12:21,020
built and everything is<font color="#E5E5E5"> good and happy</font>

328
00:12:18,260 --> 00:12:23,060
this<font color="#CCCCCC"> is pretty basic</font><font color="#E5E5E5"> now what we want e</font>

329
00:12:21,020 --> 00:12:24,980
to do from its point of view it has an

330
00:12:23,060 --> 00:12:27,020
equal cost path through deep as well

331
00:12:24,980 --> 00:12:28,640
right so<font color="#CCCCCC"> just like the last example it's</font>

332
00:12:27,020 --> 00:12:30,170
going to send an alternate join you see

333
00:12:28,640 --> 00:12:31,400
that dotted line there that's saying

334
00:12:30,170 --> 00:12:34,400
it's sending an alternate<font color="#CCCCCC"> join</font><font color="#E5E5E5"> because</font>

335
00:12:31,400 --> 00:12:35,900
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> mof our algorithm d prime</font>

336
00:12:34,400 --> 00:12:37,850
receives and says ah somebody's just

337
00:12:35,900 --> 00:12:39,800
<font color="#E5E5E5">joining me and he sends a regular join</font>

338
00:12:37,850 --> 00:12:41,450
up<font color="#E5E5E5"> I made</font><font color="#CCCCCC"> it a solid arrow line because</font>

339
00:12:39,800 --> 00:12:43,430
he doesn't know<font color="#E5E5E5"> what the reason of the</font>

340
00:12:41,450 --> 00:12:46,160
joint is downstream we made no changes

341
00:12:43,430 --> 00:12:48,020
to pim the protocol we made<font color="#CCCCCC"> changes to</font>

342
00:12:46,160 --> 00:12:50,990
how the implementation sends joins

343
00:12:48,020 --> 00:12:52,430
that's all we did c prime propagates it

344
00:12:50,990 --> 00:12:54,710
up<font color="#CCCCCC"> b prime all the way up to the top and</font>

345
00:12:52,430 --> 00:12:56,349
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> these two paths so the dotted</font>

346
00:12:54,710 --> 00:12:59,030
green line shows you the repair path

347
00:12:56,350 --> 00:13:02,840
it's just<font color="#E5E5E5"> like the previous example you</font>

348
00:12:59,030 --> 00:13:04,610
<font color="#E5E5E5">know II will accept packets will accept</font>

349
00:13:02,840 --> 00:13:05,900
packets on the RPF interface but<font color="#E5E5E5"> will</font>

350
00:13:04,610 --> 00:13:08,270
drop packets there so that's no

351
00:13:05,900 --> 00:13:10,910
different what we want to focus on<font color="#E5E5E5"> is</font>

352
00:13:08,270 --> 00:13:13,160
what's going to<font color="#CCCCCC"> happen in C and D right</font>

353
00:13:10,910 --> 00:13:13,910
because C has a shortest path towards

354
00:13:13,160 --> 00:13:15,949
asked through be

355
00:13:13,910 --> 00:13:25,370
but has a longer path through<font color="#E5E5E5"> D going</font>

356
00:13:15,950 --> 00:13:27,110
all the way around the ring oh so no

357
00:13:25,370 --> 00:13:29,990
only when there's only a receiver at<font color="#CCCCCC"> E</font>

358
00:13:27,110 --> 00:13:33,800
any link or no failure on the RPF path

359
00:13:29,990 --> 00:13:36,170
is repaired just like we said if C has a

360
00:13:33,800 --> 00:13:39,290
receiver joined so out on the left hand

361
00:13:36,170 --> 00:13:43,189
side if C has a receiver join but then B

362
00:13:39,290 --> 00:13:45,260
goes down sees only RPF path then would

363
00:13:43,190 --> 00:13:47,030
be through<font color="#E5E5E5"> D so in other words unicast</font>

364
00:13:45,260 --> 00:13:50,360
routing could say I'm going<font color="#E5E5E5"> to switch</font>

365
00:13:47,030 --> 00:13:51,709
from B to D but we<font color="#E5E5E5"> don't want to wait</font>

366
00:13:50,360 --> 00:13:58,100
<font color="#CCCCCC">for unicast routing to tell us that</font>

367
00:13:51,710 --> 00:14:02,800
that's<font color="#E5E5E5"> the new path okay so what we want</font>

368
00:13:58,100 --> 00:14:07,880
to do is we want e to be able<font color="#CCCCCC"> to accept</font>

369
00:14:02,800 --> 00:14:10,579
see did I say that so what we want is we

370
00:14:07,880 --> 00:14:12,770
want C to be<font color="#CCCCCC"> able to send that that join</font>

371
00:14:10,580 --> 00:14:14,180
but if it waited on the<font color="#E5E5E5"> signaling would</font>

372
00:14:12,770 --> 00:14:18,220
happen at failure time and that takes

373
00:14:14,180 --> 00:14:21,370
too long so what we decide to do is that

374
00:14:18,220 --> 00:14:24,800
C will send an alternate join towards d

375
00:14:21,370 --> 00:14:26,810
now in the last<font color="#E5E5E5"> example we send</font>

376
00:14:24,800 --> 00:14:28,910
alternate<font color="#CCCCCC"> choice on h cmp path well the</font>

377
00:14:26,810 --> 00:14:31,189
path the alternate join you sent to<font color="#CCCCCC"> D is</font>

378
00:14:28,910 --> 00:14:34,390
on a<font color="#E5E5E5"> longer path but it's defined to be</font>

379
00:14:31,190 --> 00:14:36,740
a ring interface so it's<font color="#CCCCCC"> okay it's safe</font>

380
00:14:34,390 --> 00:14:39,650
so what happens is alternate joint gets

381
00:14:36,740 --> 00:14:42,200
sent to dee dee propagates<font color="#E5E5E5"> the alternate</font>

382
00:14:39,650 --> 00:14:45,680
joint to e now notice<font color="#CCCCCC"> here look at D for</font>

383
00:14:42,200 --> 00:14:49,640
one second DS RPF interface to the

384
00:14:45,680 --> 00:14:53,359
source is the CD link and<font color="#E5E5E5"> c is sending</font>

385
00:14:49,640 --> 00:14:55,310
it a join on the RPF interface normally

386
00:14:53,360 --> 00:14:57,050
that<font color="#E5E5E5"> just seems like wiser receiver</font>

387
00:14:55,310 --> 00:14:59,060
towards my source why isn't somebody

388
00:14:57,050 --> 00:15:01,910
else upstream worrying about it but it

389
00:14:59,060 --> 00:15:04,449
must accept this joint on this RPF

390
00:15:01,910 --> 00:15:06,890
interface and it must propagate it

391
00:15:04,450 --> 00:15:12,190
likewise because DS going to receive

392
00:15:06,890 --> 00:15:12,189
this join as well on our PF interface<font color="#CCCCCC"> ok</font>

393
00:15:12,910 --> 00:15:18,290
so<font color="#CCCCCC"> DNA only forward to the RPF enter</font>

394
00:15:16,700 --> 00:15:20,420
phase when data is received on the

395
00:15:18,290 --> 00:15:21,920
alternate RPF interface so we're going

396
00:15:20,420 --> 00:15:25,339
<font color="#E5E5E5">to see data here come around both</font>

397
00:15:21,920 --> 00:15:27,349
directions right and when he receives

398
00:15:25,340 --> 00:15:27,680
the data packet right here on this ed

399
00:15:27,350 --> 00:15:30,440
lane

400
00:15:27,680 --> 00:15:32,300
it must forward on the other link the

401
00:15:30,440 --> 00:15:34,610
data packets have to be received in both

402
00:15:32,300 --> 00:15:36,260
directions by all routers on the ring so

403
00:15:34,610 --> 00:15:38,120
when there is a failure detected it can

404
00:15:36,260 --> 00:15:41,779
the data is already arriving at its

405
00:15:38,120 --> 00:15:43,850
interface<font color="#CCCCCC"> its other interface ok and</font><font color="#E5E5E5"> so</font>

406
00:15:41,779 --> 00:15:46,130
<font color="#E5E5E5">that's how she can get data to its</font>

407
00:15:43,850 --> 00:15:47,990
directly connected receiver when say the

408
00:15:46,130 --> 00:15:52,820
<font color="#E5E5E5">B link fails the B router fails or this</font>

409
00:15:47,990 --> 00:15:54,170
CB link fails so that was the last case

410
00:15:52,820 --> 00:15:56,060
showed you that the failure happened on

411
00:15:54,170 --> 00:15:57,260
the left hand side which was the RPF

412
00:15:56,060 --> 00:15:59,229
side now we're<font color="#E5E5E5"> going to show you that</font>

413
00:15:57,260 --> 00:16:01,520
<font color="#E5E5E5">the failure happens on the repair side</font>

414
00:15:59,230 --> 00:16:04,430
<font color="#CCCCCC">ok when the failure happens on the</font>

415
00:16:01,520 --> 00:16:07,160
repair side it's also an hour PF site

416
00:16:04,430 --> 00:16:09,770
from<font color="#E5E5E5"> C's point of view from C</font><font color="#CCCCCC"> Prime</font>

417
00:16:07,160 --> 00:16:12,079
spoint of view so when C Prime has

418
00:16:09,770 --> 00:16:15,260
receivers on the alternate path right

419
00:16:12,080 --> 00:16:18,890
there he must forward on the ring other

420
00:16:15,260 --> 00:16:20,660
ring interface as well so<font color="#CCCCCC"> C prime sends</font>

421
00:16:18,890 --> 00:16:22,430
alternate joins the same way this is

422
00:16:20,660 --> 00:16:24,140
<font color="#E5E5E5">kind of a mirror image but just want to</font>

423
00:16:22,430 --> 00:16:25,880
<font color="#E5E5E5">make it clear that it doesn't matter</font><font color="#CCCCCC"> if</font>

424
00:16:24,140 --> 00:16:27,740
you're on the repair path or the<font color="#CCCCCC"> actual</font>

425
00:16:25,880 --> 00:16:31,520
path that you still have to perform the

426
00:16:27,740 --> 00:16:33,830
same sort of functions so if b goes down

427
00:16:31,520 --> 00:16:41,240
what we want to do is we want<font color="#E5E5E5"> e to</font>

428
00:16:33,830 --> 00:16:43,040
forward packets to<font color="#CCCCCC"> D prime because it's</font>

429
00:16:41,240 --> 00:16:45,260
receiving packets on its RPF interface

430
00:16:43,040 --> 00:16:48,410
so the basic rule is if you receive a

431
00:16:45,260 --> 00:16:49,670
packet on your RPF interface and you

432
00:16:48,410 --> 00:16:52,130
know that that's your primary interface

433
00:16:49,670 --> 00:16:53,870
you<font color="#E5E5E5"> also send the data on the other ring</font>

434
00:16:52,130 --> 00:16:55,640
interface as<font color="#E5E5E5"> well as all the other</font>

435
00:16:53,870 --> 00:16:57,770
interfaces that lead down the receivers

436
00:16:55,640 --> 00:17:00,620
and when you decided that you have a

437
00:16:57,770 --> 00:17:03,860
<font color="#E5E5E5">failure on</font><font color="#CCCCCC"> the RPF path you accept data</font>

438
00:17:00,620 --> 00:17:05,929
on the alternate path and if the other

439
00:17:03,860 --> 00:17:08,360
ring interface is up you forward there

440
00:17:05,929 --> 00:17:09,949
as well as forwarding it down to all the

441
00:17:08,359 --> 00:17:11,958
other interfaces where there's receivers

442
00:17:09,949 --> 00:17:14,329
and that's how we solve the problem so

443
00:17:11,959 --> 00:17:16,160
the data is like it's like<font color="#CCCCCC"> FDDI sorry</font>

444
00:17:14,329 --> 00:17:17,839
for the<font color="#CCCCCC"> bad</font><font color="#E5E5E5"> comparison but it's like</font>

445
00:17:16,160 --> 00:17:21,110
counting counter-rotating data that's

446
00:17:17,839 --> 00:17:23,599
going around<font color="#CCCCCC"> ok and and</font><font color="#E5E5E5"> you forward it</font>

447
00:17:21,109 --> 00:17:25,280
offs off of the ring only when you know

448
00:17:23,599 --> 00:17:29,559
that you're either accepting it on the

449
00:17:25,280 --> 00:17:29,559
RPF path or<font color="#CCCCCC"> the or the alternate path</font>

450
00:17:32,940 --> 00:17:39,549
okay so then I SP<font color="#E5E5E5"> deployment scenario if</font>

451
00:17:36,580 --> 00:17:41,080
you use a cube sort of topology here you

452
00:17:39,549 --> 00:17:44,019
can actually build these diverse paths

453
00:17:41,080 --> 00:17:46,330
and we could she sees from the cube

454
00:17:44,019 --> 00:17:48,039
there that the the green path is like a

455
00:17:46,330 --> 00:17:49,600
primary path and the red path could<font color="#E5E5E5"> be a</font>

456
00:17:48,039 --> 00:17:51,850
backup path and then you have

457
00:17:49,600 --> 00:17:53,949
everybody's pops that are dual located

458
00:17:51,850 --> 00:17:56,379
and what you could do is each side<font color="#CCCCCC"> of</font>

459
00:17:53,950 --> 00:17:59,049
<font color="#CCCCCC">the cube can be an MMO fr ring just like</font>

460
00:17:56,379 --> 00:18:00,549
we described<font color="#CCCCCC"> before and the alternate</font>

461
00:17:59,049 --> 00:18:02,470
joins actually bring the data down on

462
00:18:00,549 --> 00:18:04,450
each ring so if you<font color="#E5E5E5"> look at the pop one</font>

463
00:18:02,470 --> 00:18:06,429
you see that black guy right over here

464
00:18:04,450 --> 00:18:08,289
is sending a joint<font color="#E5E5E5"> and this is his</font>

465
00:18:06,429 --> 00:18:10,029
typical RPF joint<font color="#CCCCCC"> it's following</font><font color="#E5E5E5"> the</font>

466
00:18:08,289 --> 00:18:12,340
shortest path he'll<font color="#CCCCCC"> also send this</font>

467
00:18:10,029 --> 00:18:14,529
alternate joint over here and then that

468
00:18:12,340 --> 00:18:16,480
will forward along this other path here

469
00:18:14,529 --> 00:18:18,759
all these up pop<font color="#CCCCCC"> two and pop3 will do</font>

470
00:18:16,480 --> 00:18:20,679
the same<font color="#E5E5E5"> thing okay so data will be</font>

471
00:18:18,759 --> 00:18:23,799
coming<font color="#E5E5E5"> down both of</font><font color="#CCCCCC"> those edges as a hot</font>

472
00:18:20,679 --> 00:18:25,960
<font color="#CCCCCC">backup that's the primary data path and</font>

473
00:18:23,799 --> 00:18:30,309
that's the backup data path that would

474
00:18:25,960 --> 00:18:32,080
happen to each pop okay failure

475
00:18:30,309 --> 00:18:33,850
detection this is the this is the secret

476
00:18:32,080 --> 00:18:36,340
<font color="#E5E5E5">sauce I guess or the hardest part to</font>

477
00:18:33,850 --> 00:18:38,199
solve so if you have direct link

478
00:18:36,340 --> 00:18:40,570
failures they're easily detectable you

479
00:18:38,200 --> 00:18:42,309
lose signal your local hardware can tell

480
00:18:40,570 --> 00:18:44,379
you when you have a<font color="#CCCCCC"> link failure so</font>

481
00:18:42,309 --> 00:18:46,990
that's<font color="#E5E5E5"> the easiest case to be able to</font>

482
00:18:44,379 --> 00:18:49,240
detect a fault when your neighbor<font color="#E5E5E5"> goes</font>

483
00:18:46,990 --> 00:18:51,039
down you if you're on<font color="#CCCCCC"> a point-to-point</font>

484
00:18:49,240 --> 00:18:53,830
link or you're running BFD you can get

485
00:18:51,039 --> 00:18:55,929
<font color="#E5E5E5">that down in tens of milliseconds right</font>

486
00:18:53,830 --> 00:18:57,759
usually<font color="#E5E5E5"> link failure is a carrier loss</font>

487
00:18:55,929 --> 00:18:59,830
and that's<font color="#E5E5E5"> pretty quick too that's the</font>

488
00:18:57,759 --> 00:19:01,509
hardest part<font color="#CCCCCC"> is when something upstream</font>

489
00:18:59,830 --> 00:19:03,519
from you not<font color="#E5E5E5"> your link not your neighbor</font>

490
00:19:01,509 --> 00:19:05,799
but maybe upstream from you<font color="#E5E5E5"> has failed</font>

491
00:19:03,519 --> 00:19:07,090
you don't want<font color="#CCCCCC"> that failure to have to</font>

492
00:19:05,799 --> 00:19:08,200
cause a message to come all<font color="#CCCCCC"> the way down</font>

493
00:19:07,090 --> 00:19:10,509
to you because it just takes too long

494
00:19:08,200 --> 00:19:11,980
<font color="#E5E5E5">okay so that's what we're going we're</font>

495
00:19:10,509 --> 00:19:15,009
going<font color="#E5E5E5"> to focus on the upstream router in</font>

496
00:19:11,980 --> 00:19:16,120
link failure times and of<font color="#CCCCCC"> course</font><font color="#E5E5E5"> you</font>

497
00:19:15,009 --> 00:19:18,370
want<font color="#E5E5E5"> to use one solution that could</font>

498
00:19:16,120 --> 00:19:19,689
detect all cases so this<font color="#E5E5E5"> is what we</font>

499
00:19:18,370 --> 00:19:22,629
<font color="#E5E5E5">propose for the failure detection</font>

500
00:19:19,690 --> 00:19:24,759
algorithm we wanted to monitor the data

501
00:19:22,629 --> 00:19:26,709
flow on the RPF path now when we<font color="#CCCCCC"> say</font>

502
00:19:24,759 --> 00:19:29,710
<font color="#E5E5E5">monitor the data flow all we have to do</font>

503
00:19:26,710 --> 00:19:32,139
<font color="#CCCCCC">is count packets okay nothing more</font><font color="#E5E5E5"> than</font>

504
00:19:29,710 --> 00:19:33,340
<font color="#CCCCCC">that we are not asking on the hardware</font>

505
00:19:32,139 --> 00:19:35,439
to do a lot of<font color="#E5E5E5"> new things that it</font>

506
00:19:33,340 --> 00:19:37,059
doesn't currently do so we have these

507
00:19:35,440 --> 00:19:39,639
constant<font color="#E5E5E5"> bit rate applications that have</font>

508
00:19:37,059 --> 00:19:41,470
expected packet arrival time<font color="#E5E5E5"> okay and</font>

509
00:19:39,639 --> 00:19:43,899
you use counters to see if these packets

510
00:19:41,470 --> 00:19:45,420
have been received<font color="#E5E5E5"> and how often</font><font color="#CCCCCC"> you</font>

511
00:19:43,899 --> 00:19:47,820
pull to look at the counters

512
00:19:45,420 --> 00:19:49,290
is your switch<font color="#E5E5E5"> overtime budget if you</font>

513
00:19:47,820 --> 00:19:51,450
want to be able to switch over 250

514
00:19:49,290 --> 00:19:53,370
milliseconds you check the hardware 50

515
00:19:51,450 --> 00:19:55,200
milliseconds at a time and that would<font color="#CCCCCC"> be</font>

516
00:19:53,370 --> 00:19:56,489
your polling interval if the counter

517
00:19:55,200 --> 00:19:58,260
doesn't increment within that interval

518
00:19:56,490 --> 00:20:00,470
you know you're<font color="#E5E5E5"> not receiving data on</font>

519
00:19:58,260 --> 00:20:04,830
that interface there might be a failure

520
00:20:00,470 --> 00:20:06,810
<font color="#CCCCCC">okay so if you think you should receive</font>

521
00:20:04,830 --> 00:20:08,610
no data in that if the counter doesn't

522
00:20:06,810 --> 00:20:10,050
increment in that time frame then just

523
00:20:08,610 --> 00:20:12,600
switch<font color="#CCCCCC"> to the alternate interface if</font>

524
00:20:10,050 --> 00:20:13,889
it's a<font color="#E5E5E5"> false positive big deal you're</font>

525
00:20:12,600 --> 00:20:16,020
getting the data down in the alternate

526
00:20:13,890 --> 00:20:17,670
path you can<font color="#E5E5E5"> forward it you will find</font>

527
00:20:16,020 --> 00:20:20,070
out some hundreds of milliseconds later

528
00:20:17,670 --> 00:20:21,720
if unicast routing said yeah<font color="#E5E5E5"> you should</font>

529
00:20:20,070 --> 00:20:24,120
switch over then it wasn't a false

530
00:20:21,720 --> 00:20:25,530
positive it was truth but if unicast

531
00:20:24,120 --> 00:20:27,510
routing doesn't tell you anything and

532
00:20:25,530 --> 00:20:28,410
you missed a packet was dropped upstream

533
00:20:27,510 --> 00:20:30,270
or something and you switched

534
00:20:28,410 --> 00:20:31,740
erroneously it doesn't matter you<font color="#E5E5E5"> could</font>

535
00:20:30,270 --> 00:20:36,180
keep forwarding data there's still no

536
00:20:31,740 --> 00:20:38,520
packet loss life is good and that's

537
00:20:36,180 --> 00:20:40,260
about it we have original patent the

538
00:20:38,520 --> 00:20:43,440
<font color="#CCCCCC">ecmp</font><font color="#E5E5E5"> example in the</font><font color="#CCCCCC"> failure detection</font>

539
00:20:40,260 --> 00:20:45,420
was put in a in a cisco patent and we

540
00:20:43,440 --> 00:20:48,480
had the extensions put in another so

541
00:20:45,420 --> 00:20:50,850
this is a IPR disclosure slide so we

542
00:20:48,480 --> 00:20:52,380
have<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> minutes for questions</font>

543
00:20:50,850 --> 00:21:01,560
clearance<font color="#CCCCCC"> or I could answer any</font>

544
00:20:52,380 --> 00:21:06,690
questions technical please any questions

545
00:21:01,560 --> 00:21:09,480
for<font color="#E5E5E5"> Dana or Clarence</font><font color="#CCCCCC"> eriko</font><font color="#E5E5E5"> aerospace</font>

546
00:21:06,690 --> 00:21:12,360
<font color="#E5E5E5">corporation it seemed like you doubled</font>

547
00:21:09,480 --> 00:21:15,300
state in the network double stated what

548
00:21:12,360 --> 00:21:16,560
double state as far as your receivers in

549
00:21:15,300 --> 00:21:18,629
past that you have to send stuff down

550
00:21:16,560 --> 00:21:19,830
within the routers because you<font color="#E5E5E5"> have this</font>

551
00:21:18,630 --> 00:21:22,470
alternative path that you have to

552
00:21:19,830 --> 00:21:25,290
maintain is that<font color="#E5E5E5"> true or no oh no it</font>

553
00:21:22,470 --> 00:21:29,130
does not require<font color="#CCCCCC"> any extra s comma G</font>

554
00:21:25,290 --> 00:21:31,020
state all you have to you it<font color="#E5E5E5"> doesn't it</font>

555
00:21:29,130 --> 00:21:35,930
<font color="#CCCCCC">doesn't increase the number of entries</font>

556
00:21:31,020 --> 00:21:38,460
that are in your m rib arguably<font color="#E5E5E5"> it could</font>

557
00:21:35,930 --> 00:21:40,260
you need to put a new field in your

558
00:21:38,460 --> 00:21:41,910
multicast route to say what<font color="#E5E5E5"> is the</font>

559
00:21:40,260 --> 00:21:43,980
alternate interface that you're willing

560
00:21:41,910 --> 00:21:45,300
<font color="#E5E5E5">to accept on but it varies on your</font>

561
00:21:43,980 --> 00:21:49,410
implementation you could put it in<font color="#E5E5E5"> the</font>

562
00:21:45,300 --> 00:21:51,960
rib and not in the<font color="#E5E5E5"> fib and tell the fib</font>

563
00:21:49,410 --> 00:21:52,419
which single interface is used when the

564
00:21:51,960 --> 00:21:54,580
failure

565
00:21:52,419 --> 00:21:57,129
happens because<font color="#E5E5E5"> you can normally program</font>

566
00:21:54,580 --> 00:21:59,499
your fib in tens of milliseconds within

567
00:21:57,129 --> 00:22:00,850
50 milliseconds definitely or you can

568
00:21:59,499 --> 00:22:02,980
actually<font color="#E5E5E5"> tell your hardware to have two</font>

569
00:22:00,850 --> 00:22:05,019
interfaces and accept on either one and

570
00:22:02,980 --> 00:22:08,109
when the<font color="#E5E5E5"> local</font><font color="#CCCCCC"> failure happens you could</font>

571
00:22:05,019 --> 00:22:10,600
actually if the local failure happens on

572
00:22:08,109 --> 00:22:14,350
the line card you could<font color="#E5E5E5"> actually fix up</font>

573
00:22:10,600 --> 00:22:15,668
that entry on the locally you could

574
00:22:14,350 --> 00:22:17,139
distribute it you can fix it locally

575
00:22:15,669 --> 00:22:21,929
provided that the other alternate

576
00:22:17,139 --> 00:22:26,049
interface is on the same line guard in

577
00:22:21,929 --> 00:22:28,690
and Johnson C packet networks so right

578
00:22:26,049 --> 00:22:30,460
at the beginning and then just in your

579
00:22:28,690 --> 00:22:33,369
response to<font color="#E5E5E5"> that last question you</font>

580
00:22:30,460 --> 00:22:36,999
mentioned 50 to 100 milliseconds as

581
00:22:33,369 --> 00:22:39,369
being the timing target but from the

582
00:22:36,999 --> 00:22:41,320
analysis<font color="#CCCCCC"> that you described it wasn't</font>

583
00:22:39,369 --> 00:22:44,529
obvious that<font color="#CCCCCC"> there was actually any</font>

584
00:22:41,320 --> 00:22:46,658
timing dependency given what you're

585
00:22:44,529 --> 00:22:52,779
doing in that you're setting up or a

586
00:22:46,659 --> 00:22:57,220
pair<font color="#CCCCCC"> path in ahead of any requirement to</font>

587
00:22:52,779 --> 00:23:00,940
use that repair path true so is that any

588
00:22:57,220 --> 00:23:02,950
timing dependency at all for example if

589
00:23:00,940 --> 00:23:06,970
you're<font color="#E5E5E5"> trying to do video tween here in</font>

590
00:23:02,950 --> 00:23:08,889
China do you actually need to<font color="#E5E5E5"> have some</font>

591
00:23:06,970 --> 00:23:10,659
link that's within 50 to 100

592
00:23:08,889 --> 00:23:12,279
milliseconds of your last<font color="#E5E5E5"> link do you</font>

593
00:23:10,659 --> 00:23:14,350
have any timing depends see what happens

594
00:23:12,279 --> 00:23:17,169
if it's if your next<font color="#E5E5E5"> link is 200</font>

595
00:23:14,350 --> 00:23:19,299
milliseconds away wells that<font color="#E5E5E5"> NATO don't</font>

596
00:23:17,169 --> 00:23:20,559
does it not matter yeah I<font color="#E5E5E5"> mean very good</font>

597
00:23:19,299 --> 00:23:22,658
question in<font color="#E5E5E5"> clearance and I will both</font>

598
00:23:20,559 --> 00:23:27,460
claim that unicast routing and what you

599
00:23:22,659 --> 00:23:29,559
have deployed today is sufficient has

600
00:23:27,460 --> 00:23:31,269
any of<font color="#E5E5E5"> this actually been tried excuse</font>

601
00:23:29,559 --> 00:23:32,950
me is there an implementation has any of

602
00:23:31,269 --> 00:23:35,769
<font color="#E5E5E5">this been trying yeah implementations</font>

603
00:23:32,950 --> 00:23:38,350
are underway we<font color="#E5E5E5"> don't have anything</font>

604
00:23:35,769 --> 00:23:39,789
that's readily testable yet no no sono

605
00:23:38,350 --> 00:23:48,639
bits no but you're asking to be a beta

606
00:23:39,789 --> 00:23:50,930
site I guess right<font color="#CCCCCC"> okay thank</font><font color="#E5E5E5"> you any</font>

607
00:23:48,639 --> 00:23:53,330
other questions

608
00:23:50,930 --> 00:23:55,990
okay thank you very much do you know one

609
00:23:53,330 --> 00:23:55,990
don't burns

