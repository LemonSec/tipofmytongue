1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:12,740 --> 00:00:18,270
<font color="#CCCCCC">okay so hello insomniac and welcome to</font>

3
00:00:15,719 --> 00:00:20,369
my talk<font color="#E5E5E5"> about VirtualBox security</font><font color="#CCCCCC"> I'm</font>

4
00:00:18,270 --> 00:00:22,680
just a quick reminder what VirtualBox

5
00:00:20,369 --> 00:00:25,109
actually is it's a product<font color="#E5E5E5"> developed or</font>

6
00:00:22,680 --> 00:00:26,880
maintained by Oracle<font color="#CCCCCC"> that essentially</font>

7
00:00:25,109 --> 00:00:28,920
<font color="#E5E5E5">lets you run all</font><font color="#CCCCCC"> kinds of modern</font>

8
00:00:26,880 --> 00:00:31,799
operating systems inside virtual

9
00:00:28,920 --> 00:00:34,650
machines<font color="#CCCCCC"> very comparable to</font><font color="#E5E5E5"> say VMware</font>

10
00:00:31,800 --> 00:00:39,540
Workstation<font color="#E5E5E5"> but it's open</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> and</font>

11
00:00:34,650 --> 00:00:41,220
<font color="#E5E5E5">free so</font><font color="#CCCCCC"> that's nice</font><font color="#E5E5E5"> just a quick intro</font>

12
00:00:39,540 --> 00:00:44,850
of myself<font color="#E5E5E5"> I'm an independent security</font>

13
00:00:41,220 --> 00:00:46,199
<font color="#E5E5E5">researcher sometimes studying</font><font color="#CCCCCC"> I'd</font><font color="#E5E5E5"> I'm</font>

14
00:00:44,850 --> 00:00:48,510
<font color="#E5E5E5">interested in reverse engineering and</font>

15
00:00:46,199 --> 00:00:49,769
exploitation<font color="#CCCCCC"> I did</font><font color="#E5E5E5"> phone down last year</font>

16
00:00:48,510 --> 00:00:51,390
and then I was<font color="#E5E5E5"> very happy to hear that</font>

17
00:00:49,769 --> 00:00:53,549
<font color="#E5E5E5">they added VirtualBox as a target this</font>

18
00:00:51,390 --> 00:00:56,220
<font color="#E5E5E5">year so that motivated me to look at it</font>

19
00:00:53,549 --> 00:00:58,049
<font color="#E5E5E5">again and come up with a new export but</font>

20
00:00:56,220 --> 00:00:59,299
<font color="#CCCCCC">unfortunately I can't present that today</font>

21
00:00:58,049 --> 00:01:01,170
<font color="#CCCCCC">because the</font><font color="#E5E5E5"> bugs were not fixed yet</font>

22
00:00:59,299 --> 00:01:03,449
<font color="#E5E5E5">instead I would be</font><font color="#CCCCCC"> talking</font><font color="#E5E5E5"> about some</font>

23
00:01:01,170 --> 00:01:07,020
<font color="#E5E5E5">research at it last year and all</font><font color="#CCCCCC"> of the</font>

24
00:01:03,449 --> 00:01:09,149
bugs already fixed I love playing CTF

25
00:01:07,020 --> 00:01:12,750
<font color="#E5E5E5">and</font><font color="#CCCCCC"> play usually with the team</font><font color="#E5E5E5"> asleep on</font>

26
00:01:09,150 --> 00:01:16,920
repeat and together<font color="#E5E5E5"> with some</font><font color="#CCCCCC"> friends I</font>

27
00:01:12,750 --> 00:01:19,080
started to<font color="#CCCCCC"> blog last</font><font color="#E5E5E5"> year</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> let's</font>

28
00:01:16,920 --> 00:01:22,470
say<font color="#E5E5E5"> zero days and browser exploitation</font>

29
00:01:19,080 --> 00:01:23,610
which you can find<font color="#CCCCCC"> it phoenix</font><font color="#E5E5E5"> dot re if</font>

30
00:01:22,470 --> 00:01:26,610
you want to contact<font color="#CCCCCC"> me twitter is</font>

31
00:01:23,610 --> 00:01:28,080
probably the best best option and<font color="#E5E5E5"> i</font>

32
00:01:26,610 --> 00:01:30,480
should<font color="#E5E5E5"> also point out that some of this</font>

33
00:01:28,080 --> 00:01:32,580
research presented<font color="#CCCCCC"> was sponsored by the</font>

34
00:01:30,480 --> 00:01:35,940
security team<font color="#CCCCCC"> secure disclosure</font><font color="#E5E5E5"> program</font>

35
00:01:32,580 --> 00:01:41,370
run by<font color="#CCCCCC"> Abby on</font><font color="#E5E5E5"> security and which can be</font>

36
00:01:35,940 --> 00:01:43,190
<font color="#CCCCCC">found</font><font color="#E5E5E5"> at this</font><font color="#CCCCCC"> link alright so why do</font><font color="#E5E5E5"> we</font>

37
00:01:41,370 --> 00:01:45,750
<font color="#E5E5E5">even</font><font color="#CCCCCC"> want to look</font><font color="#E5E5E5"> at hypervisors or</font>

38
00:01:43,190 --> 00:01:48,300
<font color="#E5E5E5">VirtualBox in particular in</font><font color="#CCCCCC"> terms of</font>

39
00:01:45,750 --> 00:01:49,800
security<font color="#E5E5E5"> well we all know that VMs are</font>

40
00:01:48,300 --> 00:01:51,899
very useful for<font color="#E5E5E5"> developing software</font>

41
00:01:49,800 --> 00:01:54,630
testing software<font color="#E5E5E5"> debugging</font>

42
00:01:51,900 --> 00:01:56,940
<font color="#CCCCCC">especially kernel debugging</font><font color="#E5E5E5"> but it's</font>

43
00:01:54,630 --> 00:01:59,570
also useful<font color="#E5E5E5"> as like certain means of</font>

44
00:01:56,940 --> 00:02:01,890
isolating dangerous code let's let's say

45
00:01:59,570 --> 00:02:03,690
<font color="#CCCCCC">so for</font><font color="#E5E5E5"> example if you want to</font><font color="#CCCCCC"> analyze</font>

46
00:02:01,890 --> 00:02:04,830
the behavior of some<font color="#CCCCCC"> malware</font><font color="#E5E5E5"> you</font>

47
00:02:03,690 --> 00:02:06,179
<font color="#E5E5E5">probably don't want to run it on your</font>

48
00:02:04,830 --> 00:02:08,459
<font color="#E5E5E5">host to find out what it does</font><font color="#CCCCCC"> and</font>

49
00:02:06,180 --> 00:02:11,670
<font color="#E5E5E5">instead you might decide to like run it</font>

50
00:02:08,459 --> 00:02:13,620
in<font color="#CCCCCC"> vm assuming that it's kind of safe to</font>

51
00:02:11,670 --> 00:02:15,119
do<font color="#CCCCCC"> so because</font><font color="#E5E5E5"> it's an entirely different</font>

52
00:02:13,620 --> 00:02:18,900
operating<font color="#E5E5E5"> system and can't really affect</font>

53
00:02:15,120 --> 00:02:20,819
your<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> system but</font><font color="#E5E5E5"> there is</font>

54
00:02:18,900 --> 00:02:22,290
<font color="#CCCCCC">definitely some attack surface that</font>

55
00:02:20,819 --> 00:02:24,000
could allow for<font color="#E5E5E5"> dangerous</font><font color="#CCCCCC"> Co</font>

56
00:02:22,290 --> 00:02:27,390
running inside<font color="#CCCCCC"> the VM</font><font color="#E5E5E5"> to break out of it</font>

57
00:02:24,000 --> 00:02:30,090
<font color="#E5E5E5">and we know that some competing products</font>

58
00:02:27,390 --> 00:02:31,950
like hyper-v<font color="#CCCCCC"> and VMware they've had</font>

59
00:02:30,090 --> 00:02:34,799
quite some<font color="#CCCCCC"> back sandbox in the past that</font>

60
00:02:31,950 --> 00:02:36,119
were published<font color="#E5E5E5"> both of them</font><font color="#CCCCCC"> no well none</font>

61
00:02:34,799 --> 00:02:38,189
<font color="#CCCCCC">of them</font><font color="#E5E5E5"> has a</font><font color="#CCCCCC"> backbone he</font><font color="#E5E5E5"> programmed the</font>

62
00:02:36,120 --> 00:02:40,530
other one has been a<font color="#E5E5E5"> target at multiple</font>

63
00:02:38,189 --> 00:02:42,090
exploit<font color="#CCCCCC"> competitions so far</font><font color="#E5E5E5"> so we know</font>

64
00:02:40,530 --> 00:02:44,489
that<font color="#CCCCCC"> there's been</font><font color="#E5E5E5"> quite some research</font>

65
00:02:42,090 --> 00:02:47,670
quite some interesting exploits<font color="#CCCCCC"> that</font>

66
00:02:44,489 --> 00:02:50,670
<font color="#CCCCCC">allow</font><font color="#E5E5E5"> guest code to escape to the to the</font>

67
00:02:47,670 --> 00:02:52,469
host<font color="#CCCCCC"> but both of</font><font color="#E5E5E5"> them are</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> source</font>

68
00:02:50,670 --> 00:02:55,018
and the kind of hard to reverse<font color="#CCCCCC"> engineer</font>

69
00:02:52,469 --> 00:02:57,120
and people tend to use fuzzing<font color="#E5E5E5"> because</font>

70
00:02:55,019 --> 00:02:59,549
there are no<font color="#E5E5E5"> really not a lot</font><font color="#CCCCCC"> of symbols</font>

71
00:02:57,120 --> 00:03:01,379
available<font color="#CCCCCC"> and in comparison</font><font color="#E5E5E5"> VirtualBox</font>

72
00:02:59,549 --> 00:03:03,450
<font color="#E5E5E5">is really good because</font><font color="#CCCCCC"> it's open</font><font color="#E5E5E5"> source</font>

73
00:03:01,379 --> 00:03:04,980
<font color="#E5E5E5">you can read everything you can really</font>

74
00:03:03,450 --> 00:03:07,918
understand in depth how features<font color="#CCCCCC"> are</font>

75
00:03:04,980 --> 00:03:10,200
implemented<font color="#E5E5E5"> how device drivers emulator</font>

76
00:03:07,919 --> 00:03:14,040
devices are implemented so it's really

77
00:03:10,200 --> 00:03:17,429
nice<font color="#CCCCCC"> to learn about hypervisors using</font>

78
00:03:14,040 --> 00:03:20,099
that<font color="#E5E5E5"> code base and also for exportation</font>

79
00:03:17,430 --> 00:03:22,829
they're quite nice especially<font color="#E5E5E5"> VMware</font><font color="#CCCCCC"> and</font>

80
00:03:20,099 --> 00:03:24,929
VirtualBox<font color="#E5E5E5"> because they're quite far</font>

81
00:03:22,829 --> 00:03:27,870
behind<font color="#E5E5E5"> say modern web browsers when it</font>

82
00:03:24,930 --> 00:03:29,489
comes to exploit mitigations so you will

83
00:03:27,870 --> 00:03:33,659
definitely<font color="#E5E5E5"> not find something like</font><font color="#CCCCCC"> CFI</font>

84
00:03:29,489 --> 00:03:36,180
or<font color="#CCCCCC"> sam boxing in well maybe in hyper-v</font>

85
00:03:33,659 --> 00:03:38,340
but not in the other<font color="#E5E5E5"> two so it's kind</font><font color="#CCCCCC"> of</font>

86
00:03:36,180 --> 00:03:40,889
stayed right from like two<font color="#E5E5E5"> three years</font>

87
00:03:38,340 --> 00:03:44,389
<font color="#CCCCCC">ago so if you find issues they are often</font>

88
00:03:40,889 --> 00:03:49,739
exploitable and you can make impactful

89
00:03:44,389 --> 00:03:50,819
<font color="#E5E5E5">demonstrations also it's fun to play</font>

90
00:03:49,739 --> 00:03:53,519
with hypervisors if you want to learn

91
00:03:50,819 --> 00:03:55,649
<font color="#CCCCCC">about</font><font color="#E5E5E5"> low-level IO and programming in</font>

92
00:03:53,519 --> 00:03:58,530
kernel programming<font color="#CCCCCC"> because more often</font>

93
00:03:55,650 --> 00:03:59,940
<font color="#CCCCCC">than not you will have</font><font color="#E5E5E5"> to write parts of</font>

94
00:03:58,530 --> 00:04:01,829
your exploits or parts<font color="#E5E5E5"> of your proof of</font>

95
00:03:59,940 --> 00:04:03,978
concepts<font color="#CCCCCC"> as kernel drivers because you</font>

96
00:04:01,829 --> 00:04:08,760
need<font color="#CCCCCC"> access</font><font color="#E5E5E5"> to low-level hardware</font>

97
00:04:03,979 --> 00:04:09,989
emulated hardware in<font color="#E5E5E5"> this case</font><font color="#CCCCCC"> yeah so</font>

98
00:04:08,760 --> 00:04:15,689
if you're interested<font color="#CCCCCC"> in low-level stuff</font>

99
00:04:09,989 --> 00:04:17,459
it's a cool way<font color="#CCCCCC"> to get into</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> alright</font>

100
00:04:15,689 --> 00:04:18,930
<font color="#E5E5E5">so</font><font color="#CCCCCC"> I will start off my talk by giving a</font>

101
00:04:17,459 --> 00:04:22,520
short<font color="#CCCCCC"> overview over the architecture of</font>

102
00:04:18,930 --> 00:04:24,930
VirtualBox<font color="#E5E5E5"> and then introduce you to the</font>

103
00:04:22,520 --> 00:04:26,250
<font color="#E5E5E5">let's say the</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> of most important</font>

104
00:04:24,930 --> 00:04:29,610
<font color="#CCCCCC">privilege boundaries that there are</font>

105
00:04:26,250 --> 00:04:31,169
within VirtualBox one of which is kind

106
00:04:29,610 --> 00:04:34,919
of unique<font color="#CCCCCC"> to VirtualBox and not that</font>

107
00:04:31,169 --> 00:04:36,020
well-known and then<font color="#E5E5E5"> I will like give you</font>

108
00:04:34,919 --> 00:04:38,299
examples

109
00:04:36,020 --> 00:04:42,310
of<font color="#E5E5E5"> Buxton can occur in each of these</font>

110
00:04:38,300 --> 00:04:42,310
boundaries<font color="#E5E5E5"> that allow you to cross them</font>

111
00:04:45,789 --> 00:04:50,330
so this<font color="#CCCCCC"> is a very high-level overview</font>

112
00:04:47,870 --> 00:04:53,599
over<font color="#E5E5E5"> the architecture</font>

113
00:04:50,330 --> 00:04:56,568
I put the host and the<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> here side</font>

114
00:04:53,599 --> 00:04:58,370
by<font color="#E5E5E5"> side although obviously in the real</font>

115
00:04:56,569 --> 00:05:00,620
world<font color="#CCCCCC"> two guests like inside the host</font>

116
00:04:58,370 --> 00:05:03,470
<font color="#E5E5E5">but it's hard to visualize so let's just</font>

117
00:05:00,620 --> 00:05:08,060
assume the server client<font color="#CCCCCC"> type</font>

118
00:05:03,470 --> 00:05:09,500
architecture here and then both in the

119
00:05:08,060 --> 00:05:11,979
host and the<font color="#CCCCCC"> guest we have the typical</font>

120
00:05:09,500 --> 00:05:14,539
separation between user and<font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> and</font>

121
00:05:11,979 --> 00:05:28,190
and I think the most important<font color="#E5E5E5"> part is</font>

122
00:05:14,539 --> 00:05:31,280
<font color="#CCCCCC">the what</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so maybe I can't use</font>

123
00:05:28,190 --> 00:05:34,219
this<font color="#E5E5E5"> maybe somewhere here so let's say</font>

124
00:05:31,280 --> 00:05:36,650
this year<font color="#CCCCCC"> as</font><font color="#E5E5E5"> a host process called</font>

125
00:05:34,219 --> 00:05:39,560
<font color="#E5E5E5">VirtualBox at exa</font><font color="#CCCCCC"> which is in the user</font>

126
00:05:36,650 --> 00:05:41,539
land of the<font color="#E5E5E5"> host and yet we'll have one</font>

127
00:05:39,560 --> 00:05:42,860
<font color="#E5E5E5">of these for each VM</font><font color="#CCCCCC"> that you run so</font>

128
00:05:41,539 --> 00:05:45,919
every running VM will have one of<font color="#E5E5E5"> these</font>

129
00:05:42,860 --> 00:05:47,830
processes<font color="#E5E5E5"> and they will make use of a</font>

130
00:05:45,919 --> 00:05:54,349
kernel component called a<font color="#E5E5E5"> V bus driver</font>

131
00:05:47,830 --> 00:05:55,969
what and use<font color="#E5E5E5"> it use an interface</font>

132
00:05:54,349 --> 00:05:58,490
provided by that driver<font color="#CCCCCC"> to implement a</font>

133
00:05:55,969 --> 00:06:01,729
<font color="#E5E5E5">low-level functionality so we</font><font color="#CCCCCC"> definitely</font>

134
00:05:58,490 --> 00:06:04,250
<font color="#CCCCCC">have a privileged boundary here and it</font>

135
00:06:01,729 --> 00:06:05,930
will<font color="#E5E5E5"> be interesting</font><font color="#CCCCCC"> to see if you can</font>

136
00:06:04,250 --> 00:06:08,300
draw<font color="#E5E5E5"> across that to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> a privilege</font>

137
00:06:05,930 --> 00:06:10,190
escalation on<font color="#E5E5E5"> the host and on the guest</font>

138
00:06:08,300 --> 00:06:12,860
side we also have user and kernel and

139
00:06:10,190 --> 00:06:14,150
<font color="#E5E5E5">and if we install guest additions then</font>

140
00:06:12,860 --> 00:06:17,690
there will<font color="#E5E5E5"> be an additional kernel</font>

141
00:06:14,150 --> 00:06:19,250
component called VBox guest which is<font color="#E5E5E5"> a</font>

142
00:06:17,690 --> 00:06:21,319
kernel driver<font color="#E5E5E5"> running in the guest and</font>

143
00:06:19,250 --> 00:06:22,430
maybe that exposes some functionality

144
00:06:21,319 --> 00:06:25,370
<font color="#CCCCCC">that we can use to escalate privileges</font>

145
00:06:22,430 --> 00:06:26,750
inside the<font color="#E5E5E5"> guest and then of</font><font color="#CCCCCC"> course we</font>

146
00:06:25,370 --> 00:06:29,150
have the<font color="#E5E5E5"> most interesting boundary which</font>

147
00:06:26,750 --> 00:06:34,150
is<font color="#E5E5E5"> between the host and the</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> if we</font>

148
00:06:29,150 --> 00:06:34,150
cross that then we get<font color="#CCCCCC"> VM breakout and</font>

149
00:06:34,180 --> 00:06:38,690
most of the<font color="#CCCCCC"> interfaces there are just</font>

150
00:06:36,469 --> 00:06:42,380
your standard<font color="#E5E5E5"> low-level</font><font color="#CCCCCC"> IO</font><font color="#E5E5E5"> like memory</font>

151
00:06:38,690 --> 00:06:45,529
mapped i/o port read<font color="#E5E5E5"> writes the devices</font>

152
00:06:42,380 --> 00:06:48,409
are typically exposed via PCI<font color="#E5E5E5"> and they</font>

153
00:06:45,529 --> 00:06:49,159
speak protocols like VGA or<font color="#E5E5E5"> USB but we</font>

154
00:06:48,409 --> 00:06:50,539
also have

155
00:06:49,159 --> 00:06:55,009
at least<font color="#CCCCCC"> to VirtualBox specific</font>

156
00:06:50,539 --> 00:06:58,789
protocols here called<font color="#CCCCCC"> h DCM host-guest</font>

157
00:06:55,009 --> 00:07:01,429
<font color="#E5E5E5">communication manager and HD SMI</font><font color="#CCCCCC"> host</font>

158
00:06:58,789 --> 00:07:02,599
<font color="#CCCCCC">guest chat memory interface and these</font>

159
00:07:01,429 --> 00:07:04,989
implement VirtualBox specific

160
00:07:02,599 --> 00:07:04,989
functionality

161
00:07:07,610 --> 00:07:11,089
<font color="#CCCCCC">okay so</font><font color="#E5E5E5"> first we're going</font><font color="#CCCCCC"> to focus only</font>

162
00:07:09,349 --> 00:07:12,498
<font color="#E5E5E5">on the</font><font color="#CCCCCC"> left</font><font color="#E5E5E5"> side of this diagram</font><font color="#CCCCCC"> so</font>

163
00:07:11,089 --> 00:07:14,989
we're just going<font color="#CCCCCC"> to ignore the</font><font color="#E5E5E5"> guest for</font>

164
00:07:12,499 --> 00:07:17,059
a second<font color="#E5E5E5"> and we want to know can we</font>

165
00:07:14,989 --> 00:07:19,448
<font color="#E5E5E5">cross this boundary from</font><font color="#CCCCCC"> the user land</font>

166
00:07:17,059 --> 00:07:21,979
in the host<font color="#E5E5E5"> to the kernel and thereby</font>

167
00:07:19,449 --> 00:07:24,740
obtaining a privilege escalation inside

168
00:07:21,979 --> 00:07:27,080
the host so can we as an unprivileged

169
00:07:24,740 --> 00:07:27,649
user on a machine<font color="#E5E5E5"> where VirtualBox is</font>

170
00:07:27,080 --> 00:07:30,979
installed

171
00:07:27,649 --> 00:07:36,499
can we make use of this<font color="#CCCCCC"> V</font><font color="#E5E5E5"> box driver to</font>

172
00:07:30,979 --> 00:07:38,330
escalate privileges and yeah<font color="#CCCCCC"> for that</font>

173
00:07:36,499 --> 00:07:41,209
for that<font color="#CCCCCC"> I have to like explain</font><font color="#E5E5E5"> a bit</font>

174
00:07:38,330 --> 00:07:42,558
what this driver actually<font color="#E5E5E5"> does so it</font>

175
00:07:41,209 --> 00:07:44,689
essentially it implements all of the

176
00:07:42,559 --> 00:07:47,589
<font color="#E5E5E5">functionality that needs to be implement</font>

177
00:07:44,689 --> 00:07:52,249
in the kernel such as the<font color="#E5E5E5"> virtualization</font>

178
00:07:47,589 --> 00:07:55,819
<font color="#CCCCCC">VM enters VM exits low-level memory</font>

179
00:07:52,249 --> 00:07:56,869
management<font color="#E5E5E5"> low-level IO essentially</font>

180
00:07:55,819 --> 00:08:01,039
everything<font color="#E5E5E5"> that cannot be</font><font color="#CCCCCC"> handled in</font>

181
00:07:56,869 --> 00:08:04,579
userland but this interface is<font color="#CCCCCC"> pretty</font>

182
00:08:01,039 --> 00:08:07,789
weak so it has<font color="#CCCCCC"> a</font><font color="#E5E5E5"> couple</font><font color="#CCCCCC"> of issues in the</font>

183
00:08:04,579 --> 00:08:08,990
past<font color="#E5E5E5"> so you will have in that kernel</font>

184
00:08:07,789 --> 00:08:10,729
driver you will<font color="#E5E5E5"> have your classic memory</font>

185
00:08:08,990 --> 00:08:25,399
corruption issues<font color="#E5E5E5"> you know this is</font>

186
00:08:10,729 --> 00:08:28,128
<font color="#E5E5E5">probably hard to show because of all</font>

187
00:08:25,399 --> 00:08:29,809
right so this<font color="#CCCCCC"> is a bug report bye bye</font>

188
00:08:28,129 --> 00:08:31,939
<font color="#CCCCCC">Yunho</font><font color="#E5E5E5"> now it doesn't</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> anymore</font>

189
00:08:29,809 --> 00:08:34,009
<font color="#E5E5E5">okay this is a bug report by</font><font color="#CCCCCC"> yung horn</font>

190
00:08:31,939 --> 00:08:35,300
<font color="#E5E5E5">from project zero I'm just going</font><font color="#CCCCCC"> to read</font>

191
00:08:34,009 --> 00:08:38,209
out the important<font color="#CCCCCC"> parts now because I</font>

192
00:08:35,299 --> 00:08:40,639
can't mark them<font color="#E5E5E5"> it says this I all</font>

193
00:08:38,208 --> 00:08:43,068
control called VM mr0 it takes a kernel

194
00:08:40,639 --> 00:08:46,250
pointer as an argument<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then it uses</font>

195
00:08:43,068 --> 00:08:49,459
<font color="#E5E5E5">that pointer to load and store various</font>

196
00:08:46,250 --> 00:08:52,250
kernel registers including<font color="#E5E5E5"> RSP which is</font>

197
00:08:49,459 --> 00:08:54,949
the stack pointer<font color="#E5E5E5"> from this essentially</font>

198
00:08:52,250 --> 00:08:56,720
attacker controlled<font color="#E5E5E5"> location so of</font>

199
00:08:54,949 --> 00:08:58,370
<font color="#E5E5E5">course if we can control the RSP</font>

200
00:08:56,720 --> 00:08:59,870
register in the kernel we can probably

201
00:08:58,370 --> 00:09:01,759
turn that into code execution somehow

202
00:08:59,870 --> 00:09:02,400
and then we have code execution the

203
00:09:01,759 --> 00:09:04,050
kernel

204
00:09:02,400 --> 00:09:05,760
so if you can do that<font color="#E5E5E5"> from an</font>

205
00:09:04,050 --> 00:09:09,719
unprivileged context then that's a

206
00:09:05,760 --> 00:09:12,900
<font color="#E5E5E5">privilege escalation but Oracle says</font>

207
00:09:09,720 --> 00:09:14,400
this is<font color="#E5E5E5"> not a bug</font><font color="#CCCCCC"> because you should not</font>

208
00:09:12,900 --> 00:09:16,709
be able<font color="#CCCCCC"> to get a handle to this VBox</font>

209
00:09:14,400 --> 00:09:19,650
<font color="#E5E5E5">driver in the first place so their</font>

210
00:09:16,710 --> 00:09:21,570
threat model is they want<font color="#E5E5E5"> to protect</font>

211
00:09:19,650 --> 00:09:22,920
this hand there's this driver itself so

212
00:09:21,570 --> 00:09:24,930
<font color="#E5E5E5">you you're not supposed</font><font color="#CCCCCC"> to get a handle</font>

213
00:09:22,920 --> 00:09:25,829
<font color="#E5E5E5">to this driver otherwise you can do all</font>

214
00:09:24,930 --> 00:09:29,660
<font color="#E5E5E5">these kinds of things and they know</font>

215
00:09:25,830 --> 00:09:29,660
about<font color="#E5E5E5"> them so they don't even try</font>

216
00:09:29,870 --> 00:09:35,190
<font color="#E5E5E5">there's another issue which is there are</font>

217
00:09:33,450 --> 00:09:37,110
some data<font color="#E5E5E5"> structures</font><font color="#CCCCCC"> that are Baptists</font>

218
00:09:35,190 --> 00:09:39,510
<font color="#CCCCCC">and colonel and</font><font color="#E5E5E5"> and they have</font><font color="#CCCCCC"> colonel</font>

219
00:09:37,110 --> 00:09:41,700
pointers inside of them for<font color="#E5E5E5"> example here</font>

220
00:09:39,510 --> 00:09:44,100
we<font color="#CCCCCC"> have two</font><font color="#E5E5E5"> versions of this</font><font color="#CCCCCC"> vram</font>

221
00:09:41,700 --> 00:09:46,260
pointer one is<font color="#E5E5E5"> suffix with</font><font color="#CCCCCC"> our three</font>

222
00:09:44,100 --> 00:09:49,890
<font color="#CCCCCC">four ring</font><font color="#E5E5E5"> three when</font><font color="#CCCCCC"> a suffix with a</font>

223
00:09:46,260 --> 00:09:51,930
zero and the<font color="#CCCCCC"> r0 version is used by the</font>

224
00:09:49,890 --> 00:09:55,260
colonel but<font color="#E5E5E5"> it's writable by the user</font>

225
00:09:51,930 --> 00:09:58,319
<font color="#E5E5E5">name because it's also mapped there this</font>

226
00:09:55,260 --> 00:10:02,189
<font color="#E5E5E5">is by the way a data structure is</font><font color="#CCCCCC"> that</font>

227
00:09:58,320 --> 00:10:03,540
captures the state of the VGA device and

228
00:10:02,190 --> 00:10:05,160
there's<font color="#E5E5E5"> plenty</font><font color="#CCCCCC"> of examples</font><font color="#E5E5E5"> of this and</font>

229
00:10:03,540 --> 00:10:07,079
if you change<font color="#E5E5E5"> this this ring</font><font color="#CCCCCC"> 0 pointer</font>

230
00:10:05,160 --> 00:10:10,469
from userland the kind<font color="#E5E5E5"> of might do</font>

231
00:10:07,080 --> 00:10:12,029
interesting<font color="#E5E5E5"> things with</font><font color="#CCCCCC"> it and there is</font>

232
00:10:10,470 --> 00:10:14,910
<font color="#E5E5E5">even much more direct ways to get code</font>

233
00:10:12,029 --> 00:10:16,709
execution<font color="#E5E5E5"> using this driver so really</font>

234
00:10:14,910 --> 00:10:19,290
the bottom<font color="#CCCCCC"> line</font><font color="#E5E5E5"> here is you don't want</font>

235
00:10:16,709 --> 00:10:24,750
anybody<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to access this driver</font>

236
00:10:19,290 --> 00:10:29,490
<font color="#CCCCCC">in the first place ok so but how can</font>

237
00:10:24,750 --> 00:10:31,200
this work<font color="#CCCCCC"> because if you start</font><font color="#E5E5E5"> a VM as</font>

238
00:10:29,490 --> 00:10:32,790
an unprivileged user<font color="#E5E5E5"> well the first box</font>

239
00:10:31,200 --> 00:10:36,450
<font color="#E5E5E5">is installed</font><font color="#CCCCCC"> everybody can start</font><font color="#E5E5E5"> a VM</font>

240
00:10:32,790 --> 00:10:38,160
<font color="#E5E5E5">and create a VM and if you start a VM as</font>

241
00:10:36,450 --> 00:10:41,220
an<font color="#CCCCCC"> unpropitious user it will actually</font>

242
00:10:38,160 --> 00:10:43,770
<font color="#E5E5E5">run as an unfinished user so the host</font>

243
00:10:41,220 --> 00:10:49,890
process will run<font color="#E5E5E5"> as the user that it</font>

244
00:10:43,770 --> 00:10:52,110
started it so so how<font color="#E5E5E5"> can how</font><font color="#CCCCCC"> can this</font>

245
00:10:49,890 --> 00:10:54,240
<font color="#E5E5E5">even work how can they then make this</font>

246
00:10:52,110 --> 00:10:56,339
<font color="#E5E5E5">this driver not accessible by an</font>

247
00:10:54,240 --> 00:10:59,400
unprivileged user and the way they do it

248
00:10:56,339 --> 00:11:02,190
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Linux is if you look here</font><font color="#E5E5E5"> at the</font>

249
00:10:59,400 --> 00:11:04,920
second output<font color="#E5E5E5"> you see</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> permissions</font>

250
00:11:02,190 --> 00:11:06,779
for<font color="#CCCCCC"> the for the V</font><font color="#E5E5E5"> box driver device it's</font>

251
00:11:04,920 --> 00:11:08,089
owned by<font color="#E5E5E5"> root and it can't</font><font color="#CCCCCC"> exist</font><font color="#E5E5E5"> it</font>

252
00:11:06,779 --> 00:11:10,520
can't be accessed<font color="#E5E5E5"> by anybody else</font>

253
00:11:08,089 --> 00:11:14,579
so<font color="#E5E5E5"> only root can open</font><font color="#CCCCCC"> a handle to this</font>

254
00:11:10,520 --> 00:11:16,199
this this<font color="#CCCCCC"> file and</font><font color="#E5E5E5"> then the VirtualBox</font>

255
00:11:14,579 --> 00:11:18,779
process itself

256
00:11:16,200 --> 00:11:21,660
it is also<font color="#CCCCCC"> owned</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> root</font><font color="#E5E5E5"> and it has to</font>

257
00:11:18,779 --> 00:11:23,730
set<font color="#CCCCCC"> your ID flag set so it will the</font>

258
00:11:21,660 --> 00:11:25,439
first thing it will do when it starts is

259
00:11:23,730 --> 00:11:27,990
it will open<font color="#E5E5E5"> a handle to</font><font color="#CCCCCC"> the box driver</font>

260
00:11:25,440 --> 00:11:31,769
<font color="#E5E5E5">and then it will drop privileges back to</font>

261
00:11:27,990 --> 00:11:33,000
the user<font color="#E5E5E5"> that started</font><font color="#CCCCCC"> the VM</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> after</font>

262
00:11:31,769 --> 00:11:37,500
that it's just<font color="#E5E5E5"> an unprivileged process</font>

263
00:11:33,000 --> 00:11:39,089
and it can't open<font color="#CCCCCC"> the device</font><font color="#E5E5E5"> anymore but</font>

264
00:11:37,500 --> 00:11:40,920
it of course it has somewhere in its

265
00:11:39,089 --> 00:11:46,380
<font color="#CCCCCC">global memory</font><font color="#E5E5E5"> it has</font><font color="#CCCCCC"> a point</font><font color="#E5E5E5"> it has this</font>

266
00:11:40,920 --> 00:11:48,029
file descriptor stored so in the last

267
00:11:46,380 --> 00:11:49,230
line<font color="#CCCCCC"> you can see a running</font><font color="#E5E5E5"> process and</font>

268
00:11:48,029 --> 00:11:51,180
you can see that it's actually<font color="#E5E5E5"> running</font>

269
00:11:49,230 --> 00:11:54,029
as an unprivileged user but<font color="#E5E5E5"> it has this</font>

270
00:11:51,180 --> 00:11:55,680
handle open<font color="#E5E5E5"> and the good thing about</font>

271
00:11:54,029 --> 00:11:57,990
<font color="#CCCCCC">using a set you ready for this is that</font>

272
00:11:55,680 --> 00:12:01,769
on<font color="#E5E5E5"> Mac OS</font><font color="#CCCCCC"> and Linux this will actually</font>

273
00:11:57,990 --> 00:12:04,110
<font color="#E5E5E5">prevent the simple means of getting code</font>

274
00:12:01,769 --> 00:12:08,700
execution<font color="#E5E5E5"> injecting code inside this</font>

275
00:12:04,110 --> 00:12:10,760
process<font color="#E5E5E5"> just</font><font color="#CCCCCC"> for security</font><font color="#E5E5E5"> reasons</font><font color="#CCCCCC"> so you</font>

276
00:12:08,700 --> 00:12:13,769
<font color="#E5E5E5">can't use</font><font color="#CCCCCC"> P trace or the equivalent</font>

277
00:12:10,760 --> 00:12:15,480
<font color="#E5E5E5">debugging giving API on Mac OS to inject</font>

278
00:12:13,769 --> 00:12:20,370
code into it because<font color="#E5E5E5"> we</font><font color="#CCCCCC"> could do that</font>

279
00:12:15,480 --> 00:12:21,990
then you could<font color="#E5E5E5"> get this handle out on</font>

280
00:12:20,370 --> 00:12:23,550
<font color="#E5E5E5">Windows does this protection magnums is</font>

281
00:12:21,990 --> 00:12:25,500
much more complicated<font color="#CCCCCC"> because they have</font>

282
00:12:23,550 --> 00:12:26,490
to implement it completely them by

283
00:12:25,500 --> 00:12:29,310
themselves<font color="#CCCCCC"> because there is no</font>

284
00:12:26,490 --> 00:12:30,959
equivalent<font color="#E5E5E5"> to set UID so what they do is</font>

285
00:12:29,310 --> 00:12:33,060
if every time somebody tries<font color="#CCCCCC"> to open</font><font color="#E5E5E5"> the</font>

286
00:12:30,959 --> 00:12:34,859
handle<font color="#CCCCCC"> to this driver</font><font color="#E5E5E5"> the driver itself</font>

287
00:12:33,060 --> 00:12:36,869
will check or what's the<font color="#E5E5E5"> process name of</font>

288
00:12:34,860 --> 00:12:40,890
the<font color="#E5E5E5"> process</font><font color="#CCCCCC"> that wants</font><font color="#E5E5E5"> to open a handle</font>

289
00:12:36,870 --> 00:12:43,350
<font color="#E5E5E5">is it signed by Oracle</font><font color="#CCCCCC"> is it called</font>

290
00:12:40,890 --> 00:12:45,899
VirtualBox<font color="#E5E5E5"> that</font><font color="#CCCCCC"> EXA is it in a trusted</font>

291
00:12:43,350 --> 00:12:48,390
location<font color="#E5E5E5"> and only then will</font><font color="#CCCCCC"> it allow the</font>

292
00:12:45,899 --> 00:12:51,240
handle to<font color="#E5E5E5"> be opened and it will also</font>

293
00:12:48,390 --> 00:12:52,500
install<font color="#E5E5E5"> a lot of hooks that prevent like</font>

294
00:12:51,240 --> 00:12:56,300
your<font color="#E5E5E5"> standard code injection techniques</font>

295
00:12:52,500 --> 00:12:58,980
<font color="#E5E5E5">like create remote thread and similar</font>

296
00:12:56,300 --> 00:13:01,050
and they<font color="#CCCCCC"> also hook the DLL loader</font><font color="#E5E5E5"> so</font>

297
00:12:58,980 --> 00:13:04,620
that it will never<font color="#E5E5E5"> even try to load any</font>

298
00:13:01,050 --> 00:13:06,420
unsigned dll's<font color="#E5E5E5"> and there is there is</font><font color="#CCCCCC"> a</font>

299
00:13:04,620 --> 00:13:08,820
very<font color="#CCCCCC"> good overview by</font><font color="#E5E5E5"> James</font><font color="#CCCCCC"> Forshaw</font><font color="#E5E5E5"> from</font>

300
00:13:06,420 --> 00:13:15,360
project your<font color="#CCCCCC"> project there about the</font>

301
00:13:08,820 --> 00:13:17,760
implementation<font color="#CCCCCC"> of this okay so if we</font>

302
00:13:15,360 --> 00:13:20,550
somehow bypass this protection mechanism

303
00:13:17,760 --> 00:13:22,319
then we and<font color="#E5E5E5"> then get code execution in</font>

304
00:13:20,550 --> 00:13:24,060
this protected process<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> get a</font>

305
00:13:22,320 --> 00:13:27,300
handle<font color="#E5E5E5"> to</font><font color="#CCCCCC"> VBox driver and if you have</font>

306
00:13:24,060 --> 00:13:30,119
that<font color="#E5E5E5"> then then we will see that we can</font>

307
00:13:27,300 --> 00:13:31,709
<font color="#E5E5E5">achieve a privilege escalation</font>

308
00:13:30,120 --> 00:13:33,180
so how<font color="#CCCCCC"> isn't how has it</font><font color="#E5E5E5"> been done in the</font>

309
00:13:31,709 --> 00:13:35,069
past

310
00:13:33,180 --> 00:13:38,969
well there's your<font color="#E5E5E5"> old school like</font>

311
00:13:35,069 --> 00:13:42,149
environment<font color="#CCCCCC"> poisoning where in 2017 yeah</font>

312
00:13:38,970 --> 00:13:45,899
new<font color="#CCCCCC"> yuen-han reported to similar issues</font>

313
00:13:42,149 --> 00:13:48,660
<font color="#E5E5E5">on</font><font color="#CCCCCC"> linux</font><font color="#E5E5E5"> one was based on an environment</font>

314
00:13:45,899 --> 00:13:51,720
<font color="#CCCCCC">variable</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> he uses</font><font color="#E5E5E5"> to load additional</font>

315
00:13:48,660 --> 00:13:53,040
<font color="#CCCCCC">plugins</font><font color="#E5E5E5"> so if you set</font><font color="#CCCCCC"> that you can make</font>

316
00:13:51,720 --> 00:13:55,670
it load shared libraries into the

317
00:13:53,040 --> 00:13:58,170
process you can<font color="#CCCCCC"> get the handle out</font>

318
00:13:55,670 --> 00:14:00,569
<font color="#CCCCCC">there's a similar issue with</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ELSA</font>

319
00:13:58,170 --> 00:14:03,809
config file can also be made<font color="#CCCCCC"> to load</font>

320
00:14:00,569 --> 00:14:06,120
additional shared libraries and chains

321
00:14:03,809 --> 00:14:07,559
for<font color="#CCCCCC"> sure' found like several bypasses</font>

322
00:14:06,120 --> 00:14:09,860
for<font color="#CCCCCC"> the for the implementation on</font>

323
00:14:07,559 --> 00:14:12,509
<font color="#CCCCCC">Windows which</font><font color="#E5E5E5"> is even</font><font color="#CCCCCC"> more complicated</font>

324
00:14:09,860 --> 00:14:15,420
<font color="#E5E5E5">and all of these are described in the</font>

325
00:14:12,509 --> 00:14:16,920
blog<font color="#CCCCCC"> post as well now some other ideas</font>

326
00:14:15,420 --> 00:14:18,180
<font color="#CCCCCC">that I had of additional attack surface</font>

327
00:14:16,920 --> 00:14:21,209
that you might look at<font color="#E5E5E5"> if you if</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> are</font>

328
00:14:18,180 --> 00:14:22,469
<font color="#E5E5E5">interested in this kind of</font><font color="#CCCCCC"> exploit is</font>

329
00:14:21,209 --> 00:14:24,119
well there is a<font color="#E5E5E5"> lot of files that</font>

330
00:14:22,470 --> 00:14:26,309
<font color="#CCCCCC">VirtualBox stores on disk and then</font>

331
00:14:24,120 --> 00:14:28,559
parses again later<font color="#E5E5E5"> some of them are</font>

332
00:14:26,309 --> 00:14:31,350
binary<font color="#E5E5E5"> formats and I'm pretty sure if</font>

333
00:14:28,559 --> 00:14:32,959
<font color="#E5E5E5">you mess with some of them you can</font>

334
00:14:31,350 --> 00:14:36,360
<font color="#CCCCCC">probably like get memory corruptions</font>

335
00:14:32,959 --> 00:14:39,569
inside the parsing<font color="#CCCCCC"> process which is the</font>

336
00:14:36,360 --> 00:14:42,230
the protected process and there is also

337
00:14:39,569 --> 00:14:44,399
a programming interface based on<font color="#CCCCCC"> Comm</font>

338
00:14:42,230 --> 00:14:48,120
which allows you<font color="#CCCCCC"> to make method calls</font>

339
00:14:44,399 --> 00:14:50,550
and interact with<font color="#E5E5E5"> the</font><font color="#CCCCCC"> VM</font><font color="#E5E5E5"> and I will show</font>

340
00:14:48,120 --> 00:14:53,819
<font color="#E5E5E5">you an example of a</font><font color="#CCCCCC"> bug there in a while</font>

341
00:14:50,550 --> 00:14:55,979
and then every VM<font color="#CCCCCC"> Escape is also</font>

342
00:14:53,819 --> 00:14:57,990
<font color="#E5E5E5">automatically a privilege escalation</font>

343
00:14:55,980 --> 00:15:00,839
<font color="#CCCCCC">that</font><font color="#E5E5E5"> sounds weird because VM escapes</font>

344
00:14:57,990 --> 00:15:02,129
sound much<font color="#CCCCCC"> more powerful</font><font color="#E5E5E5"> than</font><font color="#CCCCCC"> that but</font>

345
00:15:00,839 --> 00:15:03,389
maybe you have a VM escape that only

346
00:15:02,129 --> 00:15:06,269
<font color="#E5E5E5">works in like a very obscure</font>

347
00:15:03,389 --> 00:15:08,519
configuration<font color="#E5E5E5"> but then what you can do</font>

348
00:15:06,269 --> 00:15:12,449
is you can create a VM with that

349
00:15:08,519 --> 00:15:13,920
<font color="#E5E5E5">configuration exploit it</font><font color="#CCCCCC"> and then then</font>

350
00:15:12,449 --> 00:15:15,559
<font color="#E5E5E5">essentially from</font><font color="#CCCCCC"> the inside you can</font>

351
00:15:13,920 --> 00:15:21,329
exploit this<font color="#CCCCCC"> protected process again</font><font color="#E5E5E5"> and</font>

352
00:15:15,559 --> 00:15:24,389
achieve<font color="#E5E5E5"> a privilege escalation one</font>

353
00:15:21,329 --> 00:15:25,829
<font color="#E5E5E5">example of such a an obscure</font>

354
00:15:24,389 --> 00:15:28,740
configuration which<font color="#CCCCCC"> is actually not that</font>

355
00:15:25,829 --> 00:15:32,248
obscure is if you enable 3d acceleration

356
00:15:28,740 --> 00:15:35,550
in your<font color="#E5E5E5"> VMs and the documentation says</font>

357
00:15:32,249 --> 00:15:38,100
well you should never do that<font color="#CCCCCC"> if you</font>

358
00:15:35,550 --> 00:15:38,660
don't trust<font color="#E5E5E5"> the guest because amongst</font>

359
00:15:38,100 --> 00:15:41,939
other things

360
00:15:38,660 --> 00:15:43,889
enabling 3d acceleration<font color="#E5E5E5"> enables a</font><font color="#CCCCCC"> lot</font>

361
00:15:41,939 --> 00:15:46,980
of<font color="#E5E5E5"> additional program code in in the</font>

362
00:15:43,889 --> 00:15:49,739
<font color="#E5E5E5">box</font><font color="#CCCCCC"> hoes process and it even says</font><font color="#E5E5E5"> which</font>

363
00:15:46,980 --> 00:15:52,109
it might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> might be able</font><font color="#CCCCCC"> to use to</font>

364
00:15:49,739 --> 00:15:54,420
crash the machine<font color="#E5E5E5"> the virtual machine in</font>

365
00:15:52,109 --> 00:15:56,999
this case and that's very<font color="#E5E5E5"> true</font><font color="#CCCCCC"> actually</font>

366
00:15:54,420 --> 00:15:59,368
just this year they've somebody just

367
00:15:56,999 --> 00:16:01,709
reported<font color="#E5E5E5"> a bunch of bugs in</font><font color="#CCCCCC"> that</font>

368
00:15:59,369 --> 00:16:03,660
<font color="#E5E5E5">component and they're just trivial</font>

369
00:16:01,709 --> 00:16:05,309
<font color="#E5E5E5">integer overflows that lead to heap</font>

370
00:16:03,660 --> 00:16:07,559
buffer overflows<font color="#E5E5E5"> some of them are even</font>

371
00:16:05,309 --> 00:16:09,959
stack based buffer overflows<font color="#E5E5E5"> probably</font>

372
00:16:07,559 --> 00:16:14,069
the at least some of<font color="#E5E5E5"> them are pretty</font>

373
00:16:09,959 --> 00:16:15,238
<font color="#E5E5E5">easy to exploit so if you exploit one of</font>

374
00:16:14,069 --> 00:16:18,660
these<font color="#E5E5E5"> bugs you also get a</font><font color="#CCCCCC"> privilege</font>

375
00:16:15,239 --> 00:16:20,369
<font color="#E5E5E5">escalation and there's definitely more</font>

376
00:16:18,660 --> 00:16:22,709
so I have reported some more and I know

377
00:16:20,369 --> 00:16:26,129
if at<font color="#E5E5E5"> least some</font><font color="#CCCCCC"> other one other person</font>

378
00:16:22,709 --> 00:16:27,839
<font color="#E5E5E5">that reported some more of those this</font>

379
00:16:26,129 --> 00:16:30,059
<font color="#E5E5E5">code is from 2001 so it shouldn't be</font>

380
00:16:27,839 --> 00:16:31,410
that<font color="#E5E5E5"> surprising</font><font color="#CCCCCC"> that there is lots of</font>

381
00:16:30,059 --> 00:16:33,569
issues<font color="#E5E5E5"> with</font><font color="#CCCCCC"> it because</font><font color="#E5E5E5"> they haven't been</font>

382
00:16:31,410 --> 00:16:36,118
nobody's<font color="#E5E5E5"> really looked at</font><font color="#CCCCCC"> it since and</font>

383
00:16:33,569 --> 00:16:41,849
<font color="#E5E5E5">only now in 2017 and 2018 people start</font>

384
00:16:36,119 --> 00:16:44,790
to look at<font color="#CCCCCC"> it so</font><font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is probably</font>

385
00:16:41,850 --> 00:16:47,669
<font color="#CCCCCC">very</font><font color="#E5E5E5"> hard to see from from the back this</font>

386
00:16:44,790 --> 00:16:50,040
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> bug</font><font color="#E5E5E5"> I reported in one of the comm</font>

387
00:16:47,669 --> 00:16:52,410
methods

388
00:16:50,040 --> 00:16:53,579
it's called set credentials<font color="#E5E5E5"> and you just</font>

389
00:16:52,410 --> 00:16:55,949
give it<font color="#CCCCCC"> a username</font><font color="#E5E5E5"> and password</font><font color="#CCCCCC"> and</font>

390
00:16:53,579 --> 00:16:58,378
<font color="#CCCCCC">we'll store those and later it can</font><font color="#E5E5E5"> auto</font>

391
00:16:55,949 --> 00:17:01,589
<font color="#CCCCCC">log-in the guest operating system using</font>

392
00:16:58,379 --> 00:17:03,089
those credentials and<font color="#E5E5E5"> it just takes you</font>

393
00:17:01,589 --> 00:17:07,579
username password and string copies them

394
00:17:03,089 --> 00:17:07,579
into a<font color="#E5E5E5"> fixed</font><font color="#CCCCCC"> sized buffer on</font><font color="#E5E5E5"> the heap so</font>

395
00:17:07,699 --> 00:17:14,309
<font color="#CCCCCC">yeah</font><font color="#E5E5E5"> you would hope</font><font color="#CCCCCC"> to not see that in a</font>

396
00:17:11,250 --> 00:17:15,779
modern<font color="#CCCCCC"> code base um and also</font><font color="#E5E5E5"> you would</font>

397
00:17:14,309 --> 00:17:18,329
expect the compiler<font color="#E5E5E5"> to be smart enough</font>

398
00:17:15,779 --> 00:17:22,109
to<font color="#E5E5E5"> mitigate that because it knows in</font>

399
00:17:18,329 --> 00:17:25,619
this instance it knows exactly how<font color="#E5E5E5"> large</font>

400
00:17:22,109 --> 00:17:28,109
the buffer is so<font color="#CCCCCC"> MSV see the max of</font>

401
00:17:25,619 --> 00:17:30,449
compiler and GCC<font color="#E5E5E5"> they both add like</font>

402
00:17:28,109 --> 00:17:32,039
<font color="#CCCCCC">bounce</font><font color="#E5E5E5"> checking for some reason clang</font>

403
00:17:30,450 --> 00:17:34,380
doesn't<font color="#E5E5E5"> so the mac OS build was</font>

404
00:17:32,039 --> 00:17:37,408
vulnerable<font color="#E5E5E5"> and it was fixed</font><font color="#CCCCCC"> in january</font>

405
00:17:34,380 --> 00:17:39,360
<font color="#E5E5E5">so</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> decided</font><font color="#CCCCCC"> to write an exploit for</font>

406
00:17:37,409 --> 00:17:43,470
that to<font color="#CCCCCC"> demonstrate a full</font><font color="#E5E5E5"> privilege</font>

407
00:17:39,360 --> 00:17:45,928
<font color="#E5E5E5">escalation chain using that</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> problem</font>

408
00:17:43,470 --> 00:17:47,909
here is<font color="#CCCCCC"> that this buffer</font><font color="#E5E5E5"> is at a</font>

409
00:17:45,929 --> 00:17:50,610
<font color="#E5E5E5">constant location because it's allocated</font>

410
00:17:47,909 --> 00:17:53,429
exactly one set start up and<font color="#E5E5E5"> you can't</font>

411
00:17:50,610 --> 00:17:55,678
reallocate it later<font color="#CCCCCC"> so we have to be it</font>

412
00:17:53,429 --> 00:17:57,950
get a<font color="#E5E5E5"> bit lucky</font><font color="#CCCCCC"> and be able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> overwrite</font>

413
00:17:55,679 --> 00:18:00,540
something<font color="#E5E5E5"> afterwards that's interesting</font>

414
00:17:57,950 --> 00:18:04,050
but turns<font color="#E5E5E5"> out in about</font><font color="#CCCCCC"> 30%</font><font color="#E5E5E5"> of the cases</font>

415
00:18:00,540 --> 00:18:08,389
if you<font color="#E5E5E5"> just send this</font><font color="#CCCCCC"> username which is</font>

416
00:18:04,050 --> 00:18:12,149
a bit too long you will get this crash

417
00:18:08,390 --> 00:18:14,790
so you can see here it crashes at the

418
00:18:12,150 --> 00:18:16,890
address 0 X 4<font color="#E5E5E5"> - 4 - 4 - 4 - this is</font>

419
00:18:14,790 --> 00:18:19,740
<font color="#E5E5E5">actually not this is a memory</font><font color="#CCCCCC"> axis</font><font color="#E5E5E5"> very</font>

420
00:18:16,890 --> 00:18:21,270
<font color="#CCCCCC">crash it's not</font><font color="#E5E5E5"> rip control yet but it</font>

421
00:18:19,740 --> 00:18:23,570
crashes that<font color="#E5E5E5"> while accessing this</font>

422
00:18:21,270 --> 00:18:25,560
address and<font color="#E5E5E5"> that's just the last 6</font>

423
00:18:23,570 --> 00:18:30,360
characters of the<font color="#E5E5E5"> username</font><font color="#CCCCCC"> that we</font>

424
00:18:25,560 --> 00:18:33,389
passed<font color="#E5E5E5"> um and what this actually</font><font color="#CCCCCC"> does is</font>

425
00:18:30,360 --> 00:18:35,879
<font color="#E5E5E5">we overwrite a pointer to an object then</font>

426
00:18:33,390 --> 00:18:38,400
it<font color="#E5E5E5"> uses that object to fetch a function</font>

427
00:18:35,880 --> 00:18:40,830
<font color="#CCCCCC">pointer</font><font color="#E5E5E5"> and then it calls</font><font color="#CCCCCC"> that function</font>

428
00:18:38,400 --> 00:18:46,740
pointer<font color="#E5E5E5"> with the object as</font><font color="#CCCCCC"> the first</font>

429
00:18:40,830 --> 00:18:51,360
argument so that's quite a powerful

430
00:18:46,740 --> 00:18:53,520
<font color="#E5E5E5">primitive so if we can somehow fake an</font>

431
00:18:51,360 --> 00:18:55,949
object somewhere<font color="#E5E5E5"> and make it fetch the</font>

432
00:18:53,520 --> 00:18:59,310
function<font color="#E5E5E5"> pointer from there we get</font>

433
00:18:55,950 --> 00:19:04,560
immediate control over the over<font color="#CCCCCC"> the code</font>

434
00:18:59,310 --> 00:19:06,169
execution yeah so one thing<font color="#E5E5E5"> to point out</font>

435
00:19:04,560 --> 00:19:09,690
<font color="#E5E5E5">is that we don't actually have to defeat</font>

436
00:19:06,170 --> 00:19:12,630
the normal<font color="#CCCCCC"> ASLR of all the libraries</font>

437
00:19:09,690 --> 00:19:15,210
because they're all<font color="#E5E5E5"> in every process</font><font color="#CCCCCC"> on</font>

438
00:19:12,630 --> 00:19:17,100
<font color="#CCCCCC">micro</font><font color="#E5E5E5"> as they're in the same location so</font>

439
00:19:15,210 --> 00:19:18,720
we<font color="#E5E5E5"> can just look in our</font><font color="#CCCCCC"> own process</font>

440
00:19:17,100 --> 00:19:20,459
where as some function loaded and then

441
00:19:18,720 --> 00:19:25,620
<font color="#E5E5E5">we know where it's in the target process</font>

442
00:19:20,460 --> 00:19:28,920
<font color="#E5E5E5">as well and in order</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> place</font><font color="#CCCCCC"> a known</font>

443
00:19:25,620 --> 00:19:30,449
payload<font color="#E5E5E5"> at a known address</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> just used</font>

444
00:19:28,920 --> 00:19:33,270
an old trick<font color="#E5E5E5"> that's also quite well</font>

445
00:19:30,450 --> 00:19:36,330
<font color="#E5E5E5">known on</font><font color="#CCCCCC"> Mac</font><font color="#E5E5E5"> OS it's just very poor at</font>

446
00:19:33,270 --> 00:19:38,220
randomizing<font color="#CCCCCC"> m map allocations so if we</font>

447
00:19:36,330 --> 00:19:42,300
just allocate a lot<font color="#CCCCCC"> of memory inside the</font>

448
00:19:38,220 --> 00:19:43,770
guest like<font color="#E5E5E5"> one gigabyte then one of</font>

449
00:19:42,300 --> 00:19:49,800
these<font color="#E5E5E5"> pages will up end up at this</font>

450
00:19:43,770 --> 00:19:51,840
address and then<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> use a gadget</font>

451
00:19:49,800 --> 00:19:55,020
that loads a lot of registers from<font color="#E5E5E5"> our</font>

452
00:19:51,840 --> 00:19:58,560
from our object and we get Rob and then

453
00:19:55,020 --> 00:20:00,960
<font color="#E5E5E5">we get code execution here on the right</font>

454
00:19:58,560 --> 00:20:03,720
you can<font color="#E5E5E5"> see that my shell code is</font>

455
00:20:00,960 --> 00:20:06,080
executed<font color="#E5E5E5"> at the somewhere in this fake</font>

456
00:20:03,720 --> 00:20:06,080
object

457
00:20:07,270 --> 00:20:13,059
<font color="#CCCCCC">okay so now we can now</font><font color="#E5E5E5"> we have this</font>

458
00:20:10,240 --> 00:20:15,910
handle to<font color="#CCCCCC"> the VBox driver</font><font color="#E5E5E5"> and I haven't</font>

459
00:20:13,059 --> 00:20:18,879
<font color="#E5E5E5">really told you yet what</font><font color="#CCCCCC"> to do next</font>

460
00:20:15,910 --> 00:20:21,610
and definitely<font color="#CCCCCC"> the easiest way that I</font>

461
00:20:18,880 --> 00:20:24,640
<font color="#CCCCCC">found is just use the API that does that</font>

462
00:20:21,610 --> 00:20:28,090
<font color="#E5E5E5">so</font><font color="#CCCCCC"> there's a library there's an i/o</font>

463
00:20:24,640 --> 00:20:30,580
<font color="#E5E5E5">control called</font><font color="#CCCCCC"> loader load</font><font color="#E5E5E5"> and it's used</font>

464
00:20:28,090 --> 00:20:34,059
to<font color="#E5E5E5"> add</font><font color="#CCCCCC"> plug-in code to the running</font>

465
00:20:30,580 --> 00:20:37,470
kernel<font color="#CCCCCC"> driver</font><font color="#E5E5E5"> so if you install say the</font>

466
00:20:34,059 --> 00:20:39,460
extension pack for USB support<font color="#E5E5E5"> it will</font>

467
00:20:37,470 --> 00:20:41,530
just add a plug-in<font color="#CCCCCC"> to the already</font>

468
00:20:39,460 --> 00:20:44,140
<font color="#E5E5E5">running driver and it does that by</font><font color="#CCCCCC"> using</font>

469
00:20:41,530 --> 00:20:47,970
that<font color="#E5E5E5"> API and just passing it</font><font color="#CCCCCC"> the driver</font>

470
00:20:44,140 --> 00:20:47,970
that<font color="#E5E5E5"> it should load as a memory buffer</font>

471
00:20:48,360 --> 00:20:52,750
yeah on Mac OS it does no additional

472
00:20:51,100 --> 00:20:54,490
checking<font color="#E5E5E5"> so you just take any of the</font>

473
00:20:52,750 --> 00:20:56,740
existing modules you change the<font color="#CCCCCC"> entry</font>

474
00:20:54,490 --> 00:20:58,000
point<font color="#E5E5E5"> to contain your</font><font color="#CCCCCC"> shell code</font><font color="#E5E5E5"> you</font>

475
00:20:56,740 --> 00:21:00,790
give it to this<font color="#CCCCCC"> function and</font><font color="#E5E5E5"> then it</font>

476
00:20:58,000 --> 00:21:04,000
will<font color="#E5E5E5"> execute it in the</font><font color="#CCCCCC"> corner so that's</font>

477
00:21:00,790 --> 00:21:05,470
probably a bit too<font color="#CCCCCC"> easy</font>

478
00:21:04,000 --> 00:21:08,440
<font color="#CCCCCC">I know</font><font color="#E5E5E5"> windows it's a bit harder but</font>

479
00:21:05,470 --> 00:21:10,720
also possible<font color="#CCCCCC"> there it</font><font color="#E5E5E5"> will actually</font>

480
00:21:08,440 --> 00:21:16,570
<font color="#CCCCCC">check that</font><font color="#E5E5E5"> the driver that you give it</font>

481
00:21:10,720 --> 00:21:18,400
has a valid signature but there is a lot

482
00:21:16,570 --> 00:21:21,879
<font color="#CCCCCC">of already</font><font color="#E5E5E5"> existing drivers and maybe we</font>

483
00:21:18,400 --> 00:21:24,130
can<font color="#E5E5E5"> use one of those signed drivers and</font>

484
00:21:21,880 --> 00:21:27,220
reuse some of<font color="#E5E5E5"> its code to our advantage</font>

485
00:21:24,130 --> 00:21:30,250
<font color="#CCCCCC">and for that we need</font><font color="#E5E5E5"> another IO control</font>

486
00:21:27,220 --> 00:21:33,280
<font color="#CCCCCC">which is called call service and it</font>

487
00:21:30,250 --> 00:21:37,750
allows<font color="#CCCCCC"> us to call a function</font><font color="#E5E5E5"> inside</font><font color="#CCCCCC"> a</font>

488
00:21:33,280 --> 00:21:39,730
kernel<font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> and for that function</font><font color="#CCCCCC"> call</font>

489
00:21:37,750 --> 00:21:42,880
we control<font color="#CCCCCC"> four arguments I think</font><font color="#E5E5E5"> and</font>

490
00:21:39,730 --> 00:21:46,540
the last one is a<font color="#E5E5E5"> 64-bit integer so</font>

491
00:21:42,880 --> 00:21:47,950
<font color="#CCCCCC">we've fully control it so we</font><font color="#E5E5E5"> just need</font>

492
00:21:46,540 --> 00:21:49,840
to<font color="#E5E5E5"> find a gadget that jumps to</font><font color="#CCCCCC"> that</font>

493
00:21:47,950 --> 00:21:51,700
register<font color="#E5E5E5"> then there is plenty of those</font>

494
00:21:49,840 --> 00:21:54,850
<font color="#CCCCCC">there</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> nine is where the fourth</font>

495
00:21:51,700 --> 00:21:59,410
argument<font color="#E5E5E5"> will end up being stored so we</font>

496
00:21:54,850 --> 00:22:01,959
just you we just specify<font color="#CCCCCC"> this jump</font><font color="#E5E5E5"> or</font>

497
00:21:59,410 --> 00:22:04,600
nine<font color="#E5E5E5"> gadget as the function that we</font><font color="#CCCCCC"> want</font>

498
00:22:01,960 --> 00:22:07,300
<font color="#CCCCCC">to call and we immediately</font><font color="#E5E5E5"> get control</font>

499
00:22:04,600 --> 00:22:11,139
<font color="#CCCCCC">over the rip register for the program</font>

500
00:22:07,300 --> 00:22:14,169
counter we're not completely done yet

501
00:22:11,140 --> 00:22:16,780
<font color="#E5E5E5">because on Windows at least a modern</font>

502
00:22:14,170 --> 00:22:19,600
<font color="#E5E5E5">Windows 10 you can't just jump into the</font>

503
00:22:16,780 --> 00:22:20,710
user land because of SME<font color="#E5E5E5"> P so we need to</font>

504
00:22:19,600 --> 00:22:23,830
somehow get

505
00:22:20,710 --> 00:22:25,210
interesting code into the kernel but

506
00:22:23,830 --> 00:22:27,070
that's<font color="#E5E5E5"> also easy</font><font color="#CCCCCC"> because there is other</font>

507
00:22:25,210 --> 00:22:29,019
<font color="#E5E5E5">i/o controls that let us allocate</font>

508
00:22:27,070 --> 00:22:31,210
executable code in the kernel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> write</font>

509
00:22:29,019 --> 00:22:34,240
to it<font color="#E5E5E5"> so we place our shellcode there</font>

510
00:22:31,210 --> 00:22:40,090
and then we jump to it<font color="#E5E5E5"> and then we again</font>

511
00:22:34,240 --> 00:22:43,929
<font color="#E5E5E5">have a kernel code execution so this is</font>

512
00:22:40,090 --> 00:22:47,619
the full exploit for Mac OS for<font color="#CCCCCC"> version</font>

513
00:22:43,929 --> 00:22:48,909
<font color="#CCCCCC">5.2 point 4 so I'm starting</font><font color="#E5E5E5"> that's</font>

514
00:22:47,619 --> 00:22:51,999
probably also hard<font color="#E5E5E5"> to see I'm starting</font>

515
00:22:48,909 --> 00:22:54,580
<font color="#E5E5E5">out as an</font><font color="#CCCCCC"> unfurnished user then it</font>

516
00:22:51,999 --> 00:22:57,789
creates a VM it starts the VM it runs a

517
00:22:54,580 --> 00:22:59,110
heap spray inside the VM<font color="#E5E5E5"> and then it</font>

518
00:22:57,789 --> 00:23:10,149
<font color="#E5E5E5">triggers the bug and we end up with</font><font color="#CCCCCC"> a</font>

519
00:22:59,110 --> 00:23:12,879
root<font color="#CCCCCC"> shell</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> so let's look</font><font color="#CCCCCC"> at</font>

520
00:23:10,149 --> 00:23:16,869
the let's look<font color="#E5E5E5"> at the right side</font><font color="#CCCCCC"> of this</font>

521
00:23:12,879 --> 00:23:18,730
now<font color="#E5E5E5"> so ignore</font><font color="#CCCCCC"> the host for a moment we</font>

522
00:23:16,869 --> 00:23:20,740
have this<font color="#E5E5E5"> weird additional driver called</font>

523
00:23:18,730 --> 00:23:23,230
<font color="#CCCCCC">be</font><font color="#E5E5E5"> box guest which is installed if you</font>

524
00:23:20,740 --> 00:23:25,830
install guest additions and we're

525
00:23:23,230 --> 00:23:28,809
<font color="#CCCCCC">interested if if we can maybe abuse that</font>

526
00:23:25,830 --> 00:23:31,749
to do interesting things<font color="#E5E5E5"> within the</font>

527
00:23:28,809 --> 00:23:33,850
guest and probably the<font color="#E5E5E5"> best thing to do</font>

528
00:23:31,749 --> 00:23:37,679
would<font color="#CCCCCC"> be to escalate privileges from</font>

529
00:23:33,850 --> 00:23:37,678
<font color="#E5E5E5">user land to kernel and inside the guest</font>

530
00:23:37,980 --> 00:23:44,289
so why is this<font color="#CCCCCC"> even necessary so a lot</font>

531
00:23:43,090 --> 00:23:47,009
of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> features that VirtualBox has</font>

532
00:23:44,289 --> 00:23:50,399
require<font color="#CCCCCC"> cooperation of the</font><font color="#E5E5E5"> guest</font>

533
00:23:47,009 --> 00:23:53,499
<font color="#E5E5E5">for example mouse pointer integration</font>

534
00:23:50,399 --> 00:23:54,248
shared folders where you make a subset

535
00:23:53,499 --> 00:23:56,679
of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> filesystem</font>

536
00:23:54,249 --> 00:23:59,830
<font color="#CCCCCC">accessible to the VM</font><font color="#E5E5E5"> clipboard sharing</font>

537
00:23:56,679 --> 00:24:03,399
<font color="#CCCCCC">drag and drop and even</font><font color="#E5E5E5"> this also this</font>

538
00:23:59,830 --> 00:24:05,379
notorious 3d acceleration<font color="#E5E5E5"> and most of</font>

539
00:24:03,399 --> 00:24:09,389
these are<font color="#CCCCCC"> implemented using</font><font color="#E5E5E5"> the HT</font><font color="#CCCCCC"> CM</font>

540
00:24:05,379 --> 00:24:13,259
protocol which is<font color="#E5E5E5"> just a very simple</font>

541
00:24:09,389 --> 00:24:16,149
function<font color="#CCCCCC"> a remote function call protocol</font>

542
00:24:13,259 --> 00:24:18,070
so the<font color="#E5E5E5"> guest can make they can allocate</font>

543
00:24:16,149 --> 00:24:21,489
a request buffer with some<font color="#E5E5E5"> arguments and</font>

544
00:24:18,070 --> 00:24:23,499
then a service on the<font color="#E5E5E5"> host will will</font>

545
00:24:21,490 --> 00:24:27,759
handle<font color="#E5E5E5"> this request and copy the</font>

546
00:24:23,499 --> 00:24:30,249
response<font color="#E5E5E5"> into the guest and if you want</font>

547
00:24:27,759 --> 00:24:32,649
to<font color="#E5E5E5"> make to use this protocol you need to</font>

548
00:24:30,249 --> 00:24:34,600
make a request to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> VBox</font><font color="#CCCCCC"> guest</font><font color="#E5E5E5"> corner</font>

549
00:24:32,649 --> 00:24:37,149
driver and it will<font color="#E5E5E5"> then</font>

550
00:24:34,600 --> 00:24:39,699
<font color="#E5E5E5">it</font><font color="#CCCCCC"> should properly notify the host via</font>

551
00:24:37,150 --> 00:24:40,870
some<font color="#CCCCCC"> emulate</font><font color="#E5E5E5"> device so that it can get</font>

552
00:24:39,700 --> 00:24:43,150
handled and then it will give the

553
00:24:40,870 --> 00:24:51,399
response back<font color="#CCCCCC"> to you so this</font><font color="#E5E5E5"> is what the</font>

554
00:24:43,150 --> 00:24:55,049
role of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> VBox get strawberries and</font>

555
00:24:51,400 --> 00:24:58,570
there's<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> there used to be a weird</font>

556
00:24:55,049 --> 00:25:00,520
bug<font color="#E5E5E5"> in that that I well</font><font color="#CCCCCC"> they're I</font><font color="#E5E5E5"> don't</font>

557
00:24:58,570 --> 00:25:02,080
quite<font color="#CCCCCC"> know if it's really fixed yet but</font>

558
00:25:00,520 --> 00:25:04,720
I think<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> examples that I</font><font color="#CCCCCC"> gave</font>

559
00:25:02,080 --> 00:25:06,760
them<font color="#CCCCCC"> why this is bad</font>

560
00:25:04,720 --> 00:25:08,200
are fixed<font color="#E5E5E5"> so if you look at the devices</font>

561
00:25:06,760 --> 00:25:11,710
<font color="#E5E5E5">that are exposed by</font><font color="#CCCCCC"> this kernel driver</font>

562
00:25:08,200 --> 00:25:13,780
<font color="#E5E5E5">it's actually</font><font color="#CCCCCC"> two one is called</font><font color="#E5E5E5"> VBox</font>

563
00:25:11,710 --> 00:25:17,710
guest<font color="#CCCCCC"> and the other one is called VBox</font>

564
00:25:13,780 --> 00:25:20,559
user and<font color="#CCCCCC"> Velox guest</font><font color="#E5E5E5"> is not accessible</font>

565
00:25:17,710 --> 00:25:23,500
to<font color="#CCCCCC"> the world</font><font color="#E5E5E5"> only to</font><font color="#CCCCCC"> route and the</font>

566
00:25:20,559 --> 00:25:26,590
<font color="#CCCCCC">username VBox</font><font color="#E5E5E5"> ad but</font><font color="#CCCCCC"> d-box</font><font color="#E5E5E5"> users</font>

567
00:25:23,500 --> 00:25:28,419
actually<font color="#E5E5E5"> accessible to anybody</font><font color="#CCCCCC"> and by</font>

568
00:25:26,590 --> 00:25:31,270
that<font color="#CCCCCC"> i mean</font><font color="#E5E5E5"> even to unprivileged process</font>

569
00:25:28,419 --> 00:25:32,530
<font color="#E5E5E5">is running</font><font color="#CCCCCC"> inside the</font><font color="#E5E5E5"> guest and they</font>

570
00:25:31,270 --> 00:25:36,690
essentially implemented the exact same

571
00:25:32,530 --> 00:25:38,590
interface<font color="#E5E5E5"> with almost no distinctions so</font>

572
00:25:36,690 --> 00:25:41,080
everybody<font color="#E5E5E5"> can just open</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> view box</font>

573
00:25:38,590 --> 00:25:43,689
user device and make arbitrary<font color="#CCCCCC"> hg cm</font>

574
00:25:41,080 --> 00:25:45,730
calls<font color="#E5E5E5"> thereby reading and writing</font>

575
00:25:43,690 --> 00:25:48,190
arbitrary files to share folders even if

576
00:25:45,730 --> 00:25:49,539
they're not mounted setting clipboard

577
00:25:48,190 --> 00:25:52,900
contents reading clipboard contents

578
00:25:49,539 --> 00:25:54,480
initiating<font color="#CCCCCC"> drag and drop all kinds of</font>

579
00:25:52,900 --> 00:25:57,130
things that<font color="#E5E5E5"> you wouldn't intuitively</font>

580
00:25:54,480 --> 00:26:00,700
think should<font color="#CCCCCC"> be possible</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> from</font>

581
00:25:57,130 --> 00:26:04,539
their context and<font color="#CCCCCC"> especially</font><font color="#E5E5E5"> the the</font>

582
00:26:00,700 --> 00:26:06,640
<font color="#E5E5E5">shared folders are problematic</font><font color="#CCCCCC"> and one</font>

583
00:26:04,539 --> 00:26:08,440
example<font color="#E5E5E5"> I gave Oracle that</font><font color="#CCCCCC"> where this</font>

584
00:26:06,640 --> 00:26:10,090
could<font color="#E5E5E5"> be a problem is if you if the</font>

585
00:26:08,440 --> 00:26:12,820
<font color="#E5E5E5">shared folders actually mounted inside</font>

586
00:26:10,090 --> 00:26:13,780
<font color="#CCCCCC">the VM which it</font><font color="#E5E5E5"> probably is because</font>

587
00:26:12,820 --> 00:26:16,210
otherwise why would<font color="#CCCCCC"> you have it in the</font>

588
00:26:13,780 --> 00:26:19,629
first<font color="#E5E5E5"> place so let's</font><font color="#CCCCCC"> say it's mounted as</font>

589
00:26:16,210 --> 00:26:22,360
root<font color="#E5E5E5"> and so what we can do as an</font>

590
00:26:19,630 --> 00:26:25,750
unprivileged user we<font color="#CCCCCC"> can just create</font><font color="#E5E5E5"> a</font>

591
00:26:22,360 --> 00:26:29,110
shell<font color="#E5E5E5"> via HTTP on HTM call in</font><font color="#CCCCCC"> their</font>

592
00:26:25,750 --> 00:26:31,179
shared<font color="#E5E5E5"> folder</font><font color="#CCCCCC"> I mean it will then appear</font>

593
00:26:29,110 --> 00:26:33,490
in<font color="#E5E5E5"> this mount point because it's it's</font>

594
00:26:31,179 --> 00:26:35,049
mounted so we essentially<font color="#E5E5E5"> just bypass</font>

595
00:26:33,490 --> 00:26:37,600
all<font color="#CCCCCC"> of the Linux file system permissions</font>

596
00:26:35,049 --> 00:26:39,400
inside the guest<font color="#E5E5E5"> and then we can even CH</font>

597
00:26:37,600 --> 00:26:42,730
<font color="#E5E5E5">or we could now we can't anymore but we</font>

598
00:26:39,400 --> 00:26:45,280
could just chmod that and at the set to

599
00:26:42,730 --> 00:26:47,909
set<font color="#E5E5E5"> your</font><font color="#CCCCCC"> ID flag</font><font color="#E5E5E5"> and then if we run it</font>

600
00:26:45,280 --> 00:26:47,908
<font color="#CCCCCC">we get a root shell</font>

601
00:26:49,420 --> 00:26:54,170
it's going to skip<font color="#E5E5E5"> over the second one</font>

602
00:26:51,440 --> 00:26:56,540
<font color="#E5E5E5">but the last</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> is I thought</font><font color="#CCCCCC"> it was fun</font>

603
00:26:54,170 --> 00:26:58,880
<font color="#E5E5E5">so there is a feature called memory</font>

604
00:26:56,540 --> 00:27:01,580
ballooning where the<font color="#CCCCCC"> guests can</font>

605
00:26:58,880 --> 00:27:03,080
essentially tell<font color="#E5E5E5"> the host so this</font>

606
00:27:01,580 --> 00:27:06,230
physical page of memory<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't need</font>

607
00:27:03,080 --> 00:27:09,830
<font color="#E5E5E5">anymore</font><font color="#CCCCCC"> you might</font><font color="#E5E5E5"> as well use</font><font color="#CCCCCC"> it for or</font>

608
00:27:06,230 --> 00:27:10,490
assign it<font color="#CCCCCC"> to some other VM or use</font><font color="#E5E5E5"> it for</font>

609
00:27:09,830 --> 00:27:14,030
<font color="#CCCCCC">yourself</font>

610
00:27:10,490 --> 00:27:19,160
<font color="#CCCCCC">um this essentially just a way to</font><font color="#E5E5E5"> save a</font>

611
00:27:14,030 --> 00:27:21,020
<font color="#E5E5E5">vm memory but this was possible from via</font>

612
00:27:19,160 --> 00:27:24,080
this<font color="#CCCCCC"> VBox user device so everybody</font><font color="#E5E5E5"> could</font>

613
00:27:21,020 --> 00:27:26,629
do it so<font color="#E5E5E5"> everybody could just say</font><font color="#CCCCCC"> look I</font>

614
00:27:24,080 --> 00:27:28,340
don't<font color="#E5E5E5"> really need this physical arrange</font>

615
00:27:26,630 --> 00:27:30,470
that corresponds to the page tables<font color="#E5E5E5"> of</font>

616
00:27:28,340 --> 00:27:32,810
my system<font color="#CCCCCC"> and then the host</font><font color="#E5E5E5"> which is</font>

617
00:27:30,470 --> 00:27:35,180
<font color="#E5E5E5">unmapped that and map a zero page there</font>

618
00:27:32,810 --> 00:27:36,379
<font color="#E5E5E5">and let's just say the operating system</font>

619
00:27:35,180 --> 00:27:38,270
is not<font color="#E5E5E5"> going to have a very fun</font><font color="#CCCCCC"> time</font>

620
00:27:36,380 --> 00:27:40,880
afterwards<font color="#E5E5E5"> so it just crashes</font>

621
00:27:38,270 --> 00:27:47,150
immediately and so you tossed the<font color="#E5E5E5"> guest</font>

622
00:27:40,880 --> 00:27:49,190
from<font color="#E5E5E5"> inside the guest um so when I</font><font color="#CCCCCC"> told</font>

623
00:27:47,150 --> 00:27:51,470
<font color="#E5E5E5">him about this they essentially just got</font>

624
00:27:49,190 --> 00:27:54,050
rid of this<font color="#CCCCCC"> v</font><font color="#E5E5E5"> box use the device in the</font>

625
00:27:51,470 --> 00:27:56,540
next<font color="#E5E5E5"> release and I thought that was</font>

626
00:27:54,050 --> 00:27:57,710
quite<font color="#E5E5E5"> a good patch because maybe</font><font color="#CCCCCC"> there</font>

627
00:27:56,540 --> 00:28:02,560
<font color="#CCCCCC">are</font><font color="#E5E5E5"> other examples where this could go</font>

628
00:27:57,710 --> 00:28:05,060
wrong<font color="#E5E5E5"> but then they noticed that well</font>

629
00:28:02,560 --> 00:28:06,649
for some<font color="#CCCCCC"> reason some of the their</font>

630
00:28:05,060 --> 00:28:07,850
<font color="#E5E5E5">features actually used this so that's</font>

631
00:28:06,650 --> 00:28:08,270
probably why it was<font color="#CCCCCC"> there in</font><font color="#E5E5E5"> the first</font>

632
00:28:07,850 --> 00:28:09,679
<font color="#E5E5E5">place</font>

633
00:28:08,270 --> 00:28:11,480
<font color="#E5E5E5">somehow they didn't catch</font><font color="#CCCCCC"> that during</font>

634
00:28:09,680 --> 00:28:13,100
their testing at all<font color="#E5E5E5"> and then people</font>

635
00:28:11,480 --> 00:28:15,920
complained the 3d acceleration<font color="#E5E5E5"> doesn't</font>

636
00:28:13,100 --> 00:28:18,980
work anymore<font color="#E5E5E5"> and then they just undid</font>

637
00:28:15,920 --> 00:28:21,080
<font color="#E5E5E5">the patch and instead they fixed like</font>

638
00:28:18,980 --> 00:28:23,270
these individual issues that I gave<font color="#E5E5E5"> them</font>

639
00:28:21,080 --> 00:28:27,350
as<font color="#E5E5E5"> examples of</font><font color="#CCCCCC"> why this</font><font color="#E5E5E5"> could be</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bad</font>

640
00:28:23,270 --> 00:28:28,730
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> but you can still read and write</font>

641
00:28:27,350 --> 00:28:30,020
<font color="#E5E5E5">files and everything</font><font color="#CCCCCC"> and I think it's</font>

642
00:28:28,730 --> 00:28:32,210
still kind of unintuitive

643
00:28:30,020 --> 00:28:35,180
<font color="#E5E5E5">but it's not technically a security</font>

644
00:28:32,210 --> 00:28:37,570
problem<font color="#E5E5E5"> I guess it depends on how you</font>

645
00:28:35,180 --> 00:28:37,570
look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> it</font>

646
00:28:39,210 --> 00:28:44,260
<font color="#E5E5E5">all right so this part</font><font color="#CCCCCC"> is now</font><font color="#E5E5E5"> going to</font>

647
00:28:43,090 --> 00:28:46,570
be about the real fun stuff which is

648
00:28:44,260 --> 00:28:50,679
<font color="#E5E5E5">escaping a VM and getting code execution</font>

649
00:28:46,570 --> 00:28:53,049
on the<font color="#CCCCCC"> host so we're</font><font color="#E5E5E5"> looking at this</font>

650
00:28:50,679 --> 00:28:55,630
<font color="#E5E5E5">privilege boundary right here now and we</font>

651
00:28:53,049 --> 00:28:58,510
want<font color="#CCCCCC"> to see is there any like is this</font>

652
00:28:55,630 --> 00:29:01,240
<font color="#E5E5E5">interface attackable somehow is there</font>

653
00:28:58,510 --> 00:29:04,179
code that like parses like<font color="#E5E5E5"> guest</font>

654
00:29:01,240 --> 00:29:05,770
provided values<font color="#E5E5E5"> that that</font><font color="#CCCCCC"> could have</font>

655
00:29:04,179 --> 00:29:10,390
<font color="#CCCCCC">bucks and then maybe you</font><font color="#E5E5E5"> can achieve a</font>

656
00:29:05,770 --> 00:29:12,160
memory corruption<font color="#E5E5E5"> in the host so</font>

657
00:29:10,390 --> 00:29:14,290
essentially we can<font color="#E5E5E5"> we can think of the</font>

658
00:29:12,160 --> 00:29:17,080
<font color="#E5E5E5">hypervisor here as a server and the</font>

659
00:29:14,290 --> 00:29:19,299
guest<font color="#E5E5E5"> as a client that</font><font color="#CCCCCC"> uses hypervisor</font>

660
00:29:17,080 --> 00:29:22,570
functionality and manipulated

661
00:29:19,299 --> 00:29:26,260
manipulated<font color="#CCCCCC"> State via the</font><font color="#E5E5E5"> emulated</font>

662
00:29:22,570 --> 00:29:27,490
<font color="#E5E5E5">devices that are exposed to it and there</font>

663
00:29:26,260 --> 00:29:30,820
are<font color="#CCCCCC"> multiple devices that are usually</font>

664
00:29:27,490 --> 00:29:33,150
<font color="#CCCCCC">available so you'll always have the</font>

665
00:29:30,820 --> 00:29:36,070
virtual machine monitor device

666
00:29:33,150 --> 00:29:39,040
it's what handles all the hdzm protocol

667
00:29:36,070 --> 00:29:41,678
and other VirtualBox specific features

668
00:29:39,040 --> 00:29:44,139
<font color="#E5E5E5">and you will always have a VGA device</font>

669
00:29:41,679 --> 00:29:46,320
for graphics and depending on<font color="#E5E5E5"> what guest</font>

670
00:29:44,140 --> 00:29:50,280
operating system you use you<font color="#E5E5E5"> will have</font>

671
00:29:46,320 --> 00:29:52,030
one<font color="#CCCCCC"> of two</font><font color="#E5E5E5"> audio devices attached and</font>

672
00:29:50,280 --> 00:29:54,520
then depending<font color="#CCCCCC"> on</font><font color="#E5E5E5"> your network</font>

673
00:29:52,030 --> 00:29:58,809
<font color="#E5E5E5">configuration you will in most cases</font>

674
00:29:54,520 --> 00:30:01,090
have emulated<font color="#E5E5E5"> e1000 network card but if</font>

675
00:29:58,809 --> 00:30:02,830
you choose<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use word i/o net then that</font>

676
00:30:01,090 --> 00:30:07,090
<font color="#E5E5E5">is not there and instead you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> para</font>

677
00:30:02,830 --> 00:30:09,460
<font color="#CCCCCC">virtualized networking and then</font><font color="#E5E5E5"> you can</font>

678
00:30:07,090 --> 00:30:12,580
also choose<font color="#E5E5E5"> to use</font><font color="#CCCCCC"> net together with</font>

679
00:30:09,460 --> 00:30:13,750
your<font color="#CCCCCC"> ie 1000 etwork hard which means</font>

680
00:30:12,580 --> 00:30:15,610
<font color="#E5E5E5">that all the traffic gets tunneled</font>

681
00:30:13,750 --> 00:30:16,660
through the<font color="#E5E5E5"> host and there is an extra</font>

682
00:30:15,610 --> 00:30:18,639
library that handles all this

683
00:30:16,660 --> 00:30:21,820
translation so that's also a<font color="#CCCCCC"> tech</font>

684
00:30:18,640 --> 00:30:23,799
surface and then there<font color="#E5E5E5"> are some other</font>

685
00:30:21,820 --> 00:30:25,330
<font color="#CCCCCC">things</font><font color="#E5E5E5"> like storage controllers that I</font>

686
00:30:23,799 --> 00:30:27,639
think I think not a lot of people<font color="#CCCCCC"> that</font>

687
00:30:25,330 --> 00:30:29,649
have looked<font color="#CCCCCC"> at these like USB</font><font color="#E5E5E5"> I don't</font>

688
00:30:27,640 --> 00:30:31,809
know if anybody has ever looked<font color="#E5E5E5"> at the</font>

689
00:30:29,650 --> 00:30:34,600
implementation<font color="#E5E5E5"> there's lots of</font>

690
00:30:31,809 --> 00:30:36,070
opportunities to get creative<font color="#E5E5E5"> and greet</font>

691
00:30:34,600 --> 00:30:42,459
some<font color="#CCCCCC"> code and</font><font color="#E5E5E5"> maybe find some more bugs</font>

692
00:30:36,070 --> 00:30:45,879
in<font color="#E5E5E5"> there so these are the most important</font>

693
00:30:42,460 --> 00:30:49,630
examples of full<font color="#CCCCCC"> vm escapes that I know</font>

694
00:30:45,880 --> 00:30:51,580
of from last year and as<font color="#E5E5E5"> far</font><font color="#CCCCCC"> as I know</font>

695
00:30:49,630 --> 00:30:53,679
it's only<font color="#E5E5E5"> last year that people really</font>

696
00:30:51,580 --> 00:30:56,730
started<font color="#CCCCCC"> looking at virtual</font>

697
00:30:53,679 --> 00:30:59,470
so from before<font color="#CCCCCC"> that I don't know a lot</font>

698
00:30:56,730 --> 00:31:01,179
<font color="#CCCCCC">well except for 3d acceleration because</font>

699
00:30:59,470 --> 00:31:05,620
everybody's<font color="#CCCCCC"> always attacked that because</font>

700
00:31:01,179 --> 00:31:08,950
it's so easy<font color="#CCCCCC"> starting in 2014 and</font><font color="#E5E5E5"> now in</font>

701
00:31:05,620 --> 00:31:13,899
2018 as well and it will<font color="#E5E5E5"> be it</font><font color="#CCCCCC"> will keep</font>

702
00:31:08,950 --> 00:31:15,549
keep on giving I'm sure yeah and<font color="#CCCCCC"> y'know</font>

703
00:31:13,900 --> 00:31:20,080
<font color="#E5E5E5">Han from Google project zero he looked</font>

704
00:31:15,549 --> 00:31:21,520
at<font color="#CCCCCC"> some components last year he found a</font>

705
00:31:20,080 --> 00:31:24,370
capacitor<font color="#CCCCCC"> versatile bug in the shared</font>

706
00:31:21,520 --> 00:31:29,320
folders where - we<font color="#CCCCCC"> m/s could essentially</font>

707
00:31:24,370 --> 00:31:31,510
cooperate by racing<font color="#CCCCCC"> a symlink and then</font>

708
00:31:29,320 --> 00:31:35,110
they were<font color="#E5E5E5"> able to together</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> to break</font>

709
00:31:31,510 --> 00:31:37,660
out of<font color="#E5E5E5"> out of out into the the host file</font>

710
00:31:35,110 --> 00:31:40,270
system<font color="#E5E5E5"> and not just</font><font color="#CCCCCC"> the sub the sub</font>

711
00:31:37,660 --> 00:31:42,640
directory that<font color="#E5E5E5"> was shared and he also</font>

712
00:31:40,270 --> 00:31:46,690
found<font color="#CCCCCC"> a heap buffer overflow in the net</font>

713
00:31:42,640 --> 00:31:49,570
library<font color="#E5E5E5"> and another</font><font color="#CCCCCC"> heat-based</font><font color="#E5E5E5"> bug</font>

714
00:31:46,690 --> 00:31:51,570
<font color="#E5E5E5">invert</font><font color="#CCCCCC"> i/o net which is non</font><font color="#E5E5E5"> default and</font>

715
00:31:49,570 --> 00:31:54,939
he wrote explodes for<font color="#E5E5E5"> all of these</font>

716
00:31:51,570 --> 00:31:57,340
exploits<font color="#E5E5E5"> for all of these and somebody</font>

717
00:31:54,940 --> 00:32:01,450
else looked at the<font color="#E5E5E5"> g1000 network card</font>

718
00:31:57,340 --> 00:32:03,699
and<font color="#E5E5E5"> also found a buffer overflow in</font>

719
00:32:01,450 --> 00:32:05,440
there I think<font color="#E5E5E5"> it was inside a bigger</font>

720
00:32:03,700 --> 00:32:07,900
<font color="#E5E5E5">structure so he would then override an</font>

721
00:32:05,440 --> 00:32:11,290
offset<font color="#E5E5E5"> and then get a heap memory</font>

722
00:32:07,900 --> 00:32:12,760
corruption<font color="#E5E5E5"> from that and I think</font><font color="#CCCCCC"> he</font><font color="#E5E5E5"> also</font>

723
00:32:11,290 --> 00:32:14,139
at<font color="#CCCCCC"> least wrote a</font><font color="#E5E5E5"> pretty good proof of</font>

724
00:32:12,760 --> 00:32:15,490
concept not<font color="#E5E5E5"> sure if you've wrote a full</font>

725
00:32:14,140 --> 00:32:17,770
exploit but it's probably exploitable

726
00:32:15,490 --> 00:32:20,410
<font color="#E5E5E5">and then towards the end</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> last year I</font>

727
00:32:17,770 --> 00:32:23,470
reported<font color="#E5E5E5"> two very similar bugs in the</font>

728
00:32:20,410 --> 00:32:25,690
VGA device<font color="#E5E5E5"> that are essentially just</font>

729
00:32:23,470 --> 00:32:30,190
<font color="#E5E5E5">read arbitrary memory read writes in the</font>

730
00:32:25,690 --> 00:32:32,290
<font color="#CCCCCC">whole address space of</font><font color="#E5E5E5"> the host and I</font>

731
00:32:30,190 --> 00:32:38,830
want to show you now the<font color="#E5E5E5"> this these last</font>

732
00:32:32,290 --> 00:32:41,049
two bugs<font color="#E5E5E5"> and how I exploded them yeah so</font>

733
00:32:38,830 --> 00:32:44,639
aside from<font color="#CCCCCC"> HDC em you also have another</font>

734
00:32:41,049 --> 00:32:47,139
<font color="#E5E5E5">protocol to do host calls which is</font><font color="#CCCCCC"> HTC</font>

735
00:32:44,640 --> 00:32:51,280
<font color="#CCCCCC">mi4 host-guest</font><font color="#E5E5E5"> shared memory interface</font>

736
00:32:47,140 --> 00:32:53,919
and the way it works is<font color="#CCCCCC"> that there is a</font>

737
00:32:51,280 --> 00:32:55,870
shared<font color="#E5E5E5"> memory buffer between that is</font>

738
00:32:53,919 --> 00:32:58,360
both mapped in the<font color="#E5E5E5"> host process and in</font>

739
00:32:55,870 --> 00:33:01,270
the<font color="#E5E5E5"> VM and it's it's called</font><font color="#CCCCCC"> the video</font>

740
00:32:58,360 --> 00:33:02,979
<font color="#CCCCCC">RAM and if the guest wants to make it</font>

741
00:33:01,270 --> 00:33:05,889
and actually see my request it<font color="#E5E5E5"> will</font>

742
00:33:02,980 --> 00:33:06,299
allocate a buffer in that shared area it

743
00:33:05,890 --> 00:33:09,209
will

744
00:33:06,299 --> 00:33:12,839
put its<font color="#E5E5E5"> request there tell the VGA</font>

745
00:33:09,209 --> 00:33:14,849
device at what offset the request is so

746
00:33:12,839 --> 00:33:17,309
that it can<font color="#CCCCCC"> then</font><font color="#E5E5E5"> go on</font><font color="#CCCCCC"> and parse the</font>

747
00:33:14,849 --> 00:33:20,418
<font color="#E5E5E5">request and pass it on to the to the</font>

748
00:33:17,309 --> 00:33:22,769
correct<font color="#E5E5E5"> HD SMI service and there is only</font>

749
00:33:20,419 --> 00:33:27,269
currently<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> there's only</font><font color="#E5E5E5"> one HDMI</font>

750
00:33:22,769 --> 00:33:29,820
service<font color="#E5E5E5"> which is the vbv a subsystem</font>

751
00:33:27,269 --> 00:33:35,219
<font color="#CCCCCC">called</font><font color="#E5E5E5"> short for VirtualBox video</font>

752
00:33:29,820 --> 00:33:37,049
acceleration<font color="#E5E5E5"> and one of the things that</font>

753
00:33:35,219 --> 00:33:41,669
it<font color="#E5E5E5"> implements is something called</font>

754
00:33:37,049 --> 00:33:44,369
<font color="#CCCCCC">virtual video DMA so the guest</font><font color="#E5E5E5"> can tell</font>

755
00:33:41,669 --> 00:33:46,409
the host to copy data<font color="#E5E5E5"> around inside of</font>

756
00:33:44,369 --> 00:33:48,299
<font color="#E5E5E5">the vram</font><font color="#CCCCCC"> I don't know why this is</font>

757
00:33:46,409 --> 00:33:50,789
<font color="#CCCCCC">necessary and actually I think none of</font>

758
00:33:48,299 --> 00:33:52,769
<font color="#E5E5E5">the client code actually uses</font><font color="#CCCCCC"> it so</font><font color="#E5E5E5"> it's</font>

759
00:33:50,789 --> 00:33:56,519
<font color="#CCCCCC">just</font><font color="#E5E5E5"> that code but it had really</font><font color="#CCCCCC"> good</font>

760
00:33:52,769 --> 00:33:58,190
vulnerabilities so and it's<font color="#E5E5E5"> been there</font>

761
00:33:56,519 --> 00:34:00,570
for<font color="#E5E5E5"> six</font><font color="#CCCCCC"> years so maybe there used to be</font>

762
00:33:58,190 --> 00:34:02,459
some some guest code that actually<font color="#CCCCCC"> used</font>

763
00:34:00,570 --> 00:34:07,229
them but now it's<font color="#CCCCCC"> just good for</font>

764
00:34:02,459 --> 00:34:10,490
<font color="#CCCCCC">exploitation so this is one of the bugs</font>

765
00:34:07,229 --> 00:34:10,490
and<font color="#E5E5E5"> the other one is</font><font color="#CCCCCC"> very similar</font><font color="#E5E5E5"> you</font>

766
00:34:11,839 --> 00:34:17,279
<font color="#CCCCCC">yeah it's probably let me</font><font color="#E5E5E5"> just put this</font>

767
00:34:15,690 --> 00:34:19,409
here<font color="#CCCCCC"> maybe you</font><font color="#E5E5E5"> can at least</font><font color="#CCCCCC"> T see this</font>

768
00:34:17,279 --> 00:34:21,619
in the<font color="#E5E5E5"> top right so it just takes a</font>

769
00:34:19,409 --> 00:34:24,750
bunch of<font color="#E5E5E5"> guest control values as offsets</font>

770
00:34:21,619 --> 00:34:27,329
<font color="#E5E5E5">into the vram it doesn't do any checking</font>

771
00:34:24,750 --> 00:34:29,609
<font color="#E5E5E5">and then in mem copies data around based</font>

772
00:34:27,329 --> 00:34:31,799
on these<font color="#E5E5E5"> offsets and the size is also</font>

773
00:34:29,609 --> 00:34:33,629
controlled so you

774
00:34:31,799 --> 00:34:36,270
<font color="#E5E5E5">it's a mem copy where you fully control</font>

775
00:34:33,629 --> 00:34:37,859
the<font color="#E5E5E5"> source and the destination and the</font>

776
00:34:36,270 --> 00:34:40,440
<font color="#CCCCCC">size the only problem is that it's</font>

777
00:34:37,859 --> 00:34:43,710
relative<font color="#E5E5E5"> to the beginning of the video</font>

778
00:34:40,440 --> 00:34:45,539
<font color="#CCCCCC">Ram buffer but it can be before</font><font color="#E5E5E5"> or after</font>

779
00:34:43,710 --> 00:34:47,849
<font color="#CCCCCC">it because it's a 64 bit offset</font><font color="#E5E5E5"> so it</font>

780
00:34:45,539 --> 00:34:53,039
wraps<font color="#E5E5E5"> around so it's really good</font>

781
00:34:47,849 --> 00:34:55,319
primitive and now by copying data out of

782
00:34:53,039 --> 00:34:58,230
the<font color="#E5E5E5"> VM inside of it we can leak</font>

783
00:34:55,319 --> 00:35:01,440
information<font color="#E5E5E5"> and by copying data from</font>

784
00:34:58,230 --> 00:35:06,029
inside the VM<font color="#E5E5E5"> out of it we can overwrite</font>

785
00:35:01,440 --> 00:35:07,380
stuff<font color="#E5E5E5"> that's outside</font><font color="#CCCCCC"> of the vram but we</font>

786
00:35:06,029 --> 00:35:10,890
still don't<font color="#CCCCCC"> know where this VM is</font>

787
00:35:07,380 --> 00:35:14,609
actually<font color="#E5E5E5"> located in the host so ASLR</font><font color="#CCCCCC"> is</font>

788
00:35:10,890 --> 00:35:17,160
still an issue<font color="#E5E5E5"> and now the question is</font>

789
00:35:14,609 --> 00:35:20,109
is there anything surrounding this this

790
00:35:17,160 --> 00:35:24,009
video<font color="#CCCCCC"> Ram buffer or can</font><font color="#E5E5E5"> we</font>

791
00:35:20,109 --> 00:35:24,730
<font color="#E5E5E5">place something around</font><font color="#CCCCCC"> fit that's</font>

792
00:35:24,009 --> 00:35:26,799
<font color="#CCCCCC">interesting</font>

793
00:35:24,730 --> 00:35:30,220
<font color="#E5E5E5">that has interesting pointers or that we</font>

794
00:35:26,799 --> 00:35:35,079
that would<font color="#E5E5E5"> be interesting to corrupt</font><font color="#CCCCCC"> one</font>

795
00:35:30,220 --> 00:35:36,970
way<font color="#E5E5E5"> to do this is a heap spray</font><font color="#CCCCCC"> I haven't</font>

796
00:35:35,079 --> 00:35:39,309
<font color="#E5E5E5">actually tried</font><font color="#CCCCCC"> this back then and I</font>

797
00:35:36,970 --> 00:35:40,749
think<font color="#CCCCCC"> it would work instead I just</font>

798
00:35:39,309 --> 00:35:43,059
<font color="#E5E5E5">looked at what's immediately after the</font>

799
00:35:40,749 --> 00:35:43,899
video RAM and<font color="#E5E5E5"> I pure</font><font color="#CCCCCC"> lack there is</font>

800
00:35:43,059 --> 00:35:49,989
something there<font color="#E5E5E5"> that's really</font>

801
00:35:43,900 --> 00:35:53,589
<font color="#E5E5E5">interesting but</font><font color="#CCCCCC"> only on</font><font color="#E5E5E5"> Windows so this</font>

802
00:35:49,989 --> 00:35:55,869
is a memory dump of<font color="#E5E5E5"> of words directly</font>

803
00:35:53,589 --> 00:35:58,269
after the video<font color="#E5E5E5"> RAM so I'm dumping</font>

804
00:35:55,869 --> 00:36:01,749
memory here well the<font color="#E5E5E5"> the video</font><font color="#CCCCCC"> Ram is</font>

805
00:35:58,269 --> 00:36:04,299
mapped at C 5 T 0 0 0 0<font color="#CCCCCC"> then</font><font color="#E5E5E5"> I'm mapping</font>

806
00:36:01,749 --> 00:36:05,649
what's<font color="#E5E5E5"> after it and you can see there's</font>

807
00:36:04,299 --> 00:36:08,920
<font color="#CCCCCC">actually a pointer to the video Ram</font>

808
00:36:05,650 --> 00:36:13,299
directly after<font color="#CCCCCC"> it and the size is</font><font color="#E5E5E5"> also</font>

809
00:36:08,920 --> 00:36:14,559
<font color="#E5E5E5">somewhere in that region</font><font color="#CCCCCC"> so that looks</font>

810
00:36:13,299 --> 00:36:17,099
pretty<font color="#CCCCCC"> good already and then I try</font><font color="#E5E5E5"> to</font>

811
00:36:14,559 --> 00:36:20,970
<font color="#E5E5E5">find out what</font><font color="#CCCCCC"> data's first it</font><font color="#E5E5E5"> is and</font>

812
00:36:17,099 --> 00:36:26,019
it's<font color="#CCCCCC"> called a memory mmm</font><font color="#E5E5E5"> I Oh</font>

813
00:36:20,970 --> 00:36:27,308
mm<font color="#E5E5E5"> i/o range and it contains all</font><font color="#CCCCCC"> kinds</font>

814
00:36:26,019 --> 00:36:30,578
of interesting pointers it contains a

815
00:36:27,309 --> 00:36:32,140
pointer to the vram<font color="#E5E5E5"> it contains the size</font>

816
00:36:30,579 --> 00:36:35,619
of the<font color="#E5E5E5"> vram it contains a pointer</font><font color="#CCCCCC"> to</font>

817
00:36:32,140 --> 00:36:38,348
some context data structure<font color="#CCCCCC"> for the VGA</font>

818
00:36:35,619 --> 00:36:42,670
device and it even contains<font color="#E5E5E5"> a pointer</font>

819
00:36:38,349 --> 00:36:48,759
<font color="#E5E5E5">into</font><font color="#CCCCCC"> a dll</font><font color="#E5E5E5"> so we already defeated a SLR</font>

820
00:36:42,670 --> 00:36:52,569
with this as<font color="#E5E5E5"> well so</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> we do now is</font>

821
00:36:48,759 --> 00:36:54,390
we just read all of these pointers then

822
00:36:52,569 --> 00:36:57,099
we know where the vram is so now we have

823
00:36:54,390 --> 00:37:00,879
now<font color="#E5E5E5"> we can do an absolute read and write</font>

824
00:36:57,099 --> 00:37:03,009
<font color="#E5E5E5">because we can well so we can just</font>

825
00:37:00,880 --> 00:37:06,489
always subtract<font color="#E5E5E5"> the vram and then use</font>

826
00:37:03,009 --> 00:37:07,599
that<font color="#E5E5E5"> as an offset</font><font color="#CCCCCC"> and we can so we can</font>

827
00:37:06,489 --> 00:37:10,539
now read<font color="#E5E5E5"> and write</font><font color="#CCCCCC"> memory from</font>

828
00:37:07,599 --> 00:37:14,140
everywhere<font color="#E5E5E5"> and we already defeated a SLR</font>

829
00:37:10,539 --> 00:37:15,369
because we leaked a module base and now

830
00:37:14,140 --> 00:37:18,460
<font color="#E5E5E5">we just</font><font color="#CCCCCC"> need to need to chase some</font>

831
00:37:15,369 --> 00:37:19,569
pointers<font color="#E5E5E5"> to find kernel32 and we find a</font>

832
00:37:18,460 --> 00:37:22,930
<font color="#E5E5E5">function pointer that's worth</font><font color="#CCCCCC"> over</font>

833
00:37:19,569 --> 00:37:27,249
<font color="#E5E5E5">writing and there's a really good one</font>

834
00:37:22,930 --> 00:37:28,868
<font color="#E5E5E5">that</font><font color="#CCCCCC"> we can trigger by BBVA</font><font color="#E5E5E5"> and this is</font>

835
00:37:27,249 --> 00:37:30,848
code that's normally not<font color="#E5E5E5"> called so we</font>

836
00:37:28,869 --> 00:37:32,289
can if we overrode this point that we

837
00:37:30,849 --> 00:37:33,970
can then call<font color="#E5E5E5"> this and trigger it and</font>

838
00:37:32,289 --> 00:37:38,800
the function pointer<font color="#E5E5E5"> here is call</font>

839
00:37:33,970 --> 00:37:42,129
<font color="#CCCCCC">PFN BBVA</font><font color="#E5E5E5"> guess capability update so we</font>

840
00:37:38,800 --> 00:37:45,550
just override<font color="#CCCCCC"> that with our own own code</font>

841
00:37:42,130 --> 00:37:46,570
pointer<font color="#E5E5E5"> and we we we pivot into a rope</font>

842
00:37:45,550 --> 00:37:51,670
chain and then we could<font color="#E5E5E5"> call this fusion</font>

843
00:37:46,570 --> 00:37:54,250
<font color="#E5E5E5">eventually</font><font color="#CCCCCC"> alright and then</font><font color="#E5E5E5"> after we get</font>

844
00:37:51,670 --> 00:37:56,820
caught execution<font color="#E5E5E5"> Ravana we run a</font>

845
00:37:54,250 --> 00:38:00,040
privilege escalation payload using the

846
00:37:56,820 --> 00:38:02,020
trick that<font color="#CCCCCC"> I showed you</font><font color="#E5E5E5"> before</font><font color="#CCCCCC"> and then</font>

847
00:38:00,040 --> 00:38:04,660
we get system level code execution and

848
00:38:02,020 --> 00:38:08,020
<font color="#E5E5E5">we can even repair everything so that VM</font>

849
00:38:04,660 --> 00:38:16,330
keeps running and<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> just show</font><font color="#CCCCCC"> you</font>

850
00:38:08,020 --> 00:38:23,560
<font color="#CCCCCC">lifetime of this right</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> alright</font><font color="#E5E5E5"> so</font>

851
00:38:16,330 --> 00:38:24,240
first<font color="#CCCCCC"> of all</font><font color="#E5E5E5"> I added a kernel driver to</font>

852
00:38:23,560 --> 00:38:27,940
this guest

853
00:38:24,240 --> 00:38:32,680
<font color="#CCCCCC">that gives me some low-level control</font>

854
00:38:27,940 --> 00:38:34,720
over the video<font color="#E5E5E5"> RAM and the HDMI calls so</font>

855
00:38:32,680 --> 00:38:37,830
this exploit requires having<font color="#E5E5E5"> root in the</font>

856
00:38:34,720 --> 00:38:37,830
first place inside<font color="#E5E5E5"> the guest</font>

857
00:38:46,960 --> 00:38:54,010
yeah and then then we just<font color="#E5E5E5"> leaks a leak</font>

858
00:38:50,710 --> 00:38:55,839
the well we can<font color="#E5E5E5"> we can learn the size of</font>

859
00:38:54,010 --> 00:38:58,240
the vram then we leak a couple of

860
00:38:55,839 --> 00:38:59,920
pointers then we write some<font color="#CCCCCC"> shellcode</font>

861
00:38:58,240 --> 00:39:01,689
<font color="#E5E5E5">somewhere and then just for good like</font>

862
00:38:59,920 --> 00:39:03,760
just<font color="#E5E5E5"> for added tension it</font><font color="#CCCCCC"> will just wait</font>

863
00:39:01,690 --> 00:39:08,740
20 seconds<font color="#E5E5E5"> and then hopefully afterwards</font>

864
00:39:03,760 --> 00:39:12,250
<font color="#CCCCCC">will give us a shell</font><font color="#E5E5E5"> all right so now we</font>

865
00:39:08,740 --> 00:39:13,660
have<font color="#CCCCCC"> a shell on the host</font><font color="#E5E5E5"> and this</font>

866
00:39:12,250 --> 00:39:15,760
doesn't<font color="#CCCCCC"> even need networking networking</font>

867
00:39:13,660 --> 00:39:22,270
is completely disabled in the VM<font color="#E5E5E5"> its</font>

868
00:39:15,760 --> 00:39:26,349
tunneled through the video<font color="#CCCCCC"> ram know and</font>

869
00:39:22,270 --> 00:39:28,030
<font color="#E5E5E5">verse system and now we can pop calc</font><font color="#CCCCCC"> and</font>

870
00:39:26,349 --> 00:39:30,460
now we're entering into<font color="#E5E5E5"> a sophisticated</font>

871
00:39:28,030 --> 00:39:32,920
<font color="#CCCCCC">security mitigation that was added to</font>

872
00:39:30,460 --> 00:39:36,270
Windows 10<font color="#E5E5E5"> where they don't allow you to</font>

873
00:39:32,920 --> 00:39:38,680
<font color="#E5E5E5">spawn a calculator as</font><font color="#CCCCCC"> a system</font><font color="#E5E5E5"> anymore</font>

874
00:39:36,270 --> 00:39:41,369
and I don't<font color="#E5E5E5"> know what this even means</font>

875
00:39:38,680 --> 00:39:44,980
<font color="#E5E5E5">and you can't click on the button</font><font color="#CCCCCC"> so</font>

876
00:39:41,369 --> 00:39:46,599
it's weird<font color="#E5E5E5"> but an even more</font>

877
00:39:44,980 --> 00:39:51,190
<font color="#CCCCCC">sophisticated attacker might then just</font>

878
00:39:46,599 --> 00:39:56,680
pop<font color="#E5E5E5"> something else for</font><font color="#CCCCCC"> example for</font>

879
00:39:51,190 --> 00:39:58,270
example minesweeper<font color="#E5E5E5"> alright so and now</font>

880
00:39:56,680 --> 00:40:00,578
this probably<font color="#E5E5E5"> also hard to see but now</font>

881
00:39:58,270 --> 00:40:02,109
<font color="#CCCCCC">it this</font><font color="#E5E5E5"> one this system and you can see</font>

882
00:40:00,579 --> 00:40:04,530
<font color="#CCCCCC">that it's a sub process of VirtualBox</font>

883
00:40:02,109 --> 00:40:04,529
the<font color="#CCCCCC"> DEXA</font>

884
00:40:12,210 --> 00:40:16,350
yeah and the<font color="#E5E5E5"> end the</font><font color="#CCCCCC"> p.m. still works</font>

885
00:40:24,690 --> 00:40:30,490
<font color="#CCCCCC">alright so I have a bit more</font><font color="#E5E5E5"> time so</font><font color="#CCCCCC"> I</font>

886
00:40:27,070 --> 00:40:31,810
can show you something<font color="#CCCCCC"> else</font><font color="#E5E5E5"> when I</font>

887
00:40:30,490 --> 00:40:33,310
looked at VirtualBox in the very

888
00:40:31,810 --> 00:40:35,470
<font color="#CCCCCC">beginning I thought</font><font color="#E5E5E5"> I found a really</font>

889
00:40:33,310 --> 00:40:38,830
cool bug<font color="#E5E5E5"> in VirtualBox</font><font color="#CCCCCC"> which actually</font>

890
00:40:35,470 --> 00:40:40,560
wasn't<font color="#CCCCCC"> and it was</font><font color="#E5E5E5"> actually a bug in</font>

891
00:40:38,830 --> 00:40:44,020
vagrant<font color="#CCCCCC"> and this is a wrapper around</font>

892
00:40:40,560 --> 00:40:46,270
<font color="#E5E5E5">VirtualBox</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> what I noticed is</font><font color="#CCCCCC"> that</font>

893
00:40:44,020 --> 00:40:48,430
<font color="#CCCCCC">you could if you could create a symlink</font>

894
00:40:46,270 --> 00:40:50,620
<font color="#CCCCCC">in a shared folder you could then force</font>

895
00:40:48,430 --> 00:40:53,799
that<font color="#CCCCCC"> symlink to be opened on the host</font>

896
00:40:50,620 --> 00:40:55,240
<font color="#E5E5E5">rather than on the guest so you can then</font>

897
00:40:53,800 --> 00:40:56,710
<font color="#E5E5E5">read and write every file on the host</font>

898
00:40:55,240 --> 00:41:01,299
because<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> just create a symlink to</font>

899
00:40:56,710 --> 00:41:05,700
an absolute path and it turns out the

900
00:41:01,300 --> 00:41:07,840
<font color="#CCCCCC">the VBox the VirtualBox</font><font color="#E5E5E5"> shared folder</font>

901
00:41:05,700 --> 00:41:10,600
file system implementation<font color="#E5E5E5"> even had a</font>

902
00:41:07,840 --> 00:41:13,360
flag where it would that<font color="#E5E5E5"> would force</font>

903
00:41:10,600 --> 00:41:15,790
that behavior<font color="#CCCCCC"> so if your</font><font color="#E5E5E5"> route and the</font>

904
00:41:13,360 --> 00:41:19,510
<font color="#E5E5E5">guest you can just do this and you can</font>

905
00:41:15,790 --> 00:41:21,670
read<font color="#E5E5E5"> and write files on the host and you</font>

906
00:41:19,510 --> 00:41:23,230
can even<font color="#E5E5E5"> do the same thing if you don't</font>

907
00:41:21,670 --> 00:41:26,410
<font color="#CCCCCC">have</font><font color="#E5E5E5"> any privileges inside the guest</font>

908
00:41:23,230 --> 00:41:28,270
because of this<font color="#CCCCCC"> VBox user device because</font>

909
00:41:26,410 --> 00:41:35,080
you<font color="#E5E5E5"> can you can exploit all of this</font>

910
00:41:28,270 --> 00:41:36,700
through<font color="#CCCCCC"> h</font><font color="#E5E5E5"> CCM but it turns out this is</font>

911
00:41:35,080 --> 00:41:39,009
not<font color="#CCCCCC"> actually a VirtualBox back because</font>

912
00:41:36,700 --> 00:41:42,160
they usually do not<font color="#E5E5E5"> allow you to</font><font color="#CCCCCC"> create</font>

913
00:41:39,010 --> 00:41:44,260
symlinks on shared folders and you

914
00:41:42,160 --> 00:41:47,850
explicitly have to set a flag<font color="#E5E5E5"> to enable</font>

915
00:41:44,260 --> 00:41:50,470
this which<font color="#CCCCCC"> rakin does by default and</font>

916
00:41:47,850 --> 00:41:53,560
which you couldn't disable until

917
00:41:50,470 --> 00:41:55,000
recently<font color="#E5E5E5"> so if you're running a vagrant</font>

918
00:41:53,560 --> 00:42:00,700
then we would also always<font color="#E5E5E5"> be vulnerable</font>

919
00:41:55,000 --> 00:42:03,130
<font color="#E5E5E5">against this and</font><font color="#CCCCCC"> their</font><font color="#E5E5E5"> salute their</font>

920
00:42:00,700 --> 00:42:04,779
solution is<font color="#CCCCCC"> to just warn you</font><font color="#E5E5E5"> now that</font>

921
00:42:03,130 --> 00:42:06,910
you probably<font color="#E5E5E5"> don't want this and you</font>

922
00:42:04,780 --> 00:42:10,180
<font color="#E5E5E5">probably shouldn't run untrusted code in</font>

923
00:42:06,910 --> 00:42:14,279
the<font color="#E5E5E5"> guest and if you don't want this</font>

924
00:42:10,180 --> 00:42:16,440
behavior<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you should set this</font><font color="#E5E5E5"> opt-in</font>

925
00:42:14,280 --> 00:42:21,130
environment variable<font color="#CCCCCC"> that</font><font color="#E5E5E5"> would prevent</font>

926
00:42:16,440 --> 00:42:22,360
some links from being created<font color="#E5E5E5"> so</font><font color="#CCCCCC"> if</font>

927
00:42:21,130 --> 00:42:25,950
you're using<font color="#E5E5E5"> bacon you should definitely</font>

928
00:42:22,360 --> 00:42:25,950
set that environment variable

929
00:42:27,329 --> 00:42:33,400
<font color="#E5E5E5">all right so my conclusion is that</font>

930
00:42:30,269 --> 00:42:38,049
<font color="#E5E5E5">VirtualBox is quite a nice codebase</font>

931
00:42:33,400 --> 00:42:39,490
actually it's um if you if you<font color="#CCCCCC"> use</font><font color="#E5E5E5"> to</font>

932
00:42:38,049 --> 00:42:40,869
the file<font color="#CCCCCC"> the directory structure it's</font>

933
00:42:39,490 --> 00:42:43,000
kind of easy to<font color="#E5E5E5"> find where stuff is</font>

934
00:42:40,869 --> 00:42:47,319
implemented<font color="#E5E5E5"> and it's pretty structured</font>

935
00:42:43,000 --> 00:42:50,200
<font color="#E5E5E5">in that way</font><font color="#CCCCCC"> and Oracle security response</font>

936
00:42:47,319 --> 00:42:51,460
in my experience was pretty<font color="#E5E5E5"> good so they</font>

937
00:42:50,200 --> 00:42:53,019
have this schedule where they only

938
00:42:51,460 --> 00:42:55,960
release security patches every<font color="#E5E5E5"> three</font>

939
00:42:53,019 --> 00:42:57,549
months<font color="#E5E5E5"> but usually all</font><font color="#CCCCCC"> the box</font><font color="#E5E5E5"> that I</font>

940
00:42:55,960 --> 00:43:03,579
reported<font color="#E5E5E5"> to them they fixed in the next</font>

941
00:42:57,549 --> 00:43:04,839
<font color="#CCCCCC">upcoming release yeah obviously</font><font color="#E5E5E5"> VMware</font>

942
00:43:03,579 --> 00:43:08,319
<font color="#E5E5E5">is not the only one who has cool bugs</font>

943
00:43:04,839 --> 00:43:09,640
<font color="#E5E5E5">and can be exploited so I really I think</font>

944
00:43:08,319 --> 00:43:11,529
<font color="#E5E5E5">it's really cool that they now added</font>

945
00:43:09,640 --> 00:43:15,660
VirtualBox to ponder<font color="#E5E5E5"> on maybe we'll see</font>

946
00:43:11,529 --> 00:43:15,660
more<font color="#CCCCCC"> DM escapes there in the future</font>

947
00:43:15,869 --> 00:43:21,250
yeah<font color="#E5E5E5"> and aside</font><font color="#CCCCCC"> from this this</font><font color="#E5E5E5"> VM</font><font color="#CCCCCC"> escape</font>

948
00:43:19,150 --> 00:43:23,529
a<font color="#CCCCCC"> privilege boundary there's other</font>

949
00:43:21,250 --> 00:43:26,799
interesting<font color="#CCCCCC"> things to explore like the</font>

950
00:43:23,529 --> 00:43:28,569
process<font color="#E5E5E5"> hardening and that's maybe a bit</font>

951
00:43:26,799 --> 00:43:32,829
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get into there are several</font>

952
00:43:28,569 --> 00:43:34,480
issues<font color="#CCCCCC"> there still for</font><font color="#E5E5E5"> sure yeah and if</font>

953
00:43:32,829 --> 00:43:37,450
you<font color="#E5E5E5"> want to have a secure VirtualBox</font>

954
00:43:34,480 --> 00:43:40,779
installation I would advise you<font color="#E5E5E5"> to</font><font color="#CCCCCC"> not</font>

955
00:43:37,450 --> 00:43:42,038
even<font color="#E5E5E5"> try</font><font color="#CCCCCC"> on a multi-user system because</font>

956
00:43:40,779 --> 00:43:44,200
<font color="#CCCCCC">probably there's tons of</font><font color="#E5E5E5"> bugs still</font>

957
00:43:42,039 --> 00:43:47,710
there that<font color="#CCCCCC"> allow you to privilege</font>

958
00:43:44,200 --> 00:43:50,140
escalate you should disable<font color="#E5E5E5"> all the</font>

959
00:43:47,710 --> 00:43:53,460
features you<font color="#E5E5E5"> don't need especially 3d</font>

960
00:43:50,140 --> 00:43:55,808
acceleration and video acceleration<font color="#E5E5E5"> and</font>

961
00:43:53,460 --> 00:43:58,599
I think VirtualBox does a good job at

962
00:43:55,809 --> 00:44:01,630
<font color="#CCCCCC">making</font><font color="#E5E5E5"> the defaults kind of safe here so</font>

963
00:43:58,599 --> 00:44:03,339
if you<font color="#E5E5E5"> don't use clip drag and drop it</font>

964
00:44:01,630 --> 00:44:05,259
won't be enabled<font color="#E5E5E5"> so you have to actually</font>

965
00:44:03,339 --> 00:44:08,170
enable it if you want to same for

966
00:44:05,259 --> 00:44:09,609
clipboard sharing and shared folders<font color="#E5E5E5"> so</font>

967
00:44:08,170 --> 00:44:10,900
it's a bit<font color="#E5E5E5"> different to</font><font color="#CCCCCC"> VMware and that</font>

968
00:44:09,609 --> 00:44:12,960
we got<font color="#E5E5E5"> where everything is just on by</font>

969
00:44:10,900 --> 00:44:12,960
default

970
00:44:13,589 --> 00:44:17,470
yeah obvious<font color="#E5E5E5"> um of these bugs or most of</font>

971
00:44:16,150 --> 00:44:21,250
these<font color="#E5E5E5"> bugs are only exploitable from</font>

972
00:44:17,470 --> 00:44:24,939
kernel mode<font color="#E5E5E5"> so it helps</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> have a secure</font>

973
00:44:21,250 --> 00:44:27,759
<font color="#E5E5E5">guest OS and to do privilege separation</font>

974
00:44:24,940 --> 00:44:32,190
inside the guest<font color="#E5E5E5"> itself and if using</font>

975
00:44:27,759 --> 00:44:32,190
vagrant<font color="#E5E5E5"> set this environment variable</font>

976
00:44:33,430 --> 00:44:37,390
<font color="#E5E5E5">all right that is for me</font><font color="#CCCCCC"> and if you have</font>

977
00:44:35,680 --> 00:44:57,509
any questions that would<font color="#E5E5E5"> be a good time</font>

978
00:44:37,390 --> 00:44:57,509
to<font color="#CCCCCC"> ask is</font><font color="#E5E5E5"> there any questions</font>

979
00:45:15,599 --> 00:45:18,779
if you<font color="#E5E5E5"> think of anything later you can</font>

980
00:45:16,769 --> 00:45:21,508
probably find<font color="#E5E5E5"> me somewhere and ask me in</font>

981
00:45:18,779 --> 00:45:22,420
person as well<font color="#E5E5E5"> okay so thank you thank</font>

982
00:45:21,509 --> 00:45:27,550
<font color="#E5E5E5">you</font>

983
00:45:22,420 --> 00:45:27,550
[Applause]

