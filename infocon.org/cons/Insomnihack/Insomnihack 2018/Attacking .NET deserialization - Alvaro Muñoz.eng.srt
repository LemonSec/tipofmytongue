1
00:00:06,810 --> 00:00:10,570
[Music]

2
00:00:12,769 --> 00:00:18,630
<font color="#E5E5E5">okay so yeah my name is Abram</font><font color="#CCCCCC"> North I'm</font>

3
00:00:15,839 --> 00:00:20,340
also known as pond tester in<font color="#E5E5E5"> Twitter</font><font color="#CCCCCC"> and</font>

4
00:00:18,630 --> 00:00:22,349
<font color="#CCCCCC">github and</font><font color="#E5E5E5"> social networks</font>

5
00:00:20,340 --> 00:00:24,300
<font color="#CCCCCC">I work as a principal security</font>

6
00:00:22,349 --> 00:00:26,759
researcher with 45<font color="#E5E5E5"> basically in the</font>

7
00:00:24,300 --> 00:00:28,710
static code analyzer team<font color="#CCCCCC"> I don't</font>

8
00:00:26,759 --> 00:00:31,080
<font color="#CCCCCC">consider myself a speaker but I happen</font>

9
00:00:28,710 --> 00:00:33,510
to present that different conference

10
00:00:31,080 --> 00:00:36,329
<font color="#E5E5E5">conferences that I like black hat</font><font color="#CCCCCC"> and</font>

11
00:00:33,510 --> 00:00:37,530
DEF CON and so on and I have a special

12
00:00:36,329 --> 00:00:40,680
interest in remote code execution

13
00:00:37,530 --> 00:00:44,399
vulnerabilities through<font color="#CCCCCC"> our web in web</font>

14
00:00:40,680 --> 00:00:48,030
applications so I basically successfully

15
00:00:44,399 --> 00:00:49,440
exploited<font color="#CCCCCC"> products</font><font color="#E5E5E5"> and vendors like</font>

16
00:00:48,030 --> 00:00:51,420
Microsoft what I call<font color="#E5E5E5"> workday a</font>

17
00:00:49,440 --> 00:00:53,370
<font color="#CCCCCC">Salesforce and so on</font><font color="#E5E5E5"> actually</font><font color="#CCCCCC"> the</font>

18
00:00:51,420 --> 00:00:57,030
Microsoft one one of the Microsoft ones

19
00:00:53,370 --> 00:00:59,849
<font color="#E5E5E5">I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> present today so apart from</font>

20
00:00:57,030 --> 00:01:04,129
that<font color="#E5E5E5"> I have some experience</font><font color="#CCCCCC"> around</font>

21
00:00:59,850 --> 00:01:07,500
serialization back in 2012 I was looking

22
00:01:04,129 --> 00:01:11,280
different<font color="#E5E5E5"> REST API implementation</font>

23
00:01:07,500 --> 00:01:13,050
libraries like Restylane<font color="#E5E5E5"> and Andres DC</font>

24
00:01:11,280 --> 00:01:15,450
and I<font color="#E5E5E5"> was able to find some remote code</font>

25
00:01:13,050 --> 00:01:18,780
execution vulnerabilities by<font color="#E5E5E5"> abuse in</font>

26
00:01:15,450 --> 00:01:21,630
<font color="#CCCCCC">Access</font><font color="#E5E5E5"> dream and XML decoder and then</font><font color="#CCCCCC"> in</font>

27
00:01:18,780 --> 00:01:24,869
<font color="#E5E5E5">2013 I started</font><font color="#CCCCCC"> looking at</font><font color="#E5E5E5"> Java binary</font>

28
00:01:21,630 --> 00:01:26,640
<font color="#E5E5E5">visualization right at that time and to</font>

29
00:01:24,869 --> 00:01:28,830
my<font color="#E5E5E5"> knowledge this was the first public</font>

30
00:01:26,640 --> 00:01:31,410
<font color="#E5E5E5">remote restitution gadget available for</font>

31
00:01:28,830 --> 00:01:33,209
Java<font color="#E5E5E5"> digitization but unfortunately no</font>

32
00:01:31,410 --> 00:01:35,880
one was paying<font color="#E5E5E5"> attention to javadi's</font>

33
00:01:33,209 --> 00:01:39,090
realization at those days so it was not

34
00:01:35,880 --> 00:01:43,380
until 2015 when Gabriel Lawrence

35
00:01:39,090 --> 00:01:45,410
presented the gadget in Apache Commons

36
00:01:43,380 --> 00:01:47,670
collection that people started looking

37
00:01:45,410 --> 00:01:50,069
Java visualization vulnerabilities I

38
00:01:47,670 --> 00:01:51,599
started fixing<font color="#E5E5E5"> them and finding them and</font>

39
00:01:50,069 --> 00:01:53,489
so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> so that's</font><font color="#CCCCCC"> why I'm saying</font>

40
00:01:51,599 --> 00:01:56,310
<font color="#E5E5E5">unfortunately because we got we could</font>

41
00:01:53,489 --> 00:01:59,220
have saved ourselves a couple<font color="#E5E5E5"> of years</font>

42
00:01:56,310 --> 00:02:01,739
<font color="#E5E5E5">by starting looking at that in 2012</font><font color="#CCCCCC"> at</font>

43
00:01:59,220 --> 00:02:03,060
least so at that time<font color="#E5E5E5"> when they</font><font color="#CCCCCC"> released</font>

44
00:02:01,739 --> 00:02:05,220
discard yet I started looking in

45
00:02:03,060 --> 00:02:07,229
judicialization again<font color="#CCCCCC"> I was able</font><font color="#E5E5E5"> to find</font>

46
00:02:05,220 --> 00:02:09,508
multiple remote code execution<font color="#CCCCCC"> cages was</font>

47
00:02:07,229 --> 00:02:12,180
able<font color="#CCCCCC"> to bypass the standard mitigation</font>

48
00:02:09,508 --> 00:02:14,970
technique which is called<font color="#CCCCCC"> as look-ahead</font>

49
00:02:12,180 --> 00:02:18,659
object visualization and<font color="#E5E5E5"> I was able to</font>

50
00:02:14,970 --> 00:02:20,519
find the<font color="#E5E5E5"> cut yet in the Java Runtime</font>

51
00:02:18,659 --> 00:02:22,540
which means that you<font color="#E5E5E5"> don't require a</font>

52
00:02:20,519 --> 00:02:24,310
<font color="#E5E5E5">third-party libraries to be present</font>

53
00:02:22,540 --> 00:02:26,739
in the<font color="#CCCCCC"> classpath</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> order to exploit</font>

54
00:02:24,310 --> 00:02:28,480
<font color="#E5E5E5">these vulnerabilities so then I moved to</font>

55
00:02:26,739 --> 00:02:30,250
<font color="#E5E5E5">J so this visualization which I</font>

56
00:02:28,480 --> 00:02:33,459
presented last<font color="#E5E5E5"> year at black hat</font><font color="#CCCCCC"> and DEF</font>

57
00:02:30,250 --> 00:02:36,250
CON<font color="#CCCCCC"> but most of these is</font><font color="#E5E5E5"> is Java right</font>

58
00:02:33,459 --> 00:02:39,010
so at some point<font color="#E5E5E5"> I</font><font color="#CCCCCC"> changed my interest</font>

59
00:02:36,250 --> 00:02:41,170
and I started looking<font color="#E5E5E5"> at dotnet and this</font>

60
00:02:39,010 --> 00:02:42,670
is what this talk is about<font color="#E5E5E5"> um we're</font>

61
00:02:41,170 --> 00:02:45,309
<font color="#E5E5E5">going to see a brief introduction</font><font color="#CCCCCC"> into</font>

62
00:02:42,670 --> 00:02:48,099
<font color="#E5E5E5">serialization formats and then we will</font>

63
00:02:45,310 --> 00:02:50,590
see what are the<font color="#E5E5E5"> most popular and</font><font color="#CCCCCC"> used</font>

64
00:02:48,099 --> 00:02:52,090
dotnet<font color="#CCCCCC"> serialize are both by Microsoft</font>

65
00:02:50,590 --> 00:02:54,459
and<font color="#CCCCCC"> third-party libraries like JSON</font>

66
00:02:52,090 --> 00:02:56,139
dotnet if we have time we will<font color="#CCCCCC"> see some</font>

67
00:02:54,459 --> 00:02:59,290
some demos<font color="#CCCCCC"> including</font><font color="#E5E5E5"> this Microsoft</font>

68
00:02:56,139 --> 00:03:01,269
<font color="#CCCCCC">promote</font><font color="#E5E5E5"> Constitution in nature and then</font>

69
00:02:59,290 --> 00:03:03,340
we will move to<font color="#CCCCCC"> see how we can detect</font>

70
00:03:01,269 --> 00:03:08,139
find these vulnerabilities and then fix

71
00:03:03,340 --> 00:03:11,439
them<font color="#CCCCCC"> so serialization 101</font><font color="#E5E5E5"> so I don't</font>

72
00:03:08,139 --> 00:03:13,659
know why<font color="#E5E5E5"> but in English the Americans I</font>

73
00:03:11,439 --> 00:03:16,090
guess and<font color="#E5E5E5"> British people use pickle for</font>

74
00:03:13,659 --> 00:03:18,819
<font color="#E5E5E5">serialization to me pickle is just this</font>

75
00:03:16,090 --> 00:03:20,620
green vegetable<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> actually very</font>

76
00:03:18,819 --> 00:03:23,319
famous like the Python<font color="#E5E5E5"> libraries called</font>

77
00:03:20,620 --> 00:03:26,409
pickle<font color="#E5E5E5"> this talk up by crisp Rahab</font><font color="#CCCCCC"> was</font>

78
00:03:23,319 --> 00:03:29,048
called Marceline pickles but well to me

79
00:03:26,409 --> 00:03:32,379
<font color="#CCCCCC">it make a</font><font color="#E5E5E5"> great excuse to use a Rick and</font>

80
00:03:29,049 --> 00:03:36,250
Morty<font color="#CCCCCC"> drawing see me in my</font><font color="#E5E5E5"> slides and</font>

81
00:03:32,379 --> 00:03:37,899
well this<font color="#E5E5E5"> is Rick obviously and if what</font>

82
00:03:36,250 --> 00:03:40,090
you<font color="#CCCCCC"> have an instance of Rick that</font><font color="#E5E5E5"> is</font>

83
00:03:37,900 --> 00:03:43,930
<font color="#E5E5E5">living in your VM and at some point you</font>

84
00:03:40,090 --> 00:03:45,430
want<font color="#E5E5E5"> to put this this object into a</font>

85
00:03:43,930 --> 00:03:47,470
different representation<font color="#E5E5E5"> so you can</font>

86
00:03:45,430 --> 00:03:50,229
store<font color="#E5E5E5"> it in the file</font><font color="#CCCCCC"> system for example</font>

87
00:03:47,470 --> 00:03:52,209
or maybe<font color="#CCCCCC"> put</font><font color="#E5E5E5"> it into a database or send</font>

88
00:03:50,229 --> 00:03:54,400
it across the<font color="#CCCCCC"> network</font><font color="#E5E5E5"> or whatever so you</font>

89
00:03:52,209 --> 00:03:57,069
put it through the magic portal<font color="#E5E5E5"> and then</font>

90
00:03:54,400 --> 00:04:00,729
<font color="#E5E5E5">you get pickle Rick right and this is</font>

91
00:03:57,069 --> 00:04:02,948
the<font color="#E5E5E5"> sterilization format of Rick</font><font color="#CCCCCC"> at a</font>

92
00:04:00,729 --> 00:04:06,129
later stage<font color="#CCCCCC"> you want you may want to</font>

93
00:04:02,949 --> 00:04:09,340
recover this instance of<font color="#E5E5E5"> Rick in your VM</font>

94
00:04:06,129 --> 00:04:10,929
so you basically reconstruct the object

95
00:04:09,340 --> 00:04:15,069
based on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> information on the</font>

96
00:04:10,930 --> 00:04:17,380
sterilized format so the the<font color="#CCCCCC"> thing that</font>

97
00:04:15,069 --> 00:04:20,349
<font color="#CCCCCC">is key for visualization attacks here is</font>

98
00:04:17,380 --> 00:04:22,509
that we<font color="#E5E5E5"> are not sending just the pickle</font>

99
00:04:20,349 --> 00:04:24,070
but<font color="#E5E5E5"> we are sending also this pickle</font><font color="#CCCCCC"> Rick</font>

100
00:04:22,509 --> 00:04:26,440
right and this is called the type

101
00:04:24,070 --> 00:04:28,719
discriminator the type discriminator is

102
00:04:26,440 --> 00:04:30,310
nothing else<font color="#CCCCCC"> that the class name or the</font>

103
00:04:28,720 --> 00:04:32,740
type name that you are<font color="#E5E5E5"> sending along</font>

104
00:04:30,310 --> 00:04:34,270
with their data<font color="#CCCCCC"> and so if you are</font>

105
00:04:32,740 --> 00:04:36,280
familiar<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Java visualization</font><font color="#E5E5E5"> for</font>

106
00:04:34,270 --> 00:04:37,870
examples<font color="#E5E5E5"> you are probably</font>

107
00:04:36,280 --> 00:04:41,409
familiar with well this is the<font color="#E5E5E5"> binary</font>

108
00:04:37,870 --> 00:04:43,030
format and this<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> the ASCII</font>

109
00:04:41,410 --> 00:04:45,190
representation of the class name<font color="#CCCCCC"> and</font>

110
00:04:43,030 --> 00:04:47,590
<font color="#CCCCCC">basically the server is going</font><font color="#E5E5E5"> to use</font>

111
00:04:45,190 --> 00:04:49,810
these class names to actually

112
00:04:47,590 --> 00:04:53,560
instantiate and reconstruct<font color="#E5E5E5"> the objects</font>

113
00:04:49,810 --> 00:04:55,930
at<font color="#CCCCCC"> the server side so that's Java</font>

114
00:04:53,560 --> 00:04:57,669
<font color="#E5E5E5">serialization in dough in dotnet for</font>

115
00:04:55,930 --> 00:04:59,710
example in<font color="#E5E5E5"> JSON dotnet you have</font>

116
00:04:57,669 --> 00:05:02,859
something<font color="#CCCCCC"> similar but this is JSON</font>

117
00:04:59,710 --> 00:05:05,739
<font color="#E5E5E5">format right so you have type attribute</font>

118
00:05:02,860 --> 00:05:09,610
<font color="#E5E5E5">here that contains</font><font color="#CCCCCC"> something that looks</font>

119
00:05:05,740 --> 00:05:12,250
<font color="#E5E5E5">like toad net assembly dotnet type name</font>

120
00:05:09,610 --> 00:05:14,800
<font color="#E5E5E5">so if the attackers are able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> change</font>

121
00:05:12,250 --> 00:05:17,830
<font color="#E5E5E5">those type discriminators then they will</font>

122
00:05:14,800 --> 00:05:19,750
be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to force an instantiation of an</font>

123
00:05:17,830 --> 00:05:21,789
arbitrary<font color="#E5E5E5"> class in during the</font>

124
00:05:19,750 --> 00:05:23,260
<font color="#E5E5E5">initialization process and that will</font>

125
00:05:21,790 --> 00:05:25,660
<font color="#E5E5E5">basically allow the attacker</font><font color="#CCCCCC"> to</font>

126
00:05:23,260 --> 00:05:28,840
instantiate<font color="#CCCCCC"> a multi instant</font><font color="#E5E5E5"> instance</font>

127
00:05:25,660 --> 00:05:30,880
instead<font color="#CCCCCC"> of the require so there is</font>

128
00:05:28,840 --> 00:05:33,400
nothing<font color="#CCCCCC"> really dangerous on getting the</font>

129
00:05:30,880 --> 00:05:35,290
server to instantiate<font color="#E5E5E5"> or call the</font>

130
00:05:33,400 --> 00:05:36,880
default<font color="#E5E5E5"> constructor for a different or</font>

131
00:05:35,290 --> 00:05:39,070
arbitrary type because<font color="#E5E5E5"> the four</font>

132
00:05:36,880 --> 00:05:41,050
constructors<font color="#E5E5E5"> are just parameter</font><font color="#CCCCCC"> lists</font>

133
00:05:39,070 --> 00:05:43,690
and they don't do<font color="#E5E5E5"> anything</font><font color="#CCCCCC"> paths</font>

134
00:05:41,050 --> 00:05:46,030
<font color="#E5E5E5">normally but normally in order to fully</font>

135
00:05:43,690 --> 00:05:48,280
reconstruct the object there are some

136
00:05:46,030 --> 00:05:50,260
<font color="#E5E5E5">callbacks and some methods</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> may get</font>

137
00:05:48,280 --> 00:05:52,090
invoke<font color="#E5E5E5"> right so for</font><font color="#CCCCCC"> example if you are</font>

138
00:05:50,260 --> 00:05:54,280
<font color="#E5E5E5">familiar with Java visualization you</font>

139
00:05:52,090 --> 00:05:57,130
have the<font color="#E5E5E5"> read object and read resolve</font>

140
00:05:54,280 --> 00:06:00,010
callbacks that<font color="#E5E5E5"> are invoked in order for</font>

141
00:05:57,130 --> 00:06:01,570
I mean this<font color="#E5E5E5"> allow the developers to</font>

142
00:06:00,010 --> 00:06:03,820
fully reconstruct the object so maybe

143
00:06:01,570 --> 00:06:06,039
you need to initiate initialize

144
00:06:03,820 --> 00:06:08,890
something<font color="#E5E5E5"> or register the object in a</font>

145
00:06:06,039 --> 00:06:10,750
jndi context<font color="#CCCCCC"> or I</font><font color="#E5E5E5"> don't know notify</font>

146
00:06:08,890 --> 00:06:11,469
someone about the initialization<font color="#E5E5E5"> or</font>

147
00:06:10,750 --> 00:06:14,020
something like<font color="#E5E5E5"> that</font>

148
00:06:11,470 --> 00:06:15,550
so in dotnet we also have this kind<font color="#CCCCCC"> of</font>

149
00:06:14,020 --> 00:06:18,789
callbacks<font color="#CCCCCC"> we have the visualization</font>

150
00:06:15,550 --> 00:06:21,789
constructor<font color="#E5E5E5"> we have some</font><font color="#CCCCCC"> visualization</font>

151
00:06:18,789 --> 00:06:23,500
<font color="#E5E5E5">callbacks</font><font color="#CCCCCC"> like on on visualization for</font>

152
00:06:21,789 --> 00:06:25,870
example and we also have some

153
00:06:23,500 --> 00:06:27,340
annotations that<font color="#CCCCCC"> we can use to let the</font>

154
00:06:25,870 --> 00:06:29,700
framework know which method<font color="#CCCCCC"> should be</font>

155
00:06:27,340 --> 00:06:32,140
invoke<font color="#E5E5E5"> within the visualization process</font>

156
00:06:29,700 --> 00:06:35,260
<font color="#E5E5E5">apart from the</font><font color="#CCCCCC"> binary format normally in</font>

157
00:06:32,140 --> 00:06:37,960
JSON and XML<font color="#E5E5E5"> and the setters are also</font>

158
00:06:35,260 --> 00:06:39,880
<font color="#CCCCCC">invoked</font><font color="#E5E5E5"> right so basically we invoke the</font>

159
00:06:37,960 --> 00:06:42,820
default constructor<font color="#CCCCCC"> we reconstruct the</font>

160
00:06:39,880 --> 00:06:44,979
object and then<font color="#E5E5E5"> we</font><font color="#CCCCCC"> invoke the setters in</font>

161
00:06:42,820 --> 00:06:46,750
order to<font color="#CCCCCC"> populate the values to the</font>

162
00:06:44,979 --> 00:06:49,390
<font color="#E5E5E5">different properties</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the of the</font>

163
00:06:46,750 --> 00:06:50,169
object<font color="#E5E5E5"> so with that we fully reconstruct</font>

164
00:06:49,390 --> 00:06:54,580
the object<font color="#E5E5E5"> but there is</font>

165
00:06:50,169 --> 00:06:56,859
some code<font color="#E5E5E5"> that is executed so gadgets</font>

166
00:06:54,580 --> 00:06:59,409
gadgets<font color="#E5E5E5"> are basically different types</font>

167
00:06:56,860 --> 00:07:00,879
that<font color="#E5E5E5"> are sitting in the</font><font color="#CCCCCC"> classpath of the</font>

168
00:06:59,409 --> 00:07:02,349
application<font color="#E5E5E5"> that is this aerial icing</font>

169
00:07:00,879 --> 00:07:05,830
you can<font color="#E5E5E5"> provide a type name but you</font>

170
00:07:02,349 --> 00:07:07,870
cannot provide a type<font color="#E5E5E5"> byte code so these</font>

171
00:07:05,830 --> 00:07:10,870
types are special because<font color="#E5E5E5"> if they are</font>

172
00:07:07,870 --> 00:07:12,490
provided<font color="#CCCCCC"> with some malicious values</font><font color="#E5E5E5"> they</font>

173
00:07:10,870 --> 00:07:15,159
can lead to arbitrary code execution<font color="#E5E5E5"> or</font>

174
00:07:12,490 --> 00:07:19,900
to something<font color="#CCCCCC"> bad like removing files</font><font color="#E5E5E5"> or</font>

175
00:07:15,159 --> 00:07:23,259
doing something<font color="#E5E5E5"> bad so this</font><font color="#CCCCCC"> is a simple</font>

176
00:07:19,900 --> 00:07:25,659
<font color="#CCCCCC">example that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a gadget</font><font color="#E5E5E5"> a setter gadget</font>

177
00:07:23,259 --> 00:07:28,060
so it starts with I'm poking some

178
00:07:25,659 --> 00:07:30,639
setters it's in dotnet<font color="#E5E5E5"> in the class</font>

179
00:07:28,060 --> 00:07:33,219
system<font color="#CCCCCC"> windows data object data provider</font>

180
00:07:30,639 --> 00:07:34,719
<font color="#CCCCCC">and I like to</font><font color="#E5E5E5"> use these</font><font color="#CCCCCC"> for explaining</font>

181
00:07:33,219 --> 00:07:36,520
<font color="#E5E5E5">what our gadget is because it's</font><font color="#CCCCCC"> very</font>

182
00:07:34,719 --> 00:07:39,569
simple<font color="#E5E5E5"> right so you have three different</font>

183
00:07:36,520 --> 00:07:42,400
setters<font color="#CCCCCC"> that when you invoke them with</font>

184
00:07:39,569 --> 00:07:45,339
attacker<font color="#E5E5E5"> control data they will</font>

185
00:07:42,400 --> 00:07:47,710
<font color="#E5E5E5">basically initiate a chain of</font><font color="#CCCCCC"> calls that</font>

186
00:07:45,339 --> 00:07:51,400
<font color="#E5E5E5">will end up invoking the invoke method</font>

187
00:07:47,710 --> 00:07:53,169
on instance<font color="#E5E5E5"> write this one</font><font color="#CCCCCC"> down here</font><font color="#E5E5E5"> so</font>

188
00:07:51,400 --> 00:07:56,109
<font color="#E5E5E5">basically there we are we</font><font color="#CCCCCC"> are using</font>

189
00:07:53,169 --> 00:07:58,180
reflection<font color="#E5E5E5"> to invoke an arbitrary</font><font color="#CCCCCC"> method</font>

190
00:07:56,110 --> 00:08:00,729
<font color="#E5E5E5">on an arbitrary</font><font color="#CCCCCC"> object instance passing</font>

191
00:07:58,180 --> 00:08:04,389
some arbitrary<font color="#E5E5E5"> method parameters and</font>

192
00:08:00,729 --> 00:08:06,969
those arbitrary<font color="#E5E5E5"> values all come from the</font>

193
00:08:04,389 --> 00:08:10,149
different setters<font color="#E5E5E5"> right like the value</font>

194
00:08:06,969 --> 00:08:12,430
<font color="#E5E5E5">that you pass to the setter so this is</font>

195
00:08:10,149 --> 00:08:14,680
an example of<font color="#E5E5E5"> a payload for JSON</font>

196
00:08:12,430 --> 00:08:17,289
<font color="#CCCCCC">Dannette basically what we are saying</font>

197
00:08:14,680 --> 00:08:19,599
here<font color="#CCCCCC"> is ok</font><font color="#E5E5E5"> we are going to deserialize</font>

198
00:08:17,289 --> 00:08:22,029
an object data provider so the server is

199
00:08:19,599 --> 00:08:23,199
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to instantiate the object that are</font>

200
00:08:22,029 --> 00:08:24,580
<font color="#E5E5E5">provided by calling the default</font>

201
00:08:23,199 --> 00:08:26,649
constructor<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to</font>

202
00:08:24,580 --> 00:08:29,469
<font color="#E5E5E5">invoke the setters for the object</font>

203
00:08:26,649 --> 00:08:32,049
instance<font color="#E5E5E5"> the method parameters and the</font>

204
00:08:29,469 --> 00:08:34,659
method name<font color="#E5E5E5"> and because we saw that</font>

205
00:08:32,049 --> 00:08:36,189
<font color="#CCCCCC">these setters will eventually call their</font>

206
00:08:34,659 --> 00:08:38,679
reflection code to invoke the method

207
00:08:36,190 --> 00:08:40,719
<font color="#E5E5E5">then we will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to get a rhetorical</font>

208
00:08:38,679 --> 00:08:42,909
execution if we can provide this piece

209
00:08:40,719 --> 00:08:47,110
of JSON<font color="#E5E5E5"> to a vulnerable JSON the net</font>

210
00:08:42,909 --> 00:08:49,480
endpoint so with that I think<font color="#E5E5E5"> that's</font>

211
00:08:47,110 --> 00:08:51,819
enough about<font color="#E5E5E5"> gadgets</font><font color="#CCCCCC"> I wrote this</font>

212
00:08:49,480 --> 00:08:54,610
application called<font color="#E5E5E5"> why so silly adore</font>

213
00:08:51,819 --> 00:08:56,560
<font color="#E5E5E5">net there is a Java version that will</font>

214
00:08:54,610 --> 00:08:58,480
basically<font color="#E5E5E5"> generate payloads for you</font><font color="#CCCCCC"> the</font>

215
00:08:56,560 --> 00:09:01,300
Java one is just<font color="#E5E5E5"> for binary format sorry</font>

216
00:08:58,480 --> 00:09:04,000
for them Java binary format this one

217
00:09:01,300 --> 00:09:05,829
supports different<font color="#E5E5E5"> federalizes</font>

218
00:09:04,000 --> 00:09:07,930
so you have to pass<font color="#E5E5E5"> the format there</font>

219
00:09:05,829 --> 00:09:10,750
that you want your data to be your

220
00:09:07,930 --> 00:09:13,359
payload to be<font color="#CCCCCC"> serialized so for</font><font color="#E5E5E5"> example</font>

221
00:09:10,750 --> 00:09:15,370
you have<font color="#CCCCCC"> to specify what</font><font color="#E5E5E5"> cut you do do</font>

222
00:09:13,360 --> 00:09:17,769
you want to use what format a do you

223
00:09:15,370 --> 00:09:21,579
want to use and<font color="#E5E5E5"> what command do you want</font>

224
00:09:17,769 --> 00:09:24,579
to invoke<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so with that let's move</font>

225
00:09:21,579 --> 00:09:26,138
<font color="#E5E5E5">to the dotnet CLI service part basically</font>

226
00:09:24,579 --> 00:09:27,699
<font color="#CCCCCC">this is nothing new</font>

227
00:09:26,139 --> 00:09:31,389
back in the days when I<font color="#E5E5E5"> was playing</font><font color="#CCCCCC"> with</font>

228
00:09:27,699 --> 00:09:33,639
the rest endpoints<font color="#CCCCCC"> in 2012</font><font color="#E5E5E5"> at Jane's</font>

229
00:09:31,389 --> 00:09:36,389
<font color="#CCCCCC">four</font><font color="#E5E5E5"> so from the Google project zero was</font>

230
00:09:33,639 --> 00:09:39,009
presenting at blackhat that some

231
00:09:36,389 --> 00:09:41,620
malicious code could<font color="#CCCCCC"> be executed</font><font color="#E5E5E5"> as the</font>

232
00:09:39,009 --> 00:09:43,540
result of dotnet<font color="#E5E5E5"> visualization so at</font>

233
00:09:41,620 --> 00:09:46,060
<font color="#E5E5E5">that time he found that binary formatter</font>

234
00:09:43,540 --> 00:09:49,779
and net data contract serializer<font color="#E5E5E5"> both</font>

235
00:09:46,060 --> 00:09:52,300
could lead to some dangerous<font color="#E5E5E5"> execution</font>

236
00:09:49,779 --> 00:09:55,480
but at<font color="#E5E5E5"> that point there was</font><font color="#CCCCCC"> no remote</font>

237
00:09:52,300 --> 00:09:57,279
code execution<font color="#CCCCCC"> gadgets right so it</font>

238
00:09:55,480 --> 00:09:59,980
happened<font color="#E5E5E5"> like in Java the Java</font>

239
00:09:57,279 --> 00:10:04,149
<font color="#E5E5E5">visualization</font><font color="#CCCCCC"> vector it was a very</font><font color="#E5E5E5"> well</font>

240
00:09:59,980 --> 00:10:07,029
<font color="#E5E5E5">known vector since at least 2007 or</font>

241
00:10:04,149 --> 00:10:09,129
something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> that but until 2015</font><font color="#E5E5E5"> when</font>

242
00:10:07,029 --> 00:10:10,779
<font color="#E5E5E5">the Apache Commons collection gardius</font>

243
00:10:09,129 --> 00:10:12,730
remote code execution gadget was

244
00:10:10,779 --> 00:10:15,220
published<font color="#E5E5E5"> no one was actually paying</font>

245
00:10:12,730 --> 00:10:18,250
attention<font color="#E5E5E5"> and actually started fixing</font>

246
00:10:15,220 --> 00:10:20,949
things<font color="#E5E5E5"> so same thing here</font><font color="#CCCCCC"> it was known</font>

247
00:10:18,250 --> 00:10:23,860
that<font color="#E5E5E5"> by 94 matter was dangerous but it</font>

248
00:10:20,949 --> 00:10:27,040
was<font color="#E5E5E5"> not until last year when a colleague</font>

249
00:10:23,860 --> 00:10:28,899
<font color="#E5E5E5">of mine</font><font color="#CCCCCC"> Alex Miller Alex Mills and James</font>

250
00:10:27,040 --> 00:10:30,399
Forester and myself<font color="#E5E5E5"> published three</font>

251
00:10:28,899 --> 00:10:33,639
different gadgets for remote execution

252
00:10:30,399 --> 00:10:37,839
<font color="#E5E5E5">when people started looking at fixing</font>

253
00:10:33,639 --> 00:10:41,259
the dead civilization so we extended the

254
00:10:37,839 --> 00:10:44,559
list by James<font color="#CCCCCC"> 4 so by looking</font><font color="#E5E5E5"> at other</font>

255
00:10:41,259 --> 00:10:46,569
<font color="#E5E5E5">side Eliezer's so James already said</font>

256
00:10:44,559 --> 00:10:48,240
that binary format<font color="#CCCCCC"> that is realized</font><font color="#E5E5E5"> is</font>

257
00:10:46,569 --> 00:10:50,889
vulnerable in<font color="#E5E5E5"> the default configuration</font>

258
00:10:48,240 --> 00:10:53,259
<font color="#E5E5E5">but binary format there is also used by</font>

259
00:10:50,889 --> 00:10:55,120
all therefore<font color="#E5E5E5"> matters right</font><font color="#CCCCCC"> so for</font>

260
00:10:53,259 --> 00:10:58,449
<font color="#CCCCCC">example the binary</font><font color="#E5E5E5"> message for matter is</font>

261
00:10:55,120 --> 00:11:00,670
used by the Microsoft message queue<font color="#E5E5E5"> the</font>

262
00:10:58,449 --> 00:11:02,949
equivalent to<font color="#CCCCCC"> activemq for example in</font>

263
00:11:00,670 --> 00:11:05,290
<font color="#CCCCCC">Java</font><font color="#E5E5E5"> so if you are capable of sending</font>

264
00:11:02,949 --> 00:11:07,000
arbitrary message to a message system

265
00:11:05,290 --> 00:11:09,189
and they will<font color="#E5E5E5"> be using binary message</font>

266
00:11:07,000 --> 00:11:11,949
<font color="#E5E5E5">format that is as vulnerable as the</font>

267
00:11:09,189 --> 00:11:14,050
binary formatter one also<font color="#E5E5E5"> object the</font>

268
00:11:11,949 --> 00:11:17,400
state formatter that is the one<font color="#E5E5E5"> that is</font>

269
00:11:14,050 --> 00:11:20,069
used<font color="#E5E5E5"> to sterilize the viewstate</font>

270
00:11:17,400 --> 00:11:22,410
data in the in asp.net<font color="#CCCCCC"> it's using an</font>

271
00:11:20,070 --> 00:11:24,180
object state<font color="#E5E5E5"> for matter so because of</font>

272
00:11:22,410 --> 00:11:26,160
that we will be able<font color="#E5E5E5"> to get arbitrary</font>

273
00:11:24,180 --> 00:11:29,579
code execution in<font color="#CCCCCC"> view estates</font><font color="#E5E5E5"> if we</font>

274
00:11:26,160 --> 00:11:31,319
know how<font color="#E5E5E5"> to modify the view estate</font>

275
00:11:29,580 --> 00:11:34,500
<font color="#CCCCCC">without breaking the signature</font><font color="#E5E5E5"> that we</font>

276
00:11:31,320 --> 00:11:36,300
will see<font color="#E5E5E5"> that later so James already</font>

277
00:11:34,500 --> 00:11:37,920
told<font color="#E5E5E5"> no told us about that data</font>

278
00:11:36,300 --> 00:11:40,319
contracts analyzer<font color="#CCCCCC"> but also shop for</font>

279
00:11:37,920 --> 00:11:42,180
Mattel using<font color="#E5E5E5"> web services</font><font color="#CCCCCC"> fast Jason and</font>

280
00:11:40,320 --> 00:11:43,500
sweet<font color="#E5E5E5"> Jason third-party libraries</font><font color="#CCCCCC"> they</font>

281
00:11:42,180 --> 00:11:47,339
are also vulnerable in the default

282
00:11:43,500 --> 00:11:50,610
<font color="#E5E5E5">configuration so this is what I think is</font>

283
00:11:47,339 --> 00:11:54,270
the<font color="#E5E5E5"> most popular and use vulnerable</font>

284
00:11:50,610 --> 00:11:56,760
pattern in dotnet that is basically take

285
00:11:54,270 --> 00:11:59,819
<font color="#CCCCCC">some objects</font><font color="#E5E5E5"> and then sterilize them</font>

286
00:11:56,760 --> 00:12:01,710
using<font color="#E5E5E5"> Bey binary formatter and then</font>

287
00:11:59,820 --> 00:12:04,320
<font color="#E5E5E5">basics</font><font color="#CCCCCC"> before encoding that I'm putting</font>

288
00:12:01,710 --> 00:12:06,089
<font color="#E5E5E5">that into a cookie right that means that</font>

289
00:12:04,320 --> 00:12:07,800
when the cookie get<font color="#E5E5E5"> backs to the server</font>

290
00:12:06,089 --> 00:12:09,390
<font color="#CCCCCC">the application is going to the</font>

291
00:12:07,800 --> 00:12:11,670
satellites<font color="#E5E5E5"> that data and there is no H</font>

292
00:12:09,390 --> 00:12:13,680
<font color="#E5E5E5">Mac here there is no nothing that</font>

293
00:12:11,670 --> 00:12:16,319
prevents the attacker<font color="#CCCCCC"> to from modifying</font>

294
00:12:13,680 --> 00:12:19,829
that and injecting the payload so I

295
00:12:16,320 --> 00:12:21,270
first find<font color="#E5E5E5"> this vulnerability in a site</font>

296
00:12:19,830 --> 00:12:23,040
or a company called<font color="#E5E5E5"> app</font><font color="#CCCCCC"> harbor that is</font>

297
00:12:21,270 --> 00:12:26,069
basically like<font color="#CCCCCC"> a Roku for donate</font>

298
00:12:23,040 --> 00:12:27,750
applications and if you browse<font color="#E5E5E5"> the</font>

299
00:12:26,070 --> 00:12:30,660
application you will find that at some

300
00:12:27,750 --> 00:12:33,570
<font color="#CCCCCC">point we're assigning some cookie with</font>

301
00:12:30,660 --> 00:12:36,839
<font color="#E5E5E5">some values that</font><font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> with a a a a</font>

302
00:12:33,570 --> 00:12:40,230
<font color="#E5E5E5">a D which is</font><font color="#CCCCCC"> the magic number</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> dotnet</font>

303
00:12:36,839 --> 00:12:43,320
<font color="#E5E5E5">serialization which made them basically</font>

304
00:12:40,230 --> 00:12:46,020
vulnerable<font color="#CCCCCC"> so we reported the</font><font color="#E5E5E5"> issue they</font>

305
00:12:43,320 --> 00:12:48,270
fix it and then we found that they even

306
00:12:46,020 --> 00:12:50,160
have a blog post<font color="#CCCCCC"> explaining how to do</font>

307
00:12:48,270 --> 00:12:51,720
that in your<font color="#E5E5E5"> own applications like you</font>

308
00:12:50,160 --> 00:12:53,520
can use the cookie temp data provider

309
00:12:51,720 --> 00:12:55,350
with<font color="#E5E5E5"> binary format there and then make</font>

310
00:12:53,520 --> 00:12:58,170
your application vulnerable in<font color="#CCCCCC"> that way</font>

311
00:12:55,350 --> 00:12:59,910
<font color="#CCCCCC">so</font><font color="#E5E5E5"> now this blog</font><font color="#CCCCCC"> post is deleted</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> I</font>

312
00:12:58,170 --> 00:13:02,880
found<font color="#E5E5E5"> that this same advice was</font>

313
00:12:59,910 --> 00:13:06,270
everywhere is<font color="#CCCCCC"> like really</font><font color="#E5E5E5"> and tens of</font>

314
00:13:02,880 --> 00:13:09,209
blog post is in<font color="#E5E5E5"> India</font><font color="#CCCCCC"> trapping different</font>

315
00:13:06,270 --> 00:13:12,120
lists and also it was used<font color="#E5E5E5"> by Microsoft</font>

316
00:13:09,209 --> 00:13:14,819
<font color="#E5E5E5">in an old version of the asp.net MVC</font>

317
00:13:12,120 --> 00:13:17,430
framework<font color="#E5E5E5"> so at some point in 2013</font>

318
00:13:14,820 --> 00:13:19,709
probably after the James<font color="#E5E5E5"> foresaw talk</font>

319
00:13:17,430 --> 00:13:22,589
they remove this cookie<font color="#E5E5E5"> temp data</font>

320
00:13:19,709 --> 00:13:24,810
provided from the<font color="#E5E5E5"> asp.net MVC framework</font>

321
00:13:22,589 --> 00:13:27,570
but I think that the damage<font color="#E5E5E5"> was already</font>

322
00:13:24,810 --> 00:13:29,579
done<font color="#CCCCCC"> many frameworks and many developers</font>

323
00:13:27,570 --> 00:13:31,340
were already<font color="#E5E5E5"> using this pattern</font><font color="#CCCCCC"> in their</font>

324
00:13:29,579 --> 00:13:36,630
applications as we will see

325
00:13:31,340 --> 00:13:37,890
so<font color="#CCCCCC"> simple example well this is a</font>

326
00:13:36,630 --> 00:13:42,930
vulnerability<font color="#E5E5E5"> that I found in Microsoft</font>

327
00:13:37,890 --> 00:13:45,360
<font color="#CCCCCC">Asia Network basically you can expose</font>

328
00:13:42,930 --> 00:13:47,040
your<font color="#E5E5E5"> intranet right this box here is</font>

329
00:13:45,360 --> 00:13:52,230
your<font color="#E5E5E5"> intranet and then expose your web</font>

330
00:13:47,040 --> 00:13:55,020
applications<font color="#CCCCCC"> to the remote workers right</font>

331
00:13:52,230 --> 00:13:57,480
here by using what is known as the

332
00:13:55,020 --> 00:13:58,920
application proxy service and that means

333
00:13:57,480 --> 00:14:01,590
that you will install a connector in

334
00:13:58,920 --> 00:14:05,250
<font color="#CCCCCC">your network and then your employees</font>

335
00:14:01,590 --> 00:14:07,290
will<font color="#CCCCCC"> basically access a URL that is</font>

336
00:14:05,250 --> 00:14:09,410
provided by Microsoft and then they will

337
00:14:07,290 --> 00:14:12,060
be<font color="#E5E5E5"> ready dicted to the Active Directory</font>

338
00:14:09,410 --> 00:14:13,800
<font color="#CCCCCC">login</font><font color="#E5E5E5"> that will</font><font color="#CCCCCC"> basically set your</font>

339
00:14:12,060 --> 00:14:16,140
<font color="#E5E5E5">credentials in your own Active Directory</font>

340
00:14:13,800 --> 00:14:18,839
<font color="#E5E5E5">and if everything</font><font color="#CCCCCC"> is correct</font><font color="#E5E5E5"> you will be</font>

341
00:14:16,140 --> 00:14:20,220
given a token<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you will provide to</font>

342
00:14:18,840 --> 00:14:22,170
the application proxy server and<font color="#E5E5E5"> then</font>

343
00:14:20,220 --> 00:14:25,470
<font color="#E5E5E5">you will finally authenticate to</font><font color="#CCCCCC"> the web</font>

344
00:14:22,170 --> 00:14:26,910
application<font color="#CCCCCC"> right so I'm pretty</font><font color="#E5E5E5"> sure</font>

345
00:14:25,470 --> 00:14:31,290
<font color="#CCCCCC">that you're familiar with</font><font color="#E5E5E5"> this login</font>

346
00:14:26,910 --> 00:14:37,290
page<font color="#E5E5E5"> so basically I don't know if you</font>

347
00:14:31,290 --> 00:14:41,160
can read<font color="#CCCCCC"> anything from them so I can I</font>

348
00:14:37,290 --> 00:14:43,110
can't stop it<font color="#E5E5E5"> apparently okay</font>

349
00:14:41,160 --> 00:14:44,790
well you can't read<font color="#E5E5E5"> anything but this is</font>

350
00:14:43,110 --> 00:14:47,220
the URL<font color="#E5E5E5"> provided by Microsoft you can</font>

351
00:14:44,790 --> 00:14:52,260
change it<font color="#E5E5E5"> and</font><font color="#CCCCCC"> put your any domain</font><font color="#E5E5E5"> you</font>

352
00:14:47,220 --> 00:14:54,300
<font color="#E5E5E5">want and then I do access your remote</font>

353
00:14:52,260 --> 00:14:56,670
<font color="#E5E5E5">application you are ready</font><font color="#CCCCCC"> ducted to</font>

354
00:14:54,300 --> 00:14:59,280
Microsoft<font color="#CCCCCC"> login right you</font><font color="#E5E5E5"> don't actually</font>

355
00:14:56,670 --> 00:15:00,569
<font color="#E5E5E5">have to login into Microsoft and this is</font>

356
00:14:59,280 --> 00:15:02,400
a pre authentication remote code

357
00:15:00,570 --> 00:15:04,680
execution vulnerability<font color="#E5E5E5"> what I'm doing</font>

358
00:15:02,400 --> 00:15:08,459
<font color="#E5E5E5">here is basically</font><font color="#CCCCCC"> I'm just</font><font color="#E5E5E5"> deleting the</font>

359
00:15:04,680 --> 00:15:13,699
cookies for this page<font color="#E5E5E5"> before sending the</font>

360
00:15:08,460 --> 00:15:16,760
<font color="#CCCCCC">request to burb so</font><font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to do that</font>

361
00:15:13,700 --> 00:15:16,760
right<font color="#E5E5E5"> now</font>

362
00:15:20,850 --> 00:15:29,620
and basically what I will do is send

363
00:15:23,949 --> 00:15:32,079
this<font color="#E5E5E5"> request to the repeater</font><font color="#CCCCCC"> and the</font>

364
00:15:29,620 --> 00:15:35,019
response is basically the resurrection

365
00:15:32,079 --> 00:15:37,329
to the<font color="#E5E5E5"> Microsoft login page and then a</font>

366
00:15:35,019 --> 00:15:38,980
cookie<font color="#CCCCCC"> there Adam I don't think that you</font>

367
00:15:37,329 --> 00:15:43,239
can read it<font color="#CCCCCC"> but it's basically</font><font color="#E5E5E5"> starting</font>

368
00:15:38,980 --> 00:15:46,540
with<font color="#E5E5E5"> this magic number again this aad so</font>

369
00:15:43,240 --> 00:15:48,550
I basically<font color="#CCCCCC"> just</font><font color="#E5E5E5"> well if we take this</font>

370
00:15:46,540 --> 00:15:51,009
<font color="#CCCCCC">value and we take it</font><font color="#E5E5E5"> to the decoder to</font>

371
00:15:48,550 --> 00:15:53,529
see what is<font color="#E5E5E5"> inside of this basic stiff</font>

372
00:15:51,009 --> 00:15:55,660
<font color="#E5E5E5">or blob we will see that there are some</font>

373
00:15:53,529 --> 00:15:57,639
<font color="#E5E5E5">type discriminators and type</font><font color="#CCCCCC"> names so</font>

374
00:15:55,660 --> 00:16:00,370
this is basically using<font color="#E5E5E5"> dotnet</font>

375
00:15:57,639 --> 00:16:04,930
<font color="#E5E5E5">serialization specifically it's using</font>

376
00:16:00,370 --> 00:16:07,149
binary formatter so at<font color="#E5E5E5"> that</font><font color="#CCCCCC"> time I was</font><font color="#E5E5E5"> I</font>

377
00:16:04,930 --> 00:16:10,930
haven't written the<font color="#CCCCCC"> why</font><font color="#E5E5E5"> so she got net</font>

378
00:16:07,149 --> 00:16:12,339
so I<font color="#CCCCCC"> used</font><font color="#E5E5E5"> my own</font><font color="#CCCCCC"> gut yet generator at</font>

379
00:16:10,930 --> 00:16:17,109
this point I'm basically what I'm going

380
00:16:12,339 --> 00:16:18,790
<font color="#CCCCCC">to execute</font><font color="#E5E5E5"> is the nslookup to my own DNS</font>

381
00:16:17,110 --> 00:16:20,920
server and<font color="#E5E5E5"> basically I'm going to</font>

382
00:16:18,790 --> 00:16:22,748
<font color="#CCCCCC">accelerate the name of the of the</font>

383
00:16:20,920 --> 00:16:24,849
computer name the<font color="#E5E5E5"> computer name</font><font color="#CCCCCC"> variable</font>

384
00:16:22,749 --> 00:16:27,069
to verify and to prove Microsoft<font color="#E5E5E5"> that I</font>

385
00:16:24,850 --> 00:16:30,519
was<font color="#CCCCCC"> executed in</font><font color="#E5E5E5"> that in there servers</font>

386
00:16:27,069 --> 00:16:33,759
<font color="#CCCCCC">are not in the</font><font color="#E5E5E5"> Internet servers so that</font>

387
00:16:30,519 --> 00:16:36,040
takes a<font color="#CCCCCC"> while because the VM was very</font>

388
00:16:33,759 --> 00:16:42,430
slow<font color="#CCCCCC"> that day if I try that locally</font><font color="#E5E5E5"> I</font>

389
00:16:36,040 --> 00:16:45,240
will get a<font color="#E5E5E5"> connection from from my own</font>

390
00:16:42,430 --> 00:16:47,888
servers<font color="#CCCCCC"> what you can't read anything</font><font color="#E5E5E5"> but</font>

391
00:16:45,240 --> 00:16:51,189
there is a moon<font color="#E5E5E5"> of a that is my own</font>

392
00:16:47,889 --> 00:16:53,459
computer<font color="#E5E5E5"> name and</font><font color="#CCCCCC"> now if I copy paste</font>

393
00:16:51,189 --> 00:16:56,139
the payload that<font color="#E5E5E5"> is generated and that</font>

394
00:16:53,459 --> 00:17:00,518
<font color="#CCCCCC">you can generate now with white Sociedad</font>

395
00:16:56,139 --> 00:17:02,610
net if you copied out to the request and

396
00:17:00,519 --> 00:17:04,839
send it to<font color="#CCCCCC"> the application proxy</font>

397
00:17:02,610 --> 00:17:06,909
remember we<font color="#CCCCCC"> are not even authenticating</font>

398
00:17:04,839 --> 00:17:10,299
so this is pre authentication remote

399
00:17:06,909 --> 00:17:12,780
code execution in<font color="#E5E5E5"> AC or network we just</font>

400
00:17:10,299 --> 00:17:12,780
copy<font color="#CCCCCC"> that</font>

401
00:17:14,189 --> 00:17:20,169
we change to our DNS server<font color="#E5E5E5"> and as soon</font>

402
00:17:18,130 --> 00:17:23,260
as we send a request<font color="#E5E5E5"> we will</font><font color="#CCCCCC"> see that</font>

403
00:17:20,169 --> 00:17:25,569
it's been executed<font color="#E5E5E5"> in the Microsoft</font>

404
00:17:23,260 --> 00:17:29,649
servers<font color="#E5E5E5"> so</font><font color="#CCCCCC"> we get like four different</font>

405
00:17:25,569 --> 00:17:31,389
resolutions right there<font color="#CCCCCC"> and well you</font>

406
00:17:29,649 --> 00:17:33,070
cannot read it but this is<font color="#E5E5E5"> not moon</font><font color="#CCCCCC"> Ave</font>

407
00:17:31,390 --> 00:17:34,360
that is my computer name<font color="#CCCCCC"> this is</font>

408
00:17:33,070 --> 00:17:38,260
<font color="#E5E5E5">Microsoft</font><font color="#CCCCCC"> come</font>

409
00:17:34,360 --> 00:17:40,178
<font color="#E5E5E5">and those are Microsoft APM</font><font color="#CCCCCC"> IPS so with</font>

410
00:17:38,260 --> 00:17:42,820
that I<font color="#E5E5E5"> will if you send a</font><font color="#CCCCCC"> request again</font>

411
00:17:40,179 --> 00:17:44,020
you get the connection<font color="#E5E5E5"> from different</font>

412
00:17:42,820 --> 00:17:46,120
servers which means that<font color="#E5E5E5"> these</font>

413
00:17:44,020 --> 00:17:49,960
application proxies are<font color="#E5E5E5"> working like in</font>

414
00:17:46,120 --> 00:17:51,520
a load balancer<font color="#E5E5E5"> way which means that if</font>

415
00:17:49,960 --> 00:17:53,799
you<font color="#CCCCCC"> compromise the application</font><font color="#E5E5E5"> proxies</font>

416
00:17:51,520 --> 00:17:55,600
you<font color="#E5E5E5"> can now get access to all the</font>

417
00:17:53,799 --> 00:18:01,900
<font color="#CCCCCC">Internet's</font><font color="#E5E5E5"> that are being proxied by the</font>

418
00:17:55,600 --> 00:18:04,209
server so with that those<font color="#E5E5E5"> those were the</font>

419
00:18:01,900 --> 00:18:05,830
four matters<font color="#E5E5E5"> that were vulnerable in the</font>

420
00:18:04,210 --> 00:18:07,510
default<font color="#E5E5E5"> configuration</font><font color="#CCCCCC"> right like binary</font>

421
00:18:05,830 --> 00:18:09,939
<font color="#CCCCCC">format you should never use that</font><font color="#E5E5E5"> with</font>

422
00:18:07,510 --> 00:18:12,190
untrusted data<font color="#E5E5E5"> there are</font><font color="#CCCCCC"> a different set</font>

423
00:18:09,940 --> 00:18:14,410
of<font color="#CCCCCC"> four matters that are vulnerable if</font>

424
00:18:12,190 --> 00:18:16,450
you configure them in a special<font color="#CCCCCC"> way or</font>

425
00:18:14,410 --> 00:18:19,480
if you let the users provide<font color="#E5E5E5"> not just</font>

426
00:18:16,450 --> 00:18:20,679
<font color="#E5E5E5">the data to be this realized by but</font>

427
00:18:19,480 --> 00:18:23,020
something else<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is called</font><font color="#E5E5E5"> the</font>

428
00:18:20,679 --> 00:18:25,120
<font color="#CCCCCC">specter type so for example if you use</font>

429
00:18:23,020 --> 00:18:28,690
data contract serializer<font color="#CCCCCC"> or XML</font>

430
00:18:25,120 --> 00:18:31,719
serialize<font color="#E5E5E5"> this are sterilizers that are</font>

431
00:18:28,690 --> 00:18:34,419
okay to handle<font color="#CCCCCC"> and untrusted input and</font>

432
00:18:31,720 --> 00:18:37,270
trusted<font color="#E5E5E5"> data but you should never use or</font>

433
00:18:34,419 --> 00:18:41,370
never let the users to control the

434
00:18:37,270 --> 00:18:44,650
expected<font color="#CCCCCC"> type so that's exactly</font><font color="#E5E5E5"> what</font>

435
00:18:41,370 --> 00:18:46,418
<font color="#CCCCCC">DotNetNuke</font><font color="#E5E5E5"> that is a content management</font>

436
00:18:44,650 --> 00:18:49,210
system<font color="#E5E5E5"> or actually the most popular</font>

437
00:18:46,419 --> 00:18:51,280
content<font color="#CCCCCC"> management system in</font><font color="#E5E5E5"> in.net was</font>

438
00:18:49,210 --> 00:18:52,780
actually doing<font color="#E5E5E5"> so basically again I</font>

439
00:18:51,280 --> 00:18:55,990
don't<font color="#CCCCCC"> know</font><font color="#E5E5E5"> if you can read anything but</font>

440
00:18:52,780 --> 00:18:58,540
there is a cookie<font color="#E5E5E5"> that contains</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> XML</font>

441
00:18:55,990 --> 00:19:00,580
item that comes from an unsigned<font color="#E5E5E5"> cookie</font>

442
00:18:58,540 --> 00:19:05,340
that the attacker can control and then

443
00:19:00,580 --> 00:19:08,740
<font color="#E5E5E5">this XML we get the type name extracted</font>

444
00:19:05,340 --> 00:19:11,709
from the<font color="#E5E5E5"> XML and then we initialize</font><font color="#CCCCCC"> the</font>

445
00:19:08,740 --> 00:19:13,270
<font color="#E5E5E5">XML serialization a m-- so</font><font color="#CCCCCC"> now the</font>

446
00:19:11,710 --> 00:19:15,520
attacker can control the expected type

447
00:19:13,270 --> 00:19:18,790
and by expected type<font color="#CCCCCC"> I mean that for</font>

448
00:19:15,520 --> 00:19:20,350
<font color="#E5E5E5">example they</font><font color="#CCCCCC"> are going they're only</font>

449
00:19:18,790 --> 00:19:23,139
going<font color="#E5E5E5"> to work</font><font color="#CCCCCC"> with that</font><font color="#E5E5E5"> expected type</font>

450
00:19:20,350 --> 00:19:25,299
right so for example if you are<font color="#E5E5E5"> sending</font>

451
00:19:23,140 --> 00:19:27,400
or expecting a shopping cart<font color="#CCCCCC"> you cannot</font>

452
00:19:25,299 --> 00:19:29,230
send an object data provider like the

453
00:19:27,400 --> 00:19:32,020
<font color="#E5E5E5">cat</font><font color="#CCCCCC"> yet</font><font color="#E5E5E5"> that I saw you</font><font color="#CCCCCC"> beforehand</font><font color="#E5E5E5"> you</font>

454
00:19:29,230 --> 00:19:36,309
can only send<font color="#E5E5E5"> and deserialize a shopping</font>

455
00:19:32,020 --> 00:19:37,870
cart<font color="#CCCCCC"> and then at a different point</font><font color="#E5E5E5"> they</font>

456
00:19:36,309 --> 00:19:39,820
they<font color="#CCCCCC"> sterilized the rest of the cookie</font>

457
00:19:37,870 --> 00:19:41,620
and<font color="#CCCCCC"> then this CMS was</font><font color="#E5E5E5"> been able to</font>

458
00:19:39,820 --> 00:19:43,600
remote code execution<font color="#CCCCCC"> I don't have time</font>

459
00:19:41,620 --> 00:19:45,809
<font color="#E5E5E5">to show you the video but is in the</font><font color="#CCCCCC"> DEF</font>

460
00:19:43,600 --> 00:19:48,159
CON<font color="#E5E5E5"> talk if you want to check it and</font>

461
00:19:45,809 --> 00:19:50,740
<font color="#CCCCCC">then there is a different set of</font>

462
00:19:48,160 --> 00:19:52,990
visualizers that are<font color="#E5E5E5"> vulnerable</font>

463
00:19:50,740 --> 00:19:53,440
depending on the<font color="#CCCCCC"> configuration of the VC</font>

464
00:19:52,990 --> 00:19:55,260
<font color="#E5E5E5">réaliser</font>

465
00:19:53,440 --> 00:19:58,060
<font color="#E5E5E5">so for example</font><font color="#CCCCCC"> JavaScript serialize er</font>

466
00:19:55,260 --> 00:20:00,129
<font color="#E5E5E5">that is</font><font color="#CCCCCC"> the native solution for</font><font color="#E5E5E5"> JSON</font>

467
00:19:58,060 --> 00:20:03,610
<font color="#E5E5E5">serialization in dotnet the one that is</font>

468
00:20:00,130 --> 00:20:05,680
used<font color="#E5E5E5"> for example by asp.net</font><font color="#CCCCCC"> you should</font>

469
00:20:03,610 --> 00:20:07,060
never<font color="#CCCCCC"> use that</font><font color="#E5E5E5"> with her type resolver if</font>

470
00:20:05,680 --> 00:20:08,860
you initialize<font color="#E5E5E5"> this</font><font color="#CCCCCC"> JavaScript</font>

471
00:20:07,060 --> 00:20:10,120
<font color="#CCCCCC">sterilizer with a type resolver that</font>

472
00:20:08,860 --> 00:20:11,889
basically means<font color="#CCCCCC"> that it is going to</font>

473
00:20:10,120 --> 00:20:13,870
include<font color="#E5E5E5"> the</font><font color="#CCCCCC"> type discriminators the type</font>

474
00:20:11,890 --> 00:20:15,610
<font color="#CCCCCC">information with the json data</font><font color="#E5E5E5"> and then</font>

475
00:20:13,870 --> 00:20:17,530
it's going<font color="#E5E5E5"> to process</font><font color="#CCCCCC"> that and that is</font>

476
00:20:15,610 --> 00:20:19,199
going<font color="#CCCCCC"> to allow the attackers to control</font>

477
00:20:17,530 --> 00:20:21,820
which types are going to be

478
00:20:19,200 --> 00:20:23,410
<font color="#E5E5E5">reconstructed and then that will</font><font color="#CCCCCC"> lead to</font>

479
00:20:21,820 --> 00:20:26,889
<font color="#CCCCCC">an arbitrary code execution</font>

480
00:20:23,410 --> 00:20:29,860
so that's<font color="#CCCCCC"> JavaScript steriliser</font><font color="#E5E5E5"> json</font>

481
00:20:26,890 --> 00:20:32,560
dotnet<font color="#E5E5E5"> is the most popular json library</font>

482
00:20:29,860 --> 00:20:34,449
for.net<font color="#E5E5E5"> has the same problem in the</font>

483
00:20:32,560 --> 00:20:37,270
<font color="#E5E5E5">default configuration is secure but if</font>

484
00:20:34,450 --> 00:20:40,120
the<font color="#E5E5E5"> Velo pairs enable this type name</font>

485
00:20:37,270 --> 00:20:42,220
handling setting and they put anything

486
00:20:40,120 --> 00:20:44,139
<font color="#E5E5E5">older than than the known value so for</font>

487
00:20:42,220 --> 00:20:47,530
<font color="#E5E5E5">example type name handling objects or</font>

488
00:20:44,140 --> 00:20:49,360
out or<font color="#E5E5E5"> arrays</font><font color="#CCCCCC"> that means that the type</font>

489
00:20:47,530 --> 00:20:51,460
<font color="#CCCCCC">information will be included in</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> json</font>

490
00:20:49,360 --> 00:20:53,969
data<font color="#E5E5E5"> and that will allow the attackers</font>

491
00:20:51,460 --> 00:20:58,390
<font color="#E5E5E5">to actually get arbitrary code execution</font>

492
00:20:53,970 --> 00:21:00,850
<font color="#E5E5E5">so that's actually what a framework that</font>

493
00:20:58,390 --> 00:21:02,400
<font color="#E5E5E5">is called breeze was actually doing so</font>

494
00:21:00,850 --> 00:21:05,290
breeze is a framework for entity

495
00:21:02,400 --> 00:21:06,580
<font color="#E5E5E5">management database entity management so</font>

496
00:21:05,290 --> 00:21:09,430
that<font color="#CCCCCC"> what they do is basically the</font>

497
00:21:06,580 --> 00:21:13,899
expose your database entities through a

498
00:21:09,430 --> 00:21:15,880
<font color="#E5E5E5">REST API right right so for example they</font>

499
00:21:13,900 --> 00:21:18,040
expose a rest endpoint to<font color="#E5E5E5"> add a new</font>

500
00:21:15,880 --> 00:21:19,390
record or to delete<font color="#E5E5E5"> a record to modify a</font>

501
00:21:18,040 --> 00:21:20,230
<font color="#CCCCCC">record and</font><font color="#E5E5E5"> so on and they do that</font>

502
00:21:19,390 --> 00:21:22,990
automatically

503
00:21:20,230 --> 00:21:25,860
so they have this demo application for

504
00:21:22,990 --> 00:21:28,840
developers to<font color="#CCCCCC"> learn</font><font color="#E5E5E5"> about the framework</font>

505
00:21:25,860 --> 00:21:30,699
and well this<font color="#CCCCCC"> is a very</font><font color="#E5E5E5"> simple</font>

506
00:21:28,840 --> 00:21:33,129
application<font color="#CCCCCC"> that allows you to</font><font color="#E5E5E5"> handle</font><font color="#CCCCCC"> on</font>

507
00:21:30,700 --> 00:21:35,380
manage<font color="#E5E5E5"> a different car models so for</font>

508
00:21:33,130 --> 00:21:37,390
example you can change the name<font color="#CCCCCC"> of a</font>

509
00:21:35,380 --> 00:21:40,630
model and submit it<font color="#E5E5E5"> and it will be</font>

510
00:21:37,390 --> 00:21:46,870
persisted in your database<font color="#E5E5E5"> if we send</font>

511
00:21:40,630 --> 00:21:48,250
<font color="#E5E5E5">that to a through burp we can actually</font>

512
00:21:46,870 --> 00:21:52,179
<font color="#E5E5E5">change for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> they in the name of</font>

513
00:21:48,250 --> 00:21:56,530
<font color="#CCCCCC">the car</font><font color="#E5E5E5"> model and if you can change that</font>

514
00:21:52,180 --> 00:21:58,990
<font color="#E5E5E5">and send it to repeater you will see or</font>

515
00:21:56,530 --> 00:22:01,180
I don't<font color="#E5E5E5"> know if you will</font><font color="#CCCCCC"> see but there</font>

516
00:21:58,990 --> 00:22:01,980
is an empty dictionary in here that is

517
00:22:01,180 --> 00:22:04,860
called say

518
00:22:01,980 --> 00:22:09,240
option and an empty<font color="#E5E5E5"> object or an empty</font>

519
00:22:04,860 --> 00:22:11,189
dictionary<font color="#E5E5E5"> because this is using JSON</font>

520
00:22:09,240 --> 00:22:12,690
dotnet with the type name handling what

521
00:22:11,190 --> 00:22:14,070
I'm doing<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> basically using</font><font color="#E5E5E5"> the</font>

522
00:22:12,690 --> 00:22:15,240
object that I provided gadget<font color="#CCCCCC"> that I</font>

523
00:22:14,070 --> 00:22:17,100
showed you<font color="#E5E5E5"> at the beginning of the talk</font>

524
00:22:15,240 --> 00:22:19,950
<font color="#E5E5E5">remember</font><font color="#CCCCCC"> the one</font><font color="#E5E5E5"> that was using the</font>

525
00:22:17,100 --> 00:22:22,379
three setters to call any method and I

526
00:22:19,950 --> 00:22:23,909
was basically<font color="#E5E5E5"> using that to invoke the</font>

527
00:22:22,380 --> 00:22:26,820
process<font color="#CCCCCC"> dot start and invoke the</font>

528
00:22:23,909 --> 00:22:32,940
<font color="#E5E5E5">calculator so you</font><font color="#CCCCCC"> copy/paste these</font>

529
00:22:26,820 --> 00:22:36,120
directly<font color="#E5E5E5"> into your request and now if we</font>

530
00:22:32,940 --> 00:22:38,580
<font color="#CCCCCC">go back to the server now we can check</font>

531
00:22:36,120 --> 00:22:41,158
<font color="#CCCCCC">that there is no calculator</font><font color="#E5E5E5"> running as</font>

532
00:22:38,580 --> 00:22:42,990
soon as we<font color="#E5E5E5"> send a request</font><font color="#CCCCCC"> it will be dis</font>

533
00:22:41,159 --> 00:22:44,370
a realized the object that I provided

534
00:22:42,990 --> 00:22:46,380
will be instance here that the setters

535
00:22:44,370 --> 00:22:51,330
will be invoked<font color="#E5E5E5"> and the calculator will</font>

536
00:22:46,380 --> 00:22:52,950
be executed so that was about a brief

537
00:22:51,330 --> 00:22:55,500
introduction<font color="#CCCCCC"> to some of</font><font color="#E5E5E5"> the NC realizers</font>

538
00:22:52,950 --> 00:22:59,429
<font color="#E5E5E5">now how can</font><font color="#CCCCCC"> we find them</font><font color="#E5E5E5"> right how can</font>

539
00:22:55,500 --> 00:23:02,039
we find<font color="#E5E5E5"> wearable endpoints so one simple</font>

540
00:22:59,429 --> 00:23:03,870
<font color="#CCCCCC">way</font><font color="#E5E5E5"> is by inspecting</font><font color="#CCCCCC"> the traffic as I</font>

541
00:23:02,039 --> 00:23:05,700
said this is<font color="#CCCCCC"> the magic number for binary</font>

542
00:23:03,870 --> 00:23:08,668
formatter and this is probably<font color="#E5E5E5"> the</font><font color="#CCCCCC"> most</font>

543
00:23:05,700 --> 00:23:10,950
<font color="#E5E5E5">used one if you search in Solem for it</font>

544
00:23:08,669 --> 00:23:15,659
you will find like five or<font color="#CCCCCC"> six hundred</font>

545
00:23:10,950 --> 00:23:18,389
instances<font color="#E5E5E5"> is still alive</font><font color="#CCCCCC"> then what I</font>

546
00:23:15,659 --> 00:23:20,490
wrote<font color="#E5E5E5"> a very simple plugin for purp that</font>

547
00:23:18,389 --> 00:23:22,559
<font color="#CCCCCC">I released today is very simple it</font>

548
00:23:20,490 --> 00:23:24,630
doesn't<font color="#E5E5E5"> I doesn't mean to</font><font color="#CCCCCC"> be very</font>

549
00:23:22,559 --> 00:23:26,908
<font color="#CCCCCC">accurate so it has some false positives</font>

550
00:23:24,630 --> 00:23:30,240
<font color="#CCCCCC">because this magic number can appear in</font>

551
00:23:26,909 --> 00:23:32,010
images for example<font color="#E5E5E5"> or it may report a</font>

552
00:23:30,240 --> 00:23:33,870
<font color="#E5E5E5">view state that contains</font><font color="#CCCCCC"> serialize data</font>

553
00:23:32,010 --> 00:23:35,070
but then is<font color="#CCCCCC"> assign</font><font color="#E5E5E5"> it so you cannot</font>

554
00:23:33,870 --> 00:23:38,309
change that without<font color="#CCCCCC"> a server</font>

555
00:23:35,070 --> 00:23:40,110
realizing<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it detects different by a</font>

556
00:23:38,309 --> 00:23:41,730
magic numbers not<font color="#E5E5E5"> just</font><font color="#CCCCCC"> a binary</font><font color="#E5E5E5"> for</font>

557
00:23:40,110 --> 00:23:43,949
matter<font color="#CCCCCC"> 1 and different encodings not</font>

558
00:23:41,730 --> 00:23:45,750
just<font color="#CCCCCC"> by 64</font><font color="#E5E5E5"> so it's kind of useful to</font>

559
00:23:43,950 --> 00:23:49,769
detect probabilities<font color="#CCCCCC"> like the azure one</font>

560
00:23:45,750 --> 00:23:52,080
or any<font color="#E5E5E5"> some others</font><font color="#CCCCCC"> you can also use an</font>

561
00:23:49,769 --> 00:23:54,269
active<font color="#CCCCCC"> approach like black box</font><font color="#E5E5E5"> approach</font>

562
00:23:52,080 --> 00:23:56,340
<font color="#E5E5E5">sending a payload</font><font color="#CCCCCC"> that if gets</font><font color="#E5E5E5"> the</font>

563
00:23:54,269 --> 00:23:59,279
<font color="#E5E5E5">serialize will make the server to sleep</font>

564
00:23:56,340 --> 00:24:00,990
for some seconds or to initiate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> DNS</font>

565
00:23:59,279 --> 00:24:03,929
resolution that<font color="#E5E5E5"> you can detect in your</font>

566
00:24:00,990 --> 00:24:05,639
<font color="#E5E5E5">server or you can use is like instrument</font>

567
00:24:03,929 --> 00:24:08,639
your application instrument your VM and

568
00:24:05,639 --> 00:24:12,029
see if some<font color="#E5E5E5"> untrusted data reaches some</font>

569
00:24:08,639 --> 00:24:14,129
of the this visualization<font color="#E5E5E5"> endpoints if</font>

570
00:24:12,029 --> 00:24:15,809
you have access to<font color="#E5E5E5"> the source code like</font>

571
00:24:14,129 --> 00:24:18,178
I did<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example for DNA</font>

572
00:24:15,809 --> 00:24:19,859
or for<font color="#CCCCCC"> breeze frameworks</font><font color="#E5E5E5"> you can</font>

573
00:24:18,179 --> 00:24:22,469
actually<font color="#E5E5E5"> run</font><font color="#CCCCCC"> a static analysis and</font><font color="#E5E5E5"> look</font>

574
00:24:19,859 --> 00:24:23,999
for untrusted data flowing<font color="#E5E5E5"> into one of</font>

575
00:24:22,469 --> 00:24:25,979
<font color="#E5E5E5">these things like for example single</font>

576
00:24:23,999 --> 00:24:29,219
data flows are<font color="#CCCCCC"> very simple to identify</font>

577
00:24:25,979 --> 00:24:33,570
<font color="#E5E5E5">for binary for matter or for example for</font>

578
00:24:29,219 --> 00:24:35,340
XML serialization twill required<font color="#CCCCCC"> one</font>

579
00:24:33,570 --> 00:24:37,019
flowing into the data to be<font color="#CCCCCC"> the</font>

580
00:24:35,340 --> 00:24:39,269
<font color="#CCCCCC">serialize</font><font color="#E5E5E5"> and another one flowing into</font>

581
00:24:37,019 --> 00:24:41,399
the expected type<font color="#E5E5E5"> so again it's simple</font>

582
00:24:39,269 --> 00:24:44,999
most of the static analysis tools<font color="#E5E5E5"> should</font>

583
00:24:41,399 --> 00:24:47,158
support that and now at the third<font color="#CCCCCC"> part</font>

584
00:24:44,999 --> 00:24:49,289
<font color="#CCCCCC">of the talk is</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> to fix vulnerable</font>

585
00:24:47,159 --> 00:24:51,029
endpoints<font color="#E5E5E5"> or how to verify if the</font>

586
00:24:49,289 --> 00:24:53,809
vendors<font color="#E5E5E5"> are actually applying good fixes</font>

587
00:24:51,029 --> 00:24:56,549
so the first way is<font color="#CCCCCC"> to stop using</font>

588
00:24:53,809 --> 00:25:00,178
civilization<font color="#E5E5E5"> I mean this seems like</font>

589
00:24:56,549 --> 00:25:03,119
<font color="#E5E5E5">rather stupid but</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> found many cases</font>

590
00:25:00,179 --> 00:25:04,979
some<font color="#E5E5E5"> of them I cannot disclose yet but</font>

591
00:25:03,119 --> 00:25:07,649
that they<font color="#CCCCCC"> are using</font><font color="#E5E5E5"> civilization to</font>

592
00:25:04,979 --> 00:25:08,909
cellulite strings<font color="#E5E5E5"> right</font><font color="#CCCCCC"> one case that</font><font color="#E5E5E5"> I</font>

593
00:25:07,649 --> 00:25:12,268
<font color="#CCCCCC">can talk about</font><font color="#E5E5E5"> because it's</font><font color="#CCCCCC"> already</font>

594
00:25:08,909 --> 00:25:14,309
fixed<font color="#CCCCCC"> is in the Nancy</font><font color="#E5E5E5"> framework which is</font>

595
00:25:12,269 --> 00:25:17,849
<font color="#CCCCCC">a web application framework and instead</font>

596
00:25:14,309 --> 00:25:20,940
what they have these instances are

597
00:25:17,849 --> 00:25:22,918
cookie for<font color="#CCCCCC"> CSR protection but instead of</font>

598
00:25:20,940 --> 00:25:25,049
<font color="#E5E5E5">putting the token directly into the</font>

599
00:25:22,919 --> 00:25:28,229
cookie<font color="#CCCCCC"> value they were sterilizing the</font>

600
00:25:25,049 --> 00:25:30,269
string into<font color="#E5E5E5"> an object and then basically</font>

601
00:25:28,229 --> 00:25:32,700
for encoding<font color="#CCCCCC"> that data into the cookie</font>

602
00:25:30,269 --> 00:25:34,019
which may basically make them vulnerable

603
00:25:32,700 --> 00:25:39,809
to<font color="#E5E5E5"> remote code execution</font>

604
00:25:34,019 --> 00:25:40,979
instead of<font color="#E5E5E5"> CSR so I don't know</font><font color="#CCCCCC"> also if</font>

605
00:25:39,809 --> 00:25:43,139
you don't<font color="#E5E5E5"> really need type</font>

606
00:25:40,979 --> 00:25:45,029
discriminators don't enable<font color="#E5E5E5"> them right</font>

607
00:25:43,139 --> 00:25:46,459
so that was the<font color="#CCCCCC"> case for example for</font><font color="#E5E5E5"> the</font>

608
00:25:45,029 --> 00:25:50,669
<font color="#CCCCCC">breeze framework</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> showed you</font>

609
00:25:46,460 --> 00:25:52,889
once<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> reported the issue they it</font>

610
00:25:50,669 --> 00:25:55,349
took them like<font color="#CCCCCC"> 12 hours to fix the issue</font>

611
00:25:52,889 --> 00:25:57,718
because they<font color="#CCCCCC"> realized</font><font color="#E5E5E5"> that they were not</font>

612
00:25:55,349 --> 00:25:59,849
<font color="#E5E5E5">actually using the type</font><font color="#CCCCCC"> information</font>

613
00:25:57,719 --> 00:26:01,769
<font color="#E5E5E5">right when they wrote the framework for</font>

614
00:25:59,849 --> 00:26:04,080
the first time<font color="#E5E5E5"> the clients were meant to</font>

615
00:26:01,769 --> 00:26:05,940
be done<font color="#E5E5E5"> F doesn't have clients so they</font>

616
00:26:04,080 --> 00:26:08,460
<font color="#CCCCCC">were exchanging some types and some</font>

617
00:26:05,940 --> 00:26:11,190
dotnet civilization but at some point

618
00:26:08,460 --> 00:26:13,289
they added a<font color="#E5E5E5"> JavaScript client and</font>

619
00:26:11,190 --> 00:26:15,029
because<font color="#CCCCCC"> of that they stopped using the</font>

620
00:26:13,289 --> 00:26:17,580
type information<font color="#E5E5E5"> internet because it was</font>

621
00:26:15,029 --> 00:26:19,429
useless<font color="#CCCCCC"> but</font><font color="#E5E5E5"> no one disabled that and</font>

622
00:26:17,580 --> 00:26:22,710
then they<font color="#E5E5E5"> leave</font><font color="#CCCCCC"> their different work</font>

623
00:26:19,429 --> 00:26:24,330
vulnerable so this is the way<font color="#CCCCCC"> of</font>

624
00:26:22,710 --> 00:26:26,759
protecting Jason dotnet for example like

625
00:26:24,330 --> 00:26:28,889
JSON dotnet sorry like a<font color="#CCCCCC"> bridge</font>

626
00:26:26,759 --> 00:26:29,700
framework did basically<font color="#E5E5E5"> just explicitly</font>

627
00:26:28,889 --> 00:26:31,379
<font color="#E5E5E5">called</font>

628
00:26:29,700 --> 00:26:33,270
time name<font color="#E5E5E5"> handling and them past and</font>

629
00:26:31,380 --> 00:26:35,550
<font color="#E5E5E5">non-value to make sure that the data is</font>

630
00:26:33,270 --> 00:26:39,300
not the type<font color="#CCCCCC"> information is not included</font>

631
00:26:35,550 --> 00:26:40,980
in<font color="#E5E5E5"> the data so the first approach was to</font>

632
00:26:39,300 --> 00:26:43,919
stop using it the second approach<font color="#CCCCCC"> is to</font>

633
00:26:40,980 --> 00:26:46,620
<font color="#E5E5E5">verify</font><font color="#CCCCCC"> that no</font><font color="#E5E5E5"> one is tampering with</font>

634
00:26:43,920 --> 00:26:48,900
<font color="#CCCCCC">your cookies for example so if you do</font>

635
00:26:46,620 --> 00:26:52,199
that<font color="#E5E5E5"> always you use H Mac never use</font>

636
00:26:48,900 --> 00:26:53,520
something like<font color="#E5E5E5"> md5 or sha-1 with the</font>

637
00:26:52,200 --> 00:26:56,370
secret<font color="#E5E5E5"> and the data because that's gonna</font>

638
00:26:53,520 --> 00:26:57,960
<font color="#CCCCCC">able to house extension attacks and this</font>

639
00:26:56,370 --> 00:27:00,530
is the way<font color="#E5E5E5"> that for</font><font color="#CCCCCC"> example app Harbor</font>

640
00:26:57,960 --> 00:27:04,380
or<font color="#CCCCCC"> AC or fix the issue right</font><font color="#E5E5E5"> they just</font>

641
00:27:00,530 --> 00:27:06,060
included a signature an<font color="#E5E5E5"> h-back so they</font>

642
00:27:04,380 --> 00:27:08,700
were able<font color="#CCCCCC"> to verify</font><font color="#E5E5E5"> that the client was</font>

643
00:27:06,060 --> 00:27:11,370
<font color="#CCCCCC">not</font><font color="#E5E5E5"> actually verified changing or</font>

644
00:27:08,700 --> 00:27:12,840
tampering with the data so<font color="#CCCCCC"> that should</font>

645
00:27:11,370 --> 00:27:14,520
<font color="#CCCCCC">be</font><font color="#E5E5E5"> the case like</font><font color="#CCCCCC"> for example</font><font color="#E5E5E5"> if you</font>

646
00:27:12,840 --> 00:27:16,379
cannot stop<font color="#CCCCCC"> using this allocation and</font>

647
00:27:14,520 --> 00:27:18,030
you have to put something<font color="#E5E5E5"> into the</font>

648
00:27:16,380 --> 00:27:20,340
<font color="#CCCCCC">client-side because maybe I don't know</font>

649
00:27:18,030 --> 00:27:22,170
for performance<font color="#CCCCCC"> reasons or whatever</font><font color="#E5E5E5"> you</font>

650
00:27:20,340 --> 00:27:24,929
have to<font color="#CCCCCC"> sign it and make sure that no</font>

651
00:27:22,170 --> 00:27:27,720
one<font color="#CCCCCC"> is touching</font><font color="#E5E5E5"> that as I said at the</font>

652
00:27:24,930 --> 00:27:30,450
<font color="#CCCCCC">beginning and</font><font color="#E5E5E5"> that's what Microsoft did</font>

653
00:27:27,720 --> 00:27:32,400
with the asp.net<font color="#E5E5E5"> implementation of the</font>

654
00:27:30,450 --> 00:27:33,600
cookie temp data provider<font color="#CCCCCC"> in the first</font>

655
00:27:32,400 --> 00:27:35,820
version<font color="#CCCCCC"> of the framework</font><font color="#E5E5E5"> it was</font>

656
00:27:33,600 --> 00:27:38,219
vulnerable<font color="#CCCCCC"> but then they fix it</font><font color="#E5E5E5"> using</font>

657
00:27:35,820 --> 00:27:41,280
the<font color="#E5E5E5"> data protection API and then they</font>

658
00:27:38,220 --> 00:27:43,800
<font color="#CCCCCC">also fix the asp.net view state</font><font color="#E5E5E5"> that we</font>

659
00:27:41,280 --> 00:27:46,590
will see<font color="#E5E5E5"> later so it's very simple</font><font color="#CCCCCC"> I</font>

660
00:27:43,800 --> 00:27:48,629
<font color="#E5E5E5">just use the data protector API protect</font>

661
00:27:46,590 --> 00:27:50,730
the<font color="#CCCCCC"> bytes</font><font color="#E5E5E5"> and that will basically sign</font>

662
00:27:48,630 --> 00:27:53,810
and encrypt the data using<font color="#E5E5E5"> the</font>

663
00:27:50,730 --> 00:27:57,240
<font color="#E5E5E5">web.config encryption on validation keys</font>

664
00:27:53,810 --> 00:27:59,399
<font color="#E5E5E5">so view state is an interesting case at</font>

665
00:27:57,240 --> 00:28:01,230
the beginning<font color="#CCCCCC"> like many years ago they</font>

666
00:27:59,400 --> 00:28:02,670
were not<font color="#E5E5E5"> signing or encrypting the view</font>

667
00:28:01,230 --> 00:28:05,730
state<font color="#E5E5E5"> so the view state is basically</font><font color="#CCCCCC"> a</font>

668
00:28:02,670 --> 00:28:07,110
representation<font color="#E5E5E5"> of the state of a given</font>

669
00:28:05,730 --> 00:28:09,150
page so instead of<font color="#E5E5E5"> keeping that</font>

670
00:28:07,110 --> 00:28:12,030
server-side they send it to<font color="#E5E5E5"> you and then</font>

671
00:28:09,150 --> 00:28:14,850
when<font color="#E5E5E5"> you request or send a and their</font>

672
00:28:12,030 --> 00:28:16,649
request back to the server<font color="#E5E5E5"> they take</font>

673
00:28:14,850 --> 00:28:19,500
that<font color="#E5E5E5"> data</font><font color="#CCCCCC"> and reconstruct</font><font color="#E5E5E5"> the previous</font>

674
00:28:16,650 --> 00:28:22,110
state of<font color="#CCCCCC"> the page so as</font><font color="#E5E5E5"> I said they are</font>

675
00:28:19,500 --> 00:28:24,780
using object state for matter with which

676
00:28:22,110 --> 00:28:28,620
is<font color="#CCCCCC"> vulnerable to remote code execution</font>

677
00:28:24,780 --> 00:28:30,629
attacks so if you allow the client to

678
00:28:28,620 --> 00:28:32,939
change the view state that will lead to

679
00:28:30,630 --> 00:28:35,790
remote code execution<font color="#E5E5E5"> so at some point</font>

680
00:28:32,940 --> 00:28:38,270
they included the option to enable<font color="#E5E5E5"> an H</font>

681
00:28:35,790 --> 00:28:41,310
mark<font color="#E5E5E5"> and encryption to the view state</font>

682
00:28:38,270 --> 00:28:43,170
because well at<font color="#CCCCCC"> that point there were at</font>

683
00:28:41,310 --> 00:28:45,540
<font color="#CCCCCC">that</font><font color="#E5E5E5"> point in</font><font color="#CCCCCC"> time there were no remotes</font>

684
00:28:43,170 --> 00:28:46,980
<font color="#CCCCCC">and</font><font color="#E5E5E5"> gadgets but if you could change the</font>

685
00:28:45,540 --> 00:28:49,290
<font color="#CCCCCC">viewer state you could change the</font>

686
00:28:46,980 --> 00:28:49,730
application<font color="#CCCCCC"> logic and lead to different</font>

687
00:28:49,290 --> 00:28:54,840
<font color="#E5E5E5">bugs</font>

688
00:28:49,730 --> 00:28:56,700
so in 4.5.2 they even ignored<font color="#E5E5E5"> the</font><font color="#CCCCCC"> enable</font>

689
00:28:54,840 --> 00:28:59,639
<font color="#E5E5E5">view estate</font><font color="#CCCCCC"> max so even if you</font><font color="#E5E5E5"> put that</font>

690
00:28:56,700 --> 00:29:01,080
<font color="#CCCCCC">into false the asp.net</font><font color="#E5E5E5"> is going to</font>

691
00:28:59,640 --> 00:29:03,810
ignore<font color="#CCCCCC"> that and it's always</font><font color="#E5E5E5"> going to</font>

692
00:29:01,080 --> 00:29:06,899
encrypt<font color="#E5E5E5"> and validate and include the H</font>

693
00:29:03,810 --> 00:29:09,629
<font color="#E5E5E5">Mac for the</font><font color="#CCCCCC"> view</font><font color="#E5E5E5"> state they even back</font>

694
00:29:06,900 --> 00:29:11,370
<font color="#E5E5E5">ported that to 1.1 so if you are not</font>

695
00:29:09,630 --> 00:29:13,020
ignoring<font color="#E5E5E5"> the patches you should be</font>

696
00:29:11,370 --> 00:29:16,919
protected<font color="#CCCCCC"> so when I was</font><font color="#E5E5E5"> writing this</font>

697
00:29:13,020 --> 00:29:19,290
slide<font color="#CCCCCC"> I was curious about</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> many pad</font>

698
00:29:16,920 --> 00:29:21,360
<font color="#CCCCCC">set servers were in the net in</font><font color="#E5E5E5"> the</font>

699
00:29:19,290 --> 00:29:23,280
network and<font color="#E5E5E5"> basically I checked with</font>

700
00:29:21,360 --> 00:29:26,340
southern and out of the<font color="#CCCCCC"> 10,000</font><font color="#E5E5E5"> results</font>

701
00:29:23,280 --> 00:29:30,200
<font color="#E5E5E5">that they gave me 200 were born</font><font color="#CCCCCC"> apples</font>

702
00:29:26,340 --> 00:29:32,879
so this made like a big interesting<font color="#CCCCCC"> I</font>

703
00:29:30,200 --> 00:29:37,980
don't know probably Bitcoin miners

704
00:29:32,880 --> 00:29:40,590
<font color="#CCCCCC">botnet anyway so at some point</font><font color="#E5E5E5"> they</font>

705
00:29:37,980 --> 00:29:42,450
improve the cryptographic posture of the

706
00:29:40,590 --> 00:29:44,970
viewstate<font color="#CCCCCC"> right because if you are able</font>

707
00:29:42,450 --> 00:29:46,860
<font color="#CCCCCC">to</font><font color="#E5E5E5"> leak the crypto at the encryption and</font>

708
00:29:44,970 --> 00:29:48,570
validation<font color="#CCCCCC"> keys</font><font color="#E5E5E5"> you can</font><font color="#CCCCCC"> actually use</font>

709
00:29:46,860 --> 00:29:50,669
that<font color="#E5E5E5"> to change the view state and then</font>

710
00:29:48,570 --> 00:29:52,800
it will lead<font color="#E5E5E5"> to remote code execution so</font>

711
00:29:50,670 --> 00:29:54,600
Microsoft<font color="#CCCCCC"> decided to add some additional</font>

712
00:29:52,800 --> 00:29:56,879
protection<font color="#CCCCCC"> by using a key derivation</font>

713
00:29:54,600 --> 00:30:00,480
function<font color="#E5E5E5"> and something that they call</font>

714
00:29:56,880 --> 00:30:03,270
the<font color="#E5E5E5"> purpose and the purpose is nothing</font>

715
00:30:00,480 --> 00:30:04,410
<font color="#E5E5E5">else that some strings right so I don't</font>

716
00:30:03,270 --> 00:30:06,180
know if you can read<font color="#CCCCCC"> it but there is a</font>

717
00:30:04,410 --> 00:30:09,810
<font color="#E5E5E5">primary</font><font color="#CCCCCC"> purpose and some</font><font color="#E5E5E5"> specific</font>

718
00:30:06,180 --> 00:30:12,030
purposes<font color="#E5E5E5"> so when you</font><font color="#CCCCCC"> visit a URL</font><font color="#E5E5E5"> and</font>

719
00:30:09,810 --> 00:30:13,980
they generate<font color="#E5E5E5"> four different strings and</font>

720
00:30:12,030 --> 00:30:16,830
these four<font color="#E5E5E5"> strings will be used to</font>

721
00:30:13,980 --> 00:30:18,360
actually<font color="#CCCCCC"> derive a new set of keys so</font>

722
00:30:16,830 --> 00:30:19,770
instead of using the<font color="#CCCCCC"> encryption and</font>

723
00:30:18,360 --> 00:30:22,229
validation keys that<font color="#CCCCCC"> you have in your</font>

724
00:30:19,770 --> 00:30:25,170
web config file<font color="#E5E5E5"> they</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> derive some</font>

725
00:30:22,230 --> 00:30:27,240
keys<font color="#CCCCCC"> that are unique</font><font color="#E5E5E5"> for the specific</font>

726
00:30:25,170 --> 00:30:30,870
URL<font color="#E5E5E5"> that you are visiting</font><font color="#CCCCCC"> so for example</font>

727
00:30:27,240 --> 00:30:34,080
if you visit the account register<font color="#CCCCCC"> URL</font>

728
00:30:30,870 --> 00:30:35,820
<font color="#E5E5E5">the first purpose is always going to be</font>

729
00:30:34,080 --> 00:30:37,439
<font color="#E5E5E5">the same is</font><font color="#CCCCCC"> just describing the purpose</font>

730
00:30:35,820 --> 00:30:39,000
of the<font color="#E5E5E5"> encryption that is going to be</font>

731
00:30:37,440 --> 00:30:40,920
client state meaning<font color="#E5E5E5"> that is going to be</font>

732
00:30:39,000 --> 00:30:43,200
used for<font color="#E5E5E5"> the view state and that's not</font>

733
00:30:40,920 --> 00:30:45,630
going<font color="#E5E5E5"> to change but now the second</font>

734
00:30:43,200 --> 00:30:48,360
string is something that is called a

735
00:30:45,630 --> 00:30:50,880
slash account right this seems<font color="#E5E5E5"> like</font>

736
00:30:48,360 --> 00:30:51,840
<font color="#E5E5E5">rather predictable given the URL that</font>

737
00:30:50,880 --> 00:30:54,120
<font color="#CCCCCC">you are visiting</font>

738
00:30:51,840 --> 00:30:56,610
the third one is<font color="#CCCCCC"> account underscore</font>

739
00:30:54,120 --> 00:30:57,139
register underscore aspx<font color="#CCCCCC"> which</font><font color="#E5E5E5"> again is</font>

740
00:30:56,610 --> 00:30:59,719
rather

741
00:30:57,140 --> 00:31:02,840
predictable<font color="#E5E5E5"> and also easy to guess and</font>

742
00:30:59,720 --> 00:31:04,820
the fourth one is this abuse<font color="#E5E5E5"> state user</font>

743
00:31:02,840 --> 00:31:07,129
key which contains something<font color="#CCCCCC"> that looks</font>

744
00:31:04,820 --> 00:31:10,250
<font color="#E5E5E5">like an</font><font color="#CCCCCC"> arbitrary unique token like</font>

745
00:31:07,130 --> 00:31:12,980
<font color="#E5E5E5">seven</font><font color="#CCCCCC"> seven something</font><font color="#E5E5E5"> but now if you</font><font color="#CCCCCC"> go</font>

746
00:31:10,250 --> 00:31:15,290
<font color="#CCCCCC">and check the cookies for this page that</font>

747
00:31:12,980 --> 00:31:17,150
you<font color="#CCCCCC"> are visiting</font><font color="#E5E5E5"> you will see the anti</font>

748
00:31:15,290 --> 00:31:18,970
cross-site request forgery token it's

749
00:31:17,150 --> 00:31:21,320
actually using the same<font color="#E5E5E5"> value as</font><font color="#CCCCCC"> the</font>

750
00:31:18,970 --> 00:31:23,120
<font color="#E5E5E5">viewstate so now you have all the</font>

751
00:31:21,320 --> 00:31:25,909
different<font color="#E5E5E5"> pieces that you need to derive</font>

752
00:31:23,120 --> 00:31:28,159
the new keys so and get arbitrary code

753
00:31:25,910 --> 00:31:29,810
execution<font color="#E5E5E5"> still you need to be able to</font>

754
00:31:28,160 --> 00:31:32,540
<font color="#CCCCCC">leak the encryption and validation key</font>

755
00:31:29,810 --> 00:31:35,330
this<font color="#CCCCCC"> is the key point here</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the whole</font>

756
00:31:32,540 --> 00:31:36,889
idea<font color="#CCCCCC"> of these slides</font><font color="#E5E5E5"> is to remark that</font>

757
00:31:35,330 --> 00:31:38,050
<font color="#CCCCCC">you need to be very careful with not</font>

758
00:31:36,890 --> 00:31:40,490
<font color="#CCCCCC">leaking the keys</font>

759
00:31:38,050 --> 00:31:41,810
how can you lick the keys well if you

760
00:31:40,490 --> 00:31:44,420
have our<font color="#E5E5E5"> neck sexy</font><font color="#CCCCCC"> moon</font><font color="#E5E5E5"> ability for</font>

761
00:31:41,810 --> 00:31:48,530
<font color="#CCCCCC">example or</font><font color="#E5E5E5"> maybe if you haven't</font><font color="#CCCCCC"> patched</font>

762
00:31:44,420 --> 00:31:51,500
<font color="#CCCCCC">these very old CVS like 2010 2015 that</font>

763
00:31:48,530 --> 00:31:54,830
allowed users to actually<font color="#CCCCCC"> lick the</font>

764
00:31:51,500 --> 00:31:56,470
<font color="#E5E5E5">web.config file from Troy's hand I found</font>

765
00:31:54,830 --> 00:31:58,429
<font color="#E5E5E5">that apparently I haven't seen that</font>

766
00:31:56,470 --> 00:32:01,670
<font color="#E5E5E5">myself but apparently there are some</font>

767
00:31:58,430 --> 00:32:04,730
error pages that<font color="#E5E5E5"> can leak the encryption</font>

768
00:32:01,670 --> 00:32:06,560
and validation keys and last but not

769
00:32:04,730 --> 00:32:08,540
least in github<font color="#E5E5E5"> you will find hundreds</font>

770
00:32:06,560 --> 00:32:09,919
of<font color="#E5E5E5"> keys so if you are lucky</font><font color="#CCCCCC"> enough that</font>

771
00:32:08,540 --> 00:32:12,110
<font color="#E5E5E5">someone is</font><font color="#CCCCCC"> deploying the application</font>

772
00:32:09,920 --> 00:32:14,530
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> very same keys then you may be</font>

773
00:32:12,110 --> 00:32:18,229
lucky<font color="#E5E5E5"> and get arbitrary code execution</font>

774
00:32:14,530 --> 00:32:21,740
<font color="#E5E5E5">so the final recommendation here is to</font>

775
00:32:18,230 --> 00:32:24,950
<font color="#E5E5E5">use encryption to</font><font color="#CCCCCC"> you to get a</font><font color="#E5E5E5"> is to</font>

776
00:32:21,740 --> 00:32:26,780
encrypt<font color="#E5E5E5"> your web config file at least</font>

777
00:32:24,950 --> 00:32:29,420
some sections of the<font color="#E5E5E5"> web config file so</font>

778
00:32:26,780 --> 00:32:31,610
<font color="#E5E5E5">even if you get like an</font><font color="#CCCCCC"> X X availability</font>

779
00:32:29,420 --> 00:32:34,190
in<font color="#E5E5E5"> your application the attackers won't</font>

780
00:32:31,610 --> 00:32:36,169
be able<font color="#CCCCCC"> to get the encryption</font>

781
00:32:34,190 --> 00:32:39,080
invalidation key and be able<font color="#CCCCCC"> to actually</font>

782
00:32:36,170 --> 00:32:42,230
<font color="#E5E5E5">escalate from</font><font color="#CCCCCC"> xxe to remote code</font>

783
00:32:39,080 --> 00:32:45,110
execution<font color="#E5E5E5"> so we talked about the stop</font>

784
00:32:42,230 --> 00:32:47,720
using it<font color="#E5E5E5"> signing</font><font color="#CCCCCC"> it and then binding it</font>

785
00:32:45,110 --> 00:32:49,909
<font color="#CCCCCC">is the third</font><font color="#E5E5E5"> approach so this is a very</font>

786
00:32:47,720 --> 00:32:52,130
dangerous<font color="#E5E5E5"> approach but is well it should</font>

787
00:32:49,910 --> 00:32:54,830
<font color="#E5E5E5">work but you have to be very careful at</font>

788
00:32:52,130 --> 00:32:57,350
implementing<font color="#E5E5E5"> it basically the idea is to</font>

789
00:32:54,830 --> 00:32:59,330
constrain which types are going to be

790
00:32:57,350 --> 00:33:02,320
allowed<font color="#CCCCCC"> you did indeed</font><font color="#E5E5E5"> during the</font>

791
00:32:59,330 --> 00:33:05,689
<font color="#E5E5E5">serialization</font><font color="#CCCCCC"> right so you can</font><font color="#E5E5E5"> basically</font>

792
00:33:02,320 --> 00:33:07,580
implement a<font color="#CCCCCC"> Silurian binder</font><font color="#E5E5E5"> implement</font>

793
00:33:05,690 --> 00:33:09,950
the bind to type<font color="#CCCCCC"> method and then you are</font>

794
00:33:07,580 --> 00:33:10,639
provided the assembly type<font color="#E5E5E5"> the assembly</font>

795
00:33:09,950 --> 00:33:13,280
name and the

796
00:33:10,640 --> 00:33:15,799
<font color="#CCCCCC">typename so you</font><font color="#E5E5E5"> can check them right</font>

797
00:33:13,280 --> 00:33:17,840
<font color="#CCCCCC">before this type get instantiated</font><font color="#E5E5E5"> and</font>

798
00:33:15,799 --> 00:33:20,990
<font color="#E5E5E5">then decide if you want to continue with</font>

799
00:33:17,840 --> 00:33:23,540
the visualization or just<font color="#E5E5E5"> discard it</font>

800
00:33:20,990 --> 00:33:25,220
so if you go and use this way I don't

801
00:33:23,540 --> 00:33:27,980
<font color="#E5E5E5">know</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> can read that in red but</font>

802
00:33:25,220 --> 00:33:30,980
never use<font color="#CCCCCC"> black lists they are very easy</font>

803
00:33:27,980 --> 00:33:34,130
to<font color="#CCCCCC"> bypass I will show you now the bypass</font>

804
00:33:30,980 --> 00:33:35,990
<font color="#CCCCCC">code yet and never use a very broad</font>

805
00:33:34,130 --> 00:33:39,559
white list approach<font color="#CCCCCC"> I will show you an</font>

806
00:33:35,990 --> 00:33:43,190
<font color="#E5E5E5">example now so this</font><font color="#CCCCCC"> is an example</font><font color="#E5E5E5"> of a</font>

807
00:33:39,559 --> 00:33:45,620
<font color="#E5E5E5">good security allowed list serialization</font>

808
00:33:43,190 --> 00:33:48,410
binder which basically is implementing

809
00:33:45,620 --> 00:33:51,709
the<font color="#CCCCCC"> serialization binder interface and</font>

810
00:33:48,410 --> 00:33:55,490
<font color="#E5E5E5">basically is checking</font><font color="#CCCCCC"> for a specific</font>

811
00:33:51,710 --> 00:33:57,290
<font color="#CCCCCC">strict list of allowed classes and if</font>

812
00:33:55,490 --> 00:33:59,809
you have the classes that<font color="#E5E5E5"> are allowed</font>

813
00:33:57,290 --> 00:34:03,110
are not found<font color="#E5E5E5"> it's throwing an exception</font>

814
00:33:59,809 --> 00:34:05,059
<font color="#CCCCCC">right you should never</font><font color="#E5E5E5"> return null</font>

815
00:34:03,110 --> 00:34:06,889
<font color="#E5E5E5">because if</font><font color="#CCCCCC"> you're returning null then it</font>

816
00:34:05,059 --> 00:34:11,800
will default to<font color="#E5E5E5"> the default binder and</font>

817
00:34:06,890 --> 00:34:14,690
then it will<font color="#E5E5E5"> allow the</font><font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> to go on</font>

818
00:34:11,800 --> 00:34:16,970
so once you have<font color="#E5E5E5"> your civilization</font>

819
00:34:14,690 --> 00:34:19,159
binder you have to assign it<font color="#CCCCCC"> to the</font>

820
00:34:16,969 --> 00:34:20,959
binder property and then DC<font color="#E5E5E5"> allies and</font>

821
00:34:19,159 --> 00:34:23,720
trusted data<font color="#E5E5E5"> that's the other way of</font>

822
00:34:20,960 --> 00:34:25,909
using a<font color="#E5E5E5"> serialization binder so as I</font>

823
00:34:23,719 --> 00:34:28,250
said<font color="#E5E5E5"> never use a broad whitelist</font>

824
00:34:25,909 --> 00:34:30,740
approach<font color="#E5E5E5"> this is actually save the code</font>

825
00:34:28,250 --> 00:34:32,090
<font color="#E5E5E5">from a Microsoft</font><font color="#CCCCCC"> very popular Microsoft</font>

826
00:34:30,739 --> 00:34:34,100
product<font color="#E5E5E5"> I'm in the process</font><font color="#CCCCCC"> of this</font>

827
00:34:32,090 --> 00:34:36,800
<font color="#E5E5E5">closing this vulnerability so I cannot</font>

828
00:34:34,100 --> 00:34:38,210
tell the name of the product but<font color="#E5E5E5"> the</font>

829
00:34:36,800 --> 00:34:39,889
code looks very similar<font color="#E5E5E5"> to this</font><font color="#CCCCCC"> right</font>

830
00:34:38,210 --> 00:34:43,310
and at some point they are checking if

831
00:34:39,889 --> 00:34:45,230
the type starts with Microsoft dot<font color="#E5E5E5"> put</font>

832
00:34:43,310 --> 00:34:47,869
the name<font color="#E5E5E5"> of a very popular Microsoft</font>

833
00:34:45,230 --> 00:34:49,820
<font color="#CCCCCC">Word here and if that's the</font><font color="#E5E5E5"> case then</font>

834
00:34:47,869 --> 00:34:52,250
they will allow you to<font color="#E5E5E5"> continue with the</font>

835
00:34:49,820 --> 00:34:53,690
serialization<font color="#CCCCCC"> because they think or they</font>

836
00:34:52,250 --> 00:34:56,629
trust<font color="#E5E5E5"> that they don't have remote code</font>

837
00:34:53,690 --> 00:34:58,970
execution gadgets in their name in their

838
00:34:56,629 --> 00:35:00,770
<font color="#CCCCCC">namespace in in their own</font><font color="#E5E5E5"> classes and</font>

839
00:34:58,970 --> 00:35:02,600
maybe that's<font color="#E5E5E5"> true and they don't have</font>

840
00:35:00,770 --> 00:35:04,520
this client<font color="#E5E5E5"> this kind of cut yet in</font>

841
00:35:02,600 --> 00:35:07,660
<font color="#E5E5E5">their namespace but what is probably</font>

842
00:35:04,520 --> 00:35:11,210
sure is that they contain bypass<font color="#E5E5E5"> gadgets</font>

843
00:35:07,660 --> 00:35:14,960
so what is<font color="#E5E5E5"> our bypass</font><font color="#CCCCCC"> cut yet</font><font color="#E5E5E5"> basically</font>

844
00:35:11,210 --> 00:35:16,760
it's a type that initiates<font color="#E5E5E5"> and</font><font color="#CCCCCC"> nested</font>

845
00:35:14,960 --> 00:35:19,070
this realization<font color="#E5E5E5"> from additional ization</font>

846
00:35:16,760 --> 00:35:20,810
constructor right<font color="#E5E5E5"> so you are protecting</font>

847
00:35:19,070 --> 00:35:23,210
the outer visualization and maybe you

848
00:35:20,810 --> 00:35:24,140
are binding<font color="#E5E5E5"> that and checking that these</font>

849
00:35:23,210 --> 00:35:27,020
malicious claw

850
00:35:24,140 --> 00:35:29,210
are not<font color="#CCCCCC"> used are not digitalized</font><font color="#E5E5E5"> but</font>

851
00:35:27,020 --> 00:35:31,040
then you are<font color="#E5E5E5"> allowing the visualization</font>

852
00:35:29,210 --> 00:35:33,530
of this class<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's going</font><font color="#E5E5E5"> to</font>

853
00:35:31,040 --> 00:35:33,980
<font color="#CCCCCC">initiate an inner or nested isseul</font>

854
00:35:33,530 --> 00:35:37,190
ization

855
00:35:33,980 --> 00:35:38,420
which<font color="#E5E5E5"> basically won't be using any</font>

856
00:35:37,190 --> 00:35:40,310
<font color="#CCCCCC">binders so it will</font><font color="#E5E5E5"> allow the</font>

857
00:35:38,420 --> 00:35:44,750
visualization of untrusted malicious

858
00:35:40,310 --> 00:35:47,090
remote code execution gadgets so again

859
00:35:44,750 --> 00:35:48,470
in your DC allocation binders never use

860
00:35:47,090 --> 00:35:50,870
or<font color="#CCCCCC"> if you are checking for the</font>

861
00:35:48,470 --> 00:35:53,240
<font color="#CCCCCC">protections</font><font color="#E5E5E5"> maybe doing some bug hunting</font>

862
00:35:50,870 --> 00:35:55,580
<font color="#E5E5E5">if you see that they are using is a</font>

863
00:35:53,240 --> 00:35:57,529
signal<font color="#CCCCCC"> for from or if you see for</font>

864
00:35:55,580 --> 00:35:59,420
<font color="#CCCCCC">example</font><font color="#E5E5E5"> that they are returning new that</font>

865
00:35:57,530 --> 00:36:03,170
means<font color="#E5E5E5"> that this binder can be bypassed</font>

866
00:35:59,420 --> 00:36:05,300
<font color="#E5E5E5">also if</font><font color="#CCCCCC"> they are using reflection in</font>

867
00:36:03,170 --> 00:36:08,840
their binder<font color="#CCCCCC"> it's very easy</font><font color="#E5E5E5"> to get at</font>

868
00:36:05,300 --> 00:36:10,730
the<font color="#E5E5E5"> OS and</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> the application so that</font>

869
00:36:08,840 --> 00:36:12,890
<font color="#E5E5E5">was the third approach binding it the</font>

870
00:36:10,730 --> 00:36:15,560
fourth approach<font color="#CCCCCC"> is replacing it</font><font color="#E5E5E5"> right so</font>

871
00:36:12,890 --> 00:36:17,509
maybe you don't really need<font color="#CCCCCC"> to send all</font>

872
00:36:15,560 --> 00:36:20,090
these type information<font color="#E5E5E5"> along with the</font>

873
00:36:17,510 --> 00:36:21,980
data so maybe<font color="#E5E5E5"> if the client and the</font>

874
00:36:20,090 --> 00:36:23,780
server<font color="#E5E5E5"> can agree</font><font color="#CCCCCC"> that they are</font><font color="#E5E5E5"> going to</font>

875
00:36:21,980 --> 00:36:25,670
exchange<font color="#E5E5E5"> I don't know I use her instance</font>

876
00:36:23,780 --> 00:36:27,680
maybe just<font color="#CCCCCC"> send in the name the address</font>

877
00:36:25,670 --> 00:36:29,900
the last name<font color="#E5E5E5"> and so on it's enough and</font>

878
00:36:27,680 --> 00:36:33,919
<font color="#CCCCCC">you don't have to</font><font color="#E5E5E5"> send that they are</font>

879
00:36:29,900 --> 00:36:35,690
using<font color="#CCCCCC"> combed acme dot user or any</font><font color="#E5E5E5"> any</font>

880
00:36:33,920 --> 00:36:37,970
type name<font color="#E5E5E5"> so that's the approach</font><font color="#CCCCCC"> that</font>

881
00:36:35,690 --> 00:36:40,670
Google protocol buffers<font color="#E5E5E5"> use</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> a</font>

882
00:36:37,970 --> 00:36:44,180
good approach<font color="#CCCCCC"> if</font><font color="#E5E5E5"> you want to DC lies and</font>

883
00:36:40,670 --> 00:36:47,510
trusted data last but<font color="#E5E5E5"> not least JSON and</font>

884
00:36:44,180 --> 00:36:49,310
XML<font color="#CCCCCC"> are also secure but as long as you</font>

885
00:36:47,510 --> 00:36:52,010
<font color="#E5E5E5">don't include type</font><font color="#CCCCCC"> information like we</font>

886
00:36:49,310 --> 00:36:54,500
saw for example in<font color="#E5E5E5"> JSON</font><font color="#CCCCCC"> Dannette so</font>

887
00:36:52,010 --> 00:36:57,070
that's all I have<font color="#CCCCCC"> for you so if you</font><font color="#E5E5E5"> have</font>

888
00:36:54,500 --> 00:36:57,070
any questions

889
00:37:05,450 --> 00:37:09,290
<font color="#CCCCCC">any question someone</font>

890
00:37:23,180 --> 00:37:28,410
thank you for talk um I was wondering

891
00:37:26,130 --> 00:37:30,240
did you<font color="#E5E5E5"> try to report all those machine</font>

892
00:37:28,410 --> 00:37:32,759
keys<font color="#CCCCCC"> because you can do quite</font><font color="#E5E5E5"> a few</font>

893
00:37:30,240 --> 00:37:36,350
<font color="#CCCCCC">things with those machine</font><font color="#E5E5E5"> keys from</font>

894
00:37:32,760 --> 00:37:42,360
github<font color="#CCCCCC"> or did you find</font><font color="#E5E5E5"> any issues in</font>

895
00:37:36,350 --> 00:37:44,520
modern or in popular software so I

896
00:37:42,360 --> 00:37:47,730
<font color="#E5E5E5">haven't reported any of them there are</font>

897
00:37:44,520 --> 00:37:49,590
literally hundreds<font color="#E5E5E5"> of them</font><font color="#CCCCCC"> in github and</font>

898
00:37:47,730 --> 00:37:50,970
<font color="#E5E5E5">I guess that</font><font color="#CCCCCC"> for example if</font><font color="#E5E5E5"> these are</font>

899
00:37:49,590 --> 00:37:52,710
open<font color="#CCCCCC"> source projects or open source</font>

900
00:37:50,970 --> 00:37:55,049
frameworks that<font color="#CCCCCC"> the people that are</font>

901
00:37:52,710 --> 00:37:58,140
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> use those</font><font color="#CCCCCC"> frameworks</font><font color="#E5E5E5"> are going</font>

902
00:37:55,050 --> 00:37:59,730
to change<font color="#E5E5E5"> those those keys otherwise if</font>

903
00:37:58,140 --> 00:38:03,509
you know that a<font color="#E5E5E5"> specific framework is</font>

904
00:37:59,730 --> 00:38:05,310
using those keys<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can look</font><font color="#E5E5E5"> for it</font>

905
00:38:03,510 --> 00:38:07,980
websites using<font color="#E5E5E5"> those frameworks and try</font>

906
00:38:05,310 --> 00:38:10,080
to exploit that<font color="#E5E5E5"> but yeah I don't</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> we</font>

907
00:38:07,980 --> 00:38:11,730
try we<font color="#E5E5E5"> probably for the</font><font color="#CCCCCC"> most popular one</font>

908
00:38:10,080 --> 00:38:16,640
we should try<font color="#E5E5E5"> to find if they are using</font>

909
00:38:11,730 --> 00:38:16,640
those hard-coded keys and report that

910
00:38:22,010 --> 00:38:27,690
that actually<font color="#E5E5E5"> makes a very good CTF task</font>

911
00:38:25,590 --> 00:38:30,450
<font color="#E5E5E5">right so being able to lick the keys</font>

912
00:38:27,690 --> 00:38:34,100
then use the key<font color="#CCCCCC"> derivation</font><font color="#E5E5E5"> purposes and</font>

913
00:38:30,450 --> 00:38:40,109
all the stuff<font color="#E5E5E5"> so maybe for the</font><font color="#CCCCCC"> next year</font>

914
00:38:34,100 --> 00:38:42,270
<font color="#CCCCCC">okay so no more questions so</font><font color="#E5E5E5"> okay thank</font>

915
00:38:40,110 --> 00:38:44,150
you<font color="#CCCCCC"> for being there and thank you</font><font color="#E5E5E5"> for</font>

916
00:38:42,270 --> 00:38:47,650
<font color="#E5E5E5">your talk thank you</font>

917
00:38:44,150 --> 00:38:47,650
[Applause]

