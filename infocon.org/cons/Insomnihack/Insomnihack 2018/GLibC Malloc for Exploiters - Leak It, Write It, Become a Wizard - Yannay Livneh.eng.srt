1
00:00:06,810 --> 00:00:10,570
[Music]

2
00:00:12,280 --> 00:00:17,600
yeah perfect<font color="#CCCCCC"> okay so</font><font color="#E5E5E5"> hi I mean I and if</font>

3
00:00:16,369 --> 00:00:20,420
you<font color="#CCCCCC"> want to follow my slides on your</font>

4
00:00:17,600 --> 00:00:22,730
<font color="#E5E5E5">laptop you can use this link</font><font color="#CCCCCC"> I hope you</font>

5
00:00:20,420 --> 00:00:24,849
copied it or just take a<font color="#E5E5E5"> quick photo and</font>

6
00:00:22,730 --> 00:00:28,369
then<font color="#CCCCCC"> you can write it and we can start</font>

7
00:00:24,849 --> 00:00:30,080
so yeah<font color="#E5E5E5"> I used an interesting framework</font>

8
00:00:28,369 --> 00:00:31,999
called<font color="#CCCCCC"> reveal.js so</font><font color="#E5E5E5"> you can just follow</font>

9
00:00:30,080 --> 00:00:34,040
it<font color="#E5E5E5"> and it's in markdown so you can also</font>

10
00:00:31,999 --> 00:00:36,500
read<font color="#CCCCCC"> it afterwards on github</font><font color="#E5E5E5"> and do it</font>

11
00:00:34,040 --> 00:00:39,710
every one<font color="#CCCCCC"> of it and these are</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> slides</font>

12
00:00:36,500 --> 00:00:45,650
<font color="#E5E5E5">so welcome to my talk</font><font color="#CCCCCC"> as was very nicely</font>

13
00:00:39,710 --> 00:00:47,350
introduced<font color="#CCCCCC"> Who I am a me and I am a</font>

14
00:00:45,650 --> 00:00:50,780
<font color="#E5E5E5">security researcher independent security</font>

15
00:00:47,350 --> 00:00:52,700
researcher Israeli and Swiss<font color="#CCCCCC"> to some</font>

16
00:00:50,780 --> 00:00:54,620
extent and I love<font color="#CCCCCC"> climbing so if you</font>

17
00:00:52,700 --> 00:00:57,530
know a nice gym<font color="#CCCCCC"> after the talk or in the</font>

18
00:00:54,620 --> 00:00:59,690
evening<font color="#E5E5E5"> I would be happy</font><font color="#CCCCCC"> to go why we're</font>

19
00:00:57,530 --> 00:01:01,670
<font color="#E5E5E5">here and that's</font><font color="#CCCCCC"> all the</font><font color="#E5E5E5"> French I</font><font color="#CCCCCC"> know or</font>

20
00:00:59,690 --> 00:01:05,298
don't know<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna show a</font>

21
00:01:01,670 --> 00:01:08,270
comprehensive overview of<font color="#E5E5E5"> all of many</font>

22
00:01:05,299 --> 00:01:11,270
working exploits<font color="#E5E5E5"> again</font><font color="#CCCCCC"> gilepsy malik</font><font color="#E5E5E5"> as</font>

23
00:01:08,270 --> 00:01:15,440
they work today<font color="#E5E5E5"> and it's to serve as an</font>

24
00:01:11,270 --> 00:01:17,720
introduction or reference and everything

25
00:01:15,440 --> 00:01:19,700
here is going to<font color="#E5E5E5"> be it gonna see lots of</font>

26
00:01:17,720 --> 00:01:21,740
links to<font color="#CCCCCC"> other articles and</font><font color="#E5E5E5"> other papers</font>

27
00:01:19,700 --> 00:01:24,020
and<font color="#E5E5E5"> also some of</font><font color="#CCCCCC"> my work some</font><font color="#E5E5E5"> of other</font>

28
00:01:21,740 --> 00:01:25,789
people's work<font color="#E5E5E5"> and obviously I cannot go</font>

29
00:01:24,020 --> 00:01:28,908
over<font color="#CCCCCC"> all the details but I'll try</font><font color="#E5E5E5"> to</font>

30
00:01:25,790 --> 00:01:32,890
<font color="#E5E5E5">explain as much as I can so today's</font>

31
00:01:28,909 --> 00:01:35,690
<font color="#E5E5E5">agenda giving this objectives and I can</font>

32
00:01:32,890 --> 00:01:37,400
okay so we're gonna see an overview<font color="#E5E5E5"> of</font>

33
00:01:35,690 --> 00:01:39,740
the heap<font color="#CCCCCC"> implementation gonna be very</font>

34
00:01:37,400 --> 00:01:41,900
brief<font color="#E5E5E5"> overview then we'll see how we can</font>

35
00:01:39,740 --> 00:01:44,199
<font color="#CCCCCC">lick pointers to bypass a so hard</font>

36
00:01:41,900 --> 00:01:47,150
<font color="#CCCCCC">ISO are to disclose memory addresses</font>

37
00:01:44,200 --> 00:01:50,120
<font color="#E5E5E5">will then continue with having a</font>

38
00:01:47,150 --> 00:01:51,950
controlled<font color="#E5E5E5"> writes of data to memory</font>

39
00:01:50,120 --> 00:01:53,600
addresses we shouldn't have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to</font>

40
00:01:51,950 --> 00:01:56,450
but<font color="#E5E5E5"> we're exploited so we get this</font>

41
00:01:53,600 --> 00:01:59,030
<font color="#E5E5E5">access and we'll finish with code</font>

42
00:01:56,450 --> 00:02:02,659
execution how to how to hijack the flow

43
00:01:59,030 --> 00:02:06,830
and as a bonus<font color="#E5E5E5"> I will show my CTF setup</font>

44
00:02:02,659 --> 00:02:10,310
<font color="#E5E5E5">this is my hidden agenda I want to see</font>

45
00:02:06,830 --> 00:02:12,200
tomorrow's challenges in the two days in

46
00:02:10,310 --> 00:02:14,299
the city F and if there is a<font color="#E5E5E5"> heap</font>

47
00:02:12,200 --> 00:02:16,279
exploitation challenge<font color="#CCCCCC"> I would</font><font color="#E5E5E5"> be very</font>

48
00:02:14,299 --> 00:02:19,260
happy<font color="#E5E5E5"> if this presentation would serve</font>

49
00:02:16,279 --> 00:02:22,810
as a reference<font color="#E5E5E5"> to solve the challenge</font>

50
00:02:19,260 --> 00:02:24,910
so internals<font color="#E5E5E5"> this is a brief version of</font>

51
00:02:22,810 --> 00:02:27,460
gypsy<font color="#CCCCCC"> Malik internals</font><font color="#E5E5E5"> it's a very very</font>

52
00:02:24,910 --> 00:02:30,810
good<font color="#E5E5E5"> explanation of how the</font><font color="#CCCCCC"> hip works</font>

53
00:02:27,460 --> 00:02:34,390
<font color="#E5E5E5">internally and oops what do they do</font>

54
00:02:30,810 --> 00:02:37,600
<font color="#E5E5E5">okay so yeah so we have first the API</font>

55
00:02:34,390 --> 00:02:41,019
and<font color="#E5E5E5"> you know there is the</font><font color="#CCCCCC"> Malik</font><font color="#E5E5E5"> API call</font>

56
00:02:37,600 --> 00:02:43,210
a user<font color="#E5E5E5"> needs a place</font><font color="#CCCCCC"> to store some data</font>

57
00:02:41,020 --> 00:02:45,490
<font color="#CCCCCC">so they request memory from</font><font color="#E5E5E5"> the system</font>

58
00:02:43,210 --> 00:02:47,860
<font color="#E5E5E5">they're doing it with the Malik API</font>

59
00:02:45,490 --> 00:02:50,080
called<font color="#E5E5E5"> the user just says hey system</font>

60
00:02:47,860 --> 00:02:52,090
I need memory<font color="#E5E5E5"> of this size and</font><font color="#CCCCCC"> the</font>

61
00:02:50,080 --> 00:02:55,450
system<font color="#E5E5E5"> grants him a region a chunk of</font>

62
00:02:52,090 --> 00:02:57,700
memory<font color="#CCCCCC"> we've at least this size the</font>

63
00:02:55,450 --> 00:02:59,709
requested size and the user gets a

64
00:02:57,700 --> 00:03:02,019
pointer to<font color="#E5E5E5"> this memory and he can</font><font color="#CCCCCC"> write</font>

65
00:02:59,709 --> 00:03:05,110
there<font color="#E5E5E5"> and do whatever he wants with free</font>

66
00:03:02,020 --> 00:03:07,780
is the<font color="#E5E5E5"> opposite</font><font color="#CCCCCC"> it's the</font><font color="#E5E5E5"> analogous or</font>

67
00:03:05,110 --> 00:03:09,880
opposite operation the user frees the

68
00:03:07,780 --> 00:03:11,800
memory it received from<font color="#E5E5E5"> the system</font>

69
00:03:09,880 --> 00:03:13,720
before<font color="#CCCCCC"> it D allocates memory and the</font>

70
00:03:11,800 --> 00:03:15,970
system claims it back<font color="#E5E5E5"> and there is also</font>

71
00:03:13,720 --> 00:03:17,830
realloc in which the user needs a

72
00:03:15,970 --> 00:03:19,990
different<font color="#E5E5E5"> size of memory but retaining</font>

73
00:03:17,830 --> 00:03:21,520
the old data<font color="#CCCCCC"> so it requires a</font><font color="#E5E5E5"> system to</font>

74
00:03:19,990 --> 00:03:24,220
<font color="#E5E5E5">enlarge to increase or decrease the size</font>

75
00:03:21,520 --> 00:03:26,170
of<font color="#CCCCCC"> memory that was allocated</font><font color="#E5E5E5"> and the</font>

76
00:03:24,220 --> 00:03:27,640
system do it in place or maybe move<font color="#E5E5E5"> it</font>

77
00:03:26,170 --> 00:03:29,799
to another place<font color="#E5E5E5"> while retaining the</font>

78
00:03:27,640 --> 00:03:32,260
data that is already there<font color="#E5E5E5"> there are a</font>

79
00:03:29,800 --> 00:03:34,000
few other<font color="#CCCCCC"> API calls it's not a</font>

80
00:03:32,260 --> 00:03:38,530
comprehensive list you can read the fine

81
00:03:34,000 --> 00:03:40,480
<font color="#E5E5E5">manuals then to help to</font><font color="#CCCCCC"> implement all</font>

82
00:03:38,530 --> 00:03:42,670
this functionality<font color="#E5E5E5"> internally there are</font>

83
00:03:40,480 --> 00:03:44,530
some structs used<font color="#E5E5E5"> and we start with the</font>

84
00:03:42,670 --> 00:03:46,929
chunk<font color="#CCCCCC"> which is a logical structure it's</font>

85
00:03:44,530 --> 00:03:48,540
not exactly how<font color="#CCCCCC"> it is in the C code but</font>

86
00:03:46,930 --> 00:03:51,940
this<font color="#E5E5E5"> is what you would see in memory</font>

87
00:03:48,540 --> 00:03:54,280
chunk is<font color="#CCCCCC"> a basic</font><font color="#E5E5E5"> memory unit used by the</font>

88
00:03:51,940 --> 00:03:58,450
system<font color="#CCCCCC"> to allocate and deallocate memory</font>

89
00:03:54,280 --> 00:04:00,459
and chunks can be in two possible<font color="#CCCCCC"> sizes</font>

90
00:03:58,450 --> 00:04:02,950
they can be out either allocated to a

91
00:04:00,459 --> 00:04:04,959
user<font color="#CCCCCC"> or freed when they're allocated</font>

92
00:04:02,950 --> 00:04:07,089
basically a chunk looks like this<font color="#E5E5E5"> you</font>

93
00:04:04,959 --> 00:04:09,160
have besides<font color="#CCCCCC"> the</font><font color="#E5E5E5"> header and then you</font>

94
00:04:07,090 --> 00:04:10,959
have the user data<font color="#E5E5E5"> the user get receives</font>

95
00:04:09,160 --> 00:04:13,420
<font color="#E5E5E5">a pointer to the user data so the user</font>

96
00:04:10,959 --> 00:04:15,580
writes their data users write their data

97
00:04:13,420 --> 00:04:18,238
in the user data area<font color="#E5E5E5"> and right before</font>

98
00:04:15,580 --> 00:04:22,840
<font color="#E5E5E5">the pointer to the</font><font color="#CCCCCC"> user you'll see</font><font color="#E5E5E5"> sighs</font>

99
00:04:18,238 --> 00:04:24,190
when the chunk is freed what you would

100
00:04:22,840 --> 00:04:26,380
see is something like<font color="#CCCCCC"> that you have</font><font color="#E5E5E5"> the</font>

101
00:04:24,190 --> 00:04:28,810
size then<font color="#E5E5E5"> you have pointers because</font>

102
00:04:26,380 --> 00:04:30,130
chunks are in linked<font color="#E5E5E5"> lists so we have</font>

103
00:04:28,810 --> 00:04:31,450
forward and backward pointer and

104
00:04:30,130 --> 00:04:31,760
sometimes they're<font color="#E5E5E5"> in more than one list</font>

105
00:04:31,450 --> 00:04:33,860
so

106
00:04:31,760 --> 00:04:35,240
have the next size and previous<font color="#CCCCCC"> eyes and</font>

107
00:04:33,860 --> 00:04:37,250
in<font color="#E5E5E5"> the end of the chunk you have this</font>

108
00:04:35,240 --> 00:04:39,170
size<font color="#E5E5E5"> again so the size is written twice</font>

109
00:04:37,250 --> 00:04:43,360
once in the<font color="#E5E5E5"> beginning</font><font color="#CCCCCC"> of the shank and</font>

110
00:04:39,170 --> 00:04:46,910
<font color="#CCCCCC">once in</font><font color="#E5E5E5"> the end of the chunk oops</font>

111
00:04:43,360 --> 00:04:50,330
so chunks<font color="#CCCCCC"> it's in 64-bit system the</font>

112
00:04:46,910 --> 00:04:52,610
minimum size is 20 hexa bytes so it's 32

113
00:04:50,330 --> 00:04:55,099
bytes and the<font color="#CCCCCC"> granularity is 10 so</font>

114
00:04:52,610 --> 00:04:59,420
basically the free these significant

115
00:04:55,100 --> 00:05:02,000
bits are free to use as<font color="#CCCCCC"> Flags</font><font color="#E5E5E5"> and this</font>

116
00:04:59,420 --> 00:05:04,100
significant bit is used<font color="#E5E5E5"> as the previous</font>

117
00:05:02,000 --> 00:05:07,820
<font color="#CCCCCC">inews chunk which means that the chunk</font>

118
00:05:04,100 --> 00:05:10,370
adjacent<font color="#E5E5E5"> but previous</font><font color="#CCCCCC"> to this chunk is</font>

119
00:05:07,820 --> 00:05:12,230
not if<font color="#CCCCCC"> there if this bit is</font><font color="#E5E5E5"> 0 the</font>

120
00:05:10,370 --> 00:05:14,450
previous chunk is not in use<font color="#E5E5E5"> so it's</font>

121
00:05:12,230 --> 00:05:18,740
<font color="#E5E5E5">freed at and it can be used by the</font>

122
00:05:14,450 --> 00:05:21,950
<font color="#CCCCCC">system</font><font color="#E5E5E5"> for others uses and really big</font>

123
00:05:18,740 --> 00:05:23,840
chunks are mapped and it's not in the

124
00:05:21,950 --> 00:05:26,030
scope of<font color="#E5E5E5"> this presentation but there is</font>

125
00:05:23,840 --> 00:05:31,369
a bit<font color="#E5E5E5"> different mechanism to handle</font>

126
00:05:26,030 --> 00:05:34,280
really<font color="#E5E5E5"> big chunks</font><font color="#CCCCCC"> so I said</font><font color="#E5E5E5"> that the</font>

127
00:05:31,370 --> 00:05:36,740
chunk is<font color="#CCCCCC"> a logical structure and</font><font color="#E5E5E5"> it's</font>

128
00:05:34,280 --> 00:05:39,200
<font color="#E5E5E5">really in the C code you would see this</font>

129
00:05:36,740 --> 00:05:42,140
struck the<font color="#E5E5E5"> Maluku chunk construct which</font>

130
00:05:39,200 --> 00:05:44,210
is quite similar<font color="#E5E5E5"> but not exactly</font><font color="#CCCCCC"> it</font>

131
00:05:42,140 --> 00:05:46,460
starts with the previous size as the

132
00:05:44,210 --> 00:05:49,130
size of the previous chunk<font color="#E5E5E5"> and then</font>

133
00:05:46,460 --> 00:05:50,780
follows the<font color="#E5E5E5"> size of the chunk</font><font color="#CCCCCC"> the F</font><font color="#E5E5E5"> the</font>

134
00:05:49,130 --> 00:05:52,880
forward backward pointers and<font color="#E5E5E5"> so forth</font>

135
00:05:50,780 --> 00:05:55,250
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> see it's</font><font color="#E5E5E5"> not aligned with</font><font color="#CCCCCC"> the</font>

136
00:05:52,880 --> 00:05:58,460
chunk but it's<font color="#CCCCCC"> almost the same here on</font>

137
00:05:55,250 --> 00:06:00,740
<font color="#CCCCCC">top you can see</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> maloca chunk struct</font>

138
00:05:58,460 --> 00:06:02,750
<font color="#E5E5E5">which has the previous size in size and</font>

139
00:06:00,740 --> 00:06:04,940
in the<font color="#E5E5E5"> bottom</font><font color="#CCCCCC"> you can see</font><font color="#E5E5E5"> the chunk what</font>

140
00:06:02,750 --> 00:06:09,590
we logically call a chunk<font color="#E5E5E5"> and you see</font>

141
00:06:04,940 --> 00:06:12,590
that the previous size this field is

142
00:06:09,590 --> 00:06:15,500
only valid<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous in-use bit is</font>

143
00:06:12,590 --> 00:06:19,070
off so if the previous<font color="#CCCCCC"> of previous</font><font color="#E5E5E5"> in</font>

144
00:06:15,500 --> 00:06:20,690
<font color="#E5E5E5">use beat is off you can</font><font color="#CCCCCC"> read the previs</font>

145
00:06:19,070 --> 00:06:23,630
<font color="#E5E5E5">eyes field and know the size of the</font>

146
00:06:20,690 --> 00:06:25,700
previous chunk<font color="#E5E5E5"> and it means that the</font>

147
00:06:23,630 --> 00:06:27,590
size of<font color="#E5E5E5"> the previous chunk</font><font color="#CCCCCC"> point the</font>

148
00:06:25,700 --> 00:06:29,719
size in the end of the chunk coincides

149
00:06:27,590 --> 00:06:33,099
with this field of previous size so this

150
00:06:29,720 --> 00:06:36,650
<font color="#E5E5E5">is how it works when you</font><font color="#CCCCCC"> free</font><font color="#E5E5E5"> a chunk</font>

151
00:06:33,100 --> 00:06:38,060
what you see the system<font color="#CCCCCC"> rights the size</font>

152
00:06:36,650 --> 00:06:40,640
of<font color="#E5E5E5"> this chunk in the end of the chunk</font>

153
00:06:38,060 --> 00:06:42,620
which is basically<font color="#E5E5E5"> assigning the</font>

154
00:06:40,640 --> 00:06:45,260
previous size field of the next chunk

155
00:06:42,620 --> 00:06:49,040
<font color="#E5E5E5">and it turns off</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> previous in use</font>

156
00:06:45,260 --> 00:06:50,420
so this previous size field is valid and

157
00:06:49,040 --> 00:06:52,010
you can read it so if you want to<font color="#E5E5E5"> know</font>

158
00:06:50,420 --> 00:06:54,170
the size of<font color="#E5E5E5"> the previous chunk first to</font>

159
00:06:52,010 --> 00:06:56,480
check<font color="#E5E5E5"> the least significant bit in the</font>

160
00:06:54,170 --> 00:06:59,570
size field<font color="#E5E5E5"> if it's off you can read the</font>

161
00:06:56,480 --> 00:07:02,120
<font color="#CCCCCC">previous size</font><font color="#E5E5E5"> and a field and see the</font>

162
00:06:59,570 --> 00:07:06,469
previous size<font color="#E5E5E5"> the previous Fiat chunks</font>

163
00:07:02,120 --> 00:07:08,270
<font color="#E5E5E5">sighs okay that was next thing we have</font>

164
00:07:06,470 --> 00:07:11,030
bins bins are just linked lists all

165
00:07:08,270 --> 00:07:13,400
chunks when they are<font color="#CCCCCC"> freed</font><font color="#E5E5E5"> they are they</font>

166
00:07:11,030 --> 00:07:14,450
reside in some linked<font color="#E5E5E5"> list and are for</font>

167
00:07:13,400 --> 00:07:17,000
kind of linked<font color="#CCCCCC"> lists</font>

168
00:07:14,450 --> 00:07:20,570
they're called<font color="#E5E5E5"> bins first are the fast</font>

169
00:07:17,000 --> 00:07:22,100
bins which is a singly linked<font color="#E5E5E5"> list</font><font color="#CCCCCC"> it</font>

170
00:07:20,570 --> 00:07:24,080
serves as some<font color="#E5E5E5"> sort of cash there is</font>

171
00:07:22,100 --> 00:07:26,180
<font color="#E5E5E5">different lists for each size so</font><font color="#CCCCCC"> for the</font>

172
00:07:24,080 --> 00:07:29,900
size 20 you<font color="#CCCCCC"> have the</font><font color="#E5E5E5"> 20 bin then for</font>

173
00:07:26,180 --> 00:07:32,360
size 30 you<font color="#E5E5E5"> have the 30 bin so on and</font>

174
00:07:29,900 --> 00:07:34,219
these chunks are always considered in

175
00:07:32,360 --> 00:07:36,950
use so they are not<font color="#E5E5E5"> merged with other</font>

176
00:07:34,220 --> 00:07:39,170
chunks<font color="#E5E5E5"> it's a kind of heck then you have</font>

177
00:07:36,950 --> 00:07:40,909
the<font color="#E5E5E5"> unsorted bin Unser's bin contains</font>

178
00:07:39,170 --> 00:07:43,640
all the bait<font color="#CCCCCC"> all the chunks before</font>

179
00:07:40,910 --> 00:07:45,920
sorting so when freeing a<font color="#CCCCCC"> chunky toss it</font>

180
00:07:43,640 --> 00:07:47,780
into the unsorted bin and it waits<font color="#E5E5E5"> for</font>

181
00:07:45,920 --> 00:07:50,150
<font color="#E5E5E5">sorting it's doubly linked circular</font>

182
00:07:47,780 --> 00:07:53,690
<font color="#CCCCCC">lists then we have the small and large</font>

183
00:07:50,150 --> 00:07:56,750
bins<font color="#E5E5E5"> small beans are also for each size</font>

184
00:07:53,690 --> 00:07:59,120
between 20 and 400 hexa there is a

185
00:07:56,750 --> 00:08:02,990
different bin so we have a small bean of

186
00:07:59,120 --> 00:08:05,090
20<font color="#E5E5E5"> small we have 30 so on so forth</font><font color="#CCCCCC"> yes</font>

187
00:08:02,990 --> 00:08:06,860
<font color="#E5E5E5">there is some overlap some sometimes</font>

188
00:08:05,090 --> 00:08:08,659
chunks of small size would<font color="#CCCCCC"> be in the</font>

189
00:08:06,860 --> 00:08:10,580
<font color="#E5E5E5">fast bins and sometimes they</font><font color="#CCCCCC"> will be in</font>

190
00:08:08,660 --> 00:08:12,140
the small bins<font color="#E5E5E5"> it depends on the</font>

191
00:08:10,580 --> 00:08:14,090
algorithm<font color="#E5E5E5"> and</font><font color="#CCCCCC"> how</font><font color="#E5E5E5"> you move chunks around</font>

192
00:08:12,140 --> 00:08:18,110
between<font color="#CCCCCC"> beans and then you have the</font>

193
00:08:14,090 --> 00:08:19,849
large<font color="#E5E5E5"> bins which has range of sizes for</font>

194
00:08:18,110 --> 00:08:22,520
<font color="#E5E5E5">each bin so we have for example the</font>

195
00:08:19,850 --> 00:08:25,490
range of 400 to 430 that would be a bin

196
00:08:22,520 --> 00:08:28,909
on<font color="#E5E5E5"> its own and it's a sorted list so you</font>

197
00:08:25,490 --> 00:08:32,240
can iterate it and if you every chunk of

198
00:08:28,910 --> 00:08:34,300
size 400<font color="#E5E5E5"> it will be inserted into this</font>

199
00:08:32,240 --> 00:08:36,830
bin then you free another chunk of size

200
00:08:34,299 --> 00:08:41,829
420 it will be<font color="#CCCCCC"> inserted in</font><font color="#E5E5E5"> this bin</font><font color="#CCCCCC"> but</font>

201
00:08:36,830 --> 00:08:45,980
after the 400 so it's always<font color="#E5E5E5"> kept sorted</font>

202
00:08:41,830 --> 00:08:48,170
<font color="#E5E5E5">okay</font><font color="#CCCCCC"> this is a new data structure that</font>

203
00:08:45,980 --> 00:08:51,530
<font color="#E5E5E5">was interested</font><font color="#CCCCCC"> using gilepsy</font>

204
00:08:48,170 --> 00:08:54,079
<font color="#E5E5E5">226</font><font color="#CCCCCC"> I think it was released</font><font color="#E5E5E5"> last August</font>

205
00:08:51,530 --> 00:08:56,480
<font color="#E5E5E5">and it's called</font><font color="#CCCCCC"> T</font><font color="#E5E5E5"> cache it's the</font>

206
00:08:54,080 --> 00:08:58,750
thread-local storage<font color="#CCCCCC"> caching mechanism</font>

207
00:08:56,480 --> 00:09:02,770
and it's basically a

208
00:08:58,750 --> 00:09:04,090
array of<font color="#CCCCCC"> singly singly linked lists of</font>

209
00:09:02,770 --> 00:09:07,770
chunks it's very similar<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the first</font>

210
00:09:04,090 --> 00:09:10,450
<font color="#E5E5E5">bin however it can serve all sizes so</font>

211
00:09:07,770 --> 00:09:12,790
<font color="#CCCCCC">again there is</font><font color="#E5E5E5"> a list for each size but</font>

212
00:09:10,450 --> 00:09:15,370
it's not limited<font color="#CCCCCC"> by sizes it's limited</font>

213
00:09:12,790 --> 00:09:16,870
by the number<font color="#CCCCCC"> of chunks it contains so</font>

214
00:09:15,370 --> 00:09:18,820
there can be a singly linked list for

215
00:09:16,870 --> 00:09:20,980
the size 300<font color="#CCCCCC"> and then there could be</font>

216
00:09:18,820 --> 00:09:23,290
<font color="#CCCCCC">singled</font><font color="#E5E5E5"> in place for the size 40 it</font>

217
00:09:20,980 --> 00:09:26,920
depends on how<font color="#E5E5E5"> it</font><font color="#CCCCCC"> on the chunks</font><font color="#E5E5E5"> you are</font>

218
00:09:23,290 --> 00:09:29,170
freeing<font color="#CCCCCC"> it's a huge performance</font><font color="#E5E5E5"> enhancer</font>

219
00:09:26,920 --> 00:09:31,180
<font color="#E5E5E5">enhancement because you keep the memory</font>

220
00:09:29,170 --> 00:09:32,800
locality for the threads<font color="#E5E5E5"> you keep it in</font>

221
00:09:31,180 --> 00:09:36,099
<font color="#E5E5E5">the same</font><font color="#CCCCCC"> CPU in the same thread so on</font>

222
00:09:32,800 --> 00:09:38,439
but they didn't even<font color="#E5E5E5"> try be secured</font><font color="#CCCCCC"> so</font>

223
00:09:36,100 --> 00:09:40,090
if you read the implementation of<font color="#E5E5E5"> the</font>

224
00:09:38,440 --> 00:09:41,980
malloc you'll see there are<font color="#E5E5E5"> many</font>

225
00:09:40,090 --> 00:09:43,600
integrity checks or at least a few

226
00:09:41,980 --> 00:09:45,490
integrity checks about the data

227
00:09:43,600 --> 00:09:47,910
structure is being<font color="#E5E5E5"> used and when they</font>

228
00:09:45,490 --> 00:09:50,800
<font color="#E5E5E5">implemented T cache they didn't really</font>

229
00:09:47,910 --> 00:09:52,360
put any<font color="#E5E5E5"> integrity check in there so they</font>

230
00:09:50,800 --> 00:09:55,349
<font color="#E5E5E5">weren't even trying you can see it's</font>

231
00:09:52,360 --> 00:09:58,960
quite of a patch<font color="#CCCCCC"> but it's a huge</font>

232
00:09:55,350 --> 00:10:00,700
performance<font color="#E5E5E5"> enhancement the last data</font>

233
00:09:58,960 --> 00:10:02,830
structure is the arena the<font color="#CCCCCC"> arena is</font><font color="#E5E5E5"> just</font>

234
00:10:00,700 --> 00:10:06,100
the heap descriptor itself you can see

235
00:10:02,830 --> 00:10:07,900
<font color="#E5E5E5">here there is a beans and other</font><font color="#CCCCCC"> heap</font>

236
00:10:06,100 --> 00:10:09,370
info you<font color="#CCCCCC"> can see the</font><font color="#E5E5E5"> fest beans then you</font>

237
00:10:07,900 --> 00:10:12,880
can see the other beans the answer is

238
00:10:09,370 --> 00:10:14,650
<font color="#E5E5E5">one large beans and yo can see musics</font>

239
00:10:12,880 --> 00:10:17,170
<font color="#E5E5E5">for serializing</font><font color="#CCCCCC"> exercise</font><font color="#E5E5E5"> to the data</font>

240
00:10:14,650 --> 00:10:19,089
structures<font color="#E5E5E5"> and there is also the top</font>

241
00:10:17,170 --> 00:10:21,130
which is<font color="#CCCCCC"> interesting top is appointed to</font>

242
00:10:19,089 --> 00:10:24,460
the<font color="#CCCCCC"> while learner's</font><font color="#E5E5E5"> the heap starts in</font><font color="#CCCCCC"> a</font>

243
00:10:21,130 --> 00:10:26,920
and with no chunks in it the heap

244
00:10:24,460 --> 00:10:29,320
mapping itself<font color="#E5E5E5"> before</font><font color="#CCCCCC"> it's fragmented</font>

245
00:10:26,920 --> 00:10:32,740
<font color="#E5E5E5">into chunks it starts as while</font><font color="#CCCCCC"> earnest</font>

246
00:10:29,320 --> 00:10:34,900
just this whole memory of empty memory

247
00:10:32,740 --> 00:10:37,660
while earnest<font color="#E5E5E5"> waiting to be splitted</font>

248
00:10:34,900 --> 00:10:40,660
into chunks<font color="#E5E5E5"> and the top points to this</font>

249
00:10:37,660 --> 00:10:42,339
to this area<font color="#E5E5E5"> to the point</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> edit was</font>

250
00:10:40,660 --> 00:10:44,850
not splitted yet that is still<font color="#E5E5E5"> waiting</font>

251
00:10:42,339 --> 00:10:47,440
to be fragmented<font color="#E5E5E5"> into chunks</font>

252
00:10:44,850 --> 00:10:50,200
there<font color="#CCCCCC"> are also secondary</font><font color="#E5E5E5"> arenas it's a</font>

253
00:10:47,440 --> 00:10:53,410
list of arenas but it's not in my<font color="#CCCCCC"> scope</font>

254
00:10:50,200 --> 00:10:55,450
today<font color="#CCCCCC"> and that's about it so this is the</font>

255
00:10:53,410 --> 00:10:58,390
summary<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see this is from chillip</font>

256
00:10:55,450 --> 00:11:00,250
<font color="#CCCCCC">see</font><font color="#E5E5E5"> mark internals</font><font color="#CCCCCC"> you can see the arena</font>

257
00:10:58,390 --> 00:11:01,930
<font color="#CCCCCC">and you have distinctly</font><font color="#E5E5E5"> linked list of</font>

258
00:11:00,250 --> 00:11:04,000
<font color="#CCCCCC">fest bins you the doubly linked list</font>

259
00:11:01,930 --> 00:11:07,209
circular the circular doubly linked list

260
00:11:04,000 --> 00:11:09,670
of<font color="#E5E5E5"> bins and that's more or less what you</font>

261
00:11:07,209 --> 00:11:12,400
<font color="#E5E5E5">have in terms of algorithms</font><font color="#CCCCCC"> are quite</font>

262
00:11:09,670 --> 00:11:15,339
simple so the free works by

263
00:11:12,400 --> 00:11:17,920
tossing the chunk you're freeing into

264
00:11:15,340 --> 00:11:21,760
the<font color="#CCCCCC"> fest bin or into the answer</font><font color="#E5E5E5"> that win</font>

265
00:11:17,920 --> 00:11:23,380
depends on exercise and quite quick<font color="#CCCCCC"> alec</font>

266
00:11:21,760 --> 00:11:24,939
is<font color="#E5E5E5"> a bit more complicated but what</font>

267
00:11:23,380 --> 00:11:26,920
you're<font color="#E5E5E5"> doing you're looking for exact</font>

268
00:11:24,940 --> 00:11:28,840
fit bins if you don't find it you start

269
00:11:26,920 --> 00:11:31,030
to<font color="#E5E5E5"> merge it</font><font color="#CCCCCC"> colors it throw</font><font color="#E5E5E5"> it around</font>

270
00:11:28,840 --> 00:11:32,860
sort it put it in<font color="#E5E5E5"> the right bin then</font>

271
00:11:31,030 --> 00:11:34,930
you're<font color="#E5E5E5"> looking again for exact fit and</font>

272
00:11:32,860 --> 00:11:37,000
if you cannot find<font color="#CCCCCC"> exact fit you're</font>

273
00:11:34,930 --> 00:11:38,560
looking for best fit if<font color="#E5E5E5"> you don't if you</font>

274
00:11:37,000 --> 00:11:40,660
don't<font color="#E5E5E5"> find best fit something that can</font>

275
00:11:38,560 --> 00:11:42,489
serve the allocation<font color="#CCCCCC"> request you're</font>

276
00:11:40,660 --> 00:11:45,280
splitting the top you're splitting the

277
00:11:42,490 --> 00:11:47,500
while<font color="#CCCCCC"> earnest</font><font color="#E5E5E5"> okay so that was the</font>

278
00:11:45,280 --> 00:11:49,209
<font color="#E5E5E5">internals very briefly if you really</font>

279
00:11:47,500 --> 00:11:51,010
want to<font color="#E5E5E5"> know more</font><font color="#CCCCCC"> you can read the code</font>

280
00:11:49,210 --> 00:11:53,590
or gypsy<font color="#CCCCCC"> malloc internals</font><font color="#E5E5E5"> I really</font>

281
00:11:51,010 --> 00:11:56,860
<font color="#E5E5E5">recommend it</font><font color="#CCCCCC"> moving on to how to leak</font>

282
00:11:53,590 --> 00:11:57,550
information as exploiters<font color="#E5E5E5"> we want to</font>

283
00:11:56,860 --> 00:11:59,770
leak information

284
00:11:57,550 --> 00:12:00,939
<font color="#E5E5E5">why do leak pointers you want to see</font>

285
00:11:59,770 --> 00:12:03,100
memory addresses why do you want to<font color="#E5E5E5"> do</font>

286
00:12:00,940 --> 00:12:05,980
this we want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> bypass aslr right you</font>

287
00:12:03,100 --> 00:12:07,420
don't know where<font color="#E5E5E5"> memory the program is</font>

288
00:12:05,980 --> 00:12:09,700
loaded<font color="#CCCCCC"> so that's one of</font><font color="#E5E5E5"> our objectives</font>

289
00:12:07,420 --> 00:12:11,740
<font color="#E5E5E5">we want</font><font color="#CCCCCC"> to write reliable exploits</font><font color="#E5E5E5"> even</font>

290
00:12:09,700 --> 00:12:13,930
if we do know it's important<font color="#E5E5E5"> to verify</font>

291
00:12:11,740 --> 00:12:15,880
<font color="#E5E5E5">ourselves and also</font><font color="#CCCCCC"> to know which version</font>

292
00:12:13,930 --> 00:12:19,000
<font color="#CCCCCC">of leap</font><font color="#E5E5E5"> C we're exploiting sometimes you</font>

293
00:12:15,880 --> 00:12:20,350
can<font color="#CCCCCC"> just access the victim software</font><font color="#E5E5E5"> leak</font>

294
00:12:19,000 --> 00:12:24,580
some pointers and<font color="#CCCCCC"> then figure out</font><font color="#E5E5E5"> oh</font>

295
00:12:20,350 --> 00:12:27,070
it's<font color="#CCCCCC"> Lipsy version 224 great so what can</font>

296
00:12:24,580 --> 00:12:28,840
<font color="#CCCCCC">be leaked in terms of pointers well</font>

297
00:12:27,070 --> 00:12:32,110
pointers to the heap of course chunks

298
00:12:28,840 --> 00:12:34,300
are in the heap mapping<font color="#E5E5E5"> area and they</font>

299
00:12:32,110 --> 00:12:36,360
point to<font color="#E5E5E5"> each other so if you like these</font>

300
00:12:34,300 --> 00:12:38,709
<font color="#E5E5E5">pointers you know where the heap is</font>

301
00:12:36,360 --> 00:12:40,450
located<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also pointers to G of C</font>

302
00:12:38,710 --> 00:12:44,170
because<font color="#CCCCCC"> the main arena the heap</font>

303
00:12:40,450 --> 00:12:45,970
infrastructure this resides at least the

304
00:12:44,170 --> 00:12:49,079
main<font color="#E5E5E5"> arena resides in G</font><font color="#CCCCCC"> Lipsy data</font>

305
00:12:45,970 --> 00:12:52,600
section so if you<font color="#CCCCCC"> lick a pointer to</font><font color="#E5E5E5"> this</font>

306
00:12:49,080 --> 00:12:54,940
<font color="#CCCCCC">to this struct you basically know where</font>

307
00:12:52,600 --> 00:12:57,250
the<font color="#E5E5E5"> chillip</font><font color="#CCCCCC"> C location is and you can</font>

308
00:12:54,940 --> 00:13:00,250
<font color="#CCCCCC">even know which version of Lipsy you are</font>

309
00:12:57,250 --> 00:13:03,300
using<font color="#CCCCCC"> because this struct is in</font>

310
00:13:00,250 --> 00:13:06,010
<font color="#E5E5E5">different offsets in different versions</font>

311
00:13:03,300 --> 00:13:08,050
<font color="#CCCCCC">okay so how do you do it</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> first</font>

312
00:13:06,010 --> 00:13:10,000
way<font color="#CCCCCC"> is to read they use after free and</font>

313
00:13:08,050 --> 00:13:11,589
in this presentation I assume you have

314
00:13:10,000 --> 00:13:13,500
some<font color="#E5E5E5"> sort of people vulnerable in your</font>

315
00:13:11,590 --> 00:13:16,570
<font color="#CCCCCC">hand so it's</font><font color="#E5E5E5"> either use after free or</font>

316
00:13:13,500 --> 00:13:18,010
<font color="#CCCCCC">heap</font><font color="#E5E5E5"> based buffer overflow and if you</font>

317
00:13:16,570 --> 00:13:21,010
can<font color="#E5E5E5"> really use</font><font color="#CCCCCC"> a for free basically what</font>

318
00:13:18,010 --> 00:13:21,640
you do you free the idea is that free

319
00:13:21,010 --> 00:13:24,370
chunks

320
00:13:21,640 --> 00:13:25,960
contain pointers and user data coincides

321
00:13:24,370 --> 00:13:26,320
with these forward pointers so one of

322
00:13:25,960 --> 00:13:28,180
<font color="#CCCCCC">the</font>

323
00:13:26,320 --> 00:13:31,840
in the heap<font color="#E5E5E5"> actually coincides with the</font>

324
00:13:28,180 --> 00:13:33,520
data you're reading which<font color="#E5E5E5"> is nice</font><font color="#CCCCCC"> so if</font>

325
00:13:31,840 --> 00:13:35,860
you can read<font color="#E5E5E5"> free chunks are basically</font>

326
00:13:33,520 --> 00:13:37,300
<font color="#CCCCCC">licking pointers</font><font color="#E5E5E5"> if you read free chunks</font>

327
00:13:35,860 --> 00:13:38,890
that are<font color="#E5E5E5"> in the fast bin or in the</font><font color="#CCCCCC"> t</font>

328
00:13:37,300 --> 00:13:41,680
casual reading pointers to the heap<font color="#E5E5E5"> as</font>

329
00:13:38,890 --> 00:13:43,569
we said and if you're reading chunks

330
00:13:41,680 --> 00:13:45,910
that<font color="#CCCCCC"> are in the unsorted or in the</font>

331
00:13:43,570 --> 00:13:48,070
normal<font color="#CCCCCC"> beans you</font><font color="#E5E5E5"> either read pointers to</font>

332
00:13:45,910 --> 00:13:50,020
the main arena<font color="#E5E5E5"> to the</font><font color="#CCCCCC"> GI PC data section</font>

333
00:13:48,070 --> 00:13:52,030
<font color="#E5E5E5">or you're reading to the next chunk in</font>

334
00:13:50,020 --> 00:13:54,069
the heap<font color="#CCCCCC"> Sirk</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> leak in the hip in</font>

335
00:13:52,030 --> 00:13:57,610
this way<font color="#E5E5E5"> and let's see an example so</font>

336
00:13:54,070 --> 00:14:00,100
this is my<font color="#CCCCCC"> amazing animation and so we</font>

337
00:13:57,610 --> 00:14:01,840
start<font color="#E5E5E5"> with an empty heap everything is</font>

338
00:14:00,100 --> 00:14:04,060
vile earnest and the top points there

339
00:14:01,840 --> 00:14:06,220
and<font color="#E5E5E5"> you can see the answer that beam is</font>

340
00:14:04,060 --> 00:14:09,699
<font color="#CCCCCC">a circle or list it's actually double</font>

341
00:14:06,220 --> 00:14:11,590
linked<font color="#E5E5E5"> but I only wrote just one side of</font>

342
00:14:09,700 --> 00:14:14,230
it and you see it's empty<font color="#CCCCCC"> and now we</font>

343
00:14:11,590 --> 00:14:17,230
<font color="#E5E5E5">start</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> allocations so allocation</font><font color="#CCCCCC"> p 0</font>

344
00:14:14,230 --> 00:14:19,660
which is of size 100<font color="#CCCCCC"> and you can see the</font>

345
00:14:17,230 --> 00:14:21,220
least significant bit is on<font color="#CCCCCC"> signifying</font>

346
00:14:19,660 --> 00:14:24,010
that<font color="#E5E5E5"> the previous chunk is news because</font>

347
00:14:21,220 --> 00:14:26,050
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> of the heap</font><font color="#E5E5E5"> actually there is</font>

348
00:14:24,010 --> 00:14:30,250
nothing before that<font color="#E5E5E5"> so it's technically</font>

349
00:14:26,050 --> 00:14:32,560
<font color="#E5E5E5">in use and then you</font><font color="#CCCCCC"> reallocate</font><font color="#E5E5E5"> another</font>

350
00:14:30,250 --> 00:14:34,480
chunk<font color="#CCCCCC"> we don't assign it to any variable</font>

351
00:14:32,560 --> 00:14:36,849
but it<font color="#E5E5E5"> serves as a separator so when we</font>

352
00:14:34,480 --> 00:14:37,750
free p 0 it will not merge with what's

353
00:14:36,850 --> 00:14:40,240
<font color="#E5E5E5">coming next</font>

354
00:14:37,750 --> 00:14:42,970
<font color="#E5E5E5">we're making another allocation let's</font>

355
00:14:40,240 --> 00:14:44,440
call it<font color="#E5E5E5"> P</font><font color="#CCCCCC"> 1 of size 120 right after that</font>

356
00:14:42,970 --> 00:14:46,300
<font color="#E5E5E5">you can see the</font><font color="#CCCCCC"> while lunacies moving</font>

357
00:14:44,440 --> 00:14:48,520
again there is significant bit is on and

358
00:14:46,300 --> 00:14:50,380
then<font color="#E5E5E5"> we make an allocation of a</font>

359
00:14:48,520 --> 00:14:52,150
separator so when we free<font color="#E5E5E5"> P 1 it will</font>

360
00:14:50,380 --> 00:14:54,340
not merge with the violinist<font color="#CCCCCC"> it will not</font>

361
00:14:52,150 --> 00:14:56,050
not merge with the chunk before it

362
00:14:54,340 --> 00:14:58,570
because they're both<font color="#E5E5E5"> in use and then</font>

363
00:14:56,050 --> 00:15:00,430
we're freeing<font color="#CCCCCC"> p 0 so when</font><font color="#E5E5E5"> frank p 0</font>

364
00:14:58,570 --> 00:15:03,100
basically<font color="#CCCCCC"> we put</font><font color="#E5E5E5"> it in the unsorted</font><font color="#CCCCCC"> win</font>

365
00:15:00,430 --> 00:15:06,339
this is in<font color="#E5E5E5"> gypsy</font><font color="#CCCCCC"> 224 most examples would</font>

366
00:15:03,100 --> 00:15:09,190
<font color="#E5E5E5">be on</font><font color="#CCCCCC"> GOC</font><font color="#E5E5E5"> 224 unless I say otherwise</font><font color="#CCCCCC"> so</font>

367
00:15:06,340 --> 00:15:10,840
in this case you free p 0 and it goes

368
00:15:09,190 --> 00:15:13,510
<font color="#CCCCCC">into the</font><font color="#E5E5E5"> answer</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> min you can see a</font>

369
00:15:10,840 --> 00:15:16,060
<font color="#E5E5E5">circular link list where</font><font color="#CCCCCC"> the FD points</font>

370
00:15:13,510 --> 00:15:18,700
to p 0<font color="#CCCCCC"> and p 0 points back to the</font>

371
00:15:16,060 --> 00:15:21,310
<font color="#E5E5E5">unsorted bin</font><font color="#CCCCCC"> then we free</font><font color="#E5E5E5"> p 1 and we</font>

372
00:15:18,700 --> 00:15:23,230
also insert this<font color="#E5E5E5"> one today</font><font color="#CCCCCC"> to the answer</font>

373
00:15:21,310 --> 00:15:25,839
it means so<font color="#E5E5E5"> we have our list just screw</font>

374
00:15:23,230 --> 00:15:27,970
we have the answer<font color="#CCCCCC"> that been pointing to</font>

375
00:15:25,840 --> 00:15:30,910
<font color="#E5E5E5">P 1 because it points backward points</font>

376
00:15:27,970 --> 00:15:33,460
it's a FIFO so<font color="#CCCCCC"> it's first-in first-out</font>

377
00:15:30,910 --> 00:15:35,500
<font color="#E5E5E5">then it points back to p</font><font color="#CCCCCC"> 0 which points</font>

378
00:15:33,460 --> 00:15:37,720
to<font color="#CCCCCC"> the head of the list which is the</font>

379
00:15:35,500 --> 00:15:40,070
<font color="#E5E5E5">answer</font><font color="#CCCCCC"> it's been in the main</font><font color="#E5E5E5"> arena</font><font color="#CCCCCC"> and</font>

380
00:15:37,720 --> 00:15:42,170
now we are<font color="#E5E5E5"> reading it as the</font>

381
00:15:40,070 --> 00:15:45,140
so we can actually<font color="#E5E5E5"> read what p0 is</font>

382
00:15:42,170 --> 00:15:47,209
pointing to and p0<font color="#CCCCCC"> what's written in p0</font>

383
00:15:45,140 --> 00:15:50,240
it points to the<font color="#E5E5E5"> answer it means so it's</font>

384
00:15:47,210 --> 00:15:53,810
a gypsy pointer and the<font color="#E5E5E5"> leap</font><font color="#CCCCCC"> C pointer</font>

385
00:15:50,240 --> 00:15:55,250
and then<font color="#E5E5E5"> p1 points back to</font><font color="#CCCCCC"> the hip so</font>

386
00:15:53,810 --> 00:15:59,150
we're reading a pointer to the<font color="#E5E5E5"> hip and</font>

387
00:15:55,250 --> 00:16:01,130
<font color="#E5E5E5">this is how you leak pointers another</font>

388
00:15:59,150 --> 00:16:04,550
way is to use overlapping chunk<font color="#E5E5E5"> this is</font>

389
00:16:01,130 --> 00:16:06,410
a different method<font color="#CCCCCC"> the basics is that</font>

390
00:16:04,550 --> 00:16:09,020
you can<font color="#E5E5E5"> allocate some readable data and</font>

391
00:16:06,410 --> 00:16:11,000
you<font color="#E5E5E5"> have a chunk right before that data</font>

392
00:16:09,020 --> 00:16:13,189
that<font color="#E5E5E5"> you can overflow into so you</font>

393
00:16:11,000 --> 00:16:15,020
overload overflow into<font color="#E5E5E5"> this chunk and</font>

394
00:16:13,190 --> 00:16:16,430
change its size<font color="#E5E5E5"> enlarge its size</font>

395
00:16:15,020 --> 00:16:18,140
synthetically and then you make an

396
00:16:16,430 --> 00:16:20,630
allocation which split the chunk you

397
00:16:18,140 --> 00:16:25,160
just overflowed<font color="#E5E5E5"> so when you're splitting</font>

398
00:16:20,630 --> 00:16:26,800
this chunk you<font color="#E5E5E5"> take this chunk back and</font>

399
00:16:25,160 --> 00:16:29,180
the system splits the chunks so

400
00:16:26,800 --> 00:16:31,640
splitting the chunk it overrides<font color="#E5E5E5"> the</font>

401
00:16:29,180 --> 00:16:34,550
pointers<font color="#E5E5E5"> right after the split which</font>

402
00:16:31,640 --> 00:16:36,410
coincides with the data<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can read and</font>

403
00:16:34,550 --> 00:16:39,199
then you<font color="#CCCCCC"> read these pointers and</font><font color="#E5E5E5"> you get</font>

404
00:16:36,410 --> 00:16:41,000
the leak<font color="#CCCCCC"> that you're looking for there</font>

405
00:16:39,200 --> 00:16:43,220
are<font color="#E5E5E5"> two examples here if you want to see</font>

406
00:16:41,000 --> 00:16:44,930
and it really<font color="#CCCCCC"> knows how it was used</font>

407
00:16:43,220 --> 00:16:47,030
<font color="#CCCCCC">they're a little</font><font color="#E5E5E5"> bit different</font><font color="#CCCCCC"> so I</font>

408
00:16:44,930 --> 00:16:49,910
recommend reading both of them and I'll

409
00:16:47,030 --> 00:16:54,709
I'll talk<font color="#CCCCCC"> about these examples</font><font color="#E5E5E5"> later</font>

410
00:16:49,910 --> 00:16:58,100
<font color="#CCCCCC">also sometimes you don't</font><font color="#E5E5E5"> need a leak</font><font color="#CCCCCC"> so</font>

411
00:16:54,710 --> 00:17:01,430
this is<font color="#E5E5E5"> also to cover that aspect</font><font color="#CCCCCC"> so you</font>

412
00:16:58,100 --> 00:17:03,980
can do partial overwrites<font color="#E5E5E5"> like you like</font>

413
00:17:01,430 --> 00:17:06,020
<font color="#E5E5E5">something you</font><font color="#CCCCCC"> can only do in</font><font color="#E5E5E5"> other cases</font>

414
00:17:03,980 --> 00:17:09,199
that<font color="#E5E5E5"> you don't have a leak</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> want</font>

415
00:17:06,020 --> 00:17:11,060
to do you want<font color="#E5E5E5"> to bypass</font><font color="#CCCCCC"> a SLR</font><font color="#E5E5E5"> you can</font>

416
00:17:09,199 --> 00:17:12,459
free chunks are pointing to each other

417
00:17:11,060 --> 00:17:15,560
assuming<font color="#E5E5E5"> you want to for example</font>

418
00:17:12,459 --> 00:17:19,730
<font color="#CCCCCC">overwrite something</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> G</font><font color="#E5E5E5"> in the</font><font color="#CCCCCC"> leap</font>

419
00:17:15,560 --> 00:17:21,770
<font color="#CCCCCC">c-section you can</font><font color="#E5E5E5"> just do free</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> chunks</font>

420
00:17:19,730 --> 00:17:23,030
one of them partially already to point

421
00:17:21,770 --> 00:17:25,189
to the<font color="#CCCCCC"> other the</font><font color="#E5E5E5"> other would point to</font>

422
00:17:23,030 --> 00:17:27,290
<font color="#CCCCCC">Gipsy</font><font color="#E5E5E5"> you can also partial overwrite the</font>

423
00:17:25,189 --> 00:17:28,910
second one and<font color="#CCCCCC"> you get something</font>

424
00:17:27,290 --> 00:17:32,330
pointing to gilepsy which you can

425
00:17:28,910 --> 00:17:34,310
sometimes<font color="#E5E5E5"> write via that pointer</font><font color="#CCCCCC"> maybe</font>

426
00:17:32,330 --> 00:17:36,800
you need more bits so<font color="#E5E5E5"> you do some brute</font>

427
00:17:34,310 --> 00:17:39,050
force<font color="#E5E5E5"> it works</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> there are two example</font>

428
00:17:36,800 --> 00:17:42,620
here one is both<font color="#E5E5E5"> of them from the</font>

429
00:17:39,050 --> 00:17:45,169
mukhlis challenge from 2017<font color="#CCCCCC"> and one is</font>

430
00:17:42,620 --> 00:17:47,030
mine one is definite I think is<font color="#E5E5E5"> you're</font>

431
00:17:45,170 --> 00:17:51,470
in the crowd<font color="#CCCCCC"> I have no idea you should</font>

432
00:17:47,030 --> 00:17:52,960
<font color="#CCCCCC">be here somewhere so</font><font color="#E5E5E5"> it's so</font><font color="#CCCCCC"> Beaufort</font>

433
00:17:51,470 --> 00:17:57,350
interesting and I<font color="#E5E5E5"> reckon</font>

434
00:17:52,960 --> 00:18:00,890
<font color="#E5E5E5">another way to bypass a SLR</font><font color="#CCCCCC"> is with</font>

435
00:17:57,350 --> 00:18:04,939
relative right<font color="#E5E5E5"> so there is a trick that</font>

436
00:18:00,890 --> 00:18:09,290
<font color="#E5E5E5">an really big em up chunk is is</font>

437
00:18:04,940 --> 00:18:11,210
allocated adjacent<font color="#E5E5E5"> to the last two gypsy</font>

438
00:18:09,290 --> 00:18:13,159
<font color="#CCCCCC">for some reason it's some</font><font color="#E5E5E5"> to musician</font><font color="#CCCCCC"> of</font>

439
00:18:11,210 --> 00:18:16,490
the<font color="#CCCCCC"> kernel so if you have a relative</font>

440
00:18:13,160 --> 00:18:19,160
right to this mapping<font color="#E5E5E5"> you basically can</font>

441
00:18:16,490 --> 00:18:20,840
override some do partial<font color="#CCCCCC"> overwriting</font>

442
00:18:19,160 --> 00:18:24,140
<font color="#E5E5E5">pointers in the</font><font color="#CCCCCC"> gypsy</font><font color="#E5E5E5"> and you just</font>

443
00:18:20,840 --> 00:18:26,570
<font color="#E5E5E5">bypassed a SLR</font><font color="#CCCCCC"> this is an example</font><font color="#E5E5E5"> for it</font>

444
00:18:24,140 --> 00:18:28,850
<font color="#E5E5E5">technically they did have a leak</font><font color="#CCCCCC"> in this</font>

445
00:18:26,570 --> 00:18:30,560
example but I think<font color="#CCCCCC"> it can be</font><font color="#E5E5E5"> done also</font>

446
00:18:28,850 --> 00:18:33,350
<font color="#E5E5E5">without a week and it demonstrates the</font>

447
00:18:30,560 --> 00:18:35,419
<font color="#E5E5E5">fact that big big chunks are a mapped</font>

448
00:18:33,350 --> 00:18:39,050
and they are adjacent to<font color="#E5E5E5"> the gypsy</font>

449
00:18:35,420 --> 00:18:41,240
mapping so after we've licked<font color="#E5E5E5"> some</font>

450
00:18:39,050 --> 00:18:43,550
pointers we know where<font color="#E5E5E5"> things are it's</font>

451
00:18:41,240 --> 00:18:46,250
time to do some attacks and<font color="#E5E5E5"> write user</font>

452
00:18:43,550 --> 00:18:48,350
control data so I have three<font color="#CCCCCC"> categories</font>

453
00:18:46,250 --> 00:18:50,990
in<font color="#E5E5E5"> my head for attacks these categories</font>

454
00:18:48,350 --> 00:18:52,429
<font color="#CCCCCC">that just help me think about</font><font color="#E5E5E5"> it you</font>

455
00:18:50,990 --> 00:18:54,950
won't see them anywhere<font color="#CCCCCC"> and the first</font>

456
00:18:52,430 --> 00:18:57,430
<font color="#CCCCCC">category is structural attacks which are</font>

457
00:18:54,950 --> 00:19:00,080
as basically abusing<font color="#E5E5E5"> the data structures</font>

458
00:18:57,430 --> 00:19:03,500
used by the heap<font color="#CCCCCC"> they</font><font color="#E5E5E5"> actually the</font>

459
00:19:00,080 --> 00:19:05,540
linked list<font color="#E5E5E5"> to overwrite pointers or</font>

460
00:19:03,500 --> 00:19:08,270
override arbitrary memory and the first

461
00:19:05,540 --> 00:19:11,780
example<font color="#CCCCCC"> is from</font><font color="#E5E5E5"> link has anyone here</font>

462
00:19:08,270 --> 00:19:15,170
ever heard<font color="#E5E5E5"> of front link</font><font color="#CCCCCC"> no anyone</font><font color="#E5E5E5"> is</font>

463
00:19:11,780 --> 00:19:19,639
awake<font color="#E5E5E5"> okay great</font>

464
00:19:15,170 --> 00:19:21,530
so from think<font color="#CCCCCC"> yeah was</font><font color="#E5E5E5"> actually the</font>

465
00:19:19,640 --> 00:19:22,820
first or<font color="#CCCCCC"> the second heap exploitation</font>

466
00:19:21,530 --> 00:19:25,340
technique<font color="#E5E5E5"> ever published it was</font>

467
00:19:22,820 --> 00:19:28,429
published in 2001<font color="#E5E5E5"> in a paper called</font>

468
00:19:25,340 --> 00:19:30,800
<font color="#E5E5E5">voodoo</font><font color="#CCCCCC"> malloc tricks the idea goes like</font>

469
00:19:28,430 --> 00:19:32,390
this let's look<font color="#CCCCCC"> at least insertions</font>

470
00:19:30,800 --> 00:19:36,020
right when freeing a chunk<font color="#E5E5E5"> were</font>

471
00:19:32,390 --> 00:19:38,480
inserting into<font color="#CCCCCC"> a list and this</font><font color="#E5E5E5"> is a code</font>

472
00:19:36,020 --> 00:19:40,340
very simple code for<font color="#CCCCCC"> lines</font><font color="#E5E5E5"> the least</font>

473
00:19:38,480 --> 00:19:44,300
insertion you were inserting<font color="#CCCCCC"> P</font><font color="#E5E5E5"> right</font>

474
00:19:40,340 --> 00:19:48,050
after the probe and node prep link and

475
00:19:44,300 --> 00:19:50,840
if<font color="#E5E5E5"> you control the disapprove chunk FD</font>

476
00:19:48,050 --> 00:19:53,720
<font color="#E5E5E5">the the pointer FD you basically have a</font>

477
00:19:50,840 --> 00:19:55,790
right pointer to what<font color="#E5E5E5"> we're right P is a</font>

478
00:19:53,720 --> 00:19:57,620
chunk you're inserting into the Fillies

479
00:19:55,790 --> 00:20:01,010
so it<font color="#E5E5E5"> points to user data it was just</font>

480
00:19:57,620 --> 00:20:03,139
really<font color="#E5E5E5"> just held user data and since the</font>

481
00:20:01,010 --> 00:20:04,730
attacker controls the FD because they

482
00:20:03,140 --> 00:20:06,710
have users the free or buffer<font color="#E5E5E5"> overflow</font>

483
00:20:04,730 --> 00:20:11,450
they can just write this pointer

484
00:20:06,710 --> 00:20:13,640
wherever they want which is nice<font color="#CCCCCC"> but</font>

485
00:20:11,450 --> 00:20:16,700
controlling<font color="#E5E5E5"> prep is not so easy what is</font>

486
00:20:13,640 --> 00:20:19,190
<font color="#E5E5E5">this prep so this prep when it's small</font>

487
00:20:16,700 --> 00:20:21,679
<font color="#E5E5E5">bean or fast</font><font color="#CCCCCC"> being on whatever</font><font color="#E5E5E5"> this prep</font>

488
00:20:19,190 --> 00:20:23,630
is the it's the head<font color="#E5E5E5"> of the list and the</font>

489
00:20:21,679 --> 00:20:25,429
head of<font color="#E5E5E5"> the list is not a chunk the head</font>

490
00:20:23,630 --> 00:20:27,950
of the list is in the<font color="#E5E5E5"> main arena so it's</font>

491
00:20:25,429 --> 00:20:30,590
in this<font color="#CCCCCC"> really</font><font color="#E5E5E5"> busy</font><font color="#CCCCCC"> data section however</font>

492
00:20:27,950 --> 00:20:32,149
<font color="#E5E5E5">there is a very nice blog explaining how</font>

493
00:20:30,590 --> 00:20:33,949
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can actually override the list head</font>

494
00:20:32,149 --> 00:20:37,549
<font color="#E5E5E5">with some primitives</font><font color="#CCCCCC"> I recommend reading</font>

495
00:20:33,950 --> 00:20:39,220
and my most favorite way is<font color="#E5E5E5"> insertion</font>

496
00:20:37,549 --> 00:20:42,590
into<font color="#E5E5E5"> the</font><font color="#CCCCCC"> largeman because large bin</font><font color="#E5E5E5"> is</font>

497
00:20:39,220 --> 00:20:44,779
<font color="#E5E5E5">sorted so the previous can be a chunk</font>

498
00:20:42,590 --> 00:20:46,970
that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> used of it</font><font color="#E5E5E5"> can you do a use</font>

499
00:20:44,779 --> 00:20:49,789
after free and actually<font color="#CCCCCC"> overwrite this</font>

500
00:20:46,970 --> 00:20:53,270
chunk or overflow<font color="#E5E5E5"> into this chunk so if</font>

501
00:20:49,789 --> 00:20:55,220
you're free a big chunk<font color="#E5E5E5"> it will just be</font>

502
00:20:53,270 --> 00:20:57,679
inserted into<font color="#E5E5E5"> this large bin in</font><font color="#CCCCCC"> the</font>

503
00:20:55,220 --> 00:21:01,279
right place<font color="#E5E5E5"> we'll see an example in a</font>

504
00:20:57,679 --> 00:21:04,340
second this<font color="#CCCCCC"> thing was not mitigated if</font>

505
00:21:01,279 --> 00:21:06,590
you open many heap exploitation<font color="#E5E5E5"> papers</font>

506
00:21:04,340 --> 00:21:08,629
they will start with in 2001 there<font color="#E5E5E5"> was</font>

507
00:21:06,590 --> 00:21:11,658
<font color="#CCCCCC">the Voodoo</font><font color="#E5E5E5"> mark</font><font color="#CCCCCC"> tricks bla bla bla and</font>

508
00:21:08,630 --> 00:21:15,230
<font color="#E5E5E5">it was</font><font color="#CCCCCC"> mitigated in 2004</font><font color="#E5E5E5"> no it was not</font>

509
00:21:11,659 --> 00:21:17,659
mitigated that's for sure<font color="#CCCCCC"> so checking</font>

510
00:21:15,230 --> 00:21:19,549
<font color="#CCCCCC">out</font><font color="#E5E5E5"> on that and so if you want to read</font>

511
00:21:17,659 --> 00:21:24,470
<font color="#E5E5E5">articles</font><font color="#CCCCCC"> about it there</font><font color="#E5E5E5"> is an upcoming</font>

512
00:21:19,549 --> 00:21:26,029
POC gtfo<font color="#CCCCCC"> in June so there is a paper an</font>

513
00:21:24,470 --> 00:21:28,789
article I wrote called<font color="#E5E5E5"> house of fun</font>

514
00:21:26,029 --> 00:21:30,679
which<font color="#E5E5E5"> explains this in very in many</font>

515
00:21:28,789 --> 00:21:31,700
details and<font color="#CCCCCC"> there is also the</font><font color="#E5E5E5"> original</font>

516
00:21:30,679 --> 00:21:33,559
<font color="#CCCCCC">Voodoo mark tricks</font>

517
00:21:31,700 --> 00:21:35,870
you may read these are the two<font color="#E5E5E5"> articles</font>

518
00:21:33,559 --> 00:21:40,070
<font color="#E5E5E5">that you can read or you will be able to</font>

519
00:21:35,870 --> 00:21:45,139
<font color="#CCCCCC">read</font><font color="#E5E5E5"> yes soon and let's go to an example</font>

520
00:21:40,070 --> 00:21:47,600
so again we start<font color="#E5E5E5"> with our empty heap</font>

521
00:21:45,140 --> 00:21:50,120
<font color="#CCCCCC">and you can see here the large bin of</font>

522
00:21:47,600 --> 00:21:51,439
<font color="#E5E5E5">400 to 430 and it's empty so you see it</font>

523
00:21:50,120 --> 00:21:53,870
points to itself<font color="#E5E5E5"> this time I only</font>

524
00:21:51,440 --> 00:21:57,850
<font color="#CCCCCC">Illustrated the back pointers but again</font>

525
00:21:53,870 --> 00:22:00,049
it's<font color="#E5E5E5"> doubly</font><font color="#CCCCCC"> linked circular lists</font><font color="#E5E5E5"> and</font>

526
00:21:57,850 --> 00:22:03,709
here you can see it's<font color="#CCCCCC"> empty and we make</font>

527
00:22:00,049 --> 00:22:05,600
an allocation of<font color="#CCCCCC"> p0 of size 400 and it's</font>

528
00:22:03,710 --> 00:22:07,789
an allocation we break the top we<font color="#E5E5E5"> have a</font>

529
00:22:05,600 --> 00:22:10,908
nice allocation we make another small

530
00:22:07,789 --> 00:22:12,980
<font color="#CCCCCC">occasion just so things won't merge when</font>

531
00:22:10,909 --> 00:22:14,480
we're freeing them<font color="#CCCCCC"> so the second chunk</font>

532
00:22:12,980 --> 00:22:16,520
is also used<font color="#E5E5E5"> but we're not assigning it</font>

533
00:22:14,480 --> 00:22:20,630
to<font color="#E5E5E5"> any variable and we make a third</font>

534
00:22:16,520 --> 00:22:22,310
allocation of size 420 which is bigger

535
00:22:20,630 --> 00:22:25,370
and it's right after<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we assign it</font>

536
00:22:22,310 --> 00:22:28,940
<font color="#CCCCCC">to p1</font><font color="#E5E5E5"> and we allocate another separator</font>

537
00:22:25,370 --> 00:22:31,389
<font color="#E5E5E5">chunk of the size of 20 so things won't</font>

538
00:22:28,940 --> 00:22:36,770
merge and now to my first trick<font color="#E5E5E5"> we're</font>

539
00:22:31,390 --> 00:22:38,900
freeing<font color="#E5E5E5"> this chunk of 400 and we make a</font>

540
00:22:36,770 --> 00:22:41,120
big allocation free just for<font color="#CCCCCC"> it so it</font>

541
00:22:38,900 --> 00:22:44,240
will<font color="#E5E5E5"> move</font><font color="#CCCCCC"> from the unsorted</font><font color="#E5E5E5"> pin into the</font>

542
00:22:41,120 --> 00:22:46,159
<font color="#E5E5E5">large bin remember when we free chunks</font>

543
00:22:44,240 --> 00:22:47,990
are moving into<font color="#E5E5E5"> the answered bin and to</font>

544
00:22:46,160 --> 00:22:50,480
move them<font color="#CCCCCC"> to the large bins to sort them</font>

545
00:22:47,990 --> 00:22:52,610
you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make a big allocation and or</font>

546
00:22:50,480 --> 00:22:55,100
something<font color="#CCCCCC"> that could not be</font><font color="#E5E5E5"> served so</font>

547
00:22:52,610 --> 00:22:56,689
the system would<font color="#E5E5E5"> actually sort the chunk</font>

548
00:22:55,100 --> 00:22:57,949
<font color="#E5E5E5">and put it in the large bin so this is</font>

549
00:22:56,690 --> 00:23:00,110
what we're doing freeing the chunk

550
00:22:57,950 --> 00:23:02,660
making a bigger location so it moves

551
00:23:00,110 --> 00:23:04,689
into the<font color="#E5E5E5"> large pin and you</font><font color="#CCCCCC"> can see it in</font>

552
00:23:02,660 --> 00:23:07,310
the<font color="#E5E5E5"> linked list of the large bins and</font>

553
00:23:04,690 --> 00:23:09,800
next we're using<font color="#E5E5E5"> our vulnerability and</font>

554
00:23:07,310 --> 00:23:11,870
we are overwriting this back pointer to

555
00:23:09,800 --> 00:23:14,659
<font color="#E5E5E5">dead beef</font><font color="#CCCCCC"> so now it points to that beef</font>

556
00:23:11,870 --> 00:23:18,530
this was use<font color="#CCCCCC"> of a vulnerability any</font>

557
00:23:14,660 --> 00:23:20,990
vulnerability that<font color="#CCCCCC"> can do it and what we</font>

558
00:23:18,530 --> 00:23:24,080
do<font color="#E5E5E5"> next is we're freeing p1 and p1 is</font>

559
00:23:20,990 --> 00:23:26,390
420 by<font color="#E5E5E5"> phony-baloney</font><font color="#CCCCCC"> exabyte so it goes</font>

560
00:23:24,080 --> 00:23:28,399
<font color="#E5E5E5">to the same bin but since the bin is a</font>

561
00:23:26,390 --> 00:23:30,950
sorted<font color="#E5E5E5"> list</font><font color="#CCCCCC"> it would be inserted after</font>

562
00:23:28,400 --> 00:23:34,880
or before it depends how you<font color="#E5E5E5"> look at the</font>

563
00:23:30,950 --> 00:23:38,180
pointers this chunk so when freeing it

564
00:23:34,880 --> 00:23:40,670
<font color="#E5E5E5">in order to enter</font><font color="#CCCCCC"> it into the</font><font color="#E5E5E5"> into the</font>

565
00:23:38,180 --> 00:23:43,070
list<font color="#E5E5E5"> the system would write that</font><font color="#CCCCCC"> beef</font>

566
00:23:40,670 --> 00:23:46,280
pointer back to p1<font color="#CCCCCC"> so basically can</font>

567
00:23:43,070 --> 00:23:48,169
write p1 or the<font color="#E5E5E5"> address of this chunk</font>

568
00:23:46,280 --> 00:23:49,490
<font color="#E5E5E5">wherever you want in this case we want</font>

569
00:23:48,170 --> 00:23:51,470
to<font color="#CCCCCC"> write</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> that beef now usually</font>

570
00:23:49,490 --> 00:23:53,750
<font color="#E5E5E5">that beef is</font><font color="#CCCCCC"> not allocated</font><font color="#E5E5E5"> is not mapped</font>

571
00:23:51,470 --> 00:23:58,970
so the whole thing<font color="#E5E5E5"> would crash</font>

572
00:23:53,750 --> 00:24:03,020
however if if the<font color="#CCCCCC"> ok so yeah it</font><font color="#E5E5E5"> was</font><font color="#CCCCCC"> a</font>

573
00:23:58,970 --> 00:24:05,480
bit annoying<font color="#E5E5E5"> so if we if that beef is</font>

574
00:24:03,020 --> 00:24:07,340
mapped you just write a pointer to<font color="#CCCCCC"> this</font>

575
00:24:05,480 --> 00:24:08,990
chunk<font color="#CCCCCC"> to dead beef and</font><font color="#E5E5E5"> this is how the</font>

576
00:24:07,340 --> 00:24:10,270
<font color="#E5E5E5">front think method works with large</font>

577
00:24:08,990 --> 00:24:13,610
<font color="#CCCCCC">beans</font>

578
00:24:10,270 --> 00:24:15,530
<font color="#E5E5E5">ok the second method and also described</font>

579
00:24:13,610 --> 00:24:17,030
in<font color="#E5E5E5"> the same paper voodoo mount tricks is</font>

580
00:24:15,530 --> 00:24:20,510
called unlink I think you're more

581
00:24:17,030 --> 00:24:23,810
familiar<font color="#E5E5E5"> with unlink right who's heard</font>

582
00:24:20,510 --> 00:24:28,340
of unlink before yeah<font color="#E5E5E5"> quite more hands</font>

583
00:24:23,810 --> 00:24:31,580
<font color="#E5E5E5">ok great so same paper the idea</font><font color="#CCCCCC"> is the</font>

584
00:24:28,340 --> 00:24:34,480
opposite<font color="#E5E5E5"> let's look at when removing a</font>

585
00:24:31,580 --> 00:24:35,980
link from the list<font color="#E5E5E5"> so this is how you</font>

586
00:24:34,480 --> 00:24:37,630
<font color="#CCCCCC">I'll link</font><font color="#E5E5E5"> you have actually</font><font color="#CCCCCC"> it's</font>

587
00:24:35,980 --> 00:24:40,660
doubling so you need to do both sides

588
00:24:37,630 --> 00:24:42,130
but this is what you do<font color="#CCCCCC"> and a user</font><font color="#E5E5E5"> that</font>

589
00:24:40,660 --> 00:24:44,260
controls the back and the forward

590
00:24:42,130 --> 00:24:45,820
<font color="#E5E5E5">actually gets right what</font><font color="#CCCCCC"> where right if</font>

591
00:24:44,260 --> 00:24:47,860
you control<font color="#CCCCCC"> the back you control where</font>

592
00:24:45,820 --> 00:24:49,780
<font color="#CCCCCC">to right and if you control the forward</font>

593
00:24:47,860 --> 00:24:54,070
you control what right so you<font color="#E5E5E5"> got a</font>

594
00:24:49,780 --> 00:24:56,560
right way<font color="#E5E5E5"> right what where and this was</font>

595
00:24:54,070 --> 00:24:59,080
<font color="#CCCCCC">mitigated in 2004 when the papers saying</font>

596
00:24:56,560 --> 00:25:02,050
there were mitigations<font color="#CCCCCC"> series</font><font color="#E5E5E5"> of patches</font>

597
00:24:59,080 --> 00:25:04,870
mitigating some existing attacks<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

598
00:25:02,050 --> 00:25:06,760
what they mitigated<font color="#E5E5E5"> and so they're</font>

599
00:25:04,870 --> 00:25:09,040
actually checking<font color="#E5E5E5"> that the back forward</font>

600
00:25:06,760 --> 00:25:11,379
points<font color="#CCCCCC"> the chunkier unlinking from the</font>

601
00:25:09,040 --> 00:25:14,530
list<font color="#E5E5E5"> and if it's not it</font><font color="#CCCCCC"> calls the print</font>

602
00:25:11,380 --> 00:25:17,980
<font color="#E5E5E5">error function this attack is still</font>

603
00:25:14,530 --> 00:25:20,680
<font color="#E5E5E5">useful unsorted</font><font color="#CCCCCC"> bean attack is basically</font>

604
00:25:17,980 --> 00:25:24,340
an unmitigated<font color="#E5E5E5"> unlink it sticks to this</font>

605
00:25:20,680 --> 00:25:27,160
day there<font color="#CCCCCC"> is an attack called house of</font>

606
00:25:24,340 --> 00:25:30,850
cars that<font color="#CCCCCC"> was</font><font color="#E5E5E5"> outlined in a blog</font><font color="#CCCCCC"> post by</font>

607
00:25:27,160 --> 00:25:32,590
<font color="#CCCCCC">toucan which is a very nice</font><font color="#E5E5E5"> read the</font>

608
00:25:30,850 --> 00:25:35,469
<font color="#E5E5E5">entire series</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> blog posts</font><font color="#CCCCCC"> is a nice</font>

609
00:25:32,590 --> 00:25:37,090
weed and what he was suggesting he's

610
00:25:35,470 --> 00:25:40,690
overwriting the<font color="#E5E5E5"> check action global</font>

611
00:25:37,090 --> 00:25:42,790
variable<font color="#E5E5E5"> when it's zeroed or went is</font><font color="#CCCCCC"> a</font>

612
00:25:40,690 --> 00:25:45,160
significant<font color="#E5E5E5"> bit is</font><font color="#CCCCCC"> zero then the print</font>

613
00:25:42,790 --> 00:25:47,260
<font color="#E5E5E5">error function does nothing it's a no op</font>

614
00:25:45,160 --> 00:25:50,950
and<font color="#E5E5E5"> then you can unlink again and do</font>

615
00:25:47,260 --> 00:25:53,020
whatever you<font color="#E5E5E5"> want and also if you unlink</font>

616
00:25:50,950 --> 00:25:54,550
a pointer<font color="#CCCCCC"> to a tagger control data you</font>

617
00:25:53,020 --> 00:25:56,980
can<font color="#CCCCCC"> over i disappoint</font><font color="#E5E5E5"> her in various</font>

618
00:25:54,550 --> 00:25:58,960
ways so<font color="#E5E5E5"> that's also a nice</font><font color="#CCCCCC"> way to use</font>

619
00:25:56,980 --> 00:26:02,580
the unlink<font color="#E5E5E5"> even though even with this</font>

620
00:25:58,960 --> 00:26:05,980
mitigation the second category of

621
00:26:02,580 --> 00:26:09,340
attacks<font color="#E5E5E5"> is the functionality attacks so</font>

622
00:26:05,980 --> 00:26:11,680
the thing is<font color="#CCCCCC"> that the</font><font color="#E5E5E5"> allocator is an</font>

623
00:26:09,340 --> 00:26:13,570
alligator it allocates data which the

624
00:26:11,680 --> 00:26:16,210
user then writes the user is an attacker

625
00:26:13,570 --> 00:26:18,760
in our case so if you can trick the

626
00:26:16,210 --> 00:26:20,590
alligator to allocate memory in regions

627
00:26:18,760 --> 00:26:22,480
it was not<font color="#E5E5E5"> supposed to allocate not in</font>

628
00:26:20,590 --> 00:26:24,340
the heap in<font color="#CCCCCC"> the stack in the Global's</font>

629
00:26:22,480 --> 00:26:26,410
you can just right there and this<font color="#E5E5E5"> is how</font>

630
00:26:24,340 --> 00:26:29,980
<font color="#CCCCCC">you get to write your data</font><font color="#E5E5E5"> wherever you</font>

631
00:26:26,410 --> 00:26:31,690
want<font color="#E5E5E5"> in the process memory so the first</font>

632
00:26:29,980 --> 00:26:33,460
attack I'm gonna talk<font color="#E5E5E5"> about is the</font><font color="#CCCCCC"> T</font>

633
00:26:31,690 --> 00:26:36,670
cache poison attack<font color="#E5E5E5"> again T cache was</font>

634
00:26:33,460 --> 00:26:39,760
introduced in<font color="#CCCCCC"> 226</font><font color="#E5E5E5"> so it's quite recent</font>

635
00:26:36,670 --> 00:26:42,130
<font color="#E5E5E5">and this is the T cash code as you can</font>

636
00:26:39,760 --> 00:26:45,129
see there is no verification<font color="#CCCCCC"> of nothing</font>

637
00:26:42,130 --> 00:26:47,290
here but an attacker<font color="#E5E5E5"> that controls this</font>

638
00:26:45,130 --> 00:26:47,680
next pointer or the<font color="#E5E5E5"> FD pointer because</font>

639
00:26:47,290 --> 00:26:50,260
it was a

640
00:26:47,680 --> 00:26:52,120
you're not using the<font color="#E5E5E5"> same data</font>

641
00:26:50,260 --> 00:26:53,320
structures<font color="#CCCCCC"> I don't know why they're not</font>

642
00:26:52,120 --> 00:26:55,179
<font color="#CCCCCC">doing it but</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> some reason but</font>

643
00:26:53,320 --> 00:26:58,090
attacker that<font color="#E5E5E5"> control this next pointer</font>

644
00:26:55,180 --> 00:27:00,280
which coincides with user data<font color="#CCCCCC"> and they</font>

645
00:26:58,090 --> 00:27:02,110
use after free situation for<font color="#CCCCCC"> example you</font>

646
00:27:00,280 --> 00:27:03,910
can<font color="#E5E5E5"> just poison the</font><font color="#CCCCCC"> cache and put</font>

647
00:27:02,110 --> 00:27:07,540
whatever pointer they want in the cache

648
00:27:03,910 --> 00:27:10,530
and in the next allocation<font color="#CCCCCC"> malc</font><font color="#E5E5E5"> will</font>

649
00:27:07,540 --> 00:27:14,500
return at a controlled<font color="#CCCCCC"> a memory location</font>

650
00:27:10,530 --> 00:27:18,420
<font color="#CCCCCC">so let's see an example</font><font color="#E5E5E5"> again</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> in this</font>

651
00:27:14,500 --> 00:27:21,970
case we have a buffer on<font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> and</font>

652
00:27:18,420 --> 00:27:24,280
<font color="#CCCCCC">it's size of 8 bytes whatever and we</font>

653
00:27:21,970 --> 00:27:26,380
make a first allocation of size 90 for

654
00:27:24,280 --> 00:27:28,840
example and then we're freeing<font color="#E5E5E5"> this</font>

655
00:27:26,380 --> 00:27:31,080
allocation<font color="#E5E5E5"> so it goes into the</font><font color="#CCCCCC"> tea Koosh</font>

656
00:27:28,840 --> 00:27:33,730
you<font color="#E5E5E5"> can see Takeshi is an array of</font>

657
00:27:31,080 --> 00:27:36,250
pointers<font color="#E5E5E5"> to linked lists and</font><font color="#CCCCCC"> you see the</font>

658
00:27:33,730 --> 00:27:38,680
list contain only one chunk the chunk

659
00:27:36,250 --> 00:27:41,830
which is freed<font color="#E5E5E5"> and this chunk points now</font>

660
00:27:38,680 --> 00:27:44,440
has the list ends<font color="#CCCCCC"> and then we're using</font>

661
00:27:41,830 --> 00:27:46,000
<font color="#E5E5E5">our use after free vulnerability</font><font color="#CCCCCC"> or the</font>

662
00:27:44,440 --> 00:27:48,340
buffer<font color="#CCCCCC"> overflow vulnerability doesn't</font>

663
00:27:46,000 --> 00:27:51,010
matter<font color="#E5E5E5"> to point to this buffer on</font><font color="#CCCCCC"> the</font>

664
00:27:48,340 --> 00:27:53,740
<font color="#E5E5E5">stack</font><font color="#CCCCCC"> now we make an allocation the</font>

665
00:27:51,010 --> 00:27:55,450
allocation returns this chunk the

666
00:27:53,740 --> 00:27:56,710
corrupted chunk<font color="#E5E5E5"> it's not a far</font>

667
00:27:55,450 --> 00:27:59,920
interested but the more important<font color="#CCCCCC"> thing</font>

668
00:27:56,710 --> 00:28:01,660
<font color="#CCCCCC">that this allocation</font><font color="#E5E5E5"> does is moving the</font>

669
00:27:59,920 --> 00:28:03,310
buffer on<font color="#CCCCCC"> the stack</font><font color="#E5E5E5"> into the</font><font color="#CCCCCC"> T cache</font>

670
00:28:01,660 --> 00:28:05,920
into the cache<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this would be the</font>

671
00:28:03,310 --> 00:28:07,899
next<font color="#E5E5E5"> allocation so next allocation</font>

672
00:28:05,920 --> 00:28:11,380
actually<font color="#E5E5E5"> allocates this buffer</font><font color="#CCCCCC"> on the</font>

673
00:28:07,900 --> 00:28:12,580
<font color="#E5E5E5">stack from malloc and now if we</font><font color="#CCCCCC"> can</font>

674
00:28:11,380 --> 00:28:14,860
write to<font color="#E5E5E5"> it for</font><font color="#CCCCCC"> example we can write</font>

675
00:28:12,580 --> 00:28:16,720
that beef in little-endian<font color="#E5E5E5"> we're just</font>

676
00:28:14,860 --> 00:28:21,699
writing<font color="#CCCCCC"> to a buffer</font><font color="#E5E5E5"> understand that's a</font>

677
00:28:16,720 --> 00:28:23,710
very nice attack<font color="#CCCCCC"> I other functionality</font>

678
00:28:21,700 --> 00:28:25,930
text is all the attacks from my<font color="#E5E5E5"> apology</font>

679
00:28:23,710 --> 00:28:27,940
<font color="#E5E5E5">Karim and other stuff similar to it so</font>

680
00:28:25,930 --> 00:28:28,900
just links I cannot<font color="#E5E5E5"> talk about them</font>

681
00:28:27,940 --> 00:28:31,450
they're<font color="#E5E5E5"> really complicated they're</font>

682
00:28:28,900 --> 00:28:34,540
really nice<font color="#CCCCCC"> Malcolm</font><font color="#E5E5E5"> AFRICOM is</font><font color="#CCCCCC"> a classic</font>

683
00:28:31,450 --> 00:28:37,270
article<font color="#CCCCCC"> from 2005 and still to</font><font color="#E5E5E5"> this day</font>

684
00:28:34,540 --> 00:28:42,730
many<font color="#E5E5E5"> of the attacks in this paper are</font>

685
00:28:37,270 --> 00:28:44,680
relevant<font color="#E5E5E5"> so and it's a fine read</font><font color="#CCCCCC"> okay so</font>

686
00:28:42,730 --> 00:28:47,890
the<font color="#CCCCCC"> last category is the restricted</font>

687
00:28:44,680 --> 00:28:49,270
functionality attacks in which you have

688
00:28:47,890 --> 00:28:52,120
a more<font color="#E5E5E5"> restricted vulnerabilities you</font>

689
00:28:49,270 --> 00:28:54,790
<font color="#E5E5E5">cannot write any kind of data you</font><font color="#CCCCCC"> want</font>

690
00:28:52,120 --> 00:28:56,530
you can only write<font color="#CCCCCC"> to one byte of data</font>

691
00:28:54,790 --> 00:28:58,450
you can<font color="#CCCCCC"> write now by it's stuff like</font>

692
00:28:56,530 --> 00:29:00,190
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> you see we want to</font><font color="#E5E5E5"> trick the</font>

693
00:28:58,450 --> 00:29:01,420
allocator and<font color="#CCCCCC"> you run a want to</font>

694
00:29:00,190 --> 00:29:04,510
<font color="#CCCCCC">overwrite</font>

695
00:29:01,420 --> 00:29:07,000
it is in the hip so do you have some

696
00:29:04,510 --> 00:29:08,890
data on<font color="#CCCCCC"> the hip adjacent</font><font color="#E5E5E5"> to your</font>

697
00:29:07,000 --> 00:29:11,890
vulnerable chunk and<font color="#E5E5E5"> this is what you</font>

698
00:29:08,890 --> 00:29:14,740
<font color="#E5E5E5">wanna hit this is the the chunk you want</font>

699
00:29:11,890 --> 00:29:16,930
to corrupt<font color="#E5E5E5"> and in this</font><font color="#CCCCCC"> category there</font>

700
00:29:14,740 --> 00:29:21,670
are two papers<font color="#CCCCCC"> that I know for more than</font>

701
00:29:16,930 --> 00:29:23,290
two papers but<font color="#CCCCCC"> two</font><font color="#E5E5E5"> two techniques the</font>

702
00:29:21,670 --> 00:29:25,030
<font color="#E5E5E5">first one is the poison now bite that</font>

703
00:29:23,290 --> 00:29:28,420
was published<font color="#E5E5E5"> by Google zero project</font>

704
00:29:25,030 --> 00:29:31,950
zero<font color="#E5E5E5"> in 2014 or</font><font color="#CCCCCC"> 59</font><font color="#E5E5E5"> doctrinaire</font><font color="#CCCCCC"> Krug</font>

705
00:29:28,420 --> 00:29:34,750
currently in which they demonstrated how

706
00:29:31,950 --> 00:29:38,230
overflowing even one now bite into a

707
00:29:34,750 --> 00:29:40,510
<font color="#E5E5E5">chunk can result in interesting</font>

708
00:29:38,230 --> 00:29:43,360
overlapping chunks or<font color="#E5E5E5"> chances are</font>

709
00:29:40,510 --> 00:29:45,700
removed and forgotten from the<font color="#CCCCCC"> hip</font><font color="#E5E5E5"> and</font>

710
00:29:43,360 --> 00:29:48,550
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> also my paper from the one</font>

711
00:29:45,700 --> 00:29:50,680
before<font color="#E5E5E5"> previous POC gtfo I called it a</font>

712
00:29:48,550 --> 00:29:55,290
fragment<font color="#E5E5E5"> and write technique that you</font>

713
00:29:50,680 --> 00:29:59,680
can<font color="#CCCCCC"> turn relative overflow into a into a</font>

714
00:29:55,290 --> 00:30:02,700
into a sorry<font color="#CCCCCC"> you can convert a relative</font>

715
00:29:59,680 --> 00:30:05,980
a linear overflow into<font color="#CCCCCC"> a relative right</font>

716
00:30:02,700 --> 00:30:07,480
so you can read these two<font color="#E5E5E5"> papers there</font>

717
00:30:05,980 --> 00:30:08,860
are other cool tricks that I<font color="#E5E5E5"> cannot put</font>

718
00:30:07,480 --> 00:30:10,120
<font color="#E5E5E5">in any category in my head but they</font>

719
00:30:08,860 --> 00:30:11,800
still remember<font color="#E5E5E5"> them and you should</font>

720
00:30:10,120 --> 00:30:14,560
<font color="#E5E5E5">probably know</font><font color="#CCCCCC"> about them so it's the arm</font>

721
00:30:11,800 --> 00:30:16,659
of any page<font color="#E5E5E5"> also from the series</font><font color="#CCCCCC"> of</font>

722
00:30:14,560 --> 00:30:19,120
posts by to count<font color="#E5E5E5"> that basically an</font>

723
00:30:16,660 --> 00:30:20,440
attack that<font color="#E5E5E5"> lets you</font><font color="#CCCCCC"> add map pages and</font>

724
00:30:19,120 --> 00:30:24,459
it's really interesting<font color="#CCCCCC"> to combine</font><font color="#E5E5E5"> it</font>

725
00:30:20,440 --> 00:30:26,170
with the stack<font color="#E5E5E5"> because and not mapped</font>

726
00:30:24,460 --> 00:30:28,030
page in the stack<font color="#CCCCCC"> that is hit is</font>

727
00:30:26,170 --> 00:30:31,240
<font color="#E5E5E5">actually immediately mapped by the</font>

728
00:30:28,030 --> 00:30:33,250
system and zeroed out so you can zero

729
00:30:31,240 --> 00:30:35,650
pages on the stack which is<font color="#E5E5E5"> nice and</font>

730
00:30:33,250 --> 00:30:38,290
<font color="#E5E5E5">also this allocation of the</font><font color="#CCCCCC"> bins you</font><font color="#E5E5E5"> can</font>

731
00:30:35,650 --> 00:30:42,670
actually allocate over<font color="#CCCCCC"> the heads of</font><font color="#E5E5E5"> the</font>

732
00:30:38,290 --> 00:30:45,100
lists in<font color="#CCCCCC"> the bins in the main arena</font><font color="#E5E5E5"> yeah</font>

733
00:30:42,670 --> 00:30:47,110
and that's for the attacks now<font color="#E5E5E5"> flow hi</font>

734
00:30:45,100 --> 00:30:49,240
Jackie I mean we've read in<font color="#E5E5E5"> our data we</font>

735
00:30:47,110 --> 00:30:52,449
know where things are<font color="#E5E5E5"> how do we hijack</font>

736
00:30:49,240 --> 00:30:55,630
the flow how do we can call PC and for

737
00:30:52,450 --> 00:30:58,570
this matter<font color="#E5E5E5"> we have this is the become a</font>

738
00:30:55,630 --> 00:31:02,020
wizard part and my favorite is<font color="#E5E5E5"> using the</font>

739
00:30:58,570 --> 00:31:03,669
<font color="#CCCCCC">malloc hooks</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> they're hooks in the</font>

740
00:31:02,020 --> 00:31:06,430
<font color="#E5E5E5">leaf see mark here as you can</font><font color="#CCCCCC"> see the</font>

741
00:31:03,670 --> 00:31:08,680
function<font color="#CCCCCC"> of malloc</font><font color="#E5E5E5"> internal it is how</font>

742
00:31:06,430 --> 00:31:10,570
<font color="#CCCCCC">its implemented</font><font color="#E5E5E5"> and the very first lines</font>

743
00:31:08,680 --> 00:31:13,720
what they're doing is reading<font color="#E5E5E5"> a global</font>

744
00:31:10,570 --> 00:31:15,490
<font color="#CCCCCC">variable called</font><font color="#E5E5E5"> malloc hook and checking</font>

745
00:31:13,720 --> 00:31:17,260
if it's now or not

746
00:31:15,490 --> 00:31:19,510
if it's not now<font color="#E5E5E5"> it will just jump to</font>

747
00:31:17,260 --> 00:31:21,700
whatever is pointed there<font color="#E5E5E5"> so if you can</font>

748
00:31:19,510 --> 00:31:24,370
override this global variable which is

749
00:31:21,700 --> 00:31:28,450
<font color="#CCCCCC">injeel</font><font color="#E5E5E5"> you see you can get code</font>

750
00:31:24,370 --> 00:31:30,399
execution<font color="#CCCCCC"> it's similar in free and in</font>

751
00:31:28,450 --> 00:31:31,870
realloc and in the other<font color="#CCCCCC"> api</font><font color="#E5E5E5"> calls so we</font>

752
00:31:30,399 --> 00:31:35,678
have the free hook and the reality<font color="#E5E5E5"> okay</font>

753
00:31:31,870 --> 00:31:37,928
<font color="#E5E5E5">and you can operate them yeah</font><font color="#CCCCCC"> and what's</font>

754
00:31:35,679 --> 00:31:40,570
really<font color="#E5E5E5"> nice is that</font><font color="#CCCCCC"> we our assumption</font>

755
00:31:37,929 --> 00:31:42,490
here<font color="#CCCCCC"> is the user can call invoke some</font>

756
00:31:40,570 --> 00:31:45,158
<font color="#E5E5E5">API functions right this is how we're</font>

757
00:31:42,490 --> 00:31:47,260
doing<font color="#E5E5E5"> all our exploits so it's really</font>

758
00:31:45,159 --> 00:31:49,570
<font color="#E5E5E5">straightforward the user can already</font>

759
00:31:47,260 --> 00:31:53,110
invoke this<font color="#CCCCCC"> function so</font><font color="#E5E5E5"> when overriding</font>

760
00:31:49,570 --> 00:31:57,100
the hooks it just invokes the exploit

761
00:31:53,110 --> 00:31:58,959
chain and less known fact is<font color="#CCCCCC"> that it can</font>

762
00:31:57,100 --> 00:32:01,149
also<font color="#E5E5E5"> be reached from</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> i/o system so a</font>

763
00:31:58,960 --> 00:32:04,659
very big<font color="#E5E5E5"> printf for example would</font>

764
00:32:01,149 --> 00:32:07,239
allocate a buffer<font color="#E5E5E5"> using malloc to hold</font>

765
00:32:04,659 --> 00:32:09,940
the<font color="#E5E5E5"> information you're writing so you're</font>

766
00:32:07,240 --> 00:32:12,549
<font color="#CCCCCC">doing i/o if and if you so it's over 2k</font>

767
00:32:09,940 --> 00:32:14,799
over<font color="#E5E5E5"> 4k</font><font color="#CCCCCC"> I don't remember</font><font color="#E5E5E5"> exactly</font><font color="#CCCCCC"> and if</font>

768
00:32:12,549 --> 00:32:16,990
you<font color="#E5E5E5"> really have a really big printing it</font>

769
00:32:14,799 --> 00:32:19,389
<font color="#E5E5E5">will be even</font><font color="#CCCCCC"> that also</font><font color="#E5E5E5"> it be realloc and</font>

770
00:32:16,990 --> 00:32:20,890
realloc Tagen<font color="#E5E5E5"> and eventually freed so it</font>

771
00:32:19,390 --> 00:32:22,929
can be nice<font color="#E5E5E5"> and</font><font color="#CCCCCC"> she's in situations you</font>

772
00:32:20,890 --> 00:32:24,850
can only write one byte at<font color="#CCCCCC"> a time so</font>

773
00:32:22,929 --> 00:32:26,289
you're writing one byte at<font color="#E5E5E5"> the time of</font>

774
00:32:24,850 --> 00:32:28,870
free<font color="#CCCCCC"> a lock</font><font color="#E5E5E5"> and then you make a really</font>

775
00:32:26,289 --> 00:32:30,279
<font color="#E5E5E5">huge print you're using only malloc and</font>

776
00:32:28,870 --> 00:32:32,260
free malloc and free to write one by<font color="#E5E5E5"> two</font>

777
00:32:30,279 --> 00:32:34,720
the time to write the<font color="#E5E5E5"> realloc</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and</font>

778
00:32:32,260 --> 00:32:36,399
then you're invoking<font color="#CCCCCC"> gree allocated and</font>

779
00:32:34,720 --> 00:32:37,720
the hook<font color="#E5E5E5"> is ready</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> all bytes are</font>

780
00:32:36,399 --> 00:32:39,219
written you cannot do it<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> malla</font>

781
00:32:37,720 --> 00:32:40,750
cook<font color="#E5E5E5"> because you write only one byte at</font>

782
00:32:39,220 --> 00:32:43,120
<font color="#CCCCCC">a time so the next time you'll call</font>

783
00:32:40,750 --> 00:32:44,590
malloc<font color="#E5E5E5"> you will screw things over but if</font>

784
00:32:43,120 --> 00:32:48,299
you're doing<font color="#E5E5E5"> it to the</font><font color="#CCCCCC"> ryokan printf</font>

785
00:32:44,590 --> 00:32:50,970
you're getting everything neatly done

786
00:32:48,299 --> 00:32:54,340
<font color="#CCCCCC">you can see an example in the baby heap</font>

787
00:32:50,970 --> 00:32:58,149
2017 challenge<font color="#E5E5E5"> yeah it was quite cool</font>

788
00:32:54,340 --> 00:33:02,918
<font color="#E5E5E5">and many other so the next one is</font><font color="#CCCCCC"> the</font>

789
00:32:58,149 --> 00:33:05,379
<font color="#E5E5E5">one I really like I think I never seen</font>

790
00:33:02,919 --> 00:33:07,570
it<font color="#E5E5E5"> except in one of my exploits and in</font>

791
00:33:05,380 --> 00:33:08,950
Mac from back<font color="#E5E5E5"> on sector</font><font color="#CCCCCC"> exploit</font><font color="#E5E5E5"> it's the</font>

792
00:33:07,570 --> 00:33:11,678
deal open hook<font color="#E5E5E5"> so there is another</font>

793
00:33:08,950 --> 00:33:15,750
global variable<font color="#CCCCCC"> called deal open which</font>

794
00:33:11,679 --> 00:33:18,429
points to a table of functions as

795
00:33:15,750 --> 00:33:20,110
specifically<font color="#E5E5E5"> the deal open mode and it's</font>

796
00:33:18,429 --> 00:33:21,820
called whenever<font color="#E5E5E5"> you're doing deal open</font>

797
00:33:20,110 --> 00:33:26,049
whenever<font color="#E5E5E5"> you open an external library</font>

798
00:33:21,820 --> 00:33:28,059
<font color="#E5E5E5">and attacker can very easily trigger it</font>

799
00:33:26,049 --> 00:33:28,840
because it happens when there is a

800
00:33:28,059 --> 00:33:30,100
detectable

801
00:33:28,840 --> 00:33:32,949
so if you<font color="#E5E5E5"> remember the</font><font color="#CCCCCC"> maloca print</font>

802
00:33:30,100 --> 00:33:35,620
error function this function<font color="#E5E5E5"> at some</font>

803
00:33:32,950 --> 00:33:37,539
<font color="#E5E5E5">points tries</font><font color="#CCCCCC"> to print the back face and</font>

804
00:33:35,620 --> 00:33:39,639
to bring a bad<font color="#E5E5E5"> print the back</font><font color="#CCCCCC"> trace its</font>

805
00:33:37,539 --> 00:33:41,559
using a function in a<font color="#CCCCCC"> different library</font>

806
00:33:39,640 --> 00:33:43,809
<font color="#E5E5E5">and they're actually</font><font color="#CCCCCC"> doing deal open the</font>

807
00:33:41,559 --> 00:33:46,570
<font color="#CCCCCC">chili BC</font><font color="#E5E5E5"> to does deal open to get this</font>

808
00:33:43,809 --> 00:33:48,940
<font color="#E5E5E5">function</font><font color="#CCCCCC"> so you're triggering</font><font color="#E5E5E5"> a very</font>

809
00:33:46,570 --> 00:33:50,740
<font color="#E5E5E5">detectable error because you can write</font>

810
00:33:48,940 --> 00:33:53,500
some stuff you make some inconsistencies

811
00:33:50,740 --> 00:33:54,429
and it will just do<font color="#CCCCCC"> TL open and use the</font>

812
00:33:53,500 --> 00:33:56,919
<font color="#CCCCCC">DL open hook</font>

813
00:33:54,429 --> 00:33:58,299
it's very naturally combined with the

814
00:33:56,919 --> 00:34:00,010
front link attack because if<font color="#CCCCCC"> you're on</font>

815
00:33:58,299 --> 00:34:02,559
<font color="#E5E5E5">the front lick</font><font color="#CCCCCC"> it attack it grants you</font><font color="#E5E5E5"> a</font>

816
00:34:00,010 --> 00:34:04,240
right pointer to user data<font color="#E5E5E5"> where and</font>

817
00:34:02,559 --> 00:34:06,940
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> exactly</font><font color="#E5E5E5"> what you want you</font><font color="#CCCCCC"> want</font>

818
00:34:04,240 --> 00:34:08,710
to<font color="#E5E5E5"> write a pointer</font><font color="#CCCCCC"> to a table of</font>

819
00:34:06,940 --> 00:34:10,510
functions so<font color="#CCCCCC"> you cannot do it with the</font>

820
00:34:08,710 --> 00:34:14,109
hooks the<font color="#CCCCCC"> hooks should point immediately</font>

821
00:34:10,510 --> 00:34:15,970
<font color="#E5E5E5">to code right we have at the NX bit code</font>

822
00:34:14,109 --> 00:34:17,619
is not writable but you can do<font color="#E5E5E5"> it with a</font>

823
00:34:15,969 --> 00:34:20,348
virtual<font color="#E5E5E5"> table and deal open who gives a</font>

824
00:34:17,619 --> 00:34:22,240
very nice<font color="#E5E5E5"> mechanism to do it if you</font><font color="#CCCCCC"> know</font>

825
00:34:20,349 --> 00:34:25,649
<font color="#E5E5E5">really</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> up so</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> also will be part</font>

826
00:34:22,239 --> 00:34:28,060
of my upcoming POC<font color="#E5E5E5"> gtfo</font><font color="#CCCCCC"> write-up</font><font color="#E5E5E5"> and</font>

827
00:34:25,649 --> 00:34:29,949
next there is the<font color="#CCCCCC"> Julie PC files track</font>

828
00:34:28,060 --> 00:34:32,500
this is known as part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> house</font><font color="#E5E5E5"> of</font>

829
00:34:29,949 --> 00:34:35,199
<font color="#CCCCCC">orange and there is this</font><font color="#E5E5E5"> global variable</font>

830
00:34:32,500 --> 00:34:39,010
also<font color="#E5E5E5"> called IO East</font><font color="#CCCCCC"> all which is a</font>

831
00:34:35,199 --> 00:34:42,489
linked list of open<font color="#CCCCCC"> files</font><font color="#E5E5E5"> and when</font>

832
00:34:39,010 --> 00:34:43,659
<font color="#CCCCCC">unprocessed termination it invoke some</font>

833
00:34:42,489 --> 00:34:45,848
of the functions<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> the</font>

834
00:34:43,659 --> 00:34:48,730
overflow function<font color="#E5E5E5"> from</font><font color="#CCCCCC"> a virtual</font><font color="#E5E5E5"> table</font>

835
00:34:45,849 --> 00:34:51,970
<font color="#E5E5E5">and attacker can also trigger it quite</font>

836
00:34:48,730 --> 00:34:54,909
easily<font color="#CCCCCC"> similar to the deal</font><font color="#E5E5E5"> open hook</font><font color="#CCCCCC"> a</font>

837
00:34:51,969 --> 00:34:59,169
detectable<font color="#E5E5E5"> error then the print error</font>

838
00:34:54,909 --> 00:35:00,670
function process<font color="#CCCCCC"> terminations so on it</font>

839
00:34:59,170 --> 00:35:02,710
was partially<font color="#E5E5E5"> mitigated with funky</font>

840
00:35:00,670 --> 00:35:05,310
called<font color="#E5E5E5"> I evaluate V table which checks</font>

841
00:35:02,710 --> 00:35:08,290
the<font color="#CCCCCC"> B table pointer points to a section</font>

842
00:35:05,310 --> 00:35:09,759
designated only for virtual tables<font color="#E5E5E5"> but</font>

843
00:35:08,290 --> 00:35:12,880
it's not enough<font color="#E5E5E5"> because there are plenty</font>

844
00:35:09,760 --> 00:35:15,010
of functions there and you can bypass it

845
00:35:12,880 --> 00:35:16,780
quite easily<font color="#CCCCCC"> so you can read the</font>

846
00:35:15,010 --> 00:35:18,910
<font color="#CCCCCC">original</font><font color="#E5E5E5"> House of orange right up if you</font>

847
00:35:16,780 --> 00:35:22,089
want to<font color="#E5E5E5"> see how it was in gypsy</font><font color="#CCCCCC"> to 23</font>

848
00:35:18,910 --> 00:35:25,000
and in gdb C to 24 with<font color="#CCCCCC"> the mitigation</font>

849
00:35:22,089 --> 00:35:31,180
<font color="#CCCCCC">you can see the mitigation bypass it's</font>

850
00:35:25,000 --> 00:35:34,089
the<font color="#E5E5E5"> 300 challenge from and</font><font color="#CCCCCC"> less CCC so</font>

851
00:35:31,180 --> 00:35:36,098
yeah<font color="#CCCCCC"> one thing</font><font color="#E5E5E5"> that in this</font>

852
00:35:34,089 --> 00:35:37,930
<font color="#E5E5E5">I don't want it was in the last version</font>

853
00:35:36,099 --> 00:35:40,150
of<font color="#CCCCCC"> GFC mark 2:27</font>

854
00:35:37,930 --> 00:35:42,910
there is a<font color="#E5E5E5"> mitigation to printer and it</font>

855
00:35:40,150 --> 00:35:45,430
<font color="#E5E5E5">just calls abort</font><font color="#CCCCCC"> it does</font>

856
00:35:42,910 --> 00:35:47,078
print black<font color="#CCCCCC"> trace it doesn't</font><font color="#E5E5E5"> flush the</font>

857
00:35:45,430 --> 00:35:49,808
files<font color="#E5E5E5"> what nothing</font>

858
00:35:47,079 --> 00:35:51,039
so yeah so all the process termination

859
00:35:49,809 --> 00:35:52,839
hooks we were talking about<font color="#E5E5E5"> the deal</font>

860
00:35:51,039 --> 00:35:55,480
<font color="#CCCCCC">open</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> FasTrak are not relevant</font><font color="#E5E5E5"> in</font>

861
00:35:52,839 --> 00:35:57,069
this last version so it complicates

862
00:35:55,480 --> 00:35:59,740
<font color="#E5E5E5">exploitation maybe we need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find other</font>

863
00:35:57,069 --> 00:36:02,680
paths to trigger these hooks but the

864
00:35:59,740 --> 00:36:07,269
hooks are still there<font color="#CCCCCC"> just not the way</font>

865
00:36:02,680 --> 00:36:08,919
to trigger them yeah and<font color="#E5E5E5"> last thing is</font>

866
00:36:07,269 --> 00:36:10,180
the problems with the<font color="#CCCCCC"> civic thing right</font>

867
00:36:08,920 --> 00:36:12,130
you can<font color="#CCCCCC"> overwrite</font><font color="#E5E5E5"> to return</font><font color="#CCCCCC"> addresses</font>

868
00:36:10,180 --> 00:36:13,750
<font color="#E5E5E5">you can</font><font color="#CCCCCC"> override three tables you cannot</font>

869
00:36:12,130 --> 00:36:18,309
<font color="#E5E5E5">write function pointers</font><font color="#CCCCCC"> all the things</font>

870
00:36:13,750 --> 00:36:22,809
we love<font color="#CCCCCC"> so yeah here is bonus the</font><font color="#E5E5E5"> setup</font>

871
00:36:18,309 --> 00:36:25,180
<font color="#E5E5E5">this is how I approach</font><font color="#CCCCCC"> CTFs and this is</font>

872
00:36:22,809 --> 00:36:29,440
code so I'll demonstrate with the<font color="#CCCCCC"> 300</font>

873
00:36:25,180 --> 00:36:31,629
challenge<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> LES</font><font color="#E5E5E5"> CCC</font><font color="#CCCCCC"> and many</font>

874
00:36:29,440 --> 00:36:33,609
times when you're<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have your victim</font>

875
00:36:31,630 --> 00:36:35,980
program it's not<font color="#E5E5E5"> the same version as the</font>

876
00:36:33,609 --> 00:36:38,920
<font color="#E5E5E5">leap C installed on your laptop so</font><font color="#CCCCCC"> you</font>

877
00:36:35,980 --> 00:36:40,869
<font color="#E5E5E5">can use the LD preload hook to actually</font>

878
00:36:38,920 --> 00:36:42,460
load<font color="#E5E5E5"> the different version here you can</font>

879
00:36:40,869 --> 00:36:44,410
see I'm using<font color="#E5E5E5"> the pone library which is</font>

880
00:36:42,460 --> 00:36:46,930
awesome<font color="#CCCCCC"> and thanks to the people who</font>

881
00:36:44,410 --> 00:36:49,328
wrote it<font color="#E5E5E5"> and you see I'm loading a</font>

882
00:36:46,930 --> 00:36:50,680
different leap see<font color="#CCCCCC"> to day</font><font color="#E5E5E5"> 300 binary</font>

883
00:36:49,329 --> 00:36:54,519
<font color="#E5E5E5">this is the</font><font color="#CCCCCC"> freehand</font><font color="#E5E5E5"> challenge is how I</font>

884
00:36:50,680 --> 00:36:55,930
started<font color="#E5E5E5"> using the LD preload hook if you</font>

885
00:36:54,519 --> 00:36:57,669
don't have to leap see you<font color="#E5E5E5"> don't know</font>

886
00:36:55,930 --> 00:37:01,118
which<font color="#E5E5E5"> live C is</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> you can use this</font>

887
00:36:57,670 --> 00:37:03,039
website it's a leap<font color="#E5E5E5"> C database which</font><font color="#CCCCCC"> you</font>

888
00:37:01,119 --> 00:37:05,200
give<font color="#CCCCCC"> these significant bits</font><font color="#E5E5E5"> of some</font>

889
00:37:03,039 --> 00:37:09,069
symbols you know and it gives you a list

890
00:37:05,200 --> 00:37:10,808
<font color="#E5E5E5">of possible version of flipsies and</font>

891
00:37:09,069 --> 00:37:12,819
sometimes the<font color="#CCCCCC"> leaves in the</font><font color="#E5E5E5"> loader</font><font color="#CCCCCC"> are</font>

892
00:37:10,809 --> 00:37:14,109
interdependent they didn't<font color="#CCCCCC"> up don't</font><font color="#E5E5E5"> play</font>

893
00:37:12,819 --> 00:37:16,150
nice with each other and then<font color="#CCCCCC"> you really</font>

894
00:37:14,109 --> 00:37:19,078
have to set up<font color="#E5E5E5"> a VM or maybe someone has</font>

895
00:37:16,150 --> 00:37:22,690
a<font color="#E5E5E5"> better solution not me</font>

896
00:37:19,079 --> 00:37:25,359
so yeah<font color="#E5E5E5"> next well when you're trying to</font>

897
00:37:22,690 --> 00:37:27,849
exploit<font color="#CCCCCC"> gypsy malloc you have to leave C</font>

898
00:37:25,359 --> 00:37:30,308
and you want to debug it so you want to

899
00:37:27,849 --> 00:37:32,170
have symbols<font color="#E5E5E5"> and many times I mean</font>

900
00:37:30,309 --> 00:37:34,259
nobody compiler only<font color="#CCCCCC"> see or using</font>

901
00:37:32,170 --> 00:37:36,819
distribution Linux distributions<font color="#E5E5E5"> and</font>

902
00:37:34,259 --> 00:37:40,420
let's say you were using<font color="#CCCCCC"> Lipsy from</font>

903
00:37:36,819 --> 00:37:42,160
distribution<font color="#CCCCCC"> you go</font><font color="#E5E5E5"> into 1710 so the</font>

904
00:37:40,420 --> 00:37:43,599
<font color="#E5E5E5">distributions has symbols right you can</font>

905
00:37:42,160 --> 00:37:45,308
<font color="#E5E5E5">just download the packages of symbols</font>

906
00:37:43,599 --> 00:37:48,130
<font color="#E5E5E5">and unpack them and load them</font><font color="#CCCCCC"> into your</font>

907
00:37:45,309 --> 00:37:50,769
<font color="#CCCCCC">GTP so this is how you load them into</font>

908
00:37:48,130 --> 00:37:53,289
<font color="#CCCCCC">Twitter is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> add symbol at simple file</font>

909
00:37:50,769 --> 00:37:55,180
command<font color="#E5E5E5"> however</font><font color="#CCCCCC"> the reason</font><font color="#E5E5E5"> and knowing</font>

910
00:37:53,289 --> 00:37:55,930
bug in this<font color="#E5E5E5"> command so this is my code</font>

911
00:37:55,180 --> 00:37:58,720
<font color="#CCCCCC">too</font>

912
00:37:55,930 --> 00:38:01,270
actually explicitly<font color="#E5E5E5"> tell</font><font color="#CCCCCC"> GTB</font><font color="#E5E5E5"> and for</font>

913
00:37:58,720 --> 00:38:03,220
every<font color="#E5E5E5"> section where the symbols are you</font>

914
00:38:01,270 --> 00:38:05,140
can just<font color="#CCCCCC"> copy this code and you seamless</font>

915
00:38:03,220 --> 00:38:07,270
line I'm attaching to the debugger and

916
00:38:05,140 --> 00:38:12,700
<font color="#E5E5E5">giving it the command</font><font color="#CCCCCC"> to load the</font><font color="#E5E5E5"> single</font>

917
00:38:07,270 --> 00:38:15,330
file<font color="#E5E5E5"> and</font><font color="#CCCCCC"> sorcerer's is very similar</font><font color="#E5E5E5"> leap</font>

918
00:38:12,700 --> 00:38:18,640
<font color="#CCCCCC">sees part of distributions</font><font color="#E5E5E5"> say 1710 and</font>

919
00:38:15,330 --> 00:38:20,560
distributions have<font color="#E5E5E5"> their source files</font>

920
00:38:18,640 --> 00:38:22,120
also<font color="#E5E5E5"> packed nicely and you can just</font>

921
00:38:20,560 --> 00:38:24,670
download this<font color="#E5E5E5"> so this is the example for</font>

922
00:38:22,120 --> 00:38:26,830
1710<font color="#E5E5E5"> this is the source code and</font><font color="#CCCCCC"> you can</font>

923
00:38:24,670 --> 00:38:28,720
<font color="#E5E5E5">load it</font><font color="#CCCCCC"> - GTB with the substitute path</font>

924
00:38:26,830 --> 00:38:31,750
command<font color="#E5E5E5"> which tells you to be where to</font>

925
00:38:28,720 --> 00:38:33,250
look for the<font color="#E5E5E5"> original source</font><font color="#CCCCCC"> code and if</font>

926
00:38:31,750 --> 00:38:34,810
you want to know where it is<font color="#CCCCCC"> currently</font>

927
00:38:33,250 --> 00:38:36,820
looking<font color="#E5E5E5"> so you can do their substitute</font>

928
00:38:34,810 --> 00:38:39,430
path<font color="#CCCCCC"> command correctly</font><font color="#E5E5E5"> you can use the</font>

929
00:38:36,820 --> 00:38:42,730
info source command<font color="#E5E5E5"> to find where it</font><font color="#CCCCCC"> is</font>

930
00:38:39,430 --> 00:38:44,049
<font color="#E5E5E5">currently looking so that's putting</font><font color="#CCCCCC"> it</font>

931
00:38:42,730 --> 00:38:46,030
all together you<font color="#E5E5E5"> can just copied it from</font>

932
00:38:44,050 --> 00:38:51,960
copied from<font color="#E5E5E5"> my github of this</font>

933
00:38:46,030 --> 00:38:54,760
presentation and<font color="#CCCCCC"> this is it quite nice</font>

934
00:38:51,960 --> 00:38:55,240
that's it<font color="#CCCCCC"> time</font><font color="#E5E5E5"> for questions if you're</font>

935
00:38:54,760 --> 00:38:56,860
not<font color="#CCCCCC"> conning</font><font color="#E5E5E5"> me</font>

936
00:38:55,240 --> 00:39:01,270
in<font color="#E5E5E5"> the end of the presentation there</font><font color="#CCCCCC"> are</font>

937
00:38:56,860 --> 00:39:21,850
like lots of references<font color="#E5E5E5"> to read and yeah</font>

938
00:39:01,270 --> 00:39:24,520
any questions<font color="#CCCCCC"> do you want me to put the</font>

939
00:39:21,850 --> 00:39:28,560
link<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> let's put the link again so</font>

940
00:39:24,520 --> 00:39:34,480
you can like<font color="#E5E5E5"> this</font>

941
00:39:28,560 --> 00:39:34,480
[Music]

942
00:39:57,250 --> 00:40:10,070
yes<font color="#E5E5E5"> the guy over there thank you</font><font color="#CCCCCC"> very</font>

943
00:40:09,109 --> 00:40:12,850
<font color="#E5E5E5">much</font>

944
00:40:10,070 --> 00:40:16,070
did you try to attack any<font color="#CCCCCC"> other lip</font><font color="#E5E5E5"> see</font>

945
00:40:12,850 --> 00:40:18,230
<font color="#E5E5E5">you see lip see muscle or the windows</font>

946
00:40:16,070 --> 00:40:32,300
<font color="#CCCCCC">lips II know they're quite different</font>

947
00:40:18,230 --> 00:40:33,950
<font color="#CCCCCC">they're actually very different windows</font>

948
00:40:32,300 --> 00:40:37,130
windows currently have this cookies

949
00:40:33,950 --> 00:40:38,450
right that you really need<font color="#E5E5E5"> to check the</font>

950
00:40:37,130 --> 00:40:40,790
<font color="#E5E5E5">integrity of all pointers when you're</font>

951
00:40:38,450 --> 00:40:43,009
inserting and removing from delese so I

952
00:40:40,790 --> 00:40:44,779
<font color="#E5E5E5">don't know if any attacks against the</font>

953
00:40:43,010 --> 00:40:46,490
<font color="#CCCCCC">heap directly would work you can only do</font>

954
00:40:44,780 --> 00:40:48,890
like the normal use after<font color="#CCCCCC"> freeze</font><font color="#E5E5E5"> that</font>

955
00:40:46,490 --> 00:40:51,649
you hope to get the chunk that<font color="#E5E5E5"> is still</font>

956
00:40:48,890 --> 00:40:53,629
<font color="#E5E5E5">in use and overwrite its data but it's</font>

957
00:40:51,650 --> 00:40:56,740
directly against the<font color="#E5E5E5"> heap implementation</font>

958
00:40:53,630 --> 00:41:00,980
itself<font color="#E5E5E5"> I'm not</font><font color="#CCCCCC"> sure it</font><font color="#E5E5E5"> would be as easy</font>

959
00:40:56,740 --> 00:41:02,779
yes<font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> for your</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> I'd like to</font>

960
00:41:00,980 --> 00:41:05,960
know how<font color="#CCCCCC"> stability</font><font color="#E5E5E5"> the lips</font>

961
00:41:02,780 --> 00:41:09,530
implementations or<font color="#E5E5E5"> the data structures</font>

962
00:41:05,960 --> 00:41:13,940
and algorithms<font color="#E5E5E5"> the does a change on a</font>

963
00:41:09,530 --> 00:41:17,930
freaking freaking basis so they don't

964
00:41:13,940 --> 00:41:20,630
<font color="#E5E5E5">change very frequently</font><font color="#CCCCCC"> the picture that</font>

965
00:41:17,930 --> 00:41:22,520
<font color="#E5E5E5">I showed was from GFC I think version 3</font>

966
00:41:20,630 --> 00:41:26,869
or something<font color="#CCCCCC"> like that they add</font>

967
00:41:22,520 --> 00:41:29,660
<font color="#E5E5E5">different optimizations like</font><font color="#CCCCCC"> T cache</font>

968
00:41:26,869 --> 00:41:31,400
that was recently added<font color="#E5E5E5"> or the</font><font color="#CCCCCC"> large</font>

969
00:41:29,660 --> 00:41:34,100
<font color="#CCCCCC">greens that</font><font color="#E5E5E5"> are now they're like kind</font><font color="#CCCCCC"> of</font>

970
00:41:31,400 --> 00:41:36,500
doubly linked in a skip list way<font color="#E5E5E5"> so it</font>

971
00:41:34,100 --> 00:41:38,330
was an improvement but<font color="#CCCCCC"> the basic data</font>

972
00:41:36,500 --> 00:41:42,820
structures remained as they were since

973
00:41:38,330 --> 00:41:47,090
2001<font color="#CCCCCC"> ok the attack</font><font color="#E5E5E5"> from 2001 still works</font>

974
00:41:42,820 --> 00:41:49,280
in the upcoming<font color="#E5E5E5"> article</font><font color="#CCCCCC"> I will</font><font color="#E5E5E5"> release</font>

975
00:41:47,090 --> 00:41:52,490
app you see that can work against<font color="#E5E5E5"> all</font>

976
00:41:49,280 --> 00:41:54,020
versions of GFC the same code works on

977
00:41:52,490 --> 00:41:58,520
all them it's<font color="#E5E5E5"> quite simple code actually</font>

978
00:41:54,020 --> 00:42:02,120
32-bit 64-bit<font color="#CCCCCC"> whether it's</font><font color="#E5E5E5"> juice</font>

979
00:41:58,520 --> 00:42:21,050
version<font color="#E5E5E5"> 2 3 or</font><font color="#CCCCCC"> 2</font><font color="#E5E5E5"> 27 they all work</font><font color="#CCCCCC"> so</font>

980
00:42:02,120 --> 00:42:21,620
they're<font color="#E5E5E5"> quite stable</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we still have 15</font>

981
00:42:21,050 --> 00:42:28,960
minutes

982
00:42:21,620 --> 00:42:31,970
oh<font color="#CCCCCC"> okay do a mute dance yeah it was it I</font>

983
00:42:28,960 --> 00:42:33,710
thought I<font color="#E5E5E5"> don't have too much time and</font>

984
00:42:31,970 --> 00:42:36,049
now I save more<font color="#CCCCCC"> than I expected</font>

985
00:42:33,710 --> 00:42:43,130
so yeah any other questions not<font color="#E5E5E5"> related</font>

986
00:42:36,050 --> 00:42:47,450
<font color="#CCCCCC">to this talk specifically yeah you can</font>

987
00:42:43,130 --> 00:42:49,640
you can follow the link like press

988
00:42:47,450 --> 00:42:52,129
escape you'll get<font color="#E5E5E5"> a nice overview of the</font>

989
00:42:49,640 --> 00:42:56,210
<font color="#CCCCCC">presentation oops so you can just go to</font>

990
00:42:52,130 --> 00:43:00,200
that<font color="#E5E5E5"> slide open it and you can what</font>

991
00:42:56,210 --> 00:43:03,530
<font color="#E5E5E5">isn't work so and then you get</font><font color="#CCCCCC"> marked</font>

992
00:43:00,200 --> 00:43:05,930
<font color="#CCCCCC">down</font><font color="#E5E5E5"> so you can read let's see it's a</font>

993
00:43:03,530 --> 00:43:07,700
bit slow<font color="#E5E5E5"> but</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so you can just</font><font color="#CCCCCC"> for</font>

994
00:43:05,930 --> 00:43:11,089
example<font color="#CCCCCC"> close</font><font color="#E5E5E5"> to the attacks chapter and</font>

995
00:43:07,700 --> 00:43:12,680
<font color="#CCCCCC">you can read everything in markdown you</font>

996
00:43:11,090 --> 00:43:16,190
don't have to<font color="#CCCCCC"> actually render</font><font color="#E5E5E5"> the</font>

997
00:43:12,680 --> 00:43:17,419
presentation so it's this<font color="#CCCCCC"> is why I hope</font>

998
00:43:16,190 --> 00:43:19,670
it<font color="#E5E5E5"> would serve as a</font><font color="#CCCCCC"> reference</font><font color="#E5E5E5"> because</font>

999
00:43:17,420 --> 00:43:22,370
it's really<font color="#CCCCCC"> easy to read</font><font color="#E5E5E5"> and this was</font>

1000
00:43:19,670 --> 00:43:24,710
actually<font color="#E5E5E5"> hard work to</font><font color="#CCCCCC"> make it</font><font color="#E5E5E5"> both</font>

1001
00:43:22,370 --> 00:43:26,540
markdown<font color="#E5E5E5"> and a</font><font color="#CCCCCC"> presentation</font><font color="#E5E5E5"> and you know</font>

1002
00:43:24,710 --> 00:43:28,460
perfect<font color="#E5E5E5"> the presentation itself is not</font>

1003
00:43:26,540 --> 00:43:30,680
perfect but then you can really just

1004
00:43:28,460 --> 00:43:32,450
<font color="#CCCCCC">markdown as well so it's one it was one</font>

1005
00:43:30,680 --> 00:43:38,839
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the things I really</font><font color="#CCCCCC"> wanted to happen</font>

1006
00:43:32,450 --> 00:43:41,120
<font color="#E5E5E5">in using this platform let's go okay so</font>

1007
00:43:38,840 --> 00:43:41,900
if<font color="#E5E5E5"> we don't have any more questions we</font>

1008
00:43:41,120 --> 00:43:56,350
can stop here

1009
00:43:41,900 --> 00:43:59,510
oh wait<font color="#E5E5E5"> there is a what a surprise so</font>

1010
00:43:56,350 --> 00:44:03,470
those tricks are very useful for CTF but

1011
00:43:59,510 --> 00:44:06,890
do you have an idea<font color="#E5E5E5"> how frequent it's</font>

1012
00:44:03,470 --> 00:44:10,609
useful in weird programs<font color="#E5E5E5"> but because I</font>

1013
00:44:06,890 --> 00:44:16,460
feel like there was more<font color="#E5E5E5"> just</font>

1014
00:44:10,609 --> 00:44:21,259
people froze<font color="#E5E5E5"> easier overflow of object</font>

1015
00:44:16,460 --> 00:44:23,499
in where<font color="#CCCCCC"> Express but do you use</font><font color="#E5E5E5"> programs</font>

1016
00:44:21,259 --> 00:44:27,440
<font color="#E5E5E5">so a year ago I found a vulnerability</font>

1017
00:44:23,499 --> 00:44:29,419
just<font color="#E5E5E5"> the buffer overflow</font><font color="#CCCCCC"> in VLC</font><font color="#E5E5E5"> when</font>

1018
00:44:27,440 --> 00:44:31,880
<font color="#CCCCCC">they're rendering the</font><font color="#E5E5E5"> not in the</font>

1019
00:44:29,420 --> 00:44:34,039
<font color="#E5E5E5">rendering but in parsing the subtitles</font>

1020
00:44:31,880 --> 00:44:36,470
<font color="#E5E5E5">so the</font><font color="#CCCCCC"> participles</font><font color="#E5E5E5"> and if they had a</font>

1021
00:44:34,039 --> 00:44:38,869
very stupid<font color="#E5E5E5"> buffer overflow but I could</font>

1022
00:44:36,470 --> 00:44:41,299
not right now<font color="#E5E5E5"> bytes</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is how I got</font>

1023
00:44:38,869 --> 00:44:43,700
<font color="#E5E5E5">in to</font><font color="#CCCCCC"> see mark in the first place I</font>

1024
00:44:41,299 --> 00:44:45,980
<font color="#E5E5E5">wasn't intending to but this was the</font>

1025
00:44:43,700 --> 00:44:47,149
vulnerability<font color="#E5E5E5"> so it exists I believe</font>

1026
00:44:45,980 --> 00:44:49,160
there<font color="#E5E5E5"> are more these</font><font color="#CCCCCC"> kind of</font>

1027
00:44:47,150 --> 00:44:50,960
vulnerabilities in VLC specifically and

1028
00:44:49,160 --> 00:44:54,529
they just started<font color="#E5E5E5"> but back bounties</font>

1029
00:44:50,960 --> 00:44:56,239
so I recommend<font color="#E5E5E5"> looking at it and yeah</font>

1030
00:44:54,529 --> 00:44:59,390
there were vulnerabilities in<font color="#E5E5E5"> the pseudo</font>

1031
00:44:56,239 --> 00:45:03,109
application<font color="#CCCCCC"> so it was quite common in</font>

1032
00:44:59,390 --> 00:45:04,788
real life so yeah<font color="#E5E5E5"> I mean I recommend</font>

1033
00:45:03,109 --> 00:45:06,920
everyone<font color="#E5E5E5"> move</font><font color="#CCCCCC"> to rust or something you</font>

1034
00:45:04,789 --> 00:45:27,680
know some memory safe<font color="#CCCCCC"> language but it's</font>

1035
00:45:06,920 --> 00:45:29,299
still common enough thank you

1036
00:45:27,680 --> 00:45:31,819
so you said you are<font color="#E5E5E5"> not</font><font color="#CCCCCC"> going to</font>

1037
00:45:29,299 --> 00:45:33,589
<font color="#E5E5E5">investigate for</font><font color="#CCCCCC"> lfh but do you have any</font>

1038
00:45:31,819 --> 00:45:37,058
plan<font color="#CCCCCC"> for doing</font><font color="#E5E5E5"> a resource for</font><font color="#CCCCCC"> chair log</font>

1039
00:45:33,589 --> 00:45:40,249
geolock for other like using<font color="#E5E5E5"> firefox so</font>

1040
00:45:37,059 --> 00:45:44,539
are you<font color="#E5E5E5"> planning to to do some research</font>

1041
00:45:40,249 --> 00:45:45,618
<font color="#CCCCCC">on it so just so I think</font><font color="#E5E5E5"> it depends on</font>

1042
00:45:44,539 --> 00:45:46,670
the vulnerabilities that<font color="#CCCCCC"> we'll be</font>

1043
00:45:45,619 --> 00:45:49,640
looking<font color="#E5E5E5"> for in the future</font>

1044
00:45:46,670 --> 00:45:51,410
I'm owner ability researcher so it

1045
00:45:49,640 --> 00:45:53,839
depends on<font color="#E5E5E5"> what I would find I'm driven</font>

1046
00:45:51,410 --> 00:45:56,899
<font color="#E5E5E5">by I wouldn't say by chance but by work</font>

1047
00:45:53,839 --> 00:45:59,480
mostly so<font color="#E5E5E5"> VLC is how I started with with</font>

1048
00:45:56,900 --> 00:46:02,749
<font color="#CCCCCC">gypsy malloc</font><font color="#E5E5E5"> and if I find one a Realty</font>

1049
00:45:59,480 --> 00:46:04,369
<font color="#E5E5E5">in that would happen to</font><font color="#CCCCCC"> be in the other</font>

1050
00:46:02,749 --> 00:46:07,399
implementations I would<font color="#E5E5E5"> look at them but</font>

1051
00:46:04,369 --> 00:46:11,299
not I don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> any concrete plans on</font>

1052
00:46:07,400 --> 00:46:13,130
<font color="#E5E5E5">researching them but I do gonna play the</font>

1053
00:46:11,299 --> 00:46:16,910
CTF tomorrow high<font color="#CCCCCC"> over</font><font color="#E5E5E5"> in two days I</font>

1054
00:46:13,130 --> 00:46:18,559
hope so<font color="#E5E5E5"> if there will be vulnerabilities</font>

1055
00:46:16,910 --> 00:46:21,788
in<font color="#CCCCCC"> je malloc</font><font color="#E5E5E5"> that I would need</font><font color="#CCCCCC"> to</font>

1056
00:46:18,559 --> 00:46:21,789
exploit<font color="#E5E5E5"> I was started reading</font><font color="#CCCCCC"> about it</font>

1057
00:46:31,340 --> 00:46:36,900
<font color="#E5E5E5">okay so yeah I think we can stop here</font>

1058
00:46:34,800 --> 00:46:37,230
okay thank you<font color="#E5E5E5"> very much</font><font color="#CCCCCC"> you can have</font><font color="#E5E5E5"> a</font>

1059
00:46:36,900 --> 00:46:42,280
lunch

1060
00:46:37,230 --> 00:46:42,280
[Applause]

