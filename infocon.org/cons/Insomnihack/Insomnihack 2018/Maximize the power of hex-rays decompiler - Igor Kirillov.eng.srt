1
00:00:06,810 --> 00:00:10,570
[Music]

2
00:00:13,600 --> 00:00:18,590
hello everyone

3
00:00:15,230 --> 00:00:21,110
I work in<font color="#CCCCCC"> MBT company where I'm doing</font>

4
00:00:18,590 --> 00:00:23,840
security research<font color="#CCCCCC"> SL devices and</font>

5
00:00:21,110 --> 00:00:26,240
programming we are developing<font color="#E5E5E5"> the</font>

6
00:00:23,840 --> 00:00:29,960
prevention solution made specifically

7
00:00:26,240 --> 00:00:33,350
for smart device devices<font color="#E5E5E5"> today</font><font color="#CCCCCC"> I am</font>

8
00:00:29,960 --> 00:00:36,949
<font color="#E5E5E5">introducing my plugin for Ida Pro</font><font color="#CCCCCC"> X ray</font>

9
00:00:33,350 --> 00:00:42,320
<font color="#CCCCCC">spy tools and I hope you will</font><font color="#E5E5E5"> find it as</font>

10
00:00:36,949 --> 00:00:44,059
useful as I do<font color="#E5E5E5"> we</font><font color="#CCCCCC"> are going to talk</font>

11
00:00:42,320 --> 00:00:46,460
about<font color="#E5E5E5"> reverse engineering challenges</font>

12
00:00:44,059 --> 00:00:48,769
about which tools there are<font color="#E5E5E5"> to overcome</font>

13
00:00:46,460 --> 00:00:52,070
those<font color="#E5E5E5"> challenges and then I show what</font>

14
00:00:48,770 --> 00:00:54,950
new is brought by my tool and how it can

15
00:00:52,070 --> 00:00:57,500
be helpful<font color="#CCCCCC"> I'll tell you about its</font>

16
00:00:54,950 --> 00:01:02,149
<font color="#E5E5E5">features</font><font color="#CCCCCC"> and how to</font><font color="#E5E5E5"> apply them in real</font>

17
00:00:57,500 --> 00:01:04,339
<font color="#E5E5E5">life use cases also I will introduce API</font>

18
00:01:02,149 --> 00:01:09,190
my<font color="#CCCCCC"> plugin offers and finally speak about</font>

19
00:01:04,339 --> 00:01:12,050
my plans for<font color="#E5E5E5"> developing it in the future</font>

20
00:01:09,190 --> 00:01:14,060
<font color="#CCCCCC">as reverse engineers we must keep a lot</font>

21
00:01:12,050 --> 00:01:16,759
of<font color="#CCCCCC"> information in our brain when we're</font>

22
00:01:14,060 --> 00:01:19,429
doing our<font color="#CCCCCC"> work</font><font color="#E5E5E5"> understanding</font><font color="#CCCCCC"> what a</font>

23
00:01:16,759 --> 00:01:22,220
piece<font color="#E5E5E5"> of code does requires a great</font>

24
00:01:19,429 --> 00:01:23,869
amount of short-term<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> and to me it</font>

25
00:01:22,220 --> 00:01:27,800
is better to store that information

26
00:01:23,869 --> 00:01:30,910
inside<font color="#E5E5E5"> instruments usually we work with</font>

27
00:01:27,800 --> 00:01:33,410
disassemblers and<font color="#CCCCCC"> D compilers and</font>

28
00:01:30,910 --> 00:01:35,390
disassemblers allow us to store

29
00:01:33,410 --> 00:01:38,780
variables names create new structures

30
00:01:35,390 --> 00:01:41,000
types and<font color="#CCCCCC"> turn numbers contained</font><font color="#E5E5E5"> into</font>

31
00:01:38,780 --> 00:01:43,310
<font color="#E5E5E5">the simple instructions into structure</font>

32
00:01:41,000 --> 00:01:51,200
<font color="#CCCCCC">members however</font><font color="#E5E5E5"> these assemblers have</font>

33
00:01:43,310 --> 00:01:53,869
too<font color="#E5E5E5"> many details</font><font color="#CCCCCC"> ok however these</font>

34
00:01:51,200 --> 00:01:57,770
assemblers have too<font color="#E5E5E5"> many details and to</font>

35
00:01:53,869 --> 00:02:01,429
do<font color="#CCCCCC"> modifications</font><font color="#E5E5E5"> using the output</font><font color="#CCCCCC"> is too</font>

36
00:01:57,770 --> 00:02:03,050
tedious and laborious the compilers

37
00:02:01,429 --> 00:02:05,630
<font color="#E5E5E5">create she likes you to</font><font color="#CCCCCC"> quote</font>

38
00:02:03,050 --> 00:02:07,550
<font color="#CCCCCC">abstraction over</font><font color="#E5E5E5"> disassembly unlike</font>

39
00:02:05,630 --> 00:02:10,609
other products<font color="#CCCCCC"> Hicks erase the compiler</font>

40
00:02:07,550 --> 00:02:12,680
allows us modifications of<font color="#E5E5E5"> its out so</font>

41
00:02:10,610 --> 00:02:15,230
it's a lot simpler to<font color="#E5E5E5"> do reverse</font>

42
00:02:12,680 --> 00:02:17,150
<font color="#E5E5E5">engineering it</font><font color="#CCCCCC"> is possible to transform</font>

43
00:02:15,230 --> 00:02:19,939
<font color="#E5E5E5">fix</font><font color="#CCCCCC"> raise output to representation</font>

44
00:02:17,150 --> 00:02:20,420
natural to<font color="#E5E5E5"> a programmer and it's far</font>

45
00:02:19,939 --> 00:02:22,549
more

46
00:02:20,420 --> 00:02:27,140
to accomplish<font color="#CCCCCC"> when working with the</font>

47
00:02:22,550 --> 00:02:29,270
<font color="#E5E5E5">disassembler besides those</font><font color="#CCCCCC"> modifications</font>

48
00:02:27,140 --> 00:02:33,799
can<font color="#CCCCCC"> be applied faster than through</font><font color="#E5E5E5"> this</font>

49
00:02:29,270 --> 00:02:36,130
<font color="#E5E5E5">assembler but</font><font color="#CCCCCC"> hicks race decompiler is</font>

50
00:02:33,800 --> 00:02:38,930
not devoid of drawbacks

51
00:02:36,130 --> 00:02:41,209
sometimes it produces errors by skipping

52
00:02:38,930 --> 00:02:42,500
some branches or being unable to

53
00:02:41,209 --> 00:02:46,040
decompile at all

54
00:02:42,500 --> 00:02:49,400
some functions<font color="#CCCCCC"> it may</font><font color="#E5E5E5"> mix up sienten and</font>

55
00:02:46,040 --> 00:02:53,359
<font color="#CCCCCC">sine types and so it</font><font color="#E5E5E5"> requires checking</font>

56
00:02:49,400 --> 00:02:55,900
<font color="#E5E5E5">up with the disassembler also its output</font>

57
00:02:53,360 --> 00:02:58,340
may be very complex

58
00:02:55,900 --> 00:03:00,200
<font color="#E5E5E5">although the compilers are quite useful</font>

59
00:02:58,340 --> 00:03:04,120
they<font color="#E5E5E5"> are not</font><font color="#CCCCCC"> helpful in understanding</font>

60
00:03:00,200 --> 00:03:06,768
data or<font color="#E5E5E5"> organization I suppose that</font>

61
00:03:04,120 --> 00:03:09,470
<font color="#CCCCCC">understanding how data entered</font><font color="#E5E5E5"> into the</font>

62
00:03:06,769 --> 00:03:11,660
program<font color="#CCCCCC"> and how they modified the</font><font color="#E5E5E5"> Orion</font>

63
00:03:09,470 --> 00:03:15,380
runtime is a<font color="#E5E5E5"> cornerstone of reverse</font>

64
00:03:11,660 --> 00:03:17,810
engineering<font color="#E5E5E5"> to understand it we</font><font color="#CCCCCC"> usually</font>

65
00:03:15,380 --> 00:03:21,019
have to take two steps<font color="#E5E5E5"> first extract</font>

66
00:03:17,810 --> 00:03:23,480
<font color="#E5E5E5">data types</font><font color="#CCCCCC"> interesting for our purposes</font>

67
00:03:21,019 --> 00:03:27,170
and second understand how they are

68
00:03:23,480 --> 00:03:29,780
organized<font color="#CCCCCC"> hex race is not of much help</font>

69
00:03:27,170 --> 00:03:33,040
to<font color="#E5E5E5"> us and it's out what we see just</font>

70
00:03:29,780 --> 00:03:36,230
<font color="#E5E5E5">variables castes offsets or indices</font>

71
00:03:33,040 --> 00:03:39,019
something something similar to structure

72
00:03:36,230 --> 00:03:42,738
but not<font color="#CCCCCC"> something that can</font><font color="#E5E5E5"> be really</font>

73
00:03:39,019 --> 00:03:45,079
used as it is also<font color="#E5E5E5"> when we research</font>

74
00:03:42,739 --> 00:03:47,480
object-oriented<font color="#E5E5E5"> code we have virtual</font>

75
00:03:45,079 --> 00:03:52,790
tables and virtual functions which make

76
00:03:47,480 --> 00:03:54,798
the picture more<font color="#CCCCCC"> obscure here you can</font>

77
00:03:52,790 --> 00:03:57,200
see an<font color="#CCCCCC"> example of an object-oriented</font>

78
00:03:54,799 --> 00:03:59,030
code and it is not easy<font color="#E5E5E5"> to understand</font>

79
00:03:57,200 --> 00:04:04,130
what's<font color="#CCCCCC"> going</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> here even</font><font color="#E5E5E5"> after looking</font>

80
00:03:59,030 --> 00:04:07,579
<font color="#E5E5E5">into it for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> while however</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are</font>

81
00:04:04,130 --> 00:04:09,680
some solutions<font color="#CCCCCC"> to this problems such as</font>

82
00:04:07,579 --> 00:04:14,299
<font color="#E5E5E5">well-known</font><font color="#CCCCCC"> plug in fixed arrays code</font>

83
00:04:09,680 --> 00:04:16,489
<font color="#E5E5E5">Explorer by Alex</font><font color="#CCCCCC"> matrosov</font><font color="#E5E5E5"> among many</font>

84
00:04:14,299 --> 00:04:19,880
features that<font color="#CCCCCC"> it has</font><font color="#E5E5E5"> it allows to find</font>

85
00:04:16,488 --> 00:04:22,789
<font color="#E5E5E5">and create virtual tables also it helps</font>

86
00:04:19,880 --> 00:04:26,240
<font color="#CCCCCC">to automatically reconstruct structures</font>

87
00:04:22,789 --> 00:04:29,419
but within<font color="#E5E5E5"> boundaries of one function</font>

88
00:04:26,240 --> 00:04:32,760
<font color="#E5E5E5">body</font><font color="#CCCCCC"> if you have a big structure then</font>

89
00:04:29,419 --> 00:04:35,219
<font color="#CCCCCC">the results</font><font color="#E5E5E5"> will</font><font color="#CCCCCC"> be far from complete</font>

90
00:04:32,760 --> 00:04:39,170
and we cannot<font color="#E5E5E5"> affect the creation</font>

91
00:04:35,220 --> 00:04:42,450
<font color="#E5E5E5">process in in any way there was such</font>

92
00:04:39,170 --> 00:04:44,580
<font color="#E5E5E5">plug-in</font><font color="#CCCCCC"> as six</font><font color="#E5E5E5"> race tools the great</font>

93
00:04:42,450 --> 00:04:46,890
thing about it was<font color="#E5E5E5"> that it allowed an</font>

94
00:04:44,580 --> 00:04:49,650
interactive reconstruction<font color="#E5E5E5"> there is a</font>

95
00:04:46,890 --> 00:04:51,479
good skin structure pointers and collect

96
00:04:49,650 --> 00:04:54,030
information<font color="#E5E5E5"> about potential structure</font>

97
00:04:51,480 --> 00:04:57,330
members<font color="#E5E5E5"> and then turned that information</font>

98
00:04:54,030 --> 00:05:00,780
into structure declaration<font color="#E5E5E5"> however the</font>

99
00:04:57,330 --> 00:05:04,260
author stopped developing<font color="#E5E5E5"> it for the new</font>

100
00:05:00,780 --> 00:05:07,830
versions of<font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> and my</font><font color="#CCCCCC"> plugin is</font>

101
00:05:04,260 --> 00:05:09,990
partially based on this one

102
00:05:07,830 --> 00:05:12,180
both<font color="#CCCCCC"> these tools help to reconstruct</font>

103
00:05:09,990 --> 00:05:15,090
<font color="#E5E5E5">searches however</font><font color="#CCCCCC"> the result they produce</font>

104
00:05:12,180 --> 00:05:17,520
<font color="#E5E5E5">may be far</font><font color="#CCCCCC"> from complete</font><font color="#E5E5E5"> and they don't</font>

105
00:05:15,090 --> 00:05:22,080
help<font color="#CCCCCC"> to understand how structures are</font>

106
00:05:17,520 --> 00:05:24,359
<font color="#E5E5E5">organized another way to deal with</font>

107
00:05:22,080 --> 00:05:26,760
<font color="#E5E5E5">reverse engineering</font><font color="#CCCCCC"> changes is</font><font color="#E5E5E5"> to write</font>

108
00:05:24,360 --> 00:05:29,580
your<font color="#CCCCCC"> own tools</font><font color="#E5E5E5"> since</font><font color="#CCCCCC"> the X rays the</font>

109
00:05:26,760 --> 00:05:32,539
compiler has<font color="#E5E5E5"> huge API and can satisfy</font>

110
00:05:29,580 --> 00:05:36,630
any requirements for<font color="#E5E5E5"> plug-in development</font>

111
00:05:32,540 --> 00:05:40,620
<font color="#E5E5E5">it's the way</font><font color="#CCCCCC"> I chose however</font><font color="#E5E5E5"> I stumbled</font>

112
00:05:36,630 --> 00:05:43,020
upon many issues<font color="#CCCCCC"> fix race is notorious</font>

113
00:05:40,620 --> 00:05:45,810
for poor<font color="#CCCCCC"> documentation and the best way</font>

114
00:05:43,020 --> 00:05:48,060
to find some useful<font color="#E5E5E5"> functions for me was</font>

115
00:05:45,810 --> 00:05:50,570
to search using<font color="#E5E5E5"> regular expressions</font>

116
00:05:48,060 --> 00:05:55,260
<font color="#CCCCCC">through header files</font>

117
00:05:50,570 --> 00:05:57,150
<font color="#CCCCCC">6:3</font><font color="#E5E5E5"> api is constantly changing and it is</font>

118
00:05:55,260 --> 00:05:59,760
<font color="#E5E5E5">normal</font><font color="#CCCCCC"> practice to</font><font color="#E5E5E5"> not give</font>

119
00:05:57,150 --> 00:06:04,039
recommendations<font color="#CCCCCC"> about what</font><font color="#E5E5E5"> new method</font>

120
00:05:59,760 --> 00:06:07,890
methods use instead of deprecated<font color="#E5E5E5"> ones</font>

121
00:06:04,040 --> 00:06:09,870
<font color="#CCCCCC">api is wheels wheels within wheels</font><font color="#E5E5E5"> and</font>

122
00:06:07,890 --> 00:06:12,479
for example<font color="#E5E5E5"> change and type of argument</font>

123
00:06:09,870 --> 00:06:16,440
and one function requires<font color="#CCCCCC"> eight line of</font>

124
00:06:12,480 --> 00:06:19,260
code<font color="#E5E5E5"> and three classes there</font><font color="#CCCCCC"> are some</font>

125
00:06:16,440 --> 00:06:24,180
useful<font color="#CCCCCC"> functions like notify available</font>

126
00:06:19,260 --> 00:06:27,920
for C++ that<font color="#CCCCCC"> allowed to make useful</font>

127
00:06:24,180 --> 00:06:31,620
callbacks<font color="#E5E5E5"> and they it is not existent in</font>

128
00:06:27,920 --> 00:06:34,770
Python bindings<font color="#CCCCCC"> also there are a lot of</font>

129
00:06:31,620 --> 00:06:38,490
<font color="#CCCCCC">obvious things for me is the most</font>

130
00:06:34,770 --> 00:06:41,640
painful was to understand why I the

131
00:06:38,490 --> 00:06:44,550
crust of<font color="#CCCCCC"> C 3</font><font color="#E5E5E5"> modifications</font><font color="#CCCCCC"> I spent</font>

132
00:06:41,640 --> 00:06:46,650
several days<font color="#E5E5E5"> and turns out that I should</font>

133
00:06:44,550 --> 00:06:51,360
<font color="#E5E5E5">have disabled by some garbage</font>

134
00:06:46,650 --> 00:06:53,070
<font color="#CCCCCC">Lecter for this week objects so here is</font>

135
00:06:51,360 --> 00:06:54,780
the picture<font color="#E5E5E5"> you</font><font color="#CCCCCC"> should be ready to</font><font color="#E5E5E5"> see</font>

136
00:06:53,070 --> 00:06:59,310
<font color="#E5E5E5">very often if you decide to start</font>

137
00:06:54,780 --> 00:07:01,289
<font color="#E5E5E5">developing</font><font color="#CCCCCC"> six race Ida Pro plugins and</font>

138
00:06:59,310 --> 00:07:03,900
<font color="#CCCCCC">that was the less</font><font color="#E5E5E5"> I've managed to create</font>

139
00:07:01,289 --> 00:07:06,990
a<font color="#CCCCCC"> solution which helps</font><font color="#E5E5E5"> me quite a lot in</font>

140
00:07:03,900 --> 00:07:11,969
<font color="#E5E5E5">my work</font><font color="#CCCCCC"> and at any</font><font color="#E5E5E5"> hope and I hope it</font>

141
00:07:06,990 --> 00:07:15,090
helps other<font color="#CCCCCC"> people</font><font color="#E5E5E5"> too as I said it is</font>

142
00:07:11,970 --> 00:07:17,639
<font color="#E5E5E5">based on x-rays tools but it has gone</font>

143
00:07:15,090 --> 00:07:21,229
much further and is doing much more<font color="#E5E5E5"> than</font>

144
00:07:17,639 --> 00:07:23,669
<font color="#CCCCCC">the original wall fix raised by tool</font>

145
00:07:21,229 --> 00:07:27,000
it's written<font color="#E5E5E5"> on pure Python so it's</font>

146
00:07:23,669 --> 00:07:29,000
simply<font color="#E5E5E5"> to maintain and develop and it</font>

147
00:07:27,000 --> 00:07:32,610
supports all operating systems

148
00:07:29,000 --> 00:07:35,789
especially<font color="#CCCCCC"> for insomniac</font><font color="#E5E5E5"> I released</font><font color="#CCCCCC"> new</font>

149
00:07:32,610 --> 00:07:40,470
<font color="#CCCCCC">version</font><font color="#E5E5E5"> and today I've updated my</font><font color="#CCCCCC"> github</font>

150
00:07:35,789 --> 00:07:43,590
repository the new<font color="#E5E5E5"> version was mostly</font>

151
00:07:40,470 --> 00:07:45,810
<font color="#E5E5E5">used by me and internally in our company</font>

152
00:07:43,590 --> 00:07:52,979
<font color="#E5E5E5">and it is more advanced</font><font color="#CCCCCC"> than the public</font>

153
00:07:45,810 --> 00:07:56,190
one so let's talk about what<font color="#E5E5E5"> benefits my</font>

154
00:07:52,979 --> 00:07:59,610
plugin gives and we we start with

155
00:07:56,190 --> 00:08:02,430
structure construction imagine that you

156
00:07:59,610 --> 00:08:04,169
have<font color="#CCCCCC"> big or</font><font color="#E5E5E5"> not very big structures that</font>

157
00:08:02,430 --> 00:08:08,340
<font color="#CCCCCC">you want to reconstruct somewhere in</font>

158
00:08:04,169 --> 00:08:11,849
your<font color="#E5E5E5"> code</font><font color="#CCCCCC"> what would you do probably</font>

159
00:08:08,340 --> 00:08:13,679
<font color="#E5E5E5">take a piece</font><font color="#CCCCCC"> of paper</font><font color="#E5E5E5"> or open notepad</font>

160
00:08:11,849 --> 00:08:16,409
and start<font color="#E5E5E5"> digging through the code</font>

161
00:08:13,680 --> 00:08:18,810
searching for references to<font color="#CCCCCC"> different</font>

162
00:08:16,409 --> 00:08:22,139
members<font color="#CCCCCC"> and those references are</font>

163
00:08:18,810 --> 00:08:23,940
represented as offset<font color="#E5E5E5"> or indices after</font>

164
00:08:22,139 --> 00:08:27,930
collecting enough information<font color="#E5E5E5"> you turn</font>

165
00:08:23,940 --> 00:08:30,360
that into<font color="#E5E5E5"> type declaration input the</font>

166
00:08:27,930 --> 00:08:33,089
declaration into local types and then

167
00:08:30,360 --> 00:08:35,789
proceed to<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> the new type to</font>

168
00:08:33,089 --> 00:08:39,240
variables which are pointers to this<font color="#E5E5E5"> new</font>

169
00:08:35,789 --> 00:08:40,740
structure<font color="#E5E5E5"> quite exhausting work I would</font>

170
00:08:39,240 --> 00:08:43,830
<font color="#E5E5E5">say</font><font color="#CCCCCC"> especially if there are a lot of</font>

171
00:08:40,740 --> 00:08:46,230
structures<font color="#E5E5E5"> in your code and now I show</font>

172
00:08:43,830 --> 00:08:49,500
how we<font color="#E5E5E5"> can automate this process by</font>

173
00:08:46,230 --> 00:08:51,660
<font color="#CCCCCC">using the the shallow scan the shallow</font>

174
00:08:49,500 --> 00:08:56,550
variable scanner and structure builder

175
00:08:51,660 --> 00:08:59,250
feature<font color="#E5E5E5"> features of my plugin here is a</font>

176
00:08:56,550 --> 00:09:00,329
quote from<font color="#E5E5E5"> the web server</font><font color="#CCCCCC"> of an embedded</font>

177
00:08:59,250 --> 00:09:04,110
device<font color="#CCCCCC"> that are</font>

178
00:09:00,329 --> 00:09:06,508
<font color="#E5E5E5">search in my work and here you can see a</font>

179
00:09:04,110 --> 00:09:10,110
sprint function<font color="#E5E5E5"> that one would like</font><font color="#CCCCCC"> to</font>

180
00:09:06,509 --> 00:09:12,329
explore due to its and safety<font color="#CCCCCC"> that s</font>

181
00:09:10,110 --> 00:09:15,749
print copies character<font color="#CCCCCC"> string from one</font>

182
00:09:12,329 --> 00:09:20,329
structure member to<font color="#CCCCCC"> another in order to</font>

183
00:09:15,749 --> 00:09:23,100
understand how<font color="#CCCCCC"> did get there we should</font>

184
00:09:20,329 --> 00:09:29,519
<font color="#CCCCCC">reconstruct structure understand</font><font color="#E5E5E5"> what</font>

185
00:09:23,100 --> 00:09:32,100
what members are made for here you can

186
00:09:29,519 --> 00:09:34,170
see referenced members<font color="#CCCCCC"> often</font><font color="#E5E5E5"> some</font>

187
00:09:32,100 --> 00:09:37,379
structure<font color="#E5E5E5"> and we can see that this</font>

188
00:09:34,170 --> 00:09:39,748
<font color="#CCCCCC">structure has members</font><font color="#E5E5E5"> at offset</font><font color="#CCCCCC"> ninety</font>

189
00:09:37,379 --> 00:09:42,420
<font color="#E5E5E5">thousand which is quite a lot</font><font color="#CCCCCC"> and it</font>

190
00:09:39,749 --> 00:09:49,170
would be highly painful to reconstruct

191
00:09:42,420 --> 00:09:52,110
it<font color="#CCCCCC"> so we moved to</font><font color="#E5E5E5"> the upper part of the</font>

192
00:09:49,170 --> 00:09:55,559
function and I started a shallow scan

193
00:09:52,110 --> 00:10:01,139
process<font color="#E5E5E5"> on the right side I have opened</font>

194
00:09:55,559 --> 00:10:03,809
<font color="#E5E5E5">the structure builder and here we can</font>

195
00:10:01,139 --> 00:10:05,999
see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> information about members is</font>

196
00:10:03,809 --> 00:10:07,618
collected during<font color="#CCCCCC"> the</font><font color="#E5E5E5"> scanning</font><font color="#CCCCCC"> process</font>

197
00:10:05,999 --> 00:10:11,399
the<font color="#CCCCCC"> pseudo-code</font>

198
00:10:07,619 --> 00:10:14,129
<font color="#E5E5E5">c3 is analyzed expressions in which our</font>

199
00:10:11,399 --> 00:10:17,249
skint wearables exist are parsed and

200
00:10:14,129 --> 00:10:19,709
information about offset offsets and

201
00:10:17,249 --> 00:10:22,169
possible type is extracted

202
00:10:19,709 --> 00:10:24,388
if the c-can't variable is assigned<font color="#CCCCCC"> to</font>

203
00:10:22,169 --> 00:10:27,360
another wearable day and the lot will

204
00:10:24,389 --> 00:10:31,009
also be parsed all information is

205
00:10:27,360 --> 00:10:33,689
represented<font color="#E5E5E5"> in the structure builder</font>

206
00:10:31,009 --> 00:10:36,829
here we switch to another function<font color="#CCCCCC"> and</font>

207
00:10:33,689 --> 00:10:39,329
started scanning another<font color="#E5E5E5"> wearable and</font>

208
00:10:36,829 --> 00:10:42,689
this process<font color="#E5E5E5"> can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> repeated again and</font>

209
00:10:39,329 --> 00:10:44,519
<font color="#CCCCCC">again for different locations and by the</font>

210
00:10:42,689 --> 00:10:46,349
way in the new version<font color="#E5E5E5"> of the plugin it</font>

211
00:10:44,519 --> 00:10:49,379
is possible to scan not only local

212
00:10:46,350 --> 00:10:58,319
variables but global<font color="#CCCCCC"> - and human</font><font color="#E5E5E5"> members</font>

213
00:10:49,379 --> 00:11:00,540
of other<font color="#E5E5E5"> structures after</font><font color="#CCCCCC"> scanning so we</font>

214
00:10:58,319 --> 00:11:05,910
scanned a little bit and structure

215
00:11:00,540 --> 00:11:08,809
builder gained more information so what

216
00:11:05,910 --> 00:11:12,179
does structure builder allows us to do

217
00:11:08,809 --> 00:11:14,180
<font color="#E5E5E5">here you can see that potential members</font>

218
00:11:12,179 --> 00:11:17,300
get<font color="#CCCCCC"> diamond names like</font>

219
00:11:14,180 --> 00:11:19,810
<font color="#CCCCCC">feel trees offset as the amount of</font>

220
00:11:17,300 --> 00:11:22,099
collected information<font color="#E5E5E5"> can be quite big</font>

221
00:11:19,810 --> 00:11:24,739
<font color="#CCCCCC">overlapping candidates for being</font><font color="#E5E5E5"> a</font>

222
00:11:22,100 --> 00:11:26,779
member<font color="#E5E5E5"> are marked yellow it is possible</font>

223
00:11:24,740 --> 00:11:30,140
<font color="#CCCCCC">to select which candidates to keep and</font>

224
00:11:26,779 --> 00:11:34,970
which to<font color="#CCCCCC"> skip by the</font><font color="#E5E5E5"> enable and disable</font>

225
00:11:30,140 --> 00:11:37,520
buttons here is solved conflicts by

226
00:11:34,970 --> 00:11:41,779
disabling some candidates<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> marked</font>

227
00:11:37,520 --> 00:11:44,120
<font color="#E5E5E5">with</font><font color="#CCCCCC"> grey now this window allows more we</font>

228
00:11:41,779 --> 00:11:47,930
can rename diamond names of members<font color="#E5E5E5"> and</font>

229
00:11:44,120 --> 00:11:50,360
change their type types<font color="#CCCCCC"> also we can make</font>

230
00:11:47,930 --> 00:11:54,670
some members<font color="#E5E5E5"> this array and the size of</font>

231
00:11:50,360 --> 00:11:54,670
them will be calculated automatically

232
00:11:57,190 --> 00:12:03,950
after resolving<font color="#E5E5E5"> conflicts we can press</font>

233
00:12:00,339 --> 00:12:06,589
<font color="#CCCCCC">the finalize button and get</font><font color="#E5E5E5"> the final</font>

234
00:12:03,950 --> 00:12:09,470
declaration of the structure which you

235
00:12:06,589 --> 00:12:11,330
<font color="#E5E5E5">can see on the slide</font><font color="#CCCCCC"> sometimes members</font>

236
00:12:09,470 --> 00:12:13,640
don't cover all<font color="#CCCCCC"> structure</font>

237
00:12:11,330 --> 00:12:16,580
<font color="#CCCCCC">Paden</font><font color="#E5E5E5"> is created for non</font><font color="#CCCCCC"> existant</font>

238
00:12:13,640 --> 00:12:23,779
members it has<font color="#CCCCCC"> typed for every bite and</font>

239
00:12:16,580 --> 00:12:24,620
<font color="#CCCCCC">name gap with offset after pressing the</font>

240
00:12:23,779 --> 00:12:27,439
<font color="#CCCCCC">OK button</font>

241
00:12:24,620 --> 00:12:30,980
the new type is imported to<font color="#E5E5E5"> local types</font>

242
00:12:27,440 --> 00:12:33,140
the pointer to this type is applied to

243
00:12:30,980 --> 00:12:35,660
all<font color="#CCCCCC"> variables that have</font><font color="#E5E5E5"> been scanned and</font>

244
00:12:33,140 --> 00:12:37,900
here is the upper part<font color="#E5E5E5"> of the function I</font>

245
00:12:35,660 --> 00:12:41,569
showed<font color="#CCCCCC"> to you in</font><font color="#E5E5E5"> the previous slide and</font>

246
00:12:37,900 --> 00:12:44,180
you can<font color="#E5E5E5"> see that the type</font><font color="#CCCCCC"> of variables</font>

247
00:12:41,570 --> 00:12:49,430
has changed and there<font color="#E5E5E5"> are references to</font>

248
00:12:44,180 --> 00:12:51,979
<font color="#E5E5E5">the structure member in the code here is</font>

249
00:12:49,430 --> 00:12:56,660
the code with with a supreme<font color="#CCCCCC"> print</font>

250
00:12:51,980 --> 00:13:00,850
function and now it contains references

251
00:12:56,660 --> 00:13:00,850
to<font color="#E5E5E5"> member</font><font color="#CCCCCC"> solve the structure as well</font><font color="#E5E5E5"> as</font>

252
00:13:07,150 --> 00:13:12,439
<font color="#CCCCCC">you could see it's quite useful</font><font color="#E5E5E5"> but what</font>

253
00:13:10,220 --> 00:13:15,320
<font color="#E5E5E5">if a structure is really huge and</font><font color="#CCCCCC"> it's</font>

254
00:13:12,440 --> 00:13:17,120
employment spread amongst many functions

255
00:13:15,320 --> 00:13:19,730
while I was<font color="#E5E5E5"> developing the</font><font color="#CCCCCC"> shadow</font>

256
00:13:17,120 --> 00:13:23,150
scanner<font color="#CCCCCC"> I came to know an idea that I</font>

257
00:13:19,730 --> 00:13:24,650
can<font color="#E5E5E5"> use this process recursively while</font>

258
00:13:23,150 --> 00:13:26,720
they are<font color="#CCCCCC"> scan in a</font><font color="#E5E5E5"> variable why not to</font>

259
00:13:24,650 --> 00:13:27,829
scan every function to<font color="#CCCCCC"> each</font><font color="#E5E5E5"> this</font>

260
00:13:26,720 --> 00:13:30,590
variable is passed

261
00:13:27,830 --> 00:13:34,480
<font color="#CCCCCC">in</font><font color="#E5E5E5"> argument</font><font color="#CCCCCC"> - so I've</font><font color="#E5E5E5"> done the deep scan</font>

262
00:13:30,590 --> 00:13:38,270
variable feature and here how it works

263
00:13:34,480 --> 00:13:41,450
this<font color="#E5E5E5"> is a function where a a 1 and V</font><font color="#CCCCCC"> 2</font>

264
00:13:38,270 --> 00:13:43,819
are pointers to the same structure<font color="#E5E5E5"> as in</font>

265
00:13:41,450 --> 00:13:48,980
the previous example<font color="#CCCCCC"> and this function</font>

266
00:13:43,820 --> 00:13:51,650
<font color="#E5E5E5">has some sort of</font><font color="#CCCCCC"> Col graph to erode so</font>

267
00:13:48,980 --> 00:13:54,320
you can see<font color="#E5E5E5"> the the structure</font><font color="#CCCCCC"> pointer is</font>

268
00:13:51,650 --> 00:13:55,340
passed to<font color="#E5E5E5"> many functions so we</font><font color="#CCCCCC"> should</font>

269
00:13:54,320 --> 00:13:57,530
apply<font color="#CCCCCC"> shallow skin</font>

270
00:13:55,340 --> 00:14:00,680
to them<font color="#CCCCCC"> - and then those functions we</font>

271
00:13:57,530 --> 00:14:05,050
<font color="#CCCCCC">would see the same picture because here</font>

272
00:14:00,680 --> 00:14:07,849
is what the call<font color="#E5E5E5"> graph looks like and</font>

273
00:14:05,050 --> 00:14:10,250
here we start<font color="#E5E5E5"> a deep scan wearable</font>

274
00:14:07,850 --> 00:14:13,220
process and<font color="#E5E5E5"> waited till</font><font color="#CCCCCC"> it produces</font>

275
00:14:10,250 --> 00:14:15,770
results<font color="#CCCCCC"> it it could it can take some</font>

276
00:14:13,220 --> 00:14:20,270
time<font color="#E5E5E5"> and in this</font><font color="#CCCCCC"> example it</font><font color="#E5E5E5"> took about</font>

277
00:14:15,770 --> 00:14:22,610
<font color="#CCCCCC">one minute</font><font color="#E5E5E5"> and here you can see</font><font color="#CCCCCC"> that the</font>

278
00:14:20,270 --> 00:14:25,550
amount of results<font color="#E5E5E5"> collected during</font><font color="#CCCCCC"> the</font>

279
00:14:22,610 --> 00:14:32,960
<font color="#E5E5E5">tips Canyon is far more</font><font color="#CCCCCC"> than in the</font>

280
00:14:25,550 --> 00:14:35,150
previous example after<font color="#CCCCCC"> scanning all</font>

281
00:14:32,960 --> 00:14:39,110
functions visited<font color="#CCCCCC"> during this process</font>

282
00:14:35,150 --> 00:14:43,630
<font color="#E5E5E5">are shown in the output</font><font color="#CCCCCC"> window the</font>

283
00:14:39,110 --> 00:14:43,630
represent<font color="#E5E5E5"> represented tests a</font><font color="#CCCCCC"> two-year I</font>

284
00:14:43,960 --> 00:14:49,580
had to solve<font color="#E5E5E5"> one we should when making</font>

285
00:14:46,430 --> 00:14:53,300
<font color="#E5E5E5">deep scan and function is</font><font color="#CCCCCC"> decompiled</font><font color="#E5E5E5"> and</font>

286
00:14:49,580 --> 00:14:54,890
functions that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> called by in</font>

287
00:14:53,300 --> 00:14:57,199
functions that are called<font color="#E5E5E5"> by</font><font color="#CCCCCC"> this</font>

288
00:14:54,890 --> 00:14:59,150
<font color="#E5E5E5">function are</font><font color="#CCCCCC"> not the compiled he had</font>

289
00:14:57,200 --> 00:15:03,140
some arguments of those function could

290
00:14:59,150 --> 00:15:07,280
be absent<font color="#E5E5E5"> so the tip scan wouldn't go</font>

291
00:15:03,140 --> 00:15:11,600
that deep<font color="#E5E5E5"> and in order</font><font color="#CCCCCC"> to overcome</font><font color="#E5E5E5"> this</font>

292
00:15:07,280 --> 00:15:13,310
it<font color="#E5E5E5"> that issue all</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> graph functions</font>

293
00:15:11,600 --> 00:15:17,110
from the<font color="#CCCCCC"> place</font><font color="#E5E5E5"> the deep scan process</font>

294
00:15:13,310 --> 00:15:20,630
<font color="#E5E5E5">started</font><font color="#CCCCCC"> or forcibly</font><font color="#E5E5E5"> to compile once and</font>

295
00:15:17,110 --> 00:15:22,580
it can take additional time but this

296
00:15:20,630 --> 00:15:28,340
<font color="#E5E5E5">processor costs only one time per</font>

297
00:15:22,580 --> 00:15:32,210
session<font color="#E5E5E5"> that's something that should</font><font color="#CCCCCC"> be</font>

298
00:15:28,340 --> 00:15:34,190
<font color="#E5E5E5">thought</font><font color="#CCCCCC"> about what to do with it as</font><font color="#E5E5E5"> you</font>

299
00:15:32,210 --> 00:15:36,830
could<font color="#E5E5E5"> see in the previous example</font><font color="#CCCCCC"> we</font>

300
00:15:34,190 --> 00:15:39,110
have too much<font color="#CCCCCC"> information about the</font>

301
00:15:36,830 --> 00:15:40,820
structure<font color="#CCCCCC"> there are a lot of members</font><font color="#E5E5E5"> and</font>

302
00:15:39,110 --> 00:15:41,660
a<font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> potential candidates for</font><font color="#CCCCCC"> each</font>

303
00:15:40,820 --> 00:15:44,330
member

304
00:15:41,660 --> 00:15:46,640
and<font color="#CCCCCC"> after</font><font color="#E5E5E5"> facing this picture many many</font>

305
00:15:44,330 --> 00:15:50,690
times in my work<font color="#CCCCCC"> I</font><font color="#E5E5E5"> decided to automate</font>

306
00:15:46,640 --> 00:15:53,270
the<font color="#CCCCCC"> members selection process so here</font>

307
00:15:50,690 --> 00:15:56,300
are<font color="#E5E5E5"> results from the previous tips</font>

308
00:15:53,270 --> 00:15:58,970
<font color="#CCCCCC">canyon</font><font color="#E5E5E5"> and after pressing the resolve</font>

309
00:15:56,300 --> 00:16:02,270
button we can see that we have no more

310
00:15:58,970 --> 00:16:04,610
yellow color<font color="#E5E5E5"> resolving conflicts feature</font>

311
00:16:02,270 --> 00:16:06,829
works by<font color="#E5E5E5"> comparing overlapped members</font>

312
00:16:04,610 --> 00:16:09,290
according<font color="#E5E5E5"> to the preference table hidden</font>

313
00:16:06,830 --> 00:16:13,160
inside the plugin and it is possible to

314
00:16:09,290 --> 00:16:16,250
<font color="#E5E5E5">change it but the</font><font color="#CCCCCC"> fault types with vort</font>

315
00:16:13,160 --> 00:16:21,140
<font color="#E5E5E5">char pointer etc have high priority than</font>

316
00:16:16,250 --> 00:16:26,840
weird types like<font color="#CCCCCC"> signed-in</font><font color="#E5E5E5"> 60 into 16</font>

317
00:16:21,140 --> 00:16:30,830
and so on it is normal practice to<font color="#E5E5E5"> see</font>

318
00:16:26,840 --> 00:16:33,710
them in item<font color="#CCCCCC"> and of course I gave 90</font>

319
00:16:30,830 --> 00:16:37,850
fault types like socket handle cetera

320
00:16:33,710 --> 00:16:39,590
<font color="#E5E5E5">the highest priority and here is a</font><font color="#CCCCCC"> view</font>

321
00:16:37,850 --> 00:16:41,630
<font color="#E5E5E5">of somewhere in the middle of the</font>

322
00:16:39,590 --> 00:16:45,020
structure<font color="#CCCCCC"> where there are a lot of</font>

323
00:16:41,630 --> 00:16:48,890
<font color="#CCCCCC">functional members</font><font color="#E5E5E5"> and here you can see</font>

324
00:16:45,020 --> 00:16:50,540
conflicts have also been resolved<font color="#CCCCCC"> to</font>

325
00:16:48,890 --> 00:16:53,540
compare function<font color="#E5E5E5"> prototypes that is</font>

326
00:16:50,540 --> 00:16:57,530
<font color="#E5E5E5">invite about heuristic heuristic to</font>

327
00:16:53,540 --> 00:16:59,180
compare the length of the signature<font color="#E5E5E5"> but</font>

328
00:16:57,530 --> 00:17:01,910
<font color="#CCCCCC">actually it doesn't</font><font color="#E5E5E5"> matter which members</font>

329
00:16:59,180 --> 00:17:05,000
we keep as<font color="#E5E5E5"> we can change the type very</font>

330
00:17:01,910 --> 00:17:10,159
fast<font color="#CCCCCC"> by using the</font><font color="#E5E5E5"> recast feature I'll</font>

331
00:17:05,000 --> 00:17:13,700
talk about it later<font color="#E5E5E5"> this feature has its</font>

332
00:17:10,160 --> 00:17:16,340
<font color="#CCCCCC">faults</font><font color="#E5E5E5"> here we have plenty</font><font color="#CCCCCC"> of character</font>

333
00:17:13,700 --> 00:17:23,020
buffers and I don't<font color="#CCCCCC"> know a way</font><font color="#E5E5E5"> to decide</font>

334
00:17:16,339 --> 00:17:26,119
programmatically<font color="#CCCCCC"> which to keep and which</font>

335
00:17:23,020 --> 00:17:31,010
well they start or and<font color="#E5E5E5"> where</font><font color="#CCCCCC"> these</font>

336
00:17:26,119 --> 00:17:38,840
finish so they should be<font color="#E5E5E5"> resolved</font>

337
00:17:31,010 --> 00:17:40,610
manually as I did<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the slide using the</font>

338
00:17:38,840 --> 00:17:42,830
deep scan feature we can achieve<font color="#E5E5E5"> a broad</font>

339
00:17:40,610 --> 00:17:45,260
coverage of places where the structure

340
00:17:42,830 --> 00:17:47,600
is<font color="#E5E5E5"> used but we might still</font><font color="#CCCCCC"> miss some</font>

341
00:17:45,260 --> 00:17:50,570
members as you<font color="#CCCCCC"> may remember they have</font>

342
00:17:47,600 --> 00:17:52,850
<font color="#CCCCCC">dominant like gap width offset and there</font>

343
00:17:50,570 --> 00:17:54,620
is a way<font color="#E5E5E5"> to define a type and name for</font>

344
00:17:52,850 --> 00:17:56,959
<font color="#E5E5E5">those skipped member</font>

345
00:17:54,620 --> 00:17:59,209
without spoiling<font color="#E5E5E5"> the structure in the</font>

346
00:17:56,960 --> 00:18:01,040
process if it turns out the<font color="#CCCCCC"> the</font>

347
00:17:59,210 --> 00:18:04,730
structure<font color="#CCCCCC"> is</font><font color="#E5E5E5"> not a big enough just a</font>

348
00:18:01,040 --> 00:18:09,020
<font color="#E5E5E5">dummy</font><font color="#CCCCCC"> cap field to</font><font color="#E5E5E5"> the end and use these</font>

349
00:18:04,730 --> 00:18:10,850
the<font color="#E5E5E5"> same create new field feature here</font>

350
00:18:09,020 --> 00:18:13,760
is a function<font color="#CCCCCC"> which hasn't been scanned</font>

351
00:18:10,850 --> 00:18:17,209
yet<font color="#E5E5E5"> and there are a lot of accessed</font>

352
00:18:13,760 --> 00:18:19,220
dummy members and to recreate that<font color="#E5E5E5"> type</font>

353
00:18:17,210 --> 00:18:22,040
we would have to create<font color="#CCCCCC"> new gaps</font><font color="#E5E5E5"> and</font>

354
00:18:19,220 --> 00:18:24,260
recalculate<font color="#E5E5E5"> their sizes and told that</font>

355
00:18:22,040 --> 00:18:26,960
work should<font color="#CCCCCC"> be done</font><font color="#E5E5E5"> with not very handy</font>

356
00:18:24,260 --> 00:18:28,100
<font color="#CCCCCC">Ida Pro local types and</font><font color="#E5E5E5"> structured</font>

357
00:18:26,960 --> 00:18:30,560
definition windows

358
00:18:28,100 --> 00:18:34,699
it's an<font color="#E5E5E5"> error-prone task so I decided to</font>

359
00:18:30,560 --> 00:18:38,870
automate<font color="#CCCCCC"> it so let's create a member</font>

360
00:18:34,700 --> 00:18:45,080
<font color="#CCCCCC">from</font><font color="#E5E5E5"> this gap here we choose the create</font>

361
00:18:38,870 --> 00:18:47,570
<font color="#E5E5E5">new field menu and you can see the</font>

362
00:18:45,080 --> 00:18:49,970
window we can paste a new member type

363
00:18:47,570 --> 00:18:53,240
and name it can be an<font color="#CCCCCC"> array of elements</font>

364
00:18:49,970 --> 00:18:55,460
<font color="#CCCCCC">or any other type you may choose and all</font>

365
00:18:53,240 --> 00:18:57,980
<font color="#E5E5E5">necessary checks about</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> size and</font>

366
00:18:55,460 --> 00:19:00,740
whether it overrides<font color="#E5E5E5"> other members are</font>

367
00:18:57,980 --> 00:19:02,600
implemented automatically and if

368
00:19:00,740 --> 00:19:06,830
everything<font color="#E5E5E5"> is fine the structured type</font>

369
00:19:02,600 --> 00:19:15,439
will<font color="#CCCCCC"> be changed here you can see that</font>

370
00:19:06,830 --> 00:19:18,350
the new member was created and here we

371
00:19:15,440 --> 00:19:24,250
will do the same<font color="#CCCCCC"> for the line</font><font color="#E5E5E5"> that</font>

372
00:19:18,350 --> 00:19:26,840
marked there are a lot of gaps there and

373
00:19:24,250 --> 00:19:28,730
as the new member<font color="#E5E5E5"> was created you can</font>

374
00:19:26,840 --> 00:19:37,129
see that gaps<font color="#CCCCCC"> around</font><font color="#E5E5E5"> the new member were</font>

375
00:19:28,730 --> 00:19:43,160
also changed and here I created new

376
00:19:37,130 --> 00:19:44,990
<font color="#CCCCCC">fields for every gap so ok now</font><font color="#E5E5E5"> we've</font>

377
00:19:43,160 --> 00:19:46,820
learned how to create<font color="#E5E5E5"> structures but you</font>

378
00:19:44,990 --> 00:19:50,060
may ask what<font color="#CCCCCC"> is the point of having</font><font color="#E5E5E5"> all</font>

379
00:19:46,820 --> 00:19:51,980
those<font color="#E5E5E5"> members with the default names of</font>

380
00:19:50,060 --> 00:19:54,169
course it's more helpful<font color="#CCCCCC"> than just</font>

381
00:19:51,980 --> 00:19:57,530
random<font color="#E5E5E5"> pointers they</font><font color="#CCCCCC"> reference</font><font color="#E5E5E5"> it with</font>

382
00:19:54,170 --> 00:19:59,420
<font color="#E5E5E5">random offsets in our quote we can at</font>

383
00:19:57,530 --> 00:20:02,240
least<font color="#CCCCCC"> discreet English one structure</font>

384
00:19:59,420 --> 00:20:05,090
<font color="#E5E5E5">from another but how to understand the</font>

385
00:20:02,240 --> 00:20:06,950
purpose<font color="#E5E5E5"> of structure members it is kind</font>

386
00:20:05,090 --> 00:20:08,030
<font color="#E5E5E5">main challenge show of reverse</font>

387
00:20:06,950 --> 00:20:10,820
<font color="#CCCCCC">engineering</font>

388
00:20:08,030 --> 00:20:14,090
and in<font color="#E5E5E5"> order to solve this</font><font color="#CCCCCC"> we need to</font>

389
00:20:10,820 --> 00:20:17,350
<font color="#E5E5E5">know how members are accessed where and</font>

390
00:20:14,090 --> 00:20:20,050
how they're used<font color="#E5E5E5"> and and for that</font>

391
00:20:17,350 --> 00:20:24,110
<font color="#CCCCCC">cross-references will be of great help</font>

392
00:20:20,050 --> 00:20:27,680
<font color="#E5E5E5">there are two ways to see them when</font><font color="#CCCCCC"> you</font>

393
00:20:24,110 --> 00:20:29,449
use in my plugin first we have cross

394
00:20:27,680 --> 00:20:31,640
references<font color="#CCCCCC"> D or in structure</font>

395
00:20:29,450 --> 00:20:33,740
construction while the<font color="#E5E5E5"> structure hasn't</font>

396
00:20:31,640 --> 00:20:36,410
been he had created<font color="#E5E5E5"> and second we have</font>

397
00:20:33,740 --> 00:20:41,150
<font color="#E5E5E5">conferences system for members of</font>

398
00:20:36,410 --> 00:20:44,210
existing structures<font color="#E5E5E5"> so let me start with</font>

399
00:20:41,150 --> 00:20:47,330
<font color="#E5E5E5">the first while creating the structure</font>

400
00:20:44,210 --> 00:20:50,450
<font color="#E5E5E5">we may make double click on offset in</font>

401
00:20:47,330 --> 00:20:53,540
structure builder<font color="#E5E5E5"> on interest of</font>

402
00:20:50,450 --> 00:20:55,730
interesting candidate<font color="#CCCCCC"> and</font><font color="#E5E5E5"> see is the</font>

403
00:20:53,540 --> 00:21:01,670
list of<font color="#E5E5E5"> sources of the information</font><font color="#CCCCCC"> about</font>

404
00:20:55,730 --> 00:21:04,160
that candidate here<font color="#CCCCCC"> I clicked on another</font>

405
00:21:01,670 --> 00:21:10,670
<font color="#E5E5E5">candidate and got 40</font><font color="#CCCCCC"> places where it was</font>

406
00:21:04,160 --> 00:21:13,310
used the<font color="#CCCCCC"> information has function name</font>

407
00:21:10,670 --> 00:21:16,970
variable<font color="#E5E5E5"> name and others of expression</font>

408
00:21:13,310 --> 00:21:19,810
and here<font color="#CCCCCC"> after selecting the member we</font>

409
00:21:16,970 --> 00:21:23,270
moved to the place where it was<font color="#E5E5E5"> used</font>

410
00:21:19,810 --> 00:21:25,639
that's nice and helps quite a lot but

411
00:21:23,270 --> 00:21:28,400
the code<font color="#CCCCCC"> we</font><font color="#E5E5E5"> reverse engineer is usually</font>

412
00:21:25,640 --> 00:21:31,330
quite complicated structures can be

413
00:21:28,400 --> 00:21:33,770
<font color="#E5E5E5">entangled with each other and we usually</font>

414
00:21:31,330 --> 00:21:36,280
<font color="#E5E5E5">cannot understand how one structure is</font>

415
00:21:33,770 --> 00:21:38,650
organized<font color="#E5E5E5"> without understanding the</font>

416
00:21:36,280 --> 00:21:41,060
organization of the<font color="#E5E5E5"> earthís</font>

417
00:21:38,650 --> 00:21:43,540
<font color="#CCCCCC">piece-by-piece we collect information</font>

418
00:21:41,060 --> 00:21:45,580
<font color="#CCCCCC">about several</font><font color="#E5E5E5"> structures</font>

419
00:21:43,540 --> 00:21:48,710
unfortunately my plugin allows

420
00:21:45,580 --> 00:21:51,230
reconstruction only of one structure at

421
00:21:48,710 --> 00:21:52,970
a time<font color="#E5E5E5"> and if we start reconstructing</font>

422
00:21:51,230 --> 00:21:55,910
another information about cross

423
00:21:52,970 --> 00:21:57,500
references will<font color="#CCCCCC"> be lost I didn't want</font><font color="#E5E5E5"> to</font>

424
00:21:55,910 --> 00:21:59,180
make support<font color="#CCCCCC"> - for construction</font><font color="#E5E5E5"> of</font>

425
00:21:57,500 --> 00:22:02,480
<font color="#E5E5E5">several structures simultaneously</font>

426
00:21:59,180 --> 00:22:06,830
because it makes the<font color="#CCCCCC"> plug-in</font><font color="#E5E5E5"> and work</font>

427
00:22:02,480 --> 00:22:10,820
<font color="#E5E5E5">with it</font><font color="#CCCCCC"> over complicated luckily</font><font color="#E5E5E5"> I hit</font>

428
00:22:06,830 --> 00:22:13,310
another<font color="#CCCCCC"> bright idea so here is the</font><font color="#E5E5E5"> code</font>

429
00:22:10,820 --> 00:22:15,139
after<font color="#CCCCCC"> reconstructing the structure and I</font>

430
00:22:13,310 --> 00:22:18,800
thought what if just collect information

431
00:22:15,140 --> 00:22:21,210
about<font color="#E5E5E5"> how members are accessed in</font><font color="#CCCCCC"> the</font>

432
00:22:18,800 --> 00:22:23,178
background<font color="#E5E5E5"> it</font><font color="#CCCCCC"> will</font>

433
00:22:21,210 --> 00:22:26,429
simple but<font color="#E5E5E5"> it took me about half a year</font>

434
00:22:23,179 --> 00:22:29,970
<font color="#E5E5E5">to</font><font color="#CCCCCC"> realize that it can be done</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> this</font>

435
00:22:26,429 --> 00:22:31,980
and with<font color="#CCCCCC"> my</font><font color="#E5E5E5"> plugin now</font><font color="#CCCCCC"> each time the f5</font>

436
00:22:29,970 --> 00:22:35,880
button is pressed and decompiler works

437
00:22:31,980 --> 00:22:39,149
my plugin parses c3 and<font color="#E5E5E5"> searches</font><font color="#CCCCCC"> for the</font>

438
00:22:35,880 --> 00:22:41,159
members references<font color="#CCCCCC"> that</font><font color="#E5E5E5"> information is</font>

439
00:22:39,149 --> 00:22:48,209
<font color="#E5E5E5">saved and can be displayed to the user</font>

440
00:22:41,159 --> 00:22:51,000
<font color="#CCCCCC">so here we pressed hotkey for the member</font>

441
00:22:48,210 --> 00:22:53,130
from<font color="#CCCCCC"> the previous example and we see a</font>

442
00:22:51,000 --> 00:22:57,570
nice list of all places<font color="#E5E5E5"> where it is used</font>

443
00:22:53,130 --> 00:23:01,760
by<font color="#CCCCCC"> default either shows member</font><font color="#E5E5E5"> cross</font>

444
00:22:57,570 --> 00:23:08,189
<font color="#E5E5E5">references only from one</font><font color="#CCCCCC"> function body</font>

445
00:23:01,760 --> 00:23:10,770
so my information shows info about type

446
00:23:08,190 --> 00:23:14,070
of axes whether<font color="#CCCCCC"> member was written read</font>

447
00:23:10,770 --> 00:23:17,070
or passed as an argument and also<font color="#CCCCCC"> a line</font>

448
00:23:14,070 --> 00:23:18,928
of code<font color="#CCCCCC"> contained in our member and I</font>

449
00:23:17,070 --> 00:23:21,360
think this feature<font color="#E5E5E5"> great greatly</font>

450
00:23:18,929 --> 00:23:24,210
improves reverse engineering process<font color="#CCCCCC"> and</font>

451
00:23:21,360 --> 00:23:33,840
now it<font color="#E5E5E5"> is a lot simpler</font><font color="#CCCCCC"> to sort out how</font>

452
00:23:24,210 --> 00:23:35,970
<font color="#E5E5E5">program works as you as you remember</font>

453
00:23:33,840 --> 00:23:38,610
every variable<font color="#E5E5E5"> that was used during this</font>

454
00:23:35,970 --> 00:23:40,830
<font color="#CCCCCC">shallow and deep scanning gets type of</font>

455
00:23:38,610 --> 00:23:42,990
new<font color="#E5E5E5"> instruction and then and when it</font>

456
00:23:40,830 --> 00:23:45,840
gets<font color="#CCCCCC"> this type the compilation process</font>

457
00:23:42,990 --> 00:23:47,669
takes place<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that accumulation</font>

458
00:23:45,840 --> 00:23:51,090
<font color="#E5E5E5">process leads to</font><font color="#CCCCCC"> cache</font><font color="#E5E5E5"> information about</font>

459
00:23:47,669 --> 00:23:53,159
cross references so the more wearable

460
00:23:51,090 --> 00:23:57,510
<font color="#CCCCCC">asked and the more cross reference we</font>

461
00:23:53,159 --> 00:24:00,630
get and a new<font color="#E5E5E5"> question is arises how to</font>

462
00:23:57,510 --> 00:24:04,770
find where the structure was<font color="#CCCCCC"> created so</font>

463
00:24:00,630 --> 00:24:06,899
<font color="#CCCCCC">that we could apply deep scan and get as</font>

464
00:24:04,770 --> 00:24:09,809
broad coverage of the structure as

465
00:24:06,899 --> 00:24:11,668
possible for<font color="#E5E5E5"> that I am in the middle of</font>

466
00:24:09,809 --> 00:24:17,490
<font color="#E5E5E5">creating feature that helps to find</font>

467
00:24:11,669 --> 00:24:19,590
where the structure was<font color="#E5E5E5"> allocated so</font>

468
00:24:17,490 --> 00:24:23,669
here is the quote in which we would<font color="#CCCCCC"> like</font>

469
00:24:19,590 --> 00:24:30,289
<font color="#CCCCCC">to find the origins of variable a1</font><font color="#E5E5E5"> and</font>

470
00:24:23,669 --> 00:24:33,120
we selected<font color="#E5E5E5"> just</font><font color="#CCCCCC"> gas</font><font color="#E5E5E5"> allocation menu and</font>

471
00:24:30,289 --> 00:24:35,230
here you can see where the originally

472
00:24:33,120 --> 00:24:39,110
located<font color="#E5E5E5"> value was used</font>

473
00:24:35,230 --> 00:24:41,240
it also shows<font color="#CCCCCC"> the type of allocation</font>

474
00:24:39,110 --> 00:24:43,789
<font color="#CCCCCC">whether</font><font color="#E5E5E5"> whether it is</font><font color="#CCCCCC"> take heap or</font>

475
00:24:41,240 --> 00:24:46,519
global and now we can go to each

476
00:24:43,789 --> 00:24:50,179
location<font color="#CCCCCC"> apply the deep scan</font><font color="#E5E5E5"> process and</font>

477
00:24:46,519 --> 00:24:53,299
achieve<font color="#CCCCCC"> a pretty good coverage</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I am</font>

478
00:24:50,179 --> 00:24:55,639
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> alter this youth so that</font><font color="#CCCCCC"> it</font>

479
00:24:53,299 --> 00:24:57,799
will<font color="#E5E5E5"> show</font><font color="#CCCCCC"> a list</font><font color="#E5E5E5"> of places where it is</font>

480
00:24:55,639 --> 00:24:59,600
better to<font color="#E5E5E5"> start scanning instead of just</font>

481
00:24:57,799 --> 00:25:01,908
given a list of<font color="#E5E5E5"> places</font><font color="#CCCCCC"> where allocations</font>

482
00:24:59,600 --> 00:25:05,209
were made and I<font color="#E5E5E5"> want to make it possible</font>

483
00:25:01,909 --> 00:25:07,669
to<font color="#E5E5E5"> find the constructor in the future</font>

484
00:25:05,210 --> 00:25:14,299
you may expect<font color="#E5E5E5"> this feature will</font><font color="#CCCCCC"> be</font>

485
00:25:07,669 --> 00:25:16,610
improving that's<font color="#E5E5E5"> almost all about</font>

486
00:25:14,299 --> 00:25:18,309
<font color="#CCCCCC">reconstructing</font><font color="#E5E5E5"> later there will be a</font>

487
00:25:16,610 --> 00:25:21,469
<font color="#E5E5E5">little more information about</font>

488
00:25:18,309 --> 00:25:23,210
<font color="#CCCCCC">object-oriented code peculiarities</font><font color="#E5E5E5"> but</font>

489
00:25:21,470 --> 00:25:26,779
now we<font color="#E5E5E5"> are going to</font><font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about another</font>

490
00:25:23,210 --> 00:25:28,820
issue<font color="#E5E5E5"> as we go through the reverse</font>

491
00:25:26,779 --> 00:25:31,820
<font color="#E5E5E5">engineering process we change the</font>

492
00:25:28,820 --> 00:25:34,908
compiler output<font color="#E5E5E5"> and it takes a lot of</font>

493
00:25:31,820 --> 00:25:37,519
effort<font color="#E5E5E5"> to synchronize types of variables</font>

494
00:25:34,909 --> 00:25:40,340
members and<font color="#CCCCCC"> facts with signatures for</font>

495
00:25:37,519 --> 00:25:43,370
speeding up synchronization my plugin

496
00:25:40,340 --> 00:25:45,408
offers a<font color="#E5E5E5"> recast feature every time we</font>

497
00:25:43,370 --> 00:25:47,469
have two sites in some expression where

498
00:25:45,409 --> 00:25:50,659
each size can be<font color="#E5E5E5"> local or global</font>

499
00:25:47,470 --> 00:25:52,970
variable or argument or return value

500
00:25:50,659 --> 00:25:55,429
function signature<font color="#E5E5E5"> or member of the</font>

501
00:25:52,970 --> 00:25:58,519
<font color="#E5E5E5">structure it is possible to right click</font>

502
00:25:55,429 --> 00:26:02,299
or press the hotkey<font color="#E5E5E5"> and give both sides</font>

503
00:25:58,519 --> 00:26:04,789
of the<font color="#CCCCCC"> expression similar types you may</font>

504
00:26:02,299 --> 00:26:08,539
choose which type they get either from

505
00:26:04,789 --> 00:26:10,370
left to right<font color="#E5E5E5"> or from</font><font color="#CCCCCC"> right to left so</font>

506
00:26:08,539 --> 00:26:14,059
we shouldn't do a lot of copy-paste

507
00:26:10,370 --> 00:26:16,219
<font color="#E5E5E5">anymore and the new version of the</font>

508
00:26:14,059 --> 00:26:18,168
plug-in<font color="#E5E5E5"> supports tremendous amount of</font>

509
00:26:16,220 --> 00:26:20,990
the situations where it<font color="#CCCCCC"> is possible to</font>

510
00:26:18,169 --> 00:26:25,460
<font color="#E5E5E5">make</font><font color="#CCCCCC"> a recast</font><font color="#E5E5E5"> and there is even</font><font color="#CCCCCC"> a recast</font>

511
00:26:20,990 --> 00:26:30,350
<font color="#CCCCCC">for a same print function so it is</font>

512
00:26:25,460 --> 00:26:33,980
possible<font color="#CCCCCC"> to use the size</font><font color="#E5E5E5"> parameter and</font>

513
00:26:30,350 --> 00:26:36,889
create an array so and this feature is

514
00:26:33,980 --> 00:26:40,940
not tied to a simple function<font color="#CCCCCC"> and works</font>

515
00:26:36,889 --> 00:26:44,600
for<font color="#CCCCCC"> any function and here I have</font><font color="#E5E5E5"> made a</font>

516
00:26:40,940 --> 00:26:48,169
<font color="#E5E5E5">request for some from function</font><font color="#CCCCCC"> to member</font>

517
00:26:44,600 --> 00:26:50,449
so actually I<font color="#CCCCCC"> don't know how to</font>

518
00:26:48,169 --> 00:26:55,820
this feature and I hope you got<font color="#CCCCCC"> what I</font>

519
00:26:50,450 --> 00:26:58,129
mean meant there is almost the same

520
00:26:55,820 --> 00:27:01,158
problem with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> renaming variables as</font>

521
00:26:58,129 --> 00:27:03,168
we gave a meaningful name<font color="#E5E5E5"> to one</font>

522
00:27:01,159 --> 00:27:05,600
variable in one place<font color="#E5E5E5"> there are a lot of</font>

523
00:27:03,169 --> 00:27:08,090
other places<font color="#CCCCCC"> where variables</font><font color="#E5E5E5"> or</font>

524
00:27:05,600 --> 00:27:10,668
arguments may have the same name<font color="#E5E5E5"> as the</font>

525
00:27:08,090 --> 00:27:12,889
plugin allows<font color="#E5E5E5"> throwing a name from one</font>

526
00:27:10,669 --> 00:27:15,559
variable to<font color="#CCCCCC"> another using a</font><font color="#E5E5E5"> hotkey and</font>

527
00:27:12,889 --> 00:27:19,279
now the plugin is<font color="#E5E5E5"> the name propagation</font>

528
00:27:15,559 --> 00:27:22,580
feature which allows renaming<font color="#E5E5E5"> a bunch of</font>

529
00:27:19,279 --> 00:27:24,379
wearables so the name propagation

530
00:27:22,580 --> 00:27:27,168
feature does the same<font color="#E5E5E5"> recursive</font>

531
00:27:24,379 --> 00:27:31,609
<font color="#E5E5E5">traversal</font><font color="#CCCCCC"> over functions as the</font><font color="#E5E5E5"> deep</font>

532
00:27:27,169 --> 00:27:34,489
scan wearable does but this time this

533
00:27:31,609 --> 00:27:37,399
time<font color="#E5E5E5"> all elements which</font><font color="#CCCCCC"> have connection</font>

534
00:27:34,489 --> 00:27:41,419
<font color="#CCCCCC">with the selected one receive its name</font>

535
00:27:37,399 --> 00:27:43,340
it is possible to rename or use names of

536
00:27:41,419 --> 00:27:45,830
both the local<font color="#E5E5E5"> and</font><font color="#CCCCCC"> global variables and</font>

537
00:27:43,340 --> 00:27:54,799
structure members<font color="#CCCCCC"> too</font><font color="#E5E5E5"> and here in your</font>

538
00:27:45,830 --> 00:27:57,019
name<font color="#CCCCCC"> to member by function name by the</font>

539
00:27:54,799 --> 00:27:58,940
<font color="#E5E5E5">way if</font><font color="#CCCCCC"> we have a member with some name</font>

540
00:27:57,019 --> 00:28:01,519
<font color="#E5E5E5">and there is a function in</font><font color="#CCCCCC"> either with</font>

541
00:27:58,940 --> 00:28:04,039
the same name with my plugin it is

542
00:28:01,519 --> 00:28:08,179
possible<font color="#CCCCCC"> to navigate</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> that function by</font>

543
00:28:04,039 --> 00:28:11,509
<font color="#CCCCCC">double-click and by default plug-in</font>

544
00:28:08,179 --> 00:28:13,999
propagates names only<font color="#CCCCCC"> / default names</font>

545
00:28:11,509 --> 00:28:21,590
but there is a setting that<font color="#E5E5E5"> allows</font><font color="#CCCCCC"> us to</font>

546
00:28:13,999 --> 00:28:22,789
rewrite the already modified ones so now

547
00:28:21,590 --> 00:28:25,879
let's switch<font color="#CCCCCC"> to another topic</font>

548
00:28:22,789 --> 00:28:28,129
object-oriented code mostly classes

549
00:28:25,879 --> 00:28:30,230
<font color="#E5E5E5">don't differ from regular structures and</font>

550
00:28:28,129 --> 00:28:33,649
everything<font color="#CCCCCC"> that was said before can be</font>

551
00:28:30,230 --> 00:28:36,470
<font color="#E5E5E5">applied to them too but the classes have</font>

552
00:28:33,649 --> 00:28:38,988
new entities namely<font color="#E5E5E5"> virtual tables and</font>

553
00:28:36,470 --> 00:28:41,440
virtual functions and my<font color="#E5E5E5"> plugin is</font>

554
00:28:38,989 --> 00:28:45,230
capable<font color="#CCCCCC"> to detecting and creating</font>

555
00:28:41,440 --> 00:28:49,340
virtual<font color="#E5E5E5"> tables and besides it enables</font>

556
00:28:45,230 --> 00:28:52,100
something<font color="#E5E5E5"> more so let me show you here</font>

557
00:28:49,340 --> 00:28:54,519
<font color="#E5E5E5">is some constructor and it has virtual</font>

558
00:28:52,100 --> 00:28:54,519
tables

559
00:29:00,510 --> 00:29:07,870
and here<font color="#CCCCCC"> we made</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> scan and</font><font color="#E5E5E5"> you can</font>

560
00:29:04,960 --> 00:29:11,430
see the the results in the structure

561
00:29:07,870 --> 00:29:15,939
builder virtual tables are highlighted

562
00:29:11,430 --> 00:29:18,010
if<font color="#E5E5E5"> double click on them and will window</font>

563
00:29:15,940 --> 00:29:22,390
will open with all methods from<font color="#E5E5E5"> the</font>

564
00:29:18,010 --> 00:29:26,440
<font color="#E5E5E5">virtual functions so here is the window</font>

565
00:29:22,390 --> 00:29:28,570
and<font color="#CCCCCC"> it is possible to visit those</font>

566
00:29:26,440 --> 00:29:31,120
functions<font color="#E5E5E5"> and after visiting</font><font color="#CCCCCC"> they get</font>

567
00:29:28,570 --> 00:29:33,250
marked as you remember the more places

568
00:29:31,120 --> 00:29:35,229
<font color="#CCCCCC">with scanned urine reconstructions</font><font color="#E5E5E5"> the</font>

569
00:29:33,250 --> 00:29:37,270
<font color="#E5E5E5">more places with</font><font color="#CCCCCC"> applied class there</font>

570
00:29:35,230 --> 00:29:39,850
will<font color="#CCCCCC"> be and the more</font><font color="#E5E5E5"> cross references</font>

571
00:29:37,270 --> 00:29:43,210
begin and course references will help us

572
00:29:39,850 --> 00:29:45,610
to understand<font color="#E5E5E5"> search organization so in</font>

573
00:29:43,210 --> 00:29:49,690
<font color="#E5E5E5">order to help scan in virtual functions</font>

574
00:29:45,610 --> 00:29:53,350
I edit<font color="#E5E5E5"> option skin and scan all to the</font>

575
00:29:49,690 --> 00:29:56,500
menu<font color="#E5E5E5"> of this function and it is quite</font>

576
00:29:53,350 --> 00:29:59,260
<font color="#CCCCCC">obvious what they do but be cautious as</font>

577
00:29:56,500 --> 00:30:02,140
sometimes<font color="#E5E5E5"> compiler doesn't act in</font>

578
00:29:59,260 --> 00:30:04,390
accordance with this<font color="#CCCCCC"> goal convention due</font>

579
00:30:02,140 --> 00:30:07,690
<font color="#CCCCCC">to optimizations and the plugin might</font>

580
00:30:04,390 --> 00:30:10,300
produce<font color="#E5E5E5"> their own results</font><font color="#CCCCCC"> I mostly</font><font color="#E5E5E5"> work</font>

581
00:30:07,690 --> 00:30:13,950
with<font color="#E5E5E5"> C code and don't have enough</font>

582
00:30:10,300 --> 00:30:13,950
information<font color="#E5E5E5"> about how often that happens</font>

583
00:30:14,910 --> 00:30:25,720
<font color="#E5E5E5">so here is the slide with the results of</font>

584
00:30:17,950 --> 00:30:27,610
skin in a couple of methods<font color="#CCCCCC"> and here</font><font color="#E5E5E5"> the</font>

585
00:30:25,720 --> 00:30:33,400
results after<font color="#CCCCCC"> scanning the whole virtual</font>

586
00:30:27,610 --> 00:30:35,770
table so if we can scan<font color="#E5E5E5"> virtual</font>

587
00:30:33,400 --> 00:30:38,080
functions why not to make skin of<font color="#CCCCCC"> return</font>

588
00:30:35,770 --> 00:30:40,210
value of<font color="#CCCCCC"> the constructor to the</font>

589
00:30:38,080 --> 00:30:42,870
constructor<font color="#E5E5E5"> can be called in many places</font>

590
00:30:40,210 --> 00:30:45,250
and going through all of them<font color="#E5E5E5"> and</font>

591
00:30:42,870 --> 00:30:51,250
starting scanner is obviously possible

592
00:30:45,250 --> 00:30:54,700
<font color="#CCCCCC">to automate</font><font color="#E5E5E5"> here you can see that some</font>

593
00:30:51,250 --> 00:30:59,320
<font color="#E5E5E5">constructor is very popular and it was</font>

594
00:30:54,700 --> 00:31:01,750
called more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> 500 times and we can</font>

595
00:30:59,320 --> 00:31:04,689
<font color="#CCCCCC">scan every variable that receives</font><font color="#E5E5E5"> a</font>

596
00:31:01,750 --> 00:31:07,390
value returned by this<font color="#E5E5E5"> constructor</font>

597
00:31:04,690 --> 00:31:09,980
automatically by the deep scan<font color="#CCCCCC"> returned</font>

598
00:31:07,390 --> 00:31:14,910
to value feature

599
00:31:09,980 --> 00:31:18,090
so after finalizing class creation<font color="#E5E5E5"> all</font>

600
00:31:14,910 --> 00:31:20,310
virtual tables are also added<font color="#CCCCCC"> to the</font>

601
00:31:18,090 --> 00:31:23,909
<font color="#E5E5E5">local types and you can see that they</font>

602
00:31:20,310 --> 00:31:26,129
have<font color="#E5E5E5"> function prototypes</font>

603
00:31:23,910 --> 00:31:26,580
unlike hips Gray's code<font color="#E5E5E5"> Explorer which</font>

604
00:31:26,130 --> 00:31:32,040
grades

605
00:31:26,580 --> 00:31:34,649
it's just<font color="#CCCCCC"> dwarfs with name types as I</font>

606
00:31:32,040 --> 00:31:37,800
said when members have the same name as

607
00:31:34,650 --> 00:31:40,200
some function<font color="#E5E5E5"> it is possible</font><font color="#CCCCCC"> to double</font>

608
00:31:37,800 --> 00:31:44,700
<font color="#CCCCCC">click them and</font><font color="#E5E5E5"> explore what's going on</font>

609
00:31:40,200 --> 00:31:47,550
there<font color="#CCCCCC"> also we want to rename functions</font>

610
00:31:44,700 --> 00:31:50,640
from meaningless<font color="#CCCCCC"> sub with offset</font><font color="#E5E5E5"> names</font>

611
00:31:47,550 --> 00:31:51,600
to<font color="#E5E5E5"> something more</font><font color="#CCCCCC"> sensible and</font><font color="#E5E5E5"> here</font>

612
00:31:50,640 --> 00:31:55,410
we've<font color="#E5E5E5"> got a problem</font>

613
00:31:51,600 --> 00:31:57,840
names<font color="#E5E5E5"> in virtual tables created in local</font>

614
00:31:55,410 --> 00:32:01,080
types are not synchronized<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Ida</font><font color="#E5E5E5"> Pro</font>

615
00:31:57,840 --> 00:32:06,330
functions for solving that problem there

616
00:32:01,080 --> 00:32:09,570
is a special window<font color="#E5E5E5"> named classes and it</font>

617
00:32:06,330 --> 00:32:16,350
looks<font color="#E5E5E5"> like this it is possible to rename</font>

618
00:32:09,570 --> 00:32:18,510
function here and<font color="#E5E5E5"> its name in code and</font>

619
00:32:16,350 --> 00:32:23,850
in virtual tables will also be changed

620
00:32:18,510 --> 00:32:26,850
and this window<font color="#E5E5E5"> also enables changes in</font>

621
00:32:23,850 --> 00:32:30,030
signatures for every method<font color="#E5E5E5"> by one by</font>

622
00:32:26,850 --> 00:32:32,070
one<font color="#E5E5E5"> and one more opportunity is</font><font color="#CCCCCC"> to</font>

623
00:32:30,030 --> 00:32:37,530
massively<font color="#CCCCCC"> change the first argument</font><font color="#E5E5E5"> of</font>

624
00:32:32,070 --> 00:32:42,720
methods to class name pointer<font color="#CCCCCC"> fees so</font>

625
00:32:37,530 --> 00:32:45,120
probably it's useful there are some

626
00:32:42,720 --> 00:32:47,010
other minor features my plugin offers

627
00:32:45,120 --> 00:32:49,560
among them<font color="#E5E5E5"> I would like to highlight a</font>

628
00:32:47,010 --> 00:32:52,410
possibility<font color="#E5E5E5"> to automatically rename</font>

629
00:32:49,560 --> 00:32:55,590
functions in either using rudiments<font color="#E5E5E5"> of</font>

630
00:32:52,410 --> 00:32:59,550
assertion statements sometimes they

631
00:32:55,590 --> 00:33:02,340
exist in<font color="#E5E5E5"> the code also</font><font color="#CCCCCC"> here a spy tools</font>

632
00:32:59,550 --> 00:33:04,620
allows us to insert<font color="#CCCCCC"> containing record</font>

633
00:33:02,340 --> 00:33:07,800
<font color="#CCCCCC">marker in places with negative offsets</font>

634
00:33:04,620 --> 00:33:10,290
this<font color="#E5E5E5"> marker is used quite extensively in</font>

635
00:33:07,800 --> 00:33:14,040
<font color="#CCCCCC">Windows drivers and Linux kernel models</font>

636
00:33:10,290 --> 00:33:18,720
and<font color="#E5E5E5"> x-rays usually produce ugly coat</font>

637
00:33:14,040 --> 00:33:20,490
when faces to them my plugin can assist

638
00:33:18,720 --> 00:33:22,169
<font color="#CCCCCC">in</font><font color="#E5E5E5"> transfer in reverse</font><font color="#CCCCCC"> engineering</font>

639
00:33:20,490 --> 00:33:24,710
process between<font color="#E5E5E5"> different binary</font>

640
00:33:22,169 --> 00:33:28,739
versions<font color="#E5E5E5"> if you have a lot of</font>

641
00:33:24,710 --> 00:33:30,389
reconstructed types that do not differ

642
00:33:28,739 --> 00:33:32,580
from<font color="#E5E5E5"> the new version you can use</font>

643
00:33:30,389 --> 00:33:36,149
<font color="#E5E5E5">recognized shape for fighting the</font>

644
00:33:32,580 --> 00:33:37,678
appropriate type if<font color="#E5E5E5"> you have a</font><font color="#CCCCCC"> number in</font>

645
00:33:36,149 --> 00:33:40,139
your<font color="#E5E5E5"> quote it is possible</font><font color="#CCCCCC"> to create a</font>

646
00:33:37,679 --> 00:33:42,840
list of structures<font color="#CCCCCC"> that have the size</font>

647
00:33:40,139 --> 00:33:44,399
equal to that number and<font color="#E5E5E5"> then you can</font>

648
00:33:42,840 --> 00:33:47,129
select<font color="#E5E5E5"> one of them</font><font color="#CCCCCC"> and the number and</font>

649
00:33:44,399 --> 00:33:51,238
<font color="#E5E5E5">the code will be replaced with size of</font>

650
00:33:47,129 --> 00:33:54,949
macro another possibility<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> switch</font>

651
00:33:51,239 --> 00:33:57,629
<font color="#E5E5E5">than else conditions in if branches and</font>

652
00:33:54,950 --> 00:33:59,609
there are some simplifications for

653
00:33:57,629 --> 00:34:02,580
<font color="#CCCCCC">if-then branches going</font><font color="#E5E5E5"> under the hood</font>

654
00:33:59,609 --> 00:34:06,149
but it seems like the<font color="#CCCCCC"> seventh version of</font>

655
00:34:02,580 --> 00:34:08,730
white or does<font color="#CCCCCC"> it on its own there</font><font color="#E5E5E5"> is</font>

656
00:34:06,149 --> 00:34:11,969
also a feature that builds<font color="#E5E5E5"> Dependencies</font>

657
00:34:08,730 --> 00:34:14,010
graph of structures so if you are

658
00:34:11,969 --> 00:34:18,598
<font color="#E5E5E5">interested look at readme file and</font>

659
00:34:14,010 --> 00:34:21,599
you'll find out<font color="#CCCCCC"> more in the latest</font>

660
00:34:18,599 --> 00:34:24,720
version<font color="#E5E5E5"> after spending time on</font><font color="#CCCCCC"> factoring</font>

661
00:34:21,599 --> 00:34:28,679
<font color="#E5E5E5">I singled out the part of the</font><font color="#CCCCCC"> plugin</font>

662
00:34:24,719 --> 00:34:31,199
that<font color="#E5E5E5"> is responsible for c3 parsing and</font>

663
00:34:28,679 --> 00:34:34,020
<font color="#E5E5E5">monitoring</font><font color="#CCCCCC"> for assignments into a</font>

664
00:34:31,199 --> 00:34:36,418
separate model<font color="#CCCCCC"> which is not now possible</font>

665
00:34:34,020 --> 00:34:39,089
<font color="#CCCCCC">to make some sort of dataflow</font><font color="#E5E5E5"> analysis</font>

666
00:34:36,418 --> 00:34:41,520
using x-ray CPI if you want to explore

667
00:34:39,089 --> 00:34:44,549
what is done with<font color="#E5E5E5"> some wearable or where</font>

668
00:34:41,520 --> 00:34:48,299
from something came<font color="#E5E5E5"> into it then you</font>

669
00:34:44,549 --> 00:34:50,339
might look at night but<font color="#E5E5E5"> my MPA API in my</font>

670
00:34:48,299 --> 00:34:53,549
experience it's mostly helpful to

671
00:34:50,339 --> 00:34:56,219
<font color="#E5E5E5">analyze which function which which</font>

672
00:34:53,549 --> 00:34:59,970
<font color="#CCCCCC">Raley's function arguments can</font><font color="#E5E5E5"> get for</font>

673
00:34:56,219 --> 00:35:03,029
<font color="#CCCCCC">example</font><font color="#E5E5E5"> I had the device where a</font><font color="#CCCCCC"> sin</font>

674
00:34:59,970 --> 00:35:07,950
point had the same<font color="#CCCCCC"> buffer for input and</font>

675
00:35:03,030 --> 00:35:10,740
<font color="#E5E5E5">output and I needed</font><font color="#CCCCCC"> to find</font><font color="#E5E5E5"> all places</font>

676
00:35:07,950 --> 00:35:12,450
<font color="#E5E5E5">in the code with those conditions in</font>

677
00:35:10,740 --> 00:35:15,959
order<font color="#E5E5E5"> to understand whether I trigger it</font>

678
00:35:12,450 --> 00:35:18,868
without<font color="#E5E5E5"> authentication and using the C</font>

679
00:35:15,960 --> 00:35:21,180
API it is much<font color="#CCCCCC"> easier than writing a</font>

680
00:35:18,869 --> 00:35:23,480
script with<font color="#CCCCCC"> the hex race</font><font color="#E5E5E5"> API from the</font>

681
00:35:21,180 --> 00:35:23,480
scratch

682
00:35:25,650 --> 00:35:31,330
so<font color="#E5E5E5"> this API</font><font color="#CCCCCC"> is just for classes for</font><font color="#E5E5E5"> all</font>

683
00:35:28,960 --> 00:35:34,300
sorts of visiting and<font color="#E5E5E5"> they use dyes the</font>

684
00:35:31,330 --> 00:35:37,330
through inheritance<font color="#E5E5E5"> and override and</font><font color="#CCCCCC"> 103</font>

685
00:35:34,300 --> 00:35:44,440
<font color="#CCCCCC">methods or through set callback function</font>

686
00:35:37,330 --> 00:35:46,630
<font color="#CCCCCC">I extensively use x-ray spy tools in my</font>

687
00:35:44,440 --> 00:35:49,510
work<font color="#E5E5E5"> so you may</font><font color="#CCCCCC"> expect</font><font color="#E5E5E5"> that it will</font><font color="#CCCCCC"> be</font>

688
00:35:46,630 --> 00:35:52,540
developed<font color="#CCCCCC"> in the</font><font color="#E5E5E5"> future</font><font color="#CCCCCC"> and here's what</font>

689
00:35:49,510 --> 00:35:55,300
<font color="#E5E5E5">I'm planing to it first of all I want to</font>

690
00:35:52,540 --> 00:35:57,970
<font color="#E5E5E5">inheritance support since</font><font color="#CCCCCC"> I have a</font>

691
00:35:55,300 --> 00:36:01,000
tricky idea how to implement it in spite

692
00:35:57,970 --> 00:36:04,379
of<font color="#E5E5E5"> being limited with</font><font color="#CCCCCC"> C like structures</font>

693
00:36:01,000 --> 00:36:07,680
only<font color="#E5E5E5"> also I'd like to add</font><font color="#CCCCCC"> Scanian</font>

694
00:36:04,380 --> 00:36:10,119
negative offsets their core<font color="#E5E5E5"> an</font>

695
00:36:07,680 --> 00:36:14,529
object-oriented code<font color="#E5E5E5"> with multiple</font>

696
00:36:10,119 --> 00:36:16,720
<font color="#E5E5E5">inheritance implicit maintenance of</font>

697
00:36:14,530 --> 00:36:19,180
cross references to virtual functions

698
00:36:16,720 --> 00:36:24,609
would allow us<font color="#E5E5E5"> to see them through the</font>

699
00:36:19,180 --> 00:36:28,660
<font color="#CCCCCC">regul</font><font color="#E5E5E5"> ID windows and api and i would be</font>

700
00:36:24,609 --> 00:36:30,940
glad if<font color="#CCCCCC"> i did</font><font color="#E5E5E5"> that work and</font><font color="#CCCCCC"> i have a far</font>

701
00:36:28,660 --> 00:36:34,118
far goal to combine<font color="#CCCCCC"> gas</font><font color="#E5E5E5"> allocator</font>

702
00:36:30,940 --> 00:36:38,230
feature with deep scan<font color="#E5E5E5"> to fully automate</font>

703
00:36:34,119 --> 00:36:39,880
<font color="#E5E5E5">the structure reconstruction process an</font>

704
00:36:38,230 --> 00:36:42,930
addition<font color="#CCCCCC"> i would</font><font color="#E5E5E5"> like to update with me</font>

705
00:36:39,880 --> 00:36:46,980
so that information<font color="#CCCCCC"> about how it is used</font>

706
00:36:42,930 --> 00:36:50,919
<font color="#CCCCCC">wouldn't</font><font color="#E5E5E5"> be not only in my head</font>

707
00:36:46,980 --> 00:36:58,060
descriptions the<font color="#E5E5E5"> two TS now are for half</font>

708
00:36:50,920 --> 00:37:00,430
a year<font color="#CCCCCC"> ago</font><font color="#E5E5E5"> version so as you have seen</font>

709
00:36:58,060 --> 00:37:02,680
x-rays<font color="#E5E5E5"> by tools support structure</font>

710
00:37:00,430 --> 00:37:05,890
construction completely from<font color="#CCCCCC"> its very</font>

711
00:37:02,680 --> 00:37:08,500
<font color="#E5E5E5">creation to</font><font color="#CCCCCC"> the stage when there</font><font color="#E5E5E5"> is a</font>

712
00:37:05,890 --> 00:37:10,990
lot<font color="#E5E5E5"> of structures might afterwards and</font>

713
00:37:08,500 --> 00:37:13,630
it makes reverse<font color="#CCCCCC"> engineering a more</font>

714
00:37:10,990 --> 00:37:16,089
pleasant process<font color="#CCCCCC"> so if you have any</font>

715
00:37:13,630 --> 00:37:18,849
questions you may ask<font color="#CCCCCC"> and by the well</font>

716
00:37:16,089 --> 00:37:21,880
pull requests are welcomed<font color="#E5E5E5"> and if you</font>

717
00:37:18,849 --> 00:37:25,540
have interest<font color="#E5E5E5"> this idea about how</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font>

718
00:37:21,880 --> 00:37:28,800
<font color="#E5E5E5">compile the compiler can be enhanced</font><font color="#CCCCCC"> we</font>

719
00:37:25,540 --> 00:37:28,800
may also discuss that

