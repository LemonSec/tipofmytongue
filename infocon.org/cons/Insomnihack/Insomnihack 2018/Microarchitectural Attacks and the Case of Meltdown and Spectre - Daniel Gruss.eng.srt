1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:13,449 --> 00:00:19,220
yeah thanks for<font color="#E5E5E5"> having</font><font color="#CCCCCC"> me here</font><font color="#E5E5E5"> thanks</font>

3
00:00:16,580 --> 00:00:21,409
for<font color="#E5E5E5"> being here also today I'm going to</font>

4
00:00:19,220 --> 00:00:24,049
<font color="#E5E5E5">talk about microarchitecture attacks in</font>

5
00:00:21,410 --> 00:00:27,650
general and in specific<font color="#E5E5E5"> meltdown and</font>

6
00:00:24,050 --> 00:00:29,000
<font color="#CCCCCC">Specter just</font><font color="#E5E5E5"> before we dive into the</font>

7
00:00:27,650 --> 00:00:31,788
topic<font color="#E5E5E5"> I want to start with some</font>

8
00:00:29,000 --> 00:00:34,070
vulnerability assessment so<font color="#CCCCCC"> meltdown</font>

9
00:00:31,789 --> 00:00:36,350
inspector<font color="#E5E5E5"> a</font><font color="#CCCCCC"> CPU vulnerabilities they</font>

10
00:00:34,070 --> 00:00:38,390
exist in<font color="#E5E5E5"> Hardware basically and they</font>

11
00:00:36,350 --> 00:00:40,610
were discovered in 2017 by four

12
00:00:38,390 --> 00:00:42,770
independent<font color="#E5E5E5"> teams and during the</font>

13
00:00:40,610 --> 00:00:46,100
<font color="#CCCCCC">responsibility's closure</font><font color="#E5E5E5"> interrogators</font>

14
00:00:42,770 --> 00:00:50,149
connected and that's how things evolved

15
00:00:46,100 --> 00:00:55,090
and there will be<font color="#CCCCCC"> two papers with also</font>

16
00:00:50,149 --> 00:00:58,250
authors from all four teams<font color="#E5E5E5"> soon enough</font>

17
00:00:55,090 --> 00:01:01,700
<font color="#CCCCCC">you</font><font color="#E5E5E5"> already saw the draft versions of</font>

18
00:00:58,250 --> 00:01:03,710
them I guess<font color="#E5E5E5"> yeah due to</font><font color="#CCCCCC"> him</font>

19
00:01:01,700 --> 00:01:06,950
due to an embargo we<font color="#E5E5E5"> only released them</font>

20
00:01:03,710 --> 00:01:08,810
in early 2018<font color="#E5E5E5"> and yeah there was a lot</font>

21
00:01:06,950 --> 00:01:13,520
of<font color="#E5E5E5"> news</font><font color="#CCCCCC"> coverage you might have seen</font><font color="#E5E5E5"> it</font>

22
00:01:08,810 --> 00:01:16,880
<font color="#E5E5E5">Fox News CNN we had BBC CNBC there's a</font>

23
00:01:13,520 --> 00:01:20,090
Wikipedia page<font color="#CCCCCC"> I really</font><font color="#E5E5E5"> like that also</font>

24
00:01:16,880 --> 00:01:23,330
for<font color="#E5E5E5"> Spectre another one</font><font color="#CCCCCC"> we also liked</font>

25
00:01:20,090 --> 00:01:28,369
the xkcd comic and the<font color="#CCCCCC"> one</font><font color="#E5E5E5"> on comic</font>

26
00:01:23,330 --> 00:01:30,798
strip<font color="#E5E5E5"> and then we had this tweet from</font>

27
00:01:28,369 --> 00:01:34,100
<font color="#E5E5E5">Edward Snowden</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> this was funny</font>

28
00:01:30,799 --> 00:01:38,030
because<font color="#CCCCCC"> Mahesh Bhatt's</font><font color="#E5E5E5"> who posted this</font>

29
00:01:34,100 --> 00:01:41,030
on Twitter this video<font color="#E5E5E5"> later on got</font><font color="#CCCCCC"> the</font>

30
00:01:38,030 --> 00:01:44,240
question from from other people and they

31
00:01:41,030 --> 00:01:46,430
asked him how he dares<font color="#E5E5E5"> to just copy this</font>

32
00:01:44,240 --> 00:01:50,720
video<font color="#E5E5E5"> from Edward Snowden without giving</font>

33
00:01:46,430 --> 00:01:53,360
credit<font color="#CCCCCC"> to</font><font color="#E5E5E5"> him so yeah they didn't see</font>

34
00:01:50,720 --> 00:01:56,329
that the time stamp was earlier than the

35
00:01:53,360 --> 00:01:58,520
time stamp from Edward Snowden<font color="#CCCCCC"> so let's</font>

36
00:01:56,329 --> 00:02:01,399
first talk about<font color="#CCCCCC"> mate</font><font color="#E5E5E5"> on so what is the</font>

37
00:01:58,520 --> 00:02:04,579
underlying issue here<font color="#CCCCCC"> for that we</font><font color="#E5E5E5"> have</font>

38
00:02:01,399 --> 00:02:06,829
to understand how<font color="#CCCCCC"> Harbor isolation works</font>

39
00:02:04,579 --> 00:02:08,989
<font color="#E5E5E5">so we have if we look at a modern</font>

40
00:02:06,829 --> 00:02:11,299
<font color="#CCCCCC">operating system at a modern system</font><font color="#E5E5E5"> you</font>

41
00:02:08,989 --> 00:02:13,189
have that the kernel isolated from the

42
00:02:11,299 --> 00:02:15,469
user space<font color="#E5E5E5"> so you have some some huge</font>

43
00:02:13,189 --> 00:02:17,980
wall<font color="#CCCCCC"> between the user space and the</font>

44
00:02:15,469 --> 00:02:17,980
kernel space

45
00:02:18,090 --> 00:02:24,150
yeah you can't cross this wall except

46
00:02:20,849 --> 00:02:25,769
for with<font color="#E5E5E5"> Cisco and this is a</font><font color="#CCCCCC"> well</font>

47
00:02:24,150 --> 00:02:27,810
<font color="#CCCCCC">defined interface so</font><font color="#E5E5E5"> you can't cross it</font>

48
00:02:25,770 --> 00:02:31,860
<font color="#CCCCCC">if the</font><font color="#E5E5E5"> kernel doesn't want you to cross</font>

49
00:02:27,810 --> 00:02:34,860
it<font color="#CCCCCC"> so</font><font color="#E5E5E5"> what happens here</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> that the</font>

50
00:02:31,860 --> 00:02:36,750
user space applications<font color="#E5E5E5"> can't have</font>

51
00:02:34,860 --> 00:02:40,530
direct access on each other

52
00:02:36,750 --> 00:02:42,840
<font color="#E5E5E5">so for instance my photo app may not</font>

53
00:02:40,530 --> 00:02:45,120
have<font color="#CCCCCC"> access to my private emails which</font>

54
00:02:42,840 --> 00:02:47,459
<font color="#CCCCCC">is a good thing or they the calendar app</font>

55
00:02:45,120 --> 00:02:50,730
might not have access<font color="#E5E5E5"> to the private</font>

56
00:02:47,459 --> 00:02:53,370
<font color="#E5E5E5">emails probably a good thing what</font>

57
00:02:50,730 --> 00:02:55,530
meltdown does now is<font color="#E5E5E5"> it breaks the wall</font>

58
00:02:53,370 --> 00:02:57,480
<font color="#CCCCCC">so the</font><font color="#E5E5E5"> wall is</font><font color="#CCCCCC"> gone</font><font color="#E5E5E5"> and the user</font>

59
00:02:55,530 --> 00:03:00,209
applications can access<font color="#CCCCCC"> anything in the</font>

60
00:02:57,480 --> 00:03:02,849
kernel they can<font color="#E5E5E5"> access the</font><font color="#CCCCCC"> entire</font>

61
00:03:00,209 --> 00:03:04,680
physical<font color="#E5E5E5"> memory and that includes all</font>

62
00:03:02,849 --> 00:03:07,829
<font color="#CCCCCC">the memory of</font><font color="#E5E5E5"> the other applications as</font>

63
00:03:04,680 --> 00:03:10,110
well<font color="#E5E5E5"> great so here I have put that</font><font color="#CCCCCC"> on</font>

64
00:03:07,830 --> 00:03:12,630
the slides explicitly<font color="#E5E5E5"> meltdown can read</font>

65
00:03:10,110 --> 00:03:16,680
the entire DRAM<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> no region in</font>

66
00:03:12,630 --> 00:03:19,200
DRAM that meltdown can't read<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> next</font>

67
00:03:16,680 --> 00:03:20,900
point what are<font color="#CCCCCC"> the requirements for</font>

68
00:03:19,200 --> 00:03:24,600
meltdown

69
00:03:20,900 --> 00:03:27,390
you need an<font color="#E5E5E5"> inter CPU or an arm CPU</font>

70
00:03:24,600 --> 00:03:31,260
there's one arm CPU that<font color="#E5E5E5"> is affected by</font>

71
00:03:27,390 --> 00:03:33,268
this issue and<font color="#CCCCCC"> AMD's and other arms seem</font>

72
00:03:31,260 --> 00:03:36,899
to be unaffected<font color="#E5E5E5"> but we don't know for</font>

73
00:03:33,269 --> 00:03:39,569
<font color="#E5E5E5">sure so</font><font color="#CCCCCC"> far no one was able</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> reproduce</font>

74
00:03:36,900 --> 00:03:41,190
it and the problem here<font color="#E5E5E5"> is that the</font>

75
00:03:39,569 --> 00:03:44,160
permission check seems to be done in

76
00:03:41,190 --> 00:03:45,900
<font color="#CCCCCC">parallel to the</font><font color="#E5E5E5"> load instruction so it's</font>

77
00:03:44,160 --> 00:03:48,480
a race<font color="#CCCCCC"> condition between</font><font color="#E5E5E5"> the permission</font>

78
00:03:45,900 --> 00:03:50,730
check and other dependent operations

79
00:03:48,480 --> 00:03:53,310
<font color="#E5E5E5">after the permission check should have</font>

80
00:03:50,730 --> 00:03:57,600
<font color="#CCCCCC">happened there are different variants</font><font color="#E5E5E5"> of</font>

81
00:03:53,310 --> 00:03:59,280
<font color="#CCCCCC">madam</font><font color="#E5E5E5"> specifically</font><font color="#CCCCCC"> - and the second</font>

82
00:03:57,600 --> 00:04:04,440
variant of meltdown<font color="#E5E5E5"> just reads</font>

83
00:03:59,280 --> 00:04:07,560
privileged registers and here<font color="#E5E5E5"> yeah this</font>

84
00:04:04,440 --> 00:04:11,670
is typically if<font color="#E5E5E5"> we think about this</font>

85
00:04:07,560 --> 00:04:13,709
method<font color="#CCCCCC"> we think about arm</font><font color="#E5E5E5"> CPUs</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> are</font>

86
00:04:11,670 --> 00:04:15,690
<font color="#CCCCCC">also Intel processors where this has</font>

87
00:04:13,709 --> 00:04:18,149
<font color="#E5E5E5">been reported</font><font color="#CCCCCC"> but this affects mostly</font>

88
00:04:15,690 --> 00:04:22,019
arm CPUs and there you can read the

89
00:04:18,149 --> 00:04:25,229
content<font color="#E5E5E5"> from privileged registers what</font>

90
00:04:22,019 --> 00:04:27,180
do you need to do to exploit<font color="#E5E5E5"> this</font><font color="#CCCCCC"> well</font>

91
00:04:25,229 --> 00:04:30,510
you need<font color="#E5E5E5"> some form of code execution on</font>

92
00:04:27,180 --> 00:04:31,920
the<font color="#CCCCCC"> device</font><font color="#E5E5E5"> so for instance an app it</font>

93
00:04:30,510 --> 00:04:34,050
might<font color="#E5E5E5"> be possible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> explore it</font>

94
00:04:31,920 --> 00:04:38,780
from JavaScript<font color="#CCCCCC"> I can very well imagine</font>

95
00:04:34,050 --> 00:04:41,220
that<font color="#CCCCCC"> and then you can yeah basically</font>

96
00:04:38,780 --> 00:04:44,210
<font color="#CCCCCC">read the entire memory untrusted code</font>

97
00:04:41,220 --> 00:04:46,350
can read the entire<font color="#E5E5E5"> memory and</font>

98
00:04:44,210 --> 00:04:51,840
fortunately it can't be triggered

99
00:04:46,350 --> 00:04:53,700
remotely<font color="#E5E5E5"> mmm probably</font><font color="#CCCCCC"> I guess but</font>

100
00:04:51,840 --> 00:04:56,520
<font color="#CCCCCC">there's proof</font><font color="#E5E5E5"> of concept code</font><font color="#CCCCCC"> online to</font>

101
00:04:53,700 --> 00:05:00,360
exploit it from native<font color="#CCCCCC"> code so yeah I</font>

102
00:04:56,520 --> 00:05:02,700
would expect that<font color="#E5E5E5"> everyone now is aware</font>

103
00:05:00,360 --> 00:05:04,770
how you can exploit it and<font color="#E5E5E5"> so we all</font>

104
00:05:02,700 --> 00:05:06,900
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> install our patches so that we</font>

105
00:05:04,770 --> 00:05:09,539
are<font color="#E5E5E5"> protected against</font><font color="#CCCCCC"> it and let's hope</font>

106
00:05:06,900 --> 00:05:14,130
that<font color="#E5E5E5"> the software and hardware vendors</font>

107
00:05:09,540 --> 00:05:17,760
now get the patches right<font color="#CCCCCC"> so meltdown is</font>

108
00:05:14,130 --> 00:05:20,180
<font color="#E5E5E5">really easy to reproduce</font><font color="#CCCCCC"> if you hand the</font>

109
00:05:17,760 --> 00:05:23,820
<font color="#CCCCCC">proof-of-concept</font><font color="#E5E5E5"> that we have put online</font>

110
00:05:20,180 --> 00:05:27,000
<font color="#E5E5E5">to some undergraduate in computer</font>

111
00:05:23,820 --> 00:05:29,370
science<font color="#E5E5E5"> student they will have a working</font>

112
00:05:27,000 --> 00:05:32,940
attack which can read arbitrary memory

113
00:05:29,370 --> 00:05:35,660
<font color="#E5E5E5">within</font><font color="#CCCCCC"> an hour on their machine running</font>

114
00:05:32,940 --> 00:05:40,290
<font color="#E5E5E5">so this is really</font><font color="#CCCCCC"> easy to reproduce so</font>

115
00:05:35,660 --> 00:05:43,200
<font color="#CCCCCC">this is a huge threat</font><font color="#E5E5E5"> their form</font><font color="#CCCCCC"> specter</font>

116
00:05:40,290 --> 00:05:46,200
is a bit different inspector you

117
00:05:43,200 --> 00:05:48,630
<font color="#E5E5E5">actually don't try to cross some wall</font>

118
00:05:46,200 --> 00:05:51,030
but you do<font color="#E5E5E5"> something different you try</font>

119
00:05:48,630 --> 00:05:54,390
to to trick someone into spilling their

120
00:05:51,030 --> 00:05:56,640
secrets and you do that by<font color="#CCCCCC"> mist training</font>

121
00:05:54,390 --> 00:06:00,180
branch prediction<font color="#E5E5E5"> and branch prediction</font>

122
00:05:56,640 --> 00:06:01,770
is used all over the<font color="#E5E5E5"> all over the code</font>

123
00:06:00,180 --> 00:06:04,080
execution in your processor so it used

124
00:06:01,770 --> 00:06:06,840
refused<font color="#E5E5E5"> all the time and when a</font>

125
00:06:04,080 --> 00:06:08,580
different process<font color="#E5E5E5"> tries to predict the</font>

126
00:06:06,840 --> 00:06:10,140
branch it will predict the branch<font color="#E5E5E5"> based</font>

127
00:06:08,580 --> 00:06:11,400
on the virtual address<font color="#E5E5E5"> because it has to</font>

128
00:06:10,140 --> 00:06:14,820
<font color="#E5E5E5">be really fast so it will use the</font>

129
00:06:11,400 --> 00:06:17,849
<font color="#CCCCCC">virtual address</font><font color="#E5E5E5"> and this process you</font><font color="#CCCCCC"> can</font>

130
00:06:14,820 --> 00:06:20,099
manipulate<font color="#E5E5E5"> that and</font><font color="#CCCCCC"> have the process or</font>

131
00:06:17,850 --> 00:06:22,050
<font color="#E5E5E5">miss</font><font color="#CCCCCC"> speculates so it will speculatively</font>

132
00:06:20,100 --> 00:06:24,240
<font color="#E5E5E5">execute code which should not</font><font color="#CCCCCC"> be</font>

133
00:06:22,050 --> 00:06:27,470
executed<font color="#E5E5E5"> in some</font><font color="#CCCCCC"> cases even code</font><font color="#E5E5E5"> which</font>

134
00:06:24,240 --> 00:06:30,570
would never be<font color="#CCCCCC"> executed in this program</font>

135
00:06:27,470 --> 00:06:34,140
yes this is the case<font color="#CCCCCC"> of indirect calls</font>

136
00:06:30,570 --> 00:06:36,030
for instance so<font color="#CCCCCC"> Specter convinces the</font>

137
00:06:34,140 --> 00:06:39,090
<font color="#CCCCCC">other program to execute some code</font><font color="#E5E5E5"> and</font>

138
00:06:36,030 --> 00:06:41,880
by that<font color="#CCCCCC"> speed</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> secrets it effects</font>

139
00:06:39,090 --> 00:06:44,700
<font color="#CCCCCC">interests abuse AMD CPUs also some arm</font>

140
00:06:41,880 --> 00:06:45,719
<font color="#E5E5E5">CPUs are affected a wider range of arm</font>

141
00:06:44,700 --> 00:06:48,030
CPUs are affected

142
00:06:45,720 --> 00:06:51,000
and the problem here<font color="#CCCCCC"> is</font><font color="#E5E5E5"> speculative</font>

143
00:06:48,030 --> 00:06:53,669
<font color="#CCCCCC">execution of branches</font><font color="#E5E5E5"> and there you do</font>

144
00:06:51,000 --> 00:06:55,470
memory<font color="#E5E5E5"> excesses in there or other things</font>

145
00:06:53,670 --> 00:06:57,840
<font color="#E5E5E5">that leave</font><font color="#CCCCCC"> micron architectural traces</font>

146
00:06:55,470 --> 00:07:00,330
memory<font color="#CCCCCC"> excesses and</font><font color="#E5E5E5"> cache hits and cache</font>

147
00:06:57,840 --> 00:07:02,719
misses aren't by far not the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> micro</font>

148
00:07:00,330 --> 00:07:05,729
architectural effect that we can observe

149
00:07:02,720 --> 00:07:08,040
what<font color="#E5E5E5"> about the exploit ability so again</font>

150
00:07:05,730 --> 00:07:11,850
<font color="#CCCCCC">spectra requires</font><font color="#E5E5E5"> just like meltdown code</font>

151
00:07:08,040 --> 00:07:17,580
execution on<font color="#CCCCCC"> the device so untrusted</font>

152
00:07:11,850 --> 00:07:18,660
code<font color="#E5E5E5"> can convince a trusted region to</font>

153
00:07:17,580 --> 00:07:21,120
spill their secrets

154
00:07:18,660 --> 00:07:24,990
for instance in JavaScript you could

155
00:07:21,120 --> 00:07:26,820
break out<font color="#CCCCCC"> of the sandbox</font><font color="#E5E5E5"> and yeah it can</font>

156
00:07:24,990 --> 00:07:29,100
<font color="#CCCCCC">be triggered</font><font color="#E5E5E5"> remotely to some extent</font>

157
00:07:26,820 --> 00:07:31,790
yeah<font color="#E5E5E5"> through the browser</font><font color="#CCCCCC"> but it's still</font>

158
00:07:29,100 --> 00:07:34,730
some form of<font color="#E5E5E5"> local code execution</font>

159
00:07:31,790 --> 00:07:38,550
<font color="#CCCCCC">there's</font><font color="#E5E5E5"> also proof of concept code</font>

160
00:07:34,730 --> 00:07:40,380
<font color="#E5E5E5">available online and you</font><font color="#CCCCCC"> need a lot of</font>

161
00:07:38,550 --> 00:07:42,390
information<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the environment</font><font color="#CCCCCC"> so you</font>

162
00:07:40,380 --> 00:07:44,430
need to know<font color="#CCCCCC"> how</font><font color="#E5E5E5"> to miss train the</font>

163
00:07:42,390 --> 00:07:45,659
branch predictor so it's a bit more

164
00:07:44,430 --> 00:07:49,350
<font color="#CCCCCC">difficult to reproduce</font>

165
00:07:45,660 --> 00:07:51,810
<font color="#E5E5E5">maybe Hart is a bit too too strict</font><font color="#CCCCCC"> I</font>

166
00:07:49,350 --> 00:07:55,290
think it's still<font color="#CCCCCC"> very</font><font color="#E5E5E5"> much doable within</font>

167
00:07:51,810 --> 00:07:57,480
a day's work<font color="#E5E5E5"> okay let's go for some</font>

168
00:07:55,290 --> 00:08:00,890
background<font color="#CCCCCC"> what are we talking about</font>

169
00:07:57,480 --> 00:08:03,780
here we are talking<font color="#CCCCCC"> about</font>

170
00:08:00,890 --> 00:08:06,080
<font color="#CCCCCC">microarchitecture latex</font><font color="#E5E5E5"> it's related to</font>

171
00:08:03,780 --> 00:08:08,159
<font color="#CCCCCC">side-channel attacks and cybernetics</font>

172
00:08:06,080 --> 00:08:09,810
<font color="#E5E5E5">probably you all know that from the</font>

173
00:08:08,160 --> 00:08:12,960
movies when you want to crack a safe

174
00:08:09,810 --> 00:08:15,479
open<font color="#E5E5E5"> how do you do that you use a</font>

175
00:08:12,960 --> 00:08:19,109
stethoscope<font color="#CCCCCC"> and you listen</font><font color="#E5E5E5"> to the</font>

176
00:08:15,479 --> 00:08:21,750
clicking noises that the safe look<font color="#CCCCCC"> does</font>

177
00:08:19,110 --> 00:08:25,530
<font color="#E5E5E5">by turning the wheel</font><font color="#CCCCCC"> and when of when</font>

178
00:08:21,750 --> 00:08:27,090
one of the<font color="#CCCCCC"> latches</font><font color="#E5E5E5"> snaps in it will make</font>

179
00:08:25,530 --> 00:08:28,440
a<font color="#E5E5E5"> clicking noise and you can hear</font><font color="#CCCCCC"> that</font>

180
00:08:27,090 --> 00:08:29,640
and then you know you<font color="#E5E5E5"> have to turn the</font>

181
00:08:28,440 --> 00:08:32,010
<font color="#CCCCCC">wheel the other direction</font>

182
00:08:29,640 --> 00:08:34,799
so with that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> will figure out the</font>

183
00:08:32,010 --> 00:08:36,900
<font color="#E5E5E5">secret combination</font><font color="#CCCCCC"> of the safe of</font><font color="#E5E5E5"> course</font>

184
00:08:34,799 --> 00:08:41,159
in<font color="#CCCCCC"> modern processors we don't have</font>

185
00:08:36,900 --> 00:08:42,990
clicking noises<font color="#E5E5E5"> most of the time but we</font>

186
00:08:41,159 --> 00:08:45,450
have other<font color="#E5E5E5"> effects and there we get to</font>

187
00:08:42,990 --> 00:08:47,310
the CPU cache let's think about<font color="#E5E5E5"> this</font>

188
00:08:45,450 --> 00:08:49,140
<font color="#E5E5E5">very simple</font><font color="#CCCCCC"> program where we access a</font>

189
00:08:47,310 --> 00:08:52,109
<font color="#E5E5E5">local variable or a global variable</font>

190
00:08:49,140 --> 00:08:54,600
twice the first<font color="#CCCCCC"> time we access it it</font>

191
00:08:52,110 --> 00:08:57,750
will be a cache miss but then if it's a

192
00:08:54,600 --> 00:08:59,459
cache miss the processor has<font color="#CCCCCC"> to fetch it</font>

193
00:08:57,750 --> 00:09:01,949
<font color="#E5E5E5">from</font><font color="#CCCCCC"> the main memory</font>

194
00:08:59,459 --> 00:09:04,529
from<font color="#CCCCCC"> DRM so it sends</font><font color="#E5E5E5"> a request to DRM</font>

195
00:09:01,949 --> 00:09:07,079
and then it gets original response<font color="#E5E5E5"> later</font>

196
00:09:04,529 --> 00:09:11,610
on a<font color="#E5E5E5"> few hundred</font><font color="#CCCCCC"> cycles later</font><font color="#E5E5E5"> and then</font>

197
00:09:07,079 --> 00:09:14,069
it's loaded into<font color="#E5E5E5"> the cache the second</font>

198
00:09:11,610 --> 00:09:17,279
time we access it<font color="#E5E5E5"> the processor has it</font>

199
00:09:14,069 --> 00:09:19,649
cached<font color="#CCCCCC"> so it's a cache hit</font><font color="#E5E5E5"> so the first</font>

200
00:09:17,279 --> 00:09:23,160
one was<font color="#CCCCCC"> a DRM access</font><font color="#E5E5E5"> it's slow second</font>

201
00:09:19,649 --> 00:09:24,540
was no DRM access so it's fast if we

202
00:09:23,160 --> 00:09:26,999
have a<font color="#E5E5E5"> timing difference between</font>

203
00:09:24,540 --> 00:09:29,360
something<font color="#E5E5E5"> fast and something slow or</font>

204
00:09:26,999 --> 00:09:32,550
more in generally if we<font color="#E5E5E5"> have some</font>

205
00:09:29,360 --> 00:09:35,309
difference that we<font color="#E5E5E5"> can measure it could</font>

206
00:09:32,550 --> 00:09:37,050
also be<font color="#E5E5E5"> some behavioral difference then</font>

207
00:09:35,309 --> 00:09:41,009
we have some something where we<font color="#E5E5E5"> might</font>

208
00:09:37,050 --> 00:09:42,779
build in and check<font color="#E5E5E5"> flood and reload we</font>

209
00:09:41,009 --> 00:09:45,569
start with this flush and reload attack

210
00:09:42,779 --> 00:09:48,899
which is<font color="#CCCCCC"> a very easy to understand cache</font>

211
00:09:45,569 --> 00:09:52,740
attack and which was discovered in 2014

212
00:09:48,899 --> 00:09:54,600
<font color="#E5E5E5">or 2013 and here we assume that the</font>

213
00:09:52,740 --> 00:09:56,939
<font color="#E5E5E5">attacker and</font><font color="#CCCCCC"> the victim have some shared</font>

214
00:09:54,600 --> 00:09:59,490
<font color="#E5E5E5">memory for instance</font><font color="#CCCCCC"> the shared</font><font color="#E5E5E5"> library</font>

215
00:09:56,939 --> 00:10:01,230
or some binary<font color="#E5E5E5"> all binaries are shared</font>

216
00:09:59,490 --> 00:10:04,470
among all processes if they open them

217
00:10:01,230 --> 00:10:06,689
with<font color="#E5E5E5"> a map and if some memory</font><font color="#CCCCCC"> location</font>

218
00:10:04,470 --> 00:10:10,610
is cached for one of the processes<font color="#CCCCCC"> it's</font>

219
00:10:06,689 --> 00:10:14,670
cached<font color="#E5E5E5"> for both now the attacker has the</font>

220
00:10:10,610 --> 00:10:16,589
x86<font color="#CCCCCC"> CL</font><font color="#E5E5E5"> flash instruction at disposal so</font>

221
00:10:14,670 --> 00:10:18,449
it can<font color="#CCCCCC"> just use this flush instruction</font>

222
00:10:16,589 --> 00:10:21,749
<font color="#E5E5E5">throw something out of the cache and</font>

223
00:10:18,449 --> 00:10:24,209
then at some<font color="#CCCCCC"> point later on</font><font color="#E5E5E5"> and reload</font>

224
00:10:21,749 --> 00:10:26,399
the<font color="#CCCCCC"> data into the cache and measure how</font>

225
00:10:24,209 --> 00:10:28,199
long<font color="#CCCCCC"> it takes and if the victim in the</font>

226
00:10:26,399 --> 00:10:31,139
meantime<font color="#E5E5E5"> accesses the memory location</font>

227
00:10:28,199 --> 00:10:33,868
then it will be cached and if the

228
00:10:31,139 --> 00:10:37,920
attacker now accesses the same shared

229
00:10:33,869 --> 00:10:39,649
memory location<font color="#E5E5E5"> it's fast otherwise</font><font color="#CCCCCC"> if</font>

230
00:10:37,920 --> 00:10:41,878
the victim didn't access it<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> slow</font>

231
00:10:39,649 --> 00:10:43,860
<font color="#E5E5E5">let's look at a histogram so that you</font>

232
00:10:41,879 --> 00:10:45,929
see<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> is really a clear timing</font>

233
00:10:43,860 --> 00:10:48,179
difference<font color="#E5E5E5"> and this is the case if the</font>

234
00:10:45,929 --> 00:10:49,529
variable<font color="#E5E5E5"> is cached</font><font color="#CCCCCC"> or if we</font><font color="#E5E5E5"> try to have</font>

235
00:10:48,179 --> 00:10:52,079
the variable cache there might still be

236
00:10:49,529 --> 00:10:54,059
cases where it<font color="#E5E5E5"> takes more time but</font><font color="#CCCCCC"> most</font>

237
00:10:52,079 --> 00:10:57,508
of the cases here are around 50 cycles

238
00:10:54,059 --> 00:10:59,189
<font color="#CCCCCC">and if I'm</font><font color="#E5E5E5"> trying to throw the data out</font>

239
00:10:57,509 --> 00:11:02,459
<font color="#CCCCCC">of the cache and then</font><font color="#E5E5E5"> access it</font>

240
00:10:59,189 --> 00:11:04,439
I have timings that<font color="#E5E5E5"> are above 200 cycles</font>

241
00:11:02,459 --> 00:11:06,919
<font color="#E5E5E5">and there's not a single instance</font><font color="#CCCCCC"> where</font>

242
00:11:04,439 --> 00:11:09,240
I measured a timing below 200 cycles

243
00:11:06,919 --> 00:11:10,290
which is quite nice<font color="#CCCCCC"> because</font><font color="#E5E5E5"> then you</font>

244
00:11:09,240 --> 00:11:12,299
<font color="#E5E5E5">don't have to know anything about</font>

245
00:11:10,290 --> 00:11:13,110
statistics<font color="#E5E5E5"> or you can just put a threat</font>

246
00:11:12,299 --> 00:11:15,300
<font color="#CCCCCC">over there and</font>

247
00:11:13,110 --> 00:11:17,970
be done<font color="#CCCCCC"> with the distinguishing</font><font color="#E5E5E5"> the two</font>

248
00:11:15,300 --> 00:11:20,579
<font color="#E5E5E5">cases we will build the</font><font color="#CCCCCC"> first attack</font>

249
00:11:17,970 --> 00:11:23,399
with that<font color="#E5E5E5"> here I just iterate over lip G</font>

250
00:11:20,579 --> 00:11:25,380
<font color="#E5E5E5">edit and type keys into G</font><font color="#CCCCCC"> edit while</font>

251
00:11:23,399 --> 00:11:26,910
doing that<font color="#E5E5E5"> and I print the number of</font>

252
00:11:25,380 --> 00:11:29,880
<font color="#E5E5E5">cache hits that</font><font color="#CCCCCC"> are observed on these</font>

253
00:11:26,910 --> 00:11:32,100
addresses<font color="#CCCCCC"> and then I</font><font color="#E5E5E5"> will just</font><font color="#CCCCCC"> pick one</font>

254
00:11:29,880 --> 00:11:34,529
<font color="#CCCCCC">of those addresses that</font><font color="#E5E5E5"> had like maybe</font>

255
00:11:32,100 --> 00:11:36,269
something<font color="#E5E5E5"> around 20 cache hits would be</font>

256
00:11:34,529 --> 00:11:37,860
a good<font color="#E5E5E5"> thing because I didn't press that</font>

257
00:11:36,269 --> 00:11:40,709
<font color="#E5E5E5">many keys so if it's too</font><font color="#CCCCCC"> much it's bad</font>

258
00:11:37,860 --> 00:11:43,110
but maybe maybe this address<font color="#E5E5E5"> here 24</font>

259
00:11:40,709 --> 00:11:44,518
<font color="#E5E5E5">Suns good let's just copy it</font><font color="#CCCCCC"> and see</font>

260
00:11:43,110 --> 00:11:47,660
what<font color="#E5E5E5"> happens if we now print a message</font>

261
00:11:44,519 --> 00:11:51,600
<font color="#CCCCCC">every time we pass we press a key ah</font>

262
00:11:47,660 --> 00:11:53,370
<font color="#E5E5E5">this is this great every keystroke</font><font color="#CCCCCC"> so we</font>

263
00:11:51,600 --> 00:11:54,630
have some something<font color="#E5E5E5"> some timing</font>

264
00:11:53,370 --> 00:11:57,810
measurement here<font color="#E5E5E5"> that's accurate to</font>

265
00:11:54,630 --> 00:12:01,260
<font color="#E5E5E5">something like 300 nanoseconds and we</font>

266
00:11:57,810 --> 00:12:05,609
can<font color="#E5E5E5"> observe every keystroke on a</font>

267
00:12:01,260 --> 00:12:07,079
<font color="#E5E5E5">timescale</font><font color="#CCCCCC"> that is done</font><font color="#E5E5E5"> in this editor</font>

268
00:12:05,610 --> 00:12:10,470
now<font color="#E5E5E5"> we can do that on a different shared</font>

269
00:12:07,079 --> 00:12:14,579
library also<font color="#E5E5E5"> did that on lip GDK which</font>

270
00:12:10,470 --> 00:12:16,440
is part of the<font color="#CCCCCC"> gtk library</font><font color="#E5E5E5"> and I got</font>

271
00:12:14,579 --> 00:12:19,709
this as a result<font color="#E5E5E5"> they do some binary</font>

272
00:12:16,440 --> 00:12:21,209
<font color="#E5E5E5">search to translate key codes and binary</font>

273
00:12:19,709 --> 00:12:22,859
searches are great because<font color="#CCCCCC"> there you</font>

274
00:12:21,209 --> 00:12:25,079
have<font color="#E5E5E5"> these leaf nodes which are</font><font color="#CCCCCC"> only</font>

275
00:12:22,860 --> 00:12:28,170
accessed if it's<font color="#E5E5E5"> exactly that</font><font color="#CCCCCC"> key for</font>

276
00:12:25,079 --> 00:12:29,849
instance here<font color="#CCCCCC"> we have the key</font><font color="#E5E5E5"> n which is</font>

277
00:12:28,170 --> 00:12:31,560
only<font color="#CCCCCC"> access this address is only</font>

278
00:12:29,850 --> 00:12:33,510
<font color="#E5E5E5">accessed if I press key and which is</font>

279
00:12:31,560 --> 00:12:35,640
great if I want to figure out<font color="#E5E5E5"> a password</font>

280
00:12:33,510 --> 00:12:37,230
or<font color="#CCCCCC"> something right or</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> don't</font><font color="#E5E5E5"> know what</font>

281
00:12:35,640 --> 00:12:39,810
else you could do with that<font color="#CCCCCC"> but let's</font>

282
00:12:37,230 --> 00:12:45,810
<font color="#E5E5E5">get</font><font color="#CCCCCC"> back to out of order</font><font color="#E5E5E5"> execution after</font>

283
00:12:39,810 --> 00:12:48,268
<font color="#CCCCCC">this</font><font color="#E5E5E5"> yeah</font><font color="#CCCCCC"> kasia</font><font color="#E5E5E5"> tech primer</font><font color="#CCCCCC"> out of our</font>

284
00:12:45,810 --> 00:12:50,760
execution<font color="#E5E5E5"> reminds me a lot of</font><font color="#CCCCCC"> cooking</font>

285
00:12:48,269 --> 00:12:53,910
because<font color="#CCCCCC"> while cooking i</font><font color="#E5E5E5"> always run into</font>

286
00:12:50,760 --> 00:12:56,699
the<font color="#E5E5E5"> same problem the last step of the</font>

287
00:12:53,910 --> 00:12:59,040
recipe<font color="#CCCCCC"> and I'm really</font><font color="#E5E5E5"> bad at cooking</font><font color="#CCCCCC"> but</font>

288
00:12:56,699 --> 00:13:00,750
the last step in<font color="#E5E5E5"> the recipe is always</font>

289
00:12:59,040 --> 00:13:03,420
something<font color="#E5E5E5"> like serve with cooked and</font>

290
00:13:00,750 --> 00:13:05,970
peeled potatoes<font color="#E5E5E5"> and I'm like</font><font color="#CCCCCC"> okay there</font>

291
00:13:03,420 --> 00:13:08,699
<font color="#E5E5E5">are all the potatoes they</font><font color="#CCCCCC"> are not cooked</font>

292
00:13:05,970 --> 00:13:10,199
they are not peeled yes so<font color="#E5E5E5"> now I have to</font>

293
00:13:08,699 --> 00:13:11,910
wait<font color="#CCCCCC"> for an hour probably</font><font color="#E5E5E5"> the guests are</font>

294
00:13:10,199 --> 00:13:15,180
<font color="#CCCCCC">already arriving in the mean time which</font>

295
00:13:11,910 --> 00:13:16,740
is quite<font color="#CCCCCC"> embarrassing yeah it's latency</font>

296
00:13:15,180 --> 00:13:19,079
we want to<font color="#E5E5E5"> avoid that and the same</font>

297
00:13:16,740 --> 00:13:21,329
problem exists in modern computers and

298
00:13:19,079 --> 00:13:23,430
they also want<font color="#CCCCCC"> to avoid that</font><font color="#E5E5E5"> so let's</font>

299
00:13:21,329 --> 00:13:27,059
look at the recipe<font color="#E5E5E5"> here maybe I could</font>

300
00:13:23,430 --> 00:13:28,289
paralyze some of the things here and

301
00:13:27,059 --> 00:13:30,209
and the things<font color="#E5E5E5"> that I have to do</font>

302
00:13:28,289 --> 00:13:32,909
<font color="#E5E5E5">afterwards that depend on previous steps</font>

303
00:13:30,209 --> 00:13:34,559
<font color="#CCCCCC">I have to do them afterwards</font><font color="#E5E5E5"> and the</font>

304
00:13:32,909 --> 00:13:36,029
same thing happens in<font color="#CCCCCC"> the processor</font><font color="#E5E5E5"> so</font>

305
00:13:34,559 --> 00:13:38,968
here also the things that can<font color="#CCCCCC"> be</font>

306
00:13:36,029 --> 00:13:41,759
<font color="#CCCCCC">paralyzed the processor will paralyze</font>

307
00:13:38,969 --> 00:13:44,039
them and we we<font color="#E5E5E5"> are speaking of out</font><font color="#CCCCCC"> of</font>

308
00:13:41,759 --> 00:13:47,159
<font color="#E5E5E5">order</font><font color="#CCCCCC"> execution Windows</font><font color="#E5E5E5"> of something</font>

309
00:13:44,039 --> 00:13:49,348
like<font color="#E5E5E5"> two</font><font color="#CCCCCC"> hundred simple instructions</font>

310
00:13:47,159 --> 00:13:51,089
that a modern processor<font color="#E5E5E5"> runs out</font><font color="#CCCCCC"> of</font>

311
00:13:49,349 --> 00:13:55,259
<font color="#E5E5E5">order</font><font color="#CCCCCC"> that it runs</font><font color="#E5E5E5"> ahead of the</font>

312
00:13:51,089 --> 00:13:57,989
instruction pointer<font color="#CCCCCC"> and already</font><font color="#E5E5E5"> execute</font>

313
00:13:55,259 --> 00:13:59,339
those instructions out of order<font color="#E5E5E5"> so with</font>

314
00:13:57,989 --> 00:14:02,369
<font color="#E5E5E5">that knowledge we are</font><font color="#CCCCCC"> ready for</font><font color="#E5E5E5"> the</font>

315
00:13:59,339 --> 00:14:03,869
details<font color="#CCCCCC"> let's just try</font><font color="#E5E5E5"> to access the</font>

316
00:14:02,369 --> 00:14:05,789
kernel right away right<font color="#E5E5E5"> this is the</font>

317
00:14:03,869 --> 00:14:07,169
kernel address<font color="#E5E5E5"> some interesting</font>

318
00:14:05,789 --> 00:14:09,089
information will be<font color="#E5E5E5"> written there and</font>

319
00:14:07,169 --> 00:14:13,049
<font color="#E5E5E5">we'll just read it and print it and</font>

320
00:14:09,089 --> 00:14:14,969
that's it<font color="#E5E5E5"> oh that doesn't work okay</font>

321
00:14:13,049 --> 00:14:17,669
that's not<font color="#CCCCCC"> surprising that</font><font color="#E5E5E5"> that's what</font>

322
00:14:14,969 --> 00:14:22,199
should happen right<font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> you can't</font>

323
00:14:17,669 --> 00:14:26,569
access<font color="#CCCCCC"> kernel addresses but what happens</font>

324
00:14:22,199 --> 00:14:30,029
if the executions are run out<font color="#E5E5E5"> of order</font>

325
00:14:26,569 --> 00:14:33,299
<font color="#E5E5E5">are the</font><font color="#CCCCCC"> privilege checks done in time</font>

326
00:14:30,029 --> 00:14:36,479
well maybe we<font color="#E5E5E5"> try some other experiment</font>

327
00:14:33,299 --> 00:14:38,218
first some really<font color="#CCCCCC"> minimal experiment we</font>

328
00:14:36,479 --> 00:14:40,489
access the null point another point<font color="#CCCCCC"> is</font>

329
00:14:38,219 --> 00:14:43,829
clearly this would trigger a<font color="#E5E5E5"> segfault</font>

330
00:14:40,489 --> 00:14:47,039
<font color="#E5E5E5">and then we access some offset in some</font>

331
00:14:43,829 --> 00:14:50,008
array should be unreachable<font color="#CCCCCC"> right so</font>

332
00:14:47,039 --> 00:14:51,449
this<font color="#E5E5E5"> should never be cached yeah if we</font>

333
00:14:50,009 --> 00:14:53,149
compile that compiler is not<font color="#E5E5E5"> happy</font>

334
00:14:51,449 --> 00:14:56,878
static code analyzer<font color="#E5E5E5"> is also not happy</font>

335
00:14:53,149 --> 00:15:00,449
yeah<font color="#E5E5E5"> shouldn't do that and if we run the</font>

336
00:14:56,879 --> 00:15:03,149
code<font color="#E5E5E5"> what happens the unreachable code</font>

337
00:15:00,449 --> 00:15:06,089
line was executed<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> that's bad</font>

338
00:15:03,149 --> 00:15:08,669
and the exception the exception was

339
00:15:06,089 --> 00:15:11,429
still thrown but only after<font color="#E5E5E5"> the memory</font>

340
00:15:08,669 --> 00:15:14,279
access was already performed this is

341
00:15:11,429 --> 00:15:18,319
quite bad because then we might build an

342
00:15:14,279 --> 00:15:21,149
attack<font color="#CCCCCC"> okay out of order execution</font>

343
00:15:18,319 --> 00:15:23,339
leaves<font color="#E5E5E5"> microarchitecture traces we</font>

344
00:15:21,149 --> 00:15:24,989
<font color="#E5E5E5">learned that for instance the cache and</font>

345
00:15:23,339 --> 00:15:26,819
<font color="#CCCCCC">we give</font><font color="#E5E5E5"> them a name transient</font>

346
00:15:24,989 --> 00:15:29,819
instructions is good name we thought and

347
00:15:26,819 --> 00:15:33,029
<font color="#CCCCCC">we can</font><font color="#E5E5E5"> observe the execution of</font>

348
00:15:29,819 --> 00:15:34,618
transient instructions<font color="#E5E5E5"> indirectly so we</font>

349
00:15:33,029 --> 00:15:37,079
combine the two things<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we had just</font>

350
00:15:34,619 --> 00:15:38,549
<font color="#E5E5E5">had</font><font color="#CCCCCC"> the first</font><font color="#E5E5E5"> thing the access to the</font>

351
00:15:37,079 --> 00:15:40,529
kernel<font color="#E5E5E5"> address that triggers a</font>

352
00:15:38,549 --> 00:15:40,899
segmentation<font color="#CCCCCC"> fault but also</font><font color="#E5E5E5"> reads the</font>

353
00:15:40,529 --> 00:15:43,930
data

354
00:15:40,899 --> 00:15:48,249
to register<font color="#CCCCCC"> and the second line</font><font color="#E5E5E5"> now we</font>

355
00:15:43,930 --> 00:15:50,739
have the register value here as a index

356
00:15:48,249 --> 00:15:53,680
to the array and then<font color="#CCCCCC"> we check which</font>

357
00:15:50,740 --> 00:15:57,040
part of<font color="#E5E5E5"> the array is cashed and the same</font>

358
00:15:53,680 --> 00:15:59,920
same<font color="#CCCCCC"> thing as for as before</font><font color="#E5E5E5"> works and we</font>

359
00:15:57,040 --> 00:16:02,829
see what<font color="#CCCCCC"> the secret value</font><font color="#E5E5E5"> was that is</font>

360
00:15:59,920 --> 00:16:04,118
<font color="#CCCCCC">Madame</font><font color="#E5E5E5"> is really simple really</font><font color="#CCCCCC"> simple</font><font color="#E5E5E5"> to</font>

361
00:16:02,829 --> 00:16:06,638
understand and<font color="#E5E5E5"> really simply to</font>

362
00:16:04,119 --> 00:16:08,730
implement so it's a bad<font color="#CCCCCC"> thing because</font>

363
00:16:06,639 --> 00:16:12,279
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> really easy also for attackers to</font>

364
00:16:08,730 --> 00:16:15,850
<font color="#E5E5E5">reproduce that</font><font color="#CCCCCC"> yeah the permission check</font>

365
00:16:12,279 --> 00:16:18,249
is not fast<font color="#CCCCCC"> enough in some cases yeah</font>

366
00:16:15,850 --> 00:16:22,660
and we can we can<font color="#CCCCCC"> read arbitrary data</font>

367
00:16:18,249 --> 00:16:24,220
from the kernel with that<font color="#CCCCCC"> choose low yes</font>

368
00:16:22,660 --> 00:16:25,899
we can lick the entire<font color="#CCCCCC"> kernel memory</font><font color="#E5E5E5"> and</font>

369
00:16:24,220 --> 00:16:28,149
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> current memory there's usually a</font>

370
00:16:25,899 --> 00:16:30,790
mapping<font color="#E5E5E5"> of most of the physical</font><font color="#CCCCCC"> memory</font>

371
00:16:28,149 --> 00:16:33,459
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Linux or OSX it's even the entire</font>

372
00:16:30,790 --> 00:16:35,740
physical<font color="#E5E5E5"> memory that is accessible</font>

373
00:16:33,459 --> 00:16:37,929
<font color="#E5E5E5">through the kernel space</font><font color="#CCCCCC"> and what you</font>

374
00:16:35,740 --> 00:16:41,199
can do then is<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just write</font><font color="#E5E5E5"> a small</font>

375
00:16:37,929 --> 00:16:44,110
program and you pass<font color="#CCCCCC"> a</font><font color="#E5E5E5"> physical address</font>

376
00:16:41,199 --> 00:16:45,819
<font color="#E5E5E5">to this program and it this is the</font>

377
00:16:44,110 --> 00:16:49,480
physical address<font color="#E5E5E5"> of the password buffer</font>

378
00:16:45,819 --> 00:16:52,059
here<font color="#E5E5E5"> and you can live read this string</font>

379
00:16:49,480 --> 00:16:55,209
<font color="#E5E5E5">that the user types in because you read</font>

380
00:16:52,059 --> 00:16:57,429
until<font color="#E5E5E5"> the value there</font><font color="#CCCCCC"> is not zero</font><font color="#E5E5E5"> so you</font>

381
00:16:55,209 --> 00:17:00,998
<font color="#E5E5E5">always</font><font color="#CCCCCC"> leave read the</font><font color="#E5E5E5"> last character of</font>

382
00:16:57,429 --> 00:17:04,648
<font color="#CCCCCC">the string and</font><font color="#E5E5E5"> another nice</font><font color="#CCCCCC"> example that</font>

383
00:17:00,999 --> 00:17:04,649
<font color="#E5E5E5">we that</font><font color="#CCCCCC"> we tried</font><font color="#E5E5E5"> was</font>

384
00:17:09,329 --> 00:17:13,740
can you enhance<font color="#E5E5E5"> the image from here</font><font color="#CCCCCC"> can</font>

385
00:17:12,060 --> 00:17:15,599
you<font color="#E5E5E5"> enhance it can you enhance it</font><font color="#CCCCCC"> you</font>

386
00:17:13,740 --> 00:17:18,510
<font color="#CCCCCC">answers can you enhance it hold on a</font>

387
00:17:15,599 --> 00:17:21,780
second<font color="#CCCCCC"> I'll enhance</font><font color="#E5E5E5"> but depending on</font><font color="#CCCCCC"> the</font>

388
00:17:18,510 --> 00:17:24,119
image<font color="#E5E5E5"> format we actually can so here you</font>

389
00:17:21,780 --> 00:17:27,660
can see this is a meltdown attack on an

390
00:17:24,119 --> 00:17:33,689
<font color="#E5E5E5">F LIF image and then the image gets</font>

391
00:17:27,660 --> 00:17:36,260
slowly<font color="#CCCCCC"> better and</font><font color="#E5E5E5"> better okay that's it</font>

392
00:17:33,690 --> 00:17:39,770
for meltdown let's start with Spector

393
00:17:36,260 --> 00:17:41,879
with Spector we are thinking about

394
00:17:39,770 --> 00:17:44,879
<font color="#E5E5E5">speculative execution so it has to do</font>

395
00:17:41,880 --> 00:17:47,730
something<font color="#E5E5E5"> with conditional branches so</font>

396
00:17:44,880 --> 00:17:50,700
it's either true<font color="#E5E5E5"> or false and one way is</font>

397
00:17:47,730 --> 00:17:53,370
<font color="#CCCCCC">right and one way</font><font color="#E5E5E5"> is wrong and so there</font>

398
00:17:50,700 --> 00:17:55,440
<font color="#CCCCCC">are different</font><font color="#E5E5E5"> options what could happen</font>

399
00:17:53,370 --> 00:17:58,979
for instance<font color="#E5E5E5"> in case of a bounced check</font>

400
00:17:55,440 --> 00:18:00,990
let's assume the bounced<font color="#E5E5E5"> check returns</font>

401
00:17:58,980 --> 00:18:01,650
true<font color="#CCCCCC"> and then there are two</font>

402
00:18:00,990 --> 00:18:03,930
<font color="#E5E5E5">possibilities</font>

403
00:18:01,650 --> 00:18:07,860
well the prediction could also be that

404
00:18:03,930 --> 00:18:09,540
<font color="#E5E5E5">the bounced check will be positive well</font>

405
00:18:07,860 --> 00:18:12,600
that's good and then we're fast<font color="#E5E5E5"> right</font>

406
00:18:09,540 --> 00:18:16,920
<font color="#E5E5E5">that's the case</font><font color="#CCCCCC"> that we want to</font><font color="#E5E5E5"> have not</font>

407
00:18:12,600 --> 00:18:19,320
so good if the if the condition<font color="#E5E5E5"> is true</font>

408
00:18:16,920 --> 00:18:25,800
<font color="#E5E5E5">but the processor speculates</font><font color="#CCCCCC"> it's false</font>

409
00:18:19,320 --> 00:18:28,530
<font color="#E5E5E5">then yeah it's</font><font color="#CCCCCC"> slow yeah</font><font color="#E5E5E5"> also also nice</font>

410
00:18:25,800 --> 00:18:30,840
if the process if the condition is<font color="#E5E5E5"> false</font>

411
00:18:28,530 --> 00:18:33,149
<font color="#E5E5E5">and the processor also speculates it's</font>

412
00:18:30,840 --> 00:18:35,730
false<font color="#E5E5E5"> and then again we're fast and if</font>

413
00:18:33,150 --> 00:18:39,500
the processor speculates<font color="#E5E5E5"> it's true then</font>

414
00:18:35,730 --> 00:18:42,560
<font color="#E5E5E5">yeah then it's an insecure but</font><font color="#CCCCCC"> also slow</font>

415
00:18:39,500 --> 00:18:45,510
<font color="#CCCCCC">ok that's basically</font><font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> behind</font>

416
00:18:42,560 --> 00:18:53,100
<font color="#CCCCCC">specter so you have this one case where</font>

417
00:18:45,510 --> 00:18:55,890
you can leak secret information<font color="#E5E5E5"> how does</font>

418
00:18:53,100 --> 00:19:01,189
<font color="#E5E5E5">it work</font><font color="#CCCCCC"> we look at a</font><font color="#E5E5E5"> very simple example</font>

419
00:18:55,890 --> 00:19:04,770
now<font color="#E5E5E5"> we have an index here and some</font>

420
00:19:01,190 --> 00:19:06,960
string<font color="#CCCCCC"> part</font><font color="#E5E5E5"> of the string may be read by</font>

421
00:19:04,770 --> 00:19:10,710
<font color="#CCCCCC">the user</font><font color="#E5E5E5"> space program or by the other</font>

422
00:19:06,960 --> 00:19:13,770
program<font color="#CCCCCC"> that interfaces</font><font color="#E5E5E5"> this this code</font>

423
00:19:10,710 --> 00:19:16,110
and<font color="#E5E5E5"> you have a bounced check here that</font>

424
00:19:13,770 --> 00:19:19,560
<font color="#E5E5E5">guarantees</font><font color="#CCCCCC"> that you can't read any of</font>

425
00:19:16,110 --> 00:19:21,969
the secret data and<font color="#E5E5E5"> then you have some</font>

426
00:19:19,560 --> 00:19:24,370
look up here some area<font color="#CCCCCC"> lookup</font><font color="#E5E5E5"> we look</font>

427
00:19:21,970 --> 00:19:26,200
at binaries and this is a quite common

428
00:19:24,370 --> 00:19:31,510
pattern that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have some area look up</font>

429
00:19:26,200 --> 00:19:33,370
with some<font color="#E5E5E5"> secret value</font><font color="#CCCCCC"> and you can also</font>

430
00:19:31,510 --> 00:19:36,760
if<font color="#CCCCCC"> you don't</font><font color="#E5E5E5"> have that with</font><font color="#CCCCCC"> Specter</font>

431
00:19:33,370 --> 00:19:39,100
variant<font color="#CCCCCC"> 2 you can</font><font color="#E5E5E5"> even combine that with</font>

432
00:19:36,760 --> 00:19:41,320
different<font color="#CCCCCC"> gadgets</font><font color="#E5E5E5"> but what you would do</font>

433
00:19:39,100 --> 00:19:45,189
<font color="#E5E5E5">here is you start with index 0 and</font>

434
00:19:41,320 --> 00:19:48,370
slowly iterate<font color="#E5E5E5"> over this buffer passing</font>

435
00:19:45,190 --> 00:19:52,990
valid values first so values that are

436
00:19:48,370 --> 00:19:55,060
inbound<font color="#CCCCCC"> and here you can</font><font color="#E5E5E5"> see it</font><font color="#CCCCCC"> fir</font>

437
00:19:52,990 --> 00:19:58,300
<font color="#E5E5E5">first might speculate wrong but then it</font>

438
00:19:55,060 --> 00:20:00,639
will execute the right direction<font color="#E5E5E5"> and as</font>

439
00:19:58,300 --> 00:20:02,320
you pass the<font color="#E5E5E5"> next index it will already</font>

440
00:20:00,640 --> 00:20:04,810
speculate the right way because<font color="#CCCCCC"> the</font>

441
00:20:02,320 --> 00:20:08,350
prediction now leans more towards the

442
00:20:04,810 --> 00:20:13,500
then branch and then it will be fast all

443
00:20:08,350 --> 00:20:15,699
the<font color="#CCCCCC"> time and as we get</font><font color="#E5E5E5"> to index for the</font>

444
00:20:13,500 --> 00:20:19,360
prediction<font color="#CCCCCC"> we'll still go to</font><font color="#E5E5E5"> the left</font>

445
00:20:15,700 --> 00:20:22,450
<font color="#CCCCCC">side</font><font color="#E5E5E5"> but the execution should go</font><font color="#CCCCCC"> to the</font>

446
00:20:19,360 --> 00:20:24,879
<font color="#E5E5E5">other side and there we did already do</font>

447
00:20:22,450 --> 00:20:27,100
the memory<font color="#E5E5E5"> access</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> already</font>

448
00:20:24,880 --> 00:20:33,070
leaked the secret key<font color="#E5E5E5"> byte and the same</font>

449
00:20:27,100 --> 00:20:37,030
goes<font color="#CCCCCC"> for offset 5</font><font color="#E5E5E5"> & 6 yeah there is a</font>

450
00:20:33,070 --> 00:20:39,490
similar case with<font color="#CCCCCC"> Specter variant to I</font>

451
00:20:37,030 --> 00:20:43,290
thought<font color="#CCCCCC"> of a very minimal example here</font>

452
00:20:39,490 --> 00:20:46,210
and I came<font color="#CCCCCC"> up with</font><font color="#E5E5E5"> this we have some</font>

453
00:20:43,290 --> 00:20:48,610
animal class which is an abstract base

454
00:20:46,210 --> 00:20:53,560
class and then we<font color="#E5E5E5"> have some derived</font>

455
00:20:48,610 --> 00:20:56,530
classes<font color="#E5E5E5"> fish and bird and we can pass to</font>

456
00:20:53,560 --> 00:21:02,889
<font color="#CCCCCC">a method</font><font color="#E5E5E5"> that calls the move method of</font>

457
00:20:56,530 --> 00:21:05,560
either of<font color="#E5E5E5"> those objects we can</font><font color="#CCCCCC"> pass the</font>

458
00:21:02,890 --> 00:21:08,230
one of these specialized objects to this

459
00:21:05,560 --> 00:21:10,780
method and the method will the fly

460
00:21:08,230 --> 00:21:14,310
method will do some marine lookup<font color="#CCCCCC"> that</font>

461
00:21:10,780 --> 00:21:17,290
we don't want to<font color="#E5E5E5"> do for for a fish and</font>

462
00:21:14,310 --> 00:21:19,419
for for a fish we<font color="#CCCCCC"> want to run</font><font color="#E5E5E5"> the swim</font>

463
00:21:17,290 --> 00:21:22,629
method where it doesn't<font color="#CCCCCC"> do any weird</font>

464
00:21:19,420 --> 00:21:24,580
memory<font color="#E5E5E5"> accesses and this index here now</font>

465
00:21:22,630 --> 00:21:27,040
might<font color="#CCCCCC"> be some member variable of the</font>

466
00:21:24,580 --> 00:21:28,449
fish very<font color="#CCCCCC"> of the fish object or it might</font>

467
00:21:27,040 --> 00:21:31,899
be<font color="#E5E5E5"> some other variable</font><font color="#CCCCCC"> that is</font>

468
00:21:28,450 --> 00:21:35,600
referenced<font color="#E5E5E5"> in at the right memory offset</font>

469
00:21:31,900 --> 00:21:39,250
you must see that here<font color="#CCCCCC"> the</font>

470
00:21:35,600 --> 00:21:41,480
very similar<font color="#E5E5E5"> to a type confusion attack</font>

471
00:21:39,250 --> 00:21:43,880
<font color="#E5E5E5">basically you can't you're calling the</font>

472
00:21:41,480 --> 00:21:45,950
wrong<font color="#E5E5E5"> method on some base of base</font>

473
00:21:43,880 --> 00:21:49,610
<font color="#CCCCCC">objects so</font><font color="#E5E5E5"> you could do</font><font color="#CCCCCC"> anything as in</font>

474
00:21:45,950 --> 00:21:51,830
<font color="#E5E5E5">type confusion attacks here what will</font>

475
00:21:49,610 --> 00:21:53,780
happen if the processor<font color="#CCCCCC"> start</font>

476
00:21:51,830 --> 00:21:56,149
speculating here it will<font color="#E5E5E5"> it might first</font>

477
00:21:53,780 --> 00:21:58,490
speculate the the wrong way<font color="#E5E5E5"> very</font>

478
00:21:56,150 --> 00:22:01,040
plausible on the first run so it might

479
00:21:58,490 --> 00:22:02,810
speculate the wrong way and<font color="#E5E5E5"> then it will</font>

480
00:22:01,040 --> 00:22:05,240
see okay I should execute<font color="#E5E5E5"> the other one</font>

481
00:22:02,810 --> 00:22:07,669
and<font color="#E5E5E5"> that it will directly adapt to that</font>

482
00:22:05,240 --> 00:22:10,010
and now say<font color="#CCCCCC"> okay next</font><font color="#E5E5E5"> time I'm</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> I</font>

483
00:22:07,670 --> 00:22:12,110
will predict the fly method and then we

484
00:22:10,010 --> 00:22:14,150
pass the<font color="#CCCCCC"> bird again</font><font color="#E5E5E5"> and it's fast</font>

485
00:22:12,110 --> 00:22:17,719
<font color="#E5E5E5">that's great and if we pass the fish</font>

486
00:22:14,150 --> 00:22:19,070
there<font color="#CCCCCC"> then it</font><font color="#E5E5E5"> ways they run the fly</font>

487
00:22:17,720 --> 00:22:22,550
method for the fish

488
00:22:19,070 --> 00:22:24,080
<font color="#E5E5E5">so</font><font color="#CCCCCC"> that's Spectre variant</font><font color="#E5E5E5"> too the most</font>

489
00:22:22,550 --> 00:22:26,330
simple<font color="#E5E5E5"> example that</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> could think of</font>

490
00:22:24,080 --> 00:22:29,899
nothing with<font color="#CCCCCC"> mist training branches in</font>

491
00:22:26,330 --> 00:22:32,300
either of<font color="#E5E5E5"> those cases where</font><font color="#CCCCCC"> you miss</font>

492
00:22:29,900 --> 00:22:34,310
<font color="#CCCCCC">train across processes</font><font color="#E5E5E5"> this is only</font>

493
00:22:32,300 --> 00:22:36,770
<font color="#E5E5E5">within the same process which is much</font>

494
00:22:34,310 --> 00:22:39,440
<font color="#CCCCCC">easier</font><font color="#E5E5E5"> because then you don't have to do</font>

495
00:22:36,770 --> 00:22:40,639
any fancy<font color="#E5E5E5"> fancy things or you also don't</font>

496
00:22:39,440 --> 00:22:45,050
<font color="#CCCCCC">have to know</font><font color="#E5E5E5"> that much about</font><font color="#CCCCCC"> the</font>

497
00:22:40,640 --> 00:22:47,780
processor if you stay<font color="#E5E5E5"> in place</font><font color="#CCCCCC"> okay yeah</font>

498
00:22:45,050 --> 00:22:50,810
and<font color="#E5E5E5"> then it will of</font><font color="#CCCCCC"> course the adept the</font>

499
00:22:47,780 --> 00:22:53,180
prediction again so the question is what

500
00:22:50,810 --> 00:22:55,190
can<font color="#E5E5E5"> we do against meltdown inspector and</font>

501
00:22:53,180 --> 00:22:59,690
there were a<font color="#E5E5E5"> lot of patches against</font><font color="#CCCCCC"> mate</font>

502
00:22:55,190 --> 00:23:03,400
on inspector<font color="#E5E5E5"> so one</font><font color="#CCCCCC"> idea that</font><font color="#E5E5E5"> we already</font>

503
00:22:59,690 --> 00:23:07,940
had in<font color="#E5E5E5"> 2016</font><font color="#CCCCCC"> before we were</font><font color="#E5E5E5"> well the</font>

504
00:23:03,400 --> 00:23:08,930
meltdown attack but to cope with several

505
00:23:07,940 --> 00:23:12,530
other attacks

506
00:23:08,930 --> 00:23:14,630
<font color="#E5E5E5">what's the Kaiser patch set and there we</font>

507
00:23:12,530 --> 00:23:15,170
thought<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> current</font><font color="#E5E5E5"> addresses in</font>

508
00:23:14,630 --> 00:23:17,180
<font color="#CCCCCC">userspace</font>

509
00:23:15,170 --> 00:23:20,120
<font color="#E5E5E5">our problem so why don't we just take</font>

510
00:23:17,180 --> 00:23:22,160
<font color="#E5E5E5">the kernel addresses and remove them if</font>

511
00:23:20,120 --> 00:23:25,850
<font color="#E5E5E5">not me it we don't need them most of the</font>

512
00:23:22,160 --> 00:23:28,760
<font color="#CCCCCC">time so maybe the</font><font color="#E5E5E5"> user space accessible</font>

513
00:23:25,850 --> 00:23:30,860
<font color="#E5E5E5">bit that is implemented in page tables</font>

514
00:23:28,760 --> 00:23:33,350
the check for<font color="#E5E5E5"> that bit might not</font><font color="#CCCCCC"> be</font>

515
00:23:30,860 --> 00:23:35,719
reliable<font color="#CCCCCC"> so maybe we should</font><font color="#E5E5E5"> just unwrap</font>

516
00:23:33,350 --> 00:23:38,480
the counter<font color="#E5E5E5"> space and yeah that's what</font>

517
00:23:35,720 --> 00:23:40,670
we proposed as<font color="#E5E5E5"> the Kaiser patch set and</font>

518
00:23:38,480 --> 00:23:43,850
then kernel addresses are no<font color="#E5E5E5"> longer</font>

519
00:23:40,670 --> 00:23:47,900
<font color="#E5E5E5">present</font><font color="#CCCCCC"> or at</font><font color="#E5E5E5"> least only only a few</font>

520
00:23:43,850 --> 00:23:50,959
kernel addresses as few as<font color="#CCCCCC"> possible</font>

521
00:23:47,900 --> 00:23:53,420
and the nice thing<font color="#CCCCCC"> is since the</font>

522
00:23:50,960 --> 00:23:55,250
processor can't know<font color="#CCCCCC"> too which address</font>

523
00:23:53,420 --> 00:23:57,290
to<font color="#E5E5E5"> which physical address</font><font color="#CCCCCC"> a virtual</font>

524
00:23:55,250 --> 00:24:00,860
address<font color="#CCCCCC"> will resolve it could resolve to</font>

525
00:23:57,290 --> 00:24:03,740
any physical<font color="#CCCCCC"> address it can't do</font><font color="#E5E5E5"> any</font>

526
00:24:00,860 --> 00:24:06,740
prediction because<font color="#E5E5E5"> Mary which is not</font>

527
00:24:03,740 --> 00:24:08,980
mapped cannot be accessed<font color="#E5E5E5"> at all so</font>

528
00:24:06,740 --> 00:24:12,140
there can't be any<font color="#E5E5E5"> miss prediction there</font>

529
00:24:08,980 --> 00:24:14,300
yeah we called this<font color="#CCCCCC"> Kaiser and it has</font>

530
00:24:12,140 --> 00:24:17,660
some<font color="#CCCCCC"> it stands for some longer sentence</font>

531
00:24:14,300 --> 00:24:20,840
<font color="#CCCCCC">but</font><font color="#E5E5E5"> also I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> the connection</font><font color="#CCCCCC"> to a</font><font color="#E5E5E5"> to</font>

532
00:24:17,660 --> 00:24:24,500
Linux is also nice because it's a the

533
00:24:20,840 --> 00:24:27,939
<font color="#E5E5E5">largest penguin emperor penguin Kaiser</font>

534
00:24:24,500 --> 00:24:31,310
<font color="#E5E5E5">penguin on</font><font color="#CCCCCC"> German yeah what does</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> do</font>

535
00:24:27,940 --> 00:24:33,620
well we have this wall here in modern

536
00:24:31,310 --> 00:24:36,409
<font color="#CCCCCC">operating systems between</font><font color="#E5E5E5"> the user space</font>

537
00:24:33,620 --> 00:24:40,550
<font color="#E5E5E5">and the kernel space and what we do is</font>

538
00:24:36,410 --> 00:24:43,010
we basically say<font color="#E5E5E5"> okay it's fine if user</font>

539
00:24:40,550 --> 00:24:44,090
space<font color="#E5E5E5"> application runs through this wall</font>

540
00:24:43,010 --> 00:24:46,520
<font color="#E5E5E5">it's fine</font>

541
00:24:44,090 --> 00:24:48,860
but we just<font color="#E5E5E5"> must take care that</font><font color="#CCCCCC"> there is</font>

542
00:24:46,520 --> 00:24:50,900
nothing<font color="#CCCCCC"> behind this wall right</font><font color="#E5E5E5"> so this</font>

543
00:24:48,860 --> 00:24:53,209
<font color="#E5E5E5">is what we do so</font><font color="#CCCCCC"> when we are in current</font>

544
00:24:50,900 --> 00:24:55,910
space<font color="#E5E5E5"> the kernel can't directly access</font>

545
00:24:53,210 --> 00:24:59,660
<font color="#CCCCCC">the</font><font color="#E5E5E5"> user space nowadays because of SMA</font><font color="#CCCCCC"> p</font>

546
00:24:55,910 --> 00:25:01,550
and s<font color="#E5E5E5"> mep memory protections but when we</font>

547
00:24:59,660 --> 00:25:04,610
<font color="#CCCCCC">are</font><font color="#E5E5E5"> in user space the user space</font>

548
00:25:01,550 --> 00:25:07,220
applications could<font color="#E5E5E5"> run meltdown</font><font color="#CCCCCC"> on this</font>

549
00:25:04,610 --> 00:25:10,669
hardware<font color="#E5E5E5"> still possible</font><font color="#CCCCCC"> but there would</font>

550
00:25:07,220 --> 00:25:12,800
not be anything there problem solved

551
00:25:10,670 --> 00:25:17,120
so we published<font color="#E5E5E5"> the kaiser page set in</font>

552
00:25:12,800 --> 00:25:19,100
july 2017<font color="#E5E5E5"> and intel and others have put</font>

553
00:25:17,120 --> 00:25:22,070
<font color="#E5E5E5">a tremendous amount of effort into that</font>

554
00:25:19,100 --> 00:25:23,689
<font color="#CCCCCC">and built a patch said that is actually</font>

555
00:25:22,070 --> 00:25:24,980
<font color="#CCCCCC">working not</font><font color="#E5E5E5"> just like the</font>

556
00:25:23,690 --> 00:25:28,310
<font color="#E5E5E5">proof-of-concept thing that we had in</font>

557
00:25:24,980 --> 00:25:30,170
<font color="#CCCCCC">the beginning and they renamed it into</font>

558
00:25:28,310 --> 00:25:34,030
kpti because they didn't like<font color="#E5E5E5"> the name</font>

559
00:25:30,170 --> 00:25:36,200
<font color="#CCCCCC">kaiser</font><font color="#E5E5E5"> for some reason</font><font color="#CCCCCC"> microsoft</font><font color="#E5E5E5"> also</font>

560
00:25:34,030 --> 00:25:38,810
<font color="#E5E5E5">implemented a similar concept in Windows</font>

561
00:25:36,200 --> 00:25:41,840
10<font color="#CCCCCC"> and</font><font color="#E5E5E5"> Apple already had something like</font>

562
00:25:38,810 --> 00:25:46,610
this before and they revived it and it's

563
00:25:41,840 --> 00:25:49,220
called double map there and during<font color="#CCCCCC"> the</font>

564
00:25:46,610 --> 00:25:51,500
responsible disclosure at some point at

565
00:25:49,220 --> 00:25:54,200
some<font color="#E5E5E5"> points we asked ourselves</font><font color="#CCCCCC"> oh god</font>

566
00:25:51,500 --> 00:25:58,610
<font color="#E5E5E5">the the poor developers we ruin their</font>

567
00:25:54,200 --> 00:26:02,000
Christmas yeah<font color="#E5E5E5"> we are very sorry for</font>

568
00:25:58,610 --> 00:26:03,939
<font color="#CCCCCC">that</font><font color="#E5E5E5"> but it was great work</font>

569
00:26:02,000 --> 00:26:07,880
all the developers involved<font color="#E5E5E5"> there</font>

570
00:26:03,940 --> 00:26:10,520
thousands<font color="#E5E5E5"> of people and I'm</font><font color="#CCCCCC"> really happy</font>

571
00:26:07,880 --> 00:26:12,260
that<font color="#E5E5E5"> now an idea that I proposed is</font>

572
00:26:10,520 --> 00:26:15,470
integrated into<font color="#E5E5E5"> every operating system</font>

573
00:26:12,260 --> 00:26:17,900
<font color="#CCCCCC">that's kind of</font><font color="#E5E5E5"> Awesome</font><font color="#CCCCCC"> wait a moment</font>

574
00:26:15,470 --> 00:26:20,300
Doppler duplicato<font color="#CCCCCC"> everything so</font>

575
00:26:17,900 --> 00:26:23,390
basically you need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> page</font><font color="#CCCCCC"> maps</font><font color="#E5E5E5"> level</font>

576
00:26:20,300 --> 00:26:27,350
<font color="#CCCCCC">four so all the memory</font><font color="#E5E5E5"> hierarchy there</font>

577
00:26:23,390 --> 00:26:30,680
is duplicated isn't<font color="#E5E5E5"> that slow yeah it</font>

578
00:26:27,350 --> 00:26:32,929
depends<font color="#CCCCCC"> so</font><font color="#E5E5E5"> if you run it on old hardware</font>

579
00:26:30,680 --> 00:26:36,020
we only suggested that you would do<font color="#E5E5E5"> that</font>

580
00:26:32,930 --> 00:26:38,510
on<font color="#E5E5E5"> skylake or newer processors in the</font>

581
00:26:36,020 --> 00:26:41,600
paper that<font color="#CCCCCC"> we wrote there the</font>

582
00:26:38,510 --> 00:26:43,580
performance<font color="#E5E5E5"> stays in limits that</font><font color="#CCCCCC"> are</font>

583
00:26:41,600 --> 00:26:46,840
<font color="#E5E5E5">okay on older hardware it can be</font>

584
00:26:43,580 --> 00:26:51,980
horrible<font color="#E5E5E5"> the worst that we saw was one</font>

585
00:26:46,840 --> 00:26:53,570
one<font color="#E5E5E5"> benchmark that Amazon and</font><font color="#CCCCCC"> janeyah</font>

586
00:26:51,980 --> 00:26:56,090
posted with like<font color="#E5E5E5"> four</font><font color="#CCCCCC"> hundred percent</font>

587
00:26:53,570 --> 00:26:58,760
<font color="#E5E5E5">overhead and we</font><font color="#CCCCCC"> were like</font><font color="#E5E5E5"> okay this is</font>

588
00:26:56,090 --> 00:27:01,970
<font color="#E5E5E5">definitely not for something like</font>

589
00:26:58,760 --> 00:27:04,090
reviving<font color="#CCCCCC"> KLR if it's</font><font color="#E5E5E5"> four hundred</font>

590
00:27:01,970 --> 00:27:06,530
<font color="#CCCCCC">percent overhead</font>

591
00:27:04,090 --> 00:27:09,020
<font color="#CCCCCC">yeah modern CPUs have</font><font color="#E5E5E5"> additional</font>

592
00:27:06,530 --> 00:27:10,639
<font color="#E5E5E5">features</font><font color="#CCCCCC"> that make this thing faster</font><font color="#E5E5E5"> and</font>

593
00:27:09,020 --> 00:27:15,200
then the performance<font color="#E5E5E5"> overhead may be as</font>

594
00:27:10,640 --> 00:27:18,020
low as<font color="#E5E5E5"> 2% or we saw the phoronix</font>

595
00:27:15,200 --> 00:27:19,940
benchmarks and they reported that<font color="#E5E5E5"> while</font>

596
00:27:18,020 --> 00:27:22,190
computer gaming your computer might even

597
00:27:19,940 --> 00:27:24,430
run faster than<font color="#CCCCCC"> before</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> now they</font>

598
00:27:22,190 --> 00:27:30,080
also use<font color="#CCCCCC"> PCI DS which have some</font>

599
00:27:24,430 --> 00:27:31,850
performance advantage okay<font color="#E5E5E5"> so this is it</font>

600
00:27:30,080 --> 00:27:32,419
about<font color="#E5E5E5"> meltdown marathon is not a problem</font>

601
00:27:31,850 --> 00:27:34,520
<font color="#E5E5E5">anymore</font>

602
00:27:32,420 --> 00:27:36,170
so it is a huge problem<font color="#CCCCCC"> it was a huge</font>

603
00:27:34,520 --> 00:27:39,110
problem<font color="#E5E5E5"> but now that we have patches</font>

604
00:27:36,170 --> 00:27:40,370
against it it's done we don't<font color="#CCCCCC"> need it</font>

605
00:27:39,110 --> 00:27:42,229
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> think</font><font color="#CCCCCC"> about it anymore</font>

606
00:27:40,370 --> 00:27:44,419
maybe we should still<font color="#E5E5E5"> keep it in mind</font>

607
00:27:42,230 --> 00:27:46,580
<font color="#CCCCCC">because something</font><font color="#E5E5E5"> like that might pop up</font>

608
00:27:44,420 --> 00:27:49,310
<font color="#CCCCCC">again there is this</font><font color="#E5E5E5"> line in the</font><font color="#CCCCCC"> Linux</font>

609
00:27:46,580 --> 00:27:52,699
<font color="#E5E5E5">kernel where an AMD engineer said</font><font color="#CCCCCC"> okay</font>

610
00:27:49,310 --> 00:27:56,000
if it's an AMD CPU then everything's

611
00:27:52,700 --> 00:27:58,970
<font color="#CCCCCC">fine so</font><font color="#E5E5E5"> maybe at some point AMD will</font>

612
00:27:56,000 --> 00:28:01,130
start optimizing this part of<font color="#E5E5E5"> their CPU</font>

613
00:27:58,970 --> 00:28:04,730
and they might run into<font color="#E5E5E5"> the same bug and</font>

614
00:28:01,130 --> 00:28:07,370
then<font color="#E5E5E5"> no one remembers it and we will</font>

615
00:28:04,730 --> 00:28:12,260
<font color="#CCCCCC">have a lot of</font><font color="#E5E5E5"> fun again</font><font color="#CCCCCC"> but maybe let's</font>

616
00:28:07,370 --> 00:28:15,110
let's<font color="#CCCCCC"> think about</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> specter inspector we</font>

617
00:28:12,260 --> 00:28:16,100
so we could of<font color="#CCCCCC"> course also</font><font color="#E5E5E5"> speculatively</font>

618
00:28:15,110 --> 00:28:18,110
<font color="#CCCCCC">X</font>

619
00:28:16,100 --> 00:28:20,840
access the<font color="#E5E5E5"> colonel but then again we</font>

620
00:28:18,110 --> 00:28:26,570
would exploit the same effect as<font color="#E5E5E5"> in</font>

621
00:28:20,840 --> 00:28:29,600
<font color="#CCCCCC">Melton</font><font color="#E5E5E5"> so what we do inspector is we let</font>

622
00:28:26,570 --> 00:28:31,820
aside this meltdown bug<font color="#CCCCCC"> but we now focus</font>

623
00:28:29,600 --> 00:28:34,820
on just the speculative<font color="#E5E5E5"> execution on</font>

624
00:28:31,820 --> 00:28:36,379
valid memory addresses<font color="#E5E5E5"> so we do not</font>

625
00:28:34,820 --> 00:28:38,418
directly<font color="#CCCCCC"> access the kernel but only</font>

626
00:28:36,380 --> 00:28:41,919
convince other programs to reveal their

627
00:28:38,419 --> 00:28:45,799
secrets<font color="#CCCCCC"> and</font><font color="#E5E5E5"> this is much harder</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> fix</font>

628
00:28:41,919 --> 00:28:49,940
<font color="#CCCCCC">and</font><font color="#E5E5E5"> there's ongoing effort to patch this</font>

629
00:28:45,799 --> 00:28:54,889
via micro code by a compiler updates<font color="#E5E5E5"> to</font>

630
00:28:49,940 --> 00:28:56,419
recompile<font color="#E5E5E5"> all the software</font><font color="#CCCCCC"> yeah a lot of</font>

631
00:28:54,889 --> 00:28:59,120
<font color="#CCCCCC">work and</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> think that will keep us busy</font>

632
00:28:56,419 --> 00:29:03,010
for<font color="#E5E5E5"> at least one or two more years</font><font color="#CCCCCC"> until</font>

633
00:28:59,120 --> 00:29:06,049
we have really got to<font color="#CCCCCC"> a to a decent</font>

634
00:29:03,010 --> 00:29:11,179
<font color="#E5E5E5">situation here where we can all relax</font>

635
00:29:06,049 --> 00:29:13,309
again<font color="#E5E5E5"> the trivial idea that we heard a</font>

636
00:29:11,179 --> 00:29:17,840
<font color="#E5E5E5">lot was why don't we just disable</font>

637
00:29:13,309 --> 00:29:19,730
speculative execution<font color="#E5E5E5"> yeah if there is</font>

638
00:29:17,840 --> 00:29:22,100
no speculation then there's also no

639
00:29:19,730 --> 00:29:25,600
wrong speculation right<font color="#E5E5E5"> the problem is</font>

640
00:29:22,100 --> 00:29:28,490
that this makes the system<font color="#E5E5E5"> too slow</font><font color="#CCCCCC"> the</font>

641
00:29:25,600 --> 00:29:30,918
performance of modern processors depends

642
00:29:28,490 --> 00:29:31,789
crucially on<font color="#E5E5E5"> speculative and out of</font>

643
00:29:30,919 --> 00:29:34,789
<font color="#E5E5E5">order</font><font color="#CCCCCC"> execution</font>

644
00:29:31,789 --> 00:29:38,899
you can't just disable it there's no way

645
00:29:34,789 --> 00:29:42,440
to<font color="#E5E5E5"> disable it in a generic</font><font color="#CCCCCC"> way without</font>

646
00:29:38,899 --> 00:29:45,139
redesigning the<font color="#E5E5E5"> CPU it's deeply inter</font>

647
00:29:42,440 --> 00:29:46,850
integrated into the CPU<font color="#CCCCCC"> and how the CPU</font>

648
00:29:45,139 --> 00:29:49,570
works<font color="#E5E5E5"> so we need to find some other</font>

649
00:29:46,850 --> 00:29:52,730
mitigations that can cope<font color="#CCCCCC"> with</font>

650
00:29:49,570 --> 00:29:56,120
<font color="#E5E5E5">speculative execution</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> still try to</font>

651
00:29:52,730 --> 00:30:00,429
prevent the cases where speculative

652
00:29:56,120 --> 00:30:04,299
execution leaks something and yeah so

653
00:30:00,429 --> 00:30:08,990
mitigations of course we could insert

654
00:30:04,299 --> 00:30:11,960
instructions that stop speculation for

655
00:30:08,990 --> 00:30:14,960
instance<font color="#E5E5E5"> elephants or on</font><font color="#CCCCCC"> arms csdb</font>

656
00:30:11,960 --> 00:30:16,820
and you can insert that after every

657
00:30:14,960 --> 00:30:19,100
<font color="#CCCCCC">bounce check that way still have a</font>

658
00:30:16,820 --> 00:30:21,340
massive performance<font color="#CCCCCC"> hit</font><font color="#E5E5E5"> but maybe not as</font>

659
00:30:19,100 --> 00:30:25,090
bad as disabling speculative execution

660
00:30:21,340 --> 00:30:29,199
completely<font color="#CCCCCC"> yes so you can do that on</font>

661
00:30:25,090 --> 00:30:32,769
interviews<font color="#CCCCCC"> and on</font><font color="#E5E5E5"> arm CPUs AMD</font>

662
00:30:29,200 --> 00:30:36,370
also also said they will also<font color="#E5E5E5"> go with</font>

663
00:30:32,769 --> 00:30:40,809
<font color="#E5E5E5">the</font><font color="#CCCCCC"> elephant solution yeah</font>

664
00:30:36,370 --> 00:30:42,459
so for the speculation barriers<font color="#CCCCCC"> the</font>

665
00:30:40,809 --> 00:30:43,870
elephant<font color="#E5E5E5"> says you need compiler support</font>

666
00:30:42,460 --> 00:30:46,750
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you don't want to do that by</font>

667
00:30:43,870 --> 00:30:48,939
hand<font color="#E5E5E5"> after every bound to check and this</font>

668
00:30:46,750 --> 00:30:54,010
<font color="#E5E5E5">is already implemented in GCC LLVM and</font>

669
00:30:48,940 --> 00:30:56,409
<font color="#E5E5E5">the Microsoft compiler yeah it can</font><font color="#CCCCCC"> be</font>

670
00:30:54,010 --> 00:31:00,010
automated<font color="#E5E5E5"> but this is not really</font>

671
00:30:56,409 --> 00:31:02,710
reliable<font color="#E5E5E5"> we one of our colleagues</font>

672
00:31:00,010 --> 00:31:04,990
<font color="#E5E5E5">polyculture investigated that</font><font color="#CCCCCC"> on a set</font>

673
00:31:02,710 --> 00:31:08,169
of programs<font color="#CCCCCC"> and I think it was something</font>

674
00:31:04,990 --> 00:31:11,289
<font color="#E5E5E5">like six out of ten programs still had</font>

675
00:31:08,169 --> 00:31:13,419
the<font color="#E5E5E5"> specter vulnerability in them so it</font>

676
00:31:11,289 --> 00:31:16,600
doesn't<font color="#CCCCCC"> work reliably</font><font color="#E5E5E5"> but we will get</font>

677
00:31:13,419 --> 00:31:19,029
<font color="#E5E5E5">there over the</font><font color="#CCCCCC"> next year's</font><font color="#E5E5E5"> you can also</font>

678
00:31:16,600 --> 00:31:20,799
explicitly<font color="#E5E5E5"> say</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> don't want to do</font>

679
00:31:19,029 --> 00:31:23,440
that by<font color="#E5E5E5"> using some built-in load no</font>

680
00:31:20,799 --> 00:31:25,539
speculate<font color="#CCCCCC"> okay let's look</font><font color="#E5E5E5"> at this code</font>

681
00:31:23,440 --> 00:31:27,519
here<font color="#E5E5E5"> very simply code it's just</font><font color="#CCCCCC"> a</font>

682
00:31:25,539 --> 00:31:29,830
bounced check<font color="#E5E5E5"> and it says array</font><font color="#CCCCCC"> n or</font>

683
00:31:27,519 --> 00:31:32,590
<font color="#E5E5E5">fail and if you would rewrite that to</font>

684
00:31:29,830 --> 00:31:36,908
<font color="#CCCCCC">this new method would look like this</font>

685
00:31:32,590 --> 00:31:40,379
so much less readable<font color="#CCCCCC"> I would say it's</font>

686
00:31:36,909 --> 00:31:43,389
at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> at first at the first look and</font>

687
00:31:40,380 --> 00:31:45,279
I'm not sure whether this<font color="#CCCCCC"> is the</font><font color="#E5E5E5"> right</font>

688
00:31:43,389 --> 00:31:49,889
way to do that or whether the compiler

689
00:31:45,279 --> 00:31:55,000
shouldn't<font color="#E5E5E5"> still try to automate that as</font>

690
00:31:49,889 --> 00:31:58,178
Microsoft try to do<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> so the</font>

691
00:31:55,000 --> 00:32:01,059
speculation barrier works<font color="#CCCCCC"> if the code</font>

692
00:31:58,179 --> 00:32:03,159
constructs<font color="#E5E5E5"> are known but there are loads</font>

693
00:32:01,059 --> 00:32:05,918
of<font color="#CCCCCC"> different ways to run into spectral</font>

694
00:32:03,159 --> 00:32:07,630
<font color="#E5E5E5">variant</font><font color="#CCCCCC"> one vulnerabilities in the end</font>

695
00:32:05,919 --> 00:32:10,299
the programmer has<font color="#CCCCCC"> to take care about</font>

696
00:32:07,630 --> 00:32:12,309
that and we have<font color="#CCCCCC"> to we have to</font><font color="#E5E5E5"> see</font>

697
00:32:10,299 --> 00:32:16,418
whether automatic detection will be

698
00:32:12,309 --> 00:32:19,389
reliable at some point and<font color="#E5E5E5"> also you will</font>

699
00:32:16,419 --> 00:32:21,340
have<font color="#E5E5E5"> a non-negligible overhead for these</font>

700
00:32:19,389 --> 00:32:23,769
barriers<font color="#E5E5E5"> it will still</font><font color="#CCCCCC"> be a performance</font>

701
00:32:21,340 --> 00:32:25,658
hit<font color="#E5E5E5"> of if you would introduce it</font><font color="#CCCCCC"> to</font>

702
00:32:23,769 --> 00:32:27,279
every<font color="#E5E5E5"> bounce check still a performance</font>

703
00:32:25,659 --> 00:32:32,380
overhead of something like factor<font color="#CCCCCC"> two</font>

704
00:32:27,279 --> 00:32:34,000
<font color="#CCCCCC">three or four something like that</font><font color="#E5E5E5"> for</font>

705
00:32:32,380 --> 00:32:36,789
<font color="#CCCCCC">spective a</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> - I think</font><font color="#E5E5E5"> the situation</font>

706
00:32:34,000 --> 00:32:39,960
<font color="#CCCCCC">might be a bit better because Specter</font>

707
00:32:36,789 --> 00:32:43,980
variant<font color="#CCCCCC"> two realized a lot on</font>

708
00:32:39,960 --> 00:32:48,330
<font color="#CCCCCC">missed raining out of place</font><font color="#E5E5E5"> and you can</font>

709
00:32:43,980 --> 00:32:50,490
prevent that<font color="#CCCCCC"> entire</font><font color="#E5E5E5"> released some</font>

710
00:32:48,330 --> 00:32:53,310
<font color="#CCCCCC">microcode updates</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> that the</font><font color="#E5E5E5"> first the</font>

711
00:32:50,490 --> 00:32:55,500
IBRS<font color="#E5E5E5"> is some new mode and when the</font>

712
00:32:53,310 --> 00:32:58,820
processor enters this IBRS mode it won't

713
00:32:55,500 --> 00:33:02,670
speculate on<font color="#E5E5E5"> based on anything</font><font color="#CCCCCC"> before</font>

714
00:32:58,820 --> 00:33:04,889
<font color="#CCCCCC">entering the</font><font color="#E5E5E5"> IBRS mode</font><font color="#CCCCCC"> I'm not sure</font><font color="#E5E5E5"> so I</font>

715
00:33:02,670 --> 00:33:07,260
read different documents from<font color="#E5E5E5"> Intel some</font>

716
00:33:04,890 --> 00:33:09,600
say like this<font color="#E5E5E5"> others say it won't</font>

717
00:33:07,260 --> 00:33:13,920
speculate<font color="#E5E5E5"> from based on anything outside</font>

718
00:33:09,600 --> 00:33:15,389
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the IBRS mode so we will see</font><font color="#E5E5E5"> what</font>

719
00:33:13,920 --> 00:33:17,820
<font color="#CCCCCC">weather Intel updates there are</font>

720
00:33:15,390 --> 00:33:23,130
different documents at some point to

721
00:33:17,820 --> 00:33:25,100
clarify<font color="#E5E5E5"> this yeah so the idea</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> less a</font>

722
00:33:23,130 --> 00:33:28,380
<font color="#CCCCCC">privileged code cannot influence the</font>

723
00:33:25,100 --> 00:33:31,379
predictions here<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> ask the IB PB</font>

724
00:33:28,380 --> 00:33:33,390
which is basically a mechanism<font color="#E5E5E5"> to flush</font>

725
00:33:31,380 --> 00:33:35,610
the branch target buffer and then

726
00:33:33,390 --> 00:33:41,220
<font color="#E5E5E5">prevent that the processor will do a</font>

727
00:33:35,610 --> 00:33:44,600
<font color="#E5E5E5">prediction based on previous previously</font>

728
00:33:41,220 --> 00:33:47,570
learned things<font color="#E5E5E5"> then we have the SGI VP</font>

729
00:33:44,600 --> 00:33:50,070
<font color="#E5E5E5">which is basically a mechanism to</font>

730
00:33:47,570 --> 00:33:50,909
isolate the branch prediction between

731
00:33:50,070 --> 00:33:53,939
the high path

732
00:33:50,910 --> 00:33:56,370
<font color="#CCCCCC">so</font><font color="#E5E5E5"> one hyper thread won't do a</font>

733
00:33:53,940 --> 00:33:59,030
prediction<font color="#E5E5E5"> based on what the other hyper</font>

734
00:33:56,370 --> 00:34:01,709
thread has learned in the past<font color="#E5E5E5"> few</font>

735
00:33:59,030 --> 00:34:04,920
instructions<font color="#E5E5E5"> there's also a software</font>

736
00:34:01,710 --> 00:34:05,580
mechanism<font color="#E5E5E5"> against</font><font color="#CCCCCC"> Spector</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> that</font>

737
00:34:04,920 --> 00:34:07,890
was proposed

738
00:34:05,580 --> 00:34:11,850
<font color="#CCCCCC">Redfoo lines</font><font color="#E5E5E5"> and if we look at the code</font>

739
00:34:07,890 --> 00:34:16,200
<font color="#CCCCCC">I some assembly</font><font color="#E5E5E5"> code here you would take</font>

740
00:34:11,850 --> 00:34:19,080
every indirect call in your program<font color="#CCCCCC"> and</font>

741
00:34:16,199 --> 00:34:22,589
you would start<font color="#E5E5E5"> by replacing the</font>

742
00:34:19,080 --> 00:34:26,489
indirect call by some instruction some

743
00:34:22,590 --> 00:34:28,800
instructions plus some indirect jump the

744
00:34:26,489 --> 00:34:33,719
next<font color="#CCCCCC"> thing you do is</font><font color="#E5E5E5"> you replace every</font>

745
00:34:28,800 --> 00:34:37,050
indirect jump by this<font color="#E5E5E5"> construction every</font>

746
00:34:33,719 --> 00:34:39,569
indirect jump and this does some weird

747
00:34:37,050 --> 00:34:42,330
<font color="#E5E5E5">things that we usually only know from</font>

748
00:34:39,570 --> 00:34:44,970
<font color="#CCCCCC">return oriented</font><font color="#E5E5E5"> programming so it uses</font>

749
00:34:42,330 --> 00:34:50,610
<font color="#E5E5E5">the return instruction</font><font color="#CCCCCC"> to jump to some</font>

750
00:34:44,969 --> 00:34:53,009
function<font color="#E5E5E5"> and by doing that we</font><font color="#CCCCCC"> can trick</font>

751
00:34:50,610 --> 00:34:53,270
the speculative execution<font color="#E5E5E5"> because the</font>

752
00:34:53,010 --> 00:34:55,610
space

753
00:34:53,270 --> 00:34:58,190
<font color="#CCCCCC">village of execution we'll see it with</font>

754
00:34:55,610 --> 00:35:00,070
the the speculative<font color="#E5E5E5"> execution for now it</font>

755
00:34:58,190 --> 00:35:03,860
doesn't<font color="#E5E5E5"> understand</font><font color="#CCCCCC"> that this here</font>

756
00:35:00,070 --> 00:35:05,510
changes<font color="#E5E5E5"> the call target here of this</font>

757
00:35:03,860 --> 00:35:07,370
return instruction the return

758
00:35:05,510 --> 00:35:10,240
<font color="#CCCCCC">instruction is also an indirect call in</font>

759
00:35:07,370 --> 00:35:13,819
some way or an indirect<font color="#CCCCCC"> jump in some</font><font color="#E5E5E5"> way</font>

760
00:35:10,240 --> 00:35:16,669
but<font color="#E5E5E5"> the processor</font><font color="#CCCCCC"> doesn't understand</font>

761
00:35:13,820 --> 00:35:19,370
that this modifies the call target here

762
00:35:16,670 --> 00:35:21,050
else they would speculative<font color="#E5E5E5"> they would</font>

763
00:35:19,370 --> 00:35:24,020
speculate correctly at some point if

764
00:35:21,050 --> 00:35:26,510
they would<font color="#E5E5E5"> learn that</font><font color="#CCCCCC"> so what the</font>

765
00:35:24,020 --> 00:35:28,370
processor<font color="#CCCCCC"> does is it sees</font><font color="#E5E5E5"> okay you call</font>

766
00:35:26,510 --> 00:35:30,770
here you will immediately return so I

767
00:35:28,370 --> 00:35:34,009
will<font color="#E5E5E5"> speculate here and it will run</font><font color="#CCCCCC"> in</font>

768
00:35:30,770 --> 00:35:35,630
<font color="#E5E5E5">this endless</font><font color="#CCCCCC"> loop forever yeah so it</font>

769
00:35:34,010 --> 00:35:41,030
always<font color="#E5E5E5"> predicts to enter an endless loop</font>

770
00:35:35,630 --> 00:35:44,750
<font color="#E5E5E5">that's interesting so</font><font color="#CCCCCC"> it prevents that</font>

771
00:35:41,030 --> 00:35:47,150
you're predicting the wrong function but

772
00:35:44,750 --> 00:35:48,950
it also prevents that you're<font color="#E5E5E5"> predicting</font>

773
00:35:47,150 --> 00:35:53,270
the correct function right<font color="#CCCCCC"> so you're</font>

774
00:35:48,950 --> 00:35:56,330
always losing performance<font color="#E5E5E5"> also on</font>

775
00:35:53,270 --> 00:35:58,940
<font color="#CCCCCC">Broadwell on us</font><font color="#E5E5E5"> CPUs the return</font>

776
00:35:56,330 --> 00:36:01,970
<font color="#CCCCCC">instruction may fall back on the branch</font>

777
00:35:58,940 --> 00:36:04,730
target buffer for prediction and there's

778
00:36:01,970 --> 00:36:07,790
also there are also mechanisms for the

779
00:36:04,730 --> 00:36:09,350
return<font color="#CCCCCC"> instruction for predictions then</font>

780
00:36:07,790 --> 00:36:13,850
there<font color="#E5E5E5"> are micro code patches again</font><font color="#CCCCCC"> to</font>

781
00:36:09,350 --> 00:36:16,580
prevent<font color="#CCCCCC"> that and so situation is a bit</font>

782
00:36:13,850 --> 00:36:20,029
<font color="#E5E5E5">complicated there but I think</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we</font>

783
00:36:16,580 --> 00:36:25,580
can we<font color="#CCCCCC"> can we can work charts and</font>

784
00:36:20,030 --> 00:36:28,550
getting that resolved arm<font color="#E5E5E5"> also</font><font color="#CCCCCC"> did some</font>

785
00:36:25,580 --> 00:36:31,700
things<font color="#CCCCCC"> with respect</font><font color="#E5E5E5"> to variant</font><font color="#CCCCCC"> two so</font>

786
00:36:28,550 --> 00:36:33,710
they<font color="#E5E5E5"> provided</font><font color="#CCCCCC"> an a hard Liang's</font><font color="#E5E5E5"> kernel</font>

787
00:36:31,700 --> 00:36:35,390
and this one clears the branch predictor

788
00:36:33,710 --> 00:36:37,460
<font color="#CCCCCC">State on context switches they don't</font>

789
00:36:35,390 --> 00:36:38,690
have<font color="#E5E5E5"> hyper threading so they don't have</font>

790
00:36:37,460 --> 00:36:41,690
some<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> vulnerabilities that</font>

791
00:36:38,690 --> 00:36:44,810
<font color="#CCCCCC">Internet</font><font color="#E5E5E5"> yeah and they introduced new</font>

792
00:36:41,690 --> 00:36:45,770
instructions for that or<font color="#E5E5E5"> you could</font>

793
00:36:44,810 --> 00:36:47,630
disabled to enabled

794
00:36:45,770 --> 00:36:51,580
<font color="#E5E5E5">mmm you also to do the same thing and</font>

795
00:36:47,630 --> 00:36:54,770
this has a<font color="#E5E5E5"> non negligible overhead again</font>

796
00:36:51,580 --> 00:36:56,840
<font color="#E5E5E5">but yeah we don't want to have these</font>

797
00:36:54,770 --> 00:36:58,870
vulnerabilities<font color="#E5E5E5"> in our systems</font><font color="#CCCCCC"> so we at</font>

798
00:36:56,840 --> 00:37:02,060
some<font color="#CCCCCC"> point have to accept the overhead</font>

799
00:36:58,870 --> 00:37:06,890
<font color="#E5E5E5">for now I hope that more</font><font color="#CCCCCC"> modern CPUs</font>

800
00:37:02,060 --> 00:37:11,799
will reduce the overheads again all

801
00:37:06,890 --> 00:37:13,700
things that<font color="#E5E5E5"> people</font><font color="#CCCCCC"> proposed to us were</font>

802
00:37:11,799 --> 00:37:17,990
preventing access to high resolution

803
00:37:13,700 --> 00:37:20,720
<font color="#CCCCCC">timers</font><font color="#E5E5E5"> that doesn't work</font><font color="#CCCCCC"> as as soon as</font>

804
00:37:17,990 --> 00:37:24,259
you have multi-threading you can build

805
00:37:20,720 --> 00:37:27,348
your own timer<font color="#E5E5E5"> and the funny thing is we</font>

806
00:37:24,260 --> 00:37:30,260
showed<font color="#CCCCCC"> that in a recent paper the most</font>

807
00:37:27,349 --> 00:37:33,200
accurate timer that<font color="#E5E5E5"> you can get on Intel</font>

808
00:37:30,260 --> 00:37:34,940
<font color="#E5E5E5">CPUs is usually our DTSC reading the</font>

809
00:37:33,200 --> 00:37:38,509
time stem register<font color="#E5E5E5"> it will give you</font>

810
00:37:34,940 --> 00:37:40,220
something<font color="#CCCCCC"> like a</font><font color="#E5E5E5"> something like if you</font>

811
00:37:38,510 --> 00:37:42,920
<font color="#CCCCCC">have a 4 gigahertz CPU it might have</font>

812
00:37:40,220 --> 00:37:46,730
something<font color="#CCCCCC"> like a 0.25 nanosecond</font>

813
00:37:42,920 --> 00:37:49,250
resolution although it will<font color="#CCCCCC"> only usually</font>

814
00:37:46,730 --> 00:37:53,539
<font color="#E5E5E5">do an increment</font><font color="#CCCCCC"> every 3 cycles so</font>

815
00:37:49,250 --> 00:37:57,890
something like 0.75 nanoseconds<font color="#CCCCCC"> turns</font>

816
00:37:53,539 --> 00:37:59,750
out if you build<font color="#E5E5E5"> your own timer using a</font>

817
00:37:57,890 --> 00:38:03,109
timing thread you're a bit faster<font color="#CCCCCC"> than</font>

818
00:37:59,750 --> 00:38:06,529
the<font color="#CCCCCC"> higher DTSC instruction so no</font>

819
00:38:03,109 --> 00:38:08,538
disadvantage<font color="#E5E5E5"> there</font><font color="#CCCCCC"> other suggestions</font>

820
00:38:06,529 --> 00:38:11,329
were to make the flush instruction

821
00:38:08,539 --> 00:38:13,430
privileged<font color="#E5E5E5"> yeah you can also do</font><font color="#CCCCCC"> just to</font>

822
00:38:11,329 --> 00:38:15,349
<font color="#CCCCCC">cache eviction the cache has a</font><font color="#E5E5E5"> limited</font>

823
00:38:13,430 --> 00:38:17,299
size and it<font color="#E5E5E5"> is organized in a</font><font color="#CCCCCC"> very</font>

824
00:38:15,349 --> 00:38:19,400
specific way<font color="#E5E5E5"> that allows you to access</font>

825
00:38:17,299 --> 00:38:21,440
only<font color="#CCCCCC"> a small number</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> addresses and</font>

826
00:38:19,400 --> 00:38:24,230
<font color="#E5E5E5">evict the cache through that and you</font>

827
00:38:21,440 --> 00:38:28,099
<font color="#CCCCCC">might know that</font><font color="#E5E5E5"> flushing things from the</font>

828
00:38:24,230 --> 00:38:31,730
cache is also the the tool that<font color="#E5E5E5"> we need</font>

829
00:38:28,099 --> 00:38:33,529
<font color="#E5E5E5">for row hammer attacks but we showed in</font>

830
00:38:31,730 --> 00:38:36,140
2015 that you<font color="#E5E5E5"> can also do that with</font>

831
00:38:33,529 --> 00:38:39,529
cache eviction so cache eviction is

832
00:38:36,140 --> 00:38:41,089
quite fast<font color="#CCCCCC"> it's fast enough to</font><font color="#E5E5E5"> do</font><font color="#CCCCCC"> row</font>

833
00:38:39,529 --> 00:38:44,119
<font color="#CCCCCC">him</font><font color="#E5E5E5"> I definitely fast enough for our</font>

834
00:38:41,089 --> 00:38:46,640
<font color="#E5E5E5">attacks here we can also just move</font>

835
00:38:44,119 --> 00:38:48,619
secrets to the secure<font color="#E5E5E5"> word right to</font><font color="#CCCCCC"> SGX</font>

836
00:38:46,640 --> 00:38:50,450
or something like<font color="#E5E5E5"> that</font><font color="#CCCCCC"> yeah</font>

837
00:38:48,619 --> 00:38:54,319
unfortunately<font color="#CCCCCC"> Specter attacks work on</font>

838
00:38:50,450 --> 00:38:57,470
securing<font color="#CCCCCC"> clicks</font><font color="#E5E5E5"> so maybe that also</font>

839
00:38:54,319 --> 00:39:00,109
<font color="#CCCCCC">doesn't</font><font color="#E5E5E5"> work the question</font><font color="#CCCCCC"> is what</font><font color="#E5E5E5"> did we</font>

840
00:38:57,470 --> 00:39:01,910
learn<font color="#CCCCCC"> from all this I think we learned</font>

841
00:39:00,109 --> 00:39:04,538
from this<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have ignored software</font>

842
00:39:01,910 --> 00:39:07,519
<font color="#CCCCCC">psytrance</font><font color="#E5E5E5"> for many many years</font>

843
00:39:04,539 --> 00:39:10,759
there have been<font color="#CCCCCC"> the first reports that</font>

844
00:39:07,519 --> 00:39:14,779
you could use the micro architectural

845
00:39:10,759 --> 00:39:17,950
effect<font color="#CCCCCC"> micro architecture it effects to</font>

846
00:39:14,779 --> 00:39:20,540
mount timing attacks on cryptographic

847
00:39:17,950 --> 00:39:23,359
algorithms and

848
00:39:20,540 --> 00:39:27,619
what the entire<font color="#E5E5E5"> academic community said</font>

849
00:39:23,359 --> 00:39:29,180
was<font color="#E5E5E5"> well it's a problem of</font><font color="#CCCCCC"> the algorithm</font>

850
00:39:27,619 --> 00:39:31,520
right<font color="#E5E5E5"> it should be implemented in a</font>

851
00:39:29,180 --> 00:39:35,779
correct way that is not<font color="#E5E5E5"> leaking secrets</font>

852
00:39:31,520 --> 00:39:38,839
through timing differences<font color="#E5E5E5"> not doing any</font>

853
00:39:35,780 --> 00:39:40,510
<font color="#E5E5E5">timing as a secret dependent behavior</font>

854
00:39:38,839 --> 00:39:43,670
which results in<font color="#CCCCCC"> different timing and</font>

855
00:39:40,510 --> 00:39:46,250
this was quite<font color="#CCCCCC"> established</font><font color="#E5E5E5"> so this is</font>

856
00:39:43,670 --> 00:39:48,770
still the<font color="#CCCCCC"> case so if you</font><font color="#E5E5E5"> design a crypto</font>

857
00:39:46,250 --> 00:39:50,030
algorithm if<font color="#CCCCCC"> it's if it has a</font><font color="#E5E5E5"> timing</font>

858
00:39:48,770 --> 00:39:51,800
difference<font color="#E5E5E5"> in one or the other case</font>

859
00:39:50,030 --> 00:39:54,349
<font color="#E5E5E5">people will immediately considered</font>

860
00:39:51,800 --> 00:39:57,710
insecure<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> also the same thing</font>

861
00:39:54,349 --> 00:40:00,920
to do because<font color="#E5E5E5"> the processors are as they</font>

862
00:39:57,710 --> 00:40:02,210
<font color="#CCCCCC">are and we</font><font color="#E5E5E5"> need to cope with that but we</font>

863
00:40:00,920 --> 00:40:05,810
saw different<font color="#CCCCCC"> attacks for instance</font>

864
00:40:02,210 --> 00:40:08,060
<font color="#E5E5E5">attacks on a SLR</font><font color="#CCCCCC"> we did one</font><font color="#E5E5E5"> the prefetch</font>

865
00:40:05,810 --> 00:40:10,310
side channel attack<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> this is</font>

866
00:40:08,060 --> 00:40:14,170
already this was<font color="#E5E5E5"> already highly related</font>

867
00:40:10,310 --> 00:40:17,540
to meltdown in the<font color="#CCCCCC"> way that it works and</font>

868
00:40:14,170 --> 00:40:19,910
there we reported this issue to<font color="#CCCCCC"> Intel</font>

869
00:40:17,540 --> 00:40:22,640
the prefetch<font color="#CCCCCC"> side chain</font><font color="#E5E5E5"> attack we talked</font>

870
00:40:19,910 --> 00:40:27,170
<font color="#E5E5E5">change and yeah the response that we got</font>

871
00:40:22,640 --> 00:40:30,640
<font color="#E5E5E5">from from different so basically</font>

872
00:40:27,170 --> 00:40:33,950
everyone<font color="#E5E5E5"> we spoke to not not only Intel</font>

873
00:40:30,640 --> 00:40:37,879
was<font color="#E5E5E5"> basically yeah SLR</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> broken anyway</font>

874
00:40:33,950 --> 00:40:42,609
<font color="#CCCCCC">why</font><font color="#E5E5E5"> should we care about this</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> but</font>

875
00:40:37,880 --> 00:40:45,349
<font color="#E5E5E5">in the end</font><font color="#CCCCCC"> SLR gives you some some</font>

876
00:40:42,609 --> 00:40:48,109
probabilistic security that's still

877
00:40:45,349 --> 00:40:50,300
valuable<font color="#CCCCCC"> and having a side channel which</font>

878
00:40:48,109 --> 00:40:55,490
lets you defeat it<font color="#E5E5E5"> in like a second is</font>

879
00:40:50,300 --> 00:40:57,530
really really<font color="#E5E5E5"> a bad situation then we</font>

880
00:40:55,490 --> 00:40:59,118
have<font color="#E5E5E5"> these attacks on</font><font color="#CCCCCC"> sjx</font><font color="#E5E5E5"> and Trust zone</font>

881
00:40:57,530 --> 00:41:01,780
and they are we attacked an algorithm

882
00:40:59,119 --> 00:41:06,050
similar<font color="#E5E5E5"> algorithms are</font><font color="#CCCCCC"> used for instance</font>

883
00:41:01,780 --> 00:41:08,750
encrypted<font color="#CCCCCC"> sin in I think it was not a</font>

884
00:41:06,050 --> 00:41:11,000
Bitcoin wallet<font color="#CCCCCC"> but some other coin</font><font color="#E5E5E5"> some</font>

885
00:41:08,750 --> 00:41:14,119
wallet<font color="#E5E5E5"> and they</font><font color="#CCCCCC"> suggested yeah we do all</font>

886
00:41:11,000 --> 00:41:16,640
<font color="#CCCCCC">the</font><font color="#E5E5E5"> operations and</font><font color="#CCCCCC"> hgx</font><font color="#E5E5E5"> because there</font>

887
00:41:14,119 --> 00:41:19,310
<font color="#E5E5E5">it's secure and we keep your</font><font color="#CCCCCC"> private key</font>

888
00:41:16,640 --> 00:41:22,819
in there and there it's secure and we

889
00:41:19,310 --> 00:41:25,790
showed that<font color="#E5E5E5"> if an insecure algorithm is</font>

890
00:41:22,820 --> 00:41:30,970
implemented inside<font color="#CCCCCC"> SGX</font><font color="#E5E5E5"> we can leak the</font>

891
00:41:25,790 --> 00:41:32,779
private key now what Intel said was yeah

892
00:41:30,970 --> 00:41:35,689
the

893
00:41:32,780 --> 00:41:37,490
side channel attacks on<font color="#CCCCCC"> SGX are not part</font>

894
00:41:35,690 --> 00:41:40,640
of the threat model<font color="#CCCCCC"> right</font><font color="#E5E5E5"> why should</font><font color="#CCCCCC"> we</font>

895
00:41:37,490 --> 00:41:44,089
care<font color="#E5E5E5"> and the interesting thing then is</font>

896
00:41:40,640 --> 00:41:45,680
if the vendors<font color="#CCCCCC"> just copy-paste</font><font color="#E5E5E5"> this</font>

897
00:41:44,090 --> 00:41:48,650
statement and<font color="#E5E5E5"> say yeah this is out of</font>

898
00:41:45,680 --> 00:41:50,180
outside<font color="#E5E5E5"> of our threat</font><font color="#CCCCCC"> model and it</font>

899
00:41:48,650 --> 00:41:53,150
doesn't work<font color="#CCCCCC"> like that</font><font color="#E5E5E5"> if it's outside</font>

900
00:41:50,180 --> 00:41:58,549
of there's a threat model<font color="#E5E5E5"> it might be</font>

901
00:41:53,150 --> 00:42:02,290
exactly<font color="#E5E5E5"> in in my scope so maybe I should</font>

902
00:41:58,550 --> 00:42:03,470
care about<font color="#E5E5E5"> if my customers</font><font color="#CCCCCC"> lose money</font>

903
00:42:02,290 --> 00:42:06,470
<font color="#CCCCCC">okay</font>

904
00:42:03,470 --> 00:42:09,459
so what we learn is we solely optimized

905
00:42:06,470 --> 00:42:12,890
for<font color="#CCCCCC"> performance in the</font><font color="#E5E5E5"> past years and</font>

906
00:42:09,460 --> 00:42:16,970
maybe that's something<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> should</font>

907
00:42:12,890 --> 00:42:18,830
change maybe<font color="#E5E5E5"> performance is something</font>

908
00:42:16,970 --> 00:42:22,910
<font color="#CCCCCC">that we want to achieve but not at all</font>

909
00:42:18,830 --> 00:42:24,620
cost one thing<font color="#E5E5E5"> that I also want to</font>

910
00:42:22,910 --> 00:42:27,109
mention<font color="#E5E5E5"> when you read the menu is the</font>

911
00:42:24,620 --> 00:42:28,759
entire menu<font color="#E5E5E5"> is after learning about a</font>

912
00:42:27,110 --> 00:42:31,150
<font color="#E5E5E5">sanctuary</font><font color="#CCCCCC"> we also</font><font color="#E5E5E5"> had the same thing</font>

913
00:42:28,760 --> 00:42:33,380
when we found the prefetch<font color="#E5E5E5"> sidechain</font>

914
00:42:31,150 --> 00:42:35,450
afterwards<font color="#E5E5E5"> you read the Intel</font>

915
00:42:33,380 --> 00:42:38,000
documentation and<font color="#E5E5E5"> you realize everything</font>

916
00:42:35,450 --> 00:42:40,279
was documented<font color="#E5E5E5"> it was just written in an</font>

917
00:42:38,000 --> 00:42:43,040
obscure way that you didn't understand

918
00:42:40,280 --> 00:42:44,180
the<font color="#E5E5E5"> implications</font><font color="#CCCCCC"> and probably so I don't</font>

919
00:42:43,040 --> 00:42:46,430
know<font color="#E5E5E5"> whether they understood the</font>

920
00:42:44,180 --> 00:42:49,879
implications<font color="#E5E5E5"> they might not</font><font color="#CCCCCC"> have</font>

921
00:42:46,430 --> 00:42:51,890
understood<font color="#E5E5E5"> the implications but once you</font>

922
00:42:49,880 --> 00:42:54,710
<font color="#CCCCCC">know it</font><font color="#E5E5E5"> and you read the statements</font>

923
00:42:51,890 --> 00:42:59,589
again you see<font color="#E5E5E5"> okay it should</font><font color="#CCCCCC"> have been</font>

924
00:42:54,710 --> 00:43:03,770
clear<font color="#E5E5E5"> all along</font><font color="#CCCCCC"> right</font><font color="#E5E5E5"> it says explicitly</font>

925
00:42:59,590 --> 00:43:07,370
<font color="#E5E5E5">speculative execution</font><font color="#CCCCCC"> may leave data in</font>

926
00:43:03,770 --> 00:43:09,530
the cache<font color="#E5E5E5"> so</font><font color="#CCCCCC"> yeah it should have</font><font color="#E5E5E5"> been</font>

927
00:43:07,370 --> 00:43:15,620
<font color="#E5E5E5">quite obvious what</font><font color="#CCCCCC"> do we learn from</font><font color="#E5E5E5"> it</font>

928
00:43:09,530 --> 00:43:18,470
maybe in our our industry<font color="#E5E5E5"> and also in</font>

929
00:43:15,620 --> 00:43:21,049
the scientific community<font color="#E5E5E5"> we</font><font color="#CCCCCC"> must go</font>

930
00:43:18,470 --> 00:43:24,290
through some evolution<font color="#E5E5E5"> that other</font>

931
00:43:21,050 --> 00:43:30,290
<font color="#E5E5E5">industries already had for</font><font color="#CCCCCC"> instance the</font>

932
00:43:24,290 --> 00:43:32,420
car<font color="#E5E5E5"> industry in the 50s and 60s</font><font color="#CCCCCC"> cars got</font>

933
00:43:30,290 --> 00:43:34,790
faster and<font color="#E5E5E5"> faster and at some point</font>

934
00:43:32,420 --> 00:43:37,040
people realized if I can go 200 miles

935
00:43:34,790 --> 00:43:37,700
<font color="#CCCCCC">per hour</font><font color="#E5E5E5"> and run into</font><font color="#CCCCCC"> a wall and die</font>

936
00:43:37,040 --> 00:43:40,340
immediately

937
00:43:37,700 --> 00:43:42,290
that's bad<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> maybe I should I would</font>

938
00:43:40,340 --> 00:43:44,090
still die with 200 miles per<font color="#E5E5E5"> hour you</font>

939
00:43:42,290 --> 00:43:46,250
know<font color="#E5E5E5"> and running into a wall</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> if I</font>

940
00:43:44,090 --> 00:43:46,580
have a crash with 50 miles per<font color="#E5E5E5"> hour I</font>

941
00:43:46,250 --> 00:43:49,420
<font color="#E5E5E5">would</font>

942
00:43:46,580 --> 00:43:52,009
still<font color="#E5E5E5"> die but the car would mostly be</font>

943
00:43:49,420 --> 00:43:54,050
<font color="#E5E5E5">unaffected by</font><font color="#CCCCCC"> that by a crash at</font><font color="#E5E5E5"> 50</font>

944
00:43:52,010 --> 00:43:57,310
<font color="#E5E5E5">miles per hour with the cars there are</font>

945
00:43:54,050 --> 00:44:01,640
crash tests you can search for<font color="#CCCCCC"> them</font><font color="#E5E5E5"> on</font>

946
00:43:57,310 --> 00:44:03,529
<font color="#E5E5E5">YouTube crash tests from the 20s where</font>

947
00:44:01,640 --> 00:44:05,810
they have a car<font color="#E5E5E5"> running into a wall and</font>

948
00:44:03,530 --> 00:44:08,720
the car<font color="#CCCCCC"> basically looks like it took no</font>

949
00:44:05,810 --> 00:44:11,600
damage<font color="#CCCCCC"> but the driver</font><font color="#E5E5E5"> threw like a few</font>

950
00:44:08,720 --> 00:44:15,799
meters out of the car because<font color="#E5E5E5"> the</font><font color="#CCCCCC"> driver</font>

951
00:44:11,600 --> 00:44:17,540
takes all the energy<font color="#CCCCCC"> young so at some</font>

952
00:44:15,800 --> 00:44:19,490
<font color="#E5E5E5">point people realized okay maybe we</font>

953
00:44:17,540 --> 00:44:21,529
<font color="#E5E5E5">should have something like</font><font color="#CCCCCC"> seatbelts</font>

954
00:44:19,490 --> 00:44:24,140
maybe more<font color="#E5E5E5"> seat belts at some point</font>

955
00:44:21,530 --> 00:44:26,180
<font color="#E5E5E5">airbags</font><font color="#CCCCCC"> nowadays we even have airbags on</font>

956
00:44:24,140 --> 00:44:29,629
the outside of our cars if it's a modern

957
00:44:26,180 --> 00:44:35,000
car<font color="#CCCCCC"> ABS so there's a lot</font><font color="#E5E5E5"> of innovation</font>

958
00:44:29,630 --> 00:44:36,860
<font color="#CCCCCC">going into safety and maybe we should go</font>

959
00:44:35,000 --> 00:44:39,440
<font color="#E5E5E5">through the same evolution but with</font>

960
00:44:36,860 --> 00:44:41,900
respect<font color="#E5E5E5"> to</font><font color="#CCCCCC"> security maybe we should</font>

961
00:44:39,440 --> 00:44:46,340
think<font color="#CCCCCC"> about okay</font><font color="#E5E5E5"> it's great to be fast</font>

962
00:44:41,900 --> 00:44:49,100
but it's also great<font color="#CCCCCC"> to</font><font color="#E5E5E5"> not run</font><font color="#CCCCCC"> into big</font>

963
00:44:46,340 --> 00:44:53,170
trouble while<font color="#CCCCCC"> you're doing that</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> yeah</font>

964
00:44:49,100 --> 00:44:55,970
if you would think<font color="#E5E5E5"> of a crash test</font>

965
00:44:53,170 --> 00:44:58,250
<font color="#E5E5E5">without</font><font color="#CCCCCC"> seat</font><font color="#E5E5E5"> belts</font><font color="#CCCCCC"> things were quite</font>

966
00:44:55,970 --> 00:45:01,009
terrible<font color="#E5E5E5"> also just a few years of</font>

967
00:44:58,250 --> 00:45:03,980
difference<font color="#CCCCCC"> you see what a difference it</font>

968
00:45:01,010 --> 00:45:08,060
made in the<font color="#CCCCCC"> chances for it for drivers</font>

969
00:45:03,980 --> 00:45:10,610
to survive also something<font color="#E5E5E5"> that we</font>

970
00:45:08,060 --> 00:45:16,420
realized while working on<font color="#E5E5E5"> melt inspector</font>

971
00:45:10,610 --> 00:45:16,420
but even more so<font color="#E5E5E5"> working on row hammer</font>

972
00:45:17,170 --> 00:45:24,050
<font color="#E5E5E5">people are</font><font color="#CCCCCC"> working a lot on defending</font>

973
00:45:19,970 --> 00:45:26,020
against attacks<font color="#E5E5E5"> also</font><font color="#CCCCCC"> when we published</font>

974
00:45:24,050 --> 00:45:31,490
marathon inspectors<font color="#CCCCCC"> there were already</font>

975
00:45:26,020 --> 00:45:34,600
<font color="#E5E5E5">quite a few voices suggesting how to how</font>

976
00:45:31,490 --> 00:45:38,509
to<font color="#E5E5E5"> fix these issues this is important</font>

977
00:45:34,600 --> 00:45:42,680
but what I faced<font color="#E5E5E5"> especially during my</font>

978
00:45:38,510 --> 00:45:44,540
PhD<font color="#E5E5E5"> was often that people said</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> why</font>

979
00:45:42,680 --> 00:45:47,029
do you focus<font color="#CCCCCC"> so much on a text you</font>

980
00:45:44,540 --> 00:45:48,470
<font color="#CCCCCC">should focus more on defenses after</font><font color="#E5E5E5"> all</font>

981
00:45:47,030 --> 00:45:51,560
you<font color="#E5E5E5"> want to make the secure a better</font>

982
00:45:48,470 --> 00:45:55,220
place right<font color="#CCCCCC"> and not</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> see it burn and</font>

983
00:45:51,560 --> 00:45:58,460
I was like yeah<font color="#CCCCCC"> but if</font><font color="#E5E5E5"> we only</font><font color="#CCCCCC"> focus on</font>

984
00:45:55,220 --> 00:45:59,990
the attacks that<font color="#CCCCCC"> were on the attacks</font>

985
00:45:58,460 --> 00:46:00,539
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we already know and search for</font>

986
00:45:59,990 --> 00:46:03,598
defenses

987
00:46:00,539 --> 00:46:05,789
against those attacks<font color="#E5E5E5"> do we even know</font>

988
00:46:03,599 --> 00:46:07,499
the attacks we need to know<font color="#E5E5E5"> we</font>

989
00:46:05,789 --> 00:46:08,160
<font color="#E5E5E5">overlooked meltdown inspector for</font>

990
00:46:07,499 --> 00:46:11,729
decades

991
00:46:08,160 --> 00:46:15,689
right<font color="#E5E5E5"> so this sort of proved my opinion</font>

992
00:46:11,729 --> 00:46:18,149
there<font color="#CCCCCC"> maybe we don't know all</font><font color="#E5E5E5"> the</font>

993
00:46:15,689 --> 00:46:20,308
problems<font color="#CCCCCC"> I would see the the set</font><font color="#E5E5E5"> of all</font>

994
00:46:18,150 --> 00:46:22,890
problems it's a large set and we know

995
00:46:20,309 --> 00:46:25,669
some<font color="#E5E5E5"> small subset</font><font color="#CCCCCC"> of the of the problems</font>

996
00:46:22,890 --> 00:46:28,489
<font color="#CCCCCC">that are relevant</font><font color="#E5E5E5"> to us do we know</font><font color="#CCCCCC"> that</font>

997
00:46:25,669 --> 00:46:30,919
<font color="#E5E5E5">do we at least</font><font color="#CCCCCC"> know the</font><font color="#E5E5E5"> most important</font>

998
00:46:28,489 --> 00:46:34,259
problems the<font color="#E5E5E5"> most important subset or</font>

999
00:46:30,919 --> 00:46:37,529
are we<font color="#CCCCCC"> maybe hammering on a small</font><font color="#E5E5E5"> subset</font>

1000
00:46:34,259 --> 00:46:39,419
of problems<font color="#E5E5E5"> working on solutions</font><font color="#CCCCCC"> small</font>

1001
00:46:37,529 --> 00:46:43,589
<font color="#E5E5E5">defenses against these problems and</font>

1002
00:46:39,419 --> 00:46:45,538
forget<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the bigger</font><font color="#CCCCCC"> picture</font><font color="#E5E5E5"> so the</font>

1003
00:46:43,589 --> 00:46:48,119
question is what we what<font color="#CCCCCC"> we</font><font color="#E5E5E5"> learn</font><font color="#CCCCCC"> from</font>

1004
00:46:45,539 --> 00:46:50,400
it<font color="#CCCCCC"> and maybe this is a unique chance</font><font color="#E5E5E5"> to</font>

1005
00:46:48,119 --> 00:46:52,259
<font color="#E5E5E5">rethink process or design grow up like</font>

1006
00:46:50,400 --> 00:46:53,729
like other fields<font color="#E5E5E5"> the kind of tree</font>

1007
00:46:52,259 --> 00:46:56,069
<font color="#CCCCCC">construction industry they have</font>

1008
00:46:53,729 --> 00:46:59,178
standards how to do<font color="#E5E5E5"> something they have</font>

1009
00:46:56,069 --> 00:47:01,079
also independent<font color="#E5E5E5"> independent</font>

1010
00:46:59,179 --> 00:47:03,719
<font color="#E5E5E5">institutions that check whether</font>

1011
00:47:01,079 --> 00:47:06,109
everything<font color="#E5E5E5"> works as expected and has</font>

1012
00:47:03,719 --> 00:47:09,569
been done as<font color="#E5E5E5"> expected maybe we need to</font>

1013
00:47:06,109 --> 00:47:12,449
improve on the communication between<font color="#E5E5E5"> the</font>

1014
00:47:09,569 --> 00:47:14,880
different<font color="#E5E5E5"> actors software developers</font>

1015
00:47:12,449 --> 00:47:17,069
make assumptions about how<font color="#E5E5E5"> the hardware</font>

1016
00:47:14,880 --> 00:47:18,719
works<font color="#E5E5E5"> and hardware vendors make</font>

1017
00:47:17,069 --> 00:47:20,909
assumptions about what<font color="#E5E5E5"> software</font>

1018
00:47:18,719 --> 00:47:22,919
developers will do<font color="#E5E5E5"> and those</font><font color="#CCCCCC"> two don't</font>

1019
00:47:20,909 --> 00:47:25,739
match<font color="#CCCCCC"> maybe we should work on the</font>

1020
00:47:22,919 --> 00:47:27,658
<font color="#CCCCCC">communication there maybe we should find</font>

1021
00:47:25,739 --> 00:47:31,709
good<font color="#CCCCCC"> trade-offs between</font><font color="#E5E5E5"> security</font><font color="#CCCCCC"> and</font>

1022
00:47:27,659 --> 00:47:33,659
performance<font color="#CCCCCC"> and</font><font color="#E5E5E5"> also that's something I</font>

1023
00:47:31,709 --> 00:47:35,129
personally<font color="#E5E5E5"> wanted to put here maybe we</font>

1024
00:47:33,659 --> 00:47:37,529
should dedicate more<font color="#CCCCCC"> time</font><font color="#E5E5E5"> into</font>

1025
00:47:35,130 --> 00:47:40,709
identifying problems and not solely in

1026
00:47:37,529 --> 00:47:42,809
mitigating known problems<font color="#E5E5E5"> and with that</font>

1027
00:47:40,709 --> 00:47:44,519
I'd like<font color="#E5E5E5"> to close my talk and if you</font>

1028
00:47:42,809 --> 00:47:46,789
have any questions<font color="#E5E5E5"> I'm open for</font>

1029
00:47:44,519 --> 00:47:46,788
<font color="#CCCCCC">discussion</font>

1030
00:47:54,180 --> 00:47:58,660
thanks it<font color="#E5E5E5"> was a great talk</font>

1031
00:47:55,990 --> 00:48:00,790
you mentioned the<font color="#E5E5E5"> key PTI and</font><font color="#CCCCCC"> Kaiser</font>

1032
00:47:58,660 --> 00:48:03,160
mitigations<font color="#E5E5E5"> broke</font><font color="#CCCCCC"> two page tables</font>

1033
00:48:00,790 --> 00:48:04,660
between<font color="#E5E5E5"> user land to</font><font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> but the</font>

1034
00:48:03,160 --> 00:48:06,310
<font color="#CCCCCC">demonstration you</font><font color="#E5E5E5"> showed was usually</font><font color="#CCCCCC"> in</font>

1035
00:48:04,660 --> 00:48:08,379
<font color="#CCCCCC">two user land right with the geodyssey</font>

1036
00:48:06,310 --> 00:48:10,509
shared library does does<font color="#CCCCCC"> that also that</font>

1037
00:48:08,380 --> 00:48:12,400
was not that<font color="#CCCCCC"> was not maritime</font><font color="#E5E5E5"> that was</font>

1038
00:48:10,510 --> 00:48:14,230
<font color="#E5E5E5">just</font><font color="#CCCCCC"> the regular heart attack okay</font>

1039
00:48:12,400 --> 00:48:16,300
and Joe still work out of the books<font color="#E5E5E5"> you</font>

1040
00:48:14,230 --> 00:48:18,040
<font color="#CCCCCC">know there's nothing</font><font color="#E5E5E5"> to say I think</font>

1041
00:48:16,300 --> 00:48:19,840
<font color="#E5E5E5">there are no plans to mitigate those</font>

1042
00:48:18,040 --> 00:48:22,180
<font color="#E5E5E5">okay so we still have an entirely open</font>

1043
00:48:19,840 --> 00:48:26,680
<font color="#E5E5E5">kind of class I'm sure that's all right</font>

1044
00:48:22,180 --> 00:48:31,089
<font color="#CCCCCC">no if you have any idea I</font><font color="#E5E5E5"> I think the</font>

1045
00:48:26,680 --> 00:48:33,879
<font color="#CCCCCC">the important thing here is it's good to</font>

1046
00:48:31,090 --> 00:48:35,260
be<font color="#E5E5E5"> aware</font><font color="#CCCCCC"> of the problem and maybe have</font>

1047
00:48:33,880 --> 00:48:37,710
some<font color="#E5E5E5"> brilliant mind come up with a</font>

1048
00:48:35,260 --> 00:48:41,110
clever defense against it rather than

1049
00:48:37,710 --> 00:48:46,330
keeping the problem secret<font color="#E5E5E5"> and no one</font>

1050
00:48:41,110 --> 00:48:48,370
even thinks about<font color="#E5E5E5"> the problem do you</font>

1051
00:48:46,330 --> 00:48:50,319
think that<font color="#E5E5E5"> mouth down inspect have been</font>

1052
00:48:48,370 --> 00:49:05,529
known to<font color="#CCCCCC"> the black hat for</font><font color="#E5E5E5"> the last 15</font>

1053
00:48:50,320 --> 00:49:08,650
years<font color="#E5E5E5"> I don't know if it would</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> I would</font>

1054
00:49:05,530 --> 00:49:10,350
<font color="#E5E5E5">be so of course if something something</font>

1055
00:49:08,650 --> 00:49:13,570
<font color="#E5E5E5">like meltdown could have been exploited</font>

1056
00:49:10,350 --> 00:49:15,580
<font color="#E5E5E5">potentially from JavaScript</font><font color="#CCCCCC"> and it would</font>

1057
00:49:13,570 --> 00:49:17,170
probably<font color="#E5E5E5"> leave no traces because it</font>

1058
00:49:15,580 --> 00:49:19,240
would just be included in some

1059
00:49:17,170 --> 00:49:20,980
JavaScript on some<font color="#CCCCCC"> website and could</font>

1060
00:49:19,240 --> 00:49:23,350
read your<font color="#E5E5E5"> kernel memory or</font><font color="#CCCCCC"> physical</font>

1061
00:49:20,980 --> 00:49:28,930
<font color="#E5E5E5">memory and I think there would be no</font>

1062
00:49:23,350 --> 00:49:31,000
trace so and after<font color="#CCCCCC"> this</font><font color="#E5E5E5"> this surfaced I</font>

1063
00:49:28,930 --> 00:49:34,359
would assume that<font color="#E5E5E5"> anyone who would have</font>

1064
00:49:31,000 --> 00:49:36,730
had any<font color="#E5E5E5"> anything any evidence of their</font>

1065
00:49:34,360 --> 00:49:42,310
existence would have tried<font color="#E5E5E5"> to get rid</font><font color="#CCCCCC"> of</font>

1066
00:49:36,730 --> 00:49:46,300
the<font color="#CCCCCC"> evidence but I don't know I think</font><font color="#E5E5E5"> it</font>

1067
00:49:42,310 --> 00:49:48,460
would<font color="#E5E5E5"> have surfaced earlier if if it</font>

1068
00:49:46,300 --> 00:49:50,770
would have been<font color="#E5E5E5"> known earlier because</font>

1069
00:49:48,460 --> 00:49:55,620
it's<font color="#CCCCCC"> difficult to keep</font><font color="#E5E5E5"> something some</font>

1070
00:49:50,770 --> 00:49:55,620
some secret like that<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that impact</font><font color="#CCCCCC"> I</font>

1071
00:49:56,340 --> 00:49:59,850
have a question

1072
00:50:05,049 --> 00:50:12,669
and how they detected yeah so I've seen

1073
00:50:09,299 --> 00:50:16,929
<font color="#E5E5E5">proposals that focus on the cash attack</font>

1074
00:50:12,669 --> 00:50:21,479
part so detecting the<font color="#E5E5E5"> flush and reload</font>

1075
00:50:16,929 --> 00:50:26,109
part<font color="#CCCCCC"> I have seen some</font><font color="#E5E5E5"> proposals that</font>

1076
00:50:21,479 --> 00:50:28,509
<font color="#E5E5E5">look at the number</font><font color="#CCCCCC"> of accesses to</font><font color="#E5E5E5"> kernel</font>

1077
00:50:26,109 --> 00:50:31,209
memory that you perform

1078
00:50:28,509 --> 00:50:32,739
if you run meltdown with<font color="#CCCCCC"> tsx you won't</font>

1079
00:50:31,209 --> 00:50:36,339
<font color="#E5E5E5">have any kernel exceptions</font>

1080
00:50:32,739 --> 00:50:38,949
so not any segmentation faults that<font color="#E5E5E5"> you</font>

1081
00:50:36,339 --> 00:50:40,929
need to catch in user<font color="#CCCCCC"> space</font><font color="#E5E5E5"> so probably</font>

1082
00:50:38,949 --> 00:50:42,729
<font color="#CCCCCC">that part wouldn't</font><font color="#E5E5E5"> work and for the</font>

1083
00:50:40,929 --> 00:50:44,890
<font color="#CCCCCC">cache attacks</font><font color="#E5E5E5"> we have shown in the past</font>

1084
00:50:42,729 --> 00:50:47,140
<font color="#E5E5E5">that you can also do stealthy variants</font>

1085
00:50:44,890 --> 00:50:48,729
of cache attacks like instead of<font color="#E5E5E5"> flush</font>

1086
00:50:47,140 --> 00:50:51,129
<font color="#E5E5E5">and reload you would just measure the</font>

1087
00:50:48,729 --> 00:50:53,468
latency not of the reload operation but

1088
00:50:51,130 --> 00:50:55,029
of the flush operation<font color="#E5E5E5"> itself and this</font>

1089
00:50:53,469 --> 00:50:56,439
already<font color="#E5E5E5"> leaks whether it's in the cache</font>

1090
00:50:55,029 --> 00:51:03,539
or<font color="#E5E5E5"> not so</font><font color="#CCCCCC"> you would do flush</font><font color="#E5E5E5"> and flush</font>

1091
00:50:56,439 --> 00:51:03,538
instant yeah whether<font color="#E5E5E5"> they work or</font><font color="#CCCCCC"> not I</font>

1092
00:51:03,959 --> 00:51:09,249
didn't look at<font color="#E5E5E5"> them in detail but many</font>

1093
00:51:07,359 --> 00:51:20,558
of the proposals<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> skeptical at</font>

1094
00:51:09,249 --> 00:51:23,078
<font color="#E5E5E5">towards those remote execution of</font>

1095
00:51:20,559 --> 00:51:25,599
<font color="#CCCCCC">meltdown</font><font color="#E5E5E5"> if you think about it you've</font>

1096
00:51:23,079 --> 00:51:28,599
got this<font color="#CCCCCC"> high end high performance</font>

1097
00:51:25,599 --> 00:51:31,209
extension from Intel<font color="#E5E5E5"> which allows you</font><font color="#CCCCCC"> to</font>

1098
00:51:28,599 --> 00:51:33,130
<font color="#E5E5E5">have direct</font><font color="#CCCCCC"> IO from the network card</font>

1099
00:51:31,209 --> 00:51:40,259
<font color="#E5E5E5">into the level</font><font color="#CCCCCC"> 2 cache of the processor</font>

1100
00:51:33,130 --> 00:51:40,259
direct<font color="#E5E5E5"> so you know yeah that's</font><font color="#CCCCCC"> i'm</font>

1101
00:51:44,729 --> 00:51:49,058
prediction you should also think<font color="#E5E5E5"> about</font>

1102
00:51:47,469 --> 00:51:52,209
virtual machines with just-in-time

1103
00:51:49,059 --> 00:51:57,089
compilers yeah and binary translators

1104
00:51:52,209 --> 00:51:57,089
yeah because those generate the branches

1105
00:51:57,329 --> 00:52:06,039
but<font color="#CCCCCC"> they're it's so they're they</font><font color="#E5E5E5"> are</font>

1106
00:52:01,869 --> 00:52:10,029
trying to automate<font color="#E5E5E5"> this process into</font><font color="#CCCCCC"> the</font>

1107
00:52:06,039 --> 00:52:13,809
into the code generation<font color="#E5E5E5"> and I'm not</font>

1108
00:52:10,029 --> 00:52:16,719
sure how well that works but I think

1109
00:52:13,809 --> 00:52:18,789
it's at least better<font color="#E5E5E5"> than letting so I</font>

1110
00:52:16,719 --> 00:52:21,039
think<font color="#E5E5E5"> the worst</font><font color="#CCCCCC"> thing is if the develop</font>

1111
00:52:18,789 --> 00:52:22,479
has to care about<font color="#CCCCCC"> it because every time</font>

1112
00:52:21,039 --> 00:52:25,329
the developer has<font color="#CCCCCC"> to care about</font><font color="#E5E5E5"> one</font>

1113
00:52:22,479 --> 00:52:33,399
thing<font color="#CCCCCC"> more if we go</font><font color="#E5E5E5"> wrong in one or two</font>

1114
00:52:25,329 --> 00:52:36,910
places<font color="#E5E5E5"> right yeah hi</font>

1115
00:52:33,400 --> 00:52:42,789
<font color="#E5E5E5">I tried actually to</font><font color="#CCCCCC"> implement what part</font>

1116
00:52:36,910 --> 00:52:46,538
<font color="#E5E5E5">of your work on arm v7 and for the</font>

1117
00:52:42,789 --> 00:52:49,839
timings<font color="#CCCCCC"> I well our DTSC doesn't exist on</font>

1118
00:52:46,539 --> 00:52:53,559
our<font color="#CCCCCC"> MV seven so I used the the threads</font>

1119
00:52:49,839 --> 00:52:58,689
<font color="#E5E5E5">right build my own timer thread</font><font color="#CCCCCC"> and I</font>

1120
00:52:53,559 --> 00:53:01,509
ran into problems<font color="#E5E5E5"> where</font><font color="#CCCCCC"> um</font><font color="#E5E5E5"> when it run</font><font color="#CCCCCC"> I</font>

1121
00:52:58,689 --> 00:53:04,058
didn't ever find the right<font color="#CCCCCC"> threshold for</font>

1122
00:53:01,509 --> 00:53:07,140
<font color="#CCCCCC">Spectre</font><font color="#E5E5E5"> where I would see the difference</font>

1123
00:53:04,059 --> 00:53:10,499
between<font color="#E5E5E5"> the cash myths and the cache hit</font>

1124
00:53:07,140 --> 00:53:14,400
<font color="#CCCCCC">so I was wondering</font><font color="#E5E5E5"> if you had an idea</font>

1125
00:53:10,499 --> 00:53:16,868
<font color="#CCCCCC">how</font><font color="#E5E5E5"> to do this</font><font color="#CCCCCC"> so what I did</font><font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> yeah</font>

1126
00:53:14,400 --> 00:53:18,489
<font color="#CCCCCC">v7 you don't have any flush instruction</font>

1127
00:53:16,869 --> 00:53:19,929
so how do you<font color="#E5E5E5"> throw things out of the</font>

1128
00:53:18,489 --> 00:53:30,369
cache that<font color="#CCCCCC"> you do that with cash</font>

1129
00:53:19,929 --> 00:53:32,469
eviction them no<font color="#CCCCCC"> why do</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> do it</font><font color="#E5E5E5"> with</font>

1130
00:53:30,369 --> 00:53:36,429
some codes of assembly it's also some

1131
00:53:32,469 --> 00:53:39,189
prior research work<font color="#E5E5E5"> maybe not you but</font>

1132
00:53:36,429 --> 00:53:41,469
other researchers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> there's a way to</font>

1133
00:53:39,189 --> 00:53:43,899
do to do<font color="#CCCCCC"> that as well I think we have on</font>

1134
00:53:41,469 --> 00:53:47,859
github<font color="#CCCCCC"> a library that's called lip</font><font color="#E5E5E5"> flush</font>

1135
00:53:43,900 --> 00:53:49,929
<font color="#E5E5E5">yeah that's what I use and but I change</font>

1136
00:53:47,859 --> 00:53:54,249
a little bit the the<font color="#CCCCCC"> arm assembly</font><font color="#E5E5E5"> which</font>

1137
00:53:49,929 --> 00:53:57,039
is<font color="#E5E5E5"> not working</font><font color="#CCCCCC"> for arm v7</font><font color="#E5E5E5"> so it seems to</font>

1138
00:53:54,249 --> 00:53:59,288
<font color="#E5E5E5">be my code seems to be working but I</font>

1139
00:53:57,039 --> 00:54:01,659
don't get the<font color="#CCCCCC"> the difference between</font><font color="#E5E5E5"> the</font>

1140
00:53:59,289 --> 00:54:04,289
threshold yeah yeah so that's the that's

1141
00:54:01,659 --> 00:54:07,809
<font color="#E5E5E5">the basic step for the</font><font color="#CCCCCC"> cache attack and</font>

1142
00:54:04,289 --> 00:54:10,569
they are it requires a lot<font color="#CCCCCC"> of playing</font>

1143
00:54:07,809 --> 00:54:12,429
<font color="#CCCCCC">around with with the eviction strategies</font>

1144
00:54:10,569 --> 00:54:15,249
that I would use<font color="#CCCCCC"> they're holding I</font>

1145
00:54:12,429 --> 00:54:17,589
wouldn't use the<font color="#E5E5E5"> flash instruction</font><font color="#CCCCCC"> it</font>

1146
00:54:15,249 --> 00:54:19,390
might not even so I'm not<font color="#E5E5E5"> sure what it</font>

1147
00:54:17,589 --> 00:54:21,339
<font color="#CCCCCC">does if the flash instruction is not</font>

1148
00:54:19,390 --> 00:54:23,408
<font color="#E5E5E5">unlocked you would have to run</font><font color="#CCCCCC"> you can't</font>

1149
00:54:21,339 --> 00:54:24,849
<font color="#CCCCCC">and even unlock it in I'm v7 so you</font>

1150
00:54:23,409 --> 00:54:29,559
would have<font color="#E5E5E5"> to run the flash instruction</font>

1151
00:54:24,849 --> 00:54:31,419
in the kernel<font color="#E5E5E5"> and I'm also not</font><font color="#CCCCCC"> sure</font>

1152
00:54:29,559 --> 00:54:32,440
whether<font color="#CCCCCC"> that code is really</font><font color="#E5E5E5"> working on</font>

1153
00:54:31,419 --> 00:54:34,779
all architecture

1154
00:54:32,440 --> 00:54:36,730
so probably<font color="#E5E5E5"> so I would go for eviction</font>

1155
00:54:34,780 --> 00:54:38,530
<font color="#CCCCCC">and they are try different eviction</font>

1156
00:54:36,730 --> 00:54:40,800
strategies until<font color="#CCCCCC"> you see some timing</font>

1157
00:54:38,530 --> 00:54:43,860
<font color="#E5E5E5">difference between the different cases</font>

1158
00:54:40,800 --> 00:54:43,860
you know

1159
00:55:05,050 --> 00:55:12,880
so those mitigations that<font color="#E5E5E5"> are like on</font>

1160
00:55:08,650 --> 00:55:15,010
the microcode level do they<font color="#E5E5E5"> mitigate all</font>

1161
00:55:12,880 --> 00:55:17,110
<font color="#CCCCCC">of the overflows that you can have in</font>

1162
00:55:15,010 --> 00:55:18,810
like branch<font color="#CCCCCC"> I'm not sure if the branch</font>

1163
00:55:17,110 --> 00:55:20,980
target buffer can overflow<font color="#E5E5E5"> but there are</font>

1164
00:55:18,810 --> 00:55:24,190
apparently some overflows you can have

1165
00:55:20,980 --> 00:55:26,440
in<font color="#E5E5E5"> the return stack that the</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> keeps</font>

1166
00:55:24,190 --> 00:55:31,750
do you know if those<font color="#CCCCCC"> are mitigated with</font>

1167
00:55:26,440 --> 00:55:34,570
<font color="#CCCCCC">that as well or not yes there is some</font>

1168
00:55:31,750 --> 00:55:38,710
buffer for a return address prediction

1169
00:55:34,570 --> 00:55:40,780
on some processors<font color="#E5E5E5"> I'm not sure which</font>

1170
00:55:38,710 --> 00:55:43,420
models have that but I would assume<font color="#E5E5E5"> that</font>

1171
00:55:40,780 --> 00:55:45,970
<font color="#CCCCCC">most of the of the recent processors</font>

1172
00:55:43,420 --> 00:55:49,510
have that I would have to look it up<font color="#CCCCCC"> but</font>

1173
00:55:45,970 --> 00:55:51,009
<font color="#CCCCCC">for some of them yes if the return if</font>

1174
00:55:49,510 --> 00:55:53,680
<font color="#E5E5E5">the buffer</font><font color="#CCCCCC"> for the return address</font>

1175
00:55:51,010 --> 00:55:58,410
<font color="#CCCCCC">prediction</font><font color="#E5E5E5"> does not have any result it</font>

1176
00:55:53,680 --> 00:56:01,120
would go to the<font color="#E5E5E5"> branch target buffer and</font>

1177
00:55:58,410 --> 00:56:04,299
yes there's also some<font color="#E5E5E5"> I didn't look into</font>

1178
00:56:01,120 --> 00:56:06,730
<font color="#E5E5E5">at the at the at all the branch target</font>

1179
00:56:04,300 --> 00:56:10,660
buffer parts<font color="#E5E5E5"> I'm mostly</font><font color="#CCCCCC"> focused on</font>

1180
00:56:06,730 --> 00:56:12,430
meltdown but there was some overflowing

1181
00:56:10,660 --> 00:56:14,319
involved there that<font color="#CCCCCC"> you need to do so</font>

1182
00:56:12,430 --> 00:56:19,899
<font color="#E5E5E5">that the</font><font color="#CCCCCC"> miss prediction works</font>

1183
00:56:14,320 --> 00:56:23,410
yeah I'm not<font color="#CCCCCC"> sure whether the</font><font color="#E5E5E5"> so that's</font>

1184
00:56:19,900 --> 00:56:25,810
<font color="#E5E5E5">nothing I would say you could get done</font>

1185
00:56:23,410 --> 00:56:29,049
with microcode patches<font color="#CCCCCC"> I think the</font><font color="#E5E5E5"> focus</font>

1186
00:56:25,810 --> 00:56:33,160
there is<font color="#E5E5E5"> rather that you don't predict</font>

1187
00:56:29,050 --> 00:56:34,960
in that case<font color="#CCCCCC"> or don't</font><font color="#E5E5E5"> even have a value</font>

1188
00:56:33,160 --> 00:56:38,520
that<font color="#CCCCCC"> you could predict in that case</font>

1189
00:56:34,960 --> 00:56:38,520
<font color="#E5E5E5">because it's tagged in a different way</font>

1190
00:56:38,880 --> 00:56:45,300
hi do you<font color="#E5E5E5"> know if anything affects GPUs</font>

1191
00:56:46,020 --> 00:56:49,980
<font color="#CCCCCC">as far as I know</font>

1192
00:56:51,030 --> 00:56:57,420
so of<font color="#E5E5E5"> course something like something</font>

1193
00:56:53,950 --> 00:57:00,220
like<font color="#CCCCCC"> Melton might not be</font><font color="#E5E5E5"> relevant for</font>

1194
00:56:57,420 --> 00:57:05,220
GPUs at all because<font color="#E5E5E5"> they don't</font><font color="#CCCCCC"> have any</font>

1195
00:57:00,220 --> 00:57:09,549
any<font color="#E5E5E5"> isolation on that level if you have</font>

1196
00:57:05,220 --> 00:57:11,910
<font color="#E5E5E5">X if you can do operations on the GPU I</font>

1197
00:57:09,550 --> 00:57:13,870
would be surprised if<font color="#E5E5E5"> there's not I</font>

1198
00:57:11,910 --> 00:57:16,089
think there<font color="#CCCCCC"> are multiple works that show</font>

1199
00:57:13,870 --> 00:57:16,549
<font color="#CCCCCC">that you can read</font><font color="#E5E5E5"> any memory</font><font color="#CCCCCC"> anyway</font><font color="#E5E5E5"> then</font>

1200
00:57:16,090 --> 00:57:19,039
if you

1201
00:57:16,549 --> 00:57:20,239
as soon as<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> access to the GPU</font>

1202
00:57:19,039 --> 00:57:23,029
something like that

1203
00:57:20,239 --> 00:57:25,670
there was a reason<font color="#CCCCCC"> there is a I think</font>

1204
00:57:23,029 --> 00:57:29,959
there<font color="#E5E5E5"> is a work that will appear at I</font>

1205
00:57:25,670 --> 00:57:35,119
<font color="#E5E5E5">Triple E SNP a security and privacy this</font>

1206
00:57:29,959 --> 00:57:37,279
year but it's<font color="#E5E5E5"> not public yet and I think</font>

1207
00:57:35,119 --> 00:57:42,349
there were interesting<font color="#E5E5E5"> attacks in that</font>

1208
00:57:37,279 --> 00:57:46,130
direction<font color="#CCCCCC"> but</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> related to Spectre</font><font color="#E5E5E5"> or</font>

1209
00:57:42,349 --> 00:57:51,890
or<font color="#E5E5E5"> madam I'm not sure whether the GPU</font>

1210
00:57:46,130 --> 00:58:02,779
actually does speculate I haven't looked

1211
00:57:51,890 --> 00:58:04,960
into<font color="#CCCCCC"> that no more questions okay thank</font>

1212
00:58:02,779 --> 00:58:09,360
<font color="#CCCCCC">you thank you Chris for a great talk</font>

1213
00:58:04,960 --> 00:58:09,360
[Applause]

