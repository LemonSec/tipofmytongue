1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:12,620 --> 00:00:20,189
I'm Nikita stupid I have a Russian name

3
00:00:16,890 --> 00:00:23,099
I have Russian accent I work for big

4
00:00:20,189 --> 00:00:25,890
Russian company but I do bug bounties

5
00:00:23,099 --> 00:00:29,100
internationally and today we are going

6
00:00:25,890 --> 00:00:35,280
to talk about vulnerabilities of mobile

7
00:00:29,100 --> 00:00:39,620
odd I'm working as information security

8
00:00:35,280 --> 00:00:43,829
analyst at Malibu and we're top 5 world

9
00:00:39,620 --> 00:00:47,218
mail service by daily audience also I'm

10
00:00:43,829 --> 00:00:48,870
doing background to do part-time and I'm

11
00:00:47,219 --> 00:00:52,860
teaching application security to

12
00:00:48,870 --> 00:00:55,919
students and this research started when

13
00:00:52,860 --> 00:01:00,539
we wanted to implement secure mobile

14
00:00:55,920 --> 00:01:03,780
earth in our mobile apps and as a first

15
00:01:00,539 --> 00:01:06,979
stage I've just rather please read all

16
00:01:03,780 --> 00:01:11,580
articles that were accessible for me and

17
00:01:06,979 --> 00:01:14,400
then I like watched how companies like

18
00:01:11,580 --> 00:01:19,170
Google and Facebook implemented their

19
00:01:14,400 --> 00:01:23,100
mobile ah and as a stage 2 I've got all

20
00:01:19,170 --> 00:01:26,840
paid programs from aku 1 and checked

21
00:01:23,100 --> 00:01:30,240
each program and so whether it was

22
00:01:26,840 --> 00:01:31,890
vulnerable to whether there was will

23
00:01:30,240 --> 00:01:34,589
receive their mobile wealth

24
00:01:31,890 --> 00:01:38,640
implementations so this research is

25
00:01:34,590 --> 00:01:43,590
based on real-world examples as well as

26
00:01:38,640 --> 00:01:46,770
a set of standards here's the plan

27
00:01:43,590 --> 00:01:49,229
first we are going to talk about passive

28
00:01:46,770 --> 00:01:51,570
large and how it works

29
00:01:49,229 --> 00:01:54,320
what's its purpose then we're going to

30
00:01:51,570 --> 00:01:57,210
jump right into the core of the talk and

31
00:01:54,320 --> 00:02:01,460
we will discuss our abilities of mobile

32
00:01:57,210 --> 00:02:04,229
on then we're going to talk about

33
00:02:01,460 --> 00:02:06,419
vulnerabilities of classic ones because

34
00:02:04,229 --> 00:02:13,290
they still appear in the wild on time to

35
00:02:06,420 --> 00:02:16,830
time so all protocol is a protocol by

36
00:02:13,290 --> 00:02:20,340
which third party can obtain access

37
00:02:16,830 --> 00:02:21,480
access to user data and usually it's

38
00:02:20,340 --> 00:02:24,209
done without as

39
00:02:21,480 --> 00:02:29,959
user to enter their password and

40
00:02:24,209 --> 00:02:33,150
credentials but later it was adapted for

41
00:02:29,959 --> 00:02:36,260
authentication and mobile platforms and

42
00:02:33,150 --> 00:02:39,470
since authentication is kind of more

43
00:02:36,260 --> 00:02:46,319
complex processes and authorization and

44
00:02:39,470 --> 00:02:53,849
mobile is different from browsers older

45
00:02:46,319 --> 00:02:59,149
beautiful rose so basically there are

46
00:02:53,849 --> 00:03:03,569
three steps a mobile odd step one

47
00:02:59,150 --> 00:03:06,989
obtain a permission to access user data

48
00:03:03,569 --> 00:03:10,319
and usually it's done by constants

49
00:03:06,989 --> 00:03:14,310
consent screen and where user process

50
00:03:10,319 --> 00:03:18,358
like approve or he presses like chooser

51
00:03:14,310 --> 00:03:22,440
chooses an account and if if it if you

52
00:03:18,359 --> 00:03:24,629
don't so now we have step two at an

53
00:03:22,440 --> 00:03:27,840
authorization code and usually it's done

54
00:03:24,629 --> 00:03:30,780
by two directions first third Direction

55
00:03:27,840 --> 00:03:34,319
is from server to browser ordinary HTTP

56
00:03:30,780 --> 00:03:36,690
redirection and second one is magic or a

57
00:03:34,319 --> 00:03:40,768
directional throughout the browser to

58
00:03:36,690 --> 00:03:43,639
the client app and the free exchange of

59
00:03:40,769 --> 00:03:47,579
physician code for access token and

60
00:03:43,639 --> 00:03:50,489
let's see now using access token mobile

61
00:03:47,579 --> 00:03:55,950
app can just go to the server and access

62
00:03:50,489 --> 00:03:58,530
user data when we talk about other

63
00:03:55,950 --> 00:04:00,599
abilities of mobile auth we expect

64
00:03:58,530 --> 00:04:06,419
something really complicated like this

65
00:04:00,599 --> 00:04:09,268
for example it's a shame but 2090 would

66
00:04:06,419 --> 00:04:14,430
have to take a step back and talk about

67
00:04:09,269 --> 00:04:17,298
using HTTP last year I found Wilner

68
00:04:14,430 --> 00:04:22,500
ability in a really popular service

69
00:04:17,298 --> 00:04:27,870
should I tell you about it are you with

70
00:04:22,500 --> 00:04:34,260
me who here loves to travel raise a hand

71
00:04:27,870 --> 00:04:35,439
please oh not so much travelers but you

72
00:04:34,260 --> 00:04:38,349
all probably

73
00:04:35,439 --> 00:04:41,830
this company and to demonstrate mobility

74
00:04:38,349 --> 00:04:44,378
I'll show a screencast and I've got at

75
00:04:41,830 --> 00:04:47,289
me that the screencast was made for

76
00:04:44,379 --> 00:04:49,809
Airbnb and not for public showing and

77
00:04:47,289 --> 00:04:53,318
I'm not sure that you will be able to

78
00:04:49,809 --> 00:04:56,499
see this in detail but let's try anyway

79
00:04:53,319 --> 00:04:59,259
I will come and see it alongside and you

80
00:04:56,499 --> 00:05:02,619
will slipper and me operating with two

81
00:04:59,259 --> 00:05:06,069
iPhones in the background first iPhone

82
00:05:02,619 --> 00:05:12,159
in the victim second iPhone is a bad guy

83
00:05:06,069 --> 00:05:16,529
so let's start now I am just logging it

84
00:05:12,159 --> 00:05:19,119
into Aaron V app using of

85
00:05:16,529 --> 00:05:22,469
authentications who asked with Google

86
00:05:19,119 --> 00:05:26,589
and we don't see much request because

87
00:05:22,469 --> 00:05:28,779
victims victims phone don't have birth

88
00:05:26,589 --> 00:05:31,809
certificate installed we see only HTTP

89
00:05:28,779 --> 00:05:32,889
request and this is the exact request we

90
00:05:31,809 --> 00:05:35,529
need it's a request with the

91
00:05:32,889 --> 00:05:41,829
authorization code and we just copy that

92
00:05:35,529 --> 00:05:42,610
code and now as an attacker I'm just

93
00:05:41,829 --> 00:05:45,129
cleaning up

94
00:05:42,610 --> 00:05:46,589
SSL pass through so we can see HTTP

95
00:05:45,129 --> 00:05:50,229
requests from attacker

96
00:05:46,589 --> 00:05:55,829
so as an attacker I will start our

97
00:05:50,229 --> 00:05:59,019
process but I will intercept request

98
00:05:55,829 --> 00:06:03,119
when authorization code is exchanged to

99
00:05:59,019 --> 00:06:06,729
access token we're intercepting it and

100
00:06:03,119 --> 00:06:10,119
replace him attackers code to the

101
00:06:06,729 --> 00:06:16,329
victims code and just forward and

102
00:06:10,119 --> 00:06:18,429
request and we see that there's 202 okay

103
00:06:16,329 --> 00:06:21,929
and in this contact means who

104
00:06:18,429 --> 00:06:25,029
successfully logged in as a victim and

105
00:06:21,929 --> 00:06:29,378
as a little bit of extra credit let's

106
00:06:25,029 --> 00:06:33,159
try to use this code one more time so

107
00:06:29,379 --> 00:06:35,139
just to make sure that maybe it's not

108
00:06:33,159 --> 00:06:37,329
can be used several times we see that

109
00:06:35,139 --> 00:06:40,989
with invalid code is returns internal

110
00:06:37,329 --> 00:06:46,419
server error and now with valid victims

111
00:06:40,989 --> 00:06:47,620
code it again returns 200 ok so it means

112
00:06:46,419 --> 00:06:50,650
we can at

113
00:06:47,620 --> 00:06:53,970
he asked and captured the code and login

114
00:06:50,650 --> 00:06:58,030
as many times as it can if you want

115
00:06:53,970 --> 00:07:02,470
so Airbnb address this vulnerability

116
00:06:58,030 --> 00:07:05,979
really quickly so this report didn't go

117
00:07:02,470 --> 00:07:09,729
public I've asked a permission to show

118
00:07:05,979 --> 00:07:12,070
it to you today and there will be asked

119
00:07:09,729 --> 00:07:19,120
to mention their background to program a

120
00:07:12,070 --> 00:07:21,659
couple of times so air B&B backbones air

121
00:07:19,120 --> 00:07:29,050
B&B backbones

122
00:07:21,660 --> 00:07:32,139
thank you guys now let's move on to the

123
00:07:29,050 --> 00:07:35,650
consent screens and there are good ones

124
00:07:32,139 --> 00:07:38,169
and the bad ones and the good ones are

125
00:07:35,650 --> 00:07:40,359
those who asking the user to just choose

126
00:07:38,169 --> 00:07:43,690
an account or click on a blue and the

127
00:07:40,360 --> 00:07:46,060
red ones are those who are asking user

128
00:07:43,690 --> 00:07:50,199
to enter their login password and second

129
00:07:46,060 --> 00:07:52,539
factor if they have soul and why they're

130
00:07:50,199 --> 00:07:57,760
different and the different slicing how

131
00:07:52,539 --> 00:08:00,430
mobile app opens consent screen in the

132
00:07:57,760 --> 00:08:03,760
good ones opens it using browser custom

133
00:08:00,430 --> 00:08:07,300
tab on Android it's called chrome custom

134
00:08:03,760 --> 00:08:09,340
tab and on iOS it's called SF view

135
00:08:07,300 --> 00:08:12,070
control of Safari view control and

136
00:08:09,340 --> 00:08:14,679
basically it's just like your ordinary

137
00:08:12,070 --> 00:08:16,510
mobile browser it's just opens faster

138
00:08:14,680 --> 00:08:19,599
because there is no application switch

139
00:08:16,510 --> 00:08:22,960
it's just opens browser tab in context

140
00:08:19,599 --> 00:08:25,949
in context of your path and the bad ones

141
00:08:22,960 --> 00:08:29,948
using web views and the views are

142
00:08:25,949 --> 00:08:33,909
basically like embedded browsers into

143
00:08:29,949 --> 00:08:37,060
native app and this means that any data

144
00:08:33,909 --> 00:08:40,569
that web you have can be read and write

145
00:08:37,059 --> 00:08:43,718
by native app which open tea so like any

146
00:08:40,570 --> 00:08:45,970
cookies cache history and executing

147
00:08:43,719 --> 00:08:49,240
JavaScript can be done by a native app

148
00:08:45,970 --> 00:08:52,690
which open webview and there are two

149
00:08:49,240 --> 00:09:00,160
benefits from using by browser custom

150
00:08:52,690 --> 00:09:01,410
tab and first one is that whenever user

151
00:09:00,160 --> 00:09:03,179
is like

152
00:09:01,410 --> 00:09:05,519
not entering their passwords anywhere

153
00:09:03,179 --> 00:09:09,269
they are cultivating a good habits and

154
00:09:05,519 --> 00:09:12,720
it's in a long run it will make them

155
00:09:09,269 --> 00:09:16,439
more less less more resistant to

156
00:09:12,720 --> 00:09:20,599
phishing and the second good point is

157
00:09:16,439 --> 00:09:23,488
that it's much nicer for user just to

158
00:09:20,599 --> 00:09:26,179
have them clicking one button instead of

159
00:09:23,489 --> 00:09:28,739
remembering password remember login and

160
00:09:26,179 --> 00:09:32,039
enter the second factor than half so

161
00:09:28,739 --> 00:09:34,199
it's really painful to them and not for

162
00:09:32,039 --> 00:09:36,359
those who do it back bounties if you

163
00:09:34,199 --> 00:09:39,238
will report it to the company most

164
00:09:36,359 --> 00:09:42,449
likely you will get n/a because really

165
00:09:39,239 --> 00:09:46,939
there is no direct pact or when you're

166
00:09:42,449 --> 00:09:51,149
using webview but the long run is as

167
00:09:46,939 --> 00:09:53,519
builders as pen testers we surely have

168
00:09:51,149 --> 00:09:55,649
to mention this in our reports in our

169
00:09:53,519 --> 00:10:01,679
advices to developers just to use

170
00:09:55,649 --> 00:10:04,769
browser custom tabs and now that we want

171
00:10:01,679 --> 00:10:10,529
to one of my favorite and one of most

172
00:10:04,769 --> 00:10:12,869
complex attacks on mobile off and before

173
00:10:10,529 --> 00:10:17,809
that let's have some necessary

174
00:10:12,869 --> 00:10:21,749
background on how to how can we deliver

175
00:10:17,809 --> 00:10:25,679
something from browser to client tab and

176
00:10:21,749 --> 00:10:30,359
there are two ways one way is customary

177
00:10:25,679 --> 00:10:33,329
scheme and the second one is a plea

178
00:10:30,359 --> 00:10:36,839
we're not going to talk about a plea

179
00:10:33,329 --> 00:10:39,868
smash because they're like not commonly

180
00:10:36,839 --> 00:10:42,689
used for this purposes and there are not

181
00:10:39,869 --> 00:10:46,249
supported in some older versions of OSS

182
00:10:42,689 --> 00:10:49,108
so we will focus on most commonly used

183
00:10:46,249 --> 00:10:52,529
way and its customer right scheme and

184
00:10:49,109 --> 00:10:55,319
what is customary scheme and it's like

185
00:10:52,529 --> 00:10:58,319
your or Turner's team like HTTP colon

186
00:10:55,319 --> 00:11:03,329
slash slash or FTP count slash slash but

187
00:10:58,319 --> 00:11:05,128
instead of HTTP or FTP your can write

188
00:11:03,329 --> 00:11:08,238
like anything you want like super

189
00:11:05,129 --> 00:11:13,350
canister slash and so on and anytime

190
00:11:08,239 --> 00:11:15,270
browser or other app sees that link it

191
00:11:13,350 --> 00:11:17,970
will it will open

192
00:11:15,270 --> 00:11:20,699
app which claim this scheme for example

193
00:11:17,970 --> 00:11:23,490
your app like claim the ski football

194
00:11:20,700 --> 00:11:25,520
constellation whenever browser on a

195
00:11:23,490 --> 00:11:29,279
defect sees that scheme it will alter

196
00:11:25,520 --> 00:11:31,640
sounds pretty simple right but what

197
00:11:29,279 --> 00:11:35,790
happens when two different applications

198
00:11:31,640 --> 00:11:38,939
playing the same customer as Kim it

199
00:11:35,790 --> 00:11:41,520
turns out that on Android you'll be

200
00:11:38,940 --> 00:11:43,589
asked for you user will be asked like

201
00:11:41,520 --> 00:11:47,459
for choose an application in which he

202
00:11:43,589 --> 00:11:50,640
wants to open this link and on iOS

203
00:11:47,459 --> 00:11:53,520
behavior is undefined in official Apple

204
00:11:50,640 --> 00:11:56,399
documentation it said undefined so it's

205
00:11:53,520 --> 00:12:01,529
not really so on to file and to show

206
00:11:56,399 --> 00:12:06,149
that let me present to you screencast

207
00:12:01,529 --> 00:12:09,660
and on the screencast you will see like

208
00:12:06,149 --> 00:12:11,459
two applications first one is male

209
00:12:09,660 --> 00:12:16,920
reproduction app and second one is

210
00:12:11,459 --> 00:12:20,300
malroux beta app so they of course have

211
00:12:16,920 --> 00:12:24,240
the same customer a scheme and now let's

212
00:12:20,300 --> 00:12:27,959
see how the selection order will

213
00:12:24,240 --> 00:12:31,320
influence which which perhaps will be

214
00:12:27,959 --> 00:12:36,770
open first I'm installing the beta app

215
00:12:31,320 --> 00:12:36,770
and second I will install protection app

216
00:12:38,810 --> 00:12:47,689
and now we open the link and we see that

217
00:12:44,839 --> 00:12:51,930
beta app is opened you can see it by

218
00:12:47,690 --> 00:12:54,660
little yellow badge on the epic but now

219
00:12:51,930 --> 00:12:57,420
let's try reverse earlier so we remove

220
00:12:54,660 --> 00:13:01,350
both apps and now install like

221
00:12:57,420 --> 00:13:13,829
protection at first and wait a half

222
00:13:01,350 --> 00:13:16,800
second and as you guessed now protection

223
00:13:13,829 --> 00:13:20,849
app installed open open now protection

224
00:13:16,800 --> 00:13:24,089
app opens so whichever app is installed

225
00:13:20,850 --> 00:13:26,990
first will be opened with that in mind

226
00:13:24,089 --> 00:13:28,710
let's move on to the attack itself and

227
00:13:26,990 --> 00:13:32,670
consider the scenario

228
00:13:28,710 --> 00:13:34,710
when on user device there are legitimate

229
00:13:32,670 --> 00:13:37,319
app installed with malicious app

230
00:13:34,710 --> 00:13:41,010
alongside and their force claims is same

231
00:13:37,320 --> 00:13:43,140
customer write scheme and when like

232
00:13:41,010 --> 00:13:46,350
we're turning a physician code from

233
00:13:43,140 --> 00:13:49,410
browser to client app we cannot be hard

234
00:13:46,350 --> 00:13:52,650
% sure in both cases in both iOS and

235
00:13:49,410 --> 00:13:55,500
Android that authorization code will get

236
00:13:52,650 --> 00:13:57,810
to the right at the legitimate app so

237
00:13:55,500 --> 00:14:00,180
basically when malicious app yes

238
00:13:57,810 --> 00:14:03,540
authorization code through inconsistency

239
00:14:00,180 --> 00:14:06,180
in customary scheme it will just

240
00:14:03,540 --> 00:14:11,400
exchanges forces token and get access to

241
00:14:06,180 --> 00:14:15,510
access to user data and how addresses

242
00:14:11,400 --> 00:14:16,770
this vulnerability and it does so by big

243
00:14:15,510 --> 00:14:18,480
dirty hack called

244
00:14:16,770 --> 00:14:22,579
proof key for code exchange and

245
00:14:18,480 --> 00:14:25,800
basically is one more parameter and

246
00:14:22,580 --> 00:14:27,510
client app adds this parameter to the

247
00:14:25,800 --> 00:14:31,620
first request and this parameters code

248
00:14:27,510 --> 00:14:33,689
code through fire and then server yes

249
00:14:31,620 --> 00:14:36,270
this code real fire saves it for later

250
00:14:33,690 --> 00:14:41,100
usage and returns the physician code as

251
00:14:36,270 --> 00:14:43,500
usual later mobile app just again as

252
00:14:41,100 --> 00:14:46,500
code real fire in request to exchange

253
00:14:43,500 --> 00:14:49,230
code parts of token and server on his

254
00:14:46,500 --> 00:14:52,410
side get saved value gets value from

255
00:14:49,230 --> 00:14:55,380
request compares them if they match it

256
00:14:52,410 --> 00:14:59,850
returns access token even do not match

257
00:14:55,380 --> 00:15:02,070
its return 0 and now let's try to

258
00:14:59,850 --> 00:15:06,000
understand why does this prevents an

259
00:15:02,070 --> 00:15:07,440
attack and this is and let's consider

260
00:15:06,000 --> 00:15:09,390
the situation when malicious app

261
00:15:07,440 --> 00:15:11,790
actually captured this authorization

262
00:15:09,390 --> 00:15:16,140
code but now it tries to exchange it

263
00:15:11,790 --> 00:15:21,260
through access token and goes it goes to

264
00:15:16,140 --> 00:15:25,730
the server but one does not simply get

265
00:15:21,260 --> 00:15:32,610
access token without code via fire and

266
00:15:25,730 --> 00:15:37,590
we're safe now yeah not quite yet by

267
00:15:32,610 --> 00:15:40,220
leaking HTTP log information into OS FC

268
00:15:37,590 --> 00:15:44,420
says and actually

269
00:15:40,220 --> 00:15:48,350
didn't met this in a real real war but

270
00:15:44,420 --> 00:15:52,790
if some of developers overseas edited to

271
00:15:48,350 --> 00:15:56,210
see it they have probably managed so how

272
00:15:52,790 --> 00:15:58,280
to address this mobility when malicious

273
00:15:56,210 --> 00:16:01,970
app can just read the first request from

274
00:15:58,280 --> 00:16:03,709
the logs and we do so by not sending the

275
00:16:01,970 --> 00:16:06,080
Quadra file itself in the first request

276
00:16:03,710 --> 00:16:08,480
but wasn't in the hash from code very

277
00:16:06,080 --> 00:16:11,540
far and now server saves the hash

278
00:16:08,480 --> 00:16:14,090
returns an addition code to the client

279
00:16:11,540 --> 00:16:16,400
and client now once we've changed

280
00:16:14,090 --> 00:16:19,460
authorization code for access token he

281
00:16:16,400 --> 00:16:22,040
sends the code via fire itself not the

282
00:16:19,460 --> 00:16:24,710
hash to the server and server crashes

283
00:16:22,040 --> 00:16:28,550
hashes that code refer and now compares

284
00:16:24,710 --> 00:16:33,290
the hashes and of course malicious app

285
00:16:28,550 --> 00:16:36,229
cannot get call true fire from hell

286
00:16:33,290 --> 00:16:41,329
because like we use a secure head is

287
00:16:36,230 --> 00:16:45,830
like sha-256 and that's why it's

288
00:16:41,330 --> 00:16:47,900
prevented and when you're testing for

289
00:16:45,830 --> 00:16:51,290
this kind of vulnerability you should

290
00:16:47,900 --> 00:16:54,860
not be like oh there is called the fire

291
00:16:51,290 --> 00:16:56,449
it's most likely to seeking to be secure

292
00:16:54,860 --> 00:16:58,780
I am just move on and test something

293
00:16:56,450 --> 00:17:01,910
whether it is something anything else

294
00:16:58,780 --> 00:17:05,290
but no know that you definitely should

295
00:17:01,910 --> 00:17:09,020
check how the defense is implemented and

296
00:17:05,290 --> 00:17:11,599
in this case you should check like play

297
00:17:09,020 --> 00:17:13,700
with code for fire and try to remove it

298
00:17:11,599 --> 00:17:16,730
completely try to get codified from

299
00:17:13,700 --> 00:17:19,220
other user and so on and surely check

300
00:17:16,730 --> 00:17:24,680
that code where fire is random longer

301
00:17:19,220 --> 00:17:27,380
nap and used only once and now let's

302
00:17:24,680 --> 00:17:31,340
have some rest and talk about tokens and

303
00:17:27,380 --> 00:17:35,000
token management and where to store our

304
00:17:31,340 --> 00:17:39,379
access tokens and refresh tokens and the

305
00:17:35,000 --> 00:17:42,410
safe place in iOS is keychain in Android

306
00:17:39,380 --> 00:17:45,230
is internal storage or security

307
00:17:42,410 --> 00:17:47,750
configured content provider if it's

308
00:17:45,230 --> 00:17:51,640
stored in any other place they might be

309
00:17:47,750 --> 00:17:53,410
vulnerability there is not necessarily a

310
00:17:51,640 --> 00:17:57,900
because they're a huge array of

311
00:17:53,410 --> 00:18:00,970
possibilities by which developers might

312
00:17:57,900 --> 00:18:03,220
have invented how to store this tokens

313
00:18:00,970 --> 00:18:05,890
not in these places and I cannot cover

314
00:18:03,220 --> 00:18:09,190
all of them but the rule of thumb is if

315
00:18:05,890 --> 00:18:09,700
it's stored keychain or towel storage is

316
00:18:09,190 --> 00:18:11,680
okay

317
00:18:09,700 --> 00:18:16,960
if the store somewhere else is deeper

318
00:18:11,680 --> 00:18:19,570
investigation and other type of tokens

319
00:18:16,960 --> 00:18:22,800
is client secret and as you know from

320
00:18:19,570 --> 00:18:25,720
classic Waze client secret is like

321
00:18:22,800 --> 00:18:28,000
password for a server so whenever it's

322
00:18:25,720 --> 00:18:32,020
exposed some functionality is

323
00:18:28,000 --> 00:18:35,110
compromised and you can check whether

324
00:18:32,020 --> 00:18:39,490
them and for different different reasons

325
00:18:35,110 --> 00:18:42,030
developers hard cause client secret to

326
00:18:39,490 --> 00:18:44,620
their mobile apps and you can check

327
00:18:42,030 --> 00:18:47,260
whether a client secret is hard-coded by

328
00:18:44,620 --> 00:18:49,300
reversing the app but I suggest you a

329
00:18:47,260 --> 00:18:52,030
little bit easier approach just open the

330
00:18:49,300 --> 00:18:53,710
verb city last request when

331
00:18:52,030 --> 00:18:58,810
authorization code is exchanged for

332
00:18:53,710 --> 00:19:02,500
access access token and in 99% of the

333
00:18:58,810 --> 00:19:05,590
time if client secret is hard-coded into

334
00:19:02,500 --> 00:19:07,330
the app it will be in this request so

335
00:19:05,590 --> 00:19:10,659
you can do both ways can reverse

336
00:19:07,330 --> 00:19:13,240
engineer and you can just see the

337
00:19:10,660 --> 00:19:15,370
request and see you the client secure

338
00:19:13,240 --> 00:19:19,150
but again now for those who are doing

339
00:19:15,370 --> 00:19:22,560
bug bounties it's not always big impact

340
00:19:19,150 --> 00:19:25,690
from client secret to Lee because it

341
00:19:22,560 --> 00:19:28,659
entirely depends on how much trust

342
00:19:25,690 --> 00:19:30,670
server puts on client secrets some

343
00:19:28,660 --> 00:19:33,790
servers using client secrets just to

344
00:19:30,670 --> 00:19:38,250
differentiate one app from another while

345
00:19:33,790 --> 00:19:41,620
others can like give one client secrets

346
00:19:38,250 --> 00:19:43,660
like software rate limits or given

347
00:19:41,620 --> 00:19:46,270
access to additional functionality and

348
00:19:43,660 --> 00:19:53,370
so on so it is deeper investigation in

349
00:19:46,270 --> 00:19:56,580
each case now let's move on to one of my

350
00:19:53,370 --> 00:20:00,280
favorite and most impact for the text on

351
00:19:56,580 --> 00:20:04,540
mobile and classic Wars as well and this

352
00:20:00,280 --> 00:20:07,240
is a rare and basically

353
00:20:04,540 --> 00:20:11,800
relatively easy to check and what you

354
00:20:07,240 --> 00:20:15,340
need to do is like your isn't it your is

355
00:20:11,800 --> 00:20:18,899
an attacker startin off flow with your

356
00:20:15,340 --> 00:20:22,300
found but you're intercepting that flow

357
00:20:18,900 --> 00:20:25,300
when you're about to exchange code a

358
00:20:22,300 --> 00:20:26,919
physician code to access token so you're

359
00:20:25,300 --> 00:20:30,310
getting a let's request sees it feed it

360
00:20:26,920 --> 00:20:32,980
to victim after that you are alike the

361
00:20:30,310 --> 00:20:35,590
victim goes to the link and now gets to

362
00:20:32,980 --> 00:20:37,210
the attackers account and now it does

363
00:20:35,590 --> 00:20:40,570
some things in this account using the

364
00:20:37,210 --> 00:20:43,510
app and attacker or later can like login

365
00:20:40,570 --> 00:20:46,060
with his credentials and get into the

366
00:20:43,510 --> 00:20:49,570
victims account but this is not really

367
00:20:46,060 --> 00:20:52,659
impressive because like victim goes gets

368
00:20:49,570 --> 00:20:54,820
into account which is empty and if you

369
00:20:52,660 --> 00:20:58,060
use this application previously it my

370
00:20:54,820 --> 00:21:01,030
might be it might just log in and look

371
00:20:58,060 --> 00:21:05,139
login logout and login with his partner

372
00:21:01,030 --> 00:21:08,710
account but nowadays often to developers

373
00:21:05,140 --> 00:21:12,010
and companies using like to link

374
00:21:08,710 --> 00:21:14,290
existing user account with like Google

375
00:21:12,010 --> 00:21:18,370
Account Facebook account to make users

376
00:21:14,290 --> 00:21:21,070
easier to plug in and and it's totally

377
00:21:18,370 --> 00:21:24,280
game changer because now when you're

378
00:21:21,070 --> 00:21:27,820
using the same attack you are linking

379
00:21:24,280 --> 00:21:29,560
the existing user account with the

380
00:21:27,820 --> 00:21:32,169
attackers account with the attackers

381
00:21:29,560 --> 00:21:35,260
Google account and now it's like it's

382
00:21:32,170 --> 00:21:36,520
basically account takeover and in this

383
00:21:35,260 --> 00:21:39,250
January I've really found this

384
00:21:36,520 --> 00:21:42,010
vulnerability in some private program

385
00:21:39,250 --> 00:21:47,020
but so I can't like to tell about you

386
00:21:42,010 --> 00:21:48,400
tell tell you about it publicly but they

387
00:21:47,020 --> 00:21:53,650
still exist and you should definitely

388
00:21:48,400 --> 00:22:00,070
check for them and again the fancy is

389
00:21:53,650 --> 00:22:02,460
kind of similar to control fire to this

390
00:22:00,070 --> 00:22:05,620
time we add a parameter Cal State and

391
00:22:02,460 --> 00:22:07,990
basically it works this way client app

392
00:22:05,620 --> 00:22:11,189
generate state as it to the first

393
00:22:07,990 --> 00:22:14,950
request and sends it to the server

394
00:22:11,190 --> 00:22:17,910
server does nothing we stayed just copy

395
00:22:14,950 --> 00:22:21,390
and paste it to the response and

396
00:22:17,910 --> 00:22:23,490
send it to the client client gets stated

397
00:22:21,390 --> 00:22:26,730
he generated and saved stayed from the

398
00:22:23,490 --> 00:22:28,710
response compares them if they match it

399
00:22:26,730 --> 00:22:32,850
safely continue the flow if they do not

400
00:22:28,710 --> 00:22:36,720
match it interrupts the flow and like we

401
00:22:32,850 --> 00:22:40,620
are safe now from what Sisera and again

402
00:22:36,720 --> 00:22:42,630
test defense play we stayed and check

403
00:22:40,620 --> 00:22:48,479
this is manga now Brandon and used only

404
00:22:42,630 --> 00:22:52,050
once and for the next mobility I have a

405
00:22:48,480 --> 00:22:54,990
small task for you and try to find

406
00:22:52,050 --> 00:22:58,290
vulnerabilities in six lines of code a

407
00:22:54,990 --> 00:23:01,430
real production code from real web app

408
00:22:58,290 --> 00:23:06,560
and basically there are three lines

409
00:23:01,430 --> 00:23:06,560
because other three are just synthesis I

410
00:23:08,660 --> 00:23:23,370
know you can do it

411
00:23:12,080 --> 00:23:31,409
any ideas take your attention to post

412
00:23:23,370 --> 00:23:34,439
message and how to use yeah yeah that's

413
00:23:31,410 --> 00:23:38,220
true and it will reputa lies in that

414
00:23:34,440 --> 00:23:40,740
they're using a star in a post message

415
00:23:38,220 --> 00:23:44,700
and basically that means that whenever

416
00:23:40,740 --> 00:23:49,320
whoever whatever page opens this this

417
00:23:44,700 --> 00:23:51,300
one will receive the post message and in

418
00:23:49,320 --> 00:23:54,780
this case in post message was

419
00:23:51,300 --> 00:23:59,040
authorization code so attack worked like

420
00:23:54,780 --> 00:24:05,040
this I and attacker victim goes to

421
00:23:59,040 --> 00:24:07,649
attacker.com attacker.com opens consent

422
00:24:05,040 --> 00:24:10,230
screen in the separate tab then victims

423
00:24:07,650 --> 00:24:13,050
click on approve because in that consent

424
00:24:10,230 --> 00:24:15,300
screen nothing suspicious there's just

425
00:24:13,050 --> 00:24:18,000
like legitimate concern screen was

426
00:24:15,300 --> 00:24:20,970
opened and after that authorization code

427
00:24:18,000 --> 00:24:22,800
is sent back to the attacker the comment

428
00:24:20,970 --> 00:24:25,200
of course we have changed physician code

429
00:24:22,800 --> 00:24:29,580
purposes access token and get access to

430
00:24:25,200 --> 00:24:31,169
user data but having victim to click

431
00:24:29,580 --> 00:24:34,639
prove in such

432
00:24:31,169 --> 00:24:38,070
and of the dogs conditions is quite

433
00:24:34,640 --> 00:24:41,130
strong the condition right and I've

434
00:24:38,070 --> 00:24:44,760
investigated this resource a little bit

435
00:24:41,130 --> 00:24:47,429
deeper and I found out that they did not

436
00:24:44,760 --> 00:24:50,940
have explained options on consent screen

437
00:24:47,429 --> 00:24:54,029
and this again was totally game-changer

438
00:24:50,940 --> 00:24:57,480
now attack Wars like victim goes to

439
00:24:54,029 --> 00:24:59,610
attacker.com leaks anywhere and this

440
00:24:57,480 --> 00:25:02,640
clip was translated through if I frame

441
00:24:59,610 --> 00:25:04,769
to the approve button and again at a

442
00:25:02,640 --> 00:25:08,880
catacomb just gets authorization code

443
00:25:04,769 --> 00:25:11,279
and gets access to user data so it was a

444
00:25:08,880 --> 00:25:15,179
really fun case because each frame

445
00:25:11,279 --> 00:25:18,899
options often closed as na was accepted

446
00:25:15,179 --> 00:25:22,740
and actually I was paid for that back

447
00:25:18,899 --> 00:25:28,039
and you can get more details full of the

448
00:25:22,740 --> 00:25:32,940
link below it's publicly disclosed and

449
00:25:28,039 --> 00:25:35,070
now let's move on to like Rick Xbox some

450
00:25:32,940 --> 00:25:38,820
classic rogue Xbox and this is not my

451
00:25:35,070 --> 00:25:43,100
report but I've decided to include it in

452
00:25:38,820 --> 00:25:46,860
my talk because it shows that even in

453
00:25:43,100 --> 00:25:49,678
2018 there war bugs in companies like

454
00:25:46,860 --> 00:25:53,010
Twitter in error gags which led to

455
00:25:49,679 --> 00:25:55,409
account takeover and basically there is

456
00:25:53,010 --> 00:26:00,620
parameter like redirect to you right by

457
00:25:55,409 --> 00:26:04,860
which you know in which you choose URL

458
00:26:00,620 --> 00:26:07,199
where operation code would go and if you

459
00:26:04,860 --> 00:26:10,559
mess up with reg X checks on the

460
00:26:07,200 --> 00:26:13,139
server-side malicious attacker plan like

461
00:26:10,559 --> 00:26:15,750
it easier to his demand and all

462
00:26:13,139 --> 00:26:18,029
physician codes will go to his domain

463
00:26:15,750 --> 00:26:21,870
and Twitter had this will not build it

464
00:26:18,029 --> 00:26:27,769
so whenever you check mobile on do not

465
00:26:21,870 --> 00:26:31,908
forget about fly clásico asana boots and

466
00:26:27,769 --> 00:26:36,059
let me summarize it for you whenever you

467
00:26:31,909 --> 00:26:40,200
building or testing mobile ass

468
00:26:36,059 --> 00:26:42,990
implementation you should firstly check

469
00:26:40,200 --> 00:26:44,770
so take a big picture of this

470
00:26:42,990 --> 00:26:47,500
implementation like

471
00:26:44,770 --> 00:26:50,250
how to implement it whether there are of

472
00:26:47,500 --> 00:26:52,179
those transports or maybe there are I

473
00:26:50,250 --> 00:26:56,140
mean maybe there are some additional

474
00:26:52,179 --> 00:26:57,790
steps in all because we can make

475
00:26:56,140 --> 00:27:00,070
mistakes even when we're just

476
00:26:57,790 --> 00:27:03,040
implementing standards and when we're

477
00:27:00,070 --> 00:27:05,830
adding something by ourselves to the

478
00:27:03,040 --> 00:27:09,760
seat limitations they're higher and more

479
00:27:05,830 --> 00:27:12,100
much higher chance for abuses and then

480
00:27:09,760 --> 00:27:15,940
do like simple checks like that all

481
00:27:12,100 --> 00:27:19,300
quests are using HTTPS that tokens are

482
00:27:15,940 --> 00:27:23,260
stored in safe places and how constants

483
00:27:19,300 --> 00:27:25,600
consent screener is used and then of

484
00:27:23,260 --> 00:27:28,600
course check for specific mobile auto

485
00:27:25,600 --> 00:27:30,909
abilities and disorder efficient code

486
00:27:28,600 --> 00:27:34,659
interception attack and check for pulsus

487
00:27:30,910 --> 00:27:37,300
wrap and of course do not forget about

488
00:27:34,660 --> 00:27:40,059
ordinary or vulnerabilities and like

489
00:27:37,300 --> 00:27:43,210
regex box and there are more of them but

490
00:27:40,059 --> 00:27:46,389
I didn't include them you can is easily

491
00:27:43,210 --> 00:27:51,040
Google to them there is much more

492
00:27:46,390 --> 00:27:53,860
resources than on mobile off and that's

493
00:27:51,040 --> 00:27:56,409
it thank you for your attention if you

494
00:27:53,860 --> 00:27:57,219
have any questions you can ask them

495
00:27:56,410 --> 00:28:00,130
right now

496
00:27:57,220 --> 00:28:03,420
or email me later or right now Sarah

497
00:28:00,130 --> 00:28:03,420
Graham thank you

498
00:28:06,460 --> 00:28:14,370
[Applause]

499
00:28:09,270 --> 00:28:14,370
Thank You Nikita is there any questions

500
00:28:17,310 --> 00:28:25,149
hello thank you for the presentation

501
00:28:21,130 --> 00:28:27,940
during recommendation you have speaked

502
00:28:25,150 --> 00:28:31,500
about browser custom tab and you have

503
00:28:27,940 --> 00:28:33,910
recommended to use it so I didn't

504
00:28:31,500 --> 00:28:37,060
understand why this will solve the

505
00:28:33,910 --> 00:28:41,620
problem of replying the token and the

506
00:28:37,060 --> 00:28:45,940
second question is why we don't make one

507
00:28:41,620 --> 00:28:49,030
zero one question if your question was

508
00:28:45,940 --> 00:28:50,950
like you didn't quite understand why we

509
00:28:49,030 --> 00:28:53,139
should use browser custom tabs exactly

510
00:28:50,950 --> 00:28:57,630
how this will solve the problem of

511
00:28:53,140 --> 00:28:57,630
replaying the token authentication to

512
00:28:58,550 --> 00:29:04,930
[Music]

513
00:29:00,390 --> 00:29:09,160
how browser custom tab will solve the

514
00:29:04,930 --> 00:29:15,220
issue of attack by you're playing the

515
00:29:09,160 --> 00:29:17,740
authentication token please provide an

516
00:29:15,220 --> 00:29:20,520
example of such attacks and how all for

517
00:29:17,740 --> 00:29:25,240
example the attack that you show the

518
00:29:20,520 --> 00:29:28,530
reception area using browser custom tab

519
00:29:25,240 --> 00:29:31,800
does not prevents it so it's like

520
00:29:28,530 --> 00:29:36,580
browser custom tab is better because

521
00:29:31,800 --> 00:29:39,129
it's web you cannot get cookies from the

522
00:29:36,580 --> 00:29:43,120
alternate browser so it will always ask

523
00:29:39,130 --> 00:29:47,170
users for enter their password login so

524
00:29:43,120 --> 00:29:49,030
for user experience it is much better

525
00:29:47,170 --> 00:29:53,620
when they're like clicking one button

526
00:29:49,030 --> 00:29:55,570
it's much easier for them then just

527
00:29:53,620 --> 00:29:57,850
remember password remember login and

528
00:29:55,570 --> 00:30:01,409
then type them in so it is just for user

529
00:29:57,850 --> 00:30:05,530
experience not security issues second to

530
00:30:01,410 --> 00:30:09,330
when it's it's really good when users do

531
00:30:05,530 --> 00:30:11,860
not enter their passwords anywhere like

532
00:30:09,330 --> 00:30:14,409
whoever prompts their password their

533
00:30:11,860 --> 00:30:17,590
entrances it makes them more vulnerable

534
00:30:14,410 --> 00:30:21,400
to fishing and it's exactly what's

535
00:30:17,590 --> 00:30:21,879
happening when they're like logging into

536
00:30:21,400 --> 00:30:24,370
her

537
00:30:21,880 --> 00:30:26,920
party app and they're asking them third

538
00:30:24,370 --> 00:30:28,840
party app asking to enter the Google

539
00:30:26,920 --> 00:30:32,410
like a login and password

540
00:30:28,840 --> 00:30:35,590
so for user it's kind of strange that do

541
00:30:32,410 --> 00:30:38,950
not understand how it works the second

542
00:30:35,590 --> 00:30:41,610
question is why we don't implement a

543
00:30:38,950 --> 00:30:44,230
mechanism that check also for the device

544
00:30:41,610 --> 00:30:46,719
for example a device ID and make

545
00:30:44,230 --> 00:30:51,670
combination between device ID password

546
00:30:46,720 --> 00:30:57,520
and other information to avoid that we

547
00:30:51,670 --> 00:31:03,930
replay the authentication talk so we are

548
00:30:57,520 --> 00:31:06,760
getting device ID - - like your

549
00:31:03,930 --> 00:31:08,440
positives that we can use device ID to

550
00:31:06,760 --> 00:31:12,490
prevent authorization code interception

551
00:31:08,440 --> 00:31:15,640
attack yeah exactly and how do you want

552
00:31:12,490 --> 00:31:18,370
to use it making result for example by

553
00:31:15,640 --> 00:31:24,630
the password of your user and his device

554
00:31:18,370 --> 00:31:28,419
idea and why not and how do you know I

555
00:31:24,630 --> 00:31:31,780
think it is possible no no no I think I

556
00:31:28,420 --> 00:31:34,360
think no because by just getting device

557
00:31:31,780 --> 00:31:36,879
ID you do not know which user you want

558
00:31:34,360 --> 00:31:42,370
to log in because device ID is not bound

559
00:31:36,880 --> 00:31:45,250
to any account like by default so I

560
00:31:42,370 --> 00:31:48,580
think it's not really possible in this

561
00:31:45,250 --> 00:31:51,990
scenario maybe if you will invent some

562
00:31:48,580 --> 00:31:58,500
other scheme it will be possible

563
00:31:51,990 --> 00:31:58,500
thank you someone else

564
00:32:04,740 --> 00:32:24,440
any more questions hi you are mentioning

565
00:32:21,179 --> 00:32:27,769
a lot mobile or odd but are you

566
00:32:24,440 --> 00:32:32,749
considering or studied any other

567
00:32:27,769 --> 00:32:36,889
authentication method as considering

568
00:32:32,749 --> 00:32:41,779
excuse me I didn't hear considered what

569
00:32:36,889 --> 00:32:44,610
another alternative to mobile or odd and

570
00:32:41,779 --> 00:32:47,090
not a native to mobile or art I mean

571
00:32:44,610 --> 00:32:50,070
another protocol or something else

572
00:32:47,090 --> 00:32:51,449
another protocol a bath but another

573
00:32:50,070 --> 00:32:57,470
protocol for authentication

574
00:32:51,450 --> 00:33:00,840
exactly no I guess is one of the

575
00:32:57,470 --> 00:33:03,899
simplest authentication protocols so

576
00:33:00,840 --> 00:33:06,559
which this is why we just simply yeah

577
00:33:03,899 --> 00:33:10,399
decided to implement that and there are

578
00:33:06,559 --> 00:33:15,720
not so much others like we have open ID

579
00:33:10,399 --> 00:33:18,350
and I don't know any s4 likes to see the

580
00:33:15,720 --> 00:33:37,289
specific mobile which you can implement

581
00:33:18,350 --> 00:33:39,168
okay thank you any more questions any

582
00:33:37,289 --> 00:33:42,658
other questions

583
00:33:39,169 --> 00:33:47,999
No okay okay thank you okay now it's

584
00:33:42,659 --> 00:33:51,619
lunch break until 1320 and please give a

585
00:33:47,999 --> 00:33:51,619
round of applause for the kids

586
00:33:53,180 --> 00:33:54,490
[Applause]

587
00:33:53,920 --> 00:33:58,710
[Music]

588
00:33:54,490 --> 00:33:58,710
[Applause]

589
00:34:26,350 --> 00:34:29,460
[Music]

590
00:34:39,489 --> 00:34:52,679
[Music]

