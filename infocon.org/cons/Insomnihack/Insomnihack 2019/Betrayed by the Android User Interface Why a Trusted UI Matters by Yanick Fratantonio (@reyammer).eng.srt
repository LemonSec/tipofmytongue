1
00:00:06,830 --> 00:00:15,940
[Music]

2
00:00:12,600 --> 00:00:18,340
all right I guess you guys can hear me

3
00:00:15,940 --> 00:00:20,650
well any myself all right welcome

4
00:00:18,340 --> 00:00:22,570
everybody and welcome to my talk

5
00:00:20,650 --> 00:00:25,060
I'm super excited to be here I'm not

6
00:00:22,570 --> 00:00:26,860
used to speak at hacking and industry

7
00:00:25,060 --> 00:00:29,020
conferences and speakers are treated

8
00:00:26,860 --> 00:00:31,329
awesomely while in academic ones that's

9
00:00:29,020 --> 00:00:33,100
not exactly the case so thanks for the

10
00:00:31,329 --> 00:00:34,770
insomniac people and the night the team

11
00:00:33,100 --> 00:00:37,420
to having me here

12
00:00:34,770 --> 00:00:39,970
one slide about myself my name is

13
00:00:37,420 --> 00:00:43,000
Jennifer Antonio I go by Rihanna on the

14
00:00:39,970 --> 00:00:45,430
internet and I am an academic at least

15
00:00:43,000 --> 00:00:50,620
for now I'm a system profit your home is

16
00:00:45,430 --> 00:00:52,539
the school near nice in France and I got

17
00:00:50,620 --> 00:00:55,178
my PhD in Santa Barbara but originally

18
00:00:52,539 --> 00:00:57,280
I'm from Italy my main research work is

19
00:00:55,179 --> 00:01:00,399
on mobile security mostly Android

20
00:00:57,280 --> 00:01:01,750
security and I did malware things I'm

21
00:01:00,399 --> 00:01:03,789
gonna be scanning and things like this

22
00:01:01,750 --> 00:01:06,100
but the last couple of years I moved to

23
00:01:03,789 --> 00:01:07,660
user interface security and so today I'm

24
00:01:06,100 --> 00:01:09,910
you have to talk to you about this

25
00:01:07,660 --> 00:01:11,950
I'm also heavily involved in the hacking

26
00:01:09,910 --> 00:01:14,740
community and capture-the-flag community

27
00:01:11,950 --> 00:01:16,750
I played with the shellfish and my Santa

28
00:01:14,740 --> 00:01:19,240
Barbara team I my own team with my

29
00:01:16,750 --> 00:01:21,100
students at your home call nobs and I

30
00:01:19,240 --> 00:01:23,048
had a crazy terrible idea to join the

31
00:01:21,100 --> 00:01:25,149
order of airflow people which are the

32
00:01:23,049 --> 00:01:27,579
current Def Con organizers if you're

33
00:01:25,149 --> 00:01:30,729
wondering how it is it's a bad idea do

34
00:01:27,579 --> 00:01:32,829
not do this all right

35
00:01:30,729 --> 00:01:34,600
I don't know if I'm gonna be an academic

36
00:01:32,829 --> 00:01:36,610
forever but I love teaching I recently

37
00:01:34,600 --> 00:01:39,640
opened open source like put everything

38
00:01:36,610 --> 00:01:42,280
online about my mobile security class so

39
00:01:39,640 --> 00:01:45,340
it's out there and so now I only have

40
00:01:42,280 --> 00:01:46,960
slides but I'm gonna put next week some

41
00:01:45,340 --> 00:01:49,750
kind of mini wargaming website

42
00:01:46,960 --> 00:01:51,600
specifically focus on mobile security

43
00:01:49,750 --> 00:01:55,119
I'm gonna start with the racing apps

44
00:01:51,600 --> 00:01:57,189
people find it interesting on Twitter so

45
00:01:55,119 --> 00:02:01,090
maybe you're also interested as well so

46
00:01:57,189 --> 00:02:01,809
just want to advertise this all right so

47
00:02:01,090 --> 00:02:03,399
let's get it started

48
00:02:01,810 --> 00:02:06,850
as I mentioned today is gonna be about

49
00:02:03,399 --> 00:02:08,770
UI security I have two main points about

50
00:02:06,850 --> 00:02:11,590
this talk I want to convince you that US

51
00:02:08,770 --> 00:02:14,710
security matters and these attacks are

52
00:02:11,590 --> 00:02:16,360
real they exist they are practical and

53
00:02:14,710 --> 00:02:18,670
it's actually quite difficult to

54
00:02:16,360 --> 00:02:20,890
completely remove them okay so and some

55
00:02:18,670 --> 00:02:25,000
of them are considered as open

56
00:02:20,890 --> 00:02:27,399
problems before we start a little bit on

57
00:02:25,000 --> 00:02:29,920
the context one slide about Android

58
00:02:27,400 --> 00:02:31,990
security users can install third-party

59
00:02:29,920 --> 00:02:34,600
apps you should not come as the news to

60
00:02:31,990 --> 00:02:36,550
you and third-party apps by default are

61
00:02:34,600 --> 00:02:38,079
sandbox which means that even in the

62
00:02:36,550 --> 00:02:40,330
case you stole a third-party app on your

63
00:02:38,080 --> 00:02:42,070
phone is not it you can do everything it

64
00:02:40,330 --> 00:02:44,440
wants okay there are some rules to be

65
00:02:42,070 --> 00:02:46,180
followed for example each app is private

66
00:02:44,440 --> 00:02:49,300
storage so if you stole a malicious app

67
00:02:46,180 --> 00:02:52,150
this malicious app cannot steal your

68
00:02:49,300 --> 00:02:53,770
private messages on whatsapp or you know

69
00:02:52,150 --> 00:02:55,270
there are permission system you need to

70
00:02:53,770 --> 00:02:57,760
ask for permissions to do specific

71
00:02:55,270 --> 00:02:59,860
things and if you want to communicate

72
00:02:57,760 --> 00:03:03,190
with the system or other applications

73
00:02:59,860 --> 00:03:05,489
there are well-defined mechanisms so

74
00:03:03,190 --> 00:03:08,980
that this communication can happen okay

75
00:03:05,489 --> 00:03:11,380
this is very difficult an usual personal

76
00:03:08,980 --> 00:03:14,170
computer or laptops if I get something

77
00:03:11,380 --> 00:03:15,760
malicious on my laptop and I have a gun

78
00:03:14,170 --> 00:03:17,530
- in this case it's usually game over

79
00:03:15,760 --> 00:03:19,870
because you can install a you know use a

80
00:03:17,530 --> 00:03:22,360
space key logger with the type sudo

81
00:03:19,870 --> 00:03:24,760
password get through and that's it okay

82
00:03:22,360 --> 00:03:27,190
so this UI security bugs I'm gonna

83
00:03:24,760 --> 00:03:29,470
present today are not really interesting

84
00:03:27,190 --> 00:03:30,760
on the laptop let's say perspective

85
00:03:29,470 --> 00:03:32,019
because you know once you get caught

86
00:03:30,760 --> 00:03:34,420
execution there it's game over

87
00:03:32,019 --> 00:03:36,400
but on mobile phones is actually quite

88
00:03:34,420 --> 00:03:38,018
interesting because even if you get the

89
00:03:36,400 --> 00:03:40,450
third-party app that is not behaving

90
00:03:38,019 --> 00:03:44,310
correctly if should not be able to you

91
00:03:40,450 --> 00:03:44,310
know mess with your other applications

92
00:03:44,370 --> 00:03:49,840
alright so I mentioned there are

93
00:03:47,920 --> 00:03:51,309
security mechanisms to prevent the

94
00:03:49,840 --> 00:03:53,260
third-party apps can do bad stuff and

95
00:03:51,310 --> 00:03:55,570
there are many efforts from the end of

96
00:03:53,260 --> 00:03:57,190
security team to make sure that they

97
00:03:55,570 --> 00:03:59,799
cannot do much damage there are efforts

98
00:03:57,190 --> 00:04:01,870
to reduce the texture phase previous

99
00:03:59,799 --> 00:04:03,489
principle of least privilege exploit

100
00:04:01,870 --> 00:04:05,110
mitigation techniques and you know you

101
00:04:03,489 --> 00:04:07,090
name it permission systems the silly

102
00:04:05,110 --> 00:04:09,070
nukes and blah blah blah okay or you

103
00:04:07,090 --> 00:04:11,500
know restricted us to slash broken and

104
00:04:09,070 --> 00:04:12,970
similar directors okay if you want to

105
00:04:11,500 --> 00:04:15,880
get an overview there is an awesome talk

106
00:04:12,970 --> 00:04:18,160
by Nick Cali bitch who was the previous

107
00:04:15,880 --> 00:04:20,560
director windows security at Google and

108
00:04:18,160 --> 00:04:23,710
basically is not very nice overview on

109
00:04:20,560 --> 00:04:27,669
all the efforts from the team to to

110
00:04:23,710 --> 00:04:29,890
improve the security of of Android now

111
00:04:27,669 --> 00:04:32,469
on the point of view a security matters

112
00:04:29,890 --> 00:04:34,169
what I'm going to show you is that some

113
00:04:32,470 --> 00:04:36,749
of these UI bugs and problems

114
00:04:34,169 --> 00:04:40,498
can bypass this low-level mechanisms

115
00:04:36,749 --> 00:04:42,270
that are now in Android okay and I

116
00:04:40,499 --> 00:04:44,580
believe that this end road UI is the

117
00:04:42,270 --> 00:04:46,498
Achilles heel in a sense that perhaps

118
00:04:44,580 --> 00:04:49,258
can have full control on the screen they

119
00:04:46,499 --> 00:04:51,509
can do some tricks and I believe these

120
00:04:49,259 --> 00:04:53,490
bags are not well understood and so if I

121
00:04:51,509 --> 00:04:55,650
find it back in a reporter to Google is

122
00:04:53,490 --> 00:04:58,169
not as easy to get past as I would reply

123
00:04:55,650 --> 00:05:00,479
maybe when I when I submit a you know

124
00:04:58,169 --> 00:05:02,159
buffer overflow potential problem and

125
00:05:00,479 --> 00:05:03,779
I'm gonna have a couple of nice stories

126
00:05:02,159 --> 00:05:07,830
on to show that this is actually the

127
00:05:03,779 --> 00:05:10,229
case I also believe that the missing

128
00:05:07,830 --> 00:05:12,240
what we call trusted UI is one of the

129
00:05:10,229 --> 00:05:15,090
missing piece to make these mobile

130
00:05:12,240 --> 00:05:17,370
devices more powerful able to for

131
00:05:15,090 --> 00:05:19,799
example control security critical

132
00:05:17,370 --> 00:05:20,669
systems medical devices or electronic

133
00:05:19,800 --> 00:05:22,800
IDs and so forth

134
00:05:20,669 --> 00:05:25,198
okay so I believe the focusing on this

135
00:05:22,800 --> 00:05:28,080
you know fixing this kind of resource

136
00:05:25,199 --> 00:05:29,370
problems may help us get mobile devices

137
00:05:28,080 --> 00:05:33,089
even more useful than what they

138
00:05:29,370 --> 00:05:36,419
currently have okay so in terms of UI

139
00:05:33,089 --> 00:05:38,550
attacks there are two big categories I'm

140
00:05:36,419 --> 00:05:40,948
going to present in bit but conceptually

141
00:05:38,550 --> 00:05:44,219
I would like to define what they what I

142
00:05:40,949 --> 00:05:45,810
mean is a UI attack I mean any attack

143
00:05:44,219 --> 00:05:48,449
involved in the user interface that

144
00:05:45,810 --> 00:05:49,860
somehow compromised or affects one of

145
00:05:48,449 --> 00:05:50,460
this confidence shot the integrity and

146
00:05:49,860 --> 00:05:54,360
availability

147
00:05:50,460 --> 00:05:59,638
okay and usually these attacks are about

148
00:05:54,360 --> 00:06:01,139
deceiving the user okay what I like to

149
00:05:59,639 --> 00:06:03,689
focus on here is what they call

150
00:06:01,139 --> 00:06:06,779
impressive imperceptible attacks or

151
00:06:03,689 --> 00:06:09,330
imperceptible a pure Italian and the

152
00:06:06,779 --> 00:06:12,149
idea is that once these attacks are run

153
00:06:09,330 --> 00:06:13,830
even if you are a security expert it's

154
00:06:12,149 --> 00:06:16,560
very difficult to know what's going on

155
00:06:13,830 --> 00:06:18,000
okay even in the case where you stare at

156
00:06:16,560 --> 00:06:19,649
the screen on your phone like you're

157
00:06:18,000 --> 00:06:22,699
usually staring at the screen when you

158
00:06:19,649 --> 00:06:24,810
visit your interesting websites okay so

159
00:06:22,699 --> 00:06:27,089
it's like you know when like an a

160
00:06:24,810 --> 00:06:28,349
magician telling you I'm going to trick

161
00:06:27,089 --> 00:06:30,930
you

162
00:06:28,349 --> 00:06:32,310
similar things happen here we actually

163
00:06:30,930 --> 00:06:34,349
did a user study with some of these

164
00:06:32,310 --> 00:06:38,399
attacks and nobody will actually able to

165
00:06:34,349 --> 00:06:40,520
understand that an attack was run just

166
00:06:38,399 --> 00:06:43,379
to make sure this distinction is clear

167
00:06:40,520 --> 00:06:45,750
an example of non imperceptible attack

168
00:06:43,379 --> 00:06:47,940
that I will consider is web fishing

169
00:06:45,750 --> 00:06:50,100
where fishing is about you know three

170
00:06:47,940 --> 00:06:52,800
the user with some UI tricks trying to

171
00:06:50,100 --> 00:06:55,110
make sure the user believes this website

172
00:06:52,800 --> 00:06:56,940
is actually kinda like Facebook but it's

173
00:06:55,110 --> 00:06:59,220
not imperceptible because this but as a

174
00:06:56,940 --> 00:07:00,900
way to figure this out you can check the

175
00:06:59,220 --> 00:07:02,850
green lock you can check the domain name

176
00:07:00,900 --> 00:07:04,770
the points to facebook.com so there is

177
00:07:02,850 --> 00:07:06,780
some kind of technical way to make sure

178
00:07:04,770 --> 00:07:08,400
you are safe while for some of the tax

179
00:07:06,780 --> 00:07:11,880
that present that's not the case which

180
00:07:08,400 --> 00:07:13,650
that's why I find them interesting cool

181
00:07:11,880 --> 00:07:15,750
so there are two big classes of attacks

182
00:07:13,650 --> 00:07:17,849
the first one is clickjacking include

183
00:07:15,750 --> 00:07:19,710
jacking an attacker lose the user to

184
00:07:17,850 --> 00:07:22,350
click somewhere and to make him do

185
00:07:19,710 --> 00:07:24,739
something stupid and the classic goal is

186
00:07:22,350 --> 00:07:28,890
provision escalation or confused Eponine

187
00:07:24,740 --> 00:07:31,650
the second big attacker is fishing where

188
00:07:28,890 --> 00:07:33,960
the attacker tries to convince the user

189
00:07:31,650 --> 00:07:35,729
to put his username and password the

190
00:07:33,960 --> 00:07:38,400
credit card numbers and things like this

191
00:07:35,730 --> 00:07:39,840
where you should not put them in a way

192
00:07:38,400 --> 00:07:42,870
that the attacker leaks them and can

193
00:07:39,840 --> 00:07:44,340
steal them ok it's not only limited to

194
00:07:42,870 --> 00:07:47,190
this there are a number of tricks and

195
00:07:44,340 --> 00:07:48,960
twist to these attacks and some of these

196
00:07:47,190 --> 00:07:50,550
involve messing with password managers

197
00:07:48,960 --> 00:07:53,010
and eastern taps as we're gonna see

198
00:07:50,550 --> 00:07:56,520
today so we're going to start with plea

199
00:07:53,010 --> 00:07:58,560
jacking I one slide like overview on

200
00:07:56,520 --> 00:08:00,539
this before we start this there is one

201
00:07:58,560 --> 00:08:02,120
Android permission that is very

202
00:08:00,540 --> 00:08:04,650
important for this presentation

203
00:08:02,120 --> 00:08:06,540
informally they call it drawn top tech

204
00:08:04,650 --> 00:08:09,359
Nia is called the system I left window

205
00:08:06,540 --> 00:08:11,520
if you're familiar with this if you have

206
00:08:09,360 --> 00:08:14,010
this permission you can draw arbitrary

207
00:08:11,520 --> 00:08:16,169
windows or overlays as they're called on

208
00:08:14,010 --> 00:08:18,780
the screen with arbitrary I mean

209
00:08:16,169 --> 00:08:21,120
literally arbitrary you can decide the

210
00:08:18,780 --> 00:08:23,309
shape the content if it is transparent

211
00:08:21,120 --> 00:08:26,430
playing with alpha values and the actual

212
00:08:23,310 --> 00:08:28,410
position okay extremely powerful not

213
00:08:26,430 --> 00:08:32,130
only this you can also control how this

214
00:08:28,410 --> 00:08:33,630
overlay reacts to clicks particular you

215
00:08:32,130 --> 00:08:35,789
can set up these overlays with through

216
00:08:33,630 --> 00:08:38,460
some flex in a way that the overlay is

217
00:08:35,789 --> 00:08:41,039
their clickable sore pass-through

218
00:08:38,460 --> 00:08:42,630
so either clickable or Bostrom clickable

219
00:08:41,039 --> 00:08:44,610
means that if you have an overlay and

220
00:08:42,630 --> 00:08:46,740
overlays clickable in a click reaches

221
00:08:44,610 --> 00:08:48,420
the valley the valet is receiving a

222
00:08:46,740 --> 00:08:51,480
callback saying a the user clicked yeah

223
00:08:48,420 --> 00:08:54,360
but it cannot be propagated below it

224
00:08:51,480 --> 00:08:56,460
okay first row is the opposite they

225
00:08:54,360 --> 00:08:58,260
click even if the user clicks on overlay

226
00:08:56,460 --> 00:08:59,730
the overlay is not notified that there

227
00:08:58,260 --> 00:09:00,700
is a click it doesn't know where the

228
00:08:59,730 --> 00:09:02,170
user clicked but

229
00:09:00,700 --> 00:09:05,590
League goes through and reaches what's

230
00:09:02,170 --> 00:09:07,780
on the bottom okay this XOR you cannot

231
00:09:05,590 --> 00:09:10,330
do that you get the click and then you

232
00:09:07,780 --> 00:09:11,829
propagated due to very simple reasons if

233
00:09:10,330 --> 00:09:14,110
you could do this then it would be easy

234
00:09:11,830 --> 00:09:15,970
to actually create a number overlays on

235
00:09:14,110 --> 00:09:18,010
the screen invisible and somehow track

236
00:09:15,970 --> 00:09:19,660
what you're typing okay because you can

237
00:09:18,010 --> 00:09:21,580
just understand what the user clicked

238
00:09:19,660 --> 00:09:23,860
and then you say okay you click there

239
00:09:21,580 --> 00:09:25,030
you log a press the button a and then

240
00:09:23,860 --> 00:09:26,530
you propagate the click on the react

241
00:09:25,030 --> 00:09:28,360
keyboard so you can do some kinda you I

242
00:09:26,530 --> 00:09:32,860
mean in the middle for this reason you

243
00:09:28,360 --> 00:09:34,870
cannot do this it's XO okay this

244
00:09:32,860 --> 00:09:38,410
permission is not rare it's used quite

245
00:09:34,870 --> 00:09:39,880
often and when we did this study 10

246
00:09:38,410 --> 00:09:42,670
percent of the tapas for using this

247
00:09:39,880 --> 00:09:45,760
including big apps Facebook Skype uber

248
00:09:42,670 --> 00:09:48,010
and things like this okay and at least

249
00:09:45,760 --> 00:09:49,810
when we did the study it turns out that

250
00:09:48,010 --> 00:09:52,060
this a pic this permission is

251
00:09:49,810 --> 00:09:54,369
automatically granted if an app is told

252
00:09:52,060 --> 00:09:56,079
from the Play Store I've an asterisk

253
00:09:54,370 --> 00:09:57,850
here because I've all remorse that maybe

254
00:09:56,080 --> 00:09:59,020
is gonna change in the future which is

255
00:09:57,850 --> 00:10:00,940
for me is very interesting because

256
00:09:59,020 --> 00:10:02,829
Facebook is used by 1 billion people and

257
00:10:00,940 --> 00:10:05,650
they cannot really ask now 1 billion

258
00:10:02,830 --> 00:10:07,180
people a please enable this permission

259
00:10:05,650 --> 00:10:08,800
so my guess is that they're gonna

260
00:10:07,180 --> 00:10:11,469
introduce some kinda whitelisting things

261
00:10:08,800 --> 00:10:12,900
for big apps can do this and small apps

262
00:10:11,470 --> 00:10:14,980
cannot do this which i think is a bit

263
00:10:12,900 --> 00:10:17,590
controversial it could be a bit

264
00:10:14,980 --> 00:10:20,440
controversial but that's the current

265
00:10:17,590 --> 00:10:23,010
state and anyways it's a permission so

266
00:10:20,440 --> 00:10:25,180
app can actually ask for it and so forth

267
00:10:23,010 --> 00:10:28,060
that's a couple of examples so now this

268
00:10:25,180 --> 00:10:30,370
permission is used that's my mom

269
00:10:28,060 --> 00:10:32,050
pinging me on facebook messenger so

270
00:10:30,370 --> 00:10:34,690
Facebook Messenger you created this

271
00:10:32,050 --> 00:10:35,979
annoying bubbles and now you know how

272
00:10:34,690 --> 00:10:39,700
they are created with this permission

273
00:10:35,980 --> 00:10:41,500
okay that's another category of usage of

274
00:10:39,700 --> 00:10:44,470
this permission these are called screen

275
00:10:41,500 --> 00:10:46,600
filters these apps have the only purpose

276
00:10:44,470 --> 00:10:49,240
of creating a redish overlay on top of

277
00:10:46,600 --> 00:10:50,560
your screen so that you can watch your

278
00:10:49,240 --> 00:10:52,120
phone and play with your phone just

279
00:10:50,560 --> 00:10:53,739
before going to sleep and the phone with

280
00:10:52,120 --> 00:10:55,960
not going to mess up with your sleep

281
00:10:53,740 --> 00:10:57,520
schedule okay she's gonna remove some

282
00:10:55,960 --> 00:11:00,100
color component known to affect your

283
00:10:57,520 --> 00:11:02,110
sleep schedule and that's about it

284
00:11:00,100 --> 00:11:05,290
the only role of this app in this case

285
00:11:02,110 --> 00:11:08,050
is called twilight is this and it's all

286
00:11:05,290 --> 00:11:09,819
based on this drawn permission so this

287
00:11:08,050 --> 00:11:12,240
permission is not gonna go away anytime

288
00:11:09,820 --> 00:11:14,040
soon and we need to stick with it and

289
00:11:12,240 --> 00:11:18,360
we try to understand what we do with

290
00:11:14,040 --> 00:11:21,449
this permission now I one slide on what

291
00:11:18,360 --> 00:11:23,009
traditional clickjacking look like this

292
00:11:21,449 --> 00:11:25,709
has been known for a number of years now

293
00:11:23,009 --> 00:11:27,689
and it works like this let's say that

294
00:11:25,709 --> 00:11:29,929
you are an attacker and you want to gain

295
00:11:27,689 --> 00:11:32,248
additional permission in this cases

296
00:11:29,929 --> 00:11:33,420
accessibility service menu and you want

297
00:11:32,249 --> 00:11:35,879
the user to click OK

298
00:11:33,420 --> 00:11:38,368
now if the user is not completely done

299
00:11:35,879 --> 00:11:39,660
he is not going to click on the ok ok so

300
00:11:38,369 --> 00:11:42,509
the clear checking trick works like this

301
00:11:39,660 --> 00:11:45,179
the militias up before switch into this

302
00:11:42,509 --> 00:11:47,850
and CBD service pop up it creates a full

303
00:11:45,179 --> 00:11:50,459
screen overlay with a fake button then

304
00:11:47,850 --> 00:11:52,800
below he actually pops up the CBD

305
00:11:50,459 --> 00:11:54,359
service team and now he creates this

306
00:11:52,800 --> 00:11:55,319
click here button in a way this

307
00:11:54,360 --> 00:11:57,420
pass-through so that when the user

308
00:11:55,319 --> 00:11:59,368
clicks hear the click Ashley goes on the

309
00:11:57,420 --> 00:12:03,420
bottom of it in the militias app

310
00:11:59,369 --> 00:12:05,009
actually gets the permission okay again

311
00:12:03,420 --> 00:12:09,209
this has been known for a number of

312
00:12:05,009 --> 00:12:10,259
years and we're gonna show what Google

313
00:12:09,209 --> 00:12:11,878
did about this and what kind of

314
00:12:10,259 --> 00:12:13,769
protection make an instance out there

315
00:12:11,879 --> 00:12:17,670
but that's basically the idea behind

316
00:12:13,769 --> 00:12:19,110
clickjacking now a couple of years ago I

317
00:12:17,670 --> 00:12:21,179
started working on this topic and the

318
00:12:19,110 --> 00:12:23,699
first question I asked myself was what

319
00:12:21,179 --> 00:12:24,959
about multi-step rejected there are some

320
00:12:23,699 --> 00:12:27,209
attacks for which you want the user to

321
00:12:24,959 --> 00:12:31,109
click here here and here not just one

322
00:12:27,209 --> 00:12:32,579
click ok and turns out you know it could

323
00:12:31,110 --> 00:12:34,350
be useful there are some scenarios where

324
00:12:32,579 --> 00:12:37,319
you want to eject multiple clicks and

325
00:12:34,350 --> 00:12:39,720
there are a number of challenges the key

326
00:12:37,319 --> 00:12:42,389
point is their malicious app needs to

327
00:12:39,720 --> 00:12:44,160
understand when the user clicked on the

328
00:12:42,389 --> 00:12:45,929
target button so that the malicious app

329
00:12:44,160 --> 00:12:47,879
can somehow Rev write itself in

330
00:12:45,929 --> 00:12:51,749
organized overlays to convince the user

331
00:12:47,879 --> 00:12:53,040
to click somewhere else ok and what if

332
00:12:51,749 --> 00:12:54,720
the user didn't click on the target

333
00:12:53,040 --> 00:12:56,399
button the malicious app wants to know

334
00:12:54,720 --> 00:12:58,110
it so that he knows it does not need to

335
00:12:56,399 --> 00:13:01,470
go to the next step so does my

336
00:12:58,110 --> 00:13:03,329
monitoring clicks is not enough and it's

337
00:13:01,470 --> 00:13:05,429
tricky because include jacking by

338
00:13:03,329 --> 00:13:07,199
definition the click of the user needs

339
00:13:05,429 --> 00:13:09,059
to land on Emily on the victim app not

340
00:13:07,199 --> 00:13:11,189
on the militias up and as I mentioned

341
00:13:09,059 --> 00:13:12,868
before but if the click doesn't reach

342
00:13:11,189 --> 00:13:17,790
the militias up the malicious app is not

343
00:13:12,869 --> 00:13:20,279
notified ok so it's not easy and turns

344
00:13:17,790 --> 00:13:22,169
out there is one flag will be choking

345
00:13:20,279 --> 00:13:23,939
credits overlays called flag watch

346
00:13:22,169 --> 00:13:25,620
outside touch so at that point I was

347
00:13:23,939 --> 00:13:27,420
like ok found a way

348
00:13:25,620 --> 00:13:30,660
and if you create the overlay with this

349
00:13:27,420 --> 00:13:31,740
flag basically you get notified even for

350
00:13:30,660 --> 00:13:34,170
clicks that do not reach your

351
00:13:31,740 --> 00:13:36,390
application however the coordinates are

352
00:13:34,170 --> 00:13:39,329
set always to 0-0 again it's a

353
00:13:36,390 --> 00:13:40,650
protection mechanism so that you know

354
00:13:39,330 --> 00:13:42,960
you cannot track the user when you click

355
00:13:40,650 --> 00:13:44,250
subside so again you're stuck with okay

356
00:13:42,960 --> 00:13:46,529
not a user click but I do know very

357
00:13:44,250 --> 00:13:48,930
clicked and anytime to mine

358
00:13:46,529 --> 00:13:50,070
so there is still the problem right

359
00:13:48,930 --> 00:13:52,529
because you don't know where the user

360
00:13:50,070 --> 00:13:56,250
click and it's a very important step for

361
00:13:52,529 --> 00:13:58,140
doing this kinda multi-step attacks one

362
00:13:56,250 --> 00:13:59,029
trick we found we call the contact

363
00:13:58,140 --> 00:14:01,080
server clickjacking

364
00:13:59,029 --> 00:14:03,360
so the attacker doesn't know the

365
00:14:01,080 --> 00:14:05,700
coordinates of the click but what if

366
00:14:03,360 --> 00:14:08,430
there is only one way for the clip to

367
00:14:05,700 --> 00:14:10,830
not reach the malicious app it's

368
00:14:08,430 --> 00:14:12,719
actually much easier with the with with

369
00:14:10,830 --> 00:14:14,880
an example let's say we want the user to

370
00:14:12,720 --> 00:14:17,339
click on this target button the attacker

371
00:14:14,880 --> 00:14:19,529
could do this you create another

372
00:14:17,339 --> 00:14:21,480
overlays in a way that the clicks does

373
00:14:19,529 --> 00:14:24,330
not go through and you create only one

374
00:14:21,480 --> 00:14:26,370
overlay with which the clicks actually

375
00:14:24,330 --> 00:14:28,500
go through this pass through okay and

376
00:14:26,370 --> 00:14:30,240
now think about this if the user clicks

377
00:14:28,500 --> 00:14:33,330
here you get the coordinates because the

378
00:14:30,240 --> 00:14:35,190
click is on the militias up Samir but if

379
00:14:33,330 --> 00:14:37,200
you click here you get 0 0 and this is

380
00:14:35,190 --> 00:14:40,080
enough to understand the user click on

381
00:14:37,200 --> 00:14:41,850
the whole ok so this trick works only

382
00:14:40,080 --> 00:14:43,440
from one specific hole you can

383
00:14:41,850 --> 00:14:45,930
generalize this to two because otherwise

384
00:14:43,440 --> 00:14:49,920
there is an beauty but for clickjacking

385
00:14:45,930 --> 00:14:51,540
this is actually enough and so you know

386
00:14:49,920 --> 00:14:53,520
when they use a click on the target

387
00:14:51,540 --> 00:14:56,010
button and you know now you can rewrite

388
00:14:53,520 --> 00:14:59,279
yourself the UI so that the user is

389
00:14:56,010 --> 00:15:01,050
pushed to click somewhere else again

390
00:14:59,279 --> 00:15:04,110
that's a research paper where we found

391
00:15:01,050 --> 00:15:06,870
this bugs ok so I mentioned a cliff

392
00:15:04,110 --> 00:15:09,000
jacking is actually quite old and of

393
00:15:06,870 --> 00:15:12,330
course Google didn't stay there and look

394
00:15:09,000 --> 00:15:14,520
at it so there is a security protection

395
00:15:12,330 --> 00:15:17,190
it's called the obscure flag

396
00:15:14,520 --> 00:15:19,589
informally these obscure flag like words

397
00:15:17,190 --> 00:15:21,450
like this whenever you have a button the

398
00:15:19,589 --> 00:15:23,850
user clicks on it he receives a motion

399
00:15:21,450 --> 00:15:26,130
event now they added in a flag whole

400
00:15:23,850 --> 00:15:28,740
flag window is obscure flag for this

401
00:15:26,130 --> 00:15:30,120
event this flag is set if at the moment

402
00:15:28,740 --> 00:15:32,730
of the click there was an overlay on top

403
00:15:30,120 --> 00:15:34,140
of the button ok so basically they're

404
00:15:32,730 --> 00:15:36,150
receiving button this somehow can

405
00:15:34,140 --> 00:15:37,800
understand wait a second there was

406
00:15:36,150 --> 00:15:39,270
something on top of me when the user

407
00:15:37,800 --> 00:15:41,400
clicks so maybe the user didn't

408
00:15:39,270 --> 00:15:43,370
see the button or anything and so it may

409
00:15:41,400 --> 00:15:46,410
be confused I'm gonna reject the click

410
00:15:43,370 --> 00:15:48,390
okay so the app can implement his logic

411
00:15:46,410 --> 00:15:51,360
saying this is suspicious click I'm

412
00:15:48,390 --> 00:15:54,210
gonna reject it there is another way you

413
00:15:51,360 --> 00:15:58,610
can set all the clicks on the view with

414
00:15:54,210 --> 00:16:02,570
this method so it's this is the main

415
00:15:58,610 --> 00:16:05,910
security mechanism against clickjacking

416
00:16:02,570 --> 00:16:07,440
these are it works in action so see this

417
00:16:05,910 --> 00:16:09,660
is the view from before where we wanted

418
00:16:07,440 --> 00:16:11,220
the user to click on the ok button it is

419
00:16:09,660 --> 00:16:12,689
fixed now with this obscure flag so

420
00:16:11,220 --> 00:16:15,630
let's say we create an overlay on top

421
00:16:12,690 --> 00:16:17,670
just for no explanation purpose for this

422
00:16:15,630 --> 00:16:19,890
and let's say the user clicks here now

423
00:16:17,670 --> 00:16:21,959
the Settings app is gonna reject the

424
00:16:19,890 --> 00:16:24,360
click is going to show some pop-up that

425
00:16:21,960 --> 00:16:26,580
is gonna say because in apps obscuring

426
00:16:24,360 --> 00:16:28,530
the permission request settings cannot

427
00:16:26,580 --> 00:16:30,240
verify your response so the user is

428
00:16:28,530 --> 00:16:32,880
asked to disable all these overlay

429
00:16:30,240 --> 00:16:35,430
things and now you can click on it okay

430
00:16:32,880 --> 00:16:38,100
so that prevented clickjacking for a

431
00:16:35,430 --> 00:16:40,680
while and then we found a way to bypass

432
00:16:38,100 --> 00:16:44,280
it the bypass is actually quite simple

433
00:16:40,680 --> 00:16:45,989
this is a trick what about so the

434
00:16:44,280 --> 00:16:47,730
obscure flag protects the OK button

435
00:16:45,990 --> 00:16:51,420
now what about protecting covering

436
00:16:47,730 --> 00:16:52,620
everything except the ok button you do

437
00:16:51,420 --> 00:16:55,589
this you do this

438
00:16:52,620 --> 00:16:57,270
and that's about it you know it's quite

439
00:16:55,590 --> 00:17:00,270
easy to convince a user to click on the

440
00:16:57,270 --> 00:17:01,290
ok button this ok buttons these buttons

441
00:17:00,270 --> 00:17:03,600
that are protected from clickjacking

442
00:17:01,290 --> 00:17:07,020
usually are very generic it's like ok

443
00:17:03,600 --> 00:17:09,030
enable and things like this ok so here

444
00:17:07,020 --> 00:17:11,609
the concept of trick is that by hiding

445
00:17:09,030 --> 00:17:18,359
the context we can still lure the user

446
00:17:11,609 --> 00:17:19,919
to click where we want ok now in this

447
00:17:18,359 --> 00:17:22,740
story of like what you can do weekly

448
00:17:19,920 --> 00:17:25,260
jacking and this research paper what we

449
00:17:22,740 --> 00:17:27,150
show is that these simple tricks are

450
00:17:25,260 --> 00:17:29,520
enough to get from this R on top

451
00:17:27,150 --> 00:17:32,010
permission to a CBD service for those of

452
00:17:29,520 --> 00:17:34,110
you that are not familiar CBD service is

453
00:17:32,010 --> 00:17:36,960
mechanism that in theory is used for

454
00:17:34,110 --> 00:17:37,979
apps to assist users with disabilities

455
00:17:36,960 --> 00:17:41,100
ok

456
00:17:37,980 --> 00:17:43,800
and it's super powerful mechanism in a

457
00:17:41,100 --> 00:17:45,570
sense that it can be notified whenever

458
00:17:43,800 --> 00:17:48,870
there is a UI event so if there is some

459
00:17:45,570 --> 00:17:50,429
text that the changes not that accesses

460
00:17:48,870 --> 00:17:52,080
be the service is not fight about this

461
00:17:50,430 --> 00:17:52,340
and so it can read maybe the text back

462
00:17:52,080 --> 00:17:55,460
to the

463
00:17:52,340 --> 00:17:57,980
user and the app can actually inject UI

464
00:17:55,460 --> 00:17:59,539
events such as clicks so that basically

465
00:17:57,980 --> 00:18:01,340
maybe if the user with disability as

466
00:17:59,539 --> 00:18:03,470
some kind of additional device like a

467
00:18:01,340 --> 00:18:06,350
attached keyboard to the phone this

468
00:18:03,470 --> 00:18:07,820
ability service is the mechanism that is

469
00:18:06,350 --> 00:18:11,330
used to actually inject the clicks

470
00:18:07,820 --> 00:18:13,490
around so it's very important and it's

471
00:18:11,330 --> 00:18:17,840
something that entered s and is gonna be

472
00:18:13,490 --> 00:18:20,360
there for a while in theory it's

473
00:18:17,840 --> 00:18:22,789
powerful but it shouldn't be god mode so

474
00:18:20,360 --> 00:18:25,459
if you check the documentation there was

475
00:18:22,789 --> 00:18:27,440
written something like this since this

476
00:18:25,460 --> 00:18:29,630
is a documentation of a CBT service what

477
00:18:27,440 --> 00:18:31,220
can events you can be notified about and

478
00:18:29,630 --> 00:18:32,809
they were saying you know process it

479
00:18:31,220 --> 00:18:35,570
could be compromised by leaking specific

480
00:18:32,809 --> 00:18:37,879
things like passwords so if you try to

481
00:18:35,570 --> 00:18:39,860
get the text content of a pass fulfilled

482
00:18:37,880 --> 00:18:41,450
you're not going to get it it's gonna be

483
00:18:39,860 --> 00:18:43,520
empty string and it's true if you tried

484
00:18:41,450 --> 00:18:46,010
to do get text in a password field you

485
00:18:43,520 --> 00:18:47,779
always get empty string so there were

486
00:18:46,010 --> 00:18:49,399
some limitations and then we checked

487
00:18:47,779 --> 00:18:52,159
around and it seems these limitations

488
00:18:49,399 --> 00:18:53,750
were quite easy to be bypassed in a

489
00:18:52,159 --> 00:18:55,610
sense that if you have this username and

490
00:18:53,750 --> 00:18:58,700
password field if even if I type the

491
00:18:55,610 --> 00:19:00,740
password then I go get text he's gonna

492
00:18:58,700 --> 00:19:04,100
always be an empty string

493
00:19:00,740 --> 00:19:06,289
however the keyboard itself is a three

494
00:19:04,100 --> 00:19:08,658
that is a normal application so whenever

495
00:19:06,289 --> 00:19:10,669
you're actually pressing on a key the

496
00:19:08,659 --> 00:19:13,220
system was advertising as a broadcast

497
00:19:10,669 --> 00:19:15,950
hey what's up I just press the user just

498
00:19:13,220 --> 00:19:17,659
person he are or key a and so forth and

499
00:19:15,950 --> 00:19:19,490
so basically true you cannot get the

500
00:19:17,659 --> 00:19:20,659
password but the keyboard itself was

501
00:19:19,490 --> 00:19:22,549
treated as a normal app you were

502
00:19:20,659 --> 00:19:23,149
basically able to read the password from

503
00:19:22,549 --> 00:19:25,460
the user

504
00:19:23,149 --> 00:19:28,279
we kept investigating and we found that

505
00:19:25,460 --> 00:19:30,590
basically nothing was protected Google

506
00:19:28,279 --> 00:19:31,990
Authenticator tokens these guys it's

507
00:19:30,590 --> 00:19:34,820
actually pretty nice there is also

508
00:19:31,990 --> 00:19:36,740
embedded refresh functionality so that

509
00:19:34,820 --> 00:19:38,480
when these changes there is a new UI

510
00:19:36,740 --> 00:19:40,580
event and so you get notified hey there

511
00:19:38,480 --> 00:19:42,890
is a new token so they expire but you

512
00:19:40,580 --> 00:19:45,199
get always a new one my favorite was the

513
00:19:42,890 --> 00:19:47,809
security but we will show unlock your

514
00:19:45,200 --> 00:19:50,659
phone turns out this is treated as a

515
00:19:47,809 --> 00:19:52,760
normal application so if you click on a

516
00:19:50,659 --> 00:19:56,240
button the system is going to broadcast

517
00:19:52,760 --> 00:19:59,419
to this ability service application a

518
00:19:56,240 --> 00:20:01,280
the user just pressed on number one so

519
00:19:59,419 --> 00:20:03,980
you're sure we show that you could steal

520
00:20:01,280 --> 00:20:05,860
the pin awesomely you can also inject

521
00:20:03,980 --> 00:20:07,930
the pin and unlock the phone automat

522
00:20:05,860 --> 00:20:09,370
and the cherry on the cake was that we

523
00:20:07,930 --> 00:20:12,310
could do this we're keeping the screen

524
00:20:09,370 --> 00:20:13,989
completely off somehow you know the

525
00:20:12,310 --> 00:20:15,879
thing that checks or should I turn on

526
00:20:13,990 --> 00:20:18,130
the screen on was not triggered and so

527
00:20:15,880 --> 00:20:19,960
once you're compromised we can actually

528
00:20:18,130 --> 00:20:23,410
inject everything do whatever we want

529
00:20:19,960 --> 00:20:24,760
lock the phone again without having the

530
00:20:23,410 --> 00:20:29,950
screen popping out so it's completely

531
00:20:24,760 --> 00:20:33,040
stealthy I have a quick demo with the

532
00:20:29,950 --> 00:20:34,750
video this is gonna show you how we

533
00:20:33,040 --> 00:20:36,820
tricked users to actually enable

534
00:20:34,750 --> 00:20:38,170
disability service and it's like before

535
00:20:36,820 --> 00:20:40,929
just show you what you can do with a

536
00:20:38,170 --> 00:20:42,370
speedy service and this is also part of

537
00:20:40,930 --> 00:20:46,710
the user study we did so we try with

538
00:20:42,370 --> 00:20:51,449
real users and let's see how it goes

539
00:20:46,710 --> 00:20:55,240
basically we ask our user subjects to

540
00:20:51,450 --> 00:20:57,400
play with our application and the

541
00:20:55,240 --> 00:20:59,350
application was something like you know

542
00:20:57,400 --> 00:21:00,400
it's gonna be a tutorial on how to be a

543
00:20:59,350 --> 00:21:02,889
nice person

544
00:21:00,400 --> 00:21:04,600
okay and so we ask them okay rest our

545
00:21:02,890 --> 00:21:05,860
tutorial when you're ready and then we

546
00:21:04,600 --> 00:21:08,530
tell them you're gonna show something

547
00:21:05,860 --> 00:21:10,000
and in this presentation humans are

548
00:21:08,530 --> 00:21:12,370
going to be represented as a green droid

549
00:21:10,000 --> 00:21:13,600
press next when you're ready and then we

550
00:21:12,370 --> 00:21:16,149
told them you know we're going to show

551
00:21:13,600 --> 00:21:18,219
you a video and he's gonna show you what

552
00:21:16,150 --> 00:21:20,500
happens when you're not the nice guy

553
00:21:18,220 --> 00:21:26,320
please press ok and when the user press

554
00:21:20,500 --> 00:21:29,950
ok a video starts ok and so it's a very

555
00:21:26,320 --> 00:21:32,919
dumb video at this point a CPD service

556
00:21:29,950 --> 00:21:34,480
is already enabled ok and what is

557
00:21:32,920 --> 00:21:35,890
happening under the hood is that somehow

558
00:21:34,480 --> 00:21:37,900
we are automatically clicking around

559
00:21:35,890 --> 00:21:39,490
traceability service and install another

560
00:21:37,900 --> 00:21:41,890
application Emily enabling all

561
00:21:39,490 --> 00:21:43,960
permissions device and mean and leaving

562
00:21:41,890 --> 00:21:44,410
all traces of the compromises just

563
00:21:43,960 --> 00:21:46,600
happen

564
00:21:44,410 --> 00:21:49,720
ok at this point the talk is already

565
00:21:46,600 --> 00:21:52,800
over so now I'm gonna show the same

566
00:21:49,720 --> 00:21:55,360
video but we deserve a layer on top

567
00:21:52,800 --> 00:21:56,590
drawn semi-transparent so you can

568
00:21:55,360 --> 00:22:00,280
actually see what was gone

569
00:21:56,590 --> 00:22:01,810
going on the first button was about

570
00:22:00,280 --> 00:22:03,700
selecting our own application from the

571
00:22:01,810 --> 00:22:06,760
CBD service minam The Next button was

572
00:22:03,700 --> 00:22:09,130
about trying to enabling and the third

573
00:22:06,760 --> 00:22:10,660
one is the ok button you seen before

574
00:22:09,130 --> 00:22:13,000
with the whole because there was obscure

575
00:22:10,660 --> 00:22:14,530
flag so this is a live demonstration of

576
00:22:13,000 --> 00:22:16,300
how you came by positive screw flag at

577
00:22:14,530 --> 00:22:17,850
this point we are ready stalling a

578
00:22:16,300 --> 00:22:20,639
malicious application

579
00:22:17,850 --> 00:22:23,009
we are enabling device admin super

580
00:22:20,639 --> 00:22:24,719
relaxing we are enabling all possible

581
00:22:23,009 --> 00:22:27,059
permissions with my favorite part and

582
00:22:24,720 --> 00:22:29,039
since your pros were clicking on recent

583
00:22:27,059 --> 00:22:32,039
and swipe everything off so there is no

584
00:22:29,039 --> 00:22:33,539
sign of any compromise and at this point

585
00:22:32,039 --> 00:22:35,309
the TAC is ready over there is a third

586
00:22:33,539 --> 00:22:36,889
party app installed from you know in

587
00:22:35,309 --> 00:22:41,609
this case was from this D card and

588
00:22:36,889 --> 00:22:43,769
that's about it I have another quick

589
00:22:41,609 --> 00:22:46,678
example is my small variant oops

590
00:22:43,769 --> 00:22:49,289
on how you could create the ransomware

591
00:22:46,679 --> 00:22:51,899
case it's a different one in a sense

592
00:22:49,289 --> 00:22:53,789
that we get the pin from this CBD

593
00:22:51,899 --> 00:22:56,879
service tricks and then we show that

594
00:22:53,789 --> 00:22:58,769
very fast you can use this pin change it

595
00:22:56,879 --> 00:23:01,769
and reboot the phone and at this point

596
00:22:58,769 --> 00:23:06,539
the user is locked out eyes open it is

597
00:23:01,769 --> 00:23:07,889
very fast so we started and this what we

598
00:23:06,539 --> 00:23:09,929
just injected the pin we already know

599
00:23:07,889 --> 00:23:11,309
here we are changing it now we're

600
00:23:09,929 --> 00:23:12,899
putting a message for the user so it

601
00:23:11,309 --> 00:23:14,729
knows who to pay and that's about it

602
00:23:12,899 --> 00:23:20,849
after this or boot the phone is

603
00:23:14,729 --> 00:23:22,679
completely lot alright so we notify this

604
00:23:20,849 --> 00:23:23,369
box to Google and Google came up with

605
00:23:22,679 --> 00:23:26,190
the new defense

606
00:23:23,369 --> 00:23:29,279
it's called ID overlays okay I love it

607
00:23:26,190 --> 00:23:32,460
it is super simple if you now go on this

608
00:23:29,279 --> 00:23:36,320
a CBD service menu automatically all

609
00:23:32,460 --> 00:23:38,700
overlays are completely hidden okay so

610
00:23:36,320 --> 00:23:41,939
conceptually this works because the user

611
00:23:38,700 --> 00:23:44,999
cannot be deceived and now you cannot

612
00:23:41,940 --> 00:23:47,279
confuse him anymore okay so these

613
00:23:44,999 --> 00:23:49,739
attacks of getting a CBD service does

614
00:23:47,279 --> 00:23:51,960
not work anymore due to this fix but

615
00:23:49,739 --> 00:23:54,239
let's dig into this a little bit more so

616
00:23:51,960 --> 00:23:56,249
I believe this tricks work and I think

617
00:23:54,239 --> 00:23:59,489
is enough to predict the jacking the

618
00:23:56,249 --> 00:24:02,580
problem is that is not very widely

619
00:23:59,489 --> 00:24:04,679
deployed why well it seems that only

620
00:24:02,580 --> 00:24:06,269
system apps can use history and it makes

621
00:24:04,679 --> 00:24:08,159
sense because we have a third-party app

622
00:24:06,269 --> 00:24:09,720
with the power of removing wall postive

623
00:24:08,159 --> 00:24:11,220
overlays then you can think about other

624
00:24:09,720 --> 00:24:13,470
attacks then I love servicing things

625
00:24:11,220 --> 00:24:16,019
like this so now this hide overlays

626
00:24:13,470 --> 00:24:18,029
trick is only used as far as I know from

627
00:24:16,019 --> 00:24:19,799
accessibility service settings from the

628
00:24:18,029 --> 00:24:22,649
menu when you select the permissions and

629
00:24:19,799 --> 00:24:24,029
similar things okay and that's about it

630
00:24:22,649 --> 00:24:27,479
so third-party apps cannot really

631
00:24:24,029 --> 00:24:29,190
protect themselves with districts then

632
00:24:27,480 --> 00:24:31,349
we start asking more questions like okay

633
00:24:29,190 --> 00:24:31,710
what about this obscure flag because

634
00:24:31,349 --> 00:24:34,500
it's

635
00:24:31,710 --> 00:24:35,670
you can bypass it but at least it raises

636
00:24:34,500 --> 00:24:39,270
the bar because you need to leave at

637
00:24:35,670 --> 00:24:40,770
least the button quite visible and then

638
00:24:39,270 --> 00:24:42,540
a friend told me that you know we

639
00:24:40,770 --> 00:24:45,570
actually tried to use it in production

640
00:24:42,540 --> 00:24:47,790
with a very big app let's say and they

641
00:24:45,570 --> 00:24:50,780
did not fly and tons of users start

642
00:24:47,790 --> 00:24:53,970
complaining about oh my phone is broken

643
00:24:50,780 --> 00:24:57,000
twilight screen filter apps once again

644
00:24:53,970 --> 00:24:59,700
turns out that if these apps actually

645
00:24:57,000 --> 00:25:01,950
creating an overlay then every button

646
00:24:59,700 --> 00:25:04,440
protected but obscure flag cannot be

647
00:25:01,950 --> 00:25:06,030
clicked and so this creates problems and

648
00:25:04,440 --> 00:25:07,850
so when this protection mechanism would

649
00:25:06,030 --> 00:25:10,470
obscure flag popped out in Twilight

650
00:25:07,850 --> 00:25:11,699
Twilight need to tell users you know if

651
00:25:10,470 --> 00:25:14,550
you need to nimble permission you need

652
00:25:11,700 --> 00:25:17,190
to disable this and it was using framing

653
00:25:14,550 --> 00:25:20,460
this obscure flag permission or

654
00:25:17,190 --> 00:25:22,410
protection system as a bug the fixed

655
00:25:20,460 --> 00:25:24,060
dimension here a fix in Android because

656
00:25:22,410 --> 00:25:27,420
nindo seven because then they would

657
00:25:24,060 --> 00:25:28,710
automatically hide all overlays but it's

658
00:25:27,420 --> 00:25:31,200
not a rancher bug is actually a

659
00:25:28,710 --> 00:25:32,990
protection mechanism being used but so

660
00:25:31,200 --> 00:25:35,880
what about all the other applications

661
00:25:32,990 --> 00:25:38,730
turns out that is still a widespread

662
00:25:35,880 --> 00:25:41,340
problem and apps don't really have a

663
00:25:38,730 --> 00:25:42,540
technical way to solve it so we try to

664
00:25:41,340 --> 00:25:43,830
check more targets

665
00:25:42,540 --> 00:25:45,750
turns out the Play Store was also

666
00:25:43,830 --> 00:25:48,449
vulnerable you can eject a click here

667
00:25:45,750 --> 00:25:49,800
you wait a little bit and then you ask

668
00:25:48,450 --> 00:25:52,620
the user to click again on the same

669
00:25:49,800 --> 00:25:54,240
position and that's gonna be the open

670
00:25:52,620 --> 00:25:56,699
app so you can install it and open with

671
00:25:54,240 --> 00:25:59,460
two clicks and then we check the Gmail

672
00:25:56,700 --> 00:26:02,400
with an intern you can create you know

673
00:25:59,460 --> 00:26:03,990
you know open up a compose message like

674
00:26:02,400 --> 00:26:06,030
this where you set the two on the

675
00:26:03,990 --> 00:26:07,980
subject the message and so adjusted

676
00:26:06,030 --> 00:26:11,550
jackin one click you can send arbitrary

677
00:26:07,980 --> 00:26:13,980
massamba for the user authenticates you

678
00:26:11,550 --> 00:26:15,120
can do long click click jackin if you

679
00:26:13,980 --> 00:26:18,510
convince the user to long click

680
00:26:15,120 --> 00:26:20,010
somewhere the token is actually copied

681
00:26:18,510 --> 00:26:22,500
in a clipboard and then you can get it

682
00:26:20,010 --> 00:26:24,090
similar things with you know Twitter

683
00:26:22,500 --> 00:26:26,280
Facebook it's all vulnerable Google

684
00:26:24,090 --> 00:26:30,720
Drive if you don't click on something I

685
00:26:26,280 --> 00:26:32,129
think he's gonna be share the the folder

686
00:26:30,720 --> 00:26:33,870
for example and he's going to copy the

687
00:26:32,130 --> 00:26:37,140
link on the clipboard which the malware

688
00:26:33,870 --> 00:26:40,919
can asses signal and what sabroso

689
00:26:37,140 --> 00:26:42,840
vulnerable with this signal the trick

690
00:26:40,920 --> 00:26:44,250
was that with a bunch of place we can go

691
00:26:42,840 --> 00:26:46,350
means a user to send

692
00:26:44,250 --> 00:26:48,750
message to an arbitral user which means

693
00:26:46,350 --> 00:26:51,300
an attacker could lick Europe telephone

694
00:26:48,750 --> 00:26:53,010
number we also found another attack that

695
00:26:51,300 --> 00:26:56,909
doesn't work anymore or basically we

696
00:26:53,010 --> 00:26:59,070
could initiate a pickup you know the cap

697
00:26:56,910 --> 00:27:01,170
proceeded on signal in previous version

698
00:26:59,070 --> 00:27:03,389
of signal this backup would be in clear

699
00:27:01,170 --> 00:27:05,790
unless the cap so by just ejecting a

700
00:27:03,390 --> 00:27:08,160
team two clicks were able to get all the

701
00:27:05,790 --> 00:27:11,190
plaintext messages telephone numbers and

702
00:27:08,160 --> 00:27:12,570
things like this signal goes matter and

703
00:27:11,190 --> 00:27:14,220
now what they do is to create this

704
00:27:12,570 --> 00:27:16,530
backup with the password and the

705
00:27:14,220 --> 00:27:18,690
password is displayed on the to the user

706
00:27:16,530 --> 00:27:22,620
once this backup is completely so it

707
00:27:18,690 --> 00:27:24,090
leases protective Google Chrome all the

708
00:27:22,620 --> 00:27:26,340
clickjacking protections we have for a

709
00:27:24,090 --> 00:27:28,800
web Google Chrome the Alpha lab of

710
00:27:26,340 --> 00:27:30,120
course they're still there look of

711
00:27:28,800 --> 00:27:31,649
security I don't want to pick names

712
00:27:30,120 --> 00:27:34,889
that's what we try but of course all the

713
00:27:31,650 --> 00:27:38,000
other apps are vulnerable as well so it

714
00:27:34,890 --> 00:27:40,170
turns out that the problem is again

715
00:27:38,000 --> 00:27:41,370
backward compatibility reasons they

716
00:27:40,170 --> 00:27:43,860
don't want to use these protections

717
00:27:41,370 --> 00:27:46,350
because they would screw a lot of people

718
00:27:43,860 --> 00:27:48,030
up and when we disclose these bugs to

719
00:27:46,350 --> 00:27:51,030
these vendors they actually apply it

720
00:27:48,030 --> 00:27:53,520
accordingly Twitter you know we try to

721
00:27:51,030 --> 00:27:55,590
think about this but we cannot do this

722
00:27:53,520 --> 00:27:58,110
because of your X issues you mentioned

723
00:27:55,590 --> 00:27:59,970
so we did our job so we tell them these

724
00:27:58,110 --> 00:28:02,070
are the bugs we also told them pay

725
00:27:59,970 --> 00:28:03,690
attention friends of ours try to deploy

726
00:28:02,070 --> 00:28:05,850
this with another big app and they

727
00:28:03,690 --> 00:28:07,890
couldn't for this UX issues so think

728
00:28:05,850 --> 00:28:10,709
about this and they agreed was not

729
00:28:07,890 --> 00:28:13,590
possible for them signal they told us

730
00:28:10,710 --> 00:28:15,510
the same without the actual effective

731
00:28:13,590 --> 00:28:15,929
mitigation you cannot we cannot do

732
00:28:15,510 --> 00:28:18,620
anything

733
00:28:15,930 --> 00:28:21,000
and so these bugs are left and protected

734
00:28:18,620 --> 00:28:22,530
Facebook whatsapp Instagram very similar

735
00:28:21,000 --> 00:28:24,450
replies like yo you know we have a

736
00:28:22,530 --> 00:28:27,120
thread model to consider and pros and

737
00:28:24,450 --> 00:28:28,740
cons and so forth and again all these

738
00:28:27,120 --> 00:28:30,959
guys are not patching this for backward

739
00:28:28,740 --> 00:28:33,210
compatibility concerns it is somehow an

740
00:28:30,960 --> 00:28:34,530
open problem we try to do our part so we

741
00:28:33,210 --> 00:28:37,350
published an academic paper where we

742
00:28:34,530 --> 00:28:38,790
outline how we would solve it the

743
00:28:37,350 --> 00:28:40,520
concept of three key areas to try to

744
00:28:38,790 --> 00:28:42,590
distinguish between

745
00:28:40,520 --> 00:28:44,490
[Music]

746
00:28:42,590 --> 00:28:46,350
malicious overlays like semitte

747
00:28:44,490 --> 00:28:48,450
responses are okay and maybe more opaque

748
00:28:46,350 --> 00:28:51,480
overlays but you know this requires

749
00:28:48,450 --> 00:28:52,800
framework modifications so we pitched

750
00:28:51,480 --> 00:28:53,680
this to Google I don't know what's gonna

751
00:28:52,800 --> 00:28:56,260
happen

752
00:28:53,680 --> 00:28:58,030
it makes sense that our refraining to

753
00:28:56,260 --> 00:28:59,680
actually the plot is because they will

754
00:28:58,030 --> 00:29:00,940
need to change out there they're

755
00:28:59,680 --> 00:29:04,330
entering procedure and things like this

756
00:29:00,940 --> 00:29:08,050
is not simple but I think it's consider

757
00:29:04,330 --> 00:29:09,820
another problem okay so the beginning of

758
00:29:08,050 --> 00:29:11,470
the presentation I try to say that these

759
00:29:09,820 --> 00:29:11,860
UI security bugs are not like the other

760
00:29:11,470 --> 00:29:14,200
ones

761
00:29:11,860 --> 00:29:16,030
if I find a buffer flow people are going

762
00:29:14,200 --> 00:29:19,210
to fix it fast with this box is a bit

763
00:29:16,030 --> 00:29:20,350
more complicated and I believe it's not

764
00:29:19,210 --> 00:29:23,140
really well understood

765
00:29:20,350 --> 00:29:25,060
for example obscure flag the bypass I've

766
00:29:23,140 --> 00:29:27,130
showed you is pretty simple you just

767
00:29:25,060 --> 00:29:28,629
hide everything except so I think we

768
00:29:27,130 --> 00:29:30,490
found it not because we're super smart

769
00:29:28,630 --> 00:29:33,610
but because nobody has told about this

770
00:29:30,490 --> 00:29:35,080
before we also found there is a bit of

771
00:29:33,610 --> 00:29:38,350
misleading documentation that was quite

772
00:29:35,080 --> 00:29:40,600
funny so we check the docs in the doc

773
00:29:38,350 --> 00:29:43,270
said you know this flag is gonna set be

774
00:29:40,600 --> 00:29:45,730
set to one if there is a motion event

775
00:29:43,270 --> 00:29:48,460
that is partially overly obscured this

776
00:29:45,730 --> 00:29:51,370
partly is I should lie and you know you

777
00:29:48,460 --> 00:29:54,490
can try to hide to cover a part of the

778
00:29:51,370 --> 00:29:56,800
ok button but as long as the click goes

779
00:29:54,490 --> 00:29:58,480
through there the the part that is not

780
00:29:56,800 --> 00:30:01,300
hidden then the flag is not triggered

781
00:29:58,480 --> 00:30:04,450
the funnest part that we had proof that

782
00:30:01,300 --> 00:30:06,850
Google knew about this by checking the

783
00:30:04,450 --> 00:30:08,350
source code there is another flag called

784
00:30:06,850 --> 00:30:11,679
flag windows partially obscured

785
00:30:08,350 --> 00:30:14,310
if you check the docs this top part is

786
00:30:11,680 --> 00:30:17,080
absolutely the same and the only differs

787
00:30:14,310 --> 00:30:19,510
unlike the other flag this is actually

788
00:30:17,080 --> 00:30:21,189
true funny part is not true in even in

789
00:30:19,510 --> 00:30:23,170
this case so I think this flag was never

790
00:30:21,190 --> 00:30:25,900
used and they just become very these are

791
00:30:23,170 --> 00:30:28,120
difficult problems and you know it's

792
00:30:25,900 --> 00:30:30,430
known thing internally but it's not easy

793
00:30:28,120 --> 00:30:31,780
to actually fix and again maybe it's

794
00:30:30,430 --> 00:30:33,910
actually easy from an algorithm

795
00:30:31,780 --> 00:30:36,610
perspective to fix this but I think will

796
00:30:33,910 --> 00:30:37,960
cause so many UI problems maybe about

797
00:30:36,610 --> 00:30:41,050
three performance problems and things

798
00:30:37,960 --> 00:30:45,250
like this that that's why probably we

799
00:30:41,050 --> 00:30:47,340
are still at this point I also found

800
00:30:45,250 --> 00:30:50,290
another trick about the obscure flag and

801
00:30:47,340 --> 00:30:52,240
before this I've had extremely proud so

802
00:30:50,290 --> 00:30:56,770
I think is pretty neat so I'm gonna show

803
00:30:52,240 --> 00:30:58,750
it today this is actually fixed with an

804
00:30:56,770 --> 00:31:01,389
attack that we call the invisible grid

805
00:30:58,750 --> 00:31:03,730
attack with this attack we could record

806
00:31:01,390 --> 00:31:05,020
all possible keys to keystrokes so we

807
00:31:03,730 --> 00:31:07,230
can record exactly what you're typing

808
00:31:05,020 --> 00:31:09,090
and it only relied on this

809
00:31:07,230 --> 00:31:10,140
I showed you if you have a CBD service

810
00:31:09,090 --> 00:31:12,330
his game already

811
00:31:10,140 --> 00:31:16,860
this otaku only worked with this Rondo

812
00:31:12,330 --> 00:31:19,379
the key point was to abuse some outs

813
00:31:16,860 --> 00:31:21,149
obscure flag in an interesting way the

814
00:31:19,380 --> 00:31:23,940
tag works like this imagine this is the

815
00:31:21,150 --> 00:31:24,990
phone lay down and then conceptually the

816
00:31:23,940 --> 00:31:27,540
attacker will create a number of

817
00:31:24,990 --> 00:31:29,900
overlays organized in this way one two

818
00:31:27,540 --> 00:31:33,240
three four one on top of each other ok

819
00:31:29,900 --> 00:31:36,030
good now these overlays are created

820
00:31:33,240 --> 00:31:38,190
invisible so once this duck is running

821
00:31:36,030 --> 00:31:39,899
you don't see them the clicks are past

822
00:31:38,190 --> 00:31:41,760
room so if you click on top of them

823
00:31:39,900 --> 00:31:43,760
everything works as expected because the

824
00:31:41,760 --> 00:31:47,040
click reaches what's on the bottom and

825
00:31:43,760 --> 00:31:50,730
we use this flag watch outside touch the

826
00:31:47,040 --> 00:31:53,399
dimension before which means that when

827
00:31:50,730 --> 00:31:54,840
the user clicks somewhere since they

828
00:31:53,400 --> 00:31:57,179
click does reach the militias up he

829
00:31:54,840 --> 00:31:59,159
reaches the victim upon on bottom all

830
00:31:57,179 --> 00:32:00,570
the clicks are considered outside so

831
00:31:59,160 --> 00:32:03,030
each should this overlay is going to

832
00:32:00,570 --> 00:32:05,010
receive an emotion event the coordinates

833
00:32:03,030 --> 00:32:06,870
are set to 0 0 so we don't know where

834
00:32:05,010 --> 00:32:10,620
the user clicked but you get a motion

835
00:32:06,870 --> 00:32:12,570
event ok and they go for the packets

836
00:32:10,620 --> 00:32:14,399
understand where the user clicked turns

837
00:32:12,570 --> 00:32:16,770
out the obscure flag is actually set

838
00:32:14,400 --> 00:32:18,390
accordingly and the algorithm somehow

839
00:32:16,770 --> 00:32:21,059
works in this way let's say the user

840
00:32:18,390 --> 00:32:23,400
click on number 1 the code computes the

841
00:32:21,059 --> 00:32:25,830
head of the impact point and then each

842
00:32:23,400 --> 00:32:27,630
relay compares the hate of itself with

843
00:32:25,830 --> 00:32:29,669
the impact point so for example one says

844
00:32:27,630 --> 00:32:33,300
impact point is basically myself so I'm

845
00:32:29,670 --> 00:32:35,610
fine and so not as good number 2 is

846
00:32:33,300 --> 00:32:37,530
gonna say the same or you know my hate

847
00:32:35,610 --> 00:32:40,439
is actually higher than the impact point

848
00:32:37,530 --> 00:32:43,678
so there is no problem for me & 2 & 3 &

849
00:32:40,440 --> 00:32:45,720
4 do the same however if you click here

850
00:32:43,679 --> 00:32:48,630
the impact point is actually going to be

851
00:32:45,720 --> 00:32:50,280
higher than the layer 1 so for layer 1

852
00:32:48,630 --> 00:32:51,450
is going to receive obscured while the

853
00:32:50,280 --> 00:32:53,160
other one is going to receive notice

854
00:32:51,450 --> 00:32:56,460
cure and I guess you understood the

855
00:32:53,160 --> 00:32:58,410
trick depending on where you click these

856
00:32:56,460 --> 00:33:00,179
4 motion events are going to contain a

857
00:32:58,410 --> 00:33:02,520
different patterns of this obscure flag

858
00:33:00,179 --> 00:33:04,530
and not and this is enough to understand

859
00:33:02,520 --> 00:33:06,540
where the user clicked so for each click

860
00:33:04,530 --> 00:33:08,129
you're gonna get and where the end

861
00:33:06,540 --> 00:33:10,020
motion events where n is the number of

862
00:33:08,130 --> 00:33:11,970
overlays and depending on the pattern

863
00:33:10,020 --> 00:33:15,540
again you can see ok the user click the

864
00:33:11,970 --> 00:33:17,429
order the beautiful part here is that we

865
00:33:15,540 --> 00:33:18,360
are using a security mechanism is a side

866
00:33:17,429 --> 00:33:20,520
channel

867
00:33:18,360 --> 00:33:21,870
and this was enough to basically

868
00:33:20,520 --> 00:33:24,240
understand where the user clicked of

869
00:33:21,870 --> 00:33:26,760
course to open eyes it you just create

870
00:33:24,240 --> 00:33:29,940
many overlays one on top of each key

871
00:33:26,760 --> 00:33:31,830
organized as a show before and during an

872
00:33:29,940 --> 00:33:33,510
attack of course this is all invisible

873
00:33:31,830 --> 00:33:35,429
so you can see anything and then you

874
00:33:33,510 --> 00:33:39,270
basically have a live stream of what the

875
00:33:35,430 --> 00:33:41,460
user is that this was patched so this

876
00:33:39,270 --> 00:33:44,430
one more categories like okay that's it

877
00:33:41,460 --> 00:33:47,430
we know how to patch it but I found it

878
00:33:44,430 --> 00:33:49,260
super interesting another story to

879
00:33:47,430 --> 00:33:52,320
convey that this UI security bugs are

880
00:33:49,260 --> 00:33:55,650
not it's not very very easy to you know

881
00:33:52,320 --> 00:33:57,810
get them patched is the following we you

882
00:33:55,650 --> 00:34:00,030
know told them told the Google guys you

883
00:33:57,810 --> 00:34:01,080
know on documentation there is written

884
00:34:00,030 --> 00:34:02,970
you should not be able to get the

885
00:34:01,080 --> 00:34:06,990
passwords but look at us we got all the

886
00:34:02,970 --> 00:34:09,540
passwords so the reply was one fix work

887
00:34:06,990 --> 00:34:12,150
as intended at which point I was a bit

888
00:34:09,540 --> 00:34:13,529
you know what's going on and then you

889
00:34:12,150 --> 00:34:15,770
know they changed their mind okay i

890
00:34:13,530 --> 00:34:18,150
severity and everything is fine

891
00:34:15,770 --> 00:34:20,460
fantastic and so I was very happy after

892
00:34:18,150 --> 00:34:23,070
a month they actually changed their mind

893
00:34:20,460 --> 00:34:24,900
and said he won't fixed because limiting

894
00:34:23,070 --> 00:34:28,200
the services would render the device

895
00:34:24,900 --> 00:34:29,940
unusable which for me is very surprising

896
00:34:28,199 --> 00:34:33,179
because they can admit that it was a bug

897
00:34:29,940 --> 00:34:35,040
but they cannot actually fix it so the

898
00:34:33,179 --> 00:34:36,870
label was this one fix work is intended

899
00:34:35,040 --> 00:34:38,880
so I was really upset you cannot tell me

900
00:34:36,870 --> 00:34:40,560
work is intended and so eventually I

901
00:34:38,880 --> 00:34:43,050
think they give up in the reply we will

902
00:34:40,560 --> 00:34:44,909
update the documentation the awesome

903
00:34:43,050 --> 00:34:47,820
part is that they did so kudos to them

904
00:34:44,909 --> 00:34:49,649
and I have here the link to them you

905
00:34:47,820 --> 00:34:51,060
know web archive whatever you can see

906
00:34:49,650 --> 00:34:54,810
there is a security not mentioning this

907
00:34:51,060 --> 00:34:56,130
and then he got silently dropped so it's

908
00:34:54,810 --> 00:34:58,380
an awesome instance of patch the

909
00:34:56,130 --> 00:35:00,000
documentation not the code I'm still

910
00:34:58,380 --> 00:35:03,960
waiting for my CV for the zero day in

911
00:35:00,000 --> 00:35:06,900
the docs and I don't hopes our last to

912
00:35:03,960 --> 00:35:08,970
die so we'll see what happens again this

913
00:35:06,900 --> 00:35:11,570
is a stupid story but it just to convey

914
00:35:08,970 --> 00:35:14,069
is not just finding a buffer overflow

915
00:35:11,570 --> 00:35:16,440
it's more complicated because these are

916
00:35:14,070 --> 00:35:19,500
not well understood and and there are

917
00:35:16,440 --> 00:35:20,760
problems like this okay so in the last

918
00:35:19,500 --> 00:35:26,220
part of the talk I would like to focus

919
00:35:20,760 --> 00:35:27,960
on more things on fishing the key

920
00:35:26,220 --> 00:35:30,000
problem that makes fishing we are

921
00:35:27,960 --> 00:35:31,810
interesting for mobile is the following

922
00:35:30,000 --> 00:35:34,030
check this up

923
00:35:31,810 --> 00:35:35,799
this is the original Facebook

924
00:35:34,030 --> 00:35:40,170
application asking you for username

925
00:35:35,800 --> 00:35:42,640
password or easy I don't know

926
00:35:40,170 --> 00:35:44,500
you have no idea to understand we have

927
00:35:42,640 --> 00:35:47,830
no clue to understand if this adjusting

928
00:35:44,500 --> 00:35:48,790
spoofed UI or if the real Facebook UI on

929
00:35:47,830 --> 00:35:50,319
the web we don't have this problem

930
00:35:48,790 --> 00:35:52,330
because the expert there's always a

931
00:35:50,320 --> 00:35:53,650
place to check for technolog and to

932
00:35:52,330 --> 00:35:56,350
check the domain name actually makes

933
00:35:53,650 --> 00:35:58,840
sense on the UI of mobile there is no

934
00:35:56,350 --> 00:36:00,069
space for this there is no DKI for

935
00:35:58,840 --> 00:36:02,470
package names there is nothing like this

936
00:36:00,070 --> 00:36:05,110
so the user is left wondering is this a

937
00:36:02,470 --> 00:36:06,310
real Facebook or not and this is the

938
00:36:05,110 --> 00:36:09,610
concept or problem that makes this

939
00:36:06,310 --> 00:36:11,680
interesting so a basic phishing attack

940
00:36:09,610 --> 00:36:13,210
on mobile would work like this let's say

941
00:36:11,680 --> 00:36:15,819
the user is opening the real Facebook

942
00:36:13,210 --> 00:36:18,550
application in the background that is

943
00:36:15,820 --> 00:36:20,170
the attacker tries to understand whether

944
00:36:18,550 --> 00:36:22,090
the user just opened the Facebook

945
00:36:20,170 --> 00:36:24,130
application so it would create for some

946
00:36:22,090 --> 00:36:26,110
proc get running tasks api's and things

947
00:36:24,130 --> 00:36:28,840
like this to understand he is the user

948
00:36:26,110 --> 00:36:32,200
just did you just pressed on the opening

949
00:36:28,840 --> 00:36:34,600
Facebook up and if that's the case the

950
00:36:32,200 --> 00:36:37,509
attacker would just pop on top and would

951
00:36:34,600 --> 00:36:39,759
just show is proof to Facebook join now

952
00:36:37,510 --> 00:36:42,160
once again these are attacks being found

953
00:36:39,760 --> 00:36:45,100
three four years ago some Google site

954
00:36:42,160 --> 00:36:46,600
what they did was to somehow try to find

955
00:36:45,100 --> 00:36:49,330
all these possible search channels and

956
00:36:46,600 --> 00:36:51,339
cut them so that now you malicious apps

957
00:36:49,330 --> 00:36:55,210
cannot really understand ad user just

958
00:36:51,340 --> 00:36:56,560
open something it's a harm race because

959
00:36:55,210 --> 00:36:58,240
you know you can have bugs where other

960
00:36:56,560 --> 00:37:00,850
API is expose this information but

961
00:36:58,240 --> 00:37:03,910
that's more or less how they fix it and

962
00:37:00,850 --> 00:37:06,040
then we had a research paper six months

963
00:37:03,910 --> 00:37:07,720
ago where we tried to explore the next

964
00:37:06,040 --> 00:37:09,400
step of mobile phishing try to

965
00:37:07,720 --> 00:37:11,520
understand how modern features can be

966
00:37:09,400 --> 00:37:13,810
baby are you abused in this context and

967
00:37:11,520 --> 00:37:16,330
so we started with mobile password

968
00:37:13,810 --> 00:37:18,040
managers and what we found was the

969
00:37:16,330 --> 00:37:20,410
forming they actually worked for mobile

970
00:37:18,040 --> 00:37:22,509
as well I use it on my laptop for my

971
00:37:20,410 --> 00:37:24,250
browser I'm not a mobile password

972
00:37:22,510 --> 00:37:25,960
manager user so I was a bit surprised

973
00:37:24,250 --> 00:37:27,820
they actually work very nicely as well

974
00:37:25,960 --> 00:37:30,190
if you open the Facebook up they

975
00:37:27,820 --> 00:37:33,090
actually would pop up in telling you a I

976
00:37:30,190 --> 00:37:35,650
know your password for facebook.com and

977
00:37:33,090 --> 00:37:38,440
if you click here I'm gonna you know how

978
00:37:35,650 --> 00:37:40,960
to fill your stuff for you and then we

979
00:37:38,440 --> 00:37:44,230
kept asking ourselves how can a password

980
00:37:40,960 --> 00:37:45,450
manager link Facebook on with an

981
00:37:44,230 --> 00:37:48,730
application on your phone

982
00:37:45,450 --> 00:37:50,350
on the browser it's actually an easy

983
00:37:48,730 --> 00:37:52,330
problem because if you have no

984
00:37:50,350 --> 00:37:54,009
credentials are born from the web if you

985
00:37:52,330 --> 00:37:55,960
have a user name password they are for

986
00:37:54,010 --> 00:37:58,390
facebook.com if you want a website the

987
00:37:55,960 --> 00:38:01,600
last password password manager can check

988
00:37:58,390 --> 00:38:03,460
is this LastPass calm website or mobile

989
00:38:01,600 --> 00:38:04,779
application you have package names you

990
00:38:03,460 --> 00:38:06,820
have different things but you don't have

991
00:38:04,780 --> 00:38:09,010
facebook.com so we found this

992
00:38:06,820 --> 00:38:10,110
interesting and we start asking how do

993
00:38:09,010 --> 00:38:12,760
they do this

994
00:38:10,110 --> 00:38:14,590
turns out password managers work with 3

995
00:38:12,760 --> 00:38:17,020
different technologies they choose one

996
00:38:14,590 --> 00:38:19,450
of these the first one is a CVD service

997
00:38:17,020 --> 00:38:21,400
the thing I mentioned about yes password

998
00:38:19,450 --> 00:38:23,049
manager are using this to automatically

999
00:38:21,400 --> 00:38:25,030
understand which happies on top and

1000
00:38:23,050 --> 00:38:26,500
feeling username password google

1001
00:38:25,030 --> 00:38:26,830
understood is the problem because in

1002
00:38:26,500 --> 00:38:28,690
theory

1003
00:38:26,830 --> 00:38:31,000
Sybilla service is used for people with

1004
00:38:28,690 --> 00:38:32,370
disability so they come up with a new

1005
00:38:31,000 --> 00:38:35,110
framework called auto-filled framework

1006
00:38:32,370 --> 00:38:36,990
it works similar way supports password

1007
00:38:35,110 --> 00:38:39,790
manager to do this kind of things and

1008
00:38:36,990 --> 00:38:42,490
there is another modification of the

1009
00:38:39,790 --> 00:38:44,529
framework modification or protocol where

1010
00:38:42,490 --> 00:38:46,330
you modified both the client and a

1011
00:38:44,530 --> 00:38:46,900
server and then they can exchange user

1012
00:38:46,330 --> 00:38:48,940
name/password

1013
00:38:46,900 --> 00:38:53,290
distance for i think you only look in

1014
00:38:48,940 --> 00:38:56,500
once or something like this it turns out

1015
00:38:53,290 --> 00:38:59,080
that for all the password manager we

1016
00:38:56,500 --> 00:39:01,510
found and for all these techniques the

1017
00:38:59,080 --> 00:39:04,630
package name is the starting point to

1018
00:39:01,510 --> 00:39:06,430
map and up to the website the package

1019
00:39:04,630 --> 00:39:08,860
name now if you know anything about

1020
00:39:06,430 --> 00:39:11,649
Android you should be terrified and

1021
00:39:08,860 --> 00:39:13,360
screaming about starting from the

1022
00:39:11,650 --> 00:39:15,010
package name because it's not like the

1023
00:39:13,360 --> 00:39:18,490
web package names are not supposed to be

1024
00:39:15,010 --> 00:39:20,770
trusted nobody's checking for them ok so

1025
00:39:18,490 --> 00:39:22,720
there is no relation between package and

1026
00:39:20,770 --> 00:39:25,300
sub package and some password manager

1027
00:39:22,720 --> 00:39:26,980
believe the world for example it's

1028
00:39:25,300 --> 00:39:29,410
actually quite easy to get confused book

1029
00:39:26,980 --> 00:39:33,610
evil application on the Play Store we

1030
00:39:29,410 --> 00:39:35,020
actually tried you know the only

1031
00:39:33,610 --> 00:39:36,340
constraints is that there cannot be two

1032
00:39:35,020 --> 00:39:38,410
apps with the same package name on the

1033
00:39:36,340 --> 00:39:41,380
store and on the device but other than

1034
00:39:38,410 --> 00:39:44,460
this is basically the world you know

1035
00:39:41,380 --> 00:39:46,600
Farwest ok you can do whatever you want

1036
00:39:44,460 --> 00:39:48,730
now we actually try to understand our

1037
00:39:46,600 --> 00:39:50,620
password measures try to get from some

1038
00:39:48,730 --> 00:39:53,980
package name to the target domain names

1039
00:39:50,620 --> 00:39:55,390
and okay we'll check - line turns out

1040
00:39:53,980 --> 00:39:57,680
they have some interesting heuristic

1041
00:39:55,390 --> 00:40:00,020
detect the package name the splitted

1042
00:39:57,680 --> 00:40:02,750
and then they check if these small

1043
00:40:00,020 --> 00:40:04,460
components are actually part of a target

1044
00:40:02,750 --> 00:40:06,289
domain name of credentials you know and

1045
00:40:04,460 --> 00:40:08,270
if yes they're going to suggest it to

1046
00:40:06,289 --> 00:40:09,559
you so you can have stuff like this is

1047
00:40:08,270 --> 00:40:11,779
gonna trigger a suggestion for

1048
00:40:09,559 --> 00:40:13,640
facebook.com/ or this is gonna trigger

1049
00:40:11,779 --> 00:40:15,250
suggestion for these three websites so

1050
00:40:13,640 --> 00:40:19,279
you can be as creative as you want

1051
00:40:15,250 --> 00:40:21,619
LastPass they fell for it so they were

1052
00:40:19,279 --> 00:40:24,289
checking the package name had some kind

1053
00:40:21,619 --> 00:40:25,670
of common suffix with the website so

1054
00:40:24,289 --> 00:40:27,890
there was actually they're getting

1055
00:40:25,670 --> 00:40:30,289
confessed book people flip it and see if

1056
00:40:27,890 --> 00:40:32,359
there was an Coleman suffix so this is

1057
00:40:30,289 --> 00:40:34,730
enough for an app to trigger out a

1058
00:40:32,359 --> 00:40:37,640
suggestion from LastPass about Facebook

1059
00:40:34,730 --> 00:40:39,770
on they also had a part where they would

1060
00:40:37,640 --> 00:40:41,240
crowdsource this mapping and so we were

1061
00:40:39,770 --> 00:40:43,730
able to download this from their

1062
00:40:41,240 --> 00:40:45,770
database and there were things like we

1063
00:40:43,730 --> 00:40:47,359
our package name as say to private IP

1064
00:40:45,770 --> 00:40:49,240
addresses and things like this so it

1065
00:40:47,359 --> 00:40:52,130
seems they were not very monitored

1066
00:40:49,240 --> 00:40:54,169
another example was keeper this is

1067
00:40:52,130 --> 00:40:56,569
awesome detect the package name they

1068
00:40:54,170 --> 00:41:00,109
build the URL the points to the Play

1069
00:40:56,569 --> 00:41:02,180
Store app page so this one then they

1070
00:41:00,109 --> 00:41:04,279
parse it and the parts that visit

1071
00:41:02,180 --> 00:41:06,589
website and yes they are treating this

1072
00:41:04,279 --> 00:41:08,539
as the main website associated to this

1073
00:41:06,589 --> 00:41:10,400
package name and of course if you have a

1074
00:41:08,539 --> 00:41:12,440
you know a Facebook page you would put

1075
00:41:10,400 --> 00:41:13,880
facebook.com whatever that's enough to

1076
00:41:12,440 --> 00:41:15,829
trigger out a suggestion for Facebook

1077
00:41:13,880 --> 00:41:17,119
and of course it's absolutely not

1078
00:41:15,829 --> 00:41:22,940
trusted you can put whatever you want

1079
00:41:17,119 --> 00:41:25,220
there so the next step we also found out

1080
00:41:22,940 --> 00:41:29,210
that you have username and password but

1081
00:41:25,220 --> 00:41:31,578
what about this you write your UI so

1082
00:41:29,210 --> 00:41:32,839
that the password is visible and yes it

1083
00:41:31,579 --> 00:41:34,789
works

1084
00:41:32,839 --> 00:41:36,710
you would have password managers out of

1085
00:41:34,789 --> 00:41:38,270
feeling also the hidden field how do you

1086
00:41:36,710 --> 00:41:39,470
hide it we try to come up with a number

1087
00:41:38,270 --> 00:41:41,960
of tricks and they all worked

1088
00:41:39,470 --> 00:41:43,430
you put very small area or the same

1089
00:41:41,960 --> 00:41:44,960
color foreground background you know you

1090
00:41:43,430 --> 00:41:47,990
make it transparent you actually set it

1091
00:41:44,960 --> 00:41:52,849
to gone this stuff is actually working

1092
00:41:47,990 --> 00:41:54,649
okay so this password manager stuff is

1093
00:41:52,849 --> 00:41:55,940
not that they you would open the app and

1094
00:41:54,650 --> 00:41:58,069
then automatically they steal your

1095
00:41:55,940 --> 00:42:00,200
username password the user still needs

1096
00:41:58,069 --> 00:42:01,730
to click but I believe that if you have

1097
00:42:00,200 --> 00:42:04,220
a malicious up and then the password

1098
00:42:01,730 --> 00:42:06,380
manager is full the user is more likely

1099
00:42:04,220 --> 00:42:07,970
to be you know fooled as well because

1100
00:42:06,380 --> 00:42:10,940
this password manager had a suggestion

1101
00:42:07,970 --> 00:42:11,770
somehow add legitimacy to the actual

1102
00:42:10,940 --> 00:42:13,690
fishing at

1103
00:42:11,770 --> 00:42:15,790
and again from the user perspective

1104
00:42:13,690 --> 00:42:18,490
there is no way to understand if he is

1105
00:42:15,790 --> 00:42:21,430
the real Facebook app or not another

1106
00:42:18,490 --> 00:42:23,259
technology we tried to check was Easton

1107
00:42:21,430 --> 00:42:25,600
tap for those of you that don't know

1108
00:42:23,260 --> 00:42:27,760
it's a new technology in Android you can

1109
00:42:25,600 --> 00:42:29,620
try apps out without actually installing

1110
00:42:27,760 --> 00:42:31,180
them so if you have a phone that

1111
00:42:29,620 --> 00:42:33,009
supports this you would have a try Now

1112
00:42:31,180 --> 00:42:34,359
button you click on it and the app

1113
00:42:33,010 --> 00:42:36,160
somehow or answering your phone without

1114
00:42:34,360 --> 00:42:39,190
the progress elation so that you can try

1115
00:42:36,160 --> 00:42:40,990
it out the flow works like this you can

1116
00:42:39,190 --> 00:42:43,210
also see eight Eastern tabs two URLs so

1117
00:42:40,990 --> 00:42:45,700
if you go to specific URL there is a way

1118
00:42:43,210 --> 00:42:47,800
to convey to the Placer a show them a

1119
00:42:45,700 --> 00:42:49,990
suggestion to install an astral

1120
00:42:47,800 --> 00:42:52,150
application so if you want the URL then

1121
00:42:49,990 --> 00:42:55,120
something like this will pop out and the

1122
00:42:52,150 --> 00:42:56,560
user place open up with two three

1123
00:42:55,120 --> 00:42:59,020
seconds and now you have an application

1124
00:42:56,560 --> 00:43:01,779
running on your phone this is relevant

1125
00:42:59,020 --> 00:43:04,690
for fishing because you are a full UI

1126
00:43:01,780 --> 00:43:06,040
control okay starting from a link so it

1127
00:43:04,690 --> 00:43:09,250
doesn't require a full installation or

1128
00:43:06,040 --> 00:43:10,660
application and so in the paper we show

1129
00:43:09,250 --> 00:43:13,270
that you can have an end-to-end phishing

1130
00:43:10,660 --> 00:43:15,279
attacks combined uses password manager

1131
00:43:13,270 --> 00:43:17,500
tricks where basically you go to some

1132
00:43:15,280 --> 00:43:19,690
you know fake website and we asked to

1133
00:43:17,500 --> 00:43:21,790
you know pay with people you click on

1134
00:43:19,690 --> 00:43:23,890
this this would trigger a prompt for

1135
00:43:21,790 --> 00:43:25,180
installing instant app you click on it

1136
00:43:23,890 --> 00:43:27,759
this of course is our malicious

1137
00:43:25,180 --> 00:43:29,470
application you wait two seconds and now

1138
00:43:27,760 --> 00:43:31,300
you're on the people up with LastPass or

1139
00:43:29,470 --> 00:43:33,040
other password measures suggesting you

1140
00:43:31,300 --> 00:43:34,900
to insert username password for la for

1141
00:43:33,040 --> 00:43:40,000
people and of course this was our app

1142
00:43:34,900 --> 00:43:42,190
not the real one okay turns out there is

1143
00:43:40,000 --> 00:43:45,130
a right way to implement this web and

1144
00:43:42,190 --> 00:43:47,860
package thing mapping it's called

1145
00:43:45,130 --> 00:43:50,050
digital as links this for Android iOS is

1146
00:43:47,860 --> 00:43:52,900
a similar technology where a website can

1147
00:43:50,050 --> 00:43:55,030
say apps signed with this certificate

1148
00:43:52,900 --> 00:43:56,740
and with this package names are okay for

1149
00:43:55,030 --> 00:43:59,320
example for Facebook there is a link

1150
00:43:56,740 --> 00:44:00,970
like this and if you go on this you're

1151
00:43:59,320 --> 00:44:02,920
gonna find something like this this is

1152
00:44:00,970 --> 00:44:06,669
my trusted package name and is my

1153
00:44:02,920 --> 00:44:08,950
trusted certificate turns out only 2% of

1154
00:44:06,670 --> 00:44:10,750
the names that we add actually use this

1155
00:44:08,950 --> 00:44:13,149
technology and that's why password

1156
00:44:10,750 --> 00:44:15,420
managers sunao cannot really do a better

1157
00:44:13,150 --> 00:44:17,830
job than what they do so of course we

1158
00:44:15,420 --> 00:44:19,450
communicated all the issues their fix is

1159
00:44:17,830 --> 00:44:22,060
to just say to the user we cannot verify

1160
00:44:19,450 --> 00:44:23,859
the trust link please pay attention okay

1161
00:44:22,060 --> 00:44:25,420
but they cannot do better than this

1162
00:44:23,860 --> 00:44:27,680
asana

1163
00:44:25,420 --> 00:44:31,100
all right and again there is a research

1164
00:44:27,680 --> 00:44:33,440
paper on this topic so I have a last

1165
00:44:31,100 --> 00:44:37,610
couple of slides on the future of your

1166
00:44:33,440 --> 00:44:39,350
security there are a bunch of open

1167
00:44:37,610 --> 00:44:40,910
problems that they find interesting so

1168
00:44:39,350 --> 00:44:43,700
you know understanding what can

1169
00:44:40,910 --> 00:44:45,319
application I'm interacting with or you

1170
00:44:43,700 --> 00:44:47,270
know how can an app understand if the

1171
00:44:45,320 --> 00:44:50,060
user click there intentionally or not or

1172
00:44:47,270 --> 00:44:51,560
you know preventing about the u.s. or

1173
00:44:50,060 --> 00:44:53,360
understanding whether the content is

1174
00:44:51,560 --> 00:44:55,910
actually trusted or what is shown and so

1175
00:44:53,360 --> 00:44:58,190
forth and some of these research areas

1176
00:44:55,910 --> 00:45:01,670
have been explored already and Google is

1177
00:44:58,190 --> 00:45:03,410
doing some some step forward for example

1178
00:45:01,670 --> 00:45:05,240
in latest Android there is an Indri

1179
00:45:03,410 --> 00:45:07,910
protective confirmation is a new API

1180
00:45:05,240 --> 00:45:09,169
it's awesome they basically from transom

1181
00:45:07,910 --> 00:45:11,120
they can render something to the screen

1182
00:45:09,170 --> 00:45:12,440
in a something to the user and then in

1183
00:45:11,120 --> 00:45:14,630
combination with trust zone and

1184
00:45:12,440 --> 00:45:17,090
attestation tokens they can prove to a

1185
00:45:14,630 --> 00:45:19,010
remote back-end that the user I've seen

1186
00:45:17,090 --> 00:45:21,320
this message this specific message and

1187
00:45:19,010 --> 00:45:23,450
at the user pressed ok through our board

1188
00:45:21,320 --> 00:45:25,190
button ok the deeds are a bit

1189
00:45:23,450 --> 00:45:27,710
complicated but I just want to point out

1190
00:45:25,190 --> 00:45:29,930
the recent kind of movement in the UI

1191
00:45:27,710 --> 00:45:34,100
related features and they have super

1192
00:45:29,930 --> 00:45:36,560
interesting and again is getting it's

1193
00:45:34,100 --> 00:45:38,480
always evolving another API they just

1194
00:45:36,560 --> 00:45:40,610
popped out there are just documentation

1195
00:45:38,480 --> 00:45:44,630
so now it's gonna be maybe in Android Q

1196
00:45:40,610 --> 00:45:48,170
is about identity credential so you with

1197
00:45:44,630 --> 00:45:51,530
this API people could support the usage

1198
00:45:48,170 --> 00:45:53,120
of mobile devices as trusted driver

1199
00:45:51,530 --> 00:45:56,030
licenses or passports and things like

1200
00:45:53,120 --> 00:45:58,370
this again they combine trust John and

1201
00:45:56,030 --> 00:46:00,050
attestation tokens and things like this

1202
00:45:58,370 --> 00:46:01,940
so cryptography signatures and things

1203
00:46:00,050 --> 00:46:03,650
like this and you know I think this is

1204
00:46:01,940 --> 00:46:08,930
just the beginning and I'm super excited

1205
00:46:03,650 --> 00:46:10,870
about this last point I want to make is

1206
00:46:08,930 --> 00:46:12,950
that even the rules have changed I

1207
00:46:10,870 --> 00:46:16,730
mentioned before that this R on top

1208
00:46:12,950 --> 00:46:19,069
permission is or was automatically

1209
00:46:16,730 --> 00:46:20,480
granted obligations for sure thing is

1210
00:46:19,070 --> 00:46:21,740
going to be always granted to big

1211
00:46:20,480 --> 00:46:23,960
applications I don't know if something

1212
00:46:21,740 --> 00:46:25,459
is gonna change with the small ones but

1213
00:46:23,960 --> 00:46:28,670
again Google is trying to take actions

1214
00:46:25,460 --> 00:46:30,470
on this permission abuse and another

1215
00:46:28,670 --> 00:46:33,110
interesting point the bread I think two

1216
00:46:30,470 --> 00:46:35,450
days ago is that maybe in Endre cube it

1217
00:46:33,110 --> 00:46:38,330
could be that apps cannot just pop out

1218
00:46:35,450 --> 00:46:39,950
from the background ok and if this is

1219
00:46:38,330 --> 00:46:41,660
is gonna have great impact against ad

1220
00:46:39,950 --> 00:46:43,160
war because you cannot just stay in the

1221
00:46:41,660 --> 00:46:44,839
background and wait and then pop out

1222
00:46:43,160 --> 00:46:45,259
advertisement or even the phishing

1223
00:46:44,840 --> 00:46:47,000
attacks

1224
00:46:45,260 --> 00:46:48,980
I mentioned the ones that stayed around

1225
00:46:47,000 --> 00:46:50,300
and check for said channels they cannot

1226
00:46:48,980 --> 00:46:53,690
just from background to create an

1227
00:46:50,300 --> 00:46:55,070
activity and get new I control okay so

1228
00:46:53,690 --> 00:46:57,770
now it's rumor I think I've seen only

1229
00:46:55,070 --> 00:46:59,780
one small article on the topic but you

1230
00:46:57,770 --> 00:47:03,470
know there is some kind of evolution

1231
00:46:59,780 --> 00:47:05,120
even in these things all right I was

1232
00:47:03,470 --> 00:47:06,200
like to acknowledge my students work

1233
00:47:05,120 --> 00:47:07,580
with me on these topics

1234
00:47:06,200 --> 00:47:11,180
and the security team they are awesome

1235
00:47:07,580 --> 00:47:13,130
and all the developers of the password

1236
00:47:11,180 --> 00:47:15,950
measures their replies were always super

1237
00:47:13,130 --> 00:47:19,070
professional and timely and so we're

1238
00:47:15,950 --> 00:47:20,359
very happy to be working with them just

1239
00:47:19,070 --> 00:47:22,790
some links for the papers I'm gonna

1240
00:47:20,360 --> 00:47:25,520
upload the slides later on so you can

1241
00:47:22,790 --> 00:47:27,920
bring them and that's about it

1242
00:47:25,520 --> 00:47:30,080
stay tuned for this war game style stuff

1243
00:47:27,920 --> 00:47:31,610
for mobile security and I think I'm done

1244
00:47:30,080 --> 00:47:32,000
thank you very much

1245
00:47:31,610 --> 00:47:36,730
[Applause]

1246
00:47:32,000 --> 00:47:36,730
[Music]

1247
00:47:37,799 --> 00:47:40,990
Thank You Jarek for your interesting

1248
00:47:40,359 --> 00:47:43,210
talk

1249
00:47:40,990 --> 00:47:56,019
is there any question we just have time

1250
00:47:43,210 --> 00:47:56,890
for one or two maybe yes thank you for

1251
00:47:56,019 --> 00:47:59,049
the very interesting talk

1252
00:47:56,890 --> 00:48:02,319
what was the fix freely invisible grid

1253
00:47:59,049 --> 00:48:05,230
problem oh I think they stopped

1254
00:48:02,319 --> 00:48:07,450
propagating the obscured flag flag for

1255
00:48:05,230 --> 00:48:09,249
this motion outside events because if

1256
00:48:07,450 --> 00:48:10,839
you are protecting yourself the clique

1257
00:48:09,249 --> 00:48:12,819
would need to land on your application

1258
00:48:10,839 --> 00:48:17,430
and this motion outside is only four

1259
00:48:12,819 --> 00:48:17,430
klicks to that van outside thank you

1260
00:48:23,700 --> 00:48:28,930
hello thanks for the interesting talk do

1261
00:48:26,589 --> 00:48:32,769
you know if this problem also happens on

1262
00:48:28,930 --> 00:48:35,109
other mobile platforms like iOS or -

1263
00:48:32,769 --> 00:48:37,569
thinning is no because this drone top or

1264
00:48:35,109 --> 00:48:39,700
the CBD service - tanning is that there

1265
00:48:37,569 --> 00:48:41,200
are system level permissions so I think

1266
00:48:39,700 --> 00:48:44,319
third-party apps cannot even get them

1267
00:48:41,200 --> 00:48:46,180
and the basis for these attacks is this

1268
00:48:44,319 --> 00:48:47,680
kind of abusing these permissions I'm

1269
00:48:46,180 --> 00:48:49,868
not sure about the popping up from the

1270
00:48:47,680 --> 00:48:52,299
ground but I'm pretty sure you cannot do

1271
00:48:49,869 --> 00:48:54,190
this I'm not the iOS person but there is

1272
00:48:52,299 --> 00:48:56,589
a talk from a nice guy later on today so

1273
00:48:54,190 --> 00:49:00,390
you should bug him with this question so

1274
00:48:56,589 --> 00:49:13,839
that I also don't think thank you yeah

1275
00:49:00,390 --> 00:49:17,680
last one I wishes of you are flattening

1276
00:49:13,839 --> 00:49:19,989
applications if the application also

1277
00:49:17,680 --> 00:49:21,819
received information how many percent of

1278
00:49:19,989 --> 00:49:23,710
the screen is covered because in this

1279
00:49:21,819 --> 00:49:26,349
case application could for example only

1280
00:49:23,710 --> 00:49:30,150
allow something covering everything or

1281
00:49:26,349 --> 00:49:32,410
maybe less that's a good point

1282
00:49:30,150 --> 00:49:34,150
maybe you could do this I think it's a

1283
00:49:32,410 --> 00:49:35,950
we are for Google because they would

1284
00:49:34,150 --> 00:49:37,150
need to disclose more information to the

1285
00:49:35,950 --> 00:49:39,399
party apps and you never know how they

1286
00:49:37,150 --> 00:49:41,710
can be abused unfortunately matrix like

1287
00:49:39,400 --> 00:49:43,420
you know if the 50% of the screen is

1288
00:49:41,710 --> 00:49:45,249
uncovered then you're fine is not enough

1289
00:49:43,420 --> 00:49:47,200
because the trick would be that you know

1290
00:49:45,249 --> 00:49:49,240
for sending weird emails you can just

1291
00:49:47,200 --> 00:49:51,549
cover the actual message so you

1292
00:49:49,240 --> 00:49:53,229
like few peaks and ensue in attack

1293
00:49:51,550 --> 00:49:55,150
against the play store is you have the

1294
00:49:53,230 --> 00:49:56,440
price you can modify only few pixels so

1295
00:49:55,150 --> 00:49:59,160
that the price changed and still this

1296
00:49:56,440 --> 00:50:01,600
attack works the two we tried to add

1297
00:49:59,160 --> 00:50:04,299
that we discuss discuss in the paper

1298
00:50:01,600 --> 00:50:06,009
tries to every stick to say there are

1299
00:50:04,300 --> 00:50:08,230
some Peaks are modified in not uniform

1300
00:50:06,010 --> 00:50:13,150
way and that's how we think we can

1301
00:50:08,230 --> 00:50:17,400
address this yeah okay I think time is

1302
00:50:13,150 --> 00:50:17,400
out alright thanks a lot guys

