1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:13,610 --> 00:00:18,869
okay so good money run thank you for

3
00:00:16,079 --> 00:00:20,400
Halloween yeah I'm Allison Jesse and we

4
00:00:18,869 --> 00:00:23,189
stabbing a pair ago we are going to

5
00:00:20,400 --> 00:00:26,519
present you the rock we've done on Idol

6
00:00:23,189 --> 00:00:28,529
for an io5 DMC we've done this work with

7
00:00:26,519 --> 00:00:31,198
the drugs Annie who could not be there

8
00:00:28,529 --> 00:00:33,360
today what we are going to present you

9
00:00:31,199 --> 00:00:36,390
today is kind of a summary of all the

10
00:00:33,360 --> 00:00:38,190
rock we've done on this subject on

11
00:00:36,390 --> 00:00:40,379
something like one year not full-time

12
00:00:38,190 --> 00:00:44,849
obviously but still it's the significant

13
00:00:40,379 --> 00:00:47,309
defaults so to introduce the subject DM

14
00:00:44,850 --> 00:00:50,309
C DM C stands for baseball management

15
00:00:47,309 --> 00:00:52,050
controller and it's just two features

16
00:00:50,309 --> 00:00:54,870
that allows you to manage your server

17
00:00:52,050 --> 00:00:57,239
remotely so you can fire on / check the

18
00:00:54,870 --> 00:00:59,010
health of your hardware of the operating

19
00:00:57,239 --> 00:01:01,890
system as well I'll check temperatures

20
00:00:59,010 --> 00:01:04,739
in like that and sometimes of course we

21
00:01:01,890 --> 00:01:07,380
get can get some remote console and this

22
00:01:04,739 --> 00:01:10,289
kind of stuff something to keep in mind

23
00:01:07,380 --> 00:01:12,119
is that BMC actually it's implemented

24
00:01:10,289 --> 00:01:15,899
has an adware feature you have a

25
00:01:12,119 --> 00:01:18,420
dedicated chip on the most abroad audio

26
00:01:15,899 --> 00:01:21,330
server on the left you have I do four

27
00:01:18,420 --> 00:01:24,840
hundred right I do five chip so it's

28
00:01:21,330 --> 00:01:26,580
directly integrated on the mobile we are

29
00:01:24,840 --> 00:01:28,470
going to talk about idle integrated

30
00:01:26,580 --> 00:01:31,890
lights-out study it's a BMC technology

31
00:01:28,470 --> 00:01:34,200
from great pakya HPE you can find the

32
00:01:31,890 --> 00:01:36,300
same exact same technology from

33
00:01:34,200 --> 00:01:39,479
different modules for example Dell as I

34
00:01:36,300 --> 00:01:43,069
drag you can find Super Micro enable mmm

35
00:01:39,479 --> 00:01:43,069
and singer and so on

36
00:01:43,440 --> 00:01:47,429
yeah it's very important to keep in mind

37
00:01:45,509 --> 00:01:50,190
that it's very a standard and system

38
00:01:47,429 --> 00:01:53,910
running alongside your main CPUs and

39
00:01:50,190 --> 00:01:55,640
your main operating system for idle chip

40
00:01:53,910 --> 00:01:59,130
it has a dedicated ARM processor

41
00:01:55,640 --> 00:02:01,560
dedicated non-flat shivakasi DRAM also

42
00:01:59,130 --> 00:02:03,539
dedicated network interface such very

43
00:02:01,560 --> 00:02:05,759
important and of course there is a full

44
00:02:03,539 --> 00:02:08,489
operating system and application image

45
00:02:05,759 --> 00:02:10,378
that runs as soon as your server is

46
00:02:08,489 --> 00:02:13,050
plugged in as soon as it is powered off

47
00:02:10,378 --> 00:02:16,829
even if your main operating system Linux

48
00:02:13,050 --> 00:02:19,150
or Windows is shut down the aisle o

49
00:02:16,830 --> 00:02:21,459
will be running

50
00:02:19,150 --> 00:02:23,590
and something importante we thought cats

51
00:02:21,459 --> 00:02:25,599
Hanno's this torque is there is a

52
00:02:23,590 --> 00:02:30,459
silicon root of trust introduced with a

53
00:02:25,599 --> 00:02:33,159
low five systems why did we start this

54
00:02:30,459 --> 00:02:35,709
study at first friars actually we were

55
00:02:33,159 --> 00:02:38,108
kind of restricted because when we found

56
00:02:35,709 --> 00:02:40,030
I know systems in during pen test or

57
00:02:38,109 --> 00:02:42,519
BIOS engagements we couldn't do much

58
00:02:40,030 --> 00:02:44,230
about it actually even if we manage some

59
00:02:42,519 --> 00:02:47,739
way to get I'll open ourselves we can

60
00:02:44,230 --> 00:02:49,659
excel system but what we could do a once

61
00:02:47,739 --> 00:02:53,349
ready was to reboot the system remotely

62
00:02:49,659 --> 00:02:55,120
with Kusum I saw another system and try

63
00:02:53,349 --> 00:02:57,849
to access a drive if it was not

64
00:02:55,120 --> 00:02:59,919
encrypted but of course it is

65
00:02:57,849 --> 00:03:03,159
noisy so you won't do this rally in

66
00:02:59,919 --> 00:03:05,709
production and there was not much things

67
00:03:03,159 --> 00:03:08,948
we could do there was known weaknesses

68
00:03:05,709 --> 00:03:11,859
on IP any protocol the famous sigh

69
00:03:08,949 --> 00:03:14,919
Frisell on v1 of the protocol which

70
00:03:11,859 --> 00:03:18,159
basically is a bypass and there are

71
00:03:14,919 --> 00:03:21,609
still the kind of weakness kind of

72
00:03:18,159 --> 00:03:23,798
weakness on IP mev - which sends you a

73
00:03:21,609 --> 00:03:26,859
hash of the password as a challenge when

74
00:03:23,799 --> 00:03:28,810
you try to account with with a server so

75
00:03:26,859 --> 00:03:32,019
that's what else was was that was the

76
00:03:28,810 --> 00:03:34,689
state of the study around this system

77
00:03:32,019 --> 00:03:36,340
when we started and yeah it was kind of

78
00:03:34,689 --> 00:03:39,400
unsatisfying we wanted to know if for

79
00:03:36,340 --> 00:03:42,909
example if we could reach the host the

80
00:03:39,400 --> 00:03:45,220
main server from a compromised idle but

81
00:03:42,909 --> 00:03:47,739
also on the other side if we can try to

82
00:03:45,220 --> 00:03:50,199
attack what was attacks of us from the

83
00:03:47,739 --> 00:03:52,449
us to attack the i/o systems that's why

84
00:03:50,199 --> 00:03:55,389
we started what we call a deep dive

85
00:03:52,449 --> 00:03:57,790
evaluation we invest some important

86
00:03:55,389 --> 00:04:00,759
amount of time more than 200 days for

87
00:03:57,790 --> 00:04:02,228
the three of us - yeah to build a

88
00:04:00,759 --> 00:04:04,208
detailed cartography of the tax office

89
00:04:02,229 --> 00:04:06,909
both from the outside and from the

90
00:04:04,209 --> 00:04:08,169
administration side we found many

91
00:04:06,909 --> 00:04:10,209
vulnerabilities that we will talk about

92
00:04:08,169 --> 00:04:11,620
during this slide and something

93
00:04:10,209 --> 00:04:14,019
important we identify a new expedition

94
00:04:11,620 --> 00:04:17,259
technique using game access from the ILO

95
00:04:14,019 --> 00:04:17,949
system to attack the Hoth system and the

96
00:04:17,259 --> 00:04:20,139
other way around

97
00:04:17,949 --> 00:04:23,590
of course we had to develop some tooling

98
00:04:20,139 --> 00:04:25,419
to be able to manipulate from rare and

99
00:04:23,590 --> 00:04:31,330
often them and a reverse concerning gem

100
00:04:25,419 --> 00:04:32,099
of course there has been lots of light

101
00:04:31,330 --> 00:04:36,030
put

102
00:04:32,100 --> 00:04:39,000
BMC subject in 2018 the team from

103
00:04:36,030 --> 00:04:42,659
Eclipse shamrock tonsai Super Micro guys

104
00:04:39,000 --> 00:04:45,920
from human he on a idrac and of course

105
00:04:42,660 --> 00:04:48,060
we have been publishing on other systems

106
00:04:45,920 --> 00:04:50,760
so interesting to see that the subject

107
00:04:48,060 --> 00:04:53,370
come all this rejection at the same time

108
00:04:50,760 --> 00:04:57,870
so no Fabia will talk you about the

109
00:04:53,370 --> 00:05:01,410
first step we took to attack Xylo hi

110
00:04:57,870 --> 00:05:04,590
everyone so this study was performed in

111
00:05:01,410 --> 00:05:07,260
three part and I will start telling you

112
00:05:04,590 --> 00:05:09,510
about the two first paths so first one

113
00:05:07,260 --> 00:05:12,060
was how can we attack the host operating

114
00:05:09,510 --> 00:05:15,120
system from the ILO and the second one

115
00:05:12,060 --> 00:05:19,560
was to check if we can backdoor an ILO

116
00:05:15,120 --> 00:05:21,750
system so how did we start the study we

117
00:05:19,560 --> 00:05:25,020
started by recovering a firmware update

118
00:05:21,750 --> 00:05:27,840
for for Eylau we studied the file format

119
00:05:25,020 --> 00:05:31,080
to understand how it was how it was

120
00:05:27,840 --> 00:05:32,820
triggered we extracted all the

121
00:05:31,080 --> 00:05:34,830
components of the firmware so there's a

122
00:05:32,820 --> 00:05:38,270
bootloader channel and a user and image

123
00:05:34,830 --> 00:05:42,419
containing values userland processes

124
00:05:38,270 --> 00:05:44,729
also virus signatures we started to

125
00:05:42,420 --> 00:05:46,710
analyze the channel so the operating

126
00:05:44,730 --> 00:05:48,390
system running on ILO is integrity which

127
00:05:46,710 --> 00:05:51,859
is a real-time operating system

128
00:05:48,390 --> 00:05:55,140
developed by our green hills

129
00:05:51,860 --> 00:05:57,480
finally we understood the memory layout

130
00:05:55,140 --> 00:06:00,360
of the different userland tasks so a

131
00:05:57,480 --> 00:06:03,390
task in a real-time operating system is

132
00:06:00,360 --> 00:06:06,150
a kind of process on a normal operating

133
00:06:03,390 --> 00:06:08,810
system and we develop values loaders for

134
00:06:06,150 --> 00:06:12,030
either Pro so you can know just a load

135
00:06:08,810 --> 00:06:15,270
an I load tasks directly in idea to

136
00:06:12,030 --> 00:06:17,429
studied all the tooling we developed is

137
00:06:15,270 --> 00:06:19,530
now available on the Airbus github

138
00:06:17,430 --> 00:06:22,290
repository that you can send the screen

139
00:06:19,530 --> 00:06:26,789
so you can reproduce all this work at

140
00:06:22,290 --> 00:06:29,550
home with with your own Island after

141
00:06:26,790 --> 00:06:31,980
understanding how the firmware was was

142
00:06:29,550 --> 00:06:34,920
structured we could start to analyze the

143
00:06:31,980 --> 00:06:37,950
attack surface so there are 49 userland

144
00:06:34,920 --> 00:06:41,040
tasks running on ILO and some exposed

145
00:06:37,950 --> 00:06:43,800
endpoints on the network the network

146
00:06:41,040 --> 00:06:44,860
interface so there's an ssh server a web

147
00:06:43,800 --> 00:06:49,900
server

148
00:06:44,860 --> 00:06:52,690
some some rest api's the Isle of virtual

149
00:06:49,900 --> 00:06:56,948
media port which is a port used to

150
00:06:52,690 --> 00:06:58,139
simulate the presence of a cd-rom on the

151
00:06:56,949 --> 00:07:01,960
server

152
00:06:58,139 --> 00:07:03,550
ipmi as an MP UPnP etc and some of these

153
00:07:01,960 --> 00:07:05,289
components are fully are made for

154
00:07:03,550 --> 00:07:08,139
example the web server and the SSH

155
00:07:05,289 --> 00:07:13,240
server are fully developed by HP and the

156
00:07:08,139 --> 00:07:15,159
the do not rely on open-source bricks so

157
00:07:13,240 --> 00:07:17,139
this is quite interesting and we started

158
00:07:15,159 --> 00:07:19,900
to look at the web server to see if we

159
00:07:17,139 --> 00:07:25,539
can find some vulnerabilities in it and

160
00:07:19,900 --> 00:07:30,638
indeed we found one so this is a CV we

161
00:07:25,539 --> 00:07:32,639
found in in 2017 it is a pre

162
00:07:30,639 --> 00:07:34,780
authentication remote code execution and

163
00:07:32,639 --> 00:07:37,210
authentication bypass on the web server

164
00:07:34,780 --> 00:07:41,679
component it has already been fixed by

165
00:07:37,210 --> 00:07:44,109
HP in a version 2.53 of HP ILO cap I

166
00:07:41,680 --> 00:07:48,039
look for sorry

167
00:07:44,110 --> 00:07:50,469
so how can it be exploited well if if an

168
00:07:48,039 --> 00:07:53,560
attacker as a foothold in the LAN or in

169
00:07:50,469 --> 00:07:55,659
the DMZ and found an ID lawful system

170
00:07:53,560 --> 00:07:57,849
with a web server running it can just

171
00:07:55,659 --> 00:08:00,940
exploit it to gain remote code execution

172
00:07:57,849 --> 00:08:03,729
on the under ILO and then try to pivot

173
00:08:00,940 --> 00:08:05,229
to compromise maybe other AI laws or to

174
00:08:03,729 --> 00:08:07,599
try to rebounds on the host operating

175
00:08:05,229 --> 00:08:10,930
system we will see later how it can be

176
00:08:07,599 --> 00:08:13,120
done for some technical details it's

177
00:08:10,930 --> 00:08:16,569
just a simple buffer overflow trigger

178
00:08:13,120 --> 00:08:18,550
about pre authentication it's just a

179
00:08:16,569 --> 00:08:21,219
buffer overflow in the HTTP connection

180
00:08:18,550 --> 00:08:23,409
header so you just send a connection

181
00:08:21,219 --> 00:08:26,080
header with more than 16 characters and

182
00:08:23,409 --> 00:08:28,900
you triggers a buffer overflow for the

183
00:08:26,080 --> 00:08:31,628
technical details you can overflow a

184
00:08:28,900 --> 00:08:35,919
static buffer in the HTTP connection

185
00:08:31,629 --> 00:08:39,190
object and with this overflow you can

186
00:08:35,919 --> 00:08:42,968
either overwrite a boolean we call the

187
00:08:39,190 --> 00:08:44,649
local connection and if you override

188
00:08:42,969 --> 00:08:47,110
this boolean you can simply bypass

189
00:08:44,649 --> 00:08:49,779
authentication and if you don't crash

190
00:08:47,110 --> 00:08:51,459
the web server etc you just have the

191
00:08:49,779 --> 00:08:53,350
authentication bypass or you can try to

192
00:08:51,459 --> 00:08:56,229
override the virtual table of the object

193
00:08:53,350 --> 00:08:57,670
to gain remote code execution which is

194
00:08:56,230 --> 00:09:00,910
made easier by

195
00:08:57,670 --> 00:09:06,670
fact that there's no a SLR or NX on an

196
00:09:00,910 --> 00:09:08,920
idol for so when we gain remote code

197
00:09:06,670 --> 00:09:11,439
execution on I'll oh we wanted to see

198
00:09:08,920 --> 00:09:13,510
how we can rebound on the host so we

199
00:09:11,440 --> 00:09:15,760
started to reverse another task which is

200
00:09:13,510 --> 00:09:17,830
the channel interface which is a task to

201
00:09:15,760 --> 00:09:21,130
communicate with the host and we found

202
00:09:17,830 --> 00:09:26,040
that there were mentions of whe recalls

203
00:09:21,130 --> 00:09:29,260
passing which is a Windows hardware

204
00:09:26,040 --> 00:09:31,540
architecture so it means that the chief

205
00:09:29,260 --> 00:09:35,290
was able to reach the austere purity

206
00:09:31,540 --> 00:09:37,660
system Ram so we studied how he can it

207
00:09:35,290 --> 00:09:40,780
can be done and we reproduced it in a

208
00:09:37,660 --> 00:09:42,640
inertial code and by exploiting the

209
00:09:40,780 --> 00:09:46,810
variable the vulnerability in the

210
00:09:42,640 --> 00:09:50,920
webserver we were able to access the the

211
00:09:46,810 --> 00:09:52,900
hosts main memory you can find more

212
00:09:50,920 --> 00:09:57,270
details on all this all this stuff on

213
00:09:52,900 --> 00:10:01,990
the on the repository so quick demo to

214
00:09:57,270 --> 00:10:04,449
illustrate this we plan to to to

215
00:10:01,990 --> 00:10:07,810
compromise an up-to-date line X running

216
00:10:04,450 --> 00:10:09,460
on the DHCP server so we will use the

217
00:10:07,810 --> 00:10:12,160
vulnerability in the web server to

218
00:10:09,460 --> 00:10:14,680
access the host the host memory we will

219
00:10:12,160 --> 00:10:16,810
dump the Linux kernel in memory we will

220
00:10:14,680 --> 00:10:19,180
do some recon to find some interesting

221
00:10:16,810 --> 00:10:20,920
symbols in it and then replace some I

222
00:10:19,180 --> 00:10:23,170
news from change the channel I judge

223
00:10:20,920 --> 00:10:26,439
this is called able to run shellcode and

224
00:10:23,170 --> 00:10:33,130
then publish on the line X so let's see

225
00:10:26,440 --> 00:10:35,110
how we can do it so here on the left you

226
00:10:33,130 --> 00:10:37,600
have the the attacker and on the right

227
00:10:35,110 --> 00:10:40,120
this is the Linux server running on an

228
00:10:37,600 --> 00:10:43,960
HP server so as you can see there's

229
00:10:40,120 --> 00:10:47,140
nothing we're listening on the under

230
00:10:43,960 --> 00:10:49,180
Network for now and the attacker tries

231
00:10:47,140 --> 00:10:53,199
to connect to a specific protein count

232
00:10:49,180 --> 00:10:55,209
so first we will dump the memory of the

233
00:10:53,200 --> 00:10:58,030
Linux kernel so we will jump

234
00:10:55,210 --> 00:11:01,720
approximately 16 megabytes of memory to

235
00:10:58,030 --> 00:11:04,990
to have the volkl image so we can find

236
00:11:01,720 --> 00:11:09,250
some some symbols in it so what it takes

237
00:11:04,990 --> 00:11:12,149
it takes some times so know that we

238
00:11:09,250 --> 00:11:16,290
the damp we will search for some symbols

239
00:11:12,149 --> 00:11:18,490
for example some code we can overwrite

240
00:11:16,290 --> 00:11:21,969
which is not used in the Linux channel

241
00:11:18,490 --> 00:11:27,670
so we take the cellulose il pot handling

242
00:11:21,970 --> 00:11:34,089
code we will then rewrite this code with

243
00:11:27,670 --> 00:11:35,920
one of our cell codes so as you can see

244
00:11:34,089 --> 00:11:38,350
the simple is quite simple we just want

245
00:11:35,920 --> 00:11:41,110
to execute a net cut listening on a port

246
00:11:38,350 --> 00:11:44,589
popping a pin wash and finally we will

247
00:11:41,110 --> 00:11:47,620
patch the Cisco table to patch the read

248
00:11:44,589 --> 00:11:49,750
the Cisco entry so that as soon as read

249
00:11:47,620 --> 00:11:51,360
is called our cell code is executed and

250
00:11:49,750 --> 00:11:53,470
if we have a look at the server now

251
00:11:51,360 --> 00:11:56,889
there's something listening on the port

252
00:11:53,470 --> 00:12:05,670
and of course the attacker can connect

253
00:11:56,889 --> 00:12:09,189
and gain the root shell on the server so

254
00:12:05,670 --> 00:12:12,160
know that we've we've proved that we

255
00:12:09,189 --> 00:12:13,269
have access to two we can gain access to

256
00:12:12,160 --> 00:12:16,269
the house from I low

257
00:12:13,269 --> 00:12:19,000
we want it to go to go further

258
00:12:16,269 --> 00:12:21,850
one other thing interesting to note I

259
00:12:19,000 --> 00:12:24,730
was telling you earlier that the web

260
00:12:21,850 --> 00:12:27,430
server and the SSH server were home made

261
00:12:24,730 --> 00:12:29,230
by HP so while a friend of us found

262
00:12:27,430 --> 00:12:32,229
another one everybody this time in the

263
00:12:29,230 --> 00:12:34,750
SSH server so it's nucleus from the

264
00:12:32,230 --> 00:12:37,000
French national security agency this

265
00:12:34,750 --> 00:12:38,709
time it's a post authentication will

266
00:12:37,000 --> 00:12:41,259
never be T but well as soon as you get

267
00:12:38,709 --> 00:12:44,170
credentials on dry lo you can connect

268
00:12:41,259 --> 00:12:47,290
with the SSH and use this vulnerability

269
00:12:44,170 --> 00:12:50,199
to do exactly the same than we did

270
00:12:47,290 --> 00:12:52,059
earlier this is a format string will

271
00:12:50,199 --> 00:12:56,139
never be G so format string are still a

272
00:12:52,059 --> 00:12:58,719
thing today so the next step we wanted

273
00:12:56,139 --> 00:13:00,579
to see if we were able to back draw the

274
00:12:58,720 --> 00:13:04,120
ILO firmware together to gain

275
00:13:00,579 --> 00:13:06,790
persistence on the system so looking

276
00:13:04,120 --> 00:13:10,120
around we found a module called SPI

277
00:13:06,790 --> 00:13:12,699
which expose SPI service giving direct

278
00:13:10,120 --> 00:13:15,519
primitives to the SPI flash hosting the

279
00:13:12,699 --> 00:13:18,250
the I know firmware so what we did was

280
00:13:15,519 --> 00:13:21,370
simply in our cell card invoke the SPI

281
00:13:18,250 --> 00:13:21,940
service to directly write back door back

282
00:13:21,370 --> 00:13:25,450
door

283
00:13:21,940 --> 00:13:28,090
on the under flush so by doing this we

284
00:13:25,450 --> 00:13:30,310
bypass all the checks which are normally

285
00:13:28,090 --> 00:13:34,780
performed by ila when you submit ahem

286
00:13:30,310 --> 00:13:37,089
well however there is some integrity

287
00:13:34,780 --> 00:13:41,260
check when the I look good so as you can

288
00:13:37,090 --> 00:13:43,510
see under the under schema when the IO

289
00:13:41,260 --> 00:13:45,700
is visited the bootloader starts it then

290
00:13:43,510 --> 00:13:47,650
checks integrity of the canal then the

291
00:13:45,700 --> 00:13:49,510
compass decompress it and load it then

292
00:13:47,650 --> 00:13:51,310
the kernel will check integrity of the

293
00:13:49,510 --> 00:13:53,890
user one part and a different press and

294
00:13:51,310 --> 00:13:56,109
load it but well nobody checks the

295
00:13:53,890 --> 00:13:58,930
bootloader so this is a problem because

296
00:13:56,110 --> 00:14:01,000
we can take a normal firmware extract

297
00:13:58,930 --> 00:14:02,739
all the part of the firmware we can

298
00:14:01,000 --> 00:14:04,570
patch the bootloader to remove the

299
00:14:02,740 --> 00:14:06,100
integrity check of the kernel we can

300
00:14:04,570 --> 00:14:07,450
then punch the kernel to remove the

301
00:14:06,100 --> 00:14:10,000
integrity check of the userland

302
00:14:07,450 --> 00:14:11,980
and then you can simply inject the back

303
00:14:10,000 --> 00:14:14,650
door in the userland repack all the

304
00:14:11,980 --> 00:14:16,780
VMware flash it using our vallevan

305
00:14:14,650 --> 00:14:19,780
irritability and then we have a backdoor

306
00:14:16,780 --> 00:14:23,199
in the envelope so for the proof of

307
00:14:19,780 --> 00:14:25,360
concept the backdoor we we wrote was a

308
00:14:23,200 --> 00:14:28,600
specific handler in the in the webserver

309
00:14:25,360 --> 00:14:30,760
part so we hided get under on the under

310
00:14:28,600 --> 00:14:33,220
web server to gain direct access to the

311
00:14:30,760 --> 00:14:35,200
host memory in a read and write so as

312
00:14:33,220 --> 00:14:38,500
you can see for example we used here the

313
00:14:35,200 --> 00:14:41,830
backdoor on a server running Windows 10

314
00:14:38,500 --> 00:14:45,370
operating system and we asked him to to

315
00:14:41,830 --> 00:14:47,800
jump the memory at ten thousand and we

316
00:14:45,370 --> 00:14:53,380
can see we had the windows 10 border for

317
00:14:47,800 --> 00:14:56,709
example then we wonder what we can do

318
00:14:53,380 --> 00:15:04,480
with this back drawer so we started to

319
00:14:56,710 --> 00:15:06,460
develop a service to to to connect our

320
00:15:04,480 --> 00:15:08,020
back door with the PCL each tool I don't

321
00:15:06,460 --> 00:15:11,440
know if you know it but PCL each is a

322
00:15:08,020 --> 00:15:14,079
tool you can use with a hardware or

323
00:15:11,440 --> 00:15:16,240
memory acquisition software memory

324
00:15:14,080 --> 00:15:17,800
acquisition system to perform some

325
00:15:16,240 --> 00:15:19,570
actions on the systems for example you

326
00:15:17,800 --> 00:15:22,810
can unlock your windows session you can

327
00:15:19,570 --> 00:15:24,610
insert directly a kernel module in the

328
00:15:22,810 --> 00:15:27,160
operating system so we develop a

329
00:15:24,610 --> 00:15:30,100
connector we special each so we can use

330
00:15:27,160 --> 00:15:32,199
PCL each with a compromised hpi-o to to

331
00:15:30,100 --> 00:15:35,730
perform all all the tasks each channel I

332
00:15:32,200 --> 00:15:38,459
can perform so here for example

333
00:15:35,730 --> 00:15:41,190
is the use of pcl each with our backdoor

334
00:15:38,459 --> 00:15:44,638
on the Linux system to inject a custom

335
00:15:41,190 --> 00:15:47,639
custom channel module so while it takes

336
00:15:44,639 --> 00:15:50,430
only two minutes for propecia each two

337
00:15:47,639 --> 00:15:55,019
to retry the the the Linux channel and

338
00:15:50,430 --> 00:15:58,469
inject its module and finally for the

339
00:15:55,019 --> 00:16:01,829
light side of the force we we played a

340
00:15:58,470 --> 00:16:04,949
bit with the not picture malware so not

341
00:16:01,829 --> 00:16:09,479
picture is a ransomware which appeared

342
00:16:04,949 --> 00:16:12,060
in 2017 the the the the fun things is

343
00:16:09,480 --> 00:16:13,699
that it's rewrite the MBR of computers

344
00:16:12,060 --> 00:16:16,888
so that when you reboot your computer

345
00:16:13,699 --> 00:16:20,550
the custom MBR runs and it will encrypt

346
00:16:16,889 --> 00:16:24,389
all your disk with with a randomly

347
00:16:20,550 --> 00:16:26,310
generated key but our friend a dreamy

348
00:16:24,389 --> 00:16:28,709
engine a from a quacks lab phone that

349
00:16:26,310 --> 00:16:31,800
the encryption key will stay in Ramah

350
00:16:28,709 --> 00:16:34,050
after the reboot at the computer so

351
00:16:31,800 --> 00:16:36,240
using our DMA access with ILO we can

352
00:16:34,050 --> 00:16:38,790
simply recover this key from Ram we can

353
00:16:36,240 --> 00:16:41,490
patch the nut picture MBR to make it

354
00:16:38,790 --> 00:16:44,939
decrypt itself on the on the next boot

355
00:16:41,490 --> 00:16:47,730
so this is what we did so here is the

356
00:16:44,940 --> 00:16:51,240
the screen of the of not picture it asks

357
00:16:47,730 --> 00:16:53,940
you a decryption key if you pray the

358
00:16:51,240 --> 00:16:56,730
ransom and while by using I low we can

359
00:16:53,940 --> 00:17:00,089
just reinjected enemy curly and ask him

360
00:16:56,730 --> 00:17:02,130
to decrypt itself so what this is a fun

361
00:17:00,089 --> 00:17:05,160
proper concept of what can be done with

362
00:17:02,130 --> 00:17:06,959
this backdoor and while we publish the

363
00:17:05,160 --> 00:17:11,270
white paper but this yesterday so it's

364
00:17:06,959 --> 00:17:11,270
also available on the github repository

365
00:17:11,480 --> 00:17:16,919
so this is all for the previous work now

366
00:17:14,609 --> 00:17:19,859
we will focus on the third part of our

367
00:17:16,919 --> 00:17:22,140
study which was studying the attacks of

368
00:17:19,859 --> 00:17:24,899
face from the host operating system to

369
00:17:22,140 --> 00:17:27,150
the BMC and finally we will have a look

370
00:17:24,900 --> 00:17:33,510
at the new I know version which is out

371
00:17:27,150 --> 00:17:37,559
of five so first we cap of the ILO

372
00:17:33,510 --> 00:17:39,780
architecture so here is a the image of

373
00:17:37,559 --> 00:17:42,780
an HP server on one side you have the

374
00:17:39,780 --> 00:17:45,059
main CPU so usually an inter CPU running

375
00:17:42,780 --> 00:17:47,190
a classical operating system so here

376
00:17:45,059 --> 00:17:48,360
it's line acts with all the user on

377
00:17:47,190 --> 00:17:50,159
processes

378
00:17:48,360 --> 00:17:53,070
on the other side you have the idle CPU

379
00:17:50,159 --> 00:17:55,409
which is a non CPU running the

380
00:17:53,070 --> 00:17:58,439
integrator operating system with various

381
00:17:55,409 --> 00:18:01,200
events tasks and the communication

382
00:17:58,440 --> 00:18:05,490
between boss words is done over Miss

383
00:18:01,200 --> 00:18:08,970
Ellie and while all these parts will

384
00:18:05,490 --> 00:18:11,730
apply for I look for but most of it will

385
00:18:08,970 --> 00:18:16,950
be also valid for io5 with some slight

386
00:18:11,730 --> 00:18:20,100
changes so to study how the

387
00:18:16,950 --> 00:18:22,500
communication was working between I Lo

388
00:18:20,100 --> 00:18:24,870
and the main operating system we started

389
00:18:22,500 --> 00:18:27,360
to look at the available tooling to to

390
00:18:24,870 --> 00:18:30,809
make a normal communication so in the

391
00:18:27,360 --> 00:18:33,299
Linux kernel there's a driver called HP

392
00:18:30,809 --> 00:18:35,610
ILO which which exposes some character

393
00:18:33,299 --> 00:18:38,908
devices to communicate with the I know

394
00:18:35,610 --> 00:18:43,110
it requires root privileges to use these

395
00:18:38,909 --> 00:18:47,309
devices and HP also publishes some

396
00:18:43,110 --> 00:18:49,889
proprietary tools to to modify the

397
00:18:47,309 --> 00:18:51,570
configuration of the idle or to flush a

398
00:18:49,889 --> 00:18:54,600
new new frame around the eye load

399
00:18:51,570 --> 00:18:56,549
directly from the line exhaust though

400
00:18:54,600 --> 00:19:01,709
this was a good place to start trying

401
00:18:56,549 --> 00:19:03,750
out the communication worked so from the

402
00:19:01,710 --> 00:19:06,269
operating system point of view I low is

403
00:19:03,750 --> 00:19:08,880
seen as a PCI device so you can see by

404
00:19:06,269 --> 00:19:10,789
doing an LS PCI you are an integrated

405
00:19:08,880 --> 00:19:13,950
lighted and our management processor

406
00:19:10,789 --> 00:19:15,779
device appearing and if you have a look

407
00:19:13,950 --> 00:19:17,279
at the physical memory map of your

408
00:19:15,779 --> 00:19:19,380
system you can see that there are

409
00:19:17,279 --> 00:19:24,120
several ranges of memory which has

410
00:19:19,380 --> 00:19:27,210
reserved by the HP Aero driver and in

411
00:19:24,120 --> 00:19:29,668
these shared memory segments some

412
00:19:27,210 --> 00:19:32,789
communication channels are set up by D

413
00:19:29,669 --> 00:19:36,389
by D driver so they can be 8 to 24

414
00:19:32,789 --> 00:19:39,350
channels and each channel is a is

415
00:19:36,389 --> 00:19:44,070
exposed as a device in the dev hpi-o

416
00:19:39,350 --> 00:19:48,260
file system and each channel has a quite

417
00:19:44,070 --> 00:19:51,899
simple file structure on the either side

418
00:19:48,260 --> 00:19:53,669
the tasks in charge of handling all the

419
00:19:51,899 --> 00:19:55,678
communication is called chief and if you

420
00:19:53,669 --> 00:19:58,710
remember it was the task in which we

421
00:19:55,679 --> 00:20:02,430
found the DGM a feature on

422
00:19:58,710 --> 00:20:04,650
so the the chief task simply waits for

423
00:20:02,430 --> 00:20:07,620
messages from the host and then just

424
00:20:04,650 --> 00:20:09,810
dispatch the DD command it received to

425
00:20:07,620 --> 00:20:12,239
the correct commander and it can also

426
00:20:09,810 --> 00:20:14,970
dispatch certain messages to other tasks

427
00:20:12,240 --> 00:20:17,100
on the system the message format is

428
00:20:14,970 --> 00:20:19,980
quite simple there's a size a command ID

429
00:20:17,100 --> 00:20:22,770
a destination ID which means which task

430
00:20:19,980 --> 00:20:25,680
should handle the command and then data

431
00:20:22,770 --> 00:20:26,940
buffer and which what's interesting is

432
00:20:25,680 --> 00:20:29,280
that by default there's no

433
00:20:26,940 --> 00:20:32,370
authentication on on this channel so

434
00:20:29,280 --> 00:20:35,100
that means that as soon as you have

435
00:20:32,370 --> 00:20:36,929
administrative privilege on the host

436
00:20:35,100 --> 00:20:39,050
operating system you can talk to the

437
00:20:36,930 --> 00:20:45,480
I'll own you can configure ATI law

438
00:20:39,050 --> 00:20:46,919
without any any authentication so about

439
00:20:45,480 --> 00:20:48,960
the commands you can send to the ILO

440
00:20:46,920 --> 00:20:52,200
there are more than 100 commands which

441
00:20:48,960 --> 00:20:55,050
are undal by chief so for example you

442
00:20:52,200 --> 00:20:56,880
can get the the i'll o network

443
00:20:55,050 --> 00:20:58,649
configuration and you can modify it etc

444
00:20:56,880 --> 00:21:01,440
but there are also some dangerous

445
00:20:58,650 --> 00:21:03,600
commands for example command 7g allows

446
00:21:01,440 --> 00:21:05,910
you to them the I love it from the promo

447
00:21:03,600 --> 00:21:07,649
contains the factory settings of the ILO

448
00:21:05,910 --> 00:21:11,400
including the default administrator

449
00:21:07,650 --> 00:21:12,960
password in clear and it's quite

450
00:21:11,400 --> 00:21:14,580
interesting because usually this

451
00:21:12,960 --> 00:21:17,760
password is never changed by the

452
00:21:14,580 --> 00:21:20,699
administrators they prefer to create a

453
00:21:17,760 --> 00:21:23,070
new administrator account with new

454
00:21:20,700 --> 00:21:25,020
passwords the main reason is that the

455
00:21:23,070 --> 00:21:27,330
default administrator password is a

456
00:21:25,020 --> 00:21:29,790
return on a sticker on the server so

457
00:21:27,330 --> 00:21:31,199
well if you forgot the password of any

458
00:21:29,790 --> 00:21:35,070
other account so you still have this one

459
00:21:31,200 --> 00:21:36,900
to use so it couldn't be useful there

460
00:21:35,070 --> 00:21:41,250
are also commands for example commands

461
00:21:36,900 --> 00:21:45,210
50 and 52 are commands to to update anew

462
00:21:41,250 --> 00:21:48,330
the the former at the ILO and another

463
00:21:45,210 --> 00:21:50,070
command is to create a new account of

464
00:21:48,330 --> 00:21:51,689
the ID also from the host operating

465
00:21:50,070 --> 00:21:53,070
system you can create a new

466
00:21:51,690 --> 00:21:58,790
administrator account on the idea

467
00:21:53,070 --> 00:22:02,280
without any kind of authentication so

468
00:21:58,790 --> 00:22:04,290
well a quick example on how you can

469
00:22:02,280 --> 00:22:06,960
communicate with giro with six lines of

470
00:22:04,290 --> 00:22:09,710
Python so this example is the commander

471
00:22:06,960 --> 00:22:12,050
70 I showed earlier to them the EEPROM

472
00:22:09,710 --> 00:22:13,220
so you can see in the

473
00:22:12,050 --> 00:22:15,500
you from them if you have the

474
00:22:13,220 --> 00:22:20,030
administrator username and the default

475
00:22:15,500 --> 00:22:22,790
password in clear-text we then focused

476
00:22:20,030 --> 00:22:25,790
on the common handling the firmware

477
00:22:22,790 --> 00:22:28,670
update why did we chose this one because

478
00:22:25,790 --> 00:22:33,590
it involves complex file format passing

479
00:22:28,670 --> 00:22:36,830
the the the ephemeral they task have to

480
00:22:33,590 --> 00:22:40,070
jump or to handle the the the the the

481
00:22:36,830 --> 00:22:41,720
firmware file passing there are values

482
00:22:40,070 --> 00:22:43,820
signature checks so there might be an

483
00:22:41,720 --> 00:22:45,380
error somewhere and if we find a

484
00:22:43,820 --> 00:22:48,470
vulnerability in the femur updates a

485
00:22:45,380 --> 00:22:51,230
mechanism we might be able also to to

486
00:22:48,470 --> 00:22:53,480
install but not hammer on the server and

487
00:22:51,230 --> 00:22:56,030
another point of interest is that this

488
00:22:53,480 --> 00:22:58,430
feature is accessible from both the host

489
00:22:56,030 --> 00:23:00,980
and the web server so from the web

490
00:22:58,430 --> 00:23:02,810
server you can also upload a new few

491
00:23:00,980 --> 00:23:06,230
more on the ILO which is which is an

492
00:23:02,810 --> 00:23:08,300
ability that so let's have a look to the

493
00:23:06,230 --> 00:23:10,640
film where update workflow so first of

494
00:23:08,300 --> 00:23:14,540
all you send a new firmware from the O's

495
00:23:10,640 --> 00:23:16,880
or from the HTTP webserver then this

496
00:23:14,540 --> 00:23:20,290
camera is sent to a specific task called

497
00:23:16,880 --> 00:23:23,060
film for few more update module maybe

498
00:23:20,290 --> 00:23:25,639
the film task will perform a first

499
00:23:23,060 --> 00:23:28,580
validation on the the firmware file and

500
00:23:25,640 --> 00:23:30,080
it signatures it will then ask the

501
00:23:28,580 --> 00:23:31,909
integrity Channel from additional

502
00:23:30,080 --> 00:23:34,909
validations and finally if everything

503
00:23:31,910 --> 00:23:36,950
goes well it will send the the new

504
00:23:34,910 --> 00:23:41,410
firmware to the SPI service which will

505
00:23:36,950 --> 00:23:41,410
write it effectively under the spi flash

506
00:23:41,440 --> 00:23:47,570
a quick recap on the file format so when

507
00:23:45,530 --> 00:23:51,830
you prove the file you provide to the

508
00:23:47,570 --> 00:23:55,760
ILO has a small header called the

509
00:23:51,830 --> 00:23:58,250
fingerprint which has a signature the

510
00:23:55,760 --> 00:24:02,390
signature of the wall HP I made with it

511
00:23:58,250 --> 00:24:04,250
which is the actual firmware and this

512
00:24:02,390 --> 00:24:07,820
this header will be passed a line by

513
00:24:04,250 --> 00:24:09,710
line by the the film task and it will

514
00:24:07,820 --> 00:24:11,750
try to retype the hash and signature

515
00:24:09,710 --> 00:24:15,470
elements then compute the arts of the

516
00:24:11,750 --> 00:24:22,730
wall hpmh block and checks the signature

517
00:24:15,470 --> 00:24:25,250
using an opcode EDA HP public key then a

518
00:24:22,730 --> 00:24:29,060
quick quick recap of the HP

519
00:24:25,250 --> 00:24:30,680
made from at so this IP image contains

520
00:24:29,060 --> 00:24:33,320
the actual bootloader channel and user

521
00:24:30,680 --> 00:24:35,540
land images so as I said before Canada

522
00:24:33,320 --> 00:24:37,189
New Zealand and compressed and signed

523
00:24:35,540 --> 00:24:39,080
but the bootloader is uncompressed and

524
00:24:37,190 --> 00:24:41,510
inside and during the boot process

525
00:24:39,080 --> 00:24:43,340
bootloader asked read to load and verify

526
00:24:41,510 --> 00:24:45,770
the canal then the canal asked to load

527
00:24:43,340 --> 00:24:47,510
and verify goosal on but your bootloader

528
00:24:45,770 --> 00:24:54,139
is never verified by the by the boot

529
00:24:47,510 --> 00:24:56,720
process and this is what is what the the

530
00:24:54,140 --> 00:25:00,220
kernel will will will check if you

531
00:24:56,720 --> 00:25:00,220
remember the the the forth

532
00:25:01,030 --> 00:25:08,780
sorry well if you remember the first

533
00:25:06,170 --> 00:25:11,020
part here the fumer will ask the channel

534
00:25:08,780 --> 00:25:13,970
to do some additional validations and

535
00:25:11,020 --> 00:25:16,490
these are this validation will which

536
00:25:13,970 --> 00:25:18,950
will be done by a by the channel so the

537
00:25:16,490 --> 00:25:21,590
canal with exposed specific resource to

538
00:25:18,950 --> 00:25:24,320
use a LAN task with the ten different

539
00:25:21,590 --> 00:25:26,270
commands handlers and the film will use

540
00:25:24,320 --> 00:25:29,300
the command number two to ask the kernel

541
00:25:26,270 --> 00:25:30,980
to verify integrity of the kernel and

542
00:25:29,300 --> 00:25:33,470
user and images so the kernel will

543
00:25:30,980 --> 00:25:35,840
decrypt the embedded signatures will

544
00:25:33,470 --> 00:25:38,870
compute the ashes and compare them to

545
00:25:35,840 --> 00:25:40,550
the decrypted signatures and it will try

546
00:25:38,870 --> 00:25:42,199
to decompress the images if they are

547
00:25:40,550 --> 00:25:44,899
compressed to see the compression is

548
00:25:42,200 --> 00:25:47,120
very de and one important thing also

549
00:25:44,900 --> 00:25:49,280
there is that there's a command which

550
00:25:47,120 --> 00:25:52,399
can be used to provide a new key to the

551
00:25:49,280 --> 00:25:55,370
channel for verifying signatures which

552
00:25:52,400 --> 00:25:58,400
means that if we have a code execution

553
00:25:55,370 --> 00:26:00,320
in fumé we can just ask the channel to

554
00:25:58,400 --> 00:26:06,530
verify the firmware with a key we

555
00:26:00,320 --> 00:26:08,600
control so to summarize the signatures

556
00:26:06,530 --> 00:26:12,200
verification step in the firmware update

557
00:26:08,600 --> 00:26:14,929
so first the wall hpmh is verified in

558
00:26:12,200 --> 00:26:16,460
the film task then the userland and

559
00:26:14,930 --> 00:26:18,110
channel images are verified by the

560
00:26:16,460 --> 00:26:20,150
kernel and finally during the boot

561
00:26:18,110 --> 00:26:22,449
process of the ILO the kernel and

562
00:26:20,150 --> 00:26:25,220
userland will be also verified them and

563
00:26:22,450 --> 00:26:27,770
of course our I love for the bootloader

564
00:26:25,220 --> 00:26:30,020
is not signed so we we saw earlier that

565
00:26:27,770 --> 00:26:32,889
with a single will never eaten userland

566
00:26:30,020 --> 00:26:36,920
we can write directly but firmware

567
00:26:32,890 --> 00:26:38,710
asking directly as spi service then the

568
00:26:36,920 --> 00:26:40,510
bootloader can be patched to avoid

569
00:26:38,710 --> 00:26:42,130
signature candle can be patched to avoid

570
00:26:40,510 --> 00:26:46,929
user veneto and then we can have a

571
00:26:42,130 --> 00:26:49,870
backdoor in your user van task so now

572
00:26:46,929 --> 00:26:52,179
let's check in details how the fume will

573
00:26:49,870 --> 00:26:55,360
do the passing of the fingerprint header

574
00:26:52,179 --> 00:26:57,549
so as I said earlier it will read this

575
00:26:55,360 --> 00:27:00,100
header line by line to find the hash and

576
00:26:57,549 --> 00:27:01,750
signature elements but we can see

577
00:27:00,100 --> 00:27:02,709
somewhere it will call a redline

578
00:27:01,750 --> 00:27:04,299
function

579
00:27:02,710 --> 00:27:06,789
providing a fixed size buffer on the

580
00:27:04,299 --> 00:27:08,770
stack and specifying the size so that's

581
00:27:06,789 --> 00:27:14,289
not always a good idea what could go

582
00:27:08,770 --> 00:27:16,840
wrong here and as we can see the liner

583
00:27:14,289 --> 00:27:18,490
which is read in the header is directly

584
00:27:16,840 --> 00:27:21,100
copied in the fixed size buffer without

585
00:27:18,490 --> 00:27:22,720
any side check so there's that's a

586
00:27:21,100 --> 00:27:26,080
trivial buffer overflow which is of

587
00:27:22,720 --> 00:27:30,640
course exploit able to bypass the the

588
00:27:26,080 --> 00:27:32,649
the firmware validation so we managed to

589
00:27:30,640 --> 00:27:34,299
exploit it we first wanted to exploit it

590
00:27:32,649 --> 00:27:36,489
without code execution because it would

591
00:27:34,299 --> 00:27:39,190
be easier so we thought that we could

592
00:27:36,490 --> 00:27:41,740
simply redirect code execution to just

593
00:27:39,190 --> 00:27:43,809
bypass the the the signature validation

594
00:27:41,740 --> 00:27:46,270
and then let the process continue to

595
00:27:43,809 --> 00:27:48,370
effectively faster fume wear but there

596
00:27:46,270 --> 00:27:50,710
was this second check in the canal we

597
00:27:48,370 --> 00:27:53,260
couldn't bypass this way so in fact we

598
00:27:50,710 --> 00:27:55,960
had to do code execution which was made

599
00:27:53,260 --> 00:28:00,070
easier by the fact that there's no SLR

600
00:27:55,960 --> 00:28:02,140
no NX in idle so we could simply write a

601
00:28:00,070 --> 00:28:05,260
shell code in our firmware file which is

602
00:28:02,140 --> 00:28:07,120
sent to the service and as this framer

603
00:28:05,260 --> 00:28:08,799
file is loaded on a fixed at a fixed

604
00:28:07,120 --> 00:28:10,719
addressing memory we can simply jump on

605
00:28:08,799 --> 00:28:12,940
the shell code and the shell code will

606
00:28:10,720 --> 00:28:14,409
will just ask the SPS service to to

607
00:28:12,940 --> 00:28:19,750
effectively write the firmware on the

608
00:28:14,409 --> 00:28:25,779
and the SPI flash this vulnerability has

609
00:28:19,750 --> 00:28:28,659
been reported to HP in major to 2018 it

610
00:28:25,779 --> 00:28:31,419
impacts both I love front 5 and while

611
00:28:28,659 --> 00:28:35,549
patches has been made available by HP in

612
00:28:31,419 --> 00:28:37,739
May and June 2018

613
00:28:35,549 --> 00:28:39,450
what's fun is that it has been called a

614
00:28:37,739 --> 00:28:41,399
remote or local code execution because

615
00:28:39,450 --> 00:28:46,649
you can exploit it either from the host

616
00:28:41,399 --> 00:28:48,539
by flashing venerable few more on ello

617
00:28:46,649 --> 00:28:53,969
or directly from the from the web server

618
00:28:48,539 --> 00:28:56,460
interface so now that you can see how

619
00:28:53,970 --> 00:28:59,039
secure I know he's you might want to

620
00:28:56,460 --> 00:29:01,710
disable it on your HP server so well one

621
00:28:59,039 --> 00:29:04,230
good thing is that if you can if you go

622
00:29:01,710 --> 00:29:06,360
to the indy bios of your HP server

623
00:29:04,230 --> 00:29:08,340
there's something you can check to

624
00:29:06,360 --> 00:29:10,320
disable Eylau when you reboot the server

625
00:29:08,340 --> 00:29:11,939
you can see it tells I look for is

626
00:29:10,320 --> 00:29:15,210
disabled you can see I'll go for IP

627
00:29:11,940 --> 00:29:17,100
disabled so ok I might be safe but well

628
00:29:15,210 --> 00:29:18,600
if you try to communicate with the ILO

629
00:29:17,100 --> 00:29:21,748
from your Linux you can still

630
00:29:18,600 --> 00:29:26,090
communicate with it which means that I

631
00:29:21,749 --> 00:29:30,230
Lo is still running and it can still be

632
00:29:26,090 --> 00:29:33,480
joined by the main operating system the

633
00:29:30,230 --> 00:29:35,489
ILO disabled feature is just that it's

634
00:29:33,480 --> 00:29:38,159
not reachable from the network anymore

635
00:29:35,489 --> 00:29:40,350
but it can still be reached by the by

636
00:29:38,159 --> 00:29:42,899
the host operating system which means

637
00:29:40,350 --> 00:29:48,149
that you can sit be a backdoor by an

638
00:29:42,899 --> 00:29:49,709
analog vulnerability so now what we

639
00:29:48,149 --> 00:29:52,678
already proved that the firmware

640
00:29:49,710 --> 00:29:54,779
backdooring was possible in the previous

641
00:29:52,679 --> 00:29:58,309
work we we developed back drawing the

642
00:29:54,779 --> 00:29:58,309
web server to to install

643
00:29:58,360 --> 00:30:02,469
a specific handler to access the the

644
00:30:00,520 --> 00:30:04,418
hosts memory and now we are able to do

645
00:30:02,470 --> 00:30:07,150
it from the host even if I know is

646
00:30:04,419 --> 00:30:09,520
disabled so well as soon as we can

647
00:30:07,150 --> 00:30:12,850
compromise host operating system running

648
00:30:09,520 --> 00:30:16,139
on an HP server we are able to set up a

649
00:30:12,850 --> 00:30:19,809
persistent backdoor in the India log

650
00:30:16,140 --> 00:30:21,130
so now let's see the the new the new

651
00:30:19,809 --> 00:30:26,710
work we did on aisle 5

652
00:30:21,130 --> 00:30:29,470
yes so I defy was introduced in mid 2017

653
00:30:26,710 --> 00:30:32,530
it was a new generation of salvaged

654
00:30:29,470 --> 00:30:34,390
antenna and it's we of course when it

655
00:30:32,530 --> 00:30:36,309
goes out we wanted to have a look at it

656
00:30:34,390 --> 00:30:39,059
and to get an idea about the evolution

657
00:30:36,309 --> 00:30:41,200
of the expose attack surface from Idaho

658
00:30:39,059 --> 00:30:43,178
ready it was not to renovate huge

659
00:30:41,200 --> 00:30:45,400
campaign we wanted to understand what

660
00:30:43,179 --> 00:30:47,559
what new on the system and there was a

661
00:30:45,400 --> 00:30:49,750
key feature he needs that was very

662
00:30:47,559 --> 00:30:53,070
appealing to us it was a silicon which

663
00:30:49,750 --> 00:30:57,370
of twist they introduced with a new chip

664
00:30:53,070 --> 00:31:01,030
hardware would of us with him so we

665
00:30:57,370 --> 00:31:03,370
bought a new server or cheap one and we

666
00:31:01,030 --> 00:31:05,799
started to look at what we got so we

667
00:31:03,370 --> 00:31:10,989
identify quickly is a true flash for

668
00:31:05,799 --> 00:31:13,330
system ROM and I love ROM ROM also but

669
00:31:10,990 --> 00:31:17,590
we are not like trying to identify the

670
00:31:13,330 --> 00:31:21,250
stock that is used by the ILO chip we

671
00:31:17,590 --> 00:31:23,639
knew it's ARM chip cortex a9 but we had

672
00:31:21,250 --> 00:31:27,510
no information about what was its

673
00:31:23,640 --> 00:31:30,010
cryptographic capabilities in particular

674
00:31:27,510 --> 00:31:32,789
we suppose the broad design has been

675
00:31:30,010 --> 00:31:35,679
made by Western corporation due to some

676
00:31:32,789 --> 00:31:39,760
documents with firm looking for markings

677
00:31:35,679 --> 00:31:41,830
on the motherboard so again we started

678
00:31:39,760 --> 00:31:44,408
doing a firmer analysis to understand is

679
00:31:41,830 --> 00:31:47,980
format so the femur is such 2 megabytes

680
00:31:44,409 --> 00:31:50,860
it's also wrapped into an HP image sign

681
00:31:47,980 --> 00:31:53,320
container it contains a boot block the

682
00:31:50,860 --> 00:31:55,658
last two to the ten thousand bytes of

683
00:31:53,320 --> 00:31:58,600
the femur and then we have a list of

684
00:31:55,659 --> 00:32:00,760
modules each of them is present with us

685
00:31:58,600 --> 00:32:03,270
there are two copies of each of these

686
00:32:00,760 --> 00:32:06,730
modules for fault tolerance when working

687
00:32:03,270 --> 00:32:10,539
in the flash each modules is described

688
00:32:06,730 --> 00:32:10,990
by a header and is also signed both the

689
00:32:10,539 --> 00:32:15,190
code

690
00:32:10,990 --> 00:32:17,200
module and it's most of its header if we

691
00:32:15,190 --> 00:32:19,720
look at one of this area we can find

692
00:32:17,200 --> 00:32:21,780
some very specific elements there's one

693
00:32:19,720 --> 00:32:24,370
magic at the beginning one at the hand

694
00:32:21,780 --> 00:32:27,610
header type which tells you for example

695
00:32:24,370 --> 00:32:29,379
if it's a local channel I use alone or

696
00:32:27,610 --> 00:32:32,110
maybe if a stage before second cycle

697
00:32:29,380 --> 00:32:35,320
further we can find CRC for both the

698
00:32:32,110 --> 00:32:38,320
header and the image at the end you can

699
00:32:35,320 --> 00:32:41,889
see if we can have up to two signatures

700
00:32:38,320 --> 00:32:43,659
and we also found some very important

701
00:32:41,890 --> 00:32:47,220
parameters that we will talk about just

702
00:32:43,660 --> 00:32:51,240
after hour which are pretty paramedics

703
00:32:47,220 --> 00:32:54,580
so once we understand how the header is

704
00:32:51,240 --> 00:32:56,410
composed we can simply dump and list

705
00:32:54,580 --> 00:33:00,159
across all the modules that are present

706
00:32:56,410 --> 00:33:02,800
within a few memory we have produced

707
00:33:00,160 --> 00:33:06,160
boot faders and also canal and user none

708
00:33:02,800 --> 00:33:09,399
of the systems so just to give you a

709
00:33:06,160 --> 00:33:13,120
preview of how the food chain is meta so

710
00:33:09,400 --> 00:33:15,670
we have the as if the chip with a boot

711
00:33:13,120 --> 00:33:19,239
ROM that will load hostage further which

712
00:33:15,670 --> 00:33:21,910
is a few micro boots one smb1 we and

713
00:33:19,240 --> 00:33:24,370
seven-stage radharani banana and then I

714
00:33:21,910 --> 00:33:28,179
look for five a canal and then the user

715
00:33:24,370 --> 00:33:30,610
Nadia so we started to investigate and

716
00:33:28,179 --> 00:33:34,510
look looked at how these secure boot is

717
00:33:30,610 --> 00:33:37,659
implemented so this is all guess about

718
00:33:34,510 --> 00:33:39,820
what the boot rom perform as action it

719
00:33:37,660 --> 00:33:44,230
we suppose it loads all the firmware in

720
00:33:39,820 --> 00:33:46,840
the hopper memory addresses and it will

721
00:33:44,230 --> 00:33:49,900
from then it will check the signature

722
00:33:46,840 --> 00:33:52,059
present in within the SMB zero header

723
00:33:49,900 --> 00:33:54,490
it allowed to check the signature of the

724
00:33:52,059 --> 00:33:57,129
first eight thousand bytes then it will

725
00:33:54,490 --> 00:34:01,420
use the signature from smb1 either to

726
00:33:57,130 --> 00:34:04,120
check the integrity of the first five

727
00:34:01,420 --> 00:34:06,040
thousand bytes I have and if everything

728
00:34:04,120 --> 00:34:07,989
is good it will figure out harmless at

729
00:34:06,040 --> 00:34:12,250
Victor and the processor will start

730
00:34:07,990 --> 00:34:15,668
executing the secure macro boot code so

731
00:34:12,250 --> 00:34:17,440
first sight with hello yes so we have a

732
00:34:15,668 --> 00:34:18,520
first stage before us and be secure

733
00:34:17,440 --> 00:34:21,369
macro boot of course it's very

734
00:34:18,520 --> 00:34:23,770
minimalistic he only perform some CPU

735
00:34:21,369 --> 00:34:24,610
initiation actions like in solution that

736
00:34:23,770 --> 00:34:27,460
i catched data

737
00:34:24,610 --> 00:34:31,480
she's seen like that interestingly trade

738
00:34:27,460 --> 00:34:33,389
zone is not used on this arm CPU and so

739
00:34:31,480 --> 00:34:35,710
it will access some non-volatile memory

740
00:34:33,389 --> 00:34:38,139
something interesting so yes it expose

741
00:34:35,710 --> 00:34:40,480
an API we will talk more about it to

742
00:34:38,139 --> 00:34:42,250
rest after and at the end it will load

743
00:34:40,480 --> 00:34:47,139
the second stage which other which is my

744
00:34:42,250 --> 00:34:49,690
benign in the nominal behavior so o is

745
00:34:47,139 --> 00:34:51,819
the signature object we can like we said

746
00:34:49,690 --> 00:34:54,700
if you can have up to two signatures

747
00:34:51,820 --> 00:35:00,160
store insulator so it's a simple arrest

748
00:34:54,699 --> 00:35:04,299
a signature for key T and in the data of

749
00:35:00,160 --> 00:35:06,160
the fastest bladder we have like a flat

750
00:35:04,300 --> 00:35:07,900
array of bignum the first one is the

751
00:35:06,160 --> 00:35:09,700
exponent and then we have an array of

752
00:35:07,900 --> 00:35:13,570
six public keys that can be used to

753
00:35:09,700 --> 00:35:14,470
check the integrity of the next stage so

754
00:35:13,570 --> 00:35:17,470
quite simple

755
00:35:14,470 --> 00:35:19,419
so when secure marker boot want to check

756
00:35:17,470 --> 00:35:22,629
the integrity of the next stage before

757
00:35:19,420 --> 00:35:26,200
the only benign it will pick the value

758
00:35:22,630 --> 00:35:29,230
of and X and for some politics one get

759
00:35:26,200 --> 00:35:31,629
that was a matching public key decrypt

760
00:35:29,230 --> 00:35:35,290
the ash from the signature and then

761
00:35:31,630 --> 00:35:37,390
verify it by computing the hash of the

762
00:35:35,290 --> 00:35:40,570
body of the melon and if everything is

763
00:35:37,390 --> 00:35:43,330
good it will load it if we execute it

764
00:35:40,570 --> 00:35:46,570
and pass exact reason to it when we

765
00:35:43,330 --> 00:35:48,340
reverse engineering this process we we

766
00:35:46,570 --> 00:35:51,100
found that actually there are four bytes

767
00:35:48,340 --> 00:35:54,040
that are not included within the

768
00:35:51,100 --> 00:35:57,220
computation of the checksum as a hash of

769
00:35:54,040 --> 00:35:59,350
the modulo 4 4 bytes from the header of

770
00:35:57,220 --> 00:36:01,839
the module and actually these 4 bytes

771
00:35:59,350 --> 00:36:05,500
for all the two fields index 1 or and

772
00:36:01,840 --> 00:36:09,310
index 2 that allowed to select which pbt

773
00:36:05,500 --> 00:36:11,140
is used to select select which will be

774
00:36:09,310 --> 00:36:14,770
key accessory

775
00:36:11,140 --> 00:36:17,799
oh yes is that again it's this feature

776
00:36:14,770 --> 00:36:20,350
can be used for post and cross signature

777
00:36:17,800 --> 00:36:22,330
by two different entities we have not

778
00:36:20,350 --> 00:36:25,029
observed some user fit and the film

779
00:36:22,330 --> 00:36:28,290
recollected but it could be an expansion

780
00:36:25,030 --> 00:36:31,750
for this at that point we don't see any

781
00:36:28,290 --> 00:36:33,020
exploitable way with something we could

782
00:36:31,750 --> 00:36:37,030
do with that

783
00:36:33,020 --> 00:36:40,009
red things but we add that in mind still

784
00:36:37,030 --> 00:36:42,110
so no we are in a secure Mac aboot

785
00:36:40,010 --> 00:36:44,390
secure micro boot load loads and a

786
00:36:42,110 --> 00:36:46,850
benign and a benign we try to load with

787
00:36:44,390 --> 00:36:48,890
one to load the cannula actually it

788
00:36:46,850 --> 00:36:52,100
doesn't have itself the card to do it so

789
00:36:48,890 --> 00:36:55,100
it will rely on relies on an API that is

790
00:36:52,100 --> 00:36:57,920
exposed by secure macro boot like like a

791
00:36:55,100 --> 00:36:59,660
DL open to to be very quick and secure

792
00:36:57,920 --> 00:37:02,540
micro boot will do all the checks and

793
00:36:59,660 --> 00:37:04,879
integrity verification on behalf of

794
00:37:02,540 --> 00:37:09,430
Medina and if everything is good never I

795
00:37:04,880 --> 00:37:12,290
will simply just - I love 505 canon and

796
00:37:09,430 --> 00:37:15,680
that where things got quite interesting

797
00:37:12,290 --> 00:37:17,210
in I know five channel we have five

798
00:37:15,680 --> 00:37:19,669
channel is responsible of course for

799
00:37:17,210 --> 00:37:22,070
checking the integrity of all I'll owe

800
00:37:19,670 --> 00:37:24,770
you salon well when we're sorry

801
00:37:22,070 --> 00:37:27,860
everything is running classes a our HTTP

802
00:37:24,770 --> 00:37:30,710
server everything what was interesting

803
00:37:27,860 --> 00:37:33,110
is that almost we can in a I know five

804
00:37:30,710 --> 00:37:35,000
canal we can find almost the exact same

805
00:37:33,110 --> 00:37:38,990
code followed in modules and checking

806
00:37:35,000 --> 00:37:41,390
integrity almost I know five canal will

807
00:37:38,990 --> 00:37:44,060
only consider one single key touch one

808
00:37:41,390 --> 00:37:46,670
single public key to check to defeat the

809
00:37:44,060 --> 00:37:48,920
signatures and it is called as a legacy

810
00:37:46,670 --> 00:37:52,070
key and that's where the two index

811
00:37:48,920 --> 00:37:52,580
fields we discover sooner becomes very

812
00:37:52,070 --> 00:37:55,190
interesting

813
00:37:52,580 --> 00:37:57,290
so in i lo five canals there is a

814
00:37:55,190 --> 00:37:59,210
function that we called lot signatures

815
00:37:57,290 --> 00:38:01,730
that it is supposed to decrypt the

816
00:37:59,210 --> 00:38:02,300
signature fields and pass it for

817
00:38:01,730 --> 00:38:05,090
replication

818
00:38:02,300 --> 00:38:06,770
and inside this function we have one

819
00:38:05,090 --> 00:38:09,320
function that is called load legacy key

820
00:38:06,770 --> 00:38:13,369
that will use the index we've can find

821
00:38:09,320 --> 00:38:15,730
in the other but this function can fail

822
00:38:13,369 --> 00:38:19,130
if I sample if you pass an invalid

823
00:38:15,730 --> 00:38:20,960
invalid index value and what is very

824
00:38:19,130 --> 00:38:23,869
interesting is that if not I guess it we

825
00:38:20,960 --> 00:38:27,590
failed us for any X 2 it will returns

826
00:38:23,869 --> 00:38:29,510
with with the success paddle we suppose

827
00:38:27,590 --> 00:38:32,480
that the developer made the assumption

828
00:38:29,510 --> 00:38:34,790
that if not loaded ICT failed for index

829
00:38:32,480 --> 00:38:37,160
- it means that index 1 has been

830
00:38:34,790 --> 00:38:39,920
successful but it's not it's not the

831
00:38:37,160 --> 00:38:42,109
case actually both can fail and that's

832
00:38:39,920 --> 00:38:45,579
exactly what we were exactly what we

833
00:38:42,109 --> 00:38:48,609
will exploit to bypass the

834
00:38:45,579 --> 00:38:50,170
the secure boot and actually if we do

835
00:38:48,609 --> 00:38:51,670
that the signature fields the two

836
00:38:50,170 --> 00:38:54,309
central fields will be left untouched

837
00:38:51,670 --> 00:38:56,049
and I love 5-channel we simply compare

838
00:38:54,309 --> 00:38:58,420
the ash value it has computed

839
00:38:56,049 --> 00:39:03,099
dynamically with an entered field that

840
00:38:58,420 --> 00:39:06,010
we can modify as we want so what we can

841
00:39:03,099 --> 00:39:08,319
do is very simple a bit like what we did

842
00:39:06,010 --> 00:39:10,030
with I logo for we will simply extract

843
00:39:08,319 --> 00:39:13,029
the film where gate I do file user and

844
00:39:10,030 --> 00:39:13,930
they compress and insert any backdoor we

845
00:39:13,030 --> 00:39:16,990
want isn't it

846
00:39:13,930 --> 00:39:18,549
recompress we set the 20x field to rock

847
00:39:16,990 --> 00:39:20,618
valium invalid values or anything

848
00:39:18,549 --> 00:39:22,900
difference that one actually and web

849
00:39:20,619 --> 00:39:24,579
sorry and then we will add a tall size

850
00:39:22,900 --> 00:39:26,170
of size and see a scenes of cross

851
00:39:24,579 --> 00:39:28,119
compute the cutter graphic ash of the

852
00:39:26,170 --> 00:39:30,579
world and simply replace the signature

853
00:39:28,119 --> 00:39:33,400
with the value of this hash and we can

854
00:39:30,579 --> 00:39:36,280
use the CV Fabian just presented to

855
00:39:33,400 --> 00:39:37,930
bypass the human DVD check to push it

856
00:39:36,280 --> 00:39:41,440
into the flour into the flash memory and

857
00:39:37,930 --> 00:39:43,720
reboot the server it was almost perfect

858
00:39:41,440 --> 00:39:48,190
but it didn't work

859
00:39:43,720 --> 00:39:50,379
just we screw up a little I to Anna's a

860
00:39:48,190 --> 00:39:52,690
situation we were in we had a new

861
00:39:50,380 --> 00:39:56,740
blinking mode abroad I lost services

862
00:39:52,690 --> 00:40:00,670
seems started but quite unresponsive and

863
00:39:56,740 --> 00:40:02,709
broken the server was not in recovery

864
00:40:00,670 --> 00:40:05,140
mode and we had that we had no way to

865
00:40:02,710 --> 00:40:07,779
push a new firmware to restore clean

866
00:40:05,140 --> 00:40:10,299
state so it was a kind of messy and we

867
00:40:07,779 --> 00:40:12,789
needed more information on I know for we

868
00:40:10,299 --> 00:40:14,890
we had some side I would put directly

869
00:40:12,789 --> 00:40:18,369
from the motherboard so that's why we

870
00:40:14,890 --> 00:40:21,368
try to find the same feature on idle

871
00:40:18,369 --> 00:40:23,650
five Mosab on so we starting started

872
00:40:21,369 --> 00:40:25,779
probing on the motherboard with logic

873
00:40:23,650 --> 00:40:28,990
analyzers and we quickly found this very

874
00:40:25,779 --> 00:40:31,630
useful pins here and especially the side

875
00:40:28,990 --> 00:40:33,490
would put from the i/o systems at the

876
00:40:31,630 --> 00:40:35,559
same time we started probing with the

877
00:40:33,490 --> 00:40:37,808
flash memory of The Hideaway a high low

878
00:40:35,559 --> 00:40:41,829
ROM is thought we directly be able to

879
00:40:37,809 --> 00:40:43,869
write into it and and we flip some some

880
00:40:41,829 --> 00:40:46,299
bytes or write anything we want if we

881
00:40:43,869 --> 00:40:48,730
want to fashion your femur directly so

882
00:40:46,299 --> 00:40:50,740
using the celluloid put from the

883
00:40:48,730 --> 00:40:53,650
directly from the system's we are able

884
00:40:50,740 --> 00:40:55,959
to identify some error code in the

885
00:40:53,650 --> 00:40:58,630
channel and to locate and to understand

886
00:40:55,960 --> 00:41:01,359
what we did wrong actually we had

887
00:40:58,630 --> 00:41:03,489
flood back dot user no no he had a bad

888
00:41:01,359 --> 00:41:06,249
decompression cut which introduced a

889
00:41:03,489 --> 00:41:09,779
very late error into the elf passer of

890
00:41:06,249 --> 00:41:13,209
the integrity channel and but the

891
00:41:09,779 --> 00:41:14,559
channel taught it has been six whole in

892
00:41:13,210 --> 00:41:16,660
loading the user none but it was not

893
00:41:14,559 --> 00:41:19,930
quite the case that's why you didn't put

894
00:41:16,660 --> 00:41:23,979
the recovery FTP server so we quickly

895
00:41:19,930 --> 00:41:26,828
fixed it we flip a bite into within the

896
00:41:23,979 --> 00:41:29,259
flash memory to trash integrity then I

897
00:41:26,829 --> 00:41:31,749
look I look channel will detect this and

898
00:41:29,259 --> 00:41:34,599
ensure in recovery mode we're able to

899
00:41:31,749 --> 00:41:36,368
patch a new clean fumarole and from

900
00:41:34,599 --> 00:41:39,759
there of course we fix talker and we've

901
00:41:36,369 --> 00:41:49,809
been able to push back door firmware and

902
00:41:39,759 --> 00:41:52,269
we will show you the demo okay so quick

903
00:41:49,809 --> 00:41:55,479
demo so on the left you have the serial

904
00:41:52,269 --> 00:41:57,390
output on the upper right the host

905
00:41:55,479 --> 00:42:01,269
printing system and then the attacker

906
00:41:57,390 --> 00:42:03,819
here so first if the attacker tried to

907
00:42:01,269 --> 00:42:08,049
contact the SSH service it's a normal

908
00:42:03,819 --> 00:42:11,229
SSH running on the HP server on the line

909
00:42:08,049 --> 00:42:14,410
X we will try to flash modified firmware

910
00:42:11,229 --> 00:42:19,779
so here is the exploitation for the the

911
00:42:14,410 --> 00:42:21,910
venerable in the fume task so well if we

912
00:42:19,779 --> 00:42:23,890
try to fly to firmware and it's older

913
00:42:21,910 --> 00:42:26,529
than the actual version it tells us it

914
00:42:23,890 --> 00:42:28,569
can but well you can just ask him to a

915
00:42:26,529 --> 00:42:30,910
load and read and it will flash it

916
00:42:28,569 --> 00:42:33,849
without any problem now keep in mind

917
00:42:30,910 --> 00:42:36,129
we've been pattern followers so now we

918
00:42:33,849 --> 00:42:38,969
flash or firmware containing both the

919
00:42:36,130 --> 00:42:40,950
vulnerability in in fume and the

920
00:42:38,969 --> 00:42:48,940
vulnerability to bypass the secure boot

921
00:42:40,950 --> 00:42:54,729
then I low we boots up it gets an IP

922
00:42:48,940 --> 00:42:59,710
address from from DHCP and now if we try

923
00:42:54,729 --> 00:43:01,509
to connect to the SSH service up so we

924
00:42:59,710 --> 00:43:04,390
change the banner to show that we can

925
00:43:01,509 --> 00:43:09,779
backdoor the user none we can buy you a

926
00:43:04,390 --> 00:43:12,460
terminal it was very important so yeah

927
00:43:09,779 --> 00:43:15,190
we bypass the secure boot we're apart

928
00:43:12,460 --> 00:43:17,050
of course to HPV which name interlocal

929
00:43:15,190 --> 00:43:20,190
bypass of security rescission in femoral

930
00:43:17,050 --> 00:43:26,020
update and there it is affixed in either

931
00:43:20,190 --> 00:43:28,270
37 in Sahana of October 2018 there's

932
00:43:26,020 --> 00:43:30,430
kind of an issue is that because the

933
00:43:28,270 --> 00:43:32,980
root of the root of dress is kind of

934
00:43:30,430 --> 00:43:35,350
compromised and when we analyze the

935
00:43:32,980 --> 00:43:37,270
update the past they released we find we

936
00:43:35,350 --> 00:43:39,640
found that a first first and second

937
00:43:37,270 --> 00:43:42,040
stage with others have not been modified

938
00:43:39,640 --> 00:43:43,990
at order totally unchanged and we of

939
00:43:42,040 --> 00:43:46,360
course average legitimately sign the

940
00:43:43,990 --> 00:43:49,600
venerable channels in the wine that we

941
00:43:46,360 --> 00:43:53,080
can use the fact that I know still allow

942
00:43:49,600 --> 00:43:55,960
film we're done well is frenetic because

943
00:43:53,080 --> 00:43:58,420
we can we have mini scenario we can

944
00:43:55,960 --> 00:44:00,940
build some Frankenstein camera with our

945
00:43:58,420 --> 00:44:04,030
venerable Canon signed by HP of course

946
00:44:00,940 --> 00:44:07,300
or we can simply done great

947
00:44:04,030 --> 00:44:09,550
Sophia to version venerable and what we

948
00:44:07,300 --> 00:44:11,770
found out which will serve actually they

949
00:44:09,550 --> 00:44:14,640
don't use any means like the hardware

950
00:44:11,770 --> 00:44:18,190
means to revoke the signature of this

951
00:44:14,640 --> 00:44:22,600
compromised vernier bursary channels

952
00:44:18,190 --> 00:44:27,220
like our way of use or seen I that with

953
00:44:22,600 --> 00:44:29,049
H with I know five Russian 139 their

954
00:44:27,220 --> 00:44:31,480
release as I said really introduced an

955
00:44:29,050 --> 00:44:34,300
antigen great feature new policy

956
00:44:31,480 --> 00:44:36,580
settings that you can enable using using

957
00:44:34,300 --> 00:44:38,860
the web interface but it's still a

958
00:44:36,580 --> 00:44:40,060
software fix in the the hot date card

959
00:44:38,860 --> 00:44:43,980
that which checks the referent to be

960
00:44:40,060 --> 00:44:48,040
sure that you don't downgrade the camera

961
00:44:43,980 --> 00:44:50,380
we think his status with that you saw

962
00:44:48,040 --> 00:44:52,840
into the hip from you can you have no

963
00:44:50,380 --> 00:44:54,520
way to from internal interface to

964
00:44:52,840 --> 00:44:57,520
decipher it once you have heard about it

965
00:44:54,520 --> 00:44:59,620
but still it's some software fix and if

966
00:44:57,520 --> 00:45:01,990
you have a physical access to flash

967
00:44:59,620 --> 00:45:03,730
memory off we or if you can use

968
00:45:01,990 --> 00:45:07,450
vulnerability to you a cleat or to the

969
00:45:03,730 --> 00:45:10,330
SPI service and write your own firmware

970
00:45:07,450 --> 00:45:13,839
into the flash you can still bypass the

971
00:45:10,330 --> 00:45:16,420
secure boot so to conclude a whole to

972
00:45:13,840 --> 00:45:18,040
study we have been able to discover many

973
00:45:16,420 --> 00:45:21,430
many machines that allowed us to really

974
00:45:18,040 --> 00:45:23,410
explore all the systems and understand

975
00:45:21,430 --> 00:45:25,710
what are the capabilities it of France

976
00:45:23,410 --> 00:45:28,259
especially with is

977
00:45:25,710 --> 00:45:30,810
dedicated hardware hardware like the DMX

978
00:45:28,260 --> 00:45:32,670
s Aust and a video external channels

979
00:45:30,810 --> 00:45:33,810
that can be built upon that that was

980
00:45:32,670 --> 00:45:35,670
very interesting to understand the

981
00:45:33,810 --> 00:45:38,670
security model and the threat that posed

982
00:45:35,670 --> 00:45:41,940
this kind of feature inside inside the

983
00:45:38,670 --> 00:45:44,100
network from there we've been able to

984
00:45:41,940 --> 00:45:46,320
summarize our discovery we build some

985
00:45:44,100 --> 00:45:48,150
kind of small t chain from a LAN an

986
00:45:46,320 --> 00:45:50,880
attacker can perform some network

987
00:45:48,150 --> 00:45:51,630
reconnaissance try to discover some

988
00:45:50,880 --> 00:45:55,170
exposed

989
00:45:51,630 --> 00:45:57,330
I know systems we have some endpoints on

990
00:45:55,170 --> 00:45:59,580
the web server that leak lots of memory

991
00:45:57,330 --> 00:46:01,560
the XML data in points otherwise you can

992
00:45:59,580 --> 00:46:03,210
do simply simple by no grabbing and if

993
00:46:01,560 --> 00:46:05,640
you're for example web server is still

994
00:46:03,210 --> 00:46:07,290
vulnerable to the gravity represent

995
00:46:05,640 --> 00:46:10,140
represented at the beginning of stores

996
00:46:07,290 --> 00:46:14,430
you can attack your server from Z from

997
00:46:10,140 --> 00:46:17,250
it and then use DMF feature to pivot to

998
00:46:14,430 --> 00:46:19,500
other hosts from partition network also

999
00:46:17,250 --> 00:46:22,230
if an attacker is about to compromise

1000
00:46:19,500 --> 00:46:24,000
let's say unexposed services I can

1001
00:46:22,230 --> 00:46:26,670
expose web server database or anything

1002
00:46:24,000 --> 00:46:28,590
and can access a host from there then

1003
00:46:26,670 --> 00:46:30,540
you can access the ID of sorry from

1004
00:46:28,590 --> 00:46:32,700
there then it can pivot through the

1005
00:46:30,540 --> 00:46:34,710
hydro and for example to pivot through

1006
00:46:32,700 --> 00:46:36,240
an initiation domain and to attack other

1007
00:46:34,710 --> 00:46:40,080
servers that will not have been

1008
00:46:36,240 --> 00:46:42,180
reachable from it otherwise I'll oh five

1009
00:46:40,080 --> 00:46:44,970
we have a kind of the same issue of

1010
00:46:42,180 --> 00:46:48,660
course if from padishah network we have

1011
00:46:44,970 --> 00:46:50,399
the same issue and of course we you

1012
00:46:48,660 --> 00:46:52,500
still have value we still have the issue

1013
00:46:50,400 --> 00:46:58,140
that the secure boot cannot be trusted

1014
00:46:52,500 --> 00:47:01,020
at that part so no more from a system

1015
00:46:58,140 --> 00:47:03,600
point of view I know have a very large

1016
00:47:01,020 --> 00:47:05,460
attack surface expose both on the

1017
00:47:03,600 --> 00:47:08,190
administration and position network so

1018
00:47:05,460 --> 00:47:10,470
it's very important and patch systems

1019
00:47:08,190 --> 00:47:12,900
will be a mess it will be a dreamland

1020
00:47:10,470 --> 00:47:14,700
for a twelvemonth ready network

1021
00:47:12,900 --> 00:47:17,160
isolation and segregation is the most

1022
00:47:14,700 --> 00:47:20,040
but as we saw it may be not enough

1023
00:47:17,160 --> 00:47:23,009
because we can build some channel from

1024
00:47:20,040 --> 00:47:25,770
through yellow so it's really critical

1025
00:47:23,010 --> 00:47:27,210
to keep the system's up-to-date as soon

1026
00:47:25,770 --> 00:47:30,870
as possible and to monitor awesome of

1027
00:47:27,210 --> 00:47:33,990
course I love five

1028
00:47:30,870 --> 00:47:35,549
basically it's an was quite the same as

1029
00:47:33,990 --> 00:47:36,930
I go Freud where is the system has not

1030
00:47:35,550 --> 00:47:39,299
changed more

1031
00:47:36,930 --> 00:47:41,759
but of course we have interesting

1032
00:47:39,299 --> 00:47:44,279
editing feature like security mud and

1033
00:47:41,759 --> 00:47:47,190
also the study silicone which iswhich

1034
00:47:44,279 --> 00:47:49,039
will have been a channel feature from HP

1035
00:47:47,190 --> 00:47:51,539
and for this service but really actually

1036
00:47:49,039 --> 00:47:53,729
implementation is totally enjoyable by

1037
00:47:51,539 --> 00:47:56,700
the flooding so the front implementation

1038
00:47:53,729 --> 00:48:00,269
the future is totally India by that they

1039
00:47:56,700 --> 00:48:03,118
as soon as is no Hardware part vacation

1040
00:48:00,269 --> 00:48:06,749
with some kind of shoes with venerable

1041
00:48:03,119 --> 00:48:09,420
and the seeker would cannot be trusted

1042
00:48:06,749 --> 00:48:11,098
just a few Google on of so for red team

1043
00:48:09,420 --> 00:48:13,710
out at we we believe it's a great

1044
00:48:11,099 --> 00:48:16,499
exercise to play with your blue team BMC

1045
00:48:13,710 --> 00:48:20,130
systems are often found and patch or

1046
00:48:16,499 --> 00:48:21,868
loosely monitored in a network and they

1047
00:48:20,130 --> 00:48:25,380
can happen attack pass to otherwise

1048
00:48:21,869 --> 00:48:27,269
secure systems like we show and of

1049
00:48:25,380 --> 00:48:30,359
course also we can achieve persistence

1050
00:48:27,269 --> 00:48:32,839
even in case of Systema intonation even

1051
00:48:30,359 --> 00:48:35,069
if you remove and change the odd right

1052
00:48:32,839 --> 00:48:36,828
we have published an extensive tour tips

1053
00:48:35,069 --> 00:48:39,630
that you can use to build your own

1054
00:48:36,829 --> 00:48:41,489
attack veto and back go on to pivot read

1055
00:48:39,630 --> 00:48:43,349
and yeah it's the greatest is to play

1056
00:48:41,489 --> 00:48:45,140
with the blue team to cover some

1057
00:48:43,349 --> 00:48:47,400
monitoring blind spot possibly and

1058
00:48:45,140 --> 00:48:49,529
provide off cross and incentive to patch

1059
00:48:47,400 --> 00:48:52,049
to demonstrate the need and to

1060
00:48:49,529 --> 00:48:55,739
marginally raise awareness around the

1061
00:48:52,049 --> 00:48:58,349
BMC's so just tell us the final words

1062
00:48:55,739 --> 00:49:00,900
we'd like to thank many people first of

1063
00:48:58,349 --> 00:49:02,130
all HPP software teams which we have

1064
00:49:00,900 --> 00:49:04,940
been working a lot since Allah

1065
00:49:02,130 --> 00:49:08,009
previously and especially mark and Scott

1066
00:49:04,940 --> 00:49:09,660
friends is that yeah fil fill a tree of

1067
00:49:08,009 --> 00:49:13,650
course which we did a great job working

1068
00:49:09,660 --> 00:49:17,249
on that purchasing and working for 18

1069
00:49:13,650 --> 00:49:19,680
years releasing this district as we said

1070
00:49:17,249 --> 00:49:21,749
many times we have all the tools we

1071
00:49:19,680 --> 00:49:22,348
developed scrape and share that are on

1072
00:49:21,749 --> 00:49:25,468
the github

1073
00:49:22,349 --> 00:49:28,519
I'll check hit and thank you for your

1074
00:49:25,469 --> 00:49:30,900
attentions and if you have any questions

1075
00:49:28,519 --> 00:49:39,919
really fine

1076
00:49:30,900 --> 00:49:39,919
[Applause]

1077
00:49:41,890 --> 00:50:03,310
who wants to ask a question why everyone

1078
00:49:55,190 --> 00:50:03,310
is angry last chance

1079
00:50:05,220 --> 00:50:11,470
[Music]

1080
00:50:08,350 --> 00:50:11,470
thank you

