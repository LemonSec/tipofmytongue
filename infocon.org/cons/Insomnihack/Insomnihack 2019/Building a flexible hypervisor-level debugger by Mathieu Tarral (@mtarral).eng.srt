1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:13,440 --> 00:00:16,560
well hi everyone thank you for being

3
00:00:15,870 --> 00:00:18,750
here today

4
00:00:16,560 --> 00:00:21,840
my name is metal ring settings will be

5
00:00:18,750 --> 00:00:23,570
at insomniac with you and welcome to to

6
00:00:21,840 --> 00:00:27,390
this talk we are going to talk about

7
00:00:23,570 --> 00:00:29,310
debuggers and hypervisors but mostly

8
00:00:27,390 --> 00:00:32,099
what I would like to talk about is how

9
00:00:29,310 --> 00:00:34,440
we can explore the possibilities of

10
00:00:32,098 --> 00:00:37,199
using the hypervisor as a new kind of

11
00:00:34,440 --> 00:00:41,610
Lee Berger a flexible paper girl in this

12
00:00:37,200 --> 00:00:43,440
case before we begin I really hope that

13
00:00:41,610 --> 00:00:45,660
this ETF is doing well for you if you

14
00:00:43,440 --> 00:00:46,550
are playing another city earth player

15
00:00:45,660 --> 00:00:48,839
myself

16
00:00:46,550 --> 00:00:50,819
I'm just asking this question because I

17
00:00:48,840 --> 00:00:52,860
heard that you had very like really

18
00:00:50,820 --> 00:00:54,840
tough challenges in the past years like

19
00:00:52,860 --> 00:00:58,170
I was speaking about challenges like

20
00:00:54,840 --> 00:01:00,240
escape me or at least one two three

21
00:00:58,170 --> 00:01:03,120
this type of churches were really tough

22
00:01:00,240 --> 00:01:05,640
because you are given a custom

23
00:01:03,120 --> 00:01:08,310
hypervisor based on KVM and you had to

24
00:01:05,640 --> 00:01:10,470
exploit the VM now what's what three

25
00:01:08,310 --> 00:01:13,109
particular if this changes is that you

26
00:01:10,470 --> 00:01:14,670
don't have any debug API into the VM so

27
00:01:13,109 --> 00:01:16,829
the hypervisor doesn't really help you

28
00:01:14,670 --> 00:01:20,609
to the mat the VM you are you have to

29
00:01:16,829 --> 00:01:23,038
rely on exploitation so I stopped you so

30
00:01:20,609 --> 00:01:25,889
disclaimer I can't really help you with

31
00:01:23,039 --> 00:01:27,630
these challenges I cannot help you if

32
00:01:25,889 --> 00:01:32,039
the hypervisor doesn't provide you tip a

33
00:01:27,630 --> 00:01:34,350
KPI what I can do otherwise is try to

34
00:01:32,039 --> 00:01:36,209
show you what can be done if the

35
00:01:34,350 --> 00:01:38,068
hypervisor provides you a dybbuk api

36
00:01:36,209 --> 00:01:40,920
which is better machine introspection

37
00:01:38,069 --> 00:01:43,729
and how can we make the most out of the

38
00:01:40,920 --> 00:01:53,880
api and how to leverage them to build

39
00:01:43,729 --> 00:01:57,479
flexible debuggers so first Who am I

40
00:01:53,880 --> 00:01:59,399
what's my background a bit I'm an SF

41
00:01:57,479 --> 00:02:03,689
secure fellow and I've been working on

42
00:01:59,399 --> 00:02:06,899
building stealth and hypervisor based

43
00:02:03,689 --> 00:02:09,269
sandboxes in the past so the technology

44
00:02:06,899 --> 00:02:11,240
under that is very much introspection so

45
00:02:09,270 --> 00:02:14,060
I've working we only took it

46
00:02:11,240 --> 00:02:15,560
along the way I've built the cave-in via

47
00:02:14,060 --> 00:02:19,550
my community which aims to bring

48
00:02:15,560 --> 00:02:22,610
standard and unified interface via my

49
00:02:19,550 --> 00:02:24,230
interface on KVM and the reason I'm

50
00:02:22,610 --> 00:02:27,680
interested in debuggers is because I've

51
00:02:24,230 --> 00:02:30,440
seen what marathon boxes can do when

52
00:02:27,680 --> 00:02:31,780
they are based on the hypervisor and on

53
00:02:30,440 --> 00:02:35,030
the set of debugger we are still

54
00:02:31,780 --> 00:02:36,980
debugging in the VM but so we are using

55
00:02:35,030 --> 00:02:38,120
the full capabilities of hypervisors in

56
00:02:36,980 --> 00:02:43,070
the case of debuggers that's how I

57
00:02:38,120 --> 00:02:45,440
became interested in the topic so our

58
00:02:43,070 --> 00:02:47,120
agenda for today first we're going to a

59
00:02:45,440 --> 00:02:49,100
bit explain why I'm working from the

60
00:02:47,120 --> 00:02:52,760
hypervisor is interesting what are the

61
00:02:49,100 --> 00:02:54,530
concrete use cases then a bit of history

62
00:02:52,760 --> 00:02:56,929
what are the different projects that you

63
00:02:54,530 --> 00:02:59,720
might have heard of the changes that you

64
00:02:56,930 --> 00:03:01,700
need to face of course I will do a quick

65
00:02:59,720 --> 00:03:03,859
demo of the particular back to present

66
00:03:01,700 --> 00:03:05,299
today then we'll talk about hyper

67
00:03:03,860 --> 00:03:07,130
breakpoints break points from the

68
00:03:05,300 --> 00:03:09,530
hypervisor what is the state of them and

69
00:03:07,130 --> 00:03:11,600
how we can do better for our debuggers

70
00:03:09,530 --> 00:03:16,760
and then we'd have talked about the

71
00:03:11,600 --> 00:03:19,000
future so let's start first why why do

72
00:03:16,760 --> 00:03:22,160
you want to dip back from the hypervisor

73
00:03:19,000 --> 00:03:23,840
what are the confuse cases and why I

74
00:03:22,160 --> 00:03:27,890
think they are going to become more

75
00:03:23,840 --> 00:03:29,510
relevant in the future let's start with

76
00:03:27,890 --> 00:03:33,829
the most obvious one everyone can think

77
00:03:29,510 --> 00:03:36,679
of your debugger will always have a side

78
00:03:33,830 --> 00:03:38,960
effect and observer effect and if you

79
00:03:36,680 --> 00:03:41,180
think about my analysis that has already

80
00:03:38,960 --> 00:03:42,890
been the problem because your

81
00:03:41,180 --> 00:03:46,340
traditional debugger will have no no

82
00:03:42,890 --> 00:03:48,920
real stealth if you try to debug a

83
00:03:46,340 --> 00:03:51,560
process the debugger will always like to

84
00:03:48,920 --> 00:03:52,820
leave some structures modified in the

85
00:03:51,560 --> 00:03:55,550
government environment of your process

86
00:03:52,820 --> 00:03:58,070
it will alter the syscall behavior they

87
00:03:55,550 --> 00:03:59,720
were written different values and your

88
00:03:58,070 --> 00:04:01,970
breakpoints sometimes will be physical

89
00:03:59,720 --> 00:04:05,510
visible so to analyze advanced malware

90
00:04:01,970 --> 00:04:08,600
is it's a real pain and the robustness

91
00:04:05,510 --> 00:04:09,950
or so we don't think about it but the

92
00:04:08,600 --> 00:04:12,650
debug API is from the operating system

93
00:04:09,950 --> 00:04:15,339
has been designed in the 19th and there

94
00:04:12,650 --> 00:04:17,480
was no memory at that time so the

95
00:04:15,340 --> 00:04:20,750
Morales case has never been taken into

96
00:04:17,480 --> 00:04:22,610
account and also the debugger will run

97
00:04:20,750 --> 00:04:24,210
in ring 0 at some time at the same

98
00:04:22,610 --> 00:04:26,310
privilege level as the Maya

99
00:04:24,210 --> 00:04:29,460
so we'll just fight each other to gain

100
00:04:26,310 --> 00:04:31,169
control and to place hooks in the system

101
00:04:29,460 --> 00:04:35,580
so we are just fighting Maya at the same

102
00:04:31,169 --> 00:04:37,639
trivia level so we can't really win so

103
00:04:35,580 --> 00:04:40,229
that was the first case marginalizes

104
00:04:37,639 --> 00:04:42,539
then what you have is that sometimes

105
00:04:40,229 --> 00:04:45,300
this debugger effect is intentional

106
00:04:42,539 --> 00:04:47,849
think about what operating systems can

107
00:04:45,300 --> 00:04:49,830
do if they don't want you to debug some

108
00:04:47,849 --> 00:04:52,469
of their features I'm thinking about

109
00:04:49,830 --> 00:04:54,198
here the protected media path which has

110
00:04:52,470 --> 00:04:57,419
been introduced since Windows Vista

111
00:04:54,199 --> 00:05:00,300
which is used to tip to enable the

112
00:04:57,419 --> 00:05:01,710
direct content on your computer so they

113
00:05:00,300 --> 00:05:03,900
don't want you to reverse this kind of

114
00:05:01,710 --> 00:05:06,900
and debug this kind of features because

115
00:05:03,900 --> 00:05:08,969
it protects the DRM and if you think

116
00:05:06,900 --> 00:05:11,219
about new security features like patch

117
00:05:08,970 --> 00:05:14,370
guard well debugging patch guard is it's

118
00:05:11,220 --> 00:05:16,229
hard because when you enable the

119
00:05:14,370 --> 00:05:18,120
debugger and you switch windows into

120
00:05:16,229 --> 00:05:20,039
debug mode that guard has to disable

121
00:05:18,120 --> 00:05:23,669
itself otherwise you will just try to

122
00:05:20,039 --> 00:05:25,349
fight with the debugger so the buggy

123
00:05:23,669 --> 00:05:27,750
patch guard is a bit complicated when

124
00:05:25,349 --> 00:05:30,719
you are in debug mode and going a bit

125
00:05:27,750 --> 00:05:33,210
further what you have today is an

126
00:05:30,720 --> 00:05:36,120
incomplete system view what you see here

127
00:05:33,210 --> 00:05:39,570
is the Windows virtual secure mode off

128
00:05:36,120 --> 00:05:41,070
on Windows 10 in terms of debugging and

129
00:05:39,570 --> 00:05:43,979
think about inconsistent system view

130
00:05:41,070 --> 00:05:45,870
because today what you have in windbg

131
00:05:43,979 --> 00:05:48,210
you have extensions to debug the state

132
00:05:45,870 --> 00:05:51,030
of hyper-v you can read write the full

133
00:05:48,210 --> 00:05:52,830
memory but you don't really have an easy

134
00:05:51,030 --> 00:05:55,710
way to debug the secure kernel here

135
00:05:52,830 --> 00:05:57,630
which is isolated so you have to do your

136
00:05:55,710 --> 00:06:00,650
own breakpoints and stuff so it's a bit

137
00:05:57,630 --> 00:06:03,870
complicated and we can conclude that

138
00:06:00,650 --> 00:06:05,969
today's the debuggers are in a way

139
00:06:03,870 --> 00:06:07,830
fighting with the new operating system

140
00:06:05,969 --> 00:06:10,020
security features in the case of Windows

141
00:06:07,830 --> 00:06:14,880
10 so we'd like to gain back some

142
00:06:10,020 --> 00:06:16,560
control over that another use case

143
00:06:14,880 --> 00:06:18,810
interesting from to debug from the

144
00:06:16,560 --> 00:06:20,820
hypervisor is the boot sequence analyzes

145
00:06:18,810 --> 00:06:22,590
what you can see here is the boot

146
00:06:20,820 --> 00:06:26,370
sequence from the BIOS the biosphere run

147
00:06:22,590 --> 00:06:28,289
the post test then loads the MBR which

148
00:06:26,370 --> 00:06:30,090
itself loads some code from the active

149
00:06:28,289 --> 00:06:32,750
partition and then loads the boot loader

150
00:06:30,090 --> 00:06:37,219
which is your grub or ntldr for Windows

151
00:06:32,750 --> 00:06:41,930
what we can do here is use a USB stick

152
00:06:37,220 --> 00:06:44,240
boot from USB in this USB I can load my

153
00:06:41,930 --> 00:06:46,790
kernel into memory which will be my

154
00:06:44,240 --> 00:06:48,650
hypervisor and this hello

155
00:06:46,790 --> 00:06:51,410
this hypervisor will pray to first

156
00:06:48,650 --> 00:06:54,679
avital machine and his first instruction

157
00:06:51,410 --> 00:06:56,360
will be a BIOS interrupt the interrupts

158
00:06:54,680 --> 00:06:58,400
durricks 19 it's a specific kind of

159
00:06:56,360 --> 00:07:00,500
interrupts that tells the BIOS hey can

160
00:06:58,400 --> 00:07:02,870
you just reload the first device boot

161
00:07:00,500 --> 00:07:06,020
device that you can find and usually

162
00:07:02,870 --> 00:07:08,180
it's the hard drive so we are we started

163
00:07:06,020 --> 00:07:10,700
the boot sequence but this time we are

164
00:07:08,180 --> 00:07:12,920
in a virtual machine so we vent relized

165
00:07:10,700 --> 00:07:15,080
our boot sequence except for about for

166
00:07:12,920 --> 00:07:17,240
the post-test of course but for the rest

167
00:07:15,080 --> 00:07:21,050
of it we can fully analyze it under a

168
00:07:17,240 --> 00:07:22,520
hypervisor so it's quite convenient it

169
00:07:21,050 --> 00:07:25,240
ok so you have I have indeed it to it

170
00:07:22,520 --> 00:07:27,500
but it should be also possible and

171
00:07:25,240 --> 00:07:30,350
another interesting use case is

172
00:07:27,500 --> 00:07:31,430
beautycon also in fact I didn't know

173
00:07:30,350 --> 00:07:33,590
when I started working on this project

174
00:07:31,430 --> 00:07:35,960
that Eureka Rose was an interesting use

175
00:07:33,590 --> 00:07:38,570
case but if you think about it

176
00:07:35,960 --> 00:07:41,570
unicron's there are specialized embedded

177
00:07:38,570 --> 00:07:43,310
system images so you take your kernel

178
00:07:41,570 --> 00:07:46,270
and you take your application and you

179
00:07:43,310 --> 00:07:48,950
merge it into one let's say application

180
00:07:46,270 --> 00:07:51,049
and you can only stripped from any

181
00:07:48,950 --> 00:07:52,909
unnecessary dependencies like there is

182
00:07:51,050 --> 00:07:55,729
no scheduler there is no runtime there

183
00:07:52,910 --> 00:07:57,910
is no tools on it and you separate file

184
00:07:55,729 --> 00:08:00,830
from - from everything that it it boots

185
00:07:57,910 --> 00:08:03,740
faster but it's everything runs in ring

186
00:08:00,830 --> 00:08:06,979
zero at the kernel level and it's only

187
00:08:03,740 --> 00:08:08,120
one process and one at Y space and of

188
00:08:06,979 --> 00:08:11,479
course the consequence of that is that

189
00:08:08,120 --> 00:08:12,890
there is no debugging stuff so you may

190
00:08:11,479 --> 00:08:15,500
have to rely on the hypervisor

191
00:08:12,890 --> 00:08:18,740
underneath it so another interesting use

192
00:08:15,500 --> 00:08:20,780
case but apart from this very specific

193
00:08:18,740 --> 00:08:23,510
use cases marinara's is unique and all

194
00:08:20,780 --> 00:08:25,700
etc it's convenient to debug from the

195
00:08:23,510 --> 00:08:27,950
hypervisor because your guests are

196
00:08:25,700 --> 00:08:29,900
unmodified untouched you don't have to

197
00:08:27,950 --> 00:08:32,240
go into the guest install the Windows

198
00:08:29,900 --> 00:08:34,309
SDK in switch you get in to debug mode

199
00:08:32,240 --> 00:08:35,630
so it you change the hardware sometimes

200
00:08:34,309 --> 00:08:39,919
because you have to introduce this your

201
00:08:35,630 --> 00:08:41,390
zero cable or something and and put the

202
00:08:39,919 --> 00:08:44,360
system into development so we can debug

203
00:08:41,390 --> 00:08:45,650
your VMs on the fly so which is really

204
00:08:44,360 --> 00:08:48,950
convenient

205
00:08:45,650 --> 00:08:53,290
and if you could look a bit further what

206
00:08:48,950 --> 00:08:56,089
you get is a prospect from deeper key

207
00:08:53,290 --> 00:08:58,400
basically you are you know you can debug

208
00:08:56,089 --> 00:09:01,070
your Windows Linux on request from the

209
00:08:58,400 --> 00:09:04,310
hypervisor and you have a unified debug

210
00:09:01,070 --> 00:09:06,230
framework and you can build your scripts

211
00:09:04,310 --> 00:09:13,880
and your knowledge on top of just one

212
00:09:06,230 --> 00:09:15,710
tool which is quite cool now and the

213
00:09:13,880 --> 00:09:17,839
last interesting things is that we might

214
00:09:15,710 --> 00:09:21,589
also want to follow the Mariel Sun boxes

215
00:09:17,839 --> 00:09:23,390
trend nowadays the marathon boxes there

216
00:09:21,589 --> 00:09:26,000
are hypervisor based if you think about

217
00:09:23,390 --> 00:09:28,490
VMware age or sandbox or roof you're

218
00:09:26,000 --> 00:09:31,040
heard of it these are all some boxes

219
00:09:28,490 --> 00:09:33,710
based on hypervisor using VMI like we

220
00:09:31,040 --> 00:09:35,870
said and they have demonstrates that

221
00:09:33,710 --> 00:09:38,630
it's really interesting because they are

222
00:09:35,870 --> 00:09:40,160
cross-platform they are agentless so you

223
00:09:38,630 --> 00:09:42,800
don't have to maintain the mesh theater

224
00:09:40,160 --> 00:09:45,319
machines or provided them provision them

225
00:09:42,800 --> 00:09:48,829
and they have demonstrated out to get

226
00:09:45,320 --> 00:09:50,270
stealth break points really stealth and

227
00:09:48,830 --> 00:09:52,670
also some interesting features like

228
00:09:50,270 --> 00:09:54,560
process hijacking so I'm just targeting

229
00:09:52,670 --> 00:09:56,599
one process in my VM for example

230
00:09:54,560 --> 00:09:58,520
exploded eggsy I'm hijacking the

231
00:09:56,600 --> 00:10:01,160
execution and I'm injecting a code that

232
00:09:58,520 --> 00:10:04,550
will code call an API like a crate

233
00:10:01,160 --> 00:10:08,060
process so I'm directly creating a new

234
00:10:04,550 --> 00:10:12,680
process from the hypervisor again we

235
00:10:08,060 --> 00:10:16,099
interesting so if you want to do a bit

236
00:10:12,680 --> 00:10:19,699
of recap on the why concrete use case is

237
00:10:16,100 --> 00:10:21,290
my analysis advanced my analysis because

238
00:10:19,700 --> 00:10:23,510
also because you don't want you don't

239
00:10:21,290 --> 00:10:25,670
trust your operating system Depok api's

240
00:10:23,510 --> 00:10:27,140
or you don't want to rely on them you

241
00:10:25,670 --> 00:10:29,990
want to rely on something a bit lower

242
00:10:27,140 --> 00:10:32,990
level and the boot sequence and unique

243
00:10:29,990 --> 00:10:35,300
analysis are concrete use cases and the

244
00:10:32,990 --> 00:10:38,000
convenience of having unmodified guest

245
00:10:35,300 --> 00:10:40,449
and a unified tool for operating system

246
00:10:38,000 --> 00:10:43,190
debugging and for all of these reasons

247
00:10:40,450 --> 00:10:46,190
we want to leverage the hypervisor as a

248
00:10:43,190 --> 00:10:51,140
new debugging platform and exploit the

249
00:10:46,190 --> 00:10:52,910
full capabilities of it now a bit of

250
00:10:51,140 --> 00:10:54,920
history I'm not the first one to look

251
00:10:52,910 --> 00:10:57,260
into this topic there have been plenty

252
00:10:54,920 --> 00:11:00,339
of projects

253
00:10:57,260 --> 00:11:02,480
and now we are going to try to look at

254
00:11:00,340 --> 00:11:04,010
at these different projects what they

255
00:11:02,480 --> 00:11:06,340
are doing and if that if they are the

256
00:11:04,010 --> 00:11:09,890
same categories are they maintained etc

257
00:11:06,340 --> 00:11:12,380
so I try to do a bit of a timeline from

258
00:11:09,890 --> 00:11:14,170
2003 until today this is our all the

259
00:11:12,380 --> 00:11:18,410
hypervisor value matters that I could

260
00:11:14,170 --> 00:11:22,610
reference starting from Q gdb step 2

261
00:11:18,410 --> 00:11:25,100
today so they are not all the same that

262
00:11:22,610 --> 00:11:29,300
are doing the same job so let's draw

263
00:11:25,100 --> 00:11:31,940
some categories top of it what

264
00:11:29,300 --> 00:11:35,719
categories do we have first

265
00:11:31,940 --> 00:11:36,830
the building hypervisor debug step to

266
00:11:35,720 --> 00:11:39,080
think that you have in your hypervisor

267
00:11:36,830 --> 00:11:41,110
like VMware you have some very tall

268
00:11:39,080 --> 00:11:44,300
debuggers to debug a physical machine

269
00:11:41,110 --> 00:11:46,790
using hyper hyper jacking or USB boot

270
00:11:44,300 --> 00:11:48,859
and you have the vector machine which I

271
00:11:46,790 --> 00:11:52,250
mean by debugging via to our Hardware

272
00:11:48,860 --> 00:11:55,190
debuggers and in this case this category

273
00:11:52,250 --> 00:11:58,250
of either emulated or free full

274
00:11:55,190 --> 00:12:01,310
vectorization but let's start by to

275
00:11:58,250 --> 00:12:02,630
debug stop and why we can do better this

276
00:12:01,310 --> 00:12:05,270
is your traditional debug stuff in your

277
00:12:02,630 --> 00:12:08,810
hypervisor or is that they have first

278
00:12:05,270 --> 00:12:12,410
they have no real stealth they just set

279
00:12:08,810 --> 00:12:16,479
a traditional cervixes in memory and it

280
00:12:12,410 --> 00:12:20,480
can be read so detected you can have

281
00:12:16,480 --> 00:12:22,610
hide hidden breakpoints for VMware if

282
00:12:20,480 --> 00:12:25,250
this configuration but it's using the

283
00:12:22,610 --> 00:12:27,860
debug registers so limited to four

284
00:12:25,250 --> 00:12:30,260
breakpoints there is no real guest

285
00:12:27,860 --> 00:12:32,660
awareness what you can do is develop the

286
00:12:30,260 --> 00:12:34,160
kernel that's made for it for it but you

287
00:12:32,660 --> 00:12:36,709
got the bug use an application and

288
00:12:34,160 --> 00:12:39,560
understand their context and there's no

289
00:12:36,710 --> 00:12:42,340
real flexibility because it's gdb only

290
00:12:39,560 --> 00:12:45,439
first and it's typed one hypervisor so

291
00:12:42,340 --> 00:12:47,510
you can go really far that's why I'm

292
00:12:45,440 --> 00:12:51,320
like to improve the states of this debug

293
00:12:47,510 --> 00:12:52,250
stuff then level categories the permits

294
00:12:51,320 --> 00:12:54,830
on debugger

295
00:12:52,250 --> 00:12:57,140
the roar this debugger is to debug a

296
00:12:54,830 --> 00:13:00,380
physical machine but using a hypervisor

297
00:12:57,140 --> 00:13:01,670
so in this category you have the

298
00:13:00,380 --> 00:13:03,560
categories hijacking

299
00:13:01,670 --> 00:13:06,290
so the temperature is a bit weird but it

300
00:13:03,560 --> 00:13:08,510
just means that you are viateur izing

301
00:13:06,290 --> 00:13:09,589
you host on the fly so we you load the

302
00:13:08,510 --> 00:13:12,170
driver

303
00:13:09,590 --> 00:13:16,220
system and this rivalry just virtualize

304
00:13:12,170 --> 00:13:19,040
your entire system on the flight so

305
00:13:16,220 --> 00:13:26,300
hyper the first category is hyper dbg in

306
00:13:19,040 --> 00:13:28,280
2010 and then you have Verde B G so

307
00:13:26,300 --> 00:13:30,349
hyper d BG than what they wanted is to

308
00:13:28,280 --> 00:13:33,110
debug our production systems

309
00:13:30,350 --> 00:13:36,410
just press f12 and you have a debugger

310
00:13:33,110 --> 00:13:38,810
puppy bin appearing on your on your

311
00:13:36,410 --> 00:13:41,480
machine and Verde PG I don't wanted to

312
00:13:38,810 --> 00:13:44,089
dip a jacquard basically using DMA

313
00:13:41,480 --> 00:13:46,040
attack in both cases the form is that

314
00:13:44,090 --> 00:13:47,990
you have to develop a driver for your

315
00:13:46,040 --> 00:13:49,520
operating system to do this hyper

316
00:13:47,990 --> 00:13:51,710
jacking so it's not really or a

317
00:13:49,520 --> 00:13:55,810
stochastic so that's why there people

318
00:13:51,710 --> 00:13:58,280
are discontinued the second category is

319
00:13:55,810 --> 00:14:01,040
USB boots this is more interesting

320
00:13:58,280 --> 00:14:02,209
because you are just boot that is the

321
00:14:01,040 --> 00:14:05,180
what I've just described in the Y

322
00:14:02,210 --> 00:14:06,380
section you take your USB boot and you

323
00:14:05,180 --> 00:14:08,989
put on the hypervisor and then you

324
00:14:06,380 --> 00:14:12,070
virtualized the boot sequence so you

325
00:14:08,990 --> 00:14:14,960
have Rama flex in 2011 and frosty BG

326
00:14:12,070 --> 00:14:17,810
Rama fax is based on bias and plus DB G

327
00:14:14,960 --> 00:14:18,530
is based on ufi bootloader but both of

328
00:14:17,810 --> 00:14:20,869
them

329
00:14:18,530 --> 00:14:24,110
aim to the pack physical machine using

330
00:14:20,870 --> 00:14:29,030
the USB so these are more interesting

331
00:14:24,110 --> 00:14:31,280
say next thing is reservation debuggers

332
00:14:29,030 --> 00:14:34,300
using emulation maybe you've heard of

333
00:14:31,280 --> 00:14:36,890
this one pirate box from Cisco Talos

334
00:14:34,300 --> 00:14:38,930
it's very interesting because it's using

335
00:14:36,890 --> 00:14:42,110
emulation it's using volatility to

336
00:14:38,930 --> 00:14:45,199
reconstruct the states of the guest and

337
00:14:42,110 --> 00:14:47,660
it has an eye Python shell advance -

338
00:14:45,200 --> 00:14:49,550
shell and you can set really fine green

339
00:14:47,660 --> 00:14:52,189
callbacks you can set callbacks if your

340
00:14:49,550 --> 00:14:54,890
page is being read or written and it's

341
00:14:52,190 --> 00:14:56,480
really meant for Mario analysis but the

342
00:14:54,890 --> 00:14:58,970
problem is that it's emulation so it's a

343
00:14:56,480 --> 00:15:00,890
bit slow and that's why they don't look

344
00:14:58,970 --> 00:15:03,710
into it because I want to use the full

345
00:15:00,890 --> 00:15:05,330
the translation now about full

346
00:15:03,710 --> 00:15:07,190
virtualization what do we have this is

347
00:15:05,330 --> 00:15:09,650
my point of interest I would like to be

348
00:15:07,190 --> 00:15:12,050
to debug my man my man Wells but running

349
00:15:09,650 --> 00:15:16,850
fully virtualized with the authorization

350
00:15:12,050 --> 00:15:19,370
speed first we have and maintain

351
00:15:16,850 --> 00:15:20,589
projects that people try stuff and yeah

352
00:15:19,370 --> 00:15:23,920
well

353
00:15:20,589 --> 00:15:26,649
first is VMI DPG in the concept is very

354
00:15:23,920 --> 00:15:29,290
interesting it's a TV CD mr. Monteverde

355
00:15:26,649 --> 00:15:31,600
vmi which abstracts on the hypervisor

356
00:15:29,290 --> 00:15:34,569
and when you talk to the hypervisor but

357
00:15:31,600 --> 00:15:37,180
when when I wanted to try to project it

358
00:15:34,569 --> 00:15:41,469
on recompile and not real documentation

359
00:15:37,180 --> 00:15:43,359
so I didn't look further into it I guess

360
00:15:41,470 --> 00:15:47,170
some of you will know our VMI from fire

361
00:15:43,360 --> 00:15:50,410
AIA this one it's KVM introspection and

362
00:15:47,170 --> 00:15:51,998
it uses reco as both the shell and this

363
00:15:50,410 --> 00:15:54,550
was introspection layer so it's quite

364
00:15:51,999 --> 00:15:56,050
smart because you leverage reco as a

365
00:15:54,550 --> 00:15:59,378
memory forensic tool and using as a

366
00:15:56,050 --> 00:16:01,209
deeper interface but again haven't think

367
00:15:59,379 --> 00:16:04,959
of it's in our VMI since two years so I

368
00:16:01,209 --> 00:16:06,969
don't know what's this data then what

369
00:16:04,959 --> 00:16:11,559
you have maybe you have heard a windbag

370
00:16:06,970 --> 00:16:13,540
aditi in 2016 they wanted twin make it

371
00:16:11,559 --> 00:16:16,420
an instrumentation of theater box

372
00:16:13,540 --> 00:16:18,040
why because a box is open source and

373
00:16:16,420 --> 00:16:20,410
it's cross platform you can have an or

374
00:16:18,040 --> 00:16:24,099
wind on linux mac OS and the windows so

375
00:16:20,410 --> 00:16:27,490
let's put some vmi into it and they have

376
00:16:24,100 --> 00:16:30,339
their up KD stubs choose windbg and to

377
00:16:27,490 --> 00:16:33,309
debug the turks and then later the same

378
00:16:30,339 --> 00:16:36,339
team builds on back et which is the mare

379
00:16:33,309 --> 00:16:40,870
analysis framework based on wind agility

380
00:16:36,339 --> 00:16:42,459
to leverage the work they did one thing

381
00:16:40,870 --> 00:16:44,709
to mention is that the wind bag IT team

382
00:16:42,459 --> 00:16:47,500
was really really focused on performance

383
00:16:44,709 --> 00:16:49,149
they wanted to put breakpoints on the

384
00:16:47,500 --> 00:16:51,670
memory allocator of the curtain so it

385
00:16:49,149 --> 00:16:54,430
had to be really very fast that's why

386
00:16:51,670 --> 00:16:56,920
they didn't consider the idea of using

387
00:16:54,430 --> 00:17:00,399
abstraction libraries that hit vmi and

388
00:16:56,920 --> 00:17:03,160
that's the reason why i didn't consider

389
00:17:00,399 --> 00:17:06,760
the project at the time because my

390
00:17:03,160 --> 00:17:08,740
objectives one of emulation or diametral

391
00:17:06,760 --> 00:17:10,780
debugging I was interested I wanted a

392
00:17:08,740 --> 00:17:13,630
flexible debugger but rising at the

393
00:17:10,780 --> 00:17:16,000
fertilization speed and I want it to be

394
00:17:13,630 --> 00:17:16,569
compatible compatibility about

395
00:17:16,000 --> 00:17:19,390
performance

396
00:17:16,569 --> 00:17:21,730
so last year I built a debugger on top

397
00:17:19,390 --> 00:17:24,549
of radar and Revit radar has an

398
00:17:21,730 --> 00:17:28,209
introspection tool and also based on the

399
00:17:24,549 --> 00:17:32,110
PMI and then I built the President to

400
00:17:28,209 --> 00:17:34,400
present today which is PI VMI dbg it's a

401
00:17:32,110 --> 00:17:36,409
gdb step based on a BMI which then

402
00:17:34,400 --> 00:17:40,070
Toodee hypervisor so I'm not looking for

403
00:17:36,410 --> 00:17:42,080
performance here just compatibility and

404
00:17:40,070 --> 00:17:46,490
also I'm trying to build a gets to where

405
00:17:42,080 --> 00:17:48,830
debug stop now looking at the challenges

406
00:17:46,490 --> 00:17:50,750
if it was this easy to build this kind

407
00:17:48,830 --> 00:17:53,000
of debuggers well you'll be using them

408
00:17:50,750 --> 00:17:54,920
every day to debug your applications but

409
00:17:53,000 --> 00:17:59,240
it's not there are many many challenges

410
00:17:54,920 --> 00:18:03,080
and the first one is that you will need

411
00:17:59,240 --> 00:18:06,380
to rebuild the debugger API why think

412
00:18:03,080 --> 00:18:08,659
that your normal use case scenario when

413
00:18:06,380 --> 00:18:10,400
you 2d be attached to PID well you have

414
00:18:08,660 --> 00:18:12,470
you just talk to the colonel and we can

415
00:18:10,400 --> 00:18:14,690
all knows how to find the state of its

416
00:18:12,470 --> 00:18:16,640
own processes he knows right where to

417
00:18:14,690 --> 00:18:19,700
find the threads and read the context

418
00:18:16,640 --> 00:18:21,890
state and you are doing this over an API

419
00:18:19,700 --> 00:18:24,860
a clear defined API in this case we

420
00:18:21,890 --> 00:18:26,510
trace on Linux when you're doing this

421
00:18:24,860 --> 00:18:28,280
with your machine introspection first

422
00:18:26,510 --> 00:18:30,410
you don't know the operating system you

423
00:18:28,280 --> 00:18:33,230
don't know what it is and second you

424
00:18:30,410 --> 00:18:35,570
have to read and interpret low memory

425
00:18:33,230 --> 00:18:37,550
structures from memory so it's much more

426
00:18:35,570 --> 00:18:40,040
complicated your API is just remember

427
00:18:37,550 --> 00:18:43,430
ear it registers and that make sense out

428
00:18:40,040 --> 00:18:47,690
of it so that's one of the first big

429
00:18:43,430 --> 00:18:49,850
challenges now to face this challenge

430
00:18:47,690 --> 00:18:52,400
what we want to do is to feel the

431
00:18:49,850 --> 00:18:54,260
semantic gap what can be done we need

432
00:18:52,400 --> 00:18:56,780
what we need is an intimate knowledge of

433
00:18:54,260 --> 00:18:58,640
the guest we need to understand what it

434
00:18:56,780 --> 00:18:59,990
does what it is and where are the

435
00:18:58,640 --> 00:19:03,470
structures in memory and the functions

436
00:18:59,990 --> 00:19:07,190
and if you think about it this is a

437
00:19:03,470 --> 00:19:08,780
really big job but it's not our job like

438
00:19:07,190 --> 00:19:10,580
there are already tools out there that

439
00:19:08,780 --> 00:19:13,280
are departments to do this and they are

440
00:19:10,580 --> 00:19:16,460
doing this very well so I'm thinking

441
00:19:13,280 --> 00:19:18,500
about memory forensic tools and if you

442
00:19:16,460 --> 00:19:21,470
look at what recall can do recall can

443
00:19:18,500 --> 00:19:23,810
build profiles it can arise memory them

444
00:19:21,470 --> 00:19:26,030
and give you a Jason profile out of it

445
00:19:23,810 --> 00:19:27,649
so it gives you the constants the

446
00:19:26,030 --> 00:19:30,740
functions and the structures in memory

447
00:19:27,650 --> 00:19:33,710
which are all offsets from the kernel

448
00:19:30,740 --> 00:19:35,270
base address so if this you can already

449
00:19:33,710 --> 00:19:36,740
feel the bit the semantic gap you

450
00:19:35,270 --> 00:19:38,780
analyze your VM you take memory dump

451
00:19:36,740 --> 00:19:42,230
analyze it with record and record gives

452
00:19:38,780 --> 00:19:46,040
you this possible JSON file that you can

453
00:19:42,230 --> 00:19:48,140
use so we already filled a bit the

454
00:19:46,040 --> 00:19:53,360
semantic gap it's not

455
00:19:48,140 --> 00:19:55,580
only challenge what we have to do now is

456
00:19:53,360 --> 00:19:57,290
also to follow operating system changes

457
00:19:55,580 --> 00:20:01,220
because they change over the course of

458
00:19:57,290 --> 00:20:03,350
time of course your debugger might well

459
00:20:01,220 --> 00:20:05,630
support Windows 7 when crashing the

460
00:20:03,350 --> 00:20:07,969
Windows XP or crashing the Windows 10

461
00:20:05,630 --> 00:20:09,560
and the reason is simple because these

462
00:20:07,970 --> 00:20:11,510
operating system are chained are changes

463
00:20:09,560 --> 00:20:14,389
they are changing a vertical type of

464
00:20:11,510 --> 00:20:17,750
time so if you want to an example on

465
00:20:14,390 --> 00:20:19,970
Windows Windows XP the ideal process is

466
00:20:17,750 --> 00:20:22,280
running outside of the main process list

467
00:20:19,970 --> 00:20:24,410
so sometimes we just post the VM you

468
00:20:22,280 --> 00:20:26,480
will wonder what is the current process

469
00:20:24,410 --> 00:20:27,980
doing and you won't find it in the main

470
00:20:26,480 --> 00:20:31,030
processes because it's the alia at the

471
00:20:27,980 --> 00:20:34,160
error process so you have to build this

472
00:20:31,030 --> 00:20:36,139
add some logic on top of it to handle

473
00:20:34,160 --> 00:20:38,990
these cases in Windows Vista they do

474
00:20:36,140 --> 00:20:40,910
they made some build big changes in the

475
00:20:38,990 --> 00:20:42,680
kernel and we understand as you know

476
00:20:40,910 --> 00:20:44,450
they have there is the Metro secure mode

477
00:20:42,680 --> 00:20:48,170
and the secure kernel so it's a bit more

478
00:20:44,450 --> 00:20:50,990
competitive okay and if you come a bit

479
00:20:48,170 --> 00:20:54,020
further if you want to adapt on win on

480
00:20:50,990 --> 00:20:56,150
Linux and Mac OS and build a flexible

481
00:20:54,020 --> 00:20:58,340
debugger well you have to add up to any

482
00:20:56,150 --> 00:21:02,360
operating system configuration out there

483
00:20:58,340 --> 00:21:04,370
so that's what's the real challenges but

484
00:21:02,360 --> 00:21:07,070
however it is not that difficult because

485
00:21:04,370 --> 00:21:08,989
the core operating system internal state

486
00:21:07,070 --> 00:21:11,540
and to not change I mean and in process

487
00:21:08,990 --> 00:21:15,620
on a process and in fret on Windows is

488
00:21:11,540 --> 00:21:17,930
still the same from XP 2 to 10 I mean

489
00:21:15,620 --> 00:21:21,800
structures they change but the little

490
00:21:17,930 --> 00:21:25,880
coal fields are all the same so we can

491
00:21:21,800 --> 00:21:27,800
use that now regarding the issue that I

492
00:21:25,880 --> 00:21:29,450
want I want it to be hypervisor agnostic

493
00:21:27,800 --> 00:21:32,030
what can we do well I was speaking

494
00:21:29,450 --> 00:21:35,090
before about Librium I what is this

495
00:21:32,030 --> 00:21:37,879
leave EMI it's a library reservation

496
00:21:35,090 --> 00:21:39,260
introspection library and if you make an

497
00:21:37,880 --> 00:21:41,900
abstraction layer on top of the

498
00:21:39,260 --> 00:21:45,680
hypervisors interface so it has

499
00:21:41,900 --> 00:21:48,680
functions to deal with low-level stuff

500
00:21:45,680 --> 00:21:50,390
like passing the vegetables or

501
00:21:48,680 --> 00:21:55,540
intercepting hardware events and

502
00:21:50,390 --> 00:21:58,040
translate them and it's it unifies the

503
00:21:55,540 --> 00:22:00,440
interface on top of the hypervisors vmi

504
00:21:58,040 --> 00:22:02,060
api's and also it offers some basic

505
00:22:00,440 --> 00:22:05,570
introspection and it's suppose

506
00:22:02,060 --> 00:22:08,179
core profile exactly what we want so I

507
00:22:05,570 --> 00:22:10,669
can just specify my record profile my VM

508
00:22:08,180 --> 00:22:12,830
and I can easily be a my to transit my

509
00:22:10,670 --> 00:22:16,940
symbols directly every big sense out of

510
00:22:12,830 --> 00:22:20,179
it so what is this support I provide

511
00:22:16,940 --> 00:22:22,460
support VMI as of today exam is is fully

512
00:22:20,180 --> 00:22:25,250
supported in terms of VMI you have

513
00:22:22,460 --> 00:22:26,800
resistors memory memory and all the

514
00:22:25,250 --> 00:22:31,310
other events that you can think of

515
00:22:26,800 --> 00:22:32,270
interrupt debug events etc and KVM is on

516
00:22:31,310 --> 00:22:33,860
its way

517
00:22:32,270 --> 00:22:38,810
there's BitDefender working on a patch

518
00:22:33,860 --> 00:22:43,790
to bring VMI and to order to bring a

519
00:22:38,810 --> 00:22:47,090
FEMA interface on kayvyun so let's do a

520
00:22:43,790 --> 00:22:49,970
bit of recap of our projects now in

521
00:22:47,090 --> 00:22:52,550
terms of in terms of flexibility first

522
00:22:49,970 --> 00:22:56,690
I'm going to use VMI to query the

523
00:22:52,550 --> 00:22:58,850
Hartman state then I'm using lip VMI to

524
00:22:56,690 --> 00:23:01,280
be hypervisor agnostic I don't want to

525
00:22:58,850 --> 00:23:03,080
rely on my hypervisor then I'm going to

526
00:23:01,280 --> 00:23:05,090
use the record profile to make sense of

527
00:23:03,080 --> 00:23:07,850
this raw data and read the structures in

528
00:23:05,090 --> 00:23:10,010
memory and and make sense of it and then

529
00:23:07,850 --> 00:23:12,830
I'm going to use the gdb protocol

530
00:23:10,010 --> 00:23:17,690
because I want to use any gdb front-end

531
00:23:12,830 --> 00:23:23,300
on top of this thing I know let's talk

532
00:23:17,690 --> 00:23:25,190
about a bit of a demo you today is this

533
00:23:23,300 --> 00:23:27,710
project that I've been working on is pi

534
00:23:25,190 --> 00:23:30,680
VAR DB g so it's going in Python it's a

535
00:23:27,710 --> 00:23:32,300
gdb stub on top of the BMI which aims to

536
00:23:30,680 --> 00:23:36,320
bridge the gap between the front ends

537
00:23:32,300 --> 00:23:38,360
and hypervisors so how does it work you

538
00:23:36,320 --> 00:23:41,629
just specify a port a VM name and a

539
00:23:38,360 --> 00:23:43,310
process if you want it has two mode one

540
00:23:41,630 --> 00:23:46,850
that I will called the robot of the road

541
00:23:43,310 --> 00:23:49,250
about context where your process is just

542
00:23:46,850 --> 00:23:53,449
estimated as the entire system it's what

543
00:23:49,250 --> 00:23:56,170
you have normally use in a gdb step so a

544
00:23:53,450 --> 00:23:59,360
thread is estimated to one be CPU and

545
00:23:56,170 --> 00:24:02,930
when you attach to the VM it's just post

546
00:23:59,360 --> 00:24:04,879
the wheel so not reinter G's and then

547
00:24:02,930 --> 00:24:07,880
you have to guest aware out while you

548
00:24:04,880 --> 00:24:12,410
specify a process so you have Windows

549
00:24:07,880 --> 00:24:13,760
and Linux deeper context and what it

550
00:24:12,410 --> 00:24:15,050
does is that it tries to find the

551
00:24:13,760 --> 00:24:18,020
processes descriptor

552
00:24:15,050 --> 00:24:19,760
and then read the Fred state and read

553
00:24:18,020 --> 00:24:22,700
their execution context and report them

554
00:24:19,760 --> 00:24:25,150
so like if you are debugging on the on

555
00:24:22,700 --> 00:24:27,590
the guest exactly

556
00:24:25,150 --> 00:24:30,110
so basics after prepping sacrament ed

557
00:24:27,590 --> 00:24:32,060
down on staff as of today you have seen

558
00:24:30,110 --> 00:24:34,219
your step and breaking breaking is what

559
00:24:32,060 --> 00:24:36,169
you you continually secretion and when

560
00:24:34,220 --> 00:24:41,420
you're hit control-c and say it stops

561
00:24:36,170 --> 00:24:47,240
the guests again so let's do a bit of

562
00:24:41,420 --> 00:24:51,130
demo I think I need to switch my systems

563
00:24:47,240 --> 00:25:03,700
that I have to placate it strains

564
00:24:51,130 --> 00:25:06,140
synchronize yes no no great do something

565
00:25:03,700 --> 00:25:07,850
I'm trying to unify the output because

566
00:25:06,140 --> 00:25:11,150
otherwise if I type in my time I don't I

567
00:25:07,850 --> 00:25:19,370
won't see you won't see anything ok it

568
00:25:11,150 --> 00:25:27,880
doesn't work great maybe I can use the

569
00:25:19,370 --> 00:25:27,879
built-in demo after so this purpose no

570
00:25:30,730 --> 00:25:46,100
yes I want it ok ok can I start the demo

571
00:25:39,620 --> 00:25:49,489
here yes ok so this is a demo of the

572
00:25:46,100 --> 00:25:54,469
robot it's just because it uses the the

573
00:25:49,490 --> 00:25:56,420
VM like gdb step from Kim so this is my

574
00:25:54,470 --> 00:25:58,550
Windows XP VM the reason I have Windows

575
00:25:56,420 --> 00:26:01,190
XP because I'm running in amusing

576
00:25:58,550 --> 00:26:03,169
vagrants to keep my environment clean

577
00:26:01,190 --> 00:26:06,830
and the projects that I'm just rising

578
00:26:03,170 --> 00:26:08,510
KVM on to examine on top of KVM and you

579
00:26:06,830 --> 00:26:10,669
count from Windows 7 Windows 10 guest

580
00:26:08,510 --> 00:26:14,510
yet so I'm using Windows XP for this

581
00:26:10,670 --> 00:26:17,200
demo so my musics be reading

582
00:26:14,510 --> 00:26:17,200
everything's fine

583
00:26:17,800 --> 00:26:24,620
so what I'm going to do now is to go to

584
00:26:20,690 --> 00:26:28,130
the vagrant VM and start my debugger in

585
00:26:24,620 --> 00:26:30,379
robot ok so

586
00:26:28,130 --> 00:26:32,690
this is I put some more arguments

587
00:26:30,380 --> 00:26:33,860
because I wanted to listen to zero zero

588
00:26:32,690 --> 00:26:36,530
zero because I'm looking from the

589
00:26:33,860 --> 00:26:43,309
outside and when just starting the

590
00:26:36,530 --> 00:26:45,139
debugger here I so i remove the process

591
00:26:43,309 --> 00:26:47,809
information because i want to choose the

592
00:26:45,140 --> 00:26:50,840
robot and then I'm going to start gdb

593
00:26:47,809 --> 00:26:53,030
and use the target remote stuff to

594
00:26:50,840 --> 00:26:58,070
connect to the debugger okay so now we

595
00:26:53,030 --> 00:27:02,090
are attached to the debugger and if you

596
00:26:58,070 --> 00:27:04,428
look at the output there's plenty of is

597
00:27:02,090 --> 00:27:09,350
just the gdb protocol over here but if

598
00:27:04,429 --> 00:27:12,049
you look at what that put was is the

599
00:27:09,350 --> 00:27:15,699
road debug context there's no three

600
00:27:12,049 --> 00:27:15,700
that's not very more information

601
00:27:16,090 --> 00:27:24,709
okay so I'm going to do some single

602
00:27:20,600 --> 00:27:27,230
steps to move the in to a single step in

603
00:27:24,710 --> 00:27:29,600
secretion and everything is not on top

604
00:27:27,230 --> 00:27:32,030
of a BMI of course and then I'm going to

605
00:27:29,600 --> 00:27:39,260
try to set a breakpoint at this address

606
00:27:32,030 --> 00:27:45,020
yes I need a star okay and just continue

607
00:27:39,260 --> 00:27:56,659
the execution okay we hit the

608
00:27:45,020 --> 00:27:57,450
breakpoints great and I think I've just

609
00:27:56,659 --> 00:28:01,740
continued

610
00:27:57,450 --> 00:28:03,690
over here so yes okay so did always done

611
00:28:01,740 --> 00:28:06,930
so that's was just the remote that's

612
00:28:03,690 --> 00:28:09,780
what you already know because it's using

613
00:28:06,930 --> 00:28:12,720
the effect you can even remove G disturb

614
00:28:09,780 --> 00:28:17,190
sorry so now the gets to where have a

615
00:28:12,720 --> 00:28:18,930
bit some intention see this time I'm

616
00:28:17,190 --> 00:28:22,140
going to use without you because it's

617
00:28:18,930 --> 00:28:24,120
more interactive and I liked it as a gel

618
00:28:22,140 --> 00:28:26,400
so I'm going to start a CMD command over

619
00:28:24,120 --> 00:28:28,080
here I'm going to stop my debugger and I

620
00:28:26,400 --> 00:28:30,960
want to intercept CMD so at the end I'm

621
00:28:28,080 --> 00:28:35,100
just specific the process as CMD so my

622
00:28:30,960 --> 00:28:38,120
debugger is listening and then I'm

623
00:28:35,100 --> 00:28:38,120
starting right out to you okay

624
00:28:40,530 --> 00:28:46,410
I'm connected so if I look at the

625
00:28:43,830 --> 00:28:51,810
outputs of the debugger it locates the

626
00:28:46,410 --> 00:28:55,410
process and and the frets the first

627
00:28:51,810 --> 00:28:57,690
thread and in rated States so if I go

628
00:28:55,410 --> 00:29:01,170
back to write out two I can do DBT to

629
00:28:57,690 --> 00:29:03,510
reach the Fred there is one thread and I

630
00:29:01,170 --> 00:29:07,500
can do a display the instruction of

631
00:29:03,510 --> 00:29:10,200
course so I'm reading something some

632
00:29:07,500 --> 00:29:15,720
symbols the camera and and VDRL so a

633
00:29:10,200 --> 00:29:17,100
semantic meaning this okay so now have

634
00:29:15,720 --> 00:29:19,050
more some symbols so it's more

635
00:29:17,100 --> 00:29:22,350
interesting we need to look into my

636
00:29:19,050 --> 00:29:26,639
symbols and look for the NT open file

637
00:29:22,350 --> 00:29:28,590
function like this so I so it's there

638
00:29:26,640 --> 00:29:38,820
it's loaded and I'm going to set a

639
00:29:28,590 --> 00:29:39,990
breakpoint on this function okay so now

640
00:29:38,820 --> 00:29:43,230
I'm going to type to type the deer

641
00:29:39,990 --> 00:29:44,400
comments okay here I'm demoing the

642
00:29:43,230 --> 00:29:45,960
breaking function so you continue

643
00:29:44,400 --> 00:29:48,300
secretion and then you hit control C and

644
00:29:45,960 --> 00:29:50,640
it should go back it intercepted again

645
00:29:48,300 --> 00:29:54,300
the thread and the process you can see

646
00:29:50,640 --> 00:29:56,130
there is a break in here like their net

647
00:29:54,300 --> 00:30:00,570
interest and it's attached again to the

648
00:29:56,130 --> 00:30:08,820
process state so now I can put some

649
00:30:00,570 --> 00:30:10,899
breakpoints with DB I thought only the

650
00:30:08,820 --> 00:30:12,570
interior

651
00:30:10,900 --> 00:30:15,610
yeah there was a bigger this tango Delta

652
00:30:12,570 --> 00:30:19,720
so I had to put the breakpoint Manuel

653
00:30:15,610 --> 00:30:24,219
you think okay so I'm just asking the

654
00:30:19,720 --> 00:30:27,250
address here 50 B yeah this one I'm

655
00:30:24,220 --> 00:30:29,170
sitting ass involves on NT NT kernel and

656
00:30:27,250 --> 00:30:31,300
she open file and continuing to guess

657
00:30:29,170 --> 00:30:35,320
this accretion so Mike reppin inset

658
00:30:31,300 --> 00:30:38,950
going back to the VM I'm touching it and

659
00:30:35,320 --> 00:30:41,830
let's type the deer comment yes we hit

660
00:30:38,950 --> 00:30:43,480
our break point great we can continue to

661
00:30:41,830 --> 00:30:46,240
get guest execution what are a and

662
00:30:43,480 --> 00:30:47,620
requite hit on over time and you can see

663
00:30:46,240 --> 00:30:49,780
the display of the deer comment on top

664
00:30:47,620 --> 00:31:04,559
of it so it's the poking from the

665
00:30:49,780 --> 00:31:08,110
hypervisor musically vmi okay

666
00:31:04,559 --> 00:31:10,990
that was for the demo using only one

667
00:31:08,110 --> 00:31:20,169
process and one thread and here I'm

668
00:31:10,990 --> 00:31:22,840
demoing again with because yeah starting

669
00:31:20,170 --> 00:31:25,240
Microsoft Paint here and you can just

670
00:31:22,840 --> 00:31:28,059
see that at some points I can list all

671
00:31:25,240 --> 00:31:29,620
the frets so if I go here yeah I mean

672
00:31:28,059 --> 00:31:31,120
DBT and I can see all the first eight

673
00:31:29,620 --> 00:31:36,070
and each time there is a break point

674
00:31:31,120 --> 00:31:37,530
which will be it you will have a

675
00:31:36,070 --> 00:31:39,939
different thread which will be

676
00:31:37,530 --> 00:31:44,580
highlighted because it's this thread

677
00:31:39,940 --> 00:31:44,580
which basically the break points

678
00:31:47,820 --> 00:31:52,330
okay so that you can see that the Freddy

679
00:31:50,260 --> 00:31:54,250
selected here with a little star in

680
00:31:52,330 --> 00:31:56,980
Ridolfi which means that it was this

681
00:31:54,250 --> 00:31:59,650
specific thread which had the break

682
00:31:56,980 --> 00:32:01,780
point but so that's it for the demo it's

683
00:31:59,650 --> 00:32:05,140
a guest to wear hi professor level

684
00:32:01,780 --> 00:32:06,639
debugger based on Libya my so I know it

685
00:32:05,140 --> 00:32:10,600
ain't much but it's honest work have

686
00:32:06,640 --> 00:32:12,220
done this in my free time but what can

687
00:32:10,600 --> 00:32:17,139
we do in the future what are the

688
00:32:12,220 --> 00:32:19,570
improvements you have improvements so

689
00:32:17,140 --> 00:32:22,420
you can have more information about the

690
00:32:19,570 --> 00:32:24,700
proc the proc the process we've info

691
00:32:22,420 --> 00:32:26,669
proc this is the some gdb

692
00:32:24,700 --> 00:32:29,289
come into implements associative arrays

693
00:32:26,669 --> 00:32:31,690
this are or comment that you can

694
00:32:29,289 --> 00:32:33,100
implement and then I'm thinking about

695
00:32:31,690 --> 00:32:35,200
everyone that wants to develop on this

696
00:32:33,100 --> 00:32:37,209
project I'm a really big fan of vagrant

697
00:32:35,200 --> 00:32:39,429
because they're on top of the Zen is a

698
00:32:37,210 --> 00:32:41,139
bit of a pain you have to you have to

699
00:32:39,429 --> 00:32:43,869
run a modified hypervisor then you have

700
00:32:41,139 --> 00:32:45,879
to run VMs I want to make it as easy as

701
00:32:43,869 --> 00:32:48,220
possible for you to join the project so

702
00:32:45,879 --> 00:32:50,230
my fragrance environments as Zen

703
00:32:48,220 --> 00:32:53,200
installed over package on from source

704
00:32:50,230 --> 00:32:55,960
leave VMI liberabit and some VM with the

705
00:32:53,200 --> 00:32:57,489
record profiles configured so it's

706
00:32:55,960 --> 00:33:02,830
nested virtualization and you can it

707
00:32:57,489 --> 00:33:04,299
from you can get it from here now a bit

708
00:33:02,830 --> 00:33:05,649
of talk about the hyper break once I was

709
00:33:04,299 --> 00:33:08,440
mentioning that we were running we're

710
00:33:05,649 --> 00:33:09,879
not using the most advanced breakpoints

711
00:33:08,440 --> 00:33:13,239
out there for that for debuggers and

712
00:33:09,879 --> 00:33:15,699
it's it's the case so let's do a bit the

713
00:33:13,239 --> 00:33:17,679
state of hyper breakpoints what I'm

714
00:33:15,700 --> 00:33:19,509
speaking about hyper breakpoints what I

715
00:33:17,679 --> 00:33:21,429
mean is just a break point using the

716
00:33:19,509 --> 00:33:22,779
veterans ation layer it's a table has

717
00:33:21,429 --> 00:33:25,539
been introduced in the way between

718
00:33:22,779 --> 00:33:28,720
dougie tea article at the stick in 2016

719
00:33:25,539 --> 00:33:31,389
and yes we're not using the best rep

720
00:33:28,720 --> 00:33:32,859
points available the first break point

721
00:33:31,389 --> 00:33:35,379
that you can think of is the most basic

722
00:33:32,859 --> 00:33:37,779
one you write your break point in memory

723
00:33:35,379 --> 00:33:40,959
and you listen to interrupt three events

724
00:33:37,779 --> 00:33:42,669
and if there is a break point there's a

725
00:33:40,960 --> 00:33:44,230
hit you just rest all the up code your

726
00:33:42,669 --> 00:33:46,929
single step and then you restore your

727
00:33:44,230 --> 00:33:49,210
break points and you continue so it's

728
00:33:46,929 --> 00:33:52,090
quite fast but it's not only self and

729
00:33:49,210 --> 00:33:54,369
it's not safe and by safe I mean that's

730
00:33:52,090 --> 00:33:55,869
safe in multi VCP you conditions if you

731
00:33:54,369 --> 00:33:58,029
have another V CPU which is running at

732
00:33:55,869 --> 00:34:00,699
the same time what you're doing is it's

733
00:33:58,029 --> 00:34:01,929
kind of a record thing while you are

734
00:34:00,700 --> 00:34:04,600
restoring the up code

735
00:34:01,929 --> 00:34:06,820
well the organ CV CPU by just execute on

736
00:34:04,600 --> 00:34:09,098
this instruction and miss your

737
00:34:06,820 --> 00:34:14,918
breakpoint so it's not it's not not TV

738
00:34:09,099 --> 00:34:17,950
CPU safe to gain this multi v CPU safety

739
00:34:14,918 --> 00:34:20,168
and avoid this rest condition we can

740
00:34:17,949 --> 00:34:22,210
post all the V CPU at each event that's

741
00:34:20,168 --> 00:34:28,089
what you can do it's a bit less fast but

742
00:34:22,210 --> 00:34:29,679
this time it is safe also you have had

743
00:34:28,089 --> 00:34:31,599
our probate points the same breakpoints

744
00:34:29,679 --> 00:34:33,639
but from the hypervisor you inject your

745
00:34:31,599 --> 00:34:36,980
your set your breakpoints India 0 2 gr 3

746
00:34:33,639 --> 00:34:40,010
and you listen to interrupt one

747
00:34:36,980 --> 00:34:41,599
so it's the fastest once because you are

748
00:34:40,010 --> 00:34:43,730
comparing registers so it's really

749
00:34:41,599 --> 00:34:46,730
really fast and this time it is safe

750
00:34:43,730 --> 00:34:48,589
because it's V CPU as its own copy of

751
00:34:46,730 --> 00:34:53,149
the registers so you can't there's no

752
00:34:48,589 --> 00:34:55,099
overlap and how can we can stealth with

753
00:34:53,149 --> 00:34:57,500
this well you can listen to move to D

754
00:34:55,099 --> 00:35:00,530
our events and you can restore the

755
00:34:57,500 --> 00:35:02,690
guessed value single step and restore

756
00:35:00,530 --> 00:35:04,010
your own value so you can fold the guest

757
00:35:02,690 --> 00:35:07,760
into thinking that there is no

758
00:35:04,010 --> 00:35:10,250
breakpoints so yeah we have the fastest

759
00:35:07,760 --> 00:35:13,040
self and safe liquids that's right but

760
00:35:10,250 --> 00:35:16,910
wait there's only four of them so we

761
00:35:13,040 --> 00:35:18,770
can't go very far so let's look at some

762
00:35:16,910 --> 00:35:21,890
other type of breakpoints the page hyper

763
00:35:18,770 --> 00:35:24,259
breakpoints you have two guest better

764
00:35:21,890 --> 00:35:26,270
address which is translated to guest

765
00:35:24,260 --> 00:35:28,820
physical address and then to a host

766
00:35:26,270 --> 00:35:33,980
physical address this thing is done

767
00:35:28,820 --> 00:35:35,240
using the extended page tables so first

768
00:35:33,980 --> 00:35:37,820
you need to find your guest better

769
00:35:35,240 --> 00:35:39,890
address yeah and from this you need to

770
00:35:37,820 --> 00:35:42,650
find the guest physical page and you

771
00:35:39,890 --> 00:35:44,660
transit the EPT to find the host

772
00:35:42,650 --> 00:35:46,760
physical page and with this whole

773
00:35:44,660 --> 00:35:49,580
physical page you change the permissions

774
00:35:46,760 --> 00:35:51,830
and to generate EPT violations so you

775
00:35:49,580 --> 00:35:55,490
can change the permission to have events

776
00:35:51,830 --> 00:35:57,770
on read write or execute so it's not

777
00:35:55,490 --> 00:36:01,640
really fast it's stealth this time and

778
00:35:57,770 --> 00:36:03,440
it's not safe why because it's fast

779
00:36:01,640 --> 00:36:05,810
because you have a very high overhead on

780
00:36:03,440 --> 00:36:08,030
your whole page you will have a lot of

781
00:36:05,810 --> 00:36:09,500
events while you work you're just going

782
00:36:08,030 --> 00:36:13,130
to say another single step I don't want

783
00:36:09,500 --> 00:36:16,160
this one and it's not safe because the

784
00:36:13,130 --> 00:36:18,500
apt are shared by all the V CPUs so when

785
00:36:16,160 --> 00:36:20,509
you are changing relaxing the permission

786
00:36:18,500 --> 00:36:22,040
to continue execution another vcp you

787
00:36:20,510 --> 00:36:25,940
might just go there and miss your

788
00:36:22,040 --> 00:36:27,529
breakpoint so it's not safe and also

789
00:36:25,940 --> 00:36:30,530
about the questions should you single

790
00:36:27,530 --> 00:36:32,480
step or emulate well emulator or bits of

791
00:36:30,530 --> 00:36:36,440
incomplete it's quite it's very hard to

792
00:36:32,480 --> 00:36:38,390
do a full x86 emulator there are a lot

793
00:36:36,440 --> 00:36:41,540
of vulnerabilities because of the

794
00:36:38,390 --> 00:36:43,670
complexity and if you emulate a lot of

795
00:36:41,540 --> 00:36:45,230
instruction at the same time this can

796
00:36:43,670 --> 00:36:49,130
lead to instability is this has been

797
00:36:45,230 --> 00:36:50,470
seen in production so always use single

798
00:36:49,130 --> 00:36:53,360
step if you

799
00:36:50,470 --> 00:36:55,959
so where can we go from here we can do

800
00:36:53,360 --> 00:36:59,300
new types of breakpoints

801
00:36:55,960 --> 00:37:01,550
yes so what we can do is self hyper

802
00:36:59,300 --> 00:37:03,110
breakpoints but new ones this is a

803
00:37:01,550 --> 00:37:04,760
representation of the EPT you have your

804
00:37:03,110 --> 00:37:06,470
guess the transit or address use

805
00:37:04,760 --> 00:37:08,690
translate it to a guest physical address

806
00:37:06,470 --> 00:37:11,259
in the guest and then using the EPT from

807
00:37:08,690 --> 00:37:16,580
the processor to translate this to a

808
00:37:11,260 --> 00:37:19,840
page on the host what we can do is first

809
00:37:16,580 --> 00:37:22,190
we duplicate the physical page like this

810
00:37:19,840 --> 00:37:25,670
then we can set our breakpoint is on

811
00:37:22,190 --> 00:37:27,740
this second page we can set this page as

812
00:37:25,670 --> 00:37:31,850
execute only and the other one is read

813
00:37:27,740 --> 00:37:34,669
write and then we can point our address

814
00:37:31,850 --> 00:37:37,670
our page table entry to this new page

815
00:37:34,670 --> 00:37:39,710
which has the breakpoint and if there is

816
00:37:37,670 --> 00:37:41,960
an interrupt three well just end all the

817
00:37:39,710 --> 00:37:44,510
right points and you lock it if you get

818
00:37:41,960 --> 00:37:46,580
an apt violation because it rights

819
00:37:44,510 --> 00:37:49,100
issues then you just switch back to the

820
00:37:46,580 --> 00:37:50,750
first page and if you get an EPT

821
00:37:49,100 --> 00:37:52,069
variation because on execute problems

822
00:37:50,750 --> 00:37:54,820
and you just switch back to the

823
00:37:52,070 --> 00:37:59,480
breakpoint and then you can have a

824
00:37:54,820 --> 00:38:01,490
record which is fast stealth but again

825
00:37:59,480 --> 00:38:04,160
that's not safe but we are already of a

826
00:38:01,490 --> 00:38:07,759
fast and self backwards so it's quite

827
00:38:04,160 --> 00:38:10,299
interesting but we can do better we can

828
00:38:07,760 --> 00:38:13,370
do an advanced soft hyper breakpoints

829
00:38:10,300 --> 00:38:16,040
again you have the EPT here and your

830
00:38:13,370 --> 00:38:18,200
page you're first going to do we are

831
00:38:16,040 --> 00:38:22,190
going to work at views at the V CPU

832
00:38:18,200 --> 00:38:24,500
level in view a mini memory views first

833
00:38:22,190 --> 00:38:26,990
this is your V CPU which has an apt

834
00:38:24,500 --> 00:38:27,350
pointer pointing to the beginning of the

835
00:38:26,990 --> 00:38:31,040
EPT

836
00:38:27,350 --> 00:38:33,140
tables translating to your page first

837
00:38:31,040 --> 00:38:37,360
we're going to duplicate the EPT like

838
00:38:33,140 --> 00:38:37,359
this we have a second view a PT view to

839
00:38:38,470 --> 00:38:44,509
invent obligating our page and pointing

840
00:38:41,780 --> 00:38:46,700
to its critical breakpoints changing the

841
00:38:44,510 --> 00:38:50,000
permissions as before read write and

842
00:38:46,700 --> 00:38:52,310
execute only we're pointing our a PR

843
00:38:50,000 --> 00:38:55,430
page table entry in a in the second view

844
00:38:52,310 --> 00:38:57,259
to our breakpoints and we switch the VC

845
00:38:55,430 --> 00:38:59,270
view to view to to hit really it to

846
00:38:57,260 --> 00:39:01,100
breakpoints that's what we want and this

847
00:38:59,270 --> 00:39:02,850
is our initial configuration we are not

848
00:39:01,100 --> 00:39:04,049
going to hit the breakpoints

849
00:39:02,850 --> 00:39:05,910
if you have a breakpoints you just

850
00:39:04,050 --> 00:39:07,370
handle the breakpoints if you have an

851
00:39:05,910 --> 00:39:10,830
apt variation because of a read/write

852
00:39:07,370 --> 00:39:12,569
you switch back to the rewrite page but

853
00:39:10,830 --> 00:39:14,130
this time you switch at the vcp level

854
00:39:12,570 --> 00:39:17,010
you switch the external page table

855
00:39:14,130 --> 00:39:19,080
pointer this is really important and if

856
00:39:17,010 --> 00:39:22,010
you have again an issue be with execute

857
00:39:19,080 --> 00:39:25,650
you switch back to the second view to

858
00:39:22,010 --> 00:39:27,270
execute the break point so you switch

859
00:39:25,650 --> 00:39:30,360
back memory views at least a pure level

860
00:39:27,270 --> 00:39:32,640
and what you gain from this is that this

861
00:39:30,360 --> 00:39:35,010
time you have fast stealth and six

862
00:39:32,640 --> 00:39:38,310
breakpoints safe because the apt pointer

863
00:39:35,010 --> 00:39:42,120
pointer is specifically of a CPU so

864
00:39:38,310 --> 00:39:44,040
there's no override great we have the

865
00:39:42,120 --> 00:39:48,540
best breakpoints out there fast stealth

866
00:39:44,040 --> 00:39:50,880
and safe so this type of breakpoints

867
00:39:48,540 --> 00:39:54,690
there have been they've been implemented

868
00:39:50,880 --> 00:39:57,780
in Zen so exam 4.6 implements of p2m

869
00:39:54,690 --> 00:40:00,630
which allows some which happens on API

870
00:39:57,780 --> 00:40:04,410
to change this apt pointer and they have

871
00:40:00,630 --> 00:40:06,560
been implemented interactive in 2016 for

872
00:40:04,410 --> 00:40:08,970
Stanford points Andrew TV CPU safe

873
00:40:06,560 --> 00:40:11,130
that's the best breakpoints you can have

874
00:40:08,970 --> 00:40:15,839
today and not using them in our

875
00:40:11,130 --> 00:40:18,540
debuggers from the hypervisor now a bit

876
00:40:15,840 --> 00:40:22,260
about looking into the future where we

877
00:40:18,540 --> 00:40:24,630
might go from from here this is the

878
00:40:22,260 --> 00:40:28,080
vision world I would like to us to go a

879
00:40:24,630 --> 00:40:30,450
flexible full-system debugging in 2020

880
00:40:28,080 --> 00:40:32,340
so on the one side you have your

881
00:40:30,450 --> 00:40:32,730
favorite dipping dipping front end your

882
00:40:32,340 --> 00:40:35,190
eider

883
00:40:32,730 --> 00:40:37,890
radar a visual studio and all you ever

884
00:40:35,190 --> 00:40:40,410
cytravel hypervisors and VMI dbgap on my

885
00:40:37,890 --> 00:40:43,680
TV G is bridging the gap between these

886
00:40:40,410 --> 00:40:45,810
two it provides a new debugging

887
00:40:43,680 --> 00:40:47,399
framework based on the hypervisor so

888
00:40:45,810 --> 00:40:49,529
it's flexible you can add up to any

889
00:40:47,400 --> 00:40:51,540
operating system out there and it's a

890
00:40:49,530 --> 00:40:56,790
unified framework across all the

891
00:40:51,540 --> 00:40:59,580
hypervisors and you can also extend this

892
00:40:56,790 --> 00:41:02,100
concept for the BIOS debugging that we

893
00:40:59,580 --> 00:41:04,620
have seen earlier earlier so to project

894
00:41:02,100 --> 00:41:06,480
like a rubber flex upper CPG saying you

895
00:41:04,620 --> 00:41:09,150
keep the same debugging framework and

896
00:41:06,480 --> 00:41:15,360
infrastructure that you built on top of

897
00:41:09,150 --> 00:41:17,870
this embedded hypervisors so a unified

898
00:41:15,360 --> 00:41:17,870
debug

899
00:41:18,130 --> 00:41:23,030
what is the future of Libya my about the

900
00:41:21,410 --> 00:41:24,649
design is discuss about it

901
00:41:23,030 --> 00:41:26,510
first the project has been recently

902
00:41:24,650 --> 00:41:28,849
switched to see make so you can now

903
00:41:26,510 --> 00:41:31,309
built it's on Windows and build windows

904
00:41:28,849 --> 00:41:34,069
drivers for hyper-v VMware if you have

905
00:41:31,309 --> 00:41:35,869
like networks on windows if you want and

906
00:41:34,069 --> 00:41:38,690
the ring has now assigned new ambitions

907
00:41:35,869 --> 00:41:41,059
and new goals the goals to go to be

908
00:41:38,690 --> 00:41:42,440
cross-platform and to run on Windows Mac

909
00:41:41,059 --> 00:41:45,380
OS and Linux - she bought these

910
00:41:42,440 --> 00:41:47,480
hypervisors that you have there there is

911
00:41:45,380 --> 00:41:49,700
the embedded use case why you want to be

912
00:41:47,480 --> 00:41:52,069
a little USB key for Rama flex and

913
00:41:49,700 --> 00:41:54,230
browse dbg and there are safety concerns

914
00:41:52,069 --> 00:41:56,900
the promise that as you have seen before

915
00:41:54,230 --> 00:41:59,180
my demo was running with schedule i was

916
00:41:56,900 --> 00:42:01,460
using shadow because to access the exam

917
00:41:59,180 --> 00:42:03,740
api you have to be root because the exam

918
00:42:01,460 --> 00:42:07,299
is running as the exam to stack me I

919
00:42:03,740 --> 00:42:10,490
guess ask you to run as root so Libya my

920
00:42:07,299 --> 00:42:13,970
innocence needs very high privileges and

921
00:42:10,490 --> 00:42:17,118
it needs to be safe also it processes

922
00:42:13,970 --> 00:42:18,680
untrusted input and if you think about

923
00:42:17,119 --> 00:42:20,750
sometimes integers because if you think

924
00:42:18,680 --> 00:42:23,450
about Morales case it's not need

925
00:42:20,750 --> 00:42:24,980
interest so the wrong question might be

926
00:42:23,450 --> 00:42:27,288
to should be remembering on this project

927
00:42:24,980 --> 00:42:30,410
in rust it's an open question it hasn't

928
00:42:27,289 --> 00:42:32,359
been opened a few months ago so it's

929
00:42:30,410 --> 00:42:33,770
read to be discussed and if there are

930
00:42:32,359 --> 00:42:34,880
res developers in the room and please

931
00:42:33,770 --> 00:42:39,500
come talk to me

932
00:42:34,880 --> 00:42:41,750
are we like to have a chat then how you

933
00:42:39,500 --> 00:42:44,390
can get involved in the project first if

934
00:42:41,750 --> 00:42:46,039
you have a hypervisor to flopper well

935
00:42:44,390 --> 00:42:48,078
please open a virtual machine

936
00:42:46,039 --> 00:42:50,150
translation API this has been

937
00:42:48,079 --> 00:42:53,240
demonstrated how useful they are so

938
00:42:50,150 --> 00:42:53,960
please open a VM I API I'm thinking here

939
00:42:53,240 --> 00:42:58,279
about VMware

940
00:42:53,960 --> 00:43:00,140
hyper-v virtual box please open just an

941
00:42:58,279 --> 00:43:02,839
API so we can build our tools on top

942
00:43:00,140 --> 00:43:04,640
upon it if you want to work on live EMI

943
00:43:02,839 --> 00:43:07,339
well there a trial drivers to be written

944
00:43:04,640 --> 00:43:08,299
to improve the compatibility you can

945
00:43:07,339 --> 00:43:11,950
improve the infrastructure capabilities

946
00:43:08,299 --> 00:43:16,099
to query the process states in memory

947
00:43:11,950 --> 00:43:17,569
across Windows and Linux and you can

948
00:43:16,099 --> 00:43:20,150
also work on performance study because

949
00:43:17,569 --> 00:43:22,880
window et folks they didn't wanted to

950
00:43:20,150 --> 00:43:25,220
use a BMI because it was too slow at the

951
00:43:22,880 --> 00:43:27,500
end if I want to have this vision where

952
00:43:25,220 --> 00:43:29,669
everyone is using the BMI as a unified

953
00:43:27,500 --> 00:43:33,479
unified deeper

954
00:43:29,670 --> 00:43:35,640
you might want to have it as efficient

955
00:43:33,479 --> 00:43:38,368
as possible so that everyone uses use it

956
00:43:35,640 --> 00:43:40,319
and also rewriting in rust that's the

957
00:43:38,369 --> 00:43:42,989
question I asked before you can look

958
00:43:40,319 --> 00:43:45,650
into it and 4 pi/3 ID BG itself

959
00:43:42,989 --> 00:43:48,809
well you can always improve the GTB stub

960
00:43:45,650 --> 00:43:50,789
you have there's other stuff to be

961
00:43:48,809 --> 00:43:54,930
written and LD be ok d if you want use

962
00:43:50,789 --> 00:43:56,099
windbg or over debug front-ends and if

963
00:43:54,930 --> 00:43:57,779
you know about windows or linux

964
00:43:56,099 --> 00:44:00,119
internals about the scheduler how the

965
00:43:57,779 --> 00:44:02,069
context switch is working how the

966
00:44:00,119 --> 00:44:04,979
process that is is stored in memory

967
00:44:02,069 --> 00:44:08,089
well also please come talk to me and you

968
00:44:04,979 --> 00:44:13,200
can join the slack as me fling bytes but

969
00:44:08,089 --> 00:44:14,519
using our work from from there my

970
00:44:13,200 --> 00:44:16,890
conclusion for this is for this talk is

971
00:44:14,519 --> 00:44:18,569
that first 5 proviso never dip a proviso

972
00:44:16,890 --> 00:44:21,808
developers I would like to build a

973
00:44:18,569 --> 00:44:23,308
unified framework for debugging and I

974
00:44:21,809 --> 00:44:27,150
would like to leverage the full power of

975
00:44:23,309 --> 00:44:29,940
our hypervisor and focused on these

976
00:44:27,150 --> 00:44:32,609
abstractions together to facilitate the

977
00:44:29,940 --> 00:44:33,989
work of others if you are a veteran

978
00:44:32,609 --> 00:44:36,119
machine user where I would like to you

979
00:44:33,989 --> 00:44:38,609
to see your veteran machine as a new

980
00:44:36,119 --> 00:44:40,349
process 3 it's not an open container

981
00:44:38,609 --> 00:44:42,989
anymore the veteran in transmission

982
00:44:40,349 --> 00:44:45,809
api's I've done that they are not the

983
00:44:42,989 --> 00:44:47,940
VMS are not fully now fully introspect

984
00:44:45,809 --> 00:44:50,069
able and inspectable so you can debug

985
00:44:47,940 --> 00:44:53,670
them and you can see them like on

986
00:44:50,069 --> 00:44:55,680
transport container and also keeping the

987
00:44:53,670 --> 00:44:58,499
same environment if you are researching

988
00:44:55,680 --> 00:45:00,239
on Windows Linux whatever the version I

989
00:44:58,499 --> 00:45:02,848
want you to keep the same environments

990
00:45:00,239 --> 00:45:05,569
and debug this from your host and well

991
00:45:02,849 --> 00:45:07,589
for everyone I'd like to say that our

992
00:45:05,569 --> 00:45:09,410
hypervisors have demonstrated to are

993
00:45:07,589 --> 00:45:12,630
their unique abilities for the for

994
00:45:09,410 --> 00:45:16,129
sandboxing and i would like us to use

995
00:45:12,630 --> 00:45:21,049
them to build a new debug framework and

996
00:45:16,130 --> 00:45:21,049
make it as a commodity for for everyone

997
00:45:21,229 --> 00:45:26,609
thank you to all of these people what a

998
00:45:24,539 --> 00:45:28,589
Microsoft found from Twitter from

999
00:45:26,609 --> 00:45:31,199
everywhere they helped me build this

1000
00:45:28,589 --> 00:45:33,719
talk thank you so much for them if you

1001
00:45:31,199 --> 00:45:34,940
have questions I'm available thank you

1002
00:45:33,719 --> 00:45:35,700
for attention

1003
00:45:34,940 --> 00:45:38,950
[Applause]

1004
00:45:35,700 --> 00:45:40,410
[Music]

1005
00:45:38,950 --> 00:45:44,379
[Applause]

1006
00:45:40,410 --> 00:45:46,149
Thank You Matthew for your talk so if

1007
00:45:44,380 --> 00:45:46,780
there's any question please raise your

1008
00:45:46,150 --> 00:45:49,180
hand

1009
00:45:46,780 --> 00:45:59,800
yes give you the mid all right there's

1010
00:45:49,180 --> 00:46:01,450
one there um hi I thank you very much

1011
00:45:59,800 --> 00:46:06,099
for a talk I have a question about

1012
00:46:01,450 --> 00:46:08,189
performance can I insert like a hundred

1013
00:46:06,099 --> 00:46:12,000
of thousand break points and

1014
00:46:08,190 --> 00:46:14,470
introspected in a normal amount of time

1015
00:46:12,000 --> 00:46:17,380
well about performance do wind up easy

1016
00:46:14,470 --> 00:46:19,868
for those who are focused on performance

1017
00:46:17,380 --> 00:46:22,780
they say they could reach like 21k

1018
00:46:19,869 --> 00:46:24,700
breakpoints per second using their KT

1019
00:46:22,780 --> 00:46:29,410
step directly connected to a veteran box

1020
00:46:24,700 --> 00:46:31,930
with VMI so they that's what you can do

1021
00:46:29,410 --> 00:46:34,569
from the hypervisor it's what was 21 k

1022
00:46:31,930 --> 00:46:36,578
per second on my side I'm not targeting

1023
00:46:34,569 --> 00:46:39,250
full performance because I don't want I

1024
00:46:36,579 --> 00:46:41,109
want to keep this compatibility layer to

1025
00:46:39,250 --> 00:46:43,510
do sometimes a bit of debugging but not

1026
00:46:41,109 --> 00:46:46,058
tracing like you can but you can think

1027
00:46:43,510 --> 00:46:47,859
of but I think you might want to look at

1028
00:46:46,059 --> 00:46:49,420
the window ket project to see what they

1029
00:46:47,859 --> 00:46:51,759
have accomplished with performance and

1030
00:46:49,420 --> 00:46:54,609
what we can do if we BMI is for example

1031
00:46:51,760 --> 00:46:56,260
uses a staff def - SH M for shame memory

1032
00:46:54,609 --> 00:46:58,808
for the access to improve the

1033
00:46:56,260 --> 00:47:00,790
performance of this and yeah there's

1034
00:46:58,809 --> 00:47:03,700
work to be done like I said in a only

1035
00:47:00,790 --> 00:47:05,349
BMI but look at women like et I'm sure

1036
00:47:03,700 --> 00:47:18,009
you can find your answers about

1037
00:47:05,349 --> 00:47:20,770
performance any other question hello

1038
00:47:18,010 --> 00:47:22,510
thank you for your talk and I was

1039
00:47:20,770 --> 00:47:24,880
wondering in the part about motivation

1040
00:47:22,510 --> 00:47:26,890
you described for instance like malware

1041
00:47:24,880 --> 00:47:29,200
analysis and the lack of side channels

1042
00:47:26,890 --> 00:47:31,598
of these kind of approaches I mean such

1043
00:47:29,200 --> 00:47:34,480
channels like actually side effects and

1044
00:47:31,599 --> 00:47:36,730
you know that kind of stuff yeah oh that

1045
00:47:34,480 --> 00:47:39,549
can of course be fixed like I'm talking

1046
00:47:36,730 --> 00:47:41,440
things like times time counters and you

1047
00:47:39,549 --> 00:47:43,329
know things oh yeah yeah I'm sure this

1048
00:47:41,440 --> 00:47:44,920
is also side effects because you're

1049
00:47:43,329 --> 00:47:46,900
debugging for the hypervisor what I

1050
00:47:44,920 --> 00:47:48,850
meant as debugging side effects was more

1051
00:47:46,900 --> 00:47:50,700
about formal analysis

1052
00:47:48,850 --> 00:47:53,380
I wanted to be able to tackle this

1053
00:47:50,700 --> 00:47:55,689
untidy bug issue we have we're not going

1054
00:47:53,380 --> 00:47:57,490
to solve the anti vien of course but at

1055
00:47:55,690 --> 00:47:58,900
least if we could solve this untidy bug

1056
00:47:57,490 --> 00:48:00,970
issue that we have with the debugging

1057
00:47:58,900 --> 00:48:03,970
API is like being visible it will

1058
00:48:00,970 --> 00:48:05,709
already be a great step I think so yes

1059
00:48:03,970 --> 00:48:08,319
it has side effects right of course but

1060
00:48:05,710 --> 00:48:10,170
I will my point you say okay let's all

1061
00:48:08,320 --> 00:48:13,840
let's solve already the anti debug and

1062
00:48:10,170 --> 00:48:15,550
we can see that even for if run remove

1063
00:48:13,840 --> 00:48:16,600
the Morales case it's already really

1064
00:48:15,550 --> 00:48:18,190
convenient to the belt from the

1065
00:48:16,600 --> 00:48:20,950
hypervisor to debug anything you want

1066
00:48:18,190 --> 00:48:22,750
yep so my actual question is that those

1067
00:48:20,950 --> 00:48:26,560
kind of things can be technically fix a

1068
00:48:22,750 --> 00:48:29,860
but fixing such an issue would imply a

1069
00:48:26,560 --> 00:48:30,970
hypervisor or specific patch and for

1070
00:48:29,860 --> 00:48:34,150
instance the pro you mean will give you

1071
00:48:30,970 --> 00:48:37,379
a Shinto special API I mean if you want

1072
00:48:34,150 --> 00:48:39,970
to fix something like a detection we are

1073
00:48:37,380 --> 00:48:44,830
times time counters like differences

1074
00:48:39,970 --> 00:48:48,339
that this is on TV so yeah so basically

1075
00:48:44,830 --> 00:48:50,730
when you present hyper breakpoints some

1076
00:48:48,340 --> 00:48:53,020
send for instance implemented that and

1077
00:48:50,730 --> 00:48:54,970
that's something that is hypervisor

1078
00:48:53,020 --> 00:48:57,070
specific doesn't work across all they

1079
00:48:54,970 --> 00:48:58,720
you know set off hypervisor yeah that

1080
00:48:57,070 --> 00:49:00,790
that's why we need to develop this vmi

1081
00:48:58,720 --> 00:49:02,350
API and I would like a bit of a call to

1082
00:49:00,790 --> 00:49:04,210
everyone to directly systematize

1083
00:49:02,350 --> 00:49:10,180
interface to work with the same

1084
00:49:04,210 --> 00:49:14,310
breakpoints all of us okay thank you the

1085
00:49:10,180 --> 00:49:16,720
talk you mentioned execution breakpoints

1086
00:49:14,310 --> 00:49:18,930
you could also do the same thing for

1087
00:49:16,720 --> 00:49:24,490
readwrite breakpoints right

1088
00:49:18,930 --> 00:49:26,470
what do you mean basically break from a

1089
00:49:24,490 --> 00:49:27,609
page like I said that you had like a

1090
00:49:26,470 --> 00:49:29,350
fine-grained breakpoints because you

1091
00:49:27,610 --> 00:49:31,680
could remove the bits which was read

1092
00:49:29,350 --> 00:49:33,970
write or execute and yes you have this

1093
00:49:31,680 --> 00:49:38,080
flexibility of fine grained breakpoints

1094
00:49:33,970 --> 00:49:44,399
with page hyper backbones yes any other

1095
00:49:38,080 --> 00:49:47,259
question how does it work

1096
00:49:44,400 --> 00:49:51,750
how does it work if the guest is not

1097
00:49:47,260 --> 00:49:51,750
trying protected mode he's not running

1098
00:49:57,630 --> 00:50:02,020
well the hypervisor has to emanate this

1099
00:50:00,250 --> 00:50:04,180
real mode I think

1100
00:50:02,020 --> 00:50:06,369
this'll be technical I'm not average

1101
00:50:04,180 --> 00:50:08,080
never than the hypervisor myself but I

1102
00:50:06,369 --> 00:50:09,850
think that in the early stages of the

1103
00:50:08,080 --> 00:50:10,900
boot if you want to do this boot

1104
00:50:09,850 --> 00:50:13,060
sequence analysis that we have seen

1105
00:50:10,900 --> 00:50:21,640
earlier the the hypervisor has to

1106
00:50:13,060 --> 00:50:23,590
emulate the real mode I think well

1107
00:50:21,640 --> 00:50:25,480
that's what trauma flex was doing so you

1108
00:50:23,590 --> 00:50:28,300
can check the project if you want there

1109
00:50:25,480 --> 00:50:29,560
is no paper so they said they want they

1110
00:50:28,300 --> 00:50:32,740
they brought the bringing bios's and

1111
00:50:29,560 --> 00:50:36,790
physical machines so yeah please check

1112
00:50:32,740 --> 00:50:37,890
the project okay we have time for two

1113
00:50:36,790 --> 00:50:41,440
more questions

1114
00:50:37,890 --> 00:50:43,390
there is one um so you said that

1115
00:50:41,440 --> 00:50:46,890
emulation can have some kind of

1116
00:50:43,390 --> 00:50:46,890
instabilities what do you mean by that

1117
00:50:47,520 --> 00:50:53,520
so if you emulate multiple instructions

1118
00:50:50,980 --> 00:50:55,930
at the same time well in the sequence

1119
00:50:53,520 --> 00:50:58,420
this could lead to instabilities there

1120
00:50:55,930 --> 00:51:01,118
is an article on that on the Zen blog

1121
00:50:58,420 --> 00:51:03,070
I haven't eaten mind so but I will I can

1122
00:51:01,119 --> 00:51:05,170
give you the link to the article which

1123
00:51:03,070 --> 00:51:07,180
was that was a book on the mailing list

1124
00:51:05,170 --> 00:51:09,340
that that a guy used emulation to

1125
00:51:07,180 --> 00:51:11,640
emulate the page multiple times and his

1126
00:51:09,340 --> 00:51:13,690
windows just crashed because of it so

1127
00:51:11,640 --> 00:51:16,270
heavy emulation can in twistable

1128
00:51:13,690 --> 00:51:19,150
instabilities that's why I cannot give

1129
00:51:16,270 --> 00:51:25,390
you the link to talk short last question

1130
00:51:19,150 --> 00:51:27,730
the first I see a questions okay perfect

1131
00:51:25,390 --> 00:51:28,660
so thank you again mature thank you

1132
00:51:27,730 --> 00:51:33,480
thank you

1133
00:51:28,660 --> 00:51:33,480
[Music]

