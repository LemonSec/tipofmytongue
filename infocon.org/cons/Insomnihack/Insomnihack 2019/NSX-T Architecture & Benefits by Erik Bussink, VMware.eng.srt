1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:13,799 --> 00:00:19,599
so I've got quite a lot of content I

3
00:00:16,960 --> 00:00:22,330
actually didn't expect 45 minutes but a

4
00:00:19,599 --> 00:00:25,420
little bit more and I've got videos of

5
00:00:22,330 --> 00:00:28,448
some demonstrations so luckily we'll

6
00:00:25,420 --> 00:00:31,840
save time because it's fast forwarded I

7
00:00:28,449 --> 00:00:33,940
just have one or two questions everyone

8
00:00:31,840 --> 00:00:40,030
understands English or should I switch

9
00:00:33,940 --> 00:00:42,968
to French no no okay all right the next

10
00:00:40,030 --> 00:00:46,989
question I have is does everyone know

11
00:00:42,969 --> 00:00:50,980
about NSX other people that don't know

12
00:00:46,989 --> 00:00:55,390
NSX know other people that don't know

13
00:00:50,980 --> 00:00:57,849
about network overlays okay what I'm

14
00:00:55,390 --> 00:01:00,699
gonna do in this presentation is

15
00:00:57,850 --> 00:01:04,229
actually a level 200-300 I'm not gonna

16
00:01:00,699 --> 00:01:07,420
go in deep dive I have quite a lot of

17
00:01:04,229 --> 00:01:11,110
off slide so I'm gonna try to keep the

18
00:01:07,420 --> 00:01:12,880
questions for the end if you can because

19
00:01:11,110 --> 00:01:17,020
I have lots of things that will come in

20
00:01:12,880 --> 00:01:19,060
later on so NSX is not just a single

21
00:01:17,020 --> 00:01:21,280
project anymore we are now up to

22
00:01:19,060 --> 00:01:23,560
portfolio with at least six different

23
00:01:21,280 --> 00:01:25,920
products different different

24
00:01:23,560 --> 00:01:30,429
acquisitions and different tools

25
00:01:25,920 --> 00:01:33,700
the last one that we did was buying Velo

26
00:01:30,429 --> 00:01:37,119
cloud so now we also have NSX Software

27
00:01:33,700 --> 00:01:41,050
Defined one by velop cloud allowing you

28
00:01:37,119 --> 00:01:43,179
to communicate with remote sites but the

29
00:01:41,050 --> 00:01:45,970
main focus of the presentation today is

30
00:01:43,179 --> 00:01:49,599
going to be on NSX data center and its

31
00:01:45,970 --> 00:01:51,759
extension to the cloud based on our last

32
00:01:49,599 --> 00:01:58,349
version of the product of NSX which is

33
00:01:51,759 --> 00:01:58,349
NSX T so it's the third iteration of NSX

34
00:01:58,830 --> 00:02:06,399
so the agenda to start today is first C

35
00:02:03,910 --> 00:02:09,310
a bit the the definition and the

36
00:02:06,399 --> 00:02:11,770
problems we trying to solve talk about

37
00:02:09,310 --> 00:02:14,590
the overlay that we've implemented with

38
00:02:11,770 --> 00:02:18,600
the videos then starting for using an

39
00:02:14,590 --> 00:02:21,790
s60 and after that I'll go to a demo of

40
00:02:18,600 --> 00:02:25,140
NSX tea and how we can leverage

41
00:02:21,790 --> 00:02:28,269
the multi-cloud and do microsegmentation

42
00:02:25,140 --> 00:02:31,958
between on-prem data center and the

43
00:02:28,269 --> 00:02:33,790
cloud then we'll dive into the

44
00:02:31,959 --> 00:02:36,370
components of the architecture and

45
00:02:33,790 --> 00:02:44,019
finish where the different distributed

46
00:02:36,370 --> 00:02:46,359
service that are inside NSX T so I guess

47
00:02:44,019 --> 00:02:48,780
everyone knows about hos visualization

48
00:02:46,359 --> 00:02:51,519
product we've done for the last 20 years

49
00:02:48,780 --> 00:02:55,239
where where you can easily deploy

50
00:02:51,519 --> 00:02:57,430
multiple virtual machines so in this

51
00:02:55,239 --> 00:03:02,650
case we've got two racks they have each

52
00:02:57,430 --> 00:03:05,939
their own subnets so with an SX or sorry

53
00:03:02,650 --> 00:03:10,540
with vSphere ESX you can trade machines

54
00:03:05,939 --> 00:03:13,689
you can have multiple VMs and the best

55
00:03:10,540 --> 00:03:17,069
thing we have since about 15 years and

56
00:03:13,689 --> 00:03:21,280
has probably saved quite a lot of you

57
00:03:17,069 --> 00:03:23,290
weekends of work is V motion there's no

58
00:03:21,280 --> 00:03:25,359
way I will give up the motion the fact

59
00:03:23,290 --> 00:03:29,168
that you can migrate a virtual machine

60
00:03:25,359 --> 00:03:30,780
live from one house to another and go on

61
00:03:29,169 --> 00:03:35,560
your weekend normally without

62
00:03:30,780 --> 00:03:38,829
maintenance times well in our case if we

63
00:03:35,560 --> 00:03:42,340
V motion now for example this VM to

64
00:03:38,829 --> 00:03:44,349
another rack and we've survived it this

65
00:03:42,340 --> 00:03:46,000
rack with a different subnet then we're

66
00:03:44,349 --> 00:03:48,548
gonna have some issues because the

67
00:03:46,000 --> 00:03:52,000
network will not be the same on it so

68
00:03:48,549 --> 00:03:54,639
we'll have a problem is that we're not

69
00:03:52,000 --> 00:03:56,769
going to have the communication now when

70
00:03:54,639 --> 00:03:58,569
I say second racket could be a second

71
00:03:56,769 --> 00:04:03,220
datacenter could be on the other side of

72
00:03:58,569 --> 00:04:05,470
town so we have an issue so what

73
00:04:03,220 --> 00:04:09,340
happened is that people started creating

74
00:04:05,470 --> 00:04:11,790
stretched layer tool and lots of

75
00:04:09,340 --> 00:04:15,129
products came out about 10 years ago to

76
00:04:11,790 --> 00:04:19,060
optimize this but this can also cause us

77
00:04:15,129 --> 00:04:21,789
some different issues so what happens if

78
00:04:19,060 --> 00:04:24,490
in a stretch environment with layer 2

79
00:04:21,789 --> 00:04:27,909
you have instances of physical firewalls

80
00:04:24,490 --> 00:04:29,860
load balancers f5s you're not gonna have

81
00:04:27,909 --> 00:04:31,960
them all over the place and you're gonna

82
00:04:29,860 --> 00:04:34,390
have to route traffic warmth from one

83
00:04:31,960 --> 00:04:37,120
side back to the first one

84
00:04:34,390 --> 00:04:40,300
to get through the services that you

85
00:04:37,120 --> 00:04:42,520
have for traffic north so suddenly we

86
00:04:40,300 --> 00:04:45,070
found ourself again with an issue with

87
00:04:42,520 --> 00:04:49,539
trombone in traffic all across the man

88
00:04:45,070 --> 00:04:55,300
and so that was a problem we tried to

89
00:04:49,540 --> 00:04:59,470
address with NSX so what we're gonna do

90
00:04:55,300 --> 00:05:01,750
with an effect is we gonna instantiate a

91
00:04:59,470 --> 00:05:05,650
later broadcast domain inside every

92
00:05:01,750 --> 00:05:10,420
hypervisor so here I've got some blue

93
00:05:05,650 --> 00:05:14,260
VMs on a logical switch will take on

94
00:05:10,420 --> 00:05:17,080
each host we will implement NSX T and

95
00:05:14,260 --> 00:05:19,630
we'll create a local lay to domain and

96
00:05:17,080 --> 00:05:23,380
the communications between hosts is

97
00:05:19,630 --> 00:05:25,120
going to be done via an IP tunnel so

98
00:05:23,380 --> 00:05:27,070
what you see on the graphic here is

99
00:05:25,120 --> 00:05:30,250
actually tabs which are the tunnel

100
00:05:27,070 --> 00:05:32,950
endpoints on every host and then our

101
00:05:30,250 --> 00:05:37,450
data plane what we're gonna have is keep

102
00:05:32,950 --> 00:05:39,490
track of which VM on which host or the

103
00:05:37,450 --> 00:05:44,979
MAC address of that VM corresponds to

104
00:05:39,490 --> 00:05:48,010
which tunnel endpoint so our two blue

105
00:05:44,980 --> 00:05:51,390
VMs are on our logical switch so we now

106
00:05:48,010 --> 00:05:55,140
have an N VDS switch inside a host and

107
00:05:51,390 --> 00:05:59,740
VDS stands for nsx managed virtual

108
00:05:55,140 --> 00:06:02,490
distributed switch so we've evolved from

109
00:05:59,740 --> 00:06:06,760
the vSphere distributed switch to this

110
00:06:02,490 --> 00:06:12,970
and our two VMs will be on this network

111
00:06:06,760 --> 00:06:17,560
you will get all the slides from SEO but

112
00:06:12,970 --> 00:06:20,890
the videos here will have it so at this

113
00:06:17,560 --> 00:06:23,950
point when a virtual machine is moved

114
00:06:20,890 --> 00:06:27,250
from one house to another well it's

115
00:06:23,950 --> 00:06:28,570
going to be encapsulated or the traffic

116
00:06:27,250 --> 00:06:31,630
between the VMS will be encapsulated

117
00:06:28,570 --> 00:06:35,620
through this tunnel so that's our

118
00:06:31,630 --> 00:06:40,210
overlay really so coming back to the VMS

119
00:06:35,620 --> 00:06:43,240
that move our data plane will update the

120
00:06:40,210 --> 00:06:47,558
settings so now we know that the the VM

121
00:06:43,240 --> 00:06:50,139
2 is now behind the tunnel endpoint B 3

122
00:06:47,559 --> 00:06:53,139
and we're gonna be routing again via the

123
00:06:50,139 --> 00:06:56,799
IP tunnel or the overlay the traffic

124
00:06:53,139 --> 00:07:01,179
between the two machines and as you see

125
00:06:56,799 --> 00:07:04,269
now the physical network subnet a and B

126
00:07:01,179 --> 00:07:06,958
can be still different we'll still have

127
00:07:04,269 --> 00:07:09,639
coming connectivity between the VMS and

128
00:07:06,959 --> 00:07:15,399
they will be able to move from one side

129
00:07:09,639 --> 00:07:17,559
to another to get this working because

130
00:07:15,399 --> 00:07:20,049
we are encapsulating the traffic we have

131
00:07:17,559 --> 00:07:23,469
only two requirements on the physical

132
00:07:20,049 --> 00:07:26,498
network we need I P connectivity and we

133
00:07:23,469 --> 00:07:31,449
need traffic to be at least thousand

134
00:07:26,499 --> 00:07:34,359
six-hundred in as an MTU Jim warframe is

135
00:07:31,449 --> 00:07:38,499
recommended but not everyone is doing

136
00:07:34,359 --> 00:07:41,079
that yet so after that all the

137
00:07:38,499 --> 00:07:44,949
communications work the overlay that we

138
00:07:41,079 --> 00:07:46,449
use with NSX T is called genève it's the

139
00:07:44,949 --> 00:07:49,509
generic and network release

140
00:07:46,449 --> 00:07:53,409
virtualization it's a follow up to the

141
00:07:49,509 --> 00:07:56,949
week slam but it allows more headers

142
00:07:53,409 --> 00:08:04,719
mated meta data in the headers and

143
00:07:56,949 --> 00:08:08,829
flexible m qs so for our requirements IP

144
00:08:04,719 --> 00:08:11,379
connectivity and thousand 600 MTU you

145
00:08:08,829 --> 00:08:14,379
can use whatever physical network you

146
00:08:11,379 --> 00:08:16,839
have so if you've got all switches if

147
00:08:14,379 --> 00:08:19,899
you've got new switches if your spine

148
00:08:16,839 --> 00:08:23,169
leaf if your different constructors

149
00:08:19,899 --> 00:08:27,039
routing whatever configuration you have

150
00:08:23,169 --> 00:08:30,429
it works so you don't have to reinvest

151
00:08:27,039 --> 00:08:33,188
in new switches only in well invest in

152
00:08:30,429 --> 00:08:35,769
switches when you are near capacity or

153
00:08:33,188 --> 00:08:40,259
you're out of support no need to change

154
00:08:35,769 --> 00:08:42,879
your lower level of the infrastructure

155
00:08:40,259 --> 00:08:44,709
so if your infrastructure is multiple

156
00:08:42,879 --> 00:08:46,860
vendor or multiple generation of

157
00:08:44,709 --> 00:08:50,189
switches that doesn't matter to us as

158
00:08:46,860 --> 00:08:57,250
long as we have this IP connectivity and

159
00:08:50,189 --> 00:08:59,589
dmt you one of the other benefits we get

160
00:08:57,250 --> 00:09:01,360
from the visualization of the network

161
00:08:59,589 --> 00:09:04,600
where the overlay is

162
00:09:01,360 --> 00:09:06,850
that you're only gonna have the logical

163
00:09:04,600 --> 00:09:11,620
switches for those virtual machines on

164
00:09:06,850 --> 00:09:16,089
the house that have them we can reuse IP

165
00:09:11,620 --> 00:09:19,089
ranges so if you later on want to have

166
00:09:16,089 --> 00:09:21,790
an application in a shell for Quality

167
00:09:19,089 --> 00:09:25,589
Assurance or whatever for testing you

168
00:09:21,790 --> 00:09:28,449
can just copy the VMS with the network

169
00:09:25,589 --> 00:09:30,670
so there's no address of conflict and

170
00:09:28,450 --> 00:09:33,279
we'll see how we can manage afterwards

171
00:09:30,670 --> 00:09:35,800
the routing and you can all do this

172
00:09:33,279 --> 00:09:40,600
either using the user interface so an

173
00:09:35,800 --> 00:09:43,209
s60 is now using an HTML html5 interface

174
00:09:40,600 --> 00:09:45,430
no more flash no more flex that's done

175
00:09:43,209 --> 00:09:48,399
it's a completely separate management

176
00:09:45,430 --> 00:09:52,180
platform so you don't have to go via the

177
00:09:48,399 --> 00:09:55,720
vCenter to do this and it can all be

178
00:09:52,180 --> 00:09:59,430
automated so after that it's using REST

179
00:09:55,720 --> 00:10:02,800
API commands so you can use PowerShell

180
00:09:59,430 --> 00:10:06,219
ansible terraform whatever you can

181
00:10:02,800 --> 00:10:08,439
automate it so i've got customers here

182
00:10:06,220 --> 00:10:11,519
in the swiss c'mon that have deployed

183
00:10:08,440 --> 00:10:15,279
the whole nsx with a powershell command

184
00:10:11,519 --> 00:10:19,750
script others have used ansible so

185
00:10:15,279 --> 00:10:26,470
whatever you fancy within limits you can

186
00:10:19,750 --> 00:10:30,220
use to deploy the next step after just

187
00:10:26,470 --> 00:10:32,019
managing this layer to broadcast and

188
00:10:30,220 --> 00:10:34,990
networking is that we're gonna be able

189
00:10:32,019 --> 00:10:38,740
to do firewalling straight on the v-neck

190
00:10:34,990 --> 00:10:40,930
of the virtual machine so it's not done

191
00:10:38,740 --> 00:10:44,529
inside the video machine but on the

192
00:10:40,930 --> 00:10:47,069
network card so after this we can really

193
00:10:44,529 --> 00:10:50,140
filter we can do micro segmentation

194
00:10:47,070 --> 00:10:52,420
stopping subnet one to talk to subnet 2

195
00:10:50,140 --> 00:10:54,819
micro segmentation within the same

196
00:10:52,420 --> 00:10:57,430
subnet so that the database server

197
00:10:54,820 --> 00:10:59,709
cannot talk to web server only the app

198
00:10:57,430 --> 00:11:02,500
server can talk to the database and so

199
00:10:59,709 --> 00:11:07,829
on and all those rules are managed

200
00:11:02,500 --> 00:11:07,829
centrally in the management of DNS X

201
00:11:08,160 --> 00:11:14,290
there you

202
00:11:10,600 --> 00:11:17,670
can group the VMS by multiple by IP set

203
00:11:14,290 --> 00:11:20,709
ranges by machines you can use regex

204
00:11:17,670 --> 00:11:27,219
commands to group those virtual machines

205
00:11:20,709 --> 00:11:29,560
for those rules but with nsx we wanted

206
00:11:27,220 --> 00:11:31,810
to do more than just layer 2 and micro

207
00:11:29,560 --> 00:11:34,869
segmentation the idea is to have all the

208
00:11:31,810 --> 00:11:38,199
different network services inside the

209
00:11:34,870 --> 00:11:41,500
software so switching routing load

210
00:11:38,199 --> 00:11:44,560
balancing VPN firewall connection to

211
00:11:41,500 --> 00:11:46,509
defer to the physical world lay to

212
00:11:44,560 --> 00:11:49,300
bridging if you've got hosts that are

213
00:11:46,509 --> 00:11:54,130
still physical and you want them to talk

214
00:11:49,300 --> 00:11:57,910
to virtual machines NAT DHCP and all the

215
00:11:54,130 --> 00:12:01,660
meta Dan metadata we also have a small

216
00:11:57,910 --> 00:12:04,630
IPAM for this specific use cases if you

217
00:12:01,660 --> 00:12:12,459
do containers inside NSX you can consume

218
00:12:04,630 --> 00:12:15,130
this also so the the best thing about

219
00:12:12,459 --> 00:12:17,258
this version of NSX and I think it's a

220
00:12:15,130 --> 00:12:20,350
game changer compared to the previous

221
00:12:17,259 --> 00:12:23,800
version which was NSX for vSphere is

222
00:12:20,350 --> 00:12:28,870
that we support multiple platforms so

223
00:12:23,800 --> 00:12:32,109
you can manage ESX hosts running and a

224
00:12:28,870 --> 00:12:35,500
60 you can have clusters with k vm hosts

225
00:12:32,110 --> 00:12:40,360
so we support Ubuntu right at Santos

226
00:12:35,500 --> 00:12:42,699
Susie we have an agent that deploys and

227
00:12:40,360 --> 00:12:46,269
manage this Nvidia's on those Linux

228
00:12:42,699 --> 00:12:49,410
machines using open V switch and was the

229
00:12:46,269 --> 00:12:52,689
same agent actually we can also protect

230
00:12:49,410 --> 00:12:55,240
Linux bare metal servers so if you've

231
00:12:52,689 --> 00:12:57,099
got SAP HANA running on a Suzy 12 and

232
00:12:55,240 --> 00:12:59,290
you want to protect it with micro

233
00:12:57,100 --> 00:13:01,329
segmentation you can do it if you run

234
00:12:59,290 --> 00:13:06,099
Oracle database on a Red Hat machines

235
00:13:01,329 --> 00:13:10,479
you can do it we support workloads may

236
00:13:06,100 --> 00:13:15,009
they may be VMs containers kubernetes

237
00:13:10,480 --> 00:13:17,769
openshift OpenStack bare metal agents

238
00:13:15,009 --> 00:13:21,370
multiple V centers so you're not bound

239
00:13:17,769 --> 00:13:23,800
one nsx manager to one V Center so we

240
00:13:21,370 --> 00:13:24,310
just consumed the V centers for compute

241
00:13:23,800 --> 00:13:27,910
now

242
00:13:24,310 --> 00:13:33,030
and it's the same code that is used

243
00:13:27,910 --> 00:13:35,800
actually to also extend NSX in a cloud

244
00:13:33,030 --> 00:13:39,160
single source code from which we compile

245
00:13:35,800 --> 00:13:43,719
the API and then we can deploy virtual

246
00:13:39,160 --> 00:13:46,750
machines on Azure on AWS or what we call

247
00:13:43,720 --> 00:13:49,780
VM C which is VMware on AWS

248
00:13:46,750 --> 00:13:53,140
so that's ESX servers that run in AWS

249
00:13:49,780 --> 00:13:59,170
data centers all this with NSX T with a

250
00:13:53,140 --> 00:14:01,210
single source code the use cases just

251
00:13:59,170 --> 00:14:03,160
gonna briefly point to the different use

252
00:14:01,210 --> 00:14:04,630
cases so it's security naturally

253
00:14:03,160 --> 00:14:06,790
microsegmentation

254
00:14:04,630 --> 00:14:11,680
integration with firewalls from third

255
00:14:06,790 --> 00:14:14,530
parties service insertion cloud a native

256
00:14:11,680 --> 00:14:17,140
applications so we still get security

257
00:14:14,530 --> 00:14:21,100
routing load balancing functions

258
00:14:17,140 --> 00:14:23,530
automation customer are wanting to move

259
00:14:21,100 --> 00:14:26,710
to really automating the deployment of

260
00:14:23,530 --> 00:14:30,310
the infrastructure terraform and a multi

261
00:14:26,710 --> 00:14:32,200
cloud it's the only slide I'm gonna do

262
00:14:30,310 --> 00:14:34,270
on the use cases because I've got a

263
00:14:32,200 --> 00:14:36,190
slide deck and I can talk for now just

264
00:14:34,270 --> 00:14:40,810
on really use cases and we don't have

265
00:14:36,190 --> 00:14:43,210
that time so the first demo I want to do

266
00:14:40,810 --> 00:14:47,229
and also record the demo so I know it

267
00:14:43,210 --> 00:14:49,780
works is actually an application we've

268
00:14:47,230 --> 00:14:51,970
deployed called plane spotted NSX CC

269
00:14:49,780 --> 00:14:55,900
dotnet and you can test it for right now

270
00:14:51,970 --> 00:15:00,460
if you want it has six front-end web

271
00:14:55,900 --> 00:15:03,280
servers that are located in AWS and in

272
00:15:00,460 --> 00:15:05,890
Azure and the database for the

273
00:15:03,280 --> 00:15:09,480
application and the data itself is on

274
00:15:05,890 --> 00:15:12,400
front in our data center in Palo Alto

275
00:15:09,480 --> 00:15:16,600
we've got connections between our own

276
00:15:12,400 --> 00:15:22,000
Prem network and edible yes here using V

277
00:15:16,600 --> 00:15:24,070
PCs and vennett going to azure so when

278
00:15:22,000 --> 00:15:26,050
you hit this webpage you will be on one

279
00:15:24,070 --> 00:15:28,300
of those sites and the data is kept

280
00:15:26,050 --> 00:15:32,069
inside

281
00:15:28,300 --> 00:15:34,810
so let's have a start of a look of the

282
00:15:32,070 --> 00:15:39,520
deployment what we have here is actually

283
00:15:34,810 --> 00:15:42,339
the the graphical interface of NSX this

284
00:15:39,520 --> 00:15:44,770
is not the last version it's the

285
00:15:42,340 --> 00:15:46,540
previous one so we have the manager

286
00:15:44,770 --> 00:15:50,620
nodes two controllers which is our

287
00:15:46,540 --> 00:15:53,140
control plane the host the edges and

288
00:15:50,620 --> 00:15:55,780
what we're gonna see is here the the

289
00:15:53,140 --> 00:16:06,189
public cloud gate waste going to azure

290
00:15:55,780 --> 00:16:09,790
and AWS connected to different V pcs so

291
00:16:06,190 --> 00:16:13,210
when I look into these clouds after

292
00:16:09,790 --> 00:16:26,110
having that was the same video moving on

293
00:16:13,210 --> 00:16:28,780
to the next one so with an s60 we now

294
00:16:26,110 --> 00:16:30,220
also have a search function so when you

295
00:16:28,780 --> 00:16:32,500
want to quickly find your application

296
00:16:30,220 --> 00:16:36,220
for playing spotter you can do a query

297
00:16:32,500 --> 00:16:38,440
it will really it will bring up all the

298
00:16:36,220 --> 00:16:40,720
devices that have the term playing spot

299
00:16:38,440 --> 00:16:43,840
in the infrastructure based on the

300
00:16:40,720 --> 00:16:47,620
discovery it has done in a ws and in

301
00:16:43,840 --> 00:16:51,790
Azure and as we see we've got different

302
00:16:47,620 --> 00:16:55,330
tags on the different machines here we

303
00:16:51,790 --> 00:17:00,430
see this front-end web server

304
00:16:55,330 --> 00:17:05,470
it's got up here and description of the

305
00:17:00,430 --> 00:17:07,839
these tags so the the next step based on

306
00:17:05,470 --> 00:17:11,250
these tags is that we're gonna be able

307
00:17:07,839 --> 00:17:14,290
to group them we've got different groups

308
00:17:11,250 --> 00:17:17,680
for the front-end based on the tags so

309
00:17:14,290 --> 00:17:20,349
you can use IP sets VMs and the tags and

310
00:17:17,680 --> 00:17:23,470
we see that in this front-end group

311
00:17:20,349 --> 00:17:24,730
we've got the six machines that have

312
00:17:23,470 --> 00:17:28,870
been discovered

313
00:17:24,730 --> 00:17:31,240
we are the inventory so what we're gonna

314
00:17:28,870 --> 00:17:35,270
do afterwards with these six machines is

315
00:17:31,240 --> 00:17:37,669
we're gonna create some fybel rules here

316
00:17:35,270 --> 00:17:40,879
different sections we're gonna open the

317
00:17:37,669 --> 00:17:43,220
plane spotter rules and we've have using

318
00:17:40,880 --> 00:17:45,950
the tags we're gonna show her for

319
00:17:43,220 --> 00:17:50,330
example for the a player the source

320
00:17:45,950 --> 00:17:53,929
being based on the tags database MySQL

321
00:17:50,330 --> 00:17:57,710
and it's on the distributed firewall so

322
00:17:53,929 --> 00:18:00,770
you don't have to be a specialist of AWS

323
00:17:57,710 --> 00:18:03,289
security or Izu security just from the

324
00:18:00,770 --> 00:18:05,720
single pane of management you'll be able

325
00:18:03,289 --> 00:18:09,320
to deploy the rules across the multi

326
00:18:05,720 --> 00:18:19,279
cloud environment is this something

327
00:18:09,320 --> 00:18:22,520
that's looking promising right now to

328
00:18:19,279 --> 00:18:25,789
build up to this kind of demo just gonna

329
00:18:22,520 --> 00:18:28,879
go now over the nsx t architecture and

330
00:18:25,789 --> 00:18:31,700
the next slide is gonna be loaded so

331
00:18:28,880 --> 00:18:36,140
i'll start small hair on the data plane

332
00:18:31,700 --> 00:18:40,700
so we have is an ESX host with our n VDS

333
00:18:36,140 --> 00:18:44,750
switch on top we've got our VMs so this

334
00:18:40,700 --> 00:18:48,710
n VDS which is a new kind of switch that

335
00:18:44,750 --> 00:18:51,590
we do it's managed by the NSX and really

336
00:18:48,710 --> 00:18:55,250
allows us to work on very high

337
00:18:51,590 --> 00:18:56,899
performance and low latency traffic so

338
00:18:55,250 --> 00:18:59,299
this is a switch that has also been

339
00:18:56,899 --> 00:19:06,889
optimized for telcos for everything that

340
00:18:59,299 --> 00:19:09,440
is g5 and we can push up to eight

341
00:19:06,890 --> 00:19:13,159
million packets per second on a two CPU

342
00:19:09,440 --> 00:19:15,679
server so depending on the requirements

343
00:19:13,159 --> 00:19:19,669
of the customers if you do network

344
00:19:15,679 --> 00:19:26,659
function video functions NFV you can use

345
00:19:19,669 --> 00:19:30,350
NS 64 this so the second one and the

346
00:19:26,659 --> 00:19:33,230
extension is now to have n VDS on K VM

347
00:19:30,350 --> 00:19:35,870
hosts so it's going to be an open V

348
00:19:33,230 --> 00:19:41,330
switch implementation of the switch it

349
00:19:35,870 --> 00:19:44,389
has an agent and on top of that now we

350
00:19:41,330 --> 00:19:47,059
also have container workloads so if

351
00:19:44,389 --> 00:19:48,530
you're using kubernetes openshift

352
00:19:47,059 --> 00:19:52,090
OpenStack

353
00:19:48,530 --> 00:19:55,250
we upstream our code for this

354
00:19:52,090 --> 00:19:57,500
disintegration with plugins so whatever

355
00:19:55,250 --> 00:20:02,890
OpenStack solution you use you can

356
00:19:57,500 --> 00:20:02,890
consume under it in a 60 environment

357
00:20:04,960 --> 00:20:11,360
just talking about the traffic and our

358
00:20:08,210 --> 00:20:12,680
nsx edge so the edges and I will come

359
00:20:11,360 --> 00:20:14,840
back on them at the end of my

360
00:20:12,680 --> 00:20:17,300
presentation and really explain more

361
00:20:14,840 --> 00:20:20,629
about them where they are they are the

362
00:20:17,300 --> 00:20:22,669
unwraps to the physical world so when

363
00:20:20,630 --> 00:20:24,650
you have traffic going from one VM to

364
00:20:22,670 --> 00:20:27,770
another in the overlay when it leaves

365
00:20:24,650 --> 00:20:29,660
the overlay for the underlay so the

366
00:20:27,770 --> 00:20:34,070
physical world it's going to be done via

367
00:20:29,660 --> 00:20:36,530
these edges these edges they exist in

368
00:20:34,070 --> 00:20:39,409
two formats you can either have them as

369
00:20:36,530 --> 00:20:42,950
a virtual machine or if you need

370
00:20:39,410 --> 00:20:45,770
performance and high convergence in case

371
00:20:42,950 --> 00:20:53,330
of issues or network issues you can also

372
00:20:45,770 --> 00:20:56,270
have them as a bare-metal server using

373
00:20:53,330 --> 00:20:59,600
the same agent we had for the k vm we

374
00:20:56,270 --> 00:21:02,870
can now do also security and micro

375
00:20:59,600 --> 00:21:05,750
segmentation on bare metal service so as

376
00:21:02,870 --> 00:21:12,020
of the last version which report Ubuntu

377
00:21:05,750 --> 00:21:14,200
had at Santos and Susie the extension in

378
00:21:12,020 --> 00:21:17,930
the cloud so this is all what we call

379
00:21:14,200 --> 00:21:21,950
nf6 cloud so we're gonna deploy an nsx

380
00:21:17,930 --> 00:21:25,070
cloud gateway in Azure or Amazon and you

381
00:21:21,950 --> 00:21:27,470
will consume virtual machines on these

382
00:21:25,070 --> 00:21:29,980
clouds that have the agent inside of

383
00:21:27,470 --> 00:21:32,780
them we don't have access to the lower

384
00:21:29,980 --> 00:21:38,810
level of these network infrastructure

385
00:21:32,780 --> 00:21:40,910
but in machines yeah Google don't know

386
00:21:38,810 --> 00:21:44,030
yet we've got quite a lot of things

387
00:21:40,910 --> 00:21:50,540
planned in the future but not as of

388
00:21:44,030 --> 00:21:54,350
today the next layer above is our

389
00:21:50,540 --> 00:21:57,110
control plane so we have an even number

390
00:21:54,350 --> 00:22:00,199
of controllers that replicate the data

391
00:21:57,110 --> 00:22:01,860
between them so this is our supervisor

392
00:22:00,200 --> 00:22:05,720
module they were

393
00:22:01,860 --> 00:22:08,070
learn which MAC address is on which host

394
00:22:05,720 --> 00:22:10,140
when you have a new machine that is

395
00:22:08,070 --> 00:22:12,899
connected it will inform the controllers

396
00:22:10,140 --> 00:22:14,700
if you have a VM that wants to talk to

397
00:22:12,900 --> 00:22:18,540
someone else it doesn't know it will

398
00:22:14,700 --> 00:22:21,920
connect to the controllers on top of

399
00:22:18,540 --> 00:22:25,409
that we've got our nsx manager cluster

400
00:22:21,920 --> 00:22:30,150
on which you connect using cloud

401
00:22:25,410 --> 00:22:33,919
management platform internal or REST API

402
00:22:30,150 --> 00:22:36,919
peyten terraform whatever you want and

403
00:22:33,919 --> 00:22:40,020
using those rest api we have multiple

404
00:22:36,919 --> 00:22:42,330
connections so we've got our NSX

405
00:22:40,020 --> 00:22:44,970
container plugin so if you use

406
00:22:42,330 --> 00:22:47,840
kubernetes and you want to automate the

407
00:22:44,970 --> 00:22:50,490
deployment of a new namespace Network

408
00:22:47,840 --> 00:22:54,990
load balancer it's all done via this

409
00:22:50,490 --> 00:22:57,809
plugin so in the last version we've

410
00:22:54,990 --> 00:23:00,000
consolidated the control cluster and

411
00:22:57,809 --> 00:23:09,960
management clusters so it's a single set

412
00:23:00,000 --> 00:23:12,720
of 3 vm s that do all these things ok so

413
00:23:09,960 --> 00:23:16,020
let's go a bit through the nsx manager

414
00:23:12,720 --> 00:23:18,690
cluster and how it works so the first

415
00:23:16,020 --> 00:23:20,250
thing while you connect to the manager

416
00:23:18,690 --> 00:23:22,860
it will connect to all the different

417
00:23:20,250 --> 00:23:25,410
hosts you connect so you can connect

418
00:23:22,860 --> 00:23:29,100
straight from the manager to an ESX host

419
00:23:25,410 --> 00:23:31,950
or you can jump via a virtual Center to

420
00:23:29,100 --> 00:23:35,040
manage clusters so in a small

421
00:23:31,950 --> 00:23:38,250
environment you could just add ESX hosts

422
00:23:35,040 --> 00:23:40,409
or k vm hosts straight into the manager

423
00:23:38,250 --> 00:23:44,850
so this is done yeah at the user

424
00:23:40,410 --> 00:23:46,590
interface or via the API we're gonna

425
00:23:44,850 --> 00:23:50,719
keep all the user information

426
00:23:46,590 --> 00:23:55,010
persistent in this dynamic database and

427
00:23:50,720 --> 00:23:58,530
all the queries will be done here

428
00:23:55,010 --> 00:24:01,730
so if I want to connect a virtual

429
00:23:58,530 --> 00:24:04,260
machine on a network it's gonna be the

430
00:24:01,730 --> 00:24:06,419
manager that we're gonna configure so

431
00:24:04,260 --> 00:24:11,340
I've got my virtual machine one its

432
00:24:06,419 --> 00:24:14,280
v-neck gonna create a logical switch the

433
00:24:11,340 --> 00:24:15,659
short name for this is LS naturally we

434
00:24:14,280 --> 00:24:21,170
we like to

435
00:24:15,660 --> 00:24:23,910
those small names in the documentation

436
00:24:21,170 --> 00:24:26,610
we're gonna create a logical port the

437
00:24:23,910 --> 00:24:29,280
good thing is you can also really define

438
00:24:26,610 --> 00:24:32,100
the port so you can edit create it you

439
00:24:29,280 --> 00:24:34,379
can change it so we can put a descriptor

440
00:24:32,100 --> 00:24:37,050
as well and a port and then we're gonna

441
00:24:34,380 --> 00:24:39,450
do the connection now this is a desired

442
00:24:37,050 --> 00:24:46,040
state it's not yet on a physical network

443
00:24:39,450 --> 00:24:46,040
but at least it's saved to be deployed

444
00:24:46,340 --> 00:24:53,490
so our manager control cluster is gonna

445
00:24:50,790 --> 00:24:56,430
talk to the functions of the control

446
00:24:53,490 --> 00:24:58,980
cluster it will push the stateless

447
00:24:56,430 --> 00:25:02,730
configuration forward and these will be

448
00:24:58,980 --> 00:25:04,710
pushed towards the hypervisors just

449
00:25:02,730 --> 00:25:06,330
deploying an effects software on a

450
00:25:04,710 --> 00:25:09,270
hypervisor doesn't mean it will

451
00:25:06,330 --> 00:25:12,030
communicate you have to instantiate and

452
00:25:09,270 --> 00:25:13,830
transform a host into a transport node

453
00:25:12,030 --> 00:25:16,500
so that they come in can communicate

454
00:25:13,830 --> 00:25:20,070
between them it also gives you a

455
00:25:16,500 --> 00:25:21,150
facility of creating logical spaces of

456
00:25:20,070 --> 00:25:25,639
all the hosts that can communicate

457
00:25:21,150 --> 00:25:28,320
together so you could have a production

458
00:25:25,640 --> 00:25:30,780
namespace I would say our logical space

459
00:25:28,320 --> 00:25:32,879
and you could have a lab space and then

460
00:25:30,780 --> 00:25:36,780
you wouldn't be able to connect logical

461
00:25:32,880 --> 00:25:38,400
switches from one to the other so the

462
00:25:36,780 --> 00:25:41,120
controllers will disseminate the

463
00:25:38,400 --> 00:25:43,740
topology when you create

464
00:25:41,120 --> 00:25:45,719
microsegmentation firewall rules as well

465
00:25:43,740 --> 00:25:48,150
it will be done in a controller and

466
00:25:45,720 --> 00:25:51,000
these will be pushed out to the hosts

467
00:25:48,150 --> 00:25:54,480
that have those virtual machines so if I

468
00:25:51,000 --> 00:25:56,850
create a set of rules to protect one

469
00:25:54,480 --> 00:25:58,740
virtual machine they will be only pushed

470
00:25:56,850 --> 00:26:05,070
to their hosts that has that virtual

471
00:25:58,740 --> 00:26:07,500
machine not the others so I send my

472
00:26:05,070 --> 00:26:09,810
configuration and strike the hosts one

473
00:26:07,500 --> 00:26:14,820
to attach the v-neck one to the logical

474
00:26:09,810 --> 00:26:17,280
switch so we do that it will reply give

475
00:26:14,820 --> 00:26:19,950
the information retrieve the MAC address

476
00:26:17,280 --> 00:26:23,960
update the table so that afterwards we

477
00:26:19,950 --> 00:26:27,040
can communicate with the virtual machine

478
00:26:23,960 --> 00:26:30,250
and that will tell the other types

479
00:26:27,040 --> 00:26:38,020
we have a logical switch one on that

480
00:26:30,250 --> 00:26:39,850
host that's important so who now I'm

481
00:26:38,020 --> 00:26:42,340
just gonna have a small demo on how to

482
00:26:39,850 --> 00:26:46,209
deploy in a sixty it's not as

483
00:26:42,340 --> 00:26:52,480
complicated as it sounds we've got in

484
00:26:46,210 --> 00:26:55,150
this demo we've got four ESX hosts a two

485
00:26:52,480 --> 00:26:57,010
will be used for the management and EH

486
00:26:55,150 --> 00:26:59,430
infrastructure and we've got to house

487
00:26:57,010 --> 00:27:01,870
with virtual machine one and two on it

488
00:26:59,430 --> 00:27:06,130
so the first step is to deploy the

489
00:27:01,870 --> 00:27:11,830
manager cluster so this is accelerated

490
00:27:06,130 --> 00:27:13,780
so that you get out in time for lunch so

491
00:27:11,830 --> 00:27:17,139
the idea is to import the unified

492
00:27:13,780 --> 00:27:19,840
platform among agama deploy for demo one

493
00:27:17,140 --> 00:27:23,020
and not free you enter the the

494
00:27:19,840 --> 00:27:25,929
information where it's going to be put

495
00:27:23,020 --> 00:27:28,740
you enter the IP addresses you give all

496
00:27:25,930 --> 00:27:33,070
the information about connectivity

497
00:27:28,740 --> 00:27:38,010
passwords and so on good thing when with

498
00:27:33,070 --> 00:27:38,010
a recorded demo there not many mistakes

499
00:27:39,660 --> 00:27:47,370
and that goes faster than physically if

500
00:27:43,330 --> 00:27:51,629
you do it at home or in the office

501
00:27:47,370 --> 00:27:57,270
so once the manager cluster is deployed

502
00:27:51,630 --> 00:28:00,970
and deploying goes fast in the video

503
00:27:57,270 --> 00:28:05,050
we'll be able to start configuring and

504
00:28:00,970 --> 00:28:06,880
logging in so you see at the moment we

505
00:28:05,050 --> 00:28:08,820
are in the vCenter because we deploy it

506
00:28:06,880 --> 00:28:11,230
there the manager

507
00:28:08,820 --> 00:28:18,129
virtual machine can be also deployed on

508
00:28:11,230 --> 00:28:21,610
a KVM infrastructure so the next step is

509
00:28:18,130 --> 00:28:24,240
to connect on the html5 interface of the

510
00:28:21,610 --> 00:28:24,240
nsx manager

511
00:28:32,810 --> 00:28:36,560
and we've got the interface and the

512
00:28:35,120 --> 00:28:39,050
first thing we're gonna connect is

513
00:28:36,560 --> 00:28:40,639
actually connect to a computer manager

514
00:28:39,050 --> 00:28:43,399
so we're going to enter the information

515
00:28:40,640 --> 00:28:45,440
of the vCenter this allows us to

516
00:28:43,400 --> 00:28:48,530
simplify the deployment of the different

517
00:28:45,440 --> 00:28:53,480
virtual machines and configurations but

518
00:28:48,530 --> 00:29:00,110
you could decide not to do it and go

519
00:28:53,480 --> 00:29:03,620
straight to the hosts themselves so

520
00:29:00,110 --> 00:29:07,040
import the certificate the thumbnail and

521
00:29:03,620 --> 00:29:09,530
now we've got our V Center connected to

522
00:29:07,040 --> 00:29:16,790
our manager you can manage multiple V

523
00:29:09,530 --> 00:29:20,330
centers at this point we're gonna deploy

524
00:29:16,790 --> 00:29:22,159
the controller so in a newer version

525
00:29:20,330 --> 00:29:25,189
actually the manager has to control

526
00:29:22,160 --> 00:29:27,320
itself so this is something that's gonna

527
00:29:25,190 --> 00:29:30,140
be skipped if you do it now with the

528
00:29:27,320 --> 00:29:32,240
latest version we always have the

529
00:29:30,140 --> 00:29:35,810
information at the status of the manager

530
00:29:32,240 --> 00:29:38,900
and the the disk space and so on so we

531
00:29:35,810 --> 00:29:45,440
know all that information makes it

532
00:29:38,900 --> 00:29:50,150
simpler to troubleshoot so nsx

533
00:29:45,440 --> 00:29:53,060
controller one in this demo we only

534
00:29:50,150 --> 00:29:55,520
deploy one but in a production you would

535
00:29:53,060 --> 00:29:59,389
need three to make sure that you've got

536
00:29:55,520 --> 00:30:02,210
enough capacity and fault tolerance and

537
00:29:59,390 --> 00:30:12,020
you'll put an T affinity rules on those

538
00:30:02,210 --> 00:30:13,760
virtual machines right so now we're

539
00:30:12,020 --> 00:30:16,129
gonna create a transpose own so the

540
00:30:13,760 --> 00:30:18,590
transport zone is the way the different

541
00:30:16,130 --> 00:30:20,990
hosts will communicate we'll create an

542
00:30:18,590 --> 00:30:23,629
overlay transport own so all the hosts

543
00:30:20,990 --> 00:30:24,980
that are part of this overlay of this

544
00:30:23,630 --> 00:30:31,310
transpose own will be able to

545
00:30:24,980 --> 00:30:33,710
communicate so in the fabric we're gonna

546
00:30:31,310 --> 00:30:37,669
go through transport zone we're gonna

547
00:30:33,710 --> 00:30:41,020
create one we'll call it overlay

548
00:30:37,670 --> 00:30:41,020
transpose own TZ

549
00:30:44,930 --> 00:30:57,260
and we will deploy NSX on the host and

550
00:30:50,180 --> 00:31:00,200
connect them to those transport nodes as

551
00:30:57,260 --> 00:31:04,059
you see we use the V Center actually to

552
00:31:00,200 --> 00:31:07,490
decide which host we will deploy NSX on

553
00:31:04,059 --> 00:31:11,290
so it's gonna configure NSX and deploy

554
00:31:07,490 --> 00:31:15,680
it we have pre provisioned an IP range

555
00:31:11,290 --> 00:31:18,530
pool for the tunnel endpoints so that

556
00:31:15,680 --> 00:31:21,500
was done in between and we'll have this

557
00:31:18,530 --> 00:31:25,070
connectivity so here it's deploying NSX

558
00:31:21,500 --> 00:31:26,960
T and we'll create the tunnel endpoints

559
00:31:25,070 --> 00:31:34,639
so that the host can communicate between

560
00:31:26,960 --> 00:31:36,110
each other now for our virtual machines

561
00:31:34,640 --> 00:31:41,990
to communicate we're gonna have to

562
00:31:36,110 --> 00:31:44,120
create a logical switch next step we go

563
00:31:41,990 --> 00:31:51,050
to switching and we'll create a new

564
00:31:44,120 --> 00:31:53,000
logical switch my logical switch the

565
00:31:51,050 --> 00:31:55,909
configuration of the logical switch is

566
00:31:53,000 --> 00:32:00,290
done in another NSX T it's not done env

567
00:31:55,910 --> 00:32:03,500
Center I'll come back on some of the

568
00:32:00,290 --> 00:32:07,100
configuration in a moment so we see that

569
00:32:03,500 --> 00:32:14,809
this machine here is using an overlay I

570
00:32:07,100 --> 00:32:19,580
P range in V Center when we look at our

571
00:32:14,809 --> 00:32:24,110
virtual machines a and B will be able to

572
00:32:19,580 --> 00:32:30,199
map them now to the the new logical

573
00:32:24,110 --> 00:32:33,020
switch we created so take a virtual

574
00:32:30,200 --> 00:32:34,910
machine a we're gonna go click browse

575
00:32:33,020 --> 00:32:38,600
and we see that we've got our new

576
00:32:34,910 --> 00:32:41,090
logical switch in here and we create the

577
00:32:38,600 --> 00:32:45,080
connection so VM a is now connected to

578
00:32:41,090 --> 00:32:53,800
this logical switch and we do the same

579
00:32:45,080 --> 00:32:53,800
with VM be alright

580
00:32:56,280 --> 00:33:01,870
so traffic when it flows from the first

581
00:33:00,160 --> 00:33:05,260
virtual machine to the second one well

582
00:33:01,870 --> 00:33:08,679
we'll have the traffic come out of the

583
00:33:05,260 --> 00:33:12,430
virtual machine we'll look up where we

584
00:33:08,680 --> 00:33:14,710
have to send this packet so the packet

585
00:33:12,430 --> 00:33:18,160
for the vm5 on either side should be

586
00:33:14,710 --> 00:33:21,280
sent to the tap equivalent of c1 will

587
00:33:18,160 --> 00:33:23,350
encapsulate the traffic reason why we

588
00:33:21,280 --> 00:33:27,210
need bigger MTU will transit and that

589
00:33:23,350 --> 00:33:32,980
will be d capsulated on the other side

590
00:33:27,210 --> 00:33:35,380
it's as simple as that if we do

591
00:33:32,980 --> 00:33:37,900
broadcast or multicast and we've got

592
00:33:35,380 --> 00:33:40,000
different subnets in a racks we'll be

593
00:33:37,900 --> 00:33:46,240
able to actually optimize the traffic

594
00:33:40,000 --> 00:33:49,210
flows by using one proxy in each rack to

595
00:33:46,240 --> 00:33:52,480
distribute the traffic saving us on

596
00:33:49,210 --> 00:33:54,880
network bandwidth so here the traffic is

597
00:33:52,480 --> 00:33:59,050
being distributed to the proxy in each

598
00:33:54,880 --> 00:34:06,570
of these different subnets racks before

599
00:33:59,050 --> 00:34:09,159
being distributed let's talk now about

600
00:34:06,570 --> 00:34:12,699
network services and we've got those two

601
00:34:09,159 --> 00:34:15,370
virtual machines well now they are

602
00:34:12,699 --> 00:34:18,668
called vm 1 and vm 2 they're on

603
00:34:15,370 --> 00:34:21,580
different logical switches so Alice 10

604
00:34:18,668 --> 00:34:24,009
and Alice 20 and we want to create a

605
00:34:21,580 --> 00:34:27,159
router to connect these two machines

606
00:34:24,010 --> 00:34:31,600
together so we create a T 0 router call

607
00:34:27,159 --> 00:34:35,080
it my router at this point we're gonna

608
00:34:31,600 --> 00:34:37,739
create downlink connections from the

609
00:34:35,080 --> 00:34:40,840
router to the different logical switches

610
00:34:37,739 --> 00:34:43,689
so I select downlink I select the

611
00:34:40,840 --> 00:34:49,750
network I can enter here the IP address

612
00:34:43,690 --> 00:34:56,260
of the router port connected to Alice 10

613
00:34:49,750 --> 00:34:59,610
and the equivalent for the second one so

614
00:34:56,260 --> 00:34:59,610
these are downlink connections

615
00:34:59,870 --> 00:35:12,170
and 1016 20.1 Network and we'll be able

616
00:35:09,950 --> 00:35:14,839
to test the connectivity between those

617
00:35:12,170 --> 00:35:16,760
two virtual machines so on one side

618
00:35:14,840 --> 00:35:18,800
we'll have a plane and on the other side

619
00:35:16,760 --> 00:35:20,900
we'll actually have a trace route that

620
00:35:18,800 --> 00:35:28,460
will give us the information also

621
00:35:20,900 --> 00:35:31,460
showing you the ports of the router it's

622
00:35:28,460 --> 00:35:33,320
pretty easy actually how is this

623
00:35:31,460 --> 00:35:36,050
connection done well this connection is

624
00:35:33,320 --> 00:35:38,780
done with a function called logical

625
00:35:36,050 --> 00:35:41,750
router this is not a virtual machine

626
00:35:38,780 --> 00:35:46,240
this is an instance that is running

627
00:35:41,750 --> 00:35:48,830
inside the kernel of the hypervisor so

628
00:35:46,240 --> 00:35:50,959
we're gonna if you have a single

629
00:35:48,830 --> 00:35:54,049
physical host well it will be inside a

630
00:35:50,960 --> 00:35:56,060
single host if you have multiple hosts

631
00:35:54,050 --> 00:35:58,520
and you've got a network on the other

632
00:35:56,060 --> 00:36:02,779
you'll have the same router on the other

633
00:35:58,520 --> 00:36:07,910
side so this is the flow of the

634
00:36:02,780 --> 00:36:10,520
information if we have a logical switch

635
00:36:07,910 --> 00:36:12,710
10 and logical switch 20 on different

636
00:36:10,520 --> 00:36:16,280
hosts will have the same router in

637
00:36:12,710 --> 00:36:18,680
virtual in the kernel routing will

638
00:36:16,280 --> 00:36:21,710
always be done at closest point from the

639
00:36:18,680 --> 00:36:24,259
source code so the source points so it's

640
00:36:21,710 --> 00:36:28,730
gonna always be routing done inside the

641
00:36:24,260 --> 00:36:31,340
host local so traffic flow will be a

642
00:36:28,730 --> 00:36:34,700
symmetrical it's important to understand

643
00:36:31,340 --> 00:36:39,280
this traffic will come out from vm 1

644
00:36:34,700 --> 00:36:41,930
will be routed put into the transport

645
00:36:39,280 --> 00:36:44,560
transport tunnel for the logical switch

646
00:36:41,930 --> 00:36:47,839
and distribute it on the other side

647
00:36:44,560 --> 00:36:49,820
traffic flow coming back yes it is an

648
00:36:47,840 --> 00:36:53,570
error the traffic doesn't go back to the

649
00:36:49,820 --> 00:36:56,240
route it goes to the vm 1 is done the

650
00:36:53,570 --> 00:37:00,560
other way round this is an asymmetrical

651
00:36:56,240 --> 00:37:04,700
routing where it gets really interesting

652
00:37:00,560 --> 00:37:08,090
now is if I go and do a trace route or

653
00:37:04,700 --> 00:37:09,399
trace flow of this traffic it will

654
00:37:08,090 --> 00:37:14,310
document

655
00:37:09,400 --> 00:37:17,140
for me all the paths from VM 1 to VM 2

656
00:37:14,310 --> 00:37:19,180
so we see clearly that the traffic's

657
00:37:17,140 --> 00:37:21,400
coming out of the VM one goes through a

658
00:37:19,180 --> 00:37:26,080
distributed firewall is now an honor

659
00:37:21,400 --> 00:37:29,620
logical switch 10 hits the router is

660
00:37:26,080 --> 00:37:32,759
routed to logical switch 20 is still on

661
00:37:29,620 --> 00:37:35,890
ESX 1 here and now it enters the tunnel

662
00:37:32,760 --> 00:37:38,560
comes back to the outside and is being

663
00:37:35,890 --> 00:37:40,839
distributed gives us really the

664
00:37:38,560 --> 00:37:43,509
visibility of how the traffic flows and

665
00:37:40,840 --> 00:37:45,850
at every one of these points you can

666
00:37:43,510 --> 00:37:48,430
look at the documentation and pull up

667
00:37:45,850 --> 00:37:51,250
information giving you the tables and

668
00:37:48,430 --> 00:37:53,710
configuration the speed of the speed of

669
00:37:51,250 --> 00:37:55,780
the ports and so on really gives you the

670
00:37:53,710 --> 00:38:04,390
visibility of how your traffic is

671
00:37:55,780 --> 00:38:06,370
flowing so the thing with asymmetrical

672
00:38:04,390 --> 00:38:08,589
routing is that are some functions that

673
00:38:06,370 --> 00:38:11,109
we cannot do if we only have one way of

674
00:38:08,590 --> 00:38:17,290
the traffic anything that requires a

675
00:38:11,110 --> 00:38:20,400
stateful service like firewall coming in

676
00:38:17,290 --> 00:38:23,200
north-south firewall load-balancing nat

677
00:38:20,400 --> 00:38:25,750
dhcp well these functions cannot be

678
00:38:23,200 --> 00:38:28,029
distributed across the halls we will

679
00:38:25,750 --> 00:38:31,570
distribute those functions actually in

680
00:38:28,030 --> 00:38:33,730
those edge nodes so those edge nodes I

681
00:38:31,570 --> 00:38:35,980
mentioned early on can be either VMs

682
00:38:33,730 --> 00:38:41,160
that will have the connectivity to the

683
00:38:35,980 --> 00:38:43,990
physical network or physical servers so

684
00:38:41,160 --> 00:38:46,600
functions will be just distributed

685
00:38:43,990 --> 00:38:49,990
across the environment and in these edge

686
00:38:46,600 --> 00:38:55,360
nodes to improve performance we've used

687
00:38:49,990 --> 00:38:59,169
the Intel DP DK live-reef this L really

688
00:38:55,360 --> 00:39:01,840
allows us to push a lot of bandwidth so

689
00:38:59,170 --> 00:39:07,540
we can push over 50 gigabyte on bare

690
00:39:01,840 --> 00:39:09,550
metal service these can also be for fast

691
00:39:07,540 --> 00:39:13,110
convergence in case of failure and we've

692
00:39:09,550 --> 00:39:15,640
got special drivers that will consume

693
00:39:13,110 --> 00:39:18,910
specific Intel network art and some

694
00:39:15,640 --> 00:39:22,629
others and we make sure that we've got

695
00:39:18,910 --> 00:39:25,480
enough CPU resources attributed to

696
00:39:22,630 --> 00:39:27,430
those services and the memory this

697
00:39:25,480 --> 00:39:30,550
allows us to push really the traffic

698
00:39:27,430 --> 00:39:33,520
above for normal traffic we can use

699
00:39:30,550 --> 00:39:35,680
virtual machine edge notes we have less

700
00:39:33,520 --> 00:39:38,890
true put takes a little bit more in

701
00:39:35,680 --> 00:39:40,890
convergence in case of failure so it

702
00:39:38,890 --> 00:39:45,129
really depends on what you want to do

703
00:39:40,890 --> 00:39:47,560
we've got this flexibility so if we take

704
00:39:45,130 --> 00:39:49,540
our sample from beforehand of the

705
00:39:47,560 --> 00:39:52,210
logical view where we've gotten our

706
00:39:49,540 --> 00:39:54,160
infrastructure at one point I need to

707
00:39:52,210 --> 00:39:56,380
connect to the physical network and this

708
00:39:54,160 --> 00:39:58,540
physical uplink is not gonna be on the

709
00:39:56,380 --> 00:40:02,200
house it's gonna be connected to the

710
00:39:58,540 --> 00:40:05,440
edge node so if I do a representation

711
00:40:02,200 --> 00:40:09,368
suddenly I'm gonna have a huge edge

712
00:40:05,440 --> 00:40:12,430
router but this is actually distributed

713
00:40:09,369 --> 00:40:15,010
it's this ribbet in a different host and

714
00:40:12,430 --> 00:40:19,660
we have an instance running on these

715
00:40:15,010 --> 00:40:24,730
edge nodes here we have our physical

716
00:40:19,660 --> 00:40:27,009
uplink connection so east-west traffic

717
00:40:24,730 --> 00:40:29,170
is always distributed but if we want to

718
00:40:27,010 --> 00:40:33,280
go north-south we're gonna have to

719
00:40:29,170 --> 00:40:36,099
connect our routers to the edge nodes to

720
00:40:33,280 --> 00:40:40,030
the physical network so we set up a

721
00:40:36,099 --> 00:40:41,319
dedicated internal logical connection we

722
00:40:40,030 --> 00:40:46,630
take care of this management

723
00:40:41,319 --> 00:40:50,440
automatically for the traffic so let's

724
00:40:46,630 --> 00:40:53,440
see again how we do this well on our t0

725
00:40:50,440 --> 00:40:57,520
route are we gonna create now a new

726
00:40:53,440 --> 00:41:00,550
interface we're gonna add actually an

727
00:40:57,520 --> 00:41:04,900
uplink and we're gonna you consume

728
00:41:00,550 --> 00:41:06,760
actually a logical switch a VLAN we

729
00:41:04,900 --> 00:41:08,770
select which edge node we're gonna use

730
00:41:06,760 --> 00:41:13,150
and we're gonna use a VLAN for the

731
00:41:08,770 --> 00:41:21,339
traffic again we enter an IP address for

732
00:41:13,150 --> 00:41:22,990
the outside world up and we've got the

733
00:41:21,339 --> 00:41:26,680
connectivity through the physical world

734
00:41:22,990 --> 00:41:28,660
now we can use dynamic routing you can

735
00:41:26,680 --> 00:41:30,879
use static you can decide what you want

736
00:41:28,660 --> 00:41:34,379
to push out what you don't want to push

737
00:41:30,880 --> 00:41:34,380
out and so on

738
00:41:35,400 --> 00:41:41,290
let's look back now to our trace flow

739
00:41:38,320 --> 00:41:43,750
from the virtual machine 1 for example

740
00:41:41,290 --> 00:41:46,590
to a physical server on a network

741
00:41:43,750 --> 00:41:49,000
so we're gonna use an IP address here

742
00:41:46,590 --> 00:41:54,160
this will give us again all the

743
00:41:49,000 --> 00:41:57,730
information on how we flow going faster

744
00:41:54,160 --> 00:42:00,160
than the video sorry and again here

745
00:41:57,730 --> 00:42:02,530
we've got the the router but we hit

746
00:42:00,160 --> 00:42:05,379
router we still inside the router until

747
00:42:02,530 --> 00:42:11,170
we get to the edge through the tunnel

748
00:42:05,380 --> 00:42:14,440
and to the physical network so we just

749
00:42:11,170 --> 00:42:16,960
talked about logical routing but we have

750
00:42:14,440 --> 00:42:19,890
added a lot of other services gateway to

751
00:42:16,960 --> 00:42:22,690
the physical infrastructure we use BGP

752
00:42:19,890 --> 00:42:25,210
for the physical infrastructure we can

753
00:42:22,690 --> 00:42:27,250
use equal cost multi parsing so you can

754
00:42:25,210 --> 00:42:28,450
have multiple redundant paths for the

755
00:42:27,250 --> 00:42:31,630
traffic north-south

756
00:42:28,450 --> 00:42:34,689
we've got functions load balancing VPN

757
00:42:31,630 --> 00:42:37,360
that firewalling so the firewalling can

758
00:42:34,690 --> 00:42:40,050
be distributed across all the hosts or

759
00:42:37,360 --> 00:42:44,140
we can also have five rolling

760
00:42:40,050 --> 00:42:47,590
north-south we've added ipv6 support

761
00:42:44,140 --> 00:42:49,930
ipv6 being a very big beast it will come

762
00:42:47,590 --> 00:42:53,860
in two different phases we've started

763
00:42:49,930 --> 00:42:56,919
with ipv6 addresses routing and we'll

764
00:42:53,860 --> 00:42:59,800
add more services as time goes by

765
00:42:56,920 --> 00:43:01,600
we've got now guest introspection so if

766
00:42:59,800 --> 00:43:05,200
you've got VDI environment and you want

767
00:43:01,600 --> 00:43:08,200
to make sure for using different tools

768
00:43:05,200 --> 00:43:11,259
from antivirus providers inside guests

769
00:43:08,200 --> 00:43:13,180
we've got east-west traffic service

770
00:43:11,260 --> 00:43:16,150
insertion so we can use different

771
00:43:13,180 --> 00:43:19,779
firewalls from checkpoint Palo Alto 40

772
00:43:16,150 --> 00:43:22,960
net north north-south service insertion

773
00:43:19,780 --> 00:43:26,560
if you wanted maybe to add f5 in in a

774
00:43:22,960 --> 00:43:30,880
path we have DHCP server for the

775
00:43:26,560 --> 00:43:33,870
different networks and we now added also

776
00:43:30,880 --> 00:43:38,440
layer 7 app ID based firewall for

777
00:43:33,870 --> 00:43:43,210
desktops so lots of different services

778
00:43:38,440 --> 00:43:46,600
coming in to NSX so now we've seen the

779
00:43:43,210 --> 00:43:48,080
different use cases not working security

780
00:43:46,600 --> 00:43:51,860
automation visibility

781
00:43:48,080 --> 00:43:55,940
I have to remind you that we are multi

782
00:43:51,860 --> 00:43:59,570
hypervisors workloads can be containers

783
00:43:55,940 --> 00:44:03,130
virtual machines bare metals and the

784
00:43:59,570 --> 00:44:09,170
extension on Prem and hybrid cloud

785
00:44:03,130 --> 00:44:14,240
multi-cloud we have a one-day event in

786
00:44:09,170 --> 00:44:15,590
April in Lausanne where we do labs so

787
00:44:14,240 --> 00:44:19,370
I'll present and go through the

788
00:44:15,590 --> 00:44:22,780
different sections you get your hands on

789
00:44:19,370 --> 00:44:26,060
we do the lab remotely it's all nested

790
00:44:22,780 --> 00:44:28,960
so if you want to come to this event on

791
00:44:26,060 --> 00:44:33,020
the 12th see us at the booth downstairs

792
00:44:28,960 --> 00:44:35,630
if you want to learn more about nsx I

793
00:44:33,020 --> 00:44:40,240
highly recommend the hands-on labs you

794
00:44:35,630 --> 00:44:43,310
can do them at any time tonight or not

795
00:44:40,240 --> 00:44:46,100
tomorrow not tomorrow tomorrow Saturday

796
00:44:43,310 --> 00:44:52,430
on Monday if you're back at work just

797
00:44:46,100 --> 00:44:53,410
head to the labs hol VMware so there you

798
00:44:52,430 --> 00:45:26,529
are

799
00:44:53,410 --> 00:45:36,740
do we have any questions not encrypted

800
00:45:26,530 --> 00:45:40,840
encapsulated we have taps we can have a

801
00:45:36,740 --> 00:45:40,839
redirection of some of the traffic yes

802
00:45:40,990 --> 00:45:48,080
some I don't know all the functions of

803
00:45:45,100 --> 00:45:50,480
the the traffic free direction we have

804
00:45:48,080 --> 00:46:03,190
functions

805
00:45:50,480 --> 00:46:07,010
second we support Windows today on Asha

806
00:46:03,190 --> 00:46:20,530
we have an agent that deploys inside as

807
00:46:07,010 --> 00:46:20,530
your Windows machines can see more yes

808
00:46:26,410 --> 00:46:35,810
for bare-metal service so for to do

809
00:46:29,990 --> 00:46:37,640
micro segmentation now the the

810
00:46:35,810 --> 00:46:41,600
controllers a virtual machine that can

811
00:46:37,640 --> 00:46:44,868
either run on our ESX or k vm no you

812
00:46:41,600 --> 00:46:47,000
don't have if nsx is not on that ESX

813
00:46:44,869 --> 00:46:48,800
host you don't have to license that host

814
00:46:47,000 --> 00:46:51,770
it's really only the hosts that

815
00:46:48,800 --> 00:46:54,020
communicate the bare metal physical

816
00:46:51,770 --> 00:46:56,270
server that is for traffic edy as an

817
00:46:54,020 --> 00:47:01,750
edge node doesn't have to be licensed

818
00:46:56,270 --> 00:47:15,920
it's only the hosts that are running nsx

819
00:47:01,750 --> 00:47:20,650
yes okay yeah at the start of the

820
00:47:15,920 --> 00:47:20,650
presentations in the different products

821
00:47:22,210 --> 00:47:29,990
we have a tool which I didn't show today

822
00:47:25,490 --> 00:47:32,240
we've got network inside here network is

823
00:47:29,990 --> 00:47:34,729
inside is a tool that most of our

824
00:47:32,240 --> 00:47:36,560
customers that invest in NSX take as

825
00:47:34,730 --> 00:47:38,810
well but it's a tool that also we've got

826
00:47:36,560 --> 00:47:42,380
customers that have invested in a CI

827
00:47:38,810 --> 00:47:46,430
look Amy - it's a tool that will take

828
00:47:42,380 --> 00:47:49,760
ipfx flows from the sources and it will

829
00:47:46,430 --> 00:47:51,560
give you a diagram of the flow with

830
00:47:49,760 --> 00:47:54,680
information from the overlay and

831
00:47:51,560 --> 00:47:58,160
underlay because we connect to Cisco a

832
00:47:54,680 --> 00:48:00,830
research in checkpoint Palo Alto and it

833
00:47:58,160 --> 00:48:02,899
will give you a diagram of which flow

834
00:48:00,830 --> 00:48:03,799
goes to which flow or which flow to

835
00:48:02,900 --> 00:48:06,230
which source

836
00:48:03,800 --> 00:48:09,110
and based on what it can show you

837
00:48:06,230 --> 00:48:11,990
actually it will also allow you to get

838
00:48:09,110 --> 00:48:15,110
out information what how you can secure

839
00:48:11,990 --> 00:48:16,850
it with micro segmentation based on that

840
00:48:15,110 --> 00:48:20,000
you can export the rules and then apply

841
00:48:16,850 --> 00:48:22,250
it to one app one an S 60 and starts

842
00:48:20,000 --> 00:48:25,010
your micro segmentation of your

843
00:48:22,250 --> 00:48:26,240
environment step by step so that's the

844
00:48:25,010 --> 00:48:29,000
tool that will give you all those

845
00:48:26,240 --> 00:48:36,229
graphics and isn't really an operational

846
00:48:29,000 --> 00:49:03,140
day to tool that goes with nsx more

847
00:48:36,230 --> 00:49:06,020
questions oh yes so any host V my house

848
00:49:03,140 --> 00:49:08,930
that has a virtual distributor switch or

849
00:49:06,020 --> 00:49:12,620
the LVDS can output this information

850
00:49:08,930 --> 00:49:15,740
using the IP fixed format so if you can

851
00:49:12,620 --> 00:49:24,859
interpret this it's just like a net flow

852
00:49:15,740 --> 00:49:26,750
analysis you can do that we've got most

853
00:49:24,860 --> 00:49:29,090
customers actually use networking site

854
00:49:26,750 --> 00:49:31,910
even if some of these customers actually

855
00:49:29,090 --> 00:49:34,570
don't have NSX they use networking site

856
00:49:31,910 --> 00:49:38,750
to get this information

857
00:49:34,570 --> 00:49:40,760
yeah now you can also output information

858
00:49:38,750 --> 00:49:42,980
to assess log but it's always different

859
00:49:40,760 --> 00:49:44,740
difficult so that was one of the

860
00:49:42,980 --> 00:49:48,950
acquisitions we did about two years ago

861
00:49:44,740 --> 00:49:52,450
Arkin so the tool is pretty useful to

862
00:49:48,950 --> 00:49:55,040
have a quick view we also have actually

863
00:49:52,450 --> 00:49:57,649
security officers that like it because

864
00:49:55,040 --> 00:49:59,540
it will for example show you new traffic

865
00:49:57,650 --> 00:50:01,730
that's never been seen on a network in

866
00:49:59,540 --> 00:50:06,140
the last 24 hours or that new VM that's

867
00:50:01,730 --> 00:50:08,530
connected also on you had also a

868
00:50:06,140 --> 00:50:08,529
question

869
00:50:14,500 --> 00:50:18,760
so we've got a process actually in the

870
00:50:16,600 --> 00:50:22,299
you can do it using the user interface

871
00:50:18,760 --> 00:50:25,570
also on it's a two-step process or two

872
00:50:22,300 --> 00:50:30,820
steps one after the other so if you want

873
00:50:25,570 --> 00:50:35,580
to move from a VDS to the n VDS the idea

874
00:50:30,820 --> 00:50:39,910
is also to migrate vSphere kernel ports

875
00:50:35,580 --> 00:50:42,279
using VLAN based and new migrator but

876
00:50:39,910 --> 00:50:44,830
yeah so even if you have a host where

877
00:50:42,280 --> 00:50:50,980
only two interfaces you can migrate to

878
00:50:44,830 --> 00:50:54,040
Nvidia's there's no licensing for the

879
00:50:50,980 --> 00:50:57,520
cloud gateways we have a licensing I

880
00:50:54,040 --> 00:51:02,110
think on the number of interns instances

881
00:50:57,520 --> 00:51:06,160
you you run inside as your AWS a certain

882
00:51:02,110 --> 00:51:11,010
ratio of 15 to 1 I think or or something

883
00:51:06,160 --> 00:51:11,009
like that I can look it up afterwards

884
00:51:11,970 --> 00:51:28,689
yes not yet

885
00:51:25,740 --> 00:51:32,229
because we don't have that agent out for

886
00:51:28,690 --> 00:51:34,630
Windows at the moment it's more for

887
00:51:32,230 --> 00:51:37,990
inside infrastructure inside the virtual

888
00:51:34,630 --> 00:51:39,790
machine that you're gonna have you

889
00:51:37,990 --> 00:51:42,790
deploy that agent inside a virtual

890
00:51:39,790 --> 00:51:44,890
desktop as soon as the user logs in he

891
00:51:42,790 --> 00:51:47,020
will be authenticated with the Active

892
00:51:44,890 --> 00:51:49,509
Directory based on his group you'll

893
00:51:47,020 --> 00:51:56,620
apply at that virtual machine micro

894
00:51:49,510 --> 00:52:05,140
segmentation rules I don't know above my

895
00:51:56,620 --> 00:52:07,839
paygrade unfortunately lunch time yes

896
00:52:05,140 --> 00:52:09,170
seemed so thank you for it thank you for

897
00:52:07,840 --> 00:52:12,499
my thank you for the presentation

898
00:52:09,170 --> 00:52:12,499
[Applause]

