1
00:00:07,250 --> 00:00:10,619
[Music]

2
00:00:12,469 --> 00:00:20,759
so dear attendees I have no idea how to

3
00:00:17,550 --> 00:00:23,070
start a conversation with a crowd but hi

4
00:00:20,759 --> 00:00:26,099
my name's Philip I do security research

5
00:00:23,070 --> 00:00:28,349
for cyber easing and I am in the process

6
00:00:26,099 --> 00:00:30,509
of losing my voice so this is not my

7
00:00:28,349 --> 00:00:33,089
natural voice and you get treated to the

8
00:00:30,509 --> 00:00:38,910
most sensual version of my talk because

9
00:00:33,089 --> 00:00:40,949
of this so this talk is going to be

10
00:00:38,910 --> 00:00:43,589
about device guard and a couple of ways

11
00:00:40,949 --> 00:00:45,839
to bypass it a couple of them are gonna

12
00:00:43,589 --> 00:00:48,600
use VBA a couple of them are not gonna

13
00:00:45,839 --> 00:00:51,420
use VBA and actually most of them are

14
00:00:48,600 --> 00:00:54,830
not going to be treated as actual

15
00:00:51,420 --> 00:00:58,080
vulnerabilities by Microsoft but well

16
00:00:54,830 --> 00:00:59,849
you know I I don't think any real-world

17
00:00:58,080 --> 00:01:01,619
attacker will look at this and say oh

18
00:00:59,850 --> 00:01:03,659
that this won't get a CVE

19
00:01:01,619 --> 00:01:05,850
I'm just not gonna use it this is

20
00:01:03,659 --> 00:01:07,650
beneath me they're just gonna use

21
00:01:05,850 --> 00:01:10,770
whatever is at hand and I'm going to

22
00:01:07,650 --> 00:01:13,200
show whatever is at hand and well if

23
00:01:10,770 --> 00:01:16,649
you're one of those really weird TV

24
00:01:13,200 --> 00:01:19,590
fetishists that I have just invented you

25
00:01:16,650 --> 00:01:23,220
will have just this one I guess closer

26
00:01:19,590 --> 00:01:26,580
to the end so to begin with device guard

27
00:01:23,220 --> 00:01:29,520
bypasses let's begin while with well

28
00:01:26,580 --> 00:01:31,259
what the hell's device guard so device

29
00:01:29,520 --> 00:01:33,658
guard is an application whitelisting

30
00:01:31,260 --> 00:01:36,510
feature that was introduced in Windows

31
00:01:33,659 --> 00:01:39,560
10 it's the successor to an older

32
00:01:36,510 --> 00:01:41,880
feature called app Locker now

33
00:01:39,560 --> 00:01:44,670
whitelisting and device guard in

34
00:01:41,880 --> 00:01:46,350
particular try to stop an attacker from

35
00:01:44,670 --> 00:01:48,659
running arbitrary code on a machine

36
00:01:46,350 --> 00:01:51,289
after they have already gained some kind

37
00:01:48,659 --> 00:01:54,030
of access and this is done by

38
00:01:51,290 --> 00:01:56,940
restricting any kind of code that could

39
00:01:54,030 --> 00:01:59,430
execute on the machine to only the code

40
00:01:56,940 --> 00:02:01,440
that complies with a very specific

41
00:01:59,430 --> 00:02:03,540
policy set by the administrator the

42
00:02:01,440 --> 00:02:05,399
policy could be a list of certificates

43
00:02:03,540 --> 00:02:09,149
that could sign the code it could be a

44
00:02:05,400 --> 00:02:11,069
bunch of hashes names etc and if you

45
00:02:09,149 --> 00:02:15,870
don't apply you're not trusted and you

46
00:02:11,068 --> 00:02:17,909
won't run now this gives us a very wide

47
00:02:15,870 --> 00:02:21,060
attack surface because you can basically

48
00:02:17,909 --> 00:02:22,260
use everything that's natively available

49
00:02:21,060 --> 00:02:23,970
on a Windows machine you don't

50
00:02:22,260 --> 00:02:28,620
need something to be available remotely

51
00:02:23,970 --> 00:02:30,810
or to be run with or to be run with some

52
00:02:28,620 --> 00:02:32,730
kind of high privilege if it's on the

53
00:02:30,810 --> 00:02:36,989
machine you could try to use it to

54
00:02:32,730 --> 00:02:40,649
bypass device card so to understand what

55
00:02:36,989 --> 00:02:42,569
counts as a bypass we should first

56
00:02:40,650 --> 00:02:46,230
understand or at least formalize

57
00:02:42,569 --> 00:02:49,440
arbitrary code which in our case will be

58
00:02:46,230 --> 00:02:52,858
the ability to freely interact with the

59
00:02:49,440 --> 00:02:55,109
machine with the OS and if we can't do

60
00:02:52,859 --> 00:02:57,060
anything if we can't do a thing it would

61
00:02:55,109 --> 00:02:58,890
be because of a privilege constraint we

62
00:02:57,060 --> 00:03:00,930
can ask the u.s. to give us something

63
00:02:58,890 --> 00:03:03,388
and it won't give us but we need to have

64
00:03:00,930 --> 00:03:05,069
the ability to ask and the most direct

65
00:03:03,389 --> 00:03:07,590
way to achieve there's at least a police

66
00:03:05,069 --> 00:03:10,440
on Windows is just having a process that

67
00:03:07,590 --> 00:03:13,049
you control fully which can be done by

68
00:03:10,440 --> 00:03:15,120
being able to allocate and jump to code

69
00:03:13,049 --> 00:03:17,940
in the process or just to call a couple

70
00:03:15,120 --> 00:03:20,430
of arbitrary way API or sis calls or

71
00:03:17,940 --> 00:03:22,500
whatever and of course it could very

72
00:03:20,430 --> 00:03:25,650
quickly jump between these two different

73
00:03:22,500 --> 00:03:28,199
definitions because you could very

74
00:03:25,650 --> 00:03:30,449
easily call a couple of Cisco's to

75
00:03:28,199 --> 00:03:34,079
allocate code and you could just

76
00:03:30,449 --> 00:03:35,910
allocate a couple of Cisco's now this

77
00:03:34,079 --> 00:03:37,799
definition was useless if you're not

78
00:03:35,910 --> 00:03:40,440
using application whitelisting

79
00:03:37,799 --> 00:03:43,410
because an attacker gains access they

80
00:03:40,440 --> 00:03:44,879
gain arbitrary command execution which

81
00:03:43,410 --> 00:03:47,220
is the actual threat model of

82
00:03:44,879 --> 00:03:49,739
whitelisting and arbitrary commands

83
00:03:47,220 --> 00:03:51,510
pretty much equal arbitrary code why

84
00:03:49,739 --> 00:03:53,340
because you want to run a piece of

85
00:03:51,510 --> 00:03:55,319
malware you run malware that eggsy and

86
00:03:53,340 --> 00:03:58,319
that's it you've gained arbitrary

87
00:03:55,319 --> 00:04:00,660
execution but this equation actually

88
00:03:58,319 --> 00:04:02,119
breaks the moment you implement

89
00:04:00,660 --> 00:04:04,918
application whitelisting

90
00:04:02,120 --> 00:04:08,940
because suddenly you have to rely only

91
00:04:04,919 --> 00:04:11,549
on what's allowed on the machine meaning

92
00:04:08,940 --> 00:04:15,030
that even if you have some really cool

93
00:04:11,549 --> 00:04:17,519
exploit that pops kalt's and notepads

94
00:04:15,030 --> 00:04:19,289
left and right on your machine you're

95
00:04:17,519 --> 00:04:21,659
gonna reach your target machine and

96
00:04:19,289 --> 00:04:23,430
think well I really want to steal some

97
00:04:21,659 --> 00:04:25,289
credentials I want to run mini cats or

98
00:04:23,430 --> 00:04:28,979
something like that but no you still

99
00:04:25,289 --> 00:04:30,900
have notepad or calc which is much much

100
00:04:28,979 --> 00:04:34,229
less useful for you

101
00:04:30,900 --> 00:04:36,120
and lots of stuff like CNC credential

102
00:04:34,229 --> 00:04:37,949
stealing and even if you have like this

103
00:04:36,120 --> 00:04:40,020
very cool privilege escalation

104
00:04:37,949 --> 00:04:42,449
vulnerability that you still need to run

105
00:04:40,020 --> 00:04:43,919
actual code for you still won't be able

106
00:04:42,449 --> 00:04:47,270
to use all of that stuff

107
00:04:43,919 --> 00:04:53,639
so this equation of arbitrary commands

108
00:04:47,270 --> 00:04:57,539
equal arbitrary code simply breaks so to

109
00:04:53,639 --> 00:05:00,270
be able to bypass this equation we need

110
00:04:57,539 --> 00:05:04,860
to be able to do one of the two things

111
00:05:00,270 --> 00:05:07,650
that were in the last slide now even if

112
00:05:04,860 --> 00:05:10,260
you've somehow succeeded to take full

113
00:05:07,650 --> 00:05:13,320
control of a single process you could

114
00:05:10,260 --> 00:05:17,400
actually lose this capability because

115
00:05:13,320 --> 00:05:19,860
let's say for example that you want to

116
00:05:17,400 --> 00:05:23,400
implement persistence almost all

117
00:05:19,860 --> 00:05:25,500
persistent techniques on Windows allow

118
00:05:23,400 --> 00:05:28,229
you to run a command so you're again

119
00:05:25,500 --> 00:05:30,660
downgraded the calculator same thing

120
00:05:28,229 --> 00:05:31,849
happens with many sandbox escapes and

121
00:05:30,660 --> 00:05:34,289
privilege escalation vulnerabilities

122
00:05:31,849 --> 00:05:37,770
same thing happens with lateral movement

123
00:05:34,289 --> 00:05:39,960
so even if you somehow have landed in

124
00:05:37,770 --> 00:05:42,570
your own process it's very easy to lose

125
00:05:39,960 --> 00:05:46,469
this capability and you need to have

126
00:05:42,570 --> 00:05:48,510
some kind of reliable bypass to be able

127
00:05:46,470 --> 00:05:51,630
to run arbitrary code in all of those

128
00:05:48,510 --> 00:05:53,280
contexts so this was a bit about

129
00:05:51,630 --> 00:05:56,099
application whitelisting in general

130
00:05:53,280 --> 00:05:58,979
let's see how it how its implemented in

131
00:05:56,099 --> 00:06:00,900
device guard so the most direct way

132
00:05:58,979 --> 00:06:05,190
device guard is implemented is in

133
00:06:00,900 --> 00:06:07,530
respect to P files now P files if

134
00:06:05,190 --> 00:06:09,240
they're not in the policy if they're not

135
00:06:07,530 --> 00:06:12,690
compliant with the policy they simply

136
00:06:09,240 --> 00:06:14,490
will not run and that's it but it gets a

137
00:06:12,690 --> 00:06:17,120
bit more subtle the moment you reach

138
00:06:14,490 --> 00:06:20,370
other types of execution on Windows

139
00:06:17,120 --> 00:06:23,880
PowerShell which normally will allow you

140
00:06:20,370 --> 00:06:26,310
to basically access all of darknets

141
00:06:23,880 --> 00:06:28,979
capabilities which will really easily

142
00:06:26,310 --> 00:06:32,310
read lead you to arbitrary code actually

143
00:06:28,979 --> 00:06:34,460
still run scripts if they are untrusted

144
00:06:32,310 --> 00:06:38,280
if they do not comply with the policy

145
00:06:34,460 --> 00:06:40,349
but they're run in what's called a

146
00:06:38,280 --> 00:06:40,919
constrained language mode which

147
00:06:40,349 --> 00:06:43,349
basically

148
00:06:40,919 --> 00:06:44,669
strips apart all of the fun parts of

149
00:06:43,349 --> 00:06:45,930
PowerShell so

150
00:06:44,670 --> 00:06:47,880
can't really do anything interesting

151
00:06:45,930 --> 00:06:50,760
with it well you can do a bit of stuff

152
00:06:47,880 --> 00:06:54,840
like use WMI but it's still not a

153
00:06:50,760 --> 00:06:56,130
full-featured powerful instance and you

154
00:06:54,840 --> 00:06:59,010
can't really implement stuff like

155
00:06:56,130 --> 00:07:01,590
residential stealing a similar thing

156
00:06:59,010 --> 00:07:05,360
happens with active script engines which

157
00:07:01,590 --> 00:07:08,580
are stuff like the J and VB script dll's

158
00:07:05,360 --> 00:07:11,520
now these access the the operating

159
00:07:08,580 --> 00:07:15,270
system pretty much solely through calm

160
00:07:11,520 --> 00:07:17,219
objects and you could use some

161
00:07:15,270 --> 00:07:19,469
techniques like dotnet the J script to

162
00:07:17,220 --> 00:07:21,180
leverage to leverage this access to

163
00:07:19,470 --> 00:07:21,950
arbitrary common objects to arbitrary

164
00:07:21,180 --> 00:07:26,010
execution

165
00:07:21,950 --> 00:07:28,770
so what active script does with device

166
00:07:26,010 --> 00:07:30,990
guard is if you're running a trusted

167
00:07:28,770 --> 00:07:32,969
script it runs as normal if you're

168
00:07:30,990 --> 00:07:36,000
running an untrusted script you're

169
00:07:32,970 --> 00:07:38,310
actually able to only create calm

170
00:07:36,000 --> 00:07:40,920
objects from a very restricted

171
00:07:38,310 --> 00:07:43,460
hard-coded list and the rate and the

172
00:07:40,920 --> 00:07:46,710
list contains stuff like scripting that

173
00:07:43,460 --> 00:07:48,900
dictionary so this is not very useful

174
00:07:46,710 --> 00:07:51,239
you could of course use a hash table but

175
00:07:48,900 --> 00:07:56,400
this really is not what you want as an

176
00:07:51,240 --> 00:07:58,050
attacker so let's take a look what

177
00:07:56,400 --> 00:08:01,109
happens pretty much visually when you

178
00:07:58,050 --> 00:08:02,940
try to run unsigned all exe you don't

179
00:08:01,110 --> 00:08:05,780
get execution you just get this pretty

180
00:08:02,940 --> 00:08:08,190
blue pop up with the ability to copy the

181
00:08:05,780 --> 00:08:10,229
the error the error to the clipboard

182
00:08:08,190 --> 00:08:15,330
which isn't really useful for an

183
00:08:10,230 --> 00:08:17,790
attacker now unlike its predecessor

184
00:08:15,330 --> 00:08:20,159
device guard is actually trying to be

185
00:08:17,790 --> 00:08:21,840
user agnostic meaning that it doesn't

186
00:08:20,160 --> 00:08:22,620
matter if you're an administrator or a

187
00:08:21,840 --> 00:08:25,619
regular user

188
00:08:22,620 --> 00:08:29,430
if device guard is on it will prohibit

189
00:08:25,620 --> 00:08:32,100
you to run untrusted stuff even as an

190
00:08:29,430 --> 00:08:35,360
admin but an administrator could

191
00:08:32,100 --> 00:08:37,860
actually just disable device guard so

192
00:08:35,360 --> 00:08:41,580
well then why just use it as an admin

193
00:08:37,860 --> 00:08:44,490
because because this actually requires

194
00:08:41,580 --> 00:08:47,130
you to restart the machine and it

195
00:08:44,490 --> 00:08:50,220
actually throws a very descriptive event

196
00:08:47,130 --> 00:08:52,260
very descriptive event log and this

197
00:08:50,220 --> 00:08:55,470
means that you have a very very strong

198
00:08:52,260 --> 00:08:57,630
signal that says something weird

199
00:08:55,470 --> 00:08:58,560
happened with device guard on a specific

200
00:08:57,630 --> 00:09:01,050
machine so

201
00:08:58,560 --> 00:09:02,310
if you are implementing whitelisting is

202
00:09:01,050 --> 00:09:04,319
specifically device guard on your

203
00:09:02,310 --> 00:09:07,979
network you shouldn't stop monitoring

204
00:09:04,320 --> 00:09:10,470
you will have less alerts and this type

205
00:09:07,980 --> 00:09:13,620
of alert should really raise your alarms

206
00:09:10,470 --> 00:09:17,190
and I don't know fire up your sirens or

207
00:09:13,620 --> 00:09:20,400
whatever so if an attacker has a way to

208
00:09:17,190 --> 00:09:22,560
bypass device guard that even requires

209
00:09:20,400 --> 00:09:25,829
administering administrative privileges

210
00:09:22,560 --> 00:09:29,609
it's still very beneficial because you

211
00:09:25,830 --> 00:09:31,920
are able to do to do this stealthily you

212
00:09:29,610 --> 00:09:34,050
don't need to choose between oh do I

213
00:09:31,920 --> 00:09:36,870
want to be unable to run arbitrary code

214
00:09:34,050 --> 00:09:39,719
or do I want to be caught after a couple

215
00:09:36,870 --> 00:09:41,990
of hours you could actually persist on

216
00:09:39,720 --> 00:09:45,290
the network that you're trying to attack

217
00:09:41,990 --> 00:09:49,350
so if we have more of these we suddenly

218
00:09:45,290 --> 00:09:53,189
again force the the defending side to

219
00:09:49,350 --> 00:09:55,980
monitor a lot of different behaviors and

220
00:09:53,190 --> 00:09:58,260
you're going to be lost in the noise so

221
00:09:55,980 --> 00:10:00,930
let's move on to a couple of actual

222
00:09:58,260 --> 00:10:02,370
bypasses and the first couple are going

223
00:10:00,930 --> 00:10:04,829
to be based on VBA

224
00:10:02,370 --> 00:10:08,130
or Visual Basic for applications this

225
00:10:04,830 --> 00:10:10,200
this is the magic sauce or like the

226
00:10:08,130 --> 00:10:14,370
disgusting magic sauce that is behind

227
00:10:10,200 --> 00:10:16,740
office macros now office macros pretty

228
00:10:14,370 --> 00:10:18,990
much easily allow you to reach arbitrary

229
00:10:16,740 --> 00:10:21,390
execution because they allow you to use

230
00:10:18,990 --> 00:10:23,730
arbitrary when API meaning that you just

231
00:10:21,390 --> 00:10:25,260
supply DLL supply function and you can

232
00:10:23,730 --> 00:10:28,950
just use it in the context of a macro

233
00:10:25,260 --> 00:10:32,610
and it also allows you to use comic-con

234
00:10:28,950 --> 00:10:34,020
objects so again you could use you could

235
00:10:32,610 --> 00:10:37,050
build a shell code runner you could use

236
00:10:34,020 --> 00:10:39,300
meta jscript anyway it's pretty easy to

237
00:10:37,050 --> 00:10:42,930
reach arbitrary execution through VBA

238
00:10:39,300 --> 00:10:44,790
and VBA is not instrumented by device

239
00:10:42,930 --> 00:10:48,180
guard meaning that the moment you run

240
00:10:44,790 --> 00:10:50,040
VBA nothing stops you from importing any

241
00:10:48,180 --> 00:10:56,550
kind of functional functionality that

242
00:10:50,040 --> 00:11:01,800
you want but but the naive way to use

243
00:10:56,550 --> 00:11:04,410
VBA is not really cool because you need

244
00:11:01,800 --> 00:11:06,719
to do this in a fishing scenario so if

245
00:11:04,410 --> 00:11:09,150
you're already on a machine and you're

246
00:11:06,720 --> 00:11:11,220
in a post exploitation scenario making

247
00:11:09,150 --> 00:11:12,090
the user click something is really not

248
00:11:11,220 --> 00:11:14,550
effective

249
00:11:12,090 --> 00:11:16,410
because you've probably already passed

250
00:11:14,550 --> 00:11:19,130
that part and you don't really want to I

251
00:11:16,410 --> 00:11:24,270
don't know bring up a pop up or anything

252
00:11:19,130 --> 00:11:26,070
so could we actually use macros in a

253
00:11:24,270 --> 00:11:27,540
post exploitation scenario without

254
00:11:26,070 --> 00:11:29,220
interacting with the GUI without

255
00:11:27,540 --> 00:11:33,079
internet without any user interaction

256
00:11:29,220 --> 00:11:35,880
and yes there are a couple way to do so

257
00:11:33,080 --> 00:11:39,210
one of the ways is a lateral movement

258
00:11:35,880 --> 00:11:41,760
approach while you can't do some stuff

259
00:11:39,210 --> 00:11:44,940
on the local machine you actually can

260
00:11:41,760 --> 00:11:48,750
reach the office applications decom

261
00:11:44,940 --> 00:11:51,390
object remotely and the office

262
00:11:48,750 --> 00:11:55,470
applications pretty much each each and

263
00:11:51,390 --> 00:11:59,430
everyone's like words excels etc they

264
00:11:55,470 --> 00:12:02,430
actually expose decom method that allows

265
00:11:59,430 --> 00:12:04,140
you to run macros meaning that if you're

266
00:12:02,430 --> 00:12:06,630
using the lateral movement approach you

267
00:12:04,140 --> 00:12:12,270
could just make the office application

268
00:12:06,630 --> 00:12:14,520
run whatever macro you want and this is

269
00:12:12,270 --> 00:12:19,319
actually even available file ously and

270
00:12:14,520 --> 00:12:21,600
it will not do anything and it will do

271
00:12:19,320 --> 00:12:23,360
not ask the users to do anything so

272
00:12:21,600 --> 00:12:26,570
basically the other thing that

273
00:12:23,360 --> 00:12:31,200
everything you need to do is just to

274
00:12:26,570 --> 00:12:32,820
create a remote instance of the office

275
00:12:31,200 --> 00:12:35,280
application that you want to abuse in

276
00:12:32,820 --> 00:12:40,410
this case it's Excel so I just created

277
00:12:35,280 --> 00:12:43,920
the Excel application object you then do

278
00:12:40,410 --> 00:12:45,680
a bit of W my registry magic and change

279
00:12:43,920 --> 00:12:49,229
a key that will allow you to

280
00:12:45,680 --> 00:12:51,300
programmatically inject a macro into an

281
00:12:49,230 --> 00:12:53,790
empty document you create an empty

282
00:12:51,300 --> 00:12:57,420
document you don't save it you inject

283
00:12:53,790 --> 00:12:59,310
the macro from your string into the into

284
00:12:57,420 --> 00:13:01,829
the new office document and then you can

285
00:12:59,310 --> 00:13:04,020
just run the macro so we can do this

286
00:13:01,830 --> 00:13:07,470
completely file lessly we never saved

287
00:13:04,020 --> 00:13:09,630
the file and if the machine has device

288
00:13:07,470 --> 00:13:13,170
guard on the other end it does nothing

289
00:13:09,630 --> 00:13:16,800
to stop us from from executing whatever

290
00:13:13,170 --> 00:13:19,680
we want in the context of the macro but

291
00:13:16,800 --> 00:13:22,439
the biggest issue with this is that well

292
00:13:19,680 --> 00:13:23,000
it requires that man and while I did say

293
00:13:22,440 --> 00:13:26,240
that

294
00:13:23,000 --> 00:13:28,550
admin is still cool we should be able to

295
00:13:26,240 --> 00:13:32,240
do stuff locally and privileged because

296
00:13:28,550 --> 00:13:34,250
this is much more useful so to do so we

297
00:13:32,240 --> 00:13:36,889
need to ask ourselves well when does

298
00:13:34,250 --> 00:13:39,110
office actually forsake this protected

299
00:13:36,889 --> 00:13:41,750
mode thing and just stops asking for

300
00:13:39,110 --> 00:13:46,129
user input to run macros and there are a

301
00:13:41,750 --> 00:13:49,449
couple ways one way is if you've ever

302
00:13:46,129 --> 00:13:53,000
clicked on an accept content on a macro

303
00:13:49,449 --> 00:13:54,920
and then reopen the document you you

304
00:13:53,000 --> 00:13:56,629
might have noticed that you don't really

305
00:13:54,920 --> 00:13:59,870
get the prompt again and this is because

306
00:13:56,629 --> 00:14:03,470
the document is considered trusted which

307
00:13:59,870 --> 00:14:08,240
is which is documented in the registry

308
00:14:03,470 --> 00:14:12,439
but the the way these trusted documents

309
00:14:08,240 --> 00:14:15,230
are saved the pretty much it confused me

310
00:14:12,439 --> 00:14:17,810
for a bit because there was this bit of

311
00:14:15,230 --> 00:14:20,720
encoded data that you needed to craft to

312
00:14:17,810 --> 00:14:23,628
strongly identify the document and I

313
00:14:20,720 --> 00:14:26,930
recently discovered like yesterday that

314
00:14:23,629 --> 00:14:28,370
the annoying part just gets ignored so I

315
00:14:26,930 --> 00:14:30,709
was just too lazy to reverse engineer

316
00:14:28,370 --> 00:14:34,759
and discover that it's absolutely you

317
00:14:30,709 --> 00:14:36,109
that it's like absolutely meaningless so

318
00:14:34,759 --> 00:14:40,819
I've actually used another approach

319
00:14:36,110 --> 00:14:43,910
which is trusted locations each office

320
00:14:40,819 --> 00:14:46,040
application actually maintains a list of

321
00:14:43,910 --> 00:14:48,019
trusted locations from which all

322
00:14:46,040 --> 00:14:50,389
documents will be opened without

323
00:14:48,019 --> 00:14:55,160
protected mode because well you know you

324
00:14:50,389 --> 00:14:57,769
can trust it trusted in the name but the

325
00:14:55,160 --> 00:15:00,379
supposed offence against just running

326
00:14:57,769 --> 00:15:02,029
from a trusted directory is that all the

327
00:15:00,379 --> 00:15:05,509
default trusted directories are writable

328
00:15:02,029 --> 00:15:09,680
by admins so if we for example have this

329
00:15:05,509 --> 00:15:13,809
ACC with directory you can see that it's

330
00:15:09,680 --> 00:15:17,059
not writable by the regular user group

331
00:15:13,809 --> 00:15:18,920
so here you can see how these are

332
00:15:17,059 --> 00:15:22,399
maintained in the registry and you just

333
00:15:18,920 --> 00:15:25,128
see that you have like office 16 and

334
00:15:22,399 --> 00:15:27,230
it's access security trusted locations

335
00:15:25,129 --> 00:15:30,500
and the very descriptive look at the

336
00:15:27,230 --> 00:15:32,059
very descriptive location - and you see

337
00:15:30,500 --> 00:15:34,600
that you have like a small description

338
00:15:32,059 --> 00:15:38,170
and the path of your

339
00:15:34,600 --> 00:15:40,480
of your trusted directory but you might

340
00:15:38,170 --> 00:15:45,400
notice that even if the directory itself

341
00:15:40,480 --> 00:15:47,200
is protected against non admin users you

342
00:15:45,400 --> 00:15:49,449
have a bit of a problem here which is

343
00:15:47,200 --> 00:15:52,390
well everybody could just create their

344
00:15:49,450 --> 00:15:54,010
own trusted directory so we're in the

345
00:15:52,390 --> 00:15:56,560
post exploitation scenario meaning that

346
00:15:54,010 --> 00:15:59,200
we could basically run any command and

347
00:15:56,560 --> 00:16:01,540
this was aizen's HK current user meaning

348
00:15:59,200 --> 00:16:05,170
that the current user can write and

349
00:16:01,540 --> 00:16:08,680
maintain mu trusted directories so all

350
00:16:05,170 --> 00:16:11,189
we need to do is to again do some WMI

351
00:16:08,680 --> 00:16:13,810
magic this tank down locally because

352
00:16:11,190 --> 00:16:15,880
PowerShell actually permits WMI

353
00:16:13,810 --> 00:16:17,739
operations even in constrained language

354
00:16:15,880 --> 00:16:20,950
mode so we don't need some kind of sign

355
00:16:17,740 --> 00:16:23,740
script to do whatever I'm doing here so

356
00:16:20,950 --> 00:16:27,520
I'm just adding C temp to the list of

357
00:16:23,740 --> 00:16:30,580
trusted directories that are used by

358
00:16:27,520 --> 00:16:32,319
Microsoft Access and then I don't need

359
00:16:30,580 --> 00:16:35,620
to worry about protected mode anymore

360
00:16:32,320 --> 00:16:39,780
because well it's trusted it just runs

361
00:16:35,620 --> 00:16:42,430
all I need to do is maybe add this small

362
00:16:39,780 --> 00:16:44,589
slash embedding parameter that prohibits

363
00:16:42,430 --> 00:16:47,020
access or any applicant office

364
00:16:44,590 --> 00:16:49,450
application from creating a GUI so we

365
00:16:47,020 --> 00:16:52,120
don't get this weird pop-up because this

366
00:16:49,450 --> 00:16:55,270
really isn't stealthy and of course my

367
00:16:52,120 --> 00:16:57,430
macro runs notepad because I just had a

368
00:16:55,270 --> 00:17:02,740
little rant about about attackers only

369
00:16:57,430 --> 00:17:05,438
using notepad all right so now we have a

370
00:17:02,740 --> 00:17:08,740
couple of ways to use VBA to basically

371
00:17:05,439 --> 00:17:10,870
break the Vice guard but application

372
00:17:08,740 --> 00:17:13,060
whitelisting is hard and if you've taken

373
00:17:10,869 --> 00:17:15,550
the effort of like modernizing your

374
00:17:13,060 --> 00:17:18,129
network and really prohibiting lots of

375
00:17:15,550 --> 00:17:23,290
weird stuff maybe just stop using macros

376
00:17:18,130 --> 00:17:25,810
altogether maybe even block vb7 the the

377
00:17:23,290 --> 00:17:30,280
office macro engine explicitly just

378
00:17:25,810 --> 00:17:32,379
block it in your policy so the library

379
00:17:30,280 --> 00:17:34,990
will never run and nobody will ever be

380
00:17:32,380 --> 00:17:38,440
able to run an office macro or at least

381
00:17:34,990 --> 00:17:42,640
a VBA macro so let's find a couple of

382
00:17:38,440 --> 00:17:45,130
non VBA banished bypasses and well we've

383
00:17:42,640 --> 00:17:47,630
stopped using macros so let's start

384
00:17:45,130 --> 00:17:52,410
using macros

385
00:17:47,630 --> 00:17:54,930
Excel actually has another older a macro

386
00:17:52,410 --> 00:17:58,950
system which is called Excel for or

387
00:17:54,930 --> 00:18:01,830
Excel em macros now this was introduced

388
00:17:58,950 --> 00:18:05,700
in 92 which is coincidentally my birth

389
00:18:01,830 --> 00:18:07,379
year so it's as old as I am and it's

390
00:18:05,700 --> 00:18:10,410
actually implemented in excel at XE

391
00:18:07,380 --> 00:18:15,330
itself now this thing actually allows

392
00:18:10,410 --> 00:18:17,520
you to use arbitrary windows API by two

393
00:18:15,330 --> 00:18:19,740
internal functions one is called that

394
00:18:17,520 --> 00:18:22,770
simply gets the name of a dll the name

395
00:18:19,740 --> 00:18:25,140
of a function and like weird parameter

396
00:18:22,770 --> 00:18:26,940
string and then the actual parameters to

397
00:18:25,140 --> 00:18:30,420
the function and register which allows

398
00:18:26,940 --> 00:18:34,290
you to actually use data that is in

399
00:18:30,420 --> 00:18:37,680
Excel cells to call an arbitrary Windows

400
00:18:34,290 --> 00:18:40,230
API function but this whole thing is

401
00:18:37,680 --> 00:18:43,170
actually implemented inside of like an

402
00:18:40,230 --> 00:18:46,650
excel sheet which is really really hard

403
00:18:43,170 --> 00:18:51,000
to look at all right now

404
00:18:46,650 --> 00:18:52,680
I at first was unable to use it to

405
00:18:51,000 --> 00:18:57,330
bypass device guard because of a couple

406
00:18:52,680 --> 00:18:58,830
of constraints that I had with with

407
00:18:57,330 --> 00:19:01,110
actually using the call and register

408
00:18:58,830 --> 00:19:04,649
functions so I was able to like run a

409
00:19:01,110 --> 00:19:07,439
new process and I was able to run a comm

410
00:19:04,650 --> 00:19:09,780
scriptlet that runs like vbscript or

411
00:19:07,440 --> 00:19:11,580
jscript but as we've said run a new

412
00:19:09,780 --> 00:19:16,139
process instrumented by device guard

413
00:19:11,580 --> 00:19:20,100
won't run run scriptlet we're already we

414
00:19:16,140 --> 00:19:23,160
already have this column filtering we

415
00:19:20,100 --> 00:19:25,800
have nothing so a couple of guys named

416
00:19:23,160 --> 00:19:29,610
Stan and Peter from outflank did a

417
00:19:25,800 --> 00:19:31,620
really really cool Derby con talk this

418
00:19:29,610 --> 00:19:34,290
year and they actually showed that you

419
00:19:31,620 --> 00:19:36,629
can run x86 shell code using Excel

420
00:19:34,290 --> 00:19:41,310
format Chrome's now it can't really use

421
00:19:36,630 --> 00:19:53,820
a sixty bit shell code 64-bit shell code

422
00:19:41,310 --> 00:19:55,919
because basically I'll just

423
00:19:53,820 --> 00:19:59,070
than you alright so you can't actually

424
00:19:55,920 --> 00:20:00,690
use 64-bit shellcode because you have

425
00:19:59,070 --> 00:20:03,929
like a couple of data types then you can

426
00:20:00,690 --> 00:20:06,330
give to the excel for macro to say well

427
00:20:03,930 --> 00:20:09,000
this argument is of this type and there

428
00:20:06,330 --> 00:20:11,899
is no 64-bit type so you can you just

429
00:20:09,000 --> 00:20:14,640
can't cram your pointers in there and

430
00:20:11,900 --> 00:20:17,730
and this is a bit problematic for

431
00:20:14,640 --> 00:20:20,550
shellcode but most of office is still

432
00:20:17,730 --> 00:20:23,160
somehow somehow 32-bit even on 64-bit

433
00:20:20,550 --> 00:20:25,320
systems so this will be okay for most

434
00:20:23,160 --> 00:20:28,230
environments and it looks like this

435
00:20:25,320 --> 00:20:32,370
so you basically use the register

436
00:20:28,230 --> 00:20:34,500
function to register like the usual

437
00:20:32,370 --> 00:20:36,360
suspects of shellcode running so you

438
00:20:34,500 --> 00:20:39,240
have stuff like virtual a lock right

439
00:20:36,360 --> 00:20:41,939
process memory and create thread and you

440
00:20:39,240 --> 00:20:45,900
actually save your raw shellcode as a

441
00:20:41,940 --> 00:20:49,770
sequence of bytes inside an excel cell

442
00:20:45,900 --> 00:20:52,890
so it's this weird value thing on the

443
00:20:49,770 --> 00:20:56,040
first row because excel does not know

444
00:20:52,890 --> 00:20:58,650
how to how to display long byte arrays

445
00:20:56,040 --> 00:21:00,570
in a single cell it knows how to store

446
00:20:58,650 --> 00:21:02,930
them and knows how to put them into the

447
00:21:00,570 --> 00:21:05,790
macro but it still won't display it but

448
00:21:02,930 --> 00:21:07,290
again we have this annoying enable

449
00:21:05,790 --> 00:21:09,899
content thing and we're running in

450
00:21:07,290 --> 00:21:13,830
protected mode but we already know how

451
00:21:09,900 --> 00:21:16,740
to circumvent protected mode so we could

452
00:21:13,830 --> 00:21:22,110
use lateral movement create the excel

453
00:21:16,740 --> 00:21:26,580
application comma object just copy over

454
00:21:22,110 --> 00:21:28,949
our malicious macro and just run and

455
00:21:26,580 --> 00:21:30,929
just execute run auto macros which will

456
00:21:28,950 --> 00:21:33,090
execute our shellcode and again Bava

457
00:21:30,930 --> 00:21:34,770
calc or notepad or whatever because

458
00:21:33,090 --> 00:21:37,320
that's the only thing that we need as

459
00:21:34,770 --> 00:21:39,360
attackers and the trusted directory

460
00:21:37,320 --> 00:21:41,370
trick works exactly the same it doesn't

461
00:21:39,360 --> 00:21:44,040
matter if you have a VBA macro or an

462
00:21:41,370 --> 00:21:46,860
Excel M macro in your file if you add a

463
00:21:44,040 --> 00:21:48,930
trusted location and run your cur and

464
00:21:46,860 --> 00:21:51,870
run your document from the trusted

465
00:21:48,930 --> 00:21:57,240
location no protected mode your whatever

466
00:21:51,870 --> 00:22:01,760
macro will just run so the the benefit

467
00:21:57,240 --> 00:22:04,020
that you have over VBA macros is that

468
00:22:01,760 --> 00:22:06,390
Excel for macros are actually

469
00:22:04,020 --> 00:22:07,740
implemented in Excel that XE meaning

470
00:22:06,390 --> 00:22:12,059
that you have a choice

471
00:22:07,740 --> 00:22:14,730
either you throw away Excel or yeah and

472
00:22:12,059 --> 00:22:17,039
actually like block it into policy or

473
00:22:14,730 --> 00:22:19,890
you leave a huge hole in your device

474
00:22:17,039 --> 00:22:22,590
guarded machine because well you can

475
00:22:19,890 --> 00:22:24,750
just block away block off only the one

476
00:22:22,590 --> 00:22:27,570
part of Excel that does this because

477
00:22:24,750 --> 00:22:29,190
it's in the main executable so if you

478
00:22:27,570 --> 00:22:32,070
have Excel you have pretty much a device

479
00:22:29,190 --> 00:22:36,210
card for everything yeah

480
00:22:32,070 --> 00:22:38,549
so we're done with macros for today sort

481
00:22:36,210 --> 00:22:41,720
of so let's look at a different category

482
00:22:38,549 --> 00:22:45,210
of bypasses which abuses active script

483
00:22:41,720 --> 00:22:47,370
now active script is a sort of generic

484
00:22:45,210 --> 00:22:50,520
specification for Windows scripting

485
00:22:47,370 --> 00:22:53,279
engines and it's what's behind stuff

486
00:22:50,520 --> 00:22:55,139
like J script and VB script and the

487
00:22:53,279 --> 00:22:57,630
specification allows you to basically

488
00:22:55,140 --> 00:22:59,850
build your own scripting engines will

489
00:22:57,630 --> 00:23:03,000
which will then be able to be used just

490
00:22:59,850 --> 00:23:05,039
like VB script or J script or build new

491
00:23:03,000 --> 00:23:08,820
hosts that will be able to be scripted

492
00:23:05,039 --> 00:23:11,399
by these things and if you're compliant

493
00:23:08,820 --> 00:23:13,500
with the specification every single

494
00:23:11,399 --> 00:23:15,209
thing that you know is every single

495
00:23:13,500 --> 00:23:17,220
other piece of software that's compliant

496
00:23:15,210 --> 00:23:20,220
with the active script is supposed to be

497
00:23:17,220 --> 00:23:21,899
able to use it and it has already been

498
00:23:20,220 --> 00:23:24,330
the target of a couple of different

499
00:23:21,899 --> 00:23:28,860
bypasses mostly called squib Lee

500
00:23:24,330 --> 00:23:30,840
something that you might have seen not

501
00:23:28,860 --> 00:23:33,299
necessarily used as device guard

502
00:23:30,840 --> 00:23:38,668
bypasses but as just as interesting

503
00:23:33,299 --> 00:23:41,429
execution techniques now the way active

504
00:23:38,669 --> 00:23:43,770
script is actually implemented is by two

505
00:23:41,429 --> 00:23:46,380
main types of components one is the

506
00:23:43,770 --> 00:23:49,168
active scripting engine which is simply

507
00:23:46,380 --> 00:23:52,740
an implementation of a program of some

508
00:23:49,169 --> 00:23:55,020
scripting language that exposes the

509
00:23:52,740 --> 00:23:57,600
specific active script interfaces that

510
00:23:55,020 --> 00:23:59,490
are needed by the by the other component

511
00:23:57,600 --> 00:24:01,949
which is the scripting host now the

512
00:23:59,490 --> 00:24:05,940
scripting host is actually the thing

513
00:24:01,950 --> 00:24:08,520
that for example teaches VB script what

514
00:24:05,940 --> 00:24:10,350
hTML is when it's run in the context of

515
00:24:08,520 --> 00:24:12,389
Internet Explorer because you're on a

516
00:24:10,350 --> 00:24:16,860
renter exploring which is already a

517
00:24:12,390 --> 00:24:19,470
mistake but suddenly you can like modify

518
00:24:16,860 --> 00:24:21,020
Dom stuff and when you run VB script

519
00:24:19,470 --> 00:24:23,270
under C script this is

520
00:24:21,020 --> 00:24:25,700
this whole thing is gone so what the

521
00:24:23,270 --> 00:24:28,400
skipping house does or one of the things

522
00:24:25,700 --> 00:24:30,770
the scripting host does is provide some

523
00:24:28,400 --> 00:24:32,240
objects and methods to the scripting

524
00:24:30,770 --> 00:24:35,240
engine itself so it could actually

525
00:24:32,240 --> 00:24:39,050
script a different application or its

526
00:24:35,240 --> 00:24:42,370
host application now there are a couple

527
00:24:39,050 --> 00:24:45,470
of different scripting hosts and engines

528
00:24:42,370 --> 00:24:48,169
that are natively available on Windows

529
00:24:45,470 --> 00:24:52,190
so in terms of hosts you have stuff like

530
00:24:48,170 --> 00:24:54,080
W or C script rxz you have a CRF DLL

531
00:24:52,190 --> 00:24:55,220
which is the actually the engine behind

532
00:24:54,080 --> 00:24:58,428
comm scriptlets

533
00:24:55,220 --> 00:25:00,890
you have msxml 3 & 6 there are the

534
00:24:58,429 --> 00:25:03,950
engines behind XSL stuff and you have MS

535
00:25:00,890 --> 00:25:06,710
HTML DLL which is basically the Internet

536
00:25:03,950 --> 00:25:08,360
Explorer HTML engine in terms of scripts

537
00:25:06,710 --> 00:25:11,030
you have J script which is JavaScript

538
00:25:08,360 --> 00:25:13,459
you have VB script and you have J script

539
00:25:11,030 --> 00:25:17,389
9 IDL L which is another JavaScript

540
00:25:13,460 --> 00:25:19,220
engine because why not now

541
00:25:17,390 --> 00:25:22,190
the way device guard works in active

542
00:25:19,220 --> 00:25:24,410
script is as I've said before it blocks

543
00:25:22,190 --> 00:25:26,240
you it from creating arbitrary calm

544
00:25:24,410 --> 00:25:29,750
objects it only lets you to create

545
00:25:26,240 --> 00:25:31,940
something that's compliant with a very

546
00:25:29,750 --> 00:25:34,450
specific hard-coded list of pretty

547
00:25:31,940 --> 00:25:39,230
useless at least to attacker stuff and

548
00:25:34,450 --> 00:25:41,000
the way call objects get filtered is it

549
00:25:39,230 --> 00:25:43,700
pretty much goes like this so let's say

550
00:25:41,000 --> 00:25:46,309
I want to create the notorious W script

551
00:25:43,700 --> 00:25:50,240
yellow object using Java Script so I do

552
00:25:46,309 --> 00:25:52,820
new activexobject under the hood our

553
00:25:50,240 --> 00:25:56,020
scripting engine tries to translate this

554
00:25:52,820 --> 00:25:59,809
property this friendly name into a good

555
00:25:56,020 --> 00:26:03,260
into a good like class ID which is then

556
00:25:59,809 --> 00:26:05,928
sent over to our scripting host and the

557
00:26:03,260 --> 00:26:09,980
scripting host calls a method called is

558
00:26:05,929 --> 00:26:13,820
class allowed which under the hood

559
00:26:09,980 --> 00:26:17,660
checks against a library called WL DP

560
00:26:13,820 --> 00:26:19,639
DLL which is the user mode device guard

561
00:26:17,660 --> 00:26:21,980
implementation which actually can taste

562
00:26:19,640 --> 00:26:27,230
the heart the hard-coded list I spoke

563
00:26:21,980 --> 00:26:29,450
about before and if if our class idea

564
00:26:27,230 --> 00:26:32,270
for gooood as a part of the of the list

565
00:26:29,450 --> 00:26:34,370
we get like the VA is allowed flag up

566
00:26:32,270 --> 00:26:37,100
and we can create it whatever you we

567
00:26:34,370 --> 00:26:39,500
want and if this is not a part of the

568
00:26:37,100 --> 00:26:44,600
whitelist and we're not running in the

569
00:26:39,500 --> 00:26:47,210
context of trusted of a trusted script

570
00:26:44,600 --> 00:26:49,730
meaning like a sign script then create

571
00:26:47,210 --> 00:26:51,610
class creation will simply fail and you

572
00:26:49,730 --> 00:26:55,760
won't be able to do whatever you wanted

573
00:26:51,610 --> 00:26:58,309
now what happens when you just don't

574
00:26:55,760 --> 00:27:00,710
have this is class allowed function well

575
00:26:58,309 --> 00:27:02,960
the scripting engine will just say let's

576
00:27:00,710 --> 00:27:05,330
create the thing anyway so the simplest

577
00:27:02,960 --> 00:27:07,550
way to bypass this whole thing is to

578
00:27:05,330 --> 00:27:09,110
find a scripting host that does not have

579
00:27:07,550 --> 00:27:11,960
this is class allowed function

580
00:27:09,110 --> 00:27:16,909
implemented meaning it's not enlightened

581
00:27:11,960 --> 00:27:19,610
by device guard so one such thing is the

582
00:27:16,910 --> 00:27:22,850
active script event consumer which is W

583
00:27:19,610 --> 00:27:26,928
my class that you might know from like

584
00:27:22,850 --> 00:27:29,300
the classic W my persistence method now

585
00:27:26,929 --> 00:27:33,679
it's actually implemented in its own XE

586
00:27:29,300 --> 00:27:35,780
and in this year constant DLL and it

587
00:27:33,679 --> 00:27:39,110
implements its own scripting host that

588
00:27:35,780 --> 00:27:40,760
is not that is not dependent on any of

589
00:27:39,110 --> 00:27:43,490
the others that I've shown in the

590
00:27:40,760 --> 00:27:44,929
previous slides and it's not

591
00:27:43,490 --> 00:27:46,850
instrumented by device guard meaning

592
00:27:44,929 --> 00:27:50,030
that the moment he runs script in its

593
00:27:46,850 --> 00:27:53,990
context no no matter what engine it runs

594
00:27:50,030 --> 00:27:57,470
under it will simply not check if if a

595
00:27:53,990 --> 00:28:00,110
comm object-- is is whitelisted or not

596
00:27:57,470 --> 00:28:03,500
and it doesn't really matter if if your

597
00:28:00,110 --> 00:28:05,479
code is signed or not so the only

598
00:28:03,500 --> 00:28:07,100
shortcoming in that is that it's only

599
00:28:05,480 --> 00:28:09,740
available as admin but the way to

600
00:28:07,100 --> 00:28:11,809
implement this is actually exactly the

601
00:28:09,740 --> 00:28:14,540
same as the implementation of W my

602
00:28:11,809 --> 00:28:17,059
persistence so you have our consumer

603
00:28:14,540 --> 00:28:18,500
which is represented by a class and you

604
00:28:17,059 --> 00:28:20,840
just give it this text of the script

605
00:28:18,500 --> 00:28:23,870
that you want to run and then you create

606
00:28:20,840 --> 00:28:26,750
some kind of trigger event called W my

607
00:28:23,870 --> 00:28:28,820
event filter which in this instance just

608
00:28:26,750 --> 00:28:31,370
says well let's run note

609
00:28:28,820 --> 00:28:32,750
well let's like trigger every time that

610
00:28:31,370 --> 00:28:34,909
notepad runs

611
00:28:32,750 --> 00:28:36,860
and then you bind those two things and

612
00:28:34,910 --> 00:28:39,230
then every time the event triggers you

613
00:28:36,860 --> 00:28:41,899
have the consumer triggering so every

614
00:28:39,230 --> 00:28:46,090
time it run notepad I also run CMD

615
00:28:41,900 --> 00:28:51,440
because I'm using this w script shell

616
00:28:46,090 --> 00:28:53,600
creates run cmd.exe script and W and W

617
00:28:51,440 --> 00:28:55,880
script shell is supposed to be not

618
00:28:53,600 --> 00:28:58,669
allowed by device guard so this is one

619
00:28:55,880 --> 00:29:00,350
this is one way to do this another way

620
00:28:58,670 --> 00:29:04,420
is to use XSL or accessibility

621
00:29:00,350 --> 00:29:07,429
transformations which are basically a

622
00:29:04,420 --> 00:29:09,470
file format that describes how to

623
00:29:07,430 --> 00:29:12,520
transform an XML from one format to

624
00:29:09,470 --> 00:29:15,920
another and of course it somehow

625
00:29:12,520 --> 00:29:19,639
supports embedded scripting and also

626
00:29:15,920 --> 00:29:21,980
supports ActiveX and this scripting host

627
00:29:19,640 --> 00:29:25,970
is simply again not instrumented by

628
00:29:21,980 --> 00:29:30,080
device guard meaning that if you're able

629
00:29:25,970 --> 00:29:31,670
to run an XSLT transform somehow you've

630
00:29:30,080 --> 00:29:34,250
bypassed device guard you could create

631
00:29:31,670 --> 00:29:36,500
any contract than you want and do you

632
00:29:34,250 --> 00:29:38,210
and again do dotnet to jscript or

633
00:29:36,500 --> 00:29:42,410
whatever and reach arbitrary execution

634
00:29:38,210 --> 00:29:45,560
so one way to use it is again returning

635
00:29:42,410 --> 00:29:48,620
to office the application transform xml

636
00:29:45,560 --> 00:29:51,379
method of microsoft access you basically

637
00:29:48,620 --> 00:29:55,000
supply an xml you supply the transform

638
00:29:51,380 --> 00:29:58,640
you could even do it like wire URL and

639
00:29:55,000 --> 00:30:00,950
it applies your xml your XSL transform

640
00:29:58,640 --> 00:30:02,360
to your XML file and if you have an

641
00:30:00,950 --> 00:30:05,720
embedded script your embedded script

642
00:30:02,360 --> 00:30:08,209
will run so this is actually only

643
00:30:05,720 --> 00:30:10,610
available bilateral movement but what

644
00:30:08,210 --> 00:30:12,980
you all you need to do is like supply

645
00:30:10,610 --> 00:30:15,350
the URL of the excel sheet you could

646
00:30:12,980 --> 00:30:18,020
actually because an exercise chain is

647
00:30:15,350 --> 00:30:21,949
also an XML you could just also supply

648
00:30:18,020 --> 00:30:23,840
as the source XML itself because we

649
00:30:21,950 --> 00:30:25,790
don't really care about the XML

650
00:30:23,840 --> 00:30:29,929
transformation stuff we just we just

651
00:30:25,790 --> 00:30:31,879
want to run code and XML why is this

652
00:30:29,930 --> 00:30:33,890
thing will will fail so we don't really

653
00:30:31,880 --> 00:30:37,490
need to give it a real path to write our

654
00:30:33,890 --> 00:30:40,310
file or a result or whatever so we just

655
00:30:37,490 --> 00:30:43,130
transform the file will itself it

656
00:30:40,310 --> 00:30:45,799
supposedly fails but our code gets run

657
00:30:43,130 --> 00:30:49,039
which is fine by me because I never want

658
00:30:45,799 --> 00:30:52,279
to transform the XML anyway

659
00:30:49,039 --> 00:30:55,549
another way to abuse XSL T's and lateral

660
00:30:52,279 --> 00:30:59,539
movement is to use outlooks create

661
00:30:55,549 --> 00:31:01,610
object method which is basically a

662
00:30:59,539 --> 00:31:05,570
modification of a technique by Matt

663
00:31:01,610 --> 00:31:08,059
Nelson of Specter ops and he had first

664
00:31:05,570 --> 00:31:09,710
used a different College echt which was

665
00:31:08,059 --> 00:31:12,830
instrumented by device guard and only

666
00:31:09,710 --> 00:31:15,739
available with 32-bit stuff but you

667
00:31:12,830 --> 00:31:23,090
actually could use the XSL template or

668
00:31:15,739 --> 00:31:25,820
XSL transform objects to to again reach

669
00:31:23,090 --> 00:31:27,559
the same arbitrary code execution so

670
00:31:25,820 --> 00:31:31,158
again you just need to create two

671
00:31:27,559 --> 00:31:33,918
different objects this time one's an XML

672
00:31:31,159 --> 00:31:35,929
document object the other is the XSL

673
00:31:33,919 --> 00:31:37,549
transform object and then apply the

674
00:31:35,929 --> 00:31:39,980
transform to the document and again

675
00:31:37,549 --> 00:31:43,539
embedded script prints you can reach

676
00:31:39,980 --> 00:31:47,749
arbitrary execution and that's about it

677
00:31:43,539 --> 00:31:50,960
so when I first told you about like this

678
00:31:47,749 --> 00:31:55,399
slide and explained it I did I actually

679
00:31:50,960 --> 00:31:59,090
lied a bit by omission and the omission

680
00:31:55,399 --> 00:32:01,758
was well how exactly does the scripting

681
00:31:59,090 --> 00:32:06,918
engine ask the host hey is this allowed

682
00:32:01,759 --> 00:32:09,559
because the engine itself creates our

683
00:32:06,919 --> 00:32:11,480
object so it basically somehow

684
00:32:09,559 --> 00:32:14,840
relinquishes execution and then returns

685
00:32:11,480 --> 00:32:16,999
to itself now the answer to this is that

686
00:32:14,840 --> 00:32:20,509
there is no one single implementation

687
00:32:16,999 --> 00:32:22,940
which is actually which is actually the

688
00:32:20,509 --> 00:32:24,590
root cause of a vulnerability now you

689
00:32:22,940 --> 00:32:26,749
could look at the disassembly but it's

690
00:32:24,590 --> 00:32:29,899
actually pretty much simpler to just

691
00:32:26,749 --> 00:32:32,029
look at two call stacks and see what the

692
00:32:29,899 --> 00:32:35,508
vulnerability is about so let's look at

693
00:32:32,029 --> 00:32:38,869
two call stacks the the upper call stack

694
00:32:35,509 --> 00:32:42,259
is showing jscript 9gl running as a

695
00:32:38,869 --> 00:32:45,859
scripting engine under MS HTML dll as a

696
00:32:42,259 --> 00:32:48,259
host and we see that well there's this

697
00:32:45,859 --> 00:32:53,119
weird create object from from prag ID

698
00:32:48,259 --> 00:32:56,389
function and whatever and it

699
00:32:53,119 --> 00:32:59,090
relinquishes control - MS HTML for this

700
00:32:56,389 --> 00:32:59,419
host query custom policy function which

701
00:32:59,090 --> 00:33:01,250
is

702
00:32:59,420 --> 00:33:04,690
actually not a device guard function

703
00:33:01,250 --> 00:33:07,340
it's an internal function that basically

704
00:33:04,690 --> 00:33:11,000
does other security checks on call

705
00:33:07,340 --> 00:33:14,990
objects and then MS HTML subsequently

706
00:33:11,000 --> 00:33:17,690
calls is class allowed on itself this

707
00:33:14,990 --> 00:33:22,070
comes in contrast to the bottom call

708
00:33:17,690 --> 00:33:24,830
stack here we have a script DLL and it

709
00:33:22,070 --> 00:33:27,980
just directly calls is class allowed and

710
00:33:24,830 --> 00:33:31,909
under its significant host under C

711
00:33:27,980 --> 00:33:34,550
script now this means that we have two

712
00:33:31,910 --> 00:33:37,550
different approaches the first approach

713
00:33:34,550 --> 00:33:40,940
is used by MS HTML that basically says

714
00:33:37,550 --> 00:33:42,710
well I am responsible for device guard I

715
00:33:40,940 --> 00:33:46,040
will call this function when it's needed

716
00:33:42,710 --> 00:33:49,280
and C's and C script does the opposite

717
00:33:46,040 --> 00:33:51,379
and says well here's my class without

718
00:33:49,280 --> 00:33:53,600
function here's a pointer to my function

719
00:33:51,380 --> 00:33:56,360
here you go

720
00:33:53,600 --> 00:33:59,780
scripting engine developers just use

721
00:33:56,360 --> 00:34:04,399
this whenever I trust you so both of

722
00:33:59,780 --> 00:34:06,889
these work obviously because if you're

723
00:34:04,400 --> 00:34:10,160
if you'll try to run a script 900 and MS

724
00:34:06,890 --> 00:34:13,490
HTML or jscript under C script both of

725
00:34:10,159 --> 00:34:15,678
these will work but this depends on

726
00:34:13,489 --> 00:34:19,790
everybody assuming the same thing which

727
00:34:15,679 --> 00:34:22,220
does not happen with jscript 9 so the

728
00:34:19,790 --> 00:34:26,690
developers of jscript 9 actually only

729
00:34:22,219 --> 00:34:30,350
developed it to run with MS HTML DLL but

730
00:34:26,690 --> 00:34:33,770
as it is an active script engine it

731
00:34:30,350 --> 00:34:39,830
could actually be run with any scripting

732
00:34:33,770 --> 00:34:43,280
host meaning that while the jscript 9

733
00:34:39,830 --> 00:34:46,668
people just thought well the only the MS

734
00:34:43,280 --> 00:34:49,040
HTML convention works meaning that our

735
00:34:46,668 --> 00:34:51,409
host will be responsible for doing all

736
00:34:49,040 --> 00:34:53,719
of the device guard stuff so they just

737
00:34:51,409 --> 00:34:56,719
never implemented checking it themselves

738
00:34:53,719 --> 00:35:00,230
so if we if we were able to run a script

739
00:34:56,719 --> 00:35:02,870
9 under C script we have a scripting

740
00:35:00,230 --> 00:35:04,850
engine that says well the host will do

741
00:35:02,870 --> 00:35:06,980
the check and we have a scripting host

742
00:35:04,850 --> 00:35:08,870
that says the engine will do the check

743
00:35:06,980 --> 00:35:11,950
so nobody does the check

744
00:35:08,870 --> 00:35:14,330
and everything is created without

745
00:35:11,950 --> 00:35:18,319
without any checks so we could just

746
00:35:14,330 --> 00:35:20,990
create an arbitrary comma object now it

747
00:35:18,320 --> 00:35:24,650
looks like this so I first tried to run

748
00:35:20,990 --> 00:35:27,500
test JavaScript that simply runs the

749
00:35:24,650 --> 00:35:30,680
calculator and we see that we have this

750
00:35:27,500 --> 00:35:33,470
error automation server can create

751
00:35:30,680 --> 00:35:35,779
object which is the which is the way

752
00:35:33,470 --> 00:35:39,339
that device guard says no you cannot use

753
00:35:35,780 --> 00:35:42,290
this object and you could actually force

754
00:35:39,340 --> 00:35:45,080
cscript to run with jscript nine you

755
00:35:42,290 --> 00:35:48,350
could you could supply the this /e

756
00:35:45,080 --> 00:35:52,040
parameter that actually takes the prog

757
00:35:48,350 --> 00:35:54,710
ID the friendly name or the good of an

758
00:35:52,040 --> 00:35:57,050
object that you that it's going to use

759
00:35:54,710 --> 00:36:01,550
as a scripting engine so this code is

760
00:35:57,050 --> 00:36:03,320
actually jscript nice class ID so using

761
00:36:01,550 --> 00:36:06,140
this I'm simply forcing it to run under

762
00:36:03,320 --> 00:36:11,260
jscript nine and as you can see our

763
00:36:06,140 --> 00:36:13,819
calculator pops so hooray for that and

764
00:36:11,260 --> 00:36:18,200
we can actually use the exact same

765
00:36:13,820 --> 00:36:21,110
vulnerability for SCR off DLL with with

766
00:36:18,200 --> 00:36:24,049
com scriptlets because it implements the

767
00:36:21,110 --> 00:36:26,450
checks the same exact way that c script

768
00:36:24,050 --> 00:36:30,050
does meaning that if you're able to make

769
00:36:26,450 --> 00:36:35,509
jscript nine run under under scr abdi ll

770
00:36:30,050 --> 00:36:36,980
you can again just ignore all of the

771
00:36:35,510 --> 00:36:41,240
device guard checks and create whatever

772
00:36:36,980 --> 00:36:43,220
comlinks you want now it looks a bit

773
00:36:41,240 --> 00:36:45,229
like this you have this XML file you

774
00:36:43,220 --> 00:36:50,359
have a scripting language that I've now

775
00:36:45,230 --> 00:36:52,010
called also J script because because J

776
00:36:50,360 --> 00:36:53,750
script 9 doesn't really have a native

777
00:36:52,010 --> 00:36:56,110
friendly name so just need to create it

778
00:36:53,750 --> 00:36:59,030
yourself and then what you do is

779
00:36:56,110 --> 00:37:02,210
actually register this friendly name and

780
00:36:59,030 --> 00:37:04,640
your current user registry hive so now

781
00:37:02,210 --> 00:37:06,380
we have also J script and then you can

782
00:37:04,640 --> 00:37:09,740
run the same script LEDs that I showed

783
00:37:06,380 --> 00:37:14,050
you before and again no checks are made

784
00:37:09,740 --> 00:37:16,879
calculators running hooray for us now

785
00:37:14,050 --> 00:37:18,860
there's actually a systemic problem with

786
00:37:16,880 --> 00:37:22,580
device guard which pretty much allows

787
00:37:18,860 --> 00:37:24,140
you to ignore most

788
00:37:22,580 --> 00:37:28,310
actions that were made to any device

789
00:37:24,140 --> 00:37:31,549
guard vulnerability but I as I am still

790
00:37:28,310 --> 00:37:34,310
in talk with Microsoft about mitigating

791
00:37:31,550 --> 00:37:38,630
this I won't drop this as a zero day

792
00:37:34,310 --> 00:37:41,060
today so sorry for that so this was

793
00:37:38,630 --> 00:37:43,370
actually pretty much all of my bypasses

794
00:37:41,060 --> 00:37:45,200
but you could still use these things

795
00:37:43,370 --> 00:37:49,460
even if you're not in a device guard

796
00:37:45,200 --> 00:37:51,169
environment so let's see a couple of

797
00:37:49,460 --> 00:37:54,140
other uses of these execution techniques

798
00:37:51,170 --> 00:37:56,510
so first of all we've actually had a

799
00:37:54,140 --> 00:37:58,910
couple of ways the nicely used office

800
00:37:56,510 --> 00:38:01,670
for post exploitation so if you're

801
00:37:58,910 --> 00:38:03,710
getting like tired of PowerShell or C

802
00:38:01,670 --> 00:38:05,480
script why not just run your whole

803
00:38:03,710 --> 00:38:08,120
payload in the context of a macro

804
00:38:05,480 --> 00:38:11,000
whether you know Excel running in the

805
00:38:08,120 --> 00:38:13,640
Mac in the background even you even have

806
00:38:11,000 --> 00:38:16,310
a way to do this file asleep and I'd

807
00:38:13,640 --> 00:38:19,160
only know any blue T or the TAS like

808
00:38:16,310 --> 00:38:23,029
seeing a lone instance of Excel not

809
00:38:19,160 --> 00:38:24,890
loading any file not doing well not

810
00:38:23,030 --> 00:38:29,030
injecting or anything like that it said

811
00:38:24,890 --> 00:38:31,670
oh this looks really suspicious so it's

812
00:38:29,030 --> 00:38:35,030
a pretty nice addition to your payload

813
00:38:31,670 --> 00:38:37,880
container collection another nice thing

814
00:38:35,030 --> 00:38:42,320
is while the jscript 9 burner ability

815
00:38:37,880 --> 00:38:44,990
has already been patched the same if you

816
00:38:42,320 --> 00:38:47,390
use the exploit today it's actually an

817
00:38:44,990 --> 00:38:49,640
AMC bypass which is very simple to

818
00:38:47,390 --> 00:38:54,279
explain you don't have a Masai forge a

819
00:38:49,640 --> 00:38:58,129
strep 9 so if you're afraid of various

820
00:38:54,280 --> 00:38:59,990
security products using a msi to spy on

821
00:38:58,130 --> 00:39:03,590
whatever you're doing with your scripts

822
00:38:59,990 --> 00:39:05,810
just use jscript 9 and this has also

823
00:39:03,590 --> 00:39:08,750
inspired me to find another msi bypass

824
00:39:05,810 --> 00:39:13,100
which is very similar and it's using

825
00:39:08,750 --> 00:39:15,110
chakra yellow because we you can never

826
00:39:13,100 --> 00:39:18,890
have enough JavaScript implementations

827
00:39:15,110 --> 00:39:22,280
on a single machine now it again does

828
00:39:18,890 --> 00:39:24,890
not implement a msi but it can also it's

829
00:39:22,280 --> 00:39:26,330
simply threw away the scripts the

830
00:39:24,890 --> 00:39:29,420
scripting language is ability to create

831
00:39:26,330 --> 00:39:31,580
ActiveX objects meaning that well if

832
00:39:29,420 --> 00:39:34,130
there are no objects to spy on you don't

833
00:39:31,580 --> 00:39:35,420
really need to spy on object but if

834
00:39:34,130 --> 00:39:38,960
you're able to

835
00:39:35,420 --> 00:39:40,099
but if you're able to run it under W

836
00:39:38,960 --> 00:39:43,760
Skype or C scripts you could actually

837
00:39:40,099 --> 00:39:46,190
use W script of create object which is

838
00:39:43,760 --> 00:39:47,660
an internal function that's provided by

839
00:39:46,190 --> 00:39:49,609
the scripting host itself to still

840
00:39:47,660 --> 00:39:52,038
create your own arbitrary column objects

841
00:39:49,609 --> 00:39:54,009
which will then not be looked at by MSI

842
00:39:52,039 --> 00:39:56,630
because there is no way M sorry

843
00:39:54,010 --> 00:39:59,000
a couple of other cool things that you

844
00:39:56,630 --> 00:40:02,000
could do is like combine the a msi

845
00:39:59,000 --> 00:40:04,190
bypasses and use Excel for macros which

846
00:40:02,000 --> 00:40:07,069
you could reach through deep through

847
00:40:04,190 --> 00:40:09,740
com2 simply like drive an instance of

848
00:40:07,069 --> 00:40:11,329
excel file lessly to do all of the

849
00:40:09,740 --> 00:40:15,740
thirsty style that you don't want to do

850
00:40:11,329 --> 00:40:20,990
in the context of your in the context of

851
00:40:15,740 --> 00:40:24,109
your main payload so let's do a quick

852
00:40:20,990 --> 00:40:25,970
conclusion first of all if you're afraid

853
00:40:24,109 --> 00:40:27,920
of these execution techniques doesn't

854
00:40:25,970 --> 00:40:30,439
matter if it's in the context of device

855
00:40:27,920 --> 00:40:33,440
garden node well they're actually pretty

856
00:40:30,440 --> 00:40:35,569
easy to discover and to detect because

857
00:40:33,440 --> 00:40:40,279
almost all of them are like command line

858
00:40:35,569 --> 00:40:41,750
stuff and if you have like basic

859
00:40:40,279 --> 00:40:43,579
monitoring on your net we're gonna chose

860
00:40:41,750 --> 00:40:46,309
you processes command lines a bit of

861
00:40:43,579 --> 00:40:49,430
registry etc you don't need much else

862
00:40:46,309 --> 00:40:53,779
except for knowing these techniques to

863
00:40:49,430 --> 00:40:55,490
catch them and also I think that device

864
00:40:53,779 --> 00:40:59,029
guard could improve in a couple of ways

865
00:40:55,490 --> 00:41:00,828
so first I believe Microsoft should

866
00:40:59,029 --> 00:41:03,470
really lock down office because it's

867
00:41:00,829 --> 00:41:05,269
pretty ubiquitous and you're gonna have

868
00:41:03,470 --> 00:41:07,669
office on your device guarded machines

869
00:41:05,269 --> 00:41:11,299
and I've shown that well it's really

870
00:41:07,670 --> 00:41:15,049
weekends this feature and also I'm not

871
00:41:11,299 --> 00:41:17,690
exactly sure that I've used like the the

872
00:41:15,049 --> 00:41:20,900
the only vulnerability and the emphasis

873
00:41:17,690 --> 00:41:22,160
and implementation stuff so a single

874
00:41:20,900 --> 00:41:25,579
consistent implementation will be better

875
00:41:22,160 --> 00:41:27,410
and also if you could somehow extend

876
00:41:25,579 --> 00:41:29,960
application whitelisting by device guard

877
00:41:27,410 --> 00:41:31,490
to other stuff like Python or Java you

878
00:41:29,960 --> 00:41:33,109
won't be so afraid to just put it on

879
00:41:31,490 --> 00:41:35,180
your machine because if you have a

880
00:41:33,109 --> 00:41:36,740
Python interpreter you could just use it

881
00:41:35,180 --> 00:41:40,759
to bypass device guard because it's not

882
00:41:36,740 --> 00:41:44,450
instrumented so if you're interested in

883
00:41:40,759 --> 00:41:46,339
device guard or you just enjoy my talk

884
00:41:44,450 --> 00:41:49,140
you should probably follow these guys on

885
00:41:46,339 --> 00:41:51,400
Twitter and they consistently

886
00:41:49,140 --> 00:41:54,190
they consistently put up new stuff

887
00:41:51,400 --> 00:41:56,770
that's very interesting about this and I

888
00:41:54,190 --> 00:41:58,510
couldn't really reference much prior

889
00:41:56,770 --> 00:42:01,090
work simply because of time constraints

890
00:41:58,510 --> 00:42:03,490
but there's there's a lot of different

891
00:42:01,090 --> 00:42:05,440
research and implement and bypass

892
00:42:03,490 --> 00:42:10,899
projects that you should probably check

893
00:42:05,440 --> 00:42:11,970
out so that's it for my talk do I have

894
00:42:10,900 --> 00:42:31,270
time for questions

895
00:42:11,970 --> 00:42:32,740
awesome does anybody have them thank you

896
00:42:31,270 --> 00:42:37,000
for the great talk

897
00:42:32,740 --> 00:42:39,430
you touched quickly on MZ and all your

898
00:42:37,000 --> 00:42:42,609
techniques should according to Microsoft

899
00:42:39,430 --> 00:42:46,180
be subject to some extent to MZ you also

900
00:42:42,609 --> 00:42:50,859
showed us directly a few ways that it

901
00:42:46,180 --> 00:42:53,740
was not we can evade it for example of

902
00:42:50,859 --> 00:42:57,670
this should be able to detect in its

903
00:42:53,740 --> 00:43:01,529
latest version VBA macros or scan VBA

904
00:42:57,670 --> 00:43:06,339
macros Ramsay so do you know if

905
00:43:01,530 --> 00:43:09,130
Microsoft plans to disable the legacy

906
00:43:06,339 --> 00:43:12,790
modes of macros which would not be

907
00:43:09,130 --> 00:43:14,710
subject terms I guess well I really hope

908
00:43:12,790 --> 00:43:16,390
that yeah they're just gonna deprecated

909
00:43:14,710 --> 00:43:19,800
it because I have never met a person who

910
00:43:16,390 --> 00:43:22,509
used Excel for macros for good but also

911
00:43:19,800 --> 00:43:24,790
if you really can't if you're really

912
00:43:22,510 --> 00:43:26,589
counting on MZ to save you with macros

913
00:43:24,790 --> 00:43:30,820
you should know that there are a couple

914
00:43:26,589 --> 00:43:33,040
of bypasses you could use to just not be

915
00:43:30,820 --> 00:43:36,930
seen by MZ you actually saw a pretty

916
00:43:33,040 --> 00:43:39,580
good talk yesterday about that so if you

917
00:43:36,930 --> 00:43:43,029
ever see the so she should be very

918
00:43:39,580 --> 00:43:46,000
interested in a talk hold I think Emma's

919
00:43:43,030 --> 00:43:49,150
file format sorcery by Peter and Stan

920
00:43:46,000 --> 00:43:53,920
from outrank thank you

921
00:43:49,150 --> 00:43:57,849
maybe a second question if do you you

922
00:43:53,920 --> 00:44:00,040
you suggested to block VBA I go the DLL

923
00:43:57,849 --> 00:44:01,509
of the day I guess that's not really

924
00:44:00,040 --> 00:44:04,929
feasible in many

925
00:44:01,509 --> 00:44:08,829
companies do you see a lot of companies

926
00:44:04,929 --> 00:44:12,279
trying to our security products trying

927
00:44:08,829 --> 00:44:15,279
to go to mg route and try to detect your

928
00:44:12,279 --> 00:44:17,889
macros this way or have you never been

929
00:44:15,279 --> 00:44:21,669
subject to any issue or blocking on this

930
00:44:17,889 --> 00:44:23,199
route well there are two different

931
00:44:21,669 --> 00:44:26,049
approaches so you either want a

932
00:44:23,199 --> 00:44:27,669
blacklist so you try to statically or

933
00:44:26,049 --> 00:44:29,469
behaviorally detect something or you

934
00:44:27,669 --> 00:44:31,299
want to whitelist and just say if it's

935
00:44:29,469 --> 00:44:36,269
not this one thing it simply won't run

936
00:44:31,299 --> 00:44:39,189
and these are not really so compatible

937
00:44:36,269 --> 00:44:42,609
so you know if you're already like

938
00:44:39,189 --> 00:44:44,859
hardcore whitelisting stuff macros or

939
00:44:42,609 --> 00:44:46,719
macros are a serious problem because it

940
00:44:44,859 --> 00:44:50,949
just means that oh you still need to

941
00:44:46,719 --> 00:44:54,939
monitor every single behavior and I

942
00:44:50,949 --> 00:44:58,380
haven't really seen people using this

943
00:44:54,939 --> 00:45:01,209
stuff under device guard but I think

944
00:44:58,380 --> 00:45:02,979
lots of security products today try to

945
00:45:01,209 --> 00:45:09,428
actually look at microbes behaviorally

946
00:45:02,979 --> 00:45:11,819
either by MZ or other means any other

947
00:45:09,429 --> 00:45:11,819
questions

948
00:45:23,220 --> 00:45:28,348
well alright then thank you

