1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:14,000 --> 00:00:16,400
okay let's go

3
00:00:16,400 --> 00:00:18,320
my name is andy robbins thank you lam

4
00:00:18,320 --> 00:00:20,640
for the kind introduction i'm the

5
00:00:20,640 --> 00:00:22,880
co-creator of a tool called bloodhound

6
00:00:22,880 --> 00:00:24,720
this is the logo for it

7
00:00:24,720 --> 00:00:27,039
i am now the product architect for the

8
00:00:27,039 --> 00:00:28,720
commercial version of that software

9
00:00:28,720 --> 00:00:30,800
called bloodhound enterprise

10
00:00:30,800 --> 00:00:32,640
i work at a company that's called

11
00:00:32,640 --> 00:00:34,559
spectre ops like elan mentioned

12
00:00:34,559 --> 00:00:36,079
and on twitter you can find me at

13
00:00:36,079 --> 00:00:38,640
underscore waldo with a zero

14
00:00:38,640 --> 00:00:41,920
here is our agenda for the talk

15
00:00:41,920 --> 00:00:45,360
first why abuses and not bugs then we'll

16
00:00:45,360 --> 00:00:48,079
do a crash course through the basics

17
00:00:48,079 --> 00:00:50,800
and to explain my own

18
00:00:50,800 --> 00:00:53,039
abuse research methodology we'll look at

19
00:00:53,039 --> 00:00:55,120
a case study of some research that i did

20
00:00:55,120 --> 00:00:58,800
recently regarding the ms graph api

21
00:00:58,800 --> 00:01:00,239
i'll share some ideas about where you

22
00:01:00,239 --> 00:01:01,680
can find research opportunities for

23
00:01:01,680 --> 00:01:02,800
yourself

24
00:01:02,800 --> 00:01:05,600
and then a conclusion at the end so why

25
00:01:05,600 --> 00:01:08,159
abuses and not bugs

26
00:01:08,159 --> 00:01:09,920
in looking at the

27
00:01:09,920 --> 00:01:11,680
talks for this conference there are a

28
00:01:11,680 --> 00:01:13,439
lot of like very low level very

29
00:01:13,439 --> 00:01:16,000
technical like let's find bugs in

30
00:01:16,000 --> 00:01:18,960
android or let's find bugs in arm or

31
00:01:18,960 --> 00:01:20,320
let's find bugs and some other kind of

32
00:01:20,320 --> 00:01:22,720
software

33
00:01:22,720 --> 00:01:25,360
our team and our company generally

34
00:01:25,360 --> 00:01:28,880
focuses more on abuses rather than bugs

35
00:01:28,880 --> 00:01:32,320
and there are a few reasons why

36
00:01:32,320 --> 00:01:34,159
first generally

37
00:01:34,159 --> 00:01:36,320
abuses compared to bugs enjoy a

38
00:01:36,320 --> 00:01:39,680
dramatically longer shelf life

39
00:01:39,680 --> 00:01:42,000
exec has been around for 20 years and

40
00:01:42,000 --> 00:01:44,720
adversaries still use it very reliably

41
00:01:44,720 --> 00:01:47,399
every hour of every day

42
00:01:47,399 --> 00:01:49,040
ms-08067

43
00:01:49,040 --> 00:01:51,680
not so much eternal blue not so much

44
00:01:51,680 --> 00:01:53,840
obviously they're still there but the

45
00:01:53,840 --> 00:01:57,600
abuse primitives are generally way more

46
00:01:57,600 --> 00:02:00,719
reliable than bugs

47
00:02:00,719 --> 00:02:02,960
over time they are also much cheaper to

48
00:02:02,960 --> 00:02:04,479
maintain

49
00:02:04,479 --> 00:02:06,799
like i said p.s exec thank you mark

50
00:02:06,799 --> 00:02:09,038
rusinovic for that it's very stable it

51
00:02:09,038 --> 00:02:10,959
works you don't really have to patch it

52
00:02:10,959 --> 00:02:13,120
to be able to target a different windows

53
00:02:13,120 --> 00:02:14,879
operating system version like you do

54
00:02:14,879 --> 00:02:18,480
with like mso8067 for example so

55
00:02:18,480 --> 00:02:20,319
maintaining abuses over time is very

56
00:02:20,319 --> 00:02:22,879
easy and cheap

57
00:02:22,879 --> 00:02:24,879
the abusable configurations or

58
00:02:24,879 --> 00:02:27,920
circumstances generally exist in every

59
00:02:27,920 --> 00:02:30,319
single instance of that platform that

60
00:02:30,319 --> 00:02:32,640
you're doing your research against

61
00:02:32,640 --> 00:02:34,000
so

62
00:02:34,000 --> 00:02:36,640
who has seen someone have local admin in

63
00:02:36,640 --> 00:02:38,080
active directory when that user

64
00:02:38,080 --> 00:02:40,319
shouldn't have had it everyone

65
00:02:40,319 --> 00:02:42,720
who has seen ms-08067 in the past 12

66
00:02:42,720 --> 00:02:44,000
months

67
00:02:44,000 --> 00:02:45,680
maybe some of us yeah maybe depends on

68
00:02:45,680 --> 00:02:48,160
where you go

69
00:02:48,160 --> 00:02:50,720
finally on the detection front

70
00:02:50,720 --> 00:02:54,319
abuses present a notorious challenge for

71
00:02:54,319 --> 00:02:55,879
detection engineers it is

72
00:02:55,879 --> 00:02:57,760
extraordinarily difficult to tell the

73
00:02:57,760 --> 00:03:00,640
difference between legitimate usage of

74
00:03:00,640 --> 00:03:02,560
an administrative protocol and

75
00:03:02,560 --> 00:03:04,560
illegitimate usage of an administrative

76
00:03:04,560 --> 00:03:06,159
protocol especially when it's the same

77
00:03:06,159 --> 00:03:09,040
user to the same system it's extremely

78
00:03:09,040 --> 00:03:10,560
difficult to see the difference as a

79
00:03:10,560 --> 00:03:13,840
detect as a detection engineer

80
00:03:13,840 --> 00:03:15,120
if you don't believe me believe the

81
00:03:15,120 --> 00:03:17,440
gruck he said give a man an o day and

82
00:03:17,440 --> 00:03:19,599
he'll have access for a day teach a man

83
00:03:19,599 --> 00:03:22,159
to fish and he'll have access for life

84
00:03:22,159 --> 00:03:23,360
if you don't believe the gruck believe

85
00:03:23,360 --> 00:03:25,280
matt graber he says a sufficiently

86
00:03:25,280 --> 00:03:26,640
advanced threat actor is

87
00:03:26,640 --> 00:03:28,480
indistinguishable from a competent

88
00:03:28,480 --> 00:03:30,400
system administrator

89
00:03:30,400 --> 00:03:32,799
so for these reasons these are why we

90
00:03:32,799 --> 00:03:34,959
focus more on abuses and discovering

91
00:03:34,959 --> 00:03:36,799
what those abuse primitives are rather

92
00:03:36,799 --> 00:03:38,640
than bugs if you want to find bugs and

93
00:03:38,640 --> 00:03:41,280
get a bug bounty more power to you i

94
00:03:41,280 --> 00:03:43,360
go with god uh

95
00:03:43,360 --> 00:03:44,959
but you know here we're talking about

96
00:03:44,959 --> 00:03:46,640
abuses

97
00:03:46,640 --> 00:03:49,599
so let's go through a very quick crash

98
00:03:49,599 --> 00:03:51,599
course of the basics

99
00:03:51,599 --> 00:03:53,920
uh maybe just by a show of hands who has

100
00:03:53,920 --> 00:03:57,680
worked with azure before

101
00:03:57,680 --> 00:04:01,280
maybe half yeah okay and of those who

102
00:04:01,280 --> 00:04:03,200
have worked against the microsoft graph

103
00:04:03,200 --> 00:04:05,200
api

104
00:04:05,200 --> 00:04:08,080
about half of that half okay great

105
00:04:08,080 --> 00:04:09,599
so for the rest of us i'm going to

106
00:04:09,599 --> 00:04:11,519
explain some of the very very basic

107
00:04:11,519 --> 00:04:12,959
concepts of azure so that we're all

108
00:04:12,959 --> 00:04:15,519
speaking the same language

109
00:04:15,519 --> 00:04:18,959
first of all what exactly is azure

110
00:04:18,959 --> 00:04:21,759
azure depending on who you ask can be

111
00:04:21,759 --> 00:04:23,840
different things so

112
00:04:23,840 --> 00:04:26,840
my definition is i say that azure is the

113
00:04:26,840 --> 00:04:29,520
all-encompassing suite of services that

114
00:04:29,520 --> 00:04:32,320
comprise microsoft's cloud computing

115
00:04:32,320 --> 00:04:34,960
services and platform and product so

116
00:04:34,960 --> 00:04:37,280
when i say azure i basically just mean

117
00:04:37,280 --> 00:04:39,919
microsoft cloud computing as it is

118
00:04:39,919 --> 00:04:43,600
distinct from aws or gcp

119
00:04:43,600 --> 00:04:45,440
azure itself is actually comprised of

120
00:04:45,440 --> 00:04:47,919
more than 600 distinct services that

121
00:04:47,919 --> 00:04:49,919
cover all kinds of

122
00:04:49,919 --> 00:04:52,080
services identity compute storage data

123
00:04:52,080 --> 00:04:55,199
management devops iot you name it if you

124
00:04:55,199 --> 00:04:56,320
can do it with a computer you can

125
00:04:56,320 --> 00:04:59,520
probably do it with azure

126
00:04:59,520 --> 00:05:01,759
there is a very specific

127
00:05:01,759 --> 00:05:04,400
uh okay that stopped working

128
00:05:04,400 --> 00:05:08,400
oh no no yes no yes okay we're back

129
00:05:08,400 --> 00:05:11,600
there's a no

130
00:05:11,600 --> 00:05:14,160
yes yes no

131
00:05:14,160 --> 00:05:16,000
yes

132
00:05:16,000 --> 00:05:16,960
yes

133
00:05:16,960 --> 00:05:18,720
no

134
00:05:18,720 --> 00:05:22,080
i can just project as well

135
00:05:22,080 --> 00:05:24,880
is that okay for the video

136
00:05:24,880 --> 00:05:26,560
for the video recording is that okay all

137
00:05:26,560 --> 00:05:29,520
right i'm just gonna project

138
00:05:29,919 --> 00:05:32,000
so there is a very specific securable

139
00:05:32,000 --> 00:05:34,960
object hierarchy in azure regardless of

140
00:05:34,960 --> 00:05:36,400
what service you are using if you're

141
00:05:36,400 --> 00:05:38,320
using m365

142
00:05:38,320 --> 00:05:40,479
if you're using azure ad if you're using

143
00:05:40,479 --> 00:05:41,840
azure rm

144
00:05:41,840 --> 00:05:44,560
the same hierarchy will apply

145
00:05:44,560 --> 00:05:46,240
so whatever you're doing the very top

146
00:05:46,240 --> 00:05:48,960
level object is called a tenant this is

147
00:05:48,960 --> 00:05:50,479
equivalent to

148
00:05:50,479 --> 00:05:53,440
an on-prem active directory domain head

149
00:05:53,440 --> 00:05:55,440
and so the tenant controls what is known

150
00:05:55,440 --> 00:05:58,160
as a trust boundary anything under the

151
00:05:58,160 --> 00:06:00,000
tenant anybody with control of that

152
00:06:00,000 --> 00:06:02,000
tenant has control of everything within

153
00:06:02,000 --> 00:06:03,600
that tenant

154
00:06:03,600 --> 00:06:05,440
directly under a tenant you have

155
00:06:05,440 --> 00:06:07,199
different object types you have app

156
00:06:07,199 --> 00:06:09,039
registration objects

157
00:06:09,039 --> 00:06:10,560
service principles

158
00:06:10,560 --> 00:06:13,680
devices which can be windows linux

159
00:06:13,680 --> 00:06:15,199
whatever

160
00:06:15,199 --> 00:06:18,560
security groups and users

161
00:06:18,560 --> 00:06:20,160
if you want to actually do any kind of

162
00:06:20,160 --> 00:06:22,400
compute with azure like you want to

163
00:06:22,400 --> 00:06:24,560
stand up a virtual machine or you want

164
00:06:24,560 --> 00:06:26,080
to have a key vault or something like

165
00:06:26,080 --> 00:06:28,960
that you have to start using azure rm or

166
00:06:28,960 --> 00:06:31,360
azure resource manager which is also

167
00:06:31,360 --> 00:06:34,560
something that people just call azure

168
00:06:34,560 --> 00:06:35,520
now

169
00:06:35,520 --> 00:06:38,560
that hierarchy

170
00:06:39,039 --> 00:06:40,720
can try this one

171
00:06:40,720 --> 00:06:43,120
okay hello all right how's that is that

172
00:06:43,120 --> 00:06:44,880
can you hear me in the back good okay

173
00:06:44,880 --> 00:06:46,080
great

174
00:06:46,080 --> 00:06:48,800
so if you are going to have compute

175
00:06:48,800 --> 00:06:51,360
resources uh managed under an azure

176
00:06:51,360 --> 00:06:52,240
tenant

177
00:06:52,240 --> 00:06:54,479
then that hari that hierarchy starts

178
00:06:54,479 --> 00:06:56,160
with what is called a route management

179
00:06:56,160 --> 00:06:57,199
group

180
00:06:57,199 --> 00:06:59,680
this is a management group and under

181
00:06:59,680 --> 00:07:01,840
that management group you can have one

182
00:07:01,840 --> 00:07:04,479
or more management groups

183
00:07:04,479 --> 00:07:06,080
under that management group you can have

184
00:07:06,080 --> 00:07:10,080
one or more management groups or none

185
00:07:10,080 --> 00:07:12,080
under a management group and that can

186
00:07:12,080 --> 00:07:13,199
nest

187
00:07:13,199 --> 00:07:15,199
i don't know forever maybe or maybe up

188
00:07:15,199 --> 00:07:18,639
to 255 nestings i don't know

189
00:07:18,639 --> 00:07:20,000
under a management group you have what

190
00:07:20,000 --> 00:07:23,039
is called a subscription

191
00:07:23,039 --> 00:07:25,120
under a subscription you have what are

192
00:07:25,120 --> 00:07:28,479
called resource groups

193
00:07:28,479 --> 00:07:30,319
and under resource groups you have the

194
00:07:30,319 --> 00:07:32,000
actual

195
00:07:32,000 --> 00:07:34,880
resources and so for example a virtual

196
00:07:34,880 --> 00:07:40,400
machine a key vault a database or a blob

197
00:07:42,840 --> 00:07:46,240
authentication can be done using either

198
00:07:46,240 --> 00:07:48,160
a service principle

199
00:07:48,160 --> 00:07:51,759
or a user the service principle is just

200
00:07:51,759 --> 00:07:53,280
as good as a user maybe actually even

201
00:07:53,280 --> 00:07:56,400
better than a user

202
00:07:56,479 --> 00:07:59,360
when you authenticate to a service in

203
00:07:59,360 --> 00:08:02,879
azure there is a token issuance uh step

204
00:08:02,879 --> 00:08:05,039
by step that happens

205
00:08:05,039 --> 00:08:06,639
so our principal there on the left that

206
00:08:06,639 --> 00:08:09,199
can be a user or a service principal

207
00:08:09,199 --> 00:08:12,240
will authenticate via the security token

208
00:08:12,240 --> 00:08:13,360
service

209
00:08:13,360 --> 00:08:16,960
to the service that it wants to act

210
00:08:16,960 --> 00:08:18,560
against

211
00:08:18,560 --> 00:08:21,120
uh and so for example this principle is

212
00:08:21,120 --> 00:08:23,440
authenticating against the azure ad

213
00:08:23,440 --> 00:08:24,840
directory

214
00:08:24,840 --> 00:08:26,960
service but as you're doing this

215
00:08:26,960 --> 00:08:29,039
authentication you can also specify an

216
00:08:29,039 --> 00:08:31,520
audience for the resultant token that

217
00:08:31,520 --> 00:08:33,200
you get which i'll show on the next

218
00:08:33,200 --> 00:08:35,120
slide

219
00:08:35,120 --> 00:08:37,839
and that token that you get back will

220
00:08:37,839 --> 00:08:40,799
specify in this example that

221
00:08:40,799 --> 00:08:43,839
we want to access something via the ms

222
00:08:43,839 --> 00:08:45,440
graph resource app

223
00:08:45,440 --> 00:08:47,120
whatever resource it is that you're

224
00:08:47,120 --> 00:08:49,279
accessing the principle because its

225
00:08:49,279 --> 00:08:52,160
identity is controlled by azure ad

226
00:08:52,160 --> 00:08:55,760
it will be authenticated by azure ad

227
00:08:55,760 --> 00:08:59,600
specifically by your tenant

228
00:08:59,760 --> 00:09:02,160
when you get a token back you get what's

229
00:09:02,160 --> 00:09:05,040
called a jwt or some people refer to

230
00:09:05,040 --> 00:09:06,800
this as a jot

231
00:09:06,800 --> 00:09:08,560
and some relevant things that are in the

232
00:09:08,560 --> 00:09:11,360
jot which is base64 but you can decode

233
00:09:11,360 --> 00:09:13,600
it very easily the audience there we

234
00:09:13,600 --> 00:09:16,720
have it the graph and roles just as a

235
00:09:16,720 --> 00:09:19,040
quick example it will list out what

236
00:09:19,040 --> 00:09:21,440
roles that principle has for that

237
00:09:21,440 --> 00:09:23,519
specific audience and in this example we

238
00:09:23,519 --> 00:09:23,920
have this

239
00:09:23,920 --> 00:09:26,240
approachassignment.readwrite.all

240
00:09:26,240 --> 00:09:29,760
and i'll explain what that means later

241
00:09:33,200 --> 00:09:35,760
so what about access control or

242
00:09:35,760 --> 00:09:37,600
authorization

243
00:09:37,600 --> 00:09:39,680
this is where things get extremely

244
00:09:39,680 --> 00:09:42,800
complex in azure

245
00:09:42,800 --> 00:09:46,399
so different objects at different scopes

246
00:09:46,399 --> 00:09:50,000
are controlled in different ways

247
00:09:50,000 --> 00:09:51,519
for example the objects that are

248
00:09:51,519 --> 00:09:53,279
directly under a tenant

249
00:09:53,279 --> 00:09:56,000
can be controlled by azure ad admin

250
00:09:56,000 --> 00:09:57,040
roles

251
00:09:57,040 --> 00:09:59,519
ms graph api permissions the legacy

252
00:09:59,519 --> 00:10:02,240
azure ad api permissions

253
00:10:02,240 --> 00:10:05,200
object scoped admin roles

254
00:10:05,200 --> 00:10:07,680
and the objects that are highlighted in

255
00:10:07,680 --> 00:10:11,279
blue can also have one or more or none

256
00:10:11,279 --> 00:10:14,480
explicit owners of their object

257
00:10:14,480 --> 00:10:16,560
so there are already five different

258
00:10:16,560 --> 00:10:18,800
distinct

259
00:10:18,800 --> 00:10:20,880
access control mechanisms just for this

260
00:10:20,880 --> 00:10:22,959
scope of objects here

261
00:10:22,959 --> 00:10:24,399
in azure rm

262
00:10:24,399 --> 00:10:27,360
you also have azure admin roles which

263
00:10:27,360 --> 00:10:30,160
are not azure ad admin roles

264
00:10:30,160 --> 00:10:33,760
are you confused yet i was

265
00:10:33,760 --> 00:10:37,519
uh for blobs there's also uh abac uh

266
00:10:37,519 --> 00:10:38,640
access

267
00:10:38,640 --> 00:10:39,440
i'm sorry

268
00:10:39,440 --> 00:10:42,240
attribute based access control

269
00:10:42,240 --> 00:10:44,480
and then certain objects like key vaults

270
00:10:44,480 --> 00:10:46,480
have their own permissions model

271
00:10:46,480 --> 00:10:49,040
specific to that object

272
00:10:49,040 --> 00:10:51,120
how much fun is that

273
00:10:51,120 --> 00:10:52,560
like if you're an admin and you're

274
00:10:52,560 --> 00:10:54,560
trying to determine who has control of

275
00:10:54,560 --> 00:10:56,560
any of these objects you have to have a

276
00:10:56,560 --> 00:10:58,480
perfect understanding of all these

277
00:10:58,480 --> 00:11:00,959
different access control mechanisms

278
00:11:00,959 --> 00:11:03,360
and of course there is no one click in

279
00:11:03,360 --> 00:11:05,600
azure to see the effective permissions

280
00:11:05,600 --> 00:11:07,440
against any of these objects that would

281
00:11:07,440 --> 00:11:09,680
make way too much sense

282
00:11:09,680 --> 00:11:10,959
[Music]

283
00:11:10,959 --> 00:11:12,800
additionally

284
00:11:12,800 --> 00:11:15,600
azure has the concept of permissions

285
00:11:15,600 --> 00:11:17,600
inheritance

286
00:11:17,600 --> 00:11:22,000
so if i describe a permission against my

287
00:11:22,000 --> 00:11:24,640
root management group for example

288
00:11:24,640 --> 00:11:27,760
that privilege will inherit down

289
00:11:27,760 --> 00:11:30,320
to every object under that root

290
00:11:30,320 --> 00:11:32,079
management group

291
00:11:32,079 --> 00:11:35,920
admins cannot change this behavior

292
00:11:36,079 --> 00:11:38,560
or if i sp if i set a permission at a

293
00:11:38,560 --> 00:11:41,120
subscription level that also will

294
00:11:41,120 --> 00:11:42,480
inherit down

295
00:11:42,480 --> 00:11:45,680
to all of those descendant objects

296
00:11:45,680 --> 00:11:47,839
the same is true at the tenant level if

297
00:11:47,839 --> 00:11:49,519
i specify a permission at the tenant

298
00:11:49,519 --> 00:11:51,920
level that will inherit down

299
00:11:51,920 --> 00:11:53,120
not only

300
00:11:53,120 --> 00:11:55,519
to all of the objects directly under the

301
00:11:55,519 --> 00:11:56,480
tenant

302
00:11:56,480 --> 00:11:58,720
but also all objects

303
00:11:58,720 --> 00:12:01,200
that have a trust relationship through a

304
00:12:01,200 --> 00:12:02,399
subscription

305
00:12:02,399 --> 00:12:05,200
to the tenant

306
00:12:05,360 --> 00:12:07,680
okay

307
00:12:08,720 --> 00:12:13,200
let's go through a case study of

308
00:12:13,200 --> 00:12:15,760
what my methodology was for

309
00:12:15,760 --> 00:12:17,279
discovering the abuse primitives that

310
00:12:17,279 --> 00:12:20,240
are possible through the ms graph api in

311
00:12:20,240 --> 00:12:22,399
particular

312
00:12:22,399 --> 00:12:24,320
i heard about the ms graph api from a

313
00:12:24,320 --> 00:12:26,160
co-worker daniel heinsohn

314
00:12:26,160 --> 00:12:28,639
also known as hotknops on twitter

315
00:12:28,639 --> 00:12:30,800
and basically he told me hey this looks

316
00:12:30,800 --> 00:12:32,399
like a pretty cool thing maybe there's

317
00:12:32,399 --> 00:12:33,519
something interesting in it why don't

318
00:12:33,519 --> 00:12:35,200
you take a look here's what i know about

319
00:12:35,200 --> 00:12:36,480
it so far

320
00:12:36,480 --> 00:12:38,160
and that was about it i didn't have any

321
00:12:38,160 --> 00:12:40,480
kind of administrative uh

322
00:12:40,480 --> 00:12:43,279
uh experience with ms graf so it's not

323
00:12:43,279 --> 00:12:45,120
as if i was an admin of it for two years

324
00:12:45,120 --> 00:12:47,440
and knew it very intimately

325
00:12:47,440 --> 00:12:50,639
uh but that's okay like you can do these

326
00:12:50,639 --> 00:12:53,120
abuse primitive researches against

327
00:12:53,120 --> 00:12:54,560
technologies that you don't have

328
00:12:54,560 --> 00:12:55,920
experience with

329
00:12:55,920 --> 00:12:57,920
and this is how i do it this is how i

330
00:12:57,920 --> 00:13:00,399
did it for ms graph

331
00:13:00,399 --> 00:13:03,360
at a high level i'll start with

332
00:13:03,360 --> 00:13:06,240
what the entire methodology is and then

333
00:13:06,240 --> 00:13:08,720
we'll dig into each step

334
00:13:08,720 --> 00:13:12,399
first i try to begin with the end in

335
00:13:12,399 --> 00:13:14,800
mind

336
00:13:14,800 --> 00:13:18,399
then study the intent and the design of

337
00:13:18,399 --> 00:13:21,040
the system

338
00:13:21,040 --> 00:13:24,240
explore the system using various means

339
00:13:24,240 --> 00:13:27,920
and from various perspectives

340
00:13:27,920 --> 00:13:30,079
catalog the actual abuse capabilities

341
00:13:30,079 --> 00:13:33,440
that are exposed by the system

342
00:13:33,440 --> 00:13:35,600
and then share findings and so these

343
00:13:35,600 --> 00:13:38,240
steps comprise my own abuse primitive

344
00:13:38,240 --> 00:13:40,000
research process

345
00:13:40,000 --> 00:13:42,720
and we will start by looking at the

346
00:13:42,720 --> 00:13:43,680
beginning

347
00:13:43,680 --> 00:13:46,720
uh which is to begin with the end in

348
00:13:46,720 --> 00:13:49,720
mind

349
00:13:53,839 --> 00:13:56,560
essentially in this step

350
00:13:56,560 --> 00:13:58,240
there are several things that i want to

351
00:13:58,240 --> 00:14:01,120
lay out to basically establish success

352
00:14:01,120 --> 00:14:03,120
criteria for myself

353
00:14:03,120 --> 00:14:05,600
that you know did i succeed in this

354
00:14:05,600 --> 00:14:08,399
abuse primitive research

355
00:14:08,399 --> 00:14:10,240
process or not

356
00:14:10,240 --> 00:14:11,839
and so i start by

357
00:14:11,839 --> 00:14:12,959
you know laying out what i want to

358
00:14:12,959 --> 00:14:15,040
understand i want to understand the

359
00:14:15,040 --> 00:14:16,800
fundamental mechanics of the system how

360
00:14:16,800 --> 00:14:18,880
it works behind the scenes

361
00:14:18,880 --> 00:14:20,800
i want to understand how it interacts

362
00:14:20,800 --> 00:14:22,720
with other existing systems that i

363
00:14:22,720 --> 00:14:24,639
already know about or discover new

364
00:14:24,639 --> 00:14:26,720
systems that it interacts with to have

365
00:14:26,720 --> 00:14:28,800
as future research

366
00:14:28,800 --> 00:14:30,480
and obviously i want to know how the

367
00:14:30,480 --> 00:14:33,120
system can be abused

368
00:14:33,120 --> 00:14:37,279
i want to produce a blog or a talk for

369
00:14:37,279 --> 00:14:39,920
others to be able to understand what i

370
00:14:39,920 --> 00:14:42,240
have learned so that others can build on

371
00:14:42,240 --> 00:14:44,560
top of that

372
00:14:44,560 --> 00:14:46,399
for defenders i want to be able to

373
00:14:46,399 --> 00:14:49,120
produce example audit code so that they

374
00:14:49,120 --> 00:14:50,320
can

375
00:14:50,320 --> 00:14:53,360
audit for these dangerous configurations

376
00:14:53,360 --> 00:14:55,360
themselves and i also want to produce

377
00:14:55,360 --> 00:14:57,839
example abuse code so that people can

378
00:14:57,839 --> 00:14:59,920
prove that these configurations actually

379
00:14:59,920 --> 00:15:02,800
are abusable easily

380
00:15:02,800 --> 00:15:04,320
i also want to produce practical

381
00:15:04,320 --> 00:15:06,639
remediation guidance especially for

382
00:15:06,639 --> 00:15:07,839
defenders

383
00:15:07,839 --> 00:15:09,440
so that if they find something in their

384
00:15:09,440 --> 00:15:11,920
audit they know what to do about it and

385
00:15:11,920 --> 00:15:14,079
it's something that is practical and

386
00:15:14,079 --> 00:15:17,120
doesn't require like a p5 license to do

387
00:15:17,120 --> 00:15:18,000
or

388
00:15:18,000 --> 00:15:19,360
just you know giving microsoft more

389
00:15:19,360 --> 00:15:21,680
money

390
00:15:22,079 --> 00:15:24,880
and because i'm a product architect for

391
00:15:24,880 --> 00:15:27,360
bloodhound enterprise and also for the

392
00:15:27,360 --> 00:15:29,279
free version of bloodhound

393
00:15:29,279 --> 00:15:32,000
for me i want to know what is the impact

394
00:15:32,000 --> 00:15:34,880
on my existing graph model going to be

395
00:15:34,880 --> 00:15:37,199
because i don't want the performance of

396
00:15:37,199 --> 00:15:40,720
my graph to degrade because i extended

397
00:15:40,720 --> 00:15:43,519
the design of the graph in a way that i

398
00:15:43,519 --> 00:15:45,360
didn't anticipate that kind of

399
00:15:45,360 --> 00:15:47,920
degradation for

400
00:15:47,920 --> 00:15:50,160
i want to know how to expand the graph

401
00:15:50,160 --> 00:15:51,839
model

402
00:15:51,839 --> 00:15:53,920
and i want to know what data do i need

403
00:15:53,920 --> 00:15:55,199
to collect

404
00:15:55,199 --> 00:15:57,199
how do i collect it where are those

405
00:15:57,199 --> 00:16:00,079
objects and then how do i ingest that

406
00:16:00,079 --> 00:16:03,680
into the bloodhound database

407
00:16:04,320 --> 00:16:06,480
so the end result of that very basic

408
00:16:06,480 --> 00:16:09,519
first step which is basic but critical

409
00:16:09,519 --> 00:16:11,440
is that i've established success

410
00:16:11,440 --> 00:16:13,839
criteria for this research

411
00:16:13,839 --> 00:16:15,519
this is more important than it might

412
00:16:15,519 --> 00:16:18,800
sound because if you dive into abuse

413
00:16:18,800 --> 00:16:21,519
primitive research without this kind of

414
00:16:21,519 --> 00:16:24,880
in goal in mind uh that's for me at

415
00:16:24,880 --> 00:16:27,199
least a way to rabbit hole into several

416
00:16:27,199 --> 00:16:29,040
different things get distracted lose

417
00:16:29,040 --> 00:16:32,000
focus and basically produce nothing of

418
00:16:32,000 --> 00:16:34,399
value

419
00:16:34,399 --> 00:16:37,040
the next step for me is to study the

420
00:16:37,040 --> 00:16:40,720
intent the design and the usage of the

421
00:16:40,720 --> 00:16:43,440
system i don't have

422
00:16:43,440 --> 00:16:45,839
first-person administrative experience

423
00:16:45,839 --> 00:16:48,560
with this system but i can glean that

424
00:16:48,560 --> 00:16:51,120
experience from others who are involved

425
00:16:51,120 --> 00:16:52,800
in the architecture and design of the

426
00:16:52,800 --> 00:16:53,759
system

427
00:16:53,759 --> 00:16:55,519
and also the people who administer the

428
00:16:55,519 --> 00:16:57,920
system as well

429
00:16:57,920 --> 00:17:00,480
there are a few different resources for

430
00:17:00,480 --> 00:17:02,959
doing this i always start with the

431
00:17:02,959 --> 00:17:05,439
official documentation both technical

432
00:17:05,439 --> 00:17:08,319
and non-technical what does that mean it

433
00:17:08,319 --> 00:17:11,918
means a lot of this

434
00:17:12,640 --> 00:17:14,319
and so in

435
00:17:14,319 --> 00:17:16,480
after my conversation with my colleague

436
00:17:16,480 --> 00:17:18,319
literally my first google search would

437
00:17:18,319 --> 00:17:21,280
have been microsoft ms graph what is

438
00:17:21,280 --> 00:17:23,039
that i don't know

439
00:17:23,039 --> 00:17:23,760
so

440
00:17:23,760 --> 00:17:26,559
you google that you'll find the

441
00:17:26,559 --> 00:17:29,440
microsoft documentation for microsoft

442
00:17:29,440 --> 00:17:30,400
graph

443
00:17:30,400 --> 00:17:31,679
and

444
00:17:31,679 --> 00:17:33,760
this documentation is not written for

445
00:17:33,760 --> 00:17:35,039
somebody who's trying to figure out how

446
00:17:35,039 --> 00:17:37,360
to abuse the system obviously

447
00:17:37,360 --> 00:17:39,600
it is written for

448
00:17:39,600 --> 00:17:41,440
somebody who's more of an admin or maybe

449
00:17:41,440 --> 00:17:42,720
somebody who's a decision maker and

450
00:17:42,720 --> 00:17:44,960
they're trying to decide between aws and

451
00:17:44,960 --> 00:17:47,120
azure it depends the documentation of

452
00:17:47,120 --> 00:17:50,399
microsoft is all over the place

453
00:17:50,480 --> 00:17:52,160
so one of the interesting things on

454
00:17:52,160 --> 00:17:54,480
their documentation is what can you do

455
00:17:54,480 --> 00:17:56,400
with microsoft graph

456
00:17:56,400 --> 00:17:58,160
and going through this eventually you'll

457
00:17:58,160 --> 00:18:00,080
find that there's a use case they

458
00:18:00,080 --> 00:18:02,799
describe for a help desk person being

459
00:18:02,799 --> 00:18:05,360
able to reset somebody else's password

460
00:18:05,360 --> 00:18:07,200
okay that's kind of interesting from an

461
00:18:07,200 --> 00:18:08,880
abuse perspective

462
00:18:08,880 --> 00:18:11,440
so let me google that ms graph reset

463
00:18:11,440 --> 00:18:12,840
user

464
00:18:12,840 --> 00:18:16,480
password and i'll find this

465
00:18:16,480 --> 00:18:19,360
so there is a method in the microsoft

466
00:18:19,360 --> 00:18:21,760
graph rest api called

467
00:18:21,760 --> 00:18:23,919
password authentication method reset

468
00:18:23,919 --> 00:18:25,919
password

469
00:18:25,919 --> 00:18:28,640
what's more interesting on this page is

470
00:18:28,640 --> 00:18:30,640
if you scroll down

471
00:18:30,640 --> 00:18:32,960
it starts to describe the permissions

472
00:18:32,960 --> 00:18:36,320
that are required in order to do this

473
00:18:36,320 --> 00:18:37,120
so

474
00:18:37,120 --> 00:18:39,120
if microsoft graph is going to allow you

475
00:18:39,120 --> 00:18:41,200
or not to reset someone's password it

476
00:18:41,200 --> 00:18:42,960
does this assessment of the privileges

477
00:18:42,960 --> 00:18:44,559
that you hold

478
00:18:44,559 --> 00:18:46,320
so now i can start to understand that

479
00:18:46,320 --> 00:18:49,280
there is a distinct permissions model

480
00:18:49,280 --> 00:18:52,480
distinct from the azure ad admin roles

481
00:18:52,480 --> 00:18:54,880
that i need to understand

482
00:18:54,880 --> 00:18:57,200
and so back to google

483
00:18:57,200 --> 00:18:59,760
ms graf permissions

484
00:18:59,760 --> 00:19:01,520
and you have a nice

485
00:19:01,520 --> 00:19:04,080
permissions reference page

486
00:19:04,080 --> 00:19:07,360
on the official microsoft site

487
00:19:07,360 --> 00:19:08,160
what

488
00:19:08,160 --> 00:19:11,360
this documentation covers

489
00:19:11,360 --> 00:19:13,280
is basically the names of the

490
00:19:13,280 --> 00:19:15,600
permissions and then a very basic human

491
00:19:15,600 --> 00:19:17,039
readable explanation of what that

492
00:19:17,039 --> 00:19:19,120
permission is

493
00:19:19,120 --> 00:19:20,880
but

494
00:19:20,880 --> 00:19:22,480
they don't tell you how the permission

495
00:19:22,480 --> 00:19:25,679
model works behind the scenes

496
00:19:25,679 --> 00:19:26,799
so

497
00:19:26,799 --> 00:19:29,200
we'll talk about that later

498
00:19:29,200 --> 00:19:30,960
so maybe my initial notes at this point

499
00:19:30,960 --> 00:19:33,600
might be something like this ms graph is

500
00:19:33,600 --> 00:19:36,080
some kind of azure related service

501
00:19:36,080 --> 00:19:39,440
it exposes a rest api

502
00:19:39,440 --> 00:19:40,880
it can let you reset someone else's

503
00:19:40,880 --> 00:19:42,240
password if you have the correct

504
00:19:42,240 --> 00:19:43,679
permissions

505
00:19:43,679 --> 00:19:45,200
and it seems like it has a distinct

506
00:19:45,200 --> 00:19:47,120
permission system from azure id and

507
00:19:47,120 --> 00:19:48,640
azure rm

508
00:19:48,640 --> 00:19:52,720
okay so some decent initial notes

509
00:19:52,720 --> 00:19:55,679
next though i need to get that kind of

510
00:19:55,679 --> 00:19:58,160
uh second hand perspective from people

511
00:19:58,160 --> 00:19:59,440
who have been working with the system

512
00:19:59,440 --> 00:20:01,200
for a long time

513
00:20:01,200 --> 00:20:04,480
and try to make their experience my own

514
00:20:04,480 --> 00:20:07,919
as best i can so through those people i

515
00:20:07,919 --> 00:20:09,039
will find

516
00:20:09,039 --> 00:20:13,120
code repositories blogs and talks that

517
00:20:13,120 --> 00:20:16,879
other people have done on this topic

518
00:20:19,039 --> 00:20:21,360
one of the most reliable

519
00:20:21,360 --> 00:20:23,760
uh methods for me

520
00:20:23,760 --> 00:20:26,159
is to look at the people at microsoft

521
00:20:26,159 --> 00:20:29,120
who are responsible for this system

522
00:20:29,120 --> 00:20:31,120
so if i look for

523
00:20:31,120 --> 00:20:33,360
an architect for microsoft graph on

524
00:20:33,360 --> 00:20:34,720
linkedin

525
00:20:34,720 --> 00:20:36,000
there's actually

526
00:20:36,000 --> 00:20:38,159
maybe more results than you would expect

527
00:20:38,159 --> 00:20:40,080
uh and you can start to look through

528
00:20:40,080 --> 00:20:42,559
these people's profiles you can find

529
00:20:42,559 --> 00:20:45,039
their twitter profiles

530
00:20:45,039 --> 00:20:47,280
this is very similar to just doing like

531
00:20:47,280 --> 00:20:49,840
basic open source intelligence gathering

532
00:20:49,840 --> 00:20:50,720
is

533
00:20:50,720 --> 00:20:52,480
but instead of finding a

534
00:20:52,480 --> 00:20:54,000
person to attack you're fight you're

535
00:20:54,000 --> 00:20:57,280
trying to find a person to learn from

536
00:20:57,280 --> 00:20:59,840
helpful person here is daryl miller

537
00:20:59,840 --> 00:21:01,919
so he's actually the api architect for

538
00:21:01,919 --> 00:21:03,840
microsoft graph

539
00:21:03,840 --> 00:21:05,120
and

540
00:21:05,120 --> 00:21:07,360
just scrolling through

541
00:21:07,360 --> 00:21:09,120
his twitter feed

542
00:21:09,120 --> 00:21:11,600
very very quickly you can find

543
00:21:11,600 --> 00:21:14,000
good resources that he has retweeted or

544
00:21:14,000 --> 00:21:16,320
that he has written himself

545
00:21:16,320 --> 00:21:17,840
and so

546
00:21:17,840 --> 00:21:20,240
this is a great example of a powershell

547
00:21:20,240 --> 00:21:22,640
deep dive into the graph api i

548
00:21:22,640 --> 00:21:25,760
personally love using powershell so for

549
00:21:25,760 --> 00:21:27,520
me this is very relevant to try to

550
00:21:27,520 --> 00:21:28,799
understand

551
00:21:28,799 --> 00:21:31,039
how do i interface with the system

552
00:21:31,039 --> 00:21:34,400
uh how do i communicate with the system

553
00:21:34,400 --> 00:21:36,559
and then additionally there's like great

554
00:21:36,559 --> 00:21:38,400
write-ups you can find like this

555
00:21:38,400 --> 00:21:40,720
30 days of microsoft graph blog series

556
00:21:40,720 --> 00:21:42,720
that goes into all kinds of very

557
00:21:42,720 --> 00:21:45,360
technical things

558
00:21:45,360 --> 00:21:47,520
and then i'll also look at talks and

559
00:21:47,520 --> 00:21:49,280
spend

560
00:21:49,280 --> 00:21:50,640
maybe 12

561
00:21:50,640 --> 00:21:54,080
to 24 hours just watching talks

562
00:21:54,080 --> 00:21:55,760
talks are very good usually people are a

563
00:21:55,760 --> 00:21:57,440
little bit looser than they are in

564
00:21:57,440 --> 00:21:59,600
writing and they usually give up some

565
00:21:59,600 --> 00:22:01,039
more detail than they typically would

566
00:22:01,039 --> 00:22:03,120
otherwise so you can find really good

567
00:22:03,120 --> 00:22:04,880
nuggets watching people's talks on this

568
00:22:04,880 --> 00:22:07,280
topic

569
00:22:07,600 --> 00:22:08,720
finally

570
00:22:08,720 --> 00:22:11,840
i'll look for community resources

571
00:22:11,840 --> 00:22:14,640
this is extremely helpful

572
00:22:14,640 --> 00:22:15,840
because

573
00:22:15,840 --> 00:22:19,600
while the microsoft people are a little

574
00:22:19,600 --> 00:22:22,799
more cagey about some of the bad details

575
00:22:22,799 --> 00:22:23,760
about

576
00:22:23,760 --> 00:22:25,360
any of their products

577
00:22:25,360 --> 00:22:26,720
the community

578
00:22:26,720 --> 00:22:29,840
is very very open and very loud about

579
00:22:29,840 --> 00:22:31,280
those issues

580
00:22:31,280 --> 00:22:33,440
and finding those issues means that you

581
00:22:33,440 --> 00:22:35,520
can find

582
00:22:35,520 --> 00:22:38,799
bugs and you can find abuses

583
00:22:38,799 --> 00:22:39,679
so

584
00:22:39,679 --> 00:22:42,080
a really good example is on the

585
00:22:42,080 --> 00:22:46,000
powershell sdk github repo

586
00:22:46,000 --> 00:22:47,919
there are hundreds and hundreds and

587
00:22:47,919 --> 00:22:50,159
hundreds of issues uh both open and

588
00:22:50,159 --> 00:22:52,840
closed where you can find all kinds of

589
00:22:52,840 --> 00:22:54,960
conversations and this is where you can

590
00:22:54,960 --> 00:22:57,679
just easily find something like

591
00:22:57,679 --> 00:23:00,480
well this interface doesn't support mfa

592
00:23:00,480 --> 00:23:03,039
okay that's very interesting

593
00:23:03,039 --> 00:23:04,080
or

594
00:23:04,080 --> 00:23:05,360
this

595
00:23:05,360 --> 00:23:08,080
permission which says it needs a human

596
00:23:08,080 --> 00:23:09,760
to approve

597
00:23:09,760 --> 00:23:12,720
uh actually it doesn't so that's also

598
00:23:12,720 --> 00:23:14,559
very interesting for

599
00:23:14,559 --> 00:23:16,799
a red teamer or somebody trying to abuse

600
00:23:16,799 --> 00:23:18,480
this system

601
00:23:18,480 --> 00:23:20,320
after going through all this my abuse

602
00:23:20,320 --> 00:23:23,600
notes or my initial notes look like this

603
00:23:23,600 --> 00:23:24,960
and then my updated notes might look

604
00:23:24,960 --> 00:23:26,159
something like this

605
00:23:26,159 --> 00:23:28,000
microsoft graph microsoft is investing

606
00:23:28,000 --> 00:23:30,640
into ms graph as a sort of api for apis

607
00:23:30,640 --> 00:23:32,400
a unifying endpoint that may eventually

608
00:23:32,400 --> 00:23:34,000
allow for indirectly interacting with

609
00:23:34,000 --> 00:23:35,600
any object in any service just by

610
00:23:35,600 --> 00:23:38,080
interfacing with ms graph so that kind

611
00:23:38,080 --> 00:23:40,159
of consolidation strategy from microsoft

612
00:23:40,159 --> 00:23:42,880
to me means that it is worth investing

613
00:23:42,880 --> 00:23:46,320
time into learning this system

614
00:23:46,320 --> 00:23:48,480
ms graf's rest api is instantiated into

615
00:23:48,480 --> 00:23:50,799
every azure tenant as a resource app aka

616
00:23:50,799 --> 00:23:53,600
enterprise app aka service principle aka

617
00:23:53,600 --> 00:23:55,440
first party app there's a lot of very

618
00:23:55,440 --> 00:23:57,840
confusing language a lot of like these

619
00:23:57,840 --> 00:23:59,760
different phrases mean the exact same

620
00:23:59,760 --> 00:24:00,640
thing

621
00:24:00,640 --> 00:24:01,360
but

622
00:24:01,360 --> 00:24:02,559
this

623
00:24:02,559 --> 00:24:04,720
fact that the ms graph is available in

624
00:24:04,720 --> 00:24:07,520
every tenant means that it is ubiquitous

625
00:24:07,520 --> 00:24:09,200
so no matter what organization i'm

626
00:24:09,200 --> 00:24:12,240
trying to target if they use azure they

627
00:24:12,240 --> 00:24:15,679
use ms graph and so that ubiquity means

628
00:24:15,679 --> 00:24:17,679
that i can apply the same tradecraft

629
00:24:17,679 --> 00:24:22,159
that i learn here to anywhere

630
00:24:22,559 --> 00:24:24,240
ms graph brokers request a particular

631
00:24:24,240 --> 00:24:25,840
azure services including privileged

632
00:24:25,840 --> 00:24:27,520
action requests like resetting passwords

633
00:24:27,520 --> 00:24:29,760
or adding users to security groups okay

634
00:24:29,760 --> 00:24:31,440
great

635
00:24:31,440 --> 00:24:34,080
so at the end of that phase the basic

636
00:24:34,080 --> 00:24:36,320
success criteria for that phase is to

637
00:24:36,320 --> 00:24:39,919
have built some foundational

638
00:24:39,919 --> 00:24:41,760
academic knowledge i haven't done

639
00:24:41,760 --> 00:24:43,679
anything practical at this point of just

640
00:24:43,679 --> 00:24:44,799
basically

641
00:24:44,799 --> 00:24:47,520
reading and listening and looking at

642
00:24:47,520 --> 00:24:49,200
talks and just taking everything in that

643
00:24:49,200 --> 00:24:50,240
i can

644
00:24:50,240 --> 00:24:52,640
to have this very academic high level

645
00:24:52,640 --> 00:24:54,559
knowledge

646
00:24:54,559 --> 00:24:56,640
which of course brings us to the next

647
00:24:56,640 --> 00:24:58,880
step which is to start actually

648
00:24:58,880 --> 00:25:00,799
interacting with the system

649
00:25:00,799 --> 00:25:04,000
and start exploring it in various ways

650
00:25:04,000 --> 00:25:06,320
i think it's actually very important to

651
00:25:06,320 --> 00:25:08,960
have built an academic knowledge base

652
00:25:08,960 --> 00:25:11,760
before going into the technical details

653
00:25:11,760 --> 00:25:13,039
of a system

654
00:25:13,039 --> 00:25:16,400
because without that context of the

655
00:25:16,400 --> 00:25:18,400
intent and the design and the usage of

656
00:25:18,400 --> 00:25:19,520
the system

657
00:25:19,520 --> 00:25:21,760
you're basically just spelunking into a

658
00:25:21,760 --> 00:25:23,679
cave of

659
00:25:23,679 --> 00:25:26,320
a technical system that you don't

660
00:25:26,320 --> 00:25:28,640
really know why it exists

661
00:25:28,640 --> 00:25:31,679
and so for me that's a way to just waste

662
00:25:31,679 --> 00:25:34,320
a lot of time

663
00:25:35,120 --> 00:25:38,400
to that end you must go beyond the

664
00:25:38,400 --> 00:25:40,240
documentation

665
00:25:40,240 --> 00:25:43,360
in particular with uh let's say cloud

666
00:25:43,360 --> 00:25:45,760
products

667
00:25:47,120 --> 00:25:50,159
these systems they are interconnected

668
00:25:50,159 --> 00:25:51,760
and they behave

669
00:25:51,760 --> 00:25:56,960
in undocumented and non-public ways

670
00:25:56,960 --> 00:25:59,200
the documentation if you have ever read

671
00:25:59,200 --> 00:26:00,960
the microsoft documentation you know

672
00:26:00,960 --> 00:26:03,279
this is true that often it doesn't keep

673
00:26:03,279 --> 00:26:04,960
up with changes to the system and it

674
00:26:04,960 --> 00:26:08,240
quickly goes out of date

675
00:26:08,240 --> 00:26:10,320
if you make tooling based only on

676
00:26:10,320 --> 00:26:12,880
documentation i can almost guarantee you

677
00:26:12,880 --> 00:26:14,960
that it will be on inaccurate and

678
00:26:14,960 --> 00:26:17,679
unreliable

679
00:26:18,240 --> 00:26:21,120
so what do we do in this phase

680
00:26:21,120 --> 00:26:23,120
for me the easiest way to start

681
00:26:23,120 --> 00:26:26,080
exploring a system is to use the easiest

682
00:26:26,080 --> 00:26:28,960
administrative interface for that system

683
00:26:28,960 --> 00:26:31,440
for the ms graph api that means using

684
00:26:31,440 --> 00:26:35,200
the azure portal gui

685
00:26:35,200 --> 00:26:36,880
so i'm not going to go into too much

686
00:26:36,880 --> 00:26:38,400
detail about

687
00:26:38,400 --> 00:26:40,640
how that works in the gui

688
00:26:40,640 --> 00:26:41,760
but

689
00:26:41,760 --> 00:26:44,400
one thing that is extremely useful

690
00:26:44,400 --> 00:26:46,880
when you are using the azure portal and

691
00:26:46,880 --> 00:26:47,760
if you're

692
00:26:47,760 --> 00:26:49,039
if you're going to get into azure

693
00:26:49,039 --> 00:26:50,960
research this is something that you'll

694
00:26:50,960 --> 00:26:52,960
want to know

695
00:26:52,960 --> 00:26:54,559
uh this is the chrome browser that i'm

696
00:26:54,559 --> 00:26:56,799
looking at the azure portal gui with and

697
00:26:56,799 --> 00:26:58,720
if you bring up the developer tools you

698
00:26:58,720 --> 00:27:01,360
can see all of the different requests

699
00:27:01,360 --> 00:27:04,080
that the browser is making to that api

700
00:27:04,080 --> 00:27:07,200
the azure portal gui

701
00:27:07,200 --> 00:27:09,440
is actually primarily api driven there

702
00:27:09,440 --> 00:27:13,039
there are some services that use like

703
00:27:13,039 --> 00:27:15,279
the javascript modules that are loaded

704
00:27:15,279 --> 00:27:16,080
to

705
00:27:16,080 --> 00:27:18,399
interface with services but for the most

706
00:27:18,399 --> 00:27:19,679
part

707
00:27:19,679 --> 00:27:20,960
the

708
00:27:20,960 --> 00:27:23,039
things that you click in the gui they

709
00:27:23,039 --> 00:27:25,600
are doing an api request through the

710
00:27:25,600 --> 00:27:26,880
browser

711
00:27:26,880 --> 00:27:28,880
so you can see here

712
00:27:28,880 --> 00:27:31,360
what did i click i clicked on

713
00:27:31,360 --> 00:27:33,679
getting my user object here

714
00:27:33,679 --> 00:27:35,440
and so in the developer tools you can

715
00:27:35,440 --> 00:27:37,880
see that there is a get request to

716
00:27:37,880 --> 00:27:41,679
graph.microsoft.com v10 users slash my

717
00:27:41,679 --> 00:27:44,320
user id

718
00:27:44,399 --> 00:27:47,360
what is very useful here is not only can

719
00:27:47,360 --> 00:27:49,279
you see the uri that is handling the

720
00:27:49,279 --> 00:27:51,360
request and you can see the response in

721
00:27:51,360 --> 00:27:53,039
json format

722
00:27:53,039 --> 00:27:56,320
but you can very easily get free

723
00:27:56,320 --> 00:27:59,600
api interaction code from the browser by

724
00:27:59,600 --> 00:28:01,360
right clicking on the request

725
00:28:01,360 --> 00:28:04,799
go to copy copy as powershell

726
00:28:04,799 --> 00:28:08,320
paste that into something and you have

727
00:28:08,320 --> 00:28:12,159
a pretty decent minimal client for

728
00:28:12,159 --> 00:28:15,679
interfacing with the ms graph api

729
00:28:15,679 --> 00:28:16,799
you do have to make a change of this you

730
00:28:16,799 --> 00:28:18,080
have to get rid of that referrer line at

731
00:28:18,080 --> 00:28:19,679
the bottom or else it won't it won't do

732
00:28:19,679 --> 00:28:22,159
the request otherwise you've got

733
00:28:22,159 --> 00:28:24,960
everything you need to start a very very

734
00:28:24,960 --> 00:28:27,279
basic client

735
00:28:27,279 --> 00:28:29,520
we can copy and paste that into

736
00:28:29,520 --> 00:28:30,880
powershell

737
00:28:30,880 --> 00:28:33,200
and the request there is at the bottom

738
00:28:33,200 --> 00:28:36,080
status code 200 okay and then we have

739
00:28:36,080 --> 00:28:37,039
the

740
00:28:37,039 --> 00:28:39,440
uh the raw object that represents the

741
00:28:39,440 --> 00:28:41,120
user and you can see that it's json

742
00:28:41,120 --> 00:28:43,520
formatted obviously this is good for us

743
00:28:43,520 --> 00:28:45,279
because programmatically it's very easy

744
00:28:45,279 --> 00:28:49,360
to manipulate and work with json objects

745
00:28:49,360 --> 00:28:51,919
what i also like to do is look at the ms

746
00:28:51,919 --> 00:28:54,880
authored cli tools

747
00:28:54,880 --> 00:28:55,840
so

748
00:28:55,840 --> 00:28:58,000
for azure in particular this can mean

749
00:28:58,000 --> 00:29:00,159
the az binary

750
00:29:00,159 --> 00:29:03,679
the azure ad powershell module and the

751
00:29:03,679 --> 00:29:05,120
az

752
00:29:05,120 --> 00:29:08,240
powershell module

753
00:29:08,240 --> 00:29:10,559
when you import these modules in

754
00:29:10,559 --> 00:29:12,240
powershell are there any powershell

755
00:29:12,240 --> 00:29:13,360
users

756
00:29:13,360 --> 00:29:15,520
here

757
00:29:15,520 --> 00:29:18,960
not as many as i thought okay so

758
00:29:18,960 --> 00:29:21,440
yeah i love powershell i can't say

759
00:29:21,440 --> 00:29:23,760
enough good things about it uh obviously

760
00:29:23,760 --> 00:29:26,080
because azure is api driven you can use

761
00:29:26,080 --> 00:29:27,840
whatever you want

762
00:29:27,840 --> 00:29:29,600
so you could use curl if you would like

763
00:29:29,600 --> 00:29:31,840
or just use bash in general

764
00:29:31,840 --> 00:29:33,679
but uh i love powershell i'm a

765
00:29:33,679 --> 00:29:35,600
powershell fanboy

766
00:29:35,600 --> 00:29:39,039
when you import a powershell module

767
00:29:39,039 --> 00:29:41,760
like this like import module azure ad

768
00:29:41,760 --> 00:29:43,279
you can do a very simple command to see

769
00:29:43,279 --> 00:29:45,760
what are all the available commandlets

770
00:29:45,760 --> 00:29:48,720
uh in powershell uh for that particular

771
00:29:48,720 --> 00:29:49,840
module

772
00:29:49,840 --> 00:29:51,840
so in this example if i import that

773
00:29:51,840 --> 00:29:53,760
module and then get the commands that

774
00:29:53,760 --> 00:29:55,840
are exposed by that module

775
00:29:55,840 --> 00:29:57,919
i've got all these different

776
00:29:57,919 --> 00:29:59,840
commandlets and this goes on and on and

777
00:29:59,840 --> 00:30:01,360
on and on and on

778
00:30:01,360 --> 00:30:05,120
and i say this because

779
00:30:05,120 --> 00:30:07,360
just reading the commandlet names you

780
00:30:07,360 --> 00:30:10,640
can get an idea of what is possible

781
00:30:10,640 --> 00:30:11,600
uh

782
00:30:11,600 --> 00:30:13,520
beyond the documentation

783
00:30:13,520 --> 00:30:15,440
uh and then the powershell command let's

784
00:30:15,440 --> 00:30:18,559
powershell is self-documenting so if you

785
00:30:18,559 --> 00:30:20,399
like look at the equivalent of a man

786
00:30:20,399 --> 00:30:22,880
page for a powershell commandlet it will

787
00:30:22,880 --> 00:30:25,520
often include examples although some of

788
00:30:25,520 --> 00:30:26,960
the microsoft author once don't include

789
00:30:26,960 --> 00:30:28,159
examples

790
00:30:28,159 --> 00:30:29,600
but they'll show you how to use the

791
00:30:29,600 --> 00:30:31,360
commandlet what the expected output is

792
00:30:31,360 --> 00:30:34,918
and things like that

793
00:30:36,159 --> 00:30:38,000
the existing microsoft authored

794
00:30:38,000 --> 00:30:40,480
powershell modules are what i initially

795
00:30:40,480 --> 00:30:43,520
used to create uh something called azure

796
00:30:43,520 --> 00:30:45,679
hound uh which is a data collection

797
00:30:45,679 --> 00:30:47,919
capability that feeds the azure data

798
00:30:47,919 --> 00:30:51,679
into a bloodhound database

799
00:30:51,679 --> 00:30:54,640
uh and then finally with exploring this

800
00:30:54,640 --> 00:30:57,519
system from different perspectives uh we

801
00:30:57,519 --> 00:31:00,000
can create our own very basic client

802
00:31:00,000 --> 00:31:02,880
so we did that already with uh chrome

803
00:31:02,880 --> 00:31:04,720
where like we can copy copy as

804
00:31:04,720 --> 00:31:08,159
powershell paste uh but it's better to

805
00:31:08,159 --> 00:31:09,840
have control of your own very basic

806
00:31:09,840 --> 00:31:12,159
client and uh for powershell in

807
00:31:12,159 --> 00:31:14,480
particular to be able to create modules

808
00:31:14,480 --> 00:31:15,519
for

809
00:31:15,519 --> 00:31:16,840
whatever you want to

810
00:31:16,840 --> 00:31:21,120
do here's an example of the most basic

811
00:31:21,120 --> 00:31:24,080
ms graph api client that i can conceive

812
00:31:24,080 --> 00:31:25,120
of

813
00:31:25,120 --> 00:31:29,279
so at the top we are accessing the

814
00:31:29,279 --> 00:31:32,880
sts service the security token service

815
00:31:32,880 --> 00:31:35,519
to get a token

816
00:31:35,519 --> 00:31:37,600
for ms graf

817
00:31:37,600 --> 00:31:39,840
for this client

818
00:31:39,840 --> 00:31:42,960
which is a service principal in azure

819
00:31:42,960 --> 00:31:45,519
and we're assigning the variable that we

820
00:31:45,519 --> 00:31:49,039
get back to the dollar token variable

821
00:31:49,039 --> 00:31:50,720
the yellow highlight there that is where

822
00:31:50,720 --> 00:31:53,440
we are accessing the api very easy so

823
00:31:53,440 --> 00:31:55,679
with powershell you have a method or a

824
00:31:55,679 --> 00:31:58,080
command called invoke rest method

825
00:31:58,080 --> 00:32:00,399
which will put the output of that

826
00:32:00,399 --> 00:32:02,159
optionally into a variable that you

827
00:32:02,159 --> 00:32:03,440
describe

828
00:32:03,440 --> 00:32:06,080
so i'm i'm putting the output of that

829
00:32:06,080 --> 00:32:08,080
into dollar users

830
00:32:08,080 --> 00:32:10,559
and then you can work with the data that

831
00:32:10,559 --> 00:32:12,399
comes back so

832
00:32:12,399 --> 00:32:15,679
uh users users.value will show the raw

833
00:32:15,679 --> 00:32:18,000
information that came back

834
00:32:18,000 --> 00:32:19,440
and it looks

835
00:32:19,440 --> 00:32:21,279
something like that

836
00:32:21,279 --> 00:32:23,200
uh so these are

837
00:32:23,200 --> 00:32:26,960
json objects but powershell will convert

838
00:32:26,960 --> 00:32:29,360
them to a ps custom object or serialize

839
00:32:29,360 --> 00:32:31,840
it as a powershell object but you can

840
00:32:31,840 --> 00:32:33,440
you can translate back and forth between

841
00:32:33,440 --> 00:32:37,200
powershell object and json very easily

842
00:32:37,600 --> 00:32:40,080
when you start doing this you will start

843
00:32:40,080 --> 00:32:43,039
to run into issues obviously so

844
00:32:43,039 --> 00:32:46,080
one issue is that this user's endpoint

845
00:32:46,080 --> 00:32:48,080
and many of the azure ad

846
00:32:48,080 --> 00:32:49,760
scoped endpoints

847
00:32:49,760 --> 00:32:52,320
they will only return the first 100

848
00:32:52,320 --> 00:32:54,480
objects that come back

849
00:32:54,480 --> 00:32:56,720
so you have to go through a loop

850
00:32:56,720 --> 00:32:58,240
to uh

851
00:32:58,240 --> 00:33:00,640
you know page through the results and so

852
00:33:00,640 --> 00:33:03,519
that looks like this

853
00:33:04,480 --> 00:33:08,480
there are some gotchas with jwts

854
00:33:08,480 --> 00:33:11,360
so jwts they facilitate stateless

855
00:33:11,360 --> 00:33:13,360
authentication so that azure doesn't

856
00:33:13,360 --> 00:33:15,200
have to keep track of your state like it

857
00:33:15,200 --> 00:33:16,799
does with a cookie

858
00:33:16,799 --> 00:33:19,360
and it partly facilitates stateless

859
00:33:19,360 --> 00:33:21,919
authorization

860
00:33:21,919 --> 00:33:24,399
but not all of that authorization

861
00:33:24,399 --> 00:33:28,880
uh information is stored in the jwt

862
00:33:28,880 --> 00:33:30,720
the azure ad roles and the ms graph

863
00:33:30,720 --> 00:33:33,760
roles are stored in the jwts

864
00:33:33,760 --> 00:33:35,519
but if you have azure rm role

865
00:33:35,519 --> 00:33:37,440
assignments or if you have explicit

866
00:33:37,440 --> 00:33:38,240
object

867
00:33:38,240 --> 00:33:39,279
ownership

868
00:33:39,279 --> 00:33:40,799
or if you have key vault permissions or

869
00:33:40,799 --> 00:33:43,200
whatever that information is not stored

870
00:33:43,200 --> 00:33:45,120
in the jwt

871
00:33:45,120 --> 00:33:47,200
so the tldr is that you probably

872
00:33:47,200 --> 00:33:48,720
actually have more permissions than what

873
00:33:48,720 --> 00:33:52,600
the jwt describes

874
00:34:00,559 --> 00:34:04,120
what are we doing here

875
00:34:06,480 --> 00:34:08,159
so in this example what i want to show

876
00:34:08,159 --> 00:34:11,760
you is that we are assigning our jwt to

877
00:34:11,760 --> 00:34:14,159
the dollar token variable and then on

878
00:34:14,159 --> 00:34:16,079
line 20 right there we are printing out

879
00:34:16,079 --> 00:34:19,679
the actual base64 encoded access token

880
00:34:19,679 --> 00:34:21,280
we run that in powershell it looks like

881
00:34:21,280 --> 00:34:22,399
this

882
00:34:22,399 --> 00:34:23,918
there's a handy service you can use

883
00:34:23,918 --> 00:34:25,918
called jwt.ms

884
00:34:25,918 --> 00:34:28,560
that will parse your jwt

885
00:34:28,560 --> 00:34:29,918
and there are some interesting things in

886
00:34:29,918 --> 00:34:32,239
the token to look at

887
00:34:32,239 --> 00:34:34,480
one is the audience

888
00:34:34,480 --> 00:34:36,480
so the audience is the service that the

889
00:34:36,480 --> 00:34:38,320
jwt is valid for

890
00:34:38,320 --> 00:34:40,879
and it is invalid for any other service

891
00:34:40,879 --> 00:34:42,879
in azure

892
00:34:42,879 --> 00:34:45,440
the issuer so this is the security token

893
00:34:45,440 --> 00:34:47,520
service and then the id that you see at

894
00:34:47,520 --> 00:34:49,440
the end of that is my own azure ad

895
00:34:49,440 --> 00:34:51,679
tenant id

896
00:34:51,679 --> 00:34:53,199
the ms graph

897
00:34:53,199 --> 00:34:55,280
scoped app roles are in the roles

898
00:34:55,280 --> 00:34:57,680
parameter and then the azure ad roles

899
00:34:57,680 --> 00:35:01,040
are in a parameter called wids

900
00:35:01,040 --> 00:35:04,079
i think i have about 10 minutes left

901
00:35:04,079 --> 00:35:06,560
is that right

902
00:35:07,119 --> 00:35:11,200
15. okay cool all right we're doing well

903
00:35:13,200 --> 00:35:14,240
so the

904
00:35:14,240 --> 00:35:17,440
final result of this phase of exploring

905
00:35:17,440 --> 00:35:20,240
that system from various perspectives

906
00:35:20,240 --> 00:35:23,599
is that we've created a very simple

907
00:35:23,599 --> 00:35:25,920
very functional client

908
00:35:25,920 --> 00:35:29,040
uh and so we've we've kind of we've

909
00:35:29,040 --> 00:35:31,680
dipped our toes by studying how the

910
00:35:31,680 --> 00:35:33,920
official microsoft author tooling

911
00:35:33,920 --> 00:35:35,920
interfaces with the system

912
00:35:35,920 --> 00:35:37,200
we've been a little lower level by

913
00:35:37,200 --> 00:35:38,800
creating our own clients so we can

914
00:35:38,800 --> 00:35:43,280
access the system in a more raw nature

915
00:35:43,280 --> 00:35:46,640
we also now have the foundation for

916
00:35:46,640 --> 00:35:49,200
building a more mature client that we

917
00:35:49,200 --> 00:35:51,920
can use to do our abuse primitive

918
00:35:51,920 --> 00:35:53,440
discovery

919
00:35:53,440 --> 00:35:54,480
and

920
00:35:54,480 --> 00:35:56,640
with all this context and with this very

921
00:35:56,640 --> 00:35:59,119
basic client we also have the foundation

922
00:35:59,119 --> 00:36:02,000
for automating that abuse discovery

923
00:36:02,000 --> 00:36:04,800
process which is what we will talk about

924
00:36:04,800 --> 00:36:07,040
now

925
00:36:10,960 --> 00:36:13,599
so this next phase it will catalog the

926
00:36:13,599 --> 00:36:16,240
abuse capabilities that are enabled by

927
00:36:16,240 --> 00:36:18,320
the system

928
00:36:18,320 --> 00:36:20,079
first step

929
00:36:20,079 --> 00:36:21,359
what are the permissions that are

930
00:36:21,359 --> 00:36:23,280
available by the system we want to

931
00:36:23,280 --> 00:36:25,599
enumerate all of those

932
00:36:25,599 --> 00:36:27,920
with our very basic client we can do

933
00:36:27,920 --> 00:36:30,720
that like this

934
00:36:30,720 --> 00:36:33,040
so ms graph

935
00:36:33,040 --> 00:36:35,359
instantiates itself as a resource app

936
00:36:35,359 --> 00:36:38,000
also known as a service principle so we

937
00:36:38,000 --> 00:36:40,720
access it via the service principles in

938
00:36:40,720 --> 00:36:42,400
point

939
00:36:42,400 --> 00:36:44,400
and then we

940
00:36:44,400 --> 00:36:46,320
well actually we're just enumerating all

941
00:36:46,320 --> 00:36:47,760
of them and we're putting them into a

942
00:36:47,760 --> 00:36:50,160
variable called service principles

943
00:36:50,160 --> 00:36:51,200
then

944
00:36:51,200 --> 00:36:53,200
we find the service principle that

945
00:36:53,200 --> 00:36:56,000
matches the ms graph resource app guide

946
00:36:56,000 --> 00:36:57,920
which is going to be the same in every

947
00:36:57,920 --> 00:36:59,040
tenant

948
00:36:59,040 --> 00:37:01,280
and there is a property

949
00:37:01,280 --> 00:37:04,880
called app roles and what this describes

950
00:37:04,880 --> 00:37:08,800
is all of the different permission

951
00:37:08,800 --> 00:37:11,839
or permissions that are exposed by the

952
00:37:11,839 --> 00:37:13,440
app

953
00:37:13,440 --> 00:37:15,200
because they are exposed by the app they

954
00:37:15,200 --> 00:37:17,760
are also scoped to the app

955
00:37:17,760 --> 00:37:20,560
what that means is that an ms graph app

956
00:37:20,560 --> 00:37:21,760
role

957
00:37:21,760 --> 00:37:25,119
cannot be used against another app does

958
00:37:25,119 --> 00:37:26,800
that make sense

959
00:37:26,800 --> 00:37:29,839
so our graph app roles are only valid

960
00:37:29,839 --> 00:37:31,359
against the graph they're not valid

961
00:37:31,359 --> 00:37:33,280
against azure ad they're not valid

962
00:37:33,280 --> 00:37:35,040
against azure rm they're not valid

963
00:37:35,040 --> 00:37:36,560
against anything else except for the ms

964
00:37:36,560 --> 00:37:37,839
graph api

965
00:37:37,839 --> 00:37:39,920
or at least that's what the intent is

966
00:37:39,920 --> 00:37:41,440
maybe that maybe somebody can find a way

967
00:37:41,440 --> 00:37:43,440
around that

968
00:37:43,440 --> 00:37:45,920
if you can that would be worth

969
00:37:45,920 --> 00:37:47,359
probably several tens of thousands of

970
00:37:47,359 --> 00:37:50,000
dollars

971
00:37:50,000 --> 00:37:52,320
here's what i do here's what i did i

972
00:37:52,320 --> 00:37:54,640
copied all of these different

973
00:37:54,640 --> 00:37:56,720
uh app roles

974
00:37:56,720 --> 00:38:01,200
i pasted them into a spreadsheet

975
00:38:02,000 --> 00:38:05,680
and then we're ready for the next step

976
00:38:05,680 --> 00:38:07,680
our next step is we're going to test the

977
00:38:07,680 --> 00:38:09,920
existing abuses that we already know

978
00:38:09,920 --> 00:38:11,599
about

979
00:38:11,599 --> 00:38:14,640
and consider new abuses that maybe we

980
00:38:14,640 --> 00:38:15,760
learned about through looking at the

981
00:38:15,760 --> 00:38:17,839
documentation or looking at the

982
00:38:17,839 --> 00:38:20,000
description for an app role

983
00:38:20,000 --> 00:38:21,040
or

984
00:38:21,040 --> 00:38:23,440
looking at a talk whatever just keep an

985
00:38:23,440 --> 00:38:24,880
open mind about what the other these

986
00:38:24,880 --> 00:38:28,079
possibilities could be

987
00:38:28,720 --> 00:38:31,280
so as an example in the microsoft

988
00:38:31,280 --> 00:38:32,400
documentation

989
00:38:32,400 --> 00:38:34,560
there is this privilege called

990
00:38:34,560 --> 00:38:37,280
directory.readwrite.all

991
00:38:37,280 --> 00:38:39,520
this says it allows the app to read and

992
00:38:39,520 --> 00:38:41,040
write data in your organization's

993
00:38:41,040 --> 00:38:43,119
directory such as users and groups

994
00:38:43,119 --> 00:38:46,160
without a signed in user does not allow

995
00:38:46,160 --> 00:38:48,640
user or group deletion

996
00:38:48,640 --> 00:38:49,680
that's

997
00:38:49,680 --> 00:38:51,599
it that's all you get

998
00:38:51,599 --> 00:38:54,560
you don't get to know what the scope of

999
00:38:54,560 --> 00:38:56,320
actions are that are allowed by this

1000
00:38:56,320 --> 00:38:57,440
permission

1001
00:38:57,440 --> 00:38:59,040
you don't get to know the scope of

1002
00:38:59,040 --> 00:39:02,079
objects that can be touched by this

1003
00:39:02,079 --> 00:39:04,880
you don't know does this affect azure ad

1004
00:39:04,880 --> 00:39:06,960
and azure rm

1005
00:39:06,960 --> 00:39:09,119
literally this is all that we know

1006
00:39:09,119 --> 00:39:10,160
and

1007
00:39:10,160 --> 00:39:11,920
this is why i say

1008
00:39:11,920 --> 00:39:13,119
if you make tooling based on

1009
00:39:13,119 --> 00:39:14,400
documentation

1010
00:39:14,400 --> 00:39:17,040
it will be inaccurate it'll be wrong and

1011
00:39:17,040 --> 00:39:18,480
the people who use your tooling

1012
00:39:18,480 --> 00:39:19,599
including yourself will be

1013
00:39:19,599 --> 00:39:21,599
extraordinarily frustrated

1014
00:39:21,599 --> 00:39:22,720
so you have to go beyond the

1015
00:39:22,720 --> 00:39:24,160
documentation when you're doing these

1016
00:39:24,160 --> 00:39:25,680
tests

1017
00:39:25,680 --> 00:39:27,040
so

1018
00:39:27,040 --> 00:39:29,280
in this spreadsheet i will start to list

1019
00:39:29,280 --> 00:39:31,040
out the different abuse primitives that

1020
00:39:31,040 --> 00:39:32,640
i already know about

1021
00:39:32,640 --> 00:39:34,079
against azure

1022
00:39:34,079 --> 00:39:35,760
so for example can i promote myself to

1023
00:39:35,760 --> 00:39:37,839
global admin that's fun

1024
00:39:37,839 --> 00:39:39,839
can i change a global admins password

1025
00:39:39,839 --> 00:39:41,520
it's useful

1026
00:39:41,520 --> 00:39:43,839
can i add a principle to a role enabled

1027
00:39:43,839 --> 00:39:48,078
security group okay that's pretty good

1028
00:39:48,400 --> 00:39:51,040
and initially when i started doing this

1029
00:39:51,040 --> 00:39:54,000
research i would do this i would have an

1030
00:39:54,000 --> 00:39:56,960
example application i would give it one

1031
00:39:56,960 --> 00:39:59,280
permission at a time

1032
00:39:59,280 --> 00:40:01,359
and then i would do

1033
00:40:01,359 --> 00:40:03,839
abuse tests with that permission

1034
00:40:03,839 --> 00:40:05,280
so for example let's give it access

1035
00:40:05,280 --> 00:40:07,280
review.read.all

1036
00:40:07,280 --> 00:40:09,599
is that abusable is it not i don't know

1037
00:40:09,599 --> 00:40:12,160
we can't prove that from the information

1038
00:40:12,160 --> 00:40:15,359
available from microsoft

1039
00:40:15,359 --> 00:40:18,079
here's an example of how to promote a

1040
00:40:18,079 --> 00:40:20,160
user to global admin

1041
00:40:20,160 --> 00:40:21,520
using the

1042
00:40:21,520 --> 00:40:23,359
post method against this particular

1043
00:40:23,359 --> 00:40:26,160
endpoint in the ms graph api

1044
00:40:26,160 --> 00:40:27,119
so

1045
00:40:27,119 --> 00:40:30,400
manually by hand i will

1046
00:40:30,400 --> 00:40:33,119
use that service principle's secret and

1047
00:40:33,119 --> 00:40:35,839
authentication to try to promote itself

1048
00:40:35,839 --> 00:40:37,520
to global admin

1049
00:40:37,520 --> 00:40:40,000
and i will get a 403

1050
00:40:40,000 --> 00:40:42,000
and i'll go back to my table

1051
00:40:42,000 --> 00:40:45,119
and i'll enter no

1052
00:40:45,599 --> 00:40:48,160
so there's

1053
00:40:48,160 --> 00:40:50,000
uh

1054
00:40:50,000 --> 00:40:53,599
about 175 ms graph app roles

1055
00:40:53,599 --> 00:40:55,599
and the abuse tests that i was covering

1056
00:40:55,599 --> 00:40:57,520
is maybe about a dozen

1057
00:40:57,520 --> 00:41:00,000
so you can do the math it's impossible

1058
00:41:00,000 --> 00:41:01,839
to do this by hand you have to you have

1059
00:41:01,839 --> 00:41:03,920
to automate this process

1060
00:41:03,920 --> 00:41:07,720
which is what we will do

1061
00:41:07,839 --> 00:41:10,400
after you automate this process

1062
00:41:10,400 --> 00:41:13,359
you go from

1063
00:41:13,359 --> 00:41:15,040
i'm sorry wrong slide

1064
00:41:15,040 --> 00:41:18,000
you go from something like this

1065
00:41:18,000 --> 00:41:20,160
to the end result of what i have in my

1066
00:41:20,160 --> 00:41:22,960
actual spreadsheet which is this

1067
00:41:22,960 --> 00:41:25,359
so the actual per the actual app roles

1068
00:41:25,359 --> 00:41:28,160
that can be abused i have listed here

1069
00:41:28,160 --> 00:41:29,440
and then all the other ones that cannot

1070
00:41:29,440 --> 00:41:31,200
be abused are just

1071
00:41:31,200 --> 00:41:34,800
below that with all red nose

1072
00:41:34,800 --> 00:41:36,400
and so the example that we looked at

1073
00:41:36,400 --> 00:41:37,960
before was

1074
00:41:37,960 --> 00:41:39,440
directory.readwrite.all which you could

1075
00:41:39,440 --> 00:41:41,680
see in the middle of that far left

1076
00:41:41,680 --> 00:41:42,800
column

1077
00:41:42,800 --> 00:41:45,040
and so it turns out that the two abuses

1078
00:41:45,040 --> 00:41:47,359
that are actually enabled by that

1079
00:41:47,359 --> 00:41:49,760
are we can add someone to a non-role

1080
00:41:49,760 --> 00:41:52,319
eligible group or we can add an owner to

1081
00:41:52,319 --> 00:41:55,440
a non-role eligible group so as far as

1082
00:41:55,440 --> 00:41:58,079
read and write on all directory objects

1083
00:41:58,079 --> 00:42:00,880
i'm not so sure

1084
00:42:01,280 --> 00:42:03,680
the end result of this automation

1085
00:42:03,680 --> 00:42:05,200
is for me

1086
00:42:05,200 --> 00:42:07,680
i need to know how am i going to expand

1087
00:42:07,680 --> 00:42:11,280
the bloodhound graph database design

1088
00:42:11,280 --> 00:42:14,160
and so that would look like this

1089
00:42:14,160 --> 00:42:16,079
so this is what you were looking at

1090
00:42:16,079 --> 00:42:17,760
before in the spreadsheet but it is

1091
00:42:17,760 --> 00:42:18,800
modeled as

1092
00:42:18,800 --> 00:42:20,480
a graph

1093
00:42:20,480 --> 00:42:21,760
so we'll just look at the very top

1094
00:42:21,760 --> 00:42:24,400
example we have an az app that will

1095
00:42:24,400 --> 00:42:27,200
authenticate as a az service principle

1096
00:42:27,200 --> 00:42:29,119
that service principle is granted the ms

1097
00:42:29,119 --> 00:42:30,079
graph app role called

1098
00:42:30,079 --> 00:42:32,319
application.readwrite.all

1099
00:42:32,319 --> 00:42:34,480
and that gives them four different abuse

1100
00:42:34,480 --> 00:42:36,400
possibilities they can add a secret or

1101
00:42:36,400 --> 00:42:39,200
an owner to an az app or add a secret or

1102
00:42:39,200 --> 00:42:41,920
an owner to an az service principal

1103
00:42:41,920 --> 00:42:45,280
so at this point i'm ready to

1104
00:42:45,280 --> 00:42:47,520
introduce these attack primitives into

1105
00:42:47,520 --> 00:42:49,359
the bloodhound graph i haven't done that

1106
00:42:49,359 --> 00:42:51,599
yet it's coming soon

1107
00:42:51,599 --> 00:42:55,119
what you can also do is from this you

1108
00:42:55,119 --> 00:42:56,839
can create

1109
00:42:56,839 --> 00:43:00,720
a you can create an example attack path

1110
00:43:00,720 --> 00:43:03,440
and then you can look for those examples

1111
00:43:03,440 --> 00:43:06,400
and those patterns in real environments

1112
00:43:06,400 --> 00:43:09,200
and so after doing this research

1113
00:43:09,200 --> 00:43:11,040
we do red team assessments for

1114
00:43:11,040 --> 00:43:13,040
organizations that use azure

1115
00:43:13,040 --> 00:43:15,839
and one of the most common attack paths

1116
00:43:15,839 --> 00:43:18,319
that we find for turning low privilege

1117
00:43:18,319 --> 00:43:21,359
access in azure into global admin relies

1118
00:43:21,359 --> 00:43:23,760
on abusing these ms graph api

1119
00:43:23,760 --> 00:43:26,760
permissions

1120
00:43:28,079 --> 00:43:29,680
and such an example attack path looks

1121
00:43:29,680 --> 00:43:32,078
like this

1122
00:43:32,319 --> 00:43:33,920
on the left we have a user called matt

1123
00:43:33,920 --> 00:43:35,760
nelson who has

1124
00:43:35,760 --> 00:43:39,200
no azure ad admin roles

1125
00:43:39,200 --> 00:43:40,960
it doesn't belong to any role eligible

1126
00:43:40,960 --> 00:43:42,880
security groups

1127
00:43:42,880 --> 00:43:44,560
if you were to audit

1128
00:43:44,560 --> 00:43:46,880
this user using the azure portal you

1129
00:43:46,880 --> 00:43:48,720
would see that this user has no

1130
00:43:48,720 --> 00:43:50,319
permissions

1131
00:43:50,319 --> 00:43:51,760
what you wouldn't see

1132
00:43:51,760 --> 00:43:54,000
is that this user has been added as an

1133
00:43:54,000 --> 00:43:56,480
explicit owner on an app registration

1134
00:43:56,480 --> 00:43:58,160
object

1135
00:43:58,160 --> 00:44:00,480
that app registration authenticates to

1136
00:44:00,480 --> 00:44:03,119
azure using a service principle

1137
00:44:03,119 --> 00:44:05,200
it's a one-to-one mapping

1138
00:44:05,200 --> 00:44:06,960
that service principle has been granted

1139
00:44:06,960 --> 00:44:08,079
an app role called

1140
00:44:08,079 --> 00:44:10,880
aprilassignment.readright.all

1141
00:44:10,880 --> 00:44:12,640
which allows the service principal to

1142
00:44:12,640 --> 00:44:15,440
grant itself or anybody else

1143
00:44:15,440 --> 00:44:18,319
any ms graph api permission

1144
00:44:18,319 --> 00:44:20,839
so they can give themselves

1145
00:44:20,839 --> 00:44:22,800
rolemanagement.readwrite.director

1146
00:44:22,800 --> 00:44:24,319
which means that they can then promote

1147
00:44:24,319 --> 00:44:26,400
themselves to global admin

1148
00:44:26,400 --> 00:44:28,079
this is the most common privilege

1149
00:44:28,079 --> 00:44:30,400
escalation pattern that we have seen in

1150
00:44:30,400 --> 00:44:34,319
real azure tenants so far

1151
00:44:34,480 --> 00:44:38,240
for defenders it is very very hard to

1152
00:44:38,240 --> 00:44:41,839
audit any one piece of this

1153
00:44:41,839 --> 00:44:43,839
so

1154
00:44:43,839 --> 00:44:46,400
that sucks

1155
00:44:47,599 --> 00:44:49,119
another end result of going through this

1156
00:44:49,119 --> 00:44:52,960
automation process is that you will

1157
00:44:52,960 --> 00:44:54,319
discover

1158
00:44:54,319 --> 00:44:57,839
where the official documentation

1159
00:44:57,839 --> 00:45:01,680
materially differs from reality

1160
00:45:01,680 --> 00:45:04,800
so a good example is this

1161
00:45:04,800 --> 00:45:07,280
on the official documentation

1162
00:45:07,280 --> 00:45:10,400
it says that only an administrator

1163
00:45:10,400 --> 00:45:12,160
can consent

1164
00:45:12,160 --> 00:45:14,960
to application permissions

1165
00:45:14,960 --> 00:45:17,839
but if we rewind about 20 minutes

1166
00:45:17,839 --> 00:45:20,160
remember the github issues that i was

1167
00:45:20,160 --> 00:45:21,839
showing you before

1168
00:45:21,839 --> 00:45:23,760
one of those is

1169
00:45:23,760 --> 00:45:25,680
how do i automate

1170
00:45:25,680 --> 00:45:27,599
granting consent for application

1171
00:45:27,599 --> 00:45:28,800
permissions

1172
00:45:28,800 --> 00:45:31,680
and it turns out you don't need an

1173
00:45:31,680 --> 00:45:33,920
administrator to consent

1174
00:45:33,920 --> 00:45:35,440
if the service principle has a

1175
00:45:35,440 --> 00:45:39,119
particular app role assigned to it

1176
00:45:39,119 --> 00:45:40,880
and so it used to be true what's

1177
00:45:40,880 --> 00:45:43,440
underlined in red here used to be true

1178
00:45:43,440 --> 00:45:45,440
it no longer is true

1179
00:45:45,440 --> 00:45:48,400
so you can you can find where

1180
00:45:48,400 --> 00:45:51,920
the documentation is wrong

1181
00:45:52,800 --> 00:45:54,800
i was going to try to have this ready

1182
00:45:54,800 --> 00:45:56,880
before this talk but i didn't have it

1183
00:45:56,880 --> 00:46:00,079
ready but something that is coming soon

1184
00:46:00,079 --> 00:46:03,359
is the automation framework that i've

1185
00:46:03,359 --> 00:46:06,240
built and so working title atomic azure

1186
00:46:06,240 --> 00:46:07,280
tests

1187
00:46:07,280 --> 00:46:09,440
this is inspired by red canary's project

1188
00:46:09,440 --> 00:46:11,280
called atomic red team

1189
00:46:11,280 --> 00:46:14,240
it has no dependence on the powershell

1190
00:46:14,240 --> 00:46:17,440
modules it just accesses the graph api

1191
00:46:17,440 --> 00:46:19,599
using the powershell methods

1192
00:46:19,599 --> 00:46:20,640
um

1193
00:46:20,640 --> 00:46:22,480
you could easily port this to something

1194
00:46:22,480 --> 00:46:24,560
else like golang or

1195
00:46:24,560 --> 00:46:26,720
bash or whatever it's an api you can use

1196
00:46:26,720 --> 00:46:29,040
anything to interface with it

1197
00:46:29,040 --> 00:46:30,640
and additionally my intent is that it

1198
00:46:30,640 --> 00:46:33,520
will be easily expandable to cover other

1199
00:46:33,520 --> 00:46:36,960
azure services so that you can take this

1200
00:46:36,960 --> 00:46:39,359
and you can extend it to cover maybe

1201
00:46:39,359 --> 00:46:42,000
something else that you're interested in

1202
00:46:42,000 --> 00:46:44,560
the end result for us is that we have

1203
00:46:44,560 --> 00:46:46,480
daily automatic permission to abuse

1204
00:46:46,480 --> 00:46:47,920
mapping

1205
00:46:47,920 --> 00:46:50,160
available for anyone to see so that will

1206
00:46:50,160 --> 00:46:53,040
be coming soon as well

1207
00:46:53,040 --> 00:46:54,480
that's the end of that phase so we've

1208
00:46:54,480 --> 00:46:56,560
automated collection audit and abuse

1209
00:46:56,560 --> 00:46:58,240
capabilities

1210
00:46:58,240 --> 00:47:01,040
finally we want to share our findings i

1211
00:47:01,040 --> 00:47:02,960
don't have a whole lot to say about this

1212
00:47:02,960 --> 00:47:05,839
this basically means write a blog

1213
00:47:05,839 --> 00:47:07,280
share your code

1214
00:47:07,280 --> 00:47:08,480
give a talk

1215
00:47:08,480 --> 00:47:10,800
let other people learn from what you

1216
00:47:10,800 --> 00:47:12,560
have learned and let other people build

1217
00:47:12,560 --> 00:47:14,560
on top of what you have built

1218
00:47:14,560 --> 00:47:16,640
or improve what you have built

1219
00:47:16,640 --> 00:47:19,920
just help people save time by getting

1220
00:47:19,920 --> 00:47:23,520
through this rigmarole initially

1221
00:47:23,520 --> 00:47:25,359
the way that i like to say that is

1222
00:47:25,359 --> 00:47:27,040
write the blog post that you needed at

1223
00:47:27,040 --> 00:47:29,599
the start

1224
00:47:30,800 --> 00:47:33,280
let's go back to

1225
00:47:33,280 --> 00:47:34,960
where we started we wanted to begin with

1226
00:47:34,960 --> 00:47:37,040
the end in mind here are all the things

1227
00:47:37,040 --> 00:47:38,559
that i wanted to do

1228
00:47:38,559 --> 00:47:41,200
so i can check myself and i can see that

1229
00:47:41,200 --> 00:47:44,079
yes i did all these things so i feel

1230
00:47:44,079 --> 00:47:45,359
good about that i can move on to

1231
00:47:45,359 --> 00:47:47,760
something else

1232
00:47:47,760 --> 00:47:50,960
where do we find research ideas

1233
00:47:50,960 --> 00:47:52,559
like i said at the beginning

1234
00:47:52,559 --> 00:47:54,640
azure lets you basically do anything

1235
00:47:54,640 --> 00:47:58,079
that you can think of with a computer

1236
00:47:58,079 --> 00:48:01,200
so if you have existing expertise in

1237
00:48:01,200 --> 00:48:03,200
databases maybe look at the azure sql

1238
00:48:03,200 --> 00:48:06,160
database service or devops and ci cd or

1239
00:48:06,160 --> 00:48:07,520
ci cd

1240
00:48:07,520 --> 00:48:09,680
or web apps or or infrastructure

1241
00:48:09,680 --> 00:48:10,880
management

1242
00:48:10,880 --> 00:48:12,559
there's a full

1243
00:48:12,559 --> 00:48:13,520
maybe

1244
00:48:13,520 --> 00:48:15,760
list of what those services are at that

1245
00:48:15,760 --> 00:48:17,920
link in reality there are probably more

1246
00:48:17,920 --> 00:48:20,960
services than what are documented

1247
00:48:20,960 --> 00:48:23,280
i also recommend following people in

1248
00:48:23,280 --> 00:48:25,200
leadership at microsoft because they

1249
00:48:25,200 --> 00:48:27,280
often talk about new cool things that

1250
00:48:27,280 --> 00:48:28,640
are coming out

1251
00:48:28,640 --> 00:48:32,319
and those new cool things are ripe for

1252
00:48:32,319 --> 00:48:35,599
abuse research

1253
00:48:35,599 --> 00:48:38,480
follow these particular people who don't

1254
00:48:38,480 --> 00:48:40,480
work at microsoft

1255
00:48:40,480 --> 00:48:43,200
they are always putting out high quality

1256
00:48:43,200 --> 00:48:46,720
high signal content specific to azure

1257
00:48:46,720 --> 00:48:48,640
there's a link to this deck

1258
00:48:48,640 --> 00:48:50,640
at the first slide which i'll bring back

1259
00:48:50,640 --> 00:48:52,640
up so you don't have to

1260
00:48:52,640 --> 00:48:56,000
rely on taking a picture of this

1261
00:48:56,000 --> 00:48:58,640
bookmark these pages

1262
00:48:58,640 --> 00:49:02,960
and read these every so often

1263
00:49:02,960 --> 00:49:06,400
which brings us to our conclusion

1264
00:49:07,200 --> 00:49:09,680
there has never been a better time than

1265
00:49:09,680 --> 00:49:11,520
right now

1266
00:49:11,520 --> 00:49:14,160
to get involved in abuse research

1267
00:49:14,160 --> 00:49:16,880
specifically against azure

1268
00:49:16,880 --> 00:49:18,880
azure has been around for more than 10

1269
00:49:18,880 --> 00:49:21,760
years but really it hasn't been adopted

1270
00:49:21,760 --> 00:49:23,680
by the mainstream until the past two or

1271
00:49:23,680 --> 00:49:24,880
three years

1272
00:49:24,880 --> 00:49:27,760
there's a lot of misconfiguration debt

1273
00:49:27,760 --> 00:49:29,760
in the system there's a lot of

1274
00:49:29,760 --> 00:49:31,920
opportunity to discover new abuse

1275
00:49:31,920 --> 00:49:33,520
primitives

1276
00:49:33,520 --> 00:49:35,520
i hope that in this talk i've shown you

1277
00:49:35,520 --> 00:49:38,319
how easy if tedious

1278
00:49:38,319 --> 00:49:40,240
it actually is and i wish you happy

1279
00:49:40,240 --> 00:49:41,680
hunting

1280
00:49:41,680 --> 00:49:44,400
and with that i'll thank you and you can

1281
00:49:44,400 --> 00:49:47,680
find me on twitter right there

1282
00:49:47,680 --> 00:49:58,400
[Applause]

1283
00:49:58,400 --> 00:50:00,880
thanks a lot andy awesome talk

1284
00:50:00,880 --> 00:50:02,240
uh since we started a little bit late

1285
00:50:02,240 --> 00:50:04,319
we'll give a five five minutes or so for

1286
00:50:04,319 --> 00:50:05,680
questions so if anybody has a question

1287
00:50:05,680 --> 00:50:09,240
please raise your hand

1288
00:50:15,040 --> 00:50:17,200
uh thank you for the great talk uh i

1289
00:50:17,200 --> 00:50:18,960
always find that always finding these

1290
00:50:18,960 --> 00:50:21,359
talks very inspirational

1291
00:50:21,359 --> 00:50:23,920
but from my experience the hard thing

1292
00:50:23,920 --> 00:50:26,319
about this research project is managing

1293
00:50:26,319 --> 00:50:27,839
your time

1294
00:50:27,839 --> 00:50:30,559
so um how do you go about managing the

1295
00:50:30,559 --> 00:50:32,079
time and also

1296
00:50:32,079 --> 00:50:34,480
these goals for the stages the for the

1297
00:50:34,480 --> 00:50:37,359
phases that you set are kinda abstract

1298
00:50:37,359 --> 00:50:38,880
there is really no way to find if you

1299
00:50:38,880 --> 00:50:43,280
have researched the documentation enough

1300
00:50:43,280 --> 00:50:45,599
and it's really hard to

1301
00:50:45,599 --> 00:50:47,920
sell to yourself

1302
00:50:47,920 --> 00:50:49,680
like spending additional time here and

1303
00:50:49,680 --> 00:50:51,359
there this is the first one and the

1304
00:50:51,359 --> 00:50:54,319
second one is very very short are the

1305
00:50:54,319 --> 00:50:55,839
azure apis

1306
00:50:55,839 --> 00:50:56,880
stable

1307
00:50:56,880 --> 00:50:59,359
so that your tooling does not

1308
00:50:59,359 --> 00:51:01,040
get outdated

1309
00:51:01,040 --> 00:51:02,640
those are great questions so the first

1310
00:51:02,640 --> 00:51:06,160
question was how do i manage my time

1311
00:51:07,680 --> 00:51:11,040
it's difficult i'm fortunate to have

1312
00:51:11,040 --> 00:51:13,119
uh working hours available to me during

1313
00:51:13,119 --> 00:51:15,040
the day from nine to five that i can do

1314
00:51:15,040 --> 00:51:16,800
this research not everybody has that

1315
00:51:16,800 --> 00:51:18,160
luxury so

1316
00:51:18,160 --> 00:51:20,720
when i did not have that luxury it was

1317
00:51:20,720 --> 00:51:23,839
sitting at a bar like on the on the week

1318
00:51:23,839 --> 00:51:25,040
uh

1319
00:51:25,040 --> 00:51:26,960
you know weekday evenings

1320
00:51:26,960 --> 00:51:30,400
um it's challenging uh but i also have

1321
00:51:30,400 --> 00:51:32,319
maybe a more personal answer which i'll

1322
00:51:32,319 --> 00:51:34,559
answer personally to you

1323
00:51:34,559 --> 00:51:38,559
your second question was um

1324
00:51:39,839 --> 00:51:42,400
oh yeah this this the stability of the

1325
00:51:42,400 --> 00:51:44,960
tooling yeah that is a great question so

1326
00:51:44,960 --> 00:51:46,880
you might notice that in some of those

1327
00:51:46,880 --> 00:51:48,240
requests that i was doing i was

1328
00:51:48,240 --> 00:51:51,760
specifying a version of the api to hit

1329
00:51:51,760 --> 00:51:54,640
the last stable version for the ms graph

1330
00:51:54,640 --> 00:51:58,640
api came out in 2015.

1331
00:51:58,640 --> 00:52:00,000
uh

1332
00:52:00,000 --> 00:52:02,000
there are beta versions available as

1333
00:52:02,000 --> 00:52:05,920
well that you can hit but certainly

1334
00:52:05,920 --> 00:52:08,800
my belief is that if you specify the api

1335
00:52:08,800 --> 00:52:10,400
version that the

1336
00:52:10,400 --> 00:52:12,640
service should behave the same way maybe

1337
00:52:12,640 --> 00:52:13,920
maybe not

1338
00:52:13,920 --> 00:52:15,680
probably not

1339
00:52:15,680 --> 00:52:17,520
uh and did you have another question in

1340
00:52:17,520 --> 00:52:19,599
there too no okay

1341
00:52:19,599 --> 00:52:21,359
good questions

1342
00:52:21,359 --> 00:52:24,160
any other questions

1343
00:52:27,119 --> 00:52:29,280
oh over here

1344
00:52:29,280 --> 00:52:32,280
yeah

1345
00:52:37,280 --> 00:52:39,839
uh thank you uh first thank you for blue

1346
00:52:39,839 --> 00:52:40,640
down

1347
00:52:40,640 --> 00:52:44,879
it's helpful every day so thanks

1348
00:52:45,040 --> 00:52:46,559
then uh oh uh

1349
00:52:46,559 --> 00:52:48,160
how long

1350
00:52:48,160 --> 00:52:48,880
did

1351
00:52:48,880 --> 00:52:51,599
something like this take from the stars

1352
00:52:51,599 --> 00:52:54,559
so your friend tell you uh hey look at

1353
00:52:54,559 --> 00:52:56,079
that it's interesting

1354
00:52:56,079 --> 00:52:57,200
to uh

1355
00:52:57,200 --> 00:52:58,720
the end of your

1356
00:52:58,720 --> 00:52:59,760
yeah

1357
00:52:59,760 --> 00:53:01,440
so the question is how long did it take

1358
00:53:01,440 --> 00:53:03,760
to go through this process from hearing

1359
00:53:03,760 --> 00:53:06,079
about it initially to having a product

1360
00:53:06,079 --> 00:53:09,440
or a talk or whatever

1361
00:53:09,680 --> 00:53:11,520
it took about

1362
00:53:11,520 --> 00:53:14,079
two months

1363
00:53:14,559 --> 00:53:16,960
now it could have been a lot faster

1364
00:53:16,960 --> 00:53:18,160
if i would have figured out the

1365
00:53:18,160 --> 00:53:20,640
automation process earlier

1366
00:53:20,640 --> 00:53:23,760
the truth is that the resulting table

1367
00:53:23,760 --> 00:53:26,079
that you saw earlier i actually did do

1368
00:53:26,079 --> 00:53:29,119
that manually by hand so that took

1369
00:53:29,119 --> 00:53:30,480
a long time

1370
00:53:30,480 --> 00:53:31,280
but

1371
00:53:31,280 --> 00:53:32,960
that that's what most took most of the

1372
00:53:32,960 --> 00:53:35,520
time but with the automation uh

1373
00:53:35,520 --> 00:53:37,280
framework i think that could be

1374
00:53:37,280 --> 00:53:39,280
compressed down to maybe a couple of

1375
00:53:39,280 --> 00:53:40,400
weeks

1376
00:53:40,400 --> 00:53:41,839
maybe two or three weeks that's my

1377
00:53:41,839 --> 00:53:44,400
intent uh with bloodhound especially i

1378
00:53:44,400 --> 00:53:45,200
want to

1379
00:53:45,200 --> 00:53:47,599
extend the scope to cover other abusable

1380
00:53:47,599 --> 00:53:49,760
services and so part of my

1381
00:53:49,760 --> 00:53:52,559
responsibility is to have that abuse

1382
00:53:52,559 --> 00:53:53,680
research

1383
00:53:53,680 --> 00:53:54,960
and

1384
00:53:54,960 --> 00:53:58,559
uh practical application process

1385
00:53:58,559 --> 00:54:00,079
more mature

1386
00:54:00,079 --> 00:54:03,119
and so this is what i'm doing now with

1387
00:54:03,119 --> 00:54:05,119
other research that i'm doing now

1388
00:54:05,119 --> 00:54:07,200
is automating that as quickly as i can

1389
00:54:07,200 --> 00:54:09,359
so now i would say it's two or three

1390
00:54:09,359 --> 00:54:11,520
weeks to go from hearing about something

1391
00:54:11,520 --> 00:54:13,280
to have something that is

1392
00:54:13,280 --> 00:54:14,559
uh

1393
00:54:14,559 --> 00:54:18,400
publicly digestible i would say

1394
00:54:18,480 --> 00:54:19,599
okay so we have time for one more

1395
00:54:19,599 --> 00:54:22,640
question and then we'll move on

1396
00:54:22,720 --> 00:54:23,920
uh thanks for the talk really

1397
00:54:23,920 --> 00:54:24,960
interesting

1398
00:54:24,960 --> 00:54:27,280
uh one of my question is actually what

1399
00:54:27,280 --> 00:54:29,680
do you do when you find an uh abuse

1400
00:54:29,680 --> 00:54:31,760
especially like uh in the documentation

1401
00:54:31,760 --> 00:54:33,839
you you show us that uh it was actually

1402
00:54:33,839 --> 00:54:36,240
wrong yeah did you inform microsoft and

1403
00:54:36,240 --> 00:54:39,040
what was the reaction that they had yeah

1404
00:54:39,040 --> 00:54:41,359
um

1405
00:54:42,240 --> 00:54:45,280
so i i did have a few conversations with

1406
00:54:45,280 --> 00:54:49,440
people at microsoft uh around this

1407
00:54:49,839 --> 00:54:51,839
uh i also submitted some pr's to the

1408
00:54:51,839 --> 00:54:54,240
documentation repos to correct them most

1409
00:54:54,240 --> 00:54:55,839
of them are rejected

1410
00:54:55,839 --> 00:54:56,880
uh

1411
00:54:56,880 --> 00:54:58,720
but i i did talk to people at microsoft

1412
00:54:58,720 --> 00:55:00,319
about like the abuse possibilities with

1413
00:55:00,319 --> 00:55:01,599
this system

1414
00:55:01,599 --> 00:55:02,799
and

1415
00:55:02,799 --> 00:55:04,720
because this is the way that the system

1416
00:55:04,720 --> 00:55:08,319
is designed their response was

1417
00:55:08,319 --> 00:55:09,839
this is not a vulnerability this is how

1418
00:55:09,839 --> 00:55:12,000
the system works which of course makes

1419
00:55:12,000 --> 00:55:14,559
me happy because that means that

1420
00:55:14,559 --> 00:55:17,200
my abuse primitives last forever

1421
00:55:17,200 --> 00:55:19,200
so they're not going to change this

1422
00:55:19,200 --> 00:55:21,520
and that means that bloodhound will be

1423
00:55:21,520 --> 00:55:24,480
correct when it shows you an attack path

1424
00:55:24,480 --> 00:55:25,839
and that means that the documentation

1425
00:55:25,839 --> 00:55:27,920
that i write or the

1426
00:55:27,920 --> 00:55:30,400
the code that i write

1427
00:55:30,400 --> 00:55:31,119
will

1428
00:55:31,119 --> 00:55:34,000
stay the same it doesn't need to change

1429
00:55:34,000 --> 00:55:35,760
and i agree with their position that it

1430
00:55:35,760 --> 00:55:37,200
is the way that the system is designed

1431
00:55:37,200 --> 00:55:38,960
and intended to be used

1432
00:55:38,960 --> 00:55:40,880
it's the same thing with

1433
00:55:40,880 --> 00:55:42,720
abusing the service control manager in

1434
00:55:42,720 --> 00:55:44,480
windows to create or edit an existing

1435
00:55:44,480 --> 00:55:46,559
service it's the way the system works

1436
00:55:46,559 --> 00:55:48,559
can it be abused yes is there something

1437
00:55:48,559 --> 00:55:51,280
microsoft can do about it

1438
00:55:51,280 --> 00:55:53,359
not really i don't think it's like rdp

1439
00:55:53,359 --> 00:55:54,799
what are they going to do

1440
00:55:54,799 --> 00:55:56,319
so um

1441
00:55:56,319 --> 00:55:58,240
yeah then otherwise there there's other

1442
00:55:58,240 --> 00:56:00,799
like documentation uh corrections that

1443
00:56:00,799 --> 00:56:03,040
i've uh asked for them to make or i've

1444
00:56:03,040 --> 00:56:05,760
made the prs and

1445
00:56:05,760 --> 00:56:07,520
you know i've asked that's the best i

1446
00:56:07,520 --> 00:56:10,160
can say is i've asked

1447
00:56:10,160 --> 00:56:11,119
uh

1448
00:56:11,119 --> 00:56:13,040
yeah i one more thing i'll say is i have

1449
00:56:13,040 --> 00:56:15,359
uh bloodhound stickers with me but

1450
00:56:15,359 --> 00:56:16,720
charlie's talk is coming up i don't want

1451
00:56:16,720 --> 00:56:18,640
to interfere with charlie's talk

1452
00:56:18,640 --> 00:56:20,960
so maybe find me in the lobby after

1453
00:56:20,960 --> 00:56:22,160
charlie's talk and i'm going to stay

1454
00:56:22,160 --> 00:56:23,920
here and watch charlie's talk

1455
00:56:23,920 --> 00:56:25,040
all right thanks another round of

1456
00:56:25,040 --> 00:56:28,359
applause randy

