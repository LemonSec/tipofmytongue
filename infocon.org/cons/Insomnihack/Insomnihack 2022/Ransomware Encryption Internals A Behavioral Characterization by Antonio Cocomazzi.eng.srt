1
00:00:06,840 --> 00:00:09,900
[Music]

2
00:00:15,280 --> 00:00:17,680
thank you thank you hi everyone uh

3
00:00:17,680 --> 00:00:19,760
thanks for joining this session

4
00:00:19,760 --> 00:00:22,560
today i'm going to talk about ransomware

5
00:00:22,560 --> 00:00:24,320
and more specifically we are going to

6
00:00:24,320 --> 00:00:27,119
focus on the data encryption stage that

7
00:00:27,119 --> 00:00:30,080
today is what makes things worse for

8
00:00:30,080 --> 00:00:31,840
companies

9
00:00:31,840 --> 00:00:33,680
a little bit about me

10
00:00:33,680 --> 00:00:35,920
i'm antonio gomez and i'm a threat

11
00:00:35,920 --> 00:00:38,559
intelligence researcher at sentinel one

12
00:00:38,559 --> 00:00:40,640
and i mainly deal with the mother

13
00:00:40,640 --> 00:00:43,680
analysis and reverse engineering

14
00:00:43,680 --> 00:00:46,320
my main focus are cyber crime related

15
00:00:46,320 --> 00:00:48,239
threats like bank intrusions and

16
00:00:48,239 --> 00:00:49,600
ransomware

17
00:00:49,600 --> 00:00:52,719
also in my free time i uh

18
00:00:52,719 --> 00:00:55,520
code offensive tools and also i like to

19
00:00:55,520 --> 00:00:57,680
depend into windows internals in fact

20
00:00:57,680 --> 00:00:59,760
you can see on the right

21
00:00:59,760 --> 00:01:02,000
my github channel in which i often

22
00:01:02,000 --> 00:01:04,159
publish offensive tools

23
00:01:04,159 --> 00:01:06,560
and i have also previously presented at

24
00:01:06,560 --> 00:01:08,080
some international conferences like

25
00:01:08,080 --> 00:01:11,680
blewett blackcat and so on

26
00:01:11,680 --> 00:01:12,799
what

27
00:01:12,799 --> 00:01:14,479
has been the main motivation of my

28
00:01:14,479 --> 00:01:17,520
research the main motivation is uh

29
00:01:17,520 --> 00:01:20,720
because the data encryption today is the

30
00:01:20,720 --> 00:01:22,880
core functionality of every ransomware

31
00:01:22,880 --> 00:01:26,400
and it it's the means that enables their

32
00:01:26,400 --> 00:01:29,360
successful operation of extorting money

33
00:01:29,360 --> 00:01:31,040
and what

34
00:01:31,040 --> 00:01:33,360
we can see today is that this kind of

35
00:01:33,360 --> 00:01:35,520
threats are still detected with static

36
00:01:35,520 --> 00:01:36,880
indicators

37
00:01:36,880 --> 00:01:39,520
and static indicators it's it's what is

38
00:01:39,520 --> 00:01:42,079
used for every threats for generic

39
00:01:42,079 --> 00:01:44,720
threats so for ransomware that are a

40
00:01:44,720 --> 00:01:46,640
little bit or more complex threats we

41
00:01:46,640 --> 00:01:48,560
need something more for example

42
00:01:48,560 --> 00:01:50,320
behavioral indicators

43
00:01:50,320 --> 00:01:52,079
but what is the problem the problem is

44
00:01:52,079 --> 00:01:54,079
that extracting behavioral indicators

45
00:01:54,079 --> 00:01:56,799
from these threats means deep knowledge

46
00:01:56,799 --> 00:01:59,040
of these of these threats

47
00:01:59,040 --> 00:02:02,320
and so lots of study and it's very time

48
00:02:02,320 --> 00:02:03,600
intensive

49
00:02:03,600 --> 00:02:06,159
so what was the goal of my research is

50
00:02:06,159 --> 00:02:08,639
to provide something that should ease

51
00:02:08,639 --> 00:02:11,599
the extraction of behavioral indicators

52
00:02:11,599 --> 00:02:12,400
and

53
00:02:12,400 --> 00:02:14,640
the bureau characterization should be

54
00:02:14,640 --> 00:02:16,720
and we will see in the next slides how

55
00:02:16,720 --> 00:02:20,000
this can ease this kind of extraction

56
00:02:20,000 --> 00:02:21,120
and

57
00:02:21,120 --> 00:02:23,360
the final goal and the main results of

58
00:02:23,360 --> 00:02:26,000
this research that i will show is that

59
00:02:26,000 --> 00:02:29,040
identifying behavioral commonalities can

60
00:02:29,040 --> 00:02:31,280
provide detection opportunities that are

61
00:02:31,280 --> 00:02:33,440
generic enough to identify all of the

62
00:02:33,440 --> 00:02:36,879
most ransomware families instead of

63
00:02:36,879 --> 00:02:39,200
relying for example a specific behavior

64
00:02:39,200 --> 00:02:42,160
for a specific family

65
00:02:42,160 --> 00:02:44,800
this is the agenda

66
00:02:44,800 --> 00:02:47,200
there are the first three three chapter

67
00:02:47,200 --> 00:02:48,560
that was

68
00:02:48,560 --> 00:02:51,760
a bit of a prophetic work for my

69
00:02:51,760 --> 00:02:52,959
research

70
00:02:52,959 --> 00:02:55,519
and then there is a more juicy part in

71
00:02:55,519 --> 00:02:56,800
which i will show the behavioral

72
00:02:56,800 --> 00:02:59,120
detection based on the overlapping

73
00:02:59,120 --> 00:03:01,920
implementation in which in which i will

74
00:03:01,920 --> 00:03:03,920
show how ransomware can be detected

75
00:03:03,920 --> 00:03:06,080
generically and then i will leave you

76
00:03:06,080 --> 00:03:08,800
with some final thoughts

77
00:03:08,800 --> 00:03:11,040
okay the first stage of my research was

78
00:03:11,040 --> 00:03:14,000
to define the scope

79
00:03:14,480 --> 00:03:16,640
as i told you the scope was the data

80
00:03:16,640 --> 00:03:18,959
encryption stage so we are not going i

81
00:03:18,959 --> 00:03:21,200
was not focusing on the entire kill

82
00:03:21,200 --> 00:03:23,680
chain of the attack of the answer but it

83
00:03:23,680 --> 00:03:26,319
was focusing only on the locker payload

84
00:03:26,319 --> 00:03:29,040
so the one that is disrupting the system

85
00:03:29,040 --> 00:03:30,080
and

86
00:03:30,080 --> 00:03:31,680
the problem that they had at the time is

87
00:03:31,680 --> 00:03:33,200
that the threat models that were

88
00:03:33,200 --> 00:03:35,040
available every time like the miter

89
00:03:35,040 --> 00:03:38,799
model was not wide and generic enough to

90
00:03:38,799 --> 00:03:40,959
categorize the ransomware behavior so i

91
00:03:40,959 --> 00:03:43,360
had to find something else

92
00:03:43,360 --> 00:03:45,680
and what i found out is that the data

93
00:03:45,680 --> 00:03:48,720
encryption stage can be seen as four

94
00:03:48,720 --> 00:03:51,200
macro features like let's say

95
00:03:51,200 --> 00:03:53,920
sub operation performed by the data

96
00:03:53,920 --> 00:03:54,959
encryption

97
00:03:54,959 --> 00:03:57,120
and what they are

98
00:03:57,120 --> 00:03:59,519
they are file and directory enumeration

99
00:03:59,519 --> 00:04:01,200
file encryption encryption

100
00:04:01,200 --> 00:04:04,000
parallelization encryption optimization

101
00:04:04,000 --> 00:04:07,519
and then i had to select what are the

102
00:04:07,519 --> 00:04:08,959
ransomware families that we were

103
00:04:08,959 --> 00:04:11,040
interested in to look into

104
00:04:11,040 --> 00:04:14,480
and i have selected which one babuk

105
00:04:14,480 --> 00:04:17,358
blackmatter conti arrival that at three

106
00:04:17,358 --> 00:04:19,839
time appearance of my research were the

107
00:04:19,839 --> 00:04:21,918
most dangerous ransomware that was

108
00:04:21,918 --> 00:04:24,240
around

109
00:04:24,400 --> 00:04:26,639
okay

110
00:04:26,639 --> 00:04:28,479
some months later

111
00:04:28,479 --> 00:04:29,199
i

112
00:04:29,199 --> 00:04:31,280
what i have been doing for for some

113
00:04:31,280 --> 00:04:33,199
months i have been reverse engineering

114
00:04:33,199 --> 00:04:35,520
all of these samples and it required a

115
00:04:35,520 --> 00:04:36,880
lot of time

116
00:04:36,880 --> 00:04:40,080
and in this presentation uh

117
00:04:40,080 --> 00:04:43,600
i have packaged my very long research in

118
00:04:43,600 --> 00:04:46,000
a 45 minutes presentation so i'm not

119
00:04:46,000 --> 00:04:48,320
going to present you every specific

120
00:04:48,320 --> 00:04:51,840
detail for every specific family instead

121
00:04:51,840 --> 00:04:54,800
what i'm going to do is to provide you

122
00:04:54,800 --> 00:04:56,880
an intelligence uh

123
00:04:56,880 --> 00:04:58,320
more insights from an intelligence

124
00:04:58,320 --> 00:05:00,880
perspective so i'm gonna highlight what

125
00:05:00,880 --> 00:05:02,800
are the main evolution the main trends

126
00:05:02,800 --> 00:05:04,800
and the unique features that has been

127
00:05:04,800 --> 00:05:08,560
observed in the ransomware landscape

128
00:05:08,800 --> 00:05:12,000
the first shift and let's say it's the

129
00:05:12,000 --> 00:05:14,720
main evolution it's in the encryption

130
00:05:14,720 --> 00:05:17,840
schemes these threads are using

131
00:05:17,840 --> 00:05:20,160
the main shift where is has been

132
00:05:20,160 --> 00:05:22,320
observed the fact that they are not

133
00:05:22,320 --> 00:05:24,800
using any more rsa as an asymmetric

134
00:05:24,800 --> 00:05:27,360
encryption but they are using elliptic

135
00:05:27,360 --> 00:05:29,680
core defeatment what are the main

136
00:05:29,680 --> 00:05:31,919
difference is that with elliptic curve

137
00:05:31,919 --> 00:05:33,199
defiant

138
00:05:33,199 --> 00:05:35,600
the private key that is used to encrypt

139
00:05:35,600 --> 00:05:37,840
the files are never stored on the disk

140
00:05:37,840 --> 00:05:40,160
neither in encrypted form

141
00:05:40,160 --> 00:05:42,320
and i will depend on this concept in the

142
00:05:42,320 --> 00:05:44,240
next slides very deeply

143
00:05:44,240 --> 00:05:46,560
the second evolution is in the fact that

144
00:05:46,560 --> 00:05:48,479
all the encryption implementation that

145
00:05:48,479 --> 00:05:49,919
has been

146
00:05:49,919 --> 00:05:52,400
implemented by ransomware are avoiding

147
00:05:52,400 --> 00:05:55,440
the usage of crypto api the crypto api

148
00:05:55,440 --> 00:05:58,160
are the windows function that are

149
00:05:58,160 --> 00:06:00,400
offered by operating system

150
00:06:00,400 --> 00:06:02,720
and instead developer ransomware

151
00:06:02,720 --> 00:06:05,360
developers they are using open source

152
00:06:05,360 --> 00:06:08,160
libraries or custom implementation

153
00:06:08,160 --> 00:06:10,479
because these operations are much

154
00:06:10,479 --> 00:06:13,280
stealthier this is the main motivation

155
00:06:13,280 --> 00:06:14,639
and

156
00:06:14,639 --> 00:06:16,880
one interesting point that can be

157
00:06:16,880 --> 00:06:18,720
observed also from my findings is the

158
00:06:18,720 --> 00:06:21,600
fact that every analyzed families

159
00:06:21,600 --> 00:06:23,919
append a specific piece of information

160
00:06:23,919 --> 00:06:26,319
at each encrypted file and this piece

161
00:06:26,319 --> 00:06:29,039
information is needed for the crypto to

162
00:06:29,039 --> 00:06:31,280
work

163
00:06:31,680 --> 00:06:34,080
okay i am starting the talk with a

164
00:06:34,080 --> 00:06:37,199
little eevee concept but if you follow

165
00:06:37,199 --> 00:06:38,080
me

166
00:06:38,080 --> 00:06:39,840
i think that you will find it

167
00:06:39,840 --> 00:06:41,120
interesting

168
00:06:41,120 --> 00:06:44,160
and now i am going to show what are the

169
00:06:44,160 --> 00:06:46,560
difference between the usage of rsa and

170
00:06:46,560 --> 00:06:49,199
usage of elliptic coordinate film

171
00:06:49,199 --> 00:06:51,919
i'm not a mathematician guy okay i'm not

172
00:06:51,919 --> 00:06:54,639
gonna use any any formula but

173
00:06:54,639 --> 00:06:56,560
please stay with me and

174
00:06:56,560 --> 00:06:59,199
you will see that's an interesting thing

175
00:06:59,199 --> 00:07:01,759
okay whenever a runs were

176
00:07:01,759 --> 00:07:03,840
this is what happens in the ransomware

177
00:07:03,840 --> 00:07:06,080
that implements rsa as a asymmetric

178
00:07:06,080 --> 00:07:07,599
encryption

179
00:07:07,599 --> 00:07:09,280
when an answer wants to encrypt a file

180
00:07:09,280 --> 00:07:12,400
like the secret txt content

181
00:07:12,400 --> 00:07:14,479
they perform the encryption the

182
00:07:14,479 --> 00:07:16,319
detection they do is symmetric because

183
00:07:16,319 --> 00:07:18,560
symmetric encryption is very fast

184
00:07:18,560 --> 00:07:20,880
compared to a symmetric encryption

185
00:07:20,880 --> 00:07:23,120
so they feed the data input of the

186
00:07:23,120 --> 00:07:25,280
content of the file and defeat as input

187
00:07:25,280 --> 00:07:27,599
key the symmetric key

188
00:07:27,599 --> 00:07:29,599
and then the output is what the

189
00:07:29,599 --> 00:07:32,560
encrypted buffer of the file and is put

190
00:07:32,560 --> 00:07:34,639
inside the encrypted file that is

191
00:07:34,639 --> 00:07:37,039
cigarette 60 encrypted

192
00:07:37,039 --> 00:07:39,680
but the problem is where the how the

193
00:07:39,680 --> 00:07:41,520
ransomware operator are protected the

194
00:07:41,520 --> 00:07:42,479
most

195
00:07:42,479 --> 00:07:44,319
crucial piece of information here that

196
00:07:44,319 --> 00:07:46,960
is the symmetric key and here is ready

197
00:07:46,960 --> 00:07:49,120
when it comes into the build into the

198
00:07:49,120 --> 00:07:52,000
play the asymmetric encryption

199
00:07:52,000 --> 00:07:56,879
so how they do it with rsa the operator

200
00:07:56,879 --> 00:07:59,199
what they what they do is to they

201
00:07:59,199 --> 00:08:02,479
usually use builders to create their

202
00:08:02,479 --> 00:08:05,199
ransomware payloads they locker so this

203
00:08:05,199 --> 00:08:06,960
is an offline operation they do so

204
00:08:06,960 --> 00:08:08,800
whenever they have to compromise a

205
00:08:08,800 --> 00:08:11,520
company they generate a couple of rsa

206
00:08:11,520 --> 00:08:14,000
public key that is the public key and

207
00:08:14,000 --> 00:08:15,759
the private key

208
00:08:15,759 --> 00:08:17,440
the public key is the one that is

209
00:08:17,440 --> 00:08:19,520
embedded in the runs where executable in

210
00:08:19,520 --> 00:08:21,280
the locker and the private key is the

211
00:08:21,280 --> 00:08:23,280
one that is kept in secret to the

212
00:08:23,280 --> 00:08:24,720
attacker

213
00:08:24,720 --> 00:08:26,960
when the ransomware payload is developed

214
00:08:26,960 --> 00:08:28,639
deployed to the infrastructure to

215
00:08:28,639 --> 00:08:30,400
disrupt the services

216
00:08:30,400 --> 00:08:32,799
what it happens is that

217
00:08:32,799 --> 00:08:36,080
the payload generate a random buffer key

218
00:08:36,080 --> 00:08:39,039
that would be used as the symmetric key

219
00:08:39,039 --> 00:08:40,799
okay

220
00:08:40,799 --> 00:08:42,958
and the next operation is to protect

221
00:08:42,958 --> 00:08:44,880
this piece of information and how they

222
00:08:44,880 --> 00:08:45,839
do it

223
00:08:45,839 --> 00:08:48,959
they use rsa okay and in the rest

224
00:08:48,959 --> 00:08:52,320
encryption what they are providing as

225
00:08:52,320 --> 00:08:54,080
input parameters they are providing of

226
00:08:54,080 --> 00:08:56,320
course the random key that must be

227
00:08:56,320 --> 00:08:57,519
encrypted

228
00:08:57,519 --> 00:08:59,600
and the public key that is the one that

229
00:08:59,600 --> 00:09:03,360
is embedded in the ransomware payload

230
00:09:03,360 --> 00:09:05,760
and last but not least the data output

231
00:09:05,760 --> 00:09:08,480
that is the symmetric key encrypted is

232
00:09:08,480 --> 00:09:10,399
appended to the end of the encrypted

233
00:09:10,399 --> 00:09:13,120
file okay this is a very crucial

234
00:09:13,120 --> 00:09:15,279
operation otherwise the ransomware

235
00:09:15,279 --> 00:09:17,600
couldn't recover anymore the the the

236
00:09:17,600 --> 00:09:19,680
file exactly

237
00:09:19,680 --> 00:09:21,920
then of course the handsomer destroy the

238
00:09:21,920 --> 00:09:24,160
key from the memory and

239
00:09:24,160 --> 00:09:26,000
the only things that remains to decrypt

240
00:09:26,000 --> 00:09:28,720
this file are the encrypted symmetric

241
00:09:28,720 --> 00:09:30,560
key that is appended to the end of the

242
00:09:30,560 --> 00:09:31,440
file

243
00:09:31,440 --> 00:09:34,399
how the inverse operation works

244
00:09:34,399 --> 00:09:37,519
basically the decryptor of the of the

245
00:09:37,519 --> 00:09:39,920
protector will perform an eraser

246
00:09:39,920 --> 00:09:42,880
decryption award

247
00:09:43,200 --> 00:09:45,360
providing the input key the private key

248
00:09:45,360 --> 00:09:47,360
that was kept in secret so he is the

249
00:09:47,360 --> 00:09:50,399
only one that holds this piece of

250
00:09:50,399 --> 00:09:52,000
information

251
00:09:52,000 --> 00:09:53,600
and the providers are input what the

252
00:09:53,600 --> 00:09:55,680
encrypted symmetric key

253
00:09:55,680 --> 00:09:58,160
and as output is a it has the symmetric

254
00:09:58,160 --> 00:10:00,480
key and it can invert the operation and

255
00:10:00,480 --> 00:10:02,800
can restore the file okay this is what

256
00:10:02,800 --> 00:10:05,279
has been happening in the last years of

257
00:10:05,279 --> 00:10:06,880
ransomware developments

258
00:10:06,880 --> 00:10:08,720
now let's see what is the evolution with

259
00:10:08,720 --> 00:10:10,800
the elliptic core defiant it's a bit

260
00:10:10,800 --> 00:10:15,199
more convoluted but it's more effective

261
00:10:15,440 --> 00:10:17,440
okay this is what i was saying only this

262
00:10:17,440 --> 00:10:18,959
key can decrypt this piece of

263
00:10:18,959 --> 00:10:20,560
information and allow to decrypt the

264
00:10:20,560 --> 00:10:22,880
files

265
00:10:24,640 --> 00:10:26,880
okay when elliptic curve dc element we

266
00:10:26,880 --> 00:10:28,320
have the same

267
00:10:28,320 --> 00:10:29,360
uh

268
00:10:29,360 --> 00:10:31,120
operation the symmetric encryption what

269
00:10:31,120 --> 00:10:32,959
it changes it's the asymmetric

270
00:10:32,959 --> 00:10:35,120
encryption and it's the one i'm showing

271
00:10:35,120 --> 00:10:36,880
at the bottom

272
00:10:36,880 --> 00:10:39,680
so the operator now is using lip core

273
00:10:39,680 --> 00:10:42,560
the field to in the case setup phase so

274
00:10:42,560 --> 00:10:45,040
they are generating what a couple of

275
00:10:45,040 --> 00:10:47,519
elective court keys that are the public

276
00:10:47,519 --> 00:10:49,600
key master key and the private key the

277
00:10:49,600 --> 00:10:51,440
master key

278
00:10:51,440 --> 00:10:53,040
then of course the public key is

279
00:10:53,040 --> 00:10:54,720
embedded in the ransomware payload also

280
00:10:54,720 --> 00:10:58,320
this in this example

281
00:10:58,320 --> 00:11:00,560
then the answer payload is the deployed

282
00:11:00,560 --> 00:11:01,680
to the machine

283
00:11:01,680 --> 00:11:04,000
and once the transfer is executing the

284
00:11:04,000 --> 00:11:05,760
machine it's

285
00:11:05,760 --> 00:11:09,200
generating another couple of keys okay

286
00:11:09,200 --> 00:11:10,720
and this couple of keys that are

287
00:11:10,720 --> 00:11:13,200
ephemeral keys so ephemeral means that

288
00:11:13,200 --> 00:11:15,440
are used for a single session but in

289
00:11:15,440 --> 00:11:17,600
this case the runs were not encrypting

290
00:11:17,600 --> 00:11:20,079
any session their session is the file

291
00:11:20,079 --> 00:11:21,120
okay

292
00:11:21,120 --> 00:11:24,240
and what they do is to

293
00:11:24,240 --> 00:11:26,480
generate the shared key

294
00:11:26,480 --> 00:11:28,800
using elliptic uh coordination with the

295
00:11:28,800 --> 00:11:30,880
k agreement uh face

296
00:11:30,880 --> 00:11:32,959
in which they provide what

297
00:11:32,959 --> 00:11:34,320
they provide the private key that has

298
00:11:34,320 --> 00:11:36,720
been generated on the system

299
00:11:36,720 --> 00:11:39,200
and the public key that is embedded in

300
00:11:39,200 --> 00:11:40,800
the ransomware payload

301
00:11:40,800 --> 00:11:42,640
in this way the shared key that is this

302
00:11:42,640 --> 00:11:44,800
is the shared secret that is generated

303
00:11:44,800 --> 00:11:45,760
by

304
00:11:45,760 --> 00:11:48,000
the elliptic curve

305
00:11:48,000 --> 00:11:50,079
the field mca agreement

306
00:11:50,079 --> 00:11:52,079
is actually and is used as a symmetric

307
00:11:52,079 --> 00:11:54,800
key okay it's it's

308
00:11:54,800 --> 00:11:57,200
the same goal of rsa but it's a bit more

309
00:11:57,200 --> 00:11:59,200
convoluted

310
00:11:59,200 --> 00:12:01,839
and in the end the what is appended to

311
00:12:01,839 --> 00:12:03,440
the end of the file instead of appending

312
00:12:03,440 --> 00:12:05,680
the encrypted privacy they append only

313
00:12:05,680 --> 00:12:07,120
the public key

314
00:12:07,120 --> 00:12:09,600
this is much more better from a

315
00:12:09,600 --> 00:12:11,440
security perspective of the encryption

316
00:12:11,440 --> 00:12:12,880
protocol

317
00:12:12,880 --> 00:12:15,279
and in the end of course the key

318
00:12:15,279 --> 00:12:18,160
to recover the symmetric key are

319
00:12:18,160 --> 00:12:20,480
destroyed from the memory and what is

320
00:12:20,480 --> 00:12:21,360
left

321
00:12:21,360 --> 00:12:24,079
to restore the file it's what i'm

322
00:12:24,079 --> 00:12:25,839
showing here okay

323
00:12:25,839 --> 00:12:29,120
so how the decryption could occur with

324
00:12:29,120 --> 00:12:31,440
all only this information remaining on

325
00:12:31,440 --> 00:12:33,120
the system

326
00:12:33,120 --> 00:12:35,519
the ransomware when yes when the

327
00:12:35,519 --> 00:12:37,760
transfer operator when it develops his

328
00:12:37,760 --> 00:12:39,600
decryptor is

329
00:12:39,600 --> 00:12:41,839
using another another time elliptical

330
00:12:41,839 --> 00:12:43,680
dpl key agreement

331
00:12:43,680 --> 00:12:45,760
and it provides what as i input the

332
00:12:45,760 --> 00:12:47,920
private key that he kept secret on his

333
00:12:47,920 --> 00:12:49,120
server

334
00:12:49,120 --> 00:12:52,399
and as a public key it reads the key

335
00:12:52,399 --> 00:12:55,360
from the uh file folder okay

336
00:12:55,360 --> 00:12:57,120
and this way the shared key that is

337
00:12:57,120 --> 00:12:59,680
computed is the same key that has been

338
00:12:59,680 --> 00:13:01,760
used for the encryption okay this is the

339
00:13:01,760 --> 00:13:03,839
magic black magic of

340
00:13:03,839 --> 00:13:07,360
elliptic core okay this is a nice thing

341
00:13:07,360 --> 00:13:09,040
and of course the operation in this way

342
00:13:09,040 --> 00:13:11,839
can be inverted

343
00:13:12,959 --> 00:13:14,959
what are the main difference between rsa

344
00:13:14,959 --> 00:13:17,839
and elliptic or difficult is that the

345
00:13:17,839 --> 00:13:20,560
symmetric key never touches the disk

346
00:13:20,560 --> 00:13:23,360
because in rsa that piece of information

347
00:13:23,360 --> 00:13:25,360
you can see in the file footer

348
00:13:25,360 --> 00:13:27,600
is the encrypted key with rsa in this

349
00:13:27,600 --> 00:13:29,440
case we have just a public key olympic

350
00:13:29,440 --> 00:13:30,800
curve

351
00:13:30,800 --> 00:13:32,800
and it's it provides

352
00:13:32,800 --> 00:13:36,240
stronger encryption scheme

353
00:13:36,320 --> 00:13:37,680
okay

354
00:13:37,680 --> 00:13:39,120
going uh

355
00:13:39,120 --> 00:13:41,199
to the next trend that has been

356
00:13:41,199 --> 00:13:43,760
identified in my research is the

357
00:13:43,760 --> 00:13:45,839
automatic discovery of internal

358
00:13:45,839 --> 00:13:48,639
resources to target so every ransomware

359
00:13:48,639 --> 00:13:51,360
bundle a way to perform an internal

360
00:13:51,360 --> 00:13:54,000
enumeration of the resources to encrypt

361
00:13:54,000 --> 00:13:57,199
the common trend is to identify

362
00:13:57,199 --> 00:13:59,279
all of the local directories and the

363
00:13:59,279 --> 00:14:01,839
remote shares this is the most

364
00:14:01,839 --> 00:14:03,680
it's almost normal for a runs who are

365
00:14:03,680 --> 00:14:05,199
doing this operation

366
00:14:05,199 --> 00:14:06,720
instead there are some unique

367
00:14:06,720 --> 00:14:08,959
implementation that performs a more

368
00:14:08,959 --> 00:14:11,279
in-depth sect like black matter

369
00:14:11,279 --> 00:14:12,639
and conti

370
00:14:12,639 --> 00:14:15,360
black matter for example uses ldap to

371
00:14:15,360 --> 00:14:17,680
query the machine register to the active

372
00:14:17,680 --> 00:14:19,839
directory and then try to infect the

373
00:14:19,839 --> 00:14:23,120
remote shares cont instead retrieves

374
00:14:23,120 --> 00:14:24,320
the

375
00:14:24,320 --> 00:14:27,040
network addresses from the local arc

376
00:14:27,040 --> 00:14:31,839
table so it's more a network propagation

377
00:14:32,480 --> 00:14:34,320
okay i'm going very quickly this is the

378
00:14:34,320 --> 00:14:37,120
reversed code of our black matter

379
00:14:37,120 --> 00:14:40,240
query the ldap servers to get

380
00:14:40,240 --> 00:14:42,800
the the computers to invest so they are

381
00:14:42,800 --> 00:14:45,440
using ids openobject they are connected

382
00:14:45,440 --> 00:14:49,199
to the ldap root dsa

383
00:14:49,199 --> 00:14:52,959
context then they are querying the cn

384
00:14:52,959 --> 00:14:54,160
computers

385
00:14:54,160 --> 00:14:57,600
and the returned value it's a numerator

386
00:14:57,600 --> 00:14:59,600
that by just enumerating over this

387
00:14:59,600 --> 00:15:01,600
structure will retreat will give you

388
00:15:01,600 --> 00:15:03,920
back all the machine register to the

389
00:15:03,920 --> 00:15:06,639
infrastructure

390
00:15:08,240 --> 00:15:10,399
the third

391
00:15:10,399 --> 00:15:12,320
trend that has been observed is the fact

392
00:15:12,320 --> 00:15:14,480
that all of the

393
00:15:14,480 --> 00:15:16,800
identified ransomware puts so much

394
00:15:16,800 --> 00:15:19,199
effort in the task parallelization of

395
00:15:19,199 --> 00:15:20,720
the data encryption

396
00:15:20,720 --> 00:15:23,120
the main motivation around this is the

397
00:15:23,120 --> 00:15:25,680
fact that in this way that encryption

398
00:15:25,680 --> 00:15:26,959
goes that

399
00:15:26,959 --> 00:15:28,240
that fast

400
00:15:28,240 --> 00:15:29,040
that

401
00:15:29,040 --> 00:15:31,120
it shorten the time of reaction of the

402
00:15:31,120 --> 00:15:32,639
security team of the compromised

403
00:15:32,639 --> 00:15:35,120
infrastructure

404
00:15:35,120 --> 00:15:36,959
all of the runs over implementation

405
00:15:36,959 --> 00:15:38,959
prefer a native multi-threading approach

406
00:15:38,959 --> 00:15:41,279
instead of using multi-processes because

407
00:15:41,279 --> 00:15:44,320
multi-processes it's quite noisy

408
00:15:44,320 --> 00:15:47,040
and the main trends observer is the

409
00:15:47,040 --> 00:15:50,480
usage of i o completion ports that's an

410
00:15:50,480 --> 00:15:53,600
internal way that windows allow you to

411
00:15:53,600 --> 00:15:54,800
manage

412
00:15:54,800 --> 00:15:55,600
the

413
00:15:55,600 --> 00:15:57,839
synchronization and the multi multitask

414
00:15:57,839 --> 00:15:59,680
operation

415
00:15:59,680 --> 00:16:02,160
instead there are some unique

416
00:16:02,160 --> 00:16:04,079
implementations worth to mention in

417
00:16:04,079 --> 00:16:07,120
babbook for example but they do not use

418
00:16:07,120 --> 00:16:10,000
the i o completion ports instead they

419
00:16:10,000 --> 00:16:11,600
are using

420
00:16:11,600 --> 00:16:13,279
a custom implementation of the thread

421
00:16:13,279 --> 00:16:16,480
pulse with the custom queue and data

422
00:16:16,480 --> 00:16:19,279
shared data structure and this has

423
00:16:19,279 --> 00:16:21,680
less sovereign than using i o completion

424
00:16:21,680 --> 00:16:23,199
ports

425
00:16:23,199 --> 00:16:26,000
instead blackmatter uses undocumented

426
00:16:26,000 --> 00:16:28,320
windows function to increase

427
00:16:28,320 --> 00:16:31,600
its process priority and is process io

428
00:16:31,600 --> 00:16:32,880
priority

429
00:16:32,880 --> 00:16:35,199
and this what means is it means that the

430
00:16:35,199 --> 00:16:37,120
kernels when the thread from the

431
00:16:37,120 --> 00:16:38,800
ransomware came

432
00:16:38,800 --> 00:16:41,120
will prefer the scheduling of this

433
00:16:41,120 --> 00:16:43,199
thread instead of other threads of the

434
00:16:43,199 --> 00:16:45,680
system and this grant a slightly

435
00:16:45,680 --> 00:16:48,959
improvement of the performance

436
00:16:48,959 --> 00:16:51,600
okay i'm going very quickly otherwise i

437
00:16:51,600 --> 00:16:53,360
won't have time for the rest but i will

438
00:16:53,360 --> 00:16:54,959
put a slice of line this is the reverse

439
00:16:54,959 --> 00:16:57,360
set code of the undocumented function

440
00:16:57,360 --> 00:16:59,279
used by black matter

441
00:16:59,279 --> 00:17:01,440
so they basically

442
00:17:01,440 --> 00:17:04,319
are using empty set information process

443
00:17:04,319 --> 00:17:06,720
with process process io priority and the

444
00:17:06,720 --> 00:17:09,679
process i o priority eige value so

445
00:17:09,679 --> 00:17:11,199
it means that

446
00:17:11,199 --> 00:17:13,439
these threads the tries in this process

447
00:17:13,439 --> 00:17:15,679
will be privileged compared to other

448
00:17:15,679 --> 00:17:18,000
trends of the system

449
00:17:18,000 --> 00:17:20,559
the same goes to the

450
00:17:20,559 --> 00:17:22,880
priority class sorry it was inverted the

451
00:17:22,880 --> 00:17:24,400
i o priority class is for the first

452
00:17:24,400 --> 00:17:26,480
system and the priority class is for the

453
00:17:26,480 --> 00:17:29,600
trials of the ransomware

454
00:17:29,600 --> 00:17:32,000
and the value is

455
00:17:32,000 --> 00:17:34,240
a priority class above normal so as i

456
00:17:34,240 --> 00:17:36,720
told you it's it's they are preferred

457
00:17:36,720 --> 00:17:38,880
these threads instead of other trends of

458
00:17:38,880 --> 00:17:41,440
the system

459
00:17:41,440 --> 00:17:42,799
um

460
00:17:42,799 --> 00:17:46,080
last but not least and the

461
00:17:46,080 --> 00:17:47,600
the trends that has been observed is the

462
00:17:47,600 --> 00:17:50,080
fact that the ransom operator they

463
00:17:50,080 --> 00:17:53,120
develop a series of functionalities to

464
00:17:53,120 --> 00:17:55,760
uh maximize the encryption damages

465
00:17:55,760 --> 00:17:58,000
so what are the common trends the common

466
00:17:58,000 --> 00:18:01,120
trends are the fact that they kill

467
00:18:01,120 --> 00:18:03,840
a set of processes and the services

468
00:18:03,840 --> 00:18:06,320
starting from unwanted names

469
00:18:06,320 --> 00:18:07,840
okay

470
00:18:07,840 --> 00:18:10,640
so for example they kill the sql servers

471
00:18:10,640 --> 00:18:13,360
processes they kill the

472
00:18:13,360 --> 00:18:15,360
excel processes all of the processes

473
00:18:15,360 --> 00:18:18,080
that can cause locking mechanism on the

474
00:18:18,080 --> 00:18:20,799
files to be encrypted moreover for the

475
00:18:20,799 --> 00:18:22,400
unknown processes

476
00:18:22,400 --> 00:18:24,000
that are not new to your answer

477
00:18:24,000 --> 00:18:27,440
developer they leverages the

478
00:18:27,440 --> 00:18:30,080
restart manager api functionalities

479
00:18:30,080 --> 00:18:33,360
that's very interesting because

480
00:18:33,360 --> 00:18:35,360
it allows to

481
00:18:35,360 --> 00:18:38,320
get all of the processes that all log

482
00:18:38,320 --> 00:18:40,559
conditions on the files to be encrypted

483
00:18:40,559 --> 00:18:41,679
so the runs will use these

484
00:18:41,679 --> 00:18:44,240
functionalities in order to retrieve the

485
00:18:44,240 --> 00:18:46,320
speed of processes and killing these

486
00:18:46,320 --> 00:18:48,799
processes

487
00:18:49,440 --> 00:18:51,679
another common feature is the

488
00:18:51,679 --> 00:18:54,000
fact that they always erase the volume

489
00:18:54,000 --> 00:18:57,120
backups so the most common knowing as

490
00:18:57,120 --> 00:18:58,480
shadow copies

491
00:18:58,480 --> 00:19:00,000
the methods that has been observed

492
00:19:00,000 --> 00:19:02,480
mainly are the usage of westeros admin

493
00:19:02,480 --> 00:19:04,400
that is a windows utility

494
00:19:04,400 --> 00:19:06,080
in order to directly shadow copies or

495
00:19:06,080 --> 00:19:08,320
reside the shadow storage so there are

496
00:19:08,320 --> 00:19:11,440
two different approaches or they use

497
00:19:11,440 --> 00:19:14,080
auto processes com objects

498
00:19:14,080 --> 00:19:16,080
so in this way it's a more indirect way

499
00:19:16,080 --> 00:19:18,080
to delete shadow copies

500
00:19:18,080 --> 00:19:20,799
and what they do is basically

501
00:19:20,799 --> 00:19:23,520
interacting with the vss provider stroke

502
00:19:23,520 --> 00:19:26,960
the vmi services

503
00:19:28,160 --> 00:19:29,840
okay this is the public implementation

504
00:19:29,840 --> 00:19:32,559
the book has been leaked the source code

505
00:19:32,559 --> 00:19:34,799
okay so for babbook he didn't need to

506
00:19:34,799 --> 00:19:36,480
reverse anything because there was

507
00:19:36,480 --> 00:19:37,679
source code

508
00:19:37,679 --> 00:19:40,640
and this is how they implement the

509
00:19:40,640 --> 00:19:43,120
killing file localdos functionalities

510
00:19:43,120 --> 00:19:45,280
so they are basically using rm star

511
00:19:45,280 --> 00:19:47,280
session that is restart manager api

512
00:19:47,280 --> 00:19:49,520
functionalities

513
00:19:49,520 --> 00:19:51,919
they register the results in your start

514
00:19:51,919 --> 00:19:53,039
manager

515
00:19:53,039 --> 00:19:56,240
by saying okay i want to see g

516
00:19:56,240 --> 00:20:00,160
secret dot txt who is using it

517
00:20:00,160 --> 00:20:01,120
and then

518
00:20:01,120 --> 00:20:03,440
ram at least give back all of the

519
00:20:03,440 --> 00:20:07,280
processes using that file okay

520
00:20:07,280 --> 00:20:09,760
then they open that process and kill the

521
00:20:09,760 --> 00:20:12,640
process and then they encrypt the file

522
00:20:12,640 --> 00:20:15,840
very very effective

523
00:20:16,080 --> 00:20:18,320
now

524
00:20:18,640 --> 00:20:21,280
grouping all of my results

525
00:20:21,280 --> 00:20:23,679
uh this is the the key part of my

526
00:20:23,679 --> 00:20:25,760
research grouping all of the results

527
00:20:25,760 --> 00:20:29,280
extracted i have been able to uh provide

528
00:20:29,280 --> 00:20:31,679
a behavioral characterization

529
00:20:31,679 --> 00:20:33,919
so what it means is that starting from

530
00:20:33,919 --> 00:20:35,679
the four macro features

531
00:20:35,679 --> 00:20:37,840
i have been able to identify sub

532
00:20:37,840 --> 00:20:40,559
features that could be more meaningful

533
00:20:40,559 --> 00:20:42,000
for example for firing director's

534
00:20:42,000 --> 00:20:43,919
numeration how

535
00:20:43,919 --> 00:20:46,080
can be divided

536
00:20:46,080 --> 00:20:48,240
can be divided as a this subset of

537
00:20:48,240 --> 00:20:50,640
operations so mount edm volumes local

538
00:20:50,640 --> 00:20:52,080
drive enumeration remote drive

539
00:20:52,080 --> 00:20:54,799
enumeration and file enumeration

540
00:20:54,799 --> 00:20:56,720
file encryption

541
00:20:56,720 --> 00:20:59,600
has been identified this operation so

542
00:20:59,600 --> 00:21:01,280
asymmetric encryption symmetric

543
00:21:01,280 --> 00:21:03,600
encryption key randomization encrypted

544
00:21:03,600 --> 00:21:07,360
block writing and file footer writing

545
00:21:07,360 --> 00:21:09,840
for the encryption optimization

546
00:21:09,840 --> 00:21:12,720
key unwanted services kilowatt processes

547
00:21:12,720 --> 00:21:14,640
shadow copies deletion kill file lock

548
00:21:14,640 --> 00:21:18,320
holders increase process priority

549
00:21:18,320 --> 00:21:20,480
and for the encryption realization we

550
00:21:20,480 --> 00:21:22,080
have the multitrading and

551
00:21:22,080 --> 00:21:23,520
synchronization

552
00:21:23,520 --> 00:21:25,039
why i spell it

553
00:21:25,039 --> 00:21:28,000
each one because this is very important

554
00:21:28,000 --> 00:21:30,559
because as a malware analyst if you know

555
00:21:30,559 --> 00:21:32,559
what you should expect from ransomware

556
00:21:32,559 --> 00:21:35,919
it it easy your analysis because you

557
00:21:35,919 --> 00:21:37,440
already know what you are going to look

558
00:21:37,440 --> 00:21:38,799
into

559
00:21:38,799 --> 00:21:41,600
so as i told you the these four are the

560
00:21:41,600 --> 00:21:43,600
main features that i

561
00:21:43,600 --> 00:21:45,200
assume in the beginning in my threat

562
00:21:45,200 --> 00:21:48,240
model and these sub features are the

563
00:21:48,240 --> 00:21:50,559
interesting find they can be used as a

564
00:21:50,559 --> 00:21:52,240
generic characterization of the

565
00:21:52,240 --> 00:21:53,840
ransomware at least for the data

566
00:21:53,840 --> 00:21:57,240
encryption stage

567
00:21:58,799 --> 00:22:01,120
um of course the main goal was not to

568
00:22:01,120 --> 00:22:02,960
provide knowledge to malware allies

569
00:22:02,960 --> 00:22:04,320
because

570
00:22:04,320 --> 00:22:06,559
most of them are already they already

571
00:22:06,559 --> 00:22:09,520
know this this kind of operation the

572
00:22:09,520 --> 00:22:12,960
main reason was to have a threat model

573
00:22:12,960 --> 00:22:15,440
that by mapping the implementations

574
00:22:15,440 --> 00:22:18,000
could allow to spot commonalities

575
00:22:18,000 --> 00:22:19,840
between implementation

576
00:22:19,840 --> 00:22:21,440
the mapping that i'm going to show in

577
00:22:21,440 --> 00:22:24,080
the next slide has been based on the nt

578
00:22:24,080 --> 00:22:28,400
win32 api usage and

579
00:22:28,400 --> 00:22:30,640
i'm using this kind of mapping because

580
00:22:30,640 --> 00:22:33,360
with the win32 api usage

581
00:22:33,360 --> 00:22:35,919
we can understand what are the side

582
00:22:35,919 --> 00:22:38,159
effects and the telemetry that is left

583
00:22:38,159 --> 00:22:40,720
on the system and can represent for us

584
00:22:40,720 --> 00:22:43,600
defender a behavioral detection or at

585
00:22:43,600 --> 00:22:46,000
least a detection opportunity

586
00:22:46,000 --> 00:22:48,240
the goal of this mapping is to provide a

587
00:22:48,240 --> 00:22:49,840
way to recognize overlapping

588
00:22:49,840 --> 00:22:52,960
implementation across families and these

589
00:22:52,960 --> 00:22:54,720
development of effective detection to

590
00:22:54,720 --> 00:22:56,159
identify ransomware behavioral

591
00:22:56,159 --> 00:22:59,200
commonalities okay

592
00:22:59,679 --> 00:23:01,360
okay

593
00:23:01,360 --> 00:23:02,480
i have

594
00:23:02,480 --> 00:23:03,280
this

595
00:23:03,280 --> 00:23:06,000
it's a big excel okay i have put a tree

596
00:23:06,000 --> 00:23:08,240
bottom the public spreadsheet with all

597
00:23:08,240 --> 00:23:09,600
the results so maybe after the

598
00:23:09,600 --> 00:23:12,240
presentation you can consult it

599
00:23:12,240 --> 00:23:15,039
but i want to present you

600
00:23:15,039 --> 00:23:18,000
the main the the main results

601
00:23:18,000 --> 00:23:19,440
these are the results for defining

602
00:23:19,440 --> 00:23:21,520
directory enumeration micro features so

603
00:23:21,520 --> 00:23:23,520
what we have in this table we have in

604
00:23:23,520 --> 00:23:25,600
the first column the sub feature so the

605
00:23:25,600 --> 00:23:27,280
biological trees that show in the glass

606
00:23:27,280 --> 00:23:30,880
slide in implementation are the win32

607
00:23:30,880 --> 00:23:32,320
they are the implementation and the

608
00:23:32,320 --> 00:23:34,320
implementation has been based on the

609
00:23:34,320 --> 00:23:36,960
function used by on the operating system

610
00:23:36,960 --> 00:23:39,120
and the other columns are the analyzed

611
00:23:39,120 --> 00:23:40,799
families so bubbles that matter

612
00:23:40,799 --> 00:23:42,880
continual

613
00:23:42,880 --> 00:23:45,600
what we can observe

614
00:23:45,600 --> 00:23:48,320
these are the point of interest because

615
00:23:48,320 --> 00:23:49,679
as you can see the local drive

616
00:23:49,679 --> 00:23:52,320
enumeration and the file enumeration are

617
00:23:52,320 --> 00:23:53,360
using

618
00:23:53,360 --> 00:23:55,919
the same implementation okay so if we

619
00:23:55,919 --> 00:23:58,159
identify this operation we are sure we

620
00:23:58,159 --> 00:24:00,159
are identifying almost all of the

621
00:24:00,159 --> 00:24:02,559
ransomware families

622
00:24:02,559 --> 00:24:04,000
these are the results for the e-file

623
00:24:04,000 --> 00:24:05,919
encryption

624
00:24:05,919 --> 00:24:07,440
and an interesting observation of the

625
00:24:07,440 --> 00:24:09,840
field encryption because the funny thing

626
00:24:09,840 --> 00:24:11,760
is that my research was based on the

627
00:24:11,760 --> 00:24:13,840
encryption and i thought that i was

628
00:24:13,840 --> 00:24:16,159
going to find something interesting in

629
00:24:16,159 --> 00:24:18,240
the encryption so the asymmetric

630
00:24:18,240 --> 00:24:19,840
asymmetric encryption the one you see in

631
00:24:19,840 --> 00:24:20,799
the left

632
00:24:20,799 --> 00:24:22,799
but the problem as

633
00:24:22,799 --> 00:24:25,520
as now i can see and you can see too is

634
00:24:25,520 --> 00:24:27,360
that every answer is doing whatever they

635
00:24:27,360 --> 00:24:29,440
want so this

636
00:24:29,440 --> 00:24:32,000
is not providing us any detection

637
00:24:32,000 --> 00:24:34,000
opportunities

638
00:24:34,000 --> 00:24:36,960
and instead these sub features that

639
00:24:36,960 --> 00:24:39,679
allows to

640
00:24:39,679 --> 00:24:41,760
they are helper features but are still

641
00:24:41,760 --> 00:24:43,679
detailed to write an encrypted content

642
00:24:43,679 --> 00:24:46,080
back to the file they are some let's say

643
00:24:46,080 --> 00:24:47,840
vulnerabilities because they used all of

644
00:24:47,840 --> 00:24:50,159
this implementation and in next slides i

645
00:24:50,159 --> 00:24:52,240
will show you some behavioral detection

646
00:24:52,240 --> 00:24:53,840
based on this overlapping on these

647
00:24:53,840 --> 00:24:56,240
commonalities

648
00:24:56,240 --> 00:24:57,760
these instead are the results for the

649
00:24:57,760 --> 00:25:00,720
encryption optimization

650
00:25:00,720 --> 00:25:02,880
and one of the interests are the one on

651
00:25:02,880 --> 00:25:04,400
the right the

652
00:25:04,400 --> 00:25:07,200
restart manager uh api usage because

653
00:25:07,200 --> 00:25:09,840
it's used by every ransomware and it's

654
00:25:09,840 --> 00:25:12,000
if you think about it around

655
00:25:12,000 --> 00:25:14,080
can make a lot of damages without using

656
00:25:14,080 --> 00:25:17,200
restart manager api but the goal of the

657
00:25:17,200 --> 00:25:20,000
ransomware they are developers too so

658
00:25:20,000 --> 00:25:21,520
they try to be

659
00:25:21,520 --> 00:25:24,559
uh to build their software as

660
00:25:24,559 --> 00:25:26,960
much better as they can and these can be

661
00:25:26,960 --> 00:25:29,520
used by us defender to create detection

662
00:25:29,520 --> 00:25:31,919
around it

663
00:25:31,919 --> 00:25:33,760
and this is the last category last

664
00:25:33,760 --> 00:25:36,080
feature encryption parallelization that

665
00:25:36,080 --> 00:25:37,360
has the

666
00:25:37,360 --> 00:25:38,880
uh some commonalities in the

667
00:25:38,880 --> 00:25:41,279
multi-threading implementation but

668
00:25:41,279 --> 00:25:44,080
for this kind of feature i do not

669
00:25:44,080 --> 00:25:46,080
recommend to use it for detection

670
00:25:46,080 --> 00:25:48,000
opportunities because

671
00:25:48,000 --> 00:25:50,240
this kind of implementation

672
00:25:50,240 --> 00:25:53,279
are hard to discern between banning

673
00:25:53,279 --> 00:25:57,200
usage and malicious usage but no it's

674
00:25:57,200 --> 00:25:59,440
there

675
00:26:00,240 --> 00:26:03,279
okay now it's the last chapter of

676
00:26:03,279 --> 00:26:05,600
this presentation in which

677
00:26:05,600 --> 00:26:08,080
i'm going to

678
00:26:08,080 --> 00:26:10,000
give some recommendation on the

679
00:26:10,000 --> 00:26:12,080
behavioral detection that are based on

680
00:26:12,080 --> 00:26:14,559
the overlapping implementation okay

681
00:26:14,559 --> 00:26:16,320
now things is going to be a little bit

682
00:26:16,320 --> 00:26:19,760
more technical but i think that

683
00:26:19,760 --> 00:26:22,080
it's fun stuff so if you follow me you

684
00:26:22,080 --> 00:26:24,559
can find it very interesting consider

685
00:26:24,559 --> 00:26:25,840
that

686
00:26:25,840 --> 00:26:28,480
all of the behavioral detection that

687
00:26:28,480 --> 00:26:32,080
we will see now are based on the

688
00:26:32,080 --> 00:26:34,880
telemetry that usually an antivirus

689
00:26:34,880 --> 00:26:37,760
engine or an adr engine can get so it's

690
00:26:37,760 --> 00:26:40,320
very deep telemetry i'm not expecting

691
00:26:40,320 --> 00:26:43,600
that a stock analyst can use this as a

692
00:26:43,600 --> 00:26:46,639
bureau detection okay

693
00:26:47,600 --> 00:26:49,840
so starting from the tables i showed

694
00:26:49,840 --> 00:26:51,679
before these are the ones that are

695
00:26:51,679 --> 00:26:54,880
overlapping so i'm going

696
00:26:54,880 --> 00:26:57,600
to uh present four different behavioral

697
00:26:57,600 --> 00:26:58,960
detection one based on default

698
00:26:58,960 --> 00:27:00,960
numeration one base and indicator

699
00:27:00,960 --> 00:27:02,960
randomization one based on the five

700
00:27:02,960 --> 00:27:04,960
footer writing and one based on kill

701
00:27:04,960 --> 00:27:06,559
file lock holders

702
00:27:06,559 --> 00:27:08,480
as you can see the the naming of the sub

703
00:27:08,480 --> 00:27:11,120
features it's quite self-explanatory

704
00:27:11,120 --> 00:27:13,360
okay

705
00:27:13,520 --> 00:27:15,919
let's start with the first one

706
00:27:15,919 --> 00:27:19,360
the file enumeration detection

707
00:27:19,360 --> 00:27:22,080
what has been observed observed is that

708
00:27:22,080 --> 00:27:25,360
every ransomware perform the sub feature

709
00:27:25,360 --> 00:27:28,240
file numeration with a sequence of

710
00:27:28,240 --> 00:27:29,840
uh this

711
00:27:29,840 --> 00:27:32,080
api call that is find first file x and

712
00:27:32,080 --> 00:27:35,760
find next file in find first file x

713
00:27:35,760 --> 00:27:39,360
the inputs we have are the drive the

714
00:27:39,360 --> 00:27:41,840
directory and then there is the wildcard

715
00:27:41,840 --> 00:27:44,000
character that allows to vote to

716
00:27:44,000 --> 00:27:45,360
enumerate all the directory on the

717
00:27:45,360 --> 00:27:46,320
system

718
00:27:46,320 --> 00:27:47,919
and find next file is keeping the

719
00:27:47,919 --> 00:27:51,200
request the recursion going on

720
00:27:51,200 --> 00:27:53,440
the usage of this particular function

721
00:27:53,440 --> 00:27:54,640
with this

722
00:27:54,640 --> 00:27:58,640
uh value the wildcard the char

723
00:27:58,640 --> 00:28:01,520
uh generate a specific here at re-kernel

724
00:28:01,520 --> 00:28:02,399
level

725
00:28:02,399 --> 00:28:04,320
what is ir for those who are not

726
00:28:04,320 --> 00:28:06,159
familiar irp is

727
00:28:06,159 --> 00:28:07,440
a packet

728
00:28:07,440 --> 00:28:11,279
that contains all of the information

729
00:28:11,279 --> 00:28:13,600
describing an operational default system

730
00:28:13,600 --> 00:28:15,279
so anearp will contain

731
00:28:15,279 --> 00:28:18,480
operation file creation pad pad

732
00:28:18,480 --> 00:28:20,240
like secret

733
00:28:20,240 --> 00:28:22,080
length of the of the right and so on and

734
00:28:22,080 --> 00:28:22,960
so on

735
00:28:22,960 --> 00:28:24,640
and why we are interested in this kind

736
00:28:24,640 --> 00:28:27,279
of telemetry because kernel detection is

737
00:28:27,279 --> 00:28:28,840
what you are looking for

738
00:28:28,840 --> 00:28:30,799
usually

739
00:28:30,799 --> 00:28:33,679
this is a screenshot from brockman

740
00:28:33,679 --> 00:28:37,120
and this is the exactly the operation

741
00:28:37,120 --> 00:28:39,120
generated by

742
00:28:39,120 --> 00:28:41,520
this file enumeration by a ransomware so

743
00:28:41,520 --> 00:28:42,559
what we have here we have the

744
00:28:42,559 --> 00:28:45,360
operational directory control

745
00:28:45,360 --> 00:28:46,960
and the file information class file both

746
00:28:46,960 --> 00:28:48,880
directory information and the filter is

747
00:28:48,880 --> 00:28:52,000
a star okay so we can identify identify

748
00:28:52,000 --> 00:28:54,080
the file numeration by just monitoring

749
00:28:54,080 --> 00:28:56,320
this kind of events

750
00:28:56,320 --> 00:28:57,919
what is the problem with this approach

751
00:28:57,919 --> 00:28:59,679
is that

752
00:28:59,679 --> 00:29:01,440
it's not just only the ransomware that

753
00:29:01,440 --> 00:29:03,120
enumerate the file on the system or

754
00:29:03,120 --> 00:29:05,520
directories even backup software do it

755
00:29:05,520 --> 00:29:06,320
okay

756
00:29:06,320 --> 00:29:08,240
so we need a way to discern between the

757
00:29:08,240 --> 00:29:09,120
two

758
00:29:09,120 --> 00:29:10,960
between the two uh

759
00:29:10,960 --> 00:29:12,080
gabriels

760
00:29:12,080 --> 00:29:14,960
and here is where it comes into the play

761
00:29:14,960 --> 00:29:16,960
the concept of cross drive for the

762
00:29:16,960 --> 00:29:19,279
numeration because

763
00:29:19,279 --> 00:29:21,360
every ransomware before doing the

764
00:29:21,360 --> 00:29:23,440
enumeration of all the folders

765
00:29:23,440 --> 00:29:26,720
what they do is to trying to reach as

766
00:29:26,720 --> 00:29:29,520
much resources as they can so they try

767
00:29:29,520 --> 00:29:31,600
to mount remote shares they try to

768
00:29:31,600 --> 00:29:33,919
lateral lateral movements to other

769
00:29:33,919 --> 00:29:35,760
systems and they

770
00:29:35,760 --> 00:29:38,640
are going to spread the numeration over

771
00:29:38,640 --> 00:29:40,640
all of these resources

772
00:29:40,640 --> 00:29:42,559
and this is of course not something that

773
00:29:42,559 --> 00:29:45,279
does uh backup software and it's more

774
00:29:45,279 --> 00:29:48,159
related of course to to uh ransomware

775
00:29:48,159 --> 00:29:50,240
behavior

776
00:29:50,240 --> 00:29:51,919
and the advantage of this kind of

777
00:29:51,919 --> 00:29:53,919
detection is that the as i told you

778
00:29:53,919 --> 00:29:56,720
before that action spot occurs at a tree

779
00:29:56,720 --> 00:29:59,039
kernel level the kernel level is what we

780
00:29:59,039 --> 00:30:02,559
are looking for as a defender

781
00:30:03,200 --> 00:30:05,360
okay this is uh

782
00:30:05,360 --> 00:30:07,679
i'm showing you process monitor capture

783
00:30:07,679 --> 00:30:09,679
because are very easy

784
00:30:09,679 --> 00:30:12,399
to compare to what you can develop in

785
00:30:12,399 --> 00:30:14,320
your abbey engine okay if you develop a

786
00:30:14,320 --> 00:30:16,080
mini filter driver you can get the same

787
00:30:16,080 --> 00:30:18,000
result of brockman

788
00:30:18,000 --> 00:30:20,720
in this case it's a bubble execution i

789
00:30:20,720 --> 00:30:22,799
have filtered out operation of directory

790
00:30:22,799 --> 00:30:24,559
control and you can see that all of the

791
00:30:24,559 --> 00:30:26,240
directories are

792
00:30:26,240 --> 00:30:29,039
being enumerated by using the star uh

793
00:30:29,039 --> 00:30:30,480
wildcard

794
00:30:30,480 --> 00:30:32,399
what is the anonymity

795
00:30:32,399 --> 00:30:34,320
the anomaly is that this kind of

796
00:30:34,320 --> 00:30:36,559
operation is dispatched to all of the

797
00:30:36,559 --> 00:30:39,200
drives c drive and drive and drive

798
00:30:39,200 --> 00:30:42,399
shared a shared drive like vmware rust

799
00:30:42,399 --> 00:30:44,720
even the recovery drive is getting

800
00:30:44,720 --> 00:30:46,640
encrypted okay this is this is quite

801
00:30:46,640 --> 00:30:48,960
weird

802
00:30:49,279 --> 00:30:51,279
the second detection is the file footer

803
00:30:51,279 --> 00:30:53,039
writing detection

804
00:30:53,039 --> 00:30:56,000
and it's based on what is shown in the

805
00:30:56,000 --> 00:30:58,640
encryption all of the graph about

806
00:30:58,640 --> 00:31:01,600
encryption so every ransomware append a

807
00:31:01,600 --> 00:31:03,360
piece of information a very important

808
00:31:03,360 --> 00:31:04,399
piece of information

809
00:31:04,399 --> 00:31:07,120
at the end of every encrypted file

810
00:31:07,120 --> 00:31:10,000
and these can be attacked and can be

811
00:31:10,000 --> 00:31:12,799
took as a detection opportunity how they

812
00:31:12,799 --> 00:31:14,640
do it with the same implementation they

813
00:31:14,640 --> 00:31:16,640
use set file pointer x and they use the

814
00:31:16,640 --> 00:31:19,360
constant file end so they are just

815
00:31:19,360 --> 00:31:20,960
telling the file pointer to go to the

816
00:31:20,960 --> 00:31:22,320
end of the file

817
00:31:22,320 --> 00:31:24,399
and then they use the right file where

818
00:31:24,399 --> 00:31:26,640
they write the file footer struct that

819
00:31:26,640 --> 00:31:29,039
usually contains the private key and

820
00:31:29,039 --> 00:31:31,200
some other information and then the

821
00:31:31,200 --> 00:31:33,679
sides over the right is the size of

822
00:31:33,679 --> 00:31:36,159
the tract okay

823
00:31:36,159 --> 00:31:39,279
and also in this case we can inspect

824
00:31:39,279 --> 00:31:41,440
this generate a specific telemetry at

825
00:31:41,440 --> 00:31:43,600
the kernel level so we have

826
00:31:43,600 --> 00:31:46,240
ayerp at kernel level but in this case

827
00:31:46,240 --> 00:31:48,320
it's different between compared to the

828
00:31:48,320 --> 00:31:49,919
previous wine

829
00:31:49,919 --> 00:31:52,960
now we have the right operation of the

830
00:31:52,960 --> 00:31:53,919
earp

831
00:31:53,919 --> 00:31:55,519
and instead

832
00:31:55,519 --> 00:31:56,880
the

833
00:31:56,880 --> 00:31:58,640
parameters of the earth interesting

834
00:31:58,640 --> 00:32:00,880
water the offset that points at the end

835
00:32:00,880 --> 00:32:02,640
of the file

836
00:32:02,640 --> 00:32:05,440
and the knight e6 is actually the struct

837
00:32:05,440 --> 00:32:08,720
that contains the private key

838
00:32:10,799 --> 00:32:12,240
so how

839
00:32:12,240 --> 00:32:14,559
how we recognize this kind of append

840
00:32:14,559 --> 00:32:16,880
operation in an effective way

841
00:32:16,880 --> 00:32:19,760
if we intercept this kind of write

842
00:32:19,760 --> 00:32:23,120
before a bright occurs okay

843
00:32:23,120 --> 00:32:26,159
we can check the byte offset parameter

844
00:32:26,159 --> 00:32:28,960
and if is equal to the actual size of

845
00:32:28,960 --> 00:32:31,519
the file most most probably is an append

846
00:32:31,519 --> 00:32:33,840
operation then we get the length

847
00:32:33,840 --> 00:32:36,399
parameter and this is the

848
00:32:36,399 --> 00:32:39,039
uh structure length

849
00:32:39,039 --> 00:32:42,880
and in this way we are

850
00:32:42,880 --> 00:32:46,000
let's say aggregating information about

851
00:32:46,000 --> 00:32:47,919
the structure that has been appended to

852
00:32:47,919 --> 00:32:49,279
the files

853
00:32:49,279 --> 00:32:50,640
unfortunately

854
00:32:50,640 --> 00:32:51,760
this

855
00:32:51,760 --> 00:32:53,760
structure size is different between the

856
00:32:53,760 --> 00:32:56,559
ransomware implementation even if in a

857
00:32:56,559 --> 00:32:58,480
single execution we will get the same

858
00:32:58,480 --> 00:33:00,320
number but maybe

859
00:33:00,320 --> 00:33:02,080
use 100 bytes

860
00:33:02,080 --> 00:33:04,480
black matter could use 200 so we need a

861
00:33:04,480 --> 00:33:05,519
way to

862
00:33:05,519 --> 00:33:07,919
uh understand dynamically what is these

863
00:33:07,919 --> 00:33:09,200
size

864
00:33:09,200 --> 00:33:11,039
all we can do this we can aggregate the

865
00:33:11,039 --> 00:33:13,919
number of appended operation

866
00:33:13,919 --> 00:33:15,600
and then we will see in the next slide

867
00:33:15,600 --> 00:33:17,760
that with a dictionary data structure we

868
00:33:17,760 --> 00:33:21,200
can understand what is the size

869
00:33:21,919 --> 00:33:24,080
okay this is an example of babuk

870
00:33:24,080 --> 00:33:26,240
encrypting a

871
00:33:26,240 --> 00:33:29,039
photo some photos okay you can see in

872
00:33:29,039 --> 00:33:29,919
the path

873
00:33:29,919 --> 00:33:30,799
in the

874
00:33:30,799 --> 00:33:32,559
fifth column

875
00:33:32,559 --> 00:33:33,919
and

876
00:33:33,919 --> 00:33:36,320
the first for each file there is two

877
00:33:36,320 --> 00:33:38,080
brights operation the first of right

878
00:33:38,080 --> 00:33:40,480
what is it's from office offset 0 to

879
00:33:40,480 --> 00:33:43,120
offset 10 000 it's basically encrypting

880
00:33:43,120 --> 00:33:44,640
all the file

881
00:33:44,640 --> 00:33:46,640
the next one is starting from the end of

882
00:33:46,640 --> 00:33:49,919
the file and is appending 96 bytes and

883
00:33:49,919 --> 00:33:52,720
this is the kind of weird operation

884
00:33:52,720 --> 00:33:55,279
at least where if it's done

885
00:33:55,279 --> 00:33:58,320
to every file okay so every file there

886
00:33:58,320 --> 00:34:00,159
is an append operation from the end with

887
00:34:00,159 --> 00:34:01,679
96 bytes

888
00:34:01,679 --> 00:34:03,440
and this of course this is an example of

889
00:34:03,440 --> 00:34:05,600
all three files but this of course to

890
00:34:05,600 --> 00:34:08,719
every files on the system

891
00:34:09,918 --> 00:34:12,320
so if we count these how many file

892
00:34:12,320 --> 00:34:14,719
markers are appended to files we are

893
00:34:14,719 --> 00:34:17,040
able to understand if a file footer

894
00:34:17,040 --> 00:34:20,239
writing is a happening by a ransomware

895
00:34:20,239 --> 00:34:22,960
how we can effectively

896
00:34:22,960 --> 00:34:24,239
this is

897
00:34:24,239 --> 00:34:26,639
for example we can use a dictionary data

898
00:34:26,639 --> 00:34:29,359
structure to keep track of these rights

899
00:34:29,359 --> 00:34:30,879
but this is just an example of an

900
00:34:30,879 --> 00:34:32,879
implementation everyone can use their

901
00:34:32,879 --> 00:34:35,359
own way their own data structure and so

902
00:34:35,359 --> 00:34:37,040
on and so on

903
00:34:37,040 --> 00:34:39,760
and what we should observe

904
00:34:39,760 --> 00:34:42,159
is that once we have arranged our data

905
00:34:42,159 --> 00:34:44,399
by containing the key

906
00:34:44,399 --> 00:34:46,480
the size of the structure and as a value

907
00:34:46,480 --> 00:34:48,800
the counter of how many appends are

908
00:34:48,800 --> 00:34:49,839
occurred

909
00:34:49,839 --> 00:34:52,239
when our answer is executed we should

910
00:34:52,239 --> 00:34:55,199
observe that one key of this dictionary

911
00:34:55,199 --> 00:34:57,280
will have the counter that is exceeding

912
00:34:57,280 --> 00:35:00,240
a threshold for example 300 so it means

913
00:35:00,240 --> 00:35:02,880
that 300 files has been appended the

914
00:35:02,880 --> 00:35:05,119
footer uh the file footer of the

915
00:35:05,119 --> 00:35:06,240
ransomware

916
00:35:06,240 --> 00:35:07,760
and also in this way

917
00:35:07,760 --> 00:35:09,680
the detection spot occurs at kernel

918
00:35:09,680 --> 00:35:12,160
level and usually as defender we like

919
00:35:12,160 --> 00:35:15,799
kernel detection

920
00:35:16,480 --> 00:35:18,960
the third uh detection via detection is

921
00:35:18,960 --> 00:35:21,920
restart manager api avi usage

922
00:35:21,920 --> 00:35:24,400
so the restart manager api

923
00:35:24,400 --> 00:35:26,160
as the common implementation that are

924
00:35:26,160 --> 00:35:29,359
the first three api call

925
00:35:29,359 --> 00:35:32,079
and why the ransomware are using this

926
00:35:32,079 --> 00:35:34,320
kind of approach because whenever they

927
00:35:34,320 --> 00:35:36,560
try to encrypt a file they call a create

928
00:35:36,560 --> 00:35:37,440
file

929
00:35:37,440 --> 00:35:38,400
function

930
00:35:38,400 --> 00:35:41,200
and if this function fails

931
00:35:41,200 --> 00:35:44,079
they assume they say okay maybe i cannot

932
00:35:44,079 --> 00:35:46,320
encrypt this file because some other

933
00:35:46,320 --> 00:35:48,720
process is locking this file so they use

934
00:35:48,720 --> 00:35:50,640
the restart manager that will restart

935
00:35:50,640 --> 00:35:54,000
measure will tell okay p2 is using no p2

936
00:35:54,000 --> 00:35:57,520
is impossible pd10 is using pd10 is

937
00:35:57,520 --> 00:35:58,560
using

938
00:35:58,560 --> 00:36:00,880
the this file so they get this speed and

939
00:36:00,880 --> 00:36:02,800
they kill it

940
00:36:02,800 --> 00:36:06,560
the problem with detection is that

941
00:36:06,560 --> 00:36:09,119
when we want to do detection we try to

942
00:36:09,119 --> 00:36:12,400
achieve the lowest possible anti-api

943
00:36:12,400 --> 00:36:15,359
call so ram start session

944
00:36:15,359 --> 00:36:18,480
that is from the start manager dll it's

945
00:36:18,480 --> 00:36:19,920
it doesn't like

946
00:36:19,920 --> 00:36:21,920
usually we shouldn't like that kind of

947
00:36:21,920 --> 00:36:24,000
of working on this call

948
00:36:24,000 --> 00:36:26,400
so by reversing this dll we can see that

949
00:36:26,400 --> 00:36:28,400
the lowest level possible code is

950
00:36:28,400 --> 00:36:31,200
antiquary information file

951
00:36:31,200 --> 00:36:32,160
okay

952
00:36:32,160 --> 00:36:33,760
so

953
00:36:33,760 --> 00:36:36,400
by monitoring antiquity information file

954
00:36:36,400 --> 00:36:39,040
with this undocumented file information

955
00:36:39,040 --> 00:36:42,240
class that has the longer name file

956
00:36:42,240 --> 00:36:44,480
process d using file information

957
00:36:44,480 --> 00:36:45,920
we can

958
00:36:45,920 --> 00:36:49,119
understand if a ransomware is uh

959
00:36:49,119 --> 00:36:51,200
using too much this functionality and

960
00:36:51,200 --> 00:36:54,560
usually banning application do not do it

961
00:36:54,560 --> 00:36:57,040
and when we see a peak usage of this

962
00:36:57,040 --> 00:36:59,359
kind of functionality we should probably

963
00:36:59,359 --> 00:37:02,480
erase some flag from some alert flag

964
00:37:02,480 --> 00:37:04,160
the problem with this approach is that

965
00:37:04,160 --> 00:37:06,000
we need to monitor the anti-query

966
00:37:06,000 --> 00:37:09,440
information file from the user land and

967
00:37:09,440 --> 00:37:12,079
user lab user level detection is

968
00:37:12,079 --> 00:37:14,079
something acceptable but it's not like

969
00:37:14,079 --> 00:37:16,640
kernel detection

970
00:37:16,640 --> 00:37:18,640
last is encrypt encryption key

971
00:37:18,640 --> 00:37:20,880
randomization detection

972
00:37:20,880 --> 00:37:22,800
basically every

973
00:37:22,800 --> 00:37:23,680
um

974
00:37:23,680 --> 00:37:25,839
ransomware in order to generate the

975
00:37:25,839 --> 00:37:28,880
private keys for the for the encryption

976
00:37:28,880 --> 00:37:31,280
they use said or random uh number

977
00:37:31,280 --> 00:37:32,800
generators

978
00:37:32,800 --> 00:37:33,760
and

979
00:37:33,760 --> 00:37:36,480
this kind of by the fact that the runs

980
00:37:36,480 --> 00:37:38,560
will generate a unique private key for

981
00:37:38,560 --> 00:37:40,320
every run somewhere for every file to be

982
00:37:40,320 --> 00:37:43,280
encrypted sorry this generate a like

983
00:37:43,280 --> 00:37:46,079
volume of sage of this random number

984
00:37:46,079 --> 00:37:47,760
generators function

985
00:37:47,760 --> 00:37:49,440
what are the main functions that are

986
00:37:49,440 --> 00:37:52,079
used are critical random

987
00:37:52,079 --> 00:37:56,000
and crypt junkie from addition 32

988
00:37:56,000 --> 00:37:57,200
and

989
00:37:57,200 --> 00:37:59,680
the particular value provided as i input

990
00:37:59,680 --> 00:38:00,720
are

991
00:38:00,720 --> 00:38:02,960
so cripgerano generate just a random

992
00:38:02,960 --> 00:38:05,359
buffer so you need to tell how many

993
00:38:05,359 --> 00:38:07,599
bytes of random buffer you want as i

994
00:38:07,599 --> 00:38:09,200
input and usually runs where you use the

995
00:38:09,200 --> 00:38:12,960
input what 16 or 32 bytes because it's

996
00:38:12,960 --> 00:38:15,200
exactly the

997
00:38:15,200 --> 00:38:18,800
key sides of symmetric encryption so is

998
00:38:18,800 --> 00:38:21,839
is 32 bytes is could be also

999
00:38:21,839 --> 00:38:25,280
16 bytes so this is quite abnormal at

1000
00:38:25,280 --> 00:38:28,880
least if you do it a lot of times

1001
00:38:28,880 --> 00:38:31,520
unfortunately this kind of detection

1002
00:38:31,520 --> 00:38:34,960
is not generic as the others but it can

1003
00:38:34,960 --> 00:38:37,599
still be used as an opportunistic way

1004
00:38:37,599 --> 00:38:40,400
because in black matter for example they

1005
00:38:40,400 --> 00:38:42,240
are not using

1006
00:38:42,240 --> 00:38:44,240
a function by the operand system but

1007
00:38:44,240 --> 00:38:46,240
they are using a lower level approach

1008
00:38:46,240 --> 00:38:49,919
they are using assembly structure

1009
00:38:51,359 --> 00:38:54,000
conclusion

1010
00:38:54,320 --> 00:38:56,079
giving insights of what are the

1011
00:38:56,079 --> 00:38:58,480
cooperation characterizes the encryption

1012
00:38:58,480 --> 00:39:00,560
stage and make the analysis of this

1013
00:39:00,560 --> 00:39:03,760
compatress easier what it means is that

1014
00:39:03,760 --> 00:39:06,240
by knowing this kind of knowledge when

1015
00:39:06,240 --> 00:39:07,920
you are going to reverse

1016
00:39:07,920 --> 00:39:10,000
a ransomware payload

1017
00:39:10,000 --> 00:39:12,400
you already know what you should expect

1018
00:39:12,400 --> 00:39:14,480
and when you already know how your

1019
00:39:14,480 --> 00:39:15,440
threat

1020
00:39:15,440 --> 00:39:18,000
is operating it's much easier your

1021
00:39:18,000 --> 00:39:19,839
analysis

1022
00:39:19,839 --> 00:39:21,359
and

1023
00:39:21,359 --> 00:39:22,720
identify the common analysis in

1024
00:39:22,720 --> 00:39:24,880
implementation allow to create barrel

1025
00:39:24,880 --> 00:39:26,000
detection

1026
00:39:26,000 --> 00:39:27,760
and this burial detection are based on

1027
00:39:27,760 --> 00:39:30,560
the telemetry that are side effects

1028
00:39:30,560 --> 00:39:32,880
generated by the ipa code that i have

1029
00:39:32,880 --> 00:39:35,680
showed you and has been tracked

1030
00:39:35,680 --> 00:39:36,800
and

1031
00:39:36,800 --> 00:39:39,119
the main reason for preferring bearing

1032
00:39:39,119 --> 00:39:42,000
indicators over static indicators is

1033
00:39:42,000 --> 00:39:44,000
because they are much more reliable and

1034
00:39:44,000 --> 00:39:45,440
harder to wait

1035
00:39:45,440 --> 00:39:47,440
think about if a ransomware want to

1036
00:39:47,440 --> 00:39:49,040
change their code

1037
00:39:49,040 --> 00:39:50,960
to evade the file for their logic

1038
00:39:50,960 --> 00:39:52,320
detection

1039
00:39:52,320 --> 00:39:54,560
you don't even know how many tests and

1040
00:39:54,560 --> 00:39:57,280
how many costs they will get

1041
00:39:57,280 --> 00:40:00,400
to evade that detection and even the

1042
00:40:00,400 --> 00:40:02,800
cross file cross drive for enumeration

1043
00:40:02,800 --> 00:40:05,839
if they want to evade to uh

1044
00:40:05,839 --> 00:40:08,079
exam for example enumerating remote

1045
00:40:08,079 --> 00:40:10,079
shares they are actually limiting their

1046
00:40:10,079 --> 00:40:11,119
payload

1047
00:40:11,119 --> 00:40:13,359
so as a defender this is what you are

1048
00:40:13,359 --> 00:40:15,280
looking for

1049
00:40:15,280 --> 00:40:18,319
and all the tldr of my research is that

1050
00:40:18,319 --> 00:40:20,079
the behavioral detection is the right

1051
00:40:20,079 --> 00:40:22,160
approach of scalable ransomware

1052
00:40:22,160 --> 00:40:25,160
countermeasures

1053
00:40:25,200 --> 00:40:27,760
some special thanks sentinel sentinel

1054
00:40:27,760 --> 00:40:30,560
one's team claudia daniel andreas

1055
00:40:30,560 --> 00:40:33,839
uh if you want to meet me and us you can

1056
00:40:33,839 --> 00:40:35,680
re-approach us later at incentive

1057
00:40:35,680 --> 00:40:37,119
mustang

1058
00:40:37,119 --> 00:40:40,319
edan and chuang dong that without their

1059
00:40:40,319 --> 00:40:43,119
precious contribution i couldn't make

1060
00:40:43,119 --> 00:40:45,760
this research

1061
00:40:46,000 --> 00:40:49,250
and thank you for your attention

1062
00:40:49,250 --> 00:40:57,680
[Applause]

1063
00:40:57,680 --> 00:40:59,440
all right thank you antonio

1064
00:40:59,440 --> 00:41:01,760
yeah please if you have any questions i

1065
00:41:01,760 --> 00:41:05,599
have we have a big slots i think so

1066
00:41:05,599 --> 00:41:08,160
hello thank you for your explanation i'm

1067
00:41:08,160 --> 00:41:09,520
not a technical guy but i think i

1068
00:41:09,520 --> 00:41:12,480
understood so it's a good sign thanks um

1069
00:41:12,480 --> 00:41:14,160
actually i have i have a thought about

1070
00:41:14,160 --> 00:41:16,319
what you present it's actually giving

1071
00:41:16,319 --> 00:41:19,440
information to any ransomware group how

1072
00:41:19,440 --> 00:41:21,920
to change and how to improve their

1073
00:41:21,920 --> 00:41:24,560
software so what is first perhaps from

1074
00:41:24,560 --> 00:41:26,560
sentinel one the the approval of the

1075
00:41:26,560 --> 00:41:28,480
board or whatever directors offer for

1076
00:41:28,480 --> 00:41:31,920
the um community of

1077
00:41:31,920 --> 00:41:32,839
malware

1078
00:41:32,839 --> 00:41:35,440
analysis is it from a moral perspective

1079
00:41:35,440 --> 00:41:37,680
good to publish or to explain us this

1080
00:41:37,680 --> 00:41:39,599
yeah they will have the information and

1081
00:41:39,599 --> 00:41:42,319
perhaps as a as a second or following

1082
00:41:42,319 --> 00:41:44,720
how long with will be your work or this

1083
00:41:44,720 --> 00:41:47,040
work valid in three months they change

1084
00:41:47,040 --> 00:41:48,880
the ransomware and then you can throw it

1085
00:41:48,880 --> 00:41:52,079
away just uh yeah yeah i will uh yeah

1086
00:41:52,079 --> 00:41:53,760
smart smart question

1087
00:41:53,760 --> 00:41:56,560
uh the first thing i think that uh

1088
00:41:56,560 --> 00:41:59,040
security by obscurity it's not something

1089
00:41:59,040 --> 00:42:02,400
that we should be looking into so if

1090
00:42:02,400 --> 00:42:06,160
the iv commun the av market and the idr

1091
00:42:06,160 --> 00:42:09,119
market shouldn't work on security web

1092
00:42:09,119 --> 00:42:11,280
security because this is a fundamental

1093
00:42:11,280 --> 00:42:12,880
approach in my opinion

1094
00:42:12,880 --> 00:42:14,720
um

1095
00:42:14,720 --> 00:42:17,200
the the the nice thing what is that if

1096
00:42:17,200 --> 00:42:19,359
everyone like me is publishing this you

1097
00:42:19,359 --> 00:42:21,200
don't even know how much the cost for

1098
00:42:21,200 --> 00:42:23,040
developing their ransomware to evade is

1099
00:42:23,040 --> 00:42:25,280
increasing and what i'm telling you is

1100
00:42:25,280 --> 00:42:26,079
that

1101
00:42:26,079 --> 00:42:28,800
most probably you everyone

1102
00:42:28,800 --> 00:42:31,119
is ignoring most of these detection

1103
00:42:31,119 --> 00:42:32,480
because they will start to understand

1104
00:42:32,480 --> 00:42:35,119
that it costs a lot maybe it it is

1105
00:42:35,119 --> 00:42:37,200
developed by just sentinel one and it's

1106
00:42:37,200 --> 00:42:39,040
not the case this is not still in the

1107
00:42:39,040 --> 00:42:40,560
sentinel one agent

1108
00:42:40,560 --> 00:42:41,599
and

1109
00:42:41,599 --> 00:42:45,359
so the my message here is if everyone is

1110
00:42:45,359 --> 00:42:46,480
releasing

1111
00:42:46,480 --> 00:42:49,040
uh detection that of course detection is

1112
00:42:49,040 --> 00:42:52,480
aimed to defenders and not to attackers

1113
00:42:52,480 --> 00:42:54,400
of course attackers will always have

1114
00:42:54,400 --> 00:42:56,319
advantages if you buy if even if you

1115
00:42:56,319 --> 00:42:58,079
publish a poc of an exploit attacker

1116
00:42:58,079 --> 00:43:02,640
will have advantages but for detection

1117
00:43:02,640 --> 00:43:05,119
the if everyone will do it the

1118
00:43:05,119 --> 00:43:07,200
ransomware developer development cost

1119
00:43:07,200 --> 00:43:09,040
will increase a lot and maybe we are

1120
00:43:09,040 --> 00:43:10,800
seeing less costs less transformer

1121
00:43:10,800 --> 00:43:12,960
attacks who knows we don't know because

1122
00:43:12,960 --> 00:43:14,640
we cannot measure this kind of

1123
00:43:14,640 --> 00:43:15,760
information

1124
00:43:15,760 --> 00:43:17,040
uh

1125
00:43:17,040 --> 00:43:20,880
sorry about the second question

1126
00:43:22,640 --> 00:43:24,480
yeah exactly

1127
00:43:24,480 --> 00:43:27,040
and this is the the main reason of

1128
00:43:27,040 --> 00:43:29,119
tracking the

1129
00:43:29,119 --> 00:43:32,720
implementation because

1130
00:43:33,119 --> 00:43:34,800
if you track setting indicator like

1131
00:43:34,800 --> 00:43:35,839
caches

1132
00:43:35,839 --> 00:43:37,839
one single chart appended to the file

1133
00:43:37,839 --> 00:43:39,280
it's it's gone

1134
00:43:39,280 --> 00:43:41,520
and if you instead monitor for

1135
00:43:41,520 --> 00:43:43,119
implementations

1136
00:43:43,119 --> 00:43:45,440
uh the system doesn't allow you to do

1137
00:43:45,440 --> 00:43:46,960
the same thing in a different way for

1138
00:43:46,960 --> 00:43:48,560
example if you want to

1139
00:43:48,560 --> 00:43:50,400
move your pointer of a file to the end

1140
00:43:50,400 --> 00:43:51,680
of the file

1141
00:43:51,680 --> 00:43:53,520
there are not maybe there are three or

1142
00:43:53,520 --> 00:43:54,960
four ways

1143
00:43:54,960 --> 00:43:56,079
and

1144
00:43:56,079 --> 00:43:58,400
if you create this kind of detection

1145
00:43:58,400 --> 00:44:00,720
that are based

1146
00:44:00,720 --> 00:44:03,280
on the output of the code yes but the

1147
00:44:03,280 --> 00:44:06,079
code must pass by that way

1148
00:44:06,079 --> 00:44:08,160
they are very effective and there may

1149
00:44:08,160 --> 00:44:10,160
maybe they last four years

1150
00:44:10,160 --> 00:44:12,079
i expect that this kind of detection

1151
00:44:12,079 --> 00:44:14,960
will last for years and if this kind of

1152
00:44:14,960 --> 00:44:16,079
detection

1153
00:44:16,079 --> 00:44:19,040
if that was released three years ago

1154
00:44:19,040 --> 00:44:20,560
they were working

1155
00:44:20,560 --> 00:44:23,560
okay

1156
00:44:25,440 --> 00:44:26,319
so

1157
00:44:26,319 --> 00:44:27,920
hello thanks for the for the talk i

1158
00:44:27,920 --> 00:44:31,520
think it was interesting because for me

1159
00:44:31,520 --> 00:44:33,680
an icing ransomware was uh

1160
00:44:33,680 --> 00:44:35,599
something i did at night

1161
00:44:35,599 --> 00:44:36,960
just to have fun

1162
00:44:36,960 --> 00:44:39,520
and you talk about dynamic detection

1163
00:44:39,520 --> 00:44:41,839
using windows driver

1164
00:44:41,839 --> 00:44:43,200
mini filters

1165
00:44:43,200 --> 00:44:45,520
but how about

1166
00:44:45,520 --> 00:44:48,400
using the static analysis for detecting

1167
00:44:48,400 --> 00:44:50,960
ransomware because you talked about the

1168
00:44:50,960 --> 00:44:54,800
common apis for for example cryptography

1169
00:44:54,800 --> 00:44:57,280
but you also said that right now there

1170
00:44:57,280 --> 00:45:00,079
are some ransomwares that use a intel

1171
00:45:00,079 --> 00:45:02,800
instructions for applying cryptography

1172
00:45:02,800 --> 00:45:05,520
or even if you use a static static

1173
00:45:05,520 --> 00:45:09,200
compilation of of some apis you will you

1174
00:45:09,200 --> 00:45:11,040
will have the the code without any

1175
00:45:11,040 --> 00:45:12,319
symbol

1176
00:45:12,319 --> 00:45:14,400
yeah

1177
00:45:14,400 --> 00:45:16,960
the problem with static indicators

1178
00:45:16,960 --> 00:45:19,200
static detection in general is the fact

1179
00:45:19,200 --> 00:45:21,439
that

1180
00:45:21,520 --> 00:45:23,280
for example although this api is not

1181
00:45:23,280 --> 00:45:24,880
important statically so if you write

1182
00:45:24,880 --> 00:45:27,680
irlu to detect these imports

1183
00:45:27,680 --> 00:45:29,280
they are failed because they use dynamic

1184
00:45:29,280 --> 00:45:31,920
result my research was not to unpacking

1185
00:45:31,920 --> 00:45:33,200
ransomware because all of these runs

1186
00:45:33,200 --> 00:45:34,800
were packed and there was a lot of

1187
00:45:34,800 --> 00:45:36,400
operation to unpack it

1188
00:45:36,400 --> 00:45:39,200
so by relying on behavioral detection

1189
00:45:39,200 --> 00:45:42,640
you are getting rid of packing unpacking

1190
00:45:42,640 --> 00:45:44,800
and it's it's it's the

1191
00:45:44,800 --> 00:45:47,040
the worst problem we have in detection

1192
00:45:47,040 --> 00:45:49,040
because someone using

1193
00:45:49,040 --> 00:45:51,280
sandbox but sandbox in my opinion are

1194
00:45:51,280 --> 00:45:53,599
bad to analyze behaviors

1195
00:45:53,599 --> 00:45:55,280
and there are other approaches like

1196
00:45:55,280 --> 00:45:57,839
kernel detection or username detection

1197
00:45:57,839 --> 00:45:59,359
and in this way

1198
00:45:59,359 --> 00:46:01,280
you are sure that

1199
00:46:01,280 --> 00:46:03,839
if the attacker buy another cr another

1200
00:46:03,839 --> 00:46:04,880
packer

1201
00:46:04,880 --> 00:46:06,880
your your static rule is gone you know

1202
00:46:06,880 --> 00:46:09,359
with bl detection no they have to change

1203
00:46:09,359 --> 00:46:11,520
they have to hire the developer and say

1204
00:46:11,520 --> 00:46:13,119
i need that this behavior change from

1205
00:46:13,119 --> 00:46:15,359
this and to that and

1206
00:46:15,359 --> 00:46:17,359
we know how with the palace we

1207
00:46:17,359 --> 00:46:19,599
developers we are if someone come and

1208
00:46:19,599 --> 00:46:22,319
say you don't do this in this way but

1209
00:46:22,319 --> 00:46:25,040
you don't you have to do it another way

1210
00:46:25,040 --> 00:46:26,160
it's

1211
00:46:26,160 --> 00:46:28,640
it's it requires more effort okay this

1212
00:46:28,640 --> 00:46:31,040
is this is i think the detection are not

1213
00:46:31,040 --> 00:46:32,160
all of these detections are not

1214
00:46:32,160 --> 00:46:33,280
bulletproof

1215
00:46:33,280 --> 00:46:35,760
the goal of detection is to increase the

1216
00:46:35,760 --> 00:46:38,400
cost of the attacks this is the most the

1217
00:46:38,400 --> 00:46:42,079
the most thing that you can do

1218
00:46:42,079 --> 00:46:44,400
okay yeah i have another question here

1219
00:46:44,400 --> 00:46:46,720
sure um first of all thanks for the for

1220
00:46:46,720 --> 00:46:48,960
the nice talk but interesting um

1221
00:46:48,960 --> 00:46:50,800
and this is probably in the same line

1222
00:46:50,800 --> 00:46:52,800
that you have said right now that you

1223
00:46:52,800 --> 00:46:55,119
said that this is not bulk proof

1224
00:46:55,119 --> 00:46:58,079
um well for the detection of the writing

1225
00:46:58,079 --> 00:46:59,280
of the footer

1226
00:46:59,280 --> 00:47:00,960
on the on all of the files well it's

1227
00:47:00,960 --> 00:47:02,480
clear that it's been known for all of

1228
00:47:02,480 --> 00:47:04,560
the files and this is suspicious to save

1229
00:47:04,560 --> 00:47:05,839
the list

1230
00:47:05,839 --> 00:47:07,359
but for the

1231
00:47:07,359 --> 00:47:08,720
enumeration of the

1232
00:47:08,720 --> 00:47:10,640
of the processes that are that are

1233
00:47:10,640 --> 00:47:13,040
holding logs on on files

1234
00:47:13,040 --> 00:47:16,000
this is perhaps some api some common api

1235
00:47:16,000 --> 00:47:18,720
that is used by i know uh process

1236
00:47:18,720 --> 00:47:20,800
explorer maybe to see what what are the

1237
00:47:20,800 --> 00:47:23,119
open files by some specific process or

1238
00:47:23,119 --> 00:47:24,480
whatever

1239
00:47:24,480 --> 00:47:27,040
so what are the thresholds that you use

1240
00:47:27,040 --> 00:47:28,960
to

1241
00:47:28,960 --> 00:47:32,640
to detect or to tell apart

1242
00:47:32,640 --> 00:47:35,680
legitimate access legitimate calls to

1243
00:47:35,680 --> 00:47:38,559
this api or suspicious accesses

1244
00:47:38,559 --> 00:47:39,599
yeah

1245
00:47:39,599 --> 00:47:40,800
so these

1246
00:47:40,800 --> 00:47:43,280
detection

1247
00:47:43,280 --> 00:47:44,079
are

1248
00:47:44,079 --> 00:47:44,880
like

1249
00:47:44,880 --> 00:47:47,520
results that can be took by the textual

1250
00:47:47,520 --> 00:47:51,839
engineering team and can be implemented

1251
00:47:51,839 --> 00:47:52,960
process

1252
00:47:52,960 --> 00:47:55,680
involving added uh development and uh

1253
00:47:55,680 --> 00:47:58,319
deployment over the uh of our detection

1254
00:47:58,319 --> 00:48:00,240
via detection

1255
00:48:00,240 --> 00:48:02,400
requires what we are saying so

1256
00:48:02,400 --> 00:48:04,720
okay this is a detection uh how many

1257
00:48:04,720 --> 00:48:06,800
full specific tests it's not something

1258
00:48:06,800 --> 00:48:08,160
that was in scope of my research you

1259
00:48:08,160 --> 00:48:10,559
know this is uh how much false

1260
00:48:10,559 --> 00:48:13,200
positivity it has is if you we use this

1261
00:48:13,200 --> 00:48:14,960
kind of threshold we are reducing false

1262
00:48:14,960 --> 00:48:17,920
positive by x if we are using these

1263
00:48:17,920 --> 00:48:19,119
other thresholds we are improving

1264
00:48:19,119 --> 00:48:21,839
improving efficiency because detection

1265
00:48:21,839 --> 00:48:24,079
costs also efficiency of the system

1266
00:48:24,079 --> 00:48:26,319
so all of these kind of results

1267
00:48:26,319 --> 00:48:27,760
can be

1268
00:48:27,760 --> 00:48:28,640
uh

1269
00:48:28,640 --> 00:48:30,720
it's always a trade-off of course but

1270
00:48:30,720 --> 00:48:32,960
this kind of result and adjustments to

1271
00:48:32,960 --> 00:48:35,040
discern false positive is something that

1272
00:48:35,040 --> 00:48:37,200
is done in the development of detection

1273
00:48:37,200 --> 00:48:38,319
engineering

1274
00:48:38,319 --> 00:48:40,160
that's that's not something covered in

1275
00:48:40,160 --> 00:48:42,480
my research it's it was more of a threat

1276
00:48:42,480 --> 00:48:44,800
in terms of research you know

1277
00:48:44,800 --> 00:48:47,040
maybe it's it's a challenge that's when

1278
00:48:47,040 --> 00:48:48,480
detection teams are going to implement

1279
00:48:48,480 --> 00:48:50,319
this we'll have some challenges like

1280
00:48:50,319 --> 00:48:52,240
this

1281
00:48:52,240 --> 00:48:54,160
thank you

1282
00:48:54,160 --> 00:48:57,520
hello hi hello nice talk so

1283
00:48:57,520 --> 00:48:59,280
the question goes a little bit along the

1284
00:48:59,280 --> 00:49:02,000
lines of what my colleagues said and

1285
00:49:02,000 --> 00:49:04,240
he's like when you filter irp is in the

1286
00:49:04,240 --> 00:49:05,200
kernel

1287
00:49:05,200 --> 00:49:07,200
uh i mean you have thousands and

1288
00:49:07,200 --> 00:49:09,280
thousands of irps so

1289
00:49:09,280 --> 00:49:12,000
how do you actually discern because then

1290
00:49:12,000 --> 00:49:14,000
you lose the context on the user space

1291
00:49:14,000 --> 00:49:15,839
when you are in kernel so how do you

1292
00:49:15,839 --> 00:49:18,559
actually understand the ones that are

1293
00:49:18,559 --> 00:49:20,480
actually malicious

1294
00:49:20,480 --> 00:49:22,800
the uh usually the kernel when you get

1295
00:49:22,800 --> 00:49:23,520
the

1296
00:49:23,520 --> 00:49:25,119
earth from the kernel you have also the

1297
00:49:25,119 --> 00:49:26,960
processing that they are doing process

1298
00:49:26,960 --> 00:49:28,880
and also trading you got

1299
00:49:28,880 --> 00:49:30,400
and

1300
00:49:30,400 --> 00:49:33,520
what you need to be uh

1301
00:49:33,520 --> 00:49:35,599
what your but this is more a problem

1302
00:49:35,599 --> 00:49:37,680
that of your fb engine that you are

1303
00:49:37,680 --> 00:49:39,839
going to uh to develop

1304
00:49:39,839 --> 00:49:42,319
it's it's more about what if a

1305
00:49:42,319 --> 00:49:45,839
ransomware is forking three processes

1306
00:49:47,760 --> 00:49:49,680
injecting another process it's something

1307
00:49:49,680 --> 00:49:51,839
you detect separately okay

1308
00:49:51,839 --> 00:49:54,960
but what i wanted to say is that if you

1309
00:49:54,960 --> 00:49:57,520
looking into earps and you keep tracks

1310
00:49:57,520 --> 00:49:58,480
of the

1311
00:49:58,480 --> 00:50:01,280
context like for example paid one pid

1312
00:50:01,280 --> 00:50:03,839
sorry p5 p6 speed seven

1313
00:50:03,839 --> 00:50:04,720
as

1314
00:50:04,720 --> 00:50:07,680
a child uh parent relationship you know

1315
00:50:07,680 --> 00:50:09,359
that this is or runs where you are

1316
00:50:09,359 --> 00:50:10,559
monitoring the year for these three

1317
00:50:10,559 --> 00:50:13,040
processes but this is something that

1318
00:50:13,040 --> 00:50:15,119
is something that should be care by your

1319
00:50:15,119 --> 00:50:17,839
engine by your infrastructure it should

1320
00:50:17,839 --> 00:50:19,920
not be dependent by detection the

1321
00:50:19,920 --> 00:50:24,040
texture should be generic as possible

1322
00:50:32,880 --> 00:50:35,440
you are going to detect file footer

1323
00:50:35,440 --> 00:50:39,079
detection stuff

1324
00:50:42,079 --> 00:50:44,880
no but but the lo the file footer

1325
00:50:44,880 --> 00:50:47,440
appending are a specific value

1326
00:50:47,440 --> 00:50:48,960
and are done to the old file on the

1327
00:50:48,960 --> 00:50:51,960
system

1328
00:51:07,280 --> 00:51:09,839
objective may get too

1329
00:51:09,839 --> 00:51:13,119
too wide you know so i understand that

1330
00:51:13,119 --> 00:51:14,880
maybe it works really well for this

1331
00:51:14,880 --> 00:51:17,599
technique but generalizing

1332
00:51:17,599 --> 00:51:20,800
it it goes into the space of hey maybe

1333
00:51:20,800 --> 00:51:22,960
here

1334
00:51:23,760 --> 00:51:26,800
maybe i miss uh miss explain the

1335
00:51:26,800 --> 00:51:28,720
generalization generalization

1336
00:51:28,720 --> 00:51:31,520
is for the implementation okay you don't

1337
00:51:31,520 --> 00:51:33,520
do everything with the earp and the

1338
00:51:33,520 --> 00:51:36,720
kernel you do it where you can

1339
00:51:36,720 --> 00:51:38,640
for example to intercept in the right

1340
00:51:38,640 --> 00:51:40,720
operation it's it's something that every

1341
00:51:40,720 --> 00:51:42,079
interviewers do

1342
00:51:42,079 --> 00:51:43,680
you need just

1343
00:51:43,680 --> 00:51:45,680
only to add another check to do this

1344
00:51:45,680 --> 00:51:47,680
kind of checks

1345
00:51:47,680 --> 00:51:51,119
as i said also to the other guy it's

1346
00:51:51,119 --> 00:51:53,440
the false positive measurements we can

1347
00:51:53,440 --> 00:51:55,760
argue about that for all the day but in

1348
00:51:55,760 --> 00:51:57,760
the end of day it regards measurement

1349
00:51:57,760 --> 00:51:59,359
and this is something that i haven't

1350
00:51:59,359 --> 00:52:00,800
done but

1351
00:52:00,800 --> 00:52:02,559
what i can say from my empirical

1352
00:52:02,559 --> 00:52:03,680
experience

1353
00:52:03,680 --> 00:52:05,200
this should require

1354
00:52:05,200 --> 00:52:07,280
very little adjustment at least for the

1355
00:52:07,280 --> 00:52:09,760
one that i ever i have i represented

1356
00:52:09,760 --> 00:52:12,160
today

1357
00:52:12,160 --> 00:52:13,599
you think we have time for one last

1358
00:52:13,599 --> 00:52:16,640
question who's over here

1359
00:52:17,280 --> 00:52:20,240
uh thanks for the talk um i was

1360
00:52:20,240 --> 00:52:22,079
wondering maybe a more general question

1361
00:52:22,079 --> 00:52:24,000
about ransomware have you ever

1362
00:52:24,000 --> 00:52:26,480
encountered like encryption or

1363
00:52:26,480 --> 00:52:29,119
obfuscation efforts in the ransomware

1364
00:52:29,119 --> 00:52:30,800
code or behavior

1365
00:52:30,800 --> 00:52:33,599
like noise intro noise introduction in

1366
00:52:33,599 --> 00:52:35,760
the key append to the footer for the

1367
00:52:35,760 --> 00:52:38,400
site detection or is it like pure

1368
00:52:38,400 --> 00:52:40,880
performance oriented because of the cost

1369
00:52:40,880 --> 00:52:43,280
of the malware development

1370
00:52:43,280 --> 00:52:45,599
sorry you mean if every ransomware is

1371
00:52:45,599 --> 00:52:48,319
appending the file footer at every file

1372
00:52:48,319 --> 00:52:50,400
no i was wondering if uh

1373
00:52:50,400 --> 00:52:52,800
ransomware developers are making any

1374
00:52:52,800 --> 00:52:55,599
thoughts in hiding this behavior in

1375
00:52:55,599 --> 00:52:58,559
obfuscating the code or their behavior

1376
00:52:58,559 --> 00:53:01,200
to evade or are they just pure

1377
00:53:01,200 --> 00:53:04,000
performance oriented yeah the the the

1378
00:53:04,000 --> 00:53:06,079
nice things about this detection is that

1379
00:53:06,079 --> 00:53:08,640
as long as you hide and obfuscate your

1380
00:53:08,640 --> 00:53:10,400
code statically

1381
00:53:10,400 --> 00:53:13,359
the operation would be the same

1382
00:53:13,359 --> 00:53:16,160
or if you change the code the source

1383
00:53:16,160 --> 00:53:17,839
code and you are saying okay the file

1384
00:53:17,839 --> 00:53:19,839
numeration i'm not doing this and i'm

1385
00:53:19,839 --> 00:53:22,160
doing doing this way in this other way

1386
00:53:22,160 --> 00:53:24,079
but i challenge you to find another way

1387
00:53:24,079 --> 00:53:26,880
to use that other that to api call if

1388
00:53:26,880 --> 00:53:29,040
they use everyone using this approach

1389
00:53:29,040 --> 00:53:30,079
maybe

1390
00:53:30,079 --> 00:53:32,079
they are not the only approach but they

1391
00:53:32,079 --> 00:53:35,200
are very few okay so the advantage of

1392
00:53:35,200 --> 00:53:37,920
having behavioral detection is that it

1393
00:53:37,920 --> 00:53:39,680
doesn't uh

1394
00:53:39,680 --> 00:53:42,000
matter how much money the runs will pay

1395
00:53:42,000 --> 00:53:43,599
for the crypto for the packer for

1396
00:53:43,599 --> 00:53:46,079
aesthetic obfuscation

1397
00:53:46,079 --> 00:53:48,160
this works everything with ever if you

1398
00:53:48,160 --> 00:53:50,800
take babook or black matter and you

1399
00:53:50,800 --> 00:53:53,359
pack it with the tamida armadillo with

1400
00:53:53,359 --> 00:53:56,079
crypto one you will get the same events

1401
00:53:56,079 --> 00:53:58,720
the only way to change that telemetry is

1402
00:53:58,720 --> 00:54:00,800
to change logical decode so the

1403
00:54:00,800 --> 00:54:03,280
ransomware has to do an investment the

1404
00:54:03,280 --> 00:54:06,240
ransomware screw to make their developer

1405
00:54:06,240 --> 00:54:08,640
changing their code habits making more

1406
00:54:08,640 --> 00:54:10,720
research you know it's

1407
00:54:10,720 --> 00:54:12,240
yeah yeah that was exactly my question

1408
00:54:12,240 --> 00:54:14,079
like are they making this effort today

1409
00:54:14,079 --> 00:54:16,079
do you see that like in the in the wild

1410
00:54:16,079 --> 00:54:18,000
in the different rounds somewhere yeah

1411
00:54:18,000 --> 00:54:20,079
they are exactly the

1412
00:54:20,079 --> 00:54:21,680
the ransomware crew

1413
00:54:21,680 --> 00:54:26,000
are organized very well the rival

1414
00:54:26,000 --> 00:54:28,160
organization for example had 10

1415
00:54:28,160 --> 00:54:30,480
developers just developing the locker

1416
00:54:30,480 --> 00:54:32,800
the one that analyzed it then they have

1417
00:54:32,800 --> 00:54:35,359
the penetration tester that are internal

1418
00:54:35,359 --> 00:54:37,839
so the one that get an initial access

1419
00:54:37,839 --> 00:54:39,599
and perform lateral movement and

1420
00:54:39,599 --> 00:54:41,680
privileges collision then they uh the

1421
00:54:41,680 --> 00:54:43,599
initial access program you know it's

1422
00:54:43,599 --> 00:54:45,359
they are well organized

1423
00:54:45,359 --> 00:54:47,839
and of course they are all paid okay

1424
00:54:47,839 --> 00:54:49,680
thank you

1425
00:54:49,680 --> 00:54:50,799
all right let's have another round of

1426
00:54:50,799 --> 00:54:53,760
applause for antonio

1427
00:54:53,760 --> 00:54:56,920
thank you

