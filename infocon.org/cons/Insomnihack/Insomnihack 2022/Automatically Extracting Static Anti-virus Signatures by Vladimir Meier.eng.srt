1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:17,600 --> 00:00:20,240
hi everyone thank you for being here

3
00:00:20,240 --> 00:00:22,160
during this talk we will be talking

4
00:00:22,160 --> 00:00:24,400
about defeating static signatures in

5
00:00:24,400 --> 00:00:26,800
black box antivirus engines

6
00:00:26,800 --> 00:00:29,039
but first let me say a few words about

7
00:00:29,039 --> 00:00:32,000
myself i'm a security researcher working

8
00:00:32,000 --> 00:00:35,440
at the company that runs insomniac and i

9
00:00:35,440 --> 00:00:37,200
have some background on antivirus

10
00:00:37,200 --> 00:00:39,840
software because i work on that since

11
00:00:39,840 --> 00:00:41,920
2015

12
00:00:41,920 --> 00:00:45,120
and i also happened to be the author of

13
00:00:45,120 --> 00:00:47,920
a project that we open sources um two

14
00:00:47,920 --> 00:00:49,360
years ago

15
00:00:49,360 --> 00:00:51,760
if you want to know more about the work

16
00:00:51,760 --> 00:00:54,719
that we do on antivirus software i can

17
00:00:54,719 --> 00:00:56,640
only recommend to you that you check out

18
00:00:56,640 --> 00:00:59,520
our blog

19
00:00:59,520 --> 00:01:01,840
here is the way my torque is organized

20
00:01:01,840 --> 00:01:04,159
i'm going to directly show you a demo of

21
00:01:04,159 --> 00:01:06,560
the tool you know without

22
00:01:06,560 --> 00:01:08,960
making any comments about it but my hope

23
00:01:08,960 --> 00:01:11,360
is that i will raise the interest

24
00:01:11,360 --> 00:01:13,200
keep you interested until the

25
00:01:13,200 --> 00:01:14,799
rest of the talk

26
00:01:14,799 --> 00:01:16,880
and then i'm going to

27
00:01:16,880 --> 00:01:18,799
know get some stuff out of the way like

28
00:01:18,799 --> 00:01:21,840
why we do anti virus evidence research

29
00:01:21,840 --> 00:01:23,439
at lclt

30
00:01:23,439 --> 00:01:25,439
and next i'm going to

31
00:01:25,439 --> 00:01:28,240
give you a quick refresh about

32
00:01:28,240 --> 00:01:31,040
the antivirus detection capabilities

33
00:01:31,040 --> 00:01:32,640
as i know it

34
00:01:32,640 --> 00:01:35,439
and then we will be able to talk about

35
00:01:35,439 --> 00:01:38,798
the way we designed our tool

36
00:01:39,119 --> 00:01:42,960
so about the the demo the demo gods are

37
00:01:42,960 --> 00:01:44,320
with me

38
00:01:44,320 --> 00:01:44,640
um

39
00:01:44,640 --> 00:01:45,759
[Music]

40
00:01:45,759 --> 00:01:48,079
it takes a bit of time to to run till

41
00:01:48,079 --> 00:01:50,799
the end so i will first run the demo and

42
00:01:50,799 --> 00:01:52,000
then i will

43
00:01:52,000 --> 00:01:55,280
continue to talk i'm a man so i can do

44
00:01:55,280 --> 00:01:58,240
two things at once

45
00:02:00,399 --> 00:02:04,320
so here we have um a component of metal

46
00:02:04,320 --> 00:02:05,920
printer

47
00:02:05,920 --> 00:02:08,639
and this is the tool that is the subject

48
00:02:08,639 --> 00:02:10,239
of this talk

49
00:02:10,239 --> 00:02:12,959
oh sh

50
00:02:14,560 --> 00:02:18,560
i was sure is what's gonna happen but

51
00:02:20,640 --> 00:02:24,079
i have to quit the demo to

52
00:02:26,080 --> 00:02:27,920
it's quite it's quite awkward to do that

53
00:02:27,920 --> 00:02:28,720
but

54
00:02:28,720 --> 00:02:30,879
i've run the tour

55
00:02:30,879 --> 00:02:33,280
and it's doing its magic

56
00:02:33,280 --> 00:02:36,480
and while he's doing that i can continue

57
00:02:36,480 --> 00:02:39,119
with the slide

58
00:02:42,800 --> 00:02:45,440
so it will be open sourced on github

59
00:02:45,440 --> 00:02:46,800
after the torque

60
00:02:46,800 --> 00:02:48,879
it's three thousands python load of

61
00:02:48,879 --> 00:02:51,920
codes and if it's that small that's

62
00:02:51,920 --> 00:02:53,760
because we are standing on the shoulders

63
00:02:53,760 --> 00:02:55,200
of giant here

64
00:02:55,200 --> 00:02:57,840
thanks to frameworks such as ryzen lift

65
00:02:57,840 --> 00:02:59,360
and keystone

66
00:02:59,360 --> 00:03:03,120
and the demo have just started

67
00:03:03,120 --> 00:03:06,159
is about a meterpreter because um you

68
00:03:06,159 --> 00:03:08,720
know i'm a pen tester and

69
00:03:08,720 --> 00:03:11,200
we like to use metaphors of

70
00:03:11,200 --> 00:03:13,519
since uh many years and we won't stop

71
00:03:13,519 --> 00:03:14,480
doing that

72
00:03:14,480 --> 00:03:16,800
it works very well but uh you know

73
00:03:16,800 --> 00:03:19,360
obviously it's it's detected by many

74
00:03:19,360 --> 00:03:21,280
anti-virus engines

75
00:03:21,280 --> 00:03:24,400
and the signature's name is metropreter

76
00:03:24,400 --> 00:03:27,599
something api retrieval which does not

77
00:03:27,599 --> 00:03:29,040
mean uh

78
00:03:29,040 --> 00:03:30,480
something to me

79
00:03:30,480 --> 00:03:32,720
and the goal is to find

80
00:03:32,720 --> 00:03:34,560
the things that are detected by windows

81
00:03:34,560 --> 00:03:39,360
defenders or other antivirus engines

82
00:03:44,080 --> 00:03:47,840
let me switch to the demo

83
00:03:48,560 --> 00:03:51,840
it's still not doing stuff

84
00:03:53,360 --> 00:03:55,040
and you know at this point you don't

85
00:03:55,040 --> 00:03:56,799
have to understand anything it will be

86
00:03:56,799 --> 00:04:01,000
clear by the end of it

87
00:04:10,159 --> 00:04:12,080
it's actually done

88
00:04:12,080 --> 00:04:15,040
and here uh what i can already tell you

89
00:04:15,040 --> 00:04:17,680
is that if you patch the following bytes

90
00:04:17,680 --> 00:04:19,120
uh within

91
00:04:19,120 --> 00:04:22,000
the meter protect mine component

92
00:04:22,000 --> 00:04:24,080
you will be able to bypass

93
00:04:24,080 --> 00:04:25,840
windows defender

94
00:04:25,840 --> 00:04:29,280
and you know at this point um

95
00:04:29,280 --> 00:04:30,880
i can't

96
00:04:30,880 --> 00:04:32,800
look at this binary data and make sense

97
00:04:32,800 --> 00:04:34,160
out of it

98
00:04:34,160 --> 00:04:36,400
but it will be clear

99
00:04:36,400 --> 00:04:39,799
later on

100
00:04:46,320 --> 00:04:48,560
uh that being said i have to give you a

101
00:04:48,560 --> 00:04:51,120
few reasons because uh you know doing

102
00:04:51,120 --> 00:04:52,960
antivirus civilization research might

103
00:04:52,960 --> 00:04:55,280
sound unethical at first especially for

104
00:04:55,280 --> 00:04:57,680
a company like ours because you know we

105
00:04:57,680 --> 00:05:00,400
are security company and we uh make the

106
00:05:00,400 --> 00:05:02,000
recommendation that you install

107
00:05:02,000 --> 00:05:04,960
antivirus software and if that were the

108
00:05:04,960 --> 00:05:07,120
case why would we advise

109
00:05:07,120 --> 00:05:09,840
would we um you know try to bypass

110
00:05:09,840 --> 00:05:11,520
antivirus

111
00:05:11,520 --> 00:05:14,720
the first reason i will give you um

112
00:05:14,720 --> 00:05:17,520
it's based on a silly analogy but uh it

113
00:05:17,520 --> 00:05:18,400
helps

114
00:05:18,400 --> 00:05:20,240
me get my point across

115
00:05:20,240 --> 00:05:22,320
um you know you have this game which you

116
00:05:22,320 --> 00:05:24,320
have you're given a set of objectives

117
00:05:24,320 --> 00:05:26,639
and you have to take them out without

118
00:05:26,639 --> 00:05:29,199
making making the guy complain

119
00:05:29,199 --> 00:05:31,600
and i think it's almost the same when

120
00:05:31,600 --> 00:05:33,120
you are doing internal pen test

121
00:05:33,120 --> 00:05:34,720
engagements and

122
00:05:34,720 --> 00:05:35,440
you

123
00:05:35,440 --> 00:05:37,199
don't want to make the antivirus

124
00:05:37,199 --> 00:05:39,440
complain either because you are doing a

125
00:05:39,440 --> 00:05:41,360
red team and you can't afford to be

126
00:05:41,360 --> 00:05:42,479
detected

127
00:05:42,479 --> 00:05:44,560
uh otherwise it's game over

128
00:05:44,560 --> 00:05:47,199
or during your internal pen test um you

129
00:05:47,199 --> 00:05:48,880
don't want to trigger the antivirus

130
00:05:48,880 --> 00:05:50,000
because

131
00:05:50,000 --> 00:05:53,039
it will make you lose time and

132
00:05:53,039 --> 00:05:54,400
maybe prevent

133
00:05:54,400 --> 00:05:56,560
you from exploiting

134
00:05:56,560 --> 00:05:58,639
vulnerabilities

135
00:05:58,639 --> 00:06:00,639
the second one is the fourth sense of

136
00:06:00,639 --> 00:06:04,160
security i've often met during several

137
00:06:04,160 --> 00:06:07,800
missions um

138
00:06:08,080 --> 00:06:09,120
you know

139
00:06:09,120 --> 00:06:11,360
sometimes your person of contact is not

140
00:06:11,360 --> 00:06:14,240
very not legible and it's just about

141
00:06:14,240 --> 00:06:16,800
some new fancy antivirus

142
00:06:16,800 --> 00:06:19,280
and the time is short

143
00:06:19,280 --> 00:06:22,000
and the only thing standing between you

144
00:06:22,000 --> 00:06:24,400
and your domain admin rights are some

145
00:06:24,400 --> 00:06:26,240
dom antivirus

146
00:06:26,240 --> 00:06:28,080
and the tools that you are using for

147
00:06:28,080 --> 00:06:31,840
years now are detected by by this tool

148
00:06:31,840 --> 00:06:33,600
you would like to

149
00:06:33,600 --> 00:06:35,840
tell your client that it's okay and you

150
00:06:35,840 --> 00:06:38,080
will be able to bypass it if you have a

151
00:06:38,080 --> 00:06:40,960
few more hours but at this point

152
00:06:40,960 --> 00:06:42,720
they might not believe you and they will

153
00:06:42,720 --> 00:06:44,479
challenge your findings

154
00:06:44,479 --> 00:06:46,560
um it's one thing to scan for

155
00:06:46,560 --> 00:06:48,720
vulnerabilities it's another to exploit

156
00:06:48,720 --> 00:06:49,680
them

157
00:06:49,680 --> 00:06:51,599
and if you're not able to do that

158
00:06:51,599 --> 00:06:54,160
because of some security software they

159
00:06:54,160 --> 00:06:56,560
might think that they are secure

160
00:06:56,560 --> 00:06:59,360
which is obviously not the case

161
00:06:59,360 --> 00:07:02,560
and a third reason is a funny one

162
00:07:02,560 --> 00:07:04,800
uh there was a company that was selling

163
00:07:04,800 --> 00:07:07,199
the software and they were the victim of

164
00:07:07,199 --> 00:07:10,479
antivirus software because 39 different

165
00:07:10,479 --> 00:07:13,280
antivirus were detecting it as as

166
00:07:13,280 --> 00:07:15,919
malware or as it was not for us it was

167
00:07:15,919 --> 00:07:17,840
obviously a false positive

168
00:07:17,840 --> 00:07:19,840
but the company was actually worried

169
00:07:19,840 --> 00:07:22,639
that it might contain a virus either

170
00:07:22,639 --> 00:07:24,479
because they were the victim of a supply

171
00:07:24,479 --> 00:07:27,039
chain attack or because some malicious

172
00:07:27,039 --> 00:07:28,319
employee

173
00:07:28,319 --> 00:07:30,960
did put a malware in it

174
00:07:30,960 --> 00:07:33,759
and the question uh for us is how do you

175
00:07:33,759 --> 00:07:36,720
prove to uh your client that uh there is

176
00:07:36,720 --> 00:07:39,520
no malware in it and how the client

177
00:07:39,520 --> 00:07:42,319
itself proved to their own clients that

178
00:07:42,319 --> 00:07:44,479
there is no malware in it so we have to

179
00:07:44,479 --> 00:07:46,639
fix the full positive because windows

180
00:07:46,639 --> 00:07:48,800
defender and the other antivirus won't

181
00:07:48,800 --> 00:07:51,039
do it

182
00:07:51,039 --> 00:07:53,520
that being said uh let me

183
00:07:53,520 --> 00:07:55,199
give you a quick

184
00:07:55,199 --> 00:07:57,599
refreshment about the ways antivirus

185
00:07:57,599 --> 00:08:00,400
work that will help us make things in

186
00:08:00,400 --> 00:08:02,560
context later

187
00:08:02,560 --> 00:08:04,720
so

188
00:08:05,120 --> 00:08:06,080
have a

189
00:08:06,080 --> 00:08:08,080
two distinction here before and after

190
00:08:08,080 --> 00:08:09,680
executions because the tests that are

191
00:08:09,680 --> 00:08:11,520
realized before and after execution are

192
00:08:11,520 --> 00:08:13,759
obviously not the same the first test

193
00:08:13,759 --> 00:08:16,080
that is done uh does not deserve any

194
00:08:16,080 --> 00:08:18,319
mention because it's file hashes you

195
00:08:18,319 --> 00:08:19,759
change the byte and

196
00:08:19,759 --> 00:08:22,319
you bypass the antivirus

197
00:08:22,319 --> 00:08:23,759
but

198
00:08:23,759 --> 00:08:25,919
they are aware of that so they stack

199
00:08:25,919 --> 00:08:27,440
their detection

200
00:08:27,440 --> 00:08:30,400
mechanism on top of one another

201
00:08:30,400 --> 00:08:32,719
in the hope that they are more efficient

202
00:08:32,719 --> 00:08:34,880
with their detection

203
00:08:34,880 --> 00:08:38,080
and the second test that is usually

204
00:08:38,080 --> 00:08:39,760
realized is the static heuristic

205
00:08:39,760 --> 00:08:41,200
detections

206
00:08:41,200 --> 00:08:44,240
it is most commonly known as

207
00:08:44,240 --> 00:08:47,519
inter artificial intelligence

208
00:08:47,519 --> 00:08:49,839
and the third one is the subject of this

209
00:08:49,839 --> 00:08:52,320
torque this is signatures

210
00:08:52,320 --> 00:08:54,800
and we will know more about them later

211
00:08:54,800 --> 00:08:57,519
and the last one is emulation

212
00:08:57,519 --> 00:09:00,399
after your binary executed it's not over

213
00:09:00,399 --> 00:09:04,399
you can still be uh detected and killed

214
00:09:04,399 --> 00:09:06,880
and that happens because the antivirus

215
00:09:06,880 --> 00:09:10,240
has several subscriptions about

216
00:09:10,240 --> 00:09:13,340
several events that can happen

217
00:09:13,340 --> 00:09:14,480
[Music]

218
00:09:14,480 --> 00:09:16,800
and there is plenty of literature on the

219
00:09:16,800 --> 00:09:19,199
subject

220
00:09:19,440 --> 00:09:21,360
luckily for us

221
00:09:21,360 --> 00:09:23,279
the antivirus have a pop line of

222
00:09:23,279 --> 00:09:25,600
detections and we can also have a

223
00:09:25,600 --> 00:09:27,240
pipeline of

224
00:09:27,240 --> 00:09:28,880
anti-anti-virus

225
00:09:28,880 --> 00:09:31,600
so for the hashes you just just change

226
00:09:31,600 --> 00:09:32,560
it a bit

227
00:09:32,560 --> 00:09:35,120
and for defeating the static heuristic

228
00:09:35,120 --> 00:09:36,720
detection

229
00:09:36,720 --> 00:09:38,080
we

230
00:09:38,080 --> 00:09:41,839
published some obfuscator that does that

231
00:09:41,839 --> 00:09:42,720
and

232
00:09:42,720 --> 00:09:44,880
to defeat the signatures this is the

233
00:09:44,880 --> 00:09:47,839
subject of this torque so

234
00:09:47,839 --> 00:09:50,640
stay with me and to detect the emulator

235
00:09:50,640 --> 00:09:53,760
that's one way to to defeat it

236
00:09:53,760 --> 00:09:54,640
and

237
00:09:54,640 --> 00:09:55,920
as

238
00:09:55,920 --> 00:09:58,320
with regards to real-time monitoring you

239
00:09:58,320 --> 00:10:00,720
know you can just patch the

240
00:10:00,720 --> 00:10:03,200
different hooks

241
00:10:03,200 --> 00:10:05,680
um even if they are in kernel under

242
00:10:05,680 --> 00:10:07,839
there is no problem to do that and it

243
00:10:07,839 --> 00:10:11,600
will make the antivirus blind

244
00:10:13,120 --> 00:10:14,000
so

245
00:10:14,000 --> 00:10:16,160
this is the way my torque is organized

246
00:10:16,160 --> 00:10:19,680
for for the rest of the torque

247
00:10:19,680 --> 00:10:21,680
the first thing that we have to

248
00:10:21,680 --> 00:10:26,079
um to do is to automate scans because um

249
00:10:26,079 --> 00:10:26,880
yes

250
00:10:26,880 --> 00:10:29,680
maybe you run a red team and you have a

251
00:10:29,680 --> 00:10:31,519
set of tools that you are using for

252
00:10:31,519 --> 00:10:33,040
years now

253
00:10:33,040 --> 00:10:34,959
and you don't want to change but you

254
00:10:34,959 --> 00:10:36,800
want to be aware when

255
00:10:36,800 --> 00:10:39,279
a set of tools gets detected by some

256
00:10:39,279 --> 00:10:40,880
antivirus

257
00:10:40,880 --> 00:10:43,760
and more specific to this torque

258
00:10:43,760 --> 00:10:46,079
we want to apply thousands of mutations

259
00:10:46,079 --> 00:10:49,040
on the sample until the sample comes out

260
00:10:49,040 --> 00:10:50,079
clean

261
00:10:50,079 --> 00:10:52,959
and to do that we have to automate scans

262
00:10:52,959 --> 00:10:55,920
and obviously we won't do that manually

263
00:10:55,920 --> 00:10:58,320
and at this point you might wonder what

264
00:10:58,320 --> 00:11:00,160
why are we not doing it with a virus

265
00:11:00,160 --> 00:11:02,720
total it's because uh

266
00:11:02,720 --> 00:11:04,800
for first they share the sample with

267
00:11:04,800 --> 00:11:08,079
vendors and the second one uh is the api

268
00:11:08,079 --> 00:11:12,079
is very very costly even for a company

269
00:11:12,079 --> 00:11:15,040
luckily for us we have tavis or mondi on

270
00:11:15,040 --> 00:11:16,160
this earth

271
00:11:16,160 --> 00:11:18,720
and sometimes he decided to uh to create

272
00:11:18,720 --> 00:11:20,079
magical things

273
00:11:20,079 --> 00:11:22,480
like the time when he decided to port

274
00:11:22,480 --> 00:11:25,839
windows dynamic link libraries to linux

275
00:11:25,839 --> 00:11:28,160
and for us that's a good thing because

276
00:11:28,160 --> 00:11:30,399
uh windows defender

277
00:11:30,399 --> 00:11:33,519
scan engine is mpclient.dll

278
00:11:33,519 --> 00:11:35,200
and it's standalone

279
00:11:35,200 --> 00:11:37,440
and load library the project from tavis

280
00:11:37,440 --> 00:11:39,920
for money is able to run it so it's

281
00:11:39,920 --> 00:11:42,800
perfect for automation the problem

282
00:11:42,800 --> 00:11:44,480
arises with other

283
00:11:44,480 --> 00:11:47,519
antivirus engines because sometimes they

284
00:11:47,519 --> 00:11:50,079
don't offer a common line interface and

285
00:11:50,079 --> 00:11:53,600
sometimes they only run on windows

286
00:11:53,600 --> 00:11:57,200
to tackle that issue i've decided to

287
00:11:57,200 --> 00:12:00,079
use vmware's vm run

288
00:12:00,079 --> 00:12:03,040
this is a tool that tips by default with

289
00:12:03,040 --> 00:12:05,839
well with vmware

290
00:12:05,839 --> 00:12:07,040
on the right

291
00:12:07,040 --> 00:12:08,320
you can see

292
00:12:08,320 --> 00:12:10,880
a command that you can run

293
00:12:10,880 --> 00:12:12,800
on a virtual machine provided that you

294
00:12:12,800 --> 00:12:14,639
have the vmx file

295
00:12:14,639 --> 00:12:17,200
and on the left you see the mandatory

296
00:12:17,200 --> 00:12:18,959
parameters that you have to

297
00:12:18,959 --> 00:12:20,240
to provide

298
00:12:20,240 --> 00:12:21,680
in order for the commentary to work

299
00:12:21,680 --> 00:12:23,360
obviously that's the password and

300
00:12:23,360 --> 00:12:27,440
username of the guest operating system

301
00:12:27,519 --> 00:12:30,000
more precisely here are two commands

302
00:12:30,000 --> 00:12:32,240
that will be useful to us

303
00:12:32,240 --> 00:12:33,040
if

304
00:12:33,040 --> 00:12:35,680
we were if we want to

305
00:12:35,680 --> 00:12:37,680
automate the scan

306
00:12:37,680 --> 00:12:39,200
with vmware

307
00:12:39,200 --> 00:12:41,279
we first have to copy a file from the

308
00:12:41,279 --> 00:12:43,040
host to the guest machine

309
00:12:43,040 --> 00:12:46,240
and then we want to invoke the

310
00:12:46,240 --> 00:12:49,519
the antivirus scan engine

311
00:12:49,519 --> 00:12:51,120
and this is a more

312
00:12:51,120 --> 00:12:53,680
complete example

313
00:12:53,680 --> 00:12:56,720
with kaspersky antivirus

314
00:12:56,720 --> 00:12:58,399
so here

315
00:12:58,399 --> 00:13:00,480
we call the vmron command

316
00:13:00,480 --> 00:13:02,800
we provide the username and password

317
00:13:02,800 --> 00:13:05,040
called the run program in quest

318
00:13:05,040 --> 00:13:08,320
and we provide the path to the vmx file

319
00:13:08,320 --> 00:13:10,639
where i installed kaspersky you know

320
00:13:10,639 --> 00:13:14,079
trial version it's enough

321
00:13:14,880 --> 00:13:15,839
then

322
00:13:15,839 --> 00:13:17,279
vmron expects

323
00:13:17,279 --> 00:13:19,839
the full path to the executable to be

324
00:13:19,839 --> 00:13:20,720
run

325
00:13:20,720 --> 00:13:23,480
in the case of kaspersky antivirus it's

326
00:13:23,480 --> 00:13:26,320
avp.exe which also expects

327
00:13:26,320 --> 00:13:27,839
the keyword scan

328
00:13:27,839 --> 00:13:31,440
and a file to scan

329
00:13:31,440 --> 00:13:32,240
when

330
00:13:32,240 --> 00:13:34,560
your antivirus does not offer a command

331
00:13:34,560 --> 00:13:36,959
line interface you can still rely on

332
00:13:36,959 --> 00:13:38,639
some oracle to

333
00:13:38,639 --> 00:13:40,720
know if the antivirus is detected as

334
00:13:40,720 --> 00:13:42,399
malware or not

335
00:13:42,399 --> 00:13:46,560
and to do that i have two steps

336
00:13:46,800 --> 00:13:48,480
first we copy the file from the host to

337
00:13:48,480 --> 00:13:52,320
the guest like your user and next we can

338
00:13:52,320 --> 00:13:54,480
leverage the fact that some anti-virus

339
00:13:54,480 --> 00:13:56,079
will trigger a scan

340
00:13:56,079 --> 00:13:58,639
once the file is written to disk

341
00:13:58,639 --> 00:14:00,880
and

342
00:14:00,880 --> 00:14:03,120
when that's the case we can assume that

343
00:14:03,120 --> 00:14:06,399
the file will be deleted or point into

344
00:14:06,399 --> 00:14:07,760
quarantine

345
00:14:07,760 --> 00:14:10,560
if the antivirus does not do that

346
00:14:10,560 --> 00:14:12,720
most likely it will trigger the scan

347
00:14:12,720 --> 00:14:14,800
when the file is executed

348
00:14:14,800 --> 00:14:17,839
so to do that we actually run the sample

349
00:14:17,839 --> 00:14:20,320
and later on we check that the file uh

350
00:14:20,320 --> 00:14:23,199
exist on disk if it does not um it was

351
00:14:23,199 --> 00:14:25,279
not a malware it was not detected as

352
00:14:25,279 --> 00:14:28,000
malware and if it's not there anymore

353
00:14:28,000 --> 00:14:31,120
um it was detected as malware

354
00:14:31,120 --> 00:14:33,440
now that we can automate scan we would

355
00:14:33,440 --> 00:14:36,000
be talking about search algorithm in

356
00:14:36,000 --> 00:14:38,560
order to find signatures

357
00:14:38,560 --> 00:14:40,720
so this is a common problem we have a

358
00:14:40,720 --> 00:14:43,279
needle and we have a huge haystack how

359
00:14:43,279 --> 00:14:46,240
do we find the needle in the haystack

360
00:14:46,240 --> 00:14:48,959
here in this case i've chosen as example

361
00:14:48,959 --> 00:14:50,240
mimikatz

362
00:14:50,240 --> 00:14:52,959
mimikatz is a one megabyte binary

363
00:14:52,959 --> 00:14:55,760
and obviously not those

364
00:14:55,760 --> 00:14:57,839
not the entire file is detected as

365
00:14:57,839 --> 00:15:00,560
malware sorry only some specific parts

366
00:15:00,560 --> 00:15:02,560
in it that are detected and we want to

367
00:15:02,560 --> 00:15:03,839
find them

368
00:15:03,839 --> 00:15:06,000
um this is a problem that has been with

369
00:15:06,000 --> 00:15:08,079
us for some years now so obviously we

370
00:15:08,079 --> 00:15:09,120
have some

371
00:15:09,120 --> 00:15:11,519
public projects about it

372
00:15:11,519 --> 00:15:13,680
the first i'm aware of is this split

373
00:15:13,680 --> 00:15:16,720
which came out in 2006

374
00:15:16,720 --> 00:15:19,120
the idea behind this split is to split

375
00:15:19,120 --> 00:15:21,680
the file into smaller parts

376
00:15:21,680 --> 00:15:23,760
and to see which small parts triggers

377
00:15:23,760 --> 00:15:26,079
the antivirus and the further check

378
00:15:26,079 --> 00:15:28,720
which came out in 2019 also does that

379
00:15:28,720 --> 00:15:31,680
but in a better way

380
00:15:31,680 --> 00:15:34,560
the problem with this methodology is

381
00:15:34,560 --> 00:15:37,040
that when you split executable files

382
00:15:37,040 --> 00:15:38,320
into chunks

383
00:15:38,320 --> 00:15:40,720
you assume that the antivirus might

384
00:15:40,720 --> 00:15:42,800
treat the chunks the same way as it

385
00:15:42,800 --> 00:15:44,000
might treat

386
00:15:44,000 --> 00:15:46,560
an entire executable file that's because

387
00:15:46,560 --> 00:15:50,320
of the portal executable structure

388
00:15:50,320 --> 00:15:51,759
if you break it

389
00:15:51,759 --> 00:15:53,680
you know the antivirus has no way to

390
00:15:53,680 --> 00:15:56,079
know that it's an actual executable so

391
00:15:56,079 --> 00:15:59,759
he might skip scanning it

392
00:15:59,759 --> 00:16:02,720
and the second reason is the granularity

393
00:16:02,720 --> 00:16:04,880
but more on that later

394
00:16:04,880 --> 00:16:08,240
the solution for us was to still do

395
00:16:08,240 --> 00:16:10,399
mutations but um

396
00:16:10,399 --> 00:16:12,880
that are aware of the pa forma

397
00:16:12,880 --> 00:16:15,440
if you don't remember about the pa forma

398
00:16:15,440 --> 00:16:17,839
uh here is a quick reminder

399
00:16:17,839 --> 00:16:20,000
um it's a file format so obviously there

400
00:16:20,000 --> 00:16:22,399
is there are a lot of headers that we

401
00:16:22,399 --> 00:16:23,759
don't care about

402
00:16:23,759 --> 00:16:26,320
um as a software developer what we want

403
00:16:26,320 --> 00:16:28,160
to know is that your code will most

404
00:16:28,160 --> 00:16:30,720
likely be present in a text section

405
00:16:30,720 --> 00:16:33,040
and the data sections contains

406
00:16:33,040 --> 00:16:35,920
initialized data that can still be

407
00:16:35,920 --> 00:16:37,040
written to

408
00:16:37,040 --> 00:16:39,120
so most likely you will find your global

409
00:16:39,120 --> 00:16:40,720
variables here

410
00:16:40,720 --> 00:16:43,199
and in the r data stream

411
00:16:43,199 --> 00:16:44,560
section

412
00:16:44,560 --> 00:16:46,480
it says sections

413
00:16:46,480 --> 00:16:48,800
where initials data are present but they

414
00:16:48,800 --> 00:16:50,399
cannot be written to

415
00:16:50,399 --> 00:16:52,639
so most likely you will find constants

416
00:16:52,639 --> 00:16:54,959
such as strings and the other sections

417
00:16:54,959 --> 00:16:57,920
are less interesting

418
00:16:57,920 --> 00:16:59,279
so

419
00:16:59,279 --> 00:17:01,120
if you're a lazy engineer and you are

420
00:17:01,120 --> 00:17:02,240
working

421
00:17:02,240 --> 00:17:04,319
for an antivirus company what would you

422
00:17:04,319 --> 00:17:06,480
do to to solve the problem of a virus

423
00:17:06,480 --> 00:17:09,119
like mcafee uh pretended to do

424
00:17:09,119 --> 00:17:11,280
um most likely you will search for four

425
00:17:11,280 --> 00:17:12,959
strings because they carry a lot of

426
00:17:12,959 --> 00:17:15,359
intent you know some developers even

427
00:17:15,359 --> 00:17:18,480
leaves the double single path of their

428
00:17:18,480 --> 00:17:20,640
executable and you can know the name of

429
00:17:20,640 --> 00:17:23,520
the person that wrote malwares

430
00:17:23,520 --> 00:17:26,640
so it's a shortcut why not take it

431
00:17:26,640 --> 00:17:28,480
but if you were to take that shortcut

432
00:17:28,480 --> 00:17:30,160
why would you

433
00:17:30,160 --> 00:17:33,200
search for sequences of bytes

434
00:17:33,200 --> 00:17:37,440
this is the same view as before but um

435
00:17:37,440 --> 00:17:39,840
laid out differently

436
00:17:39,840 --> 00:17:42,000
if you want to find hashes or inline

437
00:17:42,000 --> 00:17:44,240
constant you would look for them inside

438
00:17:44,240 --> 00:17:46,480
the text section if you want to find

439
00:17:46,480 --> 00:17:49,360
shell codes or other stuff

440
00:17:49,360 --> 00:17:51,360
maybe

441
00:17:51,360 --> 00:17:54,160
take your chances with the data section

442
00:17:54,160 --> 00:17:56,320
if you want to look for strings

443
00:17:56,320 --> 00:17:58,840
that will be the air data

444
00:17:58,840 --> 00:18:01,600
section at this point you might wonder

445
00:18:01,600 --> 00:18:03,840
yeah sure if i was a lazy engineer i

446
00:18:03,840 --> 00:18:06,400
would do that but

447
00:18:06,400 --> 00:18:08,640
engineers actual engineers working in

448
00:18:08,640 --> 00:18:10,559
anti-virus company they won't do that

449
00:18:10,559 --> 00:18:12,160
right

450
00:18:12,160 --> 00:18:15,039
and i'm not saying they do that i can

451
00:18:15,039 --> 00:18:17,200
only show you something and you will

452
00:18:17,200 --> 00:18:21,080
make your own deductions

453
00:18:30,000 --> 00:18:32,320
so here we have some files i have

454
00:18:32,320 --> 00:18:35,439
selected for the demo

455
00:18:40,840 --> 00:18:43,520
um here we have

456
00:18:43,520 --> 00:18:46,960
a component of meterpreter

457
00:18:47,679 --> 00:18:49,360
and that's an option to trigger an

458
00:18:49,360 --> 00:18:52,240
antivirus scan

459
00:18:54,080 --> 00:18:56,400
and here meterpreter detected

460
00:18:56,400 --> 00:18:58,400
as malware

461
00:18:58,400 --> 00:19:00,480
now let's say i want to check my

462
00:19:00,480 --> 00:19:03,360
assumptions and

463
00:19:03,360 --> 00:19:07,120
let's say i want to hide one section

464
00:19:07,120 --> 00:19:11,320
which is the data section

465
00:19:12,400 --> 00:19:15,600
this allows me to patch the file

466
00:19:15,600 --> 00:19:19,280
and now if i scan it again

467
00:19:21,280 --> 00:19:24,280


468
00:19:36,480 --> 00:19:39,039
it's not detected anymore and it doesn't

469
00:19:39,039 --> 00:19:41,120
make sense because the data sections

470
00:19:41,120 --> 00:19:44,320
only contain initialized data

471
00:19:44,320 --> 00:19:48,080
i would assume by uh the year 2022

472
00:19:48,080 --> 00:19:49,200
that

473
00:19:49,200 --> 00:19:52,320
billion dollar companies would actually

474
00:19:52,320 --> 00:19:54,240
you know run semantical analysis on

475
00:19:54,240 --> 00:19:57,840
files and that's not the case

476
00:20:05,039 --> 00:20:08,000
i forgot that that slide i've shown you

477
00:20:08,000 --> 00:20:10,880
matteserver.x64.dll

478
00:20:10,880 --> 00:20:12,720
and where does it come from

479
00:20:12,720 --> 00:20:13,919
if you

480
00:20:13,919 --> 00:20:16,320
uh install metaspot framework

481
00:20:16,320 --> 00:20:18,559
there is a stream report called metaspot

482
00:20:18,559 --> 00:20:20,640
payloads and you can

483
00:20:20,640 --> 00:20:23,280
fetch the latest versions this way and

484
00:20:23,280 --> 00:20:26,000
once you impact the ruby gem you will

485
00:20:26,000 --> 00:20:28,080
find the following files that are

486
00:20:28,080 --> 00:20:30,960
scanned sorry

487
00:20:30,960 --> 00:20:31,760
so

488
00:20:31,760 --> 00:20:34,400
we are lazy engineers

489
00:20:34,400 --> 00:20:37,360
always everywhere

490
00:20:37,360 --> 00:20:39,200
so they target

491
00:20:39,200 --> 00:20:42,480
sequences of bytes of arbitrary lens

492
00:20:42,480 --> 00:20:45,679
and i also know by experience that

493
00:20:45,679 --> 00:20:48,240
strings or sequences of bytes have

494
00:20:48,240 --> 00:20:49,840
malicious or

495
00:20:49,840 --> 00:20:51,280
b9 scores

496
00:20:51,280 --> 00:20:52,960
and i don't care about

497
00:20:52,960 --> 00:20:55,120
benign scores and i don't care about low

498
00:20:55,120 --> 00:20:57,120
malicious score i want to find the

499
00:20:57,120 --> 00:20:59,200
fewest amount of strings that have the

500
00:20:59,200 --> 00:21:00,880
highest score

501
00:21:00,880 --> 00:21:03,679
why because let's say i have my results

502
00:21:03,679 --> 00:21:06,000
and i know which string are detected by

503
00:21:06,000 --> 00:21:09,120
windows defender or some other antivirus

504
00:21:09,120 --> 00:21:10,720
i will need to patch them and it's

505
00:21:10,720 --> 00:21:13,200
easier to patch free strings than

506
00:21:13,200 --> 00:21:14,840
thousands of

507
00:21:14,840 --> 00:21:16,960
strings so

508
00:21:16,960 --> 00:21:19,360
i decided to rely on the

509
00:21:19,360 --> 00:21:21,520
divide and conquer algorithm if you

510
00:21:21,520 --> 00:21:23,520
don't remember how it works you have

511
00:21:23,520 --> 00:21:25,600
your a-stack and it's too big to to find

512
00:21:25,600 --> 00:21:28,000
your needle so what you're gonna do you

513
00:21:28,000 --> 00:21:31,200
will cut the haystack into half

514
00:21:31,200 --> 00:21:33,679
give one half to a colleague

515
00:21:33,679 --> 00:21:34,559
and

516
00:21:34,559 --> 00:21:36,720
you will concentrate your effort on your

517
00:21:36,720 --> 00:21:39,919
own a half and it's still too big so cut

518
00:21:39,919 --> 00:21:43,039
it in half and and so on until you have

519
00:21:43,039 --> 00:21:44,880
a half

520
00:21:44,880 --> 00:21:46,320
small enough

521
00:21:46,320 --> 00:21:48,480
that you may just know if your needle is

522
00:21:48,480 --> 00:21:51,120
present in it

523
00:21:51,440 --> 00:21:53,280
of course there are other ways to to

524
00:21:53,280 --> 00:21:55,520
find stuff i've also tried a linear

525
00:21:55,520 --> 00:21:58,880
search but it was not

526
00:21:58,880 --> 00:22:01,760
very very efficient for me

527
00:22:01,760 --> 00:22:03,360
more precisely

528
00:22:03,360 --> 00:22:05,679
applied to executables and antivirus

529
00:22:05,679 --> 00:22:08,320
software you want to split the sample

530
00:22:08,320 --> 00:22:11,280
fill one half with random junk

531
00:22:11,280 --> 00:22:14,240
and redo an anti-virus scan and then two

532
00:22:14,240 --> 00:22:16,240
feeling two things can happen

533
00:22:16,240 --> 00:22:18,960
either the file is detected as malware

534
00:22:18,960 --> 00:22:20,400
either it's not

535
00:22:20,400 --> 00:22:22,320
if the file is detected as malware it

536
00:22:22,320 --> 00:22:24,960
means that the half you filled with with

537
00:22:24,960 --> 00:22:27,520
random junk was not relevant for the

538
00:22:27,520 --> 00:22:29,600
anti-virus

539
00:22:29,600 --> 00:22:32,559
but the file that was left intact

540
00:22:32,559 --> 00:22:34,240
suffice to trigger the antivirus

541
00:22:34,240 --> 00:22:36,480
detections so you will concentrate your

542
00:22:36,480 --> 00:22:38,320
efforts on that

543
00:22:38,320 --> 00:22:41,360
and you repeat that process by

544
00:22:41,360 --> 00:22:44,559
splitting the half that was left intact

545
00:22:44,559 --> 00:22:45,520
and

546
00:22:45,520 --> 00:22:48,240
one half with junk data one half left

547
00:22:48,240 --> 00:22:52,480
intact and you repeat that process

548
00:22:52,640 --> 00:22:55,200
but we can do better than splitting and

549
00:22:55,200 --> 00:22:57,200
scanning things

550
00:22:57,200 --> 00:22:59,679
we've seen before the pa format section

551
00:22:59,679 --> 00:23:00,880
sections

552
00:23:00,880 --> 00:23:01,840
and

553
00:23:01,840 --> 00:23:03,760
there are different stuff in different

554
00:23:03,760 --> 00:23:05,520
sections if

555
00:23:05,520 --> 00:23:07,600
the antivirus triggers on the text

556
00:23:07,600 --> 00:23:08,480
section

557
00:23:08,480 --> 00:23:10,320
you know that in it you will find

558
00:23:10,320 --> 00:23:11,600
functions so

559
00:23:11,600 --> 00:23:14,000
the granularity in there will be

560
00:23:14,000 --> 00:23:16,320
functions that you can recover with your

561
00:23:16,320 --> 00:23:18,159
favorite disassembler

562
00:23:18,159 --> 00:23:20,880
if the data section is detected most

563
00:23:20,880 --> 00:23:23,679
likely it will be a global variable so

564
00:23:23,679 --> 00:23:25,120
um i

565
00:23:25,120 --> 00:23:27,760
had no tools to do that so build my own

566
00:23:27,760 --> 00:23:29,520
and to

567
00:23:29,520 --> 00:23:31,919
react to our detections inside the air

568
00:23:31,919 --> 00:23:35,200
data section we know there is strings in

569
00:23:35,200 --> 00:23:38,400
here and uh it's a chance for us because

570
00:23:38,400 --> 00:23:40,559
radar 2 works very well with strings and

571
00:23:40,559 --> 00:23:42,480
we can animate them and have a

572
00:23:42,480 --> 00:23:45,440
granularity on strings

573
00:23:45,440 --> 00:23:48,320
and talking about strings here is a

574
00:23:48,320 --> 00:23:51,120
practical example

575
00:23:51,120 --> 00:23:53,840
with some imicates mimikatz contains 5

576
00:23:53,840 --> 00:23:56,320
000 strings so it's way too much to do

577
00:23:56,320 --> 00:23:58,000
the analysis manually

578
00:23:58,000 --> 00:24:01,200
and the strings have between 5 and 100

579
00:24:01,200 --> 00:24:02,720
characters

580
00:24:02,720 --> 00:24:05,120
so we have a good granularity and

581
00:24:05,120 --> 00:24:06,960
applied to that a divide and conquer

582
00:24:06,960 --> 00:24:09,440
algorithm would mean that we split the

583
00:24:09,440 --> 00:24:12,000
five cat strings into two clusters

584
00:24:12,000 --> 00:24:14,720
um for the cluster one we replace the

585
00:24:14,720 --> 00:24:16,960
content of every string

586
00:24:16,960 --> 00:24:18,480
in this cluster

587
00:24:18,480 --> 00:24:20,799
with the random data and we want to keep

588
00:24:20,799 --> 00:24:22,400
it the same size because otherwise we

589
00:24:22,400 --> 00:24:24,320
would corrupt stuff and here we are

590
00:24:24,320 --> 00:24:26,080
precise

591
00:24:26,080 --> 00:24:28,559
and the strings in cluster 2 are left

592
00:24:28,559 --> 00:24:30,720
intact we patch the sample with this

593
00:24:30,720 --> 00:24:33,760
modification and then we do an antivirus

594
00:24:33,760 --> 00:24:35,760
scan and then two things can happen as

595
00:24:35,760 --> 00:24:38,559
you understood well and

596
00:24:38,559 --> 00:24:40,960
our reaction to that will depend on the

597
00:24:40,960 --> 00:24:43,360
fact if the malware is still detected or

598
00:24:43,360 --> 00:24:45,120
not

599
00:24:45,120 --> 00:24:47,679
we repeat the process until we have two

600
00:24:47,679 --> 00:24:50,320
clusters that only contain one string in

601
00:24:50,320 --> 00:24:51,919
each

602
00:24:51,919 --> 00:24:52,880
um

603
00:24:52,880 --> 00:24:53,840
so that

604
00:24:53,840 --> 00:24:55,679
once we do the antivirus scan we know

605
00:24:55,679 --> 00:24:57,120
which string was detected and

606
00:24:57,120 --> 00:24:59,279
recursively we can enumerate all the

607
00:24:59,279 --> 00:25:02,400
strings that are detected

608
00:25:03,600 --> 00:25:07,039
so i can do a quick demo but

609
00:25:07,039 --> 00:25:09,919
i would prefer to

610
00:25:10,880 --> 00:25:12,880
to show you something i've already run

611
00:25:12,880 --> 00:25:14,880
because i don't know if i'm not short on

612
00:25:14,880 --> 00:25:15,919
time but

613
00:25:15,919 --> 00:25:18,400
it takes three minutes to to run

614
00:25:18,400 --> 00:25:20,480
completely

615
00:25:20,480 --> 00:25:22,720
so

616
00:25:23,919 --> 00:25:26,159
here is mimikatz

617
00:25:26,159 --> 00:25:29,159
soon

618
00:25:29,440 --> 00:25:33,600
the output is very verbose don't worry

619
00:25:36,640 --> 00:25:40,400
so we have our tool and we have mimikats

620
00:25:40,400 --> 00:25:42,960
we just run the tool on mimikatz

621
00:25:42,960 --> 00:25:46,080
and it will by itself figure out

622
00:25:46,080 --> 00:25:48,080
what are the things that are detected by

623
00:25:48,080 --> 00:25:50,640
uh by defender in this case

624
00:25:50,640 --> 00:25:54,000
and to begin the analysis the the tool

625
00:25:54,000 --> 00:25:57,840
first batch every string

626
00:25:59,039 --> 00:26:02,080
let me jump to the end

627
00:26:07,600 --> 00:26:12,000
and at some point um he did the divide

628
00:26:12,000 --> 00:26:13,760
and conquer algorithm

629
00:26:13,760 --> 00:26:17,120
and he phoned that string first that was

630
00:26:17,120 --> 00:26:20,240
the highest score string

631
00:26:20,240 --> 00:26:21,279
and

632
00:26:21,279 --> 00:26:24,000
you may recognize it if you already used

633
00:26:24,000 --> 00:26:28,799
mimikatz it's the famous header you know

634
00:26:28,799 --> 00:26:31,200
al aviana moore

635
00:26:31,200 --> 00:26:32,960
and to me i don't know about you but

636
00:26:32,960 --> 00:26:35,120
it's very stupid to me that an antivirus

637
00:26:35,120 --> 00:26:36,880
would look for that but

638
00:26:36,880 --> 00:26:38,480
yeah anyways

639
00:26:38,480 --> 00:26:40,000
and the

640
00:26:40,000 --> 00:26:42,000
other strings that are detected are the

641
00:26:42,000 --> 00:26:44,159
following

642
00:26:44,159 --> 00:26:46,159
uh these are a function name

643
00:26:46,159 --> 00:26:48,400
like real function name that are offered

644
00:26:48,400 --> 00:26:52,679
by microsoft for you to use

645
00:26:59,600 --> 00:27:01,918
okay

646
00:27:02,400 --> 00:27:04,240
they're telling me that the text was too

647
00:27:04,240 --> 00:27:07,240
small

648
00:27:10,640 --> 00:27:12,480
so

649
00:27:12,480 --> 00:27:15,120
we found strings that once you patch

650
00:27:15,120 --> 00:27:16,000
them

651
00:27:16,000 --> 00:27:17,679
the file is no longer detected as

652
00:27:17,679 --> 00:27:19,760
mimikats but

653
00:27:19,760 --> 00:27:22,320
at this point you might wonder

654
00:27:22,320 --> 00:27:24,559
is that really true

655
00:27:24,559 --> 00:27:26,480
well they're really the strings that are

656
00:27:26,480 --> 00:27:28,799
looked for by defender

657
00:27:28,799 --> 00:27:31,039
and i don't want you to take my word for

658
00:27:31,039 --> 00:27:34,799
it and to prove that it's correct we

659
00:27:34,799 --> 00:27:36,640
um there is only two ways to do that

660
00:27:36,640 --> 00:27:38,720
it's to work at microsoft and uh

661
00:27:38,720 --> 00:27:40,960
have a windows defender source code and

662
00:27:40,960 --> 00:27:43,120
unfortunately that's not the case for us

663
00:27:43,120 --> 00:27:45,200
so we have to rely on reverse

664
00:27:45,200 --> 00:27:46,399
engineering

665
00:27:46,399 --> 00:27:48,640
and uh

666
00:27:48,640 --> 00:27:50,799
a guy named comeyon

667
00:27:50,799 --> 00:27:52,960
already did the work and a very esteemed

668
00:27:52,960 --> 00:27:55,279
colleague of mine roman melchior built

669
00:27:55,279 --> 00:27:56,960
upon that and fully automated the

670
00:27:56,960 --> 00:27:58,080
process

671
00:27:58,080 --> 00:28:01,520
and what you are seeing here

672
00:28:01,520 --> 00:28:03,440
is the the result

673
00:28:03,440 --> 00:28:05,760
spit out but by his tool

674
00:28:05,760 --> 00:28:09,200
on the top you see the signature name

675
00:28:09,200 --> 00:28:11,760
and in the middle you see the raw binary

676
00:28:11,760 --> 00:28:13,760
data that are looked for by windows

677
00:28:13,760 --> 00:28:16,320
defender and on the bottom you see the

678
00:28:16,320 --> 00:28:18,640
strings that were extracted from this

679
00:28:18,640 --> 00:28:20,320
row binary data

680
00:28:20,320 --> 00:28:23,440
and you see the same strings that uh our

681
00:28:23,440 --> 00:28:24,960
tool found

682
00:28:24,960 --> 00:28:28,480
like the url to the blog of john tikui

683
00:28:28,480 --> 00:28:29,520
and

684
00:28:29,520 --> 00:28:32,480
the function names

685
00:28:33,520 --> 00:28:35,520
now let's say that

686
00:28:35,520 --> 00:28:38,320
there is a signature in the data section

687
00:28:38,320 --> 00:28:41,279
we know that there is most likely global

688
00:28:41,279 --> 00:28:43,440
variables in there

689
00:28:43,440 --> 00:28:44,880
and it's hard for the human height to

690
00:28:44,880 --> 00:28:48,320
recognize recognize raw binary data so

691
00:28:48,320 --> 00:28:51,440
what i did was trying to recover them

692
00:28:51,440 --> 00:28:52,640
um

693
00:28:52,640 --> 00:28:54,720
by leveraging the fact that if you have

694
00:28:54,720 --> 00:28:57,840
a global variable most likely you use

695
00:28:57,840 --> 00:28:59,919
use it somewhere in your program

696
00:28:59,919 --> 00:29:02,320
so you expect to find a cross reference

697
00:29:02,320 --> 00:29:04,080
coming from the text section going into

698
00:29:04,080 --> 00:29:05,679
the data section

699
00:29:05,679 --> 00:29:07,600
and that allows me to find the address

700
00:29:07,600 --> 00:29:09,840
of the global variables

701
00:29:09,840 --> 00:29:11,679
which is not enough you also need to

702
00:29:11,679 --> 00:29:14,159
know their length and to do that i made

703
00:29:14,159 --> 00:29:16,240
the assumption that the length is equal

704
00:29:16,240 --> 00:29:19,120
or less to the address of the next cross

705
00:29:19,120 --> 00:29:20,159
reference

706
00:29:20,159 --> 00:29:21,760
and then you do the divide and conquer

707
00:29:21,760 --> 00:29:23,840
algorithm on that

708
00:29:23,840 --> 00:29:25,679
and you will be able to find

709
00:29:25,679 --> 00:29:27,600
the signatures

710
00:29:27,600 --> 00:29:29,679
that are detected by windows defender

711
00:29:29,679 --> 00:29:30,799
inside the

712
00:29:30,799 --> 00:29:32,240
data section

713
00:29:32,240 --> 00:29:36,159
so let me get back to a demo

714
00:29:36,159 --> 00:29:40,520
this time i will make the text bigger

715
00:29:45,520 --> 00:29:48,158
should be enough

716
00:29:50,000 --> 00:29:52,320
or not

717
00:29:52,960 --> 00:29:55,440
this time it's it's good

718
00:29:55,440 --> 00:29:58,080
so that's the output i've shown you

719
00:29:58,080 --> 00:30:00,080
before beginning the torque

720
00:30:00,080 --> 00:30:02,000
and that was a component of metal

721
00:30:02,000 --> 00:30:03,520
pressure

722
00:30:03,520 --> 00:30:06,000
and the tool identified that the

723
00:30:06,000 --> 00:30:08,320
following sequences of byte is

724
00:30:08,320 --> 00:30:10,240
responsible for windows defender

725
00:30:10,240 --> 00:30:12,799
detection and if if you patch these

726
00:30:12,799 --> 00:30:15,440
bytes it's no longer detected so what

727
00:30:15,440 --> 00:30:18,000
the heck are those bytes

728
00:30:18,000 --> 00:30:20,159
and to answer that i'm just going to to

729
00:30:20,159 --> 00:30:23,840
grep like a windows defender does

730
00:30:40,880 --> 00:30:43,120
and these are the first

731
00:30:43,120 --> 00:30:46,959
two bytes that you are seeing here

732
00:30:47,919 --> 00:30:52,399
and it spit out only one file good

733
00:30:55,919 --> 00:30:57,279
and here you're starting to see

734
00:30:57,279 --> 00:30:58,640
interesting stuff

735
00:30:58,640 --> 00:31:00,320
strings

736
00:31:00,320 --> 00:31:02,240
but those strings are special in the

737
00:31:02,240 --> 00:31:05,840
sense that they are shark codes

738
00:31:21,200 --> 00:31:24,480
i'm not here

739
00:31:25,600 --> 00:31:27,360
here that's the shell code that is

740
00:31:27,360 --> 00:31:29,440
detected by windows defender

741
00:31:29,440 --> 00:31:31,600
and yeah it might make sense because

742
00:31:31,600 --> 00:31:33,919
this shell code allows to

743
00:31:33,919 --> 00:31:36,000
transfer your meta prepared session into

744
00:31:36,000 --> 00:31:38,080
another process so

745
00:31:38,080 --> 00:31:39,840
you would in fact another process with

746
00:31:39,840 --> 00:31:43,039
your metropolitan session

747
00:31:43,039 --> 00:31:44,559
but still

748
00:31:44,559 --> 00:31:46,399
there are a lot of interesting

749
00:31:46,399 --> 00:31:48,720
stuff in the file that we've just seen

750
00:31:48,720 --> 00:31:50,960
and defender only is able to detect the

751
00:31:50,960 --> 00:31:53,679
strings in it

752
00:31:55,840 --> 00:31:57,679
and here i've decided to show you some

753
00:31:57,679 --> 00:31:59,600
code but don't worry the goal is not to

754
00:31:59,600 --> 00:32:01,440
explain each line

755
00:32:01,440 --> 00:32:03,440
i just wanted to show you how easy it is

756
00:32:03,440 --> 00:32:06,640
to once you rely on powerful frameworks

757
00:32:06,640 --> 00:32:09,440
such as radar 2 you are able to

758
00:32:09,440 --> 00:32:11,519
you know do stuff like global viable

759
00:32:11,519 --> 00:32:13,440
recovery

760
00:32:13,440 --> 00:32:16,159
the most interesting stuff is on the

761
00:32:16,159 --> 00:32:19,760
right um pipe dot cmdj allows to run a

762
00:32:19,760 --> 00:32:22,320
radar 2 command and get back the result

763
00:32:22,320 --> 00:32:23,519
as json

764
00:32:23,519 --> 00:32:26,480
and the sub command axg allows to

765
00:32:26,480 --> 00:32:28,720
enumerate cross-reference and get back

766
00:32:28,720 --> 00:32:31,360
the result as json

767
00:32:31,360 --> 00:32:33,039
and um

768
00:32:33,039 --> 00:32:35,519
what goes on on this function is exactly

769
00:32:35,519 --> 00:32:38,399
as i've told you before

770
00:32:38,399 --> 00:32:40,559
but you might wonder

771
00:32:40,559 --> 00:32:42,880
is that really necessary and i've just

772
00:32:42,880 --> 00:32:45,360
shown you that yes it's necessary to do

773
00:32:45,360 --> 00:32:47,120
that because

774
00:32:47,120 --> 00:32:48,799
some antivirus are stupid and will look

775
00:32:48,799 --> 00:32:51,918
for global variables

776
00:32:53,039 --> 00:32:55,440
when all else fails and

777
00:32:55,440 --> 00:32:57,840
there is a section where raw binary data

778
00:32:57,840 --> 00:32:59,440
is looked for

779
00:32:59,440 --> 00:33:01,440
you have to rely on chunks and we know

780
00:33:01,440 --> 00:33:02,720
that's an issue

781
00:33:02,720 --> 00:33:05,120
because chunks may overlap envelope or

782
00:33:05,120 --> 00:33:06,399
intersect

783
00:33:06,399 --> 00:33:08,000
and here i have

784
00:33:08,000 --> 00:33:10,480
chosen a special case

785
00:33:10,480 --> 00:33:13,440
which really happened

786
00:33:13,440 --> 00:33:15,279
by experiments

787
00:33:15,279 --> 00:33:16,880
let's say you have

788
00:33:16,880 --> 00:33:18,799
an interval for a signature you know

789
00:33:18,799 --> 00:33:22,159
it's somewhere in the middle of the file

790
00:33:22,159 --> 00:33:24,960
but once you start splitting things you

791
00:33:24,960 --> 00:33:27,360
will break the actual signatures

792
00:33:27,360 --> 00:33:28,960
and you

793
00:33:28,960 --> 00:33:32,640
the analysis won't be able to continue

794
00:33:32,640 --> 00:33:35,600
and to solve that issue i rely on the

795
00:33:35,600 --> 00:33:38,320
interval trees because there are exactly

796
00:33:38,320 --> 00:33:40,000
made for that

797
00:33:40,000 --> 00:33:40,960
you have

798
00:33:40,960 --> 00:33:43,760
you have to maintain a list of intervals

799
00:33:43,760 --> 00:33:46,960
uh once you have found a given interval

800
00:33:46,960 --> 00:33:49,039
uh doesn't matter if it's t interval is

801
00:33:49,039 --> 00:33:50,080
very big

802
00:33:50,080 --> 00:33:51,519
you remember it

803
00:33:51,519 --> 00:33:54,240
and as the analysis goes on

804
00:33:54,240 --> 00:33:57,360
you have smaller and smaller intervals

805
00:33:57,360 --> 00:33:58,559
and

806
00:33:58,559 --> 00:34:00,720
once the analysis is finished

807
00:34:00,720 --> 00:34:01,760
you

808
00:34:01,760 --> 00:34:04,559
can do queries on the tree of intervals

809
00:34:04,559 --> 00:34:07,600
like which interval envelops

810
00:34:07,600 --> 00:34:10,239
which other interval

811
00:34:10,239 --> 00:34:14,239
this allows to filter results

812
00:34:14,320 --> 00:34:17,280
and as a bonus let's say that we have

813
00:34:17,280 --> 00:34:20,000
identified the strings that are looked

814
00:34:20,000 --> 00:34:23,199
for by antivirus engines

815
00:34:23,199 --> 00:34:25,520
and you are lazy

816
00:34:25,520 --> 00:34:27,199
and you don't want to go into source

817
00:34:27,199 --> 00:34:29,040
code patch the source code and rebuild

818
00:34:29,040 --> 00:34:31,119
the software you want to automatically

819
00:34:31,119 --> 00:34:32,639
patch the binary

820
00:34:32,639 --> 00:34:33,440
but

821
00:34:33,440 --> 00:34:35,119
obviously you don't want to break the

822
00:34:35,119 --> 00:34:37,599
binary and if you just simply remove the

823
00:34:37,599 --> 00:34:39,760
strings the binary might not work

824
00:34:39,760 --> 00:34:41,440
anymore

825
00:34:41,440 --> 00:34:43,599
so is it that possible is that possible

826
00:34:43,599 --> 00:34:45,280
to encrypt strings

827
00:34:45,280 --> 00:34:47,520
directly inside binaries

828
00:34:47,520 --> 00:34:49,280
i didn't know at the time but i took on

829
00:34:49,280 --> 00:34:51,280
the challenge and this is the idea i

830
00:34:51,280 --> 00:34:52,960
came up with

831
00:34:52,960 --> 00:34:55,199
first thing first you need a decryption

832
00:34:55,199 --> 00:34:57,200
function that you want to inject inside

833
00:34:57,200 --> 00:34:59,440
the binary because the binary was never

834
00:34:59,440 --> 00:35:02,400
meant to decrypt stuff maybe

835
00:35:02,400 --> 00:35:04,560
and then you encrypt

836
00:35:04,560 --> 00:35:06,000
every string

837
00:35:06,000 --> 00:35:08,240
and for each string you want to make

838
00:35:08,240 --> 00:35:10,400
sure that once the binary actually

839
00:35:10,400 --> 00:35:11,520
executes

840
00:35:11,520 --> 00:35:13,520
and might

841
00:35:13,520 --> 00:35:16,320
need the strings in clear text you want

842
00:35:16,320 --> 00:35:18,079
to make sure that the strings actually

843
00:35:18,079 --> 00:35:19,920
is in clear text so you decrypt it

844
00:35:19,920 --> 00:35:22,640
beforehand

845
00:35:22,960 --> 00:35:24,560
to do that you enumerate the cross

846
00:35:24,560 --> 00:35:27,040
reference to each string and for the

847
00:35:27,040 --> 00:35:29,119
first cross reference

848
00:35:29,119 --> 00:35:32,880
you hijack execution flow by patching

849
00:35:32,880 --> 00:35:35,760
some bytes you already redirect this

850
00:35:35,760 --> 00:35:39,599
execution flow within a switch table

851
00:35:39,599 --> 00:35:41,359
and you know you take care of the

852
00:35:41,359 --> 00:35:43,440
registers you save the original

853
00:35:43,440 --> 00:35:46,240
instruction pointer

854
00:35:46,240 --> 00:35:48,160
and you set the correct registers to

855
00:35:48,160 --> 00:35:50,480
call the decryption functions and once

856
00:35:50,480 --> 00:35:52,079
that's done you can

857
00:35:52,079 --> 00:35:55,200
go back to normal

858
00:35:55,200 --> 00:35:57,440
and here some code again i just wanted

859
00:35:57,440 --> 00:35:59,280
to show you how easy it is to

860
00:35:59,280 --> 00:36:02,720
hook stuff with radar 2.

861
00:36:02,720 --> 00:36:05,520
um once you know a cross reference to a

862
00:36:05,520 --> 00:36:07,760
given string you can

863
00:36:07,760 --> 00:36:10,320
use radar 2 to recover the assembly

864
00:36:10,320 --> 00:36:12,640
instructions that actually use the

865
00:36:12,640 --> 00:36:15,520
strings and you have to overwrite those

866
00:36:15,520 --> 00:36:16,480
bytes

867
00:36:16,480 --> 00:36:19,520
with something that is small enough

868
00:36:19,520 --> 00:36:21,359
that is able to hijack

869
00:36:21,359 --> 00:36:23,599
execution flow but not

870
00:36:23,599 --> 00:36:25,760
too big because it will mess up

871
00:36:25,760 --> 00:36:27,920
the assembly code

872
00:36:27,920 --> 00:36:30,000
then you compute the offset to the

873
00:36:30,000 --> 00:36:32,160
switch table which will depend for each

874
00:36:32,160 --> 00:36:33,359
string

875
00:36:33,359 --> 00:36:36,960
and then we assemble code with keystone

876
00:36:36,960 --> 00:36:39,599
and we inject the entire result with the

877
00:36:39,599 --> 00:36:43,119
radar 2 and the wx command

878
00:36:43,119 --> 00:36:45,839
the hook content is as follows

879
00:36:45,839 --> 00:36:48,240
you have to save the registers obviously

880
00:36:48,240 --> 00:36:49,200
and

881
00:36:49,200 --> 00:36:52,079
you want to call the decryption function

882
00:36:52,079 --> 00:36:54,880
and then you want to do the

883
00:36:54,880 --> 00:36:56,240
um

884
00:36:56,240 --> 00:36:58,560
you know we we overwrote some assembly

885
00:36:58,560 --> 00:37:01,599
uh instructions so we have to um

886
00:37:01,599 --> 00:37:02,960
put them here

887
00:37:02,960 --> 00:37:06,960
and then we can resume execution flow

888
00:37:07,200 --> 00:37:08,880
next uh we said that we need the

889
00:37:08,880 --> 00:37:11,599
decryption function and i'm also a lazy

890
00:37:11,599 --> 00:37:14,160
person so i didn't want to write my

891
00:37:14,160 --> 00:37:16,240
decryption functions in assembly so i

892
00:37:16,240 --> 00:37:17,760
wrote it in c

893
00:37:17,760 --> 00:37:20,800
and i write the binary with pi so that

894
00:37:20,800 --> 00:37:22,480
the the function is fully positioned and

895
00:37:22,480 --> 00:37:23,520
dependent

896
00:37:23,520 --> 00:37:25,920
and then we can strip out the functions

897
00:37:25,920 --> 00:37:28,240
with the with lift

898
00:37:28,240 --> 00:37:30,480
lift is a framework that is able to

899
00:37:30,480 --> 00:37:33,520
manipulate executable file

900
00:37:33,520 --> 00:37:36,160
and here i just wanted to show you again

901
00:37:36,160 --> 00:37:39,440
um how easy it is to to do that

902
00:37:39,440 --> 00:37:42,079
because leaf offers the functions called

903
00:37:42,079 --> 00:37:44,079
get content from virtual address which

904
00:37:44,079 --> 00:37:46,640
expects an address and a size

905
00:37:46,640 --> 00:37:49,520
and both of which can be recovered with

906
00:37:49,520 --> 00:37:53,440
the other rod r2 and the af lj command

907
00:37:53,440 --> 00:37:55,119
which allows to animate functions and

908
00:37:55,119 --> 00:37:57,280
there are and there are

909
00:37:57,280 --> 00:38:00,160
some things about the functions

910
00:38:00,160 --> 00:38:02,000
and once you have the code of the

911
00:38:02,000 --> 00:38:04,320
decryption function you have to actually

912
00:38:04,320 --> 00:38:06,960
inject it inside the binary

913
00:38:06,960 --> 00:38:10,079
and in three line of three lines of code

914
00:38:10,079 --> 00:38:11,920
you can create a section

915
00:38:11,920 --> 00:38:14,079
and put some code in it and you know

916
00:38:14,079 --> 00:38:16,720
that's done

917
00:38:17,200 --> 00:38:19,359
um obviously there is there are some

918
00:38:19,359 --> 00:38:21,359
limitations about the the tools that we

919
00:38:21,359 --> 00:38:23,040
did it's not for script kiddies in the

920
00:38:23,040 --> 00:38:26,000
sense that every time you use it you

921
00:38:26,000 --> 00:38:27,760
will most likely need to patch something

922
00:38:27,760 --> 00:38:28,960
in it

923
00:38:28,960 --> 00:38:31,359
um and that's no issue for me because i

924
00:38:31,359 --> 00:38:32,640
use it uh

925
00:38:32,640 --> 00:38:35,200
what's um you know some time to time

926
00:38:35,200 --> 00:38:38,000
only when my binaries are detected

927
00:38:38,000 --> 00:38:38,960
and

928
00:38:38,960 --> 00:38:40,720
for me it's more of a library of

929
00:38:40,720 --> 00:38:42,079
features than

930
00:38:42,079 --> 00:38:44,160
a tool that just does magic and that we

931
00:38:44,160 --> 00:38:46,000
don't understand

932
00:38:46,000 --> 00:38:47,839
and there are some things we might want

933
00:38:47,839 --> 00:38:49,119
to optimize

934
00:38:49,119 --> 00:38:51,680
uh like the text sections i did not

935
00:38:51,680 --> 00:38:54,160
bother to

936
00:38:54,160 --> 00:38:57,200
exploit the function boundaries so i

937
00:38:57,200 --> 00:38:59,680
just search for chunks because i did not

938
00:38:59,680 --> 00:39:02,240
met an antivirus that was

939
00:39:02,240 --> 00:39:05,040
trouble enough for for this task

940
00:39:05,040 --> 00:39:07,040
and we could

941
00:39:07,040 --> 00:39:09,599
anal also analyze strings present in

942
00:39:09,599 --> 00:39:11,920
source code only because when you are

943
00:39:11,920 --> 00:39:13,680
building a

944
00:39:13,680 --> 00:39:14,960
binary

945
00:39:14,960 --> 00:39:15,839
you will

946
00:39:15,839 --> 00:39:16,880
find

947
00:39:16,880 --> 00:39:18,720
there are several thousands of strings

948
00:39:18,720 --> 00:39:20,400
that are not

949
00:39:20,400 --> 00:39:22,800
really used by your program but they are

950
00:39:22,800 --> 00:39:25,040
in the binary because of the

951
00:39:25,040 --> 00:39:26,640
dependencies

952
00:39:26,640 --> 00:39:29,440
and i highly doubt that windows defender

953
00:39:29,440 --> 00:39:31,599
will trigger on those strings

954
00:39:31,599 --> 00:39:32,320
so

955
00:39:32,320 --> 00:39:34,560
you could save time and enumerate the

956
00:39:34,560 --> 00:39:35,440
strings

957
00:39:35,440 --> 00:39:37,200
that you have inside the source code of

958
00:39:37,200 --> 00:39:38,640
mimikaz for an

959
00:39:38,640 --> 00:39:39,680
instance

960
00:39:39,680 --> 00:39:43,280
and only run the analysis on that

961
00:39:43,280 --> 00:39:45,440
you could also

962
00:39:45,440 --> 00:39:47,359
provide the make file for a project that

963
00:39:47,359 --> 00:39:48,880
you want to to build

964
00:39:48,880 --> 00:39:53,359
and only build a subset of this program

965
00:39:53,359 --> 00:39:54,400
and

966
00:39:54,400 --> 00:39:56,880
at first it won't be detected by by the

967
00:39:56,880 --> 00:39:58,560
anti-virus but

968
00:39:58,560 --> 00:40:00,720
as long

969
00:40:00,720 --> 00:40:02,400
when you add code

970
00:40:02,400 --> 00:40:04,319
there is a point where the actual

971
00:40:04,319 --> 00:40:06,560
signatures will be inserted and at this

972
00:40:06,560 --> 00:40:09,839
time it will be detected by the

973
00:40:09,839 --> 00:40:11,599
and that will be your turtle sign that

974
00:40:11,599 --> 00:40:14,960
you have found your synaptor

975
00:40:14,960 --> 00:40:18,000
and to conclude this is a tweet i saw

976
00:40:18,000 --> 00:40:20,079
from tavis for monday

977
00:40:20,079 --> 00:40:22,880
to give you some context mpng is the

978
00:40:22,880 --> 00:40:26,240
windows defender scan engine

979
00:40:26,960 --> 00:40:29,200
and i found it quite amusing that

980
00:40:29,200 --> 00:40:32,319
he has to fix bugs that we report and he

981
00:40:32,319 --> 00:40:33,680
has no idea what

982
00:40:33,680 --> 00:40:36,160
why we are using his tool

983
00:40:36,160 --> 00:40:39,799
so that's it

984
00:40:49,280 --> 00:40:51,359
thank you vladimir

985
00:40:51,359 --> 00:40:55,720
is there any question yes

986
00:41:11,760 --> 00:41:14,480
did you check the tools by quarks lab

987
00:41:14,480 --> 00:41:17,599
called irma that do basically

988
00:41:17,599 --> 00:41:22,319
same as offline scanning for anti-virus

989
00:41:23,359 --> 00:41:25,200
yes i did i

990
00:41:25,200 --> 00:41:27,760
also even tried to use it

991
00:41:27,760 --> 00:41:29,200
as i understand

992
00:41:29,200 --> 00:41:31,280
the free versions only come so with

993
00:41:31,280 --> 00:41:33,359
support for

994
00:41:33,359 --> 00:41:37,040
liners linux versions of antivirus

995
00:41:37,040 --> 00:41:38,240
and

996
00:41:38,240 --> 00:41:40,640
yeah it was not suitable for my use case

997
00:41:40,640 --> 00:41:43,760
i was looking for something much simpler

998
00:41:43,760 --> 00:41:46,880
but i'm positive that it will work as

999
00:41:46,880 --> 00:41:47,760
well

1000
00:41:47,760 --> 00:41:50,079
the free version is you can use a

1001
00:41:50,079 --> 00:41:52,160
windows antivirus as well but you need

1002
00:41:52,160 --> 00:41:53,040
some

1003
00:41:53,040 --> 00:41:56,720
licenses for example for kaspersky or

1004
00:41:56,720 --> 00:41:58,480
interiors like that

1005
00:41:58,480 --> 00:42:00,800
yeah yeah i'm sure it will work very

1006
00:42:00,800 --> 00:42:02,000
well but

1007
00:42:02,000 --> 00:42:04,880
load the libraries uh you know it works

1008
00:42:04,880 --> 00:42:07,520
very very well and it's installed in uh

1009
00:42:07,520 --> 00:42:09,119
two minutes

1010
00:42:09,119 --> 00:42:10,240
so

1011
00:42:10,240 --> 00:42:12,400
you can do uh however you want and

1012
00:42:12,400 --> 00:42:14,319
that's just the way i chose to go about

1013
00:42:14,319 --> 00:42:17,319
it

1014
00:42:23,760 --> 00:42:24,880
um

1015
00:42:24,880 --> 00:42:27,839
so i'm i'm wondering uh if this ever

1016
00:42:27,839 --> 00:42:29,760
happens on the

1017
00:42:29,760 --> 00:42:31,440
divine and conquer algorithm

1018
00:42:31,440 --> 00:42:34,160
specifically

1019
00:42:34,319 --> 00:42:36,400
does it ever happen that none of the

1020
00:42:36,400 --> 00:42:38,720
chunks are detected but not necessarily

1021
00:42:38,720 --> 00:42:41,119
because the detection is split into two

1022
00:42:41,119 --> 00:42:44,000
but maybe because the antivirus was

1023
00:42:44,000 --> 00:42:45,920
using something in the

1024
00:42:45,920 --> 00:42:48,400
in the chunk that was that does not

1025
00:42:48,400 --> 00:42:50,319
contain the signature to maybe validate

1026
00:42:50,319 --> 00:42:52,880
the file so maybe maybe like for an

1027
00:42:52,880 --> 00:42:55,760
example maybe it sees that uh some chunk

1028
00:42:55,760 --> 00:42:57,599
has been replaced with random data and

1029
00:42:57,599 --> 00:42:59,680
maybe marks the file as damaged and then

1030
00:42:59,680 --> 00:43:01,440
no longer gives a detection because of

1031
00:43:01,440 --> 00:43:05,359
that does that ever happen or and if so

1032
00:43:05,359 --> 00:43:09,359
are there like any ways to address that

1033
00:43:09,359 --> 00:43:10,480
i don't know if i explained that

1034
00:43:10,480 --> 00:43:13,440
properly yeah i see what you mean

1035
00:43:13,440 --> 00:43:17,599
and the only times it happened to me was

1036
00:43:17,599 --> 00:43:20,000
it was when i was overwriting uh

1037
00:43:20,000 --> 00:43:21,760
specific stuff

1038
00:43:21,760 --> 00:43:23,839
and if you're very precise in your

1039
00:43:23,839 --> 00:43:26,160
analysis and have the right for instance

1040
00:43:26,160 --> 00:43:29,839
the strings and you respect the the size

1041
00:43:29,839 --> 00:43:32,000
yeah you won't break any things

1042
00:43:32,000 --> 00:43:33,680
but yeah i see what you mean and it's

1043
00:43:33,680 --> 00:43:36,560
very important to not break stuff and be

1044
00:43:36,560 --> 00:43:38,400
critical about the results you get back

1045
00:43:38,400 --> 00:43:41,680
from the tool that we propose

1046
00:43:41,680 --> 00:43:43,200
if a signature is

1047
00:43:43,200 --> 00:43:45,040
detected as signatures of course you

1048
00:43:45,040 --> 00:43:46,720
have to check manually

1049
00:43:46,720 --> 00:43:48,480
inside source code and see if it makes

1050
00:43:48,480 --> 00:43:49,520
sense

1051
00:43:49,520 --> 00:43:51,599
because maybe like you say you have

1052
00:43:51,599 --> 00:43:52,800
broken

1053
00:43:52,800 --> 00:43:55,200
the the file and the antivirus was

1054
00:43:55,200 --> 00:43:57,440
emulating it and since the file no

1055
00:43:57,440 --> 00:44:01,040
longer can be emulated the antivirus no

1056
00:44:01,040 --> 00:44:04,960
longer decided to scan it until the end

1057
00:44:04,960 --> 00:44:08,440
thank you very much

1058
00:44:10,000 --> 00:44:12,880
other questions

1059
00:44:17,359 --> 00:44:19,680
if no we can thanks vladimir for the

1060
00:44:19,680 --> 00:44:23,560
presentation thank you

