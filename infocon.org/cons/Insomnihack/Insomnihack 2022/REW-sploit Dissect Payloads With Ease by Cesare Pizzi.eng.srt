1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:14,719 --> 00:00:16,640
thank you

3
00:00:16,640 --> 00:00:18,320
good evening to everyone and thank you

4
00:00:18,320 --> 00:00:20,320
for being here thank you for to the

5
00:00:20,320 --> 00:00:22,000
organizer for

6
00:00:22,000 --> 00:00:24,400
such a great event and thank you all to

7
00:00:24,400 --> 00:00:25,680
all the people who talked before me

8
00:00:25,680 --> 00:00:28,080
because it was really a great content so

9
00:00:28,080 --> 00:00:30,160
thank you so much stay with me at least

10
00:00:30,160 --> 00:00:32,159
for one hour so

11
00:00:32,159 --> 00:00:33,360
i will

12
00:00:33,360 --> 00:00:35,040
i hope to be at the same level of the

13
00:00:35,040 --> 00:00:36,559
other speakers

14
00:00:36,559 --> 00:00:39,360
and i think i will show you something

15
00:00:39,360 --> 00:00:40,719
interesting to you

16
00:00:40,719 --> 00:00:43,680
okay let's start immediately all i

17
00:00:43,680 --> 00:00:46,000
bought this laser pointer two years ago

18
00:00:46,000 --> 00:00:47,680
this is the first time i use it but it

19
00:00:47,680 --> 00:00:49,520
works okay great

20
00:00:49,520 --> 00:00:51,680
so okay a couple of things about maybe

21
00:00:51,680 --> 00:00:54,239
for starting my name is jose pizzi

22
00:00:54,239 --> 00:00:56,719
i work as a security guard at soaring

23
00:00:56,719 --> 00:00:58,160
club which is an italian company a

24
00:00:58,160 --> 00:01:00,239
pretty big one

25
00:01:00,239 --> 00:01:02,879
with some french offices into in all

26
00:01:02,879 --> 00:01:04,479
over the world

27
00:01:04,479 --> 00:01:06,240
i would like to thank them for

28
00:01:06,240 --> 00:01:08,720
allowing me to work for them

29
00:01:08,720 --> 00:01:11,280
and what i do there it's a lot of things

30
00:01:11,280 --> 00:01:13,760
related to security even if

31
00:01:13,760 --> 00:01:15,280
let's say my first focus is reverse

32
00:01:15,280 --> 00:01:16,560
engineering so we will speak about

33
00:01:16,560 --> 00:01:19,280
reverse engineering today as a main main

34
00:01:19,280 --> 00:01:21,439
focus

35
00:01:21,439 --> 00:01:22,720
i

36
00:01:22,720 --> 00:01:24,640
i'm really interested in everything

37
00:01:24,640 --> 00:01:26,479
related to security i also

38
00:01:26,479 --> 00:01:28,320
contribute to several projects related

39
00:01:28,320 --> 00:01:30,720
to security like volatility

40
00:01:30,720 --> 00:01:34,560
open canary c2s i also have

41
00:01:34,560 --> 00:01:36,320
some personal projects running like

42
00:01:36,320 --> 00:01:38,799
scene wall for example which is a

43
00:01:38,799 --> 00:01:40,240
kind of a different way of thinking

44
00:01:40,240 --> 00:01:42,159
firewalling for

45
00:01:42,159 --> 00:01:43,920
for linux system so you want to have a

46
00:01:43,920 --> 00:01:45,520
look there is my

47
00:01:45,520 --> 00:01:48,560
github here i encourage you to go there

48
00:01:48,560 --> 00:01:49,520
and to

49
00:01:49,520 --> 00:01:50,960
tell me what you think about everything

50
00:01:50,960 --> 00:01:52,000
i do

51
00:01:52,000 --> 00:01:54,159
but now today we are here to speak about

52
00:01:54,159 --> 00:01:55,520
resploit

53
00:01:55,520 --> 00:01:58,320
and i don't even have an agenda here

54
00:01:58,320 --> 00:01:59,920
sorry

55
00:01:59,920 --> 00:02:02,079
i'm just started from some random stuff

56
00:02:02,079 --> 00:02:05,280
about this project because

57
00:02:05,280 --> 00:02:06,640
i started

58
00:02:06,640 --> 00:02:09,360
looking at my daily job as a reverse

59
00:02:09,360 --> 00:02:12,400
engineering is actually realizing

60
00:02:12,400 --> 00:02:14,560
that we have a lot of standard tools to

61
00:02:14,560 --> 00:02:16,640
help red teamer out there

62
00:02:16,640 --> 00:02:19,040
i think that most of you know the

63
00:02:19,040 --> 00:02:21,760
metasploit or cobra strike tools

64
00:02:21,760 --> 00:02:23,599
frameworks

65
00:02:23,599 --> 00:02:24,800
if not

66
00:02:24,800 --> 00:02:26,319
okay they are

67
00:02:26,319 --> 00:02:29,280
really well done tools that helps

68
00:02:29,280 --> 00:02:32,959
attackers to build up their attack chain

69
00:02:32,959 --> 00:02:34,160
and

70
00:02:34,160 --> 00:02:34,959
okay

71
00:02:34,959 --> 00:02:36,959
they are so well done even attackers are

72
00:02:36,959 --> 00:02:38,080
using them

73
00:02:38,080 --> 00:02:40,400
uh and that's an issue in some cases

74
00:02:40,400 --> 00:02:41,360
because

75
00:02:41,360 --> 00:02:43,440
what i thought is that i don't have a

76
00:02:43,440 --> 00:02:45,519
counterpart of it i don't have a tool

77
00:02:45,519 --> 00:02:47,200
that allows me to

78
00:02:47,200 --> 00:02:49,280
review that kind of payloads that kind

79
00:02:49,280 --> 00:02:51,360
of

80
00:02:51,360 --> 00:02:53,680
tricks and tools used by this framework

81
00:02:53,680 --> 00:02:55,280
to help me in

82
00:02:55,280 --> 00:02:57,599
and speed up at least as they speed up

83
00:02:57,599 --> 00:02:59,440
the attacker

84
00:02:59,440 --> 00:03:01,360
at least in the same way and so i

85
00:03:01,360 --> 00:03:03,760
decided to try to do something like that

86
00:03:03,760 --> 00:03:06,480
so try to build the tool to reverse what

87
00:03:06,480 --> 00:03:08,640
metasploitan and cobblestike are doing

88
00:03:08,640 --> 00:03:10,720
very well

89
00:03:10,720 --> 00:03:12,400
and the random tough number to you was

90
00:03:12,400 --> 00:03:15,200
that i'm sure that will be a mess in

91
00:03:15,200 --> 00:03:16,800
some way and

92
00:03:16,800 --> 00:03:18,720
i will regret this decision but let's

93
00:03:18,720 --> 00:03:21,120
try to see together today if i did

94
00:03:21,120 --> 00:03:24,560
something which is helpful or not

95
00:03:24,560 --> 00:03:25,519
again

96
00:03:25,519 --> 00:03:27,680
i love open source

97
00:03:27,680 --> 00:03:30,560
i contribute pro to projects

98
00:03:30,560 --> 00:03:32,480
i standing on the shoulder of giants as

99
00:03:32,480 --> 00:03:35,840
well here with my product because

100
00:03:35,840 --> 00:03:37,200
i'm

101
00:03:37,200 --> 00:03:39,760
built it on two main pillars which one

102
00:03:39,760 --> 00:03:41,440
of each is

103
00:03:41,440 --> 00:03:43,599
unicorn engine

104
00:03:43,599 --> 00:03:46,000
probably most of you know what is it

105
00:03:46,000 --> 00:03:48,640
it's an emulator of a cpu based on chemo

106
00:03:48,640 --> 00:03:50,720
which is another great project

107
00:03:50,720 --> 00:03:51,519
and

108
00:03:51,519 --> 00:03:54,239
what it does it allows you to emulate

109
00:03:54,239 --> 00:03:56,799
cpus on a given environment

110
00:03:56,799 --> 00:03:59,120
and another pillar on which i built the

111
00:03:59,120 --> 00:04:01,200
tour itself it's a tool coming from

112
00:04:01,200 --> 00:04:03,599
mandiant which is named speakeasy

113
00:04:03,599 --> 00:04:06,159
which is a kind of

114
00:04:06,159 --> 00:04:08,319
i would like to call it helper on

115
00:04:08,319 --> 00:04:10,239
unicorn itself in order to

116
00:04:10,239 --> 00:04:13,200
emulate windows payloads

117
00:04:13,200 --> 00:04:16,079
in an easier way let's say

118
00:04:16,079 --> 00:04:18,160
and so um

119
00:04:18,160 --> 00:04:20,160
the approach i taught with my tool

120
00:04:20,160 --> 00:04:22,400
was to actually initially focus myself

121
00:04:22,400 --> 00:04:25,360
on windows meta exploit 32 bit and

122
00:04:25,360 --> 00:04:27,440
64-bit payloads

123
00:04:27,440 --> 00:04:30,800
this was the original focus i got on the

124
00:04:30,800 --> 00:04:32,639
tool itself

125
00:04:32,639 --> 00:04:34,880
then i'm trying right now to evolve it

126
00:04:34,880 --> 00:04:37,520
in something more generic adding several

127
00:04:37,520 --> 00:04:39,360
other layer support layers because

128
00:04:39,360 --> 00:04:41,199
actually i built some support layers on

129
00:04:41,199 --> 00:04:43,520
other tool because i built layers for

130
00:04:43,520 --> 00:04:45,919
cobblestrike for donuts

131
00:04:45,919 --> 00:04:47,840
and this has been done to two levels one

132
00:04:47,840 --> 00:04:49,360
it should explode itself so the tool

133
00:04:49,360 --> 00:04:52,560
itself implements some helpers some fix

134
00:04:52,560 --> 00:04:55,280
ups we will see them together

135
00:04:55,280 --> 00:04:56,880
in order to be able to complete the

136
00:04:56,880 --> 00:04:58,880
emulation of this kind of payloads the

137
00:04:58,880 --> 00:05:00,880
other one is

138
00:05:00,880 --> 00:05:02,800
my contribution is going also to the

139
00:05:02,800 --> 00:05:04,400
open source software because time to

140
00:05:04,400 --> 00:05:06,320
time when i try to improve the tool i

141
00:05:06,320 --> 00:05:08,639
build for example new api calls for

142
00:05:08,639 --> 00:05:10,560
monday and speakeasy and so i

143
00:05:10,560 --> 00:05:12,479
have several pull requests

144
00:05:12,479 --> 00:05:14,560
done several policies with them and so

145
00:05:14,560 --> 00:05:16,240
part of the code of free spread it's in

146
00:05:16,240 --> 00:05:18,880
some way also contributing other main

147
00:05:18,880 --> 00:05:21,680
projects like the one i'm using so i

148
00:05:21,680 --> 00:05:23,440
think that this is how open source

149
00:05:23,440 --> 00:05:26,000
should work so i encourage you to do

150
00:05:26,000 --> 00:05:28,080
something like that so maybe build your

151
00:05:28,080 --> 00:05:29,759
own project and give back to to the

152
00:05:29,759 --> 00:05:33,199
community with your work

153
00:05:33,199 --> 00:05:35,199
the basic idea uh

154
00:05:35,199 --> 00:05:38,960
is that the two tools i'm using so

155
00:05:38,960 --> 00:05:41,759
unicorn engine and manual speakeasy are

156
00:05:41,759 --> 00:05:43,680
actually generic tools they are not

157
00:05:43,680 --> 00:05:46,320
built for specific payloads and so if

158
00:05:46,320 --> 00:05:47,919
you try to use them out of the box

159
00:05:47,919 --> 00:05:49,759
probably they are not working as you

160
00:05:49,759 --> 00:05:51,039
expect

161
00:05:51,039 --> 00:05:53,520
and this is where risk plot comes in

162
00:05:53,520 --> 00:05:56,080
because it builds a set of

163
00:05:56,080 --> 00:05:58,319
helpers a set of harnesses around these

164
00:05:58,319 --> 00:06:00,319
tools to help you in

165
00:06:00,319 --> 00:06:02,240
complete the emulation and

166
00:06:02,240 --> 00:06:04,800
to being able to execute this

167
00:06:04,800 --> 00:06:06,720
in a environment that allow you to

168
00:06:06,720 --> 00:06:10,000
extract also artifacts and so on

169
00:06:10,000 --> 00:06:11,840
basic operations are applied on binary

170
00:06:11,840 --> 00:06:14,560
files so it is done on shell codes xa

171
00:06:14,560 --> 00:06:16,639
and dll everything is windows based

172
00:06:16,639 --> 00:06:18,800
right now i don't exclude that

173
00:06:18,800 --> 00:06:20,560
it will be also moved to linux in some

174
00:06:20,560 --> 00:06:21,840
way

175
00:06:21,840 --> 00:06:24,160
and also it's able to analyze pickup

176
00:06:24,160 --> 00:06:26,880
files so if you have in some way your

177
00:06:26,880 --> 00:06:29,039
network probe collecting

178
00:06:29,039 --> 00:06:30,639
data and

179
00:06:30,639 --> 00:06:32,400
generating network traffic it can

180
00:06:32,400 --> 00:06:34,720
analyze as well

181
00:06:34,720 --> 00:06:37,120
the interface itself it's cli at the

182
00:06:37,120 --> 00:06:39,840
common cli interface i took this

183
00:06:39,840 --> 00:06:42,400
decision because it's very easy to

184
00:06:42,400 --> 00:06:46,160
then use it and pipe outputs to

185
00:06:46,160 --> 00:06:48,639
unix commands to grab to output phi and

186
00:06:48,639 --> 00:06:51,120
so on so i based the work on a cmd2

187
00:06:51,120 --> 00:06:53,120
interface which is another great open

188
00:06:53,120 --> 00:06:54,800
source project

189
00:06:54,800 --> 00:06:56,479
and what respect can do its

190
00:06:56,479 --> 00:06:58,720
automatically detect the payload format

191
00:06:58,720 --> 00:07:00,000
for example

192
00:07:00,000 --> 00:07:03,919
detect if it's a 64 22-bit download dll

193
00:07:03,919 --> 00:07:06,800
sorry or shellcode and then start up the

194
00:07:06,800 --> 00:07:08,800
emulation of the code

195
00:07:08,800 --> 00:07:12,560
and depending on what it finds into the

196
00:07:12,560 --> 00:07:15,520
code itself it's able to extract api

197
00:07:15,520 --> 00:07:18,960
calls keys encryption keys and artifacts

198
00:07:18,960 --> 00:07:20,319
based on

199
00:07:20,319 --> 00:07:22,000
what we

200
00:07:22,000 --> 00:07:24,319
may expect in a meta split or cover

201
00:07:24,319 --> 00:07:26,160
strike or whatever

202
00:07:26,160 --> 00:07:29,599
we will add to it payload

203
00:07:29,599 --> 00:07:32,080
okay let's speak somehow some about some

204
00:07:32,080 --> 00:07:34,080
advantages and disadvantages of this

205
00:07:34,080 --> 00:07:36,080
approach because

206
00:07:36,080 --> 00:07:37,599
as i said i'm using emulation so i'm

207
00:07:37,599 --> 00:07:39,280
trying to emulate code

208
00:07:39,280 --> 00:07:41,199
one of the point and the great advantage

209
00:07:41,199 --> 00:07:43,360
of this approach is that

210
00:07:43,360 --> 00:07:45,680
static tools can be easily fooled by the

211
00:07:45,680 --> 00:07:48,160
the fusion encryption and so on so

212
00:07:48,160 --> 00:07:50,479
static tools to try to detect

213
00:07:50,479 --> 00:07:51,440
uh

214
00:07:51,440 --> 00:07:53,280
artifacts or something like that

215
00:07:53,280 --> 00:07:54,639
are usually

216
00:07:54,639 --> 00:07:55,840
footed in a

217
00:07:55,840 --> 00:07:59,120
very easy way but more or less 100 of

218
00:07:59,120 --> 00:08:00,800
the modern malware malicious code

219
00:08:00,800 --> 00:08:04,000
because everyone implements obfuscation

220
00:08:04,000 --> 00:08:06,160
encryption or something so static tool

221
00:08:06,160 --> 00:08:08,400
sometimes does not work

222
00:08:08,400 --> 00:08:10,560
also by emulating the code we have a

223
00:08:10,560 --> 00:08:12,720
very great advantage because we are

224
00:08:12,720 --> 00:08:15,120
actually interacting with the code so we

225
00:08:15,120 --> 00:08:17,840
can also

226
00:08:17,840 --> 00:08:18,960
try to

227
00:08:18,960 --> 00:08:20,879
make the code follow some other branches

228
00:08:20,879 --> 00:08:24,400
and so modify a specific way

229
00:08:24,400 --> 00:08:26,400
the code is getting for example

230
00:08:26,400 --> 00:08:28,800
i want to change a value in a register

231
00:08:28,800 --> 00:08:30,240
that will take another branch of the

232
00:08:30,240 --> 00:08:32,159
code i can do it by emulating the code

233
00:08:32,159 --> 00:08:34,320
because i'm actually executing step by

234
00:08:34,320 --> 00:08:36,880
step in an automatic way the whole

235
00:08:36,880 --> 00:08:38,640
payload

236
00:08:38,640 --> 00:08:40,958
also this can be combined with uh other

237
00:08:40,958 --> 00:08:43,279
reverse engineering tool probably uh so

238
00:08:43,279 --> 00:08:45,040
it's not probably your only tool you

239
00:08:45,040 --> 00:08:47,120
will use resplait but you will use it

240
00:08:47,120 --> 00:08:49,920
together with i don't know

241
00:08:49,920 --> 00:08:53,680
ida or guide or guide or

242
00:08:53,680 --> 00:08:56,240
or whatever you prefer there are also

243
00:08:56,240 --> 00:08:58,000
some disadvantages on on this approach

244
00:08:58,000 --> 00:08:59,920
i'm not here to cheat you

245
00:08:59,920 --> 00:09:02,160
because emulation can be a fragile

246
00:09:02,160 --> 00:09:04,160
process so remember that this is not a

247
00:09:04,160 --> 00:09:07,279
sandbox so you don't have a complete

248
00:09:07,279 --> 00:09:10,399
operating system behind you have a kind

249
00:09:10,399 --> 00:09:11,360
of

250
00:09:11,360 --> 00:09:14,160
a fake environment let's go in this way

251
00:09:14,160 --> 00:09:17,360
and these in some cases actually

252
00:09:17,360 --> 00:09:20,000
not easy to manage because sometimes

253
00:09:20,000 --> 00:09:21,839
things are just breaking but we can try

254
00:09:21,839 --> 00:09:23,200
to fix them

255
00:09:23,200 --> 00:09:25,440
emulation also can be slow

256
00:09:25,440 --> 00:09:27,200
so it's not for sure something for

257
00:09:27,200 --> 00:09:29,839
running uh

258
00:09:30,640 --> 00:09:31,839
high

259
00:09:31,839 --> 00:09:33,680
the code with

260
00:09:33,680 --> 00:09:37,040
really high speed requirements and also

261
00:09:37,040 --> 00:09:37,839
uh

262
00:09:37,839 --> 00:09:39,839
as all the tools you use in your daily

263
00:09:39,839 --> 00:09:42,240
job this is a new one you need probably

264
00:09:42,240 --> 00:09:42,959
to

265
00:09:42,959 --> 00:09:45,519
have a summer you have a

266
00:09:45,519 --> 00:09:47,920
to face a little learning curve to to to

267
00:09:47,920 --> 00:09:50,320
master it and to get the most out of it

268
00:09:50,320 --> 00:09:51,200
so

269
00:09:51,200 --> 00:09:53,120
these are all the advantages and

270
00:09:53,120 --> 00:09:55,360
advantages we have

271
00:09:55,360 --> 00:09:56,320
let's go

272
00:09:56,320 --> 00:09:58,160
and and try to understand

273
00:09:58,160 --> 00:10:00,080
what actually a

274
00:10:00,080 --> 00:10:02,079
resploit and

275
00:10:02,079 --> 00:10:04,399
indeed simulation feature can do

276
00:10:04,399 --> 00:10:07,920
the tool is able to automatically detect

277
00:10:07,920 --> 00:10:09,600
metasploit framework and cobra strike

278
00:10:09,600 --> 00:10:12,160
payloads and can manage them and extract

279
00:10:12,160 --> 00:10:14,560
artifacts from from them best of the

280
00:10:14,560 --> 00:10:16,160
results are seen with position

281
00:10:16,160 --> 00:10:18,880
independent binaries

282
00:10:18,880 --> 00:10:21,680
because as i said this is not a sandbox

283
00:10:21,680 --> 00:10:24,480
executables and dls are emulated but

284
00:10:24,480 --> 00:10:26,720
they have a they are a bit more complex

285
00:10:26,720 --> 00:10:29,279
in some ways so

286
00:10:29,279 --> 00:10:31,200
it works sometimes but sometimes you

287
00:10:31,200 --> 00:10:33,279
have to let's say

288
00:10:33,279 --> 00:10:36,399
help the emulator itself in doing some

289
00:10:36,399 --> 00:10:38,800
add-ons to to have it running in the

290
00:10:38,800 --> 00:10:40,880
proper way

291
00:10:40,880 --> 00:10:42,160
and

292
00:10:42,160 --> 00:10:44,160
as i said the tool can emulate

293
00:10:44,160 --> 00:10:46,480
executable can break sometimes sometimes

294
00:10:46,480 --> 00:10:49,040
it's an easy fix sometimes not please if

295
00:10:49,040 --> 00:10:51,200
you face something that you want to fix

296
00:10:51,200 --> 00:10:53,200
open an issue on github the tool is open

297
00:10:53,200 --> 00:10:55,600
source it's already out

298
00:10:55,600 --> 00:10:57,040
i released a

299
00:10:57,040 --> 00:10:58,320
new release

300
00:10:58,320 --> 00:11:00,959
a couple of days ago i would more than

301
00:11:00,959 --> 00:11:03,279
happy to work with you on issues and so

302
00:11:03,279 --> 00:11:06,959
on to improve it together so uh that's

303
00:11:06,959 --> 00:11:09,760
how i hoped it will it will uh

304
00:11:09,760 --> 00:11:11,120
go ahead

305
00:11:11,120 --> 00:11:12,480
so now let's

306
00:11:12,480 --> 00:11:15,120
start to make something more

307
00:11:15,120 --> 00:11:16,399
practical

308
00:11:16,399 --> 00:11:18,160
and say okay

309
00:11:18,160 --> 00:11:20,160
but what acceptor is able to do this

310
00:11:20,160 --> 00:11:21,279
tool

311
00:11:21,279 --> 00:11:23,040
let's start with the original focus of

312
00:11:23,040 --> 00:11:24,560
the tool itself which was metasploit

313
00:11:24,560 --> 00:11:26,959
payloads metasploit payloads may fall

314
00:11:26,959 --> 00:11:29,200
under several different groups

315
00:11:29,200 --> 00:11:32,320
which are for example rc4 encrypted

316
00:11:32,320 --> 00:11:34,560
a less common chacha

317
00:11:34,560 --> 00:11:37,120
encrypted shell which has been probably

318
00:11:37,120 --> 00:11:40,399
released with meta spread 5

319
00:11:40,399 --> 00:11:42,240
probably then removed but it's out there

320
00:11:42,240 --> 00:11:43,360
and

321
00:11:43,360 --> 00:11:45,519
i saw it sometimes then there are for

322
00:11:45,519 --> 00:11:47,440
example cryptotime interpreter shell

323
00:11:47,440 --> 00:11:51,360
which is another very common uh

324
00:11:51,440 --> 00:11:53,600
artifact that metasploit can produce and

325
00:11:53,600 --> 00:11:55,839
many

326
00:11:55,839 --> 00:11:58,000
let's have a look on how it works

327
00:11:58,000 --> 00:11:59,760
usually this is a

328
00:11:59,760 --> 00:12:02,639
flow of a usual metasploit attack where

329
00:12:02,639 --> 00:12:03,600
you have

330
00:12:03,600 --> 00:12:05,839
something sending an exploit to the the

331
00:12:05,839 --> 00:12:07,120
system itself

332
00:12:07,120 --> 00:12:11,279
together with a first stage code

333
00:12:11,279 --> 00:12:12,399
and

334
00:12:12,399 --> 00:12:14,399
this is in some way tricking your

335
00:12:14,399 --> 00:12:16,800
application in executing this this code

336
00:12:16,800 --> 00:12:19,680
then this code makes a callback to the

337
00:12:19,680 --> 00:12:21,279
c2 so the

338
00:12:21,279 --> 00:12:25,440
here but it makes it by encrypting the

339
00:12:25,440 --> 00:12:27,040
the communication for example with an

340
00:12:27,040 --> 00:12:30,880
rc4 algorithm which uh is coming out

341
00:12:30,880 --> 00:12:33,360
from this payload directly

342
00:12:33,360 --> 00:12:34,720
and then it

343
00:12:34,720 --> 00:12:37,120
the the the attacks it

344
00:12:37,120 --> 00:12:39,600
begins with the the effects done by the

345
00:12:39,600 --> 00:12:42,079
pair so what is able to do resploit in

346
00:12:42,079 --> 00:12:44,480
this case it's able to follow this uh

347
00:12:44,480 --> 00:12:47,120
exchange by emulating the code and

348
00:12:47,120 --> 00:12:50,320
extract some of the artifacts out from

349
00:12:50,320 --> 00:12:51,040
the

350
00:12:51,040 --> 00:12:53,600
period itself allowing you to actually

351
00:12:53,600 --> 00:12:56,240
analyze in a very faster way what is

352
00:12:56,240 --> 00:12:59,120
happening uh during the attack

353
00:12:59,120 --> 00:13:00,480
so

354
00:13:00,480 --> 00:13:02,399
let's make a quick

355
00:13:02,399 --> 00:13:04,880
demo and let me show you what i'm

356
00:13:04,880 --> 00:13:06,480
speaking about

357
00:13:06,480 --> 00:13:08,720
okay so this is the interface as i said

358
00:13:08,720 --> 00:13:10,560
it's a common cli one

359
00:13:10,560 --> 00:13:13,440
you have some commands available here

360
00:13:13,440 --> 00:13:16,160
and the the main one you will use is the

361
00:13:16,160 --> 00:13:19,040
emulate payload which is okay this one

362
00:13:19,040 --> 00:13:22,240
and the only things he did it's just a

363
00:13:22,240 --> 00:13:24,720
path to the

364
00:13:24,720 --> 00:13:27,360
binary that you in some way got from the

365
00:13:27,360 --> 00:13:29,600
infected system or from

366
00:13:29,600 --> 00:13:32,320
your pickup file or from tracked server

367
00:13:32,320 --> 00:13:33,440
and so on

368
00:13:33,440 --> 00:13:35,680
so what happens here is that okay it

369
00:13:35,680 --> 00:13:37,440
starts the emulation so the code in this

370
00:13:37,440 --> 00:13:40,079
case it's a shell code it has been

371
00:13:40,079 --> 00:13:42,480
emulated and what you get out of the box

372
00:13:42,480 --> 00:13:44,079
immediately is

373
00:13:44,079 --> 00:13:47,199
okay for example all the ipi calls done

374
00:13:47,199 --> 00:13:49,760
by the the shellcode itself this is

375
00:13:49,760 --> 00:13:51,519
extremely interesting if you interesting

376
00:13:51,519 --> 00:13:53,279
if you are analyzing it because it for

377
00:13:53,279 --> 00:13:56,720
example show you which are the c2 which

378
00:13:56,720 --> 00:13:58,800
are the communication ports and so on

379
00:13:58,800 --> 00:14:00,399
this is coming out from speaker's

380
00:14:00,399 --> 00:14:02,560
emulation but what respect in this case

381
00:14:02,560 --> 00:14:04,880
is doing is actually also doing a couple

382
00:14:04,880 --> 00:14:06,720
of other interesting things which is

383
00:14:06,720 --> 00:14:09,120
extracting the circuit used to encrypt

384
00:14:09,120 --> 00:14:11,600
the communication and also extracting

385
00:14:11,600 --> 00:14:14,399
this one which is the rc4 key used to

386
00:14:14,399 --> 00:14:17,440
encrypt the all communication between

387
00:14:17,440 --> 00:14:20,560
the attacker and the the victim

388
00:14:20,560 --> 00:14:23,440
and okay what you can do with this key

389
00:14:23,440 --> 00:14:25,440
nothing no you can for example decrypt

390
00:14:25,440 --> 00:14:27,839
the second stage and getting it out from

391
00:14:27,839 --> 00:14:29,839
your pickup or something

392
00:14:29,839 --> 00:14:32,480
you can do it manually or you can use

393
00:14:32,480 --> 00:14:34,720
uh as well as again

394
00:14:34,720 --> 00:14:37,199
resploit

395
00:14:37,199 --> 00:14:39,760
doing exactly the same command so

396
00:14:39,760 --> 00:14:41,920
i'm still using the emulate payload with

397
00:14:41,920 --> 00:14:43,839
the same payloads here so the same

398
00:14:43,839 --> 00:14:46,480
shellcode even at the

399
00:14:46,480 --> 00:14:48,160
the command line now i have a couple of

400
00:14:48,160 --> 00:14:50,720
things one is the uh

401
00:14:50,720 --> 00:14:54,480
the c2 ip i got out from the api

402
00:14:54,480 --> 00:14:58,000
and another one is a pickup file i got

403
00:14:58,000 --> 00:15:00,000
from my maybe my network probe or

404
00:15:00,000 --> 00:15:01,279
something like that

405
00:15:01,279 --> 00:15:04,160
and restarting the emulation again

406
00:15:04,160 --> 00:15:06,560
so what is happening is exactly exactly

407
00:15:06,560 --> 00:15:08,000
as before

408
00:15:08,000 --> 00:15:10,240
all the code emulated here

409
00:15:10,240 --> 00:15:12,880
the extraction of the keys and also

410
00:15:12,880 --> 00:15:15,519
another things so uh respreed itself is

411
00:15:15,519 --> 00:15:18,320
able to get the pickup file to locate

412
00:15:18,320 --> 00:15:20,720
the communication and extract and

413
00:15:20,720 --> 00:15:23,440
decrypt with the rc4 key the second

414
00:15:23,440 --> 00:15:25,760
stage so in this case you can see that

415
00:15:25,760 --> 00:15:27,440
if you are used to analyzing these kind

416
00:15:27,440 --> 00:15:30,160
of things this is a kind of pe

417
00:15:30,160 --> 00:15:32,079
executable

418
00:15:32,079 --> 00:15:34,480
which has been previewed here and dumped

419
00:15:34,480 --> 00:15:36,800
into a specific file so that means that

420
00:15:36,800 --> 00:15:39,440
in this case i completely i can get

421
00:15:39,440 --> 00:15:41,199
complete analysis done in very few

422
00:15:41,199 --> 00:15:42,399
comments

423
00:15:42,399 --> 00:15:43,680
with the

424
00:15:43,680 --> 00:15:47,120
tool itself and this is done on specific

425
00:15:47,120 --> 00:15:49,040
on several of the payloads available in

426
00:15:49,040 --> 00:15:51,600
metasploit this is done on rc4 there is

427
00:15:51,600 --> 00:15:54,320
a cha-cha one and several others

428
00:15:54,320 --> 00:15:57,040
available directly out of the box

429
00:15:57,040 --> 00:15:58,320
let's go back

430
00:15:58,320 --> 00:16:00,000
to the presentation again and let's

431
00:16:00,000 --> 00:16:01,839
speak about meter but i'm sure that

432
00:16:01,839 --> 00:16:04,079
probably most of you knows what a meteor

433
00:16:04,079 --> 00:16:05,759
protector he's

434
00:16:05,759 --> 00:16:06,800
it's a

435
00:16:06,800 --> 00:16:07,680
let's say

436
00:16:07,680 --> 00:16:10,079
portable common way to

437
00:16:10,079 --> 00:16:13,199
open a shell on a victim system done by

438
00:16:13,199 --> 00:16:15,279
the

439
00:16:15,279 --> 00:16:17,120
the metasploit framework

440
00:16:17,120 --> 00:16:18,399
it is very

441
00:16:18,399 --> 00:16:19,440
usef

442
00:16:19,440 --> 00:16:22,639
well done as well and it's very used

443
00:16:22,639 --> 00:16:23,440
what

444
00:16:23,440 --> 00:16:26,320
happens it's more or less as before so

445
00:16:26,320 --> 00:16:27,279
you have

446
00:16:27,279 --> 00:16:28,639
oops

447
00:16:28,639 --> 00:16:29,600
sorry

448
00:16:29,600 --> 00:16:32,079
you have

449
00:16:32,399 --> 00:16:34,160
a next present

450
00:16:34,160 --> 00:16:36,399
with the

451
00:16:36,399 --> 00:16:37,839
the payload itself then there is a

452
00:16:37,839 --> 00:16:39,600
callback done by the victim

453
00:16:39,600 --> 00:16:41,519
going through our default port which is

454
00:16:41,519 --> 00:16:43,839
444 for example and so on

455
00:16:43,839 --> 00:16:45,920
and then here is where something happens

456
00:16:45,920 --> 00:16:47,279
because there is an handshake because

457
00:16:47,279 --> 00:16:49,440
the communication of the interpreter is

458
00:16:49,440 --> 00:16:51,440
actually encrypted but it's encrypted in

459
00:16:51,440 --> 00:16:52,720
a different way

460
00:16:52,720 --> 00:16:54,560
if we compare it with the rc4 than

461
00:16:54,560 --> 00:16:57,600
before it's encrypted in a

462
00:16:57,600 --> 00:17:01,279
stronger way because it actually use an

463
00:17:01,279 --> 00:17:02,000
a

464
00:17:02,000 --> 00:17:05,679
es key which is in some way encrypted

465
00:17:05,679 --> 00:17:07,760
with an rsa public key

466
00:17:07,760 --> 00:17:09,119
if this

467
00:17:09,119 --> 00:17:11,359
action of encrypting the aes key with

468
00:17:11,359 --> 00:17:13,039
the rsa public key

469
00:17:13,039 --> 00:17:16,240
given by the interpreter shell ok we can

470
00:17:16,240 --> 00:17:17,199
do

471
00:17:17,199 --> 00:17:18,959
so much with the communication itself

472
00:17:18,959 --> 00:17:20,400
because we cannot actually decrypt it

473
00:17:20,400 --> 00:17:22,480
until unless we have

474
00:17:22,480 --> 00:17:24,079
access to

475
00:17:24,079 --> 00:17:26,000
the um

476
00:17:26,000 --> 00:17:28,799
private key but i think it's unlikely to

477
00:17:28,799 --> 00:17:30,400
have it

478
00:17:30,400 --> 00:17:33,679
but uh we still have the possibilities

479
00:17:33,679 --> 00:17:35,360
and interesting things

480
00:17:35,360 --> 00:17:36,880
because

481
00:17:36,880 --> 00:17:38,160
when the

482
00:17:38,160 --> 00:17:40,000
actual attack starts

483
00:17:40,000 --> 00:17:43,760
metasploit starts tries to import an rsa

484
00:17:43,760 --> 00:17:45,679
public key on the victim itself in order

485
00:17:45,679 --> 00:17:47,280
to encrypt the

486
00:17:47,280 --> 00:17:48,880
symmetric key

487
00:17:48,880 --> 00:17:50,640
if in some way

488
00:17:50,640 --> 00:17:53,120
this import for fails

489
00:17:53,120 --> 00:17:55,280
it silences a fallback in another in

490
00:17:55,280 --> 00:17:57,679
another encryption method which is just

491
00:17:57,679 --> 00:18:01,200
a solid key and so resploit can read it

492
00:18:01,200 --> 00:18:02,799
that means that

493
00:18:02,799 --> 00:18:05,039
if you can in some way engage your

494
00:18:05,039 --> 00:18:08,400
attacker and so try to

495
00:18:08,400 --> 00:18:10,160
modify what he is doing on your system

496
00:18:10,160 --> 00:18:11,840
you can actually

497
00:18:11,840 --> 00:18:13,200
force this

498
00:18:13,200 --> 00:18:15,120
on your victim system and then being

499
00:18:15,120 --> 00:18:17,760
able to decrypt the all communication

500
00:18:17,760 --> 00:18:20,080
between the two

501
00:18:20,080 --> 00:18:21,760
the the two systems

502
00:18:21,760 --> 00:18:23,039
how can do it

503
00:18:23,039 --> 00:18:23,840
uh

504
00:18:23,840 --> 00:18:25,679
there is a very interesting article here

505
00:18:25,679 --> 00:18:29,120
uh on poc and 4

506
00:18:29,120 --> 00:18:31,200
done by myers and sartonic i recommend

507
00:18:31,200 --> 00:18:32,720
to you to read it because it's very

508
00:18:32,720 --> 00:18:35,039
interesting it says how to exploit weak

509
00:18:35,039 --> 00:18:37,039
shell code ashes

510
00:18:37,039 --> 00:18:39,520
i'm sure most of you knows that usually

511
00:18:39,520 --> 00:18:41,840
malware use and position dependent code

512
00:18:41,840 --> 00:18:44,160
use a specific hashing in order to

513
00:18:44,160 --> 00:18:46,400
locate and use

514
00:18:46,400 --> 00:18:48,880
api calls they don't use directly the

515
00:18:48,880 --> 00:18:51,440
name but they use a kind of action this

516
00:18:51,440 --> 00:18:54,320
session can be in some way

517
00:18:54,320 --> 00:18:56,960
tricked to execute something different

518
00:18:56,960 --> 00:18:58,640
of what uh

519
00:18:58,640 --> 00:19:01,039
the metasploit the the the payload

520
00:19:01,039 --> 00:19:02,720
itself wants to do it and this is very

521
00:19:02,720 --> 00:19:04,880
well explained in this article i suggest

522
00:19:04,880 --> 00:19:07,280
you to do to have a look to it otherwise

523
00:19:07,280 --> 00:19:08,880
you can just patch a bite in memory

524
00:19:08,880 --> 00:19:10,960
which is coming from the example i did

525
00:19:10,960 --> 00:19:12,480
so if you can locate

526
00:19:12,480 --> 00:19:14,799
your attacked system you can just patch

527
00:19:14,799 --> 00:19:17,120
jump equal into a jump not equal and

528
00:19:17,120 --> 00:19:17,919
then

529
00:19:17,919 --> 00:19:21,039
have this rsa

530
00:19:21,120 --> 00:19:23,600
encryption fails

531
00:19:23,600 --> 00:19:25,520
or you can use your preferred hook

532
00:19:25,520 --> 00:19:27,520
libraries like the tools or whatever you

533
00:19:27,520 --> 00:19:28,400
want

534
00:19:28,400 --> 00:19:30,320
just to

535
00:19:30,320 --> 00:19:33,120
trick interpreter in falling back

536
00:19:33,120 --> 00:19:35,760
and what happens in this case

537
00:19:35,760 --> 00:19:36,840
is this

538
00:19:36,840 --> 00:19:40,000
so let's see the

539
00:19:40,000 --> 00:19:42,559
sample number

540
00:19:42,559 --> 00:19:44,879
three

541
00:19:47,840 --> 00:19:49,120
okay

542
00:19:49,120 --> 00:19:51,520
so you have in this case to use a

543
00:19:51,520 --> 00:19:53,600
different command it's not memory paddle

544
00:19:53,600 --> 00:19:56,080
but is in case you have to use the motor

545
00:19:56,080 --> 00:19:58,559
protector versus tcp command and just

546
00:19:58,559 --> 00:20:02,000
give the it just give it a pickup file

547
00:20:02,000 --> 00:20:04,080
where you actually

548
00:20:04,080 --> 00:20:06,559
store the whole communication of the

549
00:20:06,559 --> 00:20:08,080
analysis itself

550
00:20:08,080 --> 00:20:09,039
okay

551
00:20:09,039 --> 00:20:10,960
here you can see that it condumps the

552
00:20:10,960 --> 00:20:12,960
rsa public key it can identify that

553
00:20:12,960 --> 00:20:15,760
there is interpreter communication in

554
00:20:15,760 --> 00:20:18,320
the in the pickup file itself

555
00:20:18,320 --> 00:20:20,720
and if you actually engaged your

556
00:20:20,720 --> 00:20:24,960
attacker you can also decree extract the

557
00:20:24,960 --> 00:20:27,919
ais key from the pickup file and then

558
00:20:27,919 --> 00:20:30,080
decrypt the whole communication

559
00:20:30,080 --> 00:20:34,240
these are the the tlv commands which uh

560
00:20:34,240 --> 00:20:36,000
is the the way

561
00:20:36,000 --> 00:20:37,919
meterpreter used to encode the

562
00:20:37,919 --> 00:20:40,080
communication which are typelink

563
00:20:40,080 --> 00:20:41,360
length value

564
00:20:41,360 --> 00:20:42,960
set of commands

565
00:20:42,960 --> 00:20:45,360
and you can actually read the entire

566
00:20:45,360 --> 00:20:48,400
communication and get every command that

567
00:20:48,400 --> 00:20:50,080
has been run on the attacker by the

568
00:20:50,080 --> 00:20:52,320
attacker on the system itself with all

569
00:20:52,320 --> 00:20:54,960
the payloads and so on so it

570
00:20:54,960 --> 00:20:56,559
can decode because

571
00:20:56,559 --> 00:20:58,240
by themselves the difficulty because i

572
00:20:58,240 --> 00:21:00,880
just ported all divided command directly

573
00:21:00,880 --> 00:21:02,640
from the

574
00:21:02,640 --> 00:21:05,520
metasploit project into resploit

575
00:21:05,520 --> 00:21:07,600
so it just works

576
00:21:07,600 --> 00:21:10,240
out of the box

577
00:21:10,400 --> 00:21:12,000
okay

578
00:21:12,000 --> 00:21:13,919
let's go back

579
00:21:13,919 --> 00:21:16,559
into the presentation and let's i i told

580
00:21:16,559 --> 00:21:19,679
you okay i focus my initial work on

581
00:21:19,679 --> 00:21:20,960
metasploit

582
00:21:20,960 --> 00:21:21,840
but

583
00:21:21,840 --> 00:21:23,919
now cobra strike it's becoming more and

584
00:21:23,919 --> 00:21:25,280
more common to be

585
00:21:25,280 --> 00:21:28,480
and is a lot seen a lot on

586
00:21:28,480 --> 00:21:32,320
on in my real uh real job um

587
00:21:32,320 --> 00:21:34,720
so much that in some way we are running

588
00:21:34,720 --> 00:21:36,960
into a genetic bottleneck with attacker

589
00:21:36,960 --> 00:21:38,880
code and it's a pity because it's really

590
00:21:38,880 --> 00:21:40,720
interesting to see because there are a

591
00:21:40,720 --> 00:21:42,640
lot of attackers now migrating on cobble

592
00:21:42,640 --> 00:21:44,799
strike

593
00:21:44,799 --> 00:21:46,559
so the support for kobasak is present

594
00:21:46,559 --> 00:21:48,559
and is working needs improvement for

595
00:21:48,559 --> 00:21:49,440
sure

596
00:21:49,440 --> 00:21:51,360
also because kabasev is quite a complex

597
00:21:51,360 --> 00:21:53,360
beast to treat on

598
00:21:53,360 --> 00:21:56,320
it can recognize the

599
00:21:56,320 --> 00:21:58,159
beacons the serve so respond can

600
00:21:58,159 --> 00:22:01,520
recognize the beacon if you can pass it

601
00:22:01,520 --> 00:22:04,640
and also it can decode the configuration

602
00:22:04,640 --> 00:22:07,360
if you have a copper strike parser which

603
00:22:07,360 --> 00:22:08,880
is a two coming from

604
00:22:08,880 --> 00:22:10,880
sentinel one installed it can use it

605
00:22:10,880 --> 00:22:13,600
automatically and dump the configuration

606
00:22:13,600 --> 00:22:15,200
but

607
00:22:15,200 --> 00:22:16,080
as you

608
00:22:16,080 --> 00:22:18,559
probably know copper strike can be

609
00:22:18,559 --> 00:22:20,559
used in a couple of ways you can use the

610
00:22:20,559 --> 00:22:21,760
let's say

611
00:22:21,760 --> 00:22:23,600
out of the box function functionalities

612
00:22:23,600 --> 00:22:25,200
and configuration which are more or less

613
00:22:25,200 --> 00:22:27,039
known and you can actually decrypt the

614
00:22:27,039 --> 00:22:29,760
configuration and so on but you can also

615
00:22:29,760 --> 00:22:32,559
customize it a lot

616
00:22:32,559 --> 00:22:34,880
so if

617
00:22:34,880 --> 00:22:37,039
the attacker customize it

618
00:22:37,039 --> 00:22:38,720
probably the static tools as i said

619
00:22:38,720 --> 00:22:40,559
before are not going to work so the

620
00:22:40,559 --> 00:22:42,320
extraction of the configuration does not

621
00:22:42,320 --> 00:22:43,520
work

622
00:22:43,520 --> 00:22:45,919
but as i said before the emulation can

623
00:22:45,919 --> 00:22:48,240
help us in this case because emulation

624
00:22:48,240 --> 00:22:50,640
does not relies on

625
00:22:50,640 --> 00:22:52,159
static things on the code but it can

626
00:22:52,159 --> 00:22:54,640
just unroll the code and read it and go

627
00:22:54,640 --> 00:22:56,159
ahead with the analysis

628
00:22:56,159 --> 00:22:58,720
here i am making an example with an

629
00:22:58,720 --> 00:23:00,640
imported epoch 5 sample thanks to

630
00:23:00,640 --> 00:23:02,159
malware traffic analysis for providing

631
00:23:02,159 --> 00:23:04,000
the sample

632
00:23:04,000 --> 00:23:06,799
and i can show you that for example by

633
00:23:06,799 --> 00:23:08,720
just emulating the code you can get some

634
00:23:08,720 --> 00:23:10,240
information out from the cobra strike

635
00:23:10,240 --> 00:23:13,360
beacon itself which is uh

636
00:23:13,360 --> 00:23:15,520
for example the c2 the parameters used

637
00:23:15,520 --> 00:23:16,559
to

638
00:23:16,559 --> 00:23:18,960
establish the connection and all the api

639
00:23:18,960 --> 00:23:22,400
calls done by the by the executable

640
00:23:22,400 --> 00:23:24,720
itself

641
00:23:25,600 --> 00:23:27,520
as i said beacons can be heavily

642
00:23:27,520 --> 00:23:28,720
customized

643
00:23:28,720 --> 00:23:30,159
on cobblestrike

644
00:23:30,159 --> 00:23:32,320
even the slip mask and the slip masks

645
00:23:32,320 --> 00:23:35,280
are the way that cobblestark used to

646
00:23:35,280 --> 00:23:37,120
encrypt themselves in memory when he is

647
00:23:37,120 --> 00:23:39,520
leaping so

648
00:23:39,520 --> 00:23:41,600
it cannot be detected by detection

649
00:23:41,600 --> 00:23:42,880
engine

650
00:23:42,880 --> 00:23:47,200
but slip mask can be customized so

651
00:23:47,279 --> 00:23:48,799
usually

652
00:23:48,799 --> 00:23:51,039
if you face one of them

653
00:23:51,039 --> 00:23:52,880
probably your detection engine will not

654
00:23:52,880 --> 00:23:55,120
work but by emulating the code you can

655
00:23:55,120 --> 00:23:56,960
also extract this kind of slip masks

656
00:23:56,960 --> 00:23:58,000
from

657
00:23:58,000 --> 00:23:59,679
from the beacon itself and try to

658
00:23:59,679 --> 00:24:00,720
understand

659
00:24:00,720 --> 00:24:02,480
what he's doing and doing your job on

660
00:24:02,480 --> 00:24:05,440
the on it so

661
00:24:05,440 --> 00:24:07,679
i will show you also a quick

662
00:24:07,679 --> 00:24:09,919
sample of how it works even for

663
00:24:09,919 --> 00:24:12,640
cobblestrike

664
00:24:14,320 --> 00:24:17,039
in this case okay i'm just emulating as

665
00:24:17,039 --> 00:24:19,360
usual command in this case i'm passing

666
00:24:19,360 --> 00:24:21,279
also another parameter because this was

667
00:24:21,279 --> 00:24:23,520
a 64-bit beacon

668
00:24:23,520 --> 00:24:25,360
from cobblestrike okay as you can see

669
00:24:25,360 --> 00:24:27,440
here in this case it recognized there

670
00:24:27,440 --> 00:24:31,120
was a configuration so it used the

671
00:24:31,200 --> 00:24:33,760
the cobblest the cobblestone parser

672
00:24:33,760 --> 00:24:35,760
utility installed to the code every

673
00:24:35,760 --> 00:24:38,400
single uh parameter but

674
00:24:38,400 --> 00:24:40,799
even if we were in the case that

675
00:24:40,799 --> 00:24:43,120
it was not possible by emulating the

676
00:24:43,120 --> 00:24:44,880
code itself here it takes a while

677
00:24:44,880 --> 00:24:47,760
because actually cobblestack is

678
00:24:47,760 --> 00:24:48,799
kind of

679
00:24:48,799 --> 00:24:51,279
a bit more complex than

680
00:24:51,279 --> 00:24:53,360
the metaexploit and he's doing a lot of

681
00:24:53,360 --> 00:24:54,880
things

682
00:24:54,880 --> 00:24:56,720
but you will see that okay it's now

683
00:24:56,720 --> 00:24:59,600
decoding all the queue all the api calls

684
00:24:59,600 --> 00:25:02,559
and as before you can just analyze them

685
00:25:02,559 --> 00:25:04,720
and may figure out what actually your

686
00:25:04,720 --> 00:25:06,480
beacon is doing

687
00:25:06,480 --> 00:25:09,520
in your system so you can

688
00:25:09,520 --> 00:25:13,200
as before you are getting your c2 your

689
00:25:13,200 --> 00:25:16,240
cookie set your way of contacting the c2

690
00:25:16,240 --> 00:25:17,679
and so on so

691
00:25:17,679 --> 00:25:21,760
it can it allows you to

692
00:25:21,919 --> 00:25:23,840
make your idea of what actually the

693
00:25:23,840 --> 00:25:26,880
binary you are finding around it's doing

694
00:25:26,880 --> 00:25:29,840
what it's doing

695
00:25:30,960 --> 00:25:35,360
so as i said resploit enhanced emulation

696
00:25:35,360 --> 00:25:38,720
because as i said before sometimes

697
00:25:38,720 --> 00:25:40,720
if you just get the tool same i was

698
00:25:40,720 --> 00:25:43,520
referring before so unicorn and mandiant

699
00:25:43,520 --> 00:25:45,360
speakeasy they breaks if you try to

700
00:25:45,360 --> 00:25:46,880
emulate things

701
00:25:46,880 --> 00:25:50,159
because i had to face several issues in

702
00:25:50,159 --> 00:25:52,320
getting these things runnings like i

703
00:25:52,320 --> 00:25:53,200
show you

704
00:25:53,200 --> 00:25:55,200
just just now

705
00:25:55,200 --> 00:25:57,840
and this is done through the fix-ups

706
00:25:57,840 --> 00:26:00,240
fixed-up must be manually enabled in the

707
00:26:00,240 --> 00:26:01,919
two itself so it

708
00:26:01,919 --> 00:26:03,279
requires a

709
00:26:03,279 --> 00:26:04,159
f

710
00:26:04,159 --> 00:26:05,039
option

711
00:26:05,039 --> 00:26:07,279
and they try to

712
00:26:07,279 --> 00:26:09,840
fix things because let me make you an

713
00:26:09,840 --> 00:26:11,360
example here

714
00:26:11,360 --> 00:26:12,799
um

715
00:26:12,799 --> 00:26:14,559
this is i realized this when i was

716
00:26:14,559 --> 00:26:17,120
working with chicago and i

717
00:26:17,120 --> 00:26:19,600
encoded samples from meta exploit you

718
00:26:19,600 --> 00:26:21,039
probably know that chicago is a

719
00:26:21,039 --> 00:26:25,279
well-known encoding engine and unicorn

720
00:26:25,279 --> 00:26:27,600
when it's trying to emulate that code

721
00:26:27,600 --> 00:26:30,240
it's failing because in some way

722
00:26:30,240 --> 00:26:32,400
there isn't some instruction executed

723
00:26:32,400 --> 00:26:34,480
twice in any case the execution itself

724
00:26:34,480 --> 00:26:36,559
is not reliable there is an open issue

725
00:26:36,559 --> 00:26:37,600
on that

726
00:26:37,600 --> 00:26:40,480
which will probably never fix it because

727
00:26:40,480 --> 00:26:42,080
it's come it's something that it comes

728
00:26:42,080 --> 00:26:44,080
out from the chemo

729
00:26:44,080 --> 00:26:45,120
engine

730
00:26:45,120 --> 00:26:47,440
and it's due to the fact that shikata

731
00:26:47,440 --> 00:26:49,360
can i try to

732
00:26:49,360 --> 00:26:51,440
self-modify code in the same translated

733
00:26:51,440 --> 00:26:53,600
blocks between the six the first 16

734
00:26:53,600 --> 00:26:55,679
bytes from the program counter that

735
00:26:55,679 --> 00:26:58,720
means that it's in some way probably

736
00:26:58,720 --> 00:26:59,919
something that was not taking into

737
00:26:59,919 --> 00:27:02,000
consideration for the emulation and it

738
00:27:02,000 --> 00:27:04,080
just breaks so what i did

739
00:27:04,080 --> 00:27:06,720
it's just implementing this uh fixed ups

740
00:27:06,720 --> 00:27:09,679
manual in the code of freeze ploit and

741
00:27:09,679 --> 00:27:11,600
executing the code by myself and then

742
00:27:11,600 --> 00:27:14,400
overcome to this to this problem

743
00:27:14,400 --> 00:27:16,240
another example of fixed ups is for

744
00:27:16,240 --> 00:27:18,320
example the emulations of of

745
00:27:18,320 --> 00:27:22,080
the floating point instructions because

746
00:27:22,080 --> 00:27:24,399
if you are used to position independent

747
00:27:24,399 --> 00:27:25,760
code you know that floating point

748
00:27:25,760 --> 00:27:28,240
instructions are often used to locate

749
00:27:28,240 --> 00:27:29,039
the

750
00:27:29,039 --> 00:27:31,279
executable in the memory

751
00:27:31,279 --> 00:27:32,080
and

752
00:27:32,080 --> 00:27:34,080
floating point instruction emulated are

753
00:27:34,080 --> 00:27:36,799
not behaving consistently as well to

754
00:27:36,799 --> 00:27:38,320
tell the truth they are not behaving

755
00:27:38,320 --> 00:27:40,159
consistently even if you are debugging

756
00:27:40,159 --> 00:27:42,399
them you i don't know if you ever debug

757
00:27:42,399 --> 00:27:44,720
the these kind of things in both linux

758
00:27:44,720 --> 00:27:47,120
and unix if you are single stepping this

759
00:27:47,120 --> 00:27:49,120
instruction with a debugger you are

760
00:27:49,120 --> 00:27:51,279
probably going to get some strange

761
00:27:51,279 --> 00:27:53,600
values out of them so if you execute

762
00:27:53,600 --> 00:27:55,760
them in a block it works

763
00:27:55,760 --> 00:27:57,039
i don't know if it's the problem it's

764
00:27:57,039 --> 00:27:58,720
the same as them with the emulator but

765
00:27:58,720 --> 00:27:59,840
even in this case i had to apply a

766
00:27:59,840 --> 00:28:02,159
manual fix on this kind of emulation to

767
00:28:02,159 --> 00:28:04,080
get it working another example of

768
00:28:04,080 --> 00:28:06,640
fix-ups implemented in respite is that

769
00:28:06,640 --> 00:28:08,320
for some reason some of the engines i

770
00:28:08,320 --> 00:28:10,880
implemented were failing because the

771
00:28:10,880 --> 00:28:12,960
stack of the emulation code was too

772
00:28:12,960 --> 00:28:15,360
small and so i had to

773
00:28:15,360 --> 00:28:16,000
put some

774
00:28:16,000 --> 00:28:17,200
[Music]

775
00:28:17,200 --> 00:28:19,440
fake values there to in order to make

776
00:28:19,440 --> 00:28:22,399
the the stack a bit bigger and

777
00:28:22,399 --> 00:28:23,919
being able to complete the emulation

778
00:28:23,919 --> 00:28:25,919
itself

779
00:28:25,919 --> 00:28:29,039
then i said that i tried to move it on a

780
00:28:29,039 --> 00:28:31,360
more generic approach and so i had added

781
00:28:31,360 --> 00:28:33,919
additional support for other tools used

782
00:28:33,919 --> 00:28:35,760
you by

783
00:28:35,760 --> 00:28:38,000
by attackers or by

784
00:28:38,000 --> 00:28:40,640
let's redeemer in some in some cases

785
00:28:40,640 --> 00:28:42,480
one is done done it's a well-known

786
00:28:42,480 --> 00:28:45,200
utility probably you know it it's used

787
00:28:45,200 --> 00:28:46,960
to create position independent code out

788
00:28:46,960 --> 00:28:48,640
of an executable

789
00:28:48,640 --> 00:28:50,559
if you

790
00:28:50,559 --> 00:28:52,240
give your executable to donate it you'll

791
00:28:52,240 --> 00:28:53,919
just translate it in a position

792
00:28:53,919 --> 00:28:55,760
dependent code you can get it and

793
00:28:55,760 --> 00:28:57,679
virtual unlocking

794
00:28:57,679 --> 00:29:00,480
it to some somewhere

795
00:29:00,480 --> 00:29:02,480
but that is based on a well-known stub

796
00:29:02,480 --> 00:29:04,559
so it can be detected

797
00:29:04,559 --> 00:29:06,559
and there was a strange things done by

798
00:29:06,559 --> 00:29:08,159
dhanut not a strange one it's a very

799
00:29:08,159 --> 00:29:11,039
common to be honest because he was using

800
00:29:11,039 --> 00:29:15,600
the usual api hashing way to call apis

801
00:29:15,600 --> 00:29:17,520
but in some way was slowing down a lot

802
00:29:17,520 --> 00:29:18,960
of the execution in the emulated

803
00:29:18,960 --> 00:29:20,960
environment so what i did is to

804
00:29:20,960 --> 00:29:24,080
implement here a shortcut for

805
00:29:24,080 --> 00:29:26,080
donut specifically so when the donut

806
00:29:26,080 --> 00:29:28,080
stub is detected in memory

807
00:29:28,080 --> 00:29:30,080
there is a kind of shortcut in order to

808
00:29:30,080 --> 00:29:32,559
overcome to this

809
00:29:32,559 --> 00:29:34,720
part here and then

810
00:29:34,720 --> 00:29:36,799
make the emulation faster and complete

811
00:29:36,799 --> 00:29:37,600
it

812
00:29:37,600 --> 00:29:39,679
very fast so this is another example of

813
00:29:39,679 --> 00:29:41,760
donut uh of uh fixed up applied on

814
00:29:41,760 --> 00:29:43,760
donuts because for some reason

815
00:29:43,760 --> 00:29:47,760
there was this api calls failing in

816
00:29:47,760 --> 00:29:49,039
in the

817
00:29:49,039 --> 00:29:50,799
emulator itself it was a map viewer

818
00:29:50,799 --> 00:29:54,080
section which was in some way

819
00:29:54,080 --> 00:29:56,480
correctly used with the read write

820
00:29:56,480 --> 00:29:58,720
command read red flag here in order to

821
00:29:58,720 --> 00:30:01,600
write it but for some reason unicorn was

822
00:30:01,600 --> 00:30:03,679
failing in this case probably more

823
00:30:03,679 --> 00:30:04,880
speakeasy

824
00:30:04,880 --> 00:30:07,440
when accessing in writing

825
00:30:07,440 --> 00:30:09,360
i didn't understood

826
00:30:09,360 --> 00:30:11,760
correctly the issue here

827
00:30:11,760 --> 00:30:15,279
so i applied a fix up here to

828
00:30:15,279 --> 00:30:17,919
adding an additional

829
00:30:17,919 --> 00:30:19,760
flag which was the

830
00:30:19,760 --> 00:30:22,399
execution one which then had it worked

831
00:30:22,399 --> 00:30:25,360
so it was able to complete the emulation

832
00:30:25,360 --> 00:30:27,200
another additional support i added is

833
00:30:27,200 --> 00:30:29,039
was about pizza these are another

834
00:30:29,039 --> 00:30:31,600
interesting p packer if you use it

835
00:30:31,600 --> 00:30:34,559
probably to obfuscate your payloads it

836
00:30:34,559 --> 00:30:38,320
implements another chicago night

837
00:30:38,320 --> 00:30:40,960
version and this one had a specific fix

838
00:30:40,960 --> 00:30:43,679
up the one i showed before about adding

839
00:30:43,679 --> 00:30:46,640
the fake values in the stack

840
00:30:46,640 --> 00:30:48,880
then i recently added a new feature

841
00:30:48,880 --> 00:30:52,240
which was which is an anti-debug one

842
00:30:52,240 --> 00:30:55,200
in this case what happens is

843
00:30:55,200 --> 00:30:57,200
the emulation tries to find all the

844
00:30:57,200 --> 00:30:59,919
anti-debug tricks used by the executable

845
00:30:59,919 --> 00:31:02,080
what does it mean

846
00:31:02,080 --> 00:31:04,399
sometimes you can have executable

847
00:31:04,399 --> 00:31:06,080
doing things to understand if they are

848
00:31:06,080 --> 00:31:07,919
in an emulated environment

849
00:31:07,919 --> 00:31:10,000
and sometimes you may have you may want

850
00:31:10,000 --> 00:31:12,080
to patch them but sometimes it's not too

851
00:31:12,080 --> 00:31:13,519
easy to understand where they are doing

852
00:31:13,519 --> 00:31:16,960
these checks and so i implemented this

853
00:31:16,960 --> 00:31:19,840
future uh feature here

854
00:31:19,840 --> 00:31:21,760
uh i know there are tons of debug

855
00:31:21,760 --> 00:31:24,399
streaks around so i just implemented

856
00:31:24,399 --> 00:31:26,799
i don't know 20 of them right now but

857
00:31:26,799 --> 00:31:30,480
probably i want to add more of them

858
00:31:30,480 --> 00:31:33,120
these are examples of what is able to

859
00:31:33,120 --> 00:31:35,600
to detect so for example the direct

860
00:31:35,600 --> 00:31:37,679
access of the

861
00:31:37,679 --> 00:31:41,120
of these flags and so on what what

862
00:31:41,120 --> 00:31:44,000
it happens is that once it

863
00:31:44,000 --> 00:31:47,840
detects this kind of

864
00:31:48,559 --> 00:31:51,039
things it also tells you where it is it

865
00:31:51,039 --> 00:31:54,320
attaches in memory so you can use your

866
00:31:54,320 --> 00:31:56,960
debugger to patch it and then being able

867
00:31:56,960 --> 00:32:00,159
to use it in uh also in a real

868
00:32:00,159 --> 00:32:02,000
environment without

869
00:32:02,000 --> 00:32:05,840
being uh hazard by all these checks so

870
00:32:05,840 --> 00:32:06,880
this is a

871
00:32:06,880 --> 00:32:08,880
very uh at the beginning these kind of

872
00:32:08,880 --> 00:32:11,039
things because i implemented 20

873
00:32:11,039 --> 00:32:12,720
uh checks

874
00:32:12,720 --> 00:32:13,760
there are

875
00:32:13,760 --> 00:32:15,440
hundreds of them so

876
00:32:15,440 --> 00:32:17,600
we are we are working on it

877
00:32:17,600 --> 00:32:18,720
uh

878
00:32:18,720 --> 00:32:20,399
i show you

879
00:32:20,399 --> 00:32:22,000
a quick

880
00:32:22,000 --> 00:32:24,799
sample of it works

881
00:32:24,799 --> 00:32:28,080
and here is a here is example so it can

882
00:32:28,080 --> 00:32:30,960
just drop you where in the memory in the

883
00:32:30,960 --> 00:32:32,799
where in the executable the the

884
00:32:32,799 --> 00:32:34,559
anti-debug texas bendy has been

885
00:32:34,559 --> 00:32:36,880
identified and tells you which is the

886
00:32:36,880 --> 00:32:39,519
anti-debug tricks so you can just google

887
00:32:39,519 --> 00:32:40,240
it

888
00:32:40,240 --> 00:32:42,399
and maybe patch it out if you want to

889
00:32:42,399 --> 00:32:44,960
execute it

890
00:32:44,960 --> 00:32:46,399
so

891
00:32:46,399 --> 00:32:47,279
okay

892
00:32:47,279 --> 00:32:48,960
i built the tools so that you can also

893
00:32:48,960 --> 00:32:50,799
customize it

894
00:32:50,799 --> 00:32:51,760
how

895
00:32:51,760 --> 00:32:54,399
you can modify a file it's a python

896
00:32:54,399 --> 00:32:56,480
script this is a python program

897
00:32:56,480 --> 00:32:59,360
you can use yara rules in this case

898
00:32:59,360 --> 00:33:01,279
so there are a specific file where you

899
00:33:01,279 --> 00:33:04,080
can build your yara rule

900
00:33:04,080 --> 00:33:08,320
to match code and then being able to

901
00:33:08,320 --> 00:33:09,519
make your

902
00:33:09,519 --> 00:33:11,760
own rules to match what you are looking

903
00:33:11,760 --> 00:33:14,559
for and there is another file here where

904
00:33:14,559 --> 00:33:17,679
you can actually decide what to do

905
00:33:17,679 --> 00:33:21,039
when the specific rules you just

906
00:33:21,039 --> 00:33:22,799
wrote is matched

907
00:33:22,799 --> 00:33:26,799
as soon here is where the let's say

908
00:33:26,799 --> 00:33:27,679
uh

909
00:33:27,679 --> 00:33:30,399
interaction of the code parts comes in

910
00:33:30,399 --> 00:33:32,799
so you can actually make the executable

911
00:33:32,799 --> 00:33:35,279
doing other things other than just

912
00:33:35,279 --> 00:33:37,760
other just what he's trying to do so you

913
00:33:37,760 --> 00:33:39,279
can guide it

914
00:33:39,279 --> 00:33:41,840
to specific branches

915
00:33:41,840 --> 00:33:43,279
couple of words about performances

916
00:33:43,279 --> 00:33:46,159
performances are a concern emulation

917
00:33:46,159 --> 00:33:47,519
slow down things

918
00:33:47,519 --> 00:33:50,480
so no way around on that so

919
00:33:50,480 --> 00:33:52,080
also the additional fixed ups and

920
00:33:52,080 --> 00:33:54,080
harnesses i added are

921
00:33:54,080 --> 00:33:57,200
let's say making it a bit more complex

922
00:33:57,200 --> 00:34:00,559
uh i implemented a way to

923
00:34:00,559 --> 00:34:02,320
to work around to this because i

924
00:34:02,320 --> 00:34:04,559
implemented a specific option which is

925
00:34:04,559 --> 00:34:07,600
the anuk option and you can specify it

926
00:34:07,600 --> 00:34:10,079
and disable this all these hooks during

927
00:34:10,079 --> 00:34:12,320
execution until you reach a specific

928
00:34:12,320 --> 00:34:14,960
memory location and that the

929
00:34:14,960 --> 00:34:17,040
hooks can be re-enabled again so you can

930
00:34:17,040 --> 00:34:18,960
just speed up execution until you reach

931
00:34:18,960 --> 00:34:21,199
the point where you want to have a look

932
00:34:21,199 --> 00:34:24,078
into the code itself

933
00:34:24,879 --> 00:34:26,639
now i would like to make you

934
00:34:26,639 --> 00:34:29,119
make some use cases with you in order to

935
00:34:29,119 --> 00:34:30,320
clarify

936
00:34:30,320 --> 00:34:32,239
why i think this is this is useful in

937
00:34:32,239 --> 00:34:34,159
some cases as i as before the two before

938
00:34:34,159 --> 00:34:36,079
this is not a script kd2

939
00:34:36,079 --> 00:34:37,440
it's something that

940
00:34:37,440 --> 00:34:39,199
you can use if you are used to reverse

941
00:34:39,199 --> 00:34:41,440
engineering you can you are used to

942
00:34:41,440 --> 00:34:42,879
incident response

943
00:34:42,879 --> 00:34:44,800
this is a very interesting case in my

944
00:34:44,800 --> 00:34:46,719
opinion because this is where i started

945
00:34:46,719 --> 00:34:48,719
my idea about it

946
00:34:48,719 --> 00:34:51,119
a couple of years ago

947
00:34:51,119 --> 00:34:53,359
something more than a year ago i

948
00:34:53,359 --> 00:34:55,520
wrote this analysis about unemployed

949
00:34:55,520 --> 00:34:56,480
example

950
00:34:56,480 --> 00:34:58,079
the last demoted sample before the

951
00:34:58,079 --> 00:35:01,280
shutdown done in 2021

952
00:35:01,280 --> 00:35:03,359
i had a look to it because it was

953
00:35:03,359 --> 00:35:05,760
implementing a really interesting state

954
00:35:05,760 --> 00:35:08,800
machine in the in the code

955
00:35:08,800 --> 00:35:10,720
with the

956
00:35:10,720 --> 00:35:12,960
code itself doing different things based

957
00:35:12,960 --> 00:35:15,440
on the content of a specific register so

958
00:35:15,440 --> 00:35:18,560
what i was what i did in this analysis i

959
00:35:18,560 --> 00:35:19,440
i

960
00:35:19,440 --> 00:35:20,720
tell you if you want if you have time

961
00:35:20,720 --> 00:35:22,560
have a look to it it's very interesting

962
00:35:22,560 --> 00:35:24,240
it was to use a

963
00:35:24,240 --> 00:35:25,200
let's say

964
00:35:25,200 --> 00:35:25,920
a

965
00:35:25,920 --> 00:35:28,160
very big a very

966
00:35:28,160 --> 00:35:31,040
simple version of wristploit to interact

967
00:35:31,040 --> 00:35:32,960
with execution so i was emulating the

968
00:35:32,960 --> 00:35:35,599
code and then in some places just

969
00:35:35,599 --> 00:35:37,839
modifying the content of this of this

970
00:35:37,839 --> 00:35:39,680
register in order to get the code

971
00:35:39,680 --> 00:35:41,920
execution going in some other branches

972
00:35:41,920 --> 00:35:44,720
and for example discover what was

973
00:35:44,720 --> 00:35:47,920
creating a service what was uh i don't

974
00:35:47,920 --> 00:35:49,119
know

975
00:35:49,119 --> 00:35:51,680
checking for the file systems and so on

976
00:35:51,680 --> 00:35:54,240
this is a very interesting usage of the

977
00:35:54,240 --> 00:35:56,000
tool itself i

978
00:35:56,000 --> 00:35:58,320
i'm very happy uh to share this because

979
00:35:58,320 --> 00:36:02,320
it's where the entire idea actually born

980
00:36:02,320 --> 00:36:04,000
then there are some other cases use

981
00:36:04,000 --> 00:36:06,640
cases you can use for the tool for for

982
00:36:06,640 --> 00:36:08,480
example you can use it for damping

983
00:36:08,480 --> 00:36:09,520
thread

984
00:36:09,520 --> 00:36:13,200
there is a specific option in emulate

985
00:36:13,200 --> 00:36:16,560
in the emulate command which is the ht

986
00:36:16,560 --> 00:36:18,160
in this case when it

987
00:36:18,160 --> 00:36:19,359
find a

988
00:36:19,359 --> 00:36:21,040
create thread

989
00:36:21,040 --> 00:36:24,079
execution it just dump it into a binary

990
00:36:24,079 --> 00:36:27,119
file and you can analyze it later on so

991
00:36:27,119 --> 00:36:27,839
it

992
00:36:27,839 --> 00:36:29,839
could be very useful okay there is a

993
00:36:29,839 --> 00:36:32,000
demo but we can skip it so

994
00:36:32,000 --> 00:36:33,920
i will not keep you

995
00:36:33,920 --> 00:36:36,880
uh i know i will not waste your time but

996
00:36:36,880 --> 00:36:38,320
this is another one this one it's very

997
00:36:38,320 --> 00:36:40,280
interesting i added it

998
00:36:40,280 --> 00:36:42,720
a couple of weeks ago

999
00:36:42,720 --> 00:36:44,640
and the possibility to dump

1000
00:36:44,640 --> 00:36:47,839
memory allocation this is very very

1001
00:36:47,839 --> 00:36:50,400
useful because you know when you analyze

1002
00:36:50,400 --> 00:36:52,880
malicious software you always have the

1003
00:36:52,880 --> 00:36:55,119
virtual unlock somewhere then getting

1004
00:36:55,119 --> 00:36:56,960
something from memory or from the

1005
00:36:56,960 --> 00:36:59,920
resources and some from something else

1006
00:36:59,920 --> 00:37:02,880
putting them and and then try starting

1007
00:37:02,880 --> 00:37:05,920
in the crypting and writing the

1008
00:37:05,920 --> 00:37:07,520
clear text

1009
00:37:07,520 --> 00:37:10,320
in this allocation i wrote this

1010
00:37:10,320 --> 00:37:13,280
dash m option here which is actually

1011
00:37:13,280 --> 00:37:15,599
allowing the executable to do it and it

1012
00:37:15,599 --> 00:37:18,800
dumps the content of the

1013
00:37:18,800 --> 00:37:21,280
allocated environment allocated memory

1014
00:37:21,280 --> 00:37:24,240
sorry only when it is accessed to be

1015
00:37:24,240 --> 00:37:27,520
used or to be executed so what it means

1016
00:37:27,520 --> 00:37:29,920
is that by using this

1017
00:37:29,920 --> 00:37:33,200
functionality you can

1018
00:37:33,200 --> 00:37:35,760
for example

1019
00:37:35,760 --> 00:37:37,839
now this is the thread one which is not

1020
00:37:37,839 --> 00:37:40,400
the one you want to show you it's

1021
00:37:40,400 --> 00:37:42,800
this one

1022
00:37:42,880 --> 00:37:45,280
so in this case for example

1023
00:37:45,280 --> 00:37:47,119
there was a very

1024
00:37:47,119 --> 00:37:48,640
simple things there's a very simple

1025
00:37:48,640 --> 00:37:50,640
executable just decrypting something out

1026
00:37:50,640 --> 00:37:52,720
of form of your virtual unlock

1027
00:37:52,720 --> 00:37:55,680
uh in this case i just enabled the dash

1028
00:37:55,680 --> 00:37:56,480
m

1029
00:37:56,480 --> 00:37:59,680
and i got this dump out of the

1030
00:37:59,680 --> 00:38:01,760
the memory because it was the decrypted

1031
00:38:01,760 --> 00:38:03,599
memory buffer here

1032
00:38:03,599 --> 00:38:06,480
with okay this secret password because

1033
00:38:06,480 --> 00:38:08,400
it just dumped it when it was accessed

1034
00:38:08,400 --> 00:38:09,760
back to be read

1035
00:38:09,760 --> 00:38:11,520
this is another way

1036
00:38:11,520 --> 00:38:14,079
which is very interesting to

1037
00:38:14,079 --> 00:38:17,839
to get something out of the tool itself

1038
00:38:17,839 --> 00:38:19,920
okay let's go back

1039
00:38:19,920 --> 00:38:21,520
dumping files it's more or less the same

1040
00:38:21,520 --> 00:38:23,839
okay nothing special

1041
00:38:23,839 --> 00:38:25,920
another option to dump files created by

1042
00:38:25,920 --> 00:38:28,720
the the tool but okay no

1043
00:38:28,720 --> 00:38:31,280
no special things here

1044
00:38:31,280 --> 00:38:32,960
this one it's pretty interesting because

1045
00:38:32,960 --> 00:38:34,800
this one

1046
00:38:34,800 --> 00:38:35,520
uh

1047
00:38:35,520 --> 00:38:36,960
it came out from the i don't know if you

1048
00:38:36,960 --> 00:38:38,079
played the

1049
00:38:38,079 --> 00:38:40,560
ctf teaser for insomniac

1050
00:38:40,560 --> 00:38:42,960
uh there was a really interesting

1051
00:38:42,960 --> 00:38:45,040
challenge the coronavirus one

1052
00:38:45,040 --> 00:38:46,880
which was in some way probably created

1053
00:38:46,880 --> 00:38:48,560
with oil alvo mol alvo and it's an

1054
00:38:48,560 --> 00:38:51,280
obfuscator it's based on silang probably

1055
00:38:51,280 --> 00:38:54,320
most of you knows what what it is

1056
00:38:54,320 --> 00:38:57,119
what it does is just get a c a c program

1057
00:38:57,119 --> 00:38:58,880
and it

1058
00:38:58,880 --> 00:39:01,359
do nasty things to the code making them

1059
00:39:01,359 --> 00:39:03,440
making it pretty unreadable this is for

1060
00:39:03,440 --> 00:39:04,560
example

1061
00:39:04,560 --> 00:39:05,680
um

1062
00:39:05,680 --> 00:39:08,800
a flow of an energy compiled binaries

1063
00:39:08,800 --> 00:39:11,440
just doing a a call to google to get the

1064
00:39:11,440 --> 00:39:13,839
page the the home page as you can see

1065
00:39:13,839 --> 00:39:14,880
it's pretty

1066
00:39:14,880 --> 00:39:17,040
modified

1067
00:39:17,040 --> 00:39:19,359
the coronavirus one

1068
00:39:19,359 --> 00:39:22,400
used during the ctf was

1069
00:39:22,400 --> 00:39:24,000
a lot a lot

1070
00:39:24,000 --> 00:39:25,280
worse than this

1071
00:39:25,280 --> 00:39:28,000
and it was really

1072
00:39:28,000 --> 00:39:31,359
hard to look at and how in this case

1073
00:39:31,359 --> 00:39:34,640
emulation can can help you it can allows

1074
00:39:34,640 --> 00:39:38,079
you to let's say unroll all these things

1075
00:39:38,079 --> 00:39:41,440
and let you focus on the relevant parts

1076
00:39:41,440 --> 00:39:43,359
what i mean

1077
00:39:43,359 --> 00:39:46,640
for example in this case

1078
00:39:46,960 --> 00:39:49,680
let's have a look

1079
00:39:51,280 --> 00:39:53,839
okay it just executed things and what

1080
00:39:53,839 --> 00:39:56,400
you can focus on are the api calls for

1081
00:39:56,400 --> 00:39:58,960
example you as i said before that code

1082
00:39:58,960 --> 00:40:01,599
was just doing a call to google and this

1083
00:40:01,599 --> 00:40:04,160
is where it's actually doing it it took

1084
00:40:04,160 --> 00:40:05,920
two seconds to emulate

1085
00:40:05,920 --> 00:40:08,079
uh if you probably had a look to it with

1086
00:40:08,079 --> 00:40:11,520
a debugger or with a i don't know your

1087
00:40:11,520 --> 00:40:14,240
ida or guidra or something probably it

1088
00:40:14,240 --> 00:40:15,200
will take

1089
00:40:15,200 --> 00:40:16,319
maybe

1090
00:40:16,319 --> 00:40:17,839
half an hour just to understand what is

1091
00:40:17,839 --> 00:40:20,160
going on

1092
00:40:20,800 --> 00:40:23,920
why i was mentioning the coronavirus

1093
00:40:23,920 --> 00:40:25,200
challenge

1094
00:40:25,200 --> 00:40:26,880
of the teaser

1095
00:40:26,880 --> 00:40:28,319
because

1096
00:40:28,319 --> 00:40:30,800
it was

1097
00:40:31,040 --> 00:40:33,760
one of the examples i made before

1098
00:40:33,760 --> 00:40:36,480
a very complex executable which probably

1099
00:40:36,480 --> 00:40:38,720
was not working out of the box running

1100
00:40:38,720 --> 00:40:40,560
run in a resploit

1101
00:40:40,560 --> 00:40:42,160
but i

1102
00:40:42,160 --> 00:40:44,400
i switched my

1103
00:40:44,400 --> 00:40:47,119
no idea what i'm doing mode on that in

1104
00:40:47,119 --> 00:40:49,119
when i was working on that and so i

1105
00:40:49,119 --> 00:40:51,599
tried to emulate it into resploit it was

1106
00:40:51,599 --> 00:40:53,440
failing because missing

1107
00:40:53,440 --> 00:40:56,079
apis and so on so there were a lot of

1108
00:40:56,079 --> 00:40:57,839
things not

1109
00:40:57,839 --> 00:40:59,359
not working well

1110
00:40:59,359 --> 00:41:01,280
but then i started to

1111
00:41:01,280 --> 00:41:02,880
acting this way

1112
00:41:02,880 --> 00:41:05,839
i was looking at what was failing and

1113
00:41:05,839 --> 00:41:07,839
there were a lot of api calls which were

1114
00:41:07,839 --> 00:41:08,880
unknown

1115
00:41:08,880 --> 00:41:10,720
also the documentation on internet on

1116
00:41:10,720 --> 00:41:12,880
these api calls were more or less

1117
00:41:12,880 --> 00:41:14,400
useless

1118
00:41:14,400 --> 00:41:16,560
but what actually in this case the

1119
00:41:16,560 --> 00:41:18,880
emulator was looking for was the

1120
00:41:18,880 --> 00:41:21,440
definition of the api so i starting to

1121
00:41:21,440 --> 00:41:24,640
add the api in speakeasy

1122
00:41:24,640 --> 00:41:28,000
just returning a random value zero one

1123
00:41:28,000 --> 00:41:29,839
the only important things here is the

1124
00:41:29,839 --> 00:41:31,920
numbers of parameters this is something

1125
00:41:31,920 --> 00:41:33,599
that

1126
00:41:33,599 --> 00:41:35,440
it's required because that he needs to

1127
00:41:35,440 --> 00:41:37,599
clean up the stock in the proper way so

1128
00:41:37,599 --> 00:41:39,200
if you define the random number form

1129
00:41:39,200 --> 00:41:41,119
it's a new returner

1130
00:41:41,119 --> 00:41:42,640
kind of uh

1131
00:41:42,640 --> 00:41:45,119
random value and you try sometimes you

1132
00:41:45,119 --> 00:41:48,000
can get the things working and your

1133
00:41:48,000 --> 00:41:50,160
emulation complete

1134
00:41:50,160 --> 00:41:52,240
this is where why i was saying before

1135
00:41:52,240 --> 00:41:54,240
sometimes the emulator itself needs some

1136
00:41:54,240 --> 00:41:55,119
help

1137
00:41:55,119 --> 00:41:57,440
and this is how you can do it sometimes

1138
00:41:57,440 --> 00:42:00,400
it requires a complete api

1139
00:42:00,400 --> 00:42:01,359
build

1140
00:42:01,359 --> 00:42:03,599
uh or or

1141
00:42:03,599 --> 00:42:05,680
development in this case when i did it

1142
00:42:05,680 --> 00:42:08,240
for example i did some of them i pushed

1143
00:42:08,240 --> 00:42:11,440
them on the mandiant speakeasy

1144
00:42:11,440 --> 00:42:13,760
repository so um

1145
00:42:13,760 --> 00:42:16,000
i think that

1146
00:42:16,000 --> 00:42:18,240
i was

1147
00:42:18,240 --> 00:42:19,599
okay i'm

1148
00:42:19,599 --> 00:42:23,040
i'm the end next steps

1149
00:42:23,920 --> 00:42:26,880
it needs a lot of things to be done

1150
00:42:26,880 --> 00:42:28,240
improve emulation stability improve

1151
00:42:28,240 --> 00:42:29,680
performance is improvement debug

1152
00:42:29,680 --> 00:42:30,800
coverage

1153
00:42:30,800 --> 00:42:32,640
we have a lot of things to add we are at

1154
00:42:32,640 --> 00:42:35,680
version 0.4 right now it works all what

1155
00:42:35,680 --> 00:42:38,000
i showed today it works

1156
00:42:38,000 --> 00:42:38,880
but

1157
00:42:38,880 --> 00:42:40,720
it probably needs a lot of other things

1158
00:42:40,720 --> 00:42:41,920
to be added

1159
00:42:41,920 --> 00:42:44,560
i encourage you to go on github clone it

1160
00:42:44,560 --> 00:42:47,680
open issues try to get in touch with me

1161
00:42:47,680 --> 00:42:50,319
if you find it useful i would be more

1162
00:42:50,319 --> 00:42:53,440
than happy to work with you on that

1163
00:42:53,440 --> 00:42:54,640
and so

1164
00:42:54,640 --> 00:42:56,839
please do it

1165
00:42:56,839 --> 00:43:00,480
uh i would like to give the credits to

1166
00:43:00,480 --> 00:43:02,960
all the things i used uh because it's

1167
00:43:02,960 --> 00:43:06,160
quite important from my point of view

1168
00:43:06,160 --> 00:43:08,000
so unicorns pick easy are the two

1169
00:43:08,000 --> 00:43:10,720
pillars cmd2 sent in one parser or other

1170
00:43:10,720 --> 00:43:12,400
two important tools are used

1171
00:43:12,400 --> 00:43:15,440
then donut pizza and sgn are other tools

1172
00:43:15,440 --> 00:43:17,599
i'm trying to emulate which are very

1173
00:43:17,599 --> 00:43:19,760
interesting and also our traffic

1174
00:43:19,760 --> 00:43:22,640
analysis site for providing the samples

1175
00:43:22,640 --> 00:43:24,400
so thanks to everyone thanks for

1176
00:43:24,400 --> 00:43:27,280
everyone working on open source software

1177
00:43:27,280 --> 00:43:29,520
thanks to you for contributing

1178
00:43:29,520 --> 00:43:31,040
and for

1179
00:43:31,040 --> 00:43:33,440
being here today with me hope it was

1180
00:43:33,440 --> 00:43:34,640
interesting

1181
00:43:34,640 --> 00:43:36,079
and okay

1182
00:43:36,079 --> 00:43:40,040
if you have any questions here

1183
00:43:45,280 --> 00:43:45,780
thank you

1184
00:43:45,780 --> 00:43:47,839
[Music]

1185
00:43:47,839 --> 00:43:49,920
as everyone

1186
00:43:49,920 --> 00:43:51,200
a question

1187
00:43:51,200 --> 00:43:54,200
wait

1188
00:44:02,800 --> 00:44:05,359
who was it

1189
00:44:06,640 --> 00:44:09,839
no okay

1190
00:44:10,240 --> 00:44:13,720
anyone else

1191
00:44:17,810 --> 00:44:20,860
[Music]

1192
00:44:30,160 --> 00:44:32,560
hi thanks for the presentation

1193
00:44:32,560 --> 00:44:35,200
um a small bit of a stupid question

1194
00:44:35,200 --> 00:44:38,880
probably for you speak a bit louder um

1195
00:44:38,880 --> 00:44:41,119
probably a stupid question

1196
00:44:41,119 --> 00:44:42,480
when

1197
00:44:42,480 --> 00:44:44,480
in the options we could see that you can

1198
00:44:44,480 --> 00:44:47,440
provide a pcap file yep um when you do

1199
00:44:47,440 --> 00:44:49,599
the analysis for the

1200
00:44:49,599 --> 00:44:52,640
for the second stager um

1201
00:44:52,640 --> 00:44:55,280
because you're emulating the the the

1202
00:44:55,280 --> 00:44:57,280
the payload can't you just do a pickup

1203
00:44:57,280 --> 00:44:59,280
in the same time

1204
00:44:59,280 --> 00:45:01,760
is there a technical reason

1205
00:45:01,760 --> 00:45:04,319
behind no it was actually not very no

1206
00:45:04,319 --> 00:45:05,599
it's not a stupid question it's a good

1207
00:45:05,599 --> 00:45:07,359
one no there are

1208
00:45:07,359 --> 00:45:09,920
the reason is that uh since it's uh

1209
00:45:09,920 --> 00:45:13,040
built to be run also without the pickup

1210
00:45:13,040 --> 00:45:15,119
it actually expect to have the payloads

1211
00:45:15,119 --> 00:45:16,960
outside of it but actually it's a good

1212
00:45:16,960 --> 00:45:20,160
point that could be uh

1213
00:45:20,160 --> 00:45:21,760
a good announcement

1214
00:45:21,760 --> 00:45:24,160
to being able to extract the the the

1215
00:45:24,160 --> 00:45:26,560
banner itself from out from the

1216
00:45:26,560 --> 00:45:28,079
the pickup the period of fight it's a

1217
00:45:28,079 --> 00:45:29,440
good idea

1218
00:45:29,440 --> 00:45:32,880
definitely thank you

1219
00:45:32,880 --> 00:45:34,670
anyone else

1220
00:45:34,670 --> 00:45:37,200
[Music]

1221
00:45:37,200 --> 00:45:39,599
if no we can thanks our speaker thank

1222
00:45:39,599 --> 00:45:44,440
you thanks to you thank you again

