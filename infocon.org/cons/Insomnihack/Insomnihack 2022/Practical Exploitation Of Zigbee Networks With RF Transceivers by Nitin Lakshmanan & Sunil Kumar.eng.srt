1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:14,400 --> 00:00:16,880
good evening everyone uh today our topic

3
00:00:16,880 --> 00:00:19,600
is uh practical exploitations on zigbee

4
00:00:19,600 --> 00:00:21,039
class networks

5
00:00:21,039 --> 00:00:23,119
the agenda is first we will understand

6
00:00:23,119 --> 00:00:25,039
what is iot ecosystem

7
00:00:25,039 --> 00:00:26,880
then we

8
00:00:26,880 --> 00:00:28,480
then we talk about building blocks of

9
00:00:28,480 --> 00:00:32,000
iot ecosystem in particular we we have

10
00:00:32,000 --> 00:00:34,160
chosen we have selected communication

11
00:00:34,160 --> 00:00:36,399
protocols and specifically zigbee style

12
00:00:36,399 --> 00:00:38,800
network

13
00:00:39,120 --> 00:00:41,040
today we have some cool demos on how to

14
00:00:41,040 --> 00:00:43,120
sniff and inject packets in the zigbee

15
00:00:43,120 --> 00:00:45,520
network we have

16
00:00:45,520 --> 00:00:47,600
devices called as harzi usb stick we'll

17
00:00:47,600 --> 00:00:48,960
be using this to

18
00:00:48,960 --> 00:00:51,600
inject and sniff the packets

19
00:00:51,600 --> 00:00:53,360
at last we conclude our presentation

20
00:00:53,360 --> 00:00:55,360
with the sdlc that is security

21
00:00:55,360 --> 00:00:59,840
development lifecycle for iot ecosystems

22
00:01:00,079 --> 00:01:01,520
regarding us

23
00:01:01,520 --> 00:01:03,760
my name is sunil i am principal security

24
00:01:03,760 --> 00:01:05,760
analyst in deep armor he is nitin

25
00:01:05,760 --> 00:01:07,439
lakshmanan he is also a principal

26
00:01:07,439 --> 00:01:09,840
security analyst in deep armor

27
00:01:09,840 --> 00:01:12,000
regarding deep armor we we are a

28
00:01:12,000 --> 00:01:14,320
security firm where we do

29
00:01:14,320 --> 00:01:16,159
vulnerability testing penetration

30
00:01:16,159 --> 00:01:17,600
testing for the

31
00:01:17,600 --> 00:01:19,600
cloud mobile applications and iot

32
00:01:19,600 --> 00:01:20,640
products

33
00:01:20,640 --> 00:01:23,680
apart from this we also provide sdlc and

34
00:01:23,680 --> 00:01:24,960
cloud trainings for various

35
00:01:24,960 --> 00:01:27,759
organizations

36
00:01:27,759 --> 00:01:29,200
let's jump into

37
00:01:29,200 --> 00:01:31,040
technical sections now

38
00:01:31,040 --> 00:01:33,520
this is how a iot ecosystem looks like

39
00:01:33,520 --> 00:01:34,640
in general

40
00:01:34,640 --> 00:01:37,200
it mainly consists of four components

41
00:01:37,200 --> 00:01:39,920
first is cloud second is mobile third is

42
00:01:39,920 --> 00:01:41,759
hardware devices and mainly the

43
00:01:41,759 --> 00:01:43,680
important one the fourth one is

44
00:01:43,680 --> 00:01:46,000
communication protocols

45
00:01:46,000 --> 00:01:48,159
let's take an example of home automation

46
00:01:48,159 --> 00:01:49,920
system

47
00:01:49,920 --> 00:01:51,920
in the home automation system we'll be

48
00:01:51,920 --> 00:01:54,479
having a nodes which collects the sensor

49
00:01:54,479 --> 00:01:57,119
values like temperature security alarm

50
00:01:57,119 --> 00:01:58,479
and more

51
00:01:58,479 --> 00:02:00,560
at regular intervals these nodes will

52
00:02:00,560 --> 00:02:02,880
send the information to the gateway that

53
00:02:02,880 --> 00:02:05,200
is deployed in the house

54
00:02:05,200 --> 00:02:06,399
it will be using the lightweight

55
00:02:06,399 --> 00:02:11,440
protocols like zigbee z-wave rf signals

56
00:02:11,440 --> 00:02:13,680
once the data is received by the gateway

57
00:02:13,680 --> 00:02:15,360
the gateway will be sending information

58
00:02:15,360 --> 00:02:17,200
to the cloud

59
00:02:17,200 --> 00:02:20,000
through the http protocols

60
00:02:20,000 --> 00:02:22,160
cloud which has the larger competency

61
00:02:22,160 --> 00:02:23,920
power it will store all the sensor

62
00:02:23,920 --> 00:02:26,000
values and it

63
00:02:26,000 --> 00:02:28,160
and it even manages the user management

64
00:02:28,160 --> 00:02:30,319
details and sometimes multi-tenancy

65
00:02:30,319 --> 00:02:32,080
architecture as well

66
00:02:32,080 --> 00:02:33,840
there are mainly two types of cloud one

67
00:02:33,840 --> 00:02:36,000
is private cloud and one is the public

68
00:02:36,000 --> 00:02:38,080
one public one we already know that

69
00:02:38,080 --> 00:02:39,920
there are few popular

70
00:02:39,920 --> 00:02:43,760
providers like aws gcp and azure

71
00:02:43,760 --> 00:02:45,440
next component is the mobile component

72
00:02:45,440 --> 00:02:47,120
where the user can login into the

73
00:02:47,120 --> 00:02:49,440
application and you can see the

74
00:02:49,440 --> 00:02:52,000
home status at any given point

75
00:02:52,000 --> 00:02:54,000
this can be also used to configure the

76
00:02:54,000 --> 00:02:56,560
gateways like if there is a temperature

77
00:02:56,560 --> 00:02:58,400
more than 25 degrees there should be an

78
00:02:58,400 --> 00:03:00,000
alarm so that the user should come to

79
00:03:00,000 --> 00:03:02,400
know so the mobile application can be

80
00:03:02,400 --> 00:03:04,159
used to configure the gateway through

81
00:03:04,159 --> 00:03:08,159
the protocols like bluetooth ble

82
00:03:09,200 --> 00:03:10,400
there are

83
00:03:10,400 --> 00:03:13,200
different types of iot systems a few of

84
00:03:13,200 --> 00:03:15,440
them are medical healthcare iot consumer

85
00:03:15,440 --> 00:03:18,080
iot industrial iot and home automation

86
00:03:18,080 --> 00:03:19,760
iot

87
00:03:19,760 --> 00:03:21,840
today we are focusing on industrial iot

88
00:03:21,840 --> 00:03:24,560
because zigbee class protocols are

89
00:03:24,560 --> 00:03:27,920
mainly used in the industrial iot

90
00:03:27,920 --> 00:03:30,080
this is a bigger iot space where we'll

91
00:03:30,080 --> 00:03:32,720
have a multiple gateway devices nodes in

92
00:03:32,720 --> 00:03:34,720
the in the environments like asset

93
00:03:34,720 --> 00:03:37,519
tracking agriculture smart metering and

94
00:03:37,519 --> 00:03:38,799
more

95
00:03:38,799 --> 00:03:40,560
iot plays a

96
00:03:40,560 --> 00:03:42,239
very important role in the industrial

97
00:03:42,239 --> 00:03:45,040
area because it will be used to identify

98
00:03:45,040 --> 00:03:47,120
inefficiency and defective products in

99
00:03:47,120 --> 00:03:48,959
the early stage itself

100
00:03:48,959 --> 00:03:51,120
so by knowing these things manufacturer

101
00:03:51,120 --> 00:03:54,319
can reduce their cost and time

102
00:03:54,319 --> 00:03:56,720
and time

103
00:03:56,720 --> 00:03:58,400
there are few challenges in industrial

104
00:03:58,400 --> 00:03:59,680
iot

105
00:03:59,680 --> 00:04:02,480
such as like these devices sometimes may

106
00:04:02,480 --> 00:04:04,720
need to be deployed in a remote area

107
00:04:04,720 --> 00:04:06,799
where access to these devices will be

108
00:04:06,799 --> 00:04:09,439
very less so the deployment should be

109
00:04:09,439 --> 00:04:11,280
done in one shot and it should be

110
00:04:11,280 --> 00:04:12,560
perfect

111
00:04:12,560 --> 00:04:15,040
and other few challenges are like these

112
00:04:15,040 --> 00:04:18,238
devices will be of very less memory and

113
00:04:18,238 --> 00:04:20,160
it will be having a less memory and

114
00:04:20,160 --> 00:04:22,320
implementing security features like

115
00:04:22,320 --> 00:04:24,720
public key crypto secure boot and it

116
00:04:24,720 --> 00:04:25,600
will be

117
00:04:25,600 --> 00:04:27,199
it will be quite difficult in

118
00:04:27,199 --> 00:04:30,639
implementing these security features

119
00:04:31,759 --> 00:04:35,120
so we know uh this is the iot ecosystem

120
00:04:35,120 --> 00:04:36,720
but where a problem can exist in the

121
00:04:36,720 --> 00:04:37,600
system

122
00:04:37,600 --> 00:04:39,840
it can be anywhere in any component it

123
00:04:39,840 --> 00:04:41,840
can be in the cloud through the apms

124
00:04:41,840 --> 00:04:44,560
security or cloud misconfigurations it

125
00:04:44,560 --> 00:04:45,840
can be in the mobile through the

126
00:04:45,840 --> 00:04:48,000
insecure storage or it can be in the

127
00:04:48,000 --> 00:04:50,240
devices because of weak secure boot

128
00:04:50,240 --> 00:04:52,400
implementation or the

129
00:04:52,400 --> 00:04:54,880
former over-the-air implementation

130
00:04:54,880 --> 00:04:57,360
and at last protocol it can even exist

131
00:04:57,360 --> 00:04:59,600
in the protocol because we have seen

132
00:04:59,600 --> 00:05:02,639
multiple cases where manufacturers fail

133
00:05:02,639 --> 00:05:04,560
to implement good security measurements

134
00:05:04,560 --> 00:05:06,080
for their protocols

135
00:05:06,080 --> 00:05:07,840
even though the protocols comes with few

136
00:05:07,840 --> 00:05:10,160
security measurements the manufacturers

137
00:05:10,160 --> 00:05:12,240
will not implement those things because

138
00:05:12,240 --> 00:05:16,720
of the constraints in the iot devices

139
00:05:17,120 --> 00:05:18,240
so let's talk more about the

140
00:05:18,240 --> 00:05:20,080
communication channel and the issues

141
00:05:20,080 --> 00:05:21,759
there

142
00:05:21,759 --> 00:05:24,000
this is the blueprint of how

143
00:05:24,000 --> 00:05:26,000
communication happens in the

144
00:05:26,000 --> 00:05:28,320
iot product you can see there there are

145
00:05:28,320 --> 00:05:30,240
multiple protocols involved in the

146
00:05:30,240 --> 00:05:32,960
components like it can be http protocol

147
00:05:32,960 --> 00:05:34,720
between cloud and gateway cloud and

148
00:05:34,720 --> 00:05:37,199
mobile or it can be bluetooth ble

149
00:05:37,199 --> 00:05:39,440
between the mobile and the gateway

150
00:05:39,440 --> 00:05:41,520
and then comes the iot protocols

151
00:05:41,520 --> 00:05:43,600
lightweight protocols or low power

152
00:05:43,600 --> 00:05:45,600
consumption protocol

153
00:05:45,600 --> 00:05:47,520
usually this will be happening between

154
00:05:47,520 --> 00:05:49,759
the iot devices now we we know that

155
00:05:49,759 --> 00:05:51,840
there are devices like gateway and the

156
00:05:51,840 --> 00:05:54,560
node so between these components between

157
00:05:54,560 --> 00:05:56,560
these devices the lightweight protocols

158
00:05:56,560 --> 00:05:58,720
will be used

159
00:05:58,720 --> 00:06:00,000
selection of

160
00:06:00,000 --> 00:06:02,560
iot protocol plays a vital role in the

161
00:06:02,560 --> 00:06:04,560
product because

162
00:06:04,560 --> 00:06:06,720
there are challenges like flexibility of

163
00:06:06,720 --> 00:06:08,400
the protocol and the security

164
00:06:08,400 --> 00:06:10,400
measurements in the protocol so the

165
00:06:10,400 --> 00:06:12,800
design the designer or the manufacturer

166
00:06:12,800 --> 00:06:15,199
should be very careful in selecting iot

167
00:06:15,199 --> 00:06:17,840
protocols for the product

168
00:06:17,840 --> 00:06:20,160
when you just search for iot protocols

169
00:06:20,160 --> 00:06:22,319
in the google you will be ending up with

170
00:06:22,319 --> 00:06:24,319
some 20 plus protocols

171
00:06:24,319 --> 00:06:26,880
so choosing the proper protocol will be

172
00:06:26,880 --> 00:06:27,520
a

173
00:06:27,520 --> 00:06:30,080
difficult task for manufacturer

174
00:06:30,080 --> 00:06:34,639
there are protocols like lte mqtt coap

175
00:06:34,639 --> 00:06:37,360
zigbee ble out of all these

176
00:06:37,360 --> 00:06:39,360
protocols today we are mainly focusing

177
00:06:39,360 --> 00:06:40,720
on zigbee

178
00:06:40,720 --> 00:06:42,800
so before understanding the zigbee

179
00:06:42,800 --> 00:06:43,919
protocol

180
00:06:43,919 --> 00:06:47,199
we need to understand 802.15.4

181
00:06:47,199 --> 00:06:49,440
ieee standard because zigbee is an

182
00:06:49,440 --> 00:06:53,440
extension of this particular standard

183
00:06:53,440 --> 00:06:55,199
this is a

184
00:06:55,199 --> 00:06:57,280
ieee standard for mainly low rate

185
00:06:57,280 --> 00:06:59,840
wireless personal area networks because

186
00:06:59,840 --> 00:07:01,039
the

187
00:07:01,039 --> 00:07:03,039
the power used or the energy used in

188
00:07:03,039 --> 00:07:04,319
sending the

189
00:07:04,319 --> 00:07:06,120
data in the ieee

190
00:07:06,120 --> 00:07:09,039
802.15.4 standard is very less because

191
00:07:09,039 --> 00:07:11,280
the duty cycle to transmit the packets

192
00:07:11,280 --> 00:07:12,639
will be very less

193
00:07:12,639 --> 00:07:14,960
and it mainly modifies the physical and

194
00:07:14,960 --> 00:07:17,120
media access control layer in the ios

195
00:07:17,120 --> 00:07:18,639
iso model

196
00:07:18,639 --> 00:07:21,039
physical layer it defines the frequency

197
00:07:21,039 --> 00:07:22,720
in what frequency the protocol should

198
00:07:22,720 --> 00:07:25,199
work whereas in the mac layer it defines

199
00:07:25,199 --> 00:07:27,440
the mesh mesh architecture and the

200
00:07:27,440 --> 00:07:29,680
message format

201
00:07:29,680 --> 00:07:32,240
as i early mentioned earlier mentioned

202
00:07:32,240 --> 00:07:34,080
the zigbee is an extension of this

203
00:07:34,080 --> 00:07:37,280
standard and it mainly operates at the

204
00:07:37,280 --> 00:07:40,720
layers above the mac layer it improves

205
00:07:40,720 --> 00:07:43,120
the security and the mesh topology so

206
00:07:43,120 --> 00:07:45,759
that it can be used for any

207
00:07:45,759 --> 00:07:48,800
of any product

208
00:07:50,319 --> 00:07:52,000
yeah

209
00:07:52,000 --> 00:07:54,080
zigbee is widely used in the

210
00:07:54,080 --> 00:07:55,919
industrial iot apart from that it is

211
00:07:55,919 --> 00:07:58,479
also used in smart energy medical iot

212
00:07:58,479 --> 00:07:59,680
sector as well

213
00:07:59,680 --> 00:08:02,000
it operates at 2.4 gigahertz and sub

214
00:08:02,000 --> 00:08:03,759
gigahertz and

215
00:08:03,759 --> 00:08:06,080
as i mentioned earlier it consumes very

216
00:08:06,080 --> 00:08:08,639
less energy and manufacturers need not

217
00:08:08,639 --> 00:08:10,879
worry about the batteries because the

218
00:08:10,879 --> 00:08:12,560
battery will run for

219
00:08:12,560 --> 00:08:14,240
years and years

220
00:08:14,240 --> 00:08:15,919
and it is less expensive when compared

221
00:08:15,919 --> 00:08:17,360
with the bluetooth

222
00:08:17,360 --> 00:08:19,039
and it can be operating between the 10

223
00:08:19,039 --> 00:08:21,919
to 100 meters based on the product

224
00:08:21,919 --> 00:08:24,479
requirement

225
00:08:25,199 --> 00:08:27,039
zigbee comes with few security

226
00:08:27,039 --> 00:08:28,960
measurements because uh the

227
00:08:28,960 --> 00:08:30,560
communication between the devices should

228
00:08:30,560 --> 00:08:32,880
be encrypted there are mainly three keys

229
00:08:32,880 --> 00:08:35,279
involved in zigbee protocol the first

230
00:08:35,279 --> 00:08:37,120
one is network key where the

231
00:08:37,120 --> 00:08:39,519
communication happens with the

232
00:08:39,519 --> 00:08:41,360
with this key because whenever the node

233
00:08:41,360 --> 00:08:42,880
sends messages to the gateway or the

234
00:08:42,880 --> 00:08:44,320
gateway sends to the

235
00:08:44,320 --> 00:08:46,080
sends message to the node it will be

236
00:08:46,080 --> 00:08:48,080
encrypted using the network key

237
00:08:48,080 --> 00:08:50,560
and when the node joins the network it

238
00:08:50,560 --> 00:08:52,560
should it should receive a network key

239
00:08:52,560 --> 00:08:55,040
and in the encrypted format that will be

240
00:08:55,040 --> 00:08:56,880
done using the trust center linkey when

241
00:08:56,880 --> 00:08:59,040
our node joins our encrypted network key

242
00:08:59,040 --> 00:09:00,560
will be sent to the

243
00:09:00,560 --> 00:09:02,000
node

244
00:09:02,000 --> 00:09:04,399
last one is a link key it is used for

245
00:09:04,399 --> 00:09:06,560
encrypting the unicast communication if

246
00:09:06,560 --> 00:09:08,240
a particular node wants to talk with the

247
00:09:08,240 --> 00:09:09,200
node

248
00:09:09,200 --> 00:09:10,720
with the device uh sorry with the

249
00:09:10,720 --> 00:09:12,640
gateway at that time link key will be

250
00:09:12,640 --> 00:09:14,880
used

251
00:09:15,839 --> 00:09:17,760
there are mainly three pages in the

252
00:09:17,760 --> 00:09:20,160
zigbee standards one is before zigbee

253
00:09:20,160 --> 00:09:22,800
pro second one is zigbee pro and zigbee

254
00:09:22,800 --> 00:09:25,920
2.0 or 3.0

255
00:09:25,920 --> 00:09:27,760
with each page the security has been

256
00:09:27,760 --> 00:09:30,160
drastically increased increase

257
00:09:30,160 --> 00:09:32,160
like for example in before zigbee pro

258
00:09:32,160 --> 00:09:34,959
there was no trust center link key and

259
00:09:34,959 --> 00:09:37,200
as trust center linky was not there the

260
00:09:37,200 --> 00:09:39,519
network key was transmitted in a plane

261
00:09:39,519 --> 00:09:41,839
text way so anybody in the vicinity of

262
00:09:41,839 --> 00:09:45,200
the network can sniff the traffic

263
00:09:45,200 --> 00:09:46,399
so the

264
00:09:46,399 --> 00:09:48,560
with the zigbee pro and zigbee 2.0 the

265
00:09:48,560 --> 00:09:49,920
trust center link key has been

266
00:09:49,920 --> 00:09:51,680
introduced and the network key was

267
00:09:51,680 --> 00:09:54,560
encrypted and sent to the node

268
00:09:54,560 --> 00:09:56,080
there was no replay protection in the

269
00:09:56,080 --> 00:09:58,080
zigbee before zigbee pro but it was

270
00:09:58,080 --> 00:10:01,120
implemented in the next versions

271
00:10:01,120 --> 00:10:02,640
similarly there was no integrity

272
00:10:02,640 --> 00:10:04,959
protection in the before zigbee pro but

273
00:10:04,959 --> 00:10:06,480
in the next phases it has been

274
00:10:06,480 --> 00:10:09,600
implemented by uh by adding 128

275
00:10:09,600 --> 00:10:14,079
messaging indication code in the packets

276
00:10:15,279 --> 00:10:16,800
let's jump into the

277
00:10:16,800 --> 00:10:18,320
attacking

278
00:10:18,320 --> 00:10:20,720
scenarios and the demos before that we

279
00:10:20,720 --> 00:10:21,920
will be

280
00:10:21,920 --> 00:10:23,920
giving the overview of how the system

281
00:10:23,920 --> 00:10:24,959
looks like

282
00:10:24,959 --> 00:10:27,360
so today we are using two machines and

283
00:10:27,360 --> 00:10:31,120
will be using the hardy usb sticks to

284
00:10:31,120 --> 00:10:32,560
generate the packets

285
00:10:32,560 --> 00:10:34,640
zigbee like packets

286
00:10:34,640 --> 00:10:36,480
it is just a simulator today we are

287
00:10:36,480 --> 00:10:38,880
showing and not the real products here

288
00:10:38,880 --> 00:10:40,399
and we will be sniffing will be

289
00:10:40,399 --> 00:10:42,800
injecting the packets and we are using a

290
00:10:42,800 --> 00:10:44,959
python module called ascapi to modify

291
00:10:44,959 --> 00:10:46,800
the packets

292
00:10:46,800 --> 00:10:48,399
and at last we will be

293
00:10:48,399 --> 00:10:50,160
concluding our presentation on how to

294
00:10:50,160 --> 00:10:51,920
provide security for these kind of

295
00:10:51,920 --> 00:10:54,399
networks

296
00:10:55,760 --> 00:10:57,760
so first let's understand the packet

297
00:10:57,760 --> 00:10:59,680
structure how a zigbee

298
00:10:59,680 --> 00:11:00,640
class

299
00:11:00,640 --> 00:11:01,360
like

300
00:11:01,360 --> 00:11:03,279
packets will be there are multiple

301
00:11:03,279 --> 00:11:04,880
headers the first one is destination

302
00:11:04,880 --> 00:11:07,120
adder address which means that the

303
00:11:07,120 --> 00:11:08,880
packet is generating from this

304
00:11:08,880 --> 00:11:11,440
particular machine and

305
00:11:11,440 --> 00:11:13,839
this is sorry destination is where the

306
00:11:13,839 --> 00:11:16,880
packet is uh going whereas in the source

307
00:11:16,880 --> 00:11:18,720
it indicates that where the packet is

308
00:11:18,720 --> 00:11:21,040
get getting generated from

309
00:11:21,040 --> 00:11:23,240
the sequence number is um

310
00:11:23,240 --> 00:11:25,680
identification number it indeed

311
00:11:25,680 --> 00:11:29,839
it is used to identify the packet number

312
00:11:30,000 --> 00:11:32,079
fourth one is personal area network id

313
00:11:32,079 --> 00:11:34,000
if a group of or a collection of nodes

314
00:11:34,000 --> 00:11:35,839
talking to one particular gateway at

315
00:11:35,839 --> 00:11:37,600
that time a particular pan id will be

316
00:11:37,600 --> 00:11:40,320
generated for that particular network

317
00:11:40,320 --> 00:11:42,320
and the fifth one is payload which is

318
00:11:42,320 --> 00:11:44,240
important here uh today we are using

319
00:11:44,240 --> 00:11:46,640
only two message formats for for our

320
00:11:46,640 --> 00:11:49,120
demo purpose the first one is da where

321
00:11:49,120 --> 00:11:51,519
the actual data will be sending and the

322
00:11:51,519 --> 00:11:54,160
dd pack the second one is dd packet it

323
00:11:54,160 --> 00:11:57,360
means that the node has received the da

324
00:11:57,360 --> 00:11:59,440
packet with the data and node will send

325
00:11:59,440 --> 00:12:01,360
a dd packet as an acknowledgement

326
00:12:01,360 --> 00:12:02,959
message

327
00:12:02,959 --> 00:12:04,639
last one is uh

328
00:12:04,639 --> 00:12:07,680
uh frame checks sequence it means zigbee

329
00:12:07,680 --> 00:12:10,079
has come with uh of checksum

330
00:12:10,079 --> 00:12:12,000
implementation and it will add a two

331
00:12:12,000 --> 00:12:14,079
bytes uh checksum at the end of the

332
00:12:14,079 --> 00:12:16,479
packet

333
00:12:18,000 --> 00:12:19,920
i will be handing out handing it over to

334
00:12:19,920 --> 00:12:22,319
nitin

335
00:12:23,040 --> 00:12:25,120
good evening guys

336
00:12:25,120 --> 00:12:26,800
so

337
00:12:26,800 --> 00:12:29,440
this is how the wireless sensor network

338
00:12:29,440 --> 00:12:32,240
looks like for our demo today so we have

339
00:12:32,240 --> 00:12:35,440
a gateway a node uh the gateway and node

340
00:12:35,440 --> 00:12:36,800
are going to communicate between each

341
00:12:36,800 --> 00:12:37,600
other

342
00:12:37,600 --> 00:12:39,519
so the gateway will be sending

343
00:12:39,519 --> 00:12:42,079
da packets which are custom packets

344
00:12:42,079 --> 00:12:44,000
which will have set of instructions for

345
00:12:44,000 --> 00:12:45,680
the node to

346
00:12:45,680 --> 00:12:47,680
process it so the node will receive this

347
00:12:47,680 --> 00:12:48,720
packet

348
00:12:48,720 --> 00:12:51,519
process it and send back a reply like an

349
00:12:51,519 --> 00:12:53,200
acknowledgement in the form of dd

350
00:12:53,200 --> 00:12:54,320
packets

351
00:12:54,320 --> 00:12:56,880
so there is also a third element in this

352
00:12:56,880 --> 00:12:59,440
scenario that is the attacker

353
00:12:59,440 --> 00:13:01,680
who is going to inject and sniff into

354
00:13:01,680 --> 00:13:03,120
this

355
00:13:03,120 --> 00:13:05,360
network he will be in the

356
00:13:05,360 --> 00:13:07,200
vicinity of the gateway and the node

357
00:13:07,200 --> 00:13:11,600
module so let's see what can be done

358
00:13:12,959 --> 00:13:13,760
so

359
00:13:13,760 --> 00:13:15,760
for today's demo we are going to

360
00:13:15,760 --> 00:13:18,720
concentrate on sequence number and the

361
00:13:18,720 --> 00:13:21,440
payload as when an attacker

362
00:13:21,440 --> 00:13:24,320
manipulates the sequence number uh he it

363
00:13:24,320 --> 00:13:26,160
will be possible for him to

364
00:13:26,160 --> 00:13:28,800
create replay attacks and

365
00:13:28,800 --> 00:13:31,279
when the payload is modified it can

366
00:13:31,279 --> 00:13:33,200
manipulate the entire network

367
00:13:33,200 --> 00:13:35,040
for example if you take a vaccine

368
00:13:35,040 --> 00:13:36,480
transport mechanism where the

369
00:13:36,480 --> 00:13:38,320
temperature of the vaccine and the

370
00:13:38,320 --> 00:13:40,240
container should be maintained

371
00:13:40,240 --> 00:13:41,760
an attacker injects a different

372
00:13:41,760 --> 00:13:44,320
temperature so that the vaccines become

373
00:13:44,320 --> 00:13:46,560
lethal this is what we are trying to do

374
00:13:46,560 --> 00:13:48,800
today

375
00:13:48,800 --> 00:13:50,480
so for this

376
00:13:50,480 --> 00:13:52,720
demo we are going to use

377
00:13:52,720 --> 00:13:55,519
a three rz usb sticks

378
00:13:55,519 --> 00:13:57,519
developed by microchip

379
00:13:57,519 --> 00:14:00,399
we will have two as victims that is the

380
00:14:00,399 --> 00:14:02,639
gateway and the node and

381
00:14:02,639 --> 00:14:04,000
a single

382
00:14:04,000 --> 00:14:07,519
rz usb stick for as an attacker

383
00:14:07,519 --> 00:14:10,000
so we use killer b framework which is

384
00:14:10,000 --> 00:14:12,720
developed by river loop security it is

385
00:14:12,720 --> 00:14:14,680
one of the

386
00:14:14,680 --> 00:14:16,880
a20802 dot

387
00:14:16,880 --> 00:14:19,120
exploiting an exploration tool

388
00:14:19,120 --> 00:14:22,399
and along with that we have 17 tools in

389
00:14:22,399 --> 00:14:24,399
killer b and that we are going to use

390
00:14:24,399 --> 00:14:27,199
zigbee wireshark and zigbee replay

391
00:14:27,199 --> 00:14:29,760
and we will be using scappy

392
00:14:29,760 --> 00:14:32,000
it's a packet a network packet

393
00:14:32,000 --> 00:14:34,560
creator manipulator everything

394
00:14:34,560 --> 00:14:36,880
so thanks to all the developers of this

395
00:14:36,880 --> 00:14:39,360
tools which was very helpful in

396
00:14:39,360 --> 00:14:41,440
developing this and studying about these

397
00:14:41,440 --> 00:14:44,440
protocols

398
00:14:45,199 --> 00:14:47,279
so this is how the setup looks like for

399
00:14:47,279 --> 00:14:49,920
today's demo so we are going to have one

400
00:14:49,920 --> 00:14:53,199
machine connected to two rz usb sticks

401
00:14:53,199 --> 00:14:55,440
so the first machine here will act as

402
00:14:55,440 --> 00:14:58,800
the victim that is the attacker and

403
00:14:58,800 --> 00:15:00,000
sorry

404
00:15:00,000 --> 00:15:02,560
gateway and node and the second machine

405
00:15:02,560 --> 00:15:04,720
which we have over here will act as an

406
00:15:04,720 --> 00:15:07,199
attacker

407
00:15:07,839 --> 00:15:09,760
so let's get into the first scenario

408
00:15:09,760 --> 00:15:12,320
where we inject packets and snip the

409
00:15:12,320 --> 00:15:14,720
packets

410
00:15:15,680 --> 00:15:18,880
so for today's demo this machine is

411
00:15:18,880 --> 00:15:21,279
going to act as gateway and

412
00:15:21,279 --> 00:15:23,839
this particular rz usb stick is going to

413
00:15:23,839 --> 00:15:27,519
be the gateway and one more rz is

414
00:15:27,519 --> 00:15:29,759
will act as a thermostat like it will

415
00:15:29,759 --> 00:15:30,800
receive

416
00:15:30,800 --> 00:15:32,720
temperature from the gateway and it will

417
00:15:32,720 --> 00:15:34,560
change the temperature of the

418
00:15:34,560 --> 00:15:36,639
environment to the mentioned

419
00:15:36,639 --> 00:15:38,880
temperature and it will send back a dd

420
00:15:38,880 --> 00:15:40,959
packet if it accepts

421
00:15:40,959 --> 00:15:44,399
so in this vicinity there is another

422
00:15:44,399 --> 00:15:47,120
rz usb stick which acts as an attacker

423
00:15:47,120 --> 00:15:49,519
he will try to sniff this traffic inject

424
00:15:49,519 --> 00:15:54,360
let's see what happens in the scenarios

425
00:15:57,520 --> 00:16:00,689
[Music]

426
00:16:05,360 --> 00:16:06,480
so we have

427
00:16:06,480 --> 00:16:09,120
so we have two windows here the left one

428
00:16:09,120 --> 00:16:10,880
is uh

429
00:16:10,880 --> 00:16:12,560
left one is gateway whereas the right

430
00:16:12,560 --> 00:16:13,759
one is the

431
00:16:13,759 --> 00:16:15,759
node

432
00:16:15,759 --> 00:16:16,720
so

433
00:16:16,720 --> 00:16:19,360
as we have connected two rg usb to the

434
00:16:19,360 --> 00:16:21,120
same machine there will be two ids for

435
00:16:21,120 --> 00:16:23,199
this rgb usb so

436
00:16:23,199 --> 00:16:25,920
to identify the are the ids there is a

437
00:16:25,920 --> 00:16:29,120
command called zbid

438
00:16:29,279 --> 00:16:30,959
when we when we enter this command we

439
00:16:30,959 --> 00:16:33,120
will be getting two ids displayed here

440
00:16:33,120 --> 00:16:35,519
you can see that the first id is 1 4 the

441
00:16:35,519 --> 00:16:37,920
second one is 1 5

442
00:16:37,920 --> 00:16:40,959
1 4 will be using it as gateway whereas

443
00:16:40,959 --> 00:16:44,639
1 5 will be using it as node

444
00:16:44,639 --> 00:16:46,000
so in the

445
00:16:46,000 --> 00:16:48,320
in the beginning or in the at any stage

446
00:16:48,320 --> 00:16:50,240
of the point the node will be always

447
00:16:50,240 --> 00:16:52,399
listening for the gateway packets so

448
00:16:52,399 --> 00:16:54,560
first we will start

449
00:16:54,560 --> 00:16:56,880
node to listen to the packets so for

450
00:16:56,880 --> 00:16:58,240
that

451
00:16:58,240 --> 00:16:59,920
killer b framework has provided a

452
00:16:59,920 --> 00:17:03,880
command called as zb wireshark

453
00:17:04,240 --> 00:17:06,959
so and one more thing is uh

454
00:17:06,959 --> 00:17:09,439
zigbee uh zigbee like protocols will be

455
00:17:09,439 --> 00:17:11,119
working at different channels we are

456
00:17:11,119 --> 00:17:13,039
selecting a channel 21 for our demo

457
00:17:13,039 --> 00:17:15,280
today

458
00:17:15,280 --> 00:17:18,079
as i earlier mentioned we are using one

459
00:17:18,079 --> 00:17:20,000
phi as the node so i need to provide the

460
00:17:20,000 --> 00:17:21,750
id id number here

461
00:17:21,750 --> 00:17:24,910
[Music]

462
00:17:25,039 --> 00:17:26,400
so when we

463
00:17:26,400 --> 00:17:29,039
when we enter the zb wireshark command a

464
00:17:29,039 --> 00:17:31,520
voice r terminal will be opening and

465
00:17:31,520 --> 00:17:33,600
here whenever there is a packet called

466
00:17:33,600 --> 00:17:36,000
zigbee packets it will be capturing it

467
00:17:36,000 --> 00:17:38,320
here

468
00:17:40,320 --> 00:17:42,559
so now node is listing for the traffic

469
00:17:42,559 --> 00:17:44,480
the gateway will be sending a da packet

470
00:17:44,480 --> 00:17:48,160
with the temperature value as 13.

471
00:17:49,840 --> 00:17:51,760
there is a command called zb replay it

472
00:17:51,760 --> 00:17:53,840
is used to send the packets in the in

473
00:17:53,840 --> 00:17:55,840
the zigbee network so we are using that

474
00:17:55,840 --> 00:17:58,160
command and we are sending a gateway

475
00:17:58,160 --> 00:18:01,840
packet with the temperature value

476
00:18:03,200 --> 00:18:05,280
we are using 1 4 as the gateway so i am

477
00:18:05,280 --> 00:18:08,480
prodding the id as 1 4 here

478
00:18:08,480 --> 00:18:10,720
in this at the same time the attacker is

479
00:18:10,720 --> 00:18:13,440
also listening in the network so we are

480
00:18:13,440 --> 00:18:15,600
starting the same zbrusher command in

481
00:18:15,600 --> 00:18:18,280
the other machine

482
00:18:18,280 --> 00:18:20,480
[Music]

483
00:18:20,480 --> 00:18:23,440
so by executing the command zb replay a

484
00:18:23,440 --> 00:18:25,679
packet has been transmitted here and we

485
00:18:25,679 --> 00:18:29,720
should be able to see it in the

486
00:18:32,160 --> 00:18:33,919
yeah now we have received

487
00:18:33,919 --> 00:18:37,440
a packet in the wireshark

488
00:18:40,880 --> 00:18:42,799
and you can see that the packet

489
00:18:42,799 --> 00:18:45,440
contains a value called as da0113

490
00:18:45,440 --> 00:18:50,039
it may indicate that this is a da packet

491
00:19:02,080 --> 00:19:04,400
so we are exporting this packet in a

492
00:19:04,400 --> 00:19:07,400
pcapp

493
00:19:21,200 --> 00:19:23,600
so now node has received the packet

494
00:19:23,600 --> 00:19:26,799
and we should see whether

495
00:19:32,240 --> 00:19:35,880
sorry give us a minute

496
00:19:35,960 --> 00:19:38,559
[Music]

497
00:19:38,559 --> 00:19:41,559
uh

498
00:19:58,720 --> 00:20:00,400
yeah now node has

499
00:20:00,400 --> 00:20:02,799
saved the packet and for processing the

500
00:20:02,799 --> 00:20:05,039
packet we have written some small python

501
00:20:05,039 --> 00:20:07,440
scripts here so by executing that python

502
00:20:07,440 --> 00:20:09,600
script this packet will be processed and

503
00:20:09,600 --> 00:20:11,600
if the packet is correct it will be

504
00:20:11,600 --> 00:20:12,880
updating the

505
00:20:12,880 --> 00:20:14,320
it will be updating the temperature to

506
00:20:14,320 --> 00:20:17,039
13 and it will send a dd acknowledgement

507
00:20:17,039 --> 00:20:20,039
message

508
00:20:24,559 --> 00:20:29,600
so the packet received is gw one

509
00:20:32,480 --> 00:20:34,159
and if the node the packet is correct it

510
00:20:34,159 --> 00:20:38,000
will send a dd acknowledgement message

511
00:20:40,799 --> 00:20:43,679
so by executing this python script

512
00:20:43,679 --> 00:20:45,679
you can see that the payload is da 0 and

513
00:20:45,679 --> 00:20:48,320
1 3 and the packet has been accepted

514
00:20:48,320 --> 00:20:51,280
here upon accepting the packet it is

515
00:20:51,280 --> 00:20:54,320
sending dd outbid messages

516
00:20:54,320 --> 00:20:56,559
so once this is done it means that that

517
00:20:56,559 --> 00:20:58,400
thermostat has set the temperature value

518
00:20:58,400 --> 00:21:01,360
to 13. so now we will be

519
00:21:01,360 --> 00:21:03,039
in the in the real time scenario the

520
00:21:03,039 --> 00:21:04,559
node will be continuously listening for

521
00:21:04,559 --> 00:21:07,120
the traffic so we'll be again

522
00:21:07,120 --> 00:21:10,810
entering the command called as zb washer

523
00:21:10,810 --> 00:21:12,720
[Music]

524
00:21:12,720 --> 00:21:14,320
so the attacker in the vicinity has

525
00:21:14,320 --> 00:21:16,159
captured the same packet and you will be

526
00:21:16,159 --> 00:21:17,919
showing how you can modify the packet

527
00:21:17,919 --> 00:21:20,919
here

528
00:21:45,840 --> 00:21:48,000
so i'm going to show you how to edit the

529
00:21:48,000 --> 00:21:49,919
packet using scappy so i'm i have

530
00:21:49,919 --> 00:21:51,840
captured the same packet which the

531
00:21:51,840 --> 00:21:54,400
gateway has sent

532
00:21:54,400 --> 00:21:55,840
there is a command in scrappy called

533
00:21:55,840 --> 00:21:58,540
read pcap

534
00:21:58,540 --> 00:22:04,779
[Music]

535
00:22:07,760 --> 00:22:08,880
recap

536
00:22:08,880 --> 00:22:10,880
so once we load we will be able to see

537
00:22:10,880 --> 00:22:16,000
that the pointer p now represents

538
00:22:16,159 --> 00:22:17,120
value

539
00:22:17,120 --> 00:22:19,840
so it is 13 here

540
00:22:19,840 --> 00:22:22,720
x d a 0 1 1 3 so now i am going to

541
00:22:22,720 --> 00:22:26,679
change this value to 14.

542
00:22:29,700 --> 00:22:32,789
[Music]

543
00:22:33,600 --> 00:22:35,360
and i am going to save this packet as an

544
00:22:35,360 --> 00:22:38,918
attacker p cap

545
00:22:39,830 --> 00:22:52,480
[Music]

546
00:22:52,480 --> 00:22:54,720
so now i am going to use the same zigbee

547
00:22:54,720 --> 00:22:58,320
replay tool to send a malicious packet

548
00:22:58,320 --> 00:23:00,159
into the channel

549
00:23:00,159 --> 00:23:03,159
21.

550
00:23:05,960 --> 00:23:18,720
[Music]

551
00:23:18,720 --> 00:23:20,799
so the packet has been transmitted let's

552
00:23:20,799 --> 00:23:22,799
see how the thermostat process this

553
00:23:22,799 --> 00:23:25,120
bracket

554
00:23:32,960 --> 00:23:35,760
yeah as node was listening for the

555
00:23:35,760 --> 00:23:38,000
gateway packets it has rece it has

556
00:23:38,000 --> 00:23:40,080
received one zigbee packet which is from

557
00:23:40,080 --> 00:23:42,000
the attacker and you can see that the

558
00:23:42,000 --> 00:23:44,760
temperature value here is changed to 14

559
00:23:44,760 --> 00:23:48,159
da014 it means that the we have received

560
00:23:48,159 --> 00:23:50,559
some packet but node will not find out

561
00:23:50,559 --> 00:23:52,400
whether it is from the gateway or if it

562
00:23:52,400 --> 00:23:54,320
is from the attacker

563
00:23:54,320 --> 00:23:55,840
so we will save this packet and will be

564
00:23:55,840 --> 00:23:59,399
processing it

565
00:24:15,080 --> 00:24:16,960
[Music]

566
00:24:16,960 --> 00:24:20,880
yeah the payload is d801445

567
00:24:20,880 --> 00:24:22,640
and it has it has been accepted and it

568
00:24:22,640 --> 00:24:24,559
is sending dd packet

569
00:24:24,559 --> 00:24:26,480
this is happening because the node is

570
00:24:26,480 --> 00:24:28,240
failing to understand whether the packet

571
00:24:28,240 --> 00:24:30,080
is from the legit gateway or it is from

572
00:24:30,080 --> 00:24:32,880
that attacker because there is no

573
00:24:32,880 --> 00:24:35,039
integrity protection and there is no way

574
00:24:35,039 --> 00:24:37,520
that gateway node is not able to judge

575
00:24:37,520 --> 00:24:39,840
whether it is from the legit gateway so

576
00:24:39,840 --> 00:24:44,360
we'll we'll be seeing the solution now

577
00:24:47,600 --> 00:24:49,440
yeah

578
00:24:49,440 --> 00:24:50,720
yeah

579
00:24:50,720 --> 00:24:53,360
so we know that uh we need to protect

580
00:24:53,360 --> 00:24:55,520
payload and we should there should be a

581
00:24:55,520 --> 00:24:56,640
way that

582
00:24:56,640 --> 00:24:58,240
node should identify whether it is from

583
00:24:58,240 --> 00:25:01,360
the gateway or not so for that

584
00:25:01,360 --> 00:25:04,159
there is a solution like on gateway and

585
00:25:04,159 --> 00:25:06,640
the node should be having a secure key

586
00:25:06,640 --> 00:25:08,480
exchange between them and there should

587
00:25:08,480 --> 00:25:11,279
be some protection for the payload

588
00:25:11,279 --> 00:25:13,679
for that what we can do is we can add a

589
00:25:13,679 --> 00:25:16,400
hmac calculated for the payload and it

590
00:25:16,400 --> 00:25:18,240
should it can be appended at the end of

591
00:25:18,240 --> 00:25:20,720
the packet each packet whenever gateway

592
00:25:20,720 --> 00:25:22,320
sends packet to the node

593
00:25:22,320 --> 00:25:23,679
hmac should be sent along with the

594
00:25:23,679 --> 00:25:25,840
packet similarly when node sends packet

595
00:25:25,840 --> 00:25:28,159
to the gateway and hmac should be

596
00:25:28,159 --> 00:25:30,240
appended at the end of the packet

597
00:25:30,240 --> 00:25:30,960
so

598
00:25:30,960 --> 00:25:33,840
when gateway sends packet with the hmac

599
00:25:33,840 --> 00:25:35,360
for the payload

600
00:25:35,360 --> 00:25:37,679
the node should calculate the hmac in

601
00:25:37,679 --> 00:25:39,840
the same way that gateway

602
00:25:39,840 --> 00:25:41,679
calculated and it should compare whether

603
00:25:41,679 --> 00:25:43,440
the calculated hmac and the received

604
00:25:43,440 --> 00:25:46,000
hmac are same if it is same it should

605
00:25:46,000 --> 00:25:47,440
accept the packet or else it should

606
00:25:47,440 --> 00:25:49,440
reject the packet

607
00:25:49,440 --> 00:25:51,039
an attacker who

608
00:25:51,039 --> 00:25:52,880
attacker can still sift the packet but

609
00:25:52,880 --> 00:25:55,440
if whenever he modifies he can't get the

610
00:25:55,440 --> 00:25:57,039
correct hmac in the

611
00:25:57,039 --> 00:25:59,039
in the packet because he will be not

612
00:25:59,039 --> 00:26:00,720
having the secure key that has been

613
00:26:00,720 --> 00:26:04,240
exchanged between the gateway and node

614
00:26:04,480 --> 00:26:06,480
but there is a scenario where attacker

615
00:26:06,480 --> 00:26:08,320
can still inject packets and you can

616
00:26:08,320 --> 00:26:10,880
successfully modify the

617
00:26:10,880 --> 00:26:12,880
temperature of the thermostat

618
00:26:12,880 --> 00:26:15,440
so as an attacker what i will think is

619
00:26:15,440 --> 00:26:18,640
as the integrity of the payload is

620
00:26:18,640 --> 00:26:21,200
protected so i will be changing the

621
00:26:21,200 --> 00:26:23,840
sequence number of the packet so

622
00:26:23,840 --> 00:26:25,760
that node is node thermostat will not

623
00:26:25,760 --> 00:26:28,480
accept the same sequence number again so

624
00:26:28,480 --> 00:26:31,039
i am going to modify it to a further

625
00:26:31,039 --> 00:26:32,640
value which i anticipate to be the

626
00:26:32,640 --> 00:26:35,440
future value and when the thermo on the

627
00:26:35,440 --> 00:26:37,600
gateway sends a different temperature i

628
00:26:37,600 --> 00:26:39,600
reset back into the old temperature by

629
00:26:39,600 --> 00:26:41,520
changing the

630
00:26:41,520 --> 00:26:44,720
sequence number value so now i have

631
00:26:44,720 --> 00:26:46,640
manipulated in a way that

632
00:26:46,640 --> 00:26:49,120
i have sent the same packet

633
00:26:49,120 --> 00:26:51,600
but at a different times time instance

634
00:26:51,600 --> 00:26:54,640
so still the attack is possible by so

635
00:26:54,640 --> 00:26:56,159
still we can attack the

636
00:26:56,159 --> 00:26:58,400
environment so here the sequence number

637
00:26:58,400 --> 00:27:00,480
is modified and the node accepts it

638
00:27:00,480 --> 00:27:03,200
because the integrity calculator for the

639
00:27:03,200 --> 00:27:07,840
payload is still the same it is valid

640
00:27:08,080 --> 00:27:09,039
so

641
00:27:09,039 --> 00:27:10,640
this is what i have explained in the

642
00:27:10,640 --> 00:27:12,640
previous slide that is in the scenario

643
00:27:12,640 --> 00:27:15,600
one we had protected only the uh

644
00:27:15,600 --> 00:27:17,919
payload and the attacker was like there

645
00:27:17,919 --> 00:27:19,679
was no protection then attacker was able

646
00:27:19,679 --> 00:27:20,399
to

647
00:27:20,399 --> 00:27:22,320
attack it using the

648
00:27:22,320 --> 00:27:24,960
by editing the payload now an attacker

649
00:27:24,960 --> 00:27:27,440
can affect all other headers by

650
00:27:27,440 --> 00:27:30,399
affecting the source destination pan id

651
00:27:30,399 --> 00:27:32,480
all the headers and still

652
00:27:32,480 --> 00:27:35,840
cause havoc in the network

653
00:27:37,039 --> 00:27:38,799
so when only the payload part is

654
00:27:38,799 --> 00:27:40,640
protected there are different scenarios

655
00:27:40,640 --> 00:27:42,559
that we can achieve here as nitin

656
00:27:42,559 --> 00:27:43,919
mentioned there is a replay attack

657
00:27:43,919 --> 00:27:46,000
possible which means that we are sending

658
00:27:46,000 --> 00:27:47,760
a same packet again and again in the

659
00:27:47,760 --> 00:27:49,679
network and we are setting the temp same

660
00:27:49,679 --> 00:27:52,080
temperature throughout the journey

661
00:27:52,080 --> 00:27:54,399
the second one is as as we know that

662
00:27:54,399 --> 00:27:56,159
source address and destination address

663
00:27:56,159 --> 00:27:57,760
are not part of

664
00:27:57,760 --> 00:28:00,159
hmac calculation we can spoof all the

665
00:28:00,159 --> 00:28:01,919
nodes in the network for example if

666
00:28:01,919 --> 00:28:03,520
there are 10 nodes in the network and

667
00:28:03,520 --> 00:28:05,679
the same network key is used in the in

668
00:28:05,679 --> 00:28:08,480
the in the wsn at this time we can spoof

669
00:28:08,480 --> 00:28:10,640
all the nodes in the network

670
00:28:10,640 --> 00:28:12,960
the last one is the pan id attack if

671
00:28:12,960 --> 00:28:15,200
there are multiple pan pan networks or

672
00:28:15,200 --> 00:28:16,880
personal area networks and if they are

673
00:28:16,880 --> 00:28:18,960
using the same network key at this time

674
00:28:18,960 --> 00:28:21,039
also we can spoof in all the personal

675
00:28:21,039 --> 00:28:23,760
area networks

676
00:28:23,919 --> 00:28:26,000
so for this we are

677
00:28:26,000 --> 00:28:27,200
giving a solution called as full

678
00:28:27,200 --> 00:28:30,679
security solution

679
00:28:30,880 --> 00:28:33,120
okay in the what we are

680
00:28:33,120 --> 00:28:35,200
proposing is like the entire packet

681
00:28:35,200 --> 00:28:37,600
should be hmac protected it means that

682
00:28:37,600 --> 00:28:39,279
the payload as well as the headers in

683
00:28:39,279 --> 00:28:40,000
the

684
00:28:40,000 --> 00:28:41,360
in the zigbee protocol should be

685
00:28:41,360 --> 00:28:43,200
protected with the hmac

686
00:28:43,200 --> 00:28:45,440
so the gateway will calculate hmac for

687
00:28:45,440 --> 00:28:47,039
the entire packet and it will be

688
00:28:47,039 --> 00:28:49,200
appending hmac at the end of the packet

689
00:28:49,200 --> 00:28:50,640
upon receiving this

690
00:28:50,640 --> 00:28:52,640
packet node should again calculate the

691
00:28:52,640 --> 00:28:54,559
hmac and it should re-verify whether the

692
00:28:54,559 --> 00:28:57,760
calculated and received hmac are same

693
00:28:57,760 --> 00:28:59,360
attacker who does not have knowledge

694
00:28:59,360 --> 00:29:01,039
about these things even though if he

695
00:29:01,039 --> 00:29:04,000
modifies the any part of the packet you

696
00:29:04,000 --> 00:29:06,000
will not be getting the correct hmac and

697
00:29:06,000 --> 00:29:08,000
the node will node will be rejecting the

698
00:29:08,000 --> 00:29:10,399
packets

699
00:29:10,880 --> 00:29:12,559
so we'll be seeing a demo for full

700
00:29:12,559 --> 00:29:15,559
security

701
00:29:32,720 --> 00:29:35,440
[Music]

702
00:29:35,440 --> 00:29:36,880
so as we

703
00:29:36,880 --> 00:29:38,720
at first the node will be listening for

704
00:29:38,720 --> 00:29:41,840
the traffic

705
00:29:41,919 --> 00:29:44,080
in the channel 21 and we are using the

706
00:29:44,080 --> 00:29:46,240
same id that we have used previously one

707
00:29:46,240 --> 00:29:47,010
five

708
00:29:47,010 --> 00:29:50,170
[Music]

709
00:29:50,399 --> 00:29:52,640
and

710
00:29:52,640 --> 00:29:53,919
and the gateway will be sending the

711
00:29:53,919 --> 00:29:55,760
gateway packet and we'll be seeing what

712
00:29:55,760 --> 00:29:59,200
is the format of this packet now

713
00:30:03,330 --> 00:30:05,039
[Music]

714
00:30:05,039 --> 00:30:06,399
in the channel we are using the same

715
00:30:06,399 --> 00:30:08,450
channel 21

716
00:30:08,450 --> 00:30:14,000
[Music]

717
00:30:14,000 --> 00:30:15,200
so now

718
00:30:15,200 --> 00:30:16,799
as we have mentioned that there is

719
00:30:16,799 --> 00:30:18,559
something called as hmac in the packet

720
00:30:18,559 --> 00:30:20,399
so we'll be seeing that

721
00:30:20,399 --> 00:30:22,799
you can see that the now the payload has

722
00:30:22,799 --> 00:30:26,360
been bumped up by uh 16 bytes after the

723
00:30:26,360 --> 00:30:29,520
da01345 there is a eight byte h mac we

724
00:30:29,520 --> 00:30:32,000
have truncated it for uh

725
00:30:32,000 --> 00:30:33,760
computation uh because of the

726
00:30:33,760 --> 00:30:37,320
computation issues

727
00:30:40,080 --> 00:30:43,120
as there are a few zigbee packet packets

728
00:30:43,120 --> 00:30:44,480
in the network we are seeing multiple

729
00:30:44,480 --> 00:30:46,000
apart from the

730
00:30:46,000 --> 00:30:50,120
packet sent by the gateway here

731
00:30:59,360 --> 00:31:02,000
i'm saving it as gw3 dot

732
00:31:02,000 --> 00:31:05,159
p cap

733
00:31:15,600 --> 00:31:17,519
now node has received the packet and we

734
00:31:17,519 --> 00:31:19,039
will be executing the python script

735
00:31:19,039 --> 00:31:21,039
which have hmac calculation

736
00:31:21,039 --> 00:31:24,039
code

737
00:31:33,519 --> 00:31:37,120
you can see that the payload is da01345

738
00:31:37,120 --> 00:31:40,080
the hmac in the packet is this one and

739
00:31:40,080 --> 00:31:42,960
the calculated hmac is same so as hmac

740
00:31:42,960 --> 00:31:44,640
is same here the packet has been

741
00:31:44,640 --> 00:31:48,240
accepted and it is sending the dd packet

742
00:31:48,240 --> 00:31:49,679
so again the gateway node will be

743
00:31:49,679 --> 00:31:51,919
listening for the traffic and attacker

744
00:31:51,919 --> 00:31:53,919
who has captured the same hmac uh

745
00:31:53,919 --> 00:31:56,159
protected

746
00:31:56,159 --> 00:31:57,679
packet you will be modifying the

747
00:31:57,679 --> 00:31:59,039
sequence number and you will be sending

748
00:31:59,039 --> 00:32:01,840
it now

749
00:32:02,080 --> 00:32:04,799
so i have modified the sequence number

750
00:32:04,799 --> 00:32:06,799
now and i am going to replay the same

751
00:32:06,799 --> 00:32:10,918
packet to the thermostat

752
00:32:17,440 --> 00:32:19,679
previously the sequence number was 45 i

753
00:32:19,679 --> 00:32:21,519
think i forgot to show it but now

754
00:32:21,519 --> 00:32:22,880
attacker has modified the sequence

755
00:32:22,880 --> 00:32:24,960
number to 50 and we'll be seeing whether

756
00:32:24,960 --> 00:32:26,000
the

757
00:32:26,000 --> 00:32:28,320
packet will be accepted by the node or

758
00:32:28,320 --> 00:32:31,320
not

759
00:32:43,679 --> 00:32:45,919
so now uh

760
00:32:45,919 --> 00:32:48,159
i ran the python script for the gateway

761
00:32:48,159 --> 00:32:49,360
3 packet

762
00:32:49,360 --> 00:32:51,679
which has the sequence number modified

763
00:32:51,679 --> 00:32:52,640
so

764
00:32:52,640 --> 00:32:55,880
so the

765
00:32:57,360 --> 00:33:00,240
it is not coming now yeah the payload is

766
00:33:00,240 --> 00:33:02,080
the same da00 and one three four five

767
00:33:02,080 --> 00:33:04,159
but the sequence number was modified so

768
00:33:04,159 --> 00:33:06,080
the calculated hmac is different from

769
00:33:06,080 --> 00:33:08,480
the received hmac so the pac hmac

770
00:33:08,480 --> 00:33:10,960
verification has failed and no dd packet

771
00:33:10,960 --> 00:33:12,880
has sent that means that

772
00:33:12,880 --> 00:33:15,039
now the node is able to identify with

773
00:33:15,039 --> 00:33:16,799
whether the packet is from the genuine

774
00:33:16,799 --> 00:33:21,200
or the legit gateway or it is from the

775
00:33:22,679 --> 00:33:26,159
attacker so to harden the zigbee style

776
00:33:26,159 --> 00:33:27,600
networks

777
00:33:27,600 --> 00:33:29,519
the complete packet should be integrated

778
00:33:29,519 --> 00:33:31,679
protected and we are mainly

779
00:33:31,679 --> 00:33:32,960
saying that it should be integrity

780
00:33:32,960 --> 00:33:35,519
protected but not the encryption because

781
00:33:35,519 --> 00:33:37,679
the nobody cares whether the temperature

782
00:33:37,679 --> 00:33:40,320
is 13 or 14 but

783
00:33:40,320 --> 00:33:42,159
but but they care that

784
00:33:42,159 --> 00:33:44,880
it is set by the legit gateway or not

785
00:33:44,880 --> 00:33:46,559
so it should be integrity protected

786
00:33:46,559 --> 00:33:49,760
rather than the encryption

787
00:33:50,720 --> 00:33:52,320
so what we are uh

788
00:33:52,320 --> 00:33:53,919
now we are proposing a security

789
00:33:53,919 --> 00:33:55,440
development lifecycle approach for the

790
00:33:55,440 --> 00:33:58,159
iot products we have seen a different uh

791
00:33:58,159 --> 00:34:00,799
scenarios like we are like only the

792
00:34:00,799 --> 00:34:02,720
cloud architecture will be

793
00:34:02,720 --> 00:34:03,760
will be

794
00:34:03,760 --> 00:34:05,679
undergoing the security assessment but

795
00:34:05,679 --> 00:34:08,560
not the complete sdlc complete four

796
00:34:08,560 --> 00:34:11,280
components so what we are proposing is

797
00:34:11,280 --> 00:34:14,320
five step approach for iot security it

798
00:34:14,320 --> 00:34:16,399
runs from s1 to s5

799
00:34:16,399 --> 00:34:18,800
in the s1 pace we identify the key

800
00:34:18,800 --> 00:34:20,639
attributes like

801
00:34:20,639 --> 00:34:22,159
what are the assets of the product what

802
00:34:22,159 --> 00:34:23,918
are the main security objectives of the

803
00:34:23,918 --> 00:34:26,399
product whereas in the second page which

804
00:34:26,399 --> 00:34:28,480
is threat modeling we

805
00:34:28,480 --> 00:34:30,480
for the each security requirements

806
00:34:30,480 --> 00:34:32,639
derived from the s1 we

807
00:34:32,639 --> 00:34:34,159
identify the threads and the threat

808
00:34:34,159 --> 00:34:35,280
vectors

809
00:34:35,280 --> 00:34:36,800
and these threat factors will be nothing

810
00:34:36,800 --> 00:34:38,719
but the pen testing cases in the fourth

811
00:34:38,719 --> 00:34:40,800
phase which is penetration penetration

812
00:34:40,800 --> 00:34:42,719
testing phase

813
00:34:42,719 --> 00:34:45,040
s3 is the focus security code review

814
00:34:45,040 --> 00:34:47,359
page where we do code review audit or

815
00:34:47,359 --> 00:34:50,320
the run some security tools uh security

816
00:34:50,320 --> 00:34:51,359
code

817
00:34:51,359 --> 00:34:53,599
tools on the code

818
00:34:53,599 --> 00:34:56,399
fourth one is a penetration

819
00:34:56,399 --> 00:34:58,880
testing page or the fuzzing page it is a

820
00:34:58,880 --> 00:35:00,960
important page where we identify actual

821
00:35:00,960 --> 00:35:02,880
vulnerabilities in the product and

822
00:35:02,880 --> 00:35:05,200
output of this page will be a security

823
00:35:05,200 --> 00:35:08,160
report with bunch of vulnerabilities

824
00:35:08,160 --> 00:35:10,720
last one is the fixed verification upon

825
00:35:10,720 --> 00:35:13,119
fixing each security vulnerability

826
00:35:13,119 --> 00:35:15,440
we'll be verifying whether the the fix

827
00:35:15,440 --> 00:35:18,000
is adequate or not

828
00:35:18,000 --> 00:35:20,000
and if there are any new features

829
00:35:20,000 --> 00:35:21,440
implemented in the product it should

830
00:35:21,440 --> 00:35:23,520
undergo the delta security model if

831
00:35:23,520 --> 00:35:26,000
required it should go go from s1 to s5

832
00:35:26,000 --> 00:35:28,480
if it is small changes based on the

833
00:35:28,480 --> 00:35:30,400
changes we should identify whether

834
00:35:30,400 --> 00:35:32,480
s4 is only required or s2 is also

835
00:35:32,480 --> 00:35:33,920
required

836
00:35:33,920 --> 00:35:36,320
and this this particular sdlc model

837
00:35:36,320 --> 00:35:38,880
should be applied for each component and

838
00:35:38,880 --> 00:35:40,640
even it should be applied when four

839
00:35:40,640 --> 00:35:43,280
components like which are mobile uh

840
00:35:43,280 --> 00:35:45,440
hardware and the cloud when they are

841
00:35:45,440 --> 00:35:47,040
integrated we should do the complete

842
00:35:47,040 --> 00:35:50,240
sdlc procedure again

843
00:35:51,599 --> 00:35:53,599
and one more important thing is we

844
00:35:53,599 --> 00:35:55,440
should follow the shift left policy

845
00:35:55,440 --> 00:35:57,520
which means that security should be

846
00:35:57,520 --> 00:35:59,599
integrated from the beginning page

847
00:35:59,599 --> 00:36:01,680
itself even from the design pace the

848
00:36:01,680 --> 00:36:03,839
security engineers should be involved in

849
00:36:03,839 --> 00:36:06,240
the meetings to identify the issues in

850
00:36:06,240 --> 00:36:08,160
the beginning page itself you can see

851
00:36:08,160 --> 00:36:10,320
that the security issue identified in

852
00:36:10,320 --> 00:36:12,480
the first page s1 pace will cost you a

853
00:36:12,480 --> 00:36:14,800
few thousand dollars but it can shoot up

854
00:36:14,800 --> 00:36:15,520
to

855
00:36:15,520 --> 00:36:17,280
millions of dollars when it is

856
00:36:17,280 --> 00:36:20,960
identified in the post-production pace

857
00:36:22,560 --> 00:36:24,799
yeah

858
00:36:24,839 --> 00:36:27,920
uh we are going to summarize now what we

859
00:36:27,920 --> 00:36:31,119
are trying to say is uh include security

860
00:36:31,119 --> 00:36:33,200
in all the components and even we too we

861
00:36:33,200 --> 00:36:34,880
should do the security assessment when

862
00:36:34,880 --> 00:36:37,200
these three components are integrated

863
00:36:37,200 --> 00:36:39,040
because we have seen some interrupt

864
00:36:39,040 --> 00:36:41,680
operability issues also so we will be

865
00:36:41,680 --> 00:36:44,000
talking more about interoper operability

866
00:36:44,000 --> 00:36:46,640
issues in the tomorrow's presentation

867
00:36:46,640 --> 00:36:50,319
that will be given by nitin

868
00:36:52,560 --> 00:36:53,440
yeah

869
00:36:53,440 --> 00:36:57,359
are there any questions regarding this

870
00:37:04,640 --> 00:37:08,160
but first of all thank you very much

871
00:37:08,160 --> 00:37:10,400
give them a big round of applause

872
00:37:10,400 --> 00:37:13,519
[Applause]

873
00:37:16,880 --> 00:37:21,079
yes say any questions

874
00:37:21,150 --> 00:37:22,720
[Music]

875
00:37:22,720 --> 00:37:25,839
thank you for your presentation um how

876
00:37:25,839 --> 00:37:27,280
do you

877
00:37:27,280 --> 00:37:29,920
uh how are you able to capture packet if

878
00:37:29,920 --> 00:37:32,560
you don't have the network key

879
00:37:32,560 --> 00:37:35,599
obviously you already missed something

880
00:37:35,599 --> 00:37:36,920
so the

881
00:37:36,920 --> 00:37:38,800
802.15.4 uh

882
00:37:38,800 --> 00:37:40,640
just publishes the packets in the

883
00:37:40,640 --> 00:37:42,800
particular channel so anyone who is

884
00:37:42,800 --> 00:37:44,160
sleeping in the same channel will be

885
00:37:44,160 --> 00:37:46,800
able to capture the packets okay so the

886
00:37:46,800 --> 00:37:50,800
payload isn't encrypted by the

887
00:37:53,599 --> 00:37:55,839
but this custom packet is not encrypted

888
00:37:55,839 --> 00:38:00,200
only integrity is maintained

889
00:38:05,880 --> 00:38:08,000
[Music]

890
00:38:08,000 --> 00:38:10,880
uh thanks for the talk uh

891
00:38:10,880 --> 00:38:13,520
in any commercial project have you ever

892
00:38:13,520 --> 00:38:16,480
seen this kind of stuff happen like not

893
00:38:16,480 --> 00:38:19,200
using any integrity checks

894
00:38:19,200 --> 00:38:20,000
by

895
00:38:20,000 --> 00:38:22,079
in known products

896
00:38:22,079 --> 00:38:24,640
yeah actually there were some products

897
00:38:24,640 --> 00:38:27,280
which were uh not protected like this

898
00:38:27,280 --> 00:38:30,640
then we were able to give the

899
00:38:30,640 --> 00:38:32,480
solution for this and then we have

900
00:38:32,480 --> 00:38:36,160
redesigned the product itself

901
00:38:36,160 --> 00:38:38,399
thanks

902
00:38:40,160 --> 00:38:43,640
any more questions

903
00:38:48,960 --> 00:38:51,520
well thanks again guys great thank you

904
00:38:51,520 --> 00:38:54,839
thank you very much

