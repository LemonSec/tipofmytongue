1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,840 --> 00:00:15,360
so bonjour atus

3
00:00:15,360 --> 00:00:16,880
hello everyone thank you for coming to

4
00:00:16,880 --> 00:00:18,960
insomniac and thanks for the organizers

5
00:00:18,960 --> 00:00:20,640
for this great event thank you for

6
00:00:20,640 --> 00:00:23,439
hosting me for the next hour i will be

7
00:00:23,439 --> 00:00:25,599
talking about kerberos shenanigans and

8
00:00:25,599 --> 00:00:27,920
to take the words from waldo i will be

9
00:00:27,920 --> 00:00:30,960
talking about abuses and not bugs so

10
00:00:30,960 --> 00:00:34,079
let's hope they just stay stay there

11
00:00:34,079 --> 00:00:36,079
in the long run

12
00:00:36,079 --> 00:00:38,239
i just took his id on the first slide

13
00:00:38,239 --> 00:00:40,879
you will have the link to the deck so if

14
00:00:40,879 --> 00:00:42,079
you need to

15
00:00:42,079 --> 00:00:44,079
take pictures or something feel free to

16
00:00:44,079 --> 00:00:46,800
do so but know this you have the deck

17
00:00:46,800 --> 00:00:50,160
somewhere on the internet

18
00:00:50,559 --> 00:00:52,480
so the talk is about kerberos

19
00:00:52,480 --> 00:00:54,640
delegations and how to abuse the

20
00:00:54,640 --> 00:00:56,640
mechanisms of kerberos delegations and

21
00:00:56,640 --> 00:00:58,480
service for user extension

22
00:00:58,480 --> 00:01:00,800
to bypass the limitation of kerberos

23
00:01:00,800 --> 00:01:02,320
delegation

24
00:01:02,320 --> 00:01:05,040
so this is all just quite some logic

25
00:01:05,040 --> 00:01:07,520
here the contents of the talk will be as

26
00:01:07,520 --> 00:01:08,479
follows

27
00:01:08,479 --> 00:01:10,720
firstly i will briefly introduce

28
00:01:10,720 --> 00:01:13,119
everyone to what is active directory in

29
00:01:13,119 --> 00:01:15,200
kerberos just a quick reminder

30
00:01:15,200 --> 00:01:16,720
then we will talk a bit about quebros

31
00:01:16,720 --> 00:01:19,439
delegations the the three or five main

32
00:01:19,439 --> 00:01:21,680
types of delegation you will find

33
00:01:21,680 --> 00:01:24,400
and then i will uh make some detailed

34
00:01:24,400 --> 00:01:27,759
explanations of how these work and how

35
00:01:27,759 --> 00:01:29,840
the extensions and delegations work what

36
00:01:29,840 --> 00:01:31,920
are the mechanisms behind those

37
00:01:31,920 --> 00:01:34,000
and then i will talk about the abuses of

38
00:01:34,000 --> 00:01:36,799
s4u to proxy as for yourself

39
00:01:36,799 --> 00:01:39,360
and we'll wrap things up in the end by

40
00:01:39,360 --> 00:01:41,280
forcing some of the questions you may

41
00:01:41,280 --> 00:01:42,159
have

42
00:01:42,159 --> 00:01:44,399
linking some resources and tools and

43
00:01:44,399 --> 00:01:46,079
doing the conclusion

44
00:01:46,079 --> 00:01:48,320
so without further ado

45
00:01:48,320 --> 00:01:50,720
let's let's just break the eyes together

46
00:01:50,720 --> 00:01:52,640
my name is charlie bromberg also known

47
00:01:52,640 --> 00:01:55,680
on twitter as shutdown written written

48
00:01:55,680 --> 00:01:57,920
on the reverse for the handle

49
00:01:57,920 --> 00:02:00,320
i work at capgemini which i truly thank

50
00:02:00,320 --> 00:02:03,040
for the about opportunity to come here

51
00:02:03,040 --> 00:02:06,159
they allow me to do this research or at

52
00:02:06,159 --> 00:02:08,239
least take the time to uh try all this

53
00:02:08,239 --> 00:02:10,560
and give me the context to to try this

54
00:02:10,560 --> 00:02:12,720
during pen test engagements

55
00:02:12,720 --> 00:02:15,040
um you may also know me from some night

56
00:02:15,040 --> 00:02:17,040
jobs uh

57
00:02:17,040 --> 00:02:19,200
which is the hacker recipes which is a

58
00:02:19,200 --> 00:02:20,720
set of theoretical and practical

59
00:02:20,720 --> 00:02:23,520
methodologies uh again just to take the

60
00:02:23,520 --> 00:02:26,160
words from waldo i just write what i

61
00:02:26,160 --> 00:02:27,680
wish i had

62
00:02:27,680 --> 00:02:29,360
read from the beginning

63
00:02:29,360 --> 00:02:31,680
you also have other tools i'm co-creator

64
00:02:31,680 --> 00:02:33,599
of hexagonal pi whisker targeted kaby

65
00:02:33,599 --> 00:02:36,239
ross and many other things

66
00:02:36,239 --> 00:02:38,959
so let's start with active directory and

67
00:02:38,959 --> 00:02:41,440
kerabros

68
00:02:44,400 --> 00:02:46,480
active directory is a set of services

69
00:02:46,480 --> 00:02:48,959
that you probably all know by a show of

70
00:02:48,959 --> 00:02:52,160
hands who knows active directory and has

71
00:02:52,160 --> 00:02:54,959
worked with active directory in the past

72
00:02:54,959 --> 00:02:58,239
yes so that's a huge majority here uh

73
00:02:58,239 --> 00:03:00,720
that's a good thing in active directory

74
00:03:00,720 --> 00:03:03,680
we find a lot of services we just talked

75
00:03:03,680 --> 00:03:07,040
about azure ad before but one

76
00:03:07,040 --> 00:03:09,440
type set of services that we find

77
00:03:09,440 --> 00:03:12,319
usually is domain services

78
00:03:12,319 --> 00:03:15,840
this one will stick this one is here for

79
00:03:15,840 --> 00:03:18,319
decades and it has some abuse

80
00:03:18,319 --> 00:03:20,480
capabilities some are norm some are

81
00:03:20,480 --> 00:03:22,319
known sorry and some are left to

82
00:03:22,319 --> 00:03:24,640
discover

83
00:03:24,640 --> 00:03:26,239
in active directory we have

84
00:03:26,239 --> 00:03:31,200
authentication mechanisms uh to uh to to

85
00:03:31,200 --> 00:03:33,120
say the least we have ntlm and kerbros

86
00:03:33,120 --> 00:03:35,920
which are the two main curb uh

87
00:03:35,920 --> 00:03:38,159
authentication protocols we we find in

88
00:03:38,159 --> 00:03:40,480
active directory domain services

89
00:03:40,480 --> 00:03:42,720
ntlm and kerberos

90
00:03:42,720 --> 00:03:45,200
serves the same purpose but they work in

91
00:03:45,200 --> 00:03:47,920
a really really different different way

92
00:03:47,920 --> 00:03:50,640
ntlm works in a three-way handshake

93
00:03:50,640 --> 00:03:52,560
first with a challenge message then with

94
00:03:52,560 --> 00:03:54,720
a negotiate message uh first with a

95
00:03:54,720 --> 00:03:56,239
negotiate message site then the

96
00:03:56,239 --> 00:03:58,400
challenge then the authentication

97
00:03:58,400 --> 00:04:00,959
authentication message and it works in a

98
00:04:00,959 --> 00:04:02,959
scheme based on the challenge response

99
00:04:02,959 --> 00:04:06,239
where the response also called the ntlm

100
00:04:06,239 --> 00:04:10,159
hash or net ntlm hash is in fact

101
00:04:10,159 --> 00:04:12,319
derivated from the actual user's

102
00:04:12,319 --> 00:04:16,159
password hash it's not really a hash

103
00:04:16,399 --> 00:04:18,238
in this protocol the domain controller

104
00:04:18,238 --> 00:04:20,720
usually decides if the user has the

105
00:04:20,720 --> 00:04:23,440
right or not to authenticate to the to

106
00:04:23,440 --> 00:04:24,960
the remote resource

107
00:04:24,960 --> 00:04:26,639
i say usually because

108
00:04:26,639 --> 00:04:29,040
there are cases where the user is a

109
00:04:29,040 --> 00:04:31,840
local user on the server and the domain

110
00:04:31,840 --> 00:04:33,680
controller doesn't have

111
00:04:33,680 --> 00:04:36,479
his saying in if the user has the right

112
00:04:36,479 --> 00:04:37,440
or not

113
00:04:37,440 --> 00:04:39,440
kerbros works

114
00:04:39,440 --> 00:04:40,800
a bit differently

115
00:04:40,800 --> 00:04:43,280
it works based on tickets

116
00:04:43,280 --> 00:04:45,759
these tickets called tgts and service

117
00:04:45,759 --> 00:04:48,160
tickets are obtained through a first

118
00:04:48,160 --> 00:04:49,040
step that is called the

119
00:04:49,040 --> 00:04:51,600
pre-authentication step which is

120
00:04:51,600 --> 00:04:53,520
optional but i won't deep dive in this

121
00:04:53,520 --> 00:04:55,199
it's out of the scope

122
00:04:55,199 --> 00:04:58,320
but just to remind uh it's based on

123
00:04:58,320 --> 00:04:59,520
tickets yes

124
00:04:59,520 --> 00:05:00,400
but

125
00:05:00,400 --> 00:05:02,400
at the beginning it's also based on the

126
00:05:02,400 --> 00:05:05,120
long term key which is also derivative

127
00:05:05,120 --> 00:05:06,880
from the user's password

128
00:05:06,880 --> 00:05:07,919
so

129
00:05:07,919 --> 00:05:11,039
it makes kerberos nntlm vulnerable to

130
00:05:11,039 --> 00:05:13,680
lots of things lots of abuses lots of

131
00:05:13,680 --> 00:05:15,759
bugs also

132
00:05:15,759 --> 00:05:18,880
here is a a quick list of those

133
00:05:18,880 --> 00:05:21,360
the aim of that list is not to say that

134
00:05:21,360 --> 00:05:22,800
kerberos is

135
00:05:22,800 --> 00:05:25,440
more dangerous that ntlm this this would

136
00:05:25,440 --> 00:05:27,120
be wrong this would be false

137
00:05:27,120 --> 00:05:29,520
this slide just shows

138
00:05:29,520 --> 00:05:30,320
that

139
00:05:30,320 --> 00:05:32,880
there are a lot of paths to

140
00:05:32,880 --> 00:05:35,360
discover to explore when attacking

141
00:05:35,360 --> 00:05:37,919
kerberos there are a lot of paths too

142
00:05:37,919 --> 00:05:40,639
for mtlm but i mean ntlm is really

143
00:05:40,639 --> 00:05:43,360
dangerous it's really old it's badly

144
00:05:43,360 --> 00:05:46,080
constructed but kerberos has its flows

145
00:05:46,080 --> 00:05:49,120
too and since this protocol is far less

146
00:05:49,120 --> 00:05:50,880
known than ntlm

147
00:05:50,880 --> 00:05:54,000
it's far more subject to some abuses and

148
00:05:54,000 --> 00:05:55,680
attacks

149
00:05:55,680 --> 00:05:57,919
if you want more information on

150
00:05:57,919 --> 00:06:00,800
when do these attacks occur when are

151
00:06:00,800 --> 00:06:03,199
these abuses taking place during the

152
00:06:03,199 --> 00:06:05,199
authentication mechanism you have a mind

153
00:06:05,199 --> 00:06:07,199
map on the left on the right on this of

154
00:06:07,199 --> 00:06:09,120
the slide which is accessible on the

155
00:06:09,120 --> 00:06:11,280
hacker recipes if you want to understand

156
00:06:11,280 --> 00:06:12,960
it clearly

157
00:06:12,960 --> 00:06:14,720
so

158
00:06:14,720 --> 00:06:17,120
let's do some quick reminder of how

159
00:06:17,120 --> 00:06:20,160
kerberos authentication actually works

160
00:06:20,160 --> 00:06:22,639
well as i said earlier you have a first

161
00:06:22,639 --> 00:06:23,919
step with which is the

162
00:06:23,919 --> 00:06:26,639
pre-authentication step and this one

163
00:06:26,639 --> 00:06:28,800
while it's optional it

164
00:06:28,800 --> 00:06:31,199
it really um

165
00:06:31,199 --> 00:06:34,160
is the first step to grant a tgt for

166
00:06:34,160 --> 00:06:36,720
user i say it's optional because there

167
00:06:36,720 --> 00:06:40,240
is a an abuse case called as rep roast

168
00:06:40,240 --> 00:06:41,759
where you can disable the

169
00:06:41,759 --> 00:06:43,919
pre-authentication for user

170
00:06:43,919 --> 00:06:46,800
but in fact this step is usually taking

171
00:06:46,800 --> 00:06:49,840
place and allows the user to make a

172
00:06:49,840 --> 00:06:51,759
request to the authentication service

173
00:06:51,759 --> 00:06:54,080
the as that is

174
00:06:54,080 --> 00:06:56,160
located on the kdc the key distribution

175
00:06:56,160 --> 00:06:59,840
center and it allows him to obtain a tgt

176
00:06:59,840 --> 00:07:02,880
tgt stands for ticket granting ticket

177
00:07:02,880 --> 00:07:04,080
it's a ticket

178
00:07:04,080 --> 00:07:06,720
but what does it do it grants ticket

179
00:07:06,720 --> 00:07:08,960
and it grants what types of ticket well

180
00:07:08,960 --> 00:07:10,800
service tickets

181
00:07:10,800 --> 00:07:13,199
so bear with me here usually you see on

182
00:07:13,199 --> 00:07:14,720
the internet that the acronym for

183
00:07:14,720 --> 00:07:18,479
service ticket is tgs well it's

184
00:07:18,479 --> 00:07:21,520
not quite true the tgs usually stands

185
00:07:21,520 --> 00:07:23,759
for the ticket granting service it's a

186
00:07:23,759 --> 00:07:26,720
service it's not a ticket the ticket the

187
00:07:26,720 --> 00:07:29,280
acronym for service ticket would be st

188
00:07:29,280 --> 00:07:31,360
and this is the acronym i will be using

189
00:07:31,360 --> 00:07:33,440
in this deck but if you see tgs

190
00:07:33,440 --> 00:07:35,599
somewhere referring to tickets uh this

191
00:07:35,599 --> 00:07:38,479
is uh this is quite normal people you'll

192
00:07:38,479 --> 00:07:40,720
usually tend to mix a few things and

193
00:07:40,720 --> 00:07:42,080
with microsoft

194
00:07:42,080 --> 00:07:45,840
parlance it's quite common

195
00:07:47,440 --> 00:07:49,120
so

196
00:07:49,120 --> 00:07:51,039
the service ticket what is it

197
00:07:51,039 --> 00:07:53,039
what's its purpose the service ticket's

198
00:07:53,039 --> 00:07:55,680
purpose is to allow the user to access a

199
00:07:55,680 --> 00:07:57,919
resource in this ticket you will find

200
00:07:57,919 --> 00:08:00,080
information about the service the

201
00:08:00,080 --> 00:08:01,599
service class the service name the

202
00:08:01,599 --> 00:08:03,360
service realm and you will find

203
00:08:03,360 --> 00:08:05,360
information about the user as well

204
00:08:05,360 --> 00:08:07,360
you will also find in that ticket and in

205
00:08:07,360 --> 00:08:10,080
the tgt as well the pack the pac stands

206
00:08:10,080 --> 00:08:12,240
for privilege attribute certificate and

207
00:08:12,240 --> 00:08:13,120
it's

208
00:08:13,120 --> 00:08:15,280
all the information regarding the user

209
00:08:15,280 --> 00:08:18,400
that the remote resource will unpack and

210
00:08:18,400 --> 00:08:20,960
check and verify to see if the user

211
00:08:20,960 --> 00:08:23,440
really has uh the

212
00:08:23,440 --> 00:08:26,240
authority and the privileges necessary

213
00:08:26,240 --> 00:08:29,199
to access the said resource

214
00:08:29,199 --> 00:08:32,240
so now that it's perfectly understood

215
00:08:32,240 --> 00:08:35,120
how kebros works i really believe it now

216
00:08:35,120 --> 00:08:38,399
let's talk a bit about delegation so

217
00:08:38,399 --> 00:08:40,640
kerberos delegations there are

218
00:08:40,640 --> 00:08:43,120
let's say two families the first one is

219
00:08:43,120 --> 00:08:45,040
the unconstrained family and the second

220
00:08:45,040 --> 00:08:47,920
one is the constrained family well you

221
00:08:47,920 --> 00:08:49,920
can guess it from the name unconstrained

222
00:08:49,920 --> 00:08:52,320
means no limit the

223
00:08:52,320 --> 00:08:54,399
kerberos delegation is a mechanism

224
00:08:54,399 --> 00:08:56,720
allowing a service to access another

225
00:08:56,720 --> 00:08:59,839
service on behalf of a user this is a

226
00:08:59,839 --> 00:09:01,519
legitimate behavior

227
00:09:01,519 --> 00:09:04,320
by microsoft there is no issue with this

228
00:09:04,320 --> 00:09:06,399
but we will see the different abuse

229
00:09:06,399 --> 00:09:09,279
scenarios later on the end constraint is

230
00:09:09,279 --> 00:09:11,519
no limit the service configured for

231
00:09:11,519 --> 00:09:13,440
unconstrained delegation can

232
00:09:13,440 --> 00:09:16,640
act on behalf of another identity on a

233
00:09:16,640 --> 00:09:19,040
remote service on any other remote

234
00:09:19,040 --> 00:09:20,399
service

235
00:09:20,399 --> 00:09:23,200
the constrained one well it's limited

236
00:09:23,200 --> 00:09:25,839
the first service configured for kcd for

237
00:09:25,839 --> 00:09:27,920
constraint delegation can act on a set

238
00:09:27,920 --> 00:09:30,640
of services and rbcd resource based on

239
00:09:30,640 --> 00:09:32,399
strain delegation is quite similar but

240
00:09:32,399 --> 00:09:33,920
the other way around

241
00:09:33,920 --> 00:09:35,760
and then on the constrain delegation

242
00:09:35,760 --> 00:09:37,839
there are there is a setting called

243
00:09:37,839 --> 00:09:39,519
protocol transition

244
00:09:39,519 --> 00:09:41,600
when configuring an account for

245
00:09:41,600 --> 00:09:42,800
constraint delegation you have the

246
00:09:42,800 --> 00:09:43,680
choice

247
00:09:43,680 --> 00:09:46,000
between using kerberos only which is

248
00:09:46,000 --> 00:09:48,480
without vertical transition and use any

249
00:09:48,480 --> 00:09:50,720
authentication protocol which is

250
00:09:50,720 --> 00:09:52,880
without vertical transition

251
00:09:52,880 --> 00:09:53,839
so

252
00:09:53,839 --> 00:09:56,800
here is uh some here are some diagrams

253
00:09:56,800 --> 00:09:59,839
to better understand what are the uh

254
00:09:59,839 --> 00:10:02,399
behaviors and mechanisms behind

255
00:10:02,399 --> 00:10:04,560
kerberos delegation so as i said the

256
00:10:04,560 --> 00:10:06,160
unconstrained delegation allows the

257
00:10:06,160 --> 00:10:08,320
service that is configured for it to act

258
00:10:08,320 --> 00:10:10,880
on behalf of another identity on any

259
00:10:10,880 --> 00:10:12,640
other service there is no limit here

260
00:10:12,640 --> 00:10:15,200
it's really dangerous if this service

261
00:10:15,200 --> 00:10:18,320
gets pawned the attacker will be able to

262
00:10:18,320 --> 00:10:21,120
act on any other user on let's say the

263
00:10:21,120 --> 00:10:23,279
domain controller services

264
00:10:23,279 --> 00:10:25,600
when i say any other user there is a

265
00:10:25,600 --> 00:10:28,160
limit here the limit is the protected

266
00:10:28,160 --> 00:10:30,399
users and the users set sensitive for

267
00:10:30,399 --> 00:10:33,440
delegation we will talk a bit later on

268
00:10:33,440 --> 00:10:35,440
deep dive on this matter

269
00:10:35,440 --> 00:10:37,600
constrain delegation is the exact same

270
00:10:37,600 --> 00:10:40,480
thing but instead of having the right to

271
00:10:40,480 --> 00:10:41,279
act

272
00:10:41,279 --> 00:10:44,079
on anyone's behavior on any service it's

273
00:10:44,079 --> 00:10:46,480
only on the list of services and then

274
00:10:46,480 --> 00:10:48,240
the rbcd when i said it's the other way

275
00:10:48,240 --> 00:10:50,560
around it's because instead of

276
00:10:50,560 --> 00:10:52,320
configuring the service that we'll

277
00:10:52,320 --> 00:10:54,800
delegate we configure the service that

278
00:10:54,800 --> 00:10:57,279
is the target of the delegation instead

279
00:10:57,279 --> 00:10:59,360
of having an outgoing delegation with

280
00:10:59,360 --> 00:11:01,360
unconstrained and constrained delegation

281
00:11:01,360 --> 00:11:05,360
we have an incoming delegation with rbcd

282
00:11:05,360 --> 00:11:07,200
the difference here resides in the fact

283
00:11:07,200 --> 00:11:08,800
that unconstrained and constrained

284
00:11:08,800 --> 00:11:10,640
delegation

285
00:11:10,640 --> 00:11:13,440
require really really high privileges on

286
00:11:13,440 --> 00:11:16,240
the domain it's the se enable uh

287
00:11:16,240 --> 00:11:17,920
delegation privileges

288
00:11:17,920 --> 00:11:19,200
on the domain

289
00:11:19,200 --> 00:11:22,320
which is uh close to domain admin rights

290
00:11:22,320 --> 00:11:25,680
and the rbcd doesn't require those ultra

291
00:11:25,680 --> 00:11:28,480
high privileges it only requires control

292
00:11:28,480 --> 00:11:31,440
over the service that we will configure

293
00:11:31,440 --> 00:11:34,560
for rbcd and for example computer

294
00:11:34,560 --> 00:11:37,040
accounts on the domain have the right to

295
00:11:37,040 --> 00:11:39,360
edit their own rbcd attribute that is

296
00:11:39,360 --> 00:11:42,560
called the msds allowed to act on behalf

297
00:11:42,560 --> 00:11:44,560
of other identity thanks microsoft for

298
00:11:44,560 --> 00:11:46,320
that um

299
00:11:46,320 --> 00:11:50,320
now i have to drink a bit sorry for that

300
00:11:51,519 --> 00:11:53,440
yeah so it doesn't require

301
00:11:53,440 --> 00:11:54,880
all that power on the domain to

302
00:11:54,880 --> 00:11:56,880
configure rbcd

303
00:11:56,880 --> 00:11:57,600
so

304
00:11:57,600 --> 00:11:59,440
now that you have

305
00:11:59,440 --> 00:12:01,760
perfectly understood i'm sure of it the

306
00:12:01,760 --> 00:12:03,440
differences between unconstrained

307
00:12:03,440 --> 00:12:05,279
constrained protocol transition with or

308
00:12:05,279 --> 00:12:06,880
without resource based on screen

309
00:12:06,880 --> 00:12:09,120
delegation let's see how these work

310
00:12:09,120 --> 00:12:13,440
really this is um just again to uh to uh

311
00:12:13,440 --> 00:12:16,160
quote waldo from the the talk before uh

312
00:12:16,160 --> 00:12:18,079
we have to deep dive and go beyond the

313
00:12:18,079 --> 00:12:20,240
documentation to really understand what

314
00:12:20,240 --> 00:12:22,560
are the mechanisms of those protocols

315
00:12:22,560 --> 00:12:24,959
once we understand that we should be

316
00:12:24,959 --> 00:12:27,680
able to find some abuses

317
00:12:27,680 --> 00:12:29,760
just a quick disclaimer here the abuses

318
00:12:29,760 --> 00:12:32,000
that i will be talking about are not

319
00:12:32,000 --> 00:12:34,639
abuses that i will i had have discovered

320
00:12:34,639 --> 00:12:36,959
myself i'm just quoting a few other

321
00:12:36,959 --> 00:12:38,959
things that i found on on the internet

322
00:12:38,959 --> 00:12:41,200
and put it all in a in a nice

323
00:12:41,200 --> 00:12:43,839
red and orange diagram for the theme

324
00:12:43,839 --> 00:12:45,360
the unconstrained delegation works like

325
00:12:45,360 --> 00:12:46,399
this

326
00:12:46,399 --> 00:12:50,959
a user first needs to obtain a tgt and

327
00:12:50,959 --> 00:12:53,120
later on when using that tgt to obtain a

328
00:12:53,120 --> 00:12:55,680
service ticket for a service

329
00:12:55,680 --> 00:12:58,079
when the kdc will see that the service

330
00:12:58,079 --> 00:13:01,040
target for these the uh the

331
00:13:01,040 --> 00:13:03,200
service ticket is configured for

332
00:13:03,200 --> 00:13:05,519
kerberos unconstrained delegation which

333
00:13:05,519 --> 00:13:07,200
i will refer to as

334
00:13:07,200 --> 00:13:09,200
kud

335
00:13:09,200 --> 00:13:11,600
it does something really special

336
00:13:11,600 --> 00:13:13,839
it adds it delegates the tgt in the

337
00:13:13,839 --> 00:13:16,160
service ticket so the user that sends

338
00:13:16,160 --> 00:13:18,399
his service ticket to the service

339
00:13:18,399 --> 00:13:20,480
configured for kud

340
00:13:20,480 --> 00:13:24,240
has in fact its tgt delegated included

341
00:13:24,240 --> 00:13:25,760
in the service ticket

342
00:13:25,760 --> 00:13:27,760
what this allows it allows the service

343
00:13:27,760 --> 00:13:30,160
configured for kud to actually extract

344
00:13:30,160 --> 00:13:33,279
the tgt from the user and act on behalf

345
00:13:33,279 --> 00:13:36,399
of the user with his tgt to access any

346
00:13:36,399 --> 00:13:37,920
other resource

347
00:13:37,920 --> 00:13:39,760
while this works for any user it doesn't

348
00:13:39,760 --> 00:13:42,480
work for the users set sensitive for

349
00:13:42,480 --> 00:13:45,199
delegation or

350
00:13:45,199 --> 00:13:47,600
put in the protected users group that's

351
00:13:47,600 --> 00:13:49,519
the only limitation here

352
00:13:49,519 --> 00:13:52,399
so let's do a quick swat analysis

353
00:13:52,399 --> 00:13:54,399
strength weaknesses opportunities and

354
00:13:54,399 --> 00:13:56,320
threats

355
00:13:56,320 --> 00:13:58,959
what this allows is that you can in fact

356
00:13:58,959 --> 00:14:02,000
act as as any other user with the limits

357
00:14:02,000 --> 00:14:05,279
i explained before but the limit here is

358
00:14:05,279 --> 00:14:07,839
that actually if the attacker

359
00:14:07,839 --> 00:14:08,720
gets

360
00:14:08,720 --> 00:14:11,199
obtains control full control over the

361
00:14:11,199 --> 00:14:13,360
kud he won't be able to impersonate

362
00:14:13,360 --> 00:14:18,079
users out of thin air he will require

363
00:14:18,079 --> 00:14:20,560
the requirement here is to obtain an

364
00:14:20,560 --> 00:14:22,639
incoming authentication from a user

365
00:14:22,639 --> 00:14:24,800
because without that authentication

366
00:14:24,800 --> 00:14:26,639
the service will not receive the service

367
00:14:26,639 --> 00:14:28,959
ticket and hence will not receive the

368
00:14:28,959 --> 00:14:31,440
tgt of the user so he won't be able to

369
00:14:31,440 --> 00:14:33,440
act as that user

370
00:14:33,440 --> 00:14:35,839
there are workarounds to

371
00:14:35,839 --> 00:14:38,720
force coerce the authentication you the

372
00:14:38,720 --> 00:14:41,440
core the authentication of users sorry

373
00:14:41,440 --> 00:14:42,560
for that

374
00:14:42,560 --> 00:14:45,920
for example uh rpc abuses based on msrp

375
00:14:45,920 --> 00:14:49,360
iran the printer blog ms efsr ms office

376
00:14:49,360 --> 00:14:51,600
rvp there are a lot of abuses the

377
00:14:51,600 --> 00:14:54,720
attacker can also just sit and wait and

378
00:14:54,720 --> 00:14:57,680
see for users to access that resource

379
00:14:57,680 --> 00:14:59,839
because usually this service is not

380
00:14:59,839 --> 00:15:02,320
configured for kud for no reason at all

381
00:15:02,320 --> 00:15:03,839
usually

382
00:15:03,839 --> 00:15:06,720
users connect to that service

383
00:15:06,720 --> 00:15:09,360
constraint delegation is a bit similar

384
00:15:09,360 --> 00:15:12,000
in the way that it requires an incoming

385
00:15:12,000 --> 00:15:14,399
authentication from the user but here

386
00:15:14,399 --> 00:15:16,399
the tgt is not delegated in the service

387
00:15:16,399 --> 00:15:18,560
ticket here

388
00:15:18,560 --> 00:15:21,519
we will begin to talk about service for

389
00:15:21,519 --> 00:15:24,480
user extensions which are extensions in

390
00:15:24,480 --> 00:15:26,720
the kerberos mechanisms

391
00:15:26,720 --> 00:15:28,079
here we've constrained delegation

392
00:15:28,079 --> 00:15:30,079
without protocol transition so when it's

393
00:15:30,079 --> 00:15:32,560
configured for kerb ross only

394
00:15:32,560 --> 00:15:36,320
the user when he obtains a ticket to

395
00:15:36,320 --> 00:15:39,120
access the resource

396
00:15:39,120 --> 00:15:41,279
the ticket is a standard one but when

397
00:15:41,279 --> 00:15:43,040
the service obtains that ticket the

398
00:15:43,040 --> 00:15:45,519
service configured for kcd obtains that

399
00:15:45,519 --> 00:15:49,120
ticket he includes that ticket in a tgs

400
00:15:49,120 --> 00:15:52,320
request in a tgs rack a request for

401
00:15:52,320 --> 00:15:54,800
obtaining a service ticket and in that

402
00:15:54,800 --> 00:15:56,959
request he will include an additional

403
00:15:56,959 --> 00:15:59,519
ticket and evidence that the user has in

404
00:15:59,519 --> 00:16:01,759
fact authenticated to the service

405
00:16:01,759 --> 00:16:03,920
and this is called s for you to proxy

406
00:16:03,920 --> 00:16:07,279
service for user to proxy it's a request

407
00:16:07,279 --> 00:16:08,959
that allows the service configured for

408
00:16:08,959 --> 00:16:11,519
delegation to obtain a service ticket on

409
00:16:11,519 --> 00:16:13,519
behalf of another user

410
00:16:13,519 --> 00:16:16,560
to another service

411
00:16:16,560 --> 00:16:18,959
while this allows the exact same thing

412
00:16:18,959 --> 00:16:21,440
it allows the service to access another

413
00:16:21,440 --> 00:16:24,320
resource on behalf of another user here

414
00:16:24,320 --> 00:16:26,720
the list of resource of target resources

415
00:16:26,720 --> 00:16:29,759
like app02 are limited it's configured

416
00:16:29,759 --> 00:16:30,959
on the account

417
00:16:30,959 --> 00:16:34,639
and the requirement of having you need

418
00:16:34,639 --> 00:16:35,920
you need the incoming authentication

419
00:16:35,920 --> 00:16:38,720
from the the user is still here

420
00:16:38,720 --> 00:16:40,240
with constraint delegation without

421
00:16:40,240 --> 00:16:41,920
protocol with protocol transition sorry

422
00:16:41,920 --> 00:16:44,079
for that uh it's a bit different

423
00:16:44,079 --> 00:16:44,800
so

424
00:16:44,800 --> 00:16:48,000
while i'm sipping a bit of water i'll

425
00:16:48,000 --> 00:16:52,800
let you find the differences find waldo

426
00:16:53,120 --> 00:16:55,120
which is my name the differences between

427
00:16:55,120 --> 00:16:57,279
the diagrams of without and with

428
00:16:57,279 --> 00:17:00,160
protocol transition

429
00:17:03,120 --> 00:17:04,799
okay this was just an excuse because i

430
00:17:04,799 --> 00:17:06,959
was really thirsty

431
00:17:06,959 --> 00:17:08,720
okay so the constraint delegation with

432
00:17:08,720 --> 00:17:10,480
protocol transition as you can see

433
00:17:10,480 --> 00:17:12,880
probably guess if you are too far away

434
00:17:12,880 --> 00:17:14,000
in the room

435
00:17:14,000 --> 00:17:16,640
um there is something missing here it's

436
00:17:16,640 --> 00:17:17,679
the user

437
00:17:17,679 --> 00:17:20,000
the user is not part anymore of the

438
00:17:20,000 --> 00:17:21,039
diagram

439
00:17:21,039 --> 00:17:22,799
with vertical transition

440
00:17:22,799 --> 00:17:24,799
you have i mean the service configured

441
00:17:24,799 --> 00:17:27,280
for kcd with protocol transition has the

442
00:17:27,280 --> 00:17:30,160
ability to impersonate users out of thin

443
00:17:30,160 --> 00:17:30,880
air

444
00:17:30,880 --> 00:17:32,240
he doesn't need the incoming

445
00:17:32,240 --> 00:17:34,799
authentication from the user

446
00:17:34,799 --> 00:17:38,160
and how does he do that he does that by

447
00:17:38,160 --> 00:17:40,480
calling by requesting an s for you to

448
00:17:40,480 --> 00:17:43,039
self now we talked earlier about the

449
00:17:43,039 --> 00:17:45,200
s4u2 proxy which is a request allowing

450
00:17:45,200 --> 00:17:47,039
the service to obtain a ticket on behalf

451
00:17:47,039 --> 00:17:49,200
of another other user to a remote

452
00:17:49,200 --> 00:17:52,000
service as for yourself is quite similar

453
00:17:52,000 --> 00:17:54,720
it allows the service to ask a service

454
00:17:54,720 --> 00:17:57,280
ticket to itself on behalf of another

455
00:17:57,280 --> 00:17:59,600
user

456
00:17:59,600 --> 00:18:02,880
so as for yourself in fact is the only

457
00:18:02,880 --> 00:18:04,960
difference here in the mechanisms

458
00:18:04,960 --> 00:18:06,160
between

459
00:18:06,160 --> 00:18:08,480
with and without protocol transition for

460
00:18:08,480 --> 00:18:09,919
kcd

461
00:18:09,919 --> 00:18:12,160
and then we have rbcd i won't go into

462
00:18:12,160 --> 00:18:14,720
too much details here what we have to uh

463
00:18:14,720 --> 00:18:17,760
understand and remind is uh

464
00:18:17,760 --> 00:18:19,760
keep in mind sorry is that the our

465
00:18:19,760 --> 00:18:22,240
obesity mechanisms are quite similar to

466
00:18:22,240 --> 00:18:25,440
the kcd one instead of having an

467
00:18:25,440 --> 00:18:27,600
outgoing delegation we have an incoming

468
00:18:27,600 --> 00:18:30,559
delegation uh when we uh

469
00:18:30,559 --> 00:18:33,280
take place from the o2 which is the one

470
00:18:33,280 --> 00:18:36,000
now configured for rbcd but the process

471
00:18:36,000 --> 00:18:38,559
is the same you can either the service

472
00:18:38,559 --> 00:18:40,640
that wants to delegate can either wait

473
00:18:40,640 --> 00:18:42,640
for a service ticket from a user or get

474
00:18:42,640 --> 00:18:46,080
one with as for yourself

475
00:18:46,080 --> 00:18:48,799
now i'm sure it's perfectly understood

476
00:18:48,799 --> 00:18:52,240
you have all understood really 100 how

477
00:18:52,240 --> 00:18:55,200
delegation work so let's now deep dive

478
00:18:55,200 --> 00:18:57,200
and something you wish you wouldn't have

479
00:18:57,200 --> 00:19:00,640
heard service for user extensions

480
00:19:00,640 --> 00:19:02,880
these extensions are in fact the

481
00:19:02,880 --> 00:19:05,039
mechanisms behind delegation if you

482
00:19:05,039 --> 00:19:06,559
followed

483
00:19:06,559 --> 00:19:09,360
the the explanations before kcd

484
00:19:09,360 --> 00:19:12,640
is based on s4u extensions and rbcd as

485
00:19:12,640 --> 00:19:14,000
well

486
00:19:14,000 --> 00:19:14,960
so

487
00:19:14,960 --> 00:19:17,600
let's now find the differences between s

488
00:19:17,600 --> 00:19:19,360
for yourself and it's for you to proxy

489
00:19:19,360 --> 00:19:21,679
and understand how these work and i

490
00:19:21,679 --> 00:19:22,640
promise

491
00:19:22,640 --> 00:19:25,600
this is one of the last explanations of

492
00:19:25,600 --> 00:19:27,840
this talk and we will do some tastes

493
00:19:27,840 --> 00:19:29,600
tests later on

494
00:19:29,600 --> 00:19:32,320
so as for yourself as i said earlier

495
00:19:32,320 --> 00:19:34,720
allows a service to obtain a service

496
00:19:34,720 --> 00:19:37,919
ticket for oneself for itself on behalf

497
00:19:37,919 --> 00:19:40,400
of a user

498
00:19:40,400 --> 00:19:43,440
but while this concept is quite easy to

499
00:19:43,440 --> 00:19:46,480
understand there are a few variables to

500
00:19:46,480 --> 00:19:48,799
take into consideration

501
00:19:48,799 --> 00:19:50,640
the service ticket that is produced

502
00:19:50,640 --> 00:19:53,360
after the s for yourself that is sent by

503
00:19:53,360 --> 00:19:56,480
the kdc by the key distribution center

504
00:19:56,480 --> 00:19:59,600
has one thing that is essential for us

505
00:19:59,600 --> 00:20:01,679
for you to proxy it's the affordable

506
00:20:01,679 --> 00:20:03,280
flag

507
00:20:03,280 --> 00:20:04,400
if the

508
00:20:04,400 --> 00:20:07,440
impersonated user is protected by any

509
00:20:07,440 --> 00:20:09,440
means like it's set for sensitive for

510
00:20:09,440 --> 00:20:11,919
delegation it's uh put in the protected

511
00:20:11,919 --> 00:20:13,200
users group

512
00:20:13,200 --> 00:20:15,280
then the service ticket produced by the

513
00:20:15,280 --> 00:20:16,880
s4u itself

514
00:20:16,880 --> 00:20:20,320
will exist it will produce a ticket

515
00:20:20,320 --> 00:20:21,440
however

516
00:20:21,440 --> 00:20:23,440
the forwardable flag will not be

517
00:20:23,440 --> 00:20:25,520
included in the ticket and what this

518
00:20:25,520 --> 00:20:28,799
does is that the s4udo proxy will fail

519
00:20:28,799 --> 00:20:30,799
because the requirement of the s4u to

520
00:20:30,799 --> 00:20:33,520
proxy is to use an additional ticket in

521
00:20:33,520 --> 00:20:35,919
the request that was either produced by

522
00:20:35,919 --> 00:20:38,559
the svu self or

523
00:20:38,559 --> 00:20:40,159
received to bring the incoming

524
00:20:40,159 --> 00:20:42,159
authentication from the user and if that

525
00:20:42,159 --> 00:20:43,760
forwardable flag is not present in the

526
00:20:43,760 --> 00:20:46,240
ticket then the s4u proxy will fail and

527
00:20:46,240 --> 00:20:48,559
the kdc will will say something like

528
00:20:48,559 --> 00:20:49,600
come on man you don't have the

529
00:20:49,600 --> 00:20:53,280
permissions to do this shut up just no

530
00:20:53,280 --> 00:20:55,039
but there is another thing if the

531
00:20:55,039 --> 00:20:56,880
affordable flag is not set there is a

532
00:20:56,880 --> 00:21:00,240
specific scenario based on rbcd which i

533
00:21:00,240 --> 00:21:03,200
will be explaining later on

534
00:21:03,200 --> 00:21:05,280
another thing is that the service ticket

535
00:21:05,280 --> 00:21:08,159
produced by the s4u proxy always have

536
00:21:08,159 --> 00:21:10,640
the affordable flag set

537
00:21:10,640 --> 00:21:12,640
and some of you might

538
00:21:12,640 --> 00:21:15,440
guess where i'm coming

539
00:21:15,440 --> 00:21:16,400
if you

540
00:21:16,400 --> 00:21:19,520
manage to do a nest for the proxy and

541
00:21:19,520 --> 00:21:21,360
include in the additional ticket a

542
00:21:21,360 --> 00:21:23,919
ticket produced by an s4u proxy

543
00:21:23,919 --> 00:21:26,000
you know as video proxy produces

544
00:21:26,000 --> 00:21:29,280
its ticket used then bias for your proxy

545
00:21:29,280 --> 00:21:31,520
then it will work because the flag will

546
00:21:31,520 --> 00:21:33,200
be present in the ticket

547
00:21:33,200 --> 00:21:35,520
but we will see that that later on

548
00:21:35,520 --> 00:21:37,600
everything stated here is just taken

549
00:21:37,600 --> 00:21:40,960
from the awesome and extensive blog post

550
00:21:40,960 --> 00:21:42,880
from eli shamir which you can see on the

551
00:21:42,880 --> 00:21:44,960
right walking the dog all the links will

552
00:21:44,960 --> 00:21:48,080
be in the deck link is already here um

553
00:21:48,080 --> 00:21:50,400
but do we really trust a random blog

554
00:21:50,400 --> 00:21:52,640
post on the internet you shouldn't well

555
00:21:52,640 --> 00:21:55,039
this is a this is far from being a

556
00:21:55,039 --> 00:21:56,960
random blog post i can assure you this

557
00:21:56,960 --> 00:21:59,360
takes months to digest but

558
00:21:59,360 --> 00:22:01,039
let's say that for the sake of this talk

559
00:22:01,039 --> 00:22:03,360
we will do the tests ourselves

560
00:22:03,360 --> 00:22:05,679
so let's begin with the tests for sv

561
00:22:05,679 --> 00:22:06,720
yourself

562
00:22:06,720 --> 00:22:08,320
let's say that our

563
00:22:08,320 --> 00:22:10,400
our service is not configured for

564
00:22:10,400 --> 00:22:12,400
delegation for any kind of delegation

565
00:22:12,400 --> 00:22:15,200
will the s4u itself work well the answer

566
00:22:15,200 --> 00:22:18,400
to that is yes it works but is the

567
00:22:18,400 --> 00:22:20,480
affordable flag present in the ticket

568
00:22:20,480 --> 00:22:21,840
the answer is no

569
00:22:21,840 --> 00:22:24,880
so let's move on to the second part

570
00:22:24,880 --> 00:22:27,360
what happens when the service that asks

571
00:22:27,360 --> 00:22:30,640
for the uh as for yourself is configured

572
00:22:30,640 --> 00:22:32,720
for kerberos constrained delegation

573
00:22:32,720 --> 00:22:35,760
without protocol transition

574
00:22:35,760 --> 00:22:38,159
um by a show of hands who can really

575
00:22:38,159 --> 00:22:40,320
read that slide

576
00:22:40,320 --> 00:22:42,960
no one okay awesome from the front rows

577
00:22:42,960 --> 00:22:45,760
i can assume that either the one the

578
00:22:45,760 --> 00:22:47,600
ones on the fourth

579
00:22:47,600 --> 00:22:50,000
on the four first rows don't really have

580
00:22:50,000 --> 00:22:50,960
uh

581
00:22:50,960 --> 00:22:52,720
you need vinyl

582
00:22:52,720 --> 00:22:55,840
glasses you need glasses

583
00:22:57,039 --> 00:22:58,640
okay so

584
00:22:58,640 --> 00:23:00,320
the affordable flag is not present in

585
00:23:00,320 --> 00:23:02,640
the ticket because here the service is

586
00:23:02,640 --> 00:23:04,559
not configured for uh protocol

587
00:23:04,559 --> 00:23:06,480
transition it doesn't have it it has

588
00:23:06,480 --> 00:23:08,000
constrained navigation without critical

589
00:23:08,000 --> 00:23:10,720
transition so the ticket issued by the

590
00:23:10,720 --> 00:23:12,400
service doesn't have the affordable flex

591
00:23:12,400 --> 00:23:14,880
set and for the ones for the majority

592
00:23:14,880 --> 00:23:16,720
who cannot read these slides but they

593
00:23:16,720 --> 00:23:18,159
will be they

594
00:23:18,159 --> 00:23:20,240
really are available online

595
00:23:20,240 --> 00:23:22,799
you should see that in the ticket

596
00:23:22,799 --> 00:23:24,400
somewhere right here but you cannot see

597
00:23:24,400 --> 00:23:27,440
my mouse um you have the username domain

598
00:23:27,440 --> 00:23:29,679
admin stated in the ticket it's the user

599
00:23:29,679 --> 00:23:31,280
i'm trying to impersonate to act on

600
00:23:31,280 --> 00:23:33,760
behalf of and then you have the target

601
00:23:33,760 --> 00:23:36,640
service which is the service that asked

602
00:23:36,640 --> 00:23:38,000
the s for yourself because that's where

603
00:23:38,000 --> 00:23:39,440
the self is obtaining a ticket for

604
00:23:39,440 --> 00:23:41,200
itself

605
00:23:41,200 --> 00:23:44,080
now what happens if we switch from no

606
00:23:44,080 --> 00:23:46,159
protocol transition to with protocol

607
00:23:46,159 --> 00:23:47,279
transition

608
00:23:47,279 --> 00:23:49,200
if you fall out

609
00:23:49,200 --> 00:23:50,400
you should

610
00:23:50,400 --> 00:23:51,279
have

611
00:23:51,279 --> 00:23:53,520
receive a service ticket after the s for

612
00:23:53,520 --> 00:23:55,600
you yourself with the affordable flag

613
00:23:55,600 --> 00:23:56,640
set

614
00:23:56,640 --> 00:23:59,600
and this is what happens exactly

615
00:23:59,600 --> 00:24:03,039
on the first command of the slide i used

616
00:24:03,039 --> 00:24:05,360
find delegation pi which is a script of

617
00:24:05,360 --> 00:24:08,159
in packet i'm not so fond of powershell

618
00:24:08,159 --> 00:24:11,679
myself so i'm using python here um but

619
00:24:11,679 --> 00:24:14,000
you can see that i mean you can guess

620
00:24:14,000 --> 00:24:16,080
trust me that the service configured for

621
00:24:16,080 --> 00:24:17,919
delegation is configured with protocol

622
00:24:17,919 --> 00:24:20,320
transition and what this does is that

623
00:24:20,320 --> 00:24:22,480
when calling the s for yourself

624
00:24:22,480 --> 00:24:24,480
extension the ticket obtained is

625
00:24:24,480 --> 00:24:25,840
configured

626
00:24:25,840 --> 00:24:26,640
with

627
00:24:26,640 --> 00:24:29,520
the affordable flag

628
00:24:29,679 --> 00:24:31,679
but then what happens if we keep the

629
00:24:31,679 --> 00:24:34,880
same configuration but instead of asking

630
00:24:34,880 --> 00:24:36,400
as for yourself

631
00:24:36,400 --> 00:24:39,440
to obtain a ticket as any other user

632
00:24:39,440 --> 00:24:41,200
let's say that we want to impersonate a

633
00:24:41,200 --> 00:24:44,159
protected user a user that should be

634
00:24:44,159 --> 00:24:47,840
protected uh against the legation well

635
00:24:47,840 --> 00:24:50,960
it's the same behavior for users set as

636
00:24:50,960 --> 00:24:54,000
members of the protected users group or

637
00:24:54,000 --> 00:24:55,600
users that are set sensitive for

638
00:24:55,600 --> 00:24:57,600
delegation it doesn't work i mean the s

639
00:24:57,600 --> 00:24:59,600
word itself works but the affordable

640
00:24:59,600 --> 00:25:00,799
flag said

641
00:25:00,799 --> 00:25:02,400
the affordable flag is not set in the

642
00:25:02,400 --> 00:25:04,400
ticket

643
00:25:04,400 --> 00:25:06,799
now what is the impact of all these

644
00:25:06,799 --> 00:25:09,600
tests i'm sure you found very boring on

645
00:25:09,600 --> 00:25:12,480
his food or proxy well

646
00:25:12,480 --> 00:25:14,559
with no delegation we obtained a ticket

647
00:25:14,559 --> 00:25:16,400
that didn't have the affordable flag set

648
00:25:16,400 --> 00:25:17,840
so it fails

649
00:25:17,840 --> 00:25:20,400
uh the last line of the s42 proxy

650
00:25:20,400 --> 00:25:22,320
command shows that

651
00:25:22,320 --> 00:25:23,679
actually the service doesn't have the

652
00:25:23,679 --> 00:25:25,919
delegation right because the ticket

653
00:25:25,919 --> 00:25:27,360
in fact doesn't have the affordable flex

654
00:25:27,360 --> 00:25:29,279
set

655
00:25:29,279 --> 00:25:31,840
second use case what happens with kcd

656
00:25:31,840 --> 00:25:34,320
but the pro the ticket issued by the s4

657
00:25:34,320 --> 00:25:35,760
itself didn't have the affordable flag

658
00:25:35,760 --> 00:25:37,279
set well

659
00:25:37,279 --> 00:25:39,600
this happens because the kcd was was

660
00:25:39,600 --> 00:25:41,200
configured without vertical transition

661
00:25:41,200 --> 00:25:44,480
well as we do proxy fails again

662
00:25:44,480 --> 00:25:46,880
but now what happens if

663
00:25:46,880 --> 00:25:48,799
the service was configured for a kcd

664
00:25:48,799 --> 00:25:50,799
with protocol transition the forwardable

665
00:25:50,799 --> 00:25:52,799
flag was set in the service ticket which

666
00:25:52,799 --> 00:25:54,880
means that when late when used later on

667
00:25:54,880 --> 00:25:56,799
with the s4 your proxy the s40 proxy

668
00:25:56,799 --> 00:25:59,360
succeeds and we see that the ticket

669
00:25:59,360 --> 00:26:01,520
obtained with us for you to proxy

670
00:26:01,520 --> 00:26:04,000
is actually targeting another resource

671
00:26:04,000 --> 00:26:05,679
resource stated in the list of

672
00:26:05,679 --> 00:26:07,600
delegation of the accounts

673
00:26:07,600 --> 00:26:11,039
acting as another user and then there is

674
00:26:11,039 --> 00:26:13,520
another use case i told you earlier that

675
00:26:13,520 --> 00:26:16,880
i would deep dive in rbcd you probably

676
00:26:16,880 --> 00:26:18,640
are fearing that moment that moment is

677
00:26:18,640 --> 00:26:19,520
coming

678
00:26:19,520 --> 00:26:22,080
winter is coming it's here the story of

679
00:26:22,080 --> 00:26:24,960
s for your proxy and rbcd

680
00:26:24,960 --> 00:26:25,760
so

681
00:26:25,760 --> 00:26:28,080
we have a service configured for rbcd

682
00:26:28,080 --> 00:26:30,320
and another service that is in in in

683
00:26:30,320 --> 00:26:33,440
this list is trying to obtain a ticket

684
00:26:33,440 --> 00:26:34,320
so

685
00:26:34,320 --> 00:26:35,760
he's trying to obtain that ticket using

686
00:26:35,760 --> 00:26:37,360
this for you to self

687
00:26:37,360 --> 00:26:39,200
because that service is not configured

688
00:26:39,200 --> 00:26:41,360
for kcd with protocol transition that s

689
00:26:41,360 --> 00:26:43,520
for your proxy 60 as for yourself sorry

690
00:26:43,520 --> 00:26:45,840
it succeeds but the ticket doesn't have

691
00:26:45,840 --> 00:26:48,000
the affordable flag set so

692
00:26:48,000 --> 00:26:50,559
if you followed the previous tests it

693
00:26:50,559 --> 00:26:53,120
should fail right the s42 proxy should

694
00:26:53,120 --> 00:26:55,520
reject the request and say come on man

695
00:26:55,520 --> 00:26:57,120
the additional ticket didn't have the

696
00:26:57,120 --> 00:26:59,039
affordable flex set so it doesn't work

697
00:26:59,039 --> 00:27:00,720
but in fact it does

698
00:27:00,720 --> 00:27:02,159
and

699
00:27:02,159 --> 00:27:03,360
why that

700
00:27:03,360 --> 00:27:05,120
well

701
00:27:05,120 --> 00:27:07,679
let's say let's see what microsoft has

702
00:27:07,679 --> 00:27:10,640
to say about this because here

703
00:27:10,640 --> 00:27:13,200
in fact the documentation is quite

704
00:27:13,200 --> 00:27:15,679
correct we just have to read it and then

705
00:27:15,679 --> 00:27:18,960
understand it and digest it what it says

706
00:27:18,960 --> 00:27:20,480
is that

707
00:27:20,480 --> 00:27:23,120
actually in order to accept ns4u proxy

708
00:27:23,120 --> 00:27:24,320
request

709
00:27:24,320 --> 00:27:26,720
you either have to have the affordable

710
00:27:26,720 --> 00:27:29,279
flag set on the service ticket used in

711
00:27:29,279 --> 00:27:30,640
the additional uh

712
00:27:30,640 --> 00:27:33,679
used in the request or you have to have

713
00:27:33,679 --> 00:27:36,640
the rbcd bit set in the request

714
00:27:36,640 --> 00:27:38,559
this bit is set by the client by the

715
00:27:38,559 --> 00:27:40,720
client who's doing the request so i was

716
00:27:40,720 --> 00:27:41,600
like

717
00:27:41,600 --> 00:27:44,799
come on man if you have affordable flag

718
00:27:44,799 --> 00:27:47,520
that is not set in the ticket can you

719
00:27:47,520 --> 00:27:49,840
with your client set the arbisity bit

720
00:27:49,840 --> 00:27:51,760
and then bypass all of this well the

721
00:27:51,760 --> 00:27:54,399
answer is no the kdc chooses that and if

722
00:27:54,399 --> 00:27:57,279
the obesity bit is set in the uh request

723
00:27:57,279 --> 00:27:59,760
he will double check that the service

724
00:27:59,760 --> 00:28:01,279
does indeed

725
00:28:01,279 --> 00:28:04,159
have is listed somewhere in the rbcd

726
00:28:04,159 --> 00:28:06,559
list of the target service

727
00:28:06,559 --> 00:28:09,200
so i was wondering then okay uh but are

728
00:28:09,200 --> 00:28:10,960
we sure about that uh

729
00:28:10,960 --> 00:28:13,840
do the tools that we use uh really

730
00:28:13,840 --> 00:28:16,159
include that well the answer is yes here

731
00:28:16,159 --> 00:28:18,320
is how rubios works with this which is

732
00:28:18,320 --> 00:28:20,720
the c-sharp toolset to manipulate and

733
00:28:20,720 --> 00:28:23,039
work with tickets and here is how impact

734
00:28:23,039 --> 00:28:24,640
works i won't go into the details

735
00:28:24,640 --> 00:28:26,640
because i think i don't have the time

736
00:28:26,640 --> 00:28:28,159
but i trust you to do that homework

737
00:28:28,159 --> 00:28:30,000
later on

738
00:28:30,000 --> 00:28:32,799
so now that you have all perfectly

739
00:28:32,799 --> 00:28:35,279
understood how the authentication works

740
00:28:35,279 --> 00:28:37,039
how the delegation works

741
00:28:37,039 --> 00:28:38,159
how the

742
00:28:38,159 --> 00:28:40,720
with or without protocol transition

743
00:28:40,720 --> 00:28:42,960
affects the mechanisms and how the s

744
00:28:42,960 --> 00:28:46,480
service for user extensions work

745
00:28:46,480 --> 00:28:50,399
let's talk a bit about abuses

746
00:28:55,279 --> 00:28:56,640
i'll let you some

747
00:28:56,640 --> 00:28:58,880
time to digest that meme

748
00:28:58,880 --> 00:29:01,039
which is i think of the highest quality

749
00:29:01,039 --> 00:29:02,480
ever

750
00:29:02,480 --> 00:29:04,720
okay so all right listen to this

751
00:29:04,720 --> 00:29:07,279
since s voodoo proxy produces affordable

752
00:29:07,279 --> 00:29:08,240
ticket

753
00:29:08,240 --> 00:29:11,039
why not use s for your proxy to obtain a

754
00:29:11,039 --> 00:29:13,120
ticket that meets the requirements of

755
00:29:13,120 --> 00:29:14,559
espio proxy

756
00:29:14,559 --> 00:29:16,480
that is genius i mean for the people

757
00:29:16,480 --> 00:29:19,039
that understood that because i took it

758
00:29:19,039 --> 00:29:21,039
took hours for me to understand and to

759
00:29:21,039 --> 00:29:24,080
digest but let's see this together

760
00:29:24,080 --> 00:29:27,279
we have three kind of scenarios we can

761
00:29:27,279 --> 00:29:29,440
we can tackle with the first one is the

762
00:29:29,440 --> 00:29:30,880
obesity trick

763
00:29:30,880 --> 00:29:34,399
let's say that the app o2 is configured

764
00:29:34,399 --> 00:29:36,720
for kcd without protocol transition

765
00:29:36,720 --> 00:29:38,320
meaning that yes for you to self will

766
00:29:38,320 --> 00:29:41,039
produce an unaffordable ticket and let's

767
00:29:41,039 --> 00:29:43,200
say that we have controlled

768
00:29:43,200 --> 00:29:45,520
we have control over that service

769
00:29:45,520 --> 00:29:48,000
this means that we can configure rbcd on

770
00:29:48,000 --> 00:29:50,080
this machine because computers have this

771
00:29:50,080 --> 00:29:51,520
right themselves

772
00:29:51,520 --> 00:29:53,520
and let's say we have control over

773
00:29:53,520 --> 00:29:56,480
another service let's say app01 this is

774
00:29:56,480 --> 00:29:58,240
possible thanks to the great mission

775
00:29:58,240 --> 00:30:00,399
account quota domain level setting that

776
00:30:00,399 --> 00:30:03,279
is set to 10 by default that allows any

777
00:30:03,279 --> 00:30:05,520
authenticating authenticated user on the

778
00:30:05,520 --> 00:30:08,240
domain to create and join up to 10

779
00:30:08,240 --> 00:30:09,679
mission accounts

780
00:30:09,679 --> 00:30:10,880
awesome

781
00:30:10,880 --> 00:30:13,279
i don't know why this this exists and

782
00:30:13,279 --> 00:30:15,919
it's not limited to admins but okay

783
00:30:15,919 --> 00:30:17,919
let's use that and abuse that

784
00:30:17,919 --> 00:30:19,840
so the scenario is

785
00:30:19,840 --> 00:30:21,919
you have control over app02 which is

786
00:30:21,919 --> 00:30:24,240
configured for kcd you configure rbcd on

787
00:30:24,240 --> 00:30:27,120
that you have control over app01 you use

788
00:30:27,120 --> 00:30:31,520
app01 with the specific rbcd mechanisms

789
00:30:31,520 --> 00:30:34,240
to obtain a ticket with this for you to

790
00:30:34,240 --> 00:30:35,600
proxy

791
00:30:35,600 --> 00:30:39,360
on behalf of another user for app02

792
00:30:39,360 --> 00:30:43,120
and what will happen here is that

793
00:30:43,120 --> 00:30:45,679
from app02 perspective

794
00:30:45,679 --> 00:30:47,919
you will receive something that really

795
00:30:47,919 --> 00:30:48,960
looks like

796
00:30:48,960 --> 00:30:51,760
a ticket produced by as for yourself

797
00:30:51,760 --> 00:30:54,399
but this ticket since it's produced by

798
00:30:54,399 --> 00:30:56,799
our bcd's as we do proxy will be for

799
00:30:56,799 --> 00:31:00,000
audible so you will be able to use this

800
00:31:00,000 --> 00:31:02,240
with this with us for your proxies for

801
00:31:02,240 --> 00:31:06,720
the kkcd part and it bypasses the whole

802
00:31:06,720 --> 00:31:09,039
i need the user authenticating to me

803
00:31:09,039 --> 00:31:10,240
requirement

804
00:31:10,240 --> 00:31:11,360
so

805
00:31:11,360 --> 00:31:15,279
i had planned or at least hoped to make

806
00:31:15,279 --> 00:31:16,799
a demo but

807
00:31:16,799 --> 00:31:19,679
there are a lot of concepts and i think

808
00:31:19,679 --> 00:31:21,519
you are starting to

809
00:31:21,519 --> 00:31:24,880
be hungry so let's uh jump

810
00:31:24,880 --> 00:31:27,440
right to the backup slides

811
00:31:27,440 --> 00:31:29,360
the uh first

812
00:31:29,360 --> 00:31:32,240
slide here you cannot see it trust me

813
00:31:32,240 --> 00:31:34,159
you have the service that is configured

814
00:31:34,159 --> 00:31:36,720
for kcd uh kerberos constraint

815
00:31:36,720 --> 00:31:38,480
delegation without protocol transition

816
00:31:38,480 --> 00:31:40,799
that is trying to do ns4 yourself it

817
00:31:40,799 --> 00:31:42,880
succeeds but the ticket obtained is not

818
00:31:42,880 --> 00:31:44,880
affordable so the

819
00:31:44,880 --> 00:31:47,760
kcd service cannot impersonate users out

820
00:31:47,760 --> 00:31:49,200
of thin air

821
00:31:49,200 --> 00:31:50,320
i mean

822
00:31:50,320 --> 00:31:53,440
right now but what happens if we create

823
00:31:53,440 --> 00:31:55,120
with add computer the first command we

824
00:31:55,120 --> 00:31:57,120
create a computer account called

825
00:31:57,120 --> 00:31:59,360
croissant and then use that computer

826
00:31:59,360 --> 00:32:02,320
account to do rbcd

827
00:32:02,320 --> 00:32:04,240
well the first step is to obtain an s

828
00:32:04,240 --> 00:32:06,480
for yourself ticket and you can see in

829
00:32:06,480 --> 00:32:08,559
the flags i mean guess i mean trust me

830
00:32:08,559 --> 00:32:10,960
that the flags here do not include the

831
00:32:10,960 --> 00:32:13,039
affordable flag but it doesn't matter

832
00:32:13,039 --> 00:32:15,760
because as you've seen from wolf wiggum

833
00:32:15,760 --> 00:32:16,559
uh

834
00:32:16,559 --> 00:32:18,480
this is special this is we are talking

835
00:32:18,480 --> 00:32:22,080
here about rbcd and rbcd doesn't really

836
00:32:22,080 --> 00:32:24,320
care about if the affordable flag is set

837
00:32:24,320 --> 00:32:25,600
on the ticket produced by us for

838
00:32:25,600 --> 00:32:28,880
yourself so here it's not affordable

839
00:32:28,880 --> 00:32:32,240
but it's forwarded anyway thanks to rbcd

840
00:32:32,240 --> 00:32:35,120
what happens is that we now have a

841
00:32:35,120 --> 00:32:38,080
second ticket which is a ticket aimed at

842
00:32:38,080 --> 00:32:40,880
the service configured for kcd

843
00:32:40,880 --> 00:32:43,519
as another user with affordable flex set

844
00:32:43,519 --> 00:32:44,640
on

845
00:32:44,640 --> 00:32:46,880
and it really mimics the mechanisms of

846
00:32:46,880 --> 00:32:49,039
this for yourself we now have a ticket

847
00:32:49,039 --> 00:32:50,399
that would be produced by us for

848
00:32:50,399 --> 00:32:52,640
yourself with protocol transition

849
00:32:52,640 --> 00:32:53,679
however

850
00:32:53,679 --> 00:32:55,519
the service is not configured for

851
00:32:55,519 --> 00:32:56,799
protocol transition is configured

852
00:32:56,799 --> 00:32:58,799
without it would require an incoming

853
00:32:58,799 --> 00:33:00,640
user authentication but now it doesn't

854
00:33:00,640 --> 00:33:02,799
and we can impersonate users out of thin

855
00:33:02,799 --> 00:33:04,880
air we can use that ticket in the

856
00:33:04,880 --> 00:33:06,799
additional ticket part of the yes for

857
00:33:06,799 --> 00:33:09,919
your proxy request and now say i want to

858
00:33:09,919 --> 00:33:12,320
act on the behalf of dominion domain

859
00:33:12,320 --> 00:33:13,200
admin

860
00:33:13,200 --> 00:33:16,720
on svo1 which is the actual target of

861
00:33:16,720 --> 00:33:18,399
this whole scenario

862
00:33:18,399 --> 00:33:21,039
and then i used that ticket and showed

863
00:33:21,039 --> 00:33:23,279
that in fact it's usable with a with a

864
00:33:23,279 --> 00:33:27,760
secret stump sam remote salmon lsa dump

865
00:33:27,760 --> 00:33:30,720
so the first scenario is really possible

866
00:33:30,720 --> 00:33:34,159
but it requires the creation of another

867
00:33:34,159 --> 00:33:35,919
mission account it requires the machine

868
00:33:35,919 --> 00:33:38,720
account quota set to 10 which usually is

869
00:33:38,720 --> 00:33:41,519
the fact when it's your client's first

870
00:33:41,519 --> 00:33:43,039
pen test engagement

871
00:33:43,039 --> 00:33:45,279
but on the second try you will not find

872
00:33:45,279 --> 00:33:46,320
that

873
00:33:46,320 --> 00:33:47,440
so

874
00:33:47,440 --> 00:33:50,159
let's just do self obesity we don't we

875
00:33:50,159 --> 00:33:52,480
do not need another computer account

876
00:33:52,480 --> 00:33:55,919
let's just say that app o2 is configured

877
00:33:55,919 --> 00:33:58,559
for rbcd for itself

878
00:33:58,559 --> 00:34:00,720
we can delegate to itself

879
00:34:00,720 --> 00:34:03,519
and with this we actually bypass the

880
00:34:03,519 --> 00:34:05,679
limitation of this for you to self

881
00:34:05,679 --> 00:34:08,239
which produces an unaffordable ticket

882
00:34:08,239 --> 00:34:10,239
that is that cannot be used with us for

883
00:34:10,239 --> 00:34:12,639
you to proxy with this mechanism you can

884
00:34:12,639 --> 00:34:14,960
chain the first test for yourself

885
00:34:14,960 --> 00:34:18,000
then an s4u proxy to self and then use

886
00:34:18,000 --> 00:34:20,320
that ticket to do the real estate proxy

887
00:34:20,320 --> 00:34:22,800
to sv1 and on the left i just did the

888
00:34:22,800 --> 00:34:24,639
test and it works

889
00:34:24,639 --> 00:34:26,480
and then you have the

890
00:34:26,480 --> 00:34:29,918
third scenario which is double kcd

891
00:34:29,918 --> 00:34:32,320
this is exactly the same

892
00:34:32,320 --> 00:34:35,359
thing as the rbcd trick uh just here

893
00:34:35,359 --> 00:34:38,239
let's say we have an app01 that is under

894
00:34:38,239 --> 00:34:40,399
our control and apple 2

895
00:34:40,399 --> 00:34:43,199
which we control also let's say up a1 is

896
00:34:43,199 --> 00:34:45,599
configured for this for kcd with

897
00:34:45,599 --> 00:34:48,159
protocol transition yes the s4u2 proxy

898
00:34:48,159 --> 00:34:50,159
will work and will allow

899
00:34:50,159 --> 00:34:52,639
like our bcd trick to obtain a ticket

900
00:34:52,639 --> 00:34:54,399
that mimics this for yourself on the

901
00:34:54,399 --> 00:34:56,560
apple 2 and this will bypass the

902
00:34:56,560 --> 00:34:58,960
limitation of this for you to proxy

903
00:34:58,960 --> 00:34:59,920
now

904
00:34:59,920 --> 00:35:04,079
we have seen the abuses case of uh of us

905
00:35:04,079 --> 00:35:07,359
figure proxy awesome are there any kind

906
00:35:07,359 --> 00:35:09,760
of scenarios and abuses we can do with

907
00:35:09,760 --> 00:35:11,599
us for yourself

908
00:35:11,599 --> 00:35:13,200
i'll let you guess the answer the answer

909
00:35:13,200 --> 00:35:15,359
is yes i wouldn't be talking about that

910
00:35:15,359 --> 00:35:19,520
if if it weren't the case so

911
00:35:19,599 --> 00:35:20,640
before

912
00:35:20,640 --> 00:35:22,720
talking about the abuses and the

913
00:35:22,720 --> 00:35:25,440
scenarios let's just remind or

914
00:35:25,440 --> 00:35:28,320
understand a few things two i mean uh

915
00:35:28,320 --> 00:35:30,720
the first thing is airs for yourself

916
00:35:30,720 --> 00:35:32,480
doesn't really

917
00:35:32,480 --> 00:35:35,200
take the delegation protection

918
00:35:35,200 --> 00:35:36,800
into consideration i mean it does

919
00:35:36,800 --> 00:35:38,640
because it doesn't include affordable

920
00:35:38,640 --> 00:35:41,760
flag in the ticket but it still produces

921
00:35:41,760 --> 00:35:43,680
a ticket right

922
00:35:43,680 --> 00:35:46,880
so wouldn't that ticket be usable and

923
00:35:46,880 --> 00:35:49,599
allow for local privilege escalation

924
00:35:49,599 --> 00:35:51,680
let's say you obtain a service ticket

925
00:35:51,680 --> 00:35:54,000
you act as the service and you obtain a

926
00:35:54,000 --> 00:35:56,800
service for yourself as a domain admin

927
00:35:56,800 --> 00:35:59,040
or local admin i mean this would be an

928
00:35:59,040 --> 00:36:01,680
lp right well the answer is yes but no

929
00:36:01,680 --> 00:36:04,320
because the ticket is issued for a

930
00:36:04,320 --> 00:36:07,119
service that is not valid the service is

931
00:36:07,119 --> 00:36:09,359
actually the name of the account that

932
00:36:09,359 --> 00:36:10,800
did the request

933
00:36:10,800 --> 00:36:11,760
but

934
00:36:11,760 --> 00:36:13,680
there is another thing

935
00:36:13,680 --> 00:36:15,839
the service name is not protected in the

936
00:36:15,839 --> 00:36:17,760
ticket and you can change it

937
00:36:17,760 --> 00:36:20,880
and will there be a check about that the

938
00:36:20,880 --> 00:36:23,359
answer is no you will be you should be

939
00:36:23,359 --> 00:36:26,800
able to modify the service name the s9

940
00:36:26,800 --> 00:36:29,520
the spn included in the ticket and make

941
00:36:29,520 --> 00:36:31,440
that ticket valid and usable

942
00:36:31,440 --> 00:36:33,599
and this is what i did here

943
00:36:33,599 --> 00:36:36,880
again you cannot read it trust me

944
00:36:36,880 --> 00:36:40,240
in the first ticket the service name is

945
00:36:40,240 --> 00:36:44,079
if i remember correctly self dash pc

946
00:36:44,079 --> 00:36:47,839
dash kcd dollar which is not valid but

947
00:36:47,839 --> 00:36:49,760
let's say that we want to use that

948
00:36:49,760 --> 00:36:52,160
ticket well let's just you know

949
00:36:52,160 --> 00:36:54,160
substitute that spn and change it

950
00:36:54,160 --> 00:36:56,400
because it's not protected

951
00:36:56,400 --> 00:36:58,480
and it works

952
00:36:58,480 --> 00:37:00,400
so

953
00:37:00,400 --> 00:37:02,800
we have two scenarios the first one is

954
00:37:02,800 --> 00:37:05,520
an lpe primitive and the other one is

955
00:37:05,520 --> 00:37:08,720
the stealthier silver ticket this is not

956
00:37:08,720 --> 00:37:11,359
really a lateral movement thing it's

957
00:37:11,359 --> 00:37:13,520
only a persistent thing but if you like

958
00:37:13,520 --> 00:37:15,440
to stay stealthy

959
00:37:15,440 --> 00:37:19,119
um i mean you'll like that one

960
00:37:19,119 --> 00:37:21,760
in order for the lpe primitive to work

961
00:37:21,760 --> 00:37:23,760
the first step is the tgt delegation

962
00:37:23,760 --> 00:37:24,560
trick

963
00:37:24,560 --> 00:37:26,480
this relies on the fact that microsoft

964
00:37:26,480 --> 00:37:29,520
virtual accounts like default app pool

965
00:37:29,520 --> 00:37:32,320
or the network service accounts on a

966
00:37:32,320 --> 00:37:34,960
windows machine can indeed on the

967
00:37:34,960 --> 00:37:37,359
network perspective acts on behalf of

968
00:37:37,359 --> 00:37:39,520
the machine so if you

969
00:37:39,520 --> 00:37:42,720
use ruby use which has a tgt delegation

970
00:37:42,720 --> 00:37:45,119
trick included in its features you can

971
00:37:45,119 --> 00:37:47,440
indeed obtain a tgt for the machine

972
00:37:47,440 --> 00:37:48,640
account

973
00:37:48,640 --> 00:37:50,400
and the machine account doesn't have

974
00:37:50,400 --> 00:37:52,880
admins privilege to itself but what it

975
00:37:52,880 --> 00:37:55,839
does it it actually handles the

976
00:37:55,839 --> 00:37:57,760
authentications and the access to the

977
00:37:57,760 --> 00:38:01,440
services that it handles so you can you

978
00:38:01,440 --> 00:38:04,400
know when you have knowledge about the

979
00:38:04,400 --> 00:38:06,079
service key the long-term key of a

980
00:38:06,079 --> 00:38:07,599
service you should be able to do a

981
00:38:07,599 --> 00:38:09,520
silver ticket and access that service

982
00:38:09,520 --> 00:38:12,400
with a forge pack and say you are let's

983
00:38:12,400 --> 00:38:13,839
say a local admin

984
00:38:13,839 --> 00:38:16,240
well this works

985
00:38:16,240 --> 00:38:19,280
a bit similarly you obtain a tgt use

986
00:38:19,280 --> 00:38:21,599
that tgt to make an s for yourself and

987
00:38:21,599 --> 00:38:24,160
say okay i want a ticket to myself

988
00:38:24,160 --> 00:38:27,520
as another user let's say a domain admin

989
00:38:27,520 --> 00:38:28,800
well this works

990
00:38:28,800 --> 00:38:30,320
the affordable flag is not set in the

991
00:38:30,320 --> 00:38:32,480
ticket but but we don't care really in

992
00:38:32,480 --> 00:38:34,320
fact because we don't use as we do proxy

993
00:38:34,320 --> 00:38:35,920
what we want to have access to is not a

994
00:38:35,920 --> 00:38:38,400
remote resource it's a resource itself

995
00:38:38,400 --> 00:38:41,040
that did the we we want local privilege

996
00:38:41,040 --> 00:38:43,200
escalation so it works

997
00:38:43,200 --> 00:38:45,440
but what happens when you try to do this

998
00:38:45,440 --> 00:38:48,480
with a user sensitive for delegation or

999
00:38:48,480 --> 00:38:51,520
a protected user against the legation

1000
00:38:51,520 --> 00:38:53,680
as for yourself is if i remember

1001
00:38:53,680 --> 00:38:56,160
correctly a delegation extension i mean

1002
00:38:56,160 --> 00:38:58,240
an extension linked to the legation so

1003
00:38:58,240 --> 00:39:00,400
it would it shouldn't work but it does

1004
00:39:00,400 --> 00:39:03,040
if you request an s for yourself with a

1005
00:39:03,040 --> 00:39:05,920
sensitive admin protective admin or or

1006
00:39:05,920 --> 00:39:07,760
something like this

1007
00:39:07,760 --> 00:39:09,680
and let's say in the same command you do

1008
00:39:09,680 --> 00:39:14,160
the spn substitution the tgs sub

1009
00:39:14,160 --> 00:39:16,400
well you will obtain a ticket that is

1010
00:39:16,400 --> 00:39:18,079
valid that doesn't have the affordable

1011
00:39:18,079 --> 00:39:20,640
flex set on but we really don't care and

1012
00:39:20,640 --> 00:39:22,480
that is usable

1013
00:39:22,480 --> 00:39:25,040
so we do use it and in the last command

1014
00:39:25,040 --> 00:39:27,040
you see that i

1015
00:39:27,040 --> 00:39:30,160
escalated from default app pool

1016
00:39:30,160 --> 00:39:32,000
with a

1017
00:39:32,000 --> 00:39:34,560
web server installed on the surface to

1018
00:39:34,560 --> 00:39:37,440
local admin and i dumped the sam and lsa

1019
00:39:37,440 --> 00:39:40,320
hashes and this is not a bug this is an

1020
00:39:40,320 --> 00:39:43,440
abuse so just again

1021
00:39:43,440 --> 00:39:47,119
this will stay in the long run

1022
00:39:47,280 --> 00:39:49,440
there is another scenario it's stealth

1023
00:39:49,440 --> 00:39:52,640
year silver ticket if you know the long

1024
00:39:52,640 --> 00:39:54,720
term key of a service you should be able

1025
00:39:54,720 --> 00:39:57,280
to construct and forge a ticket with a

1026
00:39:57,280 --> 00:40:00,800
pack uh stating that let's say your user

1027
00:40:00,800 --> 00:40:03,040
is part of all the groups of the domain

1028
00:40:03,040 --> 00:40:05,440
admins and it has the

1029
00:40:05,440 --> 00:40:08,560
500 air id or something like this

1030
00:40:08,560 --> 00:40:10,720
the only thing is that it's not really

1031
00:40:10,720 --> 00:40:12,720
stealthy because it's not stealth or

1032
00:40:12,720 --> 00:40:14,000
stealthy i don't know

1033
00:40:14,000 --> 00:40:15,680
the thing is that primitive that

1034
00:40:15,680 --> 00:40:16,880
primitive is

1035
00:40:16,880 --> 00:40:19,040
quite known and it's monitored all the

1036
00:40:19,040 --> 00:40:20,880
way usually

1037
00:40:20,880 --> 00:40:22,880
but what about as for yourself

1038
00:40:22,880 --> 00:40:26,319
as food itself is far less known

1039
00:40:26,319 --> 00:40:28,160
not monitored as much

1040
00:40:28,160 --> 00:40:30,640
and it has a legitimate pack in the

1041
00:40:30,640 --> 00:40:32,960
ticket it's a real ticket issued by the

1042
00:40:32,960 --> 00:40:34,160
kdc

1043
00:40:34,160 --> 00:40:36,480
so why not use it instead of a silver

1044
00:40:36,480 --> 00:40:40,000
ticket well the answer is yes use it

1045
00:40:40,000 --> 00:40:41,920
okay so

1046
00:40:41,920 --> 00:40:44,800
let's wrap things up i'm sure i mean i

1047
00:40:44,800 --> 00:40:48,160
hope some of you have questions um but i

1048
00:40:48,160 --> 00:40:50,720
don't like to be surprised so i try to

1049
00:40:50,720 --> 00:40:53,280
guess a bit of those questions i guessed

1050
00:40:53,280 --> 00:40:56,000
three of those the first one is okay

1051
00:40:56,000 --> 00:40:58,400
charlie you explained to us that the spn

1052
00:40:58,400 --> 00:41:00,160
is not protected in the ticket and we

1053
00:41:00,160 --> 00:41:01,599
can change it but how about the

1054
00:41:01,599 --> 00:41:04,160
affordable flag the affordable flag is

1055
00:41:04,160 --> 00:41:05,680
the requirement for us for your proxy

1056
00:41:05,680 --> 00:41:09,040
work right so if we take a ticket edit

1057
00:41:09,040 --> 00:41:10,960
that affordable flag which is not in the

1058
00:41:10,960 --> 00:41:12,560
encrypted part of the ticket it should

1059
00:41:12,560 --> 00:41:14,880
work and the answer is yes i mean no it

1060
00:41:14,880 --> 00:41:17,520
worked for a while because that cve was

1061
00:41:17,520 --> 00:41:20,560
disclosed in 2021 and now this is

1062
00:41:20,560 --> 00:41:22,800
patched so it doesn't work anymore now

1063
00:41:22,800 --> 00:41:25,280
the kdc makes additional checks to

1064
00:41:25,280 --> 00:41:26,880
check that indeed you should have

1065
00:41:26,880 --> 00:41:29,280
affordable flag set

1066
00:41:29,280 --> 00:41:30,480
okay now

1067
00:41:30,480 --> 00:41:32,160
you should have a second question how to

1068
00:41:32,160 --> 00:41:34,319
mitigate all this how to protect against

1069
00:41:34,319 --> 00:41:35,119
this

1070
00:41:35,119 --> 00:41:37,520
well don't take my word for it just take

1071
00:41:37,520 --> 00:41:39,040
microsoft's one

1072
00:41:39,040 --> 00:41:41,359
you just have to understand that as for

1073
00:41:41,359 --> 00:41:42,960
yourself and as for your proxy

1074
00:41:42,960 --> 00:41:45,680
extensions are really dangerous and you

1075
00:41:45,680 --> 00:41:47,920
just only have to protect all your

1076
00:41:47,920 --> 00:41:50,000
services that use those

1077
00:41:50,000 --> 00:41:52,079
like you would protect your kdc your

1078
00:41:52,079 --> 00:41:54,240
domain controller of course why didn't i

1079
00:41:54,240 --> 00:41:56,480
think about that uh yeah yeah yeah that

1080
00:41:56,480 --> 00:41:58,960
is um that is rich okay so last

1081
00:41:58,960 --> 00:42:00,960
questions usually this question is

1082
00:42:00,960 --> 00:42:02,400
turned the other way around

1083
00:42:02,400 --> 00:42:05,520
people like waldo infuriate me because

1084
00:42:05,520 --> 00:42:08,400
they always use powershell which i don't

1085
00:42:08,400 --> 00:42:09,920
really like because i don't understand

1086
00:42:09,920 --> 00:42:10,560
it

1087
00:42:10,560 --> 00:42:13,200
so how can we use this from

1088
00:42:13,200 --> 00:42:15,280
linux well

1089
00:42:15,280 --> 00:42:16,880
that would be petty of you because i

1090
00:42:16,880 --> 00:42:18,720
showed you how to exploit it from linux

1091
00:42:18,720 --> 00:42:21,040
not from windows i assume this would be

1092
00:42:21,040 --> 00:42:22,880
your question so i made a quick

1093
00:42:22,880 --> 00:42:24,640
equivalence table between the tools

1094
00:42:24,640 --> 00:42:27,040
available from uh rubios and the tools

1095
00:42:27,040 --> 00:42:29,119
available from impact so now you have

1096
00:42:29,119 --> 00:42:31,359
this and uh

1097
00:42:31,359 --> 00:42:34,000
you have also this i

1098
00:42:34,000 --> 00:42:36,240
did the effort here i did the homework

1099
00:42:36,240 --> 00:42:38,800
uh i tackled a bit with rubios i never

1100
00:42:38,800 --> 00:42:40,720
do so

1101
00:42:40,720 --> 00:42:42,640
that that is probably why it's not

1102
00:42:42,640 --> 00:42:44,720
readable because i don't want you to see

1103
00:42:44,720 --> 00:42:45,839
what i did

1104
00:42:45,839 --> 00:42:48,560
you will see in the online slides

1105
00:42:48,560 --> 00:42:51,599
i just did the double kcd scenario with

1106
00:42:51,599 --> 00:42:54,000
rubios it works it's just too small for

1107
00:42:54,000 --> 00:42:57,520
you to read and it is great for me

1108
00:42:57,520 --> 00:43:00,160
so uh this is the end of the foreseeing

1109
00:43:00,160 --> 00:43:01,920
questions we can now get to the

1110
00:43:01,920 --> 00:43:03,760
acknowledgements part

1111
00:43:03,760 --> 00:43:06,000
really again if you are interested by

1112
00:43:06,000 --> 00:43:08,240
this and if you are not asleep yet just

1113
00:43:08,240 --> 00:43:11,200
wake up and now you can see all the

1114
00:43:11,200 --> 00:43:13,040
links and resources i used and the ones

1115
00:43:13,040 --> 00:43:16,160
i quotes uh i quoted like illachamir

1116
00:43:16,160 --> 00:43:19,359
that wrote again an extensive and

1117
00:43:19,359 --> 00:43:21,920
undigestable blog post about this

1118
00:43:21,920 --> 00:43:24,160
everything is written here there

1119
00:43:24,160 --> 00:43:26,640
with reviews so if you want to see what

1120
00:43:26,640 --> 00:43:28,640
it's used how we can abuse this with

1121
00:43:28,640 --> 00:43:30,880
linux uh go back to my slides

1122
00:43:30,880 --> 00:43:33,520
and then we have uh articles about uh

1123
00:43:33,520 --> 00:43:37,359
s4u about kerberos uh did uh that will

1124
00:43:37,359 --> 00:43:40,480
schroeder uh jorgen uh charlie clark

1125
00:43:40,480 --> 00:43:42,560
snow crash and pixies wrote and these

1126
00:43:42,560 --> 00:43:44,560
are awesome articles

1127
00:43:44,560 --> 00:43:47,760
if you want the links here they are um

1128
00:43:47,760 --> 00:43:50,240
i also included my own links

1129
00:43:50,240 --> 00:43:52,800
you know shameless self plug

1130
00:43:52,800 --> 00:43:54,400
you have the links from the hacker

1131
00:43:54,400 --> 00:43:57,280
recipes which is the blog post and

1132
00:43:57,280 --> 00:43:59,599
website i hope i had found when i

1133
00:43:59,599 --> 00:44:03,280
started my journey into active directory

1134
00:44:03,280 --> 00:44:05,839
you will also find

1135
00:44:05,839 --> 00:44:07,200
an

1136
00:44:07,200 --> 00:44:08,000
and

1137
00:44:08,000 --> 00:44:09,839
you will not be unable to understand

1138
00:44:09,839 --> 00:44:12,000
these mind maps because i'm not able to

1139
00:44:12,000 --> 00:44:13,920
understand them myself even if i made

1140
00:44:13,920 --> 00:44:16,960
them myself but here they are and if one

1141
00:44:16,960 --> 00:44:19,280
day you find yourself tackling against

1142
00:44:19,280 --> 00:44:20,560
delegation

1143
00:44:20,560 --> 00:44:22,480
you have these those mind maps that tell

1144
00:44:22,480 --> 00:44:24,160
you step by step what to do in each

1145
00:44:24,160 --> 00:44:25,760
scenario

1146
00:44:25,760 --> 00:44:28,240
also i included a glossary because when

1147
00:44:28,240 --> 00:44:31,119
people call an nt hash and ntlm hash and

1148
00:44:31,119 --> 00:44:34,480
call an ntlm response an end net ntlm

1149
00:44:34,480 --> 00:44:37,119
hash i mean everyone is just fed up with

1150
00:44:37,119 --> 00:44:39,920
this don't call a service ticket atgs

1151
00:44:39,920 --> 00:44:41,599
this is the service well the glossary is

1152
00:44:41,599 --> 00:44:42,400
here

1153
00:44:42,400 --> 00:44:45,599
i mean my glossary at least

1154
00:44:45,599 --> 00:44:48,240
for the tooling you have all the list of

1155
00:44:48,240 --> 00:44:50,800
the tools i used and want to highlight

1156
00:44:50,800 --> 00:44:53,040
in these slides you have find delegation

1157
00:44:53,040 --> 00:44:54,560
get together get a c describe ticket

1158
00:44:54,560 --> 00:44:56,720
ticket converter and so on which are

1159
00:44:56,720 --> 00:44:59,440
script examples you can find on impact

1160
00:44:59,440 --> 00:45:01,599
if you want to do these tests yourself

1161
00:45:01,599 --> 00:45:03,920
just keep in mind that there are still

1162
00:45:03,920 --> 00:45:05,440
some of my pull requests that are

1163
00:45:05,440 --> 00:45:07,760
pending everything is not merged yet but

1164
00:45:07,760 --> 00:45:10,160
you can do those merges yourself and use

1165
00:45:10,160 --> 00:45:11,760
those uh those um

1166
00:45:11,760 --> 00:45:14,160
those tools if you do not want

1167
00:45:14,160 --> 00:45:17,200
are too lazy to uh do those merges

1168
00:45:17,200 --> 00:45:19,920
yourself you can use exigal which is

1169
00:45:19,920 --> 00:45:21,599
my

1170
00:45:21,599 --> 00:45:24,720
docker container multi-container i mean

1171
00:45:24,720 --> 00:45:26,880
it's perfect it replaces completely kali

1172
00:45:26,880 --> 00:45:28,480
linux which i find

1173
00:45:28,480 --> 00:45:30,319
really really great

1174
00:45:30,319 --> 00:45:33,920
and you also have a rubio's bloodhound

1175
00:45:33,920 --> 00:45:36,240
and the hacker recipes in the list

1176
00:45:36,240 --> 00:45:38,800
are there any questions left for you to

1177
00:45:38,800 --> 00:45:40,480
ask me

1178
00:45:40,480 --> 00:45:41,839
please do not

1179
00:45:41,839 --> 00:45:43,839
corner me i don't know a thing

1180
00:45:43,839 --> 00:45:45,119
i think we'll start by thanking you for

1181
00:45:45,119 --> 00:45:46,920
the talk that's very good

1182
00:45:46,920 --> 00:45:49,250
[Applause]

1183
00:45:49,250 --> 00:45:50,890
[Music]

1184
00:45:50,890 --> 00:45:55,119
[Applause]

1185
00:45:55,119 --> 00:45:57,920
hey hi thank you for the talk nice talk

1186
00:45:57,920 --> 00:46:00,000
so i've

1187
00:46:00,000 --> 00:46:02,000
i have a question which regards like

1188
00:46:02,000 --> 00:46:04,160
this privilege escalation

1189
00:46:04,160 --> 00:46:06,160
so do you think with the data and

1190
00:46:06,160 --> 00:46:08,240
information you leak it would be

1191
00:46:08,240 --> 00:46:10,240
possible to make a ransomware out of

1192
00:46:10,240 --> 00:46:13,439
this vulnerability

1193
00:46:13,520 --> 00:46:16,079
should i answer that question

1194
00:46:16,079 --> 00:46:17,760
i'm not really sure

1195
00:46:17,760 --> 00:46:21,680
um first of all bonjourno

1196
00:46:24,319 --> 00:46:27,040
i guess so i think if you have access to

1197
00:46:27,040 --> 00:46:29,839
the service if you know the key the only

1198
00:46:29,839 --> 00:46:33,359
limit here is that for the lpe trick you

1199
00:46:33,359 --> 00:46:35,440
really do need to have access to the

1200
00:46:35,440 --> 00:46:38,400
machine for the tgt delegation trick but

1201
00:46:38,400 --> 00:46:40,240
if you know the service key the machine

1202
00:46:40,240 --> 00:46:42,240
account key you should be able to

1203
00:46:42,240 --> 00:46:44,400
generate silver tickets i mean

1204
00:46:44,400 --> 00:46:46,319
equivalence to silver tickets you should

1205
00:46:46,319 --> 00:46:49,440
do the yes where you do self yourself

1206
00:46:49,440 --> 00:46:51,119
but if you do not know that key and need

1207
00:46:51,119 --> 00:46:53,119
the tgt for the s4 yourself you would

1208
00:46:53,119 --> 00:46:55,520
need an access to the machine which is

1209
00:46:55,520 --> 00:46:57,680
not really that convenient for

1210
00:46:57,680 --> 00:47:00,319
ransomware perspective

1211
00:47:00,319 --> 00:47:04,720
okay well a little bit of work to do but

1212
00:47:05,920 --> 00:47:09,640
answer me for who

1213
00:47:11,500 --> 00:47:14,400
[Music]

1214
00:47:14,400 --> 00:47:15,280
yeah

1215
00:47:15,280 --> 00:47:17,599
um do you know if it's possible to make

1216
00:47:17,599 --> 00:47:20,800
a use case based uh in order to detect

1217
00:47:20,800 --> 00:47:23,599
those attack based on the

1218
00:47:23,599 --> 00:47:27,280
microsoft event logs

1219
00:47:27,280 --> 00:47:28,559
i guess so

1220
00:47:28,559 --> 00:47:30,720
but my experience and knowledge about

1221
00:47:30,720 --> 00:47:33,119
this is close to the ground so i have no

1222
00:47:33,119 --> 00:47:34,319
answer for you

1223
00:47:34,319 --> 00:47:35,920
but i guess so

1224
00:47:35,920 --> 00:47:38,160
okay i guess you could maybe tr uh put

1225
00:47:38,160 --> 00:47:40,000
some triggers on the calls for

1226
00:47:40,000 --> 00:47:41,599
extensions for yourself as for your

1227
00:47:41,599 --> 00:47:42,640
proxy

1228
00:47:42,640 --> 00:47:45,040
i guess

1229
00:47:46,720 --> 00:47:48,559
hi thanks a lot for your talk

1230
00:47:48,559 --> 00:47:51,200
i had a question about

1231
00:47:51,200 --> 00:47:55,119
whether this applies only to kerberos

1232
00:47:55,119 --> 00:47:57,440
for microsoft or would it apply like

1233
00:47:57,440 --> 00:48:00,220
would these extensions exist elsewhere

1234
00:48:00,220 --> 00:48:02,480
[Music]

1235
00:48:02,480 --> 00:48:04,160
if i remember correctly but i'm not

1236
00:48:04,160 --> 00:48:06,720
really sure about that i think those

1237
00:48:06,720 --> 00:48:08,079
extensions

1238
00:48:08,079 --> 00:48:10,000
are

1239
00:48:10,000 --> 00:48:11,839
are microsoft products but i'm not

1240
00:48:11,839 --> 00:48:12,960
really sure

1241
00:48:12,960 --> 00:48:14,880
this is a great question because i

1242
00:48:14,880 --> 00:48:16,800
wonder what would happen in environments

1243
00:48:16,800 --> 00:48:18,800
that implement kerberos without having

1244
00:48:18,800 --> 00:48:21,839
the microsoft ecosystem it's a really

1245
00:48:21,839 --> 00:48:23,440
great question and

1246
00:48:23,440 --> 00:48:26,000
i don't have a particular answer to that

1247
00:48:26,000 --> 00:48:27,760
but i will do the research it's yeah i

1248
00:48:27,760 --> 00:48:31,319
didn't think about that

1249
00:48:38,050 --> 00:48:41,219
[Music]

1250
00:48:42,960 --> 00:48:45,440
uh thanks for the great talk i have two

1251
00:48:45,440 --> 00:48:48,480
questions uh the first one is uh do you

1252
00:48:48,480 --> 00:48:50,800
know why as for yourself

1253
00:48:50,800 --> 00:48:52,720
works kinda

1254
00:48:52,720 --> 00:48:53,760
for the

1255
00:48:53,760 --> 00:48:55,920
accounts that are protected why is the

1256
00:48:55,920 --> 00:48:57,839
tickets returned in the first place is

1257
00:48:57,839 --> 00:49:00,720
there any legitimate cause for that

1258
00:49:00,720 --> 00:49:02,800
if you're talking about um

1259
00:49:02,800 --> 00:49:04,720
the point that waldo made earlier that

1260
00:49:04,720 --> 00:49:06,640
is understanding the intent

1261
00:49:06,640 --> 00:49:08,400
i do not know

1262
00:49:08,400 --> 00:49:09,520
i don't know

1263
00:49:09,520 --> 00:49:11,200
i don't know why the s for yourself

1264
00:49:11,200 --> 00:49:12,720
still produces a ticket that is not

1265
00:49:12,720 --> 00:49:15,440
affordable i have really no

1266
00:49:15,440 --> 00:49:16,960
uh if i remember correctly it's a

1267
00:49:16,960 --> 00:49:19,839
feature by microsoft because it allows

1268
00:49:19,839 --> 00:49:21,040
the

1269
00:49:21,040 --> 00:49:23,839
microsoft virtual account to react on

1270
00:49:23,839 --> 00:49:26,160
behalf of other services but that's my

1271
00:49:26,160 --> 00:49:27,119
guess

1272
00:49:27,119 --> 00:49:29,440
i'm not sure i don't know

1273
00:49:29,440 --> 00:49:33,200
if there's anyone from ms here

1274
00:49:35,440 --> 00:49:37,680
thanks and the second question is i do

1275
00:49:37,680 --> 00:49:41,119
know of any way to remove remove the

1276
00:49:41,119 --> 00:49:43,119
user has to authenticate to the service

1277
00:49:43,119 --> 00:49:45,440
requirement for the unconstrained

1278
00:49:45,440 --> 00:49:47,680
delegation as you did for constraint is

1279
00:49:47,680 --> 00:49:50,240
there any way that you know yep i

1280
00:49:50,240 --> 00:49:52,079
wondered that myself

1281
00:49:52,079 --> 00:49:53,119
because

1282
00:49:53,119 --> 00:49:55,119
since unconstrained delegation is

1283
00:49:55,119 --> 00:49:56,960
like its name implies unconstrained and

1284
00:49:56,960 --> 00:49:58,800
you can target any

1285
00:49:58,800 --> 00:50:01,520
service it's a very good question let me

1286
00:50:01,520 --> 00:50:04,480
get back to the slide

1287
00:50:07,920 --> 00:50:10,800
yep so um the answer is no because

1288
00:50:10,800 --> 00:50:13,200
unconstrained delegation doesn't um

1289
00:50:13,200 --> 00:50:16,800
rely on s4u extensions it relies on a

1290
00:50:16,800 --> 00:50:19,440
tgt delegation when the

1291
00:50:19,440 --> 00:50:21,440
user wants to access the service that is

1292
00:50:21,440 --> 00:50:23,119
set for unconstrained allegation there

1293
00:50:23,119 --> 00:50:24,559
is no ways for yourself there is no

1294
00:50:24,559 --> 00:50:27,599
aspirated proxy the tgt of the user is

1295
00:50:27,599 --> 00:50:30,000
in fact

1296
00:50:30,079 --> 00:50:32,800
packed and put into the service ticket

1297
00:50:32,800 --> 00:50:36,079
for the service and when the

1298
00:50:36,079 --> 00:50:38,160
kud service will receive that ticket he

1299
00:50:38,160 --> 00:50:41,119
will unpack it take the tgt and use that

1300
00:50:41,119 --> 00:50:43,920
tgt as if it was his own

1301
00:50:43,920 --> 00:50:45,680
so in a way and constrained delegation

1302
00:50:45,680 --> 00:50:48,800
is safer in this regard

1303
00:50:48,800 --> 00:50:50,079
kinda

1304
00:50:50,079 --> 00:50:52,839
i didn't no no no no

1305
00:50:52,839 --> 00:50:56,559
no mean in a sense yes because you

1306
00:50:56,559 --> 00:50:58,640
wouldn't need another requirement which

1307
00:50:58,640 --> 00:51:00,800
is the coercion the authentication

1308
00:51:00,800 --> 00:51:02,240
conversion of the

1309
00:51:02,240 --> 00:51:05,119
user you want to impersonate but i mean

1310
00:51:05,119 --> 00:51:07,839
this exists you have printerbug which

1311
00:51:07,839 --> 00:51:10,559
relies on an abuse of msrprn you have

1312
00:51:10,559 --> 00:51:14,640
msc fsr us you have ms fsrvp to coerce

1313
00:51:14,640 --> 00:51:16,880
uh machine authentications and then you

1314
00:51:16,880 --> 00:51:19,599
have lots of other mechanisms to poison

1315
00:51:19,599 --> 00:51:22,640
and spoof in the network like llmr

1316
00:51:22,640 --> 00:51:25,760
adidns the hcp v6 you have lots of those

1317
00:51:25,760 --> 00:51:26,880
so

1318
00:51:26,880 --> 00:51:29,440
usually obtaining an authentication is

1319
00:51:29,440 --> 00:51:30,800
not really the

1320
00:51:30,800 --> 00:51:34,079
biggest issue there

1321
00:51:35,599 --> 00:51:39,559
don't use unconstrained delegation

1322
00:51:48,070 --> 00:51:51,520
[Music]

1323
00:51:51,520 --> 00:51:54,319
uh thank you for the great talk uh

1324
00:51:54,319 --> 00:51:56,079
do you have any

1325
00:51:56,079 --> 00:51:58,240
recommendations on how to defend against

1326
00:51:58,240 --> 00:52:00,160
this other than just protect your

1327
00:52:00,160 --> 00:52:02,720
services

1328
00:52:02,720 --> 00:52:05,839
wait a bit

1329
00:52:07,280 --> 00:52:08,559
here you go

1330
00:52:08,559 --> 00:52:10,640
yes do you have any other

1331
00:52:10,640 --> 00:52:12,480
than the big redness i'm just messing

1332
00:52:12,480 --> 00:52:13,680
with you man

1333
00:52:13,680 --> 00:52:15,119
i have no idea

1334
00:52:15,119 --> 00:52:16,640
i like to abuse things i don't like to

1335
00:52:16,640 --> 00:52:19,839
protect them

1336
00:52:23,040 --> 00:52:24,720
other yeah

1337
00:52:24,720 --> 00:52:26,000
let me think about that

1338
00:52:26,000 --> 00:52:27,760
remove the uh

1339
00:52:27,760 --> 00:52:30,240
10 value of the machine account quota

1340
00:52:30,240 --> 00:52:32,000
to prevent users from creating machine

1341
00:52:32,000 --> 00:52:35,200
accounts uh set a trigger an event log

1342
00:52:35,200 --> 00:52:36,400
when uh

1343
00:52:36,400 --> 00:52:38,240
unauthenticated i mean authenticated

1344
00:52:38,240 --> 00:52:40,640
users with standard privilege create a

1345
00:52:40,640 --> 00:52:43,280
computer account uh

1346
00:52:43,280 --> 00:52:45,920
and maybe do some behavioral analysis

1347
00:52:45,920 --> 00:52:49,200
when rbcd is chained with kcd right

1348
00:52:49,200 --> 00:52:51,760
after when when there are two

1349
00:52:51,760 --> 00:52:53,599
delegations implied with the same

1350
00:52:53,599 --> 00:52:55,760
service there should be something wrong

1351
00:52:55,760 --> 00:52:57,359
here

1352
00:52:57,359 --> 00:52:59,040
but that's my take i'm not the one who

1353
00:52:59,040 --> 00:53:01,839
defends

1354
00:53:03,359 --> 00:53:05,200
all right great thanks again charlie

1355
00:53:05,200 --> 00:53:06,810
thank you for listening

1356
00:53:06,810 --> 00:53:11,509
[Applause]

