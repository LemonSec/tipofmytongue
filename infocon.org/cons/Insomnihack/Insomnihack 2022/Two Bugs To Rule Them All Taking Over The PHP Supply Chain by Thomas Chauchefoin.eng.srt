1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,360 --> 00:00:14,799
all right hello

3
00:00:14,799 --> 00:00:17,199
is it working yeah awesome so uh like

4
00:00:17,199 --> 00:00:19,439
you said uh thank you for joining uh i

5
00:00:19,439 --> 00:00:20,640
will be talking about taking over the

6
00:00:20,640 --> 00:00:22,800
php supply chain if if you don't know if

7
00:00:22,800 --> 00:00:24,800
you want to stay because you saw php as

8
00:00:24,800 --> 00:00:26,480
a clickbaity title would be find silly

9
00:00:26,480 --> 00:00:29,119
bugs and own 20 of the internet no i

10
00:00:29,119 --> 00:00:30,400
hope it's not for you

11
00:00:30,400 --> 00:00:32,399
my name is thomas i go by subjects on

12
00:00:32,399 --> 00:00:34,719
twitter and i have an offensive security

13
00:00:34,719 --> 00:00:36,079
background i used to do pen testing and

14
00:00:36,079 --> 00:00:38,079
blood bounty and nowadays i'm a d

15
00:00:38,079 --> 00:00:40,559
researcher at the snow r d team uh with

16
00:00:40,559 --> 00:00:42,399
sonar will build a product to meet to

17
00:00:42,399 --> 00:00:43,840
make clinker to our developers to write

18
00:00:43,840 --> 00:00:47,039
clean code and cheap sequel software and

19
00:00:47,039 --> 00:00:48,719
on our research on opensuse project we

20
00:00:48,719 --> 00:00:52,000
uncovered last year more than 40 like i

21
00:00:52,000 --> 00:00:54,239
or critical vulnerabilities and we got

22
00:00:54,239 --> 00:00:56,480
3.0 over the nomination including one

23
00:00:56,480 --> 00:00:57,680
for this talk

24
00:00:57,680 --> 00:01:00,239
as like the most underhyped research of

25
00:01:00,239 --> 00:01:01,359
the year

26
00:01:01,359 --> 00:01:03,280
which is i guess i'm not making a

27
00:01:03,280 --> 00:01:05,199
clickbaity enough titles

28
00:01:05,199 --> 00:01:06,799
but we didn't win but still we felt

29
00:01:06,799 --> 00:01:09,119
really really honored to be nominated

30
00:01:09,119 --> 00:01:11,520
and today i wanted to give you some

31
00:01:11,520 --> 00:01:13,439
background knowledge on package managers

32
00:01:13,439 --> 00:01:15,439
like what are package managers what are

33
00:01:15,439 --> 00:01:16,640
supply chain attacks because it's kind

34
00:01:16,640 --> 00:01:18,960
of a buzzword and i'll try to give you

35
00:01:18,960 --> 00:01:21,280
some some more information about this

36
00:01:21,280 --> 00:01:24,479
term and also a little bit of php and

37
00:01:24,479 --> 00:01:25,759
then we'll show you how we could

38
00:01:25,759 --> 00:01:28,080
compromise two package managers and the

39
00:01:28,080 --> 00:01:29,920
impact he would have across the php

40
00:01:29,920 --> 00:01:32,320
ecosystem and then

41
00:01:32,320 --> 00:01:35,280
like a small talk about like uh blue art

42
00:01:35,280 --> 00:01:37,680
stuff like how to mitigate the impact of

43
00:01:37,680 --> 00:01:39,360
search backs and then the usual

44
00:01:39,360 --> 00:01:41,680
conclusion and question and answers

45
00:01:41,680 --> 00:01:42,479
so

46
00:01:42,479 --> 00:01:44,720
um tight lift which is software company

47
00:01:44,720 --> 00:01:47,040
they estimated at 92 percent of all

48
00:01:47,040 --> 00:01:48,880
commercial software are using open

49
00:01:48,880 --> 00:01:50,560
source components so in every single

50
00:01:50,560 --> 00:01:52,000
piece of software you use there's

51
00:01:52,000 --> 00:01:54,000
probably some open source stuff so you

52
00:01:54,000 --> 00:01:56,960
need to find a way to include configure

53
00:01:56,960 --> 00:01:59,360
update install this little piece of open

54
00:01:59,360 --> 00:02:02,240
source software in some bigger pieces so

55
00:02:02,240 --> 00:02:04,719
for the for this task you use as package

56
00:02:04,719 --> 00:02:06,640
manager and

57
00:02:06,640 --> 00:02:08,639
you may already know package managers

58
00:02:08,639 --> 00:02:11,360
with like on debian ubuntu like apt

59
00:02:11,360 --> 00:02:12,959
installing software and it's not in

60
00:02:12,959 --> 00:02:15,200
scope for stock we'll be only be talking

61
00:02:15,200 --> 00:02:17,520
about packet managers for developers so

62
00:02:17,520 --> 00:02:19,280
it's whichever

63
00:02:19,280 --> 00:02:21,599
tool you use to download new front-end

64
00:02:21,599 --> 00:02:23,360
libraries for shiny buttons for your

65
00:02:23,360 --> 00:02:24,400
interface

66
00:02:24,400 --> 00:02:26,400
payment provider apis because you need

67
00:02:26,400 --> 00:02:28,239
to interface with people or print tree

68
00:02:28,239 --> 00:02:30,319
or stripe just you name it like any

69
00:02:30,319 --> 00:02:32,480
piece of software you pull from somebody

70
00:02:32,480 --> 00:02:33,519
else

71
00:02:33,519 --> 00:02:34,400
and

72
00:02:34,400 --> 00:02:36,080
if you have some development experience

73
00:02:36,080 --> 00:02:38,239
i think you already saw one of these few

74
00:02:38,239 --> 00:02:41,280
logos uh for for javascript there's npm

75
00:02:41,280 --> 00:02:43,360
yarn there's even one for latex there is

76
00:02:43,360 --> 00:02:45,360
a few one there are a few one for java

77
00:02:45,360 --> 00:02:47,519
and it's like every ecosystem every

78
00:02:47,519 --> 00:02:49,040
language they have their own package

79
00:02:49,040 --> 00:02:50,879
managers and most of the time there

80
00:02:50,879 --> 00:02:53,200
isn't only one but a few package

81
00:02:53,200 --> 00:02:55,920
managers for every single ecosystem and

82
00:02:55,920 --> 00:02:57,360
i couldn't make it like a definitive

83
00:02:57,360 --> 00:02:58,640
list because there are too many package

84
00:02:58,640 --> 00:02:59,840
managers

85
00:02:59,840 --> 00:03:01,840
and so like i was saying

86
00:03:01,840 --> 00:03:03,599
the goal is to aims deployment of

87
00:03:03,599 --> 00:03:05,360
dependencies so a dependency could be

88
00:03:05,360 --> 00:03:07,360
just another piece of software written

89
00:03:07,360 --> 00:03:09,200
by somebody else like a third party

90
00:03:09,200 --> 00:03:10,959
produce some code and you want to put it

91
00:03:10,959 --> 00:03:12,800
in your own project and you need to

92
00:03:12,800 --> 00:03:15,120
identify it by your name so it's like is

93
00:03:15,120 --> 00:03:17,120
there some unique identifier like its

94
00:03:17,120 --> 00:03:19,599
name or the github style way of saying

95
00:03:19,599 --> 00:03:21,120
author slash name

96
00:03:21,120 --> 00:03:22,560
and for some of them you also have the

97
00:03:22,560 --> 00:03:24,720
notion of scopes for like big projects

98
00:03:24,720 --> 00:03:25,440
and

99
00:03:25,440 --> 00:03:28,400
you can reference them by scope and you

100
00:03:28,400 --> 00:03:30,159
list all your dependencies in something

101
00:03:30,159 --> 00:03:32,959
we call manifest could be json file xml

102
00:03:32,959 --> 00:03:35,440
file sometimes you have your own custom

103
00:03:35,440 --> 00:03:37,760
let's say scripting language for it and

104
00:03:37,760 --> 00:03:39,599
in this file you will put constraints

105
00:03:39,599 --> 00:03:42,319
could be okay i have no reason to

106
00:03:42,319 --> 00:03:45,280
include my test my php unit test

107
00:03:45,280 --> 00:03:47,040
framework in my prediction environment

108
00:03:47,040 --> 00:03:48,879
so i will just include it from any for

109
00:03:48,879 --> 00:03:50,400
different deployment and same for

110
00:03:50,400 --> 00:03:52,239
version like maybe i want the version

111
00:03:52,239 --> 00:03:55,200
for another version three and for for

112
00:03:55,200 --> 00:03:57,360
for software like composer itself

113
00:03:57,360 --> 00:03:59,760
oh yeah it works thousand

114
00:03:59,760 --> 00:04:01,360
we have here the name we have the

115
00:04:01,360 --> 00:04:02,480
library

116
00:04:02,480 --> 00:04:04,000
we say it's a library and then it

117
00:04:04,000 --> 00:04:06,640
requires php version 7

118
00:04:06,640 --> 00:04:08,959
or version 8 and we have sub

119
00:04:08,959 --> 00:04:10,799
dependencies

120
00:04:10,799 --> 00:04:12,560
like this and we have the constraints on

121
00:04:12,560 --> 00:04:14,640
version here for pip this syntax is

122
00:04:14,640 --> 00:04:16,238
slightly different it's a bit easier

123
00:04:16,238 --> 00:04:18,160
it's not json we just list dependencies

124
00:04:18,160 --> 00:04:19,918
like this question constraint i don't

125
00:04:19,918 --> 00:04:22,000
want to fold it for zero because maybe

126
00:04:22,000 --> 00:04:23,280
there is some we can change in

127
00:04:23,280 --> 00:04:25,759
compatibility but twin can

128
00:04:25,759 --> 00:04:27,520
and these dependencies they may have

129
00:04:27,520 --> 00:04:29,120
their own dependencies and the

130
00:04:29,120 --> 00:04:30,639
dependency of dependencies may have

131
00:04:30,639 --> 00:04:32,320
their own dependencies and that's what

132
00:04:32,320 --> 00:04:34,320
it's called transitive dependencies it's

133
00:04:34,320 --> 00:04:36,400
all the tree of dependencies you need

134
00:04:36,400 --> 00:04:39,120
for your software to run and different

135
00:04:39,120 --> 00:04:40,720
packet managers they all have their own

136
00:04:40,720 --> 00:04:42,639
way to start dependencies it could be a

137
00:04:42,639 --> 00:04:45,199
tree like you just include every single

138
00:04:45,199 --> 00:04:46,479
dependency

139
00:04:46,479 --> 00:04:48,720
with the dependency itself so for like

140
00:04:48,720 --> 00:04:50,720
node.js sometimes that's why we have big

141
00:04:50,720 --> 00:04:52,960
node modules folders is because every

142
00:04:52,960 --> 00:04:54,320
single dependency embedded its own

143
00:04:54,320 --> 00:04:57,199
dependencies and so on but for other

144
00:04:57,199 --> 00:05:00,320
package managers like composer and

145
00:05:00,320 --> 00:05:01,919
i think peep jam

146
00:05:01,919 --> 00:05:04,479
basically you try to resolve all the

147
00:05:04,479 --> 00:05:06,400
version constraint at once to get the

148
00:05:06,400 --> 00:05:07,600
states

149
00:05:07,600 --> 00:05:09,120
and the final state with all your

150
00:05:09,120 --> 00:05:11,440
dependencies and their own versions are

151
00:05:11,440 --> 00:05:13,039
in something that is called a log file

152
00:05:13,039 --> 00:05:14,240
so if you saw something called

153
00:05:14,240 --> 00:05:16,560
composer.clock back at the json.clock

154
00:05:16,560 --> 00:05:18,560
it's basically the state of your packet

155
00:05:18,560 --> 00:05:20,560
manager and it's needed to create

156
00:05:20,560 --> 00:05:22,880
reproducible builds because for instance

157
00:05:22,880 --> 00:05:24,320
if you build something on your dev

158
00:05:24,320 --> 00:05:26,560
laptop and everything works great and

159
00:05:26,560 --> 00:05:27,759
then you send it to prediction but

160
00:05:27,759 --> 00:05:30,639
somebody put like a new buggy release of

161
00:05:30,639 --> 00:05:32,720
some essential essential package of

162
00:05:32,720 --> 00:05:34,080
software everything will break in

163
00:05:34,080 --> 00:05:36,240
prediction so you need to ship this date

164
00:05:36,240 --> 00:05:38,160
so the prediction server can install the

165
00:05:38,160 --> 00:05:40,160
exact same version and the exact same

166
00:05:40,160 --> 00:05:41,120
everything

167
00:05:41,120 --> 00:05:44,080
and another specificity of this log file

168
00:05:44,080 --> 00:05:46,000
is that you will store the url of the

169
00:05:46,000 --> 00:05:48,000
files to download because

170
00:05:48,000 --> 00:05:49,919
you need to make the association between

171
00:05:49,919 --> 00:05:51,759
the name so the name of the package the

172
00:05:51,759 --> 00:05:54,080
tree like full slash bar and the url to

173
00:05:54,080 --> 00:05:56,479
download the actual package from and to

174
00:05:56,479 --> 00:05:58,000
make this association you need a

175
00:05:58,000 --> 00:06:00,240
metadata server which is any kind of

176
00:06:00,240 --> 00:06:02,240
let's say http server ordered by

177
00:06:02,240 --> 00:06:04,160
somebody somewhere that will make a

178
00:06:04,160 --> 00:06:06,880
decision for you and to use the

179
00:06:06,880 --> 00:06:08,400
deployment and the creation of new

180
00:06:08,400 --> 00:06:10,880
packages this metadata servers say you

181
00:06:10,880 --> 00:06:12,720
need some submission interface so most

182
00:06:12,720 --> 00:06:14,400
of the time you have some

183
00:06:14,400 --> 00:06:15,919
small web interface where you can just

184
00:06:15,919 --> 00:06:18,319
send you the url put username of your

185
00:06:18,319 --> 00:06:20,479
packaging nets and then everybody will

186
00:06:20,479 --> 00:06:22,319
be able to install your package

187
00:06:22,319 --> 00:06:24,240
and this metadata server is rich only

188
00:06:24,240 --> 00:06:25,919
during install and updates because like

189
00:06:25,919 --> 00:06:28,400
we said in log files you already store

190
00:06:28,400 --> 00:06:29,840
the url so you don't need to reach out

191
00:06:29,840 --> 00:06:31,759
to the metadata to the metadata server

192
00:06:31,759 --> 00:06:34,160
again it's only during the install tab

193
00:06:34,160 --> 00:06:36,240
and updates tab

194
00:06:36,240 --> 00:06:38,160
no supply chain attacks

195
00:06:38,160 --> 00:06:40,960
uh it's kind of a buzzword because uh

196
00:06:40,960 --> 00:06:42,400
like it's the kind of terms you will

197
00:06:42,400 --> 00:06:45,440
seem to press and it's regroups a lot of

198
00:06:45,440 --> 00:06:47,280
like many many different scenarios with

199
00:06:47,280 --> 00:06:50,080
many different risks and it's basically

200
00:06:50,080 --> 00:06:52,080
a way to describe any attack that is not

201
00:06:52,080 --> 00:06:55,120
directly again to software but instead

202
00:06:55,120 --> 00:06:58,240
against anything that was used to

203
00:06:58,240 --> 00:07:00,720
create or make your software work and

204
00:07:00,720 --> 00:07:03,280
exist so it's basically based on the

205
00:07:03,280 --> 00:07:04,639
fact that you inherit all the

206
00:07:04,639 --> 00:07:06,080
vulnerabilities of the things you're

207
00:07:06,080 --> 00:07:08,560
using to create and run your software

208
00:07:08,560 --> 00:07:10,639
and the anes are the european union

209
00:07:10,639 --> 00:07:13,919
agency for cyber security 624 supply

210
00:07:13,919 --> 00:07:15,199
chain attacks

211
00:07:15,199 --> 00:07:17,680
in 1421 they did a like pretty good job

212
00:07:17,680 --> 00:07:19,599
better than me to just classify

213
00:07:19,599 --> 00:07:20,639
everything

214
00:07:20,639 --> 00:07:22,720
make taxonomies and they don't fight

215
00:07:22,720 --> 00:07:24,880
like they were at least alpha attacks

216
00:07:24,880 --> 00:07:27,039
coming from non-threat actors so it's

217
00:07:27,039 --> 00:07:29,520
like it's a real-world thing people uh

218
00:07:29,520 --> 00:07:31,919
cyber criminals said actors use search

219
00:07:31,919 --> 00:07:34,800
attacks to conduct uh yeah with their

220
00:07:34,800 --> 00:07:37,520
offensive stuff and to

221
00:07:37,520 --> 00:07:39,199
gain access to companies and

222
00:07:39,199 --> 00:07:41,280
organizations and they expect a fourfold

223
00:07:41,280 --> 00:07:43,360
increase in 2021 mostly because of

224
00:07:43,360 --> 00:07:44,960
ransomware actors because if you

225
00:07:44,960 --> 00:07:47,360
compromise one piece of supply chain you

226
00:07:47,360 --> 00:07:49,440
may impact a lot of customers

227
00:07:49,440 --> 00:07:51,120
and anything can be attacked could be

228
00:07:51,120 --> 00:07:53,280
shipping i will show you later some

229
00:07:53,280 --> 00:07:55,520
examples like intercepting shipping

230
00:07:55,520 --> 00:07:56,720
boxes to

231
00:07:56,720 --> 00:07:59,280
bike doors of tobacco hardware it could

232
00:07:59,280 --> 00:08:00,960
be also hardware like if you buy a phone

233
00:08:00,960 --> 00:08:02,800
on i don't know on ebay it's already

234
00:08:02,800 --> 00:08:04,240
backed up it's kind of a splash and

235
00:08:04,240 --> 00:08:06,319
attack could be your os it could be back

236
00:08:06,319 --> 00:08:08,879
down windows could be packages some

237
00:08:08,879 --> 00:08:10,560
angry

238
00:08:10,560 --> 00:08:12,639
angry developer willing to break

239
00:08:12,639 --> 00:08:14,639
everybody's software it could be

240
00:08:14,639 --> 00:08:16,319
compilers your compiler could be

241
00:08:16,319 --> 00:08:18,080
building intentionally wrong code

242
00:08:18,080 --> 00:08:20,639
introducing buggers or vulnerabilities

243
00:08:20,639 --> 00:08:22,639
and it's all this is just based on fact

244
00:08:22,639 --> 00:08:24,800
that the chain is only as strong as its

245
00:08:24,800 --> 00:08:26,720
weakest link so it's easier for

246
00:08:26,720 --> 00:08:28,479
attackers to just target his weakest

247
00:08:28,479 --> 00:08:29,440
link

248
00:08:29,440 --> 00:08:31,280
of your

249
00:08:31,280 --> 00:08:32,719
chain basically

250
00:08:32,719 --> 00:08:34,320
and for for

251
00:08:34,320 --> 00:08:36,080
advanced reactors it gives you perfect

252
00:08:36,080 --> 00:08:37,919
offensive capabilities because you can

253
00:08:37,919 --> 00:08:40,640
either be very targeted and yet say it's

254
00:08:40,640 --> 00:08:43,120
not me it could be anybody else and

255
00:08:43,120 --> 00:08:44,959
consider then also be very opportunistic

256
00:08:44,959 --> 00:08:47,200
and try to spray your pellets around and

257
00:08:47,200 --> 00:08:49,200
conduct mass scale attacks and just make

258
00:08:49,200 --> 00:08:50,880
a lot of noise but in the end only

259
00:08:50,880 --> 00:08:52,839
target a few specific

260
00:08:52,839 --> 00:08:54,399
organizations

261
00:08:54,399 --> 00:08:56,399
one one nice example

262
00:08:56,399 --> 00:08:58,560
is this one so here we have uh this

263
00:08:58,560 --> 00:09:00,240
picture coming from this northern

264
00:09:00,240 --> 00:09:02,959
regulations and there's a green green

265
00:09:02,959 --> 00:09:05,600
old book called no place to hide and

266
00:09:05,600 --> 00:09:07,200
everybody we see i think there are four

267
00:09:07,200 --> 00:09:08,399
three or four people

268
00:09:08,399 --> 00:09:10,160
which are from the nsa and they are

269
00:09:10,160 --> 00:09:11,519
using

270
00:09:11,519 --> 00:09:13,760
a utah gun to remove a sticker from the

271
00:09:13,760 --> 00:09:15,680
cisco box and then they would just take

272
00:09:15,680 --> 00:09:17,680
the router from the box

273
00:09:17,680 --> 00:09:19,600
add some other implant on it and then

274
00:09:19,600 --> 00:09:21,040
put it back in the box and send it back

275
00:09:21,040 --> 00:09:22,959
to the original customer and then you

276
00:09:22,959 --> 00:09:24,800
would say okay my packet is delayed

277
00:09:24,800 --> 00:09:27,040
which is not unusual but you would get a

278
00:09:27,040 --> 00:09:28,880
completely different footer with a back

279
00:09:28,880 --> 00:09:30,959
door allowing cnsa to get back in later

280
00:09:30,959 --> 00:09:32,320
which is pretty nice

281
00:09:32,320 --> 00:09:33,360
and

282
00:09:33,360 --> 00:09:36,240
yeah there was another one on php a few

283
00:09:36,240 --> 00:09:39,200
months or one year ago already and they

284
00:09:39,200 --> 00:09:41,360
get a repository git php.net got

285
00:09:41,360 --> 00:09:43,440
compromised and

286
00:09:43,440 --> 00:09:44,800
somebody introduced a black doll that

287
00:09:44,800 --> 00:09:47,680
would ever rate any incoming con in any

288
00:09:47,680 --> 00:09:49,040
incoming code

289
00:09:49,040 --> 00:09:50,560
uh if you

290
00:09:50,560 --> 00:09:52,880
gave it in the right http either so

291
00:09:52,880 --> 00:09:55,519
basically if it obtained some like

292
00:09:55,519 --> 00:09:57,600
server if it was deployed somewhere uh

293
00:09:57,600 --> 00:09:59,120
anybody could just break in just an

294
00:09:59,120 --> 00:10:01,360
incorrect request and hopefully somebody

295
00:10:01,360 --> 00:10:02,800
saw it quite quickly so they just

296
00:10:02,800 --> 00:10:04,880
reverted it and and everything but it's

297
00:10:04,880 --> 00:10:06,480
pretty crazy because like everybody's

298
00:10:06,480 --> 00:10:08,079
using php

299
00:10:08,079 --> 00:10:10,560
there is also some well-known and you

300
00:10:10,560 --> 00:10:12,560
know headlines warsy stuff like

301
00:10:12,560 --> 00:10:15,519
solarwinds uh where allegedly recent

302
00:10:15,519 --> 00:10:18,079
version occurs i don't want to give any

303
00:10:18,079 --> 00:10:21,519
any opinion that just broke into uh a

304
00:10:21,519 --> 00:10:23,519
company called solarwind uh which is

305
00:10:23,519 --> 00:10:25,360
another first return item monitoring

306
00:10:25,360 --> 00:10:26,959
software it's basically a software

307
00:10:26,959 --> 00:10:28,000
deployment

308
00:10:28,000 --> 00:10:29,600
on your network and then this software

309
00:10:29,600 --> 00:10:31,200
has access to all your network and can

310
00:10:31,200 --> 00:10:33,760
just simplify it administration but if

311
00:10:33,760 --> 00:10:36,079
it makes your system administrator life

312
00:10:36,079 --> 00:10:38,320
easier can also make your articles life

313
00:10:38,320 --> 00:10:40,640
easier and they basically backed out the

314
00:10:40,640 --> 00:10:42,480
installer of the software and waited for

315
00:10:42,480 --> 00:10:43,920
a few months for all the customers to

316
00:10:43,920 --> 00:10:45,920
deploy it and customers would be people

317
00:10:45,920 --> 00:10:46,880
from

318
00:10:46,880 --> 00:10:47,839
like

319
00:10:47,839 --> 00:10:50,560
state departments or from the u.s a big

320
00:10:50,560 --> 00:10:52,959
private fortune 500 companies and they

321
00:10:52,959 --> 00:10:55,200
would just wait for them to deploy the

322
00:10:55,200 --> 00:10:57,200
new update and just come back and break

323
00:10:57,200 --> 00:10:59,600
in and they will prove that they really

324
00:10:59,600 --> 00:11:01,920
stole a lot of a lot of data uh using

325
00:11:01,920 --> 00:11:03,600
this attack

326
00:11:03,600 --> 00:11:06,079
and most recently and uh

327
00:11:06,079 --> 00:11:07,600
same i don't want to fall into the

328
00:11:07,600 --> 00:11:10,399
attribution trap but the news that these

329
00:11:10,399 --> 00:11:13,279
guys were just 16 years old kids in the

330
00:11:13,279 --> 00:11:15,120
uk we'll see if it's true or not but

331
00:11:15,120 --> 00:11:18,959
they basically try to require to

332
00:11:18,959 --> 00:11:21,279
to pay people like pay insiders say

333
00:11:21,279 --> 00:11:23,360
hello i know you woke up i don't know

334
00:11:23,360 --> 00:11:25,519
apple or octa

335
00:11:25,519 --> 00:11:27,680
i will give you some money like 20k and

336
00:11:27,680 --> 00:11:29,440
you will help me to uh

337
00:11:29,440 --> 00:11:31,839
get the initial foothold and try to get

338
00:11:31,839 --> 00:11:33,519
over the network and then they try to

339
00:11:33,519 --> 00:11:34,399
conduct

340
00:11:34,399 --> 00:11:36,880
attacks and the big one we saw

341
00:11:36,880 --> 00:11:38,480
i think last week was an octa which is

342
00:11:38,480 --> 00:11:40,560
an identity provider and by compromising

343
00:11:40,560 --> 00:11:43,040
octa they would be able to reset any

344
00:11:43,040 --> 00:11:44,959
password of

345
00:11:44,959 --> 00:11:47,680
any user of a customers of any customer

346
00:11:47,680 --> 00:11:49,839
for octa which were also basically big

347
00:11:49,839 --> 00:11:51,920
software companies so by compromising

348
00:11:51,920 --> 00:11:54,160
one single central component they would

349
00:11:54,160 --> 00:11:55,440
be able to just

350
00:11:55,440 --> 00:11:57,200
reset anybody's password on most

351
00:11:57,200 --> 00:11:59,040
companies and it's pretty crazy because

352
00:11:59,040 --> 00:12:01,440
i would just be able to come back or vpn

353
00:12:01,440 --> 00:12:05,279
or try to log in in some internal apps

354
00:12:05,279 --> 00:12:06,639
there are also

355
00:12:06,639 --> 00:12:08,160
supply chain tags which are more related

356
00:12:08,160 --> 00:12:10,480
to package managers one of one of them

357
00:12:10,480 --> 00:12:12,320
is any kind of squatting could be typo

358
00:12:12,320 --> 00:12:14,880
squatting or biscuiting and the goal is

359
00:12:14,880 --> 00:12:17,360
to submit packages with deceptive names

360
00:12:17,360 --> 00:12:19,200
because when you have to install package

361
00:12:19,200 --> 00:12:20,240
you have to remember the name of the

362
00:12:20,240 --> 00:12:22,800
package you could type things wrong like

363
00:12:22,800 --> 00:12:24,720
like silly keyboard mistakes like you

364
00:12:24,720 --> 00:12:27,519
are live with only one l or sometimes no

365
00:12:27,519 --> 00:12:29,440
you never remember either dash is a two

366
00:12:29,440 --> 00:12:31,519
or three i don't know so you just type

367
00:12:31,519 --> 00:12:33,200
something and it's the wrong one but if

368
00:12:33,200 --> 00:12:35,040
somebody rejected it you just deploy

369
00:12:35,040 --> 00:12:37,279
otaku's code on your computer and there

370
00:12:37,279 --> 00:12:39,040
is something i really like which is bit

371
00:12:39,040 --> 00:12:40,959
flips i always thought it was like

372
00:12:40,959 --> 00:12:44,000
commit and it's true it really works

373
00:12:44,000 --> 00:12:46,399
because sometimes some you have some bit

374
00:12:46,399 --> 00:12:48,720
flips in your requests and if you

375
00:12:48,720 --> 00:12:51,600
register domains which are like one

376
00:12:51,600 --> 00:12:54,320
bits away from the original one like all

377
00:12:54,320 --> 00:12:56,160
the two domains are one bit away from

378
00:12:56,160 --> 00:12:58,079
windows.com but could also work with

379
00:12:58,079 --> 00:12:59,360
packages name

380
00:12:59,360 --> 00:13:00,800
uh

381
00:13:00,800 --> 00:13:02,959
if somebody rejects it registers it it's

382
00:13:02,959 --> 00:13:04,399
like you will also pull somebody's code

383
00:13:04,399 --> 00:13:06,720
on your computer pretty nice and there

384
00:13:06,720 --> 00:13:08,959
is also expired packages uh usernames

385
00:13:08,959 --> 00:13:09,920
emails

386
00:13:09,920 --> 00:13:11,920
uh okay let's say i created my my connor

387
00:13:11,920 --> 00:13:15,120
npm and i some alt email i just deleted

388
00:13:15,120 --> 00:13:16,800
because i don't choose it anymore i can

389
00:13:16,800 --> 00:13:18,160
somebody can just register the same

390
00:13:18,160 --> 00:13:20,639
email address do a password reset on npm

391
00:13:20,639 --> 00:13:22,959
and then take over my own packages and

392
00:13:22,959 --> 00:13:24,480
that's what happened a few months ago

393
00:13:24,480 --> 00:13:27,360
with something called ajv formats

394
00:13:27,360 --> 00:13:29,519
which is packaged with 5 million weekly

395
00:13:29,519 --> 00:13:31,600
downloads which is a lot and it was

396
00:13:31,600 --> 00:13:33,279
transitive dependency of webpack which

397
00:13:33,279 --> 00:13:35,200
is a huge

398
00:13:35,200 --> 00:13:36,720
javascript software

399
00:13:36,720 --> 00:13:38,160
and basically everybody was playing this

400
00:13:38,160 --> 00:13:40,720
thing but it was laying around with like

401
00:13:40,720 --> 00:13:42,240
let's say no security on the account

402
00:13:42,240 --> 00:13:45,920
because anybody could just take it over

403
00:13:45,920 --> 00:13:47,600
and when it comes to account takeover

404
00:13:47,600 --> 00:13:49,680
there is always the usual stuff like

405
00:13:49,680 --> 00:13:51,519
weak passwords i know if i use password

406
00:13:51,519 --> 00:13:53,920
as password in my npm

407
00:13:53,920 --> 00:13:55,519
account and everybody can basically take

408
00:13:55,519 --> 00:13:57,440
it over and through a face is not always

409
00:13:57,440 --> 00:13:58,880
monetary even if

410
00:13:58,880 --> 00:14:00,959
it's adds it's not perfect but it's a

411
00:14:00,959 --> 00:14:02,639
little layer of security

412
00:14:02,639 --> 00:14:05,040
and there were like also some examples

413
00:14:05,040 --> 00:14:08,320
like news headlines for ua passer gs

414
00:14:08,320 --> 00:14:09,839
which is some user item passing

415
00:14:09,839 --> 00:14:11,040
libraries at

416
00:14:11,040 --> 00:14:14,320
also millions of downloads every week

417
00:14:14,320 --> 00:14:16,079
there is a source phishing like if you

418
00:14:16,079 --> 00:14:17,440
really want somebody's account you can

419
00:14:17,440 --> 00:14:19,519
just fish him to death and it will

420
00:14:19,519 --> 00:14:21,120
always work because

421
00:14:21,120 --> 00:14:23,199
the fishing always works and obviously

422
00:14:23,199 --> 00:14:25,040
there is always money uh like we suffer

423
00:14:25,040 --> 00:14:26,720
with laptops with insider access you

424
00:14:26,720 --> 00:14:28,880
just pay somebody to give him to give

425
00:14:28,880 --> 00:14:31,680
you his account or you can also sponsor

426
00:14:31,680 --> 00:14:33,839
development in exchange of like ads

427
00:14:33,839 --> 00:14:35,680
which it's basically paying developers

428
00:14:35,680 --> 00:14:37,680
to put malware in their own software we

429
00:14:37,680 --> 00:14:39,839
saw it a lot um i think we've showed

430
00:14:39,839 --> 00:14:42,800
forge back in the days

431
00:14:42,800 --> 00:14:44,320
and finally there is something much more

432
00:14:44,320 --> 00:14:45,760
interesting and that's why i'm here

433
00:14:45,760 --> 00:14:48,079
today uh it's like compromising the

434
00:14:48,079 --> 00:14:49,839
back-end services like if you can

435
00:14:49,839 --> 00:14:51,600
compromise the server during the

436
00:14:51,600 --> 00:14:53,519
association between the name and the

437
00:14:53,519 --> 00:14:55,920
actual url to know your packet from uh

438
00:14:55,920 --> 00:14:57,839
you can just send

439
00:14:57,839 --> 00:14:59,920
redirect c budget manager to any other

440
00:14:59,920 --> 00:15:02,079
url and it's the most impactful scenario

441
00:15:02,079 --> 00:15:03,680
because instead of breaking in one

442
00:15:03,680 --> 00:15:06,079
package at a time you will just break in

443
00:15:06,079 --> 00:15:08,320
all the existing package is hosted in

444
00:15:08,320 --> 00:15:09,839
one ecosystem

445
00:15:09,839 --> 00:15:12,160
in at once and some other researchers

446
00:15:12,160 --> 00:15:14,240
already did it so with max and ryotark

447
00:15:14,240 --> 00:15:16,800
they basically took over everything uh

448
00:15:16,800 --> 00:15:18,720
ombre which is the package manager for

449
00:15:18,720 --> 00:15:20,560
macos

450
00:15:20,560 --> 00:15:23,040
cocoapods for objective c

451
00:15:23,040 --> 00:15:25,199
packages troopy gems so there is some

452
00:15:25,199 --> 00:15:27,199
initial work on the side and we're like

453
00:15:27,199 --> 00:15:29,120
okay maybe we could try to do the same

454
00:15:29,120 --> 00:15:30,079
like wouldn't

455
00:15:30,079 --> 00:15:32,000
it be really cool to compromise all

456
00:15:32,000 --> 00:15:34,560
those packages of one ecosystem and all

457
00:15:34,560 --> 00:15:36,560
expensive would be like are these guys

458
00:15:36,560 --> 00:15:38,399
really really good and i i'm sure they

459
00:15:38,399 --> 00:15:40,399
are but did they have to take months to

460
00:15:40,399 --> 00:15:42,000
do it was it like really hard to do do

461
00:15:42,000 --> 00:15:44,000
they have to find some crazy zero day

462
00:15:44,000 --> 00:15:45,519
somewhere although is it like

463
00:15:45,519 --> 00:15:48,320
objectively technically easy um did they

464
00:15:48,320 --> 00:15:50,160
need a lot of time or could they just do

465
00:15:50,160 --> 00:15:52,560
it like the evening on their room just

466
00:15:52,560 --> 00:15:54,320
on the laptop and they need a lot of

467
00:15:54,320 --> 00:15:56,480
money like quantum computer or is it

468
00:15:56,480 --> 00:15:58,000
yeah something i could do on my on my

469
00:15:58,000 --> 00:15:59,040
laptop

470
00:15:59,040 --> 00:16:02,000
and we we we picked php because

471
00:16:02,000 --> 00:16:04,639
modern php is trendy um

472
00:16:04,639 --> 00:16:06,800
i'm php guys in the very beginning and i

473
00:16:06,800 --> 00:16:08,639
still fall in love every once in a while

474
00:16:08,639 --> 00:16:10,800
with php because there is new language

475
00:16:10,800 --> 00:16:13,680
construct new syntactic sugar uh jit

476
00:16:13,680 --> 00:16:15,440
it's pretty nice nowadays like it's a

477
00:16:15,440 --> 00:16:18,959
real language and uh it's run 78 percent

478
00:16:18,959 --> 00:16:22,959
of the internet but w free deck

479
00:16:22,959 --> 00:16:24,959
which is a lot but wordpress alone is

480
00:16:24,959 --> 00:16:27,279
like 43 percent of the internet so we

481
00:16:27,279 --> 00:16:29,440
have left with maybe something around 30

482
00:16:29,440 --> 00:16:31,360
of the internet running php

483
00:16:31,360 --> 00:16:33,360
and you need package managers like in

484
00:16:33,360 --> 00:16:35,120
real life you need to include some open

485
00:16:35,120 --> 00:16:37,600
sourced software in your own project so

486
00:16:37,600 --> 00:16:39,839
you need a package manager and kai from

487
00:16:39,839 --> 00:16:42,079
a team estimated that around 70 percent

488
00:16:42,079 --> 00:16:43,680
of all the php projects are using

489
00:16:43,680 --> 00:16:46,320
composer so let's say if we take over

490
00:16:46,320 --> 00:16:48,320
all the package managers of cph because

491
00:16:48,320 --> 00:16:49,680
this time we could maybe break into

492
00:16:49,680 --> 00:16:52,000
something around 20 of the internet

493
00:16:52,000 --> 00:16:54,240
which is a lot

494
00:16:54,240 --> 00:16:55,920
so we'll show you how we took over

495
00:16:55,920 --> 00:16:58,920
composer

496
00:17:05,119 --> 00:17:07,679
so it was initially released in 2012 so

497
00:17:07,679 --> 00:17:09,760
it's pretty pretty recent pretty new and

498
00:17:09,760 --> 00:17:11,760
it's now by far the most popular php

499
00:17:11,760 --> 00:17:14,319
package manager so we have 55 billion

500
00:17:14,319 --> 00:17:17,839
installed since 2012 which is a lot and

501
00:17:17,839 --> 00:17:19,919
every day every single day except

502
00:17:19,919 --> 00:17:21,199
weekends because nobody's working on

503
00:17:21,199 --> 00:17:24,000
weekends uh there are 78 million

504
00:17:24,000 --> 00:17:26,480
packages downloaded so it's a lot and

505
00:17:26,480 --> 00:17:28,160
the metadata service is open source it's

506
00:17:28,160 --> 00:17:30,240
called packages it's maintained by free

507
00:17:30,240 --> 00:17:32,320
by company running private packages

508
00:17:32,320 --> 00:17:34,780
which is the um let's say

509
00:17:34,780 --> 00:17:36,000
[Music]

510
00:17:36,000 --> 00:17:39,760
version to host private packages for php

511
00:17:39,760 --> 00:17:42,559
and this usage is not decreasing

512
00:17:42,559 --> 00:17:46,400
yeah you can see there is 1.5 monthly

513
00:17:46,400 --> 00:17:48,400
1.5 billion monthly downloads of

514
00:17:48,400 --> 00:17:50,400
packages and the curve is not slowing

515
00:17:50,400 --> 00:17:51,679
down it's like everybody's using

516
00:17:51,679 --> 00:17:53,200
composer and

517
00:17:53,200 --> 00:17:55,520
even if you screenshot is like two weeks

518
00:17:55,520 --> 00:17:57,200
old but if you go look at it i'm sure it

519
00:17:57,200 --> 00:18:00,080
will be up 1.8 billion monthly downloads

520
00:18:00,080 --> 00:18:01,280
it's crazy

521
00:18:01,280 --> 00:18:03,520
and like i said everything is open so so

522
00:18:03,520 --> 00:18:06,160
we can easily audit it and deploy it so

523
00:18:06,160 --> 00:18:08,640
we just created our own vm with composer

524
00:18:08,640 --> 00:18:10,640
running it running in it which took a

525
00:18:10,640 --> 00:18:13,280
few few minutes and there was a simple

526
00:18:13,280 --> 00:18:14,960
package admission process so to add new

527
00:18:14,960 --> 00:18:17,919
packages to packages and to composer we

528
00:18:17,919 --> 00:18:19,679
just create a new project

529
00:18:19,679 --> 00:18:21,840
on our own github repo create a

530
00:18:21,840 --> 00:18:23,760
composer.json file to declare our

531
00:18:23,760 --> 00:18:25,840
project so its name the kind of project

532
00:18:25,840 --> 00:18:29,200
it is it's any uh required dependency we

533
00:18:29,200 --> 00:18:31,440
put it on github subversion vacuole you

534
00:18:31,440 --> 00:18:33,520
name it just any kind of

535
00:18:33,520 --> 00:18:34,960
um source

536
00:18:34,960 --> 00:18:36,160
you know

537
00:18:36,160 --> 00:18:39,039
hosting uh system and we create packages

538
00:18:39,039 --> 00:18:40,880
account which is free and we submit you

539
00:18:40,880 --> 00:18:42,960
all to the repo and it just looks like

540
00:18:42,960 --> 00:18:44,880
this like there is no need for anything

541
00:18:44,880 --> 00:18:46,799
anything more it's a simple interface

542
00:18:46,799 --> 00:18:49,039
you push the url it will fetch it and

543
00:18:49,039 --> 00:18:50,720
create a package with the same name and

544
00:18:50,720 --> 00:18:52,160
then everybody will be able to pull it

545
00:18:52,160 --> 00:18:54,000
from packages

546
00:18:54,000 --> 00:18:56,400
and beyond the would like internally

547
00:18:56,400 --> 00:18:58,080
packages is using composer from us

548
00:18:58,080 --> 00:19:01,039
operations because you need to pass a

549
00:19:01,039 --> 00:19:03,039
computer.json file of the library trying

550
00:19:03,039 --> 00:19:04,960
to pull so

551
00:19:04,960 --> 00:19:06,559
beyond the scene you just clone the

552
00:19:06,559 --> 00:19:08,480
remote repo along with tags because

553
00:19:08,480 --> 00:19:10,640
every git tag is a version you pass

554
00:19:10,640 --> 00:19:12,480
manifests and then you create it in the

555
00:19:12,480 --> 00:19:14,080
database and then it's just available

556
00:19:14,080 --> 00:19:15,840
for everybody else

557
00:19:15,840 --> 00:19:16,720
and

558
00:19:16,720 --> 00:19:18,880
all this stuff like cloning and

559
00:19:18,880 --> 00:19:21,440
everything is on by composer and there

560
00:19:21,440 --> 00:19:23,200
is some some logic code to try to

561
00:19:23,200 --> 00:19:25,039
identify which

562
00:19:25,039 --> 00:19:27,120
vcs so like geared to the kill

563
00:19:27,120 --> 00:19:29,440
subversion which vcs is running on the

564
00:19:29,440 --> 00:19:31,200
other on the other side there is a fast

565
00:19:31,200 --> 00:19:33,200
pass for yours because if you say github

566
00:19:33,200 --> 00:19:35,919
do probably some decent git repo

567
00:19:35,919 --> 00:19:36,880
but

568
00:19:36,880 --> 00:19:38,720
just in case it doesn't

569
00:19:38,720 --> 00:19:42,160
match this url it will try to run a git

570
00:19:42,160 --> 00:19:45,679
ls remote uh on the result you gave uh

571
00:19:45,679 --> 00:19:47,360
to try to see if the remote end is

572
00:19:47,360 --> 00:19:49,360
speaking it and then you try you to try

573
00:19:49,360 --> 00:19:52,160
as van info to try to see if the remote

574
00:19:52,160 --> 00:19:54,720
end is picking the version and then try

575
00:19:54,720 --> 00:19:57,120
aj to try to see if the rima 10 is

576
00:19:57,120 --> 00:19:59,200
picking mercurial and it will just turn

577
00:19:59,200 --> 00:20:03,600
it over and as you as you may have seen

578
00:20:03,600 --> 00:20:05,919
here it's escaped so there is like some

579
00:20:05,919 --> 00:20:07,679
security things happening and it

580
00:20:07,679 --> 00:20:08,720
prevents command injection

581
00:20:08,720 --> 00:20:11,360
vulnerabilities uh but behind every

582
00:20:11,360 --> 00:20:13,120
patch command injection variability

583
00:20:13,120 --> 00:20:14,240
there is an argument injection

584
00:20:14,240 --> 00:20:16,000
vulnerability i will just show you

585
00:20:16,000 --> 00:20:19,840
what's what it's like so basically

586
00:20:19,840 --> 00:20:22,880
not real php some pseudocod but here we

587
00:20:22,880 --> 00:20:25,679
have a value control which is

588
00:20:25,679 --> 00:20:26,480
uh

589
00:20:26,480 --> 00:20:28,799
something of this date and this sequence

590
00:20:28,799 --> 00:20:31,919
of characters here a way to execute

591
00:20:31,919 --> 00:20:34,480
subcommands in bash so basically if you

592
00:20:34,480 --> 00:20:36,400
if you put in the shell will first

593
00:20:36,400 --> 00:20:37,840
evaluate a

594
00:20:37,840 --> 00:20:40,000
date and put the output of date in the

595
00:20:40,000 --> 00:20:42,320
next cli call and then call everything

596
00:20:42,320 --> 00:20:44,559
so if we run it

597
00:20:44,559 --> 00:20:45,600
and we just

598
00:20:45,600 --> 00:20:47,840
append it to identify it will create

599
00:20:47,840 --> 00:20:50,720
this shell script with aj identify and

600
00:20:50,720 --> 00:20:53,120
date so it will evaluate date

601
00:20:53,120 --> 00:20:55,679
and then run aj identify and then with

602
00:20:55,679 --> 00:20:57,919
the output of the date command

603
00:20:57,919 --> 00:21:00,720
but with the right escape function

604
00:21:00,720 --> 00:21:02,720
it doesn't it won't be exploitable

605
00:21:02,720 --> 00:21:04,480
because it will put single quotes around

606
00:21:04,480 --> 00:21:08,000
it preventing the evaluation of c dollar

607
00:21:08,000 --> 00:21:10,799
parenthesis uh sequence by the shell so

608
00:21:10,799 --> 00:21:13,280
it will basically run aj identify

609
00:21:13,280 --> 00:21:15,039
date which won't do anything which is

610
00:21:15,039 --> 00:21:17,679
not nasty but you can still add new

611
00:21:17,679 --> 00:21:19,679
arguments to the option so basically if

612
00:21:19,679 --> 00:21:21,520
i do this

613
00:21:21,520 --> 00:21:23,760
if i put dash dash help

614
00:21:23,760 --> 00:21:26,159
it's escaped so there are no

615
00:21:26,159 --> 00:21:28,880
single quotes around it which is okay

616
00:21:28,880 --> 00:21:31,679
but see the shell will still call aj

617
00:21:31,679 --> 00:21:33,520
identify.help

618
00:21:33,520 --> 00:21:36,960
which will show the alph menu so

619
00:21:36,960 --> 00:21:39,120
we know we can add new arguments to

620
00:21:39,120 --> 00:21:42,240
invocation of git subversion mercurial

621
00:21:42,240 --> 00:21:44,559
and it's something that is pretty pretty

622
00:21:44,559 --> 00:21:46,640
nice there are always usual suspects

623
00:21:46,640 --> 00:21:48,799
like vox and john they always find

624
00:21:48,799 --> 00:21:51,280
argument injection in git stuff like wax

625
00:21:51,280 --> 00:21:54,559
found a lot in gitlab and join from

626
00:21:54,559 --> 00:21:57,280
argument rejection in git itself

627
00:21:57,280 --> 00:21:59,280
but the problem is it's running git as

628
00:21:59,280 --> 00:22:01,280
remote which requires positional

629
00:22:01,280 --> 00:22:03,280
argument and we only have one injection

630
00:22:03,280 --> 00:22:05,440
point two and to exploit it forget we

631
00:22:05,440 --> 00:22:06,880
would require two

632
00:22:06,880 --> 00:22:08,799
injection points or out of this another

633
00:22:08,799 --> 00:22:10,559
value somewhere else

634
00:22:10,559 --> 00:22:12,080
but we can still look at others the

635
00:22:12,080 --> 00:22:13,840
version mercurial and there are also

636
00:22:13,840 --> 00:22:15,840
some crazy ones never saw before like

637
00:22:15,840 --> 00:22:17,919
perforce and fossil so we have room for

638
00:22:17,919 --> 00:22:19,679
mistakes and worlds

639
00:22:19,679 --> 00:22:22,159
and indeed when we looked into mercurial

640
00:22:22,159 --> 00:22:24,799
manual it says we can create aliases

641
00:22:24,799 --> 00:22:27,360
with the same name as existing commands

642
00:22:27,360 --> 00:22:29,360
we can override this in the original

643
00:22:29,360 --> 00:22:31,679
definitions and if we put an exclamation

644
00:22:31,679 --> 00:22:33,840
point we can make it a shell areas it's

645
00:22:33,840 --> 00:22:36,159
basically we can override any existing

646
00:22:36,159 --> 00:22:37,919
command so we can just

647
00:22:37,919 --> 00:22:40,960
since the code is running aj

648
00:22:40,960 --> 00:22:43,440
identify here we can just override

649
00:22:43,440 --> 00:22:45,760
identify so

650
00:22:45,760 --> 00:22:48,840
the final syntax is direct config equals

651
00:22:48,840 --> 00:22:52,080
alias.identified equals exclamation mark

652
00:22:52,080 --> 00:22:54,240
date and if we run it in the shell

653
00:22:54,240 --> 00:22:56,240
instead of running ajar identify it will

654
00:22:56,240 --> 00:22:58,559
run to date so basically

655
00:22:58,559 --> 00:23:02,559
we can go over composer and run it

656
00:23:05,120 --> 00:23:06,480
so at the beginning i'm just showing

657
00:23:06,480 --> 00:23:08,320
some ipad address just making sure

658
00:23:08,320 --> 00:23:10,880
everything works but on the top right

659
00:23:10,880 --> 00:23:12,720
it's alice shell which is she's the

660
00:23:12,720 --> 00:23:14,320
attacker because you know his name is

661
00:23:14,320 --> 00:23:17,600
red so she's generous and on the left we

662
00:23:17,600 --> 00:23:19,919
have the packages interface so we can

663
00:23:19,919 --> 00:23:22,400
just register a new account as the

664
00:23:22,400 --> 00:23:24,240
attacker

665
00:23:24,240 --> 00:23:26,559
and then i will just type what you saw

666
00:23:26,559 --> 00:23:28,720
see configure call something and i will

667
00:23:28,720 --> 00:23:30,799
get a connect backed shell so netcat

668
00:23:30,799 --> 00:23:33,360
connection coming back to the attackers

669
00:23:33,360 --> 00:23:36,360
shell

670
00:23:38,880 --> 00:23:40,400
so it's just starting a listener so we

671
00:23:40,400 --> 00:23:42,559
get the connection and we can speak with

672
00:23:42,559 --> 00:23:44,240
the other end we click on the left and

673
00:23:44,240 --> 00:23:47,120
then we go to shell so it works but it's

674
00:23:47,120 --> 00:23:49,600
okay we get sce and it's pretty nice but

675
00:23:49,600 --> 00:23:51,279
i don't know like if you're not very

676
00:23:51,279 --> 00:23:53,440
technical like okay comment execution

677
00:23:53,440 --> 00:23:55,360
it's fine you get a new server but i

678
00:23:55,360 --> 00:23:57,120
will also show you how to

679
00:23:57,120 --> 00:23:58,960
change the metadata values so we can

680
00:23:58,960 --> 00:24:01,360
force a developer to run an internet

681
00:24:01,360 --> 00:24:02,559
code

682
00:24:02,559 --> 00:24:04,640
so now the article just getting a nice

683
00:24:04,640 --> 00:24:05,600
shell

684
00:24:05,600 --> 00:24:07,679
it's not really important

685
00:24:07,679 --> 00:24:10,880
i'm typing slow sorry

686
00:24:13,919 --> 00:24:16,559
so yeah we got the wheel shell and then

687
00:24:16,559 --> 00:24:19,039
on the left is me thomas and i will just

688
00:24:19,039 --> 00:24:21,200
go to my own packages and have like

689
00:24:21,200 --> 00:24:23,919
something to print nice waffle emojis on

690
00:24:23,919 --> 00:24:25,760
my terms i will just

691
00:24:25,760 --> 00:24:28,559
uh on the bottom right install it

692
00:24:28,559 --> 00:24:30,720
i just composer require it

693
00:24:30,720 --> 00:24:32,400
it gets downloaded

694
00:24:32,400 --> 00:24:35,039
and then i can just run it and i have my

695
00:24:35,039 --> 00:24:37,120
okay it's small but there is really a

696
00:24:37,120 --> 00:24:38,480
powerful emoji

697
00:24:38,480 --> 00:24:40,960
um and then meanwhile the attacker is

698
00:24:40,960 --> 00:24:44,080
just going in on on the shell and

699
00:24:44,080 --> 00:24:47,760
changing metadata for this package

700
00:24:47,760 --> 00:24:49,840
it's basically a json file like the

701
00:24:49,840 --> 00:24:51,200
actual metadata on the server it's a

702
00:24:51,200 --> 00:24:53,679
json file and listing the sources which

703
00:24:53,679 --> 00:24:55,440
are the location where you can download

704
00:24:55,440 --> 00:24:57,840
the packages from so it's either git or

705
00:24:57,840 --> 00:24:59,760
a zip file on github

706
00:24:59,760 --> 00:25:00,640
so

707
00:25:00,640 --> 00:25:03,039
you can just replace this file

708
00:25:03,039 --> 00:25:06,080
by something else

709
00:25:07,200 --> 00:25:10,159
and then if i go back on my own shell

710
00:25:10,159 --> 00:25:11,919
and i want to update my package i just

711
00:25:11,919 --> 00:25:13,760
type compose update

712
00:25:13,760 --> 00:25:15,120
and it's weird because there is a new

713
00:25:15,120 --> 00:25:16,799
version and i never deployed a new

714
00:25:16,799 --> 00:25:18,559
version to the left so something

715
00:25:18,559 --> 00:25:21,279
definitely happened

716
00:25:24,080 --> 00:25:25,840
and if i run it again something else

717
00:25:25,840 --> 00:25:28,000
happened and it's just a browser with a

718
00:25:28,000 --> 00:25:29,440
video but it could have been anything

719
00:25:29,440 --> 00:25:31,679
else

720
00:25:31,679 --> 00:25:33,360
so that's it

721
00:25:33,360 --> 00:25:36,080
and um obviously we don't do it on zero

722
00:25:36,080 --> 00:25:38,640
wheel instance it was like a test vm uh

723
00:25:38,640 --> 00:25:40,720
but on on the williams center to try it

724
00:25:40,720 --> 00:25:43,360
we just send a listing of the current

725
00:25:43,360 --> 00:25:45,760
directory back to the server we owned

726
00:25:45,760 --> 00:25:47,600
and that's how it looks like so if you

727
00:25:47,600 --> 00:25:49,440
also get a sc on composer you will be

728
00:25:49,440 --> 00:25:51,440
able to define if i'm lying or not but i

729
00:25:51,440 --> 00:25:54,000
promise it's it's a real one

730
00:25:54,000 --> 00:25:56,720
it's same up same tree same structure

731
00:25:56,720 --> 00:25:58,960
and you would just have to go to the p2

732
00:25:58,960 --> 00:26:01,840
folder and just override the json file

733
00:26:01,840 --> 00:26:02,640
and

734
00:26:02,640 --> 00:26:05,279
they fix it quite fast so it's fixing

735
00:26:05,279 --> 00:26:06,880
compo in so they have to fix it in

736
00:26:06,880 --> 00:26:08,080
composer

737
00:26:08,080 --> 00:26:10,159
because packages was using composer and

738
00:26:10,159 --> 00:26:12,400
volunteer was in composer itself so they

739
00:26:12,400 --> 00:26:14,000
just read the new version and composer

740
00:26:14,000 --> 00:26:16,159
and basically to prevent a common

741
00:26:16,159 --> 00:26:19,200
argument injection you add

742
00:26:19,200 --> 00:26:20,400
two dashes

743
00:26:20,400 --> 00:26:22,720
it's called the posix end of option

744
00:26:22,720 --> 00:26:25,120
marker and it prevents

745
00:26:25,120 --> 00:26:27,919
the interpretation of any value after

746
00:26:27,919 --> 00:26:30,240
after this two dashes

747
00:26:30,240 --> 00:26:32,559
as arguments so basically the patch is

748
00:26:32,559 --> 00:26:33,279
just

749
00:26:33,279 --> 00:26:36,159
two new characters that's it it's over

750
00:26:36,159 --> 00:26:39,039
every existing vcs driver but so the

751
00:26:39,039 --> 00:26:40,480
patch is pretty large but i mean it's

752
00:26:40,480 --> 00:26:42,880
just two bytes every single time

753
00:26:42,880 --> 00:26:45,039
and the timeline is pretty crazy because

754
00:26:45,039 --> 00:26:47,360
uh we found it maybe maybe

755
00:26:47,360 --> 00:26:49,679
late at night we just send the email and

756
00:26:49,679 --> 00:26:51,600
the morning to say at like eight said

757
00:26:51,600 --> 00:26:53,840
yeah okay we no deploy the odd fix on

758
00:26:53,840 --> 00:26:56,240
the public instance like even after a

759
00:26:56,240 --> 00:26:59,120
few hours and um so it was fixed and

760
00:26:59,120 --> 00:27:01,600
safe on the big instance and then they

761
00:27:01,600 --> 00:27:03,120
took some time to just make the right

762
00:27:03,120 --> 00:27:04,880
patches and release a new version of

763
00:27:04,880 --> 00:27:07,360
composer and make the official

764
00:27:07,360 --> 00:27:08,720
announcement so everything is really

765
00:27:08,720 --> 00:27:11,279
really smooth and yes thank you niels

766
00:27:11,279 --> 00:27:13,279
and jordy which are main maintainers of

767
00:27:13,279 --> 00:27:15,520
composer for the help you can sponsor

768
00:27:15,520 --> 00:27:17,919
them on github the composer page because

769
00:27:17,919 --> 00:27:19,279
yeah it's honestly one of the best

770
00:27:19,279 --> 00:27:22,080
timeline i could ever

771
00:27:22,080 --> 00:27:24,159
and now we'll take over b

772
00:27:24,159 --> 00:27:25,840
which is the php extension and

773
00:27:25,840 --> 00:27:27,919
application repository and it's

774
00:27:27,919 --> 00:27:30,159
basically the package manager that has

775
00:27:30,159 --> 00:27:32,799
used v4 composer and it

776
00:27:32,799 --> 00:27:34,480
was created in 1999

777
00:27:34,480 --> 00:27:36,720
it's moderately active nowadays but you

778
00:27:36,720 --> 00:27:38,159
know there was always some historical

779
00:27:38,159 --> 00:27:39,679
software that requires some historical

780
00:27:39,679 --> 00:27:42,480
software to run also written in php uh

781
00:27:42,480 --> 00:27:44,799
last commit was like one year ago and

782
00:27:44,799 --> 00:27:46,960
they tried to modernize it and create a

783
00:27:46,960 --> 00:27:49,600
po2 but it never really took off so

784
00:27:49,600 --> 00:27:52,320
people are still using p

785
00:27:52,320 --> 00:27:54,159
it's less

786
00:27:54,159 --> 00:27:56,799
it has to put back like it was 1999 so

787
00:27:56,799 --> 00:27:58,880
basically you know internet was

788
00:27:58,880 --> 00:28:01,039
different thing than nowadays

789
00:28:01,039 --> 00:28:05,080
but they still have like 290

790
00:28:05,600 --> 00:28:07,840
thousand or millions download since the

791
00:28:07,840 --> 00:28:10,159
very beginning and um they still get

792
00:28:10,159 --> 00:28:12,240
like 100 000 monthly downloads for the

793
00:28:12,240 --> 00:28:14,080
big ones um there will be a few big

794
00:28:14,080 --> 00:28:15,520
names you may be already saw somewhere

795
00:28:15,520 --> 00:28:17,520
else like archiveta which is embedded

796
00:28:17,520 --> 00:28:21,039
into drupal netsmtp console.pt and every

797
00:28:21,039 --> 00:28:24,000
everything is developed and deployment

798
00:28:24,000 --> 00:28:26,240
and it's uh it's a project part of the

799
00:28:26,240 --> 00:28:28,320
main php protector it's like it's below

800
00:28:28,320 --> 00:28:31,840
the umbrella of the php code and

801
00:28:31,840 --> 00:28:34,159
it's slightly different from from

802
00:28:34,159 --> 00:28:35,520
composer

803
00:28:35,520 --> 00:28:37,760
because developers they have to be to

804
00:28:37,760 --> 00:28:39,760
have to request accounts say okay my

805
00:28:39,760 --> 00:28:43,039
name is my real name this is my email

806
00:28:43,039 --> 00:28:44,799
address and this is the reason why i

807
00:28:44,799 --> 00:28:47,200
want to create a new package on peer and

808
00:28:47,200 --> 00:28:49,120
administrators i can either allow it and

809
00:28:49,120 --> 00:28:51,919
disallow it and it's not perfect for us

810
00:28:51,919 --> 00:28:54,000
because we would have to kind of fly and

811
00:28:54,000 --> 00:28:55,760
we're not trying to involve in any kind

812
00:28:55,760 --> 00:28:57,279
of social engineering we're just trying

813
00:28:57,279 --> 00:28:59,520
to like stay technical so

814
00:28:59,520 --> 00:29:01,600
maybe for us would be nice to find a bug

815
00:29:01,600 --> 00:29:03,760
that would give us access to a developer

816
00:29:03,760 --> 00:29:05,279
account basically just we could take

817
00:29:05,279 --> 00:29:06,720
over somebody's account

818
00:29:06,720 --> 00:29:08,159
and there are quite a few

819
00:29:08,159 --> 00:29:09,600
pre-authenticated features like bug

820
00:29:09,600 --> 00:29:12,000
report search so there was some room for

821
00:29:12,000 --> 00:29:14,159
mistakes and also historical package

822
00:29:14,159 --> 00:29:17,120
manager developed in 1999 means um it's

823
00:29:17,120 --> 00:29:19,120
using history called best practice so

824
00:29:19,120 --> 00:29:21,200
maybe things are still wrong nowadays

825
00:29:21,200 --> 00:29:23,120
and it's also about historical php

826
00:29:23,120 --> 00:29:24,840
versions which is really great because

827
00:29:24,840 --> 00:29:26,720
sometimes um

828
00:29:26,720 --> 00:29:28,799
some you know

829
00:29:28,799 --> 00:29:31,440
call not say callbacks but some some

830
00:29:31,440 --> 00:29:34,399
filmmakers in php we could exploit them

831
00:29:34,399 --> 00:29:36,399
up until some version and now it's

832
00:29:36,399 --> 00:29:39,360
getting uh hardened and added so maybe

833
00:29:39,360 --> 00:29:41,679
there is some also room for mistake here

834
00:29:41,679 --> 00:29:43,279
and so we just put the card in one of

835
00:29:43,279 --> 00:29:45,679
the tools and

836
00:29:45,679 --> 00:29:47,120
i don't know if you can read okay i

837
00:29:47,120 --> 00:29:48,159
don't have the right pointer but

838
00:29:48,159 --> 00:29:50,080
basically there is uh

839
00:29:50,080 --> 00:29:52,000
the use of unsafe

840
00:29:52,000 --> 00:29:54,159
number generator in a function called

841
00:29:54,159 --> 00:29:56,960
wizard password which is not a good sign

842
00:29:56,960 --> 00:29:58,399
because basically

843
00:29:58,399 --> 00:30:00,640
when we reset somebody's password it

844
00:30:00,640 --> 00:30:03,760
will send a secret token to the to to

845
00:30:03,760 --> 00:30:05,840
the email address and if you come back

846
00:30:05,840 --> 00:30:07,760
with the right token you can just reset

847
00:30:07,760 --> 00:30:10,000
the password to any value so this token

848
00:30:10,000 --> 00:30:12,480
has to stay secret at any time except

849
00:30:12,480 --> 00:30:13,760
for the users

850
00:30:13,760 --> 00:30:15,840
whose this icon

851
00:30:15,840 --> 00:30:17,520
wants the account

852
00:30:17,520 --> 00:30:20,240
and the token is generated with md5

853
00:30:20,240 --> 00:30:22,480
which is a hash function so it's not

854
00:30:22,480 --> 00:30:23,919
really relevant here

855
00:30:23,919 --> 00:30:26,799
and empty rend between 4 and 13 which is

856
00:30:26,799 --> 00:30:28,799
generating an integral value between 4

857
00:30:28,799 --> 00:30:31,039
and 13 with inclusive bounds so it's not

858
00:30:31,039 --> 00:30:33,440
a lot of random values okay interesting

859
00:30:33,440 --> 00:30:35,360
it's also based on user which is

860
00:30:35,360 --> 00:30:37,120
something we control it's the name of

861
00:30:37,120 --> 00:30:39,279
the user with visiting the password

862
00:30:39,279 --> 00:30:41,200
it's based on time which is the

863
00:30:41,200 --> 00:30:44,080
timestamp but in the replies we get the

864
00:30:44,080 --> 00:30:46,559
dates adder so we know which server or

865
00:30:46,559 --> 00:30:48,240
which time is on server and it's

866
00:30:48,240 --> 00:30:49,520
something like it's not too hard to

867
00:30:49,520 --> 00:30:52,240
estimate anyway and pass one which is

868
00:30:52,240 --> 00:30:54,159
the new password to set so basically

869
00:30:54,159 --> 00:30:55,760
everything is known except a value

870
00:30:55,760 --> 00:30:57,840
between 4 and 13.

871
00:30:57,840 --> 00:31:00,240
so even taking into account like say

872
00:31:00,240 --> 00:31:03,279
maybe some some seconds of like delay

873
00:31:03,279 --> 00:31:05,840
between when we do the request time for

874
00:31:05,840 --> 00:31:07,360
the email to be sent and when we get to

875
00:31:07,360 --> 00:31:10,080
reply we can just find password get and

876
00:31:10,080 --> 00:31:12,080
guess guess the token wizard password

877
00:31:12,080 --> 00:31:13,840
with less than 50 trials

878
00:31:13,840 --> 00:31:16,159
and all the existing pair accounts names

879
00:31:16,159 --> 00:31:17,679
are public so we can just go over the

880
00:31:17,679 --> 00:31:20,640
list and just find developers with like

881
00:31:20,640 --> 00:31:22,480
popular packages and just reset this

882
00:31:22,480 --> 00:31:23,919
password and just deploy a new version

883
00:31:23,919 --> 00:31:26,480
with backdoors and the bug is really odd

884
00:31:26,480 --> 00:31:28,559
i say it's older than me but i'm not

885
00:31:28,559 --> 00:31:30,720
even lying it's like it's 15 years old

886
00:31:30,720 --> 00:31:32,399
okay so it's not older than me but like

887
00:31:32,399 --> 00:31:34,640
it's since it's here since nearly the

888
00:31:34,640 --> 00:31:36,240
very beginning of beer

889
00:31:36,240 --> 00:31:37,200
and

890
00:31:37,200 --> 00:31:38,640
okay it's pretty good like the impact is

891
00:31:38,640 --> 00:31:39,840
called because we can just take over

892
00:31:39,840 --> 00:31:42,080
anything but it would be even better to

893
00:31:42,080 --> 00:31:44,080
better to again call execution because

894
00:31:44,080 --> 00:31:47,200
it's always a goal and we tried to look

895
00:31:47,200 --> 00:31:49,200
for you know back in the days php

896
00:31:49,200 --> 00:31:50,720
digitalization vermices were really

897
00:31:50,720 --> 00:31:53,120
common and really easy to exploit if you

898
00:31:53,120 --> 00:31:54,880
don't know about this you can

899
00:31:54,880 --> 00:31:58,320
click on this link um because it's it's

900
00:31:58,320 --> 00:32:00,880
it's a bible for for certain abilities

901
00:32:00,880 --> 00:32:02,640
and what you need to know is

902
00:32:02,640 --> 00:32:05,360
to exploit it you need to find gadgets

903
00:32:05,360 --> 00:32:07,600
which are called popchains

904
00:32:07,600 --> 00:32:09,760
but say depend on what's running on

905
00:32:09,760 --> 00:32:11,360
server because you need to import them

906
00:32:11,360 --> 00:32:12,799
and find the right classes and just

907
00:32:12,799 --> 00:32:14,480
combine everything together to make it

908
00:32:14,480 --> 00:32:16,080
happen so

909
00:32:16,080 --> 00:32:18,720
sometimes even you find we call like an

910
00:32:18,720 --> 00:32:20,880
unsaved visualization you may not always

911
00:32:20,880 --> 00:32:23,279
exploit it and that's what happened here

912
00:32:23,279 --> 00:32:25,840
i found pretty cool bug into profile

913
00:32:25,840 --> 00:32:27,519
edition for administrator to reach the

914
00:32:27,519 --> 00:32:29,039
unserialized

915
00:32:29,039 --> 00:32:32,000
but i wasn't able to exploit it so yeah

916
00:32:32,000 --> 00:32:32,960
but

917
00:32:32,960 --> 00:32:34,640
though looking around were like okay

918
00:32:34,640 --> 00:32:36,240
maybe there is something interesting

919
00:32:36,240 --> 00:32:38,159
something else interesting and indeed

920
00:32:38,159 --> 00:32:40,240
there is a package mission queue

921
00:32:40,240 --> 00:32:41,760
every time you want to submit a package

922
00:32:41,760 --> 00:32:42,960
so you have an account you want to

923
00:32:42,960 --> 00:32:44,480
deploy in the package it's added to your

924
00:32:44,480 --> 00:32:46,640
work queue which is running run by

925
00:32:46,640 --> 00:32:49,360
asynchronous workers that just take

926
00:32:49,360 --> 00:32:51,679
the task and just run it and this queue

927
00:32:51,679 --> 00:32:54,240
is here to generate documentation

928
00:32:54,240 --> 00:32:55,919
for packages and then later publish it

929
00:32:55,919 --> 00:32:58,159
on pier so it's really interesting for

930
00:32:58,159 --> 00:32:59,440
us because there are like external

931
00:32:59,440 --> 00:33:01,919
commands being invoked there is a lot of

932
00:33:01,919 --> 00:33:04,559
file file system accesses um so there

933
00:33:04,559 --> 00:33:06,320
was like a lot of room for for mistakes

934
00:33:06,320 --> 00:33:07,760
and maybe we could even try to find

935
00:33:07,760 --> 00:33:10,240
variability in php dock itself so like

936
00:33:10,240 --> 00:33:12,399
it's pretty interesting

937
00:33:12,399 --> 00:33:15,360
and the code on its own pretty easy uh

938
00:33:15,360 --> 00:33:17,760
what i just put involved is

939
00:33:17,760 --> 00:33:19,760
that it's taking the file name we just

940
00:33:19,760 --> 00:33:22,320
upload it and it creates instead

941
00:33:22,320 --> 00:33:25,600
instantiating as the class archive tile

942
00:33:25,600 --> 00:33:28,480
which is a way to pass archives and just

943
00:33:28,480 --> 00:33:31,840
later extract it to a temp folder

944
00:33:31,840 --> 00:33:34,399
that's archived like we said

945
00:33:34,399 --> 00:33:36,480
the version it's it's pure web is

946
00:33:36,480 --> 00:33:37,760
running

947
00:33:37,760 --> 00:33:38,559
it's

948
00:33:38,559 --> 00:33:41,120
quite old and there are also

949
00:33:41,120 --> 00:33:42,880
publicly known varieties in it because

950
00:33:42,880 --> 00:33:44,799
in this version which is i think

951
00:33:44,799 --> 00:33:46,960
something like five years old

952
00:33:46,960 --> 00:33:49,039
so with ccv

953
00:33:49,039 --> 00:33:51,279
which is says okay there is no public

954
00:33:51,279 --> 00:33:53,279
park but it says okay it allows right

955
00:33:53,279 --> 00:33:55,760
operation with a pass traversal because

956
00:33:55,760 --> 00:33:58,559
of symlinks and in the php world being

957
00:33:58,559 --> 00:34:00,720
able to write a script outside of the

958
00:34:00,720 --> 00:34:02,399
main directory it's enough to gain code

959
00:34:02,399 --> 00:34:05,039
execution 99 of the time because you can

960
00:34:05,039 --> 00:34:06,399
just write a new script under the

961
00:34:06,399 --> 00:34:09,359
regroup and 99 percent of the time

962
00:34:09,359 --> 00:34:10,879
there is no permission check or no

963
00:34:10,879 --> 00:34:13,918
oddening preventing you to do it

964
00:34:13,918 --> 00:34:15,440
so we just looked at the patch and i

965
00:34:15,440 --> 00:34:17,119
will just show you this patch and give

966
00:34:17,119 --> 00:34:18,960
you some glimpse of all the tafa

967
00:34:18,960 --> 00:34:22,639
networks it's basically uh 512 bytes of

968
00:34:22,639 --> 00:34:25,199
adder with some metadata information

969
00:34:25,199 --> 00:34:26,560
like the name the destination of the

970
00:34:26,560 --> 00:34:28,480
links type of file then you have the

971
00:34:28,480 --> 00:34:31,119
file itself with some rounding and then

972
00:34:31,119 --> 00:34:32,800
you just repeat for every single file so

973
00:34:32,800 --> 00:34:34,879
there's no compression involved and then

974
00:34:34,879 --> 00:34:36,960
you have two entries of null bytes

975
00:34:36,960 --> 00:34:38,399
and there are several specifications

976
00:34:38,399 --> 00:34:41,520
here but most common one is ustar i

977
00:34:41,520 --> 00:34:43,359
think it's the one you have for unix

978
00:34:43,359 --> 00:34:45,520
star and uh it allows you for longer

979
00:34:45,520 --> 00:34:48,320
file names new file types and so on and

980
00:34:48,320 --> 00:34:51,119
in the patch uh i went over quickly so i

981
00:34:51,119 --> 00:34:53,599
just show you the code here um we see

982
00:34:53,599 --> 00:34:55,280
there is something related to the type

983
00:34:55,280 --> 00:34:57,599
flag being set to 2 for this entry and

984
00:34:57,599 --> 00:34:59,680
if we look at the goal of tar

985
00:34:59,680 --> 00:35:02,240
2 equals same type which is for symbolic

986
00:35:02,240 --> 00:35:04,160
links so it's still the same as what we

987
00:35:04,160 --> 00:35:05,520
saw in the description so we're on the

988
00:35:05,520 --> 00:35:06,480
good way

989
00:35:06,480 --> 00:35:08,240
and there is a third check that was

990
00:35:08,240 --> 00:35:10,079
introduced that is trying to check if

991
00:35:10,079 --> 00:35:12,560
the destination of the link that was

992
00:35:12,560 --> 00:35:15,119
created is still below the destination

993
00:35:15,119 --> 00:35:17,040
path of where we are trying to extract

994
00:35:17,040 --> 00:35:20,240
the file which is the ptmp directory

995
00:35:20,240 --> 00:35:21,359
so

996
00:35:21,359 --> 00:35:22,400
basically

997
00:35:22,400 --> 00:35:24,160
the bug

998
00:35:24,160 --> 00:35:26,480
should allow us by creating a sim link

999
00:35:26,480 --> 00:35:28,960
symbolic link to write anywhere else on

1000
00:35:28,960 --> 00:35:30,560
the system so we just created a peer

1001
00:35:30,560 --> 00:35:32,640
package with a simple link

1002
00:35:32,640 --> 00:35:35,040
and that's how it works

1003
00:35:35,040 --> 00:35:37,680
yeah still not like the pointer um

1004
00:35:37,680 --> 00:35:39,520
this is the initial state and in the

1005
00:35:39,520 --> 00:35:41,760
vartmp uploads we have packet we just

1006
00:35:41,760 --> 00:35:43,920
uploaded and for now nothing happened

1007
00:35:43,920 --> 00:35:46,000
because we are not extracting it but

1008
00:35:46,000 --> 00:35:47,760
when the extraction opens we first

1009
00:35:47,760 --> 00:35:50,480
create a file called symlink pointing to

1010
00:35:50,480 --> 00:35:52,800
somewhere else the webroot creating a

1011
00:35:52,800 --> 00:35:54,960
file name evol.php

1012
00:35:54,960 --> 00:35:56,480
and this file doesn't take us yet we

1013
00:35:56,480 --> 00:35:58,720
just created a link a reference to this

1014
00:35:58,720 --> 00:36:00,720
file but it's not here yet

1015
00:36:00,720 --> 00:36:03,280
then we extract a file also named sim

1016
00:36:03,280 --> 00:36:05,280
link that will be written into the first

1017
00:36:05,280 --> 00:36:07,599
file named same link that will be

1018
00:36:07,599 --> 00:36:10,079
redirected to the evil.php file and here

1019
00:36:10,079 --> 00:36:11,359
we put some

1020
00:36:11,359 --> 00:36:13,119
let's say shell

1021
00:36:13,119 --> 00:36:14,880
so it's just a way for us to be able to

1022
00:36:14,880 --> 00:36:16,960
execute commands later on and then we

1023
00:36:16,960 --> 00:36:19,520
just subtract the package.xml file

1024
00:36:19,520 --> 00:36:21,599
just to go through all the other checks

1025
00:36:21,599 --> 00:36:22,720
before

1026
00:36:22,720 --> 00:36:24,480
and we can just chain both back so we

1027
00:36:24,480 --> 00:36:26,000
can basically take over an administrator

1028
00:36:26,000 --> 00:36:28,160
account or developer account create a

1029
00:36:28,160 --> 00:36:30,400
new package approve it and exploit the

1030
00:36:30,400 --> 00:36:31,599
password because back to gamecode

1031
00:36:31,599 --> 00:36:33,280
execution and now we can just compromise

1032
00:36:33,280 --> 00:36:35,839
other packages i try to rootkit the

1033
00:36:35,839 --> 00:36:38,800
server gain persistent access and

1034
00:36:38,800 --> 00:36:40,640
there's not much room for in lateral

1035
00:36:40,640 --> 00:36:42,880
pivot uh because even if it's you know

1036
00:36:42,880 --> 00:36:45,760
under the php core project um on the

1037
00:36:45,760 --> 00:36:48,560
server there will only be a website so

1038
00:36:48,560 --> 00:36:50,400
yeah why not but we could maybe

1039
00:36:50,400 --> 00:36:52,560
compromise installers or you know could

1040
00:36:52,560 --> 00:36:53,920
could be really interesting for

1041
00:36:53,920 --> 00:36:55,359
phosphate actors

1042
00:36:55,359 --> 00:36:58,640
and i will show you what it looks like

1043
00:36:59,040 --> 00:37:01,599
so same setup

1044
00:37:01,599 --> 00:37:04,560
attacker's shell is on the top right

1045
00:37:04,560 --> 00:37:06,640
below we just have the ipaddresses and

1046
00:37:06,640 --> 00:37:07,680
stuff

1047
00:37:07,680 --> 00:37:09,599
and i will just manually run the user

1048
00:37:09,599 --> 00:37:13,280
queue absolutely nothing interesting

1049
00:37:15,119 --> 00:37:17,119
and on the left we'll try to log in with

1050
00:37:17,119 --> 00:37:18,640
admin and foobar and it's not working

1051
00:37:18,640 --> 00:37:20,960
because not admin password but obviously

1052
00:37:20,960 --> 00:37:22,480
we have the exploits

1053
00:37:22,480 --> 00:37:24,079
and we'll reset admins password to

1054
00:37:24,079 --> 00:37:26,480
football

1055
00:37:27,280 --> 00:37:29,920
and just taking a few tries like unknown

1056
00:37:29,920 --> 00:37:31,599
maybe 20

1057
00:37:31,599 --> 00:37:33,280
and now we can just log in as admin and

1058
00:37:33,280 --> 00:37:35,040
football awesome

1059
00:37:35,040 --> 00:37:37,839
so now let's go upload the package

1060
00:37:37,839 --> 00:37:39,760
so we generate first the archive with

1061
00:37:39,760 --> 00:37:42,000
sim link as a link sim link as a file

1062
00:37:42,000 --> 00:37:44,800
and then package.xml

1063
00:37:44,800 --> 00:37:46,960
we go to the release process

1064
00:37:46,960 --> 00:37:47,920
edit

1065
00:37:47,920 --> 00:37:49,200
load it

1066
00:37:49,200 --> 00:37:51,280
and below we see it was executed by the

1067
00:37:51,280 --> 00:37:54,800
queue and now if we go to evil.php

1068
00:37:54,800 --> 00:37:56,079
where we shall

1069
00:37:56,079 --> 00:37:59,680
so basically code execution and pay

1070
00:38:01,520 --> 00:38:02,839
oh

1071
00:38:02,839 --> 00:38:04,720
yeah um this timeline is slightly

1072
00:38:04,720 --> 00:38:06,240
different because project is kind of

1073
00:38:06,240 --> 00:38:08,720
sunsetting uh we were

1074
00:38:08,720 --> 00:38:12,400
in the initial contact was in july 2021

1075
00:38:12,400 --> 00:38:15,680
um they published real uh fixes on

1076
00:38:15,680 --> 00:38:17,520
github pretty quickly like a few days

1077
00:38:17,520 --> 00:38:18,400
after

1078
00:38:18,400 --> 00:38:20,720
and it took eight months to deploy it on

1079
00:38:20,720 --> 00:38:23,280
the real production server because there

1080
00:38:23,280 --> 00:38:24,800
were only a few maintenance that still

1081
00:38:24,800 --> 00:38:26,640
got access to the server so it took a

1082
00:38:26,640 --> 00:38:28,400
little bit of time but still thank you

1083
00:38:28,400 --> 00:38:31,200
can guest mark and chuck for the help uh

1084
00:38:31,200 --> 00:38:32,880
if you want to support p

1085
00:38:32,880 --> 00:38:34,800
and a php however there is no something

1086
00:38:34,800 --> 00:38:37,040
called php foundation uh which is

1087
00:38:37,040 --> 00:38:38,400
several organizations that just group

1088
00:38:38,400 --> 00:38:40,960
together to make sure the php language

1089
00:38:40,960 --> 00:38:42,079
could just

1090
00:38:42,079 --> 00:38:43,760
continue to pay full-time developers to

1091
00:38:43,760 --> 00:38:45,040
work on php

1092
00:38:45,040 --> 00:38:46,880
and you should still consider moving to

1093
00:38:46,880 --> 00:38:48,880
composer because

1094
00:38:48,880 --> 00:38:50,560
the same packages are also present in

1095
00:38:50,560 --> 00:38:52,960
composer so there is more active

1096
00:38:52,960 --> 00:38:54,960
community support so i think we should

1097
00:38:54,960 --> 00:38:57,440
start to all move there

1098
00:38:57,440 --> 00:38:58,720
and the

1099
00:38:58,720 --> 00:39:00,400
patch is a little funny because

1100
00:39:00,400 --> 00:39:02,079
basically instead of the empty run

1101
00:39:02,079 --> 00:39:04,800
function we just generate 16 bytes of

1102
00:39:04,800 --> 00:39:06,800
strong entropy uh

1103
00:39:06,800 --> 00:39:09,520
randomness let's say but if you didn't

1104
00:39:09,520 --> 00:39:11,680
see it there is typo so we're just

1105
00:39:11,680 --> 00:39:13,200
assigning this random value to random

1106
00:39:13,200 --> 00:39:16,240
bytes and then we make the md5 run buys

1107
00:39:16,240 --> 00:39:17,920
so it's basically every time we reset

1108
00:39:17,920 --> 00:39:20,560
somebody's password we just set it to

1109
00:39:20,560 --> 00:39:22,880
the md5 of an empty string

1110
00:39:22,880 --> 00:39:25,680
so we just told them and they fix it but

1111
00:39:25,680 --> 00:39:27,440
it's pretty nice because that would have

1112
00:39:27,440 --> 00:39:29,760
been exploitable as well

1113
00:39:29,760 --> 00:39:32,560
and now mitigations um

1114
00:39:32,560 --> 00:39:35,119
you saw it was pretty easy and i guess

1115
00:39:35,119 --> 00:39:37,119
that similarities will happen again uh

1116
00:39:37,119 --> 00:39:39,119
microphone that is free uh real attack

1117
00:39:39,119 --> 00:39:41,280
from that is two and we found two and

1118
00:39:41,280 --> 00:39:44,560
it's pretty crazy so we have to we have

1119
00:39:44,560 --> 00:39:46,000
to say that it will happen again for

1120
00:39:46,000 --> 00:39:47,839
every single package manager and every

1121
00:39:47,839 --> 00:39:50,000
single ecosystem and other ways for on

1122
00:39:50,000 --> 00:39:51,839
the offensive side it's always easier

1123
00:39:51,839 --> 00:39:53,839
you have to find one bug one single

1124
00:39:53,839 --> 00:39:56,640
unsafe random generation to break in and

1125
00:39:56,640 --> 00:39:57,599
on the

1126
00:39:57,599 --> 00:40:00,160
defensive side they have to kind of try

1127
00:40:00,160 --> 00:40:02,800
to prevent yet unknown bugs uh to make

1128
00:40:02,800 --> 00:40:04,480
sure they won't get on so it's always

1129
00:40:04,480 --> 00:40:06,720
easy on the on the offensive side

1130
00:40:06,720 --> 00:40:08,640
so we need to try to start thinking

1131
00:40:08,640 --> 00:40:10,240
about reducing the impact of certain

1132
00:40:10,240 --> 00:40:12,880
drugs like if somebody gets sc on

1133
00:40:12,880 --> 00:40:15,200
composer we have to find ways

1134
00:40:15,200 --> 00:40:18,480
to not uh compromise entire planet

1135
00:40:18,480 --> 00:40:20,240
so i did a little tier list

1136
00:40:20,240 --> 00:40:22,720
of what could be nice to implement

1137
00:40:22,720 --> 00:40:25,200
basically 2fa is useless rendering which

1138
00:40:25,200 --> 00:40:27,680
is putting all your dependencies is your

1139
00:40:27,680 --> 00:40:29,599
in your own source tree and just

1140
00:40:29,599 --> 00:40:31,280
reviewing all the changes and updating

1141
00:40:31,280 --> 00:40:32,960
it manually just useless you just spend

1142
00:40:32,960 --> 00:40:34,240
your time reading some of the else's

1143
00:40:34,240 --> 00:40:36,720
code for no for no reason

1144
00:40:36,720 --> 00:40:39,839
s-bomb is pretty fancy new buzzword now

1145
00:40:39,839 --> 00:40:41,760
uh because it's monetary like the white

1146
00:40:41,760 --> 00:40:44,319
house is forcing companies to do it um

1147
00:40:44,319 --> 00:40:46,000
it's called software bill of materials

1148
00:40:46,000 --> 00:40:47,839
and basically you have to list every

1149
00:40:47,839 --> 00:40:49,440
single dependency and transitive

1150
00:40:49,440 --> 00:40:51,440
dependency of your software but it won't

1151
00:40:51,440 --> 00:40:52,880
prevent compromise but at least if you

1152
00:40:52,880 --> 00:40:54,400
get compromised

1153
00:40:54,400 --> 00:40:56,160
and uh like somebody says okay there's a

1154
00:40:56,160 --> 00:40:58,560
lock for j happening do you use log4j

1155
00:40:58,560 --> 00:41:00,160
you will be able to quickly grab through

1156
00:41:00,160 --> 00:41:01,599
it and see if you're actually using

1157
00:41:01,599 --> 00:41:03,839
offer j of if your any of the transitive

1158
00:41:03,839 --> 00:41:05,599
dependency is burning or

1159
00:41:05,599 --> 00:41:07,520
so why not but it's not proactive it's

1160
00:41:07,520 --> 00:41:09,280
not preventing it you can just react

1161
00:41:09,280 --> 00:41:10,240
faster

1162
00:41:10,240 --> 00:41:11,680
uh version pinning is basically the same

1163
00:41:11,680 --> 00:41:13,200
as rendering you just fix your

1164
00:41:13,200 --> 00:41:15,680
dependencies to always fashion you know

1165
00:41:15,680 --> 00:41:17,599
are safe but every time you need to

1166
00:41:17,599 --> 00:41:19,200
update your more recent version you have

1167
00:41:19,200 --> 00:41:21,520
to go through the changes and it's like

1168
00:41:21,520 --> 00:41:23,520
we will spend so many time in it

1169
00:41:23,520 --> 00:41:25,440
um there's also optional code signing

1170
00:41:25,440 --> 00:41:27,200
why not but if it's optional nobody will

1171
00:41:27,200 --> 00:41:29,760
do it so it's not that good and

1172
00:41:29,760 --> 00:41:31,520
money for party audits security patches

1173
00:41:31,520 --> 00:41:33,599
i think it's great like we found this

1174
00:41:33,599 --> 00:41:37,359
stuff quite easily and i think if

1175
00:41:37,359 --> 00:41:38,800
somebody gave money to the php

1176
00:41:38,800 --> 00:41:40,800
foundation for like auditing p they

1177
00:41:40,800 --> 00:41:42,800
would have funded but like in 15 years

1178
00:41:42,800 --> 00:41:44,319
nobody ever did it

1179
00:41:44,319 --> 00:41:45,920
and security patches it's like it's

1180
00:41:45,920 --> 00:41:47,520
playing the long game i don't know like

1181
00:41:47,520 --> 00:41:49,520
if we all start contributing like

1182
00:41:49,520 --> 00:41:51,520
security uh if we all start making

1183
00:41:51,520 --> 00:41:53,520
security contributions to projects uh

1184
00:41:53,520 --> 00:41:56,240
sandboxing things just making it overall

1185
00:41:56,240 --> 00:41:57,280
safer

1186
00:41:57,280 --> 00:41:58,319
would

1187
00:41:58,319 --> 00:42:00,240
prevent like password results it

1188
00:42:00,240 --> 00:42:01,520
shouldn't that kind of thing shouldn't

1189
00:42:01,520 --> 00:42:03,680
happen like in production servers you

1190
00:42:03,680 --> 00:42:06,480
should be you should be ch rooted and

1191
00:42:06,480 --> 00:42:08,880
like all this kind of unsafe stuff

1192
00:42:08,880 --> 00:42:11,440
could be done some like in safe way so i

1193
00:42:11,440 --> 00:42:13,200
think the best way to go would be is

1194
00:42:13,200 --> 00:42:15,680
monetary record signing

1195
00:42:15,680 --> 00:42:18,079
uh the idea behind it is just to for

1196
00:42:18,079 --> 00:42:19,599
every single every single time a

1197
00:42:19,599 --> 00:42:21,440
developer is applying package you would

1198
00:42:21,440 --> 00:42:23,920
sign it like with a key they say only

1199
00:42:23,920 --> 00:42:24,800
them

1200
00:42:24,800 --> 00:42:26,319
say no it's like it's not packaged

1201
00:42:26,319 --> 00:42:27,839
signed by package manager it's invest

1202
00:42:27,839 --> 00:42:29,760
developer and you would publish

1203
00:42:29,760 --> 00:42:32,400
signature to a publican to public app

1204
00:42:32,400 --> 00:42:34,880
and only ledger which is like let's say

1205
00:42:34,880 --> 00:42:36,720
public database fancy word for public

1206
00:42:36,720 --> 00:42:39,280
database and it would be similar to tls

1207
00:42:39,280 --> 00:42:41,200
certificate transparency so every time

1208
00:42:41,200 --> 00:42:43,440
you generate an http certificate tl

1209
00:42:43,440 --> 00:42:44,560
certificate

1210
00:42:44,560 --> 00:42:46,160
uh you

1211
00:42:46,160 --> 00:42:48,560
provide a signing certificate as to say

1212
00:42:48,560 --> 00:42:50,560
okay i just signed certificate for this

1213
00:42:50,560 --> 00:42:52,560
host name so basically we'll do the same

1214
00:42:52,560 --> 00:42:54,720
for packages so every time you download

1215
00:42:54,720 --> 00:42:56,640
package you can just query some third

1216
00:42:56,640 --> 00:42:58,079
party and say okay

1217
00:42:58,079 --> 00:42:59,680
this is the signature for digestion

1218
00:42:59,680 --> 00:43:01,440
loaded is it safe or was it compromised

1219
00:43:01,440 --> 00:43:02,640
by somebody

1220
00:43:02,640 --> 00:43:04,720
and also requires some protection

1221
00:43:04,720 --> 00:43:06,400
against doing great attacks otherwise

1222
00:43:06,400 --> 00:43:08,640
attackers could be trying to force you

1223
00:43:08,640 --> 00:43:10,560
to use a safe version

1224
00:43:10,560 --> 00:43:12,800
of the software but okay it's just an

1225
00:43:12,800 --> 00:43:15,040
implementation detail and peer and

1226
00:43:15,040 --> 00:43:17,040
pirates try to work in this area but it

1227
00:43:17,040 --> 00:43:19,839
was using pgp and i mean nobody's using

1228
00:43:19,839 --> 00:43:23,520
pgp for mail so pgp for for packages

1229
00:43:23,520 --> 00:43:25,599
it's not like you know ux and security

1230
00:43:25,599 --> 00:43:27,280
it's always hard to make it work

1231
00:43:27,280 --> 00:43:28,640
together

1232
00:43:28,640 --> 00:43:30,560
so there's some initial

1233
00:43:30,560 --> 00:43:32,640
ground work done by paragon initiatives

1234
00:43:32,640 --> 00:43:34,640
um for composers there was a five years

1235
00:43:34,640 --> 00:43:37,119
old discussion but php never really got

1236
00:43:37,119 --> 00:43:40,400
like proper cryptography functions as i

1237
00:43:40,400 --> 00:43:43,119
got only recently so it's kind of

1238
00:43:43,119 --> 00:43:45,520
never got traction and it would require

1239
00:43:45,520 --> 00:43:47,440
some a lot of effort to make it happen

1240
00:43:47,440 --> 00:43:49,839
but they still try to put the concept of

1241
00:43:49,839 --> 00:43:53,280
cod signing and try to provide some no

1242
00:43:53,280 --> 00:43:54,960
test implementations and it's pretty

1243
00:43:54,960 --> 00:43:58,000
good like i think

1244
00:43:58,000 --> 00:44:00,079
yeah as they have some merits

1245
00:44:00,079 --> 00:44:01,920
and there is a new exciting initiative

1246
00:44:01,920 --> 00:44:04,319
called six star uh which is basically

1247
00:44:04,319 --> 00:44:06,160
what they say some restful ledger with

1248
00:44:06,160 --> 00:44:07,760
republican stance where everybody can

1249
00:44:07,760 --> 00:44:08,960
just say

1250
00:44:08,960 --> 00:44:11,839
hello i am this developer uh i have

1251
00:44:11,839 --> 00:44:13,839
approved because i'm logged in my google

1252
00:44:13,839 --> 00:44:15,680
account on my github account i can

1253
00:44:15,680 --> 00:44:17,760
program this user and i just release a

1254
00:44:17,760 --> 00:44:19,920
new version can you sign it and server

1255
00:44:19,920 --> 00:44:22,079
will sign it and just signature and now

1256
00:44:22,079 --> 00:44:23,839
every time somebody tries to install the

1257
00:44:23,839 --> 00:44:25,839
software they can just ping them and say

1258
00:44:25,839 --> 00:44:28,400
okay i just got the signature is it is

1259
00:44:28,400 --> 00:44:29,599
it the right one

1260
00:44:29,599 --> 00:44:31,440
and there are a few projects to do it

1261
00:44:31,440 --> 00:44:32,960
and it's linux foundation project i

1262
00:44:32,960 --> 00:44:34,560
think it's pretty serious website looks

1263
00:44:34,560 --> 00:44:37,040
really nice it's also a sign of you know

1264
00:44:37,040 --> 00:44:38,000
trust

1265
00:44:38,000 --> 00:44:39,359
and there is some initial community

1266
00:44:39,359 --> 00:44:41,680
adoption uh with the pr in progress for

1267
00:44:41,680 --> 00:44:44,000
rubygem and all the llvm tables are

1268
00:44:44,000 --> 00:44:45,599
already tracked with it so you can check

1269
00:44:45,599 --> 00:44:47,359
every time you download lvm you can

1270
00:44:47,359 --> 00:44:50,400
check on this blockchain

1271
00:44:50,400 --> 00:44:53,359
if you just got the right one

1272
00:44:53,359 --> 00:44:55,440
so there's always a monetary exclusivity

1273
00:44:55,440 --> 00:44:57,359
and i think you all know this one which

1274
00:44:57,359 --> 00:44:59,680
is basically we all rely on some little

1275
00:44:59,680 --> 00:45:01,839
piece of software brought by some random

1276
00:45:01,839 --> 00:45:04,800
person living in some countryside city

1277
00:45:04,800 --> 00:45:07,680
since around 2003

1278
00:45:07,680 --> 00:45:09,520
and it will stay true like we always

1279
00:45:09,520 --> 00:45:11,599
have this uh dependency to all the

1280
00:45:11,599 --> 00:45:13,680
pieces of software we don't control

1281
00:45:13,680 --> 00:45:15,200
basically we're just

1282
00:45:15,200 --> 00:45:16,720
pulling a lot of code from a lot of

1283
00:45:16,720 --> 00:45:18,880
random places and we cannot just have

1284
00:45:18,880 --> 00:45:21,839
some creative control over everything um

1285
00:45:21,839 --> 00:45:23,599
it's also a bit scary because we could

1286
00:45:23,599 --> 00:45:25,599
compromise a good shaking of internet

1287
00:45:25,599 --> 00:45:27,760
you know the article level is look at me

1288
00:45:27,760 --> 00:45:29,440
no i'm just nobody

1289
00:45:29,440 --> 00:45:31,520
time it's just not even something to

1290
00:45:31,520 --> 00:45:33,760
track just less than a week and money is

1291
00:45:33,760 --> 00:45:35,520
just not relevant it's not a laptop and

1292
00:45:35,520 --> 00:45:36,960
not even laptop maybe on your phone you

1293
00:45:36,960 --> 00:45:37,920
could do it

1294
00:45:37,920 --> 00:45:39,760
so it's pretty scary to be able to just

1295
00:45:39,760 --> 00:45:41,119
compromise

1296
00:45:41,119 --> 00:45:44,640
maybe around 20 of the internet that way

1297
00:45:44,640 --> 00:45:45,599
and

1298
00:45:45,599 --> 00:45:47,839
so six star looks really promising uh

1299
00:45:47,839 --> 00:45:49,440
like basically you would just remove the

1300
00:45:49,440 --> 00:45:51,040
truss from the middleman you will never

1301
00:45:51,040 --> 00:45:52,480
trust packet manager you would only

1302
00:45:52,480 --> 00:45:54,160
trust the developer itself which is

1303
00:45:54,160 --> 00:45:56,880
already a lot um and i think it's

1304
00:45:56,880 --> 00:45:58,640
something to kind of lobby for and try

1305
00:45:58,640 --> 00:46:00,079
to implement in every single package

1306
00:46:00,079 --> 00:46:03,359
manager and what especially the new ones

1307
00:46:03,359 --> 00:46:06,240
and um yeah and as always no open to

1308
00:46:06,240 --> 00:46:08,400
software security it's hard because they

1309
00:46:08,400 --> 00:46:10,160
already like developers they have only a

1310
00:46:10,160 --> 00:46:11,440
few security contributions and you

1311
00:46:11,440 --> 00:46:13,760
cannot expect maintainers to also you

1312
00:46:13,760 --> 00:46:15,839
know think out of the box and try to add

1313
00:46:15,839 --> 00:46:18,960
on the software production instance say

1314
00:46:18,960 --> 00:46:21,920
maintain for free or tirelessly and so

1315
00:46:21,920 --> 00:46:24,240
basically funding having money and maybe

1316
00:46:24,240 --> 00:46:26,480
we could also try to internalize

1317
00:46:26,480 --> 00:46:28,400
supply chain best practices in dev setup

1318
00:46:28,400 --> 00:46:30,560
sim so like reviews away we pull

1319
00:46:30,560 --> 00:46:32,400
dependencies and we you know plug

1320
00:46:32,400 --> 00:46:35,040
everything together and also just keep

1321
00:46:35,040 --> 00:46:37,599
audit package managers uh either give

1322
00:46:37,599 --> 00:46:38,960
money to

1323
00:46:38,960 --> 00:46:40,720
pentest companies or just uh to

1324
00:46:40,720 --> 00:46:42,640
maintainers so they can just hire some

1325
00:46:42,640 --> 00:46:44,960
to really have some you know third party

1326
00:46:44,960 --> 00:46:49,119
audit of all everything we use basically

1327
00:46:49,119 --> 00:46:51,119
so we already released something on our

1328
00:46:51,119 --> 00:46:53,040
blog where we publish our research so

1329
00:46:53,040 --> 00:46:55,839
the composer article is already public

1330
00:46:55,839 --> 00:46:57,599
and next week on tuesday we'll release

1331
00:46:57,599 --> 00:46:59,680
details of p so if you want like more

1332
00:46:59,680 --> 00:47:01,680
technical details and more explanations

1333
00:47:01,680 --> 00:47:03,440
uh everything is on the blog and if you

1334
00:47:03,440 --> 00:47:05,359
love what you saw you can come help us

1335
00:47:05,359 --> 00:47:07,200
we have hiring position available for

1336
00:47:07,200 --> 00:47:09,119
rental research with the critical stuff

1337
00:47:09,119 --> 00:47:11,599
you'll receive simon's talk later

1338
00:47:11,599 --> 00:47:13,599
we own zimbra wordpress rocket charge

1339
00:47:13,599 --> 00:47:15,440
maybe visa bix just everything we're

1340
00:47:15,440 --> 00:47:17,520
just on it it's critical

1341
00:47:17,520 --> 00:47:19,040
so thank you for your time feel free to

1342
00:47:19,040 --> 00:47:22,480
reach out with questions i ring anything

1343
00:47:22,480 --> 00:47:27,240
twitter email and thank you

1344
00:47:27,280 --> 00:47:30,699
[Applause]

