1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:14,320 --> 00:00:15,839
good evening everyone

3
00:00:15,839 --> 00:00:18,480
so today we are going to talk about

4
00:00:18,480 --> 00:00:20,400
attacking the bluetooth

5
00:00:20,400 --> 00:00:22,720
low energy design and implementation in

6
00:00:22,720 --> 00:00:27,038
the mobile and wearable ecosystem

7
00:00:27,199 --> 00:00:29,359
so i am nitin i work as a principal

8
00:00:29,359 --> 00:00:31,679
security analyst in deep armor

9
00:00:31,679 --> 00:00:34,559
and he is my colleague rahul

10
00:00:34,559 --> 00:00:36,559
and deeparma is a cyber security

11
00:00:36,559 --> 00:00:39,600
consulting firm which offers services in

12
00:00:39,600 --> 00:00:41,840
vulnerability assessment pen testing

13
00:00:41,840 --> 00:00:43,360
secure

14
00:00:43,360 --> 00:00:46,079
sdlc designs and also trainings and

15
00:00:46,079 --> 00:00:48,640
workshops

16
00:00:49,360 --> 00:00:51,680
so for today's agenda we are going to

17
00:00:51,680 --> 00:00:53,120
look into the

18
00:00:53,120 --> 00:00:55,680
blueprint of the iot ecosystem

19
00:00:55,680 --> 00:00:58,239
the challenges in this ecosystem and

20
00:00:58,239 --> 00:01:01,120
also touch upon the topics of bluetooth

21
00:01:01,120 --> 00:01:03,440
and bluetooth le security

22
00:01:03,440 --> 00:01:06,400
and we have some demos of attacking the

23
00:01:06,400 --> 00:01:08,400
bluetooth network

24
00:01:08,400 --> 00:01:10,799
over the air and also an ecosystem

25
00:01:10,799 --> 00:01:11,680
attack

26
00:01:11,680 --> 00:01:13,600
and we'll be analyzing some

27
00:01:13,600 --> 00:01:14,640
traffic

28
00:01:14,640 --> 00:01:16,000
ble packets

29
00:01:16,000 --> 00:01:18,000
and we'll conclude the presentation by

30
00:01:18,000 --> 00:01:20,320
giving a proposed solution for the

31
00:01:20,320 --> 00:01:23,839
problems which we have discovered

32
00:01:25,360 --> 00:01:28,159
so this is how a typical iot wearable

33
00:01:28,159 --> 00:01:30,560
ecosystem looks like it has the cloud

34
00:01:30,560 --> 00:01:32,799
which is the backend service and it has

35
00:01:32,799 --> 00:01:34,159
the mobile phone which is the

36
00:01:34,159 --> 00:01:36,159
smartphones which we use to control the

37
00:01:36,159 --> 00:01:39,360
devices it can have a gateway which is

38
00:01:39,360 --> 00:01:40,880
which can be a physical device or a

39
00:01:40,880 --> 00:01:42,240
virtual device

40
00:01:42,240 --> 00:01:44,799
which connects the nodes modules and

41
00:01:44,799 --> 00:01:45,840
other

42
00:01:45,840 --> 00:01:48,560
smart devices to the cloud and

43
00:01:48,560 --> 00:01:50,640
we we have node

44
00:01:50,640 --> 00:01:53,119
which i which is the actual sensors of

45
00:01:53,119 --> 00:01:56,560
the environmental stats and it could be

46
00:01:56,560 --> 00:01:59,439
a security camera it could be a smart

47
00:01:59,439 --> 00:02:00,880
door lock

48
00:02:00,880 --> 00:02:02,560
anything it could be in the iot

49
00:02:02,560 --> 00:02:05,439
ecosystem and all these components

50
00:02:05,439 --> 00:02:08,000
communicate with each other using http

51
00:02:08,000 --> 00:02:12,560
https for the cloud and ble bluetooth

52
00:02:12,560 --> 00:02:15,040
nfc wi-fi direct everything else for the

53
00:02:15,040 --> 00:02:18,239
rest of the components

54
00:02:18,560 --> 00:02:21,520
so what is the requirement of a fitness

55
00:02:21,520 --> 00:02:24,000
tracker like it has to be comfortable

56
00:02:24,000 --> 00:02:26,000
because user will be wearing these

57
00:02:26,000 --> 00:02:27,200
devices

58
00:02:27,200 --> 00:02:29,040
and performing some physical activities

59
00:02:29,040 --> 00:02:29,840
so

60
00:02:29,840 --> 00:02:31,760
there should not be wires hanging around

61
00:02:31,760 --> 00:02:33,680
so this brings the

62
00:02:33,680 --> 00:02:36,720
need of wireless communication protocols

63
00:02:36,720 --> 00:02:37,519
and

64
00:02:37,519 --> 00:02:40,640
these devices have needs efficient

65
00:02:40,640 --> 00:02:42,720
onboarding quick pairing and needs

66
00:02:42,720 --> 00:02:45,440
continuous learning

67
00:02:45,440 --> 00:02:48,879
so there are lots of data which is being

68
00:02:48,879 --> 00:02:50,959
captured and analyzed and these has to

69
00:02:50,959 --> 00:02:53,280
be given to the user in the form of

70
00:02:53,280 --> 00:02:56,160
graphs stats etc so these are the basic

71
00:02:56,160 --> 00:02:58,480
requirements

72
00:02:58,480 --> 00:03:01,200
so let's look into the challenges in

73
00:03:01,200 --> 00:03:02,879
this ecosystem

74
00:03:02,879 --> 00:03:06,879
so iot ecosystem is constantly evolving

75
00:03:06,879 --> 00:03:07,680
and

76
00:03:07,680 --> 00:03:10,720
the small and medium-sized firm worry

77
00:03:10,720 --> 00:03:13,040
about hitting the market shelves rather

78
00:03:13,040 --> 00:03:13,760
than

79
00:03:13,760 --> 00:03:15,840
worrying about fixing the security

80
00:03:15,840 --> 00:03:17,519
issues these days

81
00:03:17,519 --> 00:03:19,280
so there are

82
00:03:19,280 --> 00:03:21,920
dozens of communication protocols and

83
00:03:21,920 --> 00:03:22,879
without

84
00:03:22,879 --> 00:03:25,440
understanding or analyzing about it it

85
00:03:25,440 --> 00:03:27,920
is being introduced into the ecosystem

86
00:03:27,920 --> 00:03:30,840
so this itself is a weakness to the

87
00:03:30,840 --> 00:03:32,720
ecosystem and

88
00:03:32,720 --> 00:03:35,680
there is long lives of this iot products

89
00:03:35,680 --> 00:03:39,040
for example if i have a smart tv or

90
00:03:39,040 --> 00:03:42,159
smart refrigerator i'll not be

91
00:03:42,159 --> 00:03:43,840
as a customer i will not be willing to

92
00:03:43,840 --> 00:03:45,519
hit the store every time there is a

93
00:03:45,519 --> 00:03:48,560
security issue so all these has to be

94
00:03:48,560 --> 00:03:52,640
considered while developing the product

95
00:03:52,640 --> 00:03:55,439
so if you take the technical problems uh

96
00:03:55,439 --> 00:03:58,159
i would say first there are loads of

97
00:03:58,159 --> 00:03:59,040
data

98
00:03:59,040 --> 00:04:01,599
like it there are pii personal

99
00:04:01,599 --> 00:04:04,480
identifiable information phi

100
00:04:04,480 --> 00:04:06,799
protected health information uh

101
00:04:06,799 --> 00:04:10,480
geometric data uh biometric data and it

102
00:04:10,480 --> 00:04:12,959
can be transaction details card details

103
00:04:12,959 --> 00:04:15,519
everything is there so there is loads of

104
00:04:15,519 --> 00:04:17,600
data on processing all this data is a

105
00:04:17,600 --> 00:04:21,120
huge challenge in these variable devices

106
00:04:21,120 --> 00:04:22,320
and

107
00:04:22,320 --> 00:04:24,320
second one is the memory constraint it

108
00:04:24,320 --> 00:04:27,280
has a very small software stack

109
00:04:27,280 --> 00:04:29,600
so this itself is

110
00:04:29,600 --> 00:04:32,320
a lot of problem in the

111
00:04:32,320 --> 00:04:33,680
ecosystem

112
00:04:33,680 --> 00:04:36,400
and also uh in cryptography like if you

113
00:04:36,400 --> 00:04:37,680
want to implement asymmetric

114
00:04:37,680 --> 00:04:39,199
cryptography or

115
00:04:39,199 --> 00:04:42,240
have a trusted execution environment

116
00:04:42,240 --> 00:04:44,000
these are going to be heavy on this

117
00:04:44,000 --> 00:04:45,680
devices

118
00:04:45,680 --> 00:04:48,160
and the third one is the cloud

119
00:04:48,160 --> 00:04:50,560
because they have multi-tenancy

120
00:04:50,560 --> 00:04:52,880
architecture for example if i'm the

121
00:04:52,880 --> 00:04:54,960
manufacturer of a device which is used

122
00:04:54,960 --> 00:04:57,360
by my competitors like say

123
00:04:57,360 --> 00:05:00,080
nice nike and adidas

124
00:05:00,080 --> 00:05:02,000
i have to store both these customers

125
00:05:02,000 --> 00:05:04,639
data in the same cloud so this cross

126
00:05:04,639 --> 00:05:07,039
domain flow will lead to multiple

127
00:05:07,039 --> 00:05:09,280
explorer exposure points as a

128
00:05:09,280 --> 00:05:10,800
consequence

129
00:05:10,800 --> 00:05:12,639
so these are some of the technical

130
00:05:12,639 --> 00:05:15,039
challenges

131
00:05:15,039 --> 00:05:16,479
so for today's agenda we will be

132
00:05:16,479 --> 00:05:18,160
concentrating on

133
00:05:18,160 --> 00:05:21,680
ble and bluetooth

134
00:05:21,680 --> 00:05:23,919
so these are wireless protocol and you

135
00:05:23,919 --> 00:05:25,680
know everybody knows about ble and

136
00:05:25,680 --> 00:05:28,160
bluetooth and it's widely used in all

137
00:05:28,160 --> 00:05:30,160
the wearable devices and in iot

138
00:05:30,160 --> 00:05:32,960
ecosystem like a

139
00:05:32,960 --> 00:05:36,479
headphone a wireless headphones speakers

140
00:05:36,479 --> 00:05:39,360
even smart watches and even health care

141
00:05:39,360 --> 00:05:41,840
systems are there and enabled with

142
00:05:41,840 --> 00:05:44,639
ble as a protocol

143
00:05:44,639 --> 00:05:47,840
and bluetooth is used where the

144
00:05:47,840 --> 00:05:51,198
throughput is more and the

145
00:05:51,280 --> 00:05:53,440
range ranges less and ble is used where

146
00:05:53,440 --> 00:05:55,680
the power consumption has to be

147
00:05:55,680 --> 00:05:56,800
less and

148
00:05:56,800 --> 00:05:59,280
wider their range should be so it is

149
00:05:59,280 --> 00:06:01,759
maintained by a bluetooth special

150
00:06:01,759 --> 00:06:02,960
interest group

151
00:06:02,960 --> 00:06:04,720
they own the

152
00:06:04,720 --> 00:06:06,479
licensing and

153
00:06:06,479 --> 00:06:08,160
all the updates are given by the

154
00:06:08,160 --> 00:06:10,880
bluetooth seek

155
00:06:11,680 --> 00:06:12,800
so let's

156
00:06:12,800 --> 00:06:15,280
jump right into the security of

157
00:06:15,280 --> 00:06:18,000
bluetooth so it all depends on the

158
00:06:18,000 --> 00:06:19,919
padding so there are four types of

159
00:06:19,919 --> 00:06:22,400
pairing that is the just just work

160
00:06:22,400 --> 00:06:25,199
methods where your device might not have

161
00:06:25,199 --> 00:06:27,440
a

162
00:06:27,440 --> 00:06:29,919
display or buttons to enter a password

163
00:06:29,919 --> 00:06:31,360
or passcode

164
00:06:31,360 --> 00:06:32,639
just like in our

165
00:06:32,639 --> 00:06:33,759
headsets

166
00:06:33,759 --> 00:06:34,880
so

167
00:06:34,880 --> 00:06:37,039
this is just work methods where zero

168
00:06:37,039 --> 00:06:39,520
zero zero zero six zeros are used

169
00:06:39,520 --> 00:06:42,479
and there is numeric comparison where

170
00:06:42,479 --> 00:06:44,240
same number has to be entered in both

171
00:06:44,240 --> 00:06:46,800
the device and the smartphone so that it

172
00:06:46,800 --> 00:06:47,919
gets paired

173
00:06:47,919 --> 00:06:50,160
and the third one is pass key entry

174
00:06:50,160 --> 00:06:51,599
where

175
00:06:51,599 --> 00:06:53,120
there will be a passcode which needs to

176
00:06:53,120 --> 00:06:54,560
be entered in the device to get it

177
00:06:54,560 --> 00:06:55,440
paired

178
00:06:55,440 --> 00:06:57,039
and fourth one is

179
00:06:57,039 --> 00:06:58,960
out of bound uh

180
00:06:58,960 --> 00:07:01,680
pairing where an external port protocol

181
00:07:01,680 --> 00:07:04,000
is used to pair these devices for

182
00:07:04,000 --> 00:07:06,639
example nfc is used to

183
00:07:06,639 --> 00:07:08,479
pair the devices like bump into each

184
00:07:08,479 --> 00:07:10,560
other the device and the phone the keys

185
00:07:10,560 --> 00:07:12,319
get exchanged

186
00:07:12,319 --> 00:07:14,960
so once this pairing process is

187
00:07:14,960 --> 00:07:17,919
successful the uh the communication will

188
00:07:17,919 --> 00:07:22,159
be encrypted using aes 128.

189
00:07:22,400 --> 00:07:23,919
so there are some

190
00:07:23,919 --> 00:07:26,240
known weaknesses in bluetooth and

191
00:07:26,240 --> 00:07:28,240
bluetooth low energy

192
00:07:28,240 --> 00:07:30,800
for example uh the stronger the pairing

193
00:07:30,800 --> 00:07:33,199
algorithm the stronger the communication

194
00:07:33,199 --> 00:07:34,560
is so

195
00:07:34,560 --> 00:07:36,560
that that always depends on the

196
00:07:36,560 --> 00:07:38,479
algorithms which is used

197
00:07:38,479 --> 00:07:39,440
and

198
00:07:39,440 --> 00:07:41,680
there is key exchange and it is always

199
00:07:41,680 --> 00:07:44,879
vulnerable to eavesdropping and

200
00:07:44,879 --> 00:07:47,680
there is just work methods which has by

201
00:07:47,680 --> 00:07:50,639
default six zeros it is always prone to

202
00:07:50,639 --> 00:07:53,360
mitm that is man in the middle attack

203
00:07:53,360 --> 00:07:55,520
and also we bring the fourth one that is

204
00:07:55,520 --> 00:07:57,280
the apps on the phones we will be

205
00:07:57,280 --> 00:07:59,680
discussing about this particular

206
00:07:59,680 --> 00:08:00,720
weakness

207
00:08:00,720 --> 00:08:03,599
in the further part of the slide

208
00:08:03,599 --> 00:08:06,000
so first let's look into the ecosystem

209
00:08:06,000 --> 00:08:08,000
problem

210
00:08:08,000 --> 00:08:10,400
so i'm handing over to rahul to give you

211
00:08:10,400 --> 00:08:13,590
the first demo

212
00:08:13,590 --> 00:08:17,010
[Music]

213
00:08:17,680 --> 00:08:20,240
good evening everyone i am rahul i work

214
00:08:20,240 --> 00:08:22,960
as security analyst at deep armor as

215
00:08:22,960 --> 00:08:24,960
part of my job i work on web app and

216
00:08:24,960 --> 00:08:27,360
cloud security and i also spend a lot of

217
00:08:27,360 --> 00:08:29,360
time on fuzzing

218
00:08:29,360 --> 00:08:31,039
so as nitin explained we'll be getting

219
00:08:31,039 --> 00:08:33,039
into demos now where we have some

220
00:08:33,039 --> 00:08:35,360
recorded videos and also i'll be showing

221
00:08:35,360 --> 00:08:37,839
a live practical demo

222
00:08:37,839 --> 00:08:40,399
so as we saw previously the problems and

223
00:08:40,399 --> 00:08:42,240
weaknesses in the bluetooth iot

224
00:08:42,240 --> 00:08:44,560
ecosystem so now we'll be taking these

225
00:08:44,560 --> 00:08:47,200
fitness trackers as a classic example to

226
00:08:47,200 --> 00:08:49,760
demonstrate the challenges and problems

227
00:08:49,760 --> 00:08:53,399
that are there in the ecosystem

228
00:08:56,000 --> 00:08:57,680
and we have responsibly disclosed the

229
00:08:57,680 --> 00:09:00,160
vulnerabilities that are there in this

230
00:09:00,160 --> 00:09:02,800
fitness trackers and also it has been

231
00:09:02,800 --> 00:09:06,640
recognized by the manufacturers

232
00:09:06,880 --> 00:09:09,360
so as you all can see uh the golden one

233
00:09:09,360 --> 00:09:11,760
which is a fossil q dreamer fitness

234
00:09:11,760 --> 00:09:13,920
tracker and the black one which is a

235
00:09:13,920 --> 00:09:16,399
famous fitness tracker device where

236
00:09:16,399 --> 00:09:18,480
these fitness tracker devices will be

237
00:09:18,480 --> 00:09:20,959
sending notifications and which

238
00:09:20,959 --> 00:09:23,519
calculates your step counts calories

239
00:09:23,519 --> 00:09:26,560
heart rate and also send notifications

240
00:09:26,560 --> 00:09:29,839
to your mobile applications

241
00:09:30,480 --> 00:09:32,720
so similar to the iot ecosystem

242
00:09:32,720 --> 00:09:35,440
explained by nitin previously so this is

243
00:09:35,440 --> 00:09:38,240
specific to the wearable ecosystem where

244
00:09:38,240 --> 00:09:41,040
it has a wearable device and mobile

245
00:09:41,040 --> 00:09:42,800
application and a cloud

246
00:09:42,800 --> 00:09:45,440
so here the wearable device will be

247
00:09:45,440 --> 00:09:46,720
communicating with its mobile

248
00:09:46,720 --> 00:09:49,360
application via bluetooth that is using

249
00:09:49,360 --> 00:09:51,920
ble protocol and even sometimes the

250
00:09:51,920 --> 00:09:53,839
wearable device can talk to the cloud

251
00:09:53,839 --> 00:09:56,720
directly and also the mobile application

252
00:09:56,720 --> 00:09:59,519
can talk to the cloud using https

253
00:09:59,519 --> 00:10:01,360
protocol

254
00:10:01,360 --> 00:10:03,120
so for today's talk

255
00:10:03,120 --> 00:10:04,560
will be mainly concentrating on the

256
00:10:04,560 --> 00:10:06,560
communication part that is happening

257
00:10:06,560 --> 00:10:08,800
between the wearable device and the

258
00:10:08,800 --> 00:10:11,680
mobile application

259
00:10:13,360 --> 00:10:15,839
so this is how the data is

260
00:10:15,839 --> 00:10:17,600
there are communication between the

261
00:10:17,600 --> 00:10:19,360
wearable device and the mobile

262
00:10:19,360 --> 00:10:21,519
application is happening so as you all

263
00:10:21,519 --> 00:10:23,600
can see there is a lot of data that is

264
00:10:23,600 --> 00:10:25,200
getting exchanged here

265
00:10:25,200 --> 00:10:27,839
so from one side whereas from a mobile

266
00:10:27,839 --> 00:10:29,920
application to the wearable device the

267
00:10:29,920 --> 00:10:33,440
data exchange will be mainly related uh

268
00:10:33,440 --> 00:10:35,680
like it the data exchange will be like

269
00:10:35,680 --> 00:10:37,920
the mobile application sending commands

270
00:10:37,920 --> 00:10:40,320
for firmware updates uh social app

271
00:10:40,320 --> 00:10:42,800
notifications and even some wearable

272
00:10:42,800 --> 00:10:45,760
device are capable of accepting

273
00:10:45,760 --> 00:10:48,000
calls and replying to them so this is on

274
00:10:48,000 --> 00:10:50,880
one side so whereas from other side from

275
00:10:50,880 --> 00:10:52,240
device to

276
00:10:52,240 --> 00:10:54,640
the mobile application the data exchange

277
00:10:54,640 --> 00:10:57,120
will be mainly related to the activities

278
00:10:57,120 --> 00:10:59,600
that is going to happen there and again

279
00:10:59,600 --> 00:11:02,079
the social app notifications

280
00:11:02,079 --> 00:11:05,760
and many other data

281
00:11:05,839 --> 00:11:08,800
so as we saw how what are the data that

282
00:11:08,800 --> 00:11:10,800
are getting exchanged between the

283
00:11:10,800 --> 00:11:12,240
wearable device and the mobile

284
00:11:12,240 --> 00:11:14,560
application now i am going to give a

285
00:11:14,560 --> 00:11:16,959
short intro on what is the problem that

286
00:11:16,959 --> 00:11:19,680
is there in this case here

287
00:11:19,680 --> 00:11:22,000
so the traffic between the wearable

288
00:11:22,000 --> 00:11:23,920
device and the mobile application will

289
00:11:23,920 --> 00:11:27,040
be completely encrypted using ltk

290
00:11:27,040 --> 00:11:30,160
so ltk is a long term key where the

291
00:11:30,160 --> 00:11:31,760
traffic between the devices will be

292
00:11:31,760 --> 00:11:34,160
completely encrypted and we'll be seeing

293
00:11:34,160 --> 00:11:38,079
more about ltk in the further slides

294
00:11:40,079 --> 00:11:40,800
so

295
00:11:40,800 --> 00:11:42,880
at this point uh whenever the attacker

296
00:11:42,880 --> 00:11:45,600
tries to steal the traffic uh or sniff

297
00:11:45,600 --> 00:11:47,120
the traffic between the devices so

298
00:11:47,120 --> 00:11:49,360
you'll be ending up with the garbage

299
00:11:49,360 --> 00:11:53,360
data that is the uh encrypted data

300
00:11:53,760 --> 00:11:55,760
so where exactly does the problem reside

301
00:11:55,760 --> 00:11:56,480
here

302
00:11:56,480 --> 00:11:58,800
so the problem really comes when there

303
00:11:58,800 --> 00:12:00,800
is a malware application sitting on your

304
00:12:00,800 --> 00:12:03,760
mobile application on your mobile itself

305
00:12:03,760 --> 00:12:05,839
so basically uh what happens here is

306
00:12:05,839 --> 00:12:08,160
whenever the data from your wearable

307
00:12:08,160 --> 00:12:10,480
device reaches the bluetooth layer so

308
00:12:10,480 --> 00:12:13,279
the bluetooth layer will decrypt the uh

309
00:12:13,279 --> 00:12:16,160
unencrypt decrypt the encrypted ble data

310
00:12:16,160 --> 00:12:18,079
and then it sends it to the mobile

311
00:12:18,079 --> 00:12:19,680
application in order to display the

312
00:12:19,680 --> 00:12:21,519
actual content of the data

313
00:12:21,519 --> 00:12:23,839
so at this time any applications which

314
00:12:23,839 --> 00:12:26,560
is sitting on your phone so can sniff

315
00:12:26,560 --> 00:12:28,959
the traffic and get all the data that is

316
00:12:28,959 --> 00:12:30,639
exchanged getting exchanged between the

317
00:12:30,639 --> 00:12:32,079
wearable device and the mobile

318
00:12:32,079 --> 00:12:34,240
application so this is where the actual

319
00:12:34,240 --> 00:12:37,959
problem resides here

320
00:12:38,880 --> 00:12:41,200
so as we saw the problem now so we'll

321
00:12:41,200 --> 00:12:43,680
directly get into the demo now so for

322
00:12:43,680 --> 00:12:45,040
the demo part

323
00:12:45,040 --> 00:12:47,120
these are the requirements where i'll be

324
00:12:47,120 --> 00:12:49,920
using a xiaomi mi band 2 a fitness

325
00:12:49,920 --> 00:12:52,880
tracker and i'll be using an

326
00:12:52,880 --> 00:12:54,320
android phone

327
00:12:54,320 --> 00:12:56,079
so on on my android phone i'll be

328
00:12:56,079 --> 00:12:58,320
installing a ledger application that is

329
00:12:58,320 --> 00:13:01,360
mi fit app so where the mi band the

330
00:13:01,360 --> 00:13:03,680
fitness tracker will be connected

331
00:13:03,680 --> 00:13:06,160
and then we'll be using a custom malware

332
00:13:06,160 --> 00:13:08,639
app which is developed by deeparmor

333
00:13:08,639 --> 00:13:10,399
so these are the requirements that we

334
00:13:10,399 --> 00:13:14,160
need for the setup for the demo now

335
00:13:15,279 --> 00:13:17,120
and this is going to be the overall

336
00:13:17,120 --> 00:13:19,120
overview of the demo where i'll be

337
00:13:19,120 --> 00:13:20,639
showing you all how to intercept the

338
00:13:20,639 --> 00:13:22,959
traffic between the wearable device and

339
00:13:22,959 --> 00:13:25,120
the mobile application uh using a

340
00:13:25,120 --> 00:13:26,320
malware app

341
00:13:26,320 --> 00:13:28,000
so as you all can see

342
00:13:28,000 --> 00:13:30,320
to the left side i have my mi band that

343
00:13:30,320 --> 00:13:32,240
is the fitness tracker so which will be

344
00:13:32,240 --> 00:13:34,720
constantly communicating with its mobile

345
00:13:34,720 --> 00:13:37,440
applications where the data will be like

346
00:13:37,440 --> 00:13:40,560
step counts calories heart rate

347
00:13:40,560 --> 00:13:42,639
so now in this case

348
00:13:42,639 --> 00:13:44,240
what we are going to do is as an

349
00:13:44,240 --> 00:13:45,760
attacker we are going to sniff the

350
00:13:45,760 --> 00:13:48,079
traffic and steal step counts and

351
00:13:48,079 --> 00:13:50,480
calories using a malware app which will

352
00:13:50,480 --> 00:13:51,199
be

353
00:13:51,199 --> 00:13:53,839
inside your mobile so just like the

354
00:13:53,839 --> 00:13:56,720
other applications

355
00:13:58,800 --> 00:14:00,639
so this is going to be the overall

356
00:14:00,639 --> 00:14:02,639
overview so now let's directly get into

357
00:14:02,639 --> 00:14:05,279
the demo now

358
00:14:08,959 --> 00:14:11,199
so before i start the demo uh i'm going

359
00:14:11,199 --> 00:14:13,199
to explain the setup that i have over

360
00:14:13,199 --> 00:14:15,040
here for the demo

361
00:14:15,040 --> 00:14:16,399
where

362
00:14:16,399 --> 00:14:18,800
i'm using a visor application so to the

363
00:14:18,800 --> 00:14:20,480
right side of my screen you can see that

364
00:14:20,480 --> 00:14:23,680
i have i'm using a visor application

365
00:14:23,680 --> 00:14:25,920
so i've connected my android phone to my

366
00:14:25,920 --> 00:14:28,000
laptop so in order to share my mobile

367
00:14:28,000 --> 00:14:30,720
screen i'm going to use the malwa this

368
00:14:30,720 --> 00:14:33,040
visor application here

369
00:14:33,040 --> 00:14:35,279
so on my android phone um i have

370
00:14:35,279 --> 00:14:37,920
installed the estimate mi fit app that

371
00:14:37,920 --> 00:14:39,920
i'll be using for the demo and this is

372
00:14:39,920 --> 00:14:42,480
the home screen of the legit application

373
00:14:42,480 --> 00:14:45,839
that i'll be using here

374
00:14:46,399 --> 00:14:48,800
so this is the uh

375
00:14:48,800 --> 00:14:50,959
mi band 2 so the fitness tracker which

376
00:14:50,959 --> 00:14:53,440
i'll be using for the demo here so which

377
00:14:53,440 --> 00:14:56,160
is a tiny little device so where

378
00:14:56,160 --> 00:14:58,639
this mi band will be connected to its

379
00:14:58,639 --> 00:15:01,440
legit application that is mi fit app

380
00:15:01,440 --> 00:15:04,079
so just to check i'm going to see how

381
00:15:04,079 --> 00:15:06,000
the step counts and calories are

382
00:15:06,000 --> 00:15:07,519
increased here

383
00:15:07,519 --> 00:15:10,160
so i'm going to simulate for step counts

384
00:15:10,160 --> 00:15:13,040
and calories so right now the step

385
00:15:13,040 --> 00:15:15,040
counts and calories are two two seven

386
00:15:15,040 --> 00:15:17,920
four so i'm simulating for uh

387
00:15:17,920 --> 00:15:19,839
step counts and calories using my mi

388
00:15:19,839 --> 00:15:20,880
band here

389
00:15:20,880 --> 00:15:23,040
so as you can see the mi band is

390
00:15:23,040 --> 00:15:25,760
connected to the mi fert app so the step

391
00:15:25,760 --> 00:15:27,920
counts are getting updated as you all

392
00:15:27,920 --> 00:15:31,040
can see on the screen here

393
00:15:32,480 --> 00:15:34,800
so this is fine so till here there is no

394
00:15:34,800 --> 00:15:36,720
problem so everything is working fine

395
00:15:36,720 --> 00:15:38,480
now so now

396
00:15:38,480 --> 00:15:40,720
let me introduce a malware app so which

397
00:15:40,720 --> 00:15:43,600
will be sitting on them on my android

398
00:15:43,600 --> 00:15:45,360
phone so which will be sniffing the

399
00:15:45,360 --> 00:15:47,120
traffic and which will be stealing the

400
00:15:47,120 --> 00:15:48,959
step counts and the calories that the

401
00:15:48,959 --> 00:15:51,360
actual mi band is sending

402
00:15:51,360 --> 00:15:53,040
the data to the uh

403
00:15:53,040 --> 00:15:55,839
application here

404
00:15:57,759 --> 00:15:59,440
so this is the malware app that i am

405
00:15:59,440 --> 00:16:01,839
using for the demo here so which is

406
00:16:01,839 --> 00:16:04,880
developed by deeparmat so this

407
00:16:04,880 --> 00:16:07,199
malware app is designed in such a way

408
00:16:07,199 --> 00:16:09,519
that it will be constantly listening to

409
00:16:09,519 --> 00:16:11,680
the different characteristics that means

410
00:16:11,680 --> 00:16:13,759
the different uids which are published

411
00:16:13,759 --> 00:16:15,279
by the mi band

412
00:16:15,279 --> 00:16:17,120
so as you can see there are different

413
00:16:17,120 --> 00:16:19,120
uids that are present so which are

414
00:16:19,120 --> 00:16:20,839
responsible for different

415
00:16:20,839 --> 00:16:23,199
activities so mainly for today's talk

416
00:16:23,199 --> 00:16:26,160
we'll be concentrating on the uids that

417
00:16:26,160 --> 00:16:28,480
is the universal unique ids that are

418
00:16:28,480 --> 00:16:30,639
responsible for fetching the

419
00:16:30,639 --> 00:16:33,199
step counts and the calories here

420
00:16:33,199 --> 00:16:35,040
so as i scroll down

421
00:16:35,040 --> 00:16:37,600
under this

422
00:16:37,600 --> 00:16:39,839
uuid is double zero double zero f double

423
00:16:39,839 --> 00:16:41,920
e so you can see there are different

424
00:16:41,920 --> 00:16:43,839
uids that are present

425
00:16:43,839 --> 00:16:46,079
so the one which we are looking for is

426
00:16:46,079 --> 00:16:48,720
this one the one that starts with seven

427
00:16:48,720 --> 00:16:50,480
double zero double zero three five one

428
00:16:50,480 --> 00:16:52,720
two so this is the

429
00:16:52,720 --> 00:16:55,839
uuid that is responsible for fetching uh

430
00:16:55,839 --> 00:16:58,079
the uh step counts in the calories so by

431
00:16:58,079 --> 00:16:59,040
doing

432
00:16:59,040 --> 00:17:01,279
lots of analysis and uh study we were

433
00:17:01,279 --> 00:17:02,959
able to find out that these were the

434
00:17:02,959 --> 00:17:04,400
uidays that were

435
00:17:04,400 --> 00:17:06,720
responsible for doing fetching step

436
00:17:06,720 --> 00:17:10,240
counts calories and heart rate

437
00:17:10,319 --> 00:17:11,760
so now uh

438
00:17:11,760 --> 00:17:14,160
i'll go back to my legit application now

439
00:17:14,160 --> 00:17:15,520
so before that

440
00:17:15,520 --> 00:17:17,039
i'm going to explain one more

441
00:17:17,039 --> 00:17:18,799
application that i'm using for the demo

442
00:17:18,799 --> 00:17:19,760
here

443
00:17:19,760 --> 00:17:21,919
so

444
00:17:23,839 --> 00:17:25,520
so as you all can see to the left side

445
00:17:25,520 --> 00:17:28,000
of my screen i'm using an android studio

446
00:17:28,000 --> 00:17:29,840
where i have connected my android phone

447
00:17:29,840 --> 00:17:32,080
that i'm using for this demo here and

448
00:17:32,080 --> 00:17:33,919
also the malware app which i have

449
00:17:33,919 --> 00:17:35,760
selected the malware app that i'll be

450
00:17:35,760 --> 00:17:38,240
using for this demo here

451
00:17:38,240 --> 00:17:40,559
so here whatever the data that get

452
00:17:40,559 --> 00:17:42,400
passes through the malware app so all

453
00:17:42,400 --> 00:17:44,160
the log data will be displayed under

454
00:17:44,160 --> 00:17:46,480
this logcat window here so basically

455
00:17:46,480 --> 00:17:48,000
what happens here is whenever the

456
00:17:48,000 --> 00:17:50,160
malware app sniffs the traffic and

457
00:17:50,160 --> 00:17:52,480
steals some of the data so all the data

458
00:17:52,480 --> 00:17:54,080
will be displayed under this lock add

459
00:17:54,080 --> 00:17:56,799
window here

460
00:17:56,799 --> 00:17:59,120
so now so now what i'm going to do is

461
00:17:59,120 --> 00:18:01,200
i'm going to take my mi band the fitness

462
00:18:01,200 --> 00:18:02,799
tracker again again i'm going to

463
00:18:02,799 --> 00:18:05,200
generate a traffic between the mi band

464
00:18:05,200 --> 00:18:07,280
and the legitimate mobile application

465
00:18:07,280 --> 00:18:10,240
that is mi fit and now let's see how the

466
00:18:10,240 --> 00:18:12,400
malware app will sniff the traffic and

467
00:18:12,400 --> 00:18:15,840
steals the step counts on the calories

468
00:18:15,919 --> 00:18:17,840
so as you all can see i'm simulating for

469
00:18:17,840 --> 00:18:20,640
step counts and calories again

470
00:18:20,640 --> 00:18:21,679
so

471
00:18:21,679 --> 00:18:24,400
since both are connected the actual data

472
00:18:24,400 --> 00:18:26,720
is getting updated in the

473
00:18:26,720 --> 00:18:28,720
mfat app that is the legit application

474
00:18:28,720 --> 00:18:30,000
application

475
00:18:30,000 --> 00:18:32,000
in the meanwhile the malware app which

476
00:18:32,000 --> 00:18:34,240
is sitting on the same bluetooth channel

477
00:18:34,240 --> 00:18:36,960
is able to sniff the traffic and get the

478
00:18:36,960 --> 00:18:39,760
step counts and the calories

479
00:18:39,760 --> 00:18:42,480
so as you all can see uh

480
00:18:42,480 --> 00:18:44,480
the step cons in the legit application

481
00:18:44,480 --> 00:18:47,520
is two three five three so the same data

482
00:18:47,520 --> 00:18:49,679
uh the malware app has been sniffed and

483
00:18:49,679 --> 00:18:51,919
it has got the same step counts here two

484
00:18:51,919 --> 00:18:54,080
three five three

485
00:18:54,080 --> 00:18:56,400
so in the same way now we can also

486
00:18:56,400 --> 00:18:58,880
sniff the traffic and get the heart rate

487
00:18:58,880 --> 00:19:01,840
as well so now i'll go back to my uh

488
00:19:01,840 --> 00:19:03,600
malware app again

489
00:19:03,600 --> 00:19:05,840
so the uuid which is responsible for

490
00:19:05,840 --> 00:19:08,480
fetching the heart rate is this one so

491
00:19:08,480 --> 00:19:11,200
the one which starts with 180d so under

492
00:19:11,200 --> 00:19:12,080
that

493
00:19:12,080 --> 00:19:15,480
uh there is a uad which starts with

494
00:19:15,480 --> 00:19:18,320
2837.000 so this is the uad that is

495
00:19:18,320 --> 00:19:21,919
responsible for fetching the hardware

496
00:19:21,919 --> 00:19:24,480
so now i'll go back to the application

497
00:19:24,480 --> 00:19:26,559
logit application again now i'm going to

498
00:19:26,559 --> 00:19:28,880
use my

499
00:19:28,880 --> 00:19:31,039
mi band again in order to get the heart

500
00:19:31,039 --> 00:19:33,520
rate now

501
00:19:37,280 --> 00:19:40,000
so i'm using my mi band uh to get my

502
00:19:40,000 --> 00:19:43,039
heart rate so it is scanning now

503
00:19:43,039 --> 00:19:46,000
so once the data is captured so it will

504
00:19:46,000 --> 00:19:48,080
send to its legit application in the

505
00:19:48,080 --> 00:19:50,640
meanwhile the data has been captured in

506
00:19:50,640 --> 00:19:51,919
the

507
00:19:51,919 --> 00:19:53,840
locket window that is the malware app as

508
00:19:53,840 --> 00:19:56,799
well so if you can see that the data is

509
00:19:56,799 --> 00:19:59,520
getting it usually take time to update

510
00:19:59,520 --> 00:20:03,240
in the actual budget application

511
00:20:09,440 --> 00:20:11,280
so you can see that heart rate in the

512
00:20:11,280 --> 00:20:14,159
legit application is 64. the same data

513
00:20:14,159 --> 00:20:15,919
that the malware app has been captured

514
00:20:15,919 --> 00:20:20,360
is also 64 over here

515
00:20:21,760 --> 00:20:24,880
so in this demo uh the malware app was

516
00:20:24,880 --> 00:20:26,960
able to sniff the traffic and we were

517
00:20:26,960 --> 00:20:28,880
just talking about the step counts and

518
00:20:28,880 --> 00:20:30,240
the calories here

519
00:20:30,240 --> 00:20:33,200
so now let's take an example uh where

520
00:20:33,200 --> 00:20:34,640
there is a

521
00:20:34,640 --> 00:20:37,280
ble device which is a blood sugar

522
00:20:37,280 --> 00:20:39,280
monitor device which will be connected

523
00:20:39,280 --> 00:20:42,240
to a insulin pump so these devices are

524
00:20:42,240 --> 00:20:45,280
mainly used for people who are diabetic

525
00:20:45,280 --> 00:20:47,919
so just imagine if the diabetic patient

526
00:20:47,919 --> 00:20:49,200
with both

527
00:20:49,200 --> 00:20:51,280
uh the sensors and the insulin pump

528
00:20:51,280 --> 00:20:53,520
connected to an android phone with this

529
00:20:53,520 --> 00:20:56,240
level of security and let's say someone

530
00:20:56,240 --> 00:20:58,480
decided to install a malware app on the

531
00:20:58,480 --> 00:21:00,960
android phone which will monitor the uh

532
00:21:00,960 --> 00:21:04,000
sugar blood sugar and it which falsify

533
00:21:04,000 --> 00:21:07,120
the uh insulin pump so this could be uh

534
00:21:07,120 --> 00:21:08,880
like this is bi-directional right so

535
00:21:08,880 --> 00:21:10,880
this this is not just about sniffing the

536
00:21:10,880 --> 00:21:13,360
traffic it's all it's about uh injection

537
00:21:13,360 --> 00:21:15,919
as well so at this time the malware app

538
00:21:15,919 --> 00:21:19,440
can send signals to send more or less

539
00:21:19,440 --> 00:21:21,600
insulin so which could be really fatal

540
00:21:21,600 --> 00:21:23,840
here

541
00:21:28,720 --> 00:21:30,640
so this was about the

542
00:21:30,640 --> 00:21:32,799
demo so now let's get back to the slides

543
00:21:32,799 --> 00:21:35,120
again

544
00:21:37,200 --> 00:21:39,520
so this is what we just saw in the demo

545
00:21:39,520 --> 00:21:42,000
where we were able to sniff the traffic

546
00:21:42,000 --> 00:21:43,280
and steal the step counts in the

547
00:21:43,280 --> 00:21:45,120
calories that the actual

548
00:21:45,120 --> 00:21:47,360
uh legit mi band and the legit

549
00:21:47,360 --> 00:21:50,639
application was sharing here

550
00:21:51,200 --> 00:21:53,280
and these are the gad profiles that we

551
00:21:53,280 --> 00:21:55,679
just saw uh

552
00:21:55,679 --> 00:21:57,280
in the demo where the left side

553
00:21:57,280 --> 00:21:59,440
screenshot shows the uids and that was

554
00:21:59,440 --> 00:22:01,919
responsible for fetching heart rate and

555
00:22:01,919 --> 00:22:04,320
the right side screenshot shows the uads

556
00:22:04,320 --> 00:22:06,400
which was fetching the step counts and

557
00:22:06,400 --> 00:22:09,039
the calories

558
00:22:10,240 --> 00:22:12,320
so here what is the root cause of this

559
00:22:12,320 --> 00:22:14,320
problem here so the root cause of the

560
00:22:14,320 --> 00:22:17,520
problem here is any app on android or

561
00:22:17,520 --> 00:22:20,720
ios can read or write the data on this

562
00:22:20,720 --> 00:22:23,120
bluetooth channel that the same legit

563
00:22:23,120 --> 00:22:24,799
application is writing

564
00:22:24,799 --> 00:22:27,360
so that means that the on android

565
00:22:27,360 --> 00:22:29,200
malware app needs a bluetooth or

566
00:22:29,200 --> 00:22:31,760
bluetooth admin permissions whereas on

567
00:22:31,760 --> 00:22:34,640
ios a malware app needs a core bluetooth

568
00:22:34,640 --> 00:22:35,760
framework

569
00:22:35,760 --> 00:22:37,760
so on the screenshot here

570
00:22:37,760 --> 00:22:40,400
according to the sdk documentation it

571
00:22:40,400 --> 00:22:42,960
says that any applications uh with

572
00:22:42,960 --> 00:22:45,039
bluetooth or bluetooth admin permissions

573
00:22:45,039 --> 00:22:47,840
are provided with extra abilities where

574
00:22:47,840 --> 00:22:49,840
on the highlighted part it says that

575
00:22:49,840 --> 00:22:51,679
those applications should not misuse

576
00:22:51,679 --> 00:22:55,840
those extra abilities here

577
00:22:56,559 --> 00:22:59,200
so this brings to brings us to the trust

578
00:22:59,200 --> 00:23:02,320
model so in the demo which we saw just

579
00:23:02,320 --> 00:23:04,960
now so there the trust model is built in

580
00:23:04,960 --> 00:23:07,600
such a way that the wearable device was

581
00:23:07,600 --> 00:23:09,600
trusting all the applications that was

582
00:23:09,600 --> 00:23:11,520
there inside my android phone so that

583
00:23:11,520 --> 00:23:14,480
could be your malware app or legit

584
00:23:14,480 --> 00:23:17,120
application or any applications that is

585
00:23:17,120 --> 00:23:20,479
inside your android phone

586
00:23:20,960 --> 00:23:23,280
so before we see the actual solution for

587
00:23:23,280 --> 00:23:25,360
this problem so now we'll see how to

588
00:23:25,360 --> 00:23:28,159
attack uh ble over the air so now i land

589
00:23:28,159 --> 00:23:31,360
over the session to nathan to

590
00:23:31,360 --> 00:23:33,760
proceed

591
00:23:34,840 --> 00:23:37,919
further you rahul so

592
00:23:37,919 --> 00:23:38,880
so let's

593
00:23:38,880 --> 00:23:42,240
dive right into the over the air ble

594
00:23:42,240 --> 00:23:44,799
attack so

595
00:23:44,799 --> 00:23:47,279
as rahul explained we were able to see

596
00:23:47,279 --> 00:23:49,919
that we are we can install a malware app

597
00:23:49,919 --> 00:23:51,440
in your phone and steal these step

598
00:23:51,440 --> 00:23:53,600
content calories it can be step counts

599
00:23:53,600 --> 00:23:55,679
calories it can be your

600
00:23:55,679 --> 00:23:58,320
bank otps or your social messages

601
00:23:58,320 --> 00:24:00,640
everything so now we are going to sniff

602
00:24:00,640 --> 00:24:02,720
the data over the air without any

603
00:24:02,720 --> 00:24:04,400
contact to your

604
00:24:04,400 --> 00:24:06,400
phone or the device will be in the

605
00:24:06,400 --> 00:24:08,880
vicinity and will attack the

606
00:24:08,880 --> 00:24:10,480
environment so we are going to

607
00:24:10,480 --> 00:24:12,400
concentrate on here that is the

608
00:24:12,400 --> 00:24:16,080
bluetooth and ble over the air

609
00:24:16,080 --> 00:24:19,679
so this is how we are going to do so mi

610
00:24:19,679 --> 00:24:22,159
band is connected to the phone and as an

611
00:24:22,159 --> 00:24:24,480
attacker with the help of a tool we are

612
00:24:24,480 --> 00:24:27,919
going to sniff this bluetooth traffic uh

613
00:24:27,919 --> 00:24:29,679
from the vicinity like if we are in the

614
00:24:29,679 --> 00:24:31,440
same vicinity as the device and the

615
00:24:31,440 --> 00:24:35,520
phone will be able to sniff the data

616
00:24:36,559 --> 00:24:37,600
so

617
00:24:37,600 --> 00:24:40,320
this is the ubertooth1 device

618
00:24:40,320 --> 00:24:42,400
which is an open source bluetooth

619
00:24:42,400 --> 00:24:44,720
testing tool developed by great scot

620
00:24:44,720 --> 00:24:45,840
gadgets

621
00:24:45,840 --> 00:24:48,640
and it is generally used for exploring

622
00:24:48,640 --> 00:24:51,440
the bluetooth protocol and we have we

623
00:24:51,440 --> 00:24:54,000
are using wireshark network analysis

624
00:24:54,000 --> 00:24:56,240
analyzing tool and we are using my

625
00:24:56,240 --> 00:24:58,320
crayons crackle which we will see in the

626
00:24:58,320 --> 00:25:01,679
further part of the slides

627
00:25:01,679 --> 00:25:04,000
so this is how the setup looks like we

628
00:25:04,000 --> 00:25:05,760
have

629
00:25:05,760 --> 00:25:06,880
the phone

630
00:25:06,880 --> 00:25:09,360
and the mi band

631
00:25:09,360 --> 00:25:11,919
near the vicinity of the attacker he who

632
00:25:11,919 --> 00:25:13,440
is connected to the

633
00:25:13,440 --> 00:25:16,400
laptop so a laptop with ubertooth

634
00:25:16,400 --> 00:25:18,480
connector is the attacker and we have

635
00:25:18,480 --> 00:25:20,400
the phone and the

636
00:25:20,400 --> 00:25:23,120
mi band app

637
00:25:23,279 --> 00:25:26,799
so since the typical conference has lots

638
00:25:26,799 --> 00:25:28,640
of bluetooth

639
00:25:28,640 --> 00:25:30,320
device and gadgets

640
00:25:30,320 --> 00:25:33,120
and the bluetooth padding happens in

641
00:25:33,120 --> 00:25:36,159
multiple channels 37 38 39 due to the

642
00:25:36,159 --> 00:25:37,919
frequency hopping we are not conducting

643
00:25:37,919 --> 00:25:40,720
this demo live so we have recorded the

644
00:25:40,720 --> 00:25:42,480
session and will be showing it to you

645
00:25:42,480 --> 00:25:45,480
now

646
00:25:56,400 --> 00:25:58,320
so what we are going to do is we are

647
00:25:58,320 --> 00:26:00,880
going to create a file uh that is a file

648
00:26:00,880 --> 00:26:01,840
pipe

649
00:26:01,840 --> 00:26:03,600
in which one end of the pipe will be

650
00:26:03,600 --> 00:26:06,240
connected to ubertooth device and the

651
00:26:06,240 --> 00:26:08,240
other end to the wireshark so that

652
00:26:08,240 --> 00:26:10,559
whenever the uber2 sniffs the bluetooth

653
00:26:10,559 --> 00:26:13,279
data we can see it live in the

654
00:26:13,279 --> 00:26:16,159
wireshark tool

655
00:26:16,400 --> 00:26:17,760
so once the

656
00:26:17,760 --> 00:26:19,520
uber tooth started

657
00:26:19,520 --> 00:26:21,919
you can see lot of data being

658
00:26:21,919 --> 00:26:23,440
sent these are all the advertisement

659
00:26:23,440 --> 00:26:26,400
packets sent from our device so

660
00:26:26,400 --> 00:26:28,320
once it is sent you can also see that

661
00:26:28,320 --> 00:26:30,559
live in the wireshark

662
00:26:30,559 --> 00:26:32,960
so we have to ignore all these packets

663
00:26:32,960 --> 00:26:35,760
and stick to the packets which we want

664
00:26:35,760 --> 00:26:39,760
that is the mi band pairing with the

665
00:26:39,760 --> 00:26:41,760
phone so now we are going to apply

666
00:26:41,760 --> 00:26:44,000
filters to eliminate the advertisement

667
00:26:44,000 --> 00:26:46,400
packets and we are looking for the

668
00:26:46,400 --> 00:26:49,039
connection request package which is of

669
00:26:49,039 --> 00:26:51,279
pdu type 5

670
00:26:51,279 --> 00:26:54,320
and it ha and whatever bluetooth that

671
00:26:54,320 --> 00:26:56,960
has data so once we apply filter and we

672
00:26:56,960 --> 00:27:00,000
are now pairing the mi band to the phone

673
00:27:00,000 --> 00:27:01,440
and we are waiting for the connection

674
00:27:01,440 --> 00:27:04,440
request

675
00:27:08,400 --> 00:27:09,919
so you can see that the connection

676
00:27:09,919 --> 00:27:12,240
request has been captured once it is

677
00:27:12,240 --> 00:27:13,360
captured

678
00:27:13,360 --> 00:27:15,440
we can see

679
00:27:15,440 --> 00:27:17,840
lots of packets being followed by the

680
00:27:17,840 --> 00:27:19,760
connection request packet and you can

681
00:27:19,760 --> 00:27:22,559
see that all these packets are not

682
00:27:22,559 --> 00:27:24,960
encrypted it is the plain gat

683
00:27:24,960 --> 00:27:26,559
characteristics and get profiles

684
00:27:26,559 --> 00:27:29,440
bluetooth attributes are visible here so

685
00:27:29,440 --> 00:27:32,080
this mi band has not enabled ltk

686
00:27:32,080 --> 00:27:34,000
encryption so we are able to see all the

687
00:27:34,000 --> 00:27:36,000
data and to

688
00:27:36,000 --> 00:27:37,840
on the screen at the bottom the white

689
00:27:37,840 --> 00:27:39,279
screen is the

690
00:27:39,279 --> 00:27:41,919
app log so we are going to compare

691
00:27:41,919 --> 00:27:43,600
we are going to simulate some step

692
00:27:43,600 --> 00:27:45,600
counts and compare the

693
00:27:45,600 --> 00:27:47,840
step counts captured using wireshark as

694
00:27:47,840 --> 00:27:50,159
well as sorry ubertooth as well as the

695
00:27:50,159 --> 00:27:52,799
actual app

696
00:27:56,960 --> 00:27:57,679
so

697
00:27:57,679 --> 00:28:00,960
we understood that this particular step

698
00:28:00,960 --> 00:28:02,880
content calories are being published in

699
00:28:02,880 --> 00:28:05,200
the handle 0040

700
00:28:05,200 --> 00:28:06,240
and

701
00:28:06,240 --> 00:28:08,720
always the step count and calories has

702
00:28:08,720 --> 00:28:10,880
an offset in front of the packet that is

703
00:28:10,880 --> 00:28:12,080
0c

704
00:28:12,080 --> 00:28:15,279
once the hexadecimal value following the

705
00:28:15,279 --> 00:28:18,320
0c are the step countdown calories so

706
00:28:18,320 --> 00:28:20,399
you can see that this particular packet

707
00:28:20,399 --> 00:28:23,279
0c2a000

708
00:28:23,279 --> 00:28:26,399
where 0c is the offset and 2a is

709
00:28:26,399 --> 00:28:30,360
translates to

710
00:28:32,159 --> 00:28:35,760
here it is so 2a which is 42 steps and

711
00:28:35,760 --> 00:28:39,440
the calories burnt is 0 as of now

712
00:28:39,440 --> 00:28:42,000
sorry 40 and 0.

713
00:28:42,000 --> 00:28:43,760
so this is what we have observed from

714
00:28:43,760 --> 00:28:46,399
this overtooth so the

715
00:28:46,399 --> 00:28:50,240
ltk ltk encryption is not enabled and we

716
00:28:50,240 --> 00:28:54,559
are able to see the packets uh as it is

717
00:28:54,559 --> 00:28:56,880
so we are able to see the unencrypted

718
00:28:56,880 --> 00:28:59,919
ble attributes and we have found the

719
00:28:59,919 --> 00:29:01,919
step content calories

720
00:29:01,919 --> 00:29:03,840
over the air

721
00:29:03,840 --> 00:29:07,120
so this brings us to the topic of ltk

722
00:29:07,120 --> 00:29:08,799
long term key

723
00:29:08,799 --> 00:29:11,120
so how this gets

724
00:29:11,120 --> 00:29:12,720
exchanged between the bluetooth

725
00:29:12,720 --> 00:29:14,720
communication is as follows so the

726
00:29:14,720 --> 00:29:16,320
device will be sending the pairing

727
00:29:16,320 --> 00:29:18,559
request and the phone sensor pairing

728
00:29:18,559 --> 00:29:21,600
response then once it is exchanged there

729
00:29:21,600 --> 00:29:23,440
will be a temporary key

730
00:29:23,440 --> 00:29:24,960
exchange between the

731
00:29:24,960 --> 00:29:26,960
phone and the device

732
00:29:26,960 --> 00:29:30,960
this gives us the srand and mran random

733
00:29:30,960 --> 00:29:33,279
numbers generated and with these three

734
00:29:33,279 --> 00:29:36,240
values we will be generating a sdk short

735
00:29:36,240 --> 00:29:37,360
term key

736
00:29:37,360 --> 00:29:40,159
once this short term key is generated

737
00:29:40,159 --> 00:29:42,720
this key will be used to encrypt the

738
00:29:42,720 --> 00:29:44,080
communication

739
00:29:44,080 --> 00:29:46,480
where the ltk key will be ltk will be

740
00:29:46,480 --> 00:29:49,200
sent so this sdk is used only for

741
00:29:49,200 --> 00:29:51,440
sending the long term key

742
00:29:51,440 --> 00:29:54,080
so once the ltk is negotiated between

743
00:29:54,080 --> 00:29:56,080
the device and the phone the rest of the

744
00:29:56,080 --> 00:29:57,600
bluetooth communication will be

745
00:29:57,600 --> 00:30:01,199
encrypted using ltk

746
00:30:01,440 --> 00:30:03,600
so this is these are the steps pairing

747
00:30:03,600 --> 00:30:05,520
request response

748
00:30:05,520 --> 00:30:08,399
then sdk is uh

749
00:30:08,399 --> 00:30:10,320
exchanged and the

750
00:30:10,320 --> 00:30:12,480
after the exchange and agreement of long

751
00:30:12,480 --> 00:30:16,799
term key the channel is encrypted

752
00:30:16,799 --> 00:30:20,720
so for this uh demo we are like it's a

753
00:30:20,720 --> 00:30:22,720
it's going to be a screenshot so for

754
00:30:22,720 --> 00:30:25,200
this experiment we have taken fossil q

755
00:30:25,200 --> 00:30:28,880
dreamer it's not available now and this

756
00:30:28,880 --> 00:30:30,240
is a simple

757
00:30:30,240 --> 00:30:32,880
accessory slash activity tracker step

758
00:30:32,880 --> 00:30:35,440
counts and calories are given

759
00:30:35,440 --> 00:30:36,480
so

760
00:30:36,480 --> 00:30:40,159
this device has enabled ltk that is the

761
00:30:40,159 --> 00:30:42,880
long term key encryption

762
00:30:42,880 --> 00:30:44,399
so this is what

763
00:30:44,399 --> 00:30:46,159
we are going to do we are going to

764
00:30:46,159 --> 00:30:49,919
capture the same pairing packets between

765
00:30:49,919 --> 00:30:52,000
the fossil q dreamer and the phone and

766
00:30:52,000 --> 00:30:54,240
we are going to get the

767
00:30:54,240 --> 00:30:56,240
packets which are supposed to be

768
00:30:56,240 --> 00:30:58,559
encrypted

769
00:30:58,559 --> 00:31:00,799
so once we repeat the experiment same

770
00:31:00,799 --> 00:31:02,640
capturing of

771
00:31:02,640 --> 00:31:05,360
the packets using overtooth the packets

772
00:31:05,360 --> 00:31:08,000
you can see here ll encryption request

773
00:31:08,000 --> 00:31:10,320
ll encryption response then start of

774
00:31:10,320 --> 00:31:12,640
encryption once the encryption is

775
00:31:12,640 --> 00:31:15,039
started you can see that all the packets

776
00:31:15,039 --> 00:31:17,200
are l2 cap fragments that is it is all

777
00:31:17,200 --> 00:31:19,519
encrypted and you are not able to see

778
00:31:19,519 --> 00:31:21,679
any other step count or calories or

779
00:31:21,679 --> 00:31:24,159
whatever data that belongs to the fossil

780
00:31:24,159 --> 00:31:26,559
q trimmer

781
00:31:26,559 --> 00:31:28,480
so does this mean is

782
00:31:28,480 --> 00:31:31,200
ltk is enough long term key encryption

783
00:31:31,200 --> 00:31:33,279
is enough

784
00:31:33,279 --> 00:31:36,480
so this brings us to the tool crackle

785
00:31:36,480 --> 00:31:39,200
so this is developed by mike

786
00:31:39,200 --> 00:31:41,360
big thanks to him because it's an

787
00:31:41,360 --> 00:31:43,200
awesome tool you should check it out so

788
00:31:43,200 --> 00:31:44,720
this works on

789
00:31:44,720 --> 00:31:47,679
based on the exploiting the flaw in the

790
00:31:47,679 --> 00:31:50,480
pairing mechanism where it brute forces

791
00:31:50,480 --> 00:31:52,559
or guesses the

792
00:31:52,559 --> 00:31:54,640
temporary key then which leads to

793
00:31:54,640 --> 00:31:56,799
short-term key then that leads to the

794
00:31:56,799 --> 00:31:58,080
ltk

795
00:31:58,080 --> 00:32:01,760
so since the fossil uh uses

796
00:32:01,760 --> 00:32:04,240
it doesn't have a display it's using the

797
00:32:04,240 --> 00:32:07,679
uh six zeros just work methods so let's

798
00:32:07,679 --> 00:32:09,519
see how this

799
00:32:09,519 --> 00:32:10,880
happens

800
00:32:10,880 --> 00:32:15,320
so we have captured the

801
00:32:17,919 --> 00:32:20,080
so we have captured the

802
00:32:20,080 --> 00:32:20,960
uh

803
00:32:20,960 --> 00:32:24,320
fossil traffic in a peak cap format and

804
00:32:24,320 --> 00:32:27,360
we are sending uh as a sending the speak

805
00:32:27,360 --> 00:32:29,760
up as an input to the crackle tool

806
00:32:29,760 --> 00:32:32,240
so you can see how quick crackle can

807
00:32:32,240 --> 00:32:33,919
crack it because

808
00:32:33,919 --> 00:32:35,039
uh the

809
00:32:35,039 --> 00:32:39,000
because of the just work methods

810
00:32:43,279 --> 00:32:46,240
yeah that's it it has cracked the ltk uh

811
00:32:46,240 --> 00:32:48,399
key as well as the temporary key you can

812
00:32:48,399 --> 00:32:51,120
see that the temporary key is six zeros

813
00:32:51,120 --> 00:32:53,440
and it has found the ltk

814
00:32:53,440 --> 00:32:56,640
and it has decrypted the packets as well

815
00:32:56,640 --> 00:32:59,440
so let me show how the decrypted packets

816
00:32:59,440 --> 00:33:01,840
look like

817
00:33:04,399 --> 00:33:05,840
so before in

818
00:33:05,840 --> 00:33:08,320
the crackle the encrypted packets were

819
00:33:08,320 --> 00:33:11,600
l2 cap fragments and after it is passed

820
00:33:11,600 --> 00:33:14,080
to crackle we get the decrypted packets

821
00:33:14,080 --> 00:33:15,440
which has all the

822
00:33:15,440 --> 00:33:17,840
bluetooth attributes and attribute level

823
00:33:17,840 --> 00:33:19,840
gap informations and all the things are

824
00:33:19,840 --> 00:33:23,039
there in the faucet

825
00:33:23,039 --> 00:33:25,120
so this is what has happened uh the

826
00:33:25,120 --> 00:33:28,320
first demo was sniffing over malware app

827
00:33:28,320 --> 00:33:30,240
inside your phone the second one is

828
00:33:30,240 --> 00:33:31,279
about

829
00:33:31,279 --> 00:33:33,519
no ltk encryption and you are able to

830
00:33:33,519 --> 00:33:35,120
sniff the

831
00:33:35,120 --> 00:33:36,559
traffic directly

832
00:33:36,559 --> 00:33:39,679
and here in fossil ltk is encrypted ltk

833
00:33:39,679 --> 00:33:42,080
encryption is enabled but you are still

834
00:33:42,080 --> 00:33:46,240
able to decrypt because of crackle tool

835
00:33:46,559 --> 00:33:51,720
so does this mean is fossil is broken

836
00:33:52,480 --> 00:33:55,120
the answer is no it is secured so this

837
00:33:55,120 --> 00:33:58,240
is one of the fixes which uh which gives

838
00:33:58,240 --> 00:34:00,559
us the solution for this problem as well

839
00:34:00,559 --> 00:34:03,279
so what has happened there is

840
00:34:03,279 --> 00:34:05,919
over the year when we got the encrypted

841
00:34:05,919 --> 00:34:08,000
packets and when we passed it to the

842
00:34:08,000 --> 00:34:09,199
crackle

843
00:34:09,199 --> 00:34:12,480
we expect a decrypted packet with step

844
00:34:12,480 --> 00:34:14,560
counts and calories but what we have

845
00:34:14,560 --> 00:34:17,280
received is decrypted packet which is

846
00:34:17,280 --> 00:34:19,280
again encrypted with an application

847
00:34:19,280 --> 00:34:20,719
specific key

848
00:34:20,719 --> 00:34:23,199
so because of this application specific

849
00:34:23,199 --> 00:34:24,159
key

850
00:34:24,159 --> 00:34:26,639
we will the attacker will not be able to

851
00:34:26,639 --> 00:34:29,760
decrypt this packets and it is encrypted

852
00:34:29,760 --> 00:34:31,679
in this fashion

853
00:34:31,679 --> 00:34:34,560
this also solves the problem of

854
00:34:34,560 --> 00:34:36,639
malware attack inside your phone because

855
00:34:36,639 --> 00:34:38,639
it all happens when it reaches your

856
00:34:38,639 --> 00:34:40,719
phone ltk is decrypted and it's given to

857
00:34:40,719 --> 00:34:42,159
all the applications

858
00:34:42,159 --> 00:34:44,639
now the device understands who it is

859
00:34:44,639 --> 00:34:47,599
talking to and it is the app legitimate

860
00:34:47,599 --> 00:34:48,480
application

861
00:34:48,480 --> 00:34:50,719
only it has the key and it can be

862
00:34:50,719 --> 00:34:52,639
decrypted only with the application

863
00:34:52,639 --> 00:34:55,440
specific key

864
00:34:56,480 --> 00:34:59,119
so the problem trust model was this that

865
00:34:59,119 --> 00:35:01,599
the device trusting the entire phone

866
00:35:01,599 --> 00:35:02,800
now the

867
00:35:02,800 --> 00:35:04,720
solution for this is

868
00:35:04,720 --> 00:35:07,200
the legitimate application only to have

869
00:35:07,200 --> 00:35:09,280
the encryption and trust established

870
00:35:09,280 --> 00:35:11,760
between the device and the legitimate

871
00:35:11,760 --> 00:35:14,760
application

872
00:35:19,760 --> 00:35:21,680
so the

873
00:35:21,680 --> 00:35:23,359
summary is that

874
00:35:23,359 --> 00:35:26,160
next generation iot device has next

875
00:35:26,160 --> 00:35:27,760
generation problems

876
00:35:27,760 --> 00:35:29,040
and

877
00:35:29,040 --> 00:35:32,320
the entire iot uh security uh comprises

878
00:35:32,320 --> 00:35:33,760
of the device

879
00:35:33,760 --> 00:35:35,839
phone uh the communication protocol

880
00:35:35,839 --> 00:35:38,560
cloud so all these components has to be

881
00:35:38,560 --> 00:35:40,880
included in the uh secure development

882
00:35:40,880 --> 00:35:42,320
lifecycle process

883
00:35:42,320 --> 00:35:44,240
in the development phase itself and

884
00:35:44,240 --> 00:35:46,800
there should be continuous security

885
00:35:46,800 --> 00:35:48,960
should be included in as a part of the

886
00:35:48,960 --> 00:35:51,040
cicd pipeline

887
00:35:51,040 --> 00:35:53,520
and today the privacy is of bigger

888
00:35:53,520 --> 00:35:56,079
concern so privacy security and legal

889
00:35:56,079 --> 00:35:57,920
has to be woven from the

890
00:35:57,920 --> 00:35:59,839
development cycle itself

891
00:35:59,839 --> 00:36:02,240
so we also have to consider uh

892
00:36:02,240 --> 00:36:04,720
integration and interoperability

893
00:36:04,720 --> 00:36:06,480
problems while

894
00:36:06,480 --> 00:36:08,960
finding solutions to

895
00:36:08,960 --> 00:36:11,040
fix these problems and it has to be

896
00:36:11,040 --> 00:36:12,400
considered to

897
00:36:12,400 --> 00:36:17,040
entirely secure our iot ecosystem

898
00:36:17,119 --> 00:36:18,400
that's it from us

899
00:36:18,400 --> 00:36:19,780
any questions

900
00:36:19,780 --> 00:36:27,010
[Applause]

901
00:36:29,599 --> 00:36:30,560
yes

902
00:36:30,560 --> 00:36:33,280
thanks for the presentation um in the

903
00:36:33,280 --> 00:36:36,880
last example uh you told that

904
00:36:36,880 --> 00:36:39,680
message were encrypted by the app yes so

905
00:36:39,680 --> 00:36:44,079
how is the key exchange between the

906
00:36:44,079 --> 00:36:46,960
device and the app yeah so the key can

907
00:36:46,960 --> 00:36:48,640
be exchanged like the device

908
00:36:48,640 --> 00:36:51,119
manufacturer can burn it inside the

909
00:36:51,119 --> 00:36:53,040
device or it can be

910
00:36:53,040 --> 00:36:55,359
embedded in the key store or once the

911
00:36:55,359 --> 00:36:58,240
device application is installed so key

912
00:36:58,240 --> 00:37:00,079
exchange is the different process which

913
00:37:00,079 --> 00:37:02,320
has out of contacts for this but it has

914
00:37:02,320 --> 00:37:05,040
to be exchanged

915
00:37:07,520 --> 00:37:10,160
any questions

916
00:37:21,359 --> 00:37:23,440
uh thank you for your presentation uh

917
00:37:23,440 --> 00:37:25,200
just a question about the encryption

918
00:37:25,200 --> 00:37:28,720
packets uh is it a native native to uh

919
00:37:28,720 --> 00:37:31,440
every application or can you just like

920
00:37:31,440 --> 00:37:34,079
us send a raw text inside

921
00:37:34,079 --> 00:37:34,880
uh

922
00:37:34,880 --> 00:37:37,040
so we are asking about the ltk and uh

923
00:37:37,040 --> 00:37:39,040
the second name of the actually the

924
00:37:39,040 --> 00:37:41,440
application uh subscription yeah so it

925
00:37:41,440 --> 00:37:43,520
has to be from the application itself

926
00:37:43,520 --> 00:37:46,240
it's not uh it's like do not touch the

927
00:37:46,240 --> 00:37:48,400
entire phone the encryption has to be

928
00:37:48,400 --> 00:37:50,960
enabled for my product my device from my

929
00:37:50,960 --> 00:37:52,079
application

930
00:37:52,079 --> 00:37:54,400
so as a manufacturer i have to

931
00:37:54,400 --> 00:37:56,640
maintain that boundary that i am going

932
00:37:56,640 --> 00:37:58,640
to trust only my application and we have

933
00:37:58,640 --> 00:38:00,960
to establish the app level encryption

934
00:38:00,960 --> 00:38:03,040
there so it's not native like you can

935
00:38:03,040 --> 00:38:05,200
forgot to uh set up the encryption for

936
00:38:05,200 --> 00:38:06,640
the application and

937
00:38:06,640 --> 00:38:08,480
the data could be that could be uh

938
00:38:08,480 --> 00:38:10,079
intercepted

939
00:38:10,079 --> 00:38:11,839
so it cannot be intercepted because the

940
00:38:11,839 --> 00:38:13,839
key exchanges happened before the

941
00:38:13,839 --> 00:38:15,200
pairing process or even it is

942
00:38:15,200 --> 00:38:17,440
established okay so over there we will

943
00:38:17,440 --> 00:38:19,359
not be able to sniff the application

944
00:38:19,359 --> 00:38:21,040
specifically because it is not exchanged

945
00:38:21,040 --> 00:38:22,320
in this process

946
00:38:22,320 --> 00:38:24,960
all right thank you

947
00:38:26,400 --> 00:38:29,400
questions

948
00:38:36,960 --> 00:38:39,040
yeah thanks so um just kind of logical

949
00:38:39,040 --> 00:38:40,880
next step how you can take the attack

950
00:38:40,880 --> 00:38:42,480
further so with the application

951
00:38:42,480 --> 00:38:44,800
encryption now there um

952
00:38:44,800 --> 00:38:46,160
obviously the next step is the attacker

953
00:38:46,160 --> 00:38:47,760
with the mao if you've got a malware app

954
00:38:47,760 --> 00:38:49,040
on the phone already and if you're able

955
00:38:49,040 --> 00:38:51,200
to find there's a few more technical

956
00:38:51,200 --> 00:38:52,800
prerequisites i guess but if you're able

957
00:38:52,800 --> 00:38:54,480
to access where

958
00:38:54,480 --> 00:38:56,800
the the um encryption key is stored for

959
00:38:56,800 --> 00:38:58,640
example if an attacker can get access to

960
00:38:58,640 --> 00:39:00,800
that essentially you could theoretically

961
00:39:00,800 --> 00:39:02,400
still decrypt and do that like are you

962
00:39:02,400 --> 00:39:03,680
considering

963
00:39:03,680 --> 00:39:05,839
exploring that deeper at all yeah

964
00:39:05,839 --> 00:39:07,760
it also depends on the android's actual

965
00:39:07,760 --> 00:39:10,400
security and sure consider that so it's

966
00:39:10,400 --> 00:39:12,240
it's not yeah it's secure for now but

967
00:39:12,240 --> 00:39:13,520
it's still room for more improvement i

968
00:39:13,520 --> 00:39:15,920
guess yes exactly okay the skis are

969
00:39:15,920 --> 00:39:18,480
stored in somewhere in the app and poor

970
00:39:18,480 --> 00:39:20,079
obfuscation can

971
00:39:20,079 --> 00:39:22,079
still be a problem

972
00:39:22,079 --> 00:39:24,640
decrypting

973
00:39:26,720 --> 00:39:29,839
other questions

974
00:39:31,520 --> 00:39:33,200
okay perfect so

975
00:39:33,200 --> 00:39:35,200
thanks again for our presentation

976
00:39:35,200 --> 00:39:38,439
thank you

