1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,120 --> 00:00:14,400
thank you

3
00:00:14,400 --> 00:00:17,279
thank you very much

4
00:00:17,279 --> 00:00:20,720
so uh day two session after lunch

5
00:00:20,720 --> 00:00:22,240
i think i'll have your attention for

6
00:00:22,240 --> 00:00:24,400
about five minutes

7
00:00:24,400 --> 00:00:26,320
uh i'm hoping to have it longer but

8
00:00:26,320 --> 00:00:27,359
let's see

9
00:00:27,359 --> 00:00:29,679
let's see how it goes uh so first of all

10
00:00:29,679 --> 00:00:31,439
uh thank you for being here and thank

11
00:00:31,439 --> 00:00:32,800
you for having me at this event this is

12
00:00:32,800 --> 00:00:34,480
my first time in switzerland so i'm

13
00:00:34,480 --> 00:00:36,960
really enjoying it and it's my first

14
00:00:36,960 --> 00:00:38,719
time traveling anywhere in two years so

15
00:00:38,719 --> 00:00:42,000
you can imagine how excited i am

16
00:00:42,000 --> 00:00:44,879
but you know my holiday begins after the

17
00:00:44,879 --> 00:00:46,879
talk so let's get let's get to the talk

18
00:00:46,879 --> 00:00:48,719
and let's figure out what this is all

19
00:00:48,719 --> 00:00:50,879
about all right so

20
00:00:50,879 --> 00:00:53,440
first of all okay and right away i have

21
00:00:53,440 --> 00:00:55,680
a technical issue anyway so first of all

22
00:00:55,680 --> 00:00:58,399
my name is abhay bhargav

23
00:00:58,399 --> 00:01:00,079
i run an application security company

24
00:01:00,079 --> 00:01:02,960
called v45 i also run an abstract

25
00:01:02,960 --> 00:01:04,879
training platform called laptop engineer

26
00:01:04,879 --> 00:01:06,240
in fact i interacted with some of you

27
00:01:06,240 --> 00:01:07,600
and apparently some of you using it

28
00:01:07,600 --> 00:01:09,360
thank you for that

29
00:01:09,360 --> 00:01:12,080
i'm i'm actually i started off my career

30
00:01:12,080 --> 00:01:15,360
as a offensive security person right

31
00:01:15,360 --> 00:01:17,840
mostly pen testing mostly apps i've been

32
00:01:17,840 --> 00:01:19,920
in app security print testing for a

33
00:01:19,920 --> 00:01:21,520
while but then

34
00:01:21,520 --> 00:01:24,320
somewhere around 2015 2016 my role kind

35
00:01:24,320 --> 00:01:26,240
of became a lot more about defense and

36
00:01:26,240 --> 00:01:28,479
scaling things and devsecops and cloud

37
00:01:28,479 --> 00:01:31,119
security all that stuff and i've been uh

38
00:01:31,119 --> 00:01:32,799
i've been doing a lot of work in this

39
00:01:32,799 --> 00:01:34,479
space i've been training in this space

40
00:01:34,479 --> 00:01:36,720
in fact i train at black hat and so on

41
00:01:36,720 --> 00:01:39,200
that's what i do and uh and of course

42
00:01:39,200 --> 00:01:41,600
research is also a big part of what i do

43
00:01:41,600 --> 00:01:44,720
this is actually uh this talk is not a

44
00:01:44,720 --> 00:01:46,320
very typical talk that i would do i'm

45
00:01:46,320 --> 00:01:48,799
mostly defensive security focus but

46
00:01:48,799 --> 00:01:50,720
recently we came across this entire

47
00:01:50,720 --> 00:01:52,320
class of laws so i thought we'll talk

48
00:01:52,320 --> 00:01:55,439
about it in a pretty big way

49
00:01:55,439 --> 00:01:57,439
i tweet a lot about educational content

50
00:01:57,439 --> 00:01:59,759
on my twitter and of course on youtube

51
00:01:59,759 --> 00:02:01,520
if you want to check it out you can

52
00:02:01,520 --> 00:02:03,119
now my talk

53
00:02:03,119 --> 00:02:06,079
like i'm not sure how many talks have uh

54
00:02:06,079 --> 00:02:07,680
this in here i'm not sure whether that's

55
00:02:07,680 --> 00:02:10,080
a european thing or not but there are a

56
00:02:10,080 --> 00:02:12,080
lot of memes in my talk

57
00:02:12,080 --> 00:02:13,760
okay so there's a lot of memes near

58
00:02:13,760 --> 00:02:16,480
nauseating number of memes in my talk so

59
00:02:16,480 --> 00:02:18,160
better brace for it if you're a meme

60
00:02:18,160 --> 00:02:19,440
person or not

61
00:02:19,440 --> 00:02:22,720
can't help it anyway uh so this is uh my

62
00:02:22,720 --> 00:02:24,560
talk is gonna have a lot of memes and i

63
00:02:24,560 --> 00:02:26,720
have a live demo and with live demos

64
00:02:26,720 --> 00:02:29,280
it's always uh you know you are you're

65
00:02:29,280 --> 00:02:30,800
always dealing with

66
00:02:30,800 --> 00:02:32,720
uh the demo guards because everything

67
00:02:32,720 --> 00:02:34,560
could work and then nothing could work

68
00:02:34,560 --> 00:02:36,720
so i do have one live demo and i'm

69
00:02:36,720 --> 00:02:39,519
hoping it goes okay so please pray for

70
00:02:39,519 --> 00:02:41,840
me before we get started

71
00:02:41,840 --> 00:02:43,840
all right so the agenda today first of

72
00:02:43,840 --> 00:02:45,040
all we're going to be talking about web

73
00:02:45,040 --> 00:02:47,200
hooks now how many of you

74
00:02:47,200 --> 00:02:50,640
work with know what webhooks are

75
00:02:50,640 --> 00:02:52,239
okay most of you in the room great i

76
00:02:52,239 --> 00:02:53,680
don't have to explain this concept too

77
00:02:53,680 --> 00:02:55,760
much so web hooks are something that a

78
00:02:55,760 --> 00:02:57,440
lot of us know a lot of us some of you

79
00:02:57,440 --> 00:02:58,640
may not i'm just going to do a quick

80
00:02:58,640 --> 00:03:00,319
introduction of that we're going to look

81
00:03:00,319 --> 00:03:03,360
at common web hook issues common webhook

82
00:03:03,360 --> 00:03:05,040
attack patterns i'm not going to do too

83
00:03:05,040 --> 00:03:06,959
much of deep dive into that because

84
00:03:06,959 --> 00:03:09,840
there is one set of specific flaws i

85
00:03:09,840 --> 00:03:11,920
want to focus on and that's really what

86
00:03:11,920 --> 00:03:13,760
we are all about we are also going to

87
00:03:13,760 --> 00:03:16,879
quickly diverge into an area called ssrf

88
00:03:16,879 --> 00:03:19,360
how many of you have heard of ssrf

89
00:03:19,360 --> 00:03:21,440
okay great most of you in the room are

90
00:03:21,440 --> 00:03:23,519
not uninitiated which is great i'm happy

91
00:03:23,519 --> 00:03:25,440
to see that so ssrf we're going to do a

92
00:03:25,440 --> 00:03:28,000
quick gentle introduction to ssrf and

93
00:03:28,000 --> 00:03:29,519
then we're going to go back to a flaw

94
00:03:29,519 --> 00:03:31,760
that we call webhook boomerangs and

95
00:03:31,760 --> 00:03:34,480
we'll talk about how these flaws happen

96
00:03:34,480 --> 00:03:36,560
some of the cases in which we we are

97
00:03:36,560 --> 00:03:38,480
able to talk about it some many of them

98
00:03:38,480 --> 00:03:40,000
are under vulnerability disclosure

99
00:03:40,000 --> 00:03:41,680
process and stuff like that but

100
00:03:41,680 --> 00:03:43,680
there are a couple of stories that i'm

101
00:03:43,680 --> 00:03:45,519
going to talk about and then some sub

102
00:03:45,519 --> 00:03:48,480
variants of this and finally the demo

103
00:03:48,480 --> 00:03:50,720
right so that's basically what i'm going

104
00:03:50,720 --> 00:03:52,480
to be doing today so you're building an

105
00:03:52,480 --> 00:03:54,799
api and not just an api if you're

106
00:03:54,799 --> 00:03:56,239
building any kind of web applications

107
00:03:56,239 --> 00:03:59,840
today you're probably using web hooks

108
00:03:59,840 --> 00:04:01,360
right now

109
00:04:01,360 --> 00:04:04,000
web hooks are a very common pattern very

110
00:04:04,000 --> 00:04:06,239
common part of web applications today

111
00:04:06,239 --> 00:04:08,400
and this is a great way to integrate

112
00:04:08,400 --> 00:04:11,280
your application with your customer

113
00:04:11,280 --> 00:04:12,959
application right it's a very common way

114
00:04:12,959 --> 00:04:15,280
of doing things so web hooks basically

115
00:04:15,280 --> 00:04:16,399
are

116
00:04:16,399 --> 00:04:19,759
user generated callbacks right so for

117
00:04:19,759 --> 00:04:21,759
instance let's take a very simple

118
00:04:21,759 --> 00:04:24,160
example of a web hook whenever i get

119
00:04:24,160 --> 00:04:26,479
paid on stripe which is a payment

120
00:04:26,479 --> 00:04:27,759
processor i'm sure all of you have seen

121
00:04:27,759 --> 00:04:29,280
heard of stripe use stripe at some point

122
00:04:29,280 --> 00:04:32,000
in time i can get a web hook so i swipe

123
00:04:32,000 --> 00:04:34,080
can initiate a web hook to me saying hey

124
00:04:34,080 --> 00:04:36,160
you've been paid or a new subscriber has

125
00:04:36,160 --> 00:04:38,080
been created or a new payment has been

126
00:04:38,080 --> 00:04:40,240
created right whatever you are creating

127
00:04:40,240 --> 00:04:42,320
a user generated callback so in a

128
00:04:42,320 --> 00:04:44,639
webhook transaction they're typically

129
00:04:44,639 --> 00:04:47,520
two parties one is the provider in this

130
00:04:47,520 --> 00:04:50,400
case stripe that's the provider and one

131
00:04:50,400 --> 00:04:52,479
is the consumer which is my application

132
00:04:52,479 --> 00:04:53,840
which is essentially

133
00:04:53,840 --> 00:04:56,080
getting that data from stripe and

134
00:04:56,080 --> 00:04:58,479
consuming that data right so that's

135
00:04:58,479 --> 00:05:01,600
typically the provider consumer

136
00:05:01,600 --> 00:05:03,199
relationship that we have so in this

137
00:05:03,199 --> 00:05:06,479
case in this example i want to receive a

138
00:05:06,479 --> 00:05:08,800
webhook event every time a new user

139
00:05:08,800 --> 00:05:11,680
signs up to this particular let's say my

140
00:05:11,680 --> 00:05:12,720
app

141
00:05:12,720 --> 00:05:14,800
on to the provider app right so let's

142
00:05:14,800 --> 00:05:16,639
say i i have this

143
00:05:16,639 --> 00:05:18,240
training management system or whatever

144
00:05:18,240 --> 00:05:20,560
it is a new user signs up

145
00:05:20,560 --> 00:05:22,000
then automatically a web hook is

146
00:05:22,000 --> 00:05:23,120
triggered

147
00:05:23,120 --> 00:05:25,440
and it hits my consumer application so

148
00:05:25,440 --> 00:05:27,440
the provider triggers that web hook it's

149
00:05:27,440 --> 00:05:30,320
typically a post request that hits my

150
00:05:30,320 --> 00:05:32,080
consumer application and i take it in

151
00:05:32,080 --> 00:05:33,600
and do something with it i store it in

152
00:05:33,600 --> 00:05:36,080
the database or do whatever i need to do

153
00:05:36,080 --> 00:05:38,720
right some of the common traits of many

154
00:05:38,720 --> 00:05:40,320
of these provider applications

155
00:05:40,320 --> 00:05:41,680
especially when they're dealing with web

156
00:05:41,680 --> 00:05:44,400
hooks are that they store the results of

157
00:05:44,400 --> 00:05:46,160
the web hooks i'm sure some of you have

158
00:05:46,160 --> 00:05:48,160
seen that they store the results of

159
00:05:48,160 --> 00:05:50,320
whatever they send and sometimes they do

160
00:05:50,320 --> 00:05:52,080
retries and they do all of that stuff

161
00:05:52,080 --> 00:05:54,639
right so this is a very common pattern

162
00:05:54,639 --> 00:05:56,720
you you can see web hooks are literally

163
00:05:56,720 --> 00:05:58,400
everywhere right from marketing

164
00:05:58,400 --> 00:06:00,800
automation to kubernetes to

165
00:06:00,800 --> 00:06:02,800
to stripe uh

166
00:06:02,800 --> 00:06:05,520
to ci cd systems you see web hooks are

167
00:06:05,520 --> 00:06:08,080
literally everywhere you see them as a

168
00:06:08,080 --> 00:06:09,759
very very common occurrence all over the

169
00:06:09,759 --> 00:06:12,000
place in fact jpr

170
00:06:12,000 --> 00:06:13,600
is a company that's built entirely off

171
00:06:13,600 --> 00:06:15,280
of web books so you can imagine the

172
00:06:15,280 --> 00:06:17,919
amount of the impact of web hooks the

173
00:06:17,919 --> 00:06:20,000
size of this whole scope that we are

174
00:06:20,000 --> 00:06:22,000
talking about right now web hooks are

175
00:06:22,000 --> 00:06:23,840
typically these are the common traits

176
00:06:23,840 --> 00:06:25,360
right they're event driven which means

177
00:06:25,360 --> 00:06:27,680
that when an event occurs that's when a

178
00:06:27,680 --> 00:06:29,840
web hook is triggered right new user

179
00:06:29,840 --> 00:06:31,759
signs up new subscriber comes in new

180
00:06:31,759 --> 00:06:34,479
payment comes in etc etc or let's say

181
00:06:34,479 --> 00:06:35,919
something is deleted or something is

182
00:06:35,919 --> 00:06:38,160
modified it's not always created it's

183
00:06:38,160 --> 00:06:40,479
also sometimes on modification on

184
00:06:40,479 --> 00:06:43,360
deletion on blah blah blah right it's

185
00:06:43,360 --> 00:06:45,520
typically event driven so whenever that

186
00:06:45,520 --> 00:06:48,639
event happens that's when you have a web

187
00:06:48,639 --> 00:06:50,479
hook that is triggered

188
00:06:50,479 --> 00:06:51,280
now

189
00:06:51,280 --> 00:06:54,720
typically typically web hooks are post

190
00:06:54,720 --> 00:06:57,360
requests right because you're usually

191
00:06:57,360 --> 00:06:59,440
sending some data right so when stripe

192
00:06:59,440 --> 00:07:01,520
wants to trigger a web hook to me they

193
00:07:01,520 --> 00:07:03,520
would say that hey this is a new payment

194
00:07:03,520 --> 00:07:05,360
that's coming from this customer from

195
00:07:05,360 --> 00:07:07,280
this region and they would trigger

196
00:07:07,280 --> 00:07:10,160
a post request to my consumer

197
00:07:10,160 --> 00:07:12,720
application with some json payload it's

198
00:07:12,720 --> 00:07:14,240
typically json payload it doesn't have

199
00:07:14,240 --> 00:07:16,639
to be json payload but it's typically

200
00:07:16,639 --> 00:07:18,800
json right that's what you see and of

201
00:07:18,800 --> 00:07:20,720
course your consumer uses that json to

202
00:07:20,720 --> 00:07:22,800
do something process it whatever way it

203
00:07:22,800 --> 00:07:23,599
wants

204
00:07:23,599 --> 00:07:26,800
sometimes responsible web hooks add

205
00:07:26,800 --> 00:07:28,160
additional

206
00:07:28,160 --> 00:07:30,000
authentication and authorization on top

207
00:07:30,000 --> 00:07:32,560
of it right you're talking about hmac

208
00:07:32,560 --> 00:07:34,400
signatures for

209
00:07:34,400 --> 00:07:36,560
for authenticity of the message

210
00:07:36,560 --> 00:07:39,120
they also additionally add api keys in

211
00:07:39,120 --> 00:07:40,720
the header to make sure that your

212
00:07:40,720 --> 00:07:42,000
application

213
00:07:42,000 --> 00:07:43,919
can verify that it is from a particular

214
00:07:43,919 --> 00:07:45,680
source and stuff like that these are

215
00:07:45,680 --> 00:07:47,840
very known well-known security patterns

216
00:07:47,840 --> 00:07:49,599
that you see

217
00:07:49,599 --> 00:07:51,919
in some cases provider systems have

218
00:07:51,919 --> 00:07:53,440
written producer but it actually means

219
00:07:53,440 --> 00:07:55,840
provider provider systems also allow you

220
00:07:55,840 --> 00:07:56,879
to enter

221
00:07:56,879 --> 00:07:58,560
custom header so let's say you want a

222
00:07:58,560 --> 00:08:01,360
custom header to hit you from stripe

223
00:08:01,360 --> 00:08:03,919
along with your webhook payload they

224
00:08:03,919 --> 00:08:06,080
allow you to enter some custom headers

225
00:08:06,080 --> 00:08:08,319
and custom values as well right so you

226
00:08:08,319 --> 00:08:10,400
have all of these typical patterns that

227
00:08:10,400 --> 00:08:12,639
are going on so far right have i still

228
00:08:12,639 --> 00:08:14,639
have i breached the attention barrier or

229
00:08:14,639 --> 00:08:16,240
is it still there we still have

230
00:08:16,240 --> 00:08:19,599
attention great perfect uh excellent uh

231
00:08:19,599 --> 00:08:20,879
i wouldn't have been able to stay awake

232
00:08:20,879 --> 00:08:24,240
past five minutes uh after lunch anyway

233
00:08:24,240 --> 00:08:26,479
now let's talk about the natural

234
00:08:26,479 --> 00:08:28,240
web hook attack

235
00:08:28,240 --> 00:08:31,280
assumptions right most of the time

236
00:08:31,280 --> 00:08:33,039
most of the time

237
00:08:33,039 --> 00:08:35,200
uh i would be thinking on the lines of

238
00:08:35,200 --> 00:08:36,159
can i

239
00:08:36,159 --> 00:08:39,200
can i attack the consumer right most of

240
00:08:39,200 --> 00:08:41,839
the time is there a risk to the consumer

241
00:08:41,839 --> 00:08:43,599
that would be my thought process can i

242
00:08:43,599 --> 00:08:45,920
compromise the consumer with some kind

243
00:08:45,920 --> 00:08:47,760
of deserialization right so i send it to

244
00:08:47,760 --> 00:08:49,279
the consumer and the consumer consumes

245
00:08:49,279 --> 00:08:50,640
it and can i do some kind of

246
00:08:50,640 --> 00:08:52,880
deserialization there can i tamper with

247
00:08:52,880 --> 00:08:54,080
the payload which is a whole

248
00:08:54,080 --> 00:08:56,080
authenticity problem can i tamper with

249
00:08:56,080 --> 00:08:58,480
it you know all of that stuff may be a

250
00:08:58,480 --> 00:09:00,720
consideration that you have can i do

251
00:09:00,720 --> 00:09:03,200
replays right can i replay the same

252
00:09:03,200 --> 00:09:05,200
payload again and again and again and

253
00:09:05,200 --> 00:09:07,279
will it work this is a very common

254
00:09:07,279 --> 00:09:09,760
concern with web hooks as well can i

255
00:09:09,760 --> 00:09:12,000
attack from unknown sources can i can i

256
00:09:12,000 --> 00:09:14,800
figure out a consumer endpoint url and

257
00:09:14,800 --> 00:09:17,360
keep bombarding it with some data from

258
00:09:17,360 --> 00:09:19,360
third party sources all of these are

259
00:09:19,360 --> 00:09:21,120
valid attack

260
00:09:21,120 --> 00:09:23,839
scenarios for web hooks right but we're

261
00:09:23,839 --> 00:09:25,760
not going to be dealing with any of this

262
00:09:25,760 --> 00:09:28,000
right we are not dealing with any of

263
00:09:28,000 --> 00:09:30,720
this ins instead our focus is only going

264
00:09:30,720 --> 00:09:31,600
to be

265
00:09:31,600 --> 00:09:33,040
on one thing

266
00:09:33,040 --> 00:09:35,920
can i compromise the provider

267
00:09:35,920 --> 00:09:37,760
right our focus is going to be

268
00:09:37,760 --> 00:09:40,320
exclusively in this talk on can i

269
00:09:40,320 --> 00:09:42,800
compromise the provider is it possible

270
00:09:42,800 --> 00:09:45,600
for me to get the provider to get

271
00:09:45,600 --> 00:09:48,160
compromised because of something i do

272
00:09:48,160 --> 00:09:50,000
and that's something that we are going

273
00:09:50,000 --> 00:09:51,680
to be exploring and that's what we call

274
00:09:51,680 --> 00:09:54,480
webhook boomerang attacks right so can i

275
00:09:54,480 --> 00:09:56,160
do something like this which is

276
00:09:56,160 --> 00:09:58,480
basically i have my provider and behind

277
00:09:58,480 --> 00:10:02,079
my providers applications are internal

278
00:10:02,079 --> 00:10:04,640
web servers databases what have you

279
00:10:04,640 --> 00:10:06,560
right my provider let's say stripe

280
00:10:06,560 --> 00:10:07,760
obviously stripe is going to have a

281
00:10:07,760 --> 00:10:09,440
whole bunch of internal infrastructure

282
00:10:09,440 --> 00:10:11,360
it's probably hosting it on a cloud

283
00:10:11,360 --> 00:10:13,519
provider like aws so it has metadata and

284
00:10:13,519 --> 00:10:14,800
stuff like that

285
00:10:14,800 --> 00:10:16,560
can i

286
00:10:16,560 --> 00:10:20,160
as a consumer ensure that

287
00:10:20,160 --> 00:10:24,880
when a request comes in from my provider

288
00:10:24,880 --> 00:10:26,079
can i

289
00:10:26,079 --> 00:10:27,120
somehow

290
00:10:27,120 --> 00:10:29,120
boomerang it back

291
00:10:29,120 --> 00:10:31,760
to the provider in a way that it attacks

292
00:10:31,760 --> 00:10:33,680
the provider

293
00:10:33,680 --> 00:10:36,240
right that's my objective here

294
00:10:36,240 --> 00:10:39,120
as a consumer so i'm on the

295
00:10:39,120 --> 00:10:41,680
on the red box side of the fence right

296
00:10:41,680 --> 00:10:44,720
as a consumer can i do something that

297
00:10:44,720 --> 00:10:47,279
will get me to attack

298
00:10:47,279 --> 00:10:50,399
the provider back and get me some juicy

299
00:10:50,399 --> 00:10:51,680
details

300
00:10:51,680 --> 00:10:54,240
inside the provider's infrastructure

301
00:10:54,240 --> 00:10:56,959
right that's what i want to do in this

302
00:10:56,959 --> 00:10:58,959
class of attack so that's really my

303
00:10:58,959 --> 00:11:01,440
focus in this entire class of attack so

304
00:11:01,440 --> 00:11:03,760
this can only mean of course

305
00:11:03,760 --> 00:11:06,000
what

306
00:11:06,560 --> 00:11:10,160
this can only mean ssrf right now oops

307
00:11:10,160 --> 00:11:12,480
sorry about that i'll deal with it later

308
00:11:12,480 --> 00:11:15,600
anyway so ssrf is the attack vector that

309
00:11:15,600 --> 00:11:18,480
we want to use right ssrf is the attack

310
00:11:18,480 --> 00:11:20,959
vector we want to use because ssrf is

311
00:11:20,959 --> 00:11:22,640
essentially meant for these sort of

312
00:11:22,640 --> 00:11:25,440
situations right you are making the

313
00:11:25,440 --> 00:11:27,760
provider make a request because of some

314
00:11:27,760 --> 00:11:29,920
user generated data that you have

315
00:11:29,920 --> 00:11:32,640
right so you in you

316
00:11:32,640 --> 00:11:34,480
through a particular process trigger a

317
00:11:34,480 --> 00:11:37,120
system where the provider connects back

318
00:11:37,120 --> 00:11:39,279
to their internal infrastructure and

319
00:11:39,279 --> 00:11:41,519
gives you the result of that

320
00:11:41,519 --> 00:11:43,760
internal infrastructure right so that's

321
00:11:43,760 --> 00:11:46,880
basically what we want to do so ssrf is

322
00:11:46,880 --> 00:11:48,720
just for those of you who may not know

323
00:11:48,720 --> 00:11:51,120
what fully ssrf is all about ssrf is a

324
00:11:51,120 --> 00:11:54,160
way where i as the attacker i'm trying

325
00:11:54,160 --> 00:11:57,680
to get the victim system to connect

326
00:11:57,680 --> 00:11:59,680
to an internal url or some attacker

327
00:11:59,680 --> 00:12:01,760
controlled url or whatever it is so that

328
00:12:01,760 --> 00:12:02,560
that

329
00:12:02,560 --> 00:12:04,800
it can be a request can be made from the

330
00:12:04,800 --> 00:12:06,880
victim system to that url and the

331
00:12:06,880 --> 00:12:09,440
details from that request response is

332
00:12:09,440 --> 00:12:11,440
available to me or i can get it or i can

333
00:12:11,440 --> 00:12:13,920
fetch it or whatever it is now this is

334
00:12:13,920 --> 00:12:16,639
very commonly used for

335
00:12:16,639 --> 00:12:19,120
stealing cloud metadata credentials

336
00:12:19,120 --> 00:12:21,200
right now this has been used in attacks

337
00:12:21,200 --> 00:12:22,399
all over the place it's been used in

338
00:12:22,399 --> 00:12:23,920
capital one it's been used in several

339
00:12:23,920 --> 00:12:26,880
breaches i'm sure you would not find too

340
00:12:26,880 --> 00:12:28,959
many bug bounty reports where this is

341
00:12:28,959 --> 00:12:30,880
not mentioned you have a lot of

342
00:12:30,880 --> 00:12:34,000
instances of ssrf so you'll see that you

343
00:12:34,000 --> 00:12:35,040
have

344
00:12:35,040 --> 00:12:38,399
major scenarios where ssrf has been

345
00:12:38,399 --> 00:12:41,279
identified and successfully exploited

346
00:12:41,279 --> 00:12:43,040
they've stolen cloud metadata

347
00:12:43,040 --> 00:12:45,120
credentials and used that to privilege

348
00:12:45,120 --> 00:12:47,920
escalate inside your cloud be it aws

349
00:12:47,920 --> 00:12:50,720
azure gcp what have you uh you've been

350
00:12:50,720 --> 00:12:53,120
able to use that to compromise uh

351
00:12:53,120 --> 00:12:54,959
internal systems like gaining access to

352
00:12:54,959 --> 00:12:57,839
redis or being able to access internal

353
00:12:57,839 --> 00:13:00,240
services like couchdb or internal

354
00:13:00,240 --> 00:13:02,880
systems uh trigger uh you know trigger

355
00:13:02,880 --> 00:13:04,560
actions on internal systems and do all

356
00:13:04,560 --> 00:13:06,480
those kind of things right ssrf is a

357
00:13:06,480 --> 00:13:08,959
very well known vulnerability that can

358
00:13:08,959 --> 00:13:11,040
do all of these things you are getting

359
00:13:11,040 --> 00:13:13,120
the victim application to make a request

360
00:13:13,120 --> 00:13:15,920
internally or wherever it is and uh give

361
00:13:15,920 --> 00:13:18,240
you the details of that request right or

362
00:13:18,240 --> 00:13:19,440
the response from that particular

363
00:13:19,440 --> 00:13:22,639
request so ssrf is used for a lot of

364
00:13:22,639 --> 00:13:25,040
these things you can trigger

365
00:13:25,040 --> 00:13:27,360
a lot of these scenarios with ssrf of

366
00:13:27,360 --> 00:13:28,959
course with the cloud coming into the

367
00:13:28,959 --> 00:13:31,440
picture and metadata being injected into

368
00:13:31,440 --> 00:13:34,160
most compute environments on the cloud

369
00:13:34,160 --> 00:13:36,639
largely the focus has been on

370
00:13:36,639 --> 00:13:38,880
compromising cloud credentials

371
00:13:38,880 --> 00:13:42,000
especially aws because in aws

372
00:13:42,000 --> 00:13:44,399
at least on the imds v1 variant you can

373
00:13:44,399 --> 00:13:47,279
literally just make a get request

374
00:13:47,279 --> 00:13:49,360
and you get the metadata and the

375
00:13:49,360 --> 00:13:52,079
credentials on

376
00:13:52,760 --> 00:13:55,279
169.254.169.254 slash metadata whatever

377
00:13:55,279 --> 00:13:57,600
right so you can do all of this stuff

378
00:13:57,600 --> 00:14:01,519
with ssrf so what we want to do is

379
00:14:01,519 --> 00:14:04,240
to do the same thing to perform a

380
00:14:04,240 --> 00:14:06,720
successful ssrf where we

381
00:14:06,720 --> 00:14:08,000
as the

382
00:14:08,000 --> 00:14:09,279
web hook

383
00:14:09,279 --> 00:14:12,480
consumer are able to attack the webhook

384
00:14:12,480 --> 00:14:14,399
provider so in this case the provider

385
00:14:14,399 --> 00:14:15,839
says hey you know what

386
00:14:15,839 --> 00:14:18,160
use a new user signed up here you go

387
00:14:18,160 --> 00:14:21,600
sends a post request to my consumer and

388
00:14:21,600 --> 00:14:23,600
my consumer essentially says hey sorry

389
00:14:23,600 --> 00:14:24,959
you need to

390
00:14:24,959 --> 00:14:27,519
go somewhere else

391
00:14:27,519 --> 00:14:31,440
you need to go to 169.254

392
00:14:31,440 --> 00:14:34,079
slash metadata credentials

393
00:14:34,079 --> 00:14:35,680
blah blah blah blah blah

394
00:14:35,680 --> 00:14:37,760
and that's where the resource actually

395
00:14:37,760 --> 00:14:41,040
is and your provider says oh okay i'm

396
00:14:41,040 --> 00:14:42,480
going to go there

397
00:14:42,480 --> 00:14:44,399
makes a request to that internal

398
00:14:44,399 --> 00:14:47,600
url and then of course you have

399
00:14:47,600 --> 00:14:50,320
ssrf that successfully converts to a

400
00:14:50,320 --> 00:14:51,920
privileged escalation once you gain

401
00:14:51,920 --> 00:14:54,959
access to those credentials but there is

402
00:14:54,959 --> 00:14:57,600
one small problem right there's one

403
00:14:57,600 --> 00:14:59,600
small problem most of the time you are

404
00:14:59,600 --> 00:15:01,600
dealing with ssrf

405
00:15:01,600 --> 00:15:04,079
when there is a get request right ssrf

406
00:15:04,079 --> 00:15:06,480
is a classic attack where get requests

407
00:15:06,480 --> 00:15:08,320
are involved but

408
00:15:08,320 --> 00:15:12,079
your provider spits out a post or a put

409
00:15:12,079 --> 00:15:13,040
request

410
00:15:13,040 --> 00:15:15,440
when it's making that webhook call right

411
00:15:15,440 --> 00:15:17,120
when it's making that webhook call your

412
00:15:17,120 --> 00:15:20,720
provider spits out a post or a put

413
00:15:20,720 --> 00:15:23,120
that's typically what it's doing

414
00:15:23,120 --> 00:15:25,120
so it's a little difficult because you

415
00:15:25,120 --> 00:15:26,880
need to figure out the right

416
00:15:26,880 --> 00:15:30,480
redirect for you to use so that's where

417
00:15:30,480 --> 00:15:35,199
the http 303 comes in right now the http

418
00:15:35,199 --> 00:15:37,759
303 is a request

419
00:15:37,759 --> 00:15:39,759
as a redirect

420
00:15:39,759 --> 00:15:42,160
is a redirect code that is meant almost

421
00:15:42,160 --> 00:15:44,079
entirely for this i mean not meant for

422
00:15:44,079 --> 00:15:45,440
this of course but

423
00:15:45,440 --> 00:15:48,240
it's ideal in this particular use case

424
00:15:48,240 --> 00:15:50,399
because the way it works is that it is

425
00:15:50,399 --> 00:15:52,880
meant to respond to a post or a put

426
00:15:52,880 --> 00:15:54,959
request so when somebody sends you a

427
00:15:54,959 --> 00:15:57,519
post or a put request you can send them

428
00:15:57,519 --> 00:15:59,519
a 303 redirect and say that hey you know

429
00:15:59,519 --> 00:16:01,680
what redirect to this particular

430
00:16:01,680 --> 00:16:04,480
location 169254 whatever

431
00:16:04,480 --> 00:16:06,560
and follow it

432
00:16:06,560 --> 00:16:09,040
follow that redirect whereas most of the

433
00:16:09,040 --> 00:16:10,720
other redirect codes

434
00:16:10,720 --> 00:16:13,360
do not require you to follow it they

435
00:16:13,360 --> 00:16:14,880
require you to make a new connection

436
00:16:14,880 --> 00:16:16,560
three zero one three zero two et cetera

437
00:16:16,560 --> 00:16:18,079
three zero three is beautiful because it

438
00:16:18,079 --> 00:16:19,600
doesn't require you to do that it says

439
00:16:19,600 --> 00:16:21,120
hey go ahead and follow

440
00:16:21,120 --> 00:16:23,120
do this you don't need to bother about

441
00:16:23,120 --> 00:16:25,199
anything this is not there

442
00:16:25,199 --> 00:16:26,720
go

443
00:16:26,720 --> 00:16:29,600
right and your application being

444
00:16:29,600 --> 00:16:32,240
the uh the nice kid that it is

445
00:16:32,240 --> 00:16:34,160
does exactly that

446
00:16:34,160 --> 00:16:36,800
right and what's worse is that most of

447
00:16:36,800 --> 00:16:39,040
the http clients that you're using i

448
00:16:39,040 --> 00:16:41,519
know for python and go by default they

449
00:16:41,519 --> 00:16:43,120
follow redirects

450
00:16:43,120 --> 00:16:45,360
has anyone seen that they follow

451
00:16:45,360 --> 00:16:47,440
redirects a lot of http clients i don't

452
00:16:47,440 --> 00:16:49,600
have the exact data of which http

453
00:16:49,600 --> 00:16:51,920
clients do this but the popular ones in

454
00:16:51,920 --> 00:16:53,680
python and go that i use

455
00:16:53,680 --> 00:16:55,839
typically follow the redirects unless

456
00:16:55,839 --> 00:16:58,079
you say don't follow redirects

457
00:16:58,079 --> 00:17:00,240
by default they follow

458
00:17:00,240 --> 00:17:02,720
redirects right so they just do that so

459
00:17:02,720 --> 00:17:05,760
what we want is this we've already seen

460
00:17:05,760 --> 00:17:07,039
how it works

461
00:17:07,039 --> 00:17:09,520
it's going to make a post request to our

462
00:17:09,520 --> 00:17:12,160
consumer our consumer says hey you know

463
00:17:12,160 --> 00:17:16,959
what 303 redirect to 169

464
00:17:16,959 --> 00:17:17,520
nine two 254

465
00:17:17,520 --> 00:17:19,839
four slash metadata slash security

466
00:17:19,839 --> 00:17:21,679
credentials blah blah blah blah blah

467
00:17:21,679 --> 00:17:24,319
blah and then this is okay i'm gonna i'm

468
00:17:24,319 --> 00:17:26,480
gonna call that it'll receive that get

469
00:17:26,480 --> 00:17:28,559
request and then

470
00:17:28,559 --> 00:17:30,320
remember web hooks a lot of these

471
00:17:30,320 --> 00:17:32,720
provider applications store the results

472
00:17:32,720 --> 00:17:35,760
of your web hook requests and responses

473
00:17:35,760 --> 00:17:39,360
right they store the response result for

474
00:17:39,360 --> 00:17:40,559
you because they want you to have

475
00:17:40,559 --> 00:17:42,400
traceability right that's a good thing

476
00:17:42,400 --> 00:17:44,400
having traceability is a good thing and

477
00:17:44,400 --> 00:17:46,559
they store the response and you can just

478
00:17:46,559 --> 00:17:48,400
log into your admin dashboard on the

479
00:17:48,400 --> 00:17:51,280
provider and you get this beautiful

480
00:17:51,280 --> 00:17:53,360
response which has

481
00:17:53,360 --> 00:17:56,080
aws credits blah blah blah whatever you

482
00:17:56,080 --> 00:17:58,480
want whatever your intent is to

483
00:17:58,480 --> 00:18:00,480
compromise at that particular point in

484
00:18:00,480 --> 00:18:03,840
time all right so you have that at you

485
00:18:03,840 --> 00:18:05,280
have that available it makes a get

486
00:18:05,280 --> 00:18:08,000
request to a metadata

487
00:18:08,000 --> 00:18:10,160
uh talk to an internal url with whatever

488
00:18:10,160 --> 00:18:12,880
it is and then stores the result of that

489
00:18:12,880 --> 00:18:16,480
now this is something that is not

490
00:18:16,480 --> 00:18:17,919
necessarily new we've seen this in a

491
00:18:17,919 --> 00:18:19,280
couple of reports before but it was

492
00:18:19,280 --> 00:18:22,559
clearly not as leveraged as it could be

493
00:18:22,559 --> 00:18:24,480
right not as leveraged as it could be

494
00:18:24,480 --> 00:18:26,640
i'm we have not seen this two in on too

495
00:18:26,640 --> 00:18:29,200
many new reports so we started looking

496
00:18:29,200 --> 00:18:30,799
at targets with this especially bug

497
00:18:30,799 --> 00:18:32,240
bounty targets

498
00:18:32,240 --> 00:18:34,240
and we found a small company that i'm

499
00:18:34,240 --> 00:18:36,559
sure some of you know of a company is

500
00:18:36,559 --> 00:18:38,400
called docker

501
00:18:38,400 --> 00:18:40,160
right now docker

502
00:18:40,160 --> 00:18:43,360
we essentially did this on docker hub

503
00:18:43,360 --> 00:18:46,160
this was i think september of last year

504
00:18:46,160 --> 00:18:48,480
so we use this on docker hub so in

505
00:18:48,480 --> 00:18:49,679
docker hub

506
00:18:49,679 --> 00:18:51,280
i'm sure many of you have seen this you

507
00:18:51,280 --> 00:18:52,880
can set up

508
00:18:52,880 --> 00:18:57,200
a web hook right so whenever your docker

509
00:18:57,200 --> 00:18:59,360
commit you commit a container image to

510
00:18:59,360 --> 00:19:00,640
docker hub

511
00:19:00,640 --> 00:19:03,200
you can set up a web hook right now this

512
00:19:03,200 --> 00:19:04,960
web hook you can use for whatever it is

513
00:19:04,960 --> 00:19:07,200
so let's say you want to initiate a new

514
00:19:07,200 --> 00:19:09,200
build from a ci system or deploy it in

515
00:19:09,200 --> 00:19:11,440
kubernetes or do whatever you want with

516
00:19:11,440 --> 00:19:13,919
it right or create a webhook aws that

517
00:19:13,919 --> 00:19:16,080
will deploy it into uh you know a

518
00:19:16,080 --> 00:19:18,240
container on aws or azure or whatever it

519
00:19:18,240 --> 00:19:21,840
is you can create webhooks on docker

520
00:19:21,840 --> 00:19:23,679
right so you can create web hooks on

521
00:19:23,679 --> 00:19:27,200
docker and we essentially wrote uh us i

522
00:19:27,200 --> 00:19:28,960
mean in this case it's just an example

523
00:19:28,960 --> 00:19:30,160
it's not the same thing but we

524
00:19:30,160 --> 00:19:33,360
essentially wrote a small piece of uh we

525
00:19:33,360 --> 00:19:34,640
wrote a small

526
00:19:34,640 --> 00:19:37,440
web server flask application on python

527
00:19:37,440 --> 00:19:39,679
that would be our consumer right so we

528
00:19:39,679 --> 00:19:42,000
redirected all of docker's web hook

529
00:19:42,000 --> 00:19:44,480
requests to our consumer and our

530
00:19:44,480 --> 00:19:47,280
consumer would make a redirect to

531
00:19:47,280 --> 00:19:50,280
169.254.169.254

532
00:19:50,880 --> 00:19:52,480
slash metadata

533
00:19:52,480 --> 00:19:55,760
with the redirect code 303

534
00:19:55,760 --> 00:19:57,679
right this is something i already spoke

535
00:19:57,679 --> 00:20:00,240
about so once we did this initially we

536
00:20:00,240 --> 00:20:02,000
were and then we pushed

537
00:20:02,000 --> 00:20:04,240
our container image to our

538
00:20:04,240 --> 00:20:06,720
docker hub but we didn't notice anything

539
00:20:06,720 --> 00:20:09,120
docker was clearly storing

540
00:20:09,120 --> 00:20:10,400
our uh

541
00:20:10,400 --> 00:20:12,480
you know our data it was storing the

542
00:20:12,480 --> 00:20:14,799
request a response from the web hook but

543
00:20:14,799 --> 00:20:16,799
it was not really showing up on screen

544
00:20:16,799 --> 00:20:19,919
now obviously as super hackers that we

545
00:20:19,919 --> 00:20:22,880
were we just did a view page source

546
00:20:22,880 --> 00:20:24,480
basically we looked at the request going

547
00:20:24,480 --> 00:20:26,799
back and forth and in one of the network

548
00:20:26,799 --> 00:20:29,520
requests we realized that there was

549
00:20:29,520 --> 00:20:33,840
our role our iam role our aws iam role

550
00:20:33,840 --> 00:20:36,159
was in the network request it was not

551
00:20:36,159 --> 00:20:37,840
showing up on screen but it was clearly

552
00:20:37,840 --> 00:20:38,720
getting

553
00:20:38,720 --> 00:20:40,799
returned as part of the json

554
00:20:40,799 --> 00:20:43,280
as part of the webhook trace logs that

555
00:20:43,280 --> 00:20:47,840
you have and once we got the uh the iam

556
00:20:47,840 --> 00:20:50,880
role from the uh

557
00:20:50,880 --> 00:20:54,080
from the uh from our webhook trigger

558
00:20:54,080 --> 00:20:56,640
we were able to use that iam role and

559
00:20:56,640 --> 00:20:58,559
then get the

560
00:20:58,559 --> 00:21:01,760
aws credentials and we reported this

561
00:21:01,760 --> 00:21:04,000
immediately to docker and

562
00:21:04,000 --> 00:21:05,919
thankfully for us they fixed it in about

563
00:21:05,919 --> 00:21:08,720
two hours so we reported it to their

564
00:21:08,720 --> 00:21:10,880
cto and within a couple of hours they

565
00:21:10,880 --> 00:21:13,520
had a fix rolled out and they were able

566
00:21:13,520 --> 00:21:16,559
to get this done pretty quickly so this

567
00:21:16,559 --> 00:21:18,640
was pretty huge because behind the

568
00:21:18,640 --> 00:21:22,320
scenes this was talking to their eks

569
00:21:22,320 --> 00:21:24,320
this was the privileges used on the eks

570
00:21:24,320 --> 00:21:26,559
aws case clusters that was responsible

571
00:21:26,559 --> 00:21:28,559
for running docker hub

572
00:21:28,559 --> 00:21:31,760
so you can imagine the supply chain

573
00:21:31,760 --> 00:21:32,799
element

574
00:21:32,799 --> 00:21:35,520
of this attack vector if you will right

575
00:21:35,520 --> 00:21:37,440
because that could have potentially

576
00:21:37,440 --> 00:21:39,360
snowballed into a whole bunch of other

577
00:21:39,360 --> 00:21:41,679
things thankfully they were they were

578
00:21:41,679 --> 00:21:44,400
pretty good they fixed it uh pretty

579
00:21:44,400 --> 00:21:47,440
quickly and uh yeah so they fixed it

580
00:21:47,440 --> 00:21:50,159
pretty quickly uh and we verified that

581
00:21:50,159 --> 00:21:52,559
they had actually indeed gone ahead and

582
00:21:52,559 --> 00:21:55,600
fixed it so this is a very common

583
00:21:55,600 --> 00:21:59,360
pattern we see this with cicd systems

584
00:21:59,360 --> 00:22:02,000
all the time we see this with a lot of

585
00:22:02,000 --> 00:22:04,080
webhook crm applications marketing

586
00:22:04,080 --> 00:22:06,080
automation applications payment

587
00:22:06,080 --> 00:22:07,360
processors

588
00:22:07,360 --> 00:22:10,880
anyone that has a webhook functionality

589
00:22:10,880 --> 00:22:13,520
is i mean is potentially vulnerable if

590
00:22:13,520 --> 00:22:15,600
they're not doing a few things in terms

591
00:22:15,600 --> 00:22:17,440
of defense which we'll get to in a

592
00:22:17,440 --> 00:22:18,559
little bit

593
00:22:18,559 --> 00:22:20,799
right so i have a demo of this uh and

594
00:22:20,799 --> 00:22:25,480
i'll just explain how that works

595
00:22:27,120 --> 00:22:30,000
so yeah so in my demo is essentially

596
00:22:30,000 --> 00:22:31,919
going to be like oh sorry about that i

597
00:22:31,919 --> 00:22:34,480
thought i was mirroring screens

598
00:22:34,480 --> 00:22:35,679
my bad

599
00:22:35,679 --> 00:22:40,440
just give me a sec while i do that

600
00:22:41,280 --> 00:22:43,440
uh or i'll just move this to that screen

601
00:22:43,440 --> 00:22:46,000
okay let's just that's fine okay so in

602
00:22:46,000 --> 00:22:47,760
our case what i've done here is i've not

603
00:22:47,760 --> 00:22:50,320
set up a metadata example here i've set

604
00:22:50,320 --> 00:22:52,640
up an example where we have a couchdb

605
00:22:52,640 --> 00:22:54,000
how many of you have used couchdb

606
00:22:54,000 --> 00:22:55,360
couchdb

607
00:22:55,360 --> 00:22:59,120
is a pretty simple key value store where

608
00:22:59,120 --> 00:23:01,520
you have you can store keys and values

609
00:23:01,520 --> 00:23:04,480
and you can access it on http on http

610
00:23:04,480 --> 00:23:06,240
you don't need to you don't need to use

611
00:23:06,240 --> 00:23:08,960
any specific library or sdk to be able

612
00:23:08,960 --> 00:23:11,120
to do that you can just access coachdb

613
00:23:11,120 --> 00:23:13,360
over http just with get requests and so

614
00:23:13,360 --> 00:23:15,120
on you can i mean you can use some post

615
00:23:15,120 --> 00:23:17,360
requests but for for a lot of the select

616
00:23:17,360 --> 00:23:19,520
and list operations you can just use let

617
00:23:19,520 --> 00:23:22,159
request couchdb is pretty popular with a

618
00:23:22,159 --> 00:23:23,600
lot of applications that need to have

619
00:23:23,600 --> 00:23:25,840
basic key value functionality so in this

620
00:23:25,840 --> 00:23:28,799
case we have our application which is

621
00:23:28,799 --> 00:23:32,320
the webhook provider and we have a

622
00:23:32,320 --> 00:23:34,000
consumer evil

623
00:23:34,000 --> 00:23:35,520
webhook receiver

624
00:23:35,520 --> 00:23:38,240
and our consumer is going to redirect

625
00:23:38,240 --> 00:23:40,799
our provider to an internal url which in

626
00:23:40,799 --> 00:23:42,640
this case is

627
00:23:42,640 --> 00:23:44,480
couchdb and we're going to be able to

628
00:23:44,480 --> 00:23:47,440
exfiltrate some database

629
00:23:47,440 --> 00:23:49,679
information some users etc from the

630
00:23:49,679 --> 00:23:52,000
couchdb database so that's basically

631
00:23:52,000 --> 00:23:54,080
what we are going to do

632
00:23:54,080 --> 00:23:56,880
i'm just trying to figure out how to set

633
00:23:56,880 --> 00:23:58,159
up a

634
00:23:58,159 --> 00:24:00,159
mirrored display

635
00:24:00,159 --> 00:24:02,400
uh

636
00:24:02,480 --> 00:24:05,840
just give me a second

637
00:24:19,039 --> 00:24:21,200
hopefully yeah okay great

638
00:24:21,200 --> 00:24:22,720
this is the first time i'm mirroring on

639
00:24:22,720 --> 00:24:24,480
this so you can imagine how long it's

640
00:24:24,480 --> 00:24:27,200
been since i've actually presented

641
00:24:27,200 --> 00:24:28,720
uh so

642
00:24:28,720 --> 00:24:31,760
anyway so yeah

643
00:24:31,760 --> 00:24:33,840
so this is just a

644
00:24:33,840 --> 00:24:36,320
test application that we've written just

645
00:24:36,320 --> 00:24:38,640
for this sort of stuff so in this

646
00:24:38,640 --> 00:24:40,480
application the way it works is that you

647
00:24:40,480 --> 00:24:43,279
set up a user you can log in as the user

648
00:24:43,279 --> 00:24:45,039
you can set up a web hook once you're

649
00:24:45,039 --> 00:24:46,880
done setting up the webhook

650
00:24:46,880 --> 00:24:48,880
you can trigger an event so it simulates

651
00:24:48,880 --> 00:24:50,559
an event trigger and it's going to make

652
00:24:50,559 --> 00:24:52,880
a request to that consumer that you have

653
00:24:52,880 --> 00:24:54,480
my consumer is going to be running in

654
00:24:54,480 --> 00:24:56,400
the same system here

655
00:24:56,400 --> 00:24:58,400
and we're going to see how that works

656
00:24:58,400 --> 00:25:00,559
right so my consumer is running my

657
00:25:00,559 --> 00:25:02,159
provider is running we can see all that

658
00:25:02,159 --> 00:25:07,279
stuff so let's actually go ahead and

659
00:25:08,080 --> 00:25:11,439
see how this works

660
00:25:12,880 --> 00:25:16,080
sorry about that okay so uh i'm gonna

661
00:25:16,080 --> 00:25:17,760
have to copy paste some instructions my

662
00:25:17,760 --> 00:25:19,840
bad but uh

663
00:25:19,840 --> 00:25:21,600
so we have i'm gonna log in i'm gonna

664
00:25:21,600 --> 00:25:25,639
create an account as the user

665
00:25:30,400 --> 00:25:32,480
so i'm going to create an account as the

666
00:25:32,480 --> 00:25:37,679
user i'm going to log in as that user

667
00:25:38,559 --> 00:25:41,039
so i'm just logging in and using the jwt

668
00:25:41,039 --> 00:25:43,679
access token and using that in the

669
00:25:43,679 --> 00:25:45,679
environment variable here and i'm going

670
00:25:45,679 --> 00:25:47,440
to log in and check what kind of web

671
00:25:47,440 --> 00:25:49,600
hooks have programmed as the user what

672
00:25:49,600 --> 00:25:51,520
kind of web books have i set up as the

673
00:25:51,520 --> 00:25:53,039
user you'll see that i don't have any

674
00:25:53,039 --> 00:25:54,320
web hooks

675
00:25:54,320 --> 00:25:55,760
that i have set up now i'm going to set

676
00:25:55,760 --> 00:25:57,919
up my first webhook this is going to

677
00:25:57,919 --> 00:25:59,760
redirect me to

678
00:25:59,760 --> 00:26:02,960
uh my consumer on port 8088 so in this

679
00:26:02,960 --> 00:26:05,600
case we'll see consumer on port 8088

680
00:26:05,600 --> 00:26:07,520
it's going to set up that web hook

681
00:26:07,520 --> 00:26:10,960
now we are going to trigger an event now

682
00:26:10,960 --> 00:26:12,799
if you look at my hook you will see what

683
00:26:12,799 --> 00:26:15,120
i am talking about my hook is

684
00:26:15,120 --> 00:26:17,520
essentially redirecting to this

685
00:26:17,520 --> 00:26:19,200
environment variable called the redirect

686
00:26:19,200 --> 00:26:22,720
url in this case the redirect url is set

687
00:26:22,720 --> 00:26:26,000
to my couchdb so if you if you look at

688
00:26:26,000 --> 00:26:29,200
what's happening here it's uh set to the

689
00:26:29,200 --> 00:26:30,559
couchdb

690
00:26:30,559 --> 00:26:32,799
uh all dbs right so this this is set up

691
00:26:32,799 --> 00:26:35,360
as my redirect url

692
00:26:35,360 --> 00:26:36,640
so now let's

693
00:26:36,640 --> 00:26:39,440
actually go ahead and run this

694
00:26:39,440 --> 00:26:42,159
let's simulate that webhook trigger

695
00:26:42,159 --> 00:26:43,760
event

696
00:26:43,760 --> 00:26:46,960
so once we do that once you simulate

697
00:26:46,960 --> 00:26:50,480
a webhook trigger event it says done

698
00:26:50,480 --> 00:26:52,480
oh sorry i i think i need to do one more

699
00:26:52,480 --> 00:26:55,120
thing just give me a sec

700
00:26:55,120 --> 00:26:57,360
uh

701
00:27:03,279 --> 00:27:04,720
yeah i needed to

702
00:27:04,720 --> 00:27:07,600
generate some fake users right you don't

703
00:27:07,600 --> 00:27:09,039
want to just see a bunch of empty

704
00:27:09,039 --> 00:27:11,440
entries right so

705
00:27:11,440 --> 00:27:13,760
generating some fake users so you'll see

706
00:27:13,760 --> 00:27:16,480
that it comes back with a base64 encoded

707
00:27:16,480 --> 00:27:21,840
response now if you look at what this is

708
00:27:23,520 --> 00:27:25,760
you'll see that it came back with the

709
00:27:25,760 --> 00:27:28,480
it listed the tables from my couchdb

710
00:27:28,480 --> 00:27:30,720
database which is the users table now if

711
00:27:30,720 --> 00:27:32,640
i want to retrieve

712
00:27:32,640 --> 00:27:35,919
all of the data sets in that

713
00:27:35,919 --> 00:27:39,520
let's actually go ahead and do that

714
00:27:41,600 --> 00:27:42,720
i'm going to

715
00:27:42,720 --> 00:27:44,640
change the redirect url to something

716
00:27:44,640 --> 00:27:45,919
else i'm going to say

717
00:27:45,919 --> 00:27:47,440
users

718
00:27:47,440 --> 00:27:52,080
all docs so it's going to redirect me to

719
00:27:52,080 --> 00:27:54,720
this so i'm going to start my hook

720
00:27:54,720 --> 00:27:56,799
and i'm going to trigger another webhook

721
00:27:56,799 --> 00:27:58,480
trigger event

722
00:27:58,480 --> 00:27:59,679
this time it's going to come back with a

723
00:27:59,679 --> 00:28:01,520
whole lot of information because it's

724
00:28:01,520 --> 00:28:02,720
dumped my

725
00:28:02,720 --> 00:28:04,640
user's keys

726
00:28:04,640 --> 00:28:07,760
in my web hook results right so now if

727
00:28:07,760 --> 00:28:09,679
you see in fact if you see our web hook

728
00:28:09,679 --> 00:28:12,080
results

729
00:28:13,360 --> 00:28:15,440
it's still obviously i said a lot of web

730
00:28:15,440 --> 00:28:17,360
hooks store your results right so let's

731
00:28:17,360 --> 00:28:18,240
look at

732
00:28:18,240 --> 00:28:20,159
webhook id1 and all the results it's

733
00:28:20,159 --> 00:28:21,679
stored

734
00:28:21,679 --> 00:28:23,440
you'll see that it stored the first one

735
00:28:23,440 --> 00:28:25,360
which is the user's table and it stored

736
00:28:25,360 --> 00:28:28,080
the second one and if you look at what

737
00:28:28,080 --> 00:28:30,399
this is i would have normally jqued it

738
00:28:30,399 --> 00:28:33,199
but i guess

739
00:28:36,480 --> 00:28:39,480
base64

740
00:28:39,919 --> 00:28:41,200
so you'll see that it is able to

741
00:28:41,200 --> 00:28:44,000
retrieve the user's keys now this is the

742
00:28:44,000 --> 00:28:46,559
same kind of pattern that plays out for

743
00:28:46,559 --> 00:28:48,240
your metadata as well

744
00:28:48,240 --> 00:28:49,279
right

745
00:28:49,279 --> 00:28:51,200
same kind of pattern for your metadata

746
00:28:51,200 --> 00:28:53,039
especially if it's on

747
00:28:53,039 --> 00:28:55,679
imds v1 which is aws which i'm talking

748
00:28:55,679 --> 00:28:59,039
about okay so this is a very common

749
00:28:59,039 --> 00:29:00,960
example of what can happen

750
00:29:00,960 --> 00:29:03,200
with this sort of an attack but there is

751
00:29:03,200 --> 00:29:05,120
a slight variation to this and let's

752
00:29:05,120 --> 00:29:07,840
talk about that for a little bit before

753
00:29:07,840 --> 00:29:10,799
we close the session today

754
00:29:10,799 --> 00:29:13,200
so the variation essentially is

755
00:29:13,200 --> 00:29:15,200
um

756
00:29:15,200 --> 00:29:18,880
okay it's aws and a lot of aws customers

757
00:29:18,880 --> 00:29:22,240
are moving to imds v2 right which is the

758
00:29:22,240 --> 00:29:24,000
v2 of the metadata service which

759
00:29:24,000 --> 00:29:25,919
requires you to do a put request get a

760
00:29:25,919 --> 00:29:27,919
token and then do a get request and then

761
00:29:27,919 --> 00:29:29,520
do all of that stuff so a lot of them

762
00:29:29,520 --> 00:29:31,760
are not on imdsv1 anymore what's the big

763
00:29:31,760 --> 00:29:32,640
deal

764
00:29:32,640 --> 00:29:34,399
why are you making such a big deal out

765
00:29:34,399 --> 00:29:36,720
of this is this really something that is

766
00:29:36,720 --> 00:29:38,480
that important

767
00:29:38,480 --> 00:29:41,440
and yes and no so let's talk about the

768
00:29:41,440 --> 00:29:43,360
yes part of it the no could be obviously

769
00:29:43,360 --> 00:29:45,279
given your scenario you might not have

770
00:29:45,279 --> 00:29:47,440
too much of an impact on this but what

771
00:29:47,440 --> 00:29:50,159
about other cloud providers what about

772
00:29:50,159 --> 00:29:53,440
azure what about gcp now to access the

773
00:29:53,440 --> 00:29:55,919
metadata endpoints on azure and gcp what

774
00:29:55,919 --> 00:29:57,520
do you need to do

775
00:29:57,520 --> 00:29:59,360
anyone

776
00:29:59,360 --> 00:30:00,640
yes

777
00:30:00,640 --> 00:30:02,320
head on right so you need to add a

778
00:30:02,320 --> 00:30:06,080
metadata header to your http request

779
00:30:06,080 --> 00:30:09,360
and you need to add some you know azure

780
00:30:09,360 --> 00:30:11,440
or in this case google or whatever it is

781
00:30:11,440 --> 00:30:12,240
right

782
00:30:12,240 --> 00:30:15,279
now remember a lot of web hook providers

783
00:30:15,279 --> 00:30:17,440
or a lot of web hook providers or

784
00:30:17,440 --> 00:30:20,080
applications that deliver web hooks also

785
00:30:20,080 --> 00:30:21,600
allow you to confirm

786
00:30:21,600 --> 00:30:23,360
custom headers

787
00:30:23,360 --> 00:30:25,360
right they allow you to confirm custom

788
00:30:25,360 --> 00:30:28,399
headers especially ci cd systems

789
00:30:28,399 --> 00:30:29,919
right because i see these systems are

790
00:30:29,919 --> 00:30:31,279
talking to a whole bunch of other things

791
00:30:31,279 --> 00:30:33,760
they need to have api keys etc etc they

792
00:30:33,760 --> 00:30:36,320
allow you to configure custom headers so

793
00:30:36,320 --> 00:30:38,000
in this case all you have to do is

794
00:30:38,000 --> 00:30:39,520
configure a custom header called

795
00:30:39,520 --> 00:30:40,960
metadata type

796
00:30:40,960 --> 00:30:43,520
metadata flavor google and if you are

797
00:30:43,520 --> 00:30:45,600
running a gcp machine

798
00:30:45,600 --> 00:30:48,480
you have the same exact impact on that

799
00:30:48,480 --> 00:30:51,039
machine as well

800
00:30:51,039 --> 00:30:53,200
right same exact impact on that machine

801
00:30:53,200 --> 00:30:54,799
as well you're able to access the

802
00:30:54,799 --> 00:30:56,880
credentials or the service account token

803
00:30:56,880 --> 00:30:59,519
that's been loaded on that gcp or azure

804
00:30:59,519 --> 00:31:01,519
machine and you can still do the same

805
00:31:01,519 --> 00:31:05,440
thing because of the trustee http 303

806
00:31:05,440 --> 00:31:08,880
right that's the benefit of 303

807
00:31:08,880 --> 00:31:11,039
right so this is something that you can

808
00:31:11,039 --> 00:31:13,440
do as well so not only is it just a pure

809
00:31:13,440 --> 00:31:16,000
get request which is aws centric but if

810
00:31:16,000 --> 00:31:18,159
your webhook provider allows you to add

811
00:31:18,159 --> 00:31:20,000
custom headers you also have this

812
00:31:20,000 --> 00:31:21,200
potential

813
00:31:21,200 --> 00:31:22,080
uh

814
00:31:22,080 --> 00:31:23,679
you know you have the potential for

815
00:31:23,679 --> 00:31:25,440
something like this to happen of course

816
00:31:25,440 --> 00:31:28,240
with aws imds v2 i think it has been

817
00:31:28,240 --> 00:31:30,799
addressed quite comprehensively because

818
00:31:30,799 --> 00:31:32,960
they require you to do a put request and

819
00:31:32,960 --> 00:31:35,200
then do a get the token and then do a

820
00:31:35,200 --> 00:31:37,200
get request after it so it's not

821
00:31:37,200 --> 00:31:39,679
obviously that easy to do this uh at

822
00:31:39,679 --> 00:31:41,679
least without doing an rc in some way

823
00:31:41,679 --> 00:31:45,279
but for azure and gcp and i'm sure many

824
00:31:45,279 --> 00:31:47,519
other cloud providers uh

825
00:31:47,519 --> 00:31:49,600
that i'm not able to list right now i'm

826
00:31:49,600 --> 00:31:52,080
sure a very similar type of attack is

827
00:31:52,080 --> 00:31:54,559
possible even there as well

828
00:31:54,559 --> 00:31:56,880
wherever there is a metadata header

829
00:31:56,880 --> 00:31:59,360
now the first thing that one thinks of

830
00:31:59,360 --> 00:32:01,279
when they do this is

831
00:32:01,279 --> 00:32:03,760
why not just block list

832
00:32:03,760 --> 00:32:06,760
right why not say that if the ip is

833
00:32:06,760 --> 00:32:09,760
169.254 or 169.254. if the webhook

834
00:32:09,760 --> 00:32:14,279
consumer gives me a ip like 169.254 or

835
00:32:14,279 --> 00:32:16,960
127.0.0.1 or localhost or something why

836
00:32:16,960 --> 00:32:19,200
not just blocklist it

837
00:32:19,200 --> 00:32:22,000
but then again the provider the consumer

838
00:32:22,000 --> 00:32:25,880
can set up a domain that says

839
00:32:25,880 --> 00:32:28,039
blahblahblah.evil.com and that could be

840
00:32:28,039 --> 00:32:32,039
169.254 and that could resolve to

841
00:32:32,039 --> 00:32:35,279
169.254.169.254. so it's not always that

842
00:32:35,279 --> 00:32:38,000
the ip block listing approach works

843
00:32:38,000 --> 00:32:40,399
right so you have to think about it more

844
00:32:40,399 --> 00:32:42,480
holistically than just the ip block

845
00:32:42,480 --> 00:32:44,080
listing approach because you can your

846
00:32:44,080 --> 00:32:48,000
dns will resolve to 169 or 127 or

847
00:32:48,000 --> 00:32:50,559
localhost or whatever it is it will work

848
00:32:50,559 --> 00:32:52,799
and the attack can still work unless you

849
00:32:52,799 --> 00:32:55,360
have some kind of a dns proxy or if you

850
00:32:55,360 --> 00:32:57,279
are if you have some kind of an open dns

851
00:32:57,279 --> 00:32:59,360
or something where it will uh not

852
00:32:59,360 --> 00:33:01,519
resolve those localhost or whatever

853
00:33:01,519 --> 00:33:02,720
block listed

854
00:33:02,720 --> 00:33:04,640
uh ip addresses that it actually post

855
00:33:04,640 --> 00:33:06,799
resolution uh resolves to right so

856
00:33:06,799 --> 00:33:09,840
that's basically another potential area

857
00:33:09,840 --> 00:33:12,000
of evasion of this particular type of

858
00:33:12,000 --> 00:33:13,840
thing we've seen this again so all of

859
00:33:13,840 --> 00:33:15,519
these examples are something we have

860
00:33:15,519 --> 00:33:17,279
seen on live

861
00:33:17,279 --> 00:33:20,080
systems which are either they have some

862
00:33:20,080 --> 00:33:21,760
kind of vulnerability disclosure or bug

863
00:33:21,760 --> 00:33:24,480
bounty program and we've seen variations

864
00:33:24,480 --> 00:33:27,519
of this right some of them for instance

865
00:33:27,519 --> 00:33:29,039
like stripe they're pretty strong

866
00:33:29,039 --> 00:33:31,279
they've done a lot of work on this space

867
00:33:31,279 --> 00:33:33,120
some of them are completely clueless

868
00:33:33,120 --> 00:33:35,440
about this so it really depends on

869
00:33:35,440 --> 00:33:37,200
where you are in the spectrum right so

870
00:33:37,200 --> 00:33:39,440
it is entirely dependent on where you

871
00:33:39,440 --> 00:33:40,880
are in the spectrum

872
00:33:40,880 --> 00:33:42,480
now let's talk a little bit about

873
00:33:42,480 --> 00:33:44,399
defense before

874
00:33:44,399 --> 00:33:47,360
we close uh the session today right the

875
00:33:47,360 --> 00:33:51,279
first and the most important defense in

876
00:33:51,279 --> 00:33:53,039
this particular case

877
00:33:53,039 --> 00:33:54,720
especially when you're dealing with web

878
00:33:54,720 --> 00:33:59,360
hooks is do not follow the redirect

879
00:33:59,360 --> 00:34:03,200
okay do not follow the redirect so

880
00:34:03,200 --> 00:34:06,159
this in many http clients like python

881
00:34:06,159 --> 00:34:08,399
and go for by default follow the

882
00:34:08,399 --> 00:34:09,440
redirect

883
00:34:09,440 --> 00:34:11,839
so you have to ensure that your client

884
00:34:11,839 --> 00:34:14,560
is setting follow redirect to false or

885
00:34:14,560 --> 00:34:16,960
whatever is the configuration parameter

886
00:34:16,960 --> 00:34:18,960
that does not follow the redirect

887
00:34:18,960 --> 00:34:20,639
because if you don't if you follow the

888
00:34:20,639 --> 00:34:22,719
redirect you're going to have you are

889
00:34:22,719 --> 00:34:25,599
going to be susceptible to the whole 303

890
00:34:25,599 --> 00:34:27,359
uh issue

891
00:34:27,359 --> 00:34:30,239
now this is the first and most important

892
00:34:30,239 --> 00:34:32,000
control at least to deal with this

893
00:34:32,000 --> 00:34:33,359
particular

894
00:34:33,359 --> 00:34:35,520
flaw or this particular possibility of

895
00:34:35,520 --> 00:34:37,199
flaw right do not follow redirect if you

896
00:34:37,199 --> 00:34:38,800
don't follow redirect this flaw is not

897
00:34:38,800 --> 00:34:40,800
going to happen

898
00:34:40,800 --> 00:34:42,560
from that perspective right so it's not

899
00:34:42,560 --> 00:34:44,000
going to happen from that perspective in

900
00:34:44,000 --> 00:34:44,960
addition

901
00:34:44,960 --> 00:34:46,719
to go a little deeper for defense in

902
00:34:46,719 --> 00:34:49,199
depth if you can have a network security

903
00:34:49,199 --> 00:34:51,119
policy again this is not exactly super

904
00:34:51,119 --> 00:34:53,918
easy because if you have metadata on

905
00:34:53,918 --> 00:34:55,520
that end point chances are that you want

906
00:34:55,520 --> 00:34:57,839
to use that metadata so

907
00:34:57,839 --> 00:35:00,240
by adding a network security policy that

908
00:35:00,240 --> 00:35:02,079
disables access to metadata or something

909
00:35:02,079 --> 00:35:03,920
you may not be achieving it but if

910
00:35:03,920 --> 00:35:06,960
possible if you can if it's feasible

911
00:35:06,960 --> 00:35:09,359
think about a network security policy

912
00:35:09,359 --> 00:35:12,960
which disables access to a specific set

913
00:35:12,960 --> 00:35:13,920
of

914
00:35:13,920 --> 00:35:15,119
urls

915
00:35:15,119 --> 00:35:17,359
are it really depends on what kind of

916
00:35:17,359 --> 00:35:18,880
case you have it depends on the kind of

917
00:35:18,880 --> 00:35:20,240
app the kind of

918
00:35:20,240 --> 00:35:22,400
access the app has and so on try and

919
00:35:22,400 --> 00:35:24,240
lock down the network security policy

920
00:35:24,240 --> 00:35:26,880
even on your on your kubernetes clusters

921
00:35:26,880 --> 00:35:30,880
or with your aws vpc or your cloud vpcs

922
00:35:30,880 --> 00:35:32,800
you know in azure or gcp or whatever it

923
00:35:32,800 --> 00:35:34,720
is right so this is another option that

924
00:35:34,720 --> 00:35:35,839
you can do

925
00:35:35,839 --> 00:35:38,320
dns proxy now this is something that you

926
00:35:38,320 --> 00:35:40,720
will probably have to enable in your

927
00:35:40,720 --> 00:35:42,640
node itself where you essentially have a

928
00:35:42,640 --> 00:35:44,480
dns proxy that

929
00:35:44,480 --> 00:35:47,280
does a checks post resolution right post

930
00:35:47,280 --> 00:35:50,000
resolution it checks whether it's an 169

931
00:35:50,000 --> 00:35:52,400
ip or a 127 ip that's where you want to

932
00:35:52,400 --> 00:35:54,800
check whether something is resolving in

933
00:35:54,800 --> 00:35:56,800
a nasty way so you want to probably have

934
00:35:56,800 --> 00:35:59,599
a dns proxy on the node this is also an

935
00:35:59,599 --> 00:36:01,760
additional mechanism that you can use or

936
00:36:01,760 --> 00:36:03,680
if the dns server that you're resolving

937
00:36:03,680 --> 00:36:05,440
to is automatically programmed with an

938
00:36:05,440 --> 00:36:08,160
allow list that's great that's easier to

939
00:36:08,160 --> 00:36:10,079
administer but if you don't have that

940
00:36:10,079 --> 00:36:12,320
then dns proxy may be a way to think

941
00:36:12,320 --> 00:36:14,800
about this as you go along

942
00:36:14,800 --> 00:36:17,599
the other thing is to have a validating

943
00:36:17,599 --> 00:36:20,000
webhook url which is basically to check

944
00:36:20,000 --> 00:36:23,599
whether your url is legit or not again

945
00:36:23,599 --> 00:36:25,280
this has its own limitations because

946
00:36:25,280 --> 00:36:27,680
people can evade and bypass this

947
00:36:27,680 --> 00:36:30,400
depending on how broad your web hook

948
00:36:30,400 --> 00:36:32,720
setup is ip deny list also is a

949
00:36:32,720 --> 00:36:35,040
possibility but it can be evaded these

950
00:36:35,040 --> 00:36:37,680
are not the most efficient

951
00:36:37,680 --> 00:36:40,000
ways to do this but it is these are

952
00:36:40,000 --> 00:36:41,359
options that you have depending on the

953
00:36:41,359 --> 00:36:42,480
kind of

954
00:36:42,480 --> 00:36:44,400
external internal public facing

955
00:36:44,400 --> 00:36:46,720
non-public facing consumer non-consumer

956
00:36:46,720 --> 00:36:49,119
type of application that you have so all

957
00:36:49,119 --> 00:36:51,440
of these are potential defenses but the

958
00:36:51,440 --> 00:36:54,560
first one is the big one right

959
00:36:54,560 --> 00:36:57,040
especially to avoid the whole boomerang

960
00:36:57,040 --> 00:37:00,000
effect of your web hook the first one is

961
00:37:00,000 --> 00:37:02,960
the one that will solve a lot of these

962
00:37:02,960 --> 00:37:04,640
problems for you

963
00:37:04,640 --> 00:37:07,520
right so in conclusion

964
00:37:07,520 --> 00:37:09,760
web hooks are a powerful way to

965
00:37:09,760 --> 00:37:11,440
integrate your apps with others

966
00:37:11,440 --> 00:37:12,880
obviously this is something that we're

967
00:37:12,880 --> 00:37:14,960
seeing you have web hooks all over the

968
00:37:14,960 --> 00:37:16,560
place today and there's a reason for it

969
00:37:16,560 --> 00:37:19,119
it's super easy to use very convenient

970
00:37:19,119 --> 00:37:20,960
highly interoperable makes your

971
00:37:20,960 --> 00:37:23,359
application much more accessible to a

972
00:37:23,359 --> 00:37:25,200
lot of other applications

973
00:37:25,200 --> 00:37:27,119
also a powerful way to get attacked

974
00:37:27,119 --> 00:37:28,880
right because these kind of attacks

975
00:37:28,880 --> 00:37:31,119
happen and in most cases like i said a

976
00:37:31,119 --> 00:37:33,760
lot of http clients by default follow

977
00:37:33,760 --> 00:37:35,920
redirect so if you have that sort of

978
00:37:35,920 --> 00:37:38,240
scenario you could have you could be

979
00:37:38,240 --> 00:37:39,760
potentially vulnerable to something like

980
00:37:39,760 --> 00:37:41,040
this

981
00:37:41,040 --> 00:37:43,200
consider web hooks in your threat model

982
00:37:43,200 --> 00:37:44,880
now this is the starting point for

983
00:37:44,880 --> 00:37:46,800
everything right now a lot of people

984
00:37:46,800 --> 00:37:48,800
don't think about web hooks when they're

985
00:37:48,800 --> 00:37:50,560
threat modeling right or they don't

986
00:37:50,560 --> 00:37:52,400
think of the feature web hooks when

987
00:37:52,400 --> 00:37:53,839
they're threat modeling

988
00:37:53,839 --> 00:37:55,599
they just put the standard best

989
00:37:55,599 --> 00:37:57,760
practices or standard security practices

990
00:37:57,760 --> 00:37:59,839
for web hooks like apis and

991
00:37:59,839 --> 00:38:01,839
api keys and hmac and stuff like that

992
00:38:01,839 --> 00:38:03,520
that's great good no problem that's a

993
00:38:03,520 --> 00:38:04,880
good start but

994
00:38:04,880 --> 00:38:07,200
think about a threat model which

995
00:38:07,200 --> 00:38:09,359
incorporates something like this

996
00:38:09,359 --> 00:38:11,520
and if you are a large team or a team of

997
00:38:11,520 --> 00:38:13,200
teams where you have multiple teams that

998
00:38:13,200 --> 00:38:15,040
are dealing with similar issues then

999
00:38:15,040 --> 00:38:16,480
it's something that you want to enforce

1000
00:38:16,480 --> 00:38:18,800
across the team in fact one great thing

1001
00:38:18,800 --> 00:38:20,800
that you could do is write a secure

1002
00:38:20,800 --> 00:38:23,119
default http client or use a security

1003
00:38:23,119 --> 00:38:25,520
default http client by default that does

1004
00:38:25,520 --> 00:38:26,640
not do

1005
00:38:26,640 --> 00:38:28,800
redirect following that does not do this

1006
00:38:28,800 --> 00:38:30,560
and that and there are a bunch of stuff

1007
00:38:30,560 --> 00:38:32,320
there are options out there there are

1008
00:38:32,320 --> 00:38:34,400
http clients that are

1009
00:38:34,400 --> 00:38:36,720
by default secure against multiple

1010
00:38:36,720 --> 00:38:38,800
variants of ssrf

1011
00:38:38,800 --> 00:38:40,800
i don't have the exact names right now

1012
00:38:40,800 --> 00:38:42,000
but there are

1013
00:38:42,000 --> 00:38:45,200
on each major http client project

1014
00:38:45,200 --> 00:38:46,400
typically has

1015
00:38:46,400 --> 00:38:48,960
ssrf now i wouldn't say 100 secure but

1016
00:38:48,960 --> 00:38:51,920
at least ssrf hardened http client so

1017
00:38:51,920 --> 00:38:53,599
definitely consider

1018
00:38:53,599 --> 00:38:55,440
having these secure defaults in your

1019
00:38:55,440 --> 00:38:56,800
development workflow have your

1020
00:38:56,800 --> 00:38:58,880
developers use it it will definitely

1021
00:38:58,880 --> 00:39:00,800
make a lot more difference to your

1022
00:39:00,800 --> 00:39:02,320
security posture

1023
00:39:02,320 --> 00:39:04,480
not just for this flaw but for ssrf in

1024
00:39:04,480 --> 00:39:06,960
general right ssrf in general this will

1025
00:39:06,960 --> 00:39:09,680
definitely make uh for a very powerful

1026
00:39:09,680 --> 00:39:10,800
um

1027
00:39:10,800 --> 00:39:13,040
so ssrf is the way this happens so

1028
00:39:13,040 --> 00:39:14,960
attackers are going to leverage ssrf to

1029
00:39:14,960 --> 00:39:16,000
do this

1030
00:39:16,000 --> 00:39:18,240
so you have to think about that

1031
00:39:18,240 --> 00:39:20,160
and look at defense holistically right

1032
00:39:20,160 --> 00:39:22,960
because you yes you can avoid redirects

1033
00:39:22,960 --> 00:39:24,880
but can you do anything more can you

1034
00:39:24,880 --> 00:39:26,400
ensure that there are multiple layers

1035
00:39:26,400 --> 00:39:28,000
because at some point in time let's say

1036
00:39:28,000 --> 00:39:29,760
a developer who's not very experienced

1037
00:39:29,760 --> 00:39:32,320
ends up adding just using the default

1038
00:39:32,320 --> 00:39:34,160
library and that might still cause

1039
00:39:34,160 --> 00:39:35,520
problems for your application down the

1040
00:39:35,520 --> 00:39:38,079
road so these are the things that i can

1041
00:39:38,079 --> 00:39:41,119
recommend for this particular flaw and

1042
00:39:41,119 --> 00:39:42,640
if you're using web hooks definitely

1043
00:39:42,640 --> 00:39:45,119
look for these issues if you're a red

1044
00:39:45,119 --> 00:39:47,440
teamer or a pen tester think about this

1045
00:39:47,440 --> 00:39:49,920
in your next pen test because

1046
00:39:49,920 --> 00:39:52,320
i've seen a lot of squishy targets in

1047
00:39:52,320 --> 00:39:56,480
this space especially ci systems apis uh

1048
00:39:56,480 --> 00:40:00,000
ci is is horrible ci the track record of

1049
00:40:00,000 --> 00:40:02,720
most ci systems on this front is pretty

1050
00:40:02,720 --> 00:40:03,680
bad

1051
00:40:03,680 --> 00:40:05,599
we've seen cloud ci's we've seen hosted

1052
00:40:05,599 --> 00:40:08,560
ci's that are pretty bad on this front

1053
00:40:08,560 --> 00:40:10,640
so definitely think about it

1054
00:40:10,640 --> 00:40:12,400
marketing automation is another squishy

1055
00:40:12,400 --> 00:40:14,319
target because they redirect to all over

1056
00:40:14,319 --> 00:40:16,880
the place and uh if you're using

1057
00:40:16,880 --> 00:40:19,200
marketing automation tools either sas or

1058
00:40:19,200 --> 00:40:21,680
otherwise definitely bring this up with

1059
00:40:21,680 --> 00:40:23,119
them or check whether

1060
00:40:23,119 --> 00:40:26,319
uh you know where they are vulnerable to

1061
00:40:26,319 --> 00:40:28,400
this or uh if you have permissions of

1062
00:40:28,400 --> 00:40:31,599
course uh to do that so yeah this is uh

1063
00:40:31,599 --> 00:40:33,280
this brings me to the end of my talk

1064
00:40:33,280 --> 00:40:35,599
thank you very much and uh

1065
00:40:35,599 --> 00:40:36,720
thank you for having been a great

1066
00:40:36,720 --> 00:40:38,400
audience i hope it was useful

1067
00:40:38,400 --> 00:40:38,790
thank you

1068
00:40:38,790 --> 00:40:41,890
[Applause]

1069
00:40:41,890 --> 00:40:44,980
[Music]

1070
00:40:45,280 --> 00:40:47,839
questions

1071
00:40:48,640 --> 00:40:52,400
i think i have 15 minutes yeah sure any

1072
00:40:52,400 --> 00:40:54,640
questions

1073
00:40:59,920 --> 00:41:01,680
thanks away for the wonderful

1074
00:41:01,680 --> 00:41:04,880
presentation thanks yeah

1075
00:41:04,880 --> 00:41:07,200
for example let's take that uh stripe is

1076
00:41:07,200 --> 00:41:09,040
making a call to the consumer

1077
00:41:09,040 --> 00:41:11,920
and consumer uh asks tribe to redirect

1078
00:41:11,920 --> 00:41:13,680
to 303

1079
00:41:13,680 --> 00:41:15,520
aws metadata

1080
00:41:15,520 --> 00:41:18,319
now stripe makes call to the metadata

1081
00:41:18,319 --> 00:41:20,079
call right and it gets the response of

1082
00:41:20,079 --> 00:41:23,520
aws credentials yeah uh does consumer

1083
00:41:23,520 --> 00:41:26,079
reduce the credentials or how does the

1084
00:41:26,079 --> 00:41:28,480
consumer gets the aws credentials here

1085
00:41:28,480 --> 00:41:30,560
okay good question so typically what

1086
00:41:30,560 --> 00:41:34,079
happens is that most web hook providers

1087
00:41:34,079 --> 00:41:37,440
have a uh a trace right so they will

1088
00:41:37,440 --> 00:41:39,599
store the response from whatever request

1089
00:41:39,599 --> 00:41:41,280
they make

1090
00:41:41,280 --> 00:41:43,520
so if they make a request to a provider

1091
00:41:43,520 --> 00:41:45,440
and that provider comes back with a 200

1092
00:41:45,440 --> 00:41:47,119
response or whatever or any response

1093
00:41:47,119 --> 00:41:50,000
they will store that in in its trace so

1094
00:41:50,000 --> 00:41:52,640
you you can log into stripe and look at

1095
00:41:52,640 --> 00:41:55,680
all the traces of those logs you know

1096
00:41:55,680 --> 00:41:58,079
that have been generated from any web

1097
00:41:58,079 --> 00:41:59,359
hook events that have been triggered

1098
00:41:59,359 --> 00:42:01,680
from stripe you mean a consumer will

1099
00:42:01,680 --> 00:42:02,480
have a

1100
00:42:02,480 --> 00:42:04,640
option to get the trace of the web

1101
00:42:04,640 --> 00:42:06,560
consumer is the user of the system right

1102
00:42:06,560 --> 00:42:08,640
so consumer is a stripe customer or i

1103
00:42:08,640 --> 00:42:10,079
mean stripe is not vulnerable to this

1104
00:42:10,079 --> 00:42:12,400
i'm just using stripe as an example uh

1105
00:42:12,400 --> 00:42:14,000
consumer is a stripe customer so he's

1106
00:42:14,000 --> 00:42:15,359
going to log in they're going to log

1107
00:42:15,359 --> 00:42:18,000
into their stripe admin portal and check

1108
00:42:18,000 --> 00:42:20,880
out the web hook traces on their

1109
00:42:20,880 --> 00:42:23,599
developer dashboard whatever okay okay

1110
00:42:23,599 --> 00:42:24,880
thank you

1111
00:42:24,880 --> 00:42:26,720
that's what you saw with the docker one

1112
00:42:26,720 --> 00:42:28,480
also it's the same thing the developer

1113
00:42:28,480 --> 00:42:30,560
dashboard is where are the admin

1114
00:42:30,560 --> 00:42:33,119
dashboard is where you saw all of these

1115
00:42:33,119 --> 00:42:35,359
you know logs being generated from those

1116
00:42:35,359 --> 00:42:37,680
traces

1117
00:42:38,400 --> 00:42:41,880
any other questions

1118
00:42:44,000 --> 00:42:45,359
all right

1119
00:42:45,359 --> 00:42:47,440
this is definitely a lunch crowd no

1120
00:42:47,440 --> 00:42:49,680
questions at all and

1121
00:42:49,680 --> 00:42:51,599
all right thank you very much if there

1122
00:42:51,599 --> 00:42:53,440
are no questions i am happy to take any

1123
00:42:53,440 --> 00:42:55,359
questions offline and thank you very

1124
00:42:55,359 --> 00:42:56,640
much

1125
00:42:56,640 --> 00:42:59,799
thank you

