1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,120 --> 00:00:15,280
uh hello and welcome everybody to my

3
00:00:15,280 --> 00:00:17,199
talk about a common bypass pattern to

4
00:00:17,199 --> 00:00:19,439
exploit modern web apps

5
00:00:19,439 --> 00:00:20,960
so uh let's just get the introduction

6
00:00:20,960 --> 00:00:23,600
out of the way who am i my name is simon

7
00:00:23,600 --> 00:00:25,519
i am a vulnerability researcher for sona

8
00:00:25,519 --> 00:00:27,359
source i work in the same team as toma

9
00:00:27,359 --> 00:00:29,519
which i'm very lucky for

10
00:00:29,519 --> 00:00:32,000
um i focused on finding uh disclosing

11
00:00:32,000 --> 00:00:34,160
vulnerabilities with my teammates mainly

12
00:00:34,160 --> 00:00:36,079
in open source software

13
00:00:36,079 --> 00:00:37,840
a couple of examples of software we

14
00:00:37,840 --> 00:00:39,680
found vulnerabilities include wordpress

15
00:00:39,680 --> 00:00:42,480
magento 2 mybb zimbra and the linux

16
00:00:42,480 --> 00:00:43,520
kernel

17
00:00:43,520 --> 00:00:44,800
don't worry if you're unfamiliar with

18
00:00:44,800 --> 00:00:46,559
some of these targets and we'll go into

19
00:00:46,559 --> 00:00:49,120
more details on next slides and i also

20
00:00:49,120 --> 00:00:50,559
like to travel which is why i'm super

21
00:00:50,559 --> 00:00:53,120
happy to be here in geneva

22
00:00:53,120 --> 00:00:55,360
so my goal for this talk is to go into

23
00:00:55,360 --> 00:00:57,680
detail about some bug chains we found in

24
00:00:57,680 --> 00:01:00,320
popular web applications

25
00:01:00,320 --> 00:01:02,160
that have already been hardened and the

26
00:01:02,160 --> 00:01:04,799
methodology we used to find them so

27
00:01:04,799 --> 00:01:06,960
first on the list is a wordpress one

28
00:01:06,960 --> 00:01:09,360
click rc via cserv the idea was to

29
00:01:09,360 --> 00:01:11,680
create a comment on a wordpress blog

30
00:01:11,680 --> 00:01:14,720
which shows up in the admin dashboard

31
00:01:14,720 --> 00:01:16,720
because by default an admin has to log

32
00:01:16,720 --> 00:01:18,560
in and actually approve comments made by

33
00:01:18,560 --> 00:01:20,640
external guests meaning unauthenticated

34
00:01:20,640 --> 00:01:23,200
unauthenticated guests so and when the

35
00:01:23,200 --> 00:01:24,799
admin views the comment they're tricked

36
00:01:24,799 --> 00:01:26,479
into uh going on your attacker

37
00:01:26,479 --> 00:01:28,560
controlled website and then a caesar

38
00:01:28,560 --> 00:01:30,720
vulnerability uh triggers and executes

39
00:01:30,720 --> 00:01:33,040
arbitrary code and this happened back in

40
00:01:33,040 --> 00:01:35,119
the day when same side cookies weren't

41
00:01:35,119 --> 00:01:36,640
enforced so this actually worked and

42
00:01:36,640 --> 00:01:38,720
wasn't just a theoretical issue

43
00:01:38,720 --> 00:01:41,520
um so yeah and then next up we have

44
00:01:41,520 --> 00:01:44,159
found a bug bug chain and magento ii um

45
00:01:44,159 --> 00:01:46,799
again choose ecommerce solution

46
00:01:46,799 --> 00:01:48,880
and we found the priof stored xss into

47
00:01:48,880 --> 00:01:51,759
the admin uh panel and the next time an

48
00:01:51,759 --> 00:01:54,079
employee logs into the admin panel you

49
00:01:54,079 --> 00:01:56,880
know rc exploit was triggered

50
00:01:56,880 --> 00:01:58,560
and we found a similar blockchain in

51
00:01:58,560 --> 00:02:01,040
mybb which is a popular form software

52
00:02:01,040 --> 00:02:02,719
where an attacker could send an admin a

53
00:02:02,719 --> 00:02:05,360
private message or have them view a post

54
00:02:05,360 --> 00:02:07,439
and whenever they viewed this message

55
00:02:07,439 --> 00:02:10,399
xss triggered again exploiting rce and

56
00:02:10,399 --> 00:02:12,480
last but not least we have a bug in

57
00:02:12,480 --> 00:02:14,800
simbra which is a enterprise enterprise

58
00:02:14,800 --> 00:02:16,560
email solution

59
00:02:16,560 --> 00:02:19,280
where we found yet again an xss

60
00:02:19,280 --> 00:02:21,280
which triggered in the email body so

61
00:02:21,280 --> 00:02:24,080
whenever a user of a targeted

62
00:02:24,080 --> 00:02:25,840
organization will log in and view an

63
00:02:25,840 --> 00:02:27,599
email they wouldn't have to actually

64
00:02:27,599 --> 00:02:28,720
click anything

65
00:02:28,720 --> 00:02:30,640
xss would just trigger and the attacker

66
00:02:30,640 --> 00:02:33,519
could stall steal all their emails and

67
00:02:33,519 --> 00:02:36,000
we found a ssrf which could be triggered

68
00:02:36,000 --> 00:02:38,640
by any user of an organization meaning

69
00:02:38,640 --> 00:02:40,720
if anyone just clicked on an email the

70
00:02:40,720 --> 00:02:43,840
ssf would trigger steal potentially

71
00:02:43,840 --> 00:02:46,160
cloud tokens and return it to the

72
00:02:46,160 --> 00:02:48,400
attacker server

73
00:02:48,400 --> 00:02:50,640
so some of these applications have been

74
00:02:50,640 --> 00:02:52,239
hardened through years of bug bounty

75
00:02:52,239 --> 00:02:53,920
programs um

76
00:02:53,920 --> 00:02:56,239
and there's competition zero day market

77
00:02:56,239 --> 00:02:57,920
so some of these bugs are actually you

78
00:02:57,920 --> 00:03:00,640
know being sought after by ssd and the

79
00:03:00,640 --> 00:03:02,239
likes and cdi

80
00:03:02,239 --> 00:03:04,239
and um static analysis aesthetic

81
00:03:04,239 --> 00:03:05,840
analyzers have been thrown at them as

82
00:03:05,840 --> 00:03:08,159
well they have also been security audits

83
00:03:08,159 --> 00:03:09,680
but the bugs still look cool and the

84
00:03:09,680 --> 00:03:11,360
question is why and that is what we're

85
00:03:11,360 --> 00:03:13,920
going to discuss in the next slides

86
00:03:13,920 --> 00:03:14,720
so

87
00:03:14,720 --> 00:03:16,879
um i feel like the way we find web

88
00:03:16,879 --> 00:03:19,040
security boxes changing for modern apps

89
00:03:19,040 --> 00:03:20,959
so we've seen a dramatic increase in

90
00:03:20,959 --> 00:03:23,280
adaption of mitigations and secure by

91
00:03:23,280 --> 00:03:25,360
default framework so in the past you

92
00:03:25,360 --> 00:03:28,480
know a php app would simply you'd have a

93
00:03:28,480 --> 00:03:30,720
script and then you would escape you

94
00:03:30,720 --> 00:03:32,799
would echo user input and then you'd

95
00:03:32,799 --> 00:03:34,959
escape it on the spot instead of having

96
00:03:34,959 --> 00:03:37,360
a templating engine that would you know

97
00:03:37,360 --> 00:03:38,879
make sure everything is escaped by

98
00:03:38,879 --> 00:03:41,040
default and kind of

99
00:03:41,040 --> 00:03:43,200
so there are tons of great sanitization

100
00:03:43,200 --> 00:03:44,640
libraries available and they're quite

101
00:03:44,640 --> 00:03:46,879
easy to use making it appealing for

102
00:03:46,879 --> 00:03:48,959
developers to actually use them

103
00:03:48,959 --> 00:03:51,840
because they're just you know not a pain

104
00:03:51,840 --> 00:03:53,439
to integrate in your project and in

105
00:03:53,439 --> 00:03:54,959
general i would say security awareness

106
00:03:54,959 --> 00:03:56,799
has greatly improved among developers at

107
00:03:56,799 --> 00:03:58,720
least for these huge projects

108
00:03:58,720 --> 00:04:01,040
that are modern so whenever a new

109
00:04:01,040 --> 00:04:03,040
mitigation or sanitization framework is

110
00:04:03,040 --> 00:04:04,879
deployed we have to look we have to look

111
00:04:04,879 --> 00:04:07,040
for um for bugs and places that are not

112
00:04:07,040 --> 00:04:10,400
covered by this new mitigation so

113
00:04:10,400 --> 00:04:12,000
this forces us to improve security

114
00:04:12,000 --> 00:04:13,519
research invent new ways to find

115
00:04:13,519 --> 00:04:15,120
vulnerabilities so this means instead of

116
00:04:15,120 --> 00:04:16,560
finding a place where they forgot to

117
00:04:16,560 --> 00:04:18,478
escape use input we would actually have

118
00:04:18,478 --> 00:04:21,199
to come up with a way to either break

119
00:04:21,199 --> 00:04:22,800
the sanitizer

120
00:04:22,800 --> 00:04:24,880
to begin with or find a place where they

121
00:04:24,880 --> 00:04:27,150
wrongly use the sanitizer

122
00:04:27,150 --> 00:04:28,400
[Music]

123
00:04:28,400 --> 00:04:31,040
so you know we get the same bucks but in

124
00:04:31,040 --> 00:04:32,560
different ways so for example parser

125
00:04:32,560 --> 00:04:34,000
differentials are one of my personal

126
00:04:34,000 --> 00:04:36,400
favorite bug classes uh the basic idea

127
00:04:36,400 --> 00:04:37,600
is that you have two different

128
00:04:37,600 --> 00:04:39,759
components of an implication for example

129
00:04:39,759 --> 00:04:41,600
a component that validates untrusted

130
00:04:41,600 --> 00:04:43,600
user input and one component that

131
00:04:43,600 --> 00:04:46,479
actually uses it and if they don't agree

132
00:04:46,479 --> 00:04:48,400
on how to parse this data

133
00:04:48,400 --> 00:04:50,560
there can be security issues and orange

134
00:04:50,560 --> 00:04:52,080
site did an incredible job at

135
00:04:52,080 --> 00:04:53,919
demonstrating this with differences in

136
00:04:53,919 --> 00:04:56,479
url parsers and file system parsers

137
00:04:56,479 --> 00:04:58,400
and those then led to good old path

138
00:04:58,400 --> 00:05:00,720
traversal bugs and http request

139
00:05:00,720 --> 00:05:02,400
marketing is another great example of

140
00:05:02,400 --> 00:05:03,440
this

141
00:05:03,440 --> 00:05:05,280
um also just in general whenever a

142
00:05:05,280 --> 00:05:07,039
standard lease room for interpretation

143
00:05:07,039 --> 00:05:08,880
or there are some unintended side

144
00:05:08,880 --> 00:05:11,800
effects for example uh php uh far

145
00:05:11,800 --> 00:05:14,479
dieselizations were a new way a couple

146
00:05:14,479 --> 00:05:16,880
years ago to get the same old php

147
00:05:16,880 --> 00:05:18,240
unserialized bugs that we've been

148
00:05:18,240 --> 00:05:20,240
exploiting for years

149
00:05:20,240 --> 00:05:21,840
and another example of you know more

150
00:05:21,840 --> 00:05:24,800
suffix sophisticated ways are maybe race

151
00:05:24,800 --> 00:05:26,479
conditions or a time of check time of

152
00:05:26,479 --> 00:05:28,080
use bucks

153
00:05:28,080 --> 00:05:29,440
but essentially

154
00:05:29,440 --> 00:05:30,800
we're still finding the same old

155
00:05:30,800 --> 00:05:33,280
vulnerability types like xss and sql

156
00:05:33,280 --> 00:05:35,919
injection and other injections but kind

157
00:05:35,919 --> 00:05:37,680
of we have to get more creative to get

158
00:05:37,680 --> 00:05:39,360
to them

159
00:05:39,360 --> 00:05:41,919
so we i mentioned a couple and something

160
00:05:41,919 --> 00:05:43,759
we felt wasn't getting enough attention

161
00:05:43,759 --> 00:05:45,840
uh was another common mistake we saw

162
00:05:45,840 --> 00:05:47,520
everywhere which was modification of

163
00:05:47,520 --> 00:05:50,320
sanitized data um and this is what we're

164
00:05:50,320 --> 00:05:52,800
going into in this talk and just give

165
00:05:52,800 --> 00:05:56,479
some examples um on what we mean by this

166
00:05:56,479 --> 00:05:59,280
so the mandatory hacker code picture and

167
00:05:59,280 --> 00:06:00,960
although i'm usually a bit put off by

168
00:06:00,960 --> 00:06:03,360
images by like this when i see them in

169
00:06:03,360 --> 00:06:05,600
articles i think it represents quite

170
00:06:05,600 --> 00:06:07,840
well how intimidating it can feel like

171
00:06:07,840 --> 00:06:10,000
to look at the new code base at least

172
00:06:10,000 --> 00:06:10,880
for me

173
00:06:10,880 --> 00:06:13,120
um there might be millions of lines of

174
00:06:13,120 --> 00:06:16,319
code across several github repositories

175
00:06:16,319 --> 00:06:18,400
and different services and

176
00:06:18,400 --> 00:06:19,600
there might be different programming

177
00:06:19,600 --> 00:06:21,280
languages involved and there's a front

178
00:06:21,280 --> 00:06:23,520
end and a back end and you have no idea

179
00:06:23,520 --> 00:06:25,840
how everything fits together so for this

180
00:06:25,840 --> 00:06:27,440
reason we want to build a model kind of

181
00:06:27,440 --> 00:06:28,960
so we can concentrate on what is

182
00:06:28,960 --> 00:06:31,280
important to us and what isn't so we can

183
00:06:31,280 --> 00:06:32,720
cut through millions of lines of code

184
00:06:32,720 --> 00:06:34,479
because we can't just read the

185
00:06:34,479 --> 00:06:36,720
application line by line and

186
00:06:36,720 --> 00:06:38,880
expect bugs to fall out

187
00:06:38,880 --> 00:06:39,600
so

188
00:06:39,600 --> 00:06:41,280
let's use some pseudo code to describe a

189
00:06:41,280 --> 00:06:43,600
model in this example we have some user

190
00:06:43,600 --> 00:06:45,600
input this can be anything this could be

191
00:06:45,600 --> 00:06:48,080
your http get or post parameter this

192
00:06:48,080 --> 00:06:50,800
could be a http header that is received

193
00:06:50,800 --> 00:06:52,880
that is a file that was uploaded or

194
00:06:52,880 --> 00:06:54,960
generated from user input anything where

195
00:06:54,960 --> 00:06:57,280
you have untrusted data in

196
00:06:57,280 --> 00:06:59,680
in the example above we see that this is

197
00:06:59,680 --> 00:07:02,240
sanitized this just could be anything

198
00:07:02,240 --> 00:07:03,919
this is you know on an abstract level

199
00:07:03,919 --> 00:07:06,880
here this could be your html escaping

200
00:07:06,880 --> 00:07:09,199
this could be your sql escaping this

201
00:07:09,199 --> 00:07:11,840
could be checking that a file name works

202
00:07:11,840 --> 00:07:13,680
and then you use the data in some way so

203
00:07:13,680 --> 00:07:15,919
that's general generally how it works

204
00:07:15,919 --> 00:07:18,479
however in the real world usually things

205
00:07:18,479 --> 00:07:20,800
are more complicated like you'd have

206
00:07:20,800 --> 00:07:22,800
your user input is transformed it's

207
00:07:22,800 --> 00:07:25,440
normalized it's validated it's sanitized

208
00:07:25,440 --> 00:07:26,800
it's processed

209
00:07:26,800 --> 00:07:28,720
um and it's important to note that these

210
00:07:28,720 --> 00:07:30,880
steps they're not is they're not always

211
00:07:30,880 --> 00:07:31,759
like

212
00:07:31,759 --> 00:07:32,960
at the same

213
00:07:32,960 --> 00:07:34,880
code in the next code lines like

214
00:07:34,880 --> 00:07:36,240
sometimes there are millions of lines of

215
00:07:36,240 --> 00:07:38,000
code apart and sometimes it's not even

216
00:07:38,000 --> 00:07:40,000
explicit uh when something gets

217
00:07:40,000 --> 00:07:41,520
normalized for example and we'll get

218
00:07:41,520 --> 00:07:44,080
into some examples with this later but

219
00:07:44,080 --> 00:07:45,759
just to give you some examples of

220
00:07:45,759 --> 00:07:48,000
something we observed commonly happens

221
00:07:48,000 --> 00:07:50,319
in web applications with user input for

222
00:07:50,319 --> 00:07:51,840
transformation so you would have

223
00:07:51,840 --> 00:07:53,440
something like converting short codes to

224
00:07:53,440 --> 00:07:54,720
html

225
00:07:54,720 --> 00:07:56,720
we typically see this in forums or some

226
00:07:56,720 --> 00:07:58,319
kind of what you see is what you get

227
00:07:58,319 --> 00:08:00,639
editor where you have like a back end

228
00:08:00,639 --> 00:08:03,759
format for shortcuts or modifying or

229
00:08:03,759 --> 00:08:06,400
adding html attributes to an html string

230
00:08:06,400 --> 00:08:08,720
so let's say an application takes in

231
00:08:08,720 --> 00:08:11,199
html input from a user or a document

232
00:08:11,199 --> 00:08:13,120
that was generated from user input could

233
00:08:13,120 --> 00:08:14,240
be your

234
00:08:14,240 --> 00:08:16,400
if you have a online store it could be

235
00:08:16,400 --> 00:08:18,160
your template for

236
00:08:18,160 --> 00:08:19,840
emails that are sent to customers

237
00:08:19,840 --> 00:08:21,680
whatever it is and you kind of want to

238
00:08:21,680 --> 00:08:23,039
make sure

239
00:08:23,039 --> 00:08:25,520
that the html code is seo friendly by

240
00:08:25,520 --> 00:08:27,120
making it clean making sure it's

241
00:08:27,120 --> 00:08:29,199
accessible so you want to make sure you

242
00:08:29,199 --> 00:08:31,199
add all you know you add attributes just

243
00:08:31,199 --> 00:08:33,440
to make sure it's clean html code has a

244
00:08:33,440 --> 00:08:35,919
good store a good score

245
00:08:35,919 --> 00:08:38,559
um censoring of text let's say you have

246
00:08:38,559 --> 00:08:40,479
a chat application you want to make sure

247
00:08:40,479 --> 00:08:42,399
your users don't say no don't send now

248
00:08:42,399 --> 00:08:44,159
see messages to each other you can

249
00:08:44,159 --> 00:08:47,680
remove swear words for example um and

250
00:08:47,680 --> 00:08:49,920
there's also auto url highlighting

251
00:08:49,920 --> 00:08:51,519
that's super common and chat

252
00:08:51,519 --> 00:08:54,160
applications mail apps whenever you send

253
00:08:54,160 --> 00:08:56,320
someone a message and they detect okay

254
00:08:56,320 --> 00:08:59,600
there's uh something like www.google.com

255
00:08:59,600 --> 00:09:01,360
then they transform it into like a

256
00:09:01,360 --> 00:09:03,600
clickable link uh just to make sure it's

257
00:09:03,600 --> 00:09:06,560
easy to use and uh useful and uh

258
00:09:06,560 --> 00:09:08,720
language translations are also a common

259
00:09:08,720 --> 00:09:10,800
common thing to do

260
00:09:10,800 --> 00:09:11,760
so

261
00:09:11,760 --> 00:09:13,440
looking at our code example here another

262
00:09:13,440 --> 00:09:15,680
step in the typical life cycle of user

263
00:09:15,680 --> 00:09:18,320
input processing would be normalization

264
00:09:18,320 --> 00:09:20,240
so let's look at some examples what this

265
00:09:20,240 --> 00:09:23,360
could mean so unicode normalization and

266
00:09:23,360 --> 00:09:25,360
text encoding normalization in general

267
00:09:25,360 --> 00:09:26,720
so you want to make sure that all your

268
00:09:26,720 --> 00:09:28,640
services for example your web app and

269
00:09:28,640 --> 00:09:31,040
your database and your caches and

270
00:09:31,040 --> 00:09:32,800
whatever that they all agree on a

271
00:09:32,800 --> 00:09:34,399
character set and that they consistently

272
00:09:34,399 --> 00:09:36,560
use it otherwise you might run into some

273
00:09:36,560 --> 00:09:37,600
issues

274
00:09:37,600 --> 00:09:40,160
path normalization say you want to build

275
00:09:40,160 --> 00:09:42,240
a real path from user input and kind of

276
00:09:42,240 --> 00:09:43,839
resolve the path that's something that

277
00:09:43,839 --> 00:09:46,240
happens or converting backslashes to

278
00:09:46,240 --> 00:09:48,800
forward slashes if you have a app

279
00:09:48,800 --> 00:09:50,800
commonly java that can run on multiple

280
00:09:50,800 --> 00:09:53,120
os's kind of to make sure all your paths

281
00:09:53,120 --> 00:09:54,720
are normalized and

282
00:09:54,720 --> 00:09:56,720
actually work for the assets the os it's

283
00:09:56,720 --> 00:09:59,040
defined designed for

284
00:09:59,040 --> 00:10:01,040
length truncations are quite common for

285
00:10:01,040 --> 00:10:03,200
example some fields of a database might

286
00:10:03,200 --> 00:10:06,000
only be able to contain n characters and

287
00:10:06,000 --> 00:10:07,519
if there's user input that is longer

288
00:10:07,519 --> 00:10:09,600
than n characters it will be truncated

289
00:10:09,600 --> 00:10:11,440
uh to the defined length

290
00:10:11,440 --> 00:10:13,360
and last but not least all your services

291
00:10:13,360 --> 00:10:15,680
need to agree on how many times user

292
00:10:15,680 --> 00:10:17,920
input should be url encoded and decoded

293
00:10:17,920 --> 00:10:20,000
just to have kind of you know a common

294
00:10:20,000 --> 00:10:22,000
base normalized space across your

295
00:10:22,000 --> 00:10:23,440
services

296
00:10:23,440 --> 00:10:24,560
so

297
00:10:24,560 --> 00:10:25,839
last but not least let's look at the

298
00:10:25,839 --> 00:10:27,600
standardization step

299
00:10:27,600 --> 00:10:29,519
and um could be

300
00:10:29,519 --> 00:10:31,440
well this is more validation when you

301
00:10:31,440 --> 00:10:33,360
have extension checks when you will let

302
00:10:33,360 --> 00:10:35,360
your users upload files and you want to

303
00:10:35,360 --> 00:10:36,959
make sure they don't contain any

304
00:10:36,959 --> 00:10:41,279
malicious file names or file extensions

305
00:10:41,279 --> 00:10:43,120
this could be with an allow list or deny

306
00:10:43,120 --> 00:10:45,760
list whatever approach you want to take

307
00:10:45,760 --> 00:10:48,880
html escaping is you know the backbone

308
00:10:48,880 --> 00:10:50,399
making sure you don't have xss

309
00:10:50,399 --> 00:10:51,920
everywhere and the same applies for

310
00:10:51,920 --> 00:10:54,560
escaping input for your sql queries

311
00:10:54,560 --> 00:10:56,640
just make sure your apps don't explode

312
00:10:56,640 --> 00:10:59,200
whenever someone enters a single code

313
00:10:59,200 --> 00:11:01,040
and then you want to validate your input

314
00:11:01,040 --> 00:11:02,800
against allow this in general say you

315
00:11:02,800 --> 00:11:05,200
have a rpc service remote procedure

316
00:11:05,200 --> 00:11:07,600
calls and you want to let users call

317
00:11:07,600 --> 00:11:09,360
methods you want to make sure they can

318
00:11:09,360 --> 00:11:10,640
only allow

319
00:11:10,640 --> 00:11:12,959
canonical can only call methods that are

320
00:11:12,959 --> 00:11:15,360
actually allowed and not just any random

321
00:11:15,360 --> 00:11:17,279
method in the code which might lead to

322
00:11:17,279 --> 00:11:19,120
rce

323
00:11:19,120 --> 00:11:21,279
so let's get to the fun part and think

324
00:11:21,279 --> 00:11:23,760
about how this could break and

325
00:11:23,760 --> 00:11:26,079
so looking at pseudocode we can see an

326
00:11:26,079 --> 00:11:28,399
application accepting user input

327
00:11:28,399 --> 00:11:31,040
and they sanitize it and the resulting

328
00:11:31,040 --> 00:11:32,880
data is then normalized and afterwards

329
00:11:32,880 --> 00:11:34,640
transformed again

330
00:11:34,640 --> 00:11:37,200
and then it is used and this is possibly

331
00:11:37,200 --> 00:11:40,079
insecure because when sanitized data is

332
00:11:40,079 --> 00:11:42,399
modified in some way the effects of the

333
00:11:42,399 --> 00:11:45,040
sanitization could be negated

334
00:11:45,040 --> 00:11:47,279
or possibly even worse

335
00:11:47,279 --> 00:11:49,040
so sanitization should always be the

336
00:11:49,040 --> 00:11:51,440
very last step before using data and

337
00:11:51,440 --> 00:11:53,440
we'll get into more examples here

338
00:11:53,440 --> 00:11:55,440
however sanitized data tends to be

339
00:11:55,440 --> 00:11:58,079
trusted and used less carefully

340
00:11:58,079 --> 00:11:59,760
because you know you're a developer and

341
00:11:59,760 --> 00:12:01,920
you've done your deed and you threw the

342
00:12:01,920 --> 00:12:03,680
sanitizer at it now everyone's happy and

343
00:12:03,680 --> 00:12:04,959
now you can do whatever you want with

344
00:12:04,959 --> 00:12:07,120
your input but it isn't exactly how it

345
00:12:07,120 --> 00:12:10,480
works in in the real world and also it

346
00:12:10,480 --> 00:12:13,440
isn't always obvious if and how where if

347
00:12:13,440 --> 00:12:15,600
how and where data is modified after has

348
00:12:15,600 --> 00:12:17,519
been sanitized there are cases where

349
00:12:17,519 --> 00:12:19,440
data is modified by some other servers

350
00:12:19,440 --> 00:12:20,959
before being used an entirely different

351
00:12:20,959 --> 00:12:22,560
github repo maintained by a different

352
00:12:22,560 --> 00:12:25,200
team so you don't have a perfect

353
00:12:25,200 --> 00:12:27,519
overview over it

354
00:12:27,519 --> 00:12:29,839
and also i noticed that a lot of bone

355
00:12:29,839 --> 00:12:31,200
researchers when they look at code and

356
00:12:31,200 --> 00:12:33,519
they see some user input is validated or

357
00:12:33,519 --> 00:12:35,680
escaped they just stop following the

358
00:12:35,680 --> 00:12:37,600
user input and they don't look for a

359
00:12:37,600 --> 00:12:38,880
place where it's in it where it's

360
00:12:38,880 --> 00:12:40,560
modified after and perhaps you can

361
00:12:40,560 --> 00:12:42,800
bypass the sanitization step

362
00:12:42,800 --> 00:12:45,279
so let's get into some case studies and

363
00:12:45,279 --> 00:12:46,880
the first one we have here is zimbra

364
00:12:46,880 --> 00:12:49,519
webmail and we mentioned this before

365
00:12:49,519 --> 00:12:51,040
it's an enterprise

366
00:12:51,040 --> 00:12:53,920
email solutions can be used

367
00:12:53,920 --> 00:12:56,160
as an alternative to microsoft exchange

368
00:12:56,160 --> 00:12:57,519
for example

369
00:12:57,519 --> 00:12:59,200
and according to their sales website

370
00:12:59,200 --> 00:13:01,040
there are over 200 000 businesses

371
00:13:01,040 --> 00:13:02,880
government and financial institutions

372
00:13:02,880 --> 00:13:04,160
that are using it

373
00:13:04,160 --> 00:13:06,240
and actually in february vallexity

374
00:13:06,240 --> 00:13:08,720
published a blog post uh where it

375
00:13:08,720 --> 00:13:11,360
detected a zero day campaign um

376
00:13:11,360 --> 00:13:13,040
against zimbra and they assumed that it

377
00:13:13,040 --> 00:13:15,040
was a state actor because government

378
00:13:15,040 --> 00:13:16,880
instances were the main targets of these

379
00:13:16,880 --> 00:13:17,920
attacks

380
00:13:17,920 --> 00:13:19,839
um so it goes to show it is an

381
00:13:19,839 --> 00:13:22,240
interesting target used by governments

382
00:13:22,240 --> 00:13:24,320
and um email bodies can contain

383
00:13:24,320 --> 00:13:26,959
arbitrary html code and uh it must be

384
00:13:26,959 --> 00:13:28,480
carefully sanitized and there's a lot

385
00:13:28,480 --> 00:13:30,240
that can go wrong here so we chose it as

386
00:13:30,240 --> 00:13:32,000
an interesting target

387
00:13:32,000 --> 00:13:33,440
for pawning

388
00:13:33,440 --> 00:13:34,639
so

389
00:13:34,639 --> 00:13:36,320
we discovered that xss vulnerability in

390
00:13:36,320 --> 00:13:38,480
the email body and ssf vulnerability

391
00:13:38,480 --> 00:13:39,920
that allowed stealing cloud provider

392
00:13:39,920 --> 00:13:42,320
credentials for example from aws or even

393
00:13:42,320 --> 00:13:43,839
google cloud with google cloud you

394
00:13:43,839 --> 00:13:45,760
usually need to send a header but in the

395
00:13:45,760 --> 00:13:47,519
ssrf you could actually send arbitrary

396
00:13:47,519 --> 00:13:48,880
headers meaning you could even see your

397
00:13:48,880 --> 00:13:50,880
google cloud tokens which was pretty

398
00:13:50,880 --> 00:13:52,639
cool so one email is enough to

399
00:13:52,639 --> 00:13:54,800
potentially take over an email server

400
00:13:54,800 --> 00:13:57,040
often organization just someone needs to

401
00:13:57,040 --> 00:13:58,000
click it

402
00:13:58,000 --> 00:14:01,120
and we have a little demo prepared here

403
00:14:01,120 --> 00:14:03,600
let me just switch tabs

404
00:14:03,600 --> 00:14:04,880
okay so

405
00:14:04,880 --> 00:14:07,440
i wrote my little fancy oh

406
00:14:07,440 --> 00:14:09,600
my little fancy attacker dashboard here

407
00:14:09,600 --> 00:14:11,279
and let me just

408
00:14:11,279 --> 00:14:13,440
skip back

409
00:14:13,440 --> 00:14:15,839
okay so what we're looking at here is

410
00:14:15,839 --> 00:14:17,760
the attacker dashboard that i wrote it's

411
00:14:17,760 --> 00:14:20,240
you know just for demonstration purposes

412
00:14:20,240 --> 00:14:22,000
and we basically have an attacker

413
00:14:22,000 --> 00:14:24,399
launching an attack against employee at

414
00:14:24,399 --> 00:14:27,279
target minus organization.org

415
00:14:27,279 --> 00:14:28,800
and when the attacker presses this

416
00:14:28,800 --> 00:14:31,279
button an email is sent to this victim

417
00:14:31,279 --> 00:14:33,040
and now we're switching to the victims

418
00:14:33,040 --> 00:14:34,800
view they're logging into their simpra

419
00:14:34,800 --> 00:14:37,279
instance

420
00:14:37,519 --> 00:14:40,000
and now they have a new email and you

421
00:14:40,000 --> 00:14:41,600
know you can take as much security

422
00:14:41,600 --> 00:14:43,040
training in the world and be as careful

423
00:14:43,040 --> 00:14:44,800
as you want and not click on any links

424
00:14:44,800 --> 00:14:46,639
in any emails but at some point you're

425
00:14:46,639 --> 00:14:48,480
going to have to emails you're going to

426
00:14:48,480 --> 00:14:51,040
have to open emails so there's a new

427
00:14:51,040 --> 00:14:52,639
email they click it

428
00:14:52,639 --> 00:14:54,959
and there's nothing to click there's

429
00:14:54,959 --> 00:14:56,639
nothing evil going on there's just an

430
00:14:56,639 --> 00:14:59,279
awfully cute puppy

431
00:14:59,279 --> 00:15:01,440
and they view the email and while

432
00:15:01,440 --> 00:15:03,199
they're viewing the email xs payload

433
00:15:03,199 --> 00:15:05,120
runs in the back so now we're back in

434
00:15:05,120 --> 00:15:07,440
the attacker panel and when we reload

435
00:15:07,440 --> 00:15:08,880
we'll see that we have leaked all the

436
00:15:08,880 --> 00:15:10,800
emails

437
00:15:10,800 --> 00:15:13,519
of this client and well there's one

438
00:15:13,519 --> 00:15:16,000
email with offic office banter as a

439
00:15:16,000 --> 00:15:17,120
subject so that's probably not

440
00:15:17,120 --> 00:15:19,680
interesting and uh just for traumatic

441
00:15:19,680 --> 00:15:21,519
purposes there's an email

442
00:15:21,519 --> 00:15:23,440
with the subject of access to production

443
00:15:23,440 --> 00:15:25,040
environment so

444
00:15:25,040 --> 00:15:26,959
that might be interesting and we have

445
00:15:26,959 --> 00:15:30,000
also these iem credentials and when we

446
00:15:30,000 --> 00:15:32,320
read the email of the victim we now have

447
00:15:32,320 --> 00:15:34,079
access to production environment it's

448
00:15:34,079 --> 00:15:35,600
probably not that easy in the real world

449
00:15:35,600 --> 00:15:38,959
but for demonstration purposes uh i hope

450
00:15:38,959 --> 00:15:41,839
it's fine

451
00:15:42,830 --> 00:15:46,100
[Applause]

452
00:15:46,100 --> 00:15:47,519
[Music]

453
00:15:47,519 --> 00:15:48,959
okay

454
00:15:48,959 --> 00:15:50,880
so let's look at how the vulnerabilities

455
00:15:50,880 --> 00:15:53,120
actually came to be

456
00:15:53,120 --> 00:15:55,680
so we looked at the sanitization of

457
00:15:55,680 --> 00:15:58,000
email bodies in zimbra and the email

458
00:15:58,000 --> 00:16:00,000
bodies were sanitized on the server side

459
00:16:00,000 --> 00:16:02,240
and they use an allow list of html tags

460
00:16:02,240 --> 00:16:03,759
and attributes which is generally

461
00:16:03,759 --> 00:16:06,240
speaking the good way to go oh sorry

462
00:16:06,240 --> 00:16:09,839
thank you for pointing this out

463
00:16:10,959 --> 00:16:12,720
okay there we go

464
00:16:12,720 --> 00:16:14,000
um

465
00:16:14,000 --> 00:16:15,839
okay thank you

466
00:16:15,839 --> 00:16:17,600
server side sanitization they use

467
00:16:17,600 --> 00:16:19,199
server-side sanitization and they used

468
00:16:19,199 --> 00:16:20,800
an allow list of html tags and

469
00:16:20,800 --> 00:16:22,880
attributes which is the way to go in my

470
00:16:22,880 --> 00:16:23,920
opinion

471
00:16:23,920 --> 00:16:26,160
deny this never actually works

472
00:16:26,160 --> 00:16:30,320
and they use the osj java html sanitizer

473
00:16:30,320 --> 00:16:32,800
it's a library maintained by ooasp and

474
00:16:32,800 --> 00:16:34,800
we did not discover a bypass in this

475
00:16:34,800 --> 00:16:36,880
html sanitizer framework

476
00:16:36,880 --> 00:16:38,000
so

477
00:16:38,000 --> 00:16:39,759
our for and additionally there was very

478
00:16:39,759 --> 00:16:43,279
strict encoding uh meaning all the uh

479
00:16:43,279 --> 00:16:45,680
the ampersands and the angle brackets

480
00:16:45,680 --> 00:16:47,279
and the quotes and single quotes they

481
00:16:47,279 --> 00:16:48,800
would all be escaped in text and

482
00:16:48,800 --> 00:16:52,639
attribute values so our thought was hey

483
00:16:52,639 --> 00:16:54,560
we'll have to start looking for a place

484
00:16:54,560 --> 00:16:57,199
where the sanitized email is modified

485
00:16:57,199 --> 00:16:59,120
after it has been sanitized just to find

486
00:16:59,120 --> 00:17:00,720
a bypass for this

487
00:17:00,720 --> 00:17:02,320
so

488
00:17:02,320 --> 00:17:04,400
we found a code snippet in a javascript

489
00:17:04,400 --> 00:17:06,319
file located in another repository that

490
00:17:06,319 --> 00:17:08,079
does exactly this for us so it wasn't

491
00:17:08,079 --> 00:17:09,599
immediate obvious

492
00:17:09,599 --> 00:17:10,880
so

493
00:17:10,880 --> 00:17:12,799
uh for background emails can contain

494
00:17:12,799 --> 00:17:14,319
calendar invites so whenever you invite

495
00:17:14,319 --> 00:17:15,760
someone for a meeting that's just a

496
00:17:15,760 --> 00:17:17,599
calendar by basically

497
00:17:17,599 --> 00:17:19,679
and if such invite was present the

498
00:17:19,679 --> 00:17:21,359
front-end javascript file was used to

499
00:17:21,359 --> 00:17:23,280
truncate the html description of the

500
00:17:23,280 --> 00:17:25,119
invite it's basically just you know

501
00:17:25,119 --> 00:17:27,119
having a fancy read more button for

502
00:17:27,119 --> 00:17:28,880
calendar invites

503
00:17:28,880 --> 00:17:31,679
and so let's look at actual code

504
00:17:31,679 --> 00:17:33,600
if the javascript file checked if there

505
00:17:33,600 --> 00:17:36,720
was invite content and if there was

506
00:17:36,720 --> 00:17:37,679
it would

507
00:17:37,679 --> 00:17:39,919
enter after checking some other headers

508
00:17:39,919 --> 00:17:42,400
which i don't know anything about

509
00:17:42,400 --> 00:17:44,240
they entered the truncate body content

510
00:17:44,240 --> 00:17:45,600
function

511
00:17:45,600 --> 00:17:48,000
and they called they passed the content

512
00:17:48,000 --> 00:17:50,559
variable to it which contains the string

513
00:17:50,559 --> 00:17:52,880
of the sanitized html data

514
00:17:52,880 --> 00:17:54,799
that is partially attacker controlled

515
00:17:54,799 --> 00:17:57,679
partially because it's been sanitized

516
00:17:57,679 --> 00:17:58,559
so

517
00:17:58,559 --> 00:18:00,240
then it within that function they

518
00:18:00,240 --> 00:18:02,640
created a wrapping div tag i'm just

519
00:18:02,640 --> 00:18:05,120
creating a and then they set the content

520
00:18:05,120 --> 00:18:07,039
to the inner html

521
00:18:07,039 --> 00:18:09,360
of this wrapping diff what this does is

522
00:18:09,360 --> 00:18:11,520
it will utilize the browser and the

523
00:18:11,520 --> 00:18:13,760
browser will then parse this html string

524
00:18:13,760 --> 00:18:16,640
and build a dom object tree from it and

525
00:18:16,640 --> 00:18:18,000
it just allows you to just kind of

526
00:18:18,000 --> 00:18:20,320
search within the dom object tree by id

527
00:18:20,320 --> 00:18:22,160
and class and do all sorts of

528
00:18:22,160 --> 00:18:24,720
modifications to it um and it's it's

529
00:18:24,720 --> 00:18:26,960
kind of neat and after all of this

530
00:18:26,960 --> 00:18:28,320
processing which we're actually not

531
00:18:28,320 --> 00:18:30,320
interested in basically they just edited

532
00:18:30,320 --> 00:18:31,840
read more button

533
00:18:31,840 --> 00:18:34,799
they returned the innerhtmlstring

534
00:18:34,799 --> 00:18:37,200
now something interesting happened here

535
00:18:37,200 --> 00:18:38,880
because setting the user controlled and

536
00:18:38,880 --> 00:18:41,760
sanitized html content to innerhtml of a

537
00:18:41,760 --> 00:18:43,120
wrapping diff

538
00:18:43,120 --> 00:18:45,520
decodes html entities in user control

539
00:18:45,520 --> 00:18:48,160
data so this is because browsers parse

540
00:18:48,160 --> 00:18:49,919
the inner html string and convert it to

541
00:18:49,919 --> 00:18:51,840
a dom object tree as i said and they

542
00:18:51,840 --> 00:18:53,360
normalize it kind of in their

543
00:18:53,360 --> 00:18:54,880
browser-specific way there are some

544
00:18:54,880 --> 00:18:57,440
standards but there's deviations and

545
00:18:57,440 --> 00:18:59,440
uh whatever so when the inner html

546
00:18:59,440 --> 00:19:01,200
string is then red the dom object tree

547
00:19:01,200 --> 00:19:03,919
is converted to html and we now have the

548
00:19:03,919 --> 00:19:06,640
normalized version which now has decoded

549
00:19:06,640 --> 00:19:08,640
entity and this does not lead to xss

550
00:19:08,640 --> 00:19:10,240
directly what is important for the next

551
00:19:10,240 --> 00:19:12,400
step and we'll show how this would look

552
00:19:12,400 --> 00:19:14,480
like in a with a real user input in just

553
00:19:14,480 --> 00:19:15,760
a second

554
00:19:15,760 --> 00:19:18,480
so the same javascript file transformed

555
00:19:18,480 --> 00:19:20,799
the normalized data further so it looks

556
00:19:20,799 --> 00:19:22,799
for form tags without an action

557
00:19:22,799 --> 00:19:25,200
attribute now the reason for this is

558
00:19:25,200 --> 00:19:27,440
that emails can contain forms

559
00:19:27,440 --> 00:19:29,360
and if you don't because they use the

560
00:19:29,360 --> 00:19:31,360
server side sanitization to throw out

561
00:19:31,360 --> 00:19:32,720
anything that could potentially be

562
00:19:32,720 --> 00:19:34,559
harmful but they couldn't actually check

563
00:19:34,559 --> 00:19:37,360
if attac if a attribute was not set so

564
00:19:37,360 --> 00:19:39,360
if a form tag doesn't contain an action

565
00:19:39,360 --> 00:19:42,000
attribute which dictates where the form

566
00:19:42,000 --> 00:19:44,000
should be submitted to it goes to this

567
00:19:44,000 --> 00:19:45,760
current page and technically you could

568
00:19:45,760 --> 00:19:48,000
forge a c surf attack

569
00:19:48,000 --> 00:19:50,320
so they would try to find all form tags

570
00:19:50,320 --> 00:19:52,240
without an action attribute and then set

571
00:19:52,240 --> 00:19:54,080
a default one just to kind of prevent

572
00:19:54,080 --> 00:19:55,760
these kinds of attacks

573
00:19:55,760 --> 00:19:57,760
so you know looking at code and please

574
00:19:57,760 --> 00:20:00,080
don't be scared because i was when i saw

575
00:20:00,080 --> 00:20:02,159
the regex here for the first time

576
00:20:02,159 --> 00:20:04,880
basically all it does is it uses regex

577
00:20:04,880 --> 00:20:08,240
to find any forms within the html which

578
00:20:08,240 --> 00:20:10,480
has now been decoded

579
00:20:10,480 --> 00:20:13,360
to find form tags and if they do

580
00:20:13,360 --> 00:20:15,679
they just insert the attribute action

581
00:20:15,679 --> 00:20:18,000
equals and i can never say this same

582
00:20:18,000 --> 00:20:20,799
host form post blocks

583
00:20:20,799 --> 00:20:23,280
action attribute just kind of killing

584
00:20:23,280 --> 00:20:25,679
all these c surf attacks

585
00:20:25,679 --> 00:20:26,640
so

586
00:20:26,640 --> 00:20:28,000
let's actually look at some code and

587
00:20:28,000 --> 00:20:30,240
let's assume the following html

588
00:20:30,240 --> 00:20:32,080
that was sent in an email

589
00:20:32,080 --> 00:20:34,159
to a victim and we can see an hr tag

590
00:20:34,159 --> 00:20:37,200
it's harmless so it's left by the uh by

591
00:20:37,200 --> 00:20:39,280
the sanitizer and there's an align

592
00:20:39,280 --> 00:20:41,520
attribute and within this line attribute

593
00:20:41,520 --> 00:20:44,159
there's a form tag and we can maybe see

594
00:20:44,159 --> 00:20:45,600
already where this is going and here's

595
00:20:45,600 --> 00:20:47,039
the second attribute the no shade

596
00:20:47,039 --> 00:20:49,200
attribute and this contains the script

597
00:20:49,200 --> 00:20:50,640
alert document

598
00:20:50,640 --> 00:20:51,840
dot domain

599
00:20:51,840 --> 00:20:53,840
and although you know it looks nice

600
00:20:53,840 --> 00:20:55,600
there's a script tag it's actually

601
00:20:55,600 --> 00:20:57,039
completely harmless if you were to

602
00:20:57,039 --> 00:20:58,880
render this in your browser because the

603
00:20:58,880 --> 00:21:01,200
form and script tag are encapsulated in

604
00:21:01,200 --> 00:21:03,039
double quotes and they're interpreted as

605
00:21:03,039 --> 00:21:04,960
an attribute value instead of

606
00:21:04,960 --> 00:21:06,720
tags

607
00:21:06,720 --> 00:21:09,360
so after the sanitization step

608
00:21:09,360 --> 00:21:10,720
even the ankle brackets have been

609
00:21:10,720 --> 00:21:12,240
escaped

610
00:21:12,240 --> 00:21:15,280
and this is even more harmless however

611
00:21:15,280 --> 00:21:18,080
now we can force the browser to decode

612
00:21:18,080 --> 00:21:20,080
these entities again by setting the

613
00:21:20,080 --> 00:21:22,080
inner html string

614
00:21:22,080 --> 00:21:23,840
kind of leading to a bypass of this

615
00:21:23,840 --> 00:21:26,080
encoding and i said before this does not

616
00:21:26,080 --> 00:21:28,240
lead to xss directly but it's important

617
00:21:28,240 --> 00:21:30,480
for the next step because now the rig x

618
00:21:30,480 --> 00:21:31,840
that's looking for form tech can

619
00:21:31,840 --> 00:21:34,000
actually max and match the form text

620
00:21:34,000 --> 00:21:35,760
within the align attribute

621
00:21:35,760 --> 00:21:38,080
and what this means is the action

622
00:21:38,080 --> 00:21:39,919
attribute default action attribute is

623
00:21:39,919 --> 00:21:42,559
inserted within the align attribute and

624
00:21:42,559 --> 00:21:45,520
this kind of leads to an imbalance of

625
00:21:45,520 --> 00:21:49,440
double quotes within the hr tech meaning

626
00:21:49,440 --> 00:21:51,280
the script alert is now actually

627
00:21:51,280 --> 00:21:53,200
interpreted as an element instead of an

628
00:21:53,200 --> 00:21:54,880
attribute string

629
00:21:54,880 --> 00:21:56,880
which then leads to xss when it's viewed

630
00:21:56,880 --> 00:21:58,559
to viewed by

631
00:21:58,559 --> 00:22:00,400
a victim

632
00:22:00,400 --> 00:22:02,960
so to summarize the zimmer vulnerability

633
00:22:02,960 --> 00:22:04,400
here's what happened when looking at the

634
00:22:04,400 --> 00:22:06,880
code through the lens of our model

635
00:22:06,880 --> 00:22:08,640
first the user input is sanitized on the

636
00:22:08,640 --> 00:22:11,600
server side and then it was normalized

637
00:22:11,600 --> 00:22:14,480
by the inner html normalization

638
00:22:14,480 --> 00:22:16,559
and afterwards the form replacements

639
00:22:16,559 --> 00:22:19,039
were kind of transformations on the code

640
00:22:19,039 --> 00:22:20,880
and finally it was used and was

641
00:22:20,880 --> 00:22:24,720
displayed to the user leading to xss

642
00:22:25,120 --> 00:22:27,840
okay so um let's look at the next case

643
00:22:27,840 --> 00:22:29,919
study uh which is wordpress

644
00:22:29,919 --> 00:22:32,640
and yesterday when i checked just before

645
00:22:32,640 --> 00:22:35,440
updating the slides um the download page

646
00:22:35,440 --> 00:22:37,200
of wordpress says that

647
00:22:37,200 --> 00:22:40,480
43 of websites on the internet use it i

648
00:22:40,480 --> 00:22:41,679
mean i don't know where they have their

649
00:22:41,679 --> 00:22:43,679
number from but it's the on download

650
00:22:43,679 --> 00:22:44,559
page

651
00:22:44,559 --> 00:22:47,360
um and it has a common form enabled by

652
00:22:47,360 --> 00:22:48,960
default so any

653
00:22:48,960 --> 00:22:51,120
unauthenticated visitor can just create

654
00:22:51,120 --> 00:22:53,280
a comment and this comment can contain

655
00:22:53,280 --> 00:22:56,799
raw html code and um we finally ended up

656
00:22:56,799 --> 00:22:58,400
discovering a chain of vulnerabilities

657
00:22:58,400 --> 00:23:00,159
leading to c serve to rc impact in

658
00:23:00,159 --> 00:23:02,240
default settings and i mentioned this

659
00:23:02,240 --> 00:23:03,200
earlier

660
00:23:03,200 --> 00:23:05,039
at the same same site cookies weren't in

661
00:23:05,039 --> 00:23:08,720
four so this would actually work

662
00:23:08,720 --> 00:23:09,600
so

663
00:23:09,600 --> 00:23:11,679
i mentioned a common form before and

664
00:23:11,679 --> 00:23:13,440
they were not protected by a nonce and

665
00:23:13,440 --> 00:23:15,520
this will get important later and they

666
00:23:15,520 --> 00:23:17,919
can contain raw html code which becomes

667
00:23:17,919 --> 00:23:19,360
sanitized

668
00:23:19,360 --> 00:23:21,200
and they have actually very strict list

669
00:23:21,200 --> 00:23:23,520
of tags and attributes that are allowed

670
00:23:23,520 --> 00:23:25,039
so it's extremely limited you can make

671
00:23:25,039 --> 00:23:28,559
your text bold you can uh you know

672
00:23:28,559 --> 00:23:30,480
make the text cursive or underline it or

673
00:23:30,480 --> 00:23:32,080
you can include links but that's about

674
00:23:32,080 --> 00:23:35,200
it however for admins this sanitization

675
00:23:35,200 --> 00:23:36,960
list is a bit relaxed you can include

676
00:23:36,960 --> 00:23:38,400
some more

677
00:23:38,400 --> 00:23:41,039
tags like images and tables but it's

678
00:23:41,039 --> 00:23:42,400
still secure

679
00:23:42,400 --> 00:23:45,440
at least that we didn't find a bypass

680
00:23:45,440 --> 00:23:47,919
so the wordpress html sanitizer has been

681
00:23:47,919 --> 00:23:50,000
hardened for years and i think everyone

682
00:23:50,000 --> 00:23:51,360
tried to break it before and i

683
00:23:51,360 --> 00:23:53,440
definitely didn't manage it

684
00:23:53,440 --> 00:23:55,360
so we were kind of hoping that maybe

685
00:23:55,360 --> 00:23:57,440
there's a place where we can apply our

686
00:23:57,440 --> 00:23:59,919
little trick again and it uses an allow

687
00:23:59,919 --> 00:24:01,760
list for html text attributes one for

688
00:24:01,760 --> 00:24:03,840
admins one from unauthenticated users

689
00:24:03,840 --> 00:24:05,760
and we did not discover bypass for the

690
00:24:05,760 --> 00:24:08,240
sanitizer so look for a place where it

691
00:24:08,240 --> 00:24:09,679
was modified

692
00:24:09,679 --> 00:24:12,240
and we found the transformation of the

693
00:24:12,240 --> 00:24:16,159
comment where a tags like meaning links

694
00:24:16,159 --> 00:24:18,320
are actually transformed so for seo

695
00:24:18,320 --> 00:24:20,400
purposes you want to make sure that a

696
00:24:20,400 --> 00:24:22,960
rel attribute is present um this kind of

697
00:24:22,960 --> 00:24:24,960
just gives search engine uh some hints

698
00:24:24,960 --> 00:24:27,120
about how to parse the page and just

699
00:24:27,120 --> 00:24:29,039
kind of improves your score so that you

700
00:24:29,039 --> 00:24:31,279
were shown on a higher um

701
00:24:31,279 --> 00:24:34,320
entry on google results for example

702
00:24:34,320 --> 00:24:36,159
and only administrators could set this

703
00:24:36,159 --> 00:24:37,679
rel attribute

704
00:24:37,679 --> 00:24:40,559
an authentic unauthenticated user can't

705
00:24:40,559 --> 00:24:43,200
um which is fine because we can just

706
00:24:43,200 --> 00:24:45,200
c-serve the comment form and create a

707
00:24:45,200 --> 00:24:47,919
comment containing the url attribute

708
00:24:47,919 --> 00:24:50,400
and wordpress parse the a tags

709
00:24:50,400 --> 00:24:52,400
which have already been sanitized so all

710
00:24:52,400 --> 00:24:54,559
evil attributes have been thrown out and

711
00:24:54,559 --> 00:24:56,799
they created kind of a key value array

712
00:24:56,799 --> 00:24:59,360
or a map with all the attribute values

713
00:24:59,360 --> 00:25:01,200
and the a tags are then constructed back

714
00:25:01,200 --> 00:25:02,720
together after processing the rel

715
00:25:02,720 --> 00:25:05,520
attribute so let's look at some code

716
00:25:05,520 --> 00:25:07,520
and what we can see here is the key

717
00:25:07,520 --> 00:25:10,799
value map of attributes in the ads

718
00:25:10,799 --> 00:25:13,279
array and on the first line

719
00:25:13,279 --> 00:25:15,120
it is checked if it's empty or if the

720
00:25:15,120 --> 00:25:17,679
relative exists and if it does

721
00:25:17,679 --> 00:25:19,679
it will process it and again this isn't

722
00:25:19,679 --> 00:25:21,520
actually relevant to us what we're

723
00:25:21,520 --> 00:25:22,799
trying to do here

724
00:25:22,799 --> 00:25:25,120
and then the attribute value string

725
00:25:25,120 --> 00:25:26,640
needs to be constructed back together so

726
00:25:26,640 --> 00:25:28,000
you would have something like title

727
00:25:28,000 --> 00:25:30,559
equals double quote some value blah blah

728
00:25:30,559 --> 00:25:32,799
blah and then you have the href equals

729
00:25:32,799 --> 00:25:34,400
something and this needs to be

730
00:25:34,400 --> 00:25:35,679
constructed back together so they

731
00:25:35,679 --> 00:25:37,360
iterated over all the attributes that

732
00:25:37,360 --> 00:25:39,200
were previously parsed

733
00:25:39,200 --> 00:25:41,760
and then they set the name

734
00:25:41,760 --> 00:25:42,960
equals

735
00:25:42,960 --> 00:25:45,600
double quote the value double quote and

736
00:25:45,600 --> 00:25:47,279
concatenate everything back together

737
00:25:47,279 --> 00:25:48,559
note there's no

738
00:25:48,559 --> 00:25:51,679
encoding here and then they just return

739
00:25:51,679 --> 00:25:53,440
the string again and this is kind of

740
00:25:53,440 --> 00:25:54,640
used

741
00:25:54,640 --> 00:25:56,880
to sanitize comments to transform

742
00:25:56,880 --> 00:25:58,720
comments so let's assume the following

743
00:25:58,720 --> 00:26:00,640
input and some people might already know

744
00:26:00,640 --> 00:26:03,120
where this is going we have a tag here

745
00:26:03,120 --> 00:26:05,919
with a title and it's encapsulated using

746
00:26:05,919 --> 00:26:08,320
single quotes and there's a xss and

747
00:26:08,320 --> 00:26:10,400
there's a double quote

748
00:26:10,400 --> 00:26:12,159
and then there's an onmouseover equals

749
00:26:12,159 --> 00:26:13,679
evil code string

750
00:26:13,679 --> 00:26:15,919
and an id another double quote and the

751
00:26:15,919 --> 00:26:18,080
final single quote and again

752
00:26:18,080 --> 00:26:19,440
it would be nice if we could just

753
00:26:19,440 --> 00:26:21,919
include the onmos over event handler on

754
00:26:21,919 --> 00:26:24,080
the raw html but we can't because it's

755
00:26:24,080 --> 00:26:25,440
kicked out

756
00:26:25,440 --> 00:26:26,480
and

757
00:26:26,480 --> 00:26:27,520
however

758
00:26:27,520 --> 00:26:29,120
you know there might be a way and then

759
00:26:29,120 --> 00:26:31,760
there's also the url attribute set

760
00:26:31,760 --> 00:26:34,480
now we saw just in a slide before how

761
00:26:34,480 --> 00:26:36,320
everything is back concatenated back

762
00:26:36,320 --> 00:26:38,880
together using double quotes so after

763
00:26:38,880 --> 00:26:40,640
the concatenation

764
00:26:40,640 --> 00:26:41,520
or

765
00:26:41,520 --> 00:26:43,279
input would look like the following

766
00:26:43,279 --> 00:26:45,919
where the rel no follow tag is set after

767
00:26:45,919 --> 00:26:47,919
it's been processed and then suddenly

768
00:26:47,919 --> 00:26:49,760
you have the title attribute

769
00:26:49,760 --> 00:26:52,080
encapsulated in double quotes and

770
00:26:52,080 --> 00:26:54,480
because nothing was escaped we can now

771
00:26:54,480 --> 00:26:56,640
actually inject the almost over event

772
00:26:56,640 --> 00:26:58,640
handler and it's now interpreted as an

773
00:26:58,640 --> 00:27:01,039
attribute instead of a string

774
00:27:01,039 --> 00:27:03,600
leading to xss when admin would hover

775
00:27:03,600 --> 00:27:05,440
over the mouse

776
00:27:05,440 --> 00:27:07,520
whatever use their mouse to hover over

777
00:27:07,520 --> 00:27:09,360
the a tag and we could also inject this

778
00:27:09,360 --> 00:27:11,679
dial tag and make the link like an

779
00:27:11,679 --> 00:27:14,080
invisible overlay over the entire page

780
00:27:14,080 --> 00:27:17,520
so basically it triggers instantly

781
00:27:17,520 --> 00:27:19,120
and to summarize

782
00:27:19,120 --> 00:27:21,360
with this bug its input was again

783
00:27:21,360 --> 00:27:23,840
escaped and afterwards transformed and

784
00:27:23,840 --> 00:27:25,840
used and that's all we were doing

785
00:27:25,840 --> 00:27:27,919
basically we're just looking for places

786
00:27:27,919 --> 00:27:30,080
where things were transformed after it

787
00:27:30,080 --> 00:27:32,480
was sanitized so i prepared a little

788
00:27:32,480 --> 00:27:35,799
demo again

789
00:27:37,279 --> 00:27:39,440
okay so

790
00:27:39,440 --> 00:27:42,159
on the left side we'll have the attacker

791
00:27:42,159 --> 00:27:43,760
launching their little exploit server

792
00:27:43,760 --> 00:27:46,159
and on the right side we have a

793
00:27:46,159 --> 00:27:47,919
wordpress page where an admin will log

794
00:27:47,919 --> 00:27:48,799
in

795
00:27:48,799 --> 00:27:50,799
so we're starting an exploit server on

796
00:27:50,799 --> 00:27:52,960
port 1337 of course

797
00:27:52,960 --> 00:27:55,520
and then we want to run the command id

798
00:27:55,520 --> 00:27:58,799
on the targeted wordpress server

799
00:27:58,799 --> 00:28:03,120
and then we have the admin logging in

800
00:28:03,120 --> 00:28:04,799
and now they see a new comment has been

801
00:28:04,799 --> 00:28:08,240
created and it says hey admin i

802
00:28:08,240 --> 00:28:09,679
thought this blog post was really great

803
00:28:09,679 --> 00:28:11,360
and here's an interesting url i left

804
00:28:11,360 --> 00:28:13,840
some criticism here and of course

805
00:28:13,840 --> 00:28:15,520
your egos thinks now and you want to see

806
00:28:15,520 --> 00:28:17,039
what someone had to say about your blog

807
00:28:17,039 --> 00:28:20,240
post so you click on the link

808
00:28:24,240 --> 00:28:25,840
and now the victim is kind of just

809
00:28:25,840 --> 00:28:28,080
seeing the insomniac logo and just

810
00:28:28,080 --> 00:28:30,159
viewing but on the left side we can see

811
00:28:30,159 --> 00:28:31,520
that a connection was made to the

812
00:28:31,520 --> 00:28:33,760
exploit server and now we're create

813
00:28:33,760 --> 00:28:35,520
we're exploiting the c server to create

814
00:28:35,520 --> 00:28:38,600
the comment

815
00:28:45,120 --> 00:28:46,640
now that the comment was created

816
00:28:46,640 --> 00:28:48,720
containing the xss payload we can

817
00:28:48,720 --> 00:28:50,799
actually display it on the same page in

818
00:28:50,799 --> 00:28:52,960
another iframe and make the iframe

819
00:28:52,960 --> 00:28:55,440
follow around the victim's mouse

820
00:28:55,440 --> 00:28:56,880
just so that the almost over event

821
00:28:56,880 --> 00:28:58,720
handler would trigger

822
00:28:58,720 --> 00:29:00,399
and then we're checking if the xss

823
00:29:00,399 --> 00:29:02,720
worked and it did we got a connection

824
00:29:02,720 --> 00:29:04,880
and now we're uploading a shell so in

825
00:29:04,880 --> 00:29:07,360
wordpress you can just upload a shell as

826
00:29:07,360 --> 00:29:08,799
an admin basically because you can

827
00:29:08,799 --> 00:29:11,279
upload plugins containing php code and

828
00:29:11,279 --> 00:29:13,440
then we see the output of the id command

829
00:29:13,440 --> 00:29:16,720
here and we have rc

830
00:29:17,290 --> 00:29:23,440
[Applause]

831
00:29:23,440 --> 00:29:24,320
okay

832
00:29:24,320 --> 00:29:26,159
so let's get to our final case study and

833
00:29:26,159 --> 00:29:28,480
uh just uh this is a quick one and then

834
00:29:28,480 --> 00:29:30,720
afterwards we'll summarize and um we'll

835
00:29:30,720 --> 00:29:32,399
be done so

836
00:29:32,399 --> 00:29:34,880
uh magento 2 um we said earlier it's an

837
00:29:34,880 --> 00:29:36,640
e-commerce solution that is used by

838
00:29:36,640 --> 00:29:38,640
thousands of companies to handle

839
00:29:38,640 --> 00:29:40,159
hundreds of billions of dollars in

840
00:29:40,159 --> 00:29:42,000
annual transactions and there's some

841
00:29:42,000 --> 00:29:43,120
people here in the audience that are

842
00:29:43,120 --> 00:29:46,080
really well worst in magento and it's a

843
00:29:46,080 --> 00:29:48,240
popular target hacking group motivated

844
00:29:48,240 --> 00:29:50,399
by financial gain

845
00:29:50,399 --> 00:29:52,080
for example mage card has been observed

846
00:29:52,080 --> 00:29:54,080
to utilize zero days against magento 2

847
00:29:54,080 --> 00:29:55,360
stores

848
00:29:55,360 --> 00:29:57,440
so it's a popular target

849
00:29:57,440 --> 00:29:58,399
and

850
00:29:58,399 --> 00:29:59,600
we looked at

851
00:29:59,600 --> 00:30:01,840
a post off rce and low privileged

852
00:30:01,840 --> 00:30:04,320
employees could create a site map xml

853
00:30:04,320 --> 00:30:05,279
file

854
00:30:05,279 --> 00:30:06,960
that's just kind of another hint for

855
00:30:06,960 --> 00:30:09,520
your search engines and how to parse the

856
00:30:09,520 --> 00:30:11,360
site and you know just to index some

857
00:30:11,360 --> 00:30:13,440
interesting pages

858
00:30:13,440 --> 00:30:15,279
and find names had to end with the dot

859
00:30:15,279 --> 00:30:17,200
xml extension so you could control the

860
00:30:17,200 --> 00:30:19,279
file name could control the file name

861
00:30:19,279 --> 00:30:21,520
but there was there had to be xml

862
00:30:21,520 --> 00:30:22,640
extension

863
00:30:22,640 --> 00:30:24,240
and the file name and content were

864
00:30:24,240 --> 00:30:26,799
stored in the database and when desired

865
00:30:26,799 --> 00:30:28,799
the sitemap file could then be generated

866
00:30:28,799 --> 00:30:31,039
and written to disk and the file name

867
00:30:31,039 --> 00:30:33,279
check was secure unfortunately for us as

868
00:30:33,279 --> 00:30:34,399
attackers

869
00:30:34,399 --> 00:30:37,200
and however again we looked at the place

870
00:30:37,200 --> 00:30:39,919
where stuff is uh normalized afterwards

871
00:30:39,919 --> 00:30:41,840
and the database column for the file

872
00:30:41,840 --> 00:30:44,480
name was limited to 32 characters

873
00:30:44,480 --> 00:30:46,640
um and there was no length check however

874
00:30:46,640 --> 00:30:48,480
the database driver would truncate to

875
00:30:48,480 --> 00:30:49,520
find name

876
00:30:49,520 --> 00:30:52,159
32 characters if it was too long so what

877
00:30:52,159 --> 00:30:54,240
this means in practice is we can create

878
00:30:54,240 --> 00:30:56,159
a file name like the first one which is

879
00:30:56,159 --> 00:30:58,320
36 characters long but ends with the dot

880
00:30:58,320 --> 00:31:01,360
xml extension and thus checks you know

881
00:31:01,360 --> 00:31:04,080
it passes the check by magento however

882
00:31:04,080 --> 00:31:06,000
after it's been stored to the database

883
00:31:06,000 --> 00:31:09,200
uh it turns into a dot php file and we

884
00:31:09,200 --> 00:31:11,679
can just ask magento to generate the

885
00:31:11,679 --> 00:31:13,600
file then write it to disk and then we

886
00:31:13,600 --> 00:31:15,519
have rce because we have uploaded a

887
00:31:15,519 --> 00:31:17,120
shell

888
00:31:17,120 --> 00:31:19,440
so that's another example of something

889
00:31:19,440 --> 00:31:21,760
being normalized and actually being

890
00:31:21,760 --> 00:31:24,240
implicitly normalized um because you

891
00:31:24,240 --> 00:31:26,640
know the database mysql just does it

892
00:31:26,640 --> 00:31:28,480
without you know you ever knowing that

893
00:31:28,480 --> 00:31:31,120
it trunk was truncated and

894
00:31:31,120 --> 00:31:33,039
the developers technically didn't do

895
00:31:33,039 --> 00:31:36,159
anything wrong um it was kind of uh you

896
00:31:36,159 --> 00:31:36,960
know

897
00:31:36,960 --> 00:31:39,120
just uh unknown side effect uh where

898
00:31:39,120 --> 00:31:40,880
normalization took place of validated

899
00:31:40,880 --> 00:31:43,200
data which just goes to show whenever

900
00:31:43,200 --> 00:31:45,279
you have data that's sanitized it's not

901
00:31:45,279 --> 00:31:47,440
you know it's not time to stop looking

902
00:31:47,440 --> 00:31:49,919
um there might be a way to bypass

903
00:31:49,919 --> 00:31:54,640
and um yeah so we have another demo um

904
00:31:54,880 --> 00:31:57,120
so this one we use a kind of a rand

905
00:31:57,120 --> 00:31:58,080
fancy

906
00:31:58,080 --> 00:31:59,600
rip shell what we're seeing here is the

907
00:31:59,600 --> 00:32:02,320
attacker being on a targeted store and

908
00:32:02,320 --> 00:32:04,240
using some javascript

909
00:32:04,240 --> 00:32:07,360
uh to launch a fancy rip shell just for

910
00:32:07,360 --> 00:32:10,000
dramatic purposes um i used to work for

911
00:32:10,000 --> 00:32:12,159
rips which was required by sono source

912
00:32:12,159 --> 00:32:14,000
just for context

913
00:32:14,000 --> 00:32:16,960
so they now and i mentioned earlier we

914
00:32:16,960 --> 00:32:19,600
found the post uh pre-alph stored xss

915
00:32:19,600 --> 00:32:21,919
into the admin panel so in this exploit

916
00:32:21,919 --> 00:32:23,519
chain video the attacker is

917
00:32:23,519 --> 00:32:26,000
unauthenticated and then the register

918
00:32:26,000 --> 00:32:28,960
account a customer account on a website

919
00:32:28,960 --> 00:32:30,960
and they create an order cancel the

920
00:32:30,960 --> 00:32:32,399
order

921
00:32:32,399 --> 00:32:34,799
and within the order cancellation notice

922
00:32:34,799 --> 00:32:37,360
there was the xss payload which actually

923
00:32:37,360 --> 00:32:39,760
worked because of a similar trick again

924
00:32:39,760 --> 00:32:42,399
but i wanted to keep this short um and

925
00:32:42,399 --> 00:32:44,240
now we're waiting for an administrator

926
00:32:44,240 --> 00:32:47,279
or any employee to view uh the cancelled

927
00:32:47,279 --> 00:32:48,559
order and

928
00:32:48,559 --> 00:32:50,000
in the real world this could take days

929
00:32:50,000 --> 00:32:53,120
or even weeks um but just for dramatic

930
00:32:53,120 --> 00:32:54,799
purposes for the video this will happen

931
00:32:54,799 --> 00:32:57,600
instantly where the administrator views

932
00:32:57,600 --> 00:32:58,559
the

933
00:32:58,559 --> 00:33:01,039
order and as soon as they do the xss

934
00:33:01,039 --> 00:33:03,039
pillow triggers and executes

935
00:33:03,039 --> 00:33:05,039
the rce exploit we just demonstrated and

936
00:33:05,039 --> 00:33:08,799
now we have a shell on the magento store

937
00:33:09,279 --> 00:33:11,020
so yeah

938
00:33:11,020 --> 00:33:17,039
[Applause]

939
00:33:17,039 --> 00:33:19,279
okay

940
00:33:20,640 --> 00:33:21,679
so

941
00:33:21,679 --> 00:33:23,120
just to summarize

942
00:33:23,120 --> 00:33:25,039
abstracting vulnerabilities helps find

943
00:33:25,039 --> 00:33:27,039
bugs helps to find bugs in highly

944
00:33:27,039 --> 00:33:28,880
complex and large code bases because we

945
00:33:28,880 --> 00:33:30,320
want to have something we want to focus

946
00:33:30,320 --> 00:33:31,200
on

947
00:33:31,200 --> 00:33:33,279
and abstraction also helps keeping the

948
00:33:33,279 --> 00:33:35,120
big picture in mind when auditing

949
00:33:35,120 --> 00:33:36,159
projects

950
00:33:36,159 --> 00:33:38,880
and yeah just my personal tip is my my

951
00:33:38,880 --> 00:33:40,320
little go-to trick

952
00:33:40,320 --> 00:33:42,399
nowadays so whenever um there's

953
00:33:42,399 --> 00:33:44,720
something sanitized i don't stop looking

954
00:33:44,720 --> 00:33:46,640
um i just look for a place where this is

955
00:33:46,640 --> 00:33:48,559
somehow modified

956
00:33:48,559 --> 00:33:51,200
uh the data and then sanitization for

957
00:33:51,200 --> 00:33:52,880
developers should always be the last

958
00:33:52,880 --> 00:33:55,519
step um and never do anything with your

959
00:33:55,519 --> 00:33:57,919
data after it's been sanitized

960
00:33:57,919 --> 00:33:59,840
except for using it of course

961
00:33:59,840 --> 00:34:00,799
um

962
00:34:00,799 --> 00:34:02,799
and then blog posts um you know you can

963
00:34:02,799 --> 00:34:04,399
see that we can read the details about

964
00:34:04,399 --> 00:34:06,399
the magento xss on our blog

965
00:34:06,399 --> 00:34:08,960
it's block.sonasource.com and we would

966
00:34:08,960 --> 00:34:10,560
love your help with sonar source to find

967
00:34:10,560 --> 00:34:13,040
bucks so if you want to join us and do

968
00:34:13,040 --> 00:34:15,599
similar things we're hiring and yeah you

969
00:34:15,599 --> 00:34:17,280
can reach out to me on twitter ask me

970
00:34:17,280 --> 00:34:19,918
any questions or if you ever find a bug

971
00:34:19,918 --> 00:34:21,839
with this pattern or have found box with

972
00:34:21,839 --> 00:34:23,599
this pattern would be really cool to

973
00:34:23,599 --> 00:34:26,079
hear and read your write up and yeah

974
00:34:26,079 --> 00:34:28,000
thank you very much

975
00:34:28,000 --> 00:34:28,879
now

976
00:34:28,879 --> 00:34:30,739
if there are any questions

977
00:34:30,739 --> 00:34:40,110
[Applause]

978
00:34:47,199 --> 00:34:49,520
uh hello thanks for the great talk

979
00:34:49,520 --> 00:34:51,440
uh so i was wondering this methodology

980
00:34:51,440 --> 00:34:52,320
that you

981
00:34:52,320 --> 00:34:53,489
show in this uh

982
00:34:53,489 --> 00:34:54,879
[Music]

983
00:34:54,879 --> 00:34:56,159
class where

984
00:34:56,159 --> 00:34:59,119
the like um unsafe things happen after

985
00:34:59,119 --> 00:35:00,560
the sanitization

986
00:35:00,560 --> 00:35:03,280
it seems that it could be

987
00:35:03,280 --> 00:35:06,160
found by static analysis maybe

988
00:35:06,160 --> 00:35:08,480
with all the usual caveats about static

989
00:35:08,480 --> 00:35:10,720
analysis have you seen or done any

990
00:35:10,720 --> 00:35:13,599
attempts of uh optimization

991
00:35:13,599 --> 00:35:15,280
with this regard

992
00:35:15,280 --> 00:35:16,960
um so

993
00:35:16,960 --> 00:35:18,960
i i think that rips detected some

994
00:35:18,960 --> 00:35:20,640
instances in the case or old static

995
00:35:20,640 --> 00:35:22,400
analyzer because you can just kind of

996
00:35:22,400 --> 00:35:24,320
check okay it's my user input here and

997
00:35:24,320 --> 00:35:25,839
what happens with it and then you can

998
00:35:25,839 --> 00:35:28,000
see what this transformation kind of

999
00:35:28,000 --> 00:35:30,160
make exploitation possible again so it's

1000
00:35:30,160 --> 00:35:31,680
definitely possible you would just have

1001
00:35:31,680 --> 00:35:34,320
to i'm personally not a engineer for

1002
00:35:34,320 --> 00:35:36,800
aesthetic analysis so i'm just

1003
00:35:36,800 --> 00:35:38,800
way out of my water here but in general

1004
00:35:38,800 --> 00:35:40,960
yeah you can detect um you can mark

1005
00:35:40,960 --> 00:35:43,040
something as sanitized or validated and

1006
00:35:43,040 --> 00:35:44,720
then you can keep following the data

1007
00:35:44,720 --> 00:35:46,880
flow and just check if it's modified in

1008
00:35:46,880 --> 00:35:48,880
any way and then just raise a warning or

1009
00:35:48,880 --> 00:35:50,480
something

1010
00:35:50,480 --> 00:35:52,400
yeah because currently it's like

1011
00:35:52,400 --> 00:35:55,040
electric analysis like where when the

1012
00:35:55,040 --> 00:35:57,599
data is assigned to sanitized it's after

1013
00:35:57,599 --> 00:35:59,920
that is considered saved

1014
00:35:59,920 --> 00:36:03,359
usually and no like no sync analysis is

1015
00:36:03,359 --> 00:36:06,079
done so i was wondering if you know of

1016
00:36:06,079 --> 00:36:08,560
any products that uh that

1017
00:36:08,560 --> 00:36:09,280
go

1018
00:36:09,280 --> 00:36:12,400
with your like solution things yeah

1019
00:36:12,400 --> 00:36:15,040
thank you for your question

1020
00:36:15,040 --> 00:36:18,079
is there any other question

1021
00:36:20,560 --> 00:36:21,920
no sir

1022
00:36:21,920 --> 00:36:22,800
thank you very much for your

1023
00:36:22,800 --> 00:36:25,800
presentation

