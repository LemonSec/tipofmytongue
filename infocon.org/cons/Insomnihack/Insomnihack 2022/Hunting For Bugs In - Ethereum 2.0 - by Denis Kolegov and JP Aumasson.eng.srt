1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:14,160 --> 00:00:16,960
so hello insomniac um happy to see so

3
00:00:16,960 --> 00:00:18,880
many people in the room i think it's

4
00:00:18,880 --> 00:00:21,119
because security folks love blockchain

5
00:00:21,119 --> 00:00:22,080
right

6
00:00:22,080 --> 00:00:23,039
uh

7
00:00:23,039 --> 00:00:24,640
how many of you are running a blockchain

8
00:00:24,640 --> 00:00:27,920
node or validator

9
00:00:28,320 --> 00:00:31,599
not so many okay well i guess at least

10
00:00:31,599 --> 00:00:34,000
you've heard of ethereum so as as you

11
00:00:34,000 --> 00:00:36,000
can see i'm alone here my friend denise

12
00:00:36,000 --> 00:00:38,000
could not make it because he he lives in

13
00:00:38,000 --> 00:00:40,239
tomsk in siberia in russia and because

14
00:00:40,239 --> 00:00:42,320
of the recent event he had to change his

15
00:00:42,320 --> 00:00:45,039
plans and he could not be here today

16
00:00:45,039 --> 00:00:45,920
um

17
00:00:45,920 --> 00:00:47,600
so it's called hunting for bugs in

18
00:00:47,600 --> 00:00:49,760
ethereum 2.0

19
00:00:49,760 --> 00:00:51,039
but if you're following closely the

20
00:00:51,039 --> 00:00:52,480
interim

21
00:00:52,480 --> 00:00:53,440
news

22
00:00:53,440 --> 00:00:54,960
you know that we should call it just

23
00:00:54,960 --> 00:00:57,680
ethereum the term 2.0 is obsolete i will

24
00:00:57,680 --> 00:00:59,840
explain why a bit later

25
00:00:59,840 --> 00:01:02,160
and more specifically i will

26
00:01:02,160 --> 00:01:06,080
talk of hunting bugs in ethereum clients

27
00:01:06,080 --> 00:01:07,119
well

28
00:01:07,119 --> 00:01:10,240
clients because as you will notice later

29
00:01:10,240 --> 00:01:12,159
they're not only clients they're more

30
00:01:12,159 --> 00:01:14,000
like servers but they're called clients

31
00:01:14,000 --> 00:01:15,119
anyway

32
00:01:15,119 --> 00:01:17,759
so the context of this work is um

33
00:01:17,759 --> 00:01:18,560
uh

34
00:01:18,560 --> 00:01:21,119
a grant from the eastern foundation that

35
00:01:21,119 --> 00:01:23,360
we received jointly with uh denis

36
00:01:23,360 --> 00:01:26,400
koligov and evangelia statopoulou from

37
00:01:26,400 --> 00:01:28,400
university college london

38
00:01:28,400 --> 00:01:30,320
uh we published a paper

39
00:01:30,320 --> 00:01:32,799
in october that is quite long so i will

40
00:01:32,799 --> 00:01:34,000
summarize it so that you don't have to

41
00:01:34,000 --> 00:01:35,360
read the paper

42
00:01:35,360 --> 00:01:37,920
so what is the room uh if you've lived

43
00:01:37,920 --> 00:01:39,759
under a rock for the last three years

44
00:01:39,759 --> 00:01:42,000
last five years it's a blockchain

45
00:01:42,000 --> 00:01:43,840
platform so what is a blockchain

46
00:01:43,840 --> 00:01:45,600
i'm not going to explain it

47
00:01:45,600 --> 00:01:46,560
uh

48
00:01:46,560 --> 00:01:49,280
it's kind of a database but

49
00:01:49,280 --> 00:01:51,759
slower

50
00:01:51,840 --> 00:01:54,640
and run by many sketchy people uh but

51
00:01:54,640 --> 00:01:56,479
it's the future you know

52
00:01:56,479 --> 00:01:58,640
and it's the the main domain uh

53
00:01:58,640 --> 00:02:00,399
blockchain platform as opposed to the

54
00:02:00,399 --> 00:02:02,560
main cryptocurrency which arguably is

55
00:02:02,560 --> 00:02:05,119
bitcoin according to some metrics and

56
00:02:05,119 --> 00:02:06,479
ethereum is the main platform that

57
00:02:06,479 --> 00:02:08,399
people use to create their own tokens

58
00:02:08,399 --> 00:02:11,120
such as es20 tokens but also use it to

59
00:02:11,120 --> 00:02:13,520
create decentralized applications also

60
00:02:13,520 --> 00:02:15,920
known as dapps

61
00:02:15,920 --> 00:02:19,440
and one specific class of dapps is a dab

62
00:02:19,440 --> 00:02:21,599
that serve for decentralized finance

63
00:02:21,599 --> 00:02:23,040
applications so the

64
00:02:23,040 --> 00:02:25,120
alternative to a centralized exchange

65
00:02:25,120 --> 00:02:26,879
platform such as kraken

66
00:02:26,879 --> 00:02:30,239
uh in defined markets it's a way to buy

67
00:02:30,239 --> 00:02:32,160
and sell tokens

68
00:02:32,160 --> 00:02:34,160
which may or may not have some value but

69
00:02:34,160 --> 00:02:37,280
what do logic is run purely on chain via

70
00:02:37,280 --> 00:02:40,400
smart contract i suppose um to a

71
00:02:40,400 --> 00:02:42,160
centralized computer so in the

72
00:02:42,160 --> 00:02:44,560
blockchain world centralize bad

73
00:02:44,560 --> 00:02:46,400
decentralize good you don't need to

74
00:02:46,400 --> 00:02:47,920
remember you don't need to think that

75
00:02:47,920 --> 00:02:49,120
much

76
00:02:49,120 --> 00:02:51,760
um and there's a big problem with

77
00:02:51,760 --> 00:02:53,200
ethereum as you can see here people

78
00:02:53,200 --> 00:02:55,040
started complaining because ethereum was

79
00:02:55,040 --> 00:02:56,480
so successful

80
00:02:56,480 --> 00:02:58,720
that it became quite slow

81
00:02:58,720 --> 00:03:00,720
and inefficient so high gas fee so the

82
00:03:00,720 --> 00:03:02,959
gas is the price you pay to

83
00:03:02,959 --> 00:03:04,480
send your transaction

84
00:03:04,480 --> 00:03:06,720
slow and congested a lot of transactions

85
00:03:06,720 --> 00:03:08,640
fail and people lose money this is not

86
00:03:08,640 --> 00:03:09,760
the future

87
00:03:09,760 --> 00:03:11,200
traditional finance is probably laughing

88
00:03:11,200 --> 00:03:12,159
at us

89
00:03:12,159 --> 00:03:14,239
we need other blockchains

90
00:03:14,239 --> 00:03:16,159
so ethereum needs to

91
00:03:16,159 --> 00:03:18,640
do something to scale so

92
00:03:18,640 --> 00:03:20,720
scale means being capable of managing

93
00:03:20,720 --> 00:03:22,080
more transaction

94
00:03:22,080 --> 00:03:23,360
and the problem is that to manage

95
00:03:23,360 --> 00:03:25,200
transaction to process transactions you

96
00:03:25,200 --> 00:03:27,040
need two things you need processing you

97
00:03:27,040 --> 00:03:29,440
need computation and you need data why

98
00:03:29,440 --> 00:03:31,040
computation because when you execute a

99
00:03:31,040 --> 00:03:32,480
smart contract when you want to deploy

100
00:03:32,480 --> 00:03:34,560
smart contract it has to be verified on

101
00:03:34,560 --> 00:03:36,720
chain and verification usually happens

102
00:03:36,720 --> 00:03:38,319
by recomputing

103
00:03:38,319 --> 00:03:41,760
the program which is completely waste of

104
00:03:41,760 --> 00:03:43,680
cpu because you have hundreds of

105
00:03:43,680 --> 00:03:45,440
validators and for one single pro

106
00:03:45,440 --> 00:03:47,840
program it has to be verified recomputed

107
00:03:47,840 --> 00:03:48,640
by

108
00:03:48,640 --> 00:03:50,159
tons of people

109
00:03:50,159 --> 00:03:52,560
and the blockchain has a database also

110
00:03:52,560 --> 00:03:54,879
has to source some data so the state the

111
00:03:54,879 --> 00:03:56,159
arguments

112
00:03:56,159 --> 00:03:58,720
the logic that has been executed

113
00:03:58,720 --> 00:04:00,400
and so the more transactions

114
00:04:00,400 --> 00:04:02,879
the more data and computation and at

115
00:04:02,879 --> 00:04:04,239
some point you reach

116
00:04:04,239 --> 00:04:07,360
the threshold when it's not manageable

117
00:04:07,360 --> 00:04:09,200
and it's quite slow indeed 15

118
00:04:09,200 --> 00:04:10,640
transactions per second the transaction

119
00:04:10,640 --> 00:04:13,280
is not only a transfer of money it's any

120
00:04:13,280 --> 00:04:15,280
change so remember it's a database so

121
00:04:15,280 --> 00:04:17,358
the database a transaction is a change

122
00:04:17,358 --> 00:04:19,279
of the state

123
00:04:19,279 --> 00:04:21,440
or read a read operation

124
00:04:21,440 --> 00:04:24,000
so it's leading to you know by simple

125
00:04:24,000 --> 00:04:26,400
offering demand high gas fees

126
00:04:26,400 --> 00:04:28,400
and by account to a content network and

127
00:04:28,400 --> 00:04:30,000
people who are not really happy so you

128
00:04:30,000 --> 00:04:31,840
see a comparison between

129
00:04:31,840 --> 00:04:33,520
this big computer that a lot of people

130
00:04:33,520 --> 00:04:35,040
are using distributed over many

131
00:04:35,040 --> 00:04:36,240
computers

132
00:04:36,240 --> 00:04:38,720
uh 600 000 additions per second and you

133
00:04:38,720 --> 00:04:40,800
compare it to a small computer that only

134
00:04:40,800 --> 00:04:42,400
one person wants to use

135
00:04:42,400 --> 00:04:45,280
like raspberry pi like forty dollars

136
00:04:45,280 --> 00:04:47,600
three billion additions per second yeah

137
00:04:47,600 --> 00:04:49,120
that's the future

138
00:04:49,120 --> 00:04:51,280
um so how to scale there's many two

139
00:04:51,280 --> 00:04:53,680
classes of solutions the first one is

140
00:04:53,680 --> 00:04:55,280
change the operating system so to speak

141
00:04:55,280 --> 00:04:57,280
that's called layer one change the way

142
00:04:57,280 --> 00:04:58,720
each theorem behaves

143
00:04:58,720 --> 00:04:59,840
the second

144
00:04:59,840 --> 00:05:02,080
way is what we call layer two change how

145
00:05:02,080 --> 00:05:04,320
the application works or try to create

146
00:05:04,320 --> 00:05:06,720
another network on top of ethereum so

147
00:05:06,720 --> 00:05:09,039
that's what people call side chains

148
00:05:09,039 --> 00:05:11,440
where you create your own separate

149
00:05:11,440 --> 00:05:13,680
blockchain and from time to time you

150
00:05:13,680 --> 00:05:15,680
commit your state into the main

151
00:05:15,680 --> 00:05:17,520
blockchain

152
00:05:17,520 --> 00:05:20,320
that's a poor simplification of how l2

153
00:05:20,320 --> 00:05:23,199
protocols work but i think it described

154
00:05:23,199 --> 00:05:25,360
the general id so today i will only talk

155
00:05:25,360 --> 00:05:26,080
of

156
00:05:26,080 --> 00:05:28,000
l1 layer 1 of ethereum and i will not

157
00:05:28,000 --> 00:05:29,600
cover layer 2.

158
00:05:29,600 --> 00:05:30,479
um

159
00:05:30,479 --> 00:05:33,280
so the layer 1 approach to scale is

160
00:05:33,280 --> 00:05:35,520
what includes different components

161
00:05:35,520 --> 00:05:37,120
that's what used to be called ethereum

162
00:05:37,120 --> 00:05:40,560
2.0 the first one is proof of stake

163
00:05:40,560 --> 00:05:42,800
whereby instead of doing a lot of

164
00:05:42,800 --> 00:05:44,800
computations like in a proof of work you

165
00:05:44,800 --> 00:05:46,800
just take assets so you say oh i have a

166
00:05:46,800 --> 00:05:48,880
lot of money so i have the right to do a

167
00:05:48,880 --> 00:05:50,320
lot of things

168
00:05:50,320 --> 00:05:52,720
and to be rewarded for it and data

169
00:05:52,720 --> 00:05:53,680
shouting

170
00:05:53,680 --> 00:05:55,759
is uh if you know database in your con

171
00:05:55,759 --> 00:05:58,000
family or sharding sharing is just a way

172
00:05:58,000 --> 00:06:00,080
to distribute the storage across

173
00:06:00,080 --> 00:06:02,240
multiple components in a relatively

174
00:06:02,240 --> 00:06:03,440
efficient way

175
00:06:03,440 --> 00:06:05,520
and the main component to manage this

176
00:06:05,520 --> 00:06:08,720
proof of stake and sharding mechanisms

177
00:06:08,720 --> 00:06:11,680
is what they call the beacon chain

178
00:06:11,680 --> 00:06:13,759
which was deployed in production in

179
00:06:13,759 --> 00:06:18,560
december 2020 so what is the b condition

180
00:06:18,560 --> 00:06:20,880
the beacon chain it's

181
00:06:20,880 --> 00:06:23,360
a network of nodes technically

182
00:06:23,360 --> 00:06:25,280
that maintain a state so remember it's a

183
00:06:25,280 --> 00:06:27,280
database you maintain a state and it's

184
00:06:27,280 --> 00:06:29,199
decentralized distributed so you need

185
00:06:29,199 --> 00:06:30,639
multiple people who work to work

186
00:06:30,639 --> 00:06:32,080
together and because they don't trust

187
00:06:32,080 --> 00:06:33,600
each other you need some complex

188
00:06:33,600 --> 00:06:36,240
consensus protocols to make sure that as

189
00:06:36,240 --> 00:06:38,639
long as the majority is honest then the

190
00:06:38,639 --> 00:06:41,039
state is safe so ethereum described the

191
00:06:41,039 --> 00:06:42,639
beacon chain as

192
00:06:42,639 --> 00:06:44,800
as follows imagine ethereum is a

193
00:06:44,800 --> 00:06:46,960
spaceship it's not quite ready for the

194
00:06:46,960 --> 00:06:49,280
interstellar voyage you know the

195
00:06:49,280 --> 00:06:51,440
the thing big uh with a beacon chain the

196
00:06:51,440 --> 00:06:53,039
community has built a new engine and a

197
00:06:53,039 --> 00:06:55,199
hardened hull when it's time the current

198
00:06:55,199 --> 00:06:57,039
ship will dock with this new system

199
00:06:57,039 --> 00:06:59,520
merging into one ship ready to

200
00:06:59,520 --> 00:07:02,479
light yours okay makes no sense

201
00:07:02,479 --> 00:07:04,800
maybe in french it's clearer

202
00:07:04,800 --> 00:07:06,639
it's the official interim page loose

203
00:07:06,639 --> 00:07:09,039
sticking la mison jose missangel is the

204
00:07:09,039 --> 00:07:11,520
french for proof of stake

205
00:07:11,520 --> 00:07:15,960
discovered today like the deputy

206
00:07:29,360 --> 00:07:30,479
what

207
00:07:30,479 --> 00:07:31,599
changed the valley so they're a bit

208
00:07:31,599 --> 00:07:32,800
confused they do use different

209
00:07:32,800 --> 00:07:34,880
translations for beacon change and the

210
00:07:34,880 --> 00:07:36,240
first and the bodies i don't know which

211
00:07:36,240 --> 00:07:39,120
one you prefer but

212
00:07:39,120 --> 00:07:41,120
so to run the beacon chain these know

213
00:07:41,120 --> 00:07:43,759
they need to run some piece of software

214
00:07:43,759 --> 00:07:45,360
it's called the beacon client or

215
00:07:45,360 --> 00:07:47,520
consensus client but they actually mark

216
00:07:47,520 --> 00:07:50,080
into to a server component which

217
00:07:50,080 --> 00:07:51,840
confuses me at the beginning and still

218
00:07:51,840 --> 00:07:52,720
today

219
00:07:52,720 --> 00:07:54,560
so these are for one

220
00:07:54,560 --> 00:07:56,240
a nimbus lighthouse thaku and prism

221
00:07:56,240 --> 00:07:57,440
respectively

222
00:07:57,440 --> 00:07:59,759
in nim the name language not the name

223
00:07:59,759 --> 00:08:00,960
blockchain

224
00:08:00,960 --> 00:08:03,039
lighthouse in rust teku in java and

225
00:08:03,039 --> 00:08:05,599
prism in go

226
00:08:05,599 --> 00:08:07,360
in terms of popularity so the main

227
00:08:07,360 --> 00:08:09,360
metric to computer popularity is github

228
00:08:09,360 --> 00:08:11,440
stars as everybody knows

229
00:08:11,440 --> 00:08:13,680
so the most popular is prism

230
00:08:13,680 --> 00:08:16,400
two thousand around two thousand stars

231
00:08:16,400 --> 00:08:18,240
the night house one thousand

232
00:08:18,240 --> 00:08:20,720
then uh the queen numbers are a bit

233
00:08:20,720 --> 00:08:23,440
closer to three hundred that was yeah in

234
00:08:23,440 --> 00:08:25,199
last september

235
00:08:25,199 --> 00:08:27,520
in terms of usage prismary dominates you

236
00:08:27,520 --> 00:08:29,440
know more than half of the nodes are

237
00:08:29,440 --> 00:08:30,720
prison nodes

238
00:08:30,720 --> 00:08:33,039
then lighthouse and the near tequila

239
00:08:33,039 --> 00:08:34,320
number so you see this

240
00:08:34,320 --> 00:08:36,640
kind of matches the github stars which

241
00:08:36,640 --> 00:08:38,320
demonstrate that github stars is a good

242
00:08:38,320 --> 00:08:42,479
indicator again um and no no surprise

243
00:08:42,479 --> 00:08:44,720
here most of the nodes are in the united

244
00:08:44,720 --> 00:08:46,560
states of america

245
00:08:46,560 --> 00:08:48,959
so how what is a bitcoin client so again

246
00:08:48,959 --> 00:08:50,720
it's not a client it's a server and it's

247
00:08:50,720 --> 00:08:52,880
running two main services one called the

248
00:08:52,880 --> 00:08:54,640
beacon node which is a kind of passive

249
00:08:54,640 --> 00:08:56,720
service that is just looking at the

250
00:08:56,720 --> 00:08:58,720
blockchain at the beacon chain

251
00:08:58,720 --> 00:09:00,959
and that you can query to get value uh

252
00:09:00,959 --> 00:09:02,880
to get information on on this beacon

253
00:09:02,880 --> 00:09:05,279
chain uh you can ask the latest at a

254
00:09:05,279 --> 00:09:07,360
station you can ask how the latest block

255
00:09:07,360 --> 00:09:09,279
looks like this kind of thing the

256
00:09:09,279 --> 00:09:10,560
validator is the most important

257
00:09:10,560 --> 00:09:12,399
component is the one that is really

258
00:09:12,399 --> 00:09:14,399
doing the work to actively maintain the

259
00:09:14,399 --> 00:09:16,399
blockchain and the one where security

260
00:09:16,399 --> 00:09:19,360
really matters because they are

261
00:09:19,360 --> 00:09:20,560
checking that the blocks that are

262
00:09:20,560 --> 00:09:23,360
submitted so block is essentially

263
00:09:23,360 --> 00:09:24,240
a

264
00:09:24,240 --> 00:09:26,080
proposal of a change to database to the

265
00:09:26,080 --> 00:09:27,360
blockchain

266
00:09:27,360 --> 00:09:30,560
and then you sign at the stations

267
00:09:30,560 --> 00:09:32,000
let's say to say that okay from my

268
00:09:32,000 --> 00:09:33,839
perspective i've done all the security

269
00:09:33,839 --> 00:09:37,839
checks and this block fulfills all the

270
00:09:37,920 --> 00:09:40,000
requirements and you cannot accept it

271
00:09:40,000 --> 00:09:41,519
and we're going to only to accept this

272
00:09:41,519 --> 00:09:43,600
one because you cannot accept two blocks

273
00:09:43,600 --> 00:09:46,320
at the same time

274
00:09:46,320 --> 00:09:47,360
so

275
00:09:47,360 --> 00:09:50,000
this introduces some new components

276
00:09:50,000 --> 00:09:52,000
because the beacon chain is quite

277
00:09:52,000 --> 00:09:53,920
different from the non-beacon chain

278
00:09:53,920 --> 00:09:55,120
so first of all a new type of

279
00:09:55,120 --> 00:09:57,440
cryptographic signatures bls

280
00:09:57,440 --> 00:09:59,120
slashing a punishing mechanism that i

281
00:09:59,120 --> 00:10:00,959
will not discuss because of time

282
00:10:00,959 --> 00:10:02,720
constraints and because we didn't find

283
00:10:02,720 --> 00:10:05,680
bug in it and an api and also a

284
00:10:05,680 --> 00:10:07,920
peer-to-peer peer-to-peer layer

285
00:10:07,920 --> 00:10:10,560
okay is the sound okay do you hear me in

286
00:10:10,560 --> 00:10:12,000
the back of the room

287
00:10:12,000 --> 00:10:13,760
okay

288
00:10:13,760 --> 00:10:15,360
our methodology is very deep and

289
00:10:15,360 --> 00:10:17,440
scientific

290
00:10:17,440 --> 00:10:18,480
well

291
00:10:18,480 --> 00:10:20,320
we're lazy like everyone so we look at

292
00:10:20,320 --> 00:10:22,320
the code we try to find bugs and the

293
00:10:22,320 --> 00:10:24,800
easiest way to find bugs is to compare

294
00:10:24,800 --> 00:10:27,200
the specs with the code you know rocket

295
00:10:27,200 --> 00:10:29,120
science and even easier to compare

296
00:10:29,120 --> 00:10:31,200
implementations of the same thing

297
00:10:31,200 --> 00:10:32,800
so even if you don't understand anything

298
00:10:32,800 --> 00:10:34,480
you compare the code of two different

299
00:10:34,480 --> 00:10:36,000
clients you don't know what they're

300
00:10:36,000 --> 00:10:38,399
doing but they do the same thing

301
00:10:38,399 --> 00:10:41,839
differently then you ask yourself why

302
00:10:41,839 --> 00:10:43,600
why did do these operations in different

303
00:10:43,600 --> 00:10:44,640
order

304
00:10:44,640 --> 00:10:46,320
why they have different parameters and

305
00:10:46,320 --> 00:10:48,320
maybe that's a bug

306
00:10:48,320 --> 00:10:50,959
maybe not so that's essentially what

307
00:10:50,959 --> 00:10:52,399
what we did um

308
00:10:52,399 --> 00:10:53,680
yeah

309
00:10:53,680 --> 00:10:56,240
okay so first bl signatures

310
00:10:56,240 --> 00:10:59,040
uh maybe you're familiar with you know

311
00:10:59,040 --> 00:11:02,200
ecd say in particular dss signatures or

312
00:11:02,200 --> 00:11:05,120
ed25519 all these elliptic curve digital

313
00:11:05,120 --> 00:11:06,399
signatures so we're talking about

314
00:11:06,399 --> 00:11:09,519
asymmetric public signatures not max

315
00:11:09,519 --> 00:11:11,120
they're quite complex you look at each

316
00:11:11,120 --> 00:11:12,720
dsa it's very complex you take you pick

317
00:11:12,720 --> 00:11:14,720
a random value you have to do a lot of

318
00:11:14,720 --> 00:11:17,279
checks modular inverse

319
00:11:17,279 --> 00:11:19,040
division multiplication addition all the

320
00:11:19,040 --> 00:11:20,800
possible math operations

321
00:11:20,800 --> 00:11:22,880
to sign and your signature is not one

322
00:11:22,880 --> 00:11:24,959
value but two values

323
00:11:24,959 --> 00:11:26,640
so here with builder signatures it's

324
00:11:26,640 --> 00:11:28,560
much easier you have your message that

325
00:11:28,560 --> 00:11:29,680
you want to

326
00:11:29,680 --> 00:11:30,959
to sign

327
00:11:30,959 --> 00:11:32,480
you hash it

328
00:11:32,480 --> 00:11:34,240
and you do one multiplication with a

329
00:11:34,240 --> 00:11:36,160
secret key and that's it

330
00:11:36,160 --> 00:11:38,160
so technically this is a point it's not

331
00:11:38,160 --> 00:11:40,399
a hash function like black two it's a

332
00:11:40,399 --> 00:11:42,880
hash to curve hash function whereby you

333
00:11:42,880 --> 00:11:45,120
hash a piece of data

334
00:11:45,120 --> 00:11:46,720
onto an elliptic curve so the result is

335
00:11:46,720 --> 00:11:49,120
not a string it's a point on the curve

336
00:11:49,120 --> 00:11:50,399
um

337
00:11:50,399 --> 00:11:53,600
and the secret key is a number a scalar

338
00:11:53,600 --> 00:11:56,320
so crypto people say scalar because it

339
00:11:56,320 --> 00:11:59,279
sounds more serious than a number

340
00:11:59,279 --> 00:12:01,200
who's calling me no i'm giving a talk

341
00:12:01,200 --> 00:12:02,160
sorry

342
00:12:02,160 --> 00:12:04,560
um okay so what can go wrong here look

343
00:12:04,560 --> 00:12:06,720
at this this line

344
00:12:06,720 --> 00:12:07,760
can you imagine what could be the

345
00:12:07,760 --> 00:12:10,760
problem

346
00:12:13,040 --> 00:12:14,880
yeah i'm hearing the google response so

347
00:12:14,880 --> 00:12:17,200
the first thing you learn in security is

348
00:12:17,200 --> 00:12:18,720
validate your input

349
00:12:18,720 --> 00:12:21,040
and reject bad inputs so what could be a

350
00:12:21,040 --> 00:12:23,360
bad input here it would be

351
00:12:23,360 --> 00:12:26,320
the zero value here so typically you

352
00:12:26,320 --> 00:12:28,320
receive either the message or the hash

353
00:12:28,320 --> 00:12:30,560
of the message in your api and if this

354
00:12:30,560 --> 00:12:32,880
value is zero so zero multiplied by

355
00:12:32,880 --> 00:12:35,680
anything is zero um so it means that you

356
00:12:35,680 --> 00:12:37,279
would get the same signature regardless

357
00:12:37,279 --> 00:12:38,959
of the value of the secret key which

358
00:12:38,959 --> 00:12:41,040
means that you could forge a signature

359
00:12:41,040 --> 00:12:43,519
of a message without knowing the secret

360
00:12:43,519 --> 00:12:46,160
key i mean it sounds very stupid but

361
00:12:46,160 --> 00:12:47,920
this zero bug was present in many

362
00:12:47,920 --> 00:12:49,920
implementations

363
00:12:49,920 --> 00:12:50,800
and

364
00:12:50,800 --> 00:12:53,519
someone wrote a paper called xero

365
00:12:53,519 --> 00:12:54,720
which is annoying when you want to

366
00:12:54,720 --> 00:12:58,560
google for the paper you google zero

367
00:12:58,880 --> 00:13:00,240
and then he did another paper called

368
00:13:00,240 --> 00:13:02,079
double zero because he found other bugs

369
00:13:02,079 --> 00:13:03,600
based on this

370
00:13:03,600 --> 00:13:04,320
so

371
00:13:04,320 --> 00:13:07,839
this zeroness issue is uh one specific

372
00:13:07,839 --> 00:13:10,240
instance of a class of invalid

373
00:13:10,240 --> 00:13:12,240
uh values that you may receive

374
00:13:12,240 --> 00:13:13,839
and you have some um

375
00:13:13,839 --> 00:13:15,600
so this is the soda code in the

376
00:13:15,600 --> 00:13:17,839
ietfdraft that describe the core verify

377
00:13:17,839 --> 00:13:18,880
function

378
00:13:18,880 --> 00:13:20,720
the they coverify procedures to verify

379
00:13:20,720 --> 00:13:23,360
signature and you have these two routine

380
00:13:23,360 --> 00:13:24,800
signature

381
00:13:24,800 --> 00:13:26,480
check except group checks so you check

382
00:13:26,480 --> 00:13:27,360
that

383
00:13:27,360 --> 00:13:30,320
your point is in the right subgroup

384
00:13:30,320 --> 00:13:31,680
of the

385
00:13:31,680 --> 00:13:34,320
group of points and you validate the key

386
00:13:34,320 --> 00:13:36,480
so here several things can go wrong

387
00:13:36,480 --> 00:13:39,199
maybe you can just you know forget to do

388
00:13:39,199 --> 00:13:41,440
this all together one of the two or

389
00:13:41,440 --> 00:13:42,720
maybe you have a function that is doing

390
00:13:42,720 --> 00:13:44,560
it but it's doing it incorrectly or

391
00:13:44,560 --> 00:13:45,920
maybe it's doing it correctly but you

392
00:13:45,920 --> 00:13:47,360
don't check the result correctly or

393
00:13:47,360 --> 00:13:48,800
maybe you check the result but then you

394
00:13:48,800 --> 00:13:50,079
do the bad thing

395
00:13:50,079 --> 00:13:52,240
a lot of things can go wrong here

396
00:13:52,240 --> 00:13:54,560
likewise here you look at the specs

397
00:13:54,560 --> 00:13:56,320
and you look at this

398
00:13:56,320 --> 00:13:58,079
like the offshore reference and you say

399
00:13:58,079 --> 00:14:00,240
if one thing is wrong written invalid

400
00:14:00,240 --> 00:14:02,560
invalid invalid invalid and if you see

401
00:14:02,560 --> 00:14:04,079
the return value you know that it's

402
00:14:04,079 --> 00:14:06,000
failed you don't know why so just you

403
00:14:06,000 --> 00:14:07,839
see an invalid but what most

404
00:14:07,839 --> 00:14:09,519
implementations would do

405
00:14:09,519 --> 00:14:11,360
uh they would written an error message

406
00:14:11,360 --> 00:14:12,880
or an or code that would be specific to

407
00:14:12,880 --> 00:14:14,959
the error which gives you more

408
00:14:14,959 --> 00:14:16,399
information

409
00:14:16,399 --> 00:14:18,399
on about what happened internally which

410
00:14:18,399 --> 00:14:21,040
might potentially be used as an oracle

411
00:14:21,040 --> 00:14:22,480
to determine

412
00:14:22,480 --> 00:14:24,399
what happens inside

413
00:14:24,399 --> 00:14:26,160
so i'm trying to give you know some

414
00:14:26,160 --> 00:14:27,440
examples of

415
00:14:27,440 --> 00:14:30,160
cryptographic protocol failures

416
00:14:30,160 --> 00:14:31,680
so i'm not going to give details of the

417
00:14:31,680 --> 00:14:33,440
bugs but it's this kind of bug that we

418
00:14:33,440 --> 00:14:36,079
found and we found 90 19

419
00:14:36,079 --> 00:14:38,399
90 of these bugs across all the four

420
00:14:38,399 --> 00:14:40,959
projects and also in the specifications

421
00:14:40,959 --> 00:14:44,000
of ethereum 2.0 so none of these were

422
00:14:44,000 --> 00:14:45,040
already

423
00:14:45,040 --> 00:14:47,120
exploitable in the sense that you could

424
00:14:47,120 --> 00:14:49,920
steal money for free

425
00:14:49,920 --> 00:14:51,440
well otherwise we would have reported it

426
00:14:51,440 --> 00:14:52,480
of course

427
00:14:52,480 --> 00:14:54,560
but um just happened not to find such

428
00:14:54,560 --> 00:14:56,560
bugs

429
00:14:56,560 --> 00:14:58,800
so we reported the bugs and what's funny

430
00:14:58,800 --> 00:15:01,600
in the blockchain space oftentimes

431
00:15:01,600 --> 00:15:02,959
well some projects do have a security

432
00:15:02,959 --> 00:15:05,839
contact but uh some people just report

433
00:15:05,839 --> 00:15:08,240
stuff in the github issues so yesterday

434
00:15:08,240 --> 00:15:10,079
somebody told me the case of a guy who

435
00:15:10,079 --> 00:15:12,320
reported a bug in the github issue of a

436
00:15:12,320 --> 00:15:14,560
project and say oh critical bug you can

437
00:15:14,560 --> 00:15:16,639
steal minutes worth of money with this

438
00:15:16,639 --> 00:15:19,199
bug and the guy was so nice and he even

439
00:15:19,199 --> 00:15:22,079
included a poc

440
00:15:22,079 --> 00:15:23,279
so

441
00:15:23,279 --> 00:15:25,519
and what somebody told him what the

442
00:15:25,519 --> 00:15:28,240
you're doing and he removed it but uh

443
00:15:28,240 --> 00:15:30,560
some people do not think so much

444
00:15:30,560 --> 00:15:32,399
next up the peer-to-peer layer so what's

445
00:15:32,399 --> 00:15:34,000
great with blockchain people is that

446
00:15:34,000 --> 00:15:36,079
they're very smart well some of them not

447
00:15:36,079 --> 00:15:37,360
all of them

448
00:15:37,360 --> 00:15:39,040
they have a lot of money a lot of time

449
00:15:39,040 --> 00:15:40,800
so what do you do when you have all this

450
00:15:40,800 --> 00:15:42,800
you're in advanced things you do

451
00:15:42,800 --> 00:15:44,480
using so they're invented peer-to-peer

452
00:15:44,480 --> 00:15:46,320
secure transport protocols

453
00:15:46,320 --> 00:15:48,160
and they encrypt connections between

454
00:15:48,160 --> 00:15:50,399
different validators so why encrypting

455
00:15:50,399 --> 00:15:51,279
things

456
00:15:51,279 --> 00:15:52,880
because you want security so you need to

457
00:15:52,880 --> 00:15:54,800
encrypt but it's not just about

458
00:15:54,800 --> 00:15:57,600
plaintext cipher attacks it's also about

459
00:15:57,600 --> 00:15:59,759
authentication to how to authenticate

460
00:15:59,759 --> 00:16:01,360
your parties how to authenticate to

461
00:16:01,360 --> 00:16:03,920
other parties confidentiality makes top

462
00:16:03,920 --> 00:16:06,320
secret integrity make sure that stuff

463
00:16:06,320 --> 00:16:09,440
hasn't been modified uh non-reputation

464
00:16:09,440 --> 00:16:10,880
uh making sure that if you sign

465
00:16:10,880 --> 00:16:12,560
something well no one else can sign

466
00:16:12,560 --> 00:16:14,480
stuff on your behalf or can modify what

467
00:16:14,480 --> 00:16:15,600
you signed

468
00:16:15,600 --> 00:16:17,440
uh and a few other things i don't know

469
00:16:17,440 --> 00:16:19,199
if they mention it yeah perfect for our

470
00:16:19,199 --> 00:16:22,240
secrecy uh and non-replay be

471
00:16:22,240 --> 00:16:24,959
non-replayability on t replay

472
00:16:24,959 --> 00:16:27,759
okay so we looked at the p2p protocol

473
00:16:27,759 --> 00:16:29,680
implementation and we tried to see if

474
00:16:29,680 --> 00:16:32,639
these were satisfied uh spoiler not all

475
00:16:32,639 --> 00:16:33,839
of them

476
00:16:33,839 --> 00:16:36,880
um so what do they use for peer-to-peer

477
00:16:36,880 --> 00:16:39,759
they use lip p2p which was uh designed

478
00:16:39,759 --> 00:16:42,800
similarly by protocol labs for the ipfs

479
00:16:42,800 --> 00:16:45,199
so interplanetary file system

480
00:16:45,199 --> 00:16:46,480
protocol which is really cool

481
00:16:46,480 --> 00:16:48,000
cryptographically

482
00:16:48,000 --> 00:16:49,440
i don't know how useful it is but

483
00:16:49,440 --> 00:16:51,759
cryptographically it's fantastic they do

484
00:16:51,759 --> 00:16:54,399
proof of space proof of space time

485
00:16:54,399 --> 00:16:56,480
it's like magic

486
00:16:56,480 --> 00:16:59,440
and limp b2p is not just one library

487
00:16:59,440 --> 00:17:01,120
it's not just one protocol it's a suite

488
00:17:01,120 --> 00:17:03,839
of protocols for sexual transport mixer

489
00:17:03,839 --> 00:17:06,079
discovery peer routing a lot of things

490
00:17:06,079 --> 00:17:08,480
that you have uh listed here

491
00:17:08,480 --> 00:17:10,000
and it's called the de facto web stream

492
00:17:10,000 --> 00:17:12,480
networking layer and i think it's a fair

493
00:17:12,480 --> 00:17:14,079
description

494
00:17:14,079 --> 00:17:16,000
so what is the p2p again is the suite of

495
00:17:16,000 --> 00:17:20,160
protocols lib b2p dash noise is

496
00:17:20,160 --> 00:17:22,559
one secure transport so think of it as

497
00:17:22,559 --> 00:17:24,400
kind of secure tunnel that's a kind of

498
00:17:24,400 --> 00:17:27,520
wear regard or ipsec

499
00:17:27,520 --> 00:17:29,760
and this one is using the noise

500
00:17:29,760 --> 00:17:31,679
protocol framework

501
00:17:31,679 --> 00:17:33,039
and in a noise protocol framework you

502
00:17:33,039 --> 00:17:35,919
have multiple flavors of noise multiples

503
00:17:35,919 --> 00:17:39,280
away multiple ways of doing a handshake

504
00:17:39,280 --> 00:17:41,200
uh so it's a handshake is when you

505
00:17:41,200 --> 00:17:43,520
initialize a cryptographic session a

506
00:17:43,520 --> 00:17:45,039
cryptographic

507
00:17:45,039 --> 00:17:46,720
tunnel between two parties

508
00:17:46,720 --> 00:17:49,440
or more and noise xx double x or 20 i

509
00:17:49,440 --> 00:17:51,200
don't know how to spell it is a specific

510
00:17:51,200 --> 00:17:52,960
version that happens to be used in

511
00:17:52,960 --> 00:17:54,000
israel

512
00:17:54,000 --> 00:17:56,480
okay so here's jessica and morty they

513
00:17:56,480 --> 00:17:58,240
want to communicate well morty wants to

514
00:17:58,240 --> 00:18:00,240
communicate with jessica but in this

515
00:18:00,240 --> 00:18:02,480
case she initiates the session

516
00:18:02,480 --> 00:18:05,039
so you have three types of keys

517
00:18:05,039 --> 00:18:06,799
the ephemeral key

518
00:18:06,799 --> 00:18:10,240
with the suffix e here so ephemeral

519
00:18:10,240 --> 00:18:12,480
means that it's short-lived

520
00:18:12,480 --> 00:18:14,320
just for the sake of this specific

521
00:18:14,320 --> 00:18:15,360
session

522
00:18:15,360 --> 00:18:17,520
you have the static keys

523
00:18:17,520 --> 00:18:20,080
some that which are here so each party

524
00:18:20,080 --> 00:18:21,520
knows the static key of the order

525
00:18:21,520 --> 00:18:24,000
they're more like long-term keys

526
00:18:24,000 --> 00:18:26,160
so in the noise

527
00:18:26,160 --> 00:18:28,160
framework the static keys are really

528
00:18:28,160 --> 00:18:30,080
long term long long long term keys but

529
00:18:30,080 --> 00:18:31,760
in the world of ethereum

530
00:18:31,760 --> 00:18:33,440
they're more like midterm keys because

531
00:18:33,440 --> 00:18:35,039
you have another layer of keys called

532
00:18:35,039 --> 00:18:37,039
the identity key which is your key that

533
00:18:37,039 --> 00:18:38,799
never changes

534
00:18:38,799 --> 00:18:40,480
and when you want to issue a new static

535
00:18:40,480 --> 00:18:42,559
key you sign

536
00:18:42,559 --> 00:18:44,880
the static key with your identity key

537
00:18:44,880 --> 00:18:47,200
and hopefully people will verify this

538
00:18:47,200 --> 00:18:49,600
hopefully so what happens in noise i

539
00:18:49,600 --> 00:18:51,520
don't have too much time but

540
00:18:51,520 --> 00:18:53,679
it all goes as follow you send an fml

541
00:18:53,679 --> 00:18:54,559
key

542
00:18:54,559 --> 00:18:55,360
then

543
00:18:55,360 --> 00:18:56,880
marty is

544
00:18:56,880 --> 00:18:59,120
picking a new pair of emerald keys he's

545
00:18:59,120 --> 00:19:01,200
doing different operations between a

546
00:19:01,200 --> 00:19:04,480
combination of jessica's public key and

547
00:19:04,480 --> 00:19:06,799
his secret ephemeral key his secret

548
00:19:06,799 --> 00:19:10,080
static key then he sends his fml public

549
00:19:10,080 --> 00:19:13,440
key and the encryption of

550
00:19:13,440 --> 00:19:14,320
his

551
00:19:14,320 --> 00:19:17,679
static public key you might ask why

552
00:19:17,679 --> 00:19:19,440
why because he can

553
00:19:19,440 --> 00:19:21,039
and he can with what

554
00:19:21,039 --> 00:19:22,160
with the

555
00:19:22,160 --> 00:19:25,360
dh1 here so each stuff that you send

556
00:19:25,360 --> 00:19:27,679
here is encrypted with the key that you

557
00:19:27,679 --> 00:19:29,919
can generate uh

558
00:19:29,919 --> 00:19:31,679
with what you have

559
00:19:31,679 --> 00:19:33,440
and then he does she does the same you

560
00:19:33,440 --> 00:19:34,480
don't need to understand what happens

561
00:19:34,480 --> 00:19:35,600
you just need to see that a lot of

562
00:19:35,600 --> 00:19:37,440
crypto is happening here so three

563
00:19:37,440 --> 00:19:39,280
different operations the h1 the actually

564
00:19:39,280 --> 00:19:41,760
s3 the dhquan here is the same as the h1

565
00:19:41,760 --> 00:19:42,640
there

566
00:19:42,640 --> 00:19:44,559
and so on for the rest and at the end

567
00:19:44,559 --> 00:19:46,880
they have 3d h values and they derive a

568
00:19:46,880 --> 00:19:48,240
symmetrically from it and they can

569
00:19:48,240 --> 00:19:49,440
encrypt stuff

570
00:19:49,440 --> 00:19:51,200
with that so ultimately they both

571
00:19:51,200 --> 00:19:52,880
authenticate to each other using all

572
00:19:52,880 --> 00:19:55,280
these keys so a lot of keys of crypto

573
00:19:55,280 --> 00:19:57,280
too much crypto maybe i don't know

574
00:19:57,280 --> 00:20:00,000
what can go wrong here if you

575
00:20:00,000 --> 00:20:01,520
assign your

576
00:20:01,520 --> 00:20:04,559
new static keys with an identity key

577
00:20:04,559 --> 00:20:07,840
what kind of attack can you do

578
00:20:12,080 --> 00:20:13,760
you have a secure signature scheme you

579
00:20:13,760 --> 00:20:15,440
have secure keys

580
00:20:15,440 --> 00:20:17,600
and you just take the key and sign it

581
00:20:17,600 --> 00:20:21,000
and send it

582
00:20:23,520 --> 00:20:26,000
no idea

583
00:20:27,039 --> 00:20:29,360
sorry

584
00:20:30,480 --> 00:20:32,720
yes

585
00:20:32,840 --> 00:20:36,240
yes uh yes but yeah you they know your

586
00:20:36,240 --> 00:20:38,799
identity key and you want to say

587
00:20:38,799 --> 00:20:41,520
uh okay i have a new static key here

588
00:20:41,520 --> 00:20:44,320
signature of it

589
00:20:44,880 --> 00:20:48,320
so the the risk is replay replay attack

590
00:20:48,320 --> 00:20:49,919
because it's not bound to the session

591
00:20:49,919 --> 00:20:51,919
there's no counter so you can take a

592
00:20:51,919 --> 00:20:54,159
previous signature a previous public key

593
00:20:54,159 --> 00:20:55,760
so the public key is public it's not

594
00:20:55,760 --> 00:20:57,360
secret so you can take the public key

595
00:20:57,360 --> 00:20:58,799
you can take the signature which is also

596
00:20:58,799 --> 00:21:00,240
public and

597
00:21:00,240 --> 00:21:02,720
use it again on behalf of the person so

598
00:21:02,720 --> 00:21:04,159
you don't know the secret key you will

599
00:21:04,159 --> 00:21:06,080
not be able to initiate the session

600
00:21:06,080 --> 00:21:07,679
but it will force the other parties to

601
00:21:07,679 --> 00:21:10,400
erase the other public key and it it's

602
00:21:10,400 --> 00:21:12,159
kind of a dos vector

603
00:21:12,159 --> 00:21:14,640
so how to fix it you can just sign

604
00:21:14,640 --> 00:21:16,400
instead of just the key sign x

605
00:21:16,400 --> 00:21:17,840
the key and some value that is

606
00:21:17,840 --> 00:21:19,840
unpredictable to not occur it can be a

607
00:21:19,840 --> 00:21:21,760
random value a random challenge it can

608
00:21:21,760 --> 00:21:23,919
be a harsher decision transcript

609
00:21:23,919 --> 00:21:26,640
anything that the attacker cannot um

610
00:21:26,640 --> 00:21:28,159
cannot predict

611
00:21:28,159 --> 00:21:29,600
another attack vector is the following

612
00:21:29,600 --> 00:21:30,640
so here

613
00:21:30,640 --> 00:21:32,480
what can you exploit if you're an

614
00:21:32,480 --> 00:21:33,840
attacker

615
00:21:33,840 --> 00:21:36,320
in this part of the protocol so jessica

616
00:21:36,320 --> 00:21:38,240
is sending her public key and morty is

617
00:21:38,240 --> 00:21:41,880
doing some crypto computations

618
00:21:44,960 --> 00:21:47,520
so it's again a dos vector because

619
00:21:47,520 --> 00:21:49,360
you send many public keys and you will

620
00:21:49,360 --> 00:21:50,240
force

621
00:21:50,240 --> 00:21:52,559
morty to do one two three cryptographic

622
00:21:52,559 --> 00:21:54,720
operations so two exponentiations and

623
00:21:54,720 --> 00:21:56,880
one key generation and if you send

624
00:21:56,880 --> 00:22:00,880
thousands or more public keys then uh

625
00:22:00,880 --> 00:22:03,200
he will use a lot of cpu so how can you

626
00:22:03,200 --> 00:22:05,440
fix this so if you look at um

627
00:22:05,440 --> 00:22:07,280
so it's it's mostly for udp in this case

628
00:22:07,280 --> 00:22:08,559
we're working with tcp so it's less

629
00:22:08,559 --> 00:22:11,039
relevant but if you look at dtls at

630
00:22:11,039 --> 00:22:13,600
ipsec or udp or wireguard they have some

631
00:22:13,600 --> 00:22:15,360
trick to prevent this so what where

632
00:22:15,360 --> 00:22:16,880
guard is doing is using what they call

633
00:22:16,880 --> 00:22:18,799
session cookies if they see too many

634
00:22:18,799 --> 00:22:20,640
public keys coming in they will say wait

635
00:22:20,640 --> 00:22:23,600
hold on uh

636
00:22:23,600 --> 00:22:26,240
take this challenge and sign it for me

637
00:22:26,240 --> 00:22:27,600
when you send your next public key and

638
00:22:27,600 --> 00:22:29,360
if you sign it correctly i will accept

639
00:22:29,360 --> 00:22:30,480
the session

640
00:22:30,480 --> 00:22:34,080
uh so it's kind of a trick to prevent um

641
00:22:34,080 --> 00:22:35,919
this kind of dos so it's kind of you

642
00:22:35,919 --> 00:22:38,799
know right limiting whereby the receiver

643
00:22:38,799 --> 00:22:39,840
receives

644
00:22:39,840 --> 00:22:43,039
refuses to processes the public keys

645
00:22:43,039 --> 00:22:45,600
if they receive too many of them okay

646
00:22:45,600 --> 00:22:47,840
so one bug that we found

647
00:22:47,840 --> 00:22:50,400
is a simple integer overflow

648
00:22:50,400 --> 00:22:53,600
in the javascript or typescript library

649
00:22:53,600 --> 00:22:55,760
and when we traced it back

650
00:22:55,760 --> 00:22:58,080
we traced it back to the go version and

651
00:22:58,080 --> 00:23:00,400
this go version we did some advanced

652
00:23:00,400 --> 00:23:02,400
forensics and we found that it came from

653
00:23:02,400 --> 00:23:04,480
the noise explorer framework which

654
00:23:04,480 --> 00:23:06,480
generates automatically some

655
00:23:06,480 --> 00:23:08,640
implementations of um

656
00:23:08,640 --> 00:23:10,080
of noise

657
00:23:10,080 --> 00:23:12,720
um and here the problem is um

658
00:23:12,720 --> 00:23:14,559
you know the non-reuse problem in crypto

659
00:23:14,559 --> 00:23:15,919
if you use twice the same notes with

660
00:23:15,919 --> 00:23:18,880
asgcm or stream cipher then

661
00:23:18,880 --> 00:23:20,480
you can potentially decrypt for free the

662
00:23:20,480 --> 00:23:22,320
plaintext so here's exactly what

663
00:23:22,320 --> 00:23:24,880
happened the nonce was only 64 bit it

664
00:23:24,880 --> 00:23:26,960
was incremented but then if you reach

665
00:23:26,960 --> 00:23:29,440
the maximum it would wrap around and

666
00:23:29,440 --> 00:23:32,080
repeat again the previous values

667
00:23:32,080 --> 00:23:33,360
whereas the spec says that you should

668
00:23:33,360 --> 00:23:35,039
not do it because it's bad

669
00:23:35,039 --> 00:23:36,400
and it was not

670
00:23:36,400 --> 00:23:38,240
done in the in the code so

671
00:23:38,240 --> 00:23:40,320
they fixed it like this and now it's uh

672
00:23:40,320 --> 00:23:41,919
now it works

673
00:23:41,919 --> 00:23:43,600
uh this one was from a few days ago and

674
00:23:43,600 --> 00:23:46,159
it's not our bug um

675
00:23:46,159 --> 00:23:48,480
quite a shame that we missed it

676
00:23:48,480 --> 00:23:50,480
by the way but it's because we we suck

677
00:23:50,480 --> 00:23:52,480
at uh at javascript

678
00:23:52,480 --> 00:23:54,080
so it's much more serious than mine in

679
00:23:54,080 --> 00:23:56,480
the middle whereby

680
00:23:56,480 --> 00:23:58,480
uh the signature verification can be

681
00:23:58,480 --> 00:24:00,640
completely bypassed so before i describe

682
00:24:00,640 --> 00:24:02,240
a replay attack here it's even worse and

683
00:24:02,240 --> 00:24:04,000
not just replay it's a full money in the

684
00:24:04,000 --> 00:24:07,120
middle why because of some

685
00:24:07,120 --> 00:24:10,080
specificity of typescript

686
00:24:10,080 --> 00:24:12,320
it doesn't complain about

687
00:24:12,320 --> 00:24:13,440
this i don't know what it means in

688
00:24:13,440 --> 00:24:15,200
javascript it's some

689
00:24:15,200 --> 00:24:16,960
some promise issue

690
00:24:16,960 --> 00:24:19,200
but it looks apparently quite

691
00:24:19,200 --> 00:24:22,240
non-trivial to to spot

692
00:24:22,240 --> 00:24:24,080
and well the upshot is that the

693
00:24:24,080 --> 00:24:25,600
signature verification was not checked

694
00:24:25,600 --> 00:24:27,600
it was accepted even when it was not

695
00:24:27,600 --> 00:24:28,480
valid

696
00:24:28,480 --> 00:24:29,600
which is not

697
00:24:29,600 --> 00:24:31,120
not good

698
00:24:31,120 --> 00:24:33,600
okay now let's go to the api so the api

699
00:24:33,600 --> 00:24:35,600
it's a standard um

700
00:24:35,600 --> 00:24:39,919
send out um http rest or rpc and grpc

701
00:24:39,919 --> 00:24:42,320
underhood the usual stuff

702
00:24:42,320 --> 00:24:44,320
and we since it's the usual stuff we

703
00:24:44,320 --> 00:24:46,320
found the usual bugs

704
00:24:46,320 --> 00:24:47,120
so

705
00:24:47,120 --> 00:24:48,960
the spec is saying something about how

706
00:24:48,960 --> 00:24:50,559
to process not to process the http

707
00:24:50,559 --> 00:24:52,640
headers and most of the clients who are

708
00:24:52,640 --> 00:24:55,120
doing this wrong

709
00:24:55,120 --> 00:24:56,240
like

710
00:24:56,240 --> 00:24:57,919
not looking at the headers or accepting

711
00:24:57,919 --> 00:24:59,919
invalid headers this kind of thing they

712
00:24:59,919 --> 00:25:02,240
will not validate the json schema they

713
00:25:02,240 --> 00:25:04,080
will accept invalid fields in the json

714
00:25:04,080 --> 00:25:06,000
schema this kind of thing

715
00:25:06,000 --> 00:25:08,159
sometimes the api would be publicly

716
00:25:08,159 --> 00:25:10,159
exposed whereas it should be

717
00:25:10,159 --> 00:25:12,400
authenticated

718
00:25:12,400 --> 00:25:14,480
we even found some authentication tokens

719
00:25:14,480 --> 00:25:16,720
written in the logs as a convenient way

720
00:25:16,720 --> 00:25:18,240
to access the tokens but i don't

721
00:25:18,240 --> 00:25:20,320
recommend this um

722
00:25:20,320 --> 00:25:21,919
the logs are not secret in general it

723
00:25:21,919 --> 00:25:23,200
depends

724
00:25:23,200 --> 00:25:24,720
also some requests that were possible

725
00:25:24,720 --> 00:25:27,039
without an api token and some dos

726
00:25:27,039 --> 00:25:29,360
vectors whereby you send some parameters

727
00:25:29,360 --> 00:25:31,200
you send like you know 10 bytes and you

728
00:25:31,200 --> 00:25:34,880
receive 100 bytes so this kind of

729
00:25:34,880 --> 00:25:37,039
uh device vector

730
00:25:37,039 --> 00:25:39,679
uh last part the supply chain risks

731
00:25:39,679 --> 00:25:41,120
so

732
00:25:41,120 --> 00:25:43,039
as you know most of the modern software

733
00:25:43,039 --> 00:25:45,600
projects have maybe eighty percent of

734
00:25:45,600 --> 00:25:48,000
their code written by other people

735
00:25:48,000 --> 00:25:49,919
because they come from dependencies or

736
00:25:49,919 --> 00:25:51,919
packages and it's very convenient

737
00:25:51,919 --> 00:25:54,000
because you just need to

738
00:25:54,000 --> 00:25:55,360
call someone else's package you don't

739
00:25:55,360 --> 00:25:56,960
have to write it yourself

740
00:25:56,960 --> 00:25:58,720
but the flip side is that you depend a

741
00:25:58,720 --> 00:26:00,000
lot on

742
00:26:00,000 --> 00:26:02,000
these other people and their code and

743
00:26:02,000 --> 00:26:04,159
their security and maybe you have very

744
00:26:04,159 --> 00:26:07,200
good sdlc pipeline and ci and

745
00:26:07,200 --> 00:26:08,640
you know all the tools you want to have

746
00:26:08,640 --> 00:26:10,640
the linters and that's but these guys

747
00:26:10,640 --> 00:26:12,000
you don't know what they do you don't

748
00:26:12,000 --> 00:26:13,679
even know if they maintain their code at

749
00:26:13,679 --> 00:26:14,400
all

750
00:26:14,400 --> 00:26:16,320
so there's the risk of active sabotage

751
00:26:16,320 --> 00:26:18,320
malicious sabotage it's happened in the

752
00:26:18,320 --> 00:26:19,840
past

753
00:26:19,840 --> 00:26:22,159
your back doors or bug doors or possible

754
00:26:22,159 --> 00:26:23,520
deniability

755
00:26:23,520 --> 00:26:25,840
it can be a version management nightmare

756
00:26:25,840 --> 00:26:27,039
because let's say

757
00:26:27,039 --> 00:26:28,799
you find

758
00:26:28,799 --> 00:26:31,440
this direct dependency that is outdated

759
00:26:31,440 --> 00:26:33,440
you say oh i will update it in my

760
00:26:33,440 --> 00:26:35,360
cargo or

761
00:26:35,360 --> 00:26:37,440
go mod or whatever

762
00:26:37,440 --> 00:26:40,400
npm stuff is using but then you discover

763
00:26:40,400 --> 00:26:42,320
that one of your dependencies is using a

764
00:26:42,320 --> 00:26:43,840
dependency that is using a dependency

765
00:26:43,840 --> 00:26:46,480
that is using a dependency that is using

766
00:26:46,480 --> 00:26:48,720
the audited version of that one and it

767
00:26:48,720 --> 00:26:50,880
happens to have a vulnerability

768
00:26:50,880 --> 00:26:52,320
and even if you have the latest version

769
00:26:52,320 --> 00:26:54,640
of the first equal dependency

770
00:26:54,640 --> 00:26:57,039
if this guide did not you know update

771
00:26:57,039 --> 00:26:58,880
all the dependencies then there's not

772
00:26:58,880 --> 00:27:00,240
much you can do

773
00:27:00,240 --> 00:27:01,679
um

774
00:27:01,679 --> 00:27:03,760
to accept the risks so to speak

775
00:27:03,760 --> 00:27:06,080
uh another point in an enterprise

776
00:27:06,080 --> 00:27:07,679
context can be

777
00:27:07,679 --> 00:27:08,960
quite annoying is the copyright and

778
00:27:08,960 --> 00:27:12,080
licensing issues uh if you have some gpl

779
00:27:12,080 --> 00:27:13,760
dependency buried in your dependency

780
00:27:13,760 --> 00:27:15,120
graph uh

781
00:27:15,120 --> 00:27:17,600
it might bite you at some point so the

782
00:27:17,600 --> 00:27:19,360
good thing is that the last two or three

783
00:27:19,360 --> 00:27:20,559
years there has been a lot of great

784
00:27:20,559 --> 00:27:23,120
tooling develop for example in npm you

785
00:27:23,120 --> 00:27:25,039
might know the npm audit

786
00:27:25,039 --> 00:27:27,360
command in rust the cargo audit cargo

787
00:27:27,360 --> 00:27:29,440
outdated cargo geiger all these

788
00:27:29,440 --> 00:27:32,480
fantastic tools goes catching up as well

789
00:27:32,480 --> 00:27:34,960
and it helps you to identify easily uh

790
00:27:34,960 --> 00:27:37,039
the problems and there are some other

791
00:27:37,039 --> 00:27:39,440
platforms in go and github also you know

792
00:27:39,440 --> 00:27:42,240
depend about all these cool tools

793
00:27:42,240 --> 00:27:43,039
so

794
00:27:43,039 --> 00:27:44,960
i'm quite happy with this making our

795
00:27:44,960 --> 00:27:47,279
life easier but we wanted to have some

796
00:27:47,279 --> 00:27:49,200
let's say some indicators some metrics

797
00:27:49,200 --> 00:27:50,480
of the risk

798
00:27:50,480 --> 00:27:51,840
for these four clients so we started

799
00:27:51,840 --> 00:27:53,760
looking at the prism and go so that's an

800
00:27:53,760 --> 00:27:56,320
excerpt of the dependency graph

801
00:27:56,320 --> 00:27:57,919
so can you see how many dependencies

802
00:27:57,919 --> 00:28:00,399
there are here

803
00:28:00,840 --> 00:28:04,720
403 in rust it's even more artistic

804
00:28:04,720 --> 00:28:08,240
so just a small part you know

805
00:28:08,240 --> 00:28:09,919
so how many

806
00:28:09,919 --> 00:28:11,799
dependencies in lighthouse there were

807
00:28:11,799 --> 00:28:15,200
121 direct dependencies

808
00:28:15,200 --> 00:28:18,080
but 440 in total when you include all

809
00:28:18,080 --> 00:28:20,080
the transitive dependencies

810
00:28:20,080 --> 00:28:23,919
and prism 93 direct but 665

811
00:28:23,919 --> 00:28:26,320
uh in total so it's quite a lot

812
00:28:26,320 --> 00:28:28,399
um so we try to enumerate the audited

813
00:28:28,399 --> 00:28:30,640
version and variable versions but these

814
00:28:30,640 --> 00:28:32,159
numbers are not always meaningful

815
00:28:32,159 --> 00:28:34,240
because i know that some projects they

816
00:28:34,240 --> 00:28:36,240
just update the dependencies

817
00:28:36,240 --> 00:28:37,279
when they're going to release a new

818
00:28:37,279 --> 00:28:39,440
version

819
00:28:39,440 --> 00:28:40,559
so i don't think you should draw any

820
00:28:40,559 --> 00:28:42,080
conclusions from the audited version and

821
00:28:42,080 --> 00:28:44,159
vulnerable versions here because each

822
00:28:44,159 --> 00:28:45,840
protocol has their own

823
00:28:45,840 --> 00:28:48,720
release process and an update management

824
00:28:48,720 --> 00:28:49,919
process

825
00:28:49,919 --> 00:28:51,919
uh so we we tried to find some metrics

826
00:28:51,919 --> 00:28:53,039
that were meaningful for all the

827
00:28:53,039 --> 00:28:54,480
languages

828
00:28:54,480 --> 00:28:56,799
uh that were that made some sense in

829
00:28:56,799 --> 00:28:59,200
terms of in terms of risk

830
00:28:59,200 --> 00:29:01,360
um so i don't know if they are good but

831
00:29:01,360 --> 00:29:03,520
that's the the best the best we have we

832
00:29:03,520 --> 00:29:06,159
also try to see the number of cvs so cv

833
00:29:06,159 --> 00:29:07,440
is the well you probably know what the

834
00:29:07,440 --> 00:29:08,960
cv is anyway

835
00:29:08,960 --> 00:29:11,840
and in java or surprise a lot of cvs in

836
00:29:11,840 --> 00:29:14,159
java you don't know it might be because

837
00:29:14,159 --> 00:29:16,640
in the java ecosystem people prefer to

838
00:29:16,640 --> 00:29:18,000
report cvs

839
00:29:18,000 --> 00:29:21,600
in in rust there is another database for

840
00:29:21,600 --> 00:29:23,440
vulnerabilities and maybe people are

841
00:29:23,440 --> 00:29:25,120
less interested in cvs

842
00:29:25,120 --> 00:29:26,559
you don't know there are a lot of hidden

843
00:29:26,559 --> 00:29:28,960
biases here

844
00:29:28,960 --> 00:29:31,440
also what is also hard to find is a more

845
00:29:31,440 --> 00:29:34,399
qualitative metrics uh in terms of

846
00:29:34,399 --> 00:29:36,399
which dependencies you use

847
00:29:36,399 --> 00:29:37,200
and

848
00:29:37,200 --> 00:29:38,480
you have a little time so i will talk

849
00:29:38,480 --> 00:29:40,880
about this uh initially we were like

850
00:29:40,880 --> 00:29:41,840
okay

851
00:29:41,840 --> 00:29:43,360
let's focus on the critical dependencies

852
00:29:43,360 --> 00:29:44,960
which are the critical ones

853
00:29:44,960 --> 00:29:47,200
the ones that do crypto operations they

854
00:29:47,200 --> 00:29:49,440
want to do security they are critical

855
00:29:49,440 --> 00:29:51,520
but then we realize wait hold on

856
00:29:51,520 --> 00:29:53,520
any dependency is code that you're

857
00:29:53,520 --> 00:29:54,480
running

858
00:29:54,480 --> 00:29:56,399
so if i were to back door project i

859
00:29:56,399 --> 00:29:58,640
would not target the critical one i

860
00:29:58,640 --> 00:29:59,919
would target

861
00:29:59,919 --> 00:30:01,360
the one that people would not look at

862
00:30:01,360 --> 00:30:03,440
the one is changing the color of the

863
00:30:03,440 --> 00:30:05,360
buttons the one that is just you know

864
00:30:05,360 --> 00:30:06,840
doing some unicode

865
00:30:06,840 --> 00:30:09,600
whatever or if i'm even more evil i

866
00:30:09,600 --> 00:30:11,520
would take some dependencies that many

867
00:30:11,520 --> 00:30:12,960
projects are using

868
00:30:12,960 --> 00:30:14,159
um

869
00:30:14,159 --> 00:30:16,399
see it was very hard to

870
00:30:16,399 --> 00:30:18,000
to think in terms of okay which

871
00:30:18,000 --> 00:30:20,640
dependencies should we look at

872
00:30:20,640 --> 00:30:23,279
because we cannot look at 100 projects

873
00:30:23,279 --> 00:30:24,480
and manually

874
00:30:24,480 --> 00:30:26,720
see if they are done by reputable people

875
00:30:26,720 --> 00:30:28,080
if they have a good

876
00:30:28,080 --> 00:30:31,679
set of unit tests of sdlc um

877
00:30:31,679 --> 00:30:32,880
so

878
00:30:32,880 --> 00:30:33,760
yeah

879
00:30:33,760 --> 00:30:35,440
we didn't

880
00:30:35,440 --> 00:30:36,559
we

881
00:30:36,559 --> 00:30:38,880
we gave more questions and answers to be

882
00:30:38,880 --> 00:30:40,080
hardest

883
00:30:40,080 --> 00:30:40,880
but

884
00:30:40,880 --> 00:30:43,919
my conclusion of this

885
00:30:44,159 --> 00:30:45,600
in terms of language

886
00:30:45,600 --> 00:30:48,159
in terms of security lighthouse is doing

887
00:30:48,159 --> 00:30:50,000
a much better job because they have

888
00:30:50,000 --> 00:30:52,880
fuzzing in their ci pipeline

889
00:30:52,880 --> 00:30:54,880
they do things pretty well they have a

890
00:30:54,880 --> 00:30:56,399
lot of

891
00:30:56,399 --> 00:30:59,039
you know linting static analysis

892
00:30:59,039 --> 00:31:00,559
and

893
00:31:00,559 --> 00:31:02,240
as far as i can tell

894
00:31:02,240 --> 00:31:04,880
they have pretty smart developers uh the

895
00:31:04,880 --> 00:31:06,880
other ones are a bit

896
00:31:06,880 --> 00:31:09,519
less advanced as far as i could see in

897
00:31:09,519 --> 00:31:10,960
security but

898
00:31:10,960 --> 00:31:13,519
you know any project can have scary bugs

899
00:31:13,519 --> 00:31:15,120
even if you have the best people on

900
00:31:15,120 --> 00:31:15,919
earth

901
00:31:15,919 --> 00:31:18,320
so to conclude uh again we did not find

902
00:31:18,320 --> 00:31:21,039
high severity or critical bugs

903
00:31:21,039 --> 00:31:23,519
um we did not three surprises because

904
00:31:23,519 --> 00:31:26,080
there was really huge amount of

905
00:31:26,080 --> 00:31:26,960
you know

906
00:31:26,960 --> 00:31:28,960
cleanup done before we came

907
00:31:28,960 --> 00:31:31,760
all the project has been well audited

908
00:31:31,760 --> 00:31:32,720
by

909
00:31:32,720 --> 00:31:34,799
the usual suspect companies

910
00:31:34,799 --> 00:31:36,320
uh there's been some fuzzing done

911
00:31:36,320 --> 00:31:38,159
fuzzing of the interfaces fuzzing of the

912
00:31:38,159 --> 00:31:39,360
state machine

913
00:31:39,360 --> 00:31:41,440
a lot of testing

914
00:31:41,440 --> 00:31:42,720
um

915
00:31:42,720 --> 00:31:45,279
so yeah and they're doing their best

916
00:31:45,279 --> 00:31:46,480
but as you know if you have a complex

917
00:31:46,480 --> 00:31:49,200
system a new system a lot of code is the

918
00:31:49,200 --> 00:31:51,519
recipe for many bugs

919
00:31:51,519 --> 00:31:54,000
and especially in the context of

920
00:31:54,000 --> 00:31:55,279
blockchain or it's decentralized

921
00:31:55,279 --> 00:31:57,120
distributed and you have bugs that you

922
00:31:57,120 --> 00:31:59,279
can only identify when you're running

923
00:31:59,279 --> 00:32:01,120
this in a production-like setting where

924
00:32:01,120 --> 00:32:02,960
you have multiple meshing

925
00:32:02,960 --> 00:32:05,279
interacting in this asynchronous

926
00:32:05,279 --> 00:32:06,559
context

927
00:32:06,559 --> 00:32:08,159
and you hit some edge case that you

928
00:32:08,159 --> 00:32:09,679
could not anticipate just by looking at

929
00:32:09,679 --> 00:32:11,679
the code

930
00:32:11,679 --> 00:32:14,320
and that's what scares me a bit and

931
00:32:14,320 --> 00:32:15,679
that's how many people discovered some

932
00:32:15,679 --> 00:32:17,519
bugs they were like oh

933
00:32:17,519 --> 00:32:19,760
our testing is stuck why and it takes

934
00:32:19,760 --> 00:32:21,760
them hours or days to investigate until

935
00:32:21,760 --> 00:32:24,480
they find a bug

936
00:32:24,720 --> 00:32:26,640
but yeah that's

937
00:32:26,640 --> 00:32:27,840
you know the proof is on the putting at

938
00:32:27,840 --> 00:32:28,960
the end of the day because if your

939
00:32:28,960 --> 00:32:31,600
blockchain is running and if people can

940
00:32:31,600 --> 00:32:33,200
make millions

941
00:32:33,200 --> 00:32:35,360
if they if they break it and if it's not

942
00:32:35,360 --> 00:32:36,399
broken

943
00:32:36,399 --> 00:32:38,480
then it means that your security is at

944
00:32:38,480 --> 00:32:40,559
least i know five ten million dollars

945
00:32:40,559 --> 00:32:41,519
you know

946
00:32:41,519 --> 00:32:43,919
so i think that's a good way to tourism

947
00:32:43,919 --> 00:32:45,039
uh

948
00:32:45,039 --> 00:32:46,880
but at the same time there's a some high

949
00:32:46,880 --> 00:32:49,360
incentives if you find a critical bug

950
00:32:49,360 --> 00:32:51,600
and if you're a bit you know

951
00:32:51,600 --> 00:32:54,159
evil you may not want to disclose it

952
00:32:54,159 --> 00:32:57,360
because you can say okay i can make

953
00:32:57,360 --> 00:32:59,279
ten thousand from the back bounty it's

954
00:32:59,279 --> 00:33:02,720
clean money but i can make one million

955
00:33:02,720 --> 00:33:05,360
by exporting it but it's dirty money how

956
00:33:05,360 --> 00:33:06,799
does it cost to

957
00:33:06,799 --> 00:33:08,399
launder the money and that's really how

958
00:33:08,399 --> 00:33:09,600
people reason

959
00:33:09,600 --> 00:33:11,039
about this

960
00:33:11,039 --> 00:33:12,880
so what's the best client which one to

961
00:33:12,880 --> 00:33:14,960
choose that's what people ask us we have

962
00:33:14,960 --> 00:33:16,799
no idea but the difference is that

963
00:33:16,799 --> 00:33:18,559
lighthouse as i said is the most focused

964
00:33:18,559 --> 00:33:21,120
on security in terms of performance you

965
00:33:21,120 --> 00:33:22,399
know cpu

966
00:33:22,399 --> 00:33:24,880
disk usage is quite good but prism

967
00:33:24,880 --> 00:33:26,399
happens to be the most popular so maybe

968
00:33:26,399 --> 00:33:28,640
because go is easier to use i don't know

969
00:33:28,640 --> 00:33:30,480
nimbus is designed to be lighter i don't

970
00:33:30,480 --> 00:33:32,000
know if it's runs a smartphone probably

971
00:33:32,000 --> 00:33:34,320
not but it's quite lighter and teku is

972
00:33:34,320 --> 00:33:35,760
more enterprise oriented they have some

973
00:33:35,760 --> 00:33:37,120
commercial support if you if you need

974
00:33:37,120 --> 00:33:38,640
that

975
00:33:38,640 --> 00:33:41,120
it's probably good to have some level of

976
00:33:41,120 --> 00:33:43,279
diversity of clients because if you have

977
00:33:43,279 --> 00:33:45,440
only one single big client and if you

978
00:33:45,440 --> 00:33:47,279
have a bug in it then all the clients

979
00:33:47,279 --> 00:33:49,039
are down

980
00:33:49,039 --> 00:33:50,320
but you can argue that if you have many

981
00:33:50,320 --> 00:33:51,919
more clients you have much more bugs

982
00:33:51,919 --> 00:33:54,159
much more bugs to exploit so you need to

983
00:33:54,159 --> 00:33:56,320
find the right the right balance

984
00:33:56,320 --> 00:33:57,200
so

985
00:33:57,200 --> 00:33:58,480
last but not least the question when

986
00:33:58,480 --> 00:34:00,720
will ethereum 2 will israel 2 be

987
00:34:00,720 --> 00:34:02,320
available

988
00:34:02,320 --> 00:34:04,880
i have no idea and

989
00:34:04,880 --> 00:34:07,679
so what uh eachium is saying they say a

990
00:34:07,679 --> 00:34:09,440
date has not been set as of the

991
00:34:09,440 --> 00:34:11,520
publication of this boss which was 14th

992
00:34:11,520 --> 00:34:12,800
of march

993
00:34:12,800 --> 00:34:14,800
any source claiming otherwise is likely

994
00:34:14,800 --> 00:34:16,399
to be a scam

995
00:34:16,399 --> 00:34:17,760
updates will be posted on this blog

996
00:34:17,760 --> 00:34:19,280
please stay safe

997
00:34:19,280 --> 00:34:20,800
and funny i looked at the french version

998
00:34:20,800 --> 00:34:23,679
did they say the same thing

999
00:34:25,040 --> 00:34:27,280
the merge is when you merge the proof of

1000
00:34:27,280 --> 00:34:31,119
stake world with the main network of

1001
00:34:31,119 --> 00:34:33,679
ethereum

1002
00:34:34,719 --> 00:34:36,159
it always sounds smarter when you read

1003
00:34:36,159 --> 00:34:38,079
french you know

1004
00:34:38,079 --> 00:34:39,839
i love this

1005
00:34:39,839 --> 00:34:41,839
and you know how to say i

1006
00:34:41,839 --> 00:34:43,119
have a few minutes we're in a call with

1007
00:34:43,119 --> 00:34:45,599
a client my company a french bank and i

1008
00:34:45,599 --> 00:34:46,879
say

1009
00:34:46,879 --> 00:34:49,118
come

1010
00:34:59,760 --> 00:35:00,880
okay so

1011
00:35:00,880 --> 00:35:02,800
i hope you have fun

1012
00:35:02,800 --> 00:35:03,920
good

1013
00:35:03,920 --> 00:35:06,079
proof

1014
00:35:06,320 --> 00:35:06,710
thank you

1015
00:35:06,710 --> 00:35:12,300
[Applause]

1016
00:35:13,280 --> 00:35:14,960
thank you very much jb

1017
00:35:14,960 --> 00:35:16,480
i know you have a train to catch and you

1018
00:35:16,480 --> 00:35:18,400
need to run so do you have a time the

1019
00:35:18,400 --> 00:35:20,079
time for a few questions yeah i can take

1020
00:35:20,079 --> 00:35:21,760
a few questions okay if you have any

1021
00:35:21,760 --> 00:35:23,280
questions please raise your hand so i

1022
00:35:23,280 --> 00:35:27,560
can bring the microphone to you

1023
00:35:31,340 --> 00:35:34,409
[Music]

1024
00:35:36,240 --> 00:35:38,480
uh so thanks for the talk

1025
00:35:38,480 --> 00:35:41,040
i have a question about the denial of

1026
00:35:41,040 --> 00:35:43,440
service defense

1027
00:35:43,440 --> 00:35:44,720
because

1028
00:35:44,720 --> 00:35:47,680
even if the

1029
00:35:47,680 --> 00:35:49,040
the defender

1030
00:35:49,040 --> 00:35:51,359
asks that the attacker to to sign

1031
00:35:51,359 --> 00:35:54,240
something for him to verify that it's a

1032
00:35:54,240 --> 00:35:56,800
legitimate request then you still need

1033
00:35:56,800 --> 00:35:59,280
to verify the signature and that it

1034
00:35:59,280 --> 00:36:00,800
feels like it would take a similar

1035
00:36:00,800 --> 00:36:02,560
amount of time to actually performing

1036
00:36:02,560 --> 00:36:04,960
the step of the protocol

1037
00:36:04,960 --> 00:36:06,400
um

1038
00:36:06,400 --> 00:36:09,040
i for the dos vector uh where it's a

1039
00:36:09,040 --> 00:36:10,880
multiple public keys yeah but in that

1040
00:36:10,880 --> 00:36:12,960
case you also force the attacker to do

1041
00:36:12,960 --> 00:36:14,800
many computations

1042
00:36:14,800 --> 00:36:16,160
and they would do the same kind of

1043
00:36:16,160 --> 00:36:18,960
competition if they design it with a mac

1044
00:36:18,960 --> 00:36:20,720
it's the same amount of cpu on the

1045
00:36:20,720 --> 00:36:24,240
attacker's side and on the victim side

1046
00:36:24,320 --> 00:36:28,160
but uh they can send a bogus signature

1047
00:36:28,160 --> 00:36:30,000
and what happens then you just

1048
00:36:30,000 --> 00:36:32,720
disconnect and oh yeah again so yeah i

1049
00:36:32,720 --> 00:36:34,079
think there's a yeah a good point it

1050
00:36:34,079 --> 00:36:35,359
doesn't make anything whereby if they

1051
00:36:35,359 --> 00:36:37,599
send too many inverted signatures you

1052
00:36:37,599 --> 00:36:40,079
just reject everything for some some

1053
00:36:40,079 --> 00:36:41,760
period

1054
00:36:41,760 --> 00:36:43,200
i think you might want to check the

1055
00:36:43,200 --> 00:36:44,800
where i got implementation

1056
00:36:44,800 --> 00:36:46,400
i think they have quite a clever version

1057
00:36:46,400 --> 00:36:47,440
of this

1058
00:36:47,440 --> 00:36:50,680
okay thanks

1059
00:36:55,840 --> 00:37:00,240
[Music]

1060
00:37:00,240 --> 00:37:01,359
hi

1061
00:37:01,359 --> 00:37:03,920
um you mentioned that they are

1062
00:37:03,920 --> 00:37:05,200
in the original protocol there's an

1063
00:37:05,200 --> 00:37:07,200
option for replay attack

1064
00:37:07,200 --> 00:37:10,640
when sending a key update

1065
00:37:10,640 --> 00:37:14,079
and you propose to include a random

1066
00:37:14,079 --> 00:37:16,000
value that's not predictable by an

1067
00:37:16,000 --> 00:37:18,480
attacker

1068
00:37:18,480 --> 00:37:20,400
what about using a sequence number so

1069
00:37:20,400 --> 00:37:22,079
that you can check if it's a new one

1070
00:37:22,079 --> 00:37:23,680
instead of an old one

1071
00:37:23,680 --> 00:37:26,240
yeah that would also work but then you

1072
00:37:26,240 --> 00:37:28,000
need um

1073
00:37:28,000 --> 00:37:29,680
so either you transmit the sequence

1074
00:37:29,680 --> 00:37:31,119
number with the value

1075
00:37:31,119 --> 00:37:32,880
but the other party needs to be

1076
00:37:32,880 --> 00:37:34,480
synchronized with the same sequence

1077
00:37:34,480 --> 00:37:35,440
number

1078
00:37:35,440 --> 00:37:37,599
um and the problem is that if you miss

1079
00:37:37,599 --> 00:37:38,800
some message

1080
00:37:38,800 --> 00:37:39,680
okay

1081
00:37:39,680 --> 00:37:42,480
you send the the two the three

1082
00:37:42,480 --> 00:37:43,760
you receive the twitter three you don't

1083
00:37:43,760 --> 00:37:44,880
receive the four and suddenly you

1084
00:37:44,880 --> 00:37:47,040
receive the five you're like okay did i

1085
00:37:47,040 --> 00:37:48,640
miss a message

1086
00:37:48,640 --> 00:37:50,400
so you need both parties to maintain a

1087
00:37:50,400 --> 00:37:51,520
counter

1088
00:37:51,520 --> 00:37:52,720
and

1089
00:37:52,720 --> 00:37:54,320
it gets more complicated

1090
00:37:54,320 --> 00:37:56,640
so typically it's better to be stateless

1091
00:37:56,640 --> 00:37:58,079
uh in order to avoid having uh to

1092
00:37:58,079 --> 00:38:00,960
maintain a short state

1093
00:38:00,960 --> 00:38:04,920
all right any other question

1094
00:38:06,310 --> 00:38:09,340
[Music]

1095
00:38:14,720 --> 00:38:16,000
hi thank you

1096
00:38:16,000 --> 00:38:17,440
next talk

1097
00:38:17,440 --> 00:38:20,320
so i have a question um

1098
00:38:20,320 --> 00:38:22,880
what is the idea behind uh

1099
00:38:22,880 --> 00:38:24,800
catching denial of services when you

1100
00:38:24,800 --> 00:38:25,920
control

1101
00:38:25,920 --> 00:38:28,960
uh like the beacon uh infrastructure

1102
00:38:28,960 --> 00:38:30,240
because

1103
00:38:30,240 --> 00:38:32,160
when they deployed proof-of-stake

1104
00:38:32,160 --> 00:38:34,240
basically they are not able

1105
00:38:34,240 --> 00:38:35,119
uh

1106
00:38:35,119 --> 00:38:38,240
to to stop people to actually take over

1107
00:38:38,240 --> 00:38:39,200
to the

1108
00:38:39,200 --> 00:38:42,160
to the network so i mean denial of

1109
00:38:42,160 --> 00:38:44,480
service is just you are attacking a

1110
00:38:44,480 --> 00:38:47,280
service but you can actually

1111
00:38:47,280 --> 00:38:48,560
go and do

1112
00:38:48,560 --> 00:38:50,480
a kind of transaction hijacking by

1113
00:38:50,480 --> 00:38:54,160
controlling the bitcoin servers you know

1114
00:38:54,160 --> 00:38:55,680
yeah i think the expression scenarios

1115
00:38:55,680 --> 00:38:57,680
are non-trivial but

1116
00:38:57,680 --> 00:38:59,599
what i didn't mention is that

1117
00:38:59,599 --> 00:39:00,960
there's also a service called the

1118
00:39:00,960 --> 00:39:02,480
slasher service

1119
00:39:02,480 --> 00:39:04,480
where somebody letters are trying to

1120
00:39:04,480 --> 00:39:06,240
detect invalid transaction when someone

1121
00:39:06,240 --> 00:39:09,119
is cheating so being able to deal some

1122
00:39:09,119 --> 00:39:10,320
of the notes

1123
00:39:10,320 --> 00:39:12,800
might help when having a collision of

1124
00:39:12,800 --> 00:39:15,680
attackers and you want to prevent some

1125
00:39:15,680 --> 00:39:16,480
not

1126
00:39:16,480 --> 00:39:17,920
from reporting

1127
00:39:17,920 --> 00:39:20,079
a faulty and invalid

1128
00:39:20,079 --> 00:39:21,440
transaction

1129
00:39:21,440 --> 00:39:23,760
or you want to have an edge

1130
00:39:23,760 --> 00:39:26,560
for example if you want to exploit um

1131
00:39:26,560 --> 00:39:27,359
you know

1132
00:39:27,359 --> 00:39:29,359
now if you're familiar with mev attacks

1133
00:39:29,359 --> 00:39:30,720
where you try to exploit the early

1134
00:39:30,720 --> 00:39:32,400
knowledge of the next transactions and

1135
00:39:32,400 --> 00:39:33,920
you want to force one transaction to

1136
00:39:33,920 --> 00:39:35,760
come before another and you colored with

1137
00:39:35,760 --> 00:39:37,200
other parties

1138
00:39:37,200 --> 00:39:38,800
uh so especially since there are there

1139
00:39:38,800 --> 00:39:41,599
are not that many validators well still

1140
00:39:41,599 --> 00:39:44,720
but i guess you would prevent isolation

1141
00:39:44,720 --> 00:39:46,720
of some the eclipse in attack you would

1142
00:39:46,720 --> 00:39:48,320
prevent it you know

1143
00:39:48,320 --> 00:39:51,040
i mean otherwise uh

1144
00:39:51,040 --> 00:39:53,359
the beacon network wouldn't exist yeah

1145
00:39:53,359 --> 00:39:54,960
so yeah that's the point to have a

1146
00:39:54,960 --> 00:39:57,920
highly connected network uh yeah but my

1147
00:39:57,920 --> 00:39:59,280
question i mean

1148
00:39:59,280 --> 00:40:01,760
like the latent question is who is the

1149
00:40:01,760 --> 00:40:04,000
owner of this network is is really

1150
00:40:04,000 --> 00:40:06,560
decentralized but in the end because you

1151
00:40:06,560 --> 00:40:09,200
have this infrastructure which is like

1152
00:40:09,200 --> 00:40:12,078
24 7.

1153
00:40:13,040 --> 00:40:14,960
supposed to be decentralized and i think

1154
00:40:14,960 --> 00:40:17,520
that they try to have uh

1155
00:40:17,520 --> 00:40:19,200
knowledge validators maintained by

1156
00:40:19,200 --> 00:40:20,880
different people different organizations

1157
00:40:20,880 --> 00:40:22,319
in different countries

1158
00:40:22,319 --> 00:40:23,359
um

1159
00:40:23,359 --> 00:40:25,040
from my perspective it's a fair level of

1160
00:40:25,040 --> 00:40:27,359
decentralization at this point and even

1161
00:40:27,359 --> 00:40:28,880
better than in some other blockchains

1162
00:40:28,880 --> 00:40:30,160
where you have

1163
00:40:30,160 --> 00:40:32,880
big pools of proof-of-work

1164
00:40:32,880 --> 00:40:35,520
whereas here it's um

1165
00:40:35,520 --> 00:40:36,880
well to my taste a bit more

1166
00:40:36,880 --> 00:40:39,280
decentralized i will not give names of

1167
00:40:39,280 --> 00:40:41,839
blockchains but

1168
00:40:42,800 --> 00:40:46,480
all right thank you any other question

1169
00:40:46,640 --> 00:40:48,960
okay so we finished a little bit earlier

1170
00:40:48,960 --> 00:40:51,599
we have like a little bit less than 20

1171
00:40:51,599 --> 00:40:53,280
minutes so if you guys want to take a

1172
00:40:53,280 --> 00:40:54,800
break

1173
00:40:54,800 --> 00:40:56,319
and the next

1174
00:40:56,319 --> 00:41:01,480
the next talk starts at five thanks

