1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,440 --> 00:00:15,839
thank you

3
00:00:15,839 --> 00:00:18,160
hello everyone uh i would first like to

4
00:00:18,160 --> 00:00:20,240
thank you all for attending our talk

5
00:00:20,240 --> 00:00:22,800
the title of our talk is exploiting csv

6
00:00:22,800 --> 00:00:25,119
in webkit to break authentication and

7
00:00:25,119 --> 00:00:26,480
authorization

8
00:00:26,480 --> 00:00:28,880
um this is an updated version of our

9
00:00:28,880 --> 00:00:31,519
talk with new working poc with few

10
00:00:31,519 --> 00:00:32,880
caveats

11
00:00:32,880 --> 00:00:36,079
um now have you ever had an access to a

12
00:00:36,079 --> 00:00:38,160
zero debug which you could possibly use

13
00:00:38,160 --> 00:00:40,480
to take over accounts on any platform

14
00:00:40,480 --> 00:00:41,520
you want

15
00:00:41,520 --> 00:00:44,879
well we kinda did and today in this talk

16
00:00:44,879 --> 00:00:47,120
i will talk about a bug that enabled us

17
00:00:47,120 --> 00:00:49,440
to take over user accounts on most of

18
00:00:49,440 --> 00:00:51,440
the web applications out there

19
00:00:51,440 --> 00:00:54,800
but first a little bit about us

20
00:00:54,800 --> 00:00:57,199
uh my name is sachin takuri and i am a

21
00:00:57,199 --> 00:00:58,800
co-founder and security engineer at

22
00:00:58,800 --> 00:01:01,280
threatenics where i mostly do wave and

23
00:01:01,280 --> 00:01:03,760
mobile security stuff and i am also a

24
00:01:03,760 --> 00:01:05,680
co-founder of threatcon a security

25
00:01:05,680 --> 00:01:08,799
conference based in nepal

26
00:01:08,799 --> 00:01:11,439
hi i'm prakas i'm also a co-founder and

27
00:01:11,439 --> 00:01:13,840
a serious engineer at threatenics

28
00:01:13,840 --> 00:01:15,840
where i spend most of my time making web

29
00:01:15,840 --> 00:01:17,920
applications and sometimes playing with

30
00:01:17,920 --> 00:01:21,600
javascript and new browser apis

31
00:01:22,240 --> 00:01:25,040
um before we move on deep into the

32
00:01:25,040 --> 00:01:27,439
presentation here's a quick dldr version

33
00:01:27,439 --> 00:01:28,560
of the talk

34
00:01:28,560 --> 00:01:31,360
um long story short today we'll uh

35
00:01:31,360 --> 00:01:32,799
discuss a vulnerability that was

36
00:01:32,799 --> 00:01:35,280
reported to apple that apple didn't

37
00:01:35,280 --> 00:01:37,920
consider severe enough to fix quickly

38
00:01:37,920 --> 00:01:39,520
which then after waiting for a

39
00:01:39,520 --> 00:01:41,840
significant amount of time we decided to

40
00:01:41,840 --> 00:01:43,840
exploit and earn some bounties by

41
00:01:43,840 --> 00:01:46,399
reporting them to bug bounty programs

42
00:01:46,399 --> 00:01:48,880
the blog was in csp implementation of

43
00:01:48,880 --> 00:01:50,960
webkit a browser engine used by safari

44
00:01:50,960 --> 00:01:53,439
web browser as well as all ios web

45
00:01:53,439 --> 00:01:56,880
browsers including firefox and chrome

46
00:01:56,880 --> 00:01:59,759
the failure of webkit to adhere to w3c

47
00:01:59,759 --> 00:02:02,240
specification when a csv violation event

48
00:02:02,240 --> 00:02:03,920
is triggered leaked cross-site

49
00:02:03,920 --> 00:02:06,719
destination uri while redirecting from

50
00:02:06,719 --> 00:02:09,360
one origin to a different one now

51
00:02:09,360 --> 00:02:11,280
combine this with common practice of

52
00:02:11,280 --> 00:02:13,760
implementing sso's cross-site redirects

53
00:02:13,760 --> 00:02:16,000
to authenticate and authorize we were

54
00:02:16,000 --> 00:02:18,480
able to steal codes less access tokens

55
00:02:18,480 --> 00:02:20,800
or any other secrets that were part of

56
00:02:20,800 --> 00:02:23,360
the leaked uri which we could further

57
00:02:23,360 --> 00:02:26,080
use arbitrarily this allowed us to carry

58
00:02:26,080 --> 00:02:28,160
out attacks including but not limited to

59
00:02:28,160 --> 00:02:30,879
account takeovers csrf and sensitive

60
00:02:30,879 --> 00:02:32,720
information disclosures

61
00:02:32,720 --> 00:02:34,640
moving on now we'll discuss few

62
00:02:34,640 --> 00:02:37,120
technologies and concepts before moving

63
00:02:37,120 --> 00:02:39,519
on to the vulnerability itself um

64
00:02:39,519 --> 00:02:42,000
starting with sso

65
00:02:42,000 --> 00:02:44,080
have you ever seen these buttons where

66
00:02:44,080 --> 00:02:46,080
you can log in using facebook or google

67
00:02:46,080 --> 00:02:48,160
accounts on a third party website and

68
00:02:48,160 --> 00:02:51,120
wondered how this works well uh these

69
00:02:51,120 --> 00:02:53,599
features work through a technology known

70
00:02:53,599 --> 00:02:56,640
as sso uh single sign-on also commonly

71
00:02:56,640 --> 00:02:58,800
known as sso is a technology that

72
00:02:58,800 --> 00:03:00,800
provides centralized authentication

73
00:03:00,800 --> 00:03:01,840
service

74
00:03:01,840 --> 00:03:03,680
generally users are asked to provide

75
00:03:03,680 --> 00:03:05,840
their single set of credentials and

76
00:03:05,840 --> 00:03:08,000
authentication to all other applications

77
00:03:08,000 --> 00:03:09,760
are verified through a centralized

78
00:03:09,760 --> 00:03:12,239
authentication service its ease of use

79
00:03:12,239 --> 00:03:14,879
and effectiveness has made sso widely

80
00:03:14,879 --> 00:03:17,040
popular among modern applications in

81
00:03:17,040 --> 00:03:18,400
addition to being

82
00:03:18,400 --> 00:03:20,879
simple and easy to use sso is also

83
00:03:20,879 --> 00:03:22,720
considered more secure

84
00:03:22,720 --> 00:03:25,680
um sso commonly works by generating an

85
00:03:25,680 --> 00:03:27,440
authentication token which is then

86
00:03:27,440 --> 00:03:29,360
passed to other applications and

87
00:03:29,360 --> 00:03:32,560
services authentication token enables uh

88
00:03:32,560 --> 00:03:34,560
services to verify and authorize an

89
00:03:34,560 --> 00:03:36,879
identity which is why securing and

90
00:03:36,879 --> 00:03:38,720
making sure that authentication tokens

91
00:03:38,720 --> 00:03:44,120
are kept safely is of utmost importance

92
00:03:46,480 --> 00:03:47,519
now

93
00:03:47,519 --> 00:03:50,000
let's talk about csp our current theory

94
00:03:50,000 --> 00:03:54,239
policy with swamp sticker of our talk

95
00:03:54,720 --> 00:03:57,680
i assume we all know what csp is but

96
00:03:57,680 --> 00:04:00,879
let's just show you very quickly csp or

97
00:04:00,879 --> 00:04:03,120
currency policy is a

98
00:04:03,120 --> 00:04:05,360
set of policy or rules defining how

99
00:04:05,360 --> 00:04:07,360
browsers should load resources like

100
00:04:07,360 --> 00:04:10,959
javascript css or images and whether to

101
00:04:10,959 --> 00:04:13,760
allow or deny execution offsets uh let's

102
00:04:13,760 --> 00:04:15,760
define using an http response editor

103
00:04:15,760 --> 00:04:18,399
called concierge policy like some there

104
00:04:18,399 --> 00:04:19,839
in the slide

105
00:04:19,839 --> 00:04:22,079
or using meta tag with some exclusions

106
00:04:22,079 --> 00:04:25,840
like report uri or from frame ancestors

107
00:04:25,840 --> 00:04:28,320
csv has been around since 2010 and is

108
00:04:28,320 --> 00:04:31,440
now supported by all modern browsers

109
00:04:31,440 --> 00:04:32,880
we can also see it being widely

110
00:04:32,880 --> 00:04:35,600
implemented in web 2.0 apps and a lot of

111
00:04:35,600 --> 00:04:38,000
improvements happening over the years

112
00:04:38,000 --> 00:04:40,160
though setting the csv header still

113
00:04:40,160 --> 00:04:42,240
seems to be a hard task because it

114
00:04:42,240 --> 00:04:44,000
depends on resources used by its

115
00:04:44,000 --> 00:04:46,240
particular page or site and that's

116
00:04:46,240 --> 00:04:48,560
probably why there is not something as a

117
00:04:48,560 --> 00:04:51,440
default policy

118
00:04:53,199 --> 00:04:54,960
and i think it's not that uncommon to

119
00:04:54,960 --> 00:04:56,720
make mistakes when implementing a

120
00:04:56,720 --> 00:04:58,479
condensatory policy

121
00:04:58,479 --> 00:05:00,720
and for that reason we also have

122
00:05:00,720 --> 00:05:02,400
something called conditioned policy

123
00:05:02,400 --> 00:05:04,080
report only header

124
00:05:04,080 --> 00:05:07,039
and what it does is instead of actually

125
00:05:07,039 --> 00:05:08,479
sorry

126
00:05:08,479 --> 00:05:10,400
instead of actually executing the policy

127
00:05:10,400 --> 00:05:12,720
in action it only reports violations

128
00:05:12,720 --> 00:05:14,880
which makes much easier to debug if a

129
00:05:14,880 --> 00:05:17,520
policy isn't working as intended or not

130
00:05:17,520 --> 00:05:21,758
without breaking and breaking your site

131
00:05:22,320 --> 00:05:25,120
so when it comes to csp we always have

132
00:05:25,120 --> 00:05:27,759
what you call violation reports because

133
00:05:27,759 --> 00:05:29,440
what if a user tries to load a

134
00:05:29,440 --> 00:05:31,199
restricted resource right

135
00:05:31,199 --> 00:05:33,280
uh in such cases the browser blocks the

136
00:05:33,280 --> 00:05:34,880
request and

137
00:05:34,880 --> 00:05:37,039
dispatch a validation report

138
00:05:37,039 --> 00:05:39,280
and there are currently four ways to

139
00:05:39,280 --> 00:05:42,160
catch a dispatch report uh csp support

140
00:05:42,160 --> 00:05:44,400
uri directive report to

141
00:05:44,400 --> 00:05:46,960
reporting observer and a security policy

142
00:05:46,960 --> 00:05:49,039
evaluation event

143
00:05:49,039 --> 00:05:50,639
the report in general contains

144
00:05:50,639 --> 00:05:52,880
information on what causes

145
00:05:52,880 --> 00:05:55,199
what causes violation like violated

146
00:05:55,199 --> 00:05:57,520
directive effective policy sample

147
00:05:57,520 --> 00:06:00,240
bacteria and so on

148
00:06:00,240 --> 00:06:02,880
the block blocked uri in

149
00:06:02,880 --> 00:06:05,520
among others is the url that the user

150
00:06:05,520 --> 00:06:06,800
tried to load

151
00:06:06,800 --> 00:06:09,039
and that could be something sensitive if

152
00:06:09,039 --> 00:06:12,000
the if it is a result of a redirect for

153
00:06:12,000 --> 00:06:14,800
example in case of ss in case of oauth

154
00:06:14,800 --> 00:06:16,000
it's uh

155
00:06:16,000 --> 00:06:18,479
it contains code or x token which makes

156
00:06:18,479 --> 00:06:21,120
it pretty much sensitive so to avoid

157
00:06:21,120 --> 00:06:22,960
leaking sensitive information

158
00:06:22,960 --> 00:06:26,000
uh w3c rec wcc recommends user agents

159
00:06:26,000 --> 00:06:27,919
only include the url of the original

160
00:06:27,919 --> 00:06:29,360
request

161
00:06:29,360 --> 00:06:31,680
the image here at the bottom is from csp

162
00:06:31,680 --> 00:06:34,800
1.0 candidate recommendation from 2012

163
00:06:34,800 --> 00:06:38,319
and even then we had such cases covered

164
00:06:38,319 --> 00:06:40,560
it says the violation of reporting

165
00:06:40,560 --> 00:06:42,800
mechanism has been designed in a way to

166
00:06:42,800 --> 00:06:44,960
mitigate the possibilities of probing

167
00:06:44,960 --> 00:06:47,440
the behavior of now the server and it

168
00:06:47,440 --> 00:06:50,000
also explains why that is if validation

169
00:06:50,000 --> 00:06:52,240
reports contain the full blocked url the

170
00:06:52,240 --> 00:06:54,160
report might contain sensitive

171
00:06:54,160 --> 00:06:56,319
information contained in the redirectory

172
00:06:56,319 --> 00:06:58,319
right such as sus9 and various which is

173
00:06:58,319 --> 00:07:00,319
exactly the case for oauth

174
00:07:00,319 --> 00:07:02,720
and as sachin success said it's pretty

175
00:07:02,720 --> 00:07:05,360
common in case of ssos and earth which

176
00:07:05,360 --> 00:07:08,800
we explore in our research

177
00:07:08,800 --> 00:07:09,680
so

178
00:07:09,680 --> 00:07:11,360
if you notice it recommends including

179
00:07:11,360 --> 00:07:13,360
the origin of the blocked uri which is

180
00:07:13,360 --> 00:07:15,520
still an issue and we have a long

181
00:07:15,520 --> 00:07:19,039
history of reports on that

182
00:07:19,360 --> 00:07:20,240
uh

183
00:07:20,240 --> 00:07:22,080
this is a thought history that we

184
00:07:22,080 --> 00:07:24,800
collected from chromium tissues which

185
00:07:24,800 --> 00:07:26,639
leaked the origin of blocked uri in one

186
00:07:26,639 --> 00:07:28,880
way or another using csp

187
00:07:28,880 --> 00:07:30,479
and all these reports share the same

188
00:07:30,479 --> 00:07:32,639
problem uh that is the leakage of course

189
00:07:32,639 --> 00:07:34,479
there is in redirect url

190
00:07:34,479 --> 00:07:36,240
so we'll only talk about the first one

191
00:07:36,240 --> 00:07:39,440
from 2013 by igor homaco when csp was

192
00:07:39,440 --> 00:07:42,560
still in its infancy

193
00:07:43,039 --> 00:07:44,639
uh well this has been coded directly

194
00:07:44,639 --> 00:07:47,120
from his blog post where he demonstrated

195
00:07:47,120 --> 00:07:49,599
what we could achieve by using csp's

196
00:07:49,599 --> 00:07:51,280
block uri directive

197
00:07:51,280 --> 00:07:54,560
and we already went over what w3 and w3c

198
00:07:54,560 --> 00:07:57,120
recommends on that and i hope everyone

199
00:07:57,120 --> 00:07:59,199
remembers what it said

200
00:07:59,199 --> 00:08:02,960
so it says we can abuse csv to detect if

201
00:08:02,960 --> 00:08:05,440
a user has authorized certain apps or

202
00:08:05,440 --> 00:08:07,199
clients because

203
00:08:07,199 --> 00:08:09,039
all authorized apps will redirect to

204
00:08:09,039 --> 00:08:10,479
their home page or somewhere else

205
00:08:10,479 --> 00:08:12,479
instead of login authorization page in

206
00:08:12,479 --> 00:08:14,319
case of in case the application has

207
00:08:14,319 --> 00:08:15,919
already been authorized

208
00:08:15,919 --> 00:08:17,599
uh for example if you have already

209
00:08:17,599 --> 00:08:19,199
authorized instagram for on your

210
00:08:19,199 --> 00:08:20,879
facebook sending a request to facebook

211
00:08:20,879 --> 00:08:22,479
at endpoint for

212
00:08:22,479 --> 00:08:24,080
instagram who would redirect to

213
00:08:24,080 --> 00:08:26,319
instagram instead of facebook and

214
00:08:26,319 --> 00:08:28,639
surprisingly still works on chrome and

215
00:08:28,639 --> 00:08:31,280
safari with frames and there appears to

216
00:08:31,280 --> 00:08:33,760
be multiple ways to figure out the host

217
00:08:33,760 --> 00:08:35,440
anyway and that's probably why it's

218
00:08:35,440 --> 00:08:38,080
still on it's still not fixed

219
00:08:38,080 --> 00:08:40,000
but hopefully it will fix since it will

220
00:08:40,000 --> 00:08:41,279
be fixed soon

221
00:08:41,279 --> 00:08:43,519
and not just the reason we've also found

222
00:08:43,519 --> 00:08:45,839
reports leaking full blocked ui in 2020

223
00:08:45,839 --> 00:08:49,040
and 2021 which were very similar to ours

224
00:08:49,040 --> 00:08:53,160
that we'll talk about shortly

225
00:08:54,240 --> 00:08:57,680
um now uh let's discuss the root cause

226
00:08:57,680 --> 00:08:59,200
of the vulnerability

227
00:08:59,200 --> 00:09:02,480
um we can define a csp policy in such a

228
00:09:02,480 --> 00:09:04,880
way that where whenever a redirect

229
00:09:04,880 --> 00:09:06,320
happens to a domain with different

230
00:09:06,320 --> 00:09:08,720
origin which is also commonly known as

231
00:09:08,720 --> 00:09:11,760
cross origin a csp violation occurs and

232
00:09:11,760 --> 00:09:13,760
a security policy violation event is

233
00:09:13,760 --> 00:09:14,640
fired

234
00:09:14,640 --> 00:09:15,760
as you can

235
00:09:15,760 --> 00:09:18,880
see in this figure our domain cm2.pw

236
00:09:18,880 --> 00:09:21,440
we described csp policy makes a fetch

237
00:09:21,440 --> 00:09:23,920
request to domain1.com

238
00:09:23,920 --> 00:09:26,640
now the response header from domain1.com

239
00:09:26,640 --> 00:09:28,640
contains a location header that now

240
00:09:28,640 --> 00:09:30,720
redirects to a different

241
00:09:30,720 --> 00:09:32,560
redirects to a domain with different

242
00:09:32,560 --> 00:09:36,480
origin domain2.com but due to our csp

243
00:09:36,480 --> 00:09:38,959
policy which we defined the request to

244
00:09:38,959 --> 00:09:42,320
noventu.com is blocked and a csv

245
00:09:42,320 --> 00:09:44,959
violation event is fired

246
00:09:44,959 --> 00:09:46,320
now

247
00:09:46,320 --> 00:09:48,720
when a security policy violation event

248
00:09:48,720 --> 00:09:51,120
is fired it uses security policy

249
00:09:51,120 --> 00:09:53,120
violation event interface at target with

250
00:09:53,120 --> 00:09:55,519
different attributes and while setting

251
00:09:55,519 --> 00:09:57,440
values for these attributes a failure by

252
00:09:57,440 --> 00:10:00,560
webkit to adhere to w36 specification

253
00:10:00,560 --> 00:10:02,880
resulted in leaking 3ox redirection

254
00:10:02,880 --> 00:10:05,600
location in document uri attribute as

255
00:10:05,600 --> 00:10:08,320
you can see in the example fb.com secret

256
00:10:08,320 --> 00:10:11,040
here redirects to facebook.com

257
00:10:11,040 --> 00:10:12,959
secretary then you can see the

258
00:10:12,959 --> 00:10:14,800
difference in values for attribute

259
00:10:14,800 --> 00:10:17,519
document uri set by safari and other

260
00:10:17,519 --> 00:10:19,360
browsers while other browsers who have

261
00:10:19,360 --> 00:10:22,640
followed specification mentioned by w3c

262
00:10:22,640 --> 00:10:25,519
seems to uh set those values of uri with

263
00:10:25,519 --> 00:10:27,680
values from where original fetch request

264
00:10:27,680 --> 00:10:30,079
was made safari we failed to follow the

265
00:10:30,079 --> 00:10:33,120
w3c specification set those values with

266
00:10:33,120 --> 00:10:36,480
final redirection uri

267
00:10:36,640 --> 00:10:37,600
now

268
00:10:37,600 --> 00:10:39,519
you might be wondering how can this be

269
00:10:39,519 --> 00:10:41,440
exploited in sso

270
00:10:41,440 --> 00:10:43,440
as you can see in this figure here when

271
00:10:43,440 --> 00:10:46,480
a user loads example.com it first checks

272
00:10:46,480 --> 00:10:49,360
if the user is authenticated or not and

273
00:10:49,360 --> 00:10:51,839
if the user is not authenticated is not

274
00:10:51,839 --> 00:10:53,839
authenticated then as shown in the

275
00:10:53,839 --> 00:10:55,440
figure it will send the user to

276
00:10:55,440 --> 00:10:57,040
hot.example.com

277
00:10:57,040 --> 00:10:59,519
which is a sso domain that provides

278
00:10:59,519 --> 00:11:01,519
centralized authentication

279
00:11:01,519 --> 00:11:04,399
now after verifying the user the user is

280
00:11:04,399 --> 00:11:07,279
then redirected back to example.com with

281
00:11:07,279 --> 00:11:09,040
an authentication token

282
00:11:09,040 --> 00:11:10,959
now the general common practice while

283
00:11:10,959 --> 00:11:13,200
implementing sso is to use different

284
00:11:13,200 --> 00:11:15,279
subdomain or an entirely different

285
00:11:15,279 --> 00:11:17,200
domain which then doesn't meet the

286
00:11:17,200 --> 00:11:19,360
criteria to be defined as same origin so

287
00:11:19,360 --> 00:11:21,600
the final redirection that happens from

288
00:11:21,600 --> 00:11:24,160
ss domain to the final domain or in the

289
00:11:24,160 --> 00:11:26,200
case as shown in the figure from

290
00:11:26,200 --> 00:11:29,279
auth.example.com to example.com will be

291
00:11:29,279 --> 00:11:31,680
crossovers in thus allowing an attacker

292
00:11:31,680 --> 00:11:34,320
to steal the final redirection uri in

293
00:11:34,320 --> 00:11:36,079
today's modern application where

294
00:11:36,079 --> 00:11:37,920
authentication and authorizations are

295
00:11:37,920 --> 00:11:40,240
heavily dependent on technologies such

296
00:11:40,240 --> 00:11:43,440
as oauth sso and jwt where secrets are

297
00:11:43,440 --> 00:11:45,279
passed through urls the leak of the

298
00:11:45,279 --> 00:11:47,920
final redirection uri made applications

299
00:11:47,920 --> 00:11:50,079
using this technology is almost always

300
00:11:50,079 --> 00:11:53,079
vulnerable

301
00:11:56,160 --> 00:11:58,240
uh since this is fixed already we'll

302
00:11:58,240 --> 00:12:00,880
just escape this part but as you can see

303
00:12:00,880 --> 00:12:02,800
we waited almost a year before we

304
00:12:02,800 --> 00:12:06,800
started exploring everybody in the world

305
00:12:08,320 --> 00:12:10,399
moving on to poc the exploit was very

306
00:12:10,399 --> 00:12:11,440
simple

307
00:12:11,440 --> 00:12:14,399
uh we set up a page with csp as shown in

308
00:12:14,399 --> 00:12:15,680
this slide there

309
00:12:15,680 --> 00:12:17,519
uh we just whitelist the domain we are

310
00:12:17,519 --> 00:12:19,839
sending requests to and add an event

311
00:12:19,839 --> 00:12:21,120
listener for a serious positive

312
00:12:21,120 --> 00:12:23,920
violation event then send a request uh

313
00:12:23,920 --> 00:12:26,000
and that's pretty much it so sending a

314
00:12:26,000 --> 00:12:27,839
request to an i think authorization

315
00:12:27,839 --> 00:12:30,720
endpoint issues a redirect uh in to

316
00:12:30,720 --> 00:12:33,360
another domain with code or token open

317
00:12:33,360 --> 00:12:35,120
appended to the url which is typically

318
00:12:35,120 --> 00:12:38,399
the case for oauth or ssos

319
00:12:38,399 --> 00:12:40,079
whereas the policy only allows loading

320
00:12:40,079 --> 00:12:41,920
your resources from the page itself and

321
00:12:41,920 --> 00:12:44,240
the domain specified

322
00:12:44,240 --> 00:12:46,880
that is auth.example.com here so as

323
00:12:46,880 --> 00:12:49,120
certain said earlier an attempt to make

324
00:12:49,120 --> 00:12:51,120
attempt to load resources from any other

325
00:12:51,120 --> 00:12:52,880
domain so it validate the

326
00:12:52,880 --> 00:12:55,040
policy and trigger a security policy

327
00:12:55,040 --> 00:12:57,200
evaluation event uh then the document

328
00:12:57,200 --> 00:12:59,600
uri attribute would have the value of

329
00:12:59,600 --> 00:13:02,079
the actual blocked uri and it it

330
00:13:02,079 --> 00:13:04,560
contained the full block a full url not

331
00:13:04,560 --> 00:13:06,800
just the origin

332
00:13:06,800 --> 00:13:09,360
so this was the original poc that we

333
00:13:09,360 --> 00:13:11,600
reported to apple and that

334
00:13:11,600 --> 00:13:12,560
we

335
00:13:12,560 --> 00:13:15,839
uh talked about in our talk at blackhead

336
00:13:15,839 --> 00:13:17,120
but we have

337
00:13:17,120 --> 00:13:19,440
we found several bypasses later on that

338
00:13:19,440 --> 00:13:22,720
we'll talk about later now

339
00:13:22,720 --> 00:13:23,519
so

340
00:13:23,519 --> 00:13:25,519
we have we just pushed an update to our

341
00:13:25,519 --> 00:13:27,519
csv playground with it with the new

342
00:13:27,519 --> 00:13:30,000
exploit that we'll talk a little later

343
00:13:30,000 --> 00:13:32,160
now and this to make it easier for

344
00:13:32,160 --> 00:13:33,360
everyone to experiment with the

345
00:13:33,360 --> 00:13:35,120
vulnerability itself

346
00:13:35,120 --> 00:13:37,120
and the usage is as simple as on the

347
00:13:37,120 --> 00:13:38,800
screen side we just fast in a number of

348
00:13:38,800 --> 00:13:41,120
parameters and the page then sets the

349
00:13:41,120 --> 00:13:44,160
appropriate csv policy using the anchor

350
00:13:44,160 --> 00:13:47,760
parameters and then it presents a button

351
00:13:47,760 --> 00:13:49,680
to

352
00:13:49,680 --> 00:13:52,000
proceed further which is required to

353
00:13:52,000 --> 00:13:54,079
open a pop-up and then clicking the

354
00:13:54,079 --> 00:13:56,880
button would and then submit your

355
00:13:56,880 --> 00:13:59,279
form and send request to the url

356
00:13:59,279 --> 00:14:02,160
specified and then that will trigger the

357
00:14:02,160 --> 00:14:04,399
csp evaluation event which will contain

358
00:14:04,399 --> 00:14:08,800
the redirect url which in this case

359
00:14:08,800 --> 00:14:11,279
which in real life would contain the url

360
00:14:11,279 --> 00:14:13,199
with code or token

361
00:14:13,199 --> 00:14:14,639
so

362
00:14:14,639 --> 00:14:17,680
the source code is also on github and so

363
00:14:17,680 --> 00:14:21,199
feel free to use as please

364
00:14:22,560 --> 00:14:24,720
yes

365
00:14:24,720 --> 00:14:28,480
so uh now we have a short demo

366
00:14:28,480 --> 00:14:30,880
in this demo uh we'll demonstrate how we

367
00:14:30,880 --> 00:14:32,320
were able to

368
00:14:32,320 --> 00:14:34,560
take over instagram accounts using

369
00:14:34,560 --> 00:14:36,959
facebook's auth and that we also

370
00:14:36,959 --> 00:14:40,518
reported to facebook

371
00:14:47,519 --> 00:14:49,519
so uh the attacker will first get the

372
00:14:49,519 --> 00:14:51,199
oauth endpoint for the target

373
00:14:51,199 --> 00:14:52,639
application

374
00:14:52,639 --> 00:14:54,639
and that would be the location where the

375
00:14:54,639 --> 00:14:58,360
what is hosted

376
00:15:05,760 --> 00:15:07,680
and uh please make a note that the

377
00:15:07,680 --> 00:15:10,399
attacker will also

378
00:15:10,399 --> 00:15:12,639
will also generate a non-sort of state

379
00:15:12,639 --> 00:15:16,000
value that will be used in this attack

380
00:15:16,000 --> 00:15:17,199
and then

381
00:15:17,199 --> 00:15:20,560
the attacker will uh craft that url

382
00:15:20,560 --> 00:15:23,600
into the uh poc url that we uh that

383
00:15:23,600 --> 00:15:27,839
broadcasters explained about

384
00:15:30,240 --> 00:15:32,639
and then this particular url will be

385
00:15:32,639 --> 00:15:36,120
sent to the victim

386
00:15:45,199 --> 00:15:47,600
and this is the victims browser where

387
00:15:47,600 --> 00:15:48,800
you would

388
00:15:48,800 --> 00:15:51,519
open up the attacker control domain

389
00:15:51,519 --> 00:15:54,079
as you can see the victims need to be

390
00:15:54,079 --> 00:15:55,680
signed on obviously for the account

391
00:15:55,680 --> 00:15:59,079
takeover issue

392
00:16:15,600 --> 00:16:17,600
and as you can see uh

393
00:16:17,600 --> 00:16:20,240
a pop-up opens up with access facebook

394
00:16:20,240 --> 00:16:22,720
access tokens which will then enable an

395
00:16:22,720 --> 00:16:25,920
attacker to login into instagram and uh

396
00:16:25,920 --> 00:16:28,800
this is a one click account takeover poc

397
00:16:28,800 --> 00:16:30,560
we also had uh zero click account

398
00:16:30,560 --> 00:16:33,440
takeover pocs and previous person and uh

399
00:16:33,440 --> 00:16:36,480
we also have uh one similar to that that

400
00:16:36,480 --> 00:16:40,639
broadcast will uh discuss later

401
00:16:44,000 --> 00:16:46,720
so yeah now the attacker is

402
00:16:46,720 --> 00:16:49,839
logged in as a big team so this is how

403
00:16:49,839 --> 00:16:52,320
we demonstrated an instagram account

404
00:16:52,320 --> 00:16:54,079
takeover using

405
00:16:54,079 --> 00:16:57,440
facebook oauth and the bug that was

406
00:16:57,440 --> 00:17:02,440
ignored by apple for a very long time

407
00:17:04,559 --> 00:17:06,240
okay um

408
00:17:06,240 --> 00:17:09,359
now uh let's uh discuss impact

409
00:17:09,359 --> 00:17:12,000
uh it took us a while to understand uh

410
00:17:12,000 --> 00:17:14,559
the full impact the vulnerability had

411
00:17:14,559 --> 00:17:16,720
the vulnerability did not just affect a

412
00:17:16,720 --> 00:17:18,799
safari browser but because of the

413
00:17:18,799 --> 00:17:21,679
apple's app store policies that states

414
00:17:21,679 --> 00:17:24,400
that apps on ios devices that browse the

415
00:17:24,400 --> 00:17:26,959
web must use the ios webkit framework

416
00:17:26,959 --> 00:17:29,760
and webkit javascript which means that

417
00:17:29,760 --> 00:17:31,600
web browsers can't implement their own

418
00:17:31,600 --> 00:17:34,000
rendering engines they must embed a

419
00:17:34,000 --> 00:17:36,080
version of safari's rendering engine

420
00:17:36,080 --> 00:17:38,640
which then made browsers like firefox

421
00:17:38,640 --> 00:17:41,840
chrome opera in ios devices vulnerable

422
00:17:41,840 --> 00:17:45,200
and due to the nature of design of oauth

423
00:17:45,200 --> 00:17:47,039
where almost every implementation of

424
00:17:47,039 --> 00:17:49,840
oauth that exists were vulnerable using

425
00:17:49,840 --> 00:17:51,919
the blog we could take over facebook

426
00:17:51,919 --> 00:17:53,840
instagram and whatsapp accounts the

427
00:17:53,840 --> 00:17:56,240
boggles affected google's sso which

428
00:17:56,240 --> 00:17:58,320
means google products using google

429
00:17:58,320 --> 00:18:00,080
accounts central authentication we're

430
00:18:00,080 --> 00:18:02,720
also vulnerable cryptocurrency platforms

431
00:18:02,720 --> 00:18:04,559
social networking platform ecommerce

432
00:18:04,559 --> 00:18:07,200
platform and more um in today's modern

433
00:18:07,200 --> 00:18:08,880
application it's very rare to find an

434
00:18:08,880 --> 00:18:11,120
application not using oauth so let's

435
00:18:11,120 --> 00:18:13,760
just say the numbers were very high and

436
00:18:13,760 --> 00:18:15,919
since the vulnerability affected sso so

437
00:18:15,919 --> 00:18:17,679
it's obvious that different sso

438
00:18:17,679 --> 00:18:20,720
providers were also affected by this

439
00:18:20,720 --> 00:18:21,760
and

440
00:18:21,760 --> 00:18:24,400
uh nowadays many applications make use

441
00:18:24,400 --> 00:18:26,160
of login with third-party features such

442
00:18:26,160 --> 00:18:28,320
as login with facebook or google to

443
00:18:28,320 --> 00:18:30,240
provide the user with easy and seamless

444
00:18:30,240 --> 00:18:32,640
authentication experience and since most

445
00:18:32,640 --> 00:18:35,200
of these uh features make use of oauth

446
00:18:35,200 --> 00:18:37,120
these applications implementing login

447
00:18:37,120 --> 00:18:39,600
with feature were also affected thus

448
00:18:39,600 --> 00:18:41,120
allowing an attacker to take over

449
00:18:41,120 --> 00:18:42,880
accounts and platform implementing these

450
00:18:42,880 --> 00:18:45,600
features for example let's say you have

451
00:18:45,600 --> 00:18:47,520
an ecommerce website where you have a

452
00:18:47,520 --> 00:18:49,840
feature that allows users to log in with

453
00:18:49,840 --> 00:18:52,400
facebook account then an attacker could

454
00:18:52,400 --> 00:18:54,320
basically take over accounts of your

455
00:18:54,320 --> 00:18:56,240
users in your ecommerce website by

456
00:18:56,240 --> 00:18:59,760
stealing facebook or tokens

457
00:18:59,760 --> 00:19:00,880
um

458
00:19:00,880 --> 00:19:03,360
moving on uh let's discuss some red

459
00:19:03,360 --> 00:19:05,280
roadblocks and uh general

460
00:19:05,280 --> 00:19:07,600
misunderstanding that we saw among

461
00:19:07,600 --> 00:19:10,240
security teams of different bug bounty

462
00:19:10,240 --> 00:19:13,200
programs that we reported to

463
00:19:13,200 --> 00:19:16,080
let's start it let's start with itp or

464
00:19:16,080 --> 00:19:18,559
intelligent tracking prevention which is

465
00:19:18,559 --> 00:19:20,160
a privacy feature developed and

466
00:19:20,160 --> 00:19:22,640
implemented by webkit and has been in

467
00:19:22,640 --> 00:19:24,960
use since october 2017.

468
00:19:24,960 --> 00:19:27,039
itp uses machine learning model to

469
00:19:27,039 --> 00:19:29,039
detect cross-site tracking capabilities

470
00:19:29,039 --> 00:19:31,520
and aims to reduce them by taking

471
00:19:31,520 --> 00:19:32,880
different actions such as full

472
00:19:32,880 --> 00:19:35,200
third-party cookie blocking reducing the

473
00:19:35,200 --> 00:19:37,360
accessibility and longevity of party

474
00:19:37,360 --> 00:19:39,679
tokens and cookies sorry first party

475
00:19:39,679 --> 00:19:41,919
cookies and then local storage capping

476
00:19:41,919 --> 00:19:43,679
and deletion downgrading third party

477
00:19:43,679 --> 00:19:45,200
referrers and more

478
00:19:45,200 --> 00:19:47,520
and due to the nature of the attack

479
00:19:47,520 --> 00:19:49,360
where the bug relied on making third

480
00:19:49,360 --> 00:19:52,160
party requests itp rendered the attack

481
00:19:52,160 --> 00:19:54,799
on usable on latest version of webkit

482
00:19:54,799 --> 00:19:56,720
and according to documentation from

483
00:19:56,720 --> 00:19:58,880
webkit to circumvent

484
00:19:58,880 --> 00:20:01,200
it there needs to be a user interaction

485
00:20:01,200 --> 00:20:03,360
it could either be a tab

486
00:20:03,360 --> 00:20:05,840
a click or a use of the keyword with

487
00:20:05,840 --> 00:20:08,400
your website as first party so uh in a

488
00:20:08,400 --> 00:20:11,120
real attack scenario what we did was we

489
00:20:11,120 --> 00:20:13,679
opened up a tab using window.open and

490
00:20:13,679 --> 00:20:16,240
then we kept pulling uh kept calling the

491
00:20:16,240 --> 00:20:17,919
vulnerable endpoint until the user

492
00:20:17,919 --> 00:20:20,720
interacts with it and much later we

493
00:20:20,720 --> 00:20:23,280
discovered another workaround where we

494
00:20:23,280 --> 00:20:25,600
found a way to make the exploit work

495
00:20:25,600 --> 00:20:28,320
without triggering the itp by using form

496
00:20:28,320 --> 00:20:30,240
action attribute which broadcast will

497
00:20:30,240 --> 00:20:31,679
discuss more about

498
00:20:31,679 --> 00:20:34,159
and when we started uh submitting this

499
00:20:34,159 --> 00:20:35,840
vulnerability to several block boundary

500
00:20:35,840 --> 00:20:38,400
programs we noticed that a few of them

501
00:20:38,400 --> 00:20:40,720
had uh several misunderstanding around

502
00:20:40,720 --> 00:20:43,120
them so uh discuss a little bit about

503
00:20:43,120 --> 00:20:45,760
that as well and uh one of the common

504
00:20:45,760 --> 00:20:48,080
misunderstanding among security teams of

505
00:20:48,080 --> 00:20:49,600
several programs was around

506
00:20:49,600 --> 00:20:51,280
authorization code

507
00:20:51,280 --> 00:20:53,600
unaware about its capabilities and how

508
00:20:53,600 --> 00:20:55,200
sensitive it is

509
00:20:55,200 --> 00:20:56,960
the misunderstanding was that without

510
00:20:56,960 --> 00:20:58,960
the ability to exchange authorization

511
00:20:58,960 --> 00:21:01,360
code for access tokens the authorization

512
00:21:01,360 --> 00:21:03,280
code were useless since exchanging them

513
00:21:03,280 --> 00:21:05,440
required application id and application

514
00:21:05,440 --> 00:21:08,080
secret while the statement above is true

515
00:21:08,080 --> 00:21:09,840
in a case where oauth was used for

516
00:21:09,840 --> 00:21:12,080
authentication simply having an access

517
00:21:12,080 --> 00:21:14,240
to authentication code was enough to get

518
00:21:14,240 --> 00:21:16,320
access to victims account making a

519
00:21:16,320 --> 00:21:18,400
request to an authorization endpoint

520
00:21:18,400 --> 00:21:20,720
with stolen authorization code with

521
00:21:20,720 --> 00:21:23,200
attacker generated state or nonce value

522
00:21:23,200 --> 00:21:25,039
would allow an author

523
00:21:25,039 --> 00:21:27,039
would allow an attacker to authenticate

524
00:21:27,039 --> 00:21:29,520
into victims account and

525
00:21:29,520 --> 00:21:31,600
another common misunderstanding was with

526
00:21:31,600 --> 00:21:34,240
regards to state or non value and its

527
00:21:34,240 --> 00:21:36,720
capabilities to prevent attacks in earth

528
00:21:36,720 --> 00:21:39,120
while using state in oauth is an

529
00:21:39,120 --> 00:21:41,200
excellent way to prevent csrf attacks

530
00:21:41,200 --> 00:21:43,600
and to redirect users to where they were

531
00:21:43,600 --> 00:21:45,440
before the authentication process

532
00:21:45,440 --> 00:21:48,000
started apart from that uh the state

533
00:21:48,000 --> 00:21:49,679
really doesn't provide any additional

534
00:21:49,679 --> 00:21:52,400
security features and even if the state

535
00:21:52,400 --> 00:21:55,280
value is bind to a token an attacker can

536
00:21:55,280 --> 00:21:57,440
always uh generate a fresh state value

537
00:21:57,440 --> 00:21:59,679
which then can be attached to an

538
00:21:59,679 --> 00:22:02,000
endpoint url to send to the victim the

539
00:22:02,000 --> 00:22:04,320
resulting token of uh that particular

540
00:22:04,320 --> 00:22:06,799
request then can be used by an attacker

541
00:22:06,799 --> 00:22:09,360
without an issue and the same thing was

542
00:22:09,360 --> 00:22:12,000
also demonstrated uh in our demo evolve

543
00:22:12,000 --> 00:22:14,240
where we saw that nonce value that was

544
00:22:14,240 --> 00:22:16,480
implemented in facebook and the state

545
00:22:16,480 --> 00:22:20,799
value did nothing to prevent the attack

546
00:22:21,120 --> 00:22:22,400
now um

547
00:22:22,400 --> 00:22:24,720
so these are some stats uh based on

548
00:22:24,720 --> 00:22:27,280
bhagavanji programs and reports we made

549
00:22:27,280 --> 00:22:30,240
um in total we were able to harvest more

550
00:22:30,240 --> 00:22:33,600
than 100k dollars in bounties and uh the

551
00:22:33,600 --> 00:22:35,760
response from the bulk bounty programs

552
00:22:35,760 --> 00:22:37,840
were kind of mixed while some programs

553
00:22:37,840 --> 00:22:39,840
took the issue very seriously and

554
00:22:39,840 --> 00:22:42,240
applied a fix in under 21 hours which

555
00:22:42,240 --> 00:22:44,320
was uh really impressive some took

556
00:22:44,320 --> 00:22:46,080
months to just understand the

557
00:22:46,080 --> 00:22:48,000
vulnerability and some of the programs

558
00:22:48,000 --> 00:22:50,000
also relied on webkit to come up with a

559
00:22:50,000 --> 00:22:50,799
fix

560
00:22:50,799 --> 00:22:51,600
while

561
00:22:51,600 --> 00:22:53,760
some programs like dropbox and poloniks

562
00:22:53,760 --> 00:22:56,000
took it one step further by using their

563
00:22:56,000 --> 00:22:57,840
contacts at apple and asking them to

564
00:22:57,840 --> 00:22:59,600
come up with a fix

565
00:22:59,600 --> 00:23:01,840
the highest single reward was given by

566
00:23:01,840 --> 00:23:03,919
coinbase which was also the fastest

567
00:23:03,919 --> 00:23:07,200
program to fix the issue and apple took

568
00:23:07,200 --> 00:23:11,039
more than a year a total of 457 days to

569
00:23:11,039 --> 00:23:12,880
come up with a fix and in the end

570
00:23:12,880 --> 00:23:15,520
decided that the bug does not qualify to

571
00:23:15,520 --> 00:23:17,919
be awarded a bounty because it does not

572
00:23:17,919 --> 00:23:19,520
meet the apple's published bounty

573
00:23:19,520 --> 00:23:22,559
categories and ironically while this

574
00:23:22,559 --> 00:23:25,200
blog in webkit made so many applications

575
00:23:25,200 --> 00:23:27,200
in the internet vulnerable the apple's

576
00:23:27,200 --> 00:23:29,679
implementation of sso and oauth were not

577
00:23:29,679 --> 00:23:32,240
flanderable

578
00:23:34,799 --> 00:23:36,080
we saw how we can exploit the

579
00:23:36,080 --> 00:23:39,200
vulnerability and how severe it could be

580
00:23:39,200 --> 00:23:42,480
now let's discuss some fixes as well

581
00:23:42,480 --> 00:23:44,880
as a developer a site owner we can use

582
00:23:44,880 --> 00:23:46,960
any or a combination of these methods to

583
00:23:46,960 --> 00:23:49,679
prevent such variabilities altogether

584
00:23:49,679 --> 00:23:51,600
they're all very easy to understand and

585
00:23:51,600 --> 00:23:53,840
implement as well and the first one is

586
00:23:53,840 --> 00:23:56,640
to use post method instead of get which

587
00:23:56,640 --> 00:23:58,000
actually aligns with the practice of

588
00:23:58,000 --> 00:23:59,679
never sending any sensitive information

589
00:23:59,679 --> 00:24:01,360
over the url

590
00:24:01,360 --> 00:24:03,600
for example saml or security assertion

591
00:24:03,600 --> 00:24:05,840
macro blanket already uses post instead

592
00:24:05,840 --> 00:24:08,240
of git for transferring tokens

593
00:24:08,240 --> 00:24:10,640
the second one is to use post messages

594
00:24:10,640 --> 00:24:13,440
for crosstalk and communication

595
00:24:13,440 --> 00:24:15,679
these two fixes actually are already

596
00:24:15,679 --> 00:24:16,960
available in

597
00:24:16,960 --> 00:24:20,320
by all for what are open id connect as

598
00:24:20,320 --> 00:24:25,039
can be seen on the image on the right

599
00:24:26,000 --> 00:24:28,159
they could be specified by via response

600
00:24:28,159 --> 00:24:29,840
on this mode parameter as long as the

601
00:24:29,840 --> 00:24:32,000
authorization server supports them

602
00:24:32,000 --> 00:24:34,080
however it's still necessary to disable

603
00:24:34,080 --> 00:24:36,559
or remove this support for query and

604
00:24:36,559 --> 00:24:39,360
fragment modes which which is again the

605
00:24:39,360 --> 00:24:41,440
three three or two server side redirect

606
00:24:41,440 --> 00:24:43,360
modes

607
00:24:43,360 --> 00:24:45,440
while center cookies help prevent almost

608
00:24:45,440 --> 00:24:47,039
all cross-site attacks it appears it

609
00:24:47,039 --> 00:24:49,440
doesn't help in this case so

610
00:24:49,440 --> 00:24:52,240
not if the cookies are same site lacks

611
00:24:52,240 --> 00:24:54,720
so we have removed it from our list of

612
00:24:54,720 --> 00:24:57,440
recommendation recommended approach

613
00:24:57,440 --> 00:24:59,279
because a security researcher named

614
00:24:59,279 --> 00:25:02,799
julian or duvops historian disclosed

615
00:25:02,799 --> 00:25:04,640
that it was possible to bypass same side

616
00:25:04,640 --> 00:25:07,440
lex cookies with csv's form action

617
00:25:07,440 --> 00:25:09,760
and with a little bit of fuzzing we are

618
00:25:09,760 --> 00:25:12,960
able to get it to work in safari as well

619
00:25:12,960 --> 00:25:15,120
in insert what we do is submit a form

620
00:25:15,120 --> 00:25:17,679
with methods set to get which as you may

621
00:25:17,679 --> 00:25:19,840
have guessed is sim is a simple

622
00:25:19,840 --> 00:25:22,720
navigational request so if the url is

623
00:25:22,720 --> 00:25:25,039
not specified explicitly in csv form

624
00:25:25,039 --> 00:25:27,120
action it triggers a violation

625
00:25:27,120 --> 00:25:29,520
so while we did mention it as one

626
00:25:29,520 --> 00:25:31,120
possible approach in our previous stock

627
00:25:31,120 --> 00:25:33,200
we have removed it now because it

628
00:25:33,200 --> 00:25:34,960
doesn't really prevent the this

629
00:25:34,960 --> 00:25:38,320
particular instance of cross-site attack

630
00:25:38,320 --> 00:25:41,279
similarly we have pixie pkce for a lot

631
00:25:41,279 --> 00:25:43,200
which makes the exploit kind of useless

632
00:25:43,200 --> 00:25:45,760
because we also need code verifier to

633
00:25:45,760 --> 00:25:48,320
make use of the leaked code

634
00:25:48,320 --> 00:25:50,240
the other one is to ask for

635
00:25:50,240 --> 00:25:52,159
authorization every single time also

636
00:25:52,159 --> 00:25:54,240
supported by open id using the prompt

637
00:25:54,240 --> 00:25:55,600
parameter

638
00:25:55,600 --> 00:25:58,080
now apple did the exact same and many

639
00:25:58,080 --> 00:26:00,159
others too one can also use client-side

640
00:26:00,159 --> 00:26:02,480
redirects instead of 201 or 302 in

641
00:26:02,480 --> 00:26:04,400
combination with extreme options

642
00:26:04,400 --> 00:26:07,440
obviously a switch frame ancestors

643
00:26:07,440 --> 00:26:10,240
twitter for example uses this method for

644
00:26:10,240 --> 00:26:12,240
redirect and many programs we reported

645
00:26:12,240 --> 00:26:14,480
the variability to also fix the issue

646
00:26:14,480 --> 00:26:16,080
using this approach

647
00:26:16,080 --> 00:26:18,720
the last one is to validate the referrer

648
00:26:18,720 --> 00:26:20,640
origin against the client

649
00:26:20,640 --> 00:26:22,159
though we do not recommend using this

650
00:26:22,159 --> 00:26:23,840
approach as it suffers from the same

651
00:26:23,840 --> 00:26:25,679
issues as with csr protection with

652
00:26:25,679 --> 00:26:28,000
referrer origin

653
00:26:28,000 --> 00:26:29,760
there's also something called resource

654
00:26:29,760 --> 00:26:31,600
isolation policy which uses face

655
00:26:31,600 --> 00:26:33,760
metadata but safari and personality

656
00:26:33,760 --> 00:26:35,600
doesn't yet support them

657
00:26:35,600 --> 00:26:37,120
so it's

658
00:26:37,120 --> 00:26:40,639
still not the best approach yet

659
00:26:41,679 --> 00:26:43,840
so browsers also have some mitigations

660
00:26:43,840 --> 00:26:46,080
in place to avoid such leaks besides

661
00:26:46,080 --> 00:26:48,240
same origin policy however the

662
00:26:48,240 --> 00:26:50,559
strategies listed here are specific to

663
00:26:50,559 --> 00:26:51,679
csp

664
00:26:51,679 --> 00:26:53,600
we have something you know we have we

665
00:26:53,600 --> 00:26:55,120
also found something that these

666
00:26:55,120 --> 00:26:58,000
strategies did not cover uh so let's

667
00:26:58,000 --> 00:26:59,919
briefly go over them anyway

668
00:26:59,919 --> 00:27:02,559
the evaluation reports uh now include

669
00:27:02,559 --> 00:27:04,559
the url of the original request meaning

670
00:27:04,559 --> 00:27:07,679
we only get what we already know

671
00:27:07,679 --> 00:27:09,600
furthermore browsers ignore the path

672
00:27:09,600 --> 00:27:11,600
component of the source saturation if

673
00:27:11,600 --> 00:27:13,360
the resource being loaded is the result

674
00:27:13,360 --> 00:27:15,760
of a redirect this is to prevent leaking

675
00:27:15,760 --> 00:27:17,279
of path information which was

676
00:27:17,279 --> 00:27:19,440
demonstrated in homacoops post

677
00:27:19,440 --> 00:27:21,279
the spec also gives an example for

678
00:27:21,279 --> 00:27:22,880
easier understanding but we'll leave it

679
00:27:22,880 --> 00:27:25,200
at that

680
00:27:27,679 --> 00:27:29,520
so after our reports many programs

681
00:27:29,520 --> 00:27:31,440
including facebook and coinbase came up

682
00:27:31,440 --> 00:27:33,520
with their own fixes they're

683
00:27:33,520 --> 00:27:35,279
their fixes revolve around checking if

684
00:27:35,279 --> 00:27:37,919
the user isn't is of safari and only if

685
00:27:37,919 --> 00:27:40,080
it is they would use a different routes

686
00:27:40,080 --> 00:27:42,000
and for all other user agents their

687
00:27:42,000 --> 00:27:43,760
workload remain the same

688
00:27:43,760 --> 00:27:45,279
so it seemed

689
00:27:45,279 --> 00:27:46,960
a simple change of users entered by

690
00:27:46,960 --> 00:27:49,360
rastafix and an obvious place to try it

691
00:27:49,360 --> 00:27:51,520
was iphone or ipad since all browsers on

692
00:27:51,520 --> 00:27:53,600
ios devices must use liquid as the

693
00:27:53,600 --> 00:27:56,640
engine and they're all actually same so

694
00:27:56,640 --> 00:27:58,320
just using chrome

695
00:27:58,320 --> 00:28:00,960
but just using chrome didn't work

696
00:28:00,960 --> 00:28:03,360
and attending to the but sending to

697
00:28:03,360 --> 00:28:05,840
desktop site did so

698
00:28:05,840 --> 00:28:08,399
we found a bypass but uh it appeared

699
00:28:08,399 --> 00:28:10,159
that the change of users and wasn't

700
00:28:10,159 --> 00:28:12,320
inherited in subsequent effects requests

701
00:28:12,320 --> 00:28:14,880
so we tried all requests from a project

702
00:28:14,880 --> 00:28:17,679
called svp leaks by q53 which

703
00:28:17,679 --> 00:28:19,360
which lists all possible ways to send an

704
00:28:19,360 --> 00:28:21,840
http request to an external url using

705
00:28:21,840 --> 00:28:22,799
html

706
00:28:22,799 --> 00:28:24,080
html

707
00:28:24,080 --> 00:28:27,360
tags and we found that aping or anchor

708
00:28:27,360 --> 00:28:29,520
tag with ping attribute

709
00:28:29,520 --> 00:28:32,159
did the work which actually inherited

710
00:28:32,159 --> 00:28:33,520
the

711
00:28:33,520 --> 00:28:36,159
user isn't that we changed using sends

712
00:28:36,159 --> 00:28:37,600
to desktop site

713
00:28:37,600 --> 00:28:40,559
so we had found it not a bypass but uh

714
00:28:40,559 --> 00:28:42,720
during our hunter bypasses we noticed

715
00:28:42,720 --> 00:28:43,600
that

716
00:28:43,600 --> 00:28:46,159
we noticed something peculiar uh after

717
00:28:46,159 --> 00:28:48,480
some digging we realized that we already

718
00:28:48,480 --> 00:28:51,200
found another zero day

719
00:28:51,200 --> 00:28:54,399
on this time it wasn't csp but it will

720
00:28:54,399 --> 00:28:56,480
it was cause our crossovers in resource

721
00:28:56,480 --> 00:28:57,919
sharing

722
00:28:57,919 --> 00:28:58,799
that

723
00:28:58,799 --> 00:29:01,760
actually i briefly talked about in the

724
00:29:01,760 --> 00:29:04,799
browser's mitigation so this finding was

725
00:29:04,799 --> 00:29:06,640
as easy as shown here

726
00:29:06,640 --> 00:29:08,720
we just needed to add a cache handler to

727
00:29:08,720 --> 00:29:11,200
this fetch request and it really

728
00:29:11,200 --> 00:29:14,240
disclosed your destination url

729
00:29:14,240 --> 00:29:16,640
so we said our plan to disclose the

730
00:29:16,640 --> 00:29:18,720
rarity with apple and surprisingly it

731
00:29:18,720 --> 00:29:20,799
got fixed right before our talk at

732
00:29:20,799 --> 00:29:23,279
blackhead without us being notified

733
00:29:23,279 --> 00:29:25,440
and it turns out that other researchers

734
00:29:25,440 --> 00:29:28,000
had also found the same vulnerability

735
00:29:28,000 --> 00:29:30,240
ourselves paper was released a few a few

736
00:29:30,240 --> 00:29:32,159
months back on cross-site leaks or

737
00:29:32,159 --> 00:29:33,600
access leaks

738
00:29:33,600 --> 00:29:36,480
with some explained examples which also

739
00:29:36,480 --> 00:29:38,480
included this they've done an awesome

740
00:29:38,480 --> 00:29:39,919
work listing all possible crosstalk

741
00:29:39,919 --> 00:29:42,320
links with which also included this as

742
00:29:42,320 --> 00:29:44,720
one of their poc

743
00:29:44,720 --> 00:29:45,919
one of their

744
00:29:45,919 --> 00:29:47,360
test cases

745
00:29:47,360 --> 00:29:48,240
so

746
00:29:48,240 --> 00:29:50,159
it was i think it was fixed because of

747
00:29:50,159 --> 00:29:52,320
their report instead of hours but the

748
00:29:52,320 --> 00:29:54,960
original reporter was us

749
00:29:54,960 --> 00:29:58,080
so this one is also fixed

750
00:29:58,080 --> 00:30:01,200
however this story still continues and

751
00:30:01,200 --> 00:30:03,120
surprisingly it still works in latest

752
00:30:03,120 --> 00:30:06,320
version of safari which is 15.4

753
00:30:06,320 --> 00:30:08,799
and we identified it another bug that's

754
00:30:08,799 --> 00:30:10,960
exactly the same as the one we already

755
00:30:10,960 --> 00:30:12,320
talked about

756
00:30:12,320 --> 00:30:14,720
and

757
00:30:14,799 --> 00:30:17,840
the only change here is the change of

758
00:30:17,840 --> 00:30:19,039
sqv

759
00:30:19,039 --> 00:30:20,640
header called

760
00:30:20,640 --> 00:30:23,360
connectivity policy report only here we

761
00:30:23,360 --> 00:30:25,200
we're using report only header instead

762
00:30:25,200 --> 00:30:27,440
of continuity policy

763
00:30:27,440 --> 00:30:29,840
and instead of document here right it's

764
00:30:29,840 --> 00:30:31,360
now blocked uri

765
00:30:31,360 --> 00:30:33,360
so those are the only changes that

766
00:30:33,360 --> 00:30:35,840
require it to work again

767
00:30:35,840 --> 00:30:40,000
and it still works in legislative

768
00:30:40,000 --> 00:30:42,960
safari but it only works in ies for some

769
00:30:42,960 --> 00:30:45,039
unknown reason

770
00:30:45,039 --> 00:30:47,279
so the continued research gave us the

771
00:30:47,279 --> 00:30:49,520
opportunity to come up with a new

772
00:30:49,520 --> 00:30:51,760
bypasses and wear rounds for roadblocks

773
00:30:51,760 --> 00:30:53,840
that we talked about

774
00:30:53,840 --> 00:30:56,240
so it no longer requires a click and the

775
00:30:56,240 --> 00:30:57,679
redirect does not have to be across

776
00:30:57,679 --> 00:31:00,399
origin either

777
00:31:03,279 --> 00:31:06,799
so now the three key things to take away

778
00:31:06,799 --> 00:31:08,080
are

779
00:31:08,080 --> 00:31:10,640
always revisit your bug in our case we

780
00:31:10,640 --> 00:31:13,919
found cinder blocks with uh same impact

781
00:31:13,919 --> 00:31:16,399
in three different instances and that

782
00:31:16,399 --> 00:31:18,000
allowed us to bypass different

783
00:31:18,000 --> 00:31:20,320
roadblocks that we previously had for

784
00:31:20,320 --> 00:31:21,919
example same side cookies by cookie

785
00:31:21,919 --> 00:31:24,640
bypasses and crusher using redirect

786
00:31:24,640 --> 00:31:25,679
and

787
00:31:25,679 --> 00:31:27,600
because browsers do not always follow

788
00:31:27,600 --> 00:31:30,000
this spec complete completely use

789
00:31:30,000 --> 00:31:31,600
defense in depth to mitigate browser

790
00:31:31,600 --> 00:31:33,919
flows whenever possible instead of

791
00:31:33,919 --> 00:31:36,000
entirely relying on browsers

792
00:31:36,000 --> 00:31:38,320
and with that we are at the end of our

793
00:31:38,320 --> 00:31:39,440
presentation

794
00:31:39,440 --> 00:31:41,600
thank you for listening and we are open

795
00:31:41,600 --> 00:31:43,790
to your questions

796
00:31:43,790 --> 00:31:47,279
[Applause]

797
00:31:47,279 --> 00:31:49,360
you

