1
00:00:06,820 --> 00:00:09,869
[Music]

2
00:00:13,599 --> 00:00:14,920
hello everybody

3
00:00:14,920 --> 00:00:18,000
um it is a very

4
00:00:18,000 --> 00:00:19,039
compact

5
00:00:19,039 --> 00:00:20,040
slide so

6
00:00:20,040 --> 00:00:21,359
[Music]

7
00:00:21,359 --> 00:00:22,720
i hope it

8
00:00:22,720 --> 00:00:24,880
it will be good

9
00:00:24,880 --> 00:00:27,439
so i will talk about

10
00:00:27,439 --> 00:00:29,679
runtime application security protection

11
00:00:29,679 --> 00:00:32,640
reverse and bypass

12
00:00:33,440 --> 00:00:34,160
we

13
00:00:34,160 --> 00:00:35,280
know

14
00:00:35,280 --> 00:00:37,600
such kind of tool such as dashboard

15
00:00:37,600 --> 00:00:40,640
parametrics and so on

16
00:00:40,640 --> 00:00:43,640
okay

17
00:00:44,879 --> 00:00:48,640
so before um my name is george and

18
00:00:48,640 --> 00:00:51,360
i was a security evaluator

19
00:00:51,360 --> 00:00:53,039
on a payment

20
00:00:53,039 --> 00:00:57,039
application reversal developer also

21
00:00:57,039 --> 00:00:58,480
and uh

22
00:00:58,480 --> 00:01:01,359
i am many mainly know

23
00:01:01,359 --> 00:01:03,440
uh the author of the tesca library and

24
00:01:03,440 --> 00:01:05,040
an enterprise

25
00:01:05,040 --> 00:01:09,280
last tool it is a library for frida

26
00:01:09,280 --> 00:01:12,159
which allows you to

27
00:01:12,159 --> 00:01:13,680
to

28
00:01:13,680 --> 00:01:15,680
svc call

29
00:01:15,680 --> 00:01:18,799
easier and use the same api 10

30
00:01:18,799 --> 00:01:20,479
interceptors api

31
00:01:20,479 --> 00:01:23,600
but with svc

32
00:01:25,040 --> 00:01:28,720
okay so uh i will start by

33
00:01:28,720 --> 00:01:31,200
explaining you uh what is the context

34
00:01:31,200 --> 00:01:32,240
and uh

35
00:01:32,240 --> 00:01:36,079
next we will move into inside um

36
00:01:36,079 --> 00:01:40,158
how such kind of protection work

37
00:01:40,799 --> 00:01:42,960
it will be mainly focused on

38
00:01:42,960 --> 00:01:44,190
anti-working and

39
00:01:44,190 --> 00:01:45,840
[Music]

40
00:01:45,840 --> 00:01:48,479
some kind of obfuscation specific to

41
00:01:48,479 --> 00:01:49,680
such tools

42
00:01:49,680 --> 00:01:50,960
and

43
00:01:50,960 --> 00:01:53,439
finally we'll talk about

44
00:01:53,439 --> 00:01:54,030
um

45
00:01:54,030 --> 00:01:56,479
[Music]

46
00:01:56,479 --> 00:01:58,880
or oh improve your

47
00:01:58,880 --> 00:02:00,960
frida hook in order to

48
00:02:00,960 --> 00:02:04,399
to hook some context

49
00:02:05,119 --> 00:02:09,680
which are difficult to reach such as a

50
00:02:10,000 --> 00:02:13,680
follow thread full of our console

51
00:02:15,040 --> 00:02:16,720
and wait this talk

52
00:02:16,720 --> 00:02:18,640
first is a

53
00:02:18,640 --> 00:02:21,440
android protection tools editor

54
00:02:21,440 --> 00:02:22,950
not consider

55
00:02:22,950 --> 00:02:25,200
[Music]

56
00:02:25,200 --> 00:02:26,400
not consider

57
00:02:26,400 --> 00:02:29,040
reverse engineering and public bypass as

58
00:02:29,040 --> 00:02:32,000
vulnerabilities and not offer

59
00:02:32,000 --> 00:02:34,400
quantity or rewards

60
00:02:34,400 --> 00:02:36,959
next is the assessment of this kind of

61
00:02:36,959 --> 00:02:39,200
protection is mandatory

62
00:02:39,200 --> 00:02:42,720
for most of security

63
00:02:43,040 --> 00:02:45,920
certification such as banking and

64
00:02:45,920 --> 00:02:48,800
banking certification emp certification

65
00:02:48,800 --> 00:02:51,920
and so and finally we try to contact

66
00:02:51,920 --> 00:02:55,440
them but they not respond

67
00:02:56,870 --> 00:02:58,239
[Music]

68
00:02:58,239 --> 00:02:59,250
before to continue

69
00:02:59,250 --> 00:03:02,319
[Music]

70
00:03:02,319 --> 00:03:05,200
just let me know

71
00:03:05,200 --> 00:03:07,280
[Music]

72
00:03:07,280 --> 00:03:10,560
all all you will see has been done

73
00:03:10,560 --> 00:03:12,480
inside during

74
00:03:12,480 --> 00:03:15,599
security assessment

75
00:03:15,599 --> 00:03:19,238
and not in the way

76
00:03:19,760 --> 00:03:20,720
okay

77
00:03:20,720 --> 00:03:22,560
so

78
00:03:22,560 --> 00:03:25,280
spt stands for software protection tools

79
00:03:25,280 --> 00:03:27,519
it is the name

80
00:03:27,519 --> 00:03:30,080
from emvco and

81
00:03:30,080 --> 00:03:32,080
runtime application security protection

82
00:03:32,080 --> 00:03:36,000
is a kind of protection provided by

83
00:03:36,000 --> 00:03:38,560
sptc tools

84
00:03:38,560 --> 00:03:39,440
and

85
00:03:39,440 --> 00:03:41,040
for the rest of the

86
00:03:41,040 --> 00:03:44,239
the top svc stands for supervisor core

87
00:03:44,239 --> 00:03:45,519
which is

88
00:03:45,519 --> 00:03:46,720
interrupts

89
00:03:46,720 --> 00:03:49,920
to perform cisco online

90
00:03:49,920 --> 00:03:52,559
64.

91
00:03:53,439 --> 00:03:55,519
okay

92
00:03:55,519 --> 00:03:59,120
so what is a software protection tool

93
00:03:59,120 --> 00:04:01,120
such to contain

94
00:04:01,120 --> 00:04:04,799
at least three layers of protection the

95
00:04:04,799 --> 00:04:05,599
first

96
00:04:05,599 --> 00:04:09,840
target only that resources from the apk

97
00:04:09,840 --> 00:04:11,439
that means

98
00:04:11,439 --> 00:04:15,680
some yaml and properties files and

99
00:04:16,000 --> 00:04:19,600
or gs or html if your application uses a

100
00:04:19,600 --> 00:04:22,000
phone gap or such kind of

101
00:04:22,000 --> 00:04:24,400
framework

102
00:04:24,960 --> 00:04:27,759
for this kind of resources

103
00:04:27,759 --> 00:04:29,919
as resources are

104
00:04:29,919 --> 00:04:32,479
flat files

105
00:04:32,639 --> 00:04:35,520
they are mainly protected by integrity

106
00:04:35,520 --> 00:04:37,440
checks

107
00:04:37,440 --> 00:04:39,680
not only android

108
00:04:39,680 --> 00:04:42,720
not only checks provided by android api

109
00:04:42,720 --> 00:04:45,759
but also also custom

110
00:04:45,759 --> 00:04:48,320
integrity checks are done with a random

111
00:04:48,320 --> 00:04:51,199
file and custom crc

112
00:04:51,199 --> 00:04:56,040
32 checksum at one time

113
00:04:57,120 --> 00:04:59,360
a lot of spt also

114
00:04:59,360 --> 00:05:01,680
perform encryption of such resources and

115
00:05:01,680 --> 00:05:04,490
decipher it at one time

116
00:05:04,490 --> 00:05:06,000
[Music]

117
00:05:06,000 --> 00:05:08,479
the next layer is a protection about

118
00:05:08,479 --> 00:05:11,479
off-code

119
00:05:11,600 --> 00:05:13,600
here

120
00:05:13,600 --> 00:05:16,320
when we talk about code protection

121
00:05:16,320 --> 00:05:19,280
it is mainly about anti-tempering that

122
00:05:19,280 --> 00:05:20,720
means

123
00:05:20,720 --> 00:05:22,720
[Music]

124
00:05:22,720 --> 00:05:26,160
if you hook a method

125
00:05:26,160 --> 00:05:28,000
the anti-tampering

126
00:05:28,000 --> 00:05:29,520
should

127
00:05:29,520 --> 00:05:31,680
prevent the application to continue on

128
00:05:31,680 --> 00:05:33,120
the good path

129
00:05:33,120 --> 00:05:37,360
if you change the passwords disuk

130
00:05:37,360 --> 00:05:39,199
um

131
00:05:39,199 --> 00:05:42,560
antioch is a mainly

132
00:05:44,000 --> 00:05:46,160
mechanism to detect

133
00:05:46,160 --> 00:05:47,759
a friday hook

134
00:05:47,759 --> 00:05:51,120
for example or exposed book onto memory

135
00:05:51,120 --> 00:05:53,680
or

136
00:05:53,680 --> 00:05:55,440
probably

137
00:05:55,440 --> 00:05:57,759
using some checks on file system

138
00:05:57,759 --> 00:05:58,490
and

139
00:05:58,490 --> 00:06:00,880
[Music]

140
00:06:00,880 --> 00:06:02,479
and finally control fuscation and

141
00:06:02,479 --> 00:06:06,479
conduction are common

142
00:06:06,479 --> 00:06:10,080
the next layer is a is a protection

143
00:06:10,080 --> 00:06:11,280
of the app

144
00:06:11,280 --> 00:06:12,639
overall

145
00:06:12,639 --> 00:06:13,440
so

146
00:06:13,440 --> 00:06:16,630
of the overall app

147
00:06:16,630 --> 00:06:18,319
[Music]

148
00:06:18,319 --> 00:06:22,479
against emulator or with devices

149
00:06:22,479 --> 00:06:25,120
such as devices with a magisk

150
00:06:25,120 --> 00:06:28,160
or network protection by uh

151
00:06:28,160 --> 00:06:31,120
implementing ssr pinning in adults

152
00:06:31,120 --> 00:06:32,000
to

153
00:06:32,000 --> 00:06:33,520
prevent

154
00:06:33,520 --> 00:06:37,120
https in the middle

155
00:06:39,600 --> 00:06:41,039
and finally

156
00:06:41,039 --> 00:06:44,000
the application and the control measure

157
00:06:44,000 --> 00:06:46,479
offered by the spt are

158
00:06:46,479 --> 00:06:50,160
protected by anti-look and code office

159
00:06:50,160 --> 00:06:52,960
case code of discussion provided

160
00:06:52,960 --> 00:06:56,239
by spt editors

161
00:06:56,880 --> 00:06:59,440
in an spt there is a lot of

162
00:06:59,440 --> 00:07:01,120
security function

163
00:07:01,120 --> 00:07:04,319
some are listed here

164
00:07:04,319 --> 00:07:06,400
but we only convert

165
00:07:06,400 --> 00:07:07,090
someone

166
00:07:07,090 --> 00:07:08,639
[Music]

167
00:07:08,639 --> 00:07:10,000
okay

168
00:07:10,000 --> 00:07:12,240
so

169
00:07:13,440 --> 00:07:15,440
now i will talk about

170
00:07:15,440 --> 00:07:17,680
how we sampled

171
00:07:17,680 --> 00:07:19,599
some target application

172
00:07:19,599 --> 00:07:21,199
and

173
00:07:21,199 --> 00:07:24,000
and the raspberry

174
00:07:24,639 --> 00:07:26,950
so we select

175
00:07:26,950 --> 00:07:28,800
[Music]

176
00:07:28,800 --> 00:07:30,400
select

177
00:07:30,400 --> 00:07:33,120
industrial grade and certified

178
00:07:33,120 --> 00:07:36,000
rasp such as

179
00:07:36,000 --> 00:07:37,759
you can found on

180
00:07:37,759 --> 00:07:40,160
emv2 certified

181
00:07:40,160 --> 00:07:42,800
protection tools

182
00:07:42,800 --> 00:07:45,360
and for each we we

183
00:07:45,360 --> 00:07:46,879
reversed

184
00:07:46,879 --> 00:07:49,120
some of uh

185
00:07:49,120 --> 00:07:52,319
native library packed with a protected

186
00:07:52,319 --> 00:07:54,000
application

187
00:07:54,000 --> 00:07:55,360
in order to

188
00:07:55,360 --> 00:07:57,199
identify and write

189
00:07:57,199 --> 00:07:59,440
java rules for each

190
00:07:59,440 --> 00:08:01,120
and you used it

191
00:08:01,120 --> 00:08:03,599
you deployed such

192
00:08:03,599 --> 00:08:06,240
words on kudos in order to automate the

193
00:08:06,240 --> 00:08:08,560
sampling of

194
00:08:08,560 --> 00:08:10,530
apg

195
00:08:10,530 --> 00:08:17,120
[Music]

196
00:08:17,120 --> 00:08:19,360
so

197
00:08:19,520 --> 00:08:22,160
here you can see a kind of arrows we

198
00:08:22,160 --> 00:08:23,039
used

199
00:08:23,039 --> 00:08:25,759
to target specifically

200
00:08:25,759 --> 00:08:29,599
a single version of a single spt

201
00:08:29,599 --> 00:08:31,199
the first part

202
00:08:31,199 --> 00:08:32,159
this

203
00:08:32,159 --> 00:08:34,559
this rule is not based on string so it

204
00:08:34,559 --> 00:08:37,760
is harder for the spt editors

205
00:08:37,760 --> 00:08:39,360
to bypass

206
00:08:39,360 --> 00:08:41,039
it or

207
00:08:41,039 --> 00:08:43,598
correct it

208
00:08:44,390 --> 00:08:46,720
[Music]

209
00:08:46,720 --> 00:08:47,760
so

210
00:08:47,760 --> 00:08:50,640
the first part here is

211
00:08:50,640 --> 00:08:52,880
the xor

212
00:08:52,880 --> 00:08:56,000
the simplex and hash comparison are

213
00:08:56,000 --> 00:08:58,959
extracted from the anti-book functions

214
00:08:58,959 --> 00:09:00,720
the second part is

215
00:09:00,720 --> 00:09:04,320
our two patterns from string decryptions

216
00:09:04,320 --> 00:09:05,350
and the last

217
00:09:05,350 --> 00:09:06,480
[Music]

218
00:09:06,480 --> 00:09:11,060
is a patterns of common patterns because

219
00:09:11,060 --> 00:09:12,880
[Music]

220
00:09:12,880 --> 00:09:13,940
because

221
00:09:13,940 --> 00:09:19,600
[Music]

222
00:09:19,600 --> 00:09:24,800
spt tools provide functionalities

223
00:09:24,800 --> 00:09:26,880
as a native library and this native

224
00:09:26,880 --> 00:09:30,399
library avoid to use the ellipses so

225
00:09:30,399 --> 00:09:32,959
most of system calls are in line

226
00:09:32,959 --> 00:09:35,839
but the system called

227
00:09:35,839 --> 00:09:38,800
often brought into another function

228
00:09:38,800 --> 00:09:40,080
so

229
00:09:40,080 --> 00:09:42,480
we can

230
00:09:43,200 --> 00:09:47,360
we can identify an spt by the

231
00:09:47,360 --> 00:09:50,959
by the count of a

232
00:09:50,959 --> 00:09:53,518
in this case

233
00:09:54,080 --> 00:09:56,480
the editor of this this

234
00:09:56,480 --> 00:09:59,440
spt tool

235
00:09:59,440 --> 00:10:00,959
always

236
00:10:00,959 --> 00:10:03,440
provides a library with

237
00:10:03,440 --> 00:10:04,720
us

238
00:10:04,720 --> 00:10:07,440
6 or 8 svc

239
00:10:07,440 --> 00:10:08,850
svc

240
00:10:08,850 --> 00:10:10,079
[Music]

241
00:10:10,079 --> 00:10:13,440
so with this with this kind of rules

242
00:10:13,440 --> 00:10:15,920
we are able to gather

243
00:10:15,920 --> 00:10:19,250
more than 300 apks

244
00:10:19,250 --> 00:10:21,680
[Music]

245
00:10:21,680 --> 00:10:22,720
okay

246
00:10:22,720 --> 00:10:25,680
so next i will talk about what is a road

247
00:10:25,680 --> 00:10:29,279
time application security protection

248
00:10:31,120 --> 00:10:34,800
the the first part the first step is as

249
00:10:34,800 --> 00:10:37,760
entry point as any application

250
00:10:37,760 --> 00:10:41,760
um as a runtime application

251
00:10:41,760 --> 00:10:45,440
so such as kind of tool

252
00:10:45,440 --> 00:10:46,800
is native

253
00:10:46,800 --> 00:10:47,440
is

254
00:10:47,440 --> 00:10:50,000
provided as a native library

255
00:10:50,000 --> 00:10:53,200
the entry point is often

256
00:10:53,200 --> 00:10:56,240
the initial way of the air file or the

257
00:10:56,240 --> 00:10:57,560
ltvg

258
00:10:57,560 --> 00:11:00,480
[Music]

259
00:11:00,480 --> 00:11:01,760
from this point

260
00:11:01,760 --> 00:11:04,880
we start by performing hook detection

261
00:11:04,880 --> 00:11:08,079
um this will detection start by

262
00:11:08,079 --> 00:11:10,959
for example by uh checking on proxy set

263
00:11:10,959 --> 00:11:13,519
maps in order to detect through the

264
00:11:13,519 --> 00:11:14,720
agent

265
00:11:14,720 --> 00:11:16,160
or

266
00:11:16,160 --> 00:11:17,680
other libraries

267
00:11:17,680 --> 00:11:18,880
and

268
00:11:18,880 --> 00:11:21,200
it creates a new thread

269
00:11:21,200 --> 00:11:23,440
and this thread we

270
00:11:23,440 --> 00:11:24,959
will check

271
00:11:24,959 --> 00:11:26,640
if the the main

272
00:11:26,640 --> 00:11:29,440
thread is also good

273
00:11:29,440 --> 00:11:30,959
and

274
00:11:30,959 --> 00:11:33,120
it is interesting because

275
00:11:33,120 --> 00:11:35,040
it is harder to

276
00:11:35,040 --> 00:11:35,959
hook

277
00:11:35,959 --> 00:11:40,160
a shield thread than the main thread by

278
00:11:40,160 --> 00:11:43,160
default

279
00:11:43,519 --> 00:11:45,200
so

280
00:11:45,200 --> 00:11:47,360
next answer the detection

281
00:11:47,360 --> 00:11:50,560
detection is right

282
00:11:50,560 --> 00:11:51,920
explode

283
00:11:51,920 --> 00:11:54,720
the anti-debugger detection

284
00:11:54,720 --> 00:11:56,959
anti-debugger is a bit different because

285
00:11:56,959 --> 00:11:59,839
it performs also a fork at start in

286
00:11:59,839 --> 00:12:00,959
order to

287
00:12:00,959 --> 00:12:04,079
to petraeus the parent with a fork

288
00:12:04,079 --> 00:12:06,800
in order to prevent gdb to be attached

289
00:12:06,800 --> 00:12:09,120
to the parent

290
00:12:09,120 --> 00:12:12,560
i will explain it later

291
00:12:13,279 --> 00:12:14,079
and

292
00:12:14,079 --> 00:12:15,279
each

293
00:12:15,279 --> 00:12:18,320
thread perform on

294
00:12:18,320 --> 00:12:20,720
debugger detection such as f-trans

295
00:12:20,720 --> 00:12:23,279
detection by checking

296
00:12:23,279 --> 00:12:27,839
the content of a proxy title files

297
00:12:28,399 --> 00:12:29,839
and

298
00:12:29,839 --> 00:12:31,279
another

299
00:12:31,279 --> 00:12:33,680
once this kind of

300
00:12:33,680 --> 00:12:34,500
check addon

301
00:12:34,500 --> 00:12:35,680
[Music]

302
00:12:35,680 --> 00:12:37,120
the

303
00:12:37,120 --> 00:12:40,000
the thread the spray

304
00:12:40,000 --> 00:12:43,360
the the child thread from the detection

305
00:12:43,360 --> 00:12:45,440
perform again

306
00:12:45,440 --> 00:12:47,519
a hook detection check

307
00:12:47,519 --> 00:12:48,240
on

308
00:12:48,240 --> 00:12:49,920
all thread

309
00:12:49,920 --> 00:12:52,920
available

310
00:12:54,320 --> 00:12:56,639
and hit continue

311
00:12:56,639 --> 00:12:59,279
until debugger pop

312
00:12:59,279 --> 00:13:00,880
a new thread

313
00:13:00,880 --> 00:13:03,519
and this thread

314
00:13:03,519 --> 00:13:06,800
performs peter satosh or prctl

315
00:13:06,800 --> 00:13:09,680
in order to prevent gdb

316
00:13:09,680 --> 00:13:11,240
to perform crowd up

317
00:13:11,240 --> 00:13:13,360
[Music]

318
00:13:13,360 --> 00:13:14,030
and

319
00:13:14,030 --> 00:13:15,200
[Music]

320
00:13:15,200 --> 00:13:17,440
now

321
00:13:17,440 --> 00:13:21,120
the spt will deploy unveil

322
00:13:21,120 --> 00:13:24,079
environment detection which is

323
00:13:24,079 --> 00:13:26,160
emulator detection root detection

324
00:13:26,160 --> 00:13:27,980
integrity checks

325
00:13:27,980 --> 00:13:30,000
[Music]

326
00:13:30,000 --> 00:13:30,770
and more

327
00:13:30,770 --> 00:13:33,360
[Music]

328
00:13:33,360 --> 00:13:38,720
each time a layer protection layer is

329
00:13:38,720 --> 00:13:41,360
deployed or each time a new thread is

330
00:13:41,360 --> 00:13:43,040
created

331
00:13:43,040 --> 00:13:44,160
all

332
00:13:44,160 --> 00:13:45,920
detection

333
00:13:45,920 --> 00:13:48,720
already available are

334
00:13:48,720 --> 00:13:50,140
rejected object

335
00:13:50,140 --> 00:13:52,320
[Music]

336
00:13:52,320 --> 00:13:53,120
okay

337
00:13:53,120 --> 00:13:54,720
and finally

338
00:13:54,720 --> 00:13:56,320
the execution flow

339
00:13:56,320 --> 00:13:58,000
returned to the app

340
00:13:58,000 --> 00:13:58,800
and

341
00:13:58,800 --> 00:14:00,839
you have a lot

342
00:14:00,839 --> 00:14:05,440
of running in background and uh

343
00:14:05,440 --> 00:14:07,279
and doing such kind of checks paired

344
00:14:07,279 --> 00:14:09,920
with periodically or only on demand when

345
00:14:09,920 --> 00:14:12,800
the application want to do something

346
00:14:12,800 --> 00:14:15,800
sensitive

347
00:14:16,650 --> 00:14:18,079
[Music]

348
00:14:18,079 --> 00:14:19,040
okay

349
00:14:19,040 --> 00:14:20,880
so now

350
00:14:20,880 --> 00:14:23,760
i will i will explain you how

351
00:14:23,760 --> 00:14:25,199
um

352
00:14:25,199 --> 00:14:26,800
obfuscation

353
00:14:26,800 --> 00:14:27,680
of

354
00:14:27,680 --> 00:14:28,839
these tools

355
00:14:28,839 --> 00:14:31,360
is very different from a common

356
00:14:31,360 --> 00:14:32,720
application

357
00:14:32,720 --> 00:14:33,839
and

358
00:14:33,839 --> 00:14:38,320
how to how anti-work is implemented

359
00:14:39,680 --> 00:14:41,680
okay before to continue

360
00:14:41,680 --> 00:14:44,320
i will introduce the test tools i

361
00:14:44,320 --> 00:14:45,970
developed which is an interrupter

362
00:14:45,970 --> 00:14:48,320
[Music]

363
00:14:48,320 --> 00:14:51,360
and territory is like a s trace but it

364
00:14:51,360 --> 00:14:54,000
is done exclusively from fryer

365
00:14:54,000 --> 00:14:54,980
using the stalker

366
00:14:54,980 --> 00:14:56,320
[Music]

367
00:14:56,320 --> 00:14:58,720
it provides a pretty hook

368
00:14:58,720 --> 00:15:01,199
coverage generation

369
00:15:01,199 --> 00:15:03,839
it generated the archive file

370
00:15:03,839 --> 00:15:06,240
you can import into idea

371
00:15:06,240 --> 00:15:08,480
idea or

372
00:15:08,480 --> 00:15:10,240
empty drawer

373
00:15:10,240 --> 00:15:14,079
and it provides also a

374
00:15:14,639 --> 00:15:17,120
pretty print where

375
00:15:17,120 --> 00:15:20,000
every constant in the c score are passed

376
00:15:20,000 --> 00:15:22,079
and

377
00:15:22,079 --> 00:15:24,800
it is very useful

378
00:15:24,800 --> 00:15:27,760
so now i will talk about this step

379
00:15:27,760 --> 00:15:30,079
inside

380
00:15:30,079 --> 00:15:32,370
the wasp workflow

381
00:15:32,370 --> 00:15:34,639
[Music]

382
00:15:34,639 --> 00:15:37,839
i think the main

383
00:15:38,079 --> 00:15:41,839
obfuscation improvement has been against

384
00:15:41,839 --> 00:15:42,880
about

385
00:15:42,880 --> 00:15:45,010
string comparison

386
00:15:45,010 --> 00:15:46,399
[Music]

387
00:15:46,399 --> 00:15:48,880
because traditionally

388
00:15:48,880 --> 00:15:52,399
most of protection tools

389
00:15:52,399 --> 00:15:56,079
search file based on a string or

390
00:15:56,079 --> 00:15:58,240
compile existing file with a string or

391
00:15:58,240 --> 00:16:01,759
patches package name with a string

392
00:16:01,759 --> 00:16:05,279
such as a root beer or even anti-folder

393
00:16:05,279 --> 00:16:08,480
from a darvinci section

394
00:16:08,480 --> 00:16:11,279
so it is very easy for an attacker to

395
00:16:11,279 --> 00:16:13,600
gather the list of

396
00:16:13,600 --> 00:16:16,399
detection patterns and and make

397
00:16:16,399 --> 00:16:18,880
a hook which

398
00:16:18,880 --> 00:16:21,600
temper the value in order to add

399
00:16:21,600 --> 00:16:24,800
such detection patterns

400
00:16:26,160 --> 00:16:29,680
here you can find an example

401
00:16:29,680 --> 00:16:33,360
from one of certified products

402
00:16:33,360 --> 00:16:35,360
which is not used hash based of a

403
00:16:35,360 --> 00:16:39,199
comparison but classic strings

404
00:16:39,199 --> 00:16:41,600
at the left

405
00:16:41,600 --> 00:16:44,240
you can see striking decryption

406
00:16:44,240 --> 00:16:47,519
sorry deciphering is in line

407
00:16:47,519 --> 00:16:48,720
so

408
00:16:48,720 --> 00:16:51,040
you can you cannot book a function in

409
00:16:51,040 --> 00:16:53,680
order to withdraw the such streams at

410
00:16:53,680 --> 00:16:54,720
one time

411
00:16:54,720 --> 00:16:56,320
but it is very

412
00:16:56,320 --> 00:16:57,199
easy

413
00:16:57,199 --> 00:16:58,880
to script and

414
00:16:58,880 --> 00:17:01,120
perform a picot emulation inside guidera

415
00:17:01,120 --> 00:17:04,079
in order to drive such things that

416
00:17:04,079 --> 00:17:05,199
either

417
00:17:05,199 --> 00:17:07,060
you can see here at the rate

418
00:17:07,060 --> 00:17:08,799
[Music]

419
00:17:08,799 --> 00:17:10,640
for information

420
00:17:10,640 --> 00:17:13,520
every script will be available on

421
00:17:13,520 --> 00:17:17,598
the github or desktop after

422
00:17:17,598 --> 00:17:20,880
[Music]

423
00:17:20,880 --> 00:17:21,919
okay

424
00:17:21,919 --> 00:17:22,640
so

425
00:17:22,640 --> 00:17:25,360
some editors

426
00:17:27,119 --> 00:17:30,160
create another concept

427
00:17:30,160 --> 00:17:33,600
they change of priority and replays

428
00:17:33,600 --> 00:17:34,559
and

429
00:17:34,559 --> 00:17:36,720
they tried to replace search or

430
00:17:36,720 --> 00:17:39,520
component with teams but by this thing

431
00:17:39,520 --> 00:17:43,200
by a new neighbor a numerator sorry

432
00:17:43,200 --> 00:17:47,120
enumerate me right

433
00:17:47,120 --> 00:17:49,600
folders for example

434
00:17:49,600 --> 00:17:50,880
hash

435
00:17:50,880 --> 00:17:52,960
file name of every entries

436
00:17:52,960 --> 00:17:55,200
and compare each two

437
00:17:55,200 --> 00:17:56,240
already art

438
00:17:56,240 --> 00:17:57,360
[Music]

439
00:17:57,360 --> 00:18:01,719
value outputted in the application

440
00:18:02,190 --> 00:18:05,390
[Music]

441
00:18:05,840 --> 00:18:07,600
for editors

442
00:18:07,600 --> 00:18:08,640
i think

443
00:18:08,640 --> 00:18:11,200
this improvement this improvement

444
00:18:11,200 --> 00:18:12,400
prevent

445
00:18:12,400 --> 00:18:15,200
an attacker to drive all patterns

446
00:18:15,200 --> 00:18:16,500
because

447
00:18:16,500 --> 00:18:19,760
[Music]

448
00:18:19,760 --> 00:18:21,450
i think

449
00:18:21,450 --> 00:18:22,799
[Music]

450
00:18:22,799 --> 00:18:24,480
attackers are

451
00:18:24,480 --> 00:18:26,000
a

452
00:18:26,000 --> 00:18:28,559
specific context of execution

453
00:18:28,559 --> 00:18:29,600
so

454
00:18:29,600 --> 00:18:32,799
maybe the attacker will not tweak

455
00:18:32,799 --> 00:18:35,760
anti-emulator if it's used

456
00:18:35,760 --> 00:18:37,360
if you use the

457
00:18:37,360 --> 00:18:39,440
physical devices for example so the

458
00:18:39,440 --> 00:18:42,720
attacker cannot be able to redrive all

459
00:18:42,720 --> 00:18:45,840
blacklisted patterns

460
00:18:45,840 --> 00:18:47,440
another thing is

461
00:18:47,440 --> 00:18:48,720
it's

462
00:18:48,720 --> 00:18:49,520
more

463
00:18:49,520 --> 00:18:51,039
easier to

464
00:18:51,039 --> 00:18:52,240
implement

465
00:18:52,240 --> 00:18:54,840
or inline such kind of

466
00:18:54,840 --> 00:18:56,880
operation and

467
00:18:56,880 --> 00:18:59,919
finally it is less easy to work first

468
00:18:59,919 --> 00:19:00,580
and

469
00:19:00,580 --> 00:19:02,480
[Music]

470
00:19:02,480 --> 00:19:04,060
not use android api

471
00:19:04,060 --> 00:19:07,159
[Music]

472
00:19:08,840 --> 00:19:10,880
okay so

473
00:19:10,880 --> 00:19:11,480
the

474
00:19:11,480 --> 00:19:12,960
[Music]

475
00:19:12,960 --> 00:19:15,919
the pseudocode at white

476
00:19:15,919 --> 00:19:18,720
is extracted from the parsing of proc

477
00:19:18,720 --> 00:19:21,280
self maps

478
00:19:21,760 --> 00:19:23,120
while one of

479
00:19:23,120 --> 00:19:25,560
protection tools performed until king

480
00:19:25,560 --> 00:19:27,360
[Music]

481
00:19:27,360 --> 00:19:28,160
the

482
00:19:28,160 --> 00:19:30,160
the im of this code

483
00:19:30,160 --> 00:19:31,280
was to

484
00:19:31,280 --> 00:19:34,160
identify if the path of the

485
00:19:34,160 --> 00:19:37,520
file mapped at a region

486
00:19:37,520 --> 00:19:39,600
come from a

487
00:19:39,600 --> 00:19:41,280
blacklisted

488
00:19:41,280 --> 00:19:43,600
or whitelisted

489
00:19:43,600 --> 00:19:44,960
folder

490
00:19:44,960 --> 00:19:47,600
so instead of comparing the begin of

491
00:19:47,600 --> 00:19:48,799
each

492
00:19:48,799 --> 00:19:50,160
file pass with

493
00:19:50,160 --> 00:19:51,520
[Music]

494
00:19:51,520 --> 00:19:55,120
with a hardcoded system

495
00:19:55,919 --> 00:19:57,840
strings for example

496
00:19:57,840 --> 00:20:00,240
it hashed this value and compared this

497
00:20:00,240 --> 00:20:04,039
value with outputted

498
00:20:06,159 --> 00:20:09,679
for the reversal it is

499
00:20:10,240 --> 00:20:12,240
the code is

500
00:20:12,240 --> 00:20:16,080
very slow to understand

501
00:20:18,480 --> 00:20:19,900
here you can see the

502
00:20:19,900 --> 00:20:21,440
[Music]

503
00:20:21,440 --> 00:20:23,120
oh it is different

504
00:20:23,120 --> 00:20:24,159
from

505
00:20:24,159 --> 00:20:28,240
uh cut point of view and for the article

506
00:20:28,240 --> 00:20:31,679
which would uh

507
00:20:31,840 --> 00:20:32,960
the

508
00:20:32,960 --> 00:20:36,480
function performing the hash

509
00:20:36,480 --> 00:20:39,280
in the first part

510
00:20:39,280 --> 00:20:40,720
it is obvious

511
00:20:40,720 --> 00:20:42,240
you can hook

512
00:20:42,240 --> 00:20:44,880
any function from a gypsy

513
00:20:44,880 --> 00:20:45,919
using

514
00:20:45,919 --> 00:20:46,880
string

515
00:20:46,880 --> 00:20:49,360
arguments such as f open

516
00:20:49,360 --> 00:20:50,720
and you

517
00:20:50,720 --> 00:20:53,360
you will be able to understand the

518
00:20:53,360 --> 00:20:55,840
workflow of the application change

519
00:20:55,840 --> 00:20:58,000
when

520
00:20:59,679 --> 00:21:02,030
when this so sorry

521
00:21:02,030 --> 00:21:05,170
[Music]

522
00:21:08,960 --> 00:21:09,840
so

523
00:21:09,840 --> 00:21:11,679
when are the

524
00:21:11,679 --> 00:21:14,840
particular strings appears in the

525
00:21:14,840 --> 00:21:18,080
clogs but

526
00:21:18,080 --> 00:21:19,760
in the case at

527
00:21:19,760 --> 00:21:21,200
left

528
00:21:21,200 --> 00:21:24,240
it is more difficult to follow the

529
00:21:24,240 --> 00:21:26,720
what happens

530
00:21:26,720 --> 00:21:29,039
for example in this case

531
00:21:29,039 --> 00:21:30,159
it's

532
00:21:30,159 --> 00:21:31,840
all it's in line

533
00:21:31,840 --> 00:21:32,880
and

534
00:21:32,880 --> 00:21:34,400
it starts by

535
00:21:34,400 --> 00:21:37,520
doing some svc in order to

536
00:21:37,520 --> 00:21:40,159
to close the content of a system

537
00:21:40,159 --> 00:21:42,240
etc

538
00:21:42,240 --> 00:21:44,720
the aim of this function is to

539
00:21:44,720 --> 00:21:45,600
to

540
00:21:45,600 --> 00:21:46,640
find

541
00:21:46,640 --> 00:21:48,799
the entries containing

542
00:21:48,799 --> 00:21:52,720
system slash etc search

543
00:21:52,880 --> 00:21:56,280
rubik libraries

544
00:21:57,360 --> 00:21:59,240
um

545
00:21:59,240 --> 00:22:01,760
[Music]

546
00:22:01,760 --> 00:22:02,640
okay

547
00:22:02,640 --> 00:22:05,030
so for each entries

548
00:22:05,030 --> 00:22:08,170
[Music]

549
00:22:08,960 --> 00:22:11,679
so the tool will hash

550
00:22:11,679 --> 00:22:16,559
each byte one by one after byte like uh

551
00:22:16,559 --> 00:22:18,400
byte one by one

552
00:22:18,400 --> 00:22:21,039
so it is difficult to to hook only a

553
00:22:21,039 --> 00:22:23,440
function in order to drive

554
00:22:23,440 --> 00:22:27,200
the value which has been hash

555
00:22:27,200 --> 00:22:28,159
and

556
00:22:28,159 --> 00:22:30,480
another thing it is

557
00:22:30,480 --> 00:22:33,760
this kind of function perform in fact

558
00:22:33,760 --> 00:22:35,600
start with

559
00:22:35,600 --> 00:22:38,240
of the string instead of hash of the

560
00:22:38,240 --> 00:22:41,559
anterior springs

561
00:22:41,810 --> 00:22:43,200
[Music]

562
00:22:43,200 --> 00:22:45,760
so okay at the right or you have the zip

563
00:22:45,760 --> 00:22:48,080
code corresponding to the

564
00:22:48,080 --> 00:22:51,439
hash function in this case

565
00:22:53,360 --> 00:22:56,720
and finally for this case

566
00:22:56,720 --> 00:22:58,799
you can implement the hook

567
00:22:58,799 --> 00:23:00,400
with an interrupter

568
00:23:00,400 --> 00:23:04,960
and the interceptor okay also the

569
00:23:04,960 --> 00:23:06,320
this book

570
00:23:06,320 --> 00:23:07,120
will

571
00:23:07,120 --> 00:23:10,000
deploy interceptors on the function

572
00:23:10,000 --> 00:23:13,200
during the hash of each byte

573
00:23:13,200 --> 00:23:16,559
when the dynamic linker will load

574
00:23:16,559 --> 00:23:20,070
your target library

575
00:23:20,070 --> 00:23:22,559
[Music]

576
00:23:22,559 --> 00:23:23,520
and

577
00:23:23,520 --> 00:23:26,400
the the hook of the rush

578
00:23:26,400 --> 00:23:29,919
as as the hash function

579
00:23:29,919 --> 00:23:32,400
has two arguments one of the arguments

580
00:23:32,400 --> 00:23:34,080
is the first is

581
00:23:34,080 --> 00:23:35,840
the byte which is arched and the

582
00:23:35,840 --> 00:23:39,840
surround is the index of this byte

583
00:23:39,840 --> 00:23:41,600
by implementing and implementing the

584
00:23:41,600 --> 00:23:44,240
state machine inside inside the

585
00:23:44,240 --> 00:23:47,600
book we are able to rederive

586
00:23:47,600 --> 00:23:50,400
entire strings which has been

587
00:23:50,400 --> 00:23:51,360
which are

588
00:23:51,360 --> 00:23:53,600
hashed and we can

589
00:23:53,600 --> 00:23:55,200
show

590
00:23:55,200 --> 00:23:57,840
at the right the workflow change when

591
00:23:57,840 --> 00:23:59,200
the hash value

592
00:23:59,200 --> 00:24:00,559
is

593
00:24:00,559 --> 00:24:02,400
correspond to the string public dot

594
00:24:02,400 --> 00:24:03,870
libraries

595
00:24:03,870 --> 00:24:06,640
[Music]

596
00:24:06,640 --> 00:24:08,880
because after it open and read the

597
00:24:08,880 --> 00:24:10,660
content of artifact

598
00:24:10,660 --> 00:24:15,120
[Music]

599
00:24:15,120 --> 00:24:16,799
before to

600
00:24:16,799 --> 00:24:19,679
to come back to public libraries during

601
00:24:19,679 --> 00:24:22,240
antwerp i will continue with a

602
00:24:22,240 --> 00:24:23,679
discussion

603
00:24:23,679 --> 00:24:25,600
so

604
00:24:25,600 --> 00:24:28,559
maybe you already encounter

605
00:24:28,559 --> 00:24:30,960
this kind of

606
00:24:30,960 --> 00:24:34,320
case where you have data inserted

607
00:24:34,320 --> 00:24:35,440
between

608
00:24:35,440 --> 00:24:36,320
a

609
00:24:36,320 --> 00:24:39,360
part of code inside your binary

610
00:24:39,360 --> 00:24:41,440
it is very it is a

611
00:24:41,440 --> 00:24:44,720
common trick to hide this touch and

612
00:24:44,720 --> 00:24:47,520
replace the stack

613
00:24:47,520 --> 00:24:48,540
by

614
00:24:48,540 --> 00:24:50,799
[Music]

615
00:24:50,799 --> 00:24:53,918
so it will use

616
00:24:54,000 --> 00:24:57,910
a link register as a stack pointer

617
00:24:57,910 --> 00:25:00,640
[Music]

618
00:25:00,640 --> 00:25:01,919
sorry

619
00:25:01,919 --> 00:25:02,510
um

620
00:25:02,510 --> 00:25:03,840
[Music]

621
00:25:03,840 --> 00:25:05,200
okay

622
00:25:05,200 --> 00:25:08,240
so first it starts by uh following the

623
00:25:08,240 --> 00:25:10,159
the orange pass

624
00:25:10,159 --> 00:25:11,520
and jump

625
00:25:11,520 --> 00:25:12,880
to

626
00:25:12,880 --> 00:25:16,720
the label

627
00:25:17,039 --> 00:25:19,679
each time which ends by

628
00:25:19,679 --> 00:25:20,400
9

629
00:25:20,400 --> 00:25:23,400
4.

630
00:25:26,070 --> 00:25:28,320
[Music]

631
00:25:28,320 --> 00:25:30,799
do you see as a red pointer

632
00:25:30,799 --> 00:25:31,919
okay

633
00:25:31,919 --> 00:25:32,610
so

634
00:25:32,610 --> 00:25:35,200
[Music]

635
00:25:35,200 --> 00:25:38,000
in this case the execution follow the

636
00:25:38,000 --> 00:25:41,520
orange path and jump to this one

637
00:25:41,520 --> 00:25:42,170
and when

638
00:25:42,170 --> 00:25:44,159
[Music]

639
00:25:44,159 --> 00:25:45,760
here it is a

640
00:25:45,760 --> 00:25:48,400
branch with link register that means

641
00:25:48,400 --> 00:25:49,360
when

642
00:25:49,360 --> 00:25:52,158
you jump back

643
00:25:52,400 --> 00:25:55,039
x 30

644
00:25:55,039 --> 00:25:58,880
which is the link register is set to pc

645
00:25:58,880 --> 00:26:00,559
plus four

646
00:26:00,559 --> 00:26:01,279
so

647
00:26:01,279 --> 00:26:04,080
it points to this section

648
00:26:04,080 --> 00:26:05,279
and

649
00:26:05,279 --> 00:26:07,600
the execution continue

650
00:26:07,600 --> 00:26:08,180
and jump

651
00:26:08,180 --> 00:26:09,760
[Music]

652
00:26:09,760 --> 00:26:11,120
by following the

653
00:26:11,120 --> 00:26:12,960
green pass and

654
00:26:12,960 --> 00:26:14,320
in this section

655
00:26:14,320 --> 00:26:16,240
as a stack

656
00:26:16,240 --> 00:26:17,840
instead of using a

657
00:26:17,840 --> 00:26:20,159
stack and

658
00:26:20,159 --> 00:26:22,159
stack pointer and the

659
00:26:22,159 --> 00:26:25,919
data located the output data are located

660
00:26:25,919 --> 00:26:28,400
into a other section

661
00:26:28,400 --> 00:26:30,400
it reads data

662
00:26:30,400 --> 00:26:32,720
stored

663
00:26:32,720 --> 00:26:34,640
at the location printed by your link

664
00:26:34,640 --> 00:26:37,640
register

665
00:26:39,679 --> 00:26:42,080
um

666
00:26:44,000 --> 00:26:46,960
by doing by doing that

667
00:26:46,960 --> 00:26:50,159
um guido is not able to redrive

668
00:26:50,159 --> 00:26:52,880
the initial value of local variable

669
00:26:52,880 --> 00:26:54,400
and

670
00:26:54,400 --> 00:26:55,520
sometimes

671
00:26:55,520 --> 00:26:59,120
local variable cannot be uh

672
00:26:59,919 --> 00:27:03,919
not discovered by a guido

673
00:27:03,960 --> 00:27:05,760
[Music]

674
00:27:05,760 --> 00:27:07,520
additionally it is not considered that

675
00:27:07,520 --> 00:27:08,720
article

676
00:27:08,720 --> 00:27:12,559
so there is no cross-references

677
00:27:15,039 --> 00:27:15,760
no

678
00:27:15,760 --> 00:27:17,360
i will talk about

679
00:27:17,360 --> 00:27:18,840
another kind of

680
00:27:18,840 --> 00:27:22,399
obfuscation about

681
00:27:22,399 --> 00:27:25,918
texts index classes

682
00:27:27,279 --> 00:27:29,919
i think it is not really a notification

683
00:27:29,919 --> 00:27:30,720
but

684
00:27:30,720 --> 00:27:33,360
a way to

685
00:27:33,520 --> 00:27:35,440
to to

686
00:27:35,440 --> 00:27:36,880
to do something

687
00:27:36,880 --> 00:27:37,760
uh

688
00:27:37,760 --> 00:27:41,039
earlier than common entry point of

689
00:27:41,039 --> 00:27:43,600
java of android application

690
00:27:43,600 --> 00:27:45,600
so for most

691
00:27:45,600 --> 00:27:48,080
most of developers

692
00:27:48,080 --> 00:27:49,120
the

693
00:27:49,120 --> 00:27:51,840
application entry point is

694
00:27:51,840 --> 00:27:54,320
the application application attached

695
00:27:54,320 --> 00:27:55,520
based context

696
00:27:55,520 --> 00:27:56,640
method

697
00:27:56,640 --> 00:27:58,080
which is

698
00:27:58,080 --> 00:28:02,039
implemented by the classes

699
00:28:02,320 --> 00:28:03,600
where the

700
00:28:03,600 --> 00:28:05,279
full class name is

701
00:28:05,279 --> 00:28:08,640
inside the application

702
00:28:08,880 --> 00:28:13,320
entity into android manifest

703
00:28:17,039 --> 00:28:18,320
but in fact

704
00:28:18,320 --> 00:28:20,399
you can override

705
00:28:20,399 --> 00:28:22,880
the app component factory which is

706
00:28:22,880 --> 00:28:24,640
the classes inside

707
00:28:24,640 --> 00:28:27,120
under which android we

708
00:28:27,120 --> 00:28:29,360
which

709
00:28:29,360 --> 00:28:30,640
which perform

710
00:28:30,640 --> 00:28:32,080
instances

711
00:28:32,080 --> 00:28:34,960
which perform instant selection

712
00:28:34,960 --> 00:28:35,970
of

713
00:28:35,970 --> 00:28:38,320
[Music]

714
00:28:38,320 --> 00:28:39,120
of

715
00:28:39,120 --> 00:28:40,559
any components

716
00:28:40,559 --> 00:28:42,240
declared

717
00:28:42,240 --> 00:28:44,320
inside android manifest so this app

718
00:28:44,320 --> 00:28:46,159
component factory

719
00:28:46,159 --> 00:28:50,270
performs initialization of providers

720
00:28:50,270 --> 00:28:52,720
[Music]

721
00:28:52,720 --> 00:28:56,000
activity services and so and also

722
00:28:56,000 --> 00:28:58,480
it defines the default calculator of the

723
00:28:58,480 --> 00:28:59,820
application

724
00:28:59,820 --> 00:29:02,320
[Music]

725
00:29:02,320 --> 00:29:04,880
and it is the case here

726
00:29:04,880 --> 00:29:07,600
here it will replace the

727
00:29:07,600 --> 00:29:10,399
past class folder which search classes

728
00:29:10,399 --> 00:29:12,720
inside the apk but

729
00:29:12,720 --> 00:29:15,440
an in-memory desk class folder

730
00:29:15,440 --> 00:29:17,840
which with a buffer

731
00:29:17,840 --> 00:29:19,279
deciphered and

732
00:29:19,279 --> 00:29:20,559
rebuild

733
00:29:20,559 --> 00:29:24,399
that's the application starting

734
00:29:24,840 --> 00:29:27,520
um in this application

735
00:29:27,520 --> 00:29:30,000
into the the initial

736
00:29:30,000 --> 00:29:32,559
application there is

737
00:29:32,559 --> 00:29:34,720
only

738
00:29:34,720 --> 00:29:38,480
three or five classes with a

739
00:29:38,480 --> 00:29:40,799
is a packer code

740
00:29:40,799 --> 00:29:41,520
and

741
00:29:41,520 --> 00:29:42,880
other classes

742
00:29:42,880 --> 00:29:44,000
uh

743
00:29:44,000 --> 00:29:45,919
just less than one thousand classes

744
00:29:45,919 --> 00:29:47,840
contents on each

745
00:29:47,840 --> 00:29:50,559
one only a byte array

746
00:29:50,559 --> 00:29:52,399
of

747
00:29:52,399 --> 00:29:54,559
two thousand bytes

748
00:29:54,559 --> 00:29:56,320
and uh at runtime

749
00:29:56,320 --> 00:29:57,600
during uh

750
00:29:57,600 --> 00:29:58,399
when

751
00:29:58,399 --> 00:30:01,120
instantiate class ruler is called by the

752
00:30:01,120 --> 00:30:03,160
component factory

753
00:30:03,160 --> 00:30:06,240
[Music]

754
00:30:06,240 --> 00:30:09,760
every byte for every classes

755
00:30:09,760 --> 00:30:11,760
every byte array from every cases are

756
00:30:11,760 --> 00:30:14,880
compact night and zord

757
00:30:14,880 --> 00:30:16,000
and

758
00:30:16,000 --> 00:30:17,919
it results as a

759
00:30:17,919 --> 00:30:20,720
zip which is uh uncompressed

760
00:30:20,720 --> 00:30:23,200
and

761
00:30:23,200 --> 00:30:24,559
and load

762
00:30:24,559 --> 00:30:26,480
sorry and uh

763
00:30:26,480 --> 00:30:30,080
define i zoom as a new text file

764
00:30:30,080 --> 00:30:32,720
into the memory text folder so it

765
00:30:32,720 --> 00:30:34,450
replaced

766
00:30:34,450 --> 00:30:36,080
[Music]

767
00:30:36,080 --> 00:30:38,240
it replaces the default class folder of

768
00:30:38,240 --> 00:30:41,440
the application by your

769
00:30:41,440 --> 00:30:43,600
insight

770
00:30:43,600 --> 00:30:44,799
the

771
00:30:44,799 --> 00:30:47,440
text buffer

772
00:30:47,840 --> 00:30:49,520
this kind of

773
00:30:49,520 --> 00:30:50,799
packing

774
00:30:50,799 --> 00:30:51,919
it is

775
00:30:51,919 --> 00:30:55,039
the the best way is to

776
00:30:55,039 --> 00:30:58,399
to perform it statically

777
00:30:58,640 --> 00:30:59,679
by

778
00:30:59,679 --> 00:31:01,440
implementing a script

779
00:31:01,440 --> 00:31:04,399
which uh parse smoothie file and

780
00:31:04,399 --> 00:31:06,720
concatenate by tory and perform a

781
00:31:06,720 --> 00:31:07,600
version

782
00:31:07,600 --> 00:31:08,559
and

783
00:31:08,559 --> 00:31:10,240
the result at

784
00:31:10,240 --> 00:31:12,559
right

785
00:31:13,120 --> 00:31:15,919
is not obfuscated it contains

786
00:31:15,919 --> 00:31:16,840
all

787
00:31:16,840 --> 00:31:18,640
dexes

788
00:31:18,640 --> 00:31:21,279
the application

789
00:31:22,850 --> 00:31:24,000
[Music]

790
00:31:24,000 --> 00:31:25,279
just another

791
00:31:25,279 --> 00:31:27,279
trick used

792
00:31:27,279 --> 00:31:29,039
by this kind of tools

793
00:31:29,039 --> 00:31:31,200
is

794
00:31:31,279 --> 00:31:33,360
to diversify

795
00:31:33,360 --> 00:31:35,679
all the applications if

796
00:31:35,679 --> 00:31:38,799
all the application application check

797
00:31:38,799 --> 00:31:43,600
uh if a file it exists or not

798
00:31:43,600 --> 00:31:45,360
the application could

799
00:31:45,360 --> 00:31:48,720
f f open for example but by using

800
00:31:48,720 --> 00:31:49,919
passconf

801
00:31:49,919 --> 00:31:51,360
it allows

802
00:31:51,360 --> 00:31:53,840
the protection tools to hide

803
00:31:53,840 --> 00:31:55,039
the

804
00:31:55,039 --> 00:31:56,840
the return value

805
00:31:56,840 --> 00:31:58,240
[Music]

806
00:31:58,240 --> 00:32:00,720
it is less of use

807
00:32:00,720 --> 00:32:01,919
to it

808
00:32:01,919 --> 00:32:06,000
when a file exists or not because

809
00:32:06,000 --> 00:32:07,760
by doing the passconf the file exists

810
00:32:07,760 --> 00:32:10,080
only if the return value is

811
00:32:10,080 --> 00:32:11,679
zero is

812
00:32:11,679 --> 00:32:15,039
one zero zero zero

813
00:32:15,039 --> 00:32:17,919
so it is just a small trick

814
00:32:17,919 --> 00:32:20,240
but at a cisco level

815
00:32:20,240 --> 00:32:22,000
uh pass graph

816
00:32:22,000 --> 00:32:24,150
not to

817
00:32:24,150 --> 00:32:25,679
[Music]

818
00:32:25,679 --> 00:32:28,159
an opennet system call

819
00:32:28,159 --> 00:32:29,600
but

820
00:32:29,600 --> 00:32:32,080
efs

821
00:32:35,679 --> 00:32:37,120
okay

822
00:32:37,120 --> 00:32:39,430
and the last

823
00:32:39,430 --> 00:32:40,720
[Music]

824
00:32:40,720 --> 00:32:41,720
but maybe uh

825
00:32:41,720 --> 00:32:43,360
[Music]

826
00:32:43,360 --> 00:32:45,600
there are

827
00:32:45,600 --> 00:32:47,840
to explain

828
00:32:47,840 --> 00:32:50,880
the pact self modifying code is a

829
00:32:50,880 --> 00:32:54,440
kind of matriarchy

830
00:32:54,440 --> 00:32:56,159
[Music]

831
00:32:56,159 --> 00:32:58,080
okay so uh

832
00:32:58,080 --> 00:32:59,279
remember

833
00:32:59,279 --> 00:33:01,760
uh previous previews explaining

834
00:33:01,760 --> 00:33:04,799
explanation about

835
00:33:05,840 --> 00:33:08,480
or break

836
00:33:08,880 --> 00:33:11,039
stock analysis

837
00:33:11,039 --> 00:33:13,440
it is the same text

838
00:33:13,440 --> 00:33:15,600
but

839
00:33:15,600 --> 00:33:16,960
here

840
00:33:16,960 --> 00:33:18,840
you have two

841
00:33:18,840 --> 00:33:21,909
[Music]

842
00:33:23,360 --> 00:33:24,960
okay

843
00:33:24,960 --> 00:33:26,399
um

844
00:33:26,399 --> 00:33:29,600
you see my as a pointer

845
00:33:30,240 --> 00:33:31,600
so

846
00:33:31,600 --> 00:33:33,840
now

847
00:33:33,840 --> 00:33:36,960
when the execution

848
00:33:36,960 --> 00:33:39,919
follow this part of code

849
00:33:39,919 --> 00:33:41,200
the

850
00:33:41,200 --> 00:33:44,080
link register point to

851
00:33:44,080 --> 00:33:47,519
relative offset and size

852
00:33:47,519 --> 00:33:49,440
both

853
00:33:49,440 --> 00:33:51,039
value

854
00:33:51,039 --> 00:33:54,640
relative offset is offset is an offset

855
00:33:54,640 --> 00:33:55,679
is a

856
00:33:55,679 --> 00:33:57,600
location inside

857
00:33:57,600 --> 00:34:01,760
read-only data segment section

858
00:34:01,760 --> 00:34:04,799
and the size is a

859
00:34:04,880 --> 00:34:08,310
size of a subset of this section

860
00:34:08,310 --> 00:34:11,119
[Music]

861
00:34:11,119 --> 00:34:13,280
when the execution continue

862
00:34:13,280 --> 00:34:16,960
it will change protection of

863
00:34:16,960 --> 00:34:20,480
the range where arrow data is a map

864
00:34:20,480 --> 00:34:23,940
and make it so with write executable

865
00:34:23,940 --> 00:34:25,918
[Music]

866
00:34:25,918 --> 00:34:28,879
and perform a malloc they ciphered

867
00:34:28,879 --> 00:34:31,280
the application

868
00:34:31,280 --> 00:34:34,320
batch or in or deciphered the code

869
00:34:34,320 --> 00:34:35,260
located

870
00:34:35,260 --> 00:34:36,960
[Music]

871
00:34:36,960 --> 00:34:39,599
into error data and remap it

872
00:34:39,599 --> 00:34:40,719
to another location

873
00:34:40,719 --> 00:34:42,879
[Music]

874
00:34:42,879 --> 00:34:45,199
and the execution jump to this new

875
00:34:45,199 --> 00:34:47,440
location

876
00:34:47,440 --> 00:34:49,199
and the

877
00:34:49,199 --> 00:34:51,679
this freshly mapped version contains

878
00:34:51,679 --> 00:34:54,800
also another section of cipher data

879
00:34:54,800 --> 00:34:58,560
which is deciphered by

880
00:34:58,560 --> 00:35:00,560
this one

881
00:35:00,560 --> 00:35:03,760
and it it mapped several

882
00:35:03,760 --> 00:35:06,800
memory regions

883
00:35:07,440 --> 00:35:10,160
here you can show the output of

884
00:35:10,160 --> 00:35:11,520
interactors

885
00:35:11,520 --> 00:35:14,340
and

886
00:35:14,340 --> 00:35:16,960
[Music]

887
00:35:16,960 --> 00:35:19,920
you can show there is a lot of memory

888
00:35:19,920 --> 00:35:21,839
map

889
00:35:21,839 --> 00:35:25,119
the the first one point to this version

890
00:35:25,119 --> 00:35:28,000
the other point to freshly

891
00:35:28,000 --> 00:35:29,599
create version

892
00:35:29,599 --> 00:35:31,839
unfortunately at this step it is just an

893
00:35:31,839 --> 00:35:33,520
allocation so

894
00:35:33,520 --> 00:35:35,520
we have no data

895
00:35:35,520 --> 00:35:35,970
to

896
00:35:35,970 --> 00:35:38,000
[Music]

897
00:35:38,000 --> 00:35:39,040
dump

898
00:35:39,040 --> 00:35:42,110
by booking a search cisco

899
00:35:42,110 --> 00:35:44,079
[Music]

900
00:35:44,079 --> 00:35:45,520
so

901
00:35:45,520 --> 00:35:46,720
here

902
00:35:46,720 --> 00:35:47,440
we

903
00:35:47,440 --> 00:35:50,960
see there is an open hat

904
00:35:50,960 --> 00:35:51,680
when

905
00:35:51,680 --> 00:35:54,400
which happen when

906
00:35:54,400 --> 00:35:55,359
all

907
00:35:55,359 --> 00:35:57,520
reviews and map are done

908
00:35:57,520 --> 00:35:58,400
and

909
00:35:58,400 --> 00:35:59,710
this opennet is a

910
00:35:59,710 --> 00:36:00,960
[Music]

911
00:36:00,960 --> 00:36:02,480
an open of

912
00:36:02,480 --> 00:36:05,280
proxy status which is a

913
00:36:05,280 --> 00:36:06,720
commonly used

914
00:36:06,720 --> 00:36:09,119
to detect if extras debugger

915
00:36:09,119 --> 00:36:09,760
the

916
00:36:09,760 --> 00:36:11,440
[Music]

917
00:36:11,440 --> 00:36:12,640
is ready

918
00:36:12,640 --> 00:36:13,760
so

919
00:36:13,760 --> 00:36:16,160
for us it is interesting because

920
00:36:16,160 --> 00:36:19,599
we could hook up an article in and

921
00:36:19,599 --> 00:36:22,160
dump or previously

922
00:36:22,160 --> 00:36:24,960
allocated version

923
00:36:24,960 --> 00:36:27,839
content

924
00:36:28,160 --> 00:36:29,280
so

925
00:36:29,280 --> 00:36:32,560
let's record it like this

926
00:36:32,880 --> 00:36:34,320
with interrupter

927
00:36:34,320 --> 00:36:35,839
we trust the main

928
00:36:35,839 --> 00:36:37,440
main

929
00:36:37,440 --> 00:36:38,839
[Music]

930
00:36:38,839 --> 00:36:41,520
thread and

931
00:36:41,520 --> 00:36:44,400
if the we hook

932
00:36:44,400 --> 00:36:47,040
the instruction

933
00:36:47,040 --> 00:36:49,920
so we use sv sql before

934
00:36:49,920 --> 00:36:52,079
before to jump to the next next

935
00:36:52,079 --> 00:36:53,440
instruction

936
00:36:53,440 --> 00:36:55,200
and

937
00:36:55,200 --> 00:36:56,400
you show

938
00:36:56,400 --> 00:36:57,599
the

939
00:36:57,599 --> 00:37:00,720
resulting addresses

940
00:37:02,880 --> 00:37:03,760
okay

941
00:37:03,760 --> 00:37:06,960
so the x1 contains

942
00:37:06,960 --> 00:37:10,800
the protection flags which has been used

943
00:37:10,800 --> 00:37:11,520
when

944
00:37:11,520 --> 00:37:14,560
the execution flow enters into a map

945
00:37:14,560 --> 00:37:15,359
so

946
00:37:15,359 --> 00:37:16,720
this hook

947
00:37:16,720 --> 00:37:18,000
will

948
00:37:18,000 --> 00:37:19,680
push into

949
00:37:19,680 --> 00:37:21,359
an array

950
00:37:21,359 --> 00:37:24,280
the address and the size

951
00:37:24,280 --> 00:37:25,520
[Music]

952
00:37:25,520 --> 00:37:29,599
of the the map map call

953
00:37:29,680 --> 00:37:31,680
only when the protection flux is with

954
00:37:31,680 --> 00:37:33,680
the right execute and

955
00:37:33,680 --> 00:37:38,480
it is one of both sides

956
00:37:38,640 --> 00:37:42,078
besides this size

957
00:37:42,510 --> 00:37:45,669
[Music]

958
00:37:46,240 --> 00:37:47,680
this size

959
00:37:47,680 --> 00:37:49,200
comes from this call

960
00:37:49,200 --> 00:37:52,160
all allocated version

961
00:37:52,160 --> 00:37:54,960
as the size of

962
00:37:54,960 --> 00:37:56,080
the world is seven

963
00:37:56,080 --> 00:37:59,280
[Music]

964
00:37:59,280 --> 00:38:01,760
so it helps us to filter

965
00:38:01,760 --> 00:38:02,960
what we

966
00:38:02,960 --> 00:38:04,800
build them

967
00:38:04,800 --> 00:38:06,800
and next we look

968
00:38:06,800 --> 00:38:08,960
our opennet of

969
00:38:08,960 --> 00:38:11,200
rockstar statue

970
00:38:11,200 --> 00:38:12,079
and

971
00:38:12,079 --> 00:38:14,720
we'll use a file api from fredder in

972
00:38:14,720 --> 00:38:18,919
order to dump the information

973
00:38:20,320 --> 00:38:23,760
and in our case such region is not

974
00:38:23,760 --> 00:38:24,800
useless

975
00:38:24,800 --> 00:38:25,920
in fact

976
00:38:25,920 --> 00:38:28,079
each version is a

977
00:38:28,079 --> 00:38:29,359
the

978
00:38:29,359 --> 00:38:32,720
version where the start routine of

979
00:38:32,720 --> 00:38:35,119
shield thread are located

980
00:38:35,119 --> 00:38:38,480
so the execution

981
00:38:38,480 --> 00:38:40,400
will jump to

982
00:38:40,400 --> 00:38:42,160
another section

983
00:38:42,160 --> 00:38:44,800
such as part x

984
00:38:44,800 --> 00:38:47,839
and this one will

985
00:38:48,000 --> 00:38:50,240
will create new thread

986
00:38:50,240 --> 00:38:51,940
and with which

987
00:38:51,940 --> 00:38:53,200
[Music]

988
00:38:53,200 --> 00:38:54,560
each thread

989
00:38:54,560 --> 00:38:56,560
will

990
00:38:56,560 --> 00:38:57,520
start

991
00:38:57,520 --> 00:38:58,560
its

992
00:38:58,560 --> 00:39:01,359
execution by executing

993
00:39:01,359 --> 00:39:04,720
this corresponding part

994
00:39:04,780 --> 00:39:07,819
[Music]

995
00:39:07,839 --> 00:39:09,760
so in order to

996
00:39:09,760 --> 00:39:12,720
change the execution here

997
00:39:12,720 --> 00:39:15,710
we would we should

998
00:39:15,710 --> 00:39:18,320
[Music]

999
00:39:18,320 --> 00:39:19,680
pre-set right

1000
00:39:19,680 --> 00:39:21,839
in order to

1001
00:39:21,839 --> 00:39:23,200
redefine

1002
00:39:23,200 --> 00:39:25,520
where the

1003
00:39:25,520 --> 00:39:29,599
start routine is located in order to

1004
00:39:29,599 --> 00:39:30,960
to be able to

1005
00:39:30,960 --> 00:39:34,480
execute chord prior to the rest of the

1006
00:39:34,480 --> 00:39:36,200
reception

1007
00:39:36,200 --> 00:39:38,960
[Music]

1008
00:39:38,960 --> 00:39:41,119
if you are interested we will talk about

1009
00:39:41,119 --> 00:39:43,839
that later

1010
00:39:44,160 --> 00:39:46,880
okay now i will talk about

1011
00:39:46,880 --> 00:39:49,520
anti-looking

1012
00:39:50,000 --> 00:39:53,839
so remember anti-king is next

1013
00:39:53,839 --> 00:39:57,440
after the entry point here you can see a

1014
00:39:57,440 --> 00:39:59,119
common roadmap

1015
00:39:59,119 --> 00:40:02,160
for anti-working start by reading a port

1016
00:40:02,160 --> 00:40:04,079
maps contents

1017
00:40:04,079 --> 00:40:07,760
in order to search to search

1018
00:40:08,079 --> 00:40:09,280
suspicious

1019
00:40:09,280 --> 00:40:10,560
libraries

1020
00:40:10,560 --> 00:40:11,920
and

1021
00:40:11,920 --> 00:40:14,960
it will continue by checking

1022
00:40:14,960 --> 00:40:16,079
all range

1023
00:40:16,079 --> 00:40:17,580
or any symbols

1024
00:40:17,580 --> 00:40:20,880
[Music]

1025
00:40:21,680 --> 00:40:23,119
so

1026
00:40:23,119 --> 00:40:24,480
in some case

1027
00:40:24,480 --> 00:40:26,240
we can see

1028
00:40:26,240 --> 00:40:27,040
oh

1029
00:40:27,040 --> 00:40:28,960
sorry just see the time

1030
00:40:28,960 --> 00:40:32,010
[Music]

1031
00:40:36,800 --> 00:40:39,119
in this case

1032
00:40:39,119 --> 00:40:41,440
the execution starts

1033
00:40:41,440 --> 00:40:42,720
into the

1034
00:40:42,720 --> 00:40:45,599
protection libraries but

1035
00:40:45,599 --> 00:40:48,000
the protection of the map itself at

1036
00:40:48,000 --> 00:40:49,920
another location and jump

1037
00:40:49,920 --> 00:40:50,880
to

1038
00:40:50,880 --> 00:40:53,440
this new location at the same

1039
00:40:53,440 --> 00:40:55,440
of offset

1040
00:40:55,440 --> 00:40:57,280
than the current execution

1041
00:40:57,280 --> 00:40:59,520
so

1042
00:41:01,599 --> 00:41:05,599
it is a kind i think it is a kind for

1043
00:41:05,599 --> 00:41:07,040
editors

1044
00:41:07,040 --> 00:41:07,790
to

1045
00:41:07,790 --> 00:41:10,160
[Music]

1046
00:41:10,160 --> 00:41:12,640
to protect against

1047
00:41:12,640 --> 00:41:15,520
some booking because you need to to know

1048
00:41:15,520 --> 00:41:16,319
the

1049
00:41:16,319 --> 00:41:18,319
the new absolute set of the rooting

1050
00:41:18,319 --> 00:41:20,720
function and this this offset is

1051
00:41:20,720 --> 00:41:22,400
relative to

1052
00:41:22,400 --> 00:41:25,599
the location where the new

1053
00:41:25,599 --> 00:41:28,160
sorry where the aperture

1054
00:41:28,160 --> 00:41:30,680
application libraries has been removed

1055
00:41:30,680 --> 00:41:33,899
[Music]

1056
00:41:34,079 --> 00:41:35,119
okay

1057
00:41:35,119 --> 00:41:36,319
so now

1058
00:41:36,319 --> 00:41:39,359
we will see all the

1059
00:41:40,319 --> 00:41:43,440
um all the protection tools detect

1060
00:41:43,440 --> 00:41:45,440
uh all free target jet

1061
00:41:45,440 --> 00:41:48,880
uh sorry of the agent or unexpected code

1062
00:41:48,880 --> 00:41:51,040
is

1063
00:41:51,520 --> 00:41:54,720
existing to the application

1064
00:41:56,319 --> 00:41:59,280
imagine we have

1065
00:41:59,280 --> 00:42:01,839
a group of the content of the roadmaps

1066
00:42:01,839 --> 00:42:03,440
is content

1067
00:42:03,440 --> 00:42:06,400
every memory version

1068
00:42:06,400 --> 00:42:08,880
involved into the application

1069
00:42:08,880 --> 00:42:10,640
but

1070
00:42:10,640 --> 00:42:13,839
it will start by filter only version

1071
00:42:13,839 --> 00:42:15,680
with a

1072
00:42:15,680 --> 00:42:19,200
execution attribute

1073
00:42:19,920 --> 00:42:21,680
this version is

1074
00:42:21,680 --> 00:42:23,350
mainly

1075
00:42:23,350 --> 00:42:25,119
[Music]

1076
00:42:25,119 --> 00:42:26,720
all executable version

1077
00:42:26,720 --> 00:42:29,200
should be only

1078
00:42:29,200 --> 00:42:30,490
shoot contents only

1079
00:42:30,490 --> 00:42:33,609
[Music]

1080
00:42:33,680 --> 00:42:35,500
so

1081
00:42:35,500 --> 00:42:36,880
[Music]

1082
00:42:36,880 --> 00:42:39,599
executor version

1083
00:42:39,599 --> 00:42:41,599
mapped to file

1084
00:42:41,599 --> 00:42:44,599
should

1085
00:42:46,480 --> 00:42:47,930
sorry

1086
00:42:47,930 --> 00:42:51,160
[Music]

1087
00:42:52,640 --> 00:42:55,599
every executable region

1088
00:42:55,599 --> 00:42:57,200
which are mapped

1089
00:42:57,200 --> 00:43:00,968
[Music]

1090
00:43:04,140 --> 00:43:07,960
[Music]

1091
00:43:10,480 --> 00:43:13,760
do it again

1092
00:43:13,760 --> 00:43:16,000
um

1093
00:43:18,480 --> 00:43:20,720
all executable files involved into

1094
00:43:20,720 --> 00:43:23,200
application

1095
00:43:23,200 --> 00:43:24,720
are mapped

1096
00:43:24,720 --> 00:43:28,800
in memory and these files

1097
00:43:28,800 --> 00:43:30,800
should be

1098
00:43:30,800 --> 00:43:31,839
list

1099
00:43:31,839 --> 00:43:34,480
this each file name should be list into

1100
00:43:34,480 --> 00:43:37,200
one of these four sections

1101
00:43:37,200 --> 00:43:41,480
of this four group

1102
00:43:41,680 --> 00:43:43,440
for example

1103
00:43:43,440 --> 00:43:45,839
if it

1104
00:43:45,839 --> 00:43:46,760
is

1105
00:43:46,760 --> 00:43:48,000
[Music]

1106
00:43:48,000 --> 00:43:50,560
the lib the library

1107
00:43:50,560 --> 00:43:52,720
come from android image

1108
00:43:52,720 --> 00:43:55,119
the file name of this february

1109
00:43:55,119 --> 00:43:58,640
should be contained into this file

1110
00:43:58,640 --> 00:43:59,680
and

1111
00:43:59,680 --> 00:44:00,880
it is a

1112
00:44:00,880 --> 00:44:05,440
always rule for vendor libraries

1113
00:44:05,599 --> 00:44:07,520
t

1114
00:44:07,520 --> 00:44:09,280
manufacturers

1115
00:44:09,280 --> 00:44:10,800
and a

1116
00:44:10,800 --> 00:44:12,079
libraries

1117
00:44:12,079 --> 00:44:15,200
packed package with application

1118
00:44:15,200 --> 00:44:16,000
so

1119
00:44:16,000 --> 00:44:18,079
if a file mapped

1120
00:44:18,079 --> 00:44:19,760
in memory

1121
00:44:19,760 --> 00:44:23,599
are not defined into one of these files

1122
00:44:23,599 --> 00:44:25,280
it is

1123
00:44:25,280 --> 00:44:26,960
unexpected

1124
00:44:26,960 --> 00:44:28,240
executable

1125
00:44:28,240 --> 00:44:28,840
file

1126
00:44:28,840 --> 00:44:30,319
[Music]

1127
00:44:30,319 --> 00:44:33,680
and and suspicious

1128
00:44:34,319 --> 00:44:36,400
so at the right

1129
00:44:36,400 --> 00:44:39,200
we have the um

1130
00:44:40,319 --> 00:44:42,380
a log from the problem

1131
00:44:42,380 --> 00:44:44,000
[Music]

1132
00:44:44,000 --> 00:44:45,359
and

1133
00:44:45,359 --> 00:44:47,119
when the application

1134
00:44:47,119 --> 00:44:48,480
enumerates or

1135
00:44:48,480 --> 00:44:50,640
reads the content of hotmaps

1136
00:44:50,640 --> 00:44:52,480
for example

1137
00:44:52,480 --> 00:44:55,839
it could read the file read

1138
00:44:55,839 --> 00:44:57,599
line by line

1139
00:44:57,599 --> 00:44:58,960
and

1140
00:44:58,960 --> 00:45:01,200
check if each

1141
00:45:01,200 --> 00:45:03,040
is the path of each file

1142
00:45:03,040 --> 00:45:04,120
the content

1143
00:45:04,120 --> 00:45:05,680
[Music]

1144
00:45:05,680 --> 00:45:06,800
is defined

1145
00:45:06,800 --> 00:45:08,640
into vendor

1146
00:45:08,640 --> 00:45:09,520
or

1147
00:45:09,520 --> 00:45:12,560
node in this case i think it is a

1148
00:45:12,560 --> 00:45:15,680
font file id

1149
00:45:15,920 --> 00:45:16,839
and

1150
00:45:16,839 --> 00:45:18,720
um

1151
00:45:18,720 --> 00:45:19,920
and here

1152
00:45:19,920 --> 00:45:22,240
the library

1153
00:45:22,240 --> 00:45:23,440
so we

1154
00:45:23,440 --> 00:45:24,480
are

1155
00:45:24,480 --> 00:45:26,560
libya premium

1156
00:45:26,560 --> 00:45:28,079
which are

1157
00:45:28,079 --> 00:45:30,800
waitlisted in the

1158
00:45:30,800 --> 00:45:32,880
system dc

1159
00:45:32,880 --> 00:45:34,960
lb library

1160
00:45:34,960 --> 00:45:36,160
but

1161
00:45:36,160 --> 00:45:37,760
here we have

1162
00:45:37,760 --> 00:45:39,359
three directions

1163
00:45:39,359 --> 00:45:43,680
and this this file and an uh any library

1164
00:45:43,680 --> 00:45:47,090
every loaded by using ld preload

1165
00:45:47,090 --> 00:45:49,520
[Music]

1166
00:45:49,520 --> 00:45:51,280
are not contained

1167
00:45:51,280 --> 00:45:55,920
into any of this white listed file

1168
00:45:57,680 --> 00:46:00,400
that is why the application when our

1169
00:46:00,400 --> 00:46:02,960
protection tools detect suspect such

1170
00:46:02,960 --> 00:46:06,640
species file is loaded in

1171
00:46:06,640 --> 00:46:08,800
memory

1172
00:46:08,800 --> 00:46:12,079
but it's not sufficient because

1173
00:46:12,079 --> 00:46:12,650
no now

1174
00:46:12,650 --> 00:46:14,079
[Music]

1175
00:46:14,079 --> 00:46:16,400
the tool must

1176
00:46:16,400 --> 00:46:18,800
must detect

1177
00:46:18,800 --> 00:46:19,920
where

1178
00:46:19,920 --> 00:46:22,880
symbol each symbol are located

1179
00:46:22,880 --> 00:46:25,119
in order to detect if a

1180
00:46:25,119 --> 00:46:29,040
function has been hooked or not

1181
00:46:29,040 --> 00:46:30,240
so

1182
00:46:30,240 --> 00:46:33,040
when the protection tools pulse the

1183
00:46:33,040 --> 00:46:35,520
entry of

1184
00:46:35,520 --> 00:46:39,200
each line of port maps

1185
00:46:39,200 --> 00:46:41,760
its parts

1186
00:46:41,760 --> 00:46:44,960
start addressing and address and also it

1187
00:46:44,960 --> 00:46:46,640
has also

1188
00:46:46,640 --> 00:46:49,119
the attribute in order to detect execute

1189
00:46:49,119 --> 00:46:50,480
on the

1190
00:46:50,480 --> 00:46:51,520
region and

1191
00:46:51,520 --> 00:46:54,839
[Music]

1192
00:46:54,839 --> 00:46:58,720
and and if our version is executable or

1193
00:46:58,720 --> 00:47:00,959
not

1194
00:47:04,000 --> 00:47:04,880
next

1195
00:47:04,880 --> 00:47:07,920
it will use this district with a dl open

1196
00:47:07,920 --> 00:47:10,160
in order to detect if the library is

1197
00:47:10,160 --> 00:47:11,920
already

1198
00:47:11,920 --> 00:47:13,760
loaded or not

1199
00:47:13,760 --> 00:47:17,680
into the process and um

1200
00:47:17,680 --> 00:47:20,319
and the final the final structure

1201
00:47:20,319 --> 00:47:23,440
i will try this one

1202
00:47:23,440 --> 00:47:26,160
and next step also the ancient

1203
00:47:26,160 --> 00:47:27,280
content so

1204
00:47:27,280 --> 00:47:29,200
proxy map

1205
00:47:29,200 --> 00:47:31,359
has been passed

1206
00:47:31,359 --> 00:47:34,319
the book detection

1207
00:47:34,640 --> 00:47:36,400
mechanism

1208
00:47:36,400 --> 00:47:37,280
will

1209
00:47:37,280 --> 00:47:39,680
browse this shine list

1210
00:47:39,680 --> 00:47:42,078
of uh

1211
00:47:42,559 --> 00:47:44,640
operation from

1212
00:47:44,640 --> 00:47:45,520
sorry

1213
00:47:45,520 --> 00:47:48,079
operations

1214
00:47:48,079 --> 00:47:49,760
and

1215
00:47:49,760 --> 00:47:52,559
it will check if a

1216
00:47:52,559 --> 00:47:55,839
at the beginning begin of each version

1217
00:47:55,839 --> 00:47:58,880
there is a f magic

1218
00:47:58,880 --> 00:48:00,640
so if it's the case

1219
00:48:00,640 --> 00:48:02,800
it will take the

1220
00:48:02,800 --> 00:48:03,599
path

1221
00:48:03,599 --> 00:48:05,280
of the file

1222
00:48:05,280 --> 00:48:08,800
and associate it to this version and it

1223
00:48:08,800 --> 00:48:10,800
will load it as

1224
00:48:10,800 --> 00:48:14,720
the linker for the grid

1225
00:48:16,079 --> 00:48:19,480
but instead of using the linker

1226
00:48:19,480 --> 00:48:20,960
[Music]

1227
00:48:20,960 --> 00:48:23,359
the protection tools will pass the

1228
00:48:23,359 --> 00:48:25,440
either of the elf

1229
00:48:25,440 --> 00:48:26,720
and

1230
00:48:26,720 --> 00:48:29,440
it will try to resolve

1231
00:48:29,440 --> 00:48:30,480
itself

1232
00:48:30,480 --> 00:48:31,839
the

1233
00:48:31,839 --> 00:48:34,400
whole symbols and it will perform some

1234
00:48:34,400 --> 00:48:37,200
comparison on

1235
00:48:37,200 --> 00:48:38,880
what is the address of symbols in the

1236
00:48:38,880 --> 00:48:40,160
oculus

1237
00:48:40,160 --> 00:48:43,119
map duration and

1238
00:48:43,119 --> 00:48:46,079
what at the best it could be

1239
00:48:46,079 --> 00:48:49,359
if the region if the file will be loaded

1240
00:48:49,359 --> 00:48:50,070
again

1241
00:48:50,070 --> 00:48:53,280
[Music]

1242
00:48:54,720 --> 00:48:57,119
directly

1243
00:48:57,119 --> 00:49:00,800
address should mismatch if you hooked

1244
00:49:00,800 --> 00:49:04,480
the function it is used

1245
00:49:04,480 --> 00:49:06,240
for example in this case

1246
00:49:06,240 --> 00:49:09,040
if you use a java dot perform in your

1247
00:49:09,040 --> 00:49:10,960
frida hooks

1248
00:49:10,960 --> 00:49:13,200
it will change

1249
00:49:13,200 --> 00:49:14,800
report

1250
00:49:14,800 --> 00:49:15,839
it

1251
00:49:15,839 --> 00:49:17,200
will

1252
00:49:17,200 --> 00:49:18,559
remap some

1253
00:49:18,559 --> 00:49:20,319
region from the part

1254
00:49:20,319 --> 00:49:21,450
and um

1255
00:49:21,450 --> 00:49:23,680
[Music]

1256
00:49:23,680 --> 00:49:27,200
and it will trigger this this detection

1257
00:49:27,200 --> 00:49:28,240
the

1258
00:49:28,240 --> 00:49:31,119
in fact this kind of detection can uh

1259
00:49:31,119 --> 00:49:33,440
provide anti-looking against exposed

1260
00:49:33,440 --> 00:49:35,839
animal

1261
00:49:36,240 --> 00:49:39,598
okay at the right

1262
00:49:39,839 --> 00:49:42,240
at the right you have a leap c another

1263
00:49:42,240 --> 00:49:45,119
mapping for deep sea of inside a plane

1264
00:49:45,119 --> 00:49:47,599
process and and at the right

1265
00:49:47,599 --> 00:49:51,599
uh for the locate process

1266
00:49:51,839 --> 00:49:54,079
so at this step we could

1267
00:49:54,079 --> 00:49:55,599
um

1268
00:49:55,599 --> 00:49:57,839
we have to wait to bypass the antibook

1269
00:49:57,839 --> 00:50:00,640
the first is specific to all the hook

1270
00:50:00,640 --> 00:50:02,480
work

1271
00:50:02,480 --> 00:50:06,480
as i as i explained

1272
00:50:06,720 --> 00:50:10,240
you could patch the link linked list

1273
00:50:10,240 --> 00:50:13,599
sorry the yes the links list in order to

1274
00:50:13,599 --> 00:50:16,079
stop the analysis

1275
00:50:16,079 --> 00:50:16,960
or

1276
00:50:16,960 --> 00:50:18,240
we could

1277
00:50:18,240 --> 00:50:20,558
lift

1278
00:50:20,800 --> 00:50:23,440
the output of the read of proxy maps in

1279
00:50:23,440 --> 00:50:25,760
order to add

1280
00:50:25,760 --> 00:50:27,839
them

1281
00:50:27,839 --> 00:50:30,880
so this one works fine but it is

1282
00:50:30,880 --> 00:50:33,119
too much specific to the protection

1283
00:50:33,119 --> 00:50:34,240
tools

1284
00:50:34,240 --> 00:50:36,479
so

1285
00:50:36,960 --> 00:50:39,520
we prefer

1286
00:50:39,520 --> 00:50:40,960
i think it is

1287
00:50:40,960 --> 00:50:43,839
better to to lift

1288
00:50:43,839 --> 00:50:47,520
proxy maps contents when svc read is

1289
00:50:47,520 --> 00:50:48,319
done

1290
00:50:48,319 --> 00:50:50,558
but

1291
00:50:51,680 --> 00:50:53,680
application not used

1292
00:50:53,680 --> 00:50:55,180
line by line with

1293
00:50:55,180 --> 00:50:57,920
[Music]

1294
00:50:57,920 --> 00:50:59,520
most of the application

1295
00:50:59,520 --> 00:51:01,440
read

1296
00:51:01,440 --> 00:51:03,359
byte one by one

1297
00:51:03,359 --> 00:51:08,200
so it is a order to

1298
00:51:09,680 --> 00:51:10,559
or

1299
00:51:10,559 --> 00:51:13,440
sometimes the application

1300
00:51:13,440 --> 00:51:16,960
performs with a random lens

1301
00:51:16,960 --> 00:51:19,119
so

1302
00:51:19,839 --> 00:51:21,200
if you

1303
00:51:21,200 --> 00:51:22,640
to lift the

1304
00:51:22,640 --> 00:51:24,800
oxide maps

1305
00:51:24,800 --> 00:51:27,040
you

1306
00:51:27,359 --> 00:51:29,359
you need to

1307
00:51:29,359 --> 00:51:31,599
you need to know the path of the farm

1308
00:51:31,599 --> 00:51:34,400
which is mapped but also the protection

1309
00:51:34,400 --> 00:51:36,720
and also the region in order to compare

1310
00:51:36,720 --> 00:51:38,720
it to a clean process

1311
00:51:38,720 --> 00:51:39,599
so

1312
00:51:39,599 --> 00:51:40,800
we must

1313
00:51:40,800 --> 00:51:43,920
be aware of a full line so if there is a

1314
00:51:43,920 --> 00:51:45,359
random

1315
00:51:45,359 --> 00:51:47,839
lens uh you need to

1316
00:51:47,839 --> 00:51:51,160
to implement a smart smarter book

1317
00:51:51,160 --> 00:51:54,640
[Music]

1318
00:51:54,640 --> 00:51:56,400
this is not interesting boy but i

1319
00:51:56,400 --> 00:51:58,400
provide some

1320
00:51:58,400 --> 00:52:00,880
hook script to perform that

1321
00:52:00,880 --> 00:52:03,599
inside the slides but i have not enough

1322
00:52:03,599 --> 00:52:04,890
time so so i continue

1323
00:52:04,890 --> 00:52:07,920
[Music]

1324
00:52:08,559 --> 00:52:11,359
it is just an example how to

1325
00:52:11,359 --> 00:52:13,920
patch the

1326
00:52:13,920 --> 00:52:16,319
the output buffer of the ritzy school

1327
00:52:16,319 --> 00:52:19,280
using frida it use a memory

1328
00:52:19,280 --> 00:52:19,730
um

1329
00:52:19,730 --> 00:52:21,119
[Music]

1330
00:52:21,119 --> 00:52:24,319
memory api scan sync in order to search

1331
00:52:24,319 --> 00:52:25,280
search

1332
00:52:25,280 --> 00:52:27,920
for example rwx

1333
00:52:27,920 --> 00:52:30,640
patterns and replace it by uh in this

1334
00:52:30,640 --> 00:52:32,400
call in this case

1335
00:52:32,400 --> 00:52:34,079
just uh read the

1336
00:52:34,079 --> 00:52:37,119
dash x

1337
00:52:38,960 --> 00:52:41,839
be aware when you do that

1338
00:52:41,839 --> 00:52:45,200
if you use a white right right away you

1339
00:52:45,200 --> 00:52:46,640
you should

1340
00:52:46,640 --> 00:52:48,640
keep the same length

1341
00:52:48,640 --> 00:52:53,599
[Music]

1342
00:52:53,599 --> 00:52:56,960
another kind of fader detection is to

1343
00:52:56,960 --> 00:52:58,000
search

1344
00:52:58,000 --> 00:53:00,400
injector of header

1345
00:53:00,400 --> 00:53:02,480
and use a

1346
00:53:02,480 --> 00:53:03,599
dlc

1347
00:53:03,599 --> 00:53:05,760
for example and

1348
00:53:05,760 --> 00:53:08,960
or to search for threats because

1349
00:53:08,960 --> 00:53:11,839
frida has a two thread with a specific

1350
00:53:11,839 --> 00:53:12,720
name

1351
00:53:12,720 --> 00:53:15,839
so if you use the stronger feeder

1352
00:53:15,839 --> 00:53:18,799
for example the

1353
00:53:19,280 --> 00:53:21,280
the server

1354
00:53:21,280 --> 00:53:22,880
patch such

1355
00:53:22,880 --> 00:53:26,160
things but if you use official

1356
00:53:26,160 --> 00:53:27,920
further binary binary

1357
00:53:27,920 --> 00:53:28,960
you

1358
00:53:28,960 --> 00:53:32,000
you could be integrated by the

1359
00:53:32,000 --> 00:53:34,240
tempering of such values

1360
00:53:34,240 --> 00:53:37,040
so in this case

1361
00:53:37,040 --> 00:53:38,559
i think there is a

1362
00:53:38,559 --> 00:53:42,640
three three way to do that versus us in

1363
00:53:42,640 --> 00:53:45,520
previous case

1364
00:53:45,520 --> 00:53:49,839
our if a map is used to

1365
00:53:49,839 --> 00:53:53,040
to top the content of

1366
00:53:53,040 --> 00:53:54,480
yourself

1367
00:53:54,480 --> 00:53:56,880
task statue

1368
00:53:56,880 --> 00:53:58,400
you could

1369
00:53:58,400 --> 00:54:01,119
change the file descriptor in order to

1370
00:54:01,119 --> 00:54:04,800
point to another another clean

1371
00:54:04,800 --> 00:54:06,210
spread the statue file

1372
00:54:06,210 --> 00:54:08,240
[Music]

1373
00:54:08,240 --> 00:54:11,240
so

1374
00:54:12,960 --> 00:54:14,720
and there it is the other work to

1375
00:54:14,720 --> 00:54:18,240
perform what i explain

1376
00:54:18,240 --> 00:54:19,760
and uh

1377
00:54:19,760 --> 00:54:22,319
i have not the time but

1378
00:54:22,319 --> 00:54:25,319
um

1379
00:54:25,520 --> 00:54:26,640
i think

1380
00:54:26,640 --> 00:54:29,119
the most important is to keep

1381
00:54:29,119 --> 00:54:30,640
all hook

1382
00:54:30,640 --> 00:54:31,839
consistent

1383
00:54:31,839 --> 00:54:33,440
because

1384
00:54:33,440 --> 00:54:35,680
[Music]

1385
00:54:35,680 --> 00:54:38,720
protection tools implement a lot of way

1386
00:54:38,720 --> 00:54:42,160
to detect what you do so if you look

1387
00:54:42,160 --> 00:54:43,520
only one way

1388
00:54:43,520 --> 00:54:45,520
and

1389
00:54:45,520 --> 00:54:47,760
it it will detect an issue

1390
00:54:47,760 --> 00:54:50,000
by comparing the results of every

1391
00:54:50,000 --> 00:54:51,200
function

1392
00:54:51,200 --> 00:54:53,599
every detection mechanism i give you an

1393
00:54:53,599 --> 00:54:55,119
example

1394
00:54:55,119 --> 00:54:56,640
of until

1395
00:54:56,640 --> 00:54:58,400
f threat detection

1396
00:54:58,400 --> 00:55:01,680
is done at native level

1397
00:55:01,920 --> 00:55:04,000
by reading the content of

1398
00:55:04,000 --> 00:55:05,680
stat

1399
00:55:05,680 --> 00:55:09,200
statue files for example and it research

1400
00:55:09,200 --> 00:55:13,119
if trusser pid is up to zero and

1401
00:55:13,119 --> 00:55:14,240
it uh

1402
00:55:14,240 --> 00:55:16,460
it will do the same from java

1403
00:55:16,460 --> 00:55:18,319
[Music]

1404
00:55:18,319 --> 00:55:21,200
but it will use the steam contents

1405
00:55:21,200 --> 00:55:22,640
and

1406
00:55:22,640 --> 00:55:23,520
it

1407
00:55:23,520 --> 00:55:25,520
will compare the results so if you

1408
00:55:25,520 --> 00:55:26,400
hooked

1409
00:55:26,400 --> 00:55:27,599
uh

1410
00:55:27,599 --> 00:55:30,880
c score or a c from ellipse a function

1411
00:55:30,880 --> 00:55:33,040
in order to tap further is it but but

1412
00:55:33,040 --> 00:55:35,119
not the java

1413
00:55:35,119 --> 00:55:37,040
detection

1414
00:55:37,040 --> 00:55:40,720
the protection tools will detect

1415
00:55:40,720 --> 00:55:42,480
you

1416
00:55:42,480 --> 00:55:47,319
you try to tamper the residue

1417
00:55:48,000 --> 00:55:51,040
there is a lot of other kind of uh

1418
00:55:51,040 --> 00:55:53,730
of detection you can find into the site

1419
00:55:53,730 --> 00:55:56,160
[Music]

1420
00:55:56,160 --> 00:55:57,200
and

1421
00:55:57,200 --> 00:55:59,359
another

1422
00:55:59,359 --> 00:56:01,040
interesting example is uh how the

1423
00:56:01,040 --> 00:56:02,799
application prevent

1424
00:56:02,799 --> 00:56:05,760
gdb or debugger to perform a curtain

1425
00:56:05,760 --> 00:56:09,040
it is done by doing a prctl

1426
00:56:09,040 --> 00:56:11,759
with this

1427
00:56:13,040 --> 00:56:14,000
this

1428
00:56:14,000 --> 00:56:15,200
constant

1429
00:56:15,200 --> 00:56:18,160
set them pebble

1430
00:56:18,160 --> 00:56:19,280
when you up

1431
00:56:19,280 --> 00:56:21,680
such kind of uh

1432
00:56:21,680 --> 00:56:24,799
of course of cisco

1433
00:56:24,799 --> 00:56:26,640
you should be aware you

1434
00:56:26,640 --> 00:56:28,839
should found

1435
00:56:28,839 --> 00:56:30,559
um

1436
00:56:30,559 --> 00:56:33,520
value which pro which shall cause the

1437
00:56:33,520 --> 00:56:35,440
less side effects

1438
00:56:35,440 --> 00:56:38,190
on the application

1439
00:56:38,190 --> 00:56:40,160
[Music]

1440
00:56:40,160 --> 00:56:40,880
and

1441
00:56:40,880 --> 00:56:42,960
here it is okay to

1442
00:56:42,960 --> 00:56:44,890
change your plct

1443
00:56:44,890 --> 00:56:48,559
[Music]

1444
00:56:48,559 --> 00:56:50,079
and

1445
00:56:50,079 --> 00:56:51,440
next is

1446
00:56:51,440 --> 00:56:55,520
all the anti-debugger work into the wasp

1447
00:56:55,520 --> 00:56:57,040
with a fork and so

1448
00:56:57,040 --> 00:56:59,200
so this part of code

1449
00:56:59,200 --> 00:57:01,920
performs the fork that means this part

1450
00:57:01,920 --> 00:57:04,559
will be executed only by the parent and

1451
00:57:04,559 --> 00:57:06,640
this part will be executed by

1452
00:57:06,640 --> 00:57:09,839
the shield process

1453
00:57:10,079 --> 00:57:13,200
and in this case the ship process

1454
00:57:13,200 --> 00:57:14,799
sorry

1455
00:57:14,799 --> 00:57:20,240
we start by doing a kind of attach

1456
00:57:21,810 --> 00:57:24,960
[Music]

1457
00:57:24,960 --> 00:57:26,880
uh after the fork

1458
00:57:26,880 --> 00:57:29,040
uh the shield process

1459
00:57:29,040 --> 00:57:30,160
will

1460
00:57:30,160 --> 00:57:33,440
do a pita pit rest attach on the pervert

1461
00:57:33,440 --> 00:57:35,350
so it is all the

1462
00:57:35,350 --> 00:57:37,119
[Music]

1463
00:57:37,119 --> 00:57:39,680
or it prevent a gdb for example to be

1464
00:57:39,680 --> 00:57:42,480
attached to the brand

1465
00:57:42,480 --> 00:57:45,200
and here i provide a

1466
00:57:45,200 --> 00:57:48,559
hook to replace

1467
00:57:48,559 --> 00:57:49,760
the attach

1468
00:57:49,760 --> 00:57:54,000
bio detach because detach is a the

1469
00:57:54,000 --> 00:57:56,319
construct which has a

1470
00:57:56,319 --> 00:57:58,610
less side effect on the application

1471
00:57:58,610 --> 00:58:01,899
[Music]

1472
00:58:02,079 --> 00:58:05,200
okay and finally in order to automate

1473
00:58:05,200 --> 00:58:06,850
all

1474
00:58:06,850 --> 00:58:08,000
[Music]

1475
00:58:08,000 --> 00:58:10,640
have another another problem

1476
00:58:10,640 --> 00:58:11,760
um

1477
00:58:11,760 --> 00:58:15,440
first the idea is to is to use only

1478
00:58:15,440 --> 00:58:17,520
adjunct site script in order to keep the

1479
00:58:17,520 --> 00:58:19,920
application uh packageable uh with a

1480
00:58:19,920 --> 00:58:21,440
fetal gadget

1481
00:58:21,440 --> 00:58:22,880
and

1482
00:58:22,880 --> 00:58:25,839
you will make

1483
00:58:26,000 --> 00:58:27,839
a universal script

1484
00:58:27,839 --> 00:58:30,799
targeting a lot of protection tools

1485
00:58:30,799 --> 00:58:32,880
and

1486
00:58:32,880 --> 00:58:33,920
more

1487
00:58:33,920 --> 00:58:34,839
so

1488
00:58:34,839 --> 00:58:36,559
remember

1489
00:58:36,559 --> 00:58:39,119
you would like by password

1490
00:58:39,119 --> 00:58:41,440
but there is a lot of thread

1491
00:58:41,440 --> 00:58:44,960
there is fork there is a

1492
00:58:44,960 --> 00:58:47,839
hook into entry point of libraries there

1493
00:58:47,839 --> 00:58:52,319
is hook inside the app component factory

1494
00:58:52,319 --> 00:58:53,599
prior to

1495
00:58:53,599 --> 00:58:56,000
application attachments context

1496
00:58:56,000 --> 00:58:57,200
and

1497
00:58:57,200 --> 00:58:58,880
it all are

1498
00:58:58,880 --> 00:59:01,280
possible with freedap but it not work

1499
00:59:01,280 --> 00:59:02,559
out of the box

1500
00:59:02,559 --> 00:59:04,559
so

1501
00:59:04,559 --> 00:59:07,760
you you should implement all

1502
00:59:07,760 --> 00:59:08,640
um

1503
00:59:08,640 --> 00:59:10,480
you should implement

1504
00:59:10,480 --> 00:59:12,240
hook which

1505
00:59:12,240 --> 00:59:14,480
allow to

1506
00:59:14,480 --> 00:59:16,960
to hook some point where you could be

1507
00:59:16,960 --> 00:59:20,250
able to deploy your final book

1508
00:59:20,250 --> 00:59:23,440
[Music]

1509
00:59:23,440 --> 00:59:26,240
so for example

1510
00:59:26,480 --> 00:59:30,440
to perform a ookof

1511
00:59:38,980 --> 00:59:43,119
[Music]

1512
00:59:43,119 --> 00:59:46,119
um

1513
00:59:46,240 --> 00:59:47,119
of

1514
00:59:47,119 --> 00:59:49,359
booking from application application

1515
00:59:49,359 --> 00:59:51,280
attached based context

1516
00:59:51,280 --> 00:59:52,240
as

1517
00:59:52,240 --> 00:59:54,480
lot of application

1518
00:59:54,480 --> 00:59:56,640
protected application

1519
00:59:56,640 --> 00:59:59,119
perform a system load library

1520
00:59:59,119 --> 01:00:03,040
of the spt libraries

1521
01:00:03,040 --> 01:00:05,200
inside

1522
01:00:05,200 --> 01:00:07,390
of component factories

1523
01:00:07,390 --> 01:00:08,640
[Music]

1524
01:00:08,640 --> 01:00:11,118
you should

1525
01:00:11,280 --> 01:00:14,799
you should perform a java book using

1526
01:00:14,799 --> 01:00:17,760
java de-optimize everything inside a

1527
01:00:17,760 --> 01:00:19,440
trader or

1528
01:00:19,440 --> 01:00:21,450
java performer

1529
01:00:21,450 --> 01:00:23,599
[Music]

1530
01:00:23,599 --> 01:00:26,400
but but if you use java use inside this

1531
01:00:26,400 --> 01:00:28,799
context you should be aware

1532
01:00:28,799 --> 01:00:31,760
some class will not be able because you

1533
01:00:31,760 --> 01:00:33,839
are very at the beginning of the

1534
01:00:33,839 --> 01:00:36,640
application so at this time only

1535
01:00:36,640 --> 01:00:38,880
classes from java package or traffic

1536
01:00:38,880 --> 01:00:41,420
package are available

1537
01:00:41,420 --> 01:00:43,119
[Music]

1538
01:00:43,119 --> 01:00:44,640
and

1539
01:00:44,640 --> 01:00:47,598
you should also

1540
01:00:49,200 --> 01:00:50,010
you should

1541
01:00:50,010 --> 01:00:51,760
[Music]

1542
01:00:51,760 --> 01:00:53,920
deploy book

1543
01:00:53,920 --> 01:00:55,280
on method

1544
01:00:55,280 --> 01:00:59,119
which are defined dynamically

1545
01:01:00,079 --> 01:01:03,040
only when the classes implementing and

1546
01:01:03,040 --> 01:01:04,480
implementing

1547
01:01:04,480 --> 01:01:06,079
these methods

1548
01:01:06,079 --> 01:01:07,440
are available

1549
01:01:07,440 --> 01:01:08,960
so that means

1550
01:01:08,960 --> 01:01:10,799
you should

1551
01:01:10,799 --> 01:01:13,460
book a class loader or

1552
01:01:13,460 --> 01:01:14,880
[Music]

1553
01:01:14,880 --> 01:01:20,160
loading dynamic loading of a solder

1554
01:01:21,599 --> 01:01:24,800
i provide you a

1555
01:01:24,800 --> 01:01:26,319
[Music]

1556
01:01:26,319 --> 01:01:29,520
sorry i have nothing to say

1557
01:01:30,530 --> 01:01:31,920
[Music]

1558
01:01:31,920 --> 01:01:36,400
the first point there is gni android

1559
01:01:37,040 --> 01:01:39,119
the classic location

1560
01:01:39,119 --> 01:01:39,740
where um

1561
01:01:39,740 --> 01:01:41,040
[Music]

1562
01:01:41,040 --> 01:01:42,720
the java perform

1563
01:01:42,720 --> 01:01:45,839
if you if you put an intercept

1564
01:01:45,839 --> 01:01:47,920
uh interceptor attached into a java

1565
01:01:47,920 --> 01:01:49,119
platform

1566
01:01:49,119 --> 01:01:51,280
it will be direct at the beginning of

1567
01:01:51,280 --> 01:01:53,040
the gni unload

1568
01:01:53,040 --> 01:01:55,039
but sometimes

1569
01:01:55,039 --> 01:01:57,280
you should be interested to

1570
01:01:57,280 --> 01:01:59,760
to perform to deploy some hook before

1571
01:01:59,760 --> 01:02:01,760
the entry point as

1572
01:02:01,760 --> 01:02:04,640
you you could do by uh using

1573
01:02:04,640 --> 01:02:06,880
leaf

1574
01:02:06,880 --> 01:02:09,119
leaf with a fritter gadget in order to

1575
01:02:09,119 --> 01:02:11,119
link the statically

1576
01:02:11,119 --> 01:02:12,140
or dynamically

1577
01:02:12,140 --> 01:02:15,339
[Music]

1578
01:02:16,559 --> 01:02:19,559
sorry

1579
01:02:22,000 --> 01:02:24,000
okay so here

1580
01:02:24,000 --> 01:02:27,280
i cannot finish i can't finish

1581
01:02:27,280 --> 01:02:29,440
[Music]

1582
01:02:29,440 --> 01:02:32,720
other challenges are multi-threading

1583
01:02:32,720 --> 01:02:34,720
because uh when you do

1584
01:02:34,720 --> 01:02:37,280
java perform or interceptor

1585
01:02:37,280 --> 01:02:40,480
it will patch version which are

1586
01:02:40,480 --> 01:02:41,280
chair

1587
01:02:41,280 --> 01:02:42,720
by

1588
01:02:42,720 --> 01:02:44,160
all thread

1589
01:02:44,160 --> 01:02:45,440
but

1590
01:02:45,440 --> 01:02:48,480
if the application is in line and use a

1591
01:02:48,480 --> 01:02:51,200
lot of cisco

1592
01:02:51,440 --> 01:02:52,400
you

1593
01:02:52,400 --> 01:02:53,680
you will be

1594
01:02:53,680 --> 01:02:55,839
uh

1595
01:02:55,920 --> 01:02:57,280
you must use

1596
01:02:57,280 --> 01:03:00,480
stalker but the stroker not

1597
01:03:00,480 --> 01:03:03,839
is per thread

1598
01:03:04,520 --> 01:03:06,160
[Music]

1599
01:03:06,160 --> 01:03:07,039
so

1600
01:03:07,039 --> 01:03:09,119
you should implement a follow follow

1601
01:03:09,119 --> 01:03:11,440
thread

1602
01:03:12,640 --> 01:03:16,520
and you can find

1603
01:03:22,620 --> 01:03:26,919
[Music]

1604
01:03:28,319 --> 01:03:31,359
yeah awesome uh would you like to i

1605
01:03:31,359 --> 01:03:33,440
think in a few minutes for questions

1606
01:03:33,440 --> 01:03:35,119
maybe yeah

1607
01:03:35,119 --> 01:03:37,760
um are there any questions

1608
01:03:37,760 --> 01:03:40,880
um for josh

1609
01:03:48,480 --> 01:03:50,480
thank you for the talk uh

1610
01:03:50,480 --> 01:03:53,680
how often uh do you find the susquehanna

1611
01:03:53,680 --> 01:03:55,839
i

1612
01:03:55,839 --> 01:03:57,760
how often do you find this kind of

1613
01:03:57,760 --> 01:03:59,359
protection in

1614
01:03:59,359 --> 01:04:00,720
apps

1615
01:04:00,720 --> 01:04:02,640
it looks like it's very strong

1616
01:04:02,640 --> 01:04:05,119
protection

1617
01:04:05,119 --> 01:04:06,079
it is

1618
01:04:06,079 --> 01:04:07,359
very common

1619
01:04:07,359 --> 01:04:09,280
inside

1620
01:04:09,280 --> 01:04:11,119
payment application

1621
01:04:11,119 --> 01:04:14,079
oscar postcard emulation

1622
01:04:14,079 --> 01:04:16,160
that is application performing

1623
01:04:16,160 --> 01:04:20,079
payment on terminal with the phone

1624
01:04:20,079 --> 01:04:21,200
and

1625
01:04:21,200 --> 01:04:23,039
also on mobile

1626
01:04:23,039 --> 01:04:25,119
point of sale

1627
01:04:25,119 --> 01:04:27,680
that is a terminal in a payment terminal

1628
01:04:27,680 --> 01:04:29,599
inside a phone

1629
01:04:29,599 --> 01:04:34,000
when the customer put his credit card

1630
01:04:34,000 --> 01:04:34,960
on the

1631
01:04:34,960 --> 01:04:39,559
on the top of the front of the vendor

1632
01:04:40,640 --> 01:04:41,760
and

1633
01:04:41,760 --> 01:04:44,000
some sensitive apps

1634
01:04:44,000 --> 01:04:45,520
which require

1635
01:04:45,520 --> 01:04:48,799
certification by state

1636
01:04:50,799 --> 01:04:55,079
and and maybe your game

1637
01:04:58,079 --> 01:05:00,400
the protections are very time consuming

1638
01:05:00,400 --> 01:05:01,920
now

1639
01:05:01,920 --> 01:05:04,030
like uh the matrix

1640
01:05:04,030 --> 01:05:07,169
[Music]

1641
01:05:12,000 --> 01:05:13,680
when you hook it

1642
01:05:13,680 --> 01:05:15,599
yes it is true

1643
01:05:15,599 --> 01:05:17,760
but

1644
01:05:19,440 --> 01:05:20,960
i don't talk about it but a lot of

1645
01:05:20,960 --> 01:05:22,720
protection tools perform time

1646
01:05:22,720 --> 01:05:25,680
measurement in order to detect

1647
01:05:25,680 --> 01:05:27,200
if you try to

1648
01:05:27,200 --> 01:05:27,839
to

1649
01:05:27,839 --> 01:05:29,119
temper it

1650
01:05:29,119 --> 01:05:31,359
and sometimes temporarily

1651
01:05:31,359 --> 01:05:34,839
time measurement is done by several

1652
01:05:34,839 --> 01:05:39,359
spread so it can be very difficult

1653
01:05:39,359 --> 01:05:40,799
to spoof

1654
01:05:40,799 --> 01:05:43,440
the behavior

1655
01:05:44,960 --> 01:05:47,200
but

1656
01:05:47,920 --> 01:05:50,960
matriarch for example is only done at

1657
01:05:50,960 --> 01:05:53,039
the beginning at starting

1658
01:05:53,039 --> 01:05:54,400
the application

1659
01:05:54,400 --> 01:05:55,359
so

1660
01:05:55,359 --> 01:05:56,720
it is

1661
01:05:56,720 --> 01:05:59,359
not so important for

1662
01:05:59,359 --> 01:06:02,920
for punching industry

1663
01:06:12,960 --> 01:06:15,200
just a quick one i have seen protection

1664
01:06:15,200 --> 01:06:17,680
against

1665
01:06:17,760 --> 01:06:21,280
against the pit race but i i have not or

1666
01:06:21,280 --> 01:06:23,920
at least the time the world and listen

1667
01:06:23,920 --> 01:06:26,000
anything about the small interposition

1668
01:06:26,000 --> 01:06:28,079
with the degree load for example

1669
01:06:28,079 --> 01:06:30,000
are there any controversials that you

1670
01:06:30,000 --> 01:06:33,760
have taken for this

1671
01:06:33,760 --> 01:06:34,799
sorry

1672
01:06:34,799 --> 01:06:37,359
i'm not sure to

1673
01:06:37,359 --> 01:06:39,839
understand

1674
01:06:41,280 --> 01:06:42,079
so

1675
01:06:42,079 --> 01:06:44,079
you said

1676
01:06:44,079 --> 01:06:46,400
that you were uh putting some

1677
01:06:46,400 --> 01:06:49,520
countermeasures against the pit race

1678
01:06:49,520 --> 01:06:50,799
but

1679
01:06:50,799 --> 01:06:53,440
did you also take into account a

1680
01:06:53,440 --> 01:06:56,079
symbol interposition with librilo did

1681
01:06:56,079 --> 01:06:59,200
you protect them against that yes

1682
01:06:59,200 --> 01:07:01,599
i talked about a deep preload during

1683
01:07:01,599 --> 01:07:03,119
until king

1684
01:07:03,119 --> 01:07:04,190
because

1685
01:07:04,190 --> 01:07:07,289
[Music]

1686
01:07:13,359 --> 01:07:16,480
because you should load if you used any

1687
01:07:16,480 --> 01:07:19,920
preload in order to to to load

1688
01:07:19,920 --> 01:07:22,720
a library which are not

1689
01:07:22,720 --> 01:07:23,920
known

1690
01:07:23,920 --> 01:07:25,920
by the platform as a

1691
01:07:25,920 --> 01:07:26,839
routine

1692
01:07:26,839 --> 01:07:29,119
libraries and

1693
01:07:29,119 --> 01:07:31,760
and if this library is not packaged with

1694
01:07:31,760 --> 01:07:34,720
a target application

1695
01:07:34,720 --> 01:07:36,319
the antique book

1696
01:07:36,319 --> 01:07:37,359
will

1697
01:07:37,359 --> 01:07:39,599
detect this

1698
01:07:39,599 --> 01:07:42,880
this library is not expected

1699
01:07:42,880 --> 01:07:45,520
just one time

1700
01:07:49,520 --> 01:07:53,240
any last questions

1701
01:07:56,400 --> 01:07:58,079
thank you very much for your talk george

1702
01:07:58,079 --> 01:07:59,920
he's giving a big number of thoughts

1703
01:07:59,920 --> 01:08:03,880
thank you that's it

