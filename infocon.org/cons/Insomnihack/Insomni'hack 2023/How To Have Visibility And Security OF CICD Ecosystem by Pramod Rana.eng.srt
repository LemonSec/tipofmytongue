1
00:00:03,680 --> 00:00:06,440
[Applause]

2
00:00:06,440 --> 00:00:09,559
hello everyone and welcome to the talk

3
00:00:09,559 --> 00:00:12,300
uh today I'm going to talk about how to

4
00:00:12,300 --> 00:00:15,179
have visibility and security of CI CD

5
00:00:15,179 --> 00:00:16,680
ecosystem

6
00:00:16,680 --> 00:00:19,320
from the agenda perspective first I'm

7
00:00:19,320 --> 00:00:21,359
going to set the context that why I'm

8
00:00:21,359 --> 00:00:24,359
having this talk at the first place uh

9
00:00:24,359 --> 00:00:25,680
I'm going to touch upon the attack

10
00:00:25,680 --> 00:00:28,260
surface around the technology part and

11
00:00:28,260 --> 00:00:29,820
uh what could be the possible

12
00:00:29,820 --> 00:00:32,940
methodology we can have to address the

13
00:00:32,940 --> 00:00:33,840
challenge

14
00:00:33,840 --> 00:00:35,760
and then I'm going to introduce an open

15
00:00:35,760 --> 00:00:38,880
source uh project CI CD guard around the

16
00:00:38,880 --> 00:00:41,879
similar solution and then we are going

17
00:00:41,879 --> 00:00:43,320
to Deep dive into the architecture and

18
00:00:43,320 --> 00:00:44,280
the workflow how the different

19
00:00:44,280 --> 00:00:46,620
components of that solution work works

20
00:00:46,620 --> 00:00:49,559
and uh we'll have a demo and then I'm

21
00:00:49,559 --> 00:00:51,120
going to close out with the with the

22
00:00:51,120 --> 00:00:55,260
future roadmap around the talk

23
00:00:55,260 --> 00:00:58,079
um a bit about myself I am pramod Rana

24
00:00:58,079 --> 00:00:59,340
working as the application security

25
00:00:59,340 --> 00:01:01,620
manager with the netscope for those who

26
00:01:01,620 --> 00:01:03,539
don't know us please visit we are at

27
00:01:03,539 --> 00:01:06,960
insomni hack and I am primarily in two

28
00:01:06,960 --> 00:01:09,960
domains security testing and secops I'm

29
00:01:09,960 --> 00:01:11,820
author of three open source projects

30
00:01:11,820 --> 00:01:13,740
omniscient View prioritizer and SEC

31
00:01:13,740 --> 00:01:16,320
depend editor which I have presented in

32
00:01:16,320 --> 00:01:20,520
in different talks blackhead Defcon uh

33
00:01:20,520 --> 00:01:25,039
last month OS global appsec

34
00:01:30,180 --> 00:01:34,560
uh first uh about the context so um let

35
00:01:34,560 --> 00:01:36,180
me start with the oversimplified version

36
00:01:36,180 --> 00:01:38,700
of the CI CD ecosystem

37
00:01:38,700 --> 00:01:41,400
so for any software in the world we have

38
00:01:41,400 --> 00:01:44,759
a certain code base uh that code base is

39
00:01:44,759 --> 00:01:46,680
stored in a central location in terms of

40
00:01:46,680 --> 00:01:47,880
organization

41
00:01:47,880 --> 00:01:49,740
and then we have a solution which

42
00:01:49,740 --> 00:01:51,899
converts that code base into Deployable

43
00:01:51,899 --> 00:01:54,180
entity which is again stored in a

44
00:01:54,180 --> 00:01:56,220
central location and then we have a

45
00:01:56,220 --> 00:01:59,100
solution which deploys that and that

46
00:01:59,100 --> 00:02:01,079
Deployable entity into the different uh

47
00:02:01,079 --> 00:02:02,880
infrastructure or the environment and

48
00:02:02,880 --> 00:02:06,079
that environment could be anything

49
00:02:07,220 --> 00:02:10,020
Advocate I highly recommend to have the

50
00:02:10,020 --> 00:02:12,120
security integration with each phases of

51
00:02:12,120 --> 00:02:15,239
the sdlc which we call it Security in CI

52
00:02:15,239 --> 00:02:17,640
CD as we all know it

53
00:02:17,640 --> 00:02:20,160
um it's a great topic but this talk is

54
00:02:20,160 --> 00:02:23,520
is not about that the stock is about the

55
00:02:23,520 --> 00:02:26,040
uh securing the building blocks of the

56
00:02:26,040 --> 00:02:29,640
cicd ecosystem which is security of cicd

57
00:02:29,640 --> 00:02:30,959
in

58
00:02:30,959 --> 00:02:34,260
um in any kind of ecosystem I am using

59
00:02:34,260 --> 00:02:35,940
the word ecosystem very precisely here

60
00:02:35,940 --> 00:02:37,500
simply because

61
00:02:37,500 --> 00:02:40,140
um no component or no technology in the

62
00:02:40,140 --> 00:02:42,480
overall CI CD platform is independent

63
00:02:42,480 --> 00:02:44,220
all of the things are related to each

64
00:02:44,220 --> 00:02:46,560
other because end of the day as a

65
00:02:46,560 --> 00:02:48,000
software provider we are delivering this

66
00:02:48,000 --> 00:02:52,379
software to our customers and in in any

67
00:02:52,379 --> 00:02:54,660
ecosystem in nature as well if we have a

68
00:02:54,660 --> 00:02:56,459
compromise of one component it it

69
00:02:56,459 --> 00:02:58,800
eventually impacts the entire ecosystem

70
00:02:58,800 --> 00:03:01,620
and that is the need where uh we need to

71
00:03:01,620 --> 00:03:03,599
look at the each component uh separately

72
00:03:03,599 --> 00:03:05,160
but at the same time building the

73
00:03:05,160 --> 00:03:08,280
overall relationship between them

74
00:03:08,280 --> 00:03:10,739
that is the part of problem the first is

75
00:03:10,739 --> 00:03:12,599
the visibility part and when I say

76
00:03:12,599 --> 00:03:14,760
visibility what I mean by that is in in

77
00:03:14,760 --> 00:03:17,580
in a very in a medium to a large size of

78
00:03:17,580 --> 00:03:18,659
organization

79
00:03:18,659 --> 00:03:21,180
I as a security professional I might be

80
00:03:21,180 --> 00:03:23,459
aware I I have let's say 1000

81
00:03:23,459 --> 00:03:25,440
repositories but do we have the

82
00:03:25,440 --> 00:03:28,019
visibility that how many third-party

83
00:03:28,019 --> 00:03:30,540
GitHub actions we are using across those

84
00:03:30,540 --> 00:03:33,540
thousand repositories and even in best

85
00:03:33,540 --> 00:03:35,099
case scenario let's say we have that

86
00:03:35,099 --> 00:03:37,200
visibility but are we aware that which

87
00:03:37,200 --> 00:03:38,760
version of the third party GitHub

88
00:03:38,760 --> 00:03:41,640
actions we are using across the entire

89
00:03:41,640 --> 00:03:44,400
organization and that just uh one

90
00:03:44,400 --> 00:03:46,440
example of that another example could be

91
00:03:46,440 --> 00:03:48,540
I might be aware that I have let's say

92
00:03:48,540 --> 00:03:51,299
50 Jenkins server in my environment but

93
00:03:51,299 --> 00:03:53,340
do I know that how many jobs are running

94
00:03:53,340 --> 00:03:55,620
on those uh those 100 are Jenkins

95
00:03:55,620 --> 00:03:58,500
servers and if yes that how many nodes I

96
00:03:58,500 --> 00:04:00,540
have across those are different Jenkins

97
00:04:00,540 --> 00:04:03,540
infrastructure so that comes the uh

98
00:04:03,540 --> 00:04:06,000
visibility part of the of the entire

99
00:04:06,000 --> 00:04:07,620
ecosystem the other part is the

100
00:04:07,620 --> 00:04:09,239
relationship like I said there is no

101
00:04:09,239 --> 00:04:11,879
independent uh entity when it comes to

102
00:04:11,879 --> 00:04:14,040
the CI CD pipeline all of those things

103
00:04:14,040 --> 00:04:16,380
are related but how do we know the

104
00:04:16,380 --> 00:04:17,519
relationship between the different

105
00:04:17,519 --> 00:04:19,560
components which is Flowing from A to B

106
00:04:19,560 --> 00:04:22,620
at any given point of time and that we

107
00:04:22,620 --> 00:04:24,180
will touch upon the attack surface part

108
00:04:24,180 --> 00:04:26,540
as well

109
00:04:26,660 --> 00:04:31,020
so uh let's say we have a Jenkins server

110
00:04:31,020 --> 00:04:33,540
which is running a job you know building

111
00:04:33,540 --> 00:04:37,320
the uh binary solution which we are

112
00:04:37,320 --> 00:04:40,259
deploying at our customer site so and in

113
00:04:40,259 --> 00:04:42,120
that Jenkins server let's say we have a

114
00:04:42,120 --> 00:04:44,220
very trivial vulnerability default or

115
00:04:44,220 --> 00:04:47,220
default or V credentials so at first

116
00:04:47,220 --> 00:04:49,500
point uh it might look like a very

117
00:04:49,500 --> 00:04:51,060
trivial vulnerability but if you look at

118
00:04:51,060 --> 00:04:52,680
the overall picture and that's where the

119
00:04:52,680 --> 00:04:54,479
relationship part comes into the uh into

120
00:04:54,479 --> 00:04:56,880
the overall system

121
00:04:56,880 --> 00:04:59,040
from a very trivial vulnerability which

122
00:04:59,040 --> 00:05:00,780
is the default and weak credentials we

123
00:05:00,780 --> 00:05:03,180
will be impacting a binary which we

124
00:05:03,180 --> 00:05:05,699
again is is deploying into all of our

125
00:05:05,699 --> 00:05:07,620
customer uh infrastructure and if you

126
00:05:07,620 --> 00:05:08,880
look at from the business perspective

127
00:05:08,880 --> 00:05:10,800
that's uh I'll say one of the worst

128
00:05:10,800 --> 00:05:12,960
scenarios we could be in in terms of

129
00:05:12,960 --> 00:05:14,820
security

130
00:05:14,820 --> 00:05:17,160
another another uh area could be let's

131
00:05:17,160 --> 00:05:19,080
say uh in a GitHub action we are running

132
00:05:19,080 --> 00:05:21,720
self-hosted Runners and that selfish

133
00:05:21,720 --> 00:05:23,940
hosted Runners is running a vulnerable

134
00:05:23,940 --> 00:05:26,699
or malicious third-party action so

135
00:05:26,699 --> 00:05:29,340
what's going to happen is uh I was I was

136
00:05:29,340 --> 00:05:30,900
looking at one of the talks where the

137
00:05:30,900 --> 00:05:32,759
where the presenter explained that how

138
00:05:32,759 --> 00:05:35,060
the how the mining or the

139
00:05:35,060 --> 00:05:38,340
cryptocurrency solution runs from these

140
00:05:38,340 --> 00:05:39,900
kind of scenarios where they will be

141
00:05:39,900 --> 00:05:42,840
using yourself I mean the organizational

142
00:05:42,840 --> 00:05:44,699
self-hosted runner in order to run the

143
00:05:44,699 --> 00:05:46,860
malicious third party into the into the

144
00:05:46,860 --> 00:05:48,720
environment and I think that connects to

145
00:05:48,720 --> 00:05:50,520
uh the overall software supply chain

146
00:05:50,520 --> 00:05:51,960
security part

147
00:05:51,960 --> 00:05:54,180
another example of could be

148
00:05:54,180 --> 00:05:57,060
uh as we all know that in the

149
00:05:57,060 --> 00:05:59,460
organizational level we run on the SSO

150
00:05:59,460 --> 00:06:01,500
mode where the one user is presented

151
00:06:01,500 --> 00:06:04,080
across the different technology and if

152
00:06:04,080 --> 00:06:06,840
by any means the user is compromised

153
00:06:06,840 --> 00:06:08,460
compromised in one of the technology

154
00:06:08,460 --> 00:06:10,080
it's eventually going to impact the

155
00:06:10,080 --> 00:06:12,060
other Technologies as well

156
00:06:12,060 --> 00:06:15,180
and let's say uh over GitHub as an or as

157
00:06:15,180 --> 00:06:17,100
an Enterprise doesn't support uh it

158
00:06:17,100 --> 00:06:19,620
doesn't impose the MFA Challenge and

159
00:06:19,620 --> 00:06:21,720
then another scenario could be that uh

160
00:06:21,720 --> 00:06:23,580
we were able uh the attacker were able

161
00:06:23,580 --> 00:06:25,319
to compromise the GitHub accounts uh

162
00:06:25,319 --> 00:06:27,060
with the social engineering and if the

163
00:06:27,060 --> 00:06:28,680
GitHub account is compromised of the

164
00:06:28,680 --> 00:06:29,759
developer

165
00:06:29,759 --> 00:06:31,860
it can further uh propagate to other

166
00:06:31,860 --> 00:06:33,479
scenarios as well

167
00:06:33,479 --> 00:06:35,280
so this is the attack surface when it

168
00:06:35,280 --> 00:06:37,800
comes to the uh overall cicd ecosystem

169
00:06:37,800 --> 00:06:39,080
of the solution

170
00:06:39,080 --> 00:06:40,979
and um

171
00:06:40,979 --> 00:06:43,080
if we look at the methodology part I

172
00:06:43,080 --> 00:06:45,120
think there are three parts to it uh

173
00:06:45,120 --> 00:06:46,740
when we are building a methodology first

174
00:06:46,740 --> 00:06:47,639
is

175
00:06:47,639 --> 00:06:50,880
focusing on making the software uh

176
00:06:50,880 --> 00:06:53,400
secure and robust by default and what I

177
00:06:53,400 --> 00:06:55,800
mean by that is in any software there

178
00:06:55,800 --> 00:06:58,500
are two phases the one is of these uh

179
00:06:58,500 --> 00:07:00,419
the software provider and the other one

180
00:07:00,419 --> 00:07:03,240
is the software consumer as a software

181
00:07:03,240 --> 00:07:05,880
provider I think industry is doing a

182
00:07:05,880 --> 00:07:08,460
reasonably good job because of security

183
00:07:08,460 --> 00:07:11,699
and cic cicd again looping back

184
00:07:11,699 --> 00:07:13,979
but I think the everyone has a

185
00:07:13,979 --> 00:07:16,139
responsibility as a software consumer as

186
00:07:16,139 --> 00:07:17,639
well whenever we are consuming a

187
00:07:17,639 --> 00:07:20,400
software it's our kind of obligation to

188
00:07:20,400 --> 00:07:22,139
make sure that we are doing a basic

189
00:07:22,139 --> 00:07:24,479
security checks on that software it

190
00:07:24,479 --> 00:07:26,940
could be open source software uh let's

191
00:07:26,940 --> 00:07:28,919
say a very simple Library you are using

192
00:07:28,919 --> 00:07:30,840
for a very specific job in your software

193
00:07:30,840 --> 00:07:32,819
or it could be an Enterprise product

194
00:07:32,819 --> 00:07:35,220
which is getting used by all the

195
00:07:35,220 --> 00:07:38,160
employees in your organization and for

196
00:07:38,160 --> 00:07:39,960
that what could be done is that having a

197
00:07:39,960 --> 00:07:41,400
waiting process as simple as that

198
00:07:41,400 --> 00:07:43,500
waiting having a waiting process on an

199
00:07:43,500 --> 00:07:45,000
organizational level that whenever you

200
00:07:45,000 --> 00:07:47,580
are using a certain uh certain software

201
00:07:47,580 --> 00:07:50,699
component which is not developed by you

202
00:07:50,699 --> 00:07:52,919
are you are you making sure that you're

203
00:07:52,919 --> 00:07:55,280
looking it from the security perspective

204
00:07:55,280 --> 00:07:58,440
at the same time when we find something

205
00:07:58,440 --> 00:08:02,280
in in you know someone else's software

206
00:08:02,280 --> 00:08:03,660
are we making sure that we are

207
00:08:03,660 --> 00:08:06,240
considering it on a whole uh Community

208
00:08:06,240 --> 00:08:08,039
level you know working proactively with

209
00:08:08,039 --> 00:08:10,560
the provider to fix that part

210
00:08:10,560 --> 00:08:13,740
if we combine these two steps where we

211
00:08:13,740 --> 00:08:15,900
are working to making sure that we as a

212
00:08:15,900 --> 00:08:17,580
as a software provider we are doing our

213
00:08:17,580 --> 00:08:19,740
best job to provide the software but at

214
00:08:19,740 --> 00:08:21,539
the same time as a consumer we are take

215
00:08:21,539 --> 00:08:23,639
we are sharing the responsibility of

216
00:08:23,639 --> 00:08:26,400
making that software secure

217
00:08:26,400 --> 00:08:29,160
the second aspect or the second part of

218
00:08:29,160 --> 00:08:31,620
the methodology is how well we are

219
00:08:31,620 --> 00:08:33,659
implementing it into our environment and

220
00:08:33,659 --> 00:08:35,700
that will vary as per the organization

221
00:08:35,700 --> 00:08:38,099
because no software is secure with

222
00:08:38,099 --> 00:08:41,039
misconfiguration any software which is

223
00:08:41,039 --> 00:08:44,339
secure by default if you implement it in

224
00:08:44,339 --> 00:08:47,160
a in a in a insecure way it's eventually

225
00:08:47,160 --> 00:08:49,260
going to be insecure software

226
00:08:49,260 --> 00:08:51,480
it could be as small as default settings

227
00:08:51,480 --> 00:08:54,480
disabled MF enabled up-to-date plugins

228
00:08:54,480 --> 00:08:57,660
app sections any Enterprise level

229
00:08:57,660 --> 00:08:59,459
software as of today supports

230
00:08:59,459 --> 00:09:01,860
customization one way or other for

231
00:09:01,860 --> 00:09:04,140
example for Jenkins it is plugins for

232
00:09:04,140 --> 00:09:07,380
for uh for GitHub it is actions

233
00:09:07,380 --> 00:09:10,620
if you are using those third-party uh

234
00:09:10,620 --> 00:09:13,140
components within your organization then

235
00:09:13,140 --> 00:09:15,180
you have to make sure that the security

236
00:09:15,180 --> 00:09:16,860
of those components those custom

237
00:09:16,860 --> 00:09:19,860
components is also considered

238
00:09:19,860 --> 00:09:23,160
third part of it is the monitoring or

239
00:09:23,160 --> 00:09:25,880
the continuous monitoring part where

240
00:09:25,880 --> 00:09:28,320
first we are monitoring whether anything

241
00:09:28,320 --> 00:09:30,660
bad happen are we able to detect it

242
00:09:30,660 --> 00:09:33,720
second can we respond uh effectively if

243
00:09:33,720 --> 00:09:35,760
something bad happens so these are the

244
00:09:35,760 --> 00:09:36,720
three

245
00:09:36,720 --> 00:09:39,660
I'll say aspect when it when we need to

246
00:09:39,660 --> 00:09:41,220
look it when we are building a

247
00:09:41,220 --> 00:09:43,680
methodology for the ecicd securing of

248
00:09:43,680 --> 00:09:45,420
the cicd ecosystem in the organization

249
00:09:45,420 --> 00:09:47,399
first making sure

250
00:09:47,399 --> 00:09:49,440
we are taking a share responsibility to

251
00:09:49,440 --> 00:09:51,180
make uh to make the software secure

252
00:09:51,180 --> 00:09:52,860
second

253
00:09:52,860 --> 00:09:55,320
when we are using it we are using it

254
00:09:55,320 --> 00:09:58,440
with the uh I'll say etiquette security

255
00:09:58,440 --> 00:09:59,820
controls

256
00:09:59,820 --> 00:10:02,940
third is we are monitoring continuously

257
00:10:02,940 --> 00:10:05,100
and have the ability to respond to

258
00:10:05,100 --> 00:10:07,940
anything bad happens

259
00:10:10,560 --> 00:10:13,260
now uh this is where the open source

260
00:10:13,260 --> 00:10:15,120
software uh the open source project

261
00:10:15,120 --> 00:10:17,339
comes to the picture CI CD guard

262
00:10:17,339 --> 00:10:20,519
it does uh first

263
00:10:20,519 --> 00:10:23,339
it represents all the components into

264
00:10:23,339 --> 00:10:25,500
the graph forms and what I mean by that

265
00:10:25,500 --> 00:10:28,800
is that all the different components of

266
00:10:28,800 --> 00:10:30,360
the technology will be break down into

267
00:10:30,360 --> 00:10:33,120
the node level and the relationship the

268
00:10:33,120 --> 00:10:34,860
edges between the nodes will show the

269
00:10:34,860 --> 00:10:36,360
relationship how the different component

270
00:10:36,360 --> 00:10:37,980
is connected

271
00:10:37,980 --> 00:10:40,260
what it helps is it helps to get the

272
00:10:40,260 --> 00:10:42,839
visibility part correct for example it

273
00:10:42,839 --> 00:10:45,300
will just not show that you have a

274
00:10:45,300 --> 00:10:47,339
tangent server it will even break down

275
00:10:47,339 --> 00:10:49,800
to the level of the jobs

276
00:10:49,800 --> 00:10:51,540
it will say you have five jobs so

277
00:10:51,540 --> 00:10:53,760
basically you will have five nodes and

278
00:10:53,760 --> 00:10:56,220
then in which node those jobs are

279
00:10:56,220 --> 00:10:57,540
running so they you will have a

280
00:10:57,540 --> 00:10:59,940
relationship between the node of type

281
00:10:59,940 --> 00:11:01,019
job

282
00:11:01,019 --> 00:11:03,839
to the node of the type node

283
00:11:03,839 --> 00:11:06,000
so that's how the overall graph picture

284
00:11:06,000 --> 00:11:08,100
is built why I used graph because

285
00:11:08,100 --> 00:11:09,959
personally I think it it's more

286
00:11:09,959 --> 00:11:11,899
intuitive when building the relationship

287
00:11:11,899 --> 00:11:15,779
database relationship schema for the

288
00:11:15,779 --> 00:11:18,300
different Technologies and second thing

289
00:11:18,300 --> 00:11:20,459
is it it goes to the granular level of

290
00:11:20,459 --> 00:11:23,360
breaking down the technology

291
00:11:23,360 --> 00:11:25,560
second I think it does the security

292
00:11:25,560 --> 00:11:27,600
aspect obviously it tries to identify

293
00:11:27,600 --> 00:11:29,060
the misconfiguration into the different

294
00:11:29,060 --> 00:11:31,800
Technologies whatever it is finding at

295
00:11:31,800 --> 00:11:35,160
that moment and uh and provides the

296
00:11:35,160 --> 00:11:37,920
possible recommendation for that

297
00:11:37,920 --> 00:11:39,899
third thing which is uh most important

298
00:11:39,899 --> 00:11:42,779
in my uh opinion uh he tries to identify

299
00:11:42,779 --> 00:11:44,100
the relationship between the different

300
00:11:44,100 --> 00:11:45,839
components like I said the one of the

301
00:11:45,839 --> 00:11:48,540
challenges is finding the visibility and

302
00:11:48,540 --> 00:11:51,000
the relationship so it handles that part

303
00:11:51,000 --> 00:11:54,000
uh by building the relationship and that

304
00:11:54,000 --> 00:11:55,860
is the primary reason of using the graph

305
00:11:55,860 --> 00:11:57,480
Theory because graph theory is more

306
00:11:57,480 --> 00:11:59,040
intuitive for the relationship part for

307
00:11:59,040 --> 00:11:59,940
example

308
00:11:59,940 --> 00:12:02,040
if there is a certain change in a

309
00:12:02,040 --> 00:12:04,800
certain repository how eventually it is

310
00:12:04,800 --> 00:12:07,140
going to trigger the certain

311
00:12:07,140 --> 00:12:09,420
um certain build process in a different

312
00:12:09,420 --> 00:12:10,680
technology

313
00:12:10,680 --> 00:12:13,079
so from a from a uh from the

314
00:12:13,079 --> 00:12:14,640
visualization perspective how it's going

315
00:12:14,640 --> 00:12:17,040
to work out is that you have a node in

316
00:12:17,040 --> 00:12:19,320
of type repository and there is a change

317
00:12:19,320 --> 00:12:22,320
certain commit it eventually will go to

318
00:12:22,320 --> 00:12:25,019
the ascertain Jenkins job and that job

319
00:12:25,019 --> 00:12:26,880
will eventually create a certain binary

320
00:12:26,880 --> 00:12:29,040
in a different artifactory so all of

321
00:12:29,040 --> 00:12:31,019
that relationship is going to flow uh

322
00:12:31,019 --> 00:12:33,360
through the uh through the graph in in

323
00:12:33,360 --> 00:12:34,680
the solution

324
00:12:34,680 --> 00:12:37,740
and um another aspect could be

325
00:12:37,740 --> 00:12:39,779
like I touched upon for the GitHub

326
00:12:39,779 --> 00:12:41,459
action part for example in the

327
00:12:41,459 --> 00:12:43,320
organization as per the process we might

328
00:12:43,320 --> 00:12:45,720
say that whenever we are using a third

329
00:12:45,720 --> 00:12:48,300
party GitHub action we are going to have

330
00:12:48,300 --> 00:12:50,160
a security review of that and depending

331
00:12:50,160 --> 00:12:52,139
on the security review we are going to

332
00:12:52,139 --> 00:12:54,779
you know approve a certain version of

333
00:12:54,779 --> 00:12:56,700
the third party Library which we will

334
00:12:56,700 --> 00:12:58,620
say at that point of time that it is the

335
00:12:58,620 --> 00:13:01,019
most secure to be used in in a security

336
00:13:01,019 --> 00:13:03,240
professional opinion

337
00:13:03,240 --> 00:13:07,139
what it will help to identify is that in

338
00:13:07,139 --> 00:13:08,519
the organization in the overall

339
00:13:08,519 --> 00:13:10,200
organization what are the different

340
00:13:10,200 --> 00:13:12,300
version of any particular third party

341
00:13:12,300 --> 00:13:16,019
GitHub actions you are using and then we

342
00:13:16,019 --> 00:13:18,060
can map it to the back to the approved

343
00:13:18,060 --> 00:13:19,620
version and we can identify any

344
00:13:19,620 --> 00:13:21,899
deviation we might have so for example

345
00:13:21,899 --> 00:13:23,459
at any given point of time for the

346
00:13:23,459 --> 00:13:26,040
GitHub action a we are saying use the

347
00:13:26,040 --> 00:13:28,320
version one but in the organization we

348
00:13:28,320 --> 00:13:30,120
are identifying the deviation of version

349
00:13:30,120 --> 00:13:33,600
one two three then from the uh from

350
00:13:33,600 --> 00:13:35,579
these project from the solution we can

351
00:13:35,579 --> 00:13:37,139
identify okay these are the deviations

352
00:13:37,139 --> 00:13:40,760
let's action on them

353
00:13:41,820 --> 00:13:44,639
uh and uh do we have common users

354
00:13:44,639 --> 00:13:46,980
between the different Technologies uh so

355
00:13:46,980 --> 00:13:48,360
and so forth

356
00:13:48,360 --> 00:13:50,519
so first the visibility part converts

357
00:13:50,519 --> 00:13:52,079
everything into the graph

358
00:13:52,079 --> 00:13:54,120
with the node and the edge will

359
00:13:54,120 --> 00:13:55,620
represent the relationship

360
00:13:55,620 --> 00:13:58,380
then identifies the industry Security

361
00:13:58,380 --> 00:14:00,839
misconfiguration in the Technologies

362
00:14:00,839 --> 00:14:02,940
and on top of that it identifies the

363
00:14:02,940 --> 00:14:04,139
relationship between the different

364
00:14:04,139 --> 00:14:06,240
components

365
00:14:06,240 --> 00:14:10,019
uh this is the node database schema as

366
00:14:10,019 --> 00:14:12,060
you can see I have break it down to the

367
00:14:12,060 --> 00:14:14,820
into the granular level possible

368
00:14:14,820 --> 00:14:16,920
for for example for the for the GitHub

369
00:14:16,920 --> 00:14:19,019
action it would be workflow job step

370
00:14:19,019 --> 00:14:22,519
command error action so and so forth and

371
00:14:22,519 --> 00:14:25,680
interesting part this I identified after

372
00:14:25,680 --> 00:14:27,720
building the solution is that once you

373
00:14:27,720 --> 00:14:31,380
have a node of uh if you have a node

374
00:14:31,380 --> 00:14:32,519
with

375
00:14:32,519 --> 00:14:35,160
with a similar schema already then

376
00:14:35,160 --> 00:14:37,500
rather than creating a separate node it

377
00:14:37,500 --> 00:14:39,660
eventually back will make will make back

378
00:14:39,660 --> 00:14:41,880
a circular relationship to the to the

379
00:14:41,880 --> 00:14:44,100
node so what happens with that is that

380
00:14:44,100 --> 00:14:45,959
for example if you have five runners in

381
00:14:45,959 --> 00:14:47,339
your organization

382
00:14:47,339 --> 00:14:50,100
you can find the reverse relationship as

383
00:14:50,100 --> 00:14:52,920
well that how many jobs are running in

384
00:14:52,920 --> 00:14:55,260
my each of the runners so for example if

385
00:14:55,260 --> 00:14:57,959
at any point of time you feel that this

386
00:14:57,959 --> 00:14:59,339
particular Runner is having too much

387
00:14:59,339 --> 00:15:01,380
load then this tool can help you to

388
00:15:01,380 --> 00:15:05,300
identify that thing as well

389
00:15:06,180 --> 00:15:08,940
so this is what the uh overall

390
00:15:08,940 --> 00:15:11,899
architecture looks like

391
00:15:15,540 --> 00:15:19,199
um it has uh I'll say four parts

392
00:15:19,199 --> 00:15:21,480
first is the scan engine part

393
00:15:21,480 --> 00:15:24,720
which runs uh independently

394
00:15:24,720 --> 00:15:27,180
what is this scan engine is it's a

395
00:15:27,180 --> 00:15:30,180
collection of uh independent scripts in

396
00:15:30,180 --> 00:15:31,139
Python

397
00:15:31,139 --> 00:15:33,120
and each

398
00:15:33,120 --> 00:15:35,220
script is designed to perform the

399
00:15:35,220 --> 00:15:37,620
security scan on a particular technology

400
00:15:37,620 --> 00:15:39,959
at this point of time it supports four

401
00:15:39,959 --> 00:15:43,019
four technology and you can use it

402
00:15:43,019 --> 00:15:45,540
independently but at the same time you

403
00:15:45,540 --> 00:15:47,040
can use it in the collaboration with the

404
00:15:47,040 --> 00:15:48,779
relationship as well

405
00:15:48,779 --> 00:15:51,600
that is the scan engine part the next

406
00:15:51,600 --> 00:15:54,480
part is the analysis engine in which it

407
00:15:54,480 --> 00:15:56,279
tries to identify the relationship

408
00:15:56,279 --> 00:15:58,860
between the uh between the scanned

409
00:15:58,860 --> 00:16:00,899
technology

410
00:16:00,899 --> 00:16:02,519
how it's going to work is for example

411
00:16:02,519 --> 00:16:05,040
you might run the script of Jenkins and

412
00:16:05,040 --> 00:16:07,860
then you might run the script for GitHub

413
00:16:07,860 --> 00:16:10,199
if you run the scanning analysis engine

414
00:16:10,199 --> 00:16:12,300
on top of that it's going to scan all

415
00:16:12,300 --> 00:16:14,459
the nodes for those two for those two

416
00:16:14,459 --> 00:16:16,680
technology and try to identify the

417
00:16:16,680 --> 00:16:19,019
relationship the more technology you are

418
00:16:19,019 --> 00:16:22,440
going to scan the more comprehensive uh

419
00:16:22,440 --> 00:16:25,019
relationship analysis is going to be and

420
00:16:25,019 --> 00:16:26,940
you can just keep going on that process

421
00:16:26,940 --> 00:16:29,040
again and again

422
00:16:29,040 --> 00:16:31,680
from the output perspective uh to build

423
00:16:31,680 --> 00:16:34,320
the analysis all the database all the

424
00:16:34,320 --> 00:16:36,540
information gets feeded back to the

425
00:16:36,540 --> 00:16:40,560
neo4j neo4j is the database and uh you

426
00:16:40,560 --> 00:16:43,620
also have a Json format in which you in

427
00:16:43,620 --> 00:16:45,660
which case you want to let's say feed it

428
00:16:45,660 --> 00:16:47,820
back to the other technology for example

429
00:16:47,820 --> 00:16:50,100
elasticsearch and all in that case what

430
00:16:50,100 --> 00:16:51,600
you can do is you can simply run the

431
00:16:51,600 --> 00:16:54,120
script feed it back the Json output into

432
00:16:54,120 --> 00:16:57,180
into your choice of uh your choice of

433
00:16:57,180 --> 00:16:58,980
analysis engine you want

434
00:16:58,980 --> 00:17:03,600
it also have a a a very basic web UI in

435
00:17:03,600 --> 00:17:05,459
order to visualize all the data and and

436
00:17:05,459 --> 00:17:08,220
put some custom filtering on that

437
00:17:08,220 --> 00:17:10,319
and all of these can be accessed by the

438
00:17:10,319 --> 00:17:13,619
user at any different point of time

439
00:17:13,619 --> 00:17:17,520
in order to run the scan engine there

440
00:17:17,520 --> 00:17:19,559
are two ways you can provide the inputs

441
00:17:19,559 --> 00:17:21,839
the one is the Environmental variables

442
00:17:21,839 --> 00:17:23,520
you just set it there if you don't want

443
00:17:23,520 --> 00:17:25,319
to pass it into the command line because

444
00:17:25,319 --> 00:17:27,839
all of this information will be secrets

445
00:17:27,839 --> 00:17:29,760
and then other option is obviously the

446
00:17:29,760 --> 00:17:33,960
command line and from the um

447
00:17:33,960 --> 00:17:37,200
uh what kind of input it it needs is uh

448
00:17:37,200 --> 00:17:39,179
is the authentication detail to the

449
00:17:39,179 --> 00:17:41,039
respective technology you want to Target

450
00:17:41,039 --> 00:17:42,600
and obviously it will vary technology

451
00:17:42,600 --> 00:17:44,400
technology which kind of authentication

452
00:17:44,400 --> 00:17:46,919
information you will be providing for

453
00:17:46,919 --> 00:17:48,539
example in case of GitHub you need the

454
00:17:48,539 --> 00:17:50,880
personal access token and all that

455
00:17:50,880 --> 00:17:52,860
depending on the Privileges you are

456
00:17:52,860 --> 00:17:55,140
providing it will able to read more and

457
00:17:55,140 --> 00:17:57,780
more information internally since we

458
00:17:57,780 --> 00:17:59,400
will be accessing every the script will

459
00:17:59,400 --> 00:18:01,140
be accessing everything uh you will need

460
00:18:01,140 --> 00:18:03,600
to provide the admin access personal

461
00:18:03,600 --> 00:18:06,379
token in that

462
00:18:09,419 --> 00:18:13,340
any question before we go to the demo

463
00:18:15,480 --> 00:18:17,580
okay

464
00:18:17,580 --> 00:18:18,660
um

465
00:18:18,660 --> 00:18:21,780
I recorded demo for two uh for one very

466
00:18:21,780 --> 00:18:23,960
specific purposes because in this demo

467
00:18:23,960 --> 00:18:26,880
uh we have some information which I

468
00:18:26,880 --> 00:18:29,039
simply cannot show so I have redected it

469
00:18:29,039 --> 00:18:33,320
that's why I have recorded this demo

470
00:18:33,320 --> 00:18:37,140
so um as you can see uh there are four

471
00:18:37,140 --> 00:18:39,179
Technologies you know in a certain

472
00:18:39,179 --> 00:18:40,440
directory and you can run it

473
00:18:40,440 --> 00:18:42,960
independently uh for the for the demo

474
00:18:42,960 --> 00:18:45,000
purposes I'm I'm using the environmental

475
00:18:45,000 --> 00:18:46,799
variable in order to provide the

476
00:18:46,799 --> 00:18:49,380
authentication detail and no further

477
00:18:49,380 --> 00:18:51,660
information no further input is required

478
00:18:51,660 --> 00:18:53,640
for in case of action you can simply run

479
00:18:53,640 --> 00:18:55,880
it

480
00:18:55,980 --> 00:18:58,140
once it starts running it provides the

481
00:18:58,140 --> 00:19:00,840
basic uh information in the command line

482
00:19:00,840 --> 00:19:02,880
about the running and all so this you

483
00:19:02,880 --> 00:19:05,520
can run independent of the tool

484
00:19:05,520 --> 00:19:07,740
you can simply go to the GitHub do the

485
00:19:07,740 --> 00:19:10,020
Clone and start running it's as simple

486
00:19:10,020 --> 00:19:11,100
as that

487
00:19:11,100 --> 00:19:13,320
and every vulnerability every security

488
00:19:13,320 --> 00:19:15,539
misconfiguration identified by the tool

489
00:19:15,539 --> 00:19:17,460
will have a certain uh

490
00:19:17,460 --> 00:19:20,640
will have a certain uh identifier and

491
00:19:20,640 --> 00:19:22,260
depending on the technology as you can

492
00:19:22,260 --> 00:19:25,260
see all of the output is in the Json so

493
00:19:25,260 --> 00:19:28,559
that it is uh readable by you know other

494
00:19:28,559 --> 00:19:30,660
analysis tools as well

495
00:19:30,660 --> 00:19:33,179
this I ran for the uh for the GitHub

496
00:19:33,179 --> 00:19:34,620
action so this is what the fading part

497
00:19:34,620 --> 00:19:37,500
of the of the of the solution is where

498
00:19:37,500 --> 00:19:39,059
you are running independent scripts

499
00:19:39,059 --> 00:19:39,900
again

500
00:19:39,900 --> 00:19:42,480
now we are going to run the Jenkins

501
00:19:42,480 --> 00:19:44,340
same process you need to provide the

502
00:19:44,340 --> 00:19:45,960
authentication detail it will build the

503
00:19:45,960 --> 00:19:47,640
connection will try to fetch the

504
00:19:47,640 --> 00:19:49,080
information

505
00:19:49,080 --> 00:19:51,480
uh it takes time sometime depending on

506
00:19:51,480 --> 00:19:54,980
the network access and all

507
00:19:59,460 --> 00:20:02,340
so as you can see for example jnk 003

508
00:20:02,340 --> 00:20:03,600
it's a

509
00:20:03,600 --> 00:20:05,400
it's the identifier for the

510
00:20:05,400 --> 00:20:07,020
vulnerability it identified at that

511
00:20:07,020 --> 00:20:09,059
point of time for that

512
00:20:09,059 --> 00:20:12,059
so all the information are displayed in

513
00:20:12,059 --> 00:20:14,280
a square bracket is the redirected one

514
00:20:14,280 --> 00:20:16,080
when you will be providing this

515
00:20:16,080 --> 00:20:17,880
information in the actual life it will

516
00:20:17,880 --> 00:20:21,559
be displayed uh in that way

517
00:20:24,179 --> 00:20:26,940
so as I told it it goes to the level of

518
00:20:26,940 --> 00:20:29,039
job and then in the job it identifies

519
00:20:29,039 --> 00:20:30,240
the node

520
00:20:30,240 --> 00:20:32,880
it also identifies the plugins what what

521
00:20:32,880 --> 00:20:34,440
is the version of the plugins you are

522
00:20:34,440 --> 00:20:36,419
using how those plugins are connected to

523
00:20:36,419 --> 00:20:40,080
the other uh Jenkins other technology it

524
00:20:40,080 --> 00:20:42,179
identifies the users it identifies the

525
00:20:42,179 --> 00:20:45,799
groups so and so forth

526
00:21:05,880 --> 00:21:07,980
I did not want to fast forward it

527
00:21:07,980 --> 00:21:09,679
intentionally because

528
00:21:09,679 --> 00:21:12,419
I wanted to give the actual feel of how

529
00:21:12,419 --> 00:21:14,039
the script is going to run out when in

530
00:21:14,039 --> 00:21:16,200
the actual life again all the output is

531
00:21:16,200 --> 00:21:19,500
in in Json format in the command line

532
00:21:19,500 --> 00:21:23,640
and then you can change it as per the as

533
00:21:23,640 --> 00:21:26,179
per your need

534
00:21:33,600 --> 00:21:36,960
so this is what the UI part looks like

535
00:21:36,960 --> 00:21:39,299
uh you know like I said it's a very

536
00:21:39,299 --> 00:21:41,880
lightweight uh web UI at this point of

537
00:21:41,880 --> 00:21:44,760
time we have different node colors in

538
00:21:44,760 --> 00:21:46,799
order to identify for the different uh

539
00:21:46,799 --> 00:21:49,500
technology and as you can see there are

540
00:21:49,500 --> 00:21:51,960
uh relationship there are uh there are

541
00:21:51,960 --> 00:21:53,940
edges between the different Technologies

542
00:21:53,940 --> 00:21:55,799
as well if you

543
00:21:55,799 --> 00:21:58,860
so because I have in my demo I have

544
00:21:58,860 --> 00:22:02,059
scanned almost uh four uh all four

545
00:22:02,059 --> 00:22:04,200
Technologies supported by the scripts

546
00:22:04,200 --> 00:22:05,460
and because of that there are a lot of

547
00:22:05,460 --> 00:22:07,380
data processed by that

548
00:22:07,380 --> 00:22:10,020
that's the reason I have a filter

549
00:22:10,020 --> 00:22:12,000
where you can simply select the plugins

550
00:22:12,000 --> 00:22:15,000
part and uh in the in the UI it will

551
00:22:15,000 --> 00:22:16,919
display the details about the UI the red

552
00:22:16,919 --> 00:22:18,840
represents that the security

553
00:22:18,840 --> 00:22:20,760
vulnerabilities has been identified for

554
00:22:20,760 --> 00:22:23,460
that particular node

555
00:22:23,460 --> 00:22:26,580
uh the relationship of the filter is or

556
00:22:26,580 --> 00:22:29,460
so basically it will say that select the

557
00:22:29,460 --> 00:22:33,240
node with the type Plugin or type build

558
00:22:33,240 --> 00:22:36,440
you can add and remove

559
00:22:41,340 --> 00:22:45,299
one important part I wanted to make a

560
00:22:45,299 --> 00:22:48,299
visibility Point here is that

561
00:22:48,299 --> 00:22:51,840
so this uh this light bluish color is

562
00:22:51,840 --> 00:22:55,320
the Jenkins build node and it is getting

563
00:22:55,320 --> 00:22:58,260
connected to the uh repository within

564
00:22:58,260 --> 00:23:00,000
the GitHub environment as you can see

565
00:23:00,000 --> 00:23:04,260
this node is the type repository and

566
00:23:04,260 --> 00:23:07,440
this node is of type build what it's it

567
00:23:07,440 --> 00:23:11,340
amplifies it implies that is

568
00:23:11,340 --> 00:23:13,860
this particular build is getting

569
00:23:13,860 --> 00:23:16,020
triggered by this uh particular

570
00:23:16,020 --> 00:23:18,659
repository and if there is any change in

571
00:23:18,659 --> 00:23:20,460
the repository it eventually is going to

572
00:23:20,460 --> 00:23:23,460
impact that build so this is what I I

573
00:23:23,460 --> 00:23:25,020
meant when I said the relationship

574
00:23:25,020 --> 00:23:27,179
between the different Technologies and

575
00:23:27,179 --> 00:23:28,919
it it identified

576
00:23:28,919 --> 00:23:31,919
two different variations of that when I

577
00:23:31,919 --> 00:23:34,080
ran the scan in the in the demo

578
00:23:34,080 --> 00:23:36,179
environment so this is the GitHub

579
00:23:36,179 --> 00:23:38,760
repositories and this is what the genkis

580
00:23:38,760 --> 00:23:41,159
build is built so if we are able to work

581
00:23:41,159 --> 00:23:44,400
on the uh so as as part of the next step

582
00:23:44,400 --> 00:23:47,400
I am working on building a overall path

583
00:23:47,400 --> 00:23:49,320
at this point of time it's a one-to-one

584
00:23:49,320 --> 00:23:50,880
relationship between the repositories

585
00:23:50,880 --> 00:23:54,360
and the build for example but uh from a

586
00:23:54,360 --> 00:23:56,100
visualization perspective if you make

587
00:23:56,100 --> 00:23:57,659
the filter correctly what we can do is

588
00:23:57,659 --> 00:23:59,820
we can make a connection back to the

589
00:23:59,820 --> 00:24:04,740
let's say uh user 8 made this commit on

590
00:24:04,740 --> 00:24:08,400
repository B and repository B eventually

591
00:24:08,400 --> 00:24:12,360
triggered the uh build C and that build

592
00:24:12,360 --> 00:24:14,280
C like I said goes back to the

593
00:24:14,280 --> 00:24:17,400
artifactory artifact a

594
00:24:17,400 --> 00:24:19,140
so that's how we can build the

595
00:24:19,140 --> 00:24:20,760
relationship at this point of time from

596
00:24:20,760 --> 00:24:22,980
a filtering perspective it just uh

597
00:24:22,980 --> 00:24:26,960
displays the uh one particular path

598
00:24:39,600 --> 00:24:41,460
so um

599
00:24:41,460 --> 00:24:44,880
going forward uh obviously the first

600
00:24:44,880 --> 00:24:46,500
part is the expansion on the

601
00:24:46,500 --> 00:24:48,960
Technologies more uh like I said The

602
00:24:48,960 --> 00:24:50,820
more technology solution will cover the

603
00:24:50,820 --> 00:24:52,440
better relationship it will be able to

604
00:24:52,440 --> 00:24:53,460
build

605
00:24:53,460 --> 00:24:55,740
uh these are the few I have in pipeline

606
00:24:55,740 --> 00:24:57,600
if you have any feedback feel free to

607
00:24:57,600 --> 00:25:00,059
open a open issue or the pull request

608
00:25:00,059 --> 00:25:02,159
into the into the repository and then we

609
00:25:02,159 --> 00:25:04,260
can take it from there

610
00:25:04,260 --> 00:25:05,039
um

611
00:25:05,039 --> 00:25:08,039
I think but uh but my personal uh focus

612
00:25:08,039 --> 00:25:09,600
is on the analysis part the more

613
00:25:09,600 --> 00:25:11,460
technology we build the more type of

614
00:25:11,460 --> 00:25:13,440
nodes we will have and what I mean by

615
00:25:13,440 --> 00:25:15,240
that is that more analysis we have to

616
00:25:15,240 --> 00:25:16,020
build

617
00:25:16,020 --> 00:25:17,940
the primary reason of making this

618
00:25:17,940 --> 00:25:19,679
project was to build on the analysis

619
00:25:19,679 --> 00:25:21,659
engine more which means that parsing of

620
00:25:21,659 --> 00:25:24,360
the of the different components more and

621
00:25:24,360 --> 00:25:26,340
try to identify the relationship between

622
00:25:26,340 --> 00:25:30,000
them as well for example uh it could be

623
00:25:30,000 --> 00:25:32,279
um if we consider any software based

624
00:25:32,279 --> 00:25:33,779
organization let's go with the micro

625
00:25:33,779 --> 00:25:35,580
service architecture where

626
00:25:35,580 --> 00:25:37,740
multiple repositories are are

627
00:25:37,740 --> 00:25:40,140
responsible for building one service can

628
00:25:40,140 --> 00:25:42,900
we find that relationship that service s

629
00:25:42,900 --> 00:25:45,600
is built by uh five different

630
00:25:45,600 --> 00:25:46,980
repositories

631
00:25:46,980 --> 00:25:49,020
so if we are able to build that kind of

632
00:25:49,020 --> 00:25:51,299
relationship uh we will eventually be

633
00:25:51,299 --> 00:25:54,200
able to connect that which users change

634
00:25:54,200 --> 00:25:56,520
triggered which are change in the

635
00:25:56,520 --> 00:25:58,320
service in the microservice architecture

636
00:25:58,320 --> 00:26:02,159
can we build a relation uh on the on the

637
00:26:02,159 --> 00:26:03,360
contributing to a particular

638
00:26:03,360 --> 00:26:05,700
microservice and all and second part is

639
00:26:05,700 --> 00:26:07,860
obviously the next part is the is the

640
00:26:07,860 --> 00:26:10,799
build the intuitive visualization which

641
00:26:10,799 --> 00:26:12,659
include making the search engine more

642
00:26:12,659 --> 00:26:15,000
effective for example uh all the

643
00:26:15,000 --> 00:26:16,740
metadata can we make a search engine on

644
00:26:16,740 --> 00:26:18,779
the basis of the all metadata

645
00:26:18,779 --> 00:26:21,360
so uh these are the parts on the on the

646
00:26:21,360 --> 00:26:23,520
going forward way

647
00:26:23,520 --> 00:26:26,700
uh like I said uh first of all thank you

648
00:26:26,700 --> 00:26:29,580
for being here and if you want to know

649
00:26:29,580 --> 00:26:31,140
more about the net scope and the product

650
00:26:31,140 --> 00:26:34,700
in general please feel free to reach out

651
00:26:34,860 --> 00:26:37,039
foreign

652
00:26:42,040 --> 00:26:45,200
[Music]

653
00:26:45,600 --> 00:26:48,299
any questions

654
00:26:48,299 --> 00:26:50,539
yeah

655
00:26:56,520 --> 00:26:58,860
hey thanks for the for the talk

656
00:26:58,860 --> 00:27:01,260
um so you said the project is open

657
00:27:01,260 --> 00:27:03,179
source but the repository is actually

658
00:27:03,179 --> 00:27:05,700
empty right now yeah yeah I I'm going to

659
00:27:05,700 --> 00:27:07,799
put the code after that okay cool

660
00:27:07,799 --> 00:27:10,500
um and so my my question is uh like how

661
00:27:10,500 --> 00:27:13,500
many or how different or what kind of uh

662
00:27:13,500 --> 00:27:14,940
detections do you have there because

663
00:27:14,940 --> 00:27:18,000
like that's probably the main uh main

664
00:27:18,000 --> 00:27:20,220
point of the tool right uh what do you

665
00:27:20,220 --> 00:27:22,799
mean the Technologies uh no like what

666
00:27:22,799 --> 00:27:25,320
kind of Moon rabbit is the detector oh

667
00:27:25,320 --> 00:27:29,640
okay uh so um in terms of uh uh so in

668
00:27:29,640 --> 00:27:31,320
terms of category of vulnerability like

669
00:27:31,320 --> 00:27:32,460
there are different components the first

670
00:27:32,460 --> 00:27:33,840
time trying to identify whether there

671
00:27:33,840 --> 00:27:36,179
are any basic insecure configuration for

672
00:27:36,179 --> 00:27:38,279
example default credentials https

673
00:27:38,279 --> 00:27:40,980
enabled or not uh what kind of users are

674
00:27:40,980 --> 00:27:42,720
there in the system and it will vary

675
00:27:42,720 --> 00:27:44,700
from Technologies to technology as well

676
00:27:44,700 --> 00:27:47,159
for example in case of GitHub action one

677
00:27:47,159 --> 00:27:49,679
of the finding is uh what are you using

678
00:27:49,679 --> 00:27:51,900
any uh well-known vulnerable version of

679
00:27:51,900 --> 00:27:53,940
the third party software in case of

680
00:27:53,940 --> 00:27:55,980
Jenkins for example it could be like are

681
00:27:55,980 --> 00:27:57,960
you using vulnerable version of plugins

682
00:27:57,960 --> 00:28:00,779
or outdated version of plugins in case

683
00:28:00,779 --> 00:28:02,700
of GitHub it will be for example do you

684
00:28:02,700 --> 00:28:05,820
have MF enabled or not so because

685
00:28:05,820 --> 00:28:08,820
um and uh so that is the library of the

686
00:28:08,820 --> 00:28:10,740
vulnerabilities I have in in terms of

687
00:28:10,740 --> 00:28:13,500
each Technologies and uh with the with

688
00:28:13,500 --> 00:28:14,760
the um

689
00:28:14,760 --> 00:28:17,400
with my tool I am going to also publish

690
00:28:17,400 --> 00:28:19,860
uh you know kind of knowledge base that

691
00:28:19,860 --> 00:28:21,120
which kind of vulnerability I am

692
00:28:21,120 --> 00:28:23,760
detecting a tool irrespective whether it

693
00:28:23,760 --> 00:28:26,400
got detected or not make sense

694
00:28:26,400 --> 00:28:29,240
okay thanks

695
00:28:32,460 --> 00:28:35,360
any other question

696
00:28:37,760 --> 00:28:41,900
was I that good or that bad

697
00:28:43,020 --> 00:28:46,679
you're that good okay good but I have a

698
00:28:46,679 --> 00:28:49,140
question uh what I really didn't get is

699
00:28:49,140 --> 00:28:52,020
where'd you get the information are you

700
00:28:52,020 --> 00:28:53,940
looking at config files that are local

701
00:28:53,940 --> 00:28:57,840
or are you a super user who has X access

702
00:28:57,840 --> 00:29:02,880
to all these tools uh this solution is

703
00:29:02,880 --> 00:29:04,919
super user who has access to all the

704
00:29:04,919 --> 00:29:07,620
information so basically it's a API call

705
00:29:07,620 --> 00:29:10,260
to the Target Technologies so before

706
00:29:10,260 --> 00:29:12,299
that we had individual components

707
00:29:12,299 --> 00:29:16,140
talking to each other like in a limited

708
00:29:16,140 --> 00:29:17,640
environment and now we're getting a

709
00:29:17,640 --> 00:29:20,120
super user who has access to everything

710
00:29:20,120 --> 00:29:25,140
ah no uh so um in the architecture I had

711
00:29:25,140 --> 00:29:27,240
the breakdown into let's say broadly two

712
00:29:27,240 --> 00:29:29,220
part the one is the scan engine part the

713
00:29:29,220 --> 00:29:31,500
second part is the analysis

714
00:29:31,500 --> 00:29:33,720
engine is again can be used

715
00:29:33,720 --> 00:29:35,520
independently so how it's going to work

716
00:29:35,520 --> 00:29:38,640
out in in Practical life is that you

717
00:29:38,640 --> 00:29:41,640
identify which technology you are using

718
00:29:41,640 --> 00:29:44,520
in your environment from the supported

719
00:29:44,520 --> 00:29:46,679
technology in the solution for example

720
00:29:46,679 --> 00:29:49,260
you might say I'm I'm using GitHub and

721
00:29:49,260 --> 00:29:51,419
I'm using Jenkins I'm not using let's

722
00:29:51,419 --> 00:29:53,760
say jfrog at all so you are going to

723
00:29:53,760 --> 00:29:55,860
configure those two scanners

724
00:29:55,860 --> 00:29:58,620
with the super user access for both

725
00:29:58,620 --> 00:30:01,020
and then what it is going to do is it

726
00:30:01,020 --> 00:30:02,820
going to scan the independent technology

727
00:30:02,820 --> 00:30:04,940
it's going to fetch all the information

728
00:30:04,940 --> 00:30:07,860
and then the analysis engine is going to

729
00:30:07,860 --> 00:30:10,620
make the relationship from the database

730
00:30:10,620 --> 00:30:13,980
from the local database of the solution

731
00:30:13,980 --> 00:30:16,580
makes sense

732
00:30:22,799 --> 00:30:25,580
other questions

733
00:30:30,059 --> 00:30:33,980
okay oh perfect

734
00:30:40,200 --> 00:30:42,840
thank you for the talk first

735
00:30:42,840 --> 00:30:45,720
um is it possible to push those data

736
00:30:45,720 --> 00:30:51,299
into rdf database and not just graph

737
00:30:51,299 --> 00:30:53,279
um I'm sorry I I do not get it possible

738
00:30:53,279 --> 00:30:56,399
to put it into ontologies and not just

739
00:30:56,399 --> 00:31:00,059
uh neo4g graph database

740
00:31:00,059 --> 00:31:03,179
um in terms of database it's going to

741
00:31:03,179 --> 00:31:04,799
put in neo4j

742
00:31:04,799 --> 00:31:08,460
what uh what customization you can do is

743
00:31:08,460 --> 00:31:11,039
since in the command line I have all the

744
00:31:11,039 --> 00:31:14,820
output in the Json you can redirect that

745
00:31:14,820 --> 00:31:17,100
Json output into your choice of

746
00:31:17,100 --> 00:31:19,620
Technology but

747
00:31:19,620 --> 00:31:21,539
on the Fly it's not going to it's it

748
00:31:21,539 --> 00:31:23,159
doesn't support anything else at this

749
00:31:23,159 --> 00:31:24,240
moment

750
00:31:24,240 --> 00:31:26,840
thank you

751
00:31:29,460 --> 00:31:32,120
other questions

752
00:31:34,679 --> 00:31:36,960
okay so thank you again for the talk

753
00:31:36,960 --> 00:31:39,059
thank you thank you everyone have a nice

754
00:31:39,059 --> 00:31:39,760
day

755
00:31:39,760 --> 00:31:43,049
[Applause]

