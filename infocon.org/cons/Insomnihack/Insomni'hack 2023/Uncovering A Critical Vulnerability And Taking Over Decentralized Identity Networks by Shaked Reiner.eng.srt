1
00:00:04,019 --> 00:00:07,020
um good afternoon and Welcome to our

2
00:00:07,020 --> 00:00:09,960
seeing your way to the blockchain as we

3
00:00:09,960 --> 00:00:12,120
will soon learn uh this is what a

4
00:00:12,120 --> 00:00:14,880
decentralized identifier looks like and

5
00:00:14,880 --> 00:00:18,060
this is here as the obligatory Omi slide

6
00:00:18,060 --> 00:00:19,920
um my name is jacket Raynor I'm a

7
00:00:19,920 --> 00:00:22,020
principal security researcher at Cyber

8
00:00:22,020 --> 00:00:24,240
Arc Labs where recently I've been doing

9
00:00:24,240 --> 00:00:26,220
a lot of blockchain and decentralized

10
00:00:26,220 --> 00:00:29,519
Technology research but not exclusively

11
00:00:29,519 --> 00:00:31,619
here are some of my interests in case

12
00:00:31,619 --> 00:00:33,360
you want to start a conversation after

13
00:00:33,360 --> 00:00:35,100
this session I highly highly encourage

14
00:00:35,100 --> 00:00:36,719
you to do so

15
00:00:36,719 --> 00:00:38,880
let me start by asking you two questions

16
00:00:38,880 --> 00:00:40,980
and then I will tell you a couple of

17
00:00:40,980 --> 00:00:42,480
short stories

18
00:00:42,480 --> 00:00:44,760
the first question is who owns your

19
00:00:44,760 --> 00:00:46,379
identity

20
00:00:46,379 --> 00:00:48,420
now you may be thinking what do you mean

21
00:00:48,420 --> 00:00:51,360
eye on my identity but it might not be

22
00:00:51,360 --> 00:00:53,940
as straightforward as that

23
00:00:53,940 --> 00:00:56,480
the second question is by show of hands

24
00:00:56,480 --> 00:00:59,280
do you use any service by the following

25
00:00:59,280 --> 00:01:00,539
companies

26
00:01:00,539 --> 00:01:04,379
yeah almost everyone not surprisingly

27
00:01:04,379 --> 00:01:06,060
um now now I'm not saying that the two

28
00:01:06,060 --> 00:01:07,740
questions are necessarily related

29
00:01:07,740 --> 00:01:09,900
however some of you may already see

30
00:01:09,900 --> 00:01:11,760
where I'm going with that

31
00:01:11,760 --> 00:01:14,280
now for the two stories the first one is

32
00:01:14,280 --> 00:01:16,920
about an Australian artist she had been

33
00:01:16,920 --> 00:01:19,619
documenting her life's work on Instagram

34
00:01:19,619 --> 00:01:21,360
um under the metaverse handle on the

35
00:01:21,360 --> 00:01:22,259
platform

36
00:01:22,259 --> 00:01:24,659
and as you know not too long ago

37
00:01:24,659 --> 00:01:26,759
Facebook changed their company name to

38
00:01:26,759 --> 00:01:28,500
meta and they also launched the

39
00:01:28,500 --> 00:01:30,479
metaverse product and they really wanted

40
00:01:30,479 --> 00:01:32,939
the metaverse handle so what happened

41
00:01:32,939 --> 00:01:34,979
they just took it from her and of course

42
00:01:34,979 --> 00:01:37,439
he had no say about that

43
00:01:37,439 --> 00:01:39,960
and the second story is about a father

44
00:01:39,960 --> 00:01:42,240
from the U.S he took a few naked

45
00:01:42,240 --> 00:01:45,240
pictures of his child for the doctor of

46
00:01:45,240 --> 00:01:47,100
course he was using Google Images at the

47
00:01:47,100 --> 00:01:49,979
time and Google flagged his account as a

48
00:01:49,979 --> 00:01:51,420
criminal account or something along

49
00:01:51,420 --> 00:01:53,040
those lines

50
00:01:53,040 --> 00:01:55,500
um and he got completely locked out of

51
00:01:55,500 --> 00:01:57,659
all of his accounts and those of you who

52
00:01:57,659 --> 00:02:00,240
use Google you know just how devastating

53
00:02:00,240 --> 00:02:02,640
this thing might be

54
00:02:02,640 --> 00:02:04,799
so now let me ask you again who really

55
00:02:04,799 --> 00:02:06,960
owns your identity

56
00:02:06,960 --> 00:02:09,479
now let's keep thinking about that while

57
00:02:09,479 --> 00:02:11,459
I covered the agenda for today

58
00:02:11,459 --> 00:02:12,780
first we're going to have an

59
00:02:12,780 --> 00:02:15,000
introduction for decentralized identity

60
00:02:15,000 --> 00:02:16,920
and try to understand what it really

61
00:02:16,920 --> 00:02:19,319
means after that we will take a look at

62
00:02:19,319 --> 00:02:21,720
a couple of decentralized identity

63
00:02:21,720 --> 00:02:23,900
implementations and see how they work

64
00:02:23,900 --> 00:02:26,879
then we will try and break one of those

65
00:02:26,879 --> 00:02:29,400
implementations and finally we will wrap

66
00:02:29,400 --> 00:02:31,800
things up with a summary and we'll speak

67
00:02:31,800 --> 00:02:33,420
a little bit about the future of this

68
00:02:33,420 --> 00:02:34,440
technology

69
00:02:34,440 --> 00:02:36,360
and let's get going with the

70
00:02:36,360 --> 00:02:37,440
introduction

71
00:02:37,440 --> 00:02:39,959
so in order to understand decentralized

72
00:02:39,959 --> 00:02:42,120
identity we need to First Define what

73
00:02:42,120 --> 00:02:44,099
our identity is

74
00:02:44,099 --> 00:02:46,620
and it can be a bit tricky

75
00:02:46,620 --> 00:02:49,500
um in the real world for instance our

76
00:02:49,500 --> 00:02:51,720
identity is comprised by a few things

77
00:02:51,720 --> 00:02:55,140
like our finger prints for instance and

78
00:02:55,140 --> 00:02:56,879
a bunch of papers that we hold like a

79
00:02:56,879 --> 00:03:00,360
passport and so on but it can be even

80
00:03:00,360 --> 00:03:03,000
trickier to Define our identity in the

81
00:03:03,000 --> 00:03:05,640
digital space or in cyberspace or online

82
00:03:05,640 --> 00:03:07,860
however you want to refer to it

83
00:03:07,860 --> 00:03:10,019
we can look at identity as if it's

84
00:03:10,019 --> 00:03:13,260
comprised out of two layers online the

85
00:03:13,260 --> 00:03:15,780
first is the identifiers layer this is

86
00:03:15,780 --> 00:03:17,280
pretty much anything that points other

87
00:03:17,280 --> 00:03:19,440
people to us so for example a Twitter

88
00:03:19,440 --> 00:03:21,599
handle or an email address

89
00:03:21,599 --> 00:03:23,280
on top of that we have the actual

90
00:03:23,280 --> 00:03:25,800
identity data and this is pretty much

91
00:03:25,800 --> 00:03:27,840
anything that is part of who we are

92
00:03:27,840 --> 00:03:31,140
online it can be photos that we upload

93
00:03:31,140 --> 00:03:32,900
um messages we send to our friends

94
00:03:32,900 --> 00:03:36,599
tweets we post and so on and so forth

95
00:03:36,599 --> 00:03:41,040
and today most of those identifiers and

96
00:03:41,040 --> 00:03:44,340
the data if not all those are controlled

97
00:03:44,340 --> 00:03:45,959
by the companies that we mentioned

98
00:03:45,959 --> 00:03:46,920
before

99
00:03:46,920 --> 00:03:49,200
and by no means I'm saying that those

100
00:03:49,200 --> 00:03:51,480
companies are evil in any sense however

101
00:03:51,480 --> 00:03:53,220
we do know that they have a completely

102
00:03:53,220 --> 00:03:55,140
different set of incentives and

103
00:03:55,140 --> 00:03:58,140
interests than the one we have and we

104
00:03:58,140 --> 00:04:00,659
saw that it can be problematic and this

105
00:04:00,659 --> 00:04:02,640
is exactly where decentralized identity

106
00:04:02,640 --> 00:04:05,099
comes in and the idea is to take our

107
00:04:05,099 --> 00:04:08,220
identities back in our own hands and we

108
00:04:08,220 --> 00:04:10,319
can do that by storing them in some sort

109
00:04:10,319 --> 00:04:12,420
of a decentralized and distributed and

110
00:04:12,420 --> 00:04:15,299
secure location and today the best thing

111
00:04:15,299 --> 00:04:16,978
we know for it is of course the

112
00:04:16,978 --> 00:04:18,660
blockchain

113
00:04:18,660 --> 00:04:20,220
now in order to understand the

114
00:04:20,220 --> 00:04:22,260
difference between between centralized

115
00:04:22,260 --> 00:04:24,360
identity and decentralized identity we

116
00:04:24,360 --> 00:04:25,800
can look at a similar difference between

117
00:04:25,800 --> 00:04:28,560
our traditional monetary systems and

118
00:04:28,560 --> 00:04:30,000
cryptocurrency

119
00:04:30,000 --> 00:04:32,340
where in the traditional sense let's say

120
00:04:32,340 --> 00:04:34,560
we have a bank we know that it is a

121
00:04:34,560 --> 00:04:37,080
centralized entity controlled by one

122
00:04:37,080 --> 00:04:40,320
entity we know that they are the only

123
00:04:40,320 --> 00:04:42,540
ones who hold let's call it the database

124
00:04:42,540 --> 00:04:45,300
of the balances of everybody's accounts

125
00:04:45,300 --> 00:04:48,300
and we don't have a physical or

126
00:04:48,300 --> 00:04:51,060
technical access to our assets even

127
00:04:51,060 --> 00:04:53,880
though we own some money in it

128
00:04:53,880 --> 00:04:56,460
and with cryptocurrency of course we

129
00:04:56,460 --> 00:04:58,979
know that it is decentralized and the

130
00:04:58,979 --> 00:05:02,460
database of balances or The Ledger is

131
00:05:02,460 --> 00:05:04,440
distributed across many different nodes

132
00:05:04,440 --> 00:05:08,160
in a network and we know that we are uh

133
00:05:08,160 --> 00:05:10,680
in control of that money

134
00:05:10,680 --> 00:05:12,720
um using of course our private key that

135
00:05:12,720 --> 00:05:15,840
we keep safe and keep secure and this is

136
00:05:15,840 --> 00:05:18,120
the only way technically to transfer

137
00:05:18,120 --> 00:05:20,699
money out of our accounts and this is

138
00:05:20,699 --> 00:05:23,100
the main difference between the two

139
00:05:23,100 --> 00:05:26,100
now in an identity context it would look

140
00:05:26,100 --> 00:05:27,840
something like this where we will still

141
00:05:27,840 --> 00:05:29,880
have a wallet of course and this wallet

142
00:05:29,880 --> 00:05:31,800
will contain our private keys that are

143
00:05:31,800 --> 00:05:34,160
associated with our identity

144
00:05:34,160 --> 00:05:37,080
but instead of monetary transactions we

145
00:05:37,080 --> 00:05:39,720
can have identity operations so things

146
00:05:39,720 --> 00:05:41,820
like creating an identity updating it

147
00:05:41,820 --> 00:05:43,800
revoking it and so on

148
00:05:43,800 --> 00:05:46,800
and both those operations as well as the

149
00:05:46,800 --> 00:05:48,660
public keys that are associated with our

150
00:05:48,660 --> 00:05:51,060
identities will be stored in some sort

151
00:05:51,060 --> 00:05:54,660
of a distributed Ledger or a blockchain

152
00:05:54,660 --> 00:05:56,820
and the simple use case will be as

153
00:05:56,820 --> 00:05:59,039
follows first we can create an identity

154
00:05:59,039 --> 00:06:00,960
by just generating a pair of

155
00:06:00,960 --> 00:06:04,020
cryptographic keys then we publish those

156
00:06:04,020 --> 00:06:05,639
keys to the blockchain publish the

157
00:06:05,639 --> 00:06:07,440
public key of course and we keep the

158
00:06:07,440 --> 00:06:09,300
private key safe

159
00:06:09,300 --> 00:06:11,759
um then we can use those keys we can

160
00:06:11,759 --> 00:06:14,220
either sign or encrypt information using

161
00:06:14,220 --> 00:06:16,860
our private key so that later others in

162
00:06:16,860 --> 00:06:19,380
the network can ver verify and validate

163
00:06:19,380 --> 00:06:21,900
the information indeed originated from

164
00:06:21,900 --> 00:06:23,100
us

165
00:06:23,100 --> 00:06:25,919
now decentralized identifiers are now

166
00:06:25,919 --> 00:06:29,419
already standard by w3c alongside

167
00:06:29,419 --> 00:06:32,280
verifiable credentials and they look

168
00:06:32,280 --> 00:06:35,039
something like this where first up top

169
00:06:35,039 --> 00:06:37,020
you can see here we have the identifier

170
00:06:37,020 --> 00:06:39,060
itself it's comprised out of the ID

171
00:06:39,060 --> 00:06:41,360
which stands for decentralized identity

172
00:06:41,360 --> 00:06:44,400
then we have the example here stands for

173
00:06:44,400 --> 00:06:47,100
the did method or we can refer to it as

174
00:06:47,100 --> 00:06:50,400
the did implementation or protocol and

175
00:06:50,400 --> 00:06:52,620
after that we have the actual identifier

176
00:06:52,620 --> 00:06:55,680
the unique identifier of our identity

177
00:06:55,680 --> 00:06:57,960
we can treat it as if it's a

178
00:06:57,960 --> 00:06:59,819
cryptocurrency wallet address if you

179
00:06:59,819 --> 00:07:01,080
want

180
00:07:01,080 --> 00:07:03,720
then this identifier resolves into a

181
00:07:03,720 --> 00:07:05,819
decentralized identity document which is

182
00:07:05,819 --> 00:07:08,759
some sort of a Json which will primarily

183
00:07:08,759 --> 00:07:11,639
contain the public key associated with

184
00:07:11,639 --> 00:07:14,039
our identity and depending on the

185
00:07:14,039 --> 00:07:15,720
implementation it can contain many other

186
00:07:15,720 --> 00:07:17,759
types of information

187
00:07:17,759 --> 00:07:21,419
now a quick word on the ID method so as

188
00:07:21,419 --> 00:07:22,800
I mentioned

189
00:07:22,800 --> 00:07:25,080
um there are many different methods and

190
00:07:25,080 --> 00:07:27,720
the standard is implementation agnostic

191
00:07:27,720 --> 00:07:30,599
we can go all the way from just using it

192
00:07:30,599 --> 00:07:32,880
statically so I can generate a pair of

193
00:07:32,880 --> 00:07:35,220
keys write my private key on a piece of

194
00:07:35,220 --> 00:07:37,500
paper and just start to use that this

195
00:07:37,500 --> 00:07:39,840
way but we have a lot of other types of

196
00:07:39,840 --> 00:07:42,120
implementations and we will see a couple

197
00:07:42,120 --> 00:07:44,280
of those in just a bit

198
00:07:44,280 --> 00:07:47,759
now finally for the introduction part in

199
00:07:47,759 --> 00:07:49,380
terms of use cases what can we actually

200
00:07:49,380 --> 00:07:51,539
do with decentralized identity

201
00:07:51,539 --> 00:07:53,699
um in my opinion at least the sky is the

202
00:07:53,699 --> 00:07:55,800
limit and we can do pretty much anything

203
00:07:55,800 --> 00:07:58,680
we do online better with decentralized

204
00:07:58,680 --> 00:07:59,880
identity

205
00:07:59,880 --> 00:08:02,039
think about verifiable credentials where

206
00:08:02,039 --> 00:08:04,020
for instance your government can issue

207
00:08:04,020 --> 00:08:06,780
you a verifiable credential as your

208
00:08:06,780 --> 00:08:09,120
passport so it will be cryptographically

209
00:08:09,120 --> 00:08:11,340
verifiable and you can store it on your

210
00:08:11,340 --> 00:08:14,220
phone or maybe you can securely message

211
00:08:14,220 --> 00:08:16,979
your friends directly without the need

212
00:08:16,979 --> 00:08:18,599
to have some third party in the middle

213
00:08:18,599 --> 00:08:21,720
like signal or telegram or Whatsapp or

214
00:08:21,720 --> 00:08:23,940
even social media where nobody can get

215
00:08:23,940 --> 00:08:25,680
censored and of course no Tech

216
00:08:25,680 --> 00:08:27,240
billionaire can just buy the company and

217
00:08:27,240 --> 00:08:29,400
do whatever they like to it

218
00:08:29,400 --> 00:08:31,199
um again the sky's the limit

219
00:08:31,199 --> 00:08:34,320
so let's take a look at a few examples

220
00:08:34,320 --> 00:08:37,140
when I started to work on decentralized

221
00:08:37,140 --> 00:08:39,479
identity technology

222
00:08:39,479 --> 00:08:42,539
um a couple of implementation Studio

223
00:08:42,539 --> 00:08:44,760
the first one we will cover it very very

224
00:08:44,760 --> 00:08:48,240
briefly it was a layer 2 solution and

225
00:08:48,240 --> 00:08:50,100
Layer Two in the blockchain sense it

226
00:08:50,100 --> 00:08:52,440
means that we have a new layer which is

227
00:08:52,440 --> 00:08:54,540
built on top of an already established

228
00:08:54,540 --> 00:08:55,740
blockchain

229
00:08:55,740 --> 00:08:59,339
and this one it stood out because it was

230
00:08:59,339 --> 00:09:01,980
by the tech giant Microsoft it was

231
00:09:01,980 --> 00:09:04,560
called Microsoft intra and basically

232
00:09:04,560 --> 00:09:07,080
they built a network called the identity

233
00:09:07,080 --> 00:09:10,019
overlay Network or ion which is an

234
00:09:10,019 --> 00:09:11,760
identity layer that sits on top of

235
00:09:11,760 --> 00:09:13,620
Bitcoin which is an already established

236
00:09:13,620 --> 00:09:15,540
blockchain

237
00:09:15,540 --> 00:09:17,820
so I don't want to get too much into the

238
00:09:17,820 --> 00:09:20,100
details here I was able to find two very

239
00:09:20,100 --> 00:09:22,980
minor issues in Microsoft intra I have a

240
00:09:22,980 --> 00:09:25,019
blog post on that if you like to learn

241
00:09:25,019 --> 00:09:26,820
more about the technology and the issues

242
00:09:26,820 --> 00:09:29,100
I will link it at the end but I just

243
00:09:29,100 --> 00:09:31,080
wanted to bring to your attention that

244
00:09:31,080 --> 00:09:33,000
we have a lot of types of decentralized

245
00:09:33,000 --> 00:09:34,980
identity networks and implementations

246
00:09:34,980 --> 00:09:37,980
and this is one layer two solution

247
00:09:37,980 --> 00:09:40,140
but the rest of the session will focus

248
00:09:40,140 --> 00:09:42,480
on a different one and this one is an

249
00:09:42,480 --> 00:09:45,600
actual identity Ledger or it is an

250
00:09:45,600 --> 00:09:47,100
actual blockchain that was developed

251
00:09:47,100 --> 00:09:49,740
specifically for identity purposes

252
00:09:49,740 --> 00:09:51,600
and this is what is called Sovereign or

253
00:09:51,600 --> 00:09:53,100
The Sovereign Network

254
00:09:53,100 --> 00:09:54,899
it's operated by The Sovereign

255
00:09:54,899 --> 00:09:56,700
Foundation which is a non-profit

256
00:09:56,700 --> 00:09:59,040
organization and they aim to build a

257
00:09:59,040 --> 00:10:01,260
public service enabling self-sovereign

258
00:10:01,260 --> 00:10:03,899
identity on the internet

259
00:10:03,899 --> 00:10:06,240
um and this project stood out because it

260
00:10:06,240 --> 00:10:08,760
was by far the most mature one

261
00:10:08,760 --> 00:10:11,040
um recently they celebrated five years

262
00:10:11,040 --> 00:10:14,279
of being in production already so this

263
00:10:14,279 --> 00:10:17,160
was the reason I chose to go with it

264
00:10:17,160 --> 00:10:18,480
um and basically The Sovereign network

265
00:10:18,480 --> 00:10:21,600
is a network deployment of a blockchain

266
00:10:21,600 --> 00:10:25,160
called hyperledger indie

267
00:10:25,160 --> 00:10:28,980
it's an identity Centric blockchain it

268
00:10:28,980 --> 00:10:30,600
was developed under the hyperledger

269
00:10:30,600 --> 00:10:33,959
foundation they are an open source group

270
00:10:33,959 --> 00:10:35,459
they build a lot of decentralized

271
00:10:35,459 --> 00:10:37,740
applications and they sit under the

272
00:10:37,740 --> 00:10:39,720
Linux foundation so this is the context

273
00:10:39,720 --> 00:10:41,880
for this project

274
00:10:41,880 --> 00:10:44,459
and the hyperliger Indy um as I said

275
00:10:44,459 --> 00:10:46,079
it's quite a lucrative Target for

276
00:10:46,079 --> 00:10:48,000
attackers because of sovereign but not

277
00:10:48,000 --> 00:10:49,800
only that they are also the base for

278
00:10:49,800 --> 00:10:51,660
other decentralized identity networks

279
00:10:51,660 --> 00:10:54,779
which are already in production like the

280
00:10:54,779 --> 00:10:57,660
verified organizational Network in

281
00:10:57,660 --> 00:10:59,399
Canada operated by the governments of

282
00:10:59,399 --> 00:11:01,740
Canada and British Columbia the national

283
00:11:01,740 --> 00:11:04,019
decentralized identity Network in Canada

284
00:11:04,019 --> 00:11:07,260
also a product by IBM those are the more

285
00:11:07,260 --> 00:11:10,380
prominent ones so again hyperlodgerendy

286
00:11:10,380 --> 00:11:14,420
is quite a good Target for attackers

287
00:11:14,579 --> 00:11:16,440
um as we mentioned it is a distributed

288
00:11:16,440 --> 00:11:18,779
Ledger or it is an actual blockchain

289
00:11:18,779 --> 00:11:20,640
implementation

290
00:11:20,640 --> 00:11:23,640
um I assumed it would have high coding

291
00:11:23,640 --> 00:11:26,160
standards and high code quality and high

292
00:11:26,160 --> 00:11:28,380
levels of maturity because again it was

293
00:11:28,380 --> 00:11:29,940
in production for quite some time

294
00:11:29,940 --> 00:11:31,620
already

295
00:11:31,620 --> 00:11:33,720
um it is identity Centric and this means

296
00:11:33,720 --> 00:11:35,820
that identity operations are not an

297
00:11:35,820 --> 00:11:38,100
afterthought like they can be in some

298
00:11:38,100 --> 00:11:41,160
layer 2 Technologies

299
00:11:41,160 --> 00:11:44,040
the blockchain was developed in Python

300
00:11:44,040 --> 00:11:47,459
and maybe most interestingly it is a

301
00:11:47,459 --> 00:11:49,500
permissioned blockchain and let me

302
00:11:49,500 --> 00:11:50,519
explain

303
00:11:50,519 --> 00:11:52,320
so the blockchains that we probably all

304
00:11:52,320 --> 00:11:55,079
know and love like Bitcoin or ethereum

305
00:11:55,079 --> 00:11:57,300
are both public and this means that

306
00:11:57,300 --> 00:11:59,100
anybody can read information off the

307
00:11:59,100 --> 00:12:00,720
blockchain and they are also

308
00:12:00,720 --> 00:12:02,160
permissionless and this means that

309
00:12:02,160 --> 00:12:04,500
anybody can set up a node and start to

310
00:12:04,500 --> 00:12:06,360
build blocks and validate transactions

311
00:12:06,360 --> 00:12:09,420
and actually write to the chain but we

312
00:12:09,420 --> 00:12:11,279
also have some private blockchains for

313
00:12:11,279 --> 00:12:13,860
instance like Enterprise ethereum where

314
00:12:13,860 --> 00:12:15,720
not everybody can read information from

315
00:12:15,720 --> 00:12:16,860
the blockchain

316
00:12:16,860 --> 00:12:20,519
and in hyperledger Indie we see a

317
00:12:20,519 --> 00:12:22,560
blockchain which is public so anybody

318
00:12:22,560 --> 00:12:24,959
can read information from it but it's

319
00:12:24,959 --> 00:12:26,640
permissioned and this means that only

320
00:12:26,640 --> 00:12:28,800
very specific organizations are allowed

321
00:12:28,800 --> 00:12:31,620
to operate a node and to participate in

322
00:12:31,620 --> 00:12:33,240
the consensus algorithm

323
00:12:33,240 --> 00:12:36,000
and those organizations are set are

324
00:12:36,000 --> 00:12:38,339
defined by the network operator in a

325
00:12:38,339 --> 00:12:40,500
governance document when you create the

326
00:12:40,500 --> 00:12:42,720
network so

327
00:12:42,720 --> 00:12:44,700
Rick does raise a good point here and

328
00:12:44,700 --> 00:12:46,440
you might be thinking kind of the same

329
00:12:46,440 --> 00:12:48,600
thing and it is a valid point however

330
00:12:48,600 --> 00:12:50,760
permission blockchains are being used

331
00:12:50,760 --> 00:12:52,760
currently and they have their use cases

332
00:12:52,760 --> 00:12:55,320
of course they also have some advantages

333
00:12:55,320 --> 00:12:57,899
so first of all if we look at efficiency

334
00:12:57,899 --> 00:13:00,240
and cost effectiveness of course they

335
00:13:00,240 --> 00:13:01,680
are more efficient because you don't

336
00:13:01,680 --> 00:13:03,480
need to have as many nodes in order to

337
00:13:03,480 --> 00:13:05,459
operate the network properly it's quite

338
00:13:05,459 --> 00:13:06,320
clear

339
00:13:06,320 --> 00:13:09,480
they also add a layer of client trust

340
00:13:09,480 --> 00:13:11,220
because if you think about it let's say

341
00:13:11,220 --> 00:13:13,380
we have a permissioned network we can

342
00:13:13,380 --> 00:13:15,779
have let's say 20 or 30 nodes that are

343
00:13:15,779 --> 00:13:18,959
actually validating transactions and as

344
00:13:18,959 --> 00:13:21,600
end users we can know those nodes by

345
00:13:21,600 --> 00:13:23,399
their public keys and this means that

346
00:13:23,399 --> 00:13:25,440
whenever we try to read or to ask

347
00:13:25,440 --> 00:13:27,000
somebody to read information from the

348
00:13:27,000 --> 00:13:29,760
chains and give it to us we can make

349
00:13:29,760 --> 00:13:31,560
sure that indeed all the nodes or that

350
00:13:31,560 --> 00:13:33,420
enough nodes agree on this information

351
00:13:33,420 --> 00:13:36,680
that we're getting and it's not being

352
00:13:36,680 --> 00:13:39,839
modified in the way in any way

353
00:13:39,839 --> 00:13:42,180
and of course in terms of disadvantages

354
00:13:42,180 --> 00:13:44,820
we have the centralization factor which

355
00:13:44,820 --> 00:13:46,920
is of course uh permission networks are

356
00:13:46,920 --> 00:13:49,019
more centralized there's no way around

357
00:13:49,019 --> 00:13:50,339
that

358
00:13:50,339 --> 00:13:52,200
um and also security kind of suffers

359
00:13:52,200 --> 00:13:54,300
because if you think about it let's say

360
00:13:54,300 --> 00:13:56,940
as an attacker you get control over 30

361
00:13:56,940 --> 00:13:59,220
Bitcoin nodes doesn't help you very much

362
00:13:59,220 --> 00:14:02,160
unless it's 50 or more of the node in

363
00:14:02,160 --> 00:14:04,380
the chain however if we're talking about

364
00:14:04,380 --> 00:14:07,200
a permission chain which only has like

365
00:14:07,200 --> 00:14:10,440
30 nodes in some cases we are looking at

366
00:14:10,440 --> 00:14:12,480
a different scenario

367
00:14:12,480 --> 00:14:14,820
so hyperledger Indie the blockchain

368
00:14:14,820 --> 00:14:17,700
itself or the node itself is operated by

369
00:14:17,700 --> 00:14:19,019
two projects

370
00:14:19,019 --> 00:14:21,120
um the first one is in the planum which

371
00:14:21,120 --> 00:14:23,820
gives it the the consensus layer of the

372
00:14:23,820 --> 00:14:26,100
network and the second one is in the

373
00:14:26,100 --> 00:14:27,959
node and we denote is the actual

374
00:14:27,959 --> 00:14:30,000
identity layer and this is what we're

375
00:14:30,000 --> 00:14:32,399
going to focus on in this session

376
00:14:32,399 --> 00:14:35,040
and in a high level overview the network

377
00:14:35,040 --> 00:14:37,680
looks kind of like this where we have

378
00:14:37,680 --> 00:14:39,360
the green nodes which are the validator

379
00:14:39,360 --> 00:14:41,339
nodes or the permission nodes that are

380
00:14:41,339 --> 00:14:43,260
set in the governance document

381
00:14:43,260 --> 00:14:45,240
those are the only nodes that can

382
00:14:45,240 --> 00:14:48,060
actually write to the network

383
00:14:48,060 --> 00:14:50,279
then we also have some read-only nodes

384
00:14:50,279 --> 00:14:52,620
and anybody can set up a read-only node

385
00:14:52,620 --> 00:14:54,180
and start to read information from the

386
00:14:54,180 --> 00:14:55,500
chain you don't need to have any

387
00:14:55,500 --> 00:14:58,320
permissions to that to do that

388
00:14:58,320 --> 00:15:00,240
and the number of nodes is set by the

389
00:15:00,240 --> 00:15:02,339
following formula is equals to three f

390
00:15:02,339 --> 00:15:05,220
plus one uh F being the maximum number

391
00:15:05,220 --> 00:15:07,380
of malicious nodes allowed in the

392
00:15:07,380 --> 00:15:09,720
network and this is a feature of the

393
00:15:09,720 --> 00:15:11,639
consensus algorithm

394
00:15:11,639 --> 00:15:13,980
the nodes communicate with other nodes

395
00:15:13,980 --> 00:15:16,380
and other clients in the network using

396
00:15:16,380 --> 00:15:18,839
the zero mq protocol which is an

397
00:15:18,839 --> 00:15:22,380
authenticated TCP based protocol and the

398
00:15:22,380 --> 00:15:24,360
consensus algorithm itself is called

399
00:15:24,360 --> 00:15:25,740
rbft

400
00:15:25,740 --> 00:15:28,500
rbft stands for redundant Byzantine

401
00:15:28,500 --> 00:15:31,940
fault tolerance you may know bft already

402
00:15:31,940 --> 00:15:36,000
it's a consensus algorithm from 1982 a

403
00:15:36,000 --> 00:15:38,040
bunch of generals were trying to uh

404
00:15:38,040 --> 00:15:40,680
trying to decide whether to attack or

405
00:15:40,680 --> 00:15:43,399
Retreat and they try to do that even

406
00:15:43,399 --> 00:15:45,600
considering some of the generals were

407
00:15:45,600 --> 00:15:48,360
malicious or Byzantine and this is what

408
00:15:48,360 --> 00:15:50,399
allowed them to do that and this is also

409
00:15:50,399 --> 00:15:52,740
what allows the network to come to a

410
00:15:52,740 --> 00:15:54,720
consensus even if some of the nodes are

411
00:15:54,720 --> 00:15:57,600
malicious a small fraction of them and

412
00:15:57,600 --> 00:16:00,180
we're doing it redundantly it just means

413
00:16:00,180 --> 00:16:02,639
we have a few instances of BFD running

414
00:16:02,639 --> 00:16:04,860
together and it helps to increase the

415
00:16:04,860 --> 00:16:07,260
network throughput and latency

416
00:16:07,260 --> 00:16:10,139
so this is about the consensus algorithm

417
00:16:10,139 --> 00:16:12,120
now in terms of The Ledger or the

418
00:16:12,120 --> 00:16:14,220
database itself it's actually comprised

419
00:16:14,220 --> 00:16:16,800
out of four different ledgers each with

420
00:16:16,800 --> 00:16:19,500
its own role the first one is the domain

421
00:16:19,500 --> 00:16:21,720
Ledger this one is the one which is most

422
00:16:21,720 --> 00:16:23,399
relevant for us today

423
00:16:23,399 --> 00:16:24,839
um this is the one that actually

424
00:16:24,839 --> 00:16:27,480
contains the identity operations or

425
00:16:27,480 --> 00:16:29,220
identity transactions

426
00:16:29,220 --> 00:16:31,560
as you can see here then we also have

427
00:16:31,560 --> 00:16:33,959
the pool Ledger pool being the group of

428
00:16:33,959 --> 00:16:35,339
all the nodes that we have in the

429
00:16:35,339 --> 00:16:36,480
network

430
00:16:36,480 --> 00:16:38,399
then we also have the config Ledger

431
00:16:38,399 --> 00:16:40,800
which holds some configuration Global

432
00:16:40,800 --> 00:16:43,139
configuration regarding the entire pool

433
00:16:43,139 --> 00:16:46,079
and lastly we have the audit Ledger and

434
00:16:46,079 --> 00:16:47,880
this Ledger is just here in order to

435
00:16:47,880 --> 00:16:49,740
synchronize the other ledgers together

436
00:16:49,740 --> 00:16:51,300
because we need to know whether one

437
00:16:51,300 --> 00:16:52,980
transaction in one Ledger happened

438
00:16:52,980 --> 00:16:55,560
before or after the transaction in a

439
00:16:55,560 --> 00:16:57,959
different ledger so this is here to do

440
00:16:57,959 --> 00:16:59,399
that

441
00:16:59,399 --> 00:17:01,740
and now we have enough Basics and we can

442
00:17:01,740 --> 00:17:03,959
start to look at some vulnerabilities

443
00:17:03,959 --> 00:17:06,240
and try to find find out how to break

444
00:17:06,240 --> 00:17:07,980
this kind of network

445
00:17:07,980 --> 00:17:10,799
so whenever I approach a project like

446
00:17:10,799 --> 00:17:13,619
this it's always important to have Focus

447
00:17:13,619 --> 00:17:15,720
um because again we have a lot of moving

448
00:17:15,720 --> 00:17:17,459
Parts here and it's important to to stay

449
00:17:17,459 --> 00:17:18,900
on track

450
00:17:18,900 --> 00:17:21,059
um and this time I chose to focus on the

451
00:17:21,059 --> 00:17:25,199
Indie node itself on the identity layer

452
00:17:25,199 --> 00:17:26,640
um first of all because when we're

453
00:17:26,640 --> 00:17:27,959
talking about blockchain the most

454
00:17:27,959 --> 00:17:29,700
interesting code is usually the code

455
00:17:29,700 --> 00:17:31,320
that operates the node because this is

456
00:17:31,320 --> 00:17:34,200
what gives the the blockchain live

457
00:17:34,200 --> 00:17:36,000
um and this this is what I chose to work

458
00:17:36,000 --> 00:17:36,840
on

459
00:17:36,840 --> 00:17:39,480
and the first thing I usually do is to

460
00:17:39,480 --> 00:17:42,120
look at some prior work that was done in

461
00:17:42,120 --> 00:17:44,760
this field and in decentralized identity

462
00:17:44,760 --> 00:17:47,520
as a whole I only could find two

463
00:17:47,520 --> 00:17:49,679
vulnerabilities two CVS and

464
00:17:49,679 --> 00:17:52,380
coincidentally they both were in hyper

465
00:17:52,380 --> 00:17:54,240
Ledger Indie

466
00:17:54,240 --> 00:17:56,460
um so this is an example for one of them

467
00:17:56,460 --> 00:17:58,559
I don't want to get into the details but

468
00:17:58,559 --> 00:18:01,440
the node just gets an invalid request

469
00:18:01,440 --> 00:18:04,799
that causes it to misbehave in the

470
00:18:04,799 --> 00:18:08,220
consensus context in some sense

471
00:18:08,220 --> 00:18:11,220
um here's just the the diff of the code

472
00:18:11,220 --> 00:18:14,580
you can see that an invalid timestamp

473
00:18:14,580 --> 00:18:16,919
was handed to the node then it causes a

474
00:18:16,919 --> 00:18:19,919
Havoc but we only need to keep the type

475
00:18:19,919 --> 00:18:21,840
of vulnerability in mind while we

476
00:18:21,840 --> 00:18:23,100
continue

477
00:18:23,100 --> 00:18:25,200
so before starting to actually look at

478
00:18:25,200 --> 00:18:28,500
the code I also like to map the inputs

479
00:18:28,500 --> 00:18:30,780
and outputs of the system and see what

480
00:18:30,780 --> 00:18:33,360
the attack surface for attackers is

481
00:18:33,360 --> 00:18:35,220
so first of all of course we have The

482
00:18:35,220 --> 00:18:37,320
Ledger uh we can cause some information

483
00:18:37,320 --> 00:18:39,240
to be written to The Ledger and later

484
00:18:39,240 --> 00:18:41,400
other nodes read from the same Ledger

485
00:18:41,400 --> 00:18:43,620
this is one attack surface and the other

486
00:18:43,620 --> 00:18:46,020
one which is a bit more substantial is

487
00:18:46,020 --> 00:18:48,480
the request handers so the node

488
00:18:48,480 --> 00:18:50,880
implements a lot of request handlers uh

489
00:18:50,880 --> 00:18:54,000
that it can get both from users in the

490
00:18:54,000 --> 00:18:57,240
system as well as other nodes and this

491
00:18:57,240 --> 00:18:59,820
was an area which was also pretty well

492
00:18:59,820 --> 00:19:02,640
documented so it's a good start and

493
00:19:02,640 --> 00:19:04,799
generally speaking we have two types of

494
00:19:04,799 --> 00:19:06,840
requests the first one of course is a

495
00:19:06,840 --> 00:19:10,260
read request and uh you don't have to

496
00:19:10,260 --> 00:19:12,360
have any uh permissions in order to to

497
00:19:12,360 --> 00:19:14,160
do that of course because we are in a

498
00:19:14,160 --> 00:19:16,980
public blockchain and both other nodes

499
00:19:16,980 --> 00:19:19,980
and users can perform those requests

500
00:19:19,980 --> 00:19:21,539
and then we also have some write

501
00:19:21,539 --> 00:19:23,880
requests and those ones of course are

502
00:19:23,880 --> 00:19:25,620
authenticated because you need to have

503
00:19:25,620 --> 00:19:28,039
permissions in order to do them

504
00:19:28,039 --> 00:19:31,320
and also some of those are authorized

505
00:19:31,320 --> 00:19:33,059
and this is because we have different

506
00:19:33,059 --> 00:19:35,700
types of roles in the network which I

507
00:19:35,700 --> 00:19:37,799
haven't mentioned before

508
00:19:37,799 --> 00:19:41,220
so with the request handlers in mind I

509
00:19:41,220 --> 00:19:43,620
wanted to start by statically analyzing

510
00:19:43,620 --> 00:19:44,760
the code

511
00:19:44,760 --> 00:19:47,520
first because it's usually easier to do

512
00:19:47,520 --> 00:19:48,720
than to look for vulnerabilities

513
00:19:48,720 --> 00:19:51,780
manually and we also have a python code

514
00:19:51,780 --> 00:19:55,260
base and the code was fairly simple and

515
00:19:55,260 --> 00:19:57,840
very well structured and I tried to do

516
00:19:57,840 --> 00:20:01,559
that and basically I uh I used codeql

517
00:20:01,559 --> 00:20:03,960
which is a static code analysis

518
00:20:03,960 --> 00:20:06,960
framework by GitHub it basically lets

519
00:20:06,960 --> 00:20:09,120
you treat your code as an SQL database

520
00:20:09,120 --> 00:20:12,840
and I ran a few queries of generic

521
00:20:12,840 --> 00:20:15,720
python vulnerabilities and I also try to

522
00:20:15,720 --> 00:20:18,240
characterize the vulnerabilities we saw

523
00:20:18,240 --> 00:20:19,080
before

524
00:20:19,080 --> 00:20:21,059
of the node getting some untrusted

525
00:20:21,059 --> 00:20:23,400
information and then pass it passing it

526
00:20:23,400 --> 00:20:25,980
on to another external function let's

527
00:20:25,980 --> 00:20:27,480
call it

528
00:20:27,480 --> 00:20:29,940
and unfortunately this time it didn't

529
00:20:29,940 --> 00:20:31,620
yield any results

530
00:20:31,620 --> 00:20:33,480
um I just wanted to leave that here in

531
00:20:33,480 --> 00:20:35,760
case for you to know that I do think

532
00:20:35,760 --> 00:20:38,460
that it's a very important uh stage in

533
00:20:38,460 --> 00:20:40,500
the research process and the potential

534
00:20:40,500 --> 00:20:42,059
is very big because you can find some

535
00:20:42,059 --> 00:20:43,980
low hanging fruits this way but

536
00:20:43,980 --> 00:20:46,380
unfortunately not this time if you're

537
00:20:46,380 --> 00:20:48,900
interested in talking a little bit about

538
00:20:48,900 --> 00:20:51,480
uh those queries please come and talk to

539
00:20:51,480 --> 00:20:52,740
me later

540
00:20:52,740 --> 00:20:54,419
um but now there's no choice and we have

541
00:20:54,419 --> 00:20:57,539
to take a look at the code up close so I

542
00:20:57,539 --> 00:20:59,820
cloned the repository and as you can see

543
00:20:59,820 --> 00:21:03,360
everything was very nicely organized and

544
00:21:03,360 --> 00:21:05,640
again very extensively documented they

545
00:21:05,640 --> 00:21:08,640
even had some flowcharts of the request

546
00:21:08,640 --> 00:21:10,380
handling process of different types of

547
00:21:10,380 --> 00:21:13,440
requests so again very nice and some

548
00:21:13,440 --> 00:21:15,240
documents about how the request handling

549
00:21:15,240 --> 00:21:19,020
is done so I started to go over all of

550
00:21:19,020 --> 00:21:21,539
the request handlers one by one and I

551
00:21:21,539 --> 00:21:23,400
started to look for some interesting

552
00:21:23,400 --> 00:21:25,799
areas in the code and by interesting

553
00:21:25,799 --> 00:21:27,780
areas I mean the following

554
00:21:27,780 --> 00:21:31,559
first the use of uninitialized data or

555
00:21:31,559 --> 00:21:32,360
maybe

556
00:21:32,360 --> 00:21:34,559
areas where the node doesn't check

557
00:21:34,559 --> 00:21:36,780
whether information actually exists in

558
00:21:36,780 --> 00:21:39,900
the request and just starts to use that

559
00:21:39,900 --> 00:21:42,419
secondly a lack of input validation

560
00:21:42,419 --> 00:21:44,659
which is kind of straightforward

561
00:21:44,659 --> 00:21:47,580
then a requests that have high code

562
00:21:47,580 --> 00:21:50,100
complexity as you know those areas tend

563
00:21:50,100 --> 00:21:52,500
to be more prone to vulnerabilities

564
00:21:52,500 --> 00:21:54,240
and finally I was also looking for

565
00:21:54,240 --> 00:21:57,179
discrepancies between uh what the code

566
00:21:57,179 --> 00:21:59,280
ultimately implemented and what the

567
00:21:59,280 --> 00:22:01,080
documentation specified the code should

568
00:22:01,080 --> 00:22:02,340
do

569
00:22:02,340 --> 00:22:05,100
this is one of the request handlers just

570
00:22:05,100 --> 00:22:07,260
to give you a feel of how it looks like

571
00:22:07,260 --> 00:22:09,840
as you can see again everything seems

572
00:22:09,840 --> 00:22:11,700
very well structured and it looks like

573
00:22:11,700 --> 00:22:13,620
the developers really know what they're

574
00:22:13,620 --> 00:22:16,679
doing every request Handler inherits

575
00:22:16,679 --> 00:22:19,919
from one of two abstract classes either

576
00:22:19,919 --> 00:22:21,720
a read request Handler or a write

577
00:22:21,720 --> 00:22:23,700
request Handler and they also need to

578
00:22:23,700 --> 00:22:26,100
implement some virtual functions for

579
00:22:26,100 --> 00:22:29,400
different checks and validations

580
00:22:29,400 --> 00:22:32,580
so soon enough I encountered one request

581
00:22:32,580 --> 00:22:34,500
Handler called the pool upgrade Handler

582
00:22:34,500 --> 00:22:36,179
which was very interesting

583
00:22:36,179 --> 00:22:38,400
and it's for a few reasons first of all

584
00:22:38,400 --> 00:22:40,080
it's a write request Handler so

585
00:22:40,080 --> 00:22:42,179
inherently it's a bit more interesting

586
00:22:42,179 --> 00:22:45,179
than a real request one then it has

587
00:22:45,179 --> 00:22:48,120
upgrade in the name and upgrading the

588
00:22:48,120 --> 00:22:50,659
system is usually a very sensitive

589
00:22:50,659 --> 00:22:52,340
process

590
00:22:52,340 --> 00:22:54,900
and most importantly I found the

591
00:22:54,900 --> 00:22:56,340
discrepancy between what the

592
00:22:56,340 --> 00:22:58,500
documentation specified and what was

593
00:22:58,500 --> 00:23:00,600
actually implemented in the code so

594
00:23:00,600 --> 00:23:01,740
let's have a look

595
00:23:01,740 --> 00:23:03,059
on the left here we have the

596
00:23:03,059 --> 00:23:05,039
documentation and we will start with

597
00:23:05,039 --> 00:23:07,980
that we see that the full upgrade is a

598
00:23:07,980 --> 00:23:10,020
command to upgrade the pool again pool

599
00:23:10,020 --> 00:23:12,780
being the group of all the nodes it is

600
00:23:12,780 --> 00:23:14,820
sent by a trustee which is a very

601
00:23:14,820 --> 00:23:17,460
privileged role in the network

602
00:23:17,460 --> 00:23:19,080
and it says that it upgrades the

603
00:23:19,080 --> 00:23:20,700
specified nodes

604
00:23:20,700 --> 00:23:22,020
um okay

605
00:23:22,020 --> 00:23:24,600
based on the parameters documented we

606
00:23:24,600 --> 00:23:26,220
see that we need to supply a version

607
00:23:26,220 --> 00:23:29,520
string and this is the version of the

608
00:23:29,520 --> 00:23:33,480
Indie node package we want to upgrade to

609
00:23:33,480 --> 00:23:36,539
so it seems simple enough we will

610
00:23:36,539 --> 00:23:38,640
provide some number as a string in the

611
00:23:38,640 --> 00:23:40,980
request and the in the node package will

612
00:23:40,980 --> 00:23:44,700
get upgraded to that specified version

613
00:23:44,700 --> 00:23:46,980
okay so now let's have a look at the

614
00:23:46,980 --> 00:23:47,820
code

615
00:23:47,820 --> 00:23:50,400
and doing that we quickly see that we

616
00:23:50,400 --> 00:23:53,580
have one undocumented parameter being

617
00:23:53,580 --> 00:23:55,260
processed by the node

618
00:23:55,260 --> 00:23:58,020
and based on the error string it looks

619
00:23:58,020 --> 00:24:01,320
like it is a package name that we want

620
00:24:01,320 --> 00:24:04,500
to upgrade so maybe we can upgrade

621
00:24:04,500 --> 00:24:06,360
another package not only the Indie node

622
00:24:06,360 --> 00:24:09,179
one like the documentation specified

623
00:24:09,179 --> 00:24:11,340
so at this point I was already quite

624
00:24:11,340 --> 00:24:13,260
intrigued and I wanted to find out

625
00:24:13,260 --> 00:24:15,720
exactly what's happening with this

626
00:24:15,720 --> 00:24:17,700
undocumented package parameter so let's

627
00:24:17,700 --> 00:24:19,440
do that

628
00:24:19,440 --> 00:24:22,679
so the first thing uh done here is the

629
00:24:22,679 --> 00:24:24,840
node checks whether the parameter exists

630
00:24:24,840 --> 00:24:27,600
or not and then it passes it on to the

631
00:24:27,600 --> 00:24:29,460
next function that is called check

632
00:24:29,460 --> 00:24:31,500
upgrade possible to probably check

633
00:24:31,500 --> 00:24:34,020
whether the upgrade is possible

634
00:24:34,020 --> 00:24:36,120
um in this function we see that the

635
00:24:36,120 --> 00:24:37,980
parameter is just being passed to the

636
00:24:37,980 --> 00:24:41,400
next one to get probably some current

637
00:24:41,400 --> 00:24:44,580
information on what's now installed on

638
00:24:44,580 --> 00:24:45,480
the Node

639
00:24:45,480 --> 00:24:47,400
and let's follow that

640
00:24:47,400 --> 00:24:50,340
and here we can see again it's just been

641
00:24:50,340 --> 00:24:52,140
passed to the next function to get

642
00:24:52,140 --> 00:24:54,600
current info on the package currently

643
00:24:54,600 --> 00:24:55,620
installed

644
00:24:55,620 --> 00:24:57,299
and here we can actually see some

645
00:24:57,299 --> 00:24:59,900
functionality finally implemented

646
00:24:59,900 --> 00:25:03,320
as you see the node composes the command

647
00:25:03,320 --> 00:25:06,179
dpkg minus S Plus our supplied

648
00:25:06,179 --> 00:25:09,360
undocumented package parameter and then

649
00:25:09,360 --> 00:25:11,700
it executes this command as a shell

650
00:25:11,700 --> 00:25:12,720
command

651
00:25:12,720 --> 00:25:15,000
so at this point I thought

652
00:25:15,000 --> 00:25:16,860
um okay this might not be the way I

653
00:25:16,860 --> 00:25:18,659
would Implement something like this it's

654
00:25:18,659 --> 00:25:21,000
a bit weird but let's go ahead and see

655
00:25:21,000 --> 00:25:23,039
what kind of sanitizations or checks

656
00:25:23,039 --> 00:25:25,799
they implemented uh on the input that we

657
00:25:25,799 --> 00:25:26,700
provide

658
00:25:26,700 --> 00:25:27,720
so

659
00:25:27,720 --> 00:25:30,360
in the compose command function as you

660
00:25:30,360 --> 00:25:31,919
can see we have no sanitizations

661
00:25:31,919 --> 00:25:33,659
whatsoever

662
00:25:33,659 --> 00:25:35,880
and if you continue to the Run shell

663
00:25:35,880 --> 00:25:38,279
command as you can see we're simply

664
00:25:38,279 --> 00:25:40,380
running it with sub process and no

665
00:25:40,380 --> 00:25:42,960
checks are being made here

666
00:25:42,960 --> 00:25:44,279
so

667
00:25:44,279 --> 00:25:45,600
um at this point I thought that I must

668
00:25:45,600 --> 00:25:47,940
have missed the sanitizations or input

669
00:25:47,940 --> 00:25:49,020
checks

670
00:25:49,020 --> 00:25:52,200
um and uh because again this can't

671
00:25:52,200 --> 00:25:54,720
really be a 90s style command ejection

672
00:25:54,720 --> 00:25:57,900
vulnerability kind of thing right

673
00:25:57,900 --> 00:25:59,279
right

674
00:25:59,279 --> 00:26:03,080
so I decided to to write it in my notes

675
00:26:03,080 --> 00:26:06,900
and to continue to finish going over all

676
00:26:06,900 --> 00:26:08,600
of the request handlers

677
00:26:08,600 --> 00:26:10,980
and then at the end I will set up some

678
00:26:10,980 --> 00:26:12,720
testing environment and execute this

679
00:26:12,720 --> 00:26:14,340
command and I see exactly where the

680
00:26:14,340 --> 00:26:16,440
checks that I was missing were

681
00:26:16,440 --> 00:26:19,440
so I try to do that and it turned out to

682
00:26:19,440 --> 00:26:21,539
be quite of a hassle because

683
00:26:21,539 --> 00:26:24,240
um of course I cloned the repo and just

684
00:26:24,240 --> 00:26:26,640
try to execute it as they mentioned but

685
00:26:26,640 --> 00:26:29,400
it didn't work and finally I ended up

686
00:26:29,400 --> 00:26:32,039
using a different branch of this in the

687
00:26:32,039 --> 00:26:36,240
node repository that they uh suggested I

688
00:26:36,240 --> 00:26:37,700
would do

689
00:26:37,700 --> 00:26:40,080
finally it was working inside of a Dev

690
00:26:40,080 --> 00:26:41,220
container

691
00:26:41,220 --> 00:26:43,200
long story short I had a testing

692
00:26:43,200 --> 00:26:45,840
environment running and lucky enough

693
00:26:45,840 --> 00:26:48,779
luckily they also had a quite an

694
00:26:48,779 --> 00:26:51,179
extensive pie test framework for their

695
00:26:51,179 --> 00:26:54,840
code and it allowed me to easily start a

696
00:26:54,840 --> 00:26:56,760
new network run a few nodes locally

697
00:26:56,760 --> 00:26:59,700
create client wallets send requests and

698
00:26:59,700 --> 00:27:02,460
so on so it was kind of nice

699
00:27:02,460 --> 00:27:04,620
um so this is the first thing I did uh

700
00:27:04,620 --> 00:27:07,260
this is one uh testing file I wrote

701
00:27:07,260 --> 00:27:09,179
um and as you can see we are sending a

702
00:27:09,179 --> 00:27:11,940
pull upgrade request with the

703
00:27:11,940 --> 00:27:14,400
undocumented package parameter we Supply

704
00:27:14,400 --> 00:27:17,640
a package name then a semicolon and then

705
00:27:17,640 --> 00:27:20,340
a command touch slash Pawn to create a

706
00:27:20,340 --> 00:27:22,740
pawn file in the root directory

707
00:27:22,740 --> 00:27:25,500
so spoiler I tried to execute this and

708
00:27:25,500 --> 00:27:28,620
no Pawn file was created

709
00:27:28,620 --> 00:27:30,000
um and I said okay that makes sense

710
00:27:30,000 --> 00:27:32,400
let's find out why let's find the

711
00:27:32,400 --> 00:27:34,860
sanitizations that I was missing

712
00:27:34,860 --> 00:27:36,900
um and I started digging into the logs

713
00:27:36,900 --> 00:27:38,640
and the code but I couldn't find any

714
00:27:38,640 --> 00:27:40,380
sanitizations

715
00:27:40,380 --> 00:27:42,600
um so naturally I added a few print

716
00:27:42,600 --> 00:27:44,340
statements in different places in the

717
00:27:44,340 --> 00:27:48,059
node and also then weirdly enough my

718
00:27:48,059 --> 00:27:51,840
print my printing weren't working

719
00:27:51,840 --> 00:27:54,659
um so I dug in a little deeper until I

720
00:27:54,659 --> 00:27:57,299
found this file this is a confist file

721
00:27:57,299 --> 00:27:59,640
and if you're familiar with bytest you

722
00:27:59,640 --> 00:28:01,380
know that this file is being executed

723
00:28:01,380 --> 00:28:04,020
every time you run some tests

724
00:28:04,020 --> 00:28:05,700
and as you can see what they're doing

725
00:28:05,700 --> 00:28:07,740
here is basically patching out the very

726
00:28:07,740 --> 00:28:10,200
function that I'm trying to test and

727
00:28:10,200 --> 00:28:12,000
this makes sense because in a testing

728
00:28:12,000 --> 00:28:13,919
context you don't really care about

729
00:28:13,919 --> 00:28:16,080
packages that are installed on the on

730
00:28:16,080 --> 00:28:18,840
the server you're you're testing on

731
00:28:18,840 --> 00:28:20,940
um so I had to patch out this batching

732
00:28:20,940 --> 00:28:23,100
function and then I tried to execute it

733
00:28:23,100 --> 00:28:26,899
again and let's see what happened

734
00:28:27,659 --> 00:28:29,400
so now we're checking that there's no

735
00:28:29,400 --> 00:28:32,220
Pawn file first and this is the test

736
00:28:32,220 --> 00:28:33,960
file I showed you before with the pull

737
00:28:33,960 --> 00:28:36,299
upgrade request

738
00:28:36,299 --> 00:28:39,600
now we're going to uh start the test

739
00:28:39,600 --> 00:28:43,679
and the network is now being Genesis and

740
00:28:43,679 --> 00:28:47,580
a few nodes are being executed locally

741
00:28:47,580 --> 00:28:50,279
then we create a client wallet and send

742
00:28:50,279 --> 00:28:52,860
this request and now once we're done we

743
00:28:52,860 --> 00:28:55,559
see that we have a slash bone file so

744
00:28:55,559 --> 00:28:59,340
this means that we have code execution

745
00:28:59,340 --> 00:29:01,590
um okay thank you thank you

746
00:29:01,590 --> 00:29:03,299
[Applause]

747
00:29:03,299 --> 00:29:05,760
so first naturally I was very happy

748
00:29:05,760 --> 00:29:08,159
because this is an rce but then I was

749
00:29:08,159 --> 00:29:10,260
also kind of concerned because as I

750
00:29:10,260 --> 00:29:12,179
mentioned hyperhead during the is the

751
00:29:12,179 --> 00:29:14,720
base for many different production level

752
00:29:14,720 --> 00:29:18,000
decentralized identity Networks

753
00:29:18,000 --> 00:29:20,940
um but then I remembered that the

754
00:29:20,940 --> 00:29:23,039
documentation said that the pull upgrade

755
00:29:23,039 --> 00:29:25,200
request should only be sent by a trustee

756
00:29:25,200 --> 00:29:28,200
right

757
00:29:28,320 --> 00:29:29,520
so

758
00:29:29,520 --> 00:29:31,500
those of you in smart contract security

759
00:29:31,500 --> 00:29:33,659
probably know the secure coding pattern

760
00:29:33,659 --> 00:29:37,140
checks FX interactions this is basically

761
00:29:37,140 --> 00:29:39,539
just a guideline for programmers on the

762
00:29:39,539 --> 00:29:41,640
order they need to perform specific

763
00:29:41,640 --> 00:29:43,320
actions in order to reduce attack

764
00:29:43,320 --> 00:29:47,039
surface for attackers in re-entrancy

765
00:29:47,039 --> 00:29:48,320
vulnerabilities

766
00:29:48,320 --> 00:29:51,179
but you may not be aware of a much more

767
00:29:51,179 --> 00:29:54,840
ancient uh secure coding pattern that is

768
00:29:54,840 --> 00:29:56,100
reserved only to the most secure

769
00:29:56,100 --> 00:29:58,620
applications it's called the authorized

770
00:29:58,620 --> 00:29:59,419
do

771
00:29:59,419 --> 00:30:01,679
where first you authorize the action

772
00:30:01,679 --> 00:30:03,360
you're about to perform and only then

773
00:30:03,360 --> 00:30:06,299
you perform it and if we take a look at

774
00:30:06,299 --> 00:30:09,899
the uh pull upgrade request Handler I

775
00:30:09,899 --> 00:30:12,059
know you cannot read it but this is

776
00:30:12,059 --> 00:30:14,940
where we can trigger the vulnerable code

777
00:30:14,940 --> 00:30:16,440
and this is where the authorization

778
00:30:16,440 --> 00:30:17,700
happens

779
00:30:17,700 --> 00:30:19,440
so again this is where the vulnerable

780
00:30:19,440 --> 00:30:21,419
code lies and this is the authorization

781
00:30:21,419 --> 00:30:24,960
part so unfortunately anybody in the

782
00:30:24,960 --> 00:30:27,539
network can just send this and Trigger

783
00:30:27,539 --> 00:30:29,159
DRC

784
00:30:29,159 --> 00:30:31,440
so I don't mean to disrespect the Indie

785
00:30:31,440 --> 00:30:34,200
team because they are authorizing the

786
00:30:34,200 --> 00:30:36,360
actual upgrade process but as you saw

787
00:30:36,360 --> 00:30:38,640
the vulnerability lies in the let's call

788
00:30:38,640 --> 00:30:41,460
it pre-processing of this request

789
00:30:41,460 --> 00:30:44,460
so um let's try to get out of the um

790
00:30:44,460 --> 00:30:47,460
testing contest context and

791
00:30:47,460 --> 00:30:50,039
um build an actual exploit So the plan

792
00:30:50,039 --> 00:30:51,840
is as follows first we're going to

793
00:30:51,840 --> 00:30:54,480
create a new did because we have to have

794
00:30:54,480 --> 00:30:56,880
a decentralized identifier in order to

795
00:30:56,880 --> 00:30:58,980
send requests in the network but again

796
00:30:58,980 --> 00:31:00,539
no permissions are required for that

797
00:31:00,539 --> 00:31:02,940
anybody can just create a new random

798
00:31:02,940 --> 00:31:04,559
identifier

799
00:31:04,559 --> 00:31:06,179
then we're going to construct our highly

800
00:31:06,179 --> 00:31:07,620
sophisticated payload with the

801
00:31:07,620 --> 00:31:09,899
undocumented package parameter semicolon

802
00:31:09,899 --> 00:31:12,840
and then let's put a reverse python

803
00:31:12,840 --> 00:31:13,940
Shellder

804
00:31:13,940 --> 00:31:17,100
then we need to set up the zero mq

805
00:31:17,100 --> 00:31:18,600
socket um

806
00:31:18,600 --> 00:31:21,240
to the node we want to to exploit and

807
00:31:21,240 --> 00:31:23,580
send it using that

808
00:31:23,580 --> 00:31:25,559
after that we have stage four and then

809
00:31:25,559 --> 00:31:27,539
we make profit of course

810
00:31:27,539 --> 00:31:29,399
so this is the exploit the most

811
00:31:29,399 --> 00:31:31,020
important part here is the actual

812
00:31:31,020 --> 00:31:33,480
request that we're about to send as you

813
00:31:33,480 --> 00:31:35,520
can see we have the package parameter

814
00:31:35,520 --> 00:31:38,640
with the payload we also need to supply

815
00:31:38,640 --> 00:31:41,159
some schedule for this so-called upgrade

816
00:31:41,159 --> 00:31:43,860
these are just public identifiers of

817
00:31:43,860 --> 00:31:46,320
some of the nodes and a timestamp in the

818
00:31:46,320 --> 00:31:47,820
future

819
00:31:47,820 --> 00:31:49,919
um and finally of course all of these

820
00:31:49,919 --> 00:31:52,679
need to be signed by our newly generated

821
00:31:52,679 --> 00:31:55,080
identity which again requires no

822
00:31:55,080 --> 00:31:56,700
permissions at all

823
00:31:56,700 --> 00:31:59,580
then we're going to construct the zmq

824
00:31:59,580 --> 00:32:02,399
socket and in order to do that we also

825
00:32:02,399 --> 00:32:04,740
need to know the public key of the node

826
00:32:04,740 --> 00:32:06,840
we're about to communicate with

827
00:32:06,840 --> 00:32:08,039
um but again it's just public

828
00:32:08,039 --> 00:32:10,559
information and finally we just send it

829
00:32:10,559 --> 00:32:14,100
so let's see it in action on the left we

830
00:32:14,100 --> 00:32:16,559
have uh everything running inside of the

831
00:32:16,559 --> 00:32:18,960
dev container and this is where I'm

832
00:32:18,960 --> 00:32:21,080
going to run the network and a few nodes

833
00:32:21,080 --> 00:32:25,440
and on the right we have the attacker

834
00:32:25,440 --> 00:32:27,600
um down the attacker is listening with

835
00:32:27,600 --> 00:32:30,840
netcat of course and we are in a second

836
00:32:30,840 --> 00:32:33,679
about to send our malicious payload

837
00:32:33,679 --> 00:32:35,940
and as you can see we have a connection

838
00:32:35,940 --> 00:32:39,419
and we do have a reverse shell so it's

839
00:32:39,419 --> 00:32:41,520
quite a success for the attacker in this

840
00:32:41,520 --> 00:32:43,080
case

841
00:32:43,080 --> 00:32:45,139
um

842
00:32:45,299 --> 00:32:46,520
thank you

843
00:32:46,520 --> 00:32:50,220
so after that I was again quite happy

844
00:32:50,220 --> 00:32:53,580
and concerned at the same time and after

845
00:32:53,580 --> 00:32:57,539
a brief look at the logs I found this

846
00:32:57,539 --> 00:32:59,520
so as you can see it says something

847
00:32:59,520 --> 00:33:00,320
about

848
00:33:00,320 --> 00:33:04,320
propagation being made so I turn to the

849
00:33:04,320 --> 00:33:07,020
documentation again and as you can see

850
00:33:07,020 --> 00:33:09,360
it says that if the node has not seen

851
00:33:09,360 --> 00:33:11,820
the request before it broadcasts the

852
00:33:11,820 --> 00:33:14,039
request to all of the nodes in a

853
00:33:14,039 --> 00:33:15,360
propagate

854
00:33:15,360 --> 00:33:18,000
so this means that an anonymous attacker

855
00:33:18,000 --> 00:33:20,340
can send just one request to one of the

856
00:33:20,340 --> 00:33:22,080
nodes in the in the network and

857
00:33:22,080 --> 00:33:24,840
compromise the entire network so this

858
00:33:24,840 --> 00:33:27,419
was quite crazy

859
00:33:27,419 --> 00:33:30,179
um okay so if we go back to our exploit

860
00:33:30,179 --> 00:33:33,539
plan we had uh stage four and because

861
00:33:33,539 --> 00:33:36,120
we're not in a decentralized finance

862
00:33:36,120 --> 00:33:37,919
system and we don't have a bunch of

863
00:33:37,919 --> 00:33:40,679
tokens to steal and get rich what can we

864
00:33:40,679 --> 00:33:43,140
actually do with that

865
00:33:43,140 --> 00:33:45,179
so basically

866
00:33:45,179 --> 00:33:47,580
when we have this capability there is

867
00:33:47,580 --> 00:33:49,260
nothing stopping us from compromising

868
00:33:49,260 --> 00:33:51,960
any identity in the network

869
00:33:51,960 --> 00:33:54,480
and I'll tell you exactly how first of

870
00:33:54,480 --> 00:33:56,580
all of course we can execute code on any

871
00:33:56,580 --> 00:33:58,260
of the Indie nodes either just by

872
00:33:58,260 --> 00:34:01,640
sending them our payload or by using the

873
00:34:01,640 --> 00:34:04,919
convenient propagate functionality that

874
00:34:04,919 --> 00:34:06,240
we just saw

875
00:34:06,240 --> 00:34:08,339
after we have code execution on the

876
00:34:08,339 --> 00:34:10,980
nodes we can again nothing stopping us

877
00:34:10,980 --> 00:34:13,500
from actually changing modifying our

878
00:34:13,500 --> 00:34:16,760
domain Ledger our domain Ledger database

879
00:34:16,760 --> 00:34:18,719
locally because it's just a local

880
00:34:18,719 --> 00:34:20,219
database on the Node

881
00:34:20,219 --> 00:34:22,379
and of course we can also plant a back

882
00:34:22,379 --> 00:34:24,480
door in the Indie node code itself it's

883
00:34:24,480 --> 00:34:26,460
just some python code that is running on

884
00:34:26,460 --> 00:34:28,020
the server and there's nothing stopping

885
00:34:28,020 --> 00:34:29,820
us from doing that as well

886
00:34:29,820 --> 00:34:32,040
now we're still not done and because

887
00:34:32,040 --> 00:34:34,080
this is a decentralized system

888
00:34:34,080 --> 00:34:36,418
in order to compromise an identity we

889
00:34:36,418 --> 00:34:37,859
can't just steal the private keys

890
00:34:37,859 --> 00:34:40,080
because they are uh

891
00:34:40,080 --> 00:34:42,000
in the hands of the user and not

892
00:34:42,000 --> 00:34:44,339
anywhere in the network itself

893
00:34:44,339 --> 00:34:47,760
um however by changing some uh by

894
00:34:47,760 --> 00:34:49,619
writing some new or changing some

895
00:34:49,619 --> 00:34:50,699
existing

896
00:34:50,699 --> 00:34:52,980
um transactions in the database we can

897
00:34:52,980 --> 00:34:54,960
point the user's identity the target

898
00:34:54,960 --> 00:34:57,839
identity to a set of keys that we are in

899
00:34:57,839 --> 00:35:01,980
control of and also we can insert a

900
00:35:01,980 --> 00:35:04,020
backdoor again that will accept invalid

901
00:35:04,020 --> 00:35:06,900
key rotation operation for the Target

902
00:35:06,900 --> 00:35:09,720
did that we would like to to compromise

903
00:35:09,720 --> 00:35:12,240
so again nothing stopping an anonymous

904
00:35:12,240 --> 00:35:15,060
attacker from compromising any identity

905
00:35:15,060 --> 00:35:16,680
in the network

906
00:35:16,680 --> 00:35:20,220
so it really is uh Our Roots that give

907
00:35:20,220 --> 00:35:22,260
us our identity

908
00:35:22,260 --> 00:35:24,180
um and of course

909
00:35:24,180 --> 00:35:26,640
um this issue was reported and fixed by

910
00:35:26,640 --> 00:35:28,140
the Indie team

911
00:35:28,140 --> 00:35:29,160
um I just want to bring to your

912
00:35:29,160 --> 00:35:31,680
attention the CVSs score of this issue

913
00:35:31,680 --> 00:35:34,260
as you can see it's a 10 out of 10. so

914
00:35:34,260 --> 00:35:36,180
on the one hand we have a very simple

915
00:35:36,180 --> 00:35:38,820
vulnerability however the impact on the

916
00:35:38,820 --> 00:35:41,160
actual network is devastating and this

917
00:35:41,160 --> 00:35:43,320
is why we see a Discord

918
00:35:43,320 --> 00:35:46,200
so now let's wrap things up uh with some

919
00:35:46,200 --> 00:35:47,880
thoughts on the future of this

920
00:35:47,880 --> 00:35:49,140
technology

921
00:35:49,140 --> 00:35:51,240
first of all let me tell you that I am

922
00:35:51,240 --> 00:35:53,940
rooting for this technology though uh

923
00:35:53,940 --> 00:35:55,980
the state of decentralized identity that

924
00:35:55,980 --> 00:35:58,859
we saw today seems kind of Bleak I do

925
00:35:58,859 --> 00:36:01,500
think that the future is right for it

926
00:36:01,500 --> 00:36:03,119
um but as you saw we do need some more

927
00:36:03,119 --> 00:36:05,160
security people working in this field so

928
00:36:05,160 --> 00:36:06,540
please come and join me don't leave me

929
00:36:06,540 --> 00:36:08,160
hanging

930
00:36:08,160 --> 00:36:11,280
um next in terms of the security of

931
00:36:11,280 --> 00:36:13,800
those systems decentralized identity

932
00:36:13,800 --> 00:36:16,800
systems and decentralized uh systems as

933
00:36:16,800 --> 00:36:19,320
a whole and blockchain systems they come

934
00:36:19,320 --> 00:36:21,300
with big promises like being completely

935
00:36:21,300 --> 00:36:24,180
decentralized and more secure and we

936
00:36:24,180 --> 00:36:26,160
know that this is not necessarily the

937
00:36:26,160 --> 00:36:29,640
case as with every new technology they

938
00:36:29,640 --> 00:36:32,220
bring new attack surfaces and present

939
00:36:32,220 --> 00:36:34,859
them to attackers as well as like we saw

940
00:36:34,859 --> 00:36:36,960
still remaining potentially remaining

941
00:36:36,960 --> 00:36:38,820
vulnerable to some of the old more

942
00:36:38,820 --> 00:36:41,099
traditional attack surfaces

943
00:36:41,099 --> 00:36:43,740
then I also think we need to reconsider

944
00:36:43,740 --> 00:36:46,800
our modules I really don't think that

945
00:36:46,800 --> 00:36:49,200
the tech giant like Microsoft should own

946
00:36:49,200 --> 00:36:51,720
a decentralized identity system if you

947
00:36:51,720 --> 00:36:54,960
want to see it getting popular and I'm

948
00:36:54,960 --> 00:36:57,420
also not sure that a permission model of

949
00:36:57,420 --> 00:37:00,119
a blockchain is what is suitable in this

950
00:37:00,119 --> 00:37:00,960
case

951
00:37:00,960 --> 00:37:03,480
then in terms of future work there has

952
00:37:03,480 --> 00:37:05,520
been some developments in the field uh

953
00:37:05,520 --> 00:37:07,920
since I last worked on that so I am

954
00:37:07,920 --> 00:37:09,240
planning to work on some new

955
00:37:09,240 --> 00:37:11,099
implementations of decentralized

956
00:37:11,099 --> 00:37:13,320
identity that came out recently and

957
00:37:13,320 --> 00:37:16,200
again please come and join me

958
00:37:16,200 --> 00:37:17,880
um so I'm going to leave you with this

959
00:37:17,880 --> 00:37:19,200
quote

960
00:37:19,200 --> 00:37:20,520
um

961
00:37:20,520 --> 00:37:22,920
this is my Twitter handle please talk to

962
00:37:22,920 --> 00:37:24,960
me about anything blockchain or

963
00:37:24,960 --> 00:37:28,440
decentralized identity related here is

964
00:37:28,440 --> 00:37:30,660
the blog of cyber collabs where we have

965
00:37:30,660 --> 00:37:33,240
a lot of information on what I discussed

966
00:37:33,240 --> 00:37:35,220
here today and also some stuff I left

967
00:37:35,220 --> 00:37:36,720
out

968
00:37:36,720 --> 00:37:38,099
um and like to thank you very much for

969
00:37:38,099 --> 00:37:40,400
joining this session

970
00:37:40,400 --> 00:37:43,520
thank you

971
00:37:44,940 --> 00:37:46,740
and now if you have any questions I

972
00:37:46,740 --> 00:37:48,599
think we we still have time

973
00:37:48,599 --> 00:37:51,440
yes we do

974
00:37:57,560 --> 00:38:00,359
uh hey thanks for the great talk

975
00:38:00,359 --> 00:38:02,579
um so I was wondering how did the update

976
00:38:02,579 --> 00:38:04,560
process went because when you have such

977
00:38:04,560 --> 00:38:06,780
a vulnerability the problem is that

978
00:38:06,780 --> 00:38:08,520
people need to update and if they've

979
00:38:08,520 --> 00:38:10,800
done this you can still own them yeah

980
00:38:10,800 --> 00:38:13,500
actually that's a good question and this

981
00:38:13,500 --> 00:38:15,359
is another advantage of a permission

982
00:38:15,359 --> 00:38:16,680
Network

983
00:38:16,680 --> 00:38:18,839
um I I talked today in the team and they

984
00:38:18,839 --> 00:38:21,300
were able to of course create a fix and

985
00:38:21,300 --> 00:38:23,280
before they disclosed it publicly they

986
00:38:23,280 --> 00:38:24,900
were able to coordinate with all of the

987
00:38:24,900 --> 00:38:26,880
network operators of the the major

988
00:38:26,880 --> 00:38:29,460
networks and to to make them fix the

989
00:38:29,460 --> 00:38:31,740
issue before uh making it public so

990
00:38:31,740 --> 00:38:33,839
again it's another advantage of the

991
00:38:33,839 --> 00:38:36,480
permission model and I hope that you

992
00:38:36,480 --> 00:38:38,160
could also see that if someone else

993
00:38:38,160 --> 00:38:39,839
exploited it because the transactions

994
00:38:39,839 --> 00:38:41,579
are public

995
00:38:41,579 --> 00:38:43,140
um are known at least think about this

996
00:38:43,140 --> 00:38:45,660
no this is not the request Handler is

997
00:38:45,660 --> 00:38:48,240
not handling the transaction oh okay in

998
00:38:48,240 --> 00:38:50,400
this case this is like an API just yeah

999
00:38:50,400 --> 00:38:52,700
exactly so that's not great

1000
00:38:52,700 --> 00:38:55,260
unless well some of the operators maybe

1001
00:38:55,260 --> 00:38:57,060
monitor the network and look yeah I

1002
00:38:57,060 --> 00:38:59,880
guess so they haven't uh told me that it

1003
00:38:59,880 --> 00:39:02,220
has been exploited in the wild but I

1004
00:39:02,220 --> 00:39:04,200
guess we can never really know okay

1005
00:39:04,200 --> 00:39:06,500
thanks

1006
00:39:08,700 --> 00:39:12,020
any more questions

1007
00:39:24,660 --> 00:39:27,140
all right

1008
00:39:29,720 --> 00:39:32,220
thanks for the talk

1009
00:39:32,220 --> 00:39:34,980
um have you checked by code ql didn't

1010
00:39:34,980 --> 00:39:37,440
find the sub process call yeah this is

1011
00:39:37,440 --> 00:39:39,000
another good question

1012
00:39:39,000 --> 00:39:39,960
um

1013
00:39:39,960 --> 00:39:41,579
actually it was my first time using

1014
00:39:41,579 --> 00:39:44,880
codeql with python and and it had quite

1015
00:39:44,880 --> 00:39:46,980
a lot of issues

1016
00:39:46,980 --> 00:39:49,200
um essentially the idea behind the the

1017
00:39:49,200 --> 00:39:51,060
queries that I wrote should have found

1018
00:39:51,060 --> 00:39:52,920
this issue but because of a lot of

1019
00:39:52,920 --> 00:39:54,540
issues with with python it just didn't

1020
00:39:54,540 --> 00:39:58,320
work so not not exactly sure

1021
00:39:58,320 --> 00:40:01,160
any more questions

1022
00:40:02,040 --> 00:40:04,790
all right thank you very much

1023
00:40:04,790 --> 00:40:08,770
[Music]

