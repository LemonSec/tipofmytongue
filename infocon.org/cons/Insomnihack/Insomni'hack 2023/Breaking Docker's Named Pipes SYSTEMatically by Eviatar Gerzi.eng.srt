1
00:00:04,019 --> 00:00:06,720
um thank you hi everyone

2
00:00:06,720 --> 00:00:08,580
good morning

3
00:00:08,580 --> 00:00:09,240
um

4
00:00:09,240 --> 00:00:13,259
I hope you have a good time last night

5
00:00:13,259 --> 00:00:15,900
um this is my first time in Insomniac

6
00:00:15,900 --> 00:00:17,699
and in Switzerland so I'm a little bit

7
00:00:17,699 --> 00:00:19,380
excited

8
00:00:19,380 --> 00:00:22,199
and by before I will start I just want

9
00:00:22,199 --> 00:00:24,900
to know how many of you use docker

10
00:00:24,900 --> 00:00:28,439
oh nice because like four years ago it

11
00:00:28,439 --> 00:00:30,660
wasn't like that and I'm with many of

12
00:00:30,660 --> 00:00:32,820
you use Docker for Windows

13
00:00:32,820 --> 00:00:34,860
okay this

14
00:00:34,860 --> 00:00:36,239
so

15
00:00:36,239 --> 00:00:38,340
one year ago something like this my

16
00:00:38,340 --> 00:00:41,280
manager asked me to do a research about

17
00:00:41,280 --> 00:00:42,840
Windows containers

18
00:00:42,840 --> 00:00:45,840
and I told him why no one is using it so

19
00:00:45,840 --> 00:00:47,820
he told me this is why we are paying you

20
00:00:47,820 --> 00:00:50,879
four so I did the research

21
00:00:50,879 --> 00:00:53,940
and in this research actually this

22
00:00:53,940 --> 00:00:56,699
wasn't the main research because I

23
00:00:56,699 --> 00:00:58,980
needed to use Docker to to run the

24
00:00:58,980 --> 00:01:00,360
windows containers

25
00:01:00,360 --> 00:01:03,300
and while I did so we found number of

26
00:01:03,300 --> 00:01:05,939
issues that I think you should be aware

27
00:01:05,939 --> 00:01:09,119
of when you're using Docker for Windows

28
00:01:09,119 --> 00:01:12,000
so uh a little bit about myself my name

29
00:01:12,000 --> 00:01:14,640
is I'm a security researcher at

30
00:01:14,640 --> 00:01:17,520
cyberluck before cyborg I worked on a

31
00:01:17,520 --> 00:01:20,700
mostly on Windows research and today my

32
00:01:20,700 --> 00:01:23,700
main focus is on devops security

33
00:01:23,700 --> 00:01:27,240
kubernetes containers things like that

34
00:01:27,240 --> 00:01:30,299
and today we are going to speak first

35
00:01:30,299 --> 00:01:31,920
thing a little bit about container

36
00:01:31,920 --> 00:01:35,340
Docker and name pipes

37
00:01:35,340 --> 00:01:39,060
then we will speak about some vulnerable

38
00:01:39,060 --> 00:01:42,240
undocumented API inside a specific name

39
00:01:42,240 --> 00:01:43,680
pipe

40
00:01:43,680 --> 00:01:45,960
later we will show the vulnerabilities

41
00:01:45,960 --> 00:01:47,280
that we found in the exploitation

42
00:01:47,280 --> 00:01:49,020
process

43
00:01:49,020 --> 00:01:51,720
and lastly we will do some summary of

44
00:01:51,720 --> 00:01:53,780
the things

45
00:01:53,780 --> 00:01:56,640
so let's start

46
00:01:56,640 --> 00:01:59,460
so before I don't know how many of you

47
00:01:59,460 --> 00:02:01,799
know but um

48
00:02:01,799 --> 00:02:03,840
um before like before explaining what is

49
00:02:03,840 --> 00:02:05,880
container I want to talk about the

50
00:02:05,880 --> 00:02:07,740
history container is not new thing it

51
00:02:07,740 --> 00:02:10,679
was in 1979 if you if you are familiar

52
00:02:10,679 --> 00:02:13,379
with the term chart

53
00:02:13,379 --> 00:02:16,200
so it was back then and over there as

54
00:02:16,200 --> 00:02:19,020
well couple of companies that made some

55
00:02:19,020 --> 00:02:21,680
implementation of containers

56
00:02:21,680 --> 00:02:25,739
and I think the Galaxy was more popular

57
00:02:25,739 --> 00:02:28,140
in 2008

58
00:02:28,140 --> 00:02:32,099
and in 2013 Docker came up with the nice

59
00:02:32,099 --> 00:02:35,280
system to run containers quite easily

60
00:02:35,280 --> 00:02:37,459
and in a friendly way

61
00:02:37,459 --> 00:02:41,519
and it became very popular

62
00:02:41,519 --> 00:02:46,200
mostly on Linux and in 2016 actually it

63
00:02:46,200 --> 00:02:49,440
was 2015 in ignite where Microsoft

64
00:02:49,440 --> 00:02:51,840
introduced the windows containers

65
00:02:51,840 --> 00:02:54,660
so today you can run Windows containers

66
00:02:54,660 --> 00:02:58,860
and Linux containers on a Windows system

67
00:02:58,860 --> 00:03:03,360
now what is a container so container is

68
00:03:03,360 --> 00:03:06,120
a lightweight portable self-contained

69
00:03:06,120 --> 00:03:08,280
environment for running a software

70
00:03:08,280 --> 00:03:09,540
application

71
00:03:09,540 --> 00:03:11,940
and it provides you a way to run the

72
00:03:11,940 --> 00:03:15,379
application and its dependencies

73
00:03:15,379 --> 00:03:19,040
and you can run it across different

74
00:03:19,040 --> 00:03:21,840
different environments without the need

75
00:03:21,840 --> 00:03:24,239
of a separate operative system or

76
00:03:24,239 --> 00:03:25,560
virtual machine

77
00:03:25,560 --> 00:03:28,140
the good thing on this is that you can

78
00:03:28,140 --> 00:03:31,260
it runs isolated so you can do

79
00:03:31,260 --> 00:03:33,659
you can do things inside the container

80
00:03:33,659 --> 00:03:36,000
but it won't affect the host

81
00:03:36,000 --> 00:03:39,360
and the way is isolated is because

82
00:03:39,360 --> 00:03:42,060
usually in Linux it uses c groups which

83
00:03:42,060 --> 00:03:44,819
is control groups and the namespace to

84
00:03:44,819 --> 00:03:47,040
make this separation

85
00:03:47,040 --> 00:03:50,159
it also runs quickly uh you don't it's

86
00:03:50,159 --> 00:03:51,959
not like a virtual machine that you need

87
00:03:51,959 --> 00:03:54,180
to run the kernel every time so you run

88
00:03:54,180 --> 00:03:57,060
you run it and it uses the kernel

89
00:03:57,060 --> 00:03:59,400
resources so this is the reason for it

90
00:03:59,400 --> 00:04:02,040
for white runs quickly and reliably

91
00:04:02,040 --> 00:04:03,360
because

92
00:04:03,360 --> 00:04:06,659
the container has all the dependencies

93
00:04:06,659 --> 00:04:08,519
and everything inside it so if you

94
00:04:08,519 --> 00:04:10,680
compile your application inside the

95
00:04:10,680 --> 00:04:12,439
container you can send it to your friend

96
00:04:12,439 --> 00:04:16,260
and it will you it will run probably in

97
00:04:16,260 --> 00:04:18,600
most of the cases without any issues

98
00:04:18,600 --> 00:04:22,079
without any like external liability need

99
00:04:22,079 --> 00:04:25,500
to it needs to install

100
00:04:25,500 --> 00:04:27,800
so

101
00:04:27,800 --> 00:04:31,979
like I said in 2015 Microsoft introduced

102
00:04:31,979 --> 00:04:35,720
the the incorporate with Docker to make

103
00:04:35,720 --> 00:04:39,540
Windows containers in Windows host

104
00:04:39,540 --> 00:04:42,180
and they call it a Docker desktop this

105
00:04:42,180 --> 00:04:45,840
is why uh when I start the research I

106
00:04:45,840 --> 00:04:47,400
needed to install Docker desktop and

107
00:04:47,400 --> 00:04:49,800
work with it and

108
00:04:49,800 --> 00:04:52,259
when I install it I noticed that there

109
00:04:52,259 --> 00:04:56,100
are a lot of processes in the system and

110
00:04:56,100 --> 00:04:58,979
two of them were very interesting the

111
00:04:58,979 --> 00:05:01,380
world was the Dockery which is the

112
00:05:01,380 --> 00:05:04,259
docker lemon also from Linux they only

113
00:05:04,259 --> 00:05:07,259
gave support to to Windows this is an

114
00:05:07,259 --> 00:05:08,520
open source

115
00:05:08,520 --> 00:05:10,560
but the new thing was a new service

116
00:05:10,560 --> 00:05:12,960
called Comm Docker service which is

117
00:05:12,960 --> 00:05:16,520
unique to Windows of course

118
00:05:19,500 --> 00:05:21,540
now if you look on the

119
00:05:21,540 --> 00:05:23,520
on the docker desktop architecture

120
00:05:23,520 --> 00:05:25,740
architecture in um

121
00:05:25,740 --> 00:05:28,500
in high level so you have the docker

122
00:05:28,500 --> 00:05:32,340
desktop which is uh the GUI application

123
00:05:32,340 --> 00:05:34,139
that you can run is a low privileged

124
00:05:34,139 --> 00:05:36,300
user and it communicates with the Comm

125
00:05:36,300 --> 00:05:39,120
Docker service which is a privileged

126
00:05:39,120 --> 00:05:40,919
service which communicate with local

127
00:05:40,919 --> 00:05:43,080
lemon and another privileged service and

128
00:05:43,080 --> 00:05:44,039
then it's

129
00:05:44,039 --> 00:05:46,800
create or run the container whatever

130
00:05:46,800 --> 00:05:51,479
and what I was interested in was the the

131
00:05:51,479 --> 00:05:53,280
communication between

132
00:05:53,280 --> 00:05:55,860
the docker desktop to the service

133
00:05:55,860 --> 00:05:58,280
because you have a low privileged

134
00:05:58,280 --> 00:06:00,419
application that communicates with the

135
00:06:00,419 --> 00:06:02,340
Comm Docker service and I think you

136
00:06:02,340 --> 00:06:03,900
already know how they communicate

137
00:06:03,900 --> 00:06:06,780
because I had the title so it's a name

138
00:06:06,780 --> 00:06:09,840
pipe which it's a very basic and simple

139
00:06:09,840 --> 00:06:12,300
technology that enables communication

140
00:06:12,300 --> 00:06:16,440
and share data between two processes and

141
00:06:16,440 --> 00:06:19,380
the term pipe is simply described the

142
00:06:19,380 --> 00:06:21,539
section of shared memory used between

143
00:06:21,539 --> 00:06:23,639
these two processes two or more

144
00:06:23,639 --> 00:06:26,160
processes so one can write to the pipe

145
00:06:26,160 --> 00:06:27,479
and the other can read

146
00:06:27,479 --> 00:06:31,020
things like that and in Docker you have

147
00:06:31,020 --> 00:06:34,380
lots of name pipes and they are using to

148
00:06:34,380 --> 00:06:37,039
communicate with so of course you can

149
00:06:37,039 --> 00:06:39,780
list all the name pipes on the system

150
00:06:39,780 --> 00:06:40,860
but

151
00:06:40,860 --> 00:06:45,120
I wasn't I I was I wanted to be sure

152
00:06:45,120 --> 00:06:47,160
that I see all the name pipes so I

153
00:06:47,160 --> 00:06:49,199
started with static analysis because

154
00:06:49,199 --> 00:06:51,660
this is a c shop application so it was

155
00:06:51,660 --> 00:06:54,120
easy to reverse and also a dynamic

156
00:06:54,120 --> 00:06:56,580
analysis with iron ninjas which if you

157
00:06:56,580 --> 00:06:59,039
are not familiar is a great tool for

158
00:06:59,039 --> 00:07:01,080
things like that

159
00:07:01,080 --> 00:07:05,100
so I saw all the name pipes and it was

160
00:07:05,100 --> 00:07:07,020
like something like approximately 40

161
00:07:07,020 --> 00:07:11,039
name pipes and this is the only part a

162
00:07:11,039 --> 00:07:13,139
small part of the list in the blog post

163
00:07:13,139 --> 00:07:16,800
that we published there is a called the

164
00:07:16,800 --> 00:07:17,819
full list

165
00:07:17,819 --> 00:07:20,220
and one of them was very interesting it

166
00:07:20,220 --> 00:07:21,300
was the

167
00:07:21,300 --> 00:07:23,580
the name pipe of the com Docker service

168
00:07:23,580 --> 00:07:26,699
which by the way there is another name

169
00:07:26,699 --> 00:07:29,340
pipe which they it's called the same

170
00:07:29,340 --> 00:07:32,400
name but with debug I didn't check it

171
00:07:32,400 --> 00:07:34,860
yet but um this is the one that was

172
00:07:34,860 --> 00:07:35,759
running

173
00:07:35,759 --> 00:07:38,099
and when we did this research I thought

174
00:07:38,099 --> 00:07:40,800
it also can be a good thing to make a

175
00:07:40,800 --> 00:07:43,440
a new tool called the pipe viewer that

176
00:07:43,440 --> 00:07:46,199
can lift me all the name pipes and can

177
00:07:46,199 --> 00:07:47,699
show me all the details from the name

178
00:07:47,699 --> 00:07:50,400
pipes by the way it's it's based on the

179
00:07:50,400 --> 00:07:53,819
work from James fosha so you can see all

180
00:07:53,819 --> 00:07:56,400
the permissions and we're planning to

181
00:07:56,400 --> 00:07:58,800
add more features to this tool but

182
00:07:58,800 --> 00:08:01,560
what you can see here is that

183
00:08:01,560 --> 00:08:04,500
we have the docker backend V2 name pipe

184
00:08:04,500 --> 00:08:06,599
and we there is read and write

185
00:08:06,599 --> 00:08:09,840
permissions to a group called Docker

186
00:08:09,840 --> 00:08:10,860
users

187
00:08:10,860 --> 00:08:12,599
now

188
00:08:12,599 --> 00:08:16,319
um this group is seems to be like a not

189
00:08:16,319 --> 00:08:18,740
privileged group but there is a problem

190
00:08:18,740 --> 00:08:20,580
with this group

191
00:08:20,580 --> 00:08:23,460
because it's indirectly it's privileged

192
00:08:23,460 --> 00:08:24,360
group

193
00:08:24,360 --> 00:08:26,220
and I will explain why

194
00:08:26,220 --> 00:08:28,979
so after we reported like five months I

195
00:08:28,979 --> 00:08:31,560
think after our reporting they published

196
00:08:31,560 --> 00:08:34,320
Docker published a documentation and

197
00:08:34,320 --> 00:08:36,240
they expanded the common Docker Service

198
00:08:36,240 --> 00:08:38,760
as a system run with system Privileges

199
00:08:38,760 --> 00:08:41,820
and where you have the name pipe and in

200
00:08:41,820 --> 00:08:44,099
the last row they mentioned that the

201
00:08:44,099 --> 00:08:46,020
name is protected and only the users

202
00:08:46,020 --> 00:08:47,700
that are part of the local users group

203
00:08:47,700 --> 00:08:50,519
have access to it

204
00:08:50,519 --> 00:08:53,279
so what is the problem

205
00:08:53,279 --> 00:08:55,560
um the problem is that okay you can't

206
00:08:55,560 --> 00:08:57,779
create privileged containers on Windows

207
00:08:57,779 --> 00:09:00,300
it's actually you can in kubernetes but

208
00:09:00,300 --> 00:09:02,399
it's something else but with Docker you

209
00:09:02,399 --> 00:09:05,940
can't do it it's not supported maybe yet

210
00:09:05,940 --> 00:09:08,220
so but you can do something else you can

211
00:09:08,220 --> 00:09:10,019
for example in this I have a low

212
00:09:10,019 --> 00:09:11,880
privilege user that tries to write to

213
00:09:11,880 --> 00:09:14,100
see Windows he can't do it but it can

214
00:09:14,100 --> 00:09:14,880
run

215
00:09:14,880 --> 00:09:17,459
um a container with Mount from the C

216
00:09:17,459 --> 00:09:18,779
windows

217
00:09:18,779 --> 00:09:20,880
to see Windows 2 inside the container

218
00:09:20,880 --> 00:09:22,980
and from inside the container it can

219
00:09:22,980 --> 00:09:25,860
write to the C Windows 2 which redirects

220
00:09:25,860 --> 00:09:29,760
it to the OST C windows so basically if

221
00:09:29,760 --> 00:09:31,019
you have if you can run Windows

222
00:09:31,019 --> 00:09:33,779
containers you have you can escalate

223
00:09:33,779 --> 00:09:36,720
your privilege to system by Design so

224
00:09:36,720 --> 00:09:39,420
this is the main problem and but don't

225
00:09:39,420 --> 00:09:40,320
worry

226
00:09:40,320 --> 00:09:42,360
um they have a solution

227
00:09:42,360 --> 00:09:44,279
um they have a flag no windows

228
00:09:44,279 --> 00:09:46,680
containers which means that you if you

229
00:09:46,680 --> 00:09:49,019
want to the event it just don't run

230
00:09:49,019 --> 00:09:51,600
Windows containers

231
00:09:51,600 --> 00:09:54,300
um so it's a bit of problem and by the

232
00:09:54,300 --> 00:09:55,800
way the vulnerabilities that we found

233
00:09:55,800 --> 00:09:58,140
don't care about this flag because we

234
00:09:58,140 --> 00:10:01,440
found vulnerabilities on the on the API

235
00:10:01,440 --> 00:10:04,560
and one will think that they checked in

236
00:10:04,560 --> 00:10:06,600
the WSL because you can run Windows

237
00:10:06,600 --> 00:10:08,279
containers in Windows and you can run

238
00:10:08,279 --> 00:10:10,980
Linux containers in Windows so when I

239
00:10:10,980 --> 00:10:12,500
connected to the docker desktop

240
00:10:12,500 --> 00:10:16,200
Distribution on the WSL I couldn't try

241
00:10:16,200 --> 00:10:20,700
to see Windows um directly so I'm not

242
00:10:20,700 --> 00:10:22,800
sure why because they could

243
00:10:22,800 --> 00:10:25,140
um prevent it like prevent the mounting

244
00:10:25,140 --> 00:10:27,540
from a low privilege user to the three

245
00:10:27,540 --> 00:10:29,000
windows

246
00:10:29,000 --> 00:10:32,399
so um if you still want to use Windows

247
00:10:32,399 --> 00:10:35,040
containers the respond was that it's

248
00:10:35,040 --> 00:10:37,380
outside of Dell control and they are not

249
00:10:37,380 --> 00:10:40,680
going to fix it so if you have um if you

250
00:10:40,680 --> 00:10:42,600
give someone

251
00:10:42,600 --> 00:10:45,600
um the permission to run Docker Windows

252
00:10:45,600 --> 00:10:48,839
containers so be aware of that

253
00:10:48,839 --> 00:10:53,519
and while this was a main issue

254
00:10:53,519 --> 00:10:55,800
I want to speak about other issues that

255
00:10:55,800 --> 00:10:58,140
we found Again One requirement that you

256
00:10:58,140 --> 00:11:00,000
need to be the in the docker user scope

257
00:11:00,000 --> 00:11:03,360
and now we will see how we can how we

258
00:11:03,360 --> 00:11:07,680
abused some of the apis

259
00:11:07,680 --> 00:11:09,240
so

260
00:11:09,240 --> 00:11:11,220
um the first thing that I started was

261
00:11:11,220 --> 00:11:14,459
going over the Chrome Docker service

262
00:11:14,459 --> 00:11:16,860
and I saw that it started the docker

263
00:11:16,860 --> 00:11:19,459
back-end V2 name pipe

264
00:11:19,459 --> 00:11:22,740
but the main of the code of the condo

265
00:11:22,740 --> 00:11:25,920
service wasn't too much interesting so I

266
00:11:25,920 --> 00:11:29,399
looked on its dependencies libraries I

267
00:11:29,399 --> 00:11:33,240
am dockerco and Docker backend

268
00:11:33,240 --> 00:11:35,160
and inside them

269
00:11:35,160 --> 00:11:38,519
I saw this function called resolve Piper

270
00:11:38,519 --> 00:11:42,180
sync which creates the docker back in V2

271
00:11:42,180 --> 00:11:46,079
as a name pipe HTTP client so which

272
00:11:46,079 --> 00:11:48,240
means that we have something like rest

273
00:11:48,240 --> 00:11:50,760
API

274
00:11:50,760 --> 00:11:52,980
okay

275
00:11:52,980 --> 00:11:57,300
and when we looked inside the more of

276
00:11:57,300 --> 00:12:00,480
the code in the docker back in the dll

277
00:12:00,480 --> 00:12:03,720
I saw all the all the routes

278
00:12:03,720 --> 00:12:05,940
and all the sub outs like in this

279
00:12:05,940 --> 00:12:08,339
example dnf and you have the fabout

280
00:12:08,339 --> 00:12:10,260
fresh offs

281
00:12:10,260 --> 00:12:12,180
and you can communicate with each other

282
00:12:12,180 --> 00:12:16,019
of them so I mapped I like to map things

283
00:12:16,019 --> 00:12:17,880
so I mapped all the

284
00:12:17,880 --> 00:12:19,860
all the apis this is only the smallest

285
00:12:19,860 --> 00:12:22,079
they have the second part will be later

286
00:12:22,079 --> 00:12:24,779
in the presentation but in the in the

287
00:12:24,779 --> 00:12:27,300
blog we have the full one so when I

288
00:12:27,300 --> 00:12:28,980
looked the first thing that I noticed

289
00:12:28,980 --> 00:12:31,980
was that this function that called move

290
00:12:31,980 --> 00:12:33,959
data folder that you can move file from

291
00:12:33,959 --> 00:12:36,480
all directory to new directory with

292
00:12:36,480 --> 00:12:38,700
privileged you know system privileges so

293
00:12:38,700 --> 00:12:41,899
it doesn't go into a good place

294
00:12:41,899 --> 00:12:44,820
so the thing that the first thing that

295
00:12:44,820 --> 00:12:46,740
you want to do is just move files right

296
00:12:46,740 --> 00:12:48,899
to check it so

297
00:12:48,899 --> 00:12:51,680
this was the first um

298
00:12:51,680 --> 00:12:55,740
vulnerability and by the way it's really

299
00:12:55,740 --> 00:12:57,300
nice that you have also in the code how

300
00:12:57,300 --> 00:12:58,800
to call the function so you don't need

301
00:12:58,800 --> 00:13:01,980
to work out you can just take the the

302
00:13:01,980 --> 00:13:05,360
classes and use it in your exploit

303
00:13:05,360 --> 00:13:09,540
and then I looked on the Move That

304
00:13:09,540 --> 00:13:12,959
folder function on the logic and

305
00:13:12,959 --> 00:13:15,300
you it requires you to use the docker

306
00:13:15,300 --> 00:13:19,320
desktop vhdx file and later it used it

307
00:13:19,320 --> 00:13:22,260
doing the file dot move but I will save

308
00:13:22,260 --> 00:13:25,620
you these times and go for the logic

309
00:13:25,620 --> 00:13:28,139
so the first thing is that the whole

310
00:13:28,139 --> 00:13:30,420
directory and the subdirectory if any

311
00:13:30,420 --> 00:13:32,639
must have a file named local

312
00:13:32,639 --> 00:13:35,459
desktop.vhdx

313
00:13:35,459 --> 00:13:37,560
second thing is that from the root

314
00:13:37,560 --> 00:13:40,740
directory only a file named Docker

315
00:13:40,740 --> 00:13:43,800
desktop vhdx will be moved but from the

316
00:13:43,800 --> 00:13:46,200
subdirectories all the files will be

317
00:13:46,200 --> 00:13:50,040
moved and this is a small diagram of how

318
00:13:50,040 --> 00:13:51,120
it works

319
00:13:51,120 --> 00:13:53,940
if you will notice the the a DOT text

320
00:13:53,940 --> 00:13:56,880
wasn't moved to the like it I'm calling

321
00:13:56,880 --> 00:14:00,180
the move that follow from ABC to XYZ

322
00:14:00,180 --> 00:14:03,420
but only the this a the text wasn't

323
00:14:03,420 --> 00:14:04,620
moved

324
00:14:04,620 --> 00:14:07,440
and we control the content so the next

325
00:14:07,440 --> 00:14:09,660
part was of course to try to move it to

326
00:14:09,660 --> 00:14:12,120
C windows and it moved without any

327
00:14:12,120 --> 00:14:15,480
problem not just that that we have full

328
00:14:15,480 --> 00:14:18,300
permissions on the file delete your name

329
00:14:18,300 --> 00:14:20,639
and by the way if you're interesting why

330
00:14:20,639 --> 00:14:22,740
we had permission and why didn't inherit

331
00:14:22,740 --> 00:14:24,180
the permissions from the three windows

332
00:14:24,180 --> 00:14:27,360
it's because the Microsoft they have

333
00:14:27,360 --> 00:14:29,459
some exception when you move files when

334
00:14:29,459 --> 00:14:31,500
you move an object to a different folder

335
00:14:31,500 --> 00:14:33,300
on the same volume so the original

336
00:14:33,300 --> 00:14:35,519
permissions retained and you can read

337
00:14:35,519 --> 00:14:37,200
more about it

338
00:14:37,200 --> 00:14:39,720
so we have a file that we can move to a

339
00:14:39,720 --> 00:14:43,740
protected place so my plan was make some

340
00:14:43,740 --> 00:14:46,500
dll logic with the announce spoiler dll

341
00:14:46,500 --> 00:14:49,320
hijack ual API

342
00:14:49,320 --> 00:14:52,380
and so the only thing that I needed to

343
00:14:52,380 --> 00:14:54,480
do is to change the name of course but

344
00:14:54,480 --> 00:14:56,880
you can change the name inside the

345
00:14:56,880 --> 00:15:00,600
protected path because of the Windows

346
00:15:00,600 --> 00:15:02,399
File protection

347
00:15:02,399 --> 00:15:06,139
so after thinking about it a little bit

348
00:15:06,139 --> 00:15:09,000
if you are familiar with another by the

349
00:15:09,000 --> 00:15:10,579
way it's amazing work of James social

350
00:15:10,579 --> 00:15:13,680
stream link which still work in Windows

351
00:15:13,680 --> 00:15:17,820
11. so you can use this technique to

352
00:15:17,820 --> 00:15:20,880
change the name and how it work is like

353
00:15:20,880 --> 00:15:23,399
that I'm calling the move data folder

354
00:15:23,399 --> 00:15:26,579
for ABC to some temp jumper and the ABC

355
00:15:26,579 --> 00:15:29,720
contains my malicious dll file in the

356
00:15:29,720 --> 00:15:32,160
wrapped with the name of Docker desktop

357
00:15:32,160 --> 00:15:33,600
vhdx

358
00:15:33,600 --> 00:15:34,980
then

359
00:15:34,980 --> 00:15:37,680
when I will call it it will go to the

360
00:15:37,680 --> 00:15:39,839
jumper which is the junction folder

361
00:15:39,839 --> 00:15:42,480
which will point to an object manager

362
00:15:42,480 --> 00:15:46,079
Sim link which will eventually redirect

363
00:15:46,079 --> 00:15:49,139
it to the to the name that I want

364
00:15:49,139 --> 00:15:50,459
so

365
00:15:50,459 --> 00:15:53,100
great we have the we can we control the

366
00:15:53,100 --> 00:15:55,860
name the content the place everything so

367
00:15:55,860 --> 00:15:57,420
we only need now to restart the computer

368
00:15:57,420 --> 00:16:00,079
this is what it required from the

369
00:16:00,079 --> 00:16:04,740
spoiler to turn on the dlli jack

370
00:16:04,740 --> 00:16:06,720
um yes but

371
00:16:06,720 --> 00:16:08,760
um my question was if we can trigger it

372
00:16:08,760 --> 00:16:11,279
without a restart because it's not nice

373
00:16:11,279 --> 00:16:13,079
for the PLC and auto starters so the

374
00:16:13,079 --> 00:16:14,300
computer it's not

375
00:16:14,300 --> 00:16:18,600
so there is a great article by um Alex

376
00:16:18,600 --> 00:16:20,279
UNESCO and Jordan field I really

377
00:16:20,279 --> 00:16:22,139
recommend it to read it

378
00:16:22,139 --> 00:16:24,899
basically talks about the idea that low

379
00:16:24,899 --> 00:16:26,339
privilege user

380
00:16:26,339 --> 00:16:30,839
can start some Services which run with

381
00:16:30,839 --> 00:16:34,320
network service Privileges and they

382
00:16:34,320 --> 00:16:36,660
showed how they can escalate the

383
00:16:36,660 --> 00:16:38,459
Privileges from network service to

384
00:16:38,459 --> 00:16:39,860
system

385
00:16:39,860 --> 00:16:45,959
so I used the article to do it and this

386
00:16:45,959 --> 00:16:47,639
is what we

387
00:16:47,639 --> 00:16:51,079
not not like that

388
00:16:51,180 --> 00:16:53,820
okay so this is what this is the full

389
00:16:53,820 --> 00:16:56,040
exploit first thing I'm running on

390
00:16:56,040 --> 00:16:58,199
Windows 11 I'm checking

391
00:16:58,199 --> 00:17:00,899
um the update it's uh full update adding

392
00:17:00,899 --> 00:17:01,920
the again

393
00:17:01,920 --> 00:17:04,380
yeah the most updated version and that

394
00:17:04,380 --> 00:17:08,419
time it was a couple of months ago

395
00:17:09,359 --> 00:17:12,419
I will start the CMD

396
00:17:12,419 --> 00:17:14,099
I will show that I don't have

397
00:17:14,099 --> 00:17:16,799
permissions I love privilege user I will

398
00:17:16,799 --> 00:17:19,140
try to write to see Windows just if you

399
00:17:19,140 --> 00:17:21,959
don't believe me yeah access denied

400
00:17:21,959 --> 00:17:25,679
and then I will go to my exploit folder

401
00:17:25,679 --> 00:17:28,260
and run the POC and

402
00:17:28,260 --> 00:17:31,260
it's just just doing everything that I

403
00:17:31,260 --> 00:17:32,940
spoke about the same link and everything

404
00:17:32,940 --> 00:17:36,120
and in the end it triggered the dlli

405
00:17:36,120 --> 00:17:38,360
jack

406
00:17:40,740 --> 00:17:44,340
and then we get the shell and we get the

407
00:17:44,340 --> 00:17:46,799
system so it was really

408
00:17:46,799 --> 00:17:50,780
um like nice to do it

409
00:17:51,120 --> 00:17:54,539
I also verified again right to the today

410
00:17:54,539 --> 00:17:57,120
just to make sure that you see it works

411
00:17:57,120 --> 00:17:59,340
so anyway this was the first

412
00:17:59,340 --> 00:18:01,260
vulnerability

413
00:18:01,260 --> 00:18:03,299
and the second one

414
00:18:03,299 --> 00:18:08,700
was about a object named them on Json

415
00:18:08,700 --> 00:18:12,600
and this is another interesting thing we

416
00:18:12,600 --> 00:18:13,980
have two methods

417
00:18:13,980 --> 00:18:17,280
start and stop that we can start and

418
00:18:17,280 --> 00:18:19,919
stop the docker demon service and not

419
00:18:19,919 --> 00:18:21,840
only that we can start the service with

420
00:18:21,840 --> 00:18:24,120
the configuration that we want

421
00:18:24,120 --> 00:18:28,559
so if you go to the start you function

422
00:18:28,559 --> 00:18:30,539
you can see that you have a an object

423
00:18:30,539 --> 00:18:34,020
named them on Json and basically this

424
00:18:34,020 --> 00:18:36,900
demonjection is a string of the a

425
00:18:36,900 --> 00:18:38,700
configuration

426
00:18:38,700 --> 00:18:41,880
for the docker Daemon and then it called

427
00:18:41,880 --> 00:18:43,559
for a function called the rewrite

428
00:18:43,559 --> 00:18:45,240
options which writes the configuration

429
00:18:45,240 --> 00:18:49,799
to a file and later it add the file to

430
00:18:49,799 --> 00:18:52,140
the config file switch and then you have

431
00:18:52,140 --> 00:18:55,380
the document runs with demon.json file

432
00:18:55,380 --> 00:18:57,120
which contains the configuration which

433
00:18:57,120 --> 00:19:01,020
we entered inside the demon Json object

434
00:19:01,020 --> 00:19:02,160
so

435
00:19:02,160 --> 00:19:03,720
um let's see there were two

436
00:19:03,720 --> 00:19:05,460
vulnerabilities inside this demon Json

437
00:19:05,460 --> 00:19:07,020
that we found

438
00:19:07,020 --> 00:19:09,299
the first one is the data root which

439
00:19:09,299 --> 00:19:11,460
allows us to get a bitterly file

440
00:19:11,460 --> 00:19:14,220
override on any file and this is the

441
00:19:14,220 --> 00:19:15,840
list of all the fields that you have and

442
00:19:15,840 --> 00:19:18,900
I you go over all the fields and there

443
00:19:18,900 --> 00:19:21,720
were some strange things there that I

444
00:19:21,720 --> 00:19:23,100
played it but I will show only the

445
00:19:23,100 --> 00:19:25,580
interesting one

446
00:19:25,760 --> 00:19:29,580
is a path that saves all the

447
00:19:29,580 --> 00:19:32,760
configuration files of docker in the

448
00:19:32,760 --> 00:19:34,860
place that you will tell him

449
00:19:34,860 --> 00:19:39,419
so I made a Json string called the field

450
00:19:39,419 --> 00:19:42,419
at the root and then I call the start

451
00:19:42,419 --> 00:19:44,880
API say that about it create the that

452
00:19:44,880 --> 00:19:47,720
old folder but I didn't have access

453
00:19:47,720 --> 00:19:50,220
because the conductor service created

454
00:19:50,220 --> 00:19:53,700
the folder with system permission it

455
00:19:53,700 --> 00:19:56,720
wasn't used to for someone to do it

456
00:19:56,720 --> 00:19:59,940
for a low privileges user to do it but

457
00:19:59,940 --> 00:20:01,620
actually there is a way to bypass it

458
00:20:01,620 --> 00:20:04,020
because if you get it first manually and

459
00:20:04,020 --> 00:20:07,320
then call it and then it's okay so then

460
00:20:07,320 --> 00:20:10,200
you have access now after you go over

461
00:20:10,200 --> 00:20:12,720
all the files there was an interesting

462
00:20:12,720 --> 00:20:15,419
file that called the local KV DB and

463
00:20:15,419 --> 00:20:18,360
again first thing that pops up to my man

464
00:20:18,360 --> 00:20:22,740
privilege as a service rights file uh

465
00:20:22,740 --> 00:20:26,460
Sim link okay let's try again so I

466
00:20:26,460 --> 00:20:28,380
delete the file only the folder with the

467
00:20:28,380 --> 00:20:29,220
file

468
00:20:29,220 --> 00:20:31,980
call again the start API it created now

469
00:20:31,980 --> 00:20:34,320
this is a talk to attack race condition

470
00:20:34,320 --> 00:20:36,960
because when it creates the folder I

471
00:20:36,960 --> 00:20:39,480
need to delete the folder and create it

472
00:20:39,480 --> 00:20:41,460
as a junction folder before it creates

473
00:20:41,460 --> 00:20:44,760
the local KV file and it took me like

474
00:20:44,760 --> 00:20:46,679
when I run the exploit it takes like

475
00:20:46,679 --> 00:20:49,380
three four tries to do it but it works

476
00:20:49,380 --> 00:20:52,740
all the time and then again uh object

477
00:20:52,740 --> 00:20:54,900
manager same link and then I can write

478
00:20:54,900 --> 00:20:56,940
to any place I won't show a demo because

479
00:20:56,940 --> 00:20:59,640
uh if I think it's straightforward we

480
00:20:59,640 --> 00:21:02,100
have all the Demos in the blog post but

481
00:21:02,100 --> 00:21:04,280
I want to talk on the second interesting

482
00:21:04,280 --> 00:21:07,140
vulnerability with which is the pit file

483
00:21:07,140 --> 00:21:09,120
vulnerability

484
00:21:09,120 --> 00:21:11,460
which allowed us to write any file and

485
00:21:11,460 --> 00:21:13,020
delete any file

486
00:21:13,020 --> 00:21:16,440
again pit file is a in Docker it's the

487
00:21:16,440 --> 00:21:18,780
way that the docker demon stores the

488
00:21:18,780 --> 00:21:22,380
process Aid inside a file

489
00:21:22,380 --> 00:21:24,419
which I don't think it was intended for

490
00:21:24,419 --> 00:21:26,820
Windows because it this is how they're

491
00:21:26,820 --> 00:21:30,000
doing doing it in Linux but it's still a

492
00:21:30,000 --> 00:21:32,039
bit because the docker lemon is like

493
00:21:32,039 --> 00:21:34,500
course platform so it still works only

494
00:21:34,500 --> 00:21:38,880
on also in Windows and again I I just

495
00:21:38,880 --> 00:21:41,640
put the the name of the file call it

496
00:21:41,640 --> 00:21:44,760
create a file and if I stop the service

497
00:21:44,760 --> 00:21:47,940
it delete the file so okay so we have

498
00:21:47,940 --> 00:21:49,799
the vulnerability you can see it with

499
00:21:49,799 --> 00:21:50,820
Pokemon

500
00:21:50,820 --> 00:21:54,000
okay so we have we have a write and

501
00:21:54,000 --> 00:21:56,220
delete can we do something else with it

502
00:21:56,220 --> 00:21:59,700
so there is a way that you can leverage

503
00:21:59,700 --> 00:22:02,460
and delete file to full privilege

504
00:22:02,460 --> 00:22:06,179
escalation it's not 100 of the time but

505
00:22:06,179 --> 00:22:08,580
in some condition it will work and this

506
00:22:08,580 --> 00:22:10,799
is based of an amazing another amazing

507
00:22:10,799 --> 00:22:14,159
article again recommended to read from

508
00:22:14,159 --> 00:22:17,179
the zero day initiative

509
00:22:17,340 --> 00:22:21,000
um did they show how to do it and there

510
00:22:21,000 --> 00:22:22,919
are a couple of requirements

511
00:22:22,919 --> 00:22:24,659
the first thing is that the vulnerable

512
00:22:24,659 --> 00:22:25,679
process

513
00:22:25,679 --> 00:22:27,600
I should call delete valet or delete

514
00:22:27,600 --> 00:22:28,799
file w

515
00:22:28,799 --> 00:22:31,320
the second thing is the ability to

516
00:22:31,320 --> 00:22:33,720
delete a name an empty folder called C

517
00:22:33,720 --> 00:22:36,600
config.msi

518
00:22:36,600 --> 00:22:39,480
and lastly the way you delete folder

519
00:22:39,480 --> 00:22:42,299
with delete file you use a stream called

520
00:22:42,299 --> 00:22:45,000
index allocation and then you can delete

521
00:22:45,000 --> 00:22:46,400
the folder

522
00:22:46,400 --> 00:22:50,940
and so I checked what if we have all the

523
00:22:50,940 --> 00:22:53,760
requirements and the first thing I saw

524
00:22:53,760 --> 00:22:56,640
that we have the we are using the docker

525
00:22:56,640 --> 00:23:00,539
demon is using the delete file w

526
00:23:00,539 --> 00:23:03,960
and the idea was to now just to delete

527
00:23:03,960 --> 00:23:06,659
the folder and then use the technique

528
00:23:06,659 --> 00:23:09,659
that they explained in the article

529
00:23:09,659 --> 00:23:12,620
so I call the start

530
00:23:12,620 --> 00:23:15,299
and start for the docker lemon with this

531
00:23:15,299 --> 00:23:18,659
speed file but I had a problem because

532
00:23:18,659 --> 00:23:20,940
it tried to create a folder which is

533
00:23:20,940 --> 00:23:22,200
already exist

534
00:23:22,200 --> 00:23:25,799
and if you think how to bypass it yeah

535
00:23:25,799 --> 00:23:28,940
you create right again same link

536
00:23:28,940 --> 00:23:33,059
Microsoft should fix it so we call the

537
00:23:33,059 --> 00:23:35,340
start API for a different file something

538
00:23:35,340 --> 00:23:38,880
like temp to text we don't care about it

539
00:23:38,880 --> 00:23:41,159
and then we delete it and create it as a

540
00:23:41,159 --> 00:23:44,220
junction folder and then it will uh and

541
00:23:44,220 --> 00:23:46,440
and call the stop API because the stop

542
00:23:46,440 --> 00:23:48,840
will delete the file and the stop will

543
00:23:48,840 --> 00:23:52,380
be redirected to the to the folder

544
00:23:52,380 --> 00:23:54,659
and by the way I it's important to

545
00:23:54,659 --> 00:23:56,760
mention if you will check this config

546
00:23:56,760 --> 00:23:58,340
MSI file

547
00:23:58,340 --> 00:24:00,179
usually

548
00:24:00,179 --> 00:24:03,360
it might like it might be not empty in

549
00:24:03,360 --> 00:24:06,720
most of the cases there are some

550
00:24:06,720 --> 00:24:07,559
um

551
00:24:07,559 --> 00:24:09,960
I don't I won't say random files but

552
00:24:09,960 --> 00:24:11,940
there are some I'll be scripts inside it

553
00:24:11,940 --> 00:24:13,440
I tried to boot faucet because I have

554
00:24:13,440 --> 00:24:15,600
delete 45 so I needed to guess the name

555
00:24:15,600 --> 00:24:18,120
but it was not efficient enough if you

556
00:24:18,120 --> 00:24:21,059
find a way so it's it's great

557
00:24:21,059 --> 00:24:24,240
and but in Windows 11 when in the flash

558
00:24:24,240 --> 00:24:26,220
Windows 11 you don't even have the

559
00:24:26,220 --> 00:24:30,600
folder so it was easier and anyway if

560
00:24:30,600 --> 00:24:32,820
you delete this file you create a config

561
00:24:32,820 --> 00:24:36,840
file and put your malicious Arab script

562
00:24:36,840 --> 00:24:38,880
and then you use the different form by

563
00:24:38,880 --> 00:24:40,500
the way from the again from the article

564
00:24:40,500 --> 00:24:43,559
so you can read more about it they put a

565
00:24:43,559 --> 00:24:46,620
malicious hid dll and then they use the

566
00:24:46,620 --> 00:24:48,600
on-screen keyboard to switch to secure

567
00:24:48,600 --> 00:24:52,020
desktop and

568
00:24:52,260 --> 00:24:55,380
this is the second one that from a

569
00:24:55,380 --> 00:24:59,280
delete file you can leverage it to uh

570
00:24:59,280 --> 00:25:01,740
fully privilegation again I'm checking

571
00:25:01,740 --> 00:25:02,580
the

572
00:25:02,580 --> 00:25:04,740
windows 11.

573
00:25:04,740 --> 00:25:07,940
in the updated version

574
00:25:10,320 --> 00:25:12,960
don't worry this is the last demo

575
00:25:12,960 --> 00:25:15,179
and again Omi

576
00:25:15,179 --> 00:25:17,280
not privilege I'm trying to delete the

577
00:25:17,280 --> 00:25:19,200
config MSI I can't

578
00:25:19,200 --> 00:25:22,740
access denied by the way okay I made

579
00:25:22,740 --> 00:25:25,440
this because in Windows 10 11 you don't

580
00:25:25,440 --> 00:25:28,020
have the folder so it was easier but I

581
00:25:28,020 --> 00:25:31,080
wanted to make it more challenging so I

582
00:25:31,080 --> 00:25:34,679
created the one with the access denied

583
00:25:34,679 --> 00:25:36,659
I just showed you that if I open the

584
00:25:36,659 --> 00:25:38,760
keyboard nothing happened

585
00:25:38,760 --> 00:25:41,400
again going to my exploit

586
00:25:41,400 --> 00:25:42,960
folder

587
00:25:42,960 --> 00:25:44,640
and exploit

588
00:25:44,640 --> 00:25:47,400
it started service and create the same

589
00:25:47,400 --> 00:25:50,940
link and later it will delete it and use

590
00:25:50,940 --> 00:25:54,299
the exploit based on the zero day the

591
00:25:54,299 --> 00:25:55,860
initiative

592
00:25:55,860 --> 00:25:58,020
POC

593
00:25:58,020 --> 00:26:00,620
and after that it should

594
00:26:00,620 --> 00:26:05,239
put the hid dll

595
00:26:05,360 --> 00:26:09,120
they said yeah to put to start the osk

596
00:26:09,120 --> 00:26:11,460
from the secure desktop and then you

597
00:26:11,460 --> 00:26:14,400
have again system CMD so this is another

598
00:26:14,400 --> 00:26:16,679
way that you can leverage it from the

599
00:26:16,679 --> 00:26:18,900
delete file to fully

600
00:26:18,900 --> 00:26:20,640
privilege escalation

601
00:26:20,640 --> 00:26:22,200
and

602
00:26:22,200 --> 00:26:25,080
lastly I will talk about

603
00:26:25,080 --> 00:26:27,840
um this is a quick one because this is

604
00:26:27,840 --> 00:26:31,020
again the same issues but we're looking

605
00:26:31,020 --> 00:26:34,679
in I will talk about them also so there

606
00:26:34,679 --> 00:26:36,600
is another controller called hyper-v

607
00:26:36,600 --> 00:26:38,520
controller

608
00:26:38,520 --> 00:26:39,360
um

609
00:26:39,360 --> 00:26:42,059
it has a function called create and

610
00:26:42,059 --> 00:26:43,200
destroy

611
00:26:43,200 --> 00:26:46,140
so the first one the create one you can

612
00:26:46,140 --> 00:26:50,640
use it to arbitrary file override

613
00:26:50,640 --> 00:26:52,620
and this is how it looks

614
00:26:52,620 --> 00:26:56,600
and it uses it calls a great or config

615
00:26:56,600 --> 00:26:59,580
configure sync function

616
00:26:59,580 --> 00:27:02,880
which receives a settings object and

617
00:27:02,880 --> 00:27:04,500
this settings object

618
00:27:04,500 --> 00:27:06,600
um if you will notice there is a like

619
00:27:06,600 --> 00:27:09,720
the data folder so you we control the

620
00:27:09,720 --> 00:27:12,179
data folder but they add the docker

621
00:27:12,179 --> 00:27:16,260
desktop vhdx file to the to the path so

622
00:27:16,260 --> 00:27:18,299
if you will just run it like this like

623
00:27:18,299 --> 00:27:20,580
with the data folder of C Windows it

624
00:27:20,580 --> 00:27:22,740
will create the windows Docker desktop

625
00:27:22,740 --> 00:27:25,380
vhdx but if you you will use the same

626
00:27:25,380 --> 00:27:27,480
link you can again bypass it like it

627
00:27:27,480 --> 00:27:30,000
shows I won't show it again

628
00:27:30,000 --> 00:27:32,700
and the last thing was the delete

629
00:27:32,700 --> 00:27:35,460
another delete file that we found that

630
00:27:35,460 --> 00:27:38,159
again same thing same to the folder but

631
00:27:38,159 --> 00:27:40,020
now they are according to the destroy

632
00:27:40,020 --> 00:27:44,340
function and then we I started to delete

633
00:27:44,340 --> 00:27:47,039
any file that I want with the with the

634
00:27:47,039 --> 00:27:50,400
distance with Docker desktop vhdx and if

635
00:27:50,400 --> 00:27:52,679
I use again same link I can delete any

636
00:27:52,679 --> 00:27:54,900
file that I want I didn't check if I can

637
00:27:54,900 --> 00:27:58,679
do a like I did before with the to make

638
00:27:58,679 --> 00:28:00,600
it to leverage it because I was too lazy

639
00:28:00,600 --> 00:28:04,380
for that but I suppose it's possible

640
00:28:04,380 --> 00:28:06,000
so

641
00:28:06,000 --> 00:28:09,480
let's um summarize this

642
00:28:09,480 --> 00:28:10,500
um

643
00:28:10,500 --> 00:28:13,140
so Dr Windows containers allow you to

644
00:28:13,140 --> 00:28:15,720
get system Privileges and it won't going

645
00:28:15,720 --> 00:28:17,340
to fix I'm not talking about the

646
00:28:17,340 --> 00:28:18,720
vulnerabilities that I found I'm talking

647
00:28:18,720 --> 00:28:22,039
about the main issue that you can mount

648
00:28:22,039 --> 00:28:25,799
a protected path to a inside a container

649
00:28:25,799 --> 00:28:28,200
then right to it you can use the flag no

650
00:28:28,200 --> 00:28:29,900
windows containers but

651
00:28:29,900 --> 00:28:32,400
it then you can turn Windows containers

652
00:28:32,400 --> 00:28:34,620
so what is the point

653
00:28:34,620 --> 00:28:37,320
um your there is a link to the pipe your

654
00:28:37,320 --> 00:28:39,419
tool that we wrote so we can use it and

655
00:28:39,419 --> 00:28:41,880
play with this uh we already released

656
00:28:41,880 --> 00:28:44,580
the first blog we are planning to

657
00:28:44,580 --> 00:28:46,860
release the second one

658
00:28:46,860 --> 00:28:50,520
I hope in the last of this month uh like

659
00:28:50,520 --> 00:28:52,980
on in April sorry

660
00:28:52,980 --> 00:28:55,559
and these are the list of the CVS that

661
00:28:55,559 --> 00:28:56,820
we found

662
00:28:56,820 --> 00:28:59,220
these are the references for the fact

663
00:28:59,220 --> 00:29:01,080
cell uh

664
00:29:01,080 --> 00:29:05,120
um article by adenine Alex again

665
00:29:05,120 --> 00:29:07,980
zero day initiative and sibling attacks

666
00:29:07,980 --> 00:29:10,279
that you can learn more about it

667
00:29:10,279 --> 00:29:11,880
and

668
00:29:11,880 --> 00:29:15,600
um that's it so if you have um question

669
00:29:15,600 --> 00:29:17,880
or things like that feel free to ask now

670
00:29:17,880 --> 00:29:21,299
if you are sure you can later

671
00:29:21,299 --> 00:29:25,520
okay thank you

672
00:29:29,520 --> 00:29:32,340
thank you so we are going to open the Q

673
00:29:32,340 --> 00:29:36,179
a session so if there is any question

674
00:29:36,179 --> 00:29:38,960
yes

675
00:29:48,059 --> 00:29:50,100
good morning everyone for first of all

676
00:29:50,100 --> 00:29:51,480
thanks for the great presentation it was

677
00:29:51,480 --> 00:29:53,460
really interesting so um I have a

678
00:29:53,460 --> 00:29:55,919
question regarding the name pipes yeah

679
00:29:55,919 --> 00:29:58,260
did I understand it correctly the to

680
00:29:58,260 --> 00:30:00,059
interact with the pipes Docker is

681
00:30:00,059 --> 00:30:02,520
offering some kind of rest API did I get

682
00:30:02,520 --> 00:30:06,379
that right yes is this a common practice

683
00:30:06,419 --> 00:30:07,200
um

684
00:30:07,200 --> 00:30:09,120
actually it's my first time that I see

685
00:30:09,120 --> 00:30:11,460
someone using the name pipe as a rest

686
00:30:11,460 --> 00:30:13,260
API

687
00:30:13,260 --> 00:30:15,179
um so I'm not sure this is the best

688
00:30:15,179 --> 00:30:17,480
practice

689
00:30:18,299 --> 00:30:21,240
um yeah like it's a problem because when

690
00:30:21,240 --> 00:30:22,320
you saw it

691
00:30:22,320 --> 00:30:24,360
there are a lot of things that you can

692
00:30:24,360 --> 00:30:27,539
do and play with lots of apis so this

693
00:30:27,539 --> 00:30:29,520
the attack surface is so big when you

694
00:30:29,520 --> 00:30:31,799
will think these things so I'm not sure

695
00:30:31,799 --> 00:30:33,799
it's a good thing

696
00:30:33,799 --> 00:30:36,600
uh I don't know

697
00:30:36,600 --> 00:30:40,020
um what better way can be to do it

698
00:30:40,020 --> 00:30:43,080
but uh yeah when I said it was like like

699
00:30:43,080 --> 00:30:46,380
a playground I can wow so many things to

700
00:30:46,380 --> 00:30:49,260
play with but it's

701
00:30:49,260 --> 00:30:51,659
um they they're the group that they

702
00:30:51,659 --> 00:30:53,460
mentioned the docker use of scope so you

703
00:30:53,460 --> 00:30:55,679
can say okay so if you are inside this

704
00:30:55,679 --> 00:30:58,980
group like uh it's like and maybe a

705
00:30:58,980 --> 00:31:00,840
privileged group because indirectly it's

706
00:31:00,840 --> 00:31:02,279
a privilege group

707
00:31:02,279 --> 00:31:05,279
but then you have a problem because you

708
00:31:05,279 --> 00:31:07,260
still want to give your developers to be

709
00:31:07,260 --> 00:31:10,380
able to use contain containers but they

710
00:31:10,380 --> 00:31:11,940
don't maybe you don't want them to be

711
00:31:11,940 --> 00:31:13,860
administrative so

712
00:31:13,860 --> 00:31:17,520
uh it's make things messy yeah so for

713
00:31:17,520 --> 00:31:19,500
your question I'm I'm not sure it's the

714
00:31:19,500 --> 00:31:21,899
best best practice so it's neither best

715
00:31:21,899 --> 00:31:24,179
practice nor common right yeah okay

716
00:31:24,179 --> 00:31:27,000
common I didn't see it uh but again I'm

717
00:31:27,000 --> 00:31:29,039
not I didn't at least someone use it

718
00:31:29,039 --> 00:31:31,320
like this I have the name type address

719
00:31:31,320 --> 00:31:34,080
API it's my first time that I saw it and

720
00:31:34,080 --> 00:31:36,539
this API was just used internally by the

721
00:31:36,539 --> 00:31:39,480
docker service itself right yeah it was

722
00:31:39,480 --> 00:31:42,419
used by yeah by the Comm Docker service

723
00:31:42,419 --> 00:31:45,360
and the GUI was communicate with it I

724
00:31:45,360 --> 00:31:48,299
didn't check how it uses the API

725
00:31:48,299 --> 00:31:51,360
um with all this features

726
00:31:51,360 --> 00:31:55,080
by uh but uh I I saw that I can call it

727
00:31:55,080 --> 00:31:58,140
directly so it's for me it was okay by

728
00:31:58,140 --> 00:31:59,760
the way there are a lot of other name

729
00:31:59,760 --> 00:32:02,460
pipes but the only one this one was

730
00:32:02,460 --> 00:32:05,220
interesting because you had an option to

731
00:32:05,220 --> 00:32:08,159
affect a privileged service

732
00:32:08,159 --> 00:32:08,940
um

733
00:32:08,940 --> 00:32:10,080
yeah

734
00:32:10,080 --> 00:32:11,880
thanks a lot yeah

735
00:32:11,880 --> 00:32:14,240
you're welcome

736
00:32:17,050 --> 00:32:20,119
[Music]

737
00:32:21,179 --> 00:32:23,960
other question

738
00:32:33,360 --> 00:32:35,580
well so if there is no other question

739
00:32:35,580 --> 00:32:38,460
thank you very much for this

740
00:32:38,460 --> 00:32:39,490
presentation

741
00:32:39,490 --> 00:32:42,710
[Applause]

