1
00:00:03,540 --> 00:00:06,899
thank you hi friends thanks for coming I

2
00:00:06,899 --> 00:00:08,940
know it's early due to today's uh to

3
00:00:08,940 --> 00:00:12,300
last night's concerns for us whoever

4
00:00:12,300 --> 00:00:14,160
um so welcome my name is Christoph I

5
00:00:14,160 --> 00:00:15,839
work at data dog focusing on cloud

6
00:00:15,839 --> 00:00:18,300
security and open source to fix and this

7
00:00:18,300 --> 00:00:20,460
is Vlad hi I'm Vlad I'm a Staff engineer

8
00:00:20,460 --> 00:00:22,380
at data log I'm very involved in the

9
00:00:22,380 --> 00:00:24,600
node.js community and follow me on

10
00:00:24,600 --> 00:00:27,960
Twitter if you haven't Fleet Twitter yet

11
00:00:27,960 --> 00:00:29,640
thank you uh so everything we're going

12
00:00:29,640 --> 00:00:31,140
to discuss is also the work of Ellen

13
00:00:31,140 --> 00:00:33,000
Wong she was an intern at data dog and

14
00:00:33,000 --> 00:00:34,380
she's not here today she's based in the

15
00:00:34,380 --> 00:00:37,500
US but she was part of this as well so

16
00:00:37,500 --> 00:00:38,940
today we have a legendary we're going to

17
00:00:38,940 --> 00:00:41,399
start with uh modeling a bit what

18
00:00:41,399 --> 00:00:43,200
typically manifest package attacks look

19
00:00:43,200 --> 00:00:45,660
like try to see how we can detect them

20
00:00:45,660 --> 00:00:47,520
then we're going to talk about a new

21
00:00:47,520 --> 00:00:48,960
pencil tool that we've released a few

22
00:00:48,960 --> 00:00:51,480
months ago called the guard dog we're

23
00:00:51,480 --> 00:00:52,980
going to see how we applied that to try

24
00:00:52,980 --> 00:00:55,620
to scan all the new packages on pipei by

25
00:00:55,620 --> 00:00:57,420
the way Pi Pi means the python package

26
00:00:57,420 --> 00:01:00,360
index in case and finally we're going to

27
00:01:00,360 --> 00:01:01,680
share some of the findings that we have

28
00:01:01,680 --> 00:01:04,199
and some ideas for future research if

29
00:01:04,199 --> 00:01:05,880
you are interested by that

30
00:01:05,880 --> 00:01:07,740
so Vlad can you maybe work it a little

31
00:01:07,740 --> 00:01:09,600
bit through what man issues package

32
00:01:09,600 --> 00:01:13,140
looks like in 2023 yeah sure also it was

33
00:01:13,140 --> 00:01:14,520
maintaining the slider already online

34
00:01:14,520 --> 00:01:16,020
and public and I will give you a link

35
00:01:16,020 --> 00:01:18,960
for them so we asked an AI because

36
00:01:18,960 --> 00:01:20,700
that's what you do now what a malicious

37
00:01:20,700 --> 00:01:22,619
package is and we got this pretty nice

38
00:01:22,619 --> 00:01:24,600
picture and I think it's it's good

39
00:01:24,600 --> 00:01:26,759
because it looks shiny but it's scary at

40
00:01:26,759 --> 00:01:28,259
the same time and you're not sure how

41
00:01:28,259 --> 00:01:30,780
scary it is so let's see how scary these

42
00:01:30,780 --> 00:01:32,700
packages are

43
00:01:32,700 --> 00:01:35,280
um let's model software as we play train

44
00:01:35,280 --> 00:01:37,619
attacks so if you want to inject malware

45
00:01:37,619 --> 00:01:39,540
into someone's code base you need to

46
00:01:39,540 --> 00:01:41,340
find a way to help them install it right

47
00:01:41,340 --> 00:01:43,500
so you need an installation Vector there

48
00:01:43,500 --> 00:01:44,880
are multiple of them you will see

49
00:01:44,880 --> 00:01:46,799
everything in details in the next slides

50
00:01:46,799 --> 00:01:49,320
not in too much details I promise then

51
00:01:49,320 --> 00:01:51,540
you need the code to be executed you'll

52
00:01:51,540 --> 00:01:53,399
need your malicious code to be started

53
00:01:53,399 --> 00:01:55,619
one way or another and you need your

54
00:01:55,619 --> 00:01:58,500
code to run we will see the difference

55
00:01:58,500 --> 00:02:00,840
between those two next slide and you

56
00:02:00,840 --> 00:02:02,700
have a goal the goal of your malware is

57
00:02:02,700 --> 00:02:04,860
to steal something change something do

58
00:02:04,860 --> 00:02:07,140
something so let's take the example of

59
00:02:07,140 --> 00:02:10,800
the requests at package so for those who

60
00:02:10,800 --> 00:02:12,000
are not familiar with the python

61
00:02:12,000 --> 00:02:14,459
ecosystem requests is a very very

62
00:02:14,459 --> 00:02:17,459
popular packages package that enable you

63
00:02:17,459 --> 00:02:19,560
to do HTTP requests and you've got the

64
00:02:19,560 --> 00:02:22,560
request X package that's definitely a

65
00:02:22,560 --> 00:02:25,440
typo squat because the S is close to the

66
00:02:25,440 --> 00:02:27,780
X on most keyboard and if you have fat

67
00:02:27,780 --> 00:02:30,060
or Sticky Fingers you end up typing an

68
00:02:30,060 --> 00:02:31,319
extra letter

69
00:02:31,319 --> 00:02:34,400
well let's check what's inside request X

70
00:02:34,400 --> 00:02:38,459
it overrides the install method that

71
00:02:38,459 --> 00:02:40,739
executed when you pip install the thing

72
00:02:40,739 --> 00:02:43,620
so when you clip install request X it

73
00:02:43,620 --> 00:02:45,239
will run the arbitrary command name

74
00:02:45,239 --> 00:02:48,739
execute what's inside execute well

75
00:02:48,739 --> 00:02:51,300
conveniently they decided to tell us

76
00:02:51,300 --> 00:02:53,040
kind of what they were doing that we

77
00:02:53,040 --> 00:02:55,560
write remote access.py on your disk

78
00:02:55,560 --> 00:02:56,819
which is real because it's not a remote

79
00:02:56,819 --> 00:02:59,340
access script and execute it in a sub

80
00:02:59,340 --> 00:03:01,500
process that's what we have at the

81
00:03:01,500 --> 00:03:03,300
bottom with the process the P open

82
00:03:03,300 --> 00:03:06,000
remote access.py

83
00:03:06,000 --> 00:03:08,340
so what's in remote access.py you ask

84
00:03:08,340 --> 00:03:10,800
that's a very legitimate question well

85
00:03:10,800 --> 00:03:13,560
it will actually steal the cookies for

86
00:03:13,560 --> 00:03:15,659
Roblox which is an online game in

87
00:03:15,659 --> 00:03:17,879
browser that some people use for

88
00:03:17,879 --> 00:03:21,120
crypto stuff of course always and it

89
00:03:21,120 --> 00:03:22,680
will steal your cookies and paste that

90
00:03:22,680 --> 00:03:24,900
into a Discord server so what we can see

91
00:03:24,900 --> 00:03:26,879
is that it's a very very modern attack

92
00:03:26,879 --> 00:03:28,920
stealing cookies for an online game and

93
00:03:28,920 --> 00:03:31,080
posting on Discord the hacker is very

94
00:03:31,080 --> 00:03:33,840
hype but at the same time we see that

95
00:03:33,840 --> 00:03:36,680
their goal is stealing your Roblox

96
00:03:36,680 --> 00:03:39,900
credentials so because we are security

97
00:03:39,900 --> 00:03:42,000
researchers we want to build matrixes

98
00:03:42,000 --> 00:03:44,760
here is a matrix where you can have some

99
00:03:44,760 --> 00:03:46,560
of the things we have seen in terms of

100
00:03:46,560 --> 00:03:48,659
vectors of installation execution of

101
00:03:48,659 --> 00:03:50,700
code and objectives and if we are

102
00:03:50,700 --> 00:03:53,940
looking at the request X package you see

103
00:03:53,940 --> 00:03:56,459
that it follows a very standard path in

104
00:03:56,459 --> 00:03:58,860
that situation

105
00:03:58,860 --> 00:04:01,200
um so How likely are you to download

106
00:04:01,200 --> 00:04:03,959
malicious packages that probably the

107
00:04:03,959 --> 00:04:05,459
topic of the talk but it helps to

108
00:04:05,459 --> 00:04:09,000
mention that you can buy legitimate type

109
00:04:09,000 --> 00:04:10,860
I maintainers account on the dark web

110
00:04:10,860 --> 00:04:14,220
please don't do that uh but they're

111
00:04:14,220 --> 00:04:16,139
available to purchase and there have

112
00:04:16,139 --> 00:04:18,000
been also some phishing attempts to

113
00:04:18,000 --> 00:04:20,339
steal people credentials on pipei to be

114
00:04:20,339 --> 00:04:22,919
able to publish package on their behalf

115
00:04:22,919 --> 00:04:24,900
so you will get a very serious email

116
00:04:24,900 --> 00:04:27,240
telling you that Google requires you to

117
00:04:27,240 --> 00:04:30,240
do something and you can get to a clone

118
00:04:30,240 --> 00:04:31,860
of PayPal

119
00:04:31,860 --> 00:04:34,320
sorry to a clone of paper where you will

120
00:04:34,320 --> 00:04:36,720
put your username and password you can

121
00:04:36,720 --> 00:04:38,400
know that if you use a password manager

122
00:04:38,400 --> 00:04:40,320
the password manager will not detect

123
00:04:40,320 --> 00:04:42,479
this website as legitimate PayPal the

124
00:04:42,479 --> 00:04:45,360
style that is on site.google.com might

125
00:04:45,360 --> 00:04:49,139
be the reason but uh how do we detect

126
00:04:49,139 --> 00:04:51,780
this malicious package so that's more

127
00:04:51,780 --> 00:04:54,060
for how we model this so now a few

128
00:04:54,060 --> 00:04:56,040
things about what we want to detect if

129
00:04:56,040 --> 00:04:57,960
you know this pyramid sorry for that but

130
00:04:57,960 --> 00:04:59,460
basically the point is that we are

131
00:04:59,460 --> 00:05:00,960
trying to detect more behaviors and

132
00:05:00,960 --> 00:05:03,540
tools as opposed to detecting hashes and

133
00:05:03,540 --> 00:05:05,639
IP addresses because typically for an

134
00:05:05,639 --> 00:05:07,380
attacker an IP or hash is going to

135
00:05:07,380 --> 00:05:09,060
change very quickly whereas if you want

136
00:05:09,060 --> 00:05:10,800
to detect behaviors and attack

137
00:05:10,800 --> 00:05:13,320
techniques is going to be much valuable

138
00:05:13,320 --> 00:05:15,000
in the long term so we are going to

139
00:05:15,000 --> 00:05:17,699
focus on behaviors and tools more

140
00:05:17,699 --> 00:05:19,440
precisely if we look at the example we

141
00:05:19,440 --> 00:05:20,940
had before there are a few quick ways

142
00:05:20,940 --> 00:05:22,979
that we can look at so obviously the

143
00:05:22,979 --> 00:05:24,960
request X package it has a keyboard

144
00:05:24,960 --> 00:05:26,340
these terms maybe a little understanding

145
00:05:26,340 --> 00:05:28,380
distance very close to a popular one we

146
00:05:28,380 --> 00:05:30,000
see it has an empty description on Wi-Fi

147
00:05:30,000 --> 00:05:32,220
which by itself is not many shoes but it

148
00:05:32,220 --> 00:05:34,979
can be marked as suspicious we see there

149
00:05:34,979 --> 00:05:36,419
is this command running automatically

150
00:05:36,419 --> 00:05:38,820
when you do a beeping style there is

151
00:05:38,820 --> 00:05:40,440
also writing something to disk and

152
00:05:40,440 --> 00:05:42,479
executing that and finally reading your

153
00:05:42,479 --> 00:05:44,160
cookies which most likely python

154
00:05:44,160 --> 00:05:45,960
packages should not do in general so

155
00:05:45,960 --> 00:05:47,580
that's a few opportunities for

156
00:05:47,580 --> 00:05:49,500
detections that's probably what in terms

157
00:05:49,500 --> 00:05:51,240
of how so we can do static versus

158
00:05:51,240 --> 00:05:53,940
dynamic anesthesis uh let's say we want

159
00:05:53,940 --> 00:05:56,400
to show when something is downloading a

160
00:05:56,400 --> 00:05:58,500
python code and then sorry binary and

161
00:05:58,500 --> 00:06:00,360
then executing it so we have two ways

162
00:06:00,360 --> 00:06:01,800
right with static analysis you're going

163
00:06:01,800 --> 00:06:03,900
to look at sequences of source code uh

164
00:06:03,900 --> 00:06:05,280
you're going to say whenever I get to

165
00:06:05,280 --> 00:06:07,380
request.get followed by your file right

166
00:06:07,380 --> 00:06:09,840
and then subprocess the pure pen I want

167
00:06:09,840 --> 00:06:11,280
to mention that

168
00:06:11,280 --> 00:06:13,979
um so here the good thing is that it's

169
00:06:13,979 --> 00:06:15,660
very easy to write if your able to write

170
00:06:15,660 --> 00:06:18,180
source code you can write that it's more

171
00:06:18,180 --> 00:06:20,400
sensitive to uh to First positive and to

172
00:06:20,400 --> 00:06:22,979
obfuscation and if you want to write

173
00:06:22,979 --> 00:06:24,240
something good you need to write very

174
00:06:24,240 --> 00:06:26,400
wide rules so here we have request.get

175
00:06:26,400 --> 00:06:28,740
but we'd also need to do request.part

176
00:06:28,740 --> 00:06:32,960
that first url.open Etc

177
00:06:35,240 --> 00:06:38,100
things like that it's harder to write

178
00:06:38,100 --> 00:06:40,139
slower you have to run untrusted code

179
00:06:40,139 --> 00:06:42,479
which typically isn't great but it's

180
00:06:42,479 --> 00:06:44,280
literally agnostic so you just need to

181
00:06:44,280 --> 00:06:46,199
say I want an HTTP request you don't

182
00:06:46,199 --> 00:06:47,759
have to write it for specific languages

183
00:06:47,759 --> 00:06:50,880
or libraries so that's maybe like the

184
00:06:50,880 --> 00:06:53,400
two the two ways that we can do it

185
00:06:53,400 --> 00:06:55,319
um so in the case of a tool that we are

186
00:06:55,319 --> 00:06:56,940
going to present which shows only static

187
00:06:56,940 --> 00:06:58,979
analysis for a few reasons but mostly

188
00:06:58,979 --> 00:07:00,660
because it's easier to write the rules

189
00:07:00,660 --> 00:07:03,000
uh it's faster to run so for developers

190
00:07:03,000 --> 00:07:04,919
it's actually easier to use and you

191
00:07:04,919 --> 00:07:06,720
don't have to deal with how do I run

192
00:07:06,720 --> 00:07:09,180
Android code on my machine figure

193
00:07:09,180 --> 00:07:11,039
so before we come up with the solution

194
00:07:11,039 --> 00:07:12,479
let's try to define a bit the problem

195
00:07:12,479 --> 00:07:14,580
space so we want to look at both the

196
00:07:14,580 --> 00:07:16,800
package metadata and the package source

197
00:07:16,800 --> 00:07:18,720
code because as we saw in the metadata

198
00:07:18,720 --> 00:07:20,880
we have some interesting hints as well

199
00:07:20,880 --> 00:07:22,919
we want something that is easy to use it

200
00:07:22,919 --> 00:07:24,360
should be just a command I don't want to

201
00:07:24,360 --> 00:07:26,580
have to run any VM or container or a

202
00:07:26,580 --> 00:07:29,160
cloud infrastructure the result should

203
00:07:29,160 --> 00:07:30,900
be open source obviously you don't want

204
00:07:30,900 --> 00:07:32,880
to to run some kind of black box if you

205
00:07:32,880 --> 00:07:35,220
don't know how it works and we want it

206
00:07:35,220 --> 00:07:37,259
to be CI friendly so as a developer it's

207
00:07:37,259 --> 00:07:39,419
good if you can run it inside CI every

208
00:07:39,419 --> 00:07:41,759
every week and get an alert if you see

209
00:07:41,759 --> 00:07:43,319
that one of your dependencies might have

210
00:07:43,319 --> 00:07:45,840
been compromised or Ismail issues

211
00:07:45,840 --> 00:07:47,819
so I still be stable from a very nice

212
00:07:47,819 --> 00:07:50,419
paper written by um

213
00:07:50,419 --> 00:07:53,759
and several people from chain guard they

214
00:07:53,759 --> 00:07:54,960
basically list all the available

215
00:07:54,960 --> 00:07:57,539
solutions they know as of September 2022

216
00:07:57,539 --> 00:08:00,120
to detect malicious python packages if

217
00:08:00,120 --> 00:08:02,280
we filter that on things that publish

218
00:08:02,280 --> 00:08:04,740
the rule set we have this so we have

219
00:08:04,740 --> 00:08:06,840
bounded format which is a fork of bondit

220
00:08:06,840 --> 00:08:09,840
a python a static analysis tool it's a

221
00:08:09,840 --> 00:08:11,880
fairly Niche option it has like four

222
00:08:11,880 --> 00:08:13,919
stars I think on GitHub and it's not

223
00:08:13,919 --> 00:08:16,860
very maintained as far as now OSS Gadget

224
00:08:16,860 --> 00:08:19,080
is published by Microsoft it only works

225
00:08:19,080 --> 00:08:20,759
on the package source card and it works

226
00:08:20,759 --> 00:08:23,280
with regexes so it's good but not

227
00:08:23,280 --> 00:08:25,020
perfect and they say themselves very

228
00:08:25,020 --> 00:08:27,660
important to false positives

229
00:08:27,660 --> 00:08:29,460
um they also have a set of malware

230
00:08:29,460 --> 00:08:31,319
checks when you upload the package they

231
00:08:31,319 --> 00:08:32,520
are running some rules to make sure it's

232
00:08:32,520 --> 00:08:34,860
not malware but it's very minimal

233
00:08:34,860 --> 00:08:36,839
because obviously they cannot afford

234
00:08:36,839 --> 00:08:38,760
first positives and it's only meant to

235
00:08:38,760 --> 00:08:40,380
be used in the context of Wi-Fi so you

236
00:08:40,380 --> 00:08:42,120
cannot convert on your machine and

237
00:08:42,120 --> 00:08:43,979
finally there is title guard which is uh

238
00:08:43,979 --> 00:08:45,480
more meant to detect type of squatting

239
00:08:45,480 --> 00:08:47,760
so it's a very specific set of issues

240
00:08:47,760 --> 00:08:50,220
and there's also this this project a

241
00:08:50,220 --> 00:08:52,140
package that was published around the

242
00:08:52,140 --> 00:08:54,420
same time of guard dog so it's a PhD

243
00:08:54,420 --> 00:08:55,800
project from someone and they are doing

244
00:08:55,800 --> 00:08:58,260
both static and dynamic analysis I think

245
00:08:58,260 --> 00:08:59,459
it's a very interesting project to

246
00:08:59,459 --> 00:09:01,440
follow right now it seems that it's

247
00:09:01,440 --> 00:09:03,540
pretty uh prone to false positives we

248
00:09:03,540 --> 00:09:04,920
tried to run it on a few packages

249
00:09:04,920 --> 00:09:06,839
popular ones and every time you said

250
00:09:06,839 --> 00:09:08,519
that there are malicious so I think it's

251
00:09:08,519 --> 00:09:10,860
a very interesting approach maybe um for

252
00:09:10,860 --> 00:09:11,940
the future and it's going to be

253
00:09:11,940 --> 00:09:13,860
complementary with the tool that we

254
00:09:13,860 --> 00:09:16,339
present here

255
00:09:18,560 --> 00:09:21,899
is to rebuilt a data dog internally it's

256
00:09:21,899 --> 00:09:23,459
fully open source and self-contained

257
00:09:23,459 --> 00:09:25,560
which means you install worddog you get

258
00:09:25,560 --> 00:09:27,060
cuando you don't have to update a

259
00:09:27,060 --> 00:09:29,640
database you don't have to install uh

260
00:09:29,640 --> 00:09:31,320
external differences you pip install

261
00:09:31,320 --> 00:09:33,899
guard dog you get guard dog it's reports

262
00:09:33,899 --> 00:09:37,040
Pi Pi and npm starting uh

263
00:09:37,040 --> 00:09:40,320
January so two months ago npm is the

264
00:09:40,320 --> 00:09:42,720
JavaScript repository where you can find

265
00:09:42,720 --> 00:09:44,160
all the JavaScript front-end and

266
00:09:44,160 --> 00:09:46,200
back-end malware the other big

267
00:09:46,200 --> 00:09:48,300
advantages of guard dog include having a

268
00:09:48,300 --> 00:09:50,100
very cool logo we have stickers you can

269
00:09:50,100 --> 00:09:53,160
ask for them and please go Star the

270
00:09:53,160 --> 00:09:54,959
GitHub repo we need that as social

271
00:09:54,959 --> 00:09:58,339
validation EcoBoost

272
00:09:59,899 --> 00:10:02,220
as we mentioned we are interested into

273
00:10:02,220 --> 00:10:03,899
knowing what happens at source code

274
00:10:03,899 --> 00:10:06,540
level to find malicious patterns but

275
00:10:06,540 --> 00:10:09,300
also metadata as Kristoff said there are

276
00:10:09,300 --> 00:10:10,980
a lot of hints when you look at the

277
00:10:10,980 --> 00:10:12,959
metadata of a package to know if it's

278
00:10:12,959 --> 00:10:15,720
trustworthy so Guild Oaks compiled these

279
00:10:15,720 --> 00:10:18,180
species of information and make it a

280
00:10:18,180 --> 00:10:20,580
wall to give you a report so for the

281
00:10:20,580 --> 00:10:22,260
source code analysis we are relying on

282
00:10:22,260 --> 00:10:24,720
something called same rep same rep is an

283
00:10:24,720 --> 00:10:26,880
amazing open source static code analysis

284
00:10:26,880 --> 00:10:29,220
tool for the French people are there

285
00:10:29,220 --> 00:10:32,100
it's written in camel it's traditionally

286
00:10:32,100 --> 00:10:34,620
used to find vulnerabilities if you

287
00:10:34,620 --> 00:10:38,100
check the rules written by as a company

288
00:10:38,100 --> 00:10:40,320
behind Sam grab they will focus on

289
00:10:40,320 --> 00:10:43,320
finding vulnerabilities in code base but

290
00:10:43,320 --> 00:10:45,600
we can tweak it we can write our own

291
00:10:45,600 --> 00:10:48,240
rules to find malicious code instead of

292
00:10:48,240 --> 00:10:50,700
vulnerable code and it provides change

293
00:10:50,700 --> 00:10:53,160
tracking capabilities which is brilliant

294
00:10:53,160 --> 00:10:54,720
when you want to detect malware

295
00:10:54,720 --> 00:10:57,779
understand what code does last but not

296
00:10:57,779 --> 00:11:00,000
least it's transparency package to squad

297
00:11:00,000 --> 00:11:01,560
dog meaning that your peep install guard

298
00:11:01,560 --> 00:11:03,660
dog and Sam grab is installed all by

299
00:11:03,660 --> 00:11:06,120
Magic on your machine

300
00:11:06,120 --> 00:11:09,000
so I think so one of the big advantage

301
00:11:09,000 --> 00:11:10,860
of guardo is that when you're like me

302
00:11:10,860 --> 00:11:12,000
and you don't know how to write Craig

303
00:11:12,000 --> 00:11:14,220
axes you don't need to write trick axis

304
00:11:14,220 --> 00:11:17,640
because this is a rule file for same

305
00:11:17,640 --> 00:11:20,060
grab

306
00:11:20,060 --> 00:11:23,399
where you can just Define patterns in a

307
00:11:23,399 --> 00:11:25,800
very friendly way very maintainable way

308
00:11:25,800 --> 00:11:28,980
so in that case what we are saying is we

309
00:11:28,980 --> 00:11:31,560
want to find all the sub process the P

310
00:11:31,560 --> 00:11:35,700
open and all the os.system core in files

311
00:11:35,700 --> 00:11:38,519
that are named setup.py and it's as

312
00:11:38,519 --> 00:11:40,560
straightforward as is

313
00:11:40,560 --> 00:11:42,540
I've seen people floating when we told

314
00:11:42,540 --> 00:11:44,940
about time tracking but is that so what

315
00:11:44,940 --> 00:11:47,459
dog works so let's let's take a look you

316
00:11:47,459 --> 00:11:49,980
can Define what's called sources which

317
00:11:49,980 --> 00:11:53,100
means I am looking for code that gets

318
00:11:53,100 --> 00:11:55,680
out of one of this function that matches

319
00:11:55,680 --> 00:11:58,620
pattern and this will be my sources my

320
00:11:58,620 --> 00:12:01,800
inputs and I will track these inputs and

321
00:12:01,800 --> 00:12:05,100
their changes until it gets to a sink in

322
00:12:05,100 --> 00:12:07,019
our case here we want to track

323
00:12:07,019 --> 00:12:10,079
everything that gets out of os dot get

324
00:12:10,079 --> 00:12:13,500
ends to get environment variables and to

325
00:12:13,500 --> 00:12:15,839
see if they are perched on the network

326
00:12:15,839 --> 00:12:18,720
with requests not post not request X

327
00:12:18,720 --> 00:12:22,440
request dot post uh that will that will

328
00:12:22,440 --> 00:12:24,120
tell us that someone is stealing

329
00:12:24,120 --> 00:12:25,980
environment variables

330
00:12:25,980 --> 00:12:28,320
let's take an example here we've got

331
00:12:28,320 --> 00:12:31,500
credentials getting out of os dot get of

332
00:12:31,500 --> 00:12:33,720
AWS secreted access key probably

333
00:12:33,720 --> 00:12:36,540
something uh we need to keep secret and

334
00:12:36,540 --> 00:12:38,880
we put it on the network with a post

335
00:12:38,880 --> 00:12:42,779
request well uh same rep will be smart

336
00:12:42,779 --> 00:12:44,940
enough to detect the link between the

337
00:12:44,940 --> 00:12:47,519
two but uh same group is even smarter

338
00:12:47,519 --> 00:12:50,220
than that is that it can it can taint

339
00:12:50,220 --> 00:12:53,279
track transformation on the source to

340
00:12:53,279 --> 00:12:56,940
the sink so here we've got the variable

341
00:12:56,940 --> 00:13:00,300
credit that is marked as tainted we base

342
00:13:00,300 --> 00:13:03,420
64 in code it so same graph will say

343
00:13:03,420 --> 00:13:07,260
that encoded is also tainted then we

344
00:13:07,260 --> 00:13:09,959
concatenate it with a string and same

345
00:13:09,959 --> 00:13:12,660
grab will know that it is also tainted

346
00:13:12,660 --> 00:13:15,060
so at the end of the day we are able to

347
00:13:15,060 --> 00:13:17,579
know what goes into the thing and that

348
00:13:17,579 --> 00:13:19,800
it came from one of the sources we

349
00:13:19,800 --> 00:13:21,480
defined

350
00:13:21,480 --> 00:13:23,880
regarding metadata they are written

351
00:13:23,880 --> 00:13:26,160
written in Titan so you can if you can

352
00:13:26,160 --> 00:13:27,779
read python you can write you can read

353
00:13:27,779 --> 00:13:29,639
them and update them they are directly

354
00:13:29,639 --> 00:13:32,579
into gladox code base which is open

355
00:13:32,579 --> 00:13:34,920
source and public on GitHub and it's

356
00:13:34,920 --> 00:13:36,839
based on pipei's metadata or npm

357
00:13:36,839 --> 00:13:39,240
metadata for the npm support and it will

358
00:13:39,240 --> 00:13:41,459
highlight issues in package health or

359
00:13:41,459 --> 00:13:44,160
potential installation vectors for

360
00:13:44,160 --> 00:13:46,500
instance we detect something that has no

361
00:13:46,500 --> 00:13:48,720
description on Pi Pi we detect something

362
00:13:48,720 --> 00:13:50,579
that has a name too close to a very

363
00:13:50,579 --> 00:13:53,220
popular package to find potential type

364
00:13:53,220 --> 00:13:55,380
of squats

365
00:13:55,380 --> 00:13:58,980
so yeah it renders properly if you're in

366
00:13:58,980 --> 00:14:00,959
guadag it's really straightforward you

367
00:14:00,959 --> 00:14:03,660
do quad dog pipei scan and the name of a

368
00:14:03,660 --> 00:14:05,820
package and it will tell you a guard dog

369
00:14:05,820 --> 00:14:09,240
findings for this one so you can't run

370
00:14:09,240 --> 00:14:10,500
this command anymore because the

371
00:14:10,500 --> 00:14:12,180
malicious package has been taken down

372
00:14:12,180 --> 00:14:15,600
from the piper repository but run it on

373
00:14:15,600 --> 00:14:18,899
any currently known 404 packages and you

374
00:14:18,899 --> 00:14:21,180
will find a report with this kind of

375
00:14:21,180 --> 00:14:23,339
things it's very straightforward to use

376
00:14:23,339 --> 00:14:25,500
even for developers we've got a very

377
00:14:25,500 --> 00:14:27,300
high command that you can run against

378
00:14:27,300 --> 00:14:30,240
the requirements the txt meaning it

379
00:14:30,240 --> 00:14:32,339
integrates directly into the tooling

380
00:14:32,339 --> 00:14:34,320
developers use today

381
00:14:34,320 --> 00:14:37,139
and it plays very well with GitHub

382
00:14:37,139 --> 00:14:39,180
because if you put it in a GitHub action

383
00:14:39,180 --> 00:14:41,880
the report will be consumed by GitHub

384
00:14:41,880 --> 00:14:43,920
and I will tell you this dependency

385
00:14:43,920 --> 00:14:47,339
shows something malicious and thanks to

386
00:14:47,339 --> 00:14:49,620
GitHub features you can dismiss if it's

387
00:14:49,620 --> 00:14:52,940
a false positive you don't want

388
00:14:53,100 --> 00:14:55,139
um now that we demonstrated that we have

389
00:14:55,139 --> 00:14:57,240
the coolest malware detection tool in

390
00:14:57,240 --> 00:14:59,639
the world how do we use it at Large

391
00:14:59,639 --> 00:15:01,440
thank you yeah because mostly for now

392
00:15:01,440 --> 00:15:02,699
you could have known everything from

393
00:15:02,699 --> 00:15:04,380
bury me so let's maybe get into the

394
00:15:04,380 --> 00:15:05,760
interesting Parts

395
00:15:05,760 --> 00:15:07,800
um so that's for the more developer use

396
00:15:07,800 --> 00:15:08,940
case right for developer you're

397
00:15:08,940 --> 00:15:10,500
developing something you want to know if

398
00:15:10,500 --> 00:15:12,300
your dependencies are my issues now we

399
00:15:12,300 --> 00:15:13,920
are working as a security researcher so

400
00:15:13,920 --> 00:15:15,300
we also want to be able to find

401
00:15:15,300 --> 00:15:17,639
something new uh and continuously scan

402
00:15:17,639 --> 00:15:20,820
everything we have on bypi so bye-bye is

403
00:15:20,820 --> 00:15:22,920
making us available to RSS fees that are

404
00:15:22,920 --> 00:15:25,500
very convenient so one is for the new

405
00:15:25,500 --> 00:15:27,360
packages that gets uploaded and one is

406
00:15:27,360 --> 00:15:29,160
for the existing package that gets some

407
00:15:29,160 --> 00:15:31,320
updates so it's LSS so it's

408
00:15:31,320 --> 00:15:33,480
straightforward uh you just have an XML

409
00:15:33,480 --> 00:15:35,279
that you need to pass you get here the

410
00:15:35,279 --> 00:15:36,720
latest package that was published on

411
00:15:36,720 --> 00:15:40,500
March 15 it was Astro Astro toolbox so

412
00:15:40,500 --> 00:15:42,000
you can then go to the link and you can

413
00:15:42,000 --> 00:15:43,740
use the API to get the source code and

414
00:15:43,740 --> 00:15:45,720
the metadata so at a higher level what

415
00:15:45,720 --> 00:15:46,980
we want to build is something like this

416
00:15:46,980 --> 00:15:49,860
we scribe vrss feed we put the new

417
00:15:49,860 --> 00:15:52,019
packages into a scanning queue from the

418
00:15:52,019 --> 00:15:53,100
other side we have something that's

419
00:15:53,100 --> 00:15:55,139
going to you to use guard dog scan that

420
00:15:55,139 --> 00:15:57,300
and store the result somewhere

421
00:15:57,300 --> 00:15:59,820
uh we did the implementation with AWS so

422
00:15:59,820 --> 00:16:01,440
we are doing this with a Lambda function

423
00:16:01,440 --> 00:16:03,420
running every five minutes scrapping

424
00:16:03,420 --> 00:16:05,880
that storing the packages in the

425
00:16:05,880 --> 00:16:07,320
dynamodb table to make sure it doesn't

426
00:16:07,320 --> 00:16:09,300
get scanned multiple times scanning

427
00:16:09,300 --> 00:16:11,519
right into a queue and then we have

428
00:16:11,519 --> 00:16:13,019
another lambdash function that's hooked

429
00:16:13,019 --> 00:16:14,699
up to the queue and that's going to scan

430
00:16:14,699 --> 00:16:17,579
that and store the results into dynamodb

431
00:16:17,579 --> 00:16:21,139
for the scan results and in S3 for the

432
00:16:21,139 --> 00:16:23,639
actual source code and I promise the S3

433
00:16:23,639 --> 00:16:26,639
bucket is in public yet so in terms of

434
00:16:26,639 --> 00:16:28,620
scaling this has a nice property that if

435
00:16:28,620 --> 00:16:30,180
you hook up along the function to an

436
00:16:30,180 --> 00:16:32,519
sqsq actually if scaling is going to be

437
00:16:32,519 --> 00:16:34,380
managed automatically so if you have

438
00:16:34,380 --> 00:16:35,579
nothing to scan you buy nothing

439
00:16:35,579 --> 00:16:37,320
basically and when you start having

440
00:16:37,320 --> 00:16:39,839
things in your queue AWS is going to add

441
00:16:39,839 --> 00:16:41,459
these Lambda functions and to connect

442
00:16:41,459 --> 00:16:43,980
them to the queue automatically up to a

443
00:16:43,980 --> 00:16:46,079
thousand functions

444
00:16:46,079 --> 00:16:47,940
in the same time which is much more than

445
00:16:47,940 --> 00:16:49,500
enough

446
00:16:49,500 --> 00:16:51,720
so obviously we are trying to monitor

447
00:16:51,720 --> 00:16:53,660
that so we are doing this with datadog

448
00:16:53,660 --> 00:16:56,399
so we have we are tracking the number of

449
00:16:56,399 --> 00:16:57,839
packages that we scan we can see it's

450
00:16:57,839 --> 00:16:59,339
approximately so this is over the last

451
00:16:59,339 --> 00:17:01,560
two weeks so it's approximately 25k

452
00:17:01,560 --> 00:17:04,380
packages per week we are monitoring the

453
00:17:04,380 --> 00:17:06,000
scan times to make sure that nothing is

454
00:17:06,000 --> 00:17:08,099
too too slow so the median is

455
00:17:08,099 --> 00:17:10,140
approximately six seconds and some

456
00:17:10,140 --> 00:17:12,000
metrics as well on the infrastructure

457
00:17:12,000 --> 00:17:14,040
like when you get a package to scan how

458
00:17:14,040 --> 00:17:16,260
much time does it take to get it to to

459
00:17:16,260 --> 00:17:17,760
be scanned

460
00:17:17,760 --> 00:17:18,780
um

461
00:17:18,780 --> 00:17:20,339
okay so I think there are a lot of

462
00:17:20,339 --> 00:17:22,500
security engineers in the room

463
00:17:22,500 --> 00:17:24,599
so you probably know that when you run a

464
00:17:24,599 --> 00:17:26,520
tool and you get the scan output the job

465
00:17:26,520 --> 00:17:29,220
is done is it's actually just restart

466
00:17:29,220 --> 00:17:31,740
um so we have an internal process where

467
00:17:31,740 --> 00:17:33,600
we have a web UI hooked up to the

468
00:17:33,600 --> 00:17:36,780
dynamodb table uh to the S3 bucket where

469
00:17:36,780 --> 00:17:38,580
people internally can go look at the

470
00:17:38,580 --> 00:17:40,620
packages uh look at the guard dog

471
00:17:40,620 --> 00:17:42,480
results and so here you can see we have

472
00:17:42,480 --> 00:17:44,460
the guard dog which is on output on the

473
00:17:44,460 --> 00:17:46,799
right the source code of a package on

474
00:17:46,799 --> 00:17:48,900
the left and manually we go ahead and

475
00:17:48,900 --> 00:17:50,039
we'll say okay this package is many

476
00:17:50,039 --> 00:17:52,320
shoes because obviously there are some

477
00:17:52,320 --> 00:17:53,580
first positives and we don't want to

478
00:17:53,580 --> 00:17:55,679
Mark automatically some packages as many

479
00:17:55,679 --> 00:17:57,419
shoes we don't want to report them to

480
00:17:57,419 --> 00:17:59,820
buy Pi if they are not many shoes

481
00:17:59,820 --> 00:18:01,380
Etc

482
00:18:01,380 --> 00:18:03,120
Advantage also one data set but it's

483
00:18:03,120 --> 00:18:04,679
very interesting for trading and from

484
00:18:04,679 --> 00:18:08,160
finding malware it's a bigquery so it's

485
00:18:08,160 --> 00:18:10,020
Google bigquery on Google cloud data set

486
00:18:10,020 --> 00:18:12,360
that is public made available by PayPal

487
00:18:12,360 --> 00:18:15,000
where you can basically use SQL to query

488
00:18:15,000 --> 00:18:17,340
all the metadata of all the packages and

489
00:18:17,340 --> 00:18:18,840
we'll see that in an example but it's

490
00:18:18,840 --> 00:18:20,820
very useful because when we find malware

491
00:18:20,820 --> 00:18:22,620
you can go ahead and say okay show me

492
00:18:22,620 --> 00:18:23,940
all the packages with the same motor

493
00:18:23,940 --> 00:18:26,280
with the same description and with

494
00:18:26,280 --> 00:18:28,320
similar properties we'll see that in a

495
00:18:28,320 --> 00:18:29,880
bit

496
00:18:29,880 --> 00:18:32,280
now in terms of results

497
00:18:32,280 --> 00:18:34,140
um so long story short there are

498
00:18:34,140 --> 00:18:36,419
actually quite a lot of of malware every

499
00:18:36,419 --> 00:18:38,160
day uh this is the graph for the last

500
00:18:38,160 --> 00:18:40,140
two weeks and you can see that every day

501
00:18:40,140 --> 00:18:41,640
we manually Mark some things as many

502
00:18:41,640 --> 00:18:43,679
issues so obviously not all of them are

503
00:18:43,679 --> 00:18:45,900
statement directors or things like that

504
00:18:45,900 --> 00:18:48,000
but uh we see many first packages every

505
00:18:48,000 --> 00:18:49,020
day

506
00:18:49,020 --> 00:18:50,580
um that's an interesting fight for us

507
00:18:50,580 --> 00:18:52,860
because initially we thought that we'd

508
00:18:52,860 --> 00:18:54,539
have some things you know maybe once a

509
00:18:54,539 --> 00:18:56,760
week or not all the time but it's

510
00:18:56,760 --> 00:18:58,320
actually more frequent than usual

511
00:18:58,320 --> 00:19:00,299
disclaimer there are also some security

512
00:19:00,299 --> 00:19:02,880
companies that upload some packages uh

513
00:19:02,880 --> 00:19:04,919
as simple malicious code but it's

514
00:19:04,919 --> 00:19:07,500
similarity

515
00:19:07,500 --> 00:19:09,600
um so we see things from you know from

516
00:19:09,600 --> 00:19:11,460
script kiddies we see some some code

517
00:19:11,460 --> 00:19:13,620
that doesn't even compile uh two things

518
00:19:13,620 --> 00:19:15,360
that are more elaborated and some back

519
00:19:15,360 --> 00:19:17,460
doors that we'll see in a bit and one

520
00:19:17,460 --> 00:19:18,720
thing that we notice is that it's

521
00:19:18,720 --> 00:19:20,100
actually pretty hard to analyze that

522
00:19:20,100 --> 00:19:22,380
because you get a flow of management

523
00:19:22,380 --> 00:19:25,200
packages every day and how to analyze

524
00:19:25,200 --> 00:19:27,000
that is a bit changing because you don't

525
00:19:27,000 --> 00:19:29,100
know if something you see is something

526
00:19:29,100 --> 00:19:31,980
you have already seen before so we try

527
00:19:31,980 --> 00:19:33,539
to come up with an approach to do some

528
00:19:33,539 --> 00:19:35,340
very simple clustering of the packages

529
00:19:35,340 --> 00:19:38,160
where the girl is to say okay I have

530
00:19:38,160 --> 00:19:39,780
this new package does it look like

531
00:19:39,780 --> 00:19:42,539
something I saw or I analyzed before and

532
00:19:42,539 --> 00:19:44,160
also allows you to see when you have

533
00:19:44,160 --> 00:19:45,900
similar packages typically they are made

534
00:19:45,900 --> 00:19:47,880
by the same person by the same actor or

535
00:19:47,880 --> 00:19:51,360
maybe targeting the same kind of victim

536
00:19:51,360 --> 00:19:53,340
um so the issue is that it's not a

537
00:19:53,340 --> 00:19:55,919
trivial problem and uh here you have the

538
00:19:55,919 --> 00:19:57,539
papers that are implementing a proper

539
00:19:57,539 --> 00:19:59,340
solution to it this is not what we're

540
00:19:59,340 --> 00:20:01,260
going to see now so what we're going to

541
00:20:01,260 --> 00:20:02,880
show is something let's say that is good

542
00:20:02,880 --> 00:20:05,160
enough but we developed and that we uh

543
00:20:05,160 --> 00:20:06,660
we think works well enough for the use

544
00:20:06,660 --> 00:20:07,919
case but

545
00:20:07,919 --> 00:20:10,140
um please don't do this at home

546
00:20:10,140 --> 00:20:12,120
so basically what we are doing is we are

547
00:20:12,120 --> 00:20:14,220
looking at this abstract syntax tree of

548
00:20:14,220 --> 00:20:16,980
uh each file in the package we are

549
00:20:16,980 --> 00:20:18,360
extracting some of the features from

550
00:20:18,360 --> 00:20:20,580
that and then we are feeding that into a

551
00:20:20,580 --> 00:20:22,980
crystalline algorithm called hdb scan

552
00:20:22,980 --> 00:20:25,380
that we selected thanks from thanks to

553
00:20:25,380 --> 00:20:29,340
gpt4 so basically the way it looks is

554
00:20:29,340 --> 00:20:31,260
that you get initially some source code

555
00:20:31,260 --> 00:20:33,120
you convert that into an abstract

556
00:20:33,120 --> 00:20:35,460
syntax3 it's not pretty but it's much

557
00:20:35,460 --> 00:20:37,320
easier to work with we extract some

558
00:20:37,320 --> 00:20:38,760
basic features from that

559
00:20:38,760 --> 00:20:40,860
again don't do this at home but we are

560
00:20:40,860 --> 00:20:42,539
looking at the Imports when there are

561
00:20:42,539 --> 00:20:45,240
some assignations uh if there are some

562
00:20:45,240 --> 00:20:47,340
for Loops or or why statements we put

563
00:20:47,340 --> 00:20:49,380
that as well and then we feed that into

564
00:20:49,380 --> 00:20:51,900
the crystalline algorithm and we get we

565
00:20:51,900 --> 00:20:53,880
get something so you can see here we

566
00:20:53,880 --> 00:20:55,860
have a big cluster in the middle that

567
00:20:55,860 --> 00:20:57,900
corresponds to someone that uploaded a

568
00:20:57,900 --> 00:20:59,580
batch of hundreds of malicious packages

569
00:20:59,580 --> 00:21:01,440
at the same time and if you zoom in you

570
00:21:01,440 --> 00:21:03,299
will see also some over clusters that

571
00:21:03,299 --> 00:21:05,880
correspond to very similar packages

572
00:21:05,880 --> 00:21:08,520
um so that's very helpful

573
00:21:08,520 --> 00:21:11,160
and today so we are also open sourcing

574
00:21:11,160 --> 00:21:13,200
something new uh as far as I know it's

575
00:21:13,200 --> 00:21:15,120
the largest open source data set of

576
00:21:15,120 --> 00:21:17,400
management python packages so it's right

577
00:21:17,400 --> 00:21:19,500
there made public two hours ago and

578
00:21:19,500 --> 00:21:21,480
basically every package made with Mark

579
00:21:21,480 --> 00:21:22,980
has many issues uh is going to be

580
00:21:22,980 --> 00:21:25,380
published there and the goal is to make

581
00:21:25,380 --> 00:21:27,299
it available for anyone to use if you

582
00:21:27,299 --> 00:21:28,980
want to develop your own detections

583
00:21:28,980 --> 00:21:30,419
crystalline algorithm if you're just

584
00:21:30,419 --> 00:21:32,640
interested to see what real life python

585
00:21:32,640 --> 00:21:34,200
malware looks like

586
00:21:34,200 --> 00:21:36,179
um so it's all a zip files by the script

587
00:21:36,179 --> 00:21:37,919
to extra advert to your machine please

588
00:21:37,919 --> 00:21:39,860
don't run it it's malware

589
00:21:39,860 --> 00:21:42,659
so please use it and abuse it and if you

590
00:21:42,659 --> 00:21:44,400
have some feedback or request feel free

591
00:21:44,400 --> 00:21:46,860
to to ask

592
00:21:46,860 --> 00:21:50,220
now a bit of more in practice what we

593
00:21:50,220 --> 00:21:53,419
found average is going there's an image

594
00:21:53,419 --> 00:21:56,100
Vlad is going to show us a real World

595
00:21:56,100 --> 00:21:58,380
back door that we found a few weeks a

596
00:21:58,380 --> 00:22:00,059
few days actually after releasing the

597
00:22:00,059 --> 00:22:01,260
guard dog

598
00:22:01,260 --> 00:22:04,740
yes thanks so we published guard dog and

599
00:22:04,740 --> 00:22:06,419
we started to scan at large every day

600
00:22:06,419 --> 00:22:08,700
with Christoph explained and we found

601
00:22:08,700 --> 00:22:10,799
this package being published in fast API

602
00:22:10,799 --> 00:22:13,799
toolkit updated actually so for those

603
00:22:13,799 --> 00:22:16,260
where for the python ecosystem newbies

604
00:22:16,260 --> 00:22:18,600
fast API is a framework that people use

605
00:22:18,600 --> 00:22:21,000
to build web application with the

606
00:22:21,000 --> 00:22:23,340
equivalent of a Java spring of a node.js

607
00:22:23,340 --> 00:22:28,440
Express or PHP level so this package was

608
00:22:28,440 --> 00:22:31,440
created in March and it's an interesting

609
00:22:31,440 --> 00:22:34,440
one because it's a package that contains

610
00:22:34,440 --> 00:22:37,020
a lot of toolkits for fast API including

611
00:22:37,020 --> 00:22:40,980
bringing an APM database connections all

612
00:22:40,980 --> 00:22:42,720
those kind of stuff so it's a collection

613
00:22:42,720 --> 00:22:44,940
of utils who you can add to your first

614
00:22:44,940 --> 00:22:47,520
API application so it was published

615
00:22:47,520 --> 00:22:50,880
first in March 2022 and it was kinda

616
00:22:50,880 --> 00:22:53,460
nice with all those goodies inside Pro

617
00:22:53,460 --> 00:22:55,260
documentation but that's okay and on

618
00:22:55,260 --> 00:22:58,140
November 23rd there was a back door that

619
00:22:58,140 --> 00:23:01,140
was published in an updated version

620
00:23:01,140 --> 00:23:03,120
so basically what was the back door

621
00:23:03,120 --> 00:23:06,679
there would be an exact base 64 string

622
00:23:06,679 --> 00:23:10,440
that was imported from another file so

623
00:23:10,440 --> 00:23:13,440
let's check the malware code itself it

624
00:23:13,440 --> 00:23:16,080
is the base64 string and if we end

625
00:23:16,080 --> 00:23:18,659
base64 we realize that this code

626
00:23:18,659 --> 00:23:21,960
actually adds a new post endpoint to the

627
00:23:21,960 --> 00:23:23,340
application

628
00:23:23,340 --> 00:23:26,220
and this first endpoint if you have the

629
00:23:26,220 --> 00:23:29,820
right token in the headers it will give

630
00:23:29,820 --> 00:23:32,159
you a share like a python shell access

631
00:23:32,159 --> 00:23:35,400
and a database chain access so if you

632
00:23:35,400 --> 00:23:36,480
know

633
00:23:36,480 --> 00:23:40,980
the token and the URL of a server using

634
00:23:40,980 --> 00:23:43,740
this package you can run arbitrary

635
00:23:43,740 --> 00:23:48,059
python code or arbitrary SQL code on the

636
00:23:48,059 --> 00:23:50,760
production of these people which is a

637
00:23:50,760 --> 00:23:52,200
bit scary

638
00:23:52,200 --> 00:23:55,020
so what happened maintainer reverted

639
00:23:55,020 --> 00:23:56,580
malicious commit because it was even

640
00:23:56,580 --> 00:23:58,740
committed on GitHub they did not even

641
00:23:58,740 --> 00:24:01,020
try to hide it by only publishing it on

642
00:24:01,020 --> 00:24:03,840
Pipeline and not GitHub they rejected

643
00:24:03,840 --> 00:24:06,900
the commit on December 22nd there was an

644
00:24:06,900 --> 00:24:08,760
issue not opened by us but open by

645
00:24:08,760 --> 00:24:10,500
someone else saying hey there's a

646
00:24:10,500 --> 00:24:13,020
malware added in a recent commit and the

647
00:24:13,020 --> 00:24:15,419
issue has been deleted you can find it

648
00:24:15,419 --> 00:24:18,179
anymore so we think that either the

649
00:24:18,179 --> 00:24:20,280
maintainers has been compromised in

650
00:24:20,280 --> 00:24:23,400
their account or they went rogue Maybe

651
00:24:23,400 --> 00:24:25,679
well maybe I lied on the previous slide

652
00:24:25,679 --> 00:24:27,539
you can't find the commit again as a

653
00:24:27,539 --> 00:24:30,120
issue again so they say that they added

654
00:24:30,120 --> 00:24:33,600
it for educational purpose I've got a

655
00:24:33,600 --> 00:24:35,460
very long conspiracy theory and we don't

656
00:24:35,460 --> 00:24:37,260
want to get sued if I said it publicly

657
00:24:37,260 --> 00:24:39,120
but feel free to reach out after the

658
00:24:39,120 --> 00:24:41,520
talk and I will tell you uh what it is

659
00:24:41,520 --> 00:24:44,159
it involves stuff that might have been

660
00:24:44,159 --> 00:24:46,140
happening in Eastern Europe since last

661
00:24:46,140 --> 00:24:48,780
year if you know what I'm referring to

662
00:24:48,780 --> 00:24:50,600
foreign

663
00:24:50,600 --> 00:24:53,159
a bit more basic and a bit more typical

664
00:24:53,159 --> 00:24:55,559
that we've seen a lot uh so we're going

665
00:24:55,559 --> 00:24:56,940
to look at the package that we found

666
00:24:56,940 --> 00:24:58,919
just a few days ago it's called TLS

667
00:24:58,919 --> 00:24:59,940
python

668
00:24:59,940 --> 00:25:01,679
um so let's see what it does first thing

669
00:25:01,679 --> 00:25:03,240
is we need to run a command that's going

670
00:25:03,240 --> 00:25:06,299
to uh take some some code from paste bin

671
00:25:06,299 --> 00:25:08,340
or something similar and run it not very

672
00:25:08,340 --> 00:25:10,500
fancy then it's going to Define some

673
00:25:10,500 --> 00:25:12,780
bindings for the windows API called

674
00:25:12,780 --> 00:25:15,000
Crypt and protect data so which is

675
00:25:15,000 --> 00:25:17,340
basically the GP API

676
00:25:17,340 --> 00:25:19,200
um in Windows which allows you to

677
00:25:19,200 --> 00:25:20,940
encrypt things at rest so that if you

678
00:25:20,940 --> 00:25:22,799
take out the disk you you cannot get the

679
00:25:22,799 --> 00:25:24,480
data but allows for transparently

680
00:25:24,480 --> 00:25:25,919
decrypt it with the user's head on

681
00:25:25,919 --> 00:25:27,659
shells and let's see why we are doing

682
00:25:27,659 --> 00:25:29,880
that next thing we are just looking at

683
00:25:29,880 --> 00:25:31,980
your browser's data so we are looking at

684
00:25:31,980 --> 00:25:35,520
Chrome Firefox Opera Brave lots of

685
00:25:35,520 --> 00:25:38,100
different browser filling your logins

686
00:25:38,100 --> 00:25:40,260
when doing the same for cookies uh

687
00:25:40,260 --> 00:25:42,059
excite the cookies are encrypted at rest

688
00:25:42,059 --> 00:25:43,760
in these cookies

689
00:25:43,760 --> 00:25:46,500
sqlite database so they are then

690
00:25:46,500 --> 00:25:48,360
recrypting the encryption key that is

691
00:25:48,360 --> 00:25:50,400
encrypted with the DP API and basically

692
00:25:50,400 --> 00:25:52,559
decrypting that and sending all that to

693
00:25:52,559 --> 00:25:54,179
a Discord webhook

694
00:25:54,179 --> 00:25:56,520
um a few interesting things is that we

695
00:25:56,520 --> 00:25:57,720
are also looking at files in your

696
00:25:57,720 --> 00:26:00,000
downloads and documents folders with

697
00:26:00,000 --> 00:26:01,799
some keywords so if you find any folder

698
00:26:01,799 --> 00:26:03,659
or file that matches some of these

699
00:26:03,659 --> 00:26:05,880
keywords they zip it and they send it to

700
00:26:05,880 --> 00:26:08,700
this very legitimate go file.io server

701
00:26:08,700 --> 00:26:10,980
the interesting part is that it's also

702
00:26:10,980 --> 00:26:13,860
in French mdp mod pass so maybe there

703
00:26:13,860 --> 00:26:15,360
are some you know French victims or

704
00:26:15,360 --> 00:26:17,100
French protectors

705
00:26:17,100 --> 00:26:19,260
that's basically it and so when we find

706
00:26:19,260 --> 00:26:21,720
that a good way to Pivot and to find

707
00:26:21,720 --> 00:26:23,400
more malware by the same person or with

708
00:26:23,400 --> 00:26:24,960
similar characteristics in five seconds

709
00:26:24,960 --> 00:26:27,600
is to use this um this data set from

710
00:26:27,600 --> 00:26:29,880
bypi so you say okay show me all the

711
00:26:29,880 --> 00:26:31,679
packages from the same motor and here is

712
00:26:31,679 --> 00:26:33,900
very simple because it's a specific name

713
00:26:33,900 --> 00:26:35,039
but you can also filter all the

714
00:26:35,039 --> 00:26:37,559
description on the uh of your user agent

715
00:26:37,559 --> 00:26:38,880
that was used to publish the package

716
00:26:38,880 --> 00:26:40,679
things like that and it also includes

717
00:26:40,679 --> 00:26:42,539
the deleted packages that you do not

718
00:26:42,539 --> 00:26:44,520
find on Pipeline so here we see we just

719
00:26:44,520 --> 00:26:47,460
run a very Quest and we find uh I think

720
00:26:47,460 --> 00:26:49,080
there was 20 more from the same person

721
00:26:49,080 --> 00:26:52,220
with similar characteristics

722
00:26:52,220 --> 00:26:54,900
useful and sure enough if we look at our

723
00:26:54,900 --> 00:26:57,179
cluster that we saw before we see that

724
00:26:57,179 --> 00:26:58,559
all these packages belong to the same

725
00:26:58,559 --> 00:27:00,659
cluster meaning that they are almost the

726
00:27:00,659 --> 00:27:02,940
same I think here the similarities

727
00:27:02,940 --> 00:27:06,120
um 100 and sometimes like 99 so this

728
00:27:06,120 --> 00:27:07,980
confirms that you know if we find

729
00:27:07,980 --> 00:27:09,179
something new we can just go ahead and

730
00:27:09,179 --> 00:27:10,860
look at where it is in the Crystal and

731
00:27:10,860 --> 00:27:14,719
we don't have to redo the analysis again

732
00:27:14,940 --> 00:27:16,440
um in that case if you just look at the

733
00:27:16,440 --> 00:27:18,419
source code on GitHub or on Source graph

734
00:27:18,419 --> 00:27:20,460
photograph it's a code search tool that

735
00:27:20,460 --> 00:27:22,380
works very very nicely you see actually

736
00:27:22,380 --> 00:27:25,200
that uh it's a tool called The Wasp

737
00:27:25,200 --> 00:27:26,520
sealer so it's basically someone who

738
00:27:26,520 --> 00:27:28,320
took that package of it into the

739
00:27:28,320 --> 00:27:30,240
management package and use that and

740
00:27:30,240 --> 00:27:32,220
we've seen that use quite a lot

741
00:27:32,220 --> 00:27:34,080
um so in summary maybe because we are

742
00:27:34,080 --> 00:27:36,179
not going to to discuss the eight

743
00:27:36,179 --> 00:27:38,460
Android and 91 packages that are

744
00:27:38,460 --> 00:27:40,260
published right now we see a lot of

745
00:27:40,260 --> 00:27:41,580
information Stillers that are looking

746
00:27:41,580 --> 00:27:43,320
for your environment variables your

747
00:27:43,320 --> 00:27:45,480
browser cookies we see a lot of

748
00:27:45,480 --> 00:27:47,880
expectations for Discord web hooks a lot

749
00:27:47,880 --> 00:27:48,779
of that

750
00:27:48,779 --> 00:27:49,860
um so you know maybe that's an

751
00:27:49,860 --> 00:27:51,419
interesting detection to build on your

752
00:27:51,419 --> 00:27:54,059
proxy and a lot of dynamic evaluation

753
00:27:54,059 --> 00:27:56,760
like something that basically does eval

754
00:27:56,760 --> 00:27:59,279
of Basics before the code something

755
00:27:59,279 --> 00:28:02,279
GitHub

756
00:28:04,559 --> 00:28:07,200
so uh many pieces of code that are

757
00:28:07,200 --> 00:28:08,400
actually in the package are just

758
00:28:08,400 --> 00:28:10,620
downloaders

759
00:28:10,620 --> 00:28:13,200
most of the time and also a lot of

760
00:28:13,200 --> 00:28:15,840
reviews of the WASP Stiller and this

761
00:28:15,840 --> 00:28:17,460
thing but I'm not even going to try and

762
00:28:17,460 --> 00:28:19,740
spell out multi logo or python is here

763
00:28:19,740 --> 00:28:22,559
but basically steals your cookies and

764
00:28:22,559 --> 00:28:25,260
sends that to a discount web hook

765
00:28:25,260 --> 00:28:27,240
so a few resources if you're interested

766
00:28:27,240 --> 00:28:29,279
to dig into the topic these are some

767
00:28:29,279 --> 00:28:31,020
very very interesting papers I know that

768
00:28:31,020 --> 00:28:32,940
papers are meant to be scary but these

769
00:28:32,940 --> 00:28:35,039
ones are really nice to read

770
00:28:35,039 --> 00:28:38,460
um so uh they are very recent as well I

771
00:28:38,460 --> 00:28:40,020
highly encourage to have a look if they

772
00:28:40,020 --> 00:28:41,700
are very very great and these are the

773
00:28:41,700 --> 00:28:44,100
other data sets that I know of so there

774
00:28:44,100 --> 00:28:46,799
are a few on npm if you want bypi the

775
00:28:46,799 --> 00:28:48,539
backstabbers knife collection isn't

776
00:28:48,539 --> 00:28:50,460
isn't public but you can ask for the

777
00:28:50,460 --> 00:28:53,840
access to the person who publishes it

778
00:28:53,840 --> 00:28:56,039
one is older I think it hasn't been

779
00:28:56,039 --> 00:28:58,320
updated in five years but but some data

780
00:28:58,320 --> 00:29:00,059
points that can be useful as well

781
00:29:00,059 --> 00:29:02,640
so Brad what's next in terms of research

782
00:29:02,640 --> 00:29:04,320
there and maybe for for the tool itself

783
00:29:04,320 --> 00:29:07,559
yes so uh we are trying to double down

784
00:29:07,559 --> 00:29:09,960
on an npm continue scanning it's not as

785
00:29:09,960 --> 00:29:12,240
easy as Pi Pi because they don't provide

786
00:29:12,240 --> 00:29:14,460
those RSS feed so we are actively

787
00:29:14,460 --> 00:29:17,220
working in getting there because npm is

788
00:29:17,220 --> 00:29:19,260
where things happen not because the

789
00:29:19,260 --> 00:29:21,659
JavaScript ecosystem has problem per se

790
00:29:21,659 --> 00:29:24,419
but because if you look at this graph at

791
00:29:24,419 --> 00:29:26,940
any time in the in history it will look

792
00:29:26,940 --> 00:29:29,580
the same with the npm ecosystem growing

793
00:29:29,580 --> 00:29:33,059
insanely faster than any other supply

794
00:29:33,059 --> 00:29:35,700
chain ecosystem for software building so

795
00:29:35,700 --> 00:29:38,100
we want to get to npm faster than later

796
00:29:38,100 --> 00:29:40,799
because we will find much more things we

797
00:29:40,799 --> 00:29:42,480
have to develop new rules we already

798
00:29:42,480 --> 00:29:44,700
have some feel free to help us on that

799
00:29:44,700 --> 00:29:47,220
uh and and the other thing is this one

800
00:29:47,220 --> 00:29:51,240
is more speculative but infrastructure

801
00:29:51,240 --> 00:29:53,100
as code is getting bigger and bigger

802
00:29:53,100 --> 00:29:54,960
people are not provisioning their

803
00:29:54,960 --> 00:29:58,320
infrastructure on by clicking in AWS UI

804
00:29:58,320 --> 00:30:01,440
anymore or an ovhui they are using

805
00:30:01,440 --> 00:30:03,419
infrastructure as code where the

806
00:30:03,419 --> 00:30:05,700
infrastructure is defined in a code base

807
00:30:05,700 --> 00:30:07,559
that is executed and that provision

808
00:30:07,559 --> 00:30:10,820
servers at lambdas by database and stuff

809
00:30:10,820 --> 00:30:13,980
the terraform ecosystem which is one of

810
00:30:13,980 --> 00:30:16,799
the infrastructure as code solution this

811
00:30:16,799 --> 00:30:19,919
ecosystem is not that big with only 13k

812
00:30:19,919 --> 00:30:23,640
packages in total but when you execute

813
00:30:23,640 --> 00:30:25,320
this kind of stuff you run it in a very

814
00:30:25,320 --> 00:30:27,240
privileged environment because you give

815
00:30:27,240 --> 00:30:29,760
it your access your admin credentials

816
00:30:29,760 --> 00:30:31,140
for your Cloud infrastructure whether

817
00:30:31,140 --> 00:30:34,500
this is as your oaws

818
00:30:34,500 --> 00:30:38,700
or others so introducing malware in this

819
00:30:38,700 --> 00:30:41,640
ecosystem would be extremely scary and

820
00:30:41,640 --> 00:30:43,860
dangerous for the communities there's

821
00:30:43,860 --> 00:30:47,220
not much literature about that yet ISC

822
00:30:47,220 --> 00:30:50,100
is code so let's let's consider it as

823
00:30:50,100 --> 00:30:50,820
such

824
00:30:50,820 --> 00:30:52,440
yeah and just as a software I don't

825
00:30:52,440 --> 00:30:53,760
think there's any evidence yet of

826
00:30:53,760 --> 00:30:55,679
anything like that happening besides the

827
00:30:55,679 --> 00:30:57,899
security companies uh showing us you can

828
00:30:57,899 --> 00:30:59,279
do it uh but you know maybe that will

829
00:30:59,279 --> 00:31:00,659
happen in the future

830
00:31:00,659 --> 00:31:02,039
um something also that was released just

831
00:31:02,039 --> 00:31:04,740
yesterday by open AI is a new feature in

832
00:31:04,740 --> 00:31:07,440
gpt4 that allows you to some box code so

833
00:31:07,440 --> 00:31:09,000
basically you can give it python code

834
00:31:09,000 --> 00:31:10,980
they execute it for you and I think you

835
00:31:10,980 --> 00:31:13,020
can ask it for all sorts of questions so

836
00:31:13,020 --> 00:31:14,580
it's in Alpha right now so we don't have

837
00:31:14,580 --> 00:31:16,440
a chance to use it but that could be a

838
00:31:16,440 --> 00:31:18,600
very fun way of doing a dynamic analysis

839
00:31:18,600 --> 00:31:20,399
in a simple way

840
00:31:20,399 --> 00:31:22,860
um one way would be to say when we get

841
00:31:22,860 --> 00:31:24,600
some results from guard dog we try to

842
00:31:24,600 --> 00:31:27,659
give the code to uh GPT for sandbox it

843
00:31:27,659 --> 00:31:30,299
and see if it thinks it's manifest based

844
00:31:30,299 --> 00:31:32,520
on that something that we'd like to try

845
00:31:32,520 --> 00:31:34,260
as well is to see if we can train a

846
00:31:34,260 --> 00:31:35,700
machine learning model

847
00:31:35,700 --> 00:31:37,200
um on a malicious package data set

848
00:31:37,200 --> 00:31:39,299
unfortunately there aren't that many I

849
00:31:39,299 --> 00:31:41,039
think we could get to two thousand three

850
00:31:41,039 --> 00:31:43,200
thousand but not that that much and see

851
00:31:43,200 --> 00:31:45,360
if we can then confirm the guard dog

852
00:31:45,360 --> 00:31:47,159
findings and classify okay we have this

853
00:31:47,159 --> 00:31:48,600
file that is supposed to be many shoes

854
00:31:48,600 --> 00:31:51,419
is it malicious or not that's for for

855
00:31:51,419 --> 00:31:53,580
the future and finally it's an open

856
00:31:53,580 --> 00:31:55,440
source project so yeah everyone is

857
00:31:55,440 --> 00:31:57,299
invited uh we would love your

858
00:31:57,299 --> 00:31:58,919
contribution we Mark some of them as

859
00:31:58,919 --> 00:32:01,200
good first issues

860
00:32:01,200 --> 00:32:03,240
a false positive and false negatives in

861
00:32:03,240 --> 00:32:05,340
our rules and heuristics we would love

862
00:32:05,340 --> 00:32:07,740
you to help us fixing that and you can

863
00:32:07,740 --> 00:32:10,500
explain explore the data set

864
00:32:10,500 --> 00:32:12,539
um expand it if you find stuff please

865
00:32:12,539 --> 00:32:15,779
don't write malware be nice

866
00:32:15,779 --> 00:32:18,779
um but there's one more thing because we

867
00:32:18,779 --> 00:32:22,620
we want to be fancy uh we filmed that

868
00:32:22,620 --> 00:32:24,600
the other day do you want to describe

869
00:32:24,600 --> 00:32:26,640
this web yeah I mean it's just a fun one

870
00:32:26,640 --> 00:32:28,440
it's very basical you know it's like 35

871
00:32:28,440 --> 00:32:30,779
lines of code it's basically opening a

872
00:32:30,779 --> 00:32:32,520
reverse cell The Twist is that is

873
00:32:32,520 --> 00:32:34,320
getting report to where it opens the

874
00:32:34,320 --> 00:32:36,779
reversal from a txt record in the DNS

875
00:32:36,779 --> 00:32:39,059
record so the conclusion would be it's

876
00:32:39,059 --> 00:32:40,919
always generous even what it's not DNS

877
00:32:40,919 --> 00:32:42,600
and it's kind of smart because nobody

878
00:32:42,600 --> 00:32:44,640
really monitors what goes through DNS in

879
00:32:44,640 --> 00:32:46,620
an infrastructure that's one of the best

880
00:32:46,620 --> 00:32:50,220
way to bypass a network protection is to

881
00:32:50,220 --> 00:32:53,279
use DNS so very nice one yeah and I

882
00:32:53,279 --> 00:32:54,960
think here it's not it's mostly for

883
00:32:54,960 --> 00:32:56,640
dynamic you know when you change the

884
00:32:56,640 --> 00:32:58,260
report must you know

885
00:32:58,260 --> 00:33:00,659
bypass but it was interesting to see

886
00:33:00,659 --> 00:33:03,020
nonetheless

887
00:33:03,140 --> 00:33:05,820
is just going to the size we have some

888
00:33:05,820 --> 00:33:07,320
guard dog stickers here so please take

889
00:33:07,320 --> 00:33:09,419
them uh that isn't going to take them

890
00:33:09,419 --> 00:33:11,460
back with him no and we are taking a few

891
00:33:11,460 --> 00:33:13,140
questions I think if we have time thank

892
00:33:13,140 --> 00:33:15,419
you yes and if there are any

893
00:33:15,419 --> 00:33:17,370
okay we have a few minutes for questions

894
00:33:17,370 --> 00:33:27,270
[Applause]

895
00:33:31,200 --> 00:33:33,539
so thanks a lot for the talk a question

896
00:33:33,539 --> 00:33:35,640
about so the moment you decided to open

897
00:33:35,640 --> 00:33:38,460
source guard dog did you get yourself

898
00:33:38,460 --> 00:33:40,799
into a cuts and mouse games with the

899
00:33:40,799 --> 00:33:42,480
malware creators

900
00:33:42,480 --> 00:33:45,720
is the maintenance cost of the rules I I

901
00:33:45,720 --> 00:33:47,820
don't think my West Creator know that

902
00:33:47,820 --> 00:33:49,919
much about us yet we are too small I

903
00:33:49,919 --> 00:33:52,140
don't think they care mostly yeah and to

904
00:33:52,140 --> 00:33:54,659
be honest I really think this guy will

905
00:33:54,659 --> 00:33:56,940
this person who published first API

906
00:33:56,940 --> 00:33:59,159
toolkit is like oh I will finish malware

907
00:33:59,159 --> 00:34:00,419
and

908
00:34:00,419 --> 00:34:02,640
six months later there were two blog

909
00:34:02,640 --> 00:34:04,200
posts because there is another company

910
00:34:04,200 --> 00:34:06,960
doing some stuff like us publishing is I

911
00:34:06,960 --> 00:34:08,280
wasn't malware published today about

912
00:34:08,280 --> 00:34:11,040
that so at the end of the day yeah it

913
00:34:11,040 --> 00:34:13,918
will get to a mouse and uh and The Cat

914
00:34:13,918 --> 00:34:16,619
Came they don't care for now so if I

915
00:34:16,619 --> 00:34:18,839
know we are safe

916
00:34:18,839 --> 00:34:21,540
experience with Dynamic code analysis

917
00:34:21,540 --> 00:34:23,280
because all your presentations seem to

918
00:34:23,280 --> 00:34:26,219
be about static code nose yeah no not so

919
00:34:26,219 --> 00:34:27,780
much we didn't want to go this route uh

920
00:34:27,780 --> 00:34:30,359
there is the the project name packaging

921
00:34:30,359 --> 00:34:32,219
that is doing that I think we are doing

922
00:34:32,219 --> 00:34:33,659
some kind of dynamic anesthes

923
00:34:33,659 --> 00:34:35,639
lightweight uh so not in the car

924
00:34:35,639 --> 00:34:36,960
container not in the sandbox I think

925
00:34:36,960 --> 00:34:38,639
they do some some kind of hooking with

926
00:34:38,639 --> 00:34:41,280
stress I'm not sure how secure it is if

927
00:34:41,280 --> 00:34:43,619
you run it on your machine but no

928
00:34:43,619 --> 00:34:45,839
specific experience on that again I'm

929
00:34:45,839 --> 00:34:47,940
very interesting to see what comes out

930
00:34:47,940 --> 00:34:50,520
of this feature if you can really if you

931
00:34:50,520 --> 00:34:52,139
could really give it some python code

932
00:34:52,139 --> 00:34:54,000
and tell them okay give me all the DNS

933
00:34:54,000 --> 00:34:55,440
requests on the file right

934
00:34:55,440 --> 00:34:58,440
um very interesting so we we are working

935
00:34:58,440 --> 00:35:00,540
internally Zach is working on some

936
00:35:00,540 --> 00:35:03,839
Dynamic instrument analysis for code so

937
00:35:03,839 --> 00:35:06,180
is that the topic we're studying for the

938
00:35:06,180 --> 00:35:08,400
guard dog scope we just wanted this

939
00:35:08,400 --> 00:35:10,560
simple command that runs fast enough so

940
00:35:10,560 --> 00:35:12,900
people can put it in CI without removing

941
00:35:12,900 --> 00:35:14,460
it when they bang their head against the

942
00:35:14,460 --> 00:35:17,160
wall because SCI is getting slow and

943
00:35:17,160 --> 00:35:18,660
they are come streaming all their GitHub

944
00:35:18,660 --> 00:35:21,060
action minutes and also because I mean

945
00:35:21,060 --> 00:35:23,220
many people are doing sandboxing it's

946
00:35:23,220 --> 00:35:25,320
not specific to language so if we build

947
00:35:25,320 --> 00:35:27,900
the sandbox it would be like uh mostly

948
00:35:27,900 --> 00:35:29,700
not as good as what everyone else is

949
00:35:29,700 --> 00:35:32,480
doing so yeah

950
00:35:32,900 --> 00:35:36,500
any other questions

951
00:35:39,240 --> 00:35:41,700
okay we're good thank you crystals thank

952
00:35:41,700 --> 00:35:43,200
you for Vladimir

953
00:35:43,200 --> 00:35:45,680
thank you

