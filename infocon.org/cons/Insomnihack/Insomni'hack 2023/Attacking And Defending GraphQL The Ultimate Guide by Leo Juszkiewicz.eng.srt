1
00:00:05,180 --> 00:00:09,540
okay so first of all as usual I want to

2
00:00:09,540 --> 00:00:13,559
thank uh insomnihack oh icrt uh

3
00:00:13,559 --> 00:00:15,000
basically everyone that organized this

4
00:00:15,000 --> 00:00:16,619
great event I'm really excited to be

5
00:00:16,619 --> 00:00:17,580
here this is my first time in

6
00:00:17,580 --> 00:00:20,420
Switzerland uh you have a great country

7
00:00:20,420 --> 00:00:23,760
uh specifically here in Loveland right

8
00:00:23,760 --> 00:00:27,119
France as well I guess so let's start

9
00:00:27,119 --> 00:00:28,740
with this we have attacking and

10
00:00:28,740 --> 00:00:31,560
defending graphql the ultimate guide my

11
00:00:31,560 --> 00:00:34,020
name is Leo joskowix so let's start

12
00:00:34,020 --> 00:00:36,120
first of all you don't know me so let's

13
00:00:36,120 --> 00:00:39,120
start with a quick uh who am I so I'm

14
00:00:39,120 --> 00:00:40,940
originally from Mexico

15
00:00:40,940 --> 00:00:44,879
uh yeah I can prove that basically

16
00:00:44,879 --> 00:00:47,820
because I love chili I love spicy if you

17
00:00:47,820 --> 00:00:49,620
see me somewhere around just powering

18
00:00:49,620 --> 00:00:51,960
some chili on my soup don't worry this

19
00:00:51,960 --> 00:00:54,840
you know I was born like that

20
00:00:54,840 --> 00:00:57,780
um also uh other uh hobbies that I have

21
00:00:57,780 --> 00:01:00,000
all as well sweet chocolate not because

22
00:01:00,000 --> 00:01:02,160
I'm here I'm telling you I always love

23
00:01:02,160 --> 00:01:05,820
the uh Swiss chocolate sucker or

24
00:01:05,820 --> 00:01:08,640
football whatever you call it uh used to

25
00:01:08,640 --> 00:01:10,740
get certified uh I wasn't sure if I was

26
00:01:10,740 --> 00:01:12,900
supposed to say that or not but you know

27
00:01:12,900 --> 00:01:15,119
I have all these obviously posc cppt

28
00:01:15,119 --> 00:01:19,500
emapped uh ewpt PTX and so on

29
00:01:19,500 --> 00:01:23,040
um but not anymore uh I work as an

30
00:01:23,040 --> 00:01:25,080
application security architect in Dario

31
00:01:25,080 --> 00:01:28,500
Health which is uh as its name implies

32
00:01:28,500 --> 00:01:31,020
it's a Healthcare company based in New

33
00:01:31,020 --> 00:01:34,259
York uh I do a lot of stuff you know

34
00:01:34,259 --> 00:01:36,180
like design reviews and making through

35
00:01:36,180 --> 00:01:39,360
the code in processes everything is uh

36
00:01:39,360 --> 00:01:42,780
as secure as possible uh I used to be in

37
00:01:42,780 --> 00:01:45,060
my previous jobs uh security researcher

38
00:01:45,060 --> 00:01:48,299
but mainly in the web security area

39
00:01:48,299 --> 00:01:51,899
and also when I have time I am pursuing

40
00:01:51,899 --> 00:01:54,840
my MSC my masters in cyber security from

41
00:01:54,840 --> 00:01:56,640
the University of London

42
00:01:56,640 --> 00:02:00,540
uh and basically uh that's all about me

43
00:02:00,540 --> 00:02:01,619
for now

44
00:02:01,619 --> 00:02:03,840
so the agenda for today is going to be

45
00:02:03,840 --> 00:02:07,200
uh just a quick overview about what is

46
00:02:07,200 --> 00:02:09,419
graphql maybe some of you are familiar

47
00:02:09,419 --> 00:02:12,720
with maybe not so I'll just uh give a

48
00:02:12,720 --> 00:02:14,760
quick recap and we'll start gradually

49
00:02:14,760 --> 00:02:18,720
moving on to more topics more operations

50
00:02:18,720 --> 00:02:21,840
directives and more uh less common staff

51
00:02:21,840 --> 00:02:24,599
actually uh we're gonna see also some

52
00:02:24,599 --> 00:02:25,920
terminology because we need to

53
00:02:25,920 --> 00:02:28,920
understand that in in order to uh

54
00:02:28,920 --> 00:02:31,260
understand attacks and how to defend

55
00:02:31,260 --> 00:02:32,280
ourselves

56
00:02:32,280 --> 00:02:35,580
uh we will do also a comparison with

57
00:02:35,580 --> 00:02:38,940
other apis or the restful API which is

58
00:02:38,940 --> 00:02:42,180
the most uh the white known uh

59
00:02:42,180 --> 00:02:45,000
technology uh we will see also a real

60
00:02:45,000 --> 00:02:46,860
exploit scenario so we can see how

61
00:02:46,860 --> 00:02:50,099
things go in real life uh but also we

62
00:02:50,099 --> 00:02:51,660
will see other attack vectors other

63
00:02:51,660 --> 00:02:53,640
places where we can be hacked or

64
00:02:53,640 --> 00:02:56,340
attacked if we are not aware or we're

65
00:02:56,340 --> 00:02:58,379
not fair enough and lastly of course

66
00:02:58,379 --> 00:02:59,879
we're going to see some remediations or

67
00:02:59,879 --> 00:03:01,980
ways to mitigate those how we can defend

68
00:03:01,980 --> 00:03:04,620
ourselves how we can make sure that if

69
00:03:04,620 --> 00:03:06,599
we adopt or if we adopted already this

70
00:03:06,599 --> 00:03:10,800
uh technology so we are safe

71
00:03:10,800 --> 00:03:14,400
so let's start with a quick overview uh

72
00:03:14,400 --> 00:03:16,860
but before that would like just to uh

73
00:03:16,860 --> 00:03:19,080
clarify I don't know just somebody saw

74
00:03:19,080 --> 00:03:19,920
me

75
00:03:19,920 --> 00:03:22,260
um downstairs and it was like oh you're

76
00:03:22,260 --> 00:03:23,700
a hacker so you're probably on drugs I'm

77
00:03:23,700 --> 00:03:26,340
like no no dude I just have red eyes I

78
00:03:26,340 --> 00:03:28,260
just went to the doctor so I'm not on

79
00:03:28,260 --> 00:03:32,640
drugs okay so API basics uh so you

80
00:03:32,640 --> 00:03:34,860
already know what an API is or if not

81
00:03:34,860 --> 00:03:38,000
it's just uh um it allows you to

82
00:03:38,000 --> 00:03:40,799
exchange data or information with

83
00:03:40,799 --> 00:03:42,560
different applications

84
00:03:42,560 --> 00:03:46,260
uh usually you follow some rules uh some

85
00:03:46,260 --> 00:03:49,319
headers some token Key password that you

86
00:03:49,319 --> 00:03:51,420
need to share with the service provider

87
00:03:51,420 --> 00:03:52,860
or the service provider actually

88
00:03:52,860 --> 00:03:55,379
provides you

89
00:03:55,379 --> 00:03:58,200
um let's say uh you you we we want to

90
00:03:58,200 --> 00:04:01,140
query the weather information for today

91
00:04:01,140 --> 00:04:05,760
so we set a set of rules uh a few fields

92
00:04:05,760 --> 00:04:07,860
that you need to provide in order to get

93
00:04:07,860 --> 00:04:11,120
the full weather or just uh one piece

94
00:04:11,120 --> 00:04:14,000
but apis became really crucial little

95
00:04:14,000 --> 00:04:17,579
just last years uh because they bring a

96
00:04:17,579 --> 00:04:19,680
lot of benefits this is the way of

97
00:04:19,680 --> 00:04:22,860
exchanging data between my app and the

98
00:04:22,860 --> 00:04:25,320
rest of the applications okay we see

99
00:04:25,320 --> 00:04:28,080
them uh basically all over uh if you

100
00:04:28,080 --> 00:04:30,300
know YouTube If you know uh Facebook

101
00:04:30,300 --> 00:04:32,460
basically almost every single

102
00:04:32,460 --> 00:04:34,979
application in the world mostly the

103
00:04:34,979 --> 00:04:37,020
public ones they share some kind of

104
00:04:37,020 --> 00:04:40,860
information or API for you to reuse and

105
00:04:40,860 --> 00:04:42,300
query their data if you want to get

106
00:04:42,300 --> 00:04:44,880
let's say your video and you don't want

107
00:04:44,880 --> 00:04:47,460
to go and click on your video link every

108
00:04:47,460 --> 00:04:50,160
time you want to get the the viewers or

109
00:04:50,160 --> 00:04:51,300
you want to get some other information

110
00:04:51,300 --> 00:04:54,060
you usually do this through an API

111
00:04:54,060 --> 00:04:57,540
provided by the service provider but as

112
00:04:57,540 --> 00:05:00,180
well if you want your service to be used

113
00:05:00,180 --> 00:05:03,000
by other users in the world other

114
00:05:03,000 --> 00:05:04,979
services so you need to provide that

115
00:05:04,979 --> 00:05:08,880
also as well so almost 70 percent uh

116
00:05:08,880 --> 00:05:12,660
expect to rely more even more on apis on

117
00:05:12,660 --> 00:05:14,940
2023 that's according to a stateful

118
00:05:14,940 --> 00:05:17,280
state of fbi.com

119
00:05:17,280 --> 00:05:19,320
uh but that's just a number okay it

120
00:05:19,320 --> 00:05:22,080
could be you know millions of uh users

121
00:05:22,080 --> 00:05:25,080
and millions of applications as well so

122
00:05:25,080 --> 00:05:26,820
we used to have something called the

123
00:05:26,820 --> 00:05:31,259
traditional rest API or restful apis and

124
00:05:31,259 --> 00:05:33,900
that used to be the standard we know uh

125
00:05:33,900 --> 00:05:37,560
we have several methods HTTP post or put

126
00:05:37,560 --> 00:05:42,180
to uh create or modify data uh Delete if

127
00:05:42,180 --> 00:05:44,220
you want to remove some items some

128
00:05:44,220 --> 00:05:46,919
something on the server uh get if you

129
00:05:46,919 --> 00:05:49,380
want you just to retrieve data you want

130
00:05:49,380 --> 00:05:51,740
to read data from the server

131
00:05:51,740 --> 00:05:54,419
uh and we used to have many endpoints

132
00:05:54,419 --> 00:05:56,699
okay we will talk about this later

133
00:05:56,699 --> 00:05:59,520
uh and also the way of interacting with

134
00:05:59,520 --> 00:06:02,639
the server it was by using Json or XML

135
00:06:02,639 --> 00:06:04,860
XML maybe less common but if you know

136
00:06:04,860 --> 00:06:07,380
Google cloud or one of these services so

137
00:06:07,380 --> 00:06:09,960
they still use kind of like an XML API

138
00:06:09,960 --> 00:06:13,259
where you can actually uh use XML as

139
00:06:13,259 --> 00:06:16,380
part of the uh I mean to to call the API

140
00:06:16,380 --> 00:06:18,300
service but we used to have many

141
00:06:18,300 --> 00:06:21,000
endpoints like if you want to uh to

142
00:06:21,000 --> 00:06:22,800
query for orders you want to care for

143
00:06:22,800 --> 00:06:26,340
users history logs every uh every

144
00:06:26,340 --> 00:06:28,259
service or every component of the

145
00:06:28,259 --> 00:06:30,060
application is just another slash

146
00:06:30,060 --> 00:06:33,840
something sometimes a few slashes uh

147
00:06:33,840 --> 00:06:35,699
that was just basically the restful or

148
00:06:35,699 --> 00:06:37,979
the old or the traditional method that

149
00:06:37,979 --> 00:06:39,000
we know

150
00:06:39,000 --> 00:06:40,800
so

151
00:06:40,800 --> 00:06:43,259
the economy just to reinforce a little

152
00:06:43,259 --> 00:06:45,900
bit more about this uh they said I think

153
00:06:45,900 --> 00:06:48,960
it's in 2017 uh I'm not affiliated with

154
00:06:48,960 --> 00:06:51,300
them okay so they said that the world's

155
00:06:51,300 --> 00:06:53,880
most valuable resource is no longer oil

156
00:06:53,880 --> 00:06:56,639
is data okay when we talk about data is

157
00:06:56,639 --> 00:06:58,919
the API because this is the way of

158
00:06:58,919 --> 00:07:02,039
exchanging the data between you and the

159
00:07:02,039 --> 00:07:04,380
application okay so if you want to

160
00:07:04,380 --> 00:07:07,340
invest maybe this is your opportunity

161
00:07:07,340 --> 00:07:11,100
uh not sure yeah if rest actually stands

162
00:07:11,100 --> 00:07:15,120
for relaxation rest restful apis so

163
00:07:15,120 --> 00:07:19,020
let's see a few graphql fundamentals now

164
00:07:19,020 --> 00:07:22,020
what is graphql so graphql is an open

165
00:07:22,020 --> 00:07:25,020
source data query and manipulation uh

166
00:07:25,020 --> 00:07:28,319
technology that is used for apis it was

167
00:07:28,319 --> 00:07:33,000
mainly created by Facebook or meta back

168
00:07:33,000 --> 00:07:36,060
in I think was in 12 2012 and they

169
00:07:36,060 --> 00:07:38,900
released this uh to the public in

170
00:07:38,900 --> 00:07:43,680
2015. uh why why they did it or why

171
00:07:43,680 --> 00:07:46,139
what's so great about graphql so first

172
00:07:46,139 --> 00:07:48,960
of all is flexible okay you can change

173
00:07:48,960 --> 00:07:51,780
pieces in amount of just seconds or

174
00:07:51,780 --> 00:07:53,340
minutes you don't need to change your

175
00:07:53,340 --> 00:07:55,919
whole architecture uh in the front end

176
00:07:55,919 --> 00:07:58,259
or in other places and it's very

177
00:07:58,259 --> 00:08:00,840
efficient okay because we will see later

178
00:08:00,840 --> 00:08:03,300
where how you can just query only or

179
00:08:03,300 --> 00:08:05,639
basically send only one request with

180
00:08:05,639 --> 00:08:07,979
many queries instead of sending dozens

181
00:08:07,979 --> 00:08:10,160
of queries for that

182
00:08:10,160 --> 00:08:13,259
uh also uh one of the problems we'll see

183
00:08:13,259 --> 00:08:15,060
there by comparing them so one of the

184
00:08:15,060 --> 00:08:17,280
problems that with rest apis is that you

185
00:08:17,280 --> 00:08:19,620
get everything you use you query for

186
00:08:19,620 --> 00:08:21,720
orders you get all the orders okay you

187
00:08:21,720 --> 00:08:23,460
can query for the ID but you get

188
00:08:23,460 --> 00:08:26,520
sometimes all the the details not really

189
00:08:26,520 --> 00:08:28,860
necessarily at this moment but you get

190
00:08:28,860 --> 00:08:31,080
everything on the same packet and with

191
00:08:31,080 --> 00:08:33,958
graphql you specify what exactly you

192
00:08:33,958 --> 00:08:36,479
want okay so in many cases where you are

193
00:08:36,479 --> 00:08:38,820
you need compliance HIPAA gdpr or

194
00:08:38,820 --> 00:08:40,620
whatever and

195
00:08:40,620 --> 00:08:43,380
um any other regulation and you are

196
00:08:43,380 --> 00:08:44,940
requested not to I mean everyone

197
00:08:44,940 --> 00:08:47,580
basically but specifically this uh

198
00:08:47,580 --> 00:08:51,779
companies uh much more so they reduce

199
00:08:51,779 --> 00:08:54,360
drastically with graphql just with the

200
00:08:54,360 --> 00:08:57,060
disclosure of V pii or Phi personal

201
00:08:57,060 --> 00:08:59,880
identify of information or Phi which is

202
00:08:59,880 --> 00:09:02,880
the same uh acronym just for uh health

203
00:09:02,880 --> 00:09:04,980
information like Diagnostics and stuff

204
00:09:04,980 --> 00:09:09,000
like that so when you query the uh the

205
00:09:09,000 --> 00:09:11,820
API you get the exact information you

206
00:09:11,820 --> 00:09:14,100
get the name because that's what you

207
00:09:14,100 --> 00:09:17,339
requested you get also the uh the phone

208
00:09:17,339 --> 00:09:19,260
if that's what you requested but you get

209
00:09:19,260 --> 00:09:21,140
the you don't get the phone name address

210
00:09:21,140 --> 00:09:23,820
uh and also different information that

211
00:09:23,820 --> 00:09:26,519
you didn't even ask for uh another

212
00:09:26,519 --> 00:09:28,740
Advantage here is that it's uh strongly

213
00:09:28,740 --> 00:09:29,880
typed language

214
00:09:29,880 --> 00:09:31,800
otherwise errors will be thrown that

215
00:09:31,800 --> 00:09:34,200
means that as opposed to uh I mean you

216
00:09:34,200 --> 00:09:36,899
could do it also in restful apis but you

217
00:09:36,899 --> 00:09:38,820
need to have some work done in bat in

218
00:09:38,820 --> 00:09:41,279
the back end uh you what you need to do

219
00:09:41,279 --> 00:09:44,160
is just to specif to query specifically

220
00:09:44,160 --> 00:09:46,500
for that type of data whether it's an

221
00:09:46,500 --> 00:09:48,959
INT a string there are also some scholar

222
00:09:48,959 --> 00:09:51,300
types or built-in types that are called

223
00:09:51,300 --> 00:09:53,220
uh scholar types we will see it shortly

224
00:09:53,220 --> 00:09:56,220
which is like an ID and that's what you

225
00:09:56,220 --> 00:09:59,580
request if there is an error so you

226
00:09:59,580 --> 00:10:00,740
won't get anything

227
00:10:00,740 --> 00:10:04,680
uh which is differently with uh restful

228
00:10:04,680 --> 00:10:08,459
apis now regarding the HTTP status codes

229
00:10:08,459 --> 00:10:11,880
so in restful apis usually we need to

230
00:10:11,880 --> 00:10:15,540
deal with uh you know the the 200 and

231
00:10:15,540 --> 00:10:17,459
then at the in the in the body you you

232
00:10:17,459 --> 00:10:20,640
put some other uh HTTP status codes 405

233
00:10:20,640 --> 00:10:23,760
404 for one whatever it is and here

234
00:10:23,760 --> 00:10:26,100
mainly we don't care about errors I mean

235
00:10:26,100 --> 00:10:29,700
we always get 200 and that also makes it

236
00:10:29,700 --> 00:10:31,560
a little bit harder for an attacker to

237
00:10:31,560 --> 00:10:34,440
realize whether this is a need or not uh

238
00:10:34,440 --> 00:10:36,240
of course if there is an error so there

239
00:10:36,240 --> 00:10:38,700
will be like a short uh field Json field

240
00:10:38,700 --> 00:10:42,120
uh called error with the message uh

241
00:10:42,120 --> 00:10:44,880
specifying what went wrong uh but we

242
00:10:44,880 --> 00:10:46,740
don't need to get the I mean not with

243
00:10:46,740 --> 00:10:49,860
any other status codes

244
00:10:49,860 --> 00:10:52,560
so let's just jump about some more

245
00:10:52,560 --> 00:10:55,560
terminology about graphql so first of

246
00:10:55,560 --> 00:10:57,600
all we need something called the schema

247
00:10:57,600 --> 00:11:00,360
the schema is what actually defines what

248
00:11:00,360 --> 00:11:02,279
we want to query it's kind of like

249
00:11:02,279 --> 00:11:04,440
defining our database how it's going to

250
00:11:04,440 --> 00:11:06,360
look like what Fields we're going to

251
00:11:06,360 --> 00:11:08,279
have what type of queries we're going to

252
00:11:08,279 --> 00:11:11,100
have okay because we have something

253
00:11:11,100 --> 00:11:13,860
called uh sdl which is the schema

254
00:11:13,860 --> 00:11:16,800
definition language uh it's just defined

255
00:11:16,800 --> 00:11:19,079
by I mean actually it was originally by

256
00:11:19,079 --> 00:11:21,060
Facebook now it's by the graphql

257
00:11:21,060 --> 00:11:23,459
foundation uh which is we'll see

258
00:11:23,459 --> 00:11:25,440
something similar to how strong

259
00:11:25,440 --> 00:11:28,740
similarities to Json so the schema is

260
00:11:28,740 --> 00:11:30,420
just like let's say the big picture the

261
00:11:30,420 --> 00:11:33,060
like the database now on top of that we

262
00:11:33,060 --> 00:11:35,399
have something called the object so the

263
00:11:35,399 --> 00:11:39,120
object is uh kind of like the the type

264
00:11:39,120 --> 00:11:42,360
of operation that we want to uh we want

265
00:11:42,360 --> 00:11:45,060
to retrieve we want to uh deliver to the

266
00:11:45,060 --> 00:11:48,720
user and inside each object we have the

267
00:11:48,720 --> 00:11:52,140
field now the field is what specify the

268
00:11:52,140 --> 00:11:54,839
specifies the values for an object so

269
00:11:54,839 --> 00:11:57,060
here we have a very very easy example

270
00:11:57,060 --> 00:11:58,140
here

271
00:11:58,140 --> 00:12:02,220
so the schema is of type user now we

272
00:12:02,220 --> 00:12:06,480
have an ID the ID is the field of type

273
00:12:06,480 --> 00:12:09,140
ID it is a built-in

274
00:12:09,140 --> 00:12:12,480
type of graphql but also we have the

275
00:12:12,480 --> 00:12:16,680
name and the name is as usual a string

276
00:12:16,680 --> 00:12:19,140
and all this makes the object now we

277
00:12:19,140 --> 00:12:21,120
have another object which is the type

278
00:12:21,120 --> 00:12:22,760
order

279
00:12:22,760 --> 00:12:25,860
and here is kind of like a table if you

280
00:12:25,860 --> 00:12:28,920
want to stimulate this to uh like a SQL

281
00:12:28,920 --> 00:12:32,220
uh database and you have also a user ID

282
00:12:32,220 --> 00:12:34,980
now a user ID here in this case is of a

283
00:12:34,980 --> 00:12:37,800
type user now user is the type that we

284
00:12:37,800 --> 00:12:40,320
created so this is called basically an

285
00:12:40,320 --> 00:12:43,260
edge or it's just a relationship we can

286
00:12:43,260 --> 00:12:45,420
create relationships in the graphql

287
00:12:45,420 --> 00:12:48,060
because at the end if you remember what

288
00:12:48,060 --> 00:12:50,160
we want to do is we want to query once

289
00:12:50,160 --> 00:12:52,380
and get all the necessarily information

290
00:12:52,380 --> 00:12:54,779
that we want so in this case we could do

291
00:12:54,779 --> 00:12:57,480
we could get orders and we get we could

292
00:12:57,480 --> 00:13:00,420
get also the user that order that we

293
00:13:00,420 --> 00:13:02,399
could do it even more complex and create

294
00:13:02,399 --> 00:13:04,980
a bi-directional relationship between

295
00:13:04,980 --> 00:13:08,040
the orders and users and we can query

296
00:13:08,040 --> 00:13:12,180
either to get uh the rest okay but this

297
00:13:12,180 --> 00:13:14,100
just gets more complicated it's one

298
00:13:14,100 --> 00:13:17,220
possibility but this is just a very

299
00:13:17,220 --> 00:13:20,760
simple example of a graphql schema

300
00:13:20,760 --> 00:13:23,940
now uh we mentioned about the uh the

301
00:13:23,940 --> 00:13:26,880
schema we have this uh information that

302
00:13:26,880 --> 00:13:28,500
can be queried so what does that mean

303
00:13:28,500 --> 00:13:30,420
what can we do with that so there are

304
00:13:30,420 --> 00:13:33,959
three main operations in graphql one of

305
00:13:33,959 --> 00:13:36,839
them or probably the first one is the

306
00:13:36,839 --> 00:13:39,420
query query is just a read only it's

307
00:13:39,420 --> 00:13:43,260
just like a get request okay uh what we

308
00:13:43,260 --> 00:13:45,600
do here is just read only information

309
00:13:45,600 --> 00:13:48,240
about the server about some endpoint I

310
00:13:48,240 --> 00:13:51,120
want to get all the the the users that

311
00:13:51,120 --> 00:13:53,700
recently uh signed up to to my

312
00:13:53,700 --> 00:13:56,459
application I want to get all the the

313
00:13:56,459 --> 00:14:00,120
last 10 orders that were uh order in my

314
00:14:00,120 --> 00:14:02,940
in my application nothing else if you

315
00:14:02,940 --> 00:14:06,240
try by a query if you try to write data

316
00:14:06,240 --> 00:14:08,820
if you try to change data that's not

317
00:14:08,820 --> 00:14:10,019
going to work and it doesn't matter if

318
00:14:10,019 --> 00:14:12,899
you are the uh the developer it doesn't

319
00:14:12,899 --> 00:14:15,240
it's not going to work now another one

320
00:14:15,240 --> 00:14:18,420
is limitation now the mutation is where

321
00:14:18,420 --> 00:14:20,399
things start to get a little bit fun

322
00:14:20,399 --> 00:14:22,920
because mutation means that you're going

323
00:14:22,920 --> 00:14:25,560
to change data okay this is like if we

324
00:14:25,560 --> 00:14:29,220
compare back again to rest so uh the

325
00:14:29,220 --> 00:14:32,639
mutation is kind of uh right which means

326
00:14:32,639 --> 00:14:36,480
create add change data or even delete

327
00:14:36,480 --> 00:14:39,660
data but also at the same time we can

328
00:14:39,660 --> 00:14:42,839
read data from the server

329
00:14:42,839 --> 00:14:45,839
and lastly we have the third uh we have

330
00:14:45,839 --> 00:14:47,579
a third operation which is their

331
00:14:47,579 --> 00:14:50,699
subscription now the subscription is uh

332
00:14:50,699 --> 00:14:52,860
kind of if you if you are familiar with

333
00:14:52,860 --> 00:14:54,120
websockets

334
00:14:54,120 --> 00:14:56,579
so it's basically kind of

335
00:14:56,579 --> 00:14:57,180
um

336
00:14:57,180 --> 00:15:00,839
uh kind of push notifications with uh

337
00:15:00,839 --> 00:15:02,639
with the client it could be only

338
00:15:02,639 --> 00:15:04,320
directional from the server to the

339
00:15:04,320 --> 00:15:07,079
client or vice versa or it could be

340
00:15:07,079 --> 00:15:09,060
bi-directional between both let's say

341
00:15:09,060 --> 00:15:11,880
we're waiting for uh the user to upload

342
00:15:11,880 --> 00:15:15,480
a file so once we get a file so then the

343
00:15:15,480 --> 00:15:17,639
server gets some sort of a notification

344
00:15:17,639 --> 00:15:20,459
and so then the server will send uh an

345
00:15:20,459 --> 00:15:21,180
email

346
00:15:21,180 --> 00:15:24,180
uh but it I'm saying it's commonly with

347
00:15:24,180 --> 00:15:25,800
websockets but it could work with

348
00:15:25,800 --> 00:15:29,279
different Technologies now uh here what

349
00:15:29,279 --> 00:15:31,740
we do is we first of all Define the

350
00:15:31,740 --> 00:15:34,380
schema so the schema says I want to

351
00:15:34,380 --> 00:15:38,459
query so the query is uh in this case

352
00:15:38,459 --> 00:15:41,040
just the user it means if you want to

353
00:15:41,040 --> 00:15:44,760
read the uh data based on my schema so

354
00:15:44,760 --> 00:15:47,639
you can do it as of this example only to

355
00:15:47,639 --> 00:15:50,279
the user's object okay if I try to read

356
00:15:50,279 --> 00:15:52,320
let's say to the orders by using this

357
00:15:52,320 --> 00:15:55,860
example so no nobody will be able to do

358
00:15:55,860 --> 00:15:58,920
so because there is no uh permission

359
00:15:58,920 --> 00:16:01,440
actually there is no indication that a

360
00:16:01,440 --> 00:16:04,260
user can actually read the object until

361
00:16:04,260 --> 00:16:07,320
we put it inside here

362
00:16:07,320 --> 00:16:08,579
so

363
00:16:08,579 --> 00:16:12,540
graphql is very cool oh my bad

364
00:16:12,540 --> 00:16:16,800
Okay so let's just dive a little bit

365
00:16:16,800 --> 00:16:20,160
deeper into this what exactly or how we

366
00:16:20,160 --> 00:16:23,100
can uh do a query so if you want to get

367
00:16:23,100 --> 00:16:26,699
a user's name okay so we do this syntax

368
00:16:26,699 --> 00:16:29,040
which I don't know if you are a fan of

369
00:16:29,040 --> 00:16:31,019
python or maybe not if you like

370
00:16:31,019 --> 00:16:34,560
JavaScript Json uh Java you would like

371
00:16:34,560 --> 00:16:37,380
this as well uh so we have a query here

372
00:16:37,380 --> 00:16:40,380
okay which is like the uh the main

373
00:16:40,380 --> 00:16:42,660
operation in this case and then we have

374
00:16:42,660 --> 00:16:44,759
what it's called a top level

375
00:16:44,759 --> 00:16:48,600
um field which is users it's kind of the

376
00:16:48,600 --> 00:16:51,120
the name or of the endpoint let's say

377
00:16:51,120 --> 00:16:53,759
comparing this to restful and the field

378
00:16:53,759 --> 00:16:55,740
that we want to get okay a user could

379
00:16:55,740 --> 00:16:58,980
have a a name it could have an age email

380
00:16:58,980 --> 00:17:01,680
ID many other information so in this

381
00:17:01,680 --> 00:17:04,020
case we want to get only the name so

382
00:17:04,020 --> 00:17:07,140
this is on the left side we get the uh

383
00:17:07,140 --> 00:17:09,780
we we write our request on the right

384
00:17:09,780 --> 00:17:12,839
side we have our response okay so the

385
00:17:12,839 --> 00:17:14,939
name here I'll help I pronounce it well

386
00:17:14,939 --> 00:17:17,699
is all inverse it right

387
00:17:17,699 --> 00:17:20,520
Swiss president uh this is not by

388
00:17:20,520 --> 00:17:25,140
coincidence and this is just a very

389
00:17:25,140 --> 00:17:27,599
simple query okay from here uh you could

390
00:17:27,599 --> 00:17:30,059
just put more and more

391
00:17:30,059 --> 00:17:32,220
um Fields okay I mean there's nothing

392
00:17:32,220 --> 00:17:35,100
from the from the client perspective

393
00:17:35,100 --> 00:17:38,880
that uh avoids or prevents me as a user

394
00:17:38,880 --> 00:17:41,160
to put more and more Fields okay so

395
00:17:41,160 --> 00:17:44,220
we'll see that later uh this is uh maybe

396
00:17:44,220 --> 00:17:48,299
an attack surface for graphql

397
00:17:48,299 --> 00:17:51,360
now what about the mutation so the

398
00:17:51,360 --> 00:17:53,340
mutation first of all as you can see

399
00:17:53,340 --> 00:17:55,919
here we need to add that to the schema

400
00:17:55,919 --> 00:17:57,840
we need to say hey I want to use because

401
00:17:57,840 --> 00:18:00,000
at the end we can have in a complex

402
00:18:00,000 --> 00:18:02,460
environment like you know uh big

403
00:18:02,460 --> 00:18:04,500
companies you might have different

404
00:18:04,500 --> 00:18:06,840
schemas which is very powerful in

405
00:18:06,840 --> 00:18:09,299
graphql you might have on schema for

406
00:18:09,299 --> 00:18:11,039
development you might have a schema for

407
00:18:11,039 --> 00:18:13,200
different applications so for this

408
00:18:13,200 --> 00:18:16,140
schema I want to say hey yeah here I

409
00:18:16,140 --> 00:18:18,780
want a mutation okay let's say if we go

410
00:18:18,780 --> 00:18:21,059
back to the weather example so I don't

411
00:18:21,059 --> 00:18:22,559
want any user to change the weather

412
00:18:22,559 --> 00:18:23,940
right because they're going to say now

413
00:18:23,940 --> 00:18:26,880
in Switzerland it's really hot no here

414
00:18:26,880 --> 00:18:30,539
is not it's not Dubai so I want the

415
00:18:30,539 --> 00:18:33,120
users to only query to only read the

416
00:18:33,120 --> 00:18:35,220
data from my server

417
00:18:35,220 --> 00:18:38,100
so uh in this case because I need to

418
00:18:38,100 --> 00:18:40,799
explicitly do that and put the mutation

419
00:18:40,799 --> 00:18:42,860
and it's just very simple mutation

420
00:18:42,860 --> 00:18:46,140
column mutation and then at the bottom

421
00:18:46,140 --> 00:18:48,720
we can see the mutation itself so in

422
00:18:48,720 --> 00:18:51,660
this case it looks a little bit uh uh

423
00:18:51,660 --> 00:18:54,600
jaunty uh basically these are arguments

424
00:18:54,600 --> 00:18:57,120
that we put on just like with any

425
00:18:57,120 --> 00:19:00,179
function there so we have our uh create

426
00:19:00,179 --> 00:19:03,120
user function with the ID the ID is

427
00:19:03,120 --> 00:19:05,280
provided by the front end in this case

428
00:19:05,280 --> 00:19:07,620
is number one so we what we want to do

429
00:19:07,620 --> 00:19:10,260
here is we want to replace some fields

430
00:19:10,260 --> 00:19:13,740
or the name of a user so here we have

431
00:19:13,740 --> 00:19:16,020
the password the password I just made it

432
00:19:16,020 --> 00:19:18,900
up is Swiss in base64 you can check it

433
00:19:18,900 --> 00:19:22,559
out and with the name of Victor Rossi I

434
00:19:22,559 --> 00:19:23,940
don't want to kill the president so

435
00:19:23,940 --> 00:19:26,760
don't don't worry uh and what we want to

436
00:19:26,760 --> 00:19:29,520
do is just specify the three Fields the

437
00:19:29,520 --> 00:19:32,400
ID the password and the name okay just

438
00:19:32,400 --> 00:19:34,020
in case the ID was something completely

439
00:19:34,020 --> 00:19:36,660
different so the response on the right

440
00:19:36,660 --> 00:19:40,740
we just get uh this which means that it

441
00:19:40,740 --> 00:19:43,980
was updated okay so usually what you

442
00:19:43,980 --> 00:19:46,919
request is what you see

443
00:19:46,919 --> 00:19:49,799
um on the response okay so these are the

444
00:19:49,799 --> 00:19:51,419
two main

445
00:19:51,419 --> 00:19:54,360
um operations that we mostly be playing

446
00:19:54,360 --> 00:19:57,299
with the query for read and the mutation

447
00:19:57,299 --> 00:20:02,100
for changing deleting or adding more

448
00:20:02,100 --> 00:20:03,480
data

449
00:20:03,480 --> 00:20:06,780
now uh there's another thing uh because

450
00:20:06,780 --> 00:20:09,240
graphql is a whole full language here

451
00:20:09,240 --> 00:20:12,600
that was created uh there is something

452
00:20:12,600 --> 00:20:14,640
called directives okay if you come from

453
00:20:14,640 --> 00:20:17,100
Python and you know uh like decorators

454
00:20:17,100 --> 00:20:21,120
it's something similar here so what if

455
00:20:21,120 --> 00:20:22,980
you want you know you have your bigquery

456
00:20:22,980 --> 00:20:27,120
but by using this kind of directives you

457
00:20:27,120 --> 00:20:28,919
can change actually the whole Behavior

458
00:20:28,919 --> 00:20:31,260
or how the response is going to look

459
00:20:31,260 --> 00:20:33,299
like why because in some cases you want

460
00:20:33,299 --> 00:20:35,880
to ignore data you want to say hey but

461
00:20:35,880 --> 00:20:38,760
give me this space just in case this is

462
00:20:38,760 --> 00:20:41,460
not true so by this example what we see

463
00:20:41,460 --> 00:20:44,340
is we have the list of users and we want

464
00:20:44,340 --> 00:20:46,980
to get the ID we want to get the name as

465
00:20:46,980 --> 00:20:49,799
well but we want to say hey if the

466
00:20:49,799 --> 00:20:53,940
basics only uh check mark is true okay

467
00:20:53,940 --> 00:20:57,059
which can be retrieved from the from the

468
00:20:57,059 --> 00:20:58,620
front end let's say the user wants to

469
00:20:58,620 --> 00:21:01,260
see how many users are in their database

470
00:21:01,260 --> 00:21:04,740
so just skip the URL okay skip the link

471
00:21:04,740 --> 00:21:07,260
from that response because they all want

472
00:21:07,260 --> 00:21:09,299
to get just is the ID in the name

473
00:21:09,299 --> 00:21:12,240
nothing more okay so there's a few

474
00:21:12,240 --> 00:21:14,820
directives that we can use

475
00:21:14,820 --> 00:21:17,400
um Escape include there are just a few a

476
00:21:17,400 --> 00:21:18,660
few others

477
00:21:18,660 --> 00:21:20,700
uh I think they're like five or seven

478
00:21:20,700 --> 00:21:23,340
maybe we can refer to the RFC for that

479
00:21:23,340 --> 00:21:25,620
uh you will see later on why this is

480
00:21:25,620 --> 00:21:27,840
important again because in this case

481
00:21:27,840 --> 00:21:30,659
this is Skip but if you have include so

482
00:21:30,659 --> 00:21:32,340
you might include the password in some

483
00:21:32,340 --> 00:21:34,380
queries as well

484
00:21:34,380 --> 00:21:36,840
uh also we have something called

485
00:21:36,840 --> 00:21:38,940
fragments I have no idea why they use

486
00:21:38,940 --> 00:21:39,900
this word

487
00:21:39,900 --> 00:21:41,340
I don't know fragments for me I don't

488
00:21:41,340 --> 00:21:43,080
know I come from Android so something

489
00:21:43,080 --> 00:21:46,020
completely different so fragments is the

490
00:21:46,020 --> 00:21:48,840
way of reusing the same uh piece of code

491
00:21:48,840 --> 00:21:52,080
or in this case the same field uh for

492
00:21:52,080 --> 00:21:54,299
different queries let's say you have a

493
00:21:54,299 --> 00:21:57,179
query again for retrieving the user or

494
00:21:57,179 --> 00:22:00,799
the username uh you don't want to type

495
00:22:00,799 --> 00:22:04,380
30 times the user right because there is

496
00:22:04,380 --> 00:22:07,559
some principle called dry or dry don't

497
00:22:07,559 --> 00:22:09,900
repeat yourself so what we do is just we

498
00:22:09,900 --> 00:22:11,880
put these three dots which is called a

499
00:22:11,880 --> 00:22:13,340
spread operator

500
00:22:13,340 --> 00:22:17,159
uh we Define Just some name in this case

501
00:22:17,159 --> 00:22:19,799
it's called same fields and we do

502
00:22:19,799 --> 00:22:22,620
fragment we say okay what the same

503
00:22:22,620 --> 00:22:25,140
fields or the common names uh that you

504
00:22:25,140 --> 00:22:27,480
want to include in every query so we do

505
00:22:27,480 --> 00:22:30,480
ID username email so every query that

506
00:22:30,480 --> 00:22:32,940
includes this spread operator dot dot

507
00:22:32,940 --> 00:22:36,600
dot same uh Fields so automatically it's

508
00:22:36,600 --> 00:22:38,460
going to include this field so in this

509
00:22:38,460 --> 00:22:40,620
case again it's just very simple we have

510
00:22:40,620 --> 00:22:42,780
just three Fields but imagine if you had

511
00:22:42,780 --> 00:22:46,140
12 and you're doing 15 queries so that

512
00:22:46,140 --> 00:22:50,179
will really save us a lot of time

513
00:22:51,000 --> 00:22:54,179
okay and we have one more thing here

514
00:22:54,179 --> 00:22:55,860
there's something called introspection

515
00:22:55,860 --> 00:22:59,640
okay what is introspection so by

516
00:22:59,640 --> 00:23:01,679
introspection we can query the server

517
00:23:01,679 --> 00:23:04,860
and discover we can find out about the

518
00:23:04,860 --> 00:23:09,240
underlying schema types operations uh if

519
00:23:09,240 --> 00:23:11,039
there's a query mutation subscription

520
00:23:11,039 --> 00:23:12,600
directives

521
00:23:12,600 --> 00:23:15,600
everything basically okay it's mainly

522
00:23:15,600 --> 00:23:18,179
for debugging purposes I mean I wouldn't

523
00:23:18,179 --> 00:23:20,100
recommend this in a production

524
00:23:20,100 --> 00:23:21,240
environment

525
00:23:21,240 --> 00:23:24,539
but the problem is that it's enabled by

526
00:23:24,539 --> 00:23:26,460
default okay

527
00:23:26,460 --> 00:23:29,820
it over okay you can use no matter what

528
00:23:29,820 --> 00:23:33,059
kind of uh uh implementation and it's

529
00:23:33,059 --> 00:23:35,640
going to be enabled by default

530
00:23:35,640 --> 00:23:39,480
the problem is even worse with some

531
00:23:39,480 --> 00:23:42,120
um implementations specifically in Java

532
00:23:42,120 --> 00:23:43,020
and go

533
00:23:43,020 --> 00:23:45,659
because you cannot even disable it what

534
00:23:45,659 --> 00:23:48,000
do you do uh there are some workarounds

535
00:23:48,000 --> 00:23:51,299
there so just in case you are using Java

536
00:23:51,299 --> 00:23:54,600
and go make sure you disable this but

537
00:23:54,600 --> 00:23:56,940
what exactly is the introspection so

538
00:23:56,940 --> 00:23:58,559
introspection is

539
00:23:58,559 --> 00:24:01,200
uh defining the query and we have our

540
00:24:01,200 --> 00:24:03,720
like magic field here underscore

541
00:24:03,720 --> 00:24:05,520
underscore schema in this case what we

542
00:24:05,520 --> 00:24:08,220
want to get is the whole schema like

543
00:24:08,220 --> 00:24:10,740
namely the whole database

544
00:24:10,740 --> 00:24:13,620
and we want to get specifically the

545
00:24:13,620 --> 00:24:18,179
names uh the name field here now what we

546
00:24:18,179 --> 00:24:20,280
get I mean this is just an example but

547
00:24:20,280 --> 00:24:23,460
we get a full schema here on the right

548
00:24:23,460 --> 00:24:27,480
we get a query we get user which is the

549
00:24:27,480 --> 00:24:30,059
name of the field and we see at the

550
00:24:30,059 --> 00:24:33,720
bottom we see the password field okay so

551
00:24:33,720 --> 00:24:35,640
if we manipulate this a little bit more

552
00:24:35,640 --> 00:24:38,880
we'll see later that we can even query

553
00:24:38,880 --> 00:24:41,039
and get the password for different users

554
00:24:41,039 --> 00:24:43,200
of course if there is no the proper

555
00:24:43,200 --> 00:24:46,440
configuration in the back end but this

556
00:24:46,440 --> 00:24:49,740
is just their part of graphql

557
00:24:49,740 --> 00:24:53,220
so say okay uh that was probably a lot

558
00:24:53,220 --> 00:24:54,840
of information

559
00:24:54,840 --> 00:24:58,380
so don't stress this is just art because

560
00:24:58,380 --> 00:25:00,360
there is something called graphql for

561
00:25:00,360 --> 00:25:04,020
Jagger uh this is kind of a

562
00:25:04,020 --> 00:25:07,679
uml or like kind of a craft mode of your

563
00:25:07,679 --> 00:25:11,520
whole uh schema types and everything uh

564
00:25:11,520 --> 00:25:14,240
it actually draws all the

565
00:25:14,240 --> 00:25:16,340
relationships between the different

566
00:25:16,340 --> 00:25:19,740
objects as well uh this is a little bit

567
00:25:19,740 --> 00:25:21,299
complex that's what it looks like but

568
00:25:21,299 --> 00:25:24,720
it's just two reinforced that if for any

569
00:25:24,720 --> 00:25:27,000
reason we have a database I mean either

570
00:25:27,000 --> 00:25:30,059
we are defending or attacking uh so we

571
00:25:30,059 --> 00:25:32,820
have a way of visualize that in a much

572
00:25:32,820 --> 00:25:35,880
more convenient way okay and it's not

573
00:25:35,880 --> 00:25:38,159
just you know kind of uh having all text

574
00:25:38,159 --> 00:25:40,380
it could be much easier of course

575
00:25:40,380 --> 00:25:43,679
willing to manually look at all this and

576
00:25:43,679 --> 00:25:45,779
find the relationships between the

577
00:25:45,779 --> 00:25:48,840
dangerous objects and this is free

578
00:25:48,840 --> 00:25:50,880
actually you can just download it from

579
00:25:50,880 --> 00:25:53,880
GitHub

580
00:25:54,720 --> 00:25:57,419
um a few endpoints a few ways where we

581
00:25:57,419 --> 00:25:59,340
can find graphql

582
00:25:59,340 --> 00:26:03,000
is of course on the flash on the root uh

583
00:26:03,000 --> 00:26:03,900
path

584
00:26:03,900 --> 00:26:07,039
just because uh but there are a few more

585
00:26:07,039 --> 00:26:09,600
uh we can see this of course on the

586
00:26:09,600 --> 00:26:12,299
slash graphql uh there's a slightly

587
00:26:12,299 --> 00:26:14,900
different version graph V ql

588
00:26:14,900 --> 00:26:18,059
we have the V1 you know version one

589
00:26:18,059 --> 00:26:21,360
version two version three slash graphql

590
00:26:21,360 --> 00:26:26,940
we have slash API graphql API graphql uh

591
00:26:26,940 --> 00:26:29,279
flash console okay I have no idea why

592
00:26:29,279 --> 00:26:32,880
they made it up this way but it works uh

593
00:26:32,880 --> 00:26:34,380
slash playground

594
00:26:34,380 --> 00:26:38,220
yeah that sounds very cool uh slash gql

595
00:26:38,220 --> 00:26:42,240
slash query and it's not really uh for

596
00:26:42,240 --> 00:26:44,279
only queries okay this is the graphql

597
00:26:44,279 --> 00:26:47,640
endpoint or simply index.php and

598
00:26:47,640 --> 00:26:51,779
question mark graphql So this means that

599
00:26:51,779 --> 00:26:53,580
again if we are trying to defend

600
00:26:53,580 --> 00:26:55,860
ourselves just make sure that

601
00:26:55,860 --> 00:26:58,380
only the right people or from the right

602
00:26:58,380 --> 00:27:00,360
sources they have access to your

603
00:27:00,360 --> 00:27:02,820
endpoint okay and for any reason you

604
00:27:02,820 --> 00:27:06,480
don't have any app debugging app IDE or

605
00:27:06,480 --> 00:27:09,779
something else running in the background

606
00:27:09,779 --> 00:27:12,900
so now we spell everything about graphql

607
00:27:12,900 --> 00:27:16,919
we need to compare now uh graphql and

608
00:27:16,919 --> 00:27:19,860
see more advantages versus

609
00:27:19,860 --> 00:27:22,760
um the rest API

610
00:27:22,760 --> 00:27:26,340
so as we mentioned earlier we have the

611
00:27:26,340 --> 00:27:27,120
um

612
00:27:27,120 --> 00:27:29,580
ability of

613
00:27:29,580 --> 00:27:32,520
um just query one single endpoint in

614
00:27:32,520 --> 00:27:36,440
graphql uh just name any slash graphql

615
00:27:36,440 --> 00:27:40,140
and by rest apis you probably have many

616
00:27:40,140 --> 00:27:42,659
of them okay if you just Google quickly

617
00:27:42,659 --> 00:27:44,880
for the weather forecast app Accuweather

618
00:27:44,880 --> 00:27:48,299
uh YouTube you probably have dozens if

619
00:27:48,299 --> 00:27:50,580
not hundreds of them and each one with

620
00:27:50,580 --> 00:27:54,480
different specifications so this makes a

621
00:27:54,480 --> 00:27:57,000
little bit harder because uh first of

622
00:27:57,000 --> 00:27:58,380
all you know maintaining all of these

623
00:27:58,380 --> 00:28:01,740
you forget this is internal this is not

624
00:28:01,740 --> 00:28:04,559
um who has access to this one how many

625
00:28:04,559 --> 00:28:06,179
fields if you're required to have

626
00:28:06,179 --> 00:28:10,380
authorization if it's just SSO if not so

627
00:28:10,380 --> 00:28:12,659
this makes things a little bit more

628
00:28:12,659 --> 00:28:14,760
complicated

629
00:28:14,760 --> 00:28:17,340
um and uh if we talk about let's say

630
00:28:17,340 --> 00:28:21,900
graphql so it's just much simpler we

631
00:28:21,900 --> 00:28:23,400
also I mean for sure we can have more

632
00:28:23,400 --> 00:28:25,200
than one endpoint but usually it's

633
00:28:25,200 --> 00:28:28,500
enough with one second of all as we

634
00:28:28,500 --> 00:28:30,000
mentioned earlier

635
00:28:30,000 --> 00:28:32,159
uh with graph field we use only post

636
00:28:32,159 --> 00:28:34,679
methods there is a way actually to use

637
00:28:34,679 --> 00:28:36,299
get methods but it's not recommended

638
00:28:36,299 --> 00:28:38,900
because that will lead to some csrf tags

639
00:28:38,900 --> 00:28:43,500
uh but technically you can uh but you

640
00:28:43,500 --> 00:28:44,460
are

641
00:28:44,460 --> 00:28:47,039
um using usually post methods but by

642
00:28:47,039 --> 00:28:49,559
using rest again you need to deal with

643
00:28:49,559 --> 00:28:53,700
delete put Patch head get options

644
00:28:53,700 --> 00:28:57,740
are just too many uh HTTP methods there

645
00:28:57,740 --> 00:29:00,539
uh another another

646
00:29:00,539 --> 00:29:03,600
um Advantage here of graphql is uh it's

647
00:29:03,600 --> 00:29:05,220
called over or under fetching which

648
00:29:05,220 --> 00:29:06,600
means either you get more information

649
00:29:06,600 --> 00:29:08,760
that you requested or you get less

650
00:29:08,760 --> 00:29:10,559
information but you don't get the exact

651
00:29:10,559 --> 00:29:13,080
information in restful apis so by

652
00:29:13,080 --> 00:29:15,299
graphql you get exactly what you need

653
00:29:15,299 --> 00:29:17,640
you ask for the user you get the user

654
00:29:17,640 --> 00:29:19,740
you ask for the name only so you get

655
00:29:19,740 --> 00:29:21,179
only the name you don't get the full

656
00:29:21,179 --> 00:29:23,340
description or the user with all the

657
00:29:23,340 --> 00:29:25,860
details as well

658
00:29:25,860 --> 00:29:28,799
um and the front end yeah it's

659
00:29:28,799 --> 00:29:31,140
it's an account here so the front end

660
00:29:31,140 --> 00:29:33,539
must match exactly of the changes that

661
00:29:33,539 --> 00:29:37,200
you do with the back end and in graphql

662
00:29:37,200 --> 00:29:40,380
probably you have your PM you have your

663
00:29:40,380 --> 00:29:43,500
uh customers they want to do something

664
00:29:43,500 --> 00:29:45,779
just to specifically to the API they

665
00:29:45,779 --> 00:29:47,640
don't want to be called orders they want

666
00:29:47,640 --> 00:29:50,460
to be called o so what you do now you

667
00:29:50,460 --> 00:29:51,960
need to change everything in the front

668
00:29:51,960 --> 00:29:53,880
end you need to change everything in the

669
00:29:53,880 --> 00:29:56,159
backing as well which is time consuming

670
00:29:56,159 --> 00:29:58,140
in graphql it's just going to be the

671
00:29:58,140 --> 00:30:00,720
same endpoint graphql and all you change

672
00:30:00,720 --> 00:30:03,240
specifically in the back end or maybe in

673
00:30:03,240 --> 00:30:05,279
just in the in the front end about what

674
00:30:05,279 --> 00:30:08,159
your customer your PM wanted to change

675
00:30:08,159 --> 00:30:10,620
if you just a few Fields okay just

676
00:30:10,620 --> 00:30:12,539
remove them add them and just play

677
00:30:12,539 --> 00:30:15,840
around with that but it's much more

678
00:30:15,840 --> 00:30:20,700
um cost effective also by using graphql

679
00:30:20,700 --> 00:30:23,880
um another Advantage here is that uh we

680
00:30:23,880 --> 00:30:27,059
mentioned that it's strongly typed you

681
00:30:27,059 --> 00:30:28,860
cannot mess around with different types

682
00:30:28,860 --> 00:30:32,220
if the user put a number one as a string

683
00:30:32,220 --> 00:30:35,580
where it should be an integer or if the

684
00:30:35,580 --> 00:30:37,500
user you know because that goals will

685
00:30:37,500 --> 00:30:39,299
lead to some attacks if on the phone

686
00:30:39,299 --> 00:30:41,340
number the user put the email not

687
00:30:41,340 --> 00:30:43,140
because they made a mistake but because

688
00:30:43,140 --> 00:30:46,919
they wanted to uh enumerate or try to

689
00:30:46,919 --> 00:30:49,559
attack your server so that could be

690
00:30:49,559 --> 00:30:51,919
directly

691
00:30:51,919 --> 00:30:54,360
rejected by the server by graphql

692
00:30:54,360 --> 00:30:56,640
because you asked specifically for a

693
00:30:56,640 --> 00:30:58,799
type and the rest yeah you could do that

694
00:30:58,799 --> 00:31:01,140
you could still of course in the back

695
00:31:01,140 --> 00:31:03,360
end you know compare uh you know PHP

696
00:31:03,360 --> 00:31:05,760
Java whatever JavaScript you could use

697
00:31:05,760 --> 00:31:08,700
the the three uh equal signs to compare

698
00:31:08,700 --> 00:31:10,980
both the type and the value but you know

699
00:31:10,980 --> 00:31:12,899
you would need to do that for every

700
00:31:12,899 --> 00:31:16,440
single value and here it just made by

701
00:31:16,440 --> 00:31:18,659
you know the schema it says you get only

702
00:31:18,659 --> 00:31:21,140
that type and that's all

703
00:31:21,140 --> 00:31:24,360
besides that in graphql you also have

704
00:31:24,360 --> 00:31:26,880
the ability to create your own type okay

705
00:31:26,880 --> 00:31:30,480
you create your user type like we did

706
00:31:30,480 --> 00:31:32,640
before you create kind of like your

707
00:31:32,640 --> 00:31:37,440
class with all your um a Fields with all

708
00:31:37,440 --> 00:31:38,600
your different

709
00:31:38,600 --> 00:31:41,640
values that you request so it's much

710
00:31:41,640 --> 00:31:44,520
more granular that just rest API but

711
00:31:44,520 --> 00:31:47,159
there's one thing at least here that

712
00:31:47,159 --> 00:31:50,220
rest apis are still good I mean we need

713
00:31:50,220 --> 00:31:53,279
to still consider uh if we really do

714
00:31:53,279 --> 00:31:56,460
some complex and very very uh you know

715
00:31:56,460 --> 00:31:57,720
nested

716
00:31:57,720 --> 00:32:00,559
um queries instead um

717
00:32:00,559 --> 00:32:03,480
apis with

718
00:32:03,480 --> 00:32:06,120
um graphql it's a little bit different

719
00:32:06,120 --> 00:32:09,240
here because with uh you know imagine

720
00:32:09,240 --> 00:32:11,159
like you Nest there's more that could

721
00:32:11,159 --> 00:32:13,380
lead to the null of service or simply

722
00:32:13,380 --> 00:32:15,360
crash the graphql endpoint if you don't

723
00:32:15,360 --> 00:32:18,059
do it properly or even if you do it and

724
00:32:18,059 --> 00:32:20,600
some attacker plays around with your API

725
00:32:20,600 --> 00:32:23,760
and in uh just the common the

726
00:32:23,760 --> 00:32:26,220
traditional restful API that will be

727
00:32:26,220 --> 00:32:30,059
just easier and also by caching

728
00:32:30,059 --> 00:32:33,600
responses so restful API it will be

729
00:32:33,600 --> 00:32:36,179
better because you know the API will

730
00:32:36,179 --> 00:32:38,820
always return the same response but in

731
00:32:38,820 --> 00:32:42,179
graphql is enough that you changes one

732
00:32:42,179 --> 00:32:44,220
field on the same endpoint the same

733
00:32:44,220 --> 00:32:45,899
operation and you're going to get a

734
00:32:45,899 --> 00:32:48,240
completely different response so it's

735
00:32:48,240 --> 00:32:51,360
it's still possible but it's just a

736
00:32:51,360 --> 00:32:53,039
little bit more complicated to Cache

737
00:32:53,039 --> 00:32:55,200
your responses so it means that if the

738
00:32:55,200 --> 00:32:58,679
response let's say last 10 users that a

739
00:32:58,679 --> 00:33:02,039
couple of used users are trying to to uh

740
00:33:02,039 --> 00:33:04,980
to query to your server so it's gonna

741
00:33:04,980 --> 00:33:07,080
take a little bit more uh because the

742
00:33:07,080 --> 00:33:08,820
server will need to again process that

743
00:33:08,820 --> 00:33:11,880
and retrieve back to the user so only

744
00:33:11,880 --> 00:33:15,240
for this reason uh I would recommend to

745
00:33:15,240 --> 00:33:17,820
uh or I mean at the end you could you

746
00:33:17,820 --> 00:33:19,740
could work with both you could combine

747
00:33:19,740 --> 00:33:22,740
graphql and apis so specifically for

748
00:33:22,740 --> 00:33:25,380
that uh for those complex queries so you

749
00:33:25,380 --> 00:33:26,880
can use better

750
00:33:26,880 --> 00:33:29,279
um restful apis

751
00:33:29,279 --> 00:33:32,220
so this is a very interesting example

752
00:33:32,220 --> 00:33:35,880
here just to illustrate what graphql can

753
00:33:35,880 --> 00:33:37,919
do here so at the top you can see the

754
00:33:37,919 --> 00:33:41,700
restful API you have your api.com burger

755
00:33:41,700 --> 00:33:44,760
you get everything okay you get the bond

756
00:33:44,760 --> 00:33:46,380
you get the bread you get the Paddy you

757
00:33:46,380 --> 00:33:48,840
get everything you get there's no way to

758
00:33:48,840 --> 00:33:52,260
specify I want just this and that uh

759
00:33:52,260 --> 00:33:54,899
feeling field or in this case

760
00:33:54,899 --> 00:33:57,240
um uh pieces

761
00:33:57,240 --> 00:34:00,659
um I mean of course you can filter by in

762
00:34:00,659 --> 00:34:02,940
the back end you could apply some limits

763
00:34:02,940 --> 00:34:05,220
but it's harder I mean it's not by

764
00:34:05,220 --> 00:34:08,580
Design and here in graphql just specify

765
00:34:08,580 --> 00:34:11,280
what you want you said ban pad a bond

766
00:34:11,280 --> 00:34:14,040
letters letters at the bottom so this is

767
00:34:14,040 --> 00:34:15,839
what you get okay as you can see there's

768
00:34:15,839 --> 00:34:18,659
no cheese here okay

769
00:34:18,659 --> 00:34:23,040
um and this is a graphql versus uh rest

770
00:34:23,040 --> 00:34:24,780
API

771
00:34:24,780 --> 00:34:28,440
now let's see some usage uh statistics

772
00:34:28,440 --> 00:34:31,980
who uses that why they do that

773
00:34:31,980 --> 00:34:35,820
so graphql is everywhere okay sometimes

774
00:34:35,820 --> 00:34:38,760
we don't realize about that but it's

775
00:34:38,760 --> 00:34:39,899
actually

776
00:34:39,899 --> 00:34:41,399
there

777
00:34:41,399 --> 00:34:44,460
so this graph was taken from uh Wonder

778
00:34:44,460 --> 00:34:47,119
graph uh it just

779
00:34:47,119 --> 00:34:50,580
illustrates the popularity of graphql

780
00:34:50,580 --> 00:34:52,379
this is the amount this is until

781
00:34:52,379 --> 00:34:55,859
actually two years ago but it reflects

782
00:34:55,859 --> 00:34:59,460
here the amount of uh there's both

783
00:34:59,460 --> 00:35:01,980
um four million of repositories for

784
00:35:01,980 --> 00:35:04,380
millions that were created just with the

785
00:35:04,380 --> 00:35:07,200
word or with some tool regarding uh

786
00:35:07,200 --> 00:35:09,359
graphql okay and again this is just

787
00:35:09,359 --> 00:35:12,000
GitHub uh we could even have more data

788
00:35:12,000 --> 00:35:15,240
about GitHub feedback and other uh

789
00:35:15,240 --> 00:35:18,599
Technologies or platforms uh but as you

790
00:35:18,599 --> 00:35:20,339
can see also their big technology

791
00:35:20,339 --> 00:35:23,700
companies shows like Facebook GitHub

792
00:35:23,700 --> 00:35:27,000
Pinterest Coursera Shopify and there's

793
00:35:27,000 --> 00:35:29,700
just many many companies that adopted

794
00:35:29,700 --> 00:35:33,119
already this uh technology and they're

795
00:35:33,119 --> 00:35:37,320
even contributing to the advance of this

796
00:35:37,320 --> 00:35:39,480
uh great technology here

797
00:35:39,480 --> 00:35:42,060
and again this is just an example taken

798
00:35:42,060 --> 00:35:44,760
from graphql.org uh they're just

799
00:35:44,760 --> 00:35:47,940
Millions probably other uh websites that

800
00:35:47,940 --> 00:35:50,579
are using this technology as well and

801
00:35:50,579 --> 00:35:52,440
the reason you know because it's just

802
00:35:52,440 --> 00:35:55,500
much more flexible as we talked earlier

803
00:35:55,500 --> 00:35:57,000
now

804
00:35:57,000 --> 00:35:59,640
let's go to the home part let's see a

805
00:35:59,640 --> 00:36:01,980
real exploit scenario of how we can take

806
00:36:01,980 --> 00:36:04,560
advantage of graphql I mean it's great

807
00:36:04,560 --> 00:36:09,660
but everything comes with their uh

808
00:36:09,660 --> 00:36:13,619
uh their part on the side so uh not a

809
00:36:13,619 --> 00:36:15,480
long time ago there was an attack in

810
00:36:15,480 --> 00:36:18,180
Shopify Shopify I guess you are familiar

811
00:36:18,180 --> 00:36:21,000
with it's uh it's a website it's an

812
00:36:21,000 --> 00:36:22,500
e-commerce that you can mount you can

813
00:36:22,500 --> 00:36:25,320
use and sell your stuff you can kind of

814
00:36:25,320 --> 00:36:28,740
use their service for that and what's

815
00:36:28,740 --> 00:36:30,900
more fun about this is a Shopify they

816
00:36:30,900 --> 00:36:33,359
actually as we mentioned they contribute

817
00:36:33,359 --> 00:36:36,540
and the they develop tools for graphql

818
00:36:36,540 --> 00:36:39,660
so they had a vulnerability uh in their

819
00:36:39,660 --> 00:36:43,260
website and the way of exploiting it was

820
00:36:43,260 --> 00:36:46,320
to first uh enumerate to First discover

821
00:36:46,320 --> 00:36:49,440
what's going on analyzing the endpoints

822
00:36:49,440 --> 00:36:52,260
analyzing the uh fields that can be sent

823
00:36:52,260 --> 00:36:55,980
to the uh to Shopify uh of course it's

824
00:36:55,980 --> 00:36:57,839
you know it takes it sounds maybe easy

825
00:36:57,839 --> 00:37:01,020
but it takes a lot of effort here and

826
00:37:01,020 --> 00:37:03,660
once that uh the endpoint that was

827
00:37:03,660 --> 00:37:05,820
actually lacking authorization

828
00:37:05,820 --> 00:37:08,099
it was found

829
00:37:08,099 --> 00:37:10,020
then the email basically what happened

830
00:37:10,020 --> 00:37:12,300
is that you could set a mutation

831
00:37:12,300 --> 00:37:14,220
to an endpoint and it was an

832
00:37:14,220 --> 00:37:16,320
authorization it means you could update

833
00:37:16,320 --> 00:37:18,240
any email just by changing your email

834
00:37:18,240 --> 00:37:21,780
okay you just found the the endpoint

835
00:37:21,780 --> 00:37:24,000
changing your customers email so then

836
00:37:24,000 --> 00:37:26,160
you just change that you simply change

837
00:37:26,160 --> 00:37:29,280
the endpoint or the host where you're uh

838
00:37:29,280 --> 00:37:31,320
your victim is and you could change

839
00:37:31,320 --> 00:37:33,839
their every single customer's email as

840
00:37:33,839 --> 00:37:34,680
well

841
00:37:34,680 --> 00:37:38,820
so after manipulating the mutation we

842
00:37:38,820 --> 00:37:40,920
can just simply send that you know with

843
00:37:40,920 --> 00:37:43,980
any proxy zap verb whatever field layer

844
00:37:43,980 --> 00:37:47,280
just manually with the c URL and that

845
00:37:47,280 --> 00:37:50,160
was enough just to

846
00:37:50,160 --> 00:37:53,700
um exploit that so let's see this in a

847
00:37:53,700 --> 00:37:55,440
more technical way we have here the

848
00:37:55,440 --> 00:38:00,660
mutation that was in um in Shopify so

849
00:38:00,660 --> 00:38:02,460
email Center configuration update

850
00:38:02,460 --> 00:38:06,180
nothing really that tells us a lot but

851
00:38:06,180 --> 00:38:10,260
here we can see that the uh the ID that

852
00:38:10,260 --> 00:38:13,859
was sent is basically the email okay

853
00:38:13,859 --> 00:38:16,560
we could figure it out that there is no

854
00:38:16,560 --> 00:38:18,960
really uh authorization at least from

855
00:38:18,960 --> 00:38:21,180
this on this side we don't send any

856
00:38:21,180 --> 00:38:25,260
token we don't send any uh API key or

857
00:38:25,260 --> 00:38:28,800
any password Here uh to the endpoint so

858
00:38:28,800 --> 00:38:30,960
that could be one way of identifying

859
00:38:30,960 --> 00:38:33,540
that there is a vulnerability here

860
00:38:33,540 --> 00:38:35,760
then we could just play around with the

861
00:38:35,760 --> 00:38:37,560
different fields we could add more

862
00:38:37,560 --> 00:38:40,020
fields we could just you know uh Delete

863
00:38:40,020 --> 00:38:43,380
or add some arguments there and this is

864
00:38:43,380 --> 00:38:45,060
just a screenshot of

865
00:38:45,060 --> 00:38:48,119
um how it looks like in the in this

866
00:38:48,119 --> 00:38:52,740
impostment and lastly this is how we can

867
00:38:52,740 --> 00:38:55,740
change the customers email here again

868
00:38:55,740 --> 00:38:58,260
now this is just one example there could

869
00:38:58,260 --> 00:39:00,900
be many many other examples that we can

870
00:39:00,900 --> 00:39:02,579
see shortly

871
00:39:02,579 --> 00:39:04,800
so

872
00:39:04,800 --> 00:39:07,859
um there are many vectors many ways of

873
00:39:07,859 --> 00:39:10,140
attacking or many ways that we can

874
00:39:10,140 --> 00:39:13,619
defend ourselves from attackers here so

875
00:39:13,619 --> 00:39:15,780
one of them is injections just like with

876
00:39:15,780 --> 00:39:17,880
any other technology so there was an

877
00:39:17,880 --> 00:39:21,240
alternate attack in Nuri uh I think Nuri

878
00:39:21,240 --> 00:39:23,940
uh it was a blockchain bank or something

879
00:39:23,940 --> 00:39:27,900
a financial institution and they were uh

880
00:39:27,900 --> 00:39:30,060
um they had a injection through web

881
00:39:30,060 --> 00:39:32,280
sockets there that affected their

882
00:39:32,280 --> 00:39:34,740
service but also there was an SQL

883
00:39:34,740 --> 00:39:37,320
injection why not SQL injection just but

884
00:39:37,320 --> 00:39:39,599
you know the putting the um the

885
00:39:39,599 --> 00:39:41,760
apostrophe and doing the query you could

886
00:39:41,760 --> 00:39:43,500
just do whatever you want job the table

887
00:39:43,500 --> 00:39:46,380
add users manipulate the database and

888
00:39:46,380 --> 00:39:48,359
that was in hacker one hacker one just

889
00:39:48,359 --> 00:39:50,700
you know it's a a platform used by

890
00:39:50,700 --> 00:39:54,119
hackers so hack the hacker uh there was

891
00:39:54,119 --> 00:39:55,619
also a dinner of service you know

892
00:39:55,619 --> 00:39:59,160
Service uh they uh recursively putting

893
00:39:59,160 --> 00:40:01,079
more and more Fields you could just Nest

894
00:40:01,079 --> 00:40:04,260
more and more uh levels you know 8 10 13

895
00:40:04,260 --> 00:40:06,420
levels of

896
00:40:06,420 --> 00:40:10,560
um uh sub uh sub uh uh objects there and

897
00:40:10,560 --> 00:40:13,020
putting more and more Fields uh we could

898
00:40:13,020 --> 00:40:16,079
just do the same with fragments just

899
00:40:16,079 --> 00:40:18,780
putting the dot dot dot and naming the

900
00:40:18,780 --> 00:40:21,119
same function 30 times with different

901
00:40:21,119 --> 00:40:23,520
names okay so basically we are kind of

902
00:40:23,520 --> 00:40:26,280
doing 30 different operations but at the

903
00:40:26,280 --> 00:40:27,900
end it's just the same with different

904
00:40:27,900 --> 00:40:30,359
names and the same thing with uh

905
00:40:30,359 --> 00:40:32,339
directives so that happened in Magento

906
00:40:32,339 --> 00:40:35,160
that I mentioned before which is the

907
00:40:35,160 --> 00:40:38,579
directive is the uh at skip include or

908
00:40:38,579 --> 00:40:39,540
some

909
00:40:39,540 --> 00:40:42,000
um component that changes the behavior

910
00:40:42,000 --> 00:40:44,760
of the response so if it's a Skip and

911
00:40:44,760 --> 00:40:47,400
you do include so you can include some

912
00:40:47,400 --> 00:40:49,440
other information that wasn't unintended

913
00:40:49,440 --> 00:40:52,260
uh there was um s3f also is another

914
00:40:52,260 --> 00:40:55,260
attack vector I didn't hear about any

915
00:40:55,260 --> 00:40:58,260
attack in that attack surface but it

916
00:40:58,260 --> 00:40:59,520
doesn't mean it didn't happen you know

917
00:40:59,520 --> 00:41:01,740
if you don't hear it means it didn't

918
00:41:01,740 --> 00:41:04,800
reach out to the news yet uh we have

919
00:41:04,800 --> 00:41:08,820
also csrf or CS wsh which is the same

920
00:41:08,820 --> 00:41:10,220
thing is cross

921
00:41:10,220 --> 00:41:14,940
websocket uh hijacking and uh it just

922
00:41:14,940 --> 00:41:18,839
basically happens if you use uh graphql

923
00:41:18,839 --> 00:41:21,060
over get method because there's no

924
00:41:21,060 --> 00:41:22,859
authentication there so we should be

925
00:41:22,859 --> 00:41:24,599
careful about that as well uh

926
00:41:24,599 --> 00:41:26,760
authorization of Education bypass okay

927
00:41:26,760 --> 00:41:30,599
this is also another issue in git um in

928
00:41:30,599 --> 00:41:32,640
graphql it happened in gitlab it

929
00:41:32,640 --> 00:41:34,980
happened in Shopify again uh also

930
00:41:34,980 --> 00:41:37,260
privileged escalation simply by changing

931
00:41:37,260 --> 00:41:41,099
the ID changing their uh role from

932
00:41:41,099 --> 00:41:45,300
regular user to admin also uh hacker one

933
00:41:45,300 --> 00:41:46,619
was

934
00:41:46,619 --> 00:41:49,560
um vulnerable uh other attack vectors

935
00:41:49,560 --> 00:41:52,440
include less uh or low vulnerabilities

936
00:41:52,440 --> 00:41:54,420
which is enumerating the full

937
00:41:54,420 --> 00:41:57,839
suggestions usually graphql tells you

938
00:41:57,839 --> 00:42:00,000
something like you know if you if you

939
00:42:00,000 --> 00:42:03,359
were wrong in writing a field uh do you

940
00:42:03,359 --> 00:42:05,579
you know like just Google they suggest

941
00:42:05,579 --> 00:42:08,400
you another field similar with a similar

942
00:42:08,400 --> 00:42:11,640
name and they tell you the response says

943
00:42:11,640 --> 00:42:13,260
did you

944
00:42:13,260 --> 00:42:16,859
um refer to maybe this title did you

945
00:42:16,859 --> 00:42:18,839
refer to that so basically you are

946
00:42:18,839 --> 00:42:20,579
numbering the schema you're numerating

947
00:42:20,579 --> 00:42:24,839
the graphql endpoint and lastly when we

948
00:42:24,839 --> 00:42:26,579
are mishandling errors

949
00:42:26,579 --> 00:42:29,579
as usual when we send errors we don't

950
00:42:29,579 --> 00:42:32,099
need to send the whole stack trace or

951
00:42:32,099 --> 00:42:34,740
the whole database error we need to just

952
00:42:34,740 --> 00:42:39,540
send exactly what we need so these are

953
00:42:39,540 --> 00:42:42,300
the attack vectors now how we can

954
00:42:42,300 --> 00:42:44,339
remediate those how we can defend

955
00:42:44,339 --> 00:42:48,960
ourselves from these attacks by using a

956
00:42:48,960 --> 00:42:50,280
great technology

957
00:42:50,280 --> 00:42:52,800
so first of all yeah disable

958
00:42:52,800 --> 00:42:54,540
introspection

959
00:42:54,540 --> 00:42:56,040
of course if you're doing again if

960
00:42:56,040 --> 00:42:57,540
you're using gel and go

961
00:42:57,540 --> 00:43:00,599
so you need to find a workaround

962
00:43:00,599 --> 00:43:04,560
uh don't expose this at least not in a

963
00:43:04,560 --> 00:43:07,020
production environment don't expose your

964
00:43:07,020 --> 00:43:10,619
schema don't let users query your uh

965
00:43:10,619 --> 00:43:14,180
schema or types or any other I'm sorry

966
00:43:14,180 --> 00:43:16,800
any other piece of information about

967
00:43:16,800 --> 00:43:19,500
your graphical endpoint uh also some

968
00:43:19,500 --> 00:43:21,780
developers they like to pre-load some

969
00:43:21,780 --> 00:43:24,900
queries in JavaScript libraries they do

970
00:43:24,900 --> 00:43:27,180
it because of performance so try not to

971
00:43:27,180 --> 00:43:30,060
do that because that gives a hint to

972
00:43:30,060 --> 00:43:31,339
attackers

973
00:43:31,339 --> 00:43:35,700
also use only pulse requests and again

974
00:43:35,700 --> 00:43:37,740
because we're using get requests you

975
00:43:37,740 --> 00:43:39,900
could be automatically

976
00:43:39,900 --> 00:43:44,160
um vulnerable to csrf uh next set query

977
00:43:44,160 --> 00:43:46,140
depth limits in timeouts to avoid the

978
00:43:46,140 --> 00:43:49,500
nail of service just you have like a a

979
00:43:49,500 --> 00:43:53,099
way of limiting the the fields and

980
00:43:53,099 --> 00:43:56,040
limiting the time of how every query

981
00:43:56,040 --> 00:43:58,800
should last if the query lasts for more

982
00:43:58,800 --> 00:44:01,140
than three four seconds that's too much

983
00:44:01,140 --> 00:44:04,440
just reject that uh also calculate the

984
00:44:04,440 --> 00:44:07,260
fields height if you have only eight

985
00:44:07,260 --> 00:44:09,900
Fields that's all you're gonna get if an

986
00:44:09,900 --> 00:44:13,260
attacker puts uh 11 so that's enough to

987
00:44:13,260 --> 00:44:17,280
reject the the request uh return generic

988
00:44:17,280 --> 00:44:18,180
errors

989
00:44:18,180 --> 00:44:20,099
just you know kind of something went

990
00:44:20,099 --> 00:44:22,560
wrong instead of you uh you have a

991
00:44:22,560 --> 00:44:27,000
either in your SQL syntax in line 92 and

992
00:44:27,000 --> 00:44:30,359
lastly as a general rule is sanitize and

993
00:44:30,359 --> 00:44:33,240
validate all the fields every single

994
00:44:33,240 --> 00:44:36,060
field needs to be validated because if

995
00:44:36,060 --> 00:44:38,160
you request again a phone number don't

996
00:44:38,160 --> 00:44:40,680
expect the user to send only numbers

997
00:44:40,680 --> 00:44:43,680
okay even though you have your front-end

998
00:44:43,680 --> 00:44:47,160
uh you know JavaScript is uh action even

999
00:44:47,160 --> 00:44:51,240
HTML is only letting users to put

1000
00:44:51,240 --> 00:44:53,460
um all the numbers don't expect that

1001
00:44:53,460 --> 00:44:55,440
because that could be easily Changed by

1002
00:44:55,440 --> 00:45:00,119
proxies by many many other tools and if

1003
00:45:00,119 --> 00:45:02,579
you expect that and a user saying

1004
00:45:02,579 --> 00:45:04,140
something else you could be in trouble

1005
00:45:04,140 --> 00:45:07,140
but not only that every single piece of

1006
00:45:07,140 --> 00:45:09,180
data that you ask for the user every

1007
00:45:09,180 --> 00:45:12,780
input every search every field that has

1008
00:45:12,780 --> 00:45:16,079
a text box and or even any piece of data

1009
00:45:16,079 --> 00:45:18,900
that you know input hidden that that the

1010
00:45:18,900 --> 00:45:21,480
user can send back to the um to the

1011
00:45:21,480 --> 00:45:24,780
server so that needs to be validated and

1012
00:45:24,780 --> 00:45:27,300
sanitized sanitized mean you know to

1013
00:45:27,300 --> 00:45:29,099
Simply remove the special characters

1014
00:45:29,099 --> 00:45:30,900
those characters that you're not

1015
00:45:30,900 --> 00:45:33,300
expecting like an apostrophe maybe

1016
00:45:33,300 --> 00:45:36,420
expected if you are in America for you

1017
00:45:36,420 --> 00:45:38,400
know McDonald's for a name but that's

1018
00:45:38,400 --> 00:45:40,740
not expected for an email okay because

1019
00:45:40,740 --> 00:45:43,319
that's not valid or Unicode

1020
00:45:43,319 --> 00:45:46,920
um uh letters or characters in emails

1021
00:45:46,920 --> 00:45:49,380
that's not also expected so for that

1022
00:45:49,380 --> 00:45:51,960
specific try to sanitize and there are

1023
00:45:51,960 --> 00:45:53,940
just many best practices around the

1024
00:45:53,940 --> 00:45:56,640
internet for that as well

1025
00:45:56,640 --> 00:46:00,420
so that was all you are awesome and

1026
00:46:00,420 --> 00:46:04,220
thank you so much hope you enjoyed

1027
00:46:10,140 --> 00:46:14,240
okay you know the drill any questions

1028
00:46:17,940 --> 00:46:19,980
my site is based on movement so if you

1029
00:46:19,980 --> 00:46:21,780
don't move I don't see it

1030
00:46:21,780 --> 00:46:24,260
yes

1031
00:46:31,160 --> 00:46:34,260
you talked about hiding field names by

1032
00:46:34,260 --> 00:46:37,560
not having a suggestions shouldn't it

1033
00:46:37,560 --> 00:46:40,560
make more sense to have authorization on

1034
00:46:40,560 --> 00:46:42,180
which field can which Fields can be

1035
00:46:42,180 --> 00:46:45,359
carried by which user

1036
00:46:45,359 --> 00:46:48,359
yeah yeah you're right I mean you you

1037
00:46:48,359 --> 00:46:50,640
should every operation let's say the

1038
00:46:50,640 --> 00:46:54,780
type user it should be always uh checked

1039
00:46:54,780 --> 00:46:56,520
against authorization and authentication

1040
00:46:56,520 --> 00:46:58,680
that's first of all I mean you have a

1041
00:46:58,680 --> 00:47:00,780
schema you have a schema that only

1042
00:47:00,780 --> 00:47:03,900
specifies to say the ID name username

1043
00:47:03,900 --> 00:47:07,260
age and that will be only uh stick to

1044
00:47:07,260 --> 00:47:10,200
let's say the user that the ID matches

1045
00:47:10,200 --> 00:47:12,480
to let's say the cookie that will be

1046
00:47:12,480 --> 00:47:14,940
really the the idea of course you could

1047
00:47:14,940 --> 00:47:17,460
have another schema for admins that they

1048
00:47:17,460 --> 00:47:19,260
can query let's say support technical

1049
00:47:19,260 --> 00:47:21,540
support they can actually query and even

1050
00:47:21,540 --> 00:47:23,520
mutate the password with the right

1051
00:47:23,520 --> 00:47:27,380
permissions as well yeah right

1052
00:47:30,950 --> 00:47:32,400
[Music]

1053
00:47:32,400 --> 00:47:34,500
I thanks so much for for a talk very

1054
00:47:34,500 --> 00:47:35,880
interesting

1055
00:47:35,880 --> 00:47:38,339
um when you do any enumeration of the

1056
00:47:38,339 --> 00:47:40,980
the service graphql do you have access

1057
00:47:40,980 --> 00:47:42,960
to the schema or you need to use some

1058
00:47:42,960 --> 00:47:45,720
Brute Force technique

1059
00:47:45,720 --> 00:47:47,460
um by default Yeah by default the the

1060
00:47:47,460 --> 00:47:50,640
introspection is enabled yes but even if

1061
00:47:50,640 --> 00:47:52,260
you don't do it I mean there are other

1062
00:47:52,260 --> 00:47:54,960
ways of enumerating you could simply uh

1063
00:47:54,960 --> 00:47:56,819
just you know throw your own field name

1064
00:47:56,819 --> 00:47:58,500
and if you don't get an error so it

1065
00:47:58,500 --> 00:48:01,020
means that the field exists so it

1066
00:48:01,020 --> 00:48:02,819
doesn't I mean yeah it's not implied

1067
00:48:02,819 --> 00:48:05,640
that the introspection is disabled you

1068
00:48:05,640 --> 00:48:07,200
could still have some other ways but

1069
00:48:07,200 --> 00:48:09,119
that's still enough to you know I mean

1070
00:48:09,119 --> 00:48:10,859
like again you could have rate limiting

1071
00:48:10,859 --> 00:48:13,200
you could have a WAFF which also help

1072
00:48:13,200 --> 00:48:17,579
mitigate those uh taxes well yeah great

1073
00:48:17,579 --> 00:48:20,540
final question

1074
00:48:24,000 --> 00:48:26,520
okay so suppose I have an app that I

1075
00:48:26,520 --> 00:48:28,680
want to pen test that uses graphql like

1076
00:48:28,680 --> 00:48:30,599
are there any tools that are available

1077
00:48:30,599 --> 00:48:33,780
to like Fast the apis that use graphql

1078
00:48:33,780 --> 00:48:35,760
or anything

1079
00:48:35,760 --> 00:48:38,700
you mean tools to defend oh to attack

1080
00:48:38,700 --> 00:48:41,400
tools to attack it there are a lot you

1081
00:48:41,400 --> 00:48:43,560
could use simply uh if you know burp

1082
00:48:43,560 --> 00:48:45,660
burp speed yeah so there is a an

1083
00:48:45,660 --> 00:48:48,240
extension called uh in ql I think so

1084
00:48:48,240 --> 00:48:49,500
it's just available on the pro

1085
00:48:49,500 --> 00:48:51,660
professional version you have a graph

1086
00:48:51,660 --> 00:48:54,660
woof I think I show it graph proof to

1087
00:48:54,660 --> 00:48:56,579
enumerate the endpoints just

1088
00:48:56,579 --> 00:48:58,800
automatically you have W files you could

1089
00:48:58,800 --> 00:49:01,020
use also setlist for check you know

1090
00:49:01,020 --> 00:49:03,599
discover uh different fields endpoints

1091
00:49:03,599 --> 00:49:06,839
are just huge uh World lists there

1092
00:49:06,839 --> 00:49:09,359
um besides that I think that would be

1093
00:49:09,359 --> 00:49:13,400
enough that was just thanks yeah

1094
00:49:13,680 --> 00:49:18,618
okay thank you Leo thank you so much

