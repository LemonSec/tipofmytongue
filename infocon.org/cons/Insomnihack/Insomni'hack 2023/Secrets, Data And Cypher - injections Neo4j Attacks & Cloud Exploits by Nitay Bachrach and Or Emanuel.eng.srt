1
00:00:02,820 --> 00:00:05,819
so good morning everyone

2
00:00:05,819 --> 00:00:07,200
um so we found it again

3
00:00:07,200 --> 00:00:09,360
have a look at the screen

4
00:00:09,360 --> 00:00:12,240
um of this company's organizations

5
00:00:12,240 --> 00:00:15,900
so what we all have in common is that

6
00:00:15,900 --> 00:00:20,100
they among others all use of use neo4j

7
00:00:20,100 --> 00:00:21,000
um

8
00:00:21,000 --> 00:00:24,060
I'm not claiming it any of them but they

9
00:00:24,060 --> 00:00:27,300
are vulnerable but they do use neo4j and

10
00:00:27,300 --> 00:00:30,060
hi I'm here today to talk about about it

11
00:00:30,060 --> 00:00:32,279
and what you need to keep in mind if you

12
00:00:32,279 --> 00:00:34,500
are if you encounter neo4j or if you're

13
00:00:34,500 --> 00:00:38,180
using neo4j neo4j is

14
00:00:38,180 --> 00:00:41,700
the most common graph database it is

15
00:00:41,700 --> 00:00:43,860
used in every industry all over the

16
00:00:43,860 --> 00:00:45,660
world

17
00:00:45,660 --> 00:00:49,440
and Islands

18
00:00:50,340 --> 00:00:53,760
I am from Tel Aviv but I

19
00:00:53,760 --> 00:00:56,100
tend to I travel a lot so you might

20
00:00:56,100 --> 00:00:57,660
recovery anyway

21
00:00:57,660 --> 00:01:00,660
I'm A Cloud Security Essential but also

22
00:01:00,660 --> 00:01:02,579
I have a lot of experience in many other

23
00:01:02,579 --> 00:01:04,199
security fields

24
00:01:04,199 --> 00:01:07,080
but I'm here today talk about neo4j

25
00:01:07,080 --> 00:01:10,799
so neo4j is again for the Miss and I

26
00:01:10,799 --> 00:01:13,380
will talk about neo4j and Cipher which

27
00:01:13,380 --> 00:01:16,020
is yeah it's query language kind of like

28
00:01:16,020 --> 00:01:17,460
it's SQL

29
00:01:17,460 --> 00:01:20,460
and I will explain how to execute and

30
00:01:20,460 --> 00:01:21,600
how to

31
00:01:21,600 --> 00:01:24,720
how to do Cipher instructions but then

32
00:01:24,720 --> 00:01:26,820
we also explain how to use neo4j as a

33
00:01:26,820 --> 00:01:29,580
hacking tool because neo4j is

34
00:01:29,580 --> 00:01:32,040
a database and attackers can retrieve

35
00:01:32,040 --> 00:01:33,659
data but they can actually do a lot more

36
00:01:33,659 --> 00:01:36,780
they can get out of the neo4j database

37
00:01:36,780 --> 00:01:39,119
into the target environment into the

38
00:01:39,119 --> 00:01:41,820
cloud and they can also retrieve secrets

39
00:01:41,820 --> 00:01:43,500
that are not necessarily stored in a

40
00:01:43,500 --> 00:01:46,020
database but they can access them using

41
00:01:46,020 --> 00:01:48,619
neo4j

42
00:01:48,659 --> 00:01:51,240
and as I said neo4j is the most popular

43
00:01:51,240 --> 00:01:53,820
graph database but what what is a cafe

44
00:01:53,820 --> 00:01:56,180
race

45
00:01:56,180 --> 00:02:00,540
is a nosql nosql DB

46
00:02:00,540 --> 00:02:02,960
well we instead of having cables like

47
00:02:02,960 --> 00:02:05,820
RDS circular relational databases

48
00:02:05,820 --> 00:02:09,000
we have a graph where we have nodes

49
00:02:09,000 --> 00:02:11,520
and edges that connect them and that's

50
00:02:11,520 --> 00:02:13,319
how we represent data

51
00:02:13,319 --> 00:02:15,239
this is kind of like how you would do it

52
00:02:15,239 --> 00:02:19,260
how it sketches on a wide world and it's

53
00:02:19,260 --> 00:02:20,940
using many different many different

54
00:02:20,940 --> 00:02:24,480
fields for example I think I am a very

55
00:02:24,480 --> 00:02:27,060
obvious one would be social so social

56
00:02:27,060 --> 00:02:30,360
media but also security I'm sure many of

57
00:02:30,360 --> 00:02:32,520
you have heard of uh bloodhound

58
00:02:32,520 --> 00:02:35,940
which uses neo4js or data or if you

59
00:02:35,940 --> 00:02:37,739
attended a very interesting talk

60
00:02:37,739 --> 00:02:41,000
yesterday about the

61
00:02:41,000 --> 00:02:44,760
CCD guard it's a tool that a very cool

62
00:02:44,760 --> 00:02:46,920
tool that he somehow he wrote and he

63
00:02:46,920 --> 00:02:48,780
uses neo4j it's a very very common

64
00:02:48,780 --> 00:02:51,080
security

65
00:02:51,420 --> 00:02:53,819
and in neo4j to retrieve data we'll

66
00:02:53,819 --> 00:02:54,900
Cipher

67
00:02:54,900 --> 00:02:57,180
FIFA is a

68
00:02:57,180 --> 00:03:00,180
it's a query language it's very it's

69
00:03:00,180 --> 00:03:02,760
used also in other other databases not

70
00:03:02,760 --> 00:03:05,580
only neo4j but neo4j

71
00:03:05,580 --> 00:03:08,819
um basically they wrote sci-fi and they

72
00:03:08,819 --> 00:03:12,840
manage it it is inspired by SQL a lot

73
00:03:12,840 --> 00:03:15,420
and also according to them I ask you out

74
00:03:15,420 --> 00:03:17,280
because you have like grounded brackets

75
00:03:17,280 --> 00:03:18,959
so they make circles and this is like

76
00:03:18,959 --> 00:03:22,140
the notes and then you have arrows and

77
00:03:22,140 --> 00:03:23,819
nine so that's how you represent what

78
00:03:23,819 --> 00:03:26,519
you want to retrieve of course Cipher is

79
00:03:26,519 --> 00:03:28,080
not only for like retrieving data you

80
00:03:28,080 --> 00:03:30,780
can also store and modify the data and

81
00:03:30,780 --> 00:03:32,900
do a lot of other things

82
00:03:32,900 --> 00:03:35,340
it has many features

83
00:03:35,340 --> 00:03:38,280
and we will go over them just to like

84
00:03:38,280 --> 00:03:40,200
make sure to understand what Cipher is

85
00:03:40,200 --> 00:03:41,879
before we talk about more advanced

86
00:03:41,879 --> 00:03:43,620
attacks

87
00:03:43,620 --> 00:03:46,560
so in Cipher light SQL we need to be

88
00:03:46,560 --> 00:03:50,099
able to fill the data I can retrieve

89
00:03:50,099 --> 00:03:53,519
like a sub graph or like a specific node

90
00:03:53,519 --> 00:03:56,159
but maybe I want to only like notes that

91
00:03:56,159 --> 00:03:58,920
match like with me specific criteria

92
00:03:58,920 --> 00:04:01,319
so like in SQL we have where

93
00:04:01,319 --> 00:04:03,599
this is very very similar we can also

94
00:04:03,599 --> 00:04:05,459
like do things like oh

95
00:04:05,459 --> 00:04:07,560
and call functions

96
00:04:07,560 --> 00:04:09,659
but we also have uh we can do it

97
00:04:09,659 --> 00:04:12,060
directly in the match class which is

98
00:04:12,060 --> 00:04:13,439
sort of like

99
00:04:13,439 --> 00:04:16,199
the equivalent of Select

100
00:04:16,199 --> 00:04:19,079
and you can just tell it to do that to

101
00:04:19,079 --> 00:04:21,540
only retrieve nodes or relationships

102
00:04:21,540 --> 00:04:24,479
that meets a specific criteria

103
00:04:24,479 --> 00:04:28,740
it is very it's a very convenient

104
00:04:28,740 --> 00:04:30,240
it's more

105
00:04:30,240 --> 00:04:31,440
um

106
00:04:31,440 --> 00:04:34,139
it's less powerful like for example I

107
00:04:34,139 --> 00:04:36,000
can't do all or things like that I can

108
00:04:36,000 --> 00:04:38,580
only tell it and it feels admits this

109
00:04:38,580 --> 00:04:39,900
this uh

110
00:04:39,900 --> 00:04:42,360
like the field with this value or things

111
00:04:42,360 --> 00:04:43,500
like that

112
00:04:43,500 --> 00:04:46,199
but the developers use it a lot because

113
00:04:46,199 --> 00:04:49,380
very very easy to use and we for example

114
00:04:49,380 --> 00:04:50,940
attackers that try to attack

115
00:04:50,940 --> 00:04:53,340
applications using neo4j need to keep it

116
00:04:53,340 --> 00:04:54,360
in mind

117
00:04:54,360 --> 00:04:56,520
because their their injection would be

118
00:04:56,520 --> 00:04:58,199
different

119
00:04:58,199 --> 00:05:00,300
another thing they learned from SQL is

120
00:05:00,300 --> 00:05:04,320
parameters in in neo4j in Cipher and

121
00:05:04,320 --> 00:05:06,900
every other DB that use a cipher

122
00:05:06,900 --> 00:05:09,180
we can send parameters separately from

123
00:05:09,180 --> 00:05:10,740
the query itself

124
00:05:10,740 --> 00:05:13,800
in a secure way so parameters cannot be

125
00:05:13,800 --> 00:05:15,300
executed and then there's just there is

126
00:05:15,300 --> 00:05:16,560
no injection

127
00:05:16,560 --> 00:05:19,440
now not everything can be a parameter

128
00:05:19,440 --> 00:05:22,139
for example label a label would be a

129
00:05:22,139 --> 00:05:23,880
species

130
00:05:23,880 --> 00:05:26,880
all uh field names like here the field

131
00:05:26,880 --> 00:05:28,199
name is name

132
00:05:28,199 --> 00:05:29,820
they just they can't be parameters

133
00:05:29,820 --> 00:05:32,280
that's how neo4j workers have Cipher

134
00:05:32,280 --> 00:05:34,320
works and because of that and many other

135
00:05:34,320 --> 00:05:36,419
reasons developers don't always use this

136
00:05:36,419 --> 00:05:39,000
feature and that's why some applications

137
00:05:39,000 --> 00:05:41,900
of silver novel

138
00:05:42,120 --> 00:05:43,560
one more thing we need to understand

139
00:05:43,560 --> 00:05:44,840
about

140
00:05:44,840 --> 00:05:47,340
Cipher is thought functions and

141
00:05:47,340 --> 00:05:50,580
procedures they extend what Cipher can

142
00:05:50,580 --> 00:05:52,259
do what neo4j can do

143
00:05:52,259 --> 00:05:55,620
and we can also use plugins

144
00:05:55,620 --> 00:05:59,280
so even more functions procedures and

145
00:05:59,280 --> 00:06:01,440
both of them were pretty similar there

146
00:06:01,440 --> 00:06:02,940
are some key differences that we must

147
00:06:02,940 --> 00:06:05,180
understand

148
00:06:05,880 --> 00:06:08,880
procedures uh can only be called using a

149
00:06:08,880 --> 00:06:10,320
special statement

150
00:06:10,320 --> 00:06:13,800
we have we've seen matches in return and

151
00:06:13,800 --> 00:06:16,139
another is a statement called call and

152
00:06:16,139 --> 00:06:17,940
that's how we call procedures

153
00:06:17,940 --> 00:06:20,220
they usually generate data and they can

154
00:06:20,220 --> 00:06:23,400
return many many different roles and

155
00:06:23,400 --> 00:06:25,979
columns

156
00:06:25,979 --> 00:06:28,199
and they can for example we can use them

157
00:06:28,199 --> 00:06:30,000
to get information about the DB for

158
00:06:30,000 --> 00:06:33,360
example list all the labels in the DB

159
00:06:33,360 --> 00:06:36,120
functions can be used anywhere

160
00:06:36,120 --> 00:06:38,639
and they always return single value

161
00:06:38,639 --> 00:06:42,000
usually we use functions to uh

162
00:06:42,000 --> 00:06:44,460
change of modify data for example here

163
00:06:44,460 --> 00:06:48,360
we just convert a string to an integer

164
00:06:48,360 --> 00:06:50,280
but of course many other functions many

165
00:06:50,280 --> 00:06:52,080
other users

166
00:06:52,080 --> 00:06:55,139
and now we know what Cipher is

167
00:06:55,139 --> 00:06:57,720
Hugo the Hedgehog really wants to talk

168
00:06:57,720 --> 00:06:59,520
to you to explain what's how to do

169
00:06:59,520 --> 00:07:01,440
Cipher injections

170
00:07:01,440 --> 00:07:03,360
so when you talk about software

171
00:07:03,360 --> 00:07:06,060
injections it's a lot of similarities to

172
00:07:06,060 --> 00:07:08,220
SQL injection what are some some

173
00:07:08,220 --> 00:07:09,300
differences

174
00:07:09,300 --> 00:07:11,220
for example

175
00:07:11,220 --> 00:07:13,440
we need to keep in mind the idea that

176
00:07:13,440 --> 00:07:16,680
there is also like a aware but also a

177
00:07:16,680 --> 00:07:18,060
match and it's going to changes the

178
00:07:18,060 --> 00:07:20,160
syntax

179
00:07:20,160 --> 00:07:22,020
um also very similar is the fact that we

180
00:07:22,020 --> 00:07:23,699
need to understand what application

181
00:07:23,699 --> 00:07:25,800
expects the value to be is it an integer

182
00:07:25,800 --> 00:07:27,660
maybe it's a field

183
00:07:27,660 --> 00:07:30,000
maybe it's a label so let's look at some

184
00:07:30,000 --> 00:07:31,560
examples

185
00:07:31,560 --> 00:07:33,479
these two queries are basically

186
00:07:33,479 --> 00:07:34,860
identical

187
00:07:34,860 --> 00:07:37,020
in terms of what they do but the

188
00:07:37,020 --> 00:07:39,060
injection would be different

189
00:07:39,060 --> 00:07:43,080
and also notice how I use a double quote

190
00:07:43,080 --> 00:07:45,720
in the first one up there

191
00:07:45,720 --> 00:07:47,819
this is something that is very common in

192
00:07:47,819 --> 00:07:49,319
sequence in sci-fi it's kind of like

193
00:07:49,319 --> 00:07:51,479
python unlike

194
00:07:51,479 --> 00:07:56,000
SQL so I think many of you

195
00:07:56,120 --> 00:07:59,940
when you try to like hack a web app and

196
00:07:59,940 --> 00:08:01,620
then you add a single quotes and looks

197
00:08:01,620 --> 00:08:04,620
of Errors so if they use neo4j you also

198
00:08:04,620 --> 00:08:07,259
need to check double quotes and would

199
00:08:07,259 --> 00:08:09,300
also use vectics because sometimes

200
00:08:09,300 --> 00:08:11,759
that's how that's how you get them

201
00:08:11,759 --> 00:08:13,620
here's some more examples

202
00:08:13,620 --> 00:08:16,800
we will look at them like later but

203
00:08:16,800 --> 00:08:19,620
what I want to do to see you see how

204
00:08:19,620 --> 00:08:21,300
like the first one the well

205
00:08:21,300 --> 00:08:23,759
looks pretty much like SQL we have oh I

206
00:08:23,759 --> 00:08:25,979
added all one equals one to make sure

207
00:08:25,979 --> 00:08:28,500
that I still get data but when it's a

208
00:08:28,500 --> 00:08:29,220
match

209
00:08:29,220 --> 00:08:32,039
it's a little bit different I had to add

210
00:08:32,039 --> 00:08:34,979
the union there in return one and that's

211
00:08:34,979 --> 00:08:36,599
because if the match doesn't return

212
00:08:36,599 --> 00:08:38,039
anything

213
00:08:38,039 --> 00:08:40,679
if there is no data then neo4j wouldn't

214
00:08:40,679 --> 00:08:42,360
run our payload

215
00:08:42,360 --> 00:08:45,060
so whatever we're trying to do just one

216
00:08:45,060 --> 00:08:46,020
prime

217
00:08:46,020 --> 00:08:48,959
and there is no all so that's how we get

218
00:08:48,959 --> 00:08:51,120
it to see it and later here I edit match

219
00:08:51,120 --> 00:08:52,500
it doesn't have to be matched we can

220
00:08:52,500 --> 00:08:54,480
call it procedure directly and also

221
00:08:54,480 --> 00:08:56,880
other statements that we we will look at

222
00:08:56,880 --> 00:08:58,800
and discuss later

223
00:08:58,800 --> 00:09:00,839
and how to understand that we have an

224
00:09:00,839 --> 00:09:02,399
injection

225
00:09:02,399 --> 00:09:04,560
what do we do

226
00:09:04,560 --> 00:09:05,880
well

227
00:09:05,880 --> 00:09:07,620
a very important statement I haven't

228
00:09:07,620 --> 00:09:11,220
mentioned so far is load CSV load CSV is

229
00:09:11,220 --> 00:09:14,760
a built-in statement the let us

230
00:09:14,760 --> 00:09:18,779
let us retrieve the CSV data it's quite

231
00:09:18,779 --> 00:09:21,600
famous if you ever read or read or heard

232
00:09:21,600 --> 00:09:22,320
about

233
00:09:22,320 --> 00:09:23,339
um

234
00:09:23,339 --> 00:09:25,320
example injections that I'm sure that

235
00:09:25,320 --> 00:09:26,940
they mentioned about this week

236
00:09:26,940 --> 00:09:31,200
it is it can read CSV files from the

237
00:09:31,200 --> 00:09:34,620
file system and it is usually disabled

238
00:09:34,620 --> 00:09:37,260
or at least limited to specific folder

239
00:09:37,260 --> 00:09:39,959
now I have seen cases where I was able

240
00:09:39,959 --> 00:09:42,920
to read any file but it's quite well

241
00:09:42,920 --> 00:09:46,380
interesting is Network abilities we can

242
00:09:46,380 --> 00:09:48,360
use you can use load CSV

243
00:09:48,360 --> 00:09:51,899
to send HTTP requests and get load CSV

244
00:09:51,899 --> 00:09:53,399
files from

245
00:09:53,399 --> 00:09:55,740
any any HTTP server

246
00:09:55,740 --> 00:09:58,380
and this is really useful because we can

247
00:09:58,380 --> 00:10:00,660
do it to send it to the request which

248
00:10:00,660 --> 00:10:04,320
means we can send data to our server and

249
00:10:04,320 --> 00:10:05,880
that's how we can explain the data so

250
00:10:05,880 --> 00:10:08,220
even if it's a blind injection we don't

251
00:10:08,220 --> 00:10:10,320
really care about it we can just tell

252
00:10:10,320 --> 00:10:14,339
neo4j send it to our server and we can

253
00:10:14,339 --> 00:10:16,320
just put the whatever data I want to

254
00:10:16,320 --> 00:10:19,260
retrieve in the URL path and that's it

255
00:10:19,260 --> 00:10:22,160
we get a data

256
00:10:22,220 --> 00:10:25,500
Network cannot be disabled

257
00:10:25,500 --> 00:10:28,440
there is an undocumented feature that we

258
00:10:28,440 --> 00:10:30,959
are actually helping neo4j to

259
00:10:30,959 --> 00:10:32,399
secure

260
00:10:32,399 --> 00:10:34,100
which we'll let you in the future

261
00:10:34,100 --> 00:10:37,440
restrict IPS but right now it's still

262
00:10:37,440 --> 00:10:39,720
not ready for production

263
00:10:39,720 --> 00:10:41,940
you can use of course use the firewall

264
00:10:41,940 --> 00:10:45,560
and I would recommend it

265
00:10:50,459 --> 00:10:54,739
but most don't really do it

266
00:10:54,959 --> 00:10:56,640
um so this is what an injection would

267
00:10:56,640 --> 00:10:57,959
actually look like

268
00:10:57,959 --> 00:11:00,060
if I found an injection the first one

269
00:11:00,060 --> 00:11:03,600
would be Lotus V so I do that the union

270
00:11:03,600 --> 00:11:05,519
thing I talked about to make sure that

271
00:11:05,519 --> 00:11:08,519
there is data and that

272
00:11:08,519 --> 00:11:11,339
neo4j even like with you make sure that

273
00:11:11,339 --> 00:11:13,500
it runs our payload and I use those

274
00:11:13,500 --> 00:11:14,700
easily

275
00:11:14,700 --> 00:11:18,839
attacker.com is my server and then I

276
00:11:18,839 --> 00:11:22,320
said I added SL that's because in neo4j

277
00:11:22,320 --> 00:11:24,959
if you use dot USV you have to store the

278
00:11:24,959 --> 00:11:26,100
response

279
00:11:26,100 --> 00:11:27,480
personally I don't really care what the

280
00:11:27,480 --> 00:11:28,920
response is

281
00:11:28,920 --> 00:11:31,800
but you have to stop it

282
00:11:31,800 --> 00:11:34,440
and then I call it a thing I just do it

283
00:11:34,440 --> 00:11:36,720
I just do it just to make sure that my

284
00:11:36,720 --> 00:11:38,579
injection works and now it's another

285
00:11:38,579 --> 00:11:40,440
that I have an injection and I can make

286
00:11:40,440 --> 00:11:41,459
it work

287
00:11:41,459 --> 00:11:44,100
I am I can do I can do whatever I want I

288
00:11:44,100 --> 00:11:46,560
can for example call other procedures to

289
00:11:46,560 --> 00:11:48,660
list all the labels in DB and then I can

290
00:11:48,660 --> 00:11:50,760
learn a lot about the database

291
00:11:50,760 --> 00:11:53,700
I can exclude the data if I know what

292
00:11:53,700 --> 00:11:56,279
the query is or if I don't I can just

293
00:11:56,279 --> 00:11:59,640
use match to get other to get whatever I

294
00:11:59,640 --> 00:12:02,459
want and I can just send the data to my

295
00:12:02,459 --> 00:12:03,480
server

296
00:12:03,480 --> 00:12:05,279
and of course we can even change those

297
00:12:05,279 --> 00:12:08,220
CSV together to get this like ssrf a

298
00:12:08,220 --> 00:12:10,140
service at the quest project where we

299
00:12:10,140 --> 00:12:13,320
make neo4j call service and maybe even

300
00:12:13,320 --> 00:12:15,959
internal HTTP servers and send the

301
00:12:15,959 --> 00:12:19,140
response to our server one thing you

302
00:12:19,140 --> 00:12:20,760
need to keep in mind if you ever use

303
00:12:20,760 --> 00:12:25,140
load CSV low C3 doesn't really handle uh

304
00:12:25,140 --> 00:12:28,260
your Ed encoding which means that it

305
00:12:28,260 --> 00:12:31,260
might send invalid requests that most

306
00:12:31,260 --> 00:12:33,060
RTP servers will drop

307
00:12:33,060 --> 00:12:35,579
it secludes many HTTP servers that are

308
00:12:35,579 --> 00:12:39,420
used by attackers NG Rock and others

309
00:12:39,420 --> 00:12:41,940
if you use NGO GDP and attention rocket

310
00:12:41,940 --> 00:12:43,139
TCP

311
00:12:43,139 --> 00:12:46,500
and also help

312
00:12:46,500 --> 00:12:47,639
of course it's not really a problem

313
00:12:47,639 --> 00:12:49,740
because we still get the packet to get a

314
00:12:49,740 --> 00:12:50,579
request

315
00:12:50,579 --> 00:12:53,760
so all I what I do is I just have like

316
00:12:53,760 --> 00:12:56,519
it's an HTTP like server that still

317
00:12:56,519 --> 00:13:00,300
sends uh 200 okay even if the request

318
00:13:00,300 --> 00:13:02,220
isn't valid and then I can still get the

319
00:13:02,220 --> 00:13:05,300
data and everything works

320
00:13:05,639 --> 00:13:08,519
so the first thing I always do is

321
00:13:08,519 --> 00:13:11,120
reconnaissance I always start with

322
00:13:11,120 --> 00:13:13,079
understanding

323
00:13:13,079 --> 00:13:15,600
the neo4j version there are two very

324
00:13:15,600 --> 00:13:17,820
common versions actually three but one

325
00:13:17,820 --> 00:13:20,519
of them is very rare the most common one

326
00:13:20,519 --> 00:13:24,180
is neo4j4 it's still it's LTS but it's

327
00:13:24,180 --> 00:13:26,220
also neo4j5 there are some key

328
00:13:26,220 --> 00:13:27,720
differences in the way we interact with

329
00:13:27,720 --> 00:13:28,440
them

330
00:13:28,440 --> 00:13:30,899
so only like specific things so it's

331
00:13:30,899 --> 00:13:32,399
always important to understand what we

332
00:13:32,399 --> 00:13:34,079
are dealing with

333
00:13:34,079 --> 00:13:37,260
and then I can after I get to the

334
00:13:37,260 --> 00:13:39,240
version I can get the labels I can also

335
00:13:39,240 --> 00:13:40,560
get the relationships

336
00:13:40,560 --> 00:13:42,660
in order to understand what database is

337
00:13:42,660 --> 00:13:44,639
what kind of data is stored there

338
00:13:44,639 --> 00:13:46,800
and then I would also want to to list

339
00:13:46,800 --> 00:13:48,300
all the install procedures install

340
00:13:48,300 --> 00:13:50,459
functions this one for example is a

341
00:13:50,459 --> 00:13:52,620
little bit different in neo4j5 because

342
00:13:52,620 --> 00:13:54,899
they removed the procedure and instead

343
00:13:54,899 --> 00:13:56,279
we have show

344
00:13:56,279 --> 00:13:58,019
which is kind of tricky because we

345
00:13:58,019 --> 00:14:00,779
cannot inject it it has to be run like

346
00:14:00,779 --> 00:14:02,519
independently like separately from any

347
00:14:02,519 --> 00:14:04,160
other

348
00:14:04,160 --> 00:14:07,019
queries we will explain later how to how

349
00:14:07,019 --> 00:14:08,399
we derive it

350
00:14:08,399 --> 00:14:11,459
but before that some interesting tricks

351
00:14:11,459 --> 00:14:14,760
so the one with count I always edit and

352
00:14:14,760 --> 00:14:17,040
I there are two goals two things a time

353
00:14:17,040 --> 00:14:20,040
to achieve with with sound so the first

354
00:14:20,040 --> 00:14:23,339
thing for every row we retrieve neo4j

355
00:14:23,339 --> 00:14:25,740
would run our payload and some databases

356
00:14:25,740 --> 00:14:27,420
are really big they could be billions of

357
00:14:27,420 --> 00:14:28,500
nodes

358
00:14:28,500 --> 00:14:30,600
so that would be billions of requests

359
00:14:30,600 --> 00:14:32,160
and that's

360
00:14:32,160 --> 00:14:33,660
it's not going to work

361
00:14:33,660 --> 00:14:36,480
and in which this thing it just it

362
00:14:36,480 --> 00:14:38,100
solves it it's only one row and that's

363
00:14:38,100 --> 00:14:38,820
it

364
00:14:38,820 --> 00:14:42,060
one revealed runs one only once another

365
00:14:42,060 --> 00:14:45,120
thing is unknown variables you I saw

366
00:14:45,120 --> 00:14:47,100
earlier

367
00:14:47,100 --> 00:14:52,860
I have to sew the low T3 and response I

368
00:14:52,860 --> 00:14:55,980
call it here I call it l

369
00:14:55,980 --> 00:14:58,860
but what if the query already uses cell

370
00:14:58,860 --> 00:15:01,980
the neo4j would would wouldn't work

371
00:15:01,980 --> 00:15:03,660
it's just they decided the query

372
00:15:03,660 --> 00:15:06,000
wouldn't run and this is just cancel our

373
00:15:06,000 --> 00:15:07,980
variables and the subject and that's it

374
00:15:07,980 --> 00:15:09,480
you're good to go even even if you don't

375
00:15:09,480 --> 00:15:11,100
know what the query is

376
00:15:11,100 --> 00:15:13,199
another really cool trick is

377
00:15:13,199 --> 00:15:16,199
in neo4j we can also add Unicode

378
00:15:16,199 --> 00:15:17,339
characters

379
00:15:17,339 --> 00:15:19,079
it's kind of like python or JavaScript

380
00:15:19,079 --> 00:15:21,600
we'll slash U and then for accidental

381
00:15:21,600 --> 00:15:25,199
digits but for some reason neo4j passes

382
00:15:25,199 --> 00:15:28,079
it before it passes the query itself

383
00:15:28,079 --> 00:15:30,959
so for example if the

384
00:15:30,959 --> 00:15:33,240
if I run quite here like where there is

385
00:15:33,240 --> 00:15:35,100
one single quote another one is slash

386
00:15:35,100 --> 00:15:37,920
u0027 which is the Unicode a

387
00:15:37,920 --> 00:15:40,139
representation of a Singapore this is a

388
00:15:40,139 --> 00:15:43,199
valid query that's neo4j would run and

389
00:15:43,199 --> 00:15:45,600
this is a way like this way if they have

390
00:15:45,600 --> 00:15:46,740
like

391
00:15:46,740 --> 00:15:48,839
if this if the time to sanitize a clean

392
00:15:48,839 --> 00:15:51,180
user input and just remove the equals or

393
00:15:51,180 --> 00:15:52,980
double quotes or whatever we can just

394
00:15:52,980 --> 00:15:55,260
edit this and that's it

395
00:15:55,260 --> 00:15:57,000
we're good to go

396
00:15:57,000 --> 00:15:58,740
also it's a very useful way to

397
00:15:58,740 --> 00:16:01,139
circumvent most paths for air like for

398
00:16:01,139 --> 00:16:03,720
example basically everyone I type

399
00:16:03,720 --> 00:16:06,300
and because I'm just not aware of it

400
00:16:06,300 --> 00:16:09,000
they all look for the single quotes and

401
00:16:09,000 --> 00:16:12,779
then in all but if it's sl27

402
00:16:12,779 --> 00:16:14,699
they have no idea what the what's the

403
00:16:14,699 --> 00:16:16,440
what they're looking at and that's it

404
00:16:16,440 --> 00:16:18,920
you're in

405
00:16:19,079 --> 00:16:20,699
and now I want to talk about something

406
00:16:20,699 --> 00:16:22,279
awesome awesome

407
00:16:22,279 --> 00:16:25,980
procedures on Cypher apoc

408
00:16:25,980 --> 00:16:28,199
apoc is an extension

409
00:16:28,199 --> 00:16:31,500
for neo4j it's very common it's it's

410
00:16:31,500 --> 00:16:34,560
ubiquitous it's everywhere almost every

411
00:16:34,560 --> 00:16:36,720
server I encounter had it installed it

412
00:16:36,720 --> 00:16:38,519
is maintained by neo4j

413
00:16:38,519 --> 00:16:40,320
and it adds a lot of functions also

414
00:16:40,320 --> 00:16:41,579
scissors

415
00:16:41,579 --> 00:16:43,860
let's just make the lives of developers

416
00:16:43,860 --> 00:16:46,019
easier they had a lot of capabilities

417
00:16:46,019 --> 00:16:47,820
and making the lives of developers

418
00:16:47,820 --> 00:16:48,899
easier

419
00:16:48,899 --> 00:16:51,779
also means making the lives of attackers

420
00:16:51,779 --> 00:16:53,519
easier

421
00:16:53,519 --> 00:16:57,420
and so that everyone here would agree

422
00:16:57,420 --> 00:16:59,399
so some useful ebook functions and

423
00:16:59,399 --> 00:17:03,240
procedures are able convert to Json so

424
00:17:03,240 --> 00:17:06,000
earlier I showed how I can exfilter the

425
00:17:06,000 --> 00:17:08,160
data send data to my server

426
00:17:08,160 --> 00:17:10,260
but in order to append it to the URL it

427
00:17:10,260 --> 00:17:12,299
must be a string but what if the data is

428
00:17:12,299 --> 00:17:14,459
not a string what if what if it's a list

429
00:17:14,459 --> 00:17:16,679
or even a graph

430
00:17:16,679 --> 00:17:19,799
so A4 convert to Json doesn't care what

431
00:17:19,799 --> 00:17:23,459
it is it converts everything to sling

432
00:17:23,459 --> 00:17:26,280
we can also use apoc to run Cipher

433
00:17:26,280 --> 00:17:28,380
queries and that's how we solve the

434
00:17:28,380 --> 00:17:30,900
short slow procedures and so fast and

435
00:17:30,900 --> 00:17:33,240
problem which I mentioned earlier it

436
00:17:33,240 --> 00:17:34,919
must run independently

437
00:17:34,919 --> 00:17:38,880
we can just call use apoc to run show

438
00:17:38,880 --> 00:17:40,380
procedures to show functions if it's

439
00:17:40,380 --> 00:17:43,320
installed and almost always installed

440
00:17:43,320 --> 00:17:46,799
and that's and then we can get the list

441
00:17:46,799 --> 00:17:48,960
of procedures list of functions and

442
00:17:48,960 --> 00:17:49,860
other

443
00:17:49,860 --> 00:17:53,340
other thing other a lot of a lot of data

444
00:17:53,340 --> 00:17:55,440
we also have a box Cipher and also

445
00:17:55,440 --> 00:17:57,480
procedures they're pretty similar except

446
00:17:57,480 --> 00:18:00,179
to the way that you call them

447
00:18:00,179 --> 00:18:02,880
but even more interesting is to load

448
00:18:02,880 --> 00:18:06,559
these vipagrams and load Json programs

449
00:18:06,960 --> 00:18:09,539
and

450
00:18:09,539 --> 00:18:12,120
does anyone here understand what's the

451
00:18:12,120 --> 00:18:14,760
biggest limitation of Floetry is whether

452
00:18:14,760 --> 00:18:17,580
you could were able to guess it

453
00:18:17,580 --> 00:18:18,660
well

454
00:18:18,660 --> 00:18:20,460
we can only

455
00:18:20,460 --> 00:18:22,320
to get requests

456
00:18:22,320 --> 00:18:24,299
and we cannot control the headers

457
00:18:24,299 --> 00:18:25,559
and also not

458
00:18:25,559 --> 00:18:27,360
the payload

459
00:18:27,360 --> 00:18:30,240
and if I really want a very powerful

460
00:18:30,240 --> 00:18:32,400
strong and it's a graph and I really

461
00:18:32,400 --> 00:18:34,440
want to get into this target environment

462
00:18:34,440 --> 00:18:36,539
maybe I need a pause request maybe I

463
00:18:36,539 --> 00:18:38,280
need a foot maybe I need to control the

464
00:18:38,280 --> 00:18:40,620
headers maybe I need to send a page or

465
00:18:40,620 --> 00:18:41,580
data

466
00:18:41,580 --> 00:18:43,500
and that's what these procedures that's

467
00:18:43,500 --> 00:18:46,080
what they can do

468
00:18:46,080 --> 00:18:49,440
which makes it way more powerful

469
00:18:49,440 --> 00:18:51,179
um another cool one is a Pokemon many

470
00:18:51,179 --> 00:18:53,460
which is very similar to the other apoc

471
00:18:53,460 --> 00:18:55,799
Cypher run except that it creates a new

472
00:18:55,799 --> 00:18:56,820
transaction

473
00:18:56,820 --> 00:18:59,160
and now before I explain why it's

474
00:18:59,160 --> 00:19:00,120
interesting

475
00:19:00,120 --> 00:19:02,580
let's talk about getting the query

476
00:19:02,580 --> 00:19:04,500
knowing what the query is if we are

477
00:19:04,500 --> 00:19:08,640
injecting is very useful

478
00:19:08,640 --> 00:19:11,160
um if anyone here has ever

479
00:19:11,160 --> 00:19:13,679
used any kind of like SQL injection or

480
00:19:13,679 --> 00:19:16,080
any other kind of injection I think it's

481
00:19:16,080 --> 00:19:17,700
very obvious why knowing what the query

482
00:19:17,700 --> 00:19:19,200
is refuse for

483
00:19:19,200 --> 00:19:21,780
but if you don't so if we if we know

484
00:19:21,780 --> 00:19:25,380
what it is we can affect the execution

485
00:19:25,380 --> 00:19:27,299
the flow of the application because we

486
00:19:27,299 --> 00:19:30,059
know what data it wants to return

487
00:19:30,059 --> 00:19:32,940
we know how to return it and now and we

488
00:19:32,940 --> 00:19:35,280
can basically just change for example if

489
00:19:35,280 --> 00:19:37,860
it was an app that

490
00:19:37,860 --> 00:19:40,980
is achieving a user and some like Fields

491
00:19:40,980 --> 00:19:42,720
about the user we can change the role

492
00:19:42,720 --> 00:19:45,240
from user to admin

493
00:19:45,240 --> 00:19:47,820
and now we know the queries we know what

494
00:19:47,820 --> 00:19:50,160
what uh what it expects we can just we

495
00:19:50,160 --> 00:19:52,320
can easily do it

496
00:19:52,320 --> 00:19:55,440
in neo4j4 it's pretty trivial

497
00:19:55,440 --> 00:19:57,539
there is a procedure list queries and it

498
00:19:57,539 --> 00:19:59,760
has information about all queries

499
00:19:59,760 --> 00:20:02,580
including the one that is running right

500
00:20:02,580 --> 00:20:06,000
now and we are injecting into in foj5 we

501
00:20:06,000 --> 00:20:07,500
have show transactions

502
00:20:07,500 --> 00:20:09,419
and it only Returns the currently

503
00:20:09,419 --> 00:20:10,620
running query

504
00:20:10,620 --> 00:20:13,320
so if I use apoc Cipher run which

505
00:20:13,320 --> 00:20:15,360
doesn't create a new transaction it

506
00:20:15,360 --> 00:20:17,520
would return short transactions which is

507
00:20:17,520 --> 00:20:19,440
not an interesting query it's the one I

508
00:20:19,440 --> 00:20:22,740
called and there is no data there but

509
00:20:22,740 --> 00:20:24,059
because there are many creates a new

510
00:20:24,059 --> 00:20:25,380
transaction

511
00:20:25,380 --> 00:20:27,900
it will return now two hours to show

512
00:20:27,900 --> 00:20:29,940
transactions but also the one that

513
00:20:29,940 --> 00:20:32,340
called it which is what's the

514
00:20:32,340 --> 00:20:33,660
application actually called and that's

515
00:20:33,660 --> 00:20:35,160
how we can get

516
00:20:35,160 --> 00:20:37,860
the query so now let's see

517
00:20:37,860 --> 00:20:41,220
before that let's summarize

518
00:20:41,220 --> 00:20:43,980
attackers if you suspect if you believe

519
00:20:43,980 --> 00:20:46,860
there is neo4j try a single vote like

520
00:20:46,860 --> 00:20:48,780
you would since SQL injections

521
00:20:48,780 --> 00:20:51,240
but also a double quote and also a

522
00:20:51,240 --> 00:20:52,500
backflip

523
00:20:52,500 --> 00:20:54,419
and also try the unique Alternatives

524
00:20:54,419 --> 00:20:57,980
which is immensely powerful

525
00:20:57,980 --> 00:21:01,140
also keep in mind match always try to

526
00:21:01,140 --> 00:21:03,299
get a ping which is just to make sure

527
00:21:03,299 --> 00:21:05,460
that your injection works

528
00:21:05,460 --> 00:21:07,740
and get the neo4j version and try to get

529
00:21:07,740 --> 00:21:10,320
the Cypher query now let's see it in

530
00:21:10,320 --> 00:21:11,700
action

531
00:21:11,700 --> 00:21:15,740
so this is this is a web app

532
00:21:15,780 --> 00:21:18,480
that is vulnerable to

533
00:21:18,480 --> 00:21:21,799
neo4j that I wrote

534
00:21:23,940 --> 00:21:26,760
and this is about

535
00:21:26,760 --> 00:21:28,740
and now I have the python server here

536
00:21:28,740 --> 00:21:31,380
which is a HTTP server sort of

537
00:21:31,380 --> 00:21:33,659
this just doesn't care about

538
00:21:33,659 --> 00:21:36,780
um Innovative requests

539
00:21:36,780 --> 00:21:39,860
and now if I

540
00:21:41,460 --> 00:21:43,620
pretty trivia can look very just like

541
00:21:43,620 --> 00:21:46,200
the sequence action I get an error so

542
00:21:46,200 --> 00:21:48,299
this is an indication this is probably

543
00:21:48,299 --> 00:21:51,559
something is going on though

544
00:21:53,700 --> 00:21:56,539
so let's see

545
00:21:57,780 --> 00:22:02,280
here I'm trying to do the Ping

546
00:22:02,280 --> 00:22:05,400
I know that Hugo is a valid

547
00:22:05,400 --> 00:22:06,780
um

548
00:22:06,780 --> 00:22:08,940
it works because of 10 data so I don't

549
00:22:08,940 --> 00:22:11,039
need to do all all like all match or

550
00:22:11,039 --> 00:22:12,960
Union whatever

551
00:22:12,960 --> 00:22:16,200
we need to do is to call out CSV

552
00:22:16,200 --> 00:22:18,299
and

553
00:22:18,299 --> 00:22:20,720
wait

554
00:22:21,360 --> 00:22:23,760
nothing

555
00:22:23,760 --> 00:22:26,220
so maybe it's a match Clause so let's

556
00:22:26,220 --> 00:22:28,500
close it

557
00:22:28,500 --> 00:22:31,640
and we got a ping

558
00:22:31,799 --> 00:22:33,840
so now

559
00:22:33,840 --> 00:22:36,059
what's what's the first step like would

560
00:22:36,059 --> 00:22:37,679
be

561
00:22:37,679 --> 00:22:39,360
really getting

562
00:22:39,360 --> 00:22:41,520
the version to see what we're dealing

563
00:22:41,520 --> 00:22:43,380
with

564
00:22:43,380 --> 00:22:47,299
this of course pretty colored but

565
00:22:48,000 --> 00:22:51,120
so we have DBS components

566
00:22:51,120 --> 00:22:53,760
it's a procedure that we saw we saw

567
00:22:53,760 --> 00:22:54,720
earlier

568
00:22:54,720 --> 00:22:57,360
it returns all the data about the neo4j

569
00:22:57,360 --> 00:22:59,820
and then we just append

570
00:22:59,820 --> 00:23:04,260
the fields it returned with to the URL

571
00:23:04,260 --> 00:23:07,200
so let's send and we know now it's five

572
00:23:07,200 --> 00:23:09,539
we need for J5 specifically 5.30

573
00:23:09,539 --> 00:23:11,220
Community Edition

574
00:23:11,220 --> 00:23:13,919
okay so if the next step would be

575
00:23:13,919 --> 00:23:15,720
getting the procedures and it means that

576
00:23:15,720 --> 00:23:19,140
we need a apoc so it's we hope that apoc

577
00:23:19,140 --> 00:23:21,659
is installed as I said it usually is

578
00:23:21,659 --> 00:23:25,320
we run it and we see a lot of procedures

579
00:23:25,320 --> 00:23:27,539
a lot of paper procedures and also some

580
00:23:27,539 --> 00:23:29,400
built-in ones

581
00:23:29,400 --> 00:23:32,780
and if we look at them

582
00:23:35,460 --> 00:23:38,100
we can see for example we have load Json

583
00:23:38,100 --> 00:23:41,120
params we have

584
00:23:41,760 --> 00:23:43,740
um not jdbc a lot of interesting

585
00:23:43,740 --> 00:23:45,720
procedures here

586
00:23:45,720 --> 00:23:48,059
some of them procedures as we mentioned

587
00:23:48,059 --> 00:23:50,159
earlier that are very very powerful

588
00:23:50,159 --> 00:23:53,179
and also very common

589
00:23:54,260 --> 00:23:57,600
and now let's see what's the the queries

590
00:23:57,600 --> 00:23:59,280
so I used to run many

591
00:23:59,280 --> 00:24:01,860
because otherwise I would get only

592
00:24:01,860 --> 00:24:03,539
show transactions which is not very

593
00:24:03,539 --> 00:24:06,140
interesting

594
00:24:19,100 --> 00:24:22,020
and we got two results

595
00:24:22,020 --> 00:24:23,400
why

596
00:24:23,400 --> 00:24:25,500
because it creates it in transaction so

597
00:24:25,500 --> 00:24:27,299
the first one is a short transaction

598
00:24:27,299 --> 00:24:28,500
it's the boring one you don't really

599
00:24:28,500 --> 00:24:30,000
care about

600
00:24:30,000 --> 00:24:32,220
the other one is the correct that called

601
00:24:32,220 --> 00:24:34,799
it and now we know what it is for

602
00:24:34,799 --> 00:24:37,200
example here is a payload

603
00:24:37,200 --> 00:24:39,900
of everything around it this is what the

604
00:24:39,900 --> 00:24:42,539
the app sent to the server so we can see

605
00:24:42,539 --> 00:24:45,419
here it expects one variable one return

606
00:24:45,419 --> 00:24:48,000
one value called count

607
00:24:48,000 --> 00:24:49,980
and we can also see that it's supposed

608
00:24:49,980 --> 00:24:52,080
to be an integer because it uses the

609
00:24:52,080 --> 00:24:53,580
function count so the function count if

610
00:24:53,580 --> 00:24:55,200
we look it up it always attends an

611
00:24:55,200 --> 00:24:57,620
integer

612
00:24:59,760 --> 00:25:02,100
so now if we know that we can easily for

613
00:25:02,100 --> 00:25:04,320
example here change the number to

614
00:25:04,320 --> 00:25:06,419
whatever we want and if it was a more

615
00:25:06,419 --> 00:25:09,360
interesting app and not just a demo app

616
00:25:09,360 --> 00:25:11,520
we could have done like even more

617
00:25:11,520 --> 00:25:12,840
interesting things so we just will

618
00:25:12,840 --> 00:25:14,059
return

619
00:25:14,059 --> 00:25:18,600
1537 as count and we can control

620
00:25:18,600 --> 00:25:21,080
the results

621
00:25:22,799 --> 00:25:24,539
but now what

622
00:25:24,539 --> 00:25:26,880
it can be it right so let me tell you

623
00:25:26,880 --> 00:25:29,220
this talk is not about injections

624
00:25:29,220 --> 00:25:32,159
it's about neo4j and how to use it as an

625
00:25:32,159 --> 00:25:35,820
attacker and also for the Defenders it

626
00:25:35,820 --> 00:25:37,559
could really understand what the

627
00:25:37,559 --> 00:25:40,620
implications of using neo4js are and how

628
00:25:40,620 --> 00:25:42,539
to use it in a secure way which is

629
00:25:42,539 --> 00:25:45,539
possible neo4j is great I use it a lot

630
00:25:45,539 --> 00:25:47,700
but just we need to be aware of what it

631
00:25:47,700 --> 00:25:50,220
means what like what an attacker could

632
00:25:50,220 --> 00:25:52,580
do with it

633
00:25:52,919 --> 00:25:54,840
so most neo4j servers like everything

634
00:25:54,840 --> 00:25:56,580
today is

635
00:25:56,580 --> 00:25:58,620
um on like usually

636
00:25:58,620 --> 00:26:00,059
in the cloud

637
00:26:00,059 --> 00:26:01,980
and if you're in the cloud let's get

638
00:26:01,980 --> 00:26:03,659
start credentials

639
00:26:03,659 --> 00:26:07,140
the most common cloud is of course AWS

640
00:26:07,140 --> 00:26:10,200
there's also like gcp Azure but they

641
00:26:10,200 --> 00:26:13,320
work pretty similar in AWS or virtual

642
00:26:13,320 --> 00:26:15,960
machines are easy to instance they have

643
00:26:15,960 --> 00:26:19,380
a dedicated a dedicated HTTP server it's

644
00:26:19,380 --> 00:26:22,260
called imvs and instance method of the

645
00:26:22,260 --> 00:26:23,159
server

646
00:26:23,159 --> 00:26:26,039
and This Server returns it has a lot of

647
00:26:26,039 --> 00:26:28,740
metadata and it's including

648
00:26:28,740 --> 00:26:31,620
the credentials that the instance can

649
00:26:31,620 --> 00:26:33,960
use to access the cloud and Cloud

650
00:26:33,960 --> 00:26:36,059
resources

651
00:26:36,059 --> 00:26:40,320
This Server is always 169 to 54 169 to

652
00:26:40,320 --> 00:26:43,559
54 also in Asia and gcp

653
00:26:43,559 --> 00:26:46,080
and in AWS have two versions We have IMD

654
00:26:46,080 --> 00:26:47,700
suv1

655
00:26:47,700 --> 00:26:51,179
which is old it's less secure but it's

656
00:26:51,179 --> 00:26:53,760
still widely used it's the most it's by

657
00:26:53,760 --> 00:26:55,320
far more common

658
00:26:55,320 --> 00:26:58,260
because it is still the default

659
00:26:58,260 --> 00:26:59,820
and it's a secure because there are no

660
00:26:59,820 --> 00:27:02,220
sessions no special headers even the

661
00:27:02,220 --> 00:27:04,080
simplest any srf

662
00:27:04,080 --> 00:27:05,940
and you're in and that's why they

663
00:27:05,940 --> 00:27:09,000
introduced imds version 2. and the S

664
00:27:09,000 --> 00:27:10,980
version 2 is more secure because we need

665
00:27:10,980 --> 00:27:14,100
sessions headers so simplest directs are

666
00:27:14,100 --> 00:27:16,919
no longer enough

667
00:27:16,919 --> 00:27:18,799
so if it's

668
00:27:18,799 --> 00:27:21,539
version one it's pretty easy

669
00:27:21,539 --> 00:27:24,659
through two HTTP requests only get

670
00:27:24,659 --> 00:27:27,419
first we need to call this URL here

671
00:27:27,419 --> 00:27:30,179
latest method metadata I am security

672
00:27:30,179 --> 00:27:32,880
credentials we get the role name and it

673
00:27:32,880 --> 00:27:35,340
is appendix to the URL and we have

674
00:27:35,340 --> 00:27:38,100
credentials so if it was

675
00:27:38,100 --> 00:27:39,779
in neo4j

676
00:27:39,779 --> 00:27:41,580
I know it's kind of how to read it's

677
00:27:41,580 --> 00:27:43,740
right now no it doesn't it's not very

678
00:27:43,740 --> 00:27:46,500
important you can also locate later

679
00:27:46,500 --> 00:27:50,100
there's really low csvs here not two

680
00:27:50,100 --> 00:27:53,700
and the reason is the first one we get

681
00:27:53,700 --> 00:27:55,980
the rule the second one we get the

682
00:27:55,980 --> 00:27:58,440
credentials the third one we're sending

683
00:27:58,440 --> 00:28:01,559
the credentials to our server there is a

684
00:28:01,559 --> 00:28:03,240
substance here with some numbers those

685
00:28:03,240 --> 00:28:06,179
are just the offsets of any data is so

686
00:28:06,179 --> 00:28:08,940
that is because it returns a Json not a

687
00:28:08,940 --> 00:28:10,140
CSV

688
00:28:10,140 --> 00:28:12,240
but as attackers we don't really care a

689
00:28:12,240 --> 00:28:14,340
developer wants everything to be passed

690
00:28:14,340 --> 00:28:16,320
Packers just want to get the data

691
00:28:16,320 --> 00:28:19,020
so if we if we're in it we would get

692
00:28:19,020 --> 00:28:22,620
the token the secret and of course the

693
00:28:22,620 --> 00:28:24,299
first one the access screen

694
00:28:24,299 --> 00:28:26,640
and with this we can access network J we

695
00:28:26,640 --> 00:28:28,740
can access AWS

696
00:28:28,740 --> 00:28:31,740
but what what if it's a MDS version 2.

697
00:28:31,740 --> 00:28:33,720
it's kind of interesting because I

698
00:28:33,720 --> 00:28:35,700
remember when I did my research I read

699
00:28:35,700 --> 00:28:38,400
about neo4j attacks and many articles

700
00:28:38,400 --> 00:28:41,580
said that I on this version 2 is secure

701
00:28:41,580 --> 00:28:45,299
you cannot use neo4j to get credentials

702
00:28:45,299 --> 00:28:49,740
and I found out that it was not the case

703
00:28:49,740 --> 00:28:51,900
and also it's the same if it's gcp or

704
00:28:51,900 --> 00:28:53,640
Asia because they are pretty similar to

705
00:28:53,640 --> 00:28:56,880
imbius version too a little bit simpler

706
00:28:56,880 --> 00:28:59,159
so

707
00:28:59,159 --> 00:29:01,320
let's see how we can actually do it but

708
00:29:01,320 --> 00:29:03,419
before that we need to understand how

709
00:29:03,419 --> 00:29:05,400
I'm this version 2 actually works what

710
00:29:05,400 --> 00:29:06,779
makes it more secure

711
00:29:06,779 --> 00:29:10,020
in order to do that we need to ask an

712
00:29:10,020 --> 00:29:11,460
expert

713
00:29:11,460 --> 00:29:14,460
the biggest X expert the one that knows

714
00:29:14,460 --> 00:29:19,460
all answers we need to ask scientific

715
00:29:22,620 --> 00:29:25,440
so how do we use I'm just version two

716
00:29:25,440 --> 00:29:27,600
spare no details

717
00:29:27,600 --> 00:29:31,020
and we see nice it's python

718
00:29:31,020 --> 00:29:32,580
so the first step I know it's kind of

719
00:29:32,580 --> 00:29:33,960
how to read

720
00:29:33,960 --> 00:29:39,000
the first step is obtaining the token

721
00:29:39,000 --> 00:29:41,039
which we do

722
00:29:41,039 --> 00:29:42,960
we need a put request and we need to

723
00:29:42,960 --> 00:29:45,600
have this weird header okay

724
00:29:45,600 --> 00:29:48,918
now we have a token

725
00:29:50,820 --> 00:29:52,740
so now there is a URL which is familiar

726
00:29:52,740 --> 00:29:54,659
the same one before earlier

727
00:29:54,659 --> 00:29:56,279
except for now we need to add the token

728
00:29:56,279 --> 00:29:57,539
as a header

729
00:29:57,539 --> 00:29:58,980
other than that

730
00:29:58,980 --> 00:30:01,860
the same as MDS version one cool we get

731
00:30:01,860 --> 00:30:03,059
the whole name

732
00:30:03,059 --> 00:30:05,760
we are plenty to the URL

733
00:30:05,760 --> 00:30:08,340
and again the same kind of like and this

734
00:30:08,340 --> 00:30:09,600
version one except we need to add a

735
00:30:09,600 --> 00:30:11,460
header which is the token which we just

736
00:30:11,460 --> 00:30:13,140
got

737
00:30:13,140 --> 00:30:15,960
Okay so

738
00:30:15,960 --> 00:30:18,480
so we have now now we understand how MDS

739
00:30:18,480 --> 00:30:21,419
version 2 works and we have python code

740
00:30:21,419 --> 00:30:24,600
that does it but python is not neo4j

741
00:30:24,600 --> 00:30:26,880
it's not Cipher so let's let's see how

742
00:30:26,880 --> 00:30:30,080
we can do it using ciphon

743
00:30:30,179 --> 00:30:32,460
we have the same app

744
00:30:32,460 --> 00:30:34,799
similar ability

745
00:30:34,799 --> 00:30:38,460
but now we saw earlier we have apoc load

746
00:30:38,460 --> 00:30:40,140
the Cs reference and report this

747
00:30:40,140 --> 00:30:43,880
importance so let's use it

748
00:30:44,340 --> 00:30:45,659
so

749
00:30:45,659 --> 00:30:48,419
we can see here the same URL with

750
00:30:48,419 --> 00:30:50,220
certificate hold

751
00:30:50,220 --> 00:30:53,700
getting the token and here method put

752
00:30:53,700 --> 00:30:57,899
and we here where we add the header

753
00:30:57,899 --> 00:31:00,720
we have other false here which is kind

754
00:31:00,720 --> 00:31:03,179
of confusing this is because it's a CS3

755
00:31:03,179 --> 00:31:06,299
and how I'm telling neo4j that my CSV

756
00:31:06,299 --> 00:31:09,179
has no headers because otherwise it

757
00:31:09,179 --> 00:31:10,740
would think that token itself is the

758
00:31:10,740 --> 00:31:12,480
header and just wouldn't have done it

759
00:31:12,480 --> 00:31:15,620
and it's a shame

760
00:31:16,200 --> 00:31:18,679
so

761
00:31:20,580 --> 00:31:23,480
we're on it

762
00:31:25,260 --> 00:31:27,480
and here we have the token which is

763
00:31:27,480 --> 00:31:29,820
still not AWS credentials it's only a

764
00:31:29,820 --> 00:31:31,500
token

765
00:31:31,500 --> 00:31:35,659
but that's that's the first step

766
00:31:44,279 --> 00:31:46,820
a second

767
00:31:53,880 --> 00:31:57,740
I have an idea why this is okay

768
00:32:00,120 --> 00:32:02,520
so this is kind of scary

769
00:32:02,520 --> 00:32:03,720
all right

770
00:32:03,720 --> 00:32:06,000
we have a lot of data here but it's

771
00:32:06,000 --> 00:32:07,860
actually not so bad

772
00:32:07,860 --> 00:32:10,440
we call the second one the second call

773
00:32:10,440 --> 00:32:14,120
it we thought in fact

774
00:32:14,159 --> 00:32:16,980
and this time we added a header at the

775
00:32:16,980 --> 00:32:19,620
token as a header we have the six

776
00:32:19,620 --> 00:32:23,039
metadata security credentials

777
00:32:23,039 --> 00:32:25,080
and now we're supposed to get the one

778
00:32:25,080 --> 00:32:27,320
name

779
00:32:32,220 --> 00:32:34,860
so that's the whole name let's just

780
00:32:34,860 --> 00:32:38,240
append it to the URL

781
00:32:40,919 --> 00:32:43,679
and there we have it

782
00:32:43,679 --> 00:32:45,000
token

783
00:32:45,000 --> 00:32:48,120
secret access key and the access key ID

784
00:32:48,120 --> 00:32:50,940
and that's those are not real

785
00:32:50,940 --> 00:32:52,980
completely fake you can even see access

786
00:32:52,980 --> 00:32:55,860
key and if you are like even if you have

787
00:32:55,860 --> 00:32:57,960
like good visa and good side you can see

788
00:32:57,960 --> 00:33:00,600
that the secret says Secret in lit lead

789
00:33:00,600 --> 00:33:01,980
code

790
00:33:01,980 --> 00:33:04,200
of course it's not real but

791
00:33:04,200 --> 00:33:06,600
in Real Environment we get a real access

792
00:33:06,600 --> 00:33:09,419
key the real secret access key and the

793
00:33:09,419 --> 00:33:12,120
real token and then we are in

794
00:33:12,120 --> 00:33:15,380
we can use the servers

795
00:33:15,380 --> 00:33:19,279
privileges permissions to get

796
00:33:19,940 --> 00:33:21,899
to access

797
00:33:21,899 --> 00:33:24,539
and secrets that are stored in their

798
00:33:24,539 --> 00:33:27,299
secret manager in AWS we can use it to

799
00:33:27,299 --> 00:33:30,659
access code repositories whatever

800
00:33:30,659 --> 00:33:33,480
the server can access

801
00:33:33,480 --> 00:33:36,500
we can also access

802
00:33:36,899 --> 00:33:39,559
freely

803
00:33:45,600 --> 00:33:48,600
nice okay but and now a little bit some

804
00:33:48,600 --> 00:33:51,120
some more as I said we can also get some

805
00:33:51,120 --> 00:33:53,100
Secrets a simple circuit would be

806
00:33:53,100 --> 00:33:55,620
getting the hash right it's always nice

807
00:33:55,620 --> 00:33:59,100
so in Cipher in apoc there is a

808
00:33:59,100 --> 00:34:01,380
procedure called systemdb graph it's a

809
00:34:01,380 --> 00:34:04,140
special DB that we cannot usually

810
00:34:04,140 --> 00:34:06,360
retrieve and interact with we can but

811
00:34:06,360 --> 00:34:08,760
only using specific set of commands and

812
00:34:08,760 --> 00:34:11,280
not normal ones

813
00:34:11,280 --> 00:34:13,260
but using this procedure we can get

814
00:34:13,260 --> 00:34:15,418
entire database and this includes the

815
00:34:15,418 --> 00:34:18,719
credentials they removed us They removed

816
00:34:18,719 --> 00:34:20,820
it in the latest version after we told

817
00:34:20,820 --> 00:34:22,260
them that

818
00:34:22,260 --> 00:34:24,000
they have this problem

819
00:34:24,000 --> 00:34:26,580
but in almost all servers we can still

820
00:34:26,580 --> 00:34:27,899
call it we can still gets the

821
00:34:27,899 --> 00:34:29,280
credentials

822
00:34:29,280 --> 00:34:31,619
the the hash of the credentials that you

823
00:34:31,619 --> 00:34:33,780
can then we can just break you can see

824
00:34:33,780 --> 00:34:37,260
it's shot of the 56 2024 iterations and

825
00:34:37,260 --> 00:34:39,540
there is also the salt

826
00:34:39,540 --> 00:34:41,399
I think it's more interestings are

827
00:34:41,399 --> 00:34:43,859
environment variables today modern Cloud

828
00:34:43,859 --> 00:34:45,719
Solutions

829
00:34:45,719 --> 00:34:48,239
uh there's a lot of Secrets solved as

830
00:34:48,239 --> 00:34:49,980
environment variables

831
00:34:49,980 --> 00:34:52,739
and we had the procedure of config map

832
00:34:52,739 --> 00:34:54,540
and config lists they just

833
00:34:54,540 --> 00:34:56,339
returned all the environment variables

834
00:34:56,339 --> 00:34:57,780
installed in the server since it could

835
00:34:57,780 --> 00:35:00,480
include tokens to other other Cloud

836
00:35:00,480 --> 00:35:03,060
Solutions or maybe the ID that you need

837
00:35:03,060 --> 00:35:05,940
to access credentials

838
00:35:05,940 --> 00:35:08,400
um if it's not a simple

839
00:35:08,400 --> 00:35:10,859
um instance maybe it's easier if it's a

840
00:35:10,859 --> 00:35:13,859
container then you need an ID

841
00:35:13,859 --> 00:35:16,079
um maybe it's

842
00:35:16,079 --> 00:35:18,599
a password because some people store the

843
00:35:18,599 --> 00:35:20,820
password has environment credentials

844
00:35:20,820 --> 00:35:24,300
when they need to use API calls

845
00:35:24,300 --> 00:35:26,460
so this was the also removed it in the

846
00:35:26,460 --> 00:35:28,500
latest version after we told them that

847
00:35:28,500 --> 00:35:32,280
it's a security problem but still most

848
00:35:32,280 --> 00:35:35,280
most servers still have it installed

849
00:35:35,280 --> 00:35:37,079
like an older one and you can see this

850
00:35:37,079 --> 00:35:39,980
in that database

851
00:35:40,820 --> 00:35:43,380
procedures could be we can connect the

852
00:35:43,380 --> 00:35:46,560
SQL servers and some nosql servers and I

853
00:35:46,560 --> 00:35:48,000
don't have a lot of time also these

854
00:35:48,000 --> 00:35:50,579
procedures are not installed by default

855
00:35:50,579 --> 00:35:52,020
or at least they are but you need

856
00:35:52,020 --> 00:35:55,200
drivers so they are not as common but

857
00:35:55,200 --> 00:35:57,780
it's cool to check them

858
00:35:57,780 --> 00:36:01,040
and any questions

859
00:36:13,160 --> 00:36:16,680
yes yes there are ways to get purpose

860
00:36:16,680 --> 00:36:20,520
agency using IF apoc is installed

861
00:36:20,520 --> 00:36:23,579
unless the restarts the server and then

862
00:36:23,579 --> 00:36:25,920
you lose it but usually databases stay

863
00:36:25,920 --> 00:36:28,980
to like say live video like for a lot of

864
00:36:28,980 --> 00:36:31,440
time and you do it because in apoc

865
00:36:31,440 --> 00:36:34,619
supports um periodic tasks and then you

866
00:36:34,619 --> 00:36:36,780
can register the audit task where you

867
00:36:36,780 --> 00:36:39,780
can just for example query like some

868
00:36:39,780 --> 00:36:42,180
server ask for like a query to earn and

869
00:36:42,180 --> 00:36:43,619
you can just does it like periodically

870
00:36:43,619 --> 00:36:46,619
let it say once an hour so yes it is

871
00:36:46,619 --> 00:36:49,040
possible

872
00:36:53,160 --> 00:36:56,000
anyone else

873
00:37:02,099 --> 00:37:04,500
thank you for the presentation are you

874
00:37:04,500 --> 00:37:06,960
going to share some type of like uh

875
00:37:06,960 --> 00:37:09,839
creates or tool that allows us to find

876
00:37:09,839 --> 00:37:12,240
these like injections like automatically

877
00:37:12,240 --> 00:37:15,660
or before some kind of plugin such as a

878
00:37:15,660 --> 00:37:17,460
SQL map or anything any type of like

879
00:37:17,460 --> 00:37:20,099
tools like that

880
00:37:20,099 --> 00:37:22,320
um like so I we have an internal tool

881
00:37:22,320 --> 00:37:23,760
for that to be wrote

882
00:37:23,760 --> 00:37:25,980
I right now I'm not going to share the

883
00:37:25,980 --> 00:37:28,800
entire tool but if you want I can share

884
00:37:28,800 --> 00:37:31,740
some payloads and so many different

885
00:37:31,740 --> 00:37:34,440
techniques that we use there just come

886
00:37:34,440 --> 00:37:36,420
and ask me after the presentation

887
00:37:36,420 --> 00:37:38,820
we are going to publish we are going to

888
00:37:38,820 --> 00:37:41,460
release a tool soon that will be

889
00:37:41,460 --> 00:37:43,920
that can be useful to if you are if you

890
00:37:43,920 --> 00:37:45,359
want to defend your environment because

891
00:37:45,359 --> 00:37:48,420
it can find misconfigurations

892
00:37:48,420 --> 00:37:51,119
and it will tell you how to solve how to

893
00:37:51,119 --> 00:37:52,859
mitigate the tolerance

894
00:37:52,859 --> 00:37:55,279
thanks

895
00:37:59,640 --> 00:38:02,520
okay so just some takeaways

896
00:38:02,520 --> 00:38:05,040
if you're in Taco always use always

897
00:38:05,040 --> 00:38:06,960
injector always

898
00:38:06,960 --> 00:38:09,480
think about match or where look for apoc

899
00:38:09,480 --> 00:38:13,640
look for Secrets if you're a Defender

900
00:38:13,980 --> 00:38:15,839
um you can restrict procedures and

901
00:38:15,839 --> 00:38:18,480
functions and you can also if you're

902
00:38:18,480 --> 00:38:20,700
using the cloud

903
00:38:20,700 --> 00:38:22,619
adhere to the distributes principle and

904
00:38:22,619 --> 00:38:24,900
if it's AWS use MDS version 2 always

905
00:38:24,900 --> 00:38:28,200
even if it's not neo4j always

906
00:38:28,200 --> 00:38:31,020
um yeah thank you very much I'm nitai

907
00:38:31,020 --> 00:38:34,280
and thank you

908
00:38:34,280 --> 00:38:37,409
[Applause]

