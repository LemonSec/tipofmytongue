1
00:00:05,720 --> 00:00:07,560
thank you

2
00:00:07,560 --> 00:00:09,599
good morning everyone

3
00:00:09,599 --> 00:00:11,760
happy to see so many of you here I'm

4
00:00:11,760 --> 00:00:13,440
glad to be here

5
00:00:13,440 --> 00:00:16,020
um before we start a little intro about

6
00:00:16,020 --> 00:00:16,920
me

7
00:00:16,920 --> 00:00:19,199
um so my name is I am from the

8
00:00:19,199 --> 00:00:21,000
Netherlands I

9
00:00:21,000 --> 00:00:22,920
um yeah I've basically been in security

10
00:00:22,920 --> 00:00:25,680
for about almost seven years now and

11
00:00:25,680 --> 00:00:27,539
last year I started my own company where

12
00:00:27,539 --> 00:00:30,359
I do a mix of research consultancy and

13
00:00:30,359 --> 00:00:32,520
also giving training since this year

14
00:00:32,520 --> 00:00:34,320
um Kevin talks at various conferences

15
00:00:34,320 --> 00:00:37,380
like at Defcon Etc and most of my

16
00:00:37,380 --> 00:00:39,780
research are actually due by writing

17
00:00:39,780 --> 00:00:42,300
tools so I try to figure out how

18
00:00:42,300 --> 00:00:44,579
protocols work how things all work

19
00:00:44,579 --> 00:00:47,040
together then I write a tool about it

20
00:00:47,040 --> 00:00:49,440
and I've written several tools on active

21
00:00:49,440 --> 00:00:51,480
directory and also more on an Azure

22
00:00:51,480 --> 00:00:53,820
active directory the last few years I

23
00:00:53,820 --> 00:00:55,440
have a Blog I have a Twitter account so

24
00:00:55,440 --> 00:00:57,120
if you want to want to follow my work

25
00:00:57,120 --> 00:00:59,280
then you can do that there

26
00:00:59,280 --> 00:01:01,559
and so what we're going to be talking

27
00:01:01,559 --> 00:01:04,739
about today is about an Azure ad device

28
00:01:04,739 --> 00:01:07,799
identities and it's it's structured a

29
00:01:07,799 --> 00:01:09,960
bit like first explaining what the files

30
00:01:09,960 --> 00:01:11,820
identities are and what why they are

31
00:01:11,820 --> 00:01:14,640
important than on the technicalities

32
00:01:14,640 --> 00:01:17,159
like how does a defies get an identity

33
00:01:17,159 --> 00:01:19,920
how does that flow work and then we get

34
00:01:19,920 --> 00:01:21,840
into all the tokens so we'll start

35
00:01:21,840 --> 00:01:24,000
talking about primary refresh tokens and

36
00:01:24,000 --> 00:01:26,040
how these are protected on Modern

37
00:01:26,040 --> 00:01:28,740
Windows versions and all the issues that

38
00:01:28,740 --> 00:01:31,020
I found in the implementation and also

39
00:01:31,020 --> 00:01:33,900
how Microsoft resolved these issues and

40
00:01:33,900 --> 00:01:36,540
also some scenarios that

41
00:01:36,540 --> 00:01:38,820
um that I found that could be and a

42
00:01:38,820 --> 00:01:40,259
different option that you had to abuse

43
00:01:40,259 --> 00:01:41,220
this

44
00:01:41,220 --> 00:01:44,880
so just before we start a little bit on

45
00:01:44,880 --> 00:01:47,100
terminology so we're this talk is really

46
00:01:47,100 --> 00:01:49,439
about Azure active directory so it's not

47
00:01:49,439 --> 00:01:51,899
about Azure as a cloud infrastructure

48
00:01:51,899 --> 00:01:54,000
provider it's not about virtual machines

49
00:01:54,000 --> 00:01:56,340
Etc but it's really about the Azure ad

50
00:01:56,340 --> 00:01:58,619
identity platform and the identity

51
00:01:58,619 --> 00:02:02,280
platform is for Microsoft 365 also Azure

52
00:02:02,280 --> 00:02:04,020
resource manager or basically any other

53
00:02:04,020 --> 00:02:06,780
app you want to integrate with it so

54
00:02:06,780 --> 00:02:08,399
this is kind of the follow-up from

55
00:02:08,399 --> 00:02:10,080
on-prem active directory but it's really

56
00:02:10,080 --> 00:02:12,780
the identity part and not about about

57
00:02:12,780 --> 00:02:15,060
Cloud resources

58
00:02:15,060 --> 00:02:18,540
so all of this is quite important in the

59
00:02:18,540 --> 00:02:20,879
whole zero at first architecture even

60
00:02:20,879 --> 00:02:23,340
though it's a bit of a buzzwords if you

61
00:02:23,340 --> 00:02:26,099
look at the the architectural overview

62
00:02:26,099 --> 00:02:27,959
of this you see that

63
00:02:27,959 --> 00:02:30,599
um there's some components involved and

64
00:02:30,599 --> 00:02:32,700
of course on the laptop you see user

65
00:02:32,700 --> 00:02:34,560
identities because this is a very

66
00:02:34,560 --> 00:02:37,440
identity focused security platform so

67
00:02:37,440 --> 00:02:39,959
user identity is very important so it's

68
00:02:39,959 --> 00:02:42,019
a multi-factor authentication and other

69
00:02:42,019 --> 00:02:44,760
verification means but you also see

70
00:02:44,760 --> 00:02:47,160
device identities so device identities

71
00:02:47,160 --> 00:02:49,019
what we'll be talking about today and

72
00:02:49,019 --> 00:02:51,120
also how they tie in with this whole

73
00:02:51,120 --> 00:02:54,060
security policy enforcement and the

74
00:02:54,060 --> 00:02:57,599
whole um zero trust strategy basically

75
00:02:57,599 --> 00:03:00,360
so a device gets an identity when it's

76
00:03:00,360 --> 00:03:03,120
either registered or joined to Azure

77
00:03:03,120 --> 00:03:05,819
active directory and that can be a large

78
00:03:05,819 --> 00:03:07,440
range of devices so there's different

79
00:03:07,440 --> 00:03:09,840
scenarios some different differences

80
00:03:09,840 --> 00:03:12,000
here but basically you could have a

81
00:03:12,000 --> 00:03:14,159
mobile operating system or a desktop

82
00:03:14,159 --> 00:03:15,659
operating system that is basically

83
00:03:15,659 --> 00:03:17,819
registered or joined to Azure active

84
00:03:17,819 --> 00:03:20,519
directory and then the device identity

85
00:03:20,519 --> 00:03:23,099
exists as an object in Azure active

86
00:03:23,099 --> 00:03:24,239
directory

87
00:03:24,239 --> 00:03:26,879
and optionally you can manage this

88
00:03:26,879 --> 00:03:29,400
device by using InTune which is

89
00:03:29,400 --> 00:03:30,900
Microsoft's mobile advice management

90
00:03:30,900 --> 00:03:33,599
solution or you can also use some

91
00:03:33,599 --> 00:03:36,420
third-party MDM if you want

92
00:03:36,420 --> 00:03:41,159
now in Azure ad security do you have so

93
00:03:41,159 --> 00:03:43,019
various options to really secure your

94
00:03:43,019 --> 00:03:45,239
infrastructure and if you're looking at

95
00:03:45,239 --> 00:03:47,640
um kind of the strictest way that you

96
00:03:47,640 --> 00:03:49,620
really want to enforce people in your

97
00:03:49,620 --> 00:03:51,840
organization to only sign in from

98
00:03:51,840 --> 00:03:54,840
trusted devices then you'll be joining

99
00:03:54,840 --> 00:03:56,580
your device to Azure active directory

100
00:03:56,580 --> 00:03:58,739
you make sure that it's managed by an

101
00:03:58,739 --> 00:04:01,680
MDM such as InTune and InTune applies

102
00:04:01,680 --> 00:04:03,480
all kind of policies to devices so it

103
00:04:03,480 --> 00:04:05,819
manages the settings on the devices all

104
00:04:05,819 --> 00:04:09,720
the configuration of the devices and by

105
00:04:09,720 --> 00:04:11,580
applying the policies and checking if

106
00:04:11,580 --> 00:04:13,140
the settings are all correct the device

107
00:04:13,140 --> 00:04:15,599
becomes compliant and then people use

108
00:04:15,599 --> 00:04:17,820
conditional access policies to basically

109
00:04:17,820 --> 00:04:20,820
restrict access to resources such as

110
00:04:20,820 --> 00:04:23,220
sharepoints to only corporate compliant

111
00:04:23,220 --> 00:04:24,900
devices

112
00:04:24,900 --> 00:04:27,240
and of course in this part then it's

113
00:04:27,240 --> 00:04:30,060
also important to ensure that any device

114
00:04:30,060 --> 00:04:31,860
that people use is also really a

115
00:04:31,860 --> 00:04:34,440
corporate device so we're also looking

116
00:04:34,440 --> 00:04:37,500
at that they lock down basically the

117
00:04:37,500 --> 00:04:39,479
environment by enforcing that you can

118
00:04:39,479 --> 00:04:42,360
only enroll devices that are thrusted so

119
00:04:42,360 --> 00:04:43,560
they were purchased by the company

120
00:04:43,560 --> 00:04:46,259
itself and not just any device that you

121
00:04:46,259 --> 00:04:49,620
do bought somewhere on eBay for example

122
00:04:49,620 --> 00:04:51,419
um so in in June you can set this as

123
00:04:51,419 --> 00:04:53,400
enrollment restrictions and in the

124
00:04:53,400 --> 00:04:54,540
scenario that we're researching here

125
00:04:54,540 --> 00:04:57,360
InTune has been configured to block any

126
00:04:57,360 --> 00:04:59,160
devices that were not part of the

127
00:04:59,160 --> 00:05:00,840
organization

128
00:05:00,840 --> 00:05:03,419
so to give an overview of the research

129
00:05:03,419 --> 00:05:04,740
scenario

130
00:05:04,740 --> 00:05:07,080
um using Windows 10 here so Windows 10

131
00:05:07,080 --> 00:05:09,840
or 11 so modern operating systems

132
00:05:09,840 --> 00:05:11,580
um also in the setup we'll be using

133
00:05:11,580 --> 00:05:14,520
autopilot which is basically a way to

134
00:05:14,520 --> 00:05:18,180
ensure that devices are pre-registered

135
00:05:18,180 --> 00:05:20,460
already when you purchase them so you

136
00:05:20,460 --> 00:05:22,139
basically purchase the devices and they

137
00:05:22,139 --> 00:05:24,120
automatically become registered in your

138
00:05:24,120 --> 00:05:26,520
tenant and then you know that the device

139
00:05:26,520 --> 00:05:28,259
that you purchased is the actual device

140
00:05:28,259 --> 00:05:30,240
that's that's accessing the resource

141
00:05:30,240 --> 00:05:31,740
basically

142
00:05:31,740 --> 00:05:33,660
and we're looking down personal devices

143
00:05:33,660 --> 00:05:36,120
so InTune doesn't allow us to just

144
00:05:36,120 --> 00:05:38,820
register or join any device and we

145
00:05:38,820 --> 00:05:40,740
require device compliancy with

146
00:05:40,740 --> 00:05:43,639
conditional access and also we have a

147
00:05:43,639 --> 00:05:46,199
protection of Hardware protection of

148
00:05:46,199 --> 00:05:48,180
Secrets by using a trusted platform

149
00:05:48,180 --> 00:05:51,600
module so it's basically the most most

150
00:05:51,600 --> 00:05:53,580
locked down scenario that you that you

151
00:05:53,580 --> 00:05:55,139
can have

152
00:05:55,139 --> 00:05:56,940
so when I started this I had a couple of

153
00:05:56,940 --> 00:05:59,039
research questions and first of all so

154
00:05:59,039 --> 00:06:01,020
how our devices actually joined to Azure

155
00:06:01,020 --> 00:06:03,720
ad and how are the secrets that are

156
00:06:03,720 --> 00:06:06,300
involved actually protected by Hardware

157
00:06:06,300 --> 00:06:08,699
and of course if we know how it works

158
00:06:08,699 --> 00:06:11,039
then we can also look at if it's

159
00:06:11,039 --> 00:06:12,840
possible to extract these secrets anyway

160
00:06:12,840 --> 00:06:15,840
even though they are should be parts are

161
00:06:15,840 --> 00:06:18,419
protected and if it's possible to bypass

162
00:06:18,419 --> 00:06:21,000
like the device compliancy requirements

163
00:06:21,000 --> 00:06:22,500
because of course as an attacker that's

164
00:06:22,500 --> 00:06:26,120
quite interesting to know

165
00:06:27,780 --> 00:06:30,060
so let's start by looking at the device

166
00:06:30,060 --> 00:06:31,440
join flow

167
00:06:31,440 --> 00:06:33,600
and basically the device join flow if

168
00:06:33,600 --> 00:06:35,960
you have a device that was

169
00:06:35,960 --> 00:06:38,280
pre-registered using autopilot then

170
00:06:38,280 --> 00:06:40,919
you'll typically set it up by when you

171
00:06:40,919 --> 00:06:42,539
install Windows basically

172
00:06:42,539 --> 00:06:44,580
so it will ask you for your corporate

173
00:06:44,580 --> 00:06:47,460
credentials and then it will attempt to

174
00:06:47,460 --> 00:06:49,919
join it to Azure ID you can also do this

175
00:06:49,919 --> 00:06:52,139
after device was already set up but

176
00:06:52,139 --> 00:06:54,419
basically the flow is similar in just a

177
00:06:54,419 --> 00:06:56,759
different way to initiate it

178
00:06:56,759 --> 00:06:58,680
uh so on this screen you would sign in

179
00:06:58,680 --> 00:07:01,020
with your accounts you would do

180
00:07:01,020 --> 00:07:03,419
multi-factor authentication to

181
00:07:03,419 --> 00:07:04,919
um to validate that it's really your

182
00:07:04,919 --> 00:07:07,560
account and then in the background there

183
00:07:07,560 --> 00:07:09,539
it initiates basically a technical flow

184
00:07:09,539 --> 00:07:10,740
so

185
00:07:10,740 --> 00:07:13,080
um the device will generate two public

186
00:07:13,080 --> 00:07:15,360
private key pairs the first one is the

187
00:07:15,360 --> 00:07:17,160
device key and the second one is the

188
00:07:17,160 --> 00:07:20,580
transport key and these are asymmetric

189
00:07:20,580 --> 00:07:22,860
cryptographic keys and a lot of the

190
00:07:22,860 --> 00:07:25,199
communication in the protocol as we'll

191
00:07:25,199 --> 00:07:26,819
see later is based on these

192
00:07:26,819 --> 00:07:29,699
cryptographic keys and the public keys

193
00:07:29,699 --> 00:07:31,919
in this instance are sent to Azure ad

194
00:07:31,919 --> 00:07:34,139
and of course the private part of the

195
00:07:34,139 --> 00:07:36,000
key that remains remains on the device

196
00:07:36,000 --> 00:07:37,319
itself

197
00:07:37,319 --> 00:07:40,259
so Azure ID can basically validate that

198
00:07:40,259 --> 00:07:42,780
the device processes the private Key by

199
00:07:42,780 --> 00:07:44,759
checking it with the public key that's

200
00:07:44,759 --> 00:07:47,340
registered

201
00:07:47,340 --> 00:07:49,740
so when the device registers itself or

202
00:07:49,740 --> 00:07:53,099
join itself it sends this request it's

203
00:07:53,099 --> 00:07:55,860
just a HTTP post with some with some

204
00:07:55,860 --> 00:07:58,500
Json in it so it's not super complex in

205
00:07:58,500 --> 00:08:02,099
this case and just focusing a bit on the

206
00:08:02,099 --> 00:08:04,680
components the first one we see is an

207
00:08:04,680 --> 00:08:06,360
authorization header so this is the

208
00:08:06,360 --> 00:08:08,759
header that actually contains the access

209
00:08:08,759 --> 00:08:10,440
token for the device registration

210
00:08:10,440 --> 00:08:13,020
service so first the user requests a

211
00:08:13,020 --> 00:08:15,060
token by signing in and then it sends

212
00:08:15,060 --> 00:08:16,919
this request to the device registration

213
00:08:16,919 --> 00:08:19,620
service to um to actually register the

214
00:08:19,620 --> 00:08:22,020
device so it authenticates the user

215
00:08:22,020 --> 00:08:23,940
doing the registration

216
00:08:23,940 --> 00:08:26,160
and it sends a certificate signing

217
00:08:26,160 --> 00:08:27,900
request so basically your device is

218
00:08:27,900 --> 00:08:30,599
asking Azure ID okay I have this

219
00:08:30,599 --> 00:08:33,120
um these keys can you please issue me a

220
00:08:33,120 --> 00:08:35,159
certificate that I can use to uh to

221
00:08:35,159 --> 00:08:37,339
identify my device later on

222
00:08:37,339 --> 00:08:41,099
it also sends a transport key and so

223
00:08:41,099 --> 00:08:42,599
this is the public part of the transport

224
00:08:42,599 --> 00:08:44,580
key and that's basically a key that's

225
00:08:44,580 --> 00:08:47,700
used to provide additional encryption of

226
00:08:47,700 --> 00:08:50,399
any communication between Azure ID and

227
00:08:50,399 --> 00:08:52,440
the device

228
00:08:52,440 --> 00:08:54,300
um it also sent some properties so it

229
00:08:54,300 --> 00:08:55,800
will say that this is the OS version

230
00:08:55,800 --> 00:08:58,260
this is the device type so obviously

231
00:08:58,260 --> 00:08:59,820
this will be different depending on the

232
00:08:59,820 --> 00:09:02,580
operating system and it also shows the

233
00:09:02,580 --> 00:09:05,040
the hostname of the device those aren't

234
00:09:05,040 --> 00:09:06,779
actually validated so if you're doing

235
00:09:06,779 --> 00:09:08,279
this yourself you can put here whatever

236
00:09:08,279 --> 00:09:09,360
you want

237
00:09:09,360 --> 00:09:11,339
it's just the registration that counts

238
00:09:11,339 --> 00:09:12,720
basically

239
00:09:12,720 --> 00:09:14,580
and the join type is in this case is

240
00:09:14,580 --> 00:09:17,640
zero so zero means Azure ad join and

241
00:09:17,640 --> 00:09:19,440
there's different values if you're doing

242
00:09:19,440 --> 00:09:21,540
an Azure ad join an Azure ad

243
00:09:21,540 --> 00:09:23,279
registration or a hybrid join for

244
00:09:23,279 --> 00:09:25,080
example so these are all different

245
00:09:25,080 --> 00:09:26,160
numbers

246
00:09:26,160 --> 00:09:29,160
and lastly there's this device ticket

247
00:09:29,160 --> 00:09:31,320
and basically we'll get into that later

248
00:09:31,320 --> 00:09:33,480
but it's not strictly required so if

249
00:09:33,480 --> 00:09:35,580
you're registering a new device you can

250
00:09:35,580 --> 00:09:37,459
also leave this out

251
00:09:37,459 --> 00:09:40,800
now it sends this both requests and then

252
00:09:40,800 --> 00:09:43,860
it gets a response from Azure ID

253
00:09:43,860 --> 00:09:46,200
once again it's relatively simple it's

254
00:09:46,200 --> 00:09:48,480
your situation object and containing

255
00:09:48,480 --> 00:09:50,399
basically this certificate on the top so

256
00:09:50,399 --> 00:09:52,740
this is the signed certificate by Azure

257
00:09:52,740 --> 00:09:55,320
ad that the device can use to uh to

258
00:09:55,320 --> 00:09:57,420
authenticate itself and on the bottom

259
00:09:57,420 --> 00:09:59,880
you also see some membership changes so

260
00:09:59,880 --> 00:10:02,399
for those who are familiar with

261
00:10:02,399 --> 00:10:04,019
um with with Windows and how it

262
00:10:04,019 --> 00:10:05,700
structures local groups this is the

263
00:10:05,700 --> 00:10:07,200
security identifier of the local

264
00:10:07,200 --> 00:10:09,480
administrators group and basically this

265
00:10:09,480 --> 00:10:11,399
is saying okay you're now joined to

266
00:10:11,399 --> 00:10:14,640
Azure ad so these users should be local

267
00:10:14,640 --> 00:10:16,380
administrator on the device and it's

268
00:10:16,380 --> 00:10:18,360
doing that by passing some security

269
00:10:18,360 --> 00:10:20,519
identifiers in there that the device

270
00:10:20,519 --> 00:10:22,440
will put in the local administrator

271
00:10:22,440 --> 00:10:24,779
group so that Azure ad accounts that

272
00:10:24,779 --> 00:10:26,220
have an administrative role can

273
00:10:26,220 --> 00:10:29,540
basically manage the device

274
00:10:29,700 --> 00:10:32,700
so after the device is joined and we can

275
00:10:32,700 --> 00:10:34,620
see the status of the device so that you

276
00:10:34,620 --> 00:10:38,399
can do with these Rex CMD commandlet and

277
00:10:38,399 --> 00:10:40,260
that basically will show that the device

278
00:10:40,260 --> 00:10:43,080
is azure adjoined and it will also show

279
00:10:43,080 --> 00:10:46,380
the device ID so that's in the

280
00:10:46,380 --> 00:10:48,360
in the middle here it will say the

281
00:10:48,360 --> 00:10:49,980
thumbprint of the certificate

282
00:10:49,980 --> 00:10:51,899
and also something that's interesting is

283
00:10:51,899 --> 00:10:54,360
that it's as the key provider so that's

284
00:10:54,360 --> 00:10:56,579
where the private key basically is

285
00:10:56,579 --> 00:10:58,860
stored of the device certificate it is

286
00:10:58,860 --> 00:11:00,779
the Microsoft platform crypto provider

287
00:11:00,779 --> 00:11:04,440
and it also says GPM protected yes so

288
00:11:04,440 --> 00:11:06,779
this basically means if it shows the

289
00:11:06,779 --> 00:11:09,420
platform crypto profiler is that Windows

290
00:11:09,420 --> 00:11:11,820
is using the additional security of a

291
00:11:11,820 --> 00:11:14,220
trusted platform module to protect this

292
00:11:14,220 --> 00:11:16,680
private key and it's not stored in in

293
00:11:16,680 --> 00:11:18,720
software somewhere that attackers could

294
00:11:18,720 --> 00:11:20,220
extract it

295
00:11:20,220 --> 00:11:22,680
so the idea of a trusted platform module

296
00:11:22,680 --> 00:11:26,160
is that it's basically The Trusted

297
00:11:26,160 --> 00:11:28,380
platform module itself it has some

298
00:11:28,380 --> 00:11:30,959
private cryptographic keys and if you

299
00:11:30,959 --> 00:11:33,720
generate keys inside the TPM so if you

300
00:11:33,720 --> 00:11:35,459
generate private keys there

301
00:11:35,459 --> 00:11:38,700
um the key never leaves the TPM except

302
00:11:38,700 --> 00:11:41,640
in an encrypted format so the idea is

303
00:11:41,640 --> 00:11:43,740
that even if you like as an attacker has

304
00:11:43,740 --> 00:11:45,380
control over the whole operating system

305
00:11:45,380 --> 00:11:48,000
because the private keys are actually

306
00:11:48,000 --> 00:11:51,000
stored in the TPM or at least tied to

307
00:11:51,000 --> 00:11:54,300
the TPM then you cannot steal these keys

308
00:11:54,300 --> 00:11:56,220
and basically if the operating system

309
00:11:56,220 --> 00:11:59,040
wants to use the keys it asks the TPM

310
00:11:59,040 --> 00:12:01,260
hey I want to perform this key operation

311
00:12:01,260 --> 00:12:03,480
so for example it wants to perform some

312
00:12:03,480 --> 00:12:06,420
encryption or decryption or signing it's

313
00:12:06,420 --> 00:12:08,640
asked the TPM to do that for it and the

314
00:12:08,640 --> 00:12:11,160
VPN basically gives back the result to

315
00:12:11,160 --> 00:12:13,380
the operating system so then the even if

316
00:12:13,380 --> 00:12:14,519
the operating system itself is

317
00:12:14,519 --> 00:12:16,320
compromised you wouldn't be able to

318
00:12:16,320 --> 00:12:19,260
extract these keys and begins are TPM

319
00:12:19,260 --> 00:12:21,839
protected and actually ID uses this

320
00:12:21,839 --> 00:12:23,880
quite extensively to protect like

321
00:12:23,880 --> 00:12:26,700
sensitive key material

322
00:12:26,700 --> 00:12:30,839
so after the device join then the user

323
00:12:30,839 --> 00:12:33,180
can sign into the device and basically

324
00:12:33,180 --> 00:12:35,160
it signs in using their Azure ID

325
00:12:35,160 --> 00:12:38,220
username and password and then the

326
00:12:38,220 --> 00:12:40,740
um well the cloud AP module in LSS which

327
00:12:40,740 --> 00:12:43,320
is the module responsible for

328
00:12:43,320 --> 00:12:45,120
um for doing the authentication towards

329
00:12:45,120 --> 00:12:47,760
Azure ID and issues a primary refresh

330
00:12:47,760 --> 00:12:50,399
token and a primary refresh token is a

331
00:12:50,399 --> 00:12:52,380
specific credential that the device can

332
00:12:52,380 --> 00:12:54,540
then use for a single sign-on

333
00:12:54,540 --> 00:12:57,180
so let's have a look at the um at the

334
00:12:57,180 --> 00:12:59,579
flow there so the primary refresh token

335
00:12:59,579 --> 00:13:01,500
flow starts off by requesting a

336
00:13:01,500 --> 00:13:02,279
challenge

337
00:13:02,279 --> 00:13:05,519
so this is quite common in in many of

338
00:13:05,519 --> 00:13:07,980
these operations so to prevent basically

339
00:13:07,980 --> 00:13:10,620
replay attacks uh you they always ask

340
00:13:10,620 --> 00:13:14,399
for a a challenge or a nonce and the

341
00:13:14,399 --> 00:13:17,279
nonce is basically this encrypted string

342
00:13:17,279 --> 00:13:20,040
that isn't truly announced because you

343
00:13:20,040 --> 00:13:21,540
can use it multiple times but it does

344
00:13:21,540 --> 00:13:24,060
expire after like five minutes so if you

345
00:13:24,060 --> 00:13:25,740
do a cryptographic operation with this

346
00:13:25,740 --> 00:13:27,779
nonce and then five minutes later you

347
00:13:27,779 --> 00:13:28,920
wouldn't be able to do it anymore

348
00:13:28,920 --> 00:13:31,800
because the announce basically expired

349
00:13:31,800 --> 00:13:34,440
and so it first asked for announce and

350
00:13:34,440 --> 00:13:37,139
then it sends some signed data to the

351
00:13:37,139 --> 00:13:39,899
server so here we see something that

352
00:13:39,899 --> 00:13:42,300
looks a lot like a decent web token and

353
00:13:42,300 --> 00:13:44,880
it is a Json web token so basically it's

354
00:13:44,880 --> 00:13:47,100
sending a request to Azure ad saying

355
00:13:47,100 --> 00:13:49,320
okay I want to perform this action and

356
00:13:49,320 --> 00:13:51,660
it's sending that as like a science

357
00:13:51,660 --> 00:13:54,720
science request so this this token is

358
00:13:54,720 --> 00:13:55,980
actually signed with the device

359
00:13:55,980 --> 00:13:57,720
certificate so that Azure ID can

360
00:13:57,720 --> 00:13:59,639
basically authenticate that it's a real

361
00:13:59,639 --> 00:14:02,399
device doing the request

362
00:14:02,399 --> 00:14:04,740
and if we look at the data contents

363
00:14:04,740 --> 00:14:06,720
because we can just decode it as it's a

364
00:14:06,720 --> 00:14:09,300
normal Json map token we can see that

365
00:14:09,300 --> 00:14:12,420
there's first the request notes so it's

366
00:14:12,420 --> 00:14:13,860
took the request Mount that it's

367
00:14:13,860 --> 00:14:15,779
received from Azure ID and I put that in

368
00:14:15,779 --> 00:14:18,600
that sine data content and it also puts

369
00:14:18,600 --> 00:14:21,300
the the grant type as passwords with the

370
00:14:21,300 --> 00:14:23,100
plain username and password in there so

371
00:14:23,100 --> 00:14:25,019
basically when you authenticate on the

372
00:14:25,019 --> 00:14:27,360
Windows login screen on an Azure adjoint

373
00:14:27,360 --> 00:14:29,880
device it just hands over that username

374
00:14:29,880 --> 00:14:33,120
and password to Azure ID and Via this

375
00:14:33,120 --> 00:14:36,660
this basically signed Json web token

376
00:14:36,660 --> 00:14:39,260
foreign

377
00:14:39,620 --> 00:14:41,760
if the password is correct of course

378
00:14:41,760 --> 00:14:44,399
will be this primer refresh token

379
00:14:44,399 --> 00:14:45,779
assurance

380
00:14:45,779 --> 00:14:48,540
so it says refresh token but this is

381
00:14:48,540 --> 00:14:50,160
actually the primary refresh token that

382
00:14:50,160 --> 00:14:51,959
you get

383
00:14:51,959 --> 00:14:54,660
um now a primary refresh token it's

384
00:14:54,660 --> 00:14:57,240
um so the the token itself is not super

385
00:14:57,240 --> 00:14:59,100
secret because it sends during various

386
00:14:59,100 --> 00:15:01,260
requests but the thing that makes the

387
00:15:01,260 --> 00:15:03,300
primary refresh token very

388
00:15:03,300 --> 00:15:06,060
um very sensitive especially this

389
00:15:06,060 --> 00:15:07,620
session key so you always need this

390
00:15:07,620 --> 00:15:10,139
cryptographic session key to prove that

391
00:15:10,139 --> 00:15:11,459
you actually possess this primary

392
00:15:11,459 --> 00:15:14,339
refresh token so the session key here is

393
00:15:14,339 --> 00:15:16,980
sent in an encrypted format encrypted

394
00:15:16,980 --> 00:15:19,199
with the transport key so that only the

395
00:15:19,199 --> 00:15:21,540
device itself can decrypt this key and

396
00:15:21,540 --> 00:15:23,399
then basically obtain the plain text

397
00:15:23,399 --> 00:15:24,779
transport key

398
00:15:24,779 --> 00:15:27,360
and we also see that it expires in two

399
00:15:27,360 --> 00:15:29,760
weeks and it's actually not true so

400
00:15:29,760 --> 00:15:31,500
primary first tokens are valid for 90

401
00:15:31,500 --> 00:15:33,959
days but it's still SAS two weeks and

402
00:15:33,959 --> 00:15:36,420
windows also things to weeks but they're

403
00:15:36,420 --> 00:15:39,480
in fact valid for 90 days

404
00:15:39,480 --> 00:15:42,120
now the storage key or this session key

405
00:15:42,120 --> 00:15:43,440
at the bottom

406
00:15:43,440 --> 00:15:45,180
um that's the interesting part because

407
00:15:45,180 --> 00:15:46,860
you need this to actually use the

408
00:15:46,860 --> 00:15:49,220
primary fish token which makes it very

409
00:15:49,220 --> 00:15:51,600
similar to like a Kerber or stick with

410
00:15:51,600 --> 00:15:53,040
granting tickets because then you also

411
00:15:53,040 --> 00:15:55,680
need the session key to to use it

412
00:15:55,680 --> 00:15:58,260
and how this all works with the TPM is

413
00:15:58,260 --> 00:16:00,120
also quite interesting so

414
00:16:00,120 --> 00:16:03,300
um the TPM basically is a quite a small

415
00:16:03,300 --> 00:16:05,639
chip so you cannot like store 100 keys

416
00:16:05,639 --> 00:16:07,800
in there but the TPM has basically a

417
00:16:07,800 --> 00:16:09,180
root storage key that's stored in

418
00:16:09,180 --> 00:16:12,600
hardware and then any additional Keys

419
00:16:12,600 --> 00:16:15,000
such as storage keys that you can use to

420
00:16:15,000 --> 00:16:17,880
store encrypted data and they can be

421
00:16:17,880 --> 00:16:19,440
stored on this but they're always stored

422
00:16:19,440 --> 00:16:21,899
in encrypted formats so the transport

423
00:16:21,899 --> 00:16:24,720
key the device generates is actually a

424
00:16:24,720 --> 00:16:28,680
storage key in TPM terms and when Azure

425
00:16:28,680 --> 00:16:30,600
ID issues a session key it will like

426
00:16:30,600 --> 00:16:33,000
encrypt it with the public part of this

427
00:16:33,000 --> 00:16:36,360
and the transport key so basically that

428
00:16:36,360 --> 00:16:39,660
means that you can only decrypt this key

429
00:16:39,660 --> 00:16:42,480
in the TPM and you cannot use it in the

430
00:16:42,480 --> 00:16:44,820
OS so the OS never gets access to the

431
00:16:44,820 --> 00:16:46,500
plain text session key but it can only

432
00:16:46,500 --> 00:16:49,380
be used by loading this transport key

433
00:16:49,380 --> 00:16:51,720
which is a storage key in the TPM and

434
00:16:51,720 --> 00:16:53,820
asking the TPM to do certain operations

435
00:16:53,820 --> 00:16:56,279
with the with the session key

436
00:16:56,279 --> 00:16:58,380
so that's basically how it's like tied

437
00:16:58,380 --> 00:17:02,519
to the TPM over these different requests

438
00:17:02,519 --> 00:17:05,040
so just to summarize this

439
00:17:05,040 --> 00:17:08,280
um there's the private key of the device

440
00:17:08,280 --> 00:17:10,319
certificate there's the transport key

441
00:17:10,319 --> 00:17:11,880
and the session key and these are all

442
00:17:11,880 --> 00:17:14,160
tied to the TPM and the operating system

443
00:17:14,160 --> 00:17:16,500
can use those keys but it shouldn't have

444
00:17:16,500 --> 00:17:18,000
access to like the plain text key

445
00:17:18,000 --> 00:17:19,260
material

446
00:17:19,260 --> 00:17:21,959
and the operating system then gets this

447
00:17:21,959 --> 00:17:24,240
primary refresh token and that can be

448
00:17:24,240 --> 00:17:27,119
used to single do perform single sign-on

449
00:17:27,119 --> 00:17:30,059
to Azure ad resources

450
00:17:30,059 --> 00:17:33,179
so just looking at like how this PRT is

451
00:17:33,179 --> 00:17:34,860
used and what we can do with this from

452
00:17:34,860 --> 00:17:36,480
the endpoint

453
00:17:36,480 --> 00:17:38,340
so there's basically

454
00:17:38,340 --> 00:17:40,140
um quite some attacks that you can do if

455
00:17:40,140 --> 00:17:42,539
you are on a system as an attacker that

456
00:17:42,539 --> 00:17:44,940
has a primary refresh token

457
00:17:44,940 --> 00:17:47,520
um so similar to how single sign-on

458
00:17:47,520 --> 00:17:50,520
Works in Azure adk in on-prem ad cases

459
00:17:50,520 --> 00:17:53,160
as a regular user any process can

460
00:17:53,160 --> 00:17:55,679
basically request data for single

461
00:17:55,679 --> 00:17:57,059
sign-on purposes so it's going to say

462
00:17:57,059 --> 00:17:58,740
hey I want to sign into this app please

463
00:17:58,740 --> 00:18:01,679
give me some single sign-on data

464
00:18:01,679 --> 00:18:05,160
so a regular user can request to use

465
00:18:05,160 --> 00:18:06,960
this primary refresh token by asking

466
00:18:06,960 --> 00:18:08,940
else as nicely basically

467
00:18:08,940 --> 00:18:11,160
and of course if you're administrator or

468
00:18:11,160 --> 00:18:13,140
if your system on the device then you

469
00:18:13,140 --> 00:18:16,559
can also dimp the LSS memory and you can

470
00:18:16,559 --> 00:18:19,200
also steal the primary refresh token in

471
00:18:19,200 --> 00:18:21,539
the session key and the session key but

472
00:18:21,539 --> 00:18:23,520
not if it's protected by TPM so if

473
00:18:23,520 --> 00:18:26,039
there's no TPM then all this all the

474
00:18:26,039 --> 00:18:28,200
things will be stored in software

475
00:18:28,200 --> 00:18:29,760
basically and you can dump the playing

476
00:18:29,760 --> 00:18:31,740
key but if it's starting a TPM then you

477
00:18:31,740 --> 00:18:35,340
cannot and even if there is a TPM then

478
00:18:35,340 --> 00:18:37,740
as administrator of course you can still

479
00:18:37,740 --> 00:18:40,320
like interact with the PRT and the

480
00:18:40,320 --> 00:18:42,960
session key and you can just ask the CPM

481
00:18:42,960 --> 00:18:45,000
to basically perform the cryptographic

482
00:18:45,000 --> 00:18:46,860
operations for you

483
00:18:46,860 --> 00:18:48,299
and so we'll look at that in a bit as

484
00:18:48,299 --> 00:18:50,480
well

485
00:18:50,520 --> 00:18:52,020
um there's basically two ways that

486
00:18:52,020 --> 00:18:54,840
Windows uses prts and maybe more but

487
00:18:54,840 --> 00:18:57,120
there's two ways that I'm aware of so

488
00:18:57,120 --> 00:18:59,460
for Native apps they'll actually ask the

489
00:18:59,460 --> 00:19:02,039
web account manager which is a token

490
00:19:02,039 --> 00:19:05,039
broker component so that handles all the

491
00:19:05,039 --> 00:19:07,320
authentication for the for the apps and

492
00:19:07,320 --> 00:19:09,059
the apps don't need to to worry about it

493
00:19:09,059 --> 00:19:12,179
and this token broker basically passes

494
00:19:12,179 --> 00:19:14,280
the request onto LSS and Elsa's then

495
00:19:14,280 --> 00:19:17,039
we'll ask the ask for tokens using the

496
00:19:17,039 --> 00:19:20,520
primary refresh token there's also a way

497
00:19:20,520 --> 00:19:23,340
to do single sign on in the browser so

498
00:19:23,340 --> 00:19:25,980
then the browser will basically ask LSS

499
00:19:25,980 --> 00:19:28,260
for a specific header that it can use

500
00:19:28,260 --> 00:19:30,480
when authenticating which is kind of

501
00:19:30,480 --> 00:19:34,080
like a purity cookie so it will ask LSS

502
00:19:34,080 --> 00:19:36,179
for that cookie and it will inject that

503
00:19:36,179 --> 00:19:38,460
in any authentication flow so that Azure

504
00:19:38,460 --> 00:19:40,320
ID Loop you can see okay this is a

505
00:19:40,320 --> 00:19:43,080
device that is that has a PRT so I can

506
00:19:43,080 --> 00:19:46,559
use this for for single sign-on

507
00:19:46,559 --> 00:19:49,080
um so as a daggers there's uh multiple

508
00:19:49,080 --> 00:19:52,260
ways that we can actually do this so

509
00:19:52,260 --> 00:19:54,780
there's some some links here about two

510
00:19:54,780 --> 00:19:56,700
different approaches one by me one by

511
00:19:56,700 --> 00:19:59,039
another researcher about how you can

512
00:19:59,039 --> 00:20:01,260
request a single sign-on data if you are

513
00:20:01,260 --> 00:20:03,720
running on the operating system as a

514
00:20:03,720 --> 00:20:06,660
normal user and then you can like steal

515
00:20:06,660 --> 00:20:09,059
the single sign-on data to perform the

516
00:20:09,059 --> 00:20:10,799
sign on somewhere else

517
00:20:10,799 --> 00:20:13,260
and so that's as a limited user

518
00:20:13,260 --> 00:20:16,140
and as an admin I work together with

519
00:20:16,140 --> 00:20:18,480
Benjamin Delphi basically to create a

520
00:20:18,480 --> 00:20:20,940
update for mimikats that can can do this

521
00:20:20,940 --> 00:20:24,539
so here you see that mimikats can dump

522
00:20:24,539 --> 00:20:27,539
the cloud AP module in LSS and basically

523
00:20:27,539 --> 00:20:30,120
an extract the primer refresh token from

524
00:20:30,120 --> 00:20:31,740
there

525
00:20:31,740 --> 00:20:34,980
and so imagine that we are like we are

526
00:20:34,980 --> 00:20:37,500
dumping such a primary refresh token so

527
00:20:37,500 --> 00:20:39,240
now how does the authentication actually

528
00:20:39,240 --> 00:20:41,460
look with the primary refresh token

529
00:20:41,460 --> 00:20:44,039
as I already mentioned shortly the like

530
00:20:44,039 --> 00:20:46,740
the PRT cookie so that's what what

531
00:20:46,740 --> 00:20:48,660
browsers use to do single sign-on to

532
00:20:48,660 --> 00:20:51,179
Azure ad with a PRT and that's basically

533
00:20:51,179 --> 00:20:54,480
a Aviation web token so it will contain

534
00:20:54,480 --> 00:20:58,919
a header a body with some claims and a a

535
00:20:58,919 --> 00:21:00,780
signature to prove that it's authentic

536
00:21:00,780 --> 00:21:02,160
basically

537
00:21:02,160 --> 00:21:05,940
and in the header we see first there's a

538
00:21:05,940 --> 00:21:08,160
CTX that's so that's a basically a

539
00:21:08,160 --> 00:21:11,100
cryptographic nonce that it uses

540
00:21:11,100 --> 00:21:13,440
um there's also the refresh token itself

541
00:21:13,440 --> 00:21:15,299
so this is the primary refresh token

542
00:21:15,299 --> 00:21:17,760
that it's using to authenticate and then

543
00:21:17,760 --> 00:21:19,740
there's also the request none so once

544
00:21:19,740 --> 00:21:22,380
again this flow uses this request nons

545
00:21:22,380 --> 00:21:24,480
to prevent basically this from being

546
00:21:24,480 --> 00:21:27,780
replayed after the nodes has expired

547
00:21:27,780 --> 00:21:30,179
and then of course we also have the

548
00:21:30,179 --> 00:21:32,400
signature so it basically uses the

549
00:21:32,400 --> 00:21:35,460
session key to calculate a signature and

550
00:21:35,460 --> 00:21:37,500
that is used to sign this Json web token

551
00:21:37,500 --> 00:21:39,360
and Azure ID can then validate that it

552
00:21:39,360 --> 00:21:42,419
was all done correctly

553
00:21:42,419 --> 00:21:44,820
so the technical parts of the signing

554
00:21:44,820 --> 00:21:45,840
flow

555
00:21:45,840 --> 00:21:47,640
um so this is the simplified version if

556
00:21:47,640 --> 00:21:49,980
it's imagine that it's a software only

557
00:21:49,980 --> 00:21:53,280
key so the OS basically generates some

558
00:21:53,280 --> 00:21:55,020
random bytes and this is called the

559
00:21:55,020 --> 00:21:56,880
context and it uses this for the

560
00:21:56,880 --> 00:22:00,600
cryptographic operations and it puts

561
00:22:00,600 --> 00:22:02,400
these random bytes in a key derivation

562
00:22:02,400 --> 00:22:04,679
function together with the session key

563
00:22:04,679 --> 00:22:07,860
to calculate a derived key and this

564
00:22:07,860 --> 00:22:09,419
derived key so this will be a different

565
00:22:09,419 --> 00:22:11,880
key for each random context that's

566
00:22:11,880 --> 00:22:14,220
generated is actually used together with

567
00:22:14,220 --> 00:22:16,980
the primary refresh token with the nonce

568
00:22:16,980 --> 00:22:20,520
from Azure ID to create this brt cookie

569
00:22:20,520 --> 00:22:21,900
signature

570
00:22:21,900 --> 00:22:25,260
so it's basically calculates a new key

571
00:22:25,260 --> 00:22:27,240
for every request

572
00:22:27,240 --> 00:22:30,240
so this is the simplified version now if

573
00:22:30,240 --> 00:22:32,159
there is a TPM involved then the flow

574
00:22:32,159 --> 00:22:34,200
looks slightly more complicated so

575
00:22:34,200 --> 00:22:37,200
basically because the session key is not

576
00:22:37,200 --> 00:22:39,299
in the operating system but it's in the

577
00:22:39,299 --> 00:22:41,700
TPM and only the TPM can basically

578
00:22:41,700 --> 00:22:44,520
perform crypto operations with it then

579
00:22:44,520 --> 00:22:46,020
the operating system will generate these

580
00:22:46,020 --> 00:22:48,900
random bytes then it will ask the tpn to

581
00:22:48,900 --> 00:22:51,000
do the the key derivation and then the

582
00:22:51,000 --> 00:22:53,100
operating system gets this derived key

583
00:22:53,100 --> 00:22:55,380
and that it can combine with the primary

584
00:22:55,380 --> 00:22:58,140
refresh token with the nons to create

585
00:22:58,140 --> 00:23:01,500
this PRT cookie now there is a bit of an

586
00:23:01,500 --> 00:23:04,740
issue with this so if you look carefully

587
00:23:04,740 --> 00:23:06,900
you see that the only thing that goes to

588
00:23:06,900 --> 00:23:09,840
the DPN is basically these random bytes

589
00:23:09,840 --> 00:23:13,320
so the cryptographic context so if you

590
00:23:13,320 --> 00:23:15,960
are an attacker with access to the else

591
00:23:15,960 --> 00:23:18,360
as process then you can basically

592
00:23:18,360 --> 00:23:20,520
perform like a lot of pre-calculation

593
00:23:20,520 --> 00:23:23,340
attacks so if I just give a lot of

594
00:23:23,340 --> 00:23:25,860
random buys to the TPM it will generate

595
00:23:25,860 --> 00:23:28,440
a lot of derived keys for me and because

596
00:23:28,440 --> 00:23:32,400
these these derived keys do not expire

597
00:23:32,400 --> 00:23:34,020
they don't have an expiry they're just

598
00:23:34,020 --> 00:23:36,179
based on on random bytes basically then

599
00:23:36,179 --> 00:23:37,919
if I have access to the operating system

600
00:23:37,919 --> 00:23:40,580
I can just pre-calculate this and then

601
00:23:40,580 --> 00:23:43,500
use these Keys whenever I want without

602
00:23:43,500 --> 00:23:46,080
even needing the session key so there's

603
00:23:46,080 --> 00:23:48,900
quite a flaw in this and you can use

604
00:23:48,900 --> 00:23:53,400
mimikats to do this so if you load the

605
00:23:53,400 --> 00:23:55,740
the primary session the the session key

606
00:23:55,740 --> 00:23:57,059
basically

607
00:23:57,059 --> 00:23:59,400
so in this case it's it's protected by

608
00:23:59,400 --> 00:24:01,919
the TPM and mimicas will generate a

609
00:24:01,919 --> 00:24:03,780
context for you so these random bytes

610
00:24:03,780 --> 00:24:06,179
and then it will give you a derived key

611
00:24:06,179 --> 00:24:07,980
and that's the right key is actually

612
00:24:07,980 --> 00:24:10,860
used to calculate the the signature

613
00:24:10,860 --> 00:24:13,440
so if we use

614
00:24:13,440 --> 00:24:16,380
um so if we use some tools as part of my

615
00:24:16,380 --> 00:24:18,000
row tools framework we can basically

616
00:24:18,000 --> 00:24:21,360
authenticate by using this creating a

617
00:24:21,360 --> 00:24:23,400
PRT cookie ourselves and then providing

618
00:24:23,400 --> 00:24:26,640
the PRT context and the derived key that

619
00:24:26,640 --> 00:24:28,500
belongs to it and then basically

620
00:24:28,500 --> 00:24:32,220
generate our own cookies at runtime and

621
00:24:32,220 --> 00:24:33,840
basically whenever we want we can

622
00:24:33,840 --> 00:24:35,640
authenticate using the single sign-on

623
00:24:35,640 --> 00:24:37,740
data without actually needing access to

624
00:24:37,740 --> 00:24:40,620
the TPM

625
00:24:40,620 --> 00:24:42,840
so the theodr of this

626
00:24:42,840 --> 00:24:45,539
um of course if there's no TPM at all

627
00:24:45,539 --> 00:24:48,000
then you can just steal the primary

628
00:24:48,000 --> 00:24:49,740
refresh token including the session key

629
00:24:49,740 --> 00:24:52,260
as an attacker if there is a DPM then

630
00:24:52,260 --> 00:24:55,380
you could still acquire combinations of

631
00:24:55,380 --> 00:24:57,659
contexts and derived keys that could

632
00:24:57,659 --> 00:24:59,700
allow you to use the PRT without

633
00:24:59,700 --> 00:25:02,159
actually having access to that device if

634
00:25:02,159 --> 00:25:04,020
you want the longer version of this it's

635
00:25:04,020 --> 00:25:06,600
it's in my blog here

636
00:25:06,600 --> 00:25:08,280
um so there was quite a flaw with this

637
00:25:08,280 --> 00:25:10,440
of course and Microsoft responded to

638
00:25:10,440 --> 00:25:12,720
that by basically changing the behavior

639
00:25:12,720 --> 00:25:15,000
of this

640
00:25:15,000 --> 00:25:17,220
um so they made some changes in the

641
00:25:17,220 --> 00:25:20,640
whole PRT signing flow they also changed

642
00:25:20,640 --> 00:25:22,620
the storage mechanism which broke the

643
00:25:22,620 --> 00:25:24,900
cloud AP functionality in mimikats for a

644
00:25:24,900 --> 00:25:28,140
while nowadays it's working again so you

645
00:25:28,140 --> 00:25:30,539
can dump the PRT again in mimikats but

646
00:25:30,539 --> 00:25:33,000
you cannot do like the new version of

647
00:25:33,000 --> 00:25:34,860
the key derivation function so if you

648
00:25:34,860 --> 00:25:36,960
find blogs about this stack explaining

649
00:25:36,960 --> 00:25:38,640
how to do this and then some of them may

650
00:25:38,640 --> 00:25:41,100
be outdated and not work anymore

651
00:25:41,100 --> 00:25:43,200
and basically in the updated PRT

652
00:25:43,200 --> 00:25:46,799
structure we see this added field which

653
00:25:46,799 --> 00:25:50,580
says kdf version 2 so that uses a new

654
00:25:50,580 --> 00:25:52,919
key derivation function to basically

655
00:25:52,919 --> 00:25:55,799
calculate these derived keys

656
00:25:55,799 --> 00:25:58,760
and if we look in the documentation

657
00:25:58,760 --> 00:26:02,159
then they basically changed it so that

658
00:26:02,159 --> 00:26:04,620
they don't just put like these random

659
00:26:04,620 --> 00:26:06,659
bytes called the context to derive the

660
00:26:06,659 --> 00:26:09,600
signing key that they actually use a

661
00:26:09,600 --> 00:26:13,260
share 256 hash of that context plus the

662
00:26:13,260 --> 00:26:15,960
body of the Json web token and to

663
00:26:15,960 --> 00:26:18,299
calculate this derived key and this is

664
00:26:18,299 --> 00:26:20,880
documented I actually only found out it

665
00:26:20,880 --> 00:26:22,260
was documented after I reverse

666
00:26:22,260 --> 00:26:24,299
engineered it all so I could have saved

667
00:26:24,299 --> 00:26:25,740
myself some issues here by reading the

668
00:26:25,740 --> 00:26:27,659
documentation

669
00:26:27,659 --> 00:26:31,279
but basically if we update this graph

670
00:26:31,279 --> 00:26:34,440
then now it first takes the nonce from

671
00:26:34,440 --> 00:26:35,760
Azure ad so that's something that

672
00:26:35,760 --> 00:26:38,220
expires after a few minutes it combines

673
00:26:38,220 --> 00:26:40,559
that with the primer refresh token and

674
00:26:40,559 --> 00:26:43,080
it uses that to create the Json web

675
00:26:43,080 --> 00:26:45,000
token body

676
00:26:45,000 --> 00:26:46,500
um then it combines that with these

677
00:26:46,500 --> 00:26:48,600
random bytes and then it takes the

678
00:26:48,600 --> 00:26:51,059
shadow 56 hash of this whole thing and

679
00:26:51,059 --> 00:26:53,580
that's called the kdf context and the

680
00:26:53,580 --> 00:26:56,159
kdf context that is actually used in the

681
00:26:56,159 --> 00:26:58,860
key derivation with the TPM to get this

682
00:26:58,860 --> 00:27:01,140
derived key and so you see that because

683
00:27:01,140 --> 00:27:03,960
it now includes this nons which is time

684
00:27:03,960 --> 00:27:05,580
bound so it only works for a few minutes

685
00:27:05,580 --> 00:27:07,520
then you can no longer do this

686
00:27:07,520 --> 00:27:10,860
pre-calculation and like pre-calculates

687
00:27:10,860 --> 00:27:12,659
these derived keys to use at later

688
00:27:12,659 --> 00:27:14,940
points because you will always need to

689
00:27:14,940 --> 00:27:16,380
have a recent nouns and the runs

690
00:27:16,380 --> 00:27:18,419
nonsense are controlled by by Microsoft

691
00:27:18,419 --> 00:27:20,100
so you cannot create those yourself

692
00:27:20,100 --> 00:27:22,699
basically

693
00:27:22,980 --> 00:27:24,779
um so this was patched

694
00:27:24,779 --> 00:27:27,600
um with this CFE number and basically

695
00:27:27,600 --> 00:27:29,840
the new method prevents you from

696
00:27:29,840 --> 00:27:32,640
pre-calculating these these derived keys

697
00:27:32,640 --> 00:27:34,799
by putting the nouns as part of the key

698
00:27:34,799 --> 00:27:37,200
derivation function and they also

699
00:27:37,200 --> 00:27:39,720
prevented you from downgrading the key

700
00:27:39,720 --> 00:27:42,179
derivation function and so I assume it's

701
00:27:42,179 --> 00:27:44,640
stored somewhere in the PRT which key

702
00:27:44,640 --> 00:27:46,440
derivation function was used when

703
00:27:46,440 --> 00:27:48,600
issuing it so that you cannot like

704
00:27:48,600 --> 00:27:50,100
simply remove the header and then use

705
00:27:50,100 --> 00:27:51,960
the alt calculation

706
00:27:51,960 --> 00:27:55,820
so this is fixed quite well

707
00:27:56,159 --> 00:27:58,140
um so some other scenarios

708
00:27:58,140 --> 00:28:00,539
like there's more stuff we can do

709
00:28:00,539 --> 00:28:02,580
so of course there's some downside to

710
00:28:02,580 --> 00:28:04,679
what we've discussed previously

711
00:28:04,679 --> 00:28:06,419
um first you need to be admin on the

712
00:28:06,419 --> 00:28:08,880
device and you need to dump LSS and

713
00:28:08,880 --> 00:28:10,500
dumping else has something that a lot of

714
00:28:10,500 --> 00:28:12,900
edrs are very interested in so

715
00:28:12,900 --> 00:28:14,520
um it's quite noisy if you're doing it

716
00:28:14,520 --> 00:28:17,880
as an attacker if it's stored in the TPM

717
00:28:17,880 --> 00:28:20,159
if it's modern security protected then

718
00:28:20,159 --> 00:28:22,320
you can no longer steal it you can also

719
00:28:22,320 --> 00:28:24,539
no longer pre-calculate these things and

720
00:28:24,539 --> 00:28:26,520
of course if the device is disabled then

721
00:28:26,520 --> 00:28:28,620
any primary refresh tokens from that

722
00:28:28,620 --> 00:28:31,200
device are are also disabled

723
00:28:31,200 --> 00:28:34,140
so I wanted to come up with a new way to

724
00:28:34,140 --> 00:28:36,419
do this

725
00:28:36,419 --> 00:28:39,240
um and basically it combines some

726
00:28:39,240 --> 00:28:42,299
knowledge of the two previous parts so

727
00:28:42,299 --> 00:28:44,340
um I looked at because we know how the

728
00:28:44,340 --> 00:28:46,080
device registration flow works we can

729
00:28:46,080 --> 00:28:47,880
basically emulate that ourselves and we

730
00:28:47,880 --> 00:28:49,860
know how to get our own primary refresh

731
00:28:49,860 --> 00:28:51,120
token

732
00:28:51,120 --> 00:28:53,640
um and we know how to get access tokens

733
00:28:53,640 --> 00:28:56,400
for the user by using single sign-on so

734
00:28:56,400 --> 00:28:59,580
I thought okay so if I can get a single

735
00:28:59,580 --> 00:29:01,320
sign-on token from the user session can

736
00:29:01,320 --> 00:29:03,960
I also get a single sign-on token for

737
00:29:03,960 --> 00:29:06,779
the device registration service and it

738
00:29:06,779 --> 00:29:08,520
turned out that's possible

739
00:29:08,520 --> 00:29:11,940
so you can first initialize this single

740
00:29:11,940 --> 00:29:13,500
sign-on flow

741
00:29:13,500 --> 00:29:16,500
and that's basically done with a small

742
00:29:16,500 --> 00:29:18,360
tool that's called row token so you give

743
00:29:18,360 --> 00:29:20,940
it the the nodes from Azure ID and then

744
00:29:20,940 --> 00:29:24,059
it's for like calculate this an XMS

745
00:29:24,059 --> 00:29:26,039
refresh token credential which is the

746
00:29:26,039 --> 00:29:27,899
science primary refresh token that

747
00:29:27,899 --> 00:29:31,080
browsers use and then you can get a

748
00:29:31,080 --> 00:29:32,700
token for the device registration

749
00:29:32,700 --> 00:29:35,760
service with with row TX which is 2i

750
00:29:35,760 --> 00:29:38,580
road to exchange tokens basically and so

751
00:29:38,580 --> 00:29:41,700
you see it's as a token for the DRS or

752
00:29:41,700 --> 00:29:43,320
DRS stands for device registration

753
00:29:43,320 --> 00:29:45,480
server so it asks a token for the device

754
00:29:45,480 --> 00:29:48,179
registration service and it uses this

755
00:29:48,179 --> 00:29:51,480
PRT cookie to authenticate the ud

756
00:29:51,480 --> 00:29:53,279
request

757
00:29:53,279 --> 00:29:55,260
and this will give you an access token

758
00:29:55,260 --> 00:29:57,960
that can be used to register devices

759
00:29:57,960 --> 00:30:00,419
and then you can register the device so

760
00:30:00,419 --> 00:30:02,159
this is an all the proof of concept that

761
00:30:02,159 --> 00:30:04,620
I wrote nowadays this is all in row TX

762
00:30:04,620 --> 00:30:07,020
but basically this

763
00:30:07,020 --> 00:30:09,659
um this performs the device registration

764
00:30:09,659 --> 00:30:11,820
flow and you see the result here that

765
00:30:11,820 --> 00:30:13,860
that contains the certificate of the

766
00:30:13,860 --> 00:30:18,059
device and also the the SIDS and

767
00:30:18,059 --> 00:30:19,620
basically this gives us a device

768
00:30:19,620 --> 00:30:21,779
certificate with

769
00:30:21,779 --> 00:30:23,399
um with private keys that we control

770
00:30:23,399 --> 00:30:26,880
because we generated them on the Fly

771
00:30:26,880 --> 00:30:29,640
and this difficult can be used to like

772
00:30:29,640 --> 00:30:31,020
pretend that we are a real device

773
00:30:31,020 --> 00:30:32,820
towards Azure ID

774
00:30:32,820 --> 00:30:35,820
now once we have this we can get a

775
00:30:35,820 --> 00:30:37,919
primary refresh token and for that

776
00:30:37,919 --> 00:30:40,200
because it emulates the flow on the sign

777
00:30:40,200 --> 00:30:41,820
in screen we only basically need the

778
00:30:41,820 --> 00:30:44,820
passwords so we send the users passwords

779
00:30:44,820 --> 00:30:47,940
to Azure ad and we get back a prime

780
00:30:47,940 --> 00:30:50,039
refresh token and we authenticate the

781
00:30:50,039 --> 00:30:52,679
request by using the device and then we

782
00:30:52,679 --> 00:30:56,100
get back a primer refresh token and the

783
00:30:56,100 --> 00:30:58,940
the session key that also

784
00:30:58,940 --> 00:31:01,440
that also belongs to the primary refresh

785
00:31:01,440 --> 00:31:03,360
token so this is no longer protected by

786
00:31:03,360 --> 00:31:05,880
any DPMS but we now have this on this

787
00:31:05,880 --> 00:31:07,500
basically

788
00:31:07,500 --> 00:31:10,440
so we can use this PRT and the session

789
00:31:10,440 --> 00:31:14,100
key to sign in so this is just to get a

790
00:31:14,100 --> 00:31:16,380
access token and there's also features

791
00:31:16,380 --> 00:31:18,480
in Roti X that allow you to use this in

792
00:31:18,480 --> 00:31:20,580
an interactive flow in a browser

793
00:31:20,580 --> 00:31:24,120
but basically we use we we authenticate

794
00:31:24,120 --> 00:31:26,100
with this PRT and if we look at the

795
00:31:26,100 --> 00:31:28,740
token then we see that we got an access

796
00:31:28,740 --> 00:31:31,679
token which not only contains contains

797
00:31:31,679 --> 00:31:33,779
the password claim but also the MFA

798
00:31:33,779 --> 00:31:36,419
claim so that's quite an interesting

799
00:31:36,419 --> 00:31:38,580
scenario because we never did any MFA

800
00:31:38,580 --> 00:31:40,860
for this user but we just because we

801
00:31:40,860 --> 00:31:43,320
registered basically the device with a

802
00:31:43,320 --> 00:31:46,080
token that already included an MFA claim

803
00:31:46,080 --> 00:31:48,600
because the token originated from a

804
00:31:48,600 --> 00:31:51,539
device on which MFA was done then the

805
00:31:51,539 --> 00:31:53,940
tokens we get after with our register

806
00:31:53,940 --> 00:31:57,299
PRT also contain an MFA claim so this is

807
00:31:57,299 --> 00:31:59,159
basically a way to extract these tokens

808
00:31:59,159 --> 00:32:02,039
and to like steal tokens with an MFA

809
00:32:02,039 --> 00:32:04,320
claim without ever doing MFA for the

810
00:32:04,320 --> 00:32:06,620
user

811
00:32:06,779 --> 00:32:08,700
so to summarize this

812
00:32:08,700 --> 00:32:10,980
um we can request single sign-on tokens

813
00:32:10,980 --> 00:32:13,500
from a user session without any admin

814
00:32:13,500 --> 00:32:15,840
privileges these access tokens contain

815
00:32:15,840 --> 00:32:18,299
an MFA claim if you use this to register

816
00:32:18,299 --> 00:32:21,600
a device then any prts you request to

817
00:32:21,600 --> 00:32:23,580
that device that belong to the same user

818
00:32:23,580 --> 00:32:26,880
also inherit this MFA claim

819
00:32:26,880 --> 00:32:28,860
um and you only need the passwords to

820
00:32:28,860 --> 00:32:31,740
get a PRT um if you have adfs you could

821
00:32:31,740 --> 00:32:33,539
probably also do this only using single

822
00:32:33,539 --> 00:32:35,039
sign-on but that's not something I've

823
00:32:35,039 --> 00:32:37,260
researched and so basically this is a

824
00:32:37,260 --> 00:32:39,840
free NFA upgrade from your token because

825
00:32:39,840 --> 00:32:41,940
we only use the password to actually get

826
00:32:41,940 --> 00:32:44,940
the the PRT

827
00:32:44,940 --> 00:32:46,679
um so this also has some upsides and

828
00:32:46,679 --> 00:32:48,240
downsides

829
00:32:48,240 --> 00:32:51,600
so because we registered a new device

830
00:32:51,600 --> 00:32:53,940
um it's basically a separate device it's

831
00:32:53,940 --> 00:32:56,159
not a real device but if the old device

832
00:32:56,159 --> 00:32:59,159
is disabled then the PRT from our new

833
00:32:59,159 --> 00:33:00,659
device will still work

834
00:33:00,659 --> 00:33:03,360
of course the downside is that this

835
00:33:03,360 --> 00:33:05,340
requires permissions to register devices

836
00:33:05,340 --> 00:33:07,020
or joint devices which is not always

837
00:33:07,020 --> 00:33:08,640
allowed you can lock that down in Azure

838
00:33:08,640 --> 00:33:09,299
ID

839
00:33:09,299 --> 00:33:11,580
and this also doesn't mean that the

840
00:33:11,580 --> 00:33:13,559
device will be allowed to enroll in into

841
00:33:13,559 --> 00:33:16,019
because we registered a new device which

842
00:33:16,019 --> 00:33:18,000
is not known as a corporate device and

843
00:33:18,000 --> 00:33:19,860
if we need to access anything that's

844
00:33:19,860 --> 00:33:21,840
protected by conditional access to only

845
00:33:21,840 --> 00:33:24,360
allow compliant devices then basically

846
00:33:24,360 --> 00:33:26,640
it will not work so this doesn't cover

847
00:33:26,640 --> 00:33:30,500
our full scenario goals

848
00:33:30,539 --> 00:33:33,419
so for the last step looking at

849
00:33:33,419 --> 00:33:36,179
bypassing InTune restrictions and

850
00:33:36,179 --> 00:33:38,279
basically this is another dive in how

851
00:33:38,279 --> 00:33:41,159
this these InTune things work

852
00:33:41,159 --> 00:33:43,919
so something to consider is when you

853
00:33:43,919 --> 00:33:47,100
enroll a device in MDM that's actually a

854
00:33:47,100 --> 00:33:48,960
different process from measuring the

855
00:33:48,960 --> 00:33:50,880
device itself so

856
00:33:50,880 --> 00:33:53,279
um if you look at this from a user

857
00:33:53,279 --> 00:33:54,539
perspective they only enter that

858
00:33:54,539 --> 00:33:55,799
credentials once and then the device

859
00:33:55,799 --> 00:33:57,720
will first register itself and then

860
00:33:57,720 --> 00:33:59,820
enroll itself in MDM

861
00:33:59,820 --> 00:34:03,059
um but that's not how it works under the

862
00:34:03,059 --> 00:34:04,860
hood so it's two different registration

863
00:34:04,860 --> 00:34:06,419
requests

864
00:34:06,419 --> 00:34:09,839
and even if you block like non-corporate

865
00:34:09,839 --> 00:34:11,760
devices in Intuit you could still

866
00:34:11,760 --> 00:34:13,980
register or join the device in Azure ID

867
00:34:13,980 --> 00:34:15,418
because this is something that's

868
00:34:15,418 --> 00:34:17,460
separately controlled

869
00:34:17,460 --> 00:34:20,159
if you do this in Windows then if

870
00:34:20,159 --> 00:34:22,199
Windows sees an error so if it sees it's

871
00:34:22,199 --> 00:34:24,000
not allowed to enroll the device and in

872
00:34:24,000 --> 00:34:25,918
tune it will automatically roll back the

873
00:34:25,918 --> 00:34:28,379
Azure ID registration as well but if you

874
00:34:28,379 --> 00:34:30,359
do it yourself you can just do those

875
00:34:30,359 --> 00:34:31,859
separately and you can still like

876
00:34:31,859 --> 00:34:33,719
register or join a device even if you're

877
00:34:33,719 --> 00:34:37,020
not allowed to enroll it in InTune of

878
00:34:37,020 --> 00:34:38,820
course this doesn't really gain you

879
00:34:38,820 --> 00:34:41,040
anything because the goal of conditional

880
00:34:41,040 --> 00:34:43,440
X to go of this was to bypass like

881
00:34:43,440 --> 00:34:45,540
condition access policy to require a

882
00:34:45,540 --> 00:34:47,639
compliant device State and you only get

883
00:34:47,639 --> 00:34:50,520
that by enrolling it in InTune so by

884
00:34:50,520 --> 00:34:52,800
just joining the device we cannot meet

885
00:34:52,800 --> 00:34:56,159
this this compliancy

886
00:34:56,159 --> 00:34:59,580
so some more digging into this

887
00:34:59,580 --> 00:35:01,500
um so I there's a few interesting Parts

888
00:35:01,500 --> 00:35:03,000
here so

889
00:35:03,000 --> 00:35:05,160
um if you have uh if you're using

890
00:35:05,160 --> 00:35:07,500
autopilot and basically the devices are

891
00:35:07,500 --> 00:35:09,359
already registered in your tenants based

892
00:35:09,359 --> 00:35:11,520
on their Hardware properties and if you

893
00:35:11,520 --> 00:35:13,380
wipe those devices and register them

894
00:35:13,380 --> 00:35:15,900
again then it will reuse like the same

895
00:35:15,900 --> 00:35:19,500
device ID in in Azure ID so

896
00:35:19,500 --> 00:35:21,660
my question was like so how does Azure

897
00:35:21,660 --> 00:35:23,280
ID actually know that this is the same

898
00:35:23,280 --> 00:35:26,520
device like if I wipe this laptop and I

899
00:35:26,520 --> 00:35:28,740
register it again it will use the same

900
00:35:28,740 --> 00:35:30,720
device it will override the same device

901
00:35:30,720 --> 00:35:33,000
and it will know that this was like a

902
00:35:33,000 --> 00:35:35,460
pre-registered device

903
00:35:35,460 --> 00:35:37,619
and so that's the part that comes into

904
00:35:37,619 --> 00:35:40,320
play is this um registration request

905
00:35:40,320 --> 00:35:42,599
again and especially this part on the

906
00:35:42,599 --> 00:35:43,680
bottom

907
00:35:43,680 --> 00:35:46,920
so this is actually a device ticket that

908
00:35:46,920 --> 00:35:49,380
um that proves to actually ad like which

909
00:35:49,380 --> 00:35:51,119
device it is

910
00:35:51,119 --> 00:35:53,339
um so of course I was wondering okay how

911
00:35:53,339 --> 00:35:55,020
is this structured and where does it get

912
00:35:55,020 --> 00:35:58,200
that so how does it do that

913
00:35:58,200 --> 00:36:01,260
um and also like if you reuse the same

914
00:36:01,260 --> 00:36:03,480
parameter it will always overwrite the

915
00:36:03,480 --> 00:36:05,460
device so this is apparently something

916
00:36:05,460 --> 00:36:08,220
that is really tied to the device and it

917
00:36:08,220 --> 00:36:10,619
it knows the device Hardware based on

918
00:36:10,619 --> 00:36:13,500
this ticket it does seem to expire after

919
00:36:13,500 --> 00:36:16,020
a certain period of time and so it's not

920
00:36:16,020 --> 00:36:17,880
something that's like fixed or something

921
00:36:17,880 --> 00:36:20,940
so it is some device tickets for your

922
00:36:20,940 --> 00:36:22,740
device but it's not related to Azure ID

923
00:36:22,740 --> 00:36:24,660
basically

924
00:36:24,660 --> 00:36:26,940
um so I did some reversing of this

925
00:36:26,940 --> 00:36:28,859
which was quite annoying because the

926
00:36:28,859 --> 00:36:31,500
registration flow is a web-based app it

927
00:36:31,500 --> 00:36:34,020
uses the winrt framework and it also

928
00:36:34,020 --> 00:36:36,720
calls when RT apis which means that it's

929
00:36:36,720 --> 00:36:38,640
doing some inter-process communication

930
00:36:38,640 --> 00:36:40,320
so it actually spawns a different

931
00:36:40,320 --> 00:36:42,420
process to do the registration than the

932
00:36:42,420 --> 00:36:45,660
one that does the app but eventually

933
00:36:45,660 --> 00:36:48,480
there will be a dllhost that accident

934
00:36:48,480 --> 00:36:51,359
spawns with the with the dll in there

935
00:36:51,359 --> 00:36:53,820
that contains the registration logic

936
00:36:53,820 --> 00:36:55,619
so once I found it out

937
00:36:55,619 --> 00:36:57,900
um I just looked into reversing this and

938
00:36:57,900 --> 00:37:01,740
I basically found like this string so

939
00:37:01,740 --> 00:37:03,060
um it's a bit probably a bit small to

940
00:37:03,060 --> 00:37:04,740
read but you can see that it's like

941
00:37:04,740 --> 00:37:07,500
initial instantiates a class of the

942
00:37:07,500 --> 00:37:09,480
Windows security authentication online

943
00:37:09,480 --> 00:37:13,740
ID online ID service tickets requests

944
00:37:13,740 --> 00:37:15,300
I was like okay what is this I've never

945
00:37:15,300 --> 00:37:18,240
heard of this but it's documented

946
00:37:18,240 --> 00:37:21,000
so the online ID server stickers

947
00:37:21,000 --> 00:37:26,339
requests basically to to sign in a user

948
00:37:26,339 --> 00:37:30,839
or device to the live endpoint so that's

949
00:37:30,839 --> 00:37:33,000
like the also the what you use for

950
00:37:33,000 --> 00:37:35,520
Microsoft accounts so apparently your

951
00:37:35,520 --> 00:37:37,020
device has its own Microsoft account

952
00:37:37,020 --> 00:37:39,960
that it uses separately from any Azure

953
00:37:39,960 --> 00:37:42,720
ID or InTune registrations and it uses

954
00:37:42,720 --> 00:37:46,260
like this these apis to ask tickets for

955
00:37:46,260 --> 00:37:48,900
for that account

956
00:37:48,900 --> 00:37:50,820
so your device has its own Microsoft

957
00:37:50,820 --> 00:37:53,040
accounts this is also what it uses for

958
00:37:53,040 --> 00:37:55,200
for licensing text and search

959
00:37:55,200 --> 00:37:56,520
and when the file specific

960
00:37:56,520 --> 00:37:58,380
authentication is needed so it's when it

961
00:37:58,380 --> 00:38:00,240
does the device identity authentication

962
00:38:00,240 --> 00:38:04,140
then it's uses these tickets to prove

963
00:38:04,140 --> 00:38:06,660
its identity and these tickets are

964
00:38:06,660 --> 00:38:08,880
cached in the registry and actually in

965
00:38:08,880 --> 00:38:11,640
the the current user registry Hive so

966
00:38:11,640 --> 00:38:14,339
any tickets that were used in your user

967
00:38:14,339 --> 00:38:17,099
session you can query from here and they

968
00:38:17,099 --> 00:38:20,520
are DP API protected but the protection

969
00:38:20,520 --> 00:38:23,040
is tied to the machine so any user on

970
00:38:23,040 --> 00:38:25,680
the machine can can decrypt them

971
00:38:25,680 --> 00:38:27,900
and basically you can just enumerate

972
00:38:27,900 --> 00:38:31,680
these using Powershell so by enumerating

973
00:38:31,680 --> 00:38:34,320
these keys and then basically decrypting

974
00:38:34,320 --> 00:38:37,619
them we find this this token so here we

975
00:38:37,619 --> 00:38:39,540
see also the token scope is the

976
00:38:39,540 --> 00:38:41,460
Enterprise registration the windows.net

977
00:38:41,460 --> 00:38:43,980
so it's a device ticket for the device

978
00:38:43,980 --> 00:38:46,760
registration

979
00:38:46,920 --> 00:38:48,480
um now of course these cash tickets are

980
00:38:48,480 --> 00:38:50,940
nice but like I said they expire after a

981
00:38:50,940 --> 00:38:53,400
certain time so if if the device

982
00:38:53,400 --> 00:38:55,020
registration was done a long time ago

983
00:38:55,020 --> 00:38:57,900
the niche tickets are a bit useless

984
00:38:57,900 --> 00:39:00,240
so I did some more reversing

985
00:39:00,240 --> 00:39:02,880
um and found the exact winrt API calls

986
00:39:02,880 --> 00:39:05,339
that were needed so there's this this

987
00:39:05,339 --> 00:39:06,780
endpoint involved that it asks the

988
00:39:06,780 --> 00:39:09,119
ticket for and there's the app quid

989
00:39:09,119 --> 00:39:11,220
that's used for registration

990
00:39:11,220 --> 00:39:12,599
and basically when you know all these

991
00:39:12,599 --> 00:39:13,740
parameters

992
00:39:13,740 --> 00:39:15,500
um you can write a very

993
00:39:15,500 --> 00:39:18,740
simple.net program which basically

994
00:39:18,740 --> 00:39:21,300
creates such an online IDE system

995
00:39:21,300 --> 00:39:24,119
authenticator request and it asks a

996
00:39:24,119 --> 00:39:25,760
ticket for the Enterprise

997
00:39:25,760 --> 00:39:28,440
registration.windows.net it sets the app

998
00:39:28,440 --> 00:39:30,900
ID to the same ID that the that Windows

999
00:39:30,900 --> 00:39:32,700
uses basically

1000
00:39:32,700 --> 00:39:35,160
and then it's it request this ticket

1001
00:39:35,160 --> 00:39:37,619
from the system and it prints it to uh

1002
00:39:37,619 --> 00:39:39,300
to the console

1003
00:39:39,300 --> 00:39:41,760
so if we compile this and we do this

1004
00:39:41,760 --> 00:39:44,339
then basically we get this device

1005
00:39:44,339 --> 00:39:46,560
tickets that contains the device

1006
00:39:46,560 --> 00:39:48,119
identity

1007
00:39:48,119 --> 00:39:50,520
and with these tickets if we actually do

1008
00:39:50,520 --> 00:39:53,460
the registration again but now provide

1009
00:39:53,460 --> 00:39:55,260
this to five tickets then we will

1010
00:39:55,260 --> 00:39:58,560
actually override the old device so if

1011
00:39:58,560 --> 00:40:01,920
you use the Roti X device module and you

1012
00:40:01,920 --> 00:40:03,660
specify the device tickets that we

1013
00:40:03,660 --> 00:40:06,720
obtained from

1014
00:40:06,720 --> 00:40:09,000
that we obtained from the from the

1015
00:40:09,000 --> 00:40:10,859
windows house basically then it will

1016
00:40:10,859 --> 00:40:14,220
overwrite this old device and now we

1017
00:40:14,220 --> 00:40:15,960
have a device that we control which is

1018
00:40:15,960 --> 00:40:17,579
the same ID but we have the keys

1019
00:40:17,579 --> 00:40:19,380
actually stored on disk instead of them

1020
00:40:19,380 --> 00:40:22,380
being TPM protected so you also see that

1021
00:40:22,380 --> 00:40:24,480
like here I registered device and you

1022
00:40:24,480 --> 00:40:26,640
see the device ID it's the same device

1023
00:40:26,640 --> 00:40:29,099
ID than what Windows reports on these

1024
00:40:29,099 --> 00:40:30,839
old device

1025
00:40:30,839 --> 00:40:33,300
and so you can just request like a

1026
00:40:33,300 --> 00:40:35,640
device ticket from a low privilege

1027
00:40:35,640 --> 00:40:38,099
session and then override the old device

1028
00:40:38,099 --> 00:40:40,980
and the nice part is that the device

1029
00:40:40,980 --> 00:40:42,839
basically retains the original

1030
00:40:42,839 --> 00:40:46,079
properties so before they basically

1031
00:40:46,079 --> 00:40:47,760
change this then it used to be that even

1032
00:40:47,760 --> 00:40:49,920
if you overall to default the device it

1033
00:40:49,920 --> 00:40:52,339
was still considered compliant and any

1034
00:40:52,339 --> 00:40:54,900
sign-ins you did using the stolen device

1035
00:40:54,900 --> 00:40:56,880
identity would also be considered

1036
00:40:56,880 --> 00:40:59,220
compliant

1037
00:40:59,220 --> 00:41:00,960
so that's

1038
00:41:00,960 --> 00:41:03,119
you could steal that and basically the

1039
00:41:03,119 --> 00:41:07,020
the original device was no longer like

1040
00:41:07,020 --> 00:41:10,020
working properly but you have the the

1041
00:41:10,020 --> 00:41:12,060
device as an attacker and the Azure ID

1042
00:41:12,060 --> 00:41:14,339
still considers any tokens issued to the

1043
00:41:14,339 --> 00:41:17,339
device like compliant

1044
00:41:17,339 --> 00:41:19,680
so just to summarize this

1045
00:41:19,680 --> 00:41:21,480
um any user that had a session on this

1046
00:41:21,480 --> 00:41:23,339
device could request is device tickets

1047
00:41:23,339 --> 00:41:25,920
and which could be you to overwrite the

1048
00:41:25,920 --> 00:41:27,839
device if it was pre-registered using

1049
00:41:27,839 --> 00:41:29,280
autopilots then it will do this Hardware

1050
00:41:29,280 --> 00:41:30,960
matching and actually override the

1051
00:41:30,960 --> 00:41:33,480
device based on the ticket

1052
00:41:33,480 --> 00:41:36,200
um it overwrites the device in Azure ID

1053
00:41:36,200 --> 00:41:38,940
using of course our own cryptographic

1054
00:41:38,940 --> 00:41:41,520
keys so if we request any

1055
00:41:41,520 --> 00:41:44,940
um any tickets after that then we can

1056
00:41:44,940 --> 00:41:47,099
just decrypt the session key using our

1057
00:41:47,099 --> 00:41:48,540
own transport fee instead of it being

1058
00:41:48,540 --> 00:41:51,000
tied to a TPM so in this case you don't

1059
00:41:51,000 --> 00:41:53,760
need to steal any prts from LSS you

1060
00:41:53,760 --> 00:41:55,859
don't need to worry about TPMS and

1061
00:41:55,859 --> 00:41:56,940
actually you don't need any

1062
00:41:56,940 --> 00:41:59,300
administrative privileges at all because

1063
00:41:59,300 --> 00:42:01,619
you can just request this from a normal

1064
00:42:01,619 --> 00:42:03,540
user session

1065
00:42:03,540 --> 00:42:05,640
some bonus features

1066
00:42:05,640 --> 00:42:07,680
so you could use any identity to

1067
00:42:07,680 --> 00:42:09,119
overwrite the device it didn't

1068
00:42:09,119 --> 00:42:11,280
necessarily have to be the original user

1069
00:42:11,280 --> 00:42:13,160
that was using the device

1070
00:42:13,160 --> 00:42:16,320
the device ticket also stays valid after

1071
00:42:16,320 --> 00:42:18,900
wiping the device so if I steal the

1072
00:42:18,900 --> 00:42:21,839
device tickets I wipe the device because

1073
00:42:21,839 --> 00:42:24,420
it was compromised for example then I

1074
00:42:24,420 --> 00:42:25,740
could still use that device ticket

1075
00:42:25,740 --> 00:42:27,359
somewhere else

1076
00:42:27,359 --> 00:42:30,300
and if you use a new account to

1077
00:42:30,300 --> 00:42:32,579
overwrite the device it became the new

1078
00:42:32,579 --> 00:42:35,880
device owner so then it can actually

1079
00:42:35,880 --> 00:42:38,940
recover the BitLocker keys that are

1080
00:42:38,940 --> 00:42:40,800
stored in the device because by default

1081
00:42:40,800 --> 00:42:43,140
users can read BitLocker keys for

1082
00:42:43,140 --> 00:42:45,420
devices that they own so if the

1083
00:42:45,420 --> 00:42:47,400
BitLocker keys are stored in Azure ID

1084
00:42:47,400 --> 00:42:49,560
then you could read this after you

1085
00:42:49,560 --> 00:42:52,339
overwrote the device

1086
00:42:52,440 --> 00:42:55,200
um and also the nice part is that the

1087
00:42:55,200 --> 00:42:57,540
original device still kept its linked to

1088
00:42:57,540 --> 00:42:59,040
InTune so

1089
00:42:59,040 --> 00:43:01,619
um like I said the registration in Azure

1090
00:43:01,619 --> 00:43:03,240
ID and InTune is separate so if you

1091
00:43:03,240 --> 00:43:04,980
overwrote the Azure ID parts the device

1092
00:43:04,980 --> 00:43:07,020
will still be talking to InTune and it

1093
00:43:07,020 --> 00:43:08,760
would still report its compliancy and

1094
00:43:08,760 --> 00:43:09,960
basically

1095
00:43:09,960 --> 00:43:12,000
um InTune would keep reporting the

1096
00:43:12,000 --> 00:43:13,920
device as compliant to Azure ID even

1097
00:43:13,920 --> 00:43:16,200
though the device was no longer the

1098
00:43:16,200 --> 00:43:18,839
original one but was now one controlled

1099
00:43:18,839 --> 00:43:20,640
by the attacker

1100
00:43:20,640 --> 00:43:23,700
and the device retained its compliancy

1101
00:43:23,700 --> 00:43:25,200
status

1102
00:43:25,200 --> 00:43:26,880
so just to

1103
00:43:26,880 --> 00:43:29,880
to the completion you could do a few

1104
00:43:29,880 --> 00:43:32,400
commands in a low preference session of

1105
00:43:32,400 --> 00:43:34,500
the victim you could request a single

1106
00:43:34,500 --> 00:43:36,000
sign-on token to register a new device

1107
00:43:36,000 --> 00:43:38,700
you could request a device ticket to

1108
00:43:38,700 --> 00:43:41,160
override the like legitimate compliant

1109
00:43:41,160 --> 00:43:44,640
device and then you could gain access to

1110
00:43:44,640 --> 00:43:46,079
the primary refresh tokens for the

1111
00:43:46,079 --> 00:43:48,420
victim user you could have an MFA claim

1112
00:43:48,420 --> 00:43:50,760
also included in that you could have the

1113
00:43:50,760 --> 00:43:52,980
compliant device claim from InTune and

1114
00:43:52,980 --> 00:43:55,140
basically this way you could comply with

1115
00:43:55,140 --> 00:43:58,680
very strict conditional access policies

1116
00:43:58,680 --> 00:44:01,140
um this bypass the need to do MFA for

1117
00:44:01,140 --> 00:44:03,720
your victim user bypass the TPM

1118
00:44:03,720 --> 00:44:05,280
protection of Secrets and it also

1119
00:44:05,280 --> 00:44:08,540
bypasses the need to like the ls or have

1120
00:44:08,540 --> 00:44:10,619
administrative privileges at all because

1121
00:44:10,619 --> 00:44:12,900
this could all be done from a user

1122
00:44:12,900 --> 00:44:16,640
without any administrative privileges

1123
00:44:16,800 --> 00:44:20,640
um so I reported this all to Microsoft

1124
00:44:20,640 --> 00:44:23,040
um actually already quite a while ago

1125
00:44:23,040 --> 00:44:25,680
um so they fixed the

1126
00:44:25,680 --> 00:44:27,720
um defy overwriting a device or

1127
00:44:27,720 --> 00:44:29,280
registering a device using single

1128
00:44:29,280 --> 00:44:32,579
sign-on they fixed it in September 21.

1129
00:44:32,579 --> 00:44:34,140
and

1130
00:44:34,140 --> 00:44:36,900
um also they already made some other

1131
00:44:36,900 --> 00:44:40,200
fixes for uh to cover some scenarios so

1132
00:44:40,200 --> 00:44:41,760
they did basically in a phase rollout

1133
00:44:41,760 --> 00:44:45,119
and nowadays you cannot use any tokens

1134
00:44:45,119 --> 00:44:47,520
that originate from single sign-on to

1135
00:44:47,520 --> 00:44:50,339
register new devices anymore

1136
00:44:50,339 --> 00:44:53,220
now the overriding a device via device

1137
00:44:53,220 --> 00:44:56,280
ticket that was something I reported in

1138
00:44:56,280 --> 00:44:59,339
May 2021 so it's also quite a while ago

1139
00:44:59,339 --> 00:45:02,099
and they patched this a year later so it

1140
00:45:02,099 --> 00:45:03,800
took them a while to actually fix this

1141
00:45:03,800 --> 00:45:06,000
and and it actually took them even

1142
00:45:06,000 --> 00:45:08,819
longer to enforce the server side so

1143
00:45:08,819 --> 00:45:10,700
um they actually rolled out the final

1144
00:45:10,700 --> 00:45:13,020
enforcements that prevent you from like

1145
00:45:13,020 --> 00:45:15,780
overwriting a device and getting it

1146
00:45:15,780 --> 00:45:18,119
compliant in February

1147
00:45:18,119 --> 00:45:20,579
or at least so I thought so this is

1148
00:45:20,579 --> 00:45:22,920
actually the fun part of this

1149
00:45:22,920 --> 00:45:24,720
um so actually I was making some

1150
00:45:24,720 --> 00:45:26,640
screenshots for the presentation earlier

1151
00:45:26,640 --> 00:45:28,200
this week and I found out that F

1152
00:45:28,200 --> 00:45:30,420
actually the device overriding still

1153
00:45:30,420 --> 00:45:33,660
worked so they said it was fixed but it

1154
00:45:33,660 --> 00:45:34,740
wasn't

1155
00:45:34,740 --> 00:45:37,099
um and then there was some

1156
00:45:37,099 --> 00:45:39,480
conversations with Microsoft involved so

1157
00:45:39,480 --> 00:45:41,520
they actually rolled out the final fixes

1158
00:45:41,520 --> 00:45:44,599
for this yesterday

1159
00:45:46,079 --> 00:45:46,680
um

1160
00:45:46,680 --> 00:45:48,839
and it's still a bit of a question like

1161
00:45:48,839 --> 00:45:51,540
if this is fully fixed so basically what

1162
00:45:51,540 --> 00:45:53,819
they did the device registration method

1163
00:45:53,819 --> 00:45:56,400
that that's unchanged so that's not uh

1164
00:45:56,400 --> 00:45:58,619
that's not something that changed you

1165
00:45:58,619 --> 00:46:00,540
can still override the device using the

1166
00:46:00,540 --> 00:46:02,940
device tickets but it does remove the

1167
00:46:02,940 --> 00:46:05,640
compliancy status and

1168
00:46:05,640 --> 00:46:07,440
um so it's not immediately compliant

1169
00:46:07,440 --> 00:46:09,420
anymore but when I was playing with this

1170
00:46:09,420 --> 00:46:11,339
I found out that like after the original

1171
00:46:11,339 --> 00:46:13,319
device synced back and in tune then

1172
00:46:13,319 --> 00:46:15,480
InTune would happily write back like the

1173
00:46:15,480 --> 00:46:17,640
compliancy status to the new device so

1174
00:46:17,640 --> 00:46:20,160
you could still kind of get it compliant

1175
00:46:20,160 --> 00:46:22,500
and so this is what they fixed like

1176
00:46:22,500 --> 00:46:24,540
yesterday night so I was actually

1177
00:46:24,540 --> 00:46:26,880
chatting with them until 1am to confirm

1178
00:46:26,880 --> 00:46:28,319
that this was whether this was fixed or

1179
00:46:28,319 --> 00:46:30,240
not

1180
00:46:30,240 --> 00:46:33,540
um and now it's so now they basically

1181
00:46:33,540 --> 00:46:35,400
disconnect the device and in tune with

1182
00:46:35,400 --> 00:46:38,220
the device in Azure ad when you override

1183
00:46:38,220 --> 00:46:40,920
the device in Azure ID so it doesn't get

1184
00:46:40,920 --> 00:46:43,260
the compliancy claim anymore

1185
00:46:43,260 --> 00:46:45,119
um but you can still like override the

1186
00:46:45,119 --> 00:46:47,700
original device so I'm not sure if I

1187
00:46:47,700 --> 00:46:50,400
would consider this 100 fixed but at

1188
00:46:50,400 --> 00:46:52,020
least it's no longer possible to like

1189
00:46:52,020 --> 00:46:54,300
get that compliancy claim by just

1190
00:46:54,300 --> 00:46:55,680
overwriting

1191
00:46:55,680 --> 00:46:59,220
um a device that's already compliant

1192
00:46:59,220 --> 00:47:02,460
so to conclude

1193
00:47:02,460 --> 00:47:04,140
um so the secrets in Hardware were not

1194
00:47:04,140 --> 00:47:06,780
very efficiently protected basically you

1195
00:47:06,780 --> 00:47:08,819
could just pre-calculate whatever you

1196
00:47:08,819 --> 00:47:10,440
needed without

1197
00:47:10,440 --> 00:47:12,660
um needing to dump anything from the TPM

1198
00:47:12,660 --> 00:47:15,060
you could obtain a PRT by simply

1199
00:47:15,060 --> 00:47:17,700
registering a device a low privileged

1200
00:47:17,700 --> 00:47:19,380
user on the device could take over the

1201
00:47:19,380 --> 00:47:21,240
device identity and you could all do

1202
00:47:21,240 --> 00:47:24,380
that using some a single sign on Magic

1203
00:47:24,380 --> 00:47:26,940
so this should be all fixed if you

1204
00:47:26,940 --> 00:47:28,800
patched your endpoints and of course the

1205
00:47:28,800 --> 00:47:30,619
cloud is already patched for you

1206
00:47:30,619 --> 00:47:33,660
doesn't mean that there's no bypasses

1207
00:47:33,660 --> 00:47:35,640
for this so I have some new research

1208
00:47:35,640 --> 00:47:37,020
that basically

1209
00:47:37,020 --> 00:47:39,000
defeats the whole DPM protection again

1210
00:47:39,000 --> 00:47:41,760
but that's something for another time

1211
00:47:41,760 --> 00:47:43,260
if you want to play with this yourself

1212
00:47:43,260 --> 00:47:44,940
like everything all the tools I've

1213
00:47:44,940 --> 00:47:47,040
showed here their open source so they're

1214
00:47:47,040 --> 00:47:48,780
part of the road tools framework and you

1215
00:47:48,780 --> 00:47:50,940
can play with devices and tokens using

1216
00:47:50,940 --> 00:47:54,119
row TX I also have some Road tool

1217
00:47:54,119 --> 00:47:55,260
stickers for those of you who are

1218
00:47:55,260 --> 00:47:56,220
interested

1219
00:47:56,220 --> 00:47:59,180
and if there's any further questions

1220
00:47:59,180 --> 00:48:01,859
feel free to to ask them now ask them

1221
00:48:01,859 --> 00:48:04,020
later via Twitter or mail and well

1222
00:48:04,020 --> 00:48:06,010
thanks for your attention

1223
00:48:06,010 --> 00:48:15,060
[Applause]

1224
00:48:15,060 --> 00:48:17,520
okay so if there is any question please

1225
00:48:17,520 --> 00:48:19,260
raise your hand so I can bring you the

1226
00:48:19,260 --> 00:48:21,680
microphone

1227
00:48:22,800 --> 00:48:25,220
okay

1228
00:48:34,079 --> 00:48:37,560
thank you for your talk my question is

1229
00:48:37,560 --> 00:48:40,500
more about the enrollment process of a

1230
00:48:40,500 --> 00:48:43,740
device to the identity platform you said

1231
00:48:43,740 --> 00:48:46,560
there are two types of keys generated

1232
00:48:46,560 --> 00:48:49,980
one for the device it was called device

1233
00:48:49,980 --> 00:48:52,140
key and the other one was the transport

1234
00:48:52,140 --> 00:48:55,200
key that are generated with the TPM and

1235
00:48:55,200 --> 00:48:57,480
are stored there yes in your research

1236
00:48:57,480 --> 00:49:01,079
have you looked on how those keys are

1237
00:49:01,079 --> 00:49:03,359
protected by the TPM

1238
00:49:03,359 --> 00:49:06,240
because from what I know you can use the

1239
00:49:06,240 --> 00:49:08,579
TPM as a normal user you can generate

1240
00:49:08,579 --> 00:49:10,200
Keys blah blah blah

1241
00:49:10,200 --> 00:49:12,780
but if they are not protected by certain

1242
00:49:12,780 --> 00:49:15,540
policies that restrict access to the

1243
00:49:15,540 --> 00:49:16,619
Keys

1244
00:49:16,619 --> 00:49:20,339
you should be able to access them do you

1245
00:49:20,339 --> 00:49:22,920
have some insights on how Microsoft

1246
00:49:22,920 --> 00:49:26,040
protects this kind of keys with the TPM

1247
00:49:26,040 --> 00:49:29,640
or was out of the scope of your research

1248
00:49:29,640 --> 00:49:31,800
so it was not part of this specific

1249
00:49:31,800 --> 00:49:33,660
research but I did did some research

1250
00:49:33,660 --> 00:49:37,740
into the crypto internals last year so

1251
00:49:37,740 --> 00:49:39,000
basically there's different levels of

1252
00:49:39,000 --> 00:49:41,339
protection and so Microsoft uses some

1253
00:49:41,339 --> 00:49:44,160
layers below the TPM to provide software

1254
00:49:44,160 --> 00:49:47,640
access and basically they store parts of

1255
00:49:47,640 --> 00:49:49,920
the the parts on disk and parts are

1256
00:49:49,920 --> 00:49:53,040
stored like protected with the TPM the

1257
00:49:53,040 --> 00:49:54,540
keys are always restricted to system

1258
00:49:54,540 --> 00:49:57,900
only so a normal user cannot load the

1259
00:49:57,900 --> 00:49:59,400
keys they cannot use the keys because

1260
00:49:59,400 --> 00:50:01,079
they have access controls on them which

1261
00:50:01,079 --> 00:50:03,839
only allow system to use them and also

1262
00:50:03,839 --> 00:50:05,940
like the the transport key it's it's

1263
00:50:05,940 --> 00:50:08,460
it's a storage key from the TPM so you

1264
00:50:08,460 --> 00:50:10,680
can only perform certain operations with

1265
00:50:10,680 --> 00:50:13,020
it so you cannot say like okay I want to

1266
00:50:13,020 --> 00:50:15,359
use the storage key to like decrypt this

1267
00:50:15,359 --> 00:50:18,060
this encrypted session key but you can

1268
00:50:18,060 --> 00:50:20,460
only like derive new keys from it so

1269
00:50:20,460 --> 00:50:22,079
those are restrictions imposed by the

1270
00:50:22,079 --> 00:50:24,720
TPM on it and what I found they

1271
00:50:24,720 --> 00:50:27,000
implemented that quite well

1272
00:50:27,000 --> 00:50:30,900
another thing is that I know Azure has a

1273
00:50:30,900 --> 00:50:35,160
identity system for embedded devices

1274
00:50:35,160 --> 00:50:38,400
have you considered also looking in the

1275
00:50:38,400 --> 00:50:40,920
embedded environment and the identity

1276
00:50:40,920 --> 00:50:43,260
part that goes there

1277
00:50:43,260 --> 00:50:46,319
I have not no because things get a

1278
00:50:46,319 --> 00:50:48,300
little complicated with identity when

1279
00:50:48,300 --> 00:50:50,400
you don't have users and I find this

1280
00:50:50,400 --> 00:50:53,099
field of research quite interesting how

1281
00:50:53,099 --> 00:50:54,839
do you protect your keys when you don't

1282
00:50:54,839 --> 00:50:58,440
have a user yeah so there's also

1283
00:50:58,440 --> 00:51:00,540
um like autopilot enrollment scenarios

1284
00:51:00,540 --> 00:51:02,640
in which the device and roles itself

1285
00:51:02,640 --> 00:51:05,880
based on some TPM attestation I also

1286
00:51:05,880 --> 00:51:07,859
have to look into that still because

1287
00:51:07,859 --> 00:51:10,920
well it's it's a different flow this is

1288
00:51:10,920 --> 00:51:12,720
what a user driven registrations you

1289
00:51:12,720 --> 00:51:14,220
always need a user account to register

1290
00:51:14,220 --> 00:51:16,680
it but there's also ways that devices

1291
00:51:16,680 --> 00:51:18,240
can roll themselves but I've not looked

1292
00:51:18,240 --> 00:51:21,900
at it yet okay thank you very much

1293
00:51:21,900 --> 00:51:23,900
um

1294
00:51:29,880 --> 00:51:34,040
any other question yeah okay

1295
00:51:34,920 --> 00:51:37,800
uh great talk I would like to ask you

1296
00:51:37,800 --> 00:51:41,220
because you use the same device ID to

1297
00:51:41,220 --> 00:51:44,240
override the device in the Azure ID

1298
00:51:44,240 --> 00:51:47,099
while at the same time I assume you

1299
00:51:47,099 --> 00:51:49,200
generally you regenerate the transport

1300
00:51:49,200 --> 00:51:51,420
key the session key stuff like that what

1301
00:51:51,420 --> 00:51:53,579
happens to the old device because it

1302
00:51:53,579 --> 00:51:56,720
assumes based on what you said it's over

1303
00:51:56,720 --> 00:51:59,579
overrode once again to

1304
00:51:59,579 --> 00:52:02,339
add the compliance to the InTune so

1305
00:52:02,339 --> 00:52:04,140
shouldn't the session key and the

1306
00:52:04,140 --> 00:52:05,579
transporter key from the old device be

1307
00:52:05,579 --> 00:52:07,800
revoked on the server side but it wasn't

1308
00:52:07,800 --> 00:52:10,800
or something like that yeah so

1309
00:52:10,800 --> 00:52:13,500
um like once you have a primary refresh

1310
00:52:13,500 --> 00:52:15,900
token that has its own session key and

1311
00:52:15,900 --> 00:52:18,780
that you can use irrespective of the

1312
00:52:18,780 --> 00:52:21,059
device identity so if I overwrite a

1313
00:52:21,059 --> 00:52:23,760
device key then the original device can

1314
00:52:23,760 --> 00:52:25,559
no longer request like new primary

1315
00:52:25,559 --> 00:52:28,020
refresh tokens but any old ones still

1316
00:52:28,020 --> 00:52:30,599
work so it cannot use its device

1317
00:52:30,599 --> 00:52:32,220
identity anymore because the certificate

1318
00:52:32,220 --> 00:52:33,660
is not valid anymore it doesn't match

1319
00:52:33,660 --> 00:52:35,099
anymore with the one that's registered

1320
00:52:35,099 --> 00:52:37,800
in Azure ID but primary refresh tokens

1321
00:52:37,800 --> 00:52:41,599
they still work okay thank you

1322
00:52:42,599 --> 00:52:45,619
any other question

1323
00:52:53,420 --> 00:52:56,220
I would like to go back to the t-trans

1324
00:52:56,220 --> 00:53:00,240
uh TPMS there is a trusted root system

1325
00:53:00,240 --> 00:53:02,940
where the TPM should also State the

1326
00:53:02,940 --> 00:53:06,480
state of the device isn't that tied into

1327
00:53:06,480 --> 00:53:09,000
the onboarding of the device

1328
00:53:09,000 --> 00:53:11,940
uh so they use some attestation in the

1329
00:53:11,940 --> 00:53:14,339
InTune registration but not in the Azure

1330
00:53:14,339 --> 00:53:17,520
ad registration so there's no need to

1331
00:53:17,520 --> 00:53:19,920
prove to Azure ID that your keys are in

1332
00:53:19,920 --> 00:53:21,960
the TPM or not actually doesn't actually

1333
00:53:21,960 --> 00:53:24,660
care or show you if the keys are in CPM

1334
00:53:24,660 --> 00:53:26,460
so if I am an administrator I look over

1335
00:53:26,460 --> 00:53:28,500
the list of the devices there's no way

1336
00:53:28,500 --> 00:53:31,260
from Azure ID to see like oh those keys

1337
00:53:31,260 --> 00:53:34,380
are in a TPM or those are not it uses a

1338
00:53:34,380 --> 00:53:36,960
different format to register them but

1339
00:53:36,960 --> 00:53:39,720
Azure it doesn't care like if you use a

1340
00:53:39,720 --> 00:53:41,520
software key or a TPM key it doesn't

1341
00:53:41,520 --> 00:53:44,099
enforce you to do anything you can

1342
00:53:44,099 --> 00:53:46,740
enforce that there should be a TPM with

1343
00:53:46,740 --> 00:53:49,079
InTune but that's that's separate from

1344
00:53:49,079 --> 00:53:50,579
the device registration so they don't

1345
00:53:50,579 --> 00:53:52,619
require you to prove that keys are in a

1346
00:53:52,619 --> 00:53:55,800
TPM or offer you a way to only allow

1347
00:53:55,800 --> 00:53:57,780
devices that have a TPM to actually

1348
00:53:57,780 --> 00:54:00,920
register or join

1349
00:54:01,339 --> 00:54:03,200
foreign

1350
00:54:03,200 --> 00:54:05,520
thank you very much we are kind of

1351
00:54:05,520 --> 00:54:07,800
running short in time so

1352
00:54:07,800 --> 00:54:09,180
I think we can move on to the next

1353
00:54:09,180 --> 00:54:12,259
speaker Charlie

1354
00:54:13,020 --> 00:54:16,179
[Applause]

