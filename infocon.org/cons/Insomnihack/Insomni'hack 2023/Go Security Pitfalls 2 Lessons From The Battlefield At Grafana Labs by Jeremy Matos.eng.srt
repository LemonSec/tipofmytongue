1
00:00:03,020 --> 00:00:05,520
hello everyone

2
00:00:05,520 --> 00:00:07,440
thank you for all the British people

3
00:00:07,440 --> 00:00:11,160
that are still there at 5 PM let's talk

4
00:00:11,160 --> 00:00:13,320
so I make the assumption that you're

5
00:00:13,320 --> 00:00:14,820
there because you really want to listen

6
00:00:14,820 --> 00:00:17,760
to this talk so I'll try to give some

7
00:00:17,760 --> 00:00:20,460
let's say crunchy details

8
00:00:20,460 --> 00:00:22,199
and if you don't find it detailed enough

9
00:00:22,199 --> 00:00:24,900
like um and we can speak uh afterwards

10
00:00:24,900 --> 00:00:27,900
so I work at Wi-Fi Labs a company about

11
00:00:27,900 --> 00:00:30,680
dashboard so

12
00:00:32,420 --> 00:00:35,340
and he had like really

13
00:00:35,340 --> 00:00:37,920
strong opinions about dashboard but I

14
00:00:37,920 --> 00:00:40,020
don't take it personally because I at

15
00:00:40,020 --> 00:00:42,719
grafana Labs we are a dashboard engine

16
00:00:42,719 --> 00:00:44,579
company so basically we're building an

17
00:00:44,579 --> 00:00:47,040
engine to be nice nice dashboard so that

18
00:00:47,040 --> 00:00:49,140
people can build useful dashboards

19
00:00:49,140 --> 00:00:51,600
meaning like for music videos dice ball

20
00:00:51,600 --> 00:00:53,879
dashboard where instead of data maybe

21
00:00:53,879 --> 00:00:56,460
you have some signal some useful stuff

22
00:00:56,460 --> 00:00:59,360
uh

23
00:01:00,500 --> 00:01:02,640
so uh

24
00:01:02,640 --> 00:01:06,000
again uh we'll try to give those details

25
00:01:06,000 --> 00:01:09,360
grafana lab is all about transparency

26
00:01:09,360 --> 00:01:12,900
so basically we're going to talk about

27
00:01:12,900 --> 00:01:17,040
mistakes we make uh we use go

28
00:01:17,040 --> 00:01:18,600
and

29
00:01:18,600 --> 00:01:20,759
yeah when you make mistakes you you can

30
00:01:20,759 --> 00:01:22,799
have like security issues and all that

31
00:01:22,799 --> 00:01:24,780
and the goal today is to share

32
00:01:24,780 --> 00:01:29,220
uh again about the Keynotes yesterday we

33
00:01:29,220 --> 00:01:31,259
discussed about misalign incentives and

34
00:01:31,259 --> 00:01:32,220
all that

35
00:01:32,220 --> 00:01:35,640
and Bug Bunty uh

36
00:01:35,640 --> 00:01:39,600
uh background chili Hunters like pen

37
00:01:39,600 --> 00:01:41,579
test and all that and we can especially

38
00:01:41,579 --> 00:01:44,880
in those conferences to glorify hacks

39
00:01:44,880 --> 00:01:47,579
but what interests me more as an

40
00:01:47,579 --> 00:01:48,840
engineer is

41
00:01:48,840 --> 00:01:51,240
how can make how can we make make it

42
00:01:51,240 --> 00:01:53,340
hard to happen how can we make things

43
00:01:53,340 --> 00:01:55,740
secure enough and all that how do we

44
00:01:55,740 --> 00:01:58,140
make the life of bug Bounty Hunter's

45
00:01:58,140 --> 00:01:59,720
powder

46
00:01:59,720 --> 00:02:03,540
so that's kind of my daily job upside

47
00:02:03,540 --> 00:02:06,240
engineer used to be a back-end developer

48
00:02:06,240 --> 00:02:08,399
10 15 years ago

49
00:02:08,399 --> 00:02:11,900
and uh I worked at g-club also as absec

50
00:02:11,900 --> 00:02:15,599
and basically at grafana Labs I try to

51
00:02:15,599 --> 00:02:18,300
make sure that the software

52
00:02:18,300 --> 00:02:21,300
we are writing is secure enough

53
00:02:21,300 --> 00:02:23,760
meaning that we don't have for it to be

54
00:02:23,760 --> 00:02:26,760
perfect we want it to be

55
00:02:26,760 --> 00:02:29,640
somehow like safe enough I thought he's

56
00:02:29,640 --> 00:02:31,800
better than most of the competition and

57
00:02:31,800 --> 00:02:33,180
all that so that

58
00:02:33,180 --> 00:02:35,580
if bad things happen we don't feel

59
00:02:35,580 --> 00:02:39,060
ashamed we we feel we've met

60
00:02:39,060 --> 00:02:42,900
a job that's good enough

61
00:02:42,900 --> 00:02:46,200
so uh we will see that like just a few

62
00:02:46,200 --> 00:02:49,680
words about go and why if you hear about

63
00:02:49,680 --> 00:02:52,860
it it's nicely connected and

64
00:02:52,860 --> 00:02:55,620
anytime you talk to people or not like

65
00:02:55,620 --> 00:02:57,720
you hear the message that yeah if you do

66
00:02:57,720 --> 00:02:59,340
something in go

67
00:02:59,340 --> 00:03:02,519
it sounds it's going to be secure but

68
00:03:02,519 --> 00:03:05,099
you can still like make mistakes because

69
00:03:05,099 --> 00:03:07,080
there are a few things that are

70
00:03:07,080 --> 00:03:10,319
confusing and many vulnerabilities occur

71
00:03:10,319 --> 00:03:12,840
when there is confusion

72
00:03:12,840 --> 00:03:15,120
so what we're going to do we are going

73
00:03:15,120 --> 00:03:18,900
to analyze in details two series first I

74
00:03:18,900 --> 00:03:21,420
where we are the first rehearsal

75
00:03:21,420 --> 00:03:24,420
because of a confusing method

76
00:03:24,420 --> 00:03:28,140
we'll see what we've done to try to make

77
00:03:28,140 --> 00:03:30,659
sure we have properly fixed because we

78
00:03:30,659 --> 00:03:32,700
didn't want to play wakamo we wanted to

79
00:03:32,700 --> 00:03:34,860
make sure that once we patch it we are

80
00:03:34,860 --> 00:03:36,120
not like

81
00:03:36,120 --> 00:03:37,800
pinged again at the middle of the night

82
00:03:37,800 --> 00:03:39,659
to fix it again because the fix is not

83
00:03:39,659 --> 00:03:41,940
like uh

84
00:03:41,940 --> 00:03:43,980
let's see

85
00:03:43,980 --> 00:03:46,860
wide enough regarding like what you're

86
00:03:46,860 --> 00:03:48,659
trying to protect from so we'll see how

87
00:03:48,659 --> 00:03:51,060
we've decided to use go first thing to

88
00:03:51,060 --> 00:03:53,700
try to build confidence on on our fix

89
00:03:53,700 --> 00:03:57,900
and after that we look at something uh

90
00:03:57,900 --> 00:04:02,519
that's what critical 9.x score where we

91
00:04:02,519 --> 00:04:04,560
have suffered from a race condition and

92
00:04:04,560 --> 00:04:06,780
things that where you don't think they

93
00:04:06,780 --> 00:04:09,180
could be happening in go but they can

94
00:04:09,180 --> 00:04:10,019
happen

95
00:04:10,019 --> 00:04:12,900
and there we'll see how we use load

96
00:04:12,900 --> 00:04:13,920
testing

97
00:04:13,920 --> 00:04:18,298
to exploit the issue we had and also to

98
00:04:18,298 --> 00:04:20,519
make sure at least again reasonable

99
00:04:20,519 --> 00:04:24,419
confident that our fix was again

100
00:04:24,419 --> 00:04:26,880
fixing enough the issues so that once we

101
00:04:26,880 --> 00:04:29,040
deploy it

102
00:04:29,040 --> 00:04:31,139
like burgundy Hunters don't just don't

103
00:04:31,139 --> 00:04:33,120
look at it and just trying to find a

104
00:04:33,120 --> 00:04:35,100
similar bypass and then we really look

105
00:04:35,100 --> 00:04:37,979
stupid and then we will finish here with

106
00:04:37,979 --> 00:04:40,139
something more surprise for the end just

107
00:04:40,139 --> 00:04:42,000
to keep you awake and so that people

108
00:04:42,000 --> 00:04:45,139
don't leave before the end

109
00:04:45,240 --> 00:04:46,620
so

110
00:04:46,620 --> 00:04:49,199
if you love to go.dev they say yeah well

111
00:04:49,199 --> 00:04:52,380
which go you can build simple secure and

112
00:04:52,380 --> 00:04:55,500
scalable systems it's kind of really a

113
00:04:55,500 --> 00:04:59,100
strong assertion like simple secure

114
00:04:59,100 --> 00:05:00,840
scalable

115
00:05:00,840 --> 00:05:02,820
it looks like yeah it's a perfect

116
00:05:02,820 --> 00:05:05,040
language like you you should pick it and

117
00:05:05,040 --> 00:05:07,320
you can do whatever

118
00:05:07,320 --> 00:05:09,000
you're in good hands and yeah if you

119
00:05:09,000 --> 00:05:10,800
look at knowing the details here first

120
00:05:10,800 --> 00:05:13,500
it's memory safe so no birth or overflow

121
00:05:13,500 --> 00:05:15,840
issue and all that it's statically type

122
00:05:15,840 --> 00:05:17,940
which means like it's going to be hard

123
00:05:17,940 --> 00:05:20,100
to get like things like remote code

124
00:05:20,100 --> 00:05:22,199
execution that we just saw before uh

125
00:05:22,199 --> 00:05:23,820
with this blockchain stuff and all that

126
00:05:23,820 --> 00:05:26,400
and they also have a nice long security

127
00:05:26,400 --> 00:05:28,680
Checker so by default you get the Linker

128
00:05:28,680 --> 00:05:30,240
that gives you

129
00:05:30,240 --> 00:05:32,340
rather good warnings on when you are

130
00:05:32,340 --> 00:05:36,060
doing dangerous things and all that yet

131
00:05:36,060 --> 00:05:37,919
as I said in intro

132
00:05:37,919 --> 00:05:40,620
we had sevolving abilities we look at

133
00:05:40,620 --> 00:05:43,979
two because of what I call unexpected

134
00:05:43,979 --> 00:05:47,100
Behavior which but it's not unexpected

135
00:05:47,100 --> 00:05:49,199
behavioral like C where depending on the

136
00:05:49,199 --> 00:05:51,780
copilot and the CPU it doesn't compute

137
00:05:51,780 --> 00:05:54,120
the same thing here it's well in fact

138
00:05:54,120 --> 00:05:56,220
it's deterministic and if you look at

139
00:05:56,220 --> 00:05:58,139
details in the dock it tells you exactly

140
00:05:58,139 --> 00:05:59,880
what it's going to do and it's

141
00:05:59,880 --> 00:06:01,800
deterministic whether it's like running

142
00:06:01,800 --> 00:06:05,160
on x86 on arm 64 and all that Mac

143
00:06:05,160 --> 00:06:08,039
windows or whatever but it's surprising

144
00:06:08,039 --> 00:06:10,380
to the developer so it's doing something

145
00:06:10,380 --> 00:06:12,539
that when you type it you don't think

146
00:06:12,539 --> 00:06:15,380
it's going to do

147
00:06:15,900 --> 00:06:18,780
and so that's why you can have bad

148
00:06:18,780 --> 00:06:20,940
things happening and we'll start with

149
00:06:20,940 --> 00:06:22,500
something really bad

150
00:06:22,500 --> 00:06:25,860
or for zero day December 2021 I was not

151
00:06:25,860 --> 00:06:28,740
there at that time uh

152
00:06:28,740 --> 00:06:30,840
but what's interesting because we're all

153
00:06:30,840 --> 00:06:33,960
about transparency I could find all that

154
00:06:33,960 --> 00:06:36,419
information on public blogs posts and

155
00:06:36,419 --> 00:06:38,759
public purpose and some of it was useful

156
00:06:38,759 --> 00:06:40,380
for me for the interview process because

157
00:06:40,380 --> 00:06:44,039
some of them were asking for that uh so

158
00:06:44,039 --> 00:06:45,060
what happened

159
00:06:45,060 --> 00:06:47,340
December the 2nd

160
00:06:47,340 --> 00:06:51,419
a researcher finds a past traversal okay

161
00:06:51,419 --> 00:06:54,180
very super excited about it

162
00:06:54,180 --> 00:06:56,759
if you brought it to us like responsible

163
00:06:56,759 --> 00:06:58,500
disclosure and all that that's fine like

164
00:06:58,500 --> 00:07:00,479
gpg encoded and all that so all the

165
00:07:00,479 --> 00:07:02,280
cleansing and then just after that he

166
00:07:02,280 --> 00:07:03,720
said wow

167
00:07:03,720 --> 00:07:05,940
I found the price to Amazon and you can

168
00:07:05,940 --> 00:07:08,400
see like all those links the links work

169
00:07:08,400 --> 00:07:10,259
so you take those slides and you see you

170
00:07:10,259 --> 00:07:13,319
will see all the comments all the tweets

171
00:07:13,319 --> 00:07:15,900
all the details all our comments on PR

172
00:07:15,900 --> 00:07:19,620
and all that so he tweeted about it and

173
00:07:19,620 --> 00:07:22,440
of course what happened a few days after

174
00:07:22,440 --> 00:07:24,960
well you tell people hey you know

175
00:07:24,960 --> 00:07:27,960
there's goldier and and people

176
00:07:27,960 --> 00:07:30,240
try to look at it and after a few days

177
00:07:30,240 --> 00:07:33,840
we saw that our ostead instances uh uh

178
00:07:33,840 --> 00:07:36,960
well people were actively using the bus

179
00:07:36,960 --> 00:07:38,819
drivers also just because someone said

180
00:07:38,819 --> 00:07:41,280
there was a past reversal several other

181
00:07:41,280 --> 00:07:44,039
researchers found it and they didn't

182
00:07:44,039 --> 00:07:48,180
tell us and they tried to exploit it uh

183
00:07:48,180 --> 00:07:50,960
so it was clearly a zero day

184
00:07:50,960 --> 00:07:54,120
and we released a fix on December the

185
00:07:54,120 --> 00:07:56,160
7th so basically we were working on it

186
00:07:56,160 --> 00:07:57,660
and then when we saw that it was

187
00:07:57,660 --> 00:07:59,699
actually exported all the company

188
00:07:59,699 --> 00:08:01,560
stopped working and just like focused on

189
00:08:01,560 --> 00:08:03,380
getting it shipped

190
00:08:03,380 --> 00:08:06,720
another question was when we did the

191
00:08:06,720 --> 00:08:09,780
first incident review like

192
00:08:09,780 --> 00:08:12,840
like what the hell how could it happen

193
00:08:12,840 --> 00:08:15,539
like we are using like standard gold

194
00:08:15,539 --> 00:08:17,940
libraries how can we have past reversals

195
00:08:17,940 --> 00:08:20,039
stuff for things where the languages

196
00:08:20,039 --> 00:08:23,539
that it's secure and it's simple

197
00:08:24,120 --> 00:08:26,400
well here is a culprit

198
00:08:26,400 --> 00:08:29,280
you will see why

199
00:08:29,280 --> 00:08:30,479
so

200
00:08:30,479 --> 00:08:33,719
file past those clean like just reading

201
00:08:33,719 --> 00:08:35,399
the name like that song like if you're

202
00:08:35,399 --> 00:08:36,899
lazy and you just look at the name of

203
00:08:36,899 --> 00:08:38,399
the method you say yeah it's gonna clean

204
00:08:38,399 --> 00:08:40,559
everything if you look at the dock and

205
00:08:40,559 --> 00:08:42,539
you just read the first sentence it

206
00:08:42,539 --> 00:08:44,339
tells you like it cleanly Returns the

207
00:08:44,339 --> 00:08:46,260
shortest past name equivalent to pass

208
00:08:46,260 --> 00:08:48,540
which seems to be like exactly what you

209
00:08:48,540 --> 00:08:50,459
want if you want to avoid past reversal

210
00:08:50,459 --> 00:08:53,279
you get your input you you give it to

211
00:08:53,279 --> 00:08:54,920
this method and then the fast is clean

212
00:08:54,920 --> 00:08:57,360
shortage pass

213
00:08:57,360 --> 00:08:59,700
no problem but

214
00:08:59,700 --> 00:09:03,000
in fact instead like purely like sickly

215
00:09:03,000 --> 00:09:04,800
processing blah blah blah those four

216
00:09:04,800 --> 00:09:06,180
rules I won't tell them it's super

217
00:09:06,180 --> 00:09:08,220
confusing

218
00:09:08,220 --> 00:09:10,740
you read that three times you are still

219
00:09:10,740 --> 00:09:13,740
not sure what's happening uh I know that

220
00:09:13,740 --> 00:09:15,420
I don't want you to read all that again

221
00:09:15,420 --> 00:09:19,019
all the links are working and all that

222
00:09:19,019 --> 00:09:21,360
when it gets like complex I had I like

223
00:09:21,360 --> 00:09:23,820
to play with a few God samples to be

224
00:09:23,820 --> 00:09:27,600
sure I understand the dock uh which has

225
00:09:27,600 --> 00:09:30,240
a lot because when the dock is unclear I

226
00:09:30,240 --> 00:09:33,420
need to really bad source of confusion

227
00:09:33,420 --> 00:09:36,120
so basically my understanding when you

228
00:09:36,120 --> 00:09:37,920
read that it says like it will remove

229
00:09:37,920 --> 00:09:40,080
all those dot dot sequence which is

230
00:09:40,080 --> 00:09:41,820
perfect when you want to get rid of past

231
00:09:41,820 --> 00:09:43,860
reversal and it will do that for all the

232
00:09:43,860 --> 00:09:45,959
Inner Elements

233
00:09:45,959 --> 00:09:48,120
and also for the first element if it

234
00:09:48,120 --> 00:09:50,100
starts with a slash

235
00:09:50,100 --> 00:09:52,019
which means then

236
00:09:52,019 --> 00:09:55,740
it does not remove the first dot dot if

237
00:09:55,740 --> 00:09:57,420
it does not start with a slash so for

238
00:09:57,420 --> 00:09:59,279
that making sure you understand the dog

239
00:09:59,279 --> 00:10:01,380
you go to the go play around write it

240
00:10:01,380 --> 00:10:03,240
simple like Snippets

241
00:10:03,240 --> 00:10:06,899
and then you see that yeah in fact if it

242
00:10:06,899 --> 00:10:08,940
starts with a slash then everything is

243
00:10:08,940 --> 00:10:10,800
clean as expected but if it starts with

244
00:10:10,800 --> 00:10:13,080
a slash slash

245
00:10:13,080 --> 00:10:15,660
and it's not going to be

246
00:10:15,660 --> 00:10:19,519
cleaned up as expected

247
00:10:19,800 --> 00:10:20,880
so

248
00:10:20,880 --> 00:10:24,600
what we were doing yeah well

249
00:10:24,600 --> 00:10:27,899
classic past reversal stuff I guess

250
00:10:27,899 --> 00:10:30,360
we have a web parameter

251
00:10:30,360 --> 00:10:33,360
we have plugins in grafana where we need

252
00:10:33,360 --> 00:10:37,800
to load extra files and then uh what we

253
00:10:37,800 --> 00:10:40,800
were doing we were then just okay

254
00:10:40,800 --> 00:10:43,080
cleaning these parameters say hey yeah

255
00:10:43,080 --> 00:10:44,579
we're not stupid doing some input

256
00:10:44,579 --> 00:10:46,320
validation let's clean it and then that

257
00:10:46,320 --> 00:10:47,579
should be fine

258
00:10:47,579 --> 00:10:50,519
and then what's again you click on the

259
00:10:50,519 --> 00:10:52,500
vulnerability tuning you see the all

260
00:10:52,500 --> 00:10:54,240
commits that are the broken code because

261
00:10:54,240 --> 00:10:57,360
of course today this is fixed uh

262
00:10:57,360 --> 00:10:59,339
but you can see also because it's all

263
00:10:59,339 --> 00:11:01,260
open source and public purpose you can

264
00:11:01,260 --> 00:11:03,060
see also all the comments on the pull

265
00:11:03,060 --> 00:11:05,220
requests I know that and there's

266
00:11:05,220 --> 00:11:06,779
something that's interesting even in the

267
00:11:06,779 --> 00:11:07,920
source code

268
00:11:07,920 --> 00:11:10,860
there's a comment that says like yeah

269
00:11:10,860 --> 00:11:14,220
well goseek this security linter it's

270
00:11:14,220 --> 00:11:15,899
complaining

271
00:11:15,899 --> 00:11:18,240
but but one of our software engineers

272
00:11:18,240 --> 00:11:19,860
said yeah well we can ignore this

273
00:11:19,860 --> 00:11:21,720
warning because we are cleaning things

274
00:11:21,720 --> 00:11:25,019
as we should so we are the winter that

275
00:11:25,019 --> 00:11:27,600
wonders but we were sure that we were

276
00:11:27,600 --> 00:11:29,579
doing the right things and we kept track

277
00:11:29,579 --> 00:11:30,540
of it

278
00:11:30,540 --> 00:11:33,600
so at this stage it looks like well you

279
00:11:33,600 --> 00:11:35,519
know everything is under control you

280
00:11:35,519 --> 00:11:39,540
have like a some security linkers in

281
00:11:39,540 --> 00:11:41,279
your cicd pipeline

282
00:11:41,279 --> 00:11:45,000
people spend time looking at the results

283
00:11:45,000 --> 00:11:47,700
Sev like in ask comments like why they

284
00:11:47,700 --> 00:11:49,320
decide to ignore something and all that

285
00:11:49,320 --> 00:11:51,000
and then what's even more

286
00:11:51,000 --> 00:11:52,200
funny

287
00:11:52,200 --> 00:11:54,420
if you look at goes like and then what's

288
00:11:54,420 --> 00:11:57,300
about like these g304 finding it says

289
00:11:57,300 --> 00:11:58,980
yeah well you know you're giving

290
00:11:58,980 --> 00:12:02,820
something as five pass yeah and then

291
00:12:02,820 --> 00:12:05,339
there's a link in this goes like warning

292
00:12:05,339 --> 00:12:07,079
that's called the right way and then

293
00:12:07,079 --> 00:12:08,700
what's the right what the right way is

294
00:12:08,700 --> 00:12:11,940
telling you to do well use five pass DOT

295
00:12:11,940 --> 00:12:14,279
clean and then yourself

296
00:12:14,279 --> 00:12:17,060
so uh

297
00:12:17,880 --> 00:12:20,399
so we are like we using codes the

298
00:12:20,399 --> 00:12:21,839
interior compliance

299
00:12:21,839 --> 00:12:24,180
but we are using file pass.fin and the

300
00:12:24,180 --> 00:12:26,220
Dock of the linter says you should use

301
00:12:26,220 --> 00:12:29,820
fivepas.clean so like someone reviewed

302
00:12:29,820 --> 00:12:32,220
the pr review this command and then say

303
00:12:32,220 --> 00:12:33,899
yeah well and yeah I'll go sex tell me

304
00:12:33,899 --> 00:12:37,620
like this is a way so we should be fine

305
00:12:37,620 --> 00:12:39,260
we were all notes

306
00:12:39,260 --> 00:12:42,899
uh so what we did again you click on

307
00:12:42,899 --> 00:12:46,800
this link and you see the fix uh we just

308
00:12:46,800 --> 00:12:49,980
open the slush and it seems to be fine

309
00:12:49,980 --> 00:12:51,180
uh

310
00:12:51,180 --> 00:12:54,060
we saw that before like if the first

311
00:12:54,060 --> 00:12:55,980
element starts with the slash it seems

312
00:12:55,980 --> 00:12:59,399
to be okay we added some unit tests and

313
00:12:59,399 --> 00:13:01,860
then we created like a few

314
00:13:01,860 --> 00:13:05,220
follow-up issues uh in our post incident

315
00:13:05,220 --> 00:13:07,260
review process like you

316
00:13:07,260 --> 00:13:09,600
have let's say

317
00:13:09,600 --> 00:13:12,540
more control about this kind of of like

318
00:13:12,540 --> 00:13:15,480
science Rules uh and all that

319
00:13:15,480 --> 00:13:17,220
okay that's fine so that's how you fix

320
00:13:17,220 --> 00:13:19,680
that went out on December the 7th 2021

321
00:13:19,680 --> 00:13:22,079
and then fixing the zero day and all

322
00:13:22,079 --> 00:13:22,800
that

323
00:13:22,800 --> 00:13:25,019
but everyone was still

324
00:13:25,019 --> 00:13:26,940
like troubled let's say like is it

325
00:13:26,940 --> 00:13:29,279
enough it kind of looks over hard like

326
00:13:29,279 --> 00:13:32,220
we need to put a slash in front of it uh

327
00:13:32,220 --> 00:13:34,019
why go is not doing it and then like

328
00:13:34,019 --> 00:13:36,000
maybe bad things can happen like with

329
00:13:36,000 --> 00:13:38,639
Unicode characters or whatever like uh

330
00:13:38,639 --> 00:13:41,579
are we doing the right thing because

331
00:13:41,579 --> 00:13:44,399
it's already exploited people know we

332
00:13:44,399 --> 00:13:45,839
have a past reversal now that they're

333
00:13:45,839 --> 00:13:47,579
fixed like that so it's going to be

334
00:13:47,579 --> 00:13:50,700
super easy for other people to try to

335
00:13:50,700 --> 00:13:53,519
say hey okay now I'll I'll try to all

336
00:13:53,519 --> 00:13:56,579
I'll I'll try other pass injection and

337
00:13:56,579 --> 00:13:58,920
insightly likely to succeed because when

338
00:13:58,920 --> 00:14:01,019
you look at the fix it's it it doesn't

339
00:14:01,019 --> 00:14:02,579
seem that strong

340
00:14:02,579 --> 00:14:07,279
so here comes good fuzzing

341
00:14:09,779 --> 00:14:13,620
so the goal uh of fizzing in general uh

342
00:14:13,620 --> 00:14:15,300
and then you go you see the context it's

343
00:14:15,300 --> 00:14:18,060
a bit different but basically it's your

344
00:14:18,060 --> 00:14:19,920
right predicates

345
00:14:19,920 --> 00:14:21,959
and you expect

346
00:14:21,959 --> 00:14:24,360
to write uh those predicating like those

347
00:14:24,360 --> 00:14:27,360
things should never happen and you want

348
00:14:27,360 --> 00:14:29,220
to throw an engine that will try to find

349
00:14:29,220 --> 00:14:31,560
contour examples that will break those

350
00:14:31,560 --> 00:14:34,200
predicates so it's kind of the opposite

351
00:14:34,200 --> 00:14:36,120
of security requirements where security

352
00:14:36,120 --> 00:14:37,620
requirements are telling you like yeah

353
00:14:37,620 --> 00:14:40,079
you should do that well whereas like

354
00:14:40,079 --> 00:14:43,380
here we are writing

355
00:14:43,380 --> 00:14:45,600
think that's that this should never

356
00:14:45,600 --> 00:14:48,300
happen and and that's it and then what

357
00:14:48,300 --> 00:14:51,060
what will the floating engine do uh it

358
00:14:51,060 --> 00:14:53,339
will generate many many episodes of the

359
00:14:53,339 --> 00:14:55,560
random input and see if the predicates

360
00:14:55,560 --> 00:14:57,839
are broken or not and if it finds a

361
00:14:57,839 --> 00:14:59,940
predicate it stops and they say hey your

362
00:14:59,940 --> 00:15:02,519
code is broken security wise this bad

363
00:15:02,519 --> 00:15:03,839
thing can happen

364
00:15:03,839 --> 00:15:07,220
so what's what's cool is go into uh

365
00:15:07,220 --> 00:15:10,519
included natively fuzzing from version

366
00:15:10,519 --> 00:15:13,699
1.18 which is about like one year ago

367
00:15:13,699 --> 00:15:17,160
uh and the way they did it is super neat

368
00:15:17,160 --> 00:15:18,839
from a developer perspective because

369
00:15:18,839 --> 00:15:23,279
it's on top of unit test so it's almost

370
00:15:23,279 --> 00:15:25,740
uni test by default the we have as uni

371
00:15:25,740 --> 00:15:27,959
test and then you activate the fuzzing

372
00:15:27,959 --> 00:15:29,880
flag and then they start to do all the

373
00:15:29,880 --> 00:15:31,940
magic of a never-ending Loop

374
00:15:31,940 --> 00:15:33,839
multi-thread it so that they can test

375
00:15:33,839 --> 00:15:35,639
like a lot of findings and all that

376
00:15:35,639 --> 00:15:37,920
meaning that you can have

377
00:15:37,920 --> 00:15:39,959
your unit test you just need to like

378
00:15:39,959 --> 00:15:41,399
write them a little differently they're

379
00:15:41,399 --> 00:15:43,199
running your pipeline as usual and at

380
00:15:43,199 --> 00:15:44,639
some point you want to get confident

381
00:15:44,639 --> 00:15:47,399
that your helper works okay and then you

382
00:15:47,399 --> 00:15:48,839
say okay now I'm gonna spend like 10

383
00:15:48,839 --> 00:15:51,540
minutes fuzzing I switch your flag I run

384
00:15:51,540 --> 00:15:53,880
it and then I see if it finds something

385
00:15:53,880 --> 00:15:56,160
or not uh

386
00:15:56,160 --> 00:15:58,260
there's a tutorial

387
00:15:58,260 --> 00:15:59,660
which is

388
00:15:59,660 --> 00:16:03,779
not a crystal clear so let's just use

389
00:16:03,779 --> 00:16:09,060
this vulnerability as an example uh

390
00:16:09,060 --> 00:16:11,399
to make things easy I extracted all the

391
00:16:11,399 --> 00:16:14,639
code just put or clean pass method here

392
00:16:14,639 --> 00:16:16,740
where we do this Arc of

393
00:16:16,740 --> 00:16:19,260
putting a slash in front of it

394
00:16:19,260 --> 00:16:21,300
again if you're interested to play with

395
00:16:21,300 --> 00:16:23,579
it later on I created a public repo you

396
00:16:23,579 --> 00:16:25,139
download the source code you play with

397
00:16:25,139 --> 00:16:27,300
it and you tell me when it gets broken

398
00:16:27,300 --> 00:16:29,040
because of whatever you go version

399
00:16:29,040 --> 00:16:32,339
things can happen

400
00:16:32,339 --> 00:16:34,459
the phasing test

401
00:16:34,459 --> 00:16:38,279
we don't care about the syntax here and

402
00:16:38,279 --> 00:16:40,440
all that what's interesting is you see

403
00:16:40,440 --> 00:16:42,060
test cases

404
00:16:42,060 --> 00:16:45,120
basically you give let's say

405
00:16:45,120 --> 00:16:47,759
input as starting points like things

406
00:16:47,759 --> 00:16:49,740
that should look okay and things that

407
00:16:49,740 --> 00:16:52,320
shouldn't really look okay and then from

408
00:16:52,320 --> 00:16:54,199
there first thing we'll start doing

409
00:16:54,199 --> 00:16:57,060
minor mutations and move things around

410
00:16:57,060 --> 00:16:58,920
and all that and up until it finds

411
00:16:58,920 --> 00:16:59,820
something

412
00:16:59,820 --> 00:17:04,020
uh uh and what's important are uh

413
00:17:04,020 --> 00:17:05,880
uh the predicates

414
00:17:05,880 --> 00:17:10,640
so here we are saying that

415
00:17:10,740 --> 00:17:12,299
once cleaned

416
00:17:12,299 --> 00:17:15,000
all the inputs should start with a slash

417
00:17:15,000 --> 00:17:17,760
if it's not the case an input has been

418
00:17:17,760 --> 00:17:19,559
found that that is breaking the

419
00:17:19,559 --> 00:17:21,260
assumption

420
00:17:21,260 --> 00:17:24,480
and we'll try also to say that

421
00:17:24,480 --> 00:17:28,380
uh well if we see a slash dot slash in

422
00:17:28,380 --> 00:17:30,720
the middle of a clean input like our

423
00:17:30,720 --> 00:17:32,640
input validation is just bad it's not

424
00:17:32,640 --> 00:17:36,120
working and we we we have found like an

425
00:17:36,120 --> 00:17:37,559
input that's breaking the rules and we

426
00:17:37,559 --> 00:17:40,700
want to be aware of it

427
00:17:40,919 --> 00:17:43,500
so we launch it super easy you just need

428
00:17:43,500 --> 00:17:45,360
the correct Go version

429
00:17:45,360 --> 00:17:47,640
and to activate the floating Loop you

430
00:17:47,640 --> 00:17:49,440
just put like minus first equal first

431
00:17:49,440 --> 00:17:51,780
and then it starts throwing things at

432
00:17:51,780 --> 00:17:54,960
you uh

433
00:17:56,280 --> 00:17:58,559
when you do so you'll see that in fact

434
00:17:58,559 --> 00:18:00,059
you're wrong when you're writing the

435
00:18:00,059 --> 00:18:02,160
predicate and that's that's really

436
00:18:02,160 --> 00:18:03,539
interesting which means like sometimes

437
00:18:03,539 --> 00:18:05,520
it's harder to test your validation

438
00:18:05,520 --> 00:18:07,260
logic isn't to write the validation

439
00:18:07,260 --> 00:18:09,900
logic which means that most of the time

440
00:18:09,900 --> 00:18:11,820
your validation logic is incomplete

441
00:18:11,820 --> 00:18:14,220
because you didn't think about

442
00:18:14,220 --> 00:18:17,340
everything so it's trial and error you

443
00:18:17,340 --> 00:18:19,200
say hey here here are my predicates you

444
00:18:19,200 --> 00:18:21,960
learn them two seconds after violation

445
00:18:21,960 --> 00:18:24,240
you see an input that they are this

446
00:18:24,240 --> 00:18:27,539
input is Val is like obviously

447
00:18:27,539 --> 00:18:29,880
wrong I need to fix

448
00:18:29,880 --> 00:18:31,620
my predicate

449
00:18:31,620 --> 00:18:33,600
because most of the time it's a

450
00:18:33,600 --> 00:18:36,179
predicate that's wrong uh and then

451
00:18:36,179 --> 00:18:38,820
sometimes you get stuck uh we'll see an

452
00:18:38,820 --> 00:18:41,160
example just as well you don't know if

453
00:18:41,160 --> 00:18:42,600
it's like

454
00:18:42,600 --> 00:18:46,440
if the input is legit or not should you

455
00:18:46,440 --> 00:18:48,179
process it and is the output like

456
00:18:48,179 --> 00:18:50,280
something you should expect or not so

457
00:18:50,280 --> 00:18:52,320
for example if you reuse this example

458
00:18:52,320 --> 00:18:55,380
and then we use a predicate which is

459
00:18:55,380 --> 00:18:59,160
like uh I don't want a dot dot slash in

460
00:18:59,160 --> 00:19:02,059
my clean string then after

461
00:19:02,059 --> 00:19:06,419
0.00 seconds so like almost uh right

462
00:19:06,419 --> 00:19:09,000
away go says hey I found something like

463
00:19:09,000 --> 00:19:12,360
if you give it like zero dot slash zero

464
00:19:12,360 --> 00:19:14,820
then you end up as a result which is

465
00:19:14,820 --> 00:19:17,820
like slash zero dot slash zero

466
00:19:17,820 --> 00:19:20,820
like is it alleged input is it a valid

467
00:19:20,820 --> 00:19:22,919
output it's like it's super hard to know

468
00:19:22,919 --> 00:19:25,080
so that's where like fuzzing has proven

469
00:19:25,080 --> 00:19:27,299
like super useful so that you challenge

470
00:19:27,299 --> 00:19:29,160
yourself and say like which kind of

471
00:19:29,160 --> 00:19:32,460
input you should accept uh and so before

472
00:19:32,460 --> 00:19:34,500
pass traversal what we want to do is

473
00:19:34,500 --> 00:19:37,740
making sure that the input like like

474
00:19:37,740 --> 00:19:39,600
really does it does it ever make sense

475
00:19:39,600 --> 00:19:41,700
to have this kind of pass zero zero dot

476
00:19:41,700 --> 00:19:44,700
slash slash and all that so it help us

477
00:19:44,700 --> 00:19:47,039
fine tune like or validation logic and

478
00:19:47,039 --> 00:19:49,440
all that with all those Corner cases

479
00:19:49,440 --> 00:19:50,700
uh

480
00:19:50,700 --> 00:19:52,440
I don't know when we saw there was value

481
00:19:52,440 --> 00:19:55,380
we use it for like a bit more complex

482
00:19:55,380 --> 00:19:56,520
things

483
00:19:56,520 --> 00:19:58,799
where we didn't have zero days we said

484
00:19:58,799 --> 00:20:00,419
like maybe it's a good idea to try to be

485
00:20:00,419 --> 00:20:04,140
a bit proactive uh

486
00:20:04,500 --> 00:20:06,660
again uh

487
00:20:06,660 --> 00:20:10,020
we are using fightpass.clean at other

488
00:20:10,020 --> 00:20:12,240
parts of our source code and especially

489
00:20:12,240 --> 00:20:15,179
we have plugins and we sign those

490
00:20:15,179 --> 00:20:16,799
plugins to make sure they have not been

491
00:20:16,799 --> 00:20:19,679
tempered with and all that and for us

492
00:20:19,679 --> 00:20:22,020
when we do this signature it's super

493
00:20:22,020 --> 00:20:24,240
important that all the file paths in the

494
00:20:24,240 --> 00:20:26,720
plugin match what's in the Manifest

495
00:20:26,720 --> 00:20:30,000
uh so we are using fightpass.clean and

496
00:20:30,000 --> 00:20:32,039
then we have like a bit different logic

497
00:20:32,039 --> 00:20:34,200
and all that again here you can click on

498
00:20:34,200 --> 00:20:36,299
the link you get the example I'll just

499
00:20:36,299 --> 00:20:38,039
copy paste

500
00:20:38,039 --> 00:20:41,039
the code here to make it like easier to

501
00:20:41,039 --> 00:20:44,520
read we write a phasing test for it uh

502
00:20:44,520 --> 00:20:47,940
and there it gets harder uh to write uh

503
00:20:47,940 --> 00:20:50,400
you soon see that when you try to write

504
00:20:50,400 --> 00:20:52,559
predicate if the logic starts to be a

505
00:20:52,559 --> 00:20:54,480
bit more complex

506
00:20:54,480 --> 00:20:57,860
it's hard to write it in a clean Manner

507
00:20:57,860 --> 00:21:01,740
and all that that's what we try to

508
00:21:01,740 --> 00:21:04,080
achieve there we try to wrap that in

509
00:21:04,080 --> 00:21:05,520
method and all that so it can start to

510
00:21:05,520 --> 00:21:07,740
be like to be honest it can start to be

511
00:21:07,740 --> 00:21:09,480
hard and it's looks like it's gonna work

512
00:21:09,480 --> 00:21:11,880
in 10 minutes and then you feel safe it

513
00:21:11,880 --> 00:21:14,220
requires like engineering bandwidth and

514
00:21:14,220 --> 00:21:16,559
all that to play with it

515
00:21:16,559 --> 00:21:18,539
uh

516
00:21:18,539 --> 00:21:21,000
so you have to like work on methods

517
00:21:21,000 --> 00:21:23,400
trying to see what it does and then and

518
00:21:23,400 --> 00:21:25,080
then you start getting stuck because you

519
00:21:25,080 --> 00:21:26,660
say okay

520
00:21:26,660 --> 00:21:28,919
native Library

521
00:21:28,919 --> 00:21:30,900
but I'm not sure if it's really secure

522
00:21:30,900 --> 00:21:32,460
now because I don't trust their dogs

523
00:21:32,460 --> 00:21:34,080
anymore so somehow you have to

524
00:21:34,080 --> 00:21:36,360
re-implement like all those small

525
00:21:36,360 --> 00:21:38,580
things yourself so that you compare the

526
00:21:38,580 --> 00:21:40,799
go implementation with what's your

527
00:21:40,799 --> 00:21:42,840
definition of what's this

528
00:21:42,840 --> 00:21:45,419
code should do so it takes quite a lot

529
00:21:45,419 --> 00:21:46,640
of time

530
00:21:46,640 --> 00:21:49,919
but yet is still useful because you find

531
00:21:49,919 --> 00:21:52,140
things so for example we saw that we had

532
00:21:52,140 --> 00:21:54,120
something broken in our signature plugin

533
00:21:54,120 --> 00:21:57,000
if you put like dot slash dot slash so

534
00:21:57,000 --> 00:21:59,640
basically you could

535
00:21:59,640 --> 00:22:01,620
inject kind of an anti-file in the

536
00:22:01,620 --> 00:22:03,179
signature which was not a big deal but

537
00:22:03,179 --> 00:22:04,740
but yet it proved that our validation

538
00:22:04,740 --> 00:22:06,240
logic was broken

539
00:22:06,240 --> 00:22:08,340
and we were expecting

540
00:22:08,340 --> 00:22:11,159
people to look at every each and every

541
00:22:11,159 --> 00:22:13,140
five pass DOT scene we had in our source

542
00:22:13,140 --> 00:22:15,720
code because it has proven or value so

543
00:22:15,720 --> 00:22:18,240
we fixed it click on the pr you see it

544
00:22:18,240 --> 00:22:22,080
and all that so good first thing was

545
00:22:22,080 --> 00:22:25,520
super useful for that

546
00:22:28,679 --> 00:22:31,860
Barbara use terms now this is going to

547
00:22:31,860 --> 00:22:33,410
be getting hard

548
00:22:33,410 --> 00:22:36,419
[Music]

549
00:22:36,419 --> 00:22:38,520
again you'll have the links and all that

550
00:22:38,520 --> 00:22:42,320
but before diving in

551
00:22:42,980 --> 00:22:45,480
if you click on it there's the advisory

552
00:22:45,480 --> 00:22:48,059
and to be honest when you read the

553
00:22:48,059 --> 00:22:49,799
advisory

554
00:22:49,799 --> 00:22:51,419
you don't really understand what's

555
00:22:51,419 --> 00:22:52,919
happening behind the hood like the

556
00:22:52,919 --> 00:22:54,360
adversary says yeah there's something

557
00:22:54,360 --> 00:22:56,220
there's a rest condition where which can

558
00:22:56,220 --> 00:22:58,860
lead to privileged escalation like you

559
00:22:58,860 --> 00:23:00,720
you understand it's bad because his

560
00:23:00,720 --> 00:23:03,200
vulnerability is a critical it's a 9.8

561
00:23:03,200 --> 00:23:07,200
but you don't know how it can happen

562
00:23:07,200 --> 00:23:09,539
and then you'll see how the code has

563
00:23:09,539 --> 00:23:11,520
been fixed like even if you look at the

564
00:23:11,520 --> 00:23:14,640
fixed code you don't really see the link

565
00:23:14,640 --> 00:23:16,679
between the description of the of the

566
00:23:16,679 --> 00:23:18,360
advisory and like what's happening

567
00:23:18,360 --> 00:23:19,679
behind the hood

568
00:23:19,679 --> 00:23:20,820
it's because

569
00:23:20,820 --> 00:23:22,799
yeah even though we are on open source

570
00:23:22,799 --> 00:23:24,900
company we still have private customers

571
00:23:24,900 --> 00:23:28,140
and they want the advisories to be

572
00:23:28,140 --> 00:23:30,539
as generic as possible

573
00:23:30,539 --> 00:23:31,860
uh

574
00:23:31,860 --> 00:23:35,100
that's life uh what's more interesting

575
00:23:35,100 --> 00:23:37,260
there is

576
00:23:37,260 --> 00:23:40,140
how did we learn about it so this time

577
00:23:40,140 --> 00:23:42,179
it's not someone tweeting about it we

578
00:23:42,179 --> 00:23:44,580
were lucky uh

579
00:23:44,580 --> 00:23:46,500
one in fact it was unhappy customers

580
00:23:46,500 --> 00:23:48,659
like in Oakland versions they're

581
00:23:48,659 --> 00:23:50,520
starting like

582
00:23:50,520 --> 00:23:52,860
sending us like contacting support and a

583
00:23:52,860 --> 00:23:54,539
ticket and say hey I don't understand

584
00:23:54,539 --> 00:23:57,059
like sometimes like some data on my

585
00:23:57,059 --> 00:23:58,799
graph is not appearing and then when I

586
00:23:58,799 --> 00:24:01,799
see a log files I see like access deny

587
00:24:01,799 --> 00:24:05,039
40 series 401 errors this is range we

588
00:24:05,039 --> 00:24:06,419
had nothing like that one weeks two

589
00:24:06,419 --> 00:24:08,640
weeks ago like it starts to appear like

590
00:24:08,640 --> 00:24:10,440
well that's strange

591
00:24:10,440 --> 00:24:12,840
so our engineering team like walking try

592
00:24:12,840 --> 00:24:15,000
to understand took them a lot of time

593
00:24:15,000 --> 00:24:17,700
and all that and then

594
00:24:17,700 --> 00:24:19,620
a really good developer from us like

595
00:24:19,620 --> 00:24:20,940
found it

596
00:24:20,940 --> 00:24:23,820
said hey yeah it's a concurrency issues

597
00:24:23,820 --> 00:24:26,520
I tell you the first sentence

598
00:24:26,520 --> 00:24:28,380
I read about it

599
00:24:28,380 --> 00:24:30,480
we have found a short slice rights race

600
00:24:30,480 --> 00:24:32,520
condition when initializing handlers for

601
00:24:32,520 --> 00:24:36,020
the middlewares good night

602
00:24:36,020 --> 00:24:39,840
we try to suffer decide for that and a

603
00:24:39,840 --> 00:24:42,900
lot but what's interesting there is well

604
00:24:42,900 --> 00:24:47,100
that was a concurrency issue

605
00:24:47,100 --> 00:24:49,380
but it's about something like its

606
00:24:49,380 --> 00:24:51,360
middleware but but but what are

607
00:24:51,360 --> 00:24:52,919
middlewares will see that their ability

608
00:24:52,919 --> 00:24:55,500
to authentication and then what's really

609
00:24:55,500 --> 00:24:57,480
nice here like with the culture we have

610
00:24:57,480 --> 00:24:58,740
is

611
00:24:58,740 --> 00:25:00,840
a developer finds something a rest

612
00:25:00,840 --> 00:25:03,659
condition you see that it triggers like

613
00:25:03,659 --> 00:25:06,080
you

614
00:25:06,240 --> 00:25:09,120
bugs regarding access access denied and

615
00:25:09,120 --> 00:25:10,799
all that and then it pings us the secret

616
00:25:10,799 --> 00:25:12,780
team saying that hey yeah maybe you

617
00:25:12,780 --> 00:25:14,520
should have a look at it maybe there is

618
00:25:14,520 --> 00:25:17,340
a security impact because the bug we are

619
00:25:17,340 --> 00:25:19,980
saying is customers are complaining that

620
00:25:19,980 --> 00:25:22,320
they don't see their data but maybe some

621
00:25:22,320 --> 00:25:24,059
customers are seeing data they are not

622
00:25:24,059 --> 00:25:25,320
supposed to see

623
00:25:25,320 --> 00:25:27,120
and no one will ever report you

624
00:25:27,120 --> 00:25:28,740
something about that except if it's

625
00:25:28,740 --> 00:25:30,480
really like obvious that you shouldn't

626
00:25:30,480 --> 00:25:31,740
see it

627
00:25:31,740 --> 00:25:35,700
so let's see what can we do with that

628
00:25:35,700 --> 00:25:38,539
uh

629
00:25:39,539 --> 00:25:42,840
before that a bit of vocabulary and all

630
00:25:42,840 --> 00:25:45,059
that we use internally API roots

631
00:25:45,059 --> 00:25:46,260
middleware

632
00:25:46,260 --> 00:25:50,179
an API route is just basically

633
00:25:50,179 --> 00:25:53,700
the mapping between the URL the public

634
00:25:53,700 --> 00:25:55,620
API like

635
00:25:55,620 --> 00:25:57,419
if you already you can contact it and

636
00:25:57,419 --> 00:25:59,100
then the business logic that it's

637
00:25:59,100 --> 00:26:00,000
calling

638
00:26:00,000 --> 00:26:02,640
and then the middleware is shared shirt

639
00:26:02,640 --> 00:26:05,100
code that can either be called before or

640
00:26:05,100 --> 00:26:06,900
after the business logic so basically

641
00:26:06,900 --> 00:26:09,120
instead of copy pasting each time all

642
00:26:09,120 --> 00:26:11,039
the same kind of authorization checks

643
00:26:11,039 --> 00:26:13,919
and all that when you call a method you

644
00:26:13,919 --> 00:26:15,480
put it in command components and then

645
00:26:15,480 --> 00:26:16,799
you make sure they are applied

646
00:26:16,799 --> 00:26:19,140
systematically and for example we have

647
00:26:19,140 --> 00:26:21,179
middleware for making sure the user is

648
00:26:21,179 --> 00:26:23,700
logged in which is kind of useful we

649
00:26:23,700 --> 00:26:25,799
also have that's before the business

650
00:26:25,799 --> 00:26:27,900
logic and after the business logic we

651
00:26:27,900 --> 00:26:30,059
have some middleware that make sure to

652
00:26:30,059 --> 00:26:32,159
filter out the resulting data to make

653
00:26:32,159 --> 00:26:33,659
sure you only see what you're supposed

654
00:26:33,659 --> 00:26:36,960
to see so you have two examples below of

655
00:26:36,960 --> 00:26:39,960
our source code where one is middle one

656
00:26:39,960 --> 00:26:41,520
say hey you should be signing and then

657
00:26:41,520 --> 00:26:42,840
you have something strange about

658
00:26:42,840 --> 00:26:45,299
snapshots here why it says like it's

659
00:26:45,299 --> 00:26:49,080
public mode or sign in which kind of the

660
00:26:49,080 --> 00:26:50,400
first time you read it is kind of

661
00:26:50,400 --> 00:26:51,960
roaring because it's a hair well it's

662
00:26:51,960 --> 00:26:53,520
something the easier you are logged in

663
00:26:53,520 --> 00:26:56,400
or you're not logged in uh

664
00:26:56,400 --> 00:27:00,120
we'll see that it's it was a poor design

665
00:27:00,120 --> 00:27:02,539
choice

666
00:27:05,460 --> 00:27:07,559
getting to the

667
00:27:07,559 --> 00:27:08,700
art

668
00:27:08,700 --> 00:27:10,260
here

669
00:27:10,260 --> 00:27:13,260
while opening two slices dangerous

670
00:27:13,260 --> 00:27:14,940
first there is a really great article

671
00:27:14,940 --> 00:27:17,400
and just not not just before because of

672
00:27:17,400 --> 00:27:19,440
this picture but it really explained

673
00:27:19,440 --> 00:27:22,559
like suppose like one big page like

674
00:27:22,559 --> 00:27:24,480
white slices

675
00:27:24,480 --> 00:27:27,299
Ingo are not always slightly slices

676
00:27:27,299 --> 00:27:29,460
basically seems like if you have to say

677
00:27:29,460 --> 00:27:32,460
in a few world it's like you you have an

678
00:27:32,460 --> 00:27:34,260
array of data and you say like I want

679
00:27:34,260 --> 00:27:36,480
this part this third part of the of the

680
00:27:36,480 --> 00:27:38,820
array like I want to starting from three

681
00:27:38,820 --> 00:27:41,760
to five just give me this web array and

682
00:27:41,760 --> 00:27:43,860
as a developer if you don't know go

683
00:27:43,860 --> 00:27:46,020
enough and all that it seems like yeah

684
00:27:46,020 --> 00:27:48,240
well you have an array it gives me a new

685
00:27:48,240 --> 00:27:49,980
array which is just the only important

686
00:27:49,980 --> 00:27:53,159
interesting uh and then it's well first

687
00:27:53,159 --> 00:27:54,960
in the article that there's a common

688
00:27:54,960 --> 00:27:58,440
misconception about uh our slices walk

689
00:27:58,440 --> 00:27:59,820
in go

690
00:27:59,820 --> 00:28:02,039
that leads to unexpected program

691
00:28:02,039 --> 00:28:04,320
Behavior so that's the confusion we were

692
00:28:04,320 --> 00:28:06,000
talking about at the beginning and all

693
00:28:06,000 --> 00:28:08,159
that which is surprising to many

694
00:28:08,159 --> 00:28:11,460
developers so that's it uh so it's

695
00:28:11,460 --> 00:28:13,380
unexpected not because it's not

696
00:28:13,380 --> 00:28:16,740
deterministic it's unexpected because as

697
00:28:16,740 --> 00:28:18,960
a user of the language you don't think

698
00:28:18,960 --> 00:28:21,240
it should do that in that case

699
00:28:21,240 --> 00:28:23,880
and then look all of that he said it's

700
00:28:23,880 --> 00:28:26,700
because slices are references

701
00:28:26,700 --> 00:28:29,539
pointers basically all of go almost

702
00:28:29,539 --> 00:28:32,880
everything is copied by value so that

703
00:28:32,880 --> 00:28:34,980
you don't get all this kind of transfus

704
00:28:34,980 --> 00:28:36,779
pointer stuff you can have in C and all

705
00:28:36,779 --> 00:28:37,860
that

706
00:28:37,860 --> 00:28:40,140
except for slices because they and

707
00:28:40,140 --> 00:28:41,700
they're doing that for performance

708
00:28:41,700 --> 00:28:45,240
reasons uh I know that so again if you

709
00:28:45,240 --> 00:28:47,700
want the full details the article is

710
00:28:47,700 --> 00:28:52,020
really nice but as a tldr well

711
00:28:52,020 --> 00:28:54,480
a slice in fact when you when you when

712
00:28:54,480 --> 00:28:56,580
you ask for a slice

713
00:28:56,580 --> 00:28:59,159
a new object is not created most of the

714
00:28:59,159 --> 00:29:01,520
time the slice is using the real array

715
00:29:01,520 --> 00:29:04,799
behind uh

716
00:29:04,799 --> 00:29:09,480
and only when the Arabian does not have

717
00:29:09,480 --> 00:29:13,020
uh let's say the correct size so and and

718
00:29:13,020 --> 00:29:15,600
you don't really know because it's like

719
00:29:15,600 --> 00:29:17,640
comparable stuff and all that it decides

720
00:29:17,640 --> 00:29:21,299
to clone your slides so which means that

721
00:29:21,299 --> 00:29:24,000
sometimes your slice which is a

722
00:29:24,000 --> 00:29:25,620
reference gets cloned automatically

723
00:29:25,620 --> 00:29:27,720
which means like it is passed as a value

724
00:29:27,720 --> 00:29:30,779
by chance and sometimes it's still a

725
00:29:30,779 --> 00:29:32,399
reference and it's as dangerous as a

726
00:29:32,399 --> 00:29:36,199
pointer in C so

727
00:29:36,779 --> 00:29:39,500
foreign

728
00:29:41,539 --> 00:29:43,740
we don't know if it's vulnerable yet

729
00:29:43,740 --> 00:29:45,720
like we know it was broken there was a

730
00:29:45,720 --> 00:29:46,440
bug

731
00:29:46,440 --> 00:29:49,559
and a fix Again full transparency you

732
00:29:49,559 --> 00:29:51,179
have access to the pull request where it

733
00:29:51,179 --> 00:29:53,039
was introduced I don't want to show you

734
00:29:53,039 --> 00:29:55,380
15 pages

735
00:29:55,380 --> 00:29:58,200
of code that was in this pull request if

736
00:29:58,200 --> 00:30:00,480
you're brave you click on the link but I

737
00:30:00,480 --> 00:30:02,820
just show you what's important in the

738
00:30:02,820 --> 00:30:05,340
pull request a summary of what is this

739
00:30:05,340 --> 00:30:08,039
change doing it says while we are

740
00:30:08,039 --> 00:30:10,500
changing the middleware execution model

741
00:30:10,500 --> 00:30:13,500
from web unders to you know slice to web

742
00:30:13,500 --> 00:30:15,840
dot middleware okay we are challenging

743
00:30:15,840 --> 00:30:17,279
something about the middleware and

744
00:30:17,279 --> 00:30:18,480
there's a slight interloop another

745
00:30:18,480 --> 00:30:20,940
comment is interesting like why the l

746
00:30:20,940 --> 00:30:23,100
should we change that like you know we

747
00:30:23,100 --> 00:30:24,840
have many more features to work on and

748
00:30:24,840 --> 00:30:27,539
all that well in fact there were like a

749
00:30:27,539 --> 00:30:30,960
few uh improvements and all that a bit

750
00:30:30,960 --> 00:30:32,880
expand their middle words are

751
00:30:32,880 --> 00:30:34,860
temporarily kept in a slice to preserve

752
00:30:34,860 --> 00:30:39,059
ordering blah blah blah uh because

753
00:30:39,059 --> 00:30:41,580
before that when you are two three four

754
00:30:41,580 --> 00:30:43,140
middlewares

755
00:30:43,140 --> 00:30:45,299
you did not have the guarantee that they

756
00:30:45,299 --> 00:30:47,279
were applied in the correct order which

757
00:30:47,279 --> 00:30:49,559
can be kind of confusing because you say

758
00:30:49,559 --> 00:30:51,360
hey I want to be login then I want to

759
00:30:51,360 --> 00:30:53,460
have permission a and then I want to

760
00:30:53,460 --> 00:30:55,380
filter data like that if you don't do it

761
00:30:55,380 --> 00:30:57,299
in the correct order you start getting

762
00:30:57,299 --> 00:30:59,460
your own messages that say wow sorry but

763
00:30:59,460 --> 00:31:01,679
I can't tell you if you have permission

764
00:31:01,679 --> 00:31:03,659
here because I don't know who you are

765
00:31:03,659 --> 00:31:06,120
yet because the login middleware hasn't

766
00:31:06,120 --> 00:31:09,960
like kicked in yet and all that uh

767
00:31:09,960 --> 00:31:12,419
okay so something

768
00:31:12,419 --> 00:31:15,120
that made sense that's hard when you

769
00:31:15,120 --> 00:31:16,500
read it and all that a change that has

770
00:31:16,500 --> 00:31:18,539
to be done a change but that was done on

771
00:31:18,539 --> 00:31:20,580
authentication logic so something super

772
00:31:20,580 --> 00:31:23,340
super sensitive

773
00:31:23,340 --> 00:31:25,559
but the the pull request was approved

774
00:31:25,559 --> 00:31:26,820
all the equipments were fine and then

775
00:31:26,820 --> 00:31:28,320
when you look at the source code and to

776
00:31:28,320 --> 00:31:31,020
be honest even if I'd reviewed the

777
00:31:31,020 --> 00:31:33,000
source code for me it would have looked

778
00:31:33,000 --> 00:31:34,799
nice it looks clean it makes sense we

779
00:31:34,799 --> 00:31:36,720
need to change and then when you when

780
00:31:36,720 --> 00:31:37,919
you read it

781
00:31:37,919 --> 00:31:39,960
like you don't spot anything and of

782
00:31:39,960 --> 00:31:41,399
course like we are talking about

783
00:31:41,399 --> 00:31:43,380
cultural before we can talk about some

784
00:31:43,380 --> 00:31:45,720
web or any SAS engine there is no way

785
00:31:45,720 --> 00:31:47,700
this kind of thing like will point it

786
00:31:47,700 --> 00:31:50,220
out it's just like business logic but

787
00:31:50,220 --> 00:31:52,020
it's business logic about authentication

788
00:31:52,020 --> 00:31:53,039
stuff

789
00:31:53,039 --> 00:31:54,360
uh

790
00:31:54,360 --> 00:31:57,360
now the bug fix which you you can see

791
00:31:57,360 --> 00:32:00,899
there uh the comment is more useful they

792
00:32:00,899 --> 00:32:03,600
say hey well we have to explicitly copy

793
00:32:03,600 --> 00:32:05,700
the middle version to avoid by single

794
00:32:05,700 --> 00:32:08,220
shot slides to the context so now wow we

795
00:32:08,220 --> 00:32:09,600
don't see in command that we are the

796
00:32:09,600 --> 00:32:11,580
vulnerability but yeah if you just like

797
00:32:11,580 --> 00:32:14,279
look at the cve that the death of this

798
00:32:14,279 --> 00:32:17,159
PR you already find it like within five

799
00:32:17,159 --> 00:32:18,899
minutes you know it it's called this

800
00:32:18,899 --> 00:32:21,059
this charge and basically what we are

801
00:32:21,059 --> 00:32:24,480
doing well we are just

802
00:32:24,480 --> 00:32:26,580
and forcing the copy so that we are

803
00:32:26,580 --> 00:32:28,440
making sure that we are not using like

804
00:32:28,440 --> 00:32:32,100
slices as reference from time to time we

805
00:32:32,100 --> 00:32:33,659
just like make sure to copy them

806
00:32:33,659 --> 00:32:37,260
explicitly and then it should be fine

807
00:32:37,260 --> 00:32:39,899
should it be is it enough

808
00:32:39,899 --> 00:32:43,320
well you know this build fix was taken

809
00:32:43,320 --> 00:32:45,500
in production we don't see any more

810
00:32:45,500 --> 00:32:48,240
errors about like access denied and all

811
00:32:48,240 --> 00:32:49,200
that

812
00:32:49,200 --> 00:32:50,880
but you never know especially when it's

813
00:32:50,880 --> 00:32:53,820
a rest condition maybe you fixed 99 of

814
00:32:53,820 --> 00:32:57,000
it and in one week someone sees it but

815
00:32:57,000 --> 00:32:58,679
then now with that

816
00:32:58,679 --> 00:33:01,080
we've leaked openly that we had

817
00:33:01,080 --> 00:33:02,820
something broken in this authentication

818
00:33:02,820 --> 00:33:04,679
middleware and we know that people are

819
00:33:04,679 --> 00:33:07,260
already following grafana and they are

820
00:33:07,260 --> 00:33:09,360
like actively looking on us here just to

821
00:33:09,360 --> 00:33:11,460
figure we have more than one million

822
00:33:11,460 --> 00:33:14,039
instances deployed in the wild that's

823
00:33:14,039 --> 00:33:16,919
quite a big number uh

824
00:33:16,919 --> 00:33:19,200
so

825
00:33:19,200 --> 00:33:21,480
that's why I was at Peach who have been

826
00:33:21,480 --> 00:33:24,240
like contacted and say okay now

827
00:33:24,240 --> 00:33:26,940
we've made this fix

828
00:33:26,940 --> 00:33:29,340
was still called exploitable before this

829
00:33:29,340 --> 00:33:30,480
fix

830
00:33:30,480 --> 00:33:32,760
and if it was exportable is this fixed

831
00:33:32,760 --> 00:33:34,559
enough

832
00:33:34,559 --> 00:33:37,679
what can we do about it and

833
00:33:37,679 --> 00:33:40,620
especially how can we decide quickly

834
00:33:40,620 --> 00:33:42,840
like how how do we do that in a few

835
00:33:42,840 --> 00:33:46,440
hours so that basically you tell all the

836
00:33:46,440 --> 00:33:49,140
incident responses team and all that

837
00:33:49,140 --> 00:33:52,440
yeah well if it's exposible maybe you

838
00:33:52,440 --> 00:33:54,659
have to look at your log file for the

839
00:33:54,659 --> 00:33:58,380
last two weeks and see if any

840
00:33:58,380 --> 00:34:02,580
let's say ill internal person asteroid

841
00:34:02,580 --> 00:34:05,279
to exploit that

842
00:34:05,279 --> 00:34:07,200
so

843
00:34:07,200 --> 00:34:09,659
I'm just like I like to take a step back

844
00:34:09,659 --> 00:34:12,000
and what I do well it's full remote

845
00:34:12,000 --> 00:34:13,500
company so

846
00:34:13,500 --> 00:34:15,179
we work from home and all that but I

847
00:34:15,179 --> 00:34:17,099
just go away from the computer and I try

848
00:34:17,099 --> 00:34:19,619
to take like 15 minutes off and try to

849
00:34:19,619 --> 00:34:22,619
just focus on the problem and not on all

850
00:34:22,619 --> 00:34:26,639
the like mess and that you trigger so

851
00:34:26,639 --> 00:34:29,040
the root cause is well

852
00:34:29,040 --> 00:34:32,339
because of zero slices are working

853
00:34:32,339 --> 00:34:34,859
sometimes they can be shared instead of

854
00:34:34,859 --> 00:34:37,619
being a copy and then it depends on the

855
00:34:37,619 --> 00:34:40,679
sizes of those slices and all that so

856
00:34:40,679 --> 00:34:44,219
it's kind of meaning that okay if we

857
00:34:44,219 --> 00:34:48,359
want to exploit it we must like force

858
00:34:48,359 --> 00:34:50,760
those slice C's to be shared and we know

859
00:34:50,760 --> 00:34:52,739
it's possible for them to be heard

860
00:34:52,739 --> 00:34:55,980
because we had this bug so

861
00:34:55,980 --> 00:34:59,339
it happened in real life so it shouldn't

862
00:34:59,339 --> 00:35:02,580
be that hard to reproduce uh

863
00:35:02,580 --> 00:35:05,160
so in practice it means like if we want

864
00:35:05,160 --> 00:35:07,140
to exploit it what we will be trying to

865
00:35:07,140 --> 00:35:10,079
do is okay so

866
00:35:10,079 --> 00:35:13,260
let's say we have request a

867
00:35:13,260 --> 00:35:15,599
either a way so that we cross a will

868
00:35:15,599 --> 00:35:17,820
receive the middleware lists of request

869
00:35:17,820 --> 00:35:20,579
B if boss requests happen about at the

870
00:35:20,579 --> 00:35:21,599
same time

871
00:35:21,599 --> 00:35:24,480
can I get to execute like something for

872
00:35:24,480 --> 00:35:25,619
user a

873
00:35:25,619 --> 00:35:29,099
but with the checks of user B

874
00:35:29,099 --> 00:35:31,320
so when you do that of course

875
00:35:31,320 --> 00:35:34,079
you never know if you get a yes or no or

876
00:35:34,079 --> 00:35:35,400
I don't know

877
00:35:35,400 --> 00:35:38,040
and maybe you you could spend yours on

878
00:35:38,040 --> 00:35:41,579
that and never being able to prove it

879
00:35:41,579 --> 00:35:44,880
uh so trying to optimize this the chance

880
00:35:44,880 --> 00:35:47,400
of let's say minimizing chances of

881
00:35:47,400 --> 00:35:50,820
failure let's be honest uh so first

882
00:35:50,820 --> 00:35:53,040
point is yeah because it's going to be

883
00:35:53,040 --> 00:35:55,079
rest condition and

884
00:35:55,079 --> 00:35:57,540
it's never going to be deterministic and

885
00:35:57,540 --> 00:35:59,339
all that first decision was to test it

886
00:35:59,339 --> 00:36:01,920
locally so that you like avoid all these

887
00:36:01,920 --> 00:36:03,720
Network latency and all that that could

888
00:36:03,720 --> 00:36:05,579
make it harder to exploit

889
00:36:05,579 --> 00:36:08,400
uh and then the decision to make things

890
00:36:08,400 --> 00:36:10,980
easier and because there's like this

891
00:36:10,980 --> 00:36:13,859
size parameter I know that was to focus

892
00:36:13,859 --> 00:36:16,859
on endpoints with only one middleware so

893
00:36:16,859 --> 00:36:19,079
that if you make the switch you are

894
00:36:19,079 --> 00:36:20,099
switching

895
00:36:20,099 --> 00:36:22,859
from A to B and you don't have like ABC

896
00:36:22,859 --> 00:36:24,720
and Def and all that and you don't know

897
00:36:24,720 --> 00:36:27,359
what's happening uh and all that and of

898
00:36:27,359 --> 00:36:30,540
course if it's a vulnerability

899
00:36:30,540 --> 00:36:33,000
you want to maximize impact and so for

900
00:36:33,000 --> 00:36:35,220
that that's something when you know the

901
00:36:35,220 --> 00:36:38,060
application there's something which is

902
00:36:38,060 --> 00:36:40,440
unconventional let's use let's use this

903
00:36:40,440 --> 00:36:43,980
word where uh there's an API endpoint if

904
00:36:43,980 --> 00:36:45,900
you have server admin access you can

905
00:36:45,900 --> 00:36:47,940
reset the password of anyone without

906
00:36:47,940 --> 00:36:50,520
knowing their password so normally only

907
00:36:50,520 --> 00:36:53,700
those super admin can call it

908
00:36:53,700 --> 00:36:58,440
uh but it's kind of or I just said there

909
00:36:58,440 --> 00:37:01,619
and we also have a few unauthenticated

910
00:37:01,619 --> 00:37:03,900
endpoints uh there is a public dashboard

911
00:37:03,900 --> 00:37:06,480
feature where anyone can see dashboard

912
00:37:06,480 --> 00:37:09,540
of public data uh which means that if we

913
00:37:09,540 --> 00:37:12,540
can do that if we can have

914
00:37:12,540 --> 00:37:13,800
uh

915
00:37:13,800 --> 00:37:18,900
the reset admin password endpoint called

916
00:37:18,900 --> 00:37:22,440
with a public middleware it means like

917
00:37:22,440 --> 00:37:25,560
someone not logged in may be able to

918
00:37:25,560 --> 00:37:27,720
change the super admin password for

919
00:37:27,720 --> 00:37:31,740
example which will lead to this nice 9.8

920
00:37:31,740 --> 00:37:33,300
score

921
00:37:33,300 --> 00:37:35,160
so now

922
00:37:35,160 --> 00:37:37,920
how do you do that in practice

923
00:37:37,920 --> 00:37:41,099
okay you can try to maybe like write

924
00:37:41,099 --> 00:37:42,480
python script

925
00:37:42,480 --> 00:37:46,140
launch verb whatever and then cross your

926
00:37:46,140 --> 00:37:49,380
fingers or

927
00:37:49,380 --> 00:37:51,599
I was lucky

928
00:37:51,599 --> 00:37:54,780
there's a tool called k6 so it's on a

929
00:37:54,780 --> 00:37:57,359
process tool that's now part of the

930
00:37:57,359 --> 00:38:01,740
grafana labs umbrella uh its goal is to

931
00:38:01,740 --> 00:38:03,780
provide the best developer experience

932
00:38:03,780 --> 00:38:06,240
for load testing so basically load

933
00:38:06,240 --> 00:38:09,060
testing Made Easy basically you don't

934
00:38:09,060 --> 00:38:13,260
need to spin up 17 Dockers with 45 pages

935
00:38:13,260 --> 00:38:17,460
of talks resolve 15 broken dependencies

936
00:38:17,460 --> 00:38:19,079
and then you launch something and then

937
00:38:19,079 --> 00:38:21,359
you get network errors because like

938
00:38:21,359 --> 00:38:24,839
queuing to optimize and all that uh so

939
00:38:24,839 --> 00:38:26,940
it was kind of a no-brainer for me to

940
00:38:26,940 --> 00:38:28,740
try like and then say okay now let's try

941
00:38:28,740 --> 00:38:33,119
to reproduce it to sk6 uh

942
00:38:33,119 --> 00:38:35,460
are really great dogs first time I use

943
00:38:35,460 --> 00:38:37,140
it it wasn't how to do this I said yeah

944
00:38:37,140 --> 00:38:39,119
I need to have a look at it we wanted to

945
00:38:39,119 --> 00:38:41,160
dog food it for security use cases and

946
00:38:41,160 --> 00:38:43,859
all that but then like well there's

947
00:38:43,859 --> 00:38:46,140
never a basket that Under Pressure to

948
00:38:46,140 --> 00:38:47,640
test if the tool is good and if the

949
00:38:47,640 --> 00:38:49,260
results are good it's like the tool is

950
00:38:49,260 --> 00:38:51,660
really good and yeah and what's nice is

951
00:38:51,660 --> 00:38:53,220
yeah you know load testing tool had

952
00:38:53,220 --> 00:38:55,079
really bad experience with or previous

953
00:38:55,079 --> 00:38:57,839
ones now it's an internal team it's

954
00:38:57,839 --> 00:38:59,579
teammates and because it's kind of a

955
00:38:59,579 --> 00:39:02,040
highly visible incident if we need help

956
00:39:02,040 --> 00:39:04,079
like they will help so that was kind of

957
00:39:04,079 --> 00:39:06,180
nice but I didn't

958
00:39:06,180 --> 00:39:08,940
even needed help

959
00:39:08,940 --> 00:39:11,940
so there's a demo here

960
00:39:11,940 --> 00:39:13,800
and if you don't see the details going

961
00:39:13,800 --> 00:39:16,380
to be shared

962
00:39:16,380 --> 00:39:18,540
this one is super sensitive

963
00:39:18,540 --> 00:39:20,520
I'm sure there are still hundreds

964
00:39:20,520 --> 00:39:22,200
thousands

965
00:39:22,200 --> 00:39:23,820
of

966
00:39:23,820 --> 00:39:26,339
instances that are running this broken

967
00:39:26,339 --> 00:39:29,460
version they shouldn't be

968
00:39:29,460 --> 00:39:34,020
please don't play with it against

969
00:39:34,020 --> 00:39:36,839
instances that are not yours so what we

970
00:39:36,839 --> 00:39:38,579
will try to do with k6 what's really

971
00:39:38,579 --> 00:39:39,660
nice it's

972
00:39:39,660 --> 00:39:43,140
they have a simple JavaScript

973
00:39:43,140 --> 00:39:48,060
uh let's say library to express what you

974
00:39:48,060 --> 00:39:50,579
want to do so what we are going to do we

975
00:39:50,579 --> 00:39:54,540
have this admin reset password endpoint

976
00:39:54,540 --> 00:39:59,220
we have a public dashboard endpoint

977
00:39:59,220 --> 00:40:01,560
we prefer a payload where we set the

978
00:40:01,560 --> 00:40:04,759
password to the me password

979
00:40:04,859 --> 00:40:07,859
here we Define scenario that that's what

980
00:40:07,859 --> 00:40:10,500
nice really nice with k6 you say okay

981
00:40:10,500 --> 00:40:13,020
now I want to have the first scenario I

982
00:40:13,020 --> 00:40:14,900
call it protected

983
00:40:14,900 --> 00:40:18,240
and I'm going to run 60 views views in

984
00:40:18,240 --> 00:40:20,820
fact are virtual user so basically it's

985
00:40:20,820 --> 00:40:24,000
going to start 60 threads

986
00:40:24,000 --> 00:40:25,619
calling that

987
00:40:25,619 --> 00:40:29,940
so that would be 60 virtual users

988
00:40:29,940 --> 00:40:31,680
trying to call

989
00:40:31,680 --> 00:40:34,380
the reset password endpoint and there

990
00:40:34,380 --> 00:40:36,780
will be also at the same time 60 virtual

991
00:40:36,780 --> 00:40:39,480
users trying to call the public endpoint

992
00:40:39,480 --> 00:40:41,160
so

993
00:40:41,160 --> 00:40:44,099
quite heavy load there and we say okay

994
00:40:44,099 --> 00:40:46,200
we test that for two minutes and we we

995
00:40:46,200 --> 00:40:48,720
see what happens so that's a description

996
00:40:48,720 --> 00:40:52,560
of the scenario and then you define

997
00:40:52,560 --> 00:40:53,760
again

998
00:40:53,760 --> 00:40:57,000
predicates while you say things that

999
00:40:57,000 --> 00:40:58,980
shouldn't happen so you say for the

1000
00:40:58,980 --> 00:41:01,380
reset password you try to reset the

1001
00:41:01,380 --> 00:41:02,460
password

1002
00:41:02,460 --> 00:41:04,079
and

1003
00:41:04,079 --> 00:41:07,560
because you try to call yeah the reset

1004
00:41:07,560 --> 00:41:09,420
password without any credentials you say

1005
00:41:09,420 --> 00:41:11,160
hey this shouldn't work because I'm not

1006
00:41:11,160 --> 00:41:12,900
authenticated I'm not supposed to be

1007
00:41:12,900 --> 00:41:15,000
able to change the password of anyone so

1008
00:41:15,000 --> 00:41:19,140
you expect the statues to be not 200 and

1009
00:41:19,140 --> 00:41:22,140
if it's 200 you say okay stop

1010
00:41:22,140 --> 00:41:24,900
password has been updated that's really

1011
00:41:24,900 --> 00:41:25,800
bad

1012
00:41:25,800 --> 00:41:28,980
so that's for the predicate for the

1013
00:41:28,980 --> 00:41:30,599
protected route and then for the public

1014
00:41:30,599 --> 00:41:32,760
endpoint you just say well

1015
00:41:32,760 --> 00:41:34,920
it should return 200 and if it doesn't

1016
00:41:34,920 --> 00:41:36,780
like something strange is happening also

1017
00:41:36,780 --> 00:41:39,660
there's no reason for for it to fail and

1018
00:41:39,660 --> 00:41:42,000
so now let's do something crazy let's

1019
00:41:42,000 --> 00:41:44,040
try it you should never try your demo

1020
00:41:44,040 --> 00:41:45,839
something that's random but

1021
00:41:45,839 --> 00:41:48,660
yeah Friday night and all that

1022
00:41:48,660 --> 00:41:51,420
let's give it a try so

1023
00:41:51,420 --> 00:41:52,980
what you do

1024
00:41:52,980 --> 00:41:56,339
you need to run a Docker version as try

1025
00:41:56,339 --> 00:41:58,940
to zoom in

1026
00:42:02,220 --> 00:42:04,740
well there's nothing magic I know you

1027
00:42:04,740 --> 00:42:06,660
run the docker image of a renewable

1028
00:42:06,660 --> 00:42:09,119
version and then the only thing you have

1029
00:42:09,119 --> 00:42:10,980
to do

1030
00:42:10,980 --> 00:42:13,740
k6 run the name of the JavaScript we've

1031
00:42:13,740 --> 00:42:14,700
seen

1032
00:42:14,700 --> 00:42:16,380
starts running

1033
00:42:16,380 --> 00:42:17,640
boom

1034
00:42:17,640 --> 00:42:20,099
lucky normally it's five seconds it was

1035
00:42:20,099 --> 00:42:21,540
quicker

1036
00:42:21,540 --> 00:42:25,680
so like yeah after a few dozens calls

1037
00:42:25,680 --> 00:42:28,320
you have statistics everywhere it

1038
00:42:28,320 --> 00:42:31,520
changed the password to the new password

1039
00:42:31,520 --> 00:42:35,000
let's try it

1040
00:42:41,280 --> 00:42:43,079
I mean

1041
00:42:43,079 --> 00:42:45,800
so

1042
00:42:46,350 --> 00:42:50,750
[Applause]

1043
00:42:51,359 --> 00:42:53,160
so

1044
00:42:53,160 --> 00:42:56,280
which things like uh so what we did so

1045
00:42:56,280 --> 00:42:58,440
then of course

1046
00:42:58,440 --> 00:43:02,520
we test it for a few hours with the same

1047
00:43:02,520 --> 00:43:05,520
script the patch version to make sure it

1048
00:43:05,520 --> 00:43:08,400
doesn't happen or at least that xr2 will

1049
00:43:08,400 --> 00:43:09,839
produce so it's kind of easy to

1050
00:43:09,839 --> 00:43:11,819
reproduce locally when you have Network

1051
00:43:11,819 --> 00:43:14,220
and all that it's much harder to try to

1052
00:43:14,220 --> 00:43:16,800
web shoot this seat and all that but

1053
00:43:16,800 --> 00:43:18,540
that's enough to prove that yeah it's a

1054
00:43:18,540 --> 00:43:20,520
vulnerability and then it's it's a 9.8

1055
00:43:20,520 --> 00:43:23,040
the biggest villain we ever had at the

1056
00:43:23,040 --> 00:43:26,280
company uh I need something

1057
00:43:26,280 --> 00:43:28,800
no security researcher found no one from

1058
00:43:28,800 --> 00:43:30,599
the security phone it's all it's

1059
00:43:30,599 --> 00:43:33,359
developers because they had to work on a

1060
00:43:33,359 --> 00:43:37,940
bug because of access issues

1061
00:43:37,940 --> 00:43:40,740
at customer deployment that we figured

1062
00:43:40,740 --> 00:43:41,700
it out

1063
00:43:41,700 --> 00:43:44,220
so maybe there are other rest conditions

1064
00:43:44,220 --> 00:43:46,980
and it's something that if people tell

1065
00:43:46,980 --> 00:43:50,240
you like Growers versus art and all that

1066
00:43:50,240 --> 00:43:54,300
worst as much better guarantees against

1067
00:43:54,300 --> 00:43:57,599
race condition whereas goal is well as

1068
00:43:57,599 --> 00:44:00,420
long as you copy things it's okay but if

1069
00:44:00,420 --> 00:44:02,099
you start sharing things by reference

1070
00:44:02,099 --> 00:44:04,440
you get things wrong we also add other

1071
00:44:04,440 --> 00:44:06,900
rest conditions with map single because

1072
00:44:06,900 --> 00:44:09,000
maps are also passed as references

1073
00:44:09,000 --> 00:44:11,760
because they are too big so things can

1074
00:44:11,760 --> 00:44:14,220
happen but they didn't have any security

1075
00:44:14,220 --> 00:44:15,420
impact

1076
00:44:15,420 --> 00:44:18,859
as far as we understood

1077
00:44:19,140 --> 00:44:22,260
but maybe we didn't understand well

1078
00:44:22,260 --> 00:44:25,859
so we just launched a backbone T program

1079
00:44:25,859 --> 00:44:28,220
we'll handle it ourselves

1080
00:44:28,220 --> 00:44:30,720
official announcement has not been done

1081
00:44:30,720 --> 00:44:32,940
yet so feel free to have a look at it

1082
00:44:32,940 --> 00:44:37,560
first before the too many people uh

1083
00:44:37,560 --> 00:44:39,060
we are interesting that this kind of

1084
00:44:39,060 --> 00:44:41,640
finding the big one so something like

1085
00:44:41,640 --> 00:44:43,740
that is clearly was twenty thousand so

1086
00:44:43,740 --> 00:44:46,939
we've tried to

1087
00:44:47,180 --> 00:44:50,640
to better align the incentive so that in

1088
00:44:50,640 --> 00:44:53,579
the policy of this bug Bounty program uh

1089
00:44:53,579 --> 00:44:56,280
we are optimizing for good quality of

1090
00:44:56,280 --> 00:44:57,660
reports and all that so we will pay

1091
00:44:57,660 --> 00:44:59,220
bonus points for

1092
00:44:59,220 --> 00:45:01,319
really

1093
00:45:01,319 --> 00:45:03,720
for people that are really well written

1094
00:45:03,720 --> 00:45:05,819
while there is a clear POC and all that

1095
00:45:05,819 --> 00:45:07,619
we are not interested by automating

1096
00:45:07,619 --> 00:45:09,660
findings which is just like copy pasting

1097
00:45:09,660 --> 00:45:13,759
of uh noise and all that

1098
00:45:14,240 --> 00:45:17,460
so what we learned

1099
00:45:17,460 --> 00:45:18,720
well

1100
00:45:18,720 --> 00:45:20,579
fight past those clinics like super

1101
00:45:20,579 --> 00:45:22,619
tricky and you can think that you're

1102
00:45:22,619 --> 00:45:24,420
protected from Pastor also lingo but

1103
00:45:24,420 --> 00:45:25,619
you're not

1104
00:45:25,619 --> 00:45:28,200
but go fuzzing can help you

1105
00:45:28,200 --> 00:45:30,359
quickly spot that

1106
00:45:30,359 --> 00:45:34,079
and then you can include that uh As Nice

1107
00:45:34,079 --> 00:45:35,940
regression test in your pipeline if they

1108
00:45:35,940 --> 00:45:37,400
are not too complex

1109
00:45:37,400 --> 00:45:40,920
and then you also learn that slices are

1110
00:45:40,920 --> 00:45:42,720
a dangerous Beast

1111
00:45:42,720 --> 00:45:45,180
uh Ingo

1112
00:45:45,180 --> 00:45:47,880
especially if you start implementing

1113
00:45:47,880 --> 00:45:51,480
like authentication logic yourself in

1114
00:45:51,480 --> 00:45:53,940
multi-threaded context and all that and

1115
00:45:53,940 --> 00:45:56,460
we've seen that we've seen that well if

1116
00:45:56,460 --> 00:45:57,660
you need to

1117
00:45:57,660 --> 00:45:59,880
exploit race condition like even in

1118
00:45:59,880 --> 00:46:01,200
different contexts and all that like

1119
00:46:01,200 --> 00:46:03,300
have a look at k6 it can help you like

1120
00:46:03,300 --> 00:46:06,060
be super productive you know validating

1121
00:46:06,060 --> 00:46:08,760
that and then I'm happy to take

1122
00:46:08,760 --> 00:46:09,390
questions

1123
00:46:09,390 --> 00:46:10,190
[Music]

1124
00:46:10,190 --> 00:46:18,889
[Applause]

1125
00:46:29,760 --> 00:46:32,040
well first of all thanks for talk and my

1126
00:46:32,040 --> 00:46:34,440
question is do you think go should

1127
00:46:34,440 --> 00:46:36,900
update the method the one from the first

1128
00:46:36,900 --> 00:46:39,540
vulnerability to make it

1129
00:46:39,540 --> 00:46:42,300
not possible to reproduce what happened

1130
00:46:42,300 --> 00:46:44,660
to you

1131
00:46:44,940 --> 00:46:47,339
I would say so but if they've done it

1132
00:46:47,339 --> 00:46:49,260
this way they have a good good reason to

1133
00:46:49,260 --> 00:46:52,040
do so and why the algorithm is there

1134
00:46:52,040 --> 00:46:54,660
uh and it's kind of

1135
00:46:54,660 --> 00:46:56,280
but they know they got it wrong because

1136
00:46:56,280 --> 00:46:58,740
they have a good sex rule which is a

1137
00:46:58,740 --> 00:47:02,040
hair it's not that good so

1138
00:47:02,040 --> 00:47:03,900
but then now I think it's too late for

1139
00:47:03,900 --> 00:47:05,660
them to change

1140
00:47:05,660 --> 00:47:08,160
so basically they should need to have

1141
00:47:08,160 --> 00:47:10,980
something which is like file pass DOT

1142
00:47:10,980 --> 00:47:13,140
clean safely or something like that and

1143
00:47:13,140 --> 00:47:14,579
then they can have this goes like rule

1144
00:47:14,579 --> 00:47:16,619
that say Hey you you should rather use

1145
00:47:16,619 --> 00:47:19,619
clean safely and if it breaks things

1146
00:47:19,619 --> 00:47:21,599
yeah just use a dangerous version and

1147
00:47:21,599 --> 00:47:23,160
beware

1148
00:47:23,160 --> 00:47:25,759
thank you

1149
00:47:43,859 --> 00:47:45,480
thank you for interesting uh

1150
00:47:45,480 --> 00:47:48,540
presentation said yesterday that of

1151
00:47:48,540 --> 00:47:50,460
course gravana dashboards a lot more

1152
00:47:50,460 --> 00:47:53,339
informative than kibana dashboards yeah

1153
00:47:53,339 --> 00:47:55,079
that's why we fought kibana of course

1154
00:47:55,079 --> 00:47:57,660
yeah we change recorders so and we don't

1155
00:47:57,660 --> 00:47:59,640
like pie charts

1156
00:47:59,640 --> 00:48:03,060
well said well said but Jokes Aside I'm

1157
00:48:03,060 --> 00:48:05,700
not a developer what I'm not what I

1158
00:48:05,700 --> 00:48:07,680
didn't get in your presentation and

1159
00:48:07,680 --> 00:48:10,619
please explain it like M5 is you have a

1160
00:48:10,619 --> 00:48:13,380
race condition in your code you fix the

1161
00:48:13,380 --> 00:48:17,160
race condition why would you need to run

1162
00:48:17,160 --> 00:48:19,619
performance test whatever you did

1163
00:48:19,619 --> 00:48:21,599
can't you prove that the race condition

1164
00:48:21,599 --> 00:48:23,400
is gone or could you change the

1165
00:48:23,400 --> 00:48:25,460
architecture so it's really gone because

1166
00:48:25,460 --> 00:48:28,020
it's for me it feels like you you don't

1167
00:48:28,020 --> 00:48:29,760
really trust your fix

1168
00:48:29,760 --> 00:48:32,400
yeah and that's true and and that's true

1169
00:48:32,400 --> 00:48:34,920
and and it's like basically with multi

1170
00:48:34,920 --> 00:48:38,040
shredding it's out to prove and if you

1171
00:48:38,040 --> 00:48:39,420
want to prove it

1172
00:48:39,420 --> 00:48:41,780
use rust basically and that's the only

1173
00:48:41,780 --> 00:48:45,119
the only solution like for me otherwise

1174
00:48:45,119 --> 00:48:48,359
it's really support either you need

1175
00:48:48,359 --> 00:48:51,000
support like limited programming

1176
00:48:51,000 --> 00:48:53,359
languages that are only focusing on

1177
00:48:53,359 --> 00:48:55,980
multi-threading and they are like let's

1178
00:48:55,980 --> 00:48:58,020
say rest condition proof

1179
00:48:58,020 --> 00:49:01,680
by Design but they are super hard to use

1180
00:49:01,680 --> 00:49:04,200
super super hard which means you're not

1181
00:49:04,200 --> 00:49:06,180
productive which means you will not be

1182
00:49:06,180 --> 00:49:09,119
able to deliver enough features uh uh

1183
00:49:09,119 --> 00:49:11,460
and all that uh

1184
00:49:11,460 --> 00:49:15,000
we've like I was like to be totally

1185
00:49:15,000 --> 00:49:15,960
honest

1186
00:49:15,960 --> 00:49:20,040
I think the original scene here is we

1187
00:49:20,040 --> 00:49:21,720
have too many custom authentication

1188
00:49:21,720 --> 00:49:23,040
logic

1189
00:49:23,040 --> 00:49:25,500
and maybe we shouldn't play with that

1190
00:49:25,500 --> 00:49:27,599
we've played with dangerous things and

1191
00:49:27,599 --> 00:49:30,540
we were not mastering them enough

1192
00:49:30,540 --> 00:49:31,920
so that's the cost of doing

1193
00:49:31,920 --> 00:49:34,920
multi-threading yeah okay thank you and

1194
00:49:34,920 --> 00:49:36,900
that's the cost of doing multi-threading

1195
00:49:36,900 --> 00:49:38,400
without realizing you're doing

1196
00:49:38,400 --> 00:49:41,300
multi-threading

1197
00:49:43,560 --> 00:49:45,560
um

1198
00:49:51,540 --> 00:49:53,900
thank you

1199
00:49:53,940 --> 00:49:56,660
foreign

1200
00:49:56,660 --> 00:49:59,280
thank you for the talk

1201
00:49:59,280 --> 00:50:02,819
um go the framework itself has a data

1202
00:50:02,819 --> 00:50:05,760
race detector it can have enabled with

1203
00:50:05,760 --> 00:50:08,040
good test minus race and but you

1204
00:50:08,040 --> 00:50:09,720
recommended another one so I would like

1205
00:50:09,720 --> 00:50:12,240
to know how it Compares and if you

1206
00:50:12,240 --> 00:50:14,540
prefer the other one because

1207
00:50:14,540 --> 00:50:17,640
data arrest detector was insufficient I

1208
00:50:17,640 --> 00:50:20,880
couldn't hear you well sorry uh sorry so

1209
00:50:20,880 --> 00:50:24,359
the go binary itself has a data race

1210
00:50:24,359 --> 00:50:26,760
detector yeah it cannot it cannot spot

1211
00:50:26,760 --> 00:50:31,079
it okay thank you we tried yeah uh but

1212
00:50:31,079 --> 00:50:33,720
it's like it can find obvious things

1213
00:50:33,720 --> 00:50:36,480
which is good because it catches if you

1214
00:50:36,480 --> 00:50:37,920
start doing multi-threading thing and

1215
00:50:37,920 --> 00:50:39,660
then you say yeah I don't get it I don't

1216
00:50:39,660 --> 00:50:41,819
even understand the error message like I

1217
00:50:41,819 --> 00:50:43,920
shouldn't play with it but this kind of

1218
00:50:43,920 --> 00:50:46,619
thing is much more subtle

1219
00:50:46,619 --> 00:50:49,559
that it cannot find it like basically it

1220
00:50:49,559 --> 00:50:51,599
runs forever and you you don't get any

1221
00:50:51,599 --> 00:50:54,680
results from it

1222
00:51:04,460 --> 00:51:07,920
well thank you for for your presentation

1223
00:51:07,920 --> 00:51:11,000
thank you for the talk

1224
00:51:12,000 --> 00:51:13,050
foreign

1225
00:51:13,050 --> 00:51:16,280
[Music]

