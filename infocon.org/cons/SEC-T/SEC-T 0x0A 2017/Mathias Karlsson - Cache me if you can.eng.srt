1
00:00:00,000 --> 00:00:05,040
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> my name is</font><font color="#E5E5E5"> Matthias</font><font color="#CCCCCC"> Sergei</font><font color="#E5E5E5"> of</font>

2
00:00:02,909 --> 00:00:05,548
<font color="#E5E5E5">living room and welcome to catch me if</font>

3
00:00:05,040 --> 00:00:08,610
you can

4
00:00:05,549 --> 00:00:11,370
today we are<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> caching</font>

5
00:00:08,610 --> 00:00:13,469
more specifically<font color="#E5E5E5"> something I call</font>

6
00:00:11,370 --> 00:00:16,100
offline caching<font color="#CCCCCC"> and</font><font color="#E5E5E5"> when I say offline</font>

7
00:00:13,469 --> 00:00:19,740
caching<font color="#E5E5E5"> in this talk what I mean is</font>

8
00:00:16,100 --> 00:00:22,470
features in web browsers<font color="#CCCCCC"> that allows web</font>

9
00:00:19,740 --> 00:00:25,890
servers<font color="#E5E5E5"> to tell the browser to store</font>

10
00:00:22,470 --> 00:00:28,619
<font color="#E5E5E5">this content in the browser's so that if</font>

11
00:00:25,890 --> 00:00:32,969
the user<font color="#E5E5E5"> goes offline they could still</font>

12
00:00:28,619 --> 00:00:34,829
view that<font color="#E5E5E5"> content and if you simply want</font>

13
00:00:32,969 --> 00:00:38,210
this kind of functionality<font color="#E5E5E5"> in</font><font color="#CCCCCC"> your</font>

14
00:00:34,829 --> 00:00:40,620
application<font color="#E5E5E5"> today</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> probably or maybe</font>

15
00:00:38,210 --> 00:00:42,719
<font color="#CCCCCC">gone</font><font color="#E5E5E5"> Google and</font><font color="#CCCCCC"> search</font><font color="#E5E5E5"> for offline</font>

16
00:00:40,620 --> 00:00:44,820
caching<font color="#E5E5E5"> and you'll find some stack</font>

17
00:00:42,719 --> 00:00:46,800
<font color="#E5E5E5">overflow threats that says that oh you</font>

18
00:00:44,820 --> 00:00:52,440
should use<font color="#E5E5E5"> something called service</font>

19
00:00:46,800 --> 00:00:54,870
workers<font color="#CCCCCC"> and service workers is something</font>

20
00:00:52,440 --> 00:00:58,199
that was introduced<font color="#E5E5E5"> just a few years ago</font>

21
00:00:54,870 --> 00:01:04,649
<font color="#E5E5E5">and it's basically a JavaScript file on</font>

22
00:00:58,199 --> 00:01:07,610
your domain that can act<font color="#CCCCCC"> as a proxy to</font>

23
00:01:04,650 --> 00:01:10,320
create<font color="#E5E5E5"> a</font><font color="#CCCCCC"> client-side the dynamic catch</font>

24
00:01:07,610 --> 00:01:12,720
so that when the web browser makes a

25
00:01:10,320 --> 00:01:15,750
request<font color="#E5E5E5"> before it's actually actually</font>

26
00:01:12,720 --> 00:01:18,840
<font color="#E5E5E5">sent to the</font><font color="#CCCCCC"> server it has to go through</font>

27
00:01:15,750 --> 00:01:20,430
<font color="#E5E5E5">with the</font><font color="#CCCCCC"> the service worker so then the</font>

28
00:01:18,840 --> 00:01:22,380
server<font color="#CCCCCC"> JavaScript in a service worker</font>

29
00:01:20,430 --> 00:01:27,030
can decide if<font color="#E5E5E5"> you should respond from</font>

30
00:01:22,380 --> 00:01:31,100
<font color="#E5E5E5">the cache</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> if you should</font><font color="#CCCCCC"> or if you</font>

31
00:01:27,030 --> 00:01:34,650
should send the<font color="#CCCCCC"> actual request attach it</font>

32
00:01:31,100 --> 00:01:36,570
and<font color="#E5E5E5"> this is very handy</font><font color="#CCCCCC"> because since</font>

33
00:01:34,650 --> 00:01:38,520
this was will always be called<font color="#E5E5E5"> first and</font>

34
00:01:36,570 --> 00:01:40,439
this service<font color="#CCCCCC"> worker will be stored on</font>

35
00:01:38,520 --> 00:01:41,880
the<font color="#CCCCCC"> client in</font><font color="#E5E5E5"> the browser that means</font>

36
00:01:40,439 --> 00:01:44,610
that even<font color="#E5E5E5"> if you pull the plug or</font>

37
00:01:41,880 --> 00:01:48,030
<font color="#CCCCCC">disconnect from the Wi-Fi</font><font color="#E5E5E5"> the service</font>

38
00:01:44,610 --> 00:01:49,500
worker can still give you content<font color="#E5E5E5"> so</font><font color="#CCCCCC"> at</font>

39
00:01:48,030 --> 00:01:51,119
the service work you can say like<font color="#E5E5E5"> oh you</font>

40
00:01:49,500 --> 00:01:53,100
seem to be offline so that I'm gonna

41
00:01:51,119 --> 00:01:57,149
<font color="#E5E5E5">serve this hey you can't use this app</font>

42
00:01:53,100 --> 00:01:59,820
when you're offline<font color="#CCCCCC"> page</font><font color="#E5E5E5"> France Rosen</font>

43
00:01:57,149 --> 00:02:01,920
and I started<font color="#CCCCCC"> digging into this in the</font>

44
00:01:59,820 --> 00:02:05,219
<font color="#E5E5E5">beginning beginning of this year and we</font>

45
00:02:01,920 --> 00:02:07,950
didn't really come to a lot<font color="#E5E5E5"> of exciting</font>

46
00:02:05,219 --> 00:02:09,660
findings<font color="#E5E5E5"> about this more than just</font>

47
00:02:07,950 --> 00:02:11,879
saying<font color="#E5E5E5"> that it seems</font><font color="#CCCCCC"> like this</font><font color="#E5E5E5"> has been</font>

48
00:02:09,660 --> 00:02:13,829
implemented with security in mind<font color="#CCCCCC"> at</font>

49
00:02:11,879 --> 00:02:16,049
least from what we could tell

50
00:02:13,830 --> 00:02:19,770
for instance<font color="#E5E5E5"> the</font><font color="#CCCCCC"> service worker</font>

51
00:02:16,050 --> 00:02:21,840
<font color="#CCCCCC">JavaScript's</font><font color="#E5E5E5"> they have to be served with</font>

52
00:02:19,770 --> 00:02:24,210
<font color="#CCCCCC">content-type</font><font color="#E5E5E5"> application</font><font color="#CCCCCC"> javascript</font><font color="#E5E5E5"> you</font>

53
00:02:21,840 --> 00:02:28,080
can<font color="#CCCCCC"> just use a text file for example</font><font color="#E5E5E5"> and</font>

54
00:02:24,210 --> 00:02:31,920
if you want to use the<font color="#CCCCCC"> cache on the</font>

55
00:02:28,080 --> 00:02:36,180
entire region<font color="#CCCCCC"> the</font><font color="#E5E5E5"> JavaScript file must</font>

56
00:02:31,920 --> 00:02:41,040
<font color="#E5E5E5">be placed in the root of the region so</font>

57
00:02:36,180 --> 00:02:46,620
in example.com<font color="#E5E5E5"> slash blood is instead of</font>

58
00:02:41,040 --> 00:02:50,149
slash hello / blockages<font color="#E5E5E5"> so you know we</font>

59
00:02:46,620 --> 00:02:53,930
thought<font color="#CCCCCC"> happens but once</font><font color="#E5E5E5"> it happens</font>

60
00:02:50,150 --> 00:02:58,020
<font color="#E5E5E5">you should keep digging until</font><font color="#CCCCCC"> it happens</font>

61
00:02:53,930 --> 00:03:00,630
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we found that before service workers</font>

62
00:02:58,020 --> 00:03:02,550
was a thing that<font color="#CCCCCC"> was actually</font><font color="#E5E5E5"> a similar</font>

63
00:03:00,630 --> 00:03:04,710
functionality<font color="#E5E5E5"> it worked in a completely</font>

64
00:03:02,550 --> 00:03:10,170
<font color="#E5E5E5">different way but it's called the</font>

65
00:03:04,710 --> 00:03:12,000
<font color="#E5E5E5">application cache and it has two two</font>

66
00:03:10,170 --> 00:03:15,299
features<font color="#E5E5E5"> you can tell the browser to</font>

67
00:03:12,000 --> 00:03:17,520
cache specific content for online<font color="#CCCCCC"> use</font><font color="#E5E5E5"> so</font>

68
00:03:15,300 --> 00:03:20,040
<font color="#E5E5E5">that if you know it like these files</font>

69
00:03:17,520 --> 00:03:23,280
ours will always be static you can force

70
00:03:20,040 --> 00:03:27,660
catch them on the<font color="#E5E5E5"> in the web browser and</font>

71
00:03:23,280 --> 00:03:29,550
it also has an a fallback functionality

72
00:03:27,660 --> 00:03:31,410
<font color="#E5E5E5">so that if the web browser is offline</font>

73
00:03:29,550 --> 00:03:34,770
<font color="#CCCCCC">you can say then you should always serve</font>

74
00:03:31,410 --> 00:03:38,700
this file and how you implement<font color="#CCCCCC"> this</font>

75
00:03:34,770 --> 00:03:40,920
technically is simply like this<font color="#E5E5E5"> on your</font>

76
00:03:38,700 --> 00:03:45,600
HTML tag<font color="#CCCCCC"> you set a manifest attribute</font>

77
00:03:40,920 --> 00:03:48,809
<font color="#E5E5E5">pointing to a file and the syntax of</font>

78
00:03:45,600 --> 00:03:51,209
<font color="#E5E5E5">application cache looks like this it</font>

79
00:03:48,810 --> 00:03:53,730
needs<font color="#E5E5E5"> to start with cache manifest and</font>

80
00:03:51,209 --> 00:03:56,010
then you had the cache directive which

81
00:03:53,730 --> 00:03:57,959
yes says<font color="#E5E5E5"> to the browser hey you should</font>

82
00:03:56,010 --> 00:04:00,840
fetch<font color="#E5E5E5"> these resources and store them in</font>

83
00:03:57,959 --> 00:04:03,630
<font color="#E5E5E5">the offline cache and then you have the</font>

84
00:04:00,840 --> 00:04:08,070
fallback directive which is that if the

85
00:04:03,630 --> 00:04:10,680
user is of<font color="#CCCCCC"> offline then everything under</font>

86
00:04:08,070 --> 00:04:13,650
<font color="#E5E5E5">slash in this example will serve sorry</font>

87
00:04:10,680 --> 00:04:17,970
you're offline dot HTML and last it has

88
00:04:13,650 --> 00:04:20,730
<font color="#E5E5E5">the network part which simply says these</font>

89
00:04:17,970 --> 00:04:26,100
rules<font color="#E5E5E5"> should apply to these protocols so</font>

90
00:04:20,730 --> 00:04:27,750
star will be HTTP<font color="#CCCCCC"> HTTPS etc but we found</font>

91
00:04:26,100 --> 00:04:30,660
something<font color="#E5E5E5"> very interesting</font>

92
00:04:27,750 --> 00:04:34,320
about the fallback directive which is

93
00:04:30,660 --> 00:04:37,710
this it's<font color="#E5E5E5"> not it wasn't quite</font><font color="#CCCCCC"> true that</font>

94
00:04:34,320 --> 00:04:38,760
<font color="#E5E5E5">this was only used when the web browser</font>

95
00:04:37,710 --> 00:04:40,859
was offline

96
00:04:38,760 --> 00:04:44,520
it would also trigger when the<font color="#E5E5E5"> web</font>

97
00:04:40,860 --> 00:04:47,550
browser was online<font color="#E5E5E5"> and the web server</font>

98
00:04:44,520 --> 00:04:52,590
responded with an error<font color="#E5E5E5"> code like 404 or</font>

99
00:04:47,550 --> 00:04:58,590
<font color="#CCCCCC">403 etc and because of that we could</font>

100
00:04:52,590 --> 00:05:01,679
draw this conclusion<font color="#E5E5E5"> which was well if</font>

101
00:04:58,590 --> 00:05:03,900
we could<font color="#E5E5E5"> upload an HTML file and a txt</font>

102
00:05:01,680 --> 00:05:08,220
file on the domain then<font color="#E5E5E5"> we could hijack</font>

103
00:05:03,900 --> 00:05:11,010
<font color="#CCCCCC">all the 404 pages but it's like if I can</font>

104
00:05:08,220 --> 00:05:13,200
upload<font color="#E5E5E5"> an HTML file on your domain then</font>

105
00:05:11,010 --> 00:05:16,320
maybe you<font color="#E5E5E5"> have worse problems</font><font color="#CCCCCC"> than cache</font>

106
00:05:13,200 --> 00:05:20,789
poisoning so back to the drawing<font color="#CCCCCC"> board</font>

107
00:05:16,320 --> 00:05:24,990
<font color="#CCCCCC">and so we've tried to find different</font>

108
00:05:20,790 --> 00:05:27,210
ways<font color="#E5E5E5"> to apply this to to application and</font>

109
00:05:24,990 --> 00:05:30,630
we<font color="#E5E5E5"> found one pretty interesting way</font>

110
00:05:27,210 --> 00:05:34,349
<font color="#CCCCCC">because the way that a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of modern</font>

111
00:05:30,630 --> 00:05:36,780
services allow users to<font color="#CCCCCC"> upload the</font>

112
00:05:34,350 --> 00:05:39,260
content is<font color="#E5E5E5"> that instead</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> putting it on</font>

113
00:05:36,780 --> 00:05:42,750
<font color="#E5E5E5">your web server for instance they'd use</font>

114
00:05:39,260 --> 00:05:48,659
an external cloud service like Amazon s3

115
00:05:42,750 --> 00:05:56,370
for<font color="#E5E5E5"> example and so that has some</font>

116
00:05:48,660 --> 00:05:58,590
<font color="#CCCCCC">interesting parts yeah and so a common</font>

117
00:05:56,370 --> 00:06:00,870
<font color="#CCCCCC">pattern that we saw which was</font>

118
00:05:58,590 --> 00:06:03,780
exploitable<font color="#CCCCCC"> ennum I will show you was</font>

119
00:06:00,870 --> 00:06:06,540
this us or someone<font color="#E5E5E5"> as a user would</font>

120
00:06:03,780 --> 00:06:08,789
<font color="#E5E5E5">upload a file to the server</font><font color="#CCCCCC"> the web</font>

121
00:06:06,540 --> 00:06:12,570
<font color="#E5E5E5">server will put it in a cloud</font><font color="#CCCCCC"> storage</font>

122
00:06:08,790 --> 00:06:14,130
such as s3 and then because the

123
00:06:12,570 --> 00:06:16,620
application doesn't<font color="#CCCCCC"> want anyone</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> read</font>

124
00:06:14,130 --> 00:06:18,830
these<font color="#E5E5E5"> files they will link to the files</font>

125
00:06:16,620 --> 00:06:22,080
with something called a sign you are<font color="#CCCCCC"> l</font>

126
00:06:18,830 --> 00:06:26,250
<font color="#E5E5E5">yeah and basically what that</font><font color="#CCCCCC"> means is</font>

127
00:06:22,080 --> 00:06:29,370
that you<font color="#CCCCCC"> have some secret key in the</font>

128
00:06:26,250 --> 00:06:31,080
query parameter of the link so for the

129
00:06:29,370 --> 00:06:35,340
<font color="#E5E5E5">Amazon</font><font color="#CCCCCC"> s3</font><font color="#E5E5E5"> case it would look</font><font color="#CCCCCC"> like this</font>

130
00:06:31,080 --> 00:06:39,840
Amazon s3 Amazon AWS<font color="#E5E5E5"> com</font><font color="#CCCCCC"> then the bucket</font>

131
00:06:35,340 --> 00:06:41,549
<font color="#CCCCCC">ID and then the file path and then</font>

132
00:06:39,840 --> 00:06:43,799
question mark<font color="#E5E5E5"> and then the same</font>

133
00:06:41,550 --> 00:06:46,340
if you would<font color="#E5E5E5"> request this file with the</font>

134
00:06:43,800 --> 00:06:51,810
signature<font color="#E5E5E5"> this PDF would download</font>

135
00:06:46,340 --> 00:06:54,690
<font color="#E5E5E5">without</font><font color="#CCCCCC"> a signature you can view it so</font>

136
00:06:51,810 --> 00:06:58,139
how do<font color="#E5E5E5"> we combine these</font><font color="#CCCCCC"> two to steal</font>

137
00:06:54,690 --> 00:07:04,740
<font color="#E5E5E5">people's files</font><font color="#CCCCCC"> well since this is a</font>

138
00:06:58,139 --> 00:07:07,470
shared service s3<font color="#E5E5E5"> anyone can create an</font>

139
00:07:04,740 --> 00:07:10,979
s3 bucket<font color="#E5E5E5"> and upload stuff there so what</font>

140
00:07:07,470 --> 00:07:16,349
if we upload our cache manifest<font color="#E5E5E5"> on s3</font>

141
00:07:10,979 --> 00:07:18,060
<font color="#E5E5E5">and say that well every file that it</font>

142
00:07:16,349 --> 00:07:21,240
gives<font color="#E5E5E5"> a failing</font><font color="#CCCCCC"> error code or if</font><font color="#E5E5E5"> the</font>

143
00:07:18,060 --> 00:07:24,569
users of line<font color="#CCCCCC"> you</font><font color="#E5E5E5"> should actually serve</font>

144
00:07:21,240 --> 00:07:28,919
our attack file in<font color="#E5E5E5"> a completely</font>

145
00:07:24,569 --> 00:07:31,470
different pocket for all networks well

146
00:07:28,919 --> 00:07:34,289
that works and<font color="#E5E5E5"> that's nice</font><font color="#CCCCCC"> because then</font>

147
00:07:31,470 --> 00:07:38,009
after they have<font color="#CCCCCC"> view this page every 404</font>

148
00:07:34,289 --> 00:07:39,628
page<font color="#E5E5E5"> on s3 will give us our file</font><font color="#CCCCCC"> but</font>

149
00:07:38,009 --> 00:07:43,620
there's<font color="#E5E5E5"> one problem with this and it's</font>

150
00:07:39,629 --> 00:07:45,780
that the good stuff<font color="#E5E5E5"> will not</font><font color="#CCCCCC"> actually</font>

151
00:07:43,620 --> 00:07:50,340
return 404<font color="#E5E5E5"> because when they go to these</font>

152
00:07:45,780 --> 00:07:53,369
signed URLs<font color="#CCCCCC"> it will return</font><font color="#E5E5E5"> 200 so we</font>

153
00:07:50,340 --> 00:07:56,609
<font color="#CCCCCC">thought</font><font color="#E5E5E5"> maybe we can force Amazon to</font>

154
00:07:53,370 --> 00:07:57,840
give failure codes<font color="#E5E5E5"> on everything</font><font color="#CCCCCC"> even if</font>

155
00:07:56,610 --> 00:08:01,199
the file<font color="#CCCCCC"> actually exists</font><font color="#E5E5E5"> and the</font>

156
00:07:57,840 --> 00:08:03,599
signature<font color="#E5E5E5"> is correct and you can because</font>

157
00:08:01,199 --> 00:08:06,529
you can<font color="#E5E5E5"> use something called a cookie</font>

158
00:08:03,599 --> 00:08:10,830
<font color="#CCCCCC">bump</font><font color="#E5E5E5"> and it's a pretty simple</font><font color="#CCCCCC"> concept</font>

159
00:08:06,529 --> 00:08:12,870
<font color="#E5E5E5">basically you fill the cookie or by a</font>

160
00:08:10,830 --> 00:08:15,779
<font color="#CCCCCC">JavaScript like this so in this you have</font>

161
00:08:12,870 --> 00:08:17,819
<font color="#CCCCCC">a script</font><font color="#E5E5E5"> I create 10,000 cookies and</font>

162
00:08:15,779 --> 00:08:20,699
<font color="#E5E5E5">fill them all with a thousand ace and</font>

163
00:08:17,819 --> 00:08:22,680
what happens<font color="#CCCCCC"> after this is that's</font>

164
00:08:20,699 --> 00:08:25,770
because<font color="#E5E5E5"> cookies are automatically added</font>

165
00:08:22,680 --> 00:08:28,440
<font color="#CCCCCC">to subsequent requests the origin that</font>

166
00:08:25,770 --> 00:08:31,080
they are set on every request<font color="#CCCCCC"> after they</font>

167
00:08:28,440 --> 00:08:34,500
view this will contain<font color="#CCCCCC"> like a shitload</font>

168
00:08:31,080 --> 00:08:36,449
of cookies and a lot of<font color="#CCCCCC"> servers</font><font color="#E5E5E5"> don't</font>

169
00:08:34,500 --> 00:08:39,078
like that<font color="#E5E5E5"> so they would say like hey</font>

170
00:08:36,450 --> 00:08:43,800
<font color="#CCCCCC">request to large</font><font color="#E5E5E5"> or bad request or you</font>

171
00:08:39,078 --> 00:08:46,800
<font color="#CCCCCC">guessed it an error code</font><font color="#E5E5E5"> so this is how</font>

172
00:08:43,799 --> 00:08:48,449
it looks for Amazon s3<font color="#CCCCCC"> I don't know how</font>

173
00:08:46,800 --> 00:08:50,069
well you<font color="#CCCCCC"> can see but the scroll bar over</font>

174
00:08:48,450 --> 00:08:52,840
there<font color="#E5E5E5"> is pretty small so</font><font color="#CCCCCC"> you can</font><font color="#E5E5E5"> imagine</font>

175
00:08:50,070 --> 00:08:58,690
it's yeah it's pretty<font color="#E5E5E5"> large</font>

176
00:08:52,840 --> 00:09:02,890
and the response looks<font color="#E5E5E5"> like this perfect</font>

177
00:08:58,690 --> 00:09:05,350
that<font color="#E5E5E5"> means HTML manifest on</font><font color="#CCCCCC"> our shared</font>

178
00:09:02,890 --> 00:09:07,330
storage service plus cookie bump<font color="#E5E5E5"> means</font>

179
00:09:05,350 --> 00:09:10,240
that<font color="#E5E5E5"> we can complete the</font><font color="#CCCCCC"> Poisson</font><font color="#E5E5E5"> the</font>

180
00:09:07,330 --> 00:09:11,890
domain on and all the rest or all the

181
00:09:10,240 --> 00:09:15,490
following requests will serve our file

182
00:09:11,890 --> 00:09:17,680
instead and so if you have<font color="#E5E5E5"> been with me</font>

183
00:09:15,490 --> 00:09:20,230
<font color="#CCCCCC">you could understand that</font><font color="#E5E5E5"> the attack</font>

184
00:09:17,680 --> 00:09:22,140
pattern to steal people sign files<font color="#E5E5E5"> would</font>

185
00:09:20,230 --> 00:09:25,510
look like this

186
00:09:22,140 --> 00:09:27,819
first we cookie bomb them<font color="#E5E5E5"> and put the</font>

187
00:09:25,510 --> 00:09:30,160
HTML<font color="#E5E5E5"> manifest so that s3 will always</font>

188
00:09:27,820 --> 00:09:34,630
serve<font color="#E5E5E5"> I'll file and then when the</font><font color="#CCCCCC"> user</font>

189
00:09:30,160 --> 00:09:36,910
clicks<font color="#E5E5E5"> design link s3</font><font color="#CCCCCC"> or actually</font><font color="#E5E5E5"> their</font>

190
00:09:34,630 --> 00:09:39,880
poison cache will serve our file instead

191
00:09:36,910 --> 00:09:42,100
<font color="#E5E5E5">and from that file we can read the</font>

192
00:09:39,880 --> 00:09:43,839
<font color="#E5E5E5">signature from</font><font color="#CCCCCC"> the URL</font><font color="#E5E5E5"> and then we have</font>

193
00:09:42,100 --> 00:09:49,690
stolen the signature and<font color="#E5E5E5"> we can download</font>

194
00:09:43,839 --> 00:09:53,529
their private file so yeah<font color="#E5E5E5"> if you are</font>

195
00:09:49,690 --> 00:09:59,380
anything<font color="#CCCCCC"> like me</font><font color="#E5E5E5"> okay that looks like</font>

196
00:09:53,529 --> 00:10:00,210
crap<font color="#CCCCCC"> but</font><font color="#E5E5E5"> I have a demo if the demo gods</font>

197
00:09:59,380 --> 00:10:11,439
<font color="#E5E5E5">are with me</font>

198
00:10:00,210 --> 00:10:14,470
<font color="#E5E5E5">oh okay can I do this yeah kind of</font>

199
00:10:11,440 --> 00:10:16,900
<font color="#E5E5E5">so here we run on Amazon and this is</font>

200
00:10:14,470 --> 00:10:20,440
<font color="#CCCCCC">secti example bucket and then I</font><font color="#E5E5E5"> just</font>

201
00:10:16,900 --> 00:10:25,209
<font color="#CCCCCC">made a fake signature and example dot 60</font>

202
00:10:20,440 --> 00:10:32,710
and then we go and visit<font color="#E5E5E5"> this little fun</font>

203
00:10:25,210 --> 00:10:34,900
URL and then when we go back it's not

204
00:10:32,710 --> 00:10:38,770
<font color="#CCCCCC">the</font><font color="#E5E5E5"> tasty file anymore because it's my</font>

205
00:10:34,900 --> 00:10:44,579
HTML<font color="#E5E5E5"> file and we</font><font color="#CCCCCC"> can also see that</font><font color="#E5E5E5"> no</font>

206
00:10:38,770 --> 00:10:48,750
<font color="#E5E5E5">matter what we try to request here</font>

207
00:10:44,580 --> 00:10:48,750
it's our file that will be<font color="#E5E5E5"> served</font>

208
00:10:50,610 --> 00:10:55,809
[Applause]

209
00:10:52,650 --> 00:10:55,809
[Music]

210
00:11:05,130 --> 00:11:11,950
so to end<font color="#E5E5E5"> this you might think</font><font color="#CCCCCC"> like well</font>

211
00:11:10,030 --> 00:11:15,990
if the browser's had secured in mind and

212
00:11:11,950 --> 00:11:18,520
they<font color="#CCCCCC"> implemented this directory based</font>

213
00:11:15,990 --> 00:11:21,630
control force of service workers

214
00:11:18,520 --> 00:11:27,250
shouldn't<font color="#CCCCCC"> they kind of</font><font color="#E5E5E5"> back port that to</font>

215
00:11:21,630 --> 00:11:29,830
to app cache<font color="#E5E5E5"> and I think you're right</font><font color="#CCCCCC"> if</font>

216
00:11:27,250 --> 00:11:33,670
you<font color="#CCCCCC"> think that and that's in</font><font color="#E5E5E5"> fact</font>

217
00:11:29,830 --> 00:11:40,260
exactly<font color="#E5E5E5"> what</font><font color="#CCCCCC"> Chrome has done</font><font color="#E5E5E5"> Firefox has</font>

218
00:11:33,670 --> 00:11:45,939
done<font color="#E5E5E5"> Safari will do what haven't yet and</font>

219
00:11:40,260 --> 00:11:50,530
yeah<font color="#E5E5E5"> III know it's almost sarcastic but</font>

220
00:11:45,940 --> 00:11:52,000
<font color="#CCCCCC">internet explorer said that because app</font>

221
00:11:50,530 --> 00:11:54,640
cache is deprecated we will not consider

222
00:11:52,000 --> 00:11:58,180
<font color="#E5E5E5">it for a secure to release but we are</font>

223
00:11:54,640 --> 00:12:00,730
considering fixing it and are fixing<font color="#E5E5E5"> the</font>

224
00:11:58,180 --> 00:12:03,780
issue in a future release<font color="#CCCCCC"> and what that</font>

225
00:12:00,730 --> 00:12:06,910
means<font color="#CCCCCC"> I'll let you be the judge of that</font>

226
00:12:03,780 --> 00:12:08,610
<font color="#E5E5E5">so yeah that's all I wanted</font><font color="#CCCCCC"> to present</font>

227
00:12:06,910 --> 00:12:14,419
<font color="#CCCCCC">today</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> very much</font>

228
00:12:08,610 --> 00:12:14,419
[Applause]

