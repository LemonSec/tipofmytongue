1
00:00:00,079 --> 00:00:05,370
yes<font color="#CCCCCC"> hello everyone my name is Karl</font><font color="#E5E5E5"> and</font>

2
00:00:03,540 --> 00:00:07,859
I'm going to<font color="#E5E5E5"> talk a little bit about an</font>

3
00:00:05,370 --> 00:00:11,150
authenticated encryption<font color="#CCCCCC"> what it is and</font>

4
00:00:07,859 --> 00:00:13,950
what problems it<font color="#E5E5E5"> can lead</font><font color="#CCCCCC"> to in practice</font>

5
00:00:11,150 --> 00:00:17,400
<font color="#CCCCCC">super</font><font color="#E5E5E5"> quick about</font><font color="#CCCCCC"> myself</font><font color="#E5E5E5"> my name is Karl</font>

6
00:00:13,950 --> 00:00:19,740
I'm 26 years old<font color="#CCCCCC"> I'm a</font><font color="#E5E5E5"> master's computer</font>

7
00:00:17,400 --> 00:00:21,570
science from<font color="#E5E5E5"> kth in Stockholm and I</font>

8
00:00:19,740 --> 00:00:24,140
<font color="#E5E5E5">currently work as the head of</font><font color="#CCCCCC"> security</font>

9
00:00:21,570 --> 00:00:28,230
<font color="#E5E5E5">at</font><font color="#CCCCCC"> Korea</font><font color="#E5E5E5"> we are</font><font color="#CCCCCC"> revolutionizing</font>

10
00:00:24,140 --> 00:00:31,140
<font color="#CCCCCC">healthcare</font><font color="#E5E5E5"> and I'm a frequent CTF player</font>

11
00:00:28,230 --> 00:00:33,030
for the mostly<font color="#E5E5E5"> Swedish team hacking for</font>

12
00:00:31,140 --> 00:00:34,980
sodium if you want to reach<font color="#E5E5E5"> me</font>

13
00:00:33,030 --> 00:00:42,270
<font color="#E5E5E5">afterwards you can use any of these</font>

14
00:00:34,980 --> 00:00:46,589
<font color="#E5E5E5">methods</font><font color="#CCCCCC"> so let's jump into</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> okay</font>

15
00:00:42,270 --> 00:00:49,950
<font color="#E5E5E5">cryptography is a very broad field and</font>

16
00:00:46,590 --> 00:00:53,460
you can<font color="#CCCCCC"> use cryptography to accomplish a</font>

17
00:00:49,950 --> 00:00:55,980
lot<font color="#CCCCCC"> of different</font><font color="#E5E5E5"> things where you know</font>

18
00:00:53,460 --> 00:00:58,350
<font color="#E5E5E5">smart people have developed used math to</font>

19
00:00:55,980 --> 00:01:01,800
<font color="#E5E5E5">develop algorithms to perform various</font>

20
00:00:58,350 --> 00:01:03,750
tasks<font color="#E5E5E5"> the most common and first you</font>

21
00:01:01,800 --> 00:01:08,100
think<font color="#E5E5E5"> of when you think cryptography is</font>

22
00:01:03,750 --> 00:01:12,270
to encrypt to hide data<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you can do</font>

23
00:01:08,100 --> 00:01:15,330
other<font color="#CCCCCC"> things as well</font><font color="#E5E5E5"> to sign it or</font>

24
00:01:12,270 --> 00:01:20,750
verify that the<font color="#CCCCCC"> data has been created by</font>

25
00:01:15,330 --> 00:01:23,520
<font color="#CCCCCC">a certain person and so on</font><font color="#E5E5E5"> and these</font>

26
00:01:20,750 --> 00:01:25,290
cryptographic properties are often

27
00:01:23,520 --> 00:01:27,750
accomplished by<font color="#E5E5E5"> separate algorithm</font>

28
00:01:25,290 --> 00:01:31,200
algorithms which<font color="#CCCCCC"> can be used and mixed</font>

29
00:01:27,750 --> 00:01:34,350
and match<font color="#E5E5E5"> as individual modules so</font>

30
00:01:31,200 --> 00:01:38,880
unauthenticated<font color="#E5E5E5"> encryption is what</font>

31
00:01:34,350 --> 00:01:41,369
happens when you use<font color="#E5E5E5"> the confidentiality</font>

32
00:01:38,880 --> 00:01:45,060
property that is you hide the data

33
00:01:41,369 --> 00:01:47,970
without authenticating that the

34
00:01:45,060 --> 00:01:49,740
encrypted data has not<font color="#E5E5E5"> been</font><font color="#CCCCCC"> modified so</font>

35
00:01:47,970 --> 00:01:54,240
there are various weights<font color="#E5E5E5"> to encrypt</font>

36
00:01:49,740 --> 00:01:56,399
data<font color="#CCCCCC"> typically you divide</font><font color="#E5E5E5"> into broad two</font>

37
00:01:54,240 --> 00:01:58,860
broad categories<font color="#CCCCCC"> block ciphers and</font>

38
00:01:56,399 --> 00:02:02,310
<font color="#E5E5E5">stream ciphers and I'm going to talked</font>

39
00:01:58,860 --> 00:02:05,850
about one specific block cipher in this

40
00:02:02,310 --> 00:02:08,970
case so you<font color="#CCCCCC"> have or actually this</font>

41
00:02:05,850 --> 00:02:11,670
<font color="#E5E5E5">applies to to most block ciphers in</font>

42
00:02:08,970 --> 00:02:13,560
general<font color="#CCCCCC"> but the most common one by far</font>

43
00:02:11,670 --> 00:02:15,739
<font color="#E5E5E5">is a yes</font>

44
00:02:13,560 --> 00:02:20,490
which is a block cipher<font color="#E5E5E5"> and that means</font>

45
00:02:15,740 --> 00:02:24,450
<font color="#E5E5E5">it's used to decrypt one block of data</font>

46
00:02:20,490 --> 00:02:26,370
<font color="#E5E5E5">in a case of a su encrypt 16 bytes at a</font>

47
00:02:24,450 --> 00:02:28,470
time<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> only thing</font><font color="#CCCCCC"> a s can</font>

48
00:02:26,370 --> 00:02:30,710
do it can encrypt 16 bytes of data<font color="#E5E5E5"> no</font>

49
00:02:28,470 --> 00:02:34,830
more no less

50
00:02:30,710 --> 00:02:36,150
so it's a very<font color="#E5E5E5"> good algorithm you use it</font>

51
00:02:34,830 --> 00:02:38,430
together<font color="#E5E5E5"> with the key to encrypt your</font>

52
00:02:36,150 --> 00:02:41,390
<font color="#E5E5E5">data you can only decrypt it</font><font color="#CCCCCC"> if you have</font>

53
00:02:38,430 --> 00:02:46,800
the key<font color="#E5E5E5"> and there are no known practical</font>

54
00:02:41,390 --> 00:02:49,380
attacks<font color="#E5E5E5"> but often you want to crypt more</font>

55
00:02:46,800 --> 00:02:54,270
than<font color="#E5E5E5"> 16 bytes of data so what you do</font>

56
00:02:49,380 --> 00:02:57,090
<font color="#CCCCCC">then you</font><font color="#E5E5E5"> use some kind of what's called</font>

57
00:02:54,270 --> 00:02:59,160
a block cipher mode where you<font color="#CCCCCC"> chain</font>

58
00:02:57,090 --> 00:03:02,190
together<font color="#E5E5E5"> multiple</font><font color="#CCCCCC"> users</font><font color="#E5E5E5"> of this</font>

59
00:02:59,160 --> 00:03:06,090
algorithm<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to encrypt larger</font>

60
00:03:02,190 --> 00:03:10,320
pieces<font color="#CCCCCC"> of data in a secure</font><font color="#E5E5E5"> fashion so</font>

61
00:03:06,090 --> 00:03:13,380
one very<font color="#CCCCCC"> common such mode is the</font><font color="#E5E5E5"> CBC</font>

62
00:03:10,320 --> 00:03:15,989
mode<font color="#E5E5E5"> the cipher block chaining mode and</font>

63
00:03:13,380 --> 00:03:19,590
this<font color="#E5E5E5"> is a diagram of the encryption and</font>

64
00:03:15,990 --> 00:03:23,040
decryption<font color="#E5E5E5"> under CBC so basically what</font>

65
00:03:19,590 --> 00:03:26,100
you do<font color="#CCCCCC"> is the ciphertext you get from</font>

66
00:03:23,040 --> 00:03:28,140
encrypting one block is<font color="#E5E5E5"> X sort into the</font>

67
00:03:26,100 --> 00:03:31,260
plain text<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the next block</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then</font>

68
00:03:28,140 --> 00:03:34,679
encrypted and conversely when<font color="#E5E5E5"> you</font>

69
00:03:31,260 --> 00:03:37,170
decrypt<font color="#CCCCCC"> after you have decrypt the crypt</font>

70
00:03:34,680 --> 00:03:43,130
of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> block</font><font color="#CCCCCC"> you XOR it with the cipher</font>

71
00:03:37,170 --> 00:03:46,738
<font color="#E5E5E5">text of the previous block so and this</font>

72
00:03:43,130 --> 00:03:50,760
is fine for for encrypting<font color="#CCCCCC"> and</font>

73
00:03:46,739 --> 00:03:54,959
decrypting data<font color="#CCCCCC"> but there is no way for</font>

74
00:03:50,760 --> 00:03:57,780
<font color="#E5E5E5">this algorithm</font><font color="#CCCCCC"> to tell if this data</font><font color="#E5E5E5"> that</font>

75
00:03:54,959 --> 00:04:00,900
you feed it has been created<font color="#CCCCCC"> by it</font><font color="#E5E5E5"> with</font>

76
00:03:57,780 --> 00:04:04,019
this key or or so because<font color="#CCCCCC"> I mean it</font>

77
00:04:00,900 --> 00:04:06,209
could potentially<font color="#E5E5E5"> generate any data from</font>

78
00:04:04,019 --> 00:04:08,790
the encryption algorithm<font color="#E5E5E5"> so basically it</font>

79
00:04:06,209 --> 00:04:12,900
<font color="#E5E5E5">has to accept all input and then there</font>

80
00:04:08,790 --> 00:04:15,269
<font color="#E5E5E5">might be</font><font color="#CCCCCC"> problems or I mean ways to to</font>

81
00:04:12,900 --> 00:04:18,060
decide<font color="#E5E5E5"> afterwards</font><font color="#CCCCCC"> if this was actually a</font>

82
00:04:15,269 --> 00:04:21,418
valid<font color="#CCCCCC"> message or not</font><font color="#E5E5E5"> but that usually</font>

83
00:04:18,060 --> 00:04:24,240
<font color="#E5E5E5">leads to trouble as we'll see and Moxie</font>

84
00:04:21,418 --> 00:04:26,580
Marlinspike<font color="#CCCCCC"> famous</font>

85
00:04:24,240 --> 00:04:28,979
security guy he coined the<font color="#CCCCCC"> cryptographic</font>

86
00:04:26,580 --> 00:04:30,539
doom principle<font color="#E5E5E5"> which basically states</font>

87
00:04:28,979 --> 00:04:32,758
that if you perform<font color="#E5E5E5"> any kind of</font>

88
00:04:30,539 --> 00:04:36,210
operation on encrypted data before

89
00:04:32,759 --> 00:04:43,289
verifying its integrity<font color="#CCCCCC"> it will lead to</font>

90
00:04:36,210 --> 00:04:44,880
<font color="#CCCCCC">certain</font><font color="#E5E5E5"> doom so one such problem can be</font>

91
00:04:43,289 --> 00:04:47,370
exploited with what's called<font color="#E5E5E5"> a bit</font>

92
00:04:44,880 --> 00:04:54,960
<font color="#CCCCCC">flippin attack</font><font color="#E5E5E5"> so if we think</font><font color="#CCCCCC"> back to</font>

93
00:04:47,370 --> 00:04:57,630
<font color="#E5E5E5">this</font><font color="#CCCCCC"> the CBC decryption</font><font color="#E5E5E5"> scheme we at the</font>

94
00:04:54,960 --> 00:05:01,138
end we just XOR the cipher text of the

95
00:04:57,630 --> 00:05:02,490
previous block into<font color="#CCCCCC"> the plaintext</font><font color="#E5E5E5"> or the</font>

96
00:05:01,139 --> 00:05:05,520
intermediate value which becomes the

97
00:05:02,490 --> 00:05:08,460
plaintext<font color="#E5E5E5"> before receiving the final</font>

98
00:05:05,520 --> 00:05:11,219
value<font color="#E5E5E5"> what that means that</font><font color="#CCCCCC"> if we</font><font color="#E5E5E5"> XOR</font>

99
00:05:08,460 --> 00:05:14,430
something into the last block<font color="#E5E5E5"> the last</font>

100
00:05:11,220 --> 00:05:16,440
byte<font color="#CCCCCC"> of block X we will perform</font>

101
00:05:14,430 --> 00:05:18,270
basically the same when this is

102
00:05:16,440 --> 00:05:21,599
decrypted then it will perform the same

103
00:05:18,270 --> 00:05:25,020
<font color="#E5E5E5">XOR on the last byte of</font><font color="#CCCCCC"> block</font><font color="#E5E5E5"> X plus 1</font>

104
00:05:21,599 --> 00:05:28,259
<font color="#E5E5E5">it will also completely ruin the</font><font color="#CCCCCC"> block</font>

105
00:05:25,020 --> 00:05:30,750
we modified due<font color="#E5E5E5"> to the nature</font><font color="#CCCCCC"> of the</font>

106
00:05:28,259 --> 00:05:34,530
encryption algorithm<font color="#E5E5E5"> but that might not</font>

107
00:05:30,750 --> 00:05:37,409
<font color="#CCCCCC">be</font><font color="#E5E5E5"> a problem</font><font color="#CCCCCC"> for the attack so an</font>

108
00:05:34,530 --> 00:05:40,948
example of<font color="#E5E5E5"> this is if we found a</font>

109
00:05:37,409 --> 00:05:42,360
<font color="#CCCCCC">vulnerability in in an email service so</font>

110
00:05:40,949 --> 00:05:44,370
this email service you connect it to

111
00:05:42,360 --> 00:05:46,680
<font color="#CCCCCC">your</font><font color="#E5E5E5"> domain</font><font color="#CCCCCC"> and you can then send</font><font color="#E5E5E5"> out</font>

112
00:05:44,370 --> 00:05:49,979
emails<font color="#CCCCCC"> and your emails can contain</font><font color="#E5E5E5"> links</font>

113
00:05:46,680 --> 00:05:51,949
and the links are not just directly

114
00:05:49,979 --> 00:05:54,870
links to where you're linking they are

115
00:05:51,949 --> 00:05:57,090
actually<font color="#E5E5E5"> pointing</font><font color="#CCCCCC"> to us to a domain to</font>

116
00:05:54,870 --> 00:05:59,219
one of your<font color="#E5E5E5"> subdomains which actually</font>

117
00:05:57,090 --> 00:06:02,090
points<font color="#CCCCCC"> to the mail service</font><font color="#E5E5E5"> and the link</font>

118
00:05:59,219 --> 00:06:04,949
<font color="#E5E5E5">itself contains the target URL encrypted</font>

119
00:06:02,090 --> 00:06:07,469
<font color="#E5E5E5">so basically it</font><font color="#CCCCCC"> has this form</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font>

120
00:06:04,949 --> 00:06:10,590
some subdomain link your company and

121
00:06:07,469 --> 00:06:12,780
then<font color="#E5E5E5"> there is some metadata and then</font>

122
00:06:10,590 --> 00:06:18,179
<font color="#E5E5E5">there is this big chunk of the encrypted</font>

123
00:06:12,780 --> 00:06:20,909
URL so and this part is<font color="#E5E5E5"> not</font>

124
00:06:18,180 --> 00:06:23,820
authenticated<font color="#E5E5E5"> at all so that</font><font color="#CCCCCC"> means we</font>

125
00:06:20,909 --> 00:06:28,530
can<font color="#CCCCCC"> perform this bit flipping attack on</font>

126
00:06:23,820 --> 00:06:30,870
this encrypted<font color="#E5E5E5"> data so first of all we</font>

127
00:06:28,530 --> 00:06:33,000
we need<font color="#E5E5E5"> to know I mean to be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

128
00:06:30,870 --> 00:06:35,370
calculate<font color="#CCCCCC"> what we need to XOR with to</font>

129
00:06:33,000 --> 00:06:37,380
create the data we want<font color="#CCCCCC"> we want to</font><font color="#E5E5E5"> we</font>

130
00:06:35,370 --> 00:06:38,080
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> know what's in there to</font><font color="#CCCCCC"> begin</font>

131
00:06:37,380 --> 00:06:39,610
<font color="#CCCCCC">with and</font><font color="#E5E5E5"> that's</font>

132
00:06:38,080 --> 00:06:43,000
see we just<font color="#E5E5E5"> visit the link and see where</font>

133
00:06:39,610 --> 00:06:46,000
it redirects us so then we can<font color="#E5E5E5"> just</font>

134
00:06:43,000 --> 00:06:48,789
calculate what values we have<font color="#CCCCCC"> 2x</font><font color="#E5E5E5"> or in</font>

135
00:06:46,000 --> 00:06:53,939
into a block<font color="#E5E5E5"> to modify the next block</font>

136
00:06:48,789 --> 00:06:56,949
<font color="#CCCCCC">when it's decrypted but as I said before</font>

137
00:06:53,939 --> 00:06:59,289
<font color="#E5E5E5">one block will be completely ruined</font><font color="#CCCCCC"> so</font>

138
00:06:56,949 --> 00:07:01,449
for<font color="#CCCCCC"> example if the link is three block</font>

139
00:06:59,289 --> 00:07:04,688
blocks long<font color="#CCCCCC"> the first one will contain</font>

140
00:07:01,449 --> 00:07:07,360
HTTP colon slash slash and then<font color="#E5E5E5"> the URL</font>

141
00:07:04,689 --> 00:07:10,120
<font color="#E5E5E5">will follow so if we</font><font color="#CCCCCC"> take the middle</font>

142
00:07:07,360 --> 00:07:12,219
<font color="#E5E5E5">block modify it so that we completely</font>

143
00:07:10,120 --> 00:07:14,199
<font color="#E5E5E5">control</font><font color="#CCCCCC"> the contents of the third block</font>

144
00:07:12,219 --> 00:07:17,440
and at the<font color="#E5E5E5"> same time completely ruin</font><font color="#CCCCCC"> the</font>

145
00:07:14,199 --> 00:07:19,990
second block we can<font color="#CCCCCC"> just begin</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> third</font>

146
00:07:17,440 --> 00:07:22,270
block with an @ sign which will create

147
00:07:19,990 --> 00:07:25,620
<font color="#CCCCCC">the</font><font color="#E5E5E5"> URL which P will be HTTP colon slash</font>

148
00:07:22,270 --> 00:07:28,359
slash garbage at and then a domain so

149
00:07:25,620 --> 00:07:31,060
<font color="#E5E5E5">the garbage part will just</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> treated as</font>

150
00:07:28,360 --> 00:07:33,580
a<font color="#CCCCCC"> username</font><font color="#E5E5E5"> and you will be able to</font>

151
00:07:31,060 --> 00:07:37,629
<font color="#E5E5E5">modify this link to point to whatever</font>

152
00:07:33,580 --> 00:07:40,180
domain<font color="#E5E5E5"> you want and this might or might</font>

153
00:07:37,629 --> 00:07:42,219
not<font color="#CCCCCC"> be a problem depending on the other</font>

154
00:07:40,180 --> 00:07:47,440
assumptions in this system<font color="#E5E5E5"> for example</font>

155
00:07:42,219 --> 00:07:50,889
<font color="#CCCCCC">if you have to lose off</font><font color="#E5E5E5"> settings this</font>

156
00:07:47,440 --> 00:07:54,699
might be used to<font color="#E5E5E5"> steal tokens on and so</font>

157
00:07:50,889 --> 00:07:57,550
<font color="#E5E5E5">on</font><font color="#CCCCCC"> the other</font><font color="#E5E5E5"> kind of attacked you can</font>

158
00:07:54,699 --> 00:07:59,770
form with the<font color="#E5E5E5"> unfeigned on tentacle</font>

159
00:07:57,550 --> 00:08:02,039
encryption it's what's called<font color="#E5E5E5"> a padding</font>

160
00:07:59,770 --> 00:08:05,378
Oracle attack<font color="#CCCCCC"> so in the previous attack</font>

161
00:08:02,039 --> 00:08:07,240
<font color="#E5E5E5">we already knew</font><font color="#CCCCCC"> the plaintext and we</font>

162
00:08:05,379 --> 00:08:10,599
could modify it to<font color="#E5E5E5"> whatever we wanted</font>

163
00:08:07,240 --> 00:08:14,229
but<font color="#E5E5E5"> we can actually</font><font color="#CCCCCC"> also</font><font color="#E5E5E5"> in some</font>

164
00:08:10,599 --> 00:08:18,580
settings recover<font color="#E5E5E5"> the plaintext without</font>

165
00:08:14,229 --> 00:08:22,360
knowing it by just asking<font color="#CCCCCC"> the system to</font>

166
00:08:18,580 --> 00:08:25,089
try to<font color="#CCCCCC"> decrypt</font><font color="#E5E5E5"> a value for us so</font>

167
00:08:22,360 --> 00:08:26,889
typically what you do when you have<font color="#E5E5E5"> data</font>

168
00:08:25,089 --> 00:08:29,560
<font color="#E5E5E5">that is not the length is</font><font color="#CCCCCC"> not a multiple</font>

169
00:08:26,889 --> 00:08:33,719
of 16 bytes<font color="#E5E5E5"> you pad out the last block</font>

170
00:08:29,560 --> 00:08:38,078
<font color="#E5E5E5">and you do this in</font><font color="#CCCCCC"> a way called pkcs7</font>

171
00:08:33,719 --> 00:08:40,899
<font color="#E5E5E5">which just means that you put a number</font>

172
00:08:38,078 --> 00:08:44,228
of bytes<font color="#E5E5E5"> as padding all containing</font><font color="#CCCCCC"> the</font>

173
00:08:40,899 --> 00:08:46,329
value of how many bytes you added so if

174
00:08:44,229 --> 00:08:48,699
you have 12<font color="#E5E5E5"> bytes in your last block you</font>

175
00:08:46,329 --> 00:08:51,579
add 4 bytes<font color="#CCCCCC"> all containing the value 4</font>

176
00:08:48,699 --> 00:08:53,530
so that's<font color="#E5E5E5"> the algorithm when it</font>

177
00:08:51,580 --> 00:08:55,630
finishes decrypting it<font color="#E5E5E5"> will look at the</font>

178
00:08:53,530 --> 00:08:57,459
<font color="#CCCCCC">last</font><font color="#E5E5E5"> byte you will see a</font><font color="#CCCCCC"> four and</font><font color="#E5E5E5"> it</font>

179
00:08:55,630 --> 00:09:03,100
will remove the four last bytes and then

180
00:08:57,460 --> 00:09:04,390
<font color="#E5E5E5">you have your final decryption so and in</font>

181
00:09:03,100 --> 00:09:06,400
cryptography<font color="#CCCCCC"> it's something called an</font>

182
00:09:04,390 --> 00:09:07,960
Oracle it's it's something<font color="#CCCCCC"> that will</font>

183
00:09:06,400 --> 00:09:11,709
basically give you some kind<font color="#CCCCCC"> of answer</font>

184
00:09:07,960 --> 00:09:13,840
yes or<font color="#CCCCCC"> no - to a question</font><font color="#E5E5E5"> and in this</font>

185
00:09:11,710 --> 00:09:17,440
case<font color="#E5E5E5"> the padding Oracle attack can</font>

186
00:09:13,840 --> 00:09:20,380
happen<font color="#CCCCCC"> when the system gives different</font>

187
00:09:17,440 --> 00:09:22,660
<font color="#CCCCCC">error messages</font><font color="#E5E5E5"> depending on if the</font>

188
00:09:20,380 --> 00:09:25,060
problem was<font color="#CCCCCC"> that the padding was broken</font>

189
00:09:22,660 --> 00:09:29,050
or that<font color="#E5E5E5"> the message it recovered</font>

190
00:09:25,060 --> 00:09:31,479
afterwards was malformed<font color="#E5E5E5"> so if they</font>

191
00:09:29,050 --> 00:09:33,130
receive if that algorithm receives a

192
00:09:31,480 --> 00:09:35,770
<font color="#CCCCCC">message and it decrypts and it see that</font>

193
00:09:33,130 --> 00:09:38,410
<font color="#E5E5E5">the last byte has a value</font><font color="#CCCCCC"> seven but it</font>

194
00:09:35,770 --> 00:09:39,640
can't find seven sevens in a row at<font color="#CCCCCC"> the</font>

195
00:09:38,410 --> 00:09:45,939
end then there's something<font color="#CCCCCC"> wrong with</font>

196
00:09:39,640 --> 00:09:47,290
the padding<font color="#CCCCCC"> so if you have this thing</font>

197
00:09:45,940 --> 00:09:53,380
<font color="#E5E5E5">where the system gives you different</font>

198
00:09:47,290 --> 00:09:55,449
<font color="#E5E5E5">answers it will enable you to you will</font>

199
00:09:53,380 --> 00:09:57,160
<font color="#E5E5E5">make it you can</font><font color="#CCCCCC"> make a guess</font><font color="#E5E5E5"> for the</font>

200
00:09:55,450 --> 00:09:58,540
actual value<font color="#CCCCCC"> of</font><font color="#E5E5E5"> one byte in the</font>

201
00:09:57,160 --> 00:10:01,420
<font color="#E5E5E5">ciphertext so for example we're trying</font>

202
00:09:58,540 --> 00:10:05,020
to<font color="#E5E5E5"> uncover the last byte of</font><font color="#CCCCCC"> the last</font>

203
00:10:01,420 --> 00:10:11,650
block<font color="#E5E5E5"> so we take a guess it's somewhere</font>

204
00:10:05,020 --> 00:10:14,530
between<font color="#CCCCCC"> zero and 256 and then assuming</font>

205
00:10:11,650 --> 00:10:16,750
this guess we calculate what value we

206
00:10:14,530 --> 00:10:19,949
need to<font color="#E5E5E5"> X or in in the</font><font color="#CCCCCC"> second-to-last</font>

207
00:10:16,750 --> 00:10:25,510
<font color="#E5E5E5">block to transform this value into</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> one</font>

208
00:10:19,950 --> 00:10:30,450
which will make this a valid padding you

209
00:10:25,510 --> 00:10:32,950
do<font color="#E5E5E5"> this for all 256 possible values and</font>

210
00:10:30,450 --> 00:10:35,290
one of them will give<font color="#CCCCCC"> you a different</font>

211
00:10:32,950 --> 00:10:37,300
<font color="#E5E5E5">error message hopefully and that means</font>

212
00:10:35,290 --> 00:10:39,490
that you have correctly guessed<font color="#CCCCCC"> the</font>

213
00:10:37,300 --> 00:10:42,579
value<font color="#E5E5E5"> of that byte and then you can just</font>

214
00:10:39,490 --> 00:10:44,950
move on backwards<font color="#CCCCCC"> so you you since you</font>

215
00:10:42,580 --> 00:10:47,980
know<font color="#E5E5E5"> the last byte you can just fix</font>

216
00:10:44,950 --> 00:10:51,790
repair<font color="#E5E5E5"> that part so it will it will say</font>

217
00:10:47,980 --> 00:10:54,820
<font color="#CCCCCC">- and</font><font color="#E5E5E5"> then you try to guess what's the</font>

218
00:10:51,790 --> 00:10:56,770
second last byte to make it a<font color="#CCCCCC"> two as</font>

219
00:10:54,820 --> 00:10:59,440
well so you will<font color="#E5E5E5"> have a valid padding of</font>

220
00:10:56,770 --> 00:11:01,360
two mites<font color="#E5E5E5"> and so on so in there you can</font>

221
00:10:59,440 --> 00:11:03,640
move all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way down and cover the</font>

222
00:11:01,360 --> 00:11:05,740
<font color="#CCCCCC">whole block and when you've done that</font>

223
00:11:03,640 --> 00:11:08,470
<font color="#CCCCCC">you can just remove that block all too</font>

224
00:11:05,740 --> 00:11:10,540
and move on to the next<font color="#CCCCCC"> block and so on</font>

225
00:11:08,470 --> 00:11:14,800
and you<font color="#CCCCCC"> can then decrypt</font><font color="#E5E5E5"> the whole</font>

226
00:11:10,540 --> 00:11:17,349
message<font color="#E5E5E5"> and this is a lot faster than</font>

227
00:11:14,800 --> 00:11:20,410
trying<font color="#E5E5E5"> to guess</font><font color="#CCCCCC"> the whole block in in</font>

228
00:11:17,350 --> 00:11:23,170
one you just do 256<font color="#E5E5E5"> in the verb in the</font>

229
00:11:20,410 --> 00:11:29,199
worst case you'll do 256 trys per byte

230
00:11:23,170 --> 00:11:32,500
and one particular<font color="#CCCCCC"> example</font><font color="#E5E5E5"> of where this</font>

231
00:11:29,200 --> 00:11:36,550
was a<font color="#E5E5E5"> problem was in a system</font><font color="#CCCCCC"> I looked</font>

232
00:11:32,500 --> 00:11:39,120
at once<font color="#CCCCCC"> where in the admin</font><font color="#E5E5E5"> interface you</font>

233
00:11:36,550 --> 00:11:41,680
could do backups of<font color="#E5E5E5"> your configurations</font>

234
00:11:39,120 --> 00:11:44,260
and this is not<font color="#E5E5E5"> necessarily like a</font>

235
00:11:41,680 --> 00:11:48,459
sysadmin with full server access it's

236
00:11:44,260 --> 00:11:50,500
just some person with admin<font color="#E5E5E5"> rights in</font>

237
00:11:48,460 --> 00:11:53,440
this particular system<font color="#E5E5E5"> so they could</font>

238
00:11:50,500 --> 00:11:56,470
<font color="#CCCCCC">take a backup of the</font><font color="#E5E5E5"> configuration</font><font color="#CCCCCC"> but</font>

239
00:11:53,440 --> 00:11:58,540
the<font color="#CCCCCC"> backup would be encrypted</font><font color="#E5E5E5"> so the</font>

240
00:11:56,470 --> 00:12:00,220
system would generate it would take all

241
00:11:58,540 --> 00:12:01,660
the<font color="#E5E5E5"> configuration files it would</font><font color="#CCCCCC"> sit</font>

242
00:12:00,220 --> 00:12:05,020
them together in a<font color="#CCCCCC"> zip file</font><font color="#E5E5E5"> it would</font>

243
00:12:01,660 --> 00:12:07,329
<font color="#E5E5E5">generate a temporary key</font><font color="#CCCCCC"> encrypt the zip</font>

244
00:12:05,020 --> 00:12:09,069
file with this temporary key and then it

245
00:12:07,330 --> 00:12:11,980
would encrypt<font color="#E5E5E5"> the temporary key with a</font>

246
00:12:09,070 --> 00:12:13,990
master key stored on the server<font color="#E5E5E5"> it would</font>

247
00:12:11,980 --> 00:12:15,850
give you those two things<font color="#E5E5E5"> together the</font>

248
00:12:13,990 --> 00:12:20,560
zip file and the encrypted<font color="#E5E5E5"> temporary key</font>

249
00:12:15,850 --> 00:12:23,830
and give you<font color="#E5E5E5"> this encrypted file so what</font>

250
00:12:20,560 --> 00:12:26,229
we then<font color="#E5E5E5"> could do was to just look at</font>

251
00:12:23,830 --> 00:12:29,980
<font color="#E5E5E5">this first part and this was encrypted</font>

252
00:12:26,230 --> 00:12:32,850
<font color="#E5E5E5">with CBC so we could use this padding</font>

253
00:12:29,980 --> 00:12:38,410
Oracle attack to uncover this temporary

254
00:12:32,850 --> 00:12:40,270
key which then enabled us to decrypt<font color="#E5E5E5"> the</font>

255
00:12:38,410 --> 00:12:42,520
whole zip file<font color="#CCCCCC"> and now we could modify</font>

256
00:12:40,270 --> 00:12:44,829
the contents<font color="#E5E5E5"> of the zip file and the</font>

257
00:12:42,520 --> 00:12:46,720
thing is<font color="#E5E5E5"> that what this</font><font color="#CCCCCC"> system did</font><font color="#E5E5E5"> when</font>

258
00:12:44,830 --> 00:12:48,640
when<font color="#E5E5E5"> you upload it zip file again to</font>

259
00:12:46,720 --> 00:12:50,260
restore<font color="#CCCCCC"> the configuration was that it</font>

260
00:12:48,640 --> 00:12:52,840
just<font color="#E5E5E5"> unzipped it in a temporary</font><font color="#CCCCCC"> folder</font>

261
00:12:50,260 --> 00:12:54,370
the thing is<font color="#E5E5E5"> that it didn't account for</font>

262
00:12:52,840 --> 00:12:56,470
<font color="#E5E5E5">the</font><font color="#CCCCCC"> fact that you can have relative</font>

263
00:12:54,370 --> 00:12:59,490
paths in a sip file with<font color="#CCCCCC"> ghosts</font><font color="#E5E5E5"> which</font>

264
00:12:56,470 --> 00:13:02,950
goes upwards<font color="#E5E5E5"> so we could put in like</font>

265
00:12:59,490 --> 00:13:05,020
<font color="#E5E5E5">files in this zip file with the past</font>

266
00:13:02,950 --> 00:13:08,140
like dot dot<font color="#E5E5E5"> slash dot dot slash and so</font>

267
00:13:05,020 --> 00:13:10,390
on and then put files anywhere<font color="#E5E5E5"> on the</font>

268
00:13:08,140 --> 00:13:13,480
system where<font color="#CCCCCC"> the application itself had</font>

269
00:13:10,390 --> 00:13:17,080
<font color="#CCCCCC">write</font><font color="#E5E5E5"> permissions so this would then</font>

270
00:13:13,480 --> 00:13:19,769
lead to<font color="#E5E5E5"> over writing some scripts and</font>

271
00:13:17,080 --> 00:13:27,779
giving us remote code execution

272
00:13:19,769 --> 00:13:29,579
on the server so these are<font color="#E5E5E5"> two attacks</font>

273
00:13:27,779 --> 00:13:32,339
that arise<font color="#E5E5E5"> from the problem of</font><font color="#CCCCCC"> using</font>

274
00:13:29,579 --> 00:13:34,589
encryption<font color="#E5E5E5"> without authentication</font><font color="#CCCCCC"> so</font>

275
00:13:32,339 --> 00:13:38,160
what's the solution<font color="#CCCCCC"> well use</font>

276
00:13:34,589 --> 00:13:40,709
authentication<font color="#CCCCCC"> and</font><font color="#E5E5E5"> what do you typically</font>

277
00:13:38,160 --> 00:13:42,559
do is use<font color="#E5E5E5"> something called a message</font>

278
00:13:40,709 --> 00:13:46,768
authentication code and one particular

279
00:13:42,559 --> 00:13:48,990
<font color="#E5E5E5">such that is popular and secure it's an</font>

280
00:13:46,769 --> 00:13:51,689
<font color="#CCCCCC">age Mac it's a hash based</font><font color="#E5E5E5"> measured</font>

281
00:13:48,990 --> 00:13:54,899
message authentication code<font color="#E5E5E5"> so you use</font>

282
00:13:51,689 --> 00:13:57,719
<font color="#CCCCCC">it together</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> the key</font><font color="#E5E5E5"> to create a tag</font>

283
00:13:54,899 --> 00:14:00,499
from your<font color="#E5E5E5"> message it's kind</font><font color="#CCCCCC"> of like a</font>

284
00:13:57,720 --> 00:14:03,480
hash<font color="#E5E5E5"> but it's also dependent on the key</font>

285
00:14:00,499 --> 00:14:05,999
<font color="#CCCCCC">and then when you receive the message</font>

286
00:14:03,480 --> 00:14:07,589
you can take the key the message and<font color="#E5E5E5"> the</font>

287
00:14:05,999 --> 00:14:09,209
tag and<font color="#E5E5E5"> verify</font><font color="#CCCCCC"> that it's all consistent</font>

288
00:14:07,589 --> 00:14:12,870
<font color="#CCCCCC">so that you know</font><font color="#E5E5E5"> that the message has</font>

289
00:14:09,209 --> 00:14:15,410
not been tampered with<font color="#E5E5E5"> yeah</font>

290
00:14:12,870 --> 00:14:17,870
that's all for<font color="#E5E5E5"> me</font><font color="#CCCCCC"> thank you</font>

291
00:14:15,410 --> 00:14:17,870
[Applause]

