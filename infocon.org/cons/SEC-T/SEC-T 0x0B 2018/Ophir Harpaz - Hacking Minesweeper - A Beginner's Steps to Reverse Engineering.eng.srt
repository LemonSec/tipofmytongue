1
00:00:00,030 --> 00:00:04,220
<font color="#CCCCCC">okay so hi to everyone it's a great</font>

2
00:00:02,370 --> 00:00:06,720
pleasure<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be here and I'm very excited</font>

3
00:00:04,220 --> 00:00:09,090
<font color="#E5E5E5">so I'm gonna talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you about how I</font>

4
00:00:06,720 --> 00:00:11,010
hacked minesweeper<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I'm gonna use</font>

5
00:00:09,090 --> 00:00:14,088
this talk as an opportunity<font color="#CCCCCC"> to show you</font>

6
00:00:11,010 --> 00:00:16,650
some concepts in reverse<font color="#E5E5E5"> engineering</font>

7
00:00:14,089 --> 00:00:19,350
<font color="#E5E5E5">first of all let me introduce myself</font>

8
00:00:16,650 --> 00:00:21,810
so my name<font color="#CCCCCC"> is Ophir Harpeth I am based</font>

9
00:00:19,350 --> 00:00:24,390
in Tel<font color="#CCCCCC"> Aviv in Israel</font><font color="#E5E5E5"> and I work as a</font>

10
00:00:21,810 --> 00:00:26,038
<font color="#E5E5E5">cybercrime researcher in a company named</font>

11
00:00:24,390 --> 00:00:29,189
Trusteer<font color="#E5E5E5"> which was acquired by</font><font color="#CCCCCC"> IBM</font>

12
00:00:26,039 --> 00:00:31,740
security a couple of<font color="#E5E5E5"> years</font><font color="#CCCCCC"> ago what I do</font>

13
00:00:29,189 --> 00:00:35,219
during<font color="#E5E5E5"> my work hours</font><font color="#CCCCCC"> is I read a lot of</font>

14
00:00:31,740 --> 00:00:37,829
JavaScript<font color="#CCCCCC"> malicious code</font><font color="#E5E5E5"> that aims at</font>

15
00:00:35,219 --> 00:00:41,670
attacking<font color="#E5E5E5"> banking applications online</font>

16
00:00:37,829 --> 00:00:44,280
<font color="#E5E5E5">and basically stealing money but when I</font>

17
00:00:41,670 --> 00:00:45,870
come back home<font color="#E5E5E5"> from work and one of my</font>

18
00:00:44,280 --> 00:00:48,750
boss is<font color="#E5E5E5"> not there what</font><font color="#CCCCCC"> I really like</font>

19
00:00:45,870 --> 00:00:50,760
doing<font color="#E5E5E5"> is reading assembly code and</font>

20
00:00:48,750 --> 00:00:55,110
analyzing Windows applications and

21
00:00:50,760 --> 00:00:56,849
reverse engineering<font color="#CCCCCC"> I just created</font><font color="#E5E5E5"> an</font>

22
00:00:55,110 --> 00:00:59,579
online<font color="#CCCCCC"> workshop for reverse engineering</font>

23
00:00:56,850 --> 00:01:01,680
<font color="#CCCCCC">it's called begin RT and it's for</font>

24
00:00:59,579 --> 00:01:04,189
extreme beginners like I was a couple<font color="#CCCCCC"> of</font>

25
00:01:01,680 --> 00:01:07,890
<font color="#E5E5E5">months</font><font color="#CCCCCC"> ago and you're very welcome to</font>

26
00:01:04,188 --> 00:01:11,520
<font color="#E5E5E5">visit</font><font color="#CCCCCC"> it and try</font><font color="#E5E5E5"> it yourself and I would</font>

27
00:01:07,890 --> 00:01:13,619
love feedback<font color="#E5E5E5"> if you want to give it so</font>

28
00:01:11,520 --> 00:01:15,450
the story<font color="#E5E5E5"> of minesweeper</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> me begins</font>

29
00:01:13,619 --> 00:01:17,280
<font color="#E5E5E5">about a year ago when I worked in</font>

30
00:01:15,450 --> 00:01:20,640
checkpoint<font color="#E5E5E5"> software technologies in</font>

31
00:01:17,280 --> 00:01:23,040
Israel and in checkpoint I met a very

32
00:01:20,640 --> 00:01:25,590
<font color="#CCCCCC">talented researcher named avi at Carmel</font>

33
00:01:23,040 --> 00:01:27,840
<font color="#E5E5E5">and he gave me minesweeper is an</font>

34
00:01:25,590 --> 00:01:31,170
exercise to<font color="#CCCCCC"> improve my reverse</font>

35
00:01:27,840 --> 00:01:33,750
engineering skills<font color="#CCCCCC"> and what made me so</font>

36
00:01:31,170 --> 00:01:36,600
excited<font color="#CCCCCC"> about it was that minesweeper</font>

37
00:01:33,750 --> 00:01:39,000
was the first<font color="#E5E5E5"> real-life exact you table</font>

38
00:01:36,600 --> 00:01:40,798
that I actually<font color="#E5E5E5"> handled so before</font><font color="#CCCCCC"> that</font>

39
00:01:39,000 --> 00:01:44,009
it was<font color="#CCCCCC"> just crack maze and</font><font color="#E5E5E5"> like</font>

40
00:01:40,799 --> 00:01:48,090
exercises and this<font color="#E5E5E5"> was the real thing so</font>

41
00:01:44,009 --> 00:01:50,340
this is why I liked it so much so the

42
00:01:48,090 --> 00:01:52,979
goals of this talk<font color="#E5E5E5"> it's a</font><font color="#CCCCCC"> 30-minute</font><font color="#E5E5E5"> talk</font>

43
00:01:50,340 --> 00:01:56,250
and<font color="#E5E5E5"> the three goals are first to just</font>

44
00:01:52,979 --> 00:02:01,530
show you a nice trick<font color="#E5E5E5"> on game that we</font>

45
00:01:56,250 --> 00:02:03,899
probably all know<font color="#E5E5E5"> and show you what can</font>

46
00:02:01,530 --> 00:02:05,790
<font color="#CCCCCC">be done</font><font color="#E5E5E5"> using reverse engineering the</font>

47
00:02:03,899 --> 00:02:07,799
second thing is to<font color="#E5E5E5"> use this as an</font>

48
00:02:05,790 --> 00:02:10,530
<font color="#E5E5E5">opportunity to</font><font color="#CCCCCC"> show you how the</font>

49
00:02:07,799 --> 00:02:12,330
architecture<font color="#E5E5E5"> works how the</font><font color="#CCCCCC"> x86</font>

50
00:02:10,530 --> 00:02:14,970
<font color="#CCCCCC">architecture works</font>

51
00:02:12,330 --> 00:02:17,940
and the third is maybe to encourage you

52
00:02:14,970 --> 00:02:19,710
to grab an executable yourself and try

53
00:02:17,940 --> 00:02:23,010
<font color="#E5E5E5">to change it according to whatever you</font>

54
00:02:19,710 --> 00:02:26,730
wish<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is very cool so I hope you'll</font>

55
00:02:23,010 --> 00:02:28,140
enjoy<font color="#CCCCCC"> it before we dig into minesweeper</font>

56
00:02:26,730 --> 00:02:30,390
there are a couple of<font color="#E5E5E5"> things that I like</font>

57
00:02:28,140 --> 00:02:33,029
<font color="#CCCCCC">to overview and to give you some</font>

58
00:02:30,390 --> 00:02:34,769
<font color="#E5E5E5">technical background so the first thing</font>

59
00:02:33,030 --> 00:02:37,260
is what<font color="#CCCCCC"> is assembly as most</font><font color="#E5E5E5"> of you</font>

60
00:02:34,770 --> 00:02:40,050
<font color="#E5E5E5">probably know CPUs don't understand</font>

61
00:02:37,260 --> 00:02:43,320
<font color="#E5E5E5">words or strings they understand America</font>

62
00:02:40,050 --> 00:02:45,960
<font color="#E5E5E5">opcodes and assembly is basically the</font>

63
00:02:43,320 --> 00:02:49,320
<font color="#E5E5E5">textual representation of these</font><font color="#CCCCCC"> op codes</font>

64
00:02:45,960 --> 00:02:52,160
<font color="#CCCCCC">so as you can see on this slide</font><font color="#E5E5E5"> we have</font>

65
00:02:49,320 --> 00:02:55,440
an opcode<font color="#CCCCCC"> 6</font><font color="#E5E5E5"> a 0</font><font color="#CCCCCC"> 6 but the</font><font color="#E5E5E5"> assembly</font>

66
00:02:52,160 --> 00:02:57,780
representation<font color="#E5E5E5"> is</font><font color="#CCCCCC"> push 6 which basically</font>

67
00:02:55,440 --> 00:03:01,260
means take the<font color="#E5E5E5"> value 6 and push it onto</font>

68
00:02:57,780 --> 00:03:04,200
the<font color="#E5E5E5"> stack</font><font color="#CCCCCC"> in memory</font><font color="#E5E5E5"> and we'll see a lot</font>

69
00:03:01,260 --> 00:03:08,459
<font color="#CCCCCC">of assembly code in</font><font color="#E5E5E5"> this talk and also</font>

70
00:03:04,200 --> 00:03:10,649
push instructions the next thing<font color="#E5E5E5"> I want</font>

71
00:03:08,460 --> 00:03:13,230
<font color="#CCCCCC">to</font><font color="#E5E5E5"> mention is registers so we talked</font>

72
00:03:10,650 --> 00:03:15,870
about CPUs and registers<font color="#CCCCCC"> our data</font>

73
00:03:13,230 --> 00:03:18,690
storage units located<font color="#CCCCCC"> on the CPU</font><font color="#E5E5E5"> itself</font>

74
00:03:15,870 --> 00:03:21,870
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> can think of</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> variables</font>

75
00:03:18,690 --> 00:03:25,410
<font color="#E5E5E5">storing numbers and in the code that</font>

76
00:03:21,870 --> 00:03:29,070
we're gonna see registers are referred

77
00:03:25,410 --> 00:03:31,709
to by sequences of English<font color="#E5E5E5"> letters like</font>

78
00:03:29,070 --> 00:03:36,480
EAX EBX and ESI<font color="#CCCCCC"> and we're just gonna</font>

79
00:03:31,709 --> 00:03:38,040
<font color="#E5E5E5">think of them as variables in code now</font>

80
00:03:36,480 --> 00:03:40,049
when we talk about registers there are

81
00:03:38,040 --> 00:03:41,670
two conventions that<font color="#E5E5E5"> we must know in</font>

82
00:03:40,050 --> 00:03:45,440
order<font color="#E5E5E5"> to understand what the program</font>

83
00:03:41,670 --> 00:03:48,958
<font color="#CCCCCC">does so the first one is that</font><font color="#E5E5E5"> in x86</font>

84
00:03:45,440 --> 00:03:51,840
<font color="#E5E5E5">architecture the function</font><font color="#CCCCCC"> return' values</font>

85
00:03:48,959 --> 00:03:53,400
are stored in EAX<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example we have</font>

86
00:03:51,840 --> 00:03:56,280
a function<font color="#CCCCCC"> that ends with</font><font color="#E5E5E5"> the</font>

87
00:03:53,400 --> 00:03:59,220
<font color="#E5E5E5">instruction</font><font color="#CCCCCC"> move 5 into</font><font color="#E5E5E5"> EAX as you can</font>

88
00:03:56,280 --> 00:04:01,950
see and then return<font color="#E5E5E5"> 4 but this function</font>

89
00:03:59,220 --> 00:04:03,810
does not<font color="#CCCCCC"> return the value</font><font color="#E5E5E5"> 4 it returns 5</font>

90
00:04:01,950 --> 00:04:06,750
which is<font color="#CCCCCC"> the last</font><font color="#E5E5E5"> thing</font><font color="#CCCCCC"> that is stored</font>

91
00:04:03,810 --> 00:04:08,580
<font color="#E5E5E5">in EAX before the</font><font color="#CCCCCC"> function</font><font color="#E5E5E5"> returns so</font>

92
00:04:06,750 --> 00:04:11,370
this is one convention<font color="#E5E5E5"> that we need to</font>

93
00:04:08,580 --> 00:04:13,170
know<font color="#E5E5E5"> and the second one is</font><font color="#CCCCCC"> that function</font>

94
00:04:11,370 --> 00:04:16,200
parameters are pushed onto the<font color="#E5E5E5"> stack</font>

95
00:04:13,170 --> 00:04:18,450
<font color="#E5E5E5">before calling</font><font color="#CCCCCC"> the function so</font><font color="#E5E5E5"> for</font>

96
00:04:16,200 --> 00:04:22,169
example we have here<font color="#E5E5E5"> push the value 3</font>

97
00:04:18,450 --> 00:04:24,240
and then call myfunc so we understand

98
00:04:22,169 --> 00:04:25,919
<font color="#CCCCCC">that my func receives</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> parameter in</font>

99
00:04:24,240 --> 00:04:28,530
this<font color="#E5E5E5"> case it's</font><font color="#CCCCCC"> three</font>

100
00:04:25,919 --> 00:04:30,780
and right after<font color="#CCCCCC"> the function is called</font>

101
00:04:28,530 --> 00:04:32,998
<font color="#E5E5E5">it's gonna access its parameters by</font>

102
00:04:30,780 --> 00:04:37,258
reading them from the stack and<font color="#E5E5E5"> use them</font>

103
00:04:32,999 --> 00:04:38,819
and do whatever it needs with them the

104
00:04:37,259 --> 00:04:40,379
last<font color="#E5E5E5"> thing that</font><font color="#CCCCCC"> I want</font><font color="#E5E5E5"> to talk about as</font>

105
00:04:38,819 --> 00:04:42,300
<font color="#E5E5E5">part of this overview</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the tools that</font>

106
00:04:40,379 --> 00:04:44,490
<font color="#E5E5E5">I'm</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> use when hacking</font>

107
00:04:42,300 --> 00:04:46,319
minesweeper<font color="#E5E5E5"> so the first one is called</font>

108
00:04:44,490 --> 00:04:48,539
<font color="#CCCCCC">Ida some of you may know it it's a</font>

109
00:04:46,319 --> 00:04:50,400
disassembler what's a disassembler

110
00:04:48,539 --> 00:04:52,740
you're asking it's a program that

111
00:04:50,400 --> 00:04:55,138
receives<font color="#E5E5E5"> another program as input and</font>

112
00:04:52,740 --> 00:04:56,840
gives you<font color="#E5E5E5"> all the machine code</font><font color="#CCCCCC"> that this</font>

113
00:04:55,139 --> 00:05:00,240
program sends to the CPU

114
00:04:56,840 --> 00:05:02,549
so using<font color="#E5E5E5"> Ida we can statically analyze a</font>

115
00:05:00,240 --> 00:05:04,620
program<font color="#CCCCCC"> without running</font><font color="#E5E5E5"> it at all</font><font color="#CCCCCC"> we</font>

116
00:05:02,550 --> 00:05:06,840
load it into<font color="#E5E5E5"> memory but we do not run it</font>

117
00:05:04,620 --> 00:05:09,569
we<font color="#E5E5E5"> just see the machine code</font><font color="#CCCCCC"> that it</font>

118
00:05:06,840 --> 00:05:11,549
contains<font color="#E5E5E5"> and the second tool that</font><font color="#CCCCCC"> I'm</font>

119
00:05:09,569 --> 00:05:14,789
<font color="#E5E5E5">gonna use is called</font><font color="#CCCCCC"> Ally debug it's a</font>

120
00:05:11,550 --> 00:05:17,129
debugger<font color="#E5E5E5"> and this one actually does run</font>

121
00:05:14,789 --> 00:05:19,860
the program in memory<font color="#E5E5E5"> so it lets us put</font>

122
00:05:17,129 --> 00:05:21,659
breakpoints<font color="#E5E5E5"> on the instructions and play</font>

123
00:05:19,860 --> 00:05:23,939
the program run the program until it

124
00:05:21,659 --> 00:05:26,610
hits certain breakpoints and it lets us

125
00:05:23,939 --> 00:05:29,789
<font color="#E5E5E5">observe the system state at any given</font>

126
00:05:26,610 --> 00:05:33,960
moment<font color="#E5E5E5"> the register values the stack the</font>

127
00:05:29,789 --> 00:05:36,750
memory everything<font color="#E5E5E5"> so now that we have</font>

128
00:05:33,960 --> 00:05:39,270
<font color="#E5E5E5">the technical background</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can go into</font>

129
00:05:36,750 --> 00:05:42,270
minesweeper<font color="#E5E5E5"> and our goal this evening is</font>

130
00:05:39,270 --> 00:05:44,549
gonna be making<font color="#CCCCCC"> minesweeper start up</font>

131
00:05:42,270 --> 00:05:46,349
every time<font color="#E5E5E5"> such that</font><font color="#CCCCCC"> all the mines</font><font color="#E5E5E5"> are</font>

132
00:05:44,550 --> 00:05:49,289
marked<font color="#CCCCCC"> with flags just like you can see</font>

133
00:05:46,349 --> 00:05:50,878
<font color="#CCCCCC">in</font><font color="#E5E5E5"> this screenshot</font><font color="#CCCCCC"> I see some</font><font color="#E5E5E5"> smiles in</font>

134
00:05:49,289 --> 00:05:56,219
the<font color="#CCCCCC"> audience some of you may have</font><font color="#E5E5E5"> done</font>

135
00:05:50,879 --> 00:05:57,569
<font color="#E5E5E5">that before so nice</font><font color="#CCCCCC"> ok so we have our</font>

136
00:05:56,219 --> 00:06:00,389
goal and<font color="#E5E5E5"> now we're going</font><font color="#CCCCCC"> to talk about</font>

137
00:05:57,569 --> 00:06:01,949
the<font color="#E5E5E5"> challenges that we're facing</font><font color="#CCCCCC"> so the</font>

138
00:06:00,389 --> 00:06:05,099
two main challenges<font color="#E5E5E5"> are as follows the</font>

139
00:06:01,949 --> 00:06:06,960
<font color="#CCCCCC">first one is that this</font><font color="#E5E5E5"> program</font><font color="#CCCCCC"> is</font>

140
00:06:05,099 --> 00:06:09,330
complex<font color="#E5E5E5"> and I don't mean complex in the</font>

141
00:06:06,960 --> 00:06:10,948
<font color="#E5E5E5">sense of it's hard to use or play every</font>

142
00:06:09,330 --> 00:06:13,800
child can<font color="#E5E5E5"> play minesweeper I</font><font color="#CCCCCC"> play</font>

143
00:06:10,949 --> 00:06:15,930
minesweeper<font color="#E5E5E5"> a lot but even minesweeper</font>

144
00:06:13,800 --> 00:06:18,509
which is a relatively small executable

145
00:06:15,930 --> 00:06:21,210
file probably consists of many many

146
00:06:18,509 --> 00:06:23,610
lines<font color="#E5E5E5"> of codes and functions and we</font>

147
00:06:21,210 --> 00:06:26,758
don't want to read all the minesweeper

148
00:06:23,610 --> 00:06:29,129
code we have a very certain thing to do

149
00:06:26,759 --> 00:06:33,330
here<font color="#CCCCCC"> so we're gonna have to</font><font color="#E5E5E5"> find the</font>

150
00:06:29,129 --> 00:06:35,879
code<font color="#E5E5E5"> that is relevant to</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> mission now</font>

151
00:06:33,330 --> 00:06:38,370
the second thing<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> as my sleeper</font>

152
00:06:35,879 --> 00:06:39,780
players were used to<font color="#E5E5E5"> only interacting</font>

153
00:06:38,370 --> 00:06:41,639
with<font color="#CCCCCC"> a graphical user at</font>

154
00:06:39,780 --> 00:06:43,469
face and seeing the graphical elements

155
00:06:41,639 --> 00:06:46,020
but now that we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> change</font>

156
00:06:43,470 --> 00:06:48,560
minesweeper<font color="#E5E5E5"> we have to think how things</font>

157
00:06:46,020 --> 00:06:51,030
are<font color="#CCCCCC"> represented</font><font color="#E5E5E5"> in memory</font>

158
00:06:48,560 --> 00:06:52,860
now knowing these challenges we're going

159
00:06:51,030 --> 00:06:54,989
to build ourselves a solution strategy

160
00:06:52,860 --> 00:06:57,150
which looks as follows<font color="#CCCCCC"> so first we're</font>

161
00:06:54,990 --> 00:07:00,690
going<font color="#E5E5E5"> to find the code that initializes</font>

162
00:06:57,150 --> 00:07:02,969
<font color="#E5E5E5">the minefield next we're going to</font>

163
00:07:00,690 --> 00:07:05,160
understand<font color="#E5E5E5"> how a mine is represented and</font>

164
00:07:02,970 --> 00:07:07,560
<font color="#CCCCCC">how a flag is represented in memory</font><font color="#E5E5E5"> and</font>

165
00:07:05,160 --> 00:07:10,350
once we know<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we can change</font><font color="#CCCCCC"> the</font>

166
00:07:07,560 --> 00:07:15,330
assembly<font color="#E5E5E5"> code so that we attach a flag</font>

167
00:07:10,350 --> 00:07:17,220
<font color="#CCCCCC">to</font><font color="#E5E5E5"> every mine so the first thing we do</font>

168
00:07:15,330 --> 00:07:20,159
is find the code that<font color="#CCCCCC"> initializes the</font>

169
00:07:17,220 --> 00:07:23,280
<font color="#E5E5E5">mine field now let's imagine being the</font>

170
00:07:20,160 --> 00:07:25,530
minesweeper developers what's the most

171
00:07:23,280 --> 00:07:27,659
natural thing to use given that the

172
00:07:25,530 --> 00:07:29,190
specifications<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> that minesweeper</font>

173
00:07:27,660 --> 00:07:31,890
starts up every time with a different

174
00:07:29,190 --> 00:07:33,540
<font color="#CCCCCC">layout of minds so the most natural</font>

175
00:07:31,890 --> 00:07:36,930
thing is probably<font color="#CCCCCC"> using a random</font>

176
00:07:33,540 --> 00:07:38,700
function<font color="#E5E5E5"> and I open Ida and</font><font color="#CCCCCC"> I go to the</font>

177
00:07:36,930 --> 00:07:41,940
imports<font color="#E5E5E5"> tab that shows</font><font color="#CCCCCC"> me all</font><font color="#E5E5E5"> the</font>

178
00:07:38,700 --> 00:07:44,570
<font color="#E5E5E5">functions that minesweeper imports from</font>

179
00:07:41,940 --> 00:07:49,680
other libraries<font color="#E5E5E5"> and what I see here</font><font color="#CCCCCC"> is</font>

180
00:07:44,570 --> 00:07:53,310
<font color="#E5E5E5">that it uses C</font><font color="#CCCCCC"> rand function which is</font>

181
00:07:49,680 --> 00:07:55,620
good<font color="#E5E5E5"> now another nice feature of</font><font color="#CCCCCC"> Ida is</font>

182
00:07:53,310 --> 00:07:57,090
that it lets<font color="#E5E5E5"> me see what parts in the</font>

183
00:07:55,620 --> 00:07:59,370
code<font color="#E5E5E5"> use this function</font>

184
00:07:57,090 --> 00:08:03,929
it's called<font color="#CCCCCC"> cross-reference what</font><font color="#E5E5E5"> places</font>

185
00:07:59,370 --> 00:08:05,760
in the code reference this function<font color="#E5E5E5"> so I</font>

186
00:08:03,930 --> 00:08:08,700
use this feature and<font color="#E5E5E5"> I see that the only</font>

187
00:08:05,760 --> 00:08:10,590
place Rand<font color="#E5E5E5"> is used in minesweeper is the</font>

188
00:08:08,700 --> 00:08:12,630
following function which is<font color="#E5E5E5"> very small</font>

189
00:08:10,590 --> 00:08:17,099
<font color="#E5E5E5">and sweet</font><font color="#CCCCCC"> and therefore we're gonna</font>

190
00:08:12,630 --> 00:08:20,100
<font color="#E5E5E5">analyze it step by step</font><font color="#CCCCCC"> so what</font><font color="#E5E5E5"> does</font>

191
00:08:17,100 --> 00:08:23,430
this function do first of all<font color="#E5E5E5"> Ida tells</font>

192
00:08:20,100 --> 00:08:26,910
me that it has one argument which<font color="#E5E5E5"> it</font>

193
00:08:23,430 --> 00:08:29,820
calls<font color="#CCCCCC"> r0</font><font color="#E5E5E5"> the first thing</font><font color="#CCCCCC"> that the</font>

194
00:08:26,910 --> 00:08:32,969
function<font color="#CCCCCC"> does is calling rent</font><font color="#E5E5E5"> and Rand</font>

195
00:08:29,820 --> 00:08:35,610
returns<font color="#E5E5E5"> random integer</font><font color="#CCCCCC"> between 0 & 2 to</font>

196
00:08:32,969 --> 00:08:37,620
the 32 and it stores<font color="#E5E5E5"> it like every</font>

197
00:08:35,610 --> 00:08:42,000
function<font color="#E5E5E5"> in EAX the return value</font>

198
00:08:37,620 --> 00:08:45,450
register now our random value is an ax

199
00:08:42,000 --> 00:08:48,510
<font color="#E5E5E5">and the next thing we do is execute</font><font color="#CCCCCC"> CD Q</font>

200
00:08:45,450 --> 00:08:51,510
or convert<font color="#CCCCCC"> double-word</font><font color="#E5E5E5"> to quadword we</font>

201
00:08:48,510 --> 00:08:53,020
take the<font color="#CCCCCC"> 32-bit integer stored in a ax</font>

202
00:08:51,510 --> 00:08:56,220
<font color="#E5E5E5">and we expand it</font>

203
00:08:53,020 --> 00:09:00,459
<font color="#CCCCCC">/ - registers EDX and EAX and</font><font color="#E5E5E5"> now it's a</font>

204
00:08:56,220 --> 00:09:02,890
64-bit integer the next thing that

205
00:09:00,459 --> 00:09:06,040
happens is<font color="#CCCCCC"> IDF is a division operation</font>

206
00:09:02,890 --> 00:09:11,800
<font color="#CCCCCC">and we divide the number in EDX and EAX</font>

207
00:09:06,040 --> 00:09:13,060
<font color="#E5E5E5">by our 0 our function parameter now what</font>

208
00:09:11,800 --> 00:09:16,479
we do<font color="#E5E5E5"> oh I'm sorry</font>

209
00:09:13,060 --> 00:09:19,359
the result of idea is stored in<font color="#E5E5E5"> two</font>

210
00:09:16,480 --> 00:09:22,060
registers<font color="#CCCCCC"> EAX has the quotient of the</font>

211
00:09:19,360 --> 00:09:24,640
division and<font color="#E5E5E5"> edx has the remainder of</font>

212
00:09:22,060 --> 00:09:27,939
the division<font color="#E5E5E5"> and so the next thing we do</font>

213
00:09:24,640 --> 00:09:29,500
is<font color="#CCCCCC"> move whatever</font><font color="#E5E5E5"> is in EDX into EAX</font><font color="#CCCCCC"> we</font>

214
00:09:27,940 --> 00:09:31,860
move the remainder of the division to

215
00:09:29,500 --> 00:09:35,380
<font color="#CCCCCC">EAX and then we return from</font><font color="#E5E5E5"> the function</font>

216
00:09:31,860 --> 00:09:37,540
so if we want<font color="#CCCCCC"> to put all these CPU</font>

217
00:09:35,380 --> 00:09:39,339
instructions into<font color="#E5E5E5"> human readable code</font>

218
00:09:37,540 --> 00:09:42,250
what this<font color="#CCCCCC"> function does is basically</font>

219
00:09:39,339 --> 00:09:44,770
calling<font color="#CCCCCC"> Rand</font><font color="#E5E5E5"> and returning its modulo n</font>

220
00:09:42,250 --> 00:09:47,740
where<font color="#E5E5E5"> n is the function parameter</font>

221
00:09:44,770 --> 00:09:52,410
it's a one-liner function which I'm

222
00:09:47,740 --> 00:09:55,270
<font color="#E5E5E5">gonna refer from now on as my randomized</font>

223
00:09:52,410 --> 00:09:57,279
now at this<font color="#E5E5E5"> point I know where the</font>

224
00:09:55,270 --> 00:09:59,410
function R and is used in minesweeper

225
00:09:57,279 --> 00:10:02,380
<font color="#E5E5E5">but now I want to</font><font color="#CCCCCC"> figure out where this</font>

226
00:09:59,410 --> 00:10:05,140
function<font color="#E5E5E5"> my randomized is used so I use</font>

227
00:10:02,380 --> 00:10:07,720
the cross references feature again<font color="#E5E5E5"> and I</font>

228
00:10:05,140 --> 00:10:11,380
see that my<font color="#E5E5E5"> randomized is used from this</font>

229
00:10:07,720 --> 00:10:13,570
place in code now just taking<font color="#CCCCCC"> a broader</font>

230
00:10:11,380 --> 00:10:17,050
look at<font color="#E5E5E5"> this thing this kind</font><font color="#CCCCCC"> of looks</font>

231
00:10:13,570 --> 00:10:19,270
like a loop<font color="#E5E5E5"> construction we</font><font color="#CCCCCC"> have some</font>

232
00:10:17,050 --> 00:10:21,790
code and<font color="#E5E5E5"> then a green arrow taking us</font>

233
00:10:19,270 --> 00:10:25,270
from the end of it to the<font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> of</font>

234
00:10:21,790 --> 00:10:27,819
the code block now we're gonna go step

235
00:10:25,270 --> 00:10:29,560
by step<font color="#E5E5E5"> over this code which is just a</font>

236
00:10:27,820 --> 00:10:33,360
little<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> more complicated but bear</font>

237
00:10:29,560 --> 00:10:37,000
with<font color="#CCCCCC"> me because</font><font color="#E5E5E5"> it's doing cool stuff</font><font color="#CCCCCC"> so</font>

238
00:10:33,360 --> 00:10:39,399
<font color="#CCCCCC">the first thing we do is push a</font><font color="#E5E5E5"> value</font><font color="#CCCCCC"> on</font>

239
00:10:37,000 --> 00:10:42,040
<font color="#CCCCCC">to the stack</font><font color="#E5E5E5"> the value that is stored in</font>

240
00:10:39,399 --> 00:10:44,740
one zero<font color="#CCCCCC"> zero five</font><font color="#E5E5E5"> three three four and</font>

241
00:10:42,040 --> 00:10:47,020
then<font color="#CCCCCC"> we call my randomized and the</font>

242
00:10:44,740 --> 00:10:49,510
random<font color="#E5E5E5"> number that's returned is an ax</font>

243
00:10:47,020 --> 00:10:52,839
<font color="#E5E5E5">and we put we put it in ESI and</font>

244
00:10:49,510 --> 00:10:57,640
incremented by one so ESI this point

245
00:10:52,839 --> 00:10:59,680
holds a random number<font color="#CCCCCC"> plus</font><font color="#E5E5E5"> one the next</font>

246
00:10:57,640 --> 00:11:02,650
thing that<font color="#E5E5E5"> happens is pretty similar we</font>

247
00:10:59,680 --> 00:11:04,540
push once again some value on<font color="#CCCCCC"> onto the</font>

248
00:11:02,650 --> 00:11:06,370
stack and<font color="#CCCCCC"> we</font><font color="#E5E5E5"> call my randomized again</font>

249
00:11:04,540 --> 00:11:08,620
and at this time we<font color="#CCCCCC"> incur</font>

250
00:11:06,370 --> 00:11:11,110
the number by one<font color="#E5E5E5"> but we also shifted</font>

251
00:11:08,620 --> 00:11:12,940
<font color="#E5E5E5">left by five which is equivalent to</font>

252
00:11:11,110 --> 00:11:16,720
<font color="#E5E5E5">multiplying the number by two to the</font>

253
00:11:12,940 --> 00:11:19,360
fifth<font color="#CCCCCC"> or multiplying</font><font color="#E5E5E5"> it by 32 so at this</font>

254
00:11:16,720 --> 00:11:22,450
point we have two registers<font color="#CCCCCC"> ESI and</font><font color="#E5E5E5"> ECX</font>

255
00:11:19,360 --> 00:11:25,060
<font color="#E5E5E5">each one holding a random number</font><font color="#CCCCCC"> and the</font>

256
00:11:22,450 --> 00:11:29,320
next<font color="#CCCCCC"> thing that happens is pretty</font>

257
00:11:25,060 --> 00:11:31,839
interesting<font color="#E5E5E5"> we take these two</font><font color="#CCCCCC"> registers</font>

258
00:11:29,320 --> 00:11:34,240
and we<font color="#E5E5E5"> sum them up and we use this sum</font>

259
00:11:31,839 --> 00:11:38,410
as an offset<font color="#E5E5E5"> to a place in</font><font color="#CCCCCC"> memory</font><font color="#E5E5E5"> to a</font>

260
00:11:34,240 --> 00:11:40,839
location<font color="#E5E5E5"> one zero</font><font color="#CCCCCC"> zero five 340</font><font color="#E5E5E5"> and we</font>

261
00:11:38,410 --> 00:11:43,600
read the<font color="#CCCCCC"> byte</font><font color="#E5E5E5"> that's in there that's in</font>

262
00:11:40,839 --> 00:11:46,420
this<font color="#E5E5E5"> location in memory and we test it</font>

263
00:11:43,600 --> 00:11:49,480
against the<font color="#E5E5E5"> number 80 now let's dig in</font>

264
00:11:46,420 --> 00:11:53,079
this because<font color="#E5E5E5"> it's interesting</font><font color="#CCCCCC"> 80 is</font><font color="#E5E5E5"> a</font>

265
00:11:49,480 --> 00:11:55,920
<font color="#E5E5E5">one byte number whose most significant</font>

266
00:11:53,080 --> 00:12:00,610
bit is<font color="#E5E5E5"> one as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see on the</font><font color="#CCCCCC"> upper</font>

267
00:11:55,920 --> 00:12:02,979
row<font color="#CCCCCC"> and given a number in when we tested</font>

268
00:12:00,610 --> 00:12:06,010
against<font color="#E5E5E5"> 80 what we actually do is a</font>

269
00:12:02,980 --> 00:12:09,250
logical<font color="#E5E5E5"> end and so if the most</font>

270
00:12:06,010 --> 00:12:11,800
significant<font color="#E5E5E5"> bit in</font><font color="#CCCCCC"> N is</font><font color="#E5E5E5"> 1 the result</font><font color="#CCCCCC"> I'm</font>

271
00:12:09,250 --> 00:12:15,700
gonna get from<font color="#E5E5E5"> this test operation is</font>

272
00:12:11,800 --> 00:12:18,160
the nonzero<font color="#CCCCCC"> result is</font><font color="#E5E5E5"> 80 in hex and if</font>

273
00:12:15,700 --> 00:12:20,380
the most significant bit<font color="#E5E5E5"> in n is</font><font color="#CCCCCC"> zero</font>

274
00:12:18,160 --> 00:12:22,480
then what I'm gonna get is a<font color="#E5E5E5"> zero so</font>

275
00:12:20,380 --> 00:12:26,500
there are actually two possible<font color="#CCCCCC"> results</font>

276
00:12:22,480 --> 00:12:29,620
for<font color="#E5E5E5"> this test operation now let's get</font>

277
00:12:26,500 --> 00:12:31,660
back to our code<font color="#E5E5E5"> so we read this byte in</font>

278
00:12:29,620 --> 00:12:34,690
<font color="#E5E5E5">the random location in memory and we see</font>

279
00:12:31,660 --> 00:12:38,290
if the most significant bit is set in

280
00:12:34,690 --> 00:12:40,630
<font color="#E5E5E5">despite and now we have the jump</font><font color="#CCCCCC"> nonzero</font>

281
00:12:38,290 --> 00:12:44,319
instructions<font color="#E5E5E5"> so if the result is nonzero</font>

282
00:12:40,630 --> 00:12:46,660
<font color="#CCCCCC">we take the green arrow</font><font color="#E5E5E5"> and we go back</font>

283
00:12:44,320 --> 00:12:49,060
<font color="#E5E5E5">to the beginning of code but if the</font>

284
00:12:46,660 --> 00:12:53,230
result is a<font color="#E5E5E5"> zero we go with the red</font>

285
00:12:49,060 --> 00:12:57,270
arrow<font color="#E5E5E5"> and result is 0 means the bit is</font>

286
00:12:53,230 --> 00:13:00,550
not set in our<font color="#E5E5E5"> byte and if it is not set</font>

287
00:12:57,270 --> 00:13:02,740
we do an or operation<font color="#CCCCCC"> between the byte</font>

288
00:13:00,550 --> 00:13:05,469
in memory and<font color="#E5E5E5"> 80 and this is equivalent</font>

289
00:13:02,740 --> 00:13:10,450
<font color="#E5E5E5">to setting the most significant bit in</font>

290
00:13:05,470 --> 00:13:11,890
our bytes in memory<font color="#E5E5E5"> to 1 now this might</font>

291
00:13:10,450 --> 00:13:15,610
have<font color="#CCCCCC"> been a little complicated but let's</font>

292
00:13:11,890 --> 00:13:17,620
review<font color="#CCCCCC"> it in a more simple way so what</font>

293
00:13:15,610 --> 00:13:19,059
do<font color="#E5E5E5"> we do here we randomized two numbers</font>

294
00:13:17,620 --> 00:13:21,459
<font color="#E5E5E5">round</font><font color="#CCCCCC"> 1 and round</font><font color="#E5E5E5"> 2</font>

295
00:13:19,059 --> 00:13:24,279
and we sum<font color="#E5E5E5"> them up</font><font color="#CCCCCC"> and we use this as an</font>

296
00:13:21,459 --> 00:13:26,649
index<font color="#E5E5E5"> to a location in</font><font color="#CCCCCC"> memory and we see</font>

297
00:13:24,279 --> 00:13:29,409
if this certain byte in memory has a

298
00:13:26,649 --> 00:13:32,619
certain bit<font color="#E5E5E5"> set</font><font color="#CCCCCC"> it's most significant</font>

299
00:13:29,409 --> 00:13:34,779
bit<font color="#E5E5E5"> if it's set or not if it's already</font>

300
00:13:32,619 --> 00:13:38,169
set<font color="#E5E5E5"> we just go back</font><font color="#CCCCCC"> to the beginning and</font>

301
00:13:34,779 --> 00:13:43,689
reran demise<font color="#CCCCCC"> to numbers</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> if it's not</font>

302
00:13:38,169 --> 00:13:47,019
set we set it to<font color="#CCCCCC"> 1 what</font><font color="#E5E5E5"> is happening</font>

303
00:13:43,689 --> 00:13:50,259
here<font color="#E5E5E5"> so if we think of this certain bit</font>

304
00:13:47,019 --> 00:13:51,909
as a minor marker<font color="#E5E5E5"> this might be the</font>

305
00:13:50,259 --> 00:13:54,399
actual<font color="#E5E5E5"> code that initializes</font><font color="#CCCCCC"> the</font>

306
00:13:51,909 --> 00:13:57,579
<font color="#E5E5E5">minefield in memory right because we</font>

307
00:13:54,399 --> 00:13:59,679
<font color="#E5E5E5">randomized indexes we check them in</font>

308
00:13:57,579 --> 00:14:01,569
memory<font color="#E5E5E5"> we see is</font><font color="#CCCCCC"> there already</font><font color="#E5E5E5"> in mind</font>

309
00:13:59,679 --> 00:14:03,329
there if there isn't we put a mine there

310
00:14:01,569 --> 00:14:09,159
<font color="#E5E5E5">if there is we just rear-end amaizing</font>

311
00:14:03,329 --> 00:14:12,128
indexes<font color="#E5E5E5"> now this is just a theory</font><font color="#CCCCCC"> okay</font>

312
00:14:09,159 --> 00:14:13,779
<font color="#E5E5E5">this is just</font><font color="#CCCCCC"> a hypothesis and I'm still</font>

313
00:14:12,129 --> 00:14:15,069
<font color="#CCCCCC">not</font><font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that I'm in</font><font color="#E5E5E5"> the right place</font><font color="#CCCCCC"> and</font>

314
00:14:13,779 --> 00:14:18,219
actually<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are some</font><font color="#E5E5E5"> bits of</font>

315
00:14:15,069 --> 00:14:19,779
information<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are left unknown</font><font color="#E5E5E5"> so</font>

316
00:14:18,219 --> 00:14:22,179
what are these<font color="#CCCCCC"> parameters</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> are</font>

317
00:14:19,779 --> 00:14:24,429
pushed onto the<font color="#CCCCCC"> stack before the calls</font>

318
00:14:22,179 --> 00:14:27,339
to my<font color="#E5E5E5"> randomized and what is this base</font>

319
00:14:24,429 --> 00:14:30,098
address in memory<font color="#E5E5E5"> to which I add offsets</font>

320
00:14:27,339 --> 00:14:34,149
<font color="#CCCCCC">and this is where debugging</font><font color="#E5E5E5"> comes to our</font>

321
00:14:30,099 --> 00:14:36,759
rescue<font color="#E5E5E5"> so as I promised Ally debug our</font>

322
00:14:34,149 --> 00:14:39,879
debugger<font color="#CCCCCC"> I open Ollie</font><font color="#E5E5E5"> debug and I see</font>

323
00:14:36,759 --> 00:14:41,529
this so the main the bigger frame is the

324
00:14:39,879 --> 00:14:44,559
code the assembly code that we just saw

325
00:14:41,529 --> 00:14:46,359
<font color="#E5E5E5">in Ida</font><font color="#CCCCCC"> as you can see the</font><font color="#E5E5E5"> highlighted</font>

326
00:14:44,559 --> 00:14:48,488
push instruction is exactly the pusher

327
00:14:46,359 --> 00:14:51,579
instruction that we saw a<font color="#E5E5E5"> minute before</font>

328
00:14:48,489 --> 00:14:53,079
<font color="#E5E5E5">and the smaller frame is the stack in</font>

329
00:14:51,579 --> 00:14:56,738
memory<font color="#E5E5E5"> and the stack as you might</font>

330
00:14:53,079 --> 00:14:58,779
remember<font color="#CCCCCC"> hold the function parameters</font><font color="#E5E5E5"> so</font>

331
00:14:56,739 --> 00:15:00,339
what I do is I put a breakpoint<font color="#E5E5E5"> on the</font>

332
00:14:58,779 --> 00:15:02,889
push instruction and then I run

333
00:15:00,339 --> 00:15:05,919
minesweeper until it hits this

334
00:15:02,889 --> 00:15:09,369
breakpoint<font color="#CCCCCC"> and what I see is that</font><font color="#E5E5E5"> the</font>

335
00:15:05,919 --> 00:15:11,709
value pushed<font color="#CCCCCC"> on to the stack</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> 9 and I</font>

336
00:15:09,369 --> 00:15:13,599
do the<font color="#E5E5E5"> same trick again with the next</font>

337
00:15:11,709 --> 00:15:17,169
push instruction and<font color="#E5E5E5"> again I see that</font>

338
00:15:13,599 --> 00:15:18,939
the value is 9 so there's only<font color="#E5E5E5"> one thing</font>

339
00:15:17,169 --> 00:15:22,089
left<font color="#E5E5E5"> for me</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> check and it's this base</font>

340
00:15:18,939 --> 00:15:25,809
address in memory<font color="#E5E5E5"> the the the array base</font>

341
00:15:22,089 --> 00:15:28,559
<font color="#E5E5E5">the base of the array and I go to this</font>

342
00:15:25,809 --> 00:15:32,360
<font color="#E5E5E5">memory region and this is what I see and</font>

343
00:15:28,559 --> 00:15:36,738
I start<font color="#E5E5E5"> this</font><font color="#CCCCCC"> four hours</font><font color="#E5E5E5"> seriously</font>

344
00:15:32,360 --> 00:15:38,629
and finally I<font color="#E5E5E5"> recognize some</font><font color="#CCCCCC"> repeating</font>

345
00:15:36,739 --> 00:15:41,600
pattern here<font color="#E5E5E5"> and</font><font color="#CCCCCC"> this is what I see I</font>

346
00:15:38,629 --> 00:15:44,959
<font color="#E5E5E5">seen nine repetition of a very similar</font>

347
00:15:41,600 --> 00:15:47,269
pattern<font color="#CCCCCC"> and every repetition starts with</font>

348
00:15:44,959 --> 00:15:49,128
a<font color="#CCCCCC"> 10 in hex</font><font color="#E5E5E5"> and then there are</font><font color="#CCCCCC"> nine</font>

349
00:15:47,269 --> 00:15:52,309
<font color="#CCCCCC">different values and then again a ten</font>

350
00:15:49,129 --> 00:15:55,970
<font color="#E5E5E5">and I look at these values and I see</font>

351
00:15:52,309 --> 00:15:58,999
mostly<font color="#E5E5E5"> 0s but from time to time I see</font>

352
00:15:55,970 --> 00:16:02,720
also<font color="#E5E5E5"> an</font><font color="#CCCCCC"> eight F and I count these eight</font>

353
00:15:58,999 --> 00:16:06,230
FS in memory and I see that<font color="#E5E5E5"> there are</font>

354
00:16:02,720 --> 00:16:08,899
exactly<font color="#E5E5E5"> ten of them and then I recall</font>

355
00:16:06,230 --> 00:16:11,959
playing minesweeper as a child and I

356
00:16:08,899 --> 00:16:13,999
remember that the default<font color="#E5E5E5"> beginner board</font>

357
00:16:11,959 --> 00:16:16,878
<font color="#E5E5E5">of minesweeper is</font><font color="#CCCCCC"> a nine</font><font color="#E5E5E5"> on nine board</font>

358
00:16:13,999 --> 00:16:21,439
with exactly ten<font color="#CCCCCC"> mines positioned on the</font>

359
00:16:16,879 --> 00:16:24,379
<font color="#CCCCCC">board and then this is how it look like</font>

360
00:16:21,439 --> 00:16:28,099
<font color="#E5E5E5">I go oh my god this is a minefield in</font>

361
00:16:24,379 --> 00:16:31,699
memory I'm very happy so<font color="#CCCCCC"> let's sum up</font>

362
00:16:28,100 --> 00:16:34,970
what we know up to this point<font color="#CCCCCC"> so when we</font>

363
00:16:31,699 --> 00:16:37,508
see<font color="#E5E5E5"> ten in memory this means that row</font>

364
00:16:34,970 --> 00:16:40,519
starts or ends it's a row delimiter<font color="#CCCCCC"> a</font>

365
00:16:37,509 --> 00:16:43,610
<font color="#E5E5E5">zero</font><font color="#CCCCCC"> F is a blank square</font><font color="#E5E5E5"> is a square</font>

366
00:16:40,519 --> 00:16:46,129
with<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> mind and 8 F is a</font><font color="#CCCCCC"> mine</font>

367
00:16:43,610 --> 00:16:47,839
square<font color="#E5E5E5"> square with mine now this</font>

368
00:16:46,129 --> 00:16:50,299
connects pretty well with the code we

369
00:16:47,839 --> 00:16:53,660
saw before because<font color="#CCCCCC"> when we take a blank</font>

370
00:16:50,299 --> 00:16:59,059
square<font color="#CCCCCC"> an empty square is</font><font color="#E5E5E5"> 0 F and we do</font>

371
00:16:53,660 --> 00:17:02,600
or with<font color="#CCCCCC"> a D we get</font><font color="#E5E5E5"> exactly 8 F and now</font>

372
00:16:59,059 --> 00:17:04,519
the last<font color="#E5E5E5"> thing that's left to do is</font>

373
00:17:02,600 --> 00:17:07,399
<font color="#E5E5E5">figure out what a flag is represented</font>

374
00:17:04,519 --> 00:17:09,740
like<font color="#E5E5E5"> because we know</font><font color="#CCCCCC"> all the rest</font><font color="#E5E5E5"> but</font>

375
00:17:07,398 --> 00:17:12,289
this<font color="#E5E5E5"> task is pretty easy at this point</font>

376
00:17:09,740 --> 00:17:14,870
<font color="#E5E5E5">because we know where the</font><font color="#CCCCCC"> minefield s is</font>

377
00:17:12,289 --> 00:17:18,260
in the memory and we can just run

378
00:17:14,869 --> 00:17:20,559
minesweeper<font color="#E5E5E5"> at the same time so I run</font>

379
00:17:18,260 --> 00:17:23,388
minesweeper<font color="#CCCCCC"> and I choose a certain</font>

380
00:17:20,559 --> 00:17:25,339
location in memory<font color="#E5E5E5"> that has a mine on it</font>

381
00:17:23,388 --> 00:17:28,969
<font color="#E5E5E5">it's highlighted</font><font color="#CCCCCC"> over there as you can</font>

382
00:17:25,339 --> 00:17:32,120
<font color="#CCCCCC">see it's an 8 F and I right-click on the</font>

383
00:17:28,970 --> 00:17:35,840
<font color="#CCCCCC">corresponding square in the minesweeper</font>

384
00:17:32,120 --> 00:17:39,139
board<font color="#E5E5E5"> and</font><font color="#CCCCCC"> one second</font><font color="#E5E5E5"> later I see</font><font color="#CCCCCC"> that</font>

385
00:17:35,840 --> 00:17:42,590
the value in memory<font color="#E5E5E5"> is changed into 8</font><font color="#CCCCCC"> E</font>

386
00:17:39,139 --> 00:17:45,678
instead of 8 F so at this<font color="#E5E5E5"> point I</font>

387
00:17:42,590 --> 00:17:46,520
understand that 8<font color="#E5E5E5"> E is a square that has</font>

388
00:17:45,679 --> 00:17:53,120
<font color="#CCCCCC">a mine</font><font color="#E5E5E5"> and is</font>

389
00:17:46,520 --> 00:17:57,379
also marked with<font color="#CCCCCC"> a flag</font><font color="#E5E5E5"> so the original</font>

390
00:17:53,120 --> 00:18:00,229
operation was doing an or with<font color="#CCCCCC"> zero f</font>

391
00:17:57,380 --> 00:18:03,110
and<font color="#CCCCCC"> eighty</font><font color="#E5E5E5"> and that gave us 8 F which is</font>

392
00:18:00,230 --> 00:18:05,210
<font color="#CCCCCC">a</font><font color="#E5E5E5"> mind but now we want to create 8</font><font color="#CCCCCC"> e</font><font color="#E5E5E5"> and</font>

393
00:18:03,110 --> 00:18:07,490
there are a couple<font color="#E5E5E5"> of ways</font><font color="#CCCCCC"> to do that</font>

394
00:18:05,210 --> 00:18:10,070
but what I figure out was most

395
00:18:07,490 --> 00:18:15,350
convenient<font color="#E5E5E5"> for me was just doing an XOR</font>

396
00:18:10,070 --> 00:18:19,730
operation with<font color="#CCCCCC"> a t1 this is</font><font color="#E5E5E5"> just bit bit</font>

397
00:18:15,350 --> 00:18:21,560
algebra bits<font color="#E5E5E5"> arithmetic and so there's</font>

398
00:18:19,730 --> 00:18:24,920
just<font color="#E5E5E5"> one thing left</font><font color="#CCCCCC"> to do and</font><font color="#E5E5E5"> it's</font>

399
00:18:21,560 --> 00:18:28,149
changing the executable itself<font color="#E5E5E5"> so I'm</font>

400
00:18:24,920 --> 00:18:31,220
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> show you what I</font><font color="#CCCCCC"> did</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> Ollie debug</font>

401
00:18:28,150 --> 00:18:34,280
this<font color="#E5E5E5"> is the or instruction</font><font color="#CCCCCC"> that I'm that</font>

402
00:18:31,220 --> 00:18:36,560
I want to use it's the or with a<font color="#E5E5E5"> T and I</font>

403
00:18:34,280 --> 00:18:39,680
want to use to<font color="#E5E5E5"> change it into X or with</font>

404
00:18:36,560 --> 00:18:42,290
a t1 so I<font color="#CCCCCC"> right-click</font><font color="#E5E5E5"> on it and I choose</font>

405
00:18:39,680 --> 00:18:45,440
a symbol<font color="#E5E5E5"> which lets me assemble the code</font>

406
00:18:42,290 --> 00:18:49,430
and I change the or instruction<font color="#CCCCCC"> into X</font>

407
00:18:45,440 --> 00:18:51,110
or instruction with a t1 and I assemble

408
00:18:49,430 --> 00:18:53,300
the<font color="#CCCCCC"> code and now what I do is</font><font color="#E5E5E5"> save this</font>

409
00:18:51,110 --> 00:18:55,820
<font color="#E5E5E5">new piece</font><font color="#CCCCCC"> of code into a new executive</font>

410
00:18:53,300 --> 00:18:58,310
all I don't<font color="#E5E5E5"> override the old one I'm</font>

411
00:18:55,820 --> 00:19:01,250
<font color="#CCCCCC">just saving it into a new one</font><font color="#E5E5E5"> and I'm</font>

412
00:18:58,310 --> 00:19:07,070
calling<font color="#E5E5E5"> it patched</font><font color="#CCCCCC"> and I save it on my</font>

413
00:19:01,250 --> 00:19:09,410
desktop<font color="#E5E5E5"> now</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> open it and all the mines</font>

414
00:19:07,070 --> 00:19:12,470
in minesweeper are marked<font color="#CCCCCC"> with flags and</font>

415
00:19:09,410 --> 00:19:15,320
when I<font color="#E5E5E5"> click on the smiley face</font>

416
00:19:12,470 --> 00:19:17,510
this behavior is preserved<font color="#E5E5E5"> every time it</font>

417
00:19:15,320 --> 00:19:24,189
starts<font color="#E5E5E5"> up all the mines are marked with</font>

418
00:19:17,510 --> 00:19:24,190
<font color="#CCCCCC">flags</font><font color="#E5E5E5"> thank you</font>

419
00:19:27,600 --> 00:19:32,080
so at this point<font color="#E5E5E5"> the mission is</font>

420
00:19:29,590 --> 00:19:47,050
accomplished<font color="#E5E5E5"> and now it's your time for</font>

421
00:19:32,080 --> 00:19:57,490
questions was it all clear yeah sure the

422
00:19:47,050 --> 00:20:01,560
calculator<font color="#CCCCCC"> of course anything else</font><font color="#E5E5E5"> okay</font>

423
00:19:57,490 --> 00:20:01,560
<font color="#CCCCCC">I don't see any more</font><font color="#E5E5E5"> oh sorry yes</font>

424
00:20:07,830 --> 00:20:14,460
I think<font color="#E5E5E5"> Ida is able to disassemble</font><font color="#CCCCCC"> e.l.f</font>

425
00:20:10,980 --> 00:20:15,840
which is the<font color="#CCCCCC"> Linux executable format I'm</font>

426
00:20:14,460 --> 00:20:17,850
not so sure<font color="#E5E5E5"> because I have no experience</font>

427
00:20:15,840 --> 00:20:19,889
<font color="#CCCCCC">with it but there</font><font color="#E5E5E5"> are definitely tools</font>

428
00:20:17,850 --> 00:20:23,280
to disassemble<font color="#E5E5E5"> and analyze Linux</font>

429
00:20:19,890 --> 00:20:30,570
executables<font color="#E5E5E5"> and people do that so I'm</font>

430
00:20:23,280 --> 00:20:33,470
just into Windows<font color="#CCCCCC"> ok thank</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> very much</font>

431
00:20:30,570 --> 00:20:33,470
for being<font color="#E5E5E5"> here</font>

