1
00:00:16,560 --> 00:00:21,689
<font color="#CCCCCC">I will demo the PCL each memo memory</font>

2
00:00:19,439 --> 00:00:24,779
<font color="#CCCCCC">process</font><font color="#E5E5E5"> file system which are used to</font>

3
00:00:21,689 --> 00:00:27,300
<font color="#E5E5E5">find the total meltdown web and I will</font>

4
00:00:24,779 --> 00:00:29,310
also demo how<font color="#E5E5E5"> I came to</font><font color="#CCCCCC"> find</font><font color="#E5E5E5"> total</font>

5
00:00:27,300 --> 00:00:31,590
meltdown<font color="#CCCCCC"> and how I came</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> believe it to</font>

6
00:00:29,310 --> 00:00:33,750
be<font color="#E5E5E5"> already fixed and how I</font><font color="#CCCCCC"> then released</font>

7
00:00:31,590 --> 00:00:36,629
it<font color="#E5E5E5"> into</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> public without it being</font>

8
00:00:33,750 --> 00:00:39,059
fixed<font color="#CCCCCC"> and</font><font color="#E5E5E5"> throughout the presentation I</font>

9
00:00:36,629 --> 00:00:43,530
will<font color="#CCCCCC"> do demos</font><font color="#E5E5E5"> lots of demos live</font><font color="#CCCCCC"> demos</font>

10
00:00:39,059 --> 00:00:45,900
<font color="#E5E5E5">so we left hope everything is</font><font color="#CCCCCC"> working my</font>

11
00:00:43,530 --> 00:00:47,730
name is<font color="#E5E5E5"> off risk</font><font color="#CCCCCC"> I'm working as a pen</font>

12
00:00:45,900 --> 00:00:49,769
tester by day here in<font color="#E5E5E5"> Stockholm in the</font>

13
00:00:47,730 --> 00:00:52,440
financial sector<font color="#CCCCCC"> I try</font><font color="#E5E5E5"> to do some</font>

14
00:00:49,769 --> 00:00:54,600
security<font color="#E5E5E5"> research by night mostly DMA</font>

15
00:00:52,440 --> 00:00:57,449
related stuff<font color="#E5E5E5"> our previously presented</font>

16
00:00:54,600 --> 00:01:00,119
<font color="#E5E5E5">here at</font><font color="#CCCCCC"> SEC T and</font><font color="#E5E5E5"> I'm also the author of</font>

17
00:00:57,449 --> 00:01:03,269
<font color="#CCCCCC">the</font><font color="#E5E5E5"> PCL each direct memory access attack</font>

18
00:01:00,119 --> 00:01:06,600
toolkit which is<font color="#E5E5E5"> a 100%</font><font color="#CCCCCC"> open source</font>

19
00:01:03,269 --> 00:01:08,820
project<font color="#CCCCCC"> I have to point</font><font color="#E5E5E5"> out that I'm</font>

20
00:01:06,600 --> 00:01:12,509
giving this talk as an individual<font color="#E5E5E5"> my</font>

21
00:01:08,820 --> 00:01:14,449
employer is<font color="#CCCCCC"> not involved</font><font color="#E5E5E5"> in any</font><font color="#CCCCCC"> way I'm</font>

22
00:01:12,509 --> 00:01:17,159
here today<font color="#E5E5E5"> to present total meltdown</font>

23
00:01:14,450 --> 00:01:19,860
<font color="#E5E5E5">it's a local privilege escalation</font>

24
00:01:17,159 --> 00:01:22,770
<font color="#E5E5E5">vulnerability</font><font color="#CCCCCC"> it loud any low privileged</font>

25
00:01:19,860 --> 00:01:26,100
user to execute<font color="#E5E5E5"> code in the kernel</font>

26
00:01:22,770 --> 00:01:28,320
trivially<font color="#E5E5E5"> it was way worse</font><font color="#CCCCCC"> than the</font>

27
00:01:26,100 --> 00:01:30,329
<font color="#CCCCCC">original meltdown vulnerability</font><font color="#E5E5E5"> total</font>

28
00:01:28,320 --> 00:01:33,329
meltdown<font color="#CCCCCC"> allowed for orbiter memory</font>

29
00:01:30,329 --> 00:01:36,270
reads and writes<font color="#E5E5E5"> at speeds up to</font><font color="#CCCCCC"> Jigga</font>

30
00:01:33,329 --> 00:01:40,048
bytes per second<font color="#E5E5E5"> it only affected</font>

31
00:01:36,270 --> 00:01:43,710
<font color="#E5E5E5">Windows 7 and 2008 r2</font><font color="#CCCCCC"> no other operating</font>

32
00:01:40,049 --> 00:01:46,469
systems were affected it's not directly

33
00:01:43,710 --> 00:01:50,009
<font color="#E5E5E5">related to meltdown it's not a CPU or</font>

34
00:01:46,469 --> 00:01:52,859
<font color="#E5E5E5">side channel attack it was rather a bug</font>

35
00:01:50,009 --> 00:01:56,520
in the<font color="#CCCCCC"> Melton patch which was rolled out</font>

36
00:01:52,859 --> 00:01:59,130
<font color="#CCCCCC">in January which then opened a</font><font color="#E5E5E5"> back door</font>

37
00:01:56,520 --> 00:02:02,100
straight into the physical memory of the

38
00:01:59,130 --> 00:02:04,439
computer<font color="#CCCCCC"> and me releasing</font><font color="#E5E5E5"> this one it</font>

39
00:02:02,100 --> 00:02:06,479
resulted in<font color="#E5E5E5"> an out-of-band kernel patch</font>

40
00:02:04,439 --> 00:02:10,530
from Microsoft<font color="#E5E5E5"> two days later on on</font>

41
00:02:06,479 --> 00:02:12,270
<font color="#E5E5E5">March 29th and immediately when I</font>

42
00:02:10,530 --> 00:02:14,400
released this one<font color="#CCCCCC"> into the</font><font color="#E5E5E5"> public</font><font color="#CCCCCC"> even</font>

43
00:02:12,270 --> 00:02:16,830
before<font color="#E5E5E5"> anyone knew it was</font><font color="#CCCCCC"> the zero day</font>

44
00:02:14,400 --> 00:02:18,690
<font color="#E5E5E5">it got like huge media attention and</font>

45
00:02:16,830 --> 00:02:21,660
some of the headlines were like<font color="#E5E5E5"> meltem</font>

46
00:02:18,690 --> 00:02:25,950
fixes from<font color="#CCCCCC"> january and february</font><font color="#E5E5E5"> made pcs</font>

47
00:02:21,660 --> 00:02:28,530
<font color="#CCCCCC">more insecure so let's have a look what</font>

48
00:02:25,950 --> 00:02:30,239
we<font color="#CCCCCC"> can do with</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> let's dump the</font>

49
00:02:28,530 --> 00:02:33,150
entire physical<font color="#E5E5E5"> memory of the</font>

50
00:02:30,240 --> 00:02:35,130
system let's insert some evil kernel

51
00:02:33,150 --> 00:02:39,360
implants execute code in the kernel and

52
00:02:35,130 --> 00:02:40,680
let's elevate<font color="#CCCCCC"> to system so here I have a</font>

53
00:02:39,360 --> 00:02:43,230
Windows<font color="#CCCCCC"> 7</font>

54
00:02:40,680 --> 00:02:46,470
vulnerable<font color="#E5E5E5"> virtual machine with the</font><font color="#CCCCCC"> with</font>

55
00:02:43,230 --> 00:02:49,590
the<font color="#E5E5E5"> January patches and as we can</font><font color="#CCCCCC"> see</font>

56
00:02:46,470 --> 00:02:51,920
here I'm not<font color="#E5E5E5"> cheating here I'm not admin</font>

57
00:02:49,590 --> 00:02:57,510
since I'm prompted<font color="#E5E5E5"> for a password here</font>

58
00:02:51,920 --> 00:02:59,820
so if we<font color="#E5E5E5"> try to dump the memory you're</font>

59
00:02:57,510 --> 00:03:01,500
dumping at the<font color="#E5E5E5"> memory of the few hundred</font>

60
00:02:59,820 --> 00:03:03,180
megabytes per second<font color="#E5E5E5"> here and this is</font>

61
00:03:01,500 --> 00:03:05,190
because we are<font color="#E5E5E5"> running in a kind of slow</font>

62
00:03:03,180 --> 00:03:07,020
virtual machine here<font color="#CCCCCC"> if you're running a</font>

63
00:03:05,190 --> 00:03:10,290
real Iron Hardware it's usually a lot

64
00:03:07,020 --> 00:03:12,570
<font color="#E5E5E5">faster we're also able to execute code</font>

65
00:03:10,290 --> 00:03:14,760
in the kernel<font color="#E5E5E5"> and this is the same kind</font>

66
00:03:12,570 --> 00:03:17,010
<font color="#E5E5E5">of</font><font color="#CCCCCC"> PCL each</font><font color="#E5E5E5"> kernel modules that I</font>

67
00:03:14,760 --> 00:03:19,859
previously demoed here at<font color="#CCCCCC"> sakti in the</font>

68
00:03:17,010 --> 00:03:24,299
previous years<font color="#E5E5E5"> so now we have kernel</font>

69
00:03:19,860 --> 00:03:27,240
code execution<font color="#E5E5E5"> as a normal user it's</font>

70
00:03:24,300 --> 00:03:30,960
also rather easy to elevate to system

71
00:03:27,240 --> 00:03:35,220
<font color="#E5E5E5">and</font><font color="#CCCCCC"> yaqoob</font><font color="#E5E5E5"> we are just clicking on a</font>

72
00:03:30,960 --> 00:03:36,990
file<font color="#E5E5E5"> like that and I mean this is not</font>

73
00:03:35,220 --> 00:03:40,260
<font color="#E5E5E5">supposed to be able to</font><font color="#CCCCCC"> happen as a</font>

74
00:03:36,990 --> 00:03:42,930
normal user to be able<font color="#CCCCCC"> to do this in</font>

75
00:03:40,260 --> 00:03:44,340
Windows<font color="#CCCCCC"> 7 or 2008 or 2 so what is</font><font color="#E5E5E5"> going</font>

76
00:03:42,930 --> 00:03:47,850
<font color="#E5E5E5">on here and that's why I tried to</font>

77
00:03:44,340 --> 00:03:50,520
<font color="#E5E5E5">explain this presentation</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> first</font>

78
00:03:47,850 --> 00:03:54,030
let's have a look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> meltdown it was a</font>

79
00:03:50,520 --> 00:03:56,640
<font color="#E5E5E5">CPU bug it that only affected Intel CPUs</font>

80
00:03:54,030 --> 00:03:58,500
it was called<font color="#CCCCCC"> meltem because it melted</font>

81
00:03:56,640 --> 00:04:00,119
security boundaries which were normal

82
00:03:58,500 --> 00:04:02,820
and forced by the hard work

83
00:04:00,120 --> 00:04:05,220
it allowed low<font color="#CCCCCC"> privileged processes to</font>

84
00:04:02,820 --> 00:04:08,310
disclose that<font color="#E5E5E5"> means to read privileged</font>

85
00:04:05,220 --> 00:04:11,070
virtual memory such as<font color="#E5E5E5"> kernel memory</font><font color="#CCCCCC"> if</font>

86
00:04:08,310 --> 00:04:13,830
it was<font color="#E5E5E5"> residing within the same page</font>

87
00:04:11,070 --> 00:04:15,299
table here<font color="#E5E5E5"> key as the</font><font color="#CCCCCC"> low privileged</font>

88
00:04:13,830 --> 00:04:17,400
code that was trying<font color="#E5E5E5"> to</font><font color="#CCCCCC"> read the</font>

89
00:04:15,300 --> 00:04:20,130
privileged memory<font color="#CCCCCC"> and you could do</font><font color="#E5E5E5"> this</font>

90
00:04:17,399 --> 00:04:24,109
<font color="#E5E5E5">up to speeds around 500 kilobytes per</font>

91
00:04:20,130 --> 00:04:26,610
second under very optimal circumstances

92
00:04:24,110 --> 00:04:29,690
<font color="#CCCCCC">Melton was independently discovered by</font>

93
00:04:26,610 --> 00:04:32,160
three teams back in<font color="#E5E5E5"> 2017</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it led to a</font>

94
00:04:29,690 --> 00:04:34,140
coordinated disclosure<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the patch</font>

95
00:04:32,160 --> 00:04:39,780
releases from operating system vendors

96
00:04:34,140 --> 00:04:41,820
<font color="#E5E5E5">in January 2018 this year in order to</font><font color="#CCCCCC"> be</font>

97
00:04:39,780 --> 00:04:43,650
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to understand what's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> on with</font>

98
00:04:41,820 --> 00:04:45,780
the demo we saw earlier on

99
00:04:43,650 --> 00:04:47,849
we need to have a look how paging works

100
00:04:45,780 --> 00:04:51,780
in a modern that computer how<font color="#CCCCCC"> sixty</font>

101
00:04:47,850 --> 00:04:54,990
<font color="#CCCCCC">four-bit</font><font color="#E5E5E5"> paging works memory in a</font>

102
00:04:51,780 --> 00:04:56,489
computer<font color="#CCCCCC"> it's physical</font><font color="#E5E5E5"> and the physical</font>

103
00:04:54,990 --> 00:04:58,080
address<font color="#CCCCCC"> space</font><font color="#E5E5E5"> you have one physical</font>

104
00:04:56,490 --> 00:05:00,090
address space<font color="#CCCCCC"> which ranged</font><font color="#E5E5E5"> from the</font>

105
00:04:58,080 --> 00:05:03,240
address<font color="#CCCCCC"> zero to approximately</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> amount</font>

106
00:05:00,090 --> 00:05:05,760
<font color="#CCCCCC">of ram you do have in the system</font><font color="#E5E5E5"> CPU</font>

107
00:05:03,240 --> 00:05:07,979
<font color="#CCCCCC">cores however they execute your code and</font>

108
00:05:05,760 --> 00:05:10,650
work on their data with virtual

109
00:05:07,979 --> 00:05:13,080
addresses and you<font color="#CCCCCC"> have one virtual</font>

110
00:05:10,650 --> 00:05:16,380
address space per process in the system

111
00:05:13,080 --> 00:05:19,080
<font color="#CCCCCC">a user mode</font><font color="#E5E5E5"> address looks something like</font>

112
00:05:16,380 --> 00:05:21,180
this and a kernel address looks

113
00:05:19,080 --> 00:05:24,948
something like this<font color="#CCCCCC"> a kernel address a</font>

114
00:05:21,180 --> 00:05:27,330
traditional<font color="#CCCCCC"> store switch</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> s and</font>

115
00:05:24,949 --> 00:05:30,419
what's<font color="#E5E5E5"> going on here is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> have a</font>

116
00:05:27,330 --> 00:05:32,520
<font color="#E5E5E5">CPU core CPU cores that is executing</font>

117
00:05:30,419 --> 00:05:36,510
code and doing stuff with the lab data

118
00:05:32,520 --> 00:05:38,430
and in between<font color="#E5E5E5"> the CPU core and the main</font>

119
00:05:36,510 --> 00:05:41,789
<font color="#CCCCCC">memory you</font><font color="#E5E5E5"> do have a memory management</font>

120
00:05:38,430 --> 00:05:44,250
unit which is translating pages of

121
00:05:41,789 --> 00:05:46,620
memory<font color="#E5E5E5"> that's what is called paging and</font>

122
00:05:44,250 --> 00:05:50,639
a page is<font color="#CCCCCC"> four kilobyte four kilobyte</font>

123
00:05:46,620 --> 00:05:53,370
page<font color="#E5E5E5"> size chunk of memory and it's</font>

124
00:05:50,639 --> 00:05:56,430
transparently<font color="#E5E5E5"> translating the virtual</font>

125
00:05:53,370 --> 00:05:57,990
<font color="#E5E5E5">memory into physical memory and in order</font>

126
00:05:56,430 --> 00:05:59,789
to<font color="#E5E5E5"> be able to do this it</font><font color="#CCCCCC"> has some</font>

127
00:05:57,990 --> 00:06:03,000
look-up tables which<font color="#E5E5E5"> are called page</font>

128
00:05:59,789 --> 00:06:07,200
tables which are also four kilobyte

129
00:06:03,000 --> 00:06:10,650
<font color="#E5E5E5">sized page sized if you take a virtual</font>

130
00:06:07,200 --> 00:06:13,169
<font color="#CCCCCC">address for example this one we can</font>

131
00:06:10,650 --> 00:06:16,888
display it in binary<font color="#E5E5E5"> we can divide it</font>

132
00:06:13,169 --> 00:06:20,400
into different<font color="#E5E5E5"> sections the topmost</font><font color="#CCCCCC"> 16</font>

133
00:06:16,889 --> 00:06:23,789
bits<font color="#E5E5E5"> are just a sign extension of bit 47</font>

134
00:06:20,400 --> 00:06:27,000
<font color="#E5E5E5">so it's always the same as bit 4 to 7 so</font>

135
00:06:23,789 --> 00:06:29,699
if bit 47 is 0 all these bits<font color="#CCCCCC"> are</font><font color="#E5E5E5"> 0</font>

136
00:06:27,000 --> 00:06:32,940
<font color="#CCCCCC">otherwise they</font><font color="#E5E5E5"> are one if bits 47 is</font><font color="#CCCCCC"> 1</font>

137
00:06:29,699 --> 00:06:38,099
so in<font color="#CCCCCC"> reality we do only</font><font color="#E5E5E5"> have a 48-bit</font>

138
00:06:32,940 --> 00:06:40,740
<font color="#E5E5E5">virtual address space</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> 12 lowest bits</font>

139
00:06:38,099 --> 00:06:43,979
in the virtual address<font color="#E5E5E5"> are used to</font>

140
00:06:40,740 --> 00:06:47,039
address<font color="#E5E5E5"> within this</font><font color="#CCCCCC"> four kilobyte page</font>

141
00:06:43,979 --> 00:06:51,780
that<font color="#E5E5E5"> I was talking about earlier on to</font>

142
00:06:47,039 --> 00:06:55,890
address<font color="#CCCCCC"> on a byte level the topmost nine</font>

143
00:06:51,780 --> 00:06:57,359
significant bits is<font color="#E5E5E5"> the index of a page</font>

144
00:06:55,890 --> 00:07:00,870
<font color="#E5E5E5">table entry or order</font>

145
00:06:57,360 --> 00:07:03,330
<font color="#CCCCCC">PML for entry in the top most paging</font>

146
00:07:00,870 --> 00:07:05,909
level in the paging hierarchic also

147
00:07:03,330 --> 00:07:12,568
called the page mapping level<font color="#CCCCCC"> 4 at level</font>

148
00:07:05,909 --> 00:07:17,819
4<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this case it's index 493 or 1</font>

149
00:07:12,569 --> 00:07:20,729
<font color="#E5E5E5">EDX the following</font><font color="#CCCCCC"> 9 bits are the index</font>

150
00:07:17,819 --> 00:07:22,650
in the level 3<font color="#CCCCCC"> paging table in the page</font>

151
00:07:20,729 --> 00:07:25,949
in our key<font color="#E5E5E5"> also called the page director</font>

152
00:07:22,650 --> 00:07:29,340
pointer table the following<font color="#CCCCCC"> 9</font><font color="#E5E5E5"> bits are</font>

153
00:07:25,949 --> 00:07:31,259
the index in the level 2 level in the

154
00:07:29,340 --> 00:07:34,710
page in hierarchy<font color="#E5E5E5"> also called the page</font>

155
00:07:31,259 --> 00:07:37,139
<font color="#E5E5E5">directory and the following</font><font color="#CCCCCC"> 9 bits are</font>

156
00:07:34,710 --> 00:07:42,719
the<font color="#E5E5E5"> index in the actual page table</font>

157
00:07:37,139 --> 00:07:45,300
itself you<font color="#E5E5E5"> have</font><font color="#CCCCCC"> AP ml 4 at the very top</font>

158
00:07:42,719 --> 00:07:50,909
at the<font color="#CCCCCC"> 4th</font><font color="#E5E5E5"> level in the</font><font color="#CCCCCC"> paging</font><font color="#E5E5E5"> here</font><font color="#CCCCCC"> key</font>

159
00:07:45,300 --> 00:07:55,800
<font color="#E5E5E5">and every paging table has 512 entries 8</font>

160
00:07:50,909 --> 00:07:59,969
byte each or 64 bits<font color="#E5E5E5"> each and the base</font>

161
00:07:55,800 --> 00:08:02,219
<font color="#CCCCCC">of the PM l4</font><font color="#E5E5E5"> is located by the CPU</font><font color="#CCCCCC"> or</font>

162
00:07:59,969 --> 00:08:05,400
<font color="#CCCCCC">the memory</font><font color="#E5E5E5"> management unit by the cr3</font>

163
00:08:02,219 --> 00:08:08,400
register in the<font color="#E5E5E5"> cpu which contains the</font>

164
00:08:05,400 --> 00:08:12,409
physical<font color="#CCCCCC"> address</font><font color="#E5E5E5"> of the base</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> PML</font>

165
00:08:08,400 --> 00:08:15,299
for the<font color="#E5E5E5"> PM l4 is traditional split into</font>

166
00:08:12,409 --> 00:08:17,879
two parts<font color="#E5E5E5"> while the lower part is</font>

167
00:08:15,300 --> 00:08:20,339
reserved for user mode code<font color="#E5E5E5"> while the</font>

168
00:08:17,879 --> 00:08:24,419
upper part<font color="#E5E5E5"> is reserved for kernel code</font>

169
00:08:20,339 --> 00:08:26,639
and if we look at a page<font color="#E5E5E5"> table entry</font>

170
00:08:24,419 --> 00:08:28,650
they might be blank here or they might

171
00:08:26,639 --> 00:08:31,770
point<font color="#CCCCCC"> to two different levels in the</font>

172
00:08:28,650 --> 00:08:33,478
<font color="#E5E5E5">page in hierarchy after this but if</font><font color="#CCCCCC"> we</font>

173
00:08:31,770 --> 00:08:36,478
<font color="#E5E5E5">look at the random</font><font color="#CCCCCC"> entry for example</font>

174
00:08:33,479 --> 00:08:40,800
this one we have some bits in red here

175
00:08:36,479 --> 00:08:42,990
which are usually<font color="#E5E5E5"> permission bits and if</font>

176
00:08:40,799 --> 00:08:47,699
you read this one the<font color="#E5E5E5"> three at the</font><font color="#CCCCCC"> end</font>

177
00:08:42,990 --> 00:08:50,370
it<font color="#E5E5E5"> means that this one is present</font><font color="#CCCCCC"> its</font>

178
00:08:47,699 --> 00:08:52,890
read writable and it's only accessible

179
00:08:50,370 --> 00:08:56,130
<font color="#E5E5E5">from supervisor code that this kernel</font>

180
00:08:52,890 --> 00:08:58,680
code<font color="#E5E5E5"> during zero code so it's not</font>

181
00:08:56,130 --> 00:09:00,329
accessible from<font color="#E5E5E5"> user mode code this</font>

182
00:08:58,680 --> 00:09:06,149
memory region that is pointed<font color="#CCCCCC"> by this</font>

183
00:09:00,329 --> 00:09:08,910
<font color="#E5E5E5">entry the numbers in black here is the</font>

184
00:09:06,149 --> 00:09:11,250
physical<font color="#CCCCCC"> address in main memory of the</font>

185
00:09:08,910 --> 00:09:14,640
next<font color="#E5E5E5"> level in the paging hierarchy</font>

186
00:09:11,250 --> 00:09:16,230
and in<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> we need to know that</font>

187
00:09:14,640 --> 00:09:18,480
<font color="#E5E5E5">everything else wall so stored in</font>

188
00:09:16,230 --> 00:09:22,260
little-endian so the<font color="#E5E5E5"> byte order is</font>

189
00:09:18,480 --> 00:09:24,780
reversed<font color="#CCCCCC"> so the last byte is 63 at the</font>

190
00:09:22,260 --> 00:09:27,900
end it's<font color="#CCCCCC"> stored first in memory the next</font>

191
00:09:24,780 --> 00:09:32,670
<font color="#E5E5E5">last byte is stored second in memory and</font>

192
00:09:27,900 --> 00:09:34,650
so<font color="#CCCCCC"> on</font><font color="#E5E5E5"> if you take</font><font color="#CCCCCC"> me for example this</font>

193
00:09:32,670 --> 00:09:36,180
entry it was pointing<font color="#CCCCCC"> to</font><font color="#E5E5E5"> watch the next</font>

194
00:09:34,650 --> 00:09:38,520
level in<font color="#E5E5E5"> the page</font><font color="#CCCCCC"> seen</font><font color="#E5E5E5"> here key the page</font>

195
00:09:36,180 --> 00:09:41,430
<font color="#CCCCCC">director point your table</font><font color="#E5E5E5"> and this one</font>

196
00:09:38,520 --> 00:09:43,890
has a page<font color="#E5E5E5"> table entry and page director</font>

197
00:09:41,430 --> 00:09:46,439
point your table<font color="#E5E5E5"> pointed by the virtual</font>

198
00:09:43,890 --> 00:09:48,510
<font color="#E5E5E5">address and it goes on like</font><font color="#CCCCCC"> that until</font>

199
00:09:46,440 --> 00:09:50,730
we reach<font color="#CCCCCC"> the actual four kilobyte page</font>

200
00:09:48,510 --> 00:09:52,950
which is containing<font color="#E5E5E5"> the data and then we</font>

201
00:09:50,730 --> 00:09:57,000
<font color="#E5E5E5">can address within that page of the last</font>

202
00:09:52,950 --> 00:09:59,790
<font color="#E5E5E5">12 bits in the virtual address</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it</font>

203
00:09:57,000 --> 00:10:03,120
turns out<font color="#CCCCCC"> that</font><font color="#E5E5E5"> this specific address has</font>

204
00:09:59,790 --> 00:10:06,089
a very special<font color="#E5E5E5"> meaning in Windows 7 it's</font>

205
00:10:03,120 --> 00:10:09,900
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> windows</font><font color="#E5E5E5"> 7th self-referential</font>

206
00:10:06,090 --> 00:10:13,140
entry is toward a<font color="#CCCCCC"> tween index 1 edy hex</font>

207
00:10:09,900 --> 00:10:16,650
or at index 493 in the table here<font color="#CCCCCC"> and</font>

208
00:10:13,140 --> 00:10:18,870
this means that<font color="#E5E5E5"> the page directory</font>

209
00:10:16,650 --> 00:10:20,850
pointer table<font color="#E5E5E5"> that is pointed</font><font color="#CCCCCC"> by the PML</font>

210
00:10:18,870 --> 00:10:23,580
for entry<font color="#E5E5E5"> its points to the same</font>

211
00:10:20,850 --> 00:10:26,490
<font color="#E5E5E5">physical address as the</font><font color="#CCCCCC"> PML for</font><font color="#E5E5E5"> itself</font>

212
00:10:23,580 --> 00:10:28,680
<font color="#E5E5E5">so this means that in effectively</font><font color="#CCCCCC"> will</font>

213
00:10:26,490 --> 00:10:30,089
this paging<font color="#CCCCCC"> structure</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> female</font><font color="#E5E5E5"> for</font>

214
00:10:28,680 --> 00:10:31,469
page<font color="#CCCCCC"> director pointer table page</font>

215
00:10:30,089 --> 00:10:33,990
directory<font color="#E5E5E5"> page table and the page</font>

216
00:10:31,470 --> 00:10:36,630
containing the<font color="#E5E5E5"> data itself is stored in</font>

217
00:10:33,990 --> 00:10:39,870
the very same<font color="#CCCCCC"> location in memory for</font>

218
00:10:36,630 --> 00:10:41,550
this specific entry and from this

219
00:10:39,870 --> 00:10:43,589
follows that if you alter the contents

220
00:10:41,550 --> 00:10:47,780
of<font color="#E5E5E5"> one of these you alter the contents</font>

221
00:10:43,589 --> 00:10:51,900
of all<font color="#E5E5E5"> of these since they are the same</font>

222
00:10:47,780 --> 00:10:54,480
if we<font color="#CCCCCC"> look at the fix for meltdown what</font>

223
00:10:51,900 --> 00:10:58,439
the operating<font color="#E5E5E5"> system vendors did they</font>

224
00:10:54,480 --> 00:11:01,350
created a second<font color="#E5E5E5"> purpose page table to</font>

225
00:10:58,440 --> 00:11:03,510
resolve<font color="#CCCCCC"> meltdown and this second page</font>

226
00:11:01,350 --> 00:11:05,790
table it was<font color="#E5E5E5"> resolved for user mode</font>

227
00:11:03,510 --> 00:11:08,390
killed and it only<font color="#E5E5E5"> contained a very</font>

228
00:11:05,790 --> 00:11:11,790
<font color="#E5E5E5">small very uninteresting kernel stub</font>

229
00:11:08,390 --> 00:11:14,460
<font color="#E5E5E5">whose only purpose was to switch back</font>

230
00:11:11,790 --> 00:11:16,650
<font color="#E5E5E5">into the old page table that contained</font>

231
00:11:14,460 --> 00:11:19,950
the whole kernel whenever you were doing

232
00:11:16,650 --> 00:11:23,490
<font color="#CCCCCC">is called and the old page table was</font>

233
00:11:19,950 --> 00:11:25,260
pretty kept pretty<font color="#E5E5E5"> much as is</font><font color="#CCCCCC"> Windows</font>

234
00:11:23,490 --> 00:11:28,380
decided to keep<font color="#E5E5E5"> itself</font>

235
00:11:25,260 --> 00:11:31,740
<font color="#CCCCCC">entra in both tables</font><font color="#E5E5E5"> Linux and Mac OS</font>

236
00:11:28,380 --> 00:11:33,570
<font color="#E5E5E5">employed similar fixes and what's</font>

237
00:11:31,740 --> 00:11:35,550
important to<font color="#E5E5E5"> know is</font><font color="#CCCCCC"> that this context</font>

238
00:11:33,570 --> 00:11:37,710
switching between the paging tables<font color="#E5E5E5"> it</font>

239
00:11:35,550 --> 00:11:40,920
leads to<font color="#E5E5E5"> a performance loss especially</font>

240
00:11:37,710 --> 00:11:43,560
<font color="#E5E5E5">on older</font><font color="#CCCCCC"> hardware so</font><font color="#E5E5E5"> Windows decided to</font>

241
00:11:40,920 --> 00:11:45,360
go for an optimization here because if

242
00:11:43,560 --> 00:11:47,189
you're<font color="#E5E5E5"> running a</font><font color="#CCCCCC"> system or admin in</font>

243
00:11:45,360 --> 00:11:49,440
Windows you're already able to load

244
00:11:47,190 --> 00:11:51,750
drivers<font color="#E5E5E5"> into the kernel by design and</font>

245
00:11:49,440 --> 00:11:53,310
drivers can<font color="#E5E5E5"> read kernel memory</font><font color="#CCCCCC"> and</font>

246
00:11:51,750 --> 00:11:56,520
that's really<font color="#E5E5E5"> what smell town is about</font>

247
00:11:53,310 --> 00:12:00,000
<font color="#E5E5E5">so it's really no idea</font><font color="#CCCCCC"> to protect it</font><font color="#E5E5E5"> for</font>

248
00:11:56,520 --> 00:12:01,500
meltdown for admin processes in Windows

249
00:12:00,000 --> 00:12:03,900
since you're already able<font color="#CCCCCC"> to read the</font>

250
00:12:01,500 --> 00:12:05,700
<font color="#CCCCCC">memory in much more efficient ways so</font>

251
00:12:03,900 --> 00:12:08,310
<font color="#CCCCCC">Windows</font><font color="#E5E5E5"> kept its old way of doing things</font>

252
00:12:05,700 --> 00:12:10,620
<font color="#CCCCCC">the more efficient way</font><font color="#E5E5E5"> for admin</font>

253
00:12:08,310 --> 00:12:13,410
processes and only applied the meltdown

254
00:12:10,620 --> 00:12:17,820
fixes for user mode processes<font color="#E5E5E5"> low</font>

255
00:12:13,410 --> 00:12:20,610
<font color="#E5E5E5">privileged processes let's also have a</font>

256
00:12:17,820 --> 00:12:23,760
look at the PCL each memory process file

257
00:12:20,610 --> 00:12:26,040
system which I created<font color="#E5E5E5"> the month before</font>

258
00:12:23,760 --> 00:12:30,300
<font color="#E5E5E5">I found a total meltdown</font>

259
00:12:26,040 --> 00:12:32,730
it's a<font color="#E5E5E5"> proc style file system it's</font><font color="#CCCCCC"> very</font>

260
00:12:30,300 --> 00:12:35,760
focused<font color="#E5E5E5"> on Windows at the moment on</font>

261
00:12:32,730 --> 00:12:38,850
analyzing<font color="#E5E5E5"> Windows dumps it works really</font>

262
00:12:35,760 --> 00:12:41,490
well<font color="#CCCCCC"> on Windows 7</font><font color="#E5E5E5"> 8</font><font color="#CCCCCC"> and 10</font><font color="#E5E5E5"> memory it has</font>

263
00:12:38,850 --> 00:12:45,030
<font color="#E5E5E5">some very limited support for address</font>

264
00:12:41,490 --> 00:12:48,810
64-bit operating systems as well and if

265
00:12:45,030 --> 00:12:52,520
you run it<font color="#E5E5E5"> with</font><font color="#CCCCCC"> an evil PC elite of PDA</font>

266
00:12:48,810 --> 00:12:55,560
device that is able<font color="#E5E5E5"> to do DNA into a</font>

267
00:12:52,520 --> 00:12:57,870
target or victim computer here<font color="#E5E5E5"> you can</font>

268
00:12:55,560 --> 00:13:00,209
actually<font color="#E5E5E5"> do both reads and writes</font><font color="#CCCCCC"> to</font>

269
00:12:57,870 --> 00:13:02,670
<font color="#E5E5E5">process virtual memory via this file</font>

270
00:13:00,210 --> 00:13:06,240
<font color="#E5E5E5">system if you're</font><font color="#CCCCCC"> working with a memory</font>

271
00:13:02,670 --> 00:13:08,579
dump<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> it's really fast I</font>

272
00:13:06,240 --> 00:13:11,640
<font color="#CCCCCC">try</font><font color="#E5E5E5"> to make it so</font><font color="#CCCCCC"> intelligent to analyze</font>

273
00:13:08,580 --> 00:13:15,840
this several<font color="#E5E5E5"> gigabytes in a per second</font>

274
00:13:11,640 --> 00:13:18,569
<font color="#E5E5E5">and it consists of a translation layer</font>

275
00:13:15,840 --> 00:13:21,600
that processes virtual memory<font color="#E5E5E5"> into</font>

276
00:13:18,570 --> 00:13:24,570
physical memory<font color="#CCCCCC"> it does this</font><font color="#E5E5E5"> by first</font>

277
00:13:21,600 --> 00:13:29,040
locating the page table base or the<font color="#E5E5E5"> PM</font>

278
00:13:24,570 --> 00:13:32,250
l4 of the kernel itself once it's done

279
00:13:29,040 --> 00:13:35,040
this<font color="#E5E5E5"> it's able to map out the kernel</font>

280
00:13:32,250 --> 00:13:37,320
virtual memory<font color="#E5E5E5"> and hunt for a structure</font>

281
00:13:35,040 --> 00:13:38,420
called<font color="#E5E5E5"> a process which is</font><font color="#CCCCCC"> the process</font>

282
00:13:37,320 --> 00:13:40,760
specific

283
00:13:38,420 --> 00:13:43,790
structure that's actually linked list so

284
00:13:40,760 --> 00:13:46,730
we<font color="#E5E5E5"> can walk this process and enumerate</font>

285
00:13:43,790 --> 00:13:49,579
the process names the<font color="#E5E5E5"> peds</font><font color="#CCCCCC"> and more</font>

286
00:13:46,730 --> 00:13:53,750
importantly page table<font color="#E5E5E5"> basis</font><font color="#CCCCCC"> DPM</font><font color="#E5E5E5"> and</font>

287
00:13:49,579 --> 00:13:55,760
worse of<font color="#E5E5E5"> each process</font><font color="#CCCCCC"> and once we</font><font color="#E5E5E5"> walk</font>

288
00:13:53,750 --> 00:13:58,130
<font color="#E5E5E5">this process you have a list of</font>

289
00:13:55,760 --> 00:14:00,170
<font color="#CCCCCC">processes and</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> each process we can</font>

290
00:13:58,130 --> 00:14:02,600
<font color="#CCCCCC">create a memory map of the virtual</font>

291
00:14:00,170 --> 00:14:05,389
memory<font color="#E5E5E5"> by walking</font><font color="#CCCCCC"> the page table and we</font>

292
00:14:02,600 --> 00:14:08,389
can also display<font color="#E5E5E5"> the process virtual</font>

293
00:14:05,389 --> 00:14:09,139
memory as a virtual file<font color="#E5E5E5"> in this file</font>

294
00:14:08,389 --> 00:14:12,680
<font color="#CCCCCC">system</font>

295
00:14:09,139 --> 00:14:15,290
I also added<font color="#E5E5E5"> in memory parsing of</font><font color="#CCCCCC"> est</font>

296
00:14:12,680 --> 00:14:16,729
<font color="#E5E5E5">exists and dll's and to display them as</font>

297
00:14:15,290 --> 00:14:19,250
files and directories in this file

298
00:14:16,730 --> 00:14:22,760
system<font color="#E5E5E5"> so let's have a look at it</font>

299
00:14:19,250 --> 00:14:25,399
let's analyze over<font color="#CCCCCC"> 32 jigs in just a few</font>

300
00:14:22,760 --> 00:14:27,649
seconds<font color="#CCCCCC"> let's enumerate processes and</font>

301
00:14:25,399 --> 00:14:31,449
load the<font color="#CCCCCC"> DLL and let's</font><font color="#E5E5E5"> look at the</font>

302
00:14:27,649 --> 00:14:31,449
<font color="#E5E5E5">memory map and</font><font color="#CCCCCC"> it's virtual memory</font>

303
00:14:33,760 --> 00:14:40,040
switch over to the<font color="#E5E5E5"> demo here and here I</font>

304
00:14:37,279 --> 00:14:43,779
have a<font color="#E5E5E5"> memory dump it's rather big here</font>

305
00:14:40,040 --> 00:14:47,060
<font color="#E5E5E5">it's well over 32 gigs at least and</font>

306
00:14:43,779 --> 00:14:50,300
let's mount it in this file<font color="#E5E5E5"> system</font><font color="#CCCCCC"> it</font>

307
00:14:47,060 --> 00:14:57,410
says<font color="#E5E5E5"> it's mounted as</font><font color="#CCCCCC"> ok here let's go</font>

308
00:14:50,300 --> 00:14:59,899
<font color="#E5E5E5">into him</font><font color="#CCCCCC"> ok and here I have the</font><font color="#E5E5E5"> actual</font>

309
00:14:57,410 --> 00:15:02,300
physical memory of the file<font color="#E5E5E5"> is mounted</font>

310
00:14:59,899 --> 00:15:04,310
displayed as a file here it might not be

311
00:15:02,300 --> 00:15:06,079
a dis useful if you<font color="#E5E5E5"> running it with</font>

312
00:15:04,310 --> 00:15:09,529
against a file but if you're running<font color="#E5E5E5"> it</font>

313
00:15:06,079 --> 00:15:11,569
against a live<font color="#E5E5E5"> device on a target via</font>

314
00:15:09,529 --> 00:15:14,570
the FPGA<font color="#E5E5E5"> or the other total meltdown</font>

315
00:15:11,570 --> 00:15:16,279
vulnerability<font color="#E5E5E5"> it's quite useful</font><font color="#CCCCCC"> if you</font>

316
00:15:14,570 --> 00:15:21,199
click into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> proc folder and sort the</font>

317
00:15:16,279 --> 00:15:23,240
processes by name<font color="#CCCCCC"> its tries to enumerate</font>

318
00:15:21,199 --> 00:15:24,859
the processes on the<font color="#E5E5E5"> fly here so this is</font>

319
00:15:23,240 --> 00:15:29,720
the processes<font color="#E5E5E5"> that is running in this</font>

320
00:15:24,860 --> 00:15:35,050
memory<font color="#CCCCCC"> dump let's</font><font color="#E5E5E5"> select a process for</font>

321
00:15:29,720 --> 00:15:37,519
<font color="#E5E5E5">example</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> powershell process here and</font>

322
00:15:35,050 --> 00:15:42,439
here we display lots of information

323
00:15:37,519 --> 00:15:45,019
<font color="#E5E5E5">about the process as files so you can</font>

324
00:15:42,440 --> 00:15:47,269
use<font color="#E5E5E5"> your favorite editorials editing the</font>

325
00:15:45,019 --> 00:15:48,800
files we can<font color="#E5E5E5"> check its name or we can</font>

326
00:15:47,269 --> 00:15:51,180
look<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> memory map</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> just talked</font>

327
00:15:48,800 --> 00:15:57,380
about earlier<font color="#E5E5E5"> on</font>

328
00:15:51,180 --> 00:15:59,729
and the memory map is<font color="#E5E5E5"> here it comes</font><font color="#CCCCCC"> it's</font>

329
00:15:57,380 --> 00:16:02,430
<font color="#CCCCCC">actually working the whole page table</font>

330
00:15:59,730 --> 00:16:04,650
here to be able<font color="#E5E5E5"> to create this memory</font>

331
00:16:02,430 --> 00:16:06,359
map and here we see the<font color="#E5E5E5"> memory regions</font>

332
00:16:04,650 --> 00:16:09,300
within the<font color="#E5E5E5"> powershell if it's readable</font>

333
00:16:06,360 --> 00:16:11,460
<font color="#E5E5E5">read</font><font color="#CCCCCC"> only read write or</font><font color="#E5E5E5"> even read write</font>

334
00:16:09,300 --> 00:16:15,300
<font color="#CCCCCC">execute maybe and if you scroll down a</font>

335
00:16:11,460 --> 00:16:17,870
bit<font color="#E5E5E5"> we see the powershell dot exe here</font>

336
00:16:15,300 --> 00:16:20,640
and it's where the exe<font color="#CCCCCC"> is loaded in the</font>

337
00:16:17,870 --> 00:16:22,530
memory<font color="#CCCCCC"> space of</font><font color="#E5E5E5"> the process</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you</font>

338
00:16:20,640 --> 00:16:25,319
scroll down<font color="#CCCCCC"> we see all the</font><font color="#E5E5E5"> DLLs and</font>

339
00:16:22,530 --> 00:16:28,260
things like that loaded as well and this

340
00:16:25,320 --> 00:16:33,480
is fetched from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual page table</font>

341
00:16:28,260 --> 00:16:36,150
itself<font color="#E5E5E5"> that their</font><font color="#CCCCCC"> cpu sees and we can</font>

342
00:16:33,480 --> 00:16:39,150
also click into<font color="#E5E5E5"> the modules directory</font>

343
00:16:36,150 --> 00:16:40,860
<font color="#E5E5E5">here we see the different dll's that's</font>

344
00:16:39,150 --> 00:16:42,990
in the<font color="#CCCCCC"> process</font><font color="#E5E5E5"> and mounted</font><font color="#CCCCCC"> as</font>

345
00:16:40,860 --> 00:16:46,170
directories here<font color="#E5E5E5"> and we can do things</font>

346
00:16:42,990 --> 00:16:48,150
like<font color="#E5E5E5"> checking the export directories</font>

347
00:16:46,170 --> 00:16:51,180
which functions are exported from<font color="#E5E5E5"> that</font>

348
00:16:48,150 --> 00:16:53,640
<font color="#CCCCCC">dll</font><font color="#E5E5E5"> by just checking in a file and the</font>

349
00:16:51,180 --> 00:16:55,949
<font color="#E5E5E5">addresses</font><font color="#CCCCCC"> where those</font><font color="#E5E5E5"> are found can</font>

350
00:16:53,640 --> 00:16:58,319
check which functions are imported by

351
00:16:55,950 --> 00:17:01,740
this<font color="#CCCCCC"> dll as well it's also displays as</font>

352
00:16:58,320 --> 00:17:09,420
files like sections and directories and

353
00:17:01,740 --> 00:17:14,339
<font color="#CCCCCC">things like that and we can also</font><font color="#E5E5E5"> let's</font>

354
00:17:09,420 --> 00:17:18,180
have a look at the directory<font color="#E5E5E5"> here do</font>

355
00:17:14,339 --> 00:17:20,490
like this and<font color="#E5E5E5"> one very big file if you</font>

356
00:17:18,180 --> 00:17:22,500
<font color="#E5E5E5">check the powershell director he'll will</font>

357
00:17:20,490 --> 00:17:24,959
the be mem it's actually the virtual

358
00:17:22,500 --> 00:17:27,900
memory<font color="#CCCCCC"> and it's mounted as a file so you</font>

359
00:17:24,959 --> 00:17:30,090
<font color="#E5E5E5">can</font><font color="#CCCCCC"> use your</font><font color="#E5E5E5"> favorite</font><font color="#CCCCCC"> two to actually</font>

360
00:17:27,900 --> 00:17:32,010
edit<font color="#E5E5E5"> the file or copy memory from it</font>

361
00:17:30,090 --> 00:17:34,560
edit memory and if you<font color="#E5E5E5"> hit save if</font>

362
00:17:32,010 --> 00:17:36,080
you're running<font color="#E5E5E5"> to watch a live device</font><font color="#CCCCCC"> it</font>

363
00:17:34,560 --> 00:17:38,399
will be reflected<font color="#CCCCCC"> into that device</font>

364
00:17:36,080 --> 00:17:41,939
memory does not<font color="#E5E5E5"> existing it's all zeros</font>

365
00:17:38,400 --> 00:17:45,390
<font color="#CCCCCC">so that's kind of an interesting</font><font color="#E5E5E5"> but if</font>

366
00:17:41,940 --> 00:17:48,480
we remember the memory map we can<font color="#CCCCCC"> see</font>

367
00:17:45,390 --> 00:17:50,760
the power shoulder of<font color="#E5E5E5"> exe the base of</font>

368
00:17:48,480 --> 00:17:54,540
the<font color="#CCCCCC"> powershell dot exe for example let's</font>

369
00:17:50,760 --> 00:17:56,370
jump to<font color="#E5E5E5"> that one and we see the MC</font>

370
00:17:54,540 --> 00:17:58,350
header here at the bottom which is<font color="#CCCCCC"> the</font>

371
00:17:56,370 --> 00:18:00,719
PE header for the powershell dot exe

372
00:17:58,350 --> 00:18:01,909
<font color="#E5E5E5">when it's loaded</font><font color="#CCCCCC"> into memory</font><font color="#E5E5E5"> and it</font>

373
00:18:00,720 --> 00:18:04,320
looks<font color="#E5E5E5"> something like that</font>

374
00:18:01,910 --> 00:18:04,710
<font color="#E5E5E5">we have the different sections</font><font color="#CCCCCC"> anthony</font>

375
00:18:04,320 --> 00:18:07,559
so

376
00:18:04,710 --> 00:18:09,840
here and then if you scroll down<font color="#E5E5E5"> a bit</font>

377
00:18:07,559 --> 00:18:19,918
<font color="#E5E5E5">here comes the code for</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> the</font>

378
00:18:09,840 --> 00:18:22,529
<font color="#CCCCCC">PowerShell dot exe process so finding</font>

379
00:18:19,919 --> 00:18:25,200
total<font color="#CCCCCC"> meltem</font><font color="#E5E5E5"> it was just a matter of</font>

380
00:18:22,529 --> 00:18:29,000
clicking<font color="#E5E5E5"> on this memory map and it was</font>

381
00:18:25,200 --> 00:18:31,860
like instantly<font color="#E5E5E5"> visible there and</font><font color="#CCCCCC"> let's</font>

382
00:18:29,000 --> 00:18:33,990
<font color="#CCCCCC">it will turn out that it was mapped into</font>

383
00:18:31,860 --> 00:18:36,449
user mode at the<font color="#E5E5E5"> the specific address</font>

384
00:18:33,990 --> 00:18:38,460
<font color="#CCCCCC">that we checked earlier on</font><font color="#E5E5E5"> but let's run</font>

385
00:18:36,450 --> 00:18:40,110
<font color="#E5E5E5">a demo for</font><font color="#CCCCCC"> that one as well</font><font color="#E5E5E5"> to see</font><font color="#CCCCCC"> what</font>

386
00:18:38,460 --> 00:18:45,020
was<font color="#E5E5E5"> happening here and</font><font color="#CCCCCC"> how I actually</font>

387
00:18:40,110 --> 00:18:48,510
located<font color="#E5E5E5"> the vulnerability as such that's</font>

388
00:18:45,020 --> 00:18:54,230
the memory of<font color="#E5E5E5"> this vulnerable computer</font>

389
00:18:48,510 --> 00:18:59,279
that<font color="#E5E5E5"> we used to look at if we click</font><font color="#CCCCCC"> into</font>

390
00:18:54,230 --> 00:19:01,529
<font color="#CCCCCC">ok here the proc folder names</font><font color="#E5E5E5"> and we can</font>

391
00:18:59,279 --> 00:19:05,659
check the CMD dot exe process here for

392
00:19:01,529 --> 00:19:05,659
<font color="#CCCCCC">example</font><font color="#E5E5E5"> and if you checked in memory map</font>

393
00:19:06,770 --> 00:19:12,029
see<font color="#CCCCCC"> this read-only section we</font><font color="#E5E5E5"> read</font>

394
00:19:09,809 --> 00:19:14,668
sections we see that the cmd.exe is

395
00:19:12,029 --> 00:19:18,090
loaded here we see the<font color="#E5E5E5"> DLLs</font><font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you</font>

396
00:19:14,669 --> 00:19:20,070
scroll<font color="#CCCCCC"> down we see lots of addresses at</font>

397
00:19:18,090 --> 00:19:22,830
<font color="#CCCCCC">the very end that is</font><font color="#E5E5E5"> read write</font><font color="#CCCCCC"> execute</font>

398
00:19:20,070 --> 00:19:24,629
that starts with<font color="#CCCCCC"> four FS and that's</font>

399
00:19:22,830 --> 00:19:28,168
addresses that are typically reserved

400
00:19:24,630 --> 00:19:30,840
for<font color="#E5E5E5"> the kernel and in my file system I</font>

401
00:19:28,169 --> 00:19:33,539
filtered out<font color="#CCCCCC"> the kernel addresses by</font>

402
00:19:30,840 --> 00:19:35,668
default for user mode processes I was

403
00:19:33,539 --> 00:19:37,620
wondering what is going<font color="#CCCCCC"> on here I was</font>

404
00:19:35,669 --> 00:19:39,419
like do I<font color="#CCCCCC"> have a bug in</font><font color="#E5E5E5"> my system</font><font color="#CCCCCC"> I was</font>

405
00:19:37,620 --> 00:19:43,110
<font color="#E5E5E5">like one for bug hunting and I didn't</font>

406
00:19:39,419 --> 00:19:46,950
find anything<font color="#CCCCCC"> so I installed</font><font color="#E5E5E5"> a clean</font>

407
00:19:43,110 --> 00:19:52,549
install of<font color="#CCCCCC"> Windows 7</font><font color="#E5E5E5"> and the issue was</font>

408
00:19:46,950 --> 00:19:57,450
still<font color="#E5E5E5"> there so what is going</font><font color="#CCCCCC"> on here</font>

409
00:19:52,549 --> 00:20:00,418
so let's check<font color="#E5E5E5"> out that go into the CMD</font>

410
00:19:57,450 --> 00:20:04,590
dot exe and<font color="#E5E5E5"> process let's have a look at</font>

411
00:20:00,419 --> 00:20:06,450
<font color="#E5E5E5">it and</font><font color="#CCCCCC"> that we can check the PML for the</font>

412
00:20:04,590 --> 00:20:08,850
base<font color="#E5E5E5"> of the paging table itself</font><font color="#CCCCCC"> it's</font>

413
00:20:06,450 --> 00:20:13,429
stored at this address<font color="#E5E5E5"> in physical</font>

414
00:20:08,850 --> 00:20:15,539
memory<font color="#E5E5E5"> and remember that file that was</font>

415
00:20:13,429 --> 00:20:18,300
containing<font color="#E5E5E5"> the actual physical memory</font>

416
00:20:15,539 --> 00:20:21,420
<font color="#E5E5E5">data exposed the live round file</font>

417
00:20:18,300 --> 00:20:25,020
the<font color="#E5E5E5"> route you're going</font><font color="#CCCCCC"> to hex dump a</font><font color="#E5E5E5"> one</font>

418
00:20:21,420 --> 00:20:28,200
<font color="#CCCCCC">full-size</font><font color="#E5E5E5"> one page the</font><font color="#CCCCCC"> PML for paging</font>

419
00:20:25,020 --> 00:20:32,550
table and let's do<font color="#E5E5E5"> that</font><font color="#CCCCCC"> from that</font>

420
00:20:28,200 --> 00:20:34,290
<font color="#CCCCCC">address the PML</font><font color="#E5E5E5"> for us and if we</font>

421
00:20:32,550 --> 00:20:38,120
<font color="#E5E5E5">remember the little</font><font color="#CCCCCC"> endian</font><font color="#E5E5E5"> and if</font><font color="#CCCCCC"> it's</font>

422
00:20:34,290 --> 00:20:42,330
ended<font color="#E5E5E5"> with a three it was only</font>

423
00:20:38,120 --> 00:20:45,149
accessible<font color="#CCCCCC"> from supervisor</font><font color="#E5E5E5"> code or</font>

424
00:20:42,330 --> 00:20:47,610
kernel code and if it was put as a<font color="#E5E5E5"> seven</font>

425
00:20:45,150 --> 00:20:50,070
<font color="#E5E5E5">it was accessible from user mode code as</font>

426
00:20:47,610 --> 00:20:52,169
well<font color="#CCCCCC"> the lower addresses are like kind</font>

427
00:20:50,070 --> 00:20:54,000
of fine if it's accessible<font color="#E5E5E5"> from user</font>

428
00:20:52,170 --> 00:20:57,800
mode code<font color="#E5E5E5"> it's how it's supposed to be</font>

429
00:20:54,000 --> 00:21:00,450
<font color="#E5E5E5">but address is above the offset 800</font>

430
00:20:57,800 --> 00:21:02,930
they're supposed to<font color="#E5E5E5"> be only accessible</font>

431
00:21:00,450 --> 00:21:08,820
by the kernel but if you<font color="#CCCCCC"> check</font><font color="#E5E5E5"> this</font>

432
00:21:02,930 --> 00:21:11,480
index at<font color="#E5E5E5"> one</font><font color="#CCCCCC"> EDX</font><font color="#E5E5E5"> or f68 this one it's</font>

433
00:21:08,820 --> 00:21:15,480
<font color="#E5E5E5">the</font><font color="#CCCCCC"> PML for self referential entry and</font>

434
00:21:11,480 --> 00:21:17,760
it ends with a<font color="#CCCCCC"> 7 if we're adjusting for</font>

435
00:21:15,480 --> 00:21:19,710
<font color="#CCCCCC">the</font><font color="#E5E5E5"> little</font><font color="#CCCCCC"> endian</font><font color="#E5E5E5"> stuff here and that</font>

436
00:21:17,760 --> 00:21:25,050
means<font color="#E5E5E5"> that</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> accessible from user</font>

437
00:21:19,710 --> 00:21:26,700
mode<font color="#E5E5E5"> and that's our vulnerability so I'm</font>

438
00:21:25,050 --> 00:21:29,690
going to<font color="#E5E5E5"> prepare</font><font color="#CCCCCC"> the next time a little</font>

439
00:21:26,700 --> 00:21:29,690
<font color="#CCCCCC">bit here as well</font>

440
00:21:40,430 --> 00:21:48,559
so the vulnerability was that the<font color="#E5E5E5"> Melton</font>

441
00:21:44,960 --> 00:21:53,300
patch in<font color="#E5E5E5"> January</font><font color="#CCCCCC"> it got one single</font><font color="#E5E5E5"> bit</font>

442
00:21:48,559 --> 00:21:56,240
wrong<font color="#E5E5E5"> it should be</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> 0 bit</font><font color="#CCCCCC"> zero at</font><font color="#E5E5E5"> this</font>

443
00:21:53,300 --> 00:21:58,669
address<font color="#CCCCCC"> but it was a bit one so that</font>

444
00:21:56,240 --> 00:22:02,630
resulted if we<font color="#CCCCCC"> check the</font><font color="#E5E5E5"> Intel manual</font>

445
00:21:58,670 --> 00:22:04,760
that this<font color="#CCCCCC"> PML for self referential entry</font>

446
00:22:02,630 --> 00:22:08,390
and in effect<font color="#CCCCCC"> the whole page in here</font><font color="#E5E5E5"> key</font>

447
00:22:04,760 --> 00:22:11,540
became accessible<font color="#E5E5E5"> from user mode code at</font>

448
00:22:08,390 --> 00:22:15,320
<font color="#CCCCCC">a fixed location</font><font color="#E5E5E5"> in virtual memory</font><font color="#CCCCCC"> for</font>

449
00:22:11,540 --> 00:22:17,570
every process<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the whole system in</font>

450
00:22:15,320 --> 00:22:19,879
<font color="#E5E5E5">order to exploit this one you don't</font>

451
00:22:17,570 --> 00:22:22,520
<font color="#E5E5E5">really need to do any fancy API calls</font>

452
00:22:19,880 --> 00:22:25,250
you can<font color="#E5E5E5"> check for its existence by just</font>

453
00:22:22,520 --> 00:22:27,379
reading<font color="#E5E5E5"> an address</font><font color="#CCCCCC"> if it's</font><font color="#E5E5E5"> working</font>

454
00:22:25,250 --> 00:22:28,850
<font color="#E5E5E5">you're vulnerable</font><font color="#CCCCCC"> if it's not</font><font color="#E5E5E5"> working if</font>

455
00:22:27,380 --> 00:22:31,700
the<font color="#E5E5E5"> program crashes you're not</font>

456
00:22:28,850 --> 00:22:34,699
<font color="#E5E5E5">vulnerable reading an arbitrary physical</font>

457
00:22:31,700 --> 00:22:37,970
memory from an<font color="#E5E5E5"> address is a little bit</font>

458
00:22:34,700 --> 00:22:39,920
more complex<font color="#E5E5E5"> since you need to read you</font>

459
00:22:37,970 --> 00:22:41,870
need<font color="#E5E5E5"> to select a physical memory address</font>

460
00:22:39,920 --> 00:22:44,770
to read from and you need to manufacture

461
00:22:41,870 --> 00:22:47,149
<font color="#E5E5E5">a fake page table entry</font><font color="#CCCCCC"> for example</font>

462
00:22:44,770 --> 00:22:50,240
<font color="#E5E5E5">something looked like this and you</font>

463
00:22:47,150 --> 00:22:53,150
insert<font color="#E5E5E5"> it somewhere in the female for</font>

464
00:22:50,240 --> 00:22:56,690
paging table which is<font color="#CCCCCC"> also the same as</font>

465
00:22:53,150 --> 00:22:59,929
the<font color="#E5E5E5"> paging table itself and you need to</font>

466
00:22:56,690 --> 00:23:01,760
be carefully<font color="#CCCCCC"> inserted in a place</font><font color="#E5E5E5"> where</font>

467
00:22:59,929 --> 00:23:03,679
it's nothing written<font color="#CCCCCC"> before because if</font>

468
00:23:01,760 --> 00:23:05,000
something is there already<font color="#E5E5E5"> there is a</font>

469
00:23:03,679 --> 00:23:08,059
chance<font color="#CCCCCC"> that the computer will blue</font>

470
00:23:05,000 --> 00:23:09,890
screens and but once you put this fake

471
00:23:08,059 --> 00:23:11,360
page table entry into the paging

472
00:23:09,890 --> 00:23:14,450
<font color="#E5E5E5">hierarchy you</font><font color="#CCCCCC"> can just calculate the</font>

473
00:23:11,360 --> 00:23:16,850
<font color="#E5E5E5">virtual address</font><font color="#CCCCCC"> and that you need to</font>

474
00:23:14,450 --> 00:23:18,920
<font color="#CCCCCC">read from in</font><font color="#E5E5E5"> order to read this physical</font>

475
00:23:16,850 --> 00:23:21,320
memory and then it's just<font color="#E5E5E5"> a matter</font><font color="#CCCCCC"> of</font>

476
00:23:18,920 --> 00:23:22,940
doing<font color="#CCCCCC"> a standard and copy</font><font color="#E5E5E5"> to read</font>

477
00:23:21,320 --> 00:23:25,939
whatever<font color="#CCCCCC"> physical memory on the computer</font>

478
00:23:22,940 --> 00:23:27,710
<font color="#CCCCCC">you wish to read or if you wish to</font><font color="#E5E5E5"> write</font>

479
00:23:25,940 --> 00:23:32,510
to memory<font color="#E5E5E5"> you</font><font color="#CCCCCC"> doo-doo-mmm copper data</font>

480
00:23:27,710 --> 00:23:34,309
<font color="#CCCCCC">way around so the boring stuff</font><font color="#E5E5E5"> for my</font>

481
00:23:32,510 --> 00:23:37,879
part<font color="#CCCCCC"> it looked</font><font color="#E5E5E5"> like it was</font><font color="#CCCCCC"> fixed</font><font color="#E5E5E5"> in</font>

482
00:23:34,309 --> 00:23:40,450
<font color="#E5E5E5">March in the March patches I didn't see</font>

483
00:23:37,880 --> 00:23:42,800
this entries in the memory<font color="#E5E5E5"> map there and</font>

484
00:23:40,450 --> 00:23:45,380
so it<font color="#E5E5E5"> should I check the release notes</font>

485
00:23:42,800 --> 00:23:47,000
<font color="#CCCCCC">from Microsoft Security they usually put</font>

486
00:23:45,380 --> 00:23:48,860
<font color="#E5E5E5">some</font><font color="#CCCCCC"> acknowledgments on</font><font color="#E5E5E5"> their actual</font>

487
00:23:47,000 --> 00:23:50,600
<font color="#E5E5E5">image page and what kind of</font>

488
00:23:48,860 --> 00:23:52,189
vulnerabilities they fix<font color="#E5E5E5"> this month I</font>

489
00:23:50,600 --> 00:23:53,300
didn't see anything about<font color="#CCCCCC"> this so it was</font>

490
00:23:52,190 --> 00:23:55,400
like<font color="#E5E5E5"> kind of strange</font>

491
00:23:53,300 --> 00:23:59,990
so I decided to<font color="#E5E5E5"> contact</font><font color="#CCCCCC"> Microsoft</font>

492
00:23:55,400 --> 00:24:01,460
<font color="#E5E5E5">security or unless</font><font color="#CCCCCC"> RC</font><font color="#E5E5E5"> anyway and they</font>

493
00:23:59,990 --> 00:24:03,740
were going<font color="#E5E5E5"> to check with their technical</font>

494
00:24:01,460 --> 00:24:05,690
department<font color="#E5E5E5"> and they came back just the</font>

495
00:24:03,740 --> 00:24:07,730
<font color="#E5E5E5">other day</font><font color="#CCCCCC"> when they checked with their</font>

496
00:24:05,690 --> 00:24:10,340
technical<font color="#CCCCCC"> department</font><font color="#E5E5E5"> and I received the</font>

497
00:24:07,730 --> 00:24:11,960
green light to<font color="#E5E5E5"> publish the blog entry</font>

498
00:24:10,340 --> 00:24:15,500
about<font color="#E5E5E5"> this one since it was already</font>

499
00:24:11,960 --> 00:24:17,900
<font color="#E5E5E5">fixed so that's what I did</font><font color="#CCCCCC"> I published a</font>

500
00:24:15,500 --> 00:24:20,559
blog<font color="#E5E5E5"> entry and</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> PUC the day after and</font>

501
00:24:17,900 --> 00:24:23,840
<font color="#E5E5E5">kind I'm elated</font><font color="#CCCCCC"> Twitter noticed that</font>

502
00:24:20,559 --> 00:24:26,720
<font color="#E5E5E5">2008 r2 was affected as well</font><font color="#CCCCCC"> it wasn't</font>

503
00:24:23,840 --> 00:24:29,090
<font color="#CCCCCC">something that</font><font color="#E5E5E5"> I thought of myself but</font>

504
00:24:26,720 --> 00:24:30,740
it's quite logical since 2008 r2 is

505
00:24:29,090 --> 00:24:33,649
pretty much the server<font color="#E5E5E5"> version of</font>

506
00:24:30,740 --> 00:24:35,570
Windows<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> and what was a</font><font color="#CCCCCC"> little bit</font>

507
00:24:33,650 --> 00:24:38,090
boring here it was<font color="#CCCCCC"> like that the</font><font color="#E5E5E5"> March</font>

508
00:24:35,570 --> 00:24:40,159
patches for 2008 r2<font color="#CCCCCC"> they had some</font>

509
00:24:38,090 --> 00:24:42,620
quality<font color="#E5E5E5"> problems so sis admins hadn't</font>

510
00:24:40,160 --> 00:24:47,679
been applying the patches for that month

511
00:24:42,620 --> 00:24:50,449
and when I was installing<font color="#E5E5E5"> my 2008 r2 and</font>

512
00:24:47,679 --> 00:24:52,520
my exploits<font color="#E5E5E5"> were still working there it</font>

513
00:24:50,450 --> 00:24:55,370
<font color="#E5E5E5">was like ouch this is not good and I</font>

514
00:24:52,520 --> 00:24:57,320
remember I was contacted<font color="#E5E5E5"> on telegram by</font>

515
00:24:55,370 --> 00:24:59,540
<font color="#CCCCCC">maksim gorya she from positive</font>

516
00:24:57,320 --> 00:25:01,820
<font color="#CCCCCC">technologies</font><font color="#E5E5E5"> as well and it was like hey</font>

517
00:24:59,540 --> 00:25:04,730
this<font color="#E5E5E5"> in one is not fixed is still</font>

518
00:25:01,820 --> 00:25:07,370
<font color="#CCCCCC">working so I really needed to</font><font color="#E5E5E5"> contact</font>

519
00:25:04,730 --> 00:25:09,620
<font color="#CCCCCC">Microsoft</font><font color="#E5E5E5"> security again and it seems</font>

520
00:25:07,370 --> 00:25:11,659
like they were already aware of<font color="#E5E5E5"> this one</font>

521
00:25:09,620 --> 00:25:14,239
that it was still<font color="#E5E5E5"> working and they were</font>

522
00:25:11,660 --> 00:25:16,309
<font color="#E5E5E5">working on an out-of-band patch and they</font>

523
00:25:14,240 --> 00:25:18,620
asked<font color="#E5E5E5"> me to keep quiet for a day or so</font>

524
00:25:16,309 --> 00:25:22,160
<font color="#E5E5E5">while they could get this one</font><font color="#CCCCCC"> out to the</font>

525
00:25:18,620 --> 00:25:24,469
<font color="#E5E5E5">public</font><font color="#CCCCCC"> so yesterday after</font><font color="#E5E5E5"> Microsoft</font>

526
00:25:22,160 --> 00:25:28,820
released an out-of-band kernel security

527
00:25:24,470 --> 00:25:34,309
update for CB<font color="#CCCCCC"> 2000</font><font color="#E5E5E5"> 18,000 38 March to</font>

528
00:25:28,820 --> 00:25:35,659
29th so how could I<font color="#E5E5E5"> believe that</font><font color="#CCCCCC"> this</font>

529
00:25:34,309 --> 00:25:37,520
one was fixed and<font color="#E5E5E5"> how could I miss that</font>

530
00:25:35,660 --> 00:25:40,490
<font color="#CCCCCC">it wasn't fixed</font><font color="#E5E5E5"> and how could Microsoft</font>

531
00:25:37,520 --> 00:25:44,830
miss it as well<font color="#E5E5E5"> let's have a look at</font><font color="#CCCCCC"> the</font>

532
00:25:40,490 --> 00:25:44,830
<font color="#E5E5E5">vulnerable virtual machine from March</font>

533
00:25:45,850 --> 00:25:50,500
let's mount the<font color="#CCCCCC"> filesystem again</font>

534
00:25:51,300 --> 00:26:00,270
let's check<font color="#CCCCCC"> that memory map let's let's</font>

535
00:25:57,870 --> 00:26:03,479
check it in<font color="#E5E5E5"> the cmd.exe again for</font>

536
00:26:00,270 --> 00:26:06,900
simplicity<font color="#CCCCCC"> and if you scroll down</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the</font>

537
00:26:03,480 --> 00:26:09,990
<font color="#E5E5E5">very</font><font color="#CCCCCC"> bottom</font><font color="#E5E5E5"> here you see that</font><font color="#CCCCCC"> there now</font>

538
00:26:06,900 --> 00:26:12,540
<font color="#CCCCCC">F address is at the bottom</font><font color="#E5E5E5"> here so the</font>

539
00:26:09,990 --> 00:26:14,760
issue seems<font color="#E5E5E5"> to be fixed completely fixed</font>

540
00:26:12,540 --> 00:26:19,530
and<font color="#E5E5E5"> that's why I thought it was fixed</font>

541
00:26:14,760 --> 00:26:24,510
and<font color="#E5E5E5"> but if we try to just</font><font color="#CCCCCC"> dump the</font>

542
00:26:19,530 --> 00:26:25,500
memory<font color="#E5E5E5"> again</font><font color="#CCCCCC"> I mean memory</font><font color="#E5E5E5"> dumping is</font>

543
00:26:24,510 --> 00:26:28,440
still working<font color="#E5E5E5"> here</font>

544
00:26:25,500 --> 00:26:40,260
so hey what's going on<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is really</font>

545
00:26:28,440 --> 00:26:41,880
strange<font color="#E5E5E5"> let's check here</font><font color="#CCCCCC"> and we have the</font>

546
00:26:40,260 --> 00:26:44,730
<font color="#E5E5E5">different files here</font><font color="#CCCCCC"> as before and</font>

547
00:26:41,880 --> 00:26:47,510
rejected<font color="#E5E5E5"> p.m. else were stored at this</font>

548
00:26:44,730 --> 00:26:51,720
address<font color="#E5E5E5"> and if you check the</font><font color="#CCCCCC"> PML for</font>

549
00:26:47,510 --> 00:26:55,890
paging table at the index of<font color="#E5E5E5"> f6 day</font><font color="#CCCCCC"> the</font>

550
00:26:51,720 --> 00:26:58,170
self referential entry<font color="#CCCCCC"> it seems</font><font color="#E5E5E5"> like</font>

551
00:26:55,890 --> 00:27:00,360
it's fixed<font color="#CCCCCC"> if you account for the little</font>

552
00:26:58,170 --> 00:27:03,360
<font color="#E5E5E5">endian it ends with a</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> and that</font>

553
00:27:00,360 --> 00:27:05,729
means it's<font color="#CCCCCC"> it's present</font><font color="#E5E5E5"> it's active it's</font>

554
00:27:03,360 --> 00:27:08,610
<font color="#E5E5E5">really writable and it's only accessible</font>

555
00:27:05,730 --> 00:27:11,130
from<font color="#E5E5E5"> supervisor or kernel code so it</font>

556
00:27:08,610 --> 00:27:15,060
seems<font color="#E5E5E5"> like it's fixed so what is going</font>

557
00:27:11,130 --> 00:27:16,950
<font color="#CCCCCC">on here but remember the fixed for</font>

558
00:27:15,060 --> 00:27:17,580
meltdown for low privileged user

559
00:27:16,950 --> 00:27:20,670
processes

560
00:27:17,580 --> 00:27:23,939
it was to create<font color="#E5E5E5"> a second</font><font color="#CCCCCC"> PML for paging</font>

561
00:27:20,670 --> 00:27:27,440
table here key and if we<font color="#E5E5E5"> check the</font>

562
00:27:23,940 --> 00:27:30,150
<font color="#E5E5E5">second</font><font color="#CCCCCC"> EML for for the actual user code</font>

563
00:27:27,440 --> 00:27:34,610
<font color="#CCCCCC">it's stored at a different address from</font>

564
00:27:30,150 --> 00:27:39,930
the<font color="#E5E5E5"> actual original kernel</font><font color="#CCCCCC"> p.m. l4 and</font>

565
00:27:34,610 --> 00:27:44,399
<font color="#E5E5E5">if we check the page table base for the</font>

566
00:27:39,930 --> 00:27:50,580
user mode code we see that<font color="#E5E5E5"> that index</font>

567
00:27:44,400 --> 00:27:53,730
f68 page the<font color="#CCCCCC"> PML for entry is we still</font>

568
00:27:50,580 --> 00:27:59,879
have<font color="#E5E5E5"> that bit set in error so that's why</font>

569
00:27:53,730 --> 00:28:03,600
<font color="#E5E5E5">I completely missed it and turned out</font>

570
00:27:59,880 --> 00:28:05,070
that<font color="#CCCCCC"> in</font><font color="#E5E5E5"> Marsh</font><font color="#CCCCCC"> matches the total</font><font color="#E5E5E5"> meltem</font>

571
00:28:03,600 --> 00:28:07,080
vulnerability<font color="#E5E5E5"> was only fake</font>

572
00:28:05,070 --> 00:28:08,789
if you were running<font color="#E5E5E5"> a</font><font color="#CCCCCC"> system or admin</font>

573
00:28:07,080 --> 00:28:11,070
you couldn't exploit this<font color="#E5E5E5"> tissue you</font>

574
00:28:08,789 --> 00:28:13,230
were unable to<font color="#E5E5E5"> run code in the kernel</font>

575
00:28:11,070 --> 00:28:16,289
this way done but if<font color="#E5E5E5"> you were running as</font>

576
00:28:13,230 --> 00:28:24,659
any<font color="#E5E5E5"> low privileged user process was</font>

577
00:28:16,289 --> 00:28:27,360
still totally vulnerable to sum

578
00:28:24,659 --> 00:28:30,360
<font color="#E5E5E5">everything up total meltdown</font><font color="#CCCCCC"> is now</font>

579
00:28:27,360 --> 00:28:32,158
fixed<font color="#CCCCCC"> I believe everyone can</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> make</font>

580
00:28:30,360 --> 00:28:33,990
<font color="#E5E5E5">mistakes</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> certainly didn't make a</font>

581
00:28:32,159 --> 00:28:36,269
mistake<font color="#CCCCCC"> and probably</font><font color="#E5E5E5"> Microsoft's as well</font>

582
00:28:33,990 --> 00:28:39,570
but<font color="#CCCCCC"> this</font><font color="#E5E5E5"> like it's super impressive to</font>

583
00:28:36,269 --> 00:28:42,299
see that<font color="#CCCCCC"> you're able to push out</font><font color="#E5E5E5"> a</font>

584
00:28:39,570 --> 00:28:44,908
rather complex<font color="#E5E5E5"> kernel security update to</font>

585
00:28:42,299 --> 00:28:47,580
hundreds<font color="#E5E5E5"> of millions of pieces in less</font>

586
00:28:44,909 --> 00:28:51,509
<font color="#E5E5E5">than two days it's like super impressive</font>

587
00:28:47,580 --> 00:28:53,879
work from Microsoft side and also I

588
00:28:51,509 --> 00:28:55,649
<font color="#E5E5E5">believe that the PCL each memory process</font>

589
00:28:53,879 --> 00:28:57,928
file system<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> demoed here today</font>

590
00:28:55,649 --> 00:29:00,719
as well it's kind of<font color="#CCCCCC"> awesome you can do</font>

591
00:28:57,929 --> 00:29:05,899
other<font color="#CCCCCC"> things</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> it as well and please</font>

592
00:29:00,720 --> 00:29:05,899
have<font color="#E5E5E5"> a look at it and thank you</font>

593
00:29:12,370 --> 00:29:14,429
you

