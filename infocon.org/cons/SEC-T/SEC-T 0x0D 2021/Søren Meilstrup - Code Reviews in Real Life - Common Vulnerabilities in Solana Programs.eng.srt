1
00:00:06,720 --> 00:00:10,160
um yeah just a small

2
00:00:10,160 --> 00:00:12,559
change my name is on milestop and not

3
00:00:12,559 --> 00:00:16,160
pian stop as it actually says in

4
00:00:16,160 --> 00:00:17,920
in the announcement

5
00:00:17,920 --> 00:00:20,560
i'm working for pt block and we are

6
00:00:20,560 --> 00:00:23,279
doing code reviews on blockchain

7
00:00:23,279 --> 00:00:27,519
programs and in this talk i'll

8
00:00:27,840 --> 00:00:29,199
present some of the most common

9
00:00:29,199 --> 00:00:31,039
vulnerabilities that we discover when we

10
00:00:31,039 --> 00:00:32,159
are

11
00:00:32,159 --> 00:00:34,320
reviewing on-chain programs on the

12
00:00:34,320 --> 00:00:36,719
solana blockchain

13
00:00:36,719 --> 00:00:38,079
um

14
00:00:38,079 --> 00:00:41,800
oh where is it

15
00:00:46,000 --> 00:00:48,640
if you don't know what solana is it's uh

16
00:00:48,640 --> 00:00:50,239
or they they are proud to say that

17
00:00:50,239 --> 00:00:52,480
they're the world's fastest blockchain

18
00:00:52,480 --> 00:00:55,680
um it's decentralized and open so anyone

19
00:00:55,680 --> 00:00:58,320
can join up with their own server of

20
00:00:58,320 --> 00:01:00,160
course they need to put in some

21
00:01:00,160 --> 00:01:02,719
some some money into it but they have

22
00:01:02,719 --> 00:01:05,360
some some different kind of restrictions

23
00:01:05,360 --> 00:01:07,040
and it's consensus based so it's the

24
00:01:07,040 --> 00:01:09,760
majority of those who decide what is

25
00:01:09,760 --> 00:01:13,840
right or wrong in the blockchain

26
00:01:13,840 --> 00:01:16,560
it's implemented in rust and anyone can

27
00:01:16,560 --> 00:01:17,680
deploy

28
00:01:17,680 --> 00:01:20,240
an unchain program

29
00:01:20,240 --> 00:01:23,679
that they have developed themselves

30
00:01:24,880 --> 00:01:27,360
over the last year the the solana

31
00:01:27,360 --> 00:01:31,280
currency has risen over 6 000

32
00:01:31,280 --> 00:01:32,079
and

33
00:01:32,079 --> 00:01:34,560
in the graph you can see below uh

34
00:01:34,560 --> 00:01:36,159
it's actually two days old so it's

35
00:01:36,159 --> 00:01:38,240
actually not correct uh

36
00:01:38,240 --> 00:01:40,799
it has has actually risen i think 20 in

37
00:01:40,799 --> 00:01:42,960
two days so there's a lot of money

38
00:01:42,960 --> 00:01:45,439
involved in this the the current uh

39
00:01:45,439 --> 00:01:48,680
circulation supply is around

40
00:01:48,680 --> 00:01:52,079
450 billion swedish corner

41
00:01:52,079 --> 00:01:54,320
so there's a lot of money involved in in

42
00:01:54,320 --> 00:01:55,840
this

43
00:01:55,840 --> 00:01:57,520
um

44
00:01:57,520 --> 00:02:01,280
when we are doing a review we

45
00:02:01,280 --> 00:02:03,759
we do the default stuff so we are

46
00:02:03,759 --> 00:02:06,000
reading the documentation and verifying

47
00:02:06,000 --> 00:02:07,439
that the implementation actually does

48
00:02:07,439 --> 00:02:09,840
what the documentation says

49
00:02:09,840 --> 00:02:12,160
we are searching for known

50
00:02:12,160 --> 00:02:14,800
vulnerabilities in the dependencies we

51
00:02:14,800 --> 00:02:16,800
are looking for integer overflows loss

52
00:02:16,800 --> 00:02:19,520
of precision errors

53
00:02:19,520 --> 00:02:20,879
seeing if they are doing memory

54
00:02:20,879 --> 00:02:22,000
management correct if they're

55
00:02:22,000 --> 00:02:24,400
de-allocating correct doing some

56
00:02:24,400 --> 00:02:26,480
unsafe stuff with memory

57
00:02:26,480 --> 00:02:28,239
we're looking for information leaks if

58
00:02:28,239 --> 00:02:33,360
they remember to theorize sensitive data

59
00:02:33,360 --> 00:02:34,959
all those kind of stuff but that's

60
00:02:34,959 --> 00:02:36,560
actually not that interesting because

61
00:02:36,560 --> 00:02:38,560
that what you're doing when you're

62
00:02:38,560 --> 00:02:40,959
doing every kind of review

63
00:02:40,959 --> 00:02:43,280
um

64
00:02:43,280 --> 00:02:44,080
so

65
00:02:44,080 --> 00:02:45,760
what i'm going to talk about here is

66
00:02:45,760 --> 00:02:48,400
what's special in in the solana river is

67
00:02:48,400 --> 00:02:51,120
besides these this stuff

68
00:02:51,120 --> 00:02:52,959
the solana

69
00:02:52,959 --> 00:02:55,519
blockchain doesn't provide that much

70
00:02:55,519 --> 00:02:58,239
security for the programmer

71
00:02:58,239 --> 00:03:00,959
so the developer has to create his own

72
00:03:00,959 --> 00:03:02,800
security model

73
00:03:02,800 --> 00:03:05,440
solana the serrano runtime has a couple

74
00:03:05,440 --> 00:03:08,159
of policies but it's only to to protect

75
00:03:08,159 --> 00:03:09,440
the

76
00:03:09,440 --> 00:03:12,239
the the data in the blockchain and not

77
00:03:12,239 --> 00:03:15,760
what the unchained programs actually do

78
00:03:15,760 --> 00:03:17,360
so the most common mistake we actually

79
00:03:17,360 --> 00:03:18,720
see when we are reviewing is that the

80
00:03:18,720 --> 00:03:21,120
developers hasn't done any authorization

81
00:03:21,120 --> 00:03:22,560
checks at all

82
00:03:22,560 --> 00:03:24,400
and that actually means that the door is

83
00:03:24,400 --> 00:03:27,040
open for anyone to for example withdraw

84
00:03:27,040 --> 00:03:29,599
money or whatever functionality the the

85
00:03:29,599 --> 00:03:33,640
unchain program actually provides

86
00:03:36,400 --> 00:03:38,879
what we also see is that they have tried

87
00:03:38,879 --> 00:03:40,640
to do some

88
00:03:40,640 --> 00:03:42,560
authorization check

89
00:03:42,560 --> 00:03:44,799
for example they are requiring some

90
00:03:44,799 --> 00:03:47,840
account to sign the transaction

91
00:03:47,840 --> 00:03:50,000
but they don't necessarily check whether

92
00:03:50,000 --> 00:03:50,959
or not

93
00:03:50,959 --> 00:03:53,120
the the user is authorized to actually

94
00:03:53,120 --> 00:03:54,959
do the transaction

95
00:03:54,959 --> 00:03:55,920
so

96
00:03:55,920 --> 00:03:58,560
this is similar to going to a bank and

97
00:03:58,560 --> 00:04:00,080
trying to withdraw money from your

98
00:04:00,080 --> 00:04:03,840
neighbor and just signing as yourself

99
00:04:03,920 --> 00:04:07,518
that of course shouldn't be possible

100
00:04:10,799 --> 00:04:13,200
sometimes they actually trying to check

101
00:04:13,200 --> 00:04:14,640
whether or not

102
00:04:14,640 --> 00:04:17,279
the the signing user is

103
00:04:17,279 --> 00:04:19,600
is authorized to to do the withdrawal

104
00:04:19,600 --> 00:04:22,960
but they have modeled it badly

105
00:04:22,960 --> 00:04:25,199
if they have

106
00:04:25,199 --> 00:04:27,120
modeled the data structures

107
00:04:27,120 --> 00:04:29,600
so the the signing user is actually

108
00:04:29,600 --> 00:04:31,199
pointing at

109
00:04:31,199 --> 00:04:33,520
the um

110
00:04:33,520 --> 00:04:36,240
the protected asset that he actually

111
00:04:36,240 --> 00:04:38,400
tries to withdraw money from or whatever

112
00:04:38,400 --> 00:04:40,320
he's going to manu however he's going to

113
00:04:40,320 --> 00:04:44,479
manipulate it anyone could just point at

114
00:04:44,479 --> 00:04:46,800
that asset and say it's mine i want to

115
00:04:46,800 --> 00:04:48,560
change it i want to withdraw money from

116
00:04:48,560 --> 00:04:50,639
it

117
00:04:50,639 --> 00:04:52,080
so

118
00:04:52,080 --> 00:04:54,639
that that's actually a design error in

119
00:04:54,639 --> 00:04:58,240
the the code by the developers

120
00:04:58,240 --> 00:05:00,560
and of course it should be the protected

121
00:05:00,560 --> 00:05:03,280
asset that points at the authorized user

122
00:05:03,280 --> 00:05:05,520
which are allowed to manipulate it or

123
00:05:05,520 --> 00:05:10,680
withdraw money from it um

124
00:05:14,240 --> 00:05:15,840
another very common

125
00:05:15,840 --> 00:05:17,360
must mistake

126
00:05:17,360 --> 00:05:20,400
is the program injection

127
00:05:20,400 --> 00:05:21,360
on the

128
00:05:21,360 --> 00:05:24,240
solana blockchain if a program wants to

129
00:05:24,240 --> 00:05:26,240
call another program you actually need

130
00:05:26,240 --> 00:05:27,120
to

131
00:05:27,120 --> 00:05:29,199
pass the

132
00:05:29,199 --> 00:05:32,720
the the id the the key of the the other

133
00:05:32,720 --> 00:05:35,759
program being invoked

134
00:05:37,600 --> 00:05:40,560
but if the invoking program doesn't

135
00:05:40,560 --> 00:05:41,840
check

136
00:05:41,840 --> 00:05:44,639
if that key is what it is expected to do

137
00:05:44,639 --> 00:05:47,759
it can pass authority to

138
00:05:47,759 --> 00:05:49,840
that other program

139
00:05:49,840 --> 00:05:52,240
that also means that if an attacker

140
00:05:52,240 --> 00:05:54,560
implements some malicious program and

141
00:05:54,560 --> 00:05:56,080
that's being invoked with some

142
00:05:56,080 --> 00:05:57,759
credentials to do

143
00:05:57,759 --> 00:05:59,919
withdrawal or emptying an account or

144
00:05:59,919 --> 00:06:01,759
something like that

145
00:06:01,759 --> 00:06:03,680
then an attack would just steal anything

146
00:06:03,680 --> 00:06:05,280
by just putting in a reference to his

147
00:06:05,280 --> 00:06:07,840
own program

148
00:06:08,720 --> 00:06:09,919
and yeah

149
00:06:09,919 --> 00:06:11,919
as the small graphics i've created says

150
00:06:11,919 --> 00:06:12,880
that the

151
00:06:12,880 --> 00:06:14,880
if if the banker

152
00:06:14,880 --> 00:06:17,360
he just accepts that he can hand over

153
00:06:17,360 --> 00:06:18,080
the

154
00:06:18,080 --> 00:06:20,960
the keys to the wall to whomever you

155
00:06:20,960 --> 00:06:24,240
you provide then yeah then it's okay but

156
00:06:24,240 --> 00:06:27,600
you may lose all the money

157
00:06:30,319 --> 00:06:32,639
um

158
00:06:32,720 --> 00:06:36,479
one of the solana runtime policies

159
00:06:36,479 --> 00:06:39,919
is that the only a program that owns

160
00:06:39,919 --> 00:06:44,400
account data is able to modify it

161
00:06:45,919 --> 00:06:47,600
and that actually means that a program

162
00:06:47,600 --> 00:06:50,800
actually needs to verify

163
00:06:50,800 --> 00:06:53,280
if an account is given and it has to

164
00:06:53,280 --> 00:06:55,280
trust that it has

165
00:06:55,280 --> 00:06:56,720
ownership of that

166
00:06:56,720 --> 00:06:58,319
otherwise anybody else could have

167
00:06:58,319 --> 00:07:00,840
fabricated that data

168
00:07:00,840 --> 00:07:03,840
um and depending on what's what's in the

169
00:07:03,840 --> 00:07:06,080
data if the data for example is

170
00:07:06,080 --> 00:07:07,599
a reference to

171
00:07:07,599 --> 00:07:09,520
an authority

172
00:07:09,520 --> 00:07:12,400
which it's going to use for an authority

173
00:07:12,400 --> 00:07:14,639
check you could just put in

174
00:07:14,639 --> 00:07:17,840
your own reference

175
00:07:18,080 --> 00:07:22,000
so this is this is also very bad

176
00:07:22,000 --> 00:07:24,240
as the example i've put in here

177
00:07:24,240 --> 00:07:26,960
it could also be

178
00:07:27,199 --> 00:07:28,720
some data saying

179
00:07:28,720 --> 00:07:30,400
how many

180
00:07:30,400 --> 00:07:32,639
tokens of some kind you you have on the

181
00:07:32,639 --> 00:07:33,759
account

182
00:07:33,759 --> 00:07:34,560
so

183
00:07:34,560 --> 00:07:37,039
if you go down to to your banker with a

184
00:07:37,039 --> 00:07:38,479
handwritten note saying that you have

185
00:07:38,479 --> 00:07:39,759
five billion on your account and you

186
00:07:39,759 --> 00:07:41,520
want to withdraw that should he accept

187
00:07:41,520 --> 00:07:42,560
it

188
00:07:42,560 --> 00:07:45,840
probably not but we see this from time

189
00:07:45,840 --> 00:07:48,318
to time

190
00:07:51,440 --> 00:07:53,840
even though the developers have actually

191
00:07:53,840 --> 00:07:55,919
done all the authorization checks

192
00:07:55,919 --> 00:07:57,199
correctly

193
00:07:57,199 --> 00:07:59,840
all the data integrity checks correctly

194
00:07:59,840 --> 00:08:02,720
the ownerships the ownership checks

195
00:08:02,720 --> 00:08:04,720
there's still

196
00:08:04,720 --> 00:08:07,440
a chance that an attacker can

197
00:08:07,440 --> 00:08:09,759
fake his own data

198
00:08:09,759 --> 00:08:11,759
if a program uses

199
00:08:11,759 --> 00:08:13,919
two different structs with the same size

200
00:08:13,919 --> 00:08:16,160
for example if they they have a variable

201
00:08:16,160 --> 00:08:17,520
size

202
00:08:17,520 --> 00:08:21,680
and one of the structs can be written

203
00:08:22,080 --> 00:08:22,800
by

204
00:08:22,800 --> 00:08:25,360
by invoking the program

205
00:08:25,360 --> 00:08:28,479
then you could just fabricate fake data

206
00:08:28,479 --> 00:08:30,639
in one struct

207
00:08:30,639 --> 00:08:33,679
and then pass it as being

208
00:08:33,679 --> 00:08:36,559
an account of the other type

209
00:08:36,559 --> 00:08:38,958
then you could

210
00:08:38,958 --> 00:08:41,120
then the the program would actually

211
00:08:41,120 --> 00:08:43,519
accept it because the ownership of the

212
00:08:43,519 --> 00:08:44,800
of the account

213
00:08:44,800 --> 00:08:46,000
is

214
00:08:46,000 --> 00:08:48,160
uh the account is still owned by by the

215
00:08:48,160 --> 00:08:49,519
program itself

216
00:08:49,519 --> 00:08:50,399
so

217
00:08:50,399 --> 00:08:53,279
it will accept it when it deserializes

218
00:08:53,279 --> 00:08:54,399
the data

219
00:08:54,399 --> 00:08:57,360
it will actually be something which

220
00:08:57,360 --> 00:08:59,200
of course if the attacker fabricated in

221
00:08:59,200 --> 00:09:00,560
in that way

222
00:09:00,560 --> 00:09:02,880
will point at whatever the attacker

223
00:09:02,880 --> 00:09:06,160
wants to so it seems like it's valid

224
00:09:06,160 --> 00:09:08,399
so the attacker will be able to to

225
00:09:08,399 --> 00:09:10,240
actually trick the

226
00:09:10,240 --> 00:09:13,920
the program into whatever he wants it to

227
00:09:13,920 --> 00:09:16,480
um this of course depends on how the

228
00:09:16,480 --> 00:09:18,640
developers have implemented the

229
00:09:18,640 --> 00:09:20,839
serialization and deserialization

230
00:09:20,839 --> 00:09:24,160
programs uh processes

231
00:09:24,160 --> 00:09:27,680
and it's rather easy to put in a prefix

232
00:09:27,680 --> 00:09:30,000
when writing the different er

233
00:09:30,000 --> 00:09:32,080
when serializing the different structs

234
00:09:32,080 --> 00:09:34,240
to to actually avoid this

235
00:09:34,240 --> 00:09:37,839
but usually it's we just see a simple

236
00:09:37,839 --> 00:09:40,160
serialization implementations

237
00:09:40,160 --> 00:09:43,360
uh so so this is actually uh

238
00:09:43,360 --> 00:09:46,320
a vulnerability which you should be

239
00:09:46,320 --> 00:09:49,440
which developers should be very aware of

240
00:09:49,440 --> 00:09:50,959
because it's

241
00:09:50,959 --> 00:09:53,200
it's it's not so obvious that it

242
00:09:53,200 --> 00:09:55,839
actually exists

243
00:09:58,000 --> 00:09:59,120
and

244
00:09:59,120 --> 00:10:01,440
that's actually all for me

245
00:10:01,440 --> 00:10:03,120
as you saw earlier

246
00:10:03,120 --> 00:10:04,880
when one of my colleagues also did a

247
00:10:04,880 --> 00:10:08,160
presentation on on defy

248
00:10:08,160 --> 00:10:10,399
we are actually looking for for more

249
00:10:10,399 --> 00:10:11,839
reviews so if you think this is

250
00:10:11,839 --> 00:10:12,880
interesting

251
00:10:12,880 --> 00:10:15,120
you are more than welcome to

252
00:10:15,120 --> 00:10:17,120
take a hold of us and

253
00:10:17,120 --> 00:10:20,480
we are open for job offers or we we are

254
00:10:20,480 --> 00:10:21,519
hiring

255
00:10:21,519 --> 00:10:23,610
so thank you

256
00:10:23,610 --> 00:10:27,619
[Applause]

