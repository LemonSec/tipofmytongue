1
00:00:04,080 --> 00:00:05,600
cool so um

2
00:00:05,600 --> 00:00:08,400
i apologize in advance because um

3
00:00:08,400 --> 00:00:11,599
this is a very uh practical talk um

4
00:00:11,599 --> 00:00:13,840
normally we do like a four hour workshop

5
00:00:13,840 --> 00:00:16,560
with this kind of content so i've tried

6
00:00:16,560 --> 00:00:19,520
to compress it down so if somebody wants

7
00:00:19,520 --> 00:00:21,439
access to the apps that

8
00:00:21,439 --> 00:00:24,160
i'm going to demo i'm just like

9
00:00:24,160 --> 00:00:26,480
longer slides and a longer recording

10
00:00:26,480 --> 00:00:28,160
like it's more relaxed if you see this

11
00:00:28,160 --> 00:00:29,519
is too fast

12
00:00:29,519 --> 00:00:32,238
you can go to insecure.com free

13
00:00:32,238 --> 00:00:35,600
and that's all and there's also the

14
00:00:35,600 --> 00:00:37,520
the vulnerable application that i demo

15
00:00:37,520 --> 00:00:39,440
yesterday on the lighting talk is also

16
00:00:39,440 --> 00:00:41,520
there for free available so

17
00:00:41,520 --> 00:00:42,960
just to mention that

18
00:00:42,960 --> 00:00:45,440
so i'm the ceo of seven security we

19
00:00:45,440 --> 00:00:47,280
deliver training at blackhead usa and so

20
00:00:47,280 --> 00:00:49,280
on we do stuff with cure53 if you are

21
00:00:49,280 --> 00:00:50,719
familiar with them

22
00:00:50,719 --> 00:00:53,520
um yeah and i'm one of the project

23
00:00:53,520 --> 00:00:56,239
leaders for osprelwtf so if you type

24
00:00:56,239 --> 00:00:58,879
autw.org that takes you to the oas

25
00:00:58,879 --> 00:01:01,600
project which is about web security

26
00:01:01,600 --> 00:01:03,280
so some of the apps that i'm going to

27
00:01:03,280 --> 00:01:05,920
talk about today um

28
00:01:05,920 --> 00:01:07,520
especially smart sheriff which was

29
00:01:07,520 --> 00:01:09,119
mandated in the entire country of south

30
00:01:09,119 --> 00:01:10,320
korea

31
00:01:10,320 --> 00:01:11,280
there's

32
00:01:11,280 --> 00:01:13,360
a couple of public fantasy reports so

33
00:01:13,360 --> 00:01:16,080
you can this is a very um

34
00:01:16,080 --> 00:01:18,240
good way to learn about security

35
00:01:18,240 --> 00:01:21,200
so uh just for free by reading these uh

36
00:01:21,200 --> 00:01:24,400
first two pentas reports uh you can

37
00:01:24,400 --> 00:01:25,920
pretty much see like a bunch of things

38
00:01:25,920 --> 00:01:27,439
that you should never do in a mobile

39
00:01:27,439 --> 00:01:29,360
application um

40
00:01:29,360 --> 00:01:30,960
so yeah i'll talk more about that later

41
00:01:30,960 --> 00:01:32,799
and there's a bunch of other

42
00:01:32,799 --> 00:01:34,880
mobile pants reports available for free

43
00:01:34,880 --> 00:01:35,759
so

44
00:01:35,759 --> 00:01:38,560
we will start with xss and then mobile

45
00:01:38,560 --> 00:01:40,720
apps with local servers uh what can go

46
00:01:40,720 --> 00:01:42,399
wrong with dibling some interesting

47
00:01:42,399 --> 00:01:44,720
scenario that we found in appenders with

48
00:01:44,720 --> 00:01:46,159
a dibling sql injection and code

49
00:01:46,159 --> 00:01:47,360
execution

50
00:01:47,360 --> 00:01:50,399
and then some tales of crypto fail

51
00:01:50,399 --> 00:01:53,280
and some api opponents and so on so

52
00:01:53,280 --> 00:01:56,479
let's get started right so xss

53
00:01:56,479 --> 00:01:58,079
webview someday tax filtration let's

54
00:01:58,079 --> 00:01:59,680
start with android

55
00:01:59,680 --> 00:02:00,960
so

56
00:02:00,960 --> 00:02:02,079
basically

57
00:02:02,079 --> 00:02:04,000
on a mobile application

58
00:02:04,000 --> 00:02:06,640
a webview is kind of a small browser and

59
00:02:06,640 --> 00:02:08,878
of course this can have html javascript

60
00:02:08,878 --> 00:02:09,919
and so on

61
00:02:09,919 --> 00:02:10,959
so

62
00:02:10,959 --> 00:02:12,080
um

63
00:02:12,080 --> 00:02:14,560
in what is the potential right so we can

64
00:02:14,560 --> 00:02:17,599
have html injection which in a mobile

65
00:02:17,599 --> 00:02:19,520
device can still be interesting because

66
00:02:19,520 --> 00:02:21,360
a mobile device a mobile application is

67
00:02:21,360 --> 00:02:23,520
typically not going to show the url to

68
00:02:23,520 --> 00:02:26,400
the user so with only html injection if

69
00:02:26,400 --> 00:02:28,879
you can craft a believable login page

70
00:02:28,879 --> 00:02:30,959
that sends credentials to an attacker

71
00:02:30,959 --> 00:02:32,720
you can still do some pretty good damage

72
00:02:32,720 --> 00:02:34,959
there right then xss gets more

73
00:02:34,959 --> 00:02:36,640
interesting and the scenario that i'm

74
00:02:36,640 --> 00:02:39,360
going to uh talk about is

75
00:02:39,360 --> 00:02:42,239
data x filtration of uh local files

76
00:02:42,239 --> 00:02:43,920
using xss right and then in some

77
00:02:43,920 --> 00:02:46,400
scenarios you could even do a crosshair

78
00:02:46,400 --> 00:02:48,239
request forgery as well

79
00:02:48,239 --> 00:02:52,319
but that is kind of more rare

80
00:02:54,640 --> 00:02:56,239
so

81
00:02:56,239 --> 00:02:58,319
we found this vulnerability in many

82
00:02:58,319 --> 00:03:00,480
mobile applications but

83
00:03:00,480 --> 00:03:02,879
for the purposes of the of demonstrating

84
00:03:02,879 --> 00:03:04,640
it in a in a demo

85
00:03:04,640 --> 00:03:07,680
without blaming the guilty um

86
00:03:07,680 --> 00:03:10,720
we modified an open source uh project

87
00:03:10,720 --> 00:03:12,959
that is called androge so the official

88
00:03:12,959 --> 00:03:15,440
version will not work for this but we we

89
00:03:15,440 --> 00:03:18,159
modified it as part of the workshop

90
00:03:18,159 --> 00:03:19,840
where you know

91
00:03:19,840 --> 00:03:21,599
using the modified version uh this

92
00:03:21,599 --> 00:03:23,280
attack works right so basically first we

93
00:03:23,280 --> 00:03:24,640
have to

94
00:03:24,640 --> 00:03:25,840
create some

95
00:03:25,840 --> 00:03:27,599
files on the application that we are

96
00:03:27,599 --> 00:03:29,440
going to still later right so we go to

97
00:03:29,440 --> 00:03:31,200
insecurity to storage this will make

98
00:03:31,200 --> 00:03:33,680
more sense in the demo

99
00:03:33,680 --> 00:03:35,760
share preferences right so we create

100
00:03:35,760 --> 00:03:37,760
like some um

101
00:03:37,760 --> 00:03:39,840
we save some data on the preferences

102
00:03:39,840 --> 00:03:42,560
like my secret user my secret password

103
00:03:42,560 --> 00:03:45,360
in a sqlite database the same thing

104
00:03:45,360 --> 00:03:48,560
and then we can go to xss and we can

105
00:03:48,560 --> 00:03:50,480
start like trying some stuff right so we

106
00:03:50,480 --> 00:03:53,040
can try for example h1 hello and you see

107
00:03:53,040 --> 00:03:55,280
that hello is kind of bigger so that's

108
00:03:55,280 --> 00:03:57,120
kind of exciting it means that there's

109
00:03:57,120 --> 00:03:58,319
probably

110
00:03:58,319 --> 00:04:00,560
html injection there

111
00:04:00,560 --> 00:04:04,000
then we can try

112
00:04:04,640 --> 00:04:05,519
some

113
00:04:05,519 --> 00:04:07,439
exercise payloads right image source x

114
00:04:07,439 --> 00:04:09,280
or lower order one script dollar one and

115
00:04:09,280 --> 00:04:10,239
so on

116
00:04:10,239 --> 00:04:12,720
so this demonstrates that we have xss

117
00:04:12,720 --> 00:04:15,680
and now the next question is well what

118
00:04:15,680 --> 00:04:17,839
is the context in which this exercise is

119
00:04:17,839 --> 00:04:19,839
running right so we know that with alert

120
00:04:19,839 --> 00:04:23,280
location so in this case we have um

121
00:04:23,280 --> 00:04:25,759
in the pop-up we can see that it says

122
00:04:25,759 --> 00:04:29,120
file right so the url is a file url so

123
00:04:29,120 --> 00:04:31,280
this means that there is no same origin

124
00:04:31,280 --> 00:04:33,280
policy so we should be able to read

125
00:04:33,280 --> 00:04:36,479
local files uh if the web view is uh

126
00:04:36,479 --> 00:04:38,160
incorrectly configured or configured

127
00:04:38,160 --> 00:04:40,960
with weaker security settings right

128
00:04:40,960 --> 00:04:44,000
so in this modified version um there's

129
00:04:44,000 --> 00:04:46,639
two possible attacks one is uh on

130
00:04:46,639 --> 00:04:49,040
internal storage which is the data data

131
00:04:49,040 --> 00:04:50,960
directory so other applications cannot

132
00:04:50,960 --> 00:04:53,440
read this and then the other one is on

133
00:04:53,440 --> 00:04:55,120
the sd card right so the sd card is

134
00:04:55,120 --> 00:04:57,199
interesting because it's kind of

135
00:04:57,199 --> 00:04:59,680
the wild west of android so

136
00:04:59,680 --> 00:05:01,440
any application

137
00:05:01,440 --> 00:05:04,320
can read and write there as well so you

138
00:05:04,320 --> 00:05:06,240
could have a malicious application on

139
00:05:06,240 --> 00:05:08,880
the phone that inserts something on the

140
00:05:08,880 --> 00:05:11,039
html from the sd card and then when the

141
00:05:11,039 --> 00:05:12,720
victim application

142
00:05:12,720 --> 00:05:14,240
loads this

143
00:05:14,240 --> 00:05:17,280
then you get xss

144
00:05:18,000 --> 00:05:19,360
so this would be

145
00:05:19,360 --> 00:05:20,479
another

146
00:05:20,479 --> 00:05:23,919
scenario right so first we have to find

147
00:05:23,919 --> 00:05:25,280
the application

148
00:05:25,280 --> 00:05:27,360
paths of the files that we want to steal

149
00:05:27,360 --> 00:05:28,759
right so we have

150
00:05:28,759 --> 00:05:31,680
users.xml and we have

151
00:05:31,680 --> 00:05:33,440
a god which is the

152
00:05:33,440 --> 00:05:35,759
database so the payloads look like this

153
00:05:35,759 --> 00:05:39,360
right so we send an xml http request

154
00:05:39,360 --> 00:05:41,680
for the xml file and then we alert it

155
00:05:41,680 --> 00:05:44,000
right so if the alert shows the contents

156
00:05:44,000 --> 00:05:46,560
of the file this means we can also send

157
00:05:46,560 --> 00:05:49,199
this file to an attacker control website

158
00:05:49,199 --> 00:05:51,120
so we can still local files and we have

159
00:05:51,120 --> 00:05:53,039
this data x filtration

160
00:05:53,039 --> 00:05:55,680
with xss and the same thing with the

161
00:05:55,680 --> 00:05:58,880
sqlite database right

162
00:06:01,280 --> 00:06:03,199
my throat is not

163
00:06:03,199 --> 00:06:04,720
very good today so

164
00:06:04,720 --> 00:06:06,560
so you can see there we have the alert

165
00:06:06,560 --> 00:06:08,479
of the user credentials the password and

166
00:06:08,479 --> 00:06:10,479
so on and then the same with the sqlite

167
00:06:10,479 --> 00:06:12,160
database right so

168
00:06:12,160 --> 00:06:14,479
in this the sd card i already explained

169
00:06:14,479 --> 00:06:17,919
this and then um you can also like read

170
00:06:17,919 --> 00:06:19,600
files from the phone right so as long as

171
00:06:19,600 --> 00:06:20,960
the application

172
00:06:20,960 --> 00:06:21,840
can

173
00:06:21,840 --> 00:06:23,520
read the files

174
00:06:23,520 --> 00:06:24,880
has permissions to read the files you

175
00:06:24,880 --> 00:06:26,639
can read files like for example the

176
00:06:26,639 --> 00:06:29,120
phone configuration or even files from

177
00:06:29,120 --> 00:06:30,560
other applications

178
00:06:30,560 --> 00:06:32,960
as long as the permissions of the file

179
00:06:32,960 --> 00:06:35,759
allow you to read this right so

180
00:06:35,759 --> 00:06:39,039
this is how that would look

181
00:06:39,039 --> 00:06:41,199
um

182
00:06:41,199 --> 00:06:43,759
the device here is a xiaomi the device

183
00:06:43,759 --> 00:06:45,280
so this is the configuration from the

184
00:06:45,280 --> 00:06:47,039
phone and then the

185
00:06:47,039 --> 00:06:49,680
the sqlite databases to to the right

186
00:06:49,680 --> 00:06:51,039
right so

187
00:06:51,039 --> 00:06:52,639
uh methodology wise you're trying to

188
00:06:52,639 --> 00:06:54,880
answer these questions like alert one we

189
00:06:54,880 --> 00:06:57,599
have xss alder location

190
00:06:57,599 --> 00:06:59,360
is it a file url

191
00:06:59,360 --> 00:07:01,680
and then try to read

192
00:07:01,680 --> 00:07:04,319
the local files but we need to know uh

193
00:07:04,319 --> 00:07:06,639
the location for this right so

194
00:07:06,639 --> 00:07:09,520
in android you need to have certain

195
00:07:09,520 --> 00:07:11,599
insecure settings in modern uh versions

196
00:07:11,599 --> 00:07:14,160
of android right so before the this used

197
00:07:14,160 --> 00:07:16,639
to be like the default but this was only

198
00:07:16,639 --> 00:07:18,720
up to android 4

199
00:07:18,720 --> 00:07:22,240
and now the developer can kind of has to

200
00:07:22,240 --> 00:07:24,560
shoot himself in the food to

201
00:07:24,560 --> 00:07:26,720
to do this right so you need to have

202
00:07:26,720 --> 00:07:28,560
javascript enable and now universal

203
00:07:28,560 --> 00:07:31,919
access from file urls and so on right so

204
00:07:31,919 --> 00:07:36,000
and also you need a file url

205
00:07:37,840 --> 00:07:41,039
so let's show this in a demo

206
00:07:42,840 --> 00:07:45,520
so we are sending here the payload and

207
00:07:45,520 --> 00:07:46,879
you can see that we can see the

208
00:07:46,879 --> 00:07:49,360
credentials from the user uh in the

209
00:07:49,360 --> 00:07:52,879
alert right so we can read an xml

210
00:07:52,879 --> 00:07:54,560
file

211
00:07:54,560 --> 00:07:57,120
this is the sqlite database that we can

212
00:07:57,120 --> 00:07:59,840
also read

213
00:08:01,039 --> 00:08:03,360
and now we will try uh

214
00:08:03,360 --> 00:08:04,720
the other files as well right so

215
00:08:04,720 --> 00:08:07,280
basically you can just

216
00:08:07,280 --> 00:08:09,759
copy the payloads from

217
00:08:09,759 --> 00:08:11,599
a url and then

218
00:08:11,599 --> 00:08:14,319
and then just try that right so

219
00:08:14,319 --> 00:08:15,599
now it's reading

220
00:08:15,599 --> 00:08:18,639
a file from browser

221
00:08:18,639 --> 00:08:20,400
this is the file from the phone right so

222
00:08:20,400 --> 00:08:22,639
the xiaomi device and then this is from

223
00:08:22,639 --> 00:08:24,240
drosos or another application on the

224
00:08:24,240 --> 00:08:25,039
phone

225
00:08:25,039 --> 00:08:27,280
which is loading a library that other

226
00:08:27,280 --> 00:08:29,199
applications can read

227
00:08:29,199 --> 00:08:30,639
so

228
00:08:30,639 --> 00:08:33,360
so yeah so that's that's the demo

229
00:08:33,360 --> 00:08:35,120
so

230
00:08:35,120 --> 00:08:37,200
now let's look at ios because of course

231
00:08:37,200 --> 00:08:39,039
this is also possible in ios and

232
00:08:39,039 --> 00:08:41,279
actually ios had worse

233
00:08:41,279 --> 00:08:43,839
default than androids up to

234
00:08:43,839 --> 00:08:47,279
ios 13 right which is fairly recent

235
00:08:47,279 --> 00:08:48,959
so

236
00:08:48,959 --> 00:08:51,600
for this we will demonstrate this using

237
00:08:51,600 --> 00:08:53,760
down vulnerable and secure version two

238
00:08:53,760 --> 00:08:57,200
so it has some webview issues exercise

239
00:08:57,200 --> 00:08:58,720
and then we can try the same thing like

240
00:08:58,720 --> 00:09:00,800
try hello with h1

241
00:09:00,800 --> 00:09:02,720
and so on right so we are trying to

242
00:09:02,720 --> 00:09:04,240
answer the same questions do we get the

243
00:09:04,240 --> 00:09:05,680
alert one

244
00:09:05,680 --> 00:09:07,519
what is the url so in this case we have

245
00:09:07,519 --> 00:09:10,160
an apple web data url which is

246
00:09:10,160 --> 00:09:13,120
equivalent to a file url so we can also

247
00:09:13,120 --> 00:09:15,279
read local files like cellular usage and

248
00:09:15,279 --> 00:09:18,720
so on from the phone

249
00:09:20,160 --> 00:09:21,760
so methodology wise we're trying to

250
00:09:21,760 --> 00:09:24,480
answer the same questions um do we have

251
00:09:24,480 --> 00:09:25,760
do we have the other one do we have the

252
00:09:25,760 --> 00:09:27,600
other location

253
00:09:27,600 --> 00:09:29,760
uh can we read the local files by

254
00:09:29,760 --> 00:09:32,399
knowing the paths and so on right so

255
00:09:32,399 --> 00:09:33,920
this is the vulnerable code right so

256
00:09:33,920 --> 00:09:36,959
it's loading an html string

257
00:09:36,959 --> 00:09:37,680
it's

258
00:09:37,680 --> 00:09:39,839
this is swift code so which is kind of

259
00:09:39,839 --> 00:09:42,000
weird because normally you would expect

260
00:09:42,000 --> 00:09:44,959
the double quote to be

261
00:09:44,959 --> 00:09:48,080
concatenated you know like to be like

262
00:09:48,080 --> 00:09:49,600
you would expect like a second double

263
00:09:49,600 --> 00:09:52,320
quote to break the string but in swift

264
00:09:52,320 --> 00:09:53,680
you don't have to do that you like do it

265
00:09:53,680 --> 00:09:56,399
like this backslash and then you have

266
00:09:56,399 --> 00:09:57,519
the name

267
00:09:57,519 --> 00:09:59,760
in parentheses and this is concatenating

268
00:09:59,760 --> 00:10:02,399
the name input into the string

269
00:10:02,399 --> 00:10:04,240
and then the other component that we

270
00:10:04,240 --> 00:10:06,720
have here is the url is null right so

271
00:10:06,720 --> 00:10:08,720
there's an empty url so this means by

272
00:10:08,720 --> 00:10:11,210
default um the webview is going to

273
00:10:11,210 --> 00:10:12,720
[Music]

274
00:10:12,720 --> 00:10:14,160
load this

275
00:10:14,160 --> 00:10:17,600
um with kind of maximal permissions

276
00:10:17,600 --> 00:10:19,680
without same origin policy and so on so

277
00:10:19,680 --> 00:10:21,600
we can read local files right so that is

278
00:10:21,600 --> 00:10:22,959
the problem

279
00:10:22,959 --> 00:10:25,279
and this is the default for

280
00:10:25,279 --> 00:10:28,640
ui webviews so webviews ui webviews by

281
00:10:28,640 --> 00:10:30,720
default have webkit

282
00:10:30,720 --> 00:10:32,880
allow universal access from file urls

283
00:10:32,880 --> 00:10:34,640
and webkit allow file access from file

284
00:10:34,640 --> 00:10:36,480
urls these are turned on by default and

285
00:10:36,480 --> 00:10:39,120
you cannot even disable javascript so

286
00:10:39,120 --> 00:10:40,640
these web views are vulnerable by

287
00:10:40,640 --> 00:10:43,920
default to this kind of attack

288
00:10:44,720 --> 00:10:48,399
but i think um now in ios 14 like apple

289
00:10:48,399 --> 00:10:50,079
like started like giving developers

290
00:10:50,079 --> 00:10:51,680
warnings about this so you you need to

291
00:10:51,680 --> 00:10:54,160
use um the wk webview if you're a mobile

292
00:10:54,160 --> 00:10:56,720
developer and then you you should be

293
00:10:56,720 --> 00:10:58,880
uh much better uh by default right but

294
00:10:58,880 --> 00:11:00,800
you can also shoot yourself in the foot

295
00:11:00,800 --> 00:11:04,079
by enabling these insecure settings so

296
00:11:04,079 --> 00:11:07,120
yeah it's about concatenating

297
00:11:07,120 --> 00:11:09,440
user input into the strings

298
00:11:09,440 --> 00:11:13,800
so let's do a demo for this one

299
00:11:14,880 --> 00:11:15,920
so

300
00:11:15,920 --> 00:11:19,120
we are trying first the alert one

301
00:11:19,120 --> 00:11:21,360
right so

302
00:11:21,360 --> 00:11:22,959
we get the other one so this confirms we

303
00:11:22,959 --> 00:11:24,959
have xss now we have to do the other

304
00:11:24,959 --> 00:11:26,800
location to figure out what is the

305
00:11:26,800 --> 00:11:29,200
security context in which

306
00:11:29,200 --> 00:11:32,000
this is being executed this xss

307
00:11:32,000 --> 00:11:35,279
so this tells us uh that is a apple web

308
00:11:35,279 --> 00:11:37,600
data url so we should get excited

309
00:11:37,600 --> 00:11:38,959
because this means there's potential for

310
00:11:38,959 --> 00:11:42,359
data x filtration

311
00:11:44,399 --> 00:11:46,720
and now we will try uh to read some

312
00:11:46,720 --> 00:11:48,399
local files as well

313
00:11:48,399 --> 00:11:49,600
so

314
00:11:49,600 --> 00:11:52,079
this is reading the

315
00:11:52,079 --> 00:11:54,320
data usage and there's like other like

316
00:11:54,320 --> 00:11:56,959
known paths in ios for certain files

317
00:11:56,959 --> 00:11:59,439
right so

318
00:12:03,519 --> 00:12:05,120
so yeah so you can see that you can read

319
00:12:05,120 --> 00:12:07,200
sqlite databases and so as long as you

320
00:12:07,200 --> 00:12:09,519
know the path on the on the phone for

321
00:12:09,519 --> 00:12:12,880
the file uh you are good to go right so

322
00:12:12,880 --> 00:12:14,240
so yeah

323
00:12:14,240 --> 00:12:17,120
so that's that demo uh so now let's see

324
00:12:17,120 --> 00:12:17,920
some

325
00:12:17,920 --> 00:12:20,800
attacks on using the sd card on android

326
00:12:20,800 --> 00:12:23,120
right so the sd card is um

327
00:12:23,120 --> 00:12:24,880
dangerous location in android for

328
00:12:24,880 --> 00:12:27,440
several reasons one is any application

329
00:12:27,440 --> 00:12:29,600
can write there or read from there so if

330
00:12:29,600 --> 00:12:31,279
you save like anything sensitive on the

331
00:12:31,279 --> 00:12:32,639
sd card

332
00:12:32,639 --> 00:12:34,160
uh you know

333
00:12:34,160 --> 00:12:35,680
a malicious application could treat it

334
00:12:35,680 --> 00:12:37,519
and then another problem is even a

335
00:12:37,519 --> 00:12:40,560
regular thief without elite skills can

336
00:12:40,560 --> 00:12:42,160
take the sd card out without even

337
00:12:42,160 --> 00:12:43,839
knowing the unlocked pattern plug this

338
00:12:43,839 --> 00:12:45,200
sd card into a computer and read

339
00:12:45,200 --> 00:12:47,360
everything in there right so

340
00:12:47,360 --> 00:12:49,440
by default there's no encryption

341
00:12:49,440 --> 00:12:51,200
you can you know take it out without

342
00:12:51,200 --> 00:12:53,519
even knowing the unlock pattern and so

343
00:12:53,519 --> 00:12:54,480
on

344
00:12:54,480 --> 00:12:58,560
so yeah kind of a memory uh problem

345
00:12:58,560 --> 00:13:00,959
um and yeah let's see some scenario of

346
00:13:00,959 --> 00:13:02,800
saving sensitive stuff

347
00:13:02,800 --> 00:13:04,560
in the sd card right so

348
00:13:04,560 --> 00:13:06,399
this was a whistleblower

349
00:13:06,399 --> 00:13:08,720
application meant to be used in

350
00:13:08,720 --> 00:13:10,880
countries where you know they have like

351
00:13:10,880 --> 00:13:12,959
kind of this oppressive kind of

352
00:13:12,959 --> 00:13:15,519
government and trying to let citizens

353
00:13:15,519 --> 00:13:17,680
report human rights violations

354
00:13:17,680 --> 00:13:19,839
um

355
00:13:19,839 --> 00:13:21,760
this application was saving the human

356
00:13:21,760 --> 00:13:23,920
right violation reports that people were

357
00:13:23,920 --> 00:13:26,480
entering in the sd card so this could

358
00:13:26,480 --> 00:13:28,880
get somebody killed in this in a country

359
00:13:28,880 --> 00:13:30,880
like that right so you have like police

360
00:13:30,880 --> 00:13:32,800
stop you then they get the sd card out

361
00:13:32,800 --> 00:13:34,160
they plug it into a computer they see

362
00:13:34,160 --> 00:13:35,600
that you are reporting these human right

363
00:13:35,600 --> 00:13:38,079
violations and maybe they kill you they

364
00:13:38,079 --> 00:13:39,920
send you to prison or whatever right so

365
00:13:39,920 --> 00:13:41,920
this could end up pretty badly and this

366
00:13:41,920 --> 00:13:44,959
was all the data from the human rights

367
00:13:44,959 --> 00:13:48,599
violation report

368
00:13:48,880 --> 00:13:51,760
another scenario um what happens if you

369
00:13:51,760 --> 00:13:54,000
read data from the sd card right so this

370
00:13:54,000 --> 00:13:56,240
was an application loading text files

371
00:13:56,240 --> 00:13:58,480
from the sd card so

372
00:13:58,480 --> 00:14:01,519
in this case we have a persistent xss

373
00:14:01,519 --> 00:14:03,839
with a data x filtration right so we

374
00:14:03,839 --> 00:14:04,959
have

375
00:14:04,959 --> 00:14:07,040
a chapter text file being loaded from

376
00:14:07,040 --> 00:14:09,760
the sd card and this is stored in a page

377
00:14:09,760 --> 00:14:12,079
data variable and then the page data

378
00:14:12,079 --> 00:14:14,079
variable is concatenated into a string

379
00:14:14,079 --> 00:14:17,120
in html so we have html injection and

380
00:14:17,120 --> 00:14:18,320
xss

381
00:14:18,320 --> 00:14:20,160
and then

382
00:14:20,160 --> 00:14:21,680
now for this it's very useful to use

383
00:14:21,680 --> 00:14:24,320
hack vector which is now also

384
00:14:24,320 --> 00:14:26,079
a burp plugin

385
00:14:26,079 --> 00:14:26,880
so

386
00:14:26,880 --> 00:14:28,720
you can use eval from charcoal if you

387
00:14:28,720 --> 00:14:30,959
have trouble with some characters that

388
00:14:30,959 --> 00:14:32,320
are like breaking the application or

389
00:14:32,320 --> 00:14:34,480
whatever and this kind of makes it a

390
00:14:34,480 --> 00:14:36,959
little bit easier sometimes right so

391
00:14:36,959 --> 00:14:39,120
this turns the payload that is like

392
00:14:39,120 --> 00:14:40,720
retrieving the file

393
00:14:40,720 --> 00:14:43,120
into eval string from uh

394
00:14:43,120 --> 00:14:46,240
charcoal and so on right so

395
00:14:46,240 --> 00:14:48,079
you get rid of the single quotes double

396
00:14:48,079 --> 00:14:51,519
quotes and it's more likely to work

397
00:14:51,519 --> 00:14:54,399
so yeah this was the persistent xss with

398
00:14:54,399 --> 00:14:57,120
data x filtration

399
00:14:57,120 --> 00:14:59,199
um

400
00:14:59,199 --> 00:15:02,639
and yeah so now let's see uh spoofing

401
00:15:02,639 --> 00:15:04,079
attacks right so

402
00:15:04,079 --> 00:15:07,040
in this case you can use for example one

403
00:15:07,040 --> 00:15:09,360
url to a user but then when the user

404
00:15:09,360 --> 00:15:11,120
clicks on this they really go to another

405
00:15:11,120 --> 00:15:13,920
url right so a trick for this is to

406
00:15:13,920 --> 00:15:16,160
using to use left to right and right to

407
00:15:16,160 --> 00:15:17,440
left characters

408
00:15:17,440 --> 00:15:20,000
so this has been used

409
00:15:20,000 --> 00:15:22,800
in the wild and

410
00:15:22,800 --> 00:15:24,880
it can be an interesting attack vector

411
00:15:24,880 --> 00:15:26,959
especially when the application

412
00:15:26,959 --> 00:15:29,519
linkifies uh automatically right so you

413
00:15:29,519 --> 00:15:31,600
can for example

414
00:15:31,600 --> 00:15:33,040
send some um

415
00:15:33,040 --> 00:15:34,560
right-left characters and then you pull

416
00:15:34,560 --> 00:15:36,720
like mog.evil.org and then

417
00:15:36,720 --> 00:15:37,759
when the

418
00:15:37,759 --> 00:15:39,839
the victim really sees growth

419
00:15:39,839 --> 00:15:41,279
but then when they click on it they go

420
00:15:41,279 --> 00:15:43,839
to mog.table.org right so they go to the

421
00:15:43,839 --> 00:15:45,600
reverse right so this can be an

422
00:15:45,600 --> 00:15:48,399
interesting vector and then something

423
00:15:48,399 --> 00:15:50,320
that you would normally not think about

424
00:15:50,320 --> 00:15:51,519
is

425
00:15:51,519 --> 00:15:54,160
like a mobile application can sometimes

426
00:15:54,160 --> 00:15:57,440
uh have a local server right so it's uh

427
00:15:57,440 --> 00:15:59,279
it's kind of uh

428
00:15:59,279 --> 00:16:01,040
kind of crazy but possible right and

429
00:16:01,040 --> 00:16:02,079
then you have to worry about

430
00:16:02,079 --> 00:16:04,160
authentication authorization and so on

431
00:16:04,160 --> 00:16:06,000
so this was a cordova

432
00:16:06,000 --> 00:16:08,240
ios application that was running a local

433
00:16:08,240 --> 00:16:09,279
server

434
00:16:09,279 --> 00:16:10,480
so

435
00:16:10,480 --> 00:16:12,560
it had a path traversal without

436
00:16:12,560 --> 00:16:15,519
authorization so you could um

437
00:16:15,519 --> 00:16:17,519
by knowing the port like a malicious

438
00:16:17,519 --> 00:16:19,600
application on the same phone could uh

439
00:16:19,600 --> 00:16:22,800
browse files right so you could do this

440
00:16:22,800 --> 00:16:25,600
dot dot slash of uh you know sequence of

441
00:16:25,600 --> 00:16:27,360
this and then it's the password and so

442
00:16:27,360 --> 00:16:30,240
on so you could read like local files uh

443
00:16:30,240 --> 00:16:32,639
and so on by using this local server

444
00:16:32,639 --> 00:16:34,480
right so this is a vector that normally

445
00:16:34,480 --> 00:16:36,800
you would not think about the mobile

446
00:16:36,800 --> 00:16:38,959
security right so you could like dump

447
00:16:38,959 --> 00:16:41,440
all the files uh like this just you know

448
00:16:41,440 --> 00:16:43,120
in a shell one liner

449
00:16:43,120 --> 00:16:45,199
and so on right so

450
00:16:45,199 --> 00:16:48,079
so question uh for the audience

451
00:16:48,079 --> 00:16:50,320
best cursive request forgery exist in

452
00:16:50,320 --> 00:16:52,399
mobile apps what do you think

453
00:16:52,399 --> 00:16:55,120
any takers

454
00:16:56,639 --> 00:16:58,880
grocery quest forgery existing mobile

455
00:16:58,880 --> 00:17:00,560
apps yes no

456
00:17:00,560 --> 00:17:02,839
maybe shop of hands

457
00:17:02,839 --> 00:17:07,119
yes okay so some people say yes no

458
00:17:07,119 --> 00:17:07,919
okay

459
00:17:07,919 --> 00:17:09,199
so

460
00:17:09,199 --> 00:17:12,240
uh so yes so crosshair quest forgery

461
00:17:12,240 --> 00:17:14,640
exists in mobile apps and especially

462
00:17:14,640 --> 00:17:17,439
with diblings right so this has

463
00:17:17,439 --> 00:17:19,439
a popular vector for like bug bounty

464
00:17:19,439 --> 00:17:20,959
stuff and so on

465
00:17:20,959 --> 00:17:21,919
so

466
00:17:21,919 --> 00:17:24,319
um i'm going to go a little bit faster

467
00:17:24,319 --> 00:17:25,839
this because i i want to cover other

468
00:17:25,839 --> 00:17:28,400
stuff later but the slides are meant for

469
00:17:28,400 --> 00:17:30,240
like people trying to follow the

470
00:17:30,240 --> 00:17:32,400
exercises with with the slides right

471
00:17:32,400 --> 00:17:34,240
basically in android

472
00:17:34,240 --> 00:17:36,320
you're going to have some deep link

473
00:17:36,320 --> 00:17:37,760
activity

474
00:17:37,760 --> 00:17:39,679
this can be browsable or not if it's

475
00:17:39,679 --> 00:17:41,120
browsable then it's more exciting

476
00:17:41,120 --> 00:17:42,640
because it can be attacked from the

477
00:17:42,640 --> 00:17:46,000
browser also if it's not browsable then

478
00:17:46,000 --> 00:17:47,679
only a malicious application installed

479
00:17:47,679 --> 00:17:50,000
on the same device will be able to

480
00:17:50,000 --> 00:17:51,120
attack it

481
00:17:51,120 --> 00:17:52,559
so we have

482
00:17:52,559 --> 00:17:54,480
one possibility is that the deep link

483
00:17:54,480 --> 00:17:57,360
activity has an intent filter

484
00:17:57,360 --> 00:17:59,600
and then the intent filter defines the

485
00:17:59,600 --> 00:18:02,480
structure of the deep link this is not

486
00:18:02,480 --> 00:18:05,280
necessary but uh it's often like the way

487
00:18:05,280 --> 00:18:06,880
in which this is implemented right so

488
00:18:06,880 --> 00:18:09,039
i'll show other examples afterwards so

489
00:18:09,039 --> 00:18:10,799
in this case we have the an android

490
00:18:10,799 --> 00:18:13,840
scheme of some app host of get creds and

491
00:18:13,840 --> 00:18:16,000
path prefix of user

492
00:18:16,000 --> 00:18:16,720
so

493
00:18:16,720 --> 00:18:18,559
this is kind of the structure of the

494
00:18:18,559 --> 00:18:20,559
deep link that the application

495
00:18:20,559 --> 00:18:23,440
expects right

496
00:18:24,320 --> 00:18:26,799
so for this i'm going to show um a case

497
00:18:26,799 --> 00:18:29,200
study of crosshair request forgery using

498
00:18:29,200 --> 00:18:31,760
deep links on periscope so we have like

499
00:18:31,760 --> 00:18:33,679
the vulnerable version

500
00:18:33,679 --> 00:18:35,360
as part of the workshop that i mentioned

501
00:18:35,360 --> 00:18:37,679
before so basically first you need to

502
00:18:37,679 --> 00:18:38,640
create a

503
00:18:38,640 --> 00:18:40,160
periscope account

504
00:18:40,160 --> 00:18:42,160
and then we look at the android manifest

505
00:18:42,160 --> 00:18:45,120
with apk tool you can decompile it

506
00:18:45,120 --> 00:18:46,640
and then we can see that there's some

507
00:18:46,640 --> 00:18:50,000
browseable activities and we can see

508
00:18:50,000 --> 00:18:51,919
the activity that we're interested in

509
00:18:51,919 --> 00:18:54,000
has a schema of pscp

510
00:18:54,000 --> 00:18:55,679
and host of user

511
00:18:55,679 --> 00:18:57,520
so what can we do with that right so we

512
00:18:57,520 --> 00:18:58,799
can send

513
00:18:58,799 --> 00:19:01,360
an adb command for example sending an

514
00:19:01,360 --> 00:19:04,160
android intent action view and then with

515
00:19:04,160 --> 00:19:06,160
the d

516
00:19:06,160 --> 00:19:09,679
we pass like the intent data of psp user

517
00:19:09,679 --> 00:19:12,240
and then the id of some user right

518
00:19:12,240 --> 00:19:14,799
and you can do this as well with browser

519
00:19:14,799 --> 00:19:16,480
and from a browser so i'll show all

520
00:19:16,480 --> 00:19:18,080
methods

521
00:19:18,080 --> 00:19:20,720
also with browser

522
00:19:20,720 --> 00:19:22,799
there's a scanner so you can scan for

523
00:19:22,799 --> 00:19:24,799
browseable activities but this scanner

524
00:19:24,799 --> 00:19:27,520
is not super reliable so

525
00:19:27,520 --> 00:19:29,440
it's going to miss some combinations

526
00:19:29,440 --> 00:19:33,280
right so you shouldn't rely on it

527
00:19:34,320 --> 00:19:36,080
this is the output from

528
00:19:36,080 --> 00:19:37,440
from trosser

529
00:19:37,440 --> 00:19:41,039
uh and then the actual cross-request

530
00:19:41,039 --> 00:19:43,120
forgery vulnerability is that you can

531
00:19:43,120 --> 00:19:45,200
send a deep link that is going to

532
00:19:45,200 --> 00:19:46,720
automatically

533
00:19:46,720 --> 00:19:48,320
follow any user

534
00:19:48,320 --> 00:19:51,120
that you send to the victim

535
00:19:51,120 --> 00:19:53,039
without any

536
00:19:53,039 --> 00:19:54,880
confirmation from the user right so this

537
00:19:54,880 --> 00:19:57,120
is the actual vulnerability so before we

538
00:19:57,120 --> 00:19:58,640
were just opening the profile but when

539
00:19:58,640 --> 00:20:02,000
we had the slash follow the issue was uh

540
00:20:02,000 --> 00:20:04,000
you could like make

541
00:20:04,000 --> 00:20:06,640
the victim follow any user you want um

542
00:20:06,640 --> 00:20:08,640
right so

543
00:20:08,640 --> 00:20:11,039
there's several ways to test this uh one

544
00:20:11,039 --> 00:20:14,000
is with deep link tester which is um

545
00:20:14,000 --> 00:20:16,720
an application on google play and then

546
00:20:16,720 --> 00:20:17,760
you can

547
00:20:17,760 --> 00:20:21,120
send the you know like type any um

548
00:20:21,120 --> 00:20:24,159
deep link and then click on go to uri

549
00:20:24,159 --> 00:20:26,720
and then you can see that the user

550
00:20:26,720 --> 00:20:28,720
starts being followed and the same with

551
00:20:28,720 --> 00:20:31,760
adb so adb is what i normally prefer in

552
00:20:31,760 --> 00:20:34,480
pentas because every developer knows

553
00:20:34,480 --> 00:20:35,919
about adb

554
00:20:35,919 --> 00:20:37,840
so we can add the slash follow there and

555
00:20:37,840 --> 00:20:39,440
we can do the same with droso right so

556
00:20:39,440 --> 00:20:40,799
these are all the

557
00:20:40,799 --> 00:20:43,039
main ways and also from a malicious

558
00:20:43,039 --> 00:20:45,120
website right so this is also available

559
00:20:45,120 --> 00:20:49,000
on this website

560
00:20:49,280 --> 00:20:52,720
so you can also test it from there

561
00:20:52,720 --> 00:20:53,679
um

562
00:20:53,679 --> 00:20:55,440
and yeah so if you just uh click on

563
00:20:55,440 --> 00:20:57,039
periscope cross request forgery demo

564
00:20:57,039 --> 00:20:59,120
then it starts like following the user

565
00:20:59,120 --> 00:21:00,159
as well

566
00:21:00,159 --> 00:21:02,480
so this is the html and i'm just going

567
00:21:02,480 --> 00:21:05,520
to show the demo

568
00:21:05,520 --> 00:21:07,760
so

569
00:21:08,320 --> 00:21:10,720
so first is going with deep link tester

570
00:21:10,720 --> 00:21:14,760
and it's going to follow the user

571
00:21:17,440 --> 00:21:19,200
so it goes to uh

572
00:21:19,200 --> 00:21:20,720
uri you can see that it changed to

573
00:21:20,720 --> 00:21:21,760
following

574
00:21:21,760 --> 00:21:24,400
and then you have like to unfollow and

575
00:21:24,400 --> 00:21:26,880
close the

576
00:21:27,120 --> 00:21:29,440
close the user

577
00:21:29,440 --> 00:21:31,919
so that it follows again right

578
00:21:31,919 --> 00:21:34,000
so

579
00:21:34,000 --> 00:21:37,840
so now we're going to do it with adb

580
00:21:42,559 --> 00:21:44,000
so you just send

581
00:21:44,000 --> 00:21:46,080
the intent with adb right so adb shell

582
00:21:46,080 --> 00:21:47,200
and so on

583
00:21:47,200 --> 00:21:49,120
and we add the slash follow and then

584
00:21:49,120 --> 00:21:51,360
when you uh

585
00:21:51,360 --> 00:21:53,440
open them

586
00:21:53,440 --> 00:21:55,120
the device again so here i was like

587
00:21:55,120 --> 00:21:56,720
missing some quote

588
00:21:56,720 --> 00:21:59,760
um so yeah

589
00:21:59,760 --> 00:22:01,600
and then you can see that it changed to

590
00:22:01,600 --> 00:22:03,919
to following right

591
00:22:03,919 --> 00:22:05,360
and then we can do the same thing with

592
00:22:05,360 --> 00:22:06,720
browser so

593
00:22:06,720 --> 00:22:08,880
we first have to unfollow we close the

594
00:22:08,880 --> 00:22:11,440
user and then you just go to trouser and

595
00:22:11,440 --> 00:22:14,000
add the slash follow at the end

596
00:22:14,000 --> 00:22:16,480
and then

597
00:22:16,640 --> 00:22:19,440
this changes to following as well right

598
00:22:19,440 --> 00:22:22,559
and then from a malicious website

599
00:22:22,559 --> 00:22:25,280
you can just go to

600
00:22:25,280 --> 00:22:27,840
to this link

601
00:22:27,840 --> 00:22:29,280
it says uh

602
00:22:29,280 --> 00:22:30,880
requires no authentication or anything

603
00:22:30,880 --> 00:22:32,960
and then you just unfollow and then open

604
00:22:32,960 --> 00:22:35,120
the browser

605
00:22:35,120 --> 00:22:37,280
and just uh click in there and because

606
00:22:37,280 --> 00:22:39,520
the activity is browseable the

607
00:22:39,520 --> 00:22:41,919
the deep link arrives there right so

608
00:22:41,919 --> 00:22:44,720
i'm just explaining how deep links work

609
00:22:44,720 --> 00:22:46,960
and now we will show uh

610
00:22:46,960 --> 00:22:47,760
other

611
00:22:47,760 --> 00:22:50,000
examples right

612
00:22:50,000 --> 00:22:51,919
so yeah we need to we need to go deep

613
00:22:51,919 --> 00:22:53,679
right so we're going to see more deep

614
00:22:53,679 --> 00:22:56,960
link uh scenarios that now so now let's

615
00:22:56,960 --> 00:22:58,720
see some deep link attacks to make phone

616
00:22:58,720 --> 00:23:01,120
calls so in this exercise we will use

617
00:23:01,120 --> 00:23:02,799
them vulnerable insecure but this is

618
00:23:02,799 --> 00:23:03,679
also

619
00:23:03,679 --> 00:23:05,600
a problem that happens like in real

620
00:23:05,600 --> 00:23:07,200
applications right but this is just for

621
00:23:07,200 --> 00:23:09,200
demonstration purposes as part of the

622
00:23:09,200 --> 00:23:10,240
workshop

623
00:23:10,240 --> 00:23:13,760
so first in ios you look for url schemes

624
00:23:13,760 --> 00:23:15,360
so in the android in android we were

625
00:23:15,360 --> 00:23:17,360
looking at the android manifest in ios

626
00:23:17,360 --> 00:23:19,120
we look at the info plist right so this

627
00:23:19,120 --> 00:23:20,960
is kind of the equivalent and then in

628
00:23:20,960 --> 00:23:22,320
this case we have done vulnerability

629
00:23:22,320 --> 00:23:23,679
secure up and down vulnerability secure

630
00:23:23,679 --> 00:23:26,240
swift so these are the two url schemes

631
00:23:26,240 --> 00:23:28,400
uh if you have xcode you can look at

632
00:23:28,400 --> 00:23:30,480
this by looking at the project info and

633
00:23:30,480 --> 00:23:32,720
then scrolling down to url types and

634
00:23:32,720 --> 00:23:34,480
then you have url schemes right so this

635
00:23:34,480 --> 00:23:36,640
is how that looks

636
00:23:36,640 --> 00:23:37,919
and then

637
00:23:37,919 --> 00:23:39,280
we know

638
00:23:39,280 --> 00:23:42,720
how the dibling starts but to know uh

639
00:23:42,720 --> 00:23:44,480
what the application does with this deep

640
00:23:44,480 --> 00:23:46,000
link we have to look at the source code

641
00:23:46,000 --> 00:23:47,840
right so that's the easiest way so that

642
00:23:47,840 --> 00:23:50,400
is going to be done in the app delegate

643
00:23:50,400 --> 00:23:52,080
if the application is written in swift

644
00:23:52,080 --> 00:23:54,240
this will be appdelegate.swift if it is

645
00:23:54,240 --> 00:23:55,840
written in objective c it will be

646
00:23:55,840 --> 00:23:57,360
appdelegate.m

647
00:23:57,360 --> 00:23:58,640
right so

648
00:23:58,640 --> 00:24:00,640
this can vary but

649
00:24:00,640 --> 00:24:03,120
this is in this case this is the logic

650
00:24:03,120 --> 00:24:05,520
for this so it's looking for phone call

651
00:24:05,520 --> 00:24:08,000
number and it's going to split this

652
00:24:08,000 --> 00:24:11,520
into an array called split url and then

653
00:24:11,520 --> 00:24:13,200
it's going to cast

654
00:24:13,200 --> 00:24:14,559
so

655
00:24:14,559 --> 00:24:16,960
if you're familiar with php this would

656
00:24:16,960 --> 00:24:18,720
be the equivalent of explode and if

657
00:24:18,720 --> 00:24:19,919
you're familiar with python this would

658
00:24:19,919 --> 00:24:22,480
be the equivalent of split so basically

659
00:24:22,480 --> 00:24:24,720
it's taking a string looks for phone

660
00:24:24,720 --> 00:24:26,159
call number and then it's going to

661
00:24:26,159 --> 00:24:28,720
explode this into chunks right so the

662
00:24:28,720 --> 00:24:31,440
chunk 0 is going to be the deep link and

663
00:24:31,440 --> 00:24:32,960
chunk one is going to be the phone

664
00:24:32,960 --> 00:24:35,440
number right so it then it casts the

665
00:24:35,440 --> 00:24:37,520
phone number to an integer and if this

666
00:24:37,520 --> 00:24:39,200
works it assumes it's a valid phone

667
00:24:39,200 --> 00:24:40,880
number it tries to make the call right

668
00:24:40,880 --> 00:24:42,480
so

669
00:24:42,480 --> 00:24:44,640
so yeah if you look at xcode this is how

670
00:24:44,640 --> 00:24:46,480
the log the code looks

671
00:24:46,480 --> 00:24:47,919
there

672
00:24:47,919 --> 00:24:49,520
and

673
00:24:49,520 --> 00:24:52,000
based on this we know now the structure

674
00:24:52,000 --> 00:24:54,159
of the deep link and we can demonstrate

675
00:24:54,159 --> 00:24:56,240
from uh from a malicious web page right

676
00:24:56,240 --> 00:24:58,400
that the user clicks like we win an ipad

677
00:24:58,400 --> 00:25:00,480
now and then it makes a premium phone

678
00:25:00,480 --> 00:25:02,640
call so there's an interesting attack

679
00:25:02,640 --> 00:25:04,720
vector on mobile applications to

680
00:25:04,720 --> 00:25:05,919
monetize

681
00:25:05,919 --> 00:25:08,159
the attack because by making the user

682
00:25:08,159 --> 00:25:10,480
ring a premium phone number

683
00:25:10,480 --> 00:25:12,720
you can make money basically as a

684
00:25:12,720 --> 00:25:15,360
criminal right so this is um these are

685
00:25:15,360 --> 00:25:16,960
the deep links it's basically just a web

686
00:25:16,960 --> 00:25:18,240
page with

687
00:25:18,240 --> 00:25:19,760
links to them

688
00:25:19,760 --> 00:25:21,279
to the deep links

689
00:25:21,279 --> 00:25:23,360
uh and then the only thing safari tells

690
00:25:23,360 --> 00:25:26,799
you is open this in the vulnerability

691
00:25:26,799 --> 00:25:28,320
version two and then you just tap on

692
00:25:28,320 --> 00:25:29,679
open but you don't really see the link

693
00:25:29,679 --> 00:25:31,520
right so here we're showing the link

694
00:25:31,520 --> 00:25:33,200
because this is just for demonstration

695
00:25:33,200 --> 00:25:34,880
purposes but in a real attack this will

696
00:25:34,880 --> 00:25:36,960
say win an ipad now or something like

697
00:25:36,960 --> 00:25:38,559
that right

698
00:25:38,559 --> 00:25:39,760
so

699
00:25:39,760 --> 00:25:40,880
so yeah

700
00:25:40,880 --> 00:25:44,559
so let's do the demo for this one

701
00:25:45,360 --> 00:25:48,000
so that you see it

702
00:25:48,000 --> 00:25:50,159
working

703
00:25:50,159 --> 00:25:52,559
so basically just uh click on the link

704
00:25:52,559 --> 00:25:54,559
and it's going to make the

705
00:25:54,559 --> 00:25:57,840
premium phone call right

706
00:26:00,000 --> 00:26:01,760
so you tap on open and then it says

707
00:26:01,760 --> 00:26:04,080
success and it's just

708
00:26:04,080 --> 00:26:05,760
simulating that is making the phone call

709
00:26:05,760 --> 00:26:07,679
right and the same with the other url

710
00:26:07,679 --> 00:26:09,760
100 because there's this tool right so

711
00:26:09,760 --> 00:26:11,360
it does the same thing

712
00:26:11,360 --> 00:26:13,840
okay so with that now that we know what

713
00:26:13,840 --> 00:26:15,279
deep links are about let's see some

714
00:26:15,279 --> 00:26:17,200
scenarios from the field

715
00:26:17,200 --> 00:26:19,440
so one possibility is that you have an

716
00:26:19,440 --> 00:26:20,880
application that is a browser

717
00:26:20,880 --> 00:26:23,600
application right so you have a url and

718
00:26:23,600 --> 00:26:25,520
then this url has to be opened by the

719
00:26:25,520 --> 00:26:27,039
browser now

720
00:26:27,039 --> 00:26:28,799
if you have

721
00:26:28,799 --> 00:26:30,880
a

722
00:26:30,880 --> 00:26:32,720
malicious application on the phone what

723
00:26:32,720 --> 00:26:34,000
you can do

724
00:26:34,000 --> 00:26:35,760
is to

725
00:26:35,760 --> 00:26:36,880
save

726
00:26:36,880 --> 00:26:38,799
something on the sd card and then make

727
00:26:38,799 --> 00:26:41,440
the browser go to this location the sd

728
00:26:41,440 --> 00:26:42,880
card and then try to read local files

729
00:26:42,880 --> 00:26:44,240
right so this is

730
00:26:44,240 --> 00:26:47,039
um this is the scenario right so this is

731
00:26:47,039 --> 00:26:48,320
in this case

732
00:26:48,320 --> 00:26:50,240
um the dibling works in a slightly

733
00:26:50,240 --> 00:26:51,520
different way so in this case we don't

734
00:26:51,520 --> 00:26:54,080
have an intent filter that tells us the

735
00:26:54,080 --> 00:26:55,520
structure of the deep link this is

736
00:26:55,520 --> 00:26:57,200
actually done in the in the code that is

737
00:26:57,200 --> 00:26:58,799
looking for this search query so it's

738
00:26:58,799 --> 00:27:00,400
slightly different than the example i

739
00:27:00,400 --> 00:27:01,919
showed before

740
00:27:01,919 --> 00:27:03,279
and then

741
00:27:03,279 --> 00:27:05,679
we can make the application go to the sd

742
00:27:05,679 --> 00:27:08,480
card and steal databases because its url

743
00:27:08,480 --> 00:27:11,360
validation actually accepts file urls

744
00:27:11,360 --> 00:27:13,919
which is really bad right so yesterday

745
00:27:13,919 --> 00:27:16,240
in my demo for

746
00:27:16,240 --> 00:27:18,320
hacking electron applications there was

747
00:27:18,320 --> 00:27:20,799
also a remote code execution because

748
00:27:20,799 --> 00:27:22,720
the user would click on a file url right

749
00:27:22,720 --> 00:27:25,279
so file urls both in mobile and desktop

750
00:27:25,279 --> 00:27:27,919
applications very interesting always

751
00:27:27,919 --> 00:27:28,720
so

752
00:27:28,720 --> 00:27:31,039
yeah this is uh very interesting and

753
00:27:31,039 --> 00:27:32,559
basically what you do this is like the

754
00:27:32,559 --> 00:27:35,679
attacker code right so you specify

755
00:27:35,679 --> 00:27:38,399
an html file um

756
00:27:38,399 --> 00:27:40,960
on the on the sd card because all

757
00:27:40,960 --> 00:27:42,960
applications that have sd card

758
00:27:42,960 --> 00:27:45,200
permissions can read on right there

759
00:27:45,200 --> 00:27:48,320
and then you just send um

760
00:27:48,320 --> 00:27:50,480
the intent to the browser application

761
00:27:50,480 --> 00:27:53,279
and make it go to the html file and then

762
00:27:53,279 --> 00:27:54,960
once the

763
00:27:54,960 --> 00:27:56,960
browser application goes to this html

764
00:27:56,960 --> 00:27:59,279
file you can try to read local files

765
00:27:59,279 --> 00:28:00,559
right so this was all the data x

766
00:28:00,559 --> 00:28:03,440
filtration retrieving all the databases

767
00:28:03,440 --> 00:28:05,360
from the application and then sending

768
00:28:05,360 --> 00:28:08,960
them to an attacker right so we have

769
00:28:08,960 --> 00:28:11,679
a deep link and then xss with data x

770
00:28:11,679 --> 00:28:13,200
filtration right so we are combining the

771
00:28:13,200 --> 00:28:16,559
concepts that i explained before

772
00:28:16,559 --> 00:28:18,559
and then now let's look at another

773
00:28:18,559 --> 00:28:19,919
scenario so this is a browser

774
00:28:19,919 --> 00:28:21,679
application that goes to an attacker

775
00:28:21,679 --> 00:28:22,799
website

776
00:28:22,799 --> 00:28:24,640
that has that attacks the deep links

777
00:28:24,640 --> 00:28:26,880
right so this is a slightly different

778
00:28:26,880 --> 00:28:29,279
approach so in this case this was the

779
00:28:29,279 --> 00:28:31,679
onion browser one of the early versions

780
00:28:31,679 --> 00:28:32,799
in ios

781
00:28:32,799 --> 00:28:34,799
and what we could do is

782
00:28:34,799 --> 00:28:36,960
from an attacker control website we can

783
00:28:36,960 --> 00:28:40,080
call them deep link from the application

784
00:28:40,080 --> 00:28:42,480
and do onion browser for squid so if you

785
00:28:42,480 --> 00:28:44,159
showed an image like this the the

786
00:28:44,159 --> 00:28:45,679
browser would automatically close

787
00:28:45,679 --> 00:28:47,440
without any user interaction right so

788
00:28:47,440 --> 00:28:49,600
you can invoke functionality in the

789
00:28:49,600 --> 00:28:52,159
application by using deep links right so

790
00:28:52,159 --> 00:28:54,799
this is also an interesting vector

791
00:28:54,799 --> 00:28:55,919
now

792
00:28:55,919 --> 00:28:59,279
another very cool attack is

793
00:28:59,279 --> 00:29:00,640
a deep link

794
00:29:00,640 --> 00:29:03,200
that results in sql injection and then

795
00:29:03,200 --> 00:29:05,679
resulting code execution right so this

796
00:29:05,679 --> 00:29:07,919
was a very cool vulnerability

797
00:29:07,919 --> 00:29:09,120
so

798
00:29:09,120 --> 00:29:11,520
this happened in a crm application with

799
00:29:11,520 --> 00:29:13,200
google authentication

800
00:29:13,200 --> 00:29:17,039
so when the user tries to use the app

801
00:29:17,039 --> 00:29:18,799
you get prompted to log in with google

802
00:29:18,799 --> 00:29:20,880
so that's like a pop-up and then the

803
00:29:20,880 --> 00:29:23,120
user logs to google and then the

804
00:29:23,120 --> 00:29:25,360
credentials go back to the application

805
00:29:25,360 --> 00:29:28,080
using a deep link that sends the

806
00:29:28,080 --> 00:29:30,000
google token right so that is

807
00:29:30,000 --> 00:29:32,480
the idea of the implementation and this

808
00:29:32,480 --> 00:29:35,039
is the code

809
00:29:37,600 --> 00:29:38,840
so we

810
00:29:38,840 --> 00:29:42,159
have in the android manifest we have the

811
00:29:42,159 --> 00:29:44,000
login webview activity

812
00:29:44,000 --> 00:29:45,600
you can see it's browseable so it can be

813
00:29:45,600 --> 00:29:47,679
attacked from the browser as well and

814
00:29:47,679 --> 00:29:48,799
the scheme

815
00:29:48,799 --> 00:29:50,559
we will call it the vulnerable app to

816
00:29:50,559 --> 00:29:52,799
protect the guilty and then in the code

817
00:29:52,799 --> 00:29:54,720
you can see that this

818
00:29:54,720 --> 00:29:55,840
database

819
00:29:55,840 --> 00:29:59,039
db dot execute sql update credential set

820
00:29:59,039 --> 00:30:01,279
call and then there's a concatenation of

821
00:30:01,279 --> 00:30:03,679
the value right so we have sql injection

822
00:30:03,679 --> 00:30:05,679
and then the question is how can we turn

823
00:30:05,679 --> 00:30:09,600
this into code execution so it turns out

824
00:30:09,600 --> 00:30:11,120
in sql lite

825
00:30:11,120 --> 00:30:14,399
when you use the sql cipher extension

826
00:30:14,399 --> 00:30:15,440
um

827
00:30:15,440 --> 00:30:18,080
then you can load extensions as well

828
00:30:18,080 --> 00:30:18,960
from

829
00:30:18,960 --> 00:30:21,440
sql right so in this case we can do

830
00:30:21,440 --> 00:30:23,760
select load extension

831
00:30:23,760 --> 00:30:24,799
and

832
00:30:24,799 --> 00:30:25,830
load

833
00:30:25,830 --> 00:30:28,240
[Music]

834
00:30:28,240 --> 00:30:30,320
a library that we know the location of

835
00:30:30,320 --> 00:30:32,559
on the phone to get the code execution

836
00:30:32,559 --> 00:30:34,080
firing right so

837
00:30:34,080 --> 00:30:35,679
there's two potential scenarios one

838
00:30:35,679 --> 00:30:37,520
would be a malicious application so we

839
00:30:37,520 --> 00:30:39,360
can simulate this by going to for

840
00:30:39,360 --> 00:30:42,240
example data data just trust me and then

841
00:30:42,240 --> 00:30:44,720
we create a test.so file that has a lot

842
00:30:44,720 --> 00:30:46,960
of ace and then we give it permissions

843
00:30:46,960 --> 00:30:50,080
with chmod 777 so any application on the

844
00:30:50,080 --> 00:30:52,399
phone can read this and then we send the

845
00:30:52,399 --> 00:30:53,679
intent to

846
00:30:53,679 --> 00:30:55,840
that expose the sql injection

847
00:30:55,840 --> 00:30:57,919
uh loading the extension that we know

848
00:30:57,919 --> 00:31:01,279
the location of uh on the phone right

849
00:31:01,279 --> 00:31:04,960
so this was the uh error on locket so

850
00:31:04,960 --> 00:31:08,640
you can see it says sql cipher dl open

851
00:31:08,640 --> 00:31:10,720
failed has bad elf magic so it's trying

852
00:31:10,720 --> 00:31:13,039
to execute it but it sees that it's not

853
00:31:13,039 --> 00:31:15,279
a valid binary but this is enough proof

854
00:31:15,279 --> 00:31:16,799
to know that this code execution right

855
00:31:16,799 --> 00:31:19,279
because it's trying to run it so

856
00:31:19,279 --> 00:31:21,440
so yeah this is remote execution so

857
00:31:21,440 --> 00:31:22,880
always exciting

858
00:31:22,880 --> 00:31:25,600
and then also in supported versions of

859
00:31:25,600 --> 00:31:28,399
the application

860
00:31:29,440 --> 00:31:32,399
this was also exploitable from a browser

861
00:31:32,399 --> 00:31:36,719
now because you need to provide them

862
00:31:37,279 --> 00:31:39,840
the library to load to turn it into code

863
00:31:39,840 --> 00:31:41,360
execution

864
00:31:41,360 --> 00:31:43,200
this was a little bit tricky right so we

865
00:31:43,200 --> 00:31:44,840
need

866
00:31:44,840 --> 00:31:47,279
to um they used to take the user to an

867
00:31:47,279 --> 00:31:49,679
attacker control website and then this

868
00:31:49,679 --> 00:31:51,360
website has to

869
00:31:51,360 --> 00:31:52,320
uh

870
00:31:52,320 --> 00:31:54,720
make the user download them

871
00:31:54,720 --> 00:31:56,159
the binary

872
00:31:56,159 --> 00:31:59,760
and then run it right so we need um

873
00:31:59,760 --> 00:32:02,960
first one file that is just going to

874
00:32:02,960 --> 00:32:04,960
send the binary to the user so we're

875
00:32:04,960 --> 00:32:07,279
basically doing test.so and then it's

876
00:32:07,279 --> 00:32:09,360
just having a lot of ace

877
00:32:09,360 --> 00:32:10,720
and then we need to load this in an

878
00:32:10,720 --> 00:32:13,360
iframe so when the user visits this it

879
00:32:13,360 --> 00:32:15,279
will automatically download

880
00:32:15,279 --> 00:32:16,320
and then

881
00:32:16,320 --> 00:32:18,399
we wait like five seconds or something

882
00:32:18,399 --> 00:32:20,240
so that there's enough time for the

883
00:32:20,240 --> 00:32:22,880
binary to download and then we exploit

884
00:32:22,880 --> 00:32:24,960
the sql injection and get the code

885
00:32:24,960 --> 00:32:26,880
execution right so

886
00:32:26,880 --> 00:32:28,799
and then we have the same error message

887
00:32:28,799 --> 00:32:30,640
uh in lockheed right so this one this

888
00:32:30,640 --> 00:32:32,880
was pretty cool

889
00:32:32,880 --> 00:32:36,640
now let's talk about url validation

890
00:32:36,640 --> 00:32:37,919
right so

891
00:32:37,919 --> 00:32:41,200
this was the logic of the application

892
00:32:41,200 --> 00:32:44,159
so this was the onion browser again and

893
00:32:44,159 --> 00:32:46,880
in this case it's trying to check

894
00:32:46,880 --> 00:32:48,880
that um

895
00:32:48,880 --> 00:32:51,519
because the problem is if you have a dot

896
00:32:51,519 --> 00:32:54,240
onion domain then this domain is not

897
00:32:54,240 --> 00:32:56,240
following the

898
00:32:56,240 --> 00:32:58,320
the normal tls uh

899
00:32:58,320 --> 00:33:00,159
trust process right so it works in a

900
00:33:00,159 --> 00:33:02,480
different way so it's trying to skip ssl

901
00:33:02,480 --> 00:33:05,120
errors right if it has that onion

902
00:33:05,120 --> 00:33:07,760
but there's a problem here

903
00:33:07,760 --> 00:33:09,360
because this is actually a very common

904
00:33:09,360 --> 00:33:11,360
problem when you do code audits because

905
00:33:11,360 --> 00:33:13,120
it's just looking for that onion

906
00:33:13,120 --> 00:33:15,600
somewhere not that onion at the end of

907
00:33:15,600 --> 00:33:17,200
the host name right

908
00:33:17,200 --> 00:33:18,399
so

909
00:33:18,399 --> 00:33:20,320
yeah this is going to ignore all the

910
00:33:20,320 --> 00:33:22,080
warnings and we

911
00:33:22,080 --> 00:33:23,440
we demonstrate the vulnerability like

912
00:33:23,440 --> 00:33:24,480
this right so

913
00:33:24,480 --> 00:33:27,039
www that you we we created a subdomain

914
00:33:27,039 --> 00:33:29,080
like

915
00:33:29,080 --> 00:33:30,960
www.paypal.com.online.something else the

916
00:33:30,960 --> 00:33:32,880
domain we own and then we make it point

917
00:33:32,880 --> 00:33:35,519
to a google ip address so when you visit

918
00:33:35,519 --> 00:33:37,440
that domain from a normal browser you

919
00:33:37,440 --> 00:33:39,519
would get security warnings but when you

920
00:33:39,519 --> 00:33:41,039
visited from the onion browser there

921
00:33:41,039 --> 00:33:43,200
were no warnings right so

922
00:33:43,200 --> 00:33:45,120
this is a very common problem when you

923
00:33:45,120 --> 00:33:47,679
do code audits and the user that the

924
00:33:47,679 --> 00:33:50,399
developer does something like if string

925
00:33:50,399 --> 00:33:51,120
in

926
00:33:51,120 --> 00:33:53,039
you know if if this string appears

927
00:33:53,039 --> 00:33:54,159
somewhere

928
00:33:54,159 --> 00:33:56,159
instead of maybe they should be checking

929
00:33:56,159 --> 00:33:59,200
the start or the end right so very

930
00:33:59,200 --> 00:34:00,960
common problem if you do code auditing

931
00:34:00,960 --> 00:34:01,840
you

932
00:34:01,840 --> 00:34:03,840
you really need to always look at this

933
00:34:03,840 --> 00:34:06,480
because there's always interesting bugs

934
00:34:06,480 --> 00:34:07,360
so

935
00:34:07,360 --> 00:34:09,280
so yeah now xmp

936
00:34:09,280 --> 00:34:10,960
xmpp is also

937
00:34:10,960 --> 00:34:13,440
an interesting protocol

938
00:34:13,440 --> 00:34:16,159
because lots of chat applications use

939
00:34:16,159 --> 00:34:18,399
this

940
00:34:18,839 --> 00:34:22,000
right if human in the middle ex mpp you

941
00:34:22,000 --> 00:34:23,440
will notice that

942
00:34:23,440 --> 00:34:25,280
in the handshake at the beginning it's

943
00:34:25,280 --> 00:34:26,480
possible

944
00:34:26,480 --> 00:34:30,000
to specify the mechanism right so you

945
00:34:30,000 --> 00:34:31,359
can specify

946
00:34:31,359 --> 00:34:32,480
when because you are the man in the

947
00:34:32,480 --> 00:34:33,679
middle

948
00:34:33,679 --> 00:34:35,440
that the only mechanism available is

949
00:34:35,440 --> 00:34:36,639
plain right because normally there's

950
00:34:36,639 --> 00:34:38,560
like a challenge response

951
00:34:38,560 --> 00:34:40,719
so if you specify that the mechanism is

952
00:34:40,719 --> 00:34:44,000
playing then the user credentials

953
00:34:44,000 --> 00:34:46,159
if the application is dumb enough to

954
00:34:46,159 --> 00:34:48,800
trust this uh will be sent in clear text

955
00:34:48,800 --> 00:34:51,199
right so they are provided basically for

956
00:34:51,199 --> 00:34:53,280
encoded but you can basically base 64

957
00:34:53,280 --> 00:34:55,359
decode and then you can you can read

958
00:34:55,359 --> 00:34:56,960
them right so this was also a nice

959
00:34:56,960 --> 00:34:57,839
attack

960
00:34:57,839 --> 00:35:00,560
also uh attacking updaters

961
00:35:00,560 --> 00:35:03,200
an interesting attack vector as well so

962
00:35:03,200 --> 00:35:04,880
in this case it was an application

963
00:35:04,880 --> 00:35:07,440
getting a json file

964
00:35:07,440 --> 00:35:09,040
from the server

965
00:35:09,040 --> 00:35:11,119
so we can because it was doing this over

966
00:35:11,119 --> 00:35:12,800
clear text http

967
00:35:12,800 --> 00:35:14,880
we can change the url and specify a

968
00:35:14,880 --> 00:35:17,040
phone number as the

969
00:35:17,040 --> 00:35:19,040
place to get the update from

970
00:35:19,040 --> 00:35:21,760
so then the application

971
00:35:21,760 --> 00:35:23,920
says new version available and then you

972
00:35:23,920 --> 00:35:25,920
tap on update and it makes the premium

973
00:35:25,920 --> 00:35:28,160
phone call right so these are

974
00:35:28,160 --> 00:35:30,160
interesting attack vectors in mobile

975
00:35:30,160 --> 00:35:31,760
when you can

976
00:35:31,760 --> 00:35:33,200
make the user click on something that

977
00:35:33,200 --> 00:35:35,760
makes a phone call

978
00:35:35,760 --> 00:35:37,920
if things can get interesting right so

979
00:35:37,920 --> 00:35:40,000
it's an interesting vector to to bear in

980
00:35:40,000 --> 00:35:40,800
mind

981
00:35:40,800 --> 00:35:43,040
another one was a third-party zip file

982
00:35:43,040 --> 00:35:44,560
retrieval

983
00:35:44,560 --> 00:35:48,000
so in hta in ios

984
00:35:48,000 --> 00:35:49,920
since ios 9

985
00:35:49,920 --> 00:35:52,000
there is this thing called app transport

986
00:35:52,000 --> 00:35:53,760
security that

987
00:35:53,760 --> 00:35:56,320
makes applications reject clear text

988
00:35:56,320 --> 00:35:58,480
http traffic by default but developers

989
00:35:58,480 --> 00:36:00,800
can add exceptions to this right so you

990
00:36:00,800 --> 00:36:02,400
should always look at the info please

991
00:36:02,400 --> 00:36:03,599
for things like this because if

992
00:36:03,599 --> 00:36:05,760
developers have an exception there it's

993
00:36:05,760 --> 00:36:08,000
typically for a reason that they need to

994
00:36:08,000 --> 00:36:10,160
make a clear text http

995
00:36:10,160 --> 00:36:11,839
request to that url for some reason so

996
00:36:11,839 --> 00:36:16,079
in this case it was an amazon s3 domain

997
00:36:16,079 --> 00:36:18,320
and this was the the request looks

998
00:36:18,320 --> 00:36:20,000
something like this so you can see it's

999
00:36:20,000 --> 00:36:22,320
a clear text http retrieval of a zip

1000
00:36:22,320 --> 00:36:24,480
file so we have an arbitrary file

1001
00:36:24,480 --> 00:36:26,560
override because if we can provide any

1002
00:36:26,560 --> 00:36:28,640
zip file we want when the application

1003
00:36:28,640 --> 00:36:31,119
unzips it we can overwrite any file we

1004
00:36:31,119 --> 00:36:34,000
want on the application so also a cool

1005
00:36:34,000 --> 00:36:34,960
vector

1006
00:36:34,960 --> 00:36:37,200
now let's talk a little bit about crypto

1007
00:36:37,200 --> 00:36:37,920
so

1008
00:36:37,920 --> 00:36:41,040
a crypto messenger android application

1009
00:36:41,040 --> 00:36:45,200
can anybody see the vulnerability there

1010
00:36:47,200 --> 00:36:49,919
any guesses

1011
00:36:52,800 --> 00:36:56,320
it's on the line that's highlighted

1012
00:36:58,480 --> 00:37:00,079
so the problem is

1013
00:37:00,079 --> 00:37:03,200
the original file name right so whenever

1014
00:37:03,200 --> 00:37:04,960
an application

1015
00:37:04,960 --> 00:37:07,040
respects the original file name on the

1016
00:37:07,040 --> 00:37:09,359
file system things can get interesting

1017
00:37:09,359 --> 00:37:11,119
right so in this case we have a

1018
00:37:11,119 --> 00:37:13,440
arbitrary file overwrite on decryption

1019
00:37:13,440 --> 00:37:15,280
because a user sends an encrypted file

1020
00:37:15,280 --> 00:37:17,440
to another and then when you decrypt the

1021
00:37:17,440 --> 00:37:19,839
file the file will be decrypted with the

1022
00:37:19,839 --> 00:37:22,160
original file name provided by the user

1023
00:37:22,160 --> 00:37:24,000
and there's no sanitization here or

1024
00:37:24,000 --> 00:37:26,640
anything so you could encrypt a message

1025
00:37:26,640 --> 00:37:28,320
with an original file name of dot dot

1026
00:37:28,320 --> 00:37:30,240
slash something and then when the user

1027
00:37:30,240 --> 00:37:33,040
decrypts the file you can uh

1028
00:37:33,040 --> 00:37:34,880
do an arbitrary file override of

1029
00:37:34,880 --> 00:37:37,680
whatever right now pgp

1030
00:37:37,680 --> 00:37:41,920
this was a php email ios application so

1031
00:37:41,920 --> 00:37:44,400
just going to skip this because

1032
00:37:44,400 --> 00:37:46,720
so basically at the bottom you can see

1033
00:37:46,720 --> 00:37:48,839
there's a string concatenation on the

1034
00:37:48,839 --> 00:37:51,680
message right so it says a string

1035
00:37:51,680 --> 00:37:53,440
escaped for javascript but it was not

1036
00:37:53,440 --> 00:37:55,599
escaped for javascript so this is the

1037
00:37:55,599 --> 00:37:58,000
actual vulnerability uh in the first

1038
00:37:58,000 --> 00:38:00,400
line so you can see self message string

1039
00:38:00,400 --> 00:38:01,680
scrape for javascript and there's a

1040
00:38:01,680 --> 00:38:03,359
string concatenation in the javascript

1041
00:38:03,359 --> 00:38:06,000
so you could send an email to another

1042
00:38:06,000 --> 00:38:08,800
user that that had like a single quote

1043
00:38:08,800 --> 00:38:11,680
semicolon and then the xss payload

1044
00:38:11,680 --> 00:38:14,960
and then because the application is the

1045
00:38:14,960 --> 00:38:16,000
in the

1046
00:38:16,000 --> 00:38:17,599
in the javascript you can see it's doing

1047
00:38:17,599 --> 00:38:19,040
first like the private key the

1048
00:38:19,040 --> 00:38:21,680
passphrase and then the message right so

1049
00:38:21,680 --> 00:38:24,880
by a point the xss fires the private key

1050
00:38:24,880 --> 00:38:26,320
and the passphrase

1051
00:38:26,320 --> 00:38:29,520
already set in javascript variables so

1052
00:38:29,520 --> 00:38:31,839
when the xss fires we can just send the

1053
00:38:31,839 --> 00:38:33,760
private key and the passphrase to an

1054
00:38:33,760 --> 00:38:35,599
attacker control website

1055
00:38:35,599 --> 00:38:37,760
by the email so this was also

1056
00:38:37,760 --> 00:38:39,200
a very cool

1057
00:38:39,200 --> 00:38:41,520
vulnerability

1058
00:38:41,520 --> 00:38:43,680
and then yeah the the attacker can just

1059
00:38:43,680 --> 00:38:45,920
receive this right so

1060
00:38:45,920 --> 00:38:47,680
so yeah if you don't have pregnant keys

1061
00:38:47,680 --> 00:38:49,119
they can't be stolen right so that's

1062
00:38:49,119 --> 00:38:51,280
also interesting to uh bear in mind so

1063
00:38:51,280 --> 00:38:52,480
now let's talk a little bit an

1064
00:38:52,480 --> 00:38:54,800
application very close to my heart

1065
00:38:54,800 --> 00:38:56,720
um that was mandated in the entire

1066
00:38:56,720 --> 00:38:58,720
country of south korea so by law every

1067
00:38:58,720 --> 00:39:00,480
parent and child of this country was

1068
00:39:00,480 --> 00:39:03,040
forced to install this application

1069
00:39:03,040 --> 00:39:05,119
this is true

1070
00:39:05,119 --> 00:39:06,960
and the idea was to keep the children

1071
00:39:06,960 --> 00:39:09,359
safe help parents be parents and so on

1072
00:39:09,359 --> 00:39:11,040
right so the penthouse reports are

1073
00:39:11,040 --> 00:39:12,480
public so you can read more about it

1074
00:39:12,480 --> 00:39:14,880
there so the first time we tested them

1075
00:39:14,880 --> 00:39:16,480
everything was clear text http

1076
00:39:16,480 --> 00:39:18,240
everything everywhere right so this was

1077
00:39:18,240 --> 00:39:20,720
the first round no ssl what is the cell

1078
00:39:20,720 --> 00:39:22,800
no ssl anywhere right so all http and

1079
00:39:22,800 --> 00:39:24,560
this is also quite common in asian

1080
00:39:24,560 --> 00:39:26,640
applications and i don't know why but

1081
00:39:26,640 --> 00:39:28,800
it's what we found right so the second

1082
00:39:28,800 --> 00:39:31,200
time we notice okay

1083
00:39:31,200 --> 00:39:34,240
all urls are https so it seems like they

1084
00:39:34,240 --> 00:39:36,720
fixed it so that's nice but then we

1085
00:39:36,720 --> 00:39:40,640
looked at the validation of ssl

1086
00:39:40,640 --> 00:39:44,160
so this is what the validation look like

1087
00:39:44,160 --> 00:39:47,280
uh on received ssl error proceed

1088
00:39:47,280 --> 00:39:48,960
so if there's any ssl error it's just

1089
00:39:48,960 --> 00:39:50,720
going to proceed anyway

1090
00:39:50,720 --> 00:39:52,560
and then the second line hostname

1091
00:39:52,560 --> 00:39:53,839
verifier

1092
00:39:53,839 --> 00:39:56,560
that's all the code return true so

1093
00:39:56,560 --> 00:39:58,079
all the hosts

1094
00:39:58,079 --> 00:40:00,480
are good and all the ssl errors are good

1095
00:40:00,480 --> 00:40:02,560
right so basically

1096
00:40:02,560 --> 00:40:05,599
so yeah so we have from cleartextgtp and

1097
00:40:05,599 --> 00:40:08,240
then to completely broken

1098
00:40:08,240 --> 00:40:09,440
ssl

1099
00:40:09,440 --> 00:40:11,200
and then they were doing this crypto

1100
00:40:11,200 --> 00:40:13,280
stuff with xor

1101
00:40:13,280 --> 00:40:14,960
now there's nothing wrong with xor xor

1102
00:40:14,960 --> 00:40:16,960
can be very secure if you use a one-time

1103
00:40:16,960 --> 00:40:19,520
pad for example however in a mobile

1104
00:40:19,520 --> 00:40:21,760
application if the mobile application

1105
00:40:21,760 --> 00:40:23,920
has the hard-coded

1106
00:40:23,920 --> 00:40:25,680
the key of the encryption hardcoded in

1107
00:40:25,680 --> 00:40:27,440
the binary anybody can retrieve it right

1108
00:40:27,440 --> 00:40:29,280
by reversing the binary

1109
00:40:29,280 --> 00:40:30,319
so

1110
00:40:30,319 --> 00:40:31,599
the first problem was there was a

1111
00:40:31,599 --> 00:40:34,560
hardcoded xor key

1112
00:40:34,560 --> 00:40:36,319
which could be retrieved

1113
00:40:36,319 --> 00:40:38,640
so we wrote this python script to with a

1114
00:40:38,640 --> 00:40:40,640
hard-coded key to do the encryption and

1115
00:40:40,640 --> 00:40:42,640
decryption and so on

1116
00:40:42,640 --> 00:40:43,599
uh

1117
00:40:43,599 --> 00:40:45,359
and then this was

1118
00:40:45,359 --> 00:40:47,280
this was the actual key so they were

1119
00:40:47,280 --> 00:40:49,440
like using this to encrypt the phone

1120
00:40:49,440 --> 00:40:52,800
numbers in the http request

1121
00:40:52,800 --> 00:40:55,040
and then in the second round they added

1122
00:40:55,040 --> 00:40:58,319
this aes layer which was also using a

1123
00:40:58,319 --> 00:41:00,480
hard-coded key like somewhere else on

1124
00:41:00,480 --> 00:41:02,480
the phone right so this was the the the

1125
00:41:02,480 --> 00:41:04,960
codes right so by reversing the binary

1126
00:41:04,960 --> 00:41:07,520
you could get both the aes key and the

1127
00:41:07,520 --> 00:41:08,880
xor key

1128
00:41:08,880 --> 00:41:10,800
so this is completely like useless

1129
00:41:10,800 --> 00:41:12,480
crypto right so

1130
00:41:12,480 --> 00:41:13,280
uh

1131
00:41:13,280 --> 00:41:15,040
because you know anybody can read the

1132
00:41:15,040 --> 00:41:16,800
key so at the end of the day there's

1133
00:41:16,800 --> 00:41:18,079
nothing wrong with aes there's nothing

1134
00:41:18,079 --> 00:41:20,160
wrong with xor but if the keys can be

1135
00:41:20,160 --> 00:41:22,240
retrieved by the attacker

1136
00:41:22,240 --> 00:41:24,240
all the crypto is useless right so a key

1137
00:41:24,240 --> 00:41:27,040
distribution problem so the catastrophe

1138
00:41:27,040 --> 00:41:29,839
summary is you have a phone number then

1139
00:41:29,839 --> 00:41:32,160
is this encrypted with xor which is

1140
00:41:32,160 --> 00:41:34,079
completely useless because anybody can

1141
00:41:34,079 --> 00:41:36,960
retrieve the xor key from the binary

1142
00:41:36,960 --> 00:41:39,359
then the entire request is encrypted

1143
00:41:39,359 --> 00:41:41,920
with aes which is also a useless

1144
00:41:41,920 --> 00:41:43,359
encryption layer

1145
00:41:43,359 --> 00:41:46,640
because the ask is also hard coded in

1146
00:41:46,640 --> 00:41:49,119
the binary and then the request is sent

1147
00:41:49,119 --> 00:41:51,599
to the server but as we saw before it's

1148
00:41:51,599 --> 00:41:54,160
completely ignoring all ssl warnings so

1149
00:41:54,160 --> 00:41:56,560
this was the failed ssl and then you get

1150
00:41:56,560 --> 00:41:58,880
the response back from from the server

1151
00:41:58,880 --> 00:42:02,079
right so it was a complete disaster

1152
00:42:02,079 --> 00:42:04,000
implementation

1153
00:42:04,000 --> 00:42:05,440
uh and yeah let's talk a little bit

1154
00:42:05,440 --> 00:42:07,599
about api attacks because then it would

1155
00:42:07,599 --> 00:42:09,040
not you know this talk would not be

1156
00:42:09,040 --> 00:42:11,359
complete with this so this is a path

1157
00:42:11,359 --> 00:42:13,440
traversal so typical

1158
00:42:13,440 --> 00:42:16,000
the developer tries to change dot dot

1159
00:42:16,000 --> 00:42:17,520
slash to nothing

1160
00:42:17,520 --> 00:42:19,280
so this is wrong because you can provide

1161
00:42:19,280 --> 00:42:22,960
dot dot slash uh like twice and then

1162
00:42:22,960 --> 00:42:24,720
dot dot dot slash slash

1163
00:42:24,720 --> 00:42:26,960
uh turns into dot dot slash so you're

1164
00:42:26,960 --> 00:42:28,319
back to the same place right so the

1165
00:42:28,319 --> 00:42:29,760
attacker instead of sending dot dot

1166
00:42:29,760 --> 00:42:31,359
slash a bunch of times and that's the

1167
00:42:31,359 --> 00:42:33,599
password by sending this you you still

1168
00:42:33,599 --> 00:42:34,960
can get the traverse all right so this

1169
00:42:34,960 --> 00:42:36,079
is a very

1170
00:42:36,079 --> 00:42:38,240
well known trick

1171
00:42:38,240 --> 00:42:40,400
another case is a remote code execution

1172
00:42:40,400 --> 00:42:42,240
in a file upload

1173
00:42:42,240 --> 00:42:44,560
python using shell true

1174
00:42:44,560 --> 00:42:47,200
concatenating the command and so on

1175
00:42:47,200 --> 00:42:49,920
so we could get like a reverse shell

1176
00:42:49,920 --> 00:42:52,240
like this so we have like to encode

1177
00:42:52,240 --> 00:42:54,640
different parts of the request and so on

1178
00:42:54,640 --> 00:42:57,280
and then we got like a reverse shell

1179
00:42:57,280 --> 00:42:58,560
back

1180
00:42:58,560 --> 00:43:00,079
and the server was already running as

1181
00:43:00,079 --> 00:43:02,000
root so no privilege collision required

1182
00:43:02,000 --> 00:43:03,440
that's always nice

1183
00:43:03,440 --> 00:43:05,440
uh and yeah so

1184
00:43:05,440 --> 00:43:06,640
so yeah

1185
00:43:06,640 --> 00:43:08,319
that's about that and now

1186
00:43:08,319 --> 00:43:12,640
let's talk about api leaks right so um

1187
00:43:12,640 --> 00:43:14,640
this is about the smart sharif and stuff

1188
00:43:14,640 --> 00:43:17,839
so there was a sister okay no so first

1189
00:43:17,839 --> 00:43:20,000
was the bully api let me see in two

1190
00:43:20,000 --> 00:43:23,599
minutes if i can finish this

1191
00:43:24,319 --> 00:43:26,000
so in every in every classroom there's

1192
00:43:26,000 --> 00:43:28,000
always this this child that is a bully

1193
00:43:28,000 --> 00:43:29,680
right that he wants to mess or make the

1194
00:43:29,680 --> 00:43:31,280
life of every other children in the

1195
00:43:31,280 --> 00:43:33,280
class miserable if all

1196
00:43:33,280 --> 00:43:34,960
you all probably know some person like

1197
00:43:34,960 --> 00:43:38,160
this right so for this child uh if he

1198
00:43:38,160 --> 00:43:40,240
wants to make the life of some child

1199
00:43:40,240 --> 00:43:41,520
miserable

1200
00:43:41,520 --> 00:43:43,680
the first thing to ask the api is hey i

1201
00:43:43,680 --> 00:43:45,119
want to mess with this child right i

1202
00:43:45,119 --> 00:43:46,720
know his phone number and i really want

1203
00:43:46,720 --> 00:43:48,480
to screw his life what can what can you

1204
00:43:48,480 --> 00:43:49,920
do you know and then you ask the smart

1205
00:43:49,920 --> 00:43:51,440
sheriff this

1206
00:43:51,440 --> 00:43:53,040
korean application that i was talking

1207
00:43:53,040 --> 00:43:56,000
about before it has the smarter if api

1208
00:43:56,000 --> 00:43:58,240
and then the smart sheriff api tells you

1209
00:43:58,240 --> 00:44:00,480
okay for that phone number this is the

1210
00:44:00,480 --> 00:44:02,400
parent phone number so

1211
00:44:02,400 --> 00:44:03,920
now things can you can already do some

1212
00:44:03,920 --> 00:44:05,520
damage there as a bully kill like you

1213
00:44:05,520 --> 00:44:07,040
can like call the parent for pranking

1214
00:44:07,040 --> 00:44:10,079
purposes or whatever but uh as a bully

1215
00:44:10,079 --> 00:44:10,880
kid

1216
00:44:10,880 --> 00:44:12,960
you you need the password as well of the

1217
00:44:12,960 --> 00:44:15,440
parent right because the the parent uh

1218
00:44:15,440 --> 00:44:17,440
the parent phone number is cool but to

1219
00:44:17,440 --> 00:44:19,200
login you also need the parent uh

1220
00:44:19,200 --> 00:44:20,800
password right so you you could ask

1221
00:44:20,800 --> 00:44:22,800
politely right in life you should always

1222
00:44:22,800 --> 00:44:24,240
ask questions the only thing that can

1223
00:44:24,240 --> 00:44:25,680
happen is maybe you don't get the answer

1224
00:44:25,680 --> 00:44:27,520
you were hoping for but when you ask

1225
00:44:27,520 --> 00:44:29,119
questions amazing things happen right

1226
00:44:29,119 --> 00:44:30,560
and this is a very good example of this

1227
00:44:30,560 --> 00:44:32,560
right so you ask the api like please

1228
00:44:32,560 --> 00:44:34,240
imagine if like i'll be like i want to

1229
00:44:34,240 --> 00:44:36,160
log in as the parent of this child and

1230
00:44:36,160 --> 00:44:38,480
smart sheriff of course gives you the

1231
00:44:38,480 --> 00:44:40,960
password of the parent as well

1232
00:44:40,960 --> 00:44:43,599
encrypted with xor as we saw before with

1233
00:44:43,599 --> 00:44:46,319
a hard-coded key so completely useless

1234
00:44:46,319 --> 00:44:48,720
encryption later and with that

1235
00:44:48,720 --> 00:44:51,520
you could log in as the parent of any

1236
00:44:51,520 --> 00:44:52,960
child in the classroom and then you can

1237
00:44:52,960 --> 00:44:55,119
say well this child cannot access any

1238
00:44:55,119 --> 00:44:57,359
website can never use the phone cannot

1239
00:44:57,359 --> 00:44:58,880
have any applications installed on the

1240
00:44:58,880 --> 00:45:00,079
phone right because that's what the

1241
00:45:00,079 --> 00:45:03,280
application was for and this is what the

1242
00:45:03,280 --> 00:45:04,880
what the requests look like in practice

1243
00:45:04,880 --> 00:45:06,640
so you send the message request and then

1244
00:45:06,640 --> 00:45:07,760
you get back

1245
00:45:07,760 --> 00:45:09,680
the apparent mobile and the

1246
00:45:09,680 --> 00:45:11,599
and the pin right so

1247
00:45:11,599 --> 00:45:13,599
because this this application was

1248
00:45:13,599 --> 00:45:15,040
mandated in entire country of south

1249
00:45:15,040 --> 00:45:17,040
korea you could try a lot of phone

1250
00:45:17,040 --> 00:45:19,280
numbers at random and get all the

1251
00:45:19,280 --> 00:45:22,480
passwords and so on and then this smart

1252
00:45:22,480 --> 00:45:25,760
dream which was a cussing application of

1253
00:45:25,760 --> 00:45:29,280
this that was looking for harmful words

1254
00:45:29,280 --> 00:45:31,119
used between children

1255
00:45:31,119 --> 00:45:33,280
for so for example if a child sends

1256
00:45:33,280 --> 00:45:34,880
another child a message that contains

1257
00:45:34,880 --> 00:45:38,160
the word sex then it would uh count that

1258
00:45:38,160 --> 00:45:40,319
as a harmful word and then this message

1259
00:45:40,319 --> 00:45:42,000
would be saved in

1260
00:45:42,000 --> 00:45:44,400
the api server right so the problem was

1261
00:45:44,400 --> 00:45:45,520
you could

1262
00:45:45,520 --> 00:45:46,480
see the

1263
00:45:46,480 --> 00:45:49,200
message of any child that had been

1264
00:45:49,200 --> 00:45:51,599
flagged with some harmful word

1265
00:45:51,599 --> 00:45:52,720
and

1266
00:45:52,720 --> 00:45:54,560
and yeah so this was all very bad so i'm

1267
00:45:54,560 --> 00:45:56,400
going to skip this one so i'll show you

1268
00:45:56,400 --> 00:45:58,640
just the password one

1269
00:45:58,640 --> 00:46:00,960
so this is like trying uh random phone

1270
00:46:00,960 --> 00:46:03,280
numbers in korea and then it tells you

1271
00:46:03,280 --> 00:46:05,200
if it's the parent or the child if it's

1272
00:46:05,200 --> 00:46:06,720
the child it tells you the parent phone

1273
00:46:06,720 --> 00:46:08,560
number and then from the parent phone

1274
00:46:08,560 --> 00:46:10,079
number you also get the password and

1275
00:46:10,079 --> 00:46:12,240
this was just trying the random phone

1276
00:46:12,240 --> 00:46:15,119
numbers like this right so

1277
00:46:15,119 --> 00:46:18,400
that's that and then i'll show the

1278
00:46:18,400 --> 00:46:20,720
the smart shape so and this is the smart

1279
00:46:20,720 --> 00:46:22,800
dream which is the casting application

1280
00:46:22,800 --> 00:46:23,680
so it's

1281
00:46:23,680 --> 00:46:25,839
telling you like all the messages

1282
00:46:25,839 --> 00:46:28,560
and from what phone number it was and

1283
00:46:28,560 --> 00:46:30,400
then what the messages were

1284
00:46:30,400 --> 00:46:32,880
now this script was written by fabian

1285
00:46:32,880 --> 00:46:34,720
and he replaced the korean characters

1286
00:46:34,720 --> 00:46:37,119
with random characters so to protect the

1287
00:46:37,119 --> 00:46:39,839
you know privacy of the people but this

1288
00:46:39,839 --> 00:46:42,560
is basically what it looks right so

1289
00:46:42,560 --> 00:46:45,119
violence are sold you know it's like you

1290
00:46:45,119 --> 00:46:47,359
also get like the category and then the

1291
00:46:47,359 --> 00:46:49,280
phone number that send the message and

1292
00:46:49,280 --> 00:46:52,240
the actual content of the message right

1293
00:46:52,240 --> 00:46:53,119
so

1294
00:46:53,119 --> 00:46:57,200
so i think that's all the time i have

1295
00:46:57,200 --> 00:46:58,800
and yeah so

1296
00:46:58,800 --> 00:47:01,599
any questions

1297
00:47:02,400 --> 00:47:03,440
or maybe

1298
00:47:03,440 --> 00:47:05,680
i'll show another demo while we wait for

1299
00:47:05,680 --> 00:47:07,040
the question so

1300
00:47:07,040 --> 00:47:09,040
this like smart sharif stuff was so bad

1301
00:47:09,040 --> 00:47:11,680
that the pentax report was indexed by

1302
00:47:11,680 --> 00:47:14,720
google so we reported also an xss and

1303
00:47:14,720 --> 00:47:16,560
the xss was indexed by google so you

1304
00:47:16,560 --> 00:47:18,400
could like click on the link

1305
00:47:18,400 --> 00:47:22,160
and and the xss was still working

1306
00:47:22,240 --> 00:47:24,880
so it it's like really funny like like

1307
00:47:24,880 --> 00:47:27,119
you screw so bad that the pentax report

1308
00:47:27,119 --> 00:47:28,960
is public you report some access then

1309
00:47:28,960 --> 00:47:30,880
google indexes your vulnerabilities and

1310
00:47:30,880 --> 00:47:32,640
you can like click on the google result

1311
00:47:32,640 --> 00:47:34,960
and get the exercise firing right so

1312
00:47:34,960 --> 00:47:36,960
this whole like korean application was

1313
00:47:36,960 --> 00:47:38,559
like catastrophic

1314
00:47:38,559 --> 00:47:42,160
okay so sorry so time for whoops time

1315
00:47:42,160 --> 00:47:43,440
for questions

1316
00:47:43,440 --> 00:47:45,200
well first of all thank you very much

1317
00:47:45,200 --> 00:47:46,190
abraham

1318
00:47:46,190 --> 00:47:49,349
[Applause]

1319
00:47:49,760 --> 00:47:51,920
i think people are hungry and there's no

1320
00:47:51,920 --> 00:47:54,400
questions that came in

1321
00:47:54,400 --> 00:47:56,000
uh

1322
00:47:56,000 --> 00:47:57,359
i don't know if we have any questions

1323
00:47:57,359 --> 00:47:58,640
that we want to take in the audience

1324
00:47:58,640 --> 00:48:00,240
with the microphone otherwise i think

1325
00:48:00,240 --> 00:48:01,680
people are starting to get hungry and

1326
00:48:01,680 --> 00:48:03,200
want to go eat

1327
00:48:03,200 --> 00:48:05,200
and maybe they will grab you during

1328
00:48:05,200 --> 00:48:09,480
lunch hour sure feel free

