1
00:00:05,440 --> 00:00:09,040
hello and welcome to uh this semi live

2
00:00:09,040 --> 00:00:12,000
from uh secti in stockholm where we

3
00:00:12,000 --> 00:00:14,160
we're sitting here second spot custom

4
00:00:14,160 --> 00:00:16,800
with uh abraham

5
00:00:16,800 --> 00:00:19,039
who just came off the stage giving one

6
00:00:19,039 --> 00:00:21,039
of the lightning talks and it was

7
00:00:21,039 --> 00:00:23,680
lightning fast as well

8
00:00:23,680 --> 00:00:25,599
i really enjoyed i really enjoyed the

9
00:00:25,599 --> 00:00:27,119
context

10
00:00:27,119 --> 00:00:29,519
that you you presented you were talking

11
00:00:29,519 --> 00:00:30,560
about

12
00:00:30,560 --> 00:00:31,920
um

13
00:00:31,920 --> 00:00:33,520
getting um

14
00:00:33,520 --> 00:00:37,040
remote code execution in in

15
00:00:37,040 --> 00:00:39,360
in a situation where where there wasn't

16
00:00:39,360 --> 00:00:42,000
uh where there was context separation

17
00:00:42,000 --> 00:00:44,079
basically could you could you please go

18
00:00:44,079 --> 00:00:46,160
over that again because i was it was it

19
00:00:46,160 --> 00:00:46,960
was

20
00:00:46,960 --> 00:00:49,280
too too much for me it went over my head

21
00:00:49,280 --> 00:00:50,320
but

22
00:00:50,320 --> 00:00:52,559
sure briefly the

23
00:00:52,559 --> 00:00:53,600
um

24
00:00:53,600 --> 00:00:54,960
so

25
00:00:54,960 --> 00:00:56,160
well i don't want to make this a

26
00:00:56,160 --> 00:00:58,640
commercial pitch but

27
00:00:58,640 --> 00:00:59,920
we

28
00:00:59,920 --> 00:01:02,079
so basically we we have like several

29
00:01:02,079 --> 00:01:04,720
courses and what i have demo today is

30
00:01:04,720 --> 00:01:06,880
part of uh one of the courses which is

31
00:01:06,880 --> 00:01:09,360
about electron security so it talks

32
00:01:09,360 --> 00:01:12,080
about the security of electron

33
00:01:12,080 --> 00:01:14,320
applications so electron applications

34
00:01:14,320 --> 00:01:17,119
are really interesting because they

35
00:01:17,119 --> 00:01:19,280
basically are written in javascript and

36
00:01:19,280 --> 00:01:20,640
you can

37
00:01:20,640 --> 00:01:22,000
you know you only play javascript

38
00:01:22,000 --> 00:01:23,600
developers basically as a company and

39
00:01:23,600 --> 00:01:24,400
then

40
00:01:24,400 --> 00:01:25,920
these developers can build an

41
00:01:25,920 --> 00:01:27,439
application that is going to work on

42
00:01:27,439 --> 00:01:29,200
linux mac and windows

43
00:01:29,200 --> 00:01:30,880
so you have to pay less developers to

44
00:01:30,880 --> 00:01:32,560
get the same amount of work right so for

45
00:01:32,560 --> 00:01:34,560
example there's a lot of popular

46
00:01:34,560 --> 00:01:38,560
applications like slack discord skype

47
00:01:38,560 --> 00:01:41,600
microsoft teams that are all electron

48
00:01:41,600 --> 00:01:42,960
applications so they are all written in

49
00:01:42,960 --> 00:01:44,399
javascript right

50
00:01:44,399 --> 00:01:45,920
so

51
00:01:45,920 --> 00:01:48,159
what i showed during the lighting talk

52
00:01:48,159 --> 00:01:50,000
is a case where

53
00:01:50,000 --> 00:01:52,960
this is a currently the default in

54
00:01:52,960 --> 00:01:54,960
electron applications which is that by

55
00:01:54,960 --> 00:01:57,680
default there is no context isolation

56
00:01:57,680 --> 00:01:59,759
so when there is no context isolation

57
00:01:59,759 --> 00:02:02,880
this means that if you get xss in one of

58
00:02:02,880 --> 00:02:04,960
these desktop applications

59
00:02:04,960 --> 00:02:08,800
the xss runs in the same context as the

60
00:02:08,800 --> 00:02:11,120
preload script that the application

61
00:02:11,120 --> 00:02:12,959
loaded before

62
00:02:12,959 --> 00:02:14,959
the front end is rendered that sounds

63
00:02:14,959 --> 00:02:17,599
pretty bad yeah and because the context

64
00:02:17,599 --> 00:02:19,040
is the same

65
00:02:19,040 --> 00:02:20,560
then you can

66
00:02:20,560 --> 00:02:22,080
if you read

67
00:02:22,080 --> 00:02:23,520
the application is written in javascript

68
00:02:23,520 --> 00:02:25,680
so you can see the code so you can look

69
00:02:25,680 --> 00:02:27,840
at the code and look for what the code

70
00:02:27,840 --> 00:02:30,160
is doing and you may be able to bypass

71
00:02:30,160 --> 00:02:32,239
the logic right so for example

72
00:02:32,239 --> 00:02:34,319
in the demo that i did i'm not sure if

73
00:02:34,319 --> 00:02:35,680
it was the only lightning talk with a

74
00:02:35,680 --> 00:02:36,959
demo but

75
00:02:36,959 --> 00:02:38,400
i think it was and i was pretty

76
00:02:38,400 --> 00:02:39,760
impressed

77
00:02:39,760 --> 00:02:41,519
i risked it without with the mic i'm

78
00:02:41,519 --> 00:02:43,280
only typing with one hand so it i think

79
00:02:43,280 --> 00:02:44,480
it had merit

80
00:02:44,480 --> 00:02:47,040
but basically um

81
00:02:47,040 --> 00:02:48,879
what i showed was

82
00:02:48,879 --> 00:02:52,239
that you could send an xss payload

83
00:02:52,239 --> 00:02:55,120
that redefines so the application is

84
00:02:55,120 --> 00:02:58,800
basically trying to prevent the user

85
00:02:58,800 --> 00:03:01,120
from clicking on unsafe links right so

86
00:03:01,120 --> 00:03:03,519
an electron application in an electron

87
00:03:03,519 --> 00:03:06,080
application if you click on an http or

88
00:03:06,080 --> 00:03:09,280
an https link then it is safe to call

89
00:03:09,280 --> 00:03:11,200
shell open external which is basically

90
00:03:11,200 --> 00:03:13,360
going to send this url to the operating

91
00:03:13,360 --> 00:03:14,480
system

92
00:03:14,480 --> 00:03:16,640
right because it's an http or https url

93
00:03:16,640 --> 00:03:18,000
so it's going to send it to the browser

94
00:03:18,000 --> 00:03:19,760
so everything is going to be fine

95
00:03:19,760 --> 00:03:22,879
however if it is a file url then things

96
00:03:22,879 --> 00:03:25,519
get interesting because if it is a java

97
00:03:25,519 --> 00:03:26,640
extension

98
00:03:26,640 --> 00:03:29,599
then windows will not send the url to

99
00:03:29,599 --> 00:03:32,319
the browser it will send it to java

100
00:03:32,319 --> 00:03:34,400
and then and then you can get code

101
00:03:34,400 --> 00:03:36,080
execution without warnings in windows

102
00:03:36,080 --> 00:03:37,680
which is pretty cool which is what i

103
00:03:37,680 --> 00:03:39,840
showed in the demo

104
00:03:39,840 --> 00:03:41,120
sure

105
00:03:41,120 --> 00:03:41,920
that

106
00:03:41,920 --> 00:03:45,200
goes to the standard windows resolver or

107
00:03:45,200 --> 00:03:47,120
why does it pick you in that case yeah

108
00:03:47,120 --> 00:03:50,480
yeah in windows if for example you do a

109
00:03:50,480 --> 00:03:52,480
start run

110
00:03:52,480 --> 00:03:55,280
and well or they start you know you know

111
00:03:55,280 --> 00:03:57,599
what i mean the windows key

112
00:03:57,599 --> 00:03:59,040
because now there's no start anymore

113
00:03:59,040 --> 00:04:01,200
right so the windows key and then you

114
00:04:01,200 --> 00:04:02,080
run

115
00:04:02,080 --> 00:04:04,159
and then you put like slash class

116
00:04:04,159 --> 00:04:06,239
127.0.0.1

117
00:04:06,239 --> 00:04:07,760
uh let's pretend you have a network

118
00:04:07,760 --> 00:04:10,400
share core called electron as i had in

119
00:04:10,400 --> 00:04:11,840
the demo

120
00:04:11,840 --> 00:04:15,040
and then you put like a calc.exe now

121
00:04:15,040 --> 00:04:16,880
because it is a known dangerous

122
00:04:16,880 --> 00:04:18,399
extension.exe

123
00:04:18,399 --> 00:04:20,238
and it is loaded from a network location

124
00:04:20,238 --> 00:04:21,880
even though it's

125
00:04:21,880 --> 00:04:24,639
127.001 it's viewed as a network

126
00:04:24,639 --> 00:04:26,240
location by windows

127
00:04:26,240 --> 00:04:28,000
then windows will refuse to run it

128
00:04:28,000 --> 00:04:30,000
because it's at the interest extension

129
00:04:30,000 --> 00:04:31,840
from a network location

130
00:04:31,840 --> 00:04:34,479
however if it is a java extension then

131
00:04:34,479 --> 00:04:36,400
this decision is

132
00:04:36,400 --> 00:04:38,960
sent to the to the java

133
00:04:38,960 --> 00:04:40,080
binary

134
00:04:40,080 --> 00:04:41,840
to the java engine so the java engine

135
00:04:41,840 --> 00:04:43,360
should show the warning to the user but

136
00:04:43,360 --> 00:04:44,960
it doesn't

137
00:04:44,960 --> 00:04:46,720
and and then what happens is you get

138
00:04:46,720 --> 00:04:48,160
code execution without warnings and

139
00:04:48,160 --> 00:04:50,160
windows so i combined this

140
00:04:50,160 --> 00:04:53,040
with uh the fact that the there was no

141
00:04:53,040 --> 00:04:54,639
context isolation which is still the

142
00:04:54,639 --> 00:04:56,720
default in electron so

143
00:04:56,720 --> 00:04:58,080
you can

144
00:04:58,080 --> 00:04:59,680
so that what the application was doing

145
00:04:59,680 --> 00:05:01,919
is it was defining an array of safe

146
00:05:01,919 --> 00:05:03,919
protocols and it contained http and

147
00:05:03,919 --> 00:05:05,600
https right because these are the two

148
00:05:05,600 --> 00:05:08,160
safe protocols for opening urls

149
00:05:08,160 --> 00:05:09,840
so then it was using the index of

150
00:05:09,840 --> 00:05:12,000
function and it was checking the in

151
00:05:12,000 --> 00:05:13,440
standard in javascript and then it was

152
00:05:13,440 --> 00:05:15,360
checking that the result

153
00:05:15,360 --> 00:05:17,600
of searching for

154
00:05:17,600 --> 00:05:20,479
the the protocol of the link

155
00:05:20,479 --> 00:05:22,720
in this array has to be different than

156
00:05:22,720 --> 00:05:25,280
minus one right because

157
00:05:25,280 --> 00:05:27,680
when it is not found the indexof will

158
00:05:27,680 --> 00:05:29,600
return minus one right the index of

159
00:05:29,600 --> 00:05:32,000
function in javascript so

160
00:05:32,000 --> 00:05:33,759
uh if it is different than minus one

161
00:05:33,759 --> 00:05:35,600
then it is in the array of safe

162
00:05:35,600 --> 00:05:39,120
protocols so it will just open the

163
00:05:39,120 --> 00:05:40,720
link right so that is that that is the

164
00:05:40,720 --> 00:05:44,240
idea so in the xss

165
00:05:44,240 --> 00:05:47,680
i redefine the index of function

166
00:05:47,680 --> 00:05:49,840
so that it always returns

167
00:05:49,840 --> 00:05:52,840
1337.

168
00:05:54,160 --> 00:05:56,639
and then because it always returns this

169
00:05:56,639 --> 00:05:58,800
it's always going to open all links in

170
00:05:58,800 --> 00:06:00,479
shell open external so it's going to

171
00:06:00,479 --> 00:06:02,560
give us like the code execution without

172
00:06:02,560 --> 00:06:04,560
warnings right so

173
00:06:04,560 --> 00:06:06,720
so that's the yeah that's the scenario i

174
00:06:06,720 --> 00:06:09,199
showed which is part of a workshop that

175
00:06:09,199 --> 00:06:11,520
we do for free like every second month

176
00:06:11,520 --> 00:06:14,000
or something uh so i gave a link in the

177
00:06:14,000 --> 00:06:16,160
presentation so that if somebody wants

178
00:06:16,160 --> 00:06:18,240
to download this app and play with it

179
00:06:18,240 --> 00:06:21,199
and stuff they can get it so regarding

180
00:06:21,199 --> 00:06:24,800
constant context isolation sure so when

181
00:06:24,800 --> 00:06:26,960
you enable that in an electron

182
00:06:26,960 --> 00:06:28,800
application then

183
00:06:28,800 --> 00:06:31,680
one thing which happens is that

184
00:06:31,680 --> 00:06:34,400
the user interface doesn't have direct

185
00:06:34,400 --> 00:06:35,680
access to

186
00:06:35,680 --> 00:06:37,520
the javascript running as the

187
00:06:37,520 --> 00:06:39,199
application

188
00:06:39,199 --> 00:06:41,680
when it is enabled yeah yes they run in

189
00:06:41,680 --> 00:06:43,520
a different context so you cannot do

190
00:06:43,520 --> 00:06:46,319
what i showed yes yeah so

191
00:06:46,319 --> 00:06:50,240
so so that isolated constant

192
00:06:50,240 --> 00:06:52,720
isolated context cannot for example run

193
00:06:52,720 --> 00:06:54,319
the shell execute

194
00:06:54,319 --> 00:06:58,639
that's one of the points right yes and

195
00:06:58,639 --> 00:07:01,599
when you have enabled that will it stop

196
00:07:01,599 --> 00:07:03,919
behave like an ordinary

197
00:07:03,919 --> 00:07:05,840
web browser then for example if you

198
00:07:05,840 --> 00:07:07,120
would

199
00:07:07,120 --> 00:07:08,240
if

200
00:07:08,240 --> 00:07:10,319
like can you link and

201
00:07:10,319 --> 00:07:12,720
follow a link and just go to a web page

202
00:07:12,720 --> 00:07:15,199
from an electron application or it

203
00:07:15,199 --> 00:07:16,960
depends how the application is built but

204
00:07:16,960 --> 00:07:19,280
this could happen this is uh one of the

205
00:07:19,280 --> 00:07:23,359
other demos in the longer uh workshop

206
00:07:23,840 --> 00:07:25,599
where you click on a link

207
00:07:25,599 --> 00:07:27,840
and then this this i i demo that one on

208
00:07:27,840 --> 00:07:31,120
linux so you send some user a link and

209
00:07:31,120 --> 00:07:32,639
then the user opens this link and

210
00:07:32,639 --> 00:07:34,479
because the application is open it

211
00:07:34,479 --> 00:07:36,319
inside electron

212
00:07:36,319 --> 00:07:38,479
then this link can

213
00:07:38,479 --> 00:07:40,880
do like run some javascript that is

214
00:07:40,880 --> 00:07:42,800
basically going to give you a reverse

215
00:07:42,800 --> 00:07:43,759
shell

216
00:07:43,759 --> 00:07:45,759
so you get a reverse shell on the linux

217
00:07:45,759 --> 00:07:48,160
machine that click the link

218
00:07:48,160 --> 00:07:51,599
with just one click so it's pretty cool

219
00:07:51,759 --> 00:07:53,680
but it depends on how the application is

220
00:07:53,680 --> 00:07:55,360
built as well right so

221
00:07:55,360 --> 00:07:58,560
but if you would enable um context

222
00:07:58,560 --> 00:08:00,720
isolation and maybe some other security

223
00:08:00,720 --> 00:08:02,879
things in electron would the security

224
00:08:02,879 --> 00:08:05,360
model become very similar to a web

225
00:08:05,360 --> 00:08:06,560
browser

226
00:08:06,560 --> 00:08:09,919
like our iframes isolated

227
00:08:09,919 --> 00:08:11,680
yeah yeah there's all this iframe

228
00:08:11,680 --> 00:08:14,160
trickery and yeah you can there's a

229
00:08:14,160 --> 00:08:16,960
it's pretty much a browser so

230
00:08:16,960 --> 00:08:19,280
electron applications are javascript

231
00:08:19,280 --> 00:08:21,840
applications that are built on top of

232
00:08:21,840 --> 00:08:23,440
node.js

233
00:08:23,440 --> 00:08:25,840
so you have electron

234
00:08:25,840 --> 00:08:28,639
which is has like its own things but

235
00:08:28,639 --> 00:08:30,879
underneath it has no js

236
00:08:30,879 --> 00:08:33,919
it has javascript and it's all it's all

237
00:08:33,919 --> 00:08:37,120
running on the chrome v8 engine

238
00:08:37,120 --> 00:08:39,599
so it's it's the same as node.js on a

239
00:08:39,599 --> 00:08:40,399
server

240
00:08:40,399 --> 00:08:41,519
more or less

241
00:08:41,519 --> 00:08:43,120
but it has like another layer of

242
00:08:43,120 --> 00:08:45,680
electron on top of it so you have all

243
00:08:45,680 --> 00:08:48,320
the node.js code execution things and

244
00:08:48,320 --> 00:08:49,600
for example

245
00:08:49,600 --> 00:08:51,920
the default i i don't remember until

246
00:08:51,920 --> 00:08:53,680
what year this was i think

247
00:08:53,680 --> 00:08:56,560
i i don't remember for sure i think 2019

248
00:08:56,560 --> 00:08:57,279
but

249
00:08:57,279 --> 00:08:59,279
now maybe earlier i don't remember now

250
00:08:59,279 --> 00:09:01,600
from the top of my head but before

251
00:09:01,600 --> 00:09:03,120
there used to be another security

252
00:09:03,120 --> 00:09:05,760
setting called node integration for

253
00:09:05,760 --> 00:09:08,080
node.js integration right so when node

254
00:09:08,080 --> 00:09:10,000
integration is set to true

255
00:09:10,000 --> 00:09:12,399
in electron applications you can call

256
00:09:12,399 --> 00:09:15,600
any node.js api so you can directly with

257
00:09:15,600 --> 00:09:18,399
xss run operating system commands

258
00:09:18,399 --> 00:09:21,360
so you can do like require the node.js

259
00:09:21,360 --> 00:09:23,279
module and then exec

260
00:09:23,279 --> 00:09:25,839
and you name dash a whatever you know

261
00:09:25,839 --> 00:09:28,000
or send your shell back you know

262
00:09:28,000 --> 00:09:30,240
so directly you can run commands so this

263
00:09:30,240 --> 00:09:31,920
was the default at the beginning of

264
00:09:31,920 --> 00:09:34,160
electron and this was changed so now you

265
00:09:34,160 --> 00:09:36,560
have to manually turn it on because

266
00:09:36,560 --> 00:09:38,080
applications by default now have it

267
00:09:38,080 --> 00:09:40,080
disabled like newer newer applications

268
00:09:40,080 --> 00:09:41,760
but context isolation which is the one

269
00:09:41,760 --> 00:09:43,920
that i demo in the light in the writing

270
00:09:43,920 --> 00:09:44,800
talk

271
00:09:44,800 --> 00:09:47,600
this is still the default i believe so

272
00:09:47,600 --> 00:09:48,720
so i am

273
00:09:48,720 --> 00:09:50,880
so sweet um

274
00:09:50,880 --> 00:09:53,040
that could be useful for for like red

275
00:09:53,040 --> 00:09:55,040
team engagements and things like that

276
00:09:55,040 --> 00:09:57,839
possibly yeah if uh if you know

277
00:09:57,839 --> 00:10:00,480
that the the team you're targeting or

278
00:10:00,480 --> 00:10:02,560
the company you're targeting are using

279
00:10:02,560 --> 00:10:04,560
an electron application

280
00:10:04,560 --> 00:10:06,240
inside you could you could target and

281
00:10:06,240 --> 00:10:07,760
another cool thing is

282
00:10:07,760 --> 00:10:09,600
you can actually

283
00:10:09,600 --> 00:10:12,000
not just

284
00:10:12,000 --> 00:10:13,839
so with the lack of context isolation

285
00:10:13,839 --> 00:10:15,440
one thing is what i showed but another

286
00:10:15,440 --> 00:10:16,959
thing that you could do as well is to

287
00:10:16,959 --> 00:10:20,079
send an ipc 2 electron itself so you

288
00:10:20,079 --> 00:10:22,399
could actually send a message and an

289
00:10:22,399 --> 00:10:25,279
attack electron so if they are using an

290
00:10:25,279 --> 00:10:26,959
application that is using a vulnerable

291
00:10:26,959 --> 00:10:28,480
version of electron

292
00:10:28,480 --> 00:10:29,920
you could actually

293
00:10:29,920 --> 00:10:32,560
get code execution that way as well so

294
00:10:32,560 --> 00:10:35,440
so the in the demo that i showed with

295
00:10:35,440 --> 00:10:37,200
the lack of context isolation i attacked

296
00:10:37,200 --> 00:10:39,200
the preload script but you could also

297
00:10:39,200 --> 00:10:41,120
attack electron itself because it's

298
00:10:41,120 --> 00:10:42,880
running in the same context

299
00:10:42,880 --> 00:10:45,120
right so any javascript

300
00:10:45,120 --> 00:10:47,200
that electron is running you can also

301
00:10:47,200 --> 00:10:49,279
attack not just the preload script right

302
00:10:49,279 --> 00:10:50,880
so

303
00:10:50,880 --> 00:10:52,560
and this can be this can be faster

304
00:10:52,560 --> 00:10:54,320
because if you have like a cool electron

305
00:10:54,320 --> 00:10:56,160
vulnerability nobody knows about then

306
00:10:56,160 --> 00:10:58,000
you can you know

307
00:10:58,000 --> 00:10:59,360
you don't have to find a vulnerability

308
00:10:59,360 --> 00:11:00,880
in the applications you can just just

309
00:11:00,880 --> 00:11:04,240
call it yeah so so like

310
00:11:04,240 --> 00:11:06,560
go into google play store or something

311
00:11:06,560 --> 00:11:09,680
and start mining for

312
00:11:09,680 --> 00:11:11,279
electric

313
00:11:11,279 --> 00:11:12,880
right so uh

314
00:11:12,880 --> 00:11:14,800
thank you for uh taking the time to talk

315
00:11:14,800 --> 00:11:16,720
to us no problem

316
00:11:16,720 --> 00:11:18,160
we'll see you tomorrow again yeah yeah

317
00:11:18,160 --> 00:11:19,839
definitely it was it was an excellent

318
00:11:19,839 --> 00:11:22,560
talk and i i i i wish it had been longer

319
00:11:22,560 --> 00:11:23,279
though

320
00:11:23,279 --> 00:11:25,200
lightning talk was a little bit well i

321
00:11:25,200 --> 00:11:28,480
was a little bit afraid uh because uh it

322
00:11:28,480 --> 00:11:30,399
had a live demo yeah so i was kind of

323
00:11:30,399 --> 00:11:32,399
risking it i didn't know like if i would

324
00:11:32,399 --> 00:11:34,480
have time if it wasn't i don't know

325
00:11:34,480 --> 00:11:37,200
maybe something fails you know

326
00:11:37,200 --> 00:11:38,399
ghost

327
00:11:38,399 --> 00:11:40,000
exactly yeah so

328
00:11:40,000 --> 00:11:41,440
all right well thank

329
00:11:41,440 --> 00:11:43,120
thank you do enjoy the rest of the

330
00:11:43,120 --> 00:11:45,360
conference thanks for taking sure best

331
00:11:45,360 --> 00:11:47,200
of luck to the next talk as well yeah

332
00:11:47,200 --> 00:11:50,680
thank you thank you

