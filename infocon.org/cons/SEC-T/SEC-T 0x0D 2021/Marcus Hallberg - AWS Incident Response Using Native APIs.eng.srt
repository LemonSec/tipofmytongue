1
00:00:03,679 --> 00:00:06,080
great can everybody see that text is

2
00:00:06,080 --> 00:00:07,359
clear

3
00:00:07,359 --> 00:00:08,880
perfect

4
00:00:08,880 --> 00:00:11,519
so as they say i am the last guy between

5
00:00:11,519 --> 00:00:13,920
you and the bar sorry for that i know

6
00:00:13,920 --> 00:00:15,679
it's been a long day a lot of great

7
00:00:15,679 --> 00:00:18,720
talks so i plan to keep mine crisp and

8
00:00:18,720 --> 00:00:20,080
i'm happy to talk more about this

9
00:00:20,080 --> 00:00:21,279
afterwards

10
00:00:21,279 --> 00:00:22,800
so thanks for having me my name is

11
00:00:22,800 --> 00:00:25,199
marcus and i work as a security engineer

12
00:00:25,199 --> 00:00:28,240
for klarna and this is my first ever

13
00:00:28,240 --> 00:00:30,880
time on stage here at segtee so

14
00:00:30,880 --> 00:00:32,800
exciting times

15
00:00:32,800 --> 00:00:34,719
topic of the day for me to talk about is

16
00:00:34,719 --> 00:00:37,440
automate incident response in aws and i

17
00:00:37,440 --> 00:00:40,800
will focus on compromised ec2 instances

18
00:00:40,800 --> 00:00:42,719
now there will be a lot of aws

19
00:00:42,719 --> 00:00:44,480
terminology so

20
00:00:44,480 --> 00:00:45,600
if there's something that is unclear

21
00:00:45,600 --> 00:00:47,600
feel free to ask me afterwards

22
00:00:47,600 --> 00:00:49,280
and otherwise i expect you guys to know

23
00:00:49,280 --> 00:00:52,079
some of this already

24
00:00:52,239 --> 00:00:52,960
so

25
00:00:52,960 --> 00:00:55,120
the problem we're having is how do we

26
00:00:55,120 --> 00:00:57,360
automate instrument response on ec2

27
00:00:57,360 --> 00:01:00,000
instances across chrono accounts

28
00:01:00,000 --> 00:01:01,920
so we have hundreds of accounts and

29
00:01:01,920 --> 00:01:04,159
we're running thousands of ec2 instances

30
00:01:04,159 --> 00:01:05,280
every day

31
00:01:05,280 --> 00:01:07,280
doing this manually is for obvious

32
00:01:07,280 --> 00:01:09,439
reasons not a good idea we have tried

33
00:01:09,439 --> 00:01:10,880
that too

34
00:01:10,880 --> 00:01:14,560
so how do we solve this then

35
00:01:14,960 --> 00:01:17,439
so what we ended up doing in testing was

36
00:01:17,439 --> 00:01:19,920
first of all to deploy custom roles to

37
00:01:19,920 --> 00:01:21,920
each of the clone accounts across the

38
00:01:21,920 --> 00:01:23,439
organization

39
00:01:23,439 --> 00:01:26,080
now those roles can only be used by us

40
00:01:26,080 --> 00:01:28,159
through our own sock account through a

41
00:01:28,159 --> 00:01:30,400
very specific authorization process to

42
00:01:30,400 --> 00:01:31,920
make sure that only we could access

43
00:01:31,920 --> 00:01:33,280
those roles

44
00:01:33,280 --> 00:01:34,560
having the roles would give us the

45
00:01:34,560 --> 00:01:37,040
rights to do certain tasks in those

46
00:01:37,040 --> 00:01:39,520
other target accounts in the event of a

47
00:01:39,520 --> 00:01:42,240
compromised ec2 instance

48
00:01:42,240 --> 00:01:44,159
second of all we decided that in order

49
00:01:44,159 --> 00:01:46,320
to make this automatic we need to decide

50
00:01:46,320 --> 00:01:48,799
what needs to happen so in the case of a

51
00:01:48,799 --> 00:01:51,040
compromised cc2 instance we have a

52
00:01:51,040 --> 00:01:53,280
certain number of use cases where we

53
00:01:53,280 --> 00:01:55,520
will spin up the resources we need in

54
00:01:55,520 --> 00:01:58,240
each account using lambda and step

55
00:01:58,240 --> 00:02:00,880
functions and cloud formation templates

56
00:02:00,880 --> 00:02:02,640
and they will run their course in that

57
00:02:02,640 --> 00:02:06,159
target account on the instance itself

58
00:02:06,159 --> 00:02:08,080
and lastly to make sure nothing of this

59
00:02:08,080 --> 00:02:09,919
gets used the wrong way we baked it all

60
00:02:09,919 --> 00:02:12,319
together in a nice play crust procedure

61
00:02:12,319 --> 00:02:14,560
to make sure it's only executed when and

62
00:02:14,560 --> 00:02:16,400
if we want to

63
00:02:16,400 --> 00:02:18,000
sounds easy right

64
00:02:18,000 --> 00:02:20,080
not really

65
00:02:20,080 --> 00:02:21,840
so let's take an example of what this

66
00:02:21,840 --> 00:02:23,280
will look like

67
00:02:23,280 --> 00:02:24,000
so

68
00:02:24,000 --> 00:02:26,319
i notice a very simple scenario but for

69
00:02:26,319 --> 00:02:28,319
the sake of experimentation here let's

70
00:02:28,319 --> 00:02:30,879
say we have an ec2 instances in a

71
00:02:30,879 --> 00:02:33,519
non-prod account sending data to a known

72
00:02:33,519 --> 00:02:36,239
c2c ip address so let's assume this is

73
00:02:36,239 --> 00:02:37,360
bad

74
00:02:37,360 --> 00:02:39,440
now what you can see in the picture here

75
00:02:39,440 --> 00:02:42,000
is our own clarinet stock account in

76
00:02:42,000 --> 00:02:44,239
which we have a few different im roles

77
00:02:44,239 --> 00:02:45,920
that allows us to do certain types of

78
00:02:45,920 --> 00:02:46,959
tasks

79
00:02:46,959 --> 00:02:49,200
and we have baked together what we want

80
00:02:49,200 --> 00:02:51,920
to achieve in a so-called step function

81
00:02:51,920 --> 00:02:53,280
in which there are several different

82
00:02:53,280 --> 00:02:55,519
lambdas running that each have their own

83
00:02:55,519 --> 00:02:56,560
mission

84
00:02:56,560 --> 00:02:58,239
so the first lambda will spin up the

85
00:02:58,239 --> 00:03:00,560
resources we need in the target account

86
00:03:00,560 --> 00:03:02,400
the second lander will monitor and start

87
00:03:02,400 --> 00:03:04,159
the execution of those resources and

88
00:03:04,159 --> 00:03:05,840
track what's happening in that target

89
00:03:05,840 --> 00:03:06,800
account

90
00:03:06,800 --> 00:03:08,800
and lastly we will collect all of those

91
00:03:08,800 --> 00:03:11,120
artifacts from the target account and

92
00:03:11,120 --> 00:03:13,120
ship them back to our own sock account

93
00:03:13,120 --> 00:03:16,239
to our so-called s3 output bucket

94
00:03:16,239 --> 00:03:18,239
now the templates for what we want to

95
00:03:18,239 --> 00:03:20,000
create is also stored in a bucket in our

96
00:03:20,000 --> 00:03:22,319
own account and in there we can load all

97
00:03:22,319 --> 00:03:23,680
these different templates that we want

98
00:03:23,680 --> 00:03:25,920
to create in an incident response

99
00:03:25,920 --> 00:03:28,159
situation

100
00:03:28,159 --> 00:03:30,159
what this then looks like in the target

101
00:03:30,159 --> 00:03:31,200
account

102
00:03:31,200 --> 00:03:33,840
is that we're using these iam roles and

103
00:03:33,840 --> 00:03:35,280
assuming the custom ones that i

104
00:03:35,280 --> 00:03:36,560
mentioned before

105
00:03:36,560 --> 00:03:38,319
so that we load ourselves into those

106
00:03:38,319 --> 00:03:40,319
roles and then using the templates from

107
00:03:40,319 --> 00:03:42,560
our own account we start spinning up the

108
00:03:42,560 --> 00:03:44,239
resources we need

109
00:03:44,239 --> 00:03:46,159
so in this case we decided to use the

110
00:03:46,159 --> 00:03:48,000
step function since it gives us a lot of

111
00:03:48,000 --> 00:03:50,799
flexibility and in the step function we

112
00:03:50,799 --> 00:03:53,120
can decide exactly what type of action

113
00:03:53,120 --> 00:03:55,280
we want to take using separate lambda

114
00:03:55,280 --> 00:03:56,879
functions

115
00:03:56,879 --> 00:03:58,799
so we connect to the ec2 instance we

116
00:03:58,799 --> 00:04:00,799
check that it's ready that it's running

117
00:04:00,799 --> 00:04:02,879
that it has an instance profile attached

118
00:04:02,879 --> 00:04:05,040
so we can connect to it using the ssm

119
00:04:05,040 --> 00:04:07,200
agent that is embedded and we're making

120
00:04:07,200 --> 00:04:08,720
sure that everything else we want to

121
00:04:08,720 --> 00:04:11,280
achieve down the line lower here using

122
00:04:11,280 --> 00:04:13,519
the other lambdas can be achieved by

123
00:04:13,519 --> 00:04:16,720
checking the ec2 status first

124
00:04:16,720 --> 00:04:18,160
as this run through we will take a

125
00:04:18,160 --> 00:04:19,839
memory dump of dc2 instance in the

126
00:04:19,839 --> 00:04:21,759
specific case there could be other cases

127
00:04:21,759 --> 00:04:23,280
where we'll do completely different

128
00:04:23,280 --> 00:04:24,080
things

129
00:04:24,080 --> 00:04:25,680
we will check the status and once

130
00:04:25,680 --> 00:04:27,520
everything is complete we will isolate

131
00:04:27,520 --> 00:04:29,280
the instance shift back all of the

132
00:04:29,280 --> 00:04:31,680
artifacts to our own account and then

133
00:04:31,680 --> 00:04:33,360
notify the sock team in the slack

134
00:04:33,360 --> 00:04:35,680
channel before deleting all of these

135
00:04:35,680 --> 00:04:38,800
resources again from the target account

136
00:04:38,800 --> 00:04:40,800
so that's the progress we will date

137
00:04:40,800 --> 00:04:42,560
and again depending on the case we might

138
00:04:42,560 --> 00:04:44,240
do different things and we might spin up

139
00:04:44,240 --> 00:04:47,040
different resources

140
00:04:47,440 --> 00:04:48,320
so

141
00:04:48,320 --> 00:04:50,240
lessons learned from this

142
00:04:50,240 --> 00:04:52,320
as i said it's not easy there's a lot of

143
00:04:52,320 --> 00:04:53,600
timing constraints that we need to

144
00:04:53,600 --> 00:04:57,199
consider in aws as well as for ssm

145
00:04:57,199 --> 00:04:59,440
so if there are certain commands in ssm

146
00:04:59,440 --> 00:05:00,960
which is failing we need to take that

147
00:05:00,960 --> 00:05:03,199
into account and adapt our track in that

148
00:05:03,199 --> 00:05:05,120
step function that i showed you and

149
00:05:05,120 --> 00:05:06,479
shipped to a different lambda that will

150
00:05:06,479 --> 00:05:08,800
take action and do other things if that

151
00:05:08,800 --> 00:05:10,800
first one fails

152
00:05:10,800 --> 00:05:13,199
also ec2 configuration and which type of

153
00:05:13,199 --> 00:05:15,520
ami is running really also depends what

154
00:05:15,520 --> 00:05:17,919
we want to do so is it running a custom

155
00:05:17,919 --> 00:05:20,000
image is it running windows linux what

156
00:05:20,000 --> 00:05:22,240
distribution what software dependencies

157
00:05:22,240 --> 00:05:24,400
are there all of that is collected first

158
00:05:24,400 --> 00:05:26,400
so we make sure we know what actions we

159
00:05:26,400 --> 00:05:29,039
can take down the line

160
00:05:29,039 --> 00:05:30,400
lastly we found that this is a very

161
00:05:30,400 --> 00:05:32,800
adaptable approach since we can build

162
00:05:32,800 --> 00:05:34,880
our own library of these different use

163
00:05:34,880 --> 00:05:36,880
case templates for what resources we

164
00:05:36,880 --> 00:05:38,400
want to create and what type of

165
00:05:38,400 --> 00:05:40,320
situation

166
00:05:40,320 --> 00:05:42,320
downside it's a standardized procedure

167
00:05:42,320 --> 00:05:44,560
so we need to know beforehand what we

168
00:05:44,560 --> 00:05:45,840
want to do and that is part of the

169
00:05:45,840 --> 00:05:47,600
balance that i will also talk about in

170
00:05:47,600 --> 00:05:49,919
the end

171
00:05:50,960 --> 00:05:53,120
in the future what we want to do i want

172
00:05:53,120 --> 00:05:55,440
to be this guy i want to be able to do

173
00:05:55,440 --> 00:05:57,680
everything at the same time right but

174
00:05:57,680 --> 00:05:59,039
that's tricky

175
00:05:59,039 --> 00:06:01,280
but what we aim to do in the future is

176
00:06:01,280 --> 00:06:03,120
to expand the library of these templates

177
00:06:03,120 --> 00:06:05,199
that i mentioned so that we have

178
00:06:05,199 --> 00:06:06,800
different templates for different types

179
00:06:06,800 --> 00:06:08,960
of scenarios and that we can use that

180
00:06:08,960 --> 00:06:11,039
library to spin up whatever we need in a

181
00:06:11,039 --> 00:06:13,199
situation like this

182
00:06:13,199 --> 00:06:15,120
we will also look at ways to automate

183
00:06:15,120 --> 00:06:16,880
the analysis of the artifacts we're

184
00:06:16,880 --> 00:06:20,319
collecting such as the memory forensics

185
00:06:20,319 --> 00:06:22,160
maybe write on ebs

186
00:06:22,160 --> 00:06:24,400
snapshots and analyze the hard drives we

187
00:06:24,400 --> 00:06:26,240
might pull files there's a lot of

188
00:06:26,240 --> 00:06:27,840
different things here where we will

189
00:06:27,840 --> 00:06:30,000
collect these and make sure we also can

190
00:06:30,000 --> 00:06:32,319
follow up for example we can spin up our

191
00:06:32,319 --> 00:06:34,400
own ec2 instance that will run certain

192
00:06:34,400 --> 00:06:36,479
types of actions and connect that to an

193
00:06:36,479 --> 00:06:38,080
ebs snapshot that we pulled from the

194
00:06:38,080 --> 00:06:39,600
target account

195
00:06:39,600 --> 00:06:41,680
possibilities are english like we can do

196
00:06:41,680 --> 00:06:43,600
whatever but we will start small and

197
00:06:43,600 --> 00:06:45,440
grow fast

198
00:06:45,440 --> 00:06:46,479
lastly

199
00:06:46,479 --> 00:06:49,120
the benefit and disadvantage that i

200
00:06:49,120 --> 00:06:50,960
talked about before is what do we want

201
00:06:50,960 --> 00:06:52,400
to standardize and what we want to

202
00:06:52,400 --> 00:06:54,000
customize right

203
00:06:54,000 --> 00:06:56,240
so in different incidents it might be

204
00:06:56,240 --> 00:06:58,240
better not to do this because of timing

205
00:06:58,240 --> 00:07:00,479
constraints but rather get a shell or

206
00:07:00,479 --> 00:07:02,800
get access to the ec2 instance directly

207
00:07:02,800 --> 00:07:04,560
and do custom actions

208
00:07:04,560 --> 00:07:06,400
so that balance between what to

209
00:07:06,400 --> 00:07:08,319
standardize and what we want to do from

210
00:07:08,319 --> 00:07:10,240
a custom perspective that is something

211
00:07:10,240 --> 00:07:13,280
we're discussing right now

212
00:07:13,520 --> 00:07:14,880
lastly i want to leave you guys with

213
00:07:14,880 --> 00:07:16,479
some good reading there's been a lot of

214
00:07:16,479 --> 00:07:19,199
work done on automation in aws

215
00:07:19,199 --> 00:07:21,039
from various types of teams goldman

216
00:07:21,039 --> 00:07:24,080
sachs aws home security lab and other

217
00:07:24,080 --> 00:07:26,639
providers as well so here's some tips to

218
00:07:26,639 --> 00:07:28,639
look at and combine all of them have

219
00:07:28,639 --> 00:07:32,160
their strengths and different advantages

220
00:07:32,160 --> 00:07:33,919
and lastly if you want to get in touch

221
00:07:33,919 --> 00:07:36,720
there are ways to reach me and as the my

222
00:07:36,720 --> 00:07:38,720
friend here before said we are also

223
00:07:38,720 --> 00:07:41,120
hiring and i should say that i have the

224
00:07:41,120 --> 00:07:43,759
best boss so come and talk to us with

225
00:07:43,759 --> 00:07:45,280
that thank you all for listening and

226
00:07:45,280 --> 00:07:47,199
happy to discuss more in the bar thank

227
00:07:47,199 --> 00:07:48,510
you guys

228
00:07:48,510 --> 00:07:52,279
[Applause]

