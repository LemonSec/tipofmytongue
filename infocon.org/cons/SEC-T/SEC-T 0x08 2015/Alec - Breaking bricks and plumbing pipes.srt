1
00:00:00,000 --> 00:00:12,120
hi everyone I'm Alec Stewart and this is
my cisco SI talk so little background on

2
00:00:12,120 --> 00:00:12,780
myself

3
00:00:12,780 --> 00:00:17,698
I'm from Sydney Australia working the
firewall sort of network security design

4
00:00:17,699 --> 00:00:22,320
space huh not really a security
researcher by trade or anything like

5
00:00:22,320 --> 00:00:28,470
that i worked some of the firewall
engineer for a long time and in that

6
00:00:28,470 --> 00:00:32,850
space i was working with juniper and
sort of netscreen and check . i never

7
00:00:32,850 --> 00:00:39,329
really had a nice car is a exposure so I
ended up buying a cisco is a off ebay

8
00:00:39,329 --> 00:00:45,180
and just started having a poke at it and
pretty much this is how the talk sort of

9
00:00:45,180 --> 00:00:52,680
came about so little disclaimer before
we get into it so yeah like I said I'm

10
00:00:52,680 --> 00:00:55,559
not a sort of security researcher by
trade

11
00:00:55,559 --> 00:00:59,430
it's not really related to my job is
actually helpful that in my job we don't

12
00:00:59,430 --> 00:01:06,119
work with any cisco essays and you know
I did this purely for security research

13
00:01:06,119 --> 00:01:12,510
sake in my own time from fun basically
all the vulnerabilities have been

14
00:01:12,510 --> 00:01:18,720
reported to cisco so i did this talk
back in October last year at rocks calm

15
00:01:18,720 --> 00:01:22,830
down in melbourne australia and at that
time all these vulnerabilities were

16
00:01:22,830 --> 00:01:29,280
pretty much zero day I had worked with
cisco up to maybe four five even six

17
00:01:29,280 --> 00:01:36,090
months prior and so Cisco had delayed
their release of the their patches up

18
00:01:36,090 --> 00:01:39,689
until about three days before the box
can talk so it was quite nice of them to

19
00:01:39,689 --> 00:01:42,809
to do that something was pretty fresh

20
00:01:42,810 --> 00:01:46,950
so you have the patches of red available
if you are have cisco essays that are

21
00:01:46,950 --> 00:01:53,310
still unpatched you know all these
pretty pictures of from the internet so

22
00:01:53,310 --> 00:01:58,259
what we're going to do today is step
through the little super mario world so

23
00:01:58,259 --> 00:02:02,490
that's what we're gonna get some local
shell access and we're gonna look at

24
00:02:02,490 --> 00:02:07,979
maybe putting in some persistent sort of
malicious firmware onto the cisco SI but

25
00:02:07,979 --> 00:02:09,538
I mean having a

26
00:02:09,538 --> 00:02:13,379
sort of a rootkit if you like this guy
say it's not really useful unless you

27
00:02:13,379 --> 00:02:19,560
have local access so to get that I'm
I've decided that you know we need some

28
00:02:19,560 --> 00:02:24,269
sort of remote exploit to get access to
the NSA to put out working on there so

29
00:02:24,269 --> 00:02:29,310
we're going to do that but I'll our
remote exploit doesn't give us any

30
00:02:29,310 --> 00:02:35,489
access i guess to the device itself so
we need to use the credentials that we

31
00:02:35,489 --> 00:02:40,799
capture from our remote exploit to then
compromise the device and finally I mean

32
00:02:40,799 --> 00:02:44,400
we're not really here to just own the
firewall were you when you when you want

33
00:02:44,400 --> 00:02:47,340
to own a firewall you generally want to
own the daughter that you know it's

34
00:02:47,340 --> 00:02:50,579
protecting on the network's it's
protecting so that's what we're gonna do

35
00:02:50,579 --> 00:02:54,659
we're gonna essentially on the network
and we're gonna own the network via oh

36
00:02:54,659 --> 00:03:00,510
you know the functionality of a rootkit
so that leads me into why do we want to

37
00:03:00,510 --> 00:03:04,769
own the firewall while traditional
reasons are you know quite simple like

38
00:03:04,769 --> 00:03:08,040
you're in the fireball you can change
the firewall config you can open up the

39
00:03:08,040 --> 00:03:12,989
network you know the firewall is the
gateway on the network so it's perfect

40
00:03:12,989 --> 00:03:16,709
place to sniff graphical man in the
middle traffic but the reason I want the

41
00:03:16,709 --> 00:03:21,060
firewall is none of these real reasons
it's because you know if I can own the

42
00:03:21,060 --> 00:03:25,949
firewall i can change my traffic as it
passes through the firewall so this is

43
00:03:25,949 --> 00:03:29,519
gonna allow me to basically blend into
the network and the reason i want to

44
00:03:29,519 --> 00:03:33,359
blend into the network is because we've
moved away from the idea that you know

45
00:03:33,359 --> 00:03:38,220
you've gotta trust and untrust on the
firewall and basically everything

46
00:03:38,220 --> 00:03:41,760
outside the firewall is untrusted
everything inside the firewall is

47
00:03:41,760 --> 00:03:46,500
trusted so you know there's a big
increase these days in you know

48
00:03:46,500 --> 00:03:50,310
detection response on your internal
network so you've got things like

49
00:03:50,310 --> 00:03:56,669
network security monitoring him and
seemed so basically my idea is that if

50
00:03:56,669 --> 00:04:02,189
we can own the firewall what we're going
to own is the rule base and the rollbase

51
00:04:02,189 --> 00:04:06,239
basically tells us the trust
relationships of entities on the network

52
00:04:06,239 --> 00:04:12,900
so that the roadways from the compromise
firewall actually describes the expected

53
00:04:12,900 --> 00:04:16,620
network traffic patterns that you can
you would expect to see on the network

54
00:04:16,620 --> 00:04:18,870
and therefore maybe what we could do

55
00:04:18,870 --> 00:04:23,310
is we could rewrite the firewall rules
that we've captured as not rules and

56
00:04:23,310 --> 00:04:27,270
this allows us to send out traffic
through the firewall and then getting

57
00:04:27,270 --> 00:04:32,520
added to be the allowed or expected
traffic so i'm calling this technique

58
00:04:32,520 --> 00:04:36,419
man in the wall I don't know if that'll
sort of catch on but it's kind of a an

59
00:04:36,419 --> 00:04:42,539
interesting space between I guess IP
spoofing and and man-in-the-middle you

60
00:04:42,540 --> 00:04:47,910
so let's have a look at what does just
go si actually is so it's you know it's

61
00:04:47,910 --> 00:04:52,229
a black box appliance gets sold to you
and it looks quite fancy it's got you

62
00:04:52,229 --> 00:04:56,969
know big blue box but underneath really
all it is is like a high specs that

63
00:04:56,970 --> 00:05:02,370
intel server so we got two different
sort of modes I guess the hardwell or

64
00:05:02,370 --> 00:05:06,210
generations of the hardware you've got
the legacy hardware and this is what you

65
00:05:06,210 --> 00:05:11,070
would find in a lot of networks today
and it's basically just 32-bit pentium 4

66
00:05:11,070 --> 00:05:16,139
hardware right down the bottom there is
the hardware that i bought off ebay cost

67
00:05:16,139 --> 00:05:20,970
you know maybe two hundred dollars or so
and today I'm 5505 doesn't have a lot of

68
00:05:20,970 --> 00:05:29,760
ram that that cpu is just like a small
form-factor Intel 32-bit cpu so well the

69
00:05:29,760 --> 00:05:34,020
reason you know I had this little device
is because it's affordable it's like two

70
00:05:34,020 --> 00:05:37,919
hundred dollars but the good thing about
it is it actually runs the same firmware

71
00:05:37,919 --> 00:05:44,039
image as the highest SPECT you know
maybe the 5550 i'm not talking about

72
00:05:44,039 --> 00:05:47,669
running the same version of software it
will actually run the exact same family

73
00:05:47,669 --> 00:05:51,900
image that's important because it means
that if I find a bug in my little

74
00:05:51,900 --> 00:05:55,260
two-hundred-dollar appliance i'll find
the same bug in you know the

75
00:05:55,260 --> 00:06:01,169
fifty-thousand-dollar . whatever it is
so just go slowly facing out that legacy

76
00:06:01,169 --> 00:06:06,240
hardware and then introducing the
next-gen hardware so this is basically

77
00:06:06,240 --> 00:06:14,070
to 64 bit of cpus Intel once again lot
more ram part of far more powerful boxes

78
00:06:14,070 --> 00:06:20,639
what's interesting is cisco's also
released a virtual is a arm and once

79
00:06:20,639 --> 00:06:25,919
again it runs the same family image as
the actual Hardware the next-gen

80
00:06:25,919 --> 00:06:29,940
hardware so it means that if we find a
vulnerability or bug in the virtual

81
00:06:29,940 --> 00:06:31,200
machine

82
00:06:31,200 --> 00:06:37,229
it's going to run on the hardware so
that's the hardware side of things when

83
00:06:37,230 --> 00:06:42,720
it comes to the software the cisco is a
is much like the cisco iOS in terms of

84
00:06:42,720 --> 00:06:47,010
you know the CLI so you got a couple of
modes you've got basically in on exactly

85
00:06:47,010 --> 00:06:50,880
mode where you can't do anything when
you go into the baby enable mode and you

86
00:06:50,880 --> 00:06:56,430
can do like show run show you know
interfaces short version show IP route

87
00:06:56,430 --> 00:07:00,330
whatever and then you can go into the
conflict mode and just allow you to you

88
00:07:00,330 --> 00:07:05,729
know set IP addresses you know change
the access list and you're not rules

89
00:07:05,730 --> 00:07:11,550
whatever of note is that the persistent
storage and compact flash and it's

90
00:07:11,550 --> 00:07:16,920
called disk 0 there's other there's
another mode of configuring the essay

91
00:07:16,920 --> 00:07:22,200
which is using a GUI called the asdm
gooey and basically it's like a java

92
00:07:22,200 --> 00:07:27,719
program that runs throughout the browser
and it basically wraps or your actions

93
00:07:27,720 --> 00:07:33,360
in the GUI into heb posts and it
basically just does the same thing as

94
00:07:33,360 --> 00:07:40,290
the CLI but you know you get a mask ue
so one of the show commands instead of

95
00:07:40,290 --> 00:07:45,390
the enable mode is show Colonel process
and when we look at the show Colonel

96
00:07:45,390 --> 00:07:49,770
process output we can see it's pretty
familiar just a PS list and it's

97
00:07:49,770 --> 00:07:53,940
odorless tells us that there's an
underlying operating system like wearing

98
00:07:53,940 --> 00:07:58,320
this restricted shell and everything
seems like you know you can't do a whole

99
00:07:58,320 --> 00:08:01,469
lot and then you realize that are
hanging a minute there's a completely

100
00:08:01,470 --> 00:08:06,930
different operating system running
underneath this cisco thing so we goin

101
00:08:06,930 --> 00:08:11,130
on the internet we have a look at these
pdfs at cisco have provided which

102
00:08:11,130 --> 00:08:14,730
basically show all the open source
projects that are wrapped up inside

103
00:08:14,730 --> 00:08:19,380
their firmware and there's like hundreds
of projects in in the firmware image

104
00:08:19,380 --> 00:08:24,240
cisco actually because you know it's GPL
and all the rest of that they'll

105
00:08:24,240 --> 00:08:29,430
actually provide you with the build root
of the open source code which is which

106
00:08:29,430 --> 00:08:34,500
is nice it's kinda like you know that
open wrt sort of project that will give

107
00:08:34,500 --> 00:08:35,950
you the build route

108
00:08:35,950 --> 00:08:42,160
so if we grab the firmware either from
the device will be downloaded from cisco

109
00:08:42,159 --> 00:08:46,510
we run it through the bin walk tool so
imagine some you guys familiar with Ben

110
00:08:46,510 --> 00:08:52,210
walk is basically something that will
analyze patterns and signatures inside

111
00:08:52,210 --> 00:08:57,160
firmware images and all will try to
extract it if it can find it

112
00:08:57,160 --> 00:09:01,839
whatever it may be so we run been
walking over our family image and what

113
00:09:01,840 --> 00:09:06,460
we can see is it something in there
called rootfs . OMG this is like it just

114
00:09:06,460 --> 00:09:12,160
a gzipped cpio archive so cpio is is
like tar just a really generic sort of

115
00:09:12,160 --> 00:09:19,780
archiving format so we can we can
extract the root FS . OMG from the from

116
00:09:19,780 --> 00:09:23,680
the firmware image and then we can just
extracted using that command down the

117
00:09:23,680 --> 00:09:30,040
bottom and you can just see that we get
an outline of what we get the the

118
00:09:30,040 --> 00:09:34,719
offline version of the file system so we
have a look at the file system and it

119
00:09:34,720 --> 00:09:40,240
tells us that essentially this is a
really basic linux environment and most

120
00:09:40,240 --> 00:09:46,630
importantly the the directory /si
contains all the cisco files so when we

121
00:09:46,630 --> 00:09:49,960
analyze the offline file system we can
see the boot process so we can have a

122
00:09:49,960 --> 00:09:55,450
look at what's in the inner tab and our
RC scripts and we can see that basically

123
00:09:55,450 --> 00:09:59,380
the whole function of the Linux
environment is the boot one single

124
00:09:59,380 --> 00:10:06,160
executable which is called as a bin Lena
so SI been Lena is the actual firewall

125
00:10:06,160 --> 00:10:13,420
the whole linux environment only exists
for that process to run so if we look

126
00:10:13,420 --> 00:10:18,130
briefly at the linux environment we can
see it's pretty basic got like a SLR

127
00:10:18,130 --> 00:10:24,160
disabled we can load el km's it's got a
nice to DB server for us and it's got

128
00:10:24,160 --> 00:10:29,050
ptrace support but it doesn't actually
have any access to the network so you

129
00:10:29,050 --> 00:10:35,589
know if we get to the shell in a running
environment and we do if config- a we've

130
00:10:35,590 --> 00:10:40,300
got like three interfaces that really
don't do a whole lot dummy look back at

131
00:10:40,300 --> 00:10:44,949
app so it's like well what happened you
know we've got this piece of hardware

132
00:10:44,950 --> 00:10:47,510
that has all these interfaces on it

133
00:10:47,510 --> 00:10:50,840
and none of them are exposed in the
linux environment which is kind of

134
00:10:50,840 --> 00:10:55,670
strange and it turns out what's
happening is that there is a been Lena

135
00:10:55,670 --> 00:11:00,439
that the firewall in it wrapped in an
executable actually has userspace pci

136
00:11:00,440 --> 00:11:04,550
drivers so within userspace it's
actually handling everything off the

137
00:11:04,550 --> 00:11:09,050
wire which is kind of interesting i
hadn't actually seen much in terms of

138
00:11:09,050 --> 00:11:15,680
space pci drivers before but yeah it's
apparently you not that uncommon these

139
00:11:15,680 --> 00:11:19,939
days so does that mean that we don't
have any access to the network from the

140
00:11:19,940 --> 00:11:24,500
shell you know we will get access to the
shell perhaps and then we can actually

141
00:11:24,500 --> 00:11:27,500
get access to the network is a network
interfaces

142
00:11:27,500 --> 00:11:31,460
well it turns out that you know by
digging in the essay directory we can

143
00:11:31,460 --> 00:11:36,290
have a look and we see that there's
references to these LD preload Libby Sox

144
00:11:36,290 --> 00:11:42,410
library so Libby socks is like an open
source program or project called Dante

145
00:11:42,410 --> 00:11:47,390
and it's I guess sometimes sometimes
referred to as toxify and basically

146
00:11:47,390 --> 00:11:52,610
forces and applications calls to connect
to the network and wraps them through a

147
00:11:52,610 --> 00:11:57,800
proxy server so that sounds pretty
interesting because you know suddenly we

148
00:11:57,800 --> 00:12:01,910
might be able to access the network from
the shell so it turns out that there's

149
00:12:01,910 --> 00:12:06,829
like a hidden socks proxy that we can
enable in lean over the cisco land CLA

150
00:12:06,830 --> 00:12:11,570
by going service internal look back
proxy server and suddenly that look back

151
00:12:11,570 --> 00:12:16,040
interface that we saw earlier has a
socks proxy running on it which then we

152
00:12:16,040 --> 00:12:22,130
can access to the network so what we
really want to do is we want to subvert

153
00:12:22,130 --> 00:12:26,420
is a been leaning because that is the
firewall process so there's two ways

154
00:12:26,420 --> 00:12:30,680
that we can do that first of all we
could modify the firmware image so that

155
00:12:30,680 --> 00:12:34,790
we modified the binary you'd like that
it's a bin Lena before it starts up or

156
00:12:34,790 --> 00:12:40,310
we can maybe jailbreak from the running
version of the essay bin liner and then

157
00:12:40,310 --> 00:12:44,479
modify the running process so first of
all have a look at modifying the

158
00:12:44,480 --> 00:12:49,970
firmware so I mean what we could do like
this it's really quite simple is we

159
00:12:49,970 --> 00:12:55,310
could just multiply si bueno you know
pageant here and add some code there and

160
00:12:55,310 --> 00:12:58,550
then just repack it using cpio which is
you know

161
00:12:58,550 --> 00:13:03,649
pretty much every standard Linux
platform gzip it up open up the the

162
00:13:03,649 --> 00:13:08,120
firmware image and then just paste it
right over the top of the old brewfest

163
00:13:08,120 --> 00:13:09,140
OMG

164
00:13:09,140 --> 00:13:13,069
and then we could just load that onto
the NSA but when we try to load it onto

165
00:13:13,070 --> 00:13:18,440
the essay we got these checks under
ification failed and that kind of sucks

166
00:13:18,440 --> 00:13:21,230
because it means that you know obviously
there's going to be some embedded check

167
00:13:21,230 --> 00:13:25,820
sums here or there inside the essay
image that we need to find and replace

168
00:13:25,820 --> 00:13:31,670
and so yeah when we when we try to
upload this using tftp or ftp from the

169
00:13:31,670 --> 00:13:36,920
essay prompts so basically copy from
tftp server to you know the the device

170
00:13:36,920 --> 00:13:42,319
when we get this check samara so like I
said we could rewrite all the checksums

171
00:13:42,320 --> 00:13:46,430
could say just it's just checking itself
so we could rewrite you know the

172
00:13:46,430 --> 00:13:50,390
locations inside the firmware or we
could just bypass that check all

173
00:13:50,390 --> 00:13:56,720
together by just SC paying out malicious
image to the device because for whatever

174
00:13:56,720 --> 00:14:02,660
reason you know that that check isn't
done if we SCP our malicious firmware up

175
00:14:02,660 --> 00:14:07,130
onto the device now Cisco could go on
patch this would be really quite simple

176
00:14:07,130 --> 00:14:11,930
for them to do but it doesn't mean that
would be a cosmetic patch because you

177
00:14:11,930 --> 00:14:15,439
know even if they did this patch it so
that it did the check when we upload a

178
00:14:15,440 --> 00:14:19,640
malicious version it doesn't stop us
from rewriting the the hashes inside the

179
00:14:19,640 --> 00:14:26,839
image so essentially when we reboot the
device with their malicious image loaded

180
00:14:26,839 --> 00:14:33,380
the boot process doesn't run that
verification at all either and I you

181
00:14:33,380 --> 00:14:36,110
know I emailed to go to ask them what
they thought about you know the

182
00:14:36,110 --> 00:14:41,540
verification process because I realized
I was loading a malicious firmware onto

183
00:14:41,540 --> 00:14:45,319
my just going to say without any issues
and they basically said that you know

184
00:14:45,320 --> 00:14:50,240
the check sums that are built into the
image of their to detect sort of

185
00:14:50,240 --> 00:14:53,959
corruption during file transfer not
their offer any security at all

186
00:14:54,620 --> 00:15:00,080
so I mean this this issue apparently has
been fixed on the new versions of the

187
00:15:00,080 --> 00:15:03,680
hardware so that next-gen hardware
because it's got you know like a secure

188
00:15:03,680 --> 00:15:10,849
boot so hopefully that is the case i
haven't tested i don't have any access

189
00:15:10,850 --> 00:15:17,270
to the new hardware but you know in the
old versions of the the the legacy

190
00:15:17,270 --> 00:15:22,340
hardware this lack of integrity
verification has been exploited for at

191
00:15:22,340 --> 00:15:29,210
least since 2008 so i don't know if you
guys have seen the the Spiegel releases

192
00:15:29,210 --> 00:15:34,550
of the ant catalog which was that came
out of the Snowden leaks so essentially

193
00:15:34,550 --> 00:15:40,729
the NSA have been building you know
implant for all these infrastructure

194
00:15:40,730 --> 00:15:48,110
devices like Cisco juniper netscreen and
and you know a whole bunch of other you

195
00:15:48,110 --> 00:15:53,060
know network infrastructure devices and
they've been doing for quite some time

196
00:15:53,060 --> 00:15:58,520
so that they they built this one called
Jet plow which is described as a

197
00:15:58,520 --> 00:16:02,930
firmware persistent implant which is
kind of interesting because i think that

198
00:16:02,930 --> 00:16:09,530
the screen asks which is the next game 1
and B SRX ones i believe what bios

199
00:16:09,530 --> 00:16:15,199
persistent but for whatever reason they
stuck with homework assistance in cisco

200
00:16:15,200 --> 00:16:19,040
and say I guess they didn't have access
to the bias so what it does is it

201
00:16:19,040 --> 00:16:22,790
modifies that cisco firewall operating
system of boonton so it basically

202
00:16:22,790 --> 00:16:29,719
becomes you know part of their greater
but now i guess you'd call it and you'll

203
00:16:29,720 --> 00:16:34,250
note that the versions that runs on are
all the legacy versions including my

204
00:16:34,250 --> 00:16:39,080
little 5505 because like I said you know
the same images use across all the

205
00:16:39,080 --> 00:16:43,790
platforms so what we're going to do is
we're gonna make our own jet plow so

206
00:16:43,790 --> 00:16:47,270
what we want to do is we want to change
the startup method so that it does what

207
00:16:47,270 --> 00:16:52,730
the cisco outside sorry the NSA does and
it modifies the operating system at boot

208
00:16:52,730 --> 00:16:59,330
so what I do is I'm just going to pack
in my own little init script i'm gonna

209
00:16:59,330 --> 00:17:03,630
have like a little bar binary infector
to you know infect a

210
00:17:03,630 --> 00:17:07,020
SI been Lena and I have something
running in the background for

211
00:17:07,020 --> 00:17:11,639
persistence so that if admin tries to
upload and you version it's gonna infect

212
00:17:11,640 --> 00:17:16,890
that essentially a little something for
yourself a little kernel module and then

213
00:17:16,890 --> 00:17:19,709
just a generic reverse shell for
communication

214
00:17:19,709 --> 00:17:24,540
so what I do is I get all those files
and without really changing too much in

215
00:17:24,540 --> 00:17:30,389
terms of you know the structure of the
image i just put all these files in and

216
00:17:30,390 --> 00:17:34,530
just do Jesus minus 9 which gives me you
know more compression over the original

217
00:17:34,530 --> 00:17:43,920
arm rootfs . OMG image and i just put
that back into the firmware uploaded of

218
00:17:43,920 --> 00:17:46,410
course you know I'm not cutting and
pasting it anymore i got like a little

219
00:17:46,410 --> 00:17:51,660
bash script to do it for me so it's
basically just carving out the brewfest

220
00:17:51,660 --> 00:17:57,030
OMG putting my files back in and then
she's picking it up and putting it back

221
00:17:57,030 --> 00:18:02,370
into the original firmware image so what
we're going to do is we look at

222
00:18:02,370 --> 00:18:08,550
infecting Lena so this is a really
simple program here all its gonna do is

223
00:18:08,550 --> 00:18:13,200
create a new menu option called shomari
logo and then he's gonna put some

224
00:18:13,200 --> 00:18:17,340
masking yard on the the prompt that all
just stay there know that men can login

225
00:18:17,340 --> 00:18:22,620
anyone to see Mario sitting on the
prompter really innocent example could

226
00:18:22,620 --> 00:18:25,620
easily be weaponized to do anything for
the firewall

227
00:18:26,550 --> 00:18:32,010
next up we're gonna put in our little
persistence program this runs in the

228
00:18:32,010 --> 00:18:37,590
background and originally I wrote this
thing so that wouldn't automatically in

229
00:18:37,590 --> 00:18:42,030
fact sort of new firmwares that were
uploaded but it was just too slow cause

230
00:18:42,030 --> 00:18:46,560
it's like compact flash my advice I
don't know how old it is i got on ebay

231
00:18:46,560 --> 00:18:52,710
and it was just the i/o for just
extracting on CPI owing and then putting

232
00:18:52,710 --> 00:18:56,940
it all back in and she's having backup
we just just really resource-intensive

233
00:18:56,940 --> 00:18:58,530
on the disco

234
00:18:58,530 --> 00:19:03,870
so in the end I just change that so that
would actually just trigger you know

235
00:19:03,870 --> 00:19:08,370
when a new firmware is uploaded it would
just go and grab our firmware which

236
00:19:08,370 --> 00:19:11,790
would be the Trojan version from the
pretend C&C server

237
00:19:12,850 --> 00:19:19,629
so next up we have something for stealth
this is really simple lkm so the linux

238
00:19:19,630 --> 00:19:25,090
kernel version that runs on the cisco
NSA was pretty much I or still pretty

239
00:19:25,090 --> 00:19:30,909
much is standard from our I don't know
version 80 something so it's like 2.6

240
00:19:30,910 --> 00:19:37,180
got 29 so it's getting on in age so
writing a lkm brew kit was really simple

241
00:19:37,180 --> 00:19:45,730
and all my brew kit does my are lkm does
is basically just redirects open call to

242
00:19:45,730 --> 00:19:50,290
basically open a clean version of the
image so it's going to open up the the

243
00:19:50,290 --> 00:19:56,260
image that the admin uploaded so it
means that our al stealth or how

244
00:19:56,260 --> 00:20:01,750
infected or malicious binary is going to
sit where it's meant to be booted from

245
00:20:01,750 --> 00:20:03,490
but then every time

246
00:20:03,490 --> 00:20:08,740
admin goes to access it either to to do
a verify command in my essay or even to

247
00:20:08,740 --> 00:20:12,730
download it back onto his computer maybe
think that there's something strange

248
00:20:12,730 --> 00:20:17,440
going on she wants to take it offline
for analysis is going to request you

249
00:20:17,440 --> 00:20:20,770
know firmware . been and he's going to
be given the same version that he

250
00:20:20,770 --> 00:20:27,460
uploaded completely clean malicious next
up we've got like a really simple

251
00:20:27,460 --> 00:20:32,140
reverse shell so remember I was talking
about the LD preload before so basically

252
00:20:32,140 --> 00:20:39,640
I'm just I'm just using so cat as my as
my reverse shell sort of arm technique

253
00:20:39,640 --> 00:20:44,710
and I'm just LD pre-loading Libby stock
so that basically when we do our reverse

254
00:20:44,710 --> 00:20:51,130
connect it's going to connect to that IP
address their 192 168 1 . when I 6.44

255
00:20:51,130 --> 00:20:58,870
and it's gonna bounce out from the shell
by the internal proxy proxy and out to

256
00:20:58,870 --> 00:21:10,300
my cnc server so a little demo of
malicious firmware image on the NSA so

257
00:21:10,300 --> 00:21:11,020
here

258
00:21:11,020 --> 00:21:14,950
dir been you can see that this is the
only image that's on the the file system

259
00:21:14,950 --> 00:21:17,980
in cisco land we're going to run

260
00:21:18,500 --> 00:21:21,500
just show that is the image that's going
to boot

261
00:21:23,510 --> 00:21:33,080
now i'm going to verify that image so
that image comes up and you know it says

262
00:21:33,080 --> 00:21:36,560
that that's the shower 512 hash of it
already

263
00:21:37,070 --> 00:21:45,470
BF 53 blah blah we go across the cisco
website and we can see that that matches

264
00:21:45,470 --> 00:21:49,790
so that looks like a perfectly fine
piece of software that's gonna run

265
00:21:49,790 --> 00:21:57,320
signatures being verified whatever that
means in terms of signatures but alright

266
00:21:57,320 --> 00:22:01,220
now we're going to load that particular
piece that we've just verified that that

267
00:22:01,220 --> 00:22:15,080
that that firmware and sure enough it's
loading this infector which is changing

268
00:22:15,080 --> 00:22:21,139
a few things here and there it's
installing the lk m which is the kernel

269
00:22:21,140 --> 00:22:26,600
module and it's starting the background
of ground-up gradient vector so the

270
00:22:26,600 --> 00:22:31,820
thing is booting now and I've got my
little neck at listen here where my

271
00:22:31,820 --> 00:22:37,370
reverse shell is going to pop up and
login and I type the command show Mario

272
00:22:37,370 --> 00:22:43,820
logo and says this cisco SI you want you
can read it and it puts a mario on the

273
00:22:43,820 --> 00:22:47,810
command prompt there and sure enough we
get out

274
00:22:47,810 --> 00:22:53,750
reverse shell so let's do some basic PS
there just to show you that you know the

275
00:22:53,750 --> 00:22:59,030
background thing is running and then i'm
going to jump here to the admin console

276
00:22:59,030 --> 00:23:04,820
or pretend admin console and going a
pretender upload a new version of the

277
00:23:04,820 --> 00:23:11,510
firmware so this is a 924 so it's an
upgrade from 91 this actually isn't the

278
00:23:11,510 --> 00:23:18,230
real file i was recording this and I've
done a bunch of test files so yet you'll

279
00:23:18,230 --> 00:23:21,710
see the concept is there but you can see
it's only like a really small file

280
00:23:22,700 --> 00:23:25,929
unfortunately i didn't pick that up
until you know

281
00:23:25,929 --> 00:23:32,499
already finished so you can see that but
the upgrade process running in the

282
00:23:32,499 --> 00:23:38,259
background is detected that a new file
has turned up on the file system and

283
00:23:38,259 --> 00:23:42,639
basically it's going to the CNC server
and it's downloaded the same version of

284
00:23:42,639 --> 00:23:52,418
the file so well that is pretty much
completely compromised flower wall so

285
00:23:52,419 --> 00:23:55,990
that's one way of doing it but it
requires a reboot and it's not gonna

286
00:23:55,990 --> 00:24:01,269
work on the new hardware because new
hardware has secure boot TPM and all the

287
00:24:01,269 --> 00:24:04,480
rest of it apparently that's what the
matrix is therefore because i haven't

288
00:24:04,480 --> 00:24:09,850
tested it but a nicer way of doing it
would be to actually jailbreak from that

289
00:24:09,850 --> 00:24:15,639
restricted CLI and then patch the
running Lena process in memory and this

290
00:24:15,639 --> 00:24:19,299
way we don't need to reboot and we
basically bypass all the integrity

291
00:24:19,299 --> 00:24:22,990
checks so secure boot and all the
resident and obviously this would work

292
00:24:22,990 --> 00:24:24,639
on the latest hardware

293
00:24:24,639 --> 00:24:29,529
although i should put out after except
as well so here's a little jailbreak

294
00:24:29,529 --> 00:24:36,249
arms you know vulnerability that i found
we go into the cisco land config and we

295
00:24:36,249 --> 00:24:36,700
do

296
00:24:36,700 --> 00:24:41,080
BMC policy agent shared secret and then
we just do we will just wrap out

297
00:24:41,080 --> 00:24:45,999
whatever shell command or whatever linux
command we want to to run inside and

298
00:24:45,999 --> 00:24:49,509
percent so this is typical sort of
tainted input so we could have done like

299
00:24:49,509 --> 00:24:54,279
back ticks or whatever you like there
are not pipes because pipes are used in

300
00:24:54,279 --> 00:25:00,100
the cisco CLI so we do have back takes
there and it's basically going to run

301
00:25:00,100 --> 00:25:06,850
that reverse so Kat shell basically give
us another reverse shell so this is kind

302
00:25:06,850 --> 00:25:12,908
of good because the shared secret is
actually a password store so Cisco will

303
00:25:12,909 --> 00:25:17,590
actually replace that now 20 with a
structures after it in and because it's

304
00:25:17,590 --> 00:25:21,309
part of the conflict it's actually going
to run that boot every time but if the

305
00:25:21,309 --> 00:25:22,389
admin logs in

306
00:25:22,389 --> 00:25:26,199
he's gonna look at it and it says shared
secret Astrix and Astrix and Astrix it's

307
00:25:26,200 --> 00:25:31,600
not you know as obvious as as mount this
red circuit but she'll

308
00:25:32,220 --> 00:25:38,039
so I mean there's potential here that
you could use a vulnerable version say

309
00:25:38,039 --> 00:25:45,419
this 9.21 actual firmware so then you
know launched a boot kid on newer

310
00:25:45,419 --> 00:25:50,190
versions of of hardware because I mean
if you look at things like drm with like

311
00:25:50,190 --> 00:25:59,070
a Playstation or Xbox where they had
like one bug and it's like one bug can

312
00:25:59,070 --> 00:26:05,010
essentially just do under the whole work
of a trusted boot sequence so maybe it

313
00:26:05,010 --> 00:26:07,320
could be used here I don't know

314
00:26:07,320 --> 00:26:12,120
so this is a little demo of the
jailbreak and neck out listening there

315
00:26:12,120 --> 00:26:18,870
again we type in our shared secret thing
and suddenly we get a nice little shell

316
00:26:18,870 --> 00:26:25,469
and you know you can see the version
there of of linux not too much else

317
00:26:26,220 --> 00:26:29,220
so that's basically our jailbreak

318
00:26:30,210 --> 00:26:38,520
so this is giving us you know I access
to the linux shell without a reboot and

319
00:26:38,520 --> 00:26:42,960
we've also had a look at how we could do
you know a persistent brew kids with you

320
00:26:42,960 --> 00:26:50,039
know reverse shell access so that gives
us our first little entry but we need

321
00:26:50,039 --> 00:26:55,500
some sort of way of getting our route
kid or or malicious firmware onto the

322
00:26:55,500 --> 00:26:58,980
device and we could do that either by
you know you have a malicious

323
00:26:58,980 --> 00:27:03,000
administrator captured credentials and
you know someone already on the network

324
00:27:03,659 --> 00:27:07,590
you could have supply chain into
addiction which I had to look up

325
00:27:07,590 --> 00:27:12,240
apparently it's a military term for
interception of you know parcels and

326
00:27:12,240 --> 00:27:18,210
basically loading malicious stuff from
where specifically i guess all we could

327
00:27:18,210 --> 00:27:25,260
have a remote exploit so this is also
from the Edward Snowden leaks and the

328
00:27:25,260 --> 00:27:30,510
the Spiegel article this is some NSA
employees basically a shipping center

329
00:27:30,510 --> 00:27:34,860
when they would load on their malicious
firmware onto the cisco equipment and

330
00:27:34,860 --> 00:27:40,080
then send it off so i don't have those
kinds of capabilities but maybe we can

331
00:27:40,080 --> 00:27:42,889
find a remote exploit instead

332
00:27:42,890 --> 00:27:46,880
so there's going to be two candidates
for remote exploit i'm going to be an

333
00:27:46,880 --> 00:27:51,830
application protocol inspection or
within services that the NSA runs and

334
00:27:51,830 --> 00:27:55,280
the reason for this is because if you
look at the evolution of flowers over

335
00:27:55,280 --> 00:28:00,470
time they're actually starting to become
more exposed to user input because

336
00:28:00,470 --> 00:28:05,060
they're running things like application
protocol awareness you know even things

337
00:28:05,060 --> 00:28:10,850
like ideas IDP which are trying to
analyze essentially traffic which is

338
00:28:10,850 --> 00:28:17,449
defined by the end-users it could be
malicious and so we've moved on from the

339
00:28:17,450 --> 00:28:20,630
old days where you know the firewall
just looked at source IP destination IP

340
00:28:20,630 --> 00:28:26,150
and destination port so if we look at
the protocol inspection Cisco's had a

341
00:28:26,150 --> 00:28:32,000
pretty shaky history all the stuff in
red is memory corruption in particle

342
00:28:32,000 --> 00:28:36,140
inspection bugs usually resulting in
denial of service attacks and it looks

343
00:28:36,140 --> 00:28:42,020
like pretty much every application layer
that they've tried to analyze has had

344
00:28:42,020 --> 00:28:48,710
some sort of CBE and these are mostly
denial-of-service attacks and and not

345
00:28:48,710 --> 00:28:53,990
exploitable so one of them which looked
like it was not a sort of heat based

346
00:28:53,990 --> 00:28:59,450
overflow but are a stack-based overflow
was this one sort of caught my eye and

347
00:28:59,450 --> 00:29:07,610
it was an analytic unauthenticated
remote stack overflow in the RPC

348
00:29:07,610 --> 00:29:13,879
microsoft RPC inspection so we know that
is alarms disabled because we can tell

349
00:29:13,880 --> 00:29:18,020
that from Hell shell access that we've
got and from the shell access we can

350
00:29:18,020 --> 00:29:22,550
actually see how to start Lena are
waiting for debugger to attach so we can

351
00:29:22,550 --> 00:29:27,500
get a pretty good look at the inner
workings of the essay so I started

352
00:29:27,500 --> 00:29:32,990
looking at this particular bug it was an
old bug arm i didn't find it i think is

353
00:29:32,990 --> 00:29:37,580
found in 2012 but they didn't give any
information they just said you know it's

354
00:29:37,580 --> 00:29:41,030
in the TC prpc inspection and that was
it

355
00:29:41,030 --> 00:29:46,100
so I did a little sort of digging around
and I follows a little and it turned out

356
00:29:46,100 --> 00:29:47,280
that

357
00:29:47,280 --> 00:29:51,870
a packet which was in the remote create
instance response would cause a buffer

358
00:29:51,870 --> 00:29:56,699
overflow so i got this nice sort of
override of registers and VIP right

359
00:29:56,700 --> 00:29:59,340
there is you know looking great

360
00:29:59,340 --> 00:30:04,290
unfortunately if you look at the
wireshark thing up the top you can see

361
00:30:04,290 --> 00:30:09,780
that what it's overflowing with is like
a new IP address which is 99 . 9999 dr.

362
00:30:09,780 --> 00:30:18,180
00000 and so 30 is ascii 40 it meant
that I was stuck with you know only

363
00:30:18,180 --> 00:30:26,280
being able to use valid ir ascii numbers
or the . which makeup IP addressing in

364
00:30:26,280 --> 00:30:33,450
string.format to you know overwrite the
address so I mean maybe someone could

365
00:30:33,450 --> 00:30:37,470
look into it and see if there's like a
partial override or you know rock

366
00:30:37,470 --> 00:30:39,300
opportunity but for me

367
00:30:39,300 --> 00:30:45,540
our cycle things you know almost
impossible i'm going to move on so my

368
00:30:45,540 --> 00:30:51,210
next port of call was to look for
something a bit fresher and something

369
00:30:51,210 --> 00:30:55,620
that was in maybe the webvpn portal so
the web VPN portal you can see he's had

370
00:30:55,620 --> 00:31:01,530
a bunch of bugs over recent times it's
basically an access method like a portal

371
00:31:01,530 --> 00:31:05,760
based access method to your internal
network why your cisco SI but what it

372
00:31:05,760 --> 00:31:09,210
means is that means that you have to
have a web server running on your

373
00:31:09,210 --> 00:31:14,730
firewall which is you know probably not
what you know firewalls were originally

374
00:31:14,730 --> 00:31:20,070
designed for but anyway it's got the NSA
has to web services

375
00:31:20,070 --> 00:31:24,929
it's got one for that gooey program
which is the asdm GUI for configuration

376
00:31:24,930 --> 00:31:27,690
but i'm going to assume that we don't
have any access to that because

377
00:31:27,690 --> 00:31:31,830
obviously the first thing admin does is
it locks down his you know management

378
00:31:31,830 --> 00:31:35,639
software the management interface for
the management network but we would have

379
00:31:35,640 --> 00:31:40,650
access to the web BPM portal / any
connect gateway services because they

380
00:31:40,650 --> 00:31:45,690
are exposed to the internet so this is
what the web portal kind of looks like

381
00:31:45,690 --> 00:31:51,600
from the outside then on the inside you
can go there and you can basically login

382
00:31:51,600 --> 00:31:55,379
and you can access internal web
resources you can launch like little

383
00:31:55,380 --> 00:32:00,010
java programs that will give you access
to terminal services or ssh sessions

384
00:32:00,010 --> 00:32:04,210
so there's a lot of server-side
programming going on to support a

385
00:32:04,210 --> 00:32:08,890
webservice like that so we did just
simply just do strings on the Lena

386
00:32:08,890 --> 00:32:12,700
binary you'll see that there's 86
plaintext Lewis scripts that are

387
00:32:12,700 --> 00:32:18,430
providing the backend server side
functionality so I had a look at some of

388
00:32:18,430 --> 00:32:23,260
these Lewis groups and one that sort of
stuck out was this one that said

389
00:32:23,260 --> 00:32:27,220
checking ASTM session so it's basically
checking whether or not a cookie is

390
00:32:27,220 --> 00:32:31,960
valid and all its doing is it gets to
the bottom here and it goes all right i

391
00:32:31,960 --> 00:32:36,790
want to see if i can open this file to
see if this file exists and it's the

392
00:32:36,790 --> 00:32:40,330
file has to live in a directory called
asdm and then I'll just basically have a

393
00:32:40,330 --> 00:32:45,850
long string which is you know a random
sort of cookie so if that file exists

394
00:32:45,850 --> 00:32:49,689
then the recession is validated so this
looks like it's a perfect opportunity

395
00:32:49,690 --> 00:32:54,580
for a little directory traversal and I
just give it a file that exists across

396
00:32:54,580 --> 00:32:58,600
all versions so this is like a Russian
translation file that i'm giving it

397
00:32:58,600 --> 00:33:02,740
their in the white so we just check
whether or not that file exists and it

398
00:33:02,740 --> 00:33:08,830
always exist and we bypass that the the
session check from my car that looks

399
00:33:08,830 --> 00:33:09,760
that looks great

400
00:33:09,760 --> 00:33:13,900
um where is this being used and it turns
out it's being used by the webvpn

401
00:33:13,900 --> 00:33:17,950
customization editor so the webvpn
customization that allows you to

402
00:33:17,950 --> 00:33:21,520
customize your web DM portal to change
it from the default one that looks like

403
00:33:21,520 --> 00:33:27,790
that too maybe something that looks more
like your company like this so to do

404
00:33:27,790 --> 00:33:31,450
this you need to go into the asdm gooey
and you baby

405
00:33:31,450 --> 00:33:37,810
well obviously I'm as the admin I go in
to the SDM gooey and I basically change

406
00:33:37,810 --> 00:33:42,820
my pictures and my fonts and my techs
and I press the preview button now the

407
00:33:42,820 --> 00:33:46,149
preview button is very important because
it actually creates that asdm directory

408
00:33:46,150 --> 00:33:50,500
that we need to traverse from so
essentially the bug doesn't exist until

409
00:33:50,500 --> 00:33:55,300
a preview has been run so I mean
although there's a lot of vulnerable

410
00:33:55,300 --> 00:33:59,649
versions out on the internet because
that use the admin has not run a preview

411
00:33:59,650 --> 00:34:02,650
then they're pretty much safe

412
00:34:03,710 --> 00:34:08,839
so what's interesting is that I can
actually generate a preview of my own

413
00:34:08,839 --> 00:34:14,389
content by using our the bug fly the
internet facing interface not the asdm

414
00:34:14,389 --> 00:34:19,609
sort of management interface so from the
internet I can essentially do a big post

415
00:34:19,609 --> 00:34:26,270
of all the stuff that I want to see
previewed arm and and then basically see

416
00:34:26,270 --> 00:34:34,849
what that preview looks like so what's
interesting is that the bug allows us to

417
00:34:34,849 --> 00:34:39,530
save that preview as well so there's a
there's another URL that basically goes

418
00:34:39,530 --> 00:34:43,700
and says alright I like that preview
that you've just submitted now save it

419
00:34:43,699 --> 00:34:48,859
so this could all can be done by the
your internet facing blood service so we

420
00:34:48,859 --> 00:34:53,779
can actually customize our own preview
preview it and then we can save it so we

421
00:34:53,780 --> 00:34:59,570
can customize the web portal to you know
dish up some malware arm whatever you

422
00:34:59,570 --> 00:35:04,640
like our but what I'm gonna do is I'm
gonna essentially change the the form

423
00:35:04,640 --> 00:35:10,310
action of the HD the HTML form action so
it's gonna post the credentials to to my

424
00:35:10,310 --> 00:35:14,779
service and not to the essay itself and
then once it uses logged in because we

425
00:35:14,780 --> 00:35:18,980
can customize not only the login page
but the internal portal going to have a

426
00:35:18,980 --> 00:35:22,190
little job javascript cross-site
scripting to take their session cookie

427
00:35:22,190 --> 00:35:27,320
so I wrote a medicine . module for this
because it is it's kind of tricky

428
00:35:27,320 --> 00:35:31,400
because you actually need to scrape down
all the current content because your

429
00:35:31,400 --> 00:35:36,140
previous going to overwrite the what the
current login looks like you need to

430
00:35:36,140 --> 00:35:40,848
scrape it all down so that you can write
it back so that's what the first step is

431
00:35:40,849 --> 00:35:44,599
then we request the preview and then of
course we save the preview and then we

432
00:35:44,599 --> 00:35:50,930
just sit back and wait for our users to
login and we grab their credentials and

433
00:35:50,930 --> 00:35:56,060
last of all in my demo here is what i'm
going to do is I'm going to start an ssl

434
00:35:56,060 --> 00:36:01,220
tunnel using the captured credentials so
not only is where are the essay provide

435
00:36:01,220 --> 00:36:03,740
like this web portal based VPN thing

436
00:36:03,740 --> 00:36:09,020
it also has a traditional SL
client-based tunneling of

437
00:36:09,020 --> 00:36:13,490
capability so what's interesting as well
as a customization that we're going to

438
00:36:13,490 --> 00:36:20,089
save gets hidden in a part of flash that
even if the admin you know reboots or

439
00:36:20,090 --> 00:36:26,900
upgrades the firmware does factory
research arm i think factory reset may

440
00:36:26,900 --> 00:36:31,880
get rid of it i'm not sure but yeah if
he upgrades it or reboot that it's still

441
00:36:31,880 --> 00:36:36,080
going to be there so this is what we're
going to do is essentially we're going

442
00:36:36,080 --> 00:36:41,120
to rewrite that form submission action
so it's going to send the credentials to

443
00:36:41,120 --> 00:36:52,940
10 . 636 at six so this is the demo of
the Metasploit module so here is gone

444
00:36:52,940 --> 00:36:58,070
and scrape the the concept of the
current settings and then it's gone and

445
00:36:58,070 --> 00:37:02,210
it saved it it's check to see that it's
actually being successful and now it's

446
00:37:02,210 --> 00:37:07,790
just going to sit there and it's gonna
wait for a user login so along comes the

447
00:37:07,790 --> 00:37:16,610
user toad and he's gonna login with
password toad 123 press the login button

448
00:37:16,610 --> 00:37:23,810
and sure enough metasploit has caught
those credentials and we've also got his

449
00:37:23,810 --> 00:37:27,470
session cookie so we're gonna use his
session cooking now

450
00:37:28,220 --> 00:37:31,970
so basically i use the open-source
version of the anyconnect clients or

451
00:37:31,970 --> 00:37:37,700
anyconnect is the cisco ssl VPN client
so we're going to use the open-source

452
00:37:37,700 --> 00:37:42,259
version open connect using the cookie
credential so even if they did have like

453
00:37:42,260 --> 00:37:45,950
a one-time security pass something on
the login because we're going to use

454
00:37:45,950 --> 00:37:49,939
their cookie credentials to log into the
VPN we should be fine

455
00:37:49,940 --> 00:37:57,170
so sure enough we've now established a
VPN to the essay and we've got like a

456
00:37:57,170 --> 00:38:03,290
tunnel interface there on on linux to
then explore further into the network so

457
00:38:03,290 --> 00:38:05,810
this brings us to the next step

458
00:38:05,810 --> 00:38:11,029
this is what we've we've done however
we've actually got access now through

459
00:38:11,030 --> 00:38:15,200
the essay device we don't have access to
the a-si device so we're just basically

460
00:38:15,200 --> 00:38:16,430
got towed

461
00:38:16,430 --> 00:38:20,089
username toad password toad 123 and he
can log in and he

462
00:38:20,090 --> 00:38:23,600
maybe access resources internally in the
network but he of course doesn't have

463
00:38:23,600 --> 00:38:29,000
access to the management services of the
essay itself and if we started probing

464
00:38:29,000 --> 00:38:34,520
the network are as toad we might run
into like a tiered firewall or the IPS

465
00:38:34,520 --> 00:38:40,250
my trip up arm and you know we might get
blocked so what we need to do is we

466
00:38:40,250 --> 00:38:45,020
still need to compromise that sa so we
can understand the expected behavior on

467
00:38:45,020 --> 00:38:49,070
the network so we can blend in so that
brings us for the next step we want to

468
00:38:49,070 --> 00:38:53,510
you know compromise the actual device
but before we do that we look at a

469
00:38:53,510 --> 00:38:58,130
little reconnaissance of phase another
little bug that i found which basically

470
00:38:58,130 --> 00:38:59,690
returns

471
00:38:59,690 --> 00:39:03,320
spits out the firmware image of the
firmware version that's running on my

472
00:39:03,320 --> 00:39:08,330
essay so I wrote a little and that
script little basically going and scan

473
00:39:08,330 --> 00:39:12,350
and tell you the version of a say that's
running because it basically just like

474
00:39:12,350 --> 00:39:18,500
sit out of that URL that was on the
previous slide so here I am I fictitious

475
00:39:18,500 --> 00:39:23,990
you know bowser in mario land i can see
that I've got two adjacent that I piece

476
00:39:23,990 --> 00:39:30,410
but it's a SAS running the same version
so i'm going to assume that this is like

477
00:39:30,410 --> 00:39:34,279
a typical enterprise configuration where
you have a redundant pair so I was

478
00:39:34,280 --> 00:39:37,850
thinking well maybe you know I can't
send traffic through the essay itself

479
00:39:37,850 --> 00:39:42,410
because you know I'm just towed but
maybe I could send traffic through the

480
00:39:42,410 --> 00:39:49,339
essay to the other aasa so that was my
theory and it kind of looks like this we

481
00:39:49,340 --> 00:39:49,970
can

482
00:39:49,970 --> 00:39:54,350
turns out we can actually send these
packets that terminate sort of a primary

483
00:39:54,350 --> 00:40:00,830
or the active is a and then we can
reverse the the the failover link and we

484
00:40:00,830 --> 00:40:05,840
can get our packets to reach the stand
is a but we can't logon we can't reach

485
00:40:05,840 --> 00:40:12,440
sort of the the ssh services or admin
services but we can do is we can have a

486
00:40:12,440 --> 00:40:16,670
look at what's expected to see to live
on that failover link and it turns out

487
00:40:16,670 --> 00:40:21,140
you got these three protocols they're
all proprietary protocols as no RFC's or

488
00:40:21,140 --> 00:40:26,390
anything for these got protocol a which
maintains state between the firewalls

489
00:40:26,390 --> 00:40:29,990
nothing in all this would be really good
if I can you know inject some of these

490
00:40:29,990 --> 00:40:32,990
protocol eight packets then be able to
write stay

491
00:40:32,990 --> 00:40:37,220
into the firewalls and then basically
bypass any firewall rules

492
00:40:37,220 --> 00:40:42,560
maybe get admin access onto the device
but that wasn't the case but it turned

493
00:40:42,560 --> 00:40:47,990
out that i can actually send these
protocol 15 packets and protocol 15 does

494
00:40:47,990 --> 00:40:52,939
synchronization of conflict between the
two devices and it also allows you to do

495
00:40:52,940 --> 00:40:57,470
this command replication so basically
when you talk to our command on one is a

496
00:40:57,470 --> 00:41:03,560
replicated across the other is a so um
yeah so this is what we what we need to

497
00:41:03,560 --> 00:41:09,380
do to to get that command to run on the
second is a we do failover exact standby

498
00:41:09,380 --> 00:41:13,369
because where we want to execute this
command on the standby version of

499
00:41:13,369 --> 00:41:18,350
standby firewall show version so this
will print out the show version output

500
00:41:18,350 --> 00:41:22,430
and run that command on the standby from
active firewall and we can actually do

501
00:41:22,430 --> 00:41:25,129
this in the reverse so if we can you
know

502
00:41:25,130 --> 00:41:29,810
login to the second essay we can you
know execute commands on to the active

503
00:41:29,810 --> 00:41:35,180
fire our essay and we'll get you know
that output as well so the packet format

504
00:41:35,180 --> 00:41:41,810
that does this is really quite simple
and you can see in the yellow down the

505
00:41:41,810 --> 00:41:45,980
bottom there that's the show's over
command arm there's no you know

506
00:41:45,980 --> 00:41:51,560
authentication built into these packets
there's no real sequence numbers there's

507
00:41:51,560 --> 00:41:55,520
one there but it's it you know you can
just replay these packets and no don't

508
00:41:55,520 --> 00:41:57,170
run the same command over and over

509
00:41:57,170 --> 00:42:05,270
now you can secure the fell over link
but it turns out that it basically is

510
00:42:05,270 --> 00:42:09,080
ignored if you use the cisco recommended
way of securing the link which is

511
00:42:09,080 --> 00:42:15,770
basically to set up a tiny little ipsec
tunnel between the two ASA's when we

512
00:42:15,770 --> 00:42:20,990
send our packets are customized packets
to suddenly start executing commands the

513
00:42:20,990 --> 00:42:25,700
cisco is able treat the packets that
it's received as if it already decrypted

514
00:42:25,700 --> 00:42:32,089
them so we descend plane tix text
pockets and it will just accept them arm

515
00:42:32,090 --> 00:42:37,280
of note is that there's no logging
enabled on the standby firewall say we

516
00:42:37,280 --> 00:42:41,270
got all that logging turned on active
firewall so we've got you know SNMP

517
00:42:41,270 --> 00:42:42,609
traps or

518
00:42:42,609 --> 00:42:47,739
or or syslog going after the same on the
stand by and by default

519
00:42:48,489 --> 00:42:52,119
there's no logging enabled so it means
that you know if we can start

520
00:42:52,119 --> 00:42:57,400
configuring the second essay we're not
going to generate any logs so he's like

521
00:42:57,400 --> 00:43:03,460
a little demo of me sending some of
these 105 protocol packets and what

522
00:43:03,460 --> 00:43:06,849
we're going to do is we're gonna
download a copy of the running conflict

523
00:43:06,849 --> 00:43:09,880
remember the same what we want to do is
we want to understand the network that

524
00:43:09,880 --> 00:43:13,720
the fire was protecting to do that we
need to download a copy of the current

525
00:43:13,720 --> 00:43:17,799
configuration then what we're going to
do is we're gonna upload our own

526
00:43:17,799 --> 00:43:23,440
configuration arm and that that upload
is going to have our new user called

527
00:43:23,440 --> 00:43:28,599
Mario in it and we're going to add our
our IP address as a trusted IP address

528
00:43:28,599 --> 00:43:35,049
so we can actually ssh internet standby
firewall from the internet and then

529
00:43:35,049 --> 00:43:39,038
we're gonna log in and we're going to
use that failover exec active command so

530
00:43:39,039 --> 00:43:43,059
then basically run a command on the
active firewall so this is what this

531
00:43:43,059 --> 00:43:49,690
looks like is a my scampi script and
this first command is going to copy the

532
00:43:49,690 --> 00:43:54,430
running configuration to my evil tftp
server so my evil tftp server is tender

533
00:43:54,430 --> 00:43:55,660
666

534
00:43:55,660 --> 00:44:02,348
so you can see that that is now being
it's come down and now i'm going to

535
00:44:02,349 --> 00:44:07,180
create my conflict that I want to upload
so this conflict is quite simple just

536
00:44:07,180 --> 00:44:10,930
basically says create a user called
Mario password card highest privileges

537
00:44:10,930 --> 00:44:15,788
and add my IP address of 10 . 66 as a
trusted IP address on the outside

538
00:44:15,789 --> 00:44:22,900
interface so i can ssh session so now we
say alright copy from the tftp server

539
00:44:22,900 --> 00:44:28,720
into the running configuration this
conflict that I just made and so there

540
00:44:28,720 --> 00:44:32,140
was a before-and-after view thereof you
know whether or not my config was there

541
00:44:32,140 --> 00:44:33,788
and so after I've done that command

542
00:44:33,789 --> 00:44:40,180
sure enough my configuration is now in
the sand is a so I login to the stand is

543
00:44:40,180 --> 00:44:45,190
a i'm going to execute commands the
first one says show failover on you know

544
00:44:45,190 --> 00:44:50,920
my current login session which obviously
says that i'm on the secondary is a and

545
00:44:50,920 --> 00:44:52,059
then i'm going to do that

546
00:44:52,059 --> 00:44:53,690
failover exact active

547
00:44:53,690 --> 00:44:59,780
show failover include our include is
basically grab grab this and you can see

548
00:44:59,780 --> 00:45:03,890
there that I've now executed that
command on the primary or the active is

549
00:45:03,890 --> 00:45:12,109
a and so that brings us to the end of
that we've pretty much login and we have

550
00:45:12,110 --> 00:45:20,900
compromised both of the cisco ASA's from
essentially remote so what we want to do

551
00:45:20,900 --> 00:45:27,140
now is we want to start looking into
actually owning the network and what we

552
00:45:27,140 --> 00:45:30,890
want to do is we're going to use that
that conflict that we downloaded to

553
00:45:30,890 --> 00:45:36,500
understand the network and move into our
lateral phase of attack so like this

554
00:45:36,500 --> 00:45:40,640
slide that you saw before you know if we
started trying to probe the different

555
00:45:40,640 --> 00:45:45,980
network directly we're gonna get caught
out whereas if we look at the stolen

556
00:45:45,980 --> 00:45:51,710
access lists we can see that you know
what is supposed to turn up on the

557
00:45:51,710 --> 00:45:57,680
network so that these access-list look
like this visually basically anyone on

558
00:45:57,680 --> 00:46:01,640
the Internet can access the web servers
on web server ports anyone on the

559
00:46:01,640 --> 00:46:05,629
Internet can access the mail server on
the mail server ports

560
00:46:05,630 --> 00:46:10,340
likewise you know the web server can
access the DMV database server on the

561
00:46:10,340 --> 00:46:15,980
sequel . and our mail server will say is
exchanged and it needs access access to

562
00:46:15,980 --> 00:46:21,770
the active directory on active directory
Boyd's so what we want to do is we want

563
00:46:21,770 --> 00:46:25,610
to upload that rules that are going to
change your store's address to match

564
00:46:25,610 --> 00:46:29,690
what those flows are supposed to be and
this is like pivoting without us

565
00:46:29,690 --> 00:46:34,070
actually needing to compromise the mail
server for example we're just gonna cry

566
00:46:34,070 --> 00:46:36,740
mean if we had a thousand different
firewall rules in there we could create

567
00:46:36,740 --> 00:46:40,490
a thousand different rules and all our
traffic would be designed so that it

568
00:46:40,490 --> 00:46:45,229
would basically become what it is
supposed to look to be on the network so

569
00:46:45,230 --> 00:46:49,910
in this example if we wanted to get you
know to the to the DMV database server

570
00:46:49,910 --> 00:46:54,170
without that configuration we would
change your IP address to be that of the

571
00:46:54,170 --> 00:46:58,190
web server and likewise if we want to
get to that active directory server

572
00:46:58,190 --> 00:47:02,570
we're going to change our IP address to
be that of the mail server so here's a

573
00:47:02,570 --> 00:47:03,830
before and after

574
00:47:03,830 --> 00:47:08,720
and actually made like a little log
server program of the top here so this

575
00:47:08,720 --> 00:47:14,419
is a balance log server and it he is
basically going to look he's going to

576
00:47:14,420 --> 00:47:20,630
pop up when he sees something malicious
so you can see have run nmap are against

577
00:47:20,630 --> 00:47:27,980
are the active directory server and you
know our IP address is the one that

578
00:47:27,980 --> 00:47:32,630
we've been given from the ssl VPN and
balances going crazy doesn't it doesn't

579
00:47:32,630 --> 00:47:35,630
like it and you know everyone freaks out

580
00:47:36,470 --> 00:47:39,740
so instead what we're going to do is
we're going to create some config

581
00:47:39,740 --> 00:47:46,279
conflicts going to disable some logging
on the active KSA obviously it's not

582
00:47:46,280 --> 00:47:52,550
going to we don't have any access to
turn off logging on the internal SI but

583
00:47:52,550 --> 00:47:56,300
alright what we're doing here we're
creating out that rules and we're

584
00:47:56,300 --> 00:48:02,240
logging into the standby SI and we're
going copy from the tftp server into the

585
00:48:02,240 --> 00:48:06,109
running-config you know this conflict
that I've just made the the napkin pick

586
00:48:06,110 --> 00:48:13,010
up there so that's going to be now in
the active SI so now we're going to run

587
00:48:13,010 --> 00:48:18,560
out and map again and we run the end map
and you can see here we're now going

588
00:48:18,560 --> 00:48:24,680
through the DMZ internal firewall have
passed through the external up so they

589
00:48:24,680 --> 00:48:30,140
the firewall without any problems and we
can see that the services are open and

590
00:48:30,140 --> 00:48:34,160
balances in popup so everything looks
great because their IP address is no

591
00:48:34,160 --> 00:48:36,529
longer 192 168 101

592
00:48:36,530 --> 00:48:41,510
it's the expected our address of the
exchange out sorry get the exchange

593
00:48:41,510 --> 00:48:49,490
server so that's all looking pretty good
so it's looking good until our admin

594
00:48:49,490 --> 00:48:53,180
logs in and I admin says hi minute what
are these not rolls doing on our

595
00:48:53,180 --> 00:48:57,950
firewall so what we need to do is we
need to use that original jailbreak to

596
00:48:57,950 --> 00:49:05,509
get down to the shell multiply the Lena
process that we hide on that rules and I

597
00:49:05,510 --> 00:49:10,130
mean from frumpy trace and you know
manipulate manipulating the binary pro

598
00:49:10,130 --> 00:49:11,640
of other

599
00:49:11,640 --> 00:49:15,900
the in-memory Lena we could pretty much
change any function on the firewall but

600
00:49:15,900 --> 00:49:18,810
all I'm going to doing the
proof-of-concept basically hideout and

601
00:49:18,810 --> 00:49:24,420
that statements so we're getting really
Mario like here and we got bowser's

602
00:49:24,420 --> 00:49:29,280
castle up there and we want to access
the Active Directory server on port 666

603
00:49:29,280 --> 00:49:37,440
that's going to be out goal so we have
in the middle our admin view so this is

604
00:49:37,440 --> 00:49:44,010
saved on the console down the bottom
we've obviously got our Mario attack of

605
00:49:44,010 --> 00:49:48,780
you at the top we've got our bowels log
server running so first of all we're

606
00:49:48,780 --> 00:49:53,670
going to make that jailbreak config to
give us that reverse shell so this is of

607
00:49:53,670 --> 00:49:57,030
course the conflict that I've talked
about before the shared secret with the

608
00:49:57,030 --> 00:50:02,280
am stands that are going to run that and
then we're going to login to the standby

609
00:50:02,280 --> 00:50:12,960
firewall and we are going to think we're
going to copy up so Kat make it directly

610
00:50:12,960 --> 00:50:17,460
to store so cat in we're gonna put so
cat on onto our sort of hidden directory

611
00:50:17,460 --> 00:50:22,590
there i guess we're going to upload the
red so cat but she'll and then we're

612
00:50:22,590 --> 00:50:28,530
going to copy that configuration into
the running-config are actually sorry

613
00:50:28,530 --> 00:50:32,970
first of all we're going to upload this
program called cisco SI hide nuts so

614
00:50:32,970 --> 00:50:37,169
this is the ptrace our program that's
going to open up the running Lena

615
00:50:37,170 --> 00:50:44,850
process patching a couple spots and then
disappear so we upload that one

616
00:50:44,850 --> 00:50:50,640
and finally we upload our reverse your
config into the running config and that

617
00:50:50,640 --> 00:50:57,420
should pretty much automatically drop it
into a shell which it does and so from

618
00:50:57,420 --> 00:51:00,750
here we're running

619
00:51:00,750 --> 00:51:08,970
make sure that we're route we checked
the PID you can see Lena there is 1236

620
00:51:08,970 --> 00:51:15,240
ok admin view show run at shows us that
the Nats that are configured on the

621
00:51:15,240 --> 00:51:21,600
firewall obviously they're the dodgy
ones that we put in and then uh shown

622
00:51:21,600 --> 00:51:26,610
that as well as another function shows
sort of the active nuts so we go down to

623
00:51:26,610 --> 00:51:29,100
our attacker reverse shell we do

624
00:51:29,100 --> 00:51:33,420
cisco is a hide and hide and basically
just patches and this is like

625
00:51:33,420 --> 00:51:37,200
essentially like a hello world version
of sort of our introduction to Petrus

626
00:51:37,200 --> 00:51:41,730
all it's doing is just nothing out
little bits of memory to essentially not

627
00:51:41,730 --> 00:51:43,380
print out hide nuts

628
00:51:43,380 --> 00:51:47,460
I'm sorry to not print out than that so
if we go back to the admin window now

629
00:51:47,460 --> 00:52:00,180
and we do show run now obviously and
that's going on and we do shown that we

630
00:52:00,180 --> 00:52:06,210
can see that mario has hidden all the
nuts and last of all what we're going to

631
00:52:06,210 --> 00:52:13,050
do is we're going to do some amounts to
show you that essentially even though we

632
00:52:13,050 --> 00:52:15,000
don't have any Nats configured anymore

633
00:52:15,000 --> 00:52:19,290
the naps are actually still there so to
do that we're going to do some and maps

634
00:52:19,290 --> 00:52:24,390
and you can see that our IP address is
being translated no longer 192 168 it is

635
00:52:24,390 --> 00:52:31,109
the the address of the exchange server
and we can see that our arm

636
00:52:32,220 --> 00:52:36,209
we've got access to the active directory
server and we're just basically gonna

637
00:52:36,210 --> 00:52:42,300
reach out to the active directory server
on that part 6 which is our sort of end

638
00:52:42,300 --> 00:52:48,840
of the the talk port you can see that
our IP address is of course 10 . 5577

639
00:52:48,840 --> 00:52:51,840
which is the exchange server just press
a key

640
00:52:53,400 --> 00:53:00,030
oh and we get out princess from the
castle so that's pretty much it we've

641
00:53:00,030 --> 00:53:04,890
gone from you know pulling the firmware
image out of the device and analyzing it

642
00:53:04,890 --> 00:53:11,970
through to complete compromise i guess
and yeah that's how sort of final

643
00:53:11,970 --> 00:53:16,439
console in the conclusions i guess we
got to understand that you know even

644
00:53:16,440 --> 00:53:20,820
when you buy these devices on these
appliances from vendors they sell them

645
00:53:20,820 --> 00:53:26,340
as if their hardware special but really
they're just software and a very

646
00:53:26,340 --> 00:53:32,280
familiar software in a lot of cases like
you know juniper is freebsd based and

647
00:53:32,280 --> 00:53:39,150
checkpoint is usually running on linux
platform you know and you know the fact

648
00:53:39,150 --> 00:53:44,940
is that these things are very familiar
to security recently researchers and two

649
00:53:44,940 --> 00:53:50,670
attackers so you gotta understand that
you know your infrastructure is a target

650
00:53:50,670 --> 00:53:56,640
and you know the NSA sort of work into
implant show that it's you know it is

651
00:53:56,640 --> 00:54:01,290
the obvious place for for you to attack
because not only is your firewall

652
00:54:01,290 --> 00:54:05,580
usually exposed because it's sitting on
the edge of the network it's actually

653
00:54:05,580 --> 00:54:09,660
running a lot more services these days
and doing a lot more inspection and of

654
00:54:09,660 --> 00:54:13,980
course exposed to user input so I guess
you know if you look at the bugs that i

655
00:54:13,980 --> 00:54:19,200
presented here today there's nothing
really to technical like simple web bugs

656
00:54:19,200 --> 00:54:28,410
you know command injection are nothing
really that difficult makes you question

657
00:54:28,410 --> 00:54:32,430
whether or not you know these companies
that are tasked with securing other

658
00:54:32,430 --> 00:54:38,490
companies infrastructure are really you
know are offering the the highest

659
00:54:38,490 --> 00:54:43,620
standard that you would expect for the
money that you pay so i guess that's

660
00:54:43,620 --> 00:54:44,790
about it

661
00:54:44,790 --> 00:54:47,790
all right Thank You Alec Stewart

662
00:54:48,420 --> 00:54:59,880
you didn't say how much research sign
did you put into this uh I i really

663
00:54:59,880 --> 00:55:04,140
don't know I kind of lost track and my
wife would tell me everything you know

664
00:55:04,140 --> 00:55:08,279
what Dave reason you know what year you
started what date just arm i started

665
00:55:08,280 --> 00:55:17,610
maybe last year maybe around februari or
so-and-so rocks comes in October but you

666
00:55:17,610 --> 00:55:21,000
know I think I've been tinkering with
some other stuff and some older bugs in

667
00:55:21,000 --> 00:55:26,460
inversions that had been well since
patch arm so some of the original stuff

668
00:55:26,460 --> 00:55:30,300
that I wanted to do I just basically had
to throw it out the window because you

669
00:55:30,300 --> 00:55:34,140
know I mine from email just go about it
and they were like you know this got

670
00:55:34,140 --> 00:55:35,730
patched you know ten years ago

671
00:55:35,730 --> 00:55:40,380
well you know whenever so when I when I
did this I actually picked out the

672
00:55:40,380 --> 00:55:45,180
latest version of the time of the the
firmware and and started with that so

673
00:55:45,180 --> 00:55:49,169
pretty much everything was with fresh
but all the bugs super lite it's

674
00:55:49,170 --> 00:55:53,880
everything pache the ever everything is
patch apart from the potential malicious

675
00:55:53,880 --> 00:55:59,940
are firmware so as filing said sound on
the legacy from where they can't do

676
00:55:59,940 --> 00:56:02,820
anything to patch that because they
don't have any trusted boots sort of

677
00:56:02,820 --> 00:56:07,200
sequence right but did you say that they
have six the trusted boot thing or the

678
00:56:07,200 --> 00:56:10,049
other gentleman baby sorry they're
having the new hardware but are they

679
00:56:10,050 --> 00:56:13,620
changing the way they do the signing
stuff we're not the same those but they

680
00:56:13,620 --> 00:56:17,460
never did any signature verification in
the legacy hardware so even though they

681
00:56:17,460 --> 00:56:22,170
had some you know she'll five trolls or
any fires originally in the firmware it

682
00:56:22,170 --> 00:56:25,530
was just checking itself wasn't released
for it wasn't going to use like from a

683
00:56:25,530 --> 00:56:29,280
trusted source verifying it and that
means that you can downgrade any of the

684
00:56:29,280 --> 00:56:30,810
new hard work for the old thing

685
00:56:30,810 --> 00:56:35,970
ah well i'm thinking you know that that
bug where we do the shell escape

686
00:56:35,970 --> 00:56:40,020
I i think you know that's on a sign
version of firmware so you could

687
00:56:40,020 --> 00:56:44,130
potentially downgrade that but then you
would have to use that firmware image as

688
00:56:44,130 --> 00:56:49,530
a bootloader for building new firmware
if that makes any sense enough it still

689
00:56:49,530 --> 00:56:52,510
feels like Cisco still have a lot of
work to do too

690
00:56:52,510 --> 00:56:55,540
I'd like to think they're getting better
i haven't looked at any of the new

691
00:56:55,540 --> 00:57:00,910
hardware stuff on the fact that you know
they have put in some of security is a

692
00:57:00,910 --> 00:57:05,859
big big step for a bit shit shaky

693
00:57:06,520 --> 00:57:14,020
yeah well you have any questions from
the audience all the way down there all

694
00:57:14,020 --> 00:57:17,020
the way yeah it's gonna take awhile like
this one first

695
00:57:24,310 --> 00:57:29,890
mine's really really quick which is do
these devices also have a setting that

696
00:57:29,890 --> 00:57:34,930
you can do to basically override the
firmware projects and in partnership

697
00:57:34,930 --> 00:57:37,390
with something you can put into flash
around

698
00:57:37,390 --> 00:57:43,420
well in in the new devices you talking
about because I don't have access to the

699
00:57:43,420 --> 00:57:47,110
new device so i haven't actually looked
at out of i finally got my legacy

700
00:57:47,110 --> 00:57:48,220
hardware used to be

701
00:57:48,220 --> 00:57:51,430
cisco would always building something
where you could override it if it had a

702
00:57:51,430 --> 00:57:56,319
check right in case you have you had to
find your device and I i don't know i

703
00:57:56,320 --> 00:57:59,860
have to have to look at the new hardware
obviously in the legacy hardware it

704
00:57:59,860 --> 00:58:05,230
doesn't do any verification at boot time
so essentially all the protection was

705
00:58:05,230 --> 00:58:12,430
was checking whether or not those those
char one hashes that are embedded inside

706
00:58:12,430 --> 00:58:18,790
the file are valid post-transfer so
after you've uploaded it so obviously

707
00:58:18,790 --> 00:58:23,350
you can bypass that whole step by just
SE peeing and through the device and it

708
00:58:23,350 --> 00:58:26,860
doesn't do that and once it's on the
device malicious firmware is on the

709
00:58:26,860 --> 00:58:36,610
device it's it's always going to run its
there's no further checks you know so so

710
00:58:36,610 --> 00:58:40,750
on the new devices we have a SLR right

711
00:58:40,750 --> 00:58:51,310
lsr would that solve the hiding than
that thing on the new devices

712
00:58:51,310 --> 00:58:56,020
I mean I don't have access the new
devices but should in theory right well

713
00:58:56,020 --> 00:59:00,970
not really because I mean you've you've
still got local access to to it so I

714
00:59:00,970 --> 00:59:04,180
mean even if you just sort of grew up
the memory you and you could see where

715
00:59:04,180 --> 00:59:08,770
things are it's not like you get the
protection of SLR with with the remote

716
00:59:08,770 --> 00:59:11,800
exploit where you don't know where
things land but because you actually

717
00:59:11,800 --> 00:59:16,870
have access to the running image you can
just work out where where things are ok

718
00:59:16,870 --> 00:59:21,730
so as a sysadmin what can i do what
should I just switched to

719
00:59:21,730 --> 00:59:28,090
not obscure open w our team I mean or I
mean basically you got to start treating

720
00:59:28,090 --> 00:59:32,619
you your firewall devices in your
security devices as if you were you know

721
00:59:32,619 --> 00:59:35,890
locking down the server so you just
start disabling the services that you

722
00:59:35,890 --> 00:59:39,970
don't use its kind of strange because I
mean you know the flower always always

723
00:59:39,970 --> 00:59:44,140
meant to be like the transparent sort of
bump on the road that just block things

724
00:59:44,140 --> 00:59:47,950
and no one you was even there and
suddenly they're just doing all these

725
00:59:47,950 --> 00:59:54,129
new features and you know really getting
involved in you know the users traffic

726
00:59:54,130 --> 01:00:00,460
so I mean I don't know maybe just um
lock it down to what you need as if you

727
01:00:00,460 --> 01:00:03,880
are you know building up linux or
windows box

728
01:00:03,880 --> 01:00:09,310
thank you but the fire has such a nice
potential it because it's there

729
01:00:09,310 --> 01:00:13,000
exactly and it's sitting right on the
edge of the network there and it's got

730
01:00:13,000 --> 01:00:18,790
access to all the traffic that runs
through it hardware it software is there

731
01:00:18,790 --> 01:00:22,720
yeah it's good . user it ok so

