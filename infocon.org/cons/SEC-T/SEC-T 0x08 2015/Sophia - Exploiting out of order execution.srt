1
00:00:00,000 --> 00:00:08,290
alright so this past year from my
graduate research focused on how we can

2
00:00:08,290 --> 00:00:14,340
use optimizations which are inherent to
all modern processors exploit those to

3
00:00:14,340 --> 00:00:20,710
create and forced different execution
powers as well as I channels so

4
00:00:20,710 --> 00:00:25,170
beginning in the end of all this starts
in the cloud and everyone probably has a

5
00:00:25,170 --> 00:00:30,310
good idea of what the closer's virtual
instances are these operating systems

6
00:00:30,310 --> 00:00:35,350
and as represented by a black box
because if you don't have permission

7
00:00:35,350 --> 00:00:40,420
inside of them you should be able to see
what's going on so that users doing in

8
00:00:40,420 --> 00:00:45,680
the hypervisor is in control of giving
the resources up to each of those boxes

9
00:00:45,680 --> 00:00:52,019
and does this dynamically when it's this
dynamic allocation license for his

10
00:00:52,020 --> 00:01:02,530
ringing

11
00:01:02,530 --> 00:01:07,740
so it's just an Eric allocation which
reduces costs for everyone so everyone's

12
00:01:07,740 --> 00:01:14,020
happy but there's some problems inherent
with us the son of shared computing I'm

13
00:01:14,020 --> 00:01:17,048
first of leaders from Cydia Store
remotely you don't have control over

14
00:01:17,049 --> 00:01:21,869
who's holding at that hosts you're
storing it with my be honorable earn

15
00:01:21,869 --> 00:01:28,990
trust double was the case with the CIA
in the Amazon did some separate deal in

16
00:01:28,990 --> 00:01:31,630
the one that we're going to focus on
saturday is the fact that you're

17
00:01:31,630 --> 00:01:37,289
co-located hardware that thousands of
other processes are running on his wall

18
00:01:37,289 --> 00:01:44,390
and i've seen this unknown current as
the problem we're talking about because

19
00:01:44,390 --> 00:01:51,050
it's the physical collocation which can
lead to side channels going back to the

20
00:01:51,050 --> 00:01:55,539
cloud hardware structure at the bottom
of the stack you have the physical

21
00:01:55,539 --> 00:02:00,399
hardware such as physical resources are
finite and such as whatever the server

22
00:02:00,399 --> 00:02:06,610
house and a hypervisor takes into
account prices are up in serves up to

23
00:02:06,610 --> 00:02:12,150
each p.m. through virtual allocations
and that is what the operating system

24
00:02:12,150 --> 00:02:19,930
that we MCs and that changes over time
so universal vulnerability here is that

25
00:02:19,930 --> 00:02:24,980
there's this dynamic translation between
the physical virtual which occurs over

26
00:02:24,980 --> 00:02:32,858
time and this is both recordable as well
as well trouble because it's the stomach

27
00:02:32,859 --> 00:02:38,340
allocation which allows one to cause
contention for the same resources the

28
00:02:38,340 --> 00:02:39,100
other

29
00:02:39,100 --> 00:02:45,079
and that means that your private
vehicles activities aren't opaque

30
00:02:45,080 --> 00:02:49,120
other co-president so that means that I
can tell when you're using a lot of

31
00:02:49,120 --> 00:02:57,210
resource because I'm not allow as much
as I need so in general a slight chance

32
00:02:57,210 --> 00:03:02,520
checking cryptography is any attack
which is gained in the attack which

33
00:03:02,520 --> 00:03:07,100
information is gamed the recording of
the system the system surrounding the

34
00:03:07,100 --> 00:03:11,850
physical implementation of a crypto
library for hardware hardware side

35
00:03:11,850 --> 00:03:17,590
channels are pretty much the same
chaleff self is something that we're

36
00:03:17,590 --> 00:03:23,410
going to record information from the
system so we need to be able to make

37
00:03:23,410 --> 00:03:28,840
sure that we can record these artifacts
from the system as well as ultra them in

38
00:03:28,840 --> 00:03:35,010
a deterministic way and then that's
going to be our hardware side channel so

39
00:03:35,010 --> 00:03:39,540
it's just kind of a basic representation
of how their likes this may be one of

40
00:03:39,540 --> 00:03:44,870
the AM and the smoke and 1 p.m. is
forcing these artifacts in the hardware

41
00:03:44,870 --> 00:03:53,180
let's say a filled cash-filled cash line
and the other via AIM knows to record

42
00:03:53,180 --> 00:03:59,400
that same cache line court record the
amount of cash available to itself and

43
00:03:59,400 --> 00:04:07,140
recording these artifacts new system you
can transfer bits of meaning

44
00:04:07,140 --> 00:04:13,429
so there's exploits but you can kind of
map to the structure of forcing

45
00:04:13,430 --> 00:04:17,950
artifacts and recording them from the
system as a first is simple example

46
00:04:17,950 --> 00:04:24,050
where the transmitter doesn't know its
transmitting that someone that's

47
00:04:24,050 --> 00:04:28,430
encrypting something was a library or
someone who is just doing whatever

48
00:04:28,430 --> 00:04:32,640
activity they normally do and the
malicious remember the malicious

49
00:04:32,640 --> 00:04:37,740
attacker is receiving these artifacts
from the system so it's reading lines in

50
00:04:37,740 --> 00:04:44,470
cash or measuring changes in memory
allocation overtime and the phone you

51
00:04:44,470 --> 00:04:49,390
can actually use these simple techniques
to do things like steel crypto keys and

52
00:04:49,390 --> 00:04:51,450
things like that

53
00:04:51,450 --> 00:04:56,340
the fuck side if you're not trying to
actual trade or record from the system

54
00:04:56,340 --> 00:05:01,789
we are just forcing artifacts in the
system you can do something like

55
00:05:01,790 --> 00:05:07,790
allosaurus attack so you can have all
the resources and Amazon and other cloud

56
00:05:07,790 --> 00:05:14,660
systems the pretty good about minimizing
the effects of us really focused on

57
00:05:14,660 --> 00:05:21,040
trying to infiltrate or force artifacts
the system now this is the one that

58
00:05:21,040 --> 00:05:27,510
everyone probably the most common with
investors 12 Rams their colluding on the

59
00:05:27,510 --> 00:05:32,550
same hardware and one's forcing
artifacts in one's reading them and then

60
00:05:32,550 --> 00:05:38,030
vice versa and through this they can't
rampant between back and forth across

61
00:05:38,030 --> 00:05:44,570
the hardware or cross artifacts in the
cash and this is what people mostly

62
00:05:44,570 --> 00:05:50,560
consider communication or covert channel
across the hardware

63
00:05:50,560 --> 00:05:55,210
and that's how it would work if you want
to diagram so 1 p.m. another of her

64
00:05:55,210 --> 00:06:02,489
trailer court with their master
situation and a communication medium

65
00:06:02,490 --> 00:06:06,950
what they're actually communicating
through is that shared her so what are

66
00:06:06,950 --> 00:06:12,639
facts in the hard work and they force
deterministically that this master p.m.

67
00:06:12,639 --> 00:06:19,240
can record and in through that they have
some predetermined mapping of artifacts

68
00:06:19,240 --> 00:06:26,860
go to what thats or what is meaning and
they can commit so this is just a

69
00:06:26,860 --> 00:06:31,610
specific example came out two years ago
and it was a fashion retailer attack

70
00:06:31,610 --> 00:06:39,710
specifically targetting all three
Kashmir and 2 receiver to query the box

71
00:06:39,710 --> 00:06:45,260
first the adversary you flush the cast
and then after a specific set amount of

72
00:06:45,260 --> 00:06:53,000
time would query a specific line that
cash now to transmit the victim and it's

73
00:06:53,000 --> 00:06:56,430
a victory here because they don't know
they're transmitting they're just

74
00:06:56,430 --> 00:07:01,190
encrypting something with the private
key they access this line I'll free cash

75
00:07:01,190 --> 00:07:06,460
and they they access this line because
that's something they needed for that

76
00:07:06,460 --> 00:07:12,020
crypto library in through this these
researchers were able to leak the

77
00:07:12,020 --> 00:07:17,440
commune mpg private key of the victim if
you want to read more about that it's on

78
00:07:17,440 --> 00:07:21,310
my website

79
00:07:21,310 --> 00:07:26,900
art so specifically my research focused
on creating a similar type of attack but

80
00:07:26,900 --> 00:07:32,909
across a novel omen for the hardware so
cross the pipeline of the processor no

81
00:07:32,910 --> 00:07:37,850
benefits of doing this are that the Pope
on his book writer because the pipeline

82
00:07:37,850 --> 00:07:43,680
is constantly changing instructions are
going it's pretty quiet and sense that

83
00:07:43,680 --> 00:07:47,380
there's nobody to query the pipeline
without changing the state of the

84
00:07:47,380 --> 00:07:53,280
pipeline because you'd be running
instructions it's not affected by

85
00:07:53,280 --> 00:07:59,179
different things in cash and the noise
levels that we were able to record from

86
00:07:59,180 --> 00:08:07,220
an actual better than those found in
cash they chose actually doing this

87
00:08:07,220 --> 00:08:14,880
horribly targeting this virtual black
box of food processors pipeline only

88
00:08:14,880 --> 00:08:20,680
want you the same thing our goal is to
use the pipeline of the press to force

89
00:08:20,680 --> 00:08:24,890
artifacts in recorder defects that can
be determined

90
00:08:24,890 --> 00:08:32,400
deterministic from either of the two VMs
on the system and so what we need here

91
00:08:32,400 --> 00:08:38,630
is major hardware that's the cloud
everything shared we do know that our

92
00:08:38,630 --> 00:08:43,860
pipeline is being dynamically allocated
between two or more virtual machines so

93
00:08:43,860 --> 00:08:49,340
we have to know that two processes from
two different virtual machines can both

94
00:08:49,340 --> 00:08:54,030
have the chance of running on the same
pipeline and we need to know there are

95
00:08:54,030 --> 00:08:57,540
two processes are color coded so that
basically means that they're both

96
00:08:57,540 --> 00:09:03,300
running on the same physical pipeline
however we're going to assume this but

97
00:09:03,300 --> 00:09:08,479
there is research to determine location
there

98
00:09:08,480 --> 00:09:16,389
overturning the processor BP's pipeline
specifically and we need to know that we

99
00:09:16,389 --> 00:09:21,970
know that we need to be able to query
the pipeline so we need to be able to

100
00:09:21,970 --> 00:09:29,240
read some sort of artifacts thats
deterministic and deterministic and also

101
00:09:29,240 --> 00:09:35,000
force but all we have in the pipeline is
the instructions are running on it

102
00:09:35,000 --> 00:09:39,540
instruction set to be given to execute
so we're giving the pipeline a set of

103
00:09:39,540 --> 00:09:44,630
instructions from our process execute
these in this order and that's where

104
00:09:44,630 --> 00:09:49,589
processes alright so the computer knows
to execute those and we get whatever

105
00:09:49,589 --> 00:09:58,660
result back construction so that we can
have both control the instructions and

106
00:09:58,660 --> 00:10:03,000
the order of instructions given to the
pipeline and we know that we can record

107
00:10:03,000 --> 00:10:08,540
the results of that instruction set the
pipeline is back and so that's all we

108
00:10:08,540 --> 00:10:13,760
can really affect so we have those two
things so what we're going to target is

109
00:10:13,760 --> 00:10:18,579
out of order execution in this is the
artifact that we can record it and

110
00:10:18,579 --> 00:10:26,359
change the system it's gonna look like
we have a bunch of yams on the same

111
00:10:26,360 --> 00:10:31,360
system and they're all running processes
in these processes have the ability to

112
00:10:31,360 --> 00:10:38,300
share the same pipeline so maybe both
running on the same concert and the same

113
00:10:38,300 --> 00:10:46,420
core and this means Assam tea has to be
turned on obviously and this is an

114
00:10:46,420 --> 00:10:51,170
optimization that's inherent to most
modern processors

115
00:10:51,170 --> 00:10:56,149
and then the interesting thing here is
the fact that in the cloud and even on

116
00:10:56,149 --> 00:11:02,420
your own computer at the software level
there's promotions what processes

117
00:11:02,420 --> 00:11:08,079
connects us what do you know what lines
and memory etc but in the pipeline with

118
00:11:08,079 --> 00:11:13,310
the computers actually executing it
doesn't know what instructions came from

119
00:11:13,310 --> 00:11:18,699
what process executes them just execute
them and in some cases we are executing

120
00:11:18,699 --> 00:11:25,050
instructions from multiple processes
together in one pool its excuse all that

121
00:11:25,050 --> 00:11:30,060
they came from the same place right so
the processor has no way of mapping what

122
00:11:30,060 --> 00:11:35,018
instructions came from what I am and
what process specifically so it's kind

123
00:11:35,019 --> 00:11:41,370
of scary scary idea for a receiver so
how are we going through a court order

124
00:11:41,370 --> 00:11:47,290
executions from the processor we're
going to use something that you can find

125
00:11:47,290 --> 00:11:51,510
in the and your comment and tell manual
like every good presentation have to

126
00:11:51,510 --> 00:11:57,569
picture and how many all but this is
just its description of out of order

127
00:11:57,570 --> 00:12:03,760
execution it's saying that it can happen
this is allowed and for those of you

128
00:12:03,760 --> 00:12:12,180
unfamiliar executions basically won the
stores and loads to memory are reordered

129
00:12:12,180 --> 00:12:17,529
instead of storing something to memory
them loading it loads first and then

130
00:12:17,529 --> 00:12:24,170
stores of value to the same spot memory
so bit prettier of a picture

131
00:12:24,170 --> 00:12:30,120
in the case for you have two thirds of
the sink example of a store to memory

132
00:12:30,120 --> 00:12:36,000
and a load to memory is this so two
threads are both starring two different

133
00:12:36,000 --> 00:12:37,610
spots in memory

134
00:12:37,610 --> 00:12:42,610
votes voting from opposites but Murray
so you can see that with X's and Y's

135
00:12:42,610 --> 00:12:50,529
here now in this scenario r1 nurture you
are gonna be one and I think he sank and

136
00:12:50,529 --> 00:12:53,670
this is what would happen if you're
running loose on your computer this is

137
00:12:53,670 --> 00:12:55,199
most common

138
00:12:55,199 --> 00:12:59,219
the stores in those from one thread
actually happened or the other so that

139
00:12:59,220 --> 00:13:07,420
means 1001 and for the most part we
can't really use that to our benefit for

140
00:13:07,420 --> 00:13:14,819
anything but in the out of order example
in case the computer thinks that it's

141
00:13:14,820 --> 00:13:23,630
safe to load are one or two from memory
before any of the stores happen and that

142
00:13:23,630 --> 00:13:28,310
is the case we can get our one-hour
choose equal 0 and this is what we're

143
00:13:28,310 --> 00:13:32,279
going to record as are out of order
execution example that's going to be our

144
00:13:32,279 --> 00:13:38,760
artifacts which were recording in the
studio example thousands and thousands

145
00:13:38,760 --> 00:13:46,880
of times taking an average of of that in
specific time frames to get averaged

146
00:13:46,880 --> 00:13:53,470
pattern of executions over time and that
will tell us something about the system

147
00:13:53,470 --> 00:13:58,420
alright so we have a receiver we have
the ability to record from the hardware

148
00:13:58,420 --> 00:14:03,420
I we have to be able to transmit or
forests these out of order executions

149
00:14:03,420 --> 00:14:08,800
from occurring on the hardware so how we
gonna do that we're just going to use

150
00:14:08,800 --> 00:14:14,810
that I'm fans instruction memory for
answers a lot of your you're familiar

151
00:14:14,810 --> 00:14:19,750
with it but this is just a simple x86
instruction which is a fond memory

152
00:14:19,750 --> 00:14:25,810
barrier so it prevents memory return of
any kind and it basically is stopping

153
00:14:25,810 --> 00:14:31,930
the computer from optimizing downloads
from memories and stories from memory to

154
00:14:31,930 --> 00:14:38,800
memory so it's forcing those to be in
the correct order and this is how would

155
00:14:38,800 --> 00:14:45,099
look in the perfect example in the
pipeline so the store in loads and those

156
00:14:45,100 --> 00:14:49,870
are going to be basically forced to
happen the correct order so I always get

157
00:14:49,870 --> 00:14:58,510
that are one or two equals one example
and because of us are out of order

158
00:14:58,510 --> 00:15:03,939
execution averages will actually
decrease so we'll record and almost no

159
00:15:03,940 --> 00:15:10,390
executions in a specific time frame when
you're transplanting and so now we have

160
00:15:10,390 --> 00:15:18,240
the ability to force a decrease in the
average is about her execution

161
00:15:18,240 --> 00:15:24,170
never going to go into murine model in
summary of ordering happen

162
00:15:24,170 --> 00:15:28,930
accomplishment I'm and a run time
obviously what we're focusing on is the

163
00:15:28,930 --> 00:15:39,029
runtime memory ordering so that's our
situation and as we focus our system

164
00:15:39,029 --> 00:15:44,270
that were targeting as x86 so right here
usually strong however if you're running

165
00:15:44,270 --> 00:15:50,110
on something like and I found are an
Android which has a weaker memory model

166
00:15:50,110 --> 00:15:54,480
you'd actually get more out of order
executions you get a stronger channel

167
00:15:54,480 --> 00:15:58,149
however have insisted on the system

168
00:15:58,149 --> 00:16:06,180
alright just example of there actually
is for different types of memory of

169
00:16:06,180 --> 00:16:10,079
reordering barriers and the ones that
were gonna focus honor of store alone

170
00:16:10,080 --> 00:16:18,899
barriers so we want that store of 12
memory to happen before the load of 12

171
00:16:18,899 --> 00:16:27,310
alright so just to recap for
transmitting using memory barrier Assam

172
00:16:27,310 --> 00:16:32,810
tea is turned on in our system and
preventing the out of order execution

173
00:16:32,810 --> 00:16:39,869
case are 10 using them for instruction
to decrease the averages are executions

174
00:16:39,870 --> 00:16:46,510
alright so are you talk to us

175
00:16:46,510 --> 00:16:52,779
ok so specifically in the lab setup we
had we had risen hypervisor argues that

176
00:16:52,779 --> 00:16:57,150
because it is the most popular
commercial product

177
00:16:57,150 --> 00:17:02,490
and young processor specifically
obviously shared in a multiprocessor her

178
00:17:02,490 --> 00:17:07,319
we had it CPUs for cars

179
00:17:07,319 --> 00:17:14,050
virtual machines running Windows and
this is what it would look like in the

180
00:17:14,050 --> 00:17:24,030
70 specifically we had at VMworld into
acting as are some receiver sodium one

181
00:17:24,030 --> 00:17:29,730
was sending or forcing Artifex the
system forcing those inferences into the

182
00:17:29,730 --> 00:17:36,690
pipeline and the m2 was recording them
so that they were those two threads with

183
00:17:36,690 --> 00:17:45,080
the four different variables and reading
what values were loaded from memory I

184
00:17:45,080 --> 00:17:51,639
don't have time for it if you want to
follow along with my demo a lot of

185
00:17:51,640 --> 00:18:00,810
material is that my website / as seen by
the specific examples and receiver top i

186
00:18:00,810 --> 00:18:05,309
right

187
00:18:05,309 --> 00:18:14,668
so this is a design center environment
with our Windows boxes I just come in

188
00:18:14,669 --> 00:18:19,879
and specifically regarding one is is
going to be a receiver or recording from

189
00:18:19,879 --> 00:18:25,918
the system out of order executions with
two different threats and my scripts

190
00:18:25,919 --> 00:18:32,539
just accords eight different bytes in
this case I'm have them 20 because I

191
00:18:32,539 --> 00:18:36,639
want to account for system lies the
nothing's being sent

192
00:18:36,639 --> 00:18:45,049
euros that's great I also put it to a
graph if you want to use the service

193
00:18:45,049 --> 00:18:56,280
could I have my fans amazing

194
00:18:56,280 --> 00:19:03,740
and that's what it would look like in
graphic form and that's just me

195
00:19:03,740 --> 00:19:08,930
recording in different time frames and
taking the averages of executions and

196
00:19:08,930 --> 00:19:13,370
I've determined that all those values
are below my noise level meaning

197
00:19:13,370 --> 00:19:25,590
nothing's being sent and other vietnam
is this under my website and I just have

198
00:19:25,590 --> 00:19:34,879
it setup so you enter message wanna
stand in this case the example is in

199
00:19:34,880 --> 00:19:40,910
this case the examples that I'm maybe a
root canal and recounted one or just

200
00:19:40,910 --> 00:19:45,500
something listening for a message once I
get my trigger message across the

201
00:19:45,500 --> 00:19:51,640
hardware I'm going to launch an attack
and kill the box or something so it's

202
00:19:51,640 --> 00:19:56,080
kind of a contrived example but it's
just showing that message being received

203
00:19:56,080 --> 00:20:06,730
by my bets enforcing the more offenses
and I see those who there

204
00:20:06,730 --> 00:20:16,100
and text me like no and

205
00:20:16,100 --> 00:20:22,399
and kills the box so the best example I
could think of

206
00:20:22,400 --> 00:20:28,630
originally from my sister fans I had a
catcher my advice don't like that one

207
00:20:28,630 --> 00:20:37,830
too much change to anyway so to conclude
like any good at research we had a

208
00:20:37,830 --> 00:20:43,899
miscommunication techniques so protected
resource ownership you could isolate

209
00:20:43,900 --> 00:20:47,600
your VMs on their own hardware that's
always an option

210
00:20:47,600 --> 00:20:53,620
little expensive you wanna do that
required by its deficit you can always

211
00:20:53,620 --> 00:20:57,969
turn off hyper-threading other computer
optimization which will mean all your

212
00:20:57,970 --> 00:21:05,250
processes but you will be secure you can
also blacklist resources this is

213
00:21:05,250 --> 00:21:11,100
probably the most five or four real
mitigation technique in a few if you

214
00:21:11,100 --> 00:21:16,789
have two processes the hypervisor can
determine process one is from a

215
00:21:16,789 --> 00:21:21,370
different p.m. I will wait for it for
process to finish before long process

216
00:21:21,370 --> 00:21:27,580
one use that same share hardware or
something like that

217
00:21:27,580 --> 00:21:35,090
downside of first two is that you've
reduced benefits including discounted

218
00:21:35,090 --> 00:21:38,649
cash reached in this work is that just a
novel side channel I'm specifically

219
00:21:38,650 --> 00:21:43,630
using the pipeline which hasn't before
been used to create such files in the

220
00:21:43,630 --> 00:21:49,049
cloud and the cash seems to be the most
popular it is the most easy to reinforce

221
00:21:49,049 --> 00:21:55,370
artifacts from because it is static
memory but the pipeline is a lot harder

222
00:21:55,370 --> 00:22:00,320
cuz it is don't bet dynamic wearying
it's a black box really can't retrospect

223
00:22:00,320 --> 00:22:04,700
inside of an all you can really
determine as we put in and what you get

224
00:22:04,700 --> 00:22:06,090
out

225
00:22:06,090 --> 00:22:10,590
alright so I'd like to acknowledge our
journey blackthorn he works at MIT

226
00:22:10,590 --> 00:22:17,080
Lincoln labs but he got me into the
subject ICT teamsters RPO second trial

227
00:22:17,080 --> 00:22:26,299
of its work if there's any questions you
can reach me on IRC and then of course

228
00:22:26,299 --> 00:22:31,940
you can read or write up of what I just
talked about in the latest edition of

229
00:22:31,940 --> 00:22:49,110
GTFO any questions are actually stick
them after 12 months

230
00:22:49,110 --> 00:23:16,870
questions from the audience my research
is the only you might wanna talk I know

231
00:23:16,870 --> 00:23:23,340
about that uses the processors so
because I haven't I don't think I lost

232
00:23:23,340 --> 00:23:30,040
her tribe but I don't see any reason why
it wouldn't work or maybe a little

233
00:23:30,040 --> 00:23:38,409
trickier but as long as awesome to use
it would definitely work

