1
00:00:00,000 --> 00:00:08,910
so we technique interrupted oriented
programming this came from

2
00:00:08,910 --> 00:00:15,780
moonlights as an academic as an academic
you can't call it an exploit you have to

3
00:00:15,780 --> 00:00:20,759
cut oriented programming and they have
this whole distraction about trying

4
00:00:20,760 --> 00:00:24,980
completeness that we can thankfully skip
over because we get remote code

5
00:00:24,980 --> 00:00:29,980
execution and you can't argue with the
roots show you can't but just in case

6
00:00:29,980 --> 00:00:37,480
you're wondering where this interrupt
programming belongs where you know you

7
00:00:37,480 --> 00:00:42,610
mostly just craft data and send it to
targets and that's your exploit rate so

8
00:00:42,610 --> 00:00:49,530
first used to craft your shellcode right
executable shellcode than an axe and GB

9
00:00:49,530 --> 00:00:57,120
happened and then you have to craft you
are returned oriented fake check frames

10
00:00:57,120 --> 00:01:01,000
and that's your return oriented
programming which academia discovered

11
00:01:01,000 --> 00:01:06,580
seven or eight years after it was
actually published in fact that it was a

12
00:01:06,580 --> 00:01:14,979
full decade depends on how you count ok
but if you in the Harrah's backtrack

13
00:01:14,979 --> 00:01:23,740
post it was actually more like exactly
10 years and then are you have the SLR

14
00:01:23,740 --> 00:01:29,000
came into the picture in you have to
bring your own linker which contains an

15
00:01:29,000 --> 00:01:33,500
inferred leak in order to find that
address and then linked against it and

16
00:01:33,500 --> 00:01:40,290
this is europe UIL now that you could
send no date at two with to the target

17
00:01:40,290 --> 00:01:43,230
whatsoever right

18
00:01:43,230 --> 00:01:47,710
what could you send to the target that
would be our interrupt oriented

19
00:01:47,710 --> 00:01:51,649
programming which is of course a pun on
the return oriented programming now just

20
00:01:51,650 --> 00:01:59,640
to be clear we see that we're sending
node 82 the target we don't mean that we

21
00:01:59,640 --> 00:02:02,430
have no control of anything inside of
the target

22
00:02:02,430 --> 00:02:09,190
we're doing this as a bug or two we are
seeking a little bit of code in there

23
00:02:09,190 --> 00:02:17,520
but our initial case was heard of a
stack overflow exploit this is a

24
00:02:17,520 --> 00:02:24,160
stackoverflow dot com explain what we do
is we post effect tutorial for how to

25
00:02:24,160 --> 00:02:29,829
use interrupts on a microcontroller and
then we wait for people to use the bad

26
00:02:29,830 --> 00:02:36,520
advice in the tutorial and when you do
it this way you have no behavioral side

27
00:02:36,520 --> 00:02:46,030
effects so if you insert my bugged or
your chip will still work second it's in

28
00:02:46,030 --> 00:02:50,420
the most confusing part of the proper
way to write an interrupt for this

29
00:02:50,420 --> 00:02:56,780
platform so I can deny that I made a
mistake

30
00:02:56,780 --> 00:03:03,680
maliciously mistake and third this is
the thing that you are most likely to

31
00:03:03,680 --> 00:03:07,920
ask for help with when you're new to
this architecture and this is

32
00:03:07,920 --> 00:03:13,109
architecture specific were doing this
for the MSG 432 whatever experience you

33
00:03:13,110 --> 00:03:20,430
have on x86 or arm or PowerPC where nips
or spark is irrelevant here so even if

34
00:03:20,430 --> 00:03:24,050
you're really good you're still gonna
Google for the one piece that you don't

35
00:03:24,050 --> 00:03:29,800
yet know see that's the internet the
things that you know you never text

36
00:03:29,800 --> 00:03:37,700
before so it has to be small and second
you can send any data to the target what

37
00:03:37,700 --> 00:03:38,929
can you send to them

38
00:03:38,930 --> 00:03:44,799
why you can send interrupts to the
target right when you signed up to the

39
00:03:44,799 --> 00:03:50,030
target and just think of a signal sent
to the Google processor leg was

40
00:03:50,030 --> 00:03:54,549
procedurally those little buggers rate
with legs sticking out

41
00:03:54,549 --> 00:03:59,909
connect that line and send that they're
in it since the first executing code

42
00:03:59,909 --> 00:04:05,090
from somewhere so you're affecting its
state but you're not sending any data

43
00:04:05,090 --> 00:04:09,859
you're just sending the spouse your
entire program is a series of well-timed

44
00:04:09,859 --> 00:04:16,820
fossett's now you have some advantages
and urine when you're attacking a server

45
00:04:16,820 --> 00:04:22,560
its off in another country somewhere and
Lux data center somewhere and physical

46
00:04:22,560 --> 00:04:26,849
attacks always work against the server
but they're kind of irrelevant because

47
00:04:26,849 --> 00:04:29,930
you don't get to use them in the real
world when you're attacking a

48
00:04:29,930 --> 00:04:36,039
microcontroller you're in the opposite
position in that the victim is the

49
00:04:36,039 --> 00:04:42,270
manufacturer of thousands of devices the
attacker purchases three or four of them

50
00:04:42,270 --> 00:04:47,500
brings those to a private laboratory and
is able to stick needles into them is

51
00:04:47,500 --> 00:04:54,030
able to connect all sorts of fancy test
hardware has local physical access also

52
00:04:54,030 --> 00:04:59,080
when you're attacking popular software
lets do you wanna bug in Apache

53
00:04:59,080 --> 00:05:04,139
just download Apache and IIS well you
don't get the source code but you still

54
00:05:04,139 --> 00:05:08,150
get a binary and that's almost as good
if you're willing to be patient for a

55
00:05:08,150 --> 00:05:12,888
microcontroller you don't get a copy of
the firmware for free is no such thing

56
00:05:12,889 --> 00:05:17,460
as a free lunch here so what you have to
do is you have to rip it out of a locked

57
00:05:17,460 --> 00:05:25,039
device our back door is a for
instruction change to a common interrupt

58
00:05:25,039 --> 00:05:31,240
handler that combined with existing
natural pieces of the firmware allow you

59
00:05:31,240 --> 00:05:35,220
to elevate your privileges enter the
bootloader and then

60
00:05:35,220 --> 00:05:39,700
an excellent read a copy of the firmware
from the device with anything else in

61
00:05:39,700 --> 00:05:44,479
flash memory like keys or certificates
that sort of stuff so it's important to

62
00:05:44,480 --> 00:05:48,640
understand that you have physical access
you you actually got the chip and you

63
00:05:48,640 --> 00:05:49,409
may be good

64
00:05:49,410 --> 00:05:55,550
similar chips as well and you can mount
them but you can't do cap them and you

65
00:05:55,550 --> 00:06:02,740
can't stick my crew probes into them you
can run them at lower clock speed in

66
00:06:02,740 --> 00:06:06,310
case you're wondering what that hotel
logo is doing there that's where we came

67
00:06:06,310 --> 00:06:13,510
up with that that hotel in Amsterdam
there Rudy live so the basic idea is

68
00:06:13,510 --> 00:06:21,750
just as if you were writing annexed late
for a simple exploit the stack buffer

69
00:06:21,750 --> 00:06:25,810
overflow exploit its just called the
x-play but when you're doing a more

70
00:06:25,810 --> 00:06:31,250
complicated one or one that has to be
performed in stages he backs played you

71
00:06:31,250 --> 00:06:36,340
have different primitives a write
anything anywhere primitive is as good

72
00:06:36,340 --> 00:06:40,880
as it gets that lets you ever write any
object you like but some 90 less

73
00:06:40,880 --> 00:06:44,420
powerful ones they sometimes in writing

74
00:06:44,420 --> 00:06:48,750
he backs like you have a string
comparison this just a little bit off so

75
00:06:48,750 --> 00:06:55,190
all you're able to do is over right one
bite after the string with a zero it's a

76
00:06:55,190 --> 00:07:01,469
less useful primitive so we wanted to
reuse as many natural primitives as

77
00:07:01,470 --> 00:07:06,500
possible and then make these smallest
change that we could possibly do to

78
00:07:06,500 --> 00:07:12,300
backdoor the interaction and so the most
the simplest thing that you can do is

79
00:07:12,300 --> 00:07:15,950
you can enter an interrupt him in them

80
00:07:15,950 --> 00:07:22,810
interrupted again think of the gadgets
right that you use in returning and the

81
00:07:22,810 --> 00:07:29,430
program there you jump into the tale of
a function where you're not supposed to

82
00:07:29,430 --> 00:07:33,570
do that and then return back when the
return the way you're supposed to come

83
00:07:33,570 --> 00:07:36,719
back here if the exact opposite

84
00:07:36,720 --> 00:07:43,500
answer where you're supposed to enter
and then you can view it the instruction

85
00:07:43,500 --> 00:07:47,630
of your choosing and remember those are
microcontrollers their clocks can be

86
00:07:47,630 --> 00:07:48,659
slowed

87
00:07:48,660 --> 00:07:55,460
you just need to be able to know if
those interrupts and ensuring doing the

88
00:07:55,460 --> 00:08:02,200
same thing over already in the evening
it's a few structions later you get to

89
00:08:02,200 --> 00:08:08,070
accumulate some state in the processor
because i reset is not you know the

90
00:08:08,070 --> 00:08:16,050
beginning of a new life is just a jump
so this is how you do that this is our

91
00:08:16,050 --> 00:08:22,200
target hardware in there are other ways
to attack hardware of course so the JTAG

92
00:08:22,200 --> 00:08:24,170
pins are here at the top

93
00:08:24,170 --> 00:08:30,660
we're not going to use those will use
them for development but our index late

94
00:08:30,660 --> 00:08:35,450
has to be trigger Apple without access
to those because there's a fuse that can

95
00:08:35,450 --> 00:08:39,660
block that there is a great way to
bypass the fuse protection you just

96
00:08:39,659 --> 00:08:40,000
remove

97
00:08:40,000 --> 00:08:43,960
move the litter the chip with nitric
acid and hit with a camera flash four

98
00:08:43,960 --> 00:08:48,610
times but you can always rely on that
we're doing a different explained here

99
00:08:48,610 --> 00:08:54,380
there's two pins that you see just
beneath the model number that is the

100
00:08:54,380 --> 00:09:00,650
reset pin which is also known as the non
mask will interrupt when you hit this if

101
00:09:00,650 --> 00:09:05,140
the chip is done properly configured
instead of restarting the chip like it

102
00:09:05,140 --> 00:09:09,960
does a power-up it will instead call and
interrupt handler that has priority over

103
00:09:09,960 --> 00:09:14,010
everything else this is the one that
we're back during in order to control

104
00:09:14,010 --> 00:09:20,069
stacked up those two pins are your
program interface that's all you get to

105
00:09:20,070 --> 00:09:27,150
talk to the processor this is a 16 bit
RISC architecture because its risk every

106
00:09:27,150 --> 00:09:31,610
word on the stack is word aligned so
they all have 0 for the least

107
00:09:31,610 --> 00:09:38,560
significant bit of the address and just
like an x86 the stock rose downward now

108
00:09:38,560 --> 00:09:43,589
normally and interrupts cannot interrupt
itself but a lot of this is your

109
00:09:43,590 --> 00:09:48,990
responsibility as a programmer for
example when you receive a bite through

110
00:09:48,990 --> 00:09:53,230
their you are on this trip you have to
clear a flag that says that you read

111
00:09:53,230 --> 00:09:58,860
that bite and it's safe to load it with
another if you are you art handler takes

112
00:09:58,860 --> 00:10:03,140
too long you see report and it takes too
long you might actually miss bites

113
00:10:03,140 --> 00:10:06,780
because the machine can't load them into
the buffer faster

114
00:10:06,780 --> 00:10:11,410
where you clear these fags inside of the
interrupt matters a lot and it's

115
00:10:11,410 --> 00:10:14,930
implemented differently by different
chip manufacturers so Texas Instruments

116
00:10:14,930 --> 00:10:17,180
does it one way at valdez it another way

117
00:10:17,180 --> 00:10:24,609
picked as a third way and this is before
we get to the complexities of arm so

118
00:10:24,610 --> 00:10:30,209
our patch makes it so this interrupt
handler can interrupt itself and we do

119
00:10:30,209 --> 00:10:36,619
this by accidentally clearing the wrong
then to the way that this works is that

120
00:10:36,620 --> 00:10:42,130
the attacker now has a primitive that
can cause the stack to grow as deep as

121
00:10:42,130 --> 00:10:48,000
he likes you can grow at Downtown bites
you can grow it down 12 bouts you're

122
00:10:48,000 --> 00:10:54,170
still limited by the size grows by four
bytes every time you trigger it will

123
00:10:54,170 --> 00:11:00,300
combine it with another primitive in
order to control the alignment now this

124
00:11:00,300 --> 00:11:07,250
allows us to point down to the DSL DSL
is the Texas Instruments proprietary

125
00:11:07,250 --> 00:11:12,399
word for this serial bootstrap loader
this is a ride on the image that is one

126
00:11:12,399 --> 00:11:17,250
can debate that contains a bootloader
that you can program the chip over a

127
00:11:17,250 --> 00:11:22,089
serial port without needing a JTAG
debugger this thing is very handy it

128
00:11:22,089 --> 00:11:26,200
also has a couple of vulnerabilities one
of the Nifty as things about it is that

129
00:11:26,200 --> 00:11:31,010
it has two different entry points the
first entry point is called the hard

130
00:11:31,010 --> 00:11:37,370
entry point that you can always access
externally and it forces the chip into

131
00:11:37,370 --> 00:11:41,449
the bootloader by starting from there
instead of starting from the normal

132
00:11:41,449 --> 00:11:45,949
reset vector the second one is called
the soft entry point the soft entry

133
00:11:45,949 --> 00:11:50,910
point is not documented but it is used
by some Texas Instruments firmware and

134
00:11:50,910 --> 00:11:56,219
it's very easy to find it when you
reverse engineering the soft entry point

135
00:11:56,220 --> 00:12:01,949
does not change the register that
contains a flag specifying whether the

136
00:12:01,949 --> 00:12:06,540
password has been checked if you put a
one in to this register and you bounced

137
00:12:06,540 --> 00:12:09,899
through it gives you administrative
access the chip you can read anything

138
00:12:09,899 --> 00:12:12,190
you like so

139
00:12:12,190 --> 00:12:16,360
what we do is we use the staggering
primitive to just keep pushing the stock

140
00:12:16,360 --> 00:12:25,520
down until it's here inside of the wrong
when the stock is in ROM ROM is read

141
00:12:25,520 --> 00:12:28,470
only memory and this is a
microcontroller this doesn't have a

142
00:12:28,470 --> 00:12:34,650
fancy and so when you write the return
address onto the stack the right get

143
00:12:34,650 --> 00:12:41,930
silently ignored when you pop out value
back off the stack it's the existing

144
00:12:41,930 --> 00:12:48,300
word at that location that has read back
by pointing at the right spot in the

145
00:12:48,300 --> 00:12:54,780
bootloader on and then returning your
able to jump the program counter sue

146
00:12:54,780 --> 00:13:02,800
that the chip then begins executing code
from that address so we injected stop

147
00:13:02,800 --> 00:13:08,120
growing primitive

148
00:13:08,120 --> 00:13:14,589
rely on triggering this inside of
natural code when it is setting register

149
00:13:14,589 --> 00:13:18,130
eleven register eleven is a scratch
register every function does something

150
00:13:18,130 --> 00:13:22,570
differently with it we used the serial
port to talk to the existing firmware

151
00:13:22,570 --> 00:13:28,380
until a scratch variable has one bit set
this is on average about path of

152
00:13:28,380 --> 00:13:35,370
functions that have to local variables
and then we can bounce down and we can

153
00:13:35,370 --> 00:13:44,500
control the value of register eleven by
when we begin to runner explains we also

154
00:13:44,500 --> 00:13:51,370
control the stack alignment by a natural
interrupts they cannot interrupt itself

155
00:13:51,370 --> 00:13:56,100
that it has an extra local variables
this act is little bit larger and then

156
00:13:56,100 --> 00:14:02,400
thirdly control the stack depth by how
often we trigger are nested interrupts

157
00:14:02,400 --> 00:14:12,939
and then it's a trap and then we have
gotten the ship to execute its own ROM

158
00:14:12,940 --> 00:14:22,250
image as our payload without requiring
any external without requiring any

159
00:14:22,250 --> 00:14:27,990
changes to the firmware other than for
additional bytes we implemented just

160
00:14:27,990 --> 00:14:33,459
bugged or for an embedded operating
system called TinyOS 10 USC is often

161
00:14:33,459 --> 00:14:39,430
used by copy and pasting of commercial
products that have poured off of this it

162
00:14:39,430 --> 00:14:43,890
doesn't really have a colonel instead
you compile the source code together but

163
00:14:43,890 --> 00:14:49,500
they're really happy to accept catches
for a new devices so what you can do is

164
00:14:49,500 --> 00:14:54,580
you can make a driver for a new radio
chip and in that driver hide the back

165
00:14:54,580 --> 00:14:59,810
door in order to sneak into every user
of that embedded operating system who

166
00:14:59,810 --> 00:15:04,599
will inherit the vulnerability allowing
you to dump any of them

167
00:15:04,600 --> 00:15:12,500
these instructions it's it's really not
sophisticated what happens is one entry

168
00:15:12,500 --> 00:15:21,360
to the NMI the hardware reset a bit that
actually does not allow the interrupt

169
00:15:21,360 --> 00:15:27,209
him would you be interrupted we are
clearing that bit and the end result is

170
00:15:27,209 --> 00:15:34,819
that those two lines of C code or these
forwards of machine language are the

171
00:15:34,819 --> 00:15:40,500
only evidence of the back door and it's
something that you can with a perfectly

172
00:15:40,500 --> 00:15:45,940
straight phase and without anyone being
able to prove you wrong you could claim

173
00:15:45,940 --> 00:15:47,630
was an honest mistake

174
00:15:47,630 --> 00:15:51,449
unless they knew that you came to the
site so thank you kindly and have a good

175
00:15:51,449 --> 00:15:51,649
night

