1
00:00:03,280 --> 00:00:04,880
good morning everyone welcome to my

2
00:00:04,880 --> 00:00:06,720
presentation today i'm going to show you

3
00:00:06,720 --> 00:00:09,280
how you can secure your code like nasa

4
00:00:09,280 --> 00:00:11,360
like mathias said yesterday we have a

5
00:00:11,360 --> 00:00:13,679
talk on code qr from jonathan at one

6
00:00:13,679 --> 00:00:15,920
o'clock to two o'clock where he showed

7
00:00:15,920 --> 00:00:17,359
the perspective of the security

8
00:00:17,359 --> 00:00:18,640
researcher

9
00:00:18,640 --> 00:00:20,720
uh then we have the lightning talk from

10
00:00:20,720 --> 00:00:23,840
615 to 630 from mikhail

11
00:00:23,840 --> 00:00:27,840
showing uh how he uses code2l in his phd

12
00:00:27,840 --> 00:00:30,640
today i'm gonna show you what we believe

13
00:00:30,640 --> 00:00:34,160
at github the future is for software

14
00:00:34,160 --> 00:00:36,079
security i'm gonna show you a new

15
00:00:36,079 --> 00:00:38,399
methodology we developed called secure

16
00:00:38,399 --> 00:00:40,960
security as code and i'm gonna demo for

17
00:00:40,960 --> 00:00:45,440
20 minutes called ql on screen by coding

18
00:00:45,440 --> 00:00:47,680
so my goal after this presentation is

19
00:00:47,680 --> 00:00:50,000
for everybody to leave this room with

20
00:00:50,000 --> 00:00:52,160
the basics in mind

21
00:00:52,160 --> 00:00:54,000
and provide you with resources to get

22
00:00:54,000 --> 00:00:55,680
your journey started

23
00:00:55,680 --> 00:00:57,680
and like jonathan said yesterday

24
00:00:57,680 --> 00:01:00,160
whatever i'm showing is free for open

25
00:01:00,160 --> 00:01:01,840
source

26
00:01:01,840 --> 00:01:03,760
which is amazing

27
00:01:03,760 --> 00:01:06,479
a bit about me

28
00:01:06,880 --> 00:01:09,520
i'm part of the github security lab at

29
00:01:09,520 --> 00:01:13,920
github which is a security research team

30
00:01:13,920 --> 00:01:15,520
before that

31
00:01:15,520 --> 00:01:17,520
i started doing cyber security as a

32
00:01:17,520 --> 00:01:20,080
teenager so it's been like 10 years now

33
00:01:20,080 --> 00:01:21,920
i'm into cyber security

34
00:01:21,920 --> 00:01:24,479
my favorite highlight from the research

35
00:01:24,479 --> 00:01:26,560
i've produced all these years is the

36
00:01:26,560 --> 00:01:28,799
fact that when i was at university at

37
00:01:28,799 --> 00:01:32,079
imperial college london i've shown

38
00:01:32,079 --> 00:01:34,320
a zero-day vulnerability for a top 10

39
00:01:34,320 --> 00:01:37,040
blockchain cryptocurrency at the time

40
00:01:37,040 --> 00:01:39,360
it's my favorite because many things are

41
00:01:39,360 --> 00:01:40,479
innovative

42
00:01:40,479 --> 00:01:42,400
and that's amazing but at the same time

43
00:01:42,400 --> 00:01:45,360
they should be secure

44
00:01:45,920 --> 00:01:49,040
i'm also sharing tips online

45
00:01:49,040 --> 00:01:52,000
on how to secure your code i'm playing

46
00:01:52,000 --> 00:01:54,560
on the developer side

47
00:01:54,560 --> 00:01:56,399
you can't see me at the official github

48
00:01:56,399 --> 00:01:58,960
account or sometimes in youtube where i

49
00:01:58,960 --> 00:02:01,119
have a series

50
00:02:01,119 --> 00:02:02,560
the reason i created this series is

51
00:02:02,560 --> 00:02:04,719
because i've seen so many videos on

52
00:02:04,719 --> 00:02:07,840
that's a bug that's how you can exploit

53
00:02:07,840 --> 00:02:10,080
it et cetera et cetera but nobody really

54
00:02:10,080 --> 00:02:12,000
produced the videos

55
00:02:12,000 --> 00:02:15,200
sharing that's a bug that's why the case

56
00:02:15,200 --> 00:02:17,360
that's a pattern you can avoid

57
00:02:17,360 --> 00:02:20,840
that's how we can eradicate it

58
00:02:20,840 --> 00:02:24,239
forever now my team

59
00:02:24,239 --> 00:02:28,080
we have the mission to secure the open

60
00:02:28,080 --> 00:02:30,080
source software that we all depend on so

61
00:02:30,080 --> 00:02:32,800
we are researching for vulnerabilities

62
00:02:32,800 --> 00:02:34,959
in the open source software

63
00:02:34,959 --> 00:02:38,239
and from the march the month of march

64
00:02:38,239 --> 00:02:41,120
2020 which is two and a half years ago

65
00:02:41,120 --> 00:02:43,120
so it's 900 days

66
00:02:43,120 --> 00:02:45,840
we found this number of zero

67
00:02:45,840 --> 00:02:47,480
vulnerabilities

68
00:02:47,480 --> 00:02:50,000
337 which is like one zero-day

69
00:02:50,000 --> 00:02:52,160
vulnerability every three days

70
00:02:52,160 --> 00:02:54,959
in major open source software that

71
00:02:54,959 --> 00:02:56,160
everybody

72
00:02:56,160 --> 00:02:59,200
uses in their everyday life even if they

73
00:02:59,200 --> 00:03:01,360
don't know about it like for example the

74
00:03:01,360 --> 00:03:03,680
previous presentation on tesla

75
00:03:03,680 --> 00:03:05,920
if you buy any car

76
00:03:05,920 --> 00:03:08,400
and you open the car manual you'll see

77
00:03:08,400 --> 00:03:10,879
in the very first paragraph speaking

78
00:03:10,879 --> 00:03:13,760
about software that you accept the use

79
00:03:13,760 --> 00:03:17,040
of open source software

80
00:03:17,519 --> 00:03:19,680
other initiatives that my team does to

81
00:03:19,680 --> 00:03:21,920
secure the open source software include

82
00:03:21,920 --> 00:03:25,040
the fact that we open our time

83
00:03:25,040 --> 00:03:27,920
for free to open source maintainers uh

84
00:03:27,920 --> 00:03:31,440
maintaining big projects that come to us

85
00:03:31,440 --> 00:03:34,319
and they talk us about their struggles

86
00:03:34,319 --> 00:03:36,720
in cyber security all those things that

87
00:03:36,720 --> 00:03:39,680
they are unclear about um

88
00:03:39,680 --> 00:03:42,560
and i had so much learning over the past

89
00:03:42,560 --> 00:03:44,640
year about this that i can't predict

90
00:03:44,640 --> 00:03:47,920
what's coming why it's coming and why we

91
00:03:47,920 --> 00:03:50,400
may or may not have another look for jay

92
00:03:50,400 --> 00:03:52,239
in the future you see this when you

93
00:03:52,239 --> 00:03:53,840
speak with the maintainers and you

94
00:03:53,840 --> 00:03:54,959
understand their struggles in

95
00:03:54,959 --> 00:03:57,519
cybersecurity

96
00:03:57,519 --> 00:04:00,319
now i spoke in my title about nasa how

97
00:04:00,319 --> 00:04:02,239
nasa secures their code and how you can

98
00:04:02,239 --> 00:04:03,680
do the same thing

99
00:04:03,680 --> 00:04:06,159
very easy after this presentation

100
00:04:06,159 --> 00:04:07,840
this snippet

101
00:04:07,840 --> 00:04:10,400
is not the actual snippet but it's very

102
00:04:10,400 --> 00:04:13,439
very similar one to some code that nasa

103
00:04:13,439 --> 00:04:16,478
had 10 years ago when they send

104
00:04:16,478 --> 00:04:19,680
a rover to mars called curiosity this

105
00:04:19,680 --> 00:04:22,800
little rover will fly by

106
00:04:22,800 --> 00:04:26,000
a rocket and then this rocket will fire

107
00:04:26,000 --> 00:04:28,400
the rover the rover will come down

108
00:04:28,400 --> 00:04:30,880
slowly to mars and the parachute will

109
00:04:30,880 --> 00:04:33,680
open to allow this to happen so that the

110
00:04:33,680 --> 00:04:36,560
rover will explore

111
00:04:36,560 --> 00:04:39,120
however there's there was somebody in

112
00:04:39,120 --> 00:04:41,680
the team there

113
00:04:41,680 --> 00:04:44,479
some people are like 20 minutes after

114
00:04:44,479 --> 00:04:45,919
they leave the house and they are in the

115
00:04:45,919 --> 00:04:48,320
car they are start asking did we turn

116
00:04:48,320 --> 00:04:51,360
off the heater did we did this did we

117
00:04:51,360 --> 00:04:54,000
lock the windows same thing a nasa

118
00:04:54,000 --> 00:04:57,520
engineer asked do you want to check for

119
00:04:57,520 --> 00:04:59,680
one last time the code that is

120
00:04:59,680 --> 00:05:02,720
responsible to open the parachute of the

121
00:05:02,720 --> 00:05:05,199
rover

122
00:05:05,680 --> 00:05:08,639
did anybody spot the problem in the code

123
00:05:08,639 --> 00:05:11,840
does anybody want to share

124
00:05:16,000 --> 00:05:18,240
yep

125
00:05:20,160 --> 00:05:21,520
absolutely

126
00:05:21,520 --> 00:05:22,880
thanks so much

127
00:05:22,880 --> 00:05:26,080
so that's correct the

128
00:05:26,080 --> 00:05:28,320
signature of the function is expecting

129
00:05:28,320 --> 00:05:31,840
an array of 12 elements in the loop you

130
00:05:31,840 --> 00:05:34,639
have an iteration of 12 elements but

131
00:05:34,639 --> 00:05:36,320
then in line 7

132
00:05:36,320 --> 00:05:38,880
you have one of three elements being

133
00:05:38,880 --> 00:05:41,199
initiated this means that from the

134
00:05:41,199 --> 00:05:44,720
element in index four onwards up to

135
00:05:44,720 --> 00:05:45,759
uh

136
00:05:45,759 --> 00:05:48,080
index 12 you can have

137
00:05:48,080 --> 00:05:51,039
not you can't you will have random

138
00:05:51,039 --> 00:05:53,600
behavior which can cause the rover to

139
00:05:53,600 --> 00:05:54,560
crash

140
00:05:54,560 --> 00:05:57,039
the smart things that massa engineers

141
00:05:57,039 --> 00:05:59,199
did and that's one what i want you to

142
00:05:59,199 --> 00:06:01,520
remember is that they didn't just fix

143
00:06:01,520 --> 00:06:04,639
that vulnerable instance of the code

144
00:06:04,639 --> 00:06:08,000
they realized that if we have a mistake

145
00:06:08,000 --> 00:06:11,280
there it's highly likely that our coding

146
00:06:11,280 --> 00:06:12,240
style

147
00:06:12,240 --> 00:06:15,440
is like that so the way we produce the

148
00:06:15,440 --> 00:06:18,160
code in general can be affected by this

149
00:06:18,160 --> 00:06:20,080
kind of problems and they wrote the

150
00:06:20,080 --> 00:06:23,120
query in the language codeql that

151
00:06:23,120 --> 00:06:25,759
mathias said and i'm gonna show you

152
00:06:25,759 --> 00:06:28,960
to pick up bugs like that in the overall

153
00:06:28,960 --> 00:06:30,720
code base

154
00:06:30,720 --> 00:06:35,919
and they found 30 other 3 0 30 other

155
00:06:35,919 --> 00:06:38,080
variants of that vulnerability in their

156
00:06:38,080 --> 00:06:40,240
code they fixed those variants and the

157
00:06:40,240 --> 00:06:42,400
curiosity rover was able to land safely

158
00:06:42,400 --> 00:06:44,319
in the surface of march

159
00:06:44,319 --> 00:06:45,840
of mars

160
00:06:45,840 --> 00:06:47,600
one year ago

161
00:06:47,600 --> 00:06:50,720
actually 14 months ago nasa send another

162
00:06:50,720 --> 00:06:52,960
overs to mars this time was called

163
00:06:52,960 --> 00:06:55,360
ingenuity

164
00:06:55,360 --> 00:06:59,039
to do similar things this time 10 years

165
00:06:59,039 --> 00:07:01,440
later they had so much more learnings

166
00:07:01,440 --> 00:07:05,840
right they could use other products

167
00:07:06,639 --> 00:07:08,720
they could bring their security level

168
00:07:08,720 --> 00:07:11,440
into a whole new

169
00:07:11,440 --> 00:07:13,840
level and avoid mistakes like that of

170
00:07:13,840 --> 00:07:17,000
the past

171
00:07:17,840 --> 00:07:19,919
i promise to talk about the future of

172
00:07:19,919 --> 00:07:22,560
software security we believe that the

173
00:07:22,560 --> 00:07:26,160
future is developer first

174
00:07:26,160 --> 00:07:29,120
and i'm gonna show a demo on what i mean

175
00:07:29,120 --> 00:07:30,960
by developer first

176
00:07:30,960 --> 00:07:32,880
and then i believe that is community

177
00:07:32,880 --> 00:07:34,319
driven

178
00:07:34,319 --> 00:07:37,360
so developer first in theory is when

179
00:07:37,360 --> 00:07:40,319
everything happens from inside the same

180
00:07:40,319 --> 00:07:43,280
place so that a developer can secure

181
00:07:43,280 --> 00:07:44,800
their code

182
00:07:44,800 --> 00:07:45,840
from

183
00:07:45,840 --> 00:07:48,800
where they code without actually going

184
00:07:48,800 --> 00:07:51,840
to another place logging here logging

185
00:07:51,840 --> 00:07:54,479
there from the problem there go fix it

186
00:07:54,479 --> 00:07:56,240
push blah blah blah

187
00:07:56,240 --> 00:07:59,360
this is a losing game in the long term

188
00:07:59,360 --> 00:08:01,199
our research says that

189
00:08:01,199 --> 00:08:02,960
and we've seen this happening a lot of

190
00:08:02,960 --> 00:08:04,639
times

191
00:08:04,639 --> 00:08:08,160
in two three years from now if you are

192
00:08:08,160 --> 00:08:10,960
doing something like this the developers

193
00:08:10,960 --> 00:08:13,680
they are gonna naturally abandon these

194
00:08:13,680 --> 00:08:15,199
solutions

195
00:08:15,199 --> 00:08:18,479
and then i spoke about community driven

196
00:08:18,479 --> 00:08:21,759
the way we implemented code trail

197
00:08:21,759 --> 00:08:22,879
is that

198
00:08:22,879 --> 00:08:27,360
when nasa fixes a bug by writing a query

199
00:08:27,360 --> 00:08:30,560
sorry when nasa detects a bug by writing

200
00:08:30,560 --> 00:08:31,599
a query

201
00:08:31,599 --> 00:08:34,080
we can have that query as well and we

202
00:08:34,080 --> 00:08:36,320
put it in a database

203
00:08:36,320 --> 00:08:39,279
where we have our cumulative knowledge

204
00:08:39,279 --> 00:08:42,799
of problems we found so far that my team

205
00:08:42,799 --> 00:08:47,279
is finding with the 337 cvs enterprises

206
00:08:47,279 --> 00:08:48,959
like nasa and so many other big

207
00:08:48,959 --> 00:08:50,959
organizations in the world and also

208
00:08:50,959 --> 00:08:53,440
hunters people who are paid bounties

209
00:08:53,440 --> 00:08:56,640
like jonathan yesterday to contribute

210
00:08:56,640 --> 00:08:59,519
queries to us and all those queries we

211
00:08:59,519 --> 00:09:01,600
have them in a nice database that you

212
00:09:01,600 --> 00:09:04,399
can build on top and benefit from all

213
00:09:04,399 --> 00:09:06,240
that collective knowledge from the past

214
00:09:06,240 --> 00:09:09,480
10 years

215
00:09:10,080 --> 00:09:12,480
we call this

216
00:09:12,480 --> 00:09:14,880
come on

217
00:09:16,480 --> 00:09:18,080
yeah

218
00:09:18,080 --> 00:09:20,399
we call this security as code

219
00:09:20,399 --> 00:09:22,880
it's a methodology that we have

220
00:09:22,880 --> 00:09:25,440
been inspired from devops

221
00:09:25,440 --> 00:09:28,640
so historically people would open

222
00:09:28,640 --> 00:09:32,000
tickets in infra teams

223
00:09:32,000 --> 00:09:34,959
they became slow basically from the time

224
00:09:34,959 --> 00:09:37,120
that developers had

225
00:09:37,120 --> 00:09:39,040
the chance to write

226
00:09:39,040 --> 00:09:42,560
infrastructure as code and devops etc

227
00:09:42,560 --> 00:09:45,600
they start to become faster and at the

228
00:09:45,600 --> 00:09:48,320
same time everyone in the company was

229
00:09:48,320 --> 00:09:50,880
looking at the same thing therefore they

230
00:09:50,880 --> 00:09:53,920
will speak the same language developers

231
00:09:53,920 --> 00:09:55,680
could read that could understand and

232
00:09:55,680 --> 00:09:57,440
they could extend

233
00:09:57,440 --> 00:09:59,040
in the same way

234
00:09:59,040 --> 00:10:01,200
we've seen this happening in quality

235
00:10:01,200 --> 00:10:04,640
assurance i don't think that a

236
00:10:04,640 --> 00:10:07,519
practice of the past when people were

237
00:10:07,519 --> 00:10:10,560
like opening tickets and had to speak

238
00:10:10,560 --> 00:10:12,880
with 10 different teams or three

239
00:10:12,880 --> 00:10:14,880
different teams to do things is going to

240
00:10:14,880 --> 00:10:16,880
resonate with people nowadays in

241
00:10:16,880 --> 00:10:18,640
software engineering

242
00:10:18,640 --> 00:10:21,040
and we define soft security as code as

243
00:10:21,040 --> 00:10:23,200
the methodology of codifying security

244
00:10:23,200 --> 00:10:25,120
decisions that are then shared with

245
00:10:25,120 --> 00:10:28,399
other teams in an ideal world we want

246
00:10:28,399 --> 00:10:31,120
every security expert within an

247
00:10:31,120 --> 00:10:32,720
organization

248
00:10:32,720 --> 00:10:36,240
to codify their security knowledge

249
00:10:36,240 --> 00:10:38,959
in such way that can be then socialized

250
00:10:38,959 --> 00:10:40,800
with the rest of the organization this

251
00:10:40,800 --> 00:10:44,000
can be policy as code this can be

252
00:10:44,000 --> 00:10:47,760
secured as code this way security is in

253
00:10:47,760 --> 00:10:49,440
the background

254
00:10:49,440 --> 00:10:51,120
is not a stopper

255
00:10:51,120 --> 00:10:53,440
is more like a seamless

256
00:10:53,440 --> 00:10:56,560
integrator with anything else and you

257
00:10:56,560 --> 00:10:58,560
only pay attention to the security

258
00:10:58,560 --> 00:11:02,560
alerts if and when those are created

259
00:11:02,560 --> 00:11:05,360
but again remember you all speak the

260
00:11:05,360 --> 00:11:08,560
same language developers would read the

261
00:11:08,560 --> 00:11:11,360
code that security experts have codified

262
00:11:11,360 --> 00:11:14,079
their security knowledge on therefore

263
00:11:14,079 --> 00:11:18,160
you will all work on the same thing

264
00:11:21,040 --> 00:11:23,680
now cultural

265
00:11:23,680 --> 00:11:26,800
codewell allows you to query code as if

266
00:11:26,800 --> 00:11:29,440
it was data by describing what you want

267
00:11:29,440 --> 00:11:32,560
to find not how you find it we are using

268
00:11:32,560 --> 00:11:37,040
codeql as the mean of implementing our

269
00:11:37,040 --> 00:11:39,200
vision methodology

270
00:11:39,200 --> 00:11:43,120
idea of security as code

271
00:11:43,120 --> 00:11:46,160
codeql was created by a company a little

272
00:11:46,160 --> 00:11:48,880
company in oxford england called samuel

273
00:11:48,880 --> 00:11:51,360
13 years ago

274
00:11:51,360 --> 00:11:52,959
2009

275
00:11:52,959 --> 00:11:56,079
then github was bought by microsoft in

276
00:11:56,079 --> 00:11:58,000
2018

277
00:11:58,000 --> 00:12:01,279
and github bought semol in 2019 so you

278
00:12:01,279 --> 00:12:03,600
have this transitive acquisition

279
00:12:03,600 --> 00:12:05,600
basically

280
00:12:05,600 --> 00:12:08,720
codeql eats like mikhail said yesterday

281
00:12:08,720 --> 00:12:11,519
in his lightning talk it's a declarative

282
00:12:11,519 --> 00:12:14,160
language you say what you want to find

283
00:12:14,160 --> 00:12:16,880
you don't explain how to find it

284
00:12:16,880 --> 00:12:17,680
and

285
00:12:17,680 --> 00:12:19,839
it's also a logical language it's using

286
00:12:19,839 --> 00:12:22,160
operators like and and or if i give you

287
00:12:22,160 --> 00:12:25,040
an example in english it's like

288
00:12:25,040 --> 00:12:28,720
from all these people in the room

289
00:12:28,720 --> 00:12:29,839
give me

290
00:12:29,839 --> 00:12:32,639
that person who is standing and wearing

291
00:12:32,639 --> 00:12:34,079
a black jacket

292
00:12:34,079 --> 00:12:36,560
so you never say go to this place in

293
00:12:36,560 --> 00:12:39,200
stockholm and get inside

294
00:12:39,200 --> 00:12:42,480
get this person so you use the type of

295
00:12:42,480 --> 00:12:45,519
human which someone implemented once

296
00:12:45,519 --> 00:12:48,880
and from there you narrow down like sql

297
00:12:48,880 --> 00:12:50,639
at the same time it's an object-oriented

298
00:12:50,639 --> 00:12:52,160
language and what i described is object

299
00:12:52,160 --> 00:12:53,680
oriented because you start from all the

300
00:12:53,680 --> 00:12:55,120
humans and you go down based on

301
00:12:55,120 --> 00:12:57,680
characteristics

302
00:12:57,680 --> 00:12:58,639
now

303
00:12:58,639 --> 00:13:02,399
we've seen we spoke about querying code

304
00:13:02,399 --> 00:13:04,320
querying code is not just for security

305
00:13:04,320 --> 00:13:05,600
research

306
00:13:05,600 --> 00:13:07,519
it can be just because you want to

307
00:13:07,519 --> 00:13:10,160
familiarize yourself with a code base

308
00:13:10,160 --> 00:13:12,959
like for example when i spoke about the

309
00:13:12,959 --> 00:13:14,560
research i've done for imperial college

310
00:13:14,560 --> 00:13:17,440
finding this top 10 cryptocurrency well

311
00:13:17,440 --> 00:13:19,440
this top 10 cryptocurrency was a bitcoin

312
00:13:19,440 --> 00:13:22,240
fork do you think that i started reading

313
00:13:22,240 --> 00:13:23,519
like uh

314
00:13:23,519 --> 00:13:26,320
i don't know 65k lines of code no i

315
00:13:26,320 --> 00:13:29,519
tried to be smarter by explaining by

316
00:13:29,519 --> 00:13:32,160
querying code and navigating to those

317
00:13:32,160 --> 00:13:34,240
points that actually matter the pain

318
00:13:34,240 --> 00:13:37,519
points in the code base

319
00:13:38,800 --> 00:13:40,480
behind the scenes

320
00:13:40,480 --> 00:13:42,240
your code base

321
00:13:42,240 --> 00:13:46,000
is transformed into an abstract syntax

322
00:13:46,000 --> 00:13:49,120
tree a relational database

323
00:13:49,120 --> 00:13:51,920
that is going to be able to be

324
00:13:51,920 --> 00:13:53,680
searched

325
00:13:53,680 --> 00:13:55,760
this thing

326
00:13:55,760 --> 00:13:57,839
we call it a database

327
00:13:57,839 --> 00:13:59,519
so

328
00:13:59,519 --> 00:14:02,160
you condense your code base

329
00:14:02,160 --> 00:14:04,399
automatically with the tool into an

330
00:14:04,399 --> 00:14:06,320
abstract syntax stream

331
00:14:06,320 --> 00:14:08,560
that we call a database and it becomes

332
00:14:08,560 --> 00:14:11,440
searchable by queries you can view this

333
00:14:11,440 --> 00:14:14,160
abstract syntax tree by using the ast

334
00:14:14,160 --> 00:14:18,160
viewer i'm gonna show this in my demo

335
00:14:18,160 --> 00:14:20,639
and then to better manage expectations

336
00:14:20,639 --> 00:14:22,880
and that's a question i hear a lot

337
00:14:22,880 --> 00:14:25,839
it's a sust tool it's not a dust tool

338
00:14:25,839 --> 00:14:29,519
it's not gonna run the code

339
00:14:29,519 --> 00:14:31,040
it's going to perform

340
00:14:31,040 --> 00:14:32,160
static

341
00:14:32,160 --> 00:14:33,760
analysis

342
00:14:33,760 --> 00:14:35,120
however

343
00:14:35,120 --> 00:14:37,440
we've seen over the years that some

344
00:14:37,440 --> 00:14:39,600
alerts that we are getting and we

345
00:14:39,600 --> 00:14:41,600
thought that

346
00:14:41,600 --> 00:14:43,920
is this a false positive is this an

347
00:14:43,920 --> 00:14:45,440
alert

348
00:14:45,440 --> 00:14:47,279
they have been

349
00:14:47,279 --> 00:14:49,360
actual alerts

350
00:14:49,360 --> 00:14:53,120
if the specific right malicious input

351
00:14:53,120 --> 00:14:55,600
was given to them

352
00:14:55,600 --> 00:14:57,360
and many people also ask about false

353
00:14:57,360 --> 00:14:59,839
positives of course we are doing our

354
00:14:59,839 --> 00:15:02,160
best to maintain that cumulative

355
00:15:02,160 --> 00:15:04,800
knowledge database we have we have as

356
00:15:04,800 --> 00:15:08,800
polished as possible to the level that

357
00:15:08,800 --> 00:15:10,880
my team jokes with me that i have more

358
00:15:10,880 --> 00:15:13,199
chances to do like crazy things in life

359
00:15:13,199 --> 00:15:16,160
than a bad query arriving inside this

360
00:15:16,160 --> 00:15:19,440
code base and at the end of the day

361
00:15:19,440 --> 00:15:21,440
the language is declarative and logical

362
00:15:21,440 --> 00:15:23,920
so it means that we code in such a way

363
00:15:23,920 --> 00:15:25,600
that is generic

364
00:15:25,600 --> 00:15:26,800
therefore

365
00:15:26,800 --> 00:15:28,480
something that can be considered the

366
00:15:28,480 --> 00:15:30,800
false positive for me might not be for

367
00:15:30,800 --> 00:15:32,560
someone else false positives are

368
00:15:32,560 --> 00:15:35,440
subjective so we bring every single

369
00:15:35,440 --> 00:15:38,839
query into a very polished

370
00:15:38,839 --> 00:15:41,279
um form

371
00:15:41,279 --> 00:15:45,839
where it comes you can start from like

372
00:15:45,839 --> 00:15:48,800
um satisfying 95 percent of people and

373
00:15:48,800 --> 00:15:51,279
then that five percent of people can

374
00:15:51,279 --> 00:15:54,800
tweak this query a bit and arrive into

375
00:15:54,800 --> 00:15:57,758
where they want to go

376
00:15:58,959 --> 00:16:00,880
the languages that are supported by

377
00:16:00,880 --> 00:16:03,680
codeql right now to perform sas stone is

378
00:16:03,680 --> 00:16:06,639
python javascript cc plus plus java rust

379
00:16:06,639 --> 00:16:07,519
and go

380
00:16:07,519 --> 00:16:11,120
with the roadmap having ruby and kotlin

381
00:16:11,120 --> 00:16:14,020
coming up very soon

382
00:16:14,020 --> 00:16:16,000
[Music]

383
00:16:16,000 --> 00:16:18,160
and i have some other languages in mind

384
00:16:18,160 --> 00:16:20,320
but i'm not sure if i can share because

385
00:16:20,320 --> 00:16:22,320
i'm not sure if it's public yet okay

386
00:16:22,320 --> 00:16:25,759
i'll keep it here to be on the safe side

387
00:16:25,759 --> 00:16:28,320
the way you write code in codeql changes

388
00:16:28,320 --> 00:16:31,040
a bit for every languages for every

389
00:16:31,040 --> 00:16:33,759
language today i'm gonna use java but

390
00:16:33,759 --> 00:16:36,240
even if you don't know java i'm gonna be

391
00:16:36,240 --> 00:16:38,800
so like basic at what i'm doing that

392
00:16:38,800 --> 00:16:41,040
everybody who is living and want to

393
00:16:41,040 --> 00:16:43,279
experiment with codeql even if you want

394
00:16:43,279 --> 00:16:46,399
to do python 99 of things i'm gonna show

395
00:16:46,399 --> 00:16:49,279
is still applicable

396
00:16:49,279 --> 00:16:53,360
so we are in a security conference so i

397
00:16:53,360 --> 00:16:56,240
want to show a demo that applies to the

398
00:16:56,240 --> 00:16:58,639
active user that i believe can be a

399
00:16:58,639 --> 00:17:00,959
security researcher someone who wants to

400
00:17:00,959 --> 00:17:03,440
find vulnerabilities in the code at the

401
00:17:03,440 --> 00:17:05,520
same time though i want to show how a

402
00:17:05,520 --> 00:17:07,599
passive user

403
00:17:07,599 --> 00:17:09,439
can use this tool

404
00:17:09,439 --> 00:17:10,400
because

405
00:17:10,400 --> 00:17:12,160
i promised to show you how to secure

406
00:17:12,160 --> 00:17:14,000
code like muscle therefore

407
00:17:14,000 --> 00:17:16,079
i'm going to show how you can turn

408
00:17:16,079 --> 00:17:18,640
the tool on and how it's going to work

409
00:17:18,640 --> 00:17:20,480
when you push code

410
00:17:20,480 --> 00:17:22,640
so that you can benefit straight away by

411
00:17:22,640 --> 00:17:25,280
a few clicks

412
00:17:25,280 --> 00:17:27,760
starting from the passive user i want to

413
00:17:27,760 --> 00:17:29,919
first show you how to enable codetrail

414
00:17:29,919 --> 00:17:32,400
for an open source public

415
00:17:32,400 --> 00:17:34,080
project

416
00:17:34,080 --> 00:17:36,640
to do this i'm navigating to my github

417
00:17:36,640 --> 00:17:41,600
profile and i have a public repo here

418
00:17:43,679 --> 00:17:46,640
that doesn't have code scanning enabled

419
00:17:46,640 --> 00:17:48,640
so to enable code scanning

420
00:17:48,640 --> 00:17:51,120
i can navigate to the security tab of

421
00:17:51,120 --> 00:17:53,039
the repo

422
00:17:53,039 --> 00:17:54,559
you should be the owner of the repo by

423
00:17:54,559 --> 00:17:55,440
the way

424
00:17:55,440 --> 00:17:59,600
and click setup code scanning

425
00:17:59,600 --> 00:18:01,840
we try to integrate with as many sas

426
00:18:01,840 --> 00:18:04,000
tools as possible

427
00:18:04,000 --> 00:18:06,480
the one i want to show you today is

428
00:18:06,480 --> 00:18:08,880
called ql so i click on the configure

429
00:18:08,880 --> 00:18:10,080
here

430
00:18:10,080 --> 00:18:11,919
and here you have

431
00:18:11,919 --> 00:18:15,919
a yaml file that doesn't really need any

432
00:18:15,919 --> 00:18:18,320
changing apart from

433
00:18:18,320 --> 00:18:22,720
choosing the language your project is on

434
00:18:22,799 --> 00:18:25,520
and some people also like to use some

435
00:18:25,520 --> 00:18:27,840
flags like security extended which has a

436
00:18:27,840 --> 00:18:30,240
bit more noise and security and quality

437
00:18:30,240 --> 00:18:32,720
to pick up problems that the majority of

438
00:18:32,720 --> 00:18:35,039
the users might not be interested at and

439
00:18:35,039 --> 00:18:37,440
by committing this you have a github

440
00:18:37,440 --> 00:18:40,720
action created on your behalf that every

441
00:18:40,720 --> 00:18:43,360
time you push code is gonna be

442
00:18:43,360 --> 00:18:44,559
um

443
00:18:44,559 --> 00:18:47,520
triggered and to show you how is looking

444
00:18:47,520 --> 00:18:49,760
when it's actually enabled

445
00:18:49,760 --> 00:18:50,960
say that

446
00:18:50,960 --> 00:18:52,000
this is

447
00:18:52,000 --> 00:18:54,720
a public repo i have i just pushed code

448
00:18:54,720 --> 00:18:55,760
in there

449
00:18:55,760 --> 00:18:58,240
and up we have nine

450
00:18:58,240 --> 00:18:59,360
alerts

451
00:18:59,360 --> 00:19:02,720
so if i come here view alerts

452
00:19:02,720 --> 00:19:04,240
i got

453
00:19:04,240 --> 00:19:07,440
these problems flagged by co-equal

454
00:19:07,440 --> 00:19:10,640
if i click on one of those i can't see

455
00:19:10,640 --> 00:19:13,120
that the first one is use of a broken or

456
00:19:13,120 --> 00:19:14,880
with cryptographic hash algorithm

457
00:19:14,880 --> 00:19:16,559
sensitive data

458
00:19:16,559 --> 00:19:19,440
the problem is explained alongside the

459
00:19:19,440 --> 00:19:23,440
cw is you can click and learn more

460
00:19:23,440 --> 00:19:26,240
um and we are currently implementing

461
00:19:26,240 --> 00:19:28,240
some uh features that are gonna be

462
00:19:28,240 --> 00:19:30,240
public soon where you can have a

463
00:19:30,240 --> 00:19:33,039
discussion with your team below each bug

464
00:19:33,039 --> 00:19:36,720
fix it and push the code

465
00:19:36,799 --> 00:19:38,559
as you can see here

466
00:19:38,559 --> 00:19:42,880
the problems being picked very it can be

467
00:19:42,880 --> 00:19:44,720
pretty much

468
00:19:44,720 --> 00:19:47,360
every vulnerability which shows

469
00:19:47,360 --> 00:19:48,720
that

470
00:19:48,720 --> 00:19:50,559
you can model

471
00:19:50,559 --> 00:19:53,200
vulnerabilities by describing how they

472
00:19:53,200 --> 00:19:56,799
look today i'm gonna demo

473
00:19:56,799 --> 00:19:59,440
a vulnerability called sql injection i'm

474
00:19:59,440 --> 00:20:02,080
sure the vast majority here is familiar

475
00:20:02,080 --> 00:20:03,679
with this and i'm gonna use your

476
00:20:03,679 --> 00:20:05,039
familiarity

477
00:20:05,039 --> 00:20:10,480
to write codeql from scratch to pick up

478
00:20:10,480 --> 00:20:14,480
sql ejection problems in a code base

479
00:20:14,480 --> 00:20:17,280
so moving now to the active user

480
00:20:17,280 --> 00:20:20,880
to one that is gonna actually write code

481
00:20:20,880 --> 00:20:24,160
ql for their code base

482
00:20:25,440 --> 00:20:29,520
this is a meme from xkcd

483
00:20:32,000 --> 00:20:34,080
and for those that are not familiar that

484
00:20:34,080 --> 00:20:36,400
meme behind the scenes would look

485
00:20:36,400 --> 00:20:38,400
something like this so insert into

486
00:20:38,400 --> 00:20:40,640
students a name of a student the

487
00:20:40,640 --> 00:20:44,400
developer where you have the name clio

488
00:20:44,400 --> 00:20:47,919
falsely assumed that all users have good

489
00:20:47,919 --> 00:20:50,320
intentions therefore they are just gonna

490
00:20:50,320 --> 00:20:53,919
pass a student name however in reality

491
00:20:53,919 --> 00:20:56,080
someone with malicious intentions can

492
00:20:56,080 --> 00:20:59,039
pass a student name alongside commands

493
00:20:59,039 --> 00:21:02,080
this can be dropping a table it can

494
00:21:02,080 --> 00:21:04,640
extract it can be extracting sensitive

495
00:21:04,640 --> 00:21:07,120
information such as in this case it

496
00:21:07,120 --> 00:21:09,520
doesn't apply because you have students

497
00:21:09,520 --> 00:21:11,280
okay it can be college students like

498
00:21:11,280 --> 00:21:14,640
credit card information etc etc or they

499
00:21:14,640 --> 00:21:16,720
can make themselves an admin in the code

500
00:21:16,720 --> 00:21:17,600
base

501
00:21:17,600 --> 00:21:20,639
to do whatever they like

502
00:21:22,480 --> 00:21:24,640
to model this vulnerability

503
00:21:24,640 --> 00:21:27,679
i have to introduce some definitions

504
00:21:27,679 --> 00:21:29,919
starting from the source the source is

505
00:21:29,919 --> 00:21:31,440
the source of the vulnerability is the

506
00:21:31,440 --> 00:21:33,360
place in the program where malicious

507
00:21:33,360 --> 00:21:36,880
user input can enter into the code base

508
00:21:36,880 --> 00:21:40,000
like this one in our example

509
00:21:40,000 --> 00:21:41,919
then you have the sync of the

510
00:21:41,919 --> 00:21:44,000
vulnerability which is where the

511
00:21:44,000 --> 00:21:46,240
malicious

512
00:21:46,240 --> 00:21:49,760
input is actually being executed

513
00:21:49,760 --> 00:21:52,320
because if you have malicious input that

514
00:21:52,320 --> 00:21:53,919
is not being executed you have a

515
00:21:53,919 --> 00:21:56,159
vulnerability that is good is not going

516
00:21:56,159 --> 00:21:59,320
to be realized

517
00:21:59,520 --> 00:22:00,400
and

518
00:22:00,400 --> 00:22:02,960
in our model the vulnerability only

519
00:22:02,960 --> 00:22:06,320
exists if there is data flow between a

520
00:22:06,320 --> 00:22:08,559
source and async

521
00:22:08,559 --> 00:22:11,280
therefore this means if there is a flow

522
00:22:11,280 --> 00:22:13,679
from a malicious input getting in the

523
00:22:13,679 --> 00:22:16,240
database to the place that is getting

524
00:22:16,240 --> 00:22:19,679
executed yes you have an sql injection

525
00:22:19,679 --> 00:22:22,799
and just to revise the sync in the in

526
00:22:22,799 --> 00:22:25,679
the example we've seen is where the sql

527
00:22:25,679 --> 00:22:28,880
query is being executed

528
00:22:28,880 --> 00:22:32,799
so that's the model i'm gonna

529
00:22:32,799 --> 00:22:33,760
demo

530
00:22:33,760 --> 00:22:34,960
in

531
00:22:34,960 --> 00:22:36,799
writing codeql

532
00:22:36,799 --> 00:22:39,200
i'm gonna use

533
00:22:39,200 --> 00:22:41,520
before that so first of all i'm using vs

534
00:22:41,520 --> 00:22:43,760
code the text editor i have the

535
00:22:43,760 --> 00:22:45,840
extension of codeql

536
00:22:45,840 --> 00:22:47,760
being installed

537
00:22:47,760 --> 00:22:49,200
in here

538
00:22:49,200 --> 00:22:53,120
i have transformed the malicious no

539
00:22:53,120 --> 00:22:55,200
the innocent code base that doesn't know

540
00:22:55,200 --> 00:22:56,960
it's malicious we've seen

541
00:22:56,960 --> 00:22:58,720
we'll see

542
00:22:58,720 --> 00:23:00,320
into a database

543
00:23:00,320 --> 00:23:03,039
which is the o wasp mobile shepherd

544
00:23:03,039 --> 00:23:05,280
think about a mobile app

545
00:23:05,280 --> 00:23:07,280
that when you click on it in your

546
00:23:07,280 --> 00:23:09,200
android mobile phone is asking you for a

547
00:23:09,200 --> 00:23:12,559
username and a password to log in

548
00:23:12,559 --> 00:23:13,360
so

549
00:23:13,360 --> 00:23:15,679
i transformed the code on the right

550
00:23:15,679 --> 00:23:18,640
which is the mobile chevro code into an

551
00:23:18,640 --> 00:23:21,280
abstract syntax tree relational database

552
00:23:21,280 --> 00:23:24,159
that i can view using this

553
00:23:24,159 --> 00:23:26,480
button here in order to be able to

554
00:23:26,480 --> 00:23:27,679
search

555
00:23:27,679 --> 00:23:29,760
and on the left

556
00:23:29,760 --> 00:23:31,679
we have the source

557
00:23:31,679 --> 00:23:33,760
of the vulnerability that i'm going to

558
00:23:33,760 --> 00:23:35,840
model is the place in the program where

559
00:23:35,840 --> 00:23:37,919
malicious input gets in

560
00:23:37,919 --> 00:23:39,919
then we have the sync which is the place

561
00:23:39,919 --> 00:23:41,840
in the program where the malicious input

562
00:23:41,840 --> 00:23:44,400
is get executed and finally we have data

563
00:23:44,400 --> 00:23:47,280
flow where we are going to model if the

564
00:23:47,280 --> 00:23:48,240
source

565
00:23:48,240 --> 00:23:52,320
ever gets to sink to see if we have

566
00:23:52,320 --> 00:23:53,200
um

567
00:23:53,200 --> 00:23:55,520
unsql injection happening

568
00:23:55,520 --> 00:23:57,440
like

569
00:23:57,440 --> 00:24:00,320
jonathan and mikhail said yesterday the

570
00:24:00,320 --> 00:24:02,720
real power of the language happens when

571
00:24:02,720 --> 00:24:05,120
we do taint tracking

572
00:24:05,120 --> 00:24:07,120
so bear with me

573
00:24:07,120 --> 00:24:10,880
until the data flow query to judge what

574
00:24:10,880 --> 00:24:13,279
is this guy doing or what he thinks he's

575
00:24:13,279 --> 00:24:14,400
doing

576
00:24:14,400 --> 00:24:16,480
so first of all

577
00:24:16,480 --> 00:24:19,520
the source of the vulnerability

578
00:24:19,520 --> 00:24:21,600
is in line 98

579
00:24:21,600 --> 00:24:23,600
and 99

580
00:24:23,600 --> 00:24:24,559
where

581
00:24:24,559 --> 00:24:26,159
a username

582
00:24:26,159 --> 00:24:28,640
is being accessed and gets into the

583
00:24:28,640 --> 00:24:32,400
database by the method called get text

584
00:24:32,400 --> 00:24:34,880
if we model this with codeql

585
00:24:34,880 --> 00:24:36,640
first of all

586
00:24:36,640 --> 00:24:38,960
i want to import java

587
00:24:38,960 --> 00:24:41,919
which is the standard library from java

588
00:24:41,919 --> 00:24:44,320
so i can benefit from all those methods

589
00:24:44,320 --> 00:24:46,559
i'm getting for free

590
00:24:46,559 --> 00:24:48,880
with the library

591
00:24:48,880 --> 00:24:49,919
then

592
00:24:49,919 --> 00:24:51,440
it looks like

593
00:24:51,440 --> 00:24:53,840
sql but it's way more expressive because

594
00:24:53,840 --> 00:24:56,400
the object oriented and i have from

595
00:24:56,400 --> 00:24:58,320
where and select

596
00:24:58,320 --> 00:24:59,679
close

597
00:24:59,679 --> 00:25:02,640
so like before i said from all these

598
00:25:02,640 --> 00:25:04,720
people in the room give me that one

599
00:25:04,720 --> 00:25:07,200
standing in the black jacket so we want

600
00:25:07,200 --> 00:25:09,120
to say something along the lines from

601
00:25:09,120 --> 00:25:12,080
all the methods in the program that are

602
00:25:12,080 --> 00:25:15,600
being invoked give me that method which

603
00:25:15,600 --> 00:25:18,480
has specific characteristics so that

604
00:25:18,480 --> 00:25:20,159
malicious user input gets into the

605
00:25:20,159 --> 00:25:21,840
database

606
00:25:21,840 --> 00:25:24,080
into the code base

607
00:25:24,080 --> 00:25:26,320
let's start step by step

608
00:25:26,320 --> 00:25:28,559
by saying from all the methods in the

609
00:25:28,559 --> 00:25:31,200
program therefore from all the methods

610
00:25:31,200 --> 00:25:35,279
being invoked or accessed in the program

611
00:25:35,279 --> 00:25:37,679
give me all those methods

612
00:25:37,679 --> 00:25:40,080
here we have method access which is a

613
00:25:40,080 --> 00:25:40,960
type

614
00:25:40,960 --> 00:25:43,919
and then we have a variable like a call

615
00:25:43,919 --> 00:25:46,159
it can be c it doesn't matter you can

616
00:25:46,159 --> 00:25:48,400
call it whatever you like and if i run

617
00:25:48,400 --> 00:25:50,960
this code i expect codeql to give me

618
00:25:50,960 --> 00:25:53,600
back all the methods in the program

619
00:25:53,600 --> 00:25:56,720
which isn't helpful because i'm not

620
00:25:56,720 --> 00:25:58,880
not all methods invoked in the program

621
00:25:58,880 --> 00:26:01,840
are malicious some of them are those who

622
00:26:01,840 --> 00:26:03,679
are getting um

623
00:26:03,679 --> 00:26:05,520
or some of those who are getting

624
00:26:05,520 --> 00:26:09,200
malicious code into the database

625
00:26:09,200 --> 00:26:11,039
so to filter

626
00:26:11,039 --> 00:26:12,559
those methods and just to give you a

627
00:26:12,559 --> 00:26:15,679
visual understanding of what i'm doing

628
00:26:15,679 --> 00:26:17,760
i started from all the methods in the

629
00:26:17,760 --> 00:26:20,640
program to arrive into the get text

630
00:26:20,640 --> 00:26:22,960
method where user input gets into the

631
00:26:22,960 --> 00:26:24,400
code base

632
00:26:24,400 --> 00:26:26,400
we never know if this input is malicious

633
00:26:26,400 --> 00:26:28,559
or not we are going to expect the data

634
00:26:28,559 --> 00:26:31,520
flow to show us that we expect codeql to

635
00:26:31,520 --> 00:26:35,520
pick up confirmed findings

636
00:26:37,120 --> 00:26:40,480
so if i want to narrow down this

637
00:26:40,480 --> 00:26:41,360
to

638
00:26:41,360 --> 00:26:43,600
the specific method

639
00:26:43,600 --> 00:26:46,000
by clicking the dot here i'm getting

640
00:26:46,000 --> 00:26:49,760
suggestions i want to use the get method

641
00:26:49,760 --> 00:26:52,159
which is going to be able to access the

642
00:26:52,159 --> 00:26:54,480
methods in the program and then i want

643
00:26:54,480 --> 00:26:57,200
to be more descriptive and use the has

644
00:26:57,200 --> 00:26:59,279
qualified name

645
00:26:59,279 --> 00:27:01,200
i'm getting like

646
00:27:01,200 --> 00:27:04,880
explanations of what everything is

647
00:27:04,880 --> 00:27:07,919
and then i want to show here that i'm on

648
00:27:07,919 --> 00:27:10,159
the android.widget

649
00:27:10,159 --> 00:27:12,880
the type of all methods that are

650
00:27:12,880 --> 00:27:15,440
accepting user input is edittext and i'm

651
00:27:15,440 --> 00:27:18,000
interested in the specific method called

652
00:27:18,000 --> 00:27:21,039
gettext if we run this we expect to come

653
00:27:21,039 --> 00:27:24,000
up with the get text invocations in the

654
00:27:24,000 --> 00:27:25,120
code base

655
00:27:25,120 --> 00:27:28,080
these are three of them if i click i can

656
00:27:28,080 --> 00:27:30,640
go to those but you never know if all

657
00:27:30,640 --> 00:27:33,760
three are malicious

658
00:27:33,760 --> 00:27:36,080
i know that so far it looks like a

659
00:27:36,080 --> 00:27:39,760
command find or grep exercise but in the

660
00:27:39,760 --> 00:27:42,559
final thing when we have the data flow

661
00:27:42,559 --> 00:27:44,240
you are going to see the real power of

662
00:27:44,240 --> 00:27:45,440
the language

663
00:27:45,440 --> 00:27:46,400
now

664
00:27:46,400 --> 00:27:48,640
the sync of the vulnerability

665
00:27:48,640 --> 00:27:51,039
is where

666
00:27:51,039 --> 00:27:52,159
this

667
00:27:52,159 --> 00:27:54,159
input is going to get executed if it

668
00:27:54,159 --> 00:27:56,000
ever gets executed

669
00:27:56,000 --> 00:27:59,200
and it's the first argument in the raw

670
00:27:59,200 --> 00:28:01,200
query method

671
00:28:01,200 --> 00:28:03,279
i've seen people

672
00:28:03,279 --> 00:28:04,480
just

673
00:28:04,480 --> 00:28:06,559
saying oh whenever raw query method is

674
00:28:06,559 --> 00:28:08,880
being executed you have the thing no

675
00:28:08,880 --> 00:28:10,480
that's a false positive that's why you

676
00:28:10,480 --> 00:28:12,640
get false positives you should be more

677
00:28:12,640 --> 00:28:14,960
descriptive you should say that the sink

678
00:28:14,960 --> 00:28:16,399
of the vulnerability

679
00:28:16,399 --> 00:28:17,440
is where

680
00:28:17,440 --> 00:28:20,399
the first argument of the raw query

681
00:28:20,399 --> 00:28:23,360
is because based on documentation the

682
00:28:23,360 --> 00:28:25,039
raw query method

683
00:28:25,039 --> 00:28:27,679
is executing an sql query as the first

684
00:28:27,679 --> 00:28:29,440
argument and then in the second argument

685
00:28:29,440 --> 00:28:31,919
you keep passing other arguments so if

686
00:28:31,919 --> 00:28:34,080
we see this in the code

687
00:28:34,080 --> 00:28:35,919
actually it's better to

688
00:28:35,919 --> 00:28:37,760
see it in action so

689
00:28:37,760 --> 00:28:41,760
let's make codequal to give us that

690
00:28:41,760 --> 00:28:43,440
code instance

691
00:28:43,440 --> 00:28:46,159
so far i wrote the same thing that i had

692
00:28:46,159 --> 00:28:49,360
before in my source so we save some time

693
00:28:49,360 --> 00:28:51,840
which says from all the methods invoked

694
00:28:51,840 --> 00:28:53,120
in the program

695
00:28:53,120 --> 00:28:56,799
give me the one that is raw query to be

696
00:28:56,799 --> 00:28:58,640
more descriptive now i'm using the

697
00:28:58,640 --> 00:29:01,120
logical end operator

698
00:29:01,120 --> 00:29:03,919
and i want to access a specific argument

699
00:29:03,919 --> 00:29:07,039
which is of type expression i have a

700
00:29:07,039 --> 00:29:10,559
variable here called arc

701
00:29:10,559 --> 00:29:12,320
and i want to be more descriptive by

702
00:29:12,320 --> 00:29:14,639
saying

703
00:29:14,720 --> 00:29:17,200
and this argument

704
00:29:17,200 --> 00:29:19,919
is where

705
00:29:19,919 --> 00:29:20,799
the

706
00:29:20,799 --> 00:29:23,760
first index of the raw query method

707
00:29:23,760 --> 00:29:26,000
which is index 0 because we are software

708
00:29:26,000 --> 00:29:28,159
engineers here

709
00:29:28,159 --> 00:29:28,960
is

710
00:29:28,960 --> 00:29:31,200
therefore if i run this code here i

711
00:29:31,200 --> 00:29:33,600
expect code12 to give me only those

712
00:29:33,600 --> 00:29:35,840
invocations of raw query method that

713
00:29:35,840 --> 00:29:39,200
have the first argument being set so if

714
00:29:39,200 --> 00:29:41,200
i click on this

715
00:29:41,200 --> 00:29:42,880
that's an instance of the real query

716
00:29:42,880 --> 00:29:46,000
method with the first argument being set

717
00:29:46,000 --> 00:29:48,720
and here's another one

718
00:29:48,720 --> 00:29:50,799
now i promised you that data flow is

719
00:29:50,799 --> 00:29:53,200
where the magic happens here we have a

720
00:29:53,200 --> 00:29:54,399
template

721
00:29:54,399 --> 00:29:57,440
codeql is full of templates and that's

722
00:29:57,440 --> 00:30:00,080
what made me faster when i started my

723
00:30:00,080 --> 00:30:02,000
journey with the language i didn't write

724
00:30:02,000 --> 00:30:03,120
this code

725
00:30:03,120 --> 00:30:04,640
i don't know who wrote this code it can

726
00:30:04,640 --> 00:30:06,399
be someone from nasa it can be someone

727
00:30:06,399 --> 00:30:08,480
from my team or another enterprise

728
00:30:08,480 --> 00:30:10,240
the thing that i care about is that i

729
00:30:10,240 --> 00:30:12,960
can be more productive because somebody

730
00:30:12,960 --> 00:30:15,200
gave me this code that is just having

731
00:30:15,200 --> 00:30:18,480
two to-do's in the predicate is source

732
00:30:18,480 --> 00:30:21,520
and in the predicate is sync for me to

733
00:30:21,520 --> 00:30:24,159
build on top and be faster

734
00:30:24,159 --> 00:30:26,480
there are four i guarantee that it's

735
00:30:26,480 --> 00:30:28,799
very rare from people for people to

736
00:30:28,799 --> 00:30:31,279
start building queries from scratch

737
00:30:31,279 --> 00:30:33,600
normally you build on top of things like

738
00:30:33,600 --> 00:30:36,000
for example when log4j was out in mid

739
00:30:36,000 --> 00:30:39,120
december and we created a query about it

740
00:30:39,120 --> 00:30:41,760
then people started to build on top of

741
00:30:41,760 --> 00:30:44,159
that query by changing a few things to

742
00:30:44,159 --> 00:30:45,919
find the next

743
00:30:45,919 --> 00:30:47,120
let's say

744
00:30:47,120 --> 00:30:50,480
variant of log4j later

745
00:30:50,480 --> 00:30:51,760
in this

746
00:30:51,760 --> 00:30:53,840
file you have a bit more things like for

747
00:30:53,840 --> 00:30:57,760
example at the top you have metadata

748
00:30:58,240 --> 00:31:00,320
just ignore them for now then you have

749
00:31:00,320 --> 00:31:01,840
some other libraries that are going to

750
00:31:01,840 --> 00:31:03,840
help us to visualize the data flow

751
00:31:03,840 --> 00:31:06,799
functionality if and when we have sql

752
00:31:06,799 --> 00:31:09,760
findings that are confirmed

753
00:31:09,760 --> 00:31:12,240
and then because it's object oriented

754
00:31:12,240 --> 00:31:14,480
i'm extending the 10 tracking

755
00:31:14,480 --> 00:31:16,880
configuration to benefit from all those

756
00:31:16,880 --> 00:31:18,799
methods

757
00:31:18,799 --> 00:31:21,279
that they are already defined

758
00:31:21,279 --> 00:31:23,520
a predigate is essentially a function so

759
00:31:23,520 --> 00:31:26,240
you have reusable portions of logic

760
00:31:26,240 --> 00:31:27,679
encapsulated

761
00:31:27,679 --> 00:31:29,760
in the method call

762
00:31:29,760 --> 00:31:30,960
now

763
00:31:30,960 --> 00:31:33,520
before i copy and paste the code we

764
00:31:33,520 --> 00:31:36,000
wrote here and the code we wrote here to

765
00:31:36,000 --> 00:31:38,240
the dataflow function i want to show you

766
00:31:38,240 --> 00:31:39,919
how descriptive

767
00:31:39,919 --> 00:31:42,159
you can be with codetrail

768
00:31:42,159 --> 00:31:44,159
i want to say something along the lines

769
00:31:44,159 --> 00:31:46,399
of there exists

770
00:31:46,399 --> 00:31:47,600
a method

771
00:31:47,600 --> 00:31:50,159
such that when this method is being

772
00:31:50,159 --> 00:31:52,559
invoked it has some specific

773
00:31:52,559 --> 00:31:54,080
characteristics

774
00:31:54,080 --> 00:31:55,679
and for a source we know that the

775
00:31:55,679 --> 00:31:58,559
characteristics that this method has

776
00:31:58,559 --> 00:32:01,279
is the fact that it has the

777
00:32:01,279 --> 00:32:02,640
get text

778
00:32:02,640 --> 00:32:04,559
is the get text method

779
00:32:04,559 --> 00:32:06,720
and someone might ask oh what's what's a

780
00:32:06,720 --> 00:32:08,000
node by the way

781
00:32:08,000 --> 00:32:10,000
remember we are having an abstract

782
00:32:10,000 --> 00:32:12,320
syntax tree therefore i want you to

783
00:32:12,320 --> 00:32:14,480
think about data flow

784
00:32:14,480 --> 00:32:16,320
as being

785
00:32:16,320 --> 00:32:17,919
flying from

786
00:32:17,919 --> 00:32:20,080
a place in the program a node of the

787
00:32:20,080 --> 00:32:23,120
program navigating to another place of

788
00:32:23,120 --> 00:32:24,000
that

789
00:32:24,000 --> 00:32:25,840
abstract syntax tree

790
00:32:25,840 --> 00:32:28,320
and that's why we represent everything

791
00:32:28,320 --> 00:32:30,399
by the node type in this specific

792
00:32:30,399 --> 00:32:33,120
example so if i copy and paste this code

793
00:32:33,120 --> 00:32:35,439
here

794
00:32:40,159 --> 00:32:43,279
that's a description of the source i

795
00:32:43,279 --> 00:32:46,320
want to say that this node

796
00:32:46,320 --> 00:32:48,960
is going to be what i described above

797
00:32:48,960 --> 00:32:51,039
therefore i want you to find me if

798
00:32:51,039 --> 00:32:53,840
there's flow between this node and that

799
00:32:53,840 --> 00:32:54,799
node

800
00:32:54,799 --> 00:32:57,039
and i'm doing the same thing here there

801
00:32:57,039 --> 00:33:00,480
exists a method

802
00:33:00,640 --> 00:33:02,640
when this method is accessed it has some

803
00:33:02,640 --> 00:33:05,039
specific characteristics

804
00:33:05,039 --> 00:33:07,519
i can get those characteristics from

805
00:33:07,519 --> 00:33:09,600
here

806
00:33:09,600 --> 00:33:13,199
and i'm i want to model

807
00:33:13,919 --> 00:33:17,600
this as another node in the program

808
00:33:17,600 --> 00:33:20,240
so is the destination node

809
00:33:20,240 --> 00:33:23,279
this is how we modeled an sql injection

810
00:33:23,279 --> 00:33:25,679
vulnerability there is a source there is

811
00:33:25,679 --> 00:33:28,159
a sync and if there is flow we have a

812
00:33:28,159 --> 00:33:30,320
confirmed finding i'm running this code

813
00:33:30,320 --> 00:33:31,919
now

814
00:33:31,919 --> 00:33:34,399
and we have

815
00:33:34,399 --> 00:33:38,399
two confirmed sql injection findings

816
00:33:38,399 --> 00:33:41,200
that we can run through together to find

817
00:33:41,200 --> 00:33:43,840
out if they are real and understand the

818
00:33:43,840 --> 00:33:46,399
power of code curl

819
00:33:46,399 --> 00:33:48,880
so the first instance i clicked on the

820
00:33:48,880 --> 00:33:52,240
button here then i'm clicking here and i

821
00:33:52,240 --> 00:33:54,240
have the pathway

822
00:33:54,240 --> 00:33:56,799
this is very useful when you have the

823
00:33:56,799 --> 00:33:58,399
pathway

824
00:33:58,399 --> 00:34:00,399
because you understand where it flows in

825
00:34:00,399 --> 00:34:02,399
the program and allows you to understand

826
00:34:02,399 --> 00:34:04,880
the impact of the vulnerability when it

827
00:34:04,880 --> 00:34:06,480
flows in the program and also allows you

828
00:34:06,480 --> 00:34:09,040
to fix all those places in the program

829
00:34:09,040 --> 00:34:11,280
that it flows from into

830
00:34:11,280 --> 00:34:13,440
first if we click here

831
00:34:13,440 --> 00:34:15,199
i think it's gonna be easier if i move

832
00:34:15,199 --> 00:34:17,760
this in here perfect

833
00:34:17,760 --> 00:34:22,879
yeah so clicking on here you see that

834
00:34:22,879 --> 00:34:25,520
the malicious user input gets in the

835
00:34:25,520 --> 00:34:27,918
code base from the username

836
00:34:27,918 --> 00:34:30,480
it then flows down

837
00:34:30,480 --> 00:34:33,679
to the login method where there is a

838
00:34:33,679 --> 00:34:35,520
check performed there is a check

839
00:34:35,520 --> 00:34:38,800
performed if the username and password

840
00:34:38,800 --> 00:34:41,599
passed in the android app are evaluated

841
00:34:41,599 --> 00:34:43,119
into true

842
00:34:43,119 --> 00:34:44,079
then

843
00:34:44,079 --> 00:34:46,480
next stop is the login method and

844
00:34:46,480 --> 00:34:50,079
finally it goes down to the query the

845
00:34:50,079 --> 00:34:51,599
first argument of the raw query method

846
00:34:51,599 --> 00:34:54,000
where it being executed

847
00:34:54,000 --> 00:34:57,040
i want you to see this now

848
00:34:57,040 --> 00:34:59,119
of course there's another pathway

849
00:34:59,119 --> 00:35:01,280
according to this

850
00:35:01,280 --> 00:35:04,160
who wants to guess what's the other

851
00:35:04,160 --> 00:35:08,000
pathway for the username method

852
00:35:09,920 --> 00:35:12,000
what it makes sense to be when we use

853
00:35:12,000 --> 00:35:14,800
the login method

854
00:35:14,800 --> 00:35:18,640
since here we had an evaluation to true

855
00:35:18,640 --> 00:35:20,720
the other thing that makes sense to be

856
00:35:20,720 --> 00:35:23,760
for the username is an evaluation to

857
00:35:23,760 --> 00:35:25,280
false

858
00:35:25,280 --> 00:35:28,240
so i want you to compare lines 102 with

859
00:35:28,240 --> 00:35:30,400
line 116.

860
00:35:30,400 --> 00:35:32,560
i know when you are sitting back here it

861
00:35:32,560 --> 00:35:35,119
sounds intuitive but i've seen real

862
00:35:35,119 --> 00:35:38,640
security teams missing the second

863
00:35:38,640 --> 00:35:40,000
way or

864
00:35:40,000 --> 00:35:43,839
flow that this can happen

865
00:35:43,839 --> 00:35:46,000
if i continue the navigation it flows to

866
00:35:46,000 --> 00:35:47,440
the login method and finally it gets

867
00:35:47,440 --> 00:35:48,560
executed

868
00:35:48,560 --> 00:35:51,440
and then we have the other confirmed sql

869
00:35:51,440 --> 00:35:54,720
injection finding that it travels in the

870
00:35:54,720 --> 00:35:57,119
same pathway but this time is the

871
00:35:57,119 --> 00:35:58,400
password

872
00:35:58,400 --> 00:36:00,800
method

873
00:36:01,920 --> 00:36:04,720
and for the hackers in the room yes you

874
00:36:04,720 --> 00:36:07,200
don't need an account in the database to

875
00:36:07,200 --> 00:36:09,760
exploit this vulnerability because like

876
00:36:09,760 --> 00:36:12,560
we see here it can just be evaluated to

877
00:36:12,560 --> 00:36:13,440
false

878
00:36:13,440 --> 00:36:16,160
and that's the real power of code ql

879
00:36:16,160 --> 00:36:19,119
giving you this pain tracking

880
00:36:19,119 --> 00:36:22,640
way of following your code

881
00:36:22,640 --> 00:36:24,160
your malicious code if you are a

882
00:36:24,160 --> 00:36:26,160
security researcher

883
00:36:26,160 --> 00:36:29,279
in the code base

884
00:36:31,119 --> 00:36:33,440
so after this demo

885
00:36:33,440 --> 00:36:35,040
i want to speak

886
00:36:35,040 --> 00:36:38,079
about also the extensibility and the

887
00:36:38,079 --> 00:36:41,839
flexibility of the tool i'm sorry

888
00:36:44,880 --> 00:36:47,760
if i show you in the

889
00:36:47,760 --> 00:36:50,320
text editor i was using i open my files

890
00:36:50,320 --> 00:36:51,599
here

891
00:36:51,599 --> 00:36:55,359
so let's forget this for now

892
00:36:55,359 --> 00:36:57,680
on the left you can see

893
00:36:57,680 --> 00:36:58,640
that

894
00:36:58,640 --> 00:37:01,040
this is my demo file okay but this is

895
00:37:01,040 --> 00:37:03,359
the whole code qr library so if i go

896
00:37:03,359 --> 00:37:06,640
down here you see a c plus plus folder a

897
00:37:06,640 --> 00:37:10,000
c sharp folder java javascript folder

898
00:37:10,000 --> 00:37:13,119
inside these folders you have queries of

899
00:37:13,119 --> 00:37:17,359
vulnerabilities that i can use to build

900
00:37:17,359 --> 00:37:22,079
on top of and start hunting so i can

901
00:37:22,079 --> 00:37:25,280
extend and flexibly use

902
00:37:25,280 --> 00:37:28,720
the work of other people in the past

903
00:37:28,720 --> 00:37:30,079
and finally

904
00:37:30,079 --> 00:37:30,960
um

905
00:37:30,960 --> 00:37:33,119
that's the most important slide i think

906
00:37:33,119 --> 00:37:35,760
we work as community if we find

907
00:37:35,760 --> 00:37:37,839
something we contribute into the code

908
00:37:37,839 --> 00:37:40,320
base if the community finds something it

909
00:37:40,320 --> 00:37:42,960
contributes into the sorry the database

910
00:37:42,960 --> 00:37:45,920
of queries we find so far same for

911
00:37:45,920 --> 00:37:47,040
hunters

912
00:37:47,040 --> 00:37:49,280
so the future in our opinion is

913
00:37:49,280 --> 00:37:51,119
developer first everything should happen

914
00:37:51,119 --> 00:37:53,040
inside a pull request like we've seen

915
00:37:53,040 --> 00:37:54,640
with the alerts and also community

916
00:37:54,640 --> 00:37:57,839
driven because we are in stockholm now

917
00:37:57,839 --> 00:38:00,480
but if some company in san francisco

918
00:38:00,480 --> 00:38:01,760
finds a bug

919
00:38:01,760 --> 00:38:04,720
why do you need to suffer as well

920
00:38:04,720 --> 00:38:06,400
why we don't use the knowledge of

921
00:38:06,400 --> 00:38:10,079
somebody else to save time effort stress

922
00:38:10,079 --> 00:38:14,560
and let's focus on growing the companies

923
00:38:14,800 --> 00:38:17,599
to start your code coil journey these

924
00:38:17,599 --> 00:38:19,920
were the resources that i found useful

925
00:38:19,920 --> 00:38:22,320
when getting started jonathan yesterday

926
00:38:22,320 --> 00:38:24,079
in his presentation said that he has a

927
00:38:24,079 --> 00:38:26,240
youtube live stream of two hours when

928
00:38:26,240 --> 00:38:29,040
you see someone uh coding stuff

929
00:38:29,040 --> 00:38:30,960
everybody learns differently i'm a

930
00:38:30,960 --> 00:38:32,880
youtube person as well but at the same

931
00:38:32,880 --> 00:38:34,560
time the

932
00:38:34,560 --> 00:38:37,119
documentation was pretty helpful and we

933
00:38:37,119 --> 00:38:39,440
have some ctfs in the past

934
00:38:39,440 --> 00:38:42,240
that someone can go and use yesterday

935
00:38:42,240 --> 00:38:44,560
i've seen the solution of the 2018

936
00:38:44,560 --> 00:38:46,400
safety challenge i don't know if in the

937
00:38:46,400 --> 00:38:48,079
future someone comes and says oh that's

938
00:38:48,079 --> 00:38:48,800
the

939
00:38:48,800 --> 00:38:52,480
2017 code qlctf you never know so i want

940
00:38:52,480 --> 00:38:55,839
to give you these resources as well

941
00:38:55,839 --> 00:38:56,880
finally

942
00:38:56,880 --> 00:38:59,839
as mentioned by other talks we have a

943
00:38:59,839 --> 00:39:01,359
slack channel

944
00:39:01,359 --> 00:39:04,480
here's the url to our slack channel you

945
00:39:04,480 --> 00:39:07,760
can just go in that url and then log in

946
00:39:07,760 --> 00:39:10,720
to that the slack channel has a lot of

947
00:39:10,720 --> 00:39:11,760
people

948
00:39:11,760 --> 00:39:14,240
like you from all over the world that

949
00:39:14,240 --> 00:39:17,359
are using cultural every day to

950
00:39:17,359 --> 00:39:19,040
help their companies

951
00:39:19,040 --> 00:39:20,960
make money as back hunters and in

952
00:39:20,960 --> 00:39:25,440
general you have a nice network to start

953
00:39:25,440 --> 00:39:28,440
with

954
00:39:32,560 --> 00:39:34,960
then we have github universe which is

955
00:39:34,960 --> 00:39:36,880
the final thing i want to mention um

956
00:39:36,880 --> 00:39:38,560
happening in

957
00:39:38,560 --> 00:39:41,119
one and a half month from now it's

958
00:39:41,119 --> 00:39:43,040
you can attend virtually if you are not

959
00:39:43,040 --> 00:39:45,760
gonna be in san francisco bay area

960
00:39:45,760 --> 00:39:48,480
um there is a security track with loads

961
00:39:48,480 --> 00:39:50,960
of presentation presentations this

962
00:39:50,960 --> 00:39:52,960
presentation today was intermediate to

963
00:39:52,960 --> 00:39:54,880
advanced you can have more beginner

964
00:39:54,880 --> 00:39:56,800
level there like workshops but at the

965
00:39:56,800 --> 00:39:58,480
same time you can have super advanced

966
00:39:58,480 --> 00:40:00,320
presentations about the future of

967
00:40:00,320 --> 00:40:02,160
codequell

968
00:40:02,160 --> 00:40:04,079
and because many people ask me about

969
00:40:04,079 --> 00:40:06,560
co-pilot and if there's like security

970
00:40:06,560 --> 00:40:08,079
and co-pilot i want to answer this

971
00:40:08,079 --> 00:40:09,920
question just in case many of you are

972
00:40:09,920 --> 00:40:12,400
thinking it

973
00:40:12,480 --> 00:40:15,119
because i had co-pilot enabled in my

974
00:40:15,119 --> 00:40:17,760
demo disabled in my demo it's here on

975
00:40:17,760 --> 00:40:20,240
the bottom right

976
00:40:20,240 --> 00:40:22,720
we believe and we've seen

977
00:40:22,720 --> 00:40:25,839
statistics that co-pilot can make

978
00:40:25,839 --> 00:40:29,280
programmers twice as fast and there are

979
00:40:29,280 --> 00:40:31,440
new companies getting into the space so

980
00:40:31,440 --> 00:40:33,599
maybe we do something well like amazon

981
00:40:33,599 --> 00:40:35,760
is coming into space with a solution

982
00:40:35,760 --> 00:40:37,839
there

983
00:40:37,839 --> 00:40:42,800
an ai assistant it doesn't mean that

984
00:40:42,800 --> 00:40:45,520
if you have co-pilot on you should have

985
00:40:45,520 --> 00:40:47,920
your code scanning disabled

986
00:40:47,920 --> 00:40:50,560
the best practice is to have your

987
00:40:50,560 --> 00:40:52,880
static analysis tools or whatever you

988
00:40:52,880 --> 00:40:56,000
are using to secure your code on all the

989
00:40:56,000 --> 00:40:58,720
time the suggestions you get at this

990
00:40:58,720 --> 00:40:59,920
time

991
00:40:59,920 --> 00:41:01,920
might be vulnerable and they are

992
00:41:01,920 --> 00:41:04,319
affected by your style in the code by

993
00:41:04,319 --> 00:41:07,119
the comments you have and so many other

994
00:41:07,119 --> 00:41:10,400
variables when i code i was never given

995
00:41:10,400 --> 00:41:12,560
a bad suggestion but this is because

996
00:41:12,560 --> 00:41:14,640
maybe i know a few things about software

997
00:41:14,640 --> 00:41:16,079
security

998
00:41:16,079 --> 00:41:17,119
however

999
00:41:17,119 --> 00:41:19,920
we've now are working on something

1000
00:41:19,920 --> 00:41:22,800
called vulnerability filters to avoid

1001
00:41:22,800 --> 00:41:26,480
copilot to give back uh vulnerable code

1002
00:41:26,480 --> 00:41:29,200
and in the same way that we are using ai

1003
00:41:29,200 --> 00:41:32,000
to help our ai assistant in code we are

1004
00:41:32,000 --> 00:41:34,560
using ai behind the scenes for code ql

1005
00:41:34,560 --> 00:41:37,119
for the past 11 months and we've seen a

1006
00:41:37,119 --> 00:41:39,119
tremendous change in the amount of false

1007
00:41:39,119 --> 00:41:41,280
positives

1008
00:41:41,280 --> 00:41:43,520
that we were given

1009
00:41:43,520 --> 00:41:48,359
in the past by using machine learning

1010
00:41:48,800 --> 00:41:50,880
and that's pretty much it thanks so much

1011
00:41:50,880 --> 00:41:54,079
for your attention today

1012
00:41:54,079 --> 00:41:59,160
and i'm happy to hear your questions

1013
00:42:03,200 --> 00:42:04,960
all right so

1014
00:42:04,960 --> 00:42:06,640
yesterday when people you know yesterday

1015
00:42:06,640 --> 00:42:08,400
we asked was like five people that had

1016
00:42:08,400 --> 00:42:10,640
heard of codeql before

1017
00:42:10,640 --> 00:42:14,000
and i think you were one of them

1018
00:42:14,000 --> 00:42:16,400
so i'm actually really curious how many

1019
00:42:16,400 --> 00:42:18,240
in here are going to go home and

1020
00:42:18,240 --> 00:42:20,400
actually look at code ql now for your

1021
00:42:20,400 --> 00:42:22,880
projects

1022
00:42:23,200 --> 00:42:25,520
that is amazing okay that makes me very

1023
00:42:25,520 --> 00:42:26,800
happy because i think this is silver

1024
00:42:26,800 --> 00:42:29,280
bullet for a lot of things i discovered

1025
00:42:29,280 --> 00:42:31,119
it no more than like six months ago and

1026
00:42:31,119 --> 00:42:34,000
go like wow why didn't i see this before

1027
00:42:34,000 --> 00:42:35,359
this is

1028
00:42:35,359 --> 00:42:38,640
so goddamn useful it's like crazy

1029
00:42:38,640 --> 00:42:40,240
how many people do you have do you think

1030
00:42:40,240 --> 00:42:42,720
they're like are contributing to these

1031
00:42:42,720 --> 00:42:45,599
this database of samples and and then

1032
00:42:45,599 --> 00:42:48,000
well if i think about the enterprises

1033
00:42:48,000 --> 00:42:49,520
around the world

1034
00:42:49,520 --> 00:42:53,680
i know that the number can like be huge

1035
00:42:53,680 --> 00:42:55,440
the back hunters that are like actively

1036
00:42:55,440 --> 00:42:58,480
contributing around 500 people

1037
00:42:58,480 --> 00:43:01,119
my team is consisted of 20 people but at

1038
00:43:01,119 --> 00:43:02,960
the same time we have the overall

1039
00:43:02,960 --> 00:43:05,119
software engineering team of codeql

1040
00:43:05,119 --> 00:43:07,359
contributing as well so the number goes

1041
00:43:07,359 --> 00:43:08,880
to around 50

1042
00:43:08,880 --> 00:43:10,640
but then if i start counting like the

1043
00:43:10,640 --> 00:43:12,400
enterprises that are using it the number

1044
00:43:12,400 --> 00:43:14,240
is endless

1045
00:43:14,240 --> 00:43:16,800
so i can't give you the figure of the

1046
00:43:16,800 --> 00:43:19,599
enterprise security people contributing

1047
00:43:19,599 --> 00:43:22,319
ah that's awesome

1048
00:43:22,319 --> 00:43:23,599
do you have any questions from the

1049
00:43:23,599 --> 00:43:25,280
slider yeah but we do have the questions

1050
00:43:25,280 --> 00:43:27,359
from the audience is this a github only

1051
00:43:27,359 --> 00:43:29,680
what if i run gitlab or if i want to run

1052
00:43:29,680 --> 00:43:32,400
this against my private repos

1053
00:43:32,400 --> 00:43:34,319
can you do that can you self-host can

1054
00:43:34,319 --> 00:43:37,119
you do the scanning on your own

1055
00:43:37,119 --> 00:43:39,680
yes so you can self-host in the same way

1056
00:43:39,680 --> 00:43:42,800
you have github runners for actions same

1057
00:43:42,800 --> 00:43:45,359
thing for like codeql

1058
00:43:45,359 --> 00:43:47,680
of course self-hosting comes with its

1059
00:43:47,680 --> 00:43:50,319
own challenges and security problems

1060
00:43:50,319 --> 00:43:53,119
now in terms of integration

1061
00:43:53,119 --> 00:43:55,520
you have to be on github as of now i

1062
00:43:55,520 --> 00:43:59,200
think that we provide it to others to

1063
00:43:59,200 --> 00:44:02,319
integrate but if others don't build that

1064
00:44:02,319 --> 00:44:05,280
it's outside of our control to

1065
00:44:05,280 --> 00:44:08,800
create that integration right now

1066
00:44:08,800 --> 00:44:11,200
um okay and and the other another

1067
00:44:11,200 --> 00:44:13,040
relevant question is like what if you

1068
00:44:13,040 --> 00:44:15,200
have uh projects which are not open

1069
00:44:15,200 --> 00:44:18,560
sourced oh yeah i failed to answer that

1070
00:44:18,560 --> 00:44:19,440
um

1071
00:44:19,440 --> 00:44:21,280
if you have projects that are not open

1072
00:44:21,280 --> 00:44:23,359
source you should buy a license to use

1073
00:44:23,359 --> 00:44:25,359
the product it's free for public

1074
00:44:25,359 --> 00:44:27,440
projects like the one i've experimented

1075
00:44:27,440 --> 00:44:30,400
with here in the demo

1076
00:44:30,400 --> 00:44:31,280
um

1077
00:44:31,280 --> 00:44:32,160
okay

1078
00:44:32,160 --> 00:44:34,960
and another question which is

1079
00:44:34,960 --> 00:44:36,720
the most of the examples that we see

1080
00:44:36,720 --> 00:44:39,119
with the code coil is fairly easy like

1081
00:44:39,119 --> 00:44:40,880
buffer overflows

1082
00:44:40,880 --> 00:44:42,800
sql injections they're fairly easy to

1083
00:44:42,800 --> 00:44:43,760
spot

1084
00:44:43,760 --> 00:44:45,040
but more

1085
00:44:45,040 --> 00:44:47,440
complex dynamic problems such as race

1086
00:44:47,440 --> 00:44:50,240
conditions etc is that something were

1087
00:44:50,240 --> 00:44:53,200
you working towards and is there code ql

1088
00:44:53,200 --> 00:44:55,599
for most com more complex like double

1089
00:44:55,599 --> 00:44:57,520
lock problems

1090
00:44:57,520 --> 00:44:59,599
so there's the functionality in the code

1091
00:44:59,599 --> 00:45:03,599
base sorry in the language to describe

1092
00:45:03,599 --> 00:45:05,599
many many many things

1093
00:45:05,599 --> 00:45:07,200
as long as you can visit the

1094
00:45:07,200 --> 00:45:09,440
documentation and understand how you can

1095
00:45:09,440 --> 00:45:11,920
pick up those conditions by using maybe

1096
00:45:11,920 --> 00:45:15,440
some methods that

1097
00:45:15,520 --> 00:45:17,839
are not going to be shown to you in the

1098
00:45:17,839 --> 00:45:20,079
youtube training or something like that

1099
00:45:20,079 --> 00:45:23,040
but the answer is yes you can describe

1100
00:45:23,040 --> 00:45:24,720
pretty much everything that can be

1101
00:45:24,720 --> 00:45:26,640
described in code everything you can

1102
00:45:26,640 --> 00:45:30,079
think about it can be described

1103
00:45:30,079 --> 00:45:31,280
um

1104
00:45:31,280 --> 00:45:32,800
okay uh

1105
00:45:32,800 --> 00:45:34,800
what about other

1106
00:45:34,800 --> 00:45:37,200
languages what language is it supported

1107
00:45:37,200 --> 00:45:39,280
today and is there a roadmap for rust

1108
00:45:39,280 --> 00:45:40,319
and other

1109
00:45:40,319 --> 00:45:42,319
rust is already there

1110
00:45:42,319 --> 00:45:44,560
what's in the roadmap is kodlin and ruby

1111
00:45:44,560 --> 00:45:47,040
and right now we have integration with

1112
00:45:47,040 --> 00:45:50,240
python java javascript cc plus plus

1113
00:45:50,240 --> 00:45:51,839
go

1114
00:45:51,839 --> 00:45:52,960
um

1115
00:45:52,960 --> 00:45:54,720
that's it yeah

1116
00:45:54,720 --> 00:45:57,119
okay i think that's it for for the pre

1117
00:45:57,119 --> 00:45:59,920
questions that we had from the audience

1118
00:45:59,920 --> 00:46:01,839
any more questions from the audience we

1119
00:46:01,839 --> 00:46:04,720
have one over there

1120
00:46:07,359 --> 00:46:09,839
it's a microwork micron

1121
00:46:09,839 --> 00:46:12,079
you said yesterday hopefully yeah

1122
00:46:12,079 --> 00:46:14,400
so on this topic with

1123
00:46:14,400 --> 00:46:16,319
supporting more languages i was

1124
00:46:16,319 --> 00:46:17,760
considering

1125
00:46:17,760 --> 00:46:19,760
why do this way why don't integrate it

1126
00:46:19,760 --> 00:46:22,560
into the compiler the llvm for example

1127
00:46:22,560 --> 00:46:24,960
has the intermediate representation that

1128
00:46:24,960 --> 00:46:26,880
should be excellent to be targeted for

1129
00:46:26,880 --> 00:46:29,119
this shouldn't it

1130
00:46:29,119 --> 00:46:30,480
i love the question that's a good

1131
00:46:30,480 --> 00:46:31,760
question

1132
00:46:31,760 --> 00:46:34,319
unfortunately i don't have an answer so

1133
00:46:34,319 --> 00:46:37,040
if you contact me in twitter i can speak

1134
00:46:37,040 --> 00:46:38,960
with the team implementing the

1135
00:46:38,960 --> 00:46:40,640
functionalities and thinking about the

1136
00:46:40,640 --> 00:46:43,359
future the strategy the roadmap and we

1137
00:46:43,359 --> 00:46:44,560
can have

1138
00:46:44,560 --> 00:46:46,480
like an answer there because it's

1139
00:46:46,480 --> 00:46:48,640
something that sometimes many people are

1140
00:46:48,640 --> 00:46:50,720
thinking about interpreter languages and

1141
00:46:50,720 --> 00:46:52,800
all these kind of things why don't you

1142
00:46:52,800 --> 00:46:54,240
do this so

1143
00:46:54,240 --> 00:46:57,200
i don't have the exact answer and uh i

1144
00:46:57,200 --> 00:46:58,319
haven't

1145
00:46:58,319 --> 00:46:59,599
had like

1146
00:46:59,599 --> 00:47:00,720
um

1147
00:47:00,720 --> 00:47:02,960
a comprehensive response in the past to

1148
00:47:02,960 --> 00:47:05,599
say oh this is like expensive to do or

1149
00:47:05,599 --> 00:47:08,000
it needs more runtime or it doesn't help

1150
00:47:08,000 --> 00:47:09,359
the experience

1151
00:47:09,359 --> 00:47:11,040
so more than happy to give you like an

1152
00:47:11,040 --> 00:47:13,520
answer from the person um deciding this

1153
00:47:13,520 --> 00:47:15,200
kind of things so you get the expert

1154
00:47:15,200 --> 00:47:16,240
answer

1155
00:47:16,240 --> 00:47:19,040
all right thank you

1156
00:47:19,440 --> 00:47:20,880
also are you the person that's

1157
00:47:20,880 --> 00:47:24,000
responsible for rate limiting

1158
00:47:24,000 --> 00:47:26,880
mr leicher jonathan yeah

1159
00:47:26,880 --> 00:47:29,520
i'm not this person but i think mr

1160
00:47:29,520 --> 00:47:31,359
jonathan is somewhere in this part of

1161
00:47:31,359 --> 00:47:33,119
the room yes hi

1162
00:47:33,119 --> 00:47:35,599
it's he's there he can't tell you that

1163
00:47:35,599 --> 00:47:38,240
i've put some effort in in helping him

1164
00:47:38,240 --> 00:47:41,200
to not get rate limited but at the same

1165
00:47:41,200 --> 00:47:42,640
time

1166
00:47:42,640 --> 00:47:45,839
we as a company made a more universal

1167
00:47:45,839 --> 00:47:48,480
decision that in the same way that

1168
00:47:48,480 --> 00:47:52,000
we don't want to write

1169
00:47:52,000 --> 00:47:55,119
white list is a but we're allow list

1170
00:47:55,119 --> 00:47:56,240
somebody

1171
00:47:56,240 --> 00:47:58,079
i'm thinking that the rate limiting is

1172
00:47:58,079 --> 00:47:59,920
actually good for his mental health and

1173
00:47:59,920 --> 00:48:01,920
maybe he should have something that kind

1174
00:48:01,920 --> 00:48:04,240
of slows him down a little bit

1175
00:48:04,240 --> 00:48:06,319
yeah so the the decision was around the

1176
00:48:06,319 --> 00:48:09,280
lines of let's be fair to everybody

1177
00:48:09,280 --> 00:48:11,760
because maybe someone get not someone

1178
00:48:11,760 --> 00:48:13,280
actually many people got inspired from

1179
00:48:13,280 --> 00:48:15,760
jonathan lately and you never know how

1180
00:48:15,760 --> 00:48:18,079
this rate limit could play in the long

1181
00:48:18,079 --> 00:48:20,480
term when it gets into scale

1182
00:48:20,480 --> 00:48:22,559
no i get that okay one more relevant

1183
00:48:22,559 --> 00:48:24,720
question yes came in uh there is other

1184
00:48:24,720 --> 00:48:26,880
alternatives like semgrep how does this

1185
00:48:26,880 --> 00:48:29,040
compare to like seven rep in general and

1186
00:48:29,040 --> 00:48:30,079
the more

1187
00:48:30,079 --> 00:48:32,559
uh yeah how how would you compare it

1188
00:48:32,559 --> 00:48:36,160
absolutely i believe that what we do

1189
00:48:36,160 --> 00:48:36,960
well

1190
00:48:36,960 --> 00:48:39,680
is the tank tracking functionality so

1191
00:48:39,680 --> 00:48:42,559
you can follow your input along the way

1192
00:48:42,559 --> 00:48:44,640
like i've done in the demo and the other

1193
00:48:44,640 --> 00:48:48,319
thing we do well is the community think

1194
00:48:48,319 --> 00:48:49,280
so

1195
00:48:49,280 --> 00:48:52,079
of course same grab or whatever tool has

1196
00:48:52,079 --> 00:48:53,680
their own community

1197
00:48:53,680 --> 00:48:56,640
i believe that our benefit or let's say

1198
00:48:56,640 --> 00:48:59,040
pro is that this community is built from

1199
00:48:59,040 --> 00:49:01,920
the past 12 years and you have

1200
00:49:01,920 --> 00:49:03,760
enterprises contributing hunters

1201
00:49:03,760 --> 00:49:06,319
contributing and people who have the

1202
00:49:06,319 --> 00:49:08,400
knowledge codifying that knowledge into

1203
00:49:08,400 --> 00:49:10,880
the tool so this community is something

1204
00:49:10,880 --> 00:49:14,000
that you can build on top

1205
00:49:14,000 --> 00:49:16,559
okay thank you very much big round of

1206
00:49:16,559 --> 00:49:19,559
applause

