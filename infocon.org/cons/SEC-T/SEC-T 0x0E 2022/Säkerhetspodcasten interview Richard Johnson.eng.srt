1
00:00:03,380 --> 00:00:07,379
so hi we are on the second day of the

2
00:00:07,379 --> 00:00:10,740
SEC T conference and uh we have Richard

3
00:00:10,740 --> 00:00:14,040
with us who just came off stage and uh

4
00:00:14,040 --> 00:00:16,980
you were giving us a crash course in

5
00:00:16,980 --> 00:00:21,320
fussing sort of yeah

6
00:00:24,300 --> 00:00:27,900
but today I learned that there's a VM

7
00:00:27,900 --> 00:00:29,580
inside of it

8
00:00:29,580 --> 00:00:32,820
and a lot of things like yeah

9
00:00:32,820 --> 00:00:35,820
Yeah so basically the Berkeley packet

10
00:00:35,820 --> 00:00:37,640
filtering

11
00:00:37,640 --> 00:00:39,980
uh eBay

12
00:00:39,980 --> 00:00:44,660
I can't speak but but you have done

13
00:00:44,660 --> 00:00:51,000
proactive Research into an ebm ebpf

14
00:00:51,000 --> 00:00:52,800
Library Thing

15
00:00:52,800 --> 00:00:55,379
and then it just suddenly happens that

16
00:00:55,379 --> 00:00:57,360
Microsoft decides that they're going to

17
00:00:57,360 --> 00:00:59,160
make this goal

18
00:00:59,160 --> 00:01:01,559
yeah that's right so um well first of

19
00:01:01,559 --> 00:01:04,379
all I teach fuzzing and fuzzing is a big

20
00:01:04,379 --> 00:01:06,060
interest of mine so most of my talks end

21
00:01:06,060 --> 00:01:08,580
up being a platform for trying to pass

22
00:01:08,580 --> 00:01:10,500
on some education and showing people

23
00:01:10,500 --> 00:01:11,880
there's opportunity there for doing

24
00:01:11,880 --> 00:01:14,820
their own research but yeah the subject

25
00:01:14,820 --> 00:01:18,540
for this talk was a new ebpf platform

26
00:01:18,540 --> 00:01:21,780
for Windows and of course it's been

27
00:01:21,780 --> 00:01:23,640
around in Linux for a long time but

28
00:01:23,640 --> 00:01:27,600
Windows is adopting a similar system for

29
00:01:27,600 --> 00:01:29,340
allowing you to do packet filtering at

30
00:01:29,340 --> 00:01:32,280
high speed design for endpoints in the

31
00:01:32,280 --> 00:01:34,740
cloud and collecting Telemetry and

32
00:01:34,740 --> 00:01:37,259
things like that and yeah most people if

33
00:01:37,259 --> 00:01:38,939
they've heard about Berkeley packet

34
00:01:38,939 --> 00:01:41,820
filtering at all they think of it in the

35
00:01:41,820 --> 00:01:44,759
older technology stack that is designed

36
00:01:44,759 --> 00:01:46,799
for doing Simple filtering like through

37
00:01:46,799 --> 00:01:49,439
TCP dump or Wireshark or things along

38
00:01:49,439 --> 00:01:52,320
those lines and about 10 years ago Linux

39
00:01:52,320 --> 00:01:54,240
extended that interface so you can do

40
00:01:54,240 --> 00:01:57,500
hooking and also have much more powerful

41
00:01:57,500 --> 00:01:59,579
programs that could do an out also

42
00:01:59,579 --> 00:02:01,979
packets and not just simple filtering

43
00:02:01,979 --> 00:02:05,700
cool yeah so so what what took you on

44
00:02:05,700 --> 00:02:08,459
that path so sort of so to speak

45
00:02:08,459 --> 00:02:10,979
um why did you start looking at that or

46
00:02:10,979 --> 00:02:13,080
did you have a you know

47
00:02:13,080 --> 00:02:15,060
prior information that Microsoft would

48
00:02:15,060 --> 00:02:16,560
be starting you know looking at this

49
00:02:16,560 --> 00:02:18,420
yeah no it was actually

50
00:02:18,420 --> 00:02:20,580
um you know first I started looking at

51
00:02:20,580 --> 00:02:22,080
the Linux side actually because the last

52
00:02:22,080 --> 00:02:23,640
three or four years there's been an

53
00:02:23,640 --> 00:02:26,040
uptick in local kernel privilege

54
00:02:26,040 --> 00:02:28,860
escalation vulnerabilities there and uh

55
00:02:28,860 --> 00:02:32,040
also for red teaming and kind of attack

56
00:02:32,040 --> 00:02:33,720
tooling

57
00:02:33,720 --> 00:02:35,819
um and so I gave a talk last fall about

58
00:02:35,819 --> 00:02:38,819
how to use the Linux side to write

59
00:02:38,819 --> 00:02:40,800
attack and defense tooling so that talk

60
00:02:40,800 --> 00:02:43,500
was about how to implement a code

61
00:02:43,500 --> 00:02:45,900
verifier as you load programs and then

62
00:02:45,900 --> 00:02:47,819
also on the offensive side I showed how

63
00:02:47,819 --> 00:02:49,980
to basically rootkit processes on the

64
00:02:49,980 --> 00:02:51,660
fly so I was already looking at the

65
00:02:51,660 --> 00:02:54,720
Linux ecosystem and outside of what the

66
00:02:54,720 --> 00:02:56,760
Linux kernel provides I noticed that

67
00:02:56,760 --> 00:02:58,860
there was some new third-party open

68
00:02:58,860 --> 00:03:01,220
source projects that were related

69
00:03:01,220 --> 00:03:04,800
that took basically this virtual CPU

70
00:03:04,800 --> 00:03:08,459
that is what executes this byte code or

71
00:03:08,459 --> 00:03:11,459
it jits it to native code to to execute

72
00:03:11,459 --> 00:03:13,500
these filters I saw that there was a a

73
00:03:13,500 --> 00:03:15,780
library independent of the kernel

74
00:03:15,780 --> 00:03:17,819
implementation and I saw opportunity

75
00:03:17,819 --> 00:03:19,379
there because this could replace things

76
00:03:19,379 --> 00:03:22,800
like Lua or V8 and other virtual CPUs

77
00:03:22,800 --> 00:03:25,980
that run sandbox code and so I already

78
00:03:25,980 --> 00:03:28,019
started fuzzing that and then just by

79
00:03:28,019 --> 00:03:30,599
accident through you know doing more

80
00:03:30,599 --> 00:03:33,900
searches on that those libraries ubpf

81
00:03:33,900 --> 00:03:37,379
and Prevail I realized that oh the

82
00:03:37,379 --> 00:03:39,440
Microsoft is getting into the game and

83
00:03:39,440 --> 00:03:43,739
last May 2001 they started they

84
00:03:43,739 --> 00:03:44,640
announced that they were going to

85
00:03:44,640 --> 00:03:46,860
implement it and early this year about a

86
00:03:46,860 --> 00:03:48,840
year later they finally had a

87
00:03:48,840 --> 00:03:51,299
functioning first implementation that

88
00:03:51,299 --> 00:03:54,180
does the network layer stuff and they

89
00:03:54,180 --> 00:03:56,940
had ported the psyllium load balancer

90
00:03:56,940 --> 00:03:58,980
which is used in kubernetes in the cloud

91
00:03:58,980 --> 00:04:01,200
to the windows platform at that point

92
00:04:01,200 --> 00:04:03,060
and so it was

93
00:04:03,060 --> 00:04:04,799
um complete enough for me to actually go

94
00:04:04,799 --> 00:04:06,900
test it and since I'd already tested

95
00:04:06,900 --> 00:04:08,459
some of the components they were using I

96
00:04:08,459 --> 00:04:10,260
you know saw that as a huge opportunity

97
00:04:10,260 --> 00:04:12,239
and I was excited about the new

98
00:04:12,239 --> 00:04:14,459
technology stuff so sort of knew where

99
00:04:14,459 --> 00:04:16,798
to start looking at least yeah yeah I

100
00:04:16,798 --> 00:04:18,660
already felt as though well some of the

101
00:04:18,660 --> 00:04:20,399
work I did before would probably pay off

102
00:04:20,399 --> 00:04:22,260
because I didn't report all those bugs

103
00:04:22,260 --> 00:04:23,820
at the time

104
00:04:23,820 --> 00:04:25,800
um because you know when you fuzzle

105
00:04:25,800 --> 00:04:28,020
Library independently it's hard to know

106
00:04:28,020 --> 00:04:30,120
if those bugs will be reachable you know

107
00:04:30,120 --> 00:04:31,860
yeah a real piece of software so I

108
00:04:31,860 --> 00:04:33,840
wanted to wait until they were in a

109
00:04:33,840 --> 00:04:35,400
service also these projects are

110
00:04:35,400 --> 00:04:37,680
developed by you know one guy or a girl

111
00:04:37,680 --> 00:04:40,020
sitting you know doing a passion project

112
00:04:40,020 --> 00:04:42,540
and so yeah you don't want to overload

113
00:04:42,540 --> 00:04:44,820
them with a pile of crashes that are you

114
00:04:44,820 --> 00:04:46,680
know kind of discouraging in their

115
00:04:46,680 --> 00:04:49,139
efforts and so I waited until something

116
00:04:49,139 --> 00:04:50,940
came about and you know I was lucky

117
00:04:50,940 --> 00:04:53,220
enough for it to be a big player like

118
00:04:53,220 --> 00:04:57,180
Microsoft so like if we go back to

119
00:04:57,180 --> 00:05:00,360
basics yeah why haven't they selected to

120
00:05:00,360 --> 00:05:04,500
run their own video M here instead of

121
00:05:04,500 --> 00:05:06,900
like doing native code for for these

122
00:05:06,900 --> 00:05:09,660
options well one thing about using a

123
00:05:09,660 --> 00:05:11,820
virtual CPU is that once you adopt it

124
00:05:11,820 --> 00:05:14,220
then you can have cross-platform code

125
00:05:14,220 --> 00:05:16,320
that runs on top of it and so of course

126
00:05:16,320 --> 00:05:19,080
Microsoft as we've seen has you know

127
00:05:19,080 --> 00:05:21,120
Linux is now becoming a first-class

128
00:05:21,120 --> 00:05:22,919
citizen in the in the Microsoft world

129
00:05:22,919 --> 00:05:25,259
it's shipped in box and you know

130
00:05:25,259 --> 00:05:27,840
obviously with Azure they have a huge

131
00:05:27,840 --> 00:05:31,020
investment in Linux based platforms and

132
00:05:31,020 --> 00:05:32,880
I think that especially with Azure where

133
00:05:32,880 --> 00:05:35,340
they have Windows and Linux endpoints

134
00:05:35,340 --> 00:05:38,220
available to rent and they need to do

135
00:05:38,220 --> 00:05:39,900
observation on both these things as well

136
00:05:39,900 --> 00:05:41,940
as with Defender they have Defender for

137
00:05:41,940 --> 00:05:43,800
Linux and Defender for Windows it just

138
00:05:43,800 --> 00:05:45,960
makes sense it's a unifying technology

139
00:05:45,960 --> 00:05:48,900
for Doing Network observation so if you

140
00:05:48,900 --> 00:05:53,520
will have the an ebit ebpf filter

141
00:05:53,520 --> 00:05:56,900
for the network side

142
00:05:57,780 --> 00:06:01,080
that is actually like cross-platform not

143
00:06:01,080 --> 00:06:04,020
just over the x86 versus Arm but but the

144
00:06:04,020 --> 00:06:06,840
movement between Linux and windows that

145
00:06:06,840 --> 00:06:09,000
will work well exactly because it

146
00:06:09,000 --> 00:06:11,820
abstracts away the x86 or arm or even

147
00:06:11,820 --> 00:06:14,699
the OS layer system calls and so it has

148
00:06:14,699 --> 00:06:17,340
its own set of apis at the end of the

149
00:06:17,340 --> 00:06:19,020
day you implement functions that get

150
00:06:19,020 --> 00:06:20,940
network packets and you can do things

151
00:06:20,940 --> 00:06:22,979
like not only Implement load balancing

152
00:06:22,979 --> 00:06:25,500
but you could do anti-ddos or you could

153
00:06:25,500 --> 00:06:29,039
do generic Telemetry collection trying

154
00:06:29,039 --> 00:06:33,300
to figure out what DNS lookup requests a

155
00:06:33,300 --> 00:06:35,819
particular you know endpoint is doing

156
00:06:35,819 --> 00:06:37,620
all anything that you want from there

157
00:06:37,620 --> 00:06:40,199
right cool so

158
00:06:40,199 --> 00:06:44,460
um if if you um if you were to point uh

159
00:06:44,460 --> 00:06:48,300
someone to you know who's new to fussing

160
00:06:48,300 --> 00:06:50,400
where where would you

161
00:06:50,400 --> 00:06:52,259
you know tell them to start

162
00:06:52,259 --> 00:06:54,720
right so actually you know I get excited

163
00:06:54,720 --> 00:06:56,160
about this topic so I'll try to keep it

164
00:06:56,160 --> 00:06:59,100
brief but uh about five or six years ago

165
00:06:59,100 --> 00:07:01,139
uh you know we entered into what I'm

166
00:07:01,139 --> 00:07:02,960
considering a fuzzing Renaissance

167
00:07:02,960 --> 00:07:05,880
because a famous researcher Michael

168
00:07:05,880 --> 00:07:08,460
zaweski released a tool called AFL

169
00:07:08,460 --> 00:07:11,699
American fuzzy lop and

170
00:07:11,699 --> 00:07:13,560
um this Incorporated code coverage

171
00:07:13,560 --> 00:07:15,780
feedback into traditional mutational

172
00:07:15,780 --> 00:07:19,380
fuzzing and created a kind of a genetic

173
00:07:19,380 --> 00:07:21,900
algorithm around that where basically

174
00:07:21,900 --> 00:07:24,300
Brute Force search but done at a very

175
00:07:24,300 --> 00:07:26,759
high speed and trillions of times will

176
00:07:26,759 --> 00:07:30,240
eventually produce a refined uh you know

177
00:07:30,240 --> 00:07:33,000
output that ultimately finds bugs and so

178
00:07:33,000 --> 00:07:36,900
AFL plus plus now is the version the

179
00:07:36,900 --> 00:07:38,759
most immediately available tooling for

180
00:07:38,759 --> 00:07:41,039
researchers and if you're a developer

181
00:07:41,039 --> 00:07:43,800
actually built into llvm is something

182
00:07:43,800 --> 00:07:45,900
called lib fuzzer yeah and so you can

183
00:07:45,900 --> 00:07:48,300
write a function that interacts with

184
00:07:48,300 --> 00:07:51,479
your apis and you receive fuzzy data and

185
00:07:51,479 --> 00:07:53,340
then you can just send it to those apis

186
00:07:53,340 --> 00:07:54,840
and whatnot so those are the easiest

187
00:07:54,840 --> 00:07:57,479
ways to get into it I highlighted a new

188
00:07:57,479 --> 00:07:59,340
technology that's about a year old

189
00:07:59,340 --> 00:08:01,919
called WTF fuzzer because those other

190
00:08:01,919 --> 00:08:04,080
two feathers aren't really capable of

191
00:08:04,080 --> 00:08:07,020
targeting kernel code and so WTF is a

192
00:08:07,020 --> 00:08:09,180
snapshot fuzzer that allows you to take

193
00:08:09,180 --> 00:08:13,020
a memory dump from any x86 Target x64

194
00:08:13,020 --> 00:08:17,039
Target windows or Linux or other and

195
00:08:17,039 --> 00:08:20,099
perform fuzzing from there and user or

196
00:08:20,099 --> 00:08:23,759
kernel arbitrary location yeah cool

197
00:08:23,759 --> 00:08:26,580
all right well um thank you so much for

198
00:08:26,580 --> 00:08:28,500
taking the time to talk to us it was

199
00:08:28,500 --> 00:08:31,800
nice it was an interesting talk and

200
00:08:31,800 --> 00:08:34,380
um well there's one more speaker so

201
00:08:34,380 --> 00:08:36,120
let's go out and enjoy the rest of the

202
00:08:36,120 --> 00:08:37,500
conference yeah thanks for having me

203
00:08:37,500 --> 00:08:39,719
this is my first time to Sweden and uh

204
00:08:39,719 --> 00:08:41,099
just you know shout out to the SEC T

205
00:08:41,099 --> 00:08:42,899
crew and everybody and making this

206
00:08:42,899 --> 00:08:44,940
happen yeah thank you so much thank you

207
00:08:44,940 --> 00:08:49,220
very much super interesting talk thanks

