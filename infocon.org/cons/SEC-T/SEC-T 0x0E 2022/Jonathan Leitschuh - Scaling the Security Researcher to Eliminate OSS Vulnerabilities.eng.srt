1
00:00:03,020 --> 00:00:06,000
thank you all and uh welcome and I hope

2
00:00:06,000 --> 00:00:09,540
lunch was good uh yeah so uh this is

3
00:00:09,540 --> 00:00:11,280
scaling secure scaling the security

4
00:00:11,280 --> 00:00:12,960
researcher to eliminate open source

5
00:00:12,960 --> 00:00:14,340
security vulnerabilities once and for

6
00:00:14,340 --> 00:00:15,780
all

7
00:00:15,780 --> 00:00:18,060
um who am I my name is Jonathan lychu uh

8
00:00:18,060 --> 00:00:19,500
I'm a software engineer and software

9
00:00:19,500 --> 00:00:21,000
security researcher I'm the first ever

10
00:00:21,000 --> 00:00:23,400
Dan Kaminsky fellow I'm a GitHub star

11
00:00:23,400 --> 00:00:25,260
get them security Ambassador and you can

12
00:00:25,260 --> 00:00:27,300
find me on Twitter at J light shoe and

13
00:00:27,300 --> 00:00:30,599
also on GitHub under the same handle

14
00:00:30,599 --> 00:00:32,700
um so a little bit of a disclaimer just

15
00:00:32,700 --> 00:00:33,660
quickly

16
00:00:33,660 --> 00:00:36,780
um this does cover SAS service and some

17
00:00:36,780 --> 00:00:39,180
stuff that is uh

18
00:00:39,180 --> 00:00:42,000
a SAS but all the technology discussed

19
00:00:42,000 --> 00:00:43,200
in this talk is available for free for

20
00:00:43,200 --> 00:00:44,940
open source and all of you can use it to

21
00:00:44,940 --> 00:00:47,460
deploy across your organizations

22
00:00:47,460 --> 00:00:48,300
um

23
00:00:48,300 --> 00:00:50,340
yes so

24
00:00:50,340 --> 00:00:52,200
um this work is supported by the Dan

25
00:00:52,200 --> 00:00:54,420
Kaminsky fellowship at human

26
00:00:54,420 --> 00:00:57,600
um for those who you don't know Dan was

27
00:00:57,600 --> 00:00:59,699
uh known for his

28
00:00:59,699 --> 00:01:02,699
like incredible DNS vulnerability back

29
00:01:02,699 --> 00:01:04,199
in 2008

30
00:01:04,199 --> 00:01:05,700
um disclose this vulnerability quietly

31
00:01:05,700 --> 00:01:07,560
he was also known for his kindness I

32
00:01:07,560 --> 00:01:08,700
unfortunately never got the opportunity

33
00:01:08,700 --> 00:01:11,760
to meet Dan Dan passed away last year

34
00:01:11,760 --> 00:01:15,200
and the fellowship was created to

35
00:01:15,200 --> 00:01:17,700
celebrate Dan's memory and Legacy by

36
00:01:17,700 --> 00:01:20,040
funding open source work that makes the

37
00:01:20,040 --> 00:01:22,860
world a better and more secure place and

38
00:01:22,860 --> 00:01:24,180
so this is the work that I've been doing

39
00:01:24,180 --> 00:01:26,040
uh for the past year under this

40
00:01:26,040 --> 00:01:27,420
Fellowship

41
00:01:27,420 --> 00:01:29,880
so spoilers

42
00:01:29,880 --> 00:01:30,900
um

43
00:01:30,900 --> 00:01:33,180
we're going to talk about uh finding and

44
00:01:33,180 --> 00:01:34,200
fixing widespread common security

45
00:01:34,200 --> 00:01:37,680
vulnerabilities across open source and

46
00:01:37,680 --> 00:01:39,060
oh

47
00:01:39,060 --> 00:01:42,180
wow I skipped ahead a lot there

48
00:01:42,180 --> 00:01:45,000
great okay so I generated a pull request

49
00:01:45,000 --> 00:01:49,020
I generated over uh one

50
00:01:49,020 --> 00:01:51,960
140 pull requests to fix zip slip across

51
00:01:51,960 --> 00:01:54,360
the open source ecosystem but there's a

52
00:01:54,360 --> 00:01:56,579
long story for how we got there and so

53
00:01:56,579 --> 00:01:58,920
let's start at the beginning and it

54
00:01:58,920 --> 00:02:01,079
started with a simple vulnerability uh

55
00:02:01,079 --> 00:02:03,960
in particular this vulnerability it was

56
00:02:03,960 --> 00:02:07,259
the use of HTTP to resolve dependencies

57
00:02:07,259 --> 00:02:09,360
in my company's Gradle build

58
00:02:09,360 --> 00:02:11,038
and I was curious how this code got

59
00:02:11,038 --> 00:02:13,319
there and the answer was when I tracked

60
00:02:13,319 --> 00:02:15,300
it down I'd copied and pasted from

61
00:02:15,300 --> 00:02:17,340
pasted it from an open source project

62
00:02:17,340 --> 00:02:19,260
and so why is this important well the

63
00:02:19,260 --> 00:02:22,319
use of HTTP in your Maven or Gradle

64
00:02:22,319 --> 00:02:24,180
build can result in a man in the middle

65
00:02:24,180 --> 00:02:27,599
uh attack which can allow an attacker to

66
00:02:27,599 --> 00:02:29,819
compromise the jar files that you're

67
00:02:29,819 --> 00:02:31,200
downloading

68
00:02:31,200 --> 00:02:33,599
um into your Maven build and allow for

69
00:02:33,599 --> 00:02:35,280
remote code execution inside of your CI

70
00:02:35,280 --> 00:02:37,860
CD pipeline or if it gets into your end

71
00:02:37,860 --> 00:02:39,599
application end up in your end

72
00:02:39,599 --> 00:02:43,260
application Android app yada yada and so

73
00:02:43,260 --> 00:02:44,580
this is an example where it also shows

74
00:02:44,580 --> 00:02:47,220
up in Maven Palm files so Gradle is the

75
00:02:47,220 --> 00:02:49,080
first build and it's used to build 50 of

76
00:02:49,080 --> 00:02:51,540
jaw Java applications and 99 of all

77
00:02:51,540 --> 00:02:53,519
Android applications maven's used to

78
00:02:53,519 --> 00:02:55,019
build the other 50 of all Java

79
00:02:55,019 --> 00:02:56,819
applications

80
00:02:56,819 --> 00:02:58,019
um and this is where that vulnerability

81
00:02:58,019 --> 00:03:00,360
exists in the upload of those artifacts

82
00:03:00,360 --> 00:03:02,400
once you're done with your build

83
00:03:02,400 --> 00:03:03,959
um and this vulnerability was everywhere

84
00:03:03,959 --> 00:03:06,480
it was in the builds of organizations

85
00:03:06,480 --> 00:03:07,980
like

86
00:03:07,980 --> 00:03:11,159
um spring Apache Foundation red hat

87
00:03:11,159 --> 00:03:14,879
kotlin jet brains Jenkins Gradle groovy

88
00:03:14,879 --> 00:03:18,959
elastic Eclipse Foundation you know uh

89
00:03:18,959 --> 00:03:21,480
on top of that Oracle the NSA LinkedIn

90
00:03:21,480 --> 00:03:23,519
stripe it was all over the open source

91
00:03:23,519 --> 00:03:25,260
ecosystem

92
00:03:25,260 --> 00:03:27,900
um and when I reached out to so Maven

93
00:03:27,900 --> 00:03:31,920
sonar type is the npm of the Java Java

94
00:03:31,920 --> 00:03:35,159
ecosystem so NP npm uh or pip for the

95
00:03:35,159 --> 00:03:37,200
python ecosystem Maven sonotype hosts

96
00:03:37,200 --> 00:03:38,879
the maven Central repository which is

97
00:03:38,879 --> 00:03:40,319
the equivalent for the Java ecosystem

98
00:03:40,319 --> 00:03:41,879
and when I reached out to them about

99
00:03:41,879 --> 00:03:44,400
this widespread security vulnerability

100
00:03:44,400 --> 00:03:45,900
um they said after looking at the

101
00:03:45,900 --> 00:03:48,060
traffic for a month that 25 of their

102
00:03:48,060 --> 00:03:49,799
traffic was still using HTTP to resolve

103
00:03:49,799 --> 00:03:52,200
their dependencies back in 2019.

104
00:03:52,200 --> 00:03:55,799
so how do we fix this

105
00:03:55,799 --> 00:03:58,260
um I pushed for an initiative that on

106
00:03:58,260 --> 00:04:00,959
January 15 2020 all the major artifact

107
00:04:00,959 --> 00:04:02,940
servers would stop supporting HTTP in

108
00:04:02,940 --> 00:04:05,480
favor of https only across the industry

109
00:04:05,480 --> 00:04:08,879
and this was received well the industry

110
00:04:08,879 --> 00:04:11,700
uh moved forward with me and said yes

111
00:04:11,700 --> 00:04:13,500
we'll do this and a bunch of blog posts

112
00:04:13,500 --> 00:04:14,819
were published

113
00:04:14,819 --> 00:04:18,540
however even after many months of

114
00:04:18,540 --> 00:04:22,260
disclosure blog posts after in January

115
00:04:22,260 --> 00:04:24,780
of 2020 Maven Central reported that 20

116
00:04:24,780 --> 00:04:26,940
of their traffic was still using HTTP

117
00:04:26,940 --> 00:04:28,259
instead of https to resolve their

118
00:04:28,259 --> 00:04:29,820
dependencies

119
00:04:29,820 --> 00:04:31,320
and so

120
00:04:31,320 --> 00:04:33,720
you can imagine what might have happened

121
00:04:33,720 --> 00:04:37,259
on January 15 2020

122
00:04:37,259 --> 00:04:40,440
broken software everywhere lots of

123
00:04:40,440 --> 00:04:42,479
broken builds a couple of posts on stack

124
00:04:42,479 --> 00:04:46,199
Overflow uh yes but we stopped the

125
00:04:46,199 --> 00:04:47,820
bleeding

126
00:04:47,820 --> 00:04:48,540
um

127
00:04:48,540 --> 00:04:49,800
so but

128
00:04:49,800 --> 00:04:51,360
what about the other repositories the

129
00:04:51,360 --> 00:04:53,100
repositories that I listed are only the

130
00:04:53,100 --> 00:04:54,540
most common repositories used in the

131
00:04:54,540 --> 00:04:56,120
Java ecosystem

132
00:04:56,120 --> 00:04:59,580
and unlike npm python all those have one

133
00:04:59,580 --> 00:05:01,440
Central repository the Java system came

134
00:05:01,440 --> 00:05:03,660
very early and it has a wide number of

135
00:05:03,660 --> 00:05:05,220
repositories and also organizations

136
00:05:05,220 --> 00:05:07,500
sometimes host their own artifacts the

137
00:05:07,500 --> 00:05:08,639
eclipse Foundation has their own

138
00:05:08,639 --> 00:05:10,740
artifact server Jenkins has its own

139
00:05:10,740 --> 00:05:12,960
artifact server so there's a bunch of

140
00:05:12,960 --> 00:05:14,520
other artifact servers in the industry

141
00:05:14,520 --> 00:05:17,460
that's used widely and so this only

142
00:05:17,460 --> 00:05:19,139
fixed it for the most commonly widely

143
00:05:19,139 --> 00:05:20,820
used artifact servers not the long tail

144
00:05:20,820 --> 00:05:22,139
of Open Source

145
00:05:22,139 --> 00:05:24,720
and so yeah so these are the only

146
00:05:24,720 --> 00:05:26,039
projects that are fixed so how do we fix

147
00:05:26,039 --> 00:05:28,919
the rest and I said well

148
00:05:28,919 --> 00:05:30,539
I want to try blood pressure generation

149
00:05:30,539 --> 00:05:32,280
why don't we just go and fix the open

150
00:05:32,280 --> 00:05:34,500
source projects across the industry

151
00:05:34,500 --> 00:05:36,360
and and just get rid of this open this

152
00:05:36,360 --> 00:05:38,940
vulnerability from up across open source

153
00:05:38,940 --> 00:05:40,620
so how

154
00:05:40,620 --> 00:05:41,820
so the first thing that I did was I

155
00:05:41,820 --> 00:05:45,000
wrote a code ql query this query uh

156
00:05:45,000 --> 00:05:47,699
which looks inside of the mavenpom files

157
00:05:47,699 --> 00:05:49,560
to find this vulnerability and identify

158
00:05:49,560 --> 00:05:52,500
it and flag it down and then uh because

159
00:05:52,500 --> 00:05:54,600
code ql scans over a hundred thousand

160
00:05:54,600 --> 00:05:56,639
open source projects

161
00:05:56,639 --> 00:05:58,320
um I was able to use this query to get a

162
00:05:58,320 --> 00:05:59,940
list of vulnerable projects and also

163
00:05:59,940 --> 00:06:01,139
because I wrote this query and

164
00:06:01,139 --> 00:06:03,120
contributed back to GitHub and the

165
00:06:03,120 --> 00:06:05,699
GitHub security lab they paid me a 2 300

166
00:06:05,699 --> 00:06:07,500
Bounty for this this simple little bit

167
00:06:07,500 --> 00:06:09,660
of code and a bit of documentation

168
00:06:09,660 --> 00:06:11,940
and so using the list of vulnerable

169
00:06:11,940 --> 00:06:14,639
projects that code ql gave me I wrote a

170
00:06:14,639 --> 00:06:16,800
pull request generator in Python and so

171
00:06:16,800 --> 00:06:18,419
the first variant of my bulk pull

172
00:06:18,419 --> 00:06:19,860
request generator was written in Python

173
00:06:19,860 --> 00:06:23,699
it was a wrapper over the Hub CLI it had

174
00:06:23,699 --> 00:06:25,380
one nasty regular expression and a lot

175
00:06:25,380 --> 00:06:26,880
of logic for bouncing off of github's

176
00:06:26,880 --> 00:06:29,479
rate limiter

177
00:06:29,699 --> 00:06:31,440
um and this is the actually this is the

178
00:06:31,440 --> 00:06:32,639
not the underlying engine this is the

179
00:06:32,639 --> 00:06:34,020
implementation the underlying engine

180
00:06:34,020 --> 00:06:36,419
would run this logic and generate a pull

181
00:06:36,419 --> 00:06:38,880
request with that comment and with that

182
00:06:38,880 --> 00:06:41,340
commit message and here's the regular

183
00:06:41,340 --> 00:06:42,960
expression

184
00:06:42,960 --> 00:06:44,220
um and the reason that you have to use a

185
00:06:44,220 --> 00:06:47,580
regular expression is because no XML

186
00:06:47,580 --> 00:06:51,300
parsers in the across what I could find

187
00:06:51,300 --> 00:06:53,759
when you parse in an XML file and you

188
00:06:53,759 --> 00:06:55,319
make a modification to it and you dump

189
00:06:55,319 --> 00:06:57,660
it back out will match the style of the

190
00:06:57,660 --> 00:07:00,000
XML that was put into it so if you want

191
00:07:00,000 --> 00:07:02,220
to make modifications across hundreds or

192
00:07:02,220 --> 00:07:04,919
thousands of different projects you

193
00:07:04,919 --> 00:07:07,620
can't use an XML parser because you'll

194
00:07:07,620 --> 00:07:10,620
get a giant diff across the entire file

195
00:07:10,620 --> 00:07:12,240
the other but the problem with regular

196
00:07:12,240 --> 00:07:13,560
Expressions is that if you choose to use

197
00:07:13,560 --> 00:07:15,360
regular Expressions as your solution to

198
00:07:15,360 --> 00:07:20,360
the problem you end up with two problems

199
00:07:21,360 --> 00:07:23,220
it worked

200
00:07:23,220 --> 00:07:25,860
um I generated pull requests uh this is

201
00:07:25,860 --> 00:07:27,060
an example of the diff that was

202
00:07:27,060 --> 00:07:28,560
generated uh you can see all the

203
00:07:28,560 --> 00:07:30,599
replacements in code

204
00:07:30,599 --> 00:07:32,520
um and for this for this particular

205
00:07:32,520 --> 00:07:35,940
campaign I generated 1 596 pull requests

206
00:07:35,940 --> 00:07:37,919
across the Java ecosystem and this was

207
00:07:37,919 --> 00:07:41,940
in 2019 or late early 2020 and as of

208
00:07:41,940 --> 00:07:45,360
today 2022 uh has been over 40 merge

209
00:07:45,360 --> 00:07:48,060
rate of that so fixed a widespread

210
00:07:48,060 --> 00:07:49,319
common security vulnerability across the

211
00:07:49,319 --> 00:07:51,120
open source ecosystem and for this work

212
00:07:51,120 --> 00:07:53,039
get a bountied me a four thousand dollar

213
00:07:53,039 --> 00:07:55,020
bounty on top of the original payment

214
00:07:55,020 --> 00:07:57,180
for the code coil query

215
00:07:57,180 --> 00:07:58,740
um as a part of their GitHub security

216
00:07:58,740 --> 00:08:00,539
lab bug money program

217
00:08:00,539 --> 00:08:03,180
and so

218
00:08:03,180 --> 00:08:05,340
I got hooked on this idea of bulk polar

219
00:08:05,340 --> 00:08:07,500
crash generation as a concept for fixing

220
00:08:07,500 --> 00:08:09,539
widespread security vulnerabilities

221
00:08:09,539 --> 00:08:12,240
this is my GitHub contribution graph for

222
00:08:12,240 --> 00:08:15,000
uh 2020. uh you I actually did two

223
00:08:15,000 --> 00:08:16,860
different open source campaigns in 2020

224
00:08:16,860 --> 00:08:18,120
to fix widespread security

225
00:08:18,120 --> 00:08:20,280
vulnerabilities

226
00:08:20,280 --> 00:08:22,500
I have a problem

227
00:08:22,500 --> 00:08:26,280
and IV ADHD that's not the problem that

228
00:08:26,280 --> 00:08:28,379
I have the problem that I have is that

229
00:08:28,379 --> 00:08:31,740
with my ADHD I love chasing squirrels I

230
00:08:31,740 --> 00:08:34,679
I will go and find I will go and read

231
00:08:34,679 --> 00:08:37,080
vulnerability disclosures and I will go

232
00:08:37,080 --> 00:08:38,399
and be curious about that vulnerability

233
00:08:38,399 --> 00:08:40,399
and then I can write a code quote query

234
00:08:40,399 --> 00:08:44,580
or a a GitHub code search query search

235
00:08:44,580 --> 00:08:48,060
and I will find just pages and pages of

236
00:08:48,060 --> 00:08:49,320
the same vulnerability across open

237
00:08:49,320 --> 00:08:50,640
source

238
00:08:50,640 --> 00:08:52,440
um I have this problem where I'm finding

239
00:08:52,440 --> 00:08:55,140
too many vulnerabilities

240
00:08:55,140 --> 00:08:57,660
um and so this for an example this is a

241
00:08:57,660 --> 00:09:00,660
zip slip this is codeql finding

242
00:09:00,660 --> 00:09:02,339
vulnerability called zip slip which I'll

243
00:09:02,339 --> 00:09:04,019
talk to you more about later and there's

244
00:09:04,019 --> 00:09:06,240
pages and pages and pages of this that

245
00:09:06,240 --> 00:09:08,640
you can you can page through on lgtm.com

246
00:09:08,640 --> 00:09:10,800
until they decommission it in December

247
00:09:10,800 --> 00:09:12,600
and then you

248
00:09:12,600 --> 00:09:14,100
there'll be something else after that

249
00:09:14,100 --> 00:09:15,660
but uh yeah

250
00:09:15,660 --> 00:09:17,399
um so I'm finding too many security

251
00:09:17,399 --> 00:09:19,560
vulnerabilities and I need a way to

252
00:09:19,560 --> 00:09:21,120
solve this problem I can't disclose to

253
00:09:21,120 --> 00:09:22,440
all these projects

254
00:09:22,440 --> 00:09:25,800
I need automation to fix this problem

255
00:09:25,800 --> 00:09:28,440
so I need automated accurate

256
00:09:28,440 --> 00:09:30,899
Transformations at massive scale and so

257
00:09:30,899 --> 00:09:33,779
this is where I I was looking for a

258
00:09:33,779 --> 00:09:35,580
solution to this problem and this is

259
00:09:35,580 --> 00:09:37,200
where open rewrite comes in so open

260
00:09:37,200 --> 00:09:39,360
rewrite is an open source

261
00:09:39,360 --> 00:09:42,899
project on on GitHub you can find it and

262
00:09:42,899 --> 00:09:44,519
they

263
00:09:44,519 --> 00:09:47,820
will as your code is compiling build an

264
00:09:47,820 --> 00:09:51,240
abstract syntax tree for your code the

265
00:09:51,240 --> 00:09:52,200
problem

266
00:09:52,200 --> 00:09:54,240
so when you're running the compiler for

267
00:09:54,240 --> 00:09:57,420
most compiled languages they just output

268
00:09:57,420 --> 00:09:59,700
the abstract syntax tree internally to

269
00:09:59,700 --> 00:10:01,920
do the compilation they don't care about

270
00:10:01,920 --> 00:10:03,660
the formatting and the white space and

271
00:10:03,660 --> 00:10:06,660
so if you have this source code and you

272
00:10:06,660 --> 00:10:08,880
transform it into an AST

273
00:10:08,880 --> 00:10:10,680
if you wanted to dump that ASD back out

274
00:10:10,680 --> 00:10:12,720
into source code again you lose all the

275
00:10:12,720 --> 00:10:14,399
typing you lose all the spacing all the

276
00:10:14,399 --> 00:10:16,800
tabs you just end up with just

277
00:10:16,800 --> 00:10:18,720
you know no white space it's completely

278
00:10:18,720 --> 00:10:21,120
you know not quite obfuscated but you

279
00:10:21,120 --> 00:10:23,339
know it's not the code that came in

280
00:10:23,339 --> 00:10:26,339
and so open rewrite does this thing

281
00:10:26,339 --> 00:10:28,140
where as it's parsing the source code it

282
00:10:28,140 --> 00:10:30,779
also preserves this the white space

283
00:10:30,779 --> 00:10:32,459
so it keeps that so that you can

284
00:10:32,459 --> 00:10:34,380
transform it back into the original

285
00:10:34,380 --> 00:10:35,820
source code

286
00:10:35,820 --> 00:10:37,320
and and you can go back and forth

287
00:10:37,320 --> 00:10:39,720
between these formats and on top of that

288
00:10:39,720 --> 00:10:41,700
as it's parsing the source code it'll

289
00:10:41,700 --> 00:10:43,860
also keep track of the formatting of the

290
00:10:43,860 --> 00:10:46,260
source code and so if you want to if you

291
00:10:46,260 --> 00:10:48,060
need to generate new code it will

292
00:10:48,060 --> 00:10:49,440
generate new code that matches the

293
00:10:49,440 --> 00:10:52,200
surrounding formatting style so here's

294
00:10:52,200 --> 00:10:54,660
an example of three different bits of

295
00:10:54,660 --> 00:10:55,980
code in different programming languages

296
00:10:55,980 --> 00:10:58,019
some use tabs some use spaces some have

297
00:10:58,019 --> 00:11:00,240
the braces on a new line and open

298
00:11:00,240 --> 00:11:01,800
rewrite will keep track of all that

299
00:11:01,800 --> 00:11:03,480
stuff as it's

300
00:11:03,480 --> 00:11:06,779
um in ingesting the the source code and

301
00:11:06,779 --> 00:11:08,220
determine what your formatting is for

302
00:11:08,220 --> 00:11:09,839
your source code

303
00:11:09,839 --> 00:11:12,660
on top of it the the AST is fully tripe

304
00:11:12,660 --> 00:11:13,860
attributed

305
00:11:13,860 --> 00:11:15,360
um one example that this is really

306
00:11:15,360 --> 00:11:16,440
important is let's say you have a

307
00:11:16,440 --> 00:11:18,060
vulnerability in a specific logging

308
00:11:18,060 --> 00:11:19,620
framework right

309
00:11:19,620 --> 00:11:20,760
um who would ever think that that might

310
00:11:20,760 --> 00:11:21,839
happen

311
00:11:21,839 --> 00:11:22,459
um

312
00:11:22,459 --> 00:11:24,839
and is if you're looking at the source

313
00:11:24,839 --> 00:11:27,300
code is this log for J slf4j log back

314
00:11:27,300 --> 00:11:28,500
there's a bunch of different logging

315
00:11:28,500 --> 00:11:29,940
Frameworks in the Java ecosystem you

316
00:11:29,940 --> 00:11:31,880
might not know and so you need type

317
00:11:31,880 --> 00:11:33,779
attribution to be able to determine

318
00:11:33,779 --> 00:11:36,180
which language or which library that

319
00:11:36,180 --> 00:11:38,339
that API call comes from

320
00:11:38,339 --> 00:11:41,100
and so this is the uh the type you know

321
00:11:41,100 --> 00:11:43,320
uh the the type on the left or the one

322
00:11:43,320 --> 00:11:45,959
on the left is uh uh just the syntax

323
00:11:45,959 --> 00:11:48,720
alone and then um when you add the types

324
00:11:48,720 --> 00:11:50,279
and you get a very very rich actually

325
00:11:50,279 --> 00:11:52,260
the 6000 nodes missing from that graph

326
00:11:52,260 --> 00:11:53,820
on the left side because it would just

327
00:11:53,820 --> 00:11:55,560
be fuzz

328
00:11:55,560 --> 00:11:59,640
um but this allows even simple code uh

329
00:11:59,640 --> 00:12:01,860
because even simple code that you're

330
00:12:01,860 --> 00:12:03,360
trying to introduce into the into the

331
00:12:03,360 --> 00:12:06,060
abstract syntax tree is a complex AST if

332
00:12:06,060 --> 00:12:08,839
I want to inject new code into the AST

333
00:12:08,839 --> 00:12:12,060
I need to I need to generate new code

334
00:12:12,060 --> 00:12:14,459
right and that tree is really

335
00:12:14,459 --> 00:12:16,380
complicated you know it's hard to craft

336
00:12:16,380 --> 00:12:19,320
by hand and so let's say I want to add

337
00:12:19,320 --> 00:12:21,240
this guard which I'll talk to you more

338
00:12:21,240 --> 00:12:23,700
about which fixes zip slip

339
00:12:23,700 --> 00:12:25,800
um how do I create the abstract syntax

340
00:12:25,800 --> 00:12:29,339
tree nodes to generate that bit of code

341
00:12:29,339 --> 00:12:31,620
to add to the tree to then generate the

342
00:12:31,620 --> 00:12:34,019
fix and that's where Java templates were

343
00:12:34,019 --> 00:12:37,440
introduced it lets you write Java code

344
00:12:37,440 --> 00:12:39,600
and it'll generate the tree for you and

345
00:12:39,600 --> 00:12:41,100
you can just insert that into the tree

346
00:12:41,100 --> 00:12:44,040
and generate new code and then add it

347
00:12:44,040 --> 00:12:45,540
into the source code with this simple

348
00:12:45,540 --> 00:12:47,339
template that says with a coordinate

349
00:12:47,339 --> 00:12:50,940
system place this if statement after

350
00:12:50,940 --> 00:12:53,399
this previous statement in the source

351
00:12:53,399 --> 00:12:55,260
code and then when that's returned you

352
00:12:55,260 --> 00:12:56,459
get a diff

353
00:12:56,459 --> 00:12:58,019
and so you can start out with this

354
00:12:58,019 --> 00:12:59,820
vulnerable code and replace it with this

355
00:12:59,820 --> 00:13:02,100
non-vulnerable code

356
00:13:02,100 --> 00:13:04,079
so what's possible now

357
00:13:04,079 --> 00:13:06,000
what other vulnerabilities can we fixed

358
00:13:06,000 --> 00:13:08,160
that open rewrite unlocks I'm going to

359
00:13:08,160 --> 00:13:08,880
talk to you about three different

360
00:13:08,880 --> 00:13:10,860
security vulnerabilities that I tackled

361
00:13:10,860 --> 00:13:13,019
with openrete to fix at scale across

362
00:13:13,019 --> 00:13:15,120
open source temp directory hijacking

363
00:13:15,120 --> 00:13:19,500
partial past reversal and zip slip

364
00:13:19,500 --> 00:13:20,279
um

365
00:13:20,279 --> 00:13:22,800
so vulnerability number one temporary

366
00:13:22,800 --> 00:13:24,720
directory hijacking

367
00:13:24,720 --> 00:13:26,760
temporary directory hijacking is a

368
00:13:26,760 --> 00:13:28,620
vulnerability that exists on unix-like

369
00:13:28,620 --> 00:13:29,940
systems

370
00:13:29,940 --> 00:13:32,339
um because it uh the system temp

371
00:13:32,339 --> 00:13:34,079
directory gotten you know on unix-like

372
00:13:34,079 --> 00:13:36,600
systems is shared between all users

373
00:13:36,600 --> 00:13:38,700
and this vulnerability here's an example

374
00:13:38,700 --> 00:13:40,320
of this vulnerability

375
00:13:40,320 --> 00:13:44,339
this vulnerability uh is uh basically

376
00:13:44,339 --> 00:13:47,519
caused because prior to Java 1.7 there

377
00:13:47,519 --> 00:13:49,800
did not exist an API to create a temp

378
00:13:49,800 --> 00:13:51,779
directory so the way that most people

379
00:13:51,779 --> 00:13:53,100
create attempt directories was they

380
00:13:53,100 --> 00:13:55,620
called create temp file which creates a

381
00:13:55,620 --> 00:13:58,500
securely randomly number randomly named

382
00:13:58,500 --> 00:14:00,540
file in the temp directory that's not

383
00:14:00,540 --> 00:14:02,459
predictable then they called delete on

384
00:14:02,459 --> 00:14:04,440
it and then they call maketer

385
00:14:04,440 --> 00:14:07,320
and this vulnerability uh the reason

386
00:14:07,320 --> 00:14:08,700
that this pattern showed up so much is

387
00:14:08,700 --> 00:14:10,019
if you looked for how do you create a

388
00:14:10,019 --> 00:14:11,880
temp directory uh it would show up as

389
00:14:11,880 --> 00:14:13,860
one of the top answers on stack overflow

390
00:14:13,860 --> 00:14:16,320
and you know sometimes when you ask Zach

391
00:14:16,320 --> 00:14:19,880
overflow you might get vulnerabilities

392
00:14:20,160 --> 00:14:20,820
um

393
00:14:20,820 --> 00:14:22,620
so this vulnerability exists because

394
00:14:22,620 --> 00:14:24,120
it's a race condition

395
00:14:24,120 --> 00:14:26,700
between the delete and the maker

396
00:14:26,700 --> 00:14:28,620
and the reason this vulnerability exists

397
00:14:28,620 --> 00:14:31,920
is because uh another process can get in

398
00:14:31,920 --> 00:14:33,600
there and see that the file is deleted

399
00:14:33,600 --> 00:14:35,639
and then erase the Java process to

400
00:14:35,639 --> 00:14:36,899
create the directory with wider

401
00:14:36,899 --> 00:14:38,459
permissions than the Java process will

402
00:14:38,459 --> 00:14:42,480
and then own that directory and make her

403
00:14:42,480 --> 00:14:43,980
returns false instead of throwing

404
00:14:43,980 --> 00:14:48,120
exception if it fails and this is a

405
00:14:48,120 --> 00:14:49,519
potential fix for that vulnerability

406
00:14:49,519 --> 00:14:52,740
however the maker still uses the default

407
00:14:52,740 --> 00:14:55,980
you name permissions uh of uh the you

408
00:14:55,980 --> 00:14:57,060
know the default you name for instance

409
00:14:57,060 --> 00:14:58,740
and so this still creates the directory

410
00:14:58,740 --> 00:15:00,540
with permissions that allow other Pro

411
00:15:00,540 --> 00:15:02,639
other users on the local file system to

412
00:15:02,639 --> 00:15:05,040
view the contents of the directory and

413
00:15:05,040 --> 00:15:06,839
so you're even though you fix the

414
00:15:06,839 --> 00:15:07,980
temporary directory hijacking

415
00:15:07,980 --> 00:15:10,380
vulnerability you've still left the code

416
00:15:10,380 --> 00:15:11,639
vulnerable to

417
00:15:11,639 --> 00:15:13,320
um temp directory information disclosure

418
00:15:13,320 --> 00:15:15,060
so if you're putting sensitive

419
00:15:15,060 --> 00:15:16,260
information into that temp directory

420
00:15:16,260 --> 00:15:20,540
other local users can read the contents

421
00:15:23,240 --> 00:15:26,040
so what is the fix

422
00:15:26,040 --> 00:15:29,160
since Java 1.7 so Java 1.7 is very old

423
00:15:29,160 --> 00:15:31,160
it's been around since

424
00:15:31,160 --> 00:15:34,579
2016 something like that it's you know

425
00:15:34,579 --> 00:15:37,620
it's now end of life it's so old so you

426
00:15:37,620 --> 00:15:39,120
know it's you should yeah you can use

427
00:15:39,120 --> 00:15:41,100
this API safely

428
00:15:41,100 --> 00:15:43,920
um uh this new API create temp directory

429
00:15:43,920 --> 00:15:46,440
was added and this does this and it also

430
00:15:46,440 --> 00:15:48,120
sets the correct posix permissions on

431
00:15:48,120 --> 00:15:50,279
the directory when it creates it to

432
00:15:50,279 --> 00:15:52,320
protect the directory so that all their

433
00:15:52,320 --> 00:15:54,300
local users can see the contents and I

434
00:15:54,300 --> 00:15:55,560
got a couple of CVS for this

435
00:15:55,560 --> 00:15:58,940
vulnerability in open source software uh

436
00:15:58,940 --> 00:16:02,339
and I then you know after that

437
00:16:02,339 --> 00:16:04,139
used open rewrite to generate some pull

438
00:16:04,139 --> 00:16:05,880
requests and for this I was able to

439
00:16:05,880 --> 00:16:07,980
generate 64 poll requests across open

440
00:16:07,980 --> 00:16:10,320
source to fix this vulnerability

441
00:16:10,320 --> 00:16:13,380
and this is an example of the diff so

442
00:16:13,380 --> 00:16:15,180
you'll see that the API call is we're

443
00:16:15,180 --> 00:16:17,100
actually using a different instead of

444
00:16:17,100 --> 00:16:18,779
file we're using files so we need to add

445
00:16:18,779 --> 00:16:21,899
an import and on top of that we are

446
00:16:21,899 --> 00:16:24,899
deleting the delete in the makers and

447
00:16:24,899 --> 00:16:26,760
replacing it with the non-vulnerable

448
00:16:26,760 --> 00:16:28,560
version but on top of this you can do

449
00:16:28,560 --> 00:16:30,660
more complicated things like here's an

450
00:16:30,660 --> 00:16:32,940
example where we have the delete and the

451
00:16:32,940 --> 00:16:35,220
maker checking correctly and we can

452
00:16:35,220 --> 00:16:36,899
remove that entire logic because we know

453
00:16:36,899 --> 00:16:38,699
that it's no longer needed because it's

454
00:16:38,699 --> 00:16:40,740
not yeah so we can clean all that up as

455
00:16:40,740 --> 00:16:42,779
well actually if we left it behind it

456
00:16:42,779 --> 00:16:43,980
would still be vulnerable so we also

457
00:16:43,980 --> 00:16:45,060
need to make sure we sweep the delete

458
00:16:45,060 --> 00:16:47,339
and the maker away

459
00:16:47,339 --> 00:16:49,519
foreign

460
00:16:50,720 --> 00:16:53,279
that was temp directory hijacking the

461
00:16:53,279 --> 00:16:55,680
second vulnerability that I tackled was

462
00:16:55,680 --> 00:16:57,899
partial past reversal partial past

463
00:16:57,899 --> 00:16:59,940
reversal exists

464
00:16:59,940 --> 00:17:01,139
um let's say that you have two local

465
00:17:01,139 --> 00:17:04,160
users on your local file system user Sam

466
00:17:04,160 --> 00:17:07,679
and user Samantha

467
00:17:07,679 --> 00:17:10,319
wait I went

468
00:17:10,319 --> 00:17:12,299
there we go user Samantha

469
00:17:12,299 --> 00:17:15,720
something is clickers uh I don't know

470
00:17:15,720 --> 00:17:17,400
anyways I think that if I swipe across

471
00:17:17,400 --> 00:17:19,500
the thumb pad it like jumps ahead so I

472
00:17:19,500 --> 00:17:20,939
gotta make sure I keep my thumb off of

473
00:17:20,939 --> 00:17:23,400
that okay so if you have two users user

474
00:17:23,400 --> 00:17:25,319
Sam and user Samantha let's assume that

475
00:17:25,319 --> 00:17:27,119
you want to sandbox your logic to only

476
00:17:27,119 --> 00:17:30,419
access the contents of user Sam

477
00:17:30,419 --> 00:17:32,280
um partial past reversal

478
00:17:32,280 --> 00:17:34,919
is allows an attacker to access a

479
00:17:34,919 --> 00:17:36,780
sibling directory with the same prefix

480
00:17:36,780 --> 00:17:40,260
so for example user Sam you've sent

481
00:17:40,260 --> 00:17:41,880
you've tried to sandbox that directory

482
00:17:41,880 --> 00:17:44,640
but an attacker can access user Samantha

483
00:17:44,640 --> 00:17:47,280
because there's the same prefix

484
00:17:47,280 --> 00:17:50,120
and so this is the vulnerability

485
00:17:50,120 --> 00:17:53,760
the reason this exists is because get

486
00:17:53,760 --> 00:17:55,740
canonical path is supposed to normalize

487
00:17:55,740 --> 00:17:57,660
the path and remove dot the dot dot

488
00:17:57,660 --> 00:17:59,640
slash dot slash right try to normalize

489
00:17:59,640 --> 00:18:00,600
the path

490
00:18:00,600 --> 00:18:03,360
however it has the problem where get

491
00:18:03,360 --> 00:18:05,580
canonical path when you call it on a new

492
00:18:05,580 --> 00:18:07,679
file like this

493
00:18:07,679 --> 00:18:10,200
it returns a string

494
00:18:10,200 --> 00:18:12,360
that's missing that trailing slash

495
00:18:12,360 --> 00:18:14,640
and so when you're using string

496
00:18:14,640 --> 00:18:17,460
comparing starts with calls you can

497
00:18:17,460 --> 00:18:19,679
bypass that check with a similar with it

498
00:18:19,679 --> 00:18:22,200
with a file with the same prefix

499
00:18:22,200 --> 00:18:25,860
and so here if we take this code and we

500
00:18:25,860 --> 00:18:28,200
have user Sam and it's being used to

501
00:18:28,200 --> 00:18:30,840
sandbox the logic inside of users user

502
00:18:30,840 --> 00:18:33,419
Sam if we have a malicious payload come

503
00:18:33,419 --> 00:18:37,140
in user Samantha slash baz when that get

504
00:18:37,140 --> 00:18:38,760
canonical path gets called you can see

505
00:18:38,760 --> 00:18:41,220
it's user slash Samantha slash baz which

506
00:18:41,220 --> 00:18:43,799
does start with user slash Sam and this

507
00:18:43,799 --> 00:18:45,720
logic is able to get bypassed so this i

508
00:18:45,720 --> 00:18:47,940
o exception does not get thrown and

509
00:18:47,940 --> 00:18:50,520
you've bypassed the guard

510
00:18:50,520 --> 00:18:52,620
so what's the fix for this

511
00:18:52,620 --> 00:18:56,960
the fix for this is that in this logic

512
00:18:56,960 --> 00:19:00,120
one one simple fix is to just add the

513
00:19:00,120 --> 00:19:01,559
path separator back on the end of the

514
00:19:01,559 --> 00:19:03,120
string

515
00:19:03,120 --> 00:19:05,460
um simple fix however there's a better

516
00:19:05,460 --> 00:19:06,299
fix

517
00:19:06,299 --> 00:19:08,340
um the better fix is to use the Java

518
00:19:08,340 --> 00:19:10,980
paths object which you can do starts

519
00:19:10,980 --> 00:19:12,840
with comparisons and that will do the

520
00:19:12,840 --> 00:19:14,520
sanitization that'll do the correct path

521
00:19:14,520 --> 00:19:16,799
path comparisons

522
00:19:16,799 --> 00:19:18,960
um and so this is the this is the the

523
00:19:18,960 --> 00:19:21,900
best fix that you can do

524
00:19:21,900 --> 00:19:23,160
um so when we want to fix this

525
00:19:23,160 --> 00:19:24,539
vulnerability right we can do the static

526
00:19:24,539 --> 00:19:25,740
code analysis find this vulnerability

527
00:19:25,740 --> 00:19:26,760
but how do we actually fix this

528
00:19:26,760 --> 00:19:29,700
vulnerability so we need to find this

529
00:19:29,700 --> 00:19:31,320
vulnerability first

530
00:19:31,320 --> 00:19:32,760
um in in the source code so we're

531
00:19:32,760 --> 00:19:35,400
looking for a call to the string starts

532
00:19:35,400 --> 00:19:36,120
with

533
00:19:36,120 --> 00:19:38,220
and we're looking for get canonical path

534
00:19:38,220 --> 00:19:42,080
on either side of the that that call

535
00:19:42,080 --> 00:19:44,400
and we want to find this but we want to

536
00:19:44,400 --> 00:19:46,380
make sure that we don't find cases where

537
00:19:46,380 --> 00:19:48,600
we have file path the file separator

538
00:19:48,600 --> 00:19:50,160
being added because we don't want to fix

539
00:19:50,160 --> 00:19:52,980
a vulnerability that's not present

540
00:19:52,980 --> 00:19:55,080
um that's really important and you don't

541
00:19:55,080 --> 00:19:56,280
want to you don't want to inundate

542
00:19:56,280 --> 00:19:57,539
maintainers with fixes for

543
00:19:57,539 --> 00:19:58,980
vulnerabilities that aren't there like

544
00:19:58,980 --> 00:20:00,840
that you're just wasting their time but

545
00:20:00,840 --> 00:20:03,419
it can't be that easy right

546
00:20:03,419 --> 00:20:05,340
developers write code in a lot of

547
00:20:05,340 --> 00:20:07,740
different ways what if a developer does

548
00:20:07,740 --> 00:20:09,419
this where they extract that to a

549
00:20:09,419 --> 00:20:10,380
variable

550
00:20:10,380 --> 00:20:13,440
or they extract The Parent Directory to

551
00:20:13,440 --> 00:20:16,500
a variable or they make it safe but it's

552
00:20:16,500 --> 00:20:18,120
also in a variable how do you detect

553
00:20:18,120 --> 00:20:20,640
that if safe or not safe in these cases

554
00:20:20,640 --> 00:20:23,160
so we need this New Concept we need data

555
00:20:23,160 --> 00:20:25,799
flow analysis data flow analysis is well

556
00:20:25,799 --> 00:20:27,240
known in you know programming language

557
00:20:27,240 --> 00:20:29,640
search circles but in order to do this

558
00:20:29,640 --> 00:20:32,539
we need to be able to to find where

559
00:20:32,539 --> 00:20:34,980
these values that we're interested in

560
00:20:34,980 --> 00:20:36,900
flow to the various locations that we're

561
00:20:36,900 --> 00:20:39,660
interested in to try to fix and so we

562
00:20:39,660 --> 00:20:41,820
can use data flow analysis to trace that

563
00:20:41,820 --> 00:20:44,940
get canonical path on the dur flows to

564
00:20:44,940 --> 00:20:47,400
duradoc econonical and flows to that if

565
00:20:47,400 --> 00:20:49,080
if guard

566
00:20:49,080 --> 00:20:51,059
similarly we can do the same thing for p

567
00:20:51,059 --> 00:20:53,220
canonical and even if there's a step of

568
00:20:53,220 --> 00:20:55,020
indirection we can still do that that's

569
00:20:55,020 --> 00:20:56,880
part of data flow

570
00:20:56,880 --> 00:21:00,480
um yeah so dataflow allows us to uncover

571
00:21:00,480 --> 00:21:01,980
hard to find vulnerabilities and

572
00:21:01,980 --> 00:21:04,140
prevents false positives

573
00:21:04,140 --> 00:21:06,419
and so this is what dataflow looks like

574
00:21:06,419 --> 00:21:09,240
if you've written any code ql which I

575
00:21:09,240 --> 00:21:10,380
presume that most of you have not

576
00:21:10,380 --> 00:21:11,580
because it's not very commonly known

577
00:21:11,580 --> 00:21:13,380
language but if you've written any code

578
00:21:13,380 --> 00:21:15,660
ql the API for data flow analysis is

579
00:21:15,660 --> 00:21:17,400
very similar to codeql so you can

580
00:21:17,400 --> 00:21:18,660
transfer your knowledge back and forth

581
00:21:18,660 --> 00:21:20,520
between open rewrite and codeql very

582
00:21:20,520 --> 00:21:23,039
easily that was done by me intentionally

583
00:21:23,039 --> 00:21:25,380
in order to make it so that you know you

584
00:21:25,380 --> 00:21:26,760
could I could transfer my own knowledge

585
00:21:26,760 --> 00:21:28,559
very easily so

586
00:21:28,559 --> 00:21:30,240
and this is the fix this is an example

587
00:21:30,240 --> 00:21:31,980
of the fix being generated

588
00:21:31,980 --> 00:21:33,659
um you can see that we've removed the

589
00:21:33,659 --> 00:21:35,280
vulnerable uh or remove the starts with

590
00:21:35,280 --> 00:21:36,480
call and replaced it with this much

591
00:21:36,480 --> 00:21:37,620
longer call that's now no longer

592
00:21:37,620 --> 00:21:38,940
vulnerable

593
00:21:38,940 --> 00:21:41,039
and so I have an example case for this

594
00:21:41,039 --> 00:21:44,539
vulnerability it was in the AWS Java SDK

595
00:21:44,539 --> 00:21:48,419
this was used in the AWS Java SDK to

596
00:21:48,419 --> 00:21:52,200
validate that the key for the AWS bucket

597
00:21:52,200 --> 00:21:53,760
that you may have been downloading

598
00:21:53,760 --> 00:21:56,520
did not escape the local base directory

599
00:21:56,520 --> 00:21:57,900
that you were downloading the contents

600
00:21:57,900 --> 00:22:00,539
of the AWS S3 bucket into

601
00:22:00,539 --> 00:22:03,360
and this logic leaves root was used in a

602
00:22:03,360 --> 00:22:05,100
guard that checked

603
00:22:05,100 --> 00:22:08,760
um to see it threw an exception if uh it

604
00:22:08,760 --> 00:22:11,159
escaped the root

605
00:22:11,159 --> 00:22:13,919
um as with any good story uh this one

606
00:22:13,919 --> 00:22:14,820
had a little bit of vulnerability

607
00:22:14,820 --> 00:22:16,919
disclosure drama

608
00:22:16,919 --> 00:22:17,820
um

609
00:22:17,820 --> 00:22:19,980
I had an email exchanged with the amazon

610
00:22:19,980 --> 00:22:22,080
security team about this they said hey

611
00:22:22,080 --> 00:22:23,820
we'd love to award you a bug Bounty for

612
00:22:23,820 --> 00:22:25,679
this for having reported to us however

613
00:22:25,679 --> 00:22:28,380
you need to sign an NDA a non-disclosure

614
00:22:28,380 --> 00:22:30,720
agreement and I said I don't normally

615
00:22:30,720 --> 00:22:32,880
agree to non-disclosure agreements can I

616
00:22:32,880 --> 00:22:35,220
read it before potentially agreeing and

617
00:22:35,220 --> 00:22:37,740
I got the email back of we're unable to

618
00:22:37,740 --> 00:22:39,720
share the bug Bounty program NDA since

619
00:22:39,720 --> 00:22:41,520
it and other contract documents are

620
00:22:41,520 --> 00:22:45,139
considered sensitive by the legal team

621
00:22:45,260 --> 00:22:49,740
yeah yeah so I've still not signed that

622
00:22:49,740 --> 00:22:53,780
NDA but yeah what right

623
00:22:54,000 --> 00:22:56,059
um

624
00:22:56,460 --> 00:22:58,919
anybody who plays Pokemon uh I'll get

625
00:22:58,919 --> 00:23:02,059
that one so

626
00:23:02,700 --> 00:23:06,419
um so yes uh thankfully they I don't

627
00:23:06,419 --> 00:23:07,860
know they still haven't paid me a bounty

628
00:23:07,860 --> 00:23:10,140
they offered me a thousand dollars in

629
00:23:10,140 --> 00:23:13,740
like 80 uh Amazon's like they buy they

630
00:23:13,740 --> 00:23:14,880
wouldn't give me a thousand dollars in

631
00:23:14,880 --> 00:23:17,159
Amazon like store credit but they would

632
00:23:17,159 --> 00:23:18,840
let me they would get if they give them

633
00:23:18,840 --> 00:23:21,240
a a gift or a wish list of a thousand

634
00:23:21,240 --> 00:23:22,440
dollars worth of items they would mail

635
00:23:22,440 --> 00:23:26,299
that to me so I don't know I

636
00:23:26,299 --> 00:23:28,020
anyways

637
00:23:28,020 --> 00:23:29,940
um the third vulnerability that we had

638
00:23:29,940 --> 00:23:33,059
tackled in this research was zip slip

639
00:23:33,059 --> 00:23:33,659
um

640
00:23:33,659 --> 00:23:35,640
so zip slip for those of you who don't

641
00:23:35,640 --> 00:23:37,919
know it's a very old vulnerability it

642
00:23:37,919 --> 00:23:39,840
was originally chatted about in Frack

643
00:23:39,840 --> 00:23:42,960
magazine like a dog's age ago

644
00:23:42,960 --> 00:23:44,940
um and it's a path to reversal

645
00:23:44,940 --> 00:23:46,380
vulnerability that exists while

646
00:23:46,380 --> 00:23:49,140
unpacking zip file entries

647
00:23:49,140 --> 00:23:51,059
um it basically lets you arbitrarily

648
00:23:51,059 --> 00:23:53,100
over if you're a malicious attacker and

649
00:23:53,100 --> 00:23:55,080
you can supply a malicious zip file you

650
00:23:55,080 --> 00:23:56,640
can maliciously unpack your zip file

651
00:23:56,640 --> 00:23:58,380
over the contents of directories on the

652
00:23:58,380 --> 00:23:59,820
file system and potentially getting

653
00:23:59,820 --> 00:24:01,860
remote code execution

654
00:24:01,860 --> 00:24:03,720
um it's pretty bad

655
00:24:03,720 --> 00:24:05,760
um and so this is the vulnerable logic

656
00:24:05,760 --> 00:24:08,460
in Java you'll find that there you know

657
00:24:08,460 --> 00:24:09,900
a lot of people write their own unzip

658
00:24:09,900 --> 00:24:11,100
logic because they want to do their own

659
00:24:11,100 --> 00:24:13,080
custom filtering or stuff like that and

660
00:24:13,080 --> 00:24:14,820
the reason that this is vulnerable

661
00:24:14,820 --> 00:24:18,360
is because e dot get name could be a

662
00:24:18,360 --> 00:24:20,640
past reversal payload from inside of the

663
00:24:20,640 --> 00:24:23,220
malicious zip file and that is Flowing

664
00:24:23,220 --> 00:24:25,559
via F into the creation of the file

665
00:24:25,559 --> 00:24:27,360
output stream

666
00:24:27,360 --> 00:24:29,220
and so that file output stream when you

667
00:24:29,220 --> 00:24:31,020
call the new Constructor it will create

668
00:24:31,020 --> 00:24:33,659
the file and then subsequently write the

669
00:24:33,659 --> 00:24:35,400
contents of that zip entry over the

670
00:24:35,400 --> 00:24:38,100
directory into that into that file

671
00:24:38,100 --> 00:24:40,500
so Zip Zip slip is complicated when

672
00:24:40,500 --> 00:24:41,940
you're trying to fix it

673
00:24:41,940 --> 00:24:43,440
because

674
00:24:43,440 --> 00:24:46,980
the fix for zip slip is this guard

675
00:24:46,980 --> 00:24:49,440
and so

676
00:24:49,440 --> 00:24:52,380
in in this case how do we detect that

677
00:24:52,380 --> 00:24:54,539
this guard is present or not right we're

678
00:24:54,539 --> 00:24:56,700
looking at source code right ourselves

679
00:24:56,700 --> 00:24:58,860
as developers we can see it right but

680
00:24:58,860 --> 00:25:00,360
how do you automate the process of

681
00:25:00,360 --> 00:25:01,980
finding this vulnerability that's the

682
00:25:01,980 --> 00:25:03,360
challenge that we have

683
00:25:03,360 --> 00:25:04,740
and so

684
00:25:04,740 --> 00:25:06,419
the other problem is that this is a

685
00:25:06,419 --> 00:25:09,840
valid fix but so is this right both of

686
00:25:09,840 --> 00:25:12,360
these are valid protections against this

687
00:25:12,360 --> 00:25:13,559
vulnerability

688
00:25:13,559 --> 00:25:16,080
so how do we determine if this logic is

689
00:25:16,080 --> 00:25:18,179
present or not to determine whether or

690
00:25:18,179 --> 00:25:18,780
not we're going to fix this

691
00:25:18,780 --> 00:25:20,400
vulnerability or not because again we

692
00:25:20,400 --> 00:25:21,600
don't want to fix vulnerabilities that

693
00:25:21,600 --> 00:25:23,100
are not present

694
00:25:23,100 --> 00:25:25,140
so we need this new New Concept on top

695
00:25:25,140 --> 00:25:26,580
of this which is called control flow

696
00:25:26,580 --> 00:25:27,659
analysis

697
00:25:27,659 --> 00:25:29,880
so control flow analysis lets us

698
00:25:29,880 --> 00:25:31,919
differentiate between the vulnerable

699
00:25:31,919 --> 00:25:34,200
version and the non-vulnerable version

700
00:25:34,200 --> 00:25:37,320
and control flow is a graph which is

701
00:25:37,320 --> 00:25:40,380
broken up into basic blocks which

702
00:25:40,380 --> 00:25:43,140
represent these the set of contiguous

703
00:25:43,140 --> 00:25:45,659
operations that a program will will take

704
00:25:45,659 --> 00:25:48,720
without jumping and then conditionals

705
00:25:48,720 --> 00:25:50,460
which exist where the where the program

706
00:25:50,460 --> 00:25:52,799
will Fork based upon a conditional and

707
00:25:52,799 --> 00:25:57,440
flow down one of two or multiple paths

708
00:25:57,539 --> 00:26:02,220
um and so for example the uh the part of

709
00:26:02,220 --> 00:26:05,039
the uh control flow graph for this

710
00:26:05,039 --> 00:26:06,840
particular bit of code would look like

711
00:26:06,840 --> 00:26:07,740
this

712
00:26:07,740 --> 00:26:09,900
and so given this graph that we can

713
00:26:09,900 --> 00:26:12,419
generate for for the for the program we

714
00:26:12,419 --> 00:26:14,279
can determine that

715
00:26:14,279 --> 00:26:17,580
um if there is a guard in place

716
00:26:17,580 --> 00:26:20,520
that that new file uh output stream

717
00:26:20,520 --> 00:26:23,159
Constructor will not get called and so

718
00:26:23,159 --> 00:26:24,480
we don't need to fix this vulnerability

719
00:26:24,480 --> 00:26:26,700
because it's correctly protected

720
00:26:26,700 --> 00:26:28,440
and so when we put this all together

721
00:26:28,440 --> 00:26:32,159
we're able to generate this guard in the

722
00:26:32,159 --> 00:26:33,559
correct location in the source code

723
00:26:33,559 --> 00:26:37,020
appropriately to fix this vulnerability

724
00:26:37,020 --> 00:26:38,640
and

725
00:26:38,640 --> 00:26:40,919
um yeah so on top of that we can also

726
00:26:40,919 --> 00:26:41,880
clean up the code a little bit too

727
00:26:41,880 --> 00:26:44,520
because you know there's yeah so

728
00:26:44,520 --> 00:26:46,020
let's talk about pull request generation

729
00:26:46,020 --> 00:26:48,539
so we've got the vulnerability we've

730
00:26:48,539 --> 00:26:50,460
been able to fix the vulnerability but

731
00:26:50,460 --> 00:26:51,960
how do we do pull requests you know if

732
00:26:51,960 --> 00:26:53,460
you've got a security vulnerability you

733
00:26:53,460 --> 00:26:55,980
know everybody gets a pull request so

734
00:26:55,980 --> 00:26:57,419
there's problems with pull request

735
00:26:57,419 --> 00:26:59,460
generation

736
00:26:59,460 --> 00:27:02,220
one of the problems is how fast can you

737
00:27:02,220 --> 00:27:04,500
generate pull requests

738
00:27:04,500 --> 00:27:05,580
um

739
00:27:05,580 --> 00:27:07,140
let's talk about the steps involved in

740
00:27:07,140 --> 00:27:10,020
generating a pull request first off so

741
00:27:10,020 --> 00:27:11,340
there's three different categories of

742
00:27:11,340 --> 00:27:13,140
pull request generation

743
00:27:13,140 --> 00:27:15,000
there's the file i o which happens

744
00:27:15,000 --> 00:27:16,980
locally on your machine there's git

745
00:27:16,980 --> 00:27:21,240
operations which are basically free and

746
00:27:21,240 --> 00:27:22,919
don't incur rate limiting issues and

747
00:27:22,919 --> 00:27:25,140
then there's GitHub API calls which

748
00:27:25,140 --> 00:27:28,020
incur rate limiting issues and

749
00:27:28,020 --> 00:27:30,240
run into problems

750
00:27:30,240 --> 00:27:31,140
foreign

751
00:27:31,140 --> 00:27:33,419
so first thing you need to do check out

752
00:27:33,419 --> 00:27:34,679
and download the source code repository

753
00:27:34,679 --> 00:27:36,299
on your local machine or you know

754
00:27:36,299 --> 00:27:37,500
whatever server is running this this

755
00:27:37,500 --> 00:27:38,520
logic

756
00:27:38,520 --> 00:27:40,980
you need to Branch create a branch apply

757
00:27:40,980 --> 00:27:43,620
the diff and commit the change

758
00:27:43,620 --> 00:27:45,480
then you need to Fork the repository on

759
00:27:45,480 --> 00:27:47,580
GitHub and on top of that you need to

760
00:27:47,580 --> 00:27:49,380
rename the repository on GitHub and the

761
00:27:49,380 --> 00:27:51,179
reason you need to do this is because if

762
00:27:51,179 --> 00:27:54,480
you are generating tens or hundreds or

763
00:27:54,480 --> 00:27:56,340
thousands of pull requests you're going

764
00:27:56,340 --> 00:27:57,539
to end up with name collisions and

765
00:27:57,539 --> 00:27:59,460
GitHub Forks the repository under

766
00:27:59,460 --> 00:28:01,260
whatever organization or your personal

767
00:28:01,260 --> 00:28:03,299
account to the name of the repository

768
00:28:03,299 --> 00:28:05,159
and there's enough repositories on the

769
00:28:05,159 --> 00:28:06,720
in in the open source ecosystem you're

770
00:28:06,720 --> 00:28:08,520
going to get name collisions so you need

771
00:28:08,520 --> 00:28:10,559
to rename the repository

772
00:28:10,559 --> 00:28:12,240
um every time you make the every time

773
00:28:12,240 --> 00:28:13,919
you make the pull or every time you're

774
00:28:13,919 --> 00:28:16,200
going to do this usually to a

775
00:28:16,200 --> 00:28:18,059
deterministic name

776
00:28:18,059 --> 00:28:20,220
then you push the changes and then you

777
00:28:20,220 --> 00:28:22,020
create the pull request on GitHub

778
00:28:22,020 --> 00:28:24,720
so for this we have three API calls

779
00:28:24,720 --> 00:28:28,320
and GitHub asks that you wait at least

780
00:28:28,320 --> 00:28:31,080
one second between each one of these and

781
00:28:31,080 --> 00:28:32,220
you don't do it at mulch so if you're

782
00:28:32,220 --> 00:28:33,900
generating you know thousands of pull

783
00:28:33,900 --> 00:28:35,520
requests you've got to wait at least

784
00:28:35,520 --> 00:28:37,200
three seconds per pull request you're

785
00:28:37,200 --> 00:28:38,760
generating but then they have a

786
00:28:38,760 --> 00:28:40,740
secondary rate limit that's on top of

787
00:28:40,740 --> 00:28:45,120
that that is mixed documented it'll send

788
00:28:45,120 --> 00:28:46,740
back a header that says wait at least

789
00:28:46,740 --> 00:28:48,299
this amount of time before you respond

790
00:28:48,299 --> 00:28:50,039
before you send the next request

791
00:28:50,039 --> 00:28:51,600
and then there's a third rate limit

792
00:28:51,600 --> 00:28:53,880
that's basically like don't do it too

793
00:28:53,880 --> 00:28:56,039
fast or we'll stop you know letting and

794
00:28:56,039 --> 00:28:58,620
you just have to wait at that point so

795
00:28:58,620 --> 00:29:00,360
um it's very annoying uh if there's

796
00:29:00,360 --> 00:29:02,340
anybody in the audience uh get up if you

797
00:29:02,340 --> 00:29:04,140
could stop rate limiting your API so

798
00:29:04,140 --> 00:29:05,400
aggressively it would make my life

799
00:29:05,400 --> 00:29:07,380
easier probably not going to get that

800
00:29:07,380 --> 00:29:10,559
one but you know I do try

801
00:29:10,559 --> 00:29:13,320
um so yeah so we've detected the

802
00:29:13,320 --> 00:29:15,779
vulnerability we've detected the style

803
00:29:15,779 --> 00:29:17,880
we've fixed the code and generated the

804
00:29:17,880 --> 00:29:19,679
diff in a style that matches the

805
00:29:19,679 --> 00:29:21,059
surrounding source code and we've

806
00:29:21,059 --> 00:29:22,860
bypassed the rate limit

807
00:29:22,860 --> 00:29:24,840
kind of I mean you know just slow down

808
00:29:24,840 --> 00:29:27,779
basically is the answer unfortunately

809
00:29:27,779 --> 00:29:30,179
um how do we actually fix this for all

810
00:29:30,179 --> 00:29:32,520
the repositories

811
00:29:32,520 --> 00:29:33,899
um so this is where I'm going to

812
00:29:33,899 --> 00:29:36,360
introduce modern is free for open source

813
00:29:36,360 --> 00:29:38,940
projects they index over 7 000

814
00:29:38,940 --> 00:29:41,700
um open source projects you can run open

815
00:29:41,700 --> 00:29:43,559
your Transformations at scale and

816
00:29:43,559 --> 00:29:45,720
generate and update pull requests across

817
00:29:45,720 --> 00:29:49,200
open source and this is their SAS they

818
00:29:49,200 --> 00:29:51,120
have over 800 recipes that you can run

819
00:29:51,120 --> 00:29:53,820
across your open source projects to fix

820
00:29:53,820 --> 00:29:55,140
any multitude of security

821
00:29:55,140 --> 00:29:57,419
vulnerabilities or just upgrade you know

822
00:29:57,419 --> 00:29:59,340
and the reason that upgrading is

823
00:29:59,340 --> 00:30:02,279
important like for example

824
00:30:02,279 --> 00:30:04,380
um one of the reasons that upgrading is

825
00:30:04,380 --> 00:30:06,899
important like there's upgrades for your

826
00:30:06,899 --> 00:30:09,000
junit tests right the reason that's

827
00:30:09,000 --> 00:30:11,039
important is because uh you may not

828
00:30:11,039 --> 00:30:12,360
think that upgrading your test framework

829
00:30:12,360 --> 00:30:15,480
is a security Improvement but if you

830
00:30:15,480 --> 00:30:16,860
want to run the latest version of spring

831
00:30:16,860 --> 00:30:18,779
which we all as security practitioners

832
00:30:18,779 --> 00:30:19,980
you know if you've worked with a spring

833
00:30:19,980 --> 00:30:21,659
application or you've had it under your

834
00:30:21,659 --> 00:30:23,100
care you know that you want to keep your

835
00:30:23,100 --> 00:30:24,419
software up to date and running the

836
00:30:24,419 --> 00:30:26,039
latest version of spring the latest

837
00:30:26,039 --> 00:30:28,860
version of spring is only testable by

838
00:30:28,860 --> 00:30:30,659
the latest version of junit and there

839
00:30:30,659 --> 00:30:32,460
was an API breaking change between junit

840
00:30:32,460 --> 00:30:34,679
4 and junet 5. and so if you want to

841
00:30:34,679 --> 00:30:36,659
upgrade to your latest version of spring

842
00:30:36,659 --> 00:30:39,000
you need to upgrade your test framework

843
00:30:39,000 --> 00:30:41,760
and so that's why having you know even

844
00:30:41,760 --> 00:30:43,080
just your test framework getting updated

845
00:30:43,080 --> 00:30:44,580
is is important

846
00:30:44,580 --> 00:30:46,080
and so

847
00:30:46,080 --> 00:30:48,419
the modern SAS offers the ability to

848
00:30:48,419 --> 00:30:50,460
generate pull requests across open

849
00:30:50,460 --> 00:30:51,899
source

850
00:30:51,899 --> 00:30:54,899
um here's an example of uh I for zip or

851
00:30:54,899 --> 00:30:56,880
for temp directory hijacking

852
00:30:56,880 --> 00:30:58,500
um I'm just committing the change I'm

853
00:30:58,500 --> 00:30:59,399
saying that I want to create pull

854
00:30:59,399 --> 00:31:01,140
requests across open source I set the

855
00:31:01,140 --> 00:31:03,779
branch name I set the commit title I set

856
00:31:03,779 --> 00:31:05,460
the the organization that I'm going to

857
00:31:05,460 --> 00:31:07,140
do the forking against

858
00:31:07,140 --> 00:31:10,380
I set the commit message I Supply my gpg

859
00:31:10,380 --> 00:31:12,659
key yes into a SAS okay I know I know

860
00:31:12,659 --> 00:31:14,940
but and then you can generate pull

861
00:31:14,940 --> 00:31:17,880
requests across open source just you

862
00:31:17,880 --> 00:31:20,220
know just by being a logged in user you

863
00:31:20,220 --> 00:31:21,600
don't need any special permissions you

864
00:31:21,600 --> 00:31:23,220
can just do it

865
00:31:23,220 --> 00:31:25,380
um so yeah

866
00:31:25,380 --> 00:31:27,380
um

867
00:31:28,440 --> 00:31:31,559
but there are more so modern indexes

868
00:31:31,559 --> 00:31:33,840
seven thousand repositories Java

869
00:31:33,840 --> 00:31:35,220
repositories but they're more than seven

870
00:31:35,220 --> 00:31:36,899
thousand repositories in the world how

871
00:31:36,899 --> 00:31:38,460
do we find the other vulnerable projects

872
00:31:38,460 --> 00:31:40,860
and this is where code ql comes in

873
00:31:40,860 --> 00:31:42,419
um code call is really important because

874
00:31:42,419 --> 00:31:44,880
it it indexes over a thousand a hundred

875
00:31:44,880 --> 00:31:46,679
thousand open source projects and over

876
00:31:46,679 --> 00:31:49,799
35 000 Java projects so I can run I can

877
00:31:49,799 --> 00:31:51,779
write a code quad query

878
00:31:51,779 --> 00:31:53,880
and run it against thirty five thousand

879
00:31:53,880 --> 00:31:55,799
Java projects and it'll give me a list

880
00:31:55,799 --> 00:31:57,659
of vulnerable projects

881
00:31:57,659 --> 00:32:00,240
and then I can take that list and if I

882
00:32:00,240 --> 00:32:02,640
Supply it to this repository the Jenkins

883
00:32:02,640 --> 00:32:05,399
ingest open star repository which is

884
00:32:05,399 --> 00:32:08,039
open source on on GitHub if you add that

885
00:32:08,039 --> 00:32:09,779
to if you add those projects to that

886
00:32:09,779 --> 00:32:12,240
list it'll ingest those projects and

887
00:32:12,240 --> 00:32:13,559
then you can generate pull requests

888
00:32:13,559 --> 00:32:15,179
against them

889
00:32:15,179 --> 00:32:16,020
um

890
00:32:16,020 --> 00:32:17,640
so finally

891
00:32:17,640 --> 00:32:20,880
let's go generate some pull requests

892
00:32:20,880 --> 00:32:22,799
um that's what I did I generated pull

893
00:32:22,799 --> 00:32:25,440
requests you can see not only the number

894
00:32:25,440 --> 00:32:26,820
of pull requests generated but I

895
00:32:26,820 --> 00:32:28,679
generated over 140 pull requests you

896
00:32:28,679 --> 00:32:31,200
know 64 for temp directory hijacking 50

897
00:32:31,200 --> 00:32:34,380
for partial paths reversal and uh 140

898
00:32:34,380 --> 00:32:37,320
for zip slip now the top one I have a 40

899
00:32:37,320 --> 00:32:40,380
merge rate I did that back in 2019 takes

900
00:32:40,380 --> 00:32:42,419
a long time to get there the other ones

901
00:32:42,419 --> 00:32:45,120
temp directory hijacking Patrick on zip

902
00:32:45,120 --> 00:32:47,940
slip I did that just before Defcon no

903
00:32:47,940 --> 00:32:50,659
just before black hat which was August

904
00:32:50,659 --> 00:32:54,779
uh so it's been a month and a half and

905
00:32:54,779 --> 00:32:57,480
we've got a 25 to 20 20 merge rate

906
00:32:57,480 --> 00:32:58,500
already

907
00:32:58,500 --> 00:33:01,500
that's pretty solid in my own opinion

908
00:33:01,500 --> 00:33:03,600
um and so new pull requests that I've

909
00:33:03,600 --> 00:33:05,279
generated in 2020 as a part of the Jan

910
00:33:05,279 --> 00:33:07,159
Kaminsky Fellowship were has been over

911
00:33:07,159 --> 00:33:09,899
590 pull requests and I've been

912
00:33:09,899 --> 00:33:11,640
personally involved in generating over 5

913
00:33:11,640 --> 00:33:14,880
200 pull requests across GitHub

914
00:33:14,880 --> 00:33:15,720
um

915
00:33:15,720 --> 00:33:18,299
there's one project that was The Unlucky

916
00:33:18,299 --> 00:33:21,918
recipient of all

917
00:33:22,140 --> 00:33:24,659
of all three of my security fixed pull

918
00:33:24,659 --> 00:33:25,980
requests

919
00:33:25,980 --> 00:33:29,640
um so uh yeah uh that was just an

920
00:33:29,640 --> 00:33:31,740
interesting funny sort of aside that I

921
00:33:31,740 --> 00:33:33,419
thought was worth throwing in there

922
00:33:33,419 --> 00:33:35,460
um this is my contribution graph for

923
00:33:35,460 --> 00:33:37,440
2022

924
00:33:37,440 --> 00:33:39,360
um and you know I'm not done I'm gonna

925
00:33:39,360 --> 00:33:41,039
keep doing this and I want to do more of

926
00:33:41,039 --> 00:33:42,179
this

927
00:33:42,179 --> 00:33:43,799
um yeah

928
00:33:43,799 --> 00:33:44,519
um

929
00:33:44,519 --> 00:33:45,779
so

930
00:33:45,779 --> 00:33:47,700
the the last topic that I want to cover

931
00:33:47,700 --> 00:33:50,279
in all this is uh some best practices

932
00:33:50,279 --> 00:33:52,799
for bulk Polar Express generation

933
00:33:52,799 --> 00:33:55,380
messaging is really important

934
00:33:55,380 --> 00:33:57,480
um you're dealing with real people and

935
00:33:57,480 --> 00:33:59,220
real maintainers

936
00:33:59,220 --> 00:34:00,600
um and so the messaging that you

937
00:34:00,600 --> 00:34:02,940
communicate in your pull request about

938
00:34:02,940 --> 00:34:05,360
the vulnerability about what it fixes

939
00:34:05,360 --> 00:34:07,740
you need to detail I mean the first

940
00:34:07,740 --> 00:34:09,659
thing to put out there is what is the

941
00:34:09,659 --> 00:34:11,879
vulnerability right like or not even

942
00:34:11,879 --> 00:34:13,500
before that what is the impact of this

943
00:34:13,500 --> 00:34:15,000
vulnerability why are you fixing this

944
00:34:15,000 --> 00:34:17,760
right get the maintainer aware of why

945
00:34:17,760 --> 00:34:19,020
they're going to read the rest of this

946
00:34:19,020 --> 00:34:21,300
long thing and then State you know what

947
00:34:21,300 --> 00:34:23,099
the vulnerability is how you fixed it

948
00:34:23,099 --> 00:34:26,940
and then uh you know I give additional

949
00:34:26,940 --> 00:34:27,839
information about how to do

950
00:34:27,839 --> 00:34:29,879
vulnerability disclosure like you know

951
00:34:29,879 --> 00:34:31,080
here's how you open to get a security

952
00:34:31,080 --> 00:34:33,179
advisory or just ping me and I will help

953
00:34:33,179 --> 00:34:35,399
you I work with Snick for getting my

954
00:34:35,399 --> 00:34:38,040
cves when I'm not doing them myself if

955
00:34:38,040 --> 00:34:39,179
I'm working with a maintainer directly

956
00:34:39,179 --> 00:34:40,619
on GitHub security advisories I use

957
00:34:40,619 --> 00:34:42,719
github's security lab for their to get

958
00:34:42,719 --> 00:34:44,520
CVS assigned

959
00:34:44,520 --> 00:34:47,040
um yeah um but working with a maintainer

960
00:34:47,040 --> 00:34:49,800
to help enable them to be to get the

961
00:34:49,800 --> 00:34:51,239
disclosure out there not just fixing the

962
00:34:51,239 --> 00:34:52,560
vulnerability but also disclosing to

963
00:34:52,560 --> 00:34:53,580
their end users that they were

964
00:34:53,580 --> 00:34:55,139
vulnerable

965
00:34:55,139 --> 00:34:57,119
there's a saying all software problems

966
00:34:57,119 --> 00:34:59,099
are people problems in Disguise and this

967
00:34:59,099 --> 00:35:01,320
is very true in this case you're dealing

968
00:35:01,320 --> 00:35:02,940
with people you're dealing with

969
00:35:02,940 --> 00:35:04,800
maintainers you're not just dealing with

970
00:35:04,800 --> 00:35:06,960
software and so you have to be people

971
00:35:06,960 --> 00:35:09,960
conscious as part of this

972
00:35:09,960 --> 00:35:10,980
um

973
00:35:10,980 --> 00:35:14,099
and so some more like you know simple

974
00:35:14,099 --> 00:35:16,140
you know other Lessons Learned on top of

975
00:35:16,140 --> 00:35:18,480
that uh the first lesson that I learned

976
00:35:18,480 --> 00:35:20,579
is sign off on all your commits

977
00:35:20,579 --> 00:35:22,560
um this if you dash dash sign off in git

978
00:35:22,560 --> 00:35:24,660
you'll see this sign off the reason you

979
00:35:24,660 --> 00:35:26,460
do this is this is what the sign off

980
00:35:26,460 --> 00:35:28,260
looks like you add that add this to your

981
00:35:28,260 --> 00:35:30,000
commit message

982
00:35:30,000 --> 00:35:31,920
um and why

983
00:35:31,920 --> 00:35:33,839
uh the reason that you want to do this

984
00:35:33,839 --> 00:35:37,079
is uh there was a bunch of uh lawsuits

985
00:35:37,079 --> 00:35:40,500
yada yada tldr lawyers uh it was

986
00:35:40,500 --> 00:35:41,760
lawsuits against hope of the source

987
00:35:41,760 --> 00:35:43,260
maintainers and not having you know it's

988
00:35:43,260 --> 00:35:44,940
just okay lawyers just sign off in your

989
00:35:44,940 --> 00:35:46,520
commits it'll you know

990
00:35:46,520 --> 00:35:49,320
otherwise it'll be rejected by evil

991
00:35:49,320 --> 00:35:52,700
dragon bureaucrats um

992
00:35:52,920 --> 00:35:55,920
uh lesson two be a good commit is in gpg

993
00:35:55,920 --> 00:35:58,740
sign your commits uh that's you know it

994
00:35:58,740 --> 00:36:01,380
shows up as verified it was actually me

995
00:36:01,380 --> 00:36:02,940
um you don't want to end up as you know

996
00:36:02,940 --> 00:36:04,980
Linus tarvald has been impersonated on

997
00:36:04,980 --> 00:36:06,599
GitHub multiple times

998
00:36:06,599 --> 00:36:07,160
um

999
00:36:07,160 --> 00:36:11,040
uh c-com seacom is the security commit

1000
00:36:11,040 --> 00:36:12,540
format

1001
00:36:12,540 --> 00:36:14,940
um it looks like this I don't have time

1002
00:36:14,940 --> 00:36:16,500
to go into it but if you're curious

1003
00:36:16,500 --> 00:36:19,079
about a commit format for commit

1004
00:36:19,079 --> 00:36:20,040
messages that fix security

1005
00:36:20,040 --> 00:36:22,140
vulnerabilities this is a proposed

1006
00:36:22,140 --> 00:36:23,940
standard for formatting it I use it

1007
00:36:23,940 --> 00:36:25,500
because I figure there's no standard and

1008
00:36:25,500 --> 00:36:26,880
I was just going to make it up myself so

1009
00:36:26,880 --> 00:36:28,200
I figure I follow something that

1010
00:36:28,200 --> 00:36:29,820
somebody had written down so if you're

1011
00:36:29,820 --> 00:36:32,280
curious to learn more look up ccom you

1012
00:36:32,280 --> 00:36:33,420
can use it internally in your own

1013
00:36:33,420 --> 00:36:35,220
organizations to for commit messages

1014
00:36:35,220 --> 00:36:38,820
that are fixing security vulnerabilities

1015
00:36:38,820 --> 00:36:40,380
there are risks to using your personal

1016
00:36:40,380 --> 00:36:41,640
GitHub account

1017
00:36:41,640 --> 00:36:43,740
to do this

1018
00:36:43,740 --> 00:36:45,540
um is anybody familiar with github's

1019
00:36:45,540 --> 00:36:47,400
anger unicorn

1020
00:36:47,400 --> 00:36:51,020
if you're not here it is

1021
00:36:51,540 --> 00:36:53,820
yes this was my GitHub profile for most

1022
00:36:53,820 --> 00:36:55,980
of 2020 because I generated so many

1023
00:36:55,980 --> 00:36:58,800
polar requests I broke my GitHub account

1024
00:36:58,800 --> 00:36:59,880
um

1025
00:36:59,880 --> 00:37:02,400
uh and then do you remember github's

1026
00:37:02,400 --> 00:37:03,359
rate limit

1027
00:37:03,359 --> 00:37:06,060
while you're generating pull requests

1028
00:37:06,060 --> 00:37:08,339
you won't be able to comment on GitHub

1029
00:37:08,339 --> 00:37:10,560
uh or make any you know be able to do

1030
00:37:10,560 --> 00:37:11,700
anything else because they will block

1031
00:37:11,700 --> 00:37:13,140
you out because you're doing too much

1032
00:37:13,140 --> 00:37:15,599
too fast so just be aware of that you

1033
00:37:15,599 --> 00:37:17,700
know don't do you know

1034
00:37:17,700 --> 00:37:18,900
things that you really need to use

1035
00:37:18,900 --> 00:37:21,079
GitHub for while you're doing this

1036
00:37:21,079 --> 00:37:23,400
I do recommend using your GitHub account

1037
00:37:23,400 --> 00:37:25,320
personal GitHub account regardless of

1038
00:37:25,320 --> 00:37:28,260
these downfalls because you it gives the

1039
00:37:28,260 --> 00:37:29,640
opportunity for a maintainer to see it

1040
00:37:29,640 --> 00:37:31,079
coming from a real person instead of an

1041
00:37:31,079 --> 00:37:33,180
organization and it lets them connect

1042
00:37:33,180 --> 00:37:34,680
with you and if they have you know if

1043
00:37:34,680 --> 00:37:35,940
they have an issue there they can leave

1044
00:37:35,940 --> 00:37:37,680
a comment you can respond back you'll

1045
00:37:37,680 --> 00:37:40,079
get a notification it's worth you know

1046
00:37:40,079 --> 00:37:42,839
it's worth the potential pain to get the

1047
00:37:42,839 --> 00:37:44,339
value of being able to communicate like

1048
00:37:44,339 --> 00:37:45,839
have it have it get treated like you're

1049
00:37:45,839 --> 00:37:47,520
a real person at the other end and you

1050
00:37:47,520 --> 00:37:49,260
won't get overwhelmed I've you know I've

1051
00:37:49,260 --> 00:37:50,820
not been overwhelmed I've generated you

1052
00:37:50,820 --> 00:37:52,980
know thousands of pull requests most of

1053
00:37:52,980 --> 00:37:54,420
these things are not too complicated to

1054
00:37:54,420 --> 00:37:55,560
work through with a maintainer and

1055
00:37:55,560 --> 00:37:56,880
you're not going to be wasting a ton of

1056
00:37:56,880 --> 00:37:59,220
time you know I can't make promises but

1057
00:37:59,220 --> 00:38:02,460
you know uh yeah lesson five coordinate

1058
00:38:02,460 --> 00:38:04,560
with GitHub

1059
00:38:04,560 --> 00:38:06,420
um before attempting this I reached out

1060
00:38:06,420 --> 00:38:07,500
to GitHub

1061
00:38:07,500 --> 00:38:08,880
um to talk to them to let them know that

1062
00:38:08,880 --> 00:38:10,020
I was going to do this so that I didn't

1063
00:38:10,020 --> 00:38:11,160
get banned

1064
00:38:11,160 --> 00:38:12,599
um so you can reach out to the GitHub

1065
00:38:12,599 --> 00:38:13,859
security lab

1066
00:38:13,859 --> 00:38:14,940
um to let them know that you're going to

1067
00:38:14,940 --> 00:38:17,339
do this so that they are aware

1068
00:38:17,339 --> 00:38:19,260
um and then consider the implications of

1069
00:38:19,260 --> 00:38:21,119
this work

1070
00:38:21,119 --> 00:38:23,700
shortly after doing my zip slip campaign

1071
00:38:23,700 --> 00:38:26,099
I got this issue against my security

1072
00:38:26,099 --> 00:38:28,079
research Repository

1073
00:38:28,079 --> 00:38:30,480
is this responsible disclosure

1074
00:38:30,480 --> 00:38:31,800
I don't use the term responsible

1075
00:38:31,800 --> 00:38:33,839
disclosure I use coordinated disclosure

1076
00:38:33,839 --> 00:38:35,820
because you know that's what I do and

1077
00:38:35,820 --> 00:38:37,740
responsible disclosures and all an

1078
00:38:37,740 --> 00:38:39,780
outdated term but regardless of the term

1079
00:38:39,780 --> 00:38:41,460
you use the answer to this question is

1080
00:38:41,460 --> 00:38:42,180
no

1081
00:38:42,180 --> 00:38:43,740
this is full disclosure of a security

1082
00:38:43,740 --> 00:38:46,140
vulnerability in an open source project

1083
00:38:46,140 --> 00:38:49,879
you've owed data an open source project

1084
00:38:49,920 --> 00:38:51,000
that's

1085
00:38:51,000 --> 00:38:53,460
not great unfortunately

1086
00:38:53,460 --> 00:38:55,380
however

1087
00:38:55,380 --> 00:38:55,980
um

1088
00:38:55,980 --> 00:38:57,839
I can't disclose to all the projects

1089
00:38:57,839 --> 00:38:59,160
that I'm aware of that are vulnerable

1090
00:38:59,160 --> 00:39:01,260
right it's just not practical for me to

1091
00:39:01,260 --> 00:39:02,160
do that

1092
00:39:02,160 --> 00:39:05,040
and so I argue that if we want us if we

1093
00:39:05,040 --> 00:39:06,599
want to best use our knowledge of

1094
00:39:06,599 --> 00:39:08,160
security vulnerabilities to fix these

1095
00:39:08,160 --> 00:39:10,560
problems it's an unfortunate downside

1096
00:39:10,560 --> 00:39:12,180
that we do have to do this because

1097
00:39:12,180 --> 00:39:14,099
otherwise the the alternative is just

1098
00:39:14,099 --> 00:39:16,440
not fixing it because it's there's too

1099
00:39:16,440 --> 00:39:19,380
much there's too much time in a day

1100
00:39:19,380 --> 00:39:20,640
um so

1101
00:39:20,640 --> 00:39:22,980
in conclusion

1102
00:39:22,980 --> 00:39:24,960
as security researchers

1103
00:39:24,960 --> 00:39:26,940
I believe we have an obligation to

1104
00:39:26,940 --> 00:39:28,500
society

1105
00:39:28,500 --> 00:39:30,240
we

1106
00:39:30,240 --> 00:39:32,220
we know these vulnerabilities exist and

1107
00:39:32,220 --> 00:39:33,599
are out there we've seen them in pen

1108
00:39:33,599 --> 00:39:35,160
test reports we've written them in pen

1109
00:39:35,160 --> 00:39:36,359
test reports we've written them in

1110
00:39:36,359 --> 00:39:38,400
disclosures we see them appear again and

1111
00:39:38,400 --> 00:39:40,800
again and again and the same old stuff

1112
00:39:40,800 --> 00:39:42,480
too it's not even new stuff a lot of the

1113
00:39:42,480 --> 00:39:44,460
time it's the same vulnerabilities all

1114
00:39:44,460 --> 00:39:46,020
over the place

1115
00:39:46,020 --> 00:39:48,480
and so I believe

1116
00:39:48,480 --> 00:39:51,420
that this is a a solid way to solve this

1117
00:39:51,420 --> 00:39:52,980
problem there's a there's a quote that

1118
00:39:52,980 --> 00:39:54,660
GitHub put out there for every 500

1119
00:39:54,660 --> 00:39:56,520
developers there's only one security

1120
00:39:56,520 --> 00:39:58,200
researcher

1121
00:39:58,200 --> 00:40:00,119
the odds are stacked against us there's

1122
00:40:00,119 --> 00:40:01,619
not enough of us

1123
00:40:01,619 --> 00:40:03,780
to fix these issues that are you know

1124
00:40:03,780 --> 00:40:06,300
across the entire industry

1125
00:40:06,300 --> 00:40:07,920
and so

1126
00:40:07,920 --> 00:40:10,260
I believe that opens the bulk floor

1127
00:40:10,260 --> 00:40:11,940
crash generation to fix widespread

1128
00:40:11,940 --> 00:40:13,260
common security vulnerabilities across

1129
00:40:13,260 --> 00:40:15,180
open source is the best way for us to

1130
00:40:15,180 --> 00:40:16,440
scale our knowledge of math science

1131
00:40:16,440 --> 00:40:18,900
technology and security to fix these

1132
00:40:18,900 --> 00:40:21,780
problems that span the entire industry

1133
00:40:21,780 --> 00:40:23,160
and with that I want to leave with you

1134
00:40:23,160 --> 00:40:25,140
with one final quote this is from Dan

1135
00:40:25,140 --> 00:40:27,300
Kaminski um it's on his Twitter page

1136
00:40:27,300 --> 00:40:29,460
it's still there to this day

1137
00:40:29,460 --> 00:40:32,640
we can fix it we have the technology

1138
00:40:32,640 --> 00:40:34,140
okay we need to create the technology

1139
00:40:34,140 --> 00:40:36,240
all right the policy guys are mucking

1140
00:40:36,240 --> 00:40:37,680
with the technology

1141
00:40:37,680 --> 00:40:41,720
relax We're on it

1142
00:40:51,960 --> 00:40:54,119
thank you um with that I want to leave

1143
00:40:54,119 --> 00:40:55,920
so I got a last couple of little things

1144
00:40:55,920 --> 00:40:58,859
so learn code ql like seriously um

1145
00:40:58,859 --> 00:41:00,240
contribute to open rewrite and you can

1146
00:41:00,240 --> 00:41:02,280
deploy your security fixes at scale and

1147
00:41:02,280 --> 00:41:04,320
then join the GitHub security lab uh

1148
00:41:04,320 --> 00:41:05,880
slack channel the open rewrite slack

1149
00:41:05,880 --> 00:41:07,200
Channel where you can discuss these

1150
00:41:07,200 --> 00:41:09,300
things and then also the Linux

1151
00:41:09,300 --> 00:41:10,859
Foundation has if you're curious about

1152
00:41:10,859 --> 00:41:13,020
open source security in general the

1153
00:41:13,020 --> 00:41:14,460
Linux Foundation has created the open

1154
00:41:14,460 --> 00:41:16,500
source security Foundation they have

1155
00:41:16,500 --> 00:41:18,599
meetings weekly they have a calendar

1156
00:41:18,599 --> 00:41:20,940
that is open any of you can join if

1157
00:41:20,940 --> 00:41:22,260
you're curious about trying to secure

1158
00:41:22,260 --> 00:41:24,480
open source consider contributing to the

1159
00:41:24,480 --> 00:41:27,000
uh the open source security Foundation

1160
00:41:27,000 --> 00:41:28,140
um and with that I want to leave thank

1161
00:41:28,140 --> 00:41:30,660
you human my employer modern uh Lydia

1162
00:41:30,660 --> 00:41:32,160
Giuliano who's The Speaker coach for

1163
00:41:32,160 --> 00:41:33,300
black cat that helped me get this

1164
00:41:33,300 --> 00:41:36,359
presentation and Sean my intern who's uh

1165
00:41:36,359 --> 00:41:37,740
who actually created the graphics for

1166
00:41:37,740 --> 00:41:39,119
control flow and dataflow and worked

1167
00:41:39,119 --> 00:41:40,260
with me to actually build that

1168
00:41:40,260 --> 00:41:42,000
functionality into open rewrite and yeah

1169
00:41:42,000 --> 00:41:43,260
so

1170
00:41:43,260 --> 00:41:45,599
yeah that's it you could find me there

1171
00:41:45,599 --> 00:41:48,380
yeah thank you

1172
00:41:51,000 --> 00:41:53,579
so my my my my my first thing was uh

1173
00:41:53,579 --> 00:41:55,980
what tool did you use for control flow

1174
00:41:55,980 --> 00:41:57,480
analysis did you mention that well I

1175
00:41:57,480 --> 00:41:59,760
wrote it myself oh you realized it was

1176
00:41:59,760 --> 00:42:01,020
uh yeah it was my I grabbed an intern

1177
00:42:01,020 --> 00:42:03,119
who had taken a compiler's class and

1178
00:42:03,119 --> 00:42:05,160
said I've got to build this from scratch

1179
00:42:05,160 --> 00:42:06,960
how do we do this and we sat down and

1180
00:42:06,960 --> 00:42:09,300
just you know cranked so yeah so that

1181
00:42:09,300 --> 00:42:10,980
but that's available as well it is it's

1182
00:42:10,980 --> 00:42:12,599
it's uh so for both data flow and

1183
00:42:12,599 --> 00:42:14,700
control flow for code ql you can do

1184
00:42:14,700 --> 00:42:16,619
global data flow and Global control flow

1185
00:42:16,619 --> 00:42:18,300
across an entire application across the

1186
00:42:18,300 --> 00:42:20,280
entire compiled application currently

1187
00:42:20,280 --> 00:42:22,260
for openreerate it only supports local

1188
00:42:22,260 --> 00:42:24,359
so it's function scoped

1189
00:42:24,359 --> 00:42:27,000
um I would like to get that wider um I

1190
00:42:27,000 --> 00:42:28,800
only had so much time you know with this

1191
00:42:28,800 --> 00:42:30,540
Fellowship so it's my intention to

1192
00:42:30,540 --> 00:42:32,220
expand it to make it bigger so you can

1193
00:42:32,220 --> 00:42:33,780
do I mean the long-term goal is be able

1194
00:42:33,780 --> 00:42:35,400
to do data flow analysis and data track

1195
00:42:35,400 --> 00:42:38,339
uh taint tracking like code ql does from

1196
00:42:38,339 --> 00:42:40,560
user supplied input all the way down to

1197
00:42:40,560 --> 00:42:42,780
a call site like an SQL SQL injection

1198
00:42:42,780 --> 00:42:44,820
call site and Trace that vulnerability

1199
00:42:44,820 --> 00:42:46,740
all the way through long term one of my

1200
00:42:46,740 --> 00:42:48,300
goals is to eliminate you know

1201
00:42:48,300 --> 00:42:50,339
potentially SQL injection from the

1202
00:42:50,339 --> 00:42:52,920
JavaScript Java ecosystem because we

1203
00:42:52,920 --> 00:42:54,359
coach you all has that functionality in

1204
00:42:54,359 --> 00:42:56,040
the feature to detect it all we need to

1205
00:42:56,040 --> 00:42:57,599
do is take the detection technologies

1206
00:42:57,599 --> 00:42:59,640
that already exist and apply them to

1207
00:42:59,640 --> 00:43:01,380
actually fix these issues

1208
00:43:01,380 --> 00:43:03,000
um on top of that just think like you

1209
00:43:03,000 --> 00:43:04,440
know this was like a little bit bigger

1210
00:43:04,440 --> 00:43:06,540
open redirect doesn't support like C and

1211
00:43:06,540 --> 00:43:08,819
cos plus yet but like just think

1212
00:43:08,819 --> 00:43:10,560
there's a bunch of c and cos plus memory

1213
00:43:10,560 --> 00:43:11,640
corruption vulnerabilities it's just

1214
00:43:11,640 --> 00:43:13,079
sitting there in open source like

1215
00:43:13,079 --> 00:43:14,640
imagine just like sweeping those away

1216
00:43:14,640 --> 00:43:16,980
across open source like that's such a

1217
00:43:16,980 --> 00:43:18,480
big win for our entire industry right

1218
00:43:18,480 --> 00:43:20,880
there that's just like gone

1219
00:43:20,880 --> 00:43:23,880
yeah yeah I mean I wish more people use

1220
00:43:23,880 --> 00:43:25,140
these tools even if they would just want

1221
00:43:25,140 --> 00:43:26,880
to use it to find the stuff and not fix

1222
00:43:26,880 --> 00:43:29,460
it just use these types of tools

1223
00:43:29,460 --> 00:43:30,960
um understand how many people in here

1224
00:43:30,960 --> 00:43:34,560
have ever worked with code ql

1225
00:43:34,560 --> 00:43:37,440
yeah about five people yeah exactly that

1226
00:43:37,440 --> 00:43:39,839
that is one of the main problems I think

1227
00:43:39,839 --> 00:43:42,180
like even if you're not you know hunting

1228
00:43:42,180 --> 00:43:44,520
for stuff in open source projects just

1229
00:43:44,520 --> 00:43:46,200
use it for your own project just

1230
00:43:46,200 --> 00:43:48,359
understand your own project yeah it's

1231
00:43:48,359 --> 00:43:49,740
really good stuff yeah it's very good

1232
00:43:49,740 --> 00:43:52,079
stuff and like fallback right code

1233
00:43:52,079 --> 00:43:53,460
search if you can get into the Beta get

1234
00:43:53,460 --> 00:43:56,220
up to code searches actually well

1235
00:43:56,220 --> 00:43:58,440
oops there goes the duck well there goes

1236
00:43:58,440 --> 00:44:00,720
pick up for the deck so yes uh get up

1237
00:44:00,720 --> 00:44:02,940
code search you know if it gives you a

1238
00:44:02,940 --> 00:44:04,140
good list of projects that may be

1239
00:44:04,140 --> 00:44:06,000
vulnerable as an art offset and then

1240
00:44:06,000 --> 00:44:07,800
code ql to to like start digging and

1241
00:44:07,800 --> 00:44:10,020
actually finding unique individual cases

1242
00:44:10,020 --> 00:44:11,460
that don't have a lower false positive

1243
00:44:11,460 --> 00:44:12,480
rate

1244
00:44:12,480 --> 00:44:14,460
yeah I used a github's fuzzy search for

1245
00:44:14,460 --> 00:44:16,020
a long time and I'm so much I'm very

1246
00:44:16,020 --> 00:44:19,079
glad that code ql and get UPS yeah it's

1247
00:44:19,079 --> 00:44:20,640
a big difference

1248
00:44:20,640 --> 00:44:22,440
do you have okay we have some

1249
00:44:22,440 --> 00:44:24,060
intelligent questions from the audience

1250
00:44:24,060 --> 00:44:26,760
uh so I'm going to start with with uh

1251
00:44:26,760 --> 00:44:30,359
one that that actually makes sense when

1252
00:44:30,359 --> 00:44:32,220
doing these like large scales pull

1253
00:44:32,220 --> 00:44:34,380
requests do you actually test and build

1254
00:44:34,380 --> 00:44:38,700
every individual uh CI so you I rely

1255
00:44:38,700 --> 00:44:41,700
upon the Project's CI CD pipeline to

1256
00:44:41,700 --> 00:44:43,319
verify that the change does not break

1257
00:44:43,319 --> 00:44:44,700
something

1258
00:44:44,700 --> 00:44:47,579
um I have a bunch of unit tests myself

1259
00:44:47,579 --> 00:44:49,920
in open rewrite that make sure that the

1260
00:44:49,920 --> 00:44:51,540
change does what I expect right I do

1261
00:44:51,540 --> 00:44:53,040
test driven development to develop the

1262
00:44:53,040 --> 00:44:54,660
change and make sure that you know

1263
00:44:54,660 --> 00:44:56,460
before I'm running you know before I'm

1264
00:44:56,460 --> 00:44:57,599
running this at scale and actually

1265
00:44:57,599 --> 00:44:59,339
generating the pull requests I'm looking

1266
00:44:59,339 --> 00:45:01,319
at a good number of the actual changes

1267
00:45:01,319 --> 00:45:03,540
and seeing that they make sense and if I

1268
00:45:03,540 --> 00:45:04,920
see one that doesn't make sense I take

1269
00:45:04,920 --> 00:45:07,859
that put that into a test case in in the

1270
00:45:07,859 --> 00:45:09,900
open rewrite project making sure that I

1271
00:45:09,900 --> 00:45:11,700
get it right fix it and then you know

1272
00:45:11,700 --> 00:45:13,200
redeploy it and see if that fixes the

1273
00:45:13,200 --> 00:45:14,640
rest of the project so it's very much an

1274
00:45:14,640 --> 00:45:17,700
iterative process to develop the fixes

1275
00:45:17,700 --> 00:45:19,140
um so no I'm not doing that but I am

1276
00:45:19,140 --> 00:45:20,579
making sure that what I'm generating

1277
00:45:20,579 --> 00:45:23,760
makes sense in the general case

1278
00:45:23,760 --> 00:45:26,339
okay so another question which is sort

1279
00:45:26,339 --> 00:45:30,240
of funny is like have you in by mistake

1280
00:45:30,240 --> 00:45:31,980
patch things that were supposed to be

1281
00:45:31,980 --> 00:45:35,640
broken like oh wasp test cases yes uh I

1282
00:45:35,640 --> 00:45:37,560
did generate a pull request that I sent

1283
00:45:37,560 --> 00:45:39,599
to webgoat for anybody who doesn't know

1284
00:45:39,599 --> 00:45:41,640
what web goat is it's an intentionally

1285
00:45:41,640 --> 00:45:45,359
vulnerable project and yes so yes I have

1286
00:45:45,359 --> 00:45:47,700
I did I I know what this project is and

1287
00:45:47,700 --> 00:45:48,900
they're like you don't want to fix I'm

1288
00:45:48,900 --> 00:45:50,040
like no I didn't want to fix that

1289
00:45:50,040 --> 00:45:52,800
project sorry but yes it did it did

1290
00:45:52,800 --> 00:45:54,240
identify security vulnerability and web

1291
00:45:54,240 --> 00:45:57,300
goat so yeah and and what about all the

1292
00:45:57,300 --> 00:45:58,800
poor souls that are not on GitHub

1293
00:45:58,800 --> 00:46:01,020
they're like still self-hosting and and

1294
00:46:01,020 --> 00:46:02,640
or on git lab which is another

1295
00:46:02,640 --> 00:46:05,640
competitor in this space uh another it's

1296
00:46:05,640 --> 00:46:06,599
like

1297
00:46:06,599 --> 00:46:09,000
do you do other stuff than just GitHub

1298
00:46:09,000 --> 00:46:12,060
or is it purely GitHub I

1299
00:46:12,060 --> 00:46:14,940
if my focus has been GitHub it's

1300
00:46:14,940 --> 00:46:16,560
it like you know

1301
00:46:16,560 --> 00:46:18,480
again only so much time in the day in a

1302
00:46:18,480 --> 00:46:19,619
day right

1303
00:46:19,619 --> 00:46:23,099
um fix where most source code is

1304
00:46:23,099 --> 00:46:24,480
um but you do need to consider that

1305
00:46:24,480 --> 00:46:25,859
there is open source software in other

1306
00:46:25,859 --> 00:46:27,180
places

1307
00:46:27,180 --> 00:46:28,980
um I've just decided to take the easy

1308
00:46:28,980 --> 00:46:30,780
path of like what is where is thing

1309
00:46:30,780 --> 00:46:32,520
where are things mostly living and go

1310
00:46:32,520 --> 00:46:35,099
and fix stuff in that area

1311
00:46:35,099 --> 00:46:37,140
okay makes sense

1312
00:46:37,140 --> 00:46:39,480
um so another thing which is regarding

1313
00:46:39,480 --> 00:46:42,480
like responsible disclosure I mean this

1314
00:46:42,480 --> 00:46:45,000
is open source well-known cves that

1315
00:46:45,000 --> 00:46:47,099
we've known are broken yeah uh but but

1316
00:46:47,099 --> 00:46:48,960
what about like there is a zero day um

1317
00:46:48,960 --> 00:46:51,660
the world really needs to fix this How

1318
00:46:51,660 --> 00:46:53,280
would how would that work it's like if

1319
00:46:53,280 --> 00:46:55,260
we want to do this at scale with like

1320
00:46:55,260 --> 00:46:56,819
zero day Sprints so one of the

1321
00:46:56,819 --> 00:46:59,060
vulnerabilities that did get tackled was

1322
00:46:59,060 --> 00:47:02,220
uh let's see so

1323
00:47:02,220 --> 00:47:04,200
um

1324
00:47:04,200 --> 00:47:07,619
see how far back I can okay so CD cve uh

1325
00:47:07,619 --> 00:47:10,800
2020 eight uh five nine seven was a

1326
00:47:10,800 --> 00:47:12,240
vulnerability that I didn't actually fix

1327
00:47:12,240 --> 00:47:15,839
the GitHub team used my bot

1328
00:47:15,839 --> 00:47:17,280
um to generate a vulnerable

1329
00:47:17,280 --> 00:47:19,140
vulnerability fix for this CV it was an

1330
00:47:19,140 --> 00:47:21,420
R hostname array overflow uh

1331
00:47:21,420 --> 00:47:24,300
vulnerability it was handled by cert but

1332
00:47:24,300 --> 00:47:26,760
they found that there was you know three

1333
00:47:26,760 --> 00:47:28,640
uh there was

1334
00:47:28,640 --> 00:47:31,859
1885 projects that had this C component

1335
00:47:31,859 --> 00:47:33,780
that were relying upon this library that

1336
00:47:33,780 --> 00:47:37,020
had this vulnerability and so even

1337
00:47:37,020 --> 00:47:38,339
though they'd done all the disclosure

1338
00:47:38,339 --> 00:47:39,540
they've done all the you know they've

1339
00:47:39,540 --> 00:47:40,800
done all the coordination they could

1340
00:47:40,800 --> 00:47:42,119
there were still a bunch of projects in

1341
00:47:42,119 --> 00:47:43,140
open source that still had this

1342
00:47:43,140 --> 00:47:44,400
vulnerable library that was you know

1343
00:47:44,400 --> 00:47:46,560
across you know across because the C

1344
00:47:46,560 --> 00:47:47,760
ecosystem a lot of people vendor

1345
00:47:47,760 --> 00:47:50,460
dependencies right and so you know

1346
00:47:50,460 --> 00:47:52,920
GitHub worked to try to fix that

1347
00:47:52,920 --> 00:47:55,079
vulnerability by generating you know it

1348
00:47:55,079 --> 00:47:56,280
was an O day it was a known

1349
00:47:56,280 --> 00:47:57,780
vulnerability but like you know how do

1350
00:47:57,780 --> 00:47:59,880
you deal with a long tail open source

1351
00:47:59,880 --> 00:48:02,280
you can't really disclose to 1 800

1352
00:48:02,280 --> 00:48:03,660
projects privately like that's you know

1353
00:48:03,660 --> 00:48:06,000
kind of Impractical so you know that's

1354
00:48:06,000 --> 00:48:08,819
how that's what they did yeah okay make

1355
00:48:08,819 --> 00:48:09,780
sense

1356
00:48:09,780 --> 00:48:12,599
uh I think that's all of the the one

1357
00:48:12,599 --> 00:48:14,579
downstairs I got in but yeah let me run

1358
00:48:14,579 --> 00:48:16,020
around this mic now if only someone

1359
00:48:16,020 --> 00:48:18,359
would fix all the code examples that get

1360
00:48:18,359 --> 00:48:20,880
copy and pasted I know I know that's one

1361
00:48:20,880 --> 00:48:22,200
of the things when I find vulnerability

1362
00:48:22,200 --> 00:48:23,940
like examples if I'm looking through

1363
00:48:23,940 --> 00:48:26,700
stuff I do report stuff to like I found

1364
00:48:26,700 --> 00:48:28,260
so that partial past reversal

1365
00:48:28,260 --> 00:48:31,140
vulnerability I found that inside of

1366
00:48:31,140 --> 00:48:33,540
Google's documentation for how to fix

1367
00:48:33,540 --> 00:48:36,720
past reversal in Android applications

1368
00:48:36,720 --> 00:48:39,180
so I'm like hey your example is still

1369
00:48:39,180 --> 00:48:42,599
vulnerable so yes so yeah exactly I I

1370
00:48:42,599 --> 00:48:44,099
you know chasing those things down too

1371
00:48:44,099 --> 00:48:45,839
is also important

1372
00:48:45,839 --> 00:48:48,540
so one thing I'll tell you is I used to

1373
00:48:48,540 --> 00:48:49,920
hang around with Dan and he'd be really

1374
00:48:49,920 --> 00:48:51,660
happy with this

1375
00:48:51,660 --> 00:48:54,000
um that's an honor thank you the the

1376
00:48:54,000 --> 00:48:56,640
other thing I mentioned is that uh is

1377
00:48:56,640 --> 00:48:59,579
there uh for private commits

1378
00:48:59,579 --> 00:49:03,300
or private polls I have so GitHub is

1379
00:49:03,300 --> 00:49:05,579
working on adding support for private

1380
00:49:05,579 --> 00:49:07,200
disclosure to disclose vulnerabilities

1381
00:49:07,200 --> 00:49:09,720
privately to maintainers currently in

1382
00:49:09,720 --> 00:49:11,460
order to do disclosure via to GitHub you

1383
00:49:11,460 --> 00:49:12,900
have to ask the maintainer to open a

1384
00:49:12,900 --> 00:49:14,160
GitHub security advisory and then you

1385
00:49:14,160 --> 00:49:15,420
can discuss it privately with them there

1386
00:49:15,420 --> 00:49:17,220
they're working on a way to let security

1387
00:49:17,220 --> 00:49:19,380
researchers disclose vulnerabilities in

1388
00:49:19,380 --> 00:49:21,540
that way however the current plan as far

1389
00:49:21,540 --> 00:49:23,400
as I'm aware does not include an API to

1390
00:49:23,400 --> 00:49:25,380
allow you to do that and so GitHub

1391
00:49:25,380 --> 00:49:26,880
security advisories also let you create

1392
00:49:26,880 --> 00:49:29,040
private Forks to generate you know to

1393
00:49:29,040 --> 00:49:30,960
work on contribute with work with the

1394
00:49:30,960 --> 00:49:32,520
maintainers privately then they can

1395
00:49:32,520 --> 00:49:34,020
merge that and then you know that's

1396
00:49:34,020 --> 00:49:35,460
that's the current flow for GitHub

1397
00:49:35,460 --> 00:49:37,260
security advisories but none of that can

1398
00:49:37,260 --> 00:49:39,420
be done by the security researcher and

1399
00:49:39,420 --> 00:49:41,579
also there's no API for it so if it was

1400
00:49:41,579 --> 00:49:43,740
supported if GitHub enabled that support

1401
00:49:43,740 --> 00:49:47,099
100 would absolutely use it it is is

1402
00:49:47,099 --> 00:49:48,900
there anything talking about

1403
00:49:48,900 --> 00:49:51,540
um exceptions to rate limiting already

1404
00:49:51,540 --> 00:49:55,619
no uh I did ask them if they could uh

1405
00:49:55,619 --> 00:49:58,800
give me like permission to like you know

1406
00:49:58,800 --> 00:50:00,839
like can you put my name in as like a

1407
00:50:00,839 --> 00:50:02,280
you know allow list sort of thing and

1408
00:50:02,280 --> 00:50:03,599
that didn't fly because I was gonna be

1409
00:50:03,599 --> 00:50:04,740
talking about it to all you guys and

1410
00:50:04,740 --> 00:50:05,640
they didn't want me to be doing anything

1411
00:50:05,640 --> 00:50:07,980
that the rest of you couldn't do which I

1412
00:50:07,980 --> 00:50:10,980
respect so yeah

1413
00:50:10,980 --> 00:50:12,599
anybody else for questions I think we

1414
00:50:12,599 --> 00:50:14,099
have any more questions just raise your

1415
00:50:14,099 --> 00:50:15,780
hand yeah

1416
00:50:15,780 --> 00:50:17,579
I love these questions so far

1417
00:50:17,579 --> 00:50:19,319
no

1418
00:50:19,319 --> 00:50:22,140
that one right here

1419
00:50:22,140 --> 00:50:24,720
I'm curious about the ethical aspects

1420
00:50:24,720 --> 00:50:26,400
the people who talked about the fullest

1421
00:50:26,400 --> 00:50:28,560
full disclosure responsible disclosure I

1422
00:50:28,560 --> 00:50:30,900
mean I completely agree that this is a

1423
00:50:30,900 --> 00:50:33,960
more efficient way to reach the goal and

1424
00:50:33,960 --> 00:50:35,819
change is what we want right we want it

1425
00:50:35,819 --> 00:50:38,099
to be changed reporting is come second

1426
00:50:38,099 --> 00:50:39,660
hand in a sense

1427
00:50:39,660 --> 00:50:42,599
um are there any known alternatives on

1428
00:50:42,599 --> 00:50:44,400
the method to

1429
00:50:44,400 --> 00:50:46,920
reach out to these projects and instruct

1430
00:50:46,920 --> 00:50:48,960
them on how to fix this problem and

1431
00:50:48,960 --> 00:50:50,880
avoid similar problems in the future

1432
00:50:50,880 --> 00:50:53,160
like to efficiently educate them have

1433
00:50:53,160 --> 00:50:54,780
you seen any avenues that you would want

1434
00:50:54,780 --> 00:50:57,359
to consider so GitHub does have the

1435
00:50:57,359 --> 00:50:59,760
security.md file which they suggest

1436
00:50:59,760 --> 00:51:02,640
maintainers put and you may have a wide

1437
00:51:02,640 --> 00:51:03,660
range of different ways that people

1438
00:51:03,660 --> 00:51:05,460
disclose some people use hacker one some

1439
00:51:05,460 --> 00:51:08,220
people use email some people so there is

1440
00:51:08,220 --> 00:51:10,800
I'm hoping that GitHub would offer a

1441
00:51:10,800 --> 00:51:12,420
standardized way to enable this because

1442
00:51:12,420 --> 00:51:14,579
you know that would help a lot and again

1443
00:51:14,579 --> 00:51:16,079
I know that there's a goal of being

1444
00:51:16,079 --> 00:51:17,460
Fender neutral and like you know we want

1445
00:51:17,460 --> 00:51:20,400
to support you know gitlab you know most

1446
00:51:20,400 --> 00:51:23,579
open source lives on GitHub currently

1447
00:51:23,579 --> 00:51:25,559
um and so

1448
00:51:25,559 --> 00:51:27,359
yes

1449
00:51:27,359 --> 00:51:29,339
um the the

1450
00:51:29,339 --> 00:51:31,619
one of the problems that

1451
00:51:31,619 --> 00:51:33,680
um

1452
00:51:34,440 --> 00:51:36,480
I run into is like if I were to send out

1453
00:51:36,480 --> 00:51:38,520
a like you know a thousand emails right

1454
00:51:38,520 --> 00:51:39,660
I'm gonna end up with a lot of

1455
00:51:39,660 --> 00:51:42,059
maintainers that are gonna you know

1456
00:51:42,059 --> 00:51:43,740
see the vulnerability be like well but

1457
00:51:43,740 --> 00:51:45,599
now I gotta do something about it then

1458
00:51:45,599 --> 00:51:47,339
you know on top of that there one of the

1459
00:51:47,339 --> 00:51:48,660
things that you run into is with with

1460
00:51:48,660 --> 00:51:49,980
people just in general like you'll

1461
00:51:49,980 --> 00:51:51,599
describe a vulnerability to them and

1462
00:51:51,599 --> 00:51:52,800
explain how it's vulnerable and then

1463
00:51:52,800 --> 00:51:55,680
they'll fix it but wrong right and so

1464
00:51:55,680 --> 00:51:58,380
the right like you know imagine if I

1465
00:51:58,380 --> 00:51:59,700
said hey you got zip slip how many

1466
00:51:59,700 --> 00:52:01,079
people I would have gotten partial past

1467
00:52:01,079 --> 00:52:02,880
reversal as a vulnerable vulnerability

1468
00:52:02,880 --> 00:52:04,140
fix right because it's you know actually

1469
00:52:04,140 --> 00:52:05,760
I did end up fixing some zip flip

1470
00:52:05,760 --> 00:52:07,260
vulnerabilities that were just path

1471
00:52:07,260 --> 00:52:09,420
traversal but in the zip unzipping logic

1472
00:52:09,420 --> 00:52:11,280
right because there had been an effort

1473
00:52:11,280 --> 00:52:14,339
by Snick back in 2018 to fix zip slip

1474
00:52:14,339 --> 00:52:16,020
across the open source ecosystem but

1475
00:52:16,020 --> 00:52:17,520
there was a bunch of code that although

1476
00:52:17,520 --> 00:52:20,220
it had been fixed to patch path reversal

1477
00:52:20,220 --> 00:52:21,900
was still vulnerable to partial patch

1478
00:52:21,900 --> 00:52:23,940
reversal right so

1479
00:52:23,940 --> 00:52:28,140
if I give them the fix with a diff I I

1480
00:52:28,140 --> 00:52:29,640
could send them an email with a diff

1481
00:52:29,640 --> 00:52:32,400
right that's a valid option

1482
00:52:32,400 --> 00:52:33,240
um

1483
00:52:33,240 --> 00:52:35,099
I'm I'm under the perception that it

1484
00:52:35,099 --> 00:52:36,660
would probably get it merged a lot

1485
00:52:36,660 --> 00:52:38,700
faster just giving it to them in the

1486
00:52:38,700 --> 00:52:39,660
format they know how to accept

1487
00:52:39,660 --> 00:52:42,180
contributions right

1488
00:52:42,180 --> 00:52:43,980
um if somebody wants to try it the other

1489
00:52:43,980 --> 00:52:45,780
way and come back to me and say I had

1490
00:52:45,780 --> 00:52:47,339
this amount of success like maybe like

1491
00:52:47,339 --> 00:52:49,740
great like I'd be happy to like you know

1492
00:52:49,740 --> 00:52:51,059
but this is what I've you know I'm happy

1493
00:52:51,059 --> 00:52:52,980
to try it maybe with a future one

1494
00:52:52,980 --> 00:52:54,900
yeah it's like it's a lot of extra work

1495
00:52:54,900 --> 00:52:56,880
on my behalf too

1496
00:52:56,880 --> 00:52:58,079
um

1497
00:52:58,079 --> 00:53:00,359
and it's only one of me currently

1498
00:53:00,359 --> 00:53:02,880
so yeah I am looking for a home for this

1499
00:53:02,880 --> 00:53:04,319
project because the fellowship only goes

1500
00:53:04,319 --> 00:53:06,359
till January so I am looking to try to

1501
00:53:06,359 --> 00:53:08,040
find a place to and I'd like to do this

1502
00:53:08,040 --> 00:53:09,599
with a small team of people like two to

1503
00:53:09,599 --> 00:53:10,619
three people I have no interest in being

1504
00:53:10,619 --> 00:53:12,420
a manager but like small team of people

1505
00:53:12,420 --> 00:53:15,300
to do more of this so um any of your

1506
00:53:15,300 --> 00:53:17,040
organizations are looking for a home for

1507
00:53:17,040 --> 00:53:18,480
this project feel free to come find me

1508
00:53:18,480 --> 00:53:20,640
after this so yeah

1509
00:53:20,640 --> 00:53:22,200
any other questions these have been

1510
00:53:22,200 --> 00:53:24,740
great so far

1511
00:53:25,920 --> 00:53:27,900
uh one in the way back out there can we

1512
00:53:27,900 --> 00:53:30,119
get a microphone way over there very

1513
00:53:30,119 --> 00:53:31,260
quickly

1514
00:53:31,260 --> 00:53:33,240
where you need to raise your hand oh

1515
00:53:33,240 --> 00:53:36,200
down there all right

1516
00:53:41,160 --> 00:53:42,720
meet him halfway

1517
00:53:42,720 --> 00:53:45,980
it's called mic Runner

1518
00:53:46,800 --> 00:53:50,280
hello hello uh I'm curious to hear about

1519
00:53:50,280 --> 00:53:53,400
if you've had any uh false positives for

1520
00:53:53,400 --> 00:53:56,400
these Bots and pull requests yes or or

1521
00:53:56,400 --> 00:53:59,579
if or and if uh developer hasn't really

1522
00:53:59,579 --> 00:54:02,640
appreciated the fix yes so you do run

1523
00:54:02,640 --> 00:54:03,540
into that

1524
00:54:03,540 --> 00:54:05,700
um I listed the merge pull requests a

1525
00:54:05,700 --> 00:54:07,680
lot of so for the for the top one HP

1526
00:54:07,680 --> 00:54:09,839
downloaded dependencies that includes

1527
00:54:09,839 --> 00:54:11,520
pull requests that have been closed and

1528
00:54:11,520 --> 00:54:13,440
merged because a lot of the time close

1529
00:54:13,440 --> 00:54:14,880
pull requests even though they were

1530
00:54:14,880 --> 00:54:16,800
closed they get merged by the maintainer

1531
00:54:16,800 --> 00:54:17,880
later

1532
00:54:17,880 --> 00:54:19,680
um I only included merge pull requests

1533
00:54:19,680 --> 00:54:21,599
in the list of ones for the zip slip

1534
00:54:21,599 --> 00:54:22,859
because there are certain ones that were

1535
00:54:22,859 --> 00:54:24,720
closed I ran into like you know the web

1536
00:54:24,720 --> 00:54:26,760
goat case

1537
00:54:26,760 --> 00:54:28,200
um sometimes you know one of the other

1538
00:54:28,200 --> 00:54:29,819
cases you run into is it's a lot of the

1539
00:54:29,819 --> 00:54:32,640
time the vulnerabilities and tests but I

1540
00:54:32,640 --> 00:54:34,500
still fix test code because I don't know

1541
00:54:34,500 --> 00:54:36,540
what your test code is doing right you

1542
00:54:36,540 --> 00:54:37,980
could be downloading something from some

1543
00:54:37,980 --> 00:54:40,140
other arbitrary server I don't make an

1544
00:54:40,140 --> 00:54:41,940
assumption that your test code is safe

1545
00:54:41,940 --> 00:54:45,000
right I still fix test code that I get

1546
00:54:45,000 --> 00:54:47,220
some pushback on it for maintainers I

1547
00:54:47,220 --> 00:54:48,540
respect that and it's the same

1548
00:54:48,540 --> 00:54:49,740
conversation that happens with the

1549
00:54:49,740 --> 00:54:51,300
pendabot and people saying well you

1550
00:54:51,300 --> 00:54:52,740
shouldn't fix Dev dependencies or just

1551
00:54:52,740 --> 00:54:54,900
Dev dependencies developers are running

1552
00:54:54,900 --> 00:54:58,680
code two like I don't know like so

1553
00:54:58,680 --> 00:55:01,079
um uh and then yeah there are cases that

1554
00:55:01,079 --> 00:55:02,700
it's you know there there are other

1555
00:55:02,700 --> 00:55:04,859
guards that you know my guard what I'm

1556
00:55:04,859 --> 00:55:06,599
looking for is a very specific guard

1557
00:55:06,599 --> 00:55:08,339
right

1558
00:55:08,339 --> 00:55:11,040
um that you know is is there some past

1559
00:55:11,040 --> 00:55:13,800
reversal payload protection in place if

1560
00:55:13,800 --> 00:55:17,220
not generate the fix sometimes logic

1561
00:55:17,220 --> 00:55:19,859
calls out to other functions to check to

1562
00:55:19,859 --> 00:55:22,020
see if it's validated or not and I can't

1563
00:55:22,020 --> 00:55:23,880
detect that now I could if I were to

1564
00:55:23,880 --> 00:55:25,260
expand what control flow and dataflow

1565
00:55:25,260 --> 00:55:27,359
were to look for but currently it does

1566
00:55:27,359 --> 00:55:30,000
not support that so yes sometimes it's

1567
00:55:30,000 --> 00:55:32,400
rare this does a good job of covering

1568
00:55:32,400 --> 00:55:35,339
most cases and if not it's easier to

1569
00:55:35,339 --> 00:55:39,000
apologize to the few and fix the greater

1570
00:55:39,000 --> 00:55:42,140
in my personal opinion

1571
00:55:42,300 --> 00:55:44,400
I have had some pushback from like the

1572
00:55:44,400 --> 00:55:46,200
Jenkins team said stop doing this

1573
00:55:46,200 --> 00:55:47,760
completely like report to us privately

1574
00:55:47,760 --> 00:55:49,559
and I was like you do you want

1575
00:55:49,559 --> 00:55:50,880
disclosure

1576
00:55:50,880 --> 00:55:52,680
like do you want me to fix it or do you

1577
00:55:52,680 --> 00:55:53,819
want nothing because I'm probably like

1578
00:55:53,819 --> 00:55:55,260
there's there's only so much time in a

1579
00:55:55,260 --> 00:55:57,720
day so uh I you know I'm still

1580
00:55:57,720 --> 00:55:59,400
conversing with the Jenkins team about

1581
00:55:59,400 --> 00:56:00,900
that particular issue and I've also had

1582
00:56:00,900 --> 00:56:01,980
some pushback from people from the

1583
00:56:01,980 --> 00:56:03,900
Apache software Foundation some teams

1584
00:56:03,900 --> 00:56:05,760
are great and happy with it some teams

1585
00:56:05,760 --> 00:56:06,900
are like you're not following our

1586
00:56:06,900 --> 00:56:10,920
process and I'm like you know so yeah

1587
00:56:10,920 --> 00:56:11,460
um

1588
00:56:11,460 --> 00:56:13,079
we have

1589
00:56:13,079 --> 00:56:15,300
three minutes any other final last

1590
00:56:15,300 --> 00:56:18,920
questions I'm also yes

1591
00:56:21,240 --> 00:56:23,160
yes okay so if you're curious to learn

1592
00:56:23,160 --> 00:56:26,339
more about code ql thank you

1593
00:56:26,339 --> 00:56:27,359
um there's a if you're curious to learn

1594
00:56:27,359 --> 00:56:29,460
more about code ql I did a two hour live

1595
00:56:29,460 --> 00:56:31,680
stream where I covered an introduction

1596
00:56:31,680 --> 00:56:34,140
that I ran through the tutorial for code

1597
00:56:34,140 --> 00:56:35,940
ql so

1598
00:56:35,940 --> 00:56:37,500
um I don't have a link for it but if you

1599
00:56:37,500 --> 00:56:40,440
look up code ql tutorial my name

1600
00:56:40,440 --> 00:56:42,960
um on YouTube you'll find it um there

1601
00:56:42,960 --> 00:56:45,480
you can go through the tutorial without

1602
00:56:45,480 --> 00:56:47,819
um my video but some people find that

1603
00:56:47,819 --> 00:56:49,200
they learn better with somebody walking

1604
00:56:49,200 --> 00:56:51,240
along with it with them

1605
00:56:51,240 --> 00:56:54,720
um the if you want to try code ql um the

1606
00:56:54,720 --> 00:56:56,339
easiest way to try it is on their

1607
00:56:56,339 --> 00:56:59,339
website lgtm.com which is going away in

1608
00:56:59,339 --> 00:57:03,180
December so you can try it with vs code

1609
00:57:03,180 --> 00:57:04,619
but if you want the easiest way to try

1610
00:57:04,619 --> 00:57:06,180
it I recommend doing it before December

1611
00:57:06,180 --> 00:57:08,880
before lttm.com goes away

1612
00:57:08,880 --> 00:57:14,280
so lgtm looks good to me.com

1613
00:57:14,280 --> 00:57:15,780
yeah

1614
00:57:15,780 --> 00:57:18,359
I think that's all all the time we have

1615
00:57:18,359 --> 00:57:20,400
I'm I will be around I'm happy to chat

1616
00:57:20,400 --> 00:57:22,380
with all of you uh feel free to hit me

1617
00:57:22,380 --> 00:57:24,359
up on Twitter I am also willing to

1618
00:57:24,359 --> 00:57:26,220
accept questions and you know anything

1619
00:57:26,220 --> 00:57:27,480
like that there

1620
00:57:27,480 --> 00:57:30,119
um so uh it has been a pleasure thank

1621
00:57:30,119 --> 00:57:32,400
you so much for having me SEC T thank

1622
00:57:32,400 --> 00:57:35,059
you Jonathan

