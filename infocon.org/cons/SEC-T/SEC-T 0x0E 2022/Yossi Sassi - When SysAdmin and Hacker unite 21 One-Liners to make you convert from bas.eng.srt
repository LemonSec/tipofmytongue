1
00:00:02,959 --> 00:00:05,180
thank you

2
00:00:05,180 --> 00:00:09,720
dear traveled at vorah here

3
00:00:09,720 --> 00:00:12,540
in Sweden back

4
00:00:12,540 --> 00:00:14,940
so I'm going to talk to you this morning

5
00:00:14,940 --> 00:00:17,539
about

6
00:00:17,539 --> 00:00:20,160
possibly making you think differently

7
00:00:20,160 --> 00:00:23,100
about Powershell and this is a topic

8
00:00:23,100 --> 00:00:24,960
that was hard for me also a bit over a

9
00:00:24,960 --> 00:00:27,960
decade ago coming from beginning as a

10
00:00:27,960 --> 00:00:29,820
modem hacker in the 80s and coming from

11
00:00:29,820 --> 00:00:32,820
openvms and Unix platforms uh shelf

12
00:00:32,820 --> 00:00:35,460
shell scripts and Bash were all my life

13
00:00:35,460 --> 00:00:38,940
for more than 30 years but I really

14
00:00:38,940 --> 00:00:40,440
learned to appreciate Powershell so

15
00:00:40,440 --> 00:00:42,000
hopefully after what you see today maybe

16
00:00:42,000 --> 00:00:46,140
you will as well but I'm not naive I'm

17
00:00:46,140 --> 00:00:50,160
aware of reality that every person you

18
00:00:50,160 --> 00:00:52,260
know like this quote when he cuts his

19
00:00:52,260 --> 00:00:54,780
finger he curses in his native language

20
00:00:54,780 --> 00:00:56,940
right so I would never give up shell

21
00:00:56,940 --> 00:00:59,520
scripts and Bash Etc but I would urge

22
00:00:59,520 --> 00:01:00,780
you maybe

23
00:01:00,780 --> 00:01:04,500
uh instead of the religious CLI Wars I

24
00:01:04,500 --> 00:01:06,000
don't want to get into religious uh

25
00:01:06,000 --> 00:01:08,280
command line stuff maybe we'll learn to

26
00:01:08,280 --> 00:01:09,960
appreciate partial a bit differently

27
00:01:09,960 --> 00:01:14,700
this morning and do we have audio

28
00:01:14,700 --> 00:01:16,680
um

29
00:01:16,680 --> 00:01:19,140
can you get audio on the yeah so let's

30
00:01:19,140 --> 00:01:20,820
see if we do

31
00:01:20,820 --> 00:01:22,320
captain

32
00:01:22,320 --> 00:01:24,659
incoming message so we start off

33
00:01:24,659 --> 00:01:30,659
directly uh with this very quick example

34
00:01:30,659 --> 00:01:32,580
hey everyone

35
00:01:32,580 --> 00:01:34,619
all right

36
00:01:34,619 --> 00:01:38,280
quite uh simple or welcome to secti

37
00:01:38,280 --> 00:01:39,960
Triplet

38
00:01:39,960 --> 00:01:42,299
okay so that that's a one-liner that

39
00:01:42,299 --> 00:01:44,759
essentially reads like from that speech

40
00:01:44,759 --> 00:01:47,460
to text of course and think about it so

41
00:01:47,460 --> 00:01:49,079
that's a fun thing but think about it

42
00:01:49,079 --> 00:01:50,640
like this

43
00:01:50,640 --> 00:01:52,860
that you can actually beep console

44
00:01:52,860 --> 00:01:56,759
frequencies and control how long they we

45
00:01:56,759 --> 00:01:58,920
actually wrote a whole a whole payload

46
00:01:58,920 --> 00:02:01,560
with higher frequencies 20 000 Hertz and

47
00:02:01,560 --> 00:02:04,680
above to exfiltrate documents uh using

48
00:02:04,680 --> 00:02:06,600
this console beep so you can actually

49
00:02:06,600 --> 00:02:08,818
exfilter data from airgap networks

50
00:02:08,818 --> 00:02:12,120
without internet uh using this a little

51
00:02:12,120 --> 00:02:12,959
thing

52
00:02:12,959 --> 00:02:15,480
so a bit about myself like I said Avenue

53
00:02:15,480 --> 00:02:17,459
computers for a while a bit over 30

54
00:02:17,459 --> 00:02:19,800
years I've seen the promise of the

55
00:02:19,800 --> 00:02:21,840
internet and everything that happened

56
00:02:21,840 --> 00:02:24,660
afterwards uh basically a hacker

57
00:02:24,660 --> 00:02:27,840
information security researcher been a

58
00:02:27,840 --> 00:02:30,360
freelancer for the majority of time

59
00:02:30,360 --> 00:02:34,020
but doing a lot of red team pen testing

60
00:02:34,020 --> 00:02:37,200
Etc Consulting for uh many large

61
00:02:37,200 --> 00:02:39,239
organizations around the world I've been

62
00:02:39,239 --> 00:02:42,780
a part of uh I am founder of ten root

63
00:02:42,780 --> 00:02:44,940
cyber security a bunch of military

64
00:02:44,940 --> 00:02:47,879
classified hackers in Israel I've been a

65
00:02:47,879 --> 00:02:50,700
part of Javelin networks which is X

66
00:02:50,700 --> 00:02:53,340
Israeli Air Force veterans and

67
00:02:53,340 --> 00:02:55,680
intelligence Corps deception solution

68
00:02:55,680 --> 00:02:57,420
for Microsoft networks which we sold to

69
00:02:57,420 --> 00:03:00,720
semantec 2018 and also had my share time

70
00:03:00,720 --> 00:03:03,720
at Microsoft back in like late 90s to

71
00:03:03,720 --> 00:03:07,260
2007. I was actually the only guy in

72
00:03:07,260 --> 00:03:09,599
Microsoft with Linux on his laptop with

73
00:03:09,599 --> 00:03:13,560
Lilo if you remember that thing I was

74
00:03:13,560 --> 00:03:15,120
there when Steve Baumer called Linux

75
00:03:15,120 --> 00:03:19,140
cancer and I had Linux on my laptop that

76
00:03:19,140 --> 00:03:21,959
was a fun experience and on my spare

77
00:03:21,959 --> 00:03:24,840
time I volunteered to people that are

78
00:03:24,840 --> 00:03:26,640
maybe less fortunate than me I fly

79
00:03:26,640 --> 00:03:29,040
planes and I play the rock metal

80
00:03:29,040 --> 00:03:31,260
festivals in the world so what we'll

81
00:03:31,260 --> 00:03:33,120
talk about we'll speak very briefly

82
00:03:33,120 --> 00:03:35,220
about Powershell so even if you don't

83
00:03:35,220 --> 00:03:37,680
know what it is by any chance or even if

84
00:03:37,680 --> 00:03:39,200
you think you know very much what it is

85
00:03:39,200 --> 00:03:42,120
uh we have surprises for all of you

86
00:03:42,120 --> 00:03:45,000
do a 101 syntax thing and then just Dive

87
00:03:45,000 --> 00:03:48,480
Right In to a lot of cool demos and tips

88
00:03:48,480 --> 00:03:50,700
and one-liners especially show you a

89
00:03:50,700 --> 00:03:52,260
cool research that we've did with the

90
00:03:52,260 --> 00:03:54,360
team to bypass all Powershell defenses

91
00:03:54,360 --> 00:03:57,180
uh rest assured all the code and the

92
00:03:57,180 --> 00:03:59,340
slides are already up on my GitHub page

93
00:03:59,340 --> 00:04:03,060
so I just want you to relax have fun try

94
00:04:03,060 --> 00:04:04,560
to understand what you're saying because

95
00:04:04,560 --> 00:04:06,599
I'm gonna be quick with a lot of demos

96
00:04:06,599 --> 00:04:08,299
on the command line

97
00:04:08,299 --> 00:04:11,700
and make sure note that the code is just

98
00:04:11,700 --> 00:04:14,159
waiting for you there afterwards

99
00:04:14,159 --> 00:04:15,840
so it is Powershell essentially it's

100
00:04:15,840 --> 00:04:18,000
perceived as the Microsoft gel for it or

101
00:04:18,000 --> 00:04:21,060
Cloud but in reality for adversaries and

102
00:04:21,060 --> 00:04:22,740
hackers this is really a different story

103
00:04:22,740 --> 00:04:25,860
right it's sort of a CMD on steroids but

104
00:04:25,860 --> 00:04:29,580
I like to uh to call it like if if bash

105
00:04:29,580 --> 00:04:34,320
ksh shell scripts uh Perl and Python and

106
00:04:34,320 --> 00:04:37,139
net went into a motel room whatever

107
00:04:37,139 --> 00:04:38,940
happened in the morning there was this

108
00:04:38,940 --> 00:04:43,440
blue shell that's partial so it's the

109
00:04:43,440 --> 00:04:46,979
child of many abundant parents on

110
00:04:46,979 --> 00:04:49,500
Windows undoubtedly ideal for post

111
00:04:49,500 --> 00:04:51,720
exploitation because it is the living of

112
00:04:51,720 --> 00:04:54,660
the land Heaven it is open source since

113
00:04:54,660 --> 00:04:56,940
August 2016 it's been open sourced on

114
00:04:56,940 --> 00:04:59,759
Mac OSX and Linux as well as Windows of

115
00:04:59,759 --> 00:05:01,259
course and in the scripts you can mix

116
00:05:01,259 --> 00:05:03,300
and match pretty much everything you can

117
00:05:03,300 --> 00:05:06,360
pipe from python to Powershell and vice

118
00:05:06,360 --> 00:05:08,880
versa mix and match shell scripts bash

119
00:05:08,880 --> 00:05:12,479
like commands LSPs curl Etc and it also

120
00:05:12,479 --> 00:05:13,979
leverages modules so you can have like

121
00:05:13,979 --> 00:05:16,500
this is very weird experiences like so

122
00:05:16,500 --> 00:05:18,840
doing Powershell installing modules to

123
00:05:18,840 --> 00:05:20,940
manage Azure Cloud resources for

124
00:05:20,940 --> 00:05:23,100
Microsoft on your Linux box but the main

125
00:05:23,100 --> 00:05:26,100
thing here to notice is that it is based

126
00:05:26,100 --> 00:05:28,320
on the dotnet framework or the.net core

127
00:05:28,320 --> 00:05:30,000
the open source framework and it works

128
00:05:30,000 --> 00:05:31,380
with objects

129
00:05:31,380 --> 00:05:34,919
unlike other text outputs STD outs

130
00:05:34,919 --> 00:05:37,620
Powershell outputs and objects with

131
00:05:37,620 --> 00:05:39,539
properties and methods on everything you

132
00:05:39,539 --> 00:05:42,120
do and it's based on a class library

133
00:05:42,120 --> 00:05:45,419
that utilizes everything XML file

134
00:05:45,419 --> 00:05:48,780
streams databases whatever you want the

135
00:05:48,780 --> 00:05:51,060
syntax is quite

136
00:05:51,060 --> 00:05:54,120
it's it's an acquired taste but the the

137
00:05:54,120 --> 00:05:57,800
native commands are verb Dash uh noun

138
00:05:57,800 --> 00:06:01,199
and you reference a variable by by using

139
00:06:01,199 --> 00:06:02,639
a dollar sign which is quite

140
00:06:02,639 --> 00:06:04,740
straightforward uh dollar underscore is

141
00:06:04,740 --> 00:06:06,780
the current object in the pipeline

142
00:06:06,780 --> 00:06:09,360
very simple syntax if brackets do

143
00:06:09,360 --> 00:06:11,639
something in curly brackets operators as

144
00:06:11,639 --> 00:06:14,460
you might expect equal like not like Etc

145
00:06:14,460 --> 00:06:17,759
and it is not case sensitive of course

146
00:06:17,759 --> 00:06:19,320
on depending on the operating system

147
00:06:19,320 --> 00:06:22,020
some elements will be case sensitive but

148
00:06:22,020 --> 00:06:24,060
it also has like cancer case sensitive

149
00:06:24,060 --> 00:06:27,000
operators so first thing it makes it

150
00:06:27,000 --> 00:06:29,280
creates a lot of functionality with

151
00:06:29,280 --> 00:06:31,380
minimum syntax living off the land

152
00:06:31,380 --> 00:06:34,080
there's a bunch of tweets by greater

153
00:06:34,080 --> 00:06:36,720
people than me that did this really fun

154
00:06:36,720 --> 00:06:38,639
one-liners all the time you can see them

155
00:06:38,639 --> 00:06:41,100
like crash Horizon system in a single

156
00:06:41,100 --> 00:06:43,800
Powershell line you know get NT file

157
00:06:43,800 --> 00:06:45,900
with the device control ID or the famous

158
00:06:45,900 --> 00:06:48,000
MC bypass in a single tweet by Matt

159
00:06:48,000 --> 00:06:51,120
Grabel we all know that but you can

160
00:06:51,120 --> 00:06:52,860
actually take this to the next level so

161
00:06:52,860 --> 00:06:55,740
in terms of productivity in this example

162
00:06:55,740 --> 00:06:58,620
we're gonna pipe a bunch of things so

163
00:06:58,620 --> 00:07:00,419
I'm gonna have a list of ips into a

164
00:07:00,419 --> 00:07:02,400
variables I'm gonna pipe those IP

165
00:07:02,400 --> 00:07:05,940
addresses uh into a for each Loop and

166
00:07:05,940 --> 00:07:08,880
just say you it can be also a percentage

167
00:07:08,880 --> 00:07:11,539
that the Alias for forage

168
00:07:11,539 --> 00:07:13,620
dolansko current object in the pipeline

169
00:07:13,620 --> 00:07:15,240
I'm going to get the Json of course here

170
00:07:15,240 --> 00:07:17,580
I could pipe to JQ but then I wouldn't

171
00:07:17,580 --> 00:07:19,500
get to the objects I would lose the

172
00:07:19,500 --> 00:07:21,479
objects and it won't make me do this so

173
00:07:21,479 --> 00:07:24,000
pipe to out grid View and I have a form

174
00:07:24,000 --> 00:07:28,680
so here in four five uh words right in

175
00:07:28,680 --> 00:07:32,099
two three pipelines I actually took a

176
00:07:32,099 --> 00:07:34,680
bunch of IP addresses piped into curl

177
00:07:34,680 --> 00:07:37,860
converted to Json convert it to a ad hoc

178
00:07:37,860 --> 00:07:41,039
form on the Fly what the hex right we're

179
00:07:41,039 --> 00:07:42,599
working with hex all the time so

180
00:07:42,599 --> 00:07:43,979
obviously

181
00:07:43,979 --> 00:07:46,380
you could do this in many were in many

182
00:07:46,380 --> 00:07:48,680
ways but you have a built-in format hex

183
00:07:48,680 --> 00:07:51,840
uh commandlet inside partial and you can

184
00:07:51,840 --> 00:07:54,419
basically get the hex out of uh anything

185
00:07:54,419 --> 00:07:57,660
you want yeah uh we can also convert to

186
00:07:57,660 --> 00:08:00,180
hex anything we want and just get the

187
00:08:00,180 --> 00:08:02,099
the bytes out of it

188
00:08:02,099 --> 00:08:05,759
and later on we can also use the uh you

189
00:08:05,759 --> 00:08:07,440
know it's a property it's a object so

190
00:08:07,440 --> 00:08:09,900
you can also just select and expand just

191
00:08:09,900 --> 00:08:12,660
the hex bytes and later on we can use

192
00:08:12,660 --> 00:08:15,060
the sort of Powershell grab which is

193
00:08:15,060 --> 00:08:17,759
Select string to just select this

194
00:08:17,759 --> 00:08:20,759
specific string from this file

195
00:08:20,759 --> 00:08:23,220
you can invoke and execute any text

196
00:08:23,220 --> 00:08:25,860
stream right in memory without touching

197
00:08:25,860 --> 00:08:28,319
disk this is one of the main thing that

198
00:08:28,319 --> 00:08:31,139
adversaries use allegedly maybe also in

199
00:08:31,139 --> 00:08:33,120
the alleged Uber hack we just opened

200
00:08:33,120 --> 00:08:34,440
this morning that they discovered the

201
00:08:34,440 --> 00:08:36,120
Powershell script with credential there

202
00:08:36,120 --> 00:08:38,458
whatever but you can really leverage

203
00:08:38,458 --> 00:08:40,740
that in many interesting ways so invoke

204
00:08:40,740 --> 00:08:43,200
expression essentially IEX that's the

205
00:08:43,200 --> 00:08:48,420
Alias can execute any text so obviously

206
00:08:48,420 --> 00:08:51,180
if I pipe this into IX and it executes

207
00:08:51,180 --> 00:08:53,580
so this guy is the limit right that's

208
00:08:53,580 --> 00:08:55,940
how fireless attacks in Windows

209
00:08:55,940 --> 00:08:58,320
essentially or in any platform you can

210
00:08:58,320 --> 00:09:00,899
do that you just get the string from

211
00:09:00,899 --> 00:09:03,600
whatever you want as for example here I

212
00:09:03,600 --> 00:09:04,860
download it

213
00:09:04,860 --> 00:09:08,339
and uh just execute it right so the

214
00:09:08,339 --> 00:09:10,920
payload can be in an HTML or a JPEG or

215
00:09:10,920 --> 00:09:13,380
Wikipedia page or whatever and I will

216
00:09:13,380 --> 00:09:15,240
execute it in memory without having the

217
00:09:15,240 --> 00:09:17,100
loader to sit on the disk and we can

218
00:09:17,100 --> 00:09:19,440
just do curl right so I can curl my

219
00:09:19,440 --> 00:09:21,839
payload pipe it to invoke expression

220
00:09:21,839 --> 00:09:24,060
that will also work there is a bunch

221
00:09:24,060 --> 00:09:25,500
more things that you can do with it

222
00:09:25,500 --> 00:09:27,600
uploading downloading controlling the

223
00:09:27,600 --> 00:09:30,300
user agent TLS controlling the header

224
00:09:30,300 --> 00:09:32,700
everything is the presentation online of

225
00:09:32,700 --> 00:09:34,680
course we love to randomize stuff from

226
00:09:34,680 --> 00:09:37,440
time to time I have this file with a

227
00:09:37,440 --> 00:09:38,700
bunch of words

228
00:09:38,700 --> 00:09:41,519
uh and I can actually randomize some

229
00:09:41,519 --> 00:09:42,480
words

230
00:09:42,480 --> 00:09:44,820
of course in bash we have sran durandom

231
00:09:44,820 --> 00:09:47,399
or coyotils essentially Chef that we can

232
00:09:47,399 --> 00:09:49,200
use but here it's quite nice that you

233
00:09:49,200 --> 00:09:51,000
have this power commandlet that you can

234
00:09:51,000 --> 00:09:53,700
also set seed to have like unique uh

235
00:09:53,700 --> 00:09:56,459
values with the CPU and you can also

236
00:09:56,459 --> 00:09:59,459
create the change the count of elements

237
00:09:59,459 --> 00:10:02,100
uniquely with unique CPU seed that you

238
00:10:02,100 --> 00:10:03,480
want to get and obviously you can also

239
00:10:03,480 --> 00:10:06,420
do very minimum shuffles you know like

240
00:10:06,420 --> 00:10:09,600
minimum maximum this very basic stuff

241
00:10:09,600 --> 00:10:11,700
there's also a lot of cool output and

242
00:10:11,700 --> 00:10:14,700
selection options get command GCM shows

243
00:10:14,700 --> 00:10:16,920
you the function behind everything the

244
00:10:16,920 --> 00:10:19,560
source code here I'm controlling The

245
00:10:19,560 --> 00:10:21,720
Prompt essentially how my point will

246
00:10:21,720 --> 00:10:23,880
look like so I created a function prompt

247
00:10:23,880 --> 00:10:26,880
now my prompt shows the last date time

248
00:10:26,880 --> 00:10:29,040
of my last executed command very

249
00:10:29,040 --> 00:10:32,519
intuitive you can out to grid just about

250
00:10:32,519 --> 00:10:34,860
anything with output mode single or

251
00:10:34,860 --> 00:10:37,800
multiple now I can select from the grid

252
00:10:37,800 --> 00:10:40,740
I just typed PS processes to the grid

253
00:10:40,740 --> 00:10:43,019
then I can select them but I can also do

254
00:10:43,019 --> 00:10:46,320
a console out console grid View and then

255
00:10:46,320 --> 00:10:48,120
I'll get the same grid sort of inside

256
00:10:48,120 --> 00:10:50,220
the console and then I can select

257
00:10:50,220 --> 00:10:51,839
whatever I want and I can come back

258
00:10:51,839 --> 00:10:54,180
select it with the space and only the

259
00:10:54,180 --> 00:10:57,060
objects I got will be selected and keep

260
00:10:57,060 --> 00:11:00,000
in mind you get back objects so now if I

261
00:11:00,000 --> 00:11:02,459
wanted to convert them to Json or HTML

262
00:11:02,459 --> 00:11:04,320
or send them to the Moon I can do it in

263
00:11:04,320 --> 00:11:06,600
the next pipe it's really nice to

264
00:11:06,600 --> 00:11:08,279
harness the power of.net behind the

265
00:11:08,279 --> 00:11:09,720
scenes because we're running on the

266
00:11:09,720 --> 00:11:11,760
class Library Etc so there's a bunch of

267
00:11:11,760 --> 00:11:14,519
things you can do like URL encoding and

268
00:11:14,519 --> 00:11:18,180
regex regex scenes and uh all the

269
00:11:18,180 --> 00:11:20,640
mathematics uh you know if you desire in

270
00:11:20,640 --> 00:11:22,980
the middle of day to do a casino stand

271
00:11:22,980 --> 00:11:24,720
against calculations you don't have to

272
00:11:24,720 --> 00:11:27,600
go too far you can just do it in in one

273
00:11:27,600 --> 00:11:30,000
word essentially this reflection into

274
00:11:30,000 --> 00:11:32,940
the.net assemblies is quite powerful you

275
00:11:32,940 --> 00:11:34,860
can calculate you know bytes terabytes

276
00:11:34,860 --> 00:11:37,140
petabytes cryptographic algorithms

277
00:11:37,140 --> 00:11:40,019
console can show you elements of your

278
00:11:40,019 --> 00:11:42,420
keyboard if the cap locks caps lock is

279
00:11:42,420 --> 00:11:45,360
on or off you can get this directly in

280
00:11:45,360 --> 00:11:47,940
your code in your script and you can

281
00:11:47,940 --> 00:11:51,959
also of course uh directly it recognizes

282
00:11:51,959 --> 00:11:54,180
strings integers Etc and you can for

283
00:11:54,180 --> 00:11:55,800
example in this case

284
00:11:55,800 --> 00:11:58,860
turn the string into a Char array an

285
00:11:58,860 --> 00:12:00,600
array of characters and check for each

286
00:12:00,600 --> 00:12:02,220
if it's upper or lower so I'm going to

287
00:12:02,220 --> 00:12:04,620
change a couple of those and just run it

288
00:12:04,620 --> 00:12:07,560
again and of course I have this true on

289
00:12:07,560 --> 00:12:10,260
both two characters that I changed you

290
00:12:10,260 --> 00:12:12,420
can compare just about anything to

291
00:12:12,420 --> 00:12:14,040
anything yeah it's like a comparison

292
00:12:14,040 --> 00:12:15,600
firewall

293
00:12:15,600 --> 00:12:18,360
so in this case we have two files hosts

294
00:12:18,360 --> 00:12:20,279
and hosts too they're a bit different

295
00:12:20,279 --> 00:12:23,300
with one word differing from each other

296
00:12:23,300 --> 00:12:26,160
so now I can compare compare object or

297
00:12:26,160 --> 00:12:28,320
in the Alice compare and the idea is to

298
00:12:28,320 --> 00:12:30,560
compare apples to apples so you can

299
00:12:30,560 --> 00:12:32,940
anything you would compare will show you

300
00:12:32,940 --> 00:12:36,779
which object exists in one or the other

301
00:12:36,779 --> 00:12:39,060
side or or maybe both you can also do

302
00:12:39,060 --> 00:12:41,880
include equal and exclude different and

303
00:12:41,880 --> 00:12:44,399
just show the ones that are similar in

304
00:12:44,399 --> 00:12:46,139
both objects so you can do it to XML

305
00:12:46,139 --> 00:12:48,779
Json whatever speaking about formats you

306
00:12:48,779 --> 00:12:52,800
can convert any to any so convert export

307
00:12:52,800 --> 00:12:56,339
Etc XML Json bytes whatever so all of

308
00:12:56,339 --> 00:12:58,019
these are built in baked into the

309
00:12:58,019 --> 00:13:00,240
platform for example you can just

310
00:13:00,240 --> 00:13:02,399
convert all the properties of this

311
00:13:02,399 --> 00:13:05,279
process to Json and again you are left

312
00:13:05,279 --> 00:13:07,980
with the object in the STD out in the

313
00:13:07,980 --> 00:13:10,980
pipeline and not text so that makes it

314
00:13:10,980 --> 00:13:13,620
uh very strong to continue and do things

315
00:13:13,620 --> 00:13:15,420
afterwards with that so you can convert

316
00:13:15,420 --> 00:13:18,720
to CSV with the limiters Etc encoding

317
00:13:18,720 --> 00:13:22,500
you can convert to HTML CSS URI headers

318
00:13:22,500 --> 00:13:24,060
you can do anything directly from here

319
00:13:24,060 --> 00:13:26,700
you can convert to XML and just have an

320
00:13:26,700 --> 00:13:29,880
XML document in memory that you can go

321
00:13:29,880 --> 00:13:32,519
to specific nodes Etc you can also

322
00:13:32,519 --> 00:13:35,700
export this XML obviously and and just

323
00:13:35,700 --> 00:13:38,100
work with that

324
00:13:38,100 --> 00:13:41,760
uh you can also do some less nice things

325
00:13:41,760 --> 00:13:43,139
with that maybe fish for admin

326
00:13:43,139 --> 00:13:45,300
credentials we've used that in the field

327
00:13:45,300 --> 00:13:47,940
me and my team many times any CIS admins

328
00:13:47,940 --> 00:13:50,399
in the audience here maybe

329
00:13:50,399 --> 00:13:53,579
would you uh click oops would you click

330
00:13:53,579 --> 00:13:56,160
that dialog box that you just saw

331
00:13:56,160 --> 00:13:58,860
this one liner as you saw the spawn for

332
00:13:58,860 --> 00:14:02,760
your credentials it's totally uh edible

333
00:14:02,760 --> 00:14:04,920
so you can change all the strings the

334
00:14:04,920 --> 00:14:07,459
domain whatever you want there and

335
00:14:07,459 --> 00:14:10,519
believe me you don't know how many

336
00:14:10,519 --> 00:14:13,920
engagements we finish by this dialog box

337
00:14:13,920 --> 00:14:15,660
just people handing over their

338
00:14:15,660 --> 00:14:17,399
credentials

339
00:14:17,399 --> 00:14:18,899
okay I want to show you another nice

340
00:14:18,899 --> 00:14:21,360
trick uh SMB if you don't know sips on

341
00:14:21,360 --> 00:14:24,180
Windows has named pipes name pipes is

342
00:14:24,180 --> 00:14:26,779
really cool uh because you can actually

343
00:14:26,779 --> 00:14:28,860
exfiltrate data and have a command and

344
00:14:28,860 --> 00:14:31,980
control Channel without admin privilege

345
00:14:31,980 --> 00:14:34,079
and without having to bind to a socket

346
00:14:34,079 --> 00:14:35,820
that's very cool because you can pass

347
00:14:35,820 --> 00:14:37,800
strings objects whatever and execute

348
00:14:37,800 --> 00:14:40,199
code between processes local remote

349
00:14:40,199 --> 00:14:44,279
one-way two-way encrypted unencrypted it

350
00:14:44,279 --> 00:14:46,320
basically relies on IPC and toposis

351
00:14:46,320 --> 00:14:48,180
communication it helps you to

352
00:14:48,180 --> 00:14:50,220
communicate between the shells and

353
00:14:50,220 --> 00:14:52,260
that's very good because it rides Port

354
00:14:52,260 --> 00:14:54,959
445 which is essentially open in quite a

355
00:14:54,959 --> 00:14:56,940
lot of Microsoft customers and you don't

356
00:14:56,940 --> 00:14:58,860
need to bind to the port and you you can

357
00:14:58,860 --> 00:15:00,959
do it quite easily so in this example

358
00:15:00,959 --> 00:15:03,959
we'll start with a local pipe first so

359
00:15:03,959 --> 00:15:06,720
one liner to open the client stream as

360
00:15:06,720 --> 00:15:08,579
you can see at the end we have the

361
00:15:08,579 --> 00:15:11,940
invoke expression IX data dollar data so

362
00:15:11,940 --> 00:15:14,760
any variable the server stream will send

363
00:15:14,760 --> 00:15:16,980
us we're gonna just uh invoke it we

364
00:15:16,980 --> 00:15:20,880
could also X data but whatever here the

365
00:15:20,880 --> 00:15:22,560
other process in the same machine I'm

366
00:15:22,560 --> 00:15:25,380
running as Laura that's who I am and now

367
00:15:25,380 --> 00:15:27,240
after I open the server pipe I'm going

368
00:15:27,240 --> 00:15:29,699
to just write to that pipe and anything

369
00:15:29,699 --> 00:15:31,740
I'm going to write to that pipe boom

370
00:15:31,740 --> 00:15:33,899
gets executed on the other process on

371
00:15:33,899 --> 00:15:36,180
the same machine so I can speak between

372
00:15:36,180 --> 00:15:37,920
the processes there are hundreds of

373
00:15:37,920 --> 00:15:40,440
named pipes in an average machine very

374
00:15:40,440 --> 00:15:42,899
hard for a endpoint protection to detect

375
00:15:42,899 --> 00:15:44,699
it I'm not sure why everybody is not

376
00:15:44,699 --> 00:15:46,260
using it because we use it all the time

377
00:15:46,260 --> 00:15:47,399
and it's perfect

378
00:15:47,399 --> 00:15:50,399
so you can actually use it locally and

379
00:15:50,399 --> 00:15:52,519
of course remotely the only difference

380
00:15:52,519 --> 00:15:54,959
in this one liner if you want to work

381
00:15:54,959 --> 00:15:57,060
remotely is just we change the local

382
00:15:57,060 --> 00:16:00,720
pipeline instead of the argument dot for

383
00:16:00,720 --> 00:16:02,519
the local machine we're just going to

384
00:16:02,519 --> 00:16:05,040
give it an IP address or hostname and

385
00:16:05,040 --> 00:16:07,380
now we're running again this one-liner

386
00:16:07,380 --> 00:16:10,380
waiting for data to come

387
00:16:10,380 --> 00:16:12,959
and I'm gonna fire up another VM

388
00:16:12,959 --> 00:16:14,279
essentially a different machine

389
00:16:14,279 --> 00:16:16,260
different host now I'm going to connect

390
00:16:16,260 --> 00:16:20,399
to that pipe on that machine and of

391
00:16:20,399 --> 00:16:23,639
course I can run any commands I want and

392
00:16:23,639 --> 00:16:25,440
they will get executed on the other side

393
00:16:25,440 --> 00:16:26,940
so it's really like a command and

394
00:16:26,940 --> 00:16:29,399
control exfiltration whatever send

395
00:16:29,399 --> 00:16:31,680
information over the network without

396
00:16:31,680 --> 00:16:34,199
having to bind to the socket or known

397
00:16:34,199 --> 00:16:36,839
sockets right and as you can see I can

398
00:16:36,839 --> 00:16:39,839
also get the IP address from that

399
00:16:39,839 --> 00:16:41,279
etc etc

400
00:16:41,279 --> 00:16:43,860
but if you want a classic reversal right

401
00:16:43,860 --> 00:16:45,899
like classic sockets you can also have a

402
00:16:45,899 --> 00:16:48,240
one-liner reverse shell so instead of

403
00:16:48,240 --> 00:16:52,139
the classic netcut Etc uh we can I'm

404
00:16:52,139 --> 00:16:54,779
working here on 10020 as you can see

405
00:16:54,779 --> 00:16:57,839
with user Kai and I'm going to uh just

406
00:16:57,839 --> 00:17:01,980
fire up netcat and listen to uh 443 and

407
00:17:01,980 --> 00:17:04,679
on the other machine I'm going to start

408
00:17:04,679 --> 00:17:07,380
essentially the reversal and I'm

409
00:17:07,380 --> 00:17:10,099
connected so the reverse shell is active

410
00:17:10,099 --> 00:17:13,859
now I'm connected as the user on the

411
00:17:13,859 --> 00:17:15,959
other machine and as you can see I also

412
00:17:15,959 --> 00:17:16,980
have a different IP addresses

413
00:17:16,980 --> 00:17:18,720
essentially I'm in the remote machine I

414
00:17:18,720 --> 00:17:20,400
can also invoke processes I'm gonna

415
00:17:20,400 --> 00:17:21,959
start Notepad

416
00:17:21,959 --> 00:17:25,619
and input it with pass-through into a

417
00:17:25,619 --> 00:17:27,359
variable so dollar P now holds the

418
00:17:27,359 --> 00:17:28,980
variable to that process and I can kill

419
00:17:28,980 --> 00:17:31,200
it for example you would say okay what's

420
00:17:31,200 --> 00:17:32,640
important with that you can start the

421
00:17:32,640 --> 00:17:35,039
process anyway but the thing is what you

422
00:17:35,039 --> 00:17:36,900
didn't see here and I will show you now

423
00:17:36,900 --> 00:17:38,880
is if I do PS notepad so there are

424
00:17:38,880 --> 00:17:40,740
multiple notepads on that machine I

425
00:17:40,740 --> 00:17:42,179
wanted to reference just the specific

426
00:17:42,179 --> 00:17:44,880
notepad I wanted so with pass through

427
00:17:44,880 --> 00:17:46,500
you can actually keep the object and

428
00:17:46,500 --> 00:17:48,720
reference it for later

429
00:17:48,720 --> 00:17:51,120
Powershell really works under the hood

430
00:17:51,120 --> 00:17:53,160
very different than many people might

431
00:17:53,160 --> 00:17:55,980
presume because under the hood there is

432
00:17:55,980 --> 00:17:58,020
no spoon It's Just an Illusion

433
00:17:58,020 --> 00:17:59,760
Powershell exit is just a toy that

434
00:17:59,760 --> 00:18:01,980
Microsoft's created for it and sysadmins

435
00:18:01,980 --> 00:18:04,080
to play with without understanding what

436
00:18:04,080 --> 00:18:06,179
they're playing with but the Run space

437
00:18:06,179 --> 00:18:07,919
interface it's all system management

438
00:18:07,919 --> 00:18:10,559
automation that's the assembly the dll

439
00:18:10,559 --> 00:18:12,660
that holds the functionality and the

440
00:18:12,660 --> 00:18:14,280
system management automation writing

441
00:18:14,280 --> 00:18:17,299
space is actually running the GT code

442
00:18:17,299 --> 00:18:19,860
with the in with the CLR common language

443
00:18:19,860 --> 00:18:22,020
runtime in front of the turning it to

444
00:18:22,020 --> 00:18:24,059
machine code Etc what you see is the

445
00:18:24,059 --> 00:18:26,760
host interface so really it's just an

446
00:18:26,760 --> 00:18:30,660
illusion Powershell is a is just a spoon

447
00:18:30,660 --> 00:18:33,179
right and there is no spoon you can

448
00:18:33,179 --> 00:18:35,400
actually run Powershell without having a

449
00:18:35,400 --> 00:18:38,039
Powershell exit in this example I turned

450
00:18:38,039 --> 00:18:39,900
on Powershell transcripts that's a

451
00:18:39,900 --> 00:18:43,140
really cool capability to audit

452
00:18:43,140 --> 00:18:45,960
Powershell input output into files and

453
00:18:45,960 --> 00:18:48,539
as you can see now I ran the

454
00:18:48,539 --> 00:18:51,059
a troubleshooting wizard for the network

455
00:18:51,059 --> 00:18:52,799
and it actually created a new transcript

456
00:18:52,799 --> 00:18:54,780
file so that's very cool because the

457
00:18:54,780 --> 00:18:56,360
transcript actually

458
00:18:56,360 --> 00:18:58,860
documents all the input output of all

459
00:18:58,860 --> 00:19:01,980
the commands I ran and I can also do

460
00:19:01,980 --> 00:19:04,200
like a grab select string and see all

461
00:19:04,200 --> 00:19:07,020
the host applications on this folder the

462
00:19:07,020 --> 00:19:09,539
auditing folder and you can see

463
00:19:09,539 --> 00:19:11,820
it documented Powershell code from s

464
00:19:11,820 --> 00:19:14,220
diagnostic host X meaning not partial

465
00:19:14,220 --> 00:19:16,820
there are many executables

466
00:19:16,820 --> 00:19:19,080
that actually run Powershell and they

467
00:19:19,080 --> 00:19:21,059
are not partial this is my executable

468
00:19:21,059 --> 00:19:23,700
it's called bios exit but as you saw it

469
00:19:23,700 --> 00:19:27,539
ran code and also did some prompts but

470
00:19:27,539 --> 00:19:29,340
it also ran Powershell behind the scenes

471
00:19:29,340 --> 00:19:31,320
we have the auditing and you can see it

472
00:19:31,320 --> 00:19:34,280
was added also to the

473
00:19:34,280 --> 00:19:39,179
bunch of auditing of the other scripts

474
00:19:39,179 --> 00:19:41,220
there what I'm going to do now

475
00:19:41,220 --> 00:19:44,160
is show you those processes being

476
00:19:44,160 --> 00:19:47,400
created uh I just turned on auditing of

477
00:19:47,400 --> 00:19:49,260
process creation termination using

478
00:19:49,260 --> 00:19:51,419
Google policy on this machine and I

479
00:19:51,419 --> 00:19:53,039
wrote this really simple script that

480
00:19:53,039 --> 00:19:54,660
essentially pulls out of the event log

481
00:19:54,660 --> 00:19:56,280
the Microsoft Windows Powershell

482
00:19:56,280 --> 00:19:58,500
operational event log sorry the system

483
00:19:58,500 --> 00:20:00,600
security event log all the process

484
00:20:00,600 --> 00:20:03,240
creation termination so now when I

485
00:20:03,240 --> 00:20:06,419
create a process it will actually be

486
00:20:06,419 --> 00:20:09,000
documented in my quick code will show us

487
00:20:09,000 --> 00:20:11,039
that it got executed now I'm going to

488
00:20:11,039 --> 00:20:14,220
convert some commands essentially takes

489
00:20:14,220 --> 00:20:17,100
the encoding of of this command and

490
00:20:17,100 --> 00:20:20,160
convert it to base64. and once I have

491
00:20:20,160 --> 00:20:22,440
the base64 command

492
00:20:22,440 --> 00:20:25,740
I can actually execute it uh uh this

493
00:20:25,740 --> 00:20:27,539
Powershell command will be executed

494
00:20:27,539 --> 00:20:30,299
through this base64 and I'm going to

495
00:20:30,299 --> 00:20:33,539
choose to execute it for mstsc right the

496
00:20:33,539 --> 00:20:36,000
Microsoft Remote Desktop connection so

497
00:20:36,000 --> 00:20:37,860
you can see I can do that I can execute

498
00:20:37,860 --> 00:20:39,740
Powershell code from any

499
00:20:39,740 --> 00:20:42,720
executable dll thread whatever and

500
00:20:42,720 --> 00:20:44,280
speaking about threads Etc we can

501
00:20:44,280 --> 00:20:46,919
actually execute Powershell from a

502
00:20:46,919 --> 00:20:48,960
binary without loading the binary so you

503
00:20:48,960 --> 00:20:51,000
won't even see the process so if I

504
00:20:51,000 --> 00:20:53,880
create notepad close notepad now you can

505
00:20:53,880 --> 00:20:56,059
see that I have this creation

506
00:20:56,059 --> 00:20:59,120
termination I see this event that's cool

507
00:20:59,120 --> 00:21:03,260
but now I'm going to run that mstsc

508
00:21:03,260 --> 00:21:07,559
allegedly not something bad for an

509
00:21:07,559 --> 00:21:09,240
endpoint protection mechanism and I'm

510
00:21:09,240 --> 00:21:11,280
going to invoke it in memory you have

511
00:21:11,280 --> 00:21:12,780
the code for this function that loads

512
00:21:12,780 --> 00:21:15,360
the binary in memory to a thread and as

513
00:21:15,360 --> 00:21:17,520
you can see you you have this code on my

514
00:21:17,520 --> 00:21:19,980
GitHub and as you can see it didn't even

515
00:21:19,980 --> 00:21:21,480
load the process

516
00:21:21,480 --> 00:21:23,340
so I actually loaded the process in

517
00:21:23,340 --> 00:21:26,340
memory without loading the binary uh and

518
00:21:26,340 --> 00:21:29,280
you don't see any evidence of that you

519
00:21:29,280 --> 00:21:31,980
can run win apis whatever dll import

520
00:21:31,980 --> 00:21:34,799
pinvoke Etc but you can also run c-sharp

521
00:21:34,799 --> 00:21:37,260
code directly locally and remote you do

522
00:21:37,260 --> 00:21:39,600
that with ADD type which essentially is

523
00:21:39,600 --> 00:21:42,299
a command that adds assemblies

524
00:21:42,299 --> 00:21:44,820
so I'm going to add directly a c-sharp

525
00:21:44,820 --> 00:21:46,260
code as you can see it's not Powershell

526
00:21:46,260 --> 00:21:48,659
code but you can just add the type and

527
00:21:48,659 --> 00:21:52,500
now actually I have this class is active

528
00:21:52,500 --> 00:21:55,020
and running inside my Powershell session

529
00:21:55,020 --> 00:21:57,480
this really makes Powershell sort of

530
00:21:57,480 --> 00:22:01,320
a.net command line in a way so the

531
00:22:01,320 --> 00:22:02,700
reason I'm showing you this is because

532
00:22:02,700 --> 00:22:05,280
there is a lot of c-sharp code out there

533
00:22:05,280 --> 00:22:07,320
doing nice things that you can leverage

534
00:22:07,320 --> 00:22:10,200
to Powershell locally and remote in

535
00:22:10,200 --> 00:22:12,539
remote sessions now I have an open

536
00:22:12,539 --> 00:22:14,220
Powershell session

537
00:22:14,220 --> 00:22:17,400
Powers LPS remoting invoke command can

538
00:22:17,400 --> 00:22:19,500
run on that session it's sort of or runs

539
00:22:19,500 --> 00:22:20,520
with winner them windows Remote

540
00:22:20,520 --> 00:22:23,159
Management sort of the windows SSH and

541
00:22:23,159 --> 00:22:25,980
as you can see I can run any command or

542
00:22:25,980 --> 00:22:29,640
script and I will get the output from

543
00:22:29,640 --> 00:22:32,940
the remote session right so finally

544
00:22:32,940 --> 00:22:36,299
something Microsoft did did well like a

545
00:22:36,299 --> 00:22:38,880
remote CMD SSH experience built in by

546
00:22:38,880 --> 00:22:40,440
the way in domains it's automatically

547
00:22:40,440 --> 00:22:42,659
encrypted with your TGs with your turbo

548
00:22:42,659 --> 00:22:45,179
session ticket but I can also use local

549
00:22:45,179 --> 00:22:47,820
variables dollar using actually casts

550
00:22:47,820 --> 00:22:52,140
the local variables to remote sessions

551
00:22:52,140 --> 00:22:55,140
so you can build all your variables on

552
00:22:55,140 --> 00:22:56,760
your machine locally that you want to

553
00:22:56,760 --> 00:22:58,559
use whether code or whatever you want to

554
00:22:58,559 --> 00:23:00,720
pass to remote sessions and then you can

555
00:23:00,720 --> 00:23:02,340
use dollar using and cast those

556
00:23:02,340 --> 00:23:04,200
variables to remote sessions and they

557
00:23:04,200 --> 00:23:06,840
will be executed locally remotely on

558
00:23:06,840 --> 00:23:08,280
those machines

559
00:23:08,280 --> 00:23:11,280
you can also get objects from any tool

560
00:23:11,280 --> 00:23:12,780
we're saying and you know that probably

561
00:23:12,780 --> 00:23:16,860
that you can actually turn a Powershell

562
00:23:16,860 --> 00:23:19,620
power comes from objects so you can

563
00:23:19,620 --> 00:23:21,240
actually take any tool you want a

564
00:23:21,240 --> 00:23:24,360
Windows Linux whatever if or CPP any

565
00:23:24,360 --> 00:23:27,480
tool that outputs STD out and turn the

566
00:23:27,480 --> 00:23:30,539
text to objects look at this example

567
00:23:30,539 --> 00:23:32,340
other than grabbing the IP I want to do

568
00:23:32,340 --> 00:23:35,520
a bit more so I'm going to Output a

569
00:23:35,520 --> 00:23:38,520
sample output of ipconfig

570
00:23:38,520 --> 00:23:43,260
I'm going to just open this sample and

571
00:23:43,260 --> 00:23:44,820
just choose the fields that I want to

572
00:23:44,820 --> 00:23:47,280
convert to objects no regex no nothing

573
00:23:47,280 --> 00:23:50,100
to no just curly brackets I'm going to

574
00:23:50,100 --> 00:23:52,500
give it the property name essentially

575
00:23:52,500 --> 00:23:55,740
that I wanted to have and this signals

576
00:23:55,740 --> 00:23:57,600
to Powershell later when he reads this

577
00:23:57,600 --> 00:24:00,000
template file that these are the places

578
00:24:00,000 --> 00:24:04,080
right that those values should be and it

579
00:24:04,080 --> 00:24:06,539
will just automatically learn from that

580
00:24:06,539 --> 00:24:10,260
template and essentially convert the

581
00:24:10,260 --> 00:24:12,840
string output to object and that's

582
00:24:12,840 --> 00:24:14,039
exactly what we're going to do now we're

583
00:24:14,039 --> 00:24:15,419
going to pipe it to convert from text

584
00:24:15,419 --> 00:24:17,640
and I'm going to use a form string sorry

585
00:24:17,640 --> 00:24:19,679
and I'm going to use the template file

586
00:24:19,679 --> 00:24:21,720
that I just created and as you can see

587
00:24:21,720 --> 00:24:24,120
voila we got back objects

588
00:24:24,120 --> 00:24:26,340
and now I can convert Json blah blah

589
00:24:26,340 --> 00:24:28,020
blah whatever I want I can output it to

590
00:24:28,020 --> 00:24:30,840
a grid and and this might seem like a

591
00:24:30,840 --> 00:24:32,520
funny example but you can do it with

592
00:24:32,520 --> 00:24:35,159
really any tool for example with netstat

593
00:24:35,159 --> 00:24:37,679
you know we we can

594
00:24:37,679 --> 00:24:40,380
we'd like to change that into objects

595
00:24:40,380 --> 00:24:44,039
instead of just grabbing Fields Etc so

596
00:24:44,039 --> 00:24:47,580
we can just put uh in this case I'm

597
00:24:47,580 --> 00:24:49,919
going to put the template content in

598
00:24:49,919 --> 00:24:51,659
memory as part of the script I don't

599
00:24:51,659 --> 00:24:54,179
want to read it from disk so I just

600
00:24:54,179 --> 00:24:57,179
prepared this very simple template and

601
00:24:57,179 --> 00:24:58,620
I'm just going to pipe it to convert

602
00:24:58,620 --> 00:25:00,900
from string and just output to a grid

603
00:25:00,900 --> 00:25:03,840
right with the template content and I

604
00:25:03,840 --> 00:25:07,080
have a netstat output as an object

605
00:25:07,080 --> 00:25:09,299
attackers of course love Powershell very

606
00:25:09,299 --> 00:25:11,520
much what's there not to love but very

607
00:25:11,520 --> 00:25:13,740
big part of it is because really partial

608
00:25:13,740 --> 00:25:16,320
skills in blue teams in general are

609
00:25:16,320 --> 00:25:18,120
really not that good because you know

610
00:25:18,120 --> 00:25:20,340
they don't normally understand all the

611
00:25:20,340 --> 00:25:21,600
things I'm showing you here in this

612
00:25:21,600 --> 00:25:23,940
morning but there are partial defenses I

613
00:25:23,940 --> 00:25:25,980
won't go over them but you can see this

614
00:25:25,980 --> 00:25:28,200
protected event logging that's actually

615
00:25:28,200 --> 00:25:30,539
a very cool feature that instead when an

616
00:25:30,539 --> 00:25:32,700
adversary comes on a machine patient

617
00:25:32,700 --> 00:25:34,679
zero and infiltrates the network it can

618
00:25:34,679 --> 00:25:36,720
actually read the Powershell logs and

619
00:25:36,720 --> 00:25:38,400
see all the audited Powershell

620
00:25:38,400 --> 00:25:39,960
commandlets of the ID of the

621
00:25:39,960 --> 00:25:42,120
organization and maybe read some strings

622
00:25:42,120 --> 00:25:44,940
from there like sensitive data so

623
00:25:44,940 --> 00:25:47,120
Microsoft allows you to

624
00:25:47,120 --> 00:25:50,520
encrypt the message in the event log so

625
00:25:50,520 --> 00:25:52,919
I thought about it Wi-Fi maybe I can run

626
00:25:52,919 --> 00:25:54,600
somewhere those event logs that's a nice

627
00:25:54,600 --> 00:25:56,820
trick I showed a while back couple of

628
00:25:56,820 --> 00:25:59,940
years in uh in security talk

629
00:25:59,940 --> 00:26:02,880
security talks and so this is the event

630
00:26:02,880 --> 00:26:06,059
log how it should look like but what I'm

631
00:26:06,059 --> 00:26:08,340
going to do now is I'm going to create

632
00:26:08,340 --> 00:26:10,740
essentially

633
00:26:10,740 --> 00:26:12,960
um I created a public key that only I

634
00:26:12,960 --> 00:26:15,200
know for cryptographic message syntax

635
00:26:15,200 --> 00:26:18,840
essentially pki and now once I change

636
00:26:18,840 --> 00:26:21,419
this registry case setting and I'm going

637
00:26:21,419 --> 00:26:24,900
to run another command to create a new

638
00:26:24,900 --> 00:26:27,600
entry on the event log so now you can

639
00:26:27,600 --> 00:26:29,400
see there was another Powershell shell

640
00:26:29,400 --> 00:26:30,539
run

641
00:26:30,539 --> 00:26:33,179
and when I go back to querying the event

642
00:26:33,179 --> 00:26:34,080
log

643
00:26:34,080 --> 00:26:36,659
and this is what the Sim gets right the

644
00:26:36,659 --> 00:26:40,520
sock gets essentially this message

645
00:26:40,520 --> 00:26:44,220
so and it's all encrypted right so I

646
00:26:44,220 --> 00:26:46,140
don't knock off the Event Viewer I don't

647
00:26:46,140 --> 00:26:48,179
kill the process I don't do this mumbo

648
00:26:48,179 --> 00:26:50,820
jumbo of all seven things I just let the

649
00:26:50,820 --> 00:26:52,500
event log run but it just collects

650
00:26:52,500 --> 00:26:54,720
encrypted data so when the socks look at

651
00:26:54,720 --> 00:26:57,900
it after you know one week of uh you

652
00:26:57,900 --> 00:27:00,419
know of of an assessment they find

653
00:27:00,419 --> 00:27:02,760
nothing but still so many defenses power

654
00:27:02,760 --> 00:27:06,000
Microsoft invested years in script block

655
00:27:06,000 --> 00:27:08,820
logging module logging transcriptions I

656
00:27:08,820 --> 00:27:12,120
am the right surely this should help but

657
00:27:12,120 --> 00:27:14,880
your show not pass we thought about it

658
00:27:14,880 --> 00:27:17,580
me and the team and we did the research

659
00:27:17,580 --> 00:27:20,460
no administrative rights needed just uh

660
00:27:20,460 --> 00:27:23,400
utilizing simple user mode hooks there

661
00:27:23,400 --> 00:27:25,799
is no kernel work here we just got the

662
00:27:25,799 --> 00:27:28,620
hooks to MZ system called dll Etc from

663
00:27:28,620 --> 00:27:30,900
user mode with simply replacing with the

664
00:27:30,900 --> 00:27:33,539
red op code and this is how invisisha

665
00:27:33,539 --> 00:27:35,580
looks like a total bypass of all

666
00:27:35,580 --> 00:27:37,799
Microsoft auditing logging capabilities

667
00:27:37,799 --> 00:27:40,020
for Powershell it's also up on GitHub

668
00:27:40,020 --> 00:27:43,200
for while now as you can see when you

669
00:27:43,200 --> 00:27:46,260
run Powershell automatically when you

670
00:27:46,260 --> 00:27:48,360
set transcriptions it is audited right

671
00:27:48,360 --> 00:27:50,820
so you can see in the background that I

672
00:27:50,820 --> 00:27:54,240
got an audit of what I just ran so you

673
00:27:54,240 --> 00:27:55,679
see the host application you see the

674
00:27:55,679 --> 00:27:58,200
input and you see the output so that's

675
00:27:58,200 --> 00:28:00,600
very cool and you can actually use that

676
00:28:00,600 --> 00:28:03,419
for a defending and also you got new

677
00:28:03,419 --> 00:28:06,600
events right when I refreshed now so

678
00:28:06,600 --> 00:28:08,940
even on the event log with syslog

679
00:28:08,940 --> 00:28:10,320
forwarding or whatever you can actually

680
00:28:10,320 --> 00:28:13,500
see the code being executed so you see

681
00:28:13,500 --> 00:28:15,179
this is the last event

682
00:28:15,179 --> 00:28:18,000
that we have here and now I'm just going

683
00:28:18,000 --> 00:28:20,580
to run in VZ shell I'm going to run it

684
00:28:20,580 --> 00:28:22,020
from a batch file because it also

685
00:28:22,020 --> 00:28:24,539
requires some environment variable but

686
00:28:24,539 --> 00:28:26,279
as you can see I now have a fully

687
00:28:26,279 --> 00:28:30,539
running Powershell shell and nothing

688
00:28:30,539 --> 00:28:34,380
documented so the machine is totally

689
00:28:34,380 --> 00:28:36,720
blind to what I'm doing now but all the

690
00:28:36,720 --> 00:28:38,340
mechanisms are running and that's

691
00:28:38,340 --> 00:28:40,140
important because I don't disable or

692
00:28:40,140 --> 00:28:42,419
knock anything out of the sky I just

693
00:28:42,419 --> 00:28:45,000
make it go blind oh sorry I think we

694
00:28:45,000 --> 00:28:47,400
missed one I have also some news for the

695
00:28:47,400 --> 00:28:50,039
blue team everything looks bad but for

696
00:28:50,039 --> 00:28:51,240
the Bluetooth you can actually create

697
00:28:51,240 --> 00:28:53,640
Powershell session configurations and

698
00:28:53,640 --> 00:28:56,100
with that you can get a constrained

699
00:28:56,100 --> 00:28:58,740
remote access endpoints with white

700
00:28:58,740 --> 00:29:00,799
listing up to the

701
00:29:00,799 --> 00:29:03,360
parameter level of the value of specific

702
00:29:03,360 --> 00:29:05,400
parameter and that's really really cool

703
00:29:05,400 --> 00:29:07,020
and you should really look into it and

704
00:29:07,020 --> 00:29:09,059
finally we all know what does what Sue

705
00:29:09,059 --> 00:29:10,980
do what does sudo

706
00:29:10,980 --> 00:29:13,679
of course on Windows Sue can do this

707
00:29:13,679 --> 00:29:16,620
right she can do sudo CMD and it works

708
00:29:16,620 --> 00:29:18,120
right

709
00:29:18,120 --> 00:29:21,419
so that's nice that's a fun game just to

710
00:29:21,419 --> 00:29:23,279
have sudo on Windows we all wanted that

711
00:29:23,279 --> 00:29:25,140
uh you know for a while at least I

712
00:29:25,140 --> 00:29:27,120
wanted so it's a very simple function

713
00:29:27,120 --> 00:29:29,159
it's also a one-liner I'll just show you

714
00:29:29,159 --> 00:29:32,159
here in a nice way but you can also sudo

715
00:29:32,159 --> 00:29:34,860
and if this all is not enough it Powers

716
00:29:34,860 --> 00:29:35,840
hell

717
00:29:35,840 --> 00:29:37,460
so

718
00:29:37,460 --> 00:29:41,760
so key takeaways uh one-liners Rock in

719
00:29:41,760 --> 00:29:43,320
every language you don't have to convert

720
00:29:43,320 --> 00:29:45,779
your religion but maybe I hope you

721
00:29:45,779 --> 00:29:48,720
learned the titsy bitsy bitsy dining to

722
00:29:48,720 --> 00:29:50,279
learn to appreciate Powershell it runs

723
00:29:50,279 --> 00:29:52,620
also on Linux and Mac Windows Powershell

724
00:29:52,620 --> 00:29:54,960
blue team defenses exist they are very

725
00:29:54,960 --> 00:29:57,299
good as a red team use Powershell

726
00:29:57,299 --> 00:30:00,779
version 2 the downgrade attacks which

727
00:30:00,779 --> 00:30:04,380
don't have all this uh nice defense in

728
00:30:04,380 --> 00:30:06,419
place or lose partial version so if

729
00:30:06,419 --> 00:30:08,640
you're a blue teamer just remove it from

730
00:30:08,640 --> 00:30:10,620
all your windows installations or using

731
00:30:10,620 --> 00:30:13,740
visual obfuscate as a retimer or look

732
00:30:13,740 --> 00:30:15,659
for as a blue timel for potentially

733
00:30:15,659 --> 00:30:18,059
malicious activities in your transcript

734
00:30:18,059 --> 00:30:20,899
options and check out the GitHub page

735
00:30:20,899 --> 00:30:22,980
for more for the session code and

736
00:30:22,980 --> 00:30:25,320
editing less and remember of course at

737
00:30:25,320 --> 00:30:26,820
the end of the day

738
00:30:26,820 --> 00:30:30,000
it's just a shell right it's neither bad

739
00:30:30,000 --> 00:30:35,039
nor good that part is up to us right

740
00:30:35,039 --> 00:30:37,940
that's just a show

741
00:30:37,940 --> 00:30:41,700
it's not bad or good

742
00:30:41,700 --> 00:30:44,120
that part's up to you

743
00:30:44,120 --> 00:30:49,439
[Music]

744
00:30:57,600 --> 00:31:00,379
thank you

