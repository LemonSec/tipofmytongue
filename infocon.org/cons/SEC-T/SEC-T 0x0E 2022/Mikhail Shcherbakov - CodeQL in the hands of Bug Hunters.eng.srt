1
00:00:03,740 --> 00:00:06,299
hi everyone

2
00:00:06,299 --> 00:00:08,639
thank you for joining my lightning talk

3
00:00:08,639 --> 00:00:11,040
about coach Kelly and Bug Bounty

4
00:00:11,040 --> 00:00:12,000
programs

5
00:00:12,000 --> 00:00:14,340
my name is Mikhail I'm PhD student at

6
00:00:14,340 --> 00:00:19,560
qth and this talk based on the last the

7
00:00:19,560 --> 00:00:22,520
or last research in JavaScript

8
00:00:22,520 --> 00:00:24,380
infrastructure

9
00:00:24,380 --> 00:00:28,800
in server side node.js applications

10
00:00:28,800 --> 00:00:31,520
and today I'm going to

11
00:00:31,520 --> 00:00:34,380
talk about not about

12
00:00:34,380 --> 00:00:35,040
um

13
00:00:35,040 --> 00:00:37,500
uh details of the paper

14
00:00:37,500 --> 00:00:40,620
I want to talk about code KL and

15
00:00:40,620 --> 00:00:43,680
motivate you you to learn it and use

16
00:00:43,680 --> 00:00:47,520
your bug Bounty research

17
00:00:47,520 --> 00:00:49,680
uh what is

18
00:00:49,680 --> 00:00:53,960
um what code is

19
00:00:54,680 --> 00:00:58,140
a open source static analysis engine

20
00:00:58,140 --> 00:01:01,520
created by GitHub

21
00:01:01,520 --> 00:01:05,640
uh you can model vulnerabilities as a

22
00:01:05,640 --> 00:01:10,860
queries then and execute and code ql

23
00:01:10,860 --> 00:01:14,580
executed against extracted code in

24
00:01:14,580 --> 00:01:16,140
database

25
00:01:16,140 --> 00:01:19,260
so if we take a look on this design

26
00:01:19,260 --> 00:01:22,340
diagram you can see that

27
00:01:22,340 --> 00:01:25,500
we have some code base that you want to

28
00:01:25,500 --> 00:01:29,000
analyze we have extractor

29
00:01:29,000 --> 00:01:31,920
and it moves some entities in the

30
00:01:31,920 --> 00:01:33,060
database

31
00:01:33,060 --> 00:01:36,540
also you can write on queries

32
00:01:36,540 --> 00:01:40,020
yeah it's here it's another step of the

33
00:01:40,020 --> 00:01:43,020
analysis you can write on queries code

34
00:01:43,020 --> 00:01:46,140
will take a standard library that also

35
00:01:46,140 --> 00:01:48,840
wrote on the code queer language it's a

36
00:01:48,840 --> 00:01:51,360
special object-oriented logical

37
00:01:51,360 --> 00:01:53,880
programming language that allows us to

38
00:01:53,880 --> 00:01:56,100
write a queries and standard libraries

39
00:01:56,100 --> 00:02:00,659
that describe how the analysis work so

40
00:02:00,659 --> 00:02:05,880
it can add some obstructions for data

41
00:02:05,880 --> 00:02:08,940
flow analysis for call graph analysis

42
00:02:08,940 --> 00:02:13,020
for control flow analysis and at this

43
00:02:13,020 --> 00:02:15,239
extraction based on the information in

44
00:02:15,239 --> 00:02:19,500
the database and execute your query by

45
00:02:19,500 --> 00:02:23,160
executor calculated executor and provide

46
00:02:23,160 --> 00:02:26,239
some results in the end

47
00:02:26,239 --> 00:02:32,340
so it allows us to detect known kinds of

48
00:02:32,340 --> 00:02:35,400
vulnerabilities in the analyzed code

49
00:02:35,400 --> 00:02:37,700
base

50
00:02:40,640 --> 00:02:44,400
provide many building vulnerabilities

51
00:02:44,400 --> 00:02:48,780
that you can just run these queries and

52
00:02:48,780 --> 00:02:51,239
get some results to detect these

53
00:02:51,239 --> 00:02:54,120
vulnerabilities in analyzed application

54
00:02:54,120 --> 00:02:57,900
and also you can write uh your own

55
00:02:57,900 --> 00:03:01,260
queries to find any exploit Primitives

56
00:03:01,260 --> 00:03:05,099
for example any graduates to investigate

57
00:03:05,099 --> 00:03:08,280
the code to learn something about to to

58
00:03:08,280 --> 00:03:10,200
know something about code it works like

59
00:03:10,200 --> 00:03:14,099
a Oracle or some database that you ask

60
00:03:14,099 --> 00:03:17,640
some questions by the queries and get

61
00:03:17,640 --> 00:03:19,260
the data

62
00:03:19,260 --> 00:03:21,900
uh take a look on the list of supported

63
00:03:21,900 --> 00:03:25,560
languages uh you can see many

64
00:03:25,560 --> 00:03:29,040
many mainstream languages here I focused

65
00:03:29,040 --> 00:03:32,580
on the JavaScript and typescript in my

66
00:03:32,580 --> 00:03:34,440
research

67
00:03:34,440 --> 00:03:38,159
and work uh more with these languages

68
00:03:38,159 --> 00:03:39,980
and standard libraries

69
00:03:39,980 --> 00:03:45,440
but you can use one tool to analyze many

70
00:03:45,440 --> 00:03:50,000
applications on the different languages

71
00:03:50,000 --> 00:03:54,920
in the different bug bouncy targets

72
00:03:55,819 --> 00:03:58,920
support vulnerability detection types

73
00:03:58,920 --> 00:04:01,340
out of the box for many many

74
00:04:01,340 --> 00:04:04,379
vulnerability types

75
00:04:04,379 --> 00:04:06,720
it can be in Secure dependency

76
00:04:06,720 --> 00:04:10,260
resolution some injections like xss

77
00:04:10,260 --> 00:04:13,620
common injection SQL injection some

78
00:04:13,620 --> 00:04:16,399
complex vulnerabilities like

79
00:04:16,399 --> 00:04:18,959
insecurity serialization on Prototype

80
00:04:18,959 --> 00:04:22,699
pollution and many many others

81
00:04:23,160 --> 00:04:26,400
uh to give you some intuition how the

82
00:04:26,400 --> 00:04:29,220
query looks like I want to show this a

83
00:04:29,220 --> 00:04:33,419
simple example of the query on

84
00:04:33,419 --> 00:04:36,240
codecoin language

85
00:04:36,240 --> 00:04:40,880
the triple of the key words

86
00:04:40,880 --> 00:04:44,699
from where select

87
00:04:44,699 --> 00:04:45,860
yeah

88
00:04:45,860 --> 00:04:51,300
and in the first line you can describe

89
00:04:51,300 --> 00:04:53,940
in the first line you can describe what

90
00:04:53,940 --> 00:04:55,680
the data you want to take from the

91
00:04:55,680 --> 00:04:59,460
database for example here we Define

92
00:04:59,460 --> 00:05:04,500
um we Define a variable Park of package

93
00:05:04,500 --> 00:05:08,460
Json type it means the park will be

94
00:05:08,460 --> 00:05:13,100
campaigns set all Json dot

95
00:05:13,100 --> 00:05:16,259
package.json files from your database

96
00:05:16,259 --> 00:05:19,199
that you analyze from your projects that

97
00:05:19,199 --> 00:05:21,900
you analyze after that you can add some

98
00:05:21,900 --> 00:05:23,759
restriction for example you want to

99
00:05:23,759 --> 00:05:25,100
filter out

100
00:05:25,100 --> 00:05:28,560
these packages and store some data in

101
00:05:28,560 --> 00:05:32,699
the other variable by the string type

102
00:05:32,699 --> 00:05:36,539
yeah you write a where part and

103
00:05:36,539 --> 00:05:41,100
um it's looks like intuitive intuitively

104
00:05:41,100 --> 00:05:44,220
um code you get all dependencies from

105
00:05:44,220 --> 00:05:46,919
the park uh you get a value of each

106
00:05:46,919 --> 00:05:50,699
property stored in the variable wall and

107
00:05:50,699 --> 00:05:53,460
after that you try to match it with

108
00:05:53,460 --> 00:05:55,699
these regex

109
00:05:55,699 --> 00:06:00,300
this regrets much the values that

110
00:06:00,300 --> 00:06:05,460
campaigns HTTP or FTP protocol it gives

111
00:06:05,460 --> 00:06:10,400
you dependencies that can be downloaded

112
00:06:10,400 --> 00:06:15,679
using unencrypted communication Channel

113
00:06:17,639 --> 00:06:18,259
um

114
00:06:18,259 --> 00:06:22,020
in the previous slide when I show a list

115
00:06:22,020 --> 00:06:24,240
of possible vulnerabilities that you can

116
00:06:24,240 --> 00:06:27,180
detect by codekiel you could mention

117
00:06:27,180 --> 00:06:28,680
that

118
00:06:28,680 --> 00:06:32,400
um it contains some injections a lot of

119
00:06:32,400 --> 00:06:34,919
injections and

120
00:06:34,919 --> 00:06:39,419
um many vulnerabilities you need some

121
00:06:39,419 --> 00:06:42,300
more complex analysis to detect it for

122
00:06:42,300 --> 00:06:44,300
example for the injection you can take

123
00:06:44,300 --> 00:06:48,000
some Source like a Handler of the web

124
00:06:48,000 --> 00:06:50,120
request you can

125
00:06:50,120 --> 00:06:52,800
analyze the data flow from the source

126
00:06:52,800 --> 00:06:56,940
until it reach some function like exact

127
00:06:56,940 --> 00:06:59,880
function that execute some comment on

128
00:06:59,880 --> 00:07:03,360
the system if uh you if attacker can

129
00:07:03,360 --> 00:07:06,560
provide own data on on

130
00:07:06,560 --> 00:07:09,860
variable in the exec function it gets

131
00:07:09,860 --> 00:07:12,960
reach a common transaction

132
00:07:12,960 --> 00:07:16,020
now we can use a paint analysis for that

133
00:07:16,020 --> 00:07:18,300
code KL provided paint analysis

134
00:07:18,300 --> 00:07:21,539
primitive of the out of the box and you

135
00:07:21,539 --> 00:07:23,580
can see the example of such pain

136
00:07:23,580 --> 00:07:26,940
tracking analysis on the slide the query

137
00:07:26,940 --> 00:07:28,979
looks very similar

138
00:07:28,979 --> 00:07:32,880
uh in the query you write

139
00:07:32,880 --> 00:07:34,139
um

140
00:07:34,139 --> 00:07:38,460
you write has uh has flow pass from the

141
00:07:38,460 --> 00:07:42,300
source to sync that that holds when you

142
00:07:42,300 --> 00:07:45,599
have a pass in data flow between source

143
00:07:45,599 --> 00:07:49,020
and sync in and for the configuration

144
00:07:49,020 --> 00:07:53,160
you can Define source and sync to the

145
00:07:53,160 --> 00:07:54,620
right special

146
00:07:54,620 --> 00:07:58,319
predicates I noticed that code quill

147
00:07:58,319 --> 00:08:00,979
it's um

148
00:08:01,020 --> 00:08:04,199
object oriented uh logical programming

149
00:08:04,199 --> 00:08:07,020
language and you can write with some

150
00:08:07,020 --> 00:08:09,120
classes to extend some classes from the

151
00:08:09,120 --> 00:08:12,599
standard library and Define own analysis

152
00:08:12,599 --> 00:08:14,780
of the

153
00:08:14,780 --> 00:08:18,840
overrided methods predicates of this

154
00:08:18,840 --> 00:08:21,080
class

155
00:08:22,139 --> 00:08:26,280
um so okay we can understand a little

156
00:08:26,280 --> 00:08:30,060
bit What's um code is how it matched

157
00:08:30,060 --> 00:08:32,399
with bug Bounty targets uh you can

158
00:08:32,399 --> 00:08:34,979
choose between client-side and uh

159
00:08:34,979 --> 00:08:37,080
server-side vulnerabilities so that you

160
00:08:37,080 --> 00:08:40,679
want to investigate of course code creel

161
00:08:40,679 --> 00:08:43,320
can help with the both types of

162
00:08:43,320 --> 00:08:46,140
vulnerabilities I focused on the server

163
00:08:46,140 --> 00:08:49,920
side mainly because of volunteers so

164
00:08:49,920 --> 00:08:52,260
critical vulnerabilities usually you can

165
00:08:52,260 --> 00:08:54,600
get more bounces for that and also my

166
00:08:54,600 --> 00:08:56,519
previous research also was focused on

167
00:08:56,519 --> 00:08:58,680
the node.js that server-side framework

168
00:08:58,680 --> 00:09:02,160
so what bug bouncy targets could be

169
00:09:02,160 --> 00:09:03,959
interesting for you if you want to apply

170
00:09:03,959 --> 00:09:06,120
a code query for that first of all I

171
00:09:06,120 --> 00:09:08,640
would recommend to see on the big tier

172
00:09:08,640 --> 00:09:10,680
companies background programs for

173
00:09:10,680 --> 00:09:15,779
example meta has around 200 repositories

174
00:09:15,779 --> 00:09:17,399
in the scope on the different language

175
00:09:17,399 --> 00:09:20,399
you can try to analyze by code Quail all

176
00:09:20,399 --> 00:09:24,260
of that or most part of that uh Google

177
00:09:24,260 --> 00:09:28,560
offers Bounty for and update uh bug

178
00:09:28,560 --> 00:09:30,839
Bounty program for open source software

179
00:09:30,839 --> 00:09:33,540
and projects uh like a few weeks ago I

180
00:09:33,540 --> 00:09:36,120
think uh you can take a look on the new

181
00:09:36,120 --> 00:09:39,480
targets uh in this bug Bounty Microsoft

182
00:09:39,480 --> 00:09:43,680
also offer uh some bounties uh in dotnet

183
00:09:43,680 --> 00:09:46,500
core and that it's open source project

184
00:09:46,500 --> 00:09:49,080
and you also can analyze it by code

185
00:09:49,080 --> 00:09:51,019
queer

186
00:09:51,019 --> 00:09:54,420
and on other platforms you can filter

187
00:09:54,420 --> 00:09:56,660
Out programs by

188
00:09:56,660 --> 00:10:01,200
assets and source code assets it's most

189
00:10:01,200 --> 00:10:04,440
interesting for us just finds some

190
00:10:04,440 --> 00:10:06,720
source code analyze it but by Cold care

191
00:10:06,720 --> 00:10:09,240
queries and see on the result also

192
00:10:09,240 --> 00:10:11,399
executable assets also interesting

193
00:10:11,399 --> 00:10:15,899
because for Java or dotnet applications

194
00:10:15,899 --> 00:10:19,320
you can decompile it and analyze the

195
00:10:19,320 --> 00:10:23,160
compiler code by codekl why not

196
00:10:23,160 --> 00:10:27,180
um another trick you can Google you can

197
00:10:27,180 --> 00:10:30,420
search by company name public GitHub

198
00:10:30,420 --> 00:10:33,120
repositories so most likely you find

199
00:10:33,120 --> 00:10:35,880
some open source or forked code that

200
00:10:35,880 --> 00:10:39,360
used in the products of the company and

201
00:10:39,360 --> 00:10:42,899
you try to analyze it but by codecle and

202
00:10:42,899 --> 00:10:46,740
use it in your bug Bounty reports

203
00:10:46,740 --> 00:10:48,540
also I want to

204
00:10:48,540 --> 00:10:50,820
question about open source bug Bounty

205
00:10:50,820 --> 00:10:53,420
platform 100. Dev

206
00:10:53,420 --> 00:10:56,899
they cover most of

207
00:10:56,899 --> 00:11:00,000
uh most of GitHub repositories and give

208
00:11:00,000 --> 00:11:02,040
a bounties depends on the popularity of

209
00:11:02,040 --> 00:11:04,620
the repository and impact of the

210
00:11:04,620 --> 00:11:07,079
vulnerability I use it in for the one

211
00:11:07,079 --> 00:11:09,600
case it's not a large bounties but it's

212
00:11:09,600 --> 00:11:10,620
still

213
00:11:10,620 --> 00:11:13,800
um can be useful and there are the

214
00:11:13,800 --> 00:11:16,200
incentive I think many of you know about

215
00:11:16,200 --> 00:11:19,740
this bug bouncy more vulnerability

216
00:11:19,740 --> 00:11:21,140
broker

217
00:11:21,140 --> 00:11:24,600
so they also interesting in the critical

218
00:11:24,600 --> 00:11:26,839
vulnerabilities in them

219
00:11:26,839 --> 00:11:32,839
uh open source projects and so welcome

220
00:11:32,839 --> 00:11:37,560
uh and bonus part code also have his own

221
00:11:37,560 --> 00:11:40,800
bug bouncy program it works like if you

222
00:11:40,800 --> 00:11:44,640
improve some query if you or if you uh

223
00:11:44,640 --> 00:11:48,600
wrote implemented on query you can and

224
00:11:48,600 --> 00:11:51,360
find and you found some vulnerabilities

225
00:11:51,360 --> 00:11:54,899
by this query you can create a pull

226
00:11:54,899 --> 00:11:56,000
request

227
00:11:56,000 --> 00:12:01,700
and if your changes will be meant

228
00:12:01,700 --> 00:12:04,800
will be applied in the repository of

229
00:12:04,800 --> 00:12:07,620
code ql you can get some bounces for

230
00:12:07,620 --> 00:12:09,120
that

231
00:12:09,120 --> 00:12:13,019
so my story my current status of the

232
00:12:13,019 --> 00:12:16,040
bounties using Code kill

233
00:12:16,040 --> 00:12:18,480
we found a remote code execution

234
00:12:18,480 --> 00:12:22,680
vulnerabilities in npmcli now it's part

235
00:12:22,680 --> 00:12:26,459
of uh GitHub back bouncy and got eleven

236
00:12:26,459 --> 00:12:29,880
thousand dollars for that and no CVM

237
00:12:29,880 --> 00:12:34,040
it's interesting usually it works uh

238
00:12:34,040 --> 00:12:39,120
in the other way around CV yes room but

239
00:12:39,120 --> 00:12:42,320
ten thousand dollars now but okay

240
00:12:42,320 --> 00:12:45,600
for per server it's popular application

241
00:12:45,600 --> 00:12:48,839
uh open source application I reported

242
00:12:48,839 --> 00:12:51,740
that the remote code execution by

243
00:12:51,740 --> 00:12:53,360
hunter.dev

244
00:12:53,360 --> 00:12:58,700
it's not too much bouncy but it works

245
00:12:58,700 --> 00:13:02,940
also a few cases now it's on the review

246
00:13:02,940 --> 00:13:07,980
in The Institute company and waiting

247
00:13:07,980 --> 00:13:12,420
some results and fixes to

248
00:13:12,420 --> 00:13:14,220
just close some details of these

249
00:13:14,220 --> 00:13:15,480
vulnerabilities

250
00:13:15,480 --> 00:13:18,779
all of that it is remote code execution

251
00:13:18,779 --> 00:13:21,720
that we found by codeclean

252
00:13:21,720 --> 00:13:25,620
so and a few uh lessons that we got from

253
00:13:25,620 --> 00:13:27,019
the user code

254
00:13:27,019 --> 00:13:30,000
keep in mind that codecl is a logical

255
00:13:30,000 --> 00:13:31,440
programming language

256
00:13:31,440 --> 00:13:35,399
in some cases you can be really

257
00:13:35,399 --> 00:13:36,300
um

258
00:13:36,300 --> 00:13:38,820
wondered why it works like this for

259
00:13:38,820 --> 00:13:43,260
example a does not equal B and not a

260
00:13:43,260 --> 00:13:47,399
equals B it's uh absolutely very

261
00:13:47,399 --> 00:13:49,740
different meaning of this expression I

262
00:13:49,740 --> 00:13:53,700
will not go by this text you can yeah

263
00:13:53,700 --> 00:13:57,480
just see it later

264
00:13:57,480 --> 00:13:58,740
um

265
00:13:58,740 --> 00:14:02,519
it's good to have some large Benchmark

266
00:14:02,519 --> 00:14:04,680
with vulnerabilities that you want to

267
00:14:04,680 --> 00:14:07,380
detect before you start to use a code

268
00:14:07,380 --> 00:14:09,779
kill it's good to have some regression

269
00:14:09,779 --> 00:14:12,839
testing if you do some changes in the

270
00:14:12,839 --> 00:14:15,800
queries and also you can

271
00:14:15,800 --> 00:14:18,120
calculate the metrics recall and

272
00:14:18,120 --> 00:14:20,339
precision metrics I could say that

273
00:14:20,339 --> 00:14:22,560
hierarchical metrics are very important

274
00:14:22,560 --> 00:14:26,820
for practice in practice because a

275
00:14:26,820 --> 00:14:30,380
hierarchical metric shows us how many

276
00:14:30,380 --> 00:14:33,300
vulnerabilities you actually can find by

277
00:14:33,300 --> 00:14:35,220
this static analysis tool for example if

278
00:14:35,220 --> 00:14:38,040
you have 100 vulnerable and Pen packages

279
00:14:38,040 --> 00:14:41,279
you run on code query and show how many

280
00:14:41,279 --> 00:14:45,240
you actually detect so for example in

281
00:14:45,240 --> 00:14:47,820
original code query for the Prototype

282
00:14:47,820 --> 00:14:49,800
pollution that we use in all research

283
00:14:49,800 --> 00:14:52,639
detect about 30 percent of

284
00:14:52,639 --> 00:14:56,579
vulnerabilities and it does not give me

285
00:14:56,579 --> 00:15:00,620
any remote code execution from

286
00:15:01,220 --> 00:15:07,260
it did not detect it but when I improve

287
00:15:07,260 --> 00:15:13,019
the improved um recall metric to 97 it

288
00:15:13,019 --> 00:15:15,660
give us many new vulnerabilities that we

289
00:15:15,660 --> 00:15:16,440
found

290
00:15:16,440 --> 00:15:19,260
I could say that Precision rate it's not

291
00:15:19,260 --> 00:15:23,100
so important you uh we got a Precision

292
00:15:23,100 --> 00:15:26,220
rate around such a percent and it's okay

293
00:15:26,220 --> 00:15:28,560
it means you have a two three false

294
00:15:28,560 --> 00:15:32,100
positive for one true positive and it's

295
00:15:32,100 --> 00:15:35,279
uh reasonable to verify manually it's

296
00:15:35,279 --> 00:15:38,100
not a problem it's just maybe half of

297
00:15:38,100 --> 00:15:41,420
our not much work

298
00:15:42,000 --> 00:15:44,399
um and when I mentioned about uh Source

299
00:15:44,399 --> 00:15:46,920
specification I could say uh don't worry

300
00:15:46,920 --> 00:15:49,199
much about specification of what the

301
00:15:49,199 --> 00:15:52,500
source can be I try to use any function

302
00:15:52,500 --> 00:15:55,139
and it saves a lot of time and usually

303
00:15:55,139 --> 00:15:57,560
you can get a reasonable

304
00:15:57,560 --> 00:16:02,279
result for for applying

305
00:16:02,279 --> 00:16:06,000
so here I show a link how to start to

306
00:16:06,000 --> 00:16:10,079
learn a code KL you can use it and or

307
00:16:10,079 --> 00:16:13,380
current result as I mentioned we

308
00:16:13,380 --> 00:16:15,300
published the papers that accepted on

309
00:16:15,300 --> 00:16:17,779
the usenic security 23

310
00:16:17,779 --> 00:16:22,160
when we use a code KL and a lot of work

311
00:16:22,160 --> 00:16:25,440
in progress for example

312
00:16:25,440 --> 00:16:27,660
um protode pollution gadgets that leads

313
00:16:27,660 --> 00:16:29,880
to remote code execution and plan to

314
00:16:29,880 --> 00:16:31,800
publish soon

315
00:16:31,800 --> 00:16:34,320
uh sample request and the code quill

316
00:16:34,320 --> 00:16:38,279
with improvements of JavaScript analysis

317
00:16:38,279 --> 00:16:41,660
that I mentioned we increase

318
00:16:41,660 --> 00:16:45,839
Miracle rate from the 30 percent 297. I

319
00:16:45,839 --> 00:16:48,540
also I want to make this full request

320
00:16:48,540 --> 00:16:50,940
soon write-ups about vulnerabilities

321
00:16:50,940 --> 00:16:54,680
that we found as vendors fix it

322
00:16:54,680 --> 00:16:57,720
and I'm working on the workshop on deep

323
00:16:57,720 --> 00:17:00,380
dive Workshop called calculus Court

324
00:17:00,380 --> 00:17:03,899
probably I also will publish it soon if

325
00:17:03,899 --> 00:17:06,240
you're interested in this stuff feel

326
00:17:06,240 --> 00:17:09,780
free to follow me in Twitter I will do

327
00:17:09,780 --> 00:17:12,480
some updates there also easy slides I

328
00:17:12,480 --> 00:17:15,540
will share in Twitter thank you thank

329
00:17:15,540 --> 00:17:17,959
you very much

