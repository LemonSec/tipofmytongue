1
00:00:03,840 --> 00:00:06,400
so good morning i'm sharma hudson and

2
00:00:06,400 --> 00:00:08,000
you might remember me from previous

3
00:00:08,000 --> 00:00:09,920
talks such as

4
00:00:09,920 --> 00:00:11,679
installing hardware implants in your

5
00:00:11,679 --> 00:00:13,440
servers or

6
00:00:13,440 --> 00:00:15,759
installing micropython in your ikea

7
00:00:15,759 --> 00:00:17,119
light bulbs

8
00:00:17,119 --> 00:00:19,119
or maybe you know me from

9
00:00:19,119 --> 00:00:21,359
installing custom firmware in your canon

10
00:00:21,359 --> 00:00:22,640
cameras

11
00:00:22,640 --> 00:00:25,119
but did you know that computers are not

12
00:00:25,119 --> 00:00:26,640
just in your

13
00:00:26,640 --> 00:00:28,560
servers or your light bulbs or your

14
00:00:28,560 --> 00:00:31,599
cameras there are computers everywhere

15
00:00:31,599 --> 00:00:34,559
there are computers in your dishwasher

16
00:00:34,559 --> 00:00:37,600
there are computers in your oven

17
00:00:37,600 --> 00:00:40,800
there are computers in your laundry

18
00:00:40,800 --> 00:00:42,800
there are even computers in your coffee

19
00:00:42,800 --> 00:00:45,600
machines not my coffee machine i do a

20
00:00:45,600 --> 00:00:47,360
pour over but

21
00:00:47,360 --> 00:00:49,120
a lot of coffee machines these days have

22
00:00:49,120 --> 00:00:50,559
computers in them

23
00:00:50,559 --> 00:00:52,800
and these computers

24
00:00:52,800 --> 00:00:55,440
connect to the cloud

25
00:00:55,440 --> 00:00:57,440
and a lot of people in this room

26
00:00:57,440 --> 00:00:59,920
probably have the immediate reaction

27
00:00:59,920 --> 00:01:02,719
that the cloud is not a good idea for

28
00:01:02,719 --> 00:01:04,080
this sort of thing

29
00:01:04,080 --> 00:01:05,840
um that

30
00:01:05,840 --> 00:01:09,040
i was recently at a smart smart home

31
00:01:09,040 --> 00:01:11,360
home automation conference and literally

32
00:01:11,360 --> 00:01:12,880
every speaker there

33
00:01:12,880 --> 00:01:16,080
had a talk about why local control of

34
00:01:16,080 --> 00:01:18,320
their devices was better than going

35
00:01:18,320 --> 00:01:20,479
through the cloud

36
00:01:20,479 --> 00:01:23,119
and one of the big reasons is the cloud

37
00:01:23,119 --> 00:01:25,600
can introduce new failure modes where

38
00:01:25,600 --> 00:01:26,880
you might not be able to use your

39
00:01:26,880 --> 00:01:30,000
appliances because the internet is down

40
00:01:30,000 --> 00:01:31,520
or

41
00:01:31,520 --> 00:01:32,640
you might

42
00:01:32,640 --> 00:01:35,680
be dependent on a cloud server being up

43
00:01:35,680 --> 00:01:37,520
and if the company goes away

44
00:01:37,520 --> 00:01:40,560
suddenly your devices no longer work

45
00:01:40,560 --> 00:01:43,360
or possibly even worse

46
00:01:43,360 --> 00:01:44,640
you might

47
00:01:44,640 --> 00:01:46,960
find that the way you've been using your

48
00:01:46,960 --> 00:01:49,600
device is no longer available or they've

49
00:01:49,600 --> 00:01:51,119
decided to switch to a subscription

50
00:01:51,119 --> 00:01:53,520
model

51
00:01:53,520 --> 00:01:54,399
so

52
00:01:54,399 --> 00:01:56,640
in addition to all of this you don't get

53
00:01:56,640 --> 00:01:59,360
any privacy that the folks in the

54
00:01:59,360 --> 00:02:01,439
running the cloud servers learn a lot

55
00:02:01,439 --> 00:02:04,640
about you uh using the devices and

56
00:02:04,640 --> 00:02:05,439
uh

57
00:02:05,439 --> 00:02:07,360
you know how and

58
00:02:07,360 --> 00:02:10,000
they're also then on your network

59
00:02:10,000 --> 00:02:12,239
so

60
00:02:12,560 --> 00:02:14,400
the security

61
00:02:14,400 --> 00:02:16,319
of these devices on your network is then

62
00:02:16,319 --> 00:02:17,760
a huge problem

63
00:02:17,760 --> 00:02:20,080
dan tensler has made a career out of

64
00:02:20,080 --> 00:02:22,480
giving this amazing talk about

65
00:02:22,480 --> 00:02:24,160
stupid things he finds on the internet

66
00:02:24,160 --> 00:02:26,319
with showdown

67
00:02:26,319 --> 00:02:28,000
he's

68
00:02:28,000 --> 00:02:29,520
we'll just run through screenshot after

69
00:02:29,520 --> 00:02:31,040
screenshot of

70
00:02:31,040 --> 00:02:33,280
ice cream factory or power plant that

71
00:02:33,280 --> 00:02:35,360
are for some reason hooked up to the

72
00:02:35,360 --> 00:02:37,200
internet

73
00:02:37,200 --> 00:02:39,040
but

74
00:02:39,040 --> 00:02:41,120
why would i buy one of these things you

75
00:02:41,120 --> 00:02:43,599
know if i'm so anti-cloud and it turns

76
00:02:43,599 --> 00:02:45,440
out there's one feature in the bosch

77
00:02:45,440 --> 00:02:47,519
dishwasher that i really like which is

78
00:02:47,519 --> 00:02:50,080
that the door opens automatically uh at

79
00:02:50,080 --> 00:02:52,239
the end of the cycle literally that was

80
00:02:52,239 --> 00:02:54,400
the single feature that led me to buy

81
00:02:54,400 --> 00:02:56,720
this dishwasher

82
00:02:56,720 --> 00:02:57,519
and

83
00:02:57,519 --> 00:02:58,800
when i got it home and put it on the

84
00:02:58,800 --> 00:03:00,640
wi-fi which of course you know why would

85
00:03:00,640 --> 00:03:02,800
i put on the wi-fi

86
00:03:02,800 --> 00:03:05,360
i found that it's actually a lot better

87
00:03:05,360 --> 00:03:07,680
than the average iot device um i was

88
00:03:07,680 --> 00:03:10,159
really surprised uh

89
00:03:10,159 --> 00:03:13,120
in the uh the bosch siemens homegroup

90
00:03:13,120 --> 00:03:15,599
devices the the

91
00:03:15,599 --> 00:03:19,360
um they have a official api that has

92
00:03:19,360 --> 00:03:21,040
rest endpoints that integrate with

93
00:03:21,040 --> 00:03:22,959
things like home assistant so that

94
00:03:22,959 --> 00:03:25,840
you're able to control your devices

95
00:03:25,840 --> 00:03:30,080
uh through their official cloud api

96
00:03:30,080 --> 00:03:33,040
but even more surprisingly the home

97
00:03:33,040 --> 00:03:35,760
connect devices from bosch siemens have

98
00:03:35,760 --> 00:03:38,080
a no cloud mode that's built into it

99
00:03:38,080 --> 00:03:39,519
that you can go into the app and you can

100
00:03:39,519 --> 00:03:41,920
tell the devices do not connect to the

101
00:03:41,920 --> 00:03:42,959
cloud

102
00:03:42,959 --> 00:03:46,000
and at that point they will only uh talk

103
00:03:46,000 --> 00:03:47,519
to the local network

104
00:03:47,519 --> 00:03:49,760
you do get a scary warning that they'll

105
00:03:49,760 --> 00:03:51,040
no longer

106
00:03:51,040 --> 00:03:53,200
be controllable from outside which is

107
00:03:53,200 --> 00:03:55,440
actually the reason i wanted to put it

108
00:03:55,440 --> 00:03:57,120
in that mode

109
00:03:57,120 --> 00:03:58,640
and also that it will no longer receive

110
00:03:58,640 --> 00:04:00,879
firmware updates and it's such a weird

111
00:04:00,879 --> 00:04:03,519
world that we're in that home appliances

112
00:04:03,519 --> 00:04:06,720
get firmware updates

113
00:04:06,879 --> 00:04:09,439
the problem with the no cloud mode is

114
00:04:09,439 --> 00:04:11,360
that it only works with their home

115
00:04:11,360 --> 00:04:15,120
connect app that this disables the um

116
00:04:15,120 --> 00:04:17,199
the cloud api that things like home

117
00:04:17,199 --> 00:04:20,160
assistant use to talk to the devices

118
00:04:20,160 --> 00:04:21,440
and of course

119
00:04:21,440 --> 00:04:23,040
it only officially works for the home

120
00:04:23,040 --> 00:04:24,720
connect act

121
00:04:24,720 --> 00:04:26,240
the whole reason we're having this talk

122
00:04:26,240 --> 00:04:28,479
is that we think i figured out a way to

123
00:04:28,479 --> 00:04:31,520
talk to it without that

124
00:04:31,680 --> 00:04:32,560
so

125
00:04:32,560 --> 00:04:34,960
why wouldn't i want to use the app

126
00:04:34,960 --> 00:04:35,840
you know

127
00:04:35,840 --> 00:04:36,880
it's

128
00:04:36,880 --> 00:04:39,360
just not convenient sometimes and it

129
00:04:39,360 --> 00:04:40,800
doesn't have the features that i

130
00:04:40,800 --> 00:04:43,919
necessarily want for instance

131
00:04:43,919 --> 00:04:45,759
our power we have a smart power meter

132
00:04:45,759 --> 00:04:47,120
which is also

133
00:04:47,120 --> 00:04:49,280
a whole another talk into itself

134
00:04:49,280 --> 00:04:50,720
and we're able to do power aware

135
00:04:50,720 --> 00:04:53,440
scheduling so that we can have the

136
00:04:53,440 --> 00:04:55,199
different appliances that are power

137
00:04:55,199 --> 00:04:57,759
hungry run their cycles

138
00:04:57,759 --> 00:04:59,280
at different times of the day

139
00:04:59,280 --> 00:05:02,080
when either power is cheap or when power

140
00:05:02,080 --> 00:05:04,320
is abundant

141
00:05:04,320 --> 00:05:06,960
we also log all of these uh sorts of

142
00:05:06,960 --> 00:05:09,120
things onto dashboards

143
00:05:09,120 --> 00:05:11,280
for the current power management whether

144
00:05:11,280 --> 00:05:13,199
or not the uh the dr

145
00:05:13,199 --> 00:05:14,960
hatch is open

146
00:05:14,960 --> 00:05:17,360
and it's really convenient to find out

147
00:05:17,360 --> 00:05:19,440
if the laundry is done by being able to

148
00:05:19,440 --> 00:05:21,360
just look at a screen that's hanging on

149
00:05:21,360 --> 00:05:23,440
the wall rather than having to fish the

150
00:05:23,440 --> 00:05:26,400
phone out of your pocket

151
00:05:26,880 --> 00:05:27,680
the

152
00:05:27,680 --> 00:05:29,120
other time you don't want to pull out

153
00:05:29,120 --> 00:05:31,600
the phone is when you're you're in bed

154
00:05:31,600 --> 00:05:33,680
and you want to turn off the lights

155
00:05:33,680 --> 00:05:35,520
close the blinds turn down the

156
00:05:35,520 --> 00:05:38,000
thermostats and start the dishwasher it

157
00:05:38,000 --> 00:05:40,960
is so much more satisfying to smash that

158
00:05:40,960 --> 00:05:43,120
big red button that then integrates

159
00:05:43,120 --> 00:05:45,120
across all uh four of those different

160
00:05:45,120 --> 00:05:46,880
systems than it would be to pull the

161
00:05:46,880 --> 00:05:48,639
phone out and scroll through you know

162
00:05:48,639 --> 00:05:50,840
four different apps uh to do

163
00:05:50,840 --> 00:05:52,479
that

164
00:05:52,479 --> 00:05:55,039
and a really important reason that i

165
00:05:55,039 --> 00:05:57,280
also like this sort of thing is we can

166
00:05:57,280 --> 00:06:00,400
we can adapt the controls for folks who

167
00:06:00,400 --> 00:06:01,840
may not be

168
00:06:01,840 --> 00:06:05,600
as physically agile or who have vision

169
00:06:05,600 --> 00:06:06,800
issues

170
00:06:06,800 --> 00:06:08,000
working with them

171
00:06:08,000 --> 00:06:09,520
most of these appliances have touch

172
00:06:09,520 --> 00:06:11,600
screens and capsense buttons so you

173
00:06:11,600 --> 00:06:13,360
really have no idea

174
00:06:13,360 --> 00:06:14,240
where

175
00:06:14,240 --> 00:06:15,759
what the current settings are unless you

176
00:06:15,759 --> 00:06:17,840
can see that screen

177
00:06:17,840 --> 00:06:21,440
so by being able to build customized

178
00:06:21,440 --> 00:06:23,680
physical devices say by

179
00:06:23,680 --> 00:06:26,080
soldering in new buttons into remotes

180
00:06:26,080 --> 00:06:27,680
we can make these devices more

181
00:06:27,680 --> 00:06:30,000
accessible

182
00:06:30,000 --> 00:06:31,440
so

183
00:06:31,440 --> 00:06:33,120
this is all awesome and you you'll

184
00:06:33,120 --> 00:06:34,080
probably want to know how can you

185
00:06:34,080 --> 00:06:35,919
automate your home with it

186
00:06:35,919 --> 00:06:36,880
the uh

187
00:06:36,880 --> 00:06:37,919
the short

188
00:06:37,919 --> 00:06:40,560
description is you clone the github repo

189
00:06:40,560 --> 00:06:42,240
you log in with your username and

190
00:06:42,240 --> 00:06:45,280
password and then you run the mqtt

191
00:06:45,280 --> 00:06:48,560
program to interface with it

192
00:06:48,560 --> 00:06:50,319
all of the source is up on github it's

193
00:06:50,319 --> 00:06:52,400
all

194
00:06:52,400 --> 00:06:54,080
available for folks to to read through

195
00:06:54,080 --> 00:06:56,000
it's mostly python

196
00:06:56,000 --> 00:06:59,199
that does a little bit of integration

197
00:06:59,199 --> 00:07:00,479
with the

198
00:07:00,479 --> 00:07:01,759
bosch servers

199
00:07:01,759 --> 00:07:04,080
and then the integration with the mqtt

200
00:07:04,080 --> 00:07:06,000
server

201
00:07:06,000 --> 00:07:08,720
so that first program the

202
00:07:08,720 --> 00:07:11,599
hc login takes your bosch username and

203
00:07:11,599 --> 00:07:12,720
password

204
00:07:12,720 --> 00:07:15,199
and then contacts the bosch

205
00:07:15,199 --> 00:07:16,639
oauth server

206
00:07:16,639 --> 00:07:18,960
to receive back a bearer token that

207
00:07:18,960 --> 00:07:20,319
authenticates

208
00:07:20,319 --> 00:07:22,880
sort of our application

209
00:07:22,880 --> 00:07:24,639
this is you know a really nice thing

210
00:07:24,639 --> 00:07:26,319
that they've done this is a standard

211
00:07:26,319 --> 00:07:28,800
sort of authentication flow it's

212
00:07:28,800 --> 00:07:31,759
relatively well studied and secure

213
00:07:31,759 --> 00:07:32,479
and

214
00:07:32,479 --> 00:07:33,759
you know the fact that it's built on the

215
00:07:33,759 --> 00:07:35,599
standard means it's pretty easy to use

216
00:07:35,599 --> 00:07:37,759
existing python libraries to do this

217
00:07:37,759 --> 00:07:39,680
step

218
00:07:39,680 --> 00:07:41,919
there is one thing here that we are

219
00:07:41,919 --> 00:07:44,000
actually masquerading as the bosh app

220
00:07:44,000 --> 00:07:46,479
when we do this which i would like to

221
00:07:46,479 --> 00:07:49,120
avoid but right now we just pretend that

222
00:07:49,120 --> 00:07:51,440
we're the bosch app

223
00:07:51,440 --> 00:07:54,800
so we take that bearer token

224
00:07:54,800 --> 00:07:57,120
and we contact our api server and it

225
00:07:57,120 --> 00:07:59,199
replies with all of the appliance

226
00:07:59,199 --> 00:08:00,639
credentials

227
00:08:00,639 --> 00:08:02,879
that we need to be able to contact the

228
00:08:02,879 --> 00:08:06,800
devices that are on our local network

229
00:08:07,199 --> 00:08:11,280
we can then use a undocumented rest api

230
00:08:11,280 --> 00:08:14,240
with those appliance ids to receive xml

231
00:08:14,240 --> 00:08:16,160
descriptions of the appliances

232
00:08:16,160 --> 00:08:17,360
themselves

233
00:08:17,360 --> 00:08:21,039
and this is xml it's not particularly

234
00:08:21,039 --> 00:08:23,199
nice to read through or work with

235
00:08:23,199 --> 00:08:26,639
so we take that and turn it into a json

236
00:08:26,639 --> 00:08:29,280
file that's easier for us to to ingest

237
00:08:29,280 --> 00:08:31,680
and process

238
00:08:31,680 --> 00:08:34,000
and after this step

239
00:08:34,000 --> 00:08:36,799
no more internet is required that you

240
00:08:36,799 --> 00:08:39,440
can disconnect your your automation

241
00:08:39,440 --> 00:08:42,240
system from the internet because we no

242
00:08:42,240 --> 00:08:44,159
longer have to talk to the bosh servers

243
00:08:44,159 --> 00:08:46,800
ever again

244
00:08:47,279 --> 00:08:50,880
so now that we're offline we can use the

245
00:08:50,880 --> 00:08:53,440
home connect to mqtt adapter which will

246
00:08:53,440 --> 00:08:56,800
read in that json configuration

247
00:08:56,800 --> 00:09:01,040
and then contacts all of the appliances

248
00:09:01,040 --> 00:09:01,920
with

249
00:09:01,920 --> 00:09:05,600
https with a

250
00:09:05,600 --> 00:09:07,680
fairly modern cipher suite

251
00:09:07,680 --> 00:09:10,959
or some of the devices still do http

252
00:09:10,959 --> 00:09:12,880
but they they're actually doing really

253
00:09:12,880 --> 00:09:15,040
good cryptography they've they're doing

254
00:09:15,040 --> 00:09:17,920
aes cbc for the messages they're

255
00:09:17,920 --> 00:09:21,120
hmacking each message with a key derived

256
00:09:21,120 --> 00:09:23,920
from a key derivation key

257
00:09:23,920 --> 00:09:25,760
and in either a case we get back

258
00:09:25,760 --> 00:09:28,399
websocket events that are protected in

259
00:09:28,399 --> 00:09:30,480
transit against tampering against

260
00:09:30,480 --> 00:09:33,040
anybody trying to insert

261
00:09:33,040 --> 00:09:35,200
malicious appliance information into our

262
00:09:35,200 --> 00:09:37,839
network

263
00:09:38,240 --> 00:09:41,760
the htc mqtt program takes takes those

264
00:09:41,760 --> 00:09:43,680
websocket events and translates them

265
00:09:43,680 --> 00:09:46,959
into mqtt messages which is a fairly

266
00:09:46,959 --> 00:09:49,360
simple pub sub

267
00:09:49,360 --> 00:09:51,360
program that's very common in a lot of

268
00:09:51,360 --> 00:09:53,040
home automation

269
00:09:53,040 --> 00:09:54,880
so in the case of the oven it gets back

270
00:09:54,880 --> 00:09:58,720
a websocket event that says

271
00:09:58,959 --> 00:10:01,519
i don't remember event id 240

272
00:10:01,519 --> 00:10:04,320
or event id 7 equals 240 and we

273
00:10:04,320 --> 00:10:06,560
translate that to the temperature based

274
00:10:06,560 --> 00:10:10,080
on the stuff from that xml file

275
00:10:10,080 --> 00:10:12,480
that message gets published to the mqtt

276
00:10:12,480 --> 00:10:14,560
server with the topic home connect oven

277
00:10:14,560 --> 00:10:15,440
state

278
00:10:15,440 --> 00:10:17,360
and then any of the dashboards around

279
00:10:17,360 --> 00:10:20,320
the house that have subscribed to that

280
00:10:20,320 --> 00:10:22,320
event or to that topic will receive a

281
00:10:22,320 --> 00:10:24,320
notification

282
00:10:24,320 --> 00:10:26,399
we also route it uh

283
00:10:26,399 --> 00:10:29,120
to and from the zigbee to mqtt

284
00:10:29,120 --> 00:10:32,800
program so that we can say take zigbee

285
00:10:32,800 --> 00:10:35,040
remote button presses and turn those

286
00:10:35,040 --> 00:10:37,120
into events for the

287
00:10:37,120 --> 00:10:40,640
to control the appliances

288
00:10:40,720 --> 00:10:43,040
so as a quick sort of example of what

289
00:10:43,040 --> 00:10:44,640
does one of these dashboards look like

290
00:10:44,640 --> 00:10:47,760
this is pretty close to a complete

291
00:10:47,760 --> 00:10:50,079
esp home

292
00:10:50,079 --> 00:10:52,720
implementation of a small dashboard

293
00:10:52,720 --> 00:10:55,279
so it subscribes to the

294
00:10:55,279 --> 00:10:58,399
home connect oven state mqtt message

295
00:10:58,399 --> 00:11:00,480
it gets that json

296
00:11:00,480 --> 00:11:02,079
message and if it has the keys for

297
00:11:02,079 --> 00:11:04,800
temperature and desired temperature it

298
00:11:04,800 --> 00:11:05,920
stores them

299
00:11:05,920 --> 00:11:09,120
and then it does a printf onto a

300
00:11:09,120 --> 00:11:11,519
little bit map display

301
00:11:11,519 --> 00:11:14,079
and the end result is we now have a

302
00:11:14,079 --> 00:11:16,399
little thingy that will display the the

303
00:11:16,399 --> 00:11:18,399
current oven temperature and this is a

304
00:11:18,399 --> 00:11:21,440
feature that the actual oven doesn't do

305
00:11:21,440 --> 00:11:22,640
it doesn't display the current

306
00:11:22,640 --> 00:11:24,880
temperature anywhere on it only the

307
00:11:24,880 --> 00:11:27,120
desired temperature

308
00:11:27,120 --> 00:11:29,920
the other thing in this particular board

309
00:11:29,920 --> 00:11:32,480
is we have physical buttons

310
00:11:32,480 --> 00:11:34,720
this is a prototype for someone who

311
00:11:34,720 --> 00:11:36,240
needs

312
00:11:36,240 --> 00:11:38,880
a non-vision based way of interacting

313
00:11:38,880 --> 00:11:40,320
with their oven to be able to have a

314
00:11:40,320 --> 00:11:42,720
button that they can just hit to say

315
00:11:42,720 --> 00:11:46,000
bake or broil or read

316
00:11:46,000 --> 00:11:48,320
speak the temperature to me so this is

317
00:11:48,320 --> 00:11:50,800
an example of a accessibility

318
00:11:50,800 --> 00:11:53,200
integration that we can do

319
00:11:53,200 --> 00:11:55,680
with this

320
00:11:55,680 --> 00:11:59,839
communication protocol to the appliances

321
00:11:59,920 --> 00:12:01,920
so you all are a technical conference

322
00:12:01,920 --> 00:12:03,600
and a bunch of security folks so you

323
00:12:03,600 --> 00:12:05,200
probably want to know how do we actually

324
00:12:05,200 --> 00:12:06,800
figure out what's going on inside of

325
00:12:06,800 --> 00:12:08,320
this you know what are the reverse

326
00:12:08,320 --> 00:12:10,800
engineering steps to

327
00:12:10,800 --> 00:12:13,839
give an appliance how do we figure out

328
00:12:13,839 --> 00:12:15,519
what it's what protocols it's talking

329
00:12:15,519 --> 00:12:18,240
and what it's doing

330
00:12:18,240 --> 00:12:19,279
and

331
00:12:19,279 --> 00:12:21,680
the first step is to observe that the

332
00:12:21,680 --> 00:12:23,600
app works on the local network which

333
00:12:23,600 --> 00:12:26,399
means that the devices have to expose

334
00:12:26,399 --> 00:12:28,720
some sort of network port that we can

335
00:12:28,720 --> 00:12:30,639
talk to

336
00:12:30,639 --> 00:12:32,880
and many of you are probably saying well

337
00:12:32,880 --> 00:12:35,200
let's in-map this device

338
00:12:35,200 --> 00:12:37,440
and it turns out that it exposes one

339
00:12:37,440 --> 00:12:38,399
port

340
00:12:38,399 --> 00:12:40,320
the https port

341
00:12:40,320 --> 00:12:42,880
but when we try to connect to it we get

342
00:12:42,880 --> 00:12:44,000
back a

343
00:12:44,000 --> 00:12:46,560
unhelpful error message from curl that

344
00:12:46,560 --> 00:12:50,399
there is a unknown cipher

345
00:12:50,399 --> 00:12:51,680
so

346
00:12:51,680 --> 00:12:54,399
nmap has another mode called the ssl

347
00:12:54,399 --> 00:12:56,639
enum ciphers that will contact the

348
00:12:56,639 --> 00:12:58,639
server and try to figure out what

349
00:12:58,639 --> 00:13:00,880
ciphers it supports it would have been

350
00:13:00,880 --> 00:13:02,560
nice if carl had just printed this for

351
00:13:02,560 --> 00:13:05,040
us but oh well

352
00:13:05,040 --> 00:13:07,120
and the the cipher suite that comes back

353
00:13:07,120 --> 00:13:11,120
with is all um relatively modern tls12

354
00:13:11,120 --> 00:13:14,160
um and they all have this psk in the

355
00:13:14,160 --> 00:13:15,839
name

356
00:13:15,839 --> 00:13:18,240
i'm a firmware person i'm not really a

357
00:13:18,240 --> 00:13:20,959
web person or a cryptography person

358
00:13:20,959 --> 00:13:23,440
but i still knew exactly what to do i

359
00:13:23,440 --> 00:13:25,920
put psk tls

360
00:13:25,920 --> 00:13:27,680
in into the internet search engine and

361
00:13:27,680 --> 00:13:30,399
got a stack overflow uh post that you

362
00:13:30,399 --> 00:13:31,519
know actually answered all of my

363
00:13:31,519 --> 00:13:35,279
questions about how to do tls with psk

364
00:13:35,279 --> 00:13:37,440
and it explained that psk is a

365
00:13:37,440 --> 00:13:41,839
pre-shared key so that there is a

366
00:13:41,839 --> 00:13:45,120
32 byte random value that the device has

367
00:13:45,120 --> 00:13:46,399
generated

368
00:13:46,399 --> 00:13:48,959
that it is using um

369
00:13:48,959 --> 00:13:50,800
that it shares with the application and

370
00:13:50,800 --> 00:13:53,120
then they use that to authenticate

371
00:13:53,120 --> 00:13:54,959
for the application to be able to prove

372
00:13:54,959 --> 00:13:57,600
to the device that it is authorized to

373
00:13:57,600 --> 00:14:01,600
talk to uh to this appliance

374
00:14:01,600 --> 00:14:04,720
so digging into the man page uh for for

375
00:14:04,720 --> 00:14:07,120
the function that that um that question

376
00:14:07,120 --> 00:14:08,560
mentioned

377
00:14:08,560 --> 00:14:11,760
it said that there is this psk set psk

378
00:14:11,760 --> 00:14:13,360
client callback

379
00:14:13,360 --> 00:14:14,720
method

380
00:14:14,720 --> 00:14:16,480
that takes a

381
00:14:16,480 --> 00:14:18,720
uh a callback function that will be

382
00:14:18,720 --> 00:14:22,320
called when the uh the openssl library

383
00:14:22,320 --> 00:14:24,560
makes a a new connection

384
00:14:24,560 --> 00:14:26,639
and this callback is then responsible

385
00:14:26,639 --> 00:14:30,160
for filling in this psk buffer with that

386
00:14:30,160 --> 00:14:32,000
32 byte value

387
00:14:32,000 --> 00:14:33,760
that's going to be used for

388
00:14:33,760 --> 00:14:36,720
for authentication

389
00:14:36,800 --> 00:14:37,760
so

390
00:14:37,760 --> 00:14:41,279
where does the app get the psk

391
00:14:41,839 --> 00:14:43,360
let's uh let's take that app apart and

392
00:14:43,360 --> 00:14:45,279
see what's going on inside

393
00:14:45,279 --> 00:14:47,120
for this there's a really wonderful tool

394
00:14:47,120 --> 00:14:50,079
called jdx that takes android

395
00:14:50,079 --> 00:14:52,320
applications and

396
00:14:52,320 --> 00:14:54,639
unpacks them into

397
00:14:54,639 --> 00:14:56,880
the class files into

398
00:14:56,880 --> 00:14:59,040
the resources which are like libraries

399
00:14:59,040 --> 00:15:01,839
and images and then it also decompiles

400
00:15:01,839 --> 00:15:03,199
the class files into something that

401
00:15:03,199 --> 00:15:06,000
approximates source code

402
00:15:06,000 --> 00:15:08,240
it has i think you know one of the best

403
00:15:08,240 --> 00:15:10,639
uh command line interfaces of these sort

404
00:15:10,639 --> 00:15:13,360
of tools you just say jadex and the apk

405
00:15:13,360 --> 00:15:16,160
file and it splits it all out into all

406
00:15:16,160 --> 00:15:18,000
of these things really

407
00:15:18,000 --> 00:15:19,199
a

408
00:15:19,199 --> 00:15:22,800
good example of how simple this can be

409
00:15:22,800 --> 00:15:24,800
so digging around in the sources

410
00:15:24,800 --> 00:15:27,120
directory um there's lots of this sort

411
00:15:27,120 --> 00:15:29,600
of decompile java and

412
00:15:29,600 --> 00:15:32,480
most of it is pretty java you know

413
00:15:32,480 --> 00:15:34,480
i'm sure there is a communication proxy

414
00:15:34,480 --> 00:15:36,720
library communicator factory factory

415
00:15:36,720 --> 00:15:38,959
somewhere in this code base

416
00:15:38,959 --> 00:15:42,160
that i think it's called

417
00:15:42,320 --> 00:15:44,560
but most of the sort of interesting

418
00:15:44,560 --> 00:15:47,440
things are all being done in native

419
00:15:47,440 --> 00:15:49,440
functions so

420
00:15:49,440 --> 00:15:51,120
you know gripping through the

421
00:15:51,120 --> 00:15:52,399
through the sources looking for

422
00:15:52,399 --> 00:15:54,079
authentication type things i found this

423
00:15:54,079 --> 00:15:56,399
update auth token but there's no source

424
00:15:56,399 --> 00:15:58,639
code for it here because it's a native

425
00:15:58,639 --> 00:16:00,160
function

426
00:16:00,160 --> 00:16:01,600
which means that

427
00:16:01,600 --> 00:16:05,120
it it actually lives in the resources

428
00:16:05,120 --> 00:16:07,120
library directory

429
00:16:07,120 --> 00:16:08,800
and there are a few of them in there

430
00:16:08,800 --> 00:16:11,120
and i wasn't sure which one to sort of

431
00:16:11,120 --> 00:16:14,480
dig into so i used one of you know my

432
00:16:14,480 --> 00:16:16,000
favorite tools it's a really blunt

433
00:16:16,000 --> 00:16:19,199
hammer but you just run strings on on

434
00:16:19,199 --> 00:16:21,360
some weird binary and it prints all of

435
00:16:21,360 --> 00:16:25,199
the ascii strings that it finds in there

436
00:16:25,199 --> 00:16:27,040
i grabbed it for update auth token and

437
00:16:27,040 --> 00:16:29,839
found that lib hcp service had it i also

438
00:16:29,839 --> 00:16:32,160
then grabbed it for the psk client

439
00:16:32,160 --> 00:16:33,920
function just to see if maybe this is

440
00:16:33,920 --> 00:16:37,120
also involved and it turns out that that

441
00:16:37,120 --> 00:16:40,800
is also in this lib hcp service

442
00:16:40,800 --> 00:16:42,720
it's also the biggest library which is a

443
00:16:42,720 --> 00:16:44,480
pretty good sign that this is uh where

444
00:16:44,480 --> 00:16:45,440
we want to

445
00:16:45,440 --> 00:16:47,600
spend some time digging in

446
00:16:47,600 --> 00:16:48,560
so

447
00:16:48,560 --> 00:16:50,480
it's time for some static analysis of

448
00:16:50,480 --> 00:16:52,000
that library

449
00:16:52,000 --> 00:16:53,600
and for this i turned to another free

450
00:16:53,600 --> 00:16:56,000
tool uh ghidra which is

451
00:16:56,000 --> 00:16:58,079
absolutely amazing it's from the the u.s

452
00:16:58,079 --> 00:16:59,839
national

453
00:16:59,839 --> 00:17:03,519
security administration the nsa it's a

454
00:17:03,519 --> 00:17:06,000
absolutely wonderful reverse engineering

455
00:17:06,000 --> 00:17:09,039
and decompilation tool

456
00:17:09,039 --> 00:17:10,640
maybe they've released it as a honeypot

457
00:17:10,640 --> 00:17:12,559
to get code execution on every security

458
00:17:12,559 --> 00:17:14,400
researcher's machines

459
00:17:14,400 --> 00:17:16,480
i don't know i don't care it's it's

460
00:17:16,480 --> 00:17:19,839
really that good

461
00:17:20,799 --> 00:17:22,959
so when you load a library into geidra

462
00:17:22,959 --> 00:17:25,280
it will scan through it and try to

463
00:17:25,280 --> 00:17:26,799
identify any symbols that might be

464
00:17:26,799 --> 00:17:28,000
exported

465
00:17:28,000 --> 00:17:30,080
and then you can search that symbol

466
00:17:30,080 --> 00:17:32,400
list to find in this case things that

467
00:17:32,400 --> 00:17:34,480
have set psk

468
00:17:34,480 --> 00:17:36,320
and if you double click on one of them

469
00:17:36,320 --> 00:17:39,520
it'll pop up the disassembly of it

470
00:17:39,520 --> 00:17:41,440
and the really useful thing that this

471
00:17:41,440 --> 00:17:44,160
includes is a list of everything that

472
00:17:44,160 --> 00:17:46,559
calls this function

473
00:17:46,559 --> 00:17:48,160
and in this case it's called by

474
00:17:48,160 --> 00:17:51,600
precisely one place called onsecure tls

475
00:17:51,600 --> 00:17:54,480
init which is pretty promising

476
00:17:54,480 --> 00:17:56,160
so if we double click on that it will

477
00:17:56,160 --> 00:17:58,960
take us to the decompiled version and

478
00:17:58,960 --> 00:18:01,039
because this is c plus plus we actually

479
00:18:01,039 --> 00:18:03,520
get uh other interesting things we get

480
00:18:03,520 --> 00:18:05,520
the name space and we get the type

481
00:18:05,520 --> 00:18:07,600
signatures of the arguments to this

482
00:18:07,600 --> 00:18:10,160
function so we see that this is the

483
00:18:10,160 --> 00:18:12,640
websocket manager

484
00:18:12,640 --> 00:18:15,520
class which is again really promising

485
00:18:15,520 --> 00:18:19,520
for making a connection to an https

486
00:18:19,520 --> 00:18:22,080
appliance

487
00:18:22,080 --> 00:18:24,640
we can scroll down uh through the the

488
00:18:24,640 --> 00:18:27,280
decompiled version and find where the

489
00:18:27,280 --> 00:18:30,640
ssl set psk client callback is called

490
00:18:30,640 --> 00:18:33,440
and we see that it's passed client psk

491
00:18:33,440 --> 00:18:34,799
callback

492
00:18:34,799 --> 00:18:36,640
so if we double click on that

493
00:18:36,640 --> 00:18:39,440
again it takes us to the disassembly for

494
00:18:39,440 --> 00:18:43,039
it and we see that it uh it actually has

495
00:18:43,039 --> 00:18:45,360
a kind of a weird name this underscore

496
00:18:45,360 --> 00:18:47,440
zn 3

497
00:18:47,440 --> 00:18:51,360
h cpu not 1 9. that's called a c plus

498
00:18:51,360 --> 00:18:53,520
mangled name and that's what actually

499
00:18:53,520 --> 00:18:55,919
encodes both the the name space as well

500
00:18:55,919 --> 00:18:58,400
as all of the arguments uh argument

501
00:18:58,400 --> 00:19:01,840
types because c plus allows opera allows

502
00:19:01,840 --> 00:19:04,080
function overloading but still has to be

503
00:19:04,080 --> 00:19:06,000
compatible with old-fashioned c linkers

504
00:19:06,000 --> 00:19:09,200
that require every name to be unique

505
00:19:09,200 --> 00:19:10,400
um so

506
00:19:10,400 --> 00:19:12,000
let's uh

507
00:19:12,000 --> 00:19:13,280
we could actually

508
00:19:13,280 --> 00:19:14,880
go through and disassemble the function

509
00:19:14,880 --> 00:19:16,720
and go through the decompilation but it

510
00:19:16,720 --> 00:19:18,640
turns out it's pretty boring

511
00:19:18,640 --> 00:19:20,559
it just ends up fetching something from

512
00:19:20,559 --> 00:19:23,600
a database stored on the phone

513
00:19:23,600 --> 00:19:26,000
to get that key

514
00:19:26,000 --> 00:19:27,760
so rather than

515
00:19:27,760 --> 00:19:29,840
spending more time on that

516
00:19:29,840 --> 00:19:32,400
this calls for some dynamic analysis

517
00:19:32,400 --> 00:19:34,799
that let's actually find out what that

518
00:19:34,799 --> 00:19:37,679
function does when it's running

519
00:19:37,679 --> 00:19:39,919
and for that i turned to another tool

520
00:19:39,919 --> 00:19:42,880
called frida which i learned about at

521
00:19:42,880 --> 00:19:45,200
hack lou a few years ago from

522
00:19:45,200 --> 00:19:48,000
axel upreville's wonderful talk in which

523
00:19:48,000 --> 00:19:48,960
she

524
00:19:48,960 --> 00:19:51,919
showed how to use frida to hook ssl

525
00:19:51,919 --> 00:19:54,320
calls in android applications to be able

526
00:19:54,320 --> 00:19:56,960
to get access to the clear text data

527
00:19:56,960 --> 00:19:59,440
before it gets encrypted or after it has

528
00:19:59,440 --> 00:20:01,440
been decrypted so rather than having to

529
00:20:01,440 --> 00:20:03,760
set up

530
00:20:03,919 --> 00:20:05,440
man-in-the-middle proxies and things

531
00:20:05,440 --> 00:20:06,640
this lets you

532
00:20:06,640 --> 00:20:08,080
instrument the

533
00:20:08,080 --> 00:20:09,520
application

534
00:20:09,520 --> 00:20:11,280
directly

535
00:20:11,280 --> 00:20:14,080
so her talk is really wonderful i highly

536
00:20:14,080 --> 00:20:17,520
recommend it i learned a lot from it

537
00:20:17,520 --> 00:20:20,320
the one downside is that frida does

538
00:20:20,320 --> 00:20:22,720
require a rooted android phone

539
00:20:22,720 --> 00:20:24,320
because it ends up running the

540
00:20:24,320 --> 00:20:25,760
applications essentially under a

541
00:20:25,760 --> 00:20:27,840
debugger this breaks all of the

542
00:20:27,840 --> 00:20:29,760
sandboxing

543
00:20:29,760 --> 00:20:31,039
i have an old

544
00:20:31,039 --> 00:20:33,440
pixel one or two that i've

545
00:20:33,440 --> 00:20:35,280
that i've rooted a long time ago and i

546
00:20:35,280 --> 00:20:36,960
use for a lot of these sorts of things

547
00:20:36,960 --> 00:20:39,039
they're super cheap highly recommended

548
00:20:39,039 --> 00:20:40,880
as a you know to have in your in your

549
00:20:40,880 --> 00:20:43,840
debugging toolkit

550
00:20:43,840 --> 00:20:44,960
so

551
00:20:44,960 --> 00:20:46,159
frida

552
00:20:46,159 --> 00:20:49,039
is a really powerful tool that you write

553
00:20:49,039 --> 00:20:52,799
little scripts in to to hook things so

554
00:20:52,799 --> 00:20:55,679
to find i wrote one called find a psk

555
00:20:55,679 --> 00:20:56,559
um

556
00:20:56,559 --> 00:20:57,760
that

557
00:20:57,760 --> 00:20:58,960
waits

558
00:20:58,960 --> 00:21:00,880
due to some weirdness with library

559
00:21:00,880 --> 00:21:03,760
loading it has to wait a second

560
00:21:03,760 --> 00:21:06,880
and then it hooks with the interceptor

561
00:21:06,880 --> 00:21:10,320
module that zn underscore or underscores

562
00:21:10,320 --> 00:21:13,360
the in three hcp client psk callback

563
00:21:13,360 --> 00:21:14,840
using the mangled

564
00:21:14,840 --> 00:21:16,960
name and then

565
00:21:16,960 --> 00:21:19,840
the on enter method of this uh of this

566
00:21:19,840 --> 00:21:23,360
callback um takes the argument number

567
00:21:23,360 --> 00:21:26,480
four uh to that function and caches it

568
00:21:26,480 --> 00:21:28,720
and it's argument four because remember

569
00:21:28,720 --> 00:21:31,520
we had zero one two three four is the

570
00:21:31,520 --> 00:21:34,320
pointer to the psk buffer that will be

571
00:21:34,320 --> 00:21:37,280
filled in by this callback uh when a

572
00:21:37,280 --> 00:21:39,679
connection is made

573
00:21:39,679 --> 00:21:42,000
and then when the function is done uh

574
00:21:42,000 --> 00:21:44,640
frida will call this on leave

575
00:21:44,640 --> 00:21:47,200
handler and then we use

576
00:21:47,200 --> 00:21:50,000
javascript console.log to print it out

577
00:21:50,000 --> 00:21:50,960
this is

578
00:21:50,960 --> 00:21:52,559
really kind of wonderful that we've

579
00:21:52,559 --> 00:21:54,240
we've brought printf debugging and

580
00:21:54,240 --> 00:21:56,799
console.log debugging you know to uh to

581
00:21:56,799 --> 00:21:59,039
reverse engineering and android apps

582
00:21:59,039 --> 00:22:02,480
it's really a powerful way to uh to poke

583
00:22:02,480 --> 00:22:04,240
at things and just quickly see what's

584
00:22:04,240 --> 00:22:06,159
happening

585
00:22:06,159 --> 00:22:08,480
so here's a quick video to show you know

586
00:22:08,480 --> 00:22:12,640
sort of how this works in practice um

587
00:22:12,640 --> 00:22:15,520
so i run frida with my script you can

588
00:22:15,520 --> 00:22:17,280
see it starts the home connect app on

589
00:22:17,280 --> 00:22:20,080
the phone the app contacts the server

590
00:22:20,080 --> 00:22:21,679
and then

591
00:22:21,679 --> 00:22:23,600
the freda

592
00:22:23,600 --> 00:22:26,720
on leave handler console.logs.p

593
00:22:26,720 --> 00:22:31,280
that zero e c81f whatever

594
00:22:31,760 --> 00:22:33,280
and then we can

595
00:22:33,280 --> 00:22:35,360
use openssl client to

596
00:22:35,360 --> 00:22:37,360
make a connection back to the phone

597
00:22:37,360 --> 00:22:38,960
excuse me back to the appliance to make

598
00:22:38,960 --> 00:22:42,240
sure things work and it does

599
00:22:42,240 --> 00:22:44,000
so

600
00:22:44,000 --> 00:22:47,039
this is uh

601
00:22:47,120 --> 00:22:49,360
running the find psk and then there's

602
00:22:49,360 --> 00:22:52,080
the psk that has been logged by our

603
00:22:52,080 --> 00:22:55,320
little handler

604
00:22:55,679 --> 00:22:57,120
and as you saw it just took you know

605
00:22:57,120 --> 00:22:58,320
basically a second because as soon as

606
00:22:58,320 --> 00:23:00,159
the application starts up it tries to

607
00:23:00,159 --> 00:23:02,080
con next to the appliance that method

608
00:23:02,080 --> 00:23:03,280
gets called

609
00:23:03,280 --> 00:23:05,919
exactly that callback gets called in the

610
00:23:05,919 --> 00:23:09,440
app we then print it out and

611
00:23:09,440 --> 00:23:11,760
we can make use of it with

612
00:23:11,760 --> 00:23:15,280
openssl client in psk mode we can pass

613
00:23:15,280 --> 00:23:18,720
in that big psk buffer

614
00:23:18,720 --> 00:23:21,600
and it negotiates the cipher and now we

615
00:23:21,600 --> 00:23:24,159
are talking to the um

616
00:23:24,159 --> 00:23:25,919
to the appliance directly

617
00:23:25,919 --> 00:23:27,039
this is

618
00:23:27,039 --> 00:23:28,720
in in most sort of reverse engineering

619
00:23:28,720 --> 00:23:31,360
sort of terms this is you know a huge

620
00:23:31,360 --> 00:23:34,080
win we now have a secret we've

621
00:23:34,080 --> 00:23:36,559
established communication

622
00:23:36,559 --> 00:23:37,360
so

623
00:23:37,360 --> 00:23:39,600
what's next we just you know

624
00:23:39,600 --> 00:23:40,960
do everything else

625
00:23:40,960 --> 00:23:43,520
draw the rest of the owl

626
00:23:43,520 --> 00:23:45,039
and i say that

627
00:23:45,039 --> 00:23:46,960
kind of flippantly because so much of

628
00:23:46,960 --> 00:23:49,200
reverse engineering is about just

629
00:23:49,200 --> 00:23:51,919
hitting dead ends um my favorite quote

630
00:23:51,919 --> 00:23:53,440
about this comes from matthew garrett

631
00:23:53,440 --> 00:23:55,280
who's possibly one of the best uh

632
00:23:55,280 --> 00:23:57,039
reverse engineers that i know

633
00:23:57,039 --> 00:23:59,039
and you know

634
00:23:59,039 --> 00:24:00,880
it's not about being good with computers

635
00:24:00,880 --> 00:24:03,360
it's about being bad at giving up that

636
00:24:03,360 --> 00:24:05,520
anytime you spend

637
00:24:05,520 --> 00:24:07,520
reverse engineering you're going to run

638
00:24:07,520 --> 00:24:09,919
into dead ends you're going to hit

639
00:24:09,919 --> 00:24:11,440
things that seem like

640
00:24:11,440 --> 00:24:13,279
you know that didn't work or worse

641
00:24:13,279 --> 00:24:14,880
you're going to spend days reverse

642
00:24:14,880 --> 00:24:16,559
engineering a big function and then find

643
00:24:16,559 --> 00:24:19,039
out that it's never actually called uh

644
00:24:19,039 --> 00:24:21,440
in practice um

645
00:24:21,440 --> 00:24:22,960
and having the perseverance to be like

646
00:24:22,960 --> 00:24:25,360
okay what are the small victories that

647
00:24:25,360 --> 00:24:27,760
we can celebrate you know making that

648
00:24:27,760 --> 00:24:30,559
psk connection uh was a

649
00:24:30,559 --> 00:24:32,559
for me was a huge relief because it

650
00:24:32,559 --> 00:24:33,360
meant

651
00:24:33,360 --> 00:24:36,159
that from then on you know i knew that i

652
00:24:36,159 --> 00:24:38,159
had accomplished something

653
00:24:38,159 --> 00:24:41,600
and i could keep moving forward so

654
00:24:41,600 --> 00:24:42,960
you know

655
00:24:42,960 --> 00:24:44,080
if you want to get into reverse

656
00:24:44,080 --> 00:24:46,080
engineering and the sort of thing that's

657
00:24:46,080 --> 00:24:48,400
that's my number one advice is don't get

658
00:24:48,400 --> 00:24:50,159
discouraged when things don't work they

659
00:24:50,159 --> 00:24:52,480
never work all of these talks about

660
00:24:52,480 --> 00:24:53,919
reverse engineering

661
00:24:53,919 --> 00:24:56,720
or security follow

662
00:24:56,720 --> 00:24:58,880
sort of the garden path that people took

663
00:24:58,880 --> 00:25:02,159
as they uh as they did their project

664
00:25:02,159 --> 00:25:04,159
they don't talk about all the dead ends

665
00:25:04,159 --> 00:25:05,840
they they talk about here's the result

666
00:25:05,840 --> 00:25:09,279
where i got to things working

667
00:25:09,279 --> 00:25:11,679
and sort of backtrack to the start from

668
00:25:11,679 --> 00:25:14,559
there rather than showing you the actual

669
00:25:14,559 --> 00:25:15,840
path which was

670
00:25:15,840 --> 00:25:17,600
staring at hex dumps for six hours

671
00:25:17,600 --> 00:25:19,360
trying to figure out you know

672
00:25:19,360 --> 00:25:20,799
where did this come from what does this

673
00:25:20,799 --> 00:25:22,400
mean

674
00:25:22,400 --> 00:25:24,159
um

675
00:25:24,159 --> 00:25:27,279
so again the the quick uh if you just

676
00:25:27,279 --> 00:25:29,200
want to use it

677
00:25:29,200 --> 00:25:30,640
if you want to just use the the home

678
00:25:30,640 --> 00:25:32,799
connect to mqtt stuff you don't need to

679
00:25:32,799 --> 00:25:34,799
know any of that all you need to do is

680
00:25:34,799 --> 00:25:36,080
clone the tree

681
00:25:36,080 --> 00:25:38,880
log in with your credentials and then

682
00:25:38,880 --> 00:25:41,440
connect it to your mqtt server

683
00:25:41,440 --> 00:25:43,279
there's still a lot of things that could

684
00:25:43,279 --> 00:25:45,840
be done documentation as always on these

685
00:25:45,840 --> 00:25:47,760
reverse engineering projects is not

686
00:25:47,760 --> 00:25:50,159
super it it would be wonderful if uh

687
00:25:50,159 --> 00:25:51,039
folks

688
00:25:51,039 --> 00:25:53,200
you know can help document how they did

689
00:25:53,200 --> 00:25:54,640
their setups and how

690
00:25:54,640 --> 00:25:57,039
what worked for them right now device

691
00:25:57,039 --> 00:26:00,320
control is a little limited we can

692
00:26:00,320 --> 00:26:02,320
we're really good at taking the data

693
00:26:02,320 --> 00:26:03,600
from the devices and being able to

694
00:26:03,600 --> 00:26:06,959
display it on the dashboards

695
00:26:07,200 --> 00:26:09,440
it would also be really nice if anybody

696
00:26:09,440 --> 00:26:11,120
here from the home assistant community

697
00:26:11,120 --> 00:26:12,960
wants to actually try to integrate this

698
00:26:12,960 --> 00:26:15,120
into the real home assistant plugin

699
00:26:15,120 --> 00:26:16,720
so rather than have it as a standalone

700
00:26:16,720 --> 00:26:17,679
tool

701
00:26:17,679 --> 00:26:19,600
and there's also there are more devices

702
00:26:19,600 --> 00:26:21,360
out there that if you have a bosch

703
00:26:21,360 --> 00:26:24,320
siemens device and you have success in

704
00:26:24,320 --> 00:26:26,240
in talking to it with this please send

705
00:26:26,240 --> 00:26:28,159
us a pull request with any changes you

706
00:26:28,159 --> 00:26:30,159
you had to make or at least just

707
00:26:30,159 --> 00:26:31,600
the documentation to let us know that it

708
00:26:31,600 --> 00:26:33,840
worked for you

709
00:26:33,840 --> 00:26:34,960
so

710
00:26:34,960 --> 00:26:38,799
that's the the quick overview of how i

711
00:26:38,799 --> 00:26:40,400
set up my home connect appliances to

712
00:26:40,400 --> 00:26:42,159
work without the cloud

713
00:26:42,159 --> 00:26:43,679
the the talk and the slides are

714
00:26:43,679 --> 00:26:47,039
available from my website on trm.net and

715
00:26:47,039 --> 00:26:49,200
again all the sources up on github

716
00:26:49,200 --> 00:26:51,279
and i would love to answer any questions

717
00:26:51,279 --> 00:26:52,720
that you all might have about the

718
00:26:52,720 --> 00:26:55,679
process or the tools or you know just a

719
00:26:55,679 --> 00:26:58,750
home automation in general thank you

720
00:26:58,750 --> 00:27:09,730
[Applause]

721
00:27:09,760 --> 00:27:11,279
see if they might oh it's working

722
00:27:11,279 --> 00:27:12,240
awesome

723
00:27:12,240 --> 00:27:14,240
so i think it's fun because i have this

724
00:27:14,240 --> 00:27:16,400
uh washing machine that was on your

725
00:27:16,400 --> 00:27:17,440
first slide

726
00:27:17,440 --> 00:27:19,039
i tried to connect it's the wi-fi it

727
00:27:19,039 --> 00:27:20,799
actually fails so then i didn't feel

728
00:27:20,799 --> 00:27:22,720
that necessary to to connect it but now

729
00:27:22,720 --> 00:27:24,960
i'm i'm also

730
00:27:24,960 --> 00:27:27,120
an avid home assistant user so i'm

731
00:27:27,120 --> 00:27:28,480
actually going to go home and play with

732
00:27:28,480 --> 00:27:31,200
this and i think if we get this video

733
00:27:31,200 --> 00:27:33,840
edited and nicely done today i'll just

734
00:27:33,840 --> 00:27:35,360
drop it in the home assistant discord

735
00:27:35,360 --> 00:27:37,120
server oh excellent

736
00:27:37,120 --> 00:27:38,240
and hopefully somebody from home

737
00:27:38,240 --> 00:27:39,840
assistant would be interested because

738
00:27:39,840 --> 00:27:41,919
home assistant is an amazing tool uh

739
00:27:41,919 --> 00:27:43,120
with integrations for absolutely

740
00:27:43,120 --> 00:27:45,600
everything um but right now the home

741
00:27:45,600 --> 00:27:47,919
connect plug-in does require the cloud

742
00:27:47,919 --> 00:27:49,440
so being able to eliminate that would be

743
00:27:49,440 --> 00:27:52,080
a really wonderful thing yeah we have to

744
00:27:52,080 --> 00:27:54,159
have this before they issue a firmware

745
00:27:54,159 --> 00:27:55,840
update to somehow change this so that

746
00:27:55,840 --> 00:27:57,440
doesn't work anymore

747
00:27:57,440 --> 00:27:58,399
this is

748
00:27:58,399 --> 00:28:00,640
so you're talking about you know we all

749
00:28:00,640 --> 00:28:01,919
the home appliances need firmware

750
00:28:01,919 --> 00:28:03,679
updates for some reason right now

751
00:28:03,679 --> 00:28:05,039
they're going to need a firmware update

752
00:28:05,039 --> 00:28:06,000
to

753
00:28:06,000 --> 00:28:07,679
if they want to plug the well if you

754
00:28:07,679 --> 00:28:10,159
switch into no cloud mode exactly

755
00:28:10,159 --> 00:28:12,480
the firmware updates and and it'll be

756
00:28:12,480 --> 00:28:15,200
your machine forever yeah so we need to

757
00:28:15,200 --> 00:28:17,200
do it quickly then before they start

758
00:28:17,200 --> 00:28:19,200
changing it around too much

759
00:28:19,200 --> 00:28:21,840
uh and everybody that owns a

760
00:28:21,840 --> 00:28:24,080
bosch coffee machine now has one extra

761
00:28:24,080 --> 00:28:26,880
puzzle to solve i guess

762
00:28:26,880 --> 00:28:28,880
one extra challenge to do because i'm

763
00:28:28,880 --> 00:28:30,880
i'm sure there's a lot of fun stuff

764
00:28:30,880 --> 00:28:33,120
inside here i mean you you've actually

765
00:28:33,120 --> 00:28:35,360
been trying to use this

766
00:28:35,360 --> 00:28:37,600
for useful things i'm sure you can also

767
00:28:37,600 --> 00:28:40,399
try to find more stuff in there now

768
00:28:40,399 --> 00:28:44,559
yes yeah there's the the xml files have

769
00:28:44,559 --> 00:28:46,480
you know list out all of the the sort of

770
00:28:46,480 --> 00:28:48,159
commands and things that the devices

771
00:28:48,159 --> 00:28:51,039
support sometimes they are

772
00:28:51,039 --> 00:28:53,200
in the app sometimes not

773
00:28:53,200 --> 00:28:54,480
one of

774
00:28:54,480 --> 00:28:56,159
the ones that i found that is actually

775
00:28:56,159 --> 00:28:58,480
really useful is to turn off the boot

776
00:28:58,480 --> 00:29:01,279
logo on the uh on the bosch oven that

777
00:29:01,279 --> 00:29:02,799
right now when you or the semen's oven

778
00:29:02,799 --> 00:29:04,399
when you turn on it displays the logo

779
00:29:04,399 --> 00:29:06,320
for like five seconds and you just want

780
00:29:06,320 --> 00:29:09,440
to hit the bake button and

781
00:29:09,440 --> 00:29:10,720
by turning that off it now boots

782
00:29:10,720 --> 00:29:13,120
immediately to the menu which is a nice

783
00:29:13,120 --> 00:29:15,039
option to have

784
00:29:15,039 --> 00:29:17,120
cool awesome do we have any questions

785
00:29:17,120 --> 00:29:19,840
from the slido yes we do have some

786
00:29:19,840 --> 00:29:23,520
questions from slido um and one of them

787
00:29:23,520 --> 00:29:25,760
is what happens did you try the empty

788
00:29:25,760 --> 00:29:28,960
cypher suite and what happened

789
00:29:28,960 --> 00:29:29,760
because

790
00:29:29,760 --> 00:29:32,080
you know that's a really good question

791
00:29:32,080 --> 00:29:34,320
i did not i didn't i didn't even notice

792
00:29:34,320 --> 00:29:35,760
it until i was putting the slides

793
00:29:35,760 --> 00:29:40,000
together that that that was an option

794
00:29:40,000 --> 00:29:41,200
okay

795
00:29:41,200 --> 00:29:43,679
next question uh what does actually bosh

796
00:29:43,679 --> 00:29:45,600
think about you publishing all this open

797
00:29:45,600 --> 00:29:48,480
source on gitlab or github

798
00:29:48,480 --> 00:29:50,240
i haven't heard anything from them

799
00:29:50,240 --> 00:29:51,679
directly yet

800
00:29:51,679 --> 00:29:53,520
i would love to

801
00:29:53,520 --> 00:29:55,600
have a conversation with them about

802
00:29:55,600 --> 00:29:57,679
having this as a

803
00:29:57,679 --> 00:30:00,000
supported way to connect to the devices

804
00:30:00,000 --> 00:30:03,520
again they have their cloud api which is

805
00:30:03,520 --> 00:30:06,000
really nice that they've

806
00:30:06,000 --> 00:30:07,520
that they've provided a way for people

807
00:30:07,520 --> 00:30:09,760
to write integrations that go through

808
00:30:09,760 --> 00:30:12,480
their servers uh to to control and

809
00:30:12,480 --> 00:30:14,399
monitor their appliances

810
00:30:14,399 --> 00:30:15,440
but

811
00:30:15,440 --> 00:30:18,000
but given that they they have the no

812
00:30:18,000 --> 00:30:20,320
cloud mode in the app i would love for

813
00:30:20,320 --> 00:30:22,480
this to be an official uh supported way

814
00:30:22,480 --> 00:30:25,360
to interact with it

815
00:30:25,360 --> 00:30:27,600
okay i have some more really good

816
00:30:27,600 --> 00:30:29,200
questions and

817
00:30:29,200 --> 00:30:31,600
i must say it was a very good talk

818
00:30:31,600 --> 00:30:33,279
because it walked through how you do

819
00:30:33,279 --> 00:30:34,880
reverse engineering and a lot of talks

820
00:30:34,880 --> 00:30:37,760
that we get you see the end result

821
00:30:37,760 --> 00:30:39,360
but one of the questions regarding that

822
00:30:39,360 --> 00:30:41,279
how much time did it look very easy in

823
00:30:41,279 --> 00:30:42,720
your presentation how much time did you

824
00:30:42,720 --> 00:30:46,159
spend on dead ends uh lots um

825
00:30:46,159 --> 00:30:48,159
you know the i spent a lot of time

826
00:30:48,159 --> 00:30:50,399
digging through the java source code uh

827
00:30:50,399 --> 00:30:52,480
try of the application trying to figure

828
00:30:52,480 --> 00:30:53,600
out

829
00:30:53,600 --> 00:30:54,480
how

830
00:30:54,480 --> 00:30:56,080
these keys were managed and how they

831
00:30:56,080 --> 00:30:58,880
were dealt with um before i realized

832
00:30:58,880 --> 00:31:01,679
that oh these are all native functions

833
00:31:01,679 --> 00:31:03,600
that if i had no

834
00:31:03,600 --> 00:31:05,840
this is a good example of what i meant

835
00:31:05,840 --> 00:31:06,640
when

836
00:31:06,640 --> 00:31:08,559
these talks show the garden path to the

837
00:31:08,559 --> 00:31:11,760
end result um uh so yes i spent a lot of

838
00:31:11,760 --> 00:31:13,840
time digging through that source code

839
00:31:13,840 --> 00:31:15,600
trying to figure out you know which java

840
00:31:15,600 --> 00:31:17,760
function contacts their server i tried

841
00:31:17,760 --> 00:31:19,520
instrumenting all of the different

842
00:31:19,520 --> 00:31:21,200
functions for

843
00:31:21,200 --> 00:31:24,480
the android ssl libraries before or the

844
00:31:24,480 --> 00:31:26,880
java ssl libraries before realizing that

845
00:31:26,880 --> 00:31:29,200
they were all in that native uh in that

846
00:31:29,200 --> 00:31:31,520
native library

847
00:31:31,520 --> 00:31:34,559
uh the next relevant question which i

848
00:31:34,559 --> 00:31:36,399
didn't think of asking came from slido

849
00:31:36,399 --> 00:31:37,760
as well this

850
00:31:37,760 --> 00:31:40,399
pre-shared key is that generated by the

851
00:31:40,399 --> 00:31:42,799
app so it's like one per household or is

852
00:31:42,799 --> 00:31:44,960
that a global secret

853
00:31:44,960 --> 00:31:48,320
it is uh i'm not 100 positive but my

854
00:31:48,320 --> 00:31:49,679
understanding

855
00:31:49,679 --> 00:31:51,919
of it appears it is generated on the

856
00:31:51,919 --> 00:31:54,880
device when a new owner resets the

857
00:31:54,880 --> 00:31:57,760
device so if you sel which is really the

858
00:31:57,760 --> 00:32:00,159
good plan so that if you sell

859
00:32:00,159 --> 00:32:02,240
the appliance to someone else

860
00:32:02,240 --> 00:32:04,320
when they reset the device it generates

861
00:32:04,320 --> 00:32:06,880
a new key so you will not be able to

862
00:32:06,880 --> 00:32:08,080
control

863
00:32:08,080 --> 00:32:10,799
you know the device that you've resold

864
00:32:10,799 --> 00:32:11,679
that

865
00:32:11,679 --> 00:32:13,760
it does require that the device then be

866
00:32:13,760 --> 00:32:16,640
able to contact the bosch servers

867
00:32:16,640 --> 00:32:19,600
to deliver that key

868
00:32:19,600 --> 00:32:21,600
so that they can associate it with the

869
00:32:21,600 --> 00:32:22,960
account

870
00:32:22,960 --> 00:32:25,120
that way when your phone

871
00:32:25,120 --> 00:32:26,880
when the phone app or the hc login

872
00:32:26,880 --> 00:32:29,200
program contacts their servers to ask

873
00:32:29,200 --> 00:32:30,960
what appliances are on there it's able

874
00:32:30,960 --> 00:32:34,960
to return those keys to it

875
00:32:34,960 --> 00:32:36,799
okay cool so with that we hope that it

876
00:32:36,799 --> 00:32:39,039
doesn't support the no cipher suite

877
00:32:39,039 --> 00:32:40,640
thing what's that then we hope that it

878
00:32:40,640 --> 00:32:43,039
doesn't support no cyphers i guess then

879
00:32:43,039 --> 00:32:45,760
that's yeah well and certainly um the

880
00:32:45,760 --> 00:32:48,000
the http based ones

881
00:32:48,000 --> 00:32:50,559
are essentially a null cipher suite

882
00:32:50,559 --> 00:32:53,279
but they in that case they are doing aes

883
00:32:53,279 --> 00:32:55,120
cbc um

884
00:32:55,120 --> 00:32:57,840
they're hmacking uh and they're doing it

885
00:32:57,840 --> 00:33:00,480
in both directions with uh keys derived

886
00:33:00,480 --> 00:33:03,519
from a key derivation key so this is

887
00:33:03,519 --> 00:33:05,919
good cryptography that they're doing on

888
00:33:05,919 --> 00:33:08,720
the websocket even over http

889
00:33:08,720 --> 00:33:11,039
fair enough i mean it feels like

890
00:33:11,039 --> 00:33:13,760
actually an ad for

891
00:33:13,760 --> 00:33:15,679
for the bosch appliances at this point

892
00:33:15,679 --> 00:33:17,039
it's like okay so maybe i get more of

893
00:33:17,039 --> 00:33:19,200
them

894
00:33:20,000 --> 00:33:20,880
so

895
00:33:20,880 --> 00:33:22,960
somebody asked my psk question because

896
00:33:22,960 --> 00:33:24,559
that was like the first thing that i was

897
00:33:24,559 --> 00:33:25,919
scratching my head about but the other

898
00:33:25,919 --> 00:33:27,120
thing that it was scratching my head

899
00:33:27,120 --> 00:33:29,760
about was also like the oauth

900
00:33:29,760 --> 00:33:31,840
sort of because you mentioned that is

901
00:33:31,840 --> 00:33:34,159
this using oauth extensively for a lot

902
00:33:34,159 --> 00:33:36,880
of the like authentication

903
00:33:36,880 --> 00:33:39,760
the oauth is used by the app

904
00:33:39,760 --> 00:33:42,559
to contact the servers um

905
00:33:42,559 --> 00:33:45,440
to receive the bearer token uh that then

906
00:33:45,440 --> 00:33:48,080
is used to contact their api servers

907
00:33:48,080 --> 00:33:50,000
um so it is

908
00:33:50,000 --> 00:33:51,600
the devices themselves are not doing

909
00:33:51,600 --> 00:33:53,840
oauth this is just purely on the outside

910
00:33:53,840 --> 00:33:56,000
of things

911
00:33:56,000 --> 00:33:57,039
and

912
00:33:57,039 --> 00:33:58,720
that was actually a reverse engineering

913
00:33:58,720 --> 00:34:00,880
process as well that involved hooking

914
00:34:00,880 --> 00:34:02,080
the

915
00:34:02,080 --> 00:34:04,559
the invocation of

916
00:34:04,559 --> 00:34:07,679
the chrome mini browser from the app to

917
00:34:07,679 --> 00:34:10,159
find out what page is it fetching and

918
00:34:10,159 --> 00:34:12,560
what does it send into uh for that

919
00:34:12,560 --> 00:34:14,079
authentication

920
00:34:14,079 --> 00:34:15,839
the one other thing is

921
00:34:15,839 --> 00:34:20,839
is uh how well do they wrap the oauth

922
00:34:21,280 --> 00:34:22,960
i mean is it something where they are

923
00:34:22,960 --> 00:34:23,918
actually

924
00:34:23,918 --> 00:34:26,879
is it somewhat open inside that psk

925
00:34:26,879 --> 00:34:28,960
conversation or is it

926
00:34:28,960 --> 00:34:30,480
is it something that's properly

927
00:34:30,480 --> 00:34:32,960
encrypted inside that conversation oh

928
00:34:32,960 --> 00:34:35,040
the oauth conversation is all over uh

929
00:34:35,040 --> 00:34:38,480
ssl um from from the app

930
00:34:38,480 --> 00:34:40,159
using it it invokes the chrome mini

931
00:34:40,159 --> 00:34:42,320
browser which then does ssl to the bosh

932
00:34:42,320 --> 00:34:44,560
servers to the to do the uh the oauth

933
00:34:44,560 --> 00:34:47,440
flow so that that is all uh encrypted

934
00:34:47,440 --> 00:34:50,239
with the transport security

935
00:34:50,239 --> 00:34:51,918
i do not know if they're doing key

936
00:34:51,918 --> 00:34:54,079
pinning which is something that a lot of

937
00:34:54,079 --> 00:34:56,320
apps do

938
00:34:56,320 --> 00:34:57,599
that is

939
00:34:57,599 --> 00:34:59,760
this is one case where frida is really

940
00:34:59,760 --> 00:35:02,240
powerful because you get access to the

941
00:35:02,240 --> 00:35:04,160
clear text data

942
00:35:04,160 --> 00:35:05,839
either before it goes into the ssl

943
00:35:05,839 --> 00:35:07,839
library or after it comes out which

944
00:35:07,839 --> 00:35:09,520
means you don't care about key pinning

945
00:35:09,520 --> 00:35:11,520
because you you've been able to contact

946
00:35:11,520 --> 00:35:14,720
the real server

947
00:35:15,760 --> 00:35:17,920
okay thank you very much do we have any

948
00:35:17,920 --> 00:35:20,079
more questions from the audience

949
00:35:20,079 --> 00:35:21,760
i'm standing here with the mic it's a

950
00:35:21,760 --> 00:35:23,839
big room but i'll try to run around if

951
00:35:23,839 --> 00:35:25,760
you raise your hands high up if you have

952
00:35:25,760 --> 00:35:27,680
any questions no

953
00:35:27,680 --> 00:35:28,640
all right

954
00:35:28,640 --> 00:35:31,040
so then we actually have good time until

955
00:35:31,040 --> 00:35:32,880
the next talk first of all thank you

956
00:35:32,880 --> 00:35:34,480
very much trammell

957
00:35:34,480 --> 00:35:37,640
thank you

