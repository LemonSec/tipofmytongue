1
00:00:05,380 --> 00:00:13,120
so just by a show of hands how many have

2
00:00:09,349 --> 00:00:17,029
used Wireshark to decode HTTP protocol

3
00:00:13,120 --> 00:00:19,640
okay how many of us wash our to decode

4
00:00:17,029 --> 00:00:24,019
or decrypt SSL traffic for example with

5
00:00:19,640 --> 00:00:28,159
RSA keys or SSL key log files hands up

6
00:00:24,019 --> 00:00:30,560
okay few cool how many have used an

7
00:00:28,159 --> 00:00:36,320
intercepting proxy like burp or fiddler

8
00:00:30,560 --> 00:00:36,739
or Charles proxy to decrypt SSL okay

9
00:00:36,320 --> 00:00:41,840
cool

10
00:00:36,740 --> 00:00:43,490
so I've tried all of these stuff because

11
00:00:41,840 --> 00:00:49,490
what I want to do is I'm going to

12
00:00:43,490 --> 00:00:51,410
analyze malgo traffic that might use SSL

13
00:00:49,490 --> 00:00:54,740
encryption and invite you on HTTP to

14
00:00:51,410 --> 00:00:56,959
inside SSL encryption all this failed as

15
00:00:54,740 --> 00:01:00,590
so what I ended up doing is writing my

16
00:00:56,960 --> 00:01:02,510
own proxy that's actually do this so I'm

17
00:01:00,590 --> 00:01:04,909
gonna demo that and so this will be live

18
00:01:02,510 --> 00:01:12,170
demo so I have no idea if it's gonna

19
00:01:04,909 --> 00:01:13,900
work or not but you just will hope so

20
00:01:12,170 --> 00:01:18,159
it's running like a systemd

21
00:01:13,900 --> 00:01:18,159
daemon at the moment so let's see

22
00:01:27,720 --> 00:01:30,679
sorry

23
00:01:36,670 --> 00:01:43,220
okay good so it's up and running and

24
00:01:39,200 --> 00:01:45,290
what it does it's intercepting traffic

25
00:01:43,220 --> 00:01:48,920
that's going to port four for three its

26
00:01:45,290 --> 00:01:50,510
decrypting it and Riaan crypting it but

27
00:01:48,920 --> 00:01:53,810
while it's decrypting it

28
00:01:50,510 --> 00:01:56,090
it also takes an uncreated traffic and

29
00:01:53,810 --> 00:01:59,350
stores it in pcap files and the pickup

30
00:01:56,090 --> 00:02:00,520
files are located in this location

31
00:01:59,350 --> 00:02:04,449
[Music]

32
00:02:00,520 --> 00:02:04,450
so let's look what's there

33
00:02:04,570 --> 00:02:08,570
so all these pickup Falls it

34
00:02:07,130 --> 00:02:12,170
automatically creates a new peak at file

35
00:02:08,570 --> 00:02:13,940
everywhere every hour but that's no fun

36
00:02:12,170 --> 00:02:15,410
for demo so what I'm gonna do right now

37
00:02:13,940 --> 00:02:18,470
I'm gonna stop this service and I'm

38
00:02:15,410 --> 00:02:21,640
gonna stream the peak up data real time

39
00:02:18,470 --> 00:02:21,640
to Wireshark instead

40
00:02:35,380 --> 00:02:41,150
like this so right now pull up Roxy pull

41
00:02:38,930 --> 00:02:43,430
up rocks is the name of the tool

42
00:02:41,150 --> 00:02:45,920
it's intercepting traffic on port 443

43
00:02:43,430 --> 00:02:47,990
and then just piping and stuff how to

44
00:02:45,920 --> 00:02:50,530
stand it out and Wireshark will be

45
00:02:47,990 --> 00:02:53,510
reading peak updater from standard input

46
00:02:50,530 --> 00:02:57,850
so now I need to generate some SSL

47
00:02:53,510 --> 00:02:57,850
traffic so let's start a browser

48
00:03:07,130 --> 00:03:12,590
so I'm just gonna show you that I don't

49
00:03:10,640 --> 00:03:17,420
have any proxy setting in the browser

50
00:03:12,590 --> 00:03:20,270
and because the proxy is running like a

51
00:03:17,420 --> 00:03:22,519
transparent proxy and that's important

52
00:03:20,270 --> 00:03:25,070
because if you can intercept malware or

53
00:03:22,520 --> 00:03:28,490
for example you know intercept the

54
00:03:25,070 --> 00:03:30,260
traffic from an app on your phone you

55
00:03:28,490 --> 00:03:32,030
don't want to need you have no ability

56
00:03:30,260 --> 00:03:34,310
to configure that that but I cannot

57
00:03:32,030 --> 00:03:35,750
configure the malware to use my proxy so

58
00:03:34,310 --> 00:03:37,670
it has to be transparent proxies or

59
00:03:35,750 --> 00:03:38,210
anything that just tries to go to 443 on

60
00:03:37,670 --> 00:03:40,880
the Internet

61
00:03:38,210 --> 00:03:43,730
it's gonna has to be forced to go

62
00:03:40,880 --> 00:03:50,180
through the proxy so you see no proxy in

63
00:03:43,730 --> 00:03:54,380
Firefox and so I'm gonna open a website

64
00:03:50,180 --> 00:03:57,230
this is my company natural sack and I

65
00:03:54,380 --> 00:03:59,480
can scroll down this is my software

66
00:03:57,230 --> 00:04:01,369
polar proxy that's what I'm talking

67
00:03:59,480 --> 00:04:05,600
about today so this is a free tool that

68
00:04:01,370 --> 00:04:07,430
you can download from this side so this

69
00:04:05,600 --> 00:04:10,250
describes what it does you have a client

70
00:04:07,430 --> 00:04:12,230
that's HTTP and for the parts of the

71
00:04:10,250 --> 00:04:15,320
crips it's and re-encrypt it but then

72
00:04:12,230 --> 00:04:16,880
pushes HTTP to a pcap file but it

73
00:04:15,320 --> 00:04:18,769
doesn't have to be h best it can be

74
00:04:16,880 --> 00:04:25,430
anything it runs over ssl and it will

75
00:04:18,769 --> 00:04:29,750
decrypt it for you so let's look at the

76
00:04:25,430 --> 00:04:33,170
logs polar proxy will create some logs

77
00:04:29,750 --> 00:04:36,200
for you so we will see natural calm here

78
00:04:33,170 --> 00:04:38,810
it's being encrypted right but we also

79
00:04:36,200 --> 00:04:40,159
see traffic to mozilla.com so it seems

80
00:04:38,810 --> 00:04:43,190
like the browser's doing something in

81
00:04:40,160 --> 00:04:45,370
the background let's see if we can find

82
00:04:43,190 --> 00:04:45,370
it here

83
00:04:55,230 --> 00:04:58,070
oh sorry

84
00:04:59,140 --> 00:05:04,960
laris so the browser's doing something

85
00:05:02,170 --> 00:05:06,700
in the background you normally not see

86
00:05:04,960 --> 00:05:09,580
this because it's encrypted but now we

87
00:05:06,700 --> 00:05:11,920
see it's unencrypted traffic to go into

88
00:05:09,580 --> 00:05:13,599
port 80 instead of 443 and you can see

89
00:05:11,920 --> 00:05:16,270
it actually sent some data about my

90
00:05:13,600 --> 00:05:17,830
client I am giving a unique client ID

91
00:05:16,270 --> 00:05:19,630
that I always have the same ID

92
00:05:17,830 --> 00:05:21,190
regardless where I connect from my

93
00:05:19,630 --> 00:05:23,500
client will have the same unique ID so

94
00:05:21,190 --> 00:05:25,830
far so Mozilla can't can they collect

95
00:05:23,500 --> 00:05:28,210
data about me and my browsing activities

96
00:05:25,830 --> 00:05:31,000
I'm not haven't really investigating

97
00:05:28,210 --> 00:05:35,979
what what type of data they collect but

98
00:05:31,000 --> 00:05:38,440
you know it's there one more thing I'd

99
00:05:35,980 --> 00:05:40,440
like to show you is that you can see

100
00:05:38,440 --> 00:05:43,570
that Firefox thinks is certificates are

101
00:05:40,440 --> 00:05:46,570
correct because it's verified by polar

102
00:05:43,570 --> 00:05:50,020
proxy root certificate so I had to of

103
00:05:46,570 --> 00:05:53,950
course trust this root cert error to get

104
00:05:50,020 --> 00:05:55,870
the decryption working and if you look

105
00:05:53,950 --> 00:05:57,070
at the certificate what polar proxy does

106
00:05:55,870 --> 00:05:59,290
is that every time you visit the website

107
00:05:57,070 --> 00:06:01,510
it will automatically generate a new

108
00:05:59,290 --> 00:06:04,000
certificate for you which will be

109
00:06:01,510 --> 00:06:06,610
identical to original certificates but

110
00:06:04,000 --> 00:06:11,620
it will replace the private key and it

111
00:06:06,610 --> 00:06:13,150
will sign it with its own root CA so but

112
00:06:11,620 --> 00:06:16,030
apart from that the certificate will be

113
00:06:13,150 --> 00:06:17,799
identical to the original certificate so

114
00:06:16,030 --> 00:06:20,880
it really mimics the side the origin

115
00:06:17,800 --> 00:06:26,580
also don't forget as much as possible

116
00:06:20,880 --> 00:06:26,580
let's open a few other sites I'm sorry

117
00:06:27,600 --> 00:06:32,370
okay we're on the browser let's do it

118
00:06:30,130 --> 00:06:32,370
like this

119
00:06:33,040 --> 00:06:37,030
okay the Google tune that's okay

120
00:06:49,840 --> 00:07:00,960
so hopefully my internet is still

121
00:06:51,639 --> 00:07:00,960
working right good

122
00:07:02,550 --> 00:07:07,919
so in words okay I said HP host contains

123
00:07:05,759 --> 00:07:09,479
mozilla.com so I should be able to do

124
00:07:07,919 --> 00:07:10,859
the same thing because I visit Natasha

125
00:07:09,479 --> 00:07:19,169
calm so let's do that

126
00:07:10,860 --> 00:07:21,900
oops like this but I get no frames so

127
00:07:19,169 --> 00:07:24,690
why could this be why don't I see an HP

128
00:07:21,900 --> 00:07:27,989
host header called nitro said calm well

129
00:07:24,690 --> 00:07:31,289
the reason is Natasha comm runs hb2 like

130
00:07:27,990 --> 00:07:33,240
most websites actually do nowadays so

131
00:07:31,289 --> 00:07:34,830
what I need to do then hb2 is a

132
00:07:33,240 --> 00:07:37,319
completely different protocol from HTTP

133
00:07:34,830 --> 00:07:40,740
so the syntax in Wireshark is completely

134
00:07:37,319 --> 00:07:50,310
different so you have to do hb2 without

135
00:07:40,740 --> 00:07:52,380
headers oh thority contains natural SEC

136
00:07:50,310 --> 00:07:53,009
calm and hopefully I should see yes

137
00:07:52,380 --> 00:07:54,360
there is

138
00:07:53,009 --> 00:07:57,139
so right now you have to use a

139
00:07:54,360 --> 00:07:59,819
completely different name to access the

140
00:07:57,139 --> 00:08:05,090
host header it's called the authority

141
00:07:59,819 --> 00:08:05,090
header hb2 and then you have new traffic

142
00:08:06,500 --> 00:08:15,719
so you can see the user agent the header

143
00:08:09,300 --> 00:08:19,139
and everything okay so we have that and

144
00:08:15,719 --> 00:08:20,759
right now I open sekhti and Google so

145
00:08:19,139 --> 00:08:25,919
some of those sites probably set some

146
00:08:20,759 --> 00:08:28,889
cookies so let's see HTTP dot set cookie

147
00:08:25,919 --> 00:08:34,679
and let's try cookies I find my mana

148
00:08:28,889 --> 00:08:36,870
cached HTTP cookie no cookies

149
00:08:34,679 --> 00:08:39,598
let's strange well maybe these sites

150
00:08:36,870 --> 00:08:43,709
like Google and sexy are all turning hb2

151
00:08:39,599 --> 00:08:50,430
right let's check and then it's called

152
00:08:43,708 --> 00:08:53,880
HP to start headers set cookie

153
00:08:50,430 --> 00:08:57,719
there is so looks like the sites are

154
00:08:53,880 --> 00:09:01,170
actually using hv2 and we can see some

155
00:08:57,720 --> 00:09:06,000
nice cookies here and we can even do set

156
00:09:01,170 --> 00:09:07,699
cookie contains let's see if we can find

157
00:09:06,000 --> 00:09:10,220
some secure cookies

158
00:09:07,700 --> 00:09:19,980
[Music]

159
00:09:10,220 --> 00:09:24,000
lips at least one let's do mattress

160
00:09:19,980 --> 00:09:25,950
instead one okay it's not so much but at

161
00:09:24,000 --> 00:09:28,019
least so cookie that's through a set

162
00:09:25,950 --> 00:09:31,050
with this parameter cannot be sent over

163
00:09:28,019 --> 00:09:35,040
port 80 it has to go encrypted on the

164
00:09:31,050 --> 00:09:37,109
SSL of course it looks like the

165
00:09:35,040 --> 00:09:38,579
traffic's going to port 80 but that's

166
00:09:37,110 --> 00:09:43,860
just because pull the proxy s decrypt it

167
00:09:38,579 --> 00:09:51,140
is for us so I have Google up let's

168
00:09:43,860 --> 00:09:51,140
search for something so let's say memory

169
00:09:52,010 --> 00:09:55,980
so I'm gonna search for this but then

170
00:09:54,450 --> 00:09:57,149
now that's kind of corny right so I'm

171
00:09:55,980 --> 00:10:00,149
not gonna search for that so I'll just

172
00:09:57,149 --> 00:10:02,670
remove that see do you believe this data

173
00:10:00,149 --> 00:10:04,170
has been sent to Google already yeah I

174
00:10:02,670 --> 00:10:07,709
see no it's you know this you know this

175
00:10:04,170 --> 00:10:09,990
let's just verify from the traffic so

176
00:10:07,709 --> 00:10:14,899
again we need to use the HP to stuff

177
00:10:09,990 --> 00:10:20,610
here this time it's called headers path

178
00:10:14,899 --> 00:10:23,610
it should contain all search engines

179
00:10:20,610 --> 00:10:29,690
typically use the the Q equals when they

180
00:10:23,610 --> 00:10:35,850
search so let's see if we can find this

181
00:10:29,690 --> 00:10:37,170
contains better okay so nice and what's

182
00:10:35,850 --> 00:10:40,320
also nice is that we can see this nice

183
00:10:37,170 --> 00:10:44,699
pattern oh how I type this and and II

184
00:10:40,320 --> 00:10:46,770
never never never gonna so II for every

185
00:10:44,700 --> 00:10:48,360
character I type this is sent to Google

186
00:10:46,770 --> 00:10:49,770
all the time so you can see my spelling

187
00:10:48,360 --> 00:10:52,110
mistakes see me going back and changing

188
00:10:49,770 --> 00:10:56,220
it no it's all sent to Google in

189
00:10:52,110 --> 00:11:00,060
different get requests and this is my

190
00:10:56,220 --> 00:11:03,120
like my stuff so I can remember what to

191
00:11:00,060 --> 00:11:08,209
say and another thing I want to show you

192
00:11:03,120 --> 00:11:15,170
while I'm up here HB 2 dot headers

193
00:11:08,209 --> 00:11:21,449
content type contains

194
00:11:15,170 --> 00:11:25,560
Dinah's so what is this any ideas DNA

195
00:11:21,449 --> 00:11:28,260
HBS also long let's do H so I've set my

196
00:11:25,560 --> 00:11:30,329
browser to do this in the US I think

197
00:11:28,260 --> 00:11:33,000
this is going by default now or supposed

198
00:11:30,329 --> 00:11:34,769
to go in Europe you know they say no

199
00:11:33,000 --> 00:11:37,649
we're not doing it for you in Europe for

200
00:11:34,769 --> 00:11:40,290
now but you know you can enable it just

201
00:11:37,649 --> 00:11:42,480
go to Firefox and in the settings you

202
00:11:40,290 --> 00:11:45,209
just check this enable DNS over HTTPS

203
00:11:42,480 --> 00:11:47,040
then all my DNS queries will be sent

204
00:11:45,209 --> 00:11:51,268
over HTTPS instead of unencrypted on

205
00:11:47,040 --> 00:11:55,290
port 53 UDP this is probably good for

206
00:11:51,269 --> 00:11:56,730
privacy if you're in the u.s. if yeah

207
00:11:55,290 --> 00:11:59,339
it's like we have to trust quote for

208
00:11:56,730 --> 00:12:01,500
right case if you're in Europe I draw

209
00:11:59,339 --> 00:12:03,810
the trust like send my DNS requests

210
00:12:01,500 --> 00:12:05,430
unencrypted to my local ISP then to send

211
00:12:03,810 --> 00:12:09,089
them to the US the CloudFlare where I

212
00:12:05,430 --> 00:12:10,709
have no privacy rights so and there's no

213
00:12:09,089 --> 00:12:13,529
other options here in the dropdowns on

214
00:12:10,709 --> 00:12:16,170
the cloud flare it would be nice to see

215
00:12:13,529 --> 00:12:19,290
other operators especially in Europe in

216
00:12:16,170 --> 00:12:21,959
the European Union who are like at least

217
00:12:19,290 --> 00:12:27,360
really abiding by gdpr who ruled the

218
00:12:21,959 --> 00:12:29,579
running htps dns s but that's hopefully

219
00:12:27,360 --> 00:12:31,769
all that will happen so you could

220
00:12:29,579 --> 00:12:34,829
actually see in the DNS let's see just

221
00:12:31,769 --> 00:12:37,079
verify if I would have a newer version

222
00:12:34,829 --> 00:12:38,880
in your bill of Wireshark I would have

223
00:12:37,079 --> 00:12:41,399
to actually see that the next packet

224
00:12:38,880 --> 00:12:45,060
here just nicely but I realize now I

225
00:12:41,399 --> 00:12:46,740
have a slightly older version but you

226
00:12:45,060 --> 00:12:49,018
can see that okay it was a DNS lookup

227
00:12:46,740 --> 00:12:51,550
for and also slightly ran out the top

228
00:12:49,019 --> 00:12:54,940
yeah ok thank you that's all I want

229
00:12:51,550 --> 00:12:54,939
[Applause]

