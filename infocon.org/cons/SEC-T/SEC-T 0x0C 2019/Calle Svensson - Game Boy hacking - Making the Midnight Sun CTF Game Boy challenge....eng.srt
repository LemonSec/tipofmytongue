1
00:00:03,080 --> 00:00:08,330
yeah nice to be here my name is Karl or

2
00:00:06,170 --> 00:00:13,280
Kelly and I'm going to talk a little bit

3
00:00:08,330 --> 00:00:15,169
about a project me and my teammates from

4
00:00:13,280 --> 00:00:17,840
our CTF team did over the summer

5
00:00:15,169 --> 00:00:21,760
basically where we think we're a bit

6
00:00:17,840 --> 00:00:28,000
with some Game Boy and Game Boy games

7
00:00:21,760 --> 00:00:32,480
yeah short introduction about myself

8
00:00:28,000 --> 00:00:35,269
said my name is Cole 28 years old I have

9
00:00:32,479 --> 00:00:39,410
a master's in computer science from kth

10
00:00:35,270 --> 00:00:43,719
in Stockholm and I work as the head of

11
00:00:39,410 --> 00:00:46,000
security at the healthcare startup key

12
00:00:43,719 --> 00:00:51,379
however that's not really relevant for

13
00:00:46,000 --> 00:00:54,019
today's topic I also play a lot of CTF

14
00:00:51,379 --> 00:00:56,599
competitions with our team hacking for

15
00:00:54,020 --> 00:00:58,969
sodium and if you would like to get in

16
00:00:56,600 --> 00:01:01,940
contact with me at some later time you

17
00:00:58,969 --> 00:01:04,099
can reach me on one of these methods so

18
00:01:01,940 --> 00:01:07,429
that's the first part of the mail

19
00:01:04,099 --> 00:01:10,070
address at cedar to calm there's a

20
00:01:07,430 --> 00:01:16,610
limitation in like resolution and screen

21
00:01:10,070 --> 00:01:17,979
space here in this game where ROM so can

22
00:01:16,610 --> 00:01:22,130
this please work

23
00:01:17,980 --> 00:01:28,790
yes so as I said I'm in this CTF team

24
00:01:22,130 --> 00:01:32,060
and since last year we are helping

25
00:01:28,790 --> 00:01:35,990
organize seeing our own CTF competition

26
00:01:32,060 --> 00:01:37,340
it's called the Midnight Sun CTF so the

27
00:01:35,990 --> 00:01:40,009
idea is to do this every year and we

28
00:01:37,340 --> 00:01:43,100
started with last year so we do an

29
00:01:40,010 --> 00:01:47,210
online qualifier in the spring and then

30
00:01:43,100 --> 00:01:50,479
an on-site finals at the kth University

31
00:01:47,210 --> 00:01:53,600
here in Stockholm so we did it for the

32
00:01:50,480 --> 00:01:55,910
first time last year and then again this

33
00:01:53,600 --> 00:01:58,910
year and we're already planning for next

34
00:01:55,910 --> 00:02:01,490
year and we have a student class for

35
00:01:58,910 --> 00:02:05,479
student teams an open class for everyone

36
00:02:01,490 --> 00:02:07,580
and I'm kind of like the responsible for

37
00:02:05,480 --> 00:02:10,789
the technical aspects of the competition

38
00:02:07,580 --> 00:02:12,680
and one of my design goals when doing

39
00:02:10,788 --> 00:02:15,589
this was that when we have this on-site

40
00:02:12,680 --> 00:02:16,190
finals we should utilize this fact that

41
00:02:15,590 --> 00:02:20,000
we have

42
00:02:16,190 --> 00:02:22,460
teams on site at the same place so I

43
00:02:20,000 --> 00:02:28,880
want to have some challenge that uses

44
00:02:22,460 --> 00:02:34,880
some kind of physical aspect so in this

45
00:02:28,880 --> 00:02:37,400
year's finals we had a challenge that

46
00:02:34,880 --> 00:02:41,650
was called the HFS calc which was

47
00:02:37,400 --> 00:02:45,950
created by one of my teammates Bob and

48
00:02:41,650 --> 00:02:49,520
it's a pony ball challenge and what does

49
00:02:45,950 --> 00:02:51,440
that mean so a portable is a category a

50
00:02:49,520 --> 00:02:53,720
standard category in CTF competitions

51
00:02:51,440 --> 00:02:57,859
where you get some kind of program

52
00:02:53,720 --> 00:03:01,460
you're supposed to find one or more bugs

53
00:02:57,860 --> 00:03:03,890
in this program to corrupt the memory of

54
00:03:01,460 --> 00:03:06,590
the program and thus gain control of the

55
00:03:03,890 --> 00:03:10,329
execution flow and typically get

56
00:03:06,590 --> 00:03:14,180
yourself a shell and the flag this is

57
00:03:10,330 --> 00:03:17,320
typically done on like mainstream

58
00:03:14,180 --> 00:03:19,790
architectures such as x86 or arm because

59
00:03:17,320 --> 00:03:26,380
that's what people are familiar with and

60
00:03:19,790 --> 00:03:30,470
that's what's easy to do but we did a

61
00:03:26,380 --> 00:03:32,600
Game Boy game which was a pony ball so I

62
00:03:30,470 --> 00:03:34,280
mean okay the game is maybe stretching

63
00:03:32,600 --> 00:03:36,500
it a little bit it was a calculator app

64
00:03:34,280 --> 00:03:38,690
on the Gameboy so we had flashed it on

65
00:03:36,500 --> 00:03:41,600
actual Game Boy cartridges I actually

66
00:03:38,690 --> 00:03:44,329
have with me today some game boys and

67
00:03:41,600 --> 00:03:47,329
the cartridges so if you want to like

68
00:03:44,330 --> 00:03:49,100
look at it and try it out you can come

69
00:03:47,330 --> 00:03:51,470
see me either tonight or throughout the

70
00:03:49,100 --> 00:03:53,480
rest of the conference I will be

71
00:03:51,470 --> 00:03:56,560
carrying them around I guess we'll do be

72
00:03:53,480 --> 00:03:59,720
some some kind of deposit system I guess

73
00:03:56,560 --> 00:04:03,560
it looked like this so the setup was

74
00:03:59,720 --> 00:04:05,180
that the teams were given a copy of the

75
00:04:03,560 --> 00:04:07,340
Gameboy ROM that they could download to

76
00:04:05,180 --> 00:04:09,590
do computers and they were also there

77
00:04:07,340 --> 00:04:11,959
were also these game boys with the game

78
00:04:09,590 --> 00:04:13,790
flash to them there was one difference

79
00:04:11,959 --> 00:04:15,830
though that the the copy they got on

80
00:04:13,790 --> 00:04:18,349
their computers just had a placeholder

81
00:04:15,830 --> 00:04:21,230
flag so they could analyze the code look

82
00:04:18,350 --> 00:04:24,950
at how it worked but even if they

83
00:04:21,230 --> 00:04:27,140
managed to arm find the bug and create

84
00:04:24,950 --> 00:04:29,300
an exploit for this they wouldn't get

85
00:04:27,140 --> 00:04:30,080
the fact they would have to go to the

86
00:04:29,300 --> 00:04:32,449
actual fish

87
00:04:30,080 --> 00:04:35,150
Game Boy and by inputting their exploit

88
00:04:32,449 --> 00:04:39,909
through the gamepad or they could

89
00:04:35,150 --> 00:04:42,979
exploit this and leak out the flag so

90
00:04:39,909 --> 00:04:46,400
for anyone who has been doing these

91
00:04:42,979 --> 00:04:49,060
kinds of challenges in a more regular

92
00:04:46,400 --> 00:04:52,638
setting this was kind quite a like

93
00:04:49,060 --> 00:04:55,610
standard textbook challenge where you

94
00:04:52,639 --> 00:04:58,659
had a buffer on the stack which

95
00:04:55,610 --> 00:05:01,879
contained the results of the different

96
00:04:58,659 --> 00:05:04,490
calculations unfortunately there was no

97
00:05:01,879 --> 00:05:07,819
bounds checking on this buffer so you

98
00:05:04,490 --> 00:05:11,050
could continue making calculations until

99
00:05:07,819 --> 00:05:13,789
you would overflow this buffer and then

100
00:05:11,050 --> 00:05:17,210
corrupt the return address of this

101
00:05:13,789 --> 00:05:19,909
function which is like the standard way

102
00:05:17,210 --> 00:05:23,900
of exact in one of the most basic ways

103
00:05:19,909 --> 00:05:26,810
you can exploit a program I mean I won't

104
00:05:23,900 --> 00:05:29,120
go into too much detail on that it's

105
00:05:26,810 --> 00:05:31,129
like if you ever try out anything like

106
00:05:29,120 --> 00:05:33,409
this not not on a gameboy but like on a

107
00:05:31,129 --> 00:05:38,240
regular computer this would be like your

108
00:05:33,409 --> 00:05:39,849
first like Pony Bowl 101 challenge and

109
00:05:38,240 --> 00:05:43,279
then there was a bit a little bit of

110
00:05:39,849 --> 00:05:44,690
protection to prevent some attacks but

111
00:05:43,279 --> 00:05:48,979
the protections were pretty weak so you

112
00:05:44,690 --> 00:05:51,349
could by analyzing the the code you

113
00:05:48,979 --> 00:05:54,349
could overcome this protection and then

114
00:05:51,349 --> 00:05:57,020
by playing the game in the correct way

115
00:05:54,349 --> 00:06:00,139
you could eventually cause it to go into

116
00:05:57,020 --> 00:06:02,120
a different function this is what would

117
00:06:00,139 --> 00:06:04,310
happen if you didn't overcome the

118
00:06:02,120 --> 00:06:06,080
protection so this is a little bit of a

119
00:06:04,310 --> 00:06:08,479
spoof of what it would look like on a

120
00:06:06,080 --> 00:06:11,628
regular system with the same protection

121
00:06:08,479 --> 00:06:14,690
if you failed to overcome that

122
00:06:11,629 --> 00:06:19,190
protection I don't think any other Game

123
00:06:14,690 --> 00:06:21,440
Boy game has this kind of screen anyway

124
00:06:19,190 --> 00:06:24,889
if you did it the right way you would

125
00:06:21,440 --> 00:06:26,900
get the flag like this and with a little

126
00:06:24,889 --> 00:06:33,110
image related to one of the sponsors of

127
00:06:26,900 --> 00:06:38,929
the competition so uh we did that for

128
00:06:33,110 --> 00:06:40,710
this finals that was in in June and we

129
00:06:38,930 --> 00:06:42,110
started thinking about

130
00:06:40,710 --> 00:06:44,669
[Music]

131
00:06:42,110 --> 00:06:46,529
the Gameboy and what what can you do

132
00:06:44,669 --> 00:06:50,308
with the Gameboy and how can we take

133
00:06:46,529 --> 00:06:53,550
this further so first of all like what

134
00:06:50,309 --> 00:06:55,679
is the Gameboy I mean okay it's it's a

135
00:06:53,550 --> 00:06:58,619
it's a extremely popular gaming console

136
00:06:55,679 --> 00:07:02,628
but from kind of like a computer science

137
00:06:58,619 --> 00:07:06,330
or hacker perspective it has its own

138
00:07:02,629 --> 00:07:09,089
basically custom chip which is like a

139
00:07:06,330 --> 00:07:14,969
hybrid between the C ad and the Intel

140
00:07:09,089 --> 00:07:17,669
8080 and it's a four megahertz processor

141
00:07:14,969 --> 00:07:20,399
with a little bit of DRAM and then you

142
00:07:17,669 --> 00:07:25,948
have these roms which are on cartridges

143
00:07:20,399 --> 00:07:28,409
that you can insert and um they are the

144
00:07:25,949 --> 00:07:32,449
the simplest ones are just 32 kilobytes

145
00:07:28,409 --> 00:07:35,429
of memory but then there are more

146
00:07:32,449 --> 00:07:39,959
advanced cartridges where you can swap

147
00:07:35,429 --> 00:07:43,888
out the top 16 kilobytes of memory for

148
00:07:39,959 --> 00:07:46,259
other sections of 16 kilobytes of memory

149
00:07:43,889 --> 00:07:48,539
so this is called a bank a block of 16

150
00:07:46,259 --> 00:07:51,269
kilobytes of memory and you can cycle

151
00:07:48,539 --> 00:07:53,639
through these banks so some of the game

152
00:07:51,269 --> 00:07:56,219
boy games even had as much as an 8

153
00:07:53,639 --> 00:08:00,749
megabyte wrong a lot of content in the

154
00:07:56,219 --> 00:08:04,860
game as an LCD display 160 by hundred

155
00:08:00,749 --> 00:08:09,659
forty-four pixels which runs at 60fps

156
00:08:04,860 --> 00:08:16,110
so quite impressive for like 89 I think

157
00:08:09,659 --> 00:08:17,819
he was released and this is also why my

158
00:08:16,110 --> 00:08:19,349
slides are a little bit pixelated

159
00:08:17,819 --> 00:08:21,480
because they follow this these

160
00:08:19,349 --> 00:08:24,558
restrictions

161
00:08:21,480 --> 00:08:24,559
[Music]

162
00:08:29,199 --> 00:08:37,159
okay great so we I mean I'm a big fan of

163
00:08:34,099 --> 00:08:41,330
anger I've talked about it

164
00:08:37,159 --> 00:08:42,588
previous times and we started thinking

165
00:08:41,330 --> 00:08:45,410
about maybe we could build like

166
00:08:42,589 --> 00:08:48,830
implement the gamer architecture for the

167
00:08:45,410 --> 00:08:52,390
anger binary analysis framework and do

168
00:08:48,830 --> 00:08:57,080
automated analysis of game boy games

169
00:08:52,390 --> 00:09:00,230
that's a crazy idea that could work so

170
00:08:57,080 --> 00:09:04,490
anger is uh it's a Python framework for

171
00:09:00,230 --> 00:09:06,620
analyzing binaries it's mainly developed

172
00:09:04,490 --> 00:09:10,790
by the security lab at UC Santa Barbara

173
00:09:06,620 --> 00:09:13,029
but have a lot of other contributors it

174
00:09:10,790 --> 00:09:15,920
supports a bunch of different

175
00:09:13,029 --> 00:09:21,170
architectures unfortunately not the game

176
00:09:15,920 --> 00:09:23,060
boy y know this we thought that this

177
00:09:21,170 --> 00:09:24,890
would be an excellent exercise because

178
00:09:23,060 --> 00:09:27,229
it is extendable you can build your own

179
00:09:24,890 --> 00:09:29,029
you can implement your own architectures

180
00:09:27,230 --> 00:09:33,080
and plugins and modules for this

181
00:09:29,029 --> 00:09:36,350
framework and basically what you have to

182
00:09:33,080 --> 00:09:40,190
do is you have to build a lifter that

183
00:09:36,350 --> 00:09:44,709
takes the like machine code or whatever

184
00:09:40,190 --> 00:09:50,209
you're analyzing and converts it into

185
00:09:44,709 --> 00:09:51,500
vex which is the internal kind of

186
00:09:50,209 --> 00:09:55,430
representation the intermediate language

187
00:09:51,500 --> 00:09:57,430
I think really used by valgrind but also

188
00:09:55,430 --> 00:10:00,620
been adapted by anger to use for their

189
00:09:57,430 --> 00:10:02,959
binary analysis so you build this lifter

190
00:10:00,620 --> 00:10:03,620
that converts your Gameboy code into

191
00:10:02,959 --> 00:10:05,709
this vex

192
00:10:03,620 --> 00:10:10,220
representation and that way you can

193
00:10:05,709 --> 00:10:13,369
interface with the anger framework so we

194
00:10:10,220 --> 00:10:16,279
started doing this encountered a few

195
00:10:13,370 --> 00:10:21,260
challenges with this mainly three

196
00:10:16,279 --> 00:10:23,480
challenges first of all we had this Bank

197
00:10:21,260 --> 00:10:26,050
switching issue in most programs you

198
00:10:23,480 --> 00:10:28,400
load the program into memory and each

199
00:10:26,050 --> 00:10:32,390
piece of the program has a unique

200
00:10:28,400 --> 00:10:34,010
address in this case that's not how it

201
00:10:32,390 --> 00:10:35,900
works because since we can switch out

202
00:10:34,010 --> 00:10:38,329
the bank's they will still have the same

203
00:10:35,900 --> 00:10:42,290
address so the same address depending on

204
00:10:38,329 --> 00:10:43,069
which bank is loaded can mean completely

205
00:10:42,290 --> 00:10:45,230
different parts

206
00:10:43,070 --> 00:10:47,890
the memory this was fairly easy to solve

207
00:10:45,230 --> 00:10:50,960
though what we basically did was that we

208
00:10:47,890 --> 00:10:53,689
kind of extended the architecture to

209
00:10:50,960 --> 00:11:00,020
instead of used like 16-bit addresses we

210
00:10:53,690 --> 00:11:02,210
created this fake register that kept

211
00:11:00,020 --> 00:11:03,890
track of which Bank was loaded and then

212
00:11:02,210 --> 00:11:06,340
we pretended that everything was like

213
00:11:03,890 --> 00:11:10,330
24-bit addresses instead and did some

214
00:11:06,340 --> 00:11:15,320
tweaking there and that was no problem

215
00:11:10,330 --> 00:11:17,630
another issue is that in most systems if

216
00:11:15,320 --> 00:11:19,400
you have a piece of memory and you write

217
00:11:17,630 --> 00:11:22,130
to one address and then you read from

218
00:11:19,400 --> 00:11:25,850
that address again you will get back

219
00:11:22,130 --> 00:11:28,160
what you just wrote that's not how the

220
00:11:25,850 --> 00:11:31,760
game way works because they have reused

221
00:11:28,160 --> 00:11:34,430
all of these addresses for the ROM I

222
00:11:31,760 --> 00:11:37,490
mean from the name it's like read-only

223
00:11:34,430 --> 00:11:39,439
memory so that's where you have all the

224
00:11:37,490 --> 00:11:42,230
code and data for the game so you will

225
00:11:39,440 --> 00:11:44,180
read this but you will there's you can

226
00:11:42,230 --> 00:11:46,430
you can't write to this memory because

227
00:11:44,180 --> 00:11:48,500
it's read-only so what they've done is

228
00:11:46,430 --> 00:11:50,630
that they have kind of like reused these

229
00:11:48,500 --> 00:11:52,640
addresses so that if you write to one of

230
00:11:50,630 --> 00:11:55,640
these addresses that is instead

231
00:11:52,640 --> 00:11:57,650
interpreted as sending data to the

232
00:11:55,640 --> 00:12:00,530
control registers within the Game Boy

233
00:11:57,650 --> 00:12:05,420
cartridge for example for switching

234
00:12:00,530 --> 00:12:08,390
these banks out or in the case of a game

235
00:12:05,420 --> 00:12:10,490
like pokemon gold which has a real-time

236
00:12:08,390 --> 00:12:12,140
clock in it you can communicate

237
00:12:10,490 --> 00:12:17,180
communicate with the real-time clock by

238
00:12:12,140 --> 00:12:19,569
writing to these addresses so here we

239
00:12:17,180 --> 00:12:22,099
had to kind of implement like a hooking

240
00:12:19,570 --> 00:12:25,130
mechanism so basically we're hooking

241
00:12:22,100 --> 00:12:27,020
every write checking what address we're

242
00:12:25,130 --> 00:12:29,990
trying to write to and if it's one of

243
00:12:27,020 --> 00:12:31,970
these control registers we make some

244
00:12:29,990 --> 00:12:37,760
adjustments to what the operation is

245
00:12:31,970 --> 00:12:41,620
doing also no big prog mean it's a

246
00:12:37,760 --> 00:12:41,620
completely solvable problem basically

247
00:12:41,830 --> 00:12:49,250
then we realized our third challenge

248
00:12:46,700 --> 00:12:52,130
which is that this is like in a method

249
00:12:49,250 --> 00:12:53,560
system it has interrupts specifically

250
00:12:52,130 --> 00:12:56,600
the game boy has five different

251
00:12:53,560 --> 00:12:58,219
interrupts it has V

252
00:12:56,600 --> 00:13:02,149
blank interrupts which is fired every

253
00:12:58,220 --> 00:13:05,329
time one frame has finished rendering so

254
00:13:02,149 --> 00:13:08,569
you have a small window of time within

255
00:13:05,329 --> 00:13:11,930
which you can modify some parts related

256
00:13:08,569 --> 00:13:15,500
to the graphics there's also the LCD

257
00:13:11,930 --> 00:13:18,319
stat interrupts which gives can provide

258
00:13:15,500 --> 00:13:19,970
some information about what's going on

259
00:13:18,319 --> 00:13:23,449
with the rendering you can use this to

260
00:13:19,970 --> 00:13:25,790
create like wave effects over the screen

261
00:13:23,449 --> 00:13:27,529
and things like that this is a

262
00:13:25,790 --> 00:13:30,649
general-purpose timer interrupt that you

263
00:13:27,529 --> 00:13:33,319
can keep track of different timed events

264
00:13:30,649 --> 00:13:34,819
there's a serial interrupt for if using

265
00:13:33,319 --> 00:13:36,319
the game link cable I don't know if you

266
00:13:34,819 --> 00:13:37,550
ever play it for example again if you're

267
00:13:36,319 --> 00:13:39,199
playing Pokemon if you want to trade

268
00:13:37,550 --> 00:13:40,849
with someone you connect the cable to

269
00:13:39,199 --> 00:13:43,099
your gameboy into the other Gameboy and

270
00:13:40,850 --> 00:13:45,110
you can communicate with each other so

271
00:13:43,100 --> 00:13:46,759
that's the input related interrupt

272
00:13:45,110 --> 00:13:50,120
related to that and then you have an

273
00:13:46,759 --> 00:13:53,170
interrupt for just input so why is this

274
00:13:50,120 --> 00:13:56,540
a problem because basically an interrupt

275
00:13:53,170 --> 00:13:59,959
means that at pretty much any time we

276
00:13:56,540 --> 00:14:02,509
can have code that starts running like

277
00:13:59,959 --> 00:14:05,689
the other code then what we think is

278
00:14:02,509 --> 00:14:08,120
gonna run will run instead and that

279
00:14:05,689 --> 00:14:15,620
causes a lot of issues if you trying to

280
00:14:08,120 --> 00:14:19,910
model and analyze this code so yeah as I

281
00:14:15,620 --> 00:14:22,910
said we solved first challenge with in

282
00:14:19,910 --> 00:14:28,069
creating this extra fake register and

283
00:14:22,910 --> 00:14:31,240
using that for reading stuff the control

284
00:14:28,069 --> 00:14:33,920
registers were handled by doing like a

285
00:14:31,240 --> 00:14:37,000
global breakpoint checking what we're

286
00:14:33,920 --> 00:14:39,139
we're trying to write and divert this

287
00:14:37,000 --> 00:14:41,839
write somewhere else and prevent the

288
00:14:39,139 --> 00:14:45,259
original right with the interrupts

289
00:14:41,839 --> 00:14:48,319
however there is really no good solution

290
00:14:45,259 --> 00:14:53,170
because there isn't really like a good

291
00:14:48,319 --> 00:14:56,870
idea of how to model like multi-threaded

292
00:14:53,170 --> 00:15:01,099
processes which is in in this context

293
00:14:56,870 --> 00:15:03,889
which is basically what this is but we

294
00:15:01,100 --> 00:15:05,389
are we can make it we can like minimize

295
00:15:03,889 --> 00:15:07,309
the problem at least a little bit so for

296
00:15:05,389 --> 00:15:09,139
example the serial stuff as long as

297
00:15:07,309 --> 00:15:10,010
we're not looking at games which use the

298
00:15:09,139 --> 00:15:14,540
game the game

299
00:15:10,010 --> 00:15:17,150
in cable we can just disregard that for

300
00:15:14,540 --> 00:15:20,599
some of the interrupts the V blank and

301
00:15:17,150 --> 00:15:22,850
LCD stats interrupts our we can hope

302
00:15:20,600 --> 00:15:25,070
that most game designers have only put

303
00:15:22,850 --> 00:15:28,250
code there which relates to the

304
00:15:25,070 --> 00:15:32,180
rendering of the game and not like the

305
00:15:28,250 --> 00:15:36,770
actual game logic so if maybe we could

306
00:15:32,180 --> 00:15:39,199
just disregard those and it will I mean

307
00:15:36,770 --> 00:15:42,079
it would mess up the image if we tried

308
00:15:39,200 --> 00:15:42,940
to render it but we're not so hopefully

309
00:15:42,080 --> 00:15:45,890
it won't matter

310
00:15:42,940 --> 00:15:49,340
and it won't when it comes to in input

311
00:15:45,890 --> 00:15:51,110
interrupts it turns out that our most

312
00:15:49,340 --> 00:15:53,810
games don't really use it they are

313
00:15:51,110 --> 00:15:59,330
instead pulling the input state and

314
00:15:53,810 --> 00:16:02,060
checking what the current input is so in

315
00:15:59,330 --> 00:16:05,450
most cases we can also disregard the

316
00:16:02,060 --> 00:16:09,290
input interrupt because it's it's

317
00:16:05,450 --> 00:16:11,030
typically not used the general timer

318
00:16:09,290 --> 00:16:14,030
thing will of course be completely

319
00:16:11,030 --> 00:16:15,920
different depending on the game there

320
00:16:14,030 --> 00:16:20,750
might be you know we might be able to do

321
00:16:15,920 --> 00:16:24,020
some manual tweaks and you know patch it

322
00:16:20,750 --> 00:16:27,110
and somehow but basically there we we

323
00:16:24,020 --> 00:16:34,520
didn't have any any solution for this in

324
00:16:27,110 --> 00:16:38,450
the general case so this works resulted

325
00:16:34,520 --> 00:16:41,090
in some like we build some various tools

326
00:16:38,450 --> 00:16:43,070
for parsing these things and still

327
00:16:41,090 --> 00:16:45,290
working on this anger module there's

328
00:16:43,070 --> 00:16:49,670
still the idea was to be able to kind of

329
00:16:45,290 --> 00:16:52,569
release all of this today but we had

330
00:16:49,670 --> 00:16:54,890
some last-minute discoveries and some

331
00:16:52,570 --> 00:16:58,090
bugs and stuff and we didn't want to

332
00:16:54,890 --> 00:17:02,240
just release the garbage so

333
00:16:58,090 --> 00:17:04,310
unfortunately we had to postpone that a

334
00:17:02,240 --> 00:17:08,240
little bit

335
00:17:04,310 --> 00:17:10,099
one big resource that we used throughout

336
00:17:08,240 --> 00:17:13,430
this thing was there's something called

337
00:17:10,099 --> 00:17:15,500
the Gameboy pan docks which is some

338
00:17:13,430 --> 00:17:17,690
people who have basically reversed

339
00:17:15,500 --> 00:17:20,689
engineered like how the game works and

340
00:17:17,690 --> 00:17:23,000
documented this very thoroughly it's a

341
00:17:20,689 --> 00:17:25,819
very good resource if you want to

342
00:17:23,000 --> 00:17:30,890
look into this game we're hacking a

343
00:17:25,819 --> 00:17:34,100
little bit more so the whole idea we're

344
00:17:30,890 --> 00:17:37,160
doing this thing was that we won't do to

345
00:17:34,100 --> 00:17:40,370
kind of like do some like automated

346
00:17:37,160 --> 00:17:43,370
analysis of of game boy games preferably

347
00:17:40,370 --> 00:17:47,719
like at a scale and the idea was that

348
00:17:43,370 --> 00:17:49,909
maybe we could find some some new bugs

349
00:17:47,720 --> 00:17:50,360
in games that haven't been discovered

350
00:17:49,910 --> 00:17:55,880
yet

351
00:17:50,360 --> 00:18:00,409
and for the anger module the idea was to

352
00:17:55,880 --> 00:18:02,450
be able to maybe not like analyze the

353
00:18:00,410 --> 00:18:04,160
whole games but at least like sections

354
00:18:02,450 --> 00:18:05,210
of games to build up like to find out

355
00:18:04,160 --> 00:18:10,660
the relationships between different

356
00:18:05,210 --> 00:18:14,180
parts of the code to simplify the

357
00:18:10,660 --> 00:18:18,230
analysis we also looked a little bit

358
00:18:14,180 --> 00:18:20,750
into like fussing of games by like

359
00:18:18,230 --> 00:18:22,370
building our own emulator which is still

360
00:18:20,750 --> 00:18:25,280
a little bit work-in-progress the

361
00:18:22,370 --> 00:18:27,139
problem with the games is that like

362
00:18:25,280 --> 00:18:29,870
typically the whole point of games is

363
00:18:27,140 --> 00:18:33,110
that they're kind of like preventing you

364
00:18:29,870 --> 00:18:36,939
from progressing and there are very many

365
00:18:33,110 --> 00:18:39,379
different states and if you just like

366
00:18:36,940 --> 00:18:41,870
open a game and press buttons randomly

367
00:18:39,380 --> 00:18:45,530
you typically won't advance the state of

368
00:18:41,870 --> 00:18:47,479
the game that much so you would have to

369
00:18:45,530 --> 00:18:51,830
build something more clever here which

370
00:18:47,480 --> 00:18:54,260
we haven't managed to however it is one

371
00:18:51,830 --> 00:18:58,760
positive result throughout this whole

372
00:18:54,260 --> 00:19:02,240
project we did find a way to basically

373
00:18:58,760 --> 00:19:06,290
use an existing bug in a popular game in

374
00:19:02,240 --> 00:19:07,760
a more powerful way that it has that has

375
00:19:06,290 --> 00:19:14,000
been done than what has been done before

376
00:19:07,760 --> 00:19:16,100
and again this is something that we were

377
00:19:14,000 --> 00:19:18,290
hoping to be able to finish up before

378
00:19:16,100 --> 00:19:20,899
today but yeah

379
00:19:18,290 --> 00:19:24,170
the idea is that we think that we might

380
00:19:20,900 --> 00:19:27,440
be able to get a new world record for a

381
00:19:24,170 --> 00:19:31,660
popular Game Boy game using this bug so

382
00:19:27,440 --> 00:19:31,660
we'll see if we manage manage that

383
00:19:32,240 --> 00:19:39,660
so throughout the as a kind of like last

384
00:19:36,030 --> 00:19:45,830
thing at the competition the original

385
00:19:39,660 --> 00:19:49,740
idea was to have two gameboy games and I

386
00:19:45,830 --> 00:19:50,909
mean we we chose to not release the

387
00:19:49,740 --> 00:19:52,679
second one because we had enough

388
00:19:50,910 --> 00:19:54,360
challenges and we thought that we would

389
00:19:52,679 --> 00:19:59,070
release it for the secretary conference

390
00:19:54,360 --> 00:20:02,789
instead so tomorrow or possibly Friday

391
00:19:59,070 --> 00:20:09,330
we will release another Gameboy pony

392
00:20:02,789 --> 00:20:11,549
ball challenge and which is in this

393
00:20:09,330 --> 00:20:13,889
similar vein but this one would will be

394
00:20:11,549 --> 00:20:16,530
an actual game it's a snake

395
00:20:13,890 --> 00:20:19,110
game that you can exploit to find the

396
00:20:16,530 --> 00:20:22,350
hidden flag inside the game so we will

397
00:20:19,110 --> 00:20:24,928
release this both online so you can run

398
00:20:22,350 --> 00:20:27,629
it an emulator but also I will have

399
00:20:24,929 --> 00:20:29,750
physical cartridges of this game so you

400
00:20:27,630 --> 00:20:33,000
can play it here throughout the

401
00:20:29,750 --> 00:20:34,440
conference and we are thinking to have

402
00:20:33,000 --> 00:20:37,020
some kind of competition and first want

403
00:20:34,440 --> 00:20:43,620
to solve it some kind of price more

404
00:20:37,020 --> 00:20:46,350
information will be on that so the final

405
00:20:43,620 --> 00:20:48,959
little thing we did for this was that oh

406
00:20:46,350 --> 00:20:50,789
so we have this challenge we have this

407
00:20:48,960 --> 00:20:53,030
challenge with with the game that you

408
00:20:50,789 --> 00:20:55,740
want to be able to exploit typically

409
00:20:53,030 --> 00:20:59,070
when you are do building these exploits

410
00:20:55,740 --> 00:21:03,179
on a regular computer you want to be

411
00:20:59,070 --> 00:21:04,470
able to automate the process to keep any

412
00:21:03,179 --> 00:21:05,970
manual work at a minimum and you

413
00:21:04,470 --> 00:21:07,320
typically you're iterating you're trying

414
00:21:05,970 --> 00:21:11,960
something and you realize there's a

415
00:21:07,320 --> 00:21:14,730
mistake and you redo it and this

416
00:21:11,960 --> 00:21:16,380
calculator challenge we did I mean that

417
00:21:14,730 --> 00:21:19,710
one was extremely simple but it still

418
00:21:16,380 --> 00:21:22,049
requires like up towards like a hundred

419
00:21:19,710 --> 00:21:23,490
button presses to perform the exploits

420
00:21:22,049 --> 00:21:25,770
which is a bit tedious especially if you

421
00:21:23,490 --> 00:21:27,679
make a mistake so we thought that for

422
00:21:25,770 --> 00:21:31,530
this a little bit more complicated one

423
00:21:27,679 --> 00:21:35,549
we would create a way to automate this

424
00:21:31,530 --> 00:21:37,440
so we added into the game that it would

425
00:21:35,549 --> 00:21:42,690
react on the serial input from the game

426
00:21:37,440 --> 00:21:44,380
link cable and you can treat that as

427
00:21:42,690 --> 00:21:45,640
input as well

428
00:21:44,380 --> 00:21:48,850
and then we took one of these gambling

429
00:21:45,640 --> 00:21:51,340
cables which is very simple like a two

430
00:21:48,850 --> 00:21:55,540
pin or three pin it's a clock and then

431
00:21:51,340 --> 00:21:58,270
data in both directions basically just

432
00:21:55,540 --> 00:21:59,889
cut it in half put some connectors two

433
00:21:58,270 --> 00:22:02,139
at the end and connected it to an

434
00:21:59,890 --> 00:22:04,510
Arduino and that way we could control

435
00:22:02,140 --> 00:22:06,760
the game boy game from the computer by

436
00:22:04,510 --> 00:22:09,250
just sending stuff up through the arena

437
00:22:06,760 --> 00:22:14,110
and that way you could automate the

438
00:22:09,250 --> 00:22:17,140
exploit for this Gameboy game from your

439
00:22:14,110 --> 00:22:21,219
computer and like iterate on your

440
00:22:17,140 --> 00:22:24,930
process so there was just a small extra

441
00:22:21,220 --> 00:22:30,040
little fun thing we did and that's

442
00:22:24,930 --> 00:22:38,230
basically what I have any questions

443
00:22:30,040 --> 00:22:41,050
comments great then I would just like to

444
00:22:38,230 --> 00:22:44,710
thank some my teammates who helped out

445
00:22:41,050 --> 00:22:47,260
with this project and our helmet from

446
00:22:44,710 --> 00:22:49,060
the anger team who has been helping up

447
00:22:47,260 --> 00:22:54,790
with a little bit of anger internals and

448
00:22:49,060 --> 00:22:57,580
also just a plug our monthly vulnerable

449
00:22:54,790 --> 00:23:00,540
live show on YouTube which called Pony

450
00:22:57,580 --> 00:23:02,919
Racing where each month four competitors

451
00:23:00,540 --> 00:23:05,320
get the same pony ball challenge and

452
00:23:02,920 --> 00:23:06,700
compete against each other trying to be

453
00:23:05,320 --> 00:23:08,560
the first one to solve it while we

454
00:23:06,700 --> 00:23:12,130
provide the commentary and analysis very

455
00:23:08,560 --> 00:23:14,850
good learning and educational resource

456
00:23:12,130 --> 00:23:20,020
so with that thank you very much

457
00:23:14,850 --> 00:23:20,020
[Applause]

