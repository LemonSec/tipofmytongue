1
00:00:03,840 --> 00:00:10,149
okay so today I'm gonna be talking about

2
00:00:06,670 --> 00:00:11,950
razzle acceptation the the cool stuff

3
00:00:10,150 --> 00:00:14,290
about the verbs of acceptation actually

4
00:00:11,950 --> 00:00:18,640
that happened in the in the pass right

5
00:00:14,290 --> 00:00:21,970
now and reinventing ideas sharing some

6
00:00:18,640 --> 00:00:25,890
sort of the research that I was doing

7
00:00:21,970 --> 00:00:29,198
and along with other cybersecurity guys

8
00:00:25,890 --> 00:00:32,259
from Google research team and yeah

9
00:00:29,199 --> 00:00:34,720
debugging the exploit kids they're

10
00:00:32,259 --> 00:00:36,789
trying to inspect the develop delivery

11
00:00:34,720 --> 00:00:39,489
methods for the these kind of exploit

12
00:00:36,789 --> 00:00:40,840
kit so it has actually two part the one

13
00:00:39,489 --> 00:00:44,678
part like it's technically the second

14
00:00:40,840 --> 00:00:47,710
one is a scary and yeah we gonna see how

15
00:00:44,679 --> 00:00:49,359
it goes so Who am I my name is Jimin

16
00:00:47,710 --> 00:00:52,329
apoyo for Ingram Micro as a security

17
00:00:49,359 --> 00:00:54,550
consultant I have a cool website called

18
00:00:52,329 --> 00:00:58,420
buffer overflows that meant check it out

19
00:00:54,550 --> 00:01:01,358
so web browser it's very interesting

20
00:00:58,420 --> 00:01:03,699
it's a it's a sport for the security

21
00:01:01,359 --> 00:01:08,920
researchers actually as well as the

22
00:01:03,699 --> 00:01:10,300
cyber criminals why and and some stuff

23
00:01:08,920 --> 00:01:12,400
that I will be talking about today that

24
00:01:10,300 --> 00:01:15,429
is not developed by individuals

25
00:01:12,400 --> 00:01:18,040
developed by highly skilled guys like

26
00:01:15,430 --> 00:01:22,230
racial research institutions and stuff

27
00:01:18,040 --> 00:01:25,510
for doing crime and why it's interesting

28
00:01:22,230 --> 00:01:27,910
anyone is using browser oh yeah anyone

29
00:01:25,510 --> 00:01:29,350
using the internet using browser so yeah

30
00:01:27,910 --> 00:01:32,310
this talk is not about Dom tree

31
00:01:29,350 --> 00:01:36,039
explanation these are story so

32
00:01:32,310 --> 00:01:38,590
we're gonna jump over if we gonna

33
00:01:36,040 --> 00:01:40,750
exploit the web browser how do we start

34
00:01:38,590 --> 00:01:43,510
yeah we actually got a lot of

35
00:01:40,750 --> 00:01:45,880
methodology stuff like this the first

36
00:01:43,510 --> 00:01:48,640
one we are we can go ahead with Watson

37
00:01:45,880 --> 00:01:50,890
Watson wasn't existed decade of like ago

38
00:01:48,640 --> 00:01:52,960
so right now we have webassembly this is

39
00:01:50,890 --> 00:01:55,240
what I assume is JavaScript school

40
00:01:52,960 --> 00:01:56,890
browser range in old fashion and then

41
00:01:55,240 --> 00:01:59,410
known and doing no and I'm referring to

42
00:01:56,890 --> 00:02:01,870
some sort of any wiring simulation that

43
00:01:59,410 --> 00:02:05,080
is yeah not no knee maybe in hips you

44
00:02:01,870 --> 00:02:07,030
pray so the old fashion was starting by

45
00:02:05,080 --> 00:02:10,359
Java droid boy this is the most popular

46
00:02:07,030 --> 00:02:13,120
one we got yeah ah Java actually there's

47
00:02:10,360 --> 00:02:14,580
Java drive-by and silent Java drive-by

48
00:02:13,120 --> 00:02:17,610
which is what

49
00:02:14,580 --> 00:02:18,870
really common in the browser acceptation

50
00:02:17,610 --> 00:02:22,830
technique because it's across the

51
00:02:18,870 --> 00:02:25,470
platform it works very simple it's easy

52
00:02:22,830 --> 00:02:27,360
to develop that exploit it's easy to

53
00:02:25,470 --> 00:02:31,020
debug the java code is open source

54
00:02:27,360 --> 00:02:33,740
oracle guys after sun microsystems we

55
00:02:31,020 --> 00:02:36,960
got why oracle so there was a lot of

56
00:02:33,740 --> 00:02:39,420
stuff happening in that move especially

57
00:02:36,960 --> 00:02:40,680
in the exploit development so yeah at

58
00:02:39,420 --> 00:02:43,260
the atom flash supplier this is

59
00:02:40,680 --> 00:02:47,220
Microsoft Silverlight the ActiveX for

60
00:02:43,260 --> 00:02:50,280
the Internet Explorer exploit gates so

61
00:02:47,220 --> 00:02:52,500
we got black hole we got angular neckla

62
00:02:50,280 --> 00:02:55,470
magnitude the these kind of cool guys

63
00:02:52,500 --> 00:02:58,680
they have a fancy logo they just put

64
00:02:55,470 --> 00:03:00,720
their names if you really dig into the

65
00:02:58,680 --> 00:03:02,490
exploit case and the crime history

66
00:03:00,720 --> 00:03:06,150
you're going to find really as malleable

67
00:03:02,490 --> 00:03:08,490
why says the king of exploit kit is a

68
00:03:06,150 --> 00:03:12,150
black hole why because it's used really

69
00:03:08,490 --> 00:03:15,690
cool delivery techniques if we say about

70
00:03:12,150 --> 00:03:17,910
executing a malware you know like there

71
00:03:15,690 --> 00:03:20,459
is hack form dotnet and the these spot

72
00:03:17,910 --> 00:03:22,560
for dark web and the desirable prime you

73
00:03:20,459 --> 00:03:25,940
pay ten bucks and you get a man were

74
00:03:22,560 --> 00:03:30,090
actually encrypted full undetectable

75
00:03:25,940 --> 00:03:32,670
bypassing the UAC use actual user access

76
00:03:30,090 --> 00:03:34,830
control for Microsoft I think kcl are

77
00:03:32,670 --> 00:03:36,750
ACL are these kind of stuff actually

78
00:03:34,830 --> 00:03:38,070
when you when you have the binary or the

79
00:03:36,750 --> 00:03:41,010
man where it's it's really not that

80
00:03:38,070 --> 00:03:44,010
complicated to run on the system but the

81
00:03:41,010 --> 00:03:46,380
idea is or the complexity is is to

82
00:03:44,010 --> 00:03:48,030
deliver it throughout the browser and we

83
00:03:46,380 --> 00:03:50,430
got a lot of delivery technique within

84
00:03:48,030 --> 00:03:53,340
the browser like if we talk about the

85
00:03:50,430 --> 00:03:58,590
past like the cross the platform one and

86
00:03:53,340 --> 00:04:00,450
so on so when black hole is data

87
00:03:58,590 --> 00:04:02,000
actually we got angular an angler it's

88
00:04:00,450 --> 00:04:04,399
used very advanced

89
00:04:02,000 --> 00:04:07,530
enumeration technique I'm not gonna like

90
00:04:04,400 --> 00:04:09,180
analyze all of the stuff only like the

91
00:04:07,530 --> 00:04:10,920
the stuff that is related to the topic

92
00:04:09,180 --> 00:04:13,980
so it's used like Internet Explorer

93
00:04:10,920 --> 00:04:15,500
Flash Player at a reader zero day

94
00:04:13,980 --> 00:04:19,918
exploit packed

95
00:04:15,500 --> 00:04:22,410
now the Kulemin or enumeration technique

96
00:04:19,918 --> 00:04:24,450
that is used in angular because they are

97
00:04:22,410 --> 00:04:27,090
when an angler is a start this is what

98
00:04:24,450 --> 00:04:28,139
I'm reading in the news it was actually

99
00:04:27,090 --> 00:04:32,758
targeting high in

100
00:04:28,139 --> 00:04:35,099
visual profile and we got to stage of

101
00:04:32,759 --> 00:04:37,050
enumeration the first stage is to

102
00:04:35,099 --> 00:04:39,060
enumerate of course the user engine

103
00:04:37,050 --> 00:04:41,610
diverge in the running operating system

104
00:04:39,060 --> 00:04:45,389
and the use of kind of stuff and then if

105
00:04:41,610 --> 00:04:49,050
it's like Internet Explorer 8 9 10 so it

106
00:04:45,389 --> 00:04:52,560
goes ahead and yeah at 1 this CV which

107
00:04:49,050 --> 00:04:55,139
is recently discovered basically it's

108
00:04:52,560 --> 00:04:57,599
it's an exploit within the XML parser

109
00:04:55,139 --> 00:05:01,199
within the internet support exploiting

110
00:04:57,599 --> 00:05:03,449
it is very basic you just supply a file

111
00:05:01,199 --> 00:05:06,060
that is exists on that system and when

112
00:05:03,449 --> 00:05:08,969
this trying to parse the XML trying to

113
00:05:06,060 --> 00:05:11,219
pass that XML element so it actually

114
00:05:08,969 --> 00:05:13,860
gives it an error messages that's how

115
00:05:11,219 --> 00:05:15,810
they they you know that that foil is

116
00:05:13,860 --> 00:05:19,590
exist on the system or not so based on

117
00:05:15,810 --> 00:05:21,810
the on the error messages but on the

118
00:05:19,590 --> 00:05:24,029
other hand it gods improved like

119
00:05:21,810 --> 00:05:26,789
development when when yeah are they

120
00:05:24,029 --> 00:05:30,960
they used the rest protocol which is

121
00:05:26,789 --> 00:05:34,169
there was actually supplying the the

122
00:05:30,960 --> 00:05:35,849
localhost which point out into the road

123
00:05:34,169 --> 00:05:40,049
directory in the Windows system talking

124
00:05:35,849 --> 00:05:43,919
about Windows 86 so this will a brain

125
00:05:40,050 --> 00:05:45,599
tout the the content or the files within

126
00:05:43,919 --> 00:05:47,128
the directory so what do you get

127
00:05:45,599 --> 00:05:51,360
actually you get these kind of stuff

128
00:05:47,129 --> 00:05:54,150
dummy's hard to read but it was actually

129
00:05:51,360 --> 00:05:57,360
used to enumerate if there is Kaspersky

130
00:05:54,150 --> 00:06:00,270
installed image tool the the Microsoft

131
00:05:57,360 --> 00:06:03,029
exploit multi Gatien to and these kind

132
00:06:00,270 --> 00:06:06,448
of stuff because because they have no

133
00:06:03,029 --> 00:06:08,490
control after running the exploit so

134
00:06:06,449 --> 00:06:10,830
that's why they use the enumeration part

135
00:06:08,490 --> 00:06:14,069
which is I think it's it's a bit

136
00:06:10,830 --> 00:06:17,490
advanced so yeah they basically supply

137
00:06:14,069 --> 00:06:20,370
some sort of vendors if these windows

138
00:06:17,490 --> 00:06:22,560
are exist so they do a different type of

139
00:06:20,370 --> 00:06:24,839
exploitation but this is what the the

140
00:06:22,560 --> 00:06:27,150
cool enumeration technique and who I

141
00:06:24,839 --> 00:06:28,949
they use this kind this kind of

142
00:06:27,150 --> 00:06:31,739
technique I mean what is the purpose

143
00:06:28,949 --> 00:06:33,839
it's very simple when we get an analyst

144
00:06:31,740 --> 00:06:35,699
like someone supplied this into virus or

145
00:06:33,839 --> 00:06:37,800
these kind of stuff so and then I was

146
00:06:35,699 --> 00:06:39,959
get a nightmare and G try to figure out

147
00:06:37,800 --> 00:06:40,630
what is the malware is and how things

148
00:06:39,959 --> 00:06:42,910
work

149
00:06:40,630 --> 00:06:45,969
and basically they supply they know some

150
00:06:42,910 --> 00:06:49,660
file that is existing on the NSPCC and

151
00:06:45,970 --> 00:06:51,640
then they try to make a play around use

152
00:06:49,660 --> 00:06:53,200
after free if you talk about the web

153
00:06:51,640 --> 00:06:55,990
browser you're gonna go ahead with use

154
00:06:53,200 --> 00:06:58,450
after free heaps of prey and a lot of

155
00:06:55,990 --> 00:07:02,440
stuff and myself I love pointing guys so

156
00:06:58,450 --> 00:07:05,110
at pong Pony use after free it's always

157
00:07:02,440 --> 00:07:06,820
been exist till now it says it's exist

158
00:07:05,110 --> 00:07:09,460
so you're gonna find even in the future

159
00:07:06,820 --> 00:07:11,590
ten years later if we stay alive so it's

160
00:07:09,460 --> 00:07:13,690
it's just a yeah it's a it's really

161
00:07:11,590 --> 00:07:15,520
popular the heaps of prying attacks and

162
00:07:13,690 --> 00:07:18,219
this kind of user after free and simple

163
00:07:15,520 --> 00:07:20,979
200 not gonna like dig into it we are

164
00:07:18,220 --> 00:07:23,410
the the like if we say there is a

165
00:07:20,980 --> 00:07:26,110
developer that made an application so

166
00:07:23,410 --> 00:07:30,580
basically he allocates oh it's a

167
00:07:26,110 --> 00:07:32,620
designer right so he used our pointer

168
00:07:30,580 --> 00:07:34,630
called dangling pointer computer science

169
00:07:32,620 --> 00:07:36,790
where we have dangling pointer white

170
00:07:34,630 --> 00:07:40,180
pointer these points will envelope

171
00:07:36,790 --> 00:07:42,550
memory address or object and when that

172
00:07:40,180 --> 00:07:45,520
array of more is afraid so the attacker

173
00:07:42,550 --> 00:07:48,220
goes and reuse that memory they call it

174
00:07:45,520 --> 00:07:51,180
code reuse as well so we got a blog a

175
00:07:48,220 --> 00:07:53,080
blog B block is a freed block B is

176
00:07:51,180 --> 00:07:55,150
controlled by the attacker

177
00:07:53,080 --> 00:07:57,490
they used the previous allocated block

178
00:07:55,150 --> 00:07:59,830
and he try to execute you if you

179
00:07:57,490 --> 00:08:01,690
research about you have UF attacks

180
00:07:59,830 --> 00:08:04,479
you're gonna find like memory leaks this

181
00:08:01,690 --> 00:08:06,640
kind of stuff what it is mainly yeah

182
00:08:04,480 --> 00:08:10,060
used for code execution because nothing

183
00:08:06,640 --> 00:08:13,630
to do with the with the memory address

184
00:08:10,060 --> 00:08:18,840
this is a quick example points are

185
00:08:13,630 --> 00:08:22,090
pointing to an Emma Lake freed reused

186
00:08:18,840 --> 00:08:25,690
get the memory so four years of happy UF

187
00:08:22,090 --> 00:08:29,169
in Firefox in C monkey and it was from

188
00:08:25,690 --> 00:08:32,169
2007 till 2011 and if you really go

189
00:08:29,170 --> 00:08:34,360
until now would say in some sort of UFX

190
00:08:32,169 --> 00:08:36,400
application still exist if you go that

191
00:08:34,360 --> 00:08:37,690
they use like they say disable

192
00:08:36,400 --> 00:08:40,510
JavaScript if you really follow the

193
00:08:37,690 --> 00:08:44,169
Twitter tweets of the guy they say yeah

194
00:08:40,510 --> 00:08:47,950
okay don't use Firefox also so simple

195
00:08:44,169 --> 00:08:50,980
terms how it works I'm gonna show you

196
00:08:47,950 --> 00:08:53,410
the the the POC but in simple terms like

197
00:08:50,980 --> 00:08:54,310
it's a we initializing a very fake V

198
00:08:53,410 --> 00:08:56,709
table

199
00:08:54,310 --> 00:08:59,138
and this vitae will point to a P P STR

200
00:08:56,709 --> 00:09:03,518
which is in the Windows kernel P STR

201
00:08:59,139 --> 00:09:08,019
means binary string it's a Deewar d

202
00:09:03,519 --> 00:09:08,889
double ward to two whites so double is

203
00:09:08,019 --> 00:09:13,480
four byte

204
00:09:08,889 --> 00:09:15,670
each byte is 80 bit and 32 bit we got so

205
00:09:13,480 --> 00:09:18,040
then the allocation for the hip start

206
00:09:15,670 --> 00:09:20,979
and we're filling it with a new shell

207
00:09:18,040 --> 00:09:23,319
code so it's have really vanilla if you

208
00:09:20,980 --> 00:09:25,930
can read my screen you're gonna find

209
00:09:23,319 --> 00:09:28,420
there is an object this is how it works

210
00:09:25,930 --> 00:09:31,300
there is an object and this object we

211
00:09:28,420 --> 00:09:33,160
call it using a foo after calling it we

212
00:09:31,300 --> 00:09:36,040
creating some Unicode that's why we use

213
00:09:33,160 --> 00:09:38,949
an escape over here and then a shell

214
00:09:36,040 --> 00:09:41,889
code to pop-up calculator and then do

215
00:09:38,949 --> 00:09:44,589
the the hips if I have the hip Supriya

216
00:09:41,889 --> 00:09:47,050
walks basically just sort of string just

217
00:09:44,589 --> 00:09:48,220
create swing variable in JavaScript if

218
00:09:47,050 --> 00:09:51,370
you want to play with the hip or the

219
00:09:48,220 --> 00:09:53,379
virtual memory and then you assign some

220
00:09:51,370 --> 00:09:55,600
sort of junky value to that string and

221
00:09:53,379 --> 00:09:57,699
then you add that swing to himself and

222
00:09:55,600 --> 00:09:59,319
then you subtract that string so that's

223
00:09:57,699 --> 00:10:02,979
how it works so we're creating one

224
00:09:59,319 --> 00:10:06,128
thousand fake allocation and this is how

225
00:10:02,980 --> 00:10:09,819
it work now the scary part snowman was

226
00:10:06,129 --> 00:10:12,399
in operation I don't know if you heard

227
00:10:09,819 --> 00:10:15,878
about it but it was targeting really

228
00:10:12,399 --> 00:10:18,790
high individual profile yeah a targeting

229
00:10:15,879 --> 00:10:22,389
United States military guys and guys in

230
00:10:18,790 --> 00:10:25,980
French research institutions and except

231
00:10:22,389 --> 00:10:30,250
right when Lee was walking for Windows

232
00:10:25,980 --> 00:10:32,259
Internet Explorer 10 these yeah without

233
00:10:30,250 --> 00:10:34,240
diving and do the politics but a really

234
00:10:32,259 --> 00:10:37,449
cool technique about this exploit which

235
00:10:34,240 --> 00:10:40,899
is yeah published by fire I it's the

236
00:10:37,449 --> 00:10:43,779
delivery this is the cool technique so

237
00:10:40,899 --> 00:10:47,170
basically a victim visit an HTML webpage

238
00:10:43,779 --> 00:10:49,600
a server reply with an iframe the iframe

239
00:10:47,170 --> 00:10:52,899
connect this to the server again and

240
00:10:49,600 --> 00:10:55,809
then it is called an IMG dot HTML which

241
00:10:52,899 --> 00:10:57,879
is on the other hand place an SWF file

242
00:10:55,809 --> 00:11:01,209
that has an actions to correct this is

243
00:10:57,879 --> 00:11:04,720
where the exploit is and that the the

244
00:11:01,209 --> 00:11:05,349
SWF file actually go ahead and try to to

245
00:11:04,720 --> 00:11:07,740
Fitch

246
00:11:05,350 --> 00:11:11,040
although GPG and me

247
00:11:07,740 --> 00:11:13,589
that image is not a placed on the file

248
00:11:11,040 --> 00:11:15,209
system memory on the file system it's a

249
00:11:13,589 --> 00:11:17,810
place in the memory as an array buffer

250
00:11:15,210 --> 00:11:20,910
so it's like a every Asian technique and

251
00:11:17,810 --> 00:11:24,449
then it's drop in DLL with at 64 and a

252
00:11:20,910 --> 00:11:26,150
DLL read from that txt file and it's a

253
00:11:24,450 --> 00:11:29,040
second stage or and then it's one the

254
00:11:26,150 --> 00:11:33,630
the shell code which is connect back in

255
00:11:29,040 --> 00:11:36,329
a reverse reverse connection so in in in

256
00:11:33,630 --> 00:11:38,580
very simple way we got the URL loader

257
00:11:36,330 --> 00:11:41,130
which makes an internal request this is

258
00:11:38,580 --> 00:11:44,370
a snapshot that I took it and then we

259
00:11:41,130 --> 00:11:48,630
got the array buffer initialized and

260
00:11:44,370 --> 00:11:52,230
then the underscore URL which is yeah

261
00:11:48,630 --> 00:11:56,150
which is make the which is holy the name

262
00:11:52,230 --> 00:11:58,680
for the Jaypee file this is returned

263
00:11:56,150 --> 00:12:01,319
into a loader and that loader returned

264
00:11:58,680 --> 00:12:06,000
into the memory and it gets executed so

265
00:12:01,320 --> 00:12:07,650
what's here it's a buffer array executed

266
00:12:06,000 --> 00:12:09,720
within the memory cell nothing placed on

267
00:12:07,650 --> 00:12:12,000
the file system Adobe Flash I'm not

268
00:12:09,720 --> 00:12:16,529
gonna talk a lot about it so Renault

269
00:12:12,000 --> 00:12:19,050
Java drive-by so yeah if you if you yeah

270
00:12:16,529 --> 00:12:23,459
I mean Java drive-by exploit is very

271
00:12:19,050 --> 00:12:25,410
popular so after you've I mean I I have

272
00:12:23,459 --> 00:12:29,430
no other space over here just only for

273
00:12:25,410 --> 00:12:31,650
one year the Renault is basically a Java

274
00:12:29,430 --> 00:12:33,689
secret engine written in Java which

275
00:12:31,650 --> 00:12:35,670
basically you can yeah implement

276
00:12:33,690 --> 00:12:38,580
JavaScript calls and this kind of dumb

277
00:12:35,670 --> 00:12:40,589
stuff and to the Java itself and then

278
00:12:38,580 --> 00:12:43,680
you build a communication channel but it

279
00:12:40,589 --> 00:12:47,610
has a it's had a bug in its design where

280
00:12:43,680 --> 00:12:50,339
you can initialize a script engine and

281
00:12:47,610 --> 00:12:52,730
you call the JavaScript engine and then

282
00:12:50,339 --> 00:12:55,860
after that you bind it into the applet

283
00:12:52,730 --> 00:12:57,330
at the top it's extending applet so you

284
00:12:55,860 --> 00:13:00,150
want into an applet then you pass an

285
00:12:57,330 --> 00:13:03,450
object and when this object is passed

286
00:13:00,150 --> 00:13:04,980
you actually return an error an error an

287
00:13:03,450 --> 00:13:07,500
error object so basically it's an eighth

288
00:13:04,980 --> 00:13:09,450
of a roll class that native error class

289
00:13:07,500 --> 00:13:12,779
uses to string method that two string

290
00:13:09,450 --> 00:13:15,600
method is not controlled which is you

291
00:13:12,779 --> 00:13:17,070
get like yeah there is no no context

292
00:13:15,600 --> 00:13:18,570
association with the current thread

293
00:13:17,070 --> 00:13:19,990
because in CLE it's it's a runnable

294
00:13:18,570 --> 00:13:24,180
object so it runs it straight

295
00:13:19,990 --> 00:13:27,820
and that's simply you just place the

296
00:13:24,180 --> 00:13:29,680
initiative Metasploit you place the the

297
00:13:27,820 --> 00:13:34,930
stuff that you want to be executed in

298
00:13:29,680 --> 00:13:39,130
Java now I'm gonna go ahead with the no

299
00:13:34,930 --> 00:13:44,170
one will do it I think what I don't have

300
00:13:39,130 --> 00:13:47,410
is this edge so I just built an

301
00:13:44,170 --> 00:13:49,120
application and assembly that's a fully

302
00:13:47,410 --> 00:13:51,310
functional web application that I can

303
00:13:49,120 --> 00:13:54,280
give instruction into the browser and

304
00:13:51,310 --> 00:13:56,050
this code runs without a decoding or

305
00:13:54,280 --> 00:14:00,490
star or something this girl runs in

306
00:13:56,050 --> 00:14:02,819
native way native so if we gonna check

307
00:14:00,490 --> 00:14:02,820
it out

308
00:14:04,050 --> 00:14:18,849
sorry sorry and I was joking

309
00:14:14,190 --> 00:14:21,250
no cheat so yeah basically it's an

310
00:14:18,850 --> 00:14:24,160
assembly application we got yeah you

311
00:14:21,250 --> 00:14:26,530
know some sort of binding section the

312
00:14:24,160 --> 00:14:28,689
chicks in have have some sort of ticks

313
00:14:26,530 --> 00:14:31,060
and then we we doing some assembly calls

314
00:14:28,690 --> 00:14:33,010
to instruct the web browser in order to

315
00:14:31,060 --> 00:14:36,280
put these and and yeah manage these

316
00:14:33,010 --> 00:14:38,890
these stuff the listener for the HTTP

317
00:14:36,280 --> 00:14:43,230
the protocol some some assembly

318
00:14:38,890 --> 00:14:43,230
instruction manual wrote it in right now

319
00:14:54,250 --> 00:15:01,110
we got them all out with it as in half

320
00:14:58,660 --> 00:15:09,160
one inch warning

321
00:15:01,110 --> 00:15:12,190
go ahead so yeah we got some sort of

322
00:15:09,160 --> 00:15:13,780
functionality going on if you inspect

323
00:15:12,190 --> 00:15:15,700
the source code there is no cheat there

324
00:15:13,780 --> 00:15:18,670
is nothing like what the JavaScript it's

325
00:15:15,700 --> 00:15:21,210
it's mainly based in assembly what on

326
00:15:18,670 --> 00:15:23,469
the other hand now if I talk about I

327
00:15:21,210 --> 00:15:26,440
want to fuss the browser for example

328
00:15:23,470 --> 00:15:29,350
write a native assembly code this is

329
00:15:26,440 --> 00:15:32,380
really a pain right so that's why we got

330
00:15:29,350 --> 00:15:34,570
a fancy stuff called web assembly which

331
00:15:32,380 --> 00:15:39,490
is basically it's not an assembly it

332
00:15:34,570 --> 00:15:41,710
it's a it's basically has its own sticks

333
00:15:39,490 --> 00:15:44,020
wall structure which is not not an

334
00:15:41,710 --> 00:15:48,010
assembly but the difference between the

335
00:15:44,020 --> 00:15:49,750
assembly the the web assembly actually

336
00:15:48,010 --> 00:15:55,950
and the JavaScript because we already

337
00:15:49,750 --> 00:15:55,950
have the JavaScript is the web assembly

338
00:15:55,980 --> 00:16:04,060
is a compiler target okay so the web

339
00:16:02,380 --> 00:16:05,530
assembly is a compiler target it's

340
00:16:04,060 --> 00:16:08,859
faster than JavaScript

341
00:16:05,530 --> 00:16:10,569
yeah it's one a code it's runs actually

342
00:16:08,860 --> 00:16:14,800
close to native not native close to

343
00:16:10,570 --> 00:16:16,900
native and then it's a QC c c c++ code

344
00:16:14,800 --> 00:16:20,319
and what is bring to the table

345
00:16:16,900 --> 00:16:26,230
speed portability flexibility this kind

346
00:16:20,320 --> 00:16:28,060
of stuff yeah here you can see that the

347
00:16:26,230 --> 00:16:30,430
JavaScript code new need to be passed

348
00:16:28,060 --> 00:16:33,130
and then compile up to my then execute

349
00:16:30,430 --> 00:16:35,469
only the way assam code need to be

350
00:16:33,130 --> 00:16:37,570
decoded and compiled and if you follow

351
00:16:35,470 --> 00:16:39,400
the rule the the current model zero day

352
00:16:37,570 --> 00:16:41,550
right now I mean the the one that are

353
00:16:39,400 --> 00:16:44,680
published you're gonna find that it's

354
00:16:41,550 --> 00:16:47,109
written in the assembly modules and

355
00:16:44,680 --> 00:16:50,079
there are some modules specifically in

356
00:16:47,110 --> 00:16:52,420
the import and export so all the

357
00:16:50,080 --> 00:16:56,410
browsers right now supported and the

358
00:16:52,420 --> 00:16:59,860
cool part you can write a JavaScript by

359
00:16:56,410 --> 00:17:02,170
calling assembly functions so this is

360
00:16:59,860 --> 00:17:03,940
the difference between the normal

361
00:17:02,170 --> 00:17:07,359
assembly that we know and the textual

362
00:17:03,940 --> 00:17:11,439
format of the wasum

363
00:17:07,359 --> 00:17:14,500
and how the winery format so the Watson

364
00:17:11,439 --> 00:17:16,209
binary structure we got type import

365
00:17:14,500 --> 00:17:18,910
function table memory the global

366
00:17:16,209 --> 00:17:22,630
Explorer start element code and each one

367
00:17:18,910 --> 00:17:25,299
of them is a separate topic but we we

368
00:17:22,630 --> 00:17:27,970
got the custom section which is this is

369
00:17:25,299 --> 00:17:31,059
where the phone already started with the

370
00:17:27,970 --> 00:17:32,920
Watson parser a custom section means

371
00:17:31,059 --> 00:17:36,010
that the section is not exist over here

372
00:17:32,920 --> 00:17:37,630
and that that is passed the checks so

373
00:17:36,010 --> 00:17:39,700
basically why some had a problem with

374
00:17:37,630 --> 00:17:45,000
with with the verification of the order

375
00:17:39,700 --> 00:17:53,500
of this section so and the C code and

376
00:17:45,000 --> 00:17:56,770
see yeah this is place there is a

377
00:17:53,500 --> 00:17:58,360
validate order and this is if the

378
00:17:56,770 --> 00:18:00,790
previous section is a custom section

379
00:17:58,360 --> 00:18:07,330
return true and it's passed so it was

380
00:18:00,790 --> 00:18:13,149
actually a design error I'm gonna talk

381
00:18:07,330 --> 00:18:15,428
about these just flocking web assembly

382
00:18:13,150 --> 00:18:18,640
yeah if you build an application using

383
00:18:15,429 --> 00:18:20,650
web assembly you can have two method for

384
00:18:18,640 --> 00:18:23,590
the delivery one is downloading a file

385
00:18:20,650 --> 00:18:26,919
the second one on the fly on the fly has

386
00:18:23,590 --> 00:18:29,740
exploits also and this is why they only

387
00:18:26,919 --> 00:18:34,600
flies is faster and also it's faster for

388
00:18:29,740 --> 00:18:36,610
the stagers was some personal

389
00:18:34,600 --> 00:18:39,100
exploitation we got some sort of

390
00:18:36,610 --> 00:18:41,439
functions within the within the parser

391
00:18:39,100 --> 00:18:42,699
itself and if you really read up the

392
00:18:41,440 --> 00:18:45,940
code you're gonna end up with a lot of

393
00:18:42,700 --> 00:18:47,620
heap stuff and and you have this is one

394
00:18:45,940 --> 00:18:49,960
example of them we got a function called

395
00:18:47,620 --> 00:18:52,178
get why some buffer from value and this

396
00:18:49,960 --> 00:18:55,270
function actually takes today a dataview

397
00:18:52,179 --> 00:18:57,610
wave buffer and it has a victor and then

398
00:18:55,270 --> 00:19:00,190
this this is passed to another function

399
00:18:57,610 --> 00:19:02,649
which means we will right now have a

400
00:19:00,190 --> 00:19:07,450
buffer twice is copy it we got out of

401
00:19:02,650 --> 00:19:09,820
read out of bounds read and now we we

402
00:19:07,450 --> 00:19:12,429
get memory copy out of that this is how

403
00:19:09,820 --> 00:19:14,110
the POS you look like i passing it out

404
00:19:12,429 --> 00:19:17,490
of you loading it into web assembly

405
00:19:14,110 --> 00:19:21,219
module after creating some fake loops

406
00:19:17,490 --> 00:19:22,990
and we we get type confusion when

407
00:19:21,220 --> 00:19:25,090
with with buffer overflow now I'm gonna

408
00:19:22,990 --> 00:19:35,350
preform a live demo with life more about

409
00:19:25,090 --> 00:19:41,080
using where I am in an exhibition this

410
00:19:35,350 --> 00:19:43,149
exploit is made up by the workers why

411
00:19:41,080 --> 00:19:49,470
the workers used over here it's because

412
00:19:43,150 --> 00:19:49,470
these workers runs in sorry

413
00:19:53,790 --> 00:19:59,980
yeah these workers run in their own

414
00:19:56,350 --> 00:20:02,520
thread so basically we were defining

415
00:19:59,980 --> 00:20:06,610
some constants the allocation for the

416
00:20:02,520 --> 00:20:08,710
spray holders reclaiming getting and

417
00:20:06,610 --> 00:20:12,159
finding the patterns and going out oh

418
00:20:08,710 --> 00:20:14,350
very quick so yeah the reading addresses

419
00:20:12,160 --> 00:20:20,110
the writing addresses the corruption

420
00:20:14,350 --> 00:20:22,750
table reading objects cleaning up

421
00:20:20,110 --> 00:20:26,050
getting the freed memory the shellcode

422
00:20:22,750 --> 00:20:28,180
and yeah the how the RSC is walking

423
00:20:26,050 --> 00:20:33,730
basically this is this boat that I want

424
00:20:28,180 --> 00:20:35,680
to talk about we have awasum wasn't

425
00:20:33,730 --> 00:20:40,990
converted into into Hicks and this

426
00:20:35,680 --> 00:20:43,240
loaded into inside until ray and after

427
00:20:40,990 --> 00:20:45,400
loading it we creating an animus and we

428
00:20:43,240 --> 00:20:47,350
passing an animus definition for our

429
00:20:45,400 --> 00:20:49,720
Assam aerial loading the code that we

430
00:20:47,350 --> 00:20:52,439
define over here and a nun for table

431
00:20:49,720 --> 00:20:56,410
Jake then we serve this as an export

432
00:20:52,440 --> 00:20:59,590
export function which we it gonna run in

433
00:20:56,410 --> 00:21:01,810
osm file right after that we do some

434
00:20:59,590 --> 00:21:04,149
loop on the shell code we verify some

435
00:21:01,810 --> 00:21:07,740
stuff the post meshes over here is not

436
00:21:04,150 --> 00:21:10,300
an HTTP POST machine it's more about the

437
00:21:07,740 --> 00:21:12,990
to work and self so we basically pass

438
00:21:10,300 --> 00:21:16,180
the worker is the thread and we pass

439
00:21:12,990 --> 00:21:23,440
process to that thread so it got one in

440
00:21:16,180 --> 00:21:26,020
its own thread and initialization we

441
00:21:23,440 --> 00:21:28,450
trigger the free into a five-block cards

442
00:21:26,020 --> 00:21:30,960
we try to find the information in the

443
00:21:28,450 --> 00:21:33,750
log it's it's it's like

444
00:21:30,960 --> 00:21:36,470
yeah except Lloyd but let's see it in

445
00:21:33,750 --> 00:21:40,260
action this exploit I hosted it on my

446
00:21:36,470 --> 00:21:45,470
using Google for a chrome right now my

447
00:21:40,260 --> 00:21:45,470
system is patch everything is who I

448
00:21:45,890 --> 00:21:50,840
hosted it on my website I hope you talk

449
00:21:52,160 --> 00:21:58,670
again a brute force for the making some

450
00:21:55,770 --> 00:22:02,780
attempt for the allocation on the buffer

451
00:21:58,670 --> 00:22:07,590
gonna take some time for brute forcing

452
00:22:02,780 --> 00:22:16,920
its brute forcing and we got the end

453
00:22:07,590 --> 00:22:20,030
catism West is really dangerous moving

454
00:22:16,920 --> 00:22:23,660
on we got the lava story between a CA

455
00:22:20,030 --> 00:22:26,700
SMGs and just-in-time compiler and

456
00:22:23,660 --> 00:22:31,140
basically it's the same idea for the

457
00:22:26,700 --> 00:22:32,850
heap spray of the flash player the guy

458
00:22:31,140 --> 00:22:34,920
who came with this kind of exploitation

459
00:22:32,850 --> 00:22:38,040
action is really cool because it doesn't

460
00:22:34,920 --> 00:22:42,090
use any code reuse so there's basically

461
00:22:38,040 --> 00:22:43,920
no no brute force nothing is going on so

462
00:22:42,090 --> 00:22:48,530
yeah just to see it in action very quick

463
00:22:43,920 --> 00:22:48,530
a piece of junk

464
00:22:48,860 --> 00:22:55,260
virtual allocation read/write/execute

465
00:22:51,770 --> 00:22:57,810
three bytes Taser and the virtual memory

466
00:22:55,260 --> 00:23:03,270
right after that we got an MSF venom

467
00:22:57,810 --> 00:23:05,850
encoded to SMGs payload we are getting

468
00:23:03,270 --> 00:23:07,980
some yeah the the fake objects moving

469
00:23:05,850 --> 00:23:11,090
about the blocks creating this

470
00:23:07,980 --> 00:23:15,080
allocation getting the addresses

471
00:23:11,090 --> 00:23:17,699
triggering the worker same technique

472
00:23:15,080 --> 00:23:24,030
using the back end it's right and then

473
00:23:17,700 --> 00:23:26,420
passing the the process getting the

474
00:23:24,030 --> 00:23:30,330
offset looping over the blocks

475
00:23:26,420 --> 00:23:32,280
triggering it by creating fake SVG doing

476
00:23:30,330 --> 00:23:36,060
some sort of animation in order to

477
00:23:32,280 --> 00:23:40,730
allocate some sort of memory stuff now

478
00:23:36,060 --> 00:23:40,730
trying to I hope it works

479
00:23:43,519 --> 00:23:51,859
okay and we got the CMD and instead of

480
00:23:49,169 --> 00:23:51,859
the calculator

481
00:23:52,399 --> 00:24:10,758
moving on yeah it's the same one that I

482
00:24:06,629 --> 00:24:15,090
see here right so yeah the the

483
00:24:10,759 --> 00:24:19,139
techniques for delivering the web

484
00:24:15,090 --> 00:24:21,330
browser exploit it's basically when I

485
00:24:19,139 --> 00:24:22,978
actually was entering into this everyone

486
00:24:21,330 --> 00:24:25,739
telling me don't click a link don't

487
00:24:22,979 --> 00:24:29,159
click a link so I was really afraid but

488
00:24:25,739 --> 00:24:30,289
right now it's a I think it's it true we

489
00:24:29,159 --> 00:24:33,179
got a lot of social engineering

490
00:24:30,289 --> 00:24:35,489
techniques that has been it's been

491
00:24:33,179 --> 00:24:36,960
delivered one cool things about them is

492
00:24:35,489 --> 00:24:39,210
you enumerate the system and before any

493
00:24:36,960 --> 00:24:41,909
managing the system actually what they

494
00:24:39,210 --> 00:24:44,909
do they create a pixel one pixel em is

495
00:24:41,909 --> 00:24:47,759
right so they host this image on any

496
00:24:44,909 --> 00:24:49,950
kind of server and when you go to your

497
00:24:47,759 --> 00:24:52,950
gmail account in order to insert an

498
00:24:49,950 --> 00:24:55,289
image from a URL what what you give on

499
00:24:52,950 --> 00:24:57,779
the server side you retain a base64 jiff

500
00:24:55,289 --> 00:25:00,090
so if the Googlebot is requesting that

501
00:24:57,779 --> 00:25:02,879
that image that how how you insert an

502
00:25:00,090 --> 00:25:05,399
image into your Gmail browser it gonna

503
00:25:02,879 --> 00:25:07,529
go fetch that and on the other hand when

504
00:25:05,399 --> 00:25:09,449
a request happens on the server side you

505
00:25:07,529 --> 00:25:12,989
grab that quiz so who requested that

506
00:25:09,450 --> 00:25:15,840
image so you get the request data out

507
00:25:12,989 --> 00:25:18,299
looks sometimes it blocks the the image

508
00:25:15,840 --> 00:25:21,389
loading image from external size but to

509
00:25:18,299 --> 00:25:23,759
be honest when you load an image from

510
00:25:21,389 --> 00:25:25,559
external side it's really a problem it's

511
00:25:23,759 --> 00:25:29,970
not only about enumerate in the system

512
00:25:25,559 --> 00:25:32,399
now if you and my research and you can't

513
00:25:29,970 --> 00:25:36,779
find this information documented these

514
00:25:32,399 --> 00:25:39,658
guys load an iframe by default so they

515
00:25:36,779 --> 00:25:41,940
don't block it what means is that you

516
00:25:39,659 --> 00:25:44,460
send an email to the victim right and

517
00:25:41,940 --> 00:25:48,779
then you inject an iframe to your

518
00:25:44,460 --> 00:25:50,820
payload and when this get executed it

519
00:25:48,779 --> 00:25:53,520
gonna be executed within the email and

520
00:25:50,820 --> 00:25:55,740
what the email use just Google what

521
00:25:53,520 --> 00:25:57,720
engine each email one of them is using

522
00:25:55,740 --> 00:26:00,690
so I think this is the next generation

523
00:25:57,720 --> 00:26:01,470
for the exploit kit the hidden part my

524
00:26:00,690 --> 00:26:02,910
research

525
00:26:01,470 --> 00:26:05,430
no one is mentioning this is the black

526
00:26:02,910 --> 00:26:07,680
hole for web browser predation no one is

527
00:26:05,430 --> 00:26:11,100
writing about it mainly the Dom tree

528
00:26:07,680 --> 00:26:14,490
explanation like XSS these stuff

529
00:26:11,100 --> 00:26:16,949
aisel type of acceleration but on the

530
00:26:14,490 --> 00:26:19,830
other hand you can set an item get an

531
00:26:16,950 --> 00:26:22,980
item remove item clear this what what

532
00:26:19,830 --> 00:26:25,679
this happens in the browser local store

533
00:26:22,980 --> 00:26:28,920
in 2018 I did the research that is I was

534
00:26:25,680 --> 00:26:31,250
able to create an exploit that plays a

535
00:26:28,920 --> 00:26:35,250
swing shellcode and to the browser

536
00:26:31,250 --> 00:26:38,520
browser storage but the only missing

537
00:26:35,250 --> 00:26:41,610
part that I had how I can trigger that

538
00:26:38,520 --> 00:26:44,970
payload without going to execute

539
00:26:41,610 --> 00:26:47,070
something else the problem that I had

540
00:26:44,970 --> 00:26:50,280
actually what I did I created an exploit

541
00:26:47,070 --> 00:26:52,970
GS which is yeah duh yeah it's very

542
00:26:50,280 --> 00:26:56,370
basic it's a store some some sort of

543
00:26:52,970 --> 00:26:58,710
shell code that is yeah it get it from a

544
00:26:56,370 --> 00:27:02,159
target or THC which is like a calculator

545
00:26:58,710 --> 00:27:04,470
and then it's it an item within that the

546
00:27:02,160 --> 00:27:07,770
local storage and then we get that item

547
00:27:04,470 --> 00:27:09,780
but how the problem is on the browser we

548
00:27:07,770 --> 00:27:13,020
got a lot of limitations actually this

549
00:27:09,780 --> 00:27:15,540
is beyond like buffer overflow attacks

550
00:27:13,020 --> 00:27:17,160
is how I can let the browser's read that

551
00:27:15,540 --> 00:27:19,020
shellcode and getting it executed I

552
00:27:17,160 --> 00:27:21,720
can't make the browser read there but

553
00:27:19,020 --> 00:27:24,210
how I can get it executed so I created

554
00:27:21,720 --> 00:27:27,810
an extractor and we're gonna run that

555
00:27:24,210 --> 00:27:31,020
extractor and gonna go grab the this

556
00:27:27,810 --> 00:27:32,940
string within the browser and get it

557
00:27:31,020 --> 00:27:35,220
executed so this is was the only missing

558
00:27:32,940 --> 00:27:37,050
part but it's still ongoing research

559
00:27:35,220 --> 00:27:39,000
whatever similarly is still ongoing

560
00:27:37,050 --> 00:27:41,879
you're gonna find a lot of bug if you do

561
00:27:39,000 --> 00:27:43,440
static analysis this is only the the

562
00:27:41,880 --> 00:27:47,040
thing that I can show to you in 30

563
00:27:43,440 --> 00:27:49,080
minutes ah the conclusion browser or

564
00:27:47,040 --> 00:27:51,750
exploitation basically is a science in

565
00:27:49,080 --> 00:27:54,060
its own so it's it it's a it's the most

566
00:27:51,750 --> 00:27:57,330
complex topic is in a Brian binary

567
00:27:54,060 --> 00:27:59,610
exploitation but the resources are

568
00:27:57,330 --> 00:28:02,790
really found handy whenever we had to

569
00:27:59,610 --> 00:28:05,459
enter this this is base is the exploit

570
00:28:02,790 --> 00:28:07,770
DVD POC the Google research team the

571
00:28:05,460 --> 00:28:10,470
binary acceptation debugging for

572
00:28:07,770 --> 00:28:12,379
: if you don't always see II it's really

573
00:28:10,470 --> 00:28:14,820
cool

574
00:28:12,380 --> 00:28:18,179
these are the credits for the guys the

575
00:28:14,820 --> 00:28:21,419
references and me and Pony if you've got

576
00:28:18,179 --> 00:28:26,130
a questions so that's pretty much it

577
00:28:21,420 --> 00:28:28,200
Thank You Jimmy awesome yeah I'm sure

578
00:28:26,130 --> 00:28:30,600
people have questions for you

579
00:28:28,200 --> 00:28:37,590
in the break we're gonna have a quick

580
00:28:30,600 --> 00:28:40,889
break but yeah yeah Jeff a website that

581
00:28:37,590 --> 00:28:44,250
you can point people to for examples in

582
00:28:40,890 --> 00:28:47,460
your blog whatever yeah these materials

583
00:28:44,250 --> 00:28:49,800
will be published so you're gonna find

584
00:28:47,460 --> 00:28:53,840
it on sexy and and on buffer overflows

585
00:28:49,800 --> 00:28:56,840
dotnet where I post stuff about research

586
00:28:53,840 --> 00:28:59,520
scientific research here recently was

587
00:28:56,840 --> 00:29:01,020
doing research in the compiler design

588
00:28:59,520 --> 00:29:03,480
programming language design how we can

589
00:29:01,020 --> 00:29:05,790
find explanation there so you can find a

590
00:29:03,480 --> 00:29:08,929
lot of cool stuff over that cool so

591
00:29:05,790 --> 00:29:08,928
thanks again Jamil

