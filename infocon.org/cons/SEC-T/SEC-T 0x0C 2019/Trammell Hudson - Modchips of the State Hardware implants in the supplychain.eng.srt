1
00:00:03,290 --> 00:00:09,120
so I'm really glad to be here to talk

2
00:00:06,359 --> 00:00:11,580
about the Bloomberg Super Micro Hardware

3
00:00:09,120 --> 00:00:14,730
implants were one year on and

4
00:00:11,580 --> 00:00:17,550
unfortunately I have to start this talk

5
00:00:14,730 --> 00:00:19,550
with the same disclaimer that I still

6
00:00:17,550 --> 00:00:22,650
don't know the story behind the story

7
00:00:19,550 --> 00:00:26,370
yeah we don't know what happened with

8
00:00:22,650 --> 00:00:28,919
these Hardware implants but what I do

9
00:00:26,370 --> 00:00:30,930
know is a lot about firmware and

10
00:00:28,920 --> 00:00:33,510
hardware security I've been working in

11
00:00:30,930 --> 00:00:35,519
this field for many years starting with

12
00:00:33,510 --> 00:00:38,160
the Thunderstrike firmware under ability

13
00:00:35,520 --> 00:00:39,510
on MacBooks Thunderstrike - I've also

14
00:00:38,160 --> 00:00:42,150
been thinking a lot about how do we

15
00:00:39,510 --> 00:00:44,879
build more secure systems with commodity

16
00:00:42,150 --> 00:00:47,790
Hardware with the heads firmware project

17
00:00:44,880 --> 00:00:49,530
and also the Linux boot from our project

18
00:00:47,790 --> 00:00:51,269
in collaboration with Google and

19
00:00:49,530 --> 00:00:55,500
Facebook for building more secure

20
00:00:51,270 --> 00:00:59,130
servers so when the bloomberg story came

21
00:00:55,500 --> 00:01:02,280
out in October of last year I was really

22
00:00:59,130 --> 00:01:04,049
interested about what because these are

23
00:01:02,280 --> 00:01:05,610
the sorts of things that we've been

24
00:01:04,049 --> 00:01:07,799
thinking about how do we defend against

25
00:01:05,610 --> 00:01:10,979
and the part that I found really

26
00:01:07,799 --> 00:01:13,439
interesting was in this photo

27
00:01:10,979 --> 00:01:16,590
illustration they highlight a part of

28
00:01:13,439 --> 00:01:19,109
the board that is exactly where I would

29
00:01:16,590 --> 00:01:22,219
put a hardware implant if I were to

30
00:01:19,109 --> 00:01:26,548
build one that interfaced with the BMC

31
00:01:22,219 --> 00:01:28,859
so that gave you lended some credibility

32
00:01:26,549 --> 00:01:33,029
to the story to me at least the

33
00:01:28,859 --> 00:01:34,439
technical feasibility of it and a lot of

34
00:01:33,029 --> 00:01:37,109
other folks in the in the security

35
00:01:34,439 --> 00:01:39,059
community had very similar views you

36
00:01:37,109 --> 00:01:40,919
know Matthew Garrett said of course if

37
00:01:39,060 --> 00:01:44,850
you want to target servers the BMC is

38
00:01:40,920 --> 00:01:47,999
the right place to do it san Rio said

39
00:01:44,850 --> 00:01:51,178
yes the supply chains are a weak link in

40
00:01:47,999 --> 00:01:53,458
building these sorts of systems but not

41
00:01:51,179 --> 00:01:57,479
everyone thought that this was plausible

42
00:01:53,459 --> 00:01:59,159
and we spent a lot of time sore debating

43
00:01:57,479 --> 00:02:00,560
you know what was going on with this

44
00:01:59,159 --> 00:02:03,119
story

45
00:02:00,560 --> 00:02:05,279
so let's have a quick review because it

46
00:02:03,119 --> 00:02:07,799
has been a year about what Bloomberg

47
00:02:05,279 --> 00:02:11,670
alleged in the Blume hat the big hack

48
00:02:07,799 --> 00:02:16,200
story so that the key claims that they

49
00:02:11,670 --> 00:02:18,690
made were that Amazon found

50
00:02:16,200 --> 00:02:20,819
something on a super micro server that

51
00:02:18,690 --> 00:02:23,520
they sent to a tester about the size of

52
00:02:20,819 --> 00:02:26,310
a grain of rice that look like a signal

53
00:02:23,520 --> 00:02:27,959
conditioning coupler on the mainboard

54
00:02:26,310 --> 00:02:30,510
that was not part of the original design

55
00:02:27,959 --> 00:02:32,550
and that this connected to the base

56
00:02:30,510 --> 00:02:36,390
board management controller and it was

57
00:02:32,550 --> 00:02:38,459
able to give the attackers access to the

58
00:02:36,390 --> 00:02:41,100
system even when it was crashed or

59
00:02:38,459 --> 00:02:43,350
turned off and that first that last part

60
00:02:41,100 --> 00:02:44,760
sounds a little kind of hyperbolic that

61
00:02:43,350 --> 00:02:46,650
if the machine is crashed or turned off

62
00:02:44,760 --> 00:02:49,290
you wouldn't expect an attacker to be

63
00:02:46,650 --> 00:02:50,610
able to do anything except that's what

64
00:02:49,290 --> 00:02:55,950
the base board management controller

65
00:02:50,610 --> 00:02:57,150
does the BMC runs even when the main CPU

66
00:02:55,950 --> 00:02:59,100
is turned off

67
00:02:57,150 --> 00:03:01,500
in fact it's connected to the power

68
00:02:59,100 --> 00:03:05,299
supply and is what turns the system on

69
00:03:01,500 --> 00:03:07,230
when you want it to cycle power and

70
00:03:05,299 --> 00:03:09,450
because you want to be able to cycle

71
00:03:07,230 --> 00:03:12,929
servers remotely it's connected to the

72
00:03:09,450 --> 00:03:14,880
network it also provides access to the

73
00:03:12,930 --> 00:03:18,840
serial console of the machine so you can

74
00:03:14,880 --> 00:03:20,820
do BIOS updates and things most of them

75
00:03:18,840 --> 00:03:24,150
also have a USB interface so they can

76
00:03:20,820 --> 00:03:27,239
provide file systems to do unattended

77
00:03:24,150 --> 00:03:29,280
operating system installs a lot of

78
00:03:27,239 --> 00:03:31,410
people want to use their system there

79
00:03:29,280 --> 00:03:33,810
are servers with remote consoles so they

80
00:03:31,410 --> 00:03:36,769
tend to have VGA which means they have

81
00:03:33,810 --> 00:03:40,280
PCIe access which means they can also do

82
00:03:36,769 --> 00:03:43,019
direct memory access to the host memory

83
00:03:40,280 --> 00:03:45,810
many of them are also MUX tin to the spy

84
00:03:43,019 --> 00:03:47,970
bus that the x86 firmware is stored on

85
00:03:45,810 --> 00:03:50,609
which means they can potentially change

86
00:03:47,970 --> 00:03:53,850
the firmware that the system runs at at

87
00:03:50,609 --> 00:03:54,750
boot and a lot of them are also amongst

88
00:03:53,850 --> 00:03:57,329
into the LPC

89
00:03:54,750 --> 00:04:01,049
which gives them access to secrets that

90
00:03:57,329 --> 00:04:03,989
are sealed in the TPM so this device is

91
00:04:01,049 --> 00:04:07,890
connected to every important piece of

92
00:04:03,989 --> 00:04:09,239
the server and we would hope that it

93
00:04:07,890 --> 00:04:10,980
would be one of the most hardened

94
00:04:09,239 --> 00:04:15,930
lockdown parts of the system

95
00:04:10,980 --> 00:04:20,789
unfortunately it's not as the is your

96
00:04:15,930 --> 00:04:24,870
security program manager points out the

97
00:04:20,789 --> 00:04:27,330
BMC's are typically insecure they have

98
00:04:24,870 --> 00:04:29,930
no protection against unauthorized

99
00:04:27,330 --> 00:04:32,609
updates they typically have no

100
00:04:29,930 --> 00:04:34,670
for the user to run code on them to even

101
00:04:32,610 --> 00:04:39,000
detect if an attack has happened and

102
00:04:34,670 --> 00:04:41,760
they have no way to recover from one of

103
00:04:39,000 --> 00:04:43,650
these sorts of attacks and additionally

104
00:04:41,760 --> 00:04:46,260
they typically don't participate in any

105
00:04:43,650 --> 00:04:47,460
sort of remote attestation so there's no

106
00:04:46,260 --> 00:04:50,000
way for them to prove what they're

107
00:04:47,460 --> 00:04:52,500
running and that's a really bad

108
00:04:50,000 --> 00:04:55,890
situation for such an important piece of

109
00:04:52,500 --> 00:04:59,130
the system so going back to the

110
00:04:55,890 --> 00:05:01,500
Bloomberg article they also claimed that

111
00:04:59,130 --> 00:05:05,640
there were 30 companies affected

112
00:05:01,500 --> 00:05:07,740
including Apple and that Apple had

113
00:05:05,640 --> 00:05:12,270
independently found a problem with Super

114
00:05:07,740 --> 00:05:15,420
Micro and it reported to the FBI and

115
00:05:12,270 --> 00:05:19,320
that Apple had removed Super Micro from

116
00:05:15,420 --> 00:05:21,150
their supplier list again these are the

117
00:05:19,320 --> 00:05:25,230
allegations from the article but this

118
00:05:21,150 --> 00:05:29,159
does tie into a story that came out back

119
00:05:25,230 --> 00:05:31,290
in not 2016-2017 that Apple had dumped

120
00:05:29,160 --> 00:05:33,390
Super Micro as a supplier there were

121
00:05:31,290 --> 00:05:35,430
never any further updates as to what

122
00:05:33,390 --> 00:05:39,020
happened there but it potentially

123
00:05:35,430 --> 00:05:44,010
provides some corroboration to the story

124
00:05:39,020 --> 00:05:46,169
so last set of claims in the article was

125
00:05:44,010 --> 00:05:48,270
that some of the systems were embedded

126
00:05:46,170 --> 00:05:49,590
between layers and the PCB and we'll

127
00:05:48,270 --> 00:05:53,849
talk a little bit about what that would

128
00:05:49,590 --> 00:05:56,460
mean and then also that the the Chinese

129
00:05:53,850 --> 00:06:00,240
People's Liberation Army was in charge

130
00:05:56,460 --> 00:06:02,520
of building this attack and subversion

131
00:06:00,240 --> 00:06:04,410
Super Micro and that's where there's

132
00:06:02,520 --> 00:06:06,990
potentially some geopolitics involved

133
00:06:04,410 --> 00:06:09,600
and again I don't know anything about

134
00:06:06,990 --> 00:06:13,560
that side of it I'm just looking at the

135
00:06:09,600 --> 00:06:16,380
technical feasibility so considering how

136
00:06:13,560 --> 00:06:18,660
explosive those claims are we would hope

137
00:06:16,380 --> 00:06:21,170
they'd be really well sourced Bloomberg

138
00:06:18,660 --> 00:06:24,630
says they have 17 anonymous sources

139
00:06:21,170 --> 00:06:28,200
including national security officials

140
00:06:24,630 --> 00:06:32,490
the people inside of AWS and senior

141
00:06:28,200 --> 00:06:34,080
insiders at Apple Bloomberg continues to

142
00:06:32,490 --> 00:06:38,310
stand by their story

143
00:06:34,080 --> 00:06:43,260
the editors litt claimed to have spoken

144
00:06:38,310 --> 00:06:46,470
with these sources and to trust them but

145
00:06:43,260 --> 00:06:48,930
publicly it's a different story everyone

146
00:06:46,470 --> 00:06:53,280
involved and named in the story has

147
00:06:48,930 --> 00:06:56,520
denied it the office of Director of

148
00:06:53,280 --> 00:07:00,140
National Intelligence said that they've

149
00:06:56,520 --> 00:07:03,990
seen no evidence of a supply chain hack

150
00:07:00,140 --> 00:07:05,940
AWS wrote on their blog that they've at

151
00:07:03,990 --> 00:07:08,010
no time have they found anything with

152
00:07:05,940 --> 00:07:09,960
Supermicro and they've not engaged in

153
00:07:08,010 --> 00:07:13,260
anything any investigations with the

154
00:07:09,960 --> 00:07:15,780
government Apple was even more blunt

155
00:07:13,260 --> 00:07:22,289
with Tim Cook saying there is no truth

156
00:07:15,780 --> 00:07:25,409
to this story so it seems like the

157
00:07:22,290 --> 00:07:29,040
people involved are vehemently denying

158
00:07:25,410 --> 00:07:31,260
it Bloomberg standing by it you know

159
00:07:29,040 --> 00:07:33,240
again we don't know what's happening

160
00:07:31,260 --> 00:07:37,530
behind that story but we can look at the

161
00:07:33,240 --> 00:07:39,420
technical side and super micro CEO wrote

162
00:07:37,530 --> 00:07:42,900
a two-page letter in which he addressed

163
00:07:39,420 --> 00:07:45,720
some of the technical issues he talked

164
00:07:42,900 --> 00:07:47,729
about that things that they've done in

165
00:07:45,720 --> 00:07:50,340
their manufacturing process to try to

166
00:07:47,730 --> 00:07:53,460
prevent unauthorized alteration of the

167
00:07:50,340 --> 00:07:59,549
boards as well as ways that they could

168
00:07:53,460 --> 00:08:02,370
detect these alterations and when a PCB

169
00:07:59,550 --> 00:08:04,260
is manufactured this is not super micros

170
00:08:02,370 --> 00:08:06,450
facility this is a small contract

171
00:08:04,260 --> 00:08:10,650
manufacturer I visited Shenzhen to try

172
00:08:06,450 --> 00:08:12,479
to understand how PCBs are made the

173
00:08:10,650 --> 00:08:14,700
process starts with these bare copper

174
00:08:12,480 --> 00:08:17,490
boards that have holes drilled in them

175
00:08:14,700 --> 00:08:20,039
for where components or signals have to

176
00:08:17,490 --> 00:08:24,300
be routed that are then electroplated

177
00:08:20,040 --> 00:08:28,560
and then the the actual connections are

178
00:08:24,300 --> 00:08:31,350
etched onto the onto the board and these

179
00:08:28,560 --> 00:08:33,299
bare boards are then optically scanned

180
00:08:31,350 --> 00:08:35,159
to verify that all of the connections

181
00:08:33,299 --> 00:08:36,959
that are supposed to be there there and

182
00:08:35,159 --> 00:08:40,829
that there are no breaks in any of the

183
00:08:36,960 --> 00:08:44,280
wires if someone wanted to subvert this

184
00:08:40,830 --> 00:08:47,190
process they would have to both modify

185
00:08:44,280 --> 00:08:51,030
the drill files or the mask images as

186
00:08:47,190 --> 00:08:54,060
well as the verification so that's quite

187
00:08:51,030 --> 00:08:57,140
a few different contractors who would

188
00:08:54,060 --> 00:09:00,479
have to be involved in that process

189
00:08:57,140 --> 00:09:03,660
the those bare boards are then laminated

190
00:09:00,480 --> 00:09:05,730
together in different layers so if a

191
00:09:03,660 --> 00:09:09,870
part were to be inserted inside it would

192
00:09:05,730 --> 00:09:11,970
have to be done at this stage and the

193
00:09:09,870 --> 00:09:13,920
board's once they're laminated they're

194
00:09:11,970 --> 00:09:17,460
then tested either at the flying probe

195
00:09:13,920 --> 00:09:20,520
or a bed of nails to verify that all of

196
00:09:17,460 --> 00:09:22,500
the multi-layer connections are present

197
00:09:20,520 --> 00:09:26,069
so if there's any part that has changed

198
00:09:22,500 --> 00:09:28,710
the connectivity by first we being

199
00:09:26,070 --> 00:09:31,800
laminated in there it would be detected

200
00:09:28,710 --> 00:09:33,360
in these stages and so that's yet

201
00:09:31,800 --> 00:09:36,390
another set of contractors that would

202
00:09:33,360 --> 00:09:38,820
have to be subverted that it's not

203
00:09:36,390 --> 00:09:42,090
outside the realm of reason but it's

204
00:09:38,820 --> 00:09:44,010
also really bad for BM to have any sort

205
00:09:42,090 --> 00:09:46,170
of cover story because if it happens at

206
00:09:44,010 --> 00:09:49,710
any of these stages it would be obvious

207
00:09:46,170 --> 00:09:51,420
where who was involved it's also really

208
00:09:49,710 --> 00:09:53,400
bad for containment

209
00:09:51,420 --> 00:09:55,290
because at this point it's not known

210
00:09:53,400 --> 00:09:57,630
where these boards are going to go so

211
00:09:55,290 --> 00:10:00,750
they would have to be installing them in

212
00:09:57,630 --> 00:10:04,710
almost all of them to be able to ensure

213
00:10:00,750 --> 00:10:08,550
that they've reached their targets going

214
00:10:04,710 --> 00:10:10,320
back to the super micro letter they also

215
00:10:08,550 --> 00:10:12,630
point out that they have employees on

216
00:10:10,320 --> 00:10:15,060
site with the companies when these

217
00:10:12,630 --> 00:10:17,160
things are being manufactured and what I

218
00:10:15,060 --> 00:10:19,410
found in Shenzhen was that most of the

219
00:10:17,160 --> 00:10:21,600
companies I talked to also sent people

220
00:10:19,410 --> 00:10:23,640
into the clean rooms of the

221
00:10:21,600 --> 00:10:26,870
manufacturing facilities to watch the

222
00:10:23,640 --> 00:10:29,460
process where the the parts are being

223
00:10:26,870 --> 00:10:30,810
installed on the on the boards and the

224
00:10:29,460 --> 00:10:34,740
they're sent through the surface mount

225
00:10:30,810 --> 00:10:36,869
assembly lines the reason most companies

226
00:10:34,740 --> 00:10:38,610
are doing this is not for security but

227
00:10:36,870 --> 00:10:41,310
what they're concerned about is the

228
00:10:38,610 --> 00:10:44,310
quality and the sources of the parts

229
00:10:41,310 --> 00:10:47,579
most of these surface mount parts are

230
00:10:44,310 --> 00:10:50,459
bought in bulk and by the contract

231
00:10:47,580 --> 00:10:53,280
manufacturer and it's not always clear

232
00:10:50,460 --> 00:10:54,930
where they're coming from that in China

233
00:10:53,280 --> 00:10:57,980
you can find a lot of places that are

234
00:10:54,930 --> 00:11:00,420
taking scrap electronics desoldering

235
00:10:57,980 --> 00:11:03,860
components and then selling them by the

236
00:11:00,420 --> 00:11:07,079
kilo in some of these these markets and

237
00:11:03,860 --> 00:11:09,540
these second-hand parts tend to be of

238
00:11:07,080 --> 00:11:12,180
lower quality none

239
00:11:09,540 --> 00:11:15,060
probably not going to be sabotage but

240
00:11:12,180 --> 00:11:18,959
it's a concern for the reliability for

241
00:11:15,060 --> 00:11:20,579
the manufacturers there's also a lot of

242
00:11:18,959 --> 00:11:23,099
counterfeit parts that are being made

243
00:11:20,579 --> 00:11:26,579
just to reduce the price for the

244
00:11:23,100 --> 00:11:28,769
contract manufacturers the FTDI cereal

245
00:11:26,579 --> 00:11:30,630
chips a few years ago were being

246
00:11:28,769 --> 00:11:35,790
counterfeited very heavily and in fact

247
00:11:30,630 --> 00:11:39,360
this to the point where the the FTDI

248
00:11:35,790 --> 00:11:43,800
driver manufacturer was trying to detect

249
00:11:39,360 --> 00:11:45,720
and brick the counterfeit ones the folks

250
00:11:43,800 --> 00:11:48,420
at Zepto bar is d capsulated two chips

251
00:11:45,720 --> 00:11:50,850
and found that the counterfeits are not

252
00:11:48,420 --> 00:11:52,979
even built on the same dye they have a

253
00:11:50,850 --> 00:11:54,660
completely different cpu architecture

254
00:11:52,980 --> 00:11:57,720
that is running software that's

255
00:11:54,660 --> 00:12:00,029
pretending to be the original and this

256
00:11:57,720 --> 00:12:03,449
was affecting hundreds of manufacturers

257
00:12:00,029 --> 00:12:05,550
so it is definitely feasible for

258
00:12:03,449 --> 00:12:11,819
counterfeits to end up in the supply

259
00:12:05,550 --> 00:12:13,740
chain the the CEO continues that they do

260
00:12:11,819 --> 00:12:16,079
x-rays of their main boards which would

261
00:12:13,740 --> 00:12:18,810
detect any sort of parts laminated

262
00:12:16,079 --> 00:12:23,609
inside and it's pretty neat what you can

263
00:12:18,810 --> 00:12:25,319
see on when you x-ray a system active

264
00:12:23,610 --> 00:12:27,930
components like chips tend to be pretty

265
00:12:25,319 --> 00:12:31,260
obvious and fairly easy to distinguish

266
00:12:27,930 --> 00:12:33,870
from passives like SMD resistors or

267
00:12:31,260 --> 00:12:38,930
capacitors so if somebody had tried to

268
00:12:33,870 --> 00:12:41,670
disguise something as a as a signal

269
00:12:38,930 --> 00:12:44,550
conditioning coupler it would show up

270
00:12:41,670 --> 00:12:46,769
differently in this x-ray now

271
00:12:44,550 --> 00:12:49,800
occasionally you do find interesting

272
00:12:46,769 --> 00:12:52,519
parts inside of packages such as these

273
00:12:49,800 --> 00:12:56,040
Ethernet magnetics that have inductors

274
00:12:52,519 --> 00:12:57,540
actually encased in epoxy and

275
00:12:56,040 --> 00:13:00,480
occasionally people will decap slate

276
00:12:57,540 --> 00:13:03,630
those chips and wonder if there's some

277
00:13:00,480 --> 00:13:06,569
sort of implant but it's a fairly

278
00:13:03,630 --> 00:13:11,819
standard for certain parts to be made

279
00:13:06,569 --> 00:13:13,019
that way one problem is that we don't

280
00:13:11,819 --> 00:13:15,689
necessarily know what is supposed to be

281
00:13:13,019 --> 00:13:17,880
on the board as an end customer so if he

282
00:13:15,689 --> 00:13:21,029
had to antiphon as a company River loop

283
00:13:17,880 --> 00:13:24,110
did a teardown of a bunch of Super Micro

284
00:13:21,029 --> 00:13:25,980
boards trying to identify

285
00:13:24,110 --> 00:13:27,420
essentially to reverse-engineer the

286
00:13:25,980 --> 00:13:29,790
schematic and try to understand what

287
00:13:27,420 --> 00:13:31,920
parts were supposed to be there and they

288
00:13:29,790 --> 00:13:34,020
found a few places where things seemed

289
00:13:31,920 --> 00:13:37,560
out of place either that the markings on

290
00:13:34,020 --> 00:13:39,780
the board didn't match the parts and it

291
00:13:37,560 --> 00:13:42,119
appeared mostly to be a case where the

292
00:13:39,780 --> 00:13:45,209
manufacturer had revved the design but

293
00:13:42,120 --> 00:13:47,220
not changed at the silkscreen you can

294
00:13:45,210 --> 00:13:53,370
check out her her blog post about it for

295
00:13:47,220 --> 00:13:55,260
some more details okay one the big thing

296
00:13:53,370 --> 00:13:57,030
that supermicro points out in their

297
00:13:55,260 --> 00:13:59,130
letter is that they're talking about the

298
00:13:57,030 --> 00:14:01,790
manufacturing process they're talking

299
00:13:59,130 --> 00:14:04,890
about how do they deal with the assembly

300
00:14:01,790 --> 00:14:09,420
process and they're looking at how do

301
00:14:04,890 --> 00:14:12,900
how do they as OMS detect things being

302
00:14:09,420 --> 00:14:14,910
installed and this is where I agree with

303
00:14:12,900 --> 00:14:18,030
Super Micro I think it's very unlikely

304
00:14:14,910 --> 00:14:21,300
that someone would be able to subvert

305
00:14:18,030 --> 00:14:22,860
them at that level because it's again

306
00:14:21,300 --> 00:14:24,630
it's difficult to know where the boards

307
00:14:22,860 --> 00:14:27,300
are going to go I think what's much more

308
00:14:24,630 --> 00:14:29,520
likely is what we saw in the Snowden

309
00:14:27,300 --> 00:14:32,550
documents where intelligence agencies

310
00:14:29,520 --> 00:14:37,079
are intercepting shipments of computers

311
00:14:32,550 --> 00:14:39,560
and opening up the packages installing

312
00:14:37,080 --> 00:14:41,850
Hardware implants and things and then

313
00:14:39,560 --> 00:14:45,510
having them continue on their way to the

314
00:14:41,850 --> 00:14:48,210
to the customer in fact the NSA has an

315
00:14:45,510 --> 00:14:50,730
entire catalogue of these interesting

316
00:14:48,210 --> 00:14:53,580
parts they can either JTAG the cpu

317
00:14:50,730 --> 00:14:56,120
during the boot process things that are

318
00:14:53,580 --> 00:15:00,000
embedded in ethernet jacks to be able to

319
00:14:56,120 --> 00:15:03,570
intercept data they have firmware

320
00:15:00,000 --> 00:15:07,650
attacks that will modify the bios they

321
00:15:03,570 --> 00:15:11,040
have attacks that will in use SMM to be

322
00:15:07,650 --> 00:15:12,660
able to hide from detection and in

323
00:15:11,040 --> 00:15:16,290
general these sort of tailored access

324
00:15:12,660 --> 00:15:19,680
operations are ideal for being able to

325
00:15:16,290 --> 00:15:21,630
contain it to to a single customer to be

326
00:15:19,680 --> 00:15:24,329
able to conceal it through some

327
00:15:21,630 --> 00:15:25,980
different means and also it's a much

328
00:15:24,330 --> 00:15:28,140
better cover story because if they're

329
00:15:25,980 --> 00:15:30,000
found it's not as obvious as something

330
00:15:28,140 --> 00:15:31,800
laminated between the circuit board that

331
00:15:30,000 --> 00:15:33,930
had to have happened at at point two

332
00:15:31,800 --> 00:15:36,870
manufacturing you know the these sort of

333
00:15:33,930 --> 00:15:41,040
ta o Hardware bugs could have

334
00:15:36,870 --> 00:15:44,820
installed at any point so one last thing

335
00:15:41,040 --> 00:15:47,240
in the Super Micro letter is that they

336
00:15:44,820 --> 00:15:49,470
think that it's highly unlikely that any

337
00:15:47,240 --> 00:15:52,380
altered board would function properly

338
00:15:49,470 --> 00:15:55,320
because the attacker would lack complete

339
00:15:52,380 --> 00:15:58,890
knowledge of the design and now I

340
00:15:55,320 --> 00:16:02,400
disagree strongly with the with super

341
00:15:58,890 --> 00:16:03,810
micronus because I don't have the

342
00:16:02,400 --> 00:16:06,540
schematic for their board I don't have

343
00:16:03,810 --> 00:16:08,609
complete knowledge but I've been able to

344
00:16:06,540 --> 00:16:12,209
build exactly the sort of implants that

345
00:16:08,610 --> 00:16:13,589
are described here and that's because

346
00:16:12,210 --> 00:16:16,320
these these systems are built with

347
00:16:13,589 --> 00:16:19,920
commodity parts so the BMC boots off a

348
00:16:16,320 --> 00:16:22,020
spy flash that is a off-the-shelf part

349
00:16:19,920 --> 00:16:24,599
and we can pull up the datasheet and we

350
00:16:22,020 --> 00:16:29,160
can understand how it's connected to the

351
00:16:24,600 --> 00:16:31,410
BMC and the one that we're most

352
00:16:29,160 --> 00:16:35,990
concerned with is this serial out line

353
00:16:31,410 --> 00:16:39,600
that goes to the BMC from a speed here

354
00:16:35,990 --> 00:16:42,170
via a small series resistor that

355
00:16:39,600 --> 00:16:48,540
essentially is it could be considered a

356
00:16:42,170 --> 00:16:50,279
signal conditioning component and you

357
00:16:48,540 --> 00:16:54,770
have been able to build a device that

358
00:16:50,279 --> 00:16:57,900
that replaces that part of the system on

359
00:16:54,770 --> 00:17:01,680
someone older Supermicro board connected

360
00:16:57,900 --> 00:17:05,639
to the flash with a small FPGA and it's

361
00:17:01,680 --> 00:17:10,260
able to replace the data as it's being

362
00:17:05,640 --> 00:17:12,270
read by the BMC you you might think well

363
00:17:10,260 --> 00:17:15,599
you know that resistor is pretty small

364
00:17:12,270 --> 00:17:18,329
but Moore's law has let us build really

365
00:17:15,599 --> 00:17:20,819
small CPUs that if we look at a computer

366
00:17:18,329 --> 00:17:24,319
from a few years ago you know the CPU

367
00:17:20,819 --> 00:17:26,550
was about twenty one square millimeters

368
00:17:24,319 --> 00:17:30,360
if we zoom in on one of these

369
00:17:26,550 --> 00:17:32,879
transistors we can actually see the

370
00:17:30,360 --> 00:17:36,059
individual transistors and we could fit

371
00:17:32,880 --> 00:17:38,220
an entire arm cortex-m zero in the space

372
00:17:36,059 --> 00:17:42,450
of two transistors from just a few years

373
00:17:38,220 --> 00:17:46,100
ago so fitting a you know a false CPU

374
00:17:42,450 --> 00:17:48,000
into a zero six zero three resistor is

375
00:17:46,100 --> 00:17:49,559
completely within the realm of

376
00:17:48,000 --> 00:17:52,059
possibility

377
00:17:49,559 --> 00:17:55,389
mine's a little bit larger I'm using an

378
00:17:52,059 --> 00:17:56,740
off-the-shelf FPGA board but I also

379
00:17:55,390 --> 00:18:01,500
don't have the backing of a nation-state

380
00:17:56,740 --> 00:18:01,500
for it vault Indus this proof of concept

381
00:18:02,309 --> 00:18:09,879
so but unfortunately fitting in that in

382
00:18:06,730 --> 00:18:11,650
that small two pin part does give us a

383
00:18:09,880 --> 00:18:14,920
lot of limitations and a lot of

384
00:18:11,650 --> 00:18:19,510
challenges typically the spy chip has

385
00:18:14,920 --> 00:18:22,720
six or more wires but we don't have

386
00:18:19,510 --> 00:18:25,870
power on ground so we have to power our

387
00:18:22,720 --> 00:18:28,780
device at parasitically based on the

388
00:18:25,870 --> 00:18:30,790
current flowing through that pin we

389
00:18:28,780 --> 00:18:33,970
don't have the chip select line so we

390
00:18:30,790 --> 00:18:37,000
have to be able to detect when the BMC

391
00:18:33,970 --> 00:18:40,300
is reading from the flash based on just

392
00:18:37,000 --> 00:18:43,420
signals going through we also don't have

393
00:18:40,300 --> 00:18:46,080
the serial data input line so we don't

394
00:18:43,420 --> 00:18:49,540
know what addresses are being read from

395
00:18:46,080 --> 00:18:52,000
from the chip we have to watch for

396
00:18:49,540 --> 00:18:55,178
patterns we also don't have the clock

397
00:18:52,000 --> 00:18:58,630
line so we have to run a PLL to try to

398
00:18:55,179 --> 00:19:00,820
synchronize from the data stream and

399
00:18:58,630 --> 00:19:05,260
additionally we can't generate arbitrary

400
00:19:00,820 --> 00:19:08,080
data streams we can only turn one bits

401
00:19:05,260 --> 00:19:11,710
into zero bits by disconnecting the line

402
00:19:08,080 --> 00:19:14,889
and when it floats it gets read as a

403
00:19:11,710 --> 00:19:16,870
zero by the BMC if the timing works out

404
00:19:14,890 --> 00:19:21,850
and a bunch of other things this it's

405
00:19:16,870 --> 00:19:27,370
pretty flaky for detecting the clock we

406
00:19:21,850 --> 00:19:29,740
watch for 0 1 0 1 or 1 0 1 0 bit

407
00:19:27,370 --> 00:19:32,860
patterns in the in the bit stream and

408
00:19:29,740 --> 00:19:36,340
then we're able to you know run a PLL

409
00:19:32,860 --> 00:19:38,020
that allows us to clocked that for the

410
00:19:36,340 --> 00:19:39,760
proof-of-concept I had to lock this by

411
00:19:38,020 --> 00:19:43,510
flash to the slowest speed at 12

412
00:19:39,760 --> 00:19:48,340
megahertz again you know this is a zero

413
00:19:43,510 --> 00:19:50,200
budget sort of project so next we need

414
00:19:48,340 --> 00:19:53,860
to figure out where can we put this in

415
00:19:50,200 --> 00:19:55,630
the in the flash if we boot the BMC and

416
00:19:53,860 --> 00:19:57,790
with the debug console we it actually

417
00:19:55,630 --> 00:20:00,730
prints out a nice message that shows us

418
00:19:57,790 --> 00:20:02,590
how the flash is organized it has the

419
00:20:00,730 --> 00:20:05,409
u-boot bootloader it

420
00:20:02,590 --> 00:20:07,928
the compressed kernel it has the root

421
00:20:05,409 --> 00:20:09,610
filesystem which is also compressed and

422
00:20:07,929 --> 00:20:13,870
unfortunately all that compressed data

423
00:20:09,610 --> 00:20:16,529
is a mix of zero and ones so we can't

424
00:20:13,870 --> 00:20:20,408
really try to override that very easily

425
00:20:16,529 --> 00:20:23,289
but there's some some some very white

426
00:20:20,409 --> 00:20:26,320
parts of it which are all one and it

427
00:20:23,289 --> 00:20:28,539
turns out that's the jf FS two that

428
00:20:26,320 --> 00:20:32,590
stores the the non-volatile

429
00:20:28,539 --> 00:20:36,039
configuration data and if we hex dump it

430
00:20:32,590 --> 00:20:38,379
we see it's it's mostly all F's which

431
00:20:36,039 --> 00:20:41,379
gives us lots of ones to work with and

432
00:20:38,380 --> 00:20:45,880
they has a these blocks have an easily

433
00:20:41,380 --> 00:20:48,760
identifiable header that we can that we

434
00:20:45,880 --> 00:20:51,240
can detect in the bit stream so by

435
00:20:48,760 --> 00:20:56,260
watching for this this magic bit mask

436
00:20:51,240 --> 00:20:59,950
and when we see that being read it's

437
00:20:56,260 --> 00:21:01,600
possible to substitute our own data in

438
00:20:59,950 --> 00:21:06,220
this case we can put a little bit of a

439
00:21:01,600 --> 00:21:08,199
shell script in there and when the BMC

440
00:21:06,220 --> 00:21:12,250
is booting it will actually execute that

441
00:21:08,200 --> 00:21:14,320
shell script for us so let's have a

442
00:21:12,250 --> 00:21:16,120
quick demo this is gonna be a video

443
00:21:14,320 --> 00:21:18,820
because I don't have any hardware with

444
00:21:16,120 --> 00:21:20,739
me and it also was really flaky it was

445
00:21:18,820 --> 00:21:23,230
like one in ten one and twenty times it

446
00:21:20,740 --> 00:21:27,669
would actually work so we're going to

447
00:21:23,230 --> 00:21:29,700
run we're going to do a video demo so

448
00:21:27,669 --> 00:21:33,070
we're running in qmu in this case and

449
00:21:29,700 --> 00:21:34,960
when the system starts up we can see on

450
00:21:33,070 --> 00:21:37,120
the left hand side it's printed out the

451
00:21:34,960 --> 00:21:40,630
console from the the FPGA that it's

452
00:21:37,120 --> 00:21:42,340
synchronized the PLL and then when the

453
00:21:40,630 --> 00:21:48,039
Linux kernel starts up it's going to

454
00:21:42,340 --> 00:21:49,899
mount the jf FS to at some point okay

455
00:21:48,039 --> 00:21:52,419
and then it's we've seen the magic

456
00:21:49,899 --> 00:21:56,559
header so it has been provided with the

457
00:21:52,419 --> 00:21:58,570
hacked NVRAM and now the BMC takes a

458
00:21:56,559 --> 00:22:00,100
little while to start up if you've

459
00:21:58,570 --> 00:22:01,418
worked on servers you know how

460
00:22:00,100 --> 00:22:04,799
frustrating it is that for whatever

461
00:22:01,419 --> 00:22:07,539
reason they take quite some time to boot

462
00:22:04,799 --> 00:22:09,549
we also get a bunch of kernel error

463
00:22:07,539 --> 00:22:11,020
messages that I think are due to the

464
00:22:09,549 --> 00:22:13,590
fact that qmu doesn't have all the

465
00:22:11,020 --> 00:22:13,590
hardware available

466
00:22:17,670 --> 00:22:21,400
but at this point yeah the FPGA has

467
00:22:20,350 --> 00:22:23,709
nothing else to do because the

468
00:22:21,400 --> 00:22:25,690
everything's been read from the flash so

469
00:22:23,710 --> 00:22:29,380
it's just now in the hands of the Linux

470
00:22:25,690 --> 00:22:31,420
kernel okay which is now going to bring

471
00:22:29,380 --> 00:22:34,870
up the interface once it does tries to

472
00:22:31,420 --> 00:22:38,140
do DHCP and doesn't get a response and

473
00:22:34,870 --> 00:22:49,030
all right and we get a we get our hello

474
00:22:38,140 --> 00:22:50,950
world message out from the from it now

475
00:22:49,030 --> 00:22:53,350
it turns out this is actually the hard

476
00:22:50,950 --> 00:22:56,230
way to do it that if we just wait a

477
00:22:53,350 --> 00:22:59,080
little bit longer the the BMC prints

478
00:22:56,230 --> 00:23:03,850
this message and if you hit enter it

479
00:22:59,080 --> 00:23:05,770
just drops you to a root shell so all of

480
00:23:03,850 --> 00:23:09,189
this work you know for actually fitting

481
00:23:05,770 --> 00:23:11,260
inside that that that coupler and trying

482
00:23:09,190 --> 00:23:13,690
to do all that clock reconstruction it

483
00:23:11,260 --> 00:23:15,790
turns out there was an easier way but I

484
00:23:13,690 --> 00:23:20,230
was trying to do this based on what was

485
00:23:15,790 --> 00:23:23,680
in the in in the bloomberg story and it

486
00:23:20,230 --> 00:23:27,160
was a fun exercise it turns out that

487
00:23:23,680 --> 00:23:30,130
most boards have headers or unpopulated

488
00:23:27,160 --> 00:23:33,100
pins for the BMC that you can probe with

489
00:23:30,130 --> 00:23:36,430
an oscilloscope and you'll find what

490
00:23:33,100 --> 00:23:39,370
looks like a 115 killa baud signal on it

491
00:23:36,430 --> 00:23:42,220
and it turns out that on pretty much all

492
00:23:39,370 --> 00:23:44,080
of the a speed BMC's they have the same

493
00:23:42,220 --> 00:23:47,310
function that you can just send enter

494
00:23:44,080 --> 00:23:50,350
and start running commands this route so

495
00:23:47,310 --> 00:23:51,940
someone with physical access could

496
00:23:50,350 --> 00:23:55,060
potentially do that and this is

497
00:23:51,940 --> 00:23:59,710
something where a you know would be very

498
00:23:55,060 --> 00:24:04,210
easy to add post manufacturing as the

499
00:23:59,710 --> 00:24:05,650
system is being shipped so what are some

500
00:24:04,210 --> 00:24:08,680
things we could do to try to detect

501
00:24:05,650 --> 00:24:10,720
these sorts of implants well a lot of

502
00:24:08,680 --> 00:24:14,110
high assurance sites will replace the

503
00:24:10,720 --> 00:24:16,720
flash chips with ones of their own but

504
00:24:14,110 --> 00:24:21,189
because this implant isn't in the flash

505
00:24:16,720 --> 00:24:23,920
chip that's not going to do it trying to

506
00:24:21,190 --> 00:24:27,040
read the data from the flash chip won't

507
00:24:23,920 --> 00:24:28,480
won't reveal the implant both because

508
00:24:27,040 --> 00:24:30,250
the reader doesn't

509
00:24:28,480 --> 00:24:33,550
execute the same sort of pattern of

510
00:24:30,250 --> 00:24:35,320
reeds as the the main CPU and also

511
00:24:33,550 --> 00:24:37,840
because we're typically on the other

512
00:24:35,320 --> 00:24:41,139
side of the bus other side of the series

513
00:24:37,840 --> 00:24:42,850
resistor from from the reader you might

514
00:24:41,140 --> 00:24:44,770
hook up a logic analyzer and try to

515
00:24:42,850 --> 00:24:48,610
watch all the data coming out from the

516
00:24:44,770 --> 00:24:49,629
but from the spy bus but because as I

517
00:24:48,610 --> 00:24:52,060
mentioned we're on the other side of

518
00:24:49,630 --> 00:24:55,110
that series resistor we won't the logic

519
00:24:52,060 --> 00:24:57,490
analyzer won't see the modified data a

520
00:24:55,110 --> 00:25:00,639
lot of people have suggested that if you

521
00:24:57,490 --> 00:25:03,850
run Network capture on the on the BMC

522
00:25:00,640 --> 00:25:07,480
interface you'll see the you know X fill

523
00:25:03,850 --> 00:25:09,699
or something from it but that not all

524
00:25:07,480 --> 00:25:12,040
attacks are going to exfil on the BMC

525
00:25:09,700 --> 00:25:14,950
interface there's a really wonderful one

526
00:25:12,040 --> 00:25:19,000
proposed at DEFCON a few years ago by

527
00:25:14,950 --> 00:25:22,060
Intel ATR that allowed the BMC to

528
00:25:19,000 --> 00:25:24,220
install a modified SMM that could then

529
00:25:22,060 --> 00:25:28,810
hook the hypervisor which would allow

530
00:25:24,220 --> 00:25:31,090
any guest on the machine to if it if it

531
00:25:28,810 --> 00:25:34,629
knew how to talk to the SMM to be able

532
00:25:31,090 --> 00:25:36,580
to read every other guests memory so

533
00:25:34,630 --> 00:25:38,260
that in that case then a co tenant would

534
00:25:36,580 --> 00:25:41,470
be able to exfil the data through the

535
00:25:38,260 --> 00:25:46,660
normal network interfaces and without

536
00:25:41,470 --> 00:25:48,460
the BMC being involved at all so what

537
00:25:46,660 --> 00:25:52,240
are some things we can do to try to

538
00:25:48,460 --> 00:25:56,560
improve the situation the big problem is

539
00:25:52,240 --> 00:25:58,930
the BMC is vastly overpowered and you

540
00:25:56,560 --> 00:26:01,810
know if we freeze frame that that video

541
00:25:58,930 --> 00:26:05,950
you might have noticed that it's booting

542
00:26:01,810 --> 00:26:09,399
a to 628 kernel which was released over

543
00:26:05,950 --> 00:26:12,310
ten years ago you think okay this is old

544
00:26:09,400 --> 00:26:15,360
hardware you know this is a the report

545
00:26:12,310 --> 00:26:18,580
came out a year ago surely it's better

546
00:26:15,360 --> 00:26:23,520
well I just updated the BMC to the

547
00:26:18,580 --> 00:26:27,149
latest version and it's now 2 6 28 so

548
00:26:23,520 --> 00:26:29,560
this kernel has major

549
00:26:27,150 --> 00:26:32,380
remote execution CVEs

550
00:26:29,560 --> 00:26:34,330
for it that are still just waiting out

551
00:26:32,380 --> 00:26:36,220
there in fact occasionally I've had

552
00:26:34,330 --> 00:26:38,770
vendors tell me that going after a BMC

553
00:26:36,220 --> 00:26:42,720
vulnerabilities is unsporting because

554
00:26:38,770 --> 00:26:46,029
they're just made of security holes

555
00:26:42,720 --> 00:26:48,100
and we've seen a lot of new ones coming

556
00:26:46,029 --> 00:26:50,739
out between the the pants down

557
00:26:48,100 --> 00:26:53,080
vulnerability that allowed a guest to

558
00:26:50,739 --> 00:26:56,499
talk to the BMC and get basically

559
00:26:53,080 --> 00:26:59,340
arbitrary read write of everything in

560
00:26:56,499 --> 00:27:02,350
physical memory to the recent

561
00:26:59,340 --> 00:27:07,168
publication from eclipse IAM that allow

562
00:27:02,350 --> 00:27:10,320
showed how they could use BMC is to

563
00:27:07,169 --> 00:27:14,440
present alternate media and to takeover

564
00:27:10,320 --> 00:27:17,470
systems and I don't mean to pick too

565
00:27:14,440 --> 00:27:19,690
much on the BMC yet these sorts of

566
00:27:17,470 --> 00:27:23,409
firmware issues are on all sorts of

567
00:27:19,690 --> 00:27:24,639
other systems as well I've taken the

568
00:27:23,409 --> 00:27:27,249
research I did to build this

569
00:27:24,639 --> 00:27:29,049
proof-of-concept I've also used in a

570
00:27:27,249 --> 00:27:31,749
similar way to attack Intel boot guard

571
00:27:29,049 --> 00:27:33,940
which gave us a bypass of the hardware

572
00:27:31,749 --> 00:27:36,190
rooted trusts on x86 and I've also

573
00:27:33,940 --> 00:27:39,190
turned it into an open-source tool for

574
00:27:36,190 --> 00:27:41,409
doing spy flash simulation and this is

575
00:27:39,190 --> 00:27:44,499
revealed that lots of arm CPUs have

576
00:27:41,409 --> 00:27:47,799
similar issues folks have gone after the

577
00:27:44,499 --> 00:27:51,989
PSP with this sort of tool and the big

578
00:27:47,799 --> 00:27:55,119
problem is that our computers are not

579
00:27:51,989 --> 00:27:57,730
you know a single computer anymore that

580
00:27:55,119 --> 00:28:00,850
they are built out of lots of other

581
00:27:57,730 --> 00:28:02,470
pieces that all have their own code and

582
00:28:00,850 --> 00:28:06,820
we need to start treating them as

583
00:28:02,470 --> 00:28:09,580
mutually untrusted components you know

584
00:28:06,820 --> 00:28:10,960
if we look at a modern server pretty

585
00:28:09,580 --> 00:28:13,869
much anything more complicated than a

586
00:28:10,960 --> 00:28:16,299
resistor has some sort of firmware you

587
00:28:13,869 --> 00:28:18,970
know the RAID controller has firmware

588
00:28:16,299 --> 00:28:21,700
the nick has firmware the video card has

589
00:28:18,970 --> 00:28:23,559
firmware the drives have firmware the

590
00:28:21,700 --> 00:28:25,720
fans on some of these systems have

591
00:28:23,559 --> 00:28:28,809
firmware the power supplies have

592
00:28:25,720 --> 00:28:31,720
firmware in fact on this particular

593
00:28:28,809 --> 00:28:35,590
system I was able to modify the firmware

594
00:28:31,720 --> 00:28:38,669
in in the power supply that was able to

595
00:28:35,590 --> 00:28:41,408
then fuzz the BMC and get code execution

596
00:28:38,669 --> 00:28:44,590
on the BMC from the field replaceable

597
00:28:41,409 --> 00:28:48,190
power supply and that's a big problem

598
00:28:44,590 --> 00:28:49,720
that these devices are assuming that the

599
00:28:48,190 --> 00:28:54,820
other Hardware in the system is can be

600
00:28:49,720 --> 00:28:57,430
trusted and these are not big attacks

601
00:28:54,820 --> 00:29:00,100
you know these are not multi-million

602
00:28:57,430 --> 00:29:03,190
euro attacks these are as you know 10 5

603
00:29:00,100 --> 00:29:05,469
10 euro attacks which a Joe Fitz give a

604
00:29:03,190 --> 00:29:09,340
really good talk about you know where

605
00:29:05,470 --> 00:29:11,470
they had looked at literally duct-taping

606
00:29:09,340 --> 00:29:13,629
raspberry pies inside of servers shipped

607
00:29:11,470 --> 00:29:15,250
to companies who had no idea how to

608
00:29:13,630 --> 00:29:17,860
detect them

609
00:29:15,250 --> 00:29:20,050
he also Joe also made these wonderful

610
00:29:17,860 --> 00:29:23,080
stickers and I he sent me with a bunch

611
00:29:20,050 --> 00:29:24,580
of them so if you want some some I want

612
00:29:23,080 --> 00:29:29,740
to believe stickers I have them

613
00:29:24,580 --> 00:29:32,860
afterwards I'm really encouraged that

614
00:29:29,740 --> 00:29:35,710
that NIST has started pushing for folks

615
00:29:32,860 --> 00:29:38,189
to start thinking about systems as more

616
00:29:35,710 --> 00:29:41,170
of these interconnected networks and

617
00:29:38,190 --> 00:29:44,260
most of their guidelines have to do with

618
00:29:41,170 --> 00:29:47,590
measuring things into the TPM and these

619
00:29:44,260 --> 00:29:50,290
trusted platform modules are a good step

620
00:29:47,590 --> 00:29:53,050
forward to be able to move the route of

621
00:29:50,290 --> 00:29:56,260
trust into a much simpler sort of device

622
00:29:53,050 --> 00:29:59,379
but they are not a solution unto

623
00:29:56,260 --> 00:30:01,600
themselves because as the the TPM genie

624
00:29:59,380 --> 00:30:05,080
showed hardware attacks against being

625
00:30:01,600 --> 00:30:06,760
assume you against TPMS give the ability

626
00:30:05,080 --> 00:30:08,679
to circumvent the route of trust there

627
00:30:06,760 --> 00:30:10,330
as well so we have to really start

628
00:30:08,680 --> 00:30:13,480
thinking about what is the the bigger

629
00:30:10,330 --> 00:30:15,100
picture some people are proposing that

630
00:30:13,480 --> 00:30:17,950
we should move things into these trusted

631
00:30:15,100 --> 00:30:20,740
execution environments like SGX or trust

632
00:30:17,950 --> 00:30:24,010
zone and a lot of manufacturers are also

633
00:30:20,740 --> 00:30:26,320
starting to include new routes of trust

634
00:30:24,010 --> 00:30:28,890
Chromebooks and Google servers have a

635
00:30:26,320 --> 00:30:31,659
security code processor called the Titan

636
00:30:28,890 --> 00:30:35,830
Microsoft has proposed their Cerberus on

637
00:30:31,660 --> 00:30:38,500
Azure and then Apple is shipping the t2

638
00:30:35,830 --> 00:30:41,679
on their hardware and all of these are

639
00:30:38,500 --> 00:30:46,660
ways to try to move the route of trust

640
00:30:41,680 --> 00:30:50,430
out of you know out of this this mutable

641
00:30:46,660 --> 00:30:54,940
firmware into some other hardware rooted

642
00:30:50,430 --> 00:30:56,470
system and people keep finding

643
00:30:54,940 --> 00:30:59,650
vulnerabilities in them but again it's a

644
00:30:56,470 --> 00:31:02,230
step in the right direction but the big

645
00:30:59,650 --> 00:31:04,660
solution I think is we also need far

646
00:31:02,230 --> 00:31:06,620
fewer secrets in our systems especially

647
00:31:04,660 --> 00:31:09,020
in our boot process

648
00:31:06,620 --> 00:31:10,729
and I'm encouraged that the open

649
00:31:09,020 --> 00:31:14,059
hardware movement and the Open Compute

650
00:31:10,730 --> 00:31:17,690
movement is starting to build servers

651
00:31:14,059 --> 00:31:20,090
that where the the manufacturers are

652
00:31:17,690 --> 00:31:23,300
publishing the schematics so if you buy

653
00:31:20,090 --> 00:31:25,540
a leopard mainboard you get a full

654
00:31:23,300 --> 00:31:29,389
schematic with it then this allows a

655
00:31:25,540 --> 00:31:31,879
motivated customer to verify that what

656
00:31:29,390 --> 00:31:34,010
is built is what is actually in the

657
00:31:31,880 --> 00:31:35,750
design that they can think start to

658
00:31:34,010 --> 00:31:37,580
reason about why are these different

659
00:31:35,750 --> 00:31:41,840
pieces connected and what are the

660
00:31:37,580 --> 00:31:44,120
capabilities that that gives them most

661
00:31:41,840 --> 00:31:47,209
of these open computes machines are also

662
00:31:44,120 --> 00:31:49,850
running in open BMC which allows us to

663
00:31:47,210 --> 00:31:51,950
use a modern Linux kernel where we can

664
00:31:49,850 --> 00:31:55,280
update it according to our own schedule

665
00:31:51,950 --> 00:31:58,970
rather than being dependent on the OEM

666
00:31:55,280 --> 00:32:01,940
to do so Samantha brown give a wonderful

667
00:31:58,970 --> 00:32:04,280
talk at o f o s FC last year about how

668
00:32:01,940 --> 00:32:10,670
open BMC makes for a more resilient

669
00:32:04,280 --> 00:32:13,970
system Ron Minich from Google took a

670
00:32:10,670 --> 00:32:15,830
slightly stronger position that you know

671
00:32:13,970 --> 00:32:18,880
we need to be building all of our

672
00:32:15,830 --> 00:32:21,199
firmware with Linux and an open source

673
00:32:18,880 --> 00:32:24,140
he and I are working together on the

674
00:32:21,200 --> 00:32:26,570
Linux boot project which is trying to

675
00:32:24,140 --> 00:32:29,000
make more secure more flexible more

676
00:32:26,570 --> 00:32:31,370
resilient systems by building the

677
00:32:29,000 --> 00:32:35,710
firmware with excuse me the boot

678
00:32:31,370 --> 00:32:35,709
firmware in the spy flash out of Linux

679
00:32:35,860 --> 00:32:41,659
the micro BMC project has taken the work

680
00:32:39,920 --> 00:32:45,400
we've done on Linux boot and brought

681
00:32:41,660 --> 00:32:48,650
that into the into the arm a speed CPUs

682
00:32:45,400 --> 00:32:52,220
and they now support Super Micro boards

683
00:32:48,650 --> 00:32:54,770
so if you want to replace your 2/6

684
00:32:52,220 --> 00:32:57,620
kernel with a modern I think this is a

685
00:32:54,770 --> 00:33:01,820
5-4 kernel you can you can do that

686
00:32:57,620 --> 00:33:03,830
and the the real advantage in doing this

687
00:33:01,820 --> 00:33:05,928
is we get open source we can

688
00:33:03,830 --> 00:33:08,389
reproducibly build it we can have it

689
00:33:05,929 --> 00:33:11,390
participate in remote attestation to

690
00:33:08,390 --> 00:33:13,670
prove what is running we can write these

691
00:33:11,390 --> 00:33:16,520
things in safer languages micro BMC is

692
00:33:13,670 --> 00:33:18,470
entirely an NGO so we don't have to

693
00:33:16,520 --> 00:33:19,879
worry about memory corruption errors the

694
00:33:18,470 --> 00:33:23,539
same way we do with the C

695
00:33:19,880 --> 00:33:26,510
one's and we also can discard a lot of

696
00:33:23,539 --> 00:33:29,960
the legacy features things like the

697
00:33:26,510 --> 00:33:32,480
pants down and USB anywhere are taking

698
00:33:29,960 --> 00:33:35,000
advantage of things that most customers

699
00:33:32,480 --> 00:33:40,130
don't need in their BMC but are still

700
00:33:35,000 --> 00:33:42,559
there but for legacy reasons so here we

701
00:33:40,130 --> 00:33:44,660
are one year later we still don't know

702
00:33:42,559 --> 00:33:46,549
if the big hack really occurred but I

703
00:33:44,660 --> 00:33:48,289
hope I've shown you that it is

704
00:33:46,549 --> 00:33:51,020
technically feasible for these sorts of

705
00:33:48,289 --> 00:33:53,390
implants to happen and I hope that we do

706
00:33:51,020 --> 00:33:56,690
have a way forward through open hardware

707
00:33:53,390 --> 00:34:00,080
with Hardware roots of trusts and Road

708
00:33:56,690 --> 00:34:02,419
attestation you can check out the the

709
00:34:00,080 --> 00:34:05,299
slides from this talk on my website and

710
00:34:02,419 --> 00:34:07,700
I'd love to answer any questions and

711
00:34:05,299 --> 00:34:10,750
also be around of the next few days and

712
00:34:07,700 --> 00:34:19,010
love to chat further about it thank you

713
00:34:10,750 --> 00:34:19,010
[Applause]

