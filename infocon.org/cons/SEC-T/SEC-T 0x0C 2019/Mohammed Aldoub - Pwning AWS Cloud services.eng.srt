1
00:00:02,659 --> 00:00:10,280
thank you thank you very much pleased to

2
00:00:08,780 --> 00:00:13,518
meet you all it's my first time in

3
00:00:10,280 --> 00:00:15,559
Sweden and it's the first time in the

4
00:00:13,519 --> 00:00:18,439
hacking conference where I key as a

5
00:00:15,559 --> 00:00:18,890
sponsor so that's you know Swedish

6
00:00:18,439 --> 00:00:22,249
things

7
00:00:18,890 --> 00:00:25,759
so today I'm going to talk about AWS

8
00:00:22,249 --> 00:00:28,098
Amazon Web cloud services and how we're

9
00:00:25,759 --> 00:00:31,069
going to attack and what kind of attack

10
00:00:28,099 --> 00:00:34,010
vectors in both the exploitation and the

11
00:00:31,069 --> 00:00:35,720
post exploitation process then I'm going

12
00:00:34,010 --> 00:00:38,330
to show some demos hopefully they work

13
00:00:35,720 --> 00:00:39,890
so that's me that's how I look like in

14
00:00:38,330 --> 00:00:43,099
my traditional dress

15
00:00:39,890 --> 00:00:45,710
it's called Fatah it's really nice and

16
00:00:43,100 --> 00:00:51,680
stylish some racist people call it a

17
00:00:45,710 --> 00:00:54,020
table cover idiots right so I've done

18
00:00:51,680 --> 00:00:57,800
some talks and trainings all wrong with

19
00:00:54,020 --> 00:01:00,500
the world in Europe in Asia in the

20
00:00:57,800 --> 00:01:03,519
Middle East of course my focus currently

21
00:01:00,500 --> 00:01:05,479
is on API is security and the cloud

22
00:01:03,519 --> 00:01:08,899
basically the reason I chose this

23
00:01:05,479 --> 00:01:11,960
profession is working on cloud security

24
00:01:08,899 --> 00:01:14,539
allows me as individual in Kuwait to

25
00:01:11,960 --> 00:01:16,669
actually reach out to the entire world

26
00:01:14,539 --> 00:01:19,159
instead of being constrained to the

27
00:01:16,670 --> 00:01:23,210
local regular enterprise environment in

28
00:01:19,159 --> 00:01:23,869
Kuwait and Kuwait is really small so why

29
00:01:23,210 --> 00:01:25,669
should I

30
00:01:23,869 --> 00:01:28,039
constrain myself and that small

31
00:01:25,670 --> 00:01:29,719
geographic area when there are seven

32
00:01:28,039 --> 00:01:31,909
billion people in the world who need you

33
00:01:29,719 --> 00:01:35,059
know to be secured so that's why I chose

34
00:01:31,909 --> 00:01:37,009
cloud security as as my current

35
00:01:35,060 --> 00:01:38,600
profession of course so that's my

36
00:01:37,009 --> 00:01:40,579
personal reason for it

37
00:01:38,600 --> 00:01:43,189
that's my github and my Twitter if

38
00:01:40,579 --> 00:01:45,408
you're interested so where is kuwait

39
00:01:43,189 --> 00:01:51,589
kuwait is of course in the Middle East

40
00:01:45,409 --> 00:01:53,450
can anybody find Kuwait yep the small

41
00:01:51,590 --> 00:01:57,700
one that's quite and you can't you see

42
00:01:53,450 --> 00:02:01,429
that it's in red can anyone guess why

43
00:01:57,700 --> 00:02:03,639
that's why Kuwait correctly holds the

44
00:02:01,429 --> 00:02:07,909
official highest record for temperature

45
00:02:03,639 --> 00:02:10,720
52 is actually in the shade yeah and out

46
00:02:07,909 --> 00:02:16,460
in the Sun it once reached you know

47
00:02:10,720 --> 00:02:17,060
arguably around 67 degrees so that's why

48
00:02:16,460 --> 00:02:18,950
you know

49
00:02:17,060 --> 00:02:21,319
I came to Sweden to just you know have a

50
00:02:18,950 --> 00:02:23,119
change of the temperature currently in

51
00:02:21,319 --> 00:02:28,760
Kuwait and some temperate starts to cool

52
00:02:23,120 --> 00:02:31,760
down so now it's about 46,000 degrees in

53
00:02:28,760 --> 00:02:36,560
American that's three barbecues or I

54
00:02:31,760 --> 00:02:39,470
think 125 height right so yeah it's

55
00:02:36,560 --> 00:02:41,660
really hot in kuwait kuwait is also

56
00:02:39,470 --> 00:02:43,190
known other than hate code is known for

57
00:02:41,660 --> 00:02:46,130
the kuwait hours which was actually

58
00:02:43,190 --> 00:02:48,680
designed by a swedish architect so thank

59
00:02:46,130 --> 00:02:51,019
you very much coat is also known for its

60
00:02:48,680 --> 00:02:53,600
really good food and if you look at me

61
00:02:51,019 --> 00:02:56,030
you can tell right so if you visit

62
00:02:53,600 --> 00:02:56,959
kuwait don't do it in the summer that's

63
00:02:56,030 --> 00:02:59,480
number one

64
00:02:56,959 --> 00:03:01,519
visit the kuwait towers and by the way

65
00:02:59,480 --> 00:03:02,899
the pointy end is actually very sharp

66
00:03:01,519 --> 00:03:05,660
don't ask how I know

67
00:03:02,900 --> 00:03:07,850
and do you know take her time to

68
00:03:05,660 --> 00:03:09,680
actually seed taste all the food in

69
00:03:07,850 --> 00:03:11,359
Kuwait when people talk come to quit

70
00:03:09,680 --> 00:03:13,040
from the neighboring countries they

71
00:03:11,360 --> 00:03:17,000
actually go on a diet before they come

72
00:03:13,040 --> 00:03:18,769
to Kuwait so yeah before I start my talk

73
00:03:17,000 --> 00:03:21,290
I would like to actually start with the

74
00:03:18,769 --> 00:03:23,329
references because I stood on the

75
00:03:21,290 --> 00:03:25,730
shoulders of giants those are the main

76
00:03:23,329 --> 00:03:27,290
references I used for my talk I don't

77
00:03:25,730 --> 00:03:30,649
like to mention John Francis in the end

78
00:03:27,290 --> 00:03:32,390
when I am when I am rushing for a time

79
00:03:30,650 --> 00:03:33,980
so I actually start we would like to

80
00:03:32,390 --> 00:03:36,290
start with the with the references these

81
00:03:33,980 --> 00:03:37,940
are two really good books that you might

82
00:03:36,290 --> 00:03:39,739
want to take a picture if you are

83
00:03:37,940 --> 00:03:42,230
interested in cloud security secur

84
00:03:39,739 --> 00:03:46,579
DevOps and the whole and that whole

85
00:03:42,230 --> 00:03:48,619
profession so why would I attack edible

86
00:03:46,579 --> 00:03:50,930
yes because Eddie Willis is the king of

87
00:03:48,620 --> 00:03:54,109
the cloud currently it has the lion's

88
00:03:50,930 --> 00:03:56,900
share of public cloud services they are

89
00:03:54,109 --> 00:03:58,910
well documented and widespread when I

90
00:03:56,900 --> 00:04:00,200
say well-documented I mean that it's all

91
00:03:58,910 --> 00:04:03,170
written but they changed the

92
00:04:00,200 --> 00:04:05,030
documentation so much you actually need

93
00:04:03,170 --> 00:04:08,600
to have someone who only specializes in

94
00:04:05,030 --> 00:04:10,160
all the FBI documentation changes and

95
00:04:08,600 --> 00:04:11,900
there are people who actually do that

96
00:04:10,160 --> 00:04:14,480
because there are lots of services in

97
00:04:11,900 --> 00:04:17,000
Amazon inedibly as you have the basic

98
00:04:14,480 --> 00:04:20,120
service from s3 the file Cloud Storage

99
00:04:17,000 --> 00:04:23,380
all the way to ground satellite stations

100
00:04:20,120 --> 00:04:26,900
so Amazon edulis provides really big

101
00:04:23,380 --> 00:04:28,669
let's say assortment of services so

102
00:04:26,900 --> 00:04:30,719
that's for example that I am talking

103
00:04:28,669 --> 00:04:34,530
about a table as a ground station I

104
00:04:30,720 --> 00:04:36,900
who uses that so while security inside

105
00:04:34,530 --> 00:04:39,510
mes itself is actually excellent market

106
00:04:36,900 --> 00:04:41,159
awareness of security in other words the

107
00:04:39,510 --> 00:04:44,039
customers and how they can use Eddyville

108
00:04:41,160 --> 00:04:46,950
executes securely is actually lacking so

109
00:04:44,040 --> 00:04:49,890
let's talk about how a blast changes the

110
00:04:46,950 --> 00:04:51,990
security let's say model for you in a

111
00:04:49,890 --> 00:04:53,430
better way many attacks don't work

112
00:04:51,990 --> 00:04:55,590
inside the cloud for example you don't

113
00:04:53,430 --> 00:04:57,200
have to care about armed spoofing inside

114
00:04:55,590 --> 00:05:00,750
Amazon you don't have to care about

115
00:04:57,200 --> 00:05:02,280
destruction of your old hard disks for

116
00:05:00,750 --> 00:05:03,830
example the data center security now we

117
00:05:02,280 --> 00:05:08,010
don't have to care about that anymore

118
00:05:03,830 --> 00:05:09,870
worse is that your model some let's say

119
00:05:08,010 --> 00:05:12,630
parts of your traditional model don't

120
00:05:09,870 --> 00:05:14,280
work as well so for example IP

121
00:05:12,630 --> 00:05:15,930
reputation is less effective because

122
00:05:14,280 --> 00:05:18,900
attackers can just attack you from

123
00:05:15,930 --> 00:05:20,850
inside Amazon so the same applies to

124
00:05:18,900 --> 00:05:22,950
country blocks because Amazon has lots

125
00:05:20,850 --> 00:05:24,840
of regions over the world so a country

126
00:05:22,950 --> 00:05:27,300
block is actually less effective so we

127
00:05:24,840 --> 00:05:29,280
need to actually upgrade your security

128
00:05:27,300 --> 00:05:31,290
model the scripting mode of Amazon is

129
00:05:29,280 --> 00:05:33,299
called a shared responsibility model

130
00:05:31,290 --> 00:05:34,770
which which means that the

131
00:05:33,300 --> 00:05:36,690
responsibility is split between you and

132
00:05:34,770 --> 00:05:38,700
Amazon some things you care you have to

133
00:05:36,690 --> 00:05:40,950
handle and this will not help you on

134
00:05:38,700 --> 00:05:43,320
that and some things Amazon will carry

135
00:05:40,950 --> 00:05:44,930
on for you so for example Amazon takes

136
00:05:43,320 --> 00:05:47,490
care of the hardware the storage

137
00:05:44,930 --> 00:05:49,080
electricity physical security and all of

138
00:05:47,490 --> 00:05:51,750
that and you have to care for your own

139
00:05:49,080 --> 00:05:53,700
applications your own servers there are

140
00:05:51,750 --> 00:05:56,610
some managed services inside Amazon like

141
00:05:53,700 --> 00:05:59,400
s3 and RDS Amazon will handle that for

142
00:05:56,610 --> 00:06:01,380
you the backups for example you take

143
00:05:59,400 --> 00:06:03,299
care of your customer data you take care

144
00:06:01,380 --> 00:06:05,460
of your credentials and all of that so

145
00:06:03,300 --> 00:06:08,040
if I want to attack a customer inside

146
00:06:05,460 --> 00:06:10,289
Amazon now note that I'm not talking

147
00:06:08,040 --> 00:06:12,450
about attacking Amazon device itself

148
00:06:10,290 --> 00:06:15,390
attacking customers inside the Amazon

149
00:06:12,450 --> 00:06:17,370
Cloud so if I want to attack these are

150
00:06:15,390 --> 00:06:20,039
the most popular attack services in

151
00:06:17,370 --> 00:06:23,340
Amazon s3 the distributed file storage

152
00:06:20,040 --> 00:06:25,830
inside Amazon ec2 which are the virtual

153
00:06:23,340 --> 00:06:26,849
cloud servers inside Amazon RDS the

154
00:06:25,830 --> 00:06:29,580
managed database

155
00:06:26,850 --> 00:06:31,110
Amazon manages the DB for you including

156
00:06:29,580 --> 00:06:32,729
all the updates and backups so you only

157
00:06:31,110 --> 00:06:34,700
connect to the database and you know

158
00:06:32,729 --> 00:06:37,770
send your data and lambda which is the

159
00:06:34,700 --> 00:06:40,650
offering of Amazon for their function as

160
00:06:37,770 --> 00:06:42,539
a service a feature which means that you

161
00:06:40,650 --> 00:06:44,429
only apply upload your code your

162
00:06:42,539 --> 00:06:47,039
function and Amazon runs then

163
00:06:44,430 --> 00:06:48,090
varmints to execute that function for

164
00:06:47,040 --> 00:06:51,600
you so we don't have to care about

165
00:06:48,090 --> 00:06:54,359
updating the OS for example now attacks

166
00:06:51,600 --> 00:06:57,300
against these let's say services usually

167
00:06:54,360 --> 00:06:59,370
are being done for data theft mining

168
00:06:57,300 --> 00:07:01,080
cryptocurrencies on your expense so

169
00:06:59,370 --> 00:07:03,120
someone could for example attack your

170
00:07:01,080 --> 00:07:04,590
Amazon account and then they take your

171
00:07:03,120 --> 00:07:07,110
keys and then they run cryptocurrency

172
00:07:04,590 --> 00:07:08,929
miners and you're going to pay for all

173
00:07:07,110 --> 00:07:11,970
that processing and they've gained the

174
00:07:08,930 --> 00:07:15,030
mining operation on your on your build

175
00:07:11,970 --> 00:07:16,680
and of course on somewhere but that can

176
00:07:15,030 --> 00:07:18,599
be made less effective because Amazon

177
00:07:16,680 --> 00:07:21,690
allows easy back and restores at the

178
00:07:18,600 --> 00:07:24,660
cloud now let's talk more about ec2 a

179
00:07:21,690 --> 00:07:29,520
Seto is Amazon's fancy name for virtual

180
00:07:24,660 --> 00:07:31,830
VBS servers so basically you run you

181
00:07:29,520 --> 00:07:34,080
choose your size for your own VBS you

182
00:07:31,830 --> 00:07:36,419
can choose the the type is it Windows or

183
00:07:34,080 --> 00:07:38,520
Linux and then you can just log into it

184
00:07:36,420 --> 00:07:41,160
using SSH and then you can just manage

185
00:07:38,520 --> 00:07:43,680
it just like any other VBS of course you

186
00:07:41,160 --> 00:07:46,080
have no say in which Hardware runs on

187
00:07:43,680 --> 00:07:49,350
your ec2 and you don't have an info

188
00:07:46,080 --> 00:07:51,599
about the neighbors inside Amazon that

189
00:07:49,350 --> 00:07:54,150
are running next to you on the actual

190
00:07:51,600 --> 00:07:56,850
hardware host you're responsible for the

191
00:07:54,150 --> 00:07:59,460
LS and the updates and the hot security

192
00:07:56,850 --> 00:08:02,700
inside so in this in this image do you

193
00:07:59,460 --> 00:08:05,580
see the mouse cursor yeah so that's your

194
00:08:02,700 --> 00:08:07,080
your instance it's inside Amazon and you

195
00:08:05,580 --> 00:08:10,800
connect to it through the internet using

196
00:08:07,080 --> 00:08:12,599
your SSH key and then you manage this

197
00:08:10,800 --> 00:08:14,970
server just like any other server that

198
00:08:12,600 --> 00:08:16,710
you that you have so in reality it's let

199
00:08:14,970 --> 00:08:19,500
it's nothing special you can just attack

200
00:08:16,710 --> 00:08:22,109
it the usual you attack any other server

201
00:08:19,500 --> 00:08:24,600
and exploit against any running service

202
00:08:22,110 --> 00:08:27,600
web applications for example OS command

203
00:08:24,600 --> 00:08:30,180
injection local file includes and of

204
00:08:27,600 --> 00:08:32,940
most importance for us is SS RF server

205
00:08:30,180 --> 00:08:35,640
side request forgery SSR f is a

206
00:08:32,940 --> 00:08:38,370
variability in which you ask the trusted

207
00:08:35,640 --> 00:08:40,860
server to access internal services on

208
00:08:38,370 --> 00:08:44,100
your behalf so you for example you'll

209
00:08:40,860 --> 00:08:45,330
ask the server connect to this private

210
00:08:44,100 --> 00:08:46,650
IP for me and then the server will

211
00:08:45,330 --> 00:08:50,760
connect and then give you back the

212
00:08:46,650 --> 00:08:53,910
result so the reason SSR F is a special

213
00:08:50,760 --> 00:08:55,620
in the cloud is because Amazon and also

214
00:08:53,910 --> 00:08:57,779
Google and I think even as you're they

215
00:08:55,620 --> 00:08:59,610
have this special feature called instan

216
00:08:57,779 --> 00:09:02,579
metadata and internal metadata service

217
00:08:59,610 --> 00:09:06,029
that runs inside every virtual server in

218
00:09:02,579 --> 00:09:08,969
the cloud this metadata URL is usually

219
00:09:06,029 --> 00:09:12,749
this IP and you can call this is only

220
00:09:08,970 --> 00:09:15,329
internal to the instance itself so only

221
00:09:12,749 --> 00:09:18,480
the instance from inside its own OS can

222
00:09:15,329 --> 00:09:21,120
call this URL and of course if you call

223
00:09:18,480 --> 00:09:23,160
this URL using an SSRI vulnerability

224
00:09:21,120 --> 00:09:24,930
where you're outside and you ask this

225
00:09:23,160 --> 00:09:26,939
vulnerable instance to talk to this URL

226
00:09:24,930 --> 00:09:28,979
and then give you the result you reading

227
00:09:26,939 --> 00:09:30,809
it from inside the instance this

228
00:09:28,980 --> 00:09:34,709
internal metadata service can expose

229
00:09:30,809 --> 00:09:37,319
interesting stuff like credentials other

230
00:09:34,709 --> 00:09:39,689
interesting details about the metadata

231
00:09:37,319 --> 00:09:42,240
the server itself which you don't see

232
00:09:39,689 --> 00:09:43,800
next also if you want to attack ec2

233
00:09:42,240 --> 00:09:46,620
instances you can attack what they call

234
00:09:43,800 --> 00:09:48,209
the user data startup script when you

235
00:09:46,620 --> 00:09:50,699
create a virtual server in Amazon you

236
00:09:48,209 --> 00:09:53,160
can specify script that runs every time

237
00:09:50,699 --> 00:09:55,559
the server the server boots up for

238
00:09:53,160 --> 00:09:59,370
example it could be a configuration for

239
00:09:55,559 --> 00:10:01,079
a updating for example your source code

240
00:09:59,370 --> 00:10:03,059
from your github repository updating

241
00:10:01,079 --> 00:10:05,969
packages so usually it contains some

242
00:10:03,059 --> 00:10:09,689
sense to date like passwords Amazon also

243
00:10:05,970 --> 00:10:12,689
if you see if you see this image you can

244
00:10:09,689 --> 00:10:14,579
attach to the server and EBS which is

245
00:10:12,689 --> 00:10:17,459
elastic block storage what it means is

246
00:10:14,579 --> 00:10:19,769
that it's just like a regular small

247
00:10:17,459 --> 00:10:22,050
flash memory virtual disk that you can

248
00:10:19,769 --> 00:10:23,850
attach to the cloud if you can they

249
00:10:22,050 --> 00:10:26,128
attach that and then access it you can

250
00:10:23,850 --> 00:10:27,959
find interesting data for example if you

251
00:10:26,129 --> 00:10:30,089
are running active directory inside

252
00:10:27,959 --> 00:10:32,309
Amazon Cloud you can maybe copy this

253
00:10:30,089 --> 00:10:34,379
NTDs file which contains all the hashes

254
00:10:32,309 --> 00:10:37,980
so these are the main types of attacks

255
00:10:34,379 --> 00:10:43,259
that are special to a DB les instances

256
00:10:37,980 --> 00:10:45,420
now as a seraph usually you know the old

257
00:10:43,259 --> 00:10:47,189
web operable days it actually lived in

258
00:10:45,420 --> 00:10:49,649
the dog house nobody care about cared

259
00:10:47,189 --> 00:10:52,998
about xsrf it was always low priority

260
00:10:49,649 --> 00:10:55,620
who wont fix or even totally ignored so

261
00:10:52,999 --> 00:10:57,540
people are always cared about RCE

262
00:10:55,620 --> 00:10:59,970
SQL injection cross-site scripting

263
00:10:57,540 --> 00:11:02,339
nobody cared much about xsrf because

264
00:10:59,970 --> 00:11:04,040
they thought it was you know it didn't

265
00:11:02,339 --> 00:11:06,449
have that powerful

266
00:11:04,040 --> 00:11:08,849
demo ability where you can easily

267
00:11:06,449 --> 00:11:11,670
demonstrate how dangerous it can be now

268
00:11:08,850 --> 00:11:14,700
amazon came and saved s SRF

269
00:11:11,670 --> 00:11:17,010
and the world of cloud became king in

270
00:11:14,700 --> 00:11:19,290
the cloud as a survivor abilities can

271
00:11:17,010 --> 00:11:20,880
result in full infrastructure takeover

272
00:11:19,290 --> 00:11:22,890
so we're not talking about takeover or

273
00:11:20,880 --> 00:11:24,480
the server or the database itself we're

274
00:11:22,890 --> 00:11:28,910
talking about full takeover of the

275
00:11:24,480 --> 00:11:32,310
entire edible s account of that customer

276
00:11:28,910 --> 00:11:35,160
for example as we said we can use SS ref

277
00:11:32,310 --> 00:11:37,859
to contact the local metadata service

278
00:11:35,160 --> 00:11:40,709
running inside this idealized instance

279
00:11:37,860 --> 00:11:42,960
for example you can ask for the security

280
00:11:40,710 --> 00:11:46,200
credentials that are running with the

281
00:11:42,960 --> 00:11:48,300
server so for example I did this from

282
00:11:46,200 --> 00:11:51,120
inside one of my instances I called the

283
00:11:48,300 --> 00:11:53,280
internal method metadata service ask it

284
00:11:51,120 --> 00:11:56,010
for the credentials of the current

285
00:11:53,280 --> 00:11:59,040
server and then it gave me an access key

286
00:11:56,010 --> 00:12:01,920
and the secret which are the username

287
00:11:59,040 --> 00:12:04,170
and password for the Amazon API using

288
00:12:01,920 --> 00:12:06,449
this I can just plug it inside Amazon's

289
00:12:04,170 --> 00:12:08,699
API and there can make requests that

290
00:12:06,450 --> 00:12:11,490
will allow me to get what access to

291
00:12:08,700 --> 00:12:13,950
whatever resource this instance has I'm

292
00:12:11,490 --> 00:12:18,240
going to show a demo for that very soon

293
00:12:13,950 --> 00:12:20,970
so I'm going to show a project made by

294
00:12:18,240 --> 00:12:23,010
Rhino security lab it's called cloud

295
00:12:20,970 --> 00:12:25,230
goat project it's an intentionally

296
00:12:23,010 --> 00:12:27,180
vulnerable application now they have

297
00:12:25,230 --> 00:12:30,330
virgin to bomb dunk to display version

298
00:12:27,180 --> 00:12:31,979
one we're going to use SS RF to actually

299
00:12:30,330 --> 00:12:34,410
try to get more interesting stuff from

300
00:12:31,980 --> 00:12:38,190
inside the metadata so I'm going to show

301
00:12:34,410 --> 00:12:40,860
it actually in a demo now so that's the

302
00:12:38,190 --> 00:12:44,460
beige if you see the design is really

303
00:12:40,860 --> 00:12:46,890
nice it's actually responsive you don't

304
00:12:44,460 --> 00:12:49,110
say it come on

305
00:12:46,890 --> 00:12:52,830
Yanis could you would you mind kindly

306
00:12:49,110 --> 00:12:59,100
help with this do you see the slides now

307
00:12:52,830 --> 00:13:02,220
no nothing shows so I'm gonna plug this

308
00:12:59,100 --> 00:13:09,690
one out and blog it's back again see if

309
00:13:02,220 --> 00:13:12,600
it works okay now let's see if this okay

310
00:13:09,690 --> 00:13:15,660
so as I said it looks nice and the

311
00:13:12,600 --> 00:13:18,420
design is responsive so now this is a

312
00:13:15,660 --> 00:13:22,079
simple URL fetch your application don't

313
00:13:18,420 --> 00:13:24,060
laugh that's my design skills so what

314
00:13:22,080 --> 00:13:25,350
did this application does is that I give

315
00:13:24,060 --> 00:13:27,719
it a password that

316
00:13:25,350 --> 00:13:28,980
give Terrell it will go and fetch that

317
00:13:27,720 --> 00:13:32,070
URL for me okay

318
00:13:28,980 --> 00:13:36,210
some go to what is the password for this

319
00:13:32,070 --> 00:13:38,460
one that's the password don't want you

320
00:13:36,210 --> 00:13:44,670
getting my keys right so I'm going to

321
00:13:38,460 --> 00:13:47,910
for example connect to google.com now it

322
00:13:44,670 --> 00:13:50,250
will call Google comm not from my own IP

323
00:13:47,910 --> 00:13:51,900
but from inside Amazon so as far as

324
00:13:50,250 --> 00:13:56,240
Google is concerned it's being contacted

325
00:13:51,900 --> 00:13:59,310
from inside Amazon so that's really nice

326
00:13:56,240 --> 00:14:01,550
so far it's really basic people use SSL

327
00:13:59,310 --> 00:14:03,780
vulnerabilities for things like

328
00:14:01,550 --> 00:14:06,839
accessing internal IBS and all of that

329
00:14:03,780 --> 00:14:10,589
so as we're gonna see it fetches a route

330
00:14:06,840 --> 00:14:13,920
for you when I did the this screenshot

331
00:14:10,590 --> 00:14:14,910
it was actually falafel day so the

332
00:14:13,920 --> 00:14:17,189
Google dork

333
00:14:14,910 --> 00:14:21,150
you know showed of these this falafel

334
00:14:17,190 --> 00:14:21,660
sandwich so that was nice yeah now I'm

335
00:14:21,150 --> 00:14:23,699
hungry

336
00:14:21,660 --> 00:14:27,390
good thing and one she's coming next

337
00:14:23,700 --> 00:14:30,090
right so basically we now know

338
00:14:27,390 --> 00:14:32,910
understand what's a chef does can we try

339
00:14:30,090 --> 00:14:34,650
protocols that are not HTTP protocols so

340
00:14:32,910 --> 00:14:36,689
instead of calling pages maybe I can

341
00:14:34,650 --> 00:14:39,720
call an FTP protocol maybe I can call

342
00:14:36,690 --> 00:14:41,940
other services running other protocols

343
00:14:39,720 --> 00:14:46,850
instead of HTTP so we can try the file

344
00:14:41,940 --> 00:14:49,620
protocol let's see let's see the demo

345
00:14:46,850 --> 00:14:53,600
okay you can't see the demo again I

346
00:14:49,620 --> 00:14:53,600
don't know what this why this happens

347
00:14:56,960 --> 00:15:08,070
okay so let's go back again let's strike

348
00:15:02,190 --> 00:15:11,100
the which file do you want of course

349
00:15:08,070 --> 00:15:13,080
everyone's favorite right so now we can

350
00:15:11,100 --> 00:15:15,480
call the file protocol so it's not just

351
00:15:13,080 --> 00:15:16,770
HTTP protocols you can call basically

352
00:15:15,480 --> 00:15:18,600
whatever depending of course on the

353
00:15:16,770 --> 00:15:20,699
library being used in the backend so

354
00:15:18,600 --> 00:15:22,620
that's nice now we have access to much

355
00:15:20,700 --> 00:15:24,770
more than just HTTP you can read the

356
00:15:22,620 --> 00:15:27,980
local configuration file you can read

357
00:15:24,770 --> 00:15:30,470
source code you can read all of that

358
00:15:27,980 --> 00:15:35,280
so what else we can do

359
00:15:30,470 --> 00:15:36,780
back again sorry why don't you try

360
00:15:35,280 --> 00:15:38,550
something else why don't you try the

361
00:15:36,780 --> 00:15:39,689
brach file system anybody knows what the

362
00:15:38,550 --> 00:15:45,209
proc fast

363
00:15:39,689 --> 00:15:45,959
I don't see many hands being up okay

364
00:15:45,209 --> 00:15:47,550
good

365
00:15:45,959 --> 00:15:49,709
so the Brockville system is a special

366
00:15:47,550 --> 00:15:51,748
file system virtual fast inside linux

367
00:15:49,709 --> 00:15:53,989
which allows you to have access to

368
00:15:51,749 --> 00:15:56,009
certain properties of each process and

369
00:15:53,990 --> 00:15:58,230
certain properties of the current

370
00:15:56,009 --> 00:16:00,959
process and it is attached like a

371
00:15:58,230 --> 00:16:03,509
regular file inside inside Linux so I

372
00:16:00,959 --> 00:16:05,339
can access it using /proc and then the

373
00:16:03,509 --> 00:16:07,740
process ID for example five or ten and

374
00:16:05,339 --> 00:16:09,509
then some are phone inside it so some

375
00:16:07,740 --> 00:16:11,399
interesting info inside the broad file

376
00:16:09,509 --> 00:16:12,679
system for each process could be the

377
00:16:11,399 --> 00:16:15,980
starting command line options

378
00:16:12,679 --> 00:16:19,949
environmental variables memory mappings

379
00:16:15,980 --> 00:16:22,470
arm cache table mounted devices and even

380
00:16:19,949 --> 00:16:24,240
the accessible itself so if you have for

381
00:16:22,470 --> 00:16:26,040
example an application that's actually a

382
00:16:24,240 --> 00:16:28,230
Python script you can use the proc file

383
00:16:26,040 --> 00:16:31,949
system to read its own source code for

384
00:16:28,230 --> 00:16:35,519
example so let's see an example here

385
00:16:31,949 --> 00:16:37,349
I could call /proc and that's life self

386
00:16:35,519 --> 00:16:39,720
which means that current process so I

387
00:16:37,350 --> 00:16:42,629
don't even have to guess my brother's ID

388
00:16:39,720 --> 00:16:44,429
so I can just use /proc slash self and

389
00:16:42,629 --> 00:16:46,589
then I can use command line to see the

390
00:16:44,429 --> 00:16:48,449
command line that was starting this

391
00:16:46,589 --> 00:16:50,610
current process this is interesting

392
00:16:48,449 --> 00:16:52,799
because people could start processes

393
00:16:50,610 --> 00:16:55,079
like this right application and then

394
00:16:52,799 --> 00:16:56,970
using the flags for this name and

395
00:16:55,079 --> 00:16:59,670
password so this would for example show

396
00:16:56,970 --> 00:17:03,360
up for me using slash bot can also use

397
00:16:59,670 --> 00:17:05,459
/proc default the virtual brach file

398
00:17:03,360 --> 00:17:07,349
system to read the ARP cache table

399
00:17:05,459 --> 00:17:10,140
inside the server so this is interesting

400
00:17:07,349 --> 00:17:12,299
because now I can see other IP addresses

401
00:17:10,140 --> 00:17:13,949
and other MAC addresses inside the

402
00:17:12,299 --> 00:17:16,648
current network I can see what kind of

403
00:17:13,949 --> 00:17:19,020
devices they run I can see more targets

404
00:17:16,648 --> 00:17:21,629
for further exploitation and the local

405
00:17:19,020 --> 00:17:25,740
network so this is actually a sample

406
00:17:21,630 --> 00:17:28,770
that I ran on my instance so it's really

407
00:17:25,740 --> 00:17:32,100
a nice to have these if you think about

408
00:17:28,770 --> 00:17:33,570
a seraph in ways beyond just HTTP

409
00:17:32,100 --> 00:17:35,820
protocol you can see really interesting

410
00:17:33,570 --> 00:17:38,600
stuff and of course we can just call the

411
00:17:35,820 --> 00:17:41,520
Eddyville as metadata service like this

412
00:17:38,600 --> 00:17:44,158
actual it's a URL returns for you

413
00:17:41,520 --> 00:17:46,370
directories so I'm going to show right

414
00:17:44,159 --> 00:17:46,370
now

415
00:17:49,820 --> 00:18:03,809
so I'm going to say so I need to copy

416
00:17:55,559 --> 00:18:08,549
that again okay so now let's see the

417
00:18:03,809 --> 00:18:11,730
metadata service actually be to think I

418
00:18:08,549 --> 00:18:15,570
already have it here so I'm going to

419
00:18:11,730 --> 00:18:17,580
show how it starts then step by step

420
00:18:15,570 --> 00:18:20,730
we're going to redouble the metadata

421
00:18:17,580 --> 00:18:23,658
service soap retrieve the contents these

422
00:18:20,730 --> 00:18:25,710
are the metadata service directories

423
00:18:23,659 --> 00:18:27,840
with a bit of trial and error and

424
00:18:25,710 --> 00:18:31,250
reading documentation you can see which

425
00:18:27,840 --> 00:18:36,178
methods are actually interesting for you

426
00:18:31,250 --> 00:18:38,909
copy the password again okay so now

427
00:18:36,179 --> 00:18:45,649
metadata let's go back in there and then

428
00:18:38,909 --> 00:18:45,649
say make a data survive password again

429
00:18:47,210 --> 00:19:04,980
okay mate data time I did yeah Wow and

430
00:19:00,450 --> 00:19:07,169
now I didn't put the password okay okay

431
00:19:04,980 --> 00:19:09,929
so now we have it lots of interesting

432
00:19:07,169 --> 00:19:12,570
stuff now Amazon's identity and

433
00:19:09,929 --> 00:19:14,789
management services called I am so

434
00:19:12,570 --> 00:19:15,928
that's we're going to check next of

435
00:19:14,789 --> 00:19:18,149
course I'm cheating because I know

436
00:19:15,929 --> 00:19:19,620
beforehand but eventually you want to

437
00:19:18,149 --> 00:19:21,000
try and see everything inside here

438
00:19:19,620 --> 00:19:24,229
because these are some really

439
00:19:21,000 --> 00:19:26,610
interesting use information then I am

440
00:19:24,230 --> 00:19:30,980
now the password again does it getting

441
00:19:26,610 --> 00:19:33,629
really annoying right at least it works

442
00:19:30,980 --> 00:19:37,200
by the way if you want to hire me from

443
00:19:33,630 --> 00:19:40,529
my web design services I don't recommend

444
00:19:37,200 --> 00:19:44,210
that so security credentials now we are

445
00:19:40,529 --> 00:19:49,730
getting more interesting stuff

446
00:19:44,210 --> 00:19:54,029
credentials copy the password again okay

447
00:19:49,730 --> 00:19:56,940
so now ec2 as we read that the role name

448
00:19:54,029 --> 00:19:59,340
that the role I gave to this server to

449
00:19:56,940 --> 00:20:02,660
run so obviously it can for example

450
00:19:59,340 --> 00:20:06,659
access as three buckets using read-only

451
00:20:02,660 --> 00:20:09,570
privileges only so now I could use this

452
00:20:06,660 --> 00:20:14,490
and then also layer the password again

453
00:20:09,570 --> 00:20:16,020
and it would show for me the credentials

454
00:20:14,490 --> 00:20:18,360
actually the access key and the secret

455
00:20:16,020 --> 00:20:21,720
access key so I can take these and then

456
00:20:18,360 --> 00:20:24,659
just plug them inside my own inside the

457
00:20:21,720 --> 00:20:26,970
Amazon AWS ABI and then you'll have

458
00:20:24,660 --> 00:20:29,280
access to this role whatever permissions

459
00:20:26,970 --> 00:20:31,560
that role has you will have also so we

460
00:20:29,280 --> 00:20:35,220
can call any ABI that you want so let's

461
00:20:31,560 --> 00:20:37,250
go again back to the slide we've seen

462
00:20:35,220 --> 00:20:41,070
how we can call the metadata service

463
00:20:37,250 --> 00:20:43,350
release them both as we said the

464
00:20:41,070 --> 00:20:45,330
credentials so what can I do with this

465
00:20:43,350 --> 00:20:47,070
if you want to know how dangerous this

466
00:20:45,330 --> 00:20:49,800
can be you can just ask the Capital One

467
00:20:47,070 --> 00:20:52,290
Bank which I think a few months ago they

468
00:20:49,800 --> 00:20:55,889
were compromised using what is thought

469
00:20:52,290 --> 00:20:58,139
to be an SSR vulnerability inside an

470
00:20:55,890 --> 00:21:02,340
instance running a wife and that's

471
00:20:58,140 --> 00:21:05,040
really ironic so what the attacker did

472
00:21:02,340 --> 00:21:07,830
it was a she by the way she actually

473
00:21:05,040 --> 00:21:11,610
used this SSR variability and then she

474
00:21:07,830 --> 00:21:13,980
got the Amazon access keys from inside

475
00:21:11,610 --> 00:21:15,899
the instance metadata service and then

476
00:21:13,980 --> 00:21:18,870
used that she blogged it in the Amazon

477
00:21:15,900 --> 00:21:21,360
API and then used that to call and read

478
00:21:18,870 --> 00:21:24,209
the s3 buckets of Capital One Bank

479
00:21:21,360 --> 00:21:26,639
including I think millions of date

480
00:21:24,210 --> 00:21:29,280
customer data and all of that so this

481
00:21:26,640 --> 00:21:31,650
results in a really big let's say breach

482
00:21:29,280 --> 00:21:33,510
for for a seraph so if you want to try

483
00:21:31,650 --> 00:21:36,600
something like this of course if you're

484
00:21:33,510 --> 00:21:38,850
authorized you can use this tool that I

485
00:21:36,600 --> 00:21:40,889
made you know how the need is the mother

486
00:21:38,850 --> 00:21:42,570
of invention so I was doing consultation

487
00:21:40,890 --> 00:21:43,860
of my clients in the cloud and then I

488
00:21:42,570 --> 00:21:46,409
realized there are some steps that I

489
00:21:43,860 --> 00:21:48,990
needed to totem 8 and I needed to make

490
00:21:46,410 --> 00:21:51,750
easier so I made this tool what it does

491
00:21:48,990 --> 00:21:53,940
is it's a post exploitation attack so it

492
00:21:51,750 --> 00:21:55,260
assumes that you already have gotten

493
00:21:53,940 --> 00:21:57,270
your keys for example through the

494
00:21:55,260 --> 00:22:02,070
Assessor availability and then you can

495
00:21:57,270 --> 00:22:04,139
just use this tool to launch some

496
00:22:02,070 --> 00:22:06,540
attacks against the analyst environment

497
00:22:04,140 --> 00:22:09,570
for example you can dump the credentials

498
00:22:06,540 --> 00:22:11,250
saved inside this Amazon account Amazon

499
00:22:09,570 --> 00:22:11,879
provides for your credential store like

500
00:22:11,250 --> 00:22:14,430
a vault

501
00:22:11,880 --> 00:22:16,110
it's called EDS secrets manager and an

502
00:22:14,430 --> 00:22:17,970
evil s-parameter store

503
00:22:16,110 --> 00:22:20,549
scientists you can for example add your

504
00:22:17,970 --> 00:22:22,380
encryption keys database password and

505
00:22:20,549 --> 00:22:24,150
all of that and of course there's an API

506
00:22:22,380 --> 00:22:25,920
for it so you can just query it and then

507
00:22:24,150 --> 00:22:27,809
have access to be secret themselves if

508
00:22:25,920 --> 00:22:29,580
you have permission if your key has

509
00:22:27,809 --> 00:22:32,610
permission for that you can remotely

510
00:22:29,580 --> 00:22:35,399
control ec2 instances the way the only

511
00:22:32,610 --> 00:22:38,010
way to control an ec2 instance is to use

512
00:22:35,400 --> 00:22:41,010
the SSH key that was set up in the

513
00:22:38,010 --> 00:22:42,929
initialization process of this server if

514
00:22:41,010 --> 00:22:46,710
you don't have this as a set key then

515
00:22:42,929 --> 00:22:49,290
you can't log into that ec2 server there

516
00:22:46,710 --> 00:22:50,070
is a way of course from inside amazon's

517
00:22:49,290 --> 00:22:52,440
ABI

518
00:22:50,070 --> 00:22:55,080
it's called system manager that can

519
00:22:52,440 --> 00:22:57,870
allow you to have root or administrator

520
00:22:55,080 --> 00:23:00,020
access shell on that server without

521
00:22:57,870 --> 00:23:03,510
having access to this such key so I made

522
00:23:00,020 --> 00:23:06,090
the toolbar to actually utilize that now

523
00:23:03,510 --> 00:23:09,870
bark means like link in Arabic by the

524
00:23:06,090 --> 00:23:12,389
way so you can see from the logo you can

525
00:23:09,870 --> 00:23:14,729
get Metasploit reverse shell on the ec2

526
00:23:12,390 --> 00:23:16,200
instance coming from inside Amazon so

527
00:23:14,730 --> 00:23:19,200
the connection the connection is going

528
00:23:16,200 --> 00:23:21,630
to be from inside Amazon from inside

529
00:23:19,200 --> 00:23:23,309
Amazon services so it's going to be

530
00:23:21,630 --> 00:23:25,620
really more difficult for traditional

531
00:23:23,309 --> 00:23:28,379
defense mechanisms to actually detect

532
00:23:25,620 --> 00:23:30,780
that and of course dump ec2 instance

533
00:23:28,380 --> 00:23:33,570
metadata do some attacks against lambda

534
00:23:30,780 --> 00:23:37,110
functions we want to see when I created

535
00:23:33,570 --> 00:23:40,168
bark I actually wanted to try out the

536
00:23:37,110 --> 00:23:42,270
idealized API features so I made a

537
00:23:40,169 --> 00:23:44,309
training mode inside so if you want to

538
00:23:42,270 --> 00:23:46,530
use it you don't have to actually mess

539
00:23:44,309 --> 00:23:47,879
up and running production value can just

540
00:23:46,530 --> 00:23:51,389
use the training mode which will create

541
00:23:47,880 --> 00:23:53,309
for you some services temporary roles

542
00:23:51,390 --> 00:23:54,419
and servers and then you can attack them

543
00:23:53,309 --> 00:23:56,040
and once you're done with the training

544
00:23:54,419 --> 00:23:59,280
mode you can just it will clean them

545
00:23:56,040 --> 00:24:02,070
after itself and it will actually try to

546
00:23:59,280 --> 00:24:04,320
utilize all the three features from

547
00:24:02,070 --> 00:24:06,809
inside Amazon so it will try to use the

548
00:24:04,320 --> 00:24:08,460
size of ec2 instances that is actually

549
00:24:06,809 --> 00:24:10,260
inside the free tier of Amazon so we

550
00:24:08,460 --> 00:24:12,210
want to get billed for it this is an

551
00:24:10,260 --> 00:24:13,980
example of how you can that's right how

552
00:24:12,210 --> 00:24:15,000
the training mode works it asks you do

553
00:24:13,980 --> 00:24:17,130
you want to create a Linux or Windows

554
00:24:15,000 --> 00:24:19,470
instance what kind of payloads do you

555
00:24:17,130 --> 00:24:21,419
want to do to utilize for example

556
00:24:19,470 --> 00:24:24,240
Metasploit and then you can have here

557
00:24:21,419 --> 00:24:26,400
your own listening server that listens

558
00:24:24,240 --> 00:24:29,049
to the mid spot reverse shell so that's

559
00:24:26,400 --> 00:24:32,320
we are using DMS whatever shown here and

560
00:24:29,049 --> 00:24:36,009
then you hope you have to get a virtual

561
00:24:32,320 --> 00:24:39,129
coming back to you so we don't see that

562
00:24:36,009 --> 00:24:41,139
in a demo very soon now and I hope it

563
00:24:39,129 --> 00:24:45,459
all works I'm not gonna do the same

564
00:24:41,139 --> 00:24:47,889
dance here okay so also it can dump

565
00:24:45,460 --> 00:24:49,389
credentials inside a SS it can give you

566
00:24:47,889 --> 00:24:51,279
more information about your attack

567
00:24:49,389 --> 00:24:52,479
service or how many servers how many

568
00:24:51,279 --> 00:24:55,360
functions are there how many security

569
00:24:52,480 --> 00:24:57,999
groups and now I'm going to show a demo

570
00:24:55,360 --> 00:25:00,219
next of Paul of course for this tool is

571
00:24:57,999 --> 00:25:02,799
to create more lambda function attacks

572
00:25:00,220 --> 00:25:03,279
make it modular add some persistence in

573
00:25:02,799 --> 00:25:05,289
backdooring

574
00:25:03,279 --> 00:25:11,609
features cell now I'm going to do the

575
00:25:05,289 --> 00:25:11,609
demo and I hope everything works fine so

576
00:25:12,960 --> 00:25:20,309
okay ask you logo you know hackers love

577
00:25:16,359 --> 00:25:23,619
that so I'm gonna you don't say anything

578
00:25:20,309 --> 00:25:26,830
you know just tell me beforehand guys

579
00:25:23,619 --> 00:25:29,199
okay so I can so I don't get embarrassed

580
00:25:26,830 --> 00:25:34,119
like this all the time now it shows up

581
00:25:29,200 --> 00:25:40,299
right and as I told you ascii logo you

582
00:25:34,119 --> 00:25:45,759
won't see it again okay nice thank you

583
00:25:40,299 --> 00:25:51,489
very much i love this crowd so where was

584
00:25:45,759 --> 00:25:55,090
i am going to copy my credentials so i'm

585
00:25:51,489 --> 00:25:58,330
going to say set profile give it the

586
00:25:55,090 --> 00:26:00,879
credentials it will ask for passwords

587
00:25:58,330 --> 00:26:02,918
and to not show them because it's a demo

588
00:26:00,879 --> 00:26:04,539
mode so and now it will ask what is your

589
00:26:02,919 --> 00:26:06,720
preferred region I'll use the default

590
00:26:04,539 --> 00:26:10,149
one because it has the largest set of

591
00:26:06,720 --> 00:26:14,409
supported avi features help let's see

592
00:26:10,149 --> 00:26:20,258
what we can do let's try the training

593
00:26:14,409 --> 00:26:22,149
mode hell the game start okay so it will

594
00:26:20,259 --> 00:26:23,529
help create the temporary environment

595
00:26:22,149 --> 00:26:24,969
for you to say do you want to create a

596
00:26:23,529 --> 00:26:28,509
Linux or Windows environment let's say

597
00:26:24,970 --> 00:26:32,799
Linux it will now choose a certain type

598
00:26:28,509 --> 00:26:37,990
of Amazon image for the server now it

599
00:26:32,799 --> 00:26:40,029
will to take few minutes to create it

600
00:26:37,990 --> 00:26:43,270
hopefully much sooner so we have to wait

601
00:26:40,029 --> 00:26:45,400
for it meanwhile

602
00:26:43,270 --> 00:26:54,310
have a server that's waiting for the

603
00:26:45,400 --> 00:26:57,190
connection so hopefully it will work now

604
00:26:54,310 --> 00:26:58,720
if you noticed if you want to use this

605
00:26:57,190 --> 00:27:00,940
feature inside mark you need to have

606
00:26:58,720 --> 00:27:05,320
this permission inside this inside your

607
00:27:00,940 --> 00:27:07,300
Amazon API role so Amazon ec2 role for

608
00:27:05,320 --> 00:27:08,800
our system which allows the SSM servers

609
00:27:07,300 --> 00:27:11,320
the system and your servers to run

610
00:27:08,800 --> 00:27:12,879
commands inside your ec2 servers so

611
00:27:11,320 --> 00:27:15,939
that's the main role that you actually

612
00:27:12,880 --> 00:27:19,180
need for this feature to work inside so

613
00:27:15,940 --> 00:27:21,310
okay now we have created it the instance

614
00:27:19,180 --> 00:27:25,180
is created what kind of attack do we

615
00:27:21,310 --> 00:27:27,550
want let's see Metasploit what Ivy do

616
00:27:25,180 --> 00:27:35,770
you want to use I'm going to choose this

617
00:27:27,550 --> 00:27:38,139
Ivy now don't - okay so what port that

618
00:27:35,770 --> 00:27:41,590
support it will say what kind of shell

619
00:27:38,140 --> 00:27:42,910
do you want now it will sell it will

620
00:27:41,590 --> 00:27:45,370
give you the command that you should you

621
00:27:42,910 --> 00:27:47,260
can just copy best inside your listening

622
00:27:45,370 --> 00:27:50,590
server just to make it easier to prepare

623
00:27:47,260 --> 00:27:54,629
the listening environment so now it will

624
00:27:50,590 --> 00:27:59,169
launch the listener for us then it will

625
00:27:54,630 --> 00:28:01,450
try to create a payload it expects that

626
00:27:59,170 --> 00:28:04,960
Callie a that Metz what is installed on

627
00:28:01,450 --> 00:28:07,330
your own system so this is a Kali Linux

628
00:28:04,960 --> 00:28:10,620
server so it has the ability to do that

629
00:28:07,330 --> 00:28:14,980
because that's what is already installed

630
00:28:10,620 --> 00:28:16,989
now it's sending my temperature by thumb

631
00:28:14,980 --> 00:28:20,350
based payload that's the command it's

632
00:28:16,990 --> 00:28:22,840
sending to the instance now we will see

633
00:28:20,350 --> 00:28:26,139
if we got okay so now we have got a

634
00:28:22,840 --> 00:28:29,679
session see that now I get to do the

635
00:28:26,140 --> 00:28:34,330
same dance write sessions I and then one

636
00:28:29,680 --> 00:28:36,070
and now I have the sessions info so now

637
00:28:34,330 --> 00:28:38,290
this is the Amazon server connect me

638
00:28:36,070 --> 00:28:40,899
back to me if I get for example a shell

639
00:28:38,290 --> 00:28:43,810
now I have a shell inside inside Amazon

640
00:28:40,900 --> 00:28:48,520
so inside the Amazon ec2 server even

641
00:28:43,810 --> 00:28:50,169
though I don't have access to the SSH

642
00:28:48,520 --> 00:28:54,320
key so that's one way you can do both

643
00:28:50,170 --> 00:28:58,080
exploitation attacks inside the server

644
00:28:54,320 --> 00:28:59,850
once you're done the training mode will

645
00:28:58,080 --> 00:29:01,679
understand that you have returned and

646
00:28:59,850 --> 00:29:03,570
now it will say okay now I'm terminating

647
00:29:01,680 --> 00:29:05,670
the instance cleaning up deleting the

648
00:29:03,570 --> 00:29:07,409
role and everything and then after that

649
00:29:05,670 --> 00:29:10,190
it will say that to tell you that you

650
00:29:07,410 --> 00:29:13,380
are now done and that's it is finished

651
00:29:10,190 --> 00:29:16,820
so let's wait for the training mode to

652
00:29:13,380 --> 00:29:16,820
to to be complete

653
00:29:29,860 --> 00:29:34,928
now okay so now it now it is done with a

654
00:29:33,580 --> 00:29:38,110
training mode everything is a cleaned up

655
00:29:34,929 --> 00:29:43,330
I don't hear any clapping so that's

656
00:29:38,110 --> 00:29:45,070
really yeah thank you very much so if I

657
00:29:43,330 --> 00:29:48,970
want to use this tool in production I

658
00:29:45,070 --> 00:29:50,769
can just use the attack service function

659
00:29:48,970 --> 00:29:53,140
this one will go through your entire

660
00:29:50,769 --> 00:29:55,600
Amazon in all of the regions available

661
00:29:53,140 --> 00:29:58,059
and try to find any server that's

662
00:29:55,600 --> 00:30:00,370
running inside this region because

663
00:29:58,059 --> 00:30:02,289
Amazon uses lots of regions in the

664
00:30:00,370 --> 00:30:05,379
United States in Europe and Asia and

665
00:30:02,289 --> 00:30:07,059
South America for example now recently

666
00:30:05,380 --> 00:30:09,460
in the Middle East as well in Bahrain so

667
00:30:07,059 --> 00:30:11,320
it will go through all the regions try

668
00:30:09,460 --> 00:30:13,539
to find all the servers and the lambda

669
00:30:11,320 --> 00:30:16,928
functions running inside the region try

670
00:30:13,539 --> 00:30:18,879
to give you all your options for any

671
00:30:16,929 --> 00:30:20,260
activity and it was the exportation

672
00:30:18,880 --> 00:30:22,620
attack that you want so for example here

673
00:30:20,260 --> 00:30:24,970
we can see we have some lambda functions

674
00:30:22,620 --> 00:30:26,379
it also displays the environmental

675
00:30:24,970 --> 00:30:29,019
variables for them because they could

676
00:30:26,380 --> 00:30:32,559
contain passwords and secrets API keys

677
00:30:29,019 --> 00:30:37,090
for example so let's go up-up that's an

678
00:30:32,559 --> 00:30:38,559
instance that was stopped we have lambda

679
00:30:37,090 --> 00:30:39,639
functions you can see their

680
00:30:38,559 --> 00:30:42,940
environmental variables for example

681
00:30:39,639 --> 00:30:44,620
Twitter API keys so the environmental

682
00:30:42,940 --> 00:30:47,110
variables for lambda functions could

683
00:30:44,620 --> 00:30:50,260
contain some sensitive information let's

684
00:30:47,110 --> 00:30:52,899
go back up again these are our instances

685
00:30:50,260 --> 00:30:56,590
for example their public IP so it gives

686
00:30:52,899 --> 00:31:00,510
you let's say a whole view of your own

687
00:30:56,590 --> 00:31:04,029
environment let's see some ec2 attacks

688
00:31:00,510 --> 00:31:07,990
we can list all the images that we have

689
00:31:04,029 --> 00:31:10,149
now let's run some attacks you can chose

690
00:31:07,990 --> 00:31:14,620
choose against all instances or just one

691
00:31:10,149 --> 00:31:17,049
so I'm going to say just one and then

692
00:31:14,620 --> 00:31:22,989
I'm going to have to paste or just use

693
00:31:17,049 --> 00:31:24,158
stamp completion for my instance so now

694
00:31:22,990 --> 00:31:26,260
it will say what do you want to do

695
00:31:24,159 --> 00:31:28,960
download the metadata for me for example

696
00:31:26,260 --> 00:31:31,690
this one is really simple it will go and

697
00:31:28,960 --> 00:31:33,279
send this Python command which will

698
00:31:31,690 --> 00:31:36,340
actually display all of your the

699
00:31:33,279 --> 00:31:38,260
metadata service from inside this ec2

700
00:31:36,340 --> 00:31:40,990
instance you can also do a reverse shell

701
00:31:38,260 --> 00:31:42,700
so now we can see we also again have the

702
00:31:40,990 --> 00:31:43,690
access to the access key and the secret

703
00:31:42,700 --> 00:31:44,860
axis

704
00:31:43,690 --> 00:31:47,049
okay and then you can use this one

705
00:31:44,860 --> 00:31:50,049
inside work for example for more attacks

706
00:31:47,049 --> 00:31:57,279
so that's basically basically it now we

707
00:31:50,049 --> 00:31:59,320
can go back to the slides okay next for

708
00:31:57,279 --> 00:32:01,659
me I'm going to attack to describe the

709
00:31:59,320 --> 00:32:03,070
lambda function in AC to serve as your

710
00:32:01,659 --> 00:32:04,750
responsible for running the server and

711
00:32:03,070 --> 00:32:06,700
nobody likes that because we don't like

712
00:32:04,750 --> 00:32:08,950
to update OS we don't like to update the

713
00:32:06,700 --> 00:32:10,000
environment don't like to update all the

714
00:32:08,950 --> 00:32:12,279
windows updates if you're running

715
00:32:10,000 --> 00:32:14,649
Windows servers so Amazon allows you to

716
00:32:12,279 --> 00:32:17,860
just put your code your code files

717
00:32:14,649 --> 00:32:19,658
Python Java for example and then Amazon

718
00:32:17,860 --> 00:32:21,370
will create the environment that runs

719
00:32:19,659 --> 00:32:23,590
for you they call serverless of course

720
00:32:21,370 --> 00:32:25,809
there's this really small server that

721
00:32:23,590 --> 00:32:28,299
lives for less than a second to execute

722
00:32:25,809 --> 00:32:29,918
your function then go back again so no

723
00:32:28,299 --> 00:32:32,350
server operations needed for server

724
00:32:29,919 --> 00:32:34,779
lists the variables against several

725
00:32:32,350 --> 00:32:38,080
functions are the regular application

726
00:32:34,779 --> 00:32:40,809
rambled is like OS and RCE there's a

727
00:32:38,080 --> 00:32:43,029
special type of ability that effects

728
00:32:40,809 --> 00:32:45,850
several functions we call it server less

729
00:32:43,029 --> 00:32:48,460
event injection attacks the way Cerberus

730
00:32:45,850 --> 00:32:50,529
functions work is that they don't accept

731
00:32:48,460 --> 00:32:53,080
input from users directly they accept

732
00:32:50,529 --> 00:32:55,539
input coming from events which are

733
00:32:53,080 --> 00:32:57,789
events triggered from inside Amazon

734
00:32:55,539 --> 00:33:02,049
itself so I'm going to show an example

735
00:32:57,789 --> 00:33:04,149
of what an event could be for example

736
00:33:02,049 --> 00:33:07,629
suppose I have a Severus function that

737
00:33:04,149 --> 00:33:11,139
does virus scanning so I listen on an s3

738
00:33:07,629 --> 00:33:13,899
bucket and if anyone uploads any file I

739
00:33:11,139 --> 00:33:16,299
will try to scan this file for viruses

740
00:33:13,899 --> 00:33:19,090
on malware okay so the way this service

741
00:33:16,299 --> 00:33:21,070
would be written is that it would listen

742
00:33:19,090 --> 00:33:23,470
for an event from s3 bucket and anytime

743
00:33:21,070 --> 00:33:26,110
someone uploads a file on the bucket

744
00:33:23,470 --> 00:33:27,549
Amazon itself will trigger the event for

745
00:33:26,110 --> 00:33:30,070
my lambda function telling my Lander

746
00:33:27,549 --> 00:33:32,830
function and a file was uploaded in s3

747
00:33:30,070 --> 00:33:34,928
so who's actually invoking my service

748
00:33:32,830 --> 00:33:37,389
function it's Amazon itself using the

749
00:33:34,929 --> 00:33:39,970
event so this is not the regular model

750
00:33:37,389 --> 00:33:43,269
in regular applications where I know for

751
00:33:39,970 --> 00:33:45,309
sure the flow of functions and how each

752
00:33:43,269 --> 00:33:48,070
function calls the other that's why can

753
00:33:45,309 --> 00:33:49,779
these gaps and the assumption of how the

754
00:33:48,070 --> 00:33:53,200
functions could be called we can have

755
00:33:49,779 --> 00:33:55,090
these type of attacks inside lambda

756
00:33:53,200 --> 00:33:57,050
functions inside lambda functions

757
00:33:55,090 --> 00:33:59,480
because you don't have a server that you

758
00:33:57,050 --> 00:34:01,040
anymore some attacks some regular

759
00:33:59,480 --> 00:34:02,780
attacks don't work as well so for

760
00:34:01,040 --> 00:34:04,700
example if you upload a file we have a

761
00:34:02,780 --> 00:34:07,820
file upload variability it would not

762
00:34:04,700 --> 00:34:09,500
work inside lambda why because the file

763
00:34:07,820 --> 00:34:12,860
system inside lambda is mounted as

764
00:34:09,500 --> 00:34:15,590
read-only except for temp and because

765
00:34:12,860 --> 00:34:17,899
the instance itself is short-lived it is

766
00:34:15,590 --> 00:34:19,909
started by Amazon for a few milliseconds

767
00:34:17,899 --> 00:34:21,469
to return the code and then it will be

768
00:34:19,909 --> 00:34:23,899
destroyed so whatever file you uploaded

769
00:34:21,469 --> 00:34:25,520
will be gone in a few milliseconds the

770
00:34:23,899 --> 00:34:27,168
same applies to any reversal that you

771
00:34:25,520 --> 00:34:29,418
have it's not going to be persistent

772
00:34:27,168 --> 00:34:32,120
there is no metadata service inside

773
00:34:29,418 --> 00:34:34,429
lambda and fortunately for attackers of

774
00:34:32,120 --> 00:34:36,859
course no local files are usually

775
00:34:34,429 --> 00:34:39,350
sensitive inside lambda so how can i

776
00:34:36,860 --> 00:34:41,300
attack lambda functions I can try to

777
00:34:39,350 --> 00:34:44,179
dump the environmental variables inside

778
00:34:41,300 --> 00:34:47,870
lambda to access to gain access keys so

779
00:34:44,179 --> 00:34:49,310
lambdas access key and secrets are

780
00:34:47,870 --> 00:34:50,929
stored inside its own environmental

781
00:34:49,310 --> 00:34:53,509
variable instead of the metadata

782
00:34:50,929 --> 00:34:55,580
metadata service like in ec2 instances I

783
00:34:53,510 --> 00:34:58,370
can use lambda to actually for example

784
00:34:55,580 --> 00:35:01,670
backdoor it I can download the source

785
00:34:58,370 --> 00:35:03,859
code study it see if it and think let's

786
00:35:01,670 --> 00:35:05,510
say sensitive inside and then I can even

787
00:35:03,860 --> 00:35:07,510
upload my own source code to the lambda

788
00:35:05,510 --> 00:35:10,310
function I can just backdoor it add

789
00:35:07,510 --> 00:35:12,740
whatever line that for example sends the

790
00:35:10,310 --> 00:35:15,770
credentials to my server and then I can

791
00:35:12,740 --> 00:35:17,419
upload that and backdoor the function so

792
00:35:15,770 --> 00:35:19,910
these are the sorts of events that could

793
00:35:17,420 --> 00:35:24,290
come to lambda functions a VI gateway

794
00:35:19,910 --> 00:35:27,740
calls a three files database events for

795
00:35:24,290 --> 00:35:30,259
example that's remember the example I

796
00:35:27,740 --> 00:35:32,629
told about the lambda function for virus

797
00:35:30,260 --> 00:35:34,550
scanning suppose that it does this it

798
00:35:32,630 --> 00:35:37,070
calls our system in Python and then it

799
00:35:34,550 --> 00:35:37,520
takes the bucket that it received and

800
00:35:37,070 --> 00:35:39,650
then it

801
00:35:37,520 --> 00:35:41,420
for example copies it to another facet

802
00:35:39,650 --> 00:35:43,760
or another bucket for the virus scanning

803
00:35:41,420 --> 00:35:46,100
so of course what we have here is a

804
00:35:43,760 --> 00:35:48,140
regular OS command injection attack so

805
00:35:46,100 --> 00:35:51,049
I'm going to show a demo now it's called

806
00:35:48,140 --> 00:35:51,890
a wasp dam variable serverless

807
00:35:51,050 --> 00:35:54,250
application

808
00:35:51,890 --> 00:35:58,069
it's a project contributor to a wasp by

809
00:35:54,250 --> 00:36:00,580
company called party girl apps I'm going

810
00:35:58,070 --> 00:36:04,490
to show because I already installed it

811
00:36:00,580 --> 00:36:08,060
basically it's a it's a webshop

812
00:36:04,490 --> 00:36:10,939
for games you can just buy any game that

813
00:36:08,060 --> 00:36:12,589
you want and if you buy the game

814
00:36:10,940 --> 00:36:14,810
go to the process of buying it I'm not

815
00:36:12,589 --> 00:36:19,009
going to show that you're going to

816
00:36:14,810 --> 00:36:20,630
receive a message from the application

817
00:36:19,010 --> 00:36:22,940
itself telling you that we have

818
00:36:20,630 --> 00:36:25,819
processed your order and then we can

819
00:36:22,940 --> 00:36:26,960
just delete download your receipt from

820
00:36:25,819 --> 00:36:29,779
here okay

821
00:36:26,960 --> 00:36:32,420
of course this I made this a long time

822
00:36:29,780 --> 00:36:34,609
ago so the link has expired

823
00:36:32,420 --> 00:36:37,400
I can do it again but I think we're

824
00:36:34,609 --> 00:36:45,650
running out of time however let's check

825
00:36:37,400 --> 00:36:50,780
what kind of link that we have here it's

826
00:36:45,650 --> 00:36:54,650
a a bucket inside Amazon that uploads my

827
00:36:50,780 --> 00:36:57,619
receipt to a certain directory so what

828
00:36:54,650 --> 00:37:00,140
it does is that this application takes

829
00:36:57,619 --> 00:37:02,060
my order and then creates a receipt on a

830
00:37:00,140 --> 00:37:07,368
bucket and then allows me to do to

831
00:37:02,060 --> 00:37:08,690
upload my receipt so what if I try to of

832
00:37:07,369 --> 00:37:10,700
course this is a process if you want to

833
00:37:08,690 --> 00:37:12,770
test yourself I'm going to upload the

834
00:37:10,700 --> 00:37:15,770
slides you can just try it yourself like

835
00:37:12,770 --> 00:37:20,480
this so if I access this file directly

836
00:37:15,770 --> 00:37:22,759
it's actually downloadable and now I can

837
00:37:20,480 --> 00:37:24,589
audit the parameters of that as three

838
00:37:22,760 --> 00:37:26,569
buckets this one for example allows

839
00:37:24,589 --> 00:37:28,849
anyone to upload allows any a develops

840
00:37:26,569 --> 00:37:31,819
account to upload so for example I can

841
00:37:28,849 --> 00:37:41,079
just copy this command I'm going to

842
00:37:31,819 --> 00:37:41,079
create a file empty file okay

843
00:37:48,480 --> 00:38:07,240
so echo okay now let's see if we are

844
00:37:59,950 --> 00:38:09,520
connected to my ideal s account okay so

845
00:38:07,240 --> 00:38:11,919
now I'm just going to copy this command

846
00:38:09,520 --> 00:38:15,220
what it does is that it will upload this

847
00:38:11,920 --> 00:38:17,140
file to this bucket now it says it

848
00:38:15,220 --> 00:38:19,859
applauded the file so I'm going to

849
00:38:17,140 --> 00:38:19,859
access this file

850
00:38:31,520 --> 00:38:41,810
what was the file name so now I can

851
00:38:39,320 --> 00:38:44,990
access the file it is public because I

852
00:38:41,810 --> 00:38:47,210
was able to this the the first available

853
00:38:44,990 --> 00:38:48,830
T in this application is that it it has

854
00:38:47,210 --> 00:38:52,790
an s3 bucket that allows anyone to

855
00:38:48,830 --> 00:38:53,810
upload to it so now we know that this if

856
00:38:52,790 --> 00:38:55,520
you check the source code of this

857
00:38:53,810 --> 00:38:57,320
application you'll see that one of the

858
00:38:55,520 --> 00:39:00,230
functions actually handles uploads from

859
00:38:57,320 --> 00:39:06,110
inside s3 so if you check the code here

860
00:39:00,230 --> 00:39:10,790
that says bucket do you see the mouse

861
00:39:06,110 --> 00:39:13,340
cursor you don't see the mouse cursor

862
00:39:10,790 --> 00:39:15,680
okay so let's do it the old way okay

863
00:39:13,340 --> 00:39:19,160
like this now you can see the cursor

864
00:39:15,680 --> 00:39:21,859
right okay so it listens for events from

865
00:39:19,160 --> 00:39:24,830
Nestor e bucket and then it to try to

866
00:39:21,860 --> 00:39:26,990
take the the file name itself the key

867
00:39:24,830 --> 00:39:28,790
which is called where the key inside s3

868
00:39:26,990 --> 00:39:31,069
means the file name it will do some

869
00:39:28,790 --> 00:39:33,230
operations on it it expects the file to

870
00:39:31,070 --> 00:39:36,650
have an underscore and it expects the

871
00:39:33,230 --> 00:39:38,690
file to end in dot Rho extension so then

872
00:39:36,650 --> 00:39:41,810
it will take this file or the final name

873
00:39:38,690 --> 00:39:44,240
event will do echo date and then it will

874
00:39:41,810 --> 00:39:46,580
echo for me the actual file name so what

875
00:39:44,240 --> 00:39:48,830
it says that it will send out to the

876
00:39:46,580 --> 00:39:51,319
output of the system that this file name

877
00:39:48,830 --> 00:39:53,180
was downloaded and that time of course

878
00:39:51,320 --> 00:39:55,490
if you check this this is a regular

879
00:39:53,180 --> 00:39:58,160
command injection attack but the file

880
00:39:55,490 --> 00:40:00,560
name is being taken from inside s3 so

881
00:39:58,160 --> 00:40:02,120
someone could say you know what it's

882
00:40:00,560 --> 00:40:04,549
okay it's an event coming from sign

883
00:40:02,120 --> 00:40:07,310
inside Amazon so what could go wrong

884
00:40:04,550 --> 00:40:10,370
right the thing is s3 can accept any

885
00:40:07,310 --> 00:40:12,799
type of name so any type of file name

886
00:40:10,370 --> 00:40:15,500
even if it contains commands inside the

887
00:40:12,800 --> 00:40:17,780
family material it will be acceptable of

888
00:40:15,500 --> 00:40:19,970
course I will try an attack now I set up

889
00:40:17,780 --> 00:40:22,100
the my listening environment using an

890
00:40:19,970 --> 00:40:24,410
egg rock what I'm going to do is that

891
00:40:22,100 --> 00:40:27,890
I'm going to run this command so what

892
00:40:24,410 --> 00:40:30,399
this command does is that I'm going to

893
00:40:27,890 --> 00:40:34,009
upload the empty file to my bucket and

894
00:40:30,400 --> 00:40:37,340
then I'm going to inside the file name

895
00:40:34,010 --> 00:40:39,910
I'm going to give it a command curl to

896
00:40:37,340 --> 00:40:43,220
post the result of the whole my command

897
00:40:39,910 --> 00:40:44,930
to which address to my listening address

898
00:40:43,220 --> 00:40:47,450
I sat in a garage

899
00:40:44,930 --> 00:40:48,560
listener and then I'm going to boot dr.

900
00:40:47,450 --> 00:40:50,359
o in the end so that the function

901
00:40:48,560 --> 00:40:53,900
triggers and then I'm going to upload

902
00:40:50,360 --> 00:40:56,030
this file if this happens and they go

903
00:40:53,900 --> 00:40:58,430
back to this command here it will take

904
00:40:56,030 --> 00:41:00,530
the file name right which is whatever

905
00:40:58,430 --> 00:41:02,720
and then semicolon curl and then to run

906
00:41:00,530 --> 00:41:06,920
the command and send whatever is the

907
00:41:02,720 --> 00:41:12,069
results here so now I have my neck Rock

908
00:41:06,920 --> 00:41:16,400
listener waiting and then I'm going to

909
00:41:12,070 --> 00:41:20,690
open the leg lock web interface waiting

910
00:41:16,400 --> 00:41:26,300
for requests now I'm going to copy the

911
00:41:20,690 --> 00:41:29,900
command I already have it prepared now

912
00:41:26,300 --> 00:41:33,830
let's try to do it again it says

913
00:41:29,900 --> 00:41:38,090
uploaded let's see okay so now we have

914
00:41:33,830 --> 00:41:43,009
something in Negril we have a request if

915
00:41:38,090 --> 00:41:45,230
you see their post data it's what its

916
00:41:43,010 --> 00:41:48,460
leaves the name of the of the function

917
00:41:45,230 --> 00:41:53,240
only one club thank you very much

918
00:41:48,460 --> 00:41:55,760
unbelievable so let's try something else

919
00:41:53,240 --> 00:41:59,379
let's try for example this command see

920
00:41:55,760 --> 00:41:59,380
if we can get something else going on

921
00:41:59,650 --> 00:42:04,580
let's try a command that requires multi

922
00:42:02,900 --> 00:42:08,510
lines okay that's why you would put

923
00:42:04,580 --> 00:42:13,160
actually in inside the post request for

924
00:42:08,510 --> 00:42:15,590
curl so we have a request now you name

925
00:42:13,160 --> 00:42:17,960
that the command results and then the

926
00:42:15,590 --> 00:42:20,780
listing directory so what really

927
00:42:17,960 --> 00:42:23,540
happened here is that the attack came

928
00:42:20,780 --> 00:42:25,850
not from outside but actually from

929
00:42:23,540 --> 00:42:28,460
inside Amazon's own infrastructure so it

930
00:42:25,850 --> 00:42:31,100
was an event sent by Amazon that's what

931
00:42:28,460 --> 00:42:33,230
we call event injection we injected our

932
00:42:31,100 --> 00:42:36,110
attack inside the event that would be

933
00:42:33,230 --> 00:42:37,850
sent from Amazon to the lambda function

934
00:42:36,110 --> 00:42:39,470
listening for us and then we utilize

935
00:42:37,850 --> 00:42:41,680
their variability inside lambda itself

936
00:42:39,470 --> 00:42:45,790
for the code to actually run our own

937
00:42:41,680 --> 00:42:48,370
command so that's basically how it works

938
00:42:45,790 --> 00:42:52,690
thank you very much

939
00:42:48,370 --> 00:42:54,580
thank you very much now why don't we try

940
00:42:52,690 --> 00:42:56,440
something that's more useful for us as

941
00:42:54,580 --> 00:43:00,490
attackers let's try the command called

942
00:42:56,440 --> 00:43:04,080
and which Brantly environmental

943
00:43:00,490 --> 00:43:07,089
variables right now let's see if we have

944
00:43:04,080 --> 00:43:11,020
okay so that these are the environmental

945
00:43:07,090 --> 00:43:16,570
variables you can see the tokens and the

946
00:43:11,020 --> 00:43:19,450
keys where is the key secret okay so

947
00:43:16,570 --> 00:43:21,910
that the idealized secret key so that's

948
00:43:19,450 --> 00:43:24,549
the same as the metadata attack in DC

949
00:43:21,910 --> 00:43:27,460
two servers inside lambda it's in the

950
00:43:24,550 --> 00:43:29,950
environmental variable if you want to

951
00:43:27,460 --> 00:43:31,330
try this tool after we're done make sure

952
00:43:29,950 --> 00:43:32,740
you delete the bucket and then you

953
00:43:31,330 --> 00:43:35,440
delete the stack from a side cloud

954
00:43:32,740 --> 00:43:37,419
formation feature inside Amazon so that

955
00:43:35,440 --> 00:43:40,630
you don't leave your environment

956
00:43:37,420 --> 00:43:42,040
vulnerable for long so as we said the

957
00:43:40,630 --> 00:43:45,880
parameter variables contain all the

958
00:43:42,040 --> 00:43:47,440
interesting stuff you can use lambda

959
00:43:45,880 --> 00:43:49,840
function as a sort of an automated

960
00:43:47,440 --> 00:43:51,940
backdoor so we can create a lambda

961
00:43:49,840 --> 00:43:54,790
function that listens for example for

962
00:43:51,940 --> 00:43:56,950
any addition any user being added to

963
00:43:54,790 --> 00:43:59,170
this account and then if they get added

964
00:43:56,950 --> 00:44:00,490
you steal their code their access key

965
00:43:59,170 --> 00:44:02,530
and access token and then you send it

966
00:44:00,490 --> 00:44:05,140
outside or for example listen for any

967
00:44:02,530 --> 00:44:07,270
new instance that kid gets created so

968
00:44:05,140 --> 00:44:08,920
lambda can also be used as a backdoor

969
00:44:07,270 --> 00:44:10,360
mechanism or eheh what are you listening

970
00:44:08,920 --> 00:44:12,370
for interesting event that happened and

971
00:44:10,360 --> 00:44:16,230
the victim idealised account and then

972
00:44:12,370 --> 00:44:19,569
you act upon it now let's talk about the

973
00:44:16,230 --> 00:44:24,640
permissions servers inside Amazon the I

974
00:44:19,570 --> 00:44:28,080
M Identity and Access Management Service

975
00:44:24,640 --> 00:44:31,029
inside Amazon access right I think so so

976
00:44:28,080 --> 00:44:32,799
this manages for you they were all the

977
00:44:31,030 --> 00:44:35,080
users there all the groups the API

978
00:44:32,800 --> 00:44:37,390
access keys permissions and trust

979
00:44:35,080 --> 00:44:40,360
relationships so we're going to see how

980
00:44:37,390 --> 00:44:42,160
that works especially of course we've

981
00:44:40,360 --> 00:44:43,750
seen the API access keys we've talked

982
00:44:42,160 --> 00:44:45,759
about this one a lot let's talk more

983
00:44:43,750 --> 00:44:47,980
about trust relationships a trust

984
00:44:45,760 --> 00:44:50,200
relationship inside Amazon allows you to

985
00:44:47,980 --> 00:44:53,290
give temporary access for other entities

986
00:44:50,200 --> 00:44:55,480
to your own role for example suppose I

987
00:44:53,290 --> 00:44:58,570
have an instance and in situ instance

988
00:44:55,480 --> 00:45:00,640
and I want it to be able to upload files

989
00:44:58,570 --> 00:45:02,270
to my s3 buckets so I create a a role

990
00:45:00,640 --> 00:45:04,279
called upload files to s3

991
00:45:02,270 --> 00:45:06,470
and then I attach the scroll to this

992
00:45:04,280 --> 00:45:09,650
instance now this instance when it runs

993
00:45:06,470 --> 00:45:11,390
it can use this rolls permission to

994
00:45:09,650 --> 00:45:14,930
upload files to my ass three bucket

995
00:45:11,390 --> 00:45:18,500
because this allows this this allows me

996
00:45:14,930 --> 00:45:20,029
to actually create an environment where

997
00:45:18,500 --> 00:45:21,890
I don't have to use hard-coded keys

998
00:45:20,030 --> 00:45:24,410
because Amazon will store these kids

999
00:45:21,890 --> 00:45:26,660
forming inside the instance metadata now

1000
00:45:24,410 --> 00:45:28,670
when you attach this role to this ec2

1001
00:45:26,660 --> 00:45:30,740
instance you're creating a trust

1002
00:45:28,670 --> 00:45:33,410
relationship you're saying that this

1003
00:45:30,740 --> 00:45:36,799
instance the ec2 instance can assume

1004
00:45:33,410 --> 00:45:40,009
this role and gain temporary credentials

1005
00:45:36,800 --> 00:45:44,410
for it to use it to call the Edible sf3

1006
00:45:40,010 --> 00:45:46,790
fbi's to upload files to it so this

1007
00:45:44,410 --> 00:45:49,520
feature the trust relationship features

1008
00:45:46,790 --> 00:45:52,610
is through an ABI called called STS

1009
00:45:49,520 --> 00:45:55,970
assume role of course it has lots of of

1010
00:45:52,610 --> 00:45:57,920
interesting let's say use cases it can

1011
00:45:55,970 --> 00:45:59,870
allow you to actually use it across

1012
00:45:57,920 --> 00:46:01,520
accounts so suppose I have an ad an

1013
00:45:59,870 --> 00:46:03,650
Amazon account for my environment and

1014
00:46:01,520 --> 00:46:06,290
someone else's account can't call this

1015
00:46:03,650 --> 00:46:08,840
function if I allow them to an example

1016
00:46:06,290 --> 00:46:10,220
if I have an environment that is for

1017
00:46:08,840 --> 00:46:12,460
production and environment for

1018
00:46:10,220 --> 00:46:14,450
developers and they want developers to

1019
00:46:12,460 --> 00:46:16,940
temporarily be able to for example

1020
00:46:14,450 --> 00:46:18,140
deploying functions or deploying

1021
00:46:16,940 --> 00:46:21,560
resources on the production environment

1022
00:46:18,140 --> 00:46:23,660
so I can use this STS assume role policy

1023
00:46:21,560 --> 00:46:26,600
document this is an example okay suppose

1024
00:46:23,660 --> 00:46:28,310
we have a dev account with this ID and

1025
00:46:26,600 --> 00:46:30,140
then we have a production account with

1026
00:46:28,310 --> 00:46:31,910
this ID okay and then we have Andrews

1027
00:46:30,140 --> 00:46:35,480
mature administrator role on the

1028
00:46:31,910 --> 00:46:38,060
production account so this is the Amazon

1029
00:46:35,480 --> 00:46:41,030
resource name for the role role of

1030
00:46:38,060 --> 00:46:42,890
administrator under the account of for

1031
00:46:41,030 --> 00:46:44,900
all force for the production account I

1032
00:46:42,890 --> 00:46:48,379
want to allow my developers in the dev

1033
00:46:44,900 --> 00:46:50,420
account to temporarily be able to use

1034
00:46:48,380 --> 00:46:54,230
this role to for example deploy servers

1035
00:46:50,420 --> 00:46:57,260
so I will say allow which principal this

1036
00:46:54,230 --> 00:46:59,930
principal the account all tools for the

1037
00:46:57,260 --> 00:47:01,940
dev account now it means that any any

1038
00:46:59,930 --> 00:47:04,520
user on that they've account can use

1039
00:47:01,940 --> 00:47:05,840
this call to temporarily get credentials

1040
00:47:04,520 --> 00:47:07,220
for the admin structure on the other

1041
00:47:05,840 --> 00:47:09,740
production account and then deploy

1042
00:47:07,220 --> 00:47:11,930
servers and then once we're done their

1043
00:47:09,740 --> 00:47:13,850
temporary credentials will be gone so if

1044
00:47:11,930 --> 00:47:15,330
I was an attacker I could do the

1045
00:47:13,850 --> 00:47:18,060
following I could add

1046
00:47:15,330 --> 00:47:20,610
own attacker Amazon a saccharide e and

1047
00:47:18,060 --> 00:47:22,710
then add it to the list of whoever's

1048
00:47:20,610 --> 00:47:24,510
allowed to call this role so now I will

1049
00:47:22,710 --> 00:47:28,170
be able to use the Amazons

1050
00:47:24,510 --> 00:47:32,340
I am update assume all policy to attach

1051
00:47:28,170 --> 00:47:33,450
and backdoor the role itself here so

1052
00:47:32,340 --> 00:47:35,600
this is really interesting because

1053
00:47:33,450 --> 00:47:37,470
that's not one of the things

1054
00:47:35,600 --> 00:47:40,080
administrators or defenders inside

1055
00:47:37,470 --> 00:47:42,029
Amazon really look for they tend to look

1056
00:47:40,080 --> 00:47:44,700
for the traditional stuff but this is

1057
00:47:42,030 --> 00:47:47,340
any less specific stuff so you should

1058
00:47:44,700 --> 00:47:48,930
always add these roles and their policy

1059
00:47:47,340 --> 00:47:50,910
documents to your integrity checks to

1060
00:47:48,930 --> 00:47:53,190
check if someone has played with it and

1061
00:47:50,910 --> 00:47:55,080
you know added their own account ID so

1062
00:47:53,190 --> 00:47:57,330
that's one way of how we can backdoor an

1063
00:47:55,080 --> 00:47:59,670
edible eyes account and I've seen it

1064
00:47:57,330 --> 00:48:01,560
happen with you know administrators

1065
00:47:59,670 --> 00:48:03,810
being fired without having the access

1066
00:48:01,560 --> 00:48:06,350
remote for them so they do this quick

1067
00:48:03,810 --> 00:48:09,330
backdoor stuff to be able to hurt the

1068
00:48:06,350 --> 00:48:11,640
organization that fired them one of the

1069
00:48:09,330 --> 00:48:13,680
best ad blast attack tools to actually

1070
00:48:11,640 --> 00:48:16,859
do this exploitation and post

1071
00:48:13,680 --> 00:48:20,310
exploitation attacks is called Paco it's

1072
00:48:16,860 --> 00:48:22,080
made by Rhino security labs it can do

1073
00:48:20,310 --> 00:48:25,110
some of the attacks we discussed for

1074
00:48:22,080 --> 00:48:25,799
example backdoor assume role to add your

1075
00:48:25,110 --> 00:48:28,860
own

1076
00:48:25,800 --> 00:48:32,550
for example account ID to the terminal

1077
00:48:28,860 --> 00:48:34,800
policy it can also use create a model

1078
00:48:32,550 --> 00:48:36,840
called lambda back your new users what

1079
00:48:34,800 --> 00:48:39,590
this model does is that it will create a

1080
00:48:36,840 --> 00:48:42,720
lambda function anytime any user gets

1081
00:48:39,590 --> 00:48:44,400
added to this account it will backdoor

1082
00:48:42,720 --> 00:48:46,379
that user create an access key and

1083
00:48:44,400 --> 00:48:48,510
secret key and then steal that to a

1084
00:48:46,380 --> 00:48:50,700
server off site for you so it's

1085
00:48:48,510 --> 00:48:52,470
currently the most feature complete open

1086
00:48:50,700 --> 00:48:55,770
source as well as attack tool in the

1087
00:48:52,470 --> 00:48:57,330
market before I finish these are the

1088
00:48:55,770 --> 00:48:59,520
resources again if you are more

1089
00:48:57,330 --> 00:49:01,590
interested in edible s then we started

1090
00:48:59,520 --> 00:49:04,140
with maybe now we want to take you know

1091
00:49:01,590 --> 00:49:10,740
picture of the of these really cool

1092
00:49:04,140 --> 00:49:13,319
books and if you if you done and then

1093
00:49:10,740 --> 00:49:14,990
I'm also done so thank you very much for

1094
00:49:13,320 --> 00:49:17,360
your attention

1095
00:49:14,990 --> 00:49:19,370
any questions

1096
00:49:17,360 --> 00:49:23,870
I'd be happy to answer thank you very

1097
00:49:19,370 --> 00:49:25,940
much Thank You Mohammad these are all

1098
00:49:23,870 --> 00:49:29,210
very nicest features right mm-hmm

1099
00:49:25,940 --> 00:49:31,430
thank you what do you think is that like

1100
00:49:29,210 --> 00:49:34,190
the biggest misunderstanding when people

1101
00:49:31,430 --> 00:49:36,440
start talking about security in AWS they

1102
00:49:34,190 --> 00:49:38,660
don't treat amazon's documentation they

1103
00:49:36,440 --> 00:49:41,090
think it's just another server in the

1104
00:49:38,660 --> 00:49:42,920
cloud it is but you have lots of

1105
00:49:41,090 --> 00:49:46,190
documentation and features inside Amazon

1106
00:49:42,920 --> 00:49:47,870
that's integrate with these servers and

1107
00:49:46,190 --> 00:49:50,000
databases inside Amazon so if you don't

1108
00:49:47,870 --> 00:49:51,440
really follow up and understand the

1109
00:49:50,000 --> 00:49:54,260
environment you're running on you're

1110
00:49:51,440 --> 00:49:57,200
about to have problems all right but

1111
00:49:54,260 --> 00:49:58,730
it's like a pet peeve like the even the

1112
00:49:57,200 --> 00:50:00,589
people that have read the manual always

1113
00:49:58,730 --> 00:50:04,580
misunderstand this part it's something

1114
00:50:00,590 --> 00:50:05,600
like that yeah you can say yeah yeah all

1115
00:50:04,580 --> 00:50:07,970
right do you have questions from the

1116
00:50:05,600 --> 00:50:09,770
audience as well have ten minutes before

1117
00:50:07,970 --> 00:50:14,720
it there's one question there and back

1118
00:50:09,770 --> 00:50:18,610
to the mic runner that can get there is

1119
00:50:14,720 --> 00:50:18,609
there a mic run around this side oh I

1120
00:50:19,150 --> 00:50:24,560
think we need four mic runners in here

1121
00:50:21,740 --> 00:50:26,930
it's so big thank you for a great talk

1122
00:50:24,560 --> 00:50:29,480
so do you have any quick comments how to

1123
00:50:26,930 --> 00:50:31,490
find and mitigate these vulnerabilities

1124
00:50:29,480 --> 00:50:36,260
first of all where are you I don't see

1125
00:50:31,490 --> 00:50:38,509
you okay well okay yeah so that question

1126
00:50:36,260 --> 00:50:40,070
again please they have any quick

1127
00:50:38,510 --> 00:50:41,630
comments on how to mitigate these Myr

1128
00:50:40,070 --> 00:50:44,720
abilities I mean you said there were

1129
00:50:41,630 --> 00:50:48,500
features in the Amazon Cloud but the

1130
00:50:44,720 --> 00:50:50,930
only great way to find these real quick

1131
00:50:48,500 --> 00:50:53,750
okay so if you notice everything we

1132
00:50:50,930 --> 00:50:56,450
discussed so far resulted one way or

1133
00:50:53,750 --> 00:50:57,500
another of one of two things either we

1134
00:50:56,450 --> 00:50:59,870
have an application about

1135
00:50:57,500 --> 00:51:01,430
vulnerabilities and abilities in your

1136
00:50:59,870 --> 00:51:03,259
own servers and your own application

1137
00:51:01,430 --> 00:51:05,750
that resulted in exposure for your own

1138
00:51:03,260 --> 00:51:07,400
exposure of your own Amazon API keys

1139
00:51:05,750 --> 00:51:09,920
right and then the second half of the

1140
00:51:07,400 --> 00:51:11,960
variability was that those keys usually

1141
00:51:09,920 --> 00:51:15,620
had much more privileges than they

1142
00:51:11,960 --> 00:51:17,120
needed right so if you really give good

1143
00:51:15,620 --> 00:51:20,240
attention to your application security

1144
00:51:17,120 --> 00:51:22,460
plus understand really how Amazon's

1145
00:51:20,240 --> 00:51:25,040
permission system works you can really

1146
00:51:22,460 --> 00:51:26,630
reduce and sometimes even prevent any

1147
00:51:25,040 --> 00:51:28,000
post exploitation attacks from being

1148
00:51:26,630 --> 00:51:30,310
meaningful on

1149
00:51:28,000 --> 00:51:32,740
your own Amazon environment and that's

1150
00:51:30,310 --> 00:51:37,049
easier said than done because Amazon has

1151
00:51:32,740 --> 00:51:40,419
I think almost 6,000 permission types

1152
00:51:37,050 --> 00:51:43,180
half of them don't allow customization

1153
00:51:40,420 --> 00:51:45,880
so it has to be star like everything so

1154
00:51:43,180 --> 00:51:48,040
there is still lots of things to do on

1155
00:51:45,880 --> 00:51:51,370
terms of security and permissions even

1156
00:51:48,040 --> 00:51:53,080
from Amazon's site so it's not it's a

1157
00:51:51,370 --> 00:51:54,549
it's a really difficult problem to

1158
00:51:53,080 --> 00:51:56,350
actually tackle I'm not going to say

1159
00:51:54,550 --> 00:51:58,300
it's easy I'm not going to say just do

1160
00:51:56,350 --> 00:52:04,960
that no it's actually a really difficult

1161
00:51:58,300 --> 00:52:08,380
problem I hope that answered you thank

1162
00:52:04,960 --> 00:52:10,900
you right the question where I am

1163
00:52:08,380 --> 00:52:12,880
curious as to what is Amazon's take on

1164
00:52:10,900 --> 00:52:14,580
this set of issues because they usually

1165
00:52:12,880 --> 00:52:17,410
say that they take security seriously

1166
00:52:14,580 --> 00:52:18,910
not you are aware of that yeah you know

1167
00:52:17,410 --> 00:52:20,980
when someone says they take security

1168
00:52:18,910 --> 00:52:23,140
seriously we don't tend to believe that

1169
00:52:20,980 --> 00:52:25,600
but the thing is I don't blame Amazon

1170
00:52:23,140 --> 00:52:27,549
it's a really huge infrastructure and

1171
00:52:25,600 --> 00:52:29,860
it's really difficult to make changes

1172
00:52:27,550 --> 00:52:31,210
within with f/a structure as it is

1173
00:52:29,860 --> 00:52:33,010
running I mean it's a live Astra

1174
00:52:31,210 --> 00:52:36,130
structure millions of customers they

1175
00:52:33,010 --> 00:52:37,720
just can't change everything on a whim

1176
00:52:36,130 --> 00:52:40,810
so it's really difficult even on there

1177
00:52:37,720 --> 00:52:42,069
but and I'm sure they are more

1178
00:52:40,810 --> 00:52:43,330
interested in securing their own

1179
00:52:42,070 --> 00:52:45,880
environments I'll give an example

1180
00:52:43,330 --> 00:52:48,009
remember the instance metadata we talked

1181
00:52:45,880 --> 00:52:50,710
about remember how easy it was to call

1182
00:52:48,010 --> 00:52:54,580
it we just give the SSL verbal to the

1183
00:52:50,710 --> 00:52:57,250
URL to call Google cloud for example in

1184
00:52:54,580 --> 00:53:00,460
comparison requests a special header to

1185
00:52:57,250 --> 00:53:03,520
be sent so you can't really add the

1186
00:53:00,460 --> 00:53:06,970
header when you use an SSL availability

1187
00:53:03,520 --> 00:53:08,620
so it kind of defeats the instance

1188
00:53:06,970 --> 00:53:10,540
metadata exposure inside Google cloud

1189
00:53:08,620 --> 00:53:14,049
because they request an internal header

1190
00:53:10,540 --> 00:53:16,570
to be set with the request so of course

1191
00:53:14,050 --> 00:53:18,610
you can still attack it in Google cloud

1192
00:53:16,570 --> 00:53:21,310
if you use if you have an orbital proxy

1193
00:53:18,610 --> 00:53:24,310
for example but it limits its greatly

1194
00:53:21,310 --> 00:53:25,779
limits the exposure of the instance

1195
00:53:24,310 --> 00:53:29,110
metadata inside Google cloud and I

1196
00:53:25,780 --> 00:53:30,910
really think Amazon is supposed to put

1197
00:53:29,110 --> 00:53:32,290
something like this such that you need

1198
00:53:30,910 --> 00:53:34,779
to add something extra

1199
00:53:32,290 --> 00:53:36,820
not just the URL itself to attack the

1200
00:53:34,780 --> 00:53:41,250
incest metadata so yes there's still

1201
00:53:36,820 --> 00:53:41,250
lots more to be done even on Amazon site

1202
00:53:41,320 --> 00:53:47,110
yes tighten up security once it's

1203
00:53:43,970 --> 00:53:47,109
deployed right yeah

1204
00:53:48,130 --> 00:53:54,470
microphone coming so how often do you

1205
00:53:52,610 --> 00:53:56,420
end up walking into something where

1206
00:53:54,470 --> 00:53:57,950
people have had training on this and

1207
00:53:56,420 --> 00:54:03,260
they still are absolutely freaking

1208
00:53:57,950 --> 00:54:05,750
clueless really all the time okay it's

1209
00:54:03,260 --> 00:54:07,730
miss its compass see when I told you

1210
00:54:05,750 --> 00:54:09,230
that amazon has six thousand permissions

1211
00:54:07,730 --> 00:54:11,120
and half of them don't require

1212
00:54:09,230 --> 00:54:13,280
customization they can only be what like

1213
00:54:11,120 --> 00:54:15,500
a wild card it's not an easy problem to

1214
00:54:13,280 --> 00:54:16,820
solve but if you know your

1215
00:54:15,500 --> 00:54:19,400
infrastructure well if you know your

1216
00:54:16,820 --> 00:54:21,650
environment well you can make it really

1217
00:54:19,400 --> 00:54:23,300
secure I've seen some organizations do

1218
00:54:21,650 --> 00:54:26,150
something else different entirely such

1219
00:54:23,300 --> 00:54:27,680
that the users don't have accounts on

1220
00:54:26,150 --> 00:54:30,860
the production environment at all so

1221
00:54:27,680 --> 00:54:32,690
they only leti often to get from another

1222
00:54:30,860 --> 00:54:35,120
account so this kind of you know

1223
00:54:32,690 --> 00:54:36,830
segregate into duties and makes the

1224
00:54:35,120 --> 00:54:38,480
problem a bit more difficult for the

1225
00:54:36,830 --> 00:54:47,390
attacker to actually reach out to

1226
00:54:38,480 --> 00:54:49,820
everything inside it more questions no

1227
00:54:47,390 --> 00:54:51,589
it's like this Thank You Mohammed thank

1228
00:54:49,820 --> 00:54:53,980
you you're my very much thank you for

1229
00:54:51,590 --> 00:54:53,980
your attention

