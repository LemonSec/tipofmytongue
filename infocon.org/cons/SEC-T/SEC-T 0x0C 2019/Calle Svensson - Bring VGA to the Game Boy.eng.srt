1
00:00:04,560 --> 00:00:10,980
hello everyone as I think I've been it's

2
00:00:08,010 --> 00:00:16,200
very clear now my name is Kayla and I

3
00:00:10,980 --> 00:00:19,759
did a presentation yesterday about some

4
00:00:16,200 --> 00:00:23,250
Gameboy stuff and this is kind of like a

5
00:00:19,760 --> 00:00:27,060
tangent from that the same project where

6
00:00:23,250 --> 00:00:32,480
we built a way of hooking up the Gameboy

7
00:00:27,060 --> 00:00:36,000
to external screens so quick I'm Callie

8
00:00:32,479 --> 00:00:38,819
studied at kth here in Stockholm work at

9
00:00:36,000 --> 00:00:40,769
the healthcare startup clean as a head

10
00:00:38,820 --> 00:00:43,440
of security play a lot of CTF

11
00:00:40,770 --> 00:00:45,270
competitions for our team hacking for

12
00:00:43,440 --> 00:00:50,160
sodium if you want to reach me

13
00:00:45,270 --> 00:00:54,059
afterwards use any of these methods with

14
00:00:50,160 --> 00:00:56,069
that let's get into it so as I said

15
00:00:54,059 --> 00:01:01,550
yesterday I talked a little bit about

16
00:00:56,070 --> 00:01:05,188
game we're hacking and I was supposed to

17
00:01:01,550 --> 00:01:07,950
be able to present these the slides that

18
00:01:05,188 --> 00:01:11,039
I had made which were those slides were

19
00:01:07,950 --> 00:01:13,440
not in any typical slide format like a

20
00:01:11,040 --> 00:01:16,080
PowerPoint presentation or a PDF file

21
00:01:13,440 --> 00:01:18,899
but they were an actual Gameboy ROM that

22
00:01:16,080 --> 00:01:21,990
I was running from a gameboy emulator my

23
00:01:18,900 --> 00:01:24,210
computer that was the backup solution

24
00:01:21,990 --> 00:01:27,060
because what we have done was that we

25
00:01:24,210 --> 00:01:29,009
had built a way of hooking up the

26
00:01:27,060 --> 00:01:33,000
Gameboy to the system here unfortunately

27
00:01:29,010 --> 00:01:34,799
there were some technical issues but it

28
00:01:33,000 --> 00:01:37,080
does work and I'm going to explain a

29
00:01:34,799 --> 00:01:41,549
little bit about the process around it

30
00:01:37,080 --> 00:01:43,740
how we built it how it works and the

31
00:01:41,549 --> 00:01:47,070
kind of main takeaway here is maybe not

32
00:01:43,740 --> 00:01:49,259
like the the thing we built but more

33
00:01:47,070 --> 00:01:56,639
about like the process and how we did

34
00:01:49,259 --> 00:02:01,770
this so this started back in June when I

35
00:01:56,640 --> 00:02:04,350
was talking to secretary about doing a

36
00:02:01,770 --> 00:02:07,229
talk here and I started making some

37
00:02:04,350 --> 00:02:12,150
slides and some some drafts were for

38
00:02:07,229 --> 00:02:15,239
that and one of my teammates said that

39
00:02:12,150 --> 00:02:16,770
well since you're talking about a game

40
00:02:15,239 --> 00:02:19,550
of stuff you should make

41
00:02:16,770 --> 00:02:22,740
your slides a Gameboy game and of course

42
00:02:19,550 --> 00:02:24,720
once that idea has been brought forward

43
00:02:22,740 --> 00:02:29,340
there is there is no turning back

44
00:02:24,720 --> 00:02:31,470
you have to do that so fortunately there

45
00:02:29,340 --> 00:02:34,950
is like a big kind of like homebrew

46
00:02:31,470 --> 00:02:37,590
community around gameboy games so our

47
00:02:34,950 --> 00:02:40,679
people have developed a C library called

48
00:02:37,590 --> 00:02:43,820
the GB DK a gameboy development kit so

49
00:02:40,680 --> 00:02:48,960
you can write your gameboy games in NC

50
00:02:43,820 --> 00:02:52,500
and what I did was I basically wrote my

51
00:02:48,960 --> 00:02:54,360
slides in like a Djamel file and used

52
00:02:52,500 --> 00:02:56,250
some Python to convert this into C code

53
00:02:54,360 --> 00:02:59,250
and then compile this into a game where

54
00:02:56,250 --> 00:03:01,590
ROM and also some manual editing of

55
00:02:59,250 --> 00:03:06,510
these I had some images in the slides as

56
00:03:01,590 --> 00:03:08,850
well and then my teammate again said

57
00:03:06,510 --> 00:03:10,590
okay so you're doing doing a talk about

58
00:03:08,850 --> 00:03:13,500
game boys and you have your slides a

59
00:03:10,590 --> 00:03:15,870
gameboy ROM so what if you present them

60
00:03:13,500 --> 00:03:17,940
from an actual gameboy and again once

61
00:03:15,870 --> 00:03:22,740
this idea has been brought up there's no

62
00:03:17,940 --> 00:03:24,480
turning back so but we need to be able

63
00:03:22,740 --> 00:03:25,590
to kind of connect this to the projector

64
00:03:24,480 --> 00:03:29,940
because the gameboy screen is quite

65
00:03:25,590 --> 00:03:33,840
small and dark and unfortunately there

66
00:03:29,940 --> 00:03:43,010
is no external video connection on a

67
00:03:33,840 --> 00:03:47,220
gameboy sad so we started by just

68
00:03:43,010 --> 00:03:49,560
analyzing the trying to analyze the

69
00:03:47,220 --> 00:03:51,530
signal that is going from the like

70
00:03:49,560 --> 00:03:54,660
motherboard of the gameboy to the LCD

71
00:03:51,530 --> 00:03:58,650
screen so the first step was to just get

72
00:03:54,660 --> 00:04:00,270
the signal so we disassembled a gameboy

73
00:03:58,650 --> 00:04:02,730
and this is what a gameboy like

74
00:04:00,270 --> 00:04:06,960
motherboard looks like and this like

75
00:04:02,730 --> 00:04:10,649
connector at the end is where the LCD

76
00:04:06,960 --> 00:04:12,230
screen connector is connected so we

77
00:04:10,650 --> 00:04:14,250
built this kind of like breakout

78
00:04:12,230 --> 00:04:16,798
connector with the same type of

79
00:04:14,250 --> 00:04:19,709
connector as on the model board and then

80
00:04:16,798 --> 00:04:21,719
we hooked it up so that we took the

81
00:04:19,709 --> 00:04:24,719
cable from the motherboard to a

82
00:04:21,720 --> 00:04:27,810
breadboard and then back to the real LCD

83
00:04:24,720 --> 00:04:29,460
which is useful for debugging your work

84
00:04:27,810 --> 00:04:29,910
so this way we can access the signal and

85
00:04:29,460 --> 00:04:35,489
still

86
00:04:29,910 --> 00:04:39,210
have the LCD screen working so now it's

87
00:04:35,490 --> 00:04:43,110
time to record some traffic to figure

88
00:04:39,210 --> 00:04:46,409
out what's going on and so we just

89
00:04:43,110 --> 00:04:48,600
hooked up a logic analyzer to the the

90
00:04:46,410 --> 00:04:53,850
pins that we have brought out on the

91
00:04:48,600 --> 00:04:55,620
breadboard and there are two like the

92
00:04:53,850 --> 00:04:58,350
original game boy was released in like

93
00:04:55,620 --> 00:05:00,060
89 it's a pretty big clunky thing and

94
00:04:58,350 --> 00:05:02,850
then they released like a gameboy pocket

95
00:05:00,060 --> 00:05:03,960
in 94 which is architectural II pretty

96
00:05:02,850 --> 00:05:07,080
much the same but they have some

97
00:05:03,960 --> 00:05:08,849
different pin outs on the motherboard so

98
00:05:07,080 --> 00:05:11,190
there was like a lot of documentation on

99
00:05:08,850 --> 00:05:13,260
this original version but we have bought

100
00:05:11,190 --> 00:05:15,180
a whole bunch of Gameboy pockets so

101
00:05:13,260 --> 00:05:20,250
there was some like figuring out which

102
00:05:15,180 --> 00:05:23,190
pins was which one basically but in the

103
00:05:20,250 --> 00:05:26,240
end we hooked it up like this so it's a

104
00:05:23,190 --> 00:05:29,790
some probes from a logic analyzer

105
00:05:26,240 --> 00:05:35,490
connected to some of the pins here from

106
00:05:29,790 --> 00:05:38,280
there the breakout that we did and then

107
00:05:35,490 --> 00:05:42,150
we just capture some data while the game

108
00:05:38,280 --> 00:05:46,590
boy is running and we bring this into

109
00:05:42,150 --> 00:05:48,690
our logic analyzer software and we can

110
00:05:46,590 --> 00:05:54,979
start looking at the signal for the

111
00:05:48,690 --> 00:05:58,620
screen so the way the game boy the

112
00:05:54,980 --> 00:06:00,390
traffic to the between the game boy

113
00:05:58,620 --> 00:06:05,190
motherboard and the LCD screen works is

114
00:06:00,390 --> 00:06:08,159
that you have five signals well you have

115
00:06:05,190 --> 00:06:10,950
five your five signals and ground so

116
00:06:08,160 --> 00:06:14,580
there is the horizontal sync which will

117
00:06:10,950 --> 00:06:17,310
make like one tick every time you start

118
00:06:14,580 --> 00:06:19,680
rendering one line on the screen there's

119
00:06:17,310 --> 00:06:22,620
the vertical sync which will just send

120
00:06:19,680 --> 00:06:25,980
one bit just at the start of of each new

121
00:06:22,620 --> 00:06:28,320
frame the Gameboy screen has four colors

122
00:06:25,980 --> 00:06:31,020
so you need two bits to represent that

123
00:06:28,320 --> 00:06:34,500
so you have two data channels and then a

124
00:06:31,020 --> 00:06:37,099
pixel clock so for each cycle of the

125
00:06:34,500 --> 00:06:42,979
clock you get one pixel from the data

126
00:06:37,100 --> 00:06:42,979
channels and then is this is you have

127
00:06:43,169 --> 00:06:52,090
166 pixels in a scanline 144 scan lines

128
00:06:47,310 --> 00:06:55,210
wide and this runs at 60 frames per

129
00:06:52,090 --> 00:07:00,880
second so it's about 2.7 megabits per

130
00:06:55,210 --> 00:07:02,830
second of data that we have to parse so

131
00:07:00,880 --> 00:07:05,199
first did some just like offline capture

132
00:07:02,830 --> 00:07:07,030
we captured a chunk of data and just

133
00:07:05,199 --> 00:07:09,759
render like one frame to make sure that

134
00:07:07,030 --> 00:07:11,138
we were able to do that wrote some just

135
00:07:09,759 --> 00:07:15,490
some Python code to parse this and

136
00:07:11,139 --> 00:07:17,289
create an image and that works fine and

137
00:07:15,490 --> 00:07:20,560
then it was like the final step to

138
00:07:17,289 --> 00:07:22,300
actually build like a real-time renderer

139
00:07:20,560 --> 00:07:24,669
for this to be able to do this to like

140
00:07:22,300 --> 00:07:29,139
hook up the Gameboy and get a live video

141
00:07:24,669 --> 00:07:30,880
feed in real time so the first idea was

142
00:07:29,139 --> 00:07:32,979
like maybe we could just use the

143
00:07:30,880 --> 00:07:36,070
Raspberry Pi it has a fast processor we

144
00:07:32,979 --> 00:07:40,000
can use them if we just read fast enough

145
00:07:36,070 --> 00:07:41,919
from the i/o pins that might work first

146
00:07:40,000 --> 00:07:43,330
I just tried it in Python that is

147
00:07:41,919 --> 00:07:47,979
absolutely not worked there was nowhere

148
00:07:43,330 --> 00:07:48,849
near fast enough wrote some gold still

149
00:07:47,979 --> 00:07:51,280
not fast enough

150
00:07:48,849 --> 00:07:53,380
broke I was almost down at like hand

151
00:07:51,280 --> 00:07:55,090
hacking assembly and then I realized

152
00:07:53,380 --> 00:07:56,770
that this is not a limitation of like

153
00:07:55,090 --> 00:07:58,119
you know what programming language or

154
00:07:56,770 --> 00:07:59,979
system and you think this is a problem

155
00:07:58,120 --> 00:08:04,000
with the actual hardware of the

156
00:07:59,979 --> 00:08:06,580
Raspberry Pi so looked like this this we

157
00:08:04,000 --> 00:08:07,330
hooked up the signal from the LCD into

158
00:08:06,580 --> 00:08:10,479
the Raspberry Pi

159
00:08:07,330 --> 00:08:12,340
on the left so the next step was to use

160
00:08:10,479 --> 00:08:14,169
something which is like more of a

161
00:08:12,340 --> 00:08:17,969
real-time system that doesn't have an

162
00:08:14,169 --> 00:08:20,530
operating system off so I used an ESP 32

163
00:08:17,969 --> 00:08:23,949
wrote some C code for that to read the

164
00:08:20,530 --> 00:08:26,650
signals and process it and basically it

165
00:08:23,949 --> 00:08:29,620
was fast enough to read the signal to

166
00:08:26,650 --> 00:08:32,169
catch all the all the bits but we didn't

167
00:08:29,620 --> 00:08:33,789
have enough spare clock cycles to do

168
00:08:32,169 --> 00:08:36,370
anything with the data so there was no

169
00:08:33,789 --> 00:08:39,000
time to send the data off anywhere else

170
00:08:36,370 --> 00:08:41,078
so we could parse the data into the

171
00:08:39,000 --> 00:08:42,909
processor and then it was basically

172
00:08:41,078 --> 00:08:45,250
stuck there what we could have done is

173
00:08:42,909 --> 00:08:47,439
like ah decrease the frame rate and you

174
00:08:45,250 --> 00:08:50,200
only read like every second or every

175
00:08:47,440 --> 00:08:53,880
third frame or something ah but I mean

176
00:08:50,200 --> 00:08:57,030
we don't want to settle for any half

177
00:08:53,880 --> 00:08:58,950
stuff looked yeah very similar you can

178
00:08:57,030 --> 00:09:00,420
barely see that the ESP 32 is hidden

179
00:08:58,950 --> 00:09:01,850
behind some cables there at the end of

180
00:09:00,420 --> 00:09:06,630
the breadboard

181
00:09:01,850 --> 00:09:13,760
so finally we realize that let's do this

182
00:09:06,630 --> 00:09:15,689
on an FPGA so I went to one my teammates

183
00:09:13,760 --> 00:09:20,030
apartments and we had some hacking

184
00:09:15,690 --> 00:09:22,890
session and programmed FPGA so basically

185
00:09:20,030 --> 00:09:26,880
built our own like custom chip so if

186
00:09:22,890 --> 00:09:30,890
we're for people who haven't don't know

187
00:09:26,880 --> 00:09:30,890
about it and I can FPGA is basically

188
00:09:31,550 --> 00:09:36,689
you can basically program your own chips

189
00:09:34,170 --> 00:09:42,750
with your own logic and stuff to build

190
00:09:36,690 --> 00:09:45,750
some real-time system and yeah

191
00:09:42,750 --> 00:09:47,730
eventually we got it got it working so

192
00:09:45,750 --> 00:09:49,560
basically we had like a three three

193
00:09:47,730 --> 00:09:52,200
parts to it first we have the module

194
00:09:49,560 --> 00:09:55,170
which decodes the LCD signal in the way

195
00:09:52,200 --> 00:09:57,120
I described it writes it into some RAM

196
00:09:55,170 --> 00:10:00,360
and then you have on the other end

197
00:09:57,120 --> 00:10:02,550
there's a vga encoder module that will

198
00:10:00,360 --> 00:10:05,730
read the image from ram and output the

199
00:10:02,550 --> 00:10:07,920
VGA signal so this is what it looked

200
00:10:05,730 --> 00:10:15,990
like when I was hooked up to my computer

201
00:10:07,920 --> 00:10:17,430
screen at home and yeah I don't think we

202
00:10:15,990 --> 00:10:19,910
have any time for any questions you can

203
00:10:17,430 --> 00:10:23,790
talk to me later if this interesting

204
00:10:19,910 --> 00:10:26,310
some shout outs watch our monthly

205
00:10:23,790 --> 00:10:28,800
hacking show on YouTube Pony racing and

206
00:10:26,310 --> 00:10:30,630
a big thanks to some my teammates Bob

207
00:10:28,800 --> 00:10:32,109
Lars and Gross's who helped out with

208
00:10:30,630 --> 00:10:35,639
this project thank you very much

209
00:10:32,110 --> 00:10:35,639
[Applause]

