1
00:00:01,120 --> 00:00:03,520
so i'll start presenting him so eel

2
00:00:03,520 --> 00:00:05,680
ronan is a faculty member at tel aviv

3
00:00:05,680 --> 00:00:08,000
university school of computer science

4
00:00:08,000 --> 00:00:09,679
he's interested in analyzing and

5
00:00:09,679 --> 00:00:12,320
designing real-world implementations of

6
00:00:12,320 --> 00:00:14,160
cryptographic and security protocols and

7
00:00:14,160 --> 00:00:16,800
primitive primitives both in software

8
00:00:16,800 --> 00:00:19,840
and in hardware

9
00:00:19,840 --> 00:00:21,920
i've done this

10
00:00:21,920 --> 00:00:23,279
along with matthew he was also a

11
00:00:23,279 --> 00:00:24,560
co-chair of walk three that's an

12
00:00:24,560 --> 00:00:27,919
important information we want to share

13
00:00:28,840 --> 00:00:31,199
exactly today he will tell us about how

14
00:00:31,199 --> 00:00:33,200
he owned the hardware bank key store in

15
00:00:33,200 --> 00:00:35,360
samsung's galaxy flagship phones

16
00:00:35,360 --> 00:00:37,280
presenting multiple flaws in the design

17
00:00:37,280 --> 00:00:40,079
flow of the trust zone enclave

18
00:00:40,079 --> 00:00:41,600
all right thank you for the kind

19
00:00:41,600 --> 00:00:44,800
introduction and thank you for uh

20
00:00:44,800 --> 00:00:47,600
pushing forward well five or now really

21
00:00:47,600 --> 00:00:49,520
looking forward for a walk six maybe

22
00:00:49,520 --> 00:00:50,960
once someone in the audience could be

23
00:00:50,960 --> 00:00:52,960
the current victim

24
00:00:52,960 --> 00:00:55,199
um okay so again this is a joint work

25
00:00:55,199 --> 00:00:56,960
together with um student alonzo

26
00:00:56,960 --> 00:00:59,520
checkowsky and avisha wool from tel aviv

27
00:00:59,520 --> 00:01:01,199
university

28
00:01:01,199 --> 00:01:03,440
okay

29
00:01:04,239 --> 00:01:08,119
this doesn't seem to work

30
00:01:12,000 --> 00:01:14,400
yes computers are difficult

31
00:01:14,400 --> 00:01:16,560
okay so and this is what i'm going to

32
00:01:16,560 --> 00:01:19,360
talk about and small background how do

33
00:01:19,360 --> 00:01:21,439
we cover hubble protected keys which i

34
00:01:21,439 --> 00:01:24,400
will explain what they are how we break

35
00:01:24,400 --> 00:01:26,960
protocols which is all cryptographic

36
00:01:26,960 --> 00:01:29,600
protocols which is what we like to do

37
00:01:29,600 --> 00:01:31,520
and some main takeaways from the

38
00:01:31,520 --> 00:01:33,600
research

39
00:01:33,600 --> 00:01:38,079
okay so um basically this is smartphone

40
00:01:38,079 --> 00:01:40,640
i'm sure that most of you have it i am

41
00:01:40,640 --> 00:01:43,360
currently using it for as a stopwatch to

42
00:01:43,360 --> 00:01:45,040
know how much time i have

43
00:01:45,040 --> 00:01:47,040
and so this is a very important task

44
00:01:47,040 --> 00:01:48,479
although it's not

45
00:01:48,479 --> 00:01:50,000
very critical

46
00:01:50,000 --> 00:01:52,159
however there are some tasks in our

47
00:01:52,159 --> 00:01:54,560
daily life that are maybe a bit more

48
00:01:54,560 --> 00:01:56,479
critical about security

49
00:01:56,479 --> 00:01:58,880
and

50
00:01:58,880 --> 00:02:00,799
more security aware in some sense that

51
00:02:00,799 --> 00:02:03,200
we do with our smartphones it could be

52
00:02:03,200 --> 00:02:04,640
um

53
00:02:04,640 --> 00:02:06,640
instant messaging that

54
00:02:06,640 --> 00:02:09,679
we consider very private it could be

55
00:02:09,679 --> 00:02:11,680
bank transactions or payment system that

56
00:02:11,680 --> 00:02:14,480
we use and it could also be a way to

57
00:02:14,480 --> 00:02:16,640
actually authenticate to other services

58
00:02:16,640 --> 00:02:20,160
which we think that are very important

59
00:02:20,160 --> 00:02:22,800
so we have this nice device that

60
00:02:22,800 --> 00:02:25,200
consumes a lot of our free time

61
00:02:25,200 --> 00:02:26,560
and

62
00:02:26,560 --> 00:02:29,360
and actually um this is a very

63
00:02:29,360 --> 00:02:31,360
sophisticated computer and when we have

64
00:02:31,360 --> 00:02:33,360
sophisticated computers we have

65
00:02:33,360 --> 00:02:35,280
sophisticated attackers

66
00:02:35,280 --> 00:02:36,640
now there's been

67
00:02:36,640 --> 00:02:38,400
a lot of work over the years and trying

68
00:02:38,400 --> 00:02:39,599
to make this

69
00:02:39,599 --> 00:02:41,840
systems more and more secure and i think

70
00:02:41,840 --> 00:02:44,640
in some sense we are improving and

71
00:02:44,640 --> 00:02:47,360
computers and smartphones are much more

72
00:02:47,360 --> 00:02:50,400
secure than they used to be however uh

73
00:02:50,400 --> 00:02:53,120
we have repeated reminders that

74
00:02:53,120 --> 00:02:54,080
um

75
00:02:54,080 --> 00:02:55,280
advance

76
00:02:55,280 --> 00:02:58,000
nation state actors and sometimes just

77
00:02:58,000 --> 00:02:59,360
companies like

78
00:02:59,360 --> 00:03:03,519
nso who unfortunately um took the

79
00:03:03,519 --> 00:03:04,560
latest

80
00:03:04,560 --> 00:03:06,400
pony award for best mobile attack from

81
00:03:06,400 --> 00:03:07,200
us

82
00:03:07,200 --> 00:03:08,560
and so

83
00:03:08,560 --> 00:03:09,360
they

84
00:03:09,360 --> 00:03:10,560
showed

85
00:03:10,560 --> 00:03:12,000
maybe

86
00:03:12,000 --> 00:03:14,000
more larger scale attacks on mobile

87
00:03:14,000 --> 00:03:15,760
devices where they simply showed that

88
00:03:15,760 --> 00:03:17,360
they can

89
00:03:17,360 --> 00:03:19,360
fully compromise the android system and

90
00:03:19,360 --> 00:03:21,440
some iphone systems for basically all of

91
00:03:21,440 --> 00:03:23,120
the devices that we

92
00:03:23,120 --> 00:03:24,400
currently use

93
00:03:24,400 --> 00:03:25,680
the question is

94
00:03:25,680 --> 00:03:28,080
if we know that there are some

95
00:03:28,080 --> 00:03:29,599
such attackers that compromise the

96
00:03:29,599 --> 00:03:32,080
devices can we still use them you know

97
00:03:32,080 --> 00:03:34,799
the in sensitive operations like payment

98
00:03:34,799 --> 00:03:36,799
system for example

99
00:03:36,799 --> 00:03:37,680
and

100
00:03:37,680 --> 00:03:40,000
one of the ways that we

101
00:03:40,000 --> 00:03:41,840
try to still do it

102
00:03:41,840 --> 00:03:45,040
is by using what we call um

103
00:03:45,040 --> 00:03:46,879
plastic execution environments

104
00:03:46,879 --> 00:03:49,280
specifically for android devices

105
00:03:49,280 --> 00:03:53,280
uh on arm cpus we have uh the variant

106
00:03:53,280 --> 00:03:54,799
called truss zone

107
00:03:54,799 --> 00:03:57,120
and the main idea here is that we're

108
00:03:57,120 --> 00:03:58,560
going to partition

109
00:03:58,560 --> 00:04:02,640
um the android world or the smartphone

110
00:04:02,640 --> 00:04:05,920
computation into two parts one will be

111
00:04:05,920 --> 00:04:08,080
the normal world where we have all of

112
00:04:08,080 --> 00:04:11,120
our applications and the android kernel

113
00:04:11,120 --> 00:04:13,120
and other computation parts and the

114
00:04:13,120 --> 00:04:14,879
other part is going to be what we call

115
00:04:14,879 --> 00:04:16,320
the secure world

116
00:04:16,320 --> 00:04:18,320
and the main idea here is that

117
00:04:18,320 --> 00:04:20,959
um when we have very large applications

118
00:04:20,959 --> 00:04:23,120
like complex browser

119
00:04:23,120 --> 00:04:25,360
messaging apps and a lot of other stuff

120
00:04:25,360 --> 00:04:26,880
there is a very very large attack

121
00:04:26,880 --> 00:04:29,360
surface it's very hard to protect it

122
00:04:29,360 --> 00:04:32,320
however if we take only relatively

123
00:04:32,320 --> 00:04:33,520
simple

124
00:04:33,520 --> 00:04:35,919
computations such as cryptographic

125
00:04:35,919 --> 00:04:38,240
computations that for example have you

126
00:04:38,240 --> 00:04:40,000
as you've seen in the previous talk it's

127
00:04:40,000 --> 00:04:43,759
relatively easy to protect them and so

128
00:04:43,759 --> 00:04:45,600
even even though it's still probably

129
00:04:45,600 --> 00:04:48,160
easier than protecting home

130
00:04:48,160 --> 00:04:49,440
when we're going to put them in a

131
00:04:49,440 --> 00:04:51,600
different part which we call the secured

132
00:04:51,600 --> 00:04:53,360
it's going to run with the same

133
00:04:53,360 --> 00:04:56,320
cpu still on the same hardware but um

134
00:04:56,320 --> 00:04:58,720
the entire memory space will be um

135
00:04:58,720 --> 00:05:00,960
partitioned and the

136
00:05:00,960 --> 00:05:01,919
the

137
00:05:01,919 --> 00:05:03,520
attack model of that model that we have

138
00:05:03,520 --> 00:05:05,120
is that even if

139
00:05:05,120 --> 00:05:07,039
we're an attacker that compromise the

140
00:05:07,039 --> 00:05:09,759
normal world and the

141
00:05:09,759 --> 00:05:11,520
user mode of the normal world in the

142
00:05:11,520 --> 00:05:13,440
kernel mode it still shouldn't be able

143
00:05:13,440 --> 00:05:14,720
to

144
00:05:14,720 --> 00:05:16,800
break the protection of the secure world

145
00:05:16,800 --> 00:05:18,720
which means we can store for example

146
00:05:18,720 --> 00:05:21,440
cryptographic keys inside this secure

147
00:05:21,440 --> 00:05:23,759
world

148
00:05:23,759 --> 00:05:26,400
okay so we ask yourself

149
00:05:26,400 --> 00:05:29,520
a relatively simple research question

150
00:05:29,520 --> 00:05:31,919
let's assume that we have uh we want to

151
00:05:31,919 --> 00:05:33,840
use trust and to protect

152
00:05:33,840 --> 00:05:36,160
keys and we have what you call hardware

153
00:05:36,160 --> 00:05:37,759
protection though when we were attacking

154
00:05:37,759 --> 00:05:41,360
spain and do they indeed stay secure

155
00:05:41,360 --> 00:05:42,639
even when the normal world is

156
00:05:42,639 --> 00:05:44,080
compromised so

157
00:05:44,080 --> 00:05:46,000
does the threat model

158
00:05:46,000 --> 00:05:48,160
of class zone holds

159
00:05:48,160 --> 00:05:49,120
and

160
00:05:49,120 --> 00:05:51,039
let's assume that we compromise

161
00:05:51,039 --> 00:05:53,600
those keys can we break the security of

162
00:05:53,600 --> 00:05:54,880
different

163
00:05:54,880 --> 00:05:57,360
higher level protocols that rely on them

164
00:05:57,360 --> 00:05:59,840
and here of course you can say this is

165
00:05:59,840 --> 00:06:01,759
trivial if you have a cryptographic

166
00:06:01,759 --> 00:06:03,360
protocols and you can get the keys then

167
00:06:03,360 --> 00:06:06,080
of course you can excuse me you can

168
00:06:06,080 --> 00:06:07,120
break them

169
00:06:07,120 --> 00:06:09,280
but the question is can we do it in

170
00:06:09,280 --> 00:06:11,039
interesting ways that would not have

171
00:06:11,039 --> 00:06:14,560
been broken even if if only the system

172
00:06:14,560 --> 00:06:17,199
was compromised

173
00:06:17,199 --> 00:06:19,280
okay

174
00:06:19,280 --> 00:06:22,479
yes so um let's start by discovering how

175
00:06:22,479 --> 00:06:25,680
does uh trust zone uh provide this

176
00:06:25,680 --> 00:06:29,280
protected um key storage

177
00:06:29,280 --> 00:06:32,160
so one thing which is common to many

178
00:06:32,160 --> 00:06:34,319
trusted execution environments is that

179
00:06:34,319 --> 00:06:36,160
they are um

180
00:06:36,160 --> 00:06:38,240
relatively stateless in the men that

181
00:06:38,240 --> 00:06:39,600
they don't use

182
00:06:39,600 --> 00:06:41,919
they don't usually access long-term

183
00:06:41,919 --> 00:06:43,919
storage by themselves they may have very

184
00:06:43,919 --> 00:06:45,520
limited space

185
00:06:45,520 --> 00:06:49,360
and um they are usually used

186
00:06:49,360 --> 00:06:51,599
by the general operative system to do

187
00:06:51,599 --> 00:06:54,479
computation and the operating system

188
00:06:54,479 --> 00:06:56,639
usually handles the long term

189
00:06:56,639 --> 00:06:58,080
state machine

190
00:06:58,080 --> 00:07:01,199
uh all we want to do

191
00:07:01,360 --> 00:07:03,840
yeah okay that is still protected um

192
00:07:03,840 --> 00:07:06,560
from the operating system so for example

193
00:07:06,560 --> 00:07:09,120
let's assume that we want to generate

194
00:07:09,120 --> 00:07:10,720
um

195
00:07:10,720 --> 00:07:14,000
rsa keeper inside the truston

196
00:07:14,000 --> 00:07:15,039
environment

197
00:07:15,039 --> 00:07:16,479
what will happen is that the android

198
00:07:16,479 --> 00:07:19,120
environment is going to request transdom

199
00:07:19,120 --> 00:07:21,120
please generate

200
00:07:21,120 --> 00:07:22,319
a keeper

201
00:07:22,319 --> 00:07:24,720
the trust one will generate it and will

202
00:07:24,720 --> 00:07:26,080
return the

203
00:07:26,080 --> 00:07:28,400
keys to the

204
00:07:28,400 --> 00:07:30,080
to the operating system

205
00:07:30,080 --> 00:07:32,400
for long term storage however we want to

206
00:07:32,400 --> 00:07:34,800
protect the private key from the

207
00:07:34,800 --> 00:07:37,919
android system so we're going to encrypt

208
00:07:37,919 --> 00:07:40,160
the private key or the term that is used

209
00:07:40,160 --> 00:07:41,599
there is rep

210
00:07:41,599 --> 00:07:43,120
we're going to wrap the key and we're

211
00:07:43,120 --> 00:07:45,440
going to return what is referenced as a

212
00:07:45,440 --> 00:07:48,000
blob encrypted blob to the operating

213
00:07:48,000 --> 00:07:50,000
system the operating system can then

214
00:07:50,000 --> 00:07:52,639
store it for long-term storage

215
00:07:52,639 --> 00:07:54,720
after we start we want to actually use

216
00:07:54,720 --> 00:07:56,319
it for stuff

217
00:07:56,319 --> 00:07:57,039
so

218
00:07:57,039 --> 00:07:58,960
one very interesting thing that we can

219
00:07:58,960 --> 00:08:03,199
do with um such keys is to prove to

220
00:08:03,199 --> 00:08:05,520
other self-parties that we actually

221
00:08:05,520 --> 00:08:08,879
generated the keys in a secure way

222
00:08:08,879 --> 00:08:11,360
basically means we can request the trust

223
00:08:11,360 --> 00:08:13,520
zone to attest to the fact that this

224
00:08:13,520 --> 00:08:14,560
specific

225
00:08:14,560 --> 00:08:16,160
public keyphone

226
00:08:16,160 --> 00:08:18,160
was generated inside

227
00:08:18,160 --> 00:08:20,879
the trust on hardware and

228
00:08:20,879 --> 00:08:22,400
the private key should not have ever

229
00:08:22,400 --> 00:08:24,639
been linked to the normal word and we

230
00:08:24,639 --> 00:08:26,800
get a nice certificate which is a

231
00:08:26,800 --> 00:08:29,199
certificate chain that's in the upper

232
00:08:29,199 --> 00:08:31,440
the topmost certificate is signed either

233
00:08:31,440 --> 00:08:35,279
by samsung google and the lowest um

234
00:08:35,279 --> 00:08:36,880
part of the certification is the public

235
00:08:36,880 --> 00:08:37,919
key

236
00:08:37,919 --> 00:08:40,479
and we will show several examples for

237
00:08:40,479 --> 00:08:43,679
how this can actually be used later on

238
00:08:43,679 --> 00:08:45,440
and but we don't only want to generate

239
00:08:45,440 --> 00:08:47,040
any test keys we want to actually use

240
00:08:47,040 --> 00:08:48,560
them so if for example we want to use

241
00:08:48,560 --> 00:08:51,040
the keys to sign a transaction what

242
00:08:51,040 --> 00:08:53,200
we're going to do is we're going to send

243
00:08:53,200 --> 00:08:54,880
a request

244
00:08:54,880 --> 00:08:57,200
and to the key master together with this

245
00:08:57,200 --> 00:08:58,560
encrypted blob

246
00:08:58,560 --> 00:09:01,600
and inside the the trust zone those keys

247
00:09:01,600 --> 00:09:03,680
will be unwrapped and the private key

248
00:09:03,680 --> 00:09:06,160
will be recovered then and we're going

249
00:09:06,160 --> 00:09:07,839
to use it to do this cryptographic

250
00:09:07,839 --> 00:09:10,480
operation for example sign a bank

251
00:09:10,480 --> 00:09:12,640
transaction and then we go we're going

252
00:09:12,640 --> 00:09:14,800
to return the result to the to the

253
00:09:14,800 --> 00:09:18,319
android normal water

254
00:09:18,399 --> 00:09:19,680
okay

255
00:09:19,680 --> 00:09:22,080
the main thing

256
00:09:22,080 --> 00:09:25,249
[Music]

257
00:09:25,839 --> 00:09:27,839
we mentioned before is that plain text

258
00:09:27,839 --> 00:09:30,800
key material should never leave um the

259
00:09:30,800 --> 00:09:32,959
trust zone operating system should never

260
00:09:32,959 --> 00:09:35,519
be available to the normal android

261
00:09:35,519 --> 00:09:37,839
environment

262
00:09:38,160 --> 00:09:39,040
okay

263
00:09:39,040 --> 00:09:42,480
so uh we decided to look specifically at

264
00:09:42,480 --> 00:09:44,959
and trust zone operating system or

265
00:09:44,959 --> 00:09:46,560
implementations that were

266
00:09:46,560 --> 00:09:48,240
used by samsung

267
00:09:48,240 --> 00:09:51,279
and although um arm

268
00:09:51,279 --> 00:09:53,440
provides the basic um

269
00:09:53,440 --> 00:09:57,760
hardware design and maybe android uh

270
00:09:57,760 --> 00:09:59,440
designed the api

271
00:09:59,440 --> 00:10:02,240
the specific implementation for all and

272
00:10:02,240 --> 00:10:04,000
for example the cryptographic operations

273
00:10:04,000 --> 00:10:06,160
are done this is something that's left

274
00:10:06,160 --> 00:10:08,399
to each vendor and there are a lot of

275
00:10:08,399 --> 00:10:09,839
different vendors

276
00:10:09,839 --> 00:10:12,480
and there was a very nice wood paper a

277
00:10:12,480 --> 00:10:15,120
couple of years ago that show how howard

278
00:10:15,120 --> 00:10:17,600
used to protect albuquerque's and they

279
00:10:17,600 --> 00:10:20,800
did it by using hard-coded

280
00:10:20,800 --> 00:10:22,880
keys in software they think that were

281
00:10:22,880 --> 00:10:24,720
the same for all devices

282
00:10:24,720 --> 00:10:27,200
and so this may be not the

283
00:10:27,200 --> 00:10:29,120
best practice that you would like to see

284
00:10:29,120 --> 00:10:31,600
and samsung put a little bit more effort

285
00:10:31,600 --> 00:10:32,480
into this

286
00:10:32,480 --> 00:10:34,640
but even if you only look at samsung we

287
00:10:34,640 --> 00:10:36,000
have three different

288
00:10:36,000 --> 00:10:38,399
truss zone um operating system that were

289
00:10:38,399 --> 00:10:40,720
implemented by three different vendors

290
00:10:40,720 --> 00:10:43,920
including uh samsung and they are and it

291
00:10:43,920 --> 00:10:46,720
depends on if you bought which model you

292
00:10:46,720 --> 00:10:48,399
bought if it's the us version or the

293
00:10:48,399 --> 00:10:50,480
european version and there's a lot of

294
00:10:50,480 --> 00:10:52,560
things that don't show out of them at

295
00:10:52,560 --> 00:10:53,360
least

296
00:10:53,360 --> 00:10:54,800
mandated by

297
00:10:54,800 --> 00:10:57,200
mist or fips or whatever decide which

298
00:10:57,200 --> 00:10:58,880
version you can use

299
00:10:58,880 --> 00:11:01,120
and what is common to all these vendors

300
00:11:01,120 --> 00:11:03,279
and all this different operating system

301
00:11:03,279 --> 00:11:04,160
is that

302
00:11:04,160 --> 00:11:06,800
they are a black box implementation

303
00:11:06,800 --> 00:11:08,560
there's basically no information

304
00:11:08,560 --> 00:11:10,720
available for how they actually what is

305
00:11:10,720 --> 00:11:12,640
the design how they implement it it's

306
00:11:12,640 --> 00:11:15,519
not open source and we know that it's

307
00:11:15,519 --> 00:11:16,720
actually different between those

308
00:11:16,720 --> 00:11:17,600
different

309
00:11:17,600 --> 00:11:19,519
uh operations the different operating

310
00:11:19,519 --> 00:11:21,360
systems

311
00:11:21,360 --> 00:11:24,399
so uh basically what we did

312
00:11:24,399 --> 00:11:27,279
or maybe let's say the alone did in

313
00:11:27,279 --> 00:11:29,519
which you spent about a year try to

314
00:11:29,519 --> 00:11:32,320
reverse engineer different firmwares for

315
00:11:32,320 --> 00:11:34,399
uh trusts on operating system

316
00:11:34,399 --> 00:11:36,079
and the first thing that

317
00:11:36,079 --> 00:11:37,680
oh okay first thing is that we're saying

318
00:11:37,680 --> 00:11:39,519
one process but basically one of the

319
00:11:39,519 --> 00:11:41,440
last things that we tried to check was

320
00:11:41,440 --> 00:11:43,360
how and what is the cryptographic design

321
00:11:43,360 --> 00:11:45,839
that was used to encrypt the keys to

322
00:11:45,839 --> 00:11:47,120
wrap the blobs

323
00:11:47,120 --> 00:11:49,760
and uh maybe not very surprisingly we

324
00:11:49,760 --> 00:11:52,560
found out that they do use an

325
00:11:52,560 --> 00:11:53,839
authentication

326
00:11:53,839 --> 00:11:56,320
equipment associated a mode of operation

327
00:11:56,320 --> 00:12:01,040
called asgcm which is a very common mode

328
00:12:01,040 --> 00:12:02,399
for encryption

329
00:12:02,399 --> 00:12:04,399
and we try to understand how the keys

330
00:12:04,399 --> 00:12:07,279
are generated and how the iv is chosen

331
00:12:07,279 --> 00:12:08,720
um so

332
00:12:08,720 --> 00:12:11,200
the keys are basically derived from a

333
00:12:11,200 --> 00:12:13,200
single key called the

334
00:12:13,200 --> 00:12:14,720
root encryption key

335
00:12:14,720 --> 00:12:17,040
and they are derived using a salt which

336
00:12:17,040 --> 00:12:19,600
is specific for each

337
00:12:19,600 --> 00:12:21,120
for each blob

338
00:12:21,120 --> 00:12:23,360
and there's also because this is a

339
00:12:23,360 --> 00:12:27,200
stream cipher also an initial vector and

340
00:12:27,200 --> 00:12:28,480
to make things a little bit more

341
00:12:28,480 --> 00:12:29,600
confusing

342
00:12:29,600 --> 00:12:31,279
the key that you see though is not the

343
00:12:31,279 --> 00:12:32,880
key that is used for encryption it's the

344
00:12:32,880 --> 00:12:35,120
keys that we actually want to encrypt

345
00:12:35,120 --> 00:12:37,200
and so the two questions that we asked

346
00:12:37,200 --> 00:12:39,360
ourselves when we see this is a

347
00:12:39,360 --> 00:12:43,120
stem cycle how is this salt chosen and

348
00:12:43,120 --> 00:12:45,760
how is the iv chosen

349
00:12:45,760 --> 00:12:47,839
and we thought it should be a simple

350
00:12:47,839 --> 00:12:49,600
answer but of course

351
00:12:49,600 --> 00:12:51,680
there's not there are at least three

352
00:12:51,680 --> 00:12:54,480
different answers that we that we got

353
00:12:54,480 --> 00:12:57,440
so the salt value is actually a digest

354
00:12:57,440 --> 00:12:58,880
and continuation of

355
00:12:58,880 --> 00:13:00,880
many different values

356
00:13:00,880 --> 00:13:01,760
and

357
00:13:01,760 --> 00:13:03,839
we have at least three different

358
00:13:03,839 --> 00:13:05,600
versions of this that we managed to find

359
00:13:05,600 --> 00:13:07,839
out the first version is what we

360
00:13:07,839 --> 00:13:09,680
initially thought was called v15 but

361
00:13:09,680 --> 00:13:12,079
apparently it's v 1.5

362
00:13:12,079 --> 00:13:15,200
and which includes a fixed string and

363
00:13:15,200 --> 00:13:17,279
several um

364
00:13:17,279 --> 00:13:20,800
several values which are all chosen by

365
00:13:20,800 --> 00:13:22,480
the android application when it

366
00:13:22,480 --> 00:13:25,120
requested the key to be encrypted

367
00:13:25,120 --> 00:13:29,040
and the second version um s9 here is

368
00:13:29,040 --> 00:13:30,880
galaxy s9

369
00:13:30,880 --> 00:13:34,480
and v20 ov 2.0 is what was actually

370
00:13:34,480 --> 00:13:36,800
written in the string and here we have

371
00:13:36,800 --> 00:13:38,720
the same values but we also have the

372
00:13:38,720 --> 00:13:40,320
values in green which are not controlled

373
00:13:40,320 --> 00:13:42,320
by the android world they are actually

374
00:13:42,320 --> 00:13:44,079
um things that

375
00:13:44,079 --> 00:13:46,320
attest in some sense to the status of

376
00:13:46,320 --> 00:13:48,480
the device for example is it was it

377
00:13:48,480 --> 00:13:51,440
rooted or not and several integrative

378
00:13:51,440 --> 00:13:53,920
flares of the boot process

379
00:13:53,920 --> 00:13:55,440
so they are not chosen by that of the

380
00:13:55,440 --> 00:13:58,000
world but they are constant so they are

381
00:13:58,000 --> 00:14:00,720
the same for all different um

382
00:14:00,720 --> 00:14:03,920
keys that are wrapped the last version

383
00:14:03,920 --> 00:14:06,880
is what we call uh v20

384
00:14:06,880 --> 00:14:09,519
2.0 which is was there was the one that

385
00:14:09,519 --> 00:14:12,880
was used for galaxy s10 and later models

386
00:14:12,880 --> 00:14:14,959
and there we also have

387
00:14:14,959 --> 00:14:16,560
um this

388
00:14:16,560 --> 00:14:19,199
field which i don't remember what's he

389
00:14:19,199 --> 00:14:21,040
but randomness is something that we can

390
00:14:21,040 --> 00:14:22,800
all understand that it basically means

391
00:14:22,800 --> 00:14:26,160
added randomness which is actually um

392
00:14:26,160 --> 00:14:28,240
random which is nice

393
00:14:28,240 --> 00:14:30,079
so we try to understand it with where

394
00:14:30,079 --> 00:14:31,680
all different this different thing comes

395
00:14:31,680 --> 00:14:34,399
from and and looking at the strings we

396
00:14:34,399 --> 00:14:36,880
found out it's basically um

397
00:14:36,880 --> 00:14:39,120
unsurprisingly when we have a lot of

398
00:14:39,120 --> 00:14:40,320
different versions that we don't

399
00:14:40,320 --> 00:14:42,240
understand where they are is some kind

400
00:14:42,240 --> 00:14:43,920
of standardization or certification

401
00:14:43,920 --> 00:14:46,480
process behind it here it's what was

402
00:14:46,480 --> 00:14:49,120
used for the mobile device fundamental

403
00:14:49,120 --> 00:14:50,959
protection profile

404
00:14:50,959 --> 00:14:54,639
which is a kind of common criteria and

405
00:14:54,639 --> 00:14:56,320
used it so basically if i understand

406
00:14:56,320 --> 00:14:57,839
correctly this is

407
00:14:57,839 --> 00:14:59,680
what says that um

408
00:14:59,680 --> 00:15:02,079
you can use these devices for like bring

409
00:15:02,079 --> 00:15:04,399
your own device for government or large

410
00:15:04,399 --> 00:15:06,480
enterprise networks it's still supposed

411
00:15:06,480 --> 00:15:08,320
to be secure so there are different

412
00:15:08,320 --> 00:15:09,760
versions of this standard so there are

413
00:15:09,760 --> 00:15:12,959
different versions of the implementation

414
00:15:12,959 --> 00:15:14,240
so

415
00:15:14,240 --> 00:15:16,480
we've seen a lot of different stuff what

416
00:15:16,480 --> 00:15:20,160
does it mean from the perspective

417
00:15:20,160 --> 00:15:23,519
so and when we see

418
00:15:23,519 --> 00:15:25,360
stream cycles the first thing that we

419
00:15:25,360 --> 00:15:27,760
need to think about is i will use the

420
00:15:27,760 --> 00:15:28,880
tech

421
00:15:28,880 --> 00:15:30,800
so as we mentioned before this for the

422
00:15:30,800 --> 00:15:32,639
v15 versions

423
00:15:32,639 --> 00:15:36,480
and v20 galaxy s3 the android client

424
00:15:36,480 --> 00:15:39,360
can't control the salt that is chosen if

425
00:15:39,360 --> 00:15:41,199
you control the salt and it is derived

426
00:15:41,199 --> 00:15:43,279
from the same water encryption key then

427
00:15:43,279 --> 00:15:45,680
it means that we can cause keys to be

428
00:15:45,680 --> 00:15:47,279
reused

429
00:15:47,279 --> 00:15:50,320
and maybe what was most surprising to us

430
00:15:50,320 --> 00:15:52,320
that we saw that although

431
00:15:52,320 --> 00:15:54,880
in default the iv is generated randomly

432
00:15:54,880 --> 00:15:56,880
there is a specific field that you can

433
00:15:56,880 --> 00:15:59,680
add to the request saying no please use

434
00:15:59,680 --> 00:16:00,880
this iv

435
00:16:00,880 --> 00:16:03,680
so we can also have iv reviews

436
00:16:03,680 --> 00:16:05,680
and

437
00:16:05,680 --> 00:16:08,560
this is acs gcn which i really like this

438
00:16:08,560 --> 00:16:10,160
diagram it's very nice and this

439
00:16:10,160 --> 00:16:12,079
basically means that we can decrypt any

440
00:16:12,079 --> 00:16:13,600
keys that we want

441
00:16:13,600 --> 00:16:16,399
um that is relatively simple i guess

442
00:16:16,399 --> 00:16:18,160
most of people here know it they'll give

443
00:16:18,160 --> 00:16:20,560
the token in a security conference so

444
00:16:20,560 --> 00:16:22,880
they'll need to unders better

445
00:16:22,880 --> 00:16:25,040
explanation for it but basically inside

446
00:16:25,040 --> 00:16:27,680
the wrapped blob we have the iv

447
00:16:27,680 --> 00:16:28,800
installed that was used for the

448
00:16:28,800 --> 00:16:30,880
encryption because we needed

449
00:16:30,880 --> 00:16:33,279
to decrypt we can extract these values

450
00:16:33,279 --> 00:16:34,800
and then we can use the fact that we can

451
00:16:34,800 --> 00:16:38,320
actually import keys to the keystone so

452
00:16:38,320 --> 00:16:40,320
import the key that we know its value we

453
00:16:40,320 --> 00:16:41,839
use the same

454
00:16:41,839 --> 00:16:46,639
i've installed and we have iv um

455
00:16:46,639 --> 00:16:48,880
i will use we take all of the values we

456
00:16:48,880 --> 00:16:51,120
saw them and we can decrypt any key that

457
00:16:51,120 --> 00:16:52,160
we want

458
00:16:52,160 --> 00:16:53,839
which is nice

459
00:16:53,839 --> 00:16:54,720
um

460
00:16:54,720 --> 00:16:56,959
what does it mean in practice

461
00:16:56,959 --> 00:16:58,079
so

462
00:16:58,079 --> 00:17:00,800
for example and it can help us to bypass

463
00:17:00,800 --> 00:17:02,399
different authentication confirmation

464
00:17:02,399 --> 00:17:04,640
fields so we can say these keys are

465
00:17:04,640 --> 00:17:06,799
stored inside the android phone now

466
00:17:06,799 --> 00:17:07,679
let's say

467
00:17:07,679 --> 00:17:09,839
we want to sign a transaction

468
00:17:09,839 --> 00:17:12,799
so if someone compromised the android

469
00:17:12,799 --> 00:17:14,559
the android operating system it can

470
00:17:14,559 --> 00:17:17,439
simply ask trust zone please sign this

471
00:17:17,439 --> 00:17:19,439
transaction it doesn't matter if the

472
00:17:19,439 --> 00:17:22,400
keys are outside us on or not

473
00:17:22,400 --> 00:17:23,919
but to protect against this type of

474
00:17:23,919 --> 00:17:26,959
attacks we can actually

475
00:17:28,640 --> 00:17:30,960
use different restrictions about key

476
00:17:30,960 --> 00:17:33,039
usage when we generate a new key we

477
00:17:33,039 --> 00:17:35,200
might say in order to use this key for

478
00:17:35,200 --> 00:17:38,000
signature you must get an input with the

479
00:17:38,000 --> 00:17:40,320
fingerprint of the user so class don't

480
00:17:40,320 --> 00:17:42,960
have in some devices direct access to

481
00:17:42,960 --> 00:17:44,559
the fingerprint reading it could have

482
00:17:44,559 --> 00:17:46,320
direct access to the screen so you can

483
00:17:46,320 --> 00:17:48,799
have a secure prompt where you show the

484
00:17:48,799 --> 00:17:49,679
uh

485
00:17:49,679 --> 00:17:51,120
the transaction

486
00:17:51,120 --> 00:17:52,880
and you can use the

487
00:17:52,880 --> 00:17:55,360
fingerprint and only if you did it then

488
00:17:55,360 --> 00:17:56,720
trustun will agree to sign on your

489
00:17:56,720 --> 00:18:00,080
behalf so this is so even if nso

490
00:18:00,080 --> 00:18:02,160
compromised your device you they still

491
00:18:02,160 --> 00:18:05,200
shouldn't be able to um steal your money

492
00:18:05,200 --> 00:18:06,720
you usually want to steal something else

493
00:18:06,720 --> 00:18:09,039
they get enough money anyway but

494
00:18:09,039 --> 00:18:10,720
for the sake of the example

495
00:18:10,720 --> 00:18:13,120
so if we're able to extract the key then

496
00:18:13,120 --> 00:18:14,799
we can simply bypass all of this

497
00:18:14,799 --> 00:18:18,640
restriction and get away with the money

498
00:18:18,640 --> 00:18:20,320
so um

499
00:18:20,320 --> 00:18:21,520
this is

500
00:18:21,520 --> 00:18:23,919
nice for us as attackers not so nice for

501
00:18:23,919 --> 00:18:25,120
people that are actually using this

502
00:18:25,120 --> 00:18:27,520
phone but this um

503
00:18:27,520 --> 00:18:30,559
we did this research in 2021 and

504
00:18:30,559 --> 00:18:33,039
although galaxy s9 was still

505
00:18:33,039 --> 00:18:35,679
supported i think it still does this is

506
00:18:35,679 --> 00:18:38,000
very nice from samsung to have long term

507
00:18:38,000 --> 00:18:39,039
support

508
00:18:39,039 --> 00:18:41,520
but um we wanted to find out what we can

509
00:18:41,520 --> 00:18:43,919
do with newer versions

510
00:18:43,919 --> 00:18:47,520
um so uh what so can we do this type of

511
00:18:47,520 --> 00:18:50,000
downgrade attack so if we look at galaxy

512
00:18:50,000 --> 00:18:51,679
s9 and

513
00:18:51,679 --> 00:18:53,679
2021 whatever

514
00:18:53,679 --> 00:18:55,840
there are afterwards then they use this

515
00:18:55,840 --> 00:18:57,200
kind of randomness every time we

516
00:18:57,200 --> 00:18:59,120
generate a new key and this means we

517
00:18:59,120 --> 00:19:00,960
can't reuse the key

518
00:19:00,960 --> 00:19:03,120
however what we found that there is

519
00:19:03,120 --> 00:19:05,760
latent code that can simply as we can

520
00:19:05,760 --> 00:19:08,000
add this field saying please use this iv

521
00:19:08,000 --> 00:19:10,080
you can add another field saying please

522
00:19:10,080 --> 00:19:13,120
use the older v15 version

523
00:19:13,120 --> 00:19:16,720
we really tried to find any um program

524
00:19:16,720 --> 00:19:18,480
or use case we actually use this

525
00:19:18,480 --> 00:19:20,240
property that allows you to create older

526
00:19:20,240 --> 00:19:22,320
blobs this was never as fast we know

527
00:19:22,320 --> 00:19:24,559
this was never used for anything except

528
00:19:24,559 --> 00:19:25,520
attacks

529
00:19:25,520 --> 00:19:28,400
but the writing code is still there

530
00:19:28,400 --> 00:19:30,880
so we still have the

531
00:19:30,880 --> 00:19:32,720
pikachu it's called that

532
00:19:32,720 --> 00:19:34,880
which sounds very surprised and we can

533
00:19:34,880 --> 00:19:36,080
do this attack

534
00:19:36,080 --> 00:19:38,320
so basically if there's a privilege

535
00:19:38,320 --> 00:19:41,120
attacker that can change the request to

536
00:19:41,120 --> 00:19:43,520
the classroom it can ask please use the

537
00:19:43,520 --> 00:19:47,200
old version and we get um a blob the

538
00:19:47,200 --> 00:19:49,280
application doesn't know that anything

539
00:19:49,280 --> 00:19:51,039
is different it gets a blob that he can

540
00:19:51,039 --> 00:19:54,080
use but law is the bliss blob is

541
00:19:54,080 --> 00:19:58,000
vulnerable to key extraction attacks

542
00:19:58,000 --> 00:20:00,320
okay so why is it interesting

543
00:20:00,320 --> 00:20:02,000
so for example

544
00:20:02,000 --> 00:20:04,080
we currently have the

545
00:20:04,080 --> 00:20:05,840
two web authentication protocol which is

546
00:20:05,840 --> 00:20:09,360
gaining popularity this allows passwords

547
00:20:09,360 --> 00:20:11,840
passwordless authentication which means

548
00:20:11,840 --> 00:20:13,679
maybe within some point in time we can

549
00:20:13,679 --> 00:20:15,600
stop using passwords

550
00:20:15,600 --> 00:20:17,679
and the way it's done is that we have

551
00:20:17,679 --> 00:20:20,400
this authentication keys that

552
00:20:20,400 --> 00:20:22,480
live inside what is called in the

553
00:20:22,480 --> 00:20:25,039
standard platform authenticators which

554
00:20:25,039 --> 00:20:27,120
are basically in hardware tokens like

555
00:20:27,120 --> 00:20:29,760
yubikey and again this this keys should

556
00:20:29,760 --> 00:20:32,000
not never leave the hardware token and

557
00:20:32,000 --> 00:20:34,400
they are used to to authenticate to the

558
00:20:34,400 --> 00:20:37,120
web server instead of a password

559
00:20:37,120 --> 00:20:38,640
and what is very important for the

560
00:20:38,640 --> 00:20:40,640
security guarantees of fido is that it

561
00:20:40,640 --> 00:20:43,120
will be very hard to extract keys

562
00:20:43,120 --> 00:20:45,039
from secure elements

563
00:20:45,039 --> 00:20:46,960
and it should also not be possible to

564
00:20:46,960 --> 00:20:50,400
easily clone the platform dedicated so

565
00:20:50,400 --> 00:20:52,320
for example if

566
00:20:52,320 --> 00:20:54,240
i am the owner of a very large

567
00:20:54,240 --> 00:20:56,080
corporation and i want to give my

568
00:20:56,080 --> 00:20:57,919
employees a way to access the enterprise

569
00:20:57,919 --> 00:21:00,000
network i don't want them to be able to

570
00:21:00,000 --> 00:21:01,840
clone this

571
00:21:01,840 --> 00:21:03,360
platform with etiquette and give other

572
00:21:03,360 --> 00:21:05,600
people access to this network so the

573
00:21:05,600 --> 00:21:07,360
nice thing is that in the threat model

574
00:21:07,360 --> 00:21:08,559
for feeder 2

575
00:21:08,559 --> 00:21:12,159
the user might also be malicious

576
00:21:12,159 --> 00:21:13,840
so um

577
00:21:13,840 --> 00:21:15,919
one thing that we can ask ourselves is

578
00:21:15,919 --> 00:21:18,159
if we already have this

579
00:21:18,159 --> 00:21:21,039
very expensive hardware called a

580
00:21:21,039 --> 00:21:23,360
smartphone and it has these thrusts on

581
00:21:23,360 --> 00:21:25,360
its side why do we need our token maybe

582
00:21:25,360 --> 00:21:28,000
you can implement feeder 2 inside the

583
00:21:28,000 --> 00:21:30,080
android devices which is something that

584
00:21:30,080 --> 00:21:31,280
is actually

585
00:21:31,280 --> 00:21:32,400
done

586
00:21:32,400 --> 00:21:33,600
and

587
00:21:33,600 --> 00:21:34,880
this is something that we can actually

588
00:21:34,880 --> 00:21:35,840
break

589
00:21:35,840 --> 00:21:38,480
so um i'm not going to go over all of

590
00:21:38,480 --> 00:21:40,320
the details of the registration process

591
00:21:40,320 --> 00:21:41,679
for fido especially if i don't

592
00:21:41,679 --> 00:21:43,120
understand all of them

593
00:21:43,120 --> 00:21:46,240
but part of the registration process he

594
00:21:46,240 --> 00:21:47,760
provides the trusted server with the

595
00:21:47,760 --> 00:21:50,480
public key that we use and we use the

596
00:21:50,480 --> 00:21:52,799
attestation process that i mentioned in

597
00:21:52,799 --> 00:21:55,120
the beginning in order to prove to the

598
00:21:55,120 --> 00:21:57,600
to the server that this key was actually

599
00:21:57,600 --> 00:22:00,159
actually generated inside the trust zone

600
00:22:00,159 --> 00:22:03,200
so we can just um have an application

601
00:22:03,200 --> 00:22:03,919
that

602
00:22:03,919 --> 00:22:06,799
registers to website and then clone the

603
00:22:06,799 --> 00:22:08,960
private key

604
00:22:08,960 --> 00:22:12,480
so in order to be able to clone

605
00:22:12,480 --> 00:22:14,799
a key for fido we need to be able to

606
00:22:14,799 --> 00:22:16,320
attest to the fact that it was inside

607
00:22:16,320 --> 00:22:18,960
stratfor and the way that we do it is

608
00:22:18,960 --> 00:22:20,960
that we're going to ask trustzone to

609
00:22:20,960 --> 00:22:24,480
generate a secure key inside transform

610
00:22:24,480 --> 00:22:26,000
but we're going to do it with the older

611
00:22:26,000 --> 00:22:28,480
version that the station process looks

612
00:22:28,480 --> 00:22:30,240
the same and the station process for

613
00:22:30,240 --> 00:22:31,440
fido doesn't know that there are

614
00:22:31,440 --> 00:22:33,200
different ways to wrap

615
00:22:33,200 --> 00:22:36,240
to wrap keys and so this certificate

616
00:22:36,240 --> 00:22:37,200
simply

617
00:22:37,200 --> 00:22:40,240
passes and we can register to fido then

618
00:22:40,240 --> 00:22:41,919
we can either

619
00:22:41,919 --> 00:22:44,559
do a regular authentication using the

620
00:22:44,559 --> 00:22:45,919
regular hardware

621
00:22:45,919 --> 00:22:48,720
or we can simply um

622
00:22:48,720 --> 00:22:51,200
recover the private key and do this at a

623
00:22:51,200 --> 00:22:53,360
station with without the trust zone

624
00:22:53,360 --> 00:22:56,000
without even using this android device

625
00:22:56,000 --> 00:22:58,960
and we have some nice demos that we are

626
00:22:58,960 --> 00:23:00,240
able to show how can during the

627
00:23:00,240 --> 00:23:02,000
registration we can do the downgraded

628
00:23:02,000 --> 00:23:06,640
technology and then we use um a simple

629
00:23:06,640 --> 00:23:08,240
application for uh

630
00:23:08,240 --> 00:23:10,559
using web authentication in order to

631
00:23:10,559 --> 00:23:13,679
show that we can authenticate and uh buy

632
00:23:13,679 --> 00:23:15,120
different seats

633
00:23:15,120 --> 00:23:18,320
by telero t100 or whatever it is on the

634
00:23:18,320 --> 00:23:21,520
store without using the thruster

635
00:23:21,520 --> 00:23:23,600
and the nice thing that this works

636
00:23:23,600 --> 00:23:25,360
regardless for how trustworthy is

637
00:23:25,360 --> 00:23:26,960
actually implemented and we talked about

638
00:23:26,960 --> 00:23:28,400
before there was a question about maybe

639
00:23:28,400 --> 00:23:31,039
move some sensitive calculation

640
00:23:31,039 --> 00:23:33,679
computations through a now to another

641
00:23:33,679 --> 00:23:36,480
cpu so for example samsung in the latest

642
00:23:36,480 --> 00:23:39,120
models have what they call s-box which

643
00:23:39,120 --> 00:23:39,840
is

644
00:23:39,840 --> 00:23:43,360
not as box x-boxes for crypto and

645
00:23:43,360 --> 00:23:44,720
strongbox

646
00:23:44,720 --> 00:23:46,640
which is a

647
00:23:46,640 --> 00:23:48,559
co-processor that does all of the

648
00:23:48,559 --> 00:23:50,080
cryptographic computation in a way that

649
00:23:50,080 --> 00:23:51,760
you don't have cache attacks don't have

650
00:23:51,760 --> 00:23:53,520
a direct power analysis attack and it's

651
00:23:53,520 --> 00:23:55,679
supposed to be very very secure but

652
00:23:55,679 --> 00:23:57,120
because the api is broken and the

653
00:23:57,120 --> 00:23:58,880
cryptographic design is bad then it

654
00:23:58,880 --> 00:24:00,240
doesn't really matter we can still

655
00:24:00,240 --> 00:24:02,080
recover the case

656
00:24:02,080 --> 00:24:03,679
um

657
00:24:03,679 --> 00:24:05,120
so this is nice

658
00:24:05,120 --> 00:24:08,240
so um we had this uh several attacks and

659
00:24:08,240 --> 00:24:10,159
we said that that maybe

660
00:24:10,159 --> 00:24:12,000
we don't want to sell them to

661
00:24:12,000 --> 00:24:13,520
uh

662
00:24:13,520 --> 00:24:16,080
but people want to disclose to samsung

663
00:24:16,080 --> 00:24:19,360
so um on may 21 we reported the iv use

664
00:24:19,360 --> 00:24:22,400
attack ons on s9 to samsung they were

665
00:24:22,400 --> 00:24:23,919
very cooperative

666
00:24:23,919 --> 00:24:26,240
and it took them about three months was

667
00:24:26,240 --> 00:24:28,480
think very impressive to patch a lot of

668
00:24:28,480 --> 00:24:30,400
different android devices we photo

669
00:24:30,400 --> 00:24:32,799
detect s9 basically there are a lot of

670
00:24:32,799 --> 00:24:34,880
other devices using the same version of

671
00:24:34,880 --> 00:24:36,080
classroom

672
00:24:36,080 --> 00:24:38,000
and the

673
00:24:38,000 --> 00:24:39,760
the patch was relatively simple they

674
00:24:39,760 --> 00:24:42,080
simply removed the option to

675
00:24:42,080 --> 00:24:43,440
add the custom

676
00:24:43,440 --> 00:24:44,640
iv

677
00:24:44,640 --> 00:24:47,360
and we also mentioned

678
00:24:47,360 --> 00:24:48,640
the fact that there is a downgrade

679
00:24:48,640 --> 00:24:51,520
attack possible but they said

680
00:24:51,520 --> 00:24:54,240
this is not very interesting because um

681
00:24:54,240 --> 00:24:55,760
there is no application created with a

682
00:24:55,760 --> 00:24:57,760
key blob at version 15

683
00:24:57,760 --> 00:24:59,520
and the applications themselves are not

684
00:24:59,520 --> 00:25:01,919
supposed to change the hebrew version so

685
00:25:01,919 --> 00:25:03,840
it should not be exploitable

686
00:25:03,840 --> 00:25:05,279
i said

687
00:25:05,279 --> 00:25:06,400
okay

688
00:25:06,400 --> 00:25:08,000
um

689
00:25:08,000 --> 00:25:09,440
that is interesting

690
00:25:09,440 --> 00:25:11,679
let me look at it again

691
00:25:11,679 --> 00:25:14,640
so one month afterwards we managed to

692
00:25:14,640 --> 00:25:17,039
find the downgraded attack on s10 20 and

693
00:25:17,039 --> 00:25:18,720
21.

694
00:25:18,720 --> 00:25:21,039
and we wrote samsung and said

695
00:25:21,039 --> 00:25:23,039
um yes

696
00:25:23,039 --> 00:25:24,880
we don't feel there's a actual

697
00:25:24,880 --> 00:25:27,440
particle security impact on this we said

698
00:25:27,440 --> 00:25:30,799
okay we did today we did our best and

699
00:25:30,799 --> 00:25:32,559
let's go and write a paper

700
00:25:32,559 --> 00:25:34,320
and then um

701
00:25:34,320 --> 00:25:36,400
after a couple of weeks there was a

702
00:25:36,400 --> 00:25:37,679
deadline and the student wanted to

703
00:25:37,679 --> 00:25:40,240
graduate so and we finished and we sent

704
00:25:40,240 --> 00:25:42,320
samsung the full paper say okay this is

705
00:25:42,320 --> 00:25:43,520
what we're going to submit at a

706
00:25:43,520 --> 00:25:45,120
conference please have a look if you

707
00:25:45,120 --> 00:25:46,720
have any remarks

708
00:25:46,720 --> 00:25:48,400
after that we got the

709
00:25:48,400 --> 00:25:50,400
response that's okay after a further

710
00:25:50,400 --> 00:25:52,880
review of your paper we concluded that

711
00:25:52,880 --> 00:25:55,039
maybe it has some practical impact on

712
00:25:55,039 --> 00:25:58,159
the devices and they release

713
00:25:58,159 --> 00:26:00,880
high severity cv and patch all of their

714
00:26:00,880 --> 00:26:01,840
later

715
00:26:01,840 --> 00:26:04,320
devices again i think this is

716
00:26:04,320 --> 00:26:06,880
extremely fast so basically

717
00:26:06,880 --> 00:26:08,880
they talk about one month between say

718
00:26:08,880 --> 00:26:11,120
okay okay maybe there's an issue where

719
00:26:11,120 --> 00:26:13,120
the patches are all available

720
00:26:13,120 --> 00:26:14,880
as far as we know the patches are

721
00:26:14,880 --> 00:26:17,039
applicable to about over 100 million

722
00:26:17,039 --> 00:26:18,720
devices

723
00:26:18,720 --> 00:26:21,360
which is very nice

724
00:26:21,360 --> 00:26:22,880
and

725
00:26:22,880 --> 00:26:24,400
everything is done

726
00:26:24,400 --> 00:26:26,080
almost

727
00:26:26,080 --> 00:26:29,039
and as i mentioned

728
00:26:29,120 --> 00:26:32,320
my alone spent about a year reverse

729
00:26:32,320 --> 00:26:34,880
engineering the different

730
00:26:34,880 --> 00:26:37,760
firmwares for different samsung devices

731
00:26:37,760 --> 00:26:40,880
at two weeks after we published a paper

732
00:26:40,880 --> 00:26:43,679
the lapses attack group and

733
00:26:43,679 --> 00:26:45,840
compromised samsung servers and delete

734
00:26:45,840 --> 00:26:47,919
the entire git repo with all of the

735
00:26:47,919 --> 00:26:50,480
custom code

736
00:26:50,480 --> 00:26:52,640
so what was nice about it is that we

737
00:26:52,640 --> 00:26:54,799
could actually see on the ripple what

738
00:26:54,799 --> 00:26:56,159
was the code what the code looks like

739
00:26:56,159 --> 00:26:58,320
before and what does and what the

740
00:26:58,320 --> 00:27:00,240
commits they do to

741
00:27:00,240 --> 00:27:02,240
solve it so i don't think it's very easy

742
00:27:02,240 --> 00:27:03,520
to see but

743
00:27:03,520 --> 00:27:06,000
here um basically they they have a

744
00:27:06,000 --> 00:27:08,799
remark saying and this is key master ta

745
00:27:08,799 --> 00:27:10,720
i will use vulnerability

746
00:27:10,720 --> 00:27:12,880
do not allow at custom iv so basically

747
00:27:12,880 --> 00:27:14,080
there was a point where you can add

748
00:27:14,080 --> 00:27:16,799
custom admin that simply said return if

749
00:27:16,799 --> 00:27:17,919
it happens

750
00:27:17,919 --> 00:27:20,559
and the other code if the other

751
00:27:20,559 --> 00:27:22,559
as well the function called

752
00:27:22,559 --> 00:27:24,799
software get iv basically say okay this

753
00:27:24,799 --> 00:27:26,559
is the ever used vulnerability and they

754
00:27:26,559 --> 00:27:28,880
simply commented commented out the code

755
00:27:28,880 --> 00:27:30,640
that allowed me to set that field so

756
00:27:30,640 --> 00:27:31,679
this is

757
00:27:31,679 --> 00:27:32,720
um

758
00:27:32,720 --> 00:27:34,799
four lines where you just comment out

759
00:27:34,799 --> 00:27:36,080
there

760
00:27:36,080 --> 00:27:39,039
the software and this was solved

761
00:27:39,039 --> 00:27:42,240
and the second part um was the the code

762
00:27:42,240 --> 00:27:43,840
for the

763
00:27:43,840 --> 00:27:47,039
legacy club which basically said

764
00:27:47,039 --> 00:27:49,360
and we delete several

765
00:27:49,360 --> 00:27:50,320
code

766
00:27:50,320 --> 00:27:52,880
code lines and it was over

767
00:27:52,880 --> 00:27:54,159
um

768
00:27:54,159 --> 00:27:56,320
it's nice to see um

769
00:27:56,320 --> 00:27:57,760
this although it was a little bit

770
00:27:57,760 --> 00:27:59,679
frustrating for the student that

771
00:27:59,679 --> 00:28:01,840
if we waited for maybe one year it could

772
00:28:01,840 --> 00:28:03,440
have had this

773
00:28:03,440 --> 00:28:06,399
master degree in like two weeks of work

774
00:28:06,399 --> 00:28:07,840
um

775
00:28:07,840 --> 00:28:10,799
okay so what happened here

776
00:28:10,799 --> 00:28:12,880
um there are variety of low level

777
00:28:12,880 --> 00:28:14,799
cryptographic issues

778
00:28:14,799 --> 00:28:15,760
that

779
00:28:15,760 --> 00:28:18,399
simply are not best practice say in the

780
00:28:18,399 --> 00:28:20,720
very least we should never allow clients

781
00:28:20,720 --> 00:28:24,799
to set his own iv especially for um

782
00:28:24,799 --> 00:28:27,279
stream ciphertext and we should not

783
00:28:27,279 --> 00:28:29,440
allow clients to choose the encrypted

784
00:28:29,440 --> 00:28:31,520
version they will usually not choose the

785
00:28:31,520 --> 00:28:33,520
one that we want

786
00:28:33,520 --> 00:28:36,080
it is very important to not keep any

787
00:28:36,080 --> 00:28:37,919
latent code inside security critical

788
00:28:37,919 --> 00:28:39,840
application and this is something that

789
00:28:39,840 --> 00:28:41,120
comes up with

790
00:28:41,120 --> 00:28:42,640
many different attacks

791
00:28:42,640 --> 00:28:44,399
and another word thing we didn't talk

792
00:28:44,399 --> 00:28:45,840
about that encryption version was

793
00:28:45,840 --> 00:28:48,320
persistence across upgrades so classroom

794
00:28:48,320 --> 00:28:51,039
has um

795
00:28:51,360 --> 00:28:54,399
where you can upgrade the version of the

796
00:28:54,399 --> 00:28:56,159
keyblocks every time you upgrade the

797
00:28:56,159 --> 00:28:58,880
software version uh however if you

798
00:28:58,880 --> 00:29:01,120
started with the older version 15 you

799
00:29:01,120 --> 00:29:02,960
will never upgrade it to a new one we

800
00:29:02,960 --> 00:29:04,320
didn't

801
00:29:04,320 --> 00:29:05,440
we we talked with samsung with the

802
00:29:05,440 --> 00:29:07,200
pudendals then why they did it but said

803
00:29:07,200 --> 00:29:10,159
it was a feature not a bug

804
00:29:10,159 --> 00:29:11,760
and basically

805
00:29:11,760 --> 00:29:14,240
you should always use a unique iv or and

806
00:29:14,240 --> 00:29:17,200
preferably some misuse resistant um

807
00:29:17,200 --> 00:29:19,760
mode of operation and i mentioned the

808
00:29:19,760 --> 00:29:21,440
think library at some point and then i

809
00:29:21,440 --> 00:29:24,720
got i think sticker for that so i'm

810
00:29:24,720 --> 00:29:27,039
mentioning it again and you should not

811
00:29:27,039 --> 00:29:28,480
allow people to choose the encryption

812
00:29:28,480 --> 00:29:30,799
version and um

813
00:29:30,799 --> 00:29:32,480
basically always use the latest

814
00:29:32,480 --> 00:29:34,320
encryption version don't keep any latent

815
00:29:34,320 --> 00:29:35,520
code

816
00:29:35,520 --> 00:29:37,600
and one interesting thing here is what

817
00:29:37,600 --> 00:29:38,840
we call the gap

818
00:29:38,840 --> 00:29:40,960
incompatibility which means

819
00:29:40,960 --> 00:29:42,960
means that the catheter station that we

820
00:29:42,960 --> 00:29:45,360
had for example infidel protocol does

821
00:29:45,360 --> 00:29:46,960
not commit to the cryptographic method

822
00:29:46,960 --> 00:29:48,720
that was actually used for encryption

823
00:29:48,720 --> 00:29:50,480
the keys it was not even a word that

824
00:29:50,480 --> 00:29:52,880
there could be different uh ways and

825
00:29:52,880 --> 00:29:54,720
this is part of the problem when we have

826
00:29:54,720 --> 00:29:56,880
closed window-specific implementations

827
00:29:56,880 --> 00:29:58,960
we don't we are not able to even prove

828
00:29:58,960 --> 00:30:01,360
the parallel particles because we don't

829
00:30:01,360 --> 00:30:02,960
know what cryptographic primitives are

830
00:30:02,960 --> 00:30:05,520
actually used underneath this is a major

831
00:30:05,520 --> 00:30:08,320
security issue and we should use and

832
00:30:08,320 --> 00:30:10,799
basically we should include specifically

833
00:30:10,799 --> 00:30:13,039
here the encryption version but uh maybe

834
00:30:13,039 --> 00:30:15,279
if we have uniform open standard for

835
00:30:15,279 --> 00:30:17,360
example by google for android that we

836
00:30:17,360 --> 00:30:19,520
all we all know we can do we can try to

837
00:30:19,520 --> 00:30:20,960
actually formally

838
00:30:20,960 --> 00:30:23,520
verify improve and prove the

839
00:30:23,520 --> 00:30:25,919
protocols that we are using

840
00:30:25,919 --> 00:30:28,720
and there's actually

841
00:30:28,720 --> 00:30:30,399
maybe in the right direction

842
00:30:30,399 --> 00:30:32,960
where android try to reinvent its

843
00:30:32,960 --> 00:30:35,279
android station process and take

844
00:30:35,279 --> 00:30:37,840
and we made it standard

845
00:30:37,840 --> 00:30:39,679
but we don't have a lot of details yet

846
00:30:39,679 --> 00:30:41,840
so we need to see how it goes

847
00:30:41,840 --> 00:30:44,880
and in conclusion um

848
00:30:44,880 --> 00:30:46,559
a lot of different fragmented black box

849
00:30:46,559 --> 00:30:48,559
design leads to a lot of different

850
00:30:48,559 --> 00:30:50,640
problem we should open standard the

851
00:30:50,640 --> 00:30:53,919
design it is 2022 so maybe we should not

852
00:30:53,919 --> 00:30:55,679
be forced to keep yelling it out of

853
00:30:55,679 --> 00:30:57,760
rooftops but there is no security by

854
00:30:57,760 --> 00:31:00,880
obscurity we should open source critical

855
00:31:00,880 --> 00:31:03,440
code like this so we can have formally

856
00:31:03,440 --> 00:31:06,159
formal analysis or even manual analysis

857
00:31:06,159 --> 00:31:09,039
by independent researchers i think that

858
00:31:09,039 --> 00:31:10,799
very low hanging bars like this i've

859
00:31:10,799 --> 00:31:12,640
used would have been identified very

860
00:31:12,640 --> 00:31:14,399
very quickly if

861
00:31:14,399 --> 00:31:15,360
the

862
00:31:15,360 --> 00:31:17,120
code was released

863
00:31:17,120 --> 00:31:18,559
in the beginning

864
00:31:18,559 --> 00:31:20,880
and after decades of

865
00:31:20,880 --> 00:31:24,720
overuse attacks specifically in sdcm we

866
00:31:24,720 --> 00:31:27,600
should also strive to um

867
00:31:27,600 --> 00:31:29,200
find more misuse

868
00:31:29,200 --> 00:31:31,760
resistant variants and again we are

869
00:31:31,760 --> 00:31:33,200
going in the right direction but we need

870
00:31:33,200 --> 00:31:36,000
to go to maybe go a little bit faster

871
00:31:36,000 --> 00:31:37,679
that's it and i will be happy to answer

872
00:31:37,679 --> 00:31:39,600
any questions if we have the time and

873
00:31:39,600 --> 00:31:42,000
there's also a proof of concept and

874
00:31:42,000 --> 00:31:43,519
tools though if you have any of those

875
00:31:43,519 --> 00:31:45,279
devices rooted by itself you can

876
00:31:45,279 --> 00:31:47,279
actually play with it thank you

877
00:31:47,279 --> 00:31:49,279
thank you very much for your talk do we

878
00:31:49,279 --> 00:31:52,640
have any questions

879
00:31:54,159 --> 00:31:56,760
any questions from the audience we have

880
00:31:56,760 --> 00:32:00,159
a few minutes before the break

881
00:32:00,159 --> 00:32:01,840
yes yeah

882
00:32:01,840 --> 00:32:04,480
wait wait a second

883
00:32:06,240 --> 00:32:08,240
i i guess this is a small question but

884
00:32:08,240 --> 00:32:11,039
um did samsung comment on why

885
00:32:11,039 --> 00:32:12,880
custom iv was ever part of that

886
00:32:12,880 --> 00:32:15,600
interface was it used in the past in

887
00:32:15,600 --> 00:32:16,960
some

888
00:32:16,960 --> 00:32:19,519
acceptable way

889
00:32:19,519 --> 00:32:22,000
they didn't tell us and

890
00:32:22,000 --> 00:32:25,919
our conspiracy theory about it is that

891
00:32:25,919 --> 00:32:27,519
this is something that could be helpful

892
00:32:27,519 --> 00:32:29,919
for if you want to have um

893
00:32:29,919 --> 00:32:31,840
a deterministic unit test of your

894
00:32:31,840 --> 00:32:33,600
cryptographic library you want to be

895
00:32:33,600 --> 00:32:36,000
able to regenerate the same ciphertext

896
00:32:36,000 --> 00:32:37,600
so you need to be able to please use

897
00:32:37,600 --> 00:32:38,799
this iv

898
00:32:38,799 --> 00:32:40,960
and so here maybe

899
00:32:40,960 --> 00:32:43,919
testing was not good for security and i

900
00:32:43,919 --> 00:32:46,080
think that there are simple ways but i

901
00:32:46,080 --> 00:32:48,000
think we've seen in several places and

902
00:32:48,000 --> 00:32:48,799
this

903
00:32:48,799 --> 00:32:50,159
might be uh

904
00:32:50,159 --> 00:32:53,440
might be the motivation for that

905
00:32:54,080 --> 00:32:57,720
another quick question

906
00:32:58,000 --> 00:33:00,000
sorry i thought you raised your hand

907
00:33:00,000 --> 00:33:01,760
okay we can thank the speaker and also

908
00:33:01,760 --> 00:33:05,279
the two other speakers from the session

909
00:33:08,159 --> 00:33:13,480
we will resume in half an hour to 2 30.

910
00:33:44,640 --> 00:33:46,720
you

