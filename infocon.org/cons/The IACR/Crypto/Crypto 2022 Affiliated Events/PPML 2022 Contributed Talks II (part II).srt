1
00:00:23,359 --> 00:00:26,800
perfect so the next contributed talk

2
00:00:26,800 --> 00:00:30,720
is on multi-server covered learning and

3
00:00:30,720 --> 00:00:32,399
ruta will give the talk for us and

4
00:00:32,399 --> 00:00:34,800
that's generally work with justin a home

5
00:00:34,800 --> 00:00:38,879
grant thank you so much please go ahead

6
00:00:39,120 --> 00:00:40,800
okay actually okay

7
00:00:40,800 --> 00:00:43,760
sorry i okay yeah you can hear me um so

8
00:00:43,760 --> 00:00:47,200
i'll be presenting on a paper

9
00:00:47,200 --> 00:00:49,120
on multi-server covert learning this is

10
00:00:49,120 --> 00:00:52,320
joint work with justin holmgren

11
00:00:52,320 --> 00:00:53,600
oh

12
00:00:53,600 --> 00:00:56,600
yes

13
00:00:58,079 --> 00:00:58,960
okay

14
00:00:58,960 --> 00:01:01,840
um so a another perspective which we can

15
00:01:01,840 --> 00:01:05,119
take on a model stealing attack is we

16
00:01:05,119 --> 00:01:07,840
can consider that a client is attempting

17
00:01:07,840 --> 00:01:08,720
to

18
00:01:08,720 --> 00:01:11,200
learn a particular target function

19
00:01:11,200 --> 00:01:14,080
and so in this case um

20
00:01:14,080 --> 00:01:16,240
like in these in this kind of setting

21
00:01:16,240 --> 00:01:18,000
we'll consider specifically trying to

22
00:01:18,000 --> 00:01:20,000
learn boolean functions

23
00:01:20,000 --> 00:01:22,720
so now in this um

24
00:01:22,720 --> 00:01:25,840
one of the earliest models on

25
00:01:25,840 --> 00:01:29,680
learning like learners was this work on

26
00:01:29,680 --> 00:01:31,360
probabilistic approximately correct

27
00:01:31,360 --> 00:01:32,320
learning

28
00:01:32,320 --> 00:01:35,200
and in this model a client is attempting

29
00:01:35,200 --> 00:01:37,520
to learn a target boolean function in

30
00:01:37,520 --> 00:01:39,680
this case boolean function and does so

31
00:01:39,680 --> 00:01:40,799
using

32
00:01:40,799 --> 00:01:43,360
a table of random examples

33
00:01:43,360 --> 00:01:46,079
and its goal is to

34
00:01:46,079 --> 00:01:49,759
learn a function which is

35
00:01:49,759 --> 00:01:53,119
close in l1 distance to the target

36
00:01:53,119 --> 00:01:56,640
function with high probability

37
00:01:56,640 --> 00:01:58,880
and so a

38
00:01:58,880 --> 00:02:00,719
natural model to consider

39
00:02:00,719 --> 00:02:03,439
is a setting in which

40
00:02:03,439 --> 00:02:06,000
instead of having direct access to

41
00:02:06,000 --> 00:02:08,080
random examples you'll have oracle

42
00:02:08,080 --> 00:02:09,598
access to

43
00:02:09,598 --> 00:02:11,440
the target function

44
00:02:11,440 --> 00:02:14,640
and so you'll make queries x and receive

45
00:02:14,640 --> 00:02:18,560
some replies f of x

46
00:02:18,560 --> 00:02:20,800
and again in this model we'll have that

47
00:02:20,800 --> 00:02:23,520
the client should learn the learn a good

48
00:02:23,520 --> 00:02:26,959
approximation with high probability

49
00:02:26,959 --> 00:02:28,080
and so

50
00:02:28,080 --> 00:02:29,280
it's

51
00:02:29,280 --> 00:02:31,920
there's there are works that show that

52
00:02:31,920 --> 00:02:33,680
there are

53
00:02:33,680 --> 00:02:35,920
classes of functions which are learnable

54
00:02:35,920 --> 00:02:38,000
through queries but are not learnable

55
00:02:38,000 --> 00:02:40,000
through random examples

56
00:02:40,000 --> 00:02:42,879
and we'll see why this is useful like a

57
00:02:42,879 --> 00:02:44,800
few slides

58
00:02:44,800 --> 00:02:45,840
and so

59
00:02:45,840 --> 00:02:47,760
now what we will consider is we'll

60
00:02:47,760 --> 00:02:50,879
consider a setting in which the client

61
00:02:50,879 --> 00:02:53,280
does not have direct access to the

62
00:02:53,280 --> 00:02:54,640
target function

63
00:02:54,640 --> 00:02:56,640
and instead has

64
00:02:56,640 --> 00:02:58,879
uh intermediate there's an intermediary

65
00:02:58,879 --> 00:03:00,640
which is a server

66
00:03:00,640 --> 00:03:01,760
and

67
00:03:01,760 --> 00:03:03,519
this server was

68
00:03:03,519 --> 00:03:07,120
particularly is restricted to

69
00:03:07,120 --> 00:03:09,360
forwarding on queries from the client to

70
00:03:09,360 --> 00:03:11,840
the target function and forwarding back

71
00:03:11,840 --> 00:03:14,239
the replies from the target function

72
00:03:14,239 --> 00:03:16,159
back to the client

73
00:03:16,159 --> 00:03:17,040
and

74
00:03:17,040 --> 00:03:19,280
now that we consider this intermediary

75
00:03:19,280 --> 00:03:20,239
server

76
00:03:20,239 --> 00:03:22,879
yes first of course we must have that

77
00:03:22,879 --> 00:03:24,400
again the client should be able to learn

78
00:03:24,400 --> 00:03:26,159
something so our definition of learning

79
00:03:26,159 --> 00:03:27,760
is that the client should learn an

80
00:03:27,760 --> 00:03:30,159
approximation with good probability

81
00:03:30,159 --> 00:03:32,720
and this is the completeness of our

82
00:03:32,720 --> 00:03:34,000
definition

83
00:03:34,000 --> 00:03:35,840
but now that we have this intermediary

84
00:03:35,840 --> 00:03:37,280
server we can actually think about

85
00:03:37,280 --> 00:03:39,440
privacy in this setting

86
00:03:39,440 --> 00:03:40,319
so

87
00:03:40,319 --> 00:03:42,400
when we think about privacy

88
00:03:42,400 --> 00:03:44,640
we'll have that

89
00:03:44,640 --> 00:03:46,560
so the client's interaction with the

90
00:03:46,560 --> 00:03:47,519
server

91
00:03:47,519 --> 00:03:49,120
uh the server that we're thinking of

92
00:03:49,120 --> 00:03:51,760
specifically in this scenario is a semi

93
00:03:51,760 --> 00:03:53,200
honest server

94
00:03:53,200 --> 00:03:54,319
that is like

95
00:03:54,319 --> 00:03:55,920
observing these queries and attempting

96
00:03:55,920 --> 00:03:58,000
to learn more information such as

97
00:03:58,000 --> 00:04:00,560
information that alice might have a

98
00:04:00,560 --> 00:04:02,799
client might have specifically about the

99
00:04:02,799 --> 00:04:05,200
target function

100
00:04:05,200 --> 00:04:08,319
so what we say is that there

101
00:04:08,319 --> 00:04:09,840
in order to have privacy there must

102
00:04:09,840 --> 00:04:12,159
exist a simulator which behaves as both

103
00:04:12,159 --> 00:04:14,720
the client and target function

104
00:04:14,720 --> 00:04:16,478
and interacts with this semi on the

105
00:04:16,478 --> 00:04:19,680
server in such a way that this

106
00:04:19,680 --> 00:04:22,160
simulator is able to generate a

107
00:04:22,160 --> 00:04:25,040
transcript which is indistinguishable

108
00:04:25,040 --> 00:04:26,320
from the client and target

109
00:04:26,320 --> 00:04:28,639
functionality's transcript with the

110
00:04:28,639 --> 00:04:30,560
semi-honest server

111
00:04:30,560 --> 00:04:33,600
and in order to aid the simulator in

112
00:04:33,600 --> 00:04:35,919
this task the simulator is given a set

113
00:04:35,919 --> 00:04:37,840
of random examples

114
00:04:37,840 --> 00:04:40,800
and so this is particularly important

115
00:04:40,800 --> 00:04:43,280
because as we mentioned briefly in pac

116
00:04:43,280 --> 00:04:46,160
learning uh in pack learning we see

117
00:04:46,160 --> 00:04:48,000
random that

118
00:04:48,000 --> 00:04:51,520
the client is given random examples and

119
00:04:51,520 --> 00:04:53,520
there's a difference between being given

120
00:04:53,520 --> 00:04:55,919
random examples and having direct query

121
00:04:55,919 --> 00:04:57,199
access so

122
00:04:57,199 --> 00:04:58,400
if the

123
00:04:58,400 --> 00:05:00,720
semi-honest server just sees random

124
00:05:00,720 --> 00:05:02,639
examples or something which is

125
00:05:02,639 --> 00:05:04,960
indistinguishable from random examples

126
00:05:04,960 --> 00:05:07,440
then the semi-honor server shouldn't be

127
00:05:07,440 --> 00:05:08,960
able to learn anything more than what

128
00:05:08,960 --> 00:05:11,280
would be pac-learnable

129
00:05:11,280 --> 00:05:16,160
so leveraging like this uh gap between

130
00:05:16,160 --> 00:05:18,000
what is considered to be query learnable

131
00:05:18,000 --> 00:05:19,360
and

132
00:05:19,360 --> 00:05:21,919
pac-learnable is important in this line

133
00:05:21,919 --> 00:05:22,720
of

134
00:05:22,720 --> 00:05:25,520
work so this is uh this is the

135
00:05:25,520 --> 00:05:27,680
completeness and privacy uh properties

136
00:05:27,680 --> 00:05:29,919
belong to this definition called covert

137
00:05:29,919 --> 00:05:32,240
learning which um ari also mentioned in

138
00:05:32,240 --> 00:05:34,960
the previous talk

139
00:05:34,960 --> 00:05:37,440
so now we'll actually switch to a

140
00:05:37,440 --> 00:05:39,440
slightly different setting but quite a

141
00:05:39,440 --> 00:05:41,840
natural setting which is that instead of

142
00:05:41,840 --> 00:05:44,080
considering one server we'll consider

143
00:05:44,080 --> 00:05:46,000
that the client is interacting with

144
00:05:46,000 --> 00:05:48,080
multiple servers

145
00:05:48,080 --> 00:05:50,880
and in this setting the client is

146
00:05:50,880 --> 00:05:52,720
attempting to learn the is again

147
00:05:52,720 --> 00:05:54,639
attempting to learn the function a good

148
00:05:54,639 --> 00:05:56,720
approximation to the function with high

149
00:05:56,720 --> 00:05:59,199
probability

150
00:05:59,199 --> 00:06:01,680
and in the privacy setting we'll

151
00:06:01,680 --> 00:06:04,160
specifically consider the setting in

152
00:06:04,160 --> 00:06:08,240
which the k minus 1 out of k servers are

153
00:06:08,240 --> 00:06:09,840
semi honest

154
00:06:09,840 --> 00:06:10,720
and

155
00:06:10,720 --> 00:06:12,720
once again we'll say that there needs to

156
00:06:12,720 --> 00:06:15,199
exist the simulator which

157
00:06:15,199 --> 00:06:18,479
interacts with the k minus 1 out of k

158
00:06:18,479 --> 00:06:20,560
semi honest adversaries

159
00:06:20,560 --> 00:06:21,440
and

160
00:06:21,440 --> 00:06:23,440
is able to

161
00:06:23,440 --> 00:06:24,800
generate a transcript which is

162
00:06:24,800 --> 00:06:26,800
indistinguishable from the client's

163
00:06:26,800 --> 00:06:28,700
transcript

164
00:06:28,700 --> 00:06:30,080
[Music]

165
00:06:30,080 --> 00:06:33,199
so yeah so now that we've discussed this

166
00:06:33,199 --> 00:06:34,880
multi-server setting

167
00:06:34,880 --> 00:06:36,720
i'll briefly

168
00:06:36,720 --> 00:06:38,560
mention some previous

169
00:06:38,560 --> 00:06:40,400
work in this

170
00:06:40,400 --> 00:06:42,400
line of covert learning

171
00:06:42,400 --> 00:06:43,759
so

172
00:06:43,759 --> 00:06:46,479
there's this cryptographic sensing paper

173
00:06:46,479 --> 00:06:49,680
from 2019 which in the

174
00:06:49,680 --> 00:06:52,319
in the multi-server setting is

175
00:06:52,319 --> 00:06:55,759
shows under no assumptions that a client

176
00:06:55,759 --> 00:06:57,280
can learn

177
00:06:57,280 --> 00:06:59,120
olog and

178
00:06:59,120 --> 00:07:00,319
juntas

179
00:07:00,319 --> 00:07:02,400
and juntas here are

180
00:07:02,400 --> 00:07:05,280
functions that depend on a subset of the

181
00:07:05,280 --> 00:07:06,400
inputs

182
00:07:06,400 --> 00:07:09,360
so input bits so in this case it's o log

183
00:07:09,360 --> 00:07:12,240
n out of n input bits

184
00:07:12,240 --> 00:07:14,240
and so they are able to do this and

185
00:07:14,240 --> 00:07:17,360
achieve perfect privacy

186
00:07:17,360 --> 00:07:20,960
and a subsequent work specifically on

187
00:07:20,960 --> 00:07:24,000
covert learning by canadian karcher

188
00:07:24,000 --> 00:07:26,639
uh worked in the single server setting

189
00:07:26,639 --> 00:07:29,120
and showed under the lpn assumption

190
00:07:29,120 --> 00:07:31,360
that you can learn

191
00:07:31,360 --> 00:07:34,880
polynomial and size decision trees under

192
00:07:34,880 --> 00:07:37,280
and as because it's based on lpm they

193
00:07:37,280 --> 00:07:40,800
get computational privacy

194
00:07:40,800 --> 00:07:41,460
and

195
00:07:41,460 --> 00:07:42,720
[Music]

196
00:07:42,720 --> 00:07:45,199
in comparison our work is in the

197
00:07:45,199 --> 00:07:46,800
multi-server setting

198
00:07:46,800 --> 00:07:48,960
and under no assumptions is able to

199
00:07:48,960 --> 00:07:51,360
learn a larger class of functions

200
00:07:51,360 --> 00:07:53,199
which are the fourier sparse or fourier

201
00:07:53,199 --> 00:07:55,440
concentrated functions and fourier

202
00:07:55,440 --> 00:07:58,400
sparse functions are linear combinations

203
00:07:58,400 --> 00:08:00,400
of parity functions which we'll talk

204
00:08:00,400 --> 00:08:03,120
about in the next slide for the next few

205
00:08:03,120 --> 00:08:04,160
slides

206
00:08:04,160 --> 00:08:05,680
and

207
00:08:05,680 --> 00:08:07,840
since they are under no assumptions

208
00:08:07,840 --> 00:08:09,440
we'll get that there they have perfect

209
00:08:09,440 --> 00:08:12,440
privacy

210
00:08:12,560 --> 00:08:15,560
um

211
00:08:33,599 --> 00:08:36,240
so um

212
00:08:36,240 --> 00:08:38,000
so

213
00:08:38,000 --> 00:08:40,479
uh the main our main technique is

214
00:08:40,479 --> 00:08:42,958
actually based on the

215
00:08:42,958 --> 00:08:45,279
uh original fourier theoretic version of

216
00:08:45,279 --> 00:08:47,200
the gold fret 11 algorithm

217
00:08:47,200 --> 00:08:49,680
so this is importantly different than

218
00:08:49,680 --> 00:08:51,440
the later popularized version of the

219
00:08:51,440 --> 00:08:52,959
goldberg eleven algorithm which is

220
00:08:52,959 --> 00:08:56,080
taught in classrooms so we'll see

221
00:08:56,080 --> 00:08:56,800
the

222
00:08:56,800 --> 00:08:58,800
goldbach 11 algorithm in this form in

223
00:08:58,800 --> 00:09:00,800
later slides

224
00:09:00,800 --> 00:09:03,279
um so

225
00:09:03,600 --> 00:09:06,839
so just to sorry so just to give

226
00:09:06,839 --> 00:09:10,240
a brief explanation of the difference

227
00:09:10,240 --> 00:09:12,640
between fourier sparse functions and

228
00:09:12,640 --> 00:09:14,480
functions and decision trees as done in

229
00:09:14,480 --> 00:09:17,120
previous work

230
00:09:17,200 --> 00:09:20,320
so cryptographic science fencing paper

231
00:09:20,320 --> 00:09:22,800
worked on olog and quintas which are a

232
00:09:22,800 --> 00:09:25,440
subset of polynomial n size decision

233
00:09:25,440 --> 00:09:28,320
trees and as in the later work and the

234
00:09:28,320 --> 00:09:30,959
fourier sparse functions are a superset

235
00:09:30,959 --> 00:09:33,040
of both of these classes

236
00:09:33,040 --> 00:09:36,160
and to illustrate the difference like

237
00:09:36,160 --> 00:09:38,240
what types of functions we're able to

238
00:09:38,240 --> 00:09:39,360
learn

239
00:09:39,360 --> 00:09:41,040
that previous works have not been able

240
00:09:41,040 --> 00:09:43,760
to learn we'll look at an example which

241
00:09:43,760 --> 00:09:46,080
is the class of parodies

242
00:09:46,080 --> 00:09:48,080
and so parodies in this case

243
00:09:48,080 --> 00:09:53,600
are a um multiplication of a few um

244
00:09:53,600 --> 00:09:56,399
any set any subset of the inputs any

245
00:09:56,399 --> 00:09:58,240
subset of bits from the inputs

246
00:09:58,240 --> 00:10:00,240
um and so

247
00:10:00,240 --> 00:10:02,079
as you might guess that

248
00:10:02,079 --> 00:10:04,160
it has an overlap with o-log and niches

249
00:10:04,160 --> 00:10:06,160
in the particular case when the subset

250
00:10:06,160 --> 00:10:08,240
is o log n

251
00:10:08,240 --> 00:10:10,800
uh it's sized o log n

252
00:10:10,800 --> 00:10:13,200
and uh so

253
00:10:13,200 --> 00:10:14,160
let's

254
00:10:14,160 --> 00:10:15,279
consider

255
00:10:15,279 --> 00:10:17,519
in the two server setting how we might

256
00:10:17,519 --> 00:10:18,560
learn

257
00:10:18,560 --> 00:10:21,839
a parity an arbitrary parity

258
00:10:21,839 --> 00:10:23,279
so

259
00:10:23,279 --> 00:10:26,000
the client will send a uniform random

260
00:10:26,000 --> 00:10:28,880
string r to the first server

261
00:10:28,880 --> 00:10:31,040
and will then send

262
00:10:31,040 --> 00:10:33,519
a the same uniform random string with

263
00:10:33,519 --> 00:10:35,279
the first bit flipped to the second

264
00:10:35,279 --> 00:10:37,360
server

265
00:10:37,360 --> 00:10:39,440
and continuing on the client will then

266
00:10:39,440 --> 00:10:41,279
send r prime to the first server and

267
00:10:41,279 --> 00:10:43,279
then r prime with the second bit flipped

268
00:10:43,279 --> 00:10:46,000
to the second server and continue on

269
00:10:46,000 --> 00:10:47,680
flipping the third bit flipping the

270
00:10:47,680 --> 00:10:49,600
fourth bit and so on

271
00:10:49,600 --> 00:10:52,959
and here we'll just note that since each

272
00:10:52,959 --> 00:10:56,079
server's view is actually that they see

273
00:10:56,079 --> 00:10:58,720
completely uniform random queries

274
00:10:58,720 --> 00:11:01,360
and as such is not like in the setting

275
00:11:01,360 --> 00:11:03,040
which we have um

276
00:11:03,040 --> 00:11:05,760
one out of two semi honest

277
00:11:05,760 --> 00:11:06,800
servers

278
00:11:06,800 --> 00:11:09,839
they it will be perfectly private

279
00:11:09,839 --> 00:11:11,839
and so now we'll discuss how does the

280
00:11:11,839 --> 00:11:14,000
client actually learn the parity given

281
00:11:14,000 --> 00:11:17,279
the answers to these queries

282
00:11:17,279 --> 00:11:20,720
so if the if the answer to the query r

283
00:11:20,720 --> 00:11:22,320
is different from the answer to the

284
00:11:22,320 --> 00:11:24,720
query r with the first bit flipped then

285
00:11:24,720 --> 00:11:27,040
the address then the um

286
00:11:27,040 --> 00:11:29,600
and the client is able to note that the

287
00:11:29,600 --> 00:11:31,600
first bit is important to the parity so

288
00:11:31,600 --> 00:11:34,560
it's included in the subset of bits that

289
00:11:34,560 --> 00:11:36,800
are multiplied

290
00:11:36,800 --> 00:11:39,279
and so uh again the client can do this

291
00:11:39,279 --> 00:11:42,640
for all the remaining bits and learn the

292
00:11:42,640 --> 00:11:45,839
entire parity function

293
00:11:45,839 --> 00:11:47,760
okay so

294
00:11:47,760 --> 00:11:50,639
so now i have explained how to learn one

295
00:11:50,639 --> 00:11:52,639
parity but i mentioned that fourier

296
00:11:52,639 --> 00:11:54,079
sparse functions are a linear

297
00:11:54,079 --> 00:11:59,040
combination of a few parity functions

298
00:11:59,040 --> 00:12:00,160
and so

299
00:12:00,160 --> 00:12:01,360
now we have to

300
00:12:01,360 --> 00:12:02,560
extend this

301
00:12:02,560 --> 00:12:05,200
idea to the like

302
00:12:05,200 --> 00:12:07,760
fourier sparse functions so in order to

303
00:12:07,760 --> 00:12:10,639
do this i'll first introduce some

304
00:12:10,639 --> 00:12:12,320
fourier analysis

305
00:12:12,320 --> 00:12:14,240
definitions

306
00:12:14,240 --> 00:12:15,200
so

307
00:12:15,200 --> 00:12:17,120
uh if we're considering functions that

308
00:12:17,120 --> 00:12:19,200
specifically operate from one negative

309
00:12:19,200 --> 00:12:21,920
one to the n to one negative one

310
00:12:21,920 --> 00:12:25,120
then we'll define a fourier basis which

311
00:12:25,120 --> 00:12:27,680
is just exactly these parity functions

312
00:12:27,680 --> 00:12:30,320
that we mentioned earlier

313
00:12:30,320 --> 00:12:31,839
and then

314
00:12:31,839 --> 00:12:33,600
now we can represent this function in

315
00:12:33,600 --> 00:12:35,120
terms of its fourier in terms of the

316
00:12:35,120 --> 00:12:36,560
fourier basis

317
00:12:36,560 --> 00:12:37,519
and

318
00:12:37,519 --> 00:12:39,760
we'll call this fourier decomposition

319
00:12:39,760 --> 00:12:42,079
and here the constants associated with

320
00:12:42,079 --> 00:12:44,639
each parity function we call them uh

321
00:12:44,639 --> 00:12:46,560
fourier coefficients and importantly

322
00:12:46,560 --> 00:12:49,680
they can be calculated in like as an

323
00:12:49,680 --> 00:12:51,040
expectation

324
00:12:51,040 --> 00:12:55,200
of the function value on the input and

325
00:12:55,200 --> 00:12:57,040
the specific parity function with the

326
00:12:57,040 --> 00:12:58,560
set that you're attempting to compute

327
00:12:58,560 --> 00:13:00,720
the coefficient for

328
00:13:00,720 --> 00:13:01,760
so

329
00:13:01,760 --> 00:13:05,120
using this information we'll say that

330
00:13:05,120 --> 00:13:08,639
well one way that we can actually

331
00:13:08,639 --> 00:13:11,040
get an exact

332
00:13:11,040 --> 00:13:12,320
and

333
00:13:12,320 --> 00:13:13,920
that we can exactly compute our function

334
00:13:13,920 --> 00:13:16,000
f is that if we were able to exactly

335
00:13:16,000 --> 00:13:18,320
compute all the fourier coefficients so

336
00:13:18,320 --> 00:13:19,519
clearly we must have a good

337
00:13:19,519 --> 00:13:21,279
approximation if we can approximate all

338
00:13:21,279 --> 00:13:23,680
fourier coefficients so if we attempt to

339
00:13:23,680 --> 00:13:25,519
do this and find all fourier

340
00:13:25,519 --> 00:13:28,000
coefficients for every single set

341
00:13:28,000 --> 00:13:29,600
and here we'll represent just to

342
00:13:29,600 --> 00:13:31,120
understand will represent the set as a

343
00:13:31,120 --> 00:13:33,600
binary string and where the 1 indicates

344
00:13:33,600 --> 00:13:34,959
whether the

345
00:13:34,959 --> 00:13:37,680
element is included in the set or not

346
00:13:37,680 --> 00:13:39,440
so then in this case we'll notice well

347
00:13:39,440 --> 00:13:41,199
we have to evaluate it for every single

348
00:13:41,199 --> 00:13:43,600
binary string and this will lead to an

349
00:13:43,600 --> 00:13:46,639
exponential runtime

350
00:13:46,839 --> 00:13:47,920
so uh

351
00:13:47,920 --> 00:13:50,399
well in order to actually figure out

352
00:13:50,399 --> 00:13:52,560
what to do from here let's actually look

353
00:13:52,560 --> 00:13:54,800
back at our fourier decomposition

354
00:13:54,800 --> 00:13:57,680
and we'll introduce this uh terminology

355
00:13:57,680 --> 00:14:00,079
which will become a clearer to see why

356
00:14:00,079 --> 00:14:01,120
later

357
00:14:01,120 --> 00:14:02,959
called a fourier weight which is just

358
00:14:02,959 --> 00:14:05,680
the fourier coefficient squared

359
00:14:05,680 --> 00:14:07,680
and so now we can actually look at our

360
00:14:07,680 --> 00:14:10,480
fourier decomposition in terms of

361
00:14:10,480 --> 00:14:12,639
terms in which the

362
00:14:12,639 --> 00:14:15,760
fourier weight is heavy so the

363
00:14:15,760 --> 00:14:17,199
fourier coefficient squared is

364
00:14:17,199 --> 00:14:19,839
sufficiently large and the terms for

365
00:14:19,839 --> 00:14:22,240
which the four-way coefficient squared

366
00:14:22,240 --> 00:14:24,000
is

367
00:14:24,000 --> 00:14:25,199
smaller

368
00:14:25,199 --> 00:14:28,560
and by dividing it up into these two

369
00:14:28,560 --> 00:14:30,880
groups we can actually

370
00:14:30,880 --> 00:14:33,279
do the following which is that we can

371
00:14:33,279 --> 00:14:35,600
get a good approximation if we just drop

372
00:14:35,600 --> 00:14:38,399
all of the light fourier weight terms

373
00:14:38,399 --> 00:14:40,639
since uh the heavy weighted fourier

374
00:14:40,639 --> 00:14:42,480
terms have a much larger influence of

375
00:14:42,480 --> 00:14:45,360
how the function behaves

376
00:14:45,360 --> 00:14:48,399
and so now this is actually the crux of

377
00:14:48,399 --> 00:14:50,720
the covert learning algorithm

378
00:14:50,720 --> 00:14:53,440
is that we will find all heavy fourier

379
00:14:53,440 --> 00:14:55,760
weights

380
00:14:56,000 --> 00:14:56,839
so

381
00:14:56,839 --> 00:14:59,839
now uh in order to find all heavy

382
00:14:59,839 --> 00:15:01,199
fourier weights

383
00:15:01,199 --> 00:15:04,800
we'll uh end up needing to use a little

384
00:15:04,800 --> 00:15:06,000
bit of a

385
00:15:06,000 --> 00:15:07,519
sorry

386
00:15:07,519 --> 00:15:09,040
a little bit of a

387
00:15:09,040 --> 00:15:12,240
trick which is that we'll consider the

388
00:15:12,240 --> 00:15:14,399
tree of all

389
00:15:14,399 --> 00:15:16,000
set prefixes

390
00:15:16,000 --> 00:15:17,920
so we'll consider all sets that have the

391
00:15:17,920 --> 00:15:19,760
prefix zero all sets that have the

392
00:15:19,760 --> 00:15:21,120
prefix one

393
00:15:21,120 --> 00:15:23,600
zero zero zero one and so on

394
00:15:23,600 --> 00:15:26,399
and now what we'll end up doing is that

395
00:15:26,399 --> 00:15:29,120
we will prune prefixes that have a light

396
00:15:29,120 --> 00:15:31,040
fourier weight

397
00:15:31,040 --> 00:15:32,639
and what this will do is they'll

398
00:15:32,639 --> 00:15:34,079
actually eliminate

399
00:15:34,079 --> 00:15:37,360
the entire rest of the this tree

400
00:15:37,360 --> 00:15:38,639
starting at this

401
00:15:38,639 --> 00:15:40,880
prefix so we'll eliminate every single

402
00:15:40,880 --> 00:15:43,920
set that has the prefix one

403
00:15:43,920 --> 00:15:48,160
so now uh just to reiterate this i'll

404
00:15:48,160 --> 00:15:49,680
explain by

405
00:15:49,680 --> 00:15:51,680
uh another way which is this is actually

406
00:15:51,680 --> 00:15:54,399
the gold rec11 algorithm and so we start

407
00:15:54,399 --> 00:15:57,120
with all sets in one bucket

408
00:15:57,120 --> 00:16:00,639
and what we'll do is we'll split uh each

409
00:16:00,639 --> 00:16:02,560
uh we'll split the each bucket into two

410
00:16:02,560 --> 00:16:03,440
different

411
00:16:03,440 --> 00:16:06,320
buckets where we'll fix the prefix so in

412
00:16:06,320 --> 00:16:08,399
this case we'll split the set of

413
00:16:08,399 --> 00:16:09,199
all

414
00:16:09,199 --> 00:16:11,759
uh the bucket of all steps into all sets

415
00:16:11,759 --> 00:16:13,759
that have the prefix zero and all sets

416
00:16:13,759 --> 00:16:16,240
that have the prefix one

417
00:16:16,240 --> 00:16:17,920
then we'll weigh each bucket according

418
00:16:17,920 --> 00:16:20,399
to the fourier weight and

419
00:16:20,399 --> 00:16:22,320
in this case since we're using the

420
00:16:22,320 --> 00:16:24,720
squared term we're we're better able to

421
00:16:24,720 --> 00:16:26,959
uh compute the

422
00:16:26,959 --> 00:16:27,759
uh

423
00:16:27,759 --> 00:16:29,600
we're better able to get so since the

424
00:16:29,600 --> 00:16:31,279
fourier weight uh fourier coefficient

425
00:16:31,279 --> 00:16:33,360
can be negative we'll get even the

426
00:16:33,360 --> 00:16:36,880
largely negative terms included and

427
00:16:36,880 --> 00:16:39,040
we'll keep only these heavy buckets

428
00:16:39,040 --> 00:16:41,120
and using these heavy buckets will

429
00:16:41,120 --> 00:16:43,199
recurse and repeat until we're finally

430
00:16:43,199 --> 00:16:44,959
left with a collection of sets for which

431
00:16:44,959 --> 00:16:48,160
the fourier weight is heavy

432
00:16:48,160 --> 00:16:51,040
and so uh in order to get a sense of how

433
00:16:51,040 --> 00:16:52,079
to do this

434
00:16:52,079 --> 00:16:55,040
uh recall that if we just uh

435
00:16:55,040 --> 00:16:58,639
like naively attempt to compute uh

436
00:16:58,639 --> 00:17:00,320
all sets with a certain the weight of

437
00:17:00,320 --> 00:17:02,480
all sets with a certain prefix that will

438
00:17:02,480 --> 00:17:04,400
again end up having this exponential

439
00:17:04,400 --> 00:17:07,119
runtime problem so

440
00:17:07,119 --> 00:17:09,280
luckily for us there is a nice efficient

441
00:17:09,280 --> 00:17:13,359
way to compute the weight of a bucket

442
00:17:13,359 --> 00:17:15,520
using more fourier analysis

443
00:17:15,520 --> 00:17:17,439
which is that the weight of the bucket

444
00:17:17,439 --> 00:17:19,839
can actually be computed as a another

445
00:17:19,839 --> 00:17:22,400
expectation which is

446
00:17:22,400 --> 00:17:25,439
um correlated queries to the function

447
00:17:25,439 --> 00:17:27,919
and so the correlation is specifically

448
00:17:27,919 --> 00:17:29,840
that the first part of your query will

449
00:17:29,840 --> 00:17:32,320
be uniformly random to both of these

450
00:17:32,320 --> 00:17:35,600
queries and the second part is the same

451
00:17:35,600 --> 00:17:37,120
and so

452
00:17:37,120 --> 00:17:38,559
we'll see that

453
00:17:38,559 --> 00:17:40,240
in our algorithm itself we'll just

454
00:17:40,240 --> 00:17:42,320
compute an estimation of this

455
00:17:42,320 --> 00:17:44,240
but now that we have this correlated

456
00:17:44,240 --> 00:17:47,280
query idea this is actually sounds

457
00:17:47,280 --> 00:17:50,640
pretty similar to the parity uh example

458
00:17:50,640 --> 00:17:52,640
that i gave earlier in that what the

459
00:17:52,640 --> 00:17:56,559
client will do is simply split these

460
00:17:56,559 --> 00:17:58,400
two correlated queries across the two

461
00:17:58,400 --> 00:18:00,880
servers so one server will end up seeing

462
00:18:00,880 --> 00:18:03,039
uniform random for the first part and

463
00:18:03,039 --> 00:18:03,760
then

464
00:18:03,760 --> 00:18:05,440
the correlated part for the second but

465
00:18:05,440 --> 00:18:07,440
since that correlated part is uniform

466
00:18:07,440 --> 00:18:09,840
random in and of itself each server will

467
00:18:09,840 --> 00:18:12,799
end up seeing uniform randomness so it

468
00:18:12,799 --> 00:18:15,440
is again secure or private against one

469
00:18:15,440 --> 00:18:19,440
other two semi-honest servers

470
00:18:19,520 --> 00:18:22,000
okay so yeah this is almost the

471
00:18:22,000 --> 00:18:24,080
conclusion which is that like you can

472
00:18:24,080 --> 00:18:25,679
extend this to the multi-server setting

473
00:18:25,679 --> 00:18:28,240
if you consider like the last part being

474
00:18:28,240 --> 00:18:31,600
an xor and if the xor is equal to zero

475
00:18:31,600 --> 00:18:32,400
then

476
00:18:32,400 --> 00:18:33,840
uh

477
00:18:33,840 --> 00:18:35,120
that's the correlation that you need to

478
00:18:35,120 --> 00:18:37,280
induce for this to proceed to go through

479
00:18:37,280 --> 00:18:39,520
from the multi-server setting

480
00:18:39,520 --> 00:18:41,360
and the first part is again uniformly

481
00:18:41,360 --> 00:18:42,400
random

482
00:18:42,400 --> 00:18:44,960
and uh yes that's the main idea so thank

483
00:18:44,960 --> 00:18:47,039
you and the paper will be available soon

484
00:18:47,039 --> 00:18:48,160
thank you so much

485
00:18:48,160 --> 00:18:50,400
thanks

486
00:18:51,520 --> 00:18:53,120
so unfortunately i think we have to take

487
00:18:53,120 --> 00:18:55,200
the questions offline for the interest

488
00:18:55,200 --> 00:18:58,400
of time but thank you so much

489
00:19:00,720 --> 00:19:03,039
so the next speaker completes

490
00:19:03,039 --> 00:19:06,039
hello

491
00:19:52,559 --> 00:19:54,639
you

