1
00:00:25,519 --> 00:00:26,480
okay

2
00:00:26,480 --> 00:00:29,760
so the next speaker of today

3
00:00:29,760 --> 00:00:31,920
is hanjin who's going to tell us about

4
00:00:31,920 --> 00:00:33,920
learner secure single server aggregation

5
00:00:33,920 --> 00:00:36,160
via key homomorphic masking doing work

6
00:00:36,160 --> 00:00:38,559
with huge lim antigone and it's the

7
00:00:38,559 --> 00:00:39,520
parts

8
00:00:39,520 --> 00:00:42,160
yeah thanks for the introduction yeah as

9
00:00:42,160 --> 00:00:43,840
he said uh it's a joint work with

10
00:00:43,840 --> 00:00:46,399
virtual and technically unstable

11
00:00:46,399 --> 00:00:47,280
uh

12
00:00:47,280 --> 00:00:49,920
okay so in our problem setting uh we

13
00:00:49,920 --> 00:00:51,840
consider amp clients and the single

14
00:00:51,840 --> 00:00:54,320
server where the clients only talk to

15
00:00:54,320 --> 00:00:56,960
the server but not among themselves

16
00:00:56,960 --> 00:00:59,359
the goal is for the server to securely

17
00:00:59,359 --> 00:01:02,239
compute the sum of the client's inputs

18
00:01:02,239 --> 00:01:04,559
mod some modulus p

19
00:01:04,559 --> 00:01:06,720
but without learning any further

20
00:01:06,720 --> 00:01:09,439
information of individual inputs

21
00:01:09,439 --> 00:01:11,760
so in our setting we consider two types

22
00:01:11,760 --> 00:01:14,159
of machine failures and in the first

23
00:01:14,159 --> 00:01:15,200
type

24
00:01:15,200 --> 00:01:17,840
there are up to delta fraction of the

25
00:01:17,840 --> 00:01:20,479
clients that may drop auto may drop out

26
00:01:20,479 --> 00:01:21,520
of the

27
00:01:21,520 --> 00:01:23,520
aggregation session

28
00:01:23,520 --> 00:01:25,759
in the second type a malicious

29
00:01:25,759 --> 00:01:29,040
anniversary may corrupt up to gamma uh

30
00:01:29,040 --> 00:01:32,159
fraction of the clients plus the server

31
00:01:32,159 --> 00:01:34,799
and our malicious correctness guarantee

32
00:01:34,799 --> 00:01:37,840
says that as long as delta and gamma are

33
00:01:37,840 --> 00:01:39,200
not too large

34
00:01:39,200 --> 00:01:41,200
and if the server is the honest

35
00:01:41,200 --> 00:01:43,520
then he can correctly compute the

36
00:01:43,520 --> 00:01:45,840
aggregation result despite the dropping

37
00:01:45,840 --> 00:01:48,799
out and the corrupt profit crimes

38
00:01:48,799 --> 00:01:51,439
if the server is also corrupted then the

39
00:01:51,439 --> 00:01:53,920
privacy guarantee says that the server

40
00:01:53,920 --> 00:01:55,920
does not learn anything about

41
00:01:55,920 --> 00:01:58,960
each honest client input beyond their

42
00:01:58,960 --> 00:02:00,479
sum

43
00:02:00,479 --> 00:02:02,880
and the secure aggregation as we have

44
00:02:02,880 --> 00:02:05,520
seen today has many applications

45
00:02:05,520 --> 00:02:07,759
including aggregating statistics of

46
00:02:07,759 --> 00:02:10,479
sensitive customer data and it can be

47
00:02:10,479 --> 00:02:13,520
used for secure federated the machine

48
00:02:13,520 --> 00:02:16,319
learning where each client

49
00:02:16,319 --> 00:02:18,879
locally may have computed some model

50
00:02:18,879 --> 00:02:21,680
updates which are sensitive we want the

51
00:02:21,680 --> 00:02:23,680
server to only learn the aggregated

52
00:02:23,680 --> 00:02:28,000
updates instead of into individual ones

53
00:02:28,400 --> 00:02:31,599
in our scenario we further focus on

54
00:02:31,599 --> 00:02:34,080
the case where a single server

55
00:02:34,080 --> 00:02:36,879
runs multiple aggregation integrations

56
00:02:36,879 --> 00:02:38,319
uh

57
00:02:38,319 --> 00:02:40,480
with the same set of kinds with a

58
00:02:40,480 --> 00:02:42,319
reusable setup

59
00:02:42,319 --> 00:02:46,160
since the setup cost is advertised over

60
00:02:46,160 --> 00:02:48,640
many online iterations we focus mainly

61
00:02:48,640 --> 00:02:51,120
on the online efficiency which includes

62
00:02:51,120 --> 00:02:53,920
three aspects around complexity

63
00:02:53,920 --> 00:02:57,760
communication sites and computation time

64
00:02:57,760 --> 00:03:00,480
note that there are existing generic and

65
00:03:00,480 --> 00:03:03,280
pc solutions that consider similar

66
00:03:03,280 --> 00:03:06,400
settings to ours for example the fluid

67
00:03:06,400 --> 00:03:07,920
fluid npc

68
00:03:07,920 --> 00:03:09,760
the mice protocol

69
00:03:09,760 --> 00:03:12,720
is you only speak once mpc model and the

70
00:03:12,720 --> 00:03:15,680
phoenix protocol they all consider the

71
00:03:15,680 --> 00:03:17,680
setting where

72
00:03:17,680 --> 00:03:20,159
some of the participants may drop out

73
00:03:20,159 --> 00:03:22,080
during the protocol execution and

74
00:03:22,080 --> 00:03:24,080
redrawing at a later point

75
00:03:24,080 --> 00:03:26,400
there are also npc protocols in this

76
00:03:26,400 --> 00:03:29,200
so-called one path setting where the

77
00:03:29,200 --> 00:03:31,760
only allowed communication is between a

78
00:03:31,760 --> 00:03:33,200
single server

79
00:03:33,200 --> 00:03:36,080
and every single client

80
00:03:36,080 --> 00:03:38,560
but once only once

81
00:03:38,560 --> 00:03:41,680
our protocol is not a generic solution

82
00:03:41,680 --> 00:03:44,400
is tailored to secure aggregation in

83
00:03:44,400 --> 00:03:47,680
order to achieve better efficiency

84
00:03:47,680 --> 00:03:50,239
uh okay next i'll compare with

85
00:03:50,239 --> 00:03:53,280
uh existing secure navigation protocols

86
00:03:53,280 --> 00:03:55,200
in the single server setting

87
00:03:55,200 --> 00:03:57,920
that are also maliciously secure first

88
00:03:57,920 --> 00:04:00,480
is the google's protocol when

89
00:04:00,480 --> 00:04:02,879
ported to when considered in this

90
00:04:02,879 --> 00:04:05,120
scenario where we run multiple

91
00:04:05,120 --> 00:04:07,840
iterations it has four online routes per

92
00:04:07,840 --> 00:04:10,239
iteration and

93
00:04:10,239 --> 00:04:12,159
the main drawback of this protocol is

94
00:04:12,159 --> 00:04:14,879
that it has a m square

95
00:04:14,879 --> 00:04:17,680
overheads in both communication and

96
00:04:17,680 --> 00:04:19,440
computation

97
00:04:19,440 --> 00:04:22,000
next is the very recent work macrophage

98
00:04:22,000 --> 00:04:25,120
ml which improves the above

99
00:04:25,120 --> 00:04:27,840
to have only three online rounds

100
00:04:27,840 --> 00:04:30,479
but the one of these drawbacks is that

101
00:04:30,479 --> 00:04:32,240
the server needs to compute discrete

102
00:04:32,240 --> 00:04:34,800
logarithm to recover the result in the

103
00:04:34,800 --> 00:04:35,680
clear

104
00:04:35,680 --> 00:04:38,000
this restricts the protocol to be only

105
00:04:38,000 --> 00:04:39,759
applicable

106
00:04:39,759 --> 00:04:40,479
for

107
00:04:40,479 --> 00:04:43,759
when input domains are really small

108
00:04:43,759 --> 00:04:46,320
in comparison our work first of all it

109
00:04:46,320 --> 00:04:47,759
avoids the

110
00:04:47,759 --> 00:04:50,240
m square overhead it also has three

111
00:04:50,240 --> 00:04:53,199
online rounds like microphone and l

112
00:04:53,199 --> 00:04:55,759
but our server computation is also very

113
00:04:55,759 --> 00:04:58,560
efficient in particular it does not

114
00:04:58,560 --> 00:05:01,280
compute discrete logarithm and it works

115
00:05:01,280 --> 00:05:04,560
for any large input domain

116
00:05:04,560 --> 00:05:08,960
finally the work of bbg20 applies a

117
00:05:08,960 --> 00:05:11,360
optimization to the google protocol in

118
00:05:11,360 --> 00:05:14,560
order to avoid the m square overhead

119
00:05:14,560 --> 00:05:17,280
but as a result of this optimization

120
00:05:17,280 --> 00:05:20,080
they achieve a weaker malicious privacy

121
00:05:20,080 --> 00:05:21,919
guarantee

122
00:05:21,919 --> 00:05:24,720
the macro fat ml also includes

123
00:05:24,720 --> 00:05:26,080
another version

124
00:05:26,080 --> 00:05:26,960
which

125
00:05:26,960 --> 00:05:28,800
uses a similar

126
00:05:28,800 --> 00:05:30,160
optimization

127
00:05:30,160 --> 00:05:32,160
and it also encourages the weaker

128
00:05:32,160 --> 00:05:34,400
security

129
00:05:34,400 --> 00:05:37,520
this concludes my comparison with

130
00:05:37,520 --> 00:05:38,880
related works

131
00:05:38,880 --> 00:05:41,759
next i will give you an overview of our

132
00:05:41,759 --> 00:05:43,120
protocol

133
00:05:43,120 --> 00:05:45,919
which consists mainly of two

134
00:05:45,919 --> 00:05:48,479
technical tools the first is what we

135
00:05:48,479 --> 00:05:51,280
call a keyhole workflow masking scheme

136
00:05:51,280 --> 00:05:53,039
and the second is the linear secret

137
00:05:53,039 --> 00:05:55,520
sharing scheme that that's compatible

138
00:05:55,520 --> 00:05:57,520
with the masking skin

139
00:05:57,520 --> 00:05:59,039
but for the

140
00:05:59,039 --> 00:06:01,600
the simplified the overview we can just

141
00:06:01,600 --> 00:06:04,960
think chamier distribution

142
00:06:04,960 --> 00:06:07,440
uh so the key homomorphic masking scheme

143
00:06:07,440 --> 00:06:10,400
has the following syntax where the mask

144
00:06:10,400 --> 00:06:11,520
algorithm

145
00:06:11,520 --> 00:06:14,560
takes a key and the tag and the message

146
00:06:14,560 --> 00:06:18,080
in zp it computes this c star

147
00:06:18,080 --> 00:06:20,880
which we call the masked message

148
00:06:20,880 --> 00:06:23,440
we require the decryption algorithm to

149
00:06:23,440 --> 00:06:26,560
be very simple which takes c star and

150
00:06:26,560 --> 00:06:29,360
the corresponding anti-mask to recover

151
00:06:29,360 --> 00:06:31,039
the message x

152
00:06:31,039 --> 00:06:33,520
and keep on moving says that we can

153
00:06:33,520 --> 00:06:35,199
evaluate

154
00:06:35,199 --> 00:06:37,840
a linear function over the mask

155
00:06:37,840 --> 00:06:39,919
so that it will translate to evaluating

156
00:06:39,919 --> 00:06:42,240
the same linear function over the keys

157
00:06:42,240 --> 00:06:43,840
and the messages

158
00:06:43,840 --> 00:06:47,039
and i will use this boxed notation to

159
00:06:47,039 --> 00:06:50,160
emphasize homomorphic evaluation

160
00:06:50,160 --> 00:06:53,440
uh in our protocol each client will will

161
00:06:53,440 --> 00:06:57,440
reuse a secret masking key but at every

162
00:06:57,440 --> 00:06:59,919
iteration they will simple flash text to

163
00:06:59,919 --> 00:07:02,960
generate flash masks and the scheme the

164
00:07:02,960 --> 00:07:05,280
security of the scheme is a standard

165
00:07:05,280 --> 00:07:07,440
semantic security

166
00:07:07,440 --> 00:07:10,720
okay uh with this masking scheme i can

167
00:07:10,720 --> 00:07:13,440
now sketch our semi honest protocol

168
00:07:13,440 --> 00:07:15,199
which in the first

169
00:07:15,199 --> 00:07:16,960
one-time setup phase

170
00:07:16,960 --> 00:07:20,240
every client samples a masking key ki

171
00:07:20,240 --> 00:07:22,960
and sql shares them and they distribute

172
00:07:22,960 --> 00:07:25,840
the shares through the server

173
00:07:25,840 --> 00:07:29,360
next in every online iteration key

174
00:07:29,360 --> 00:07:31,360
the client first computes uh the

175
00:07:31,360 --> 00:07:34,479
masculine message c starts off by using

176
00:07:34,479 --> 00:07:37,360
a common tactile that's derived

177
00:07:37,360 --> 00:07:40,240
using a random oracle h applied to the

178
00:07:40,240 --> 00:07:43,120
iteration number t

179
00:07:43,120 --> 00:07:44,639
the clients send this

180
00:07:44,639 --> 00:07:47,039
mask message the server and the server

181
00:07:47,039 --> 00:07:49,360
replies with the set of online projects

182
00:07:49,360 --> 00:07:50,400
u

183
00:07:50,400 --> 00:07:53,360
next each client will locally compute

184
00:07:53,360 --> 00:07:56,000
the sum of the keys and use the sum to

185
00:07:56,000 --> 00:08:00,560
compute an empty mask c sub j

186
00:08:00,560 --> 00:08:02,400
and send this to the server the server

187
00:08:02,400 --> 00:08:04,639
now can homomorphically evaluate the

188
00:08:04,639 --> 00:08:07,440
sequential reconstruction algorithm

189
00:08:07,440 --> 00:08:10,000
over the empty mask c subjects to

190
00:08:10,000 --> 00:08:12,639
compute c sub u which by keep

191
00:08:12,639 --> 00:08:16,240
homomorphism equals to an empty mask

192
00:08:16,240 --> 00:08:19,680
over the key k sub u which is the sum of

193
00:08:19,680 --> 00:08:21,199
the plane

194
00:08:21,199 --> 00:08:22,800
masking keys

195
00:08:22,800 --> 00:08:25,599
next the server homographically songs

196
00:08:25,599 --> 00:08:28,400
over the masked messages

197
00:08:28,400 --> 00:08:30,000
and then applies the decryption

198
00:08:30,000 --> 00:08:31,840
algorithm to recover the recovery

199
00:08:31,840 --> 00:08:34,159
results

200
00:08:34,159 --> 00:08:35,679
okay that's the

201
00:08:35,679 --> 00:08:38,080
high level protocol

202
00:08:38,080 --> 00:08:40,559
next i'll give the first concrete

203
00:08:40,559 --> 00:08:44,399
instantiation under the lwr assumption

204
00:08:44,399 --> 00:08:46,480
the assumption says that

205
00:08:46,480 --> 00:08:47,279
for

206
00:08:47,279 --> 00:08:50,560
for a public random matrix a and the

207
00:08:50,560 --> 00:08:52,000
secret vector

208
00:08:52,000 --> 00:08:54,880
s in a large modulus eq

209
00:08:54,880 --> 00:08:56,320
their product

210
00:08:56,320 --> 00:08:59,440
rounded down to a much smaller modulus p

211
00:08:59,440 --> 00:09:01,360
is pseudorandom

212
00:09:01,360 --> 00:09:03,600
so with this assumption

213
00:09:03,600 --> 00:09:06,000
our masking scheme is very simple

214
00:09:06,000 --> 00:09:10,000
the mask algorithm computes a lwr sample

215
00:09:10,000 --> 00:09:12,880
and added to the message mod p and

216
00:09:12,880 --> 00:09:15,440
decryption simply sub subtracts the

217
00:09:15,440 --> 00:09:18,399
pseudorandom aldebaran sample recovered

218
00:09:18,399 --> 00:09:20,800
message

219
00:09:20,880 --> 00:09:22,640
however the scheme only have

220
00:09:22,640 --> 00:09:25,120
approximately keep moving them as shown

221
00:09:25,120 --> 00:09:27,519
on the slides because of the running

222
00:09:27,519 --> 00:09:29,120
difference

223
00:09:29,120 --> 00:09:31,600
which is either zero or one

224
00:09:31,600 --> 00:09:34,880
this causes causes a problem during uh

225
00:09:34,880 --> 00:09:37,279
homomorphic evaluation

226
00:09:37,279 --> 00:09:38,800
which creates

227
00:09:38,800 --> 00:09:40,959
this error term epsilon

228
00:09:40,959 --> 00:09:42,640
in particular when the server

229
00:09:42,640 --> 00:09:46,000
homomorphically evaluates the sequential

230
00:09:46,000 --> 00:09:48,000
reconstruction algorithm

231
00:09:48,000 --> 00:09:50,720
it creates an error term epsilon star

232
00:09:50,720 --> 00:09:53,519
that scales with with the coefficient of

233
00:09:53,519 --> 00:09:54,640
recall

234
00:09:54,640 --> 00:09:57,760
so if we use chemistry sharing here

235
00:09:57,760 --> 00:10:01,279
which has arbitrarily large coefficients

236
00:10:01,279 --> 00:10:02,399
then the

237
00:10:02,399 --> 00:10:04,480
the error term epsilon star

238
00:10:04,480 --> 00:10:08,480
will be so large that it overwhelms

239
00:10:08,480 --> 00:10:10,640
the message we want to recover

240
00:10:10,640 --> 00:10:13,600
therefore what we really need is a

241
00:10:13,600 --> 00:10:15,200
linear sequence sharing with small

242
00:10:15,200 --> 00:10:16,480
coefficients

243
00:10:16,480 --> 00:10:19,200
which we call a flat sticker sharing in

244
00:10:19,200 --> 00:10:21,120
our paper

245
00:10:21,120 --> 00:10:24,640
uh okay so that's the actual diagram

246
00:10:24,640 --> 00:10:27,200
under the ldr assumption

247
00:10:27,200 --> 00:10:30,560
to obtain a flat sql sharing we follow

248
00:10:30,560 --> 00:10:32,079
the

249
00:10:32,079 --> 00:10:34,320
idea of dt06

250
00:10:34,320 --> 00:10:37,040
which roughly says to translate a

251
00:10:37,040 --> 00:10:39,680
boolean formula that computes the

252
00:10:39,680 --> 00:10:42,079
threshold function into a flat sql

253
00:10:42,079 --> 00:10:43,839
sharing scheme that computes the same

254
00:10:43,839 --> 00:10:44,800
function

255
00:10:44,800 --> 00:10:48,079
i'll omit the detail here but what we

256
00:10:48,079 --> 00:10:50,480
obtain is the scheme with

257
00:10:50,480 --> 00:10:53,440
total share size order of lambda square

258
00:10:53,440 --> 00:10:55,760
and our scheme has two

259
00:10:55,760 --> 00:10:58,880
thresholds so gamma for privacy and role

260
00:10:58,880 --> 00:11:00,399
for reconstruction

261
00:11:00,399 --> 00:11:03,200
where row and gamma are natural constant

262
00:11:03,200 --> 00:11:04,480
fractions

263
00:11:04,480 --> 00:11:06,800
so you will notice that there is a

264
00:11:06,800 --> 00:11:08,640
constant fraction gap between those

265
00:11:08,640 --> 00:11:09,760
thresholds

266
00:11:09,760 --> 00:11:11,600
and finally our

267
00:11:11,600 --> 00:11:13,680
sql sharing has a probabilistic setup

268
00:11:13,680 --> 00:11:14,720
algorithm

269
00:11:14,720 --> 00:11:18,000
and it only achieves correctness and

270
00:11:18,000 --> 00:11:19,040
privacy

271
00:11:19,040 --> 00:11:23,040
uh statistically not perfectly

272
00:11:23,040 --> 00:11:26,839
specifically for any subset share of the

273
00:11:26,839 --> 00:11:28,640
shares

274
00:11:28,640 --> 00:11:31,519
correctness and privacy may fail with

275
00:11:31,519 --> 00:11:34,240
some negligible probability over the

276
00:11:34,240 --> 00:11:37,279
randomness of of setup

277
00:11:37,279 --> 00:11:39,120
finally note that

278
00:11:39,120 --> 00:11:43,360
our total share size is lambda square

279
00:11:43,360 --> 00:11:45,600
which is independent of m

280
00:11:45,600 --> 00:11:48,399
when m is much larger than lambda square

281
00:11:48,399 --> 00:11:52,000
there will exist a lot of times that has

282
00:11:52,000 --> 00:11:54,839
shares and zero and we call those

283
00:11:54,839 --> 00:11:57,519
likes for the rest of the clients who

284
00:11:57,519 --> 00:11:58,240
have

285
00:11:58,240 --> 00:12:00,320
uh non-literal share sets we call them

286
00:12:00,320 --> 00:12:03,200
heavy clients and in our experiment

287
00:12:03,200 --> 00:12:04,000
we'll

288
00:12:04,000 --> 00:12:07,360
benchmark those separately

289
00:12:07,440 --> 00:12:09,680
so this completes

290
00:12:09,680 --> 00:12:12,800
the instantiation under lwr and in our

291
00:12:12,800 --> 00:12:15,200
paper we also have an instantiation

292
00:12:15,200 --> 00:12:18,480
under the dcr assumption and for that we

293
00:12:18,480 --> 00:12:20,959
need an integer linear square sharing to

294
00:12:20,959 --> 00:12:22,320
work with it

295
00:12:22,320 --> 00:12:26,399
and a notice that the dcr instantiation

296
00:12:26,399 --> 00:12:29,040
achieves the same malicious privacy as

297
00:12:29,040 --> 00:12:32,639
lw r1 but it doesn't have malicious

298
00:12:32,639 --> 00:12:33,760
correctness

299
00:12:33,760 --> 00:12:37,120
meaning that any corrupted client may

300
00:12:37,120 --> 00:12:40,639
abort the aggregation section

301
00:12:40,639 --> 00:12:42,079
uh okay

302
00:12:42,079 --> 00:12:45,360
finally our experiment in our experiment

303
00:12:45,360 --> 00:12:48,240
will implement the semi-honest version

304
00:12:48,240 --> 00:12:51,760
of our protocol and the ring lwr

305
00:12:51,760 --> 00:12:55,040
python and we compare it with also our

306
00:12:55,040 --> 00:12:59,279
implementation of the vvg20

307
00:12:59,680 --> 00:13:02,000
our benchmarks are run under those

308
00:13:02,000 --> 00:13:03,600
parameter settings

309
00:13:03,600 --> 00:13:06,399
in particular the number of client spam

310
00:13:06,399 --> 00:13:10,079
ranges from 400 to 3200

311
00:13:10,079 --> 00:13:13,279
so the first two plots shows uh the

312
00:13:13,279 --> 00:13:17,760
comparison of online computation time

313
00:13:17,760 --> 00:13:20,959
as we can see our server computation is

314
00:13:20,959 --> 00:13:24,079
much faster than the bgg20 server

315
00:13:24,079 --> 00:13:27,120
and uh when m is large enough

316
00:13:27,120 --> 00:13:30,000
the we have some light clients that are

317
00:13:30,000 --> 00:13:31,519
showing uh

318
00:13:31,519 --> 00:13:32,880
in green

319
00:13:32,880 --> 00:13:35,360
which they are much more efficient than

320
00:13:35,360 --> 00:13:37,360
the bgg20 clients

321
00:13:37,360 --> 00:13:39,920
and for the heavy clients

322
00:13:39,920 --> 00:13:41,120
uh

323
00:13:41,120 --> 00:13:43,360
they achieve similar efficiency to the

324
00:13:43,360 --> 00:13:45,600
bgg kind

325
00:13:45,600 --> 00:13:50,160
but when m is uh much larger than 2200

326
00:13:50,160 --> 00:13:52,560
as we can see on the plots the orange

327
00:13:52,560 --> 00:13:55,199
line will eventually surpass the blue

328
00:13:55,199 --> 00:13:57,839
line which is the ddg current

329
00:13:57,839 --> 00:14:00,480
for communication uh again our server

330
00:14:00,480 --> 00:14:02,959
communication size is much smaller than

331
00:14:02,959 --> 00:14:05,360
vgd20 and

332
00:14:05,360 --> 00:14:08,800
both of our heavy and light clients

333
00:14:08,800 --> 00:14:11,040
achieve significantly less communication

334
00:14:11,040 --> 00:14:13,040
than the bdd client

335
00:14:13,040 --> 00:14:13,920
and

336
00:14:13,920 --> 00:14:16,959
also note that another important

337
00:14:16,959 --> 00:14:19,440
advantage of our protocol over the bgg

338
00:14:19,440 --> 00:14:22,720
one is that we have one less

339
00:14:22,720 --> 00:14:26,160
number of rounds in the online phase

340
00:14:26,160 --> 00:14:28,959
this concludes my talk

341
00:14:28,959 --> 00:14:30,720
we

342
00:14:30,720 --> 00:14:33,279
the learner is a protocol for secure

343
00:14:33,279 --> 00:14:36,079
aggregation in the single server city

344
00:14:36,079 --> 00:14:38,639
that achieves malicious security

345
00:14:38,639 --> 00:14:41,839
and it has very efficient online run

346
00:14:41,839 --> 00:14:44,560
complexity communication and the

347
00:14:44,560 --> 00:14:45,839
computation

348
00:14:45,839 --> 00:14:47,839
compared to existing works

349
00:14:47,839 --> 00:14:50,000
and it can be instantiated

350
00:14:50,000 --> 00:14:53,760
using the lwr or dcr assumption

351
00:14:53,760 --> 00:14:56,000
okay yeah that's it thank you very much

352
00:14:56,000 --> 00:14:59,680
thank speaker for the wonderful talk

353
00:14:59,680 --> 00:15:02,480
so i would like to invite antonius to

354
00:15:02,480 --> 00:15:03,920
first of all thank the audience for

355
00:15:03,920 --> 00:15:04,880
saying

356
00:15:04,880 --> 00:15:07,600
uh a statement i would like to

357
00:15:07,600 --> 00:15:08,639
ask something to come and in the

358
00:15:08,639 --> 00:15:10,639
meantime while antonio set up

359
00:15:10,639 --> 00:15:14,480
a and you can take questions

360
00:15:14,880 --> 00:15:17,760
if anyone has any

361
00:15:23,199 --> 00:15:24,720
okay

362
00:15:24,720 --> 00:15:26,399
okay so it seems there are no questions

363
00:15:26,399 --> 00:15:29,720
thank you again

