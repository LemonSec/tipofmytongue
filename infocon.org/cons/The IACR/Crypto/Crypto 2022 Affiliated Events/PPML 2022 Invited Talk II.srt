1
00:00:03,600 --> 00:00:06,600
foreign

2
00:00:10,260 --> 00:00:12,660
so we're gonna have done song to tell us

3
00:00:12,660 --> 00:00:14,160
about the centralized data science Made

4
00:00:14,160 --> 00:00:17,100
Easy and a few quick words about Dom so

5
00:00:17,100 --> 00:00:19,920
she's a professor at UC Berkeley and she

6
00:00:19,920 --> 00:00:21,660
also did here PhD there

7
00:00:21,660 --> 00:00:23,519
so here work that has received multiple

8
00:00:23,519 --> 00:00:26,460
Awards so she's the recipient of the

9
00:00:26,460 --> 00:00:28,019
MacArthur Fellowship who can hand

10
00:00:28,019 --> 00:00:30,900
fellowship and South Korea award the

11
00:00:30,900 --> 00:00:32,640
Alfred's loan research fellowship and

12
00:00:32,640 --> 00:00:34,800
many more and her work also received a

13
00:00:34,800 --> 00:00:36,660
lot of best paper Awards out of

14
00:00:36,660 --> 00:00:38,219
conferences

15
00:00:38,219 --> 00:00:41,340
and as it was also faculty at CMU before

16
00:00:41,340 --> 00:00:43,260
joining UC Berkeley

17
00:00:43,260 --> 00:00:45,899
so don you can start whenever you're

18
00:00:45,899 --> 00:00:46,980
ready

19
00:00:46,980 --> 00:00:50,820
okay great thanks a lot for having me uh

20
00:00:50,820 --> 00:00:53,340
yes and uh all right sorry that I

21
00:00:53,340 --> 00:00:56,039
couldn't be there and my flight had a

22
00:00:56,039 --> 00:00:59,160
mechanical issues so

23
00:00:59,160 --> 00:01:02,340
um right okay so let me get started so

24
00:01:02,340 --> 00:01:04,438
today I'll talk about decentralized data

25
00:01:04,438 --> 00:01:08,280
science Made Easy uh right okay I'm a

26
00:01:08,280 --> 00:01:11,580
professor at UC Berkeley and also the

27
00:01:11,580 --> 00:01:14,960
founder of the Oasis labs

28
00:01:15,900 --> 00:01:20,100
okay great uh as we all know data is a

29
00:01:20,100 --> 00:01:21,840
key driver from other economy and the

30
00:01:21,840 --> 00:01:24,360
light blood of AI machine learning and

31
00:01:24,360 --> 00:01:25,979
more and more data is being collected

32
00:01:25,979 --> 00:01:29,420
every day and value from these

33
00:01:29,420 --> 00:01:33,600
personalized data uh now uh as a

34
00:01:33,600 --> 00:01:36,900
significant fraction of global GDP and

35
00:01:36,900 --> 00:01:38,820
the global data economy is growing

36
00:01:38,820 --> 00:01:40,680
exponentially

37
00:01:40,680 --> 00:01:42,899
however not in this data as a sensitive

38
00:01:42,899 --> 00:01:46,619
and unprecedented and aware are facing

39
00:01:46,619 --> 00:01:48,960
unprecedented challenges in how

40
00:01:48,960 --> 00:01:51,360
sensitive data is being used

41
00:01:51,360 --> 00:01:54,000
so for individuals individuals have lost

42
00:01:54,000 --> 00:01:56,340
control over how their data is used a

43
00:01:56,340 --> 00:01:59,240
lot of users data is being sold

44
00:01:59,240 --> 00:02:03,479
abused without users awareness or

45
00:02:03,479 --> 00:02:04,920
consent

46
00:02:04,920 --> 00:02:08,160
and a lot of the data is being sold and

47
00:02:08,160 --> 00:02:09,598
the premise that the data has been

48
00:02:09,598 --> 00:02:11,879
anonymized however volume of research

49
00:02:11,879 --> 00:02:14,580
has shown that anonymization is not

50
00:02:14,580 --> 00:02:17,040
sufficient to protect users privacy as

51
00:02:17,040 --> 00:02:19,140
illustrated by this

52
00:02:19,140 --> 00:02:22,020
a greater case study done by New York

53
00:02:22,020 --> 00:02:24,660
Times assuring that from anonymized

54
00:02:24,660 --> 00:02:27,360
mobile phone location data sets and

55
00:02:27,360 --> 00:02:29,879
collected they were able to track the

56
00:02:29,879 --> 00:02:32,040
location of a secret service agent with

57
00:02:32,040 --> 00:02:34,580
former president Trump

58
00:02:34,580 --> 00:02:36,620
and also

59
00:02:36,620 --> 00:02:39,959
for companies companies continue to

60
00:02:39,959 --> 00:02:41,819
suffer from large-scale data breaches

61
00:02:41,819 --> 00:02:43,680
where attackers steal sensitive

62
00:02:43,680 --> 00:02:45,959
information of hundreds of millions of

63
00:02:45,959 --> 00:02:49,560
users or even billions of users in each

64
00:02:49,560 --> 00:02:51,239
of these incidents

65
00:02:51,239 --> 00:02:53,060
and

66
00:02:53,060 --> 00:02:57,420
also so CCP and gdpi these are great

67
00:02:57,420 --> 00:03:00,659
first steps for privacy regulations but

68
00:03:00,659 --> 00:03:02,940
however they also have been

69
00:03:02,940 --> 00:03:05,940
um very costly for businesses

70
00:03:05,940 --> 00:03:08,819
and furthermore even more important is

71
00:03:08,819 --> 00:03:10,560
that a lot of the valuable data is now

72
00:03:10,560 --> 00:03:11,599
being used

73
00:03:11,599 --> 00:03:13,920
uh they

74
00:03:13,920 --> 00:03:16,080
um all right so these valuable data sets

75
00:03:16,080 --> 00:03:18,000
in data Sellers and could not be used

76
00:03:18,000 --> 00:03:21,420
due to privacy concerns

77
00:03:21,420 --> 00:03:24,599
and today we are facing

78
00:03:24,599 --> 00:03:26,700
um all these huge challenges for how

79
00:03:26,700 --> 00:03:30,720
sensitive data is being utilized

80
00:03:30,720 --> 00:03:34,260
um and if we and this issue will only

81
00:03:34,260 --> 00:03:37,140
continue to be more and more severe and

82
00:03:37,140 --> 00:03:39,360
if the issue is not resolved it could

83
00:03:39,360 --> 00:03:41,879
hinder societal progress and even

84
00:03:41,879 --> 00:03:44,159
undermine human values and fundamental

85
00:03:44,159 --> 00:03:45,239
rights

86
00:03:45,239 --> 00:03:48,900
and hence there's urgent needs for a new

87
00:03:48,900 --> 00:03:52,500
paradigm building a responsible data

88
00:03:52,500 --> 00:03:55,080
economy and what do I mean by building a

89
00:03:55,080 --> 00:03:57,420
responsible data economy here are a few

90
00:03:57,420 --> 00:03:59,760
goals and principles of a responsive

91
00:03:59,760 --> 00:04:03,120
data economy first we need to establish

92
00:04:03,120 --> 00:04:05,819
and enforce data rights these data

93
00:04:05,819 --> 00:04:07,920
rights are foundations of data economy

94
00:04:07,920 --> 00:04:10,620
and prevent can prevent misuse and abuse

95
00:04:10,620 --> 00:04:12,840
of data and also we want to ensure a

96
00:04:12,840 --> 00:04:14,700
fair distribution of value created from

97
00:04:14,700 --> 00:04:16,798
data for example users should be able to

98
00:04:16,798 --> 00:04:19,259
gain benefits from their data

99
00:04:19,259 --> 00:04:22,979
and more importantly we want to ensure

100
00:04:22,979 --> 00:04:25,320
efficient data use to maximize social

101
00:04:25,320 --> 00:04:29,540
welfare and economic efficiency

102
00:04:30,479 --> 00:04:34,380
and in order to build a responsible data

103
00:04:34,380 --> 00:04:36,860
economy and Achieve these goals

104
00:04:36,860 --> 00:04:38,699
essentially we need to enable

105
00:04:38,699 --> 00:04:42,360
responsible data use and take a very

106
00:04:42,360 --> 00:04:44,280
different approach than on the current

107
00:04:44,280 --> 00:04:47,400
approach so in the current approach in

108
00:04:47,400 --> 00:04:50,100
Web 2.0 it's a centralized solution

109
00:04:50,100 --> 00:04:52,440
where usage data is actually being

110
00:04:52,440 --> 00:04:54,660
controlled by centralized trusted

111
00:04:54,660 --> 00:04:58,620
third-party and the data compute the

112
00:04:58,620 --> 00:05:00,600
computational data is done in

113
00:05:00,600 --> 00:05:03,240
centralized fashion even though they may

114
00:05:03,240 --> 00:05:06,660
be done in a distribute setting but it

115
00:05:06,660 --> 00:05:10,520
still controlled by centralized prices

116
00:05:10,520 --> 00:05:13,100
so instead

117
00:05:13,100 --> 00:05:17,240
we want to enable and

118
00:05:17,240 --> 00:05:20,520
the data use without relying on

119
00:05:20,520 --> 00:05:23,520
centralized Transit third party in

120
00:05:23,520 --> 00:05:25,320
particular here

121
00:05:25,320 --> 00:05:29,220
um this is the easels of web 3.0 where

122
00:05:29,220 --> 00:05:31,800
users maintain control of their data and

123
00:05:31,800 --> 00:05:34,139
the data usage is done in a fully

124
00:05:34,139 --> 00:05:36,419
decentralized manner so that we do not

125
00:05:36,419 --> 00:05:39,479
need to rely on any centralized trusted

126
00:05:39,479 --> 00:05:41,460
third party and this helps users

127
00:05:41,460 --> 00:05:43,500
maintain their data ownership and hence

128
00:05:43,500 --> 00:05:47,160
can encourage user participation

129
00:05:47,160 --> 00:05:50,400
in order to achieve this goal

130
00:05:50,400 --> 00:05:52,460
um luckily there has been huge

131
00:05:52,460 --> 00:05:55,919
advancements in responsible data use

132
00:05:55,919 --> 00:05:58,919
Technologies in the research community

133
00:05:58,919 --> 00:06:01,440
and in particular thousands of papers

134
00:06:01,440 --> 00:06:03,800
have been written on related topics

135
00:06:03,800 --> 00:06:07,440
including secure Computing such as MPC

136
00:06:07,440 --> 00:06:09,960
fhe and federal learning and other

137
00:06:09,960 --> 00:06:12,259
Technologies

138
00:06:12,259 --> 00:06:15,000
however with these thousands of papers

139
00:06:15,000 --> 00:06:17,699
that have been written if we actually

140
00:06:17,699 --> 00:06:19,860
look at in practice what actually have

141
00:06:19,860 --> 00:06:22,199
been really deployed what actually have

142
00:06:22,199 --> 00:06:25,100
been used is a huge difference

143
00:06:25,100 --> 00:06:28,740
unfortunately and very little real world

144
00:06:28,740 --> 00:06:32,940
usage and deployment of these Advanced

145
00:06:32,940 --> 00:06:35,180
Techniques for responsible daily use

146
00:06:35,180 --> 00:06:39,180
actually in practice and deployed in the

147
00:06:39,180 --> 00:06:43,500
real world and why is uh why is this the

148
00:06:43,500 --> 00:06:46,500
case why are these thousands of papers

149
00:06:46,500 --> 00:06:50,340
managed sitting on the shelf so one key

150
00:06:50,340 --> 00:06:52,740
challenge we identify here is

151
00:06:52,740 --> 00:06:54,919
besides developing the original

152
00:06:54,919 --> 00:06:58,259
algorithms the actual development and

153
00:06:58,259 --> 00:07:01,319
deployments of Technologies for these

154
00:07:01,319 --> 00:07:03,240
responsible data use and for

155
00:07:03,240 --> 00:07:06,240
decentralized data science is actually

156
00:07:06,240 --> 00:07:08,880
too expensive today

157
00:07:08,880 --> 00:07:11,099
so here I'm going to give you first a

158
00:07:11,099 --> 00:07:13,680
couple examples of our real world from

159
00:07:13,680 --> 00:07:15,539
our Real World experience to at least

160
00:07:15,539 --> 00:07:18,060
illustrate the points

161
00:07:18,060 --> 00:07:21,060
so the first example that I'll give is a

162
00:07:21,060 --> 00:07:24,900
recent launch that we did so from Oasis

163
00:07:24,900 --> 00:07:26,880
Labs actually is a technology provider

164
00:07:26,880 --> 00:07:31,680
for a recent huge launch in partnership

165
00:07:31,680 --> 00:07:35,580
with Mata Instagram so here a meta

166
00:07:35,580 --> 00:07:38,160
Instagram together with Oasis labs and

167
00:07:38,160 --> 00:07:40,979
also three University Partners launched

168
00:07:40,979 --> 00:07:43,800
the first large-scale first service

169
00:07:43,800 --> 00:07:47,900
kinds AI model fairness measurement

170
00:07:47,900 --> 00:07:49,620
so

171
00:07:49,620 --> 00:07:50,340
um

172
00:07:50,340 --> 00:07:52,919
so here what is the AI model fairness

173
00:07:52,919 --> 00:07:55,800
measurement first so for example with

174
00:07:55,800 --> 00:07:58,620
the meta and Instagram they have uh

175
00:07:58,620 --> 00:08:00,060
hundreds of millions of millions of

176
00:08:00,060 --> 00:08:04,560
users and they use various models to

177
00:08:04,560 --> 00:08:07,080
recommend uh to do recommendations to

178
00:08:07,080 --> 00:08:09,960
users and to provide better services and

179
00:08:09,960 --> 00:08:10,800
so on

180
00:08:10,800 --> 00:08:13,199
and the natural question is whether

181
00:08:13,199 --> 00:08:15,539
these AI models are actually Fair

182
00:08:15,539 --> 00:08:17,639
whether they have biases so for example

183
00:08:17,639 --> 00:08:20,580
whether these AI models will treat a

184
00:08:20,580 --> 00:08:22,560
male female or non-binary people

185
00:08:22,560 --> 00:08:26,419
differently and in terms of

186
00:08:26,419 --> 00:08:29,580
societal fairness and so on this is a

187
00:08:29,580 --> 00:08:31,020
very important question

188
00:08:31,020 --> 00:08:33,419
so the question is how can we actually

189
00:08:33,419 --> 00:08:36,719
do this AI model fairness measurement

190
00:08:36,719 --> 00:08:39,059
so in order to do this measurement

191
00:08:39,059 --> 00:08:40,740
essentially

192
00:08:40,740 --> 00:08:43,339
we need different pieces of information

193
00:08:43,339 --> 00:08:47,700
so for example meta the air model

194
00:08:47,700 --> 00:08:52,920
provider for a given user it knows the

195
00:08:52,920 --> 00:08:56,240
because it has the model so it can

196
00:08:56,240 --> 00:08:58,980
get the effects of the model inference

197
00:08:58,980 --> 00:09:01,279
results

198
00:09:02,839 --> 00:09:06,120
does not necessarily know the needed

199
00:09:06,120 --> 00:09:08,820
sensitive attribute of the user to be

200
00:09:08,820 --> 00:09:11,339
able to conduct this em other fairness

201
00:09:11,339 --> 00:09:12,899
measurement

202
00:09:12,899 --> 00:09:15,600
um so for example meta doesn't know for

203
00:09:15,600 --> 00:09:18,120
a given user whether the user is male

204
00:09:18,120 --> 00:09:21,899
female or non-binary

205
00:09:21,899 --> 00:09:26,519
so in this case then uh what's uh

206
00:09:26,519 --> 00:09:29,820
um a matter the solution that might have

207
00:09:29,820 --> 00:09:33,540
came up with is to work with a survey

208
00:09:33,540 --> 00:09:36,060
operator and in this case the survey

209
00:09:36,060 --> 00:09:39,060
operator could launch a survey for

210
00:09:39,060 --> 00:09:42,120
example for Instagram users which is and

211
00:09:42,120 --> 00:09:45,420
the case in the recent launch

212
00:09:45,420 --> 00:09:49,320
and then users can obtain and to the

213
00:09:49,320 --> 00:09:51,720
survey and in the survey the user will

214
00:09:51,720 --> 00:09:54,360
provide a number of essential answer

215
00:09:54,360 --> 00:09:57,500
number of questions and provides the uh

216
00:09:57,500 --> 00:10:01,500
the answers to the survey questions for

217
00:10:01,500 --> 00:10:04,980
example including sensitive attributes

218
00:10:04,980 --> 00:10:06,560
of the user

219
00:10:06,560 --> 00:10:08,180
and

220
00:10:08,180 --> 00:10:11,459
assuming that's a meta then have this

221
00:10:11,459 --> 00:10:14,220
information and that doesn't matter for

222
00:10:14,220 --> 00:10:18,060
a given users meta knows the user's

223
00:10:18,060 --> 00:10:20,640
sensitive attribute values and also

224
00:10:20,640 --> 00:10:23,339
knows the model inference results for

225
00:10:23,339 --> 00:10:26,640
the user then metal could compute the

226
00:10:26,640 --> 00:10:28,740
fairness results

227
00:10:28,740 --> 00:10:30,959
and the fairness results in and there

228
00:10:30,959 --> 00:10:32,820
are different ways a different metrics

229
00:10:32,820 --> 00:10:36,720
that one can evaluate to fairness as a

230
00:10:36,720 --> 00:10:39,300
simple example here one can compare the

231
00:10:39,300 --> 00:10:42,000
average inference results for users

232
00:10:42,000 --> 00:10:45,180
identified as male female and binary as

233
00:10:45,180 --> 00:10:47,519
an example

234
00:10:47,519 --> 00:10:51,839
so then in this case as you can see so

235
00:10:51,839 --> 00:10:55,200
if we have these different attributes uh

236
00:10:55,200 --> 00:11:00,300
listed as a a plane Vector then

237
00:11:00,300 --> 00:11:02,820
essentially the computation the fan is

238
00:11:02,820 --> 00:11:06,060
computation here involves uh involves

239
00:11:06,060 --> 00:11:09,180
Computing for example uh the dial

240
00:11:09,180 --> 00:11:12,779
products of the user sensitive attribute

241
00:11:12,779 --> 00:11:17,899
vector and the model inference result

242
00:11:18,740 --> 00:11:22,860
so this is how one could compute the

243
00:11:22,860 --> 00:11:26,160
amount of fairness but however of course

244
00:11:26,160 --> 00:11:29,399
in this case uh without more Advanced

245
00:11:29,399 --> 00:11:31,920
cryptographic Techniques in order to do

246
00:11:31,920 --> 00:11:34,980
this then meta would need to know the

247
00:11:34,980 --> 00:11:37,860
sensitive attribute for the users and of

248
00:11:37,860 --> 00:11:41,279
course that is not acceptable

249
00:11:41,279 --> 00:11:45,000
so instead then what's uh we want to

250
00:11:45,000 --> 00:11:48,240
achieve is a privacy preserving AI model

251
00:11:48,240 --> 00:11:51,480
fairness measurement so in this case

252
00:11:51,480 --> 00:11:53,639
um for privacy protection metal should

253
00:11:53,639 --> 00:11:55,500
not learn usage sensitive attributes

254
00:11:55,500 --> 00:11:57,899
whether they are male female non-binary

255
00:11:57,899 --> 00:12:00,240
and the survey opportunities can only

256
00:12:00,240 --> 00:12:02,700
use inference results

257
00:12:02,700 --> 00:12:07,380
and as uh as everyone can see here this

258
00:12:07,380 --> 00:12:09,660
is a great use case for crypto

259
00:12:09,660 --> 00:12:13,260
techniques such as MPC and so on

260
00:12:13,260 --> 00:12:15,959
so this is exactly what we did and

261
00:12:15,959 --> 00:12:20,700
together with meta we developed the uh

262
00:12:20,700 --> 00:12:23,459
the cryptographic protocol and also

263
00:12:23,459 --> 00:12:28,200
built the system for this for this

264
00:12:28,200 --> 00:12:30,440
project so in particular in this case

265
00:12:30,440 --> 00:12:33,899
the the survey results will actually be

266
00:12:33,899 --> 00:12:36,600
secret shares across multiple facilities

267
00:12:36,600 --> 00:12:39,740
in this case three universities

268
00:12:39,740 --> 00:12:42,120
including a historically black

269
00:12:42,120 --> 00:12:46,139
University and also a Hispanic

270
00:12:46,139 --> 00:12:47,600
University

271
00:12:47,600 --> 00:12:51,839
joined as facilitators and

272
00:12:51,839 --> 00:12:53,820
uh so that right so the survey results

273
00:12:53,820 --> 00:12:58,440
uh secretary across the facilitators and

274
00:12:58,440 --> 00:13:00,420
they

275
00:13:00,420 --> 00:13:03,660
um the model influenced results in this

276
00:13:03,660 --> 00:13:06,600
case uh can be homomorphically encrypted

277
00:13:06,600 --> 00:13:10,139
and then essentially we compute the

278
00:13:10,139 --> 00:13:14,459
products of the shared survey results

279
00:13:14,459 --> 00:13:19,260
and the uh and the encrypted inference

280
00:13:19,260 --> 00:13:22,079
results and then in the end so this will

281
00:13:22,079 --> 00:13:25,320
allow you to compute the encrypted

282
00:13:25,320 --> 00:13:30,120
results of this uh fairness computation

283
00:13:30,120 --> 00:13:35,459
and also uh right and in addition we

284
00:13:35,459 --> 00:13:37,279
also add

285
00:13:37,279 --> 00:13:40,620
differential privacy into the

286
00:13:40,620 --> 00:13:44,160
computation and also in this case Mata

287
00:13:44,160 --> 00:13:46,500
also provides zero knowledge range proof

288
00:13:46,500 --> 00:13:50,760
uh proving that the the inference

289
00:13:50,760 --> 00:13:54,360
results that was encrypted was within a

290
00:13:54,360 --> 00:13:57,680
certain valid range

291
00:13:58,380 --> 00:14:01,560
so this is the approach for

292
00:14:01,560 --> 00:14:04,680
um doing this privacy preserving AI

293
00:14:04,680 --> 00:14:07,260
model fairness measurement

294
00:14:07,260 --> 00:14:09,680
um as you can see it actually uses

295
00:14:09,680 --> 00:14:13,079
multiple uh different uh types of

296
00:14:13,079 --> 00:14:15,540
Technologies to put them together

297
00:14:15,540 --> 00:14:19,459
but however still in this case actually

298
00:14:19,459 --> 00:14:21,980
putting aside is the algorithm design

299
00:14:21,980 --> 00:14:25,440
the the protocol implementation itself

300
00:14:25,440 --> 00:14:29,600
just the Baseline actually did not

301
00:14:29,600 --> 00:14:32,760
actually take a lot of time so

302
00:14:32,760 --> 00:14:36,720
essentially it was implemented

303
00:14:36,720 --> 00:14:37,680
um

304
00:14:37,680 --> 00:14:42,060
uh within one month uh uh actually a few

305
00:14:42,060 --> 00:14:45,300
engineering uh altogether engineering

306
00:14:45,300 --> 00:14:47,639
um but however the

307
00:14:47,639 --> 00:14:52,139
um uh it took much much longer it took

308
00:14:52,139 --> 00:14:54,360
uh at least actually four or five times

309
00:14:54,360 --> 00:14:58,320
or actually a lot more uh time and

310
00:14:58,320 --> 00:15:01,320
efforts to actually build out the system

311
00:15:01,320 --> 00:15:03,839
so that the system can actually be

312
00:15:03,839 --> 00:15:06,720
deployed in real production

313
00:15:06,720 --> 00:15:10,019
so so if you look at uh for three

314
00:15:10,019 --> 00:15:11,579
engineering years

315
00:15:11,579 --> 00:15:16,139
um uh time then like the initial uh

316
00:15:16,139 --> 00:15:17,760
political base political development

317
00:15:17,760 --> 00:15:19,740
only took as mentioned less than one

318
00:15:19,740 --> 00:15:24,060
month but the actual system uh the

319
00:15:24,060 --> 00:15:26,399
production system developments took

320
00:15:26,399 --> 00:15:29,759
actually many months to actually do it

321
00:15:29,759 --> 00:15:32,220
so so the lesson learned here is that

322
00:15:32,220 --> 00:15:35,399
there's a huge gap between the crypto

323
00:15:35,399 --> 00:15:37,880
political design and base implementation

324
00:15:37,880 --> 00:15:40,440
and that can run on a single Machine

325
00:15:40,440 --> 00:15:43,320
versus the actual development and

326
00:15:43,320 --> 00:15:46,620
deployments of a multi-party system that

327
00:15:46,620 --> 00:15:49,880
can actually run in production

328
00:15:50,420 --> 00:15:53,279
and I would say most papers of course

329
00:15:53,279 --> 00:15:57,240
only focus on the very beginning of uh

330
00:15:57,240 --> 00:16:02,420
this phase of the whole journey

331
00:16:03,240 --> 00:16:05,759
so so that's the first example and now

332
00:16:05,759 --> 00:16:08,579
let me give you uh the second example

333
00:16:08,579 --> 00:16:10,680
the second example is another

334
00:16:10,680 --> 00:16:12,259
cryptographic

335
00:16:12,259 --> 00:16:15,000
critical system that we have developed

336
00:16:15,000 --> 00:16:18,720
on privacy preserving query processing

337
00:16:18,720 --> 00:16:21,899
um multiple data sources so the idea is

338
00:16:21,899 --> 00:16:25,519
to enable privacy preserving SQL queries

339
00:16:25,519 --> 00:16:28,620
that can support Rich SQL query

340
00:16:28,620 --> 00:16:32,100
Primitives over data that is spread

341
00:16:32,100 --> 00:16:37,019
across multiple entities

342
00:16:37,680 --> 00:16:42,360
so uh so here here's an example why one

343
00:16:42,360 --> 00:16:45,240
may want to do this so for example for

344
00:16:45,240 --> 00:16:48,240
credit assessment and fraud detection

345
00:16:48,240 --> 00:16:51,180
uh oftentimes multiple Banks need to

346
00:16:51,180 --> 00:16:54,540
together check whether a certain user

347
00:16:54,540 --> 00:16:58,139
who is applying for new credits whether

348
00:16:58,139 --> 00:17:00,540
they have been borrowing from different

349
00:17:00,540 --> 00:17:02,639
banks and hence

350
00:17:02,639 --> 00:17:05,280
it's important to query

351
00:17:05,280 --> 00:17:08,099
across different banks for a given user

352
00:17:08,099 --> 00:17:11,220
for example to know the total balance

353
00:17:11,220 --> 00:17:14,819
for the future of the total balance for

354
00:17:14,819 --> 00:17:17,880
their credit cards and so on

355
00:17:17,880 --> 00:17:21,959
so in this case you would issue a SQL

356
00:17:21,959 --> 00:17:24,419
query but the SQL query will need to be

357
00:17:24,419 --> 00:17:26,459
issued across multiple Banks database

358
00:17:26,459 --> 00:17:29,179
and in the end you want to

359
00:17:29,179 --> 00:17:31,860
sum the results

360
00:17:31,860 --> 00:17:33,660
um

361
00:17:33,660 --> 00:17:36,780
so so then in this case ideally what you

362
00:17:36,780 --> 00:17:39,480
would like to do is you want a client to

363
00:17:39,480 --> 00:17:42,720
run the query without accessing the

364
00:17:42,720 --> 00:17:45,299
original records of the different banks

365
00:17:45,299 --> 00:17:47,640
and

366
00:17:47,640 --> 00:17:50,360
um but able to aggregate the results

367
00:17:50,360 --> 00:17:54,720
from uh backing aggregated results from

368
00:17:54,720 --> 00:17:56,880
the banks together in the end and you

369
00:17:56,880 --> 00:17:58,380
don't want the client to know each

370
00:17:58,380 --> 00:18:00,960
separate results from each Bank either

371
00:18:00,960 --> 00:18:03,960
and also for the bank in this case you

372
00:18:03,960 --> 00:18:06,179
actually I mean I want the bank to know

373
00:18:06,179 --> 00:18:09,539
for example which clients uh is being

374
00:18:09,539 --> 00:18:13,020
checked which user is being and which

375
00:18:13,020 --> 00:18:15,419
account is being checked and hence you

376
00:18:15,419 --> 00:18:17,160
want the bank to be able to process a

377
00:18:17,160 --> 00:18:19,559
query without

378
00:18:19,559 --> 00:18:21,059
um first of all accessing the original

379
00:18:21,059 --> 00:18:23,520
records from each other and also without

380
00:18:23,520 --> 00:18:25,880
knowing the specific query parameters

381
00:18:25,880 --> 00:18:28,620
and that reflects the client's interest

382
00:18:28,620 --> 00:18:31,020
in the query and also you don't want the

383
00:18:31,020 --> 00:18:32,580
bank to actually know the final query

384
00:18:32,580 --> 00:18:34,820
results

385
00:18:36,299 --> 00:18:40,919
and similar uh technique can also be

386
00:18:40,919 --> 00:18:43,320
used in a broad range of other

387
00:18:43,320 --> 00:18:45,480
application domains as well so for

388
00:18:45,480 --> 00:18:46,679
example

389
00:18:46,679 --> 00:18:49,679
in collaborative medical research you

390
00:18:49,679 --> 00:18:52,860
want to essentially

391
00:18:52,860 --> 00:18:56,400
for example to query across different

392
00:18:56,400 --> 00:18:59,700
databases at different hospitals to

393
00:18:59,700 --> 00:19:04,679
check for results of a certain cure and

394
00:19:04,679 --> 00:19:06,600
and so on

395
00:19:06,600 --> 00:19:10,080
and another use case is in cyber threat

396
00:19:10,080 --> 00:19:13,679
intelligence where uh one may want to

397
00:19:13,679 --> 00:19:18,179
query a different uh companies and so on

398
00:19:18,179 --> 00:19:21,299
to learn whether a particular attack

399
00:19:21,299 --> 00:19:24,660
Vector has happened uh are as a

400
00:19:24,660 --> 00:19:26,780
suspicious

401
00:19:26,780 --> 00:19:29,580
suspicious Behavior has happened at

402
00:19:29,580 --> 00:19:32,418
multiple places

403
00:19:32,640 --> 00:19:35,480
so how this together essentially

404
00:19:35,480 --> 00:19:38,160
requires the support of private query

405
00:19:38,160 --> 00:19:40,200
processing where

406
00:19:40,200 --> 00:19:43,740
in this case the we have a client and

407
00:19:43,740 --> 00:19:45,179
the data provider where the data

408
00:19:45,179 --> 00:19:46,740
provider could be coming from article

409
00:19:46,740 --> 00:19:49,080
sources and the client wants to query

410
00:19:49,080 --> 00:19:52,799
these data providers for a very rich for

411
00:19:52,799 --> 00:19:55,080
example data analytics and SQL queries

412
00:19:55,080 --> 00:19:58,260
and that includes data retrieval

413
00:19:58,260 --> 00:20:01,200
aggregation and right different query

414
00:20:01,200 --> 00:20:05,220
types and the clients should not know

415
00:20:05,220 --> 00:20:08,039
the original records of the data

416
00:20:08,039 --> 00:20:10,260
providers and also the data provider in

417
00:20:10,260 --> 00:20:12,299
this case should actually now know

418
00:20:12,299 --> 00:20:15,000
sensitive predicates parameters or

419
00:20:15,000 --> 00:20:18,140
parameters in the query

420
00:20:18,559 --> 00:20:22,679
and and this is different from for

421
00:20:22,679 --> 00:20:25,679
example peer due to the uh the

422
00:20:25,679 --> 00:20:29,299
additional capabilities provided

423
00:20:29,520 --> 00:20:32,400
so in our work previously we developed

424
00:20:32,400 --> 00:20:34,440
the first fully homomeric encryption

425
00:20:34,440 --> 00:20:36,299
based privacy preserving inquiry

426
00:20:36,299 --> 00:20:38,220
processing over multiple data sources

427
00:20:38,220 --> 00:20:39,840
where

428
00:20:39,840 --> 00:20:43,320
um we convert the query uh using fully

429
00:20:43,320 --> 00:20:45,780
homomorphic encryption and also have a

430
00:20:45,780 --> 00:20:48,720
query Optimizer that optimizes the

431
00:20:48,720 --> 00:20:50,419
generators

432
00:20:50,419 --> 00:20:51,980
computation

433
00:20:51,980 --> 00:20:54,860
graph a computation plan

434
00:20:54,860 --> 00:21:00,539
and to to enable more efficient results

435
00:21:00,539 --> 00:21:03,299
and in our experiment results we show

436
00:21:03,299 --> 00:21:06,539
that we can actually make this uh

437
00:21:06,539 --> 00:21:10,919
practical uh so for example uh on

438
00:21:10,919 --> 00:21:16,020
uh right on the 32 core host uh for

439
00:21:16,020 --> 00:21:18,480
simple aggregation query with the one

440
00:21:18,480 --> 00:21:20,880
equality check we can process more than

441
00:21:20,880 --> 00:21:22,200
one million records within a minute

442
00:21:22,200 --> 00:21:25,320
showing that this approach can actually

443
00:21:25,320 --> 00:21:27,840
be made practical

444
00:21:27,840 --> 00:21:30,659
so again here we're going to similar

445
00:21:30,659 --> 00:21:33,419
issues as I mentioned earlier with the

446
00:21:33,419 --> 00:21:36,720
The Meta Instagram use case where the

447
00:21:36,720 --> 00:21:39,480
original protocol design and

448
00:21:39,480 --> 00:21:42,900
implementation took a reasonable amount

449
00:21:42,900 --> 00:21:46,140
of time like a few months but however to

450
00:21:46,140 --> 00:21:47,580
actually deploy the actual system

451
00:21:47,580 --> 00:21:51,000
actually takes uh much much longer a lot

452
00:21:51,000 --> 00:21:53,640
more resource to actually build it to

453
00:21:53,640 --> 00:21:58,100
deploy it in production in practice

454
00:21:58,559 --> 00:22:02,159
so here from these two examples we can

455
00:22:02,159 --> 00:22:06,000
see a common theme actually that runs

456
00:22:06,000 --> 00:22:08,580
across all the thousands of papers that

457
00:22:08,580 --> 00:22:10,980
I mentioned before also all those papers

458
00:22:10,980 --> 00:22:13,080
are sitting on the shelf because there's

459
00:22:13,080 --> 00:22:14,940
a huge gap between the original

460
00:22:14,940 --> 00:22:16,980
political design and the single machine

461
00:22:16,980 --> 00:22:19,980
implementation versus actually having

462
00:22:19,980 --> 00:22:23,039
the protocol run in this decentralized

463
00:22:23,039 --> 00:22:25,200
manner and around

464
00:22:25,200 --> 00:22:27,360
um in the real world

465
00:22:27,360 --> 00:22:29,820
so making these cryptographic protocols

466
00:22:29,820 --> 00:22:32,520
real world Deployable is non-trivial for

467
00:22:32,520 --> 00:22:34,020
protocol Developers

468
00:22:34,020 --> 00:22:36,720
and why is this so there are many

469
00:22:36,720 --> 00:22:39,080
challenges besides the original

470
00:22:39,080 --> 00:22:43,020
algorithm design and creating proofs for

471
00:22:43,020 --> 00:22:46,500
security and so on and there are

472
00:22:46,500 --> 00:22:48,620
actually many many real world

473
00:22:48,620 --> 00:22:52,200
system challenges when we try to deploy

474
00:22:52,200 --> 00:22:54,360
these cryptographic protocols in the

475
00:22:54,360 --> 00:22:55,320
real world

476
00:22:55,320 --> 00:22:57,960
so for example when we designed the

477
00:22:57,960 --> 00:23:00,059
Baseline implementation that just runs

478
00:23:00,059 --> 00:23:02,340
on a single machine you don't really

479
00:23:02,340 --> 00:23:03,960
need to care a lot of things you don't

480
00:23:03,960 --> 00:23:06,299
need to care about but when you actually

481
00:23:06,299 --> 00:23:08,820
want to run the protocol in the real

482
00:23:08,820 --> 00:23:12,780
world in this multi-party setting and

483
00:23:12,780 --> 00:23:14,880
each

484
00:23:14,880 --> 00:23:18,840
uh so each uh part each party will be

485
00:23:18,840 --> 00:23:20,700
run on their own machine in their own

486
00:23:20,700 --> 00:23:23,460
system hence we need to handle for

487
00:23:23,460 --> 00:23:26,340
example uh a user system and

488
00:23:26,340 --> 00:23:28,559
authentication and also we need to

489
00:23:28,559 --> 00:23:30,500
handle a real world

490
00:23:30,500 --> 00:23:32,880
communication and interface design

491
00:23:32,880 --> 00:23:35,880
between these different machines and

492
00:23:35,880 --> 00:23:37,740
also

493
00:23:37,740 --> 00:23:41,640
um when you actually have these uh that

494
00:23:41,640 --> 00:23:42,960
have the program running on these

495
00:23:42,960 --> 00:23:44,760
different machines they need to have

496
00:23:44,760 --> 00:23:46,460
their own separate storage

497
00:23:46,460 --> 00:23:48,080
that

498
00:23:48,080 --> 00:23:51,779
there each entity alone can only access

499
00:23:51,779 --> 00:23:54,779
its own storage and also when we have

500
00:23:54,779 --> 00:23:57,600
these systems running oftentimes we need

501
00:23:57,600 --> 00:23:59,940
them to be able to run asynchronously so

502
00:23:59,940 --> 00:24:01,200
for example

503
00:24:01,200 --> 00:24:04,700
with the uh the amount of fairness

504
00:24:04,700 --> 00:24:08,760
measurements uh launch our goal is

505
00:24:08,760 --> 00:24:11,820
actually to be able to evaluate over the

506
00:24:11,820 --> 00:24:15,299
million users and for the scale this

507
00:24:15,299 --> 00:24:17,940
large we need the system actually to be

508
00:24:17,940 --> 00:24:20,760
able to run in a synchronous fashion and

509
00:24:20,760 --> 00:24:22,559
in a scalable fashion

510
00:24:22,559 --> 00:24:25,440
and also in the real world some parties

511
00:24:25,440 --> 00:24:27,900
may want to join a certain

512
00:24:27,900 --> 00:24:30,179
um computation task and some may not

513
00:24:30,179 --> 00:24:34,200
some may go online some but offline in

514
00:24:34,200 --> 00:24:36,480
other other times so there's a lot of

515
00:24:36,480 --> 00:24:38,159
negotiation among the different parties

516
00:24:38,159 --> 00:24:39,360
that's needed

517
00:24:39,360 --> 00:24:41,940
and also for real world political

518
00:24:41,940 --> 00:24:44,360
deployments we need to be able to have

519
00:24:44,360 --> 00:24:47,460
auditability monitoring and debugging

520
00:24:47,460 --> 00:24:49,500
and so on and there are many other

521
00:24:49,500 --> 00:24:51,299
challenges

522
00:24:51,299 --> 00:24:54,299
and also in even more sophisticated

523
00:24:54,299 --> 00:24:56,279
settings we can have even more

524
00:24:56,279 --> 00:24:58,679
challenges so for example uh

525
00:24:58,679 --> 00:25:01,320
investigative learning we need to

526
00:25:01,320 --> 00:25:03,480
um there can be thousands of

527
00:25:03,480 --> 00:25:05,400
participants

528
00:25:05,400 --> 00:25:09,179
um and uh each has its own data and so

529
00:25:09,179 --> 00:25:11,279
on so we need to be able to do even

530
00:25:11,279 --> 00:25:13,080
larger scale participants and data

531
00:25:13,080 --> 00:25:16,080
Discovery and also for more complex

532
00:25:16,080 --> 00:25:19,620
protocol and today it's hard to reuse

533
00:25:19,620 --> 00:25:23,039
existing efforts for like existing

534
00:25:23,039 --> 00:25:25,679
implemented protocols how can we

535
00:25:25,679 --> 00:25:28,580
actually better leverage existing

536
00:25:28,580 --> 00:25:31,679
efforts when we build more complex

537
00:25:31,679 --> 00:25:35,340
protocols and also in certain cases we

538
00:25:35,340 --> 00:25:36,720
may need to handle heterogeneous

539
00:25:36,720 --> 00:25:39,840
computation resources as well

540
00:25:39,840 --> 00:25:43,980
so again and this is a set of shared

541
00:25:43,980 --> 00:25:47,039
challenges that's now unique to just the

542
00:25:47,039 --> 00:25:48,960
two examples that I mentioned it's

543
00:25:48,960 --> 00:25:51,360
actually unique it's actually a set of

544
00:25:51,360 --> 00:25:53,220
shared challenges for any real world

545
00:25:53,220 --> 00:25:55,799
applications of decentralized data

546
00:25:55,799 --> 00:25:58,200
collaboration and decentralized data

547
00:25:58,200 --> 00:26:00,980
science

548
00:26:01,679 --> 00:26:05,520
so these are challenges for uh for

549
00:26:05,520 --> 00:26:07,380
protocol developers

550
00:26:07,380 --> 00:26:10,140
um so hopefully we can help clinical

551
00:26:10,140 --> 00:26:14,779
developers to uh to provide them better

552
00:26:14,779 --> 00:26:18,120
tools to address these issues so that we

553
00:26:18,120 --> 00:26:19,440
don't have these thousands of papers

554
00:26:19,440 --> 00:26:21,539
sitting on the shelf

555
00:26:21,539 --> 00:26:23,760
uh furthermore when we look at the

556
00:26:23,760 --> 00:26:26,880
actual application developers who want

557
00:26:26,880 --> 00:26:28,799
to benefit from all these developed

558
00:26:28,799 --> 00:26:31,919
political crypto protocols and there are

559
00:26:31,919 --> 00:26:34,140
also many many challenges today for them

560
00:26:34,140 --> 00:26:37,760
so today most of the

561
00:26:37,760 --> 00:26:39,620
crypto

562
00:26:39,620 --> 00:26:41,179
Frameworks

563
00:26:41,179 --> 00:26:45,240
and systems as silos each with its own

564
00:26:45,240 --> 00:26:47,520
separates either they are they don't

565
00:26:47,520 --> 00:26:49,799
even have a system for deployment but if

566
00:26:49,799 --> 00:26:53,039
they do oftentimes they have each has

567
00:26:53,039 --> 00:26:55,799
their separate deployments and system

568
00:26:55,799 --> 00:26:58,140
that's not composable so essentially for

569
00:26:58,140 --> 00:27:00,480
a developer whose application developer

570
00:27:00,480 --> 00:27:02,340
who is building an application that may

571
00:27:02,340 --> 00:27:04,220
want to use different

572
00:27:04,220 --> 00:27:07,380
uh cryptographic Protocols are further

573
00:27:07,380 --> 00:27:09,539
uh different Factor learning Frameworks

574
00:27:09,539 --> 00:27:12,480
and so on today they simply it's simply

575
00:27:12,480 --> 00:27:14,760
not possible for them to actually do

576
00:27:14,760 --> 00:27:17,760
this uh in an easy way

577
00:27:17,760 --> 00:27:19,559
um so for example images further

578
00:27:19,559 --> 00:27:21,840
learning Frameworks alone there are

579
00:27:21,840 --> 00:27:25,020
dozens of these siled failure learning

580
00:27:25,020 --> 00:27:28,940
Frameworks each one has uh

581
00:27:28,940 --> 00:27:31,500
has its own set of requirements and

582
00:27:31,500 --> 00:27:35,399
process for deployment and so on and as

583
00:27:35,399 --> 00:27:38,460
today you simply cannot

584
00:27:38,460 --> 00:27:41,399
um application develop simply cannot

585
00:27:41,399 --> 00:27:43,980
easily use them together and actually

586
00:27:43,980 --> 00:27:46,679
even for them to try each one out takes

587
00:27:46,679 --> 00:27:49,440
them a lot of time and efforts and

588
00:27:49,440 --> 00:27:52,799
that's why even for these develops a lot

589
00:27:52,799 --> 00:27:55,140
of these developed Frameworks they are

590
00:27:55,140 --> 00:27:59,460
actually now really being used wisely

591
00:27:59,880 --> 00:28:03,299
so so today what I want to talk about is

592
00:28:03,299 --> 00:28:06,380
to address these issues we are

593
00:28:06,380 --> 00:28:08,760
developing a new approach in particular

594
00:28:08,760 --> 00:28:10,919
we have been developing a new open

595
00:28:10,919 --> 00:28:13,679
source platform called coding with the

596
00:28:13,679 --> 00:28:16,020
goal to make decentralized data science

597
00:28:16,020 --> 00:28:17,039
easy

598
00:28:17,039 --> 00:28:19,559
so the goal for co-learn is to bridge

599
00:28:19,559 --> 00:28:21,840
this Gap that I just mentioned between

600
00:28:21,840 --> 00:28:28,140
the crypto protocol design and the real

601
00:28:28,140 --> 00:28:30,419
world deployments so that we can

602
00:28:30,419 --> 00:28:32,100
actually make crypto personal

603
00:28:32,100 --> 00:28:34,980
deployments all user magnitude cheaper

604
00:28:34,980 --> 00:28:36,840
and faster

605
00:28:36,840 --> 00:28:40,440
and also we want to make it easy for

606
00:28:40,440 --> 00:28:44,220
application developers to utilize these

607
00:28:44,220 --> 00:28:48,240
crypto protocols as building blocks in

608
00:28:48,240 --> 00:28:50,399
their application in particular we want

609
00:28:50,399 --> 00:28:52,020
to be able to make all these different

610
00:28:52,020 --> 00:28:54,480
cryptographic protocols composable in

611
00:28:54,480 --> 00:28:56,760
the unified framework

612
00:28:56,760 --> 00:28:59,220
and in order to achieve these goals

613
00:28:59,220 --> 00:29:02,340
colon has designed and developed a

614
00:29:02,340 --> 00:29:05,100
preset of carefully designed and

615
00:29:05,100 --> 00:29:08,279
standardized decentralized Computing

616
00:29:08,279 --> 00:29:11,100
abstractions and also it takes advantage

617
00:29:11,100 --> 00:29:12,779
of the recent developments in

618
00:29:12,779 --> 00:29:15,539
cryptography and privacy preserving

619
00:29:15,539 --> 00:29:18,200
Technologies

620
00:29:19,679 --> 00:29:22,559
so with the colon and the goal is to

621
00:29:22,559 --> 00:29:24,720
accelerate the research development and

622
00:29:24,720 --> 00:29:26,580
deployments of decentralized data

623
00:29:26,580 --> 00:29:27,600
science

624
00:29:27,600 --> 00:29:29,399
so as I mentioned for research and

625
00:29:29,399 --> 00:29:31,799
political designing with colon it can

626
00:29:31,799 --> 00:29:35,659
help the political designer to

627
00:29:35,659 --> 00:29:39,299
to reach real world deployment much

628
00:29:39,299 --> 00:29:42,120
faster much cheaper and much easier and

629
00:29:42,120 --> 00:29:44,820
hence help the political designer to

630
00:29:44,820 --> 00:29:47,159
lead to much greater real world impact

631
00:29:47,159 --> 00:29:51,240
and also by bringing the different

632
00:29:51,240 --> 00:29:53,580
cryptographic Protocols are on the same

633
00:29:53,580 --> 00:29:55,980
platform it enables standardized

634
00:29:55,980 --> 00:29:59,340
evaluation across different protocols

635
00:29:59,340 --> 00:30:02,399
and Frameworks and make it easier for

636
00:30:02,399 --> 00:30:05,120
comparison

637
00:30:05,279 --> 00:30:08,220
and for application developer colon

638
00:30:08,220 --> 00:30:12,360
helps application developer to match to

639
00:30:12,360 --> 00:30:15,480
utilize cryptographic protocol building

640
00:30:15,480 --> 00:30:19,080
blocks much more easily and enable them

641
00:30:19,080 --> 00:30:22,260
to compose different protocols and in

642
00:30:22,260 --> 00:30:24,059
this way it allows application

643
00:30:24,059 --> 00:30:28,260
developers to benefit much more from the

644
00:30:28,260 --> 00:30:30,659
general ecosystem of new cryptographic

645
00:30:30,659 --> 00:30:34,559
protocol development and also helps

646
00:30:34,559 --> 00:30:36,840
application developer to be much faster

647
00:30:36,840 --> 00:30:39,720
to go to markets when they want to take

648
00:30:39,720 --> 00:30:43,799
a responsible data use approach

649
00:30:43,799 --> 00:30:48,299
and for the overall uh Community it also

650
00:30:48,299 --> 00:30:52,200
helps with uh better reproducibility

651
00:30:52,200 --> 00:30:56,279
better particular reusability and help

652
00:30:56,279 --> 00:30:58,380
the whole Community to come together to

653
00:30:58,380 --> 00:31:02,039
build a more vibrant ecosystem where we

654
00:31:02,039 --> 00:31:04,620
can really leverage each other's

655
00:31:04,620 --> 00:31:07,140
contribution to build something much

656
00:31:07,140 --> 00:31:09,559
greater

657
00:31:09,740 --> 00:31:12,480
so with this platform and with its

658
00:31:12,480 --> 00:31:15,360
capabilities uh Copeland brings benefits

659
00:31:15,360 --> 00:31:17,399
of decentralized data science to

660
00:31:17,399 --> 00:31:19,799
everyone and to the whole society for

661
00:31:19,799 --> 00:31:22,980
individuals using colon it helps users

662
00:31:22,980 --> 00:31:25,320
to better control maintenance control

663
00:31:25,320 --> 00:31:28,260
over their personal data and provide a

664
00:31:28,260 --> 00:31:30,120
stronger privacy and security guarantees

665
00:31:30,120 --> 00:31:33,720
and help users to gain more benefits and

666
00:31:33,720 --> 00:31:36,779
fair value from their personal data

667
00:31:36,779 --> 00:31:39,659
and for company and organizations this

668
00:31:39,659 --> 00:31:42,179
helps other companies and organizations

669
00:31:42,179 --> 00:31:45,299
to break data sellers to make it easier

670
00:31:45,299 --> 00:31:48,000
for different companies organizations

671
00:31:48,000 --> 00:31:51,120
and also for even within the company for

672
00:31:51,120 --> 00:31:52,980
different departments to make it easier

673
00:31:52,980 --> 00:31:55,019
for them to collaborate across

674
00:31:55,019 --> 00:31:56,820
boundaries

675
00:31:56,820 --> 00:31:59,519
to cast data boundaries and reduce the

676
00:31:59,519 --> 00:32:03,360
negotiation efforts and with better data

677
00:32:03,360 --> 00:32:06,000
use help the companies and organizations

678
00:32:06,000 --> 00:32:10,159
to lead to better products and services

679
00:32:11,279 --> 00:32:14,220
so so far I've talked about the vision

680
00:32:14,220 --> 00:32:16,980
and the goals of colon and the benefits

681
00:32:16,980 --> 00:32:20,159
of colon so now let me briefly talk a

682
00:32:20,159 --> 00:32:22,740
little bit about the

683
00:32:22,740 --> 00:32:26,279
um what's uh about the in the the

684
00:32:26,279 --> 00:32:28,740
internet of common and what actually

685
00:32:28,740 --> 00:32:31,679
made it possible for curling to achieve

686
00:32:31,679 --> 00:32:35,100
the set of ambitious goals

687
00:32:35,100 --> 00:32:37,880
so as I mentioned uh

688
00:32:37,880 --> 00:32:42,380
what makes colon unique and

689
00:32:42,380 --> 00:32:45,899
uniquely capable for this is a colon has

690
00:32:45,899 --> 00:32:48,440
a preset of uh

691
00:32:48,440 --> 00:32:52,500
preset of carefully designed and

692
00:32:52,500 --> 00:32:55,220
abstractions and in particular these

693
00:32:55,220 --> 00:32:58,440
abstractions first of its kind and

694
00:32:58,440 --> 00:33:00,539
particular designs for decentralized

695
00:33:00,539 --> 00:33:01,679
computing

696
00:33:01,679 --> 00:33:05,519
and in particular as I mentioned uh one

697
00:33:05,519 --> 00:33:07,380
we need to deal with decentralized

698
00:33:07,380 --> 00:33:10,440
Computing instead of

699
00:33:10,440 --> 00:33:14,399
the in Web 2.0 where you simply have a

700
00:33:14,399 --> 00:33:17,880
centralized trusted third-party

701
00:33:17,880 --> 00:33:20,460
um to handle the computation one needs

702
00:33:20,460 --> 00:33:23,519
to handle a lot more different actually

703
00:33:23,519 --> 00:33:25,320
challenges when it comes to

704
00:33:25,320 --> 00:33:27,779
decentralized Computing and to make

705
00:33:27,779 --> 00:33:30,360
decentralized Computing easier to do we

706
00:33:30,360 --> 00:33:32,640
need new abstractions for this

707
00:33:32,640 --> 00:33:34,260
decentralized computing

708
00:33:34,260 --> 00:33:38,159
so this includes uh decentralized a user

709
00:33:38,159 --> 00:33:40,860
identity and here at essential data use

710
00:33:40,860 --> 00:33:43,940
registry and we developed a number of

711
00:33:43,940 --> 00:33:46,080
different decentralized programming

712
00:33:46,080 --> 00:33:49,200
abstractions and also a decentralized

713
00:33:49,200 --> 00:33:51,539
political encapsulation so that we can

714
00:33:51,539 --> 00:33:52,880
encapsulate

715
00:33:52,880 --> 00:33:55,140
decentralized protocols as building

716
00:33:55,140 --> 00:33:59,880
blocks and to make it easier for others

717
00:33:59,880 --> 00:34:02,820
other developers to use and also for

718
00:34:02,820 --> 00:34:06,620
deployments we make it really easy for

719
00:34:06,620 --> 00:34:09,060
deploying protocols and applications

720
00:34:09,060 --> 00:34:12,480
running on colon so essentially with the

721
00:34:12,480 --> 00:34:14,879
one-click deployments in both cloud and

722
00:34:14,879 --> 00:34:17,820
on-prem settings

723
00:34:17,820 --> 00:34:21,260
so so now let me briefly go into

724
00:34:21,260 --> 00:34:24,599
these abstractions just um at a very

725
00:34:24,599 --> 00:34:28,980
high level uh given uh interest of time

726
00:34:28,980 --> 00:34:31,800
so first default user identity

727
00:34:31,800 --> 00:34:35,820
um again here we Embrace uh web 3.0 so

728
00:34:35,820 --> 00:34:39,300
with the Web 2.0 essentially users do

729
00:34:39,300 --> 00:34:41,099
not even have control of their own

730
00:34:41,099 --> 00:34:43,800
identity users realize

731
00:34:43,800 --> 00:34:48,500
um uh essentially the identity providers

732
00:34:48,500 --> 00:34:52,260
to help them with authentication based

733
00:34:52,260 --> 00:34:54,060
on oftentimes for example their username

734
00:34:54,060 --> 00:34:57,660
and password so in common users have

735
00:34:57,660 --> 00:35:00,180
their own user-owned and user control

736
00:35:00,180 --> 00:35:02,460
identity so each user has their own

737
00:35:02,460 --> 00:35:05,700
public private keypad and so that they

738
00:35:05,700 --> 00:35:08,240
can control and own their own identity

739
00:35:08,240 --> 00:35:11,780
and this enables colon to seamlessly

740
00:35:11,780 --> 00:35:15,119
integrates with the web 3 other web3

741
00:35:15,119 --> 00:35:17,160
applications as well

742
00:35:17,160 --> 00:35:21,060
and with the user-owned identity this

743
00:35:21,060 --> 00:35:26,280
also makes it easy to uh to verify users

744
00:35:26,280 --> 00:35:31,520
identity across different Services again

745
00:35:31,520 --> 00:35:36,720
without relying on any Central trusts so

746
00:35:36,720 --> 00:35:40,740
users can use user controlled identity

747
00:35:40,740 --> 00:35:43,619
to verify across for example storage

748
00:35:43,619 --> 00:35:47,520
communication other decentralized tasks

749
00:35:47,520 --> 00:35:48,500
um

750
00:35:48,500 --> 00:35:52,920
uh right and uh and also this end-to-end

751
00:35:52,920 --> 00:35:55,079
verification can help trace the whole

752
00:35:55,079 --> 00:35:57,900
chain of trust

753
00:35:57,900 --> 00:36:01,619
and uh so colon provides open source SDK

754
00:36:01,619 --> 00:36:06,119
uh to uh to make many tasks uh

755
00:36:06,119 --> 00:36:09,680
um decentralized user identity easy and

756
00:36:09,680 --> 00:36:13,859
a user can use existing tools such as

757
00:36:13,859 --> 00:36:16,680
connecting with metamask uh to login

758
00:36:16,680 --> 00:36:21,540
which is the most common uh locking

759
00:36:21,540 --> 00:36:28,160
Tools in web3 and cryptocurrency today

760
00:36:29,640 --> 00:36:32,579
and with this uh decentralized data

761
00:36:32,579 --> 00:36:33,300
science

762
00:36:33,300 --> 00:36:36,660
we need to have a public data registry

763
00:36:36,660 --> 00:36:39,599
to actually help us to understand

764
00:36:39,599 --> 00:36:42,599
um which users are participating and

765
00:36:42,599 --> 00:36:46,099
what data they may want to uh

766
00:36:46,099 --> 00:36:48,599
they may want to use to join

767
00:36:48,599 --> 00:36:51,359
collaborative this decentralized data

768
00:36:51,359 --> 00:36:53,099
science tasks

769
00:36:53,099 --> 00:36:58,980
so um so again here we a colon does not

770
00:36:58,980 --> 00:37:03,660
rely on an essentialized trust so the

771
00:37:03,660 --> 00:37:07,680
data registry can be provided on the

772
00:37:07,680 --> 00:37:09,000
distribution

773
00:37:09,000 --> 00:37:11,660
the data content itself never leaves

774
00:37:11,660 --> 00:37:15,420
other user's own private storage or it

775
00:37:15,420 --> 00:37:17,720
can be stored in inclusive form

776
00:37:17,720 --> 00:37:20,640
in decentralized storage

777
00:37:20,640 --> 00:37:24,420
and the user gets to Define policies for

778
00:37:24,420 --> 00:37:27,900
its own data how its data should be used

779
00:37:27,900 --> 00:37:29,760
so essentially provide fingering control

780
00:37:29,760 --> 00:37:33,720
for users over the usage of their data

781
00:37:33,720 --> 00:37:37,800
and colon also provides a framework to

782
00:37:37,800 --> 00:37:40,440
help with the standardization of data

783
00:37:40,440 --> 00:37:44,900
format and metadata format and so on

784
00:37:45,020 --> 00:37:48,420
and with the public data registry it

785
00:37:48,420 --> 00:37:50,460
makes decentralized data science

786
00:37:50,460 --> 00:37:54,000
um much easier as a data suit consumer

787
00:37:54,000 --> 00:37:56,359
for example a medical

788
00:37:56,359 --> 00:37:59,300
researcher or

789
00:37:59,300 --> 00:38:02,880
others they are some other applications

790
00:38:02,880 --> 00:38:05,160
and they can then search through the

791
00:38:05,160 --> 00:38:07,619
public data registry for proper data

792
00:38:07,619 --> 00:38:10,940
sets with matching usage specifications

793
00:38:10,940 --> 00:38:15,440
and also they could even purchase

794
00:38:15,440 --> 00:38:19,680
certain tokens or authorization code and

795
00:38:19,680 --> 00:38:22,619
to be able to use the data a certain

796
00:38:22,619 --> 00:38:26,540
data in a policy compliant way

797
00:38:27,440 --> 00:38:33,060
kodan also provides a number of Novel uh

798
00:38:33,060 --> 00:38:36,000
decentralized programming abstractions

799
00:38:36,000 --> 00:38:37,880
so let's look at the difference between

800
00:38:37,880 --> 00:38:40,619
traditional programming abstractions in

801
00:38:40,619 --> 00:38:42,839
the traditional setting uh when the

802
00:38:42,839 --> 00:38:44,460
process is drawn on a single Machine

803
00:38:44,460 --> 00:38:45,859
versus

804
00:38:45,859 --> 00:38:47,940
abstractions for decentralized

805
00:38:47,940 --> 00:38:50,099
programming

806
00:38:50,099 --> 00:38:52,500
so in the traditional setting a process

807
00:38:52,500 --> 00:38:54,359
is run on a single machine and in

808
00:38:54,359 --> 00:38:55,500
general you don't need the concept of

809
00:38:55,500 --> 00:38:58,440
using and the process essentially gets

810
00:38:58,440 --> 00:39:00,980
to have access to

811
00:39:00,980 --> 00:39:03,960
its relevant data and communication is

812
00:39:03,960 --> 00:39:08,700
handled as IO and and also in this

813
00:39:08,700 --> 00:39:11,880
traditional setting essentially you have

814
00:39:11,880 --> 00:39:13,859
libraries with functions that can be

815
00:39:13,859 --> 00:39:18,000
used so one application developer that

816
00:39:18,000 --> 00:39:22,020
wants to for example leverage our reuse

817
00:39:22,020 --> 00:39:24,240
existing functions they can just include

818
00:39:24,240 --> 00:39:27,359
right a library and then call the

819
00:39:27,359 --> 00:39:30,060
function that it needs but however when

820
00:39:30,060 --> 00:39:33,599
we look at decentralized uh Computing

821
00:39:33,599 --> 00:39:35,760
things are very different so in this

822
00:39:35,760 --> 00:39:39,660
case and they um a given protocol as I

823
00:39:39,660 --> 00:39:43,200
shown in the early examples uh the its

824
00:39:43,200 --> 00:39:44,940
execution will actually run across

825
00:39:44,940 --> 00:39:47,640
multiple machines and also involves

826
00:39:47,640 --> 00:39:49,380
multiple users so it needs to have a

827
00:39:49,380 --> 00:39:52,020
notion of the different users

828
00:39:52,020 --> 00:39:56,040
and each machine or each node may have

829
00:39:56,040 --> 00:39:59,460
access to its own private storage

830
00:39:59,460 --> 00:40:03,000
um and may have different views of data

831
00:40:03,000 --> 00:40:05,700
available and also need to be able to

832
00:40:05,700 --> 00:40:08,339
handle Communications across different

833
00:40:08,339 --> 00:40:11,660
machines and in particular in this case

834
00:40:11,660 --> 00:40:14,760
if an application developer wants to

835
00:40:14,760 --> 00:40:17,160
reuse a protocol that actually runs

836
00:40:17,160 --> 00:40:19,680
across multiple machines it cannot just

837
00:40:19,680 --> 00:40:22,680
simply include the protocol as a library

838
00:40:22,680 --> 00:40:24,599
and then just call a function in that

839
00:40:24,599 --> 00:40:27,780
library because in the traditional the

840
00:40:27,780 --> 00:40:30,240
traditional setting that simply you

841
00:40:30,240 --> 00:40:33,240
simply cannot do this in the traditional

842
00:40:33,240 --> 00:40:37,020
setting or the traditional approach

843
00:40:37,020 --> 00:40:42,180
so in Colon we provide new programming

844
00:40:42,180 --> 00:40:45,560
abstractions to enable these type of

845
00:40:45,560 --> 00:40:48,300
decentralized computing and to help

846
00:40:48,300 --> 00:40:51,540
address all of these challenges to make

847
00:40:51,540 --> 00:40:54,060
it um much easier for protocol

848
00:40:54,060 --> 00:40:58,160
developers and application Developers

849
00:40:58,680 --> 00:41:02,160
so in particular in order to be able to

850
00:41:02,160 --> 00:41:05,400
reuse these cryptographic protocols is

851
00:41:05,400 --> 00:41:07,500
actually run across multiple machines

852
00:41:07,500 --> 00:41:10,319
multiple parties as I mentioned the

853
00:41:10,319 --> 00:41:13,440
traditional notion of a library simply

854
00:41:13,440 --> 00:41:15,619
is not sufficient simply

855
00:41:15,619 --> 00:41:19,260
cannot actually do the job so in color

856
00:41:19,260 --> 00:41:22,800
we developed a new mechanism to

857
00:41:22,800 --> 00:41:25,980
encapsulate these multi-party protocols

858
00:41:25,980 --> 00:41:30,540
that run across multiple machines and so

859
00:41:30,540 --> 00:41:31,760
essentially we can encapsulate

860
00:41:31,760 --> 00:41:34,440
encapsulate this multi-party critical

861
00:41:34,440 --> 00:41:39,599
implementations as extensions and and as

862
00:41:39,599 --> 00:41:41,640
we can encapsulate them as extensions

863
00:41:41,640 --> 00:41:43,819
and enable

864
00:41:43,819 --> 00:41:47,240
ease of use of this encapsulated

865
00:41:47,240 --> 00:41:51,420
multi-party protocols and we also

866
00:41:51,420 --> 00:41:54,599
provide a registry for these multi-party

867
00:41:54,599 --> 00:41:57,839
protocols in a political registry and

868
00:41:57,839 --> 00:42:00,599
they also can be stored on a distribute

869
00:42:00,599 --> 00:42:02,940
ledger so that it doesn't again doesn't

870
00:42:02,940 --> 00:42:05,220
require any centralized Trust

871
00:42:05,220 --> 00:42:09,839
and uh we uh Colonial supervised

872
00:42:09,839 --> 00:42:12,359
automatic execution environments

873
00:42:12,359 --> 00:42:16,160
management as well

874
00:42:17,579 --> 00:42:20,520
and code learning provides built-in

875
00:42:20,520 --> 00:42:25,380
mechanisms to enable easy deployments in

876
00:42:25,380 --> 00:42:28,200
of code learn system in both clouds and

877
00:42:28,200 --> 00:42:29,940
on-prem environments

878
00:42:29,940 --> 00:42:31,440
so

879
00:42:31,440 --> 00:42:34,560
um for clouds deployments we can enable

880
00:42:34,560 --> 00:42:38,700
one-click deployment across multiple

881
00:42:38,700 --> 00:42:42,420
clouds with auto screen and scaling

882
00:42:42,420 --> 00:42:46,020
um using underlying tools Sky pilots and

883
00:42:46,020 --> 00:42:50,339
also colon provides capabilities for

884
00:42:50,339 --> 00:42:52,980
automatic service Discovery and

885
00:42:52,980 --> 00:42:55,380
credential managements with the data use

886
00:42:55,380 --> 00:42:58,200
registry and also automatic vision and

887
00:42:58,200 --> 00:43:00,599
dependency checking with the protocol

888
00:43:00,599 --> 00:43:02,660
registry

889
00:43:02,660 --> 00:43:06,180
so to uh so put to put all these

890
00:43:06,180 --> 00:43:07,140
together

891
00:43:07,140 --> 00:43:10,200
uh a colon here is the colon

892
00:43:10,200 --> 00:43:12,780
architecture uh we won't actually go

893
00:43:12,780 --> 00:43:14,880
into the detail for the different

894
00:43:14,880 --> 00:43:18,780
components within a colon survey which

895
00:43:18,780 --> 00:43:21,900
actually handles all these uh provides

896
00:43:21,900 --> 00:43:25,040
the abstraction of communication storage

897
00:43:25,040 --> 00:43:27,980
uh user management

898
00:43:27,980 --> 00:43:32,420
and and task scheduling and many other

899
00:43:32,420 --> 00:43:35,880
capabilities and

900
00:43:35,880 --> 00:43:40,040
and on top of the the colon architecture

901
00:43:40,040 --> 00:43:42,540
we essentially provide two different

902
00:43:42,540 --> 00:43:47,220
types of sdks so one type of SDK is for

903
00:43:47,220 --> 00:43:51,300
protocol uh developer designer SDK to

904
00:43:51,300 --> 00:43:54,119
enable researchers and cryptographic

905
00:43:54,119 --> 00:43:57,599
designers to build their

906
00:43:57,599 --> 00:44:01,520
um to build their new protocols

907
00:44:01,520 --> 00:44:04,740
and and then once they Implement that

908
00:44:04,740 --> 00:44:08,220
protocols on colon essentially a codon

909
00:44:08,220 --> 00:44:13,200
can handle all the rest of the the

910
00:44:13,200 --> 00:44:15,720
system development and deployment as I

911
00:44:15,720 --> 00:44:16,980
mentioned earlier

912
00:44:16,980 --> 00:44:19,040
and also in addition

913
00:44:19,040 --> 00:44:22,440
and a colon provides an application

914
00:44:22,440 --> 00:44:26,460
developer SDK which enables application

915
00:44:26,460 --> 00:44:30,740
developers to more easily use existing

916
00:44:30,740 --> 00:44:33,720
uh cryptographic protocols as building

917
00:44:33,720 --> 00:44:36,540
blocks inside their application

918
00:44:36,540 --> 00:44:39,180
so with the colon architecture and

919
00:44:39,180 --> 00:44:42,240
platform as I mentioned before so with

920
00:44:42,240 --> 00:44:45,119
the the protocol designer SDK and

921
00:44:45,119 --> 00:44:48,060
application developer SDK this helps the

922
00:44:48,060 --> 00:44:52,880
protocol designer to get their protocol

923
00:44:52,880 --> 00:44:56,099
from design to actual real world

924
00:44:56,099 --> 00:44:59,040
employment deployment much much faster

925
00:44:59,040 --> 00:45:01,460
orders of magnitude

926
00:45:01,460 --> 00:45:05,040
faster and cheaper and easier and also

927
00:45:05,040 --> 00:45:08,160
make these protocols much more easily

928
00:45:08,160 --> 00:45:13,160
used by application Developers

929
00:45:13,740 --> 00:45:16,980
so to summarize

930
00:45:16,980 --> 00:45:20,640
um I mentioned previously uh many at

931
00:45:20,640 --> 00:45:24,020
least have many challenges for uh

932
00:45:24,020 --> 00:45:27,359
bringing cryptographic protocols to real

933
00:45:27,359 --> 00:45:29,160
world deployment

934
00:45:29,160 --> 00:45:32,160
and with colon with the abstractions

935
00:45:32,160 --> 00:45:34,619
that I mentioned including decentralized

936
00:45:34,619 --> 00:45:36,540
identity the decentralized programming

937
00:45:36,540 --> 00:45:38,640
abstractions decentralized political

938
00:45:38,640 --> 00:45:42,359
encapsulation the data use strategy and

939
00:45:42,359 --> 00:45:43,579
also

940
00:45:43,579 --> 00:45:47,780
one command deployments and many others

941
00:45:47,780 --> 00:45:52,859
this can address the the many challenges

942
00:45:52,859 --> 00:45:55,440
that I mentioned and significantly

943
00:45:55,440 --> 00:45:59,280
simplify decentralized data science

944
00:45:59,280 --> 00:46:02,420
so with this uh colon

945
00:46:02,420 --> 00:46:06,359
signifi reduces the time and effort uh

946
00:46:06,359 --> 00:46:08,819
from design to deployment for new

947
00:46:08,819 --> 00:46:11,640
protocols by other than magnitude

948
00:46:11,640 --> 00:46:14,160
so as I mentioned

949
00:46:14,160 --> 00:46:15,839
um in the first example that I mentioned

950
00:46:15,839 --> 00:46:17,940
the Privacy preserving AI model fairness

951
00:46:17,940 --> 00:46:21,180
measurements uh with the code and

952
00:46:21,180 --> 00:46:24,859
platform it can reduce the actual system

953
00:46:24,859 --> 00:46:27,900
development deployments from many many

954
00:46:27,900 --> 00:46:30,359
months to just

955
00:46:30,359 --> 00:46:32,359
um a couple weeks

956
00:46:32,359 --> 00:46:35,400
and similarly for the second example

957
00:46:35,400 --> 00:46:38,819
that I mentioned for pre-share for

958
00:46:38,819 --> 00:46:41,700
privacy preserving data analytics but

959
00:46:41,700 --> 00:46:44,660
similarly it can significantly reduce

960
00:46:44,660 --> 00:46:48,200
the system development and deployment

961
00:46:48,200 --> 00:46:52,500
from uh right from many months to a few

962
00:46:52,500 --> 00:46:53,400
weeks

963
00:46:53,400 --> 00:46:55,560
and

964
00:46:55,560 --> 00:46:59,640
and the Collins application uh usage

965
00:46:59,640 --> 00:47:02,880
scenario is far broader than the

966
00:47:02,880 --> 00:47:06,300
examples that I have just mentioned so

967
00:47:06,300 --> 00:47:11,760
another example here is also our also

968
00:47:11,760 --> 00:47:14,280
recent working in collaboration and with

969
00:47:14,280 --> 00:47:17,700
researchers at Berkeley on developing

970
00:47:17,700 --> 00:47:20,400
new approaches for proactive Dynamic

971
00:47:20,400 --> 00:47:22,800
secret management

972
00:47:22,800 --> 00:47:26,099
uh a secret proactive Dynamic secret

973
00:47:26,099 --> 00:47:28,980
sharing and uh and then in this

974
00:47:28,980 --> 00:47:32,160
particular case we can actually reduce

975
00:47:32,160 --> 00:47:34,940
the system development deployment

976
00:47:34,940 --> 00:47:37,500
efforts from many months to actually

977
00:47:37,500 --> 00:47:41,059
just a few days

978
00:47:41,880 --> 00:47:45,720
so common doesn't uh just make

979
00:47:45,720 --> 00:47:49,079
developing new crypto protocols uh

980
00:47:49,079 --> 00:47:52,260
easier colon can also easily integrate

981
00:47:52,260 --> 00:47:55,319
existing protocols and Frameworks into

982
00:47:55,319 --> 00:47:58,260
this unified platform for composability

983
00:47:58,260 --> 00:48:01,079
and ease of deployments

984
00:48:01,079 --> 00:48:05,160
so for example uh in Colon we have

985
00:48:05,160 --> 00:48:08,640
integrated with the leading privacy

986
00:48:08,640 --> 00:48:11,520
presumably machine learning uh protocols

987
00:48:11,520 --> 00:48:13,020
and Frameworks for example in this case

988
00:48:13,020 --> 00:48:16,500
Krypton and to make it much easier to

989
00:48:16,500 --> 00:48:19,859
deploy Krypton and also at the same time

990
00:48:19,859 --> 00:48:22,800
to enable complexibility to make it

991
00:48:22,800 --> 00:48:26,040
easier for application developers to use

992
00:48:26,040 --> 00:48:29,339
crypto and in addition to other crypto

993
00:48:29,339 --> 00:48:30,900
protocols

994
00:48:30,900 --> 00:48:34,099
and another example of integration is

995
00:48:34,099 --> 00:48:36,960
Copeland also has integrated state of

996
00:48:36,960 --> 00:48:39,780
the art fantasy learning for including

997
00:48:39,780 --> 00:48:41,520
both horizontal and vertical Factory

998
00:48:41,520 --> 00:48:44,400
running into the platform including

999
00:48:44,400 --> 00:48:49,020
flower for horizontal feather learning

1000
00:48:49,020 --> 00:48:51,359
and fair tree for both horizontal and

1001
00:48:51,359 --> 00:48:53,640
vertical Factory learning

1002
00:48:53,640 --> 00:48:56,700
as examples and also we have ongoing

1003
00:48:56,700 --> 00:49:01,559
work and using the system to Build a

1004
00:49:01,559 --> 00:49:04,680
Better Learning framework Benchmark so

1005
00:49:04,680 --> 00:49:08,579
that we can more easily Benchmark across

1006
00:49:08,579 --> 00:49:11,220
the dozens of different culture learning

1007
00:49:11,220 --> 00:49:14,700
Frameworks and help developers to best

1008
00:49:14,700 --> 00:49:16,740
choose which further the new framework

1009
00:49:16,740 --> 00:49:20,339
is the best for their use given their

1010
00:49:20,339 --> 00:49:24,200
particular usage scenario

1011
00:49:25,800 --> 00:49:30,059
so so all these are examples and that

1012
00:49:30,059 --> 00:49:34,079
code learning can make it both easy for

1013
00:49:34,079 --> 00:49:36,780
protocol crypto critical developers to

1014
00:49:36,780 --> 00:49:39,599
build new cryptical new protocols as

1015
00:49:39,599 --> 00:49:43,040
well as integrating existing

1016
00:49:43,040 --> 00:49:46,319
protocols into the platform for better

1017
00:49:46,319 --> 00:49:48,980
composability and ease of deployments

1018
00:49:48,980 --> 00:49:54,180
and colon provides a unified platform

1019
00:49:54,180 --> 00:49:56,579
today with the state of the Arts

1020
00:49:56,579 --> 00:49:59,640
cryptographic protocols including

1021
00:49:59,640 --> 00:50:02,520
um these examples that damage now some

1022
00:50:02,520 --> 00:50:05,220
are still in progress for final

1023
00:50:05,220 --> 00:50:07,819
integration

1024
00:50:08,420 --> 00:50:11,119
so with all these uh integrated

1025
00:50:11,119 --> 00:50:13,319
cryptographic protocols as I mentioned

1026
00:50:13,319 --> 00:50:15,780
the color also makes it really easy for

1027
00:50:15,780 --> 00:50:18,780
application developers to utilize these

1028
00:50:18,780 --> 00:50:21,420
built-in cryptographic protocols so here

1029
00:50:21,420 --> 00:50:25,380
is just one example and that um

1030
00:50:25,380 --> 00:50:28,880
uh that we provide as an illustrative

1031
00:50:28,880 --> 00:50:34,140
example so so in this case we use codern

1032
00:50:34,140 --> 00:50:36,140
to build actually

1033
00:50:36,140 --> 00:50:40,740
the first uh decentralized taxes Holdem

1034
00:50:40,740 --> 00:50:46,619
tournaments in the real world and the um

1035
00:50:46,619 --> 00:50:50,880
so this uh poker game uh uses MPC

1036
00:50:50,880 --> 00:50:53,640
protocol with the secure shuffling and

1037
00:50:53,640 --> 00:50:55,619
also provides cryptographic certificates

1038
00:50:55,619 --> 00:50:59,940
Afghan results for score tracking and we

1039
00:50:59,940 --> 00:51:02,280
have easy integration so users can

1040
00:51:02,280 --> 00:51:06,599
actually just simply play using Telegram

1041
00:51:06,599 --> 00:51:10,400
so so all this uh so this is an example

1042
00:51:10,400 --> 00:51:14,520
uh illustrating the ease of building a

1043
00:51:14,520 --> 00:51:17,599
decentralized data applications on colon

1044
00:51:17,599 --> 00:51:20,819
and normally this would take

1045
00:51:20,819 --> 00:51:23,700
uh again many many months of work

1046
00:51:23,700 --> 00:51:27,440
whereas using Color it actually takes

1047
00:51:27,440 --> 00:51:32,059
significantly less time only weeks

1048
00:51:32,059 --> 00:51:36,300
so while we have a system like colon we

1049
00:51:36,300 --> 00:51:38,700
can truly enable uh what we call

1050
00:51:38,700 --> 00:51:42,359
decentralized data science and and build

1051
00:51:42,359 --> 00:51:44,700
or we call data comments for

1052
00:51:44,700 --> 00:51:46,500
decentralized data science

1053
00:51:46,500 --> 00:51:50,099
so in the setting uh users are data

1054
00:51:50,099 --> 00:51:52,500
owners and they can register their data

1055
00:51:52,500 --> 00:51:56,099
sets with their use data use policies

1056
00:51:56,099 --> 00:51:59,819
specified in this decentralized data

1057
00:51:59,819 --> 00:52:04,319
catalogs and data consumer and analysts

1058
00:52:04,319 --> 00:52:07,260
can search through the data catalog to

1059
00:52:07,260 --> 00:52:09,960
find relevant data and they can write it

1060
00:52:09,960 --> 00:52:11,579
analytics and machine learning programs

1061
00:52:11,579 --> 00:52:14,099
over different data sets and data

1062
00:52:14,099 --> 00:52:15,599
sources

1063
00:52:15,599 --> 00:52:20,760
and then the uh the the data analysis

1064
00:52:20,760 --> 00:52:22,680
and machine learning program essentially

1065
00:52:22,680 --> 00:52:26,240
uh that's built on kodan can then be run

1066
00:52:26,240 --> 00:52:30,480
across the different uh entities across

1067
00:52:30,480 --> 00:52:33,059
the different machines in this secure

1068
00:52:33,059 --> 00:52:36,599
distributed computing platform while

1069
00:52:36,599 --> 00:52:39,359
ensuring the program is compliant with

1070
00:52:39,359 --> 00:52:42,500
the desired policies

1071
00:52:42,500 --> 00:52:44,880
with this approach

1072
00:52:44,880 --> 00:52:47,160
it can significantly reduce the friction

1073
00:52:47,160 --> 00:52:50,460
of data usage and remove data silos and

1074
00:52:50,460 --> 00:52:54,359
enforce security and privacy protection

1075
00:52:54,359 --> 00:52:57,780
and with the essentiality designs we can

1076
00:52:57,780 --> 00:53:00,780
have broad spectrum of use cases to

1077
00:53:00,780 --> 00:53:05,280
benefit Society so for example uh to one

1078
00:53:05,280 --> 00:53:07,980
can use further learning to gain Data

1079
00:53:07,980 --> 00:53:10,440
Insights from multiple medical

1080
00:53:10,440 --> 00:53:12,720
institutions to uh to conduct

1081
00:53:12,720 --> 00:53:15,660
collaborative medical research and one

1082
00:53:15,660 --> 00:53:19,020
can and also we can use colon and a

1083
00:53:19,020 --> 00:53:21,420
platform to enable to provide personal

1084
00:53:21,420 --> 00:53:24,119
data vaults to allow individuals to use

1085
00:53:24,119 --> 00:53:27,420
uh to have their to enable their data to

1086
00:53:27,420 --> 00:53:32,180
be utilized without compromising privacy

1087
00:53:32,180 --> 00:53:35,579
and and then in this case even for the

1088
00:53:35,579 --> 00:53:39,660
survey so for example in the AI model

1089
00:53:39,660 --> 00:53:42,000
fairness measurements and there I

1090
00:53:42,000 --> 00:53:44,460
mentioned there is actually a survey

1091
00:53:44,460 --> 00:53:45,839
operator and then in that particular

1092
00:53:45,839 --> 00:53:49,260
case the survey operator actually knows

1093
00:53:49,260 --> 00:53:52,200
um the survey results

1094
00:53:52,200 --> 00:53:54,420
um but with the central active designs

1095
00:53:54,420 --> 00:53:58,040
and colon we can even run and we can

1096
00:53:58,040 --> 00:54:00,540
organize this vote and service without

1097
00:54:00,540 --> 00:54:02,940
even requiring a centralized survey

1098
00:54:02,940 --> 00:54:04,200
poster

1099
00:54:04,200 --> 00:54:07,140
and also we plan to conduct

1100
00:54:07,140 --> 00:54:09,720
decentralized large model training and

1101
00:54:09,720 --> 00:54:12,740
integrate and enhance existing

1102
00:54:12,740 --> 00:54:15,960
Frameworks to further optimize the

1103
00:54:15,960 --> 00:54:19,640
performance in decentralized setting

1104
00:54:19,740 --> 00:54:21,960
so with decentralized data science and

1105
00:54:21,960 --> 00:54:23,880
data Commons

1106
00:54:23,880 --> 00:54:27,380
um I I truly believe that this will

1107
00:54:27,380 --> 00:54:32,760
become a a common place in 10 years so

1108
00:54:32,760 --> 00:54:34,500
in 10 years

1109
00:54:34,500 --> 00:54:36,540
um we have these little trials into the

1110
00:54:36,540 --> 00:54:40,079
comments and to be the predominant ways

1111
00:54:40,079 --> 00:54:42,780
for utilizing diverse sources of data

1112
00:54:42,780 --> 00:54:46,140
enabling ownership economy where uses

1113
00:54:46,140 --> 00:54:48,540
benefits from their data as owners and

1114
00:54:48,540 --> 00:54:49,859
partners

1115
00:54:49,859 --> 00:54:54,119
and also uh in 10 years we'll have data

1116
00:54:54,119 --> 00:54:57,900
stewards fiduciaries and Justice and to

1117
00:54:57,900 --> 00:55:00,540
be a new class of entities important in

1118
00:55:00,540 --> 00:55:03,000
the data ecosystem managing protecting

1119
00:55:03,000 --> 00:55:05,520
users data and growing its value so

1120
00:55:05,520 --> 00:55:08,880
essentially they can help users to adopt

1121
00:55:08,880 --> 00:55:13,799
uh sets their data use policies and that

1122
00:55:13,799 --> 00:55:16,920
best that help them to benefit from that

1123
00:55:16,920 --> 00:55:19,859
data and provide privacy protection for

1124
00:55:19,859 --> 00:55:21,119
their data

1125
00:55:21,119 --> 00:55:24,420
and in 10 years huge economic value will

1126
00:55:24,420 --> 00:55:26,099
be created through these new forms of

1127
00:55:26,099 --> 00:55:28,559
Data Trust data comments orders of

1128
00:55:28,559 --> 00:55:31,380
magnitude higher than today's data

1129
00:55:31,380 --> 00:55:33,859
Marketplace

1130
00:55:34,859 --> 00:55:36,180
so

1131
00:55:36,180 --> 00:55:36,839
um

1132
00:55:36,839 --> 00:55:38,940
so with that

1133
00:55:38,940 --> 00:55:43,980
um oh what's I I hope everyone uh got a

1134
00:55:43,980 --> 00:55:47,520
glimpse of the Visions the goals and the

1135
00:55:47,520 --> 00:55:50,040
capabilities of colon so what I would

1136
00:55:50,040 --> 00:55:53,099
like to encourage here is to encourage

1137
00:55:53,099 --> 00:55:56,940
everyone to try out colon and use colon

1138
00:55:56,940 --> 00:55:59,400
to build your own protocols and

1139
00:55:59,400 --> 00:56:02,460
applications so we are preparing for an

1140
00:56:02,460 --> 00:56:04,619
initial release very soon and hopefully

1141
00:56:04,619 --> 00:56:08,400
by end of the month and with this

1142
00:56:08,400 --> 00:56:10,380
release it will include open source code

1143
00:56:10,380 --> 00:56:13,440
and server implementation and also the

1144
00:56:13,440 --> 00:56:15,480
sdks that I mentioned in multiple

1145
00:56:15,480 --> 00:56:17,819
languages including Ras C plus plus

1146
00:56:17,819 --> 00:56:21,780
python JavaScript and so on and also it

1147
00:56:21,780 --> 00:56:24,720
will come with the integrated protocol

1148
00:56:24,720 --> 00:56:29,040
examples and that that I mentioned

1149
00:56:29,040 --> 00:56:33,359
so I hope and that you can join us and

1150
00:56:33,359 --> 00:56:36,140
start our journey and contributing

1151
00:56:36,140 --> 00:56:39,299
crypto political building blocks and

1152
00:56:39,299 --> 00:56:42,839
writing easy to use decentralized data

1153
00:56:42,839 --> 00:56:45,599
science applications uh using colon

1154
00:56:45,599 --> 00:56:47,400
again

1155
00:56:47,400 --> 00:56:48,240
um

1156
00:56:48,240 --> 00:56:51,420
the whole Community has developed such a

1157
00:56:51,420 --> 00:56:54,119
great algorithms and a huge advancements

1158
00:56:54,119 --> 00:56:56,579
in the Technologies so instead of just

1159
00:56:56,579 --> 00:56:58,559
having the thousands of papers sitting

1160
00:56:58,559 --> 00:57:01,079
on a shelf and the goal of code learning

1161
00:57:01,079 --> 00:57:04,260
is to make it much much easier

1162
00:57:04,260 --> 00:57:07,260
um uh and essentially bring all the

1163
00:57:07,260 --> 00:57:12,720
magnitudes uh improve improvements uh to

1164
00:57:12,720 --> 00:57:15,900
make it easier to bring these

1165
00:57:15,900 --> 00:57:18,480
cryptographic algorithms and and these

1166
00:57:18,480 --> 00:57:22,319
thousands of papers into the real world

1167
00:57:22,319 --> 00:57:26,460
so with that uh you uh to stay tuned you

1168
00:57:26,460 --> 00:57:29,700
can join us on the mailing list at this

1169
00:57:29,700 --> 00:57:34,399
Google group called learn Dash stuff

1170
00:57:37,079 --> 00:57:40,160
thank you

1171
00:57:44,760 --> 00:57:46,680
thanks a lot of them

1172
00:57:46,680 --> 00:57:50,160
so let's have some questions

1173
00:57:50,160 --> 00:57:53,180
um yeah do you want to come here

1174
00:57:57,540 --> 00:58:00,119
uh hi professor Denson I think this is

1175
00:58:00,119 --> 00:58:02,819
quite interesting talk because we have a

1176
00:58:02,819 --> 00:58:05,480
lot of like uh analogies that we call

1177
00:58:05,480 --> 00:58:08,460
blockchain decentralized AI and today I

1178
00:58:08,460 --> 00:58:11,040
heard something you develop a corner is

1179
00:58:11,040 --> 00:58:13,380
decentralize the data science so I'm

1180
00:58:13,380 --> 00:58:15,540
wondering like what is the connection so

1181
00:58:15,540 --> 00:58:17,460
for example right now

1182
00:58:17,460 --> 00:58:20,819
um we for Behavioral Science we use uh

1183
00:58:20,819 --> 00:58:23,099
old tree it's like a centralized plan

1184
00:58:23,099 --> 00:58:24,180
for

1185
00:58:24,180 --> 00:58:27,599
um and also Amazon mechanic term to

1186
00:58:27,599 --> 00:58:31,079
collect the user's data uh it sounds um

1187
00:58:31,079 --> 00:58:33,240
it cannot protect the user's privacy

1188
00:58:33,240 --> 00:58:35,900
also there might be a lot of bots

1189
00:58:35,900 --> 00:58:40,680
pretend to be the subject to answer a

1190
00:58:40,680 --> 00:58:44,040
service so it sounds like your plan for

1191
00:58:44,040 --> 00:58:46,020
um can help us solve those problems so

1192
00:58:46,020 --> 00:58:48,359
I'm just wondering whether what's the

1193
00:58:48,359 --> 00:58:50,520
connection between we deploy the

1194
00:58:50,520 --> 00:58:53,460
software on blockchain and we deploy the

1195
00:58:53,460 --> 00:58:56,220
software on your plan pool thank you so

1196
00:58:56,220 --> 00:58:56,940
much

1197
00:58:56,940 --> 00:58:58,980
I see okay great yeah thanks for the

1198
00:58:58,980 --> 00:59:01,980
question so as as you can see so Colin

1199
00:59:01,980 --> 00:59:05,040
also like um leverages uh blockchain and

1200
00:59:05,040 --> 00:59:07,559
distribution for its Registries so it

1201
00:59:07,559 --> 00:59:09,240
doesn't need to rely on and centralize

1202
00:59:09,240 --> 00:59:11,400
the parties

1203
00:59:11,400 --> 00:59:15,420
um uh so however uh for the kind of

1204
00:59:15,420 --> 00:59:17,099
application that you mentioned you

1205
00:59:17,099 --> 00:59:20,579
actually can't uh you cannot adjust to

1206
00:59:20,579 --> 00:59:21,960
it using blockchain like today's

1207
00:59:21,960 --> 00:59:25,260
blockchain uh all the data and computer

1208
00:59:25,260 --> 00:59:27,720
on the blockchain is our public and so

1209
00:59:27,720 --> 00:59:29,520
for sensitive data you cannot really put

1210
00:59:29,520 --> 00:59:31,440
on the blockchain and you cannot do this

1211
00:59:31,440 --> 00:59:34,380
uh computational sensitive data on the

1212
00:59:34,380 --> 00:59:37,260
blockchain either and so so that's why

1213
00:59:37,260 --> 00:59:40,020
so with colon and it's a carefully

1214
00:59:40,020 --> 00:59:42,599
designed and that utilizes

1215
00:59:42,599 --> 00:59:46,140
you know a different uh essentially like

1216
00:59:46,140 --> 00:59:48,540
cryptographic protocols for secure

1217
00:59:48,540 --> 00:59:51,119
Computing and you can and then you can

1218
00:59:51,119 --> 00:59:53,819
use blockchain for certain uh like

1219
00:59:53,819 --> 00:59:58,020
coordination and registry and so on and

1220
00:59:58,020 --> 01:00:00,780
also right so so colon will continue to

1221
01:00:00,780 --> 01:00:02,760
integrate other capabilities as well

1222
01:00:02,760 --> 01:00:05,760
including uh secure Computing in a

1223
01:00:05,760 --> 01:00:09,240
secure enclave and uh right and other

1224
01:00:09,240 --> 01:00:11,779
capabilities

1225
01:00:12,420 --> 01:00:15,420
and also right I'm I'm happy to discuss

1226
01:00:15,420 --> 01:00:17,819
offline as well to learn more about your

1227
01:00:17,819 --> 01:00:22,160
application and see how we can help

1228
01:00:27,720 --> 01:00:29,579
oh hi

1229
01:00:29,579 --> 01:00:32,880
um I was wondering about uh in the first

1230
01:00:32,880 --> 01:00:34,260
part of the talk where you described

1231
01:00:34,260 --> 01:00:35,700
some protocols

1232
01:00:35,700 --> 01:00:37,920
um that use uh

1233
01:00:37,920 --> 01:00:40,619
um could you clarify who generates the

1234
01:00:40,619 --> 01:00:44,520
key pair for the fhe and how how in that

1235
01:00:44,520 --> 01:00:46,260
case the client the client who makes the

1236
01:00:46,260 --> 01:00:47,160
query

1237
01:00:47,160 --> 01:00:50,040
well aren't there multiple clients

1238
01:00:50,040 --> 01:00:51,660
and that's a very good question no no

1239
01:00:51,660 --> 01:00:54,000
here like I did right let me just

1240
01:00:54,000 --> 01:00:55,680
clarify the notion of the the clients

1241
01:00:55,680 --> 01:00:57,660
and so we call the client is the one who

1242
01:00:57,660 --> 01:00:58,500
actually

1243
01:00:58,500 --> 01:01:01,500
who wants to query who actually needs to

1244
01:01:01,500 --> 01:01:04,380
get the clear results and uh so that's

1245
01:01:04,380 --> 01:01:07,619
the client and then you have multiple uh

1246
01:01:07,619 --> 01:01:11,280
servers like the data providers

1247
01:01:11,280 --> 01:01:13,920
um so right so in this case right the

1248
01:01:13,920 --> 01:01:16,740
clients which are the multiple clients

1249
01:01:16,740 --> 01:01:19,500
and then that client those clients trust

1250
01:01:19,500 --> 01:01:21,780
the client that generates the keys is

1251
01:01:21,780 --> 01:01:24,480
that what goes on uh what do you mean by

1252
01:01:24,480 --> 01:01:26,520
multiple clients in certain use cases

1253
01:01:26,520 --> 01:01:29,940
you may have like different clients to

1254
01:01:29,940 --> 01:01:33,359
do like to do different queries then in

1255
01:01:33,359 --> 01:01:35,520
that case right they can do their own

1256
01:01:35,520 --> 01:01:38,339
and do their own encryption yeah I think

1257
01:01:38,339 --> 01:01:40,740
I was just gonna

1258
01:01:40,740 --> 01:01:43,020
so you only have multiple data providers

1259
01:01:43,020 --> 01:01:44,819
and those are now called clients and you

1260
01:01:44,819 --> 01:01:46,559
only have one client who wants to make

1261
01:01:46,559 --> 01:01:48,540
queries across these different data

1262
01:01:48,540 --> 01:01:49,740
providers

1263
01:01:49,740 --> 01:01:52,079
and and over time of course you can have

1264
01:01:52,079 --> 01:01:53,819
different clients by each one then

1265
01:01:53,819 --> 01:01:55,440
they'll be doing a different query and

1266
01:01:55,440 --> 01:01:59,000
then they can do their own encryption

1267
01:02:09,539 --> 01:02:11,579
hi thank you for the talk

1268
01:02:11,579 --> 01:02:13,079
um I have several questions about prep

1269
01:02:13,079 --> 01:02:15,180
share as well

1270
01:02:15,180 --> 01:02:17,760
um have you considered a use uh joining

1271
01:02:17,760 --> 01:02:20,520
different data sources uh from the

1272
01:02:20,520 --> 01:02:22,319
different data providers as well and

1273
01:02:22,319 --> 01:02:24,420
we're working on the project

1274
01:02:24,420 --> 01:02:27,240
uh yes it's a work in progress

1275
01:02:27,240 --> 01:02:28,440
okay

1276
01:02:28,440 --> 01:02:31,319
um it's just a few more uh follow-up uh

1277
01:02:31,319 --> 01:02:34,079
by query optimization and prep share

1278
01:02:34,079 --> 01:02:36,420
what do you exactly mean by that

1279
01:02:36,420 --> 01:02:40,559
essentially when you uh when you create

1280
01:02:40,559 --> 01:02:44,039
the this computation plan and there are

1281
01:02:44,039 --> 01:02:46,799
optimizations you can do to reorder

1282
01:02:46,799 --> 01:02:49,440
certain operators and so on so then you

1283
01:02:49,440 --> 01:02:52,859
can better utilize fhcs rights the

1284
01:02:52,859 --> 01:02:55,079
capabilities to reduce performance

1285
01:02:55,079 --> 01:02:56,280
overhead

1286
01:02:56,280 --> 01:02:57,660
okay

1287
01:02:57,660 --> 01:03:00,240
um the last question is are the

1288
01:03:00,240 --> 01:03:02,160
Aggregates enough for the Privacy

1289
01:03:02,160 --> 01:03:05,039
protection uh you're providing some

1290
01:03:05,039 --> 01:03:07,440
accounts average and then minimum and

1291
01:03:07,440 --> 01:03:08,460
maximum

1292
01:03:08,460 --> 01:03:09,900
is that

1293
01:03:09,900 --> 01:03:12,599
um well just providing the fully

1294
01:03:12,599 --> 01:03:14,460
homomorphic encryption over the

1295
01:03:14,460 --> 01:03:16,980
computation circuit is that uh

1296
01:03:16,980 --> 01:03:20,099
the query results itself it seems after

1297
01:03:20,099 --> 01:03:22,020
the decryption is not really uh

1298
01:03:22,020 --> 01:03:23,880
protected for the privacy

1299
01:03:23,880 --> 01:03:26,099
what's your take on that

1300
01:03:26,099 --> 01:03:28,079
so in this case the client wants to get

1301
01:03:28,079 --> 01:03:30,180
the query results so the clients right

1302
01:03:30,180 --> 01:03:33,240
as I share as I showed in the examples

1303
01:03:33,240 --> 01:03:35,839
the client wants to

1304
01:03:35,839 --> 01:03:38,640
like conduct a particular let's say SQL

1305
01:03:38,640 --> 01:03:40,980
query and then the client wants to know

1306
01:03:40,980 --> 01:03:43,039
the result that's the problem definition

1307
01:03:43,039 --> 01:03:46,079
and and then in the future of course if

1308
01:03:46,079 --> 01:03:48,900
you want to add additional like DP noise

1309
01:03:48,900 --> 01:03:51,599
and and so on and that's the additional

1310
01:03:51,599 --> 01:03:53,460
thing that you can consider but right

1311
01:03:53,460 --> 01:03:55,799
now the problem definition is such that

1312
01:03:55,799 --> 01:03:57,780
the client has a SQL query it wants to

1313
01:03:57,780 --> 01:04:00,960
run and it wants to get the result from

1314
01:04:00,960 --> 01:04:03,359
that okay so you're assuming that the

1315
01:04:03,359 --> 01:04:05,880
client is not malicious

1316
01:04:05,880 --> 01:04:07,799
the clients in this case needs to know

1317
01:04:07,799 --> 01:04:10,140
the results that's the client's goal and

1318
01:04:10,140 --> 01:04:12,000
that's a problem definition and right

1319
01:04:12,000 --> 01:04:15,440
all right thank you

1320
01:04:15,720 --> 01:04:18,618
are there more questions

1321
01:04:19,680 --> 01:04:22,740
I have a quick one uh Don so how how

1322
01:04:22,740 --> 01:04:24,839
really easy it is to integrate existing

1323
01:04:24,839 --> 01:04:26,760
protocols let's say we have an MPC

1324
01:04:26,760 --> 01:04:29,400
Library already so obviously it is to

1325
01:04:29,400 --> 01:04:32,460
integrate that go learn okay yes yes

1326
01:04:32,460 --> 01:04:35,400
we'd love to discuss the um reaction

1327
01:04:35,400 --> 01:04:37,559
more details after this too so actually

1328
01:04:37,559 --> 01:04:39,480
for the integration there are different

1329
01:04:39,480 --> 01:04:41,700
levels of integration we call it the the

1330
01:04:41,700 --> 01:04:44,640
library integration are are you know

1331
01:04:44,640 --> 01:04:47,220
deeper integration so depending on the

1332
01:04:47,220 --> 01:04:50,520
integration level you want to do and so

1333
01:04:50,520 --> 01:04:54,180
for example like for Krypton uh and so

1334
01:04:54,180 --> 01:04:57,839
on actually I didn't take uh very long

1335
01:04:57,839 --> 01:05:00,780
um but right of course it depends

1336
01:05:00,780 --> 01:05:02,880
um the details that we would love to to

1337
01:05:02,880 --> 01:05:04,619
guess discuss in more details with you

1338
01:05:04,619 --> 01:05:06,599
and they would love to integrate some of

1339
01:05:06,599 --> 01:05:08,240
the protocols that you guys have already

1340
01:05:08,240 --> 01:05:11,160
developed into code learn as well

1341
01:05:11,160 --> 01:05:14,660
so so as an example like um

1342
01:05:14,660 --> 01:05:18,000
the dynamic uh the proactive Dynamic

1343
01:05:18,000 --> 01:05:20,160
secret sharing so that one actually I

1344
01:05:20,160 --> 01:05:21,900
would like I said so that one actually

1345
01:05:21,900 --> 01:05:23,760
is really simple it's only like

1346
01:05:23,760 --> 01:05:25,680
like a few weeks yeah I don't know a few

1347
01:05:25,680 --> 01:05:28,440
days like a week or something uh at most

1348
01:05:28,440 --> 01:05:31,260
but uh right so it also depends on like

1349
01:05:31,260 --> 01:05:33,480
what you have currently but we would

1350
01:05:33,480 --> 01:05:35,400
love to discuss in more detail that

1351
01:05:35,400 --> 01:05:38,160
would be great to integrate ER and your

1352
01:05:38,160 --> 01:05:40,980
protocols into colon

1353
01:05:40,980 --> 01:05:42,839
right looking forward to see your

1354
01:05:42,839 --> 01:05:46,020
documents right right great

1355
01:05:46,020 --> 01:05:47,940
thank you so much it's kind of

1356
01:05:47,940 --> 01:05:49,380
unfortunate we don't have you in person

1357
01:05:49,380 --> 01:05:51,539
but we will see you soon so thank you so

1358
01:05:51,539 --> 01:05:55,880
much great great great and thank you

