1
00:00:50,079 --> 00:00:53,360
okay so the next talk of the day

2
00:00:53,360 --> 00:00:56,000
is on the power of differentially

3
00:00:56,000 --> 00:00:57,360
private

4
00:00:57,360 --> 00:00:58,879
on the part of differentially oblivious

5
00:00:58,879 --> 00:01:00,079
shuffle and distributed privacy

6
00:01:00,079 --> 00:01:02,640
mechanisms and this is mentions you

7
00:01:02,640 --> 00:01:04,080
you're going to give the talk and it is

8
00:01:04,080 --> 00:01:05,840
your own work with language thank you so

9
00:01:05,840 --> 00:01:07,680
much

10
00:01:07,680 --> 00:01:10,080
so hi everybody uh it's my pleasure to

11
00:01:10,080 --> 00:01:12,799
be here to present our work on

12
00:01:12,799 --> 00:01:14,799
power of the differentially uplift

13
00:01:14,799 --> 00:01:17,439
shuffle model in distributed privacy

14
00:01:17,439 --> 00:01:19,759
um i'm ming xin zhou i'm a second year

15
00:01:19,759 --> 00:01:22,799
phd from cmu this work is a joint work

16
00:01:22,799 --> 00:01:27,200
with my advisor elon xu

17
00:01:27,200 --> 00:01:29,920
so um today we are having our ppml

18
00:01:29,920 --> 00:01:31,600
workshop so i'm going to talk about

19
00:01:31,600 --> 00:01:33,759
different models in ppml

20
00:01:33,759 --> 00:01:36,240
uh we have the central privacy model so

21
00:01:36,240 --> 00:01:37,439
basically

22
00:01:37,439 --> 00:01:39,280
we have a bunch of clients

23
00:01:39,280 --> 00:01:40,400
and

24
00:01:40,400 --> 00:01:42,479
those clients they have their own data

25
00:01:42,479 --> 00:01:45,439
and we have trusted central server so

26
00:01:45,439 --> 00:01:48,079
basically the central server can collect

27
00:01:48,079 --> 00:01:50,159
those data because it's trusted

28
00:01:50,159 --> 00:01:51,280
and

29
00:01:51,280 --> 00:01:53,439
the central server can train on those

30
00:01:53,439 --> 00:01:56,560
collected data and release a machine

31
00:01:56,560 --> 00:01:58,240
learning model

32
00:01:58,240 --> 00:02:00,640
but we are assuming central privacy here

33
00:02:00,640 --> 00:02:02,799
so basically the trusted central server

34
00:02:02,799 --> 00:02:05,520
needs to add some noise or do some

35
00:02:05,520 --> 00:02:07,840
privacy preserving mechanism to protect

36
00:02:07,840 --> 00:02:11,679
the releasing model's privacy

37
00:02:12,160 --> 00:02:15,280
but in some sense the central

38
00:02:15,280 --> 00:02:17,120
privacy model is

39
00:02:17,120 --> 00:02:18,560
not that strong because you need to

40
00:02:18,560 --> 00:02:20,480
trust the central server

41
00:02:20,480 --> 00:02:24,239
so we have the distributed model or um

42
00:02:24,239 --> 00:02:26,000
in equivalent way it's called a local

43
00:02:26,000 --> 00:02:28,720
model so basically now the central

44
00:02:28,720 --> 00:02:31,280
server is not trusted and every client

45
00:02:31,280 --> 00:02:34,080
needs to protect their own privacy by

46
00:02:34,080 --> 00:02:39,040
running some noise noisy mechanism or

47
00:02:39,040 --> 00:02:40,879
privacy preserving mechanism on the

48
00:02:40,879 --> 00:02:42,000
local

49
00:02:42,000 --> 00:02:43,440
in the local

50
00:02:43,440 --> 00:02:45,760
machine or something like that and after

51
00:02:45,760 --> 00:02:47,680
that they send their noisy data to the

52
00:02:47,680 --> 00:02:49,840
central server and a central server

53
00:02:49,840 --> 00:02:52,879
train on those noisy data and then

54
00:02:52,879 --> 00:02:54,720
finally the outputs the machine learning

55
00:02:54,720 --> 00:02:56,480
model and now

56
00:02:56,480 --> 00:02:58,640
we simply assume the central server is

57
00:02:58,640 --> 00:03:01,440
the adversary

58
00:03:02,239 --> 00:03:06,800
however um the local model it has a

59
00:03:06,800 --> 00:03:08,879
serious problem that

60
00:03:08,879 --> 00:03:10,959
generally because your privacy

61
00:03:10,959 --> 00:03:13,280
constraint is too strong and in some

62
00:03:13,280 --> 00:03:14,959
sense they

63
00:03:14,959 --> 00:03:17,440
the machine learning model will have

64
00:03:17,440 --> 00:03:19,840
pretty terrible accuracy and this is a

65
00:03:19,840 --> 00:03:21,519
phenomenon discovered by a lot of the

66
00:03:21,519 --> 00:03:23,360
researchers before

67
00:03:23,360 --> 00:03:25,440
to tackle this problem

68
00:03:25,440 --> 00:03:27,920
researchers propose a middle ground

69
00:03:27,920 --> 00:03:30,560
model it's like between the local and

70
00:03:30,560 --> 00:03:32,480
the central model it is called a shuffle

71
00:03:32,480 --> 00:03:35,599
model so basically um we still have all

72
00:03:35,599 --> 00:03:37,599
those clients but now before they are

73
00:03:37,599 --> 00:03:40,159
sending their data to the central server

74
00:03:40,159 --> 00:03:43,200
we have a shuffler and here we assume

75
00:03:43,200 --> 00:03:45,040
the shuffle is perfect basically can

76
00:03:45,040 --> 00:03:48,080
assume that it's a ideal functionality

77
00:03:48,080 --> 00:03:51,120
that shuffles all those clients data and

78
00:03:51,120 --> 00:03:53,360
send the shuffle set to the server so

79
00:03:53,360 --> 00:03:55,599
basically the server sees the same set

80
00:03:55,599 --> 00:03:58,560
of data but now all the data

81
00:03:58,560 --> 00:04:01,680
is anonymized

82
00:04:01,680 --> 00:04:04,159
interestingly um previous paper already

83
00:04:04,159 --> 00:04:06,560
shown that um shuffle model often

84
00:04:06,560 --> 00:04:08,799
achieves fundamentally better privacy

85
00:04:08,799 --> 00:04:10,799
utility tradeoff than local models so

86
00:04:10,799 --> 00:04:12,799
this is the reason why we want to study

87
00:04:12,799 --> 00:04:16,079
this shuffle model

88
00:04:16,320 --> 00:04:18,238
implementing or

89
00:04:18,238 --> 00:04:20,160
implementing shuffler or sometimes we

90
00:04:20,160 --> 00:04:22,639
call it anonymous communication turns

91
00:04:22,639 --> 00:04:24,639
out to be a classical and long-standing

92
00:04:24,639 --> 00:04:27,199
problem in crypto and security uh

93
00:04:27,199 --> 00:04:29,199
community we have

94
00:04:29,199 --> 00:04:32,320
different solutions like mixnet bcnet

95
00:04:32,320 --> 00:04:35,280
tor network or multi-server solutions

96
00:04:35,280 --> 00:04:37,919
but the problem is implementing a fully

97
00:04:37,919 --> 00:04:39,680
secure shuffler

98
00:04:39,680 --> 00:04:42,320
generally require high overhead in the

99
00:04:42,320 --> 00:04:44,800
p2p or the single server setting

100
00:04:44,800 --> 00:04:47,520
generally the total number of messages

101
00:04:47,520 --> 00:04:49,680
will be n squared so the per message

102
00:04:49,680 --> 00:04:52,080
overhead will be linear to n which is

103
00:04:52,080 --> 00:04:53,919
pretty big

104
00:04:53,919 --> 00:04:55,680
we can also use

105
00:04:55,680 --> 00:04:58,160
systems um those system turns out to

106
00:04:58,160 --> 00:04:59,919
have better

107
00:04:59,919 --> 00:05:02,560
performance but we do need more trust

108
00:05:02,560 --> 00:05:04,560
assumption that those servers don't

109
00:05:04,560 --> 00:05:06,240
collude with each other

110
00:05:06,240 --> 00:05:07,039
so

111
00:05:07,039 --> 00:05:10,960
um is there a way to like

112
00:05:10,960 --> 00:05:13,039
have a better result

113
00:05:13,039 --> 00:05:14,639
and

114
00:05:14,639 --> 00:05:16,560
the solution

115
00:05:16,560 --> 00:05:19,039
proposed by some other researchers is

116
00:05:19,039 --> 00:05:21,120
the relaxation of the security so

117
00:05:21,120 --> 00:05:23,680
basically now we call the shuffler a

118
00:05:23,680 --> 00:05:26,800
differentially oblivious shuffler so the

119
00:05:26,800 --> 00:05:29,680
functionality of um do shuffler that's

120
00:05:29,680 --> 00:05:32,400
the same that uh it applies a total

121
00:05:32,400 --> 00:05:35,280
random permutation of all those data but

122
00:05:35,280 --> 00:05:37,120
the privacy guarantee of this do

123
00:05:37,120 --> 00:05:39,840
shuffler will will be differentially

124
00:05:39,840 --> 00:05:43,120
private so basically we can assume that

125
00:05:43,120 --> 00:05:45,759
this protocol is a distributed portal

126
00:05:45,759 --> 00:05:47,600
and the adversary is allowed to corrupt

127
00:05:47,600 --> 00:05:50,160
some of the clients or

128
00:05:50,160 --> 00:05:52,479
or it can also corrupt the server and

129
00:05:52,479 --> 00:05:55,280
the view of this adversary is

130
00:05:55,280 --> 00:05:57,360
differentially private um this is the

131
00:05:57,360 --> 00:05:59,600
definition of theo shuffler

132
00:05:59,600 --> 00:06:01,520
for those who are familiar with

133
00:06:01,520 --> 00:06:02,960
differentially

134
00:06:02,960 --> 00:06:04,400
privacy

135
00:06:04,400 --> 00:06:06,319
a very natural question to ask is what

136
00:06:06,319 --> 00:06:09,280
is the neighboring input

137
00:06:09,280 --> 00:06:12,400
and the definition of the

138
00:06:12,400 --> 00:06:14,400
neighboring definition here

139
00:06:14,400 --> 00:06:16,560
will be like this so we have a bunch of

140
00:06:16,560 --> 00:06:17,520
clients

141
00:06:17,520 --> 00:06:21,120
and only one pair of the clients somehow

142
00:06:21,120 --> 00:06:22,639
swap their input

143
00:06:22,639 --> 00:06:24,240
and we

144
00:06:24,240 --> 00:06:26,720
require that

145
00:06:26,720 --> 00:06:29,199
so you can see only one pair of clients

146
00:06:29,199 --> 00:06:31,840
swap their messages

147
00:06:31,840 --> 00:06:34,319
we require that

148
00:06:34,319 --> 00:06:36,319
given these two cases

149
00:06:36,319 --> 00:06:38,720
the view of the adversary should be

150
00:06:38,720 --> 00:06:41,759
epsilon delta close

151
00:06:43,199 --> 00:06:45,440
so this two world they should be pretty

152
00:06:45,440 --> 00:06:47,120
close to each other

153
00:06:47,120 --> 00:06:50,560
and the intuition of this definition is

154
00:06:50,560 --> 00:06:53,199
that it provides some deniability

155
00:06:53,199 --> 00:06:56,000
of the sources of the messages so

156
00:06:56,000 --> 00:06:58,400
in some sense you can deny that you send

157
00:06:58,400 --> 00:07:00,479
your send this message to the server

158
00:07:00,479 --> 00:07:02,160
because you can always argue that oh

159
00:07:02,160 --> 00:07:05,680
maybe it's the other cases

160
00:07:08,000 --> 00:07:10,560
a deal with shuffle is asymptotically

161
00:07:10,560 --> 00:07:12,720
cheaper to achieve than a fully secure

162
00:07:12,720 --> 00:07:15,039
shuffler and this is already done by the

163
00:07:15,039 --> 00:07:17,599
first paper there are actually two of

164
00:07:17,599 --> 00:07:20,319
them the first one is

165
00:07:20,319 --> 00:07:22,639
using onion routing to achieve this the

166
00:07:22,639 --> 00:07:24,880
second one is using a non-interactive

167
00:07:24,880 --> 00:07:27,120
matrix shuffling technique

168
00:07:27,120 --> 00:07:28,000
but

169
00:07:28,000 --> 00:07:29,599
the common things is

170
00:07:29,599 --> 00:07:31,759
they both achieve quality linear total

171
00:07:31,759 --> 00:07:34,080
number of messages so basically the per

172
00:07:34,080 --> 00:07:36,560
message overhead will be polylocked in

173
00:07:36,560 --> 00:07:38,720
terms of the client numbers so it's a

174
00:07:38,720 --> 00:07:41,440
huge improvement

175
00:07:41,919 --> 00:07:44,400
and in our paper we asked this problem

176
00:07:44,400 --> 00:07:47,440
can we match shuffle model results with

177
00:07:47,440 --> 00:07:50,240
a deal shuffler so remember that deal

178
00:07:50,240 --> 00:07:52,400
shuffler only provides a much weaker

179
00:07:52,400 --> 00:07:54,800
privacy guarantee than a fully secured

180
00:07:54,800 --> 00:07:56,160
shuffle

181
00:07:56,160 --> 00:07:58,879
and our answer is yes

182
00:07:58,879 --> 00:08:02,160
we can recover a lot of the results in

183
00:08:02,160 --> 00:08:05,360
our deal shuffle mod

184
00:08:05,680 --> 00:08:08,720
um here are our main results

185
00:08:08,720 --> 00:08:10,240
so we have

186
00:08:10,240 --> 00:08:11,840
the first one is the optimal privacy

187
00:08:11,840 --> 00:08:13,280
amplification

188
00:08:13,280 --> 00:08:15,759
in single message theo shuffle model so

189
00:08:15,759 --> 00:08:17,759
single message simply means every client

190
00:08:17,759 --> 00:08:20,000
sends only one message and i'm gonna

191
00:08:20,000 --> 00:08:21,840
talk about what is optimal privacy

192
00:08:21,840 --> 00:08:24,080
amplification later so don't worry about

193
00:08:24,080 --> 00:08:27,280
that um secondly we also explore the

194
00:08:27,280 --> 00:08:29,360
multi-message deal shuffle model so

195
00:08:29,360 --> 00:08:31,440
basically every client can send multiple

196
00:08:31,440 --> 00:08:34,479
messages to the shuffler and we have two

197
00:08:34,479 --> 00:08:35,519
protocols

198
00:08:35,519 --> 00:08:37,679
for histogram problem and for the real

199
00:08:37,679 --> 00:08:38,880
summation

200
00:08:38,880 --> 00:08:41,039
problem and we are able to break the

201
00:08:41,039 --> 00:08:44,399
lower bound for the single message model

202
00:08:44,399 --> 00:08:47,440
using multi message

203
00:08:48,080 --> 00:08:50,800
all right now let's talk about

204
00:08:50,800 --> 00:08:53,200
privacy amplification um this part will

205
00:08:53,200 --> 00:08:55,360
be a little bit technical and because

206
00:08:55,360 --> 00:08:57,839
due to the time limitation i don't have

207
00:08:57,839 --> 00:08:59,440
all the time to talk about the details

208
00:08:59,440 --> 00:09:00,399
so

209
00:09:00,399 --> 00:09:02,399
if you don't mind you can

210
00:09:02,399 --> 00:09:04,320
come to me later and we can discuss this

211
00:09:04,320 --> 00:09:05,279
part

212
00:09:05,279 --> 00:09:06,720
so um

213
00:09:06,720 --> 00:09:08,640
the optimal privacy amplification by

214
00:09:08,640 --> 00:09:11,200
shuffling um save the following theorem

215
00:09:11,200 --> 00:09:13,360
so basically remember that in the local

216
00:09:13,360 --> 00:09:16,640
model every client needs to run their

217
00:09:16,640 --> 00:09:19,279
noise mechanism locally

218
00:09:19,279 --> 00:09:21,279
this theorem says

219
00:09:21,279 --> 00:09:24,640
given any of the epsilon zero ldp

220
00:09:24,640 --> 00:09:27,120
randomizer they're going to run locally

221
00:09:27,120 --> 00:09:29,440
we simply don't change them and plug

222
00:09:29,440 --> 00:09:30,399
them in

223
00:09:30,399 --> 00:09:32,720
to the shuffle model and here we assume

224
00:09:32,720 --> 00:09:34,480
the shuffler is a perfect shuffler that

225
00:09:34,480 --> 00:09:36,080
doesn't leak any information to the

226
00:09:36,080 --> 00:09:37,440
adversary

227
00:09:37,440 --> 00:09:39,360
then basically we have a much better

228
00:09:39,360 --> 00:09:42,240
privacy guarantee that the composition

229
00:09:42,240 --> 00:09:45,200
of the local randomizer and the shuffler

230
00:09:45,200 --> 00:09:47,279
turns out to be an epsilon delta dp

231
00:09:47,279 --> 00:09:50,160
pitch magnesium where the epsilon is

232
00:09:50,160 --> 00:09:52,080
roughly this expression is square root

233
00:09:52,080 --> 00:09:54,640
of e to the epsilon 0 log 1 of delta

234
00:09:54,640 --> 00:09:56,000
divided by n

235
00:09:56,000 --> 00:09:58,320
this expression is actually much better

236
00:09:58,320 --> 00:10:00,000
than epsilon 0.

237
00:10:00,000 --> 00:10:02,560
if you don't really understand it it's

238
00:10:02,560 --> 00:10:04,399
fine because we have a very simple

239
00:10:04,399 --> 00:10:07,120
example here so basically in a local

240
00:10:07,120 --> 00:10:09,920
model let's assume you have a local

241
00:10:09,920 --> 00:10:12,800
randomizer with a differential privacy

242
00:10:12,800 --> 00:10:15,279
guarantee of epsilon zero equals to one

243
00:10:15,279 --> 00:10:17,600
so the smaller epsilon is the better

244
00:10:17,600 --> 00:10:19,279
products you have this is

245
00:10:19,279 --> 00:10:22,000
from the differential privacy literature

246
00:10:22,000 --> 00:10:25,279
and we simply plug the thing in into the

247
00:10:25,279 --> 00:10:27,839
shuffle model and boom immediately we

248
00:10:27,839 --> 00:10:30,000
have a much better privacy guarantee

249
00:10:30,000 --> 00:10:32,720
that the epsilon now is roughly square

250
00:10:32,720 --> 00:10:35,680
root 3 divided by n so basically your

251
00:10:35,680 --> 00:10:38,240
privacy is improved by

252
00:10:38,240 --> 00:10:40,640
a square root n factor so this is very

253
00:10:40,640 --> 00:10:41,920
very good

254
00:10:41,920 --> 00:10:44,720
we have much better privacy here

255
00:10:44,720 --> 00:10:46,800
and the question to ask is

256
00:10:46,800 --> 00:10:48,880
we assume the shuffler is perfect so

257
00:10:48,880 --> 00:10:50,880
what happens if we replace the shuffler

258
00:10:50,880 --> 00:10:53,760
with a do shuffler and in our paper we

259
00:10:53,760 --> 00:10:56,560
answer this question that um basically

260
00:10:56,560 --> 00:10:59,279
we have the same theorem for do shuffler

261
00:10:59,279 --> 00:11:01,680
so basically now if we assume that the

262
00:11:01,680 --> 00:11:04,320
shuffler is an epsilon one delta one do

263
00:11:04,320 --> 00:11:06,640
shuffler against tick corrupted users

264
00:11:06,640 --> 00:11:08,959
because we generally

265
00:11:08,959 --> 00:11:11,519
implement the do shuffler using a

266
00:11:11,519 --> 00:11:13,360
distributed protocol so we assume some

267
00:11:13,360 --> 00:11:15,600
of the clients will be corrupted

268
00:11:15,600 --> 00:11:18,079
and now the composition of the theo

269
00:11:18,079 --> 00:11:20,000
shuffler and the local randomizer will

270
00:11:20,000 --> 00:11:22,079
be an epsilon plus epsilon one delta

271
00:11:22,079 --> 00:11:24,880
plus delta one magnet um bp and do

272
00:11:24,880 --> 00:11:27,360
magnesium where basically the epsilon

273
00:11:27,360 --> 00:11:29,760
expression is the same except that now

274
00:11:29,760 --> 00:11:32,000
we're divided by n minus t

275
00:11:32,000 --> 00:11:34,800
so basically we can only get the privacy

276
00:11:34,800 --> 00:11:39,199
amplification from those honest clients

277
00:11:41,760 --> 00:11:44,320
all right um i'm gonna quickly go over

278
00:11:44,320 --> 00:11:46,720
the proofs so this could be very quick

279
00:11:46,720 --> 00:11:48,720
and if you got a little bit confused

280
00:11:48,720 --> 00:11:50,880
it's fine yeah

281
00:11:50,880 --> 00:11:52,800
so basically what we're trying to prove

282
00:11:52,800 --> 00:11:55,200
is um the following thing so we assume

283
00:11:55,200 --> 00:11:56,399
that

284
00:11:56,399 --> 00:11:58,399
only one client changes its inputs so

285
00:11:58,399 --> 00:11:59,440
this is the

286
00:11:59,440 --> 00:12:00,959
neighboring input definition for the

287
00:12:00,959 --> 00:12:02,800
whole system not only for the deal

288
00:12:02,800 --> 00:12:04,160
shuffler

289
00:12:04,160 --> 00:12:05,680
this is the definition for the whole

290
00:12:05,680 --> 00:12:06,880
system

291
00:12:06,880 --> 00:12:08,800
so basically the first client we assume

292
00:12:08,800 --> 00:12:10,560
that the first client has

293
00:12:10,560 --> 00:12:12,320
has different inputs in the neighboring

294
00:12:12,320 --> 00:12:13,279
world

295
00:12:13,279 --> 00:12:15,519
so in the first figure it has input a in

296
00:12:15,519 --> 00:12:18,959
the second figure it has input b

297
00:12:19,680 --> 00:12:21,519
so the formal statement is the following

298
00:12:21,519 --> 00:12:24,240
that amex is the set of the messages

299
00:12:24,240 --> 00:12:26,720
sent to a shuffler given input x

300
00:12:26,720 --> 00:12:29,040
and mx prime is similar but for input x

301
00:12:29,040 --> 00:12:31,040
prime so there are the set of the

302
00:12:31,040 --> 00:12:33,200
messages in the neighboring world

303
00:12:33,200 --> 00:12:35,760
the original privacy amplification of

304
00:12:35,760 --> 00:12:38,320
perfect shuffler already shows that the

305
00:12:38,320 --> 00:12:41,760
distribution of this two random objects

306
00:12:41,760 --> 00:12:43,360
is pretty close they are epsilon delta

307
00:12:43,360 --> 00:12:45,440
close

308
00:12:45,440 --> 00:12:47,760
and our goal is trying to prove that the

309
00:12:47,760 --> 00:12:49,519
view of the adversary

310
00:12:49,519 --> 00:12:52,000
during the execution of the deal shuffle

311
00:12:52,000 --> 00:12:53,519
protocol

312
00:12:53,519 --> 00:12:55,600
will be epsilon plus epsilon 1 delta

313
00:12:55,600 --> 00:12:57,519
plus delta 1 closed

314
00:12:57,519 --> 00:13:00,079
so remember that the view

315
00:13:00,079 --> 00:13:01,920
of the atmosphere will contain this set

316
00:13:01,920 --> 00:13:04,079
of the messages because

317
00:13:04,079 --> 00:13:06,240
in some sense the set of messages will

318
00:13:06,240 --> 00:13:11,519
be reviewed um in the protocols output

319
00:13:12,320 --> 00:13:14,079
so it turns out that it's sufficient to

320
00:13:14,079 --> 00:13:17,279
prove that condition on the set of the

321
00:13:17,279 --> 00:13:18,560
messages

322
00:13:18,560 --> 00:13:20,560
the view of the adversary is epsilon one

323
00:13:20,560 --> 00:13:22,800
delta one close and we simply use the

324
00:13:22,800 --> 00:13:24,800
previous uh privacy amplification

325
00:13:24,800 --> 00:13:27,680
theorem that um mx and ms prime is

326
00:13:27,680 --> 00:13:28,720
epsilon

327
00:13:28,720 --> 00:13:31,440
uh delta close then we simply use a

328
00:13:31,440 --> 00:13:34,160
pretty standard composition technique to

329
00:13:34,160 --> 00:13:37,279
prove the final theorem

330
00:13:37,440 --> 00:13:38,240
so

331
00:13:38,240 --> 00:13:40,560
here is an example so basically we

332
00:13:40,560 --> 00:13:42,000
conditional m

333
00:13:42,000 --> 00:13:43,600
that

334
00:13:43,600 --> 00:13:46,839
let's say the message set is 1 1 2 2

335
00:13:46,839 --> 00:13:49,760
and in the first world

336
00:13:49,760 --> 00:13:51,920
for example in the first world those

337
00:13:51,920 --> 00:13:53,760
clients involve their local randomizer

338
00:13:53,760 --> 00:13:55,519
and they generate some message like one

339
00:13:55,519 --> 00:13:57,120
two one two two

340
00:13:57,120 --> 00:13:59,440
and in the second world in some sense uh

341
00:13:59,440 --> 00:14:01,440
in some cases they generate like two one

342
00:14:01,440 --> 00:14:04,560
one two two and the special thing about

343
00:14:04,560 --> 00:14:07,120
these two cases is that

344
00:14:07,120 --> 00:14:09,279
for the first two clients they swap

345
00:14:09,279 --> 00:14:11,680
their inputs in some sense and for every

346
00:14:11,680 --> 00:14:15,360
other client they have this exactly same

347
00:14:15,360 --> 00:14:17,760
messages

348
00:14:17,760 --> 00:14:19,760
and why is this good because

349
00:14:19,760 --> 00:14:22,800
this by our do shuffler definition

350
00:14:22,800 --> 00:14:24,320
running

351
00:14:24,320 --> 00:14:26,480
the dl software given this two input

352
00:14:26,480 --> 00:14:28,560
will be epsilon one delta one close in

353
00:14:28,560 --> 00:14:32,079
terms of the view of the adversary

354
00:14:32,160 --> 00:14:35,040
so the key idea here is simply to find a

355
00:14:35,040 --> 00:14:37,279
bipartisan matching just to try to match

356
00:14:37,279 --> 00:14:40,320
all those cases together such that

357
00:14:40,320 --> 00:14:42,399
basically if we can

358
00:14:42,399 --> 00:14:45,040
condition on the message set m

359
00:14:45,040 --> 00:14:47,760
for all the possible message sequence um

360
00:14:47,760 --> 00:14:50,000
they are from the permutation of m so

361
00:14:50,000 --> 00:14:51,600
we're basically matching those

362
00:14:51,600 --> 00:14:55,279
permutations together such that um

363
00:14:55,279 --> 00:14:58,240
we want the connected sequences should

364
00:14:58,240 --> 00:15:00,320
be neighbors in the dl shuffler just

365
00:15:00,320 --> 00:15:02,800
like the example before and they should

366
00:15:02,800 --> 00:15:06,000
have matched conditional probability um

367
00:15:06,000 --> 00:15:08,720
given when given the input is x or given

368
00:15:08,720 --> 00:15:10,959
the input is x prime so

369
00:15:10,959 --> 00:15:12,320
this part is a little bit you know

370
00:15:12,320 --> 00:15:14,720
technical so don't worry about it

371
00:15:14,720 --> 00:15:16,720
um

372
00:15:16,720 --> 00:15:18,560
however finding such a matching is

373
00:15:18,560 --> 00:15:20,399
non-trivial

374
00:15:20,399 --> 00:15:22,480
especially because of the condition that

375
00:15:22,480 --> 00:15:24,560
we need to match the probability and

376
00:15:24,560 --> 00:15:26,880
this is not very easy

377
00:15:26,880 --> 00:15:28,959
so we need some special structure from

378
00:15:28,959 --> 00:15:30,720
the proof of the previous privacy

379
00:15:30,720 --> 00:15:33,199
amplification theorem

380
00:15:33,199 --> 00:15:35,360
and i'm going to skip this part so

381
00:15:35,360 --> 00:15:36,880
basically the previous privacy

382
00:15:36,880 --> 00:15:39,759
amplification will have a distribution

383
00:15:39,759 --> 00:15:41,920
decomposition part that

384
00:15:41,920 --> 00:15:43,279
for every

385
00:15:43,279 --> 00:15:44,959
input the

386
00:15:44,959 --> 00:15:47,440
the local randomizers output will be

387
00:15:47,440 --> 00:15:49,839
decomposed into the three part that is r

388
00:15:49,839 --> 00:15:52,839
a r b and some leftover distribution

389
00:15:52,839 --> 00:15:55,519
um there's a lot time limitation i'm

390
00:15:55,519 --> 00:15:57,759
gonna jump ahead a little bit

391
00:15:57,759 --> 00:15:59,199
so um

392
00:15:59,199 --> 00:16:01,440
if we have the decomposition we can

393
00:16:01,440 --> 00:16:04,160
decompose the input oh sorry decompose

394
00:16:04,160 --> 00:16:06,800
the local randomizer distribution for

395
00:16:06,800 --> 00:16:09,040
client 2 through client n

396
00:16:09,040 --> 00:16:10,880
and

397
00:16:10,880 --> 00:16:11,600
the

398
00:16:11,600 --> 00:16:14,399
key id number 3 is officer information

399
00:16:14,399 --> 00:16:15,839
i really don't have the time to talk

400
00:16:15,839 --> 00:16:16,800
about

401
00:16:16,800 --> 00:16:18,240
the details here

402
00:16:18,240 --> 00:16:18,959
but

403
00:16:18,959 --> 00:16:22,079
the high level idea is we provide more

404
00:16:22,079 --> 00:16:25,600
information to the adversary and we use

405
00:16:25,600 --> 00:16:27,440
this special structure from the previous

406
00:16:27,440 --> 00:16:31,360
proof and prove that even given those

407
00:16:31,360 --> 00:16:33,600
auxiliary information the protocol is

408
00:16:33,600 --> 00:16:36,560
still private and condition on this

409
00:16:36,560 --> 00:16:39,680
auxiliary information

410
00:16:39,680 --> 00:16:42,240
we are able to find the matching because

411
00:16:42,240 --> 00:16:44,560
condition on the auxiliary information

412
00:16:44,560 --> 00:16:46,880
uh the distribution will be simplified a

413
00:16:46,880 --> 00:16:49,040
lot that we only care about three types

414
00:16:49,040 --> 00:16:51,680
of distribution they are ra rb and the

415
00:16:51,680 --> 00:16:54,800
mixture of rb and we are able to use a

416
00:16:54,800 --> 00:16:56,959
split and match trick from the previous

417
00:16:56,959 --> 00:17:00,399
paper to find the matching

418
00:17:01,600 --> 00:17:03,759
all right i'm gonna quickly mention

419
00:17:03,759 --> 00:17:06,400
about our results in the multi-message

420
00:17:06,400 --> 00:17:09,599
field shuffle model so

421
00:17:09,599 --> 00:17:11,599
the multi-message theo shuffle model is

422
00:17:11,599 --> 00:17:13,599
roughly the same but now every client

423
00:17:13,599 --> 00:17:15,520
can send multiple messages

424
00:17:15,520 --> 00:17:18,000
and the neighboring definition is still

425
00:17:18,000 --> 00:17:19,520
roughly the same that one pair of

426
00:17:19,520 --> 00:17:20,640
clients

427
00:17:20,640 --> 00:17:24,160
swap one pair of the message

428
00:17:24,240 --> 00:17:24,700
and

429
00:17:24,700 --> 00:17:27,359
[Music]

430
00:17:27,359 --> 00:17:29,440
for the histogram problem so basically

431
00:17:29,440 --> 00:17:31,200
the client the server is trying to

432
00:17:31,200 --> 00:17:33,600
collect the histogram information of the

433
00:17:33,600 --> 00:17:36,160
client's items and we're able to achieve

434
00:17:36,160 --> 00:17:38,880
the communication of roughly a

435
00:17:38,880 --> 00:17:40,960
poly logarithmic

436
00:17:40,960 --> 00:17:44,799
in terms of epsilon and delta some

437
00:17:44,799 --> 00:17:47,120
sorry it's poly logarithmic

438
00:17:47,120 --> 00:17:49,039
i would say it's roughly a constant if

439
00:17:49,039 --> 00:17:51,760
we ignore the epsilon delta term

440
00:17:51,760 --> 00:17:53,919
and the error will also be roughly a

441
00:17:53,919 --> 00:17:55,760
constant if we ignore the epsilon delta

442
00:17:55,760 --> 00:17:57,440
term so we

443
00:17:57,440 --> 00:17:59,360
we break the lower bound for the single

444
00:17:59,360 --> 00:18:01,679
message model so because now we can use

445
00:18:01,679 --> 00:18:04,320
multiple message to you know do more

446
00:18:04,320 --> 00:18:06,720
things and the single message model

447
00:18:06,720 --> 00:18:09,360
lower bound will be entered one quarter

448
00:18:09,360 --> 00:18:11,039
and we're able to break this lower bound

449
00:18:11,039 --> 00:18:13,919
in dl shuffle mode so we're based on a

450
00:18:13,919 --> 00:18:15,679
old protocol and we proved that old

451
00:18:15,679 --> 00:18:18,000
protocol is still private under theo

452
00:18:18,000 --> 00:18:19,440
model

453
00:18:19,440 --> 00:18:21,679
uh roughly the same that we also have a

454
00:18:21,679 --> 00:18:24,640
real value summation protocol under um

455
00:18:24,640 --> 00:18:27,760
vo model under the o shuffle model and

456
00:18:27,760 --> 00:18:29,919
the communication will be log log n the

457
00:18:29,919 --> 00:18:31,760
arrow will be log log n square

458
00:18:31,760 --> 00:18:34,000
again this breaks the single message

459
00:18:34,000 --> 00:18:36,799
lower bound but this does not tightly

460
00:18:36,799 --> 00:18:38,320
match the

461
00:18:38,320 --> 00:18:40,480
best shuffle dp mechanism we are still

462
00:18:40,480 --> 00:18:42,640
trying to do that

463
00:18:42,640 --> 00:18:45,200
and um here's the summary so basically

464
00:18:45,200 --> 00:18:47,200
dl shufflers are cheaper

465
00:18:47,200 --> 00:18:50,160
than fully secure shuffler and in our

466
00:18:50,160 --> 00:18:52,000
work we show that many shuffle model

467
00:18:52,000 --> 00:18:54,080
results still hold in the deal shuffle

468
00:18:54,080 --> 00:18:55,200
model

469
00:18:55,200 --> 00:18:57,760
future work we are actually working on a

470
00:18:57,760 --> 00:19:00,400
more general differentially oblivious

471
00:19:00,400 --> 00:19:02,880
framework for do algorithm and this is

472
00:19:02,880 --> 00:19:04,480
an ongoing work

473
00:19:04,480 --> 00:19:06,880
we want to study separation between theo

474
00:19:06,880 --> 00:19:08,960
shuffle model and the shuffle model

475
00:19:08,960 --> 00:19:10,720
we always want to study the practical

476
00:19:10,720 --> 00:19:12,960
implementation of theo shuffle

477
00:19:12,960 --> 00:19:17,679
so thank you everybody this is my talk

478
00:19:20,320 --> 00:19:22,160
so i don't think unfortunately we'll

479
00:19:22,160 --> 00:19:23,840
have time for questions so we invite the

480
00:19:23,840 --> 00:19:26,559
audience to take the questions offline

481
00:19:26,559 --> 00:19:30,039
thank you so much

