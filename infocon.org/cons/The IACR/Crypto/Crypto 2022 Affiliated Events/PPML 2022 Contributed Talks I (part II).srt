1
00:00:40,480 --> 00:00:43,480
hmm

2
00:01:04,720 --> 00:01:07,280
yeah okay

3
00:01:07,280 --> 00:01:08,240
all right

4
00:01:08,240 --> 00:01:10,640
yeah okay good morning everyone thank

5
00:01:10,640 --> 00:01:12,880
you so much for coming to the fourth

6
00:01:12,880 --> 00:01:15,439
instantiation of ppm mellow crypto

7
00:01:15,439 --> 00:01:16,400
so

8
00:01:16,400 --> 00:01:18,479
today we had a hard time because of walk

9
00:01:18,479 --> 00:01:20,479
happening at the same time but thank you

10
00:01:20,479 --> 00:01:22,000
so much for attending and we're gonna

11
00:01:22,000 --> 00:01:23,759
start the session today with the second

12
00:01:23,759 --> 00:01:26,320
talk not with the first one and this is

13
00:01:26,320 --> 00:01:27,360
going to be

14
00:01:27,360 --> 00:01:29,280
micro fed male privacy preserving

15
00:01:29,280 --> 00:01:31,600
federation learning for small ways

16
00:01:31,600 --> 00:01:33,360
you ago google is going to give the talk

17
00:01:33,360 --> 00:01:34,799
and this is joint work with antiguani

18
00:01:34,799 --> 00:01:36,079
police

19
00:01:36,079 --> 00:01:39,200
she david david bird and tucker bulge

20
00:01:39,200 --> 00:01:41,280
thank you yeah thank you very much for

21
00:01:41,280 --> 00:01:43,439
your introduction

22
00:01:43,439 --> 00:01:46,320
um so my name is and i'm from japan

23
00:01:46,320 --> 00:01:48,320
working at research and today i want to

24
00:01:48,320 --> 00:01:49,840
talk about our work on secret

25
00:01:49,840 --> 00:01:52,320
aggregation for small domain uh this is

26
00:01:52,320 --> 00:01:53,840
the joint work with antigone elaine

27
00:01:53,840 --> 00:01:55,360
tucker and david

28
00:01:55,360 --> 00:01:57,360
um so in this talk i want to first

29
00:01:57,360 --> 00:01:59,200
introduce what secret aggregation

30
00:01:59,200 --> 00:02:01,119
problem is and why

31
00:02:01,119 --> 00:02:03,040
it is needed in several practical

32
00:02:03,040 --> 00:02:05,280
applications including privacy

33
00:02:05,280 --> 00:02:08,800
preserving federal learning and

34
00:02:08,800 --> 00:02:10,720
i will quickly review several existing

35
00:02:10,720 --> 00:02:13,840
works and talk about our technique and

36
00:02:13,840 --> 00:02:16,080
at the end that will include the

37
00:02:16,080 --> 00:02:18,319
simulation results and the comparison

38
00:02:18,319 --> 00:02:20,840
between our protocol and previous

39
00:02:20,840 --> 00:02:24,000
works ah

40
00:02:26,959 --> 00:02:28,480
that's not work

41
00:02:28,480 --> 00:02:30,720
okay

42
00:02:30,720 --> 00:02:32,319
uh

43
00:02:32,319 --> 00:02:37,000
i guess the keyboard is not working

44
00:02:38,480 --> 00:02:39,440
oh yes

45
00:02:39,440 --> 00:02:40,879
thank you

46
00:02:40,879 --> 00:02:43,680
yeah so um

47
00:02:43,680 --> 00:02:46,080
yeah so secure aggregation refers to a

48
00:02:46,080 --> 00:02:46,959
problem

49
00:02:46,959 --> 00:02:50,879
uh in which a set of users and one or a

50
00:02:50,879 --> 00:02:52,879
few central servers want to

51
00:02:52,879 --> 00:02:55,040
um collaboratively

52
00:02:55,040 --> 00:02:57,280
help you calculate the aggregation

53
00:02:57,280 --> 00:03:00,159
result of secret input of the user so

54
00:03:00,159 --> 00:03:02,319
basically each user has a secret input

55
00:03:02,319 --> 00:03:04,800
in every equation and they want to

56
00:03:04,800 --> 00:03:05,920
calculate

57
00:03:05,920 --> 00:03:08,080
the sum of their secret input with the

58
00:03:08,080 --> 00:03:09,840
help of the central server

59
00:03:09,840 --> 00:03:12,560
but they don't want any other party

60
00:03:12,560 --> 00:03:14,480
including the server and also other

61
00:03:14,480 --> 00:03:16,319
users to know

62
00:03:16,319 --> 00:03:19,360
their own individual input

63
00:03:19,360 --> 00:03:21,599
so

64
00:03:22,080 --> 00:03:24,480
there are several applications of

65
00:03:24,480 --> 00:03:25,599
this

66
00:03:25,599 --> 00:03:28,720
primitive including voting in both

67
00:03:28,720 --> 00:03:31,440
applications and also counting the page

68
00:03:31,440 --> 00:03:33,920
number of the number of page accessories

69
00:03:33,920 --> 00:03:36,000
in internet browsers

70
00:03:36,000 --> 00:03:37,760
and also

71
00:03:37,760 --> 00:03:40,159
collecting the positive results of a

72
00:03:40,159 --> 00:03:42,640
copy 19 exposure

73
00:03:42,640 --> 00:03:44,840
in the notification

74
00:03:44,840 --> 00:03:47,120
system and also

75
00:03:47,120 --> 00:03:49,200
it can be used in

76
00:03:49,200 --> 00:03:52,159
private privacy preserving factory

77
00:03:52,159 --> 00:03:55,040
learning to aggregate the local update

78
00:03:55,040 --> 00:03:56,720
from the users

79
00:03:56,720 --> 00:03:59,280
remember that in federal learning every

80
00:03:59,280 --> 00:04:02,080
user needs to send its local update to

81
00:04:02,080 --> 00:04:04,640
the server so that the server can update

82
00:04:04,640 --> 00:04:06,640
the global model with the aggregation of

83
00:04:06,640 --> 00:04:08,879
the local updates and the user don't

84
00:04:08,879 --> 00:04:12,239
need to send their private training data

85
00:04:12,239 --> 00:04:14,720
however several existing works also show

86
00:04:14,720 --> 00:04:17,199
that this is not enough to protect the

87
00:04:17,199 --> 00:04:19,759
privacy of the pro of the training data

88
00:04:19,759 --> 00:04:21,918
because the local update can still leak

89
00:04:21,918 --> 00:04:24,479
sensitive information about the training

90
00:04:24,479 --> 00:04:25,759
set

91
00:04:25,759 --> 00:04:26,720
so

92
00:04:26,720 --> 00:04:29,199
here we need sql aggregation to let the

93
00:04:29,199 --> 00:04:31,680
server only learn the aggregate to

94
00:04:31,680 --> 00:04:32,720
update

95
00:04:32,720 --> 00:04:35,120
from the users rather than individual

96
00:04:35,120 --> 00:04:37,040
updates

97
00:04:37,040 --> 00:04:40,240
of every or very participant

98
00:04:40,240 --> 00:04:42,400
and because we focus on small input

99
00:04:42,400 --> 00:04:44,240
domain in this work

100
00:04:44,240 --> 00:04:47,040
our work will be suitable for

101
00:04:47,040 --> 00:04:48,639
federalist learning with region

102
00:04:48,639 --> 00:04:50,880
specification or quantized neural

103
00:04:50,880 --> 00:04:55,800
network or wage regular regularization

104
00:04:56,000 --> 00:04:58,000
and now i'm going to

105
00:04:58,000 --> 00:04:59,840
introduce the problem setting where

106
00:04:59,840 --> 00:05:02,800
focus we focus on so

107
00:05:02,800 --> 00:05:05,440
we consider the following model

108
00:05:05,440 --> 00:05:08,479
here we run the protocol with one single

109
00:05:08,479 --> 00:05:10,800
central server and then

110
00:05:10,800 --> 00:05:13,199
a user as participants

111
00:05:13,199 --> 00:05:15,039
and the users they will only talk to a

112
00:05:15,039 --> 00:05:16,639
server and they do not talk to each

113
00:05:16,639 --> 00:05:18,000
other

114
00:05:18,000 --> 00:05:19,840
and users might drop offline and come

115
00:05:19,840 --> 00:05:21,520
back online later

116
00:05:21,520 --> 00:05:24,240
and we also assume that the server and

117
00:05:24,240 --> 00:05:26,639
less than one half in someone's case or

118
00:05:26,639 --> 00:05:28,800
less than one third in malicious case of

119
00:05:28,800 --> 00:05:32,720
users can be compromised

120
00:05:33,680 --> 00:05:35,440
there are several existing works

121
00:05:35,440 --> 00:05:37,600
investigating this problem

122
00:05:37,600 --> 00:05:39,759
and the popular ones

123
00:05:39,759 --> 00:05:42,639
includes this paper published in 2017 by

124
00:05:42,639 --> 00:05:45,039
google which achieves communication cost

125
00:05:45,039 --> 00:05:48,479
of order and per iteration per user

126
00:05:48,479 --> 00:05:49,520
and

127
00:05:49,520 --> 00:05:52,000
they also have a full artwork published

128
00:05:52,000 --> 00:05:54,479
in 2020 which improved the communication

129
00:05:54,479 --> 00:05:56,800
cost to auto log in with user grouping

130
00:05:56,800 --> 00:05:59,360
technique but this work also increased

131
00:05:59,360 --> 00:06:01,600
the round complexity of each iteration

132
00:06:01,600 --> 00:06:03,600
and this slightly changed the security

133
00:06:03,600 --> 00:06:06,479
definition because now it relies on the

134
00:06:06,479 --> 00:06:10,479
probabilistic user grouping

135
00:06:10,479 --> 00:06:12,560
there are several other works also

136
00:06:12,560 --> 00:06:15,280
tackle this problem but they either only

137
00:06:15,280 --> 00:06:18,080
consider the same semi-honest case or

138
00:06:18,080 --> 00:06:20,240
they do not allow offline users to come

139
00:06:20,240 --> 00:06:21,680
back online later

140
00:06:21,680 --> 00:06:25,039
so in this work we focus on compare

141
00:06:25,039 --> 00:06:27,520
we focus on comparing to and improving

142
00:06:27,520 --> 00:06:29,440
the first two works

143
00:06:29,440 --> 00:06:32,160
and our results achieve the same level

144
00:06:32,160 --> 00:06:34,479
of security definition and

145
00:06:34,479 --> 00:06:36,720
we reduce the round complexity of each

146
00:06:36,720 --> 00:06:39,680
iteration we also improve the practical

147
00:06:39,680 --> 00:06:42,319
communication and computation efficiency

148
00:06:42,319 --> 00:06:45,680
by 50 to 100 times if the input domain

149
00:06:45,680 --> 00:06:47,199
is small

150
00:06:47,199 --> 00:06:49,599
so here is a quick comparison of the

151
00:06:49,599 --> 00:06:52,080
sympathetic communication cost per user

152
00:06:52,080 --> 00:06:53,759
penetration

153
00:06:53,759 --> 00:06:56,160
here the red underlying text

154
00:06:56,160 --> 00:06:58,880
is only needed in malicious case and the

155
00:06:58,880 --> 00:07:01,360
black effects are needed in

156
00:07:01,360 --> 00:07:04,000
both semi-honest and malicious case

157
00:07:04,000 --> 00:07:06,400
here the left two columns are from the

158
00:07:06,400 --> 00:07:08,400
previous two words and the right to

159
00:07:08,400 --> 00:07:11,199
columns are our work you can see that

160
00:07:11,199 --> 00:07:12,400
our work

161
00:07:12,400 --> 00:07:16,000
in every iteration we require less

162
00:07:16,000 --> 00:07:19,520
number of rounds and also in every round

163
00:07:19,520 --> 00:07:22,560
we achieve nearly constant communication

164
00:07:22,560 --> 00:07:24,800
communication cost while the previous

165
00:07:24,800 --> 00:07:26,960
works in every round

166
00:07:26,960 --> 00:07:29,360
each user needs to send and receive

167
00:07:29,360 --> 00:07:33,599
other end or all the login elements

168
00:07:33,599 --> 00:07:36,240
in every row

169
00:07:36,720 --> 00:07:37,680
so

170
00:07:37,680 --> 00:07:39,199
now i want to

171
00:07:39,199 --> 00:07:41,759
talk about our technique

172
00:07:41,759 --> 00:07:43,840
to start with i want to quickly recap

173
00:07:43,840 --> 00:07:45,919
the primitive of the other financial

174
00:07:45,919 --> 00:07:47,520
mutual sharing

175
00:07:47,520 --> 00:07:49,039
remember that

176
00:07:49,039 --> 00:07:51,199
this primitive allows the secret holder

177
00:07:51,199 --> 00:07:53,759
to divide the secret into

178
00:07:53,759 --> 00:07:57,199
ensures such that nt of them can be

179
00:07:57,199 --> 00:07:59,840
reconstructed into the original secret

180
00:07:59,840 --> 00:08:02,479
while and less than two of them does not

181
00:08:02,479 --> 00:08:05,759
leak any information of the secret

182
00:08:05,759 --> 00:08:07,919
and this game also has a additive

183
00:08:07,919 --> 00:08:10,800
homomorphism property which means if we

184
00:08:10,800 --> 00:08:13,599
have two secret holders and each of them

185
00:08:13,599 --> 00:08:16,160
use t outfit sequel sharing to share the

186
00:08:16,160 --> 00:08:19,440
secrets with the same set of users

187
00:08:19,440 --> 00:08:20,400
then

188
00:08:20,400 --> 00:08:23,199
if each user add the shares they receive

189
00:08:23,199 --> 00:08:24,319
up

190
00:08:24,319 --> 00:08:26,720
this will give us the share of the sum

191
00:08:26,720 --> 00:08:28,400
of the secrets

192
00:08:28,400 --> 00:08:31,840
so basically the sum of the shares

193
00:08:31,840 --> 00:08:34,320
is just the shares of the sum

194
00:08:34,320 --> 00:08:35,360
um

195
00:08:35,360 --> 00:08:37,919
and this immediately gives us the naive

196
00:08:37,919 --> 00:08:40,240
solution to the secret aggregation

197
00:08:40,240 --> 00:08:42,080
problem we mentioned earlier

198
00:08:42,080 --> 00:08:46,000
we can just let everyone secretly share

199
00:08:46,000 --> 00:08:48,240
its secret input

200
00:08:48,240 --> 00:08:50,320
to be more specific let's consider the

201
00:08:50,320 --> 00:08:53,040
following solution

202
00:08:53,040 --> 00:08:56,240
every user with their secret input now

203
00:08:56,240 --> 00:08:58,880
first sql share their input among all of

204
00:08:58,880 --> 00:09:00,080
the

205
00:09:00,080 --> 00:09:01,279
users

206
00:09:01,279 --> 00:09:02,959
and they encrypt the shares with the

207
00:09:02,959 --> 00:09:05,040
symmetric key they agreed with the other

208
00:09:05,040 --> 00:09:07,600
users in advance and since the encrypted

209
00:09:07,600 --> 00:09:09,839
share to the server and server forwards

210
00:09:09,839 --> 00:09:12,080
the encrypted share to the corresponding

211
00:09:12,080 --> 00:09:15,200
receivers and every user

212
00:09:15,200 --> 00:09:17,440
now decrypts the share with the

213
00:09:17,440 --> 00:09:19,920
symmetric key and sends the sum of share

214
00:09:19,920 --> 00:09:23,200
to the server because we have additive

215
00:09:23,200 --> 00:09:24,560
homomorphism

216
00:09:24,560 --> 00:09:26,959
the server can now reconstruct the sum

217
00:09:26,959 --> 00:09:31,199
of the secret from the sum of shares

218
00:09:31,839 --> 00:09:34,480
and this solution already tolerates user

219
00:09:34,480 --> 00:09:37,519
drop offline because we have threshold t

220
00:09:37,519 --> 00:09:39,120
as long as there are

221
00:09:39,120 --> 00:09:41,600
at least two users be online and sending

222
00:09:41,600 --> 00:09:43,600
the server the sum of shares the server

223
00:09:43,600 --> 00:09:46,160
can always reconstruct the

224
00:09:46,160 --> 00:09:47,279
the

225
00:09:47,279 --> 00:09:50,959
sum of the secret inputs

226
00:09:50,959 --> 00:09:51,760
um

227
00:09:51,760 --> 00:09:52,640
but

228
00:09:52,640 --> 00:09:55,440
this solution also requires ordering

229
00:09:55,440 --> 00:09:57,839
communication per user per iteration

230
00:09:57,839 --> 00:09:59,040
because

231
00:09:59,040 --> 00:10:01,920
even when every user only have one flash

232
00:10:01,920 --> 00:10:04,320
input in every iteration it still needs

233
00:10:04,320 --> 00:10:07,519
two secret shares among all of the users

234
00:10:07,519 --> 00:10:10,560
which requires sending and receiving

235
00:10:10,560 --> 00:10:13,360
order and shares

236
00:10:13,360 --> 00:10:15,440
so the natural question here is

237
00:10:15,440 --> 00:10:17,839
can we share something just once and

238
00:10:17,839 --> 00:10:20,880
reuse it to hide the fresh secret input

239
00:10:20,880 --> 00:10:22,480
in every iteration to reduce the

240
00:10:22,480 --> 00:10:24,560
communication cost

241
00:10:24,560 --> 00:10:27,600
and the solution we propose is to add a

242
00:10:27,600 --> 00:10:32,000
layer of reusable random mask

243
00:10:32,000 --> 00:10:35,440
so to be more specific we add a one-time

244
00:10:35,440 --> 00:10:37,200
setup phase before all of the

245
00:10:37,200 --> 00:10:38,480
aggregation

246
00:10:38,480 --> 00:10:39,519
happens

247
00:10:39,519 --> 00:10:42,000
so in this database every user uniformly

248
00:10:42,000 --> 00:10:44,800
randomly pick a random mask r and

249
00:10:44,800 --> 00:10:46,640
secretly share it in the same way as

250
00:10:46,640 --> 00:10:49,200
described before so at the end of setup

251
00:10:49,200 --> 00:10:51,839
phase every user should have one share

252
00:10:51,839 --> 00:10:56,640
of the random mask of each other user

253
00:10:56,640 --> 00:10:59,279
and in the when aggregation happens

254
00:10:59,279 --> 00:11:02,640
every user will have a secret input

255
00:11:02,640 --> 00:11:05,839
and in first step every user sends the

256
00:11:05,839 --> 00:11:08,560
masked input which is the sum of secrets

257
00:11:08,560 --> 00:11:10,959
and the mask to server

258
00:11:10,959 --> 00:11:14,000
and the server send back the online set

259
00:11:14,000 --> 00:11:16,240
and every user now sends the sum of

260
00:11:16,240 --> 00:11:19,600
shares from the online sets to server

261
00:11:19,600 --> 00:11:21,360
and because we have added from

262
00:11:21,360 --> 00:11:23,360
homophysicism the server can now

263
00:11:23,360 --> 00:11:25,760
reconstruct the sum of the random mask

264
00:11:25,760 --> 00:11:28,399
of the online set and remove it from the

265
00:11:28,399 --> 00:11:32,560
sum of secret uh must mask the input

266
00:11:32,560 --> 00:11:33,920
um

267
00:11:33,920 --> 00:11:34,880
but

268
00:11:34,880 --> 00:11:37,200
you have you might have already noticed

269
00:11:37,200 --> 00:11:39,040
that this hasn't given us a

270
00:11:39,040 --> 00:11:40,720
reasonability yet

271
00:11:40,720 --> 00:11:43,200
because if we consider a next iteration

272
00:11:43,200 --> 00:11:45,440
if someone drops offline

273
00:11:45,440 --> 00:11:47,440
and everyone still use the same random

274
00:11:47,440 --> 00:11:49,760
mask then

275
00:11:49,760 --> 00:11:51,519
in the first step every user still sends

276
00:11:51,519 --> 00:11:53,519
the most input and servers send back the

277
00:11:53,519 --> 00:11:54,720
online set

278
00:11:54,720 --> 00:11:57,600
and every user send back the sum of

279
00:11:57,600 --> 00:12:00,800
shares of the line set

280
00:12:00,800 --> 00:12:02,959
now the server can get the sum of the

281
00:12:02,959 --> 00:12:05,760
masks of the online set but this not

282
00:12:05,760 --> 00:12:08,560
only lets the server calculate the sum

283
00:12:08,560 --> 00:12:11,760
of the secret of online set but also it

284
00:12:11,760 --> 00:12:16,959
leaks the mask of the offline user

285
00:12:17,839 --> 00:12:20,720
so now immediately the offline user's

286
00:12:20,720 --> 00:12:24,240
historical input will be linked

287
00:12:24,240 --> 00:12:26,480
um

288
00:12:26,480 --> 00:12:29,200
sorry so in this solution we cannot

289
00:12:29,200 --> 00:12:31,839
reuse the mask yet we still need to

290
00:12:31,839 --> 00:12:33,760
secret share of rest masking and

291
00:12:33,760 --> 00:12:35,920
recreation but this is already a simple

292
00:12:35,920 --> 00:12:37,519
version then

293
00:12:37,519 --> 00:12:40,480
the previous work published in 2017

294
00:12:40,480 --> 00:12:42,560
because the previous work

295
00:12:42,560 --> 00:12:45,440
requires each user to share two masks

296
00:12:45,440 --> 00:12:46,800
and the server needs to do

297
00:12:46,800 --> 00:12:50,079
reconstruction for every user but here

298
00:12:50,079 --> 00:12:52,800
we only need to sql share one mask and

299
00:12:52,800 --> 00:12:55,600
the server only need to do

300
00:12:55,600 --> 00:12:57,519
one

301
00:12:57,519 --> 00:12:59,519
reconstruction for all of the users to

302
00:12:59,519 --> 00:13:03,120
calculate the sum of the masks

303
00:13:03,600 --> 00:13:04,880
but here we

304
00:13:04,880 --> 00:13:07,120
still want to make this random mask

305
00:13:07,120 --> 00:13:10,000
reusable so that we don't need to secret

306
00:13:10,000 --> 00:13:13,360
share a fresh mask in every iteration

307
00:13:13,360 --> 00:13:15,920
to achieve this goal we need to further

308
00:13:15,920 --> 00:13:20,160
hide the sum of the random masks

309
00:13:20,160 --> 00:13:21,519
um to

310
00:13:21,519 --> 00:13:24,160
to hide this mask we need an additional

311
00:13:24,160 --> 00:13:27,040
assumption which is ddh assumption in

312
00:13:27,040 --> 00:13:30,000
our proof but here um

313
00:13:30,000 --> 00:13:32,800
i'm just going to highly introduce it so

314
00:13:32,800 --> 00:13:35,600
the intuition is that

315
00:13:35,600 --> 00:13:37,920
the discrete log in a large enough

316
00:13:37,920 --> 00:13:39,360
psychological group

317
00:13:39,360 --> 00:13:41,839
is very hard if the exponent is

318
00:13:41,839 --> 00:13:44,399
uniformly randomly chosen

319
00:13:44,399 --> 00:13:46,959
so remember that this assumption only

320
00:13:46,959 --> 00:13:49,199
hold when this r is uniformly randomly

321
00:13:49,199 --> 00:13:50,160
chosen

322
00:13:50,160 --> 00:13:53,680
if this exponent is from a small

323
00:13:53,680 --> 00:13:55,440
relatively small domain

324
00:13:55,440 --> 00:13:56,320
then

325
00:13:56,320 --> 00:13:58,240
both the exponential

326
00:13:58,240 --> 00:14:00,560
exponentiation and the

327
00:14:00,560 --> 00:14:02,800
discrete log will be easy there are

328
00:14:02,800 --> 00:14:05,279
several existing words um

329
00:14:05,279 --> 00:14:07,120
it has the technique to calculate

330
00:14:07,120 --> 00:14:10,560
different log in small range

331
00:14:10,560 --> 00:14:11,360
so

332
00:14:11,360 --> 00:14:12,480
um

333
00:14:12,480 --> 00:14:14,240
with this assumption

334
00:14:14,240 --> 00:14:14,959
we

335
00:14:14,959 --> 00:14:17,839
can now further hide this mask in

336
00:14:17,839 --> 00:14:20,880
exponent of the generator of the group

337
00:14:20,880 --> 00:14:25,680
so we modify our previous protocol to

338
00:14:25,680 --> 00:14:29,120
uh to the to to to this division so the

339
00:14:29,120 --> 00:14:32,160
setup is is exactly the same every user

340
00:14:32,160 --> 00:14:34,240
still choose a random mask and secretly

341
00:14:34,240 --> 00:14:35,279
share it

342
00:14:35,279 --> 00:14:37,760
but in the aggregation phase in first

343
00:14:37,760 --> 00:14:41,040
step every user now

344
00:14:41,040 --> 00:14:44,160
instead of sending the max masked inputs

345
00:14:44,160 --> 00:14:45,920
directly to the server

346
00:14:45,920 --> 00:14:49,440
now it's send it in exponents

347
00:14:49,440 --> 00:14:50,880
and next step

348
00:14:50,880 --> 00:14:53,680
server still send back the online sets

349
00:14:53,680 --> 00:14:57,120
and every user also sends the sum of

350
00:14:57,120 --> 00:14:59,680
shares in the exponent instead of

351
00:14:59,680 --> 00:15:02,399
sending it directly

352
00:15:02,399 --> 00:15:04,320
and because the reconstruction of

353
00:15:04,320 --> 00:15:06,560
champion sharing only involves linear

354
00:15:06,560 --> 00:15:08,800
operations this reconstruction can

355
00:15:08,800 --> 00:15:11,360
happen in the exponent so the server can

356
00:15:11,360 --> 00:15:14,880
reconstruct the sum of r mask in the

357
00:15:14,880 --> 00:15:16,079
exponents

358
00:15:16,079 --> 00:15:18,079
but because r is uniformly randomly

359
00:15:18,079 --> 00:15:20,320
chosen the server cannot do the discrete

360
00:15:20,320 --> 00:15:22,720
log to extract the

361
00:15:22,720 --> 00:15:25,440
thumb of the masks

362
00:15:25,440 --> 00:15:28,800
now it can remove uh the sum of max

363
00:15:28,800 --> 00:15:32,480
masks from the g2d sum of mask inputs

364
00:15:32,480 --> 00:15:35,600
and it will get a sum of secret in

365
00:15:35,600 --> 00:15:36,959
exponent

366
00:15:36,959 --> 00:15:39,279
and because we assume that

367
00:15:39,279 --> 00:15:42,959
the secret secret inputs are from a

368
00:15:42,959 --> 00:15:45,120
relatively small domain

369
00:15:45,120 --> 00:15:46,880
the server can now calculate this

370
00:15:46,880 --> 00:15:51,199
gridlock to get the form of secret

371
00:15:53,680 --> 00:15:55,680
um this is uh

372
00:15:55,680 --> 00:15:58,560
actually the first solution we give

373
00:15:58,560 --> 00:16:02,079
and uh here is the uh description of our

374
00:16:02,079 --> 00:16:04,320
protocol i'm not i'm going to skip the

375
00:16:04,320 --> 00:16:06,000
details and notations here but you can

376
00:16:06,000 --> 00:16:07,920
see that setup base requires three

377
00:16:07,920 --> 00:16:10,560
rounds and aggregation phase requires

378
00:16:10,560 --> 00:16:13,040
two or three rounds depends on the

379
00:16:13,040 --> 00:16:15,519
adversarial setting

380
00:16:15,519 --> 00:16:17,680
and in the first and last round every

381
00:16:17,680 --> 00:16:20,800
user only needs to send one single group

382
00:16:20,800 --> 00:16:24,480
element to the server in every iteration

383
00:16:24,480 --> 00:16:25,920
but here

384
00:16:25,920 --> 00:16:28,000
you might have already noticed that the

385
00:16:28,000 --> 00:16:30,560
server still needs to let every user

386
00:16:30,560 --> 00:16:31,440
know

387
00:16:31,440 --> 00:16:33,279
who are online and who are offline in

388
00:16:33,279 --> 00:16:35,440
every iteration and this information

389
00:16:35,440 --> 00:16:39,920
need to be represented in other m bits

390
00:16:39,920 --> 00:16:43,360
so to further reduce the asymptotic

391
00:16:43,360 --> 00:16:45,279
communication cost

392
00:16:45,279 --> 00:16:46,959
we

393
00:16:46,959 --> 00:16:49,600
improve this version by user grouping

394
00:16:49,600 --> 00:16:50,800
technique

395
00:16:50,800 --> 00:16:53,279
i'm also going to skip the details of

396
00:16:53,279 --> 00:16:54,800
these parts now

397
00:16:54,800 --> 00:16:55,600
but

398
00:16:55,600 --> 00:16:58,800
the basic idea is to divide the whole

399
00:16:58,800 --> 00:17:02,320
set of user into small groups of size

400
00:17:02,320 --> 00:17:05,599
order log n which in which reduced the

401
00:17:05,599 --> 00:17:08,079
communication cost also to all again per

402
00:17:08,079 --> 00:17:09,760
user iteration

403
00:17:09,760 --> 00:17:12,480
and we also achieved lower

404
00:17:12,480 --> 00:17:14,640
round complexity than the

405
00:17:14,640 --> 00:17:18,919
group version of the previous work

406
00:17:19,919 --> 00:17:20,799
and

407
00:17:20,799 --> 00:17:23,199
we implement our protocol and also the

408
00:17:23,199 --> 00:17:25,439
previous work with ibex framework which

409
00:17:25,439 --> 00:17:28,160
is a discrete event simulation framework

410
00:17:28,160 --> 00:17:29,679
and run the

411
00:17:29,679 --> 00:17:32,400
simulation on adabas machine and here

412
00:17:32,400 --> 00:17:33,360
are some

413
00:17:33,360 --> 00:17:35,520
comparisons of the running result

414
00:17:35,520 --> 00:17:38,559
so here is the comparison of bandwidth

415
00:17:38,559 --> 00:17:40,880
cost per iteration

416
00:17:40,880 --> 00:17:43,280
here the y-axis is the

417
00:17:43,280 --> 00:17:46,240
size of the message spent by each user

418
00:17:46,240 --> 00:17:48,240
or by server

419
00:17:48,240 --> 00:17:51,200
invites and the x-axis is the number of

420
00:17:51,200 --> 00:17:52,799
dollar users

421
00:17:52,799 --> 00:17:54,000
and here

422
00:17:54,000 --> 00:17:56,240
we assume that the aggregated results

423
00:17:56,240 --> 00:17:59,520
can be represented in 20 bits and for

424
00:17:59,520 --> 00:18:01,760
the two group versions of previous work

425
00:18:01,760 --> 00:18:04,880
and artwork we use group size 100

426
00:18:04,880 --> 00:18:07,280
and here the broad and black line are

427
00:18:07,280 --> 00:18:09,200
the previous works and blue and red

428
00:18:09,200 --> 00:18:11,520
lines are from our work

429
00:18:11,520 --> 00:18:13,440
it looks like it's close to zero but

430
00:18:13,440 --> 00:18:14,720
actually

431
00:18:14,720 --> 00:18:15,760
it is

432
00:18:15,760 --> 00:18:17,760
above the zero line but because of the

433
00:18:17,760 --> 00:18:20,799
scale it does not show very clearly here

434
00:18:20,799 --> 00:18:23,360
uh and here we assume that the aggregate

435
00:18:23,360 --> 00:18:25,840
results can be represented in 20 bits

436
00:18:25,840 --> 00:18:29,679
but with a higher lens or larger range

437
00:18:29,679 --> 00:18:30,960
we still

438
00:18:30,960 --> 00:18:33,200
we still have like techniques like

439
00:18:33,200 --> 00:18:35,840
rainbow table or kangaroo algorithms

440
00:18:35,840 --> 00:18:37,280
that can also

441
00:18:37,280 --> 00:18:39,919
handle larger input

442
00:18:39,919 --> 00:18:41,360
and

443
00:18:41,360 --> 00:18:44,000
these slides shows the comparison of the

444
00:18:44,000 --> 00:18:46,480
computation time per iteration

445
00:18:46,480 --> 00:18:49,280
uh for each user or for the server now

446
00:18:49,280 --> 00:18:51,360
that y-axis is the

447
00:18:51,360 --> 00:18:54,000
computation time is second and other

448
00:18:54,000 --> 00:18:56,080
settings are all the same and here the

449
00:18:56,080 --> 00:18:58,160
red and black lines are

450
00:18:58,160 --> 00:19:00,559
for the previous works and blue and

451
00:19:00,559 --> 00:19:04,080
brown lines are forward

452
00:19:04,480 --> 00:19:05,919
in conclusion

453
00:19:05,919 --> 00:19:07,679
in this work we propose a secret

454
00:19:07,679 --> 00:19:10,160
aggregation protocol for small input

455
00:19:10,160 --> 00:19:12,400
domain and we

456
00:19:12,400 --> 00:19:14,559
in our in our work we only need to

457
00:19:14,559 --> 00:19:16,799
secretly share one mask

458
00:19:16,799 --> 00:19:19,679
once uh in setup phase and we can reuse

459
00:19:19,679 --> 00:19:21,600
it in every iteration

460
00:19:21,600 --> 00:19:22,640
and

461
00:19:22,640 --> 00:19:26,320
with this reusable mask we achieve lower

462
00:19:26,320 --> 00:19:28,559
round complexity in aggregation phase

463
00:19:28,559 --> 00:19:31,200
and we also achieve better practical

464
00:19:31,200 --> 00:19:32,720
performance when the input domain is

465
00:19:32,720 --> 00:19:34,720
small

466
00:19:34,720 --> 00:19:36,799
so this is

467
00:19:36,799 --> 00:19:39,280
all to talk tomorrow today thank you

468
00:19:39,280 --> 00:19:41,679
very much

469
00:19:41,679 --> 00:19:43,039
thank you

470
00:19:43,039 --> 00:19:44,960
thank you for your talk

471
00:19:44,960 --> 00:19:46,400
so we have a

472
00:19:46,400 --> 00:19:48,640
minute or two for questions we want to

473
00:19:48,640 --> 00:19:50,400
ask the audience also the ones in some

474
00:19:50,400 --> 00:19:52,400
can ask in the chat

475
00:19:52,400 --> 00:19:53,600
and if the audience wants to ask a

476
00:19:53,600 --> 00:19:55,520
question we will kindly ask you either

477
00:19:55,520 --> 00:19:57,679
come here or you can ask there and we

478
00:19:57,679 --> 00:19:59,280
ask the speaker to repeat the question

479
00:19:59,280 --> 00:20:00,480
please

480
00:20:00,480 --> 00:20:03,960
it's up to you

481
00:20:19,840 --> 00:20:20,880
uh

482
00:20:20,880 --> 00:20:22,960
sorry i didn't hear the first part

483
00:20:22,960 --> 00:20:24,159
clearly

484
00:20:24,159 --> 00:20:27,280
would you mind repeating

485
00:20:30,240 --> 00:20:32,480
oh

486
00:20:32,840 --> 00:20:34,960
sure hold on let me give you the

487
00:20:34,960 --> 00:20:36,400
microphone i think it's hard to listen

488
00:20:36,400 --> 00:20:38,559
there

489
00:20:42,400 --> 00:20:43,919
oh do me here

490
00:20:43,919 --> 00:20:46,559
yeah so my question is like you're able

491
00:20:46,559 --> 00:20:49,280
to calculate the district clock for the

492
00:20:49,280 --> 00:20:50,880
uh

493
00:20:50,880 --> 00:20:52,799
the sum of the secret share

494
00:20:52,799 --> 00:20:54,480
why can't uh

495
00:20:54,480 --> 00:20:56,240
like the malaysia server calculate the

496
00:20:56,240 --> 00:20:58,159
strict lock for the some of the reusable

497
00:20:58,159 --> 00:20:59,120
mask

498
00:20:59,120 --> 00:21:02,000
oh that is because the reusable mask is

499
00:21:02,000 --> 00:21:04,720
unit from random beacon from a very

500
00:21:04,720 --> 00:21:06,400
large

501
00:21:06,400 --> 00:21:08,559
very large domain oh it's like all

502
00:21:08,559 --> 00:21:10,320
domains are different from both this is

503
00:21:10,320 --> 00:21:12,240
why

504
00:21:12,240 --> 00:21:15,120
we focus on the small import only

505
00:21:15,120 --> 00:21:17,360
so that the the

506
00:21:17,360 --> 00:21:19,919
sum of the secrets is much smaller than

507
00:21:19,919 --> 00:21:20,640
the

508
00:21:20,640 --> 00:21:22,320
than the masks

509
00:21:22,320 --> 00:21:23,919
okay like i thought both of them are

510
00:21:23,919 --> 00:21:27,840
sharing the domain thank you thank you

511
00:21:28,960 --> 00:21:31,840
thank you is there any other question

512
00:21:33,120 --> 00:21:35,360
please

513
00:21:37,360 --> 00:21:41,200
hi um so about this reusable mask

514
00:21:41,200 --> 00:21:43,600
if the same if the same mask is used by

515
00:21:43,600 --> 00:21:47,039
the same client over iterations then

516
00:21:47,039 --> 00:21:49,520
wouldn't the server be able to compute

517
00:21:49,520 --> 00:21:50,559
that

518
00:21:50,559 --> 00:21:52,799
uh division and then

519
00:21:52,799 --> 00:21:54,960
oh yes can i find the difference yeah

520
00:21:54,960 --> 00:21:58,240
sorry i skipped this detail here so um

521
00:21:58,240 --> 00:22:01,600
remember that we need a generator to to

522
00:22:01,600 --> 00:22:04,720
to be the uh to be the base of the

523
00:22:04,720 --> 00:22:07,440
exponentiation uh in every iteration we

524
00:22:07,440 --> 00:22:08,559
use a

525
00:22:08,559 --> 00:22:11,360
random oracle or hash function

526
00:22:11,360 --> 00:22:14,159
take the iteration number as an input so

527
00:22:14,159 --> 00:22:16,320
in every iteration the base will be

528
00:22:16,320 --> 00:22:17,520
different

529
00:22:17,520 --> 00:22:19,679
and with ddh assumption

530
00:22:19,679 --> 00:22:22,000
it guarantees that the server cannot

531
00:22:22,000 --> 00:22:23,440
extract

532
00:22:23,440 --> 00:22:26,000
effective information about the random

533
00:22:26,000 --> 00:22:27,039
mask

534
00:22:27,039 --> 00:22:27,919
thank you

535
00:22:27,919 --> 00:22:29,760
thank you

536
00:22:29,760 --> 00:22:31,520
okay with that all the questions let's

537
00:22:31,520 --> 00:22:33,039
take them online let's thank the speaker

538
00:22:33,039 --> 00:22:36,039
again

539
00:22:40,080 --> 00:22:42,158
you

