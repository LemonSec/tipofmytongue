1
00:00:00,480 --> 00:00:02,240
talks cannot be delivered in person so

2
00:00:02,240 --> 00:00:03,840
the next two talks

3
00:00:03,840 --> 00:00:07,279
are going to be given remotely

4
00:00:07,279 --> 00:00:09,440
they have to change last minute and

5
00:00:09,440 --> 00:00:11,120
these are this is the only set of talks

6
00:00:11,120 --> 00:00:12,160
that are going to be

7
00:00:12,160 --> 00:00:14,320
given remotely in this

8
00:00:14,320 --> 00:00:17,320
event

9
00:00:20,160 --> 00:00:21,680
so i understand

10
00:00:21,680 --> 00:00:23,439
laxmi is there

11
00:00:23,439 --> 00:00:25,439
hello yeah

12
00:00:25,439 --> 00:00:28,000
yes perfect so can you please share your

13
00:00:28,000 --> 00:00:28,960
screen

14
00:00:28,960 --> 00:00:31,840
yeah

15
00:00:32,719 --> 00:00:35,600
okay perfect is it fine yeah yeah it's

16
00:00:35,600 --> 00:00:38,160
it's playing fine and um hold on let me

17
00:00:38,160 --> 00:00:40,160
make sure we can see you yeah it's

18
00:00:40,160 --> 00:00:42,320
playing fine right

19
00:00:42,320 --> 00:00:44,399
yeah it's playing and we can see you

20
00:00:44,399 --> 00:00:45,760
okay

21
00:00:45,760 --> 00:00:47,360
okay

22
00:00:47,360 --> 00:00:49,200
excellent so

23
00:00:49,200 --> 00:00:53,120
the next talk um is on cmc ml inference

24
00:00:53,120 --> 00:00:55,680
secure against the malicious clients at

25
00:00:55,680 --> 00:00:57,120
semianas cost

26
00:00:57,120 --> 00:00:58,640
laxmi is going to give the talk and

27
00:00:58,640 --> 00:00:59,920
that's going to work with nishan

28
00:00:59,920 --> 00:01:02,640
shantran divya gupta and akash shah

29
00:01:02,640 --> 00:01:04,479
thank you so much

30
00:01:04,479 --> 00:01:05,280
yeah

31
00:01:05,280 --> 00:01:06,159
thank you

32
00:01:06,159 --> 00:01:07,119
um

33
00:01:07,119 --> 00:01:08,640
good morning everyone

34
00:01:08,640 --> 00:01:12,640
i am uber from microsoft research india

35
00:01:12,640 --> 00:01:14,240
and in this talk i will discuss high

36
00:01:14,240 --> 00:01:17,520
level ideas of our result constancy

37
00:01:17,520 --> 00:01:22,360
and this work is published at u62

38
00:01:22,799 --> 00:01:24,720
so the problem of inference is as

39
00:01:24,720 --> 00:01:27,520
follows here are two entities a client

40
00:01:27,520 --> 00:01:30,000
who holds his sensitive medical data and

41
00:01:30,000 --> 00:01:31,840
an insurance company that owns a

42
00:01:31,840 --> 00:01:33,600
well-trained machine learning model

43
00:01:33,600 --> 00:01:35,840
which could classify clients as high low

44
00:01:35,840 --> 00:01:38,079
risk or high risk based on the client's

45
00:01:38,079 --> 00:01:40,400
medical data both the parties want to

46
00:01:40,400 --> 00:01:42,720
learn this classification and my way to

47
00:01:42,720 --> 00:01:44,720
do this would be for the client to send

48
00:01:44,720 --> 00:01:47,119
his data to the server who then learns

49
00:01:47,119 --> 00:01:48,880
the inference and shares the result with

50
00:01:48,880 --> 00:01:50,560
client

51
00:01:50,560 --> 00:01:52,479
but the problem with this knife solution

52
00:01:52,479 --> 00:01:54,880
is that it does not preserve privacy of

53
00:01:54,880 --> 00:01:56,880
the parties as the server loves the

54
00:01:56,880 --> 00:02:00,240
sensitive data of the client in clear

55
00:02:00,240 --> 00:02:02,240
secure inference tries to solve the

56
00:02:02,240 --> 00:02:04,000
problem of inference in a privacy

57
00:02:04,000 --> 00:02:06,479
preserving manner

58
00:02:06,479 --> 00:02:08,639
two threat models considered implied

59
00:02:08,639 --> 00:02:10,318
literature for the problem of secure

60
00:02:10,318 --> 00:02:12,959
inference are the semi honest model

61
00:02:12,959 --> 00:02:14,560
where both the parties the server and

62
00:02:14,560 --> 00:02:16,959
client are honestly participate in the

63
00:02:16,959 --> 00:02:19,920
protocol execution

64
00:02:19,920 --> 00:02:22,239
and because of this weaker threat model

65
00:02:22,239 --> 00:02:24,160
in this model we have super efficient

66
00:02:24,160 --> 00:02:27,040
protocols due to results like

67
00:02:27,040 --> 00:02:29,680
gasoline and kryptonites delphi secure

68
00:02:29,680 --> 00:02:32,000
ml siren crypto2

69
00:02:32,000 --> 00:02:34,720
and the other stronger threat model is

70
00:02:34,720 --> 00:02:36,959
the malicious model where one of the

71
00:02:36,959 --> 00:02:39,920
parties can arbitrarily can

72
00:02:39,920 --> 00:02:41,920
choose to arbitrarily deviate from the

73
00:02:41,920 --> 00:02:44,319
protocol because of this richard the

74
00:02:44,319 --> 00:02:46,959
security guarantee the protocols in this

75
00:02:46,959 --> 00:02:51,640
setting turn out to be highly expensive

76
00:02:52,239 --> 00:02:54,160
bridging this gap another interesting

77
00:02:54,160 --> 00:02:55,200
model

78
00:02:55,200 --> 00:02:57,040
that was introduced for secure inference

79
00:02:57,040 --> 00:02:59,120
is the client malicious model but the

80
00:02:59,120 --> 00:03:02,080
server is semi honest but

81
00:03:02,080 --> 00:03:04,480
the client could behave maliciously

82
00:03:04,480 --> 00:03:06,800
this is a reasonable model as there are

83
00:03:06,800 --> 00:03:09,519
scenarios where the server is reputed

84
00:03:09,519 --> 00:03:11,280
and may not have any vested interest in

85
00:03:11,280 --> 00:03:13,360
cheating the client whereas usually

86
00:03:13,360 --> 00:03:15,040
thousands of clients interact with the

87
00:03:15,040 --> 00:03:17,120
server and it's unreasonable to believe

88
00:03:17,120 --> 00:03:20,080
that all the clients would be semi

89
00:03:20,080 --> 00:03:21,040
honest

90
00:03:21,040 --> 00:03:23,680
this model was introduced in the result

91
00:03:23,680 --> 00:03:24,959
called muse

92
00:03:24,959 --> 00:03:26,959
which was authored by lei mukul mishra

93
00:03:26,959 --> 00:03:29,120
srinivasan adapa which was published at

94
00:03:29,120 --> 00:03:31,280
u6 2021

95
00:03:31,280 --> 00:03:33,360
in this result they also give explicit

96
00:03:33,360 --> 00:03:35,360
model extraction attacks against

97
00:03:35,360 --> 00:03:38,239
existing semi honest secure inference

98
00:03:38,239 --> 00:03:39,760
protocols

99
00:03:39,760 --> 00:03:42,239
which are much efficient when compared

100
00:03:42,239 --> 00:03:44,640
to just black box access attacks when

101
00:03:44,640 --> 00:03:45,680
the client

102
00:03:45,680 --> 00:03:47,599
behaves maliciously

103
00:03:47,599 --> 00:03:50,000
and this paper also builds secure

104
00:03:50,000 --> 00:03:51,680
inference protocols in schleich

105
00:03:51,680 --> 00:03:55,280
malicious model but this protocol

106
00:03:55,280 --> 00:03:57,599
though it provides this intermediate

107
00:03:57,599 --> 00:03:59,360
secure

108
00:03:59,360 --> 00:04:01,280
intermediate

109
00:04:01,280 --> 00:04:03,040
protocol that secured again in this

110
00:04:03,040 --> 00:04:04,879
intermediate threat model

111
00:04:04,879 --> 00:04:06,720
this is much less performant than the

112
00:04:06,720 --> 00:04:10,159
state-of-the-art semi-honest protocols

113
00:04:10,159 --> 00:04:12,720
so this made us wonder if we could build

114
00:04:12,720 --> 00:04:14,879
secure inference protocols in the client

115
00:04:14,879 --> 00:04:17,440
malicious model that are as efficient as

116
00:04:17,440 --> 00:04:20,639
semi-honest protocols and with our work

117
00:04:20,639 --> 00:04:23,120
simsy we could positively answer this

118
00:04:23,120 --> 00:04:24,080
question

119
00:04:24,080 --> 00:04:26,080
and simsy stands for secure inference

120
00:04:26,080 --> 00:04:29,600
against malicious clients

121
00:04:29,600 --> 00:04:31,600
heading into technical details the

122
00:04:31,600 --> 00:04:33,680
building blocks that we use are as

123
00:04:33,680 --> 00:04:34,880
follows

124
00:04:34,880 --> 00:04:37,840
we use authenticated shares which are in

125
00:04:37,840 --> 00:04:39,199
the client malicious setting which are

126
00:04:39,199 --> 00:04:40,800
defined as follows

127
00:04:40,800 --> 00:04:43,199
so two parties the server and client are

128
00:04:43,199 --> 00:04:45,280
said to hold shares of a field element x

129
00:04:45,280 --> 00:04:46,880
if the server

130
00:04:46,880 --> 00:04:49,600
and the client hold x 0 and x 1 such

131
00:04:49,600 --> 00:04:51,520
that

132
00:04:51,520 --> 00:04:54,479
x 0 and x 1 sum to x and authentication

133
00:04:54,479 --> 00:04:57,440
of an element x is defined as

134
00:04:57,440 --> 00:05:00,000
alpha into x where alpha is a uniform

135
00:05:00,000 --> 00:05:02,560
mac key that is chosen by the server

136
00:05:02,560 --> 00:05:04,000
and the parties are set to hold

137
00:05:04,000 --> 00:05:06,160
authenticated shares of x if they hold

138
00:05:06,160 --> 00:05:09,199
shares of both x and alpha x

139
00:05:09,199 --> 00:05:11,759
the security guarantee here is that

140
00:05:11,759 --> 00:05:13,919
given authenticated shares annex the

141
00:05:13,919 --> 00:05:16,639
client cannot forge authenticated shares

142
00:05:16,639 --> 00:05:19,199
of any x prime not equal to x by locally

143
00:05:19,199 --> 00:05:21,600
manipulating his shares by cannot i mean

144
00:05:21,600 --> 00:05:23,840
that this is only possible with

145
00:05:23,840 --> 00:05:27,039
negligible probability

146
00:05:28,000 --> 00:05:29,840
the next building block is a garbling

147
00:05:29,840 --> 00:05:31,840
scheme

148
00:05:31,840 --> 00:05:34,080
so at a very abstract level a garbling

149
00:05:34,080 --> 00:05:36,080
scheme can be viewed as a functionality

150
00:05:36,080 --> 00:05:38,400
that allows two parties a garbler and

151
00:05:38,400 --> 00:05:40,400
evaluator to evaluate any boolean

152
00:05:40,400 --> 00:05:42,720
circuit c on their private inputs a and

153
00:05:42,720 --> 00:05:45,039
b respectively for simplicity assume

154
00:05:45,039 --> 00:05:46,560
that the circuit

155
00:05:46,560 --> 00:05:49,680
just outputs one bit then the

156
00:05:49,680 --> 00:05:52,720
gargler inputs his input a to the scheme

157
00:05:52,720 --> 00:05:55,680
and the evaluator inputs b to the scheme

158
00:05:55,680 --> 00:05:58,319
and then as the output from the scheme

159
00:05:58,319 --> 00:06:00,319
the gargler learns

160
00:06:00,319 --> 00:06:03,440
a pair of uniform labels denoted as k0

161
00:06:03,440 --> 00:06:06,960
and k1 and the evaluator learns

162
00:06:06,960 --> 00:06:09,919
the label kc where c denotes the output

163
00:06:09,919 --> 00:06:13,919
of the circuit evaluation on a and b

164
00:06:13,919 --> 00:06:16,560
the output of the scheme which are these

165
00:06:16,560 --> 00:06:18,639
uniform keys can be later used by the

166
00:06:18,639 --> 00:06:20,800
parties to learn the circuit output we

167
00:06:20,800 --> 00:06:23,039
call this procedure as the garbling but

168
00:06:23,039 --> 00:06:25,520
the gargler sends two surface attacks

169
00:06:25,520 --> 00:06:28,639
encrypting with zero or zero

170
00:06:28,639 --> 00:06:31,039
and one using labels k zero and k one

171
00:06:31,039 --> 00:06:33,120
respectively and the evaluator can

172
00:06:33,120 --> 00:06:36,080
decrypt the ciphertext corresponding to

173
00:06:36,080 --> 00:06:37,039
kc

174
00:06:37,039 --> 00:06:39,600
to recover c due to time constraints i

175
00:06:39,600 --> 00:06:41,759
haven't told you how the evaluator can

176
00:06:41,759 --> 00:06:43,600
locate which of the two ciphertext to

177
00:06:43,600 --> 00:06:46,400
decrypt and this can be done securely

178
00:06:46,400 --> 00:06:48,479
using the point and permute optimization

179
00:06:48,479 --> 00:06:50,080
but for this talk we will not get into

180
00:06:50,080 --> 00:06:51,360
those resets

181
00:06:51,360 --> 00:06:53,280
the security guarantee provided by the

182
00:06:53,280 --> 00:06:55,280
garbling scheme is that

183
00:06:55,280 --> 00:06:57,599
each party learns uh nothing other than

184
00:06:57,599 --> 00:07:00,160
its own input and the output

185
00:07:00,160 --> 00:07:02,479
of the circuit evaluation which is

186
00:07:02,479 --> 00:07:04,319
denoted by c here

187
00:07:04,319 --> 00:07:06,639
and garbling schemes can also be easily

188
00:07:06,639 --> 00:07:08,479
generalized for circuits with multi-bit

189
00:07:08,479 --> 00:07:11,120
outputs too

190
00:07:12,560 --> 00:07:13,440
now

191
00:07:13,440 --> 00:07:16,479
um i'll go on to summarize our protocol

192
00:07:16,479 --> 00:07:17,840
framework

193
00:07:17,840 --> 00:07:18,880
so

194
00:07:18,880 --> 00:07:21,120
typically a neural network is a sequence

195
00:07:21,120 --> 00:07:23,199
of alternating linear and non-linear

196
00:07:23,199 --> 00:07:25,680
layers where linear layer consists of

197
00:07:25,680 --> 00:07:28,240
operations like matrix multiplication

198
00:07:28,240 --> 00:07:31,039
convolutions etc and non-linear layers

199
00:07:31,039 --> 00:07:33,120
consists of operations like relu max

200
00:07:33,120 --> 00:07:35,199
pool etc

201
00:07:35,199 --> 00:07:36,080
so

202
00:07:36,080 --> 00:07:38,160
the protocol framework is as follows

203
00:07:38,160 --> 00:07:39,680
first the clients

204
00:07:39,680 --> 00:07:41,840
the client's input x

205
00:07:41,840 --> 00:07:42,840
is

206
00:07:42,840 --> 00:07:45,599
authenticated and these authenticated

207
00:07:45,599 --> 00:07:47,759
shares are fed as input to the linear

208
00:07:47,759 --> 00:07:50,960
layer first linear layer and

209
00:07:50,960 --> 00:07:52,400
at the end of the linear layer

210
00:07:52,400 --> 00:07:54,479
evaluation our protocol outputs

211
00:07:54,479 --> 00:07:57,599
authenticated shares of m1 into x where

212
00:07:57,599 --> 00:07:59,759
m1 denotes the matrix to be multiplied

213
00:07:59,759 --> 00:08:01,360
in this linear layer

214
00:08:01,360 --> 00:08:03,520
these authenticated shares are further

215
00:08:03,520 --> 00:08:05,759
fed as input to the next non-linear

216
00:08:05,759 --> 00:08:08,560
layer which outputs

217
00:08:08,560 --> 00:08:11,520
authenticated shares of f1 of m1 of x

218
00:08:11,520 --> 00:08:13,759
where f1 is the non-linear function that

219
00:08:13,759 --> 00:08:15,840
needs to be evaluated in this non-linear

220
00:08:15,840 --> 00:08:19,758
layer and this pattern follows

221
00:08:20,560 --> 00:08:22,720
we use additive homomorphic encryption

222
00:08:22,720 --> 00:08:25,759
to perform linear layer evaluation and

223
00:08:25,759 --> 00:08:28,800
more or less the ideas are same

224
00:08:28,800 --> 00:08:31,440
how on how to evaluate linear layers of

225
00:08:31,440 --> 00:08:33,839
the prior work and major contribution of

226
00:08:33,839 --> 00:08:35,839
our work lies in the non-linear layer

227
00:08:35,839 --> 00:08:38,479
evaluation and that will be the focus of

228
00:08:38,479 --> 00:08:41,839
the remaining talk

229
00:08:42,399 --> 00:08:43,599
so

230
00:08:43,599 --> 00:08:46,160
let y denote the output of the linear

231
00:08:46,160 --> 00:08:48,480
layer evaluation the previous linear

232
00:08:48,480 --> 00:08:50,720
layer evaluation so

233
00:08:50,720 --> 00:08:53,360
therefore the protocol invariant by the

234
00:08:53,360 --> 00:08:55,279
protocol invariant parties start the

235
00:08:55,279 --> 00:08:57,600
non-linear layer evaluation with

236
00:08:57,600 --> 00:09:00,160
authenticated shares of y

237
00:09:00,160 --> 00:09:02,320
now in this non-linear layer evaluation

238
00:09:02,320 --> 00:09:03,920
we need to

239
00:09:03,920 --> 00:09:06,560
be careful about three issues

240
00:09:06,560 --> 00:09:08,959
firstly we need to ensure that the

241
00:09:08,959 --> 00:09:11,519
malicious client inputs the correct

242
00:09:11,519 --> 00:09:14,080
share of y into the non-linear layer

243
00:09:14,080 --> 00:09:15,600
evaluation

244
00:09:15,600 --> 00:09:17,920
secondly we need to correctly compute

245
00:09:17,920 --> 00:09:20,720
the shares of f of y given the shares of

246
00:09:20,720 --> 00:09:21,519
y

247
00:09:21,519 --> 00:09:24,000
and then finally we need to ensure that

248
00:09:24,000 --> 00:09:26,080
the client feeds in the right share of f

249
00:09:26,080 --> 00:09:28,240
of y into the next linear layer

250
00:09:28,240 --> 00:09:30,800
evaluation

251
00:09:30,800 --> 00:09:32,959
these input consistency checks that we

252
00:09:32,959 --> 00:09:34,800
need to do in steps one and three are

253
00:09:34,800 --> 00:09:37,519
crucial and are responsible for major

254
00:09:37,519 --> 00:09:39,120
cost

255
00:09:39,120 --> 00:09:40,320
in use

256
00:09:40,320 --> 00:09:42,880
let's see how we tackle this how to

257
00:09:42,880 --> 00:09:46,720
tackle these input consistency checks

258
00:09:47,920 --> 00:09:51,600
so let's see since since the linear

259
00:09:51,600 --> 00:09:54,080
layer outputs authenticated shares of y

260
00:09:54,080 --> 00:09:56,320
a naive solution could be to input the

261
00:09:56,320 --> 00:09:58,880
authenticated shares into the carbon

262
00:09:58,880 --> 00:10:01,839
circuit and reconstruct both y and alpha

263
00:10:01,839 --> 00:10:02,720
y

264
00:10:02,720 --> 00:10:04,880
inside the kerbal circuit and track that

265
00:10:04,880 --> 00:10:07,440
indeed the authentication is correct

266
00:10:07,440 --> 00:10:09,760
but this would involve representing the

267
00:10:09,760 --> 00:10:11,360
field multiplication as a boolean

268
00:10:11,360 --> 00:10:13,680
circuit whose secure evaluation turns

269
00:10:13,680 --> 00:10:15,360
out to be expensive using garbling

270
00:10:15,360 --> 00:10:18,360
schemes

271
00:10:19,279 --> 00:10:21,360
we provide a super lightweight solution

272
00:10:21,360 --> 00:10:24,320
for this issue in simsie on a high level

273
00:10:24,320 --> 00:10:27,600
what we do is to reauthenticate why with

274
00:10:27,600 --> 00:10:29,200
the help of a garbling scheme with the

275
00:10:29,200 --> 00:10:32,800
help of a simple garbling scheme that is

276
00:10:32,800 --> 00:10:35,519
we recompute we compute another fresh

277
00:10:35,519 --> 00:10:38,160
sharing of alpha into y using a garbling

278
00:10:38,160 --> 00:10:40,800
scheme that just reconstructs y which is

279
00:10:40,800 --> 00:10:43,920
just a simple addition circuit

280
00:10:43,920 --> 00:10:46,320
before going into how we exactly do this

281
00:10:46,320 --> 00:10:48,640
reauthentication let's see how does this

282
00:10:48,640 --> 00:10:51,839
reauthentication help

283
00:10:51,920 --> 00:10:54,079
now suppose that we

284
00:10:54,079 --> 00:10:56,079
somehow have this reauthentication we

285
00:10:56,079 --> 00:10:59,440
need now note that we end up with two

286
00:10:59,440 --> 00:11:01,680
different sharings of authentication of

287
00:11:01,680 --> 00:11:02,399
y

288
00:11:02,399 --> 00:11:04,399
one from the output of the linear layer

289
00:11:04,399 --> 00:11:06,640
evaluation and another is the

290
00:11:06,640 --> 00:11:09,360
re-authenticated that we just computed

291
00:11:09,360 --> 00:11:11,600
now with these two instances of the

292
00:11:11,600 --> 00:11:13,519
sharing of the same value we can

293
00:11:13,519 --> 00:11:15,440
publicly reconstruct the difference of

294
00:11:15,440 --> 00:11:17,680
the sharings and the server can check if

295
00:11:17,680 --> 00:11:20,800
the difference reconstructs um if the

296
00:11:20,800 --> 00:11:23,519
difference equals 0 or not if it equals

297
00:11:23,519 --> 00:11:26,640
0 it means that the same sharing of y

298
00:11:26,640 --> 00:11:28,640
was used by the client in the non-linear

299
00:11:28,640 --> 00:11:30,640
layer evaluation if the difference is

300
00:11:30,640 --> 00:11:32,959
not equal to 0 then we detect that the

301
00:11:32,959 --> 00:11:35,440
client is cheating and we abort so this

302
00:11:35,440 --> 00:11:37,040
is possible by the randomness of the

303
00:11:37,040 --> 00:11:41,640
mackie that was chosen by the server

304
00:11:42,240 --> 00:11:44,399
so here um this is how the

305
00:11:44,399 --> 00:11:48,160
reauthentication helps and

306
00:11:48,320 --> 00:11:50,079
thankfully we need not do this

307
00:11:50,079 --> 00:11:52,240
consistency check once for every

308
00:11:52,240 --> 00:11:53,760
non-linear layer

309
00:11:53,760 --> 00:11:56,079
and in our paper we show how to club all

310
00:11:56,079 --> 00:11:57,760
these consistency checks for all the

311
00:11:57,760 --> 00:11:59,920
non-linear layers together into one

312
00:11:59,920 --> 00:12:02,240
single consistency check that can be

313
00:12:02,240 --> 00:12:04,240
done at the end of the protocol before

314
00:12:04,240 --> 00:12:07,279
revealing the output

315
00:12:09,120 --> 00:12:10,880
okay now

316
00:12:10,880 --> 00:12:13,440
let's see how do we actually uh do this

317
00:12:13,440 --> 00:12:15,519
re-authentication using a simple

318
00:12:15,519 --> 00:12:18,240
garbling scheme

319
00:12:19,519 --> 00:12:22,160
we first garble a circuit that takes in

320
00:12:22,160 --> 00:12:24,399
shares of y from both the garbler and

321
00:12:24,399 --> 00:12:26,320
the evaluator so here the server is the

322
00:12:26,320 --> 00:12:28,560
grappler and the client is evaluated so

323
00:12:28,560 --> 00:12:31,440
this k scheme just takes in both the

324
00:12:31,440 --> 00:12:34,079
shares and it reconstruct the shares of

325
00:12:34,079 --> 00:12:36,160
y using a

326
00:12:36,160 --> 00:12:38,320
boolean circuit and then it output share

327
00:12:38,320 --> 00:12:39,680
software

328
00:12:39,680 --> 00:12:42,560
note that uh here

329
00:12:42,560 --> 00:12:44,160
we will just talk about the output of

330
00:12:44,160 --> 00:12:46,160
the garbling scheme and not the output

331
00:12:46,160 --> 00:12:48,880
itself so instead of the evaluator

332
00:12:48,880 --> 00:12:52,800
receiving by the output y itself it

333
00:12:52,800 --> 00:12:54,000
would receive

334
00:12:54,000 --> 00:12:55,680
the output is as follows as the result

335
00:12:55,680 --> 00:12:57,760
of this garbling scheme for every eighth

336
00:12:57,760 --> 00:13:00,399
bit of the output y the server who acts

337
00:13:00,399 --> 00:13:02,800
as the garbler learns a pair of labels

338
00:13:02,800 --> 00:13:05,120
ki0 and ki 1

339
00:13:05,120 --> 00:13:07,360
and the client who acts as the evaluator

340
00:13:07,360 --> 00:13:10,000
learns the label k y i where y i is the

341
00:13:10,000 --> 00:13:12,320
ith bit in y

342
00:13:12,320 --> 00:13:15,279
now for each bit of y i will slightly

343
00:13:15,279 --> 00:13:16,560
tweak the

344
00:13:16,560 --> 00:13:19,200
d garbling procedure to obtain shares of

345
00:13:19,200 --> 00:13:21,040
alpha into y i

346
00:13:21,040 --> 00:13:24,000
the server chooses its share of alpha y

347
00:13:24,000 --> 00:13:26,880
i uniformly and encrypts

348
00:13:26,880 --> 00:13:30,880
0 minus alpha y i 0 using the 0th label

349
00:13:30,880 --> 00:13:33,120
and

350
00:13:33,120 --> 00:13:35,680
alpha minus alpha by i zero using the

351
00:13:35,680 --> 00:13:37,519
one label

352
00:13:37,519 --> 00:13:39,360
and he sends across these two ciphertext

353
00:13:39,360 --> 00:13:40,560
to the client

354
00:13:40,560 --> 00:13:43,600
and then the client using his key kyi he

355
00:13:43,600 --> 00:13:44,800
recovers

356
00:13:44,800 --> 00:13:48,800
um alpha by i one

357
00:13:48,800 --> 00:13:50,320
now that by the definition of the

358
00:13:50,320 --> 00:13:52,079
ciphertext it's easy to see that the

359
00:13:52,079 --> 00:13:54,320
reconstruction of the shares that the

360
00:13:54,320 --> 00:13:57,760
client and server hold are in in

361
00:13:57,760 --> 00:14:02,160
indeed reconstructs to alpha by i

362
00:14:02,160 --> 00:14:04,639
now that we have shares of alpha and y i

363
00:14:04,639 --> 00:14:08,000
for each bit of y i for each bit of y

364
00:14:08,000 --> 00:14:10,160
shares of alpha into y can be obtained

365
00:14:10,160 --> 00:14:12,079
by taking local linear combination of

366
00:14:12,079 --> 00:14:13,839
the shares with appropriate powers of

367
00:14:13,839 --> 00:14:16,839
two

368
00:14:17,040 --> 00:14:18,360
summarizing

369
00:14:18,360 --> 00:14:19,680
[Music]

370
00:14:19,680 --> 00:14:22,079
our solution ensures consistency between

371
00:14:22,079 --> 00:14:24,480
the output of the linear layer and the

372
00:14:24,480 --> 00:14:26,800
input of the next non-linear layer by

373
00:14:26,800 --> 00:14:28,959
re-authenticating y with the help of a

374
00:14:28,959 --> 00:14:31,600
garbling scheme

375
00:14:31,600 --> 00:14:34,000
and then we have seen how the how this

376
00:14:34,000 --> 00:14:36,240
re authentication helps and we have also

377
00:14:36,240 --> 00:14:37,839
seen how the

378
00:14:37,839 --> 00:14:39,600
the

379
00:14:39,600 --> 00:14:42,320
authentication actually happens

380
00:14:42,320 --> 00:14:44,639
then we can use the same techniques to

381
00:14:44,639 --> 00:14:46,720
ensure consistency between the output of

382
00:14:46,720 --> 00:14:48,720
a non-linear layer and the input of the

383
00:14:48,720 --> 00:14:50,480
next linear layer

384
00:14:50,480 --> 00:14:52,639
that is we can actually use the above

385
00:14:52,639 --> 00:14:54,800
garbling scheme itself

386
00:14:54,800 --> 00:14:56,560
to

387
00:14:56,560 --> 00:14:59,279
to also compute share uh to also compute

388
00:14:59,279 --> 00:15:01,920
and output shares of f of y and then we

389
00:15:01,920 --> 00:15:04,000
could compute shares of alpha into y in

390
00:15:04,000 --> 00:15:07,279
the same manner as reauthentication

391
00:15:07,279 --> 00:15:09,120
and then we have also noted that we only

392
00:15:09,120 --> 00:15:10,959
need one single amortized consistency

393
00:15:10,959 --> 00:15:13,600
check at the end of the protocol

394
00:15:13,600 --> 00:15:16,240
so just to give an example of analytical

395
00:15:16,240 --> 00:15:18,079
comparison of course

396
00:15:18,079 --> 00:15:21,199
um we take the

397
00:15:21,199 --> 00:15:22,880
relief circuit as the non-linear

398
00:15:22,880 --> 00:15:25,600
function and then sim c requires just

399
00:15:25,600 --> 00:15:27,600
sim c requires a communication of just

400
00:15:27,600 --> 00:15:30,560
18 l lambda bits whereas news requires

401
00:15:30,560 --> 00:15:33,759
communication of 293 l lambda bits where

402
00:15:33,759 --> 00:15:37,680
l stands for the log of the field size

403
00:15:37,680 --> 00:15:39,759
that the computation goes in and lambda

404
00:15:39,759 --> 00:15:41,360
stands for the computational security

405
00:15:41,360 --> 00:15:43,120
parameter

406
00:15:43,120 --> 00:15:45,120
in our result we also show how to push

407
00:15:45,120 --> 00:15:46,959
majority of course to an input

408
00:15:46,959 --> 00:15:50,479
independent preprocessing phase

409
00:15:52,560 --> 00:15:54,880
now um finally concluding with the

410
00:15:54,880 --> 00:15:57,440
experiments we do experiments on sinc c

411
00:15:57,440 --> 00:15:59,680
news on benchmarks uh

412
00:15:59,680 --> 00:16:00,680
um

413
00:16:00,680 --> 00:16:02,639
mnistensifat10 and

414
00:16:02,639 --> 00:16:05,600
simsc is 23 to 29 times more

415
00:16:05,600 --> 00:16:08,320
communication efficient than news and it

416
00:16:08,320 --> 00:16:11,519
outperforms views by 4 to 8x in a high

417
00:16:11,519 --> 00:16:13,360
bandwidth setting and it outperforms

418
00:16:13,360 --> 00:16:16,800
news by 6 to 11 x in a low bandwidth

419
00:16:16,800 --> 00:16:17,839
setting

420
00:16:17,839 --> 00:16:19,199
and um

421
00:16:19,199 --> 00:16:21,920
surprisingly simsy also communicates 21

422
00:16:21,920 --> 00:16:23,839
percent to 41 percent less than the

423
00:16:23,839 --> 00:16:25,600
state of the art semi honest protocol

424
00:16:25,600 --> 00:16:27,199
delphi

425
00:16:27,199 --> 00:16:29,600
implementation of simsie is available at

426
00:16:29,600 --> 00:16:31,519
this link so

427
00:16:31,519 --> 00:16:32,959
yeah

428
00:16:32,959 --> 00:16:34,839
thank you any

429
00:16:34,839 --> 00:16:37,199
questions thank you so much thank the

430
00:16:37,199 --> 00:16:38,480
speaker

431
00:16:38,480 --> 00:16:40,160
i'm not sure you can hear the ovation

432
00:16:40,160 --> 00:16:41,040
but

433
00:16:41,040 --> 00:16:42,639
there are these people applauding yeah

434
00:16:42,639 --> 00:16:45,199
yeah yeah i could hear the clamping yeah

435
00:16:45,199 --> 00:16:47,440
perfect thank you no so

436
00:16:47,440 --> 00:16:49,680
you finished on time we do have a time

437
00:16:49,680 --> 00:16:51,440
for a question if the audience or people

438
00:16:51,440 --> 00:16:53,440
in soon have a question

439
00:16:53,440 --> 00:16:56,480
so we have a question maybe you can say

440
00:16:56,480 --> 00:16:59,279
yeah as i mentioned

441
00:17:00,079 --> 00:17:02,560
i don't think she's hearing you so i

442
00:17:02,560 --> 00:17:05,520
maybe you can come here or say it again

443
00:17:05,520 --> 00:17:09,000
and i will be

444
00:17:18,000 --> 00:17:20,319
so you said by this technique you uh get

445
00:17:20,319 --> 00:17:22,400
around the field multiplication problem

446
00:17:22,400 --> 00:17:24,240
but uh you would still need the field

447
00:17:24,240 --> 00:17:25,839
addition to be done in order to

448
00:17:25,839 --> 00:17:28,000
reconstruct the share right yeah yeah

449
00:17:28,000 --> 00:17:30,960
field addition is quite cheap right if l

450
00:17:30,960 --> 00:17:33,600
is the size of the

451
00:17:33,600 --> 00:17:34,640
um

452
00:17:34,640 --> 00:17:36,480
if l is the bit length of the element

453
00:17:36,480 --> 00:17:38,880
field multiplication would need l square

454
00:17:38,880 --> 00:17:41,520
and gates whereas field addition will

455
00:17:41,520 --> 00:17:44,320
only need l and gates right

456
00:17:44,320 --> 00:17:45,039
so

457
00:17:45,039 --> 00:17:47,280
it's much cheaper than field

458
00:17:47,280 --> 00:17:49,679
multiplication and

459
00:17:49,679 --> 00:17:50,720
yeah

460
00:17:50,720 --> 00:17:53,280
okay yeah that's quite bearable cost

461
00:17:53,280 --> 00:17:54,640
yeah

462
00:17:54,640 --> 00:17:55,440
yeah

463
00:17:55,440 --> 00:17:56,640
okay thank you so let's thank the

464
00:17:56,640 --> 00:17:58,840
speaker again

465
00:17:58,840 --> 00:18:00,559
yeah

466
00:18:00,559 --> 00:18:02,400
thanks everyone bye

467
00:18:02,400 --> 00:18:05,039
thank you

