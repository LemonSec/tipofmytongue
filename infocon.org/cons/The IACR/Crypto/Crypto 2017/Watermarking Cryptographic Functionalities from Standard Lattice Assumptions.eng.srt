1
00:00:04,960 --> 00:00:06,700
thanks for giving you thanks for the

2
00:00:06,700 --> 00:00:08,230
introduction so I'm David I'll be

3
00:00:08,230 --> 00:00:09,400
talking about watermarking cryptographic

4
00:00:09,400 --> 00:00:11,170
functionalities this is joint work with

5
00:00:11,170 --> 00:00:13,300
Sam Kim when we think about digital

6
00:00:13,300 --> 00:00:15,010
watermarking the first example that

7
00:00:15,010 --> 00:00:16,570
usually comes to mind is watermarking

8
00:00:16,570 --> 00:00:18,279
for images where a photographer a

9
00:00:18,279 --> 00:00:20,110
content creator wants to embed their

10
00:00:20,110 --> 00:00:22,720
logo or their name is centered within an

11
00:00:22,720 --> 00:00:24,759
image in order to post identify the

12
00:00:24,759 --> 00:00:26,560
owner of the content as well as present

13
00:00:26,560 --> 00:00:28,570
prevent unauthorized distribution of

14
00:00:28,570 --> 00:00:30,369
that content there are two main

15
00:00:30,369 --> 00:00:31,720
properties that we might desire from

16
00:00:31,720 --> 00:00:33,970
such a watermarking scheme first after

17
00:00:33,970 --> 00:00:35,320
the watermark has been embedded inside

18
00:00:35,320 --> 00:00:37,210
an image h the context should still be

19
00:00:37,210 --> 00:00:41,199
mostly visible however an adversary that

20
00:00:41,199 --> 00:00:42,910
redundant tries to remove the watermark

21
00:00:42,910 --> 00:00:44,949
but necessarily destroy the image in

22
00:00:44,949 --> 00:00:46,750
order to sister in order to remove the

23
00:00:46,750 --> 00:00:48,250
watermark and it should visually alter

24
00:00:48,250 --> 00:00:50,649
the appearance of that image just as we

25
00:00:50,649 --> 00:00:52,719
can define watermarking for images we

26
00:00:52,719 --> 00:00:54,339
can also consider watermarking for

27
00:00:54,339 --> 00:00:56,050
pieces of software or pieces of code

28
00:00:56,050 --> 00:00:58,239
here the input is a description of a

29
00:00:58,239 --> 00:01:00,850
program and our objective is to embed a

30
00:01:00,850 --> 00:01:02,890
watermark within that program this could

31
00:01:02,890 --> 00:01:04,989
be a take the form of a product ID it

32
00:01:04,989 --> 00:01:06,820
could be a manufacturer's name it could

33
00:01:06,820 --> 00:01:09,220
be the licensees name and after the

34
00:01:09,220 --> 00:01:10,720
watermark has been embedded inside the

35
00:01:10,720 --> 00:01:12,399
program the program should still be

36
00:01:12,399 --> 00:01:13,960
executable you should still be able to

37
00:01:13,960 --> 00:01:15,520
run the program on inputs of your

38
00:01:15,520 --> 00:01:16,119
choosing

39
00:01:16,119 --> 00:01:18,280
moreover the security requirement

40
00:01:18,280 --> 00:01:20,290
basically says that now of an adversary

41
00:01:20,290 --> 00:01:21,880
comes along and gets a hold of your

42
00:01:21,880 --> 00:01:23,619
watermark program they should not be

43
00:01:23,619 --> 00:01:25,060
able to remove the watermark from the

44
00:01:25,060 --> 00:01:27,340
program without essentially destroying

45
00:01:27,340 --> 00:01:29,829
the functionality of that program more

46
00:01:29,829 --> 00:01:32,140
abstractly there are two main algorithms

47
00:01:32,140 --> 00:01:33,969
that we use to describe a watermarking

48
00:01:33,969 --> 00:01:35,710
algorithm first there's a marking

49
00:01:35,710 --> 00:01:37,299
algorithm that takes as input a

50
00:01:37,299 --> 00:01:39,100
description of a program and in this

51
00:01:39,100 --> 00:01:40,750
work we will model our programs as

52
00:01:40,750 --> 00:01:42,789
boolean circuits and our output of the

53
00:01:42,789 --> 00:01:44,649
watermarking algorithm is itself a new

54
00:01:44,649 --> 00:01:46,750
circuit that we should roughly implement

55
00:01:46,750 --> 00:01:49,090
the original functionality there's also

56
00:01:49,090 --> 00:01:50,829
an additional algorithm the verification

57
00:01:50,829 --> 00:01:52,570
algorithm that itself takes in an

58
00:01:52,570 --> 00:01:54,070
another description of a circuit and

59
00:01:54,070 --> 00:01:55,630
decides whether does circuit is

60
00:01:55,630 --> 00:01:57,549
considered to be watermark or not in

61
00:01:57,549 --> 00:01:59,530
this work we will consider the secretly

62
00:01:59,530 --> 00:02:01,270
verifiable version of water marking

63
00:02:01,270 --> 00:02:03,130
where we assume that both the marking

64
00:02:03,130 --> 00:02:04,840
and verification algorithms take as

65
00:02:04,840 --> 00:02:07,090
input a watermarking secret key denoted

66
00:02:07,090 --> 00:02:11,260
wsk here and moreover in the simplified

67
00:02:11,260 --> 00:02:12,910
description here where I am only

68
00:02:12,910 --> 00:02:14,620
considering the case where the watermark

69
00:02:14,620 --> 00:02:16,030
consists essentially of a boolean flag

70
00:02:16,030 --> 00:02:18,010
either program is marked where it's well

71
00:02:18,010 --> 00:02:18,730
I'm not

72
00:02:18,730 --> 00:02:20,860
not part however all of our notions

73
00:02:20,860 --> 00:02:22,510
naturally generalize to the setting

74
00:02:22,510 --> 00:02:23,560
where the watermark can be an arbitrary

75
00:02:23,560 --> 00:02:26,140
string such as a name or product ID or

76
00:02:26,140 --> 00:02:27,580
something of that form but for

77
00:02:27,580 --> 00:02:29,349
simplicity in this talk I will try I

78
00:02:29,349 --> 00:02:31,720
will just consider the scenario where

79
00:02:31,720 --> 00:02:33,340
the watermark consists of a simple flag

80
00:02:33,340 --> 00:02:35,140
I'll refer you to the paper for the

81
00:02:35,140 --> 00:02:36,730
details on how we extend it with a more

82
00:02:36,730 --> 00:02:39,730
general notion now let me define more

83
00:02:39,730 --> 00:02:41,590
concretely what the properties we desire

84
00:02:41,590 --> 00:02:43,660
are the first property is that the

85
00:02:43,660 --> 00:02:45,400
watermark program to preserve the

86
00:02:45,400 --> 00:02:47,049
functionality of the original program

87
00:02:47,049 --> 00:02:49,030
basically when we want to mark a circus

88
00:02:49,030 --> 00:02:50,920
see it should produce a new circuit C

89
00:02:50,920 --> 00:02:53,500
prime such that are almost all inputs C

90
00:02:53,500 --> 00:02:56,349
primacy agree now one might ask why

91
00:02:56,349 --> 00:02:57,849
don't we ask for perfect functionality

92
00:02:57,849 --> 00:02:58,930
for serving why can't we have a

93
00:02:58,930 --> 00:03:00,340
watermarking scheme where the mark

94
00:03:00,340 --> 00:03:01,660
program perfectly implements the

95
00:03:01,660 --> 00:03:03,640
original program unfortunately if we

96
00:03:03,640 --> 00:03:05,290
require strong security properties which

97
00:03:05,290 --> 00:03:06,879
I will define shortly perfect

98
00:03:06,879 --> 00:03:08,379
functionality for serving watermarking

99
00:03:08,379 --> 00:03:10,269
is actually not possible assuming the

100
00:03:10,269 --> 00:03:11,440
existence of indistinguishability

101
00:03:11,440 --> 00:03:14,109
obfuscation so as a compromise we start

102
00:03:14,109 --> 00:03:15,700
over something slightly weaker which is

103
00:03:15,700 --> 00:03:17,470
approximate functionality preserving on

104
00:03:17,470 --> 00:03:19,060
all but a negligible fraction of the

105
00:03:19,060 --> 00:03:20,920
inputs the watermark program and the

106
00:03:20,920 --> 00:03:22,480
original program implement the same

107
00:03:22,480 --> 00:03:25,000
function the second property is a more

108
00:03:25,000 --> 00:03:26,650
interesting one the security requirement

109
00:03:26,650 --> 00:03:29,200
of unfortunate ability which basically

110
00:03:29,200 --> 00:03:31,150
says that if an adversary is given

111
00:03:31,150 --> 00:03:34,150
access to a watermark program that

112
00:03:34,150 --> 00:03:35,859
adversary should not be able to remove

113
00:03:35,859 --> 00:03:37,569
the watermark from the program without

114
00:03:37,569 --> 00:03:39,280
destroying the functionality of the

115
00:03:39,280 --> 00:03:41,079
program namely the adversary cannot

116
00:03:41,079 --> 00:03:42,790
produce a new circuit C prime that

117
00:03:42,790 --> 00:03:44,560
implements the same function and yet is

118
00:03:44,560 --> 00:03:46,150
considered to be unwatered marked from

119
00:03:46,150 --> 00:03:47,500
the perspective of the watermarking

120
00:03:47,500 --> 00:03:49,840
algorithm I would like to emphasize here

121
00:03:49,840 --> 00:03:51,880
that the adversary here has complete

122
00:03:51,880 --> 00:03:54,130
flexibility in crafting C prime we are

123
00:03:54,130 --> 00:03:55,840
not restricting the kinds of adversarial

124
00:03:55,840 --> 00:03:57,609
strategies the adversary is able to

125
00:03:57,609 --> 00:03:59,590
employ its given a description of a

126
00:03:59,590 --> 00:04:01,329
piece of code and it's able to open any

127
00:04:01,329 --> 00:04:03,220
arbitrary boolean circuit that tries to

128
00:04:03,220 --> 00:04:05,109
implement the same functionality and yet

129
00:04:05,109 --> 00:04:07,299
does not contain the watermark moreover

130
00:04:07,299 --> 00:04:09,010
this property should hold even if the

131
00:04:09,010 --> 00:04:10,810
adversary is given access to the marking

132
00:04:10,810 --> 00:04:13,599
Oracle yeah as in part of a security

133
00:04:13,599 --> 00:04:15,040
game so basically the adversary is

134
00:04:15,040 --> 00:04:17,108
allowed to request mark programs of its

135
00:04:17,108 --> 00:04:19,238
choosing and then plan defeat the

136
00:04:19,238 --> 00:04:20,680
watermarking scheme by removing a

137
00:04:20,680 --> 00:04:23,199
watermark from a new program there is a

138
00:04:23,199 --> 00:04:25,030
third property that we require called

139
00:04:25,030 --> 00:04:26,800
unforgeable 'ti in the interest of time

140
00:04:26,800 --> 00:04:28,390
I will not define this precisely and

141
00:04:28,390 --> 00:04:29,650
I'll refer to the paper if you're

142
00:04:29,650 --> 00:04:31,270
interested and that's the additional

143
00:04:31,270 --> 00:04:32,090
property

144
00:04:32,090 --> 00:04:34,490
so the natural next question to ask them

145
00:04:34,490 --> 00:04:36,710
is does watermarking schemes exist

146
00:04:36,710 --> 00:04:38,500
can we watermark arbitrary programs

147
00:04:38,500 --> 00:04:40,220
unfortunately here there is a negative

148
00:04:40,220 --> 00:04:43,100
result and in fact for any class of

149
00:04:43,100 --> 00:04:44,960
learn about functions it's very easy to

150
00:04:44,960 --> 00:04:46,370
see that water marketing cannot possibly

151
00:04:46,370 --> 00:04:48,230
exist because you can simply learn the

152
00:04:48,230 --> 00:04:50,150
function and if removes the water market

153
00:04:50,150 --> 00:04:52,340
as a result the study of water marking

154
00:04:52,340 --> 00:04:54,410
for functionalities have focused on

155
00:04:54,410 --> 00:04:56,840
cryptographic functionalities natural

156
00:04:56,840 --> 00:05:00,020
class of launderable functions as such a

157
00:05:00,020 --> 00:05:02,180
focus of this work will also focus on

158
00:05:02,180 --> 00:05:03,770
water marking and natural classic

159
00:05:03,770 --> 00:05:05,360
cryptographic primitives here we're

160
00:05:05,360 --> 00:05:06,590
going to focus on pseudo-random

161
00:05:06,590 --> 00:05:08,840
functions why pseudo-random functions

162
00:05:08,840 --> 00:05:10,220
well pseudo-random functions are

163
00:05:10,220 --> 00:05:11,750
basically the workhorses of symmetric

164
00:05:11,750 --> 00:05:13,760
cryptography once we come squadra mark

165
00:05:13,760 --> 00:05:15,470
pseudo-random functions we can watermark

166
00:05:15,470 --> 00:05:17,210
the decryption functionalities of a say

167
00:05:17,210 --> 00:05:18,740
a DVD player we can watermark the

168
00:05:18,740 --> 00:05:20,240
authentication functionalities of a car

169
00:05:20,240 --> 00:05:22,220
key for instance those prfs are sort of

170
00:05:22,220 --> 00:05:24,320
a natural target for the first step in

171
00:05:24,320 --> 00:05:26,210
realizing watermarking for cryptographic

172
00:05:26,210 --> 00:05:28,130
functionalities just to make sure the

173
00:05:28,130 --> 00:05:30,020
model is clear when I mean that we what

174
00:05:30,020 --> 00:05:31,639
would I mean when I say we want to mark

175
00:05:31,639 --> 00:05:33,350
a pseudo-random function what I mean is

176
00:05:33,350 --> 00:05:35,120
we have a program and inside the program

177
00:05:35,120 --> 00:05:38,270
is a syrup key for a PRF and all the

178
00:05:38,270 --> 00:05:39,950
program does is implements the PRF

179
00:05:39,950 --> 00:05:42,200
evaluation on input X it evaluates the

180
00:05:42,200 --> 00:05:43,910
PRF at X and that's the output of the

181
00:05:43,910 --> 00:05:46,100
program our objective is to watermark

182
00:05:46,100 --> 00:05:48,440
this kind of program so now I will give

183
00:05:48,440 --> 00:05:50,030
you a high level blueprint for how we

184
00:05:50,030 --> 00:05:51,680
construct up and the main result in this

185
00:05:51,680 --> 00:05:53,330
work is that we show under standard

186
00:05:53,330 --> 00:05:54,979
lattice assumptions there exists a

187
00:05:54,979 --> 00:05:57,950
watermark above family a PRF now I will

188
00:05:57,950 --> 00:05:59,390
give you start by giving you a blueprint

189
00:05:59,390 --> 00:06:01,520
of how our construction proceeds this

190
00:06:01,520 --> 00:06:04,190
roughly follows the schema outlined in a

191
00:06:04,190 --> 00:06:05,510
work of cohannet hall who first

192
00:06:05,510 --> 00:06:07,250
introduced script strong security

193
00:06:07,250 --> 00:06:08,780
notions for watermarking crypto

194
00:06:08,780 --> 00:06:10,820
functionalities the blueprint works as

195
00:06:10,820 --> 00:06:12,860
follows our remember our target is the

196
00:06:12,860 --> 00:06:14,870
watermark of PRF so the first thing that

197
00:06:14,870 --> 00:06:16,250
we're going to do is we're going to take

198
00:06:16,250 --> 00:06:17,930
our pseudo-random function and we're

199
00:06:17,930 --> 00:06:19,970
going to evaluate SSL at a bunch of test

200
00:06:19,970 --> 00:06:21,530
points and these test points are going

201
00:06:21,530 --> 00:06:23,060
to be embedded as part of the master

202
00:06:23,060 --> 00:06:25,580
secret key of the watermarking scheme so

203
00:06:25,580 --> 00:06:27,590
based on this output behavior of the

204
00:06:27,590 --> 00:06:29,090
pseudo-random function we're going to

205
00:06:29,090 --> 00:06:31,400
then derive a new point X star Y star so

206
00:06:31,400 --> 00:06:33,169
we evaluate the PRF at a bunch of points

207
00:06:33,169 --> 00:06:35,300
based on your outputs of the PRF at

208
00:06:35,300 --> 00:06:37,250
those points we derive a special point X

209
00:06:37,250 --> 00:06:39,530
star and Y star let me emphasize here

210
00:06:39,530 --> 00:06:41,300
that we actually need the X star to

211
00:06:41,300 --> 00:06:43,070
depend on an output functionality and

212
00:06:43,070 --> 00:06:44,570
the reason for this will become clear

213
00:06:44,570 --> 00:06:45,280
later

214
00:06:45,280 --> 00:06:47,290
hot but it is actually critical that X

215
00:06:47,290 --> 00:06:49,060
star is derived based on the behavior of

216
00:06:49,060 --> 00:06:52,270
the pseudo-random function so now when

217
00:06:52,270 --> 00:06:53,950
we want to construct a watermark key and

218
00:06:53,950 --> 00:06:55,990
we first give you an abstract schema of

219
00:06:55,990 --> 00:06:58,030
the function we want to capture the mark

220
00:06:58,030 --> 00:06:59,590
key is going to be a program that

221
00:06:59,590 --> 00:07:01,900
implements this real PRF evaluation at

222
00:07:01,900 --> 00:07:04,600
all points so everywhere except this

223
00:07:04,600 --> 00:07:06,790
special point X star so the mark key is

224
00:07:06,790 --> 00:07:08,680
a new program that implements the same

225
00:07:08,680 --> 00:07:10,240
function as the pseudo-random function

226
00:07:10,240 --> 00:07:12,520
that is on water mark everywhere except

227
00:07:12,520 --> 00:07:14,169
a single point X star and we're just

228
00:07:14,169 --> 00:07:16,360
going to rewire the value at wax star to

229
00:07:16,360 --> 00:07:18,610
the value y star for now let's defer the

230
00:07:18,610 --> 00:07:20,140
implementation details let's not worry

231
00:07:20,140 --> 00:07:21,160
about how we're actually going to

232
00:07:21,160 --> 00:07:22,780
implement this kind of functionality

233
00:07:22,780 --> 00:07:24,610
let's just reason about is abstract

234
00:07:24,610 --> 00:07:27,190
properties well how do we verify if we

235
00:07:27,190 --> 00:07:28,990
had a mark key that implements this type

236
00:07:28,990 --> 00:07:31,300
of functionality well it's very simple

237
00:07:31,300 --> 00:07:33,010
all we need to do is evaluate at the

238
00:07:33,010 --> 00:07:34,690
same set of test points derive the

239
00:07:34,690 --> 00:07:36,580
special point X star Y star and then

240
00:07:36,580 --> 00:07:38,380
evaluate this candidate program at X

241
00:07:38,380 --> 00:07:40,120
star and check if we get the value y

242
00:07:40,120 --> 00:07:42,550
star or not in Assassins X star and Y

243
00:07:42,550 --> 00:07:44,530
star functions as the watermark we took

244
00:07:44,530 --> 00:07:46,000
the original function the pseudo-random

245
00:07:46,000 --> 00:07:48,430
function and we have created a new

246
00:07:48,430 --> 00:07:50,410
function that only defers it on a single

247
00:07:50,410 --> 00:07:52,810
point X star and X star essentially

248
00:07:52,810 --> 00:07:54,900
functions as the watermark in this case

249
00:07:54,900 --> 00:07:56,979
so it's very easy to see that this is

250
00:07:56,979 --> 00:07:58,660
functionality preserving the marked

251
00:07:58,660 --> 00:08:00,010
program differs from the original

252
00:08:00,010 --> 00:08:01,450
program on only a single point

253
00:08:01,450 --> 00:08:03,610
everywhere else is perfect agreement and

254
00:08:03,610 --> 00:08:06,160
it's unremovable essentially as long as

255
00:08:06,160 --> 00:08:07,960
the adversary has no idea what point we

256
00:08:07,960 --> 00:08:09,729
punctured as long as X star and Y star

257
00:08:09,729 --> 00:08:11,169
is hidden from the perspective of the

258
00:08:11,169 --> 00:08:12,700
adversary the adversary really

259
00:08:12,700 --> 00:08:14,680
essentially has no hope of removing a

260
00:08:14,680 --> 00:08:16,570
watermark without a sign corrupting a

261
00:08:16,570 --> 00:08:17,979
large swath of the domain of the

262
00:08:17,979 --> 00:08:19,539
pseudo-random function so this is sort

263
00:08:19,539 --> 00:08:21,370
of the high level intuition for why this

264
00:08:21,370 --> 00:08:23,380
kind of schema and be useful in

265
00:08:23,380 --> 00:08:25,570
realizing a cryptographic watermarking

266
00:08:25,570 --> 00:08:27,190
scheme now let's see how we actually

267
00:08:27,190 --> 00:08:28,840
implement this functionality we have

268
00:08:28,840 --> 00:08:30,610
this idealized functionality where we

269
00:08:30,610 --> 00:08:31,930
want to essentially treat the value of

270
00:08:31,930 --> 00:08:33,700
the PRF at at one point and we want to

271
00:08:33,700 --> 00:08:35,289
be able to secretly hide and embed that

272
00:08:35,289 --> 00:08:37,539
point within the keyer within there

273
00:08:37,539 --> 00:08:40,450
within a watermark program all of the

274
00:08:40,450 --> 00:08:42,219
prior solutions to this work eudeco

275
00:08:42,219 --> 00:08:44,110
Heinicke as well as Bonet at all rely on

276
00:08:44,110 --> 00:08:46,030
some kind of Association to hide a

277
00:08:46,030 --> 00:08:48,550
special point X star Y star effectively

278
00:08:48,550 --> 00:08:50,050
all of these works also state the

279
00:08:50,050 --> 00:08:51,730
following program the part of the

280
00:08:51,730 --> 00:08:54,190
program has the key PRF be hardwired no

281
00:08:54,190 --> 00:08:56,680
sided and it simply checks if I'm asked

282
00:08:56,680 --> 00:08:58,529
to evaluate at a special point X star

283
00:08:58,529 --> 00:08:59,910
I'll put the special value Y star

284
00:08:59,910 --> 00:09:01,980
otherwise I'll put the real value of the

285
00:09:01,980 --> 00:09:04,379
PRS and so all of these techniques

286
00:09:04,379 --> 00:09:05,970
essentially rely on being able to

287
00:09:05,970 --> 00:09:08,220
secretly reprogram the value of LaPierre

288
00:09:08,220 --> 00:09:10,379
at a special point and the reason we

289
00:09:10,379 --> 00:09:11,999
require off the station is we need to

290
00:09:11,999 --> 00:09:13,560
hide the details of the code we need to

291
00:09:13,560 --> 00:09:15,509
secretly embed this watermark within the

292
00:09:15,509 --> 00:09:17,160
program such that it is difficult to

293
00:09:17,160 --> 00:09:19,620
remove and a key technical challenge

294
00:09:19,620 --> 00:09:21,120
then at least say we follow this

295
00:09:21,120 --> 00:09:22,949
blueprint for realizing watermarking

296
00:09:22,949 --> 00:09:25,139
it's how do we embed a point X star y

297
00:09:25,139 --> 00:09:26,999
star within the watermark key and

298
00:09:26,999 --> 00:09:29,069
without rely on general purpose alpha

299
00:09:29,069 --> 00:09:30,990
station and you take a step back and

300
00:09:30,990 --> 00:09:32,999
look at this problem more abstractly

301
00:09:32,999 --> 00:09:34,980
we're at a higher level it has a very

302
00:09:34,980 --> 00:09:36,660
strong off the station flavor to it

303
00:09:36,660 --> 00:09:38,370
because that what a bursary here is

304
00:09:38,370 --> 00:09:39,959
given a description of a piece of code

305
00:09:39,959 --> 00:09:41,759
and inside this piece of code is a

306
00:09:41,759 --> 00:09:43,589
secret point that has been rewired and

307
00:09:43,589 --> 00:09:45,480
we're asking that given to access to

308
00:09:45,480 --> 00:09:46,920
this code there's really nothing the

309
00:09:46,920 --> 00:09:48,899
adversary can do to learn this point X

310
00:09:48,899 --> 00:09:50,759
or my star and extract it and remove it

311
00:09:50,759 --> 00:09:52,769
from the program and that's where a lot

312
00:09:52,769 --> 00:09:54,600
of the challenge has been in realizing

313
00:09:54,600 --> 00:09:56,939
cryptographic watermarking and again

314
00:09:56,939 --> 00:09:58,410
just to remind you in this work we

315
00:09:58,410 --> 00:09:59,550
showed that under standard lattice

316
00:09:59,550 --> 00:10:01,350
assumptions it is actually possible to

317
00:10:01,350 --> 00:10:03,029
instantiate this general blueprint and

318
00:10:03,029 --> 00:10:05,370
achieve watermarking work for

319
00:10:05,370 --> 00:10:07,589
pseudo-random functions now I will tell

320
00:10:07,589 --> 00:10:09,509
you I'll give you a high-level overview

321
00:10:09,509 --> 00:10:12,000
of how our construction works the

322
00:10:12,000 --> 00:10:13,170
starting point of our construction is

323
00:10:13,170 --> 00:10:14,579
going to be a primitive called private

324
00:10:14,579 --> 00:10:16,259
punctured OPRS so let me begin by

325
00:10:16,259 --> 00:10:18,059
reminding you what these various notions

326
00:10:18,059 --> 00:10:20,639
are recall first that the watermark key

327
00:10:20,639 --> 00:10:22,559
in our construction implements the real

328
00:10:22,559 --> 00:10:24,420
pseudo-random function at all but a

329
00:10:24,420 --> 00:10:26,220
single point if we look at this

330
00:10:26,220 --> 00:10:28,079
abstractly we're more structurally they

331
00:10:28,079 --> 00:10:28,889
should remind us of another

332
00:10:28,889 --> 00:10:30,689
cryptographic primitive that has seen a

333
00:10:30,689 --> 00:10:32,160
lot of applications in recent years

334
00:10:32,160 --> 00:10:34,379
namely the notion of a punk treble PRF

335
00:10:34,379 --> 00:10:35,910
first let me remind you what a punk

336
00:10:35,910 --> 00:10:38,490
triple PRF is a punk treble PRF is the

337
00:10:38,490 --> 00:10:40,800
following it has a PRF key and there's a

338
00:10:40,800 --> 00:10:42,300
puncturing algorithm that takes its

339
00:10:42,300 --> 00:10:44,100
input a point and it helped us anew

340
00:10:44,100 --> 00:10:46,589
punctured key and a special property is

341
00:10:46,589 --> 00:10:48,689
that this new punctured key can be used

342
00:10:48,689 --> 00:10:50,399
to evaluate the pseudo-random function

343
00:10:50,399 --> 00:10:52,439
everywhere except a single point X star

344
00:10:52,439 --> 00:10:54,600
so it implements the same key as the

345
00:10:54,600 --> 00:10:56,699
original function but at X star the

346
00:10:56,699 --> 00:10:59,100
value is something else so how does

347
00:10:59,100 --> 00:11:00,749
puncturing seem to relate to

348
00:11:00,749 --> 00:11:02,579
watermarking well let's recall our

349
00:11:02,579 --> 00:11:04,170
general approach for watermarking again

350
00:11:04,170 --> 00:11:05,790
we're going to derive the special point

351
00:11:05,790 --> 00:11:07,529
X star from the output behavior of the

352
00:11:07,529 --> 00:11:09,269
PRF and then we're going to generate a

353
00:11:09,269 --> 00:11:11,020
key that agrees is the PRF every way

354
00:11:11,020 --> 00:11:13,510
except at this point at start well if

355
00:11:13,510 --> 00:11:15,070
you just look at the schema of a

356
00:11:15,070 --> 00:11:16,660
functional PRF these things almost line

357
00:11:16,660 --> 00:11:18,700
up perfectly we can just construct our

358
00:11:18,700 --> 00:11:20,500
water Marquis as a puncture key in fact

359
00:11:20,500 --> 00:11:22,090
a water Marquis is a punctured key in

360
00:11:22,090 --> 00:11:24,040
this case so why does plum tree not

361
00:11:24,040 --> 00:11:25,540
already give us a solution for this

362
00:11:25,540 --> 00:11:27,100
problem there are actually many issues

363
00:11:27,100 --> 00:11:28,930
with this let me just outline two of

364
00:11:28,930 --> 00:11:30,190
them to give you a flavor for what's

365
00:11:30,190 --> 00:11:32,680
happening one problem is typical

366
00:11:32,680 --> 00:11:34,900
puncture bo PRF constructions the

367
00:11:34,900 --> 00:11:36,610
punctured key does not hide the point

368
00:11:36,610 --> 00:11:38,590
that is being punctured the pump point X

369
00:11:38,590 --> 00:11:40,480
star that we puncture is usually part of

370
00:11:40,480 --> 00:11:42,790
the description of the secret key and if

371
00:11:42,790 --> 00:11:43,720
this is the way that we're going to

372
00:11:43,720 --> 00:11:45,430
embed the water mark is trivial for the

373
00:11:45,430 --> 00:11:47,260
adversary to remove it it just does

374
00:11:47,260 --> 00:11:48,910
something different at the point X star

375
00:11:48,910 --> 00:11:51,160
and the second problem is actually more

376
00:11:51,160 --> 00:11:54,010
difficult to a more tricky it's because

377
00:11:54,010 --> 00:11:55,510
the puncture Keys actually do not

378
00:11:55,510 --> 00:11:57,820
provide as much flexibility and choosing

379
00:11:57,820 --> 00:11:59,380
the values obtained when the punctured

380
00:11:59,380 --> 00:12:01,300
key is used to evaluate at the puncture

381
00:12:01,300 --> 00:12:03,280
point and if you look at our water

382
00:12:03,280 --> 00:12:04,720
marking schema the way that we're going

383
00:12:04,720 --> 00:12:06,580
to verify whether a program is water

384
00:12:06,580 --> 00:12:08,260
marked or not we're going to evaluate it

385
00:12:08,260 --> 00:12:10,180
at the special point X star and check if

386
00:12:10,180 --> 00:12:12,100
it has a precise value well if the

387
00:12:12,100 --> 00:12:13,480
puncturing algorithm does not give us

388
00:12:13,480 --> 00:12:15,190
flexibility and choosing this precise

389
00:12:15,190 --> 00:12:16,960
value then we actually is not I'm not

390
00:12:16,960 --> 00:12:19,330
able to implement this general blueprint

391
00:12:19,330 --> 00:12:21,670
just to remind you what the problems are

392
00:12:21,670 --> 00:12:23,500
first the puncture Keys do not hide the

393
00:12:23,500 --> 00:12:25,270
punctured point it turns out that this

394
00:12:25,270 --> 00:12:26,680
is actually fairly easy to address

395
00:12:26,680 --> 00:12:28,270
instead of using standard puncture

396
00:12:28,270 --> 00:12:29,920
herbal PRS we can use a new notion

397
00:12:29,920 --> 00:12:31,360
called private comfortable PRF

398
00:12:31,360 --> 00:12:33,010
introduced by Bonet at all earlier this

399
00:12:33,010 --> 00:12:35,170
year and in a private comfortable PRF is

400
00:12:35,170 --> 00:12:37,240
the same as a puncture bo PRF except the

401
00:12:37,240 --> 00:12:39,040
punctured key also hides the punctured

402
00:12:39,040 --> 00:12:40,900
point X star so that solves the first

403
00:12:40,900 --> 00:12:42,970
problem the second problem is more

404
00:12:42,970 --> 00:12:45,010
difficult how do we tell whether a

405
00:12:45,010 --> 00:12:47,530
result a value and a range of the PRF

406
00:12:47,530 --> 00:12:49,510
actually corresponds to using a puncture

407
00:12:49,510 --> 00:12:51,790
key to evaluate at a punctured point and

408
00:12:51,790 --> 00:12:54,550
this is actually kind of fundamental at

409
00:12:54,550 --> 00:12:56,290
least as give any existing lattice based

410
00:12:56,290 --> 00:12:57,910
constructions of five at some trouble

411
00:12:57,910 --> 00:12:59,620
PRS in both the Bonet a tall

412
00:12:59,620 --> 00:13:01,390
construction as well as a kinetic and

413
00:13:01,390 --> 00:13:03,130
xem construction of private puncture Bo

414
00:13:03,130 --> 00:13:05,050
PRS from Europe RIPTA this year the

415
00:13:05,050 --> 00:13:06,640
value of pain were using the puncture

416
00:13:06,640 --> 00:13:08,440
key to evaluate at the puncture point is

417
00:13:08,440 --> 00:13:10,390
actually a deterministic function of the

418
00:13:10,390 --> 00:13:12,040
pseudo-random function key so we

419
00:13:12,040 --> 00:13:13,630
actually have very little flexibility

420
00:13:13,630 --> 00:13:15,640
and being able to influence or choose

421
00:13:15,640 --> 00:13:17,500
the value of paint when a punctured key

422
00:13:17,500 --> 00:13:18,910
is used to evaluate at the puncture

423
00:13:18,910 --> 00:13:21,250
point so to get around this problem we

424
00:13:21,250 --> 00:13:22,600
actually relaxed the programmability

425
00:13:22,600 --> 00:13:24,310
requirement and introduced a new

426
00:13:24,310 --> 00:13:25,000
cryptographic

427
00:13:25,000 --> 00:13:27,460
primitive that to enable watermarking

428
00:13:27,460 --> 00:13:29,290
and a nuclear program a primitive we

429
00:13:29,290 --> 00:13:30,760
introduced in this work it's a notion

430
00:13:30,760 --> 00:13:32,680
called a private translucent PRF the

431
00:13:32,680 --> 00:13:34,390
name will become more clear in a little

432
00:13:34,390 --> 00:13:36,520
bit but at a very very high level a

433
00:13:36,520 --> 00:13:38,560
private translucent Chiara is a pride

434
00:13:38,560 --> 00:13:40,240
first and foremost a private Punk

435
00:13:40,240 --> 00:13:41,860
trouble PRF but it has a special

436
00:13:41,860 --> 00:13:44,500
property that in the range of the PRF so

437
00:13:44,500 --> 00:13:46,210
in the orange here there's a special

438
00:13:46,210 --> 00:13:48,460
hidden subspace and has the property

439
00:13:48,460 --> 00:13:50,170
that whenever you take a punctured key

440
00:13:50,170 --> 00:13:52,240
and evaluate at the punctured point

441
00:13:52,240 --> 00:13:54,280
you're going to always land inside this

442
00:13:54,280 --> 00:13:56,950
hidden subspace moreover there is a

443
00:13:56,950 --> 00:13:58,930
secret testing key associated with this

444
00:13:58,930 --> 00:14:01,060
PRF family that allows you to take an

445
00:14:01,060 --> 00:14:02,980
element in a range and it will decide

446
00:14:02,980 --> 00:14:04,930
for you whether its land and whether it

447
00:14:04,930 --> 00:14:06,700
is a contained in the subspace or not

448
00:14:06,700 --> 00:14:08,770
contained in this subspace let me just

449
00:14:08,770 --> 00:14:10,270
outline for you the properties that we

450
00:14:10,270 --> 00:14:12,600
require from this kind of set system

451
00:14:12,600 --> 00:14:15,100
first the values that are contained in

452
00:14:15,100 --> 00:14:16,450
this subspace should look roughly

453
00:14:16,450 --> 00:14:18,520
indistinguishable from a random value in

454
00:14:18,520 --> 00:14:20,260
the range of the PRF why is this

455
00:14:20,260 --> 00:14:22,030
important well if you want to be able to

456
00:14:22,030 --> 00:14:24,070
privately puncture a PRF it better be

457
00:14:24,070 --> 00:14:25,540
the case that the adversary cannot just

458
00:14:25,540 --> 00:14:27,490
evaluate a few RF and test whether that

459
00:14:27,490 --> 00:14:29,530
evaluation is at a special point or not

460
00:14:29,530 --> 00:14:31,600
so for privacy to hold it must be the

461
00:14:31,600 --> 00:14:33,100
case that if you see something here is

462
00:14:33,100 --> 00:14:34,990
indistinguishable from something outside

463
00:14:34,990 --> 00:14:37,150
of this space and we're already further

464
00:14:37,150 --> 00:14:39,130
complicated by the fact that when an

465
00:14:39,130 --> 00:14:41,110
adversary or the evaluator is computing

466
00:14:41,110 --> 00:14:43,089
a PRF it's actually able to sample

467
00:14:43,089 --> 00:14:44,710
element from this subspace by itself

468
00:14:44,710 --> 00:14:47,050
namely it can just sample a PRF key for

469
00:14:47,050 --> 00:14:49,360
itself puncture it and then evaluated in

470
00:14:49,360 --> 00:14:50,980
the punctured key at the punctured point

471
00:14:50,980 --> 00:14:53,890
and in doing so they can essentially

472
00:14:53,890 --> 00:14:56,830
derive elements from this subset so set

473
00:14:56,830 --> 00:14:58,630
systems that satisfy this property we're

474
00:14:58,630 --> 00:15:00,640
first introduced as translucent systems

475
00:15:00,640 --> 00:15:02,380
in a work of Connecticut hub in a

476
00:15:02,380 --> 00:15:03,640
context of building deniable encryption

477
00:15:03,640 --> 00:15:06,700
in our case we are essentially embedding

478
00:15:06,700 --> 00:15:08,380
a translucent set system within the

479
00:15:08,380 --> 00:15:10,150
output space of a pseudo-random function

480
00:15:10,150 --> 00:15:12,400
has the name of private translucent PRF

481
00:15:12,400 --> 00:15:13,990
once we have this cryptographic

482
00:15:13,990 --> 00:15:15,940
primitive it is actually fairly

483
00:15:15,940 --> 00:15:17,860
straightforward to build watermarking

484
00:15:17,860 --> 00:15:20,170
let me tell you how the watermarking

485
00:15:20,170 --> 00:15:22,030
secret key will be as before consists of

486
00:15:22,030 --> 00:15:24,160
a sequence of test points as well as a

487
00:15:24,160 --> 00:15:26,110
testing key for the private translucent

488
00:15:26,110 --> 00:15:29,200
PRF system to mark the PRF key we're

489
00:15:29,200 --> 00:15:30,610
going to derive the special point X star

490
00:15:30,610 --> 00:15:32,140
as before we're not going to derive a

491
00:15:32,140 --> 00:15:34,209
special value Y star anymore all we're

492
00:15:34,209 --> 00:15:36,190
going to do is puncture the key at X

493
00:15:36,190 --> 00:15:37,290
star the water

494
00:15:37,290 --> 00:15:39,360
our key is just a just an implementation

495
00:15:39,360 --> 00:15:41,160
of the punctured key for this private

496
00:15:41,160 --> 00:15:43,589
translucent cept private translucent PRF

497
00:15:43,589 --> 00:15:45,959
to test whether a program now is

498
00:15:45,959 --> 00:15:48,180
watermark or not all we need to do is we

499
00:15:48,180 --> 00:15:50,220
derive the test point at star exactly as

500
00:15:50,220 --> 00:15:52,259
before and then we evaluate at X star

501
00:15:52,259 --> 00:15:54,180
and check whether we're in this special

502
00:15:54,180 --> 00:15:56,160
set or not we have the property that the

503
00:15:56,160 --> 00:15:57,930
puncture key evaluated at a punctured

504
00:15:57,930 --> 00:15:59,880
point will always land in a special set

505
00:15:59,880 --> 00:16:03,509
and so it is easily to check so in a

506
00:16:03,509 --> 00:16:05,130
remainder of this talk I will now tell

507
00:16:05,130 --> 00:16:06,300
you how we actually build five a

508
00:16:06,300 --> 00:16:08,339
translucent p RS from standard lattice

509
00:16:08,339 --> 00:16:10,139
assumptions so as completing the picture

510
00:16:10,139 --> 00:16:11,639
of how we build cryptographic

511
00:16:11,639 --> 00:16:14,579
watermarking from lattices because this

512
00:16:14,579 --> 00:16:15,990
is a construction based on lattices let

513
00:16:15,990 --> 00:16:17,490
me first start by reminding you what the

514
00:16:17,490 --> 00:16:19,920
lwe assumption says given a uniformly

515
00:16:19,920 --> 00:16:22,110
random matrix a the lwe assumptions

516
00:16:22,110 --> 00:16:23,970
basically states that a noisy linear

517
00:16:23,970 --> 00:16:25,709
combination of the rows of a looks at

518
00:16:25,709 --> 00:16:27,600
computationally indistinguishable from a

519
00:16:27,600 --> 00:16:29,970
uniformly random vector the second

520
00:16:29,970 --> 00:16:31,290
ingredient that we will require in this

521
00:16:31,290 --> 00:16:32,850
work is the notion of a homomorphic

522
00:16:32,850 --> 00:16:35,069
matrix encoding introduced first in a

523
00:16:35,069 --> 00:16:36,720
workup on a hall in a context of

524
00:16:36,720 --> 00:16:38,220
constructing attribute based encryption

525
00:16:38,220 --> 00:16:41,100
a homomorphic matrix encoding gives us a

526
00:16:41,100 --> 00:16:43,500
way of encoding inputs X where X here is

527
00:16:43,500 --> 00:16:45,180
modeled as an L bit string as a

528
00:16:45,180 --> 00:16:47,670
collection of lwe samples the follow the

529
00:16:47,670 --> 00:16:49,709
encoding works as follows for each bit

530
00:16:49,709 --> 00:16:52,670
of the input X we associated with it a

531
00:16:52,670 --> 00:16:56,149
uniform lwe matrix a 1 ab c IL an

532
00:16:56,149 --> 00:16:59,160
encoding of a bit x 1.is than just an

533
00:16:59,160 --> 00:17:01,470
lwe sample with respect to the matrix a

534
00:17:01,470 --> 00:17:03,449
1 associated with a first input bit as

535
00:17:03,449 --> 00:17:06,089
well as an LW e secret s G here the

536
00:17:06,089 --> 00:17:07,890
special gadget matrix it's important

537
00:17:07,890 --> 00:17:09,540
will not be relevant for the high-level

538
00:17:09,540 --> 00:17:11,250
overview I'm giving now so feel free to

539
00:17:11,250 --> 00:17:13,949
ignore it if it's not familiar so in

540
00:17:13,949 --> 00:17:15,780
this way we're able to encode each bits

541
00:17:15,780 --> 00:17:17,909
of the input as different lwe samples

542
00:17:17,909 --> 00:17:20,309
according to each of the different lwe

543
00:17:20,309 --> 00:17:22,740
matrices but with a comment lwe secret s

544
00:17:22,740 --> 00:17:25,530
the homomorphic property of the encoding

545
00:17:25,530 --> 00:17:27,780
x' is the following given an encoding of

546
00:17:27,780 --> 00:17:30,059
an input X we can derive from it a new

547
00:17:30,059 --> 00:17:32,250
encoding a new out of UE encoding of any

548
00:17:32,250 --> 00:17:34,530
function f on X so we can derive an

549
00:17:34,530 --> 00:17:36,870
encoding of f of X and this new encoding

550
00:17:36,870 --> 00:17:39,540
will be with respect to a new lwe matrix

551
00:17:39,540 --> 00:17:40,500
SMS

552
00:17:40,500 --> 00:17:42,270
where a sub F can be computed as a

553
00:17:42,270 --> 00:17:44,370
public function of just the function f

554
00:17:44,370 --> 00:17:46,980
as well as the public matrices a1 F 3 L

555
00:17:46,980 --> 00:17:49,409
it is not in particular depend on the

556
00:17:49,409 --> 00:17:51,470
value that is being in code

557
00:17:51,470 --> 00:17:54,029
so using homomorphic matrix and coatings

558
00:17:54,029 --> 00:17:54,960
I will now give you a step-by-step

559
00:17:54,960 --> 00:17:56,820
overview of how we build private

560
00:17:56,820 --> 00:17:59,070
translucent PRS our construction will

561
00:17:59,070 --> 00:18:01,649
proceed through several components first

562
00:18:01,649 --> 00:18:03,690
we will actually build a puncture Bo PRS

563
00:18:03,690 --> 00:18:06,179
then I private control P and finally a

564
00:18:06,179 --> 00:18:08,520
private translucent PRF the puncture bo

565
00:18:08,520 --> 00:18:10,320
PRS construction is due to broker schema

566
00:18:10,320 --> 00:18:11,970
vacuum to nothing and relies on the

567
00:18:11,970 --> 00:18:14,370
observation that given any function f

568
00:18:14,370 --> 00:18:15,779
there are essentially two ways of

569
00:18:15,779 --> 00:18:17,909
computing the quantity s transpose AF

570
00:18:17,909 --> 00:18:20,789
one way is directly given the lwe secret

571
00:18:20,789 --> 00:18:24,029
and the public lwe matrices a1 up to a l

572
00:18:24,029 --> 00:18:25,770
use homomorphic li compute on these

573
00:18:25,770 --> 00:18:28,890
matrices and compute s transpose times a

574
00:18:28,890 --> 00:18:31,679
the second method of computing this

575
00:18:31,679 --> 00:18:33,840
quantity is homomorphic li if I give you

576
00:18:33,840 --> 00:18:36,390
lien coatings of some X such that F of x

577
00:18:36,390 --> 00:18:38,159
equals zero then using a holomorphic

578
00:18:38,159 --> 00:18:40,169
properties of these matrix and coatings

579
00:18:40,169 --> 00:18:41,669
we can derive something that looks like

580
00:18:41,669 --> 00:18:43,559
this and as long as f of X equals zero

581
00:18:43,559 --> 00:18:45,510
you see that we end up with s transpose

582
00:18:45,510 --> 00:18:47,190
F plus some noise but there's basically

583
00:18:47,190 --> 00:18:49,320
two ways of approximately computing this

584
00:18:49,320 --> 00:18:51,510
quantity and the two ways will roughly

585
00:18:51,510 --> 00:18:53,340
then correspond to a punctured

586
00:18:53,340 --> 00:18:55,440
evaluation and a master key evaluation

587
00:18:55,440 --> 00:18:57,690
let me show you how that works so to

588
00:18:57,690 --> 00:19:00,029
puncture at a point X star lift class of

589
00:19:00,029 --> 00:19:01,110
functionalities that we're going to

590
00:19:01,110 --> 00:19:02,730
consider are going to be the equality

591
00:19:02,730 --> 00:19:04,260
function because we want a function

592
00:19:04,260 --> 00:19:06,419
recorded in a punk rubble PRF the

593
00:19:06,419 --> 00:19:07,860
punctured key enables evaluation

594
00:19:07,860 --> 00:19:10,260
everywhere except a single point right

595
00:19:10,260 --> 00:19:11,789
so the equality function seems to be the

596
00:19:11,789 --> 00:19:13,529
natural fit for this the equality

597
00:19:13,529 --> 00:19:15,419
function is zero everywhere except at a

598
00:19:15,419 --> 00:19:16,169
single point

599
00:19:16,169 --> 00:19:18,630
so the real PRF evaluation where the

600
00:19:18,630 --> 00:19:20,070
secret key is going to be be out of UE

601
00:19:20,070 --> 00:19:22,770
secret S or correspond to s transpose x

602
00:19:22,770 --> 00:19:25,830
AF the Tong and to evaluate at a point X

603
00:19:25,830 --> 00:19:28,140
which is homomorphic Li compute this

604
00:19:28,140 --> 00:19:30,090
function and multiply by the out of UE

605
00:19:30,090 --> 00:19:32,490
secret the punctured key then in

606
00:19:32,490 --> 00:19:34,980
consists of the encoding of the bits of

607
00:19:34,980 --> 00:19:37,770
x star the punctured point y at star

608
00:19:37,770 --> 00:19:40,049
well this given the encoding of X star

609
00:19:40,049 --> 00:19:42,360
this allows the evaluator to compute any

610
00:19:42,360 --> 00:19:44,309
function on X star and the functions

611
00:19:44,309 --> 00:19:46,080
that are in of interest here is going to

612
00:19:46,080 --> 00:19:47,700
be the Equality function so in

613
00:19:47,700 --> 00:19:49,350
particular this allows the evaluator to

614
00:19:49,350 --> 00:19:51,000
compute all quantities of this form and

615
00:19:51,000 --> 00:19:53,429
notice that as long as X is not equal to

616
00:19:53,429 --> 00:19:55,350
X star this term goes away and we're

617
00:19:55,350 --> 00:19:57,690
left was the REO PRF evaluation so this

618
00:19:57,690 --> 00:19:59,730
precisely gives us a punk treble PRF

619
00:19:59,730 --> 00:20:01,740
however we want something more than a

620
00:20:01,740 --> 00:20:03,000
punk treble piera you want something I

621
00:20:03,000 --> 00:20:04,890
believe that at least provides privacy

622
00:20:04,890 --> 00:20:06,620
or hides the punctured point and

623
00:20:06,620 --> 00:20:09,060
unfortunately the by itself the

624
00:20:09,060 --> 00:20:11,160
parkhurst evacuate anata and PRF does

625
00:20:11,160 --> 00:20:13,020
not provide privacy for a very simple

626
00:20:13,020 --> 00:20:15,120
reason in order to evaluate the PRF

627
00:20:15,120 --> 00:20:17,040
using the puncture key to perform these

628
00:20:17,040 --> 00:20:19,110
homomorphic matrix operations we

629
00:20:19,110 --> 00:20:20,490
actually require knowledge of the

630
00:20:20,490 --> 00:20:23,070
puncture point X star so the workup on a

631
00:20:23,070 --> 00:20:25,440
at all from Europe at this year show how

632
00:20:25,440 --> 00:20:28,050
to avoid this / by encrypting the

633
00:20:28,050 --> 00:20:29,460
punctured point using a fully

634
00:20:29,460 --> 00:20:31,290
homomorphic encryption scheme and they

635
00:20:31,290 --> 00:20:32,850
replace the Equality function that we

636
00:20:32,850 --> 00:20:34,860
compute to evaluate the PRF which

637
00:20:34,860 --> 00:20:36,630
holomorphic evaluation of the Equality

638
00:20:36,630 --> 00:20:38,130
function followed by homomorphic

639
00:20:38,130 --> 00:20:40,230
decryption what this means is that when

640
00:20:40,230 --> 00:20:42,000
you take the punctured key to evaluate

641
00:20:42,000 --> 00:20:43,410
at the punctured point you're going to

642
00:20:43,410 --> 00:20:44,610
get something that's a little bit more

643
00:20:44,610 --> 00:20:46,800
complicated it's going to instead of the

644
00:20:46,800 --> 00:20:48,570
basically quality function you get here

645
00:20:48,570 --> 00:20:50,610
we're going to get the output of the fhe

646
00:20:50,610 --> 00:20:53,010
decryption an evaluation process but a

647
00:20:53,010 --> 00:20:54,540
key insight in the workup on a at all

648
00:20:54,540 --> 00:20:55,890
and they show a new way of doing

649
00:20:55,890 --> 00:20:58,320
rounding effectively rounding away the

650
00:20:58,320 --> 00:21:00,840
FHD noise and again recovering the

651
00:21:00,840 --> 00:21:03,390
original value of the PRF however this

652
00:21:03,390 --> 00:21:04,590
approach still does not provide us

653
00:21:04,590 --> 00:21:06,930
flexibility in influencing the value of

654
00:21:06,930 --> 00:21:08,940
paint when we use the punctured key to

655
00:21:08,940 --> 00:21:10,860
evaluate at the punctured point and to

656
00:21:10,860 --> 00:21:12,210
bridge the gap between private

657
00:21:12,210 --> 00:21:14,010
puncturing and private translucent PRF

658
00:21:14,010 --> 00:21:16,170
we need to do one more thing so first

659
00:21:16,170 --> 00:21:18,480
we're going to modify the PRF evaluation

660
00:21:18,480 --> 00:21:21,060
by first computing s transpose AF as

661
00:21:21,060 --> 00:21:22,770
before but we're also going to multiply

662
00:21:22,770 --> 00:21:25,260
by a bit decomposition of some fixed

663
00:21:25,260 --> 00:21:28,230
matrix D it's also become more apparent

664
00:21:28,230 --> 00:21:31,770
why we do this later on evaluated using

665
00:21:31,770 --> 00:21:33,390
the puncture key foresees exactly as

666
00:21:33,390 --> 00:21:35,250
before we homomorphic we operate on the

667
00:21:35,250 --> 00:21:37,320
lwe encoding but there are two different

668
00:21:37,320 --> 00:21:38,940
main differences first instead of

669
00:21:38,940 --> 00:21:41,100
scaling the input by Q over to as is

670
00:21:41,100 --> 00:21:43,020
typical in fhe schemes we're going to

671
00:21:43,020 --> 00:21:45,690
scale by X value W and W will be chosen

672
00:21:45,690 --> 00:21:48,030
at a time of puncturing the second

673
00:21:48,030 --> 00:21:49,530
difference is because we change the way

674
00:21:49,530 --> 00:21:52,020
we through the master key evaluation we

675
00:21:52,020 --> 00:21:54,150
have to multiply by G inverse times D at

676
00:21:54,150 --> 00:21:56,910
the end so if you do some algebra and

677
00:21:56,910 --> 00:21:58,980
manipulate this what you'll see is that

678
00:21:58,980 --> 00:22:00,540
when we take the punctured key and

679
00:22:00,540 --> 00:22:02,490
evaluate at the punctured point we

680
00:22:02,490 --> 00:22:03,930
obtain a quantity that looks like this

681
00:22:03,930 --> 00:22:06,960
so just I'll ask you to just believe me

682
00:22:06,960 --> 00:22:08,220
when I say that there's a different way

683
00:22:08,220 --> 00:22:10,320
of doing the fhg rounding there so that

684
00:22:10,320 --> 00:22:11,700
correctness is still maintained when X

685
00:22:11,700 --> 00:22:13,290
is not equal to X star for the in

686
00:22:13,290 --> 00:22:14,850
purposes of this talk I will just focus

687
00:22:14,850 --> 00:22:16,830
on a behavior when we evaluate at the

688
00:22:16,830 --> 00:22:18,540
punctured point the key

689
00:22:18,540 --> 00:22:20,220
observation here is that now we have

690
00:22:20,220 --> 00:22:22,290
this additional trim W times D and

691
00:22:22,290 --> 00:22:24,840
notice that W is chosen at the time that

692
00:22:24,840 --> 00:22:26,760
the key is being punctured this allows

693
00:22:26,760 --> 00:22:28,350
the puncturing algorithm to actually

694
00:22:28,350 --> 00:22:31,770
influence the behavior of the PRF when

695
00:22:31,770 --> 00:22:34,680
we evaluate at the punctured point so it

696
00:22:34,680 --> 00:22:36,570
turns out though that if we just have

697
00:22:36,570 --> 00:22:38,400
one scalar here we don't have so much

698
00:22:38,400 --> 00:22:40,080
flexibility but if we want more

699
00:22:40,080 --> 00:22:42,150
flexibility all we have to do is have

700
00:22:42,150 --> 00:22:43,920
many copies of this so we instead of

701
00:22:43,920 --> 00:22:46,050
having one PRF we have many many copies

702
00:22:46,050 --> 00:22:48,090
of the piera and we choose many W eyes

703
00:22:48,090 --> 00:22:50,340
and D eyes and basically what this means

704
00:22:50,340 --> 00:22:52,530
is now when I take a puncture key and

705
00:22:52,530 --> 00:22:54,930
evaluate at the puncture point we can

706
00:22:54,930 --> 00:22:57,360
obtain the additional evaluation blinded

707
00:22:57,360 --> 00:22:59,910
by this term WI di and if we choose the

708
00:22:59,910 --> 00:23:01,530
D is the constitute a basis for the

709
00:23:01,530 --> 00:23:03,030
matrix space we can choose the

710
00:23:03,030 --> 00:23:05,670
coefficients WI so that the matrix sums

711
00:23:05,670 --> 00:23:07,170
to any matrix of our choosing in

712
00:23:07,170 --> 00:23:09,450
particular we're going to choose W to be

713
00:23:09,450 --> 00:23:11,670
an lwe matrix and basically what this

714
00:23:11,670 --> 00:23:13,680
means is when I take a punctured key and

715
00:23:13,680 --> 00:23:15,570
evaluate at the puncture point we're

716
00:23:15,570 --> 00:23:17,040
going to land in a sparse subset

717
00:23:17,040 --> 00:23:19,140
determined by this out W matrix this is

718
00:23:19,140 --> 00:23:21,270
extremely important and being able to

719
00:23:21,270 --> 00:23:23,130
argue that this precisely implements a

720
00:23:23,130 --> 00:23:25,320
translucent set system under the lwe

721
00:23:25,320 --> 00:23:27,480
assumption moreover the fact that our

722
00:23:27,480 --> 00:23:28,590
samples now have this particular

723
00:23:28,590 --> 00:23:30,480
structure means that is actually very

724
00:23:30,480 --> 00:23:32,130
easy to test whether we're in this

725
00:23:32,130 --> 00:23:36,330
subspace or not we okay what's happening

726
00:23:36,330 --> 00:23:42,600
oh okay I'll try to proceed so the

727
00:23:42,600 --> 00:23:44,550
testing he then it's going to be a short

728
00:23:44,550 --> 00:23:47,190
vector Z such that W times Z is equal to

729
00:23:47,190 --> 00:23:48,900
zero so how do we test whether an

730
00:23:48,900 --> 00:23:50,820
element is in this subspace or not we

731
00:23:50,820 --> 00:23:52,170
simply take the inner product with this

732
00:23:52,170 --> 00:23:53,880
short vector Z and we check if it is

733
00:23:53,880 --> 00:23:55,770
short or not and this allows us to

734
00:23:55,770 --> 00:23:57,540
achieve a private translucent kierra

735
00:23:57,540 --> 00:24:00,540
from the lwe assumption no just a kook

736
00:24:00,540 --> 00:24:02,460
and there are many technical details

737
00:24:02,460 --> 00:24:04,200
that I glossed over here I hope I gave

738
00:24:04,200 --> 00:24:05,580
you a flavor for how we have achieved

739
00:24:05,580 --> 00:24:07,920
private translucent ers from the other

740
00:24:07,920 --> 00:24:09,510
Beauty assumption and I'll refer you to

741
00:24:09,510 --> 00:24:11,010
the paper for the full details of our

742
00:24:11,010 --> 00:24:13,050
construction as well as its formal

743
00:24:13,050 --> 00:24:15,750
security analysis so to conclude a talk

744
00:24:15,750 --> 00:24:17,730
at the beginning or prior to this work

745
00:24:17,730 --> 00:24:19,230
we basically knew how to build

746
00:24:19,230 --> 00:24:20,850
cryptographic watermarking with strong

747
00:24:20,850 --> 00:24:22,260
security guarantees from

748
00:24:22,260 --> 00:24:24,180
indistinguishability office keishon and

749
00:24:24,180 --> 00:24:25,740
all of these constructions relied on

750
00:24:25,740 --> 00:24:28,050
being able to secretly embed a watermark

751
00:24:28,050 --> 00:24:29,700
within a piece of code and using

752
00:24:29,700 --> 00:24:32,050
obfuscation to hide that watermark

753
00:24:32,050 --> 00:24:34,090
at the same time prior to this work as a

754
00:24:34,090 --> 00:24:35,500
bureau we have our first

755
00:24:35,500 --> 00:24:36,940
constructions of private Punk trouble

756
00:24:36,940 --> 00:24:39,340
PRS from the lwe assumption these things

757
00:24:39,340 --> 00:24:41,380
very closely related to watermarking yet

758
00:24:41,380 --> 00:24:43,300
to our knowledge it is not clear that

759
00:24:43,300 --> 00:24:45,010
private Punk trouble PRF suffice for

760
00:24:45,010 --> 00:24:47,500
building watermarking so in this work we

761
00:24:47,500 --> 00:24:49,180
introduce a strengthened notion called a

762
00:24:49,180 --> 00:24:51,250
private translucent PRF that has the

763
00:24:51,250 --> 00:24:52,900
advantage that it can still be built

764
00:24:52,900 --> 00:24:54,490
from standard lattice assumptions and

765
00:24:54,490 --> 00:24:57,070
yet is also sufficient for cryptographic

766
00:24:57,070 --> 00:24:59,470
watermarking so today we've al-qaida

767
00:24:59,470 --> 00:25:01,480
chief cryptographic watermarking from

768
00:25:01,480 --> 00:25:02,980
standard assumptions let me conclude

769
00:25:02,980 --> 00:25:06,070
with two open problems first is can we

770
00:25:06,070 --> 00:25:07,750
build publicly verifiable watermarking

771
00:25:07,750 --> 00:25:09,670
without relying on office keishon all of

772
00:25:09,670 --> 00:25:11,290
the techniques here work in a secret key

773
00:25:11,290 --> 00:25:13,180
setting where we assume that the marking

774
00:25:13,180 --> 00:25:15,070
and the verification algorithms have a

775
00:25:15,070 --> 00:25:17,140
common key the current best construction

776
00:25:17,140 --> 00:25:18,790
of this primitive is due to cohannet

777
00:25:18,790 --> 00:25:20,670
Hall and still relies on obfuscation

778
00:25:20,670 --> 00:25:23,080
second I think there might be other

779
00:25:23,080 --> 00:25:24,490
interesting applications that we can

780
00:25:24,490 --> 00:25:26,230
explore using this new primitive a

781
00:25:26,230 --> 00:25:28,120
private translucent PRS they seem to

782
00:25:28,120 --> 00:25:29,770
provide us more power than private on

783
00:25:29,770 --> 00:25:31,270
tribal PRF but they have the advantage

784
00:25:31,270 --> 00:25:33,400
that we can still instantiate them from

785
00:25:33,400 --> 00:25:34,840
standard lattice assumptions can we

786
00:25:34,840 --> 00:25:37,830
build new primitives and based new new

787
00:25:37,830 --> 00:25:40,060
techniques on these standard assumptions

788
00:25:40,060 --> 00:25:41,380
and with that I open the floor to

789
00:25:41,380 --> 00:25:42,920
questions thank you very much

790
00:25:42,920 --> 00:25:48,249
[Applause]

