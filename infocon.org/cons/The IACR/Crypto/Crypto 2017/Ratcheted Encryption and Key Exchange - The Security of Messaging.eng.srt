1
00:00:04,830 --> 00:00:07,890
hi I'm just Jagger I'm here to talk

2
00:00:07,890 --> 00:00:09,930
about our encryption key exchange the

3
00:00:09,930 --> 00:00:12,450
security of messaging this is joint work

4
00:00:12,450 --> 00:00:15,420
with me here bellari Asha compassing my

5
00:00:15,420 --> 00:00:19,770
entire party and the ego develops so

6
00:00:19,770 --> 00:00:22,529
there's growing recognition that kind of

7
00:00:22,529 --> 00:00:24,570
ordinary people really should have

8
00:00:24,570 --> 00:00:28,439
end-to-end secured communication after

9
00:00:28,439 --> 00:00:31,140
30 or 40 years of crypto we have plenty

10
00:00:31,140 --> 00:00:33,780
of theory telling us how to build such

11
00:00:33,780 --> 00:00:37,229
communication systems but what tools do

12
00:00:37,229 --> 00:00:38,790
we have in practice that might actually

13
00:00:38,790 --> 00:00:44,040
be usable SMS text messaging typically

14
00:00:44,040 --> 00:00:46,320
not secured in this way various social

15
00:00:46,320 --> 00:00:48,449
media websites they don't do end to end

16
00:00:48,449 --> 00:00:51,119
encryption email isn't encrypted by

17
00:00:51,119 --> 00:00:52,949
default you can try to use something

18
00:00:52,949 --> 00:00:55,860
like PGP but that's generally accepted

19
00:00:55,860 --> 00:00:57,900
to be somewhat of a pain and hard to use

20
00:00:57,900 --> 00:01:01,470
correctly TLS isn't really appropriate

21
00:01:01,470 --> 00:01:04,069
to use here we're not web servers with

22
00:01:04,069 --> 00:01:07,710
certificates just ordinary people secure

23
00:01:07,710 --> 00:01:10,350
messaging app seems to be a very good

24
00:01:10,350 --> 00:01:13,830
answer these days here's a few examples

25
00:01:13,830 --> 00:01:16,620
of messaging apps there are many more

26
00:01:16,620 --> 00:01:18,960
out there and these are somewhat widely

27
00:01:18,960 --> 00:01:20,730
used whatsapp for example reports

28
00:01:20,730 --> 00:01:28,380
encrypting 55 billion messages a day so

29
00:01:28,380 --> 00:01:30,210
this leaves us with kind of an obvious

30
00:01:30,210 --> 00:01:32,310
question how secure are of these

31
00:01:32,310 --> 00:01:35,780
messaging apps this is a big question

32
00:01:35,780 --> 00:01:38,310
answering a theory thoroughly would

33
00:01:38,310 --> 00:01:40,470
require really a systems level

34
00:01:40,470 --> 00:01:44,280
perspective worrying about much more

35
00:01:44,280 --> 00:01:47,909
than just the crypto involved we're not

36
00:01:47,909 --> 00:01:49,979
trying to exhaustively look at things at

37
00:01:49,979 --> 00:01:51,180
work we're just going to look at the

38
00:01:51,180 --> 00:01:53,100
crypto and in particular we're looking

39
00:01:53,100 --> 00:01:55,200
at this one component technique used by

40
00:01:55,200 --> 00:01:58,580
some of these apps called rattling

41
00:01:58,580 --> 00:02:04,200
rattling is used by these four so but we

42
00:02:04,200 --> 00:02:06,240
get to that quickly in reality to have

43
00:02:06,240 --> 00:02:07,680
any sort of end-to-end encrypted

44
00:02:07,680 --> 00:02:09,899
communication you need to start with

45
00:02:09,899 --> 00:02:12,150
some sort of authenticated key exchange

46
00:02:12,150 --> 00:02:15,030
in practice with TLS the authentication

47
00:02:15,030 --> 00:02:16,380
comes from Jason

48
00:02:16,380 --> 00:02:18,720
certificates in the messaging setting it

49
00:02:18,720 --> 00:02:20,700
may come from some trusted server or

50
00:02:20,700 --> 00:02:22,800
from some sort of out-of-band

51
00:02:22,800 --> 00:02:25,880
verification for our work would not

52
00:02:25,880 --> 00:02:28,020
don't kind of worry about that because

53
00:02:28,020 --> 00:02:30,210
ratcheting is more about how the keys

54
00:02:30,210 --> 00:02:32,490
are used and updated rather than how

55
00:02:32,490 --> 00:02:36,330
they are initially produced so we're

56
00:02:36,330 --> 00:02:38,310
going to have just abstract this away is

57
00:02:38,310 --> 00:02:40,530
some algorithm called initial key

58
00:02:40,530 --> 00:02:43,530
generation which we trust to give us the

59
00:02:43,530 --> 00:02:47,970
keys that we need so in the kind of

60
00:02:47,970 --> 00:02:52,670
traditional way to use the key like say

61
00:02:52,670 --> 00:02:54,960
we would essentially just have a single

62
00:02:54,960 --> 00:02:56,910
shared symmetric key which we use to

63
00:02:56,910 --> 00:02:59,430
encrypt and decrypt our messages for the

64
00:02:59,430 --> 00:03:03,330
entirety of our conversation well this

65
00:03:03,330 --> 00:03:05,250
becomes a problem is in a setting where

66
00:03:05,250 --> 00:03:06,900
you worried about there being some sort

67
00:03:06,900 --> 00:03:10,110
of compromise of your key an adversary

68
00:03:10,110 --> 00:03:12,930
is able to break into your phone maybe

69
00:03:12,930 --> 00:03:14,730
with some sort of malware or whatever if

70
00:03:14,730 --> 00:03:17,700
they steal your key in this setting they

71
00:03:17,700 --> 00:03:20,700
can read all of your messages forever

72
00:03:20,700 --> 00:03:22,410
all your past messages all your future

73
00:03:22,410 --> 00:03:25,770
messages everything how can we hope to

74
00:03:25,770 --> 00:03:27,900
avoid this well we can try to update our

75
00:03:27,900 --> 00:03:30,720
key over time and this is what

76
00:03:30,720 --> 00:03:32,910
ratcheting is all about generally

77
00:03:32,910 --> 00:03:34,830
speaking interacting what we're going to

78
00:03:34,830 --> 00:03:36,120
think of it is we have a shared

79
00:03:36,120 --> 00:03:39,270
symmetric key k1 and then you know

80
00:03:39,270 --> 00:03:41,190
periodically throughout the conversation

81
00:03:41,190 --> 00:03:43,560
the parties send update messages to each

82
00:03:43,560 --> 00:03:45,630
other based on which they update or

83
00:03:45,630 --> 00:03:48,060
ratchet the keys forward to produce k2

84
00:03:48,060 --> 00:03:51,810
later k3 and kind of what we hope for

85
00:03:51,810 --> 00:03:53,910
here is if the adversary steals one of

86
00:03:53,910 --> 00:03:57,900
the keys say k1 when the kids later

87
00:03:57,900 --> 00:04:00,060
updated and the parties are

88
00:04:00,060 --> 00:04:02,820
communicating using k2 knowledge of k1

89
00:04:02,820 --> 00:04:04,920
won't help the adversary at all in

90
00:04:04,920 --> 00:04:09,060
reading the encrypted messages in phony

91
00:04:09,060 --> 00:04:12,120
the two goals here okay Ford security

92
00:04:12,120 --> 00:04:14,400
and backward security backward security

93
00:04:14,400 --> 00:04:15,870
is the one I just described before word

94
00:04:15,870 --> 00:04:17,720
security is the other direction if

95
00:04:17,720 --> 00:04:20,760
somebody has explorer is able to steal

96
00:04:20,760 --> 00:04:23,730
k2 we want that to not help them read

97
00:04:23,730 --> 00:04:27,169
anything that was encrypted using k1

98
00:04:27,169 --> 00:04:29,380
exactly what threats are

99
00:04:29,380 --> 00:04:31,930
protected against by this ratcheting

100
00:04:31,930 --> 00:04:33,900
does need kind of careful consideration

101
00:04:33,900 --> 00:04:36,250
because if if the threat you're worried

102
00:04:36,250 --> 00:04:38,080
about is some sort of persistent malware

103
00:04:38,080 --> 00:04:39,430
that can just sit on your phone

104
00:04:39,430 --> 00:04:42,310
exfiltrated all your messages ratcheting

105
00:04:42,310 --> 00:04:44,260
isn't really adding anything to help you

106
00:04:44,260 --> 00:04:44,650
there

107
00:04:44,650 --> 00:04:46,900
we're ratcheting might be more useful is

108
00:04:46,900 --> 00:04:49,630
if say the mail was only able to export

109
00:04:49,630 --> 00:04:51,580
rate keys and it presents is somehow

110
00:04:51,580 --> 00:04:54,010
being limited by the software security

111
00:04:54,010 --> 00:04:58,720
that you have as we kind of saw in the

112
00:04:58,720 --> 00:05:00,610
previous talks yeah these security

113
00:05:00,610 --> 00:05:03,040
notions you know can also be considered

114
00:05:03,040 --> 00:05:06,160
for something like TLS one reason why

115
00:05:06,160 --> 00:05:07,810
they seem to be particularly interesting

116
00:05:07,810 --> 00:05:09,720
in the messaging setting though is

117
00:05:09,720 --> 00:05:12,730
chatting conversations can stay open for

118
00:05:12,730 --> 00:05:16,240
long periods of time so there's kind of

119
00:05:16,240 --> 00:05:21,670
this longer period of time to avoid so

120
00:05:21,670 --> 00:05:23,260
some quick history the kind of

121
00:05:23,260 --> 00:05:26,770
techniques underlying ratcheting were

122
00:05:26,770 --> 00:05:28,870
originally used in this paper by Boris

123
00:05:28,870 --> 00:05:30,760
off Goldberg and Breuer in which they

124
00:05:30,760 --> 00:05:31,840
introduced the off-the-record

125
00:05:31,840 --> 00:05:35,440
communication system this picture on

126
00:05:35,440 --> 00:05:40,690
there right here left gives kind of a

127
00:05:40,690 --> 00:05:42,340
quick sketch of roughly how the

128
00:05:42,340 --> 00:05:44,110
ratcheting works there they use a

129
00:05:44,110 --> 00:05:45,700
different group together with a hash

130
00:05:45,700 --> 00:05:47,820
function to update the keys over time

131
00:05:47,820 --> 00:05:50,260
the term ratcheting itself didn't come

132
00:05:50,260 --> 00:05:52,240
until later Adam Langley in the pond

133
00:05:52,240 --> 00:05:56,860
protocol um there was also recently a

134
00:05:56,860 --> 00:05:59,560
survey article a systemization of

135
00:05:59,560 --> 00:06:03,010
knowledge on messaging apps which stated

136
00:06:03,010 --> 00:06:06,550
that it noted that there are many claims

137
00:06:06,550 --> 00:06:09,370
in the literature including forward

138
00:06:09,370 --> 00:06:11,590
secrecy backward secrecy self-healing in

139
00:06:11,590 --> 00:06:14,080
future secrecy but that these terms are

140
00:06:14,080 --> 00:06:16,360
controversial and vague in the

141
00:06:16,360 --> 00:06:20,560
literature so I can talk about what we

142
00:06:20,560 --> 00:06:23,200
try to do in our work now first thing we

143
00:06:23,200 --> 00:06:25,210
tried to lift ratcheting from just being

144
00:06:25,210 --> 00:06:27,880
a technique used in practice to a

145
00:06:27,880 --> 00:06:31,060
distinct cryptographic primitive and in

146
00:06:31,060 --> 00:06:33,820
fact we formalize two versions of the

147
00:06:33,820 --> 00:06:35,920
primitive first we have ratchet key

148
00:06:35,920 --> 00:06:37,720
exchange which solely deals with the

149
00:06:37,720 --> 00:06:40,660
updating of the keys over time and then

150
00:06:40,660 --> 00:06:42,740
ratchet encryption deals with this up

151
00:06:42,740 --> 00:06:45,650
keys overtime in addition to processing

152
00:06:45,650 --> 00:06:50,479
encrypted data with the keys what do I

153
00:06:50,479 --> 00:06:51,919
mean my phone nice well yeah the two

154
00:06:51,919 --> 00:06:54,020
parts are just defining some sort of

155
00:06:54,020 --> 00:06:56,599
syntax so actually define what what

156
00:06:56,599 --> 00:06:58,130
these objects are that we're talking

157
00:06:58,130 --> 00:07:00,860
about and then profiling strong game

158
00:07:00,860 --> 00:07:03,440
based security definitions specifying

159
00:07:03,440 --> 00:07:06,020
exactly what the security we're hoping

160
00:07:06,020 --> 00:07:11,150
that is to achieve the ultimate goal of

161
00:07:11,150 --> 00:07:13,759
those two primitives I discussed there's

162
00:07:13,759 --> 00:07:15,830
a course about encryption our whole goal

163
00:07:15,830 --> 00:07:17,810
here is to have encryption to talk to

164
00:07:17,810 --> 00:07:20,919
each other it's a kind of bootstrap

165
00:07:20,919 --> 00:07:23,120
bootstrappers along the way there we

166
00:07:23,120 --> 00:07:25,729
show a generic way to compile together a

167
00:07:25,729 --> 00:07:28,130
graduated key exchange protocol within

168
00:07:28,130 --> 00:07:31,940
aad encryption scheme to build ratchet

169
00:07:31,940 --> 00:07:35,690
encryption we how's that we only have to

170
00:07:35,690 --> 00:07:37,759
focus on building a ratchet encryption

171
00:07:37,759 --> 00:07:40,130
protocol so of course we do so in our

172
00:07:40,130 --> 00:07:44,720
work and then protocol by itself isn't

173
00:07:44,720 --> 00:07:46,580
useful unless you're able to show that

174
00:07:46,580 --> 00:07:49,099
it's secure so we provide a proof that

175
00:07:49,099 --> 00:07:51,500
the ratchet key exchange protocol we

176
00:07:51,500 --> 00:07:54,500
designed is secure achieves our strong

177
00:07:54,500 --> 00:07:56,900
security notion under the strong

178
00:07:56,900 --> 00:07:58,789
computational diffie-hellman assumption

179
00:07:58,789 --> 00:08:03,590
in the random Oracle model few caveats

180
00:08:03,590 --> 00:08:05,479
and remarks before I kind of dig into

181
00:08:05,479 --> 00:08:08,449
the details of those of those

182
00:08:08,449 --> 00:08:11,870
contributions messaging acts apps in

183
00:08:11,870 --> 00:08:14,270
practice use what we call double

184
00:08:14,270 --> 00:08:17,719
two-sided ratcheting to kind of abstract

185
00:08:17,719 --> 00:08:19,580
out the core of what ratcheting is about

186
00:08:19,580 --> 00:08:21,979
in our work we just treated single

187
00:08:21,979 --> 00:08:24,349
one-sided ratcheting and the single

188
00:08:24,349 --> 00:08:26,719
one-sided rattles model we think of one

189
00:08:26,719 --> 00:08:28,460
of our parties as strictly being the

190
00:08:28,460 --> 00:08:30,560
sender and the other party as being the

191
00:08:30,560 --> 00:08:33,828
receiver and one important thing to

192
00:08:33,828 --> 00:08:37,490
emphasize here then is that kind of in

193
00:08:37,490 --> 00:08:40,820
this model we can't hope for security

194
00:08:40,820 --> 00:08:42,950
against the exposure of the receiver

195
00:08:42,950 --> 00:08:45,140
secrets if an adversary gets the

196
00:08:45,140 --> 00:08:46,850
receiver secrets all security will be

197
00:08:46,850 --> 00:08:47,360
lost

198
00:08:47,360 --> 00:08:50,270
we're only providing these more advanced

199
00:08:50,270 --> 00:08:52,430
security notions against the compromise

200
00:08:52,430 --> 00:08:53,560
of the

201
00:08:53,560 --> 00:09:00,220
secrets in this kind of isolation of the

202
00:09:00,220 --> 00:09:02,710
questioning technique the protocols we

203
00:09:02,710 --> 00:09:05,170
give and make proofs about while

204
00:09:05,170 --> 00:09:08,830
inspired by the in use protocols are you

205
00:09:08,830 --> 00:09:11,110
know not exactly identical to any of

206
00:09:11,110 --> 00:09:13,420
them and they have some important

207
00:09:13,420 --> 00:09:16,330
distinctions and again we only treated

208
00:09:16,330 --> 00:09:18,640
kind of ratcheting as a whole there's

209
00:09:18,640 --> 00:09:21,880
this great other work from 2017 which

210
00:09:21,880 --> 00:09:25,330
treats the the signal protocol in

211
00:09:25,330 --> 00:09:27,940
particular in more generality than just

212
00:09:27,940 --> 00:09:32,980
the ratcheting component okay so kind of

213
00:09:32,980 --> 00:09:35,140
let's get into our formal ISM what do I

214
00:09:35,140 --> 00:09:37,839
mean by ratchet key exchange we're going

215
00:09:37,839 --> 00:09:39,700
to think of both the sender and receiver

216
00:09:39,700 --> 00:09:42,970
as having kind of three keys a staticky

217
00:09:42,970 --> 00:09:44,740
which is never changes throughout the

218
00:09:44,740 --> 00:09:47,350
duration of the protocol session keys

219
00:09:47,350 --> 00:09:49,600
which get updated with every ratchet and

220
00:09:49,600 --> 00:09:51,730
then the symmetric keys are the keys

221
00:09:51,730 --> 00:09:54,220
actually output by the protocol to be

222
00:09:54,220 --> 00:09:57,670
used the initial key generation just

223
00:09:57,670 --> 00:10:01,330
spits out those keys for both parties

224
00:10:01,330 --> 00:10:04,030
then we have sender key generation which

225
00:10:04,030 --> 00:10:05,470
performs the actual ratchet on the

226
00:10:05,470 --> 00:10:07,660
sender side it will update the session

227
00:10:07,660 --> 00:10:09,339
key it will produce the new symmetric

228
00:10:09,339 --> 00:10:11,290
key and it produces some sort of update

229
00:10:11,290 --> 00:10:14,040
information to send over to the receiver

230
00:10:14,040 --> 00:10:16,810
the receiver then given the update

231
00:10:16,810 --> 00:10:18,850
information can perform the same ratchet

232
00:10:18,850 --> 00:10:21,760
to obtain the same shared the symmetric

233
00:10:21,760 --> 00:10:25,780
key and just to kind of emphasize here

234
00:10:25,780 --> 00:10:27,790
the state stored by the two parties

235
00:10:27,790 --> 00:10:30,400
which might be vulnerable to exposes is

236
00:10:30,400 --> 00:10:32,920
exactly those three keys but again we're

237
00:10:32,920 --> 00:10:35,290
only looking at exposures of the sender

238
00:10:35,290 --> 00:10:37,750
state the receiver state is going to be

239
00:10:37,750 --> 00:10:42,580
assumed secure against exposure okay so

240
00:10:42,580 --> 00:10:45,910
we give a definition of key

241
00:10:45,910 --> 00:10:47,800
indistinguishability of what the

242
00:10:47,800 --> 00:10:50,980
security were hoping for is in this

243
00:10:50,980 --> 00:10:52,720
model we think of the adversary as

244
00:10:52,720 --> 00:10:54,940
having complete adversarial control of

245
00:10:54,940 --> 00:10:57,100
the communication which is represented

246
00:10:57,100 --> 00:10:59,290
by a ratchet sending in ratchet

247
00:10:59,290 --> 00:11:03,280
receiving Oracle's in addition to that

248
00:11:03,280 --> 00:11:05,890
it's at any time allowed to ask to have

249
00:11:05,890 --> 00:11:07,089
the secret stored

250
00:11:07,089 --> 00:11:10,720
the sender exposed to it given by an

251
00:11:10,720 --> 00:11:14,199
expose Oracle given these different

252
00:11:14,199 --> 00:11:16,420
powers the goal of the adversary then is

253
00:11:16,420 --> 00:11:19,089
to distinguish the keys that were

254
00:11:19,089 --> 00:11:22,149
produced from by the protocol from truly

255
00:11:22,149 --> 00:11:24,220
random strings and those are given by

256
00:11:24,220 --> 00:11:26,050
the challenged receiver and challenge

257
00:11:26,050 --> 00:11:30,699
sender or over them in this setting

258
00:11:30,699 --> 00:11:33,189
where you have to worry about the

259
00:11:33,189 --> 00:11:35,889
various secrets of parties being exposed

260
00:11:35,889 --> 00:11:40,449
it's actually quite you know takes it

261
00:11:40,449 --> 00:11:42,970
takes a lot of care to write security

262
00:11:42,970 --> 00:11:45,540
definitions that are actually achievable

263
00:11:45,540 --> 00:11:48,970
because when you give out some when you

264
00:11:48,970 --> 00:11:50,680
give out the secret information there

265
00:11:50,680 --> 00:11:52,449
will be some inherent attacks that you

266
00:11:52,449 --> 00:11:54,790
just cannot possibly hope to avoid so

267
00:11:54,790 --> 00:11:58,209
you have to write your games - yeah make

268
00:11:58,209 --> 00:12:00,730
sure those aren't allowed - examples

269
00:12:00,730 --> 00:12:03,459
here if the adversary exposes a secret

270
00:12:03,459 --> 00:12:05,949
key K clearly that key well no longer

271
00:12:05,949 --> 00:12:09,399
look random to them and our game we just

272
00:12:09,399 --> 00:12:11,639
kind of keep track in a table top

273
00:12:11,639 --> 00:12:14,499
whether an adversary has exposed or

274
00:12:14,499 --> 00:12:16,149
challenges down a particular round and

275
00:12:16,149 --> 00:12:21,970
we don't let it do both a second thing

276
00:12:21,970 --> 00:12:25,059
like this is if the AI versary exposes

277
00:12:25,059 --> 00:12:27,129
the information from the sender they

278
00:12:27,129 --> 00:12:28,720
would necessarily be able to produce

279
00:12:28,720 --> 00:12:30,910
their own update information to send

280
00:12:30,910 --> 00:12:33,790
over to the receiver and then they would

281
00:12:33,790 --> 00:12:35,800
be able to know the key that is see if

282
00:12:35,800 --> 00:12:37,689
it generates so again we actually just

283
00:12:37,689 --> 00:12:38,290
allow that

284
00:12:38,290 --> 00:12:41,050
and we set this flag called restricted

285
00:12:41,050 --> 00:12:43,240
which just keeps track of whether it

286
00:12:43,240 --> 00:12:45,220
used an exposure to forge update

287
00:12:45,220 --> 00:12:47,410
information and in that case we kind of

288
00:12:47,410 --> 00:12:49,449
break to the challenge receiver or call

289
00:12:49,449 --> 00:12:51,429
and it will just only return the real

290
00:12:51,429 --> 00:12:58,079
key and never never the randomness okay

291
00:12:58,079 --> 00:13:00,670
so we showed these three algorithms for

292
00:13:00,670 --> 00:13:03,670
wretched key exchange ratchet encryption

293
00:13:03,670 --> 00:13:05,860
has those two the algorithms again and

294
00:13:05,860 --> 00:13:07,959
just kind of augments them with

295
00:13:07,959 --> 00:13:10,749
encryption and decryption algorithms in

296
00:13:10,749 --> 00:13:14,290
a non spaced vein how's it work their

297
00:13:14,290 --> 00:13:16,569
encryption takes in a key produced by

298
00:13:16,569 --> 00:13:18,009
sender key generation yeah that

299
00:13:18,009 --> 00:13:20,100
resonance message in a header degrees

300
00:13:20,100 --> 00:13:23,250
cyphertext then the decryption given

301
00:13:23,250 --> 00:13:25,019
that ciphertext is not in the header and

302
00:13:25,019 --> 00:13:27,230
the key from receiver key generation

303
00:13:27,230 --> 00:13:30,600
decrypt and obtains back that underlying

304
00:13:30,600 --> 00:13:34,380
message again we have a security game

305
00:13:34,380 --> 00:13:37,440
again the adversary has complete control

306
00:13:37,440 --> 00:13:38,850
of the communication between the parties

307
00:13:38,850 --> 00:13:41,009
and is allowed to expose the sender

308
00:13:41,009 --> 00:13:43,319
secret and then in time the difference

309
00:13:43,319 --> 00:13:45,120
comes in what the answer is trying to do

310
00:13:45,120 --> 00:13:47,370
to win now instead of distinguishing

311
00:13:47,370 --> 00:13:49,560
keys from random it has access to both

312
00:13:49,560 --> 00:13:51,360
encryption and decryption or course it

313
00:13:51,360 --> 00:13:53,370
tries to distinguish between the valid

314
00:13:53,370 --> 00:13:57,240
output of encryption and random strings

315
00:13:57,240 --> 00:14:00,540
of the appropriate length or it tries to

316
00:14:00,540 --> 00:14:01,920
distinguish between the output of

317
00:14:01,920 --> 00:14:04,259
decryption and an Oracle which just

318
00:14:04,259 --> 00:14:08,130
always rejects as before there are

319
00:14:08,130 --> 00:14:11,300
various subtleties dealing with when

320
00:14:11,300 --> 00:14:14,130
when the adversary exposes not allowing

321
00:14:14,130 --> 00:14:17,579
it to do trivia or tax and we kind of

322
00:14:17,579 --> 00:14:20,279
address them using similar techniques to

323
00:14:20,279 --> 00:14:25,139
the prior definition okay now that we

324
00:14:25,139 --> 00:14:27,630
know what our primitives are how can we

325
00:14:27,630 --> 00:14:30,709
do this generic compilation well it's

326
00:14:30,709 --> 00:14:33,149
somewhat intuitive take for it you're

327
00:14:33,149 --> 00:14:35,399
given the three algorithms for matching

328
00:14:35,399 --> 00:14:38,639
key exchange you're given an aad scheme

329
00:14:38,639 --> 00:14:40,399
which has encryption and decryption

330
00:14:40,399 --> 00:14:42,959
these five algorithms are exactly the

331
00:14:42,959 --> 00:14:44,790
sorts of algorithms that we needed for

332
00:14:44,790 --> 00:14:47,670
ratcheting encryption you just plug them

333
00:14:47,670 --> 00:14:51,600
in into the appropriate places and of

334
00:14:51,600 --> 00:14:53,250
course we have to prove they're secure

335
00:14:53,250 --> 00:14:56,389
and were able to prove that the this

336
00:14:56,389 --> 00:14:59,279
ratchet encryption protocol will achieve

337
00:14:59,279 --> 00:15:01,529
the desired I was the desired security

338
00:15:01,529 --> 00:15:04,500
notion assuming that the underlying key

339
00:15:04,500 --> 00:15:05,130
exchange

340
00:15:05,130 --> 00:15:08,279
achieved our ki ND security and that the

341
00:15:08,279 --> 00:15:11,519
aap encryption scheme is multi-user

342
00:15:11,519 --> 00:15:15,149
secured the details behind there we have

343
00:15:15,149 --> 00:15:16,829
some adversary against the encryption

344
00:15:16,829 --> 00:15:19,380
protocol we build adversaries against

345
00:15:19,380 --> 00:15:23,459
the underlying components and can obtain

346
00:15:23,459 --> 00:15:27,740
this shown relationship

347
00:15:27,740 --> 00:15:31,370
bandages okay

348
00:15:31,370 --> 00:15:33,590
so now that we know how to do that

349
00:15:33,590 --> 00:15:35,180
generic compilation we just have to

350
00:15:35,180 --> 00:15:37,040
worry about how you build a tricky

351
00:15:37,040 --> 00:15:39,920
exchange the kind of three components

352
00:15:39,920 --> 00:15:41,630
that we use in the protocol will be a

353
00:15:41,630 --> 00:15:44,030
kind of diffie-hellman group G hash

354
00:15:44,030 --> 00:15:46,460
function H and a message authentication

355
00:15:46,460 --> 00:15:50,530
code F the initial key generation

356
00:15:50,530 --> 00:15:54,890
algorithm is going to just pick some

357
00:15:54,890 --> 00:15:57,740
random symmetric key k zero picks a

358
00:15:57,740 --> 00:16:00,590
random Mac key to give to both parties

359
00:16:00,590 --> 00:16:03,410
and initializes a counter to zero and

360
00:16:03,410 --> 00:16:06,260
then it also picks a random group

361
00:16:06,260 --> 00:16:10,250
element G and for the static key of the

362
00:16:10,250 --> 00:16:13,940
receiver it picks a secret exponent and

363
00:16:13,940 --> 00:16:17,660
it gives the corresponding public value

364
00:16:17,660 --> 00:16:22,280
as the static key for the sender then

365
00:16:22,280 --> 00:16:24,440
every time we want to perform a ratchet

366
00:16:24,440 --> 00:16:29,660
the sender will create its own secret

367
00:16:29,660 --> 00:16:33,140
exponent which it then creates the

368
00:16:33,140 --> 00:16:35,720
public value of to send to the receiver

369
00:16:35,720 --> 00:16:39,680
to authenticate this it uses that it

370
00:16:39,680 --> 00:16:41,810
uses the Mac to authenticate the value

371
00:16:41,810 --> 00:16:45,140
and then we apply the hash function to

372
00:16:45,140 --> 00:16:48,020
the counter the tag the value we're

373
00:16:48,020 --> 00:16:51,980
sending over and this part kind of the

374
00:16:51,980 --> 00:16:54,680
magic sauce of what we're hoping is hard

375
00:16:54,680 --> 00:16:58,190
for an adversary to guess hash them all

376
00:16:58,190 --> 00:17:00,200
together to get both the next symmetric

377
00:17:00,200 --> 00:17:04,160
key and the next key for our hash

378
00:17:04,160 --> 00:17:07,310
function the receiver then given this

379
00:17:07,310 --> 00:17:09,650
update information simply checks that

380
00:17:09,650 --> 00:17:11,869
the tag is correct and assuming it is

381
00:17:11,869 --> 00:17:15,980
can obtain the same shared keys using

382
00:17:15,980 --> 00:17:20,300
the hash function again in our paper we

383
00:17:20,300 --> 00:17:22,400
gave a tax on a number of variants of

384
00:17:22,400 --> 00:17:24,609
this protocol as I've described it

385
00:17:24,609 --> 00:17:28,040
motivation here it both kind of shows

386
00:17:28,040 --> 00:17:31,580
where the various parts of the while

387
00:17:31,580 --> 00:17:33,080
various parts of our protocol were

388
00:17:33,080 --> 00:17:35,150
needed and it also helps to kind of

389
00:17:35,150 --> 00:17:37,580
elucidate what attacks are actually

390
00:17:37,580 --> 00:17:40,090
being disallowed when we show that we

391
00:17:40,090 --> 00:17:41,510
achieved

392
00:17:41,510 --> 00:17:45,260
curity first we look at various

393
00:17:45,260 --> 00:17:47,059
situations where we don't use the Mac

394
00:17:47,059 --> 00:17:51,290
and try to be secure anyway the ultimate

395
00:17:51,290 --> 00:17:52,700
result there is we have this generic

396
00:17:52,700 --> 00:17:55,520
attack showing that any scheme without

397
00:17:55,520 --> 00:17:57,710
some form of authenticity can

398
00:17:57,710 --> 00:18:02,210
necessarily be attacked we also look at

399
00:18:02,210 --> 00:18:04,160
soca what we call key we use and key

400
00:18:04,160 --> 00:18:06,290
collision attacks which are attacks

401
00:18:06,290 --> 00:18:08,030
where an adversary tries to kind of

402
00:18:08,030 --> 00:18:11,270
reuse the secret information across

403
00:18:11,270 --> 00:18:14,090
different rounds so that the receiver

404
00:18:14,090 --> 00:18:22,270
will repeat keys and security ok quickly

405
00:18:22,270 --> 00:18:25,150
mention how we prove to our security

406
00:18:25,150 --> 00:18:28,280
this the security is proven assuming

407
00:18:28,280 --> 00:18:30,679
that the groupie and hash function the

408
00:18:30,679 --> 00:18:35,090
subset ODH is hard and that the Mac is

409
00:18:35,090 --> 00:18:37,280
unforgeable under chosen message attack

410
00:18:37,280 --> 00:18:40,520
o th e is or code diffie-hellman with

411
00:18:40,520 --> 00:18:42,770
exposures I will discuss that in a

412
00:18:42,770 --> 00:18:44,350
moment

413
00:18:44,350 --> 00:18:47,049
again we prove it with the production

414
00:18:47,049 --> 00:18:49,460
given an adversary D against the key

415
00:18:49,460 --> 00:18:51,830
exchange protocol we build adversaries

416
00:18:51,830 --> 00:18:53,720
against the underlying group in hash

417
00:18:53,720 --> 00:18:56,090
function and the Mac giving the father

418
00:18:56,090 --> 00:19:00,710
that advantage bound very quickly sketch

419
00:19:00,710 --> 00:19:03,350
the proof sketch the proof required

420
00:19:03,350 --> 00:19:06,350
really a quite a careful eye for detail

421
00:19:06,350 --> 00:19:08,690
because the very subtle reasons kind of

422
00:19:08,690 --> 00:19:11,179
yeah the first thing is you would want

423
00:19:11,179 --> 00:19:12,919
to do to prove it secure don't quite

424
00:19:12,919 --> 00:19:15,460
work anyway the first step of the proof

425
00:19:15,460 --> 00:19:18,140
involved a hybrid argument in which we

426
00:19:18,140 --> 00:19:20,120
argue that the adversary won't be able

427
00:19:20,120 --> 00:19:21,950
to forge update information without

428
00:19:21,950 --> 00:19:24,860
having exposed and how this works is we

429
00:19:24,860 --> 00:19:26,540
first have to preemptively switch the

430
00:19:26,540 --> 00:19:29,299
Mac keys to be to look like random so

431
00:19:29,299 --> 00:19:30,740
that we can argue forgeries won't happen

432
00:19:30,740 --> 00:19:32,480
but then when you have to switch them

433
00:19:32,480 --> 00:19:35,390
back to no longer be random in case the

434
00:19:35,390 --> 00:19:39,740
adversary exposes then having done this

435
00:19:39,740 --> 00:19:43,400
we can in kind of one fell swoop switch

436
00:19:43,400 --> 00:19:48,000
all of the non exposed keys to random

437
00:19:48,000 --> 00:19:51,180
now let me just finish by saying what

438
00:19:51,180 --> 00:19:52,500
this orchid diffie-hellman with

439
00:19:52,500 --> 00:19:57,440
exposures thing was it's a multi query

440
00:19:57,440 --> 00:20:00,810
variant with exposures of the orchid

441
00:20:00,810 --> 00:20:02,250
diffie-hellman assumption originally

442
00:20:02,250 --> 00:20:04,170
introduced by Abdullah Volare and raga

443
00:20:04,170 --> 00:20:09,030
way it's closely related to the PRF odh

444
00:20:09,030 --> 00:20:10,080
which we will be hearing about

445
00:20:10,080 --> 00:20:13,650
momentarily in kind of our model here

446
00:20:13,650 --> 00:20:17,010
there's a fixed value G to the Y and the

447
00:20:17,010 --> 00:20:19,620
adversary can ask as many for as many

448
00:20:19,620 --> 00:20:21,570
values G to the X to be created as it

449
00:20:21,570 --> 00:20:25,590
wants the adversary as many times as it

450
00:20:25,590 --> 00:20:28,050
wants can ask for the underlying X

451
00:20:28,050 --> 00:20:30,300
values to be exposed from any of these G

452
00:20:30,300 --> 00:20:33,660
to the X's it has all come access to a

453
00:20:33,660 --> 00:20:36,060
hash function with that secret value Y

454
00:20:36,060 --> 00:20:39,030
kind of embedded into it and then the

455
00:20:39,030 --> 00:20:41,610
goal of the adversary is to distinguish

456
00:20:41,610 --> 00:20:43,530
between the output of the hash function

457
00:20:43,530 --> 00:20:47,220
and randomness assuming that it hasn't

458
00:20:47,220 --> 00:20:53,490
exposed that X as with the other two

459
00:20:53,490 --> 00:20:55,110
definitions because of these exposures

460
00:20:55,110 --> 00:20:57,720
their various subtleties about trivial

461
00:20:57,720 --> 00:21:01,830
attacks we have to perfect and well we

462
00:21:01,830 --> 00:21:08,970
address those and quickly as elavil

463
00:21:08,970 --> 00:21:10,350
arirang we did in the original work

464
00:21:10,350 --> 00:21:12,360
we're able to show that this Orko

465
00:21:12,360 --> 00:21:14,520
diffie-hellman with exposures can be

466
00:21:14,520 --> 00:21:16,560
reduced to the strong computational

467
00:21:16,560 --> 00:21:18,030
diffie-hellman assumption in the random

468
00:21:18,030 --> 00:21:21,000
Oracle model we in fact do this twice in

469
00:21:21,000 --> 00:21:23,190
our paper first we do it with kind of

470
00:21:23,190 --> 00:21:25,320
the first proof one would think of doing

471
00:21:25,320 --> 00:21:27,480
a straight forward index guessing sort

472
00:21:27,480 --> 00:21:30,480
of proof but then we because there's

473
00:21:30,480 --> 00:21:32,910
some inherent non tightness in that

474
00:21:32,910 --> 00:21:35,640
proof technique we redo the reduction

475
00:21:35,640 --> 00:21:37,650
using a more cleverly winding argument

476
00:21:37,650 --> 00:21:39,920
so that we can obtain a tighter bound

477
00:21:39,920 --> 00:21:44,800
security thanks Melissa

478
00:21:44,800 --> 00:21:46,860
you

