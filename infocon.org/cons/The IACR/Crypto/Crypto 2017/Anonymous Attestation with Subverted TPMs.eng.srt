1
00:00:04,920 --> 00:00:07,450
so in this session I'll present our work

2
00:00:07,450 --> 00:00:09,460
on anonymous attestation with subverted

3
00:00:09,460 --> 00:00:10,990
CPMs which is joint effort with young

4
00:00:10,990 --> 00:00:15,910
combination onion laymen so if you if

5
00:00:15,910 --> 00:00:17,320
you look at a computer nowadays and

6
00:00:17,320 --> 00:00:19,599
typically it has a TPM embedded in it a

7
00:00:19,599 --> 00:00:23,980
trusted platform module this is a tamper

8
00:00:23,980 --> 00:00:27,420
resistant piece of hardware designed to

9
00:00:27,420 --> 00:00:29,949
create secure cryptographic keys and

10
00:00:29,949 --> 00:00:32,470
store them in a secure manner and use

11
00:00:32,470 --> 00:00:34,629
them in a secure manner and what it can

12
00:00:34,629 --> 00:00:38,200
also do is it can observe the state of

13
00:00:38,200 --> 00:00:40,510
the host system so the laptop in which

14
00:00:40,510 --> 00:00:44,620
the TPM is embedded and an example of

15
00:00:44,620 --> 00:00:47,200
this is if if the laptop starts up

16
00:00:47,200 --> 00:00:49,239
during the boot sequence then the TPM

17
00:00:49,239 --> 00:00:50,739
can observe which software is being

18
00:00:50,739 --> 00:00:53,950
loaded onto the TPM to end up with sort

19
00:00:53,950 --> 00:00:57,430
of a report of which software the the

20
00:00:57,430 --> 00:00:59,920
laptop started and now it might be

21
00:00:59,920 --> 00:01:01,420
interesting to perform remote at the

22
00:01:01,420 --> 00:01:03,879
station using this so the TPM will

23
00:01:03,879 --> 00:01:06,910
convince a remote verifier that the the

24
00:01:06,910 --> 00:01:09,940
laptop started some certain good

25
00:01:09,940 --> 00:01:11,619
software so it's not running more where

26
00:01:11,619 --> 00:01:13,390
but it's running whatever we expect it's

27
00:01:13,390 --> 00:01:16,179
running for example if we look at a

28
00:01:16,179 --> 00:01:18,310
corporate network you might want to let

29
00:01:18,310 --> 00:01:19,990
laptops first attest that they're

30
00:01:19,990 --> 00:01:21,970
running secure software before you let

31
00:01:21,970 --> 00:01:24,280
them onto the network so this process is

32
00:01:24,280 --> 00:01:26,020
called remote attestation and typically

33
00:01:26,020 --> 00:01:29,649
this is a two-phase process first we

34
00:01:29,649 --> 00:01:32,979
need to do some some registration step

35
00:01:32,979 --> 00:01:36,250
the join phase in which the the platform

36
00:01:36,250 --> 00:01:39,819
so the host and the TPM together talk to

37
00:01:39,819 --> 00:01:41,860
some issuer that this is some Authority

38
00:01:41,860 --> 00:01:44,979
in the system to obtain some one-time

39
00:01:44,979 --> 00:01:47,170
setup it obtains some membership

40
00:01:47,170 --> 00:01:51,099
credential after that the platform can

41
00:01:51,099 --> 00:01:53,380
sign attestation so it can give a

42
00:01:53,380 --> 00:01:55,840
verifier some some cryptographic proof

43
00:01:55,840 --> 00:01:59,259
that that some TPM measurement is is

44
00:01:59,259 --> 00:02:01,780
correct so in our example of the secure

45
00:02:01,780 --> 00:02:04,000
boot sequence the TPM can convince a

46
00:02:04,000 --> 00:02:06,489
remote verifier that the laptop started

47
00:02:06,489 --> 00:02:09,669
the correct software so we can do this

48
00:02:09,669 --> 00:02:11,709
with standard signatures in standard x5

49
00:02:11,709 --> 00:02:13,450
and on credentials but then there will

50
00:02:13,450 --> 00:02:15,219
be one problem and that is that your

51
00:02:15,219 --> 00:02:18,730
linkable so whenever

52
00:02:18,730 --> 00:02:20,980
send such an attestation to to a

53
00:02:20,980 --> 00:02:23,830
verifier he will see the TPM identity

54
00:02:23,830 --> 00:02:25,540
and it's you can you can follow you

55
00:02:25,540 --> 00:02:27,340
around so if you if you do these at the

56
00:02:27,340 --> 00:02:30,160
stations too many different verifiers

57
00:02:30,160 --> 00:02:34,510
then your privacy will be lost so to to

58
00:02:34,510 --> 00:02:36,370
prevent this people came up with direct

59
00:02:36,370 --> 00:02:39,670
anonymous at the station or DAA and this

60
00:02:39,670 --> 00:02:40,930
works the same as a remote at the

61
00:02:40,930 --> 00:02:43,060
station that I described earlier but now

62
00:02:43,060 --> 00:02:45,190
the other stations are anonymous so they

63
00:02:45,190 --> 00:02:46,209
don't reveal anything about the

64
00:02:46,209 --> 00:02:50,319
platforming question so this direct ones

65
00:02:50,319 --> 00:02:52,569
at the station was introduced in 2004 by

66
00:02:52,569 --> 00:02:55,569
breakout combination Chen and that was

67
00:02:55,569 --> 00:02:59,110
made for the TPM 1.2 standard so and

68
00:02:59,110 --> 00:03:00,400
during the time there was also some

69
00:03:00,400 --> 00:03:05,140
privacy concerns about about the effect

70
00:03:05,140 --> 00:03:06,700
of putting some some chip in your

71
00:03:06,700 --> 00:03:08,319
computer that can can see what you're

72
00:03:08,319 --> 00:03:11,200
doing so to address those concerns daa

73
00:03:11,200 --> 00:03:13,000
was also introduced and included in that

74
00:03:13,000 --> 00:03:16,209
standard then later the TPM 2.0 standard

75
00:03:16,209 --> 00:03:18,730
came around and that's included support

76
00:03:18,730 --> 00:03:19,870
for different and almost attestation

77
00:03:19,870 --> 00:03:22,450
schemes but it still supported this and

78
00:03:22,450 --> 00:03:25,630
since then this has been standardized by

79
00:03:25,630 --> 00:03:28,359
ISO and hundreds and millions of TPMS

80
00:03:28,359 --> 00:03:30,220
have been sold so this is quite a large

81
00:03:30,220 --> 00:03:32,549
deployment of a cryptographic scheme and

82
00:03:32,549 --> 00:03:34,950
there's also interest from other angles

83
00:03:34,950 --> 00:03:37,720
for example the phyto Alliance this is

84
00:03:37,720 --> 00:03:39,519
an industry Alliance that's trying to

85
00:03:39,519 --> 00:03:41,620
standardize password list authentication

86
00:03:41,620 --> 00:03:45,310
and they use amongst attestation to

87
00:03:45,310 --> 00:03:47,350
attach that a certain cryptographic key

88
00:03:47,350 --> 00:03:50,319
is securely stored and also Intel SGX

89
00:03:50,319 --> 00:03:52,810
their trusted execution environment is

90
00:03:52,810 --> 00:03:58,780
using a variation on da - as the remote

91
00:03:58,780 --> 00:04:01,450
attestation mechanism and finally you

92
00:04:01,450 --> 00:04:03,760
can see DAA as a special form of

93
00:04:03,760 --> 00:04:05,440
anonymous credentials where you have a

94
00:04:05,440 --> 00:04:08,769
secure device that handles your key so

95
00:04:08,769 --> 00:04:10,470
this is relevant for for many different

96
00:04:10,470 --> 00:04:14,350
different areas so let's look at the

97
00:04:14,350 --> 00:04:16,570
security of da this is a sort of

98
00:04:16,570 --> 00:04:18,010
signature scheme so of course we need a

99
00:04:18,010 --> 00:04:20,858
form of unforgeable ax t and in

100
00:04:20,858 --> 00:04:24,580
particular we we consider a corrupt host

101
00:04:24,580 --> 00:04:27,099
so a corrupt laptop that can talk to a

102
00:04:27,099 --> 00:04:29,780
to an honest TPM and batted in

103
00:04:29,780 --> 00:04:33,560
and it can make many other stations or

104
00:04:33,560 --> 00:04:35,540
messages and then we want to prevent it

105
00:04:35,540 --> 00:04:37,130
from coming up by itself

106
00:04:37,130 --> 00:04:38,990
on an attestation of a new message which

107
00:04:38,990 --> 00:04:41,450
TPM never approved so in our example

108
00:04:41,450 --> 00:04:44,030
about trusted boot this means that if we

109
00:04:44,030 --> 00:04:45,950
have a corrupt laptop running the wrong

110
00:04:45,950 --> 00:04:47,660
software it cannot come up with an

111
00:04:47,660 --> 00:04:48,920
attestation that it's in fact running

112
00:04:48,920 --> 00:04:52,430
the right software and second we need

113
00:04:52,430 --> 00:04:54,650
anonymity this is why we why we're using

114
00:04:54,650 --> 00:04:58,460
da and the anonymity requirement that we

115
00:04:58,460 --> 00:05:01,570
have is that the verifier cannot see

116
00:05:01,570 --> 00:05:03,950
given an attestation does not know to

117
00:05:03,950 --> 00:05:06,440
whom it belongs or more precisely if you

118
00:05:06,440 --> 00:05:08,270
give it to different data stations it

119
00:05:08,270 --> 00:05:09,680
cannot even tell if it's from the same

120
00:05:09,680 --> 00:05:11,180
platform or from two different platforms

121
00:05:11,180 --> 00:05:14,870
and in this this we want this property

122
00:05:14,870 --> 00:05:17,360
to hold even if the issuer so this this

123
00:05:17,360 --> 00:05:19,880
this Authority and the scheme is corrupt

124
00:05:19,880 --> 00:05:22,390
so even if he tries to give us bad

125
00:05:22,390 --> 00:05:24,770
credentials and is colluding with the

126
00:05:24,770 --> 00:05:26,570
verifier even then we want to anonymity

127
00:05:26,570 --> 00:05:30,110
to hold so that's very good but there's

128
00:05:30,110 --> 00:05:32,750
one surprising thing here and that is

129
00:05:32,750 --> 00:05:34,580
that in this in the in all the

130
00:05:34,580 --> 00:05:37,670
definitions of anonymity we trust the

131
00:05:37,670 --> 00:05:39,770
TPM we trust that the TPM follows the

132
00:05:39,770 --> 00:05:42,440
protocol and this is this is not what

133
00:05:42,440 --> 00:05:44,000
you would expect because one of the

134
00:05:44,000 --> 00:05:46,610
reasons to introduce da was to address

135
00:05:46,610 --> 00:05:48,860
the privacy concerns of some chip people

136
00:05:48,860 --> 00:05:51,500
don't trust this chip and but now the

137
00:05:51,500 --> 00:05:54,080
notion of privacy requires us to trust

138
00:05:54,080 --> 00:05:58,820
that chip in the first place and and in

139
00:05:58,820 --> 00:06:01,250
fact also recent revelations have shown

140
00:06:01,250 --> 00:06:03,620
that it's very naive to trust that some

141
00:06:03,620 --> 00:06:05,810
piece of hardware running some crypto to

142
00:06:05,810 --> 00:06:07,730
trust that for your privacy this is

143
00:06:07,730 --> 00:06:09,470
quite naive and it's not what you would

144
00:06:09,470 --> 00:06:13,460
expect from a security definition and so

145
00:06:13,460 --> 00:06:15,260
in in in different fields in

146
00:06:15,260 --> 00:06:17,090
cryptography people looked at sort of

147
00:06:17,090 --> 00:06:19,880
subversion resilience or what what what

148
00:06:19,880 --> 00:06:21,680
security can I have if if I run the

149
00:06:21,680 --> 00:06:23,750
wrong algorithms and we want to do

150
00:06:23,750 --> 00:06:25,490
something here in the same in the same

151
00:06:25,490 --> 00:06:28,970
direction so so in this talk we're going

152
00:06:28,970 --> 00:06:31,250
to look at can we do anonymous

153
00:06:31,250 --> 00:06:33,440
attestation where we have privacy even

154
00:06:33,440 --> 00:06:36,140
if the TPM is corrupt or even if the TPM

155
00:06:36,140 --> 00:06:39,520
is not following protocol

156
00:06:40,400 --> 00:06:42,840
so let's look at the existing security

157
00:06:42,840 --> 00:06:45,749
definition of the a the most recent

158
00:06:45,749 --> 00:06:48,300
definition is in the UC framework so

159
00:06:48,300 --> 00:06:51,270
it's an ideal functionality and I'll

160
00:06:51,270 --> 00:06:52,949
show you how sining works and how it

161
00:06:52,949 --> 00:06:57,449
guarantees anonymity so the host starts

162
00:06:57,449 --> 00:06:59,759
to sign a message so he gives the ideal

163
00:06:59,759 --> 00:07:01,620
functionality the instruction that he

164
00:07:01,620 --> 00:07:04,860
wants to sign a message and then the TPM

165
00:07:04,860 --> 00:07:06,900
must approve the message and if the TPM

166
00:07:06,900 --> 00:07:08,999
approves then the functionality will

167
00:07:08,999 --> 00:07:11,849
perform some checks first it sees

168
00:07:11,849 --> 00:07:13,979
whether this platform has has performed

169
00:07:13,979 --> 00:07:16,560
the registration steps that that I

170
00:07:16,560 --> 00:07:18,810
talked about earlier and then it will

171
00:07:18,810 --> 00:07:23,430
output a signature and if the TPM is

172
00:07:23,430 --> 00:07:25,110
honest it needs to output an anonymous

173
00:07:25,110 --> 00:07:26,610
signature because this is how we defined

174
00:07:26,610 --> 00:07:29,669
anonymity here and to make an anonymous

175
00:07:29,669 --> 00:07:32,279
signature we use local computation in

176
00:07:32,279 --> 00:07:33,810
the functionality so the functionality

177
00:07:33,810 --> 00:07:36,810
has some algorithms and batted in it to

178
00:07:36,810 --> 00:07:38,339
compute something that looks like a

179
00:07:38,339 --> 00:07:42,449
signature and now how we guarantee that

180
00:07:42,449 --> 00:07:43,800
what the signature that we output is

181
00:07:43,800 --> 00:07:47,370
anonymous is by only giving the message

182
00:07:47,370 --> 00:07:50,039
to the algorithm we don't give anything

183
00:07:50,039 --> 00:07:51,750
that depends on the identity of the

184
00:07:51,750 --> 00:07:53,759
platform to this algorithm and that

185
00:07:53,759 --> 00:07:56,669
means that the resulting value cannot

186
00:07:56,669 --> 00:07:59,039
depend on the identity of the platform

187
00:07:59,039 --> 00:08:01,370
so that means the signature will be

188
00:08:01,370 --> 00:08:04,229
distributed equally for regardless of

189
00:08:04,229 --> 00:08:06,449
who is signing at this point and that

190
00:08:06,449 --> 00:08:10,229
guarantees anonymity and of course a

191
00:08:10,229 --> 00:08:12,330
verifier can use it and can use the

192
00:08:12,330 --> 00:08:13,740
functionality to verify and that's where

193
00:08:13,740 --> 00:08:15,449
we guarantee and forge ability but I

194
00:08:15,449 --> 00:08:18,689
won't go into detail there okay so this

195
00:08:18,689 --> 00:08:20,180
this is the existing existing

196
00:08:20,180 --> 00:08:22,409
functionality so this guarantees an

197
00:08:22,409 --> 00:08:24,839
anonymous signature if the TPM is almost

198
00:08:24,839 --> 00:08:27,899
now we want to strengthen this to come

199
00:08:27,899 --> 00:08:30,300
up with a functionality that also

200
00:08:30,300 --> 00:08:33,360
guarantees is when a TPM is corrupt so

201
00:08:33,360 --> 00:08:37,198
on first the first good guess is - we

202
00:08:37,198 --> 00:08:38,610
had this check that we only output an

203
00:08:38,610 --> 00:08:40,169
anonymous signature if a TPM is honest

204
00:08:40,169 --> 00:08:42,568
now we're gonna do that even if the TPM

205
00:08:42,568 --> 00:08:46,019
is corrupt but this is not enough yet

206
00:08:46,019 --> 00:08:47,760
because if we consider the security

207
00:08:47,760 --> 00:08:49,589
model that we're that we're trying to

208
00:08:49,589 --> 00:08:51,510
achieve that means that everybody is

209
00:08:51,510 --> 00:08:53,190
corrupt except the host

210
00:08:53,190 --> 00:08:55,860
pewter and our corruptions are typically

211
00:08:55,860 --> 00:08:57,720
modeled in a way that if a party is

212
00:08:57,720 --> 00:09:00,240
corrupt that means that the adversary

213
00:09:00,240 --> 00:09:02,460
one central adversary controls all the

214
00:09:02,460 --> 00:09:05,550
corrupt parties and you see on the left

215
00:09:05,550 --> 00:09:09,390
that that that the adversary who is who

216
00:09:09,390 --> 00:09:12,030
has corrupted TPM C's with which message

217
00:09:12,030 --> 00:09:14,250
a certain TPM is signing so it knows

218
00:09:14,250 --> 00:09:16,140
exactly which messages the TPM has

219
00:09:16,140 --> 00:09:18,720
signed and now if that if that message

220
00:09:18,720 --> 00:09:20,310
if if we're not all signing the same

221
00:09:20,310 --> 00:09:21,780
message but if the message is somewhat

222
00:09:21,780 --> 00:09:24,570
unique then of course if the verifier if

223
00:09:24,570 --> 00:09:25,710
a corrupt very fired and sees a

224
00:09:25,710 --> 00:09:27,270
signature on that message it knows that

225
00:09:27,270 --> 00:09:29,940
it was me so we don't have privacy

226
00:09:29,940 --> 00:09:31,770
unless we're all signing the same

227
00:09:31,770 --> 00:09:37,380
message so we could we could try to

228
00:09:37,380 --> 00:09:39,470
prevent the adversary so we could

229
00:09:39,470 --> 00:09:41,610
prevent the a valeri from seeing which

230
00:09:41,610 --> 00:09:43,860
messages the TPM is signing by not

231
00:09:43,860 --> 00:09:45,420
giving the message to the to that to the

232
00:09:45,420 --> 00:09:47,280
TPM but this prevents us from having a

233
00:09:47,280 --> 00:09:49,020
meaningful definition of unfor ability

234
00:09:49,020 --> 00:09:50,010
because rumor

235
00:09:50,010 --> 00:09:51,780
remember in in forage ability we need

236
00:09:51,780 --> 00:09:53,370
the TPM to approve the signing of

237
00:09:53,370 --> 00:09:56,340
messages so this does not work and we

238
00:09:56,340 --> 00:09:58,200
cannot we cannot realize a meaningful

239
00:09:58,200 --> 00:10:02,430
definition of privacy here but in fact

240
00:10:02,430 --> 00:10:03,840
the corruption that we're modeling here

241
00:10:03,840 --> 00:10:07,140
is very strong here we model a TPM which

242
00:10:07,140 --> 00:10:10,560
is controlled by central APIs Airy

243
00:10:10,560 --> 00:10:13,230
however in the attack that we more

244
00:10:13,230 --> 00:10:15,420
envision is that a TPM is running bad

245
00:10:15,420 --> 00:10:18,510
algorithms or taking bad randomness but

246
00:10:18,510 --> 00:10:20,220
that is still a local piece of hardware

247
00:10:20,220 --> 00:10:24,270
in my laptop so we need to refine our

248
00:10:24,270 --> 00:10:27,270
corruption model so now we put the

249
00:10:27,270 --> 00:10:29,970
adversary in the TPM in a jail cell we

250
00:10:29,970 --> 00:10:33,900
limit his capabilities here the UC

251
00:10:33,900 --> 00:10:36,800
framework allows us to define

252
00:10:36,800 --> 00:10:38,960
fine-grained

253
00:10:38,960 --> 00:10:41,640
corruption models and what we do here is

254
00:10:41,640 --> 00:10:43,200
that we say that the adversary can

255
00:10:43,200 --> 00:10:45,900
define bad behavior for the TPM but it's

256
00:10:45,900 --> 00:10:48,089
limited to two that it's not controlled

257
00:10:48,089 --> 00:10:51,870
by one central adversary we can do this

258
00:10:51,870 --> 00:10:54,330
using this body shell paradigm that they

259
00:10:54,330 --> 00:10:58,470
use and this way the TPM even though it

260
00:10:58,470 --> 00:10:59,850
approves messages and can have bad

261
00:10:59,850 --> 00:11:02,730
influence there it is not controlled by

262
00:11:02,730 --> 00:11:04,320
the central adversary so the central

263
00:11:04,320 --> 00:11:05,830
adversary does not see every match

264
00:11:05,830 --> 00:11:08,860
that we're signing and we think this is

265
00:11:08,860 --> 00:11:10,990
optimal privacy this is the strongest

266
00:11:10,990 --> 00:11:14,560
privacy more that we could hope for so

267
00:11:14,560 --> 00:11:16,810
we want to achieve this level of privacy

268
00:11:16,810 --> 00:11:19,210
and in the real world we were then in

269
00:11:19,210 --> 00:11:21,490
the same situation so the TPM is a local

270
00:11:21,490 --> 00:11:24,490
corrupt algorithm in my computer but

271
00:11:24,490 --> 00:11:25,750
it's not controlled by the central at

272
00:11:25,750 --> 00:11:27,730
Missouri where the verifier and the

273
00:11:27,730 --> 00:11:33,040
issue are still colluding and corrupt so

274
00:11:33,040 --> 00:11:34,540
this is our this is our new security

275
00:11:34,540 --> 00:11:36,430
model that we want to achieve now we

276
00:11:36,430 --> 00:11:37,990
have to look at how we can achieve this

277
00:11:37,990 --> 00:11:41,500
using protocols so first let's look at

278
00:11:41,500 --> 00:11:43,470
existing protocols and how far we are

279
00:11:43,470 --> 00:11:46,930
and all existing protocols use the same

280
00:11:46,930 --> 00:11:50,890
the same approach of you use the same

281
00:11:50,890 --> 00:11:53,710
common approach that is that the TPM

282
00:11:53,710 --> 00:11:55,450
holds a secret key this is the only key

283
00:11:55,450 --> 00:11:58,120
that the platform has and during this

284
00:11:58,120 --> 00:12:00,870
this setup phase during the join phase

285
00:12:00,870 --> 00:12:03,310
they authenticate to the issuer and the

286
00:12:03,310 --> 00:12:06,310
issuer places a signature on a

287
00:12:06,310 --> 00:12:08,410
commitment to the TPM key this is called

288
00:12:08,410 --> 00:12:13,150
the membership credential after that we

289
00:12:13,150 --> 00:12:15,400
can make such at the stations and at the

290
00:12:15,400 --> 00:12:16,860
station is a zero knowledge proof

291
00:12:16,860 --> 00:12:19,600
proving that a message was signed with a

292
00:12:19,600 --> 00:12:23,820
TPM key that is certified by the issuer

293
00:12:24,960 --> 00:12:28,720
so this is what all all existing schemes

294
00:12:28,720 --> 00:12:31,210
follow and the differences are in which

295
00:12:31,210 --> 00:12:32,590
signature scheme you use to make such a

296
00:12:32,590 --> 00:12:34,690
credential or how you instantiate the

297
00:12:34,690 --> 00:12:36,070
zero knowledge proof but other than that

298
00:12:36,070 --> 00:12:37,900
they're all the same and unfortunately

299
00:12:37,900 --> 00:12:39,760
none of them are good enough to realize

300
00:12:39,760 --> 00:12:43,120
our notion of privacy for two reasons

301
00:12:43,120 --> 00:12:46,090
actually the first reason is that this

302
00:12:46,090 --> 00:12:47,680
zero knowledge proof that is the

303
00:12:47,680 --> 00:12:50,860
attestation is a statement about the TPM

304
00:12:50,860 --> 00:12:55,150
secret key meaning that the TPM and host

305
00:12:55,150 --> 00:12:56,830
must together make a zero knowledge

306
00:12:56,830 --> 00:12:58,720
proof the host cannot do it by himself

307
00:12:58,720 --> 00:13:00,160
because he doesn't know this key and

308
00:13:00,160 --> 00:13:02,940
that means that if we have a corrupt TPM

309
00:13:02,940 --> 00:13:05,410
he might give some malicious

310
00:13:05,410 --> 00:13:07,260
contribution to the zero knowledge proof

311
00:13:07,260 --> 00:13:09,490
rendering the holder launch proof no

312
00:13:09,490 --> 00:13:11,650
longer honestly generated so we cannot

313
00:13:11,650 --> 00:13:15,010
claim any zero knowledge about this

314
00:13:15,010 --> 00:13:19,110
proof and the second is that the

315
00:13:19,110 --> 00:13:21,360
all the key material is stored by the

316
00:13:21,360 --> 00:13:23,520
TPM and if the TPM is malicious that

317
00:13:23,520 --> 00:13:25,470
means that we have no good key material

318
00:13:25,470 --> 00:13:28,860
left and again that that means we cannot

319
00:13:28,860 --> 00:13:30,600
have the anonymity properties that we

320
00:13:30,600 --> 00:13:33,150
want to have so we come up with a new

321
00:13:33,150 --> 00:13:35,370
approach where we address exactly these

322
00:13:35,370 --> 00:13:38,700
two concerns so the first change is that

323
00:13:38,700 --> 00:13:41,190
we no longer only have a TPM secret key

324
00:13:41,190 --> 00:13:43,290
we also have a TPM corresponding public

325
00:13:43,290 --> 00:13:45,840
key and instead of signing the secret

326
00:13:45,840 --> 00:13:47,640
key in this membership credential we put

327
00:13:47,640 --> 00:13:49,890
the public key in there and that means

328
00:13:49,890 --> 00:13:51,360
that the zero knowledge statement that's

329
00:13:51,360 --> 00:13:53,180
that we prove which is the attestation

330
00:13:53,180 --> 00:13:56,340
is no longer a statement about the TPM

331
00:13:56,340 --> 00:13:57,000
secret key

332
00:13:57,000 --> 00:13:58,680
what about TPM public key and the host

333
00:13:58,680 --> 00:14:00,930
knows that so the host can create this

334
00:14:00,930 --> 00:14:02,850
full zero knowledge proof because the

335
00:14:02,850 --> 00:14:04,860
horse is honest we know that we actually

336
00:14:04,860 --> 00:14:06,540
have created a property or knowledge

337
00:14:06,540 --> 00:14:12,600
group the second change is that is that

338
00:14:12,600 --> 00:14:15,720
we split the key of the that we no

339
00:14:15,720 --> 00:14:17,910
longer only have a key of a TPM but we

340
00:14:17,910 --> 00:14:19,890
split that into two parts the host and

341
00:14:19,890 --> 00:14:22,830
the TPM together create the key that

342
00:14:22,830 --> 00:14:24,920
means that even if the TPM is malicious

343
00:14:24,920 --> 00:14:27,810
and creates a bad key the host adds

344
00:14:27,810 --> 00:14:30,360
enough good key to to come up with a

345
00:14:30,360 --> 00:14:32,580
with a proper key of the platform

346
00:14:32,580 --> 00:14:36,660
altogether so this this new approach we

347
00:14:36,660 --> 00:14:38,520
show that we can with this approach we

348
00:14:38,520 --> 00:14:41,880
show that we can realize the the level

349
00:14:41,880 --> 00:14:44,160
of privacy that we that we previously

350
00:14:44,160 --> 00:14:46,950
defined and I'll give you a bit more

351
00:14:46,950 --> 00:14:52,260
detail here so we specify three building

352
00:14:52,260 --> 00:14:55,500
blocks that we need to reflect the the

353
00:14:55,500 --> 00:14:58,170
picture I showed in previous slide and

354
00:14:58,170 --> 00:15:00,090
with those three building blocks if we

355
00:15:00,090 --> 00:15:02,700
give secure instantiations those give us

356
00:15:02,700 --> 00:15:06,780
a security a scheme the first thing is a

357
00:15:06,780 --> 00:15:10,010
split signature this is very similar to

358
00:15:10,010 --> 00:15:12,150
multi signatures or client-server

359
00:15:12,150 --> 00:15:14,580
signatures and allows the TPM and the

360
00:15:14,580 --> 00:15:17,780
host to to make a signature together

361
00:15:17,780 --> 00:15:22,260
with their individual key shares so this

362
00:15:22,260 --> 00:15:24,600
is similar to existing existing notions

363
00:15:24,600 --> 00:15:26,670
of multi signatures but we need some

364
00:15:26,670 --> 00:15:30,380
extra properties the first is that a

365
00:15:30,380 --> 00:15:32,250
signature should not reveal anything

366
00:15:32,250 --> 00:15:32,910
about the

367
00:15:32,910 --> 00:15:35,220
Anna Richards valid because that would

368
00:15:35,220 --> 00:15:36,780
destroy the privacy that we're looking

369
00:15:36,780 --> 00:15:39,120
for and the second is we need some

370
00:15:39,120 --> 00:15:41,970
uniqueness properties we need that the

371
00:15:41,970 --> 00:15:44,070
signature is unique for a certain key in

372
00:15:44,070 --> 00:15:48,720
a message and that given a signature

373
00:15:48,720 --> 00:15:51,210
only one key given a sinker and a

374
00:15:51,210 --> 00:15:52,590
message it can only be valid under one

375
00:15:52,590 --> 00:15:57,060
key and this uniqueness properties limit

376
00:15:57,060 --> 00:15:59,850
the way in in which an adversary can

377
00:15:59,850 --> 00:16:01,290
have malicious influence because there's

378
00:16:01,290 --> 00:16:03,330
not so many choices you can make this

379
00:16:03,330 --> 00:16:05,250
makes it easier to prove the anonymity

380
00:16:05,250 --> 00:16:08,250
that we want to have and in fact we can

381
00:16:08,250 --> 00:16:09,930
we present that we can that we can

382
00:16:09,930 --> 00:16:12,240
efficiently instantiate this based on

383
00:16:12,240 --> 00:16:16,740
pls signatures second we use signatures

384
00:16:16,740 --> 00:16:18,960
on encrypted messages to form the

385
00:16:18,960 --> 00:16:21,750
credential of this of the platform and

386
00:16:21,750 --> 00:16:23,700
here we present an efficient

387
00:16:23,700 --> 00:16:25,860
instantiation based on AGoT structure

388
00:16:25,860 --> 00:16:28,170
preserving signatures on al-jamal cipher

389
00:16:28,170 --> 00:16:31,470
texts and finally we need the zero

390
00:16:31,470 --> 00:16:33,000
knowledge proof or zero knowledge proof

391
00:16:33,000 --> 00:16:34,830
knowledge to glue everything together

392
00:16:34,830 --> 00:16:39,270
and one efficient instantiation is based

393
00:16:39,270 --> 00:16:41,610
on snore proofs possibly with the CRS

394
00:16:41,610 --> 00:16:45,240
trapdoor and so we showed that any

395
00:16:45,240 --> 00:16:47,040
secure initiation of these building

396
00:16:47,040 --> 00:16:48,240
blocks that fulfill the properties that

397
00:16:48,240 --> 00:16:51,270
we need yields the secure DEA protocol

398
00:16:51,270 --> 00:16:53,130
but if you use the efficient

399
00:16:53,130 --> 00:16:55,800
instantiation that we proposed then we

400
00:16:55,800 --> 00:16:56,970
actually get a very efficient

401
00:16:56,970 --> 00:17:00,510
impractical DEA protocol signing only

402
00:17:00,510 --> 00:17:02,490
takes nine exponentiations and ten

403
00:17:02,490 --> 00:17:05,160
pairings for the hosts which can run

404
00:17:05,160 --> 00:17:08,400
rerun in tens of milliseconds and more

405
00:17:08,400 --> 00:17:11,099
importantly the TPM only has to compute

406
00:17:11,099 --> 00:17:13,500
two exponentiation x' to make an

407
00:17:13,500 --> 00:17:16,349
attestation and of course here it's

408
00:17:16,349 --> 00:17:17,880
important to realize that the TPM is

409
00:17:17,880 --> 00:17:19,650
orders of magnitude slower than the host

410
00:17:19,650 --> 00:17:22,560
computer so you want to minimize the

411
00:17:22,560 --> 00:17:24,630
workload for a TPM and this will have

412
00:17:24,630 --> 00:17:26,069
the greatest influence on the efficiency

413
00:17:26,069 --> 00:17:29,010
of the daa scheme and actually this is

414
00:17:29,010 --> 00:17:32,730
the most efficient daa protocol in terms

415
00:17:32,730 --> 00:17:35,400
of the daa of the TPM signing operation

416
00:17:35,400 --> 00:17:37,080
that there is so far so that makes is

417
00:17:37,080 --> 00:17:39,960
actually very practical and verification

418
00:17:39,960 --> 00:17:42,150
only takes for exponentiation x' and 8

419
00:17:42,150 --> 00:17:46,179
bearings so that makes this this

420
00:17:46,179 --> 00:17:47,679
that shows that we can very efficiently

421
00:17:47,679 --> 00:17:54,190
do this so to wrap up we show that that

422
00:17:54,190 --> 00:17:55,749
the anonymity definitions that we have

423
00:17:55,749 --> 00:17:58,779
used over the last decade for DAA are

424
00:17:58,779 --> 00:18:02,350
not what we expected to be even though

425
00:18:02,350 --> 00:18:05,350
the point was to reduce trust in the TPM

426
00:18:05,350 --> 00:18:07,840
we actually still needed it to be to be

427
00:18:07,840 --> 00:18:10,330
honest for any anonymity and now we

428
00:18:10,330 --> 00:18:15,340
showed or now we define that we defined

429
00:18:15,340 --> 00:18:18,070
DAA with optimal privacy so we define

430
00:18:18,070 --> 00:18:20,289
the best privacy we can hope for in the

431
00:18:20,289 --> 00:18:23,200
form of AUC functionality and we show

432
00:18:23,200 --> 00:18:25,480
how to model such a subversion attack on

433
00:18:25,480 --> 00:18:31,210
a TPM in this framework then we define a

434
00:18:31,210 --> 00:18:35,499
new approach to DAA protocols because

435
00:18:35,499 --> 00:18:37,480
the existing schemes are not sufficient

436
00:18:37,480 --> 00:18:39,519
to realize this notion of privacy we

437
00:18:39,519 --> 00:18:42,220
define a new approach that we can use to

438
00:18:42,220 --> 00:18:45,309
realize this that we can really realize

439
00:18:45,309 --> 00:18:48,309
our audio functionality and we give a

440
00:18:48,309 --> 00:18:50,649
very efficient protocol that a very

441
00:18:50,649 --> 00:18:53,379
efficient concrete and sensation that

442
00:18:53,379 --> 00:18:56,139
can actually be used in practice with

443
00:18:56,139 --> 00:18:57,220
that I would like to thank you for your

444
00:18:57,220 --> 00:18:58,450
attention and I'm happy to take

445
00:18:58,450 --> 00:18:59,570
questions

446
00:18:59,570 --> 00:19:05,040
[Applause]

