1
00:00:04,860 --> 00:00:07,620
so since I'm going to talk about the

2
00:00:07,620 --> 00:00:09,150
role of memory and cryptographic

3
00:00:09,150 --> 00:00:11,010
reductions I will start with a short

4
00:00:11,010 --> 00:00:15,450
introduction to reductions so usually

5
00:00:15,450 --> 00:00:17,070
when we constructed some cryptographic

6
00:00:17,070 --> 00:00:19,320
scheme and we want to show that it is

7
00:00:19,320 --> 00:00:22,920
secure we use we rely on cryptographic

8
00:00:22,920 --> 00:00:26,640
reductions so suppose we have some hard

9
00:00:26,640 --> 00:00:29,789
problem P what we do is we show that

10
00:00:29,789 --> 00:00:31,980
given any adversary breaking the

11
00:00:31,980 --> 00:00:34,530
security of our scheme can be turned

12
00:00:34,530 --> 00:00:38,040
into an algorithm solving instances of

13
00:00:38,040 --> 00:00:41,940
our problem more precisely the algorithm

14
00:00:41,940 --> 00:00:43,920
we construct will run the adversary as a

15
00:00:43,920 --> 00:00:47,339
subroutine and answer potential Oracle

16
00:00:47,339 --> 00:00:49,309
queries of it and this in particularly

17
00:00:49,309 --> 00:00:51,780
implies that the running time of our

18
00:00:51,780 --> 00:00:53,489
reduction will be at least the running

19
00:00:53,489 --> 00:00:55,199
time of the adversary and the same holds

20
00:00:55,199 --> 00:00:59,040
for the memory consumption now the

21
00:00:59,040 --> 00:01:01,559
tightness of our reduction can be seen

22
00:01:01,559 --> 00:01:04,080
as some sort of measure of its quality

23
00:01:04,080 --> 00:01:06,180
what we usually do there is we compare

24
00:01:06,180 --> 00:01:10,650
the resources used by our algorithm to

25
00:01:10,650 --> 00:01:13,130
the resource resources used by the

26
00:01:13,130 --> 00:01:15,750
adversary it runs as a subroutine and

27
00:01:15,750 --> 00:01:18,390
what we usually compare they're both

28
00:01:18,390 --> 00:01:21,570
running time and success probability and

29
00:01:21,570 --> 00:01:24,390
if both time and success probability

30
00:01:24,390 --> 00:01:26,820
essentially stay the same we say that

31
00:01:26,820 --> 00:01:31,520
the reduction is tight now to see why

32
00:01:31,520 --> 00:01:34,440
the tightness of a reduction matters for

33
00:01:34,440 --> 00:01:36,180
giving concrete security guarantees we

34
00:01:36,180 --> 00:01:38,640
will look at the time success

35
00:01:38,640 --> 00:01:40,350
probability trade-off plot for our

36
00:01:40,350 --> 00:01:42,960
problem P which might for example it

37
00:01:42,960 --> 00:01:43,860
something like this

38
00:01:43,860 --> 00:01:46,230
so we see we have two axis indicating

39
00:01:46,230 --> 00:01:48,870
success probability and running time of

40
00:01:48,870 --> 00:01:52,200
our algorithm and the plot is divided

41
00:01:52,200 --> 00:01:54,360
into two areas label is unbroken and

42
00:01:54,360 --> 00:01:56,940
broken now if a point lies somewhere in

43
00:01:56,940 --> 00:01:59,190
the area labeled as unbroken this means

44
00:01:59,190 --> 00:02:02,040
that according to current cryptanalytic

45
00:02:02,040 --> 00:02:06,090
knowledge they exists no exist is no

46
00:02:06,090 --> 00:02:07,920
algorithm which is able to solve an

47
00:02:07,920 --> 00:02:09,239
instance of our problem in the

48
00:02:09,239 --> 00:02:11,299
corresponding time with at least the

49
00:02:11,299 --> 00:02:16,230
corresponding success probability okay

50
00:02:16,230 --> 00:02:18,750
so now suppose that we want our base

51
00:02:18,750 --> 00:02:21,690
we constructed to be secure against all

52
00:02:21,690 --> 00:02:23,970
adversaries satisfying some constraints

53
00:02:23,970 --> 00:02:26,630
on running time and success probability

54
00:02:26,630 --> 00:02:29,280
by our reduction we know that we can

55
00:02:29,280 --> 00:02:32,850
turn this adversity adversary' into an

56
00:02:32,850 --> 00:02:34,590
algorithm solving instances of our

57
00:02:34,590 --> 00:02:38,940
problem P however if the reductions non

58
00:02:38,940 --> 00:02:39,510
tight

59
00:02:39,510 --> 00:02:40,890
we might actually end up with an

60
00:02:40,890 --> 00:02:42,990
algorithm which runs in considerably

61
00:02:42,990 --> 00:02:46,230
higher time and also succeeds with less

62
00:02:46,230 --> 00:02:51,000
probability so in this example here we

63
00:02:51,000 --> 00:02:52,800
see that we actually ended up with an

64
00:02:52,800 --> 00:02:54,720
algorithm in the area for which our

65
00:02:54,720 --> 00:02:56,280
problem is known to be broken so we

66
00:02:56,280 --> 00:02:58,230
can't conclude anything on the security

67
00:02:58,230 --> 00:03:03,390
of our scheme however if our reduction

68
00:03:03,390 --> 00:03:05,160
was tight the situation would look

69
00:03:05,160 --> 00:03:08,220
different in this case we would see that

70
00:03:08,220 --> 00:03:09,900
given any adversary breaking the

71
00:03:09,900 --> 00:03:12,270
security of our scheme we would be able

72
00:03:12,270 --> 00:03:14,790
to construct an algorithm which

73
00:03:14,790 --> 00:03:17,250
outperforms all the currently best-known

74
00:03:17,250 --> 00:03:19,560
algorithms in solving our problem and

75
00:03:19,560 --> 00:03:22,800
this in this way we gain trust in the

76
00:03:22,800 --> 00:03:25,950
security of our scheme so as just

77
00:03:25,950 --> 00:03:28,350
discussed usually when talking about

78
00:03:28,350 --> 00:03:30,750
tightness we only consider running time

79
00:03:30,750 --> 00:03:33,690
and success probability however if we if

80
00:03:33,690 --> 00:03:35,880
one talks to cryptanalysis they will

81
00:03:35,880 --> 00:03:38,100
probably tell you that actually memory

82
00:03:38,100 --> 00:03:40,160
is also a very important resource and

83
00:03:40,160 --> 00:03:44,790
actually the most expensive one so in

84
00:03:44,790 --> 00:03:47,820
our work we consider the role of memory

85
00:03:47,820 --> 00:03:49,920
in cryptographic reductions and we

86
00:03:49,920 --> 00:03:52,739
conclude that indeed memory can be

87
00:03:52,739 --> 00:03:55,380
crucial when making complete security

88
00:03:55,380 --> 00:04:00,870
statements we also investigate starting

89
00:04:00,870 --> 00:04:02,519
to investigate how to make reductions

90
00:04:02,519 --> 00:04:05,010
memory tight meaning how to obtain

91
00:04:05,010 --> 00:04:08,160
reductions essentially preserving the

92
00:04:08,160 --> 00:04:10,769
same memory requirements as the

93
00:04:10,769 --> 00:04:14,370
algorithms we started with and we do

94
00:04:14,370 --> 00:04:16,978
this by giving a couple of tools which

95
00:04:16,978 --> 00:04:18,390
can be seen as a memory efficient

96
00:04:18,390 --> 00:04:20,728
replacement for typical non memory

97
00:04:20,728 --> 00:04:24,240
efficient steps in reductions we use

98
00:04:24,240 --> 00:04:26,340
those in one concrete application namely

99
00:04:26,340 --> 00:04:28,979
giving a memory tight reduction for the

100
00:04:28,979 --> 00:04:31,610
RSA full domain hash signature scheme

101
00:04:31,610 --> 00:04:34,370
and finally we asked ourselves whether

102
00:04:34,370 --> 00:04:36,500
there also exists reductions which

103
00:04:36,500 --> 00:04:38,719
cannot be both tight and memory tight

104
00:04:38,719 --> 00:04:39,889
and actually found some evidence

105
00:04:39,889 --> 00:04:42,409
pointing in that direction by proving

106
00:04:42,409 --> 00:04:47,719
some lower bounds so now let's look why

107
00:04:47,719 --> 00:04:51,860
memory in reductions matters so for this

108
00:04:51,860 --> 00:04:53,479
we're going to look at time memory

109
00:04:53,479 --> 00:04:55,520
trade-offs so an important observation

110
00:04:55,520 --> 00:04:59,330
here is that for several problems which

111
00:04:59,330 --> 00:05:02,150
are relevant for crypto the best-known

112
00:05:02,150 --> 00:05:05,080
algorithms actually require high memory

113
00:05:05,080 --> 00:05:08,599
or to phrase it differently we are some

114
00:05:08,599 --> 00:05:10,370
problems are harder to solve if less

115
00:05:10,370 --> 00:05:12,020
memory is available and this in

116
00:05:12,020 --> 00:05:14,900
particularly holes for several lattice

117
00:05:14,900 --> 00:05:18,439
or coding based problems and as people

118
00:05:18,439 --> 00:05:20,779
see now this needs to be taken into

119
00:05:20,779 --> 00:05:23,090
account when derived in concrete

120
00:05:23,090 --> 00:05:24,949
security statements and we will look at

121
00:05:24,949 --> 00:05:27,289
a concrete example namely the learning

122
00:05:27,289 --> 00:05:33,710
parity with noise problem so so far we

123
00:05:33,710 --> 00:05:36,740
have looked at time success trade-off

124
00:05:36,740 --> 00:05:39,770
plots now when we add memory we would

125
00:05:39,770 --> 00:05:41,330
actually have to look at a three

126
00:05:41,330 --> 00:05:43,039
dimensional time success memory

127
00:05:43,039 --> 00:05:45,800
trade-off plot however to keep things

128
00:05:45,800 --> 00:05:48,770
simpler in two-dimensional I will only

129
00:05:48,770 --> 00:05:51,080
consider algorithms having a constant

130
00:05:51,080 --> 00:05:53,419
success probability so we will now look

131
00:05:53,419 --> 00:05:59,050
at trade-off plots in this plane so ok

132
00:05:59,050 --> 00:06:01,939
we see that the time memory trade-off

133
00:06:01,939 --> 00:06:04,909
plot again has two axes now the x axis

134
00:06:04,909 --> 00:06:07,039
indicates the memory consumption of

135
00:06:07,039 --> 00:06:09,379
algorithms so now if a point lies in the

136
00:06:09,379 --> 00:06:12,699
area labeled as unbroken this means that

137
00:06:12,699 --> 00:06:14,629
according to current cryptanalytic

138
00:06:14,629 --> 00:06:16,939
knowledge there are no algorithms known

139
00:06:16,939 --> 00:06:19,789
which are able to solve instances of LPM

140
00:06:19,789 --> 00:06:23,120
in the corresponding time and with a

141
00:06:23,120 --> 00:06:25,879
corresponding memory now for LPM this

142
00:06:25,879 --> 00:06:27,349
time memory trade-off plot is

143
00:06:27,349 --> 00:06:29,960
essentially determined by two algorithms

144
00:06:29,960 --> 00:06:31,779
the first one being the gauss algorithm

145
00:06:31,779 --> 00:06:35,210
which we see here so as we can see it's

146
00:06:35,210 --> 00:06:37,699
able to solve instances of LPM given

147
00:06:37,699 --> 00:06:40,430
enough running time but the memory

148
00:06:40,430 --> 00:06:42,920
essentially plays no role here

149
00:06:42,920 --> 00:06:45,930
now the second algorithm would be the B

150
00:06:45,930 --> 00:06:48,720
kW algorithm we see it's able to solve

151
00:06:48,720 --> 00:06:51,210
instances of LP n in considerably faster

152
00:06:51,210 --> 00:06:53,520
time however this comes at the cost of

153
00:06:53,520 --> 00:06:58,470
some increased memory consumption

154
00:06:58,470 --> 00:07:01,230
so overall the time memory trade-off

155
00:07:01,230 --> 00:07:02,910
plot for LP n looks something like that

156
00:07:02,910 --> 00:07:06,960
and actually due to some recent results

157
00:07:06,960 --> 00:07:09,720
by SI L which will also be presented

158
00:07:09,720 --> 00:07:11,730
here at crypto it looks more like this

159
00:07:11,730 --> 00:07:16,650
so now again suppose we constructed some

160
00:07:16,650 --> 00:07:20,370
scheme s and we want to show that when

161
00:07:20,370 --> 00:07:21,990
we want it to be secured against all

162
00:07:21,990 --> 00:07:23,970
adversaries satisfying some time and

163
00:07:23,970 --> 00:07:27,330
memory constraints now in observation we

164
00:07:27,330 --> 00:07:30,120
can make is that even if our reduction

165
00:07:30,120 --> 00:07:32,190
is tight meaning that it preserves

166
00:07:32,190 --> 00:07:33,990
essentially the running time it might

167
00:07:33,990 --> 00:07:37,610
still not be memory tight and actually

168
00:07:37,610 --> 00:07:42,000
have a way higher memory consumption now

169
00:07:42,000 --> 00:07:44,100
we would again now again we would end up

170
00:07:44,100 --> 00:07:47,490
with an algorithm in the area for which

171
00:07:47,490 --> 00:07:49,500
LP n is known to be broken and we can't

172
00:07:49,500 --> 00:07:51,570
derive anything on the security of our

173
00:07:51,570 --> 00:07:55,200
scheme however if the reduction would

174
00:07:55,200 --> 00:07:57,210
also additionally be memory tight

175
00:07:57,210 --> 00:07:59,730
meaning its memory consumption would

176
00:07:59,730 --> 00:08:01,560
essentially be the same as the memory

177
00:08:01,560 --> 00:08:04,230
consumption of the underlying adversary

178
00:08:04,230 --> 00:08:06,930
the situation looks different now we see

179
00:08:06,930 --> 00:08:09,090
that from any algorithm breaking the

180
00:08:09,090 --> 00:08:10,830
security of our scheme we are able to

181
00:08:10,830 --> 00:08:13,260
construct an algorithm outperforming

182
00:08:13,260 --> 00:08:15,570
even the best currently known algorithms

183
00:08:15,570 --> 00:08:17,910
in solving LP m and we gain trust and

184
00:08:17,910 --> 00:08:22,110
security of our scheme so as we have

185
00:08:22,110 --> 00:08:24,780
just seen for some problems which

186
00:08:24,780 --> 00:08:26,970
provide particularly good time memory

187
00:08:26,970 --> 00:08:30,180
trade-offs memory can be crucial when

188
00:08:30,180 --> 00:08:33,390
making concrete security statements so

189
00:08:33,390 --> 00:08:35,340
we call these problems memory sensitive

190
00:08:35,340 --> 00:08:38,130
and they for example include LP n has

191
00:08:38,130 --> 00:08:40,049
just seen the shortest vector problem or

192
00:08:40,049 --> 00:08:42,179
the problem of finding a collision of

193
00:08:42,179 --> 00:08:44,970
three points in a hash function and also

194
00:08:44,970 --> 00:08:47,850
discrete logarithm over finite fields

195
00:08:47,850 --> 00:08:52,670
for example however for other problems

196
00:08:52,700 --> 00:08:56,270
the best known algorithms only require

197
00:08:56,270 --> 00:08:59,390
small memories so in this case while

198
00:08:59,390 --> 00:09:01,310
still a memory tight reduction yields a

199
00:09:01,310 --> 00:09:02,990
stronger result it's harder to measure

200
00:09:02,990 --> 00:09:06,470
its advantage and problems of this type

201
00:09:06,470 --> 00:09:08,330
for example could be to find a collision

202
00:09:08,330 --> 00:09:12,110
or a hash function and preimage

203
00:09:12,110 --> 00:09:14,270
resistance and hash functions or solving

204
00:09:14,270 --> 00:09:16,100
the discrete logarithm problem of an

205
00:09:16,100 --> 00:09:20,560
elliptic curves defined of prime fields

206
00:09:20,800 --> 00:09:23,440
now I want to illustrate that in deeds

207
00:09:23,440 --> 00:09:27,980
typical reductions often contain steps

208
00:09:27,980 --> 00:09:32,240
which result in our algorithms having a

209
00:09:32,240 --> 00:09:34,310
higher memory consumption for this we're

210
00:09:34,310 --> 00:09:37,640
going to look at two examples the first

211
00:09:37,640 --> 00:09:39,710
one being the simulation of a random

212
00:09:39,710 --> 00:09:42,950
Oracle so a random Oracle is an

213
00:09:42,950 --> 00:09:45,860
idealization of a hash function and

214
00:09:45,860 --> 00:09:48,110
works as follows the adversary has

215
00:09:48,110 --> 00:09:51,080
access to an Oracle which it may query

216
00:09:51,080 --> 00:09:53,570
on points and as a in response it's

217
00:09:53,570 --> 00:09:56,510
going to get a union uniformly

218
00:09:56,510 --> 00:09:58,880
distributed its string however since we

219
00:09:58,880 --> 00:10:02,390
are modeling a hash function during the

220
00:10:02,390 --> 00:10:04,970
Oracle on the same point several times

221
00:10:04,970 --> 00:10:08,180
will result in the same answer so this

222
00:10:08,180 --> 00:10:11,960
is usually simulated in reductions using

223
00:10:11,960 --> 00:10:15,230
lazy sampling and this is by keeping

224
00:10:15,230 --> 00:10:19,310
track of a list of query answer pairs so

225
00:10:19,310 --> 00:10:20,810
whenever the adversary Curie's its

226
00:10:20,810 --> 00:10:23,240
Oracle for the Oracle value on some

227
00:10:23,240 --> 00:10:25,400
point we check whether this value has

228
00:10:25,400 --> 00:10:27,770
already been defined and if not we would

229
00:10:27,770 --> 00:10:31,310
sample a fresh round embed string store

230
00:10:31,310 --> 00:10:34,580
it and then return the answer and it's

231
00:10:34,580 --> 00:10:37,010
important to note here that we really

232
00:10:37,010 --> 00:10:39,500
have to stay a store the answers to our

233
00:10:39,500 --> 00:10:42,290
queries since the adversary might worry

234
00:10:42,290 --> 00:10:44,090
it's Oracle several times on the same

235
00:10:44,090 --> 00:10:47,570
point so in the worst case we could

236
00:10:47,570 --> 00:10:49,700
actually have an adversary which

237
00:10:49,700 --> 00:10:52,430
essentially does nothing but query its

238
00:10:52,430 --> 00:10:54,770
random Oracle and in this case we would

239
00:10:54,770 --> 00:10:57,410
end up with a reduction which has to

240
00:10:57,410 --> 00:11:00,170
provide additional memory which is of

241
00:11:00,170 --> 00:11:01,820
the order of the running time of the

242
00:11:01,820 --> 00:11:04,210
underlying adversary

243
00:11:04,210 --> 00:11:06,070
so the second

244
00:11:06,070 --> 00:11:08,320
example occurs when checking for

245
00:11:08,320 --> 00:11:11,380
freshness of messages in the unfortunate

246
00:11:11,380 --> 00:11:15,430
a game for signature schemes so here we

247
00:11:15,430 --> 00:11:17,560
have an adversary which has access to a

248
00:11:17,560 --> 00:11:19,750
signing Oracle which it may query on

249
00:11:19,750 --> 00:11:21,579
messages in order to obtain signatures

250
00:11:21,579 --> 00:11:25,060
on them in the end of the game it's

251
00:11:25,060 --> 00:11:26,759
going to output a forgery attempt

252
00:11:26,759 --> 00:11:30,490
consisting of a message and a signature

253
00:11:30,490 --> 00:11:33,670
and it wins the game if the signature is

254
00:11:33,670 --> 00:11:35,920
valid on that message and what I want to

255
00:11:35,920 --> 00:11:38,380
concentrate on here if the message is

256
00:11:38,380 --> 00:11:40,720
fresh meaning it has not so far not been

257
00:11:40,720 --> 00:11:44,560
queried to the signing Oracle and these

258
00:11:44,560 --> 00:11:46,180
checking for freshness is usually done

259
00:11:46,180 --> 00:11:50,850
by simply keeping track of all messages

260
00:11:50,850 --> 00:11:54,639
query to the signing Oracle so again in

261
00:11:54,639 --> 00:11:56,199
this case we might end up with a

262
00:11:56,199 --> 00:12:01,750
reduction having to provide significant

263
00:12:01,750 --> 00:12:06,759
additional memory so to give a short

264
00:12:06,759 --> 00:12:09,970
recap of what I have discussed so far so

265
00:12:09,970 --> 00:12:12,790
currently at least in most of

266
00:12:12,790 --> 00:12:15,310
theoretical work the memory consumption

267
00:12:15,310 --> 00:12:20,050
is often ignored in reductions and also

268
00:12:20,050 --> 00:12:23,230
many existing reductions contain steps

269
00:12:23,230 --> 00:12:27,399
which result in the constructed

270
00:12:27,399 --> 00:12:29,019
algorithms having highly increased

271
00:12:29,019 --> 00:12:31,269
memory consumption and this seems

272
00:12:31,269 --> 00:12:33,810
particularly problematic problematic for

273
00:12:33,810 --> 00:12:37,029
memory sensitive problems that is for

274
00:12:37,029 --> 00:12:39,279
problems which provide good time memory

275
00:12:39,279 --> 00:12:43,329
trade-offs so how can we achieve memory

276
00:12:43,329 --> 00:12:45,760
tightness to give some examples for that

277
00:12:45,760 --> 00:12:47,949
we are going to revisit the examples

278
00:12:47,949 --> 00:12:50,949
from a minute ago so the first one was

279
00:12:50,949 --> 00:12:52,720
the simulation of a random Oracle via

280
00:12:52,720 --> 00:12:55,839
lazy sampling where we had to keep track

281
00:12:55,839 --> 00:12:58,810
of a list of queries and answers to

282
00:12:58,810 --> 00:13:01,060
queries in order to be able to provide

283
00:13:01,060 --> 00:13:02,910
the adversary with a consistent

284
00:13:02,910 --> 00:13:06,490
simulation of the random Oracle and now

285
00:13:06,490 --> 00:13:08,410
this can be made memory efficient by

286
00:13:08,410 --> 00:13:11,110
using a pseudo-random function this is

287
00:13:11,110 --> 00:13:12,550
actually actually something which was

288
00:13:12,550 --> 00:13:15,430
already noticed by Bernstein in 2011 but

289
00:13:15,430 --> 00:13:18,310
not formally analyzed so here what we

290
00:13:18,310 --> 00:13:20,460
would do is we would sample

291
00:13:20,460 --> 00:13:22,770
a key for a pseudo-random function and

292
00:13:22,770 --> 00:13:25,230
then whenever the adversary creates its

293
00:13:25,230 --> 00:13:27,510
random Oracle on some point we would

294
00:13:27,510 --> 00:13:29,220
derive the answer to this query

295
00:13:29,220 --> 00:13:31,140
deterministically using our pseudo

296
00:13:31,140 --> 00:13:33,600
random function so in this way we don't

297
00:13:33,600 --> 00:13:36,630
have to store the answer anymore to be

298
00:13:36,630 --> 00:13:38,070
able to provide the adversary with the

299
00:13:38,070 --> 00:13:44,520
consistent simulation and it's quite

300
00:13:44,520 --> 00:13:46,770
easy to see that any adversary which is

301
00:13:46,770 --> 00:13:49,110
able to distinguish this simulation of a

302
00:13:49,110 --> 00:13:51,450
random Oracle from a proper random

303
00:13:51,450 --> 00:13:52,710
Oracle would be able to break the

304
00:13:52,710 --> 00:13:57,090
security of a pseudo-random function so

305
00:13:57,090 --> 00:14:00,180
the second example were occurred when

306
00:14:00,180 --> 00:14:02,400
checking for freshness of messages in

307
00:14:02,400 --> 00:14:04,560
the unfortunate e game for signature

308
00:14:04,560 --> 00:14:09,480
schemes so here the adversity had access

309
00:14:09,480 --> 00:14:12,120
to a signing Oracle and in the end

310
00:14:12,120 --> 00:14:14,220
output a forgery attempt consisting of

311
00:14:14,220 --> 00:14:15,900
the message in the signature and we

312
00:14:15,900 --> 00:14:18,600
wanted to check whether the output

313
00:14:18,600 --> 00:14:22,350
message indeed was fresh so this can be

314
00:14:22,350 --> 00:14:24,270
made memory efficient in the following

315
00:14:24,270 --> 00:14:26,370
way so the general idea here is to use

316
00:14:26,370 --> 00:14:29,700
the adversary itself as a memory so what

317
00:14:29,700 --> 00:14:33,210
we would do is we would still answer the

318
00:14:33,210 --> 00:14:34,950
signing queries in the usual way but no

319
00:14:34,950 --> 00:14:37,470
longer store the corresponding messages

320
00:14:37,470 --> 00:14:40,830
and at the end of our reduction when the

321
00:14:40,830 --> 00:14:42,840
adversary outputs its forgery attempt we

322
00:14:42,840 --> 00:14:45,270
would store the message and then we bind

323
00:14:45,270 --> 00:14:47,400
the adversary meaning we would run it a

324
00:14:47,400 --> 00:14:49,290
second time providing it with the exact

325
00:14:49,290 --> 00:14:52,290
same random coins and also answering all

326
00:14:52,290 --> 00:14:54,090
of its signature queries with the same

327
00:14:54,090 --> 00:14:59,010
answers if we do this the sequence of

328
00:14:59,010 --> 00:15:01,320
messages submitted by the adversary to

329
00:15:01,320 --> 00:15:03,660
the signing Oracle will be the same so

330
00:15:03,660 --> 00:15:06,180
now whenever the adversary queries for a

331
00:15:06,180 --> 00:15:09,870
signature we could simply check whether

332
00:15:09,870 --> 00:15:13,710
this message is actually the message it

333
00:15:13,710 --> 00:15:17,790
forges on so in doing this we only have

334
00:15:17,790 --> 00:15:20,490
to store one message however this comes

335
00:15:20,490 --> 00:15:22,200
at the cost of potentially running the

336
00:15:22,200 --> 00:15:24,870
adversary twice and an important thing

337
00:15:24,870 --> 00:15:27,870
to note here is since we want to rewind

338
00:15:27,870 --> 00:15:29,580
yet whether we actually have to store

339
00:15:29,580 --> 00:15:33,510
all the coins provided to the adversary

340
00:15:33,510 --> 00:15:34,350
and used

341
00:15:34,350 --> 00:15:37,650
we derive signatures but this could be

342
00:15:37,650 --> 00:15:39,150
done in a memory efficient way again

343
00:15:39,150 --> 00:15:43,050
using a pseudo-random function so a

344
00:15:43,050 --> 00:15:45,060
final thing I want to talk about is

345
00:15:45,060 --> 00:15:50,340
lower bounds so showing that for some

346
00:15:50,340 --> 00:15:52,500
reductions it seems not possible to

347
00:15:52,500 --> 00:15:55,680
obtain obtained version of the reduction

348
00:15:55,680 --> 00:15:58,500
which is both tight and memory tight for

349
00:15:58,500 --> 00:16:00,660
this we're going to look at two versions

350
00:16:00,660 --> 00:16:02,850
of the unfortunate e game for signature

351
00:16:02,850 --> 00:16:04,650
schemes the first one just being the

352
00:16:04,650 --> 00:16:07,440
usual unfortunate e against chosen

353
00:16:07,440 --> 00:16:10,650
chosen message attack s-- for signature

354
00:16:10,650 --> 00:16:12,750
schemes so in this game the adversary

355
00:16:12,750 --> 00:16:15,870
has access to a public key and a signing

356
00:16:15,870 --> 00:16:17,970
Oracle which it may query on messages in

357
00:16:17,970 --> 00:16:19,770
order to obtain signatures on them and

358
00:16:19,770 --> 00:16:21,960
in the end of the game it's going to

359
00:16:21,960 --> 00:16:25,110
output a forgery attempt consisting of a

360
00:16:25,110 --> 00:16:27,210
message and a signature and it wins the

361
00:16:27,210 --> 00:16:29,310
game if the signature is indeed valid on

362
00:16:29,310 --> 00:16:31,500
this message and if the message is fresh

363
00:16:31,500 --> 00:16:33,680
meaning it has not been carried to the

364
00:16:33,680 --> 00:16:35,840
signing Oracle so far

365
00:16:35,840 --> 00:16:38,640
now the second game we are going to look

366
00:16:38,640 --> 00:16:40,770
at can be seen as a multi forgery

367
00:16:40,770 --> 00:16:43,530
attempt version of the first game so

368
00:16:43,530 --> 00:16:45,930
again the adversary has access to a

369
00:16:45,930 --> 00:16:48,450
public key and a signing Oracle but now

370
00:16:48,450 --> 00:16:50,370
it's no longer restricted to make a

371
00:16:50,370 --> 00:16:54,660
single forgery attempt instead if it's

372
00:16:54,660 --> 00:16:56,310
allowed to make many and can do so at

373
00:16:56,310 --> 00:16:59,100
any point in time and it wins the game

374
00:16:59,100 --> 00:17:01,830
if any of those forgery attempts is

375
00:17:01,830 --> 00:17:06,030
successful meaning that the signature is

376
00:17:06,030 --> 00:17:08,189
valid and the message so far has not

377
00:17:08,189 --> 00:17:11,099
been created to this on e Morricone now

378
00:17:11,099 --> 00:17:13,230
one could argue that this actually

379
00:17:13,230 --> 00:17:15,180
models more realistically what we expect

380
00:17:15,180 --> 00:17:19,530
of a signature scheme since the

381
00:17:19,530 --> 00:17:21,089
restriction to a single forgery attempt

382
00:17:21,089 --> 00:17:23,520
seems somewhat artificial however of

383
00:17:23,520 --> 00:17:25,980
course we would like to use the more

384
00:17:25,980 --> 00:17:28,439
simple version and this also seems

385
00:17:28,439 --> 00:17:30,690
justified since there is a tight

386
00:17:30,690 --> 00:17:33,270
reduction from the multi forge game to

387
00:17:33,270 --> 00:17:36,380
the forge game to see that note that a

388
00:17:36,380 --> 00:17:40,560
forge adversary' can check signatures

389
00:17:40,560 --> 00:17:43,530
itself for validity so the reduction

390
00:17:43,530 --> 00:17:44,970
would essentially boiled down to

391
00:17:44,970 --> 00:17:47,730
checking whether a message is fresh

392
00:17:47,730 --> 00:17:49,980
and this could for example be done by

393
00:17:49,980 --> 00:17:51,950
simply keeping track of all messages

394
00:17:51,950 --> 00:17:54,270
submitted to the signing Oracle however

395
00:17:54,270 --> 00:17:58,470
then the reduction is long tied another

396
00:17:58,470 --> 00:18:01,950
thing we could do is to simply guess

397
00:18:01,950 --> 00:18:04,650
which of the forgery attempts of the

398
00:18:04,650 --> 00:18:06,360
adversary would be on a fresh message

399
00:18:06,360 --> 00:18:08,160
however then we would end up with a

400
00:18:08,160 --> 00:18:10,440
reduction having a lower success

401
00:18:10,440 --> 00:18:12,570
probability and the final thing we could

402
00:18:12,570 --> 00:18:15,390
think of is actually to rewind our

403
00:18:15,390 --> 00:18:18,360
adversary at each point when it makes a

404
00:18:18,360 --> 00:18:20,640
sign inquiry in order to check for

405
00:18:20,640 --> 00:18:22,530
freshness of the message but this will

406
00:18:22,530 --> 00:18:25,320
result in a higher running time so as we

407
00:18:25,320 --> 00:18:27,000
have seen there are several trade offs

408
00:18:27,000 --> 00:18:29,730
for reductions from the m4 to the forge

409
00:18:29,730 --> 00:18:33,090
game but all of them lose a fact factor

410
00:18:33,090 --> 00:18:35,250
or in order of the order of the

411
00:18:35,250 --> 00:18:37,820
adversaries in one of our resources

412
00:18:37,820 --> 00:18:40,559
but since m4 is probably the more

413
00:18:40,559 --> 00:18:44,250
realistic game and Forge the simpler one

414
00:18:44,250 --> 00:18:46,080
we would clearly prefer a reduction

415
00:18:46,080 --> 00:18:47,760
which is about tight and memory tight so

416
00:18:47,760 --> 00:18:52,380
obtains once in all over the row however

417
00:18:52,380 --> 00:18:54,630
this seems not possible and indeed we

418
00:18:54,630 --> 00:18:55,799
are able to show a theorem which

419
00:18:55,799 --> 00:18:59,160
informally looks something like this so

420
00:18:59,160 --> 00:19:01,110
for a certain class of blackbox

421
00:19:01,110 --> 00:19:03,330
reductions from m4 to forge it's not

422
00:19:03,330 --> 00:19:05,820
possible to be both tight and memory

423
00:19:05,820 --> 00:19:08,910
tight so the proof users streaming

424
00:19:08,910 --> 00:19:11,910
algorithms which are algorithms which

425
00:19:11,910 --> 00:19:14,610
have to process a large input would only

426
00:19:14,610 --> 00:19:16,500
have a small working memory so they can

427
00:19:16,500 --> 00:19:19,799
only process its input as a ordered

428
00:19:19,799 --> 00:19:22,620
stream of small chunks but make several

429
00:19:22,620 --> 00:19:28,140
passes over those stream and so the

430
00:19:28,140 --> 00:19:30,120
restrictions on our reductions

431
00:19:30,120 --> 00:19:32,299
essentially forced them to behave as a

432
00:19:32,299 --> 00:19:36,150
streaming algorithm where the single

433
00:19:36,150 --> 00:19:37,950
chunks will correspond to the signing

434
00:19:37,950 --> 00:19:41,309
and forgery queries and in this way we

435
00:19:41,309 --> 00:19:42,809
are able to use a lower bound on the

436
00:19:42,809 --> 00:19:45,990
amounts of passes a streaming algorithm

437
00:19:45,990 --> 00:19:48,330
has to make over its input in order to

438
00:19:48,330 --> 00:19:51,450
compute certain functions so to give a

439
00:19:51,450 --> 00:19:54,299
very sharp conclusion memory in

440
00:19:54,299 --> 00:19:56,730
cryptographic reductions does matter and

441
00:19:56,730 --> 00:20:00,510
it should be addressed when coming up

442
00:20:00,510 --> 00:20:01,380
with reduction

443
00:20:01,380 --> 00:20:04,139
also it seems possible for many

444
00:20:04,139 --> 00:20:07,320
reductions to at a simple fix but there

445
00:20:07,320 --> 00:20:09,870
also are reductions which seem to be

446
00:20:09,870 --> 00:20:15,520
inherent memory loose thank you

447
00:20:15,520 --> 00:20:21,569
[Applause]

