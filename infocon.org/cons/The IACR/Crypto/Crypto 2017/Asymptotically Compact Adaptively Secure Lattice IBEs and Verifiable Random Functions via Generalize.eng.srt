1
00:00:05,109 --> 00:00:07,850
thank you for the introduction I'm sure

2
00:00:07,850 --> 00:00:10,570
their mother from Iceland Japan and I

3
00:00:10,570 --> 00:00:13,340
start with a generic background in

4
00:00:13,340 --> 00:00:14,760
general encrypt

5
00:00:14,760 --> 00:00:16,620
there are stronger security notions and

6
00:00:16,620 --> 00:00:19,110
weaker security notions mr. gong

7
00:00:19,110 --> 00:00:22,530
security notion is sometimes moralistic

8
00:00:22,530 --> 00:00:24,810
security notion that captures the issues

9
00:00:24,810 --> 00:00:27,720
in the real world on the other hand

10
00:00:27,720 --> 00:00:30,540
since it is harder to achieve we only

11
00:00:30,540 --> 00:00:34,680
have inefficient constructions on the

12
00:00:34,680 --> 00:00:40,379
other hand occurs a 2d notion is more is

13
00:00:40,379 --> 00:00:41,309
unrealistic

14
00:00:41,309 --> 00:00:43,290
sometimes unrealistic security notion

15
00:00:43,290 --> 00:00:45,390
that doesn't capture the issues in the

16
00:00:45,390 --> 00:00:47,760
real world but since it is easier to

17
00:00:47,760 --> 00:00:48,089
achieve

18
00:00:48,089 --> 00:00:50,460
we often have very efficient

19
00:00:50,460 --> 00:00:53,790
constructions so there there is a

20
00:00:53,790 --> 00:00:56,970
trade-off between them and in this talk

21
00:00:56,970 --> 00:00:59,510
we focus on the case of ibe and

22
00:00:59,510 --> 00:01:04,920
verifiable random function while vrf so

23
00:01:04,920 --> 00:01:07,440
let us take a look at the case of

24
00:01:07,440 --> 00:01:10,409
lattices based IP schemes so we have

25
00:01:10,409 --> 00:01:13,340
adaptive reset your lattice IP scheme

26
00:01:13,340 --> 00:01:16,860
but however these schemes require order

27
00:01:16,860 --> 00:01:19,110
of lambda matrices in the master public

28
00:01:19,110 --> 00:01:23,250
key or public parameters e on the other

29
00:01:23,250 --> 00:01:25,620
hand we have very efficient selectivity

30
00:01:25,620 --> 00:01:28,140
a scheme that requires only constant

31
00:01:28,140 --> 00:01:29,940
number of matrices in the master public

32
00:01:29,940 --> 00:01:35,010
key and in the with the 500 random

33
00:01:35,010 --> 00:01:38,280
functions on body maps we have a scheme

34
00:01:38,280 --> 00:01:41,310
with schemes with large input space and

35
00:01:41,310 --> 00:01:44,580
adaptive security however all these

36
00:01:44,580 --> 00:01:46,410
schemes require a lot of lambda group

37
00:01:46,410 --> 00:01:49,140
elements for public parameters and

38
00:01:49,140 --> 00:01:53,400
proofs on the other hand scheme with

39
00:01:53,400 --> 00:01:56,390
weaker weaker guarantee only requires

40
00:01:56,390 --> 00:01:59,010
constant number of group elements for

41
00:01:59,010 --> 00:02:01,260
both so there are gaps between the

42
00:02:01,260 --> 00:02:07,650
efficiency for them so the question my

43
00:02:07,650 --> 00:02:09,769
question is can we narrow these gaps

44
00:02:09,769 --> 00:02:14,879
inefficiency so this is our results on

45
00:02:14,879 --> 00:02:18,840
my IP schemes this is a comparison of

46
00:02:18,840 --> 00:02:21,810
adaptive insecure lattice ID schemes as

47
00:02:21,810 --> 00:02:24,840
you can see our results our scheme

48
00:02:24,840 --> 00:02:27,440
achieved the best space efficient

49
00:02:27,440 --> 00:02:30,410
among all of the schemes in asymptotic

50
00:02:30,410 --> 00:02:37,250
sense so this is our result on the rival

51
00:02:37,250 --> 00:02:40,160
random functions we can achieve the

52
00:02:40,160 --> 00:02:43,040
short scheme with shortest proof sites

53
00:02:43,040 --> 00:02:47,150
or steam with shortest verification keys

54
00:02:47,150 --> 00:02:55,940
or both so next I explained in this talk

55
00:02:55,940 --> 00:02:57,890
we first explained previous works on

56
00:02:57,890 --> 00:03:00,590
lattice ID schemes then I explained our

57
00:03:00,590 --> 00:03:03,530
result on lattice ID schemes finally I

58
00:03:03,530 --> 00:03:08,810
explained our results on vrf so this is

59
00:03:08,810 --> 00:03:10,370
the syntax of I identity based

60
00:03:10,370 --> 00:03:13,240
encryption in the IDE

61
00:03:13,240 --> 00:03:15,820
ciphertext and the secretly are

62
00:03:15,820 --> 00:03:19,070
associated with some identity and the

63
00:03:19,070 --> 00:03:21,800
decryption is possible if and if and

64
00:03:21,800 --> 00:03:27,620
only if these identities are the same so

65
00:03:27,620 --> 00:03:28,700
as for security

66
00:03:28,700 --> 00:03:34,610
I require adaptive security so the

67
00:03:34,610 --> 00:03:36,680
adaptive security is defined by a gem

68
00:03:36,680 --> 00:03:39,760
between the Challenger and an adversary

69
00:03:39,760 --> 00:03:42,650
the adaptive security essentially said

70
00:03:42,650 --> 00:03:46,100
that the adversary can not obtain miss

71
00:03:46,100 --> 00:03:48,830
the information of message if the

72
00:03:48,830 --> 00:03:50,630
message is encrypted under the

73
00:03:50,630 --> 00:03:52,640
Challenger identity for which the

74
00:03:52,640 --> 00:03:54,320
Advisory does not have the corresponding

75
00:03:54,320 --> 00:03:58,600
secret key and the furthermore the

76
00:03:58,600 --> 00:04:01,280
challenge identity which is denoted by

77
00:04:01,280 --> 00:04:05,750
ID star is chosen by the adversary in an

78
00:04:05,750 --> 00:04:10,570
arbitrary way and in adaptive way so

79
00:04:10,570 --> 00:04:15,019
this is the sort of difficulty in

80
00:04:15,019 --> 00:04:20,510
achieving this security notion so next I

81
00:04:20,510 --> 00:04:22,160
explain temperature construction of

82
00:04:22,160 --> 00:04:25,460
lattice IV scheme and this is an

83
00:04:25,460 --> 00:04:28,010
abstraction of our scheme and previous

84
00:04:28,010 --> 00:04:31,270
schemes in the template construction

85
00:04:31,270 --> 00:04:35,150
there is in the template construction

86
00:04:35,150 --> 00:04:38,930
master public key consists of matrix a a

87
00:04:38,930 --> 00:04:40,030
vector

88
00:04:40,030 --> 00:04:44,500
and other matrices B 1 B 2 and so on

89
00:04:44,500 --> 00:04:47,590
and this master public key

90
00:04:47,590 --> 00:04:57,060
defines defines matrix h of ID which

91
00:04:57,660 --> 00:05:01,870
which is publicly computable for the

92
00:05:01,870 --> 00:05:04,870
master public key so in the key

93
00:05:04,870 --> 00:05:07,450
generation algorithm we choose a short

94
00:05:07,450 --> 00:05:13,860
vector e that satisfy the this equation

95
00:05:17,340 --> 00:05:20,440
and in the encryption algorithm we

96
00:05:20,440 --> 00:05:23,380
essentially generate a double sample

97
00:05:23,380 --> 00:05:26,890
with respect to the vector mu a matrix a

98
00:05:26,890 --> 00:05:34,840
and matrix H of ID so next I explain the

99
00:05:34,840 --> 00:05:36,640
security proof for the template

100
00:05:36,640 --> 00:05:39,730
construction we rely on patterning

101
00:05:39,730 --> 00:05:43,090
technique to approve the security in the

102
00:05:43,090 --> 00:05:44,830
security proof we embed the problem

103
00:05:44,830 --> 00:05:47,500
instance of the l ee assumption into the

104
00:05:47,500 --> 00:05:49,750
public parameters so that we have this

105
00:05:49,750 --> 00:05:53,680
equation namely age of ID is represented

106
00:05:53,680 --> 00:06:00,330
like this here a is matrix from the

107
00:06:00,330 --> 00:06:03,390
program instance of the lwe assumption

108
00:06:03,390 --> 00:06:07,840
and the simulator does not does not know

109
00:06:07,840 --> 00:06:10,390
the corresponding trapdoor for the

110
00:06:10,390 --> 00:06:15,580
matrix a and our ID is a matrix with a

111
00:06:15,580 --> 00:06:21,040
short coefficient and here the function

112
00:06:21,040 --> 00:06:24,820
f is a function the function f is

113
00:06:24,820 --> 00:06:27,729
specific to the corresponding scheme and

114
00:06:27,729 --> 00:06:33,340
the K is secure randomness that allows

115
00:06:33,340 --> 00:06:36,190
us to pass on the identity space and

116
00:06:36,190 --> 00:06:38,860
finally G is a gadget matrix that is

117
00:06:38,860 --> 00:06:41,140
used in a lattice beta cryptography

118
00:06:41,140 --> 00:06:44,919
extensively and in the simulation we

119
00:06:44,919 --> 00:06:50,950
need this this conditions first we

120
00:06:50,950 --> 00:06:53,169
require that F of K IDI is

121
00:06:53,169 --> 00:06:57,370
one for all query ID ID I and we also

122
00:06:57,370 --> 00:06:59,439
require F of K ID states therefore

123
00:06:59,439 --> 00:07:02,620
challenge identity Ida star so the

124
00:07:02,620 --> 00:07:05,319
former a condition allows us to generate

125
00:07:05,319 --> 00:07:08,020
a secret key the formal condition allows

126
00:07:08,020 --> 00:07:11,199
us to assimilate a secret key in the

127
00:07:11,199 --> 00:07:13,599
security proof and the second condition

128
00:07:13,599 --> 00:07:16,840
allows us to embed the problem instance

129
00:07:16,840 --> 00:07:19,110
of the elder B assumption into the

130
00:07:19,110 --> 00:07:24,189
challenge ciphertext so I explained the

131
00:07:24,189 --> 00:07:26,379
partitioning technique in more abstract

132
00:07:26,379 --> 00:07:29,770
way in the security proof we patched on

133
00:07:29,770 --> 00:07:31,979
the identity space into two spaces

134
00:07:31,979 --> 00:07:35,580
challenge identity space which is

135
00:07:35,580 --> 00:07:39,490
represented by the yellow area 0 area in

136
00:07:39,490 --> 00:07:43,509
this in this picture and other

137
00:07:43,509 --> 00:07:49,689
identities so in the for the identity in

138
00:07:49,689 --> 00:07:51,520
the challenge I think we require that f

139
00:07:51,520 --> 00:07:55,270
of K ID is 0 and for the identity

140
00:07:55,270 --> 00:07:57,189
outside the challenge identity space we

141
00:07:57,189 --> 00:08:01,509
require that F of K ID is 1 and in the

142
00:08:01,509 --> 00:08:04,689
city tuples we require to choose the

143
00:08:04,689 --> 00:08:08,379
function f appropriately so that this

144
00:08:08,379 --> 00:08:11,080
probability is noticeable for randomly

145
00:08:11,080 --> 00:08:14,409
chosen k so the probabilities taken for

146
00:08:14,409 --> 00:08:16,000
the randomness of the secret random

147
00:08:16,000 --> 00:08:23,830
scale here next I explained admissible

148
00:08:23,830 --> 00:08:25,509
hash function which is the special K

149
00:08:25,509 --> 00:08:30,669
which is a function that allows to that

150
00:08:30,669 --> 00:08:33,610
allows to divide the identity space in a

151
00:08:33,610 --> 00:08:35,260
favorable way in the sense that the

152
00:08:35,260 --> 00:08:38,110
probability in the previous slide is

153
00:08:38,110 --> 00:08:41,708
noticeable so to define the admissible

154
00:08:41,708 --> 00:08:44,800
hash function we define we pick a binary

155
00:08:44,800 --> 00:08:49,660
error correcting code C and we define F

156
00:08:49,660 --> 00:08:53,769
ad h of k ID is 0 if and only if the

157
00:08:53,769 --> 00:08:58,480
I've component of C of ID and and

158
00:08:58,480 --> 00:09:02,260
k-f component of K are the same for all

159
00:09:02,260 --> 00:09:06,310
I such that K is not not ki is

160
00:09:06,310 --> 00:09:09,070
numbat element so I explained this

161
00:09:09,070 --> 00:09:11,290
definition used in this example let us

162
00:09:11,290 --> 00:09:14,590
assume that the the tutoring the K G of

163
00:09:14,590 --> 00:09:16,930
ID and the C of I D prime are like this

164
00:09:16,930 --> 00:09:24,550
and for in this example this identity ID

165
00:09:24,550 --> 00:09:26,830
is in the challenge identity space

166
00:09:26,830 --> 00:09:29,200
because the second and the fifth bit of

167
00:09:29,200 --> 00:09:32,820
the see of ID are the same as those of K

168
00:09:32,820 --> 00:09:35,860
however ID prime is outside of the

169
00:09:35,860 --> 00:09:38,260
challenge I did space because the fifth

170
00:09:38,260 --> 00:09:41,380
bit of C of I D prime is not the same as

171
00:09:41,380 --> 00:09:45,520
K and the nice property of this function

172
00:09:45,520 --> 00:09:49,000
is that for appropriately chosen K it in

173
00:09:49,000 --> 00:09:51,850
this it induces user for partitioning

174
00:09:51,850 --> 00:09:56,520
ideal space extra explained previous

175
00:09:56,520 --> 00:09:59,980
adoptable secure data sabi schemes the

176
00:09:59,980 --> 00:10:06,430
zhkp the work by cache at all use the

177
00:10:06,430 --> 00:10:08,590
admissible hash function to achieve

178
00:10:08,590 --> 00:10:12,160
adaptive security as a result the

179
00:10:12,160 --> 00:10:13,600
schemes of us from long public

180
00:10:13,600 --> 00:10:16,570
parameters in more specifically in the

181
00:10:16,570 --> 00:10:19,270
scheme they embed each component of the

182
00:10:19,270 --> 00:10:22,150
secure randomness K into the mattresses

183
00:10:22,150 --> 00:10:24,790
in the master Poochie in a component

184
00:10:24,790 --> 00:10:28,660
wise manner like this since the length

185
00:10:28,660 --> 00:10:32,890
of K is very long this read this read to

186
00:10:32,890 --> 00:10:36,190
this leads to the scheme with long

187
00:10:36,190 --> 00:10:40,030
master public key and other schemes also

188
00:10:40,030 --> 00:10:41,350
require long the public parameters

189
00:10:41,350 --> 00:10:45,220
because of the use of the waters lattice

190
00:10:45,220 --> 00:10:48,600
analog of the waters hunch

191
00:10:49,350 --> 00:10:52,030
next I explain our results on lattice ID

192
00:10:52,030 --> 00:10:55,780
schemes a record that the reason why it

193
00:10:55,780 --> 00:10:58,540
a scheme suffer from large public

194
00:10:58,540 --> 00:11:01,060
parameters is that they have to embed

195
00:11:01,060 --> 00:11:04,060
the long string care into matrices in a

196
00:11:04,060 --> 00:11:07,630
bitwise or component wise manner so

197
00:11:07,630 --> 00:11:10,000
natural direction to reduce the size of

198
00:11:10,000 --> 00:11:10,510
the master

199
00:11:10,510 --> 00:11:14,410
the key is to compress the expression of

200
00:11:14,410 --> 00:11:16,380
this string J

201
00:11:16,380 --> 00:11:19,840
so is it possible to compress the string

202
00:11:19,840 --> 00:11:23,770
J to consider this problem an important

203
00:11:23,770 --> 00:11:26,200
property is that K is randomly chosen

204
00:11:26,200 --> 00:11:30,670
from this set so that the number of the

205
00:11:30,670 --> 00:11:33,120
non boat element is autoblog lambda

206
00:11:33,120 --> 00:11:38,800
namely case V although k is a very long

207
00:11:38,800 --> 00:11:39,900
string

208
00:11:39,900 --> 00:11:44,290
most of the position assigned the simple

209
00:11:44,290 --> 00:11:49,030
pot in the string and the only small

210
00:11:49,030 --> 00:11:51,220
number of questions are assigned a 0 or

211
00:11:51,220 --> 00:11:57,850
1 so next I consider new encoding for

212
00:11:57,850 --> 00:12:01,540
admissible hash function i explained

213
00:12:01,540 --> 00:12:03,940
using this example let us assume that

214
00:12:03,940 --> 00:12:09,250
the string j is asked like this and then

215
00:12:09,250 --> 00:12:13,510
for each position of the string k we we

216
00:12:13,510 --> 00:12:17,740
prepare two numbers like this and then

217
00:12:17,740 --> 00:12:20,620
from here we choose numbers depending on

218
00:12:20,620 --> 00:12:24,220
the string chair if the position is

219
00:12:24,220 --> 00:12:27,100
assigned with both element we do not

220
00:12:27,100 --> 00:12:31,410
choose any number from the position and

221
00:12:31,410 --> 00:12:35,830
if the position is assigned with a bit 0

222
00:12:35,830 --> 00:12:39,460
we choose a number from the a parole if

223
00:12:39,460 --> 00:12:43,660
the number is assigned with 1 if the

224
00:12:43,660 --> 00:12:45,580
position is assigned with the number 1

225
00:12:45,580 --> 00:12:48,640
we choose a number from the role lower

226
00:12:48,640 --> 00:12:55,600
row like this and as a result we obtain

227
00:12:55,600 --> 00:12:58,630
a set key of K corresponding to the

228
00:12:58,630 --> 00:13:02,620
string ek like this an important

229
00:13:02,620 --> 00:13:04,690
property is that the size of T of K is

230
00:13:04,690 --> 00:13:09,370
small because the number of non what

231
00:13:09,370 --> 00:13:11,920
element in the string J is only order

232
00:13:11,920 --> 00:13:14,560
log lambda as a result the size of the

233
00:13:14,560 --> 00:13:18,570
set T of K is only order of log lambda

234
00:13:18,570 --> 00:13:23,490
and if we represent the

235
00:13:23,490 --> 00:13:27,899
set tfj as a binary string we have the

236
00:13:27,899 --> 00:13:30,720
size of the length of the binary string

237
00:13:30,720 --> 00:13:33,689
is Adolfo's square to the log lambda

238
00:13:33,689 --> 00:13:35,809
which is much shorter than the original

239
00:13:35,809 --> 00:13:41,790
string chain so we managed to compress

240
00:13:41,790 --> 00:13:46,050
the beach length of the string care into

241
00:13:46,050 --> 00:13:55,829
a much shorter bit string so given the

242
00:13:55,829 --> 00:13:57,360
idea that we can compress the

243
00:13:57,360 --> 00:14:00,809
representation K into T of K we can hope

244
00:14:00,809 --> 00:14:02,819
that we can patch on the identity space

245
00:14:02,819 --> 00:14:06,179
using this much shorter much shorter bit

246
00:14:06,179 --> 00:14:14,160
string so here we also we encode C of ID

247
00:14:14,160 --> 00:14:20,670
into a set of numbers like T of K so let

248
00:14:20,670 --> 00:14:22,829
us assume that G of ID is a bit string

249
00:14:22,829 --> 00:14:27,209
like this then we then we prepare two

250
00:14:27,209 --> 00:14:29,339
numbers for each portion of C of ID like

251
00:14:29,339 --> 00:14:31,939
this and then we choose numbers from

252
00:14:31,939 --> 00:14:36,749
here like this using the same rule that

253
00:14:36,749 --> 00:14:42,089
is applied to the case of K and then as

254
00:14:42,089 --> 00:14:46,529
a result we have that we have set of the

255
00:14:46,529 --> 00:14:52,439
set s of ID defined like this the

256
00:14:52,439 --> 00:14:55,649
property we can see that F adh of k ID

257
00:14:55,649 --> 00:14:58,889
is 0 if and only if T of K is included

258
00:14:58,889 --> 00:15:02,490
in the set s of ID so this can be seen

259
00:15:02,490 --> 00:15:05,369
by the definition of F ADH this function

260
00:15:05,369 --> 00:15:08,249
value F ADH of K ID is 0 if and only if

261
00:15:08,249 --> 00:15:11,910
the non bot element of the string K is

262
00:15:11,910 --> 00:15:18,600
the same as G of ID and then we define

263
00:15:18,600 --> 00:15:20,209
new function f MA

264
00:15:20,209 --> 00:15:23,059
mAh modified as dimension for a fact

265
00:15:23,059 --> 00:15:26,129
modified admissible hash function so

266
00:15:26,129 --> 00:15:31,589
that f MA a H of T of K and s of ID is 0

267
00:15:31,589 --> 00:15:34,230
if and only if T of K is included in s

268
00:15:34,230 --> 00:15:36,559
of ID

269
00:15:38,150 --> 00:15:43,740
so since we managed to reduce the size

270
00:15:43,740 --> 00:15:47,340
of a compress the bit string chain into

271
00:15:47,340 --> 00:15:50,400
much shorter string we can hope that we

272
00:15:50,400 --> 00:15:52,290
have much more efficient lattice IV

273
00:15:52,290 --> 00:15:55,230
scheme namely in our scheme we embed the

274
00:15:55,230 --> 00:15:58,050
string T of K into the matrices in a

275
00:15:58,050 --> 00:16:03,420
component wise manner like this too

276
00:16:03,420 --> 00:16:06,300
however there remains the problem so how

277
00:16:06,300 --> 00:16:14,130
do we compute H of ID in our scheme so

278
00:16:14,130 --> 00:16:17,760
let us examine the properties I we want

279
00:16:17,760 --> 00:16:21,390
for the H of ID first we require that H

280
00:16:21,390 --> 00:16:24,240
of ID is publicly computable from the

281
00:16:24,240 --> 00:16:27,840
matrices public matrices and in the

282
00:16:27,840 --> 00:16:31,200
stimulation we require that if we have

283
00:16:31,200 --> 00:16:33,570
this equation pH can be represented like

284
00:16:33,570 --> 00:16:38,160
this here TI is the f bit of the binary

285
00:16:38,160 --> 00:16:42,420
representation of T of K we require we

286
00:16:42,420 --> 00:16:45,060
should have H of ID can be represented

287
00:16:45,060 --> 00:16:51,500
like this and by the property of the

288
00:16:51,500 --> 00:16:55,950
functions we have that fm8 H of T of K s

289
00:16:55,950 --> 00:17:00,770
of ID is the same as FA th of k ID and

290
00:17:00,770 --> 00:17:02,940
apply the property of the admissible

291
00:17:02,940 --> 00:17:06,560
hash function this function value

292
00:17:06,560 --> 00:17:10,550
correctly Pudsey on the identity space

293
00:17:10,550 --> 00:17:14,069
so the problem remains is that how do we

294
00:17:14,069 --> 00:17:16,890
achieve this property actually this

295
00:17:16,890 --> 00:17:20,040
property can be achieved using fully

296
00:17:20,040 --> 00:17:23,940
homomorphic computation technique next

297
00:17:23,940 --> 00:17:25,589
I'll explain free homo feed computation

298
00:17:25,589 --> 00:17:31,020
techniques this is this is this

299
00:17:31,020 --> 00:17:32,730
technique is shown by Gentry Sahai

300
00:17:32,730 --> 00:17:36,690
waters and opponent at all essentially

301
00:17:36,690 --> 00:17:39,990
they show that there exist PPT

302
00:17:39,990 --> 00:17:42,330
algorithms public evolution algorithm

303
00:17:42,330 --> 00:17:44,310
and the trapdoor evolution algorithm

304
00:17:44,310 --> 00:17:47,670
such that these properties hold here

305
00:17:47,670 --> 00:17:50,130
publicly public evaluation

306
00:17:50,130 --> 00:17:52,860
Texas team put a bunch of mattresses bi

307
00:17:52,860 --> 00:17:57,020
and function decryption F and output a

308
00:17:57,020 --> 00:18:02,190
matrix B air and when bi can be

309
00:18:02,190 --> 00:18:06,240
represented like this VI is AR RI + x IG

310
00:18:06,240 --> 00:18:10,500
then we have that bf can be represented

311
00:18:10,500 --> 00:18:16,050
like this here the matrix RF is computed

312
00:18:16,050 --> 00:18:18,090
from the trapdoor evolution algorithm

313
00:18:18,090 --> 00:18:23,670
like this and the important property is

314
00:18:23,670 --> 00:18:28,080
that if the if the coefficient of RI are

315
00:18:28,080 --> 00:18:31,860
small we have the questions of RI f are

316
00:18:31,860 --> 00:18:39,840
also small so in our scheme we define

317
00:18:39,840 --> 00:18:44,190
that we define the matrix h of ID like

318
00:18:44,190 --> 00:18:46,290
this using fully homomorphic computation

319
00:18:46,290 --> 00:18:48,900
technique so the second input of the

320
00:18:48,900 --> 00:18:52,290
function if a mah is fixed to s of ID

321
00:18:52,290 --> 00:18:56,940
like this and in destination if we set P

322
00:18:56,940 --> 00:19:00,090
I like this we have that H of ID can be

323
00:19:00,090 --> 00:19:02,580
represented like this this follows from

324
00:19:02,580 --> 00:19:05,340
the property of the trapdoor evolution

325
00:19:05,340 --> 00:19:09,620
algorithm and public evolution algorithm

326
00:19:11,660 --> 00:19:17,060
so this is our final with final scheme

327
00:19:17,060 --> 00:19:20,250
the this is exactly the same as the

328
00:19:20,250 --> 00:19:22,170
template construction here the

329
00:19:22,170 --> 00:19:24,390
difference is H of ID is computed using

330
00:19:24,390 --> 00:19:28,220
fully homomorphic computation like this

331
00:19:28,220 --> 00:19:31,740
so this is a comparison our scheme

332
00:19:31,740 --> 00:19:34,260
achieve the first scheme with poly

333
00:19:34,260 --> 00:19:36,030
doggerel to McMaster public key size

334
00:19:36,030 --> 00:19:38,610
among all that is based adaptive

335
00:19:38,610 --> 00:19:43,980
insecure schemes next I believe I

336
00:19:43,980 --> 00:19:48,870
explain our results on VRS first I

337
00:19:48,870 --> 00:19:52,110
explained that what is the vrf this is a

338
00:19:52,110 --> 00:19:54,870
special kind of PRF where it is possible

339
00:19:54,870 --> 00:19:57,810
to prove the correctness of the function

340
00:19:57,810 --> 00:20:01,260
value and the pre

341
00:20:01,260 --> 00:20:03,970
in previous schemes with adaptive

342
00:20:03,970 --> 00:20:05,950
security they use automatable hash

343
00:20:05,950 --> 00:20:09,100
function and as a result they suffer

344
00:20:09,100 --> 00:20:12,490
from long very long public public

345
00:20:12,490 --> 00:20:17,770
parameters because they embed the secure

346
00:20:17,770 --> 00:20:19,390
randomness care of the admissible hash

347
00:20:19,390 --> 00:20:21,250
function into the verification key or

348
00:20:21,250 --> 00:20:23,800
public parameter in a component wise

349
00:20:23,800 --> 00:20:29,230
manner like this so we can apply our

350
00:20:29,230 --> 00:20:33,490
idea of represent J in very succinct

351
00:20:33,490 --> 00:20:40,690
form in the case of VAR f as well so the

352
00:20:40,690 --> 00:20:42,940
difference is that in the ibe case we

353
00:20:42,940 --> 00:20:47,740
used for the homo fit computation so how

354
00:20:47,740 --> 00:20:51,730
about vrf J's so in vrf case we exploit

355
00:20:51,730 --> 00:20:53,530
the fact that any computation on the

356
00:20:53,530 --> 00:20:56,200
exponent can be performed if we can

357
00:20:56,200 --> 00:21:00,940
access them so this is a certain kind of

358
00:21:00,940 --> 00:21:03,670
homomorphism that we use in our

359
00:21:03,670 --> 00:21:08,370
construction next i explain our con

360
00:21:08,370 --> 00:21:11,410
constructions a bit more naive

361
00:21:11,410 --> 00:21:14,710
application of our idea is to the

362
00:21:14,710 --> 00:21:17,770
construction of vrf with long proofs but

363
00:21:17,770 --> 00:21:20,830
with short vegetation keys by adding

364
00:21:20,830 --> 00:21:23,590
some twists we can achieve the following

365
00:21:23,590 --> 00:21:26,310
trade-offs which are cheap shot proofs

366
00:21:26,310 --> 00:21:29,980
consisting of auto square to square

367
00:21:29,980 --> 00:21:32,920
block lambda group elements and long

368
00:21:32,920 --> 00:21:37,330
verification keys or we can achieve shot

369
00:21:37,330 --> 00:21:40,330
proofs and short verification keys like

370
00:21:40,330 --> 00:21:46,630
this so we can provide a certain some

371
00:21:46,630 --> 00:21:48,820
trade-offs between the parameter

372
00:21:48,820 --> 00:21:53,370
scientists and

373
00:21:53,870 --> 00:21:56,750
I know that the previous schemes require

374
00:21:56,750 --> 00:21:59,240
out of the order of lambda group

375
00:21:59,240 --> 00:22:01,370
elements for both of the briefcase on

376
00:22:01,370 --> 00:22:04,940
keys and proof sizes this is a complete

377
00:22:04,940 --> 00:22:09,610
comparison as you can see we can achieve

378
00:22:09,610 --> 00:22:13,130
shortest proof size pipe I represent the

379
00:22:13,130 --> 00:22:17,990
proof of the scheme or shortest

380
00:22:17,990 --> 00:22:21,940
verification key size or we can achieve

381
00:22:21,940 --> 00:22:27,799
trade-off between them this is a

382
00:22:27,799 --> 00:22:30,440
conclusion in our scheme we improve the

383
00:22:30,440 --> 00:22:32,450
a simplistic space efficiency of

384
00:22:32,450 --> 00:22:34,549
adaptive reset your lattice ID scheme

385
00:22:34,549 --> 00:22:37,850
and with a verifiable random function

386
00:22:37,850 --> 00:22:42,559
scheme with a large input space so the

387
00:22:42,559 --> 00:22:46,429
underlying idea of our work is to encode

388
00:22:46,429 --> 00:22:48,919
a secure randomness of admissible hash

389
00:22:48,919 --> 00:22:51,740
function into a much shorter bit to

390
00:22:51,740 --> 00:22:56,809
shrink and use some homomorphism and use

391
00:22:56,809 --> 00:23:00,470
some homomorphism and I finally remarked

392
00:23:00,470 --> 00:23:02,450
that our lattice able scheme is only

393
00:23:02,450 --> 00:23:05,320
asymptotically compact and the request

394
00:23:05,320 --> 00:23:10,309
very heavy computation so it is an open

395
00:23:10,309 --> 00:23:14,210
problem to construct a scheme with that

396
00:23:14,210 --> 00:23:17,779
is very efficient in practical parameter

397
00:23:17,779 --> 00:23:20,870
setting that's all thank you for your

398
00:23:20,870 --> 00:23:22,260
attention

399
00:23:22,260 --> 00:23:28,289
[Applause]

