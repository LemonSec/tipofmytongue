1
00:00:04,870 --> 00:00:08,050
so our work is about pretty keep

2
00:00:08,050 --> 00:00:10,600
encodings and predicate encodings are a

3
00:00:10,600 --> 00:00:13,300
primitive that is used to build pretty

4
00:00:13,300 --> 00:00:15,010
good encryption so I will start by

5
00:00:15,010 --> 00:00:16,209
explaining what pretty good

6
00:00:16,209 --> 00:00:18,369
SHINee's predict an encryption there is

7
00:00:18,369 --> 00:00:20,890
no master Authority and there are some

8
00:00:20,890 --> 00:00:23,650
users and this master authority provides

9
00:00:23,650 --> 00:00:26,710
secret key to the users and every every

10
00:00:26,710 --> 00:00:28,869
key is associated to a certain value

11
00:00:28,869 --> 00:00:32,198
while that can be different for for

12
00:00:32,198 --> 00:00:34,629
every user and now in this setting

13
00:00:34,629 --> 00:00:36,580
everyone is allowed to encrypt and when

14
00:00:36,580 --> 00:00:38,200
you run where you're going to encrypt

15
00:00:38,200 --> 00:00:41,829
you need to think of a value X and what

16
00:00:41,829 --> 00:00:43,960
you produce his ciphertext associated to

17
00:00:43,960 --> 00:00:48,790
to this value X and now so the

18
00:00:48,790 --> 00:00:50,770
requirement for predicate encryption is

19
00:00:50,770 --> 00:00:55,210
that all the users that own a kid such

20
00:00:55,210 --> 00:00:57,489
that a certain predicate involving X and

21
00:00:57,489 --> 00:01:00,309
the value Y from the key is true will be

22
00:01:00,309 --> 00:01:02,530
able to decrypt for example in this case

23
00:01:02,530 --> 00:01:04,930
let's say only the first girl is able to

24
00:01:04,930 --> 00:01:07,180
decrypt a very important requirement

25
00:01:07,180 --> 00:01:09,399
also for predicate encryption is

26
00:01:09,399 --> 00:01:12,700
collision resistance so we want to avoid

27
00:01:12,700 --> 00:01:14,800
these two guys that individually cannot

28
00:01:14,800 --> 00:01:17,530
decrypt we want to avoid that they they

29
00:01:17,530 --> 00:01:19,720
can combine their keys for example and

30
00:01:19,720 --> 00:01:22,569
be able to decrypt so in general no

31
00:01:22,569 --> 00:01:25,330
matter how many kids you have if none of

32
00:01:25,330 --> 00:01:27,550
the keys can individually decrypt is he

33
00:01:27,550 --> 00:01:29,530
protects you should not be able to

34
00:01:29,530 --> 00:01:33,520
decrypt more formally predicating cube

35
00:01:33,520 --> 00:01:35,920
encryption consists of four algorithms

36
00:01:35,920 --> 00:01:38,050
that they set up this is run by the

37
00:01:38,050 --> 00:01:41,020
master authority encryption that from a

38
00:01:41,020 --> 00:01:43,179
message and certain value X produces a

39
00:01:43,179 --> 00:01:46,569
ciphertext for X key generation this is

40
00:01:46,569 --> 00:01:48,580
run only by the master authority as you

41
00:01:48,580 --> 00:01:50,920
can see this week needs the master

42
00:01:50,920 --> 00:01:54,250
secret key and this produces secret keys

43
00:01:54,250 --> 00:01:57,130
for the values Y and decryption are only

44
00:01:57,130 --> 00:02:02,050
works when the predicate is true okay so

45
00:02:02,050 --> 00:02:04,500
there has been many works

46
00:02:04,500 --> 00:02:07,320
in this area here is showing some of

47
00:02:07,320 --> 00:02:10,470
them but usually all of them call it one

48
00:02:10,470 --> 00:02:13,230
of these problems for example some of

49
00:02:13,230 --> 00:02:15,390
them for very specific predicates for

50
00:02:15,390 --> 00:02:18,180
example the inner product if you think

51
00:02:18,180 --> 00:02:22,650
of us if x and y as vectors the inner

52
00:02:22,650 --> 00:02:24,930
prayed case says the inner probability

53
00:02:24,930 --> 00:02:27,000
in this vectors is your exam so some of

54
00:02:27,000 --> 00:02:29,700
these works are for very specific

55
00:02:29,700 --> 00:02:31,860
predicates like inner product or boolean

56
00:02:31,860 --> 00:02:35,430
formulas another word works use very

57
00:02:35,430 --> 00:02:38,490
very strong assumptions another other

58
00:02:38,490 --> 00:02:40,560
problems hard like composite order

59
00:02:40,560 --> 00:02:42,600
groups they use computers that are

60
00:02:42,600 --> 00:02:45,030
supposed to be not so efficient and they

61
00:02:45,030 --> 00:02:47,370
usually have bad performance what I mean

62
00:02:47,370 --> 00:02:49,110
by this is that for example you may need

63
00:02:49,110 --> 00:02:51,570
several group elements to encode a very

64
00:02:51,570 --> 00:02:55,560
small policy ok so after all these works

65
00:02:55,560 --> 00:02:59,580
two years ago these two words appeared

66
00:02:59,580 --> 00:03:05,630
and basically they allow to to build a

67
00:03:05,630 --> 00:03:07,980
predicate encryption in in in a much

68
00:03:07,980 --> 00:03:10,530
simpler way so for example they allowed

69
00:03:10,530 --> 00:03:12,930
to achieve flexible predicates you are

70
00:03:12,930 --> 00:03:14,280
not restricted to use one of these

71
00:03:14,280 --> 00:03:16,860
specific predicates they also use

72
00:03:16,860 --> 00:03:18,540
reasonable assumptions you see kaeleen

73
00:03:18,540 --> 00:03:21,180
in this one and the more general matrix

74
00:03:21,180 --> 00:03:24,000
th they are defined over prime order

75
00:03:24,000 --> 00:03:25,980
groups and yeah they have flexible

76
00:03:25,980 --> 00:03:28,380
performance so predicate encodings as I

77
00:03:28,380 --> 00:03:30,270
said our building block to build

78
00:03:30,270 --> 00:03:32,400
predicate encryption and predicate

79
00:03:32,400 --> 00:03:35,010
encodings are are used in this in this

80
00:03:35,010 --> 00:03:37,230
work here that these two words are

81
00:03:37,230 --> 00:03:39,150
modular frameworks I'm going to explain

82
00:03:39,150 --> 00:03:43,800
a VD idea of these two two works so they

83
00:03:43,800 --> 00:03:46,080
define a simpler encoding simple

84
00:03:46,080 --> 00:03:48,540
primitive that they call predicate

85
00:03:48,540 --> 00:03:50,550
encoding in one case and pair encoding

86
00:03:50,550 --> 00:03:51,130
in the

87
00:03:51,130 --> 00:03:54,520
work and from this primitive they can

88
00:03:54,520 --> 00:03:56,830
combine this with a compiler and they

89
00:03:56,830 --> 00:03:58,660
can produce a fully secure predicate

90
00:03:58,660 --> 00:04:01,750
encryption for 4p as you see this

91
00:04:01,750 --> 00:04:04,840
predicate depends on this simple

92
00:04:04,840 --> 00:04:06,880
primitive so if you replace this

93
00:04:06,880 --> 00:04:09,310
primitive by another one for different

94
00:04:09,310 --> 00:04:11,080
predicates you automatically get a fully

95
00:04:11,080 --> 00:04:14,970
security encryption for a new predicate

96
00:04:15,060 --> 00:04:20,260
okay so currently the there have been

97
00:04:20,260 --> 00:04:23,560
some improvements on this area and now

98
00:04:23,560 --> 00:04:25,360
we have like three three kind of

99
00:04:25,360 --> 00:04:27,580
different coatings with different

100
00:04:27,580 --> 00:04:30,040
predicates so there is these tag based

101
00:04:30,040 --> 00:04:33,340
encodings in this case the compiler is

102
00:04:33,340 --> 00:04:35,470
supposed to be a bit more efficient you

103
00:04:35,470 --> 00:04:39,490
can save some group elements then we

104
00:04:39,490 --> 00:04:42,550
have a predicate encodings if this is

105
00:04:42,550 --> 00:04:43,840
what we are going to talk about in this

106
00:04:43,840 --> 00:04:46,810
talk and current coatings which are

107
00:04:46,810 --> 00:04:48,400
supposed to be more more expressive

108
00:04:48,400 --> 00:04:54,070
because they they admit a computational

109
00:04:54,070 --> 00:04:56,500
notion of security while this other two

110
00:04:56,500 --> 00:04:58,630
are only defined for an information

111
00:04:58,630 --> 00:05:01,990
theoretical notion of security so some

112
00:05:01,990 --> 00:05:03,070
improvements have been done by our

113
00:05:03,070 --> 00:05:05,560
volunteers in this area I will mention

114
00:05:05,560 --> 00:05:08,110
this later but instead we focus for

115
00:05:08,110 --> 00:05:11,080
focus on predicates and callings and we

116
00:05:11,080 --> 00:05:14,290
do what we do in this work is first will

117
00:05:14,290 --> 00:05:16,690
provide a new characterization of

118
00:05:16,690 --> 00:05:20,290
predicates encodings we shows how to

119
00:05:20,290 --> 00:05:22,480
optimize them and provide some

120
00:05:22,480 --> 00:05:24,160
transformations like for example

121
00:05:24,160 --> 00:05:27,280
detection contraction and negation so if

122
00:05:27,280 --> 00:05:29,380
you start from a predicate encoding for

123
00:05:29,380 --> 00:05:32,140
p1 and another one for p2 we show how to

124
00:05:32,140 --> 00:05:33,850
convert this into a pretty cool encoding

125
00:05:33,850 --> 00:05:37,180
for p1 and p2 for example and then we

126
00:05:37,180 --> 00:05:39,010
show a new construction start of these

127
00:05:39,010 --> 00:05:42,820
results okay in this work we also

128
00:05:42,820 --> 00:05:45,130
consider the relationship we investigate

129
00:05:45,130 --> 00:05:46,630
the relation between these primitives

130
00:05:46,630 --> 00:05:51,490
and we we show how to transform

131
00:05:51,490 --> 00:05:53,140
tag-based encodings into predicates

132
00:05:53,140 --> 00:05:55,450
encodings and predicate encodings into

133
00:05:55,450 --> 00:05:56,170
param codings

134
00:05:56,170 --> 00:05:58,900
we formalize basically this falter idea

135
00:05:58,900 --> 00:06:01,180
of the fact that pairing callings are

136
00:06:01,180 --> 00:06:01,449
more

137
00:06:01,449 --> 00:06:05,099
expressive so now I'm gonna define

138
00:06:05,099 --> 00:06:06,849
predicate in context this is the

139
00:06:06,849 --> 00:06:10,029
original definition basically predicate

140
00:06:10,029 --> 00:06:13,960
encodings are five algorithms the first

141
00:06:13,960 --> 00:06:17,289
one I stands for sender encoding this is

142
00:06:17,289 --> 00:06:21,490
used in encryption this is these two are

143
00:06:21,490 --> 00:06:24,069
called receiver encoding and key

144
00:06:24,069 --> 00:06:26,020
encoding and they are used for key

145
00:06:26,020 --> 00:06:27,610
generation and these two are used for

146
00:06:27,610 --> 00:06:31,900
decryption so okay so these algorithms

147
00:06:31,900 --> 00:06:34,509
must satisfy three properties the first

148
00:06:34,509 --> 00:06:36,580
one is they must be all linear in the

149
00:06:36,580 --> 00:06:39,999
last component second one is called

150
00:06:39,999 --> 00:06:42,099
alpha reconstruction which basically

151
00:06:42,099 --> 00:06:44,789
says when when the predicate is true

152
00:06:44,789 --> 00:06:47,469
there is some equation that falls and

153
00:06:47,469 --> 00:06:51,189
here you can think of alpha as a secret

154
00:06:51,189 --> 00:06:52,899
that allows you to the creep

155
00:06:52,899 --> 00:06:55,710
so basically when this equations halt

156
00:06:55,710 --> 00:06:58,270
you can compute alpha in exponent

157
00:06:58,270 --> 00:06:59,770
somehow so you will be able to decrypt

158
00:06:59,770 --> 00:07:02,649
and the last property is called alpha

159
00:07:02,649 --> 00:07:05,560
privacy that says and when the predicate

160
00:07:05,560 --> 00:07:06,550
is is false

161
00:07:06,550 --> 00:07:08,889
these two distributions are identical

162
00:07:08,889 --> 00:07:12,520
and if you if you look here alpha

163
00:07:12,520 --> 00:07:15,189
appears only on the Left left-hand side

164
00:07:15,189 --> 00:07:17,770
so intuitively this means alpha is

165
00:07:17,770 --> 00:07:20,339
information theoretically hidden

166
00:07:20,339 --> 00:07:22,749
intuitively this is one what allows you

167
00:07:22,749 --> 00:07:28,029
to argue security for this for this okay

168
00:07:28,029 --> 00:07:29,289
so I'm gonna redefine predicate

169
00:07:29,289 --> 00:07:31,029
encodings and the first thing I'm gonna

170
00:07:31,029 --> 00:07:33,909
do is to use matrix notation because

171
00:07:33,909 --> 00:07:36,580
since all the algorithms are linear you

172
00:07:36,580 --> 00:07:41,259
can you can I think of se of X W as the

173
00:07:41,259 --> 00:07:44,860
product of a matrix s e of X this matrix

174
00:07:44,860 --> 00:07:47,409
times a vector W so in particular we'll

175
00:07:47,409 --> 00:07:49,599
be talking about five matrices instead

176
00:07:49,599 --> 00:07:52,899
of five algorithms now let's see a very

177
00:07:52,899 --> 00:07:54,759
simple example the predicate in calling

178
00:07:54,759 --> 00:07:58,629
for it for the quality predicate so

179
00:07:58,629 --> 00:08:00,370
these five algorithms are pretty

180
00:08:00,370 --> 00:08:01,930
uncommon for this predicate how can we

181
00:08:01,930 --> 00:08:04,360
validate this well you need to check all

182
00:08:04,360 --> 00:08:06,039
the properties so first let's check

183
00:08:06,039 --> 00:08:08,649
linearity all the algorithms are linear

184
00:08:08,649 --> 00:08:10,329
as you see these three are linear

185
00:08:10,329 --> 00:08:12,420
because they are the identity

186
00:08:12,420 --> 00:08:14,760
component and this other two are also

187
00:08:14,760 --> 00:08:19,050
linear in the last component then we

188
00:08:19,050 --> 00:08:21,650
also need to check after a construction

189
00:08:21,650 --> 00:08:25,080
so when the predicate is true we need

190
00:08:25,080 --> 00:08:26,880
these two equations to be satisfied the

191
00:08:26,880 --> 00:08:29,430
second one is always satisfied and when

192
00:08:29,430 --> 00:08:32,610
the predicate is true x equals y and

193
00:08:32,610 --> 00:08:34,590
therefore these two things are also

194
00:08:34,590 --> 00:08:37,919
equal so this also satisfy another

195
00:08:37,919 --> 00:08:41,039
privacy is a bit more tricky but it can

196
00:08:41,039 --> 00:08:42,900
be justified so we need to show that

197
00:08:42,900 --> 00:08:44,690
these two distributions are identical

198
00:08:44,690 --> 00:08:48,900
when the predicate is is false and to do

199
00:08:48,900 --> 00:08:51,210
so you can argue that when X is

200
00:08:51,210 --> 00:08:53,400
different from why these two things are

201
00:08:53,400 --> 00:08:55,350
independent when you sample Omega at

202
00:08:55,350 --> 00:08:57,810
random so this is how you validate a

203
00:08:57,810 --> 00:08:59,460
predicate and continue check that it

204
00:08:59,460 --> 00:09:03,360
satisfies all the properties so okay so

205
00:09:03,360 --> 00:09:05,940
in matrix notation this looks something

206
00:09:05,940 --> 00:09:06,980
like this

207
00:09:06,980 --> 00:09:09,560
and I think we know we are ready to

208
00:09:09,560 --> 00:09:11,970
redefine a predicate and colleagues in

209
00:09:11,970 --> 00:09:15,750
the way we did in our work so we start

210
00:09:15,750 --> 00:09:17,490
from these five algorithms and since I'm

211
00:09:17,490 --> 00:09:19,380
using matrix notation we can forget

212
00:09:19,380 --> 00:09:22,710
about a linear linearity property so

213
00:09:22,710 --> 00:09:25,620
after I see the reconstruction if we use

214
00:09:25,620 --> 00:09:27,300
matrices becomes this equality between

215
00:09:27,300 --> 00:09:32,970
matrices and alpha privacy can be

216
00:09:32,970 --> 00:09:34,740
expressed as an algebraic property so

217
00:09:34,740 --> 00:09:37,920
this is one of our main results so this

218
00:09:37,920 --> 00:09:40,260
in the fact that two distributions are

219
00:09:40,260 --> 00:09:41,550
identical we showed that this is

220
00:09:41,550 --> 00:09:45,480
completely equivalent to the existence

221
00:09:45,480 --> 00:09:47,820
of a solution of certain in linear

222
00:09:47,820 --> 00:09:51,720
system of equations so this is very

223
00:09:51,720 --> 00:09:53,370
useful because this algebraic property

224
00:09:53,370 --> 00:09:54,870
is what is going to allows us to prove

225
00:09:54,870 --> 00:09:56,760
all our further results in the in the

226
00:09:56,760 --> 00:10:00,690
paper ok so I want to point out that you

227
00:10:00,690 --> 00:10:04,890
can call this w star the witness for the

228
00:10:04,890 --> 00:10:06,300
fact that the two distributions are

229
00:10:06,300 --> 00:10:09,600
identical okay another modification that

230
00:10:09,600 --> 00:10:11,400
I want to do is I would like to put

231
00:10:11,400 --> 00:10:13,860
these two rhythms inside here and the

232
00:10:13,860 --> 00:10:15,720
reason is that these two are used for

233
00:10:15,720 --> 00:10:18,090
decryption you you are only going to the

234
00:10:18,090 --> 00:10:19,560
create when the predicate is true so

235
00:10:19,560 --> 00:10:23,380
yeah we we can do this and the reason

236
00:10:23,380 --> 00:10:25,540
releasing reason for this is that when

237
00:10:25,540 --> 00:10:28,840
these algorithms exist you can complete

238
00:10:28,840 --> 00:10:30,820
them efficiently because you can

239
00:10:30,820 --> 00:10:32,290
basically apply Gaussian elimination

240
00:10:32,290 --> 00:10:34,510
here and you can complete the solution

241
00:10:34,510 --> 00:10:37,000
algorithms efficiently so there is no

242
00:10:37,000 --> 00:10:38,260
need to consider them actually

243
00:10:38,260 --> 00:10:40,150
explicitly in the definition of the

244
00:10:40,150 --> 00:10:43,030
encoding and why is this interesting

245
00:10:43,030 --> 00:10:45,940
because whoa look at this we have two

246
00:10:45,940 --> 00:10:48,850
expressions that look kind of the same

247
00:10:48,850 --> 00:10:50,410
they are in the same shape we are saying

248
00:10:50,410 --> 00:10:53,410
in both in both there exists Victor

249
00:10:53,410 --> 00:10:56,410
satisfying a linear system and in fact

250
00:10:56,410 --> 00:10:57,940
these two conditions we show that they

251
00:10:57,940 --> 00:11:00,130
are complementary so that's why I'm

252
00:11:00,130 --> 00:11:02,290
using and complementary colors yellow

253
00:11:02,290 --> 00:11:07,150
and purple okay so what I mean by this

254
00:11:07,150 --> 00:11:09,670
is that if this is the space of all

255
00:11:09,670 --> 00:11:12,990
pairs XY in this space some of the

256
00:11:12,990 --> 00:11:15,580
points will be yellow some of them will

257
00:11:15,580 --> 00:11:18,430
be purple but what I mean is that this

258
00:11:18,430 --> 00:11:20,950
region cannot exist like everything has

259
00:11:20,950 --> 00:11:24,460
to be either yellow or purple and this

260
00:11:24,460 --> 00:11:27,820
is useful because now if we only have

261
00:11:27,820 --> 00:11:30,880
three matrices we can we can say that

262
00:11:30,880 --> 00:11:32,470
these three three make three matrices

263
00:11:32,470 --> 00:11:35,470
arbitrary matrices induce a predicate

264
00:11:35,470 --> 00:11:37,270
and calling a valid predicate for the

265
00:11:37,270 --> 00:11:40,530
predicate you are in the yellow region

266
00:11:40,530 --> 00:11:44,230
why so because okay let's let's see when

267
00:11:44,230 --> 00:11:46,480
the predicate is true you are in the

268
00:11:46,480 --> 00:11:48,120
yellow region by definition and

269
00:11:48,120 --> 00:11:50,350
therefore you satisfy Alfred

270
00:11:50,350 --> 00:11:52,120
construction because yellow is exactly a

271
00:11:52,120 --> 00:11:54,640
fair construction and when the predicate

272
00:11:54,640 --> 00:11:58,450
is false since you cannot be in the

273
00:11:58,450 --> 00:12:00,070
yellow region you must be in the purple

274
00:12:00,070 --> 00:12:01,390
region because they are complementary

275
00:12:01,390 --> 00:12:05,170
but purple is exactly privacy so

276
00:12:05,170 --> 00:12:07,960
basically given any three matrices we

277
00:12:07,960 --> 00:12:09,850
can say these three matrices in views of

278
00:12:09,850 --> 00:12:11,950
valid predicate encoding for this

279
00:12:11,950 --> 00:12:14,940
predicate here I'm basically using the

280
00:12:14,940 --> 00:12:17,110
definition from the purple I'm saying

281
00:12:17,110 --> 00:12:20,740
you are not in the purple so to see an

282
00:12:20,740 --> 00:12:23,280
example if we consider previous encoding

283
00:12:23,280 --> 00:12:26,080
now if we are given just these three

284
00:12:26,080 --> 00:12:28,810
matrices without any analysis we already

285
00:12:28,810 --> 00:12:29,950
know that this is a valid predicate

286
00:12:29,950 --> 00:12:32,560
encoding for this predicate the

287
00:12:32,560 --> 00:12:36,120
predicate that says you cannot build

288
00:12:36,120 --> 00:12:39,280
vector 0 1 as a linear combination of

289
00:12:39,280 --> 00:12:43,300
these two vectors and with literal

290
00:12:43,300 --> 00:12:44,950
nancy's you can show that this is

291
00:12:44,950 --> 00:12:47,740
equivalent to x equals y as we we knew

292
00:12:47,740 --> 00:12:51,540
from before ok I want to point out that

293
00:12:51,540 --> 00:12:55,600
in work by robin chase from your

294
00:12:55,600 --> 00:12:58,750
this year they consider AHA a notion of

295
00:12:58,750 --> 00:13:01,000
encoding so this is in the other setting

296
00:13:01,000 --> 00:13:03,700
of pairing codings and they consider

297
00:13:03,700 --> 00:13:05,020
this notion of encodings that have

298
00:13:05,020 --> 00:13:07,840
similar ideas to toward we we obtain

299
00:13:07,840 --> 00:13:09,910
from from this implicit predicate and

300
00:13:09,910 --> 00:13:12,520
the reason is that they built a compiler

301
00:13:12,520 --> 00:13:16,240
that takes what they call non trivially

302
00:13:16,240 --> 00:13:20,950
broken encoding and produces a predicate

303
00:13:20,950 --> 00:13:24,340
encryption scheme out of this under a q

304
00:13:24,340 --> 00:13:26,350
type assumption and why is this similar

305
00:13:26,350 --> 00:13:28,810
because they they also managed to relate

306
00:13:28,810 --> 00:13:32,140
the notions of reconstruct ability and

307
00:13:32,140 --> 00:13:33,910
privacy so what they are doing is

308
00:13:33,910 --> 00:13:36,550
basically a non trivial and not really

309
00:13:36,550 --> 00:13:39,310
broken encoding is basically an encoding

310
00:13:39,310 --> 00:13:41,650
that does not satisfy reconstruct

311
00:13:41,650 --> 00:13:44,590
ability and basically they argue that

312
00:13:44,590 --> 00:13:49,870
there is enough to to have privacy ok so

313
00:13:49,870 --> 00:13:51,670
I'm just going to talk about our

314
00:13:51,670 --> 00:13:54,070
transformations so one of the things we

315
00:13:54,070 --> 00:13:55,480
consider is how can we simplify

316
00:13:55,480 --> 00:13:58,780
predicate encodings and the operation

317
00:13:58,780 --> 00:14:00,430
that we can see there is ok we work with

318
00:14:00,430 --> 00:14:02,200
matrices so if we start with these 3

319
00:14:02,200 --> 00:14:04,990
encoding what happens if we multiply by

320
00:14:04,990 --> 00:14:09,000
a matrix a and B obtaining new encoding

321
00:14:09,000 --> 00:14:12,040
so what we want to achieve is that the

322
00:14:12,040 --> 00:14:14,680
implicit predicate associated to these

323
00:14:14,680 --> 00:14:18,460
three matrices is preserved after this

324
00:14:18,460 --> 00:14:20,860
multiplication so in our results will

325
00:14:20,860 --> 00:14:22,710
give the conditions or on these matrices

326
00:14:22,710 --> 00:14:25,930
such that this predicate is preserved

327
00:14:25,930 --> 00:14:29,470
and why why does this simplify because

328
00:14:29,470 --> 00:14:32,980
for example if multiplying you get

329
00:14:32,980 --> 00:14:35,980
smaller matrices this will be translated

330
00:14:35,980 --> 00:14:38,470
into performance improvements and also

331
00:14:38,470 --> 00:14:40,490
saving of some group

332
00:14:40,490 --> 00:14:44,280
and yeah so you can also consider

333
00:14:44,280 --> 00:14:47,400
multiplying from the right and we also

334
00:14:47,400 --> 00:14:50,880
consider that case in in our paper and

335
00:14:50,880 --> 00:14:52,560
then we want to talk about these

336
00:14:52,560 --> 00:14:55,410
transformations so we provide generic

337
00:14:55,410 --> 00:14:57,450
transformations for predicate encodings

338
00:14:57,450 --> 00:15:00,030
I want to point out that a conjunction

339
00:15:00,030 --> 00:15:02,250
and dwell to our predicate by the way

340
00:15:02,250 --> 00:15:04,830
did well predict it swaps the rows of x

341
00:15:04,830 --> 00:15:07,560
and y before if you remember secret keys

342
00:15:07,560 --> 00:15:10,250
were associated to values Y and

343
00:15:10,250 --> 00:15:12,810
ciphertext to X when you play it well

344
00:15:12,810 --> 00:15:14,850
predicates it's the other way around so

345
00:15:14,850 --> 00:15:16,140
this can make the difference for example

346
00:15:16,140 --> 00:15:20,940
between secret key policy and ciphertext

347
00:15:20,940 --> 00:15:23,790
policy a B for example so in the

348
00:15:23,790 --> 00:15:25,620
framework of parent codings a trap Adam

349
00:15:25,620 --> 00:15:29,910
already shows some construction for the

350
00:15:29,910 --> 00:15:32,610
conjunction and it will predict a and in

351
00:15:32,610 --> 00:15:34,170
our work we show that our our

352
00:15:34,170 --> 00:15:35,610
constructions are slightly more

353
00:15:35,610 --> 00:15:38,520
efficient and just to give an intuition

354
00:15:38,520 --> 00:15:40,050
about how these transformations work I'm

355
00:15:40,050 --> 00:15:43,410
going to talk about our negation so

356
00:15:43,410 --> 00:15:46,980
basically if we start from these three

357
00:15:46,980 --> 00:15:50,820
matrices we build again like this we we

358
00:15:50,820 --> 00:15:54,120
create image matrices as blocks of

359
00:15:54,120 --> 00:15:56,460
matrices using the the previous ones so

360
00:15:56,460 --> 00:16:00,000
for example the new as e matrix is gonna

361
00:16:00,000 --> 00:16:03,600
be the original one transposed then we

362
00:16:03,600 --> 00:16:05,810
have a block with minus the identity and

363
00:16:05,810 --> 00:16:09,930
then we have a block of zeros by a

364
00:16:09,930 --> 00:16:13,320
similar similar way we can build these

365
00:16:13,320 --> 00:16:15,150
three matrices and thanks to our

366
00:16:15,150 --> 00:16:17,550
algebraic characterization we can show

367
00:16:17,550 --> 00:16:19,470
that this is in fact a valid predicate

368
00:16:19,470 --> 00:16:22,560
encoding for the negative predicate of

369
00:16:22,560 --> 00:16:27,330
the original one okay I want to talk a

370
00:16:27,330 --> 00:16:28,650
bit about some applications

371
00:16:28,650 --> 00:16:32,220
so in fact we managed to to improve some

372
00:16:32,220 --> 00:16:34,980
existing encodings for example if we

373
00:16:34,980 --> 00:16:38,990
take this encoding from from this work

374
00:16:38,990 --> 00:16:41,040
predicating coding for boolean formulas

375
00:16:41,040 --> 00:16:44,280
and we transform it with a negation and

376
00:16:44,280 --> 00:16:47,190
then we simplify it we get a simpler

377
00:16:47,190 --> 00:16:48,240
encoding

378
00:16:48,240 --> 00:16:51,070
by simpler I mean it has fear group

379
00:16:51,070 --> 00:16:52,990
elements in the master public key this

380
00:16:52,990 --> 00:16:54,459
will be translated into efficiency

381
00:16:54,459 --> 00:16:57,459
improvements and also the secret key

382
00:16:57,459 --> 00:17:01,510
size is variable so if we if we produce

383
00:17:01,510 --> 00:17:04,780
a secret key for a small formula secret

384
00:17:04,780 --> 00:17:07,329
will be small and if the formula is

385
00:17:07,329 --> 00:17:09,910
large secret will be large but I want to

386
00:17:09,910 --> 00:17:11,549
point out that in the original encoding

387
00:17:11,549 --> 00:17:14,079
secret keys were always large on with

388
00:17:14,079 --> 00:17:17,429
the worst case scenario for the size

389
00:17:17,429 --> 00:17:19,780
okay there is a small problem here which

390
00:17:19,780 --> 00:17:24,910
is our our encoding is negative so if

391
00:17:24,910 --> 00:17:27,660
you want to to have a normal behavior

392
00:17:27,660 --> 00:17:30,760
you need to negate again and we can do

393
00:17:30,760 --> 00:17:33,520
this negating also from the input so for

394
00:17:33,520 --> 00:17:36,669
example instead of giving attributes a B

395
00:17:36,669 --> 00:17:39,429
C and D to the users instead of getting

396
00:17:39,429 --> 00:17:42,309
a user a and B you give not C and not D

397
00:17:42,309 --> 00:17:46,030
so you are with negative attributes and

398
00:17:46,030 --> 00:17:48,160
then instead of considering policies you

399
00:17:48,160 --> 00:17:51,730
encrypt for negative policies and if on

400
00:17:51,730 --> 00:17:53,140
top of these you are using and our

401
00:17:53,140 --> 00:17:55,809
negative encoding which is simpler then

402
00:17:55,809 --> 00:17:59,490
you can you can have the normal behavior

403
00:17:59,490 --> 00:18:02,049
okay so here I have some benchmarks I

404
00:18:02,049 --> 00:18:04,390
don't know if you can see it properly

405
00:18:04,390 --> 00:18:08,040
but so this is a comparison for a set up

406
00:18:08,040 --> 00:18:11,620
so another thing that we we consider is

407
00:18:11,620 --> 00:18:15,460
so now we can do dual policy baby in the

408
00:18:15,460 --> 00:18:18,340
framework predicate encodings so yeah

409
00:18:18,340 --> 00:18:19,690
this was already considering the other

410
00:18:19,690 --> 00:18:22,540
framework parent columns and basically

411
00:18:22,540 --> 00:18:24,340
we can do this we by combining the

412
00:18:24,340 --> 00:18:25,919
conjunction and do I predict a

413
00:18:25,919 --> 00:18:29,080
transformation another thing we can

414
00:18:29,080 --> 00:18:31,540
achieve this revocation so we proposed

415
00:18:31,540 --> 00:18:34,480
this method for revocation you combine a

416
00:18:34,480 --> 00:18:37,660
predicate p1 for the actual access

417
00:18:37,660 --> 00:18:40,270
policy that you want to use with a

418
00:18:40,270 --> 00:18:42,540
predicate for broadcast encryption and

419
00:18:42,540 --> 00:18:46,390
by using this you can revoke some user

420
00:18:46,390 --> 00:18:48,640
so even if two users have the same

421
00:18:48,640 --> 00:18:50,110
secret key for the same set of

422
00:18:50,110 --> 00:18:53,140
attributes a and this set of attributes

423
00:18:53,140 --> 00:18:56,500
is supposed to be enough to the

424
00:18:56,500 --> 00:18:59,020
certain ciphertext you can still use

425
00:18:59,020 --> 00:19:00,419
this part to

426
00:19:00,419 --> 00:19:03,840
one of them and not the other and in

427
00:19:03,840 --> 00:19:05,220
fact we show that with this mechanism

428
00:19:05,220 --> 00:19:07,759
for revocation you can achieve

429
00:19:07,759 --> 00:19:10,139
revocation for thousands of users in

430
00:19:10,139 --> 00:19:12,690
reasonable time here you have for other

431
00:19:12,690 --> 00:19:15,239
isms of an implementation of our

432
00:19:15,239 --> 00:19:21,450
primitive okay and then we have other

433
00:19:21,450 --> 00:19:23,909
possible applications you can read more

434
00:19:23,909 --> 00:19:25,859
about this in the paper but for example

435
00:19:25,859 --> 00:19:28,739
we see also how to improve predicate

436
00:19:28,739 --> 00:19:32,070
encodings to support delegation so this

437
00:19:32,070 --> 00:19:33,809
would allow you to for example to your

438
00:19:33,809 --> 00:19:37,440
secret key and weaken it into this

439
00:19:37,440 --> 00:19:39,749
powerful one that you can delegate also

440
00:19:39,749 --> 00:19:41,820
you can also use this to achieve forward

441
00:19:41,820 --> 00:19:44,279
secrecy if you just if you destroy your

442
00:19:44,279 --> 00:19:48,389
or you know key yeah so basically to sum

443
00:19:48,389 --> 00:19:53,129
up in this work we consider this this

444
00:19:53,129 --> 00:19:56,519
framework of encoding that simplify the

445
00:19:56,519 --> 00:19:58,950
analysis of predicate encryption and

446
00:19:58,950 --> 00:20:04,739
construction and we focus on predicate

447
00:20:04,739 --> 00:20:07,200
encodings we try to improve their

448
00:20:07,200 --> 00:20:09,659
expressive 'ti and efficiency and to do

449
00:20:09,659 --> 00:20:12,840
so we define a new notion of predicate

450
00:20:12,840 --> 00:20:17,399
encodings we combine them and provide

451
00:20:17,399 --> 00:20:20,009
transformations optimizations and yeah

452
00:20:20,009 --> 00:20:21,539
we also give some possible applications

453
00:20:21,539 --> 00:20:23,460
of all these results and we also

454
00:20:23,460 --> 00:20:25,230
consider the relations between these

455
00:20:25,230 --> 00:20:28,830
encoding primitives so I want to finish

456
00:20:28,830 --> 00:20:32,279
with or some questions in fact yeah so

457
00:20:32,279 --> 00:20:34,379
for example given a predicate encoding

458
00:20:34,379 --> 00:20:36,149
or a predicate sorry what is the minimum

459
00:20:36,149 --> 00:20:37,619
pretty good claim that you can build for

460
00:20:37,619 --> 00:20:41,429
it or this one here can we build

461
00:20:41,429 --> 00:20:42,720
predicate encodings for regular

462
00:20:42,720 --> 00:20:44,759
languages or unbounded ABI I'm not sure

463
00:20:44,759 --> 00:20:47,399
about this these two can be achieved in

464
00:20:47,399 --> 00:20:50,629
the framework or for parent callings and

465
00:20:50,629 --> 00:20:53,249
a very interesting one is why does this

466
00:20:53,249 --> 00:20:57,629
negation trick works so as you saw we

467
00:20:57,629 --> 00:20:59,639
managed to improve an existing encoding

468
00:20:59,639 --> 00:21:03,090
by negating it and simplifying and this

469
00:21:03,090 --> 00:21:05,159
this does not only work for the boolean

470
00:21:05,159 --> 00:21:06,869
formula encoding that I mentioned but it

471
00:21:06,869 --> 00:21:08,580
also works for example for our somatic

472
00:21:08,580 --> 00:21:09,539
sperm

473
00:21:09,539 --> 00:21:12,779
so the question is why does it work also

474
00:21:12,779 --> 00:21:16,080
you may consider of negating twice but

475
00:21:16,080 --> 00:21:19,139
if you negate twice you always end up go

476
00:21:19,139 --> 00:21:21,899
go back to the original encoding so I

477
00:21:21,899 --> 00:21:25,580
would really like to understand why does

478
00:21:25,580 --> 00:21:28,679
negating simplifies because it's a

479
00:21:28,679 --> 00:21:31,200
interesting question for me yeah so this

480
00:21:31,200 --> 00:21:32,609
was all thank you very much for your

481
00:21:32,609 --> 00:21:33,700
attention

482
00:21:33,700 --> 00:21:39,140
[Applause]

