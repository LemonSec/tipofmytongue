1
00:00:05,130 --> 00:00:08,830
so authenticated encryption is one of

2
00:00:08,830 --> 00:00:12,430
the success stories of cryptography in

3
00:00:12,430 --> 00:00:14,440
creating a dialogue between theory and

4
00:00:14,440 --> 00:00:17,730
practice it was characterized by

5
00:00:17,730 --> 00:00:21,010
repeated interaction among academia

6
00:00:21,010 --> 00:00:25,330
industry and standards bodies and in

7
00:00:25,330 --> 00:00:28,300
fact you can see already in the 90s you

8
00:00:28,300 --> 00:00:30,880
have these technologies coming out you

9
00:00:30,880 --> 00:00:33,370
know web SSL GSM where they're trying to

10
00:00:33,370 --> 00:00:35,290
combine encryption algorithms

11
00:00:35,290 --> 00:00:37,720
authenticity algorithms to somehow

12
00:00:37,720 --> 00:00:40,149
achieve security with of course varying

13
00:00:40,149 --> 00:00:43,750
degrees of success this is what then

14
00:00:43,750 --> 00:00:46,450
inspired valerian on-prem Prix in 2000

15
00:00:46,450 --> 00:00:49,480
to identify and isolate this goal of

16
00:00:49,480 --> 00:00:50,950
authenticated encryption which I've

17
00:00:50,950 --> 00:00:54,219
described at the top of the slide which

18
00:00:54,219 --> 00:00:55,930
is of course the symmetric key goal of

19
00:00:55,930 --> 00:00:58,059
achieving confidentiality and

20
00:00:58,059 --> 00:01:01,210
authenticity simultaneously then

21
00:01:01,210 --> 00:01:03,789
following the work of balerion Nam Prem

22
00:01:03,789 --> 00:01:06,190
pray there were various back and forth

23
00:01:06,190 --> 00:01:08,619
between academia and the industry in

24
00:01:08,619 --> 00:01:11,830
particular standards bodies immediately

25
00:01:11,830 --> 00:01:14,560
following there is this so-called first

26
00:01:14,560 --> 00:01:16,890
wave of authenticated encryption

27
00:01:16,890 --> 00:01:19,149
algorithm ticketed encryption algorithms

28
00:01:19,149 --> 00:01:22,630
which are able to add authenticity at

29
00:01:22,630 --> 00:01:24,819
very minimal cost over the basic

30
00:01:24,819 --> 00:01:26,560
encryption algorithms of listed three of

31
00:01:26,560 --> 00:01:30,000
them up here IBM makes CBC and OCB

32
00:01:30,000 --> 00:01:32,500
however these algorithms also came with

33
00:01:32,500 --> 00:01:36,340
patents and these patents is what made

34
00:01:36,340 --> 00:01:38,259
you know standards organizations like

35
00:01:38,259 --> 00:01:41,470
Miss perhaps bit uncomfortable and when

36
00:01:41,470 --> 00:01:43,479
they were looking for new modes of

37
00:01:43,479 --> 00:01:46,929
operations they looked more towards

38
00:01:46,929 --> 00:01:50,380
others which had come in response kind

39
00:01:50,380 --> 00:01:52,239
of a second wave of dedicated

40
00:01:52,239 --> 00:01:53,789
authenticated encryption algorithms

41
00:01:53,789 --> 00:01:57,069
which were then patent free these

42
00:01:57,069 --> 00:02:00,130
algorithms in particular GCM we're then

43
00:02:00,130 --> 00:02:02,890
adopted into many different standards so

44
00:02:02,890 --> 00:02:05,739
I really mentioned this recommended in

45
00:02:05,739 --> 00:02:08,800
GCM they also recommended caesium then

46
00:02:08,800 --> 00:02:11,890
2004 you also get GCM and I Triple E 802

47
00:02:11,890 --> 00:02:16,599
point 11 and in 2008 you get GCM and TLS

48
00:02:16,599 --> 00:02:18,959
1.2

49
00:02:19,620 --> 00:02:23,380
so GCM starts to spread in all these

50
00:02:23,380 --> 00:02:26,460
standards and by 2013 what do you see

51
00:02:26,460 --> 00:02:30,580
well hardly deployed actually in fact in

52
00:02:30,580 --> 00:02:35,260
TLS there's usually just our c4 being

53
00:02:35,260 --> 00:02:38,320
used for the encryption over there but

54
00:02:38,320 --> 00:02:40,330
then after a lot of work by researchers

55
00:02:40,330 --> 00:02:43,960
a lot of attacks and in fact we want to

56
00:02:43,960 --> 00:02:45,550
see a related story see the sha-1

57
00:02:45,550 --> 00:02:48,010
collision presentation being given later

58
00:02:48,010 --> 00:02:52,060
on crypto after a lot of work finally

59
00:02:52,060 --> 00:02:54,430
able to convince people to start using

60
00:02:54,430 --> 00:02:58,330
algorithms other than our c4 and 2017

61
00:02:58,330 --> 00:03:02,140
more than 70% you see deployed GCM

62
00:03:02,140 --> 00:03:06,160
deployed but still you could see it

63
00:03:06,160 --> 00:03:08,170
takes about took about roughly 10 years

64
00:03:08,170 --> 00:03:11,640
to see widespread deployment of GCM

65
00:03:11,640 --> 00:03:15,880
after its creation and there are all

66
00:03:15,880 --> 00:03:16,990
kinds of reasons for that

67
00:03:16,990 --> 00:03:19,660
you know there's migration costs effort

68
00:03:19,660 --> 00:03:21,580
there's you know why should you switch

69
00:03:21,580 --> 00:03:23,620
if if it works if there are no attacks

70
00:03:23,620 --> 00:03:25,900
and why should we switch algorithms and

71
00:03:25,900 --> 00:03:29,260
you know maybe the already deployed

72
00:03:29,260 --> 00:03:30,910
algorithms have been optimized so far

73
00:03:30,910 --> 00:03:33,790
that the new algorithms might not be

74
00:03:33,790 --> 00:03:36,340
able to compete as well although in GCM

75
00:03:36,340 --> 00:03:37,660
a lot of work has been placed into

76
00:03:37,660 --> 00:03:42,370
improving that so then the naturally so

77
00:03:42,370 --> 00:03:43,660
the question well then what are we going

78
00:03:43,660 --> 00:03:46,180
to do with you know all these new

79
00:03:46,180 --> 00:03:47,200
different settings that have been

80
00:03:47,200 --> 00:03:48,850
discovered in the past few years in

81
00:03:48,850 --> 00:03:50,320
authenticated encryption in academia

82
00:03:50,320 --> 00:03:53,050
I've just listed a few of you here you

83
00:03:53,050 --> 00:03:53,230
know

84
00:03:53,230 --> 00:03:55,150
ok non-swiss you since robust

85
00:03:55,150 --> 00:03:56,560
authenticate encrypted security and the

86
00:03:56,560 --> 00:03:58,209
variable variable stretch online schemes

87
00:03:58,209 --> 00:03:59,800
release one very applied plaintext

88
00:03:59,800 --> 00:04:01,870
multi-user security and just a few of

89
00:04:01,870 --> 00:04:04,480
them I'm missing others then and there's

90
00:04:04,480 --> 00:04:06,520
a whole bunch of schemes coming out with

91
00:04:06,520 --> 00:04:08,050
a Caesar competition which is supposed

92
00:04:08,050 --> 00:04:13,630
to end December of this year so I mean

93
00:04:13,630 --> 00:04:15,670
from past experience it seems like it

94
00:04:15,670 --> 00:04:17,470
might even it might take 10 years maybe

95
00:04:17,470 --> 00:04:19,630
even longer if at all if these schemes

96
00:04:19,630 --> 00:04:23,440
get deployed so you know kind of

97
00:04:23,440 --> 00:04:26,640
thinking so then what's the point but

98
00:04:26,640 --> 00:04:28,870
there have been situations that have

99
00:04:28,870 --> 00:04:29,740
been

100
00:04:29,740 --> 00:04:31,930
you know results which have have

101
00:04:31,930 --> 00:04:34,240
actually been able to make it faster to

102
00:04:34,240 --> 00:04:39,310
practice or at least try to so for

103
00:04:39,310 --> 00:04:42,970
example they try to exploit already

104
00:04:42,970 --> 00:04:44,760
deployed algorithms as much as possible

105
00:04:44,760 --> 00:04:47,350
here I've already listed one sponge wrap

106
00:04:47,350 --> 00:04:50,440
which tries to which converts sha-3 into

107
00:04:50,440 --> 00:04:51,910
an authenticated encryption algorithm

108
00:04:51,910 --> 00:04:54,760
with kind of the idea that if sha-3 is

109
00:04:54,760 --> 00:04:56,140
deployed then you can easily get

110
00:04:56,140 --> 00:04:58,320
authenticated encryption immediately

111
00:04:58,320 --> 00:05:02,020
then there's also this TLS 1.3 nonce

112
00:05:02,020 --> 00:05:06,280
randomization this was introduced during

113
00:05:06,280 --> 00:05:12,490
discussions of TLS 1.3 in order to I me

114
00:05:12,490 --> 00:05:14,230
there were concerns on multi-user

115
00:05:14,230 --> 00:05:15,910
attacks basically attacks that are

116
00:05:15,910 --> 00:05:18,430
possible once you deploy algorithms very

117
00:05:18,430 --> 00:05:22,510
widely and this non standardization is

118
00:05:22,510 --> 00:05:26,620
very simple modification you just it

119
00:05:26,620 --> 00:05:28,720
allows you to use the authenticated

120
00:05:28,720 --> 00:05:30,010
encryption algorithm still as a black

121
00:05:30,010 --> 00:05:32,620
box but you change you randomize one of

122
00:05:32,620 --> 00:05:34,800
the inputs and this is supposed to add

123
00:05:34,800 --> 00:05:38,200
some some extra security to this to

124
00:05:38,200 --> 00:05:40,350
these against these multi-user attacks

125
00:05:40,350 --> 00:05:42,460
which are then you know formally

126
00:05:42,460 --> 00:05:44,230
analyzed blood Volare in Tuchman last

127
00:05:44,230 --> 00:05:48,310
year at crypto and then another example

128
00:05:48,310 --> 00:05:53,820
is GCMs IV which is published at ccs

129
00:05:53,820 --> 00:05:56,590
what they do over there is they exploits

130
00:05:56,590 --> 00:05:58,450
all these improvements that have gone

131
00:05:58,450 --> 00:06:00,520
into making GCM as efficient as possible

132
00:06:00,520 --> 00:06:03,610
on these Intel architectures and they

133
00:06:03,610 --> 00:06:07,510
say okay but GCM itself is fragile can

134
00:06:07,510 --> 00:06:10,630
get something better out of it and still

135
00:06:10,630 --> 00:06:13,240
using just basic GCM components but

136
00:06:13,240 --> 00:06:16,210
rearranging them they create GCM SIV

137
00:06:16,210 --> 00:06:20,650
which is a which basically addresses

138
00:06:20,650 --> 00:06:24,400
this nonce fertility issue in GCM but

139
00:06:24,400 --> 00:06:27,820
still is able to take advantage of all

140
00:06:27,820 --> 00:06:30,070
the progress that's been made on GCM

141
00:06:30,070 --> 00:06:35,530
itself so then the research we question

142
00:06:35,530 --> 00:06:37,540
we kind of well at least our motivation

143
00:06:37,540 --> 00:06:40,630
for our research was you know given all

144
00:06:40,630 --> 00:06:41,880
this long deployment

145
00:06:41,880 --> 00:06:44,460
time and the fact that they're all these

146
00:06:44,460 --> 00:06:46,620
new settings how do we you know squeeze

147
00:06:46,620 --> 00:06:48,240
as much as we can of out of the

148
00:06:48,240 --> 00:06:50,700
currently deployed algorithms and how

149
00:06:50,700 --> 00:06:53,100
can we get these new settings faster out

150
00:06:53,100 --> 00:06:57,650
into practice so what we focused on is

151
00:06:57,650 --> 00:07:00,810
two settings okay we just kind of

152
00:07:00,810 --> 00:07:02,610
roughly we looked at non Smiths

153
00:07:02,610 --> 00:07:06,020
resistance originally formalized by

154
00:07:06,020 --> 00:07:08,700
Rockaway and Shrimpton your 2006

155
00:07:08,700 --> 00:07:10,620
and also its release of unverified

156
00:07:10,620 --> 00:07:13,950
plaintext setting and this is roughly

157
00:07:13,950 --> 00:07:16,230
like the rest of the talk it's just one

158
00:07:16,230 --> 00:07:19,860
part and then second part so starting

159
00:07:19,860 --> 00:07:23,460
with this non Smiths resistance we

160
00:07:23,460 --> 00:07:27,230
actually kind of isolate this different

161
00:07:27,230 --> 00:07:29,250
property that you can achieve which we

162
00:07:29,250 --> 00:07:32,820
call nonce misuse resilience and just to

163
00:07:32,820 --> 00:07:34,290
give reef background for those who

164
00:07:34,290 --> 00:07:36,000
aren't familiar what is nonce misuse

165
00:07:36,000 --> 00:07:36,690
resistance

166
00:07:36,690 --> 00:07:39,090
well okay you've got an authenticated

167
00:07:39,090 --> 00:07:41,610
encryption algorithm over here you've

168
00:07:41,610 --> 00:07:43,560
got a sender and a receiver

169
00:07:43,560 --> 00:07:47,130
sender and the receiver share as a share

170
00:07:47,130 --> 00:07:50,040
a secret and whenever the sender wants

171
00:07:50,040 --> 00:07:51,180
to send a message

172
00:07:51,180 --> 00:07:54,990
it takes a message sends it through the

173
00:07:54,990 --> 00:07:56,370
authenticated encryption algorithm to

174
00:07:56,370 --> 00:07:58,290
get a ciphertext sense out over a

175
00:07:58,290 --> 00:07:59,940
receiver who then decrypt it and either

176
00:07:59,940 --> 00:08:01,680
gets the original message or an error

177
00:08:01,680 --> 00:08:03,960
symbol and in order to be able to

178
00:08:03,960 --> 00:08:06,870
achieve security this authenticated

179
00:08:06,870 --> 00:08:07,890
encryption algorithm needs to be

180
00:08:07,890 --> 00:08:10,380
stateful or randomized or somehow and

181
00:08:10,380 --> 00:08:12,450
the way that this is usually formalized

182
00:08:12,450 --> 00:08:16,680
is via an additional inputs okay so the

183
00:08:16,680 --> 00:08:20,030
authenticated encryption algorithm is

184
00:08:20,030 --> 00:08:22,710
usually deterministic and stateless

185
00:08:22,710 --> 00:08:24,750
that's how they're defined and then

186
00:08:24,750 --> 00:08:26,400
there is this additional nonce input

187
00:08:26,400 --> 00:08:28,080
which gets attached to the message and

188
00:08:28,080 --> 00:08:31,770
that will then get processed into the

189
00:08:31,770 --> 00:08:34,349
ciphertext the norms are still attached

190
00:08:34,349 --> 00:08:36,090
to the cipher text and sent like that to

191
00:08:36,090 --> 00:08:38,760
the decryption algorithm and the catch

192
00:08:38,760 --> 00:08:41,099
is that this norms itself it is needs to

193
00:08:41,099 --> 00:08:43,620
be in it either needs to be random or it

194
00:08:43,620 --> 00:08:46,340
needs to be some unique value kind of

195
00:08:46,340 --> 00:08:50,460
capturing this states or randomness and

196
00:08:50,460 --> 00:08:53,480
what happens Ananse misuse settings well

197
00:08:53,480 --> 00:08:55,709
the nonce is then no long

198
00:08:55,709 --> 00:08:58,499
unique it's for some reason is repeated

199
00:08:58,499 --> 00:09:01,470
due to some errors and then the question

200
00:09:01,470 --> 00:09:02,730
of course is you know what kind of

201
00:09:02,730 --> 00:09:04,050
security can you get in that kind of

202
00:09:04,050 --> 00:09:05,930
setting

203
00:09:05,930 --> 00:09:09,269
so most conventional schemes they have

204
00:09:09,269 --> 00:09:11,579
these nonce misusing attacks they lose

205
00:09:11,579 --> 00:09:15,929
all security so you get OCB GCM you get

206
00:09:15,929 --> 00:09:17,309
confidentiality breaks you get

207
00:09:17,309 --> 00:09:21,929
authenticity breaks and as a solution so

208
00:09:21,929 --> 00:09:23,699
robbery and Shrimpton they came up with

209
00:09:23,699 --> 00:09:27,569
SIV then there was GCM SIV that I

210
00:09:27,569 --> 00:09:30,269
mentioned these provides so-called best

211
00:09:30,269 --> 00:09:32,160
possible security when you have these

212
00:09:32,160 --> 00:09:37,290
knowns misusing attacks and then you can

213
00:09:37,290 --> 00:09:39,319
ask question self a question well okay

214
00:09:39,319 --> 00:09:43,019
this is a nice idea but are there

215
00:09:43,019 --> 00:09:44,999
actually nonce can you do nonce missing

216
00:09:44,999 --> 00:09:47,759
attacks up in the wild out in practice

217
00:09:47,759 --> 00:09:50,519
and you know kind of guided by Adam

218
00:09:50,519 --> 00:09:53,040
Langley's statement internet has passed

219
00:09:53,040 --> 00:09:56,369
and filled with bugs bugs this book at

220
00:09:56,369 --> 00:09:58,769
all they did performed an internet wide

221
00:09:58,769 --> 00:10:04,019
search search for TLS servers and try to

222
00:10:04,019 --> 00:10:05,519
see what they were doing with their

223
00:10:05,519 --> 00:10:07,410
nonces basically and they found three

224
00:10:07,410 --> 00:10:10,170
different settings they found one in

225
00:10:10,170 --> 00:10:12,899
which the nonce was generated randomly

226
00:10:12,899 --> 00:10:15,959
okay that means that you wouldn't really

227
00:10:15,959 --> 00:10:17,970
see your repeats but if you collected

228
00:10:17,970 --> 00:10:22,620
enough data you might see one there's a

229
00:10:22,620 --> 00:10:25,519
second setting is in which the server's

230
00:10:25,519 --> 00:10:27,839
repeated the nonce once and then

231
00:10:27,839 --> 00:10:30,779
actually continue to correctly update it

232
00:10:30,779 --> 00:10:32,730
the nonce it's time and then in the

233
00:10:32,730 --> 00:10:34,800
third setting of course the nonce will

234
00:10:34,800 --> 00:10:38,069
never changed so for this last one

235
00:10:38,069 --> 00:10:39,720
there's you know there's nothing you can

236
00:10:39,720 --> 00:10:41,309
do the best you can hope for is that

237
00:10:41,309 --> 00:10:42,899
maybe they're using one of these on

238
00:10:42,899 --> 00:10:46,829
Smith's resistant algorithms and that's

239
00:10:46,829 --> 00:10:51,600
it but then these first two settings and

240
00:10:51,600 --> 00:10:54,119
though what what basically what can

241
00:10:54,119 --> 00:10:55,799
really go wrong in practice what kind of

242
00:10:55,799 --> 00:10:57,420
what kind of attacks can you actually

243
00:10:57,420 --> 00:11:00,509
mount against algorithms in which the

244
00:11:00,509 --> 00:11:02,790
nonce is repeated might be repeated

245
00:11:02,790 --> 00:11:09,150
randomly or repeat once so

246
00:11:09,150 --> 00:11:11,190
kind of look at this question let's take

247
00:11:11,190 --> 00:11:15,570
three algorithms take GCM OCB and ChaCha

248
00:11:15,570 --> 00:11:19,140
20 plus poly 1305 all three algorithms

249
00:11:19,140 --> 00:11:23,040
are insecure in the nonce misuse setting

250
00:11:23,040 --> 00:11:24,390
but all three behave very differently

251
00:11:24,390 --> 00:11:29,150
when you look at attacks so GCM there's

252
00:11:29,150 --> 00:11:33,270
Jews forbidden attack it's been talked

253
00:11:33,270 --> 00:11:36,180
about already quite a while and the

254
00:11:36,180 --> 00:11:38,220
moment you repeat one nonce you can

255
00:11:38,220 --> 00:11:40,290
actually do a key recovery partial key

256
00:11:40,290 --> 00:11:42,270
recovery and all authenticity is lost

257
00:11:42,270 --> 00:11:46,730
for every single notes however

258
00:11:46,730 --> 00:11:48,720
confidentiality you do lose

259
00:11:48,720 --> 00:11:50,670
confidentiality for those nonces which

260
00:11:50,670 --> 00:11:52,680
are repeated in fact you can retrieve

261
00:11:52,680 --> 00:11:54,750
the XOR of the plaintext of the non so

262
00:11:54,750 --> 00:11:57,750
that I repeated but it's only for those

263
00:11:57,750 --> 00:12:00,690
monsters that are repeated you can't you

264
00:12:00,690 --> 00:12:02,580
can't figure out you can't recover the

265
00:12:02,580 --> 00:12:05,210
encryption key and you can't figure out

266
00:12:05,210 --> 00:12:08,730
plaintext for other nonces what get any

267
00:12:08,730 --> 00:12:10,380
information about plaintext encrypted

268
00:12:10,380 --> 00:12:13,320
under under other nonsense so be in

269
00:12:13,320 --> 00:12:17,190
contrast you get intermediate key leaked

270
00:12:17,190 --> 00:12:19,340
all securities lost

271
00:12:19,340 --> 00:12:21,840
regardless confidential confidentiality

272
00:12:21,840 --> 00:12:24,240
and authenticity for all announces this

273
00:12:24,240 --> 00:12:25,620
is an attack that we described in the

274
00:12:25,620 --> 00:12:28,110
paper and then ChaCha

275
00:12:28,110 --> 00:12:31,080
20 in poly 1305 this actually is

276
00:12:31,080 --> 00:12:33,180
interesting algorithm it was as far as I

277
00:12:33,180 --> 00:12:35,790
can tell was first introduced via an RFC

278
00:12:35,790 --> 00:12:39,510
and not from academia but from settings

279
00:12:39,510 --> 00:12:45,930
without a SNI and it actually learns

280
00:12:45,930 --> 00:12:48,450
from this kind of from this attacker

281
00:12:48,450 --> 00:12:50,720
fear from jews attack and they modify

282
00:12:50,720 --> 00:12:53,610
GCMs design the design is pretty much

283
00:12:53,610 --> 00:12:55,410
the same as GCM except for one little

284
00:12:55,410 --> 00:12:58,350
change it's still insecure in the nonce

285
00:12:58,350 --> 00:13:01,560
misuse setting however this juice attack

286
00:13:01,560 --> 00:13:03,900
is much more restrictive much more

287
00:13:03,900 --> 00:13:08,550
limited so then you know our designs

288
00:13:08,550 --> 00:13:10,410
like cha-cha 20 plus point three to five

289
00:13:10,410 --> 00:13:12,270
are they sufficient for most practical

290
00:13:12,270 --> 00:13:14,850
settings and can we kind of formalize

291
00:13:14,850 --> 00:13:19,110
and describe exactly what advantage does

292
00:13:19,110 --> 00:13:21,010
charge at 20 plus points on 5k

293
00:13:21,010 --> 00:13:23,550
over the other two and this is why we

294
00:13:23,550 --> 00:13:25,570
looked at this setting this nonce

295
00:13:25,570 --> 00:13:28,180
misused resilience which describes an

296
00:13:28,180 --> 00:13:29,950
algorithms ability to recover from

297
00:13:29,950 --> 00:13:32,890
security after Ananse is repeated so

298
00:13:32,890 --> 00:13:35,650
this is exactly to address those kind of

299
00:13:35,650 --> 00:13:36,790
understand what happens in those

300
00:13:36,790 --> 00:13:40,180
settings in which you might not have you

301
00:13:40,180 --> 00:13:45,120
know the nonce repeated all the time so

302
00:13:45,120 --> 00:13:48,520
using this then using this formulation

303
00:13:48,520 --> 00:13:50,710
that we come up with you're then able to

304
00:13:50,710 --> 00:13:52,870
distinguish between three algorithms and

305
00:13:52,870 --> 00:13:56,230
actually formally justify that ChaCha 20

306
00:13:56,230 --> 00:13:59,110
plus poly 35 actually improves over GCM

307
00:13:59,110 --> 00:14:04,870
and OCB so just to kind of briefly go

308
00:14:04,870 --> 00:14:08,470
over the what these definitions look

309
00:14:08,470 --> 00:14:09,940
like what the formalization looks like

310
00:14:09,940 --> 00:14:12,010
this is a traditional definition the

311
00:14:12,010 --> 00:14:13,570
company conventional definition of

312
00:14:13,570 --> 00:14:15,310
confidentiality you've got a

313
00:14:15,310 --> 00:14:17,170
distinguisher and the adversary over

314
00:14:17,170 --> 00:14:19,180
here which interacts with one of two

315
00:14:19,180 --> 00:14:21,220
worlds in the real world or ideal world

316
00:14:21,220 --> 00:14:23,350
in the real world it's interacting of

317
00:14:23,350 --> 00:14:26,200
course with the algorithm with a

318
00:14:26,200 --> 00:14:28,330
particular key and can input the nonce

319
00:14:28,330 --> 00:14:31,180
in the message and in the ideal world is

320
00:14:31,180 --> 00:14:32,800
interacting with the random uniform

321
00:14:32,800 --> 00:14:36,280
random function with SIL nonce and

322
00:14:36,280 --> 00:14:38,470
message as input in the conventional

323
00:14:38,470 --> 00:14:40,660
definition the adversary may not repeat

324
00:14:40,660 --> 00:14:42,490
the nonces that's just a restriction

325
00:14:42,490 --> 00:14:44,470
that's placed on the adversary and in

326
00:14:44,470 --> 00:14:46,990
the nonce misuse resistant setting there

327
00:14:46,990 --> 00:14:48,730
is absolutely no restriction on the

328
00:14:48,730 --> 00:14:52,240
adversary so but I do then formalize

329
00:14:52,240 --> 00:14:53,920
nonce misuse resilience well you

330
00:14:53,920 --> 00:14:56,200
introduced an additional Oracle that the

331
00:14:56,200 --> 00:14:59,020
adversary interacts with so now the

332
00:14:59,020 --> 00:15:01,030
adversary interacts with still the

333
00:15:01,030 --> 00:15:03,400
encryption algorithm and still the

334
00:15:03,400 --> 00:15:08,260
random function over here and with these

335
00:15:08,260 --> 00:15:10,840
algorithms it may not repeat nonces it

336
00:15:10,840 --> 00:15:12,490
needs to be non suspecting just like in

337
00:15:12,490 --> 00:15:15,130
the conventional definition but then we

338
00:15:15,130 --> 00:15:18,340
also give it access to another kind of

339
00:15:18,340 --> 00:15:20,350
attacker Oracle where it can then

340
00:15:20,350 --> 00:15:22,840
perform all its nonce miss you I had

341
00:15:22,840 --> 00:15:24,490
nonce misuse attacks do whatever it

342
00:15:24,490 --> 00:15:27,420
wants to study about the algorithm under

343
00:15:27,420 --> 00:15:30,310
whichever nonce with the only

344
00:15:30,310 --> 00:15:33,520
restriction being that it can't any non

345
00:15:33,520 --> 00:15:34,780
static we read here it

346
00:15:34,780 --> 00:15:40,060
use over here okay so this this kind of

347
00:15:40,060 --> 00:15:42,610
idea of adding additional Oracle comes

348
00:15:42,610 --> 00:15:45,940
from bar well at all subtle a where they

349
00:15:45,940 --> 00:15:47,740
call this these two Oracle's the

350
00:15:47,740 --> 00:15:49,330
challenge Oracle's and these to be

351
00:15:49,330 --> 00:15:56,320
honest Oracle's so then just briefly you

352
00:15:56,320 --> 00:15:57,340
know okay

353
00:15:57,340 --> 00:15:59,380
comparing nonce misused resilient soon

354
00:15:59,380 --> 00:16:03,160
resistance so resilience of course you

355
00:16:03,160 --> 00:16:04,630
still leaked a significant amount of

356
00:16:04,630 --> 00:16:06,760
information when announcers repeated it

357
00:16:06,760 --> 00:16:08,890
just all it says is that the damage is

358
00:16:08,890 --> 00:16:12,790
limited if you want proper security then

359
00:16:12,790 --> 00:16:14,650
you want Lance receives resistance where

360
00:16:14,650 --> 00:16:16,840
only equality of plaintiffs are released

361
00:16:16,840 --> 00:16:19,270
during nonce repeats however the

362
00:16:19,270 --> 00:16:20,800
advantage with resilience there is

363
00:16:20,800 --> 00:16:22,510
already a widely deployed algorithm

364
00:16:22,510 --> 00:16:25,840
available who has most misused residents

365
00:16:25,840 --> 00:16:28,390
I'm not a hundred percent sure about

366
00:16:28,390 --> 00:16:31,410
this but I believe they haven't been any

367
00:16:31,410 --> 00:16:33,670
deployed algorithms but I could be wrong

368
00:16:33,670 --> 00:16:37,080
maybe key rap or something and then

369
00:16:37,080 --> 00:16:39,400
another advantage of resilience is that

370
00:16:39,400 --> 00:16:41,110
you can very easily construct a GCM

371
00:16:41,110 --> 00:16:44,530
variant which achieves this okay you

372
00:16:44,530 --> 00:16:47,530
could see minima - and yatta at ESC 2015

373
00:16:47,530 --> 00:16:49,600
they talk about this kind of composite

374
00:16:49,600 --> 00:16:53,740
composition so that's the first part

375
00:16:53,740 --> 00:16:55,270
where we looked at nonce misuse

376
00:16:55,270 --> 00:16:57,430
resistance then the second setting that

377
00:16:57,430 --> 00:17:00,250
we looked at was release of unverified

378
00:17:00,250 --> 00:17:02,970
plaintext in our new construction which

379
00:17:02,970 --> 00:17:07,810
achieves its GCM row so okay again

380
00:17:07,810 --> 00:17:10,060
briefly background leiseth unverified

381
00:17:10,060 --> 00:17:13,810
plaintext a lot of authenticated

382
00:17:13,810 --> 00:17:15,720
encryption algorithms that are out there

383
00:17:15,720 --> 00:17:19,180
they you can roughly categorize them in

384
00:17:19,180 --> 00:17:20,740
two different categories this has

385
00:17:20,740 --> 00:17:22,599
nothing to do with generic composition

386
00:17:22,599 --> 00:17:24,369
it's just that the way that the

387
00:17:24,369 --> 00:17:28,060
algorithms are designed so they're

388
00:17:28,060 --> 00:17:31,000
either when they decrypt they either

389
00:17:31,000 --> 00:17:33,820
decrypt and then verify or they verify

390
00:17:33,820 --> 00:17:36,430
and then decrypt so decrypt and verify

391
00:17:36,430 --> 00:17:39,220
meaning they take the ciphertext compute

392
00:17:39,220 --> 00:17:40,810
the plain text based on the cipher text

393
00:17:40,810 --> 00:17:45,600
and then verify using the plaintext and

394
00:17:45,600 --> 00:17:48,440
then in verify then decrypt

395
00:17:48,440 --> 00:17:51,230
they take the ciphertext and tag they

396
00:17:51,230 --> 00:17:53,269
verify that already and then only

397
00:17:53,269 --> 00:17:56,539
compute the plaintext if necessary so

398
00:17:56,539 --> 00:17:59,210
OCB for example is an example of the

399
00:17:59,210 --> 00:18:01,190
left-hand side GCM is an example of the

400
00:18:01,190 --> 00:18:04,220
right-hand side although as you'll see

401
00:18:04,220 --> 00:18:05,539
in a few slides

402
00:18:05,539 --> 00:18:08,029
there's nothing about GCM that forces

403
00:18:08,029 --> 00:18:11,710
you to perform the operation like this

404
00:18:11,710 --> 00:18:15,769
so okay what so what are some settings

405
00:18:15,769 --> 00:18:18,230
that might happen so if looking back

406
00:18:18,230 --> 00:18:20,360
over here for example this decrypt and

407
00:18:20,360 --> 00:18:23,289
verified algorithms you're actually

408
00:18:23,289 --> 00:18:26,149
before verification has completed you're

409
00:18:26,149 --> 00:18:29,179
actually computing sensitive information

410
00:18:29,179 --> 00:18:30,860
over here so the information that you

411
00:18:30,860 --> 00:18:33,259
want hidden and a lot a lot of times in

412
00:18:33,259 --> 00:18:35,570
practice this is might be infeasible to

413
00:18:35,570 --> 00:18:37,460
hide that information you might have

414
00:18:37,460 --> 00:18:40,370
side channels it might be implementation

415
00:18:40,370 --> 00:18:42,110
limitations you might have insufficient

416
00:18:42,110 --> 00:18:44,899
secure memory to store the entire length

417
00:18:44,899 --> 00:18:48,440
of the plaintext and there might be

418
00:18:48,440 --> 00:18:51,139
implementation bugs where for some

419
00:18:51,139 --> 00:18:52,940
reason the algorithm due to an

420
00:18:52,940 --> 00:18:55,370
optimization decides to release the

421
00:18:55,370 --> 00:18:57,649
plain text without having completely

422
00:18:57,649 --> 00:19:01,190
completed the verification so to give

423
00:19:01,190 --> 00:19:03,070
you an example of the latter

424
00:19:03,070 --> 00:19:09,200
here's GCM okay so just to kind of walk

425
00:19:09,200 --> 00:19:11,240
you through this the main components of

426
00:19:11,240 --> 00:19:14,059
GCM you've got this counter mode over

427
00:19:14,059 --> 00:19:15,529
here which is the encryption algorithm

428
00:19:15,529 --> 00:19:18,049
and then over here this is

429
00:19:18,049 --> 00:19:23,419
authentication okay so the way GCM works

430
00:19:23,419 --> 00:19:25,639
is it takes the plaintext takes a nonce

431
00:19:25,639 --> 00:19:27,950
plugs into counter modes and then

432
00:19:27,950 --> 00:19:30,080
encrypts like that that gives you the

433
00:19:30,080 --> 00:19:32,779
ciphertext and then this nonce is then

434
00:19:32,779 --> 00:19:35,539
use sent through a block cipher the

435
00:19:35,539 --> 00:19:36,799
ciphertext is processed through a

436
00:19:36,799 --> 00:19:38,509
universal hash of your to compute the

437
00:19:38,509 --> 00:19:43,580
tag now during decryption so this is

438
00:19:43,580 --> 00:19:46,070
this is why I called it so this is

439
00:19:46,070 --> 00:19:48,049
actually kind of an encrypt and then you

440
00:19:48,049 --> 00:19:50,450
verify I mean so equipped and then

441
00:19:50,450 --> 00:19:53,149
authenticate so that means that

442
00:19:53,149 --> 00:19:55,730
technically decryption would be you

443
00:19:55,730 --> 00:19:57,679
first take the ciphertext send it

444
00:19:57,679 --> 00:19:59,659
through here you take the nonce and you

445
00:19:59,659 --> 00:20:01,400
verify and then you are

446
00:20:01,400 --> 00:20:03,890
to decrypt however these two operations

447
00:20:03,890 --> 00:20:05,360
can actually work completely in parallel

448
00:20:05,360 --> 00:20:07,870
so you can imagine a fully optimized

449
00:20:07,870 --> 00:20:12,500
version of GCM in which you know one

450
00:20:12,500 --> 00:20:14,870
process runs the verification using the

451
00:20:14,870 --> 00:20:16,610
nonce and the ciphertext and another

452
00:20:16,610 --> 00:20:18,830
process performs decryption using the

453
00:20:18,830 --> 00:20:20,540
ciphertext and the nonce in parallel and

454
00:20:20,540 --> 00:20:25,220
maybe for some reason the decryption the

455
00:20:25,220 --> 00:20:26,630
plaintext is computed before the

456
00:20:26,630 --> 00:20:29,090
verification is completed so that's why

457
00:20:29,090 --> 00:20:30,560
I say that GCM there's actually nothing

458
00:20:30,560 --> 00:20:34,390
that forces you to perform the the

459
00:20:34,390 --> 00:20:36,440
verification before you've completed the

460
00:20:36,440 --> 00:20:41,090
decryption so release of one four and

461
00:20:41,090 --> 00:20:43,310
five plaintext describes a setting in

462
00:20:43,310 --> 00:20:45,290
which authenticated decryption

463
00:20:45,290 --> 00:20:47,600
algorithms leak plaintext regardless of

464
00:20:47,600 --> 00:20:51,110
whether verification occurs and the type

465
00:20:51,110 --> 00:20:53,180
of solutions that we currently know of

466
00:20:53,180 --> 00:20:56,540
that achieve good security in this rough

467
00:20:56,540 --> 00:20:59,000
setting are all kind of variable in loop

468
00:20:59,000 --> 00:21:01,700
variable input length ciphers or wide

469
00:21:01,700 --> 00:21:06,620
block block ciphers so they often these

470
00:21:06,620 --> 00:21:08,150
are very heavy constructions they often

471
00:21:08,150 --> 00:21:10,730
require multiple passes or you can get

472
00:21:10,730 --> 00:21:13,600
very dedicated constructions like a Z

473
00:21:13,600 --> 00:21:16,820
very specialized we're perhaps not so

474
00:21:16,820 --> 00:21:19,910
easy to implement and particularly are

475
00:21:19,910 --> 00:21:21,560
all these designs are very distant from

476
00:21:21,560 --> 00:21:23,950
deployed algorithms out there and

477
00:21:23,950 --> 00:21:26,150
achieving release of entire flight

478
00:21:26,150 --> 00:21:29,210
Playtex security seemingly requires a

479
00:21:29,210 --> 00:21:32,960
completely new approach however as you

480
00:21:32,960 --> 00:21:35,530
might guess from the theme of the talk

481
00:21:35,530 --> 00:21:38,630
we say that we see that you can actually

482
00:21:38,630 --> 00:21:41,330
take GCM apply some minor changes and

483
00:21:41,330 --> 00:21:46,220
achieve rough security so at a high

484
00:21:46,220 --> 00:21:50,240
level how do we do this so this is just

485
00:21:50,240 --> 00:21:53,960
kind of an abstraction a little bit of

486
00:21:53,960 --> 00:21:58,010
our solution what we do is we take the

487
00:21:58,010 --> 00:22:00,020
nonce and the plain text and they're so

488
00:22:00,020 --> 00:22:01,940
used to compute the cipher text kind of

489
00:22:01,940 --> 00:22:05,300
like GCM does with counter mode then

490
00:22:05,300 --> 00:22:09,200
this nonce is sent through is going to

491
00:22:09,200 --> 00:22:11,570
be encrypted basically but it's going to

492
00:22:11,570 --> 00:22:15,260
be kind of encrypted with a tweak

493
00:22:15,260 --> 00:22:18,340
which is the address of the ciphertext

494
00:22:18,340 --> 00:22:21,710
so you're going to process the entire

495
00:22:21,710 --> 00:22:25,130
ciphertext and combine it and encrypt

496
00:22:25,130 --> 00:22:26,990
the nonce and now the encryption of the

497
00:22:26,990 --> 00:22:29,210
nonce will depend on the ciphertext then

498
00:22:29,210 --> 00:22:31,240
if you look in to look at decryption

499
00:22:31,240 --> 00:22:33,770
what happens if an adversary were to

500
00:22:33,770 --> 00:22:35,270
change you know one bit in the

501
00:22:35,270 --> 00:22:37,640
ciphertext or try to manipulate anything

502
00:22:37,640 --> 00:22:41,000
well then the decryption of the

503
00:22:41,000 --> 00:22:42,919
encrypted nonce with and something

504
00:22:42,919 --> 00:22:44,510
completely random and you would get

505
00:22:44,510 --> 00:22:49,340
garbage over here so this solution this

506
00:22:49,340 --> 00:22:50,900
then high-level solution can be applied

507
00:22:50,900 --> 00:22:53,870
to GCM here I've indicated the three

508
00:22:53,870 --> 00:22:56,780
model modifications that we introduced

509
00:22:56,780 --> 00:23:00,530
to GCM so the norms now instead of being

510
00:23:00,530 --> 00:23:04,160
sent into this hash function call and

511
00:23:04,160 --> 00:23:06,770
then sent through the block cipher we

512
00:23:06,770 --> 00:23:08,870
send it straight to the block cipher the

513
00:23:08,870 --> 00:23:10,580
output of the universal hash ache is

514
00:23:10,580 --> 00:23:12,500
expert once before and once after the

515
00:23:12,500 --> 00:23:16,010
block cipher call and a zero you know

516
00:23:16,010 --> 00:23:18,440
constant string is padded before the

517
00:23:18,440 --> 00:23:23,840
plaintext quickly the features are that

518
00:23:23,840 --> 00:23:26,570
it's basically as efficient as GCM takes

519
00:23:26,570 --> 00:23:29,150
advantage of all current GCM expertise

520
00:23:29,150 --> 00:23:31,520
it's more robust than GCM because it

521
00:23:31,520 --> 00:23:35,480
gives as rub security there's of course

522
00:23:35,480 --> 00:23:38,270
a trade-off claim absolutely no miss

523
00:23:38,270 --> 00:23:39,980
nonce misuse resistance possibly

524
00:23:39,980 --> 00:23:41,960
resilience and it's an interesting

525
00:23:41,960 --> 00:23:46,370
alternative to GCM aside and ok finally

526
00:23:46,370 --> 00:23:47,690
there's also this if you look in our

527
00:23:47,690 --> 00:23:48,860
paper and the appendix there's this

528
00:23:48,860 --> 00:23:50,360
interesting application where you can

529
00:23:50,360 --> 00:23:53,750
use GCM RUP to provide a very efficient

530
00:23:53,750 --> 00:23:56,150
solution to prevent crypto tagging

531
00:23:56,150 --> 00:23:57,740
attacks and tor which actually attacks

532
00:23:57,740 --> 00:24:00,710
on anonymity so just have a look at the

533
00:24:00,710 --> 00:24:02,200
paper for the more details on that

534
00:24:02,200 --> 00:24:05,809
so to summarize motivation attract as

535
00:24:05,809 --> 00:24:07,070
much as possible other tools that we

536
00:24:07,070 --> 00:24:08,929
already have we looked at and we

537
00:24:08,929 --> 00:24:10,640
introduced nonce misuse resilience and

538
00:24:10,640 --> 00:24:13,910
GCM robbed the construction thank you

539
00:24:13,910 --> 00:24:15,690
for your attention

540
00:24:15,690 --> 00:24:17,750
you

