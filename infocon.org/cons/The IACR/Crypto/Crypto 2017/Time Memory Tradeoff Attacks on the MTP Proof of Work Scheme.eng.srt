1
00:00:06,060 --> 00:00:10,389
okay thank you for the introduction as

2
00:00:10,389 --> 00:00:12,700
mentioned I'm going to talk about proof

3
00:00:12,700 --> 00:00:14,380
of work in the context of

4
00:00:14,380 --> 00:00:18,580
cryptocurrencies now the tempo of walk

5
00:00:18,580 --> 00:00:20,860
was first introduced by the walk and or

6
00:00:20,860 --> 00:00:23,309
in the early 19th as a computational

7
00:00:23,309 --> 00:00:27,070
technique to limit access excessive

8
00:00:27,070 --> 00:00:30,610
users access to a shared resource it's a

9
00:00:30,610 --> 00:00:33,430
very general concept and in the context

10
00:00:33,430 --> 00:00:35,800
of cryptocurrencies the entities that

11
00:00:35,800 --> 00:00:38,699
generate those proofs are called miners

12
00:00:38,699 --> 00:00:42,999
so how are the push generator each miner

13
00:00:42,999 --> 00:00:45,550
gets a list of recent transactions and

14
00:00:45,550 --> 00:00:47,800
it is going to bind those transactions

15
00:00:47,800 --> 00:00:50,530
into a block and perform a computational

16
00:00:50,530 --> 00:00:53,050
action on it once the computation

17
00:00:53,050 --> 00:00:55,210
succeeds it has a proof that it

18
00:00:55,210 --> 00:00:58,269
performed a computation the proof itself

19
00:00:58,269 --> 00:01:00,719
is just a string that the miner

20
00:01:00,719 --> 00:01:03,190
concatenates to the block and then

21
00:01:03,190 --> 00:01:06,250
submit the block to the network what

22
00:01:06,250 --> 00:01:08,800
verifies the proofs each node on the

23
00:01:08,800 --> 00:01:11,260
network should verify the proof and

24
00:01:11,260 --> 00:01:13,360
assuming that the proof is correct

25
00:01:13,360 --> 00:01:16,000
it adds the block to its local copy of

26
00:01:16,000 --> 00:01:20,020
the blockchain why do we need proofs why

27
00:01:20,020 --> 00:01:22,240
do we need to walk in order to add a

28
00:01:22,240 --> 00:01:25,360
block to the blockchain the basic idea

29
00:01:25,360 --> 00:01:28,180
is that if it was easy to add new blocks

30
00:01:28,180 --> 00:01:31,120
it would open a door for several attacks

31
00:01:31,120 --> 00:01:33,760
and manipulations on the blockchain such

32
00:01:33,760 --> 00:01:36,640
as double spending which is spending

33
00:01:36,640 --> 00:01:39,820
money more than once and therefore the

34
00:01:39,820 --> 00:01:42,160
mechanism of proof of work is an

35
00:01:42,160 --> 00:01:44,410
important layer in the safety of the

36
00:01:44,410 --> 00:01:47,920
blockchain we will now go over the most

37
00:01:47,920 --> 00:01:50,350
basic poof of work which is the one that

38
00:01:50,350 --> 00:01:53,560
is used in Bitcoin in Bitcoin proof of

39
00:01:53,560 --> 00:01:56,350
order is a global adjustable difficulty

40
00:01:56,350 --> 00:01:59,080
parameter it is denoted by D that

41
00:01:59,080 --> 00:02:01,780
controls how hard it is to generate a

42
00:02:01,780 --> 00:02:05,500
pour the previous algorithm is going to

43
00:02:05,500 --> 00:02:08,019
take as an input a challenge I the

44
00:02:08,019 --> 00:02:09,848
challenge I can be deterministic we

45
00:02:09,848 --> 00:02:11,980
computed using the previous block and

46
00:02:11,980 --> 00:02:14,549
the transactions on the current block

47
00:02:14,549 --> 00:02:17,079
the goal of the prover is to find a

48
00:02:17,079 --> 00:02:17,770
nonce

49
00:02:17,770 --> 00:02:21,870
and sachet if you can catenate n2i

50
00:02:21,870 --> 00:02:24,190
executing sha-256

51
00:02:24,190 --> 00:02:26,620
on the obtain swing will be less than

52
00:02:26,620 --> 00:02:30,730
the difficulty parameter D since sha-256

53
00:02:30,730 --> 00:02:33,700
is safe the best algorithm is an

54
00:02:33,700 --> 00:02:36,010
exhaustive search and the proof is going

55
00:02:36,010 --> 00:02:39,730
to be the nonce and of course there is

56
00:02:39,730 --> 00:02:41,890
also the very first algorithm that is

57
00:02:41,890 --> 00:02:43,840
being executed by each node on the

58
00:02:43,840 --> 00:02:46,690
network what's the simplest algorithm

59
00:02:46,690 --> 00:02:49,690
you can think of the verifiers algorithm

60
00:02:49,690 --> 00:02:51,580
takes is an input a challenge i and

61
00:02:51,580 --> 00:02:55,060
announced an and if the condition is met

62
00:02:55,060 --> 00:02:57,850
he adds the block to his local copy of

63
00:02:57,850 --> 00:03:01,210
the blockchain let's try to think

64
00:03:01,210 --> 00:03:03,460
whether this is a good implementation of

65
00:03:03,460 --> 00:03:06,910
a proof-of-work the major advantage of

66
00:03:06,910 --> 00:03:08,680
this proof of work is that the

67
00:03:08,680 --> 00:03:11,430
verification algorithm is very efficient

68
00:03:11,430 --> 00:03:14,440
if the verification algorithm was low

69
00:03:14,440 --> 00:03:17,070
meaning it would take a lot of resources

70
00:03:17,070 --> 00:03:20,370
then since each node on the network

71
00:03:20,370 --> 00:03:23,230
executed you could do denial of service

72
00:03:23,230 --> 00:03:26,950
attacks but perhaps a more serious

73
00:03:26,950 --> 00:03:29,140
problem would be that if the

74
00:03:29,140 --> 00:03:32,050
verification algorithm was slow blocks

75
00:03:32,050 --> 00:03:34,330
would spread much more slowly over the

76
00:03:34,330 --> 00:03:36,600
network this would create

77
00:03:36,600 --> 00:03:39,400
inconsistencies between the internal

78
00:03:39,400 --> 00:03:41,200
state of the blockchain and the

79
00:03:41,200 --> 00:03:43,720
different nodes on the network this

80
00:03:43,720 --> 00:03:47,950
state is often referred to as a fork but

81
00:03:47,950 --> 00:03:50,050
there is also a disadvantage in this

82
00:03:50,050 --> 00:03:52,990
simplicity the disadvantage comes from

83
00:03:52,990 --> 00:03:55,390
the perspective of the prover the

84
00:03:55,390 --> 00:03:57,160
poorest algorithm can be implemented

85
00:03:57,160 --> 00:04:00,220
very efficiently on dedicated Hardware

86
00:04:00,220 --> 00:04:03,070
on assic application-specific integrated

87
00:04:03,070 --> 00:04:07,630
circuit in fact the cost of computing

88
00:04:07,630 --> 00:04:10,090
the poorest algorithm is more than ten

89
00:04:10,090 --> 00:04:13,780
thousand times less on assic compared to

90
00:04:13,780 --> 00:04:15,000
general cpus

91
00:04:15,000 --> 00:04:19,450
well this is a problem why now it is not

92
00:04:19,450 --> 00:04:22,110
recommended to mine on regular C peers

93
00:04:22,110 --> 00:04:25,270
today mines are done in huge angers

94
00:04:25,270 --> 00:04:27,669
containing containing thousands of

95
00:04:27,669 --> 00:04:30,310
dedicated hardware components that are

96
00:04:30,310 --> 00:04:31,420
specialized in

97
00:04:31,420 --> 00:04:34,840
computing chateau 56 it has become a

98
00:04:34,840 --> 00:04:37,090
centralized industry which is in

99
00:04:37,090 --> 00:04:41,740
contrary to the philosophy of Bitcoin so

100
00:04:41,740 --> 00:04:43,480
in this talk I'm going to present an

101
00:04:43,480 --> 00:04:47,020
approach to fight decentralization using

102
00:04:47,020 --> 00:04:49,690
what is called a memory hard function

103
00:04:49,690 --> 00:04:52,870
that I will introduce shortly then I'm

104
00:04:52,870 --> 00:04:54,490
going to describe a concrete

105
00:04:54,490 --> 00:04:56,560
proof-of-work scheme called

106
00:04:56,560 --> 00:05:00,910
MTP that uses this approach this will

107
00:05:00,910 --> 00:05:03,520
provide the background and in this quark

108
00:05:03,520 --> 00:05:05,980
I'm going to describe a sudden weakness

109
00:05:05,980 --> 00:05:09,280
in MTP that allows us to break its

110
00:05:09,280 --> 00:05:12,990
security claims as we will see later on

111
00:05:12,990 --> 00:05:15,550
what is the purpose of memory hard

112
00:05:15,550 --> 00:05:18,940
function we started with a gap between

113
00:05:18,940 --> 00:05:20,710
the implementation of the poorest

114
00:05:20,710 --> 00:05:23,890
algorithm on dedicated hardware versus

115
00:05:23,890 --> 00:05:27,040
general CPUs there for the purpose of

116
00:05:27,040 --> 00:05:29,380
memory hot function is to narrow this

117
00:05:29,380 --> 00:05:33,430
gap the idea is that on the one hand the

118
00:05:33,430 --> 00:05:35,560
standard execution of this algorithm

119
00:05:35,560 --> 00:05:38,020
would require a significant amount of

120
00:05:38,020 --> 00:05:40,990
memory in order to compute and on the

121
00:05:40,990 --> 00:05:43,540
other hand any attempt to use less

122
00:05:43,540 --> 00:05:45,640
memory would result in a high

123
00:05:45,640 --> 00:05:49,210
computational penalty why does this

124
00:05:49,210 --> 00:05:52,540
approach narrow the gap at a high level

125
00:05:52,540 --> 00:05:54,940
I would just say that since memory

126
00:05:54,940 --> 00:05:58,240
consumes a large amount of on chip area

127
00:05:58,240 --> 00:06:02,910
there is much less room left for CPUs

128
00:06:02,910 --> 00:06:05,080
next I'm going to describe a specific

129
00:06:05,080 --> 00:06:08,320
memory heart function called Alvin 2d

130
00:06:08,320 --> 00:06:10,660
that was presented by Billy okovalkov

131
00:06:10,660 --> 00:06:14,290
watch ovitch other 2d takes is an input

132
00:06:14,290 --> 00:06:17,050
a challenge I and what it is going to do

133
00:06:17,050 --> 00:06:20,590
in a very schematic way is to compute a

134
00:06:20,590 --> 00:06:22,900
very long array of entries in sequential

135
00:06:22,900 --> 00:06:28,690
order meaning X 1 X 2 and so on from now

136
00:06:28,690 --> 00:06:32,440
on until the end of this talk a block is

137
00:06:32,440 --> 00:06:36,550
simply an entry in this array the output

138
00:06:36,550 --> 00:06:40,780
is the last block in the array so how is

139
00:06:40,780 --> 00:06:44,440
each block X I computer the first few

140
00:06:44,440 --> 00:06:44,840
blow

141
00:06:44,840 --> 00:06:47,500
computed directly from the challenge i

142
00:06:47,500 --> 00:06:50,900
but almost all other blocks are computed

143
00:06:50,900 --> 00:06:54,110
using a compression function f the

144
00:06:54,110 --> 00:06:56,210
compression function f takes two takes

145
00:06:56,210 --> 00:06:58,400
as an input two blocks from the array

146
00:06:58,400 --> 00:07:03,710
and returns a single block out so X I is

147
00:07:03,710 --> 00:07:06,229
equal to the execution of F on the

148
00:07:06,229 --> 00:07:08,570
previous block and another block that is

149
00:07:08,570 --> 00:07:13,850
located at fee of I fee is called an

150
00:07:13,850 --> 00:07:17,120
indexing function and in algún 2d it

151
00:07:17,120 --> 00:07:19,880
depends on the value of the previous

152
00:07:19,880 --> 00:07:24,380
block for simplicity an approximation of

153
00:07:24,380 --> 00:07:26,450
this function is to take the value of

154
00:07:26,450 --> 00:07:29,320
the previous block module I minus 2

155
00:07:29,320 --> 00:07:32,240
let's take an example let's say we want

156
00:07:32,240 --> 00:07:35,360
to compute X 7 in order to compute X 7

157
00:07:35,360 --> 00:07:37,580
we need the previous block which is X 6

158
00:07:37,580 --> 00:07:40,669
and another block that is located at fee

159
00:07:40,669 --> 00:07:44,389
of seven fifths of 7 is equal to the

160
00:07:44,389 --> 00:07:46,639
value of the previous block which is X 6

161
00:07:46,639 --> 00:07:50,000
modulo 5 and this this case is equal

162
00:07:50,000 --> 00:07:54,380
three why is argon 2d considered a

163
00:07:54,380 --> 00:07:58,010
memory hard function assume we store in

164
00:07:58,010 --> 00:08:01,070
memory only a small fraction of blocks

165
00:08:01,070 --> 00:08:03,260
let's say one fifth of the blocks

166
00:08:03,260 --> 00:08:07,280
keeping each fifth block in memory the

167
00:08:07,280 --> 00:08:11,419
goal is to compute X I let's take a look

168
00:08:11,419 --> 00:08:14,720
at the computation graph of x I in order

169
00:08:14,720 --> 00:08:17,150
to compute X i we need to compute a

170
00:08:17,150 --> 00:08:21,380
computation go off in recursive order if

171
00:08:21,380 --> 00:08:25,010
a block is not present in memory these

172
00:08:25,010 --> 00:08:27,500
are the blue nodes in the computation

173
00:08:27,500 --> 00:08:30,500
graph we need to find the block value

174
00:08:30,500 --> 00:08:33,799
and if there are a lot of blue nodes in

175
00:08:33,799 --> 00:08:36,409
the computation well the we are going to

176
00:08:36,409 --> 00:08:40,070
pay a high computational penalty in the

177
00:08:40,070 --> 00:08:41,450
following table you can see the best

178
00:08:41,450 --> 00:08:44,390
known time memory trade-offs for argon

179
00:08:44,390 --> 00:08:47,720
2d the penalty increases very sharply

180
00:08:47,720 --> 00:08:51,170
and therefore argon 2d is considered a

181
00:08:51,170 --> 00:08:55,040
memory hard function we can try to think

182
00:08:55,040 --> 00:08:57,680
what can be done in order to use album

183
00:08:57,680 --> 00:08:58,220
2d

184
00:08:58,220 --> 00:09:00,020
is the proof of walk in the

185
00:09:00,020 --> 00:09:02,990
cryptocurrency settings the problem is

186
00:09:02,990 --> 00:09:04,490
that the verification is going to be

187
00:09:04,490 --> 00:09:07,280
inefficient the verify will have to

188
00:09:07,280 --> 00:09:09,830
compute the entire array in order to

189
00:09:09,830 --> 00:09:13,550
verify that the proof is correct this

190
00:09:13,550 --> 00:09:16,010
leads me to the main subject of this

191
00:09:16,010 --> 00:09:18,650
talk which is the MTP proof-of-work

192
00:09:18,650 --> 00:09:22,310
scheme MTP was presented by the same

193
00:09:22,310 --> 00:09:25,940
designers of album 2d and the designers

194
00:09:25,940 --> 00:09:28,480
designers claimed that MTP

195
00:09:28,480 --> 00:09:31,070
simultaneously offer both memory

196
00:09:31,070 --> 00:09:33,460
hardness of the provers algorithm and

197
00:09:33,460 --> 00:09:37,970
also efficient verification achieving

198
00:09:37,970 --> 00:09:41,870
each property separately is trivial but

199
00:09:41,870 --> 00:09:44,540
getting them simultaneously is much more

200
00:09:44,540 --> 00:09:48,290
challenging also MTP is a concrete proof

201
00:09:48,290 --> 00:09:50,720
of walk scheme which means the designers

202
00:09:50,720 --> 00:09:53,120
suggested can creat parameters for it

203
00:09:53,120 --> 00:09:56,150
and it was originally planned to be

204
00:09:56,150 --> 00:09:58,220
incorporated into this D coin

205
00:09:58,220 --> 00:10:02,450
cryptocurrency one of the main

206
00:10:02,450 --> 00:10:04,940
components of the MTP poof of walk

207
00:10:04,940 --> 00:10:07,730
scheme is the merkel hash tree merkel

208
00:10:07,730 --> 00:10:09,410
hash tree is a cryptographic structure

209
00:10:09,410 --> 00:10:12,350
that allows verification of small

210
00:10:12,350 --> 00:10:15,590
segments within a large memory in a very

211
00:10:15,590 --> 00:10:19,850
efficient way we define two actions on

212
00:10:19,850 --> 00:10:24,230
such a tree first building the three the

213
00:10:24,230 --> 00:10:26,240
built function takes as an input along

214
00:10:26,240 --> 00:10:30,350
array X and output the final hash in the

215
00:10:30,350 --> 00:10:32,270
miracle Hartree which is also called

216
00:10:32,270 --> 00:10:35,800
commitment and is denoted by PI the

217
00:10:35,800 --> 00:10:38,540
second action I'm going to describe is

218
00:10:38,540 --> 00:10:42,170
opening of a block the opening of block

219
00:10:42,170 --> 00:10:45,380
X I is the neva dance that the block is

220
00:10:45,380 --> 00:10:49,910
located at index I what is the idea

221
00:10:49,910 --> 00:10:52,910
behind this cryptographic structure the

222
00:10:52,910 --> 00:10:55,010
idea is that given the commitment PI it

223
00:10:55,010 --> 00:10:58,520
is computationally hard to lie about the

224
00:10:58,520 --> 00:11:02,480
content of X I now we're going to

225
00:11:02,480 --> 00:11:05,390
describe the pooh-bahs algorithm in the

226
00:11:05,390 --> 00:11:08,680
MPP proof-of-work scale

227
00:11:09,740 --> 00:11:12,510
the Provost starts by computing the

228
00:11:12,510 --> 00:11:15,420
other 2d function and then building the

229
00:11:15,420 --> 00:11:17,820
miracle hash tree to obtain a commitment

230
00:11:17,820 --> 00:11:21,360
pie then the puppy is going to choose a

231
00:11:21,360 --> 00:11:24,510
random nonce n and start computing a

232
00:11:24,510 --> 00:11:28,980
series of pseudo random values y0 y1 and

233
00:11:28,980 --> 00:11:33,480
so on how to feech why the pooh is going

234
00:11:33,480 --> 00:11:37,019
to derive a pseudo random index and is

235
00:11:37,019 --> 00:11:39,839
required to provide the block that is

236
00:11:39,839 --> 00:11:43,260
located at that index this process

237
00:11:43,260 --> 00:11:46,500
continues for L pseudo-random blocks and

238
00:11:46,500 --> 00:11:50,790
as in Bitcoin the final Hajj is compared

239
00:11:50,790 --> 00:11:54,540
against the difficulty parameter D if it

240
00:11:54,540 --> 00:11:56,310
is not smaller than D the Pooh is going

241
00:11:56,310 --> 00:11:58,470
to choose a new one dominance and and

242
00:11:58,470 --> 00:12:01,560
start all over again but if he succeeds

243
00:12:01,560 --> 00:12:04,139
he found the proof and this proof

244
00:12:04,139 --> 00:12:07,649
includes the commitment PI the nonce and

245
00:12:07,649 --> 00:12:12,480
and the opening of 3 L blocks given the

246
00:12:12,480 --> 00:12:16,079
proof the verifier can exactly compute

247
00:12:16,079 --> 00:12:18,959
the same chain of values in order to

248
00:12:18,959 --> 00:12:21,769
verify that the proof is correct

249
00:12:21,769 --> 00:12:25,920
so for each pseudo-random index the puah

250
00:12:25,920 --> 00:12:28,470
is going to open the block that is

251
00:12:28,470 --> 00:12:32,100
located at that index but also the two

252
00:12:32,100 --> 00:12:33,959
blocks from which it was created

253
00:12:33,959 --> 00:12:36,120
according to the compression function of

254
00:12:36,120 --> 00:12:39,449
album to D the idea is that once the

255
00:12:39,449 --> 00:12:41,699
Poobah has committed himself to these

256
00:12:41,699 --> 00:12:42,899
three blocks

257
00:12:42,899 --> 00:12:46,260
he cannot against the commitment pi he

258
00:12:46,260 --> 00:12:50,089
cannot lie about these blocks values as

259
00:12:50,089 --> 00:12:53,459
I said earlier MTP is the concrete proof

260
00:12:53,459 --> 00:12:56,430
of walk scheme with given parameters the

261
00:12:56,430 --> 00:12:59,160
verification is very efficient and the

262
00:12:59,160 --> 00:13:01,139
question is what about the memory

263
00:13:01,139 --> 00:13:05,459
hardness of the poorest algorithm MTP is

264
00:13:05,459 --> 00:13:08,519
built on three building blocks the first

265
00:13:08,519 --> 00:13:11,819
one is the algún 2d memory hardness the

266
00:13:11,819 --> 00:13:14,040
second one is the Merkel hash tree and

267
00:13:14,040 --> 00:13:17,399
the third is the series of pseudo random

268
00:13:17,399 --> 00:13:19,769
indexes that are based on the fee

269
00:13:19,769 --> 00:13:23,069
Shamu transfer given that these building

270
00:13:23,069 --> 00:13:26,339
blocks are safe is it implies that MTP

271
00:13:26,339 --> 00:13:31,319
is also safe the goal of the attacker is

272
00:13:31,319 --> 00:13:34,110
to show that MTP is not a memory hard

273
00:13:34,110 --> 00:13:38,009
function by computing MTP proof with a

274
00:13:38,009 --> 00:13:41,399
very small amount of memory but also a

275
00:13:41,399 --> 00:13:45,029
reasonable computational penalty once

276
00:13:45,029 --> 00:13:47,429
again it should be emphasized that the

277
00:13:47,429 --> 00:13:49,799
computational penalty depends on the

278
00:13:49,799 --> 00:13:52,559
size of the argon 2d computation growth

279
00:13:52,559 --> 00:13:55,980
and we saw earlier that if we kept a

280
00:13:55,980 --> 00:13:58,920
small amount of blocks in memory we are

281
00:13:58,920 --> 00:14:00,709
going to pay a high computational

282
00:14:00,709 --> 00:14:05,699
penalty what would happen if the prover

283
00:14:05,699 --> 00:14:08,730
tries to cheat what would happen if the

284
00:14:08,730 --> 00:14:10,499
porridge was to compute a different

285
00:14:10,499 --> 00:14:14,699
function from Algren to D we focused on

286
00:14:14,699 --> 00:14:17,579
the most interesting power which cheats

287
00:14:17,579 --> 00:14:21,139
by including an epsilon fraction of

288
00:14:21,139 --> 00:14:24,689
inconsistent block this inconsistent

289
00:14:24,689 --> 00:14:27,869
block will nerd computer according to

290
00:14:27,869 --> 00:14:31,670
the compression function of Alvin 2d now

291
00:14:31,670 --> 00:14:34,139
what needs to be done in order to

292
00:14:34,139 --> 00:14:37,439
generate a valid proof in order to

293
00:14:37,439 --> 00:14:39,839
generate a valid proof the proven is

294
00:14:39,839 --> 00:14:43,230
that all the 70 pseudo-random indexes

295
00:14:43,230 --> 00:14:46,230
would land on consistent blocks on the

296
00:14:46,230 --> 00:14:49,379
blue blocks if a pseudo-random index

297
00:14:49,379 --> 00:14:52,559
would land on inconsistent block the

298
00:14:52,559 --> 00:14:55,579
pool will be forced to open the two

299
00:14:55,579 --> 00:14:58,649
predecessors of this block and since

300
00:14:58,649 --> 00:15:02,399
this block is inconsistent the verifier

301
00:15:02,399 --> 00:15:05,339
will catch him a fairly simple

302
00:15:05,339 --> 00:15:07,860
probabilistic analysis showed that this

303
00:15:07,860 --> 00:15:10,619
occurs with probability 1 minus Epsilon

304
00:15:10,619 --> 00:15:13,470
at the power of 17 and if a cheating

305
00:15:13,470 --> 00:15:15,749
prover is going to use a very large

306
00:15:15,749 --> 00:15:18,989
amount of inconsistent blocks he's going

307
00:15:18,989 --> 00:15:22,129
to pay a very large penalty and

308
00:15:22,129 --> 00:15:25,350
therefore the prover is forced to use a

309
00:15:25,350 --> 00:15:28,879
very small amount of inconsistent blocks

310
00:15:28,879 --> 00:15:32,939
what seems intuitive is that if poorer

311
00:15:32,939 --> 00:15:33,710
years of

312
00:15:33,710 --> 00:15:36,310
very small amount of inconsistent blocks

313
00:15:36,310 --> 00:15:39,230
he computed function that is similar to

314
00:15:39,230 --> 00:15:42,530
add on to D and argon to D is considered

315
00:15:42,530 --> 00:15:45,200
a memory hard function and therefore MTP

316
00:15:45,200 --> 00:15:48,710
is also memory harder that's what the

317
00:15:48,710 --> 00:15:50,570
designers thought but we are going to

318
00:15:50,570 --> 00:15:53,210
show that it is not the case we are

319
00:15:53,210 --> 00:15:55,220
going to show a poorer that computes

320
00:15:55,220 --> 00:15:58,220
empty people with a very small amount of

321
00:15:58,220 --> 00:16:01,820
memory but also a relatively small

322
00:16:01,820 --> 00:16:06,110
penalty we call the indexing function

323
00:16:06,110 --> 00:16:09,530
fee of argon 2d the indexing function

324
00:16:09,530 --> 00:16:11,990
depends on the value of the previous

325
00:16:11,990 --> 00:16:15,710
block so a cheating prover is going to

326
00:16:15,710 --> 00:16:19,250
exploit the fact that Alden 2d accesses

327
00:16:19,250 --> 00:16:21,920
its memory in such a way that is

328
00:16:21,920 --> 00:16:24,740
determined by its previous confide

329
00:16:24,740 --> 00:16:27,740
previous computation on the values of

330
00:16:27,740 --> 00:16:31,100
its own blocks the goal of the cheater

331
00:16:31,100 --> 00:16:34,460
is the cheat in a very small amount of

332
00:16:34,460 --> 00:16:36,980
block such that the computation graph

333
00:16:36,980 --> 00:16:40,910
will be much smaller so the main idea of

334
00:16:40,910 --> 00:16:43,310
the attack is that the cheat improver

335
00:16:43,310 --> 00:16:45,530
will compute a different function from

336
00:16:45,530 --> 00:16:48,500
album to D that has weaker computation

337
00:16:48,500 --> 00:16:52,070
memory trade-off resistance let's see

338
00:16:52,070 --> 00:16:55,970
how it can be done so we store in memory

339
00:16:55,970 --> 00:16:59,300
only a small set of blocks denoted by s

340
00:16:59,300 --> 00:17:02,600
these are the green blocks in their way

341
00:17:02,600 --> 00:17:05,540
and now we are going to manipulate each

342
00:17:05,540 --> 00:17:09,109
second block such that the blue blocks

343
00:17:09,109 --> 00:17:11,869
are going to be computed using blocks

344
00:17:11,869 --> 00:17:15,109
from the set s meaning the indexing

345
00:17:15,109 --> 00:17:17,750
function of each blue block is going to

346
00:17:17,750 --> 00:17:21,130
point towards a block from the set s

347
00:17:21,130 --> 00:17:23,900
note that the red blocks are now

348
00:17:23,900 --> 00:17:26,300
inconsistent these blocks will need

349
00:17:26,300 --> 00:17:28,520
computer according to the compression

350
00:17:28,520 --> 00:17:32,450
function of album 2d the problem is that

351
00:17:32,450 --> 00:17:34,940
half of the block are now inconsistent

352
00:17:34,940 --> 00:17:37,220
and the puppy is going to pay a very

353
00:17:37,220 --> 00:17:40,640
large penalty in order to land on 70

354
00:17:40,640 --> 00:17:45,670
consistent blocks that's not good enough

355
00:17:46,050 --> 00:17:48,660
in fact we can generalize this idea we

356
00:17:48,660 --> 00:17:50,970
can divide a memory to largest segments

357
00:17:50,970 --> 00:17:55,040
of five or even 20 blocks the

358
00:17:55,040 --> 00:17:58,620
inconsistent block on each segment the

359
00:17:58,620 --> 00:18:01,440
wet block is also called a control book

360
00:18:01,440 --> 00:18:04,140
and it is chosen that we've been

361
00:18:04,140 --> 00:18:07,620
following t minus 1 blocks are going to

362
00:18:07,620 --> 00:18:11,070
be computed using the set s meaning the

363
00:18:11,070 --> 00:18:14,040
indexing function of each blue block is

364
00:18:14,040 --> 00:18:16,320
going to point towards a block from the

365
00:18:16,320 --> 00:18:20,690
set s there are several problems here

366
00:18:20,690 --> 00:18:23,580
first computing control blocks is going

367
00:18:23,580 --> 00:18:26,850
to be relatively expensive now and also

368
00:18:26,850 --> 00:18:28,590
we will have to store those blocks in

369
00:18:28,590 --> 00:18:31,380
memory in fact there are several

370
00:18:31,380 --> 00:18:34,020
optimizations we can do there is no need

371
00:18:34,020 --> 00:18:36,510
to save the green blocks in memory we

372
00:18:36,510 --> 00:18:38,940
can just save the red blocks the control

373
00:18:38,940 --> 00:18:41,040
blocks and make sure that the blue

374
00:18:41,040 --> 00:18:44,130
blocks will be computed directly from

375
00:18:44,130 --> 00:18:47,430
the red ones let's see what we gained

376
00:18:47,430 --> 00:18:50,100
from this attack let's say we want to

377
00:18:50,100 --> 00:18:54,240
compute X 50 in order to compute X 15 we

378
00:18:54,240 --> 00:18:56,940
need a previous block which is X 14 and

379
00:18:56,940 --> 00:19:01,490
the block that is located at fee of 15

380
00:19:01,490 --> 00:19:03,960
we have manipulated the indexing

381
00:19:03,960 --> 00:19:07,200
function such that it will point towards

382
00:19:07,200 --> 00:19:09,600
a control block that is stored in memory

383
00:19:09,600 --> 00:19:14,310
and so on and so on so we have managed

384
00:19:14,310 --> 00:19:16,620
to manipulate the computation go up in

385
00:19:16,620 --> 00:19:19,530
such a way that the computation graph is

386
00:19:19,530 --> 00:19:22,980
much smaller in fact it's a single

387
00:19:22,980 --> 00:19:26,940
branch let's go through the phases of

388
00:19:26,940 --> 00:19:29,730
this basic attack we start by computing

389
00:19:29,730 --> 00:19:31,620
the control blocks and building the

390
00:19:31,620 --> 00:19:33,720
American hard way to obtain a commitment

391
00:19:33,720 --> 00:19:38,220
pi then we need to generate a consistent

392
00:19:38,220 --> 00:19:41,280
proof in order to generate a consistent

393
00:19:41,280 --> 00:19:45,060
proof we need at all the 70 CD and 'm

394
00:19:45,060 --> 00:19:47,850
indexes would land on the blue blocks on

395
00:19:47,850 --> 00:19:50,910
the consistent blocks if a serie when

396
00:19:50,910 --> 00:19:53,640
the index would land on inconsistent

397
00:19:53,640 --> 00:19:57,300
block like this one the prover would not

398
00:19:57,300 --> 00:19:59,789
be able the poorest first

399
00:19:59,789 --> 00:20:02,460
to open the two predecessors of this

400
00:20:02,460 --> 00:20:05,039
block and since this the block is

401
00:20:05,039 --> 00:20:08,509
inconsistent the prover will catch him

402
00:20:08,509 --> 00:20:12,269
let's concentrate on the first fail of

403
00:20:12,269 --> 00:20:14,749
this attack what is the computational

404
00:20:14,749 --> 00:20:17,869
complexity for generating control blocks

405
00:20:17,869 --> 00:20:21,889
we denote by a big T this size away and

406
00:20:21,889 --> 00:20:26,879
by a small T the segment size since each

407
00:20:26,879 --> 00:20:30,570
T consecutive blocks contains a single

408
00:20:30,570 --> 00:20:33,779
control block the probability to land on

409
00:20:33,779 --> 00:20:38,700
a control block is 1 over T since each

410
00:20:38,700 --> 00:20:42,119
control block controls the next t minus

411
00:20:42,119 --> 00:20:45,090
1 blocks we need to satisfy 3 minus 1

412
00:20:45,090 --> 00:20:48,570
condition and therefore the complexity

413
00:20:48,570 --> 00:20:50,090
is as follows

414
00:20:50,090 --> 00:20:53,609
note that the complexity is exponential

415
00:20:53,609 --> 00:20:57,509
in T and the problem is that for large T

416
00:20:57,509 --> 00:20:59,399
we are going to spend a significant

417
00:20:59,399 --> 00:21:01,139
amount of time in order to generate

418
00:21:01,139 --> 00:21:04,229
those control blocks one of the

419
00:21:04,229 --> 00:21:06,509
techniques we used in order to speed up

420
00:21:06,509 --> 00:21:09,509
the onic computation that begins once

421
00:21:09,509 --> 00:21:12,049
the challenge I is received is

422
00:21:12,049 --> 00:21:15,629
pre-processing at first sight it may not

423
00:21:15,629 --> 00:21:17,729
be clear how a cheating profit can

424
00:21:17,729 --> 00:21:20,399
benefit from pre-processing as the

425
00:21:20,399 --> 00:21:22,169
function has to be applied to the

426
00:21:22,169 --> 00:21:24,629
challenge I whose values cannot be

427
00:21:24,629 --> 00:21:26,450
predicted in advance

428
00:21:26,450 --> 00:21:28,979
the idea is to partition the array into

429
00:21:28,979 --> 00:21:31,590
two parts the first one is going to be a

430
00:21:31,590 --> 00:21:33,210
small prefix that we are going to be

431
00:21:33,210 --> 00:21:35,489
computed honestly online using the

432
00:21:35,489 --> 00:21:38,249
challenge I and the second one is going

433
00:21:38,249 --> 00:21:40,559
to be independent of the first one and

434
00:21:40,559 --> 00:21:44,609
also contain most of the blocks in order

435
00:21:44,609 --> 00:21:47,309
to maintain the property that the

436
00:21:47,309 --> 00:21:49,429
complexity of the pre-processing phase

437
00:21:49,429 --> 00:21:53,519
we want to store a few fixed value

438
00:21:53,519 --> 00:21:56,690
blocks and only there the control blocks

439
00:21:56,690 --> 00:21:59,279
we will make sure that the control block

440
00:21:59,279 --> 00:22:01,289
that the blue blocks will be computed

441
00:22:01,289 --> 00:22:04,019
using the few fixed value values blocks

442
00:22:04,019 --> 00:22:06,599
and not depend on the undetermined

443
00:22:06,599 --> 00:22:09,690
perfect so during the online computation

444
00:22:09,690 --> 00:22:12,989
the only thing the proven engineer is to

445
00:22:12,989 --> 00:22:13,560
compute

446
00:22:13,560 --> 00:22:15,570
small prefix and finish the miracle

447
00:22:15,570 --> 00:22:18,420
harsh way we stress that the

448
00:22:18,420 --> 00:22:20,520
pre-processing phase can be very easily

449
00:22:20,520 --> 00:22:23,160
paralyzed and requires less than one

450
00:22:23,160 --> 00:22:26,220
megabyte of memory we also note that

451
00:22:26,220 --> 00:22:28,380
additional optimizations are possible

452
00:22:28,380 --> 00:22:32,270
and described in details in the paper

453
00:22:32,270 --> 00:22:35,450
now we are going to evaluate this attack

454
00:22:35,450 --> 00:22:39,210
in a standard metric we can show that we

455
00:22:39,210 --> 00:22:42,890
can compute a proof which is roughly 110

456
00:22:42,890 --> 00:22:46,290
times more efficient compared to the own

457
00:22:46,290 --> 00:22:49,380
spoofer of course only after practical

458
00:22:49,380 --> 00:22:52,890
pre-computation the potential effect of

459
00:22:52,890 --> 00:22:55,290
this attack is that now an attacker can

460
00:22:55,290 --> 00:22:57,720
overwhelm the network with malicious

461
00:22:57,720 --> 00:22:59,940
proof with very small computational

462
00:22:59,940 --> 00:23:02,640
power this may cause significant

463
00:23:02,640 --> 00:23:05,550
problems such as double spending and in

464
00:23:05,550 --> 00:23:09,630
this sense this attack is critical in

465
00:23:09,630 --> 00:23:13,590
conclusion MTP is a concrete proof of

466
00:23:13,590 --> 00:23:15,600
walk scheme with several cryptographic

467
00:23:15,600 --> 00:23:18,390
building blocks even though each

468
00:23:18,390 --> 00:23:21,090
building block is secure there is a

469
00:23:21,090 --> 00:23:23,310
subtle weakness in its indexing function

470
00:23:23,310 --> 00:23:26,370
in its infield that leads to a very

471
00:23:26,370 --> 00:23:30,000
efficient attack the most natural way to

472
00:23:30,000 --> 00:23:33,420
fix MTP is to change the indexing

473
00:23:33,420 --> 00:23:36,420
function so that it will not depend on

474
00:23:36,420 --> 00:23:39,660
the values of weeks however there are

475
00:23:39,660 --> 00:23:44,000
still other weaknesses essentially a

476
00:23:44,000 --> 00:23:46,890
significant impact of this attack is

477
00:23:46,890 --> 00:23:50,310
that MTP was withheld from deployment in

478
00:23:50,310 --> 00:23:54,480
the zeeco in cryptocurrency so if you

479
00:23:54,480 --> 00:23:57,540
want to design a proof-of-work with

480
00:23:57,540 --> 00:23:59,670
desired properties such as efficient

481
00:23:59,670 --> 00:24:02,700
verification and also fight this

482
00:24:02,700 --> 00:24:05,910
centralization it is still considered a

483
00:24:05,910 --> 00:24:08,910
difficult challenge and I expect that in

484
00:24:08,910 --> 00:24:10,740
the near future there will be further

485
00:24:10,740 --> 00:24:14,130
research on this area thank you for your

486
00:24:14,130 --> 00:24:16,179
attention

487
00:24:16,179 --> 00:24:18,240
you

