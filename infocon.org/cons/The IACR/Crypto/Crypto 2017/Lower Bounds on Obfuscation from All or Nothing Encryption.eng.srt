1
00:00:04,860 --> 00:00:07,080
okay hi everyone my name is Amira we'll

2
00:00:07,080 --> 00:00:08,340
be talking about lower balance and

3
00:00:08,340 --> 00:00:09,510
obfuscation from all-or-nothing

4
00:00:09,510 --> 00:00:11,400
encryption and I'll define what it means

5
00:00:11,400 --> 00:00:13,469
to have or nothing encryption later

6
00:00:13,469 --> 00:00:15,809
during the talk this is joint work with

7
00:00:15,809 --> 00:00:19,650
San Jim Garg and Mama hoody so let's

8
00:00:19,650 --> 00:00:21,180
define again what distinguishability

9
00:00:21,180 --> 00:00:24,330
office kitchen is or IO it was first

10
00:00:24,330 --> 00:00:26,670
proposed by Baraka Thailand 2001 and

11
00:00:26,670 --> 00:00:28,800
basically says that it's an algorithm

12
00:00:28,800 --> 00:00:31,500
that takes as input circuit and outputs

13
00:00:31,500 --> 00:00:33,590
a functionally equivalent circuit and

14
00:00:33,590 --> 00:00:36,720
for security we say that for any two

15
00:00:36,720 --> 00:00:38,489
functional equivalent circuits of the

16
00:00:38,489 --> 00:00:40,620
same size an adversary should be able to

17
00:00:40,620 --> 00:00:42,269
Singlish between the obfuscation of one

18
00:00:42,269 --> 00:00:47,400
or the other and following the the first

19
00:00:47,400 --> 00:00:49,589
candidate construction of gorgotron 2013

20
00:00:49,589 --> 00:00:52,080
IO has shown to be a quite powerful

21
00:00:52,080 --> 00:00:54,900
force allowing many applications to be

22
00:00:54,900 --> 00:00:56,729
built upon it including functional

23
00:00:56,729 --> 00:01:00,989
encryption to party to around

24
00:01:00,989 --> 00:01:03,330
multi-party computation and even proving

25
00:01:03,330 --> 00:01:05,010
the hardness of complexity results and

26
00:01:05,010 --> 00:01:06,360
there are many more applications forming

27
00:01:06,360 --> 00:01:10,410
that so given the usefulness of Io one

28
00:01:10,410 --> 00:01:12,480
natural question to ask is what

29
00:01:12,480 --> 00:01:15,360
assumptions could give us IO and to

30
00:01:15,360 --> 00:01:18,510
answer this question I see so we have

31
00:01:18,510 --> 00:01:22,260
two main ways to get IO at the moment

32
00:01:22,260 --> 00:01:22,920
that we know of

33
00:01:22,920 --> 00:01:25,200
the first being for multi linear maps

34
00:01:25,200 --> 00:01:28,200
and this was initiated by gogit all in

35
00:01:28,200 --> 00:01:30,120
2013 and the series of works have

36
00:01:30,120 --> 00:01:33,030
followed this approach showing either

37
00:01:33,030 --> 00:01:34,800
and improved constructions or we can

38
00:01:34,800 --> 00:01:37,770
form weakened assumptions and the

39
00:01:37,770 --> 00:01:39,810
alternative way to get to IO is through

40
00:01:39,810 --> 00:01:42,030
some form of functional encryption from

41
00:01:42,030 --> 00:01:45,360
which all constructions of this kind of

42
00:01:45,360 --> 00:01:48,930
functional encryption also are built all

43
00:01:48,930 --> 00:01:50,340
known constructions also are built using

44
00:01:50,340 --> 00:01:53,159
the multi linear maps as well and as

45
00:01:53,159 --> 00:01:54,510
you've seen from the previous talk by

46
00:01:54,510 --> 00:01:56,729
Rachel the state of the art of

47
00:01:56,729 --> 00:01:58,320
constructing area for functional

48
00:01:58,320 --> 00:02:02,159
encryption happens to be based on try

49
00:02:02,159 --> 00:02:05,010
linear maps and PR G's with some special

50
00:02:05,010 --> 00:02:07,229
properties and their construction is no

51
00:02:07,229 --> 00:02:08,869
black box

52
00:02:08,869 --> 00:02:12,840
however due to certain like due to

53
00:02:12,840 --> 00:02:14,819
certain attacks against the aesthetic

54
00:02:14,819 --> 00:02:17,040
multi linear maps we are having now less

55
00:02:17,040 --> 00:02:18,250
confidence in the

56
00:02:18,250 --> 00:02:21,010
security of the IO of the security of

57
00:02:21,010 --> 00:02:23,940
the known constructions of IO and so

58
00:02:23,940 --> 00:02:27,370
this motivates us to ask whether there

59
00:02:27,370 --> 00:02:29,890
can be any other alternative preferably

60
00:02:29,890 --> 00:02:31,630
standard assumptions that could give us

61
00:02:31,630 --> 00:02:33,700
IO instead of using the more exotic

62
00:02:33,700 --> 00:02:36,670
multi linear Maps assumptions and to

63
00:02:36,670 --> 00:02:38,650
answer this question as serious have

64
00:02:38,650 --> 00:02:40,780
works a series of works have shown that

65
00:02:40,780 --> 00:02:44,200
none of these primitives give us io in a

66
00:02:44,200 --> 00:02:46,600
blackbox way this includes the collision

67
00:02:46,600 --> 00:02:48,310
resistant hash functions chapter

68
00:02:48,310 --> 00:02:50,680
permutations and even the generic group

69
00:02:50,680 --> 00:02:52,690
model anything that is hardly jerk coop

70
00:02:52,690 --> 00:02:54,250
model cannot give us IO in a blackbox

71
00:02:54,250 --> 00:02:56,620
way but this still leaves the

72
00:02:56,620 --> 00:03:00,040
possibility of whether there are more if

73
00:03:00,040 --> 00:03:01,870
there are more sophisticated primitives

74
00:03:01,870 --> 00:03:03,580
or perhaps stronger assumptions that

75
00:03:03,580 --> 00:03:06,640
could give us IO and in this work we

76
00:03:06,640 --> 00:03:08,800
extend this line of research by showing

77
00:03:08,800 --> 00:03:11,020
that under mild assumptions were mild

78
00:03:11,020 --> 00:03:12,820
assumptions that we make is basically

79
00:03:12,820 --> 00:03:14,230
that one-way function exists and that

80
00:03:14,230 --> 00:03:16,840
the hierarchy does not collapse that

81
00:03:16,840 --> 00:03:19,660
there is no black box construction of IO

82
00:03:19,660 --> 00:03:22,030
from any of these primitives and the

83
00:03:22,030 --> 00:03:23,680
kind of non black box techniques that we

84
00:03:23,680 --> 00:03:26,890
were allowed are especially relevant in

85
00:03:26,890 --> 00:03:29,170
this context when we deal with these

86
00:03:29,170 --> 00:03:32,230
kind of primitives and this is where the

87
00:03:32,230 --> 00:03:35,260
title of the talk becomes relevant is

88
00:03:35,260 --> 00:03:37,300
that all of these primitives are

89
00:03:37,300 --> 00:03:39,520
all-or-nothing nature meaning that if

90
00:03:39,520 --> 00:03:41,350
you have the decryption key then you

91
00:03:41,350 --> 00:03:43,750
could decrypt the cipher text and get

92
00:03:43,750 --> 00:03:46,239
back the entire plain text otherwise if

93
00:03:46,239 --> 00:03:47,650
you don't have the decryption key you

94
00:03:47,650 --> 00:03:52,750
learn nothing and so the plan for the

95
00:03:52,750 --> 00:03:54,430
rest of the talk is that first I will

96
00:03:54,430 --> 00:03:57,070
describe the black box model and our

97
00:03:57,070 --> 00:03:59,290
proposed monolithic model which captures

98
00:03:59,290 --> 00:04:02,410
the black box techniques that may be

99
00:04:02,410 --> 00:04:05,320
used to construct IO from the primitives

100
00:04:05,320 --> 00:04:07,930
that we were separated from and the

101
00:04:07,930 --> 00:04:09,130
second part of the talk is I will

102
00:04:09,130 --> 00:04:11,080
describe their high-level ideas behind

103
00:04:11,080 --> 00:04:15,610
our separation results and leverage the

104
00:04:15,610 --> 00:04:16,839
all-or-nothing probability of the

105
00:04:16,839 --> 00:04:18,279
primitives that I that I mentioned

106
00:04:18,279 --> 00:04:21,970
before so let's go over the first part

107
00:04:21,970 --> 00:04:25,090
here so in the classical black box

108
00:04:25,090 --> 00:04:27,340
framework of Impala 0 - and the

109
00:04:27,340 --> 00:04:29,860
Rheingold trebizond button a black box

110
00:04:29,860 --> 00:04:31,540
construction of IO from P

111
00:04:31,540 --> 00:04:34,180
basically means that IO uses P in a

112
00:04:34,180 --> 00:04:35,620
black box way it only uses the

113
00:04:35,620 --> 00:04:38,410
input-output behavior of P and this is

114
00:04:38,410 --> 00:04:40,240
natural when P happens to be the one way

115
00:04:40,240 --> 00:04:42,180
function or the trapdoor permutation

116
00:04:42,180 --> 00:04:44,290
however this is not the case when we

117
00:04:44,290 --> 00:04:45,880
deal with more sophisticated primitives

118
00:04:45,880 --> 00:04:48,430
or not black box techniques for example

119
00:04:48,430 --> 00:04:49,780
one common uh black box technique

120
00:04:49,780 --> 00:04:51,880
involves doing some form of computation

121
00:04:51,880 --> 00:04:54,160
or work that could have circuits with

122
00:04:54,160 --> 00:04:56,830
one wavefunction gates inside them this

123
00:04:56,830 --> 00:04:58,960
this behaviour is observed for example

124
00:04:58,960 --> 00:05:00,310
in the case where we could have zero

125
00:05:00,310 --> 00:05:02,470
knowledge proof over circuits with

126
00:05:02,470 --> 00:05:04,450
one-way function calls in order to

127
00:05:04,450 --> 00:05:07,270
realize identification schemes another

128
00:05:07,270 --> 00:05:09,250
example which is relevant to this

129
00:05:09,250 --> 00:05:11,200
session is over circuits with one-way

130
00:05:11,200 --> 00:05:13,630
function calls could result in many

131
00:05:13,630 --> 00:05:14,860
applications some of which are

132
00:05:14,860 --> 00:05:18,810
represented in these higher orders paper

133
00:05:18,810 --> 00:05:22,090
so there are also previous works that

134
00:05:22,090 --> 00:05:23,590
try to prove limits of this kind of

135
00:05:23,590 --> 00:05:25,240
technique this technique where a

136
00:05:25,240 --> 00:05:27,100
construction queue is based on a

137
00:05:27,100 --> 00:05:29,980
construction P that accepts circuits the

138
00:05:29,980 --> 00:05:32,890
with with one wavefunction gates and

139
00:05:32,890 --> 00:05:35,340
here are so just some of the works that

140
00:05:35,340 --> 00:05:37,960
that that prove limitations of this kind

141
00:05:37,960 --> 00:05:39,400
of technique starting with the work of

142
00:05:39,400 --> 00:05:43,660
Bukowski Katz Segev and Eureka mo

143
00:05:43,660 --> 00:05:45,250
where they show that key agreement

144
00:05:45,250 --> 00:05:47,380
protocols cannot be based in a black box

145
00:05:47,380 --> 00:05:48,580
away from witness indistinguishable

146
00:05:48,580 --> 00:05:50,800
proofs for statement with on your

147
00:05:50,800 --> 00:05:53,380
function gates also to show the limits

148
00:05:53,380 --> 00:05:56,080
or by oh I fancy yourselves shows that

149
00:05:56,080 --> 00:05:57,250
you cannot get collision resistant hash

150
00:05:57,250 --> 00:05:59,500
functions or one-way permutations from

151
00:05:59,500 --> 00:06:02,140
i/o for circuits with linear function

152
00:06:02,140 --> 00:06:04,270
gates and as you'll see in the next talk

153
00:06:04,270 --> 00:06:07,510
they be by the word puppet ask you at

154
00:06:07,510 --> 00:06:09,460
all they will show that IO ports for

155
00:06:09,460 --> 00:06:10,840
Oracle aided circuits that could have

156
00:06:10,840 --> 00:06:12,910
one way function gates inside them

157
00:06:12,910 --> 00:06:15,610
I do not imply structured heart problems

158
00:06:15,610 --> 00:06:20,080
in say and P intersect comma P but what

159
00:06:20,080 --> 00:06:23,260
about each i/o construction due to an

160
00:06:23,260 --> 00:06:26,140
antigen and Petoskey Vikon Tanaka

161
00:06:26,140 --> 00:06:29,080
does this construction fall under the

162
00:06:29,080 --> 00:06:31,510
model where F where the i/o uses the

163
00:06:31,510 --> 00:06:33,610
underlying give e by providing it with

164
00:06:33,610 --> 00:06:34,930
circuits that could have one wave

165
00:06:34,930 --> 00:06:37,600
function case inside them well no that's

166
00:06:37,600 --> 00:06:39,910
not the case if you look back to the

167
00:06:39,910 --> 00:06:42,510
construction the aisle actually feel

168
00:06:42,510 --> 00:06:45,150
the key generation function above a a

169
00:06:45,150 --> 00:06:47,430
circuit that contains encryption gates

170
00:06:47,430 --> 00:06:50,910
of the FE so in some way you can think

171
00:06:50,910 --> 00:06:53,430
of us as being used in a self eating way

172
00:06:53,430 --> 00:06:55,860
that these B of e sub routines are being

173
00:06:55,860 --> 00:06:58,680
fed back to a V and this is different

174
00:06:58,680 --> 00:07:00,840
from the functional epi or for circuits

175
00:07:00,840 --> 00:07:02,100
with one-way function gates this does

176
00:07:02,100 --> 00:07:05,430
not fit in the previous models and and

177
00:07:05,430 --> 00:07:07,530
this is not this is not an uncommon

178
00:07:07,530 --> 00:07:09,300
behavior there are other examples that

179
00:07:09,300 --> 00:07:11,280
do not fall under the circuit with a no

180
00:07:11,280 --> 00:07:13,920
function gates model for example one

181
00:07:13,920 --> 00:07:15,120
famous example is the effigy

182
00:07:15,120 --> 00:07:17,370
bootstrapping by Gentry where we have to

183
00:07:17,370 --> 00:07:19,350
feed the decryption algorithm back to

184
00:07:19,350 --> 00:07:21,060
the evaluation algorithm and this is

185
00:07:21,060 --> 00:07:22,890
also another behavior of what we call

186
00:07:22,890 --> 00:07:26,940
self eating also you have the IO

187
00:07:26,940 --> 00:07:29,130
bootstrapping due to go guitar it was 13

188
00:07:29,130 --> 00:07:31,350
were to show that in order to get IO for

189
00:07:31,350 --> 00:07:33,750
poly SCI circuits you need to feed the

190
00:07:33,750 --> 00:07:37,200
evaluation and decryption of fhe back to

191
00:07:37,200 --> 00:07:40,400
some IO for a smaller class of circuits

192
00:07:40,400 --> 00:07:43,160
so these two also do not fall under the

193
00:07:43,160 --> 00:07:45,180
these circuits with one-way function

194
00:07:45,180 --> 00:07:49,680
case model so inspired by this previous

195
00:07:49,680 --> 00:07:53,730
model that showed how to prove

196
00:07:53,730 --> 00:07:55,980
limitations for circuit one way function

197
00:07:55,980 --> 00:07:58,290
case model we propose we extend this

198
00:07:58,290 --> 00:07:59,910
framework and propose our own model

199
00:07:59,910 --> 00:08:03,960
called the monolithic model where we say

200
00:08:03,960 --> 00:08:05,640
we have a monolithic construction of IO

201
00:08:05,640 --> 00:08:08,640
from some primitive P if this primitive

202
00:08:08,640 --> 00:08:11,760
P can accept circuits with any arbitrary

203
00:08:11,760 --> 00:08:14,610
periods that is including P 1 or P G's

204
00:08:14,610 --> 00:08:17,280
and it is not a constraint to only a

205
00:08:17,280 --> 00:08:18,780
specific type of gate such as the

206
00:08:18,780 --> 00:08:22,260
one-way function gate and this for

207
00:08:22,260 --> 00:08:24,720
example captures the FH IO construction

208
00:08:24,720 --> 00:08:26,850
it captures the the bootstrapping

209
00:08:26,850 --> 00:08:30,300
theorems and this is where we're going

210
00:08:30,300 --> 00:08:31,620
to use this monolithic model to prove

211
00:08:31,620 --> 00:08:35,070
our separation results so if I were to

212
00:08:35,070 --> 00:08:37,380
restate our result instead of saying

213
00:08:37,380 --> 00:08:39,299
there's no black box construction I will

214
00:08:39,299 --> 00:08:41,159
accurately say that there is no more a

215
00:08:41,159 --> 00:08:42,870
lovely construction of IO from any of

216
00:08:42,870 --> 00:08:48,450
these primitives great so let's go over

217
00:08:48,450 --> 00:08:50,550
the second part which is I'll talk about

218
00:08:50,550 --> 00:08:52,860
the high level ideas behind the

219
00:08:52,860 --> 00:08:54,380
separation results

220
00:08:54,380 --> 00:08:57,410
and all of our all of our results are

221
00:08:57,410 --> 00:09:00,040
based on proving an impossibility of

222
00:09:00,040 --> 00:09:02,300
Ohio from some form of witness

223
00:09:02,300 --> 00:09:04,400
encryption and so I'll be focusing on

224
00:09:04,400 --> 00:09:05,630
witness encryption for the rest of the

225
00:09:05,630 --> 00:09:08,840
talk so let's say we want to prove that

226
00:09:08,840 --> 00:09:11,570
this kind of construction is impossible

227
00:09:11,570 --> 00:09:13,160
let's say we want to prove that a

228
00:09:13,160 --> 00:09:14,780
monolithic construction of IO from P is

229
00:09:14,780 --> 00:09:16,700
impossible there is actually an

230
00:09:16,700 --> 00:09:19,250
equivalent way of looking at it you can

231
00:09:19,250 --> 00:09:21,230
actually look at it as a fully black box

232
00:09:21,230 --> 00:09:23,720
construction of IO from what we call an

233
00:09:23,720 --> 00:09:26,360
extended P or extended P is simply the

234
00:09:26,360 --> 00:09:29,360
primitive P where the P is allowed to

235
00:09:29,360 --> 00:09:31,670
accept circuits with any types of gates

236
00:09:31,670 --> 00:09:35,960
inside it and this is different that's

237
00:09:35,960 --> 00:09:38,360
then proving an impossibility result and

238
00:09:38,360 --> 00:09:40,580
it suffice to prove that fully black box

239
00:09:40,580 --> 00:09:42,080
instruction of IO from extended P is

240
00:09:42,080 --> 00:09:44,720
impossible to show that monolithic

241
00:09:44,720 --> 00:09:46,880
assertions of IO for P is impossible and

242
00:09:46,880 --> 00:09:48,680
this is different from showing an

243
00:09:48,680 --> 00:09:50,240
impossibility result a fully black box

244
00:09:50,240 --> 00:09:51,860
construction of Io from a normal peak

245
00:09:51,860 --> 00:09:54,350
the extended P is actually a stronger

246
00:09:54,350 --> 00:09:57,410
primitive and we have to make sure that

247
00:09:57,410 --> 00:10:00,440
we define we carefully define what it

248
00:10:00,440 --> 00:10:02,480
means to have this kind of extension for

249
00:10:02,480 --> 00:10:07,340
this kind of primitive and so the in

250
00:10:07,340 --> 00:10:08,810
order to prove a possibility result

251
00:10:08,810 --> 00:10:11,120
we're going to rule out a fully black

252
00:10:11,120 --> 00:10:15,250
construction of IO from this extended P

253
00:10:15,250 --> 00:10:17,840
good so let's go over the general plan

254
00:10:17,840 --> 00:10:22,640
behind proving what it means to to rule

255
00:10:22,640 --> 00:10:24,680
out a construction of IO from P in a

256
00:10:24,680 --> 00:10:26,390
black box way and this is the plan that

257
00:10:26,390 --> 00:10:29,270
of the general plan of how we how one

258
00:10:29,270 --> 00:10:31,670
does this so the first step is we first

259
00:10:31,670 --> 00:10:34,750
define an idealized Oracle that securely

260
00:10:34,750 --> 00:10:39,080
realizes the primitive P for example in

261
00:10:39,080 --> 00:10:41,810
the case of the connecticut al where

262
00:10:41,810 --> 00:10:43,700
they show that io cannot be based on

263
00:10:43,700 --> 00:10:45,590
one-way function in a black box way they

264
00:10:45,590 --> 00:10:48,590
show they their idealized model happens

265
00:10:48,590 --> 00:10:51,680
to be the random Oracle and the second

266
00:10:51,680 --> 00:10:53,360
step is that now that we have the

267
00:10:53,360 --> 00:10:56,150
idealized Oracle the second step is to

268
00:10:56,150 --> 00:11:00,140
compile out this idealized Oracle from

269
00:11:00,140 --> 00:11:02,690
IO in the idealized model and get back

270
00:11:02,690 --> 00:11:05,630
an approximate IO in the plain model and

271
00:11:05,630 --> 00:11:07,670
by approximate IO we simply mean that it

272
00:11:07,670 --> 00:11:08,150
is correct

273
00:11:08,150 --> 00:11:12,950
on almost all inputs then we use the

274
00:11:12,950 --> 00:11:14,870
work the third step is that we use the

275
00:11:14,870 --> 00:11:18,190
work of brokers key brush can fly Shaka

276
00:11:18,190 --> 00:11:21,500
to conclude that from the from the

277
00:11:21,500 --> 00:11:23,810
previous two steps we find that there is

278
00:11:23,810 --> 00:11:28,320
no black box construction of i/o 4p and

279
00:11:28,320 --> 00:11:29,470
[Music]

280
00:11:29,470 --> 00:11:33,500
we want to apply this plan for the case

281
00:11:33,500 --> 00:11:35,810
of proving that IO construct that

282
00:11:35,810 --> 00:11:38,740
monolithic constructions of IO do not

283
00:11:38,740 --> 00:11:40,850
prompt from witness encryption does not

284
00:11:40,850 --> 00:11:43,250
exist and that will only focus on the

285
00:11:43,250 --> 00:11:45,110
first two steps as this is where the

286
00:11:45,110 --> 00:11:49,839
main challenges of our work appear and

287
00:11:49,839 --> 00:11:52,310
notice that in the first step we need to

288
00:11:52,310 --> 00:11:53,930
define idealized Oracle we need to

289
00:11:53,930 --> 00:11:55,610
define our idealized Oracle that

290
00:11:55,610 --> 00:11:57,440
implements extended with this decryption

291
00:11:57,440 --> 00:12:00,290
because recall that a monolithic

292
00:12:00,290 --> 00:12:01,550
construction of IO from witness

293
00:12:01,550 --> 00:12:03,620
encryption is actually a fully black box

294
00:12:03,620 --> 00:12:06,320
construction of i/o from extended

295
00:12:06,320 --> 00:12:08,210
witness encryption so we need an AI

296
00:12:08,210 --> 00:12:10,100
Oracle attempt somewhat extended witness

297
00:12:10,100 --> 00:12:13,220
Egyptian so what is what the decryption

298
00:12:13,220 --> 00:12:15,529
in case you're wondering so what does

299
00:12:15,529 --> 00:12:18,080
the Christian says that you can encrypt

300
00:12:18,080 --> 00:12:20,180
a message with respect to some circuit

301
00:12:20,180 --> 00:12:22,459
let's call it F and if we want to

302
00:12:22,459 --> 00:12:25,459
decrypt a circuit I would only get back

303
00:12:25,459 --> 00:12:27,680
the message if the supplied witness is a

304
00:12:27,680 --> 00:12:30,680
satisfying statement to the circuit if

305
00:12:30,680 --> 00:12:32,600
it is not a sign satisfying statement I

306
00:12:32,600 --> 00:12:38,330
would get nothing and when we want to

307
00:12:38,330 --> 00:12:40,160
define what extended witness equation is

308
00:12:40,160 --> 00:12:43,190
we basically mean that the function that

309
00:12:43,190 --> 00:12:44,660
we supplied during encryption and

310
00:12:44,660 --> 00:12:48,050
evaluate during decryption only can

311
00:12:48,050 --> 00:12:50,000
contain witness encryption case that is

312
00:12:50,000 --> 00:12:53,839
encryption and decryption case so that

313
00:12:53,839 --> 00:12:55,279
is what we mean by extend witness

314
00:12:55,279 --> 00:12:58,550
encryption and if we want to define such

315
00:12:58,550 --> 00:13:00,770
an Oracle it's quite simple to define

316
00:13:00,770 --> 00:13:03,620
which is just simply defined as a form

317
00:13:03,620 --> 00:13:04,760
of idealized encryption and decryption

318
00:13:04,760 --> 00:13:07,010
functionality where the encryption could

319
00:13:07,010 --> 00:13:09,170
happen could happen to be for example a

320
00:13:09,170 --> 00:13:13,990
normal random Oracle so given this

321
00:13:13,990 --> 00:13:15,170
Oracle

322
00:13:15,170 --> 00:13:18,079
our next step is to compile out this

323
00:13:18,079 --> 00:13:21,660
Oracle from i/o okay let's see how

324
00:13:21,660 --> 00:13:23,940
we are starting with an extended with us

325
00:13:23,940 --> 00:13:27,870
encryption Oracle and the IO and I we

326
00:13:27,870 --> 00:13:30,450
have an IO in this this idealized Oracle

327
00:13:30,450 --> 00:13:33,690
and we want to end up with an IO when

328
00:13:33,690 --> 00:13:36,180
the plane model that does not ask any

329
00:13:36,180 --> 00:13:39,720
queries to the 2d to to the Oracle but

330
00:13:39,720 --> 00:13:42,660
it is approximate and the too many

331
00:13:42,660 --> 00:13:44,100
questions that we'd like to ask when we

332
00:13:44,100 --> 00:13:46,800
compile at deseo is how do we office

333
00:13:46,800 --> 00:13:49,530
Kate in this new office kitchen and how

334
00:13:49,530 --> 00:13:55,350
to evaluate this new obfuscation so the

335
00:13:55,350 --> 00:13:57,690
main the general idea behind the

336
00:13:57,690 --> 00:14:00,560
compliation process was introduced by

337
00:14:00,560 --> 00:14:03,390
kinetically and Paneth in the context of

338
00:14:03,390 --> 00:14:05,990
compiling out the random oracle from

339
00:14:05,990 --> 00:14:08,520
from an obfuscator in the random Oracle

340
00:14:08,520 --> 00:14:11,700
model and it consists of two steps the

341
00:14:11,700 --> 00:14:13,740
first step being in emulation phase

342
00:14:13,740 --> 00:14:16,380
where I would run the ideal model office

343
00:14:16,380 --> 00:14:18,570
kitchen while emulating the queries that

344
00:14:18,570 --> 00:14:20,340
are asked by this idea my office kitchen

345
00:14:20,340 --> 00:14:23,490
I would emulate it consistently I know

346
00:14:23,490 --> 00:14:26,130
it gets some output some circuit as an

347
00:14:26,130 --> 00:14:28,200
obfuscation the second step is the

348
00:14:28,200 --> 00:14:30,830
learning phase where I would run this

349
00:14:30,830 --> 00:14:33,780
algorithm many times on different random

350
00:14:33,780 --> 00:14:37,410
inputs while still emulating the queries

351
00:14:37,410 --> 00:14:39,740
and answers during the learning phase

352
00:14:39,740 --> 00:14:42,750
the the purpose of this phase is I would

353
00:14:42,750 --> 00:14:44,040
like to learn all the highly likely

354
00:14:44,040 --> 00:14:46,410
queries that would that might occur in

355
00:14:46,410 --> 00:14:49,050
the end in the evaluation so I would run

356
00:14:49,050 --> 00:14:51,660
it many times answer the queries

357
00:14:51,660 --> 00:14:55,080
consistently and output of this office

358
00:14:55,080 --> 00:14:57,810
kitchen is the ideal modification along

359
00:14:57,810 --> 00:15:00,810
with the queries that were asked or

360
00:15:00,810 --> 00:15:03,870
learned during the learning phase the

361
00:15:03,870 --> 00:15:07,110
queries and the answers and if I want to

362
00:15:07,110 --> 00:15:09,210
evaluate this new office kitchen on a

363
00:15:09,210 --> 00:15:09,750
new input

364
00:15:09,750 --> 00:15:13,250
I would simply run execute this idea

365
00:15:13,250 --> 00:15:15,570
modification on this input while

366
00:15:15,570 --> 00:15:18,210
answering the queries with respect to

367
00:15:18,210 --> 00:15:20,070
the queries and answer pairs that were

368
00:15:20,070 --> 00:15:23,610
learned during the learning phase so we

369
00:15:23,610 --> 00:15:25,470
added these queries that were asked

370
00:15:25,470 --> 00:15:27,450
during the learning phase in order to

371
00:15:27,450 --> 00:15:29,670
make sure that we answered them we

372
00:15:29,670 --> 00:15:32,400
answer the queries during the evaluation

373
00:15:32,400 --> 00:15:33,920
phase consistently and

374
00:15:33,920 --> 00:15:37,100
correctly and not that by adding them we

375
00:15:37,100 --> 00:15:39,079
do not hurt security because these

376
00:15:39,079 --> 00:15:41,870
queries are learnable that is any of any

377
00:15:41,870 --> 00:15:44,870
any adversary in the idea model could

378
00:15:44,870 --> 00:15:47,180
learn these queries on its own so it's

379
00:15:47,180 --> 00:15:48,649
fine to include them in the output of

380
00:15:48,649 --> 00:15:53,480
the office kitchen so what happens when

381
00:15:53,480 --> 00:15:55,670
we look at the compilation process the

382
00:15:55,670 --> 00:15:57,649
same compliation process when we look at

383
00:15:57,649 --> 00:15:59,570
it and we want to compile out the

384
00:15:59,570 --> 00:16:00,949
witness encryption or the extended

385
00:16:00,949 --> 00:16:03,769
witness encryption Oracle so the

386
00:16:03,769 --> 00:16:05,649
challenge that we face here is that

387
00:16:05,649 --> 00:16:09,550
during the learning phase there might be

388
00:16:09,550 --> 00:16:11,570
decryption codes that were asked and

389
00:16:11,570 --> 00:16:13,100
these decryption queries might have

390
00:16:13,100 --> 00:16:14,510
hidden queries as a result of

391
00:16:14,510 --> 00:16:17,120
behind-the-scenes queries that could be

392
00:16:17,120 --> 00:16:20,000
asked when evaluating F now recall that

393
00:16:20,000 --> 00:16:21,620
F since we're dealing with extended

394
00:16:21,620 --> 00:16:23,959
witness decryption F the circuit could

395
00:16:23,959 --> 00:16:28,579
have witnessed encryption gates so due

396
00:16:28,579 --> 00:16:30,410
to these due to the existence of this

397
00:16:30,410 --> 00:16:32,480
hidden queries we cannot add these

398
00:16:32,480 --> 00:16:35,120
hidden queries to the output of the

399
00:16:35,120 --> 00:16:37,070
obfuscation because they are not learn

400
00:16:37,070 --> 00:16:40,040
about and adding them will hurt security

401
00:16:40,040 --> 00:16:42,170
however not adding them would hurt the

402
00:16:42,170 --> 00:16:44,120
correctness of the scheme because then

403
00:16:44,120 --> 00:16:45,620
we wouldn't be answered we wouldn't be

404
00:16:45,620 --> 00:16:48,019
able to answer the queries of the final

405
00:16:48,019 --> 00:16:51,709
evaluation consistently so how do you

406
00:16:51,709 --> 00:16:54,500
resolve this problem well let's call a

407
00:16:54,500 --> 00:16:56,930
look back at the Oracle and we're going

408
00:16:56,930 --> 00:16:58,610
to multiply our a little bit by adding a

409
00:16:58,610 --> 00:17:01,010
subroutine called the reveal subroutine

410
00:17:01,010 --> 00:17:04,030
that takes us in for the ciphertext and

411
00:17:04,030 --> 00:17:07,819
outputs the circuit and that's it and we

412
00:17:07,819 --> 00:17:09,770
note that adding this subroutine doesn't

413
00:17:09,770 --> 00:17:11,119
hurt the security of the witness

414
00:17:11,119 --> 00:17:16,160
encryption Oracle so now that we added

415
00:17:16,160 --> 00:17:18,829
this reveal subroutine we could actually

416
00:17:18,829 --> 00:17:21,470
really make use of it to uncover these

417
00:17:21,470 --> 00:17:23,900
hidden queries how do we do that during

418
00:17:23,900 --> 00:17:25,429
the learning phase every time a

419
00:17:25,429 --> 00:17:28,580
decryption query is asked we reveal the

420
00:17:28,580 --> 00:17:30,169
cipher text that we'd want to decrypt

421
00:17:30,169 --> 00:17:33,650
get back the function and make B run the

422
00:17:33,650 --> 00:17:34,809
function itself

423
00:17:34,809 --> 00:17:38,450
this forces the hidden queries to become

424
00:17:38,450 --> 00:17:40,610
discoverable and once they are

425
00:17:40,610 --> 00:17:42,260
discoverable they can also be learn

426
00:17:42,260 --> 00:17:44,090
about by any any adversary in the ideal

427
00:17:44,090 --> 00:17:46,380
and ideal model

428
00:17:46,380 --> 00:17:48,240
and again since they are learnable

429
00:17:48,240 --> 00:17:51,270
queries they can be safely inserted into

430
00:17:51,270 --> 00:17:52,740
the output of the office kitchen as well

431
00:17:52,740 --> 00:17:56,090
and we can then we by the way to finally

432
00:17:56,090 --> 00:17:58,320
evaluate the circuit consistently with

433
00:17:58,320 --> 00:18:00,450
respect to the queries and answers that

434
00:18:00,450 --> 00:18:03,150
we learned during the learning phase so

435
00:18:03,150 --> 00:18:04,559
that's how we solved it for the case of

436
00:18:04,559 --> 00:18:07,500
with this encryption however when we

437
00:18:07,500 --> 00:18:11,490
will look at predicate encryption the

438
00:18:11,490 --> 00:18:12,780
challenge here is the same we still have

439
00:18:12,780 --> 00:18:14,429
hidden queries because we're dealing

440
00:18:14,429 --> 00:18:16,169
with extended predicate encryption an

441
00:18:16,169 --> 00:18:17,669
external particular decryption could

442
00:18:17,669 --> 00:18:19,559
have circuits with predicate encryption

443
00:18:19,559 --> 00:18:21,270
gates and therefore there might be

444
00:18:21,270 --> 00:18:23,580
hidden queries behind the scenes so how

445
00:18:23,580 --> 00:18:25,799
do we uncover these hidden queries well

446
00:18:25,799 --> 00:18:27,539
we can't we cannot have reveal

447
00:18:27,539 --> 00:18:29,309
subroutines as this would violate

448
00:18:29,309 --> 00:18:31,919
security we cannot do it for all the

449
00:18:31,919 --> 00:18:32,970
corruption for all the corruption

450
00:18:32,970 --> 00:18:38,850
queries so then what can we do well the

451
00:18:38,850 --> 00:18:40,950
thing is during learning whenever we

452
00:18:40,950 --> 00:18:43,710
call a decryption if the decryption

453
00:18:43,710 --> 00:18:46,169
happens to succeed then we can uncover

454
00:18:46,169 --> 00:18:48,750
the hidden queries that were asked by

455
00:18:48,750 --> 00:18:51,390
this decryption so we can only uncover

456
00:18:51,390 --> 00:18:54,360
we can only do like partial discovery of

457
00:18:54,360 --> 00:18:56,100
the hidden queries and we can only

458
00:18:56,100 --> 00:18:57,690
uncover these queries if the decryption

459
00:18:57,690 --> 00:19:01,860
succeeds and we argue that we argued

460
00:19:01,860 --> 00:19:05,340
that this is sufficient discovering like

461
00:19:05,340 --> 00:19:07,320
partial queries is sufficient to show

462
00:19:07,320 --> 00:19:10,169
that the consistent in the consistency

463
00:19:10,169 --> 00:19:11,909
of the evaluation holds and the

464
00:19:11,909 --> 00:19:16,799
correctness also holds and so that's how

465
00:19:16,799 --> 00:19:18,090
we solve it for predicates encryption

466
00:19:18,090 --> 00:19:21,809
and using the same argument because of

467
00:19:21,809 --> 00:19:23,400
the zero one property because of the

468
00:19:23,400 --> 00:19:26,309
all-or-nothing property of the of the of

469
00:19:26,309 --> 00:19:29,580
the encryption schemes we leveraging

470
00:19:29,580 --> 00:19:31,710
this property allows us to discover the

471
00:19:31,710 --> 00:19:33,750
queries that were hidden by revealing

472
00:19:33,750 --> 00:19:38,580
the message that was encrypted so that's

473
00:19:38,580 --> 00:19:40,770
how we that's that's how we just a

474
00:19:40,770 --> 00:19:42,960
high-level idea of the proof and as a

475
00:19:42,960 --> 00:19:45,179
summary I'm going to state that here

476
00:19:45,179 --> 00:19:46,799
basically the result where there's no

477
00:19:46,799 --> 00:19:48,419
there's no monolithic construction of IO

478
00:19:48,419 --> 00:19:53,340
from any of these primitives and so

479
00:19:53,340 --> 00:19:57,480
these are some future work that we might

480
00:19:57,480 --> 00:19:58,880
be interested in

481
00:19:58,880 --> 00:20:00,410
we could for example look at lower

482
00:20:00,410 --> 00:20:02,450
bounds fire from stronger assumptions is

483
00:20:02,450 --> 00:20:04,400
alternative or weaker forms of

484
00:20:04,400 --> 00:20:06,080
functional encryption perhaps evening

485
00:20:06,080 --> 00:20:07,790
from the learning with errors problem we

486
00:20:07,790 --> 00:20:10,010
still don't know whether this implies

487
00:20:10,010 --> 00:20:13,160
are you or not and of course we want to

488
00:20:13,160 --> 00:20:14,540
look at other applications of the

489
00:20:14,540 --> 00:20:17,000
monolithic model with respect to finding

490
00:20:17,000 --> 00:20:18,380
lower bounds for other primitives that

491
00:20:18,380 --> 00:20:20,660
have this kind of behavior because this

492
00:20:20,660 --> 00:20:24,320
seems like a very useful model so yeah

493
00:20:24,320 --> 00:20:25,530
thank you

494
00:20:25,530 --> 00:20:28,720
[Applause]

