1
00:00:05,049 --> 00:00:08,119
thanks for that introduction Stefano hi

2
00:00:08,119 --> 00:00:08,600
everybody

3
00:00:08,600 --> 00:00:11,059
good morning hope everybody is awake I

4
00:00:11,059 --> 00:00:12,860
haven't had coffee yet but I hope you

5
00:00:12,860 --> 00:00:16,309
have so I'm gonna be telling you today

6
00:00:16,309 --> 00:00:19,340
about centralized like end-to-end

7
00:00:19,340 --> 00:00:21,830
encrypted messengers applications like

8
00:00:21,830 --> 00:00:23,720
signal and whatsapp er gaining

9
00:00:23,720 --> 00:00:26,480
widespread adoption today and their

10
00:00:26,480 --> 00:00:28,130
architecture is one of a central service

11
00:00:28,130 --> 00:00:30,110
provider that basically routes messages

12
00:00:30,110 --> 00:00:32,079
from senders to receivers

13
00:00:32,079 --> 00:00:34,430
crucially the the service provider is

14
00:00:34,430 --> 00:00:36,980
blind to the messages being sent and

15
00:00:36,980 --> 00:00:39,140
can't read the messages because their

16
00:00:39,140 --> 00:00:43,100
end end encrypted these these

17
00:00:43,100 --> 00:00:45,260
applications are most of them use pretty

18
00:00:45,260 --> 00:00:47,030
good crypto and are assumed to be secure

19
00:00:47,030 --> 00:00:49,309
in standard threat models for network

20
00:00:49,309 --> 00:00:51,620
level adversaries but there is one

21
00:00:51,620 --> 00:00:53,479
threat in particular that they don't

22
00:00:53,479 --> 00:00:56,329
model in the in their in their threat

23
00:00:56,329 --> 00:00:58,519
models which is abusive or threatening

24
00:00:58,519 --> 00:01:02,120
messages imagine a sender sends an

25
00:01:02,120 --> 00:01:04,280
abusive threatening or harassing message

26
00:01:04,280 --> 00:01:07,310
to a receiver through the end end

27
00:01:07,310 --> 00:01:11,270
encrypted messaging service the receiver

28
00:01:11,270 --> 00:01:13,820
of this message might like to block the

29
00:01:13,820 --> 00:01:15,229
sender from sending them additional

30
00:01:15,229 --> 00:01:16,789
messages but further than that they

31
00:01:16,789 --> 00:01:19,280
might want to report the sender to the

32
00:01:19,280 --> 00:01:21,109
central service provider to prevent them

33
00:01:21,109 --> 00:01:23,329
from sending additional hurtful or

34
00:01:23,329 --> 00:01:27,020
abusive messages the problem here is

35
00:01:27,020 --> 00:01:29,090
that because of encryption the service

36
00:01:29,090 --> 00:01:31,700
provider can't actually be sure that the

37
00:01:31,700 --> 00:01:33,740
message that the receiver is reporting

38
00:01:33,740 --> 00:01:36,469
was sent and naive approaches like

39
00:01:36,469 --> 00:01:37,850
simply having a receiver take a

40
00:01:37,850 --> 00:01:40,130
screenshot of the message fail for their

41
00:01:40,130 --> 00:01:41,960
own reason which is that they can

42
00:01:41,960 --> 00:01:43,820
themselves be abused by malicious

43
00:01:43,820 --> 00:01:48,249
receivers a malicious receiver would

44
00:01:48,249 --> 00:01:50,450
receive an innocuous message from an

45
00:01:50,450 --> 00:01:52,759
honest sender and then try to report it

46
00:01:52,759 --> 00:01:54,200
to the central service provider as

47
00:01:54,200 --> 00:02:02,210
abusive because of this we are we would

48
00:02:02,210 --> 00:02:04,399
like to motivate the need for verifiable

49
00:02:04,399 --> 00:02:07,189
abuse reporting which is some kind of

50
00:02:07,189 --> 00:02:08,869
cryptographic verification of messages

51
00:02:08,869 --> 00:02:11,350
that are passing through the service

52
00:02:11,350 --> 00:02:14,720
this year a troubled crypto Facebook

53
00:02:14,720 --> 00:02:16,730
unveiled a scheme that they call message

54
00:02:16,730 --> 00:02:17,450
Franklin for

55
00:02:17,450 --> 00:02:20,180
cryptographic verifiable abuse reporting

56
00:02:20,180 --> 00:02:23,480
and end and encrypted messaging it works

57
00:02:23,480 --> 00:02:26,180
basically as follows first the sender

58
00:02:26,180 --> 00:02:28,190
computes an H Mac with a randomly

59
00:02:28,190 --> 00:02:30,410
generated key of the message and sends

60
00:02:30,410 --> 00:02:33,709
us an AE ciphertext of the message and

61
00:02:33,709 --> 00:02:35,390
the key along with the tag through

62
00:02:35,390 --> 00:02:37,090
Facebook to the receiver

63
00:02:37,090 --> 00:02:39,950
additionally Facebook stores the tag but

64
00:02:39,950 --> 00:02:43,790
not B ciphertext the receiver decrypts

65
00:02:43,790 --> 00:02:45,799
it and if the receiver wants to report

66
00:02:45,799 --> 00:02:48,140
the message it can send the message and

67
00:02:48,140 --> 00:02:50,840
the random key to Facebook Facebook then

68
00:02:50,840 --> 00:02:55,190
verifies the H Mac though they don't use

69
00:02:55,190 --> 00:02:57,250
this terminology in their official

70
00:02:57,250 --> 00:02:59,480
documentation on this feature it's clear

71
00:02:59,480 --> 00:03:01,220
that the security property that they're

72
00:03:01,220 --> 00:03:03,380
using of the H back is that it's

73
00:03:03,380 --> 00:03:05,030
actually a commitment to the underlying

74
00:03:05,030 --> 00:03:07,819
message being sent when the sender sends

75
00:03:07,819 --> 00:03:10,160
the message it commits to the message

76
00:03:10,160 --> 00:03:12,530
and when the receiver wants to report a

77
00:03:12,530 --> 00:03:15,430
message it opens the commitment Facebook

78
00:03:15,430 --> 00:03:17,930
this kind of composition of

79
00:03:17,930 --> 00:03:20,000
authenticated encryption and commitment

80
00:03:20,000 --> 00:03:22,220
is is novel and has not really been seen

81
00:03:22,220 --> 00:03:24,859
before in the literature so this this

82
00:03:24,859 --> 00:03:27,170
composition is a new kind of

83
00:03:27,170 --> 00:03:28,790
cryptographic primitive whose goals are

84
00:03:28,790 --> 00:03:30,290
actually distinct from standard

85
00:03:30,290 --> 00:03:31,430
authenticated encryption of war

86
00:03:31,430 --> 00:03:35,480
commitments because facebook didn't

87
00:03:35,480 --> 00:03:37,940
really do a comprehensive formal

88
00:03:37,940 --> 00:03:40,340
analysis of the security or the goals of

89
00:03:40,340 --> 00:03:41,900
this primitive we're left with a lot of

90
00:03:41,900 --> 00:03:43,609
questions about it

91
00:03:43,609 --> 00:03:45,889
for example what even is this primitive

92
00:03:45,889 --> 00:03:48,380
what are its functionality or security

93
00:03:48,380 --> 00:03:50,030
goals and how can we formalize those

94
00:03:50,030 --> 00:03:54,739
goals once we have security definitions

95
00:03:54,739 --> 00:03:56,450
for this primitive how can we prove that

96
00:03:56,450 --> 00:03:58,760
Facebook scheme meets the notions of

97
00:03:58,760 --> 00:04:02,359
security that we developed and can we

98
00:04:02,359 --> 00:04:04,579
develop maybe faster or better

99
00:04:04,579 --> 00:04:07,099
constructions or might there be other

100
00:04:07,099 --> 00:04:09,170
modes of authenticated encryption that

101
00:04:09,170 --> 00:04:14,630
already instantiate this primitive so in

102
00:04:14,630 --> 00:04:16,160
this talk we provide a constructive

103
00:04:16,160 --> 00:04:17,690
answer to these questions by formalizing

104
00:04:17,690 --> 00:04:19,370
a new primitive called compactly

105
00:04:19,370 --> 00:04:22,130
committing authenticated encryption we

106
00:04:22,130 --> 00:04:23,930
kind of motivate its use in the

107
00:04:23,930 --> 00:04:25,310
verifiable a cryptographically

108
00:04:25,310 --> 00:04:29,030
verifiable abuse reporting setting once

109
00:04:29,030 --> 00:04:30,890
we formalize this primitive and give

110
00:04:30,890 --> 00:04:31,280
defin

111
00:04:31,280 --> 00:04:33,830
we're able to prove under a mild but

112
00:04:33,830 --> 00:04:35,480
non-standard assumption that facebook

113
00:04:35,480 --> 00:04:37,820
scheme actually instantiates compacted

114
00:04:37,820 --> 00:04:38,750
committing authenticated encryption

115
00:04:38,750 --> 00:04:42,730
which I'll sometimes refer to as CCA EAD

116
00:04:42,730 --> 00:04:45,560
after that we turn to other kinds of

117
00:04:45,560 --> 00:04:46,639
schemes other than the generic

118
00:04:46,639 --> 00:04:48,980
composition approach of Facebook first

119
00:04:48,980 --> 00:04:51,350
we analyze some legacy AE schemes and

120
00:04:51,350 --> 00:04:53,150
find that some of them but not all of

121
00:04:53,150 --> 00:04:56,110
them already instantiate CCA EAD and

122
00:04:56,110 --> 00:04:58,280
finally we'll present a new construction

123
00:04:58,280 --> 00:05:00,050
that's kind of custom made for the

124
00:05:00,050 --> 00:05:01,550
verifiable police reporting setting

125
00:05:01,550 --> 00:05:03,440
that's faster and more efficient than

126
00:05:03,440 --> 00:05:08,840
existing constructions so we all know

127
00:05:08,840 --> 00:05:11,660
the syntax of regular encryption but we

128
00:05:11,660 --> 00:05:13,340
kind of need to know how to view regular

129
00:05:13,340 --> 00:05:16,130
encryption as a commitment now the view

130
00:05:16,130 --> 00:05:18,500
of previous work like Turner and

131
00:05:18,500 --> 00:05:20,990
Hertzberg from 2003 was to view the

132
00:05:20,990 --> 00:05:22,430
cipher text as the commitment to the

133
00:05:22,430 --> 00:05:24,110
underlying message and to view the

134
00:05:24,110 --> 00:05:26,030
encryption key is the opening and to

135
00:05:26,030 --> 00:05:29,650
verify by decrypting the cipher text

136
00:05:29,650 --> 00:05:32,660
this the security guarantees of a

137
00:05:32,660 --> 00:05:35,090
commitment are hiding and binding now

138
00:05:35,090 --> 00:05:38,419
hiding guarantees are taken care of by

139
00:05:38,419 --> 00:05:39,950
the security guarantees of the

140
00:05:39,950 --> 00:05:41,630
encryption scheme well you when you view

141
00:05:41,630 --> 00:05:43,220
an encryption scheme as a commitment in

142
00:05:43,220 --> 00:05:47,300
this way so to be a commitment the

143
00:05:47,300 --> 00:05:49,100
encryption scheme also has to be binding

144
00:05:49,100 --> 00:05:50,479
which in this case means that it's hard

145
00:05:50,479 --> 00:05:52,940
to find two message P pairs and a single

146
00:05:52,940 --> 00:05:55,070
ciphertext so that the cipher text

147
00:05:55,070 --> 00:06:01,360
verifies under both pairs so our

148
00:06:01,360 --> 00:06:04,280
formalization of CCA EAD is similar with

149
00:06:04,280 --> 00:06:07,430
a few key differences one is the

150
00:06:07,430 --> 00:06:10,130
addition of associated data which in the

151
00:06:10,130 --> 00:06:12,110
context of authenticated encryption is

152
00:06:12,110 --> 00:06:14,090
some non secret context or metadata that

153
00:06:14,090 --> 00:06:16,370
might need integrity guarantees but for

154
00:06:16,370 --> 00:06:18,850
for protocol reasons might not be secret

155
00:06:18,850 --> 00:06:21,289
an example in the messaging setting is

156
00:06:21,289 --> 00:06:23,210
like the recipient ID of a message which

157
00:06:23,210 --> 00:06:25,190
you might want to bind to the ciphertext

158
00:06:25,190 --> 00:06:27,200
to avoid kind of like context

159
00:06:27,200 --> 00:06:31,430
manipulation attacks the the second

160
00:06:31,430 --> 00:06:33,100
difference in our formalization is that

161
00:06:33,100 --> 00:06:35,570
there the cipher texts actually have two

162
00:06:35,570 --> 00:06:37,250
parts and the second part is what we

163
00:06:37,250 --> 00:06:38,539
call the committing portion of the

164
00:06:38,539 --> 00:06:40,700
ciphertext and the compactness

165
00:06:40,700 --> 00:06:42,320
requirement says that this portion is

166
00:06:42,320 --> 00:06:43,849
linear in the size of the security

167
00:06:43,849 --> 00:06:44,490
parameter

168
00:06:44,490 --> 00:06:46,910
so concretely basically that means that

169
00:06:46,910 --> 00:06:49,590
this cook this committing portion should

170
00:06:49,590 --> 00:06:52,560
be like maybe a few block cipher outputs

171
00:06:52,560 --> 00:06:54,120
or like the output of a hash function or

172
00:06:54,120 --> 00:06:57,060
something like that the third difference

173
00:06:57,060 --> 00:07:00,240
is that we have a separate opening which

174
00:07:00,240 --> 00:07:04,860
which will denote as KF for for opening

175
00:07:04,860 --> 00:07:06,389
the commitment and this can be distinct

176
00:07:06,389 --> 00:07:08,039
from the encryption key which will we'll

177
00:07:08,039 --> 00:07:09,270
see why this is important a little bit

178
00:07:09,270 --> 00:07:15,180
later so the security goals of a CCA EAD

179
00:07:15,180 --> 00:07:17,900
scheme there are three basic properties

180
00:07:17,900 --> 00:07:21,210
to be a multi opening secure scheme

181
00:07:21,210 --> 00:07:22,620
which I'll explain what that is

182
00:07:22,620 --> 00:07:25,199
in a few slides you basically need to be

183
00:07:25,199 --> 00:07:27,180
receiver binding and sender binding and

184
00:07:27,180 --> 00:07:29,030
these two properties refer to the

185
00:07:29,030 --> 00:07:33,240
ability to abuse or not abuse the the

186
00:07:33,240 --> 00:07:35,280
ciphertext to report or prevent

187
00:07:35,280 --> 00:07:37,080
reporting of different kinds of abusive

188
00:07:37,080 --> 00:07:38,580
messages in the verifiable abuse

189
00:07:38,580 --> 00:07:41,820
reporting setting the final property you

190
00:07:41,820 --> 00:07:44,400
need is multi opening real or random and

191
00:07:44,400 --> 00:07:46,710
multi opening CTEK security and these

192
00:07:46,710 --> 00:07:49,970
are kind of liftings of traditional

193
00:07:49,970 --> 00:07:51,599
authenticated encryption security

194
00:07:51,599 --> 00:07:55,320
notions to the setting the compact the

195
00:07:55,320 --> 00:07:56,370
committing authenticated encryption

196
00:07:56,370 --> 00:07:58,620
setting and I'll explain what these are

197
00:07:58,620 --> 00:08:02,099
in the subsequent slides so now that we

198
00:08:02,099 --> 00:08:05,130
know what a CCA ad scheme is and what

199
00:08:05,130 --> 00:08:07,979
security we want we can use Facebook's

200
00:08:07,979 --> 00:08:10,199
scheme as a kind of running concrete

201
00:08:10,199 --> 00:08:14,729
example to examine our our formalism a

202
00:08:14,729 --> 00:08:16,710
facebook scheme works roughly as I

203
00:08:16,710 --> 00:08:18,659
described it before they generate an H

204
00:08:18,659 --> 00:08:22,889
Mac and they each Mak them message and

205
00:08:22,889 --> 00:08:24,539
the random key that they generated with

206
00:08:24,539 --> 00:08:27,150
the key itself you might be thinking

207
00:08:27,150 --> 00:08:29,460
this is a typo it's not a typo I'll go

208
00:08:29,460 --> 00:08:31,500
into in a few slides the consequence of

209
00:08:31,500 --> 00:08:33,929
this so they use this to generate the

210
00:08:33,929 --> 00:08:35,669
committing portion of the ciphertext and

211
00:08:35,669 --> 00:08:38,250
the user regular the AE scheme

212
00:08:38,250 --> 00:08:40,828
encrypt-then-mac composition to generate

213
00:08:40,828 --> 00:08:42,809
the the other portion of the ciphertext

214
00:08:42,809 --> 00:08:47,070
and then they send the c1 and c2 to the

215
00:08:47,070 --> 00:08:49,709
receiver through facebook in facebook

216
00:08:49,709 --> 00:08:50,730
stores

217
00:08:50,730 --> 00:08:53,540
Facebook stores C tube and not c1 I

218
00:08:53,540 --> 00:08:55,620
don't think I actually don't think I

219
00:08:55,620 --> 00:08:57,060
said this before but if any of you were

220
00:08:57,060 --> 00:08:58,110
our to be seated here

221
00:08:58,110 --> 00:09:00,300
probably wondering why I'm describing it

222
00:09:00,300 --> 00:09:02,490
like this so this is this this version

223
00:09:02,490 --> 00:09:03,899
of the protocol is a simplification

224
00:09:03,899 --> 00:09:06,600
that's in that it simplifies the

225
00:09:06,600 --> 00:09:08,670
protocol in a way that's not really

226
00:09:08,670 --> 00:09:10,079
consequential for the talk

227
00:09:10,079 --> 00:09:11,550
but it is a little bit different than

228
00:09:11,550 --> 00:09:15,209
this in practice so when the receiver

229
00:09:15,209 --> 00:09:18,329
receives a message it decrypts the c1 to

230
00:09:18,329 --> 00:09:20,670
receive the message in the H Mac opening

231
00:09:20,670 --> 00:09:24,000
and then checks the the H Mac and then

232
00:09:24,000 --> 00:09:26,610
if the both things pass it just outputs

233
00:09:26,610 --> 00:09:29,640
the message in the opening and to report

234
00:09:29,640 --> 00:09:33,560
again it just kind of verifies the H Mac

235
00:09:33,560 --> 00:09:36,720
so the in the in the context of

236
00:09:36,720 --> 00:09:38,940
Facebook's scheme receiver binding is

237
00:09:38,940 --> 00:09:41,399
kind of the most the the simplest of the

238
00:09:41,399 --> 00:09:42,810
three properties that we have which is

239
00:09:42,810 --> 00:09:45,149
just a lifting of the binding notion

240
00:09:45,149 --> 00:09:47,940
from commitments in this abuse reporting

241
00:09:47,940 --> 00:09:49,769
setting what it means is that a

242
00:09:49,769 --> 00:09:52,380
malicious receiver can't try to open a

243
00:09:52,380 --> 00:09:54,990
message to Facebook as something other

244
00:09:54,990 --> 00:09:56,430
than the message that it actually

245
00:09:56,430 --> 00:09:58,290
received from the senator so we see that

246
00:09:58,290 --> 00:09:59,760
even though the sender intended to send

247
00:09:59,760 --> 00:10:01,800
M the receiver is going to try to open

248
00:10:01,800 --> 00:10:04,410
it to a different message m Prime and so

249
00:10:04,410 --> 00:10:06,120
receiver binding basically says that you

250
00:10:06,120 --> 00:10:09,690
can't take a CCA a D ciphertext and open

251
00:10:09,690 --> 00:10:11,100
it to a message other than the one that

252
00:10:11,100 --> 00:10:15,000
it contains the second property is a

253
00:10:15,000 --> 00:10:17,760
little bit more subtle and it's not it's

254
00:10:17,760 --> 00:10:20,339
not a traditional binding property but

255
00:10:20,339 --> 00:10:22,040
basically sender binding ensures that

256
00:10:22,040 --> 00:10:25,320
that a malicious sender can't craft a

257
00:10:25,320 --> 00:10:27,240
ciphertext that prevents a receiver from

258
00:10:27,240 --> 00:10:30,089
reporting it as view civ or from or more

259
00:10:30,089 --> 00:10:32,970
formally from opening the commitment so

260
00:10:32,970 --> 00:10:35,310
to illustrate what sender binding is we

261
00:10:35,310 --> 00:10:37,470
can kind of just get rid of this line of

262
00:10:37,470 --> 00:10:39,089
the Facebook protocol and let's we'll

263
00:10:39,089 --> 00:10:40,589
walk through it again and we'll see what

264
00:10:40,589 --> 00:10:41,360
happens

265
00:10:41,360 --> 00:10:45,149
so the malicious sender sends it kind of

266
00:10:45,149 --> 00:10:47,940
craps the ciphertext and then sends a

267
00:10:47,940 --> 00:10:51,089
different like a junk committing portion

268
00:10:51,089 --> 00:10:52,680
that's not actually the one generated by

269
00:10:52,680 --> 00:10:56,040
encryption and when the receiver gets

270
00:10:56,040 --> 00:10:57,329
this and it tries to report it as

271
00:10:57,329 --> 00:10:59,610
abusive Facebook actually will reject

272
00:10:59,610 --> 00:11:03,029
this this report because the the opening

273
00:11:03,029 --> 00:11:04,980
message and opening that it's that it's

274
00:11:04,980 --> 00:11:07,260
sent is not correct relative to the the

275
00:11:07,260 --> 00:11:08,970
stored portion of the the committing

276
00:11:08,970 --> 00:11:11,750
portion of the ciphertext that it has

277
00:11:11,750 --> 00:11:15,060
so an easy theorem here is that

278
00:11:15,060 --> 00:11:17,790
basically if you rerun verify during

279
00:11:17,790 --> 00:11:19,319
decryption you can guarantee that this

280
00:11:19,319 --> 00:11:24,810
property holds so the third security

281
00:11:24,810 --> 00:11:27,389
property that we need is a multi opening

282
00:11:27,389 --> 00:11:30,329
real random and multi opening C text and

283
00:11:30,329 --> 00:11:32,069
I'll explain multi opening real a random

284
00:11:32,069 --> 00:11:34,529
and kind of let you look defer to the

285
00:11:34,529 --> 00:11:37,319
paper for the multi opening C text so

286
00:11:37,319 --> 00:11:39,240
basically this is a lifting of the as I

287
00:11:39,240 --> 00:11:40,860
said before its lifting of real a random

288
00:11:40,860 --> 00:11:43,439
security to the to the setting where an

289
00:11:43,439 --> 00:11:45,120
adverse I can get openings of cipher

290
00:11:45,120 --> 00:11:49,110
texts so basically what we do is we take

291
00:11:49,110 --> 00:11:51,300
the the standard real random

292
00:11:51,300 --> 00:11:52,709
Oracle's from authenticated encryption

293
00:11:52,709 --> 00:11:56,759
and we add these other encryption and

294
00:11:56,759 --> 00:11:59,519
decryption Oracle's so basically these

295
00:11:59,519 --> 00:12:02,100
these Oracle's return ciphertext that

296
00:12:02,100 --> 00:12:04,170
the adversary can't request openings for

297
00:12:04,170 --> 00:12:07,379
but the the other encryption Oracle

298
00:12:07,379 --> 00:12:09,540
returns ciphertext that it can decadent

299
00:12:09,540 --> 00:12:13,290
that it can open via decryption and we

300
00:12:13,290 --> 00:12:14,939
basically require that real or random

301
00:12:14,939 --> 00:12:16,589
security holds for the cipher text that

302
00:12:16,589 --> 00:12:19,589
come out of the the challenge encryption

303
00:12:19,589 --> 00:12:23,519
Oracle and so if you are familiar with C

304
00:12:23,519 --> 00:12:25,079
checks you can probably see how to adapt

305
00:12:25,079 --> 00:12:27,269
this to a multi opening setting you

306
00:12:27,269 --> 00:12:29,040
basically just have to two decryption

307
00:12:29,040 --> 00:12:32,730
Oracle's and I'll just define it now but

308
00:12:32,730 --> 00:12:33,990
it won't be important until a little bit

309
00:12:33,990 --> 00:12:36,329
later so single opening security is a

310
00:12:36,329 --> 00:12:39,540
kind of basically a version of this

311
00:12:39,540 --> 00:12:41,009
definition where you don't have open

312
00:12:41,009 --> 00:12:44,250
Abul cipher texts so this is intuitively

313
00:12:44,250 --> 00:12:45,870
this is the security that you achieve

314
00:12:45,870 --> 00:12:48,779
when the opening of your ccae ad scheme

315
00:12:48,779 --> 00:12:54,509
is the key itself so now that we've seen

316
00:12:54,509 --> 00:12:55,920
all of our security properties and

317
00:12:55,920 --> 00:12:57,990
defined ccae ad we can come to the kind

318
00:12:57,990 --> 00:12:59,550
of the first major question of the talk

319
00:12:59,550 --> 00:13:01,410
which is whether facebook scheme

320
00:13:01,410 --> 00:13:03,959
actually is a multi opening CCA ad

321
00:13:03,959 --> 00:13:07,769
scheme so I put the security properties

322
00:13:07,769 --> 00:13:09,360
up here so you can just be reminded of

323
00:13:09,360 --> 00:13:11,910
them in a nice checklist so we know that

324
00:13:11,910 --> 00:13:13,439
from the theorem I said before that

325
00:13:13,439 --> 00:13:14,850
Facebook actually is verifying the

326
00:13:14,850 --> 00:13:16,949
commitment during during decryption so

327
00:13:16,949 --> 00:13:18,420
that means that they achieve sender

328
00:13:18,420 --> 00:13:19,100
binding pretty

329
00:13:19,100 --> 00:13:21,830
easily but unfortunately we can't really

330
00:13:21,830 --> 00:13:23,270
conclude the rest of the theorem as

331
00:13:23,270 --> 00:13:24,470
easily because we have these two

332
00:13:24,470 --> 00:13:26,420
subtleties that we need to take care of

333
00:13:26,420 --> 00:13:29,270
the first subtlety is that the the

334
00:13:29,270 --> 00:13:31,460
committing portion of the ciphertext and

335
00:13:31,460 --> 00:13:33,710
the AE ciphertext aren't really bound

336
00:13:33,710 --> 00:13:35,150
together in any kind of cryptographic

337
00:13:35,150 --> 00:13:37,610
way and this could potentially lead to

338
00:13:37,610 --> 00:13:39,860
it ciphertext integrity attacks which

339
00:13:39,860 --> 00:13:41,900
would invalidate kind of the C text of B

340
00:13:41,900 --> 00:13:46,040
of the of the CCA ad scheme and the

341
00:13:46,040 --> 00:13:48,850
second subtlety is that they do this

342
00:13:48,850 --> 00:13:51,080
frankly kind of bizarre thing where they

343
00:13:51,080 --> 00:13:53,030
put the key of the H Mac in the body of

344
00:13:53,030 --> 00:13:56,420
the H Mac so this means that as far as I

345
00:13:56,420 --> 00:13:59,000
know standard model proofs for like the

346
00:13:59,000 --> 00:14:00,290
security properties of H back don't

347
00:14:00,290 --> 00:14:02,150
really hold in the in the key dependent

348
00:14:02,150 --> 00:14:06,550
message setting so we can basically

349
00:14:06,550 --> 00:14:10,580
conclude multi opening real random and

350
00:14:10,580 --> 00:14:12,650
multi opening C text by using the fact

351
00:14:12,650 --> 00:14:15,020
that these the the fact that they're

352
00:14:15,020 --> 00:14:16,730
using H Mac as a commitment means that

353
00:14:16,730 --> 00:14:19,880
given a message and an opening the the

354
00:14:19,880 --> 00:14:22,180
value of the H Mac commitment is unique

355
00:14:22,180 --> 00:14:24,200
this is kind of like a weak non

356
00:14:24,200 --> 00:14:26,420
malleability property that is sufficient

357
00:14:26,420 --> 00:14:31,280
to let us conclude a C text and the we

358
00:14:31,280 --> 00:14:33,110
have to make an additional assumption

359
00:14:33,110 --> 00:14:35,030
about the dependent message behavior of

360
00:14:35,030 --> 00:14:38,270
H Mac when used in this way but given

361
00:14:38,270 --> 00:14:40,040
this assumption we can kind of conclude

362
00:14:40,040 --> 00:14:41,270
receiver binding and thus we can

363
00:14:41,270 --> 00:14:43,940
conclude the full theorem which is that

364
00:14:43,940 --> 00:14:45,530
facebook scheme actually is a multi

365
00:14:45,530 --> 00:14:52,100
opening CCA ad scheme so now we can take

366
00:14:52,100 --> 00:14:54,400
a breath

367
00:14:55,390 --> 00:14:58,400
so that was Facebook's scheme Facebook

368
00:14:58,400 --> 00:15:00,590
scheme is is very nice but it is kind of

369
00:15:00,590 --> 00:15:02,270
a generic composition to kind of like an

370
00:15:02,270 --> 00:15:04,730
commit then encrypt construction and we

371
00:15:04,730 --> 00:15:06,080
can we can ask ourselves like whether

372
00:15:06,080 --> 00:15:08,120
whether it was actually necessary for

373
00:15:08,120 --> 00:15:10,730
Facebook to do a generic composition at

374
00:15:10,730 --> 00:15:12,920
all it might be the case that existing

375
00:15:12,920 --> 00:15:15,590
AE ad scheme is already instantiate this

376
00:15:15,590 --> 00:15:18,470
primitive when instantiate CC AE ad

377
00:15:18,470 --> 00:15:20,270
rather when when kind of like suitably

378
00:15:20,270 --> 00:15:24,920
defined so before we look at a 80s we

379
00:15:24,920 --> 00:15:26,300
had to kind of figure out again how to

380
00:15:26,300 --> 00:15:29,900
view an a ad scheme as a commitment so

381
00:15:29,900 --> 00:15:31,850
you need to do basically three things

382
00:15:31,850 --> 00:15:33,949
you need to identify the compact

383
00:15:33,949 --> 00:15:35,630
committing portion of the ciphertext and

384
00:15:35,630 --> 00:15:38,360
find the opening and you can just let

385
00:15:38,360 --> 00:15:40,310
verify recompute the kind of the

386
00:15:40,310 --> 00:15:42,410
committing portion of the ciphertext to

387
00:15:42,410 --> 00:15:46,579
to check the commitment and here as I

388
00:15:46,579 --> 00:15:48,889
said I find single opening security

389
00:15:48,889 --> 00:15:52,310
before you can let the the opening of

390
00:15:52,310 --> 00:15:56,300
the CCA ad scheme be the key itself this

391
00:15:56,300 --> 00:15:58,100
is this is fine if your surrounding

392
00:15:58,100 --> 00:16:00,740
protocol guarantees one-time use keys so

393
00:16:00,740 --> 00:16:02,089
an example of this is the signal

394
00:16:02,089 --> 00:16:03,610
protocol which because it uses

395
00:16:03,610 --> 00:16:05,660
ratcheting to kind of update the shared

396
00:16:05,660 --> 00:16:07,600
secret and when every message is sent

397
00:16:07,600 --> 00:16:09,680
ensures that a symmetric key will only

398
00:16:09,680 --> 00:16:13,029
be used once and if this is the case

399
00:16:13,029 --> 00:16:15,740
opening the opening the ciphertext to

400
00:16:15,740 --> 00:16:17,540
the key itself doesn't reveal and he

401
00:16:17,540 --> 00:16:19,339
doesn't break confidentiality of the

402
00:16:19,339 --> 00:16:23,420
other messages so let's just take like a

403
00:16:23,420 --> 00:16:27,529
very simple legacy aad scheme that

404
00:16:27,529 --> 00:16:29,509
everybody knows and loves which is just

405
00:16:29,509 --> 00:16:31,399
encrypt-then-mac composition with

406
00:16:31,399 --> 00:16:34,670
counter and H Mac so in this case the

407
00:16:34,670 --> 00:16:36,259
the committing portion of the ciphertext

408
00:16:36,259 --> 00:16:39,470
will be the H Mac tag c2 and the opening

409
00:16:39,470 --> 00:16:40,939
will be encryption and linking and

410
00:16:40,939 --> 00:16:44,300
authentication keys separately so we can

411
00:16:44,300 --> 00:16:46,839
ask when defined in this way this is

412
00:16:46,839 --> 00:16:50,959
counter than H Mac CCA ad scheme and the

413
00:16:50,959 --> 00:16:54,250
answer unfortunately is no because a

414
00:16:54,250 --> 00:16:57,740
malicious receiver can specify the same

415
00:16:57,740 --> 00:16:59,300
authentication key in any other

416
00:16:59,300 --> 00:17:04,849
encryption key and because the the the

417
00:17:04,849 --> 00:17:06,619
committing portion will be the same but

418
00:17:06,619 --> 00:17:08,449
the ciphertext will decrypt differently

419
00:17:08,449 --> 00:17:13,030
it's broken receiver binding trivially

420
00:17:13,150 --> 00:17:16,309
so we can fix this actually pretty

421
00:17:16,309 --> 00:17:18,890
easily all we need to do is define the

422
00:17:18,890 --> 00:17:21,980
opening to be a single a single parent

423
00:17:21,980 --> 00:17:23,809
key which we then derive encryption and

424
00:17:23,809 --> 00:17:26,270
authentication keys from in encrypt

425
00:17:26,270 --> 00:17:29,090
decrypt and verify and if the if the key

426
00:17:29,090 --> 00:17:30,620
derivation function we use is collision

427
00:17:30,620 --> 00:17:33,710
resistant then everything kind of works

428
00:17:33,710 --> 00:17:35,600
out so here's a slightly more general

429
00:17:35,600 --> 00:17:37,010
version of what I just said

430
00:17:37,010 --> 00:17:39,380
encrypt-then-mac composition is a single

431
00:17:39,380 --> 00:17:42,320
opening secure CCA EAD scheme if the key

432
00:17:42,320 --> 00:17:44,350
derivation function and the Mac are both

433
00:17:44,350 --> 00:17:48,100
and resistant one kind of like

434
00:17:48,100 --> 00:17:50,400
interesting and surprising to us

435
00:17:50,400 --> 00:17:52,240
consequence of this result is that

436
00:17:52,240 --> 00:17:54,850
because Facebook secret conversations

437
00:17:54,850 --> 00:17:56,910
which is there and an encrypted message

438
00:17:56,910 --> 00:18:00,490
protocol because it used signal which

439
00:18:00,490 --> 00:18:00,880
used

440
00:18:00,880 --> 00:18:04,750
ETM with with ratcheting which is to say

441
00:18:04,750 --> 00:18:07,330
they use they update the shared secret

442
00:18:07,330 --> 00:18:10,480
to ensure one-time use keys and more

443
00:18:10,480 --> 00:18:12,070
than that they actually use a collision

444
00:18:12,070 --> 00:18:13,660
resistant key derivation function to

445
00:18:13,660 --> 00:18:15,429
derive encryption on authentication keys

446
00:18:15,429 --> 00:18:18,309
for every message sent so an implication

447
00:18:18,309 --> 00:18:20,380
of this was that signals record layer

448
00:18:20,380 --> 00:18:23,169
which is what Facebook was using was was

449
00:18:23,169 --> 00:18:24,909
already a compact leak emitting on that

450
00:18:24,909 --> 00:18:26,620
Cayden encryption scheme and kind of

451
00:18:26,620 --> 00:18:29,710
what Facebook did was not really adding

452
00:18:29,710 --> 00:18:31,330
any functionality when you view the

453
00:18:31,330 --> 00:18:35,620
record layer in a suitable way just a

454
00:18:35,620 --> 00:18:37,419
table of some of the other schemes for

455
00:18:37,419 --> 00:18:40,539
yeah for to save time we'll just do this

456
00:18:40,539 --> 00:18:42,820
in a table encrypt-then-mac we already

457
00:18:42,820 --> 00:18:48,070
discussed Maclin cbc is a CCA ad scheme

458
00:18:48,070 --> 00:18:50,230
even if you let the adversary specify

459
00:18:50,230 --> 00:18:51,789
encryption and authentication keys as

460
00:18:51,789 --> 00:18:55,929
the opening separately and the the

461
00:18:55,929 --> 00:18:57,340
committing portion here is taken to be

462
00:18:57,340 --> 00:18:59,320
like the the last four blocks of the

463
00:18:59,320 --> 00:19:02,080
ciphertext plus the ib so one

464
00:19:02,080 --> 00:19:05,740
implication of this is that for some TLS

465
00:19:05,740 --> 00:19:10,750
cipher suites pre 1.3 1.3 the record

466
00:19:10,750 --> 00:19:13,990
layer of TLS is a CCA ad scheme already

467
00:19:13,990 --> 00:19:16,210
although I should caution that here

468
00:19:16,210 --> 00:19:17,440
because TLS it doesn't actually

469
00:19:17,440 --> 00:19:19,510
guarantee one-time use keys via like

470
00:19:19,510 --> 00:19:21,610
ratcheting the single opening security

471
00:19:21,610 --> 00:19:23,380
does become a problem because releasing

472
00:19:23,380 --> 00:19:25,539
the key to open a ciphertext will kind

473
00:19:25,539 --> 00:19:27,130
of like break the confidentiality of

474
00:19:27,130 --> 00:19:31,299
other of other messages in the paper we

475
00:19:31,299 --> 00:19:33,970
also proved encode than in cipher in the

476
00:19:33,970 --> 00:19:35,500
when you model the underlying

477
00:19:35,500 --> 00:19:36,909
permutation as an ideal cipher

478
00:19:36,909 --> 00:19:40,210
instantiates a CCA ad scheme and you can

479
00:19:40,210 --> 00:19:42,789
just view some constant length substring

480
00:19:42,789 --> 00:19:44,200
of the ciphertext as the committing

481
00:19:44,200 --> 00:19:47,350
portion here the final thing we did in

482
00:19:47,350 --> 00:19:50,110
the paper on legacy AAV schemes was kind

483
00:19:50,110 --> 00:19:52,090
of looking at these more efficient block

484
00:19:52,090 --> 00:19:53,860
cipher modes that use carter-wegman max

485
00:19:53,860 --> 00:19:55,809
and in the paper we show a pretty simple

486
00:19:55,809 --> 00:19:57,730
attack that breaks the receipt

487
00:19:57,730 --> 00:20:00,970
binding of any and of any mode that uses

488
00:20:00,970 --> 00:20:07,180
a carter-wegman mac as its as its

489
00:20:07,180 --> 00:20:09,610
Authenticator so this is like like GCM

490
00:20:09,610 --> 00:20:12,040
and the previous talk talked about like

491
00:20:12,040 --> 00:20:15,520
GCM and ChaCha 20 power 1305 and so the

492
00:20:15,520 --> 00:20:17,830
implication is that because there Macs

493
00:20:17,830 --> 00:20:19,270
are not actually collision resistant

494
00:20:19,270 --> 00:20:21,400
under adversarially chosen keys these

495
00:20:21,400 --> 00:20:23,500
aren't really suitable to be used as CCA

496
00:20:23,500 --> 00:20:28,390
ad schemes so the final thing I'll talk

497
00:20:28,390 --> 00:20:30,460
about here and I'll try to go a little

498
00:20:30,460 --> 00:20:34,240
bit fast is the the final thing which is

499
00:20:34,240 --> 00:20:36,460
a kind of a custom-built construction

500
00:20:36,460 --> 00:20:38,740
which we call committing encrypted PRF

501
00:20:38,740 --> 00:20:41,440
or CEP for short this is a nonce based

502
00:20:41,440 --> 00:20:43,360
authenticated encryption scheme which if

503
00:20:43,360 --> 00:20:44,680
you're not familiar just basically means

504
00:20:44,680 --> 00:20:46,300
encrypt and decrypt are deterministic

505
00:20:46,300 --> 00:20:50,620
and they take nonce as as input so CEP

506
00:20:50,620 --> 00:20:53,200
uses a nonce based PRG which will denote

507
00:20:53,200 --> 00:20:55,570
as G here a regular PRF and a collision

508
00:20:55,570 --> 00:20:58,990
resistant PRF encryption the first thing

509
00:20:58,990 --> 00:21:04,800
we do is derive size of M plus 2 bits of

510
00:21:04,800 --> 00:21:09,180
2 times the block the block cipher sized

511
00:21:09,180 --> 00:21:13,330
pseudo-random pads and the the biggest

512
00:21:13,330 --> 00:21:15,460
one just gets used an XOR with the

513
00:21:15,460 --> 00:21:17,380
message to generate a counter mode

514
00:21:17,380 --> 00:21:20,890
ciphertext and the other to get used as

515
00:21:20,890 --> 00:21:22,780
one-time keys for these prfs

516
00:21:22,780 --> 00:21:24,940
so the first one the the collision

517
00:21:24,940 --> 00:21:27,070
resistant PRF takes as input this one

518
00:21:27,070 --> 00:21:29,350
time keep e0 and the header and the

519
00:21:29,350 --> 00:21:32,020
message concatenated together to

520
00:21:32,020 --> 00:21:33,460
generate the committing portion of the

521
00:21:33,460 --> 00:21:37,210
ciphertext and to kind of guarantee like

522
00:21:37,210 --> 00:21:39,700
multi opening C text we actually use the

523
00:21:39,700 --> 00:21:42,400
other PRF with the one-time use key p1

524
00:21:42,400 --> 00:21:44,740
to generate the the authentication tag

525
00:21:44,740 --> 00:21:48,370
of the of the scheme and so this scheme

526
00:21:48,370 --> 00:21:50,200
has a lot of advantages over the other

527
00:21:50,200 --> 00:21:52,870
schemes that we've seen in this talk if

528
00:21:52,870 --> 00:21:54,730
the first thing is its nonce based so

529
00:21:54,730 --> 00:21:55,900
it's suitable for more settings

530
00:21:55,900 --> 00:21:56,980
especially where there might not be

531
00:21:56,980 --> 00:21:58,570
randomness available for encryption and

532
00:21:58,570 --> 00:22:02,620
decryption there it has shorter cipher

533
00:22:02,620 --> 00:22:04,090
text because it doesn't have an explicit

534
00:22:04,090 --> 00:22:06,280
opening and but it's still achieves

535
00:22:06,280 --> 00:22:08,200
multi opening security which is a really

536
00:22:08,200 --> 00:22:09,600
interesting property of this game

537
00:22:09,600 --> 00:22:12,000
and it also requires one fewer

538
00:22:12,000 --> 00:22:13,830
cryptographic Passover the message and

539
00:22:13,830 --> 00:22:17,070
header than the than the generic

540
00:22:17,070 --> 00:22:19,250
composition approaches we saw before so

541
00:22:19,250 --> 00:22:22,170
just in summary in this talk we

542
00:22:22,170 --> 00:22:24,870
introduced a new cryptographic primitive

543
00:22:24,870 --> 00:22:26,340
which we call compactly committing

544
00:22:26,340 --> 00:22:28,800
authenticated encryption and we kind of

545
00:22:28,800 --> 00:22:30,990
motivated its usefulness in verifiable

546
00:22:30,990 --> 00:22:33,090
abuse reporting settings and encrypted

547
00:22:33,090 --> 00:22:36,240
messengers we analyzed the CCA ad

548
00:22:36,240 --> 00:22:37,920
security of Facebook's generic

549
00:22:37,920 --> 00:22:39,600
composition scheme as well as several

550
00:22:39,600 --> 00:22:42,330
legacy schemes and finally we presented

551
00:22:42,330 --> 00:22:44,880
a nonce based CCA ad scheme called CEP

552
00:22:44,880 --> 00:22:46,350
which is more efficient than legacy

553
00:22:46,350 --> 00:22:48,480
schemes or generic composition thanks

554
00:22:48,480 --> 00:22:49,830
for listening

555
00:22:49,830 --> 00:22:56,730
[Applause]

