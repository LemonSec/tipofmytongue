1
00:00:05,100 --> 00:00:06,940
so let's start right off with the

2
00:00:06,940 --> 00:00:09,040
definition the LPN problem means

3
00:00:09,040 --> 00:00:11,110
learning parity with noise and it's a

4
00:00:11,110 --> 00:00:13,450
mathematical problem that's stated as

5
00:00:13,450 --> 00:00:15,820
follows so imagine that you have an

6
00:00:15,820 --> 00:00:17,590
Oracle that gives you samples of the

7
00:00:17,590 --> 00:00:21,039
form a random vector AI and the scalar

8
00:00:21,039 --> 00:00:23,380
product of this random vector AI with a

9
00:00:23,380 --> 00:00:26,590
secret vector s plus an error bit which

10
00:00:26,590 --> 00:00:28,810
is one with probability towel where tell

11
00:00:28,810 --> 00:00:30,699
should be probe should be smaller than

12
00:00:30,699 --> 00:00:34,330
1/2 and yeah the goal now is to find the

13
00:00:34,330 --> 00:00:37,630
secret vector s of course and now you

14
00:00:37,630 --> 00:00:39,370
can draw as many symbols as you want

15
00:00:39,370 --> 00:00:43,030
from this Oracle and have you drew a

16
00:00:43,030 --> 00:00:44,829
fixed amount of samples as many as you

17
00:00:44,829 --> 00:00:47,500
want you can write all the AIS in the

18
00:00:47,500 --> 00:00:56,500
columns of a matrix capital a here in

19
00:00:56,500 --> 00:00:59,289
this matrix AI and the small error bits

20
00:00:59,289 --> 00:01:02,800
yeah I can go to this e and it's

21
00:01:02,800 --> 00:01:04,750
equivalent to say you solve this

22
00:01:04,750 --> 00:01:08,560
equation AS plus e equal to b for s with

23
00:01:08,560 --> 00:01:13,450
the known a and b and solving this

24
00:01:13,450 --> 00:01:14,940
problem is easy whatever we know e

25
00:01:14,940 --> 00:01:17,050
because if you look at this equation

26
00:01:17,050 --> 00:01:19,899
here you can just solve it for s and

27
00:01:19,899 --> 00:01:22,569
since you know a and B already if you

28
00:01:22,569 --> 00:01:25,750
also know e yeah getting s is easy and

29
00:01:25,750 --> 00:01:28,330
this is for example the case when the

30
00:01:28,330 --> 00:01:30,789
noise rate so the towel is 0 because

31
00:01:30,789 --> 00:01:32,619
then the error vector will be always 0

32
00:01:32,619 --> 00:01:35,950
and we could solve for s or this is also

33
00:01:35,950 --> 00:01:38,229
the case when it's not zero but if tau

34
00:01:38,229 --> 00:01:40,630
is very small something like 1 over K

35
00:01:40,630 --> 00:01:43,899
here because then the e will be some

36
00:01:43,899 --> 00:01:45,610
unit vector so we can just brute force

37
00:01:45,610 --> 00:01:49,300
all the K unit vectors and at some point

38
00:01:49,300 --> 00:01:51,700
we will also find the correct s in it

39
00:01:51,700 --> 00:01:55,179
most K steps and now it's a common

40
00:01:55,179 --> 00:01:57,429
belief that solving this problem for

41
00:01:57,429 --> 00:01:59,890
bigger parameters of tau like

42
00:01:59,890 --> 00:02:02,830
essentially larger than 1 over K it's

43
00:02:02,830 --> 00:02:04,720
not doable in polynomial time anymore

44
00:02:04,720 --> 00:02:06,489
and so these two cases that have been

45
00:02:06,489 --> 00:02:09,310
put in one polynomial time but for

46
00:02:09,310 --> 00:02:12,099
larger noise rates of tau it isn't

47
00:02:12,099 --> 00:02:14,909
especially especially for constant oh

48
00:02:14,909 --> 00:02:16,780
okay

49
00:02:16,780 --> 00:02:19,300
and so what can we do what the LPN

50
00:02:19,300 --> 00:02:21,750
problem well we can for example create

51
00:02:21,750 --> 00:02:25,420
authentication protocols like the HB

52
00:02:25,420 --> 00:02:27,850
protocol and this uses a constant noise

53
00:02:27,850 --> 00:02:28,720
rate of Tower

54
00:02:28,720 --> 00:02:30,900
something like 1 over 4 or 1 over 8 and

55
00:02:30,900 --> 00:02:34,270
we can also do encryption with this for

56
00:02:34,270 --> 00:02:36,510
example the one published by 11 of it

57
00:02:36,510 --> 00:02:39,280
which uses a diminishing noise rate of 1

58
00:02:39,280 --> 00:02:42,420
over square root of tau it's rate of K

59
00:02:42,420 --> 00:02:44,819
okay and how can we solve this problem

60
00:02:44,819 --> 00:02:46,870
well the most famous and the

61
00:02:46,870 --> 00:02:48,489
state-of-the-art algorithm for this is

62
00:02:48,489 --> 00:02:50,890
the BK w algorithm create by Blume

63
00:02:50,890 --> 00:02:53,830
client Wasserman and it needs time

64
00:02:53,830 --> 00:02:56,230
memory has have a complexity 2 to the K

65
00:02:56,230 --> 00:02:58,450
over log K so it's slightly

66
00:02:58,450 --> 00:03:01,480
sub-exponential and for constant L this

67
00:03:01,480 --> 00:03:03,910
is also the fastest algorithm known at

68
00:03:03,910 --> 00:03:06,010
the moment but this has several

69
00:03:06,010 --> 00:03:09,370
drawbacks for example yeah the first one

70
00:03:09,370 --> 00:03:12,930
is even if you plug in this very simple

71
00:03:12,930 --> 00:03:16,569
this very small noise here 1 over K we

72
00:03:16,569 --> 00:03:18,160
have seen that the easier the problem

73
00:03:18,160 --> 00:03:20,920
should be easy in this case but the BK

74
00:03:20,920 --> 00:03:22,840
wi rhythm still needs to slightly sub

75
00:03:22,840 --> 00:03:24,700
exponential time instead of polynomial

76
00:03:24,700 --> 00:03:27,130
time so that shows that the algorithm

77
00:03:27,130 --> 00:03:29,320
has very bad dependency on tau and that

78
00:03:29,320 --> 00:03:30,730
you shouldn't just blame you for

79
00:03:30,730 --> 00:03:33,870
everything for any given LP n instance

80
00:03:33,870 --> 00:03:36,549
ok the second drawback is the high

81
00:03:36,549 --> 00:03:38,350
semper complexity it's also slightly

82
00:03:38,350 --> 00:03:41,019
sub-exponential and that prevents us

83
00:03:41,019 --> 00:03:42,970
from creating quantum algorithms of this

84
00:03:42,970 --> 00:03:46,359
version because the LP an Oracle that

85
00:03:46,359 --> 00:03:48,370
gives us all the samples is a classical

86
00:03:48,370 --> 00:03:52,150
one and if the algorithm needs to do the

87
00:03:52,150 --> 00:03:54,730
cable ok samples already then also

88
00:03:54,730 --> 00:03:57,400
quantum tricks don't help us in this

89
00:03:57,400 --> 00:04:00,880
case and that's just satisfying because

90
00:04:00,880 --> 00:04:04,870
the LPN problem is a candidate candidate

91
00:04:04,870 --> 00:04:07,930
to build post quantum secure Krypton a

92
00:04:07,930 --> 00:04:11,290
Krypton and if you don't have a quantum

93
00:04:11,290 --> 00:04:14,859
algorithm that's so we also went to

94
00:04:14,859 --> 00:04:16,988
consider quantum algorithms the fastest

95
00:04:16,988 --> 00:04:18,430
quantum algorithms to solve the RPN

96
00:04:18,430 --> 00:04:21,370
problem which is not possible here and

97
00:04:21,370 --> 00:04:24,100
the last robic that we mention here is

98
00:04:24,100 --> 00:04:27,099
the youtube memory consumption and it's

99
00:04:27,099 --> 00:04:29,380
the same as the other two sides have

100
00:04:29,380 --> 00:04:30,700
exponential

101
00:04:30,700 --> 00:04:34,120
and that means that we essentially can't

102
00:04:34,120 --> 00:04:36,880
solve any large LPL instance with this

103
00:04:36,880 --> 00:04:38,860
algorithm your practical experiments

104
00:04:38,860 --> 00:04:41,230
only exists for small K like around

105
00:04:41,230 --> 00:04:43,480
hundred but the most interesting

106
00:04:43,480 --> 00:04:47,830
instance start with let's say 512 so

107
00:04:47,830 --> 00:04:50,440
there's a huge gap and that's bad

108
00:04:50,440 --> 00:04:52,120
because if we want to estimate the

109
00:04:52,120 --> 00:04:54,010
concrete hardness of an LPN instance

110
00:04:54,010 --> 00:04:56,590
actually we want to extrapolate from

111
00:04:56,590 --> 00:04:58,360
experiments but if we only have

112
00:04:58,360 --> 00:05:00,430
experiments with very small parameters

113
00:05:00,430 --> 00:05:03,010
then the expectations become very

114
00:05:03,010 --> 00:05:08,110
inaccurate ok so now we talked a lot

115
00:05:08,110 --> 00:05:10,990
about the weak aw let's also check how

116
00:05:10,990 --> 00:05:13,660
it works kind of well so here's the

117
00:05:13,660 --> 00:05:15,910
Oracle this always gives us the LPN

118
00:05:15,910 --> 00:05:20,020
samples and at first we get a lot of

119
00:05:20,020 --> 00:05:22,570
samples to to decay over ok so in this

120
00:05:22,570 --> 00:05:25,090
matrix are all the AIS in every row so

121
00:05:25,090 --> 00:05:26,670
it's a random matrix because the AI

122
00:05:26,670 --> 00:05:29,800
vectors are random and now we try to

123
00:05:29,800 --> 00:05:31,600
combine vectors in such a way that we

124
00:05:31,600 --> 00:05:34,180
can create some zeros in the last

125
00:05:34,180 --> 00:05:36,640
coordinates let's say and we will lose

126
00:05:36,640 --> 00:05:38,680
some samples on the way but that's ok

127
00:05:38,680 --> 00:05:41,950
and we just continue this until at the

128
00:05:41,950 --> 00:05:44,770
end we end up with LPN samples where the

129
00:05:44,770 --> 00:05:47,140
random vector I I sort of ran back to

130
00:05:47,140 --> 00:05:49,810
anymore but let's say the first unit

131
00:05:49,810 --> 00:05:53,620
vector because what does it do well if

132
00:05:53,620 --> 00:05:56,110
we have LPN samples where the a is unit

133
00:05:56,110 --> 00:05:57,960
vector the first unit vector let's say

134
00:05:57,960 --> 00:06:00,310
then in the second component of the

135
00:06:00,310 --> 00:06:03,340
sample the other scalar product of AI

136
00:06:03,340 --> 00:06:06,250
and s will be just the first bit of the

137
00:06:06,250 --> 00:06:09,570
secret that we search plus the error bit

138
00:06:09,570 --> 00:06:12,100
but most of the time this arab it will

139
00:06:12,100 --> 00:06:14,620
be zero anyway so by doing a majority

140
00:06:14,620 --> 00:06:16,510
vote we can read the first bit of the

141
00:06:16,510 --> 00:06:18,490
secret from the second component of the

142
00:06:18,490 --> 00:06:22,960
samples and yeah we have seen the

143
00:06:22,960 --> 00:06:24,460
running time before this algorithm but

144
00:06:24,460 --> 00:06:26,320
if you do a more careful analysis you

145
00:06:26,320 --> 00:06:29,230
can see that you can also put the tau in

146
00:06:29,230 --> 00:06:32,050
the running time and here you see that

147
00:06:32,050 --> 00:06:34,690
if you plug in for example tau equal to

148
00:06:34,690 --> 00:06:37,600
one over K that the running time will be

149
00:06:37,600 --> 00:06:41,080
just two to the telling the exponent 1/2

150
00:06:41,080 --> 00:06:44,530
K over log K now so not not

151
00:06:44,530 --> 00:06:48,970
and to tackle these drawbacks of the bqw

152
00:06:48,970 --> 00:06:52,390
algorithm has let's look at another very

153
00:06:52,390 --> 00:06:54,850
easy and well-known algorithm that we

154
00:06:54,850 --> 00:06:58,870
call Gauss now and just as the following

155
00:06:58,870 --> 00:07:02,350
it's very easy just gets K samples from

156
00:07:02,350 --> 00:07:04,600
the Oracle mess we have a square matrix

157
00:07:04,600 --> 00:07:08,980
a and let's assume that no error

158
00:07:08,980 --> 00:07:10,960
happened yeah that all the arab it's AI

159
00:07:10,960 --> 00:07:14,500
are 0 then you would solve in this in

160
00:07:14,500 --> 00:07:16,690
this line for the correct s and the

161
00:07:16,690 --> 00:07:20,530
algorithm would end put terminate but

162
00:07:20,530 --> 00:07:22,270
usually errors of course will happen if

163
00:07:22,270 --> 00:07:23,980
you draw K assembles the probability is

164
00:07:23,980 --> 00:07:25,930
high that some ever happened so you have

165
00:07:25,930 --> 00:07:29,169
to repeat this process actually find the

166
00:07:29,169 --> 00:07:32,800
correct s and maybe some of you wonder

167
00:07:32,800 --> 00:07:35,020
how you can now check if you found the

168
00:07:35,020 --> 00:07:37,120
correct s now this creates what you are

169
00:07:37,120 --> 00:07:39,430
searching for but there's a very simple

170
00:07:39,430 --> 00:07:44,380
and efficient statistical hypothesis

171
00:07:44,380 --> 00:07:46,000
test to check if we have the correct

172
00:07:46,000 --> 00:07:49,120
secret ok and as I said the algorithm

173
00:07:49,120 --> 00:07:51,490
terminates whenever we really draw K

174
00:07:51,490 --> 00:07:53,740
samples without any error yeah we're all

175
00:07:53,740 --> 00:07:58,210
the Arab it's AI R 0 and this happens

176
00:07:58,210 --> 00:07:59,770
with probability 1 minus tau to the K

177
00:07:59,770 --> 00:08:02,860
because one bit is 0 with probability 1

178
00:08:02,860 --> 00:08:05,710
minus tau and we want all bits of all K

179
00:08:05,710 --> 00:08:10,750
bits to be 0 so and so this algorithm

180
00:08:10,750 --> 00:08:13,210
has running time 1 over this probability

181
00:08:13,210 --> 00:08:17,140
then expected and we got the following

182
00:08:17,140 --> 00:08:19,840
theorem that the LP n problem can be

183
00:08:19,840 --> 00:08:21,340
solved in the time that we have just

184
00:08:21,340 --> 00:08:22,810
seen yeah one minds thought to the minus

185
00:08:22,810 --> 00:08:29,140
K and yeah time n samples and and

186
00:08:29,140 --> 00:08:31,120
polynomial memory yeah here we knew this

187
00:08:31,120 --> 00:08:33,610
soft our notation which suppresses

188
00:08:33,610 --> 00:08:35,919
polynomial factors at the memory is

189
00:08:35,919 --> 00:08:37,479
actually something like K squared

190
00:08:37,479 --> 00:08:42,789
o of K squared and if you do the math

191
00:08:42,789 --> 00:08:44,740
you can see that for diminishing tau

192
00:08:44,740 --> 00:08:46,120
yeah something like one of us grew out

193
00:08:46,120 --> 00:08:49,660
of K you can write the running time in a

194
00:08:49,660 --> 00:08:52,480
nicer way like e to the Tao okay and

195
00:08:52,480 --> 00:08:54,310
here you see that it has a very good

196
00:08:54,310 --> 00:08:56,110
dependency on tower because if you plug

197
00:08:56,110 --> 00:08:58,600
in Tommy put 1 over K for exam

198
00:08:58,600 --> 00:09:00,160
you see that the writing time becomes

199
00:09:00,160 --> 00:09:03,370
polynomial like if Auto software wolf

200
00:09:03,370 --> 00:09:06,790
won so polynomial that's good and we've

201
00:09:06,790 --> 00:09:09,910
also seen that memory is also just

202
00:09:09,910 --> 00:09:13,210
polynomial that's also good but one

203
00:09:13,210 --> 00:09:15,820
problem rain remains you know the one

204
00:09:15,820 --> 00:09:18,160
that there's no quantum version because

205
00:09:18,160 --> 00:09:20,230
of the high sample complexity now we

206
00:09:20,230 --> 00:09:22,960
have time and semi complexity this and

207
00:09:22,960 --> 00:09:24,970
if we have a fuse this many symbols

208
00:09:24,970 --> 00:09:27,190
already even with quantum tricks we

209
00:09:27,190 --> 00:09:31,180
can't get the time below this bound so

210
00:09:31,180 --> 00:09:33,670
what we did to fix this problem is the

211
00:09:33,670 --> 00:09:35,830
following we are wasting too many

212
00:09:35,830 --> 00:09:37,930
samples and what we did is essentially

213
00:09:37,930 --> 00:09:40,330
to recycle samples at first we make a

214
00:09:40,330 --> 00:09:43,150
pool of around K squared samples from

215
00:09:43,150 --> 00:09:47,260
the auricle and then we repeat the same

216
00:09:47,260 --> 00:09:49,330
algorithm that we have seen before but

217
00:09:49,330 --> 00:09:51,130
instead of getting K new samples in each

218
00:09:51,130 --> 00:09:53,620
iteration we get the samples from this

219
00:09:53,620 --> 00:09:56,340
pool that we created in advance

220
00:09:56,340 --> 00:09:59,500
now that the rest is the same we get K

221
00:09:59,500 --> 00:10:01,270
samples from this pool of samples and

222
00:10:01,270 --> 00:10:03,880
try to solve for s and repeat and repeat

223
00:10:03,880 --> 00:10:07,960
until we found the correct s and it

224
00:10:07,960 --> 00:10:08,710
looks like this

225
00:10:08,710 --> 00:10:12,310
so he's Oracle ever get a pool first

226
00:10:12,310 --> 00:10:15,490
and from there we're sampling here's

227
00:10:15,490 --> 00:10:18,370
some some errors happened so we won't

228
00:10:18,370 --> 00:10:22,720
find the correct s and again errors

229
00:10:22,720 --> 00:10:24,250
happened and at some point

230
00:10:24,250 --> 00:10:28,210
oops no errors will happen all the

231
00:10:28,210 --> 00:10:31,030
rabbits are 0 here and we saw for the

232
00:10:31,030 --> 00:10:35,200
correct s and the good thing about this

233
00:10:35,200 --> 00:10:37,870
approach is that the running time stays

234
00:10:37,870 --> 00:10:40,690
the same as before that's the one -

235
00:10:40,690 --> 00:10:42,940
thought to the minus K but now we just

236
00:10:42,940 --> 00:10:44,770
use a polynomial amount of memory and

237
00:10:44,770 --> 00:10:49,900
also polynomial model symbols and if you

238
00:10:49,900 --> 00:10:52,720
look into this in more detail and for

239
00:10:52,720 --> 00:10:54,970
the people who know coding theory this

240
00:10:54,970 --> 00:10:57,490
algorithm which we called pool cows that

241
00:10:57,490 --> 00:10:59,440
we have just seen is essentially premise

242
00:10:59,440 --> 00:11:03,820
decoding algorithm so you can also of

243
00:11:03,820 --> 00:11:06,760
course use more advanced decoding

244
00:11:06,760 --> 00:11:09,670
algorithms like the mmtb JMM for the

245
00:11:09,670 --> 00:11:11,800
people who know which we will also see

246
00:11:11,800 --> 00:11:12,310
like

247
00:11:12,310 --> 00:11:16,120
and so this is one advantage that that

248
00:11:16,120 --> 00:11:19,450
can easily be extended and now we can

249
00:11:19,450 --> 00:11:22,270
also do a quantum version because we

250
00:11:22,270 --> 00:11:23,710
just have two polynomial model samples

251
00:11:23,710 --> 00:11:25,960
now so nothing prevents us from doing a

252
00:11:25,960 --> 00:11:29,710
quantum version and actually we can do

253
00:11:29,710 --> 00:11:31,540
it by just applying a simple grover

254
00:11:31,540 --> 00:11:34,570
search and for the people who know it it

255
00:11:34,570 --> 00:11:36,820
doesn't come surprisingly that we can

256
00:11:36,820 --> 00:11:40,390
like so there's a running time of this

257
00:11:40,390 --> 00:11:43,990
classic algorithm can be yeah we can put

258
00:11:43,990 --> 00:11:45,700
the square root around it in the quantum

259
00:11:45,700 --> 00:11:50,560
version okay and now at this point we

260
00:11:50,560 --> 00:11:52,060
have an I've written that okay use a

261
00:11:52,060 --> 00:11:55,030
some amount of time but nearly no memory

262
00:11:55,030 --> 00:11:57,310
and samples and now we try to find some

263
00:11:57,310 --> 00:11:59,170
trade-offs now you got to find some time

264
00:11:59,170 --> 00:12:02,260
memory or time sample trade-offs and one

265
00:12:02,260 --> 00:12:05,590
way to do it is the following by

266
00:12:05,590 --> 00:12:07,750
dimensional reduction just imagine that

267
00:12:07,750 --> 00:12:10,180
we want to solve this LP ID problem yeah

268
00:12:10,180 --> 00:12:12,550
we have this equation AS plus e equal to

269
00:12:12,550 --> 00:12:17,230
B and now just imagine that the matrix a

270
00:12:17,230 --> 00:12:18,960
ends with a few zeros

271
00:12:18,960 --> 00:12:22,750
yeah let's assume that all the small a

272
00:12:22,750 --> 00:12:25,900
is have zeros in the end if we would

273
00:12:25,900 --> 00:12:28,480
have this then we would have a reduced a

274
00:12:28,480 --> 00:12:31,080
pn instance in fact because if you

275
00:12:31,080 --> 00:12:33,010
calculate this you get something like

276
00:12:33,010 --> 00:12:34,840
this as it's a prime it's the same a

277
00:12:34,840 --> 00:12:39,070
primus here times a short a secret so

278
00:12:39,070 --> 00:12:40,960
we're having zeros here we have a

279
00:12:40,960 --> 00:12:42,970
dimension where that dimension reduced a

280
00:12:42,970 --> 00:12:47,410
pn instance let's say and yeah now in

281
00:12:47,410 --> 00:12:49,300
the following we try to create symbols

282
00:12:49,300 --> 00:12:52,240
that ends with a lot of zeros and that's

283
00:12:52,240 --> 00:12:53,950
what we call the hybrid approach

284
00:12:53,950 --> 00:12:56,530
so the first step that's reducing

285
00:12:56,530 --> 00:12:58,420
dimension and the second step is use

286
00:12:58,420 --> 00:13:00,310
some decoding algorithm whichever you

287
00:13:00,310 --> 00:13:02,170
want for example the one that we have

288
00:13:02,170 --> 00:13:06,760
seen already or some advanced friends so

289
00:13:06,760 --> 00:13:09,580
and one easy way to reduce the dimension

290
00:13:09,580 --> 00:13:12,700
is the following you just cry with the

291
00:13:12,700 --> 00:13:14,980
Oracle and just keep these samples that

292
00:13:14,980 --> 00:13:17,350
end with zeros already so we would give

293
00:13:17,350 --> 00:13:19,030
us at the end so we just query and throw

294
00:13:19,030 --> 00:13:20,410
away everything that doesn't end with

295
00:13:20,410 --> 00:13:23,020
only zeros here so the AI doesn't end

296
00:13:23,020 --> 00:13:25,390
with 0 so we throw it away the second

297
00:13:25,390 --> 00:13:25,880
one ends with

298
00:13:25,880 --> 00:13:29,630
Zero's and we put it in this pool so it

299
00:13:29,630 --> 00:13:31,820
would pool now because the vectors end

300
00:13:31,820 --> 00:13:34,490
with zeros already there's two now this

301
00:13:34,490 --> 00:13:37,160
one gets thrown away again and this one

302
00:13:37,160 --> 00:13:38,960
gets to the pool and if we have this

303
00:13:38,960 --> 00:13:40,820
good pool where every vector ends with a

304
00:13:40,820 --> 00:13:44,180
few zeros we can sum decoding like the

305
00:13:44,180 --> 00:13:45,680
one that we assumed that we have seen

306
00:13:45,680 --> 00:13:49,700
before and if you balance these two

307
00:13:49,700 --> 00:13:51,680
steps of the algorithm like the pool

308
00:13:51,680 --> 00:13:53,480
generation and the decoding approach and

309
00:13:53,480 --> 00:13:56,030
if you use this easy a Gauss method

310
00:13:56,030 --> 00:13:57,500
again that we have seen before this

311
00:13:57,500 --> 00:14:00,950
prognostic coding is the same you get

312
00:14:00,950 --> 00:14:03,080
the following theorem that LPM can be

313
00:14:03,080 --> 00:14:06,950
soft in yeah faster time yeah and it's

314
00:14:06,950 --> 00:14:08,780
also 1 minus tau to the minus K again

315
00:14:08,780 --> 00:14:12,470
but okay my minus K over something

316
00:14:12,470 --> 00:14:14,690
bigger than 1 now so we know what the

317
00:14:14,690 --> 00:14:17,570
exponent and we can also do a quantum

318
00:14:17,570 --> 00:14:19,700
version of this and this gets also

319
00:14:19,700 --> 00:14:21,680
better than the quantum version that we

320
00:14:21,680 --> 00:14:23,240
have seen before because we have instead

321
00:14:23,240 --> 00:14:25,040
of K over 2 we have K over 2 plus

322
00:14:25,040 --> 00:14:31,790
something bigger than 0 again ok and we

323
00:14:31,790 --> 00:14:34,190
don't stop here because if you remember

324
00:14:34,190 --> 00:14:36,680
the B kwi rhythm it essentially also did

325
00:14:36,680 --> 00:14:38,180
some kind of dimensional reduction yeah

326
00:14:38,180 --> 00:14:39,950
we create we combine some samples to

327
00:14:39,950 --> 00:14:43,040
create zeros and now we can combine this

328
00:14:43,040 --> 00:14:45,200
b KW dimension reduction with the

329
00:14:45,200 --> 00:14:47,780
dimension reduction we have just seen so

330
00:14:47,780 --> 00:14:49,430
how does it look like here's the oracle

331
00:14:49,430 --> 00:14:52,730
again and we try b samples and put them

332
00:14:52,730 --> 00:14:55,130
in the pool first by rejecting samples

333
00:14:55,130 --> 00:15:00,770
and starting from this pool here and we

334
00:15:00,770 --> 00:15:03,770
have some zeros created here already

335
00:15:03,770 --> 00:15:06,200
just by sampling and from this point we

336
00:15:06,200 --> 00:15:07,670
are just doing the bigger w reduction

337
00:15:07,670 --> 00:15:09,530
again so we try to combine samples we

338
00:15:09,530 --> 00:15:11,330
lose a few in every iteration but we

339
00:15:11,330 --> 00:15:14,600
create even more zeroes so we create an

340
00:15:14,600 --> 00:15:16,340
even better pool with even more zeroes

341
00:15:16,340 --> 00:15:17,780
so with a bigger dimensional reduction

342
00:15:17,780 --> 00:15:20,050
and from there we do the decoding again

343
00:15:20,050 --> 00:15:25,310
and what does this do now well ok we

344
00:15:25,310 --> 00:15:27,050
have heard about the decoding approach

345
00:15:27,050 --> 00:15:29,060
with users which uses a low amount of

346
00:15:29,060 --> 00:15:31,160
memory and but you just exponential

347
00:15:31,160 --> 00:15:33,650
amount of time and the B kW which uses

348
00:15:33,650 --> 00:15:36,640
less time but also much more memory and

349
00:15:36,640 --> 00:15:39,200
this hybrid approach that we have just

350
00:15:39,200 --> 00:15:40,029
seen

351
00:15:40,029 --> 00:15:42,110
interpolates between these two

352
00:15:42,110 --> 00:15:45,110
algorithms and that's good because if

353
00:15:45,110 --> 00:15:47,450
you want to do actual experiments like

354
00:15:47,450 --> 00:15:50,149
if you really want to solve LPN usually

355
00:15:50,149 --> 00:15:51,680
you will be in the situation that you

356
00:15:51,680 --> 00:15:53,660
can't use the be kW anyway now if you

357
00:15:53,660 --> 00:15:56,330
want to solve an instance with dimension

358
00:15:56,330 --> 00:15:59,180
or with k equal to 300 i was something

359
00:15:59,180 --> 00:16:02,360
between here you can't use to be KW but

360
00:16:02,360 --> 00:16:05,060
usually but you also have too much

361
00:16:05,060 --> 00:16:07,760
memory for just using decoding so if you

362
00:16:07,760 --> 00:16:10,310
would just decode you would waste memory

363
00:16:10,310 --> 00:16:12,980
and with a hybrid you can use all the

364
00:16:12,980 --> 00:16:15,080
memories that you have and get the best

365
00:16:15,080 --> 00:16:16,550
running time a better running time the

366
00:16:16,550 --> 00:16:18,520
new coding and you can also actually

367
00:16:18,520 --> 00:16:20,240
apply this algorithm

368
00:16:20,240 --> 00:16:23,899
unlike the BK w so let's see some

369
00:16:23,899 --> 00:16:26,690
numbers to show this first here's a

370
00:16:26,690 --> 00:16:29,570
table with a with a lot of LP atom

371
00:16:29,570 --> 00:16:33,070
senses and yeah with various case from

372
00:16:33,070 --> 00:16:37,220
256 to 1280 and the noise rate is

373
00:16:37,220 --> 00:16:39,730
diminishing 1 over square root of k and

374
00:16:39,730 --> 00:16:42,260
in the table you see the running time

375
00:16:42,260 --> 00:16:44,510
exponents including pond and polynomial

376
00:16:44,510 --> 00:16:47,120
factors and this running times are also

377
00:16:47,120 --> 00:16:49,220
with restricted memory here that's very

378
00:16:49,220 --> 00:16:51,350
important we restricted the memory to 2

379
00:16:51,350 --> 00:16:55,760
to the 80 bits and you see that for

380
00:16:55,760 --> 00:16:57,920
these instances with a diminishing towel

381
00:16:57,920 --> 00:17:00,110
actually decoding is the best thing you

382
00:17:00,110 --> 00:17:02,450
can do you cannot use the BK w but it

383
00:17:02,450 --> 00:17:05,540
will be slower than just the decoding

384
00:17:05,540 --> 00:17:07,250
approach which we have also discussed

385
00:17:07,250 --> 00:17:09,709
before it has a bit dependency on towel

386
00:17:09,709 --> 00:17:13,400
and the hybrid as you can see here it

387
00:17:13,400 --> 00:17:14,900
has the same running time as the

388
00:17:14,900 --> 00:17:17,869
decoding because was these instances the

389
00:17:17,869 --> 00:17:19,429
hybrid just collapses to the decoding

390
00:17:19,429 --> 00:17:21,500
approach which is also supposed to do it

391
00:17:21,500 --> 00:17:23,380
because it's just the best approach here

392
00:17:23,380 --> 00:17:26,480
and you can also of course use the

393
00:17:26,480 --> 00:17:28,280
quantum version and then you get lower

394
00:17:28,280 --> 00:17:31,610
running times as one would expect and in

395
00:17:31,610 --> 00:17:35,000
this table you can also see that even

396
00:17:35,000 --> 00:17:38,690
thousand 280 bits are not enough for not

397
00:17:38,690 --> 00:17:41,090
even for classical 80 bit security so

398
00:17:41,090 --> 00:17:42,230
you have to put in a little bit more

399
00:17:42,230 --> 00:17:44,929
like around 2000 to get 80 bit of

400
00:17:44,929 --> 00:17:49,429
security and let's check another table

401
00:17:49,429 --> 00:17:51,559
here and here we have a constant noise

402
00:17:51,559 --> 00:17:53,480
rate now 1 over 4

403
00:17:53,480 --> 00:17:56,630
K varies again and say memory

404
00:17:56,630 --> 00:17:58,580
restriction and again here are the times

405
00:17:58,580 --> 00:18:02,540
with polynomial factors included and

406
00:18:02,540 --> 00:18:05,720
here we see something different we see

407
00:18:05,720 --> 00:18:07,760
that actually for the small instance

408
00:18:07,760 --> 00:18:11,990
2056 the BK w is the best we can do much

409
00:18:11,990 --> 00:18:13,580
better than decoding and it's also still

410
00:18:13,580 --> 00:18:16,429
applicable and the hybrid collapses just

411
00:18:16,429 --> 00:18:18,020
to the plain because of that you

412
00:18:18,020 --> 00:18:19,429
approach because it's the best that can

413
00:18:19,429 --> 00:18:23,419
do and we're starting from 384 it gets

414
00:18:23,419 --> 00:18:25,610
interesting because now we can't apply

415
00:18:25,610 --> 00:18:29,270
the BK w algorithm anymore now we can

416
00:18:29,270 --> 00:18:30,830
apply the decoding the cost decoding

417
00:18:30,830 --> 00:18:33,230
just use polynomial amount of memory so

418
00:18:33,230 --> 00:18:37,190
very low memory usually and but if we

419
00:18:37,190 --> 00:18:40,760
have two to the ad space anyway we can

420
00:18:40,760 --> 00:18:44,299
use all of the space to create fast

421
00:18:44,299 --> 00:18:46,040
algorithm so i've algorithm that's

422
00:18:46,040 --> 00:18:48,110
faster than just coding it and that's

423
00:18:48,110 --> 00:18:50,059
the hybrid now here we have 88 it's

424
00:18:50,059 --> 00:18:52,730
still executable and it's faster than

425
00:18:52,730 --> 00:18:55,669
decoding and you are the same with this

426
00:18:55,669 --> 00:18:58,270
instance and at some point

427
00:18:58,270 --> 00:19:00,530
yeah the memory can't be good to boot

428
00:19:00,530 --> 00:19:02,660
you can't be put to good use anymore and

429
00:19:02,660 --> 00:19:05,720
the hybrid just collapses to decoding

430
00:19:05,720 --> 00:19:09,080
again that's what the optimization

431
00:19:09,080 --> 00:19:15,049
suggests and of course using quantum

432
00:19:15,049 --> 00:19:17,299
tricks like grover search in this case

433
00:19:17,299 --> 00:19:19,490
we can also lower the running times

434
00:19:19,490 --> 00:19:24,620
again okay and now we did the I'll get

435
00:19:24,620 --> 00:19:26,600
these tables they are nice but actually

436
00:19:26,600 --> 00:19:28,630
experiments are always better so we also

437
00:19:28,630 --> 00:19:32,059
programmed all of this and we had a

438
00:19:32,059 --> 00:19:34,880
server with we had a PC with two to the

439
00:19:34,880 --> 00:19:38,960
41 bits of RAM and for the instances

440
00:19:38,960 --> 00:19:40,549
that we wanted to solve the Beacon W

441
00:19:40,549 --> 00:19:42,919
algorithm was not applicable of course

442
00:19:42,919 --> 00:19:45,070
otherwise we would have used it probably

443
00:19:45,070 --> 00:19:48,049
so we use decoding instead decoding and

444
00:19:48,049 --> 00:19:49,970
this hybrid approach and we decoded via

445
00:19:49,970 --> 00:19:53,510
a more advanced decoding algorithm with

446
00:19:53,510 --> 00:19:54,200
the MMT

447
00:19:54,200 --> 00:19:56,450
introduced by maya maya and toma in asia

448
00:19:56,450 --> 00:20:01,190
crypt 2011 and what we actually solved

449
00:20:01,190 --> 00:20:03,500
to where the following instances here

450
00:20:03,500 --> 00:20:06,900
was k equal to 534 and diminishing tau

451
00:20:06,900 --> 00:20:09,120
1 over square root of K for example we

452
00:20:09,120 --> 00:20:12,420
could solve this one in approximately 5

453
00:20:12,420 --> 00:20:15,390
days and the poor generation took 2.5

454
00:20:15,390 --> 00:20:20,040
days so this was the the method where we

455
00:20:20,040 --> 00:20:22,980
just draw samples and just keep the ones

456
00:20:22,980 --> 00:20:25,620
that end with 0 that's what we mean with

457
00:20:25,620 --> 00:20:28,400
puh generation here and then we use the

458
00:20:28,400 --> 00:20:32,760
more advanced mmt decoding approach okay

459
00:20:32,760 --> 00:20:34,680
and you can also see that we solved an

460
00:20:34,680 --> 00:20:37,950
instance with a bigger error 1 over 8 so

461
00:20:37,950 --> 00:20:40,530
and here we could also only just solve

462
00:20:40,530 --> 00:20:44,760
it with a smaller K in 15 days and with

463
00:20:44,760 --> 00:20:47,640
an even bigger error tau we could solve

464
00:20:47,640 --> 00:20:51,120
instances up to 135 at first we did it

465
00:20:51,120 --> 00:20:53,790
without using extra memory yes so we

466
00:20:53,790 --> 00:20:56,010
here we don't have any we didn't use any

467
00:20:56,010 --> 00:20:58,440
BK w dimension reduction so we could

468
00:20:58,440 --> 00:21:01,650
solve it in about 2 weeks but in this

469
00:21:01,650 --> 00:21:04,140
case we just used up to I don't know

470
00:21:04,140 --> 00:21:06,060
something like 2 to 30 Ram was it I

471
00:21:06,060 --> 00:21:09,360
think so we still had some left and if

472
00:21:09,360 --> 00:21:12,600
we put it to use then we could do some

473
00:21:12,600 --> 00:21:16,080
bigger W reduction steps and cut solvers

474
00:21:16,080 --> 00:21:18,330
in less than one week mm so you see the

475
00:21:18,330 --> 00:21:23,310
advantage of this hybrid approach and if

476
00:21:23,310 --> 00:21:26,520
you want to extrapolate here this

477
00:21:26,520 --> 00:21:29,190
instant 512 and 1 over 8 is like a

478
00:21:29,190 --> 00:21:31,440
famous instance like the cryptographers

479
00:21:31,440 --> 00:21:34,080
favorite favorite LP n instance and if

480
00:21:34,080 --> 00:21:35,970
you extrapolate from this incidence that

481
00:21:35,970 --> 00:21:38,190
we solved here now is the same era 1

482
00:21:38,190 --> 00:21:41,940
over 8 1 over 8 then on our PC this

483
00:21:41,940 --> 00:21:45,120
would take like 2 to the 36 years so

484
00:21:45,120 --> 00:21:48,960
that's why we assume that this instance

485
00:21:48,960 --> 00:21:53,700
is so secure even classically ok so what

486
00:21:53,700 --> 00:21:56,130
we have you learned well the decoding is

487
00:21:56,130 --> 00:22:00,510
a good approach for small town it allows

488
00:22:00,510 --> 00:22:01,440
quantum speedups

489
00:22:01,440 --> 00:22:03,180
and its memory efficient yeah that means

490
00:22:03,180 --> 00:22:06,180
that you can actually apply this and

491
00:22:06,180 --> 00:22:08,370
this I rhythm also gave rise to this

492
00:22:08,370 --> 00:22:09,990
hybrid algorithm we have this mix

493
00:22:09,990 --> 00:22:13,620
between for example decoding and TB kW

494
00:22:13,620 --> 00:22:15,780
which makes things faster and which is

495
00:22:15,780 --> 00:22:18,210
very good for experiments and this

496
00:22:18,210 --> 00:22:20,370
allowed us to first off medium

497
00:22:20,370 --> 00:22:22,740
in instances like the 500 instance that

498
00:22:22,740 --> 00:22:24,540
we have just seen because this was not

499
00:22:24,540 --> 00:22:26,880
possible before okay so thank you for

500
00:22:26,880 --> 00:22:27,420
your attention

501
00:22:27,420 --> 00:22:29,930
do we have any questions

502
00:22:29,930 --> 00:22:36,880
[Applause]

