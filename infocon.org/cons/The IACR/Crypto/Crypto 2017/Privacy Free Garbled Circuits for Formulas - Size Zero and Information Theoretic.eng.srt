1
00:00:04,840 --> 00:00:07,270
and privacy free gobbling schemes

2
00:00:07,270 --> 00:00:08,650
essentially aim to achieve on the

3
00:00:08,650 --> 00:00:10,900
authenticity with increased efficiency

4
00:00:10,900 --> 00:00:15,240
and they do this by sacrificing privacy

5
00:00:15,240 --> 00:00:17,590
applications of privacy free gobbling

6
00:00:17,590 --> 00:00:19,660
include zero knowledge attribute based

7
00:00:19,660 --> 00:00:22,000
key exchange and anonymous credentials

8
00:00:22,000 --> 00:00:25,119
among others and our main result in this

9
00:00:25,119 --> 00:00:27,190
work is an information theoretic privacy

10
00:00:27,190 --> 00:00:31,720
free carving scheme for formulas some

11
00:00:31,720 --> 00:00:33,250
interesting properties were construction

12
00:00:33,250 --> 00:00:36,940
looking ahead it leaks both keys on some

13
00:00:36,940 --> 00:00:38,470
wires some intermediate wires in the

14
00:00:38,470 --> 00:00:40,210
circuit and this has no effect on the

15
00:00:40,210 --> 00:00:42,790
security of the construction right and

16
00:00:42,790 --> 00:00:44,410
there no cryptographic assumptions that

17
00:00:44,410 --> 00:00:46,840
the informations here at it and it

18
00:00:46,840 --> 00:00:50,410
produces no ciphertex either and it is

19
00:00:50,410 --> 00:00:54,550
simply it's linear in the linear goblin

20
00:00:54,550 --> 00:00:56,710
model of Ahura and others from the

21
00:00:56,710 --> 00:00:59,320
uroclub 15 work and it overcomes the

22
00:00:59,320 --> 00:01:00,789
lower bound that they proved in the

23
00:01:00,789 --> 00:01:04,089
privacy free setting right and our

24
00:01:04,089 --> 00:01:05,770
construction composers to god took up

25
00:01:05,770 --> 00:01:07,180
the formulas and the intuition is that

26
00:01:07,180 --> 00:01:08,770
even though we leaked some keys on it

27
00:01:08,770 --> 00:01:12,580
immediate wires the key can be leaked on

28
00:01:12,580 --> 00:01:14,350
a wire only if a gate occurring after

29
00:01:14,350 --> 00:01:15,729
the topologically has already been

30
00:01:15,729 --> 00:01:17,500
evaluated and by definition the output

31
00:01:17,500 --> 00:01:22,929
gate is last topologically and unlike

32
00:01:22,929 --> 00:01:24,759
information theoretic instructions and

33
00:01:24,759 --> 00:01:27,310
the general setting that achieve privacy

34
00:01:27,310 --> 00:01:30,580
our construction doesn't have a key size

35
00:01:30,580 --> 00:01:31,899
that's dependent on the depth of the

36
00:01:31,899 --> 00:01:36,340
circuit and and also we score adaptive

37
00:01:36,340 --> 00:01:37,899
security in the language of malaria and

38
00:01:37,899 --> 00:01:39,880
others for free as we don't produce any

39
00:01:39,880 --> 00:01:41,679
ciphertext the construction produces no

40
00:01:41,679 --> 00:01:44,619
cipher text right and we introduce

41
00:01:44,619 --> 00:01:46,330
efficient threshold Gate gobbling and

42
00:01:46,330 --> 00:01:50,069
the privacy free setting background a

43
00:01:50,069 --> 00:01:52,929
garbling scheme consists of a tuple of

44
00:01:52,929 --> 00:01:55,000
algorithms gobble encode evaluate and

45
00:01:55,000 --> 00:01:58,660
decode the garbled algorithm takes the

46
00:01:58,660 --> 00:02:00,220
circuit description and the security

47
00:02:00,220 --> 00:02:02,380
parameter and outputs a gobble circuit

48
00:02:02,380 --> 00:02:03,640
encoding information and decoding

49
00:02:03,640 --> 00:02:06,489
information the encoding information is

50
00:02:06,489 --> 00:02:08,139
combined with the Clery input to give a

51
00:02:08,139 --> 00:02:09,580
goblet input which can then be evaluated

52
00:02:09,580 --> 00:02:11,800
on a gobble circuit to produce a goblet

53
00:02:11,800 --> 00:02:14,319
output the cobbled output is then

54
00:02:14,319 --> 00:02:16,810
decoded to a clear output and a natural

55
00:02:16,810 --> 00:02:18,590
correctness requirement is

56
00:02:18,590 --> 00:02:20,270
the clear output obtained at the end of

57
00:02:20,270 --> 00:02:22,400
this procedure is the same as what he

58
00:02:22,400 --> 00:02:24,380
would have gotten if we had evaluated in

59
00:02:24,380 --> 00:02:29,090
the clear it's so privacy and formally

60
00:02:29,090 --> 00:02:30,680
captures that the information

61
00:02:30,680 --> 00:02:32,720
availability and evaluator leaks nothing

62
00:02:32,720 --> 00:02:35,180
about the input that is used to generate

63
00:02:35,180 --> 00:02:37,580
it so this is formalized by requiring

64
00:02:37,580 --> 00:02:39,260
the existence of the simulator that

65
00:02:39,260 --> 00:02:41,690
produces the same values of the kabul

66
00:02:41,690 --> 00:02:45,290
circuit encoded input and decoding

67
00:02:45,290 --> 00:02:47,360
information without access to the actual

68
00:02:47,360 --> 00:02:50,209
code input right so it's computationally

69
00:02:50,209 --> 00:02:52,640
indistinguishable from honestly

70
00:02:52,640 --> 00:02:57,049
generated values authenticity captures

71
00:02:57,049 --> 00:02:59,410
the unforgeable 'ti of carbide outputs

72
00:02:59,410 --> 00:03:02,209
that is if I'm taking a look at the

73
00:03:02,209 --> 00:03:04,849
garbling scheme flow chart again if we

74
00:03:04,849 --> 00:03:06,560
replace the evaluation box with an

75
00:03:06,560 --> 00:03:10,340
adversary who output some Y tilde an

76
00:03:10,340 --> 00:03:12,049
authentic Goblin scheme and shows that

77
00:03:12,049 --> 00:03:14,239
any output of an adversary in this case

78
00:03:14,239 --> 00:03:17,959
is always the output of honest

79
00:03:17,959 --> 00:03:21,260
evaluation and an adversity can't output

80
00:03:21,260 --> 00:03:24,260
or rather Forge an output that's also

81
00:03:24,260 --> 00:03:27,019
valid and also not the output of honest

82
00:03:27,019 --> 00:03:32,620
evaluation it's so privacy free gobbling

83
00:03:32,620 --> 00:03:34,819
prediction and others ask if we can gain

84
00:03:34,819 --> 00:03:36,829
efficiency by sacrificing privacy so

85
00:03:36,829 --> 00:03:38,239
that a goblin scheme can achieve

86
00:03:38,239 --> 00:03:40,370
authenticity more efficiently and they

87
00:03:40,370 --> 00:03:42,340
find that we can up to fifty percent

88
00:03:42,340 --> 00:03:47,269
better in concrete cost and the state of

89
00:03:47,269 --> 00:03:48,829
the odd that's the construction bears

90
00:03:48,829 --> 00:03:50,510
are heard in others requires only one

91
00:03:50,510 --> 00:03:53,239
ciphertext but an gate and is optimal in

92
00:03:53,239 --> 00:03:55,220
the linear goblin model for privacy free

93
00:03:55,220 --> 00:03:59,090
and also the current state of the art

94
00:03:59,090 --> 00:04:00,560
for general-purpose garbling that's half

95
00:04:00,560 --> 00:04:03,260
gates is built on top of a privacy free

96
00:04:03,260 --> 00:04:05,030
karbolyn scheme so that's additional

97
00:04:05,030 --> 00:04:06,500
motivation to study the privacy free

98
00:04:06,500 --> 00:04:11,540
setting approach this is the general

99
00:04:11,540 --> 00:04:12,980
this is the view of an evaluator and a

100
00:04:12,980 --> 00:04:14,660
constructor and a general gate cabinet

101
00:04:14,660 --> 00:04:15,500
gate

102
00:04:15,500 --> 00:04:19,399
goblin gadget so the notation is as

103
00:04:19,399 --> 00:04:22,989
follows a gate it has

104
00:04:25,650 --> 00:04:29,470
the gate has two incoming wires or left

105
00:04:29,470 --> 00:04:33,160
and right and an output wire the left

106
00:04:33,160 --> 00:04:35,800
wire has keys l0 l1 corresponding to

107
00:04:35,800 --> 00:04:38,710
semantic values 0 and 1 right the Titan

108
00:04:38,710 --> 00:04:41,290
common wire has r0 r1 corresponding to 0

109
00:04:41,290 --> 00:04:43,120
and 1 and the gate itself as output case

110
00:04:43,120 --> 00:04:47,230
k0 k1 and there are 4 ciphertext each of

111
00:04:47,230 --> 00:04:50,530
which use a unique combination of input

112
00:04:50,530 --> 00:04:54,040
keys to encrypt the output and the

113
00:04:54,040 --> 00:04:56,440
evaluators view ordering evaluation is

114
00:04:56,440 --> 00:04:58,330
essentially one key on each of the input

115
00:04:58,330 --> 00:05:00,610
wires and this allows them to decrypt

116
00:05:00,610 --> 00:05:04,630
any one of the ciphertext anyone any one

117
00:05:04,630 --> 00:05:06,610
ciphertext that connects contains the

118
00:05:06,610 --> 00:05:10,990
correct output key take a closer look at

119
00:05:10,990 --> 00:05:13,240
the evaluators view the general

120
00:05:13,240 --> 00:05:14,890
intuition or rather the intuition in the

121
00:05:14,890 --> 00:05:16,240
general setting is that all the

122
00:05:16,240 --> 00:05:17,770
information available to an evaluator

123
00:05:17,770 --> 00:05:20,560
that is one key to on the left and right

124
00:05:20,560 --> 00:05:22,090
wires should be sufficient to compute

125
00:05:22,090 --> 00:05:24,010
only the correct output key and nothing

126
00:05:24,010 --> 00:05:26,740
else so this also implicitly captures at

127
00:05:26,740 --> 00:05:28,780
the semantics of the keys that the

128
00:05:28,780 --> 00:05:31,330
evaluator has preserved I mean kept

129
00:05:31,330 --> 00:05:36,390
private the privacy free setting we can

130
00:05:36,390 --> 00:05:39,669
specify that the nothing else is

131
00:05:39,669 --> 00:05:41,260
specifically nothing else useful and

132
00:05:41,260 --> 00:05:43,540
forging the opposite key that is we

133
00:05:43,540 --> 00:05:44,770
aren't concerned about protecting the

134
00:05:44,770 --> 00:05:46,930
semantics of the keys that the evaluator

135
00:05:46,930 --> 00:05:50,520
has in fact we use this to our advantage

136
00:05:50,520 --> 00:05:54,160
right so this in a nutshell is our

137
00:05:54,160 --> 00:05:57,040
construction for gobbling a NAND gate

138
00:05:57,040 --> 00:06:00,460
and the privacy free setting so all the

139
00:06:00,460 --> 00:06:06,640
0 keys are the same that is L 0 R 0 and

140
00:06:06,640 --> 00:06:10,330
k 0 was essentially the same value and

141
00:06:10,330 --> 00:06:11,910
we maintain that

142
00:06:11,910 --> 00:06:14,320
k1 is an additive secret sharing

143
00:06:14,320 --> 00:06:15,790
I mean it's additive is you could share

144
00:06:15,790 --> 00:06:18,270
to produce the input 1 keys l1 and r1

145
00:06:18,270 --> 00:06:22,030
right so evaluation is quite

146
00:06:22,030 --> 00:06:23,979
straightforward as an evaluator who has

147
00:06:23,979 --> 00:06:26,260
a zero key can directly copy that inside

148
00:06:26,260 --> 00:06:30,100
it as his output key and in evaluator

149
00:06:30,100 --> 00:06:31,810
who has only one key Zacks awesome in

150
00:06:31,810 --> 00:06:34,350
order to get the output

151
00:06:34,780 --> 00:06:38,930
it's so an interesting thing too an

152
00:06:38,930 --> 00:06:40,280
interesting aspect of this construction

153
00:06:40,280 --> 00:06:41,720
is considered the case where an

154
00:06:41,720 --> 00:06:47,509
evaluator has keys let's say R 0 and R 1

155
00:06:47,509 --> 00:06:50,509
it since L 0 is the same as R 0 the same

156
00:06:50,509 --> 00:06:53,030
as K 0 he now has both keys on the right

157
00:06:53,030 --> 00:06:54,879
wire as their theta was the same as R 0

158
00:06:54,879 --> 00:06:58,250
so this could pose a problem in the

159
00:06:58,250 --> 00:07:00,199
general setting where he has two keys on

160
00:07:00,199 --> 00:07:01,550
the right bio and one key on the left

161
00:07:01,550 --> 00:07:04,819
bio so multiple evaluations and the

162
00:07:04,819 --> 00:07:08,960
general setting are the problem as they

163
00:07:08,960 --> 00:07:12,680
could possibly leak the semantics of the

164
00:07:12,680 --> 00:07:15,830
keys that the evaluator has but in the

165
00:07:15,830 --> 00:07:17,180
privacy free setting it doesn't matter

166
00:07:17,180 --> 00:07:19,330
because like I said semantics are not

167
00:07:19,330 --> 00:07:21,139
semantics of the keys are not something

168
00:07:21,139 --> 00:07:23,719
that we're concerned with protecting so

169
00:07:23,719 --> 00:07:25,159
can we make multiple evaluations

170
00:07:25,159 --> 00:07:28,759
redundant what do I mean by this if you

171
00:07:28,759 --> 00:07:30,229
consider an and gate if one of the

172
00:07:30,229 --> 00:07:31,789
inputs is 0 it doesn't matter what the

173
00:07:31,789 --> 00:07:33,439
other input is as the output is always

174
00:07:33,439 --> 00:07:34,810
going to be 0

175
00:07:34,810 --> 00:07:38,110
so specifically if the evaluator has a

176
00:07:38,110 --> 00:07:42,680
select 0 key that's L 0 or whatever

177
00:07:42,680 --> 00:07:44,240
value he has on the other wire doesn't

178
00:07:44,240 --> 00:07:47,000
matter as evaluating L 0 with R 0 is the

179
00:07:47,000 --> 00:07:48,529
same as evaluating Alethea without one

180
00:07:48,529 --> 00:07:51,620
and this provides the output key case

181
00:07:51,620 --> 00:07:55,430
view so the takeaway is that if the

182
00:07:55,430 --> 00:07:57,560
evaluator has L 0 then we can leak both

183
00:07:57,560 --> 00:08:00,409
our 0 as well as our 1 an equivalently

184
00:08:00,409 --> 00:08:01,879
we can leak L 0 and L 1 when the

185
00:08:01,879 --> 00:08:05,419
evaluator has all 0 and the security

186
00:08:05,419 --> 00:08:07,490
analysis shows that this property has

187
00:08:07,490 --> 00:08:10,129
taken advantage of by our scheme so if

188
00:08:10,129 --> 00:08:11,990
an evaluator is given L 0 by definition

189
00:08:11,990 --> 00:08:15,440
he's missing L 1 so despite the fact

190
00:08:15,440 --> 00:08:17,029
that he's able to derive both right keys

191
00:08:17,029 --> 00:08:19,699
or K 1 which is the opposite output

192
00:08:19,699 --> 00:08:22,699
Keefe stays perfectly hidden equally if

193
00:08:22,699 --> 00:08:24,740
he is given a 0 it doesn't matter what

194
00:08:24,740 --> 00:08:26,180
he has on the left eye or even if he has

195
00:08:26,180 --> 00:08:28,639
both left keys he's missing out 1 and K

196
00:08:28,639 --> 00:08:30,800
1 is perfectly hidden and he has bought

197
00:08:30,800 --> 00:08:32,570
that one as well as R 1 he's missing

198
00:08:32,570 --> 00:08:35,479
both L 0 and R 0 so 0 is perfectly

199
00:08:35,479 --> 00:08:41,390
hidden it's so composition is an issue

200
00:08:41,390 --> 00:08:43,729
because we leak keys on certain input

201
00:08:43,729 --> 00:08:46,459
wires so something when you consider

202
00:08:46,459 --> 00:08:46,940
gate

203
00:08:46,940 --> 00:08:50,300
carefully so what well X all is the same

204
00:08:50,300 --> 00:08:56,870
as 3x or very similar to 3x all so one

205
00:08:56,870 --> 00:08:59,180
of the effects of three of leaking the

206
00:08:59,180 --> 00:09:01,160
input keys is that we can't reuse the

207
00:09:01,160 --> 00:09:03,560
wire keys across different gates so what

208
00:09:03,560 --> 00:09:05,210
this means is that multi fan-out gates

209
00:09:05,210 --> 00:09:08,390
are a problem for our construction so we

210
00:09:08,390 --> 00:09:10,250
can direct however we can prove that

211
00:09:10,250 --> 00:09:12,710
this construction composes to gobble

212
00:09:12,710 --> 00:09:14,840
formulas directly that is circuits where

213
00:09:14,840 --> 00:09:19,220
all gates are fan-out 1 this is because

214
00:09:19,220 --> 00:09:21,110
intuitively the key is only leaked

215
00:09:21,110 --> 00:09:22,610
towards the input wires the keys don't

216
00:09:22,610 --> 00:09:24,920
leak towards the outputs so only if you

217
00:09:24,920 --> 00:09:26,390
evaluated the gate already can you

218
00:09:26,390 --> 00:09:30,650
derive keys on why of the for it right

219
00:09:30,650 --> 00:09:32,780
so let's take a look at - whole gates

220
00:09:32,780 --> 00:09:35,120
which are another class of gates that we

221
00:09:35,120 --> 00:09:38,000
consider a threshold gate essentially

222
00:09:38,000 --> 00:09:43,610
has n inputs and threshold T the

223
00:09:43,610 --> 00:09:46,370
threshold gate outputs 1 if more than T

224
00:09:46,370 --> 00:09:47,990
of the inputs are 1 and output 0

225
00:09:47,990 --> 00:09:52,100
otherwise it's generally interesting to

226
00:09:52,100 --> 00:09:54,350
consider to gobble natively as TC zeros

227
00:09:54,350 --> 00:09:57,710
in a separate complexity class but why

228
00:09:57,710 --> 00:09:59,000
is it interesting and the privacy free

229
00:09:59,000 --> 00:10:01,730
setting as they allow us to express some

230
00:10:01,730 --> 00:10:04,270
statements more naturally in that

231
00:10:04,270 --> 00:10:06,440
application so in zero knowledge for

232
00:10:06,440 --> 00:10:08,810
instance this means that we can prove

233
00:10:08,810 --> 00:10:10,850
statements of the form I have witnesses

234
00:10:10,850 --> 00:10:12,530
for at least a out of these n statements

235
00:10:12,530 --> 00:10:14,240
without revealing exactly which

236
00:10:14,240 --> 00:10:15,530
statements or even how many statements

237
00:10:15,530 --> 00:10:17,270
and in the case of attribute based key

238
00:10:17,270 --> 00:10:19,940
exchange we can implement policies of

239
00:10:19,940 --> 00:10:21,950
the form user attributes may satisfy at

240
00:10:21,950 --> 00:10:23,720
least e out of these n policies more

241
00:10:23,720 --> 00:10:25,670
naturally without revealing exactly

242
00:10:25,670 --> 00:10:31,100
which or how many policies right so they

243
00:10:31,100 --> 00:10:32,330
were first consider to be carbon

244
00:10:32,330 --> 00:10:36,350
natively by wall in others and SEC at 16

245
00:10:36,350 --> 00:10:41,180
work and so let's take a look at the

246
00:10:41,180 --> 00:10:44,780
construction the intuition so the

247
00:10:44,780 --> 00:10:46,520
terminology is as follows if there is n

248
00:10:46,520 --> 00:10:49,730
input wires the IOT wire has keys K 0 K

249
00:10:49,730 --> 00:10:52,520
1 corresponding to semantic 0 and 1 on

250
00:10:52,520 --> 00:10:57,550
on it and the output keys are K 0 K 1

251
00:10:57,590 --> 00:11:03,390
right so it's my sample though the one

252
00:11:03,390 --> 00:11:06,360
key that k1 is P out of n child in order

253
00:11:06,360 --> 00:11:09,030
to produce the input one keys so the ki

254
00:11:09,030 --> 00:11:11,070
ones comprise the TR differentially

255
00:11:11,070 --> 00:11:14,460
sharing of k1 and we also require that

256
00:11:14,460 --> 00:11:16,500
the zero key not be accessible unless

257
00:11:16,500 --> 00:11:18,990
the evaluator doesn't is under the

258
00:11:18,990 --> 00:11:20,730
threshold of the ones that he requires

259
00:11:20,730 --> 00:11:24,480
so the ki zeroes comprise an N minus T

260
00:11:24,480 --> 00:11:28,500
plus one or depend sharing of k0 why do

261
00:11:28,500 --> 00:11:31,590
we do this let's consider a concrete

262
00:11:31,590 --> 00:11:34,590
example where we have n inputs and the

263
00:11:34,590 --> 00:11:36,540
threshold is three sorry nine inputs in

264
00:11:36,540 --> 00:11:40,080
the threshold is 3 so the ki one

265
00:11:40,080 --> 00:11:41,880
comprise the three out of nine sharing

266
00:11:41,880 --> 00:11:44,310
of k1 and the Kaos zeros comply is a

267
00:11:44,310 --> 00:11:48,720
five out of nine sharing of k0 so for

268
00:11:48,720 --> 00:11:50,700
argument's sake consider the case where

269
00:11:50,700 --> 00:11:54,930
an evaluator has four or more ki ones

270
00:11:54,930 --> 00:11:57,750
right so this enables him to deconstruct

271
00:11:57,750 --> 00:12:01,260
k1 quite easily but this also directly

272
00:12:01,260 --> 00:12:03,510
implies that he has five or fewer shares

273
00:12:03,510 --> 00:12:06,090
of k0 and as k zero is five out of nine

274
00:12:06,090 --> 00:12:08,820
shared this means that it's completely

275
00:12:08,820 --> 00:12:10,560
inaccessible to the evaluator and this

276
00:12:10,560 --> 00:12:13,530
captures authenticity equivalently if he

277
00:12:13,530 --> 00:12:16,560
has six or more shares of k0 he that

278
00:12:16,560 --> 00:12:18,180
means that he has three or fewer shares

279
00:12:18,180 --> 00:12:20,790
of k1 which renders k1 completely

280
00:12:20,790 --> 00:12:22,170
inaccessible when he is able to

281
00:12:22,170 --> 00:12:27,060
reconstruct a zero and so the properties

282
00:12:27,060 --> 00:12:29,070
of this construction somewhat similar to

283
00:12:29,070 --> 00:12:31,050
the and gate gobbling that I described

284
00:12:31,050 --> 00:12:35,940
earlier that is it you can clearly see

285
00:12:35,940 --> 00:12:38,510
that both keys on many wires are leaked

286
00:12:38,510 --> 00:12:40,980
after evaluation as monteverde

287
00:12:40,980 --> 00:12:42,210
constructed the curve you essentially

288
00:12:42,210 --> 00:12:45,240
have all the keys for the correct input

289
00:12:45,240 --> 00:12:49,230
and this construction produces no

290
00:12:49,230 --> 00:12:50,790
ciphertext either and it's information

291
00:12:50,790 --> 00:12:53,520
theoretic and achieves adaptive security

292
00:12:53,520 --> 00:12:56,430
for this reason also we can show that

293
00:12:56,430 --> 00:12:58,500
this composes to gobble threshold gates

294
00:12:58,500 --> 00:13:01,700
and that are embedded in formulas and

295
00:13:01,700 --> 00:13:04,920
this can be embedded in circuit assuming

296
00:13:04,920 --> 00:13:06,810
aluminum is symmetric key assumptions

297
00:13:06,810 --> 00:13:11,040
and choosing curves for the

298
00:13:11,040 --> 00:13:12,750
Shammi sharing that required children

299
00:13:12,750 --> 00:13:15,810
annually kind of enables a garbled row

300
00:13:15,810 --> 00:13:19,199
reduction that lets us gobble threshold

301
00:13:19,199 --> 00:13:20,579
gates that are embedded in boolean

302
00:13:20,579 --> 00:13:25,040
circuits with only n plus 1 ciphertext

303
00:13:25,699 --> 00:13:29,819
if some closing remarks so generally

304
00:13:29,819 --> 00:13:31,470
what do we do here we have a better

305
00:13:31,470 --> 00:13:33,329
understanding of privacy free gobbling

306
00:13:33,329 --> 00:13:38,550
know which and n threshold gate gobbling

307
00:13:38,550 --> 00:13:42,170
schemes and also the fact that all our

308
00:13:42,170 --> 00:13:44,250
gobbling scheme uses only linear

309
00:13:44,250 --> 00:13:45,720
operations as its information theoretic

310
00:13:45,720 --> 00:13:49,709
and doesn't have it blow up in key size

311
00:13:49,709 --> 00:13:53,339
and despite this it fits into it fits

312
00:13:53,339 --> 00:13:54,750
quite better the model of the hood and

313
00:13:54,750 --> 00:13:56,610
others and still overcomes is there one

314
00:13:56,610 --> 00:13:58,019
ciphertext lower bound for the privacy

315
00:13:58,019 --> 00:14:00,180
free setting we discussed this in more

316
00:14:00,180 --> 00:14:04,079
detail than the paper we have you know

317
00:14:04,079 --> 00:14:05,399
how efficient privacy free threshold

318
00:14:05,399 --> 00:14:07,139
Gate gobbling for there should be eight

319
00:14:07,139 --> 00:14:10,500
samples in circuits and we have more

320
00:14:10,500 --> 00:14:12,240
extensions of this scheme and a more

321
00:14:12,240 --> 00:14:13,649
detailed discussion on the lower bound

322
00:14:13,649 --> 00:14:15,750
in our paper which I encourage you to

323
00:14:15,750 --> 00:14:21,000
read some open problems that directly

324
00:14:21,000 --> 00:14:24,660
follows from this work can we build on

325
00:14:24,660 --> 00:14:26,339
the privacy free construction for

326
00:14:26,339 --> 00:14:28,290
employed gobbling and other settings so

327
00:14:28,290 --> 00:14:30,360
for instance privacy free gobbling for

328
00:14:30,360 --> 00:14:32,910
circuits somehow is by by this scheme or

329
00:14:32,910 --> 00:14:35,389
perhaps improved goblin for formulas in

330
00:14:35,389 --> 00:14:39,660
the privacy in the private setting right

331
00:14:39,660 --> 00:14:43,110
and based on how we got around the bound

332
00:14:43,110 --> 00:14:46,110
in the privacy free setting any lessons

333
00:14:46,110 --> 00:14:47,519
to challenge the lower bound for the

334
00:14:47,519 --> 00:14:50,010
general setting for carving schemes it

335
00:14:50,010 --> 00:14:51,180
would be interesting to see if we could

336
00:14:51,180 --> 00:14:53,959
derive from this work

337
00:14:56,610 --> 00:15:02,960
[Applause]

