1
00:00:05,000 --> 00:00:06,779
thank you very much for that

2
00:00:06,779 --> 00:00:08,700
introduction thanks everybody for

3
00:00:08,700 --> 00:00:11,760
sticking around and I know we all want

4
00:00:11,760 --> 00:00:15,690
to eat food at the beach so as the title

5
00:00:15,690 --> 00:00:17,340
suggests I'm gonna talk about a very

6
00:00:17,340 --> 00:00:20,759
practical problem related to public key

7
00:00:20,759 --> 00:00:24,359
encryption today so syntactically we

8
00:00:24,359 --> 00:00:26,699
think of public key encryption as taking

9
00:00:26,699 --> 00:00:29,599
in a message and a public key and

10
00:00:29,599 --> 00:00:32,210
randomly outputting a ciphertext in

11
00:00:32,210 --> 00:00:36,720
practice applications make use of pke by

12
00:00:36,720 --> 00:00:40,320
invoking a library such as open SSL now

13
00:00:40,320 --> 00:00:42,030
it's convenient to assume that the

14
00:00:42,030 --> 00:00:43,860
library has access to a source of

15
00:00:43,860 --> 00:00:46,440
uniform random coins but and in fact

16
00:00:46,440 --> 00:00:48,960
this assumption of uniformity underpins

17
00:00:48,960 --> 00:00:51,239
our traditional notions of security such

18
00:00:51,239 --> 00:00:55,049
as a and D CPA but as we all know in

19
00:00:55,049 --> 00:00:57,210
reality these coins are produced by some

20
00:00:57,210 --> 00:01:00,089
real system which ultimately gathers

21
00:01:00,089 --> 00:01:01,949
entropy from its environment in order to

22
00:01:01,949 --> 00:01:05,610
produce them and as we all know again

23
00:01:05,610 --> 00:01:08,040
this complex process often fails and

24
00:01:08,040 --> 00:01:09,750
practice to produce coins of sufficient

25
00:01:09,750 --> 00:01:13,680
quality the causes are many it might be

26
00:01:13,680 --> 00:01:15,150
as simple as commenting out the wrong

27
00:01:15,150 --> 00:01:17,520
line of code there could be simply no

28
00:01:17,520 --> 00:01:19,410
not enough entropy available in the

29
00:01:19,410 --> 00:01:21,750
system's environment or it could be as

30
00:01:21,750 --> 00:01:23,700
malicious as a back door being built

31
00:01:23,700 --> 00:01:27,630
into the design of the RNG itself so how

32
00:01:27,630 --> 00:01:29,910
can we hope to cope with such a variety

33
00:01:29,910 --> 00:01:32,640
of randomness failures the aim of hedge

34
00:01:32,640 --> 00:01:35,100
cryptography is to design primitives and

35
00:01:35,100 --> 00:01:37,380
protocols that fail gracefully and by

36
00:01:37,380 --> 00:01:39,180
this I mean they achieve the usual

37
00:01:39,180 --> 00:01:40,680
notion of security when randomness is

38
00:01:40,680 --> 00:01:43,470
good but achieve some weaker yet still

39
00:01:43,470 --> 00:01:46,159
meaningful notion when randomness is bad

40
00:01:46,159 --> 00:01:48,600
so a third seminal in their seminal

41
00:01:48,600 --> 00:01:52,590
paper at Asia 2009 along with inventing

42
00:01:52,590 --> 00:01:55,740
the field kind of Volare all proposed a

43
00:01:55,740 --> 00:01:57,479
nice solution for hedged public key

44
00:01:57,479 --> 00:02:00,150
encryption their idea is to synthesize

45
00:02:00,150 --> 00:02:03,180
fresh coins for encryption by using the

46
00:02:03,180 --> 00:02:04,799
randomness provided by the system as

47
00:02:04,799 --> 00:02:06,930
well as any entropy contained in the

48
00:02:06,930 --> 00:02:09,419
message being encrypted to do this we

49
00:02:09,419 --> 00:02:10,979
just hashed together the public key

50
00:02:10,979 --> 00:02:13,380
message and randomness and use the

51
00:02:13,380 --> 00:02:15,390
output as the source of randomness for

52
00:02:15,390 --> 00:02:18,360
any standard pke scheme so in the random

53
00:02:18,360 --> 00:02:18,660
work

54
00:02:18,660 --> 00:02:20,790
model unless the adversary is able to

55
00:02:20,790 --> 00:02:22,760
guess both the message and randomness

56
00:02:22,760 --> 00:02:25,200
the synthesized coins can be treated as

57
00:02:25,200 --> 00:02:28,710
uniform this trick which in this talk

58
00:02:28,710 --> 00:02:31,140
I'll call encrypt with hash has been

59
00:02:31,140 --> 00:02:32,810
adapted to a wide variety of settings

60
00:02:32,810 --> 00:02:35,220
there are a number of papers that deal

61
00:02:35,220 --> 00:02:36,660
with encryption in the presence of

62
00:02:36,660 --> 00:02:39,210
imperfect randomness and in many of

63
00:02:39,210 --> 00:02:42,420
these some instantiation of this trick

64
00:02:42,420 --> 00:02:46,230
is proposed as a defense it's also used

65
00:02:46,230 --> 00:02:47,670
in the context of deterministic

66
00:02:47,670 --> 00:02:49,800
encryption where no randomness is used

67
00:02:49,800 --> 00:02:51,630
at all and we rely just on the entropy

68
00:02:51,630 --> 00:02:54,720
in the message in fact the idea of

69
00:02:54,720 --> 00:02:56,790
synthesizing coins for encryption was

70
00:02:56,790 --> 00:02:59,490
used at least as early as 1999 by

71
00:02:59,490 --> 00:03:02,130
Fujisaki and Okamoto who used it as part

72
00:03:02,130 --> 00:03:05,030
of a transform from CPA to CCA security

73
00:03:05,030 --> 00:03:07,440
so as you can see there's been a lot of

74
00:03:07,440 --> 00:03:10,620
theoretical interest in this idea it's

75
00:03:10,620 --> 00:03:12,600
explicitly designed for practice

76
00:03:12,600 --> 00:03:14,970
it seems like it's a cheap and practical

77
00:03:14,970 --> 00:03:18,060
way to harden deployed crypto because of

78
00:03:18,060 --> 00:03:19,410
course it works with any encryption

79
00:03:19,410 --> 00:03:21,120
scheme and you should be able to

80
00:03:21,120 --> 00:03:22,980
implement it without making any code

81
00:03:22,980 --> 00:03:26,580
changes so the conceptual starting point

82
00:03:26,580 --> 00:03:28,290
for our work is a very simple question

83
00:03:28,290 --> 00:03:31,080
just how easy is it to implement encrypt

84
00:03:31,080 --> 00:03:34,530
with hash with real libraries so to

85
00:03:34,530 --> 00:03:36,300
start we looked at open asset at open

86
00:03:36,300 --> 00:03:38,880
SSL perhaps the most widely deployed

87
00:03:38,880 --> 00:03:43,350
crypto library in use today so at its

88
00:03:43,350 --> 00:03:45,540
highest level open SSL provides an

89
00:03:45,540 --> 00:03:46,880
abstraction for public key encryption

90
00:03:46,880 --> 00:03:50,940
sometimes called secure envelopes the

91
00:03:50,940 --> 00:03:52,770
first inputs of this function is the

92
00:03:52,770 --> 00:03:55,020
encryption context which specifies the

93
00:03:55,020 --> 00:04:00,000
public key and out algorithm open SSL

94
00:04:00,000 --> 00:04:01,440
facilitates key generation and

95
00:04:01,440 --> 00:04:03,120
management and it's possible to

96
00:04:03,120 --> 00:04:04,920
instantiate this context properly

97
00:04:04,920 --> 00:04:06,300
without knowing much about the

98
00:04:06,300 --> 00:04:09,000
underlying crypto and this is great news

99
00:04:09,000 --> 00:04:10,910
from a usability perspective

100
00:04:10,910 --> 00:04:13,380
conventional wisdom in API design is

101
00:04:13,380 --> 00:04:15,510
that the programmer should have to make

102
00:04:15,510 --> 00:04:17,880
as few security choices as possible and

103
00:04:17,880 --> 00:04:20,220
it seems like we see this principle at

104
00:04:20,220 --> 00:04:24,060
work here but in short the encryption

105
00:04:24,060 --> 00:04:25,650
context lets the programmer specify the

106
00:04:25,650 --> 00:04:27,990
public key the remaining arguments

107
00:04:27,990 --> 00:04:30,419
specify a buffer for the ciphertext and

108
00:04:30,419 --> 00:04:33,060
the plaintext notice that

109
00:04:33,060 --> 00:04:35,250
we're in this interface is there a place

110
00:04:35,250 --> 00:04:38,220
for the programmer to specify the random

111
00:04:38,220 --> 00:04:42,000
points and this is likely intentional on

112
00:04:42,000 --> 00:04:44,160
the part of the API designers crucially

113
00:04:44,160 --> 00:04:46,650
it's harder to misuse this API in

114
00:04:46,650 --> 00:04:49,140
particular by inadvertently providing a

115
00:04:49,140 --> 00:04:51,690
weak entropy source but this design

116
00:04:51,690 --> 00:04:53,460
choice also means that we can't

117
00:04:53,460 --> 00:04:55,680
implement encrypt with hash at least at

118
00:04:55,680 --> 00:04:58,860
least at this API level okay

119
00:04:58,860 --> 00:05:00,860
but if you know what you're doing the

120
00:05:00,860 --> 00:05:02,790
libraries should provide a little more

121
00:05:02,790 --> 00:05:05,220
flexibility so let's go a level deeper

122
00:05:05,220 --> 00:05:07,110
and look at openness a sales interface

123
00:05:07,110 --> 00:05:11,610
for RSA based encryption as usual the

124
00:05:11,610 --> 00:05:13,530
the programmer provides a buffer for the

125
00:05:13,530 --> 00:05:16,170
plaintext and ciphertext and public key

126
00:05:16,170 --> 00:05:19,290
in addition this interface requires the

127
00:05:19,290 --> 00:05:21,140
programmer to specify the padding scheme

128
00:05:21,140 --> 00:05:24,240
so OpenSSL implements a few standards

129
00:05:24,240 --> 00:05:26,370
and it even lets the programmer use no

130
00:05:26,370 --> 00:05:28,500
padding at all which means you can

131
00:05:28,500 --> 00:05:30,690
implement raw RSA or handle padding

132
00:05:30,690 --> 00:05:33,690
yourself so this is this interface gives

133
00:05:33,690 --> 00:05:35,370
you just about all the flexibility you

134
00:05:35,370 --> 00:05:38,070
need for RSA except that it still

135
00:05:38,070 --> 00:05:39,590
doesn't expose the coins

136
00:05:39,590 --> 00:05:42,840
so the high and mid-level api's don't

137
00:05:42,840 --> 00:05:45,300
let us implement encrypt with hash but

138
00:05:45,300 --> 00:05:47,640
let's not give up quite yet as we all

139
00:05:47,640 --> 00:05:49,500
know hacking open ssl makes for

140
00:05:49,500 --> 00:05:51,570
excellent headlines so let's dig a

141
00:05:51,570 --> 00:05:53,340
little deeper into the code and see what

142
00:05:53,340 --> 00:05:56,670
we can do the first question is where

143
00:05:56,670 --> 00:05:59,730
the coins coming from so here we have a

144
00:05:59,730 --> 00:06:03,390
little code snippet of RSA oep it will

145
00:06:03,390 --> 00:06:06,870
be implementation in open ssl the

146
00:06:06,870 --> 00:06:08,640
function that implements the padding

147
00:06:08,640 --> 00:06:11,010
takes as input the message as well as

148
00:06:11,010 --> 00:06:12,810
some other stuff we can ignore for this

149
00:06:12,810 --> 00:06:15,380
talk and outputs the padded message

150
00:06:15,380 --> 00:06:17,880
this in turn invokes a function called

151
00:06:17,880 --> 00:06:19,680
Rand bytes which fetches the required

152
00:06:19,680 --> 00:06:21,750
number of bytes from open SSL czar and G

153
00:06:21,750 --> 00:06:25,320
so it's down at this level this lowest

154
00:06:25,320 --> 00:06:27,270
level that is the first chance you have

155
00:06:27,270 --> 00:06:31,560
to touch the coins so let me restate the

156
00:06:31,560 --> 00:06:33,930
question how do i implement in creating

157
00:06:33,930 --> 00:06:36,480
crypt with hash and open ssl let's have

158
00:06:36,480 --> 00:06:39,180
a look at the options if you're an

159
00:06:39,180 --> 00:06:41,070
openness SL maintainer the most direct

160
00:06:41,070 --> 00:06:42,480
approach would be to modify the

161
00:06:42,480 --> 00:06:45,300
implementation so for example you can

162
00:06:45,300 --> 00:06:46,889
modify OAP code

163
00:06:46,889 --> 00:06:49,020
correctly so that the public key message

164
00:06:49,020 --> 00:06:50,789
and output of ran bytes are hashed

165
00:06:50,789 --> 00:06:53,240
together and the output is used as the

166
00:06:53,240 --> 00:06:56,340
seed for the padding and this would of

167
00:06:56,340 --> 00:06:57,710
course be pretty straightforward to do

168
00:06:57,710 --> 00:07:00,479
however these modifications mean that

169
00:07:00,479 --> 00:07:03,270
your implementation of our sao AEP no

170
00:07:03,270 --> 00:07:05,159
longer complies to the RFC that

171
00:07:05,159 --> 00:07:08,340
standardizes it so from a compliance

172
00:07:08,340 --> 00:07:09,930
standpoint this solution is a

173
00:07:09,930 --> 00:07:13,319
non-starter another approach which

174
00:07:13,319 --> 00:07:15,449
requires no code changes at all would be

175
00:07:15,449 --> 00:07:17,520
to manipulate the output of the RNG and

176
00:07:17,520 --> 00:07:20,490
so how can we do this is this even

177
00:07:20,490 --> 00:07:23,729
possible so open SSL allows the

178
00:07:23,729 --> 00:07:26,099
application to provide entropy for the

179
00:07:26,099 --> 00:07:29,699
RNG and the same interface might be used

180
00:07:29,699 --> 00:07:32,819
at least in principle to implement

181
00:07:32,819 --> 00:07:36,240
encrypt with hash but there are a number

182
00:07:36,240 --> 00:07:38,159
of technical hurdles to overcome here

183
00:07:38,159 --> 00:07:40,169
not the least of which is that it simply

184
00:07:40,169 --> 00:07:42,810
doesn't work in general one reason is

185
00:07:42,810 --> 00:07:44,520
that open SSL lets the programmer

186
00:07:44,520 --> 00:07:47,669
specify specify a hard word based rng

187
00:07:47,669 --> 00:07:50,219
that uses the same interface but for

188
00:07:50,219 --> 00:07:51,270
obvious reasons

189
00:07:51,270 --> 00:07:53,279
hardware RMG's don't let you modify

190
00:07:53,279 --> 00:07:55,770
their internal state so there's no way

191
00:07:55,770 --> 00:07:57,089
to make this work with this

192
00:07:57,089 --> 00:08:00,389
configuration from a software

193
00:08:00,389 --> 00:08:02,250
engineering perspective I think the best

194
00:08:02,250 --> 00:08:04,589
option is to build your own R and G for

195
00:08:04,589 --> 00:08:06,960
open SSL that explicitly supports the

196
00:08:06,960 --> 00:08:09,569
implementation of encrypt with hash this

197
00:08:09,569 --> 00:08:10,770
isn't such a bad idea

198
00:08:10,770 --> 00:08:13,020
but it does it doesn't mean you're gonna

199
00:08:13,020 --> 00:08:14,819
have to contribute a fair bit of code to

200
00:08:14,819 --> 00:08:17,399
the library but for those of us who'd

201
00:08:17,399 --> 00:08:19,529
rather not have to touch the code there

202
00:08:19,529 --> 00:08:23,490
are no viable options the punchline to

203
00:08:23,490 --> 00:08:25,169
this story is that encrypt with hash

204
00:08:25,169 --> 00:08:27,449
while really nice in theory is not as

205
00:08:27,449 --> 00:08:31,289
easy as it would seem to implement so

206
00:08:31,289 --> 00:08:33,328
you might be asking yourself if the

207
00:08:33,328 --> 00:08:35,339
problem is the API then why not just

208
00:08:35,339 --> 00:08:38,969
change the API well first and foremost

209
00:08:38,969 --> 00:08:41,099
if a change is made to the interface

210
00:08:41,099 --> 00:08:43,289
then this means that every application

211
00:08:43,289 --> 00:08:45,240
that uses that interface needs to be

212
00:08:45,240 --> 00:08:47,880
modified as well and it's for this

213
00:08:47,880 --> 00:08:50,010
reason that a library is heavily used as

214
00:08:50,010 --> 00:08:52,260
open SSL needs to have a very stable

215
00:08:52,260 --> 00:08:55,769
interface and the planners need the

216
00:08:55,769 --> 00:08:57,510
designers need to be planned for it to

217
00:08:57,510 --> 00:08:59,720
be around for a very long time

218
00:08:59,720 --> 00:09:03,000
the fact is that API design is hard work

219
00:09:03,000 --> 00:09:05,130
it's a complex trade-off between making

220
00:09:05,130 --> 00:09:07,230
the library easy to use and easy to

221
00:09:07,230 --> 00:09:09,570
extend and there are just no easy

222
00:09:09,570 --> 00:09:11,399
answers to the question of how much

223
00:09:11,399 --> 00:09:14,970
exposure to get to the programmer we

224
00:09:14,970 --> 00:09:16,860
looked at a number of libraries some

225
00:09:16,860 --> 00:09:19,199
widely used and others less so and found

226
00:09:19,199 --> 00:09:21,690
that about half of them expose the R&G

227
00:09:21,690 --> 00:09:23,810
to the programmer in a way that directly

228
00:09:23,810 --> 00:09:26,850
facilitates encrypt with hash this

229
00:09:26,850 --> 00:09:28,610
finding highlights this tension between

230
00:09:28,610 --> 00:09:31,820
usability and flexibility and API design

231
00:09:31,820 --> 00:09:34,589
but I'd like to emphasize that none of

232
00:09:34,589 --> 00:09:36,329
the libraries on the left side of this

233
00:09:36,329 --> 00:09:40,519
table are used as widely as open SSL

234
00:09:40,519 --> 00:09:43,260
it's also worth noting that encrypt with

235
00:09:43,260 --> 00:09:46,170
hash is not the only way to hedge pke so

236
00:09:46,170 --> 00:09:48,389
for example bellari at all proposed a

237
00:09:48,389 --> 00:09:50,220
couple solutions that involve

238
00:09:50,220 --> 00:09:52,410
deterministic encryption but such

239
00:09:52,410 --> 00:09:54,540
schemes are not implemented in common

240
00:09:54,540 --> 00:09:56,970
libraries and you can't use them at

241
00:09:56,970 --> 00:09:59,899
least not without touching the coins

242
00:09:59,899 --> 00:10:02,730
okay so these observations led us to

243
00:10:02,730 --> 00:10:05,220
revisit the theory of hedge pke and see

244
00:10:05,220 --> 00:10:06,570
if we couldn't nudge it a little closer

245
00:10:06,570 --> 00:10:09,360
to practice and doing so we're guided by

246
00:10:09,360 --> 00:10:12,750
two basic questions the first is what

247
00:10:12,750 --> 00:10:14,430
simple and efficient schemes can we

248
00:10:14,430 --> 00:10:16,980
implement using api is exported by

249
00:10:16,980 --> 00:10:19,740
common libraries and second what are the

250
00:10:19,740 --> 00:10:21,810
strongest security notions we can hope

251
00:10:21,810 --> 00:10:25,380
to achieve with these schemes towards

252
00:10:25,380 --> 00:10:26,850
addressing the second question we took

253
00:10:26,850 --> 00:10:28,680
as our starting point the security

254
00:10:28,680 --> 00:10:30,899
notion of bellari at all which they call

255
00:10:30,899 --> 00:10:32,600
indistinguishability

256
00:10:32,600 --> 00:10:34,740
indistinguishability under chosen

257
00:10:34,740 --> 00:10:37,860
distribution attacks we're gonna rename

258
00:10:37,860 --> 00:10:40,620
this to MMR CPA for reasons that will be

259
00:10:40,620 --> 00:10:42,980
apparent in a little while

260
00:10:42,980 --> 00:10:45,480
but first in order to understand their

261
00:10:45,480 --> 00:10:47,370
notion it's helpful to begin with the

262
00:10:47,370 --> 00:10:50,360
usual chosen plaintext attacks setting

263
00:10:50,360 --> 00:10:53,730
so in the ind CPA game we give the

264
00:10:53,730 --> 00:10:55,800
adversary an encryption oracle of which

265
00:10:55,800 --> 00:10:57,959
it asks pairs of messages it gets in

266
00:10:57,959 --> 00:10:59,519
response an encryption of one of these

267
00:10:59,519 --> 00:11:01,620
which one gets encrypted depends on the

268
00:11:01,620 --> 00:11:03,540
outcome of a coin flip made at the

269
00:11:03,540 --> 00:11:06,240
beginning of the game since we're

270
00:11:06,240 --> 00:11:08,040
interested in randomness failures will

271
00:11:08,040 --> 00:11:10,199
explicitly define the algorithm that

272
00:11:10,199 --> 00:11:12,810
produced the coins let's call it our

273
00:11:12,810 --> 00:11:15,750
now in the IND CPA setting we assume the

274
00:11:15,750 --> 00:11:19,110
output of R is uniform but what happens

275
00:11:19,110 --> 00:11:21,210
when this assumption fails in the worst

276
00:11:21,210 --> 00:11:23,400
case the adversary may simply be able to

277
00:11:23,400 --> 00:11:25,410
guess the coins then no encryption

278
00:11:25,410 --> 00:11:27,480
scheme provides security under chosen

279
00:11:27,480 --> 00:11:30,540
plaintext attack the key insight of

280
00:11:30,540 --> 00:11:32,250
bellari at all is that if the message

281
00:11:32,250 --> 00:11:34,290
has sufficient entropy then we can

282
00:11:34,290 --> 00:11:37,140
leverage this fact for security so in a

283
00:11:37,140 --> 00:11:39,780
chosen distribution attack the adversary

284
00:11:39,780 --> 00:11:41,730
specifies a distribution on message

285
00:11:41,730 --> 00:11:45,390
pairs in fact the notion is a little bit

286
00:11:45,390 --> 00:11:47,930
stronger than this we actually allow the

287
00:11:47,930 --> 00:11:49,920
messages and coins to be jointly

288
00:11:49,920 --> 00:11:53,130
distributed to model this we have the

289
00:11:53,130 --> 00:11:55,170
adversary specify a randomized algorithm

290
00:11:55,170 --> 00:11:58,530
called an MMR well it called an MMR

291
00:11:58,530 --> 00:12:00,360
source that outputs a message a message

292
00:12:00,360 --> 00:12:03,840
and some randomness the Oracle executes

293
00:12:03,840 --> 00:12:05,490
this algorithm encrypts one of the

294
00:12:05,490 --> 00:12:07,530
messages with the coins and returns the

295
00:12:07,530 --> 00:12:11,100
output so this notion already captures

296
00:12:11,100 --> 00:12:13,440
our intuition of what can we can achieve

297
00:12:13,440 --> 00:12:17,250
when randomness fails however there's a

298
00:12:17,250 --> 00:12:19,320
problem it turns out that we can't

299
00:12:19,320 --> 00:12:21,030
provide security for distributions that

300
00:12:21,030 --> 00:12:23,430
depend on the public key given the

301
00:12:23,430 --> 00:12:25,200
public key it's possible for the

302
00:12:25,200 --> 00:12:27,990
adversary to craft an MMR source such

303
00:12:27,990 --> 00:12:29,880
that the ciphertext leaks the message

304
00:12:29,880 --> 00:12:33,540
the challenge bit in just one query so

305
00:12:33,540 --> 00:12:35,790
to ameliorate this problem we withhold

306
00:12:35,790 --> 00:12:37,650
the public key from the adversary until

307
00:12:37,650 --> 00:12:40,770
after it finishes its queries so now the

308
00:12:40,770 --> 00:12:42,720
adversary runs in two stages in the

309
00:12:42,720 --> 00:12:44,970
first it makes its queries and in the

310
00:12:44,970 --> 00:12:47,370
second it's given the public key and it

311
00:12:47,370 --> 00:12:51,300
outputs its guess finally we can further

312
00:12:51,300 --> 00:12:52,950
strengthen the notion by modeling

313
00:12:52,950 --> 00:12:54,990
messages and coins jointly distributed

314
00:12:54,990 --> 00:12:58,590
acara across encryption calls we do this

315
00:12:58,590 --> 00:13:00,720
by having the MMR source output vectors

316
00:13:00,720 --> 00:13:04,620
of plaintext and coins and with that we

317
00:13:04,620 --> 00:13:08,630
have the security notion of bellari all

318
00:13:08,630 --> 00:13:12,210
to summarize in the ind CPA setting the

319
00:13:12,210 --> 00:13:14,100
adversary chooses the messages and the

320
00:13:14,100 --> 00:13:15,960
coins are chosen uniformly by the Oracle

321
00:13:15,960 --> 00:13:18,990
in the MMR CPA setting the adversary

322
00:13:18,990 --> 00:13:21,060
specifies a distribution on messages and

323
00:13:21,060 --> 00:13:23,280
coins which is required to have Hyman

324
00:13:23,280 --> 00:13:26,670
entropy we say that a PKA scheme is

325
00:13:26,670 --> 00:13:28,740
is hedge secure if it achieves both of

326
00:13:28,740 --> 00:13:31,200
these notions simultaneously okay so

327
00:13:31,200 --> 00:13:34,830
this is our starting point the first way

328
00:13:34,830 --> 00:13:37,110
we exchange this model is in a small

329
00:13:37,110 --> 00:13:40,110
syntactic way in our paper we decided to

330
00:13:40,110 --> 00:13:42,660
look at labeled encryption or sender and

331
00:13:42,660 --> 00:13:44,880
receiver share some data associated to

332
00:13:44,880 --> 00:13:47,640
the plaintext this idea goes back to a

333
00:13:47,640 --> 00:13:50,000
classical paper by Victor Xu it's also

334
00:13:50,000 --> 00:13:51,840
important in practice

335
00:13:51,840 --> 00:13:54,030
while some schemes implemented in real

336
00:13:54,030 --> 00:13:58,050
libraries actually use labels but more

337
00:13:58,050 --> 00:14:00,180
significantly we strengthened the notion

338
00:14:00,180 --> 00:14:01,560
by incorporating chosen ciphertext

339
00:14:01,560 --> 00:14:04,260
attacks to do this we provide the

340
00:14:04,260 --> 00:14:06,180
adversary with a decryption Oracle in

341
00:14:06,180 --> 00:14:10,200
both its query and guessing stages we

342
00:14:10,200 --> 00:14:13,050
show that MMRC CA is achievable with

343
00:14:13,050 --> 00:14:16,040
primitives exported by high-level api's

344
00:14:16,040 --> 00:14:18,900
what we propose is a hybrid encryption

345
00:14:18,900 --> 00:14:21,360
scheme based on a trapdoor permutation

346
00:14:21,360 --> 00:14:23,910
hash functions which we model as random

347
00:14:23,910 --> 00:14:25,670
Oracle's in the security analysis and

348
00:14:25,670 --> 00:14:28,080
symmetric authenticated encryption with

349
00:14:28,080 --> 00:14:30,510
associated data commonly abbreviated to

350
00:14:30,510 --> 00:14:33,960
a EAD the construction itself is

351
00:14:33,960 --> 00:14:35,820
relatively straightforward but I'd like

352
00:14:35,820 --> 00:14:40,110
to point out one interesting detail the

353
00:14:40,110 --> 00:14:42,090
public key is not just the description

354
00:14:42,090 --> 00:14:45,300
of the trapdoor F it also includes a

355
00:14:45,300 --> 00:14:47,610
short uniform random string called a

356
00:14:47,610 --> 00:14:50,940
randomizer the randomizer is part of a

357
00:14:50,940 --> 00:14:52,710
technical trick that simplifies the

358
00:14:52,710 --> 00:14:54,930
proof of security and it allows us to

359
00:14:54,930 --> 00:14:56,490
make no assumptions about the trapdoor

360
00:14:56,490 --> 00:15:00,570
permutation beyond one-wayness it's

361
00:15:00,570 --> 00:15:02,580
actually borrowed from bellari at all

362
00:15:02,580 --> 00:15:04,920
and is widely used in the hedge pke

363
00:15:04,920 --> 00:15:08,850
literature a practical implication is

364
00:15:08,850 --> 00:15:11,040
that if you have a certificate for the

365
00:15:11,040 --> 00:15:13,470
trapdoor F like an RSA public key for

366
00:15:13,470 --> 00:15:15,720
example adding the randomizer to the

367
00:15:15,720 --> 00:15:17,040
public key means that you have to

368
00:15:17,040 --> 00:15:21,210
reissue a certificate this can be

369
00:15:21,210 --> 00:15:23,340
somewhat problematic in practice but

370
00:15:23,340 --> 00:15:25,620
otherwise implementing this scheme is a

371
00:15:25,620 --> 00:15:27,390
straightforward matter of piecing

372
00:15:27,390 --> 00:15:30,570
together high level API calls there are

373
00:15:30,570 --> 00:15:32,850
some technical details to attend to but

374
00:15:32,850 --> 00:15:34,440
someone with a moderate amount of crypto

375
00:15:34,440 --> 00:15:36,570
expertise would be able to implement

376
00:15:36,570 --> 00:15:39,990
this correctly but if you don't want to

377
00:15:39,990 --> 00:15:40,380
read

378
00:15:40,380 --> 00:15:42,150
two certificates and you don't want to

379
00:15:42,150 --> 00:15:44,760
have to cobble together API calls you're

380
00:15:44,760 --> 00:15:47,640
stuck fully implemented pke schemes

381
00:15:47,640 --> 00:15:49,680
exported by libraries simply don't

382
00:15:49,680 --> 00:15:54,000
achieve this strong NMR notion this led

383
00:15:54,000 --> 00:15:57,360
us to rethink the NMR setting the model

384
00:15:57,360 --> 00:15:59,760
allows for adversaries that adaptively

385
00:15:59,760 --> 00:16:01,710
corrupt the randomness source and prior

386
00:16:01,710 --> 00:16:04,200
to every encryption call so in practice

387
00:16:04,200 --> 00:16:06,690
and in the worst case this attack

388
00:16:06,690 --> 00:16:08,910
amounts to changing the behavior of the

389
00:16:08,910 --> 00:16:12,080
system RNG prior to every invocation of

390
00:16:12,080 --> 00:16:15,510
the encryption algorithm we think this

391
00:16:15,510 --> 00:16:17,910
model is overly conservative at least

392
00:16:17,910 --> 00:16:20,190
with respect to known attacks and

393
00:16:20,190 --> 00:16:21,240
randomness failures

394
00:16:21,240 --> 00:16:23,430
I'll remind you that the high-profile

395
00:16:23,430 --> 00:16:25,050
failures I alluded to at the beginning

396
00:16:25,050 --> 00:16:27,930
all involved one time corruption of the

397
00:16:27,930 --> 00:16:31,770
RNG this observation led us to consider

398
00:16:31,770 --> 00:16:34,350
a weaker attack in which the coins are

399
00:16:34,350 --> 00:16:36,750
corrupted once prior to the adversaries

400
00:16:36,750 --> 00:16:39,450
attack instead of specifying an MMR

401
00:16:39,450 --> 00:16:42,030
source the adversary specifies an mm

402
00:16:42,030 --> 00:16:43,920
source which outputs vectors and

403
00:16:43,920 --> 00:16:47,610
messages the vector of coins is output

404
00:16:47,610 --> 00:16:49,800
by a randomness source which parameter

405
00:16:49,800 --> 00:16:52,710
eise's the security experiment thus in

406
00:16:52,710 --> 00:16:56,580
the MM CCA game the the coins and

407
00:16:56,580 --> 00:16:59,790
messages are independent this fact

408
00:16:59,790 --> 00:17:01,650
allows us to give the adversary the

409
00:17:01,650 --> 00:17:04,560
public key at the outset this is

410
00:17:04,560 --> 00:17:06,720
achievable if the randomness source has

411
00:17:06,720 --> 00:17:08,970
enough entropy so that the adversary

412
00:17:08,970 --> 00:17:11,520
can't just guess the coins but this

413
00:17:11,520 --> 00:17:13,400
change is useful for a couple reasons

414
00:17:13,400 --> 00:17:17,250
first it's intuitively nice because the

415
00:17:17,250 --> 00:17:18,750
attacker does know the public key in

416
00:17:18,750 --> 00:17:20,790
real life whether or not its attack

417
00:17:20,790 --> 00:17:23,280
explicitly depends on it from a

418
00:17:23,280 --> 00:17:25,589
theoretical perspective it immediately

419
00:17:25,589 --> 00:17:27,750
allows for adaptive security which is

420
00:17:27,750 --> 00:17:29,850
only achievable in the MMR setting if

421
00:17:29,850 --> 00:17:31,680
the scheme has in it admits an

422
00:17:31,680 --> 00:17:33,810
additional security property beyond

423
00:17:33,810 --> 00:17:36,330
message privacy but I'm not going to get

424
00:17:36,330 --> 00:17:37,740
into this I'll just refer you to the

425
00:17:37,740 --> 00:17:42,000
paper for the details we're able to show

426
00:17:42,000 --> 00:17:43,980
in the random Oracle model again that

427
00:17:43,980 --> 00:17:46,740
RSA oae P is secure in this weak

428
00:17:46,740 --> 00:17:49,200
randomness setting this is useful

429
00:17:49,200 --> 00:17:51,360
because it's the only provably secure

430
00:17:51,360 --> 00:17:54,390
pke scheme offered by virtually

431
00:17:54,390 --> 00:17:58,140
all common libraries in our paper would

432
00:17:58,140 --> 00:17:59,790
provide a full treatment of the RFC

433
00:17:59,790 --> 00:18:02,040
standard including labels which the

434
00:18:02,040 --> 00:18:03,780
standard specifies as being optional

435
00:18:03,780 --> 00:18:06,660
this is what's actually implemented in

436
00:18:06,660 --> 00:18:09,240
real libraries although not all API is

437
00:18:09,240 --> 00:18:13,890
exposed the labels so to summarize the

438
00:18:13,890 --> 00:18:17,220
MMR CCA attack is very strong since it

439
00:18:17,220 --> 00:18:19,980
admits adversaries that adaptively

440
00:18:19,980 --> 00:18:21,690
corrupt the randomness source during the

441
00:18:21,690 --> 00:18:24,960
course of their attack the strength of

442
00:18:24,960 --> 00:18:27,060
this attack led us to consider a weaker

443
00:18:27,060 --> 00:18:29,070
model where the coins are corrupted once

444
00:18:29,070 --> 00:18:32,120
before the adversaries attack begins

445
00:18:32,120 --> 00:18:34,860
we're able to show able to give the

446
00:18:34,860 --> 00:18:36,480
adversary the public key in the setting

447
00:18:36,480 --> 00:18:38,790
but the output of the coin source must

448
00:18:38,790 --> 00:18:40,680
have enough entropy so that the

449
00:18:40,680 --> 00:18:44,640
adversary can't simply guess them but

450
00:18:44,640 --> 00:18:46,260
this is still a weaker requirement than

451
00:18:46,260 --> 00:18:48,360
the usual setting which requires uniform

452
00:18:48,360 --> 00:18:52,050
coins so as you can see the burden on

453
00:18:52,050 --> 00:18:53,430
the system to provide high quality

454
00:18:53,430 --> 00:18:56,400
randomness decreases as we move from ind

455
00:18:56,400 --> 00:19:01,070
CCA to MMC CA and finally to MMR CCA

456
00:19:01,070 --> 00:19:03,690
intuition would suggest that weakening

457
00:19:03,690 --> 00:19:05,640
the requirements on the system results

458
00:19:05,640 --> 00:19:08,370
in a stronger notion but the nature of

459
00:19:08,370 --> 00:19:09,960
the attack is quite different in each of

460
00:19:09,960 --> 00:19:13,110
these settings nevertheless we find that

461
00:19:13,110 --> 00:19:14,820
we're able to work out relationships

462
00:19:14,820 --> 00:19:16,800
among these notions under certain

463
00:19:16,800 --> 00:19:22,590
restrictions now to wrap up we find that

464
00:19:22,590 --> 00:19:25,440
existing hedge pke schemes are difficult

465
00:19:25,440 --> 00:19:27,870
to implement using real crypto libraries

466
00:19:27,870 --> 00:19:30,090
although these schemes are explicitly

467
00:19:30,090 --> 00:19:33,570
designed for practice in particular you

468
00:19:33,570 --> 00:19:35,130
can't implement encrypt with hash and

469
00:19:35,130 --> 00:19:37,470
open SSL without modifying the code in

470
00:19:37,470 --> 00:19:41,310
some way so in our work we revisited the

471
00:19:41,310 --> 00:19:43,290
hedge peak hedge pke from the

472
00:19:43,290 --> 00:19:45,470
perspective of what is achievable using

473
00:19:45,470 --> 00:19:49,620
existing libraries building off of prior

474
00:19:49,620 --> 00:19:52,200
work we introduced a CCA extension to

475
00:19:52,200 --> 00:19:54,540
the usual MMR attack and show it's

476
00:19:54,540 --> 00:19:56,490
achievable by a hybrid encryption and

477
00:19:56,490 --> 00:20:00,660
our construction makes use of primitives

478
00:20:00,660 --> 00:20:04,590
exported by common libraries we also

479
00:20:04,590 --> 00:20:06,540
introduced the weaker mm attacks and

480
00:20:06,540 --> 00:20:08,160
show that mm CCA is

481
00:20:08,160 --> 00:20:13,950
achieved by our Sao AEP finally the

482
00:20:13,950 --> 00:20:16,230
principles that drive API design are

483
00:20:16,230 --> 00:20:18,860
inherently in conflict with one another

484
00:20:18,860 --> 00:20:22,140
API should be easy to use even for those

485
00:20:22,140 --> 00:20:23,850
who may know very little about what it

486
00:20:23,850 --> 00:20:26,580
is they're doing more to the point they

487
00:20:26,580 --> 00:20:28,910
need to be difficult to use incorrectly

488
00:20:28,910 --> 00:20:30,420
especially when they involve

489
00:20:30,420 --> 00:20:33,750
cryptography on the other hand they need

490
00:20:33,750 --> 00:20:35,970
to be flexible enough to be used in new

491
00:20:35,970 --> 00:20:38,130
ways ways not even envisioned by the

492
00:20:38,130 --> 00:20:41,220
designers this is especially important

493
00:20:41,220 --> 00:20:45,870
because API is exist for a long time we

494
00:20:45,870 --> 00:20:47,820
hope that our work calls calls these

495
00:20:47,820 --> 00:20:49,910
issues to the attention of our community

496
00:20:49,910 --> 00:20:52,410
when developing new theory it's a good

497
00:20:52,410 --> 00:20:54,600
idea to take it look at libraries and

498
00:20:54,600 --> 00:20:56,970
see what they're already doing and how

499
00:20:56,970 --> 00:20:59,820
they're designed whenever possible we

500
00:20:59,820 --> 00:21:01,110
should favour solutions that are

501
00:21:01,110 --> 00:21:04,140
supported by existing API so thank you

502
00:21:04,140 --> 00:21:05,990
very much

503
00:21:05,990 --> 00:21:11,690
[Applause]

