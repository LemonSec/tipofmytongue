1
00:00:05,590 --> 00:00:07,900
so this talk is gonna be about secure

2
00:00:07,900 --> 00:00:10,389
channel and in particular which we call

3
00:00:10,389 --> 00:00:12,460
multi key channel where a sender and

4
00:00:12,460 --> 00:00:15,280
receiver can update their keys during

5
00:00:15,280 --> 00:00:19,930
their communication so suppose Alice and

6
00:00:19,930 --> 00:00:21,970
Bob share a symmetric key with each

7
00:00:21,970 --> 00:00:24,670
other and Alice wants to use that key in

8
00:00:24,670 --> 00:00:27,190
order to send some messages securely to

9
00:00:27,190 --> 00:00:30,279
Paul for this purpose they need a secure

10
00:00:30,279 --> 00:00:35,590
channel I'm a central primitive in

11
00:00:35,590 --> 00:00:38,140
cryptography to realize secure channels

12
00:00:38,140 --> 00:00:40,720
as authenticated encryption because it

13
00:00:40,720 --> 00:00:42,850
provides both confidentiality and

14
00:00:42,850 --> 00:00:44,290
integrity

15
00:00:44,290 --> 00:00:46,809
so confidentiality means intuitively

16
00:00:46,809 --> 00:00:48,910
that the adversary should not be able to

17
00:00:48,910 --> 00:00:51,070
figure out what messages are being sent

18
00:00:51,070 --> 00:00:53,980
and clear and integrity means that the

19
00:00:53,980 --> 00:00:57,100
adversary should not be able to port a

20
00:00:57,100 --> 00:01:00,129
message without the receiver noticing it

21
00:01:00,129 --> 00:01:02,590
but because Alice wants to send a

22
00:01:02,590 --> 00:01:04,989
sequence of messages to Bob I'm not just

23
00:01:04,989 --> 00:01:08,530
one single message the the authenticated

24
00:01:08,530 --> 00:01:11,470
encryption has to be stateful so that

25
00:01:11,470 --> 00:01:14,140
the adversary cannot replay previously

26
00:01:14,140 --> 00:01:17,410
seen messages to Bob and she cannot

27
00:01:17,410 --> 00:01:21,130
change the order of messages another

28
00:01:21,130 --> 00:01:23,860
component that is often considered when

29
00:01:23,860 --> 00:01:25,840
building secure channels is the

30
00:01:25,840 --> 00:01:28,300
Associated data because it captures our

31
00:01:28,300 --> 00:01:31,569
intuition that the actual payload has to

32
00:01:31,569 --> 00:01:33,700
be confidential and the payload together

33
00:01:33,700 --> 00:01:35,890
with some Associated data for example

34
00:01:35,890 --> 00:01:38,619
some header information has to be

35
00:01:38,619 --> 00:01:42,160
authenticated as a whole so to summarize

36
00:01:42,160 --> 00:01:45,250
a basic secure channel can be modelled

37
00:01:45,250 --> 00:01:47,170
as faithful authenticated encryption

38
00:01:47,170 --> 00:01:50,619
with Associated data and this gives rise

39
00:01:50,619 --> 00:01:53,259
to stateful notions for confidentiality

40
00:01:53,259 --> 00:01:55,780
against passive adversaries and against

41
00:01:55,780 --> 00:01:58,800
active adversaries but also to stateful

42
00:01:58,800 --> 00:02:03,190
notions of integrity of plaintext and

43
00:02:03,190 --> 00:02:07,179
integrity of ciphertext so the channel

44
00:02:07,179 --> 00:02:09,550
that I just described is basically a

45
00:02:09,550 --> 00:02:10,500
single

46
00:02:10,500 --> 00:02:13,230
a channel because the security and that

47
00:02:13,230 --> 00:02:16,020
channel originates from a single shared

48
00:02:16,020 --> 00:02:19,920
symmetric key between Alice and Bob and

49
00:02:19,920 --> 00:02:22,830
you can imagine if that if that's one

50
00:02:22,830 --> 00:02:25,590
single key is compromised then the

51
00:02:25,590 --> 00:02:27,900
security and the entire channel is going

52
00:02:27,900 --> 00:02:30,840
to be affected and in fact the key

53
00:02:30,840 --> 00:02:33,030
compromise was a concern and the

54
00:02:33,030 --> 00:02:35,640
development of the upcoming version of

55
00:02:35,640 --> 00:02:37,740
TLS the TLS one point

56
00:02:37,740 --> 00:02:41,280
and what they did is to consider a multi

57
00:02:41,280 --> 00:02:43,620
key channel instead where the senders

58
00:02:43,620 --> 00:02:45,690
and receivers can update their keys

59
00:02:45,690 --> 00:02:50,120
during the lifetime of the channel an

60
00:02:50,120 --> 00:02:53,900
additionally TLS 1.3 deploys a two layer

61
00:02:53,900 --> 00:02:57,450
deterministic key schedule where we have

62
00:02:57,450 --> 00:03:01,290
master secret keys and we have phase

63
00:03:01,290 --> 00:03:04,680
keys and the first master secret key is

64
00:03:04,680 --> 00:03:07,320
what is derived from the key exchange

65
00:03:07,320 --> 00:03:10,650
protocol or the TLS handshake and the

66
00:03:10,650 --> 00:03:13,080
next master secret keys are derived from

67
00:03:13,080 --> 00:03:15,900
the previous ones deterministically and

68
00:03:15,900 --> 00:03:19,860
we have also face keys here which are

69
00:03:19,860 --> 00:03:22,590
used to provide confidentiality and

70
00:03:22,590 --> 00:03:25,980
integrity and each phase and they are

71
00:03:25,980 --> 00:03:28,530
derived deterministically from the

72
00:03:28,530 --> 00:03:31,560
current master secret key and this type

73
00:03:31,560 --> 00:03:35,010
of multi-channel allows us to define two

74
00:03:35,010 --> 00:03:38,880
advanced security notions which say that

75
00:03:38,880 --> 00:03:42,060
some security should be provided even if

76
00:03:42,060 --> 00:03:45,799
a master secret key or phase kids are

77
00:03:45,799 --> 00:03:49,890
compromised the first of these security

78
00:03:49,890 --> 00:03:53,070
notions is forward security and it is

79
00:03:53,070 --> 00:03:55,380
concerned with the full compromise of

80
00:03:55,380 --> 00:03:57,420
the channel or the corruption of a

81
00:03:57,420 --> 00:04:00,239
master secret key and if you're familiar

82
00:04:00,239 --> 00:04:03,810
with it it is conceptually very close to

83
00:04:03,810 --> 00:04:06,090
the forward security that is defined and

84
00:04:06,090 --> 00:04:08,510
here in the context of key exchange

85
00:04:08,510 --> 00:04:12,329
protocols so here if the adversary

86
00:04:12,329 --> 00:04:14,930
breaks and into the computer and

87
00:04:14,930 --> 00:04:18,390
exfiltrate s-- the master secret key of

88
00:04:18,390 --> 00:04:19,380
the current fee

89
00:04:19,380 --> 00:04:22,680
which happens to be face - then we know

90
00:04:22,680 --> 00:04:26,790
that security from phase 2 on cannot be

91
00:04:26,790 --> 00:04:29,070
achieved because the master secret key

92
00:04:29,070 --> 00:04:31,710
is there are derived from a corrupted

93
00:04:31,710 --> 00:04:35,400
one however if the keys are security

94
00:04:35,400 --> 00:04:38,040
erase after they are used we should be

95
00:04:38,040 --> 00:04:41,250
able to achieve security in the first

96
00:04:41,250 --> 00:04:44,190
phase so in general for word security

97
00:04:44,190 --> 00:04:46,350
for channels means that the

98
00:04:46,350 --> 00:04:49,770
communication that happens prior to a

99
00:04:49,770 --> 00:04:52,650
corruption of a master secret key should

100
00:04:52,650 --> 00:04:57,390
retain its security the other security

101
00:04:57,390 --> 00:05:00,720
notion is called phase cancellation and

102
00:05:00,720 --> 00:05:02,790
it is concerned with the Selective

103
00:05:02,790 --> 00:05:06,990
leakage of phase keys this time so you

104
00:05:06,990 --> 00:05:08,850
can imagine that the adversary that

105
00:05:08,850 --> 00:05:12,510
breaks into the computer cannot corrupt

106
00:05:12,510 --> 00:05:15,510
or cannot exfiltrate the master secret

107
00:05:15,510 --> 00:05:18,090
key because it's going to be probably

108
00:05:18,090 --> 00:05:21,390
stored in a more secure memory however

109
00:05:21,390 --> 00:05:23,700
the adversary is able to reveal the

110
00:05:23,700 --> 00:05:27,930
phase key and here we want that the

111
00:05:27,930 --> 00:05:31,440
corruption of the method of the fix key

112
00:05:31,440 --> 00:05:34,890
and phase 2 only effects that phase and

113
00:05:34,890 --> 00:05:39,450
not the other ones so more generally

114
00:05:39,450 --> 00:05:41,240
phase cancellation means that

115
00:05:41,240 --> 00:05:43,080
uncompromised phases

116
00:05:43,080 --> 00:05:45,710
should retain their security even if

117
00:05:45,710 --> 00:05:50,400
past phases are compromised or even if

118
00:05:50,400 --> 00:05:54,120
future phases are compromised so having

119
00:05:54,120 --> 00:05:57,330
these security notions in mind I want to

120
00:05:57,330 --> 00:05:59,190
tell you a little story before I

121
00:05:59,190 --> 00:06:01,350
continue with the syntax and the

122
00:06:01,350 --> 00:06:04,290
security of multi key tunnels and the

123
00:06:04,290 --> 00:06:06,900
story should motivate why we need a

124
00:06:06,900 --> 00:06:09,780
formal treatment of multi key tunnels

125
00:06:09,780 --> 00:06:12,630
and why it is not trivial to build them

126
00:06:12,630 --> 00:06:16,350
so consider a quite natural construction

127
00:06:16,350 --> 00:06:18,960
of multi key tunnels where we have

128
00:06:18,960 --> 00:06:22,050
updates in keys and the construction is

129
00:06:22,050 --> 00:06:23,940
based on Statesville authenticated

130
00:06:23,940 --> 00:06:26,400
encryption and the sender and receiver

131
00:06:26,400 --> 00:06:30,310
store a sequence number in their state

132
00:06:30,310 --> 00:06:32,710
and the sequence number is increasing

133
00:06:32,710 --> 00:06:37,750
throughout the whole channel even from

134
00:06:37,750 --> 00:06:41,470
one phase to other face in fact this

135
00:06:41,470 --> 00:06:43,810
construction is quite similar to what

136
00:06:43,810 --> 00:06:48,669
was proposed in TLS 1.3 draft 10 and the

137
00:06:48,669 --> 00:06:50,500
question that we want to ask here is

138
00:06:50,500 --> 00:06:52,900
baseless kind of construction achieved

139
00:06:52,900 --> 00:06:56,800
phase cancellation so if the phase key

140
00:06:56,800 --> 00:07:01,720
and phase 1 is revealed can face to stay

141
00:07:01,720 --> 00:07:05,890
secure still and perhaps surprisingly

142
00:07:05,890 --> 00:07:07,930
the answer to desk death to this

143
00:07:07,930 --> 00:07:11,440
question is no and this observation was

144
00:07:11,440 --> 00:07:15,419
made by the me TLS team back in 2015 and

145
00:07:15,419 --> 00:07:20,140
they said that if here the face key of

146
00:07:20,140 --> 00:07:23,110
first one is revealed the adversary can

147
00:07:23,110 --> 00:07:25,990
go and of course drop some messages from

148
00:07:25,990 --> 00:07:29,590
the beginning of phase 2 and then to

149
00:07:29,590 --> 00:07:31,540
cover up for the mismatch and the

150
00:07:31,540 --> 00:07:34,720
sequence numbers the adversary knowing

151
00:07:34,720 --> 00:07:37,720
the phase key and phase 1 can just add

152
00:07:37,720 --> 00:07:41,380
some valid ciphertext at the end of it

153
00:07:41,380 --> 00:07:45,160
so this kind of channel cannot provide

154
00:07:45,160 --> 00:07:48,580
phase cancellation and the fix also

155
00:07:48,580 --> 00:07:50,919
proposed by the material FC master here

156
00:07:50,919 --> 00:07:53,530
quite simple it was just to reset the

157
00:07:53,530 --> 00:07:55,210
sequence numbers at the beginning of

158
00:07:55,210 --> 00:07:58,690
each phase however this example shows

159
00:07:58,690 --> 00:08:01,060
why it is not trivial to build secure

160
00:08:01,060 --> 00:08:04,180
multi key channel and why a formal

161
00:08:04,180 --> 00:08:08,830
treatment was necessary so let me show

162
00:08:08,830 --> 00:08:11,050
you the syntax of multicon channels

163
00:08:11,050 --> 00:08:12,760
we of course have an initialization

164
00:08:12,760 --> 00:08:15,640
Alberta which is going to produce the

165
00:08:15,640 --> 00:08:18,010
master secret key for us you can think

166
00:08:18,010 --> 00:08:21,550
of it as the TLS handshake or 10 in

167
00:08:21,550 --> 00:08:25,390
general key exchange protocol and I have

168
00:08:25,390 --> 00:08:27,450
to note here that it the initialization

169
00:08:27,450 --> 00:08:30,900
algorithm is going to produce also some

170
00:08:30,900 --> 00:08:34,630
initial states but for simplicity I'm

171
00:08:34,630 --> 00:08:37,179
going to omit all those states on this

172
00:08:37,179 --> 00:08:41,049
slide so from the master secret key work

173
00:08:41,049 --> 00:08:42,559
on a deterministic

174
00:08:42,559 --> 00:08:46,009
a face key and this thing's key can be

175
00:08:46,009 --> 00:08:48,499
used to send messages and produce some

176
00:08:48,499 --> 00:08:52,120
ciphertext and the cipher tapes can be

177
00:08:52,120 --> 00:08:55,689
received using the same face key and

178
00:08:55,689 --> 00:08:58,069
this can of course go on and you can

179
00:08:58,069 --> 00:09:00,709
send and receive more messages and at

180
00:09:00,709 --> 00:09:03,589
some point the sender and the receiver

181
00:09:03,589 --> 00:09:06,680
can update their keys with a update

182
00:09:06,680 --> 00:09:10,040
algorithm and proceed to the next phase

183
00:09:10,040 --> 00:09:14,329
from the next master secret key we can

184
00:09:14,329 --> 00:09:17,360
again deterministically derive a next

185
00:09:17,360 --> 00:09:21,800
phase key and for the future phases the

186
00:09:21,800 --> 00:09:25,490
same pattern can continue so that was

187
00:09:25,490 --> 00:09:27,769
the syntax of quanti key channels let's

188
00:09:27,769 --> 00:09:30,410
take a look at the security notions of

189
00:09:30,410 --> 00:09:33,860
course we have security notions for

190
00:09:33,860 --> 00:09:36,620
confidentiality and integrity but

191
00:09:36,620 --> 00:09:38,689
because we have these more advanced

192
00:09:38,689 --> 00:09:42,189
security notions we can in addition to

193
00:09:42,189 --> 00:09:44,990
confidentiality and integrity have

194
00:09:44,990 --> 00:09:48,889
forward security phase cancellation both

195
00:09:48,889 --> 00:09:52,420
of them or none of them

196
00:09:52,420 --> 00:09:57,319
and of course we have notions for multi

197
00:09:57,319 --> 00:10:02,980
channels this MK shows that we can have

198
00:10:02,980 --> 00:10:06,559
we can have multiple phases but we also

199
00:10:06,559 --> 00:10:10,610
capture a setting where the channel the

200
00:10:10,610 --> 00:10:12,529
entire communication and the channel

201
00:10:12,529 --> 00:10:14,689
stays in the first phase

202
00:10:14,689 --> 00:10:17,990
so we basically practically have only a

203
00:10:17,990 --> 00:10:21,829
single channel and all these different

204
00:10:21,829 --> 00:10:25,189
flavours for security notions can be

205
00:10:25,189 --> 00:10:28,100
captured with a parameterised security

206
00:10:28,100 --> 00:10:33,370
notion which we call SI k attack where s

207
00:10:33,370 --> 00:10:36,529
shows the advanced security so forward

208
00:10:36,529 --> 00:10:40,339
security risk in installation and both

209
00:10:40,339 --> 00:10:42,860
of them or none of them and we have a

210
00:10:42,860 --> 00:10:46,809
four indistinguishability or integrity

211
00:10:46,809 --> 00:10:50,089
we can have K which was the key setting

212
00:10:50,089 --> 00:10:51,960
multi key or single

213
00:10:51,960 --> 00:10:56,100
and attack can be CPAC c.a.p text and

214
00:10:56,100 --> 00:11:02,399
see text so now let's take a closer look

215
00:11:02,399 --> 00:11:05,370
at the strongest confidentiality notion

216
00:11:05,370 --> 00:11:07,890
that suite that we define in our

217
00:11:07,890 --> 00:11:11,100
framework which would be the multi key

218
00:11:11,100 --> 00:11:14,250
variant of indistinguishability under

219
00:11:14,250 --> 00:11:17,100
chosen cipher text attack which provides

220
00:11:17,100 --> 00:11:19,860
both forward security and phase

221
00:11:19,860 --> 00:11:22,890
cancellation we define a game-based

222
00:11:22,890 --> 00:11:25,860
notion where the adversary is able to

223
00:11:25,860 --> 00:11:29,250
interact with multiple Oracle's so of

224
00:11:29,250 --> 00:11:30,589
course because we want an

225
00:11:30,589 --> 00:11:32,459
indistinguishability notion the

226
00:11:32,459 --> 00:11:35,850
adversary can query a left or right

227
00:11:35,850 --> 00:11:38,520
sending Oracle but the adversary can

228
00:11:38,520 --> 00:11:42,390
also receive ciphertext and proceed to

229
00:11:42,390 --> 00:11:46,890
the next phase with the update Oracle we

230
00:11:46,890 --> 00:11:48,839
assume that the adversary can corrupt

231
00:11:48,839 --> 00:11:51,510
some of the master secret keys and we

232
00:11:51,510 --> 00:11:53,370
assume that the adversary can

233
00:11:53,370 --> 00:11:55,980
selectively reveal some of the phase

234
00:11:55,980 --> 00:11:59,040
keys at the end of the experiment the

235
00:11:59,040 --> 00:12:02,610
adversary outputs a faith and it yes for

236
00:12:02,610 --> 00:12:05,040
that phase which indicates whether the

237
00:12:05,040 --> 00:12:07,320
adversary believes that the left or the

238
00:12:07,320 --> 00:12:12,270
right message was encrypted the

239
00:12:12,270 --> 00:12:15,209
adversary wants here if of course B is

240
00:12:15,209 --> 00:12:18,240
the correct guess for phase T but only

241
00:12:18,240 --> 00:12:22,290
if that face was not revealed and if the

242
00:12:22,290 --> 00:12:25,170
master secret key of neither that face

243
00:12:25,170 --> 00:12:30,240
nor previous phases were corrupted so

244
00:12:30,240 --> 00:12:33,029
like in many other security notions it

245
00:12:33,029 --> 00:12:35,190
is very important here not to trivialize

246
00:12:35,190 --> 00:12:37,740
the win for the adversary because we

247
00:12:37,740 --> 00:12:40,770
want the adversary to be successful

248
00:12:40,770 --> 00:12:42,839
formally in the game only if the

249
00:12:42,839 --> 00:12:46,170
adversary has actually an advantage and

250
00:12:46,170 --> 00:12:49,350
breaking the security that we want and

251
00:12:49,350 --> 00:12:53,010
practice so in particular this means

252
00:12:53,010 --> 00:12:55,350
that the adversary should not be able to

253
00:12:55,350 --> 00:12:57,089
receive decryptions

254
00:12:57,089 --> 00:13:00,600
of ciphertext that are still in sync

255
00:13:00,600 --> 00:13:03,750
with those that were sent because if the

256
00:13:03,750 --> 00:13:05,150
adversary can do

257
00:13:05,150 --> 00:13:09,410
then the adversary can just can just

258
00:13:09,410 --> 00:13:11,660
forward the ciphertext received from

259
00:13:11,660 --> 00:13:15,140
here and and send them to the receive

260
00:13:15,140 --> 00:13:17,690
Oracle and easily distinguish whether as

261
00:13:17,690 --> 00:13:20,810
well that the encryption of the left or

262
00:13:20,810 --> 00:13:25,820
the right message so the main technical

263
00:13:25,820 --> 00:13:28,430
challenge and defining security notions

264
00:13:28,430 --> 00:13:30,830
is to decide when the adversary is

265
00:13:30,830 --> 00:13:32,840
allowed to see the corruptions of cipher

266
00:13:32,840 --> 00:13:37,100
text equivalently when we when should we

267
00:13:37,100 --> 00:13:40,190
declare the security game to go out of

268
00:13:40,190 --> 00:13:42,770
sync because once the security game goes

269
00:13:42,770 --> 00:13:45,970
out of sync the adversary is able to see

270
00:13:45,970 --> 00:13:50,480
arbitrary decryptions of cyber tricks a

271
00:13:50,480 --> 00:13:53,870
more classical example of this happens

272
00:13:53,870 --> 00:13:56,540
in the receive Oracle in the experiment

273
00:13:56,540 --> 00:13:59,960
and imagine that we have three

274
00:13:59,960 --> 00:14:02,420
ciphertext send and the first two are

275
00:14:02,420 --> 00:14:05,630
received and then the adversary are

276
00:14:05,630 --> 00:14:08,690
twice to receive a third ciphertext that

277
00:14:08,690 --> 00:14:12,400
is not the same as the one that was sent

278
00:14:12,400 --> 00:14:15,620
intuitively the experiment here should

279
00:14:15,620 --> 00:14:17,960
go out of sync because the received

280
00:14:17,960 --> 00:14:20,510
ciphertext deviates from the sent one

281
00:14:20,510 --> 00:14:24,770
however we shouldn't do so if the face

282
00:14:24,770 --> 00:14:28,130
key is compromised because if the

283
00:14:28,130 --> 00:14:31,400
adversary knows the key adversary could

284
00:14:31,400 --> 00:14:36,100
have generated this blue ciphertext here

285
00:14:36,100 --> 00:14:39,470
to be a valid ciphertext which is not

286
00:14:39,470 --> 00:14:43,100
going to decrypt to an error message so

287
00:14:43,100 --> 00:14:46,190
if we go out of sync and the face key is

288
00:14:46,190 --> 00:14:49,070
compromised the adversary can win in the

289
00:14:49,070 --> 00:14:53,300
next phase trivially another example is

290
00:14:53,300 --> 00:14:58,190
in the left or right Oracle for example

291
00:14:58,190 --> 00:15:01,280
three cipher text or send and all three

292
00:15:01,280 --> 00:15:06,260
are received and then the adversary does

293
00:15:06,260 --> 00:15:09,290
a key update on the receiver side and

294
00:15:09,290 --> 00:15:12,710
here in - sorry and then a fourth

295
00:15:12,710 --> 00:15:15,830
ciphertext is fen

296
00:15:15,830 --> 00:15:18,800
in the first phase already and

297
00:15:18,800 --> 00:15:22,640
intuitively here we can say that the

298
00:15:22,640 --> 00:15:25,399
receiver has proceeded to the next phase

299
00:15:25,399 --> 00:15:28,760
too soon and has no way of receiving

300
00:15:28,760 --> 00:15:30,980
this fourth ciphertext and the correct

301
00:15:30,980 --> 00:15:31,640
phase

302
00:15:31,640 --> 00:15:33,950
however again there is a catch we

303
00:15:33,950 --> 00:15:37,070
shouldn't do so if the phase P in that

304
00:15:37,070 --> 00:15:39,829
phase is compromised because if the

305
00:15:39,829 --> 00:15:44,620
adversary knows the key she can go and

306
00:15:44,620 --> 00:15:49,790
receive the ciphertext already before

307
00:15:49,790 --> 00:15:52,190
the key update and before the ciphertext

308
00:15:52,190 --> 00:15:56,950
was spent in the first phase

309
00:15:57,730 --> 00:16:01,130
so after defining the security notions

310
00:16:01,130 --> 00:16:04,070
we explore the relations among them and

311
00:16:04,070 --> 00:16:06,950
this figure here shows the strict

312
00:16:06,950 --> 00:16:10,130
implications and the multi key notions

313
00:16:10,130 --> 00:16:13,790
that we define we have that a notion

314
00:16:13,790 --> 00:16:16,700
that provides both forward security and

315
00:16:16,700 --> 00:16:21,230
50 insulation employs a notion where we

316
00:16:21,230 --> 00:16:24,529
have only forward security or only 50

317
00:16:24,529 --> 00:16:27,709
insulation and in particular just means

318
00:16:27,709 --> 00:16:30,709
that forward security and 50 insulation

319
00:16:30,709 --> 00:16:32,839
are two different and two orthogonal

320
00:16:32,839 --> 00:16:36,589
notions and these two both employ a

321
00:16:36,589 --> 00:16:38,540
notion where we have no advanced

322
00:16:38,540 --> 00:16:43,190
security notions we also consider a

323
00:16:43,190 --> 00:16:46,060
notion that is single he and the entire

324
00:16:46,060 --> 00:16:49,820
communication stays in one single phase

325
00:16:49,820 --> 00:16:52,550
so basically we have a single key

326
00:16:52,550 --> 00:16:56,480
channel and for a single key notion we

327
00:16:56,480 --> 00:16:59,540
cannot provide any forward security or

328
00:16:59,540 --> 00:17:01,760
fixed insulation because if you have

329
00:17:01,760 --> 00:17:04,730
just one master secret key or just one

330
00:17:04,730 --> 00:17:08,000
phase key if that key is compromised and

331
00:17:08,000 --> 00:17:11,240
no security can be achieved there we

332
00:17:11,240 --> 00:17:15,020
compared our single key notion to the

333
00:17:15,020 --> 00:17:19,309
more established notion of security for

334
00:17:19,309 --> 00:17:22,280
stateful encryption and show that these

335
00:17:22,280 --> 00:17:25,369
two are basically equivalent up to some

336
00:17:25,369 --> 00:17:29,020
syntactic all different

337
00:17:29,200 --> 00:17:31,990
with that the strongest notion that we

338
00:17:31,990 --> 00:17:37,440
have is the multi key notions for for

339
00:17:37,440 --> 00:17:39,510
confidentiality we have

340
00:17:39,510 --> 00:17:41,830
indistinguishability against chosen

341
00:17:41,830 --> 00:17:44,770
ciphertext attack with forward security

342
00:17:44,770 --> 00:17:49,179
and face the insulation and equivalently

343
00:17:49,179 --> 00:17:51,400
for integrity we have integrity of

344
00:17:51,400 --> 00:17:54,330
ciphertext with multi key and with all

345
00:17:54,330 --> 00:17:59,470
two advanced security notions and the

346
00:17:59,470 --> 00:18:01,299
weakest notions are those that are

347
00:18:01,299 --> 00:18:04,240
single key we have for confidentiality

348
00:18:04,240 --> 00:18:12,280
and CPA and for integrity and ethics and

349
00:18:12,280 --> 00:18:14,620
we also generalize the composition

350
00:18:14,620 --> 00:18:18,940
result for authenticated encryption by

351
00:18:18,940 --> 00:18:21,460
bellari and number three to the setting

352
00:18:21,460 --> 00:18:24,730
where we have multiple and we have multi

353
00:18:24,730 --> 00:18:28,570
key channel and different invalid

354
00:18:28,570 --> 00:18:32,440
ciphertext may decrypt to different

355
00:18:32,440 --> 00:18:36,580
error messages to show that the

356
00:18:36,580 --> 00:18:38,950
strongest security notions that we

357
00:18:38,950 --> 00:18:40,870
define in our model are actually

358
00:18:40,870 --> 00:18:42,870
achievable we give a generic

359
00:18:42,870 --> 00:18:45,909
construction which is based on non-space

360
00:18:45,909 --> 00:18:48,100
authenticated encryption with associated

361
00:18:48,100 --> 00:18:51,940
data and pseudo-random functions the

362
00:18:51,940 --> 00:18:54,520
pseudo-random functions is used in a key

363
00:18:54,520 --> 00:18:57,880
schedule where when we applied a

364
00:18:57,880 --> 00:19:00,309
pseudo-random function on a master

365
00:19:00,309 --> 00:19:02,230
secret key and zero we get the next

366
00:19:02,230 --> 00:19:05,470
master secret key and by applying it on

367
00:19:05,470 --> 00:19:09,010
a master secret key and one we get the

368
00:19:09,010 --> 00:19:14,020
current phase key and for defining send

369
00:19:14,020 --> 00:19:17,020
and receive algorithms we use a nonce

370
00:19:17,020 --> 00:19:20,950
based AAT where we store a sequence

371
00:19:20,950 --> 00:19:23,289
number of the messages as the nonce to

372
00:19:23,289 --> 00:19:25,659
protect against reordering attacks and

373
00:19:25,659 --> 00:19:28,900
because of the attack that I told you

374
00:19:28,900 --> 00:19:32,409
about we reset the sequence numbers at

375
00:19:32,409 --> 00:19:35,370
the beginning of each phase and we also

376
00:19:35,370 --> 00:19:38,590
authenticate the number of send messages

377
00:19:38,590 --> 00:19:39,270
and pre

378
00:19:39,270 --> 00:19:42,240
yes phases - perfect to prevent suffix

379
00:19:42,240 --> 00:19:46,610
truncation and a receive algorithm is

380
00:19:46,610 --> 00:19:50,910
defined accordingly so this construction

381
00:19:50,910 --> 00:19:54,120
is quite close to TLS 1.3 and the way

382
00:19:54,120 --> 00:19:56,460
that the key schedule is different using

383
00:19:56,460 --> 00:19:59,130
the PRF and the way that the send and

384
00:19:59,130 --> 00:20:01,500
receive messages are defined with

385
00:20:01,500 --> 00:20:04,560
non-space AAT and resetting sequence

386
00:20:04,560 --> 00:20:07,200
numbers however there are some

387
00:20:07,200 --> 00:20:10,920
differences for example in TLS 1.3

388
00:20:10,920 --> 00:20:13,350
content type can be included in the

389
00:20:13,350 --> 00:20:15,990
cipher text to show that the message is

390
00:20:15,990 --> 00:20:19,460
an alert message or for example a

391
00:20:19,460 --> 00:20:23,730
application data and another important

392
00:20:23,730 --> 00:20:27,630
difference is that in TLS 1.3 the key

393
00:20:27,630 --> 00:20:29,360
update messages are actually

394
00:20:29,360 --> 00:20:32,430
authenticated and sent in the message so

395
00:20:32,430 --> 00:20:34,500
they can act as an end of phase

396
00:20:34,500 --> 00:20:37,290
indicator and we don't need any more

397
00:20:37,290 --> 00:20:41,000
until s to include the number of

398
00:20:41,000 --> 00:20:44,400
previously sent messages and previous

399
00:20:44,400 --> 00:20:48,510
phases to prevent a suffix truncation so

400
00:20:48,510 --> 00:20:51,480
to summarize we formalized multi key

401
00:20:51,480 --> 00:20:53,580
tunnels we gave adequate security

402
00:20:53,580 --> 00:20:57,480
notions for them for confidentiality and

403
00:20:57,480 --> 00:21:00,270
integrity where we can additionally have

404
00:21:00,270 --> 00:21:03,750
forward security and 50 installation and

405
00:21:03,750 --> 00:21:06,360
we explored the relationships between

406
00:21:06,360 --> 00:21:09,540
them showed that forward security and 50

407
00:21:09,540 --> 00:21:12,900
insulation or orthogonal and we extended

408
00:21:12,900 --> 00:21:16,020
the known composition result for the

409
00:21:16,020 --> 00:21:19,470
multi key setting and the multi error

410
00:21:19,470 --> 00:21:23,370
setting and we also at the end defined a

411
00:21:23,370 --> 00:21:25,740
generic construction that is

412
00:21:25,740 --> 00:21:29,850
comparatively close to TLS 1.3 this

413
00:21:29,850 --> 00:21:31,950
concludes my talk thank you very much

414
00:21:31,950 --> 00:21:34,020
for your attention

415
00:21:34,020 --> 00:21:36,080
you

