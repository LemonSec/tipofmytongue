1
00:00:04,870 --> 00:00:07,970
all right good morning thanks for coming

2
00:00:07,970 --> 00:00:10,040
so today I'm going to tell you how to

3
00:00:10,040 --> 00:00:12,709
get topology hiding computation on all

4
00:00:12,709 --> 00:00:15,350
graphs but first let's talk a little bit

5
00:00:15,350 --> 00:00:17,779
about Facebook Facebook is great

6
00:00:17,779 --> 00:00:20,029
it connects millions of people all over

7
00:00:20,029 --> 00:00:21,980
the world with their friends and

8
00:00:21,980 --> 00:00:25,010
families and co-authors allows you to

9
00:00:25,010 --> 00:00:27,410
exchange messages tell them how you're

10
00:00:27,410 --> 00:00:29,360
doing what you're doing your likes your

11
00:00:29,360 --> 00:00:31,580
dislikes as long as all of that

12
00:00:31,580 --> 00:00:34,070
information goes through Facebook

13
00:00:34,070 --> 00:00:36,500
in this model Facebook is a trusted

14
00:00:36,500 --> 00:00:39,800
third party and using Facebook it can

15
00:00:39,800 --> 00:00:41,600
compute functions on your personal data

16
00:00:41,600 --> 00:00:44,510
and the this social graph of friends

17
00:00:44,510 --> 00:00:48,260
that you have at the price of Facebook

18
00:00:48,260 --> 00:00:50,179
knowing all of your personal data and

19
00:00:50,179 --> 00:00:52,969
all of your friends and this is for

20
00:00:52,969 --> 00:00:54,469
example why one of our co-authors

21
00:00:54,469 --> 00:00:58,729
doesn't use Facebook so what if we

22
00:00:58,729 --> 00:01:01,100
wanted to get a decentralized social

23
00:01:01,100 --> 00:01:02,989
network that way I could talk to one of

24
00:01:02,989 --> 00:01:07,670
my co-authors over Facebook now so in

25
00:01:07,670 --> 00:01:09,740
this model we no longer have a trusted

26
00:01:09,740 --> 00:01:11,840
third party your friends can talk to you

27
00:01:11,840 --> 00:01:12,829
can talk to your friends your friends

28
00:01:12,829 --> 00:01:15,740
can talk back to you and you get privacy

29
00:01:15,740 --> 00:01:18,700
both for your personal information and

30
00:01:18,700 --> 00:01:21,170
for the social graph so you don't need

31
00:01:21,170 --> 00:01:23,869
to reveal who all your friends are to

32
00:01:23,869 --> 00:01:26,719
anyone else now you might be thinking

33
00:01:26,719 --> 00:01:29,899
wait we already have something that does

34
00:01:29,899 --> 00:01:32,420
this we get privacy for your data with

35
00:01:32,420 --> 00:01:34,700
multi-party computation studied in the

36
00:01:34,700 --> 00:01:36,859
80s and the setting is you have multiple

37
00:01:36,859 --> 00:01:38,509
parties each with their own private

38
00:01:38,509 --> 00:01:41,210
inputs who jointly wants to compute a

39
00:01:41,210 --> 00:01:43,429
function without revealing anything

40
00:01:43,429 --> 00:01:45,250
beyond the output of that function

41
00:01:45,250 --> 00:01:50,329
however the setting for MPC has the

42
00:01:50,329 --> 00:01:53,270
communication topology being public

43
00:01:53,270 --> 00:01:55,369
meaning you're either dealing with a

44
00:01:55,369 --> 00:01:57,229
complete graph where every party can

45
00:01:57,229 --> 00:01:59,600
talk to every other party or if you have

46
00:01:59,600 --> 00:02:02,509
an incomplete communication graph its

47
00:02:02,509 --> 00:02:04,460
public and everyone knows who's talking

48
00:02:04,460 --> 00:02:08,149
to whom so NPC does nothing to hide any

49
00:02:08,149 --> 00:02:10,310
of the metadata of the computation that

50
00:02:10,310 --> 00:02:14,480
goes on and unfortunately metadata is a

51
00:02:14,480 --> 00:02:16,550
very powerful tool as the former

52
00:02:16,550 --> 00:02:18,560
director of the NSA once said

53
00:02:18,560 --> 00:02:20,540
you can kill people based on metadata

54
00:02:20,540 --> 00:02:22,610
the idea is you can infer a lot from

55
00:02:22,610 --> 00:02:25,819
who's talking to whom and that leads us

56
00:02:25,819 --> 00:02:28,370
to our goal we want to get topology

57
00:02:28,370 --> 00:02:30,920
hiding computation topology hiding

58
00:02:30,920 --> 00:02:32,780
computation is a kind of multi-party

59
00:02:32,780 --> 00:02:34,700
computation that hides both the input

60
00:02:34,700 --> 00:02:37,250
and the communication graph it is good

61
00:02:37,250 --> 00:02:40,340
for this social network example there

62
00:02:40,340 --> 00:02:42,019
are many applications and another

63
00:02:42,019 --> 00:02:44,959
application is maybe you have a

64
00:02:44,959 --> 00:02:47,120
vehicular network where when cars are

65
00:02:47,120 --> 00:02:49,069
close to each other they can communicate

66
00:02:49,069 --> 00:02:52,760
and disperse information about traffic

67
00:02:52,760 --> 00:02:56,239
patterns hazards whether on the highway

68
00:02:56,239 --> 00:02:58,220
but maybe you don't want to reveal where

69
00:02:58,220 --> 00:03:00,140
you are relative to other cars in this

70
00:03:00,140 --> 00:03:03,890
network so more formally the setting for

71
00:03:03,890 --> 00:03:06,349
topology hiding computation yeah each

72
00:03:06,349 --> 00:03:08,780
party has their own input for a function

73
00:03:08,780 --> 00:03:10,430
and parties can communicate directly

74
00:03:10,430 --> 00:03:13,190
only with their neighbors our goal will

75
00:03:13,190 --> 00:03:15,560
be given minimal information about the

76
00:03:15,560 --> 00:03:17,750
graph maybe a bound on the diameter of

77
00:03:17,750 --> 00:03:21,380
the graph or the number of nodes we want

78
00:03:21,380 --> 00:03:22,760
to be able to compute any function on

79
00:03:22,760 --> 00:03:24,380
the inputs while revealing nothing

80
00:03:24,380 --> 00:03:26,090
beyond the output and this includes

81
00:03:26,090 --> 00:03:28,400
revealing no more information about the

82
00:03:28,400 --> 00:03:32,810
graph to formally define this like the

83
00:03:32,810 --> 00:03:36,470
security of this model we say that an

84
00:03:36,470 --> 00:03:39,410
adversary who statically corrupts some

85
00:03:39,410 --> 00:03:41,780
set of nodes can't tell if he's

86
00:03:41,780 --> 00:03:45,290
interacting with a real graph or if he's

87
00:03:45,290 --> 00:03:48,739
interacting with a simulated graph that

88
00:03:48,739 --> 00:03:50,840
so the simulator knows the output of the

89
00:03:50,840 --> 00:03:53,959
function and it knows the local topology

90
00:03:53,959 --> 00:03:57,709
of the adversary corrupted nodes notice

91
00:03:57,709 --> 00:03:59,209
the simulator doesn't have an edge

92
00:03:59,209 --> 00:04:01,700
between nodes 1 and 2 because he doesn't

93
00:04:01,700 --> 00:04:04,880
know that exists and node 6 isn't in the

94
00:04:04,880 --> 00:04:06,829
simulated graph because the adversary

95
00:04:06,829 --> 00:04:11,870
can tell that that node exists ok this

96
00:04:11,870 --> 00:04:14,260
seems difficult is this even possible

97
00:04:14,260 --> 00:04:16,820
well it turns out instead of having to

98
00:04:16,820 --> 00:04:19,010
prove that we can get any function at

99
00:04:19,010 --> 00:04:21,470
all in this model it's enough to prove

100
00:04:21,470 --> 00:04:22,820
that we can get topology hiding

101
00:04:22,820 --> 00:04:26,000
broadcast so our goal is going to be to

102
00:04:26,000 --> 00:04:29,659
get broadcast so the setting is let's

103
00:04:29,659 --> 00:04:30,870
consider a naive broad

104
00:04:30,870 --> 00:04:32,760
to demonstrate this we have a broadcast

105
00:04:32,760 --> 00:04:35,700
known know to hear who's got a broadcast

106
00:04:35,700 --> 00:04:38,850
bit and wants to let everyone in the

107
00:04:38,850 --> 00:04:42,390
graph know the broadcast bit so in the

108
00:04:42,390 --> 00:04:44,490
first round nodes 1 & 3 get the

109
00:04:44,490 --> 00:04:47,190
broadcast bit in the next round 1 & 3

110
00:04:47,190 --> 00:04:48,750
send the bit to their neighbors who get

111
00:04:48,750 --> 00:04:51,720
the broadcast bit and then finally node

112
00:04:51,720 --> 00:04:53,850
6 gets the broadcast bit from from her

113
00:04:53,850 --> 00:04:58,760
neighbors this is not topology hiding

114
00:04:58,760 --> 00:05:00,990
for the reason that it reveals the

115
00:05:00,990 --> 00:05:04,260
distance to the broadcaster as soon as 1

116
00:05:04,260 --> 00:05:06,090
& 3 get their message in the first round

117
00:05:06,090 --> 00:05:07,860
they know with our distance 1 from the

118
00:05:07,860 --> 00:05:09,600
broadcaster these guys know their

119
00:05:09,600 --> 00:05:12,150
distance 2 and node 6 knows she's

120
00:05:12,150 --> 00:05:17,490
distance 3 away so it turns out that

121
00:05:17,490 --> 00:05:20,310
this is even harder than we then then

122
00:05:20,310 --> 00:05:22,830
that it's impossible to get topology

123
00:05:22,830 --> 00:05:24,600
hiding computation against any kind of

124
00:05:24,600 --> 00:05:26,690
almost any kind of active adversary like

125
00:05:26,690 --> 00:05:29,370
say your adversary just has the power to

126
00:05:29,370 --> 00:05:32,250
abort to stop communicating in our

127
00:05:32,250 --> 00:05:36,200
communication from through his node in

128
00:05:36,200 --> 00:05:39,900
2015 moran mitchellson showed that

129
00:05:39,900 --> 00:05:42,570
against a fail stop adversary it's

130
00:05:42,570 --> 00:05:44,340
apology hiding broadcast is impossible

131
00:05:44,340 --> 00:05:46,650
and they did this just by showing that

132
00:05:46,650 --> 00:05:48,870
if you have an adversary like this

133
00:05:48,870 --> 00:05:51,600
middle adversary here who can stop

134
00:05:51,600 --> 00:05:53,610
working and disconnect the graph then

135
00:05:53,610 --> 00:05:54,840
this reveals something about the

136
00:05:54,840 --> 00:05:59,550
topology of the graph however the good

137
00:05:59,550 --> 00:06:02,370
news is we can get some results we

138
00:06:02,370 --> 00:06:04,020
already have some results on against

139
00:06:04,020 --> 00:06:09,470
passive adversaries so in 2015 and 2016

140
00:06:09,470 --> 00:06:11,850
there were results on getting topology

141
00:06:11,850 --> 00:06:13,680
hiding broadcast on small diameter

142
00:06:13,680 --> 00:06:16,620
graphs and then earlier this year ok VN

143
00:06:16,620 --> 00:06:18,030
Mehran showed that you could get

144
00:06:18,030 --> 00:06:20,280
topology hiding broadcast on some large

145
00:06:20,280 --> 00:06:23,190
diameter graphs including chains cycles

146
00:06:23,190 --> 00:06:25,980
and trees but the question remained open

147
00:06:25,980 --> 00:06:28,770
is topology hiding computation possible

148
00:06:28,770 --> 00:06:31,110
for all graphs well I wouldn't be

149
00:06:31,110 --> 00:06:34,350
standing here if the answer wasn't yes

150
00:06:34,350 --> 00:06:37,860
it is and that brings us to our formal

151
00:06:37,860 --> 00:06:42,120
results so assuming that decisional

152
00:06:42,120 --> 00:06:43,110
diffie-hellman is hard

153
00:06:43,110 --> 00:06:44,700
topology hiding broad

154
00:06:44,700 --> 00:06:48,540
is feasible for all graphs explicitly

155
00:06:48,540 --> 00:06:51,660
our contribution so the akkadian were on

156
00:06:51,660 --> 00:06:55,770
protocol it showed that given DDH we can

157
00:06:55,770 --> 00:06:57,710
get this thing called or homomorphic

158
00:06:57,710 --> 00:07:00,120
privately key commutative randomized

159
00:07:00,120 --> 00:07:02,970
double encryption and then we show that

160
00:07:02,970 --> 00:07:05,190
this gets us topology hiding broadcast

161
00:07:05,190 --> 00:07:10,500
for all graphs now let's focus in on

162
00:07:10,500 --> 00:07:14,880
this or apart here so or implies

163
00:07:14,880 --> 00:07:17,490
broadcast so we're instead of just going

164
00:07:17,490 --> 00:07:18,810
straight for broadcast we're going to

165
00:07:18,810 --> 00:07:22,140
show actually how to compute the or of a

166
00:07:22,140 --> 00:07:24,900
bunch of bits on a graph so this works

167
00:07:24,900 --> 00:07:27,300
because the output bit is actually equal

168
00:07:27,300 --> 00:07:28,920
to the or of the output bit with a bunch

169
00:07:28,920 --> 00:07:31,620
of zeros great so the source node is

170
00:07:31,620 --> 00:07:33,570
going to have his output bit all other

171
00:07:33,570 --> 00:07:35,910
nodes are going to have zeros and if at

172
00:07:35,910 --> 00:07:37,410
the end of the computation everyone gets

173
00:07:37,410 --> 00:07:39,810
the or of the output bit you will have

174
00:07:39,810 --> 00:07:43,950
broadcast at that bit so our goal will

175
00:07:43,950 --> 00:07:46,500
be to compute that however note that

176
00:07:46,500 --> 00:07:49,440
naive oaring is not topology hiding that

177
00:07:49,440 --> 00:07:51,870
is if you you know just try broadcasting

178
00:07:51,870 --> 00:07:53,730
your bit to your neighbors and then

179
00:07:53,730 --> 00:07:57,210
during the bits you get in return you

180
00:07:57,210 --> 00:07:58,590
run into the same problem that you did

181
00:07:58,590 --> 00:08:00,390
with naive broadcast if the output bit

182
00:08:00,390 --> 00:08:03,240
is 1 you know exactly when you receive

183
00:08:03,240 --> 00:08:06,510
that output bit so we're going to need

184
00:08:06,510 --> 00:08:09,420
these these tools the first tool is we

185
00:08:09,420 --> 00:08:11,130
need our encryption scheme to be or

186
00:08:11,130 --> 00:08:15,240
homomorphic so you have two encrypted

187
00:08:15,240 --> 00:08:16,970
bits and you need to be able to

188
00:08:16,970 --> 00:08:19,110
homomorphic me or them to get there to

189
00:08:19,110 --> 00:08:21,090
get the encryption of two of the or of

190
00:08:21,090 --> 00:08:22,070
those bits

191
00:08:22,070 --> 00:08:25,530
moreover we need to hide the number of

192
00:08:25,530 --> 00:08:29,070
times we've ordered a 1 or a 0 even if

193
00:08:29,070 --> 00:08:30,840
you can decrypt the message you

194
00:08:30,840 --> 00:08:32,580
shouldn't be able to tell that is an

195
00:08:32,580 --> 00:08:35,340
encryption of a one needs to look just

196
00:08:35,340 --> 00:08:37,229
like an encryption of a 1 or a 0

197
00:08:37,229 --> 00:08:39,780
homomorphic lee needs to look just like

198
00:08:39,780 --> 00:08:41,610
an encryption of a 1 or with a 1 home

199
00:08:41,610 --> 00:08:44,760
one more quickly turns out you can get

200
00:08:44,760 --> 00:08:47,030
this just using l-jamaa

201
00:08:47,030 --> 00:08:49,650
alright this brings to mind the

202
00:08:49,650 --> 00:08:52,350
following construction what if we just

203
00:08:52,350 --> 00:08:55,860
tried the naive oaring protocol but now

204
00:08:55,860 --> 00:08:57,000
we encrypt it

205
00:08:57,000 --> 00:09:01,920
first and then ordered them as we went

206
00:09:01,920 --> 00:09:05,970
along well we run into the problem that

207
00:09:05,970 --> 00:09:08,190
this doesn't quite work because how do

208
00:09:08,190 --> 00:09:10,440
you decrypt at the end he you rented the

209
00:09:10,440 --> 00:09:13,320
problem of who has the secret key how do

210
00:09:13,320 --> 00:09:15,180
you get the secret key to everyone else

211
00:09:15,180 --> 00:09:19,370
in the graph so we need one more

212
00:09:19,370 --> 00:09:22,860
property for our encryption scheme and

213
00:09:22,860 --> 00:09:24,690
that is where this privately key

214
00:09:24,690 --> 00:09:26,820
commutative randomized encryption comes

215
00:09:26,820 --> 00:09:29,190
in notice I have a picture of an onion

216
00:09:29,190 --> 00:09:31,320
on the screen that is because we will be

217
00:09:31,320 --> 00:09:33,540
able to add layers of public keys and

218
00:09:33,540 --> 00:09:36,870
delete layers of public keys okay how do

219
00:09:36,870 --> 00:09:38,760
you add layers to an onion maybe it's

220
00:09:38,760 --> 00:09:42,150
more of a parfait I digress

221
00:09:42,150 --> 00:09:45,330
so when we add a layer what are we what

222
00:09:45,330 --> 00:09:47,370
do we what are we doing we have an

223
00:09:47,370 --> 00:09:50,040
encrypted message under one public key

224
00:09:50,040 --> 00:09:52,290
and then we have a secret key that is

225
00:09:52,290 --> 00:09:55,020
unrelated so we have a message encrypted

226
00:09:55,020 --> 00:09:56,820
under the blue public key and a yellow

227
00:09:56,820 --> 00:10:00,710
secret key and using this we can add a

228
00:10:00,710 --> 00:10:03,210
yellow public key layer to our message

229
00:10:03,210 --> 00:10:05,730
this image might be a little bit

230
00:10:05,730 --> 00:10:09,000
misleading we're not really in cryptid

231
00:10:09,000 --> 00:10:12,030
message we're actually multiplying the

232
00:10:12,030 --> 00:10:15,089
two public keys together so what this

233
00:10:15,089 --> 00:10:17,490
actually is doing is producing a message

234
00:10:17,490 --> 00:10:19,140
that looks like it's encrypted or

235
00:10:19,140 --> 00:10:21,720
actually is encrypted under the product

236
00:10:21,720 --> 00:10:24,180
of the two public keys now when you

237
00:10:24,180 --> 00:10:26,550
delete a layer you're just doing this

238
00:10:26,550 --> 00:10:29,160
process in Reverse you have your

239
00:10:29,160 --> 00:10:32,250
encrypted message that's got this

240
00:10:32,250 --> 00:10:34,200
layered property and you have a secret

241
00:10:34,200 --> 00:10:35,880
key corresponding to one of those public

242
00:10:35,880 --> 00:10:38,760
keys and then you can just remove that

243
00:10:38,760 --> 00:10:43,440
layer great this is also possible using

244
00:10:43,440 --> 00:10:43,970
l-jamaa

245
00:10:43,970 --> 00:10:46,710
so now that we have both of these two

246
00:10:46,710 --> 00:10:50,280
tools we're ready to go for through a

247
00:10:50,280 --> 00:10:52,380
warm up protocol before getting to our

248
00:10:52,380 --> 00:10:54,900
actual protocol for all graphs so I'm

249
00:10:54,900 --> 00:10:56,820
going to discuss the cavea Mehran

250
00:10:56,820 --> 00:11:00,170
protocol on getting or on cycle graphs

251
00:11:00,170 --> 00:11:03,300
so they're going to be two phases the

252
00:11:03,300 --> 00:11:05,459
first phase is a forward phase where

253
00:11:05,459 --> 00:11:07,500
we're going to add layers going one way

254
00:11:07,500 --> 00:11:09,830
around the graph the next phase

255
00:11:09,830 --> 00:11:11,720
is a backwards phase where we're going

256
00:11:11,720 --> 00:11:14,540
to remove layers going back around the

257
00:11:14,540 --> 00:11:18,410
other way on the graph let's focus on

258
00:11:18,410 --> 00:11:22,640
how node one is going to get the correct

259
00:11:22,640 --> 00:11:26,570
output bit so in round one node one is

260
00:11:26,570 --> 00:11:29,450
going to encrypt as bin and then send it

261
00:11:29,450 --> 00:11:32,690
- no - no - round two is going to

262
00:11:32,690 --> 00:11:35,150
generate a new public secret key pair

263
00:11:35,150 --> 00:11:38,960
add a layer homework like homomorphic Li

264
00:11:38,960 --> 00:11:40,910
or her own bits and then send this

265
00:11:40,910 --> 00:11:45,350
resulting message to node 3 node 3 does

266
00:11:45,350 --> 00:11:48,110
the same thing a new public secret key

267
00:11:48,110 --> 00:11:51,500
pair adds a layer or is its own bit

268
00:11:51,500 --> 00:11:54,770
homomorphic Lee sends this to node 4 all

269
00:11:54,770 --> 00:11:58,820
right you get the idea hopefully node 4

270
00:11:58,820 --> 00:12:01,190
adds a layer or is his bit sends it to

271
00:12:01,190 --> 00:12:04,250
node 5 node 5 doesn't need to add

272
00:12:04,250 --> 00:12:06,650
another layer he just needs to

273
00:12:06,650 --> 00:12:12,020
homomorphic Li or his own bit and now we

274
00:12:12,020 --> 00:12:14,560
have encrypted up here the output bit

275
00:12:14,560 --> 00:12:17,390
and now we can begin the backwards phase

276
00:12:17,390 --> 00:12:18,880
and start going back around the graph

277
00:12:18,880 --> 00:12:20,990
hopefully you see where this is going

278
00:12:20,990 --> 00:12:24,080
so node 5 sends this entire message back

279
00:12:24,080 --> 00:12:27,230
to node 4 node 4 uses the red secret key

280
00:12:27,230 --> 00:12:29,960
to remove the red layer sends this back

281
00:12:29,960 --> 00:12:32,480
to node 3 node 3 uses is light blue

282
00:12:32,480 --> 00:12:35,210
secret key to remove that layer sends it

283
00:12:35,210 --> 00:12:39,560
back to node 2 who removes a layer sends

284
00:12:39,560 --> 00:12:41,780
it back to node 1 now node 1 has the

285
00:12:41,780 --> 00:12:43,880
corresponding secret key here it's no

286
00:12:43,880 --> 00:12:46,090
node 1 decrypt the message and now has

287
00:12:46,090 --> 00:12:49,670
in plain text the or of all bits in the

288
00:12:49,670 --> 00:12:51,050
graph great

289
00:12:51,050 --> 00:12:53,960
well node 1 has the output but we now

290
00:12:53,960 --> 00:12:55,430
need to make sure that every other node

291
00:12:55,430 --> 00:12:57,550
in the graph also gets the output bit

292
00:12:57,550 --> 00:13:00,020
this isn't too hard we'll just run the

293
00:13:00,020 --> 00:13:03,710
same protocol simultaneously for each

294
00:13:03,710 --> 00:13:08,000
node so correctness of the protocol and

295
00:13:08,000 --> 00:13:10,310
run one everyone you know sends their

296
00:13:10,310 --> 00:13:12,920
bit to their neighbors run the protocol

297
00:13:12,920 --> 00:13:14,780
for every node every node is going to

298
00:13:14,780 --> 00:13:17,360
get the output bit at the end to argue

299
00:13:17,360 --> 00:13:22,010
topology hiding of this protocol first

300
00:13:22,010 --> 00:13:23,270
we have to note that

301
00:13:23,270 --> 00:13:24,890
you know everyone knows they're in a

302
00:13:24,890 --> 00:13:27,080
cycle so what are you hiding you're

303
00:13:27,080 --> 00:13:28,670
hiding the order of the nodes in the

304
00:13:28,670 --> 00:13:32,030
cycle and you can see this intuitively

305
00:13:32,030 --> 00:13:34,610
because of the semantic security of the

306
00:13:34,610 --> 00:13:36,020
encryption means you can't tell when you

307
00:13:36,020 --> 00:13:38,630
get a one or a zero and the rear Animas

308
00:13:38,630 --> 00:13:40,250
ation the adding of the new public keys

309
00:13:40,250 --> 00:13:42,830
mean that each nodes view is

310
00:13:42,830 --> 00:13:45,140
indistinguishable from any other nodes

311
00:13:45,140 --> 00:13:50,690
view great so our work is going to

312
00:13:50,690 --> 00:13:52,610
essentially a set extend this whole like

313
00:13:52,610 --> 00:13:55,670
adding layers and oaring protocol the

314
00:13:55,670 --> 00:13:57,800
akkadian Mehran protocol had this

315
00:13:57,800 --> 00:14:00,080
observation that if you had a path that

316
00:14:00,080 --> 00:14:02,750
covered the graph your protocol would be

317
00:14:02,750 --> 00:14:05,030
correct so instead of taking a

318
00:14:05,030 --> 00:14:07,400
prescribed path around the graph we're

319
00:14:07,400 --> 00:14:09,950
just gonna take a random walk and as

320
00:14:09,950 --> 00:14:11,540
long as I random walk covers the graph

321
00:14:11,540 --> 00:14:12,920
we'll be fine

322
00:14:12,920 --> 00:14:15,530
we can hit the same node more than once

323
00:14:15,530 --> 00:14:18,530
this won't matter because oaring a bit

324
00:14:18,530 --> 00:14:20,720
twice is it going to change the output

325
00:14:20,720 --> 00:14:25,160
at all and and as long as every node

326
00:14:25,160 --> 00:14:27,230
runs a random walk every node will get

327
00:14:27,230 --> 00:14:29,870
the output bit at the end so this brings

328
00:14:29,870 --> 00:14:32,660
the following protocol to mind every

329
00:14:32,660 --> 00:14:34,850
node is just going to start a random

330
00:14:34,850 --> 00:14:37,880
walk and buy as long as it runs long

331
00:14:37,880 --> 00:14:39,950
enough every random walk will cover the

332
00:14:39,950 --> 00:14:42,380
graph and every node will get the output

333
00:14:42,380 --> 00:14:46,670
bit this will not be enough for the

334
00:14:46,670 --> 00:14:49,580
following reason so let's say let's

335
00:14:49,580 --> 00:14:54,050
focus on node 3 so let's say every one

336
00:14:54,050 --> 00:14:55,730
of nodes threes neighbors decides to

337
00:14:55,730 --> 00:14:57,350
start the random walk by sending a

338
00:14:57,350 --> 00:14:59,960
message to node 3 node 3 being a

339
00:14:59,960 --> 00:15:02,270
diligent node is randomly independently

340
00:15:02,270 --> 00:15:04,190
going to decide where those walks are

341
00:15:04,190 --> 00:15:07,700
going to go next well now we have a

342
00:15:07,700 --> 00:15:08,300
problem

343
00:15:08,300 --> 00:15:10,910
notes 2 and 7 have now learned that node

344
00:15:10,910 --> 00:15:13,460
3 has another neighbor other than

345
00:15:13,460 --> 00:15:14,320
themselves

346
00:15:14,320 --> 00:15:17,810
node 4 has learned that node 3 has two

347
00:15:17,810 --> 00:15:20,300
other neighbors and node 5 has even

348
00:15:20,300 --> 00:15:21,620
learned something probabilistically

349
00:15:21,620 --> 00:15:23,390
about the number of neighbors node 3 has

350
00:15:23,390 --> 00:15:28,610
so this is also not topology hiding so

351
00:15:28,610 --> 00:15:30,260
to fix this if you look at the title of

352
00:15:30,260 --> 00:15:32,480
the slide we're going to use correlated

353
00:15:32,480 --> 00:15:35,480
random walks and we're going to make

354
00:15:35,480 --> 00:15:36,550
sure that

355
00:15:36,550 --> 00:15:38,350
graph topology doesn't affect how many

356
00:15:38,350 --> 00:15:40,660
messages go along each edge so we're

357
00:15:40,660 --> 00:15:43,089
going to have one walk per direction on

358
00:15:43,089 --> 00:15:45,820
each edge this will be clear hopefully

359
00:15:45,820 --> 00:15:49,990
in a moment so to correlate the walks no

360
00:15:49,990 --> 00:15:51,910
three is going to get messages from

361
00:15:51,910 --> 00:15:53,950
all's neighbors walks from all of his

362
00:15:53,950 --> 00:15:55,570
neighbors and then he's going to

363
00:15:55,570 --> 00:15:58,260
generate a fresh random permutation and

364
00:15:58,260 --> 00:16:01,209
then of his edges is going to permeate

365
00:16:01,209 --> 00:16:02,950
those messages around to decide where to

366
00:16:02,950 --> 00:16:04,779
send them next and then he's going to

367
00:16:04,779 --> 00:16:08,019
send those out he gets one message in on

368
00:16:08,019 --> 00:16:10,329
each edge one message out and sends one

369
00:16:10,329 --> 00:16:13,899
message out on each of his edges and as

370
00:16:13,899 --> 00:16:15,339
long as you invert the permutations on

371
00:16:15,339 --> 00:16:18,490
the way back the protocol is still going

372
00:16:18,490 --> 00:16:21,149
to be correct

373
00:16:21,209 --> 00:16:24,070
speaking of correctness we have to make

374
00:16:24,070 --> 00:16:25,300
sure that the random walk is don't

375
00:16:25,300 --> 00:16:29,500
actually take too long to do that we're

376
00:16:29,500 --> 00:16:31,120
going to talk about the cover time of a

377
00:16:31,120 --> 00:16:33,850
graph G the cover time of a graph is the

378
00:16:33,850 --> 00:16:36,970
maximum expected time it takes to visit

379
00:16:36,970 --> 00:16:38,940
all nodes in a graph using a random walk

380
00:16:38,940 --> 00:16:42,070
and we have this convenient upper bound

381
00:16:42,070 --> 00:16:46,540
for n cubed on the cover time of any

382
00:16:46,540 --> 00:16:50,740
graph on n nodes so this means if we

383
00:16:50,740 --> 00:16:53,740
take about n to the 4 steps we will

384
00:16:53,740 --> 00:16:55,870
cover the any random walk will cover the

385
00:16:55,870 --> 00:16:57,970
graph with overwhelming probability and

386
00:16:57,970 --> 00:17:00,399
so we prove correctness for all of the

387
00:17:00,399 --> 00:17:02,890
random walks in our graph just with the

388
00:17:02,890 --> 00:17:08,410
Union bound and so we have correctness

389
00:17:08,410 --> 00:17:10,839
of our algorithm let's finish with some

390
00:17:10,839 --> 00:17:15,010
security so let's focus again on node 3

391
00:17:15,010 --> 00:17:16,900
node 3 gets encrypted messages from its

392
00:17:16,900 --> 00:17:19,390
neighbors every round he can't tell if

393
00:17:19,390 --> 00:17:21,160
he's getting a 0 or 1 because of

394
00:17:21,160 --> 00:17:25,179
semantic security because he's doing all

395
00:17:25,179 --> 00:17:27,760
of this permuting of the messages

396
00:17:27,760 --> 00:17:29,950
everyone else is doing commuting re

397
00:17:29,950 --> 00:17:32,800
randomization adding a public key he

398
00:17:32,800 --> 00:17:34,450
can't tell where any of those messages

399
00:17:34,450 --> 00:17:37,330
have been for example he can't tell if

400
00:17:37,330 --> 00:17:39,809
the message he got from node 7 came from

401
00:17:39,809 --> 00:17:44,919
8 or from node 6 when this means node 3

402
00:17:44,919 --> 00:17:47,919
can't tell if he's interacting with a

403
00:17:47,919 --> 00:17:50,220
real graph or

404
00:17:50,220 --> 00:17:52,470
facin or with a simulator who only knows

405
00:17:52,470 --> 00:17:55,169
the output bit and the local information

406
00:17:55,169 --> 00:17:58,770
of no threes neighbors so in the forward

407
00:17:58,770 --> 00:18:01,710
phase of the walks the simulator just

408
00:18:01,710 --> 00:18:04,710
sends encryptions of zero through three

409
00:18:04,710 --> 00:18:07,770
and in the backwards phase the simulator

410
00:18:07,770 --> 00:18:09,539
just sends encryptions of the output bit

411
00:18:09,539 --> 00:18:13,230
by the end of the protocol no three gets

412
00:18:13,230 --> 00:18:18,090
the output bit as expected now two one

413
00:18:18,090 --> 00:18:20,549
one more fun little note here is that we

414
00:18:20,549 --> 00:18:23,730
can deer an demise the walks this is

415
00:18:23,730 --> 00:18:25,350
interesting because it brings us one

416
00:18:25,350 --> 00:18:26,940
step closer to getting a perfectly

417
00:18:26,940 --> 00:18:31,260
correct topology hiding algorithm I say

418
00:18:31,260 --> 00:18:35,340
one step because unfortunately we have

419
00:18:35,340 --> 00:18:37,110
negligible error both in the walks and

420
00:18:37,110 --> 00:18:41,549
in the homomorphic we secure encryption

421
00:18:41,549 --> 00:18:44,190
scheme the algum all is has a negligible

422
00:18:44,190 --> 00:18:46,610
probability of failing

423
00:18:46,610 --> 00:18:50,789
so we have our Universal Explorer up

424
00:18:50,789 --> 00:18:52,830
here and we're going to be using

425
00:18:52,830 --> 00:18:54,450
something called a universal exploration

426
00:18:54,450 --> 00:18:56,520
sequence to D randomize these walks a

427
00:18:56,520 --> 00:18:59,340
universal exploration sequence is just a

428
00:18:59,340 --> 00:19:01,919
set for for graphs of size n is just a

429
00:19:01,919 --> 00:19:04,530
set of instructions such that if you

430
00:19:04,530 --> 00:19:07,230
follow them for a walk you're guaranteed

431
00:19:07,230 --> 00:19:10,020
to hit every node in the graph any graph

432
00:19:10,020 --> 00:19:12,240
of size n and the best part about these

433
00:19:12,240 --> 00:19:13,890
walks is that they're all relative to

434
00:19:13,890 --> 00:19:16,799
position and locally computable so every

435
00:19:16,799 --> 00:19:18,960
node in the graph can compute the same

436
00:19:18,960 --> 00:19:21,419
set of instructions as saying the

437
00:19:21,419 --> 00:19:24,990
universal exploration sequence all right

438
00:19:24,990 --> 00:19:26,970
I'm going to conclude with a couple of

439
00:19:26,970 --> 00:19:30,120
open questions so it is impossible to

440
00:19:30,120 --> 00:19:32,429
get topology hiding computation if the

441
00:19:32,429 --> 00:19:34,650
adversary can disconnect the graph but

442
00:19:34,650 --> 00:19:36,870
what if we don't allow the adversary to

443
00:19:36,870 --> 00:19:38,700
disconnect the graph but we still let

444
00:19:38,700 --> 00:19:40,470
him deviate from the protocol in some

445
00:19:40,470 --> 00:19:42,870
way then there's also the question of

446
00:19:42,870 --> 00:19:45,299
dynamic graphs in the example where you

447
00:19:45,299 --> 00:19:47,490
have cars on a highway communicating

448
00:19:47,490 --> 00:19:50,580
locally with each other you always have

449
00:19:50,580 --> 00:19:52,559
cars entering the highway and leaving

450
00:19:52,559 --> 00:19:54,510
the highway so the graph is going to be

451
00:19:54,510 --> 00:19:57,470
changing but not adversarially and

452
00:19:57,470 --> 00:20:01,620
finally here is a slide reviewing the

453
00:20:01,620 --> 00:20:04,129
algorithm

454
00:20:05,600 --> 00:20:11,530
[Applause]

