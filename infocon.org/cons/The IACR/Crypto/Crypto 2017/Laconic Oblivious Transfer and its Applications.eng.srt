1
00:00:05,970 --> 00:00:09,120
I'm going to tell you laconic ugly will

2
00:00:09,120 --> 00:00:12,300
transfer and it's applications so in

3
00:00:12,300 --> 00:00:15,539
this talk I have only one thing to tell

4
00:00:15,539 --> 00:00:18,060
you that is the most interesting and

5
00:00:18,060 --> 00:00:20,640
most important part of this work it is

6
00:00:20,640 --> 00:00:24,060
this new notion called laconic oblivious

7
00:00:24,060 --> 00:00:27,180
transfer or laconic ot for short that

8
00:00:27,180 --> 00:00:29,970
you introduced in this work and if you

9
00:00:29,970 --> 00:00:31,920
just want to like spend five minutes for

10
00:00:31,920 --> 00:00:33,960
this talk please stay with me in the

11
00:00:33,960 --> 00:00:37,880
first five minutes okay so what is it

12
00:00:37,880 --> 00:00:40,920
let's start from the definition of habla

13
00:00:40,920 --> 00:00:44,130
means transfer which is a special secure

14
00:00:44,130 --> 00:00:46,650
two-party computation protocol where we

15
00:00:46,650 --> 00:00:49,649
have a sender receiver Sandra has two

16
00:00:49,649 --> 00:00:53,130
messages m0 m1 as input and the receiver

17
00:00:53,130 --> 00:00:56,640
has a single bit B as input and then at

18
00:00:56,640 --> 00:00:58,680
the end of the protocol the receiver

19
00:00:58,680 --> 00:01:01,649
gets one but two messages depending on

20
00:01:01,649 --> 00:01:04,078
his choice bit and the sender gets

21
00:01:04,078 --> 00:01:07,590
nothing the security guarantee is that

22
00:01:07,590 --> 00:01:10,830
the beta P is hidden to the sender and

23
00:01:10,830 --> 00:01:13,650
the other message m sub a1 minus V is

24
00:01:13,650 --> 00:01:16,020
hidden to the receiver so this is just

25
00:01:16,020 --> 00:01:18,060
the definition of oblivious transfer and

26
00:01:18,060 --> 00:01:22,020
if you consider a particular ot protocol

27
00:01:22,020 --> 00:01:25,200
that is true message ot there are only

28
00:01:25,200 --> 00:01:28,080
two messages in this protocol in the

29
00:01:28,080 --> 00:01:30,240
first message the receiver is somehow

30
00:01:30,240 --> 00:01:33,360
commits to his bit B to the sender and

31
00:01:33,360 --> 00:01:35,670
keep some randomness are as private

32
00:01:35,670 --> 00:01:38,580
information and then the second message

33
00:01:38,580 --> 00:01:41,760
the sender is somehow in quits her two

34
00:01:41,760 --> 00:01:44,270
messages and sent to the receiver and

35
00:01:44,270 --> 00:01:47,159
then the receiver can use the randomness

36
00:01:47,159 --> 00:01:50,909
to recover M sub B as desired the

37
00:01:50,909 --> 00:01:52,439
security guarantee the same as before

38
00:01:52,439 --> 00:01:55,350
the first message hides the bit P

39
00:01:55,350 --> 00:01:57,390
against the sender and the second

40
00:01:57,390 --> 00:02:00,930
message hides the M sub y minus B

41
00:02:00,930 --> 00:02:03,840
against the receiver P so this is to

42
00:02:03,840 --> 00:02:06,810
methodology and here comes the most

43
00:02:06,810 --> 00:02:09,628
important slide of this talk the

44
00:02:09,628 --> 00:02:12,930
definition of laconic OT it is almost

45
00:02:12,930 --> 00:02:15,450
the same as before except now the

46
00:02:15,450 --> 00:02:16,380
receiver

47
00:02:16,380 --> 00:02:18,990
instead of just having one bit has input

48
00:02:18,990 --> 00:02:22,860
she has a huge database of size M and

49
00:02:22,860 --> 00:02:25,620
then again in the first message he

50
00:02:25,620 --> 00:02:28,710
somehow commits to this huge database to

51
00:02:28,710 --> 00:02:30,750
the sender include some randomness our

52
00:02:30,750 --> 00:02:33,450
as private information and then the

53
00:02:33,450 --> 00:02:36,480
sender again she has two messages m0 m1

54
00:02:36,480 --> 00:02:39,930
but in addition she can pick a location

55
00:02:39,930 --> 00:02:43,650
out of the database and again she

56
00:02:43,650 --> 00:02:45,450
somehow in quits her two messages

57
00:02:45,450 --> 00:02:48,840
according to this location L and then

58
00:02:48,840 --> 00:02:51,360
the receiver can use the database along

59
00:02:51,360 --> 00:02:53,700
with the randomness to recover one of

60
00:02:53,700 --> 00:02:56,790
the two messages depending on this bit

61
00:02:56,790 --> 00:03:00,390
here so denoted as M sabadie of L so DF

62
00:03:00,390 --> 00:03:03,090
L is the else page of the database and

63
00:03:03,090 --> 00:03:06,600
if this bit is 0 the receiver gets m0 if

64
00:03:06,600 --> 00:03:07,680
this bit is 1

65
00:03:07,680 --> 00:03:12,570
he gets m1 okay the security definition

66
00:03:12,570 --> 00:03:13,590
is the same as before

67
00:03:13,590 --> 00:03:16,200
the first message hides the database

68
00:03:16,200 --> 00:03:18,090
against the sender and the second

69
00:03:18,090 --> 00:03:21,450
message can only be decrypted to m0 if

70
00:03:21,450 --> 00:03:24,180
this bit here is 0 can only be decrypted

71
00:03:24,180 --> 00:03:28,650
to m1 if this bit is 1 so if you use the

72
00:03:28,650 --> 00:03:30,810
existing techniques of to message or key

73
00:03:30,810 --> 00:03:33,180
you can do something like this but the

74
00:03:33,180 --> 00:03:35,790
first message will be huge it would grow

75
00:03:35,790 --> 00:03:38,930
with the size of a database but

76
00:03:38,930 --> 00:03:41,850
laconically has the additional

77
00:03:41,850 --> 00:03:44,940
requirement of efficiency namely these

78
00:03:44,940 --> 00:03:47,220
two messages here and the computation

79
00:03:47,220 --> 00:03:51,510
here are succinct by succinct I mean the

80
00:03:51,510 --> 00:03:53,910
communication complexity here and the

81
00:03:53,910 --> 00:03:56,010
computational complexity here are

82
00:03:56,010 --> 00:03:58,380
independent of a size of database only

83
00:03:58,380 --> 00:04:00,690
depends on the security parameter okay

84
00:04:00,690 --> 00:04:03,860
so that's why we call it the laconic OT

85
00:04:03,860 --> 00:04:06,510
and moreover it can be done multiple

86
00:04:06,510 --> 00:04:09,210
times namely the sender can later come

87
00:04:09,210 --> 00:04:12,420
up with a new mass of her messages and a

88
00:04:12,420 --> 00:04:15,540
new location and do it again and so on

89
00:04:15,540 --> 00:04:18,000
any arbitrary point Omiya number of

90
00:04:18,000 --> 00:04:21,390
times okay so this is a definition of

91
00:04:21,390 --> 00:04:25,020
laconic OT and our main result is that

92
00:04:25,020 --> 00:04:27,419
we can construct a such a primitive

93
00:04:27,419 --> 00:04:29,360
from the decision or TV home

94
00:04:29,360 --> 00:04:34,099
assumption here I wanna stress that we

95
00:04:34,099 --> 00:04:35,870
don't even know how to construct a

96
00:04:35,870 --> 00:04:37,400
laconic whole team from fully

97
00:04:37,400 --> 00:04:40,219
homomorphic encryption fhe because

98
00:04:40,219 --> 00:04:43,039
usually you would think fh is like a

99
00:04:43,039 --> 00:04:45,620
very natural and powerful tool to reduce

100
00:04:45,620 --> 00:04:48,289
the communication complexity but here it

101
00:04:48,289 --> 00:04:50,629
turns out it doesn't help in this case

102
00:04:50,629 --> 00:04:52,400
we don't know how to construct a

103
00:04:52,400 --> 00:04:55,099
laconically even with fhe the only

104
00:04:55,099 --> 00:04:57,800
natural way to construct it is via very

105
00:04:57,800 --> 00:05:00,530
strong assumptions like obfuscation or

106
00:05:00,530 --> 00:05:03,680
witness encryption ok so this is our

107
00:05:03,680 --> 00:05:06,710
result of five minutes up you're good to

108
00:05:06,710 --> 00:05:11,990
go but then you might be asked why like

109
00:05:11,990 --> 00:05:13,909
why should I care about this primitive

110
00:05:13,909 --> 00:05:16,460
why should I try to understand or

111
00:05:16,460 --> 00:05:18,740
remember this definition why is it

112
00:05:18,740 --> 00:05:22,360
interesting at all right

113
00:05:22,360 --> 00:05:25,639
so one of the reasons is that turns out

114
00:05:25,639 --> 00:05:28,879
to be very useful very powerful here are

115
00:05:28,879 --> 00:05:30,770
a bunch of applications that we found

116
00:05:30,770 --> 00:05:33,529
using laconic OT in different scenarios

117
00:05:33,529 --> 00:05:36,080
of secure computation and we believe

118
00:05:36,080 --> 00:05:38,240
there are more we believe it is a very

119
00:05:38,240 --> 00:05:40,759
very very powerful tool to reduce the

120
00:05:40,759 --> 00:05:42,620
communication capacity and computational

121
00:05:42,620 --> 00:05:44,839
complexity in different scenarios I

122
00:05:44,839 --> 00:05:48,469
wanna mention the last point is not a

123
00:05:48,469 --> 00:05:51,589
direct application of laconically

124
00:05:51,589 --> 00:05:54,500
but our ideas and techniques have been

125
00:05:54,500 --> 00:05:57,919
very useful to construct this identity

126
00:05:57,919 --> 00:05:59,330
based encryption from the diffie-hellman

127
00:05:59,330 --> 00:06:01,400
assumption which you have already seen

128
00:06:01,400 --> 00:06:05,240
yesterday so I won't go over all the

129
00:06:05,240 --> 00:06:07,669
applications I will just talk about the

130
00:06:07,669 --> 00:06:11,300
first one but before that I want to

131
00:06:11,300 --> 00:06:14,360
emphasize some of the key words here to

132
00:06:14,360 --> 00:06:17,150
see what is in common among these

133
00:06:17,150 --> 00:06:20,029
applications in what kind of scenarios

134
00:06:20,029 --> 00:06:23,539
could electronically be helpful as you

135
00:06:23,539 --> 00:06:26,419
can see large inputs large inputs around

136
00:06:26,419 --> 00:06:28,969
go around around something like this so

137
00:06:28,969 --> 00:06:32,330
it is also somewhat obvious from the

138
00:06:32,330 --> 00:06:34,250
definition of laconically

139
00:06:34,250 --> 00:06:36,919
that it could be helpful when there is a

140
00:06:36,919 --> 00:06:39,080
large database when you are doing

141
00:06:39,080 --> 00:06:41,719
largest girl secure computation so it

142
00:06:41,719 --> 00:06:42,270
could be

143
00:06:42,270 --> 00:06:44,700
helpful to reduce the communication

144
00:06:44,700 --> 00:06:46,290
complexity or the computational

145
00:06:46,290 --> 00:06:49,260
complexity in different scenarios I will

146
00:06:49,260 --> 00:06:52,260
elaborate more on this later so in the

147
00:06:52,260 --> 00:06:55,200
rest or talk I will first talk about the

148
00:06:55,200 --> 00:06:57,330
first application to give you a better

149
00:06:57,330 --> 00:07:00,120
sense how to use laconic code here and

150
00:07:00,120 --> 00:07:02,010
now I will tell you how to construct it

151
00:07:02,010 --> 00:07:05,640
from village okay so let's start from

152
00:07:05,640 --> 00:07:07,770
the first application are now

153
00:07:07,770 --> 00:07:10,560
interactive secure computation for large

154
00:07:10,560 --> 00:07:13,320
inputs in the circuit model what does it

155
00:07:13,320 --> 00:07:16,860
mean right start let's start with the

156
00:07:16,860 --> 00:07:18,690
definition of secure two-party

157
00:07:18,690 --> 00:07:21,480
computation so we have two parties they

158
00:07:21,480 --> 00:07:23,340
want to join any compute some function f

159
00:07:23,340 --> 00:07:26,550
on their private inputs x and y both

160
00:07:26,550 --> 00:07:28,620
parties who want to learn the output f

161
00:07:28,620 --> 00:07:31,110
of XY without revealing any more

162
00:07:31,110 --> 00:07:32,940
information about their private inputs

163
00:07:32,940 --> 00:07:35,610
so this is definition of two parties

164
00:07:35,610 --> 00:07:38,310
secure computation and we are

165
00:07:38,310 --> 00:07:41,190
particularly interested in the setting

166
00:07:41,190 --> 00:07:43,200
where one of the parties let's say me

167
00:07:43,200 --> 00:07:46,470
has a huge database and the function

168
00:07:46,470 --> 00:07:48,330
that we are computing is a boolean

169
00:07:48,330 --> 00:07:50,790
circuit so this is a secure computation

170
00:07:50,790 --> 00:07:54,380
or large inputs in the circuit model and

171
00:07:54,380 --> 00:07:57,810
then this notion of non interactive

172
00:07:57,810 --> 00:08:00,450
secure computation or misc for short is

173
00:08:00,450 --> 00:08:03,410
a notion introduced by Shia law in 2011

174
00:08:03,410 --> 00:08:06,660
so in the study of misc on large inputs

175
00:08:06,660 --> 00:08:09,930
there is one party let's say me who has

176
00:08:09,930 --> 00:08:12,600
a huge database let's say I have put all

177
00:08:12,600 --> 00:08:15,420
my data of my entire life in this

178
00:08:15,420 --> 00:08:19,560
database ok and then I somehow compute a

179
00:08:19,560 --> 00:08:22,440
succinct commitment of my huge database

180
00:08:22,440 --> 00:08:25,800
and then publish to the word I put it on

181
00:08:25,800 --> 00:08:27,840
my home page published to the world and

182
00:08:27,840 --> 00:08:30,870
then whoever wants to do the previous

183
00:08:30,870 --> 00:08:33,690
secure computation with me can do it in

184
00:08:33,690 --> 00:08:37,289
a non interactively in particular let's

185
00:08:37,289 --> 00:08:39,360
say there is a party Alice who has input

186
00:08:39,360 --> 00:08:41,640
X she wants to do the previous secure

187
00:08:41,640 --> 00:08:42,780
computation with me

188
00:08:42,780 --> 00:08:45,270
she can just send me a single message

189
00:08:45,270 --> 00:08:49,440
and then I can use my database and the

190
00:08:49,440 --> 00:08:52,440
randomness R to recover the output C of

191
00:08:52,440 --> 00:08:53,300
X comma

192
00:08:53,300 --> 00:08:56,990
and I can do it with any any any person

193
00:08:56,990 --> 00:08:59,180
in the world for example there is

194
00:08:59,180 --> 00:09:00,770
another Ellis who is a different acts

195
00:09:00,770 --> 00:09:04,340
she can also do it with me in and I

196
00:09:04,340 --> 00:09:10,130
interactively and so on the key aspect

197
00:09:10,130 --> 00:09:13,160
in this application is that we can make

198
00:09:13,160 --> 00:09:15,470
the first message that had published to

199
00:09:15,470 --> 00:09:18,200
the world to be succinct otherwise I

200
00:09:18,200 --> 00:09:19,550
wouldn't be able to put it on my

201
00:09:19,550 --> 00:09:22,580
homepage right so this the succinctness

202
00:09:22,580 --> 00:09:26,260
is a very key point in this application

203
00:09:26,260 --> 00:09:29,620
and so if you look at this picture

204
00:09:29,620 --> 00:09:32,780
especially it looks very similar to the

205
00:09:32,780 --> 00:09:35,390
definition of lock on ecology if you

206
00:09:35,390 --> 00:09:37,970
didn't see it you can try this way and

207
00:09:37,970 --> 00:09:41,480
then this is exactly what Lacan quality

208
00:09:41,480 --> 00:09:44,060
is doing and we should be able to use

209
00:09:44,060 --> 00:09:46,940
lock on ecology here so what do it from

210
00:09:46,940 --> 00:09:49,580
laconic hold here and plus we were use a

211
00:09:49,580 --> 00:09:51,970
primitive cordial Scarborough circuit

212
00:09:51,970 --> 00:09:54,500
now I want to stress here a little bit

213
00:09:54,500 --> 00:09:57,350
that we don't even know how to do this

214
00:09:57,350 --> 00:10:00,380
via this the strong primitive fully

215
00:10:00,380 --> 00:10:04,010
homomorphic encryption fhe okay even

216
00:10:04,010 --> 00:10:05,180
though it is a very straightforward

217
00:10:05,180 --> 00:10:08,120
application of Lacan ecology so let's

218
00:10:08,120 --> 00:10:12,110
see how it works first I wanna briefly

219
00:10:12,110 --> 00:10:14,630
describe y'all Scarborough circuit where

220
00:10:14,630 --> 00:10:17,360
you have a governor and evaluator and a

221
00:10:17,360 --> 00:10:21,170
circuit see first the gobbler will

222
00:10:21,170 --> 00:10:23,480
gobble this circuit into a garbage

223
00:10:23,480 --> 00:10:27,050
circuit and along with every wire there

224
00:10:27,050 --> 00:10:30,200
are two bits bit strings random bit

225
00:10:30,200 --> 00:10:33,680
strings we call them labels so one label

226
00:10:33,680 --> 00:10:36,230
corresponding to this while being 0 one

227
00:10:36,230 --> 00:10:37,910
label corresponding to this while being

228
00:10:37,910 --> 00:10:40,490
one we call them lazier label and the

229
00:10:40,490 --> 00:10:44,030
one label and these labels are hidden to

230
00:10:44,030 --> 00:10:47,600
the evaluator but if the evaluator wants

231
00:10:47,600 --> 00:10:50,510
to evaluate the scabbard circuit he will

232
00:10:50,510 --> 00:10:53,630
need one label per input wire and then

233
00:10:53,630 --> 00:10:55,820
he can evaluate the gap of the gates one

234
00:10:55,820 --> 00:10:58,040
by one and eventually figure out the

235
00:10:58,040 --> 00:11:01,010
output of this evaluation and the

236
00:11:01,010 --> 00:11:04,400
security guarantees that the evaluator

237
00:11:04,400 --> 00:11:06,980
learns nothing more than the output okay

238
00:11:06,980 --> 00:11:09,730
so this is Cabo y'all Cabo circuit and

239
00:11:09,730 --> 00:11:12,230
back to the problem that we want to

240
00:11:12,230 --> 00:11:15,950
solve first I want to commit I want to

241
00:11:15,950 --> 00:11:17,960
commit to my huge data base and publish

242
00:11:17,960 --> 00:11:20,240
to the word and now whoever wants to do

243
00:11:20,240 --> 00:11:22,190
the secure computation can just send me

244
00:11:22,190 --> 00:11:24,980
a single message okay and say here is a

245
00:11:24,980 --> 00:11:27,020
circuit that we want to join recompute

246
00:11:27,020 --> 00:11:30,560
okay so since they look so similar to

247
00:11:30,560 --> 00:11:33,170
the definition of laconic okay let's

248
00:11:33,170 --> 00:11:36,080
just do the conical key okay so the

249
00:11:36,080 --> 00:11:37,820
first message would just be the first

250
00:11:37,820 --> 00:11:40,940
message of my lock on ecology and then

251
00:11:40,940 --> 00:11:43,760
in the second a message pallets will

252
00:11:43,760 --> 00:11:46,430
generate a kabob circuit for the circuit

253
00:11:46,430 --> 00:11:49,670
that we want to join recompute and now I

254
00:11:49,670 --> 00:11:51,740
become the evaluator of the gobble

255
00:11:51,740 --> 00:11:54,500
circuit I will need one label per input

256
00:11:54,500 --> 00:11:58,040
wires for the input wires from Alice it

257
00:11:58,040 --> 00:12:00,320
is very simple she can just send them

258
00:12:00,320 --> 00:12:03,170
directly to me right but for the input

259
00:12:03,170 --> 00:12:06,080
wires from me how am I going to get

260
00:12:06,080 --> 00:12:09,890
these labels ideally we want to do one

261
00:12:09,890 --> 00:12:13,030
oblivious transfer per wire for example

262
00:12:13,030 --> 00:12:16,580
for the first wire the two inputs from

263
00:12:16,580 --> 00:12:19,910
Alice are the two labels for this wire

264
00:12:19,910 --> 00:12:23,090
and my input bit is the first bit of the

265
00:12:23,090 --> 00:12:25,730
database so if the first bit is 0 I get

266
00:12:25,730 --> 00:12:28,580
the 0 label if the first bit is 1 I get

267
00:12:28,580 --> 00:12:31,040
the one label but we cannot do our

268
00:12:31,040 --> 00:12:32,240
believe insurance where it needs more

269
00:12:32,240 --> 00:12:35,390
interactions but if you think about it

270
00:12:35,390 --> 00:12:38,690
this is exactly what a laconic code you

271
00:12:38,690 --> 00:12:43,430
can do in particular Alice just needs to

272
00:12:43,430 --> 00:12:46,760
generate one laconic ot ciphertext upper

273
00:12:46,760 --> 00:12:49,960
wire and the for example the first

274
00:12:49,960 --> 00:12:52,700
ciphertext can only be decrypted should

275
00:12:52,700 --> 00:12:56,200
be 0 label if the first bit here is 0

276
00:12:56,200 --> 00:12:58,730
can only be decrypted through the one

277
00:12:58,730 --> 00:13:02,000
label if the first bit here is 1 this is

278
00:13:02,000 --> 00:13:04,190
exactly what a laconic code you can do

279
00:13:04,190 --> 00:13:06,680
and then using a con equality I can use

280
00:13:06,680 --> 00:13:08,780
the database and randomness to recover

281
00:13:08,780 --> 00:13:11,150
one label print put wire and then I can

282
00:13:11,150 --> 00:13:13,820
evaluate the gaga circuit and we're done

283
00:13:13,820 --> 00:13:16,570
right I wanna say

284
00:13:16,570 --> 00:13:18,940
a few more words about the intuitions of

285
00:13:18,940 --> 00:13:21,400
this application here if you think about

286
00:13:21,400 --> 00:13:25,090
it it is like doing oblivious transfer

287
00:13:25,090 --> 00:13:26,740
first of all the first bit of the

288
00:13:26,740 --> 00:13:28,780
database and then a second a bit and and

289
00:13:28,780 --> 00:13:31,150
third a bit and so on it is like doing a

290
00:13:31,150 --> 00:13:33,580
large number of oblivious transfer in

291
00:13:33,580 --> 00:13:36,580
parallel but we reduce the communication

292
00:13:36,580 --> 00:13:38,980
complexity from the receiver to the

293
00:13:38,980 --> 00:13:41,140
sender we make the first message

294
00:13:41,140 --> 00:13:44,500
succinct okay but I want to say actually

295
00:13:44,500 --> 00:13:46,650
laconically is more powerful than that

296
00:13:46,650 --> 00:13:49,420
because it is not necessary that you

297
00:13:49,420 --> 00:13:51,100
first do first page and the second bit

298
00:13:51,100 --> 00:13:53,830
and a third page and so on the locations

299
00:13:53,830 --> 00:13:55,630
that you want to do obligates transfer

300
00:13:55,630 --> 00:13:58,720
can be arbitrarily chosen and that's the

301
00:13:58,720 --> 00:14:01,270
very very high-level idea that we've got

302
00:14:01,270 --> 00:14:03,940
more applications in other scenarios I

303
00:14:03,940 --> 00:14:06,640
won't talk any more details here but you

304
00:14:06,640 --> 00:14:10,600
can see our paper I've told you the

305
00:14:10,600 --> 00:14:12,280
first application and then in the rest

306
00:14:12,280 --> 00:14:13,690
of talk I will tell you how to construct

307
00:14:13,690 --> 00:14:19,000
it from DBH so we'll do it in two steps

308
00:14:19,000 --> 00:14:21,730
in the first step I will construct a

309
00:14:21,730 --> 00:14:24,550
laconic ot with compression factor two I

310
00:14:24,550 --> 00:14:26,320
will let you know what that means in a

311
00:14:26,320 --> 00:14:28,930
second and then in the second step I

312
00:14:28,930 --> 00:14:31,570
will do something called bootstrapping

313
00:14:31,570 --> 00:14:34,960
to bootstrap the space laconic ot into

314
00:14:34,960 --> 00:14:37,060
laconic ot with arbitrary compression

315
00:14:37,060 --> 00:14:39,250
fracture and this is exactly what we

316
00:14:39,250 --> 00:14:42,100
what we want the first step can be done

317
00:14:42,100 --> 00:14:44,320
from VD h and the second step can be

318
00:14:44,320 --> 00:14:48,790
done from Yakubu circuit again so

319
00:14:48,790 --> 00:14:50,800
remember this is the definition of

320
00:14:50,800 --> 00:14:54,100
laconic OT and we call it arbitrary

321
00:14:54,100 --> 00:14:56,650
compression factor because the size of a

322
00:14:56,650 --> 00:14:59,110
database can be arbitrary polynomial in

323
00:14:59,110 --> 00:15:02,410
the security parameter and if you are

324
00:15:02,410 --> 00:15:05,560
still following me you may notice that I

325
00:15:05,560 --> 00:15:08,500
have secretly removed a smart lock here

326
00:15:08,500 --> 00:15:10,570
because for the rest of our talk I will

327
00:15:10,570 --> 00:15:13,090
not care about receiver privacy but

328
00:15:13,090 --> 00:15:16,420
don't worry it's very easy to add so if

329
00:15:16,420 --> 00:15:19,300
you don't care about receiver privacy

330
00:15:19,300 --> 00:15:22,240
then the first message can be viewed as

331
00:15:22,240 --> 00:15:25,030
a succinct hash of this huge database

332
00:15:25,030 --> 00:15:26,760
and the four simple

333
00:15:26,760 --> 00:15:30,180
let's say it is of length lambda and as

334
00:15:30,180 --> 00:15:32,820
you can imagine laconic ot with

335
00:15:32,820 --> 00:15:35,430
compression factor 2 is just the saying

336
00:15:35,430 --> 00:15:37,889
the hash function here has compression

337
00:15:37,889 --> 00:15:41,579
factor 2 okay and then the bootstrapping

338
00:15:41,579 --> 00:15:44,490
theorem is say as long as you get the

339
00:15:44,490 --> 00:15:46,380
conic ot was just a little bit

340
00:15:46,380 --> 00:15:48,480
compression fracture compression factor

341
00:15:48,480 --> 00:15:52,769
2 ok and then you're done let's see how

342
00:15:52,769 --> 00:15:57,959
it works say that you have a hash

343
00:15:57,959 --> 00:16:00,269
function which can compress to lambda

344
00:16:00,269 --> 00:16:03,690
bits to lambda bits now you want to

345
00:16:03,690 --> 00:16:05,550
construct the hash function which can

346
00:16:05,550 --> 00:16:07,680
compress arbitrarily long string into a

347
00:16:07,680 --> 00:16:10,430
lambda bit string what would you do

348
00:16:10,430 --> 00:16:15,209
Micucci the idea is very simple so this

349
00:16:15,209 --> 00:16:18,720
is a data base of the receiver and then

350
00:16:18,720 --> 00:16:20,670
the receiver were just to compress to

351
00:16:20,670 --> 00:16:22,769
lambda bits too long the bits to lambda

352
00:16:22,769 --> 00:16:25,560
by 2 lambda bit and so on and then the

353
00:16:25,560 --> 00:16:28,199
root of this hash tree will be the first

354
00:16:28,199 --> 00:16:30,990
message of laconically okay this is just

355
00:16:30,990 --> 00:16:33,329
the first message very simple and then

356
00:16:33,329 --> 00:16:36,060
comes the sender she has two messages m0

357
00:16:36,060 --> 00:16:39,360
m1 and the location L let's say L equals

358
00:16:39,360 --> 00:16:41,819
1 for simplicity 5 the locations it's

359
00:16:41,819 --> 00:16:45,089
just a similar okay she needs to somehow

360
00:16:45,089 --> 00:16:47,310
encrypt these two messages according to

361
00:16:47,310 --> 00:16:51,329
this location let's first focus on this

362
00:16:51,329 --> 00:16:55,019
part of the tree and let's say the

363
00:16:55,019 --> 00:16:59,279
sender has this hash value if the sender

364
00:16:59,279 --> 00:17:02,519
has this hash value then we are done why

365
00:17:02,519 --> 00:17:06,030
because the sender can just use laconic

366
00:17:06,030 --> 00:17:08,520
OT with compression factor 2 here and

367
00:17:08,520 --> 00:17:10,980
encrypt these two messages and leather

368
00:17:10,980 --> 00:17:13,290
receive it equipped by the way I put us

369
00:17:13,290 --> 00:17:15,929
more to here to indicate this is a

370
00:17:15,929 --> 00:17:18,540
ciphertext were from a laconic OT with

371
00:17:18,540 --> 00:17:21,000
compression factor 2 so and then we are

372
00:17:21,000 --> 00:17:24,059
done but the question is sender doesn't

373
00:17:24,059 --> 00:17:26,730
have this hash value right

374
00:17:26,730 --> 00:17:29,490
she cannot ask the receiver to send it

375
00:17:29,490 --> 00:17:31,230
back because he needs more interaction

376
00:17:31,230 --> 00:17:33,990
and or or she can ask the receiver to

377
00:17:33,990 --> 00:17:36,120
send the whole tree back but it's just

378
00:17:36,120 --> 00:17:40,020
too large so what is your going to do

379
00:17:40,020 --> 00:17:44,309
our idea is that we will use gobble

380
00:17:44,309 --> 00:17:46,919
circuits to somehow traverse the tree

381
00:17:46,919 --> 00:17:50,039
from the root all the way to the leaf in

382
00:17:50,039 --> 00:17:52,919
particular the sender will generate one

383
00:17:52,919 --> 00:17:56,510
gobble circuit per level of the tree and

384
00:17:56,510 --> 00:18:01,020
along with a bunch of laconia coitus I

385
00:18:01,020 --> 00:18:02,610
would have to his compassion factor too

386
00:18:02,610 --> 00:18:05,250
and this whole thing will be our new

387
00:18:05,250 --> 00:18:08,549
ciphertext and sent to the receiver so

388
00:18:08,549 --> 00:18:11,070
it is still 16 - because it only grows

389
00:18:11,070 --> 00:18:12,720
with the size of the earth with the

390
00:18:12,720 --> 00:18:18,049
depth of the tree and then the receiver

391
00:18:18,049 --> 00:18:21,270
at a very very high level he will use

392
00:18:21,270 --> 00:18:24,240
this tree and the gobble circuits to

393
00:18:24,240 --> 00:18:27,360
somehow traverse from the root all the

394
00:18:27,360 --> 00:18:29,700
way to the leaf and then the lastest

395
00:18:29,700 --> 00:18:31,649
gobble circuit will output the message

396
00:18:31,649 --> 00:18:36,000
as required let's take a closer look how

397
00:18:36,000 --> 00:18:39,630
it works so our name these strains as s0

398
00:18:39,630 --> 00:18:44,490
s1 s2 s3 I haven't told you what CY is

399
00:18:44,490 --> 00:18:49,130
doing but C 1 will take s1 as input and

400
00:18:49,130 --> 00:18:52,679
as you can imagine the the receiver is

401
00:18:52,679 --> 00:18:55,649
the evaluator of this garbo circuit he

402
00:18:55,649 --> 00:18:57,570
will need one label per input wire

403
00:18:57,570 --> 00:19:00,570
corresponding to s 1 right so how is he

404
00:19:00,570 --> 00:19:03,929
going to get these labels the same ideas

405
00:19:03,929 --> 00:19:08,210
before by a laconically in particular

406
00:19:08,210 --> 00:19:12,059
the ciphertext can only be decrypted to

407
00:19:12,059 --> 00:19:15,330
the 0 label here if the first bit is 0

408
00:19:15,330 --> 00:19:18,149
can only be decrypted to the 1 label

409
00:19:18,149 --> 00:19:21,450
here if the first bit is 1 so using

410
00:19:21,450 --> 00:19:23,669
Lacan Cote with compression factor 2

411
00:19:23,669 --> 00:19:27,090
here the receiver can use as s1 to

412
00:19:27,090 --> 00:19:30,059
decrypt the cipher texts and get one

413
00:19:30,059 --> 00:19:33,140
label per while so we can evaluate c1 I

414
00:19:33,140 --> 00:19:35,309
still haven't told you what he wants to

415
00:19:35,309 --> 00:19:38,789
it but let's look at C 2 C 2 will take

416
00:19:38,789 --> 00:19:42,000
us to as input and again the receiver

417
00:19:42,000 --> 00:19:44,340
wants to evaluate C 2 he will need a one

418
00:19:44,340 --> 00:19:46,799
label per input a while and we want to

419
00:19:46,799 --> 00:19:49,270
use the same IDs before you

420
00:19:49,270 --> 00:19:52,210
laconic oto ciphertext for example the

421
00:19:52,210 --> 00:19:54,430
first one can only be decrypted to the

422
00:19:54,430 --> 00:19:56,500
zero level if this bit is zero can only

423
00:19:56,500 --> 00:19:58,150
be equipped to the one ever if that bit

424
00:19:58,150 --> 00:20:01,540
is one but the question is who is going

425
00:20:01,540 --> 00:20:04,570
to generate these ciphertexts because in

426
00:20:04,570 --> 00:20:06,550
order to generate them you will need

427
00:20:06,550 --> 00:20:10,720
this hash value here but Alice doesn't

428
00:20:10,720 --> 00:20:13,330
know that hash value she only knows the

429
00:20:13,330 --> 00:20:17,890
route but although the sender doesn't

430
00:20:17,890 --> 00:20:21,850
know this hash value c1 knows c1 takes

431
00:20:21,850 --> 00:20:25,060
it as part of the input so we were just

432
00:20:25,060 --> 00:20:28,300
let c1 computed these ciphertexts and

433
00:20:28,300 --> 00:20:30,820
output these ciphertexts and this is

434
00:20:30,820 --> 00:20:34,390
exactly what she wants doing so in the

435
00:20:34,390 --> 00:20:36,700
bigger picture the receiver will first

436
00:20:36,700 --> 00:20:40,150
use s1 to decrypt the ciphertext get one

437
00:20:40,150 --> 00:20:42,910
label per input wire of c1 and then

438
00:20:42,910 --> 00:20:45,070
evaluating c1 will give you the

439
00:20:45,070 --> 00:20:47,500
ciphertext is for the next level and

440
00:20:47,500 --> 00:20:50,410
then you can use s2 to decrypt the

441
00:20:50,410 --> 00:20:52,300
ciphertext and get one label per while

442
00:20:52,300 --> 00:20:55,080
flossy 2 and so on

443
00:20:55,080 --> 00:21:00,850
and then all the way to believe the last

444
00:21:00,850 --> 00:21:03,490
garbo circuit will output a mess over T

445
00:21:03,490 --> 00:21:06,400
of 1 as required and we were done with

446
00:21:06,400 --> 00:21:09,540
bootstrapping so all we are left with is

447
00:21:09,540 --> 00:21:12,670
the space laconic ot with compression

448
00:21:12,670 --> 00:21:15,040
factor to how to construct it from the

449
00:21:15,040 --> 00:21:18,430
decisional diffie-hellman assumption so

450
00:21:18,430 --> 00:21:21,100
our construction is based on this

451
00:21:21,100 --> 00:21:23,560
primitive code somewhere statistically

452
00:21:23,560 --> 00:21:26,200
binding hash functions and actually

453
00:21:26,200 --> 00:21:29,110
there is an alternative approach to

454
00:21:29,110 --> 00:21:31,960
construct this primitive using the ideas

455
00:21:31,960 --> 00:21:34,480
and techniques from the work by Apple

456
00:21:34,480 --> 00:21:37,990
vomit or I won't be able to talk more

457
00:21:37,990 --> 00:21:40,540
details of this construction but please

458
00:21:40,540 --> 00:21:43,440
do see our paper for the construction

459
00:21:43,440 --> 00:21:46,930
with that I will conclude so this is the

460
00:21:46,930 --> 00:21:49,510
most important slide of this talk we

461
00:21:49,510 --> 00:21:51,490
introduced this new notion called the

462
00:21:51,490 --> 00:21:54,190
laconic oblivious transfer and the very

463
00:21:54,190 --> 00:21:57,190
crucial point is that we can make the

464
00:21:57,190 --> 00:21:58,600
communication complexity and

465
00:21:58,600 --> 00:21:59,640
computational

466
00:21:59,640 --> 00:22:02,250
here to be independent no size of

467
00:22:02,250 --> 00:22:04,110
database only depend on security

468
00:22:04,110 --> 00:22:07,890
parameter and the open question okay the

469
00:22:07,890 --> 00:22:10,050
main result is that we can construct it

470
00:22:10,050 --> 00:22:11,010
from the decisional diffie-hellman

471
00:22:11,010 --> 00:22:15,690
assumption and open questions so far all

472
00:22:15,690 --> 00:22:18,030
that we have done is secure against the

473
00:22:18,030 --> 00:22:20,820
semi honest adversary's we can't make it

474
00:22:20,820 --> 00:22:23,730
maliciously secure at the cost of more

475
00:22:23,730 --> 00:22:27,120
interactions or stronger assumptions so

476
00:22:27,120 --> 00:22:29,370
open question is can you make it

477
00:22:29,370 --> 00:22:32,460
maliciously secure but with the same

478
00:22:32,460 --> 00:22:35,430
efficiency and under the same or weaker

479
00:22:35,430 --> 00:22:38,580
assumptions and it turns out to be very

480
00:22:38,580 --> 00:22:41,940
powerful tool in all scenarios and open

481
00:22:41,940 --> 00:22:44,600
questions can you find more applications

482
00:22:44,600 --> 00:22:47,370
we have some potential applications

483
00:22:47,370 --> 00:22:49,260
listed in our paper if you are

484
00:22:49,260 --> 00:22:53,100
interested so that's it

485
00:22:53,100 --> 00:22:59,290
[Applause]

