1
00:00:04,900 --> 00:00:09,070
Hey okay so I'm going to tell you about

2
00:00:09,070 --> 00:00:11,830
a bunch of results we have about this

3
00:00:11,830 --> 00:00:13,330
thing called the conditional disclosure

4
00:00:13,330 --> 00:00:15,519
of Secrets I'm going to start by telling

5
00:00:15,519 --> 00:00:18,730
you what it is so this is the setting we

6
00:00:18,730 --> 00:00:21,970
have so you have this function f on this

7
00:00:21,970 --> 00:00:24,970
predicate F on two inputs it's it public

8
00:00:24,970 --> 00:00:26,590
everyone knows this and you have three

9
00:00:26,590 --> 00:00:29,140
parties Alice who knows X 1 of the

10
00:00:29,140 --> 00:00:31,540
inputs to err Bob who knows why and

11
00:00:31,540 --> 00:00:34,510
Carol who knows both x and y in addition

12
00:00:34,510 --> 00:00:37,390
Alice and Bob how some shared randomness

13
00:00:37,390 --> 00:00:40,179
and the secret sa4 know think of the

14
00:00:40,179 --> 00:00:42,399
secret as a single bit a single bit

15
00:00:42,399 --> 00:00:45,160
secret s and this randomness and they

16
00:00:45,160 --> 00:00:47,230
each compute one message based on

17
00:00:47,230 --> 00:00:48,969
whatever they know and send it to Carol

18
00:00:48,969 --> 00:00:51,550
this is all that happens and that

19
00:00:51,550 --> 00:00:55,329
objective is is to do two things first

20
00:00:55,329 --> 00:00:58,690
if the predicate F evaluates to 1 on

21
00:00:58,690 --> 00:01:01,390
their inputs on their own x and y then

22
00:01:01,390 --> 00:01:02,949
they're supposed to reveal the secret to

23
00:01:02,949 --> 00:01:04,989
Carol Kyle is supposed to be able to

24
00:01:04,989 --> 00:01:06,310
recover the secret given just the

25
00:01:06,310 --> 00:01:09,310
messages and x and y on the other hand

26
00:01:09,310 --> 00:01:12,670
if the predicate is 0 on x and y then

27
00:01:12,670 --> 00:01:14,560
they want to hide the secret from carol

28
00:01:14,560 --> 00:01:16,150
and if we formalize because we are

29
00:01:16,150 --> 00:01:17,860
saying that you can simulate the

30
00:01:17,860 --> 00:01:19,900
distribution of the messages without

31
00:01:19,900 --> 00:01:21,760
knowing the secret so if we can simulate

32
00:01:21,760 --> 00:01:23,080
it without knowing the secret that means

33
00:01:23,080 --> 00:01:24,640
it can have some much information about

34
00:01:24,640 --> 00:01:26,650
the secret right so they want to do

35
00:01:26,650 --> 00:01:28,450
these two things they want to reveal the

36
00:01:28,450 --> 00:01:30,100
secret to Carol if and only if the

37
00:01:30,100 --> 00:01:32,980
function evaluates to 1 on the inputs so

38
00:01:32,980 --> 00:01:35,580
each of them knows one part of the input

39
00:01:35,580 --> 00:01:38,170
yeah so they want to do this while

40
00:01:38,170 --> 00:01:40,570
minimizing the amount of communication

41
00:01:40,570 --> 00:01:43,210
they undertake so this is a measure of

42
00:01:43,210 --> 00:01:45,400
complexity in this model you want to

43
00:01:45,400 --> 00:01:46,570
minimize the amount of total amount of

44
00:01:46,570 --> 00:01:48,400
communication that happens in the

45
00:01:48,400 --> 00:01:52,030
protocol so this is this is a model this

46
00:01:52,030 --> 00:01:54,130
is the so you what we want to do is we

47
00:01:54,130 --> 00:01:55,900
want to study the complexity of

48
00:01:55,900 --> 00:01:58,480
different functions in this model the

49
00:01:58,480 --> 00:02:00,760
communication you need to realize

50
00:02:00,760 --> 00:02:04,240
different predicates and oh yeah so

51
00:02:04,240 --> 00:02:05,770
sometimes we will also concern ourselves

52
00:02:05,770 --> 00:02:07,330
with the amount of randomness used but

53
00:02:07,330 --> 00:02:08,889
but the main measure of complexity is

54
00:02:08,889 --> 00:02:10,269
the amount of communication right so

55
00:02:10,269 --> 00:02:11,980
this is the this is the conditional

56
00:02:11,980 --> 00:02:14,769
distortion of secrets and why do we want

57
00:02:14,769 --> 00:02:17,469
to study this it turns out it's related

58
00:02:17,469 --> 00:02:18,310
to a lot of different

59
00:02:18,310 --> 00:02:19,630
so I won't really have time to go into

60
00:02:19,630 --> 00:02:21,490
too many of these things but perhaps the

61
00:02:21,490 --> 00:02:22,990
prime with one of primary importance is

62
00:02:22,990 --> 00:02:25,330
its relationship with attribute based

63
00:02:25,330 --> 00:02:29,709
encryption it has it by itself it's it's

64
00:02:29,709 --> 00:02:31,450
a very simplified version of our tale

65
00:02:31,450 --> 00:02:33,580
based encryption that gives you like a

66
00:02:33,580 --> 00:02:35,830
single time security but there are is

67
00:02:35,830 --> 00:02:37,660
more to that I won't have time to go

68
00:02:37,660 --> 00:02:40,090
into this the the application that I am

69
00:02:40,090 --> 00:02:42,330
most interested in is the the last one

70
00:02:42,330 --> 00:02:46,810
in in a sense this is a very very

71
00:02:46,810 --> 00:02:49,720
simplified model of a certain

72
00:02:49,720 --> 00:02:51,330
functionality in multi-party computation

73
00:02:51,330 --> 00:02:53,560
and and if you want to prove things

74
00:02:53,560 --> 00:02:55,000
about multi-party computation in general

75
00:02:55,000 --> 00:02:56,110
if you want to prove bound so if you

76
00:02:56,110 --> 00:02:58,030
want to prove communication bones then

77
00:02:58,030 --> 00:03:00,820
it it's worthwhile to study the simpler

78
00:03:00,820 --> 00:03:02,200
model first and maybe you can develop

79
00:03:02,200 --> 00:03:03,640
tools that work here and then scale them

80
00:03:03,640 --> 00:03:05,319
up to full-fledged multi-party

81
00:03:05,319 --> 00:03:07,750
computation right so these are reasons

82
00:03:07,750 --> 00:03:09,489
to study this conditional disclosure of

83
00:03:09,489 --> 00:03:12,280
Secrets let me let me tell you a little

84
00:03:12,280 --> 00:03:14,040
bit about what we know so far and

85
00:03:14,040 --> 00:03:20,620
broadly so the the best general apple

86
00:03:20,620 --> 00:03:23,769
bond we know for any predicate is is due

87
00:03:23,769 --> 00:03:26,230
to leo waked another and B and you will

88
00:03:26,230 --> 00:03:28,140
hear about this in 20 minutes time or so

89
00:03:28,140 --> 00:03:31,450
well they show that you can for any

90
00:03:31,450 --> 00:03:34,209
predicate F you can do CDs for it with

91
00:03:34,209 --> 00:03:35,680
something like to to the square root and

92
00:03:35,680 --> 00:03:38,350
communication okay so actually note that

93
00:03:38,350 --> 00:03:40,299
it's not even clear that you can't do

94
00:03:40,299 --> 00:03:42,130
this for every predicate if you it's not

95
00:03:42,130 --> 00:03:45,310
trivial to do it for any predicate but

96
00:03:45,310 --> 00:03:46,480
it turns out that you can't actually do

97
00:03:46,480 --> 00:03:47,739
it and you can't do it with this much

98
00:03:47,739 --> 00:03:51,220
these many bits of communication and and

99
00:03:51,220 --> 00:03:52,870
if you predicate has certain other

100
00:03:52,870 --> 00:03:54,130
properties like if it if it is

101
00:03:54,130 --> 00:03:56,260
computable very efficiently in these

102
00:03:56,260 --> 00:03:58,120
model in branching branching programs

103
00:03:58,120 --> 00:03:59,829
those programs then you can do it much

104
00:03:59,829 --> 00:04:02,200
faster than this so this is these are

105
00:04:02,200 --> 00:04:04,780
the these are the most upper bounds we

106
00:04:04,780 --> 00:04:06,760
know and in terms of lower boons we know

107
00:04:06,760 --> 00:04:09,130
at examples of predicates that requires

108
00:04:09,130 --> 00:04:10,630
log and bits of communication predicates

109
00:04:10,630 --> 00:04:12,730
on and bit inputs like well log in bits

110
00:04:12,730 --> 00:04:14,440
of communication this is due to a gate

111
00:04:14,440 --> 00:04:16,899
at all and what they also showed that

112
00:04:16,899 --> 00:04:18,668
and these are the simple predicate these

113
00:04:18,668 --> 00:04:19,690
are like the inner product Medicare

114
00:04:19,690 --> 00:04:21,240
something like this they also show that

115
00:04:21,240 --> 00:04:24,610
these predicates how if you if you look

116
00:04:24,610 --> 00:04:26,470
at this specific kind of Sidious called

117
00:04:26,470 --> 00:04:29,349
linear series which means that the

118
00:04:29,349 --> 00:04:31,680
reconstruction function the corral runs

119
00:04:31,680 --> 00:04:33,840
is linear in the messages and it's it's

120
00:04:33,840 --> 00:04:35,759
and this this particular restriction is

121
00:04:35,759 --> 00:04:37,830
significant because this has strong

122
00:04:37,830 --> 00:04:39,270
Corrections without your bit based

123
00:04:39,270 --> 00:04:41,130
encryption right they show that in this

124
00:04:41,130 --> 00:04:42,539
particular stricter version of studious

125
00:04:42,539 --> 00:04:44,280
the same predicate the inner product

126
00:04:44,280 --> 00:04:45,990
predicate for example has the square

127
00:04:45,990 --> 00:04:47,550
root and at least square root n bits of

128
00:04:47,550 --> 00:04:50,370
communication complexity yeah so broadly

129
00:04:50,370 --> 00:04:53,490
this is what is what what we know from

130
00:04:53,490 --> 00:04:56,160
before in the rest of my talk I'll be

131
00:04:56,160 --> 00:04:58,169
telling you some the results we have we

132
00:04:58,169 --> 00:04:59,490
have a collection of results about

133
00:04:59,490 --> 00:05:01,880
different aspects of sidious about

134
00:05:01,880 --> 00:05:03,810
different transformations you can do to

135
00:05:03,810 --> 00:05:07,229
CDs and everything I won't be able to go

136
00:05:07,229 --> 00:05:10,289
into all of these in detail but I will I

137
00:05:10,289 --> 00:05:11,970
will tell you but one of these in detail

138
00:05:11,970 --> 00:05:14,400
and I'll and I will try to give you some

139
00:05:14,400 --> 00:05:16,620
idea of how the others come about but

140
00:05:16,620 --> 00:05:19,710
before I do any of this I want to just

141
00:05:19,710 --> 00:05:21,479
send a slightly different view of this

142
00:05:21,479 --> 00:05:22,620
problem slightly different view of

143
00:05:22,620 --> 00:05:25,199
studios a view that will it actually

144
00:05:25,199 --> 00:05:26,789
helped us arrive at many of the results

145
00:05:26,789 --> 00:05:30,120
that we have and will really make some

146
00:05:30,120 --> 00:05:32,610
she'll say so what I want to do is this

147
00:05:32,610 --> 00:05:35,490
so this is the this is the diagram from

148
00:05:35,490 --> 00:05:37,409
earlier right the the party is on the

149
00:05:37,409 --> 00:05:40,500
randomness and everything I want to show

150
00:05:40,500 --> 00:05:43,039
how this model relates to the

151
00:05:43,039 --> 00:05:45,449
statistical difference problem I'll tell

152
00:05:45,449 --> 00:05:47,580
you what that is really so so you have

153
00:05:47,580 --> 00:05:49,080
this here these guys and I want a

154
00:05:49,080 --> 00:05:52,050
concentrate on the distribution of the

155
00:05:52,050 --> 00:05:55,770
messages so fix the x and y for now fix

156
00:05:55,770 --> 00:05:58,349
the input section Y now depending on the

157
00:05:58,349 --> 00:06:00,330
secret whether the secret is 0 or 1

158
00:06:00,330 --> 00:06:01,830
you have different distributions for the

159
00:06:01,830 --> 00:06:03,240
messages right so you have this

160
00:06:03,240 --> 00:06:05,639
randomness are and you are sampling that

161
00:06:05,639 --> 00:06:07,050
uniformly at random and based on that

162
00:06:07,050 --> 00:06:08,849
you get these distributions over the

163
00:06:08,849 --> 00:06:11,789
messages what I want to do is I want to

164
00:06:11,789 --> 00:06:14,159
state the properties of CD s the

165
00:06:14,159 --> 00:06:15,330
properties that are required of this

166
00:06:15,330 --> 00:06:17,220
protocol in terms of properties of these

167
00:06:17,220 --> 00:06:19,349
distributions what do I mean for example

168
00:06:19,349 --> 00:06:21,389
take the correctness property right it

169
00:06:21,389 --> 00:06:24,780
says that if the function is 1 then you

170
00:06:24,780 --> 00:06:26,880
should be able to recover the secret and

171
00:06:26,880 --> 00:06:30,630
this you can see and this I want to say

172
00:06:30,630 --> 00:06:32,909
it's the same as saying that if you take

173
00:06:32,909 --> 00:06:34,919
an input X Y it's at which the predicate

174
00:06:34,919 --> 00:06:36,630
evaluates to 1 then these two

175
00:06:36,630 --> 00:06:38,520
distributions over the messages in the

176
00:06:38,520 --> 00:06:40,440
two cases when the secret is 0 in the

177
00:06:40,440 --> 00:06:43,860
secret is 1 or far right because well if

178
00:06:43,860 --> 00:06:45,060
you can retrieve the secret that means

179
00:06:45,060 --> 00:06:45,400
the heart

180
00:06:45,400 --> 00:06:46,630
because if they were close then you

181
00:06:46,630 --> 00:06:49,210
counter to the signal and you can see

182
00:06:49,210 --> 00:06:50,530
that other way don't also holds with

183
00:06:50,530 --> 00:06:52,930
some low speed this is a little and

184
00:06:52,930 --> 00:06:56,470
similarly if if the privacy in the

185
00:06:56,470 --> 00:06:58,509
privacy case if your function values

186
00:06:58,509 --> 00:07:02,620
zero then then the wind by a simple

187
00:07:02,620 --> 00:07:04,600
triangle inequality you can see that the

188
00:07:04,600 --> 00:07:06,340
fact that this is the simulated

189
00:07:06,340 --> 00:07:07,840
distribution exists implies that the two

190
00:07:07,840 --> 00:07:10,479
distributions are close all right so

191
00:07:10,479 --> 00:07:11,889
what is this saying this is saying that

192
00:07:11,889 --> 00:07:14,289
any serious protocol for it for this

193
00:07:14,289 --> 00:07:17,830
predicate F gives you this way to sample

194
00:07:17,830 --> 00:07:20,229
these distributions in this distribution

195
00:07:20,229 --> 00:07:22,210
sample in the specific manner right so

196
00:07:22,210 --> 00:07:24,250
they have these two parts this MA and MB

197
00:07:24,250 --> 00:07:27,370
an MV ma is sampled knowing just X an

198
00:07:27,370 --> 00:07:30,370
MBA sample knowing just Y so there so

199
00:07:30,370 --> 00:07:31,840
these are these distributions which can

200
00:07:31,840 --> 00:07:33,400
be sampled in this decomposable manner

201
00:07:33,400 --> 00:07:36,330
so a serious protocol for a predicate f

202
00:07:36,330 --> 00:07:39,849
associates with each input X Y this this

203
00:07:39,849 --> 00:07:41,919
pair of decomposable a sample

204
00:07:41,919 --> 00:07:43,960
distributions with the properties that

205
00:07:43,960 --> 00:07:47,199
if f of XY is 1 then these distributions

206
00:07:47,199 --> 00:07:49,330
are far and if f of XY is 0 then these

207
00:07:49,330 --> 00:07:52,780
distributions are close right and now I

208
00:07:52,780 --> 00:07:53,800
can talk about the statistical

209
00:07:53,800 --> 00:07:55,090
difference program the statistical

210
00:07:55,090 --> 00:07:56,740
difference problem is the same thing

211
00:07:56,740 --> 00:07:58,810
where instead of saying decomposable

212
00:07:58,810 --> 00:08:00,190
example bit distributions you say

213
00:08:00,190 --> 00:08:01,780
efficiently sample bill distributions

214
00:08:01,780 --> 00:08:03,880
you have a short small circuits we can

215
00:08:03,880 --> 00:08:05,800
sample these distributions and this

216
00:08:05,800 --> 00:08:07,599
problem has been studied extensively in

217
00:08:07,599 --> 00:08:10,060
the past because and one of the reasons

218
00:08:10,060 --> 00:08:12,310
being that this problem is complete for

219
00:08:12,310 --> 00:08:13,960
the class of problems which are

220
00:08:13,960 --> 00:08:16,360
statistical seed oil is produced and and

221
00:08:16,360 --> 00:08:20,650
this and this connection this connection

222
00:08:20,650 --> 00:08:21,849
with a statistical difference problem

223
00:08:21,849 --> 00:08:24,240
that serious has enables us to use a

224
00:08:24,240 --> 00:08:26,050
number of techniques that were developed

225
00:08:26,050 --> 00:08:27,820
for the statistical difference problem

226
00:08:27,820 --> 00:08:29,530
in the study of statistical 0 let's

227
00:08:29,530 --> 00:08:31,750
prove to prove results about seediest

228
00:08:31,750 --> 00:08:32,919
approvals about the communication

229
00:08:32,919 --> 00:08:35,469
complex test radius right so yeah so

230
00:08:35,469 --> 00:08:36,940
this is this is the point of view I want

231
00:08:36,940 --> 00:08:38,620
to take that radius is some more like

232
00:08:38,620 --> 00:08:39,940
statistical 0 knowledge and it relates

233
00:08:39,940 --> 00:08:41,320
in this manner to the statistical

234
00:08:41,320 --> 00:08:44,860
difference problem so ok so let me give

235
00:08:44,860 --> 00:08:47,620
an example of how this point this point

236
00:08:47,620 --> 00:08:49,420
of view could help us do things right so

237
00:08:49,420 --> 00:08:53,740
let me state first result which is this

238
00:08:53,740 --> 00:08:59,020
so we construct a function

239
00:08:59,020 --> 00:09:01,030
call it peak oil will I'll explain why

240
00:09:01,030 --> 00:09:03,100
it's called that soon it's slightly

241
00:09:03,100 --> 00:09:04,720
unbalanced in states of inputs but don't

242
00:09:04,720 --> 00:09:07,150
don't care about that so this this

243
00:09:07,150 --> 00:09:10,420
predicate we call for which there is a

244
00:09:10,420 --> 00:09:13,870
very efficient Sidious protocol like it

245
00:09:13,870 --> 00:09:16,240
just takes log and bits but this

246
00:09:16,240 --> 00:09:17,320
function has very high communication

247
00:09:17,320 --> 00:09:19,150
complexity very heyyo communication

248
00:09:19,150 --> 00:09:21,160
complexity and it also has very high

249
00:09:21,160 --> 00:09:23,740
linea serious complexity which follows

250
00:09:23,740 --> 00:09:25,330
from the previous one actually but by

251
00:09:25,330 --> 00:09:30,100
the some word big guy at all and this is

252
00:09:30,100 --> 00:09:32,410
I will describe shortly the construction

253
00:09:32,410 --> 00:09:35,410
of this problem is inspired by actually

254
00:09:35,410 --> 00:09:37,570
uses problems that were used to show

255
00:09:37,570 --> 00:09:39,100
horrible separations between statistical

256
00:09:39,100 --> 00:09:40,540
zero knowledge and some other classes

257
00:09:40,540 --> 00:09:44,130
and BBP here or even some larger classes

258
00:09:44,130 --> 00:09:48,460
and so you basically showing all the

259
00:09:48,460 --> 00:09:50,380
separations comes down to showing query

260
00:09:50,380 --> 00:09:52,150
bounce query complexity bounds and then

261
00:09:52,150 --> 00:09:53,860
you use certain techniques to lift these

262
00:09:53,860 --> 00:09:54,940
query complexity bounds to the

263
00:09:54,940 --> 00:09:56,740
communication complexity setting which

264
00:09:56,740 --> 00:09:57,730
is what the pattern matrix where the

265
00:09:57,730 --> 00:10:01,180
comes in yeah so I'm going to tell you

266
00:10:01,180 --> 00:10:02,560
what this function is so I'm going to

267
00:10:02,560 --> 00:10:04,560
tell you what this function is and and

268
00:10:04,560 --> 00:10:06,910
when very briefly how this separation

269
00:10:06,910 --> 00:10:09,040
comes about right just to give you an

270
00:10:09,040 --> 00:10:10,840
idea of how the statistical different

271
00:10:10,840 --> 00:10:13,720
things comes in so okay so I'm going

272
00:10:13,720 --> 00:10:15,220
tell you what this function is but to do

273
00:10:15,220 --> 00:10:16,240
that I have to introduce a different

274
00:10:16,240 --> 00:10:19,030
function first called the collision

275
00:10:19,030 --> 00:10:20,710
problem so the collision problem is

276
00:10:20,710 --> 00:10:22,960
defined on boolean strings of length n

277
00:10:22,960 --> 00:10:24,880
log n take the strings of length n log N

278
00:10:24,880 --> 00:10:27,340
and divide it up you start by dividing

279
00:10:27,340 --> 00:10:30,070
up into blocks of size log n so in

280
00:10:30,070 --> 00:10:32,860
blocks of size log and needs and you

281
00:10:32,860 --> 00:10:35,230
take the function H Z so this is the

282
00:10:35,230 --> 00:10:36,610
string is said you take the function

283
00:10:36,610 --> 00:10:39,220
head straight which is given whose truth

284
00:10:39,220 --> 00:10:42,580
table is given by side right so it's a

285
00:10:42,580 --> 00:10:44,770
function on login bits and each of those

286
00:10:44,770 --> 00:10:46,900
block and it is this multi bit function

287
00:10:46,900 --> 00:10:49,960
of just log and bits of output and Z is

288
00:10:49,960 --> 00:10:51,190
the truth table of this function like

289
00:10:51,190 --> 00:10:52,840
hits rectify is just the ice block in

290
00:10:52,840 --> 00:10:55,120
that you take this login bit string as

291
00:10:55,120 --> 00:10:58,000
number from 1 to 1 I'll take that

292
00:10:58,000 --> 00:11:01,360
and the collision function is defined as

293
00:11:01,360 --> 00:11:03,940
follows it's a promise problem which

294
00:11:03,940 --> 00:11:06,580
asks is this function that is defined by

295
00:11:06,580 --> 00:11:09,100
this Z is it 1 to 1 or is it 2 to 1

296
00:11:09,100 --> 00:11:12,850
right this is the problem so this is

297
00:11:12,850 --> 00:11:16,819
and this is this problem was used by our

298
00:11:16,819 --> 00:11:18,470
ensign to show these Oracle separators

299
00:11:18,470 --> 00:11:21,949
bit for mess okay in other classes and

300
00:11:21,949 --> 00:11:24,800
why was this function used well it is

301
00:11:24,800 --> 00:11:27,170
because of the following implication of

302
00:11:27,170 --> 00:11:28,819
the of the properties you have with the

303
00:11:28,819 --> 00:11:31,759
zero in one cases right so if you have

304
00:11:31,759 --> 00:11:33,439
if the production function is zero if

305
00:11:33,439 --> 00:11:34,970
the function happens if your hits

306
00:11:34,970 --> 00:11:37,249
happens to be a one to one function then

307
00:11:37,249 --> 00:11:39,290
that implies that you take all the

308
00:11:39,290 --> 00:11:40,550
blocks over there you take all the

309
00:11:40,550 --> 00:11:43,699
blocks inside then all of the all

310
00:11:43,699 --> 00:11:45,529
possible values of this box occurs

311
00:11:45,529 --> 00:11:47,480
exactly once right so if we take a

312
00:11:47,480 --> 00:11:48,860
random block and look at it look at its

313
00:11:48,860 --> 00:11:50,660
value this value will be uniformly

314
00:11:50,660 --> 00:11:52,970
distributed over 0 1 to logon on the

315
00:11:52,970 --> 00:11:56,089
other hand if if it's two to one then

316
00:11:56,089 --> 00:11:57,470
half of the possible values of the

317
00:11:57,470 --> 00:11:59,269
blocks don't even occur enjoy it so if

318
00:11:59,269 --> 00:12:01,790
we take a random block and look at its

319
00:12:01,790 --> 00:12:03,439
value the distribution of this value

320
00:12:03,439 --> 00:12:05,839
will be very far from uniform and this

321
00:12:05,839 --> 00:12:09,019
sort of so in one case you are saying

322
00:12:09,019 --> 00:12:10,519
this beauty from distribution and this

323
00:12:10,519 --> 00:12:13,550
distribution of a random block close or

324
00:12:13,550 --> 00:12:14,899
the same in fact and in other case you

325
00:12:14,899 --> 00:12:16,670
are saying that far right and this sort

326
00:12:16,670 --> 00:12:18,829
of property is well is how it relates to

327
00:12:18,829 --> 00:12:20,300
the statistical journalist problems and

328
00:12:20,300 --> 00:12:21,589
this is why it's useful in these cases

329
00:12:21,589 --> 00:12:24,769
but but yeah so so this is the this is

330
00:12:24,769 --> 00:12:26,329
what you have to remember that if the

331
00:12:26,329 --> 00:12:27,829
collision function is zero then this

332
00:12:27,829 --> 00:12:29,899
random block is uniformly distributed if

333
00:12:29,899 --> 00:12:31,309
it is 1 then it's far from uniformly

334
00:12:31,309 --> 00:12:32,660
distributed right so this is the

335
00:12:32,660 --> 00:12:35,870
coalition function and now I am going to

336
00:12:35,870 --> 00:12:38,600
define the peak all function by by

337
00:12:38,600 --> 00:12:40,730
taking this input so the quotient

338
00:12:40,730 --> 00:12:42,500
function takes this one string as input

339
00:12:42,500 --> 00:12:44,269
rate but I want I want two strings

340
00:12:44,269 --> 00:12:46,220
because I want this in our model there

341
00:12:46,220 --> 00:12:47,569
are two inputs to the function so I want

342
00:12:47,569 --> 00:12:49,610
to split this input into two parts and I

343
00:12:49,610 --> 00:12:52,189
am going to do it in a certain manner so

344
00:12:52,189 --> 00:12:53,809
so our function P call will be defined

345
00:12:53,809 --> 00:12:57,410
as the position function applied to this

346
00:12:57,410 --> 00:12:59,269
operator so it takes this x and y as

347
00:12:59,269 --> 00:13:00,709
input and we are going to do a certain

348
00:13:00,709 --> 00:13:02,600
operation that I will describe now and

349
00:13:02,600 --> 00:13:03,769
we it's just going to apply the

350
00:13:03,769 --> 00:13:05,360
coefficient into this this string that

351
00:13:05,360 --> 00:13:06,439
comes out of this operation

352
00:13:06,439 --> 00:13:09,170
right so what is this operation its so

353
00:13:09,170 --> 00:13:11,480
you have these two two inputs X and y

354
00:13:11,480 --> 00:13:14,689
axis of length 4 and x logon right

355
00:13:14,689 --> 00:13:16,879
you start by dividing it into small

356
00:13:16,879 --> 00:13:19,610
chunks of size 4 you have this n log n

357
00:13:19,610 --> 00:13:22,100
chunks of size 4 and Y if you remember

358
00:13:22,100 --> 00:13:25,250
was of length 2 n log N

359
00:13:25,250 --> 00:13:26,870
individual chunks of size 2 and

360
00:13:26,870 --> 00:13:29,300
interpret these 2 bits as numbers

361
00:13:29,300 --> 00:13:32,000
between 1 and 4 so you have again you

362
00:13:32,000 --> 00:13:34,340
have n log and chunks like this and you

363
00:13:34,340 --> 00:13:37,520
line this up and you use Y the entries

364
00:13:37,520 --> 00:13:41,450
of Y as pointers into X right so if you

365
00:13:41,450 --> 00:13:43,310
take the in the first chunk you take the

366
00:13:43,310 --> 00:13:45,170
third but you take a second bit and so

367
00:13:45,170 --> 00:13:47,990
on and you construct this this n log and

368
00:13:47,990 --> 00:13:51,080
bit string alright so this is I will

369
00:13:51,080 --> 00:13:52,970
call this the indexing operation this is

370
00:13:52,970 --> 00:13:55,910
X index by Y and the function we have is

371
00:13:55,910 --> 00:13:58,790
simply so you speak all takes x and y as

372
00:13:58,790 --> 00:14:01,280
input and applies the collision problem

373
00:14:01,280 --> 00:14:03,140
with a the collision function 2x index

374
00:14:03,140 --> 00:14:05,870
by y right so so now I have these two

375
00:14:05,870 --> 00:14:08,060
inputs a day earlier I had one input

376
00:14:08,060 --> 00:14:09,380
which was just this now how these two

377
00:14:09,380 --> 00:14:11,270
inputs I will be giving one of these two

378
00:14:11,270 --> 00:14:15,290
is the other two Bob now why why did we

379
00:14:15,290 --> 00:14:16,850
do this in this peculiar manner because

380
00:14:16,850 --> 00:14:20,210
it turns out that if you break up

381
00:14:20,210 --> 00:14:22,940
functions in this manner you can we know

382
00:14:22,940 --> 00:14:24,830
how to show communication complexity

383
00:14:24,830 --> 00:14:26,140
level bones

384
00:14:26,140 --> 00:14:29,300
so this basically works as follows so a

385
00:14:29,300 --> 00:14:32,180
- and cutting short the a lower bound

386
00:14:32,180 --> 00:14:33,650
for what is called the approximate

387
00:14:33,650 --> 00:14:35,420
degree of the collision function and

388
00:14:35,420 --> 00:14:37,160
then short or short so we can lift that

389
00:14:37,160 --> 00:14:40,190
lift lower bound on this position

390
00:14:40,190 --> 00:14:41,450
function on the approximate degree of

391
00:14:41,450 --> 00:14:43,010
the collision function to a lower bound

392
00:14:43,010 --> 00:14:44,450
on the randomized communication

393
00:14:44,450 --> 00:14:45,950
complexity of the peak call function if

394
00:14:45,950 --> 00:14:48,380
it is constructed in this manner and

395
00:14:48,380 --> 00:14:49,880
this is why we are splitting it up in

396
00:14:49,880 --> 00:14:50,330
this way

397
00:14:50,330 --> 00:14:51,530
and the reason we chose the collision

398
00:14:51,530 --> 00:14:52,640
function was because it has the

399
00:14:52,640 --> 00:14:55,640
statistical zero knowledge no algorithms

400
00:14:55,640 --> 00:14:58,730
that we'll use later oh yeah so this

401
00:14:58,730 --> 00:15:00,260
shows this animation communication

402
00:15:00,260 --> 00:15:03,830
complexity level one and and gain at all

403
00:15:03,830 --> 00:15:06,440
showed that this in fact in place role

404
00:15:06,440 --> 00:15:08,540
born in the linear sidious complexity so

405
00:15:08,540 --> 00:15:12,500
this is a lower one part of it and next

406
00:15:12,500 --> 00:15:14,900
I'll show you how what I'll briefly

407
00:15:14,900 --> 00:15:17,390
describe a c.d.s protocol for for the

408
00:15:17,390 --> 00:15:18,470
speak call function that is very

409
00:15:18,470 --> 00:15:20,390
efficient that is not linear and it's

410
00:15:20,390 --> 00:15:22,400
much more than just induces like

411
00:15:22,400 --> 00:15:24,970
logarithmic amount of communication

412
00:15:24,970 --> 00:15:28,490
which is this so okay so this is what

413
00:15:28,490 --> 00:15:31,070
you have to do right so you have you

414
00:15:31,070 --> 00:15:32,810
have a little ball I'll use a sex Bob

415
00:15:32,810 --> 00:15:35,120
has Y and these two implicitly define

416
00:15:35,120 --> 00:15:38,240
this this X indexed by Y string

417
00:15:38,240 --> 00:15:40,730
and and the and we are concerned about

418
00:15:40,730 --> 00:15:42,619
the collision function applied to the

419
00:15:42,619 --> 00:15:44,959
string and that involves breaking this

420
00:15:44,959 --> 00:15:47,959
up into blocks of size log in and and

421
00:15:47,959 --> 00:15:50,029
asking and remember so if the collision

422
00:15:50,029 --> 00:15:52,490
function was zero that means that a

423
00:15:52,490 --> 00:15:55,399
random block is uniformly distributed if

424
00:15:55,399 --> 00:15:57,170
it is one a random block as far from

425
00:15:57,170 --> 00:15:59,540
uniformly distributed right so what we

426
00:15:59,540 --> 00:16:02,629
are going to do is Alice and Bob are

427
00:16:02,629 --> 00:16:04,970
going to pick a random I that is a pick

428
00:16:04,970 --> 00:16:06,800
a random block so there are n blocks

429
00:16:06,800 --> 00:16:08,300
they're going to be corundum block and

430
00:16:08,300 --> 00:16:10,879
there are somehow going to securely

431
00:16:10,879 --> 00:16:12,920
communicate the value of that block to

432
00:16:12,920 --> 00:16:16,699
Carol and it you can do this using what

433
00:16:16,699 --> 00:16:18,050
are called privacy maintenance measures

434
00:16:18,050 --> 00:16:19,819
protocols that I won't be have time to

435
00:16:19,819 --> 00:16:21,679
talk about now but basically this is

436
00:16:21,679 --> 00:16:23,149
what they do so they have they chose a

437
00:16:23,149 --> 00:16:25,040
random block here and they securely

438
00:16:25,040 --> 00:16:26,600
communicate the value of the block to

439
00:16:26,600 --> 00:16:29,779
Carol if the secret is zero and if the

440
00:16:29,779 --> 00:16:31,970
secret is one they communicate a

441
00:16:31,970 --> 00:16:33,999
completely random string of length log M

442
00:16:33,999 --> 00:16:37,910
now if if the value of our function was

443
00:16:37,910 --> 00:16:40,189
zero then we said that a random block is

444
00:16:40,189 --> 00:16:42,709
uniformly distributed right so in so in

445
00:16:42,709 --> 00:16:44,299
both cases can we see the same

446
00:16:44,299 --> 00:16:46,519
distribution but if the value of the

447
00:16:46,519 --> 00:16:49,759
function is one then a random blocks

448
00:16:49,759 --> 00:16:52,129
value is false from uniform so in the

449
00:16:52,129 --> 00:16:54,170
case s equals zero this distribution

450
00:16:54,170 --> 00:16:55,639
will be far from uniform and in this

451
00:16:55,639 --> 00:16:57,740
case it will be exactly uniform so

452
00:16:57,740 --> 00:17:01,129
they'll be far so so in the case pick on

453
00:17:01,129 --> 00:17:02,540
this zero you get these two

454
00:17:02,540 --> 00:17:04,159
distributions to decompose for example

455
00:17:04,159 --> 00:17:06,559
with distributions which are which are

456
00:17:06,559 --> 00:17:08,659
exactly the same in this case and in the

457
00:17:08,659 --> 00:17:10,039
case that we call this one these are far

458
00:17:10,039 --> 00:17:13,010
apart so that gives you correctness yeah

459
00:17:13,010 --> 00:17:21,589
so and so this this again shows you the

460
00:17:21,589 --> 00:17:24,439
the usefulness of considering this this

461
00:17:24,439 --> 00:17:26,869
equivalence between C is insidious and

462
00:17:26,869 --> 00:17:28,490
statistical knowledge right because

463
00:17:28,490 --> 00:17:30,200
that's why we got the collision function

464
00:17:30,200 --> 00:17:32,149
from we chose it because it has this

465
00:17:32,149 --> 00:17:34,010
nice artistical zero knowledge dish I go

466
00:17:34,010 --> 00:17:35,419
through and then you may were able to

467
00:17:35,419 --> 00:17:37,399
translate it to this setting using this

468
00:17:37,399 --> 00:17:39,039
psi master comes in between

469
00:17:39,039 --> 00:17:43,950
yeah so this is about the separation and

470
00:17:43,950 --> 00:17:46,620
so in the time I have left I'm going to

471
00:17:46,620 --> 00:17:48,090
quickly describe the other results we

472
00:17:48,090 --> 00:17:50,100
have and maybe till they will say a

473
00:17:50,100 --> 00:17:53,460
couple sentences or briefs of those so

474
00:17:53,460 --> 00:17:56,190
the next thing we can show is that the

475
00:17:56,190 --> 00:17:59,030
complexity of c.d.s is closed and

476
00:17:59,030 --> 00:18:01,470
composition with boolean formulas what

477
00:18:01,470 --> 00:18:04,170
do I mean I mean you can take let's say

478
00:18:04,170 --> 00:18:06,540
you have predicates F 1 2 F M and which

479
00:18:06,540 --> 00:18:08,790
are communication with which tedious

480
00:18:08,790 --> 00:18:10,770
protocols with communication complexity

481
00:18:10,770 --> 00:18:13,260
T 1 2 T M when random is complexity Rho

482
00:18:13,260 --> 00:18:15,000
1 and Rho M then we show how to

483
00:18:15,000 --> 00:18:17,970
construct a ceadeus protocol for a

484
00:18:17,970 --> 00:18:20,790
boolean formula h composed with all

485
00:18:20,790 --> 00:18:24,780
these predicates which has communication

486
00:18:24,780 --> 00:18:26,610
complexity and Daniel's comic steers a

487
00:18:26,610 --> 00:18:29,790
polynomial in the in the in the

488
00:18:29,790 --> 00:18:31,500
respective in the complexities over here

489
00:18:31,500 --> 00:18:34,110
and this and it's linear in the size of

490
00:18:34,110 --> 00:18:37,320
the boolean formula and this again

491
00:18:37,320 --> 00:18:39,960
follows from this again you can in the

492
00:18:39,960 --> 00:18:42,000
construction follows from using the

493
00:18:42,000 --> 00:18:44,070
similar transformations that that were

494
00:18:44,070 --> 00:18:45,750
shown for the statistical difference

495
00:18:45,750 --> 00:18:48,360
problem by Saha and Madonn and along

496
00:18:48,360 --> 00:18:51,090
with this Pearson protocol

497
00:18:51,090 --> 00:18:53,490
that I mentioned earlier and again this

498
00:18:53,490 --> 00:18:55,710
follows from looking at this equivalence

499
00:18:55,710 --> 00:18:56,790
between serious and should the still

500
00:18:56,790 --> 00:19:00,320
zero knowledge and the next thing is

501
00:19:00,320 --> 00:19:02,610
amplification so we show how you can

502
00:19:02,610 --> 00:19:05,550
take a CD s protocol with certain

503
00:19:05,550 --> 00:19:07,950
parameters which has a constant privacy

504
00:19:07,950 --> 00:19:09,630
in correctness errors and works for a

505
00:19:09,630 --> 00:19:11,550
single good secret and transform it to

506
00:19:11,550 --> 00:19:15,060
CD s for the same predicate with longest

507
00:19:15,060 --> 00:19:17,340
secrets and much smaller character some

508
00:19:17,340 --> 00:19:20,130
privacy errors are the cost of a linear

509
00:19:20,130 --> 00:19:22,260
overhead in the communication so you

510
00:19:22,260 --> 00:19:24,930
delay the communication is multiplied by

511
00:19:24,930 --> 00:19:27,200
K and this we convict to to the minus K

512
00:19:27,200 --> 00:19:30,030
so a certain version of this again

513
00:19:30,030 --> 00:19:32,130
follows from what is called the

514
00:19:32,130 --> 00:19:33,480
polarization lambda which is which is

515
00:19:33,480 --> 00:19:34,650
another transformation for this

516
00:19:34,650 --> 00:19:37,740
artistical difference problem but it

517
00:19:37,740 --> 00:19:39,270
turns out that under these settings of

518
00:19:39,270 --> 00:19:40,470
parameters you can get something better

519
00:19:40,470 --> 00:19:45,150
using a clamp secure sharing schemes so

520
00:19:45,150 --> 00:19:48,270
these three followed from looking at the

521
00:19:48,270 --> 00:19:50,280
connections will statistically and the

522
00:19:50,280 --> 00:19:52,590
others

523
00:19:52,590 --> 00:19:55,220
somewhat different

524
00:19:55,220 --> 00:19:58,340
next thing we can show this is non

525
00:19:58,340 --> 00:20:01,340
explicit lower bound for city s so like

526
00:20:01,340 --> 00:20:03,200
I said earlier the the previous non

527
00:20:03,200 --> 00:20:06,620
lower bound was was that there was an

528
00:20:06,620 --> 00:20:08,659
explicit function that people show that

529
00:20:08,659 --> 00:20:11,210
gay at all showed that it requires login

530
00:20:11,210 --> 00:20:13,100
bits of communication what we can show

531
00:20:13,100 --> 00:20:14,750
is a non explicit function we don't we

532
00:20:14,750 --> 00:20:15,860
don't know what function it is what you

533
00:20:15,860 --> 00:20:17,390
can show that there exists a function by

534
00:20:17,390 --> 00:20:19,730
some counting arguments that requires

535
00:20:19,730 --> 00:20:21,230
some linear amount of communication

536
00:20:21,230 --> 00:20:22,820
objects do they need a number of which

537
00:20:22,820 --> 00:20:28,010
of communication and yeah this is we

538
00:20:28,010 --> 00:20:30,110
basically it's shown by reducing to some

539
00:20:30,110 --> 00:20:32,120
existing lower bounds for the private

540
00:20:32,120 --> 00:20:33,740
simultaneous messages thing that I

541
00:20:33,740 --> 00:20:35,570
mentioned earlier again you to vacate

542
00:20:35,570 --> 00:20:38,240
come in an hour yeah this is we show

543
00:20:38,240 --> 00:20:40,809
this lower bound and the last thing is

544
00:20:40,809 --> 00:20:45,260
an amortization theorem where we say

545
00:20:45,260 --> 00:20:47,299
that if you have one predicate and a

546
00:20:47,299 --> 00:20:50,390
very long secret very very long secret

547
00:20:50,390 --> 00:20:53,510
then we show how to construct GDS

548
00:20:53,510 --> 00:20:55,820
protocol for this predicate in this

549
00:20:55,820 --> 00:20:59,090
secret well the number of bits of

550
00:20:59,090 --> 00:21:02,900
communication for the secret bit is n so

551
00:21:02,900 --> 00:21:04,280
if you took the best-known protocol and

552
00:21:04,280 --> 00:21:06,470
repeated it independently for each bit

553
00:21:06,470 --> 00:21:07,640
this would be the amount of

554
00:21:07,640 --> 00:21:10,610
communication you would incur but if

555
00:21:10,610 --> 00:21:12,230
your secret is long enough then if you

556
00:21:12,230 --> 00:21:15,860
can do it much better than that yeah so

557
00:21:15,860 --> 00:21:19,280
this this this this is what we have we

558
00:21:19,280 --> 00:21:20,990
have this this collection of yourselves

559
00:21:20,990 --> 00:21:23,240
about different aspects of a conditional

560
00:21:23,240 --> 00:21:29,210
disclosure of Secrets yeah so the things

561
00:21:29,210 --> 00:21:30,500
I wanted to highlight here are these

562
00:21:30,500 --> 00:21:32,659
connections that this seems to have with

563
00:21:32,659 --> 00:21:34,850
the statistical difference problem and

564
00:21:34,850 --> 00:21:38,330
things that you can do with that there

565
00:21:38,330 --> 00:21:39,470
are of course questions about whether

566
00:21:39,470 --> 00:21:40,820
you can do similar things with other

567
00:21:40,820 --> 00:21:43,039
models in like the private climate

568
00:21:43,039 --> 00:21:44,150
simultaneous message this model I was

569
00:21:44,150 --> 00:21:45,620
talking which I did not quite describe

570
00:21:45,620 --> 00:21:47,630
does that have connections to something

571
00:21:47,630 --> 00:21:48,679
else which you can exploit in the

572
00:21:48,679 --> 00:21:54,289
similar manner and also the best known

573
00:21:54,289 --> 00:21:56,030
techniques to lower bound this PSM

574
00:21:56,030 --> 00:21:57,950
already lower one sidious that's that's

575
00:21:57,950 --> 00:21:59,750
what we did right we reduce the lower

576
00:21:59,750 --> 00:22:01,490
bonding c.d.s to lower coding this PSM

577
00:22:01,490 --> 00:22:03,440
well as it's believed that PSM can be

578
00:22:03,440 --> 00:22:06,950
much more expensive than seniors so this

579
00:22:06,950 --> 00:22:08,290
is that if you want to

580
00:22:08,290 --> 00:22:10,570
lower bones on this mortal you need you

581
00:22:10,570 --> 00:22:13,350
need your techniques okay

582
00:22:13,350 --> 00:22:16,030
but yeah so yeah this is what we have

583
00:22:16,030 --> 00:22:18,340
and there are one use for improving all

584
00:22:18,340 --> 00:22:23,440
of almost all of these the people do

585
00:22:23,440 --> 00:22:26,230
yeah thanks what I have to say

586
00:22:26,230 --> 00:22:32,700
[Applause]

