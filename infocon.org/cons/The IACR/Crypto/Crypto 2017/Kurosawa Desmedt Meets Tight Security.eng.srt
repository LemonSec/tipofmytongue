1
00:00:05,710 --> 00:00:08,230
so yeah I'm gonna talk about cassava

2
00:00:08,230 --> 00:00:11,200
desmet meets tight security today this

3
00:00:11,200 --> 00:00:13,269
is joint work with Kumar gay and Denis

4
00:00:13,269 --> 00:00:15,790
who finds and I'm Lisa so good morning

5
00:00:15,790 --> 00:00:18,970
everyone as the session title already

6
00:00:18,970 --> 00:00:22,780
says we're gonna talk about public key

7
00:00:22,780 --> 00:00:26,080
encryption today so you can see this

8
00:00:26,080 --> 00:00:28,810
grinning cat here on the right and she

9
00:00:28,810 --> 00:00:30,939
wants to communicate with Ellis just to

10
00:00:30,939 --> 00:00:33,489
set you up with the notation how can

11
00:00:33,489 --> 00:00:36,489
this be done well Alice publishes the

12
00:00:36,489 --> 00:00:40,300
public key and then the cat can encrypt

13
00:00:40,300 --> 00:00:42,399
messages under this public key and send

14
00:00:42,399 --> 00:00:45,280
them to islets and of course we want to

15
00:00:45,280 --> 00:00:49,719
be able to talk about security so we

16
00:00:49,719 --> 00:00:52,360
consider an adversary here and we don't

17
00:00:52,360 --> 00:00:54,250
only want to consider passive

18
00:00:54,250 --> 00:00:56,350
adversary's that can listen to the

19
00:00:56,350 --> 00:00:58,570
communication but even adversaries

20
00:00:58,570 --> 00:01:02,649
actively interfering with it so the

21
00:01:02,649 --> 00:01:05,500
model of security we have here is in CPA

22
00:01:05,500 --> 00:01:08,740
security um you can see the experiment

23
00:01:08,740 --> 00:01:12,670
here corresponding to this model so the

24
00:01:12,670 --> 00:01:16,630
adversary gets a public key again choose

25
00:01:16,630 --> 00:01:19,660
two messages m0 and and one of the same

26
00:01:19,660 --> 00:01:23,080
length sent him to the Challenger gets

27
00:01:23,080 --> 00:01:25,240
an encryption back of one of the

28
00:01:25,240 --> 00:01:27,520
respective messages and in the end has

29
00:01:27,520 --> 00:01:29,979
to find out which of the messages was

30
00:01:29,979 --> 00:01:34,030
encrypted as we want to consider active

31
00:01:34,030 --> 00:01:36,009
security additionally we will provide

32
00:01:36,009 --> 00:01:38,319
the adversity with a decryption Oracle

33
00:01:38,319 --> 00:01:41,229
so Oracle where he can carry anything

34
00:01:41,229 --> 00:01:43,599
bought the challenged ciphertext and

35
00:01:43,599 --> 00:01:47,349
gets the respective decryption but this

36
00:01:47,349 --> 00:01:50,349
is actually not quite what we what we

37
00:01:50,349 --> 00:01:53,140
use quite as security model we want to

38
00:01:53,140 --> 00:01:56,020
use in this talk why is that so in the

39
00:01:56,020 --> 00:01:57,970
real world as you can see here on the

40
00:01:57,970 --> 00:02:01,360
slide there's not only we don't want to

41
00:02:01,360 --> 00:02:04,420
like have this have this isolated one

42
00:02:04,420 --> 00:02:07,660
person sending one message to to Ellis

43
00:02:07,660 --> 00:02:09,940
but we have many many more parties

44
00:02:09,940 --> 00:02:13,180
sending many many many more messages so

45
00:02:13,180 --> 00:02:16,659
if we think of others not as a person

46
00:02:16,659 --> 00:02:18,520
but as a server disk

47
00:02:18,520 --> 00:02:20,680
be something like a billion message

48
00:02:20,680 --> 00:02:22,540
deserves something like two to the 30

49
00:02:22,540 --> 00:02:25,510
messages a day even so what we really

50
00:02:25,510 --> 00:02:29,070
want is multi ciphertext NCCA security

51
00:02:29,070 --> 00:02:32,230
for a multi ciphertext in CCS security

52
00:02:32,230 --> 00:02:36,700
as you can see it's the same game um but

53
00:02:36,700 --> 00:02:38,860
now that verse we cannot only carry two

54
00:02:38,860 --> 00:02:41,620
messages but many many pairs of messages

55
00:02:41,620 --> 00:02:43,900
and each time gets the respective

56
00:02:43,900 --> 00:02:47,050
encrypted message and I didn't say this

57
00:02:47,050 --> 00:02:52,300
before but of course we say scheme is

58
00:02:52,300 --> 00:02:54,880
secure if the adverse we cannot find out

59
00:02:54,880 --> 00:02:55,570
two speeds

60
00:02:55,570 --> 00:02:58,030
that's corresponding to the right

61
00:02:58,030 --> 00:03:00,640
message with probability negligibly

62
00:03:00,640 --> 00:03:04,300
better than guessing so yes so why do we

63
00:03:04,300 --> 00:03:06,910
usually like why do we usually talk

64
00:03:06,910 --> 00:03:09,670
about NCCA security or not and not about

65
00:03:09,670 --> 00:03:12,640
multi ciphertext in CCI security well if

66
00:03:12,640 --> 00:03:15,340
you just care about asymptotic security

67
00:03:15,340 --> 00:03:18,370
and we're fine because NCCI security

68
00:03:18,370 --> 00:03:20,710
implies multi cipher text in CCI

69
00:03:20,710 --> 00:03:23,830
security um so yeah why do we call

70
00:03:23,830 --> 00:03:26,140
carrying this talk why do we directly

71
00:03:26,140 --> 00:03:28,480
want to work with this notion it's

72
00:03:28,480 --> 00:03:30,490
because we care about the quality of the

73
00:03:30,490 --> 00:03:33,940
reduction and yes what what do we mean

74
00:03:33,940 --> 00:03:36,430
by that so how do we usually prove for

75
00:03:36,430 --> 00:03:38,530
security reduction so how we have some

76
00:03:38,530 --> 00:03:40,630
adversary breaking the encryption scheme

77
00:03:40,630 --> 00:03:44,440
with some advantage epsilon and then to

78
00:03:44,440 --> 00:03:46,270
prove security we want to reduce the

79
00:03:46,270 --> 00:03:48,880
Security's to some kind of assumption so

80
00:03:48,880 --> 00:03:52,720
what we do is we construct an adversary

81
00:03:52,720 --> 00:03:54,550
pranking the underlying assumption this

82
00:03:54,550 --> 00:03:57,490
this rabbit here but the adversity will

83
00:03:57,490 --> 00:03:59,200
not have the same advantage usually

84
00:03:59,200 --> 00:04:01,060
there will be there will be some loss so

85
00:04:01,060 --> 00:04:03,100
this L here this is the security loss

86
00:04:03,100 --> 00:04:05,610
why do we have this loss in reductions

87
00:04:05,610 --> 00:04:09,459
well for example be happy because we

88
00:04:09,459 --> 00:04:11,950
have to guess something during the

89
00:04:11,950 --> 00:04:16,358
reduction for example going from NCCI

90
00:04:16,358 --> 00:04:18,850
security to multi ciphertext in CCA

91
00:04:18,850 --> 00:04:21,608
security we basically have to guess vary

92
00:04:21,608 --> 00:04:24,010
in which challenge ciphertext to embed

93
00:04:24,010 --> 00:04:27,520
the like the challenge from the

94
00:04:27,520 --> 00:04:29,770
underlying assumption so the loss will

95
00:04:29,770 --> 00:04:32,110
be in Omega of the number of encryption

96
00:04:32,110 --> 00:04:34,930
Carreras we have so if you now there's

97
00:04:34,930 --> 00:04:36,940
already concrete parameters in there so

98
00:04:36,940 --> 00:04:40,480
if we want to have 128-bit security we

99
00:04:40,480 --> 00:04:44,950
have to take security parameter of 158

100
00:04:44,950 --> 00:04:46,840
for the underlying assumption to

101
00:04:46,840 --> 00:04:50,050
actually have this security guarantee so

102
00:04:50,050 --> 00:04:52,120
what I mean by quality of the reduction

103
00:04:52,120 --> 00:04:54,640
like we it's desirable to have a tight

104
00:04:54,640 --> 00:04:57,640
reduction so L should not be should in

105
00:04:57,640 --> 00:05:00,580
it's in particular be independent of the

106
00:05:00,580 --> 00:05:04,600
number of encryption queries so for

107
00:05:04,600 --> 00:05:06,760
exact like so what what we call here

108
00:05:06,760 --> 00:05:08,650
tied reduction are often referred to as

109
00:05:08,650 --> 00:05:11,200
almost hide reduction it should be like

110
00:05:11,200 --> 00:05:13,270
linear in the security parameter some

111
00:05:13,270 --> 00:05:16,330
small constant desirable times the

112
00:05:16,330 --> 00:05:18,610
security parameter because then we will

113
00:05:18,610 --> 00:05:22,020
not have L 2 equal to 2 to 30 but

114
00:05:22,020 --> 00:05:24,700
something in the order of 2 to 8 to 9 to

115
00:05:24,700 --> 00:05:27,940
10 but significantly smaller so and then

116
00:05:27,940 --> 00:05:31,510
this will this will yield shorter

117
00:05:31,510 --> 00:05:34,440
concrete parameters so actually like

118
00:05:34,440 --> 00:05:36,790
generally we care about tight security

119
00:05:36,790 --> 00:05:40,260
reductions because we care about

120
00:05:40,260 --> 00:05:43,060
concrete efficiency instantiating this

121
00:05:43,060 --> 00:05:43,800
key

122
00:05:43,800 --> 00:05:48,490
ok so I want to give you a short like

123
00:05:48,490 --> 00:05:51,760
walk through some some CCI secure

124
00:05:51,760 --> 00:05:53,200
encryption scheme in the line of our

125
00:05:53,200 --> 00:05:55,420
work of course this is not at all

126
00:05:55,420 --> 00:05:58,150
complete so starting with the comments

127
00:05:58,150 --> 00:06:01,570
OOP 1998 and kuzava estimate 2004 you

128
00:06:01,570 --> 00:06:03,670
can see two very efficient schemes in

129
00:06:03,670 --> 00:06:06,550
terms of ciphertext also in terms of

130
00:06:06,550 --> 00:06:10,000
public key but with a large but you have

131
00:06:10,000 --> 00:06:13,090
the security loss um in in Omega of the

132
00:06:13,090 --> 00:06:14,650
number encryption queries for the

133
00:06:14,650 --> 00:06:18,250
further reasons I just said so starting

134
00:06:18,250 --> 00:06:21,160
with the work of who finds in Yahoo 2012

135
00:06:21,160 --> 00:06:24,760
there was the there was the aim to get

136
00:06:24,760 --> 00:06:27,670
tight security reduction CCA secure

137
00:06:27,670 --> 00:06:29,680
encryption with tight security reduction

138
00:06:29,680 --> 00:06:32,770
but as you can see here the first scheme

139
00:06:32,770 --> 00:06:36,610
has has like it's not where we want to

140
00:06:36,610 --> 00:06:39,130
be because it's really inefficient the

141
00:06:39,130 --> 00:06:40,720
ciphertext size is linear in the

142
00:06:40,720 --> 00:06:42,580
security parameter instead of two group

143
00:06:42,580 --> 00:06:44,230
elements before so we're talking about

144
00:06:44,230 --> 00:06:46,139
group elements

145
00:06:46,139 --> 00:06:50,570
and yeah there was a lot of progress

146
00:06:50,570 --> 00:06:57,120
made very recently so 2016 gay who finds

147
00:06:57,120 --> 00:07:00,450
kills and we improved greatly on this

148
00:07:00,450 --> 00:07:03,450
bounce they have a very short ciphertext

149
00:07:03,450 --> 00:07:05,610
only three elements but still suffer

150
00:07:05,610 --> 00:07:08,910
from a large large public key so would

151
00:07:08,910 --> 00:07:11,280
be around 200 group elements if you yeah

152
00:07:11,280 --> 00:07:15,840
if you put in 108 and then just from

153
00:07:15,840 --> 00:07:18,300
this year who finds how to work with

154
00:07:18,300 --> 00:07:21,030
compact ciphertext and compact public

155
00:07:21,030 --> 00:07:23,940
key but required pairing so also a

156
00:07:23,940 --> 00:07:27,150
source of inefficiency so the question

157
00:07:27,150 --> 00:07:29,910
starting that work was can we do better

158
00:07:29,910 --> 00:07:32,729
can we have it all green and the answer

159
00:07:32,729 --> 00:07:34,800
is yes that's why I'm standing here so

160
00:07:34,800 --> 00:07:37,380
we got a ciphertext size of three

161
00:07:37,380 --> 00:07:40,139
elements a public key of six elements we

162
00:07:40,139 --> 00:07:41,760
have a tight security reduction to

163
00:07:41,760 --> 00:07:44,240
deviate and we don't require pairings so

164
00:07:44,240 --> 00:07:46,770
how does our scheme look like so I can

165
00:07:46,770 --> 00:07:48,870
tell you in one line our scheme is

166
00:07:48,870 --> 00:07:51,090
career solid estimate the scheme you saw

167
00:07:51,090 --> 00:07:54,450
from 2004 plus one or proof pie where

168
00:07:54,450 --> 00:07:58,440
this proof pie is some new proof okay so

169
00:07:58,440 --> 00:08:00,810
you might have a number of questions now

170
00:08:00,810 --> 00:08:03,240
if you see that maybe the first question

171
00:08:03,240 --> 00:08:05,729
in case you're not familiar is okay but

172
00:08:05,729 --> 00:08:07,710
how does cur salad this may look like or

173
00:08:07,710 --> 00:08:12,479
if you know what is pie good for like

174
00:08:12,479 --> 00:08:14,550
why do we need two pie why despite

175
00:08:14,550 --> 00:08:16,500
suddenly enable us to get this tight

176
00:08:16,500 --> 00:08:18,630
security reduction and the second

177
00:08:18,630 --> 00:08:21,360
question would be how does pie look like

178
00:08:21,360 --> 00:08:23,820
so yeah and the following I want to

179
00:08:23,820 --> 00:08:26,550
answer all of these questions starting

180
00:08:26,550 --> 00:08:30,180
so stepping back a bit going to going

181
00:08:30,180 --> 00:08:32,520
through the foundations and then explain

182
00:08:32,520 --> 00:08:34,380
her solid estimate and why it is not

183
00:08:34,380 --> 00:08:39,479
tight so very short we kept the

184
00:08:39,479 --> 00:08:41,490
decisional diffie-hellman assumption you

185
00:08:41,490 --> 00:08:44,039
saw a DDH on the slides before already

186
00:08:44,039 --> 00:08:47,640
in this table so I want to start with

187
00:08:47,640 --> 00:08:49,800
defining the diffie-hellman language

188
00:08:49,800 --> 00:08:51,480
because that is what we'll be working

189
00:08:51,480 --> 00:08:55,200
with later so we have a crew and we have

190
00:08:55,200 --> 00:08:56,500
a vector a group

191
00:08:56,500 --> 00:08:59,890
element a in Chi square and we say okay

192
00:08:59,890 --> 00:09:01,510
the diffie-hellman language are all

193
00:09:01,510 --> 00:09:04,150
elements respective to this vector a are

194
00:09:04,150 --> 00:09:06,010
all elements that are linearly dependent

195
00:09:06,010 --> 00:09:07,540
of this vector

196
00:09:07,540 --> 00:09:10,570
so by this multiplication actually like

197
00:09:10,570 --> 00:09:12,490
we're taking we're taking the group

198
00:09:12,490 --> 00:09:15,040
elements to the power of the scalars so

199
00:09:15,040 --> 00:09:19,360
so X 1 is a 1 to the power of W and X 2

200
00:09:19,360 --> 00:09:23,650
is a 2 to 2 hours W and so for the

201
00:09:23,650 --> 00:09:27,640
following you just remember that the by

202
00:09:27,640 --> 00:09:31,870
boat we always denote group group this

203
00:09:31,870 --> 00:09:34,570
group vectors from from T Square by both

204
00:09:34,570 --> 00:09:38,940
notation and then the d/dx assumption

205
00:09:38,940 --> 00:09:43,270
basically allows two to to switch

206
00:09:43,270 --> 00:09:45,460
between choosing a random element from

207
00:09:45,460 --> 00:09:48,550
this linear language la to just choosing

208
00:09:48,550 --> 00:09:52,900
a linear like element from all T Square

209
00:09:52,900 --> 00:09:55,500
just randomly from T Square and this is

210
00:09:55,500 --> 00:09:58,210
computationally indistinguishable and we

211
00:09:58,210 --> 00:10:01,450
want this and wise it is a very nice

212
00:10:01,450 --> 00:10:03,940
assumption it's a very nice assumption

213
00:10:03,940 --> 00:10:07,330
if you care about tightness because then

214
00:10:07,330 --> 00:10:09,040
also if you don't care about tightness

215
00:10:09,040 --> 00:10:10,780
but for us especially because you have

216
00:10:10,780 --> 00:10:13,720
this re randomized ability so if you get

217
00:10:13,720 --> 00:10:15,430
just one tuple you can yourself we

218
00:10:15,430 --> 00:10:18,210
randomized it to get many many tools and

219
00:10:18,210 --> 00:10:20,710
the next ingredient we need is a hash

220
00:10:20,710 --> 00:10:24,310
proof system so what's a hash per system

221
00:10:24,310 --> 00:10:27,160
good for well we will use it to prove

222
00:10:27,160 --> 00:10:30,400
that an X is indeed in this language how

223
00:10:30,400 --> 00:10:32,110
can we do that we know the witness and

224
00:10:32,110 --> 00:10:34,210
we want to prove that to a designated

225
00:10:34,210 --> 00:10:36,580
verifier and a hash curve system enables

226
00:10:36,580 --> 00:10:40,270
that by by having two different

227
00:10:40,270 --> 00:10:42,850
mechanisms to compute a proof like you

228
00:10:42,850 --> 00:10:44,620
can publicly computer proof knowing the

229
00:10:44,620 --> 00:10:47,200
public key and the witness and you can

230
00:10:47,200 --> 00:10:49,540
privately compute a proof just knowing

231
00:10:49,540 --> 00:10:51,130
the secret key and the element and you

232
00:10:51,130 --> 00:10:53,170
don't need to know the witness and of

233
00:10:53,170 --> 00:10:55,089
course we want to have some kind of

234
00:10:55,089 --> 00:10:58,330
security guarantees for that and that

235
00:10:58,330 --> 00:11:00,130
would be or like we want to have

236
00:11:00,130 --> 00:11:02,020
security and we want to have some kind

237
00:11:02,020 --> 00:11:03,790
of correctness or completeness so

238
00:11:03,790 --> 00:11:05,089
whenever X

239
00:11:05,089 --> 00:11:07,550
indeed in a language those two proofs

240
00:11:07,550 --> 00:11:10,730
should equal so designate verifier can

241
00:11:10,730 --> 00:11:13,129
compute a proof then check if they're

242
00:11:13,129 --> 00:11:16,339
equal and if accept if not not accept

243
00:11:16,339 --> 00:11:20,240
and security we want whenever X is not

244
00:11:20,240 --> 00:11:22,579
in language then even if you know the

245
00:11:22,579 --> 00:11:25,550
public key you don't want someone to be

246
00:11:25,550 --> 00:11:28,279
able to compute this proof and even

247
00:11:28,279 --> 00:11:30,379
stronger for hash proof system this

248
00:11:30,379 --> 00:11:32,449
should look completely random so the

249
00:11:32,449 --> 00:11:34,819
private emulation on this X should look

250
00:11:34,819 --> 00:11:37,970
completely random so what's the one here

251
00:11:37,970 --> 00:11:40,879
I'm the one here is supposed to mean we

252
00:11:40,879 --> 00:11:42,769
can only do this as long as we don't

253
00:11:42,769 --> 00:11:45,170
know any proof in the private revelation

254
00:11:45,170 --> 00:11:47,059
but this will actually be not good

255
00:11:47,059 --> 00:11:50,509
enough for us why is that um this is not

256
00:11:50,509 --> 00:11:52,220
good enough for us because actually we

257
00:11:52,220 --> 00:11:54,470
wanted to have two universality we want

258
00:11:54,470 --> 00:11:56,389
to be able to give out one proof and a

259
00:11:56,389 --> 00:11:58,550
public key and for something and the

260
00:11:58,550 --> 00:12:00,379
proof outside the language and we will

261
00:12:00,379 --> 00:12:03,199
still want still to have universality to

262
00:12:03,199 --> 00:12:07,819
hold so what we do is and basically or

263
00:12:07,819 --> 00:12:10,730
what what curse Ovid s-minted and 3004

264
00:12:10,730 --> 00:12:12,759
and their approach was to linearly

265
00:12:12,759 --> 00:12:15,860
combine to hash proof system and that

266
00:12:15,860 --> 00:12:19,610
gives them two universality basically

267
00:12:19,610 --> 00:12:22,100
because some kind of computational to

268
00:12:22,100 --> 00:12:24,050
universality because this linear

269
00:12:24,050 --> 00:12:26,449
combination will be fresh each time due

270
00:12:26,449 --> 00:12:28,129
to the collision resistant of the used

271
00:12:28,129 --> 00:12:31,699
hash function so now I can tell you

272
00:12:31,699 --> 00:12:33,769
curse Ovid estimate you have to like you

273
00:12:33,769 --> 00:12:36,050
know have everything you have to know so

274
00:12:36,050 --> 00:12:36,860
what do you do

275
00:12:36,860 --> 00:12:39,319
um you first choose an X from the

276
00:12:39,319 --> 00:12:41,660
language with quorum corresponding

277
00:12:41,660 --> 00:12:44,779
witness W you compute the proof using

278
00:12:44,779 --> 00:12:46,790
the public in relation with the public

279
00:12:46,790 --> 00:12:48,920
key and the witness so public key secret

280
00:12:48,920 --> 00:12:50,600
key are just a public key in the secret

281
00:12:50,600 --> 00:12:52,730
key of the hash proof system and then

282
00:12:52,730 --> 00:12:55,459
you can just use this proof that's why

283
00:12:55,459 --> 00:12:58,490
it's called kay here to encrypt a

284
00:12:58,490 --> 00:12:59,959
message with a symmetric encryption

285
00:12:59,959 --> 00:13:03,339
scheme and then decryption well

286
00:13:03,339 --> 00:13:05,720
decryptor has the secret key you can

287
00:13:05,720 --> 00:13:08,179
recover this Kay and he can decrypt

288
00:13:08,179 --> 00:13:11,420
symmetrically so correctness directly

289
00:13:11,420 --> 00:13:12,829
follows from the completeness of the

290
00:13:12,829 --> 00:13:16,939
hash proof system why is it secure so

291
00:13:16,939 --> 00:13:18,740
it's secure because again

292
00:13:18,740 --> 00:13:20,930
we can switch we first want to forget

293
00:13:20,930 --> 00:13:23,030
the witness so we can switch from pop

294
00:13:23,030 --> 00:13:25,340
evil to proof evil by by completeness

295
00:13:25,340 --> 00:13:27,020
and then we don't need to know the

296
00:13:27,020 --> 00:13:29,810
witness anymore so by DTH we can switch

297
00:13:29,810 --> 00:13:33,350
to accompany the the how we choose X we

298
00:13:33,350 --> 00:13:36,260
can choose X from all T Square and now

299
00:13:36,260 --> 00:13:38,870
we're done basically because now because

300
00:13:38,870 --> 00:13:41,480
of the computational to universality we

301
00:13:41,480 --> 00:13:43,220
made a decryption Oracle useless

302
00:13:43,220 --> 00:13:45,770
everything outside la Lin will have a

303
00:13:45,770 --> 00:13:48,620
que which looks uniformly random to the

304
00:13:48,620 --> 00:13:52,190
adversary so and then we can just use

305
00:13:52,190 --> 00:13:55,460
that still okay um that we used for the

306
00:13:55,460 --> 00:13:56,060
challenge

307
00:13:56,060 --> 00:13:59,240
query is random - and we get in CCI

308
00:13:59,240 --> 00:14:02,060
security so this is great but what's the

309
00:14:02,060 --> 00:14:04,010
problem of course there's no problem but

310
00:14:04,010 --> 00:14:06,670
if we care about tight security the

311
00:14:06,670 --> 00:14:10,100
problem is that entropy in the secret

312
00:14:10,100 --> 00:14:13,970
key is limited so so this reduction

313
00:14:13,970 --> 00:14:16,070
cannot be tied what why can this

314
00:14:16,070 --> 00:14:18,410
reduction not be tied because we realize

315
00:14:18,410 --> 00:14:20,690
that we only give out information about

316
00:14:20,690 --> 00:14:23,030
one of those key only the key of this

317
00:14:23,030 --> 00:14:25,310
one challenge ciphertext but if we do

318
00:14:25,310 --> 00:14:27,200
that many many times we don't have

319
00:14:27,200 --> 00:14:29,510
security guarantees anymore we just have

320
00:14:29,510 --> 00:14:32,840
this - universality but but not more so

321
00:14:32,840 --> 00:14:35,540
how does this prove PI just a short

322
00:14:35,540 --> 00:14:40,100
recap our scheme was curse Ovid estimate

323
00:14:40,100 --> 00:14:42,920
plus this new or proof PI so how does

324
00:14:42,920 --> 00:14:48,560
this prove PI save us here so the idea

325
00:14:48,560 --> 00:14:51,440
is um we don't have enough rent entropy

326
00:14:51,440 --> 00:14:53,570
so we need more entropy so how do we get

327
00:14:53,570 --> 00:14:56,330
more entropy we generate more entropy we

328
00:14:56,330 --> 00:14:59,360
use not one secret key but we use a

329
00:14:59,360 --> 00:15:01,790
freshly randomized secret key for each

330
00:15:01,790 --> 00:15:06,320
new ciphertext and by doing so we we

331
00:15:06,320 --> 00:15:08,840
actually have enough entropy because we

332
00:15:08,840 --> 00:15:11,540
yeah we that's what we did and then we

333
00:15:11,540 --> 00:15:14,660
can use the randomized ability of T th

334
00:15:14,660 --> 00:15:18,560
and use just one D th tuple to randomize

335
00:15:18,560 --> 00:15:21,350
all ciphertext at once so yeah that's

336
00:15:21,350 --> 00:15:23,960
actually a technique of gated all 2016

337
00:15:23,960 --> 00:15:27,350
I'm but that well works works very handy

338
00:15:27,350 --> 00:15:31,490
but the difficulty is how can we answer

339
00:15:31,490 --> 00:15:32,150
decryption

340
00:15:32,150 --> 00:15:33,800
Prairies if we don't know the secret key

341
00:15:33,800 --> 00:15:36,410
anymore because now we use many many

342
00:15:36,410 --> 00:15:38,180
secret keys and not just one so which

343
00:15:38,180 --> 00:15:42,500
one to use for decryption Christ and so

344
00:15:42,500 --> 00:15:45,050
before even thinking about we're

345
00:15:45,050 --> 00:15:46,820
randomizing the secret key we have to do

346
00:15:46,820 --> 00:15:49,010
something else we have to randomize the

347
00:15:49,010 --> 00:15:51,200
secret key but but differently step by

348
00:15:51,200 --> 00:15:56,060
step and how do we do so how do we do so

349
00:15:56,060 --> 00:15:58,310
so in each step we partition the

350
00:15:58,310 --> 00:16:00,920
ciphertext space in in two parts so it's

351
00:16:00,920 --> 00:16:02,810
so you see here in a blue part in a

352
00:16:02,810 --> 00:16:05,420
green part and for one we just generate

353
00:16:05,420 --> 00:16:07,670
the cipher text as before we choose eggs

354
00:16:07,670 --> 00:16:10,820
from LA and do everything as before but

355
00:16:10,820 --> 00:16:13,370
now we also take another linear language

356
00:16:13,370 --> 00:16:17,600
so we take lb and for the other part we

357
00:16:17,600 --> 00:16:20,480
choose x from LP and for the blue part

358
00:16:20,480 --> 00:16:23,210
we use one secret key and for the green

359
00:16:23,210 --> 00:16:26,210
part we use the other secret key and now

360
00:16:26,210 --> 00:16:29,420
we can answer how can we answer - how

361
00:16:29,420 --> 00:16:31,280
can we answer the cripton queries well

362
00:16:31,280 --> 00:16:34,340
for decryption queries that has X in the

363
00:16:34,340 --> 00:16:36,710
one part we just use two secret key we

364
00:16:36,710 --> 00:16:38,600
used for the blue part and for

365
00:16:38,600 --> 00:16:41,390
decrypting queries that have X and LB we

366
00:16:41,390 --> 00:16:42,860
just use the secret key for the green

367
00:16:42,860 --> 00:16:45,080
part but what do we do with the

368
00:16:45,080 --> 00:16:46,520
decryption queries that are neither in

369
00:16:46,520 --> 00:16:50,120
one part or the other well we have to

370
00:16:50,120 --> 00:16:51,770
ensure that they are in the one part or

371
00:16:51,770 --> 00:16:54,710
the other and how do we do that we can

372
00:16:54,710 --> 00:16:58,220
use as who finds 2017 explicit proof pi

373
00:16:58,220 --> 00:17:01,070
but the novelty of this work is we do

374
00:17:01,070 --> 00:17:03,170
did without pairings we do not require

375
00:17:03,170 --> 00:17:05,930
pairings for that and why does this help

376
00:17:05,930 --> 00:17:08,180
like shortly and this randomization

377
00:17:08,180 --> 00:17:11,690
helps because this enable us to just

378
00:17:11,690 --> 00:17:13,910
reject all decryption queries which are

379
00:17:13,910 --> 00:17:15,890
outside of LA and then we can do the

380
00:17:15,890 --> 00:17:18,500
same as for kirsov attachment before so

381
00:17:18,500 --> 00:17:21,680
this is why this risk yes use us so now

382
00:17:21,680 --> 00:17:23,690
I can show you our scheme again maybe

383
00:17:23,690 --> 00:17:25,880
now it's a bit more clear how it looks

384
00:17:25,880 --> 00:17:28,190
like actually you've seen everything you

385
00:17:28,190 --> 00:17:31,850
need so we just have cur solid estimate

386
00:17:31,850 --> 00:17:34,700
and then we additionally proof that X is

387
00:17:34,700 --> 00:17:38,510
either in LA or X's in LB and we only

388
00:17:38,510 --> 00:17:43,820
decrypt if this pi is valid so the main

389
00:17:43,820 --> 00:17:45,380
challenge of this verb or

390
00:17:45,380 --> 00:17:47,540
like how can we construct a pairing free

391
00:17:47,540 --> 00:17:50,120
non-interactive or proof so why is that

392
00:17:50,120 --> 00:17:53,840
oh I said hard so the problem is this is

393
00:17:53,840 --> 00:17:56,000
a disjunction of languages so it's not

394
00:17:56,000 --> 00:17:57,830
as nicely as if you just have a linear

395
00:17:57,830 --> 00:17:59,780
language usually you could require

396
00:17:59,780 --> 00:18:04,580
pairings to do so so how did we how did

397
00:18:04,580 --> 00:18:06,530
we solve this issue well if you if you

398
00:18:06,530 --> 00:18:08,090
take a look if you go back to the

399
00:18:08,090 --> 00:18:11,060
encryption algorithm what you do in the

400
00:18:11,060 --> 00:18:14,120
first line is you choose x from la with

401
00:18:14,120 --> 00:18:16,460
the witness and then you prove that X is

402
00:18:16,460 --> 00:18:19,580
in the disjunction but actually like you

403
00:18:19,580 --> 00:18:22,310
always choose X from la you never choose

404
00:18:22,310 --> 00:18:25,130
honestly never choose X from la so this

405
00:18:25,130 --> 00:18:27,410
is great so honest proof generation we

406
00:18:27,410 --> 00:18:29,600
just need that for linear language so we

407
00:18:29,600 --> 00:18:31,340
can employ a hash proof system with hash

408
00:18:31,340 --> 00:18:33,610
per system we can do this pairing free

409
00:18:33,610 --> 00:18:36,590
but of course it's not as easy as that

410
00:18:36,590 --> 00:18:39,470
because during randomization we also

411
00:18:39,470 --> 00:18:42,140
sometimes have to choose X from lb and

412
00:18:42,140 --> 00:18:44,690
then proof they give out simulated

413
00:18:44,690 --> 00:18:46,730
proofs for for having it in the

414
00:18:46,730 --> 00:18:49,070
disjunction of both so hash per system

415
00:18:49,070 --> 00:18:51,080
as I said before same problem as before

416
00:18:51,080 --> 00:18:54,350
we don't we by giving out something

417
00:18:54,350 --> 00:18:59,180
outside the span of LA and we we give

418
00:18:59,180 --> 00:19:01,700
away all security guarantees so the

419
00:19:01,700 --> 00:19:03,770
difficulty is how can we ensure that for

420
00:19:03,770 --> 00:19:05,780
watching a proof for eggs outside the

421
00:19:05,780 --> 00:19:09,220
disjunction is hard so the answer is

422
00:19:09,220 --> 00:19:11,540
just hide it's just hide it whenever

423
00:19:11,540 --> 00:19:14,450
access an LP how can we hide it well

424
00:19:14,450 --> 00:19:17,450
it's a kind of weird encryption that we

425
00:19:17,450 --> 00:19:21,110
can use there it's the encryption is

426
00:19:21,110 --> 00:19:24,500
indexed by s and we can encrypt the

427
00:19:24,500 --> 00:19:26,300
relation of the hash proof system and

428
00:19:26,300 --> 00:19:28,850
its encryption scheme is in such a way

429
00:19:28,850 --> 00:19:31,760
that it will be lossy whenever X is in

430
00:19:31,760 --> 00:19:36,250
LB so what do I mean by lossy just as

431
00:19:36,250 --> 00:19:40,220
generally known for all X in LB whenever

432
00:19:40,220 --> 00:19:43,970
like for any fixed K whenever we encrypt

433
00:19:43,970 --> 00:19:46,730
this K it just looks like a random

434
00:19:46,730 --> 00:19:48,470
encryption so it doesn't leak anything

435
00:19:48,470 --> 00:19:50,300
about the relation of the hash proof

436
00:19:50,300 --> 00:19:55,460
system so the security guarantees I will

437
00:19:55,460 --> 00:19:57,980
so we what the security guarantees will

438
00:19:57,980 --> 00:19:58,610
remain

439
00:19:58,610 --> 00:20:02,420
and and we're fine and so our opera I

440
00:20:02,420 --> 00:20:04,040
can show you a very simplified version

441
00:20:04,040 --> 00:20:06,590
of our proof now if you want to prove

442
00:20:06,590 --> 00:20:12,620
that X is indeed items W for some scalar

443
00:20:12,620 --> 00:20:15,380
W then you're just publicly available

444
00:20:15,380 --> 00:20:18,290
ahead has your proof system using W and

445
00:20:18,290 --> 00:20:21,170
the public key actually now you one

446
00:20:21,170 --> 00:20:22,700
universal house proof system is good

447
00:20:22,700 --> 00:20:25,549
enough and then you encrypt using this X

448
00:20:25,549 --> 00:20:27,440
you encrypt the relation of the house

449
00:20:27,440 --> 00:20:31,299
proof system and that's it's this proof

450
00:20:31,299 --> 00:20:33,950
like the security notion you get it's

451
00:20:33,950 --> 00:20:35,990
it's it's it's quite weird to be honest

452
00:20:35,990 --> 00:20:38,030
but it's exactly what we need and it

453
00:20:38,030 --> 00:20:41,870
gives us exactly what what we want so to

454
00:20:41,870 --> 00:20:44,600
conclude this talk um

455
00:20:44,600 --> 00:20:47,690
what would what's what's to take home so

456
00:20:47,690 --> 00:20:49,669
the new were new thing of our work is

457
00:20:49,669 --> 00:20:53,030
this new efficient pairing free non

458
00:20:53,030 --> 00:20:55,340
interactive designated verifier or proof

459
00:20:55,340 --> 00:20:58,940
and so we and what we did was we reduced

460
00:20:58,940 --> 00:21:02,299
the cost of tight security to just one

461
00:21:02,299 --> 00:21:05,150
more element like compared to the to the

462
00:21:05,150 --> 00:21:06,740
best scheme in this line before it's

463
00:21:06,740 --> 00:21:09,080
just one one more element in ciphertext

464
00:21:09,080 --> 00:21:11,090
and less than a handful more element in

465
00:21:11,090 --> 00:21:12,830
the public key and we get this tight

466
00:21:12,830 --> 00:21:15,950
security reduction so yeah that's all I

467
00:21:15,950 --> 00:21:18,169
want to say for today thanks very much

468
00:21:18,169 --> 00:21:20,840
for coming here thanks for your

469
00:21:20,840 --> 00:21:23,299
attention and yeah I'm happy about

470
00:21:23,299 --> 00:21:25,150
questions thank you

471
00:21:25,150 --> 00:21:29,880
[Applause]

