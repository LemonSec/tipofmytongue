1
00:00:05,890 --> 00:00:09,469
identity-based encryption is a notion of

2
00:00:09,469 --> 00:00:11,870
public key encryption where any strings

3
00:00:11,870 --> 00:00:14,959
such as a name or address can serve as a

4
00:00:14,959 --> 00:00:16,520
public key of a user

5
00:00:16,520 --> 00:00:18,859
we usually formalize this via the

6
00:00:18,859 --> 00:00:22,190
following four algorithms there's a set

7
00:00:22,190 --> 00:00:24,620
up algorithm that generates a master

8
00:00:24,620 --> 00:00:26,600
public key and a master secret key we

9
00:00:26,600 --> 00:00:28,850
think of this algorithm being run by a

10
00:00:28,850 --> 00:00:33,140
trusted key authority there's a there's

11
00:00:33,140 --> 00:00:35,300
a key generation algorithm which is also

12
00:00:35,300 --> 00:00:37,579
run by the key authority which given any

13
00:00:37,579 --> 00:00:41,359
identity generates a corresponding user

14
00:00:41,359 --> 00:00:44,839
secret key and then there's the

15
00:00:44,839 --> 00:00:47,629
encryption algorithm which given an

16
00:00:47,629 --> 00:00:49,909
identity and the master public key as

17
00:00:49,909 --> 00:00:52,489
well as a message computes a cipher text

18
00:00:52,489 --> 00:00:54,979
under this identity and finally there's

19
00:00:54,979 --> 00:00:58,129
the decryption algorithm which given a

20
00:00:58,129 --> 00:01:01,010
user secret key and a cipher text

21
00:01:01,010 --> 00:01:04,099
computes or outputs the corresponding

22
00:01:04,099 --> 00:01:06,710
plaintext message m and in terms of

23
00:01:06,710 --> 00:01:09,079
correctness we require that this message

24
00:01:09,079 --> 00:01:11,869
M that decryption outputs when we

25
00:01:11,869 --> 00:01:15,439
decrypt with the user secret key sk ID

26
00:01:15,439 --> 00:01:18,200
is the same as the message that was

27
00:01:18,200 --> 00:01:22,369
encrypted under the identity ID security

28
00:01:22,369 --> 00:01:25,329
is defined via the following experiment

29
00:01:25,329 --> 00:01:28,689
between a challenger and a ppt adversary

30
00:01:28,689 --> 00:01:31,490
first the Challenger generates a pair of

31
00:01:31,490 --> 00:01:33,859
master public and master secret keys and

32
00:01:33,859 --> 00:01:35,780
the master public key is given to the

33
00:01:35,780 --> 00:01:38,090
adversary now the adversary is allowed

34
00:01:38,090 --> 00:01:41,719
to query identity keys for an arbitrary

35
00:01:41,719 --> 00:01:44,210
number of identities of his choice and

36
00:01:44,210 --> 00:01:47,689
at some point the adversary outputs an

37
00:01:47,689 --> 00:01:50,149
ident or passes an identity it's star

38
00:01:50,149 --> 00:01:53,149
and two messages m0 and m1 to the

39
00:01:53,149 --> 00:01:55,880
Challenger and we require that this

40
00:01:55,880 --> 00:01:58,100
challenge identity eight star is

41
00:01:58,100 --> 00:02:00,950
different from all the identities for

42
00:02:00,950 --> 00:02:04,009
which the adversary has query keys the

43
00:02:04,009 --> 00:02:06,189
experiment chooses a random bit B and

44
00:02:06,189 --> 00:02:09,440
encrypts the message and B under the

45
00:02:09,440 --> 00:02:12,980
identity it's star and the resulting

46
00:02:12,980 --> 00:02:15,140
ciphertext is given to the adversary now

47
00:02:15,140 --> 00:02:18,260
the adversary gets more access to the

48
00:02:18,260 --> 00:02:19,220
this key or

49
00:02:19,220 --> 00:02:21,470
means you can again ask keys for

50
00:02:21,470 --> 00:02:26,450
identities its conditioned on that they

51
00:02:26,450 --> 00:02:28,160
were different from the challenge

52
00:02:28,160 --> 00:02:31,640
identity its star and receives the

53
00:02:31,640 --> 00:02:34,880
corresponding identity secret keys in

54
00:02:34,880 --> 00:02:38,690
the end the adversary outputs a guess B

55
00:02:38,690 --> 00:02:41,030
prime for the bit B and we say the

56
00:02:41,030 --> 00:02:43,670
adversary wins if this bid B prime is

57
00:02:43,670 --> 00:02:48,440
identical to the bid B we say a scheme

58
00:02:48,440 --> 00:02:51,200
is in ìbe secure if the probability that

59
00:02:51,200 --> 00:02:54,230
this guess B prime matches B is at most

60
00:02:54,230 --> 00:02:58,670
1/2 plus negligible the notion of

61
00:02:58,670 --> 00:03:01,220
identity based encryption was famously

62
00:03:01,220 --> 00:03:04,580
introduced by Samir in a work in 1984

63
00:03:04,580 --> 00:03:08,050
however without providing a construction

64
00:03:08,050 --> 00:03:12,110
17 years later Bonet and Franklin found

65
00:03:12,110 --> 00:03:14,510
a construction based on by linear groups

66
00:03:14,510 --> 00:03:16,940
as well as Clifford Cox provided a

67
00:03:16,940 --> 00:03:18,890
construction based on the quadratic

68
00:03:18,890 --> 00:03:24,320
residue OCT assumption furthermore we we

69
00:03:24,320 --> 00:03:27,050
also know constructions from the lwe

70
00:03:27,050 --> 00:03:30,800
problem and this is pretty much the

71
00:03:30,800 --> 00:03:33,650
situation this is pretty much the

72
00:03:33,650 --> 00:03:37,340
situation today we basically know IBE

73
00:03:37,340 --> 00:03:40,220
from these three standard assumptions by

74
00:03:40,220 --> 00:03:42,860
linear maps lwe and quadratic residue

75
00:03:42,860 --> 00:03:45,380
asset ii and in the case of quadratic

76
00:03:45,380 --> 00:03:47,600
residue asset II we even need a random

77
00:03:47,600 --> 00:03:51,530
Oracle to realize this notion this might

78
00:03:51,530 --> 00:03:53,330
be seen as a rather small pool of

79
00:03:53,330 --> 00:03:56,030
Harkness assumption in particular when

80
00:03:56,030 --> 00:03:58,040
we compare this to the notion of public

81
00:03:58,040 --> 00:03:59,780
key encryption where there is a much

82
00:03:59,780 --> 00:04:02,690
wider pool of assumption assumptions

83
00:04:02,690 --> 00:04:05,269
from which we can instantiate this

84
00:04:05,269 --> 00:04:08,090
primitive so there's somewhat of a

85
00:04:08,090 --> 00:04:11,870
perceived gap between the notion of iv'e

86
00:04:11,870 --> 00:04:14,959
and public key encryption furthermore we

87
00:04:14,959 --> 00:04:17,510
know that black box techniques will not

88
00:04:17,510 --> 00:04:19,880
suffice to build identity based

89
00:04:19,880 --> 00:04:21,798
encryption from trapdoor permutations

90
00:04:21,798 --> 00:04:25,100
CCA encryption or the decisional

91
00:04:25,100 --> 00:04:28,210
diffie-hellman assumption furthermore

92
00:04:28,210 --> 00:04:30,890
reinforcing this perceived gap between

93
00:04:30,890 --> 00:04:32,389
identity based and

94
00:04:32,389 --> 00:04:36,289
and public key encryption what I'm going

95
00:04:36,289 --> 00:04:38,000
to show you in this work will be the

96
00:04:38,000 --> 00:04:39,860
first fully secure identity based

97
00:04:39,860 --> 00:04:42,469
encryption scheme from the computational

98
00:04:42,469 --> 00:04:44,930
diffie-hellman assumption without the

99
00:04:44,930 --> 00:04:47,509
use of bilinear pairings and our

100
00:04:47,509 --> 00:04:49,340
construction will be based on the

101
00:04:49,340 --> 00:04:51,379
computational diffie-hellman problem

102
00:04:51,379 --> 00:04:55,669
which is to compute G to the a B given G

103
00:04:55,669 --> 00:04:59,360
to the a and G to the B and not the

104
00:04:59,360 --> 00:05:01,129
decisional diffie-hellman problem where

105
00:05:01,129 --> 00:05:03,039
the task is to distinguish this from

106
00:05:03,039 --> 00:05:08,900
uniform the main ingredient to our

107
00:05:08,900 --> 00:05:12,889
approach is evaluating a cryptographic

108
00:05:12,889 --> 00:05:16,009
primitive inside garbled circuits this

109
00:05:16,009 --> 00:05:18,349
will allow us to overcome these

110
00:05:18,349 --> 00:05:20,330
aforementioned blackbox impossibility

111
00:05:20,330 --> 00:05:25,129
results now we can also instantiate our

112
00:05:25,129 --> 00:05:28,449
result from the factoring assumption and

113
00:05:28,449 --> 00:05:31,250
in the paper we also provide a

114
00:05:31,250 --> 00:05:35,360
construction of hierarchical ibe this

115
00:05:35,360 --> 00:05:38,300
was an open problem for even for

116
00:05:38,300 --> 00:05:40,069
factoring type assumptions such as the

117
00:05:40,069 --> 00:05:44,060
quadratic residue OCD problem now in the

118
00:05:44,060 --> 00:05:46,460
rest of the talk I am first going to

119
00:05:46,460 --> 00:05:49,069
introduce a new notion of encryption we

120
00:05:49,069 --> 00:05:51,110
call chameleon hashing with encryption

121
00:05:51,110 --> 00:05:55,310
and then I'll show you how to instead

122
00:05:55,310 --> 00:05:57,169
how to construct identity based

123
00:05:57,169 --> 00:06:00,520
encryption from this from this primitive

124
00:06:00,520 --> 00:06:02,990
so first let's talk about chameleon

125
00:06:02,990 --> 00:06:05,330
hashing with encryption or as we like to

126
00:06:05,330 --> 00:06:08,949
call it chameleon encryption for short a

127
00:06:08,949 --> 00:06:12,279
chameleon hashing scheme is a type of

128
00:06:12,279 --> 00:06:14,990
collision resistant hash function with a

129
00:06:14,990 --> 00:06:17,509
special collision trapdoor we formalize

130
00:06:17,509 --> 00:06:19,460
this via the following algorithms

131
00:06:19,460 --> 00:06:22,189
there's a generator algorithm which

132
00:06:22,189 --> 00:06:24,800
outputs a hashing key and a collision

133
00:06:24,800 --> 00:06:28,129
trapdoor there's a hashing algorithm

134
00:06:28,129 --> 00:06:30,050
which which takes the hashing key a

135
00:06:30,050 --> 00:06:32,150
message X and some randomness R and

136
00:06:32,150 --> 00:06:35,060
output the hash value and we acquire

137
00:06:35,060 --> 00:06:38,330
this function to be shrinking the input

138
00:06:38,330 --> 00:06:40,339
X we want it want it to be compressing

139
00:06:40,339 --> 00:06:45,300
and finally we require a collision fine

140
00:06:45,300 --> 00:06:49,889
algorithm we call H inverse which takes

141
00:06:49,889 --> 00:06:52,229
as input the collision trapdoor a

142
00:06:52,229 --> 00:06:55,949
pre-image X and a new pre image X Prime

143
00:06:55,949 --> 00:06:59,039
and the old randomness are and outputs a

144
00:06:59,039 --> 00:07:03,360
new randomness R prime such that X R and

145
00:07:03,360 --> 00:07:06,870
X prime R prime collide under this hash

146
00:07:06,870 --> 00:07:14,250
function H so this is chameleon hashing

147
00:07:14,250 --> 00:07:17,250
our new notion is chameleon hashing with

148
00:07:17,250 --> 00:07:20,099
encryption or chameleon encryption so we

149
00:07:20,099 --> 00:07:22,710
add an encryption aspect to this

150
00:07:22,710 --> 00:07:28,620
primitive and the first extra algorithm

151
00:07:28,620 --> 00:07:30,210
that we require is an encryption

152
00:07:30,210 --> 00:07:33,389
algorithm which takes hashing key hash

153
00:07:33,389 --> 00:07:36,930
value H an index I and a bit a bit B and

154
00:07:36,930 --> 00:07:39,449
a message m and outputs the ciphertext C

155
00:07:39,449 --> 00:07:44,400
and a decryption algorithm which takes

156
00:07:44,400 --> 00:07:47,520
as input a the hashing key K and the

157
00:07:47,520 --> 00:07:49,770
preimage X together with a randomness

158
00:07:49,770 --> 00:07:54,060
and the ciphertext and outputs a message

159
00:07:54,060 --> 00:07:57,870
m Prime and we require that the message

160
00:07:57,870 --> 00:08:02,849
m Prime is identical to M given that the

161
00:08:02,849 --> 00:08:06,569
preimage X fulfills the condition that X

162
00:08:06,569 --> 00:08:09,479
is a pre-image of this hash value H and

163
00:08:09,479 --> 00:08:12,210
it fulfills the condition that the I F

164
00:08:12,210 --> 00:08:17,099
bit of X is B so if X I is equals B

165
00:08:17,099 --> 00:08:21,029
equals B Bob will be able to decrypt the

166
00:08:21,029 --> 00:08:24,240
message m and if this is not about the

167
00:08:24,240 --> 00:08:27,900
case if Bob knows a say a different

168
00:08:27,900 --> 00:08:31,620
preimage under for the hash value H we

169
00:08:31,620 --> 00:08:33,479
acquire ciphertext indistinguishability

170
00:08:33,479 --> 00:08:37,409
so even if Bob knows a valid valid

171
00:08:37,409 --> 00:08:40,828
preimage to this hash value H but it's a

172
00:08:40,828 --> 00:08:43,679
F bit is flipped Bob will not tell

173
00:08:43,679 --> 00:08:49,529
whether we've encrypted a 0 or a 1 so

174
00:08:49,529 --> 00:08:53,070
now I'm going to show you a simple

175
00:08:53,070 --> 00:08:55,140
construction of chameleon encryption

176
00:08:55,140 --> 00:08:58,200
from the DDH assumption in the paper

177
00:08:58,200 --> 00:08:59,940
we can actually do this from the CDH

178
00:08:59,940 --> 00:09:02,670
assumption but for the sake of private

179
00:09:02,670 --> 00:09:05,490
gravity i will provide the simplified

180
00:09:05,490 --> 00:09:08,790
EDH construction here the hashing p

181
00:09:08,790 --> 00:09:12,200
consists of a group generator G together

182
00:09:12,200 --> 00:09:17,010
with n pairs of group elements GI 0 and

183
00:09:17,010 --> 00:09:23,040
GI 1 the hashing algorithm first

184
00:09:23,040 --> 00:09:25,800
computes G to the R and then the product

185
00:09:25,800 --> 00:09:29,370
of the GJ XJ that's the output of my

186
00:09:29,370 --> 00:09:32,370
chameleon hash function I am NOT going

187
00:09:32,370 --> 00:09:34,830
to provide the collision finding

188
00:09:34,830 --> 00:09:36,960
algorithm on this slides for details

189
00:09:36,960 --> 00:09:39,510
please refer to the paper however I'm

190
00:09:39,510 --> 00:09:41,670
straight going to the encryption

191
00:09:41,670 --> 00:09:44,160
algorithm so it's a first attempt we

192
00:09:44,160 --> 00:09:47,250
might try to just use the el-gamal

193
00:09:47,250 --> 00:09:49,920
approach we say the first component of

194
00:09:49,920 --> 00:09:53,130
the ciphertext is H to the s and the

195
00:09:53,130 --> 00:09:57,000
second component is just GI B to the s

196
00:09:57,000 --> 00:09:59,520
times M that's an L kemal encryption

197
00:09:59,520 --> 00:10:02,600
however this would not be enough for the

198
00:10:02,600 --> 00:10:05,670
Decrypter to recover this message since

199
00:10:05,670 --> 00:10:07,890
decryptor doesn't doesn't know a

200
00:10:07,890 --> 00:10:10,620
discrete logarithm of this H with

201
00:10:10,620 --> 00:10:15,360
respect to G a B but rather a pre-image

202
00:10:15,360 --> 00:10:17,820
under this hash function so what we do

203
00:10:17,820 --> 00:10:20,940
instead is we add a few extra terms to

204
00:10:20,940 --> 00:10:24,000
the ciphertext in particular a G to the

205
00:10:24,000 --> 00:10:29,130
S and some some group elements cj0 and

206
00:10:29,130 --> 00:10:33,780
zj1 which are GJ 0 to the s and GJ 1 to

207
00:10:33,780 --> 00:10:36,960
the s and what's important here we don't

208
00:10:36,960 --> 00:10:40,020
provide these elements for J equals I

209
00:10:40,020 --> 00:10:42,990
because then one could directly decrypt

210
00:10:42,990 --> 00:10:45,630
and we wouldn't have any security so how

211
00:10:45,630 --> 00:10:50,250
do we decrypt decryption basically

212
00:10:50,250 --> 00:10:53,760
computes this product it takes this term

213
00:10:53,760 --> 00:10:57,990
e computes z0 to the R times the product

214
00:10:57,990 --> 00:11:02,040
J not equals I see J XJ and divides it

215
00:11:02,040 --> 00:11:06,420
by c1 so why is this scheme correct how

216
00:11:06,420 --> 00:11:07,980
can we see that this scheme correct well

217
00:11:07,980 --> 00:11:11,420
in a first step we know that the

218
00:11:11,420 --> 00:11:15,260
see one is just H to the s so let's just

219
00:11:15,260 --> 00:11:18,200
blog plug in H to the s now we know that

220
00:11:18,200 --> 00:11:22,850
H is a half value of x using randomness

221
00:11:22,850 --> 00:11:26,780
R so let's plug that inside and already

222
00:11:26,780 --> 00:11:32,480
pull pull the G ixi to the S term out so

223
00:11:32,480 --> 00:11:35,510
this is just the the hash value with a

224
00:11:35,510 --> 00:11:39,980
GI X I term pulled out we can cancel

225
00:11:39,980 --> 00:11:43,310
these terms and what remains is M times

226
00:11:43,310 --> 00:11:47,810
G I B to the s divided by G ixi to the S

227
00:11:47,810 --> 00:11:52,910
and if our preimage actually fulfills

228
00:11:52,910 --> 00:11:55,520
this condition that the I F bit is B

229
00:11:55,520 --> 00:11:58,400
those two terms cancel out and we have M

230
00:11:58,400 --> 00:12:01,130
for the security reduction please refer

231
00:12:01,130 --> 00:12:03,890
to the paper what I'm going to show you

232
00:12:03,890 --> 00:12:08,540
now is a deconstruction of identity

233
00:12:08,540 --> 00:12:10,910
based encryption from chameleon

234
00:12:10,910 --> 00:12:12,830
encryption and I'm not gonna provide you

235
00:12:12,830 --> 00:12:16,460
the full construction but a toy example

236
00:12:16,460 --> 00:12:19,430
which showcases all techniques that are

237
00:12:19,430 --> 00:12:23,000
used for the full construction so we are

238
00:12:23,000 --> 00:12:25,640
gonna build a IDE scheme that we're

239
00:12:25,640 --> 00:12:28,460
gonna call setup keygen encrypt and

240
00:12:28,460 --> 00:12:35,510
decrypt and we'll only do so for four

241
00:12:35,510 --> 00:12:37,940
identities in my scheme there will only

242
00:12:37,940 --> 00:12:40,910
be four identities but as I said the

243
00:12:40,910 --> 00:12:42,410
techniques I'm showing you here will

244
00:12:42,410 --> 00:12:44,870
generalize to an exponential number of

245
00:12:44,870 --> 00:12:49,220
identities with from polynomial

246
00:12:49,220 --> 00:12:52,190
heartless assumptions so doing this step

247
00:12:52,190 --> 00:12:55,220
from constant to exponential will not

248
00:12:55,220 --> 00:12:57,830
require a change in in my heartless

249
00:12:57,830 --> 00:13:02,090
assumptions the key generation algorithm

250
00:13:02,090 --> 00:13:04,790
that I'm gonna show you is stateful that

251
00:13:04,790 --> 00:13:07,430
means when I generate new keys I need to

252
00:13:07,430 --> 00:13:10,370
remember the old keys this can be

253
00:13:10,370 --> 00:13:13,250
randomized using pseudo-random functions

254
00:13:13,250 --> 00:13:15,920
but again for details please refer to

255
00:13:15,920 --> 00:13:19,760
the paper and as ingredients we have

256
00:13:19,760 --> 00:13:22,370
first a chameleon encryption scheme gen

257
00:13:22,370 --> 00:13:25,450
h h inverse ank and deck

258
00:13:25,450 --> 00:13:28,820
second I'll require a standard in CPA

259
00:13:28,820 --> 00:13:32,690
secure public key encryption scheme kg e

260
00:13:32,690 --> 00:13:36,560
and B and as a third component

261
00:13:36,560 --> 00:13:39,920
I require garbled searches I will use

262
00:13:39,920 --> 00:13:42,440
garbled circuits so first let's look

263
00:13:42,440 --> 00:13:48,170
into how key generation works so the the

264
00:13:48,170 --> 00:13:50,930
overall idea of this scheme is to

265
00:13:50,930 --> 00:13:55,730
arrange the keys in a binary tree let's

266
00:13:55,730 --> 00:13:58,490
look what the setup algorithm does the

267
00:13:58,490 --> 00:14:01,130
setup algorithm first chooses two pairs

268
00:14:01,130 --> 00:14:04,220
of hashing keys and collision trap doors

269
00:14:04,220 --> 00:14:08,150
of the chameleon encryption scheme k 1 T

270
00:14:08,150 --> 00:14:12,200
1 and K 2 ki 2 we will associate K 1

271
00:14:12,200 --> 00:14:15,110
with the first layer of this tree and K

272
00:14:15,110 --> 00:14:18,910
2 with the second layer of this tree

273
00:14:18,910 --> 00:14:23,540
then we'll compute a hash value H as a

274
00:14:23,540 --> 00:14:27,110
hash value of the all-0 string and we'll

275
00:14:27,110 --> 00:14:29,450
write this hash value H into the root

276
00:14:29,450 --> 00:14:34,670
and that's already it h k1 and k2 it

277
00:14:34,670 --> 00:14:38,060
finds our master public key the master

278
00:14:38,060 --> 00:14:40,880
secret key is given by the corresponding

279
00:14:40,880 --> 00:14:43,790
private values namely the collision trap

280
00:14:43,790 --> 00:14:46,970
doors t1 and t2 and to randomness are

281
00:14:46,970 --> 00:14:50,420
used to compute this hash value now

282
00:14:50,420 --> 00:14:53,870
let's see how key generation works say

283
00:14:53,870 --> 00:14:55,820
we want to generate a key for the

284
00:14:55,820 --> 00:15:00,010
identity 1 1 in general we will

285
00:15:00,010 --> 00:15:03,260
associate identities with root to leaf

286
00:15:03,260 --> 00:15:06,170
spot leaf paths so the identity 1 1 goes

287
00:15:06,170 --> 00:15:06,980
first

288
00:15:06,980 --> 00:15:10,010
first left first left the identity 1 0

289
00:15:10,010 --> 00:15:12,950
would go first left or sorry first right

290
00:15:12,950 --> 00:15:15,430
then left

291
00:15:15,430 --> 00:15:19,790
so identities will be or identity keys

292
00:15:19,790 --> 00:15:24,200
will be tied to root to leaf paths at

293
00:15:24,200 --> 00:15:28,580
first will generate a hash value h 0 4

294
00:15:28,580 --> 00:15:31,730
for this slot here also as a hash value

295
00:15:31,730 --> 00:15:36,680
of 0 and a hash value h 1 also as a hash

296
00:15:36,680 --> 00:15:38,709
value of 1

297
00:15:38,709 --> 00:15:43,310
so what I would like now is that age is

298
00:15:43,310 --> 00:15:45,649
actually the hash value of a

299
00:15:45,649 --> 00:15:48,620
concatenation of H 0 and H 1 but right

300
00:15:48,620 --> 00:15:52,339
now H is the hash value of an old 0

301
00:15:52,339 --> 00:15:54,860
string so what i'm gonna do is i'm using

302
00:15:54,860 --> 00:15:57,500
this collision magic of chameleon hash

303
00:15:57,500 --> 00:15:59,390
functions I'm using the collision

304
00:15:59,390 --> 00:16:03,529
trapdoor to program H to be the hash

305
00:16:03,529 --> 00:16:07,670
value of H 0 concatenated eight H 1 of

306
00:16:07,670 --> 00:16:11,149
course in the process I'll have to use a

307
00:16:11,149 --> 00:16:13,070
new randomness R Prime

308
00:16:13,070 --> 00:16:17,470
but under this randomness R prime age is

309
00:16:17,470 --> 00:16:20,810
the hash value is identical to the hash

310
00:16:20,810 --> 00:16:24,500
value of H 0 concatenated with H 1 under

311
00:16:24,500 --> 00:16:29,990
K 1 so let's go further next thing I'm

312
00:16:29,990 --> 00:16:33,740
gonna generate two pairs of public and

313
00:16:33,740 --> 00:16:36,950
secret keys for a for my public key

314
00:16:36,950 --> 00:16:39,980
encryption scheme using the algorithm ki

315
00:16:39,980 --> 00:16:44,829
J call the public keys ek 1 0 and EK 1 1

316
00:16:44,829 --> 00:16:48,140
and I'm gonna write these two encryption

317
00:16:48,140 --> 00:16:51,140
keys into these leaves for now I'm gonna

318
00:16:51,140 --> 00:16:55,190
remember that the decription key DK 1 1

319
00:16:55,190 --> 00:16:59,270
and I'm proceeding as before I want H 1

320
00:16:59,270 --> 00:17:02,690
to be the hash value of e K 1 0

321
00:17:02,690 --> 00:17:06,050
concatenated with ek 1 1 and to do so

322
00:17:06,050 --> 00:17:09,230
I'm gonna use the collision magic of my

323
00:17:09,230 --> 00:17:13,579
chameleon hash function and after I

324
00:17:13,579 --> 00:17:18,619
found this new random random term R 1

325
00:17:18,619 --> 00:17:21,199
Prime I actually have the guarantee that

326
00:17:21,199 --> 00:17:25,250
H 1 is the hash value of EK 0 EK 1 0

327
00:17:25,250 --> 00:17:28,550
concatenated with ek 1 1 and that's

328
00:17:28,550 --> 00:17:32,780
already it now I have a identity secret

329
00:17:32,780 --> 00:17:35,480
key this identity secret key consists of

330
00:17:35,480 --> 00:17:40,550
H 0 H h1 and R prime as well as ek 1 0

331
00:17:40,550 --> 00:17:44,480
EK 1 1 and r 1 prime so it consists of

332
00:17:44,480 --> 00:17:47,350
basically all the data along

333
00:17:47,350 --> 00:17:52,059
the route to leave path of of this tree

334
00:17:52,059 --> 00:17:55,960
plus additionally the decryption key dk1

335
00:17:55,960 --> 00:17:58,570
one that's that's how key generation

336
00:17:58,570 --> 00:18:02,710
proceeds now let's look into encryption

337
00:18:02,710 --> 00:18:06,400
and decryption and to to turn this into

338
00:18:06,400 --> 00:18:08,710
a working IDE scheme I need an

339
00:18:08,710 --> 00:18:11,110
additional ingredient namely yahwah's

340
00:18:11,110 --> 00:18:14,950
garbled circuits so a garbling scheme

341
00:18:14,950 --> 00:18:18,160
consists of an algorithm garble which

342
00:18:18,160 --> 00:18:21,760
takes as input a circuit C and outputs a

343
00:18:21,760 --> 00:18:24,789
garbling C Tildy of this circuit and a

344
00:18:24,789 --> 00:18:30,720
set of labels lab we also asked for a

345
00:18:30,720 --> 00:18:33,929
input garbling function which takes as

346
00:18:33,929 --> 00:18:39,970
inputs a an input X and the labels lab

347
00:18:39,970 --> 00:18:43,630
and computes a garbled input X tilde in

348
00:18:43,630 --> 00:18:45,669
the case of yahwah's garbled circuit

349
00:18:45,669 --> 00:18:48,610
this garbled simple input function is

350
00:18:48,610 --> 00:18:52,450
really simple namely each input wire of

351
00:18:52,450 --> 00:18:54,610
this circuit is associated with two

352
00:18:54,610 --> 00:18:58,059
labels and if you want to encode such an

353
00:18:58,059 --> 00:19:03,460
X we we will just choose the late for

354
00:19:03,460 --> 00:19:05,530
the first say for the first wire we will

355
00:19:05,530 --> 00:19:08,409
choose the label corresponding to the

356
00:19:08,409 --> 00:19:11,200
first bit of X for the second wire we'll

357
00:19:11,200 --> 00:19:12,880
choose the label corresponding to the

358
00:19:12,880 --> 00:19:16,659
second bit of X and so forth now we need

359
00:19:16,659 --> 00:19:18,490
a method to evaluate these garbled

360
00:19:18,490 --> 00:19:21,549
circuits this is usually called an eval

361
00:19:21,549 --> 00:19:23,980
function which takes as input a garbled

362
00:19:23,980 --> 00:19:29,230
circuits et le and garbled inputs and we

363
00:19:29,230 --> 00:19:31,770
acquire this correctness property that

364
00:19:31,770 --> 00:19:35,429
the output of this eval function is

365
00:19:35,429 --> 00:19:40,630
identical to what the circuit evaluated

366
00:19:40,630 --> 00:19:42,730
on these plain inputs would have

367
00:19:42,730 --> 00:19:46,539
produced in terms of security we require

368
00:19:46,539 --> 00:19:50,320
that C till the XT and YT le in this

369
00:19:50,320 --> 00:19:54,010
case tell the evaluator nothing more

370
00:19:54,010 --> 00:19:56,679
than the result or the output of the

371
00:19:56,679 --> 00:20:00,929
circuit C of X and wipe

372
00:20:01,070 --> 00:20:05,930
so to simplify the notation on the

373
00:20:05,930 --> 00:20:07,220
following slides a little bit

374
00:20:07,220 --> 00:20:09,860
let me introduce two additional

375
00:20:09,860 --> 00:20:11,810
functions we don't introduce them in the

376
00:20:11,810 --> 00:20:16,060
paper I'll just introduce them here for

377
00:20:16,060 --> 00:20:19,370
for a cleaner right up on my slides say

378
00:20:19,370 --> 00:20:22,520
Alice knows a hashed value H and a set

379
00:20:22,520 --> 00:20:28,520
of labels lb I beam we want to encrypt

380
00:20:28,520 --> 00:20:34,910
each label under a under the the key K

381
00:20:34,910 --> 00:20:39,140
the hash value H and the bit IB so we

382
00:20:39,140 --> 00:20:42,860
want to encrypt lb I be using index I

383
00:20:42,860 --> 00:20:45,680
and bit be in the chameleon encryption

384
00:20:45,680 --> 00:20:48,440
and as a shorthand I introduce the

385
00:20:48,440 --> 00:20:51,770
notion batch and crypts of K age and

386
00:20:51,770 --> 00:20:55,850
laughter this so this ciphertext is

387
00:20:55,850 --> 00:20:59,690
passed on to the Decrypter who can now

388
00:20:59,690 --> 00:21:03,530
use his pre image and the randomness are

389
00:21:03,530 --> 00:21:10,840
to decrypt the encrypted label L I X I

390
00:21:10,840 --> 00:21:15,530
namely the labels corresponding to the

391
00:21:15,530 --> 00:21:21,590
string X and this is via definition of

392
00:21:21,590 --> 00:21:23,300
the garbled input function in yellow

393
00:21:23,300 --> 00:21:28,250
scheme precisely the garbling of input x

394
00:21:28,250 --> 00:21:32,180
under the labels lab and for for this

395
00:21:32,180 --> 00:21:34,130
function I'm gonna introduce this

396
00:21:34,130 --> 00:21:38,420
shorthand batch decryption of K X R and

397
00:21:38,420 --> 00:21:45,260
L okay and now we can dive into the

398
00:21:45,260 --> 00:21:48,910
encryption algorithm first let's again

399
00:21:48,910 --> 00:21:52,730
draw our binary tree with the master

400
00:21:52,730 --> 00:21:57,950
public key here in to encrypt a message

401
00:21:57,950 --> 00:22:01,430
M under the master public key and the

402
00:22:01,430 --> 00:22:07,280
identity 1 1 we will we will first take

403
00:22:07,280 --> 00:22:11,030
a circuit t hardwire a message m into

404
00:22:11,030 --> 00:22:13,250
this circuit and this circuit receives

405
00:22:13,250 --> 00:22:14,809
as inputs and encryption

406
00:22:14,809 --> 00:22:18,730
heee k10 and encryptions ki te k-11 and

407
00:22:18,730 --> 00:22:23,330
outputs an encryption of M under this ki

408
00:22:23,330 --> 00:22:26,870
EK one one and what we're going to do

409
00:22:26,870 --> 00:22:29,539
with this circuit TM is we are gonna

410
00:22:29,539 --> 00:22:31,429
garble it and the output of this

411
00:22:31,429 --> 00:22:33,980
garbling will be a garbled circuit TT le

412
00:22:33,980 --> 00:22:37,759
and labels lap one so we haven't used

413
00:22:37,759 --> 00:22:40,509
the master public key at this point in

414
00:22:40,509 --> 00:22:43,820
the next step we'll take a second

415
00:22:43,820 --> 00:22:47,659
circuit P which has as hardwired in put

416
00:22:47,659 --> 00:22:50,899
labels lap one and takes as input to

417
00:22:50,899 --> 00:22:55,850
half values H 0 and H 1 and computes as

418
00:22:55,850 --> 00:22:59,480
output output encrypted labels l1 which

419
00:22:59,480 --> 00:23:02,360
is the batch encryption of the labels

420
00:23:02,360 --> 00:23:07,159
lab 1 under k2 and the half value H 1 so

421
00:23:07,159 --> 00:23:11,179
we take this circuit we hardwired lab 1

422
00:23:11,179 --> 00:23:13,669
into it and now we garble it and the

423
00:23:13,669 --> 00:23:19,100
output we call PT le and lab and finally

424
00:23:19,100 --> 00:23:23,019
which is take these labels lab and

425
00:23:23,019 --> 00:23:26,570
encrypt them under the hash value age

426
00:23:26,570 --> 00:23:29,629
which is provided to us in the master

427
00:23:29,629 --> 00:23:32,210
public key so this this half value H

428
00:23:32,210 --> 00:23:33,860
comes from the master public key and we

429
00:23:33,860 --> 00:23:37,460
can use it to batch encrypt these labels

430
00:23:37,460 --> 00:23:40,190
and call that L so and that's our cipher

431
00:23:40,190 --> 00:23:42,710
text the cipher text consists of L P

432
00:23:42,710 --> 00:23:47,389
build Tildy and TT le now let's get into

433
00:23:47,389 --> 00:23:50,629
decryption and first thing we need for

434
00:23:50,629 --> 00:23:54,649
decryption is the user or identity

435
00:23:54,649 --> 00:23:56,539
secret key so let's write it back into

436
00:23:56,539 --> 00:24:00,440
into our tree h0 h1 and our prime as

437
00:24:00,440 --> 00:24:03,980
well as ek 1 0 EK 1 1 and r 1 Prime and

438
00:24:03,980 --> 00:24:08,570
- description key DK 1 1 we also need

439
00:24:08,570 --> 00:24:11,509
the cipher text so let's write down that

440
00:24:11,509 --> 00:24:12,350
as well

441
00:24:12,350 --> 00:24:16,580
LP Tildy and TTL D and to make to

442
00:24:16,580 --> 00:24:19,070
declutter things a little let me remove

443
00:24:19,070 --> 00:24:22,369
the tree and rearrange these terms a

444
00:24:22,369 --> 00:24:26,210
little so now we have the in the terms

445
00:24:26,210 --> 00:24:27,690
that come from the

446
00:24:27,690 --> 00:24:30,600
user secret key on the left side and the

447
00:24:30,600 --> 00:24:34,080
ciphertext terms on the right side now

448
00:24:34,080 --> 00:24:36,900
let's see how the Krypton works and why

449
00:24:36,900 --> 00:24:39,020
it works

450
00:24:39,020 --> 00:24:45,150
so if l PT Li TT le is a correctly

451
00:24:45,150 --> 00:24:48,690
formed ciphertext then we know that L is

452
00:24:48,690 --> 00:24:52,140
a bad encryption of lab under the

453
00:24:52,140 --> 00:24:56,870
hashing key k1 and the halfway value H

454
00:24:56,870 --> 00:25:00,570
so as a first step let's just batch

455
00:25:00,570 --> 00:25:06,630
decrypt L using using H 0 H 1 and our

456
00:25:06,630 --> 00:25:12,060
primer as a decryption key here and by

457
00:25:12,060 --> 00:25:13,740
the correctness of our chameleon

458
00:25:13,740 --> 00:25:15,720
encryption scheme this is actually

459
00:25:15,720 --> 00:25:19,860
identical to the garbling of input input

460
00:25:19,860 --> 00:25:23,840
h0 concatenated h 1 under the labels lab

461
00:25:23,840 --> 00:25:26,280
let's continue now we have garbled

462
00:25:26,280 --> 00:25:29,190
garbled inputs and we have a garbled

463
00:25:29,190 --> 00:25:31,980
circuit so the obvious thing to do is to

464
00:25:31,980 --> 00:25:35,610
evaluate tto Leon X tilde and the result

465
00:25:35,610 --> 00:25:39,540
is some output L 1 but since we've

466
00:25:39,540 --> 00:25:42,900
evaluated this by the correctness of the

467
00:25:42,900 --> 00:25:44,760
garbling scheme we've just evaluated

468
00:25:44,760 --> 00:25:48,480
this circuit P here so the output L 1 is

469
00:25:48,480 --> 00:25:50,280
actually identical to the batch

470
00:25:50,280 --> 00:25:54,810
encryption of lab 1 under K 2 and H 1

471
00:25:54,810 --> 00:25:56,790
let's proceed now we have a batch

472
00:25:56,790 --> 00:26:00,210
encryption the obvious thing to do is to

473
00:26:00,210 --> 00:26:04,500
decrypt it using this half preimage of

474
00:26:04,500 --> 00:26:10,290
of h 1 and let's call the result x 1 but

475
00:26:10,290 --> 00:26:13,020
by the correctness of the chameleon

476
00:26:13,020 --> 00:26:15,510
encryption scheme this again corresponds

477
00:26:15,510 --> 00:26:18,900
to the garbling of the input ek 1 0

478
00:26:18,900 --> 00:26:24,720
concatenated with ek 1 1 and as a final

479
00:26:24,720 --> 00:26:27,120
step let's evaluate the garbled circuit

480
00:26:27,120 --> 00:26:30,750
TT le on X 1 t LD but by the correctness

481
00:26:30,750 --> 00:26:35,160
of this garbled circuit this C T which

482
00:26:35,160 --> 00:26:38,300
is output by T tilde is identical to the

483
00:26:38,300 --> 00:26:40,290
encryption of M

484
00:26:40,290 --> 00:26:44,160
ek1 one and in the final step we can

485
00:26:44,160 --> 00:26:47,700
just use the dk1 one to the decrypt the

486
00:26:47,700 --> 00:26:51,140
ciphertext C T and obtain the message M

487
00:26:51,140 --> 00:26:54,480
so let me wrap up I've showed you the

488
00:26:54,480 --> 00:26:56,580
first identity based encryption scheme

489
00:26:56,580 --> 00:26:58,260
and from the computational

490
00:26:58,260 --> 00:26:59,880
diffie-hellman assumption without

491
00:26:59,880 --> 00:27:04,050
parents the magic ingredient that we

492
00:27:04,050 --> 00:27:06,360
used to circumvent blackbox

493
00:27:06,360 --> 00:27:09,300
impossibility were garbled circuits in

494
00:27:09,300 --> 00:27:13,620
particular we evaluated crypto gription

495
00:27:13,620 --> 00:27:16,740
functions inside garbled circuits and as

496
00:27:16,740 --> 00:27:20,790
a final open problem let me just ask can

497
00:27:20,790 --> 00:27:22,800
we realize other advanced public key

498
00:27:22,800 --> 00:27:24,900
encryption schemes under the

499
00:27:24,900 --> 00:27:27,000
diffie-hellman assumption maybe using

500
00:27:27,000 --> 00:27:29,610
similar techniques thank you for your

501
00:27:29,610 --> 00:27:30,380
attention

502
00:27:30,380 --> 00:27:36,130
[Applause]

