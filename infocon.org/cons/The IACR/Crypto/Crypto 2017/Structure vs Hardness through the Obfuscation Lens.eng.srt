1
00:00:04,880 --> 00:00:08,389
so hi I'm actually great this is

2
00:00:08,389 --> 00:00:10,070
structure versus hardness to the

3
00:00:10,070 --> 00:00:12,530
obfuscation dense it is joint work with

4
00:00:12,530 --> 00:00:14,240
near baton ski and we know we're going

5
00:00:14,240 --> 00:00:18,369
to happen okay

6
00:00:19,670 --> 00:00:23,070
so very structured algebraic problems

7
00:00:23,070 --> 00:00:24,540
like discrete log either

8
00:00:24,540 --> 00:00:26,910
bread-and-butter of cryptography most of

9
00:00:26,910 --> 00:00:28,800
our modern cryptography especially the

10
00:00:28,800 --> 00:00:31,410
public key kind is based on these

11
00:00:31,410 --> 00:00:33,809
problems and in this talk we would like

12
00:00:33,809 --> 00:00:37,860
to understand is this inherent so first

13
00:00:37,860 --> 00:00:39,120
of all we know that this structure

14
00:00:39,120 --> 00:00:41,489
algebraic structure is great for

15
00:00:41,489 --> 00:00:45,750
functionality in moreover we could say

16
00:00:45,750 --> 00:00:47,670
that this structure has been pivotal in

17
00:00:47,670 --> 00:00:49,440
getting cryptography in the development

18
00:00:49,440 --> 00:00:51,800
of cryptography itself for example

19
00:00:51,800 --> 00:00:54,630
public encryption really became possible

20
00:00:54,630 --> 00:00:57,870
when we assume the hardness of these

21
00:00:57,870 --> 00:01:00,050
number theoretic problems like factoring

22
00:01:00,050 --> 00:01:02,219
similarly the first zero knowledge

23
00:01:02,219 --> 00:01:04,559
groups we had were for quadratic residue

24
00:01:04,559 --> 00:01:07,979
our CV and more recently as we have

25
00:01:07,979 --> 00:01:10,530
assumed hardness of problems on lattices

26
00:01:10,530 --> 00:01:12,869
and so on we have a host of fantastic

27
00:01:12,869 --> 00:01:15,270
new applications such as fully

28
00:01:15,270 --> 00:01:18,960
homomorphic encryption okay so it is

29
00:01:18,960 --> 00:01:20,580
evident that the structure is great for

30
00:01:20,580 --> 00:01:22,170
functionality but it does not come for

31
00:01:22,170 --> 00:01:25,049
free because structured algebraically

32
00:01:25,049 --> 00:01:27,240
structure problems are a bit more easier

33
00:01:27,240 --> 00:01:30,420
to solve and this gives us a trade-off

34
00:01:30,420 --> 00:01:33,210
between high problems on one end between

35
00:01:33,210 --> 00:01:36,210
highness and algebraic structure on one

36
00:01:36,210 --> 00:01:38,520
end we have said society is extremely

37
00:01:38,520 --> 00:01:40,350
hard at the same time it is very

38
00:01:40,350 --> 00:01:43,560
unstructured unfortunately we don't know

39
00:01:43,560 --> 00:01:46,409
how to base any crypto on the hardness

40
00:01:46,409 --> 00:01:49,350
of sat alone then we have assumptions in

41
00:01:49,350 --> 00:01:51,270
mini crib so these have somewhat more

42
00:01:51,270 --> 00:01:54,689
structure and finally we come to crypto

43
00:01:54,689 --> 00:01:56,250
mania which is what we would be

44
00:01:56,250 --> 00:01:58,890
interested in this talk most of the so

45
00:01:58,890 --> 00:02:01,439
these consists of primitives of the

46
00:02:01,439 --> 00:02:04,950
public key kind so most of these are

47
00:02:04,950 --> 00:02:06,780
based on a handful of assumptions such

48
00:02:06,780 --> 00:02:10,229
IQR vbh and so on all these assumptions

49
00:02:10,229 --> 00:02:13,590
are extremely algebraic it turns out

50
00:02:13,590 --> 00:02:16,260
that we know some surprising quantum

51
00:02:16,260 --> 00:02:18,180
ends about financial time algorithms for

52
00:02:18,180 --> 00:02:21,989
these problems so these problems are

53
00:02:21,989 --> 00:02:25,110
easier in a different sense as well that

54
00:02:25,110 --> 00:02:28,290
they are unlikely to be np-complete and

55
00:02:28,290 --> 00:02:30,120
the reason is because they lie in these

56
00:02:30,120 --> 00:02:32,790
lower more structured complexity classes

57
00:02:32,790 --> 00:02:33,240
like

58
00:02:33,240 --> 00:02:36,120
in pain there's a coin P and a Z K so

59
00:02:36,120 --> 00:02:39,300
for now think so SEK is the cost class

60
00:02:39,300 --> 00:02:41,040
of problems that have statistical zero

61
00:02:41,040 --> 00:02:42,930
knowledge proof for now think of it as a

62
00:02:42,930 --> 00:02:45,000
small complexity class I'll define it

63
00:02:45,000 --> 00:02:49,230
later right so the first natural

64
00:02:49,230 --> 00:02:50,850
question here is how do we go about

65
00:02:50,850 --> 00:02:53,490
capturing this algebraic structure in

66
00:02:53,490 --> 00:02:55,640
this talk we make the choice that

67
00:02:55,640 --> 00:02:59,340
structure is equated with a high dress

68
00:02:59,340 --> 00:03:03,000
and low complexity classes okay so why

69
00:03:03,000 --> 00:03:05,880
is this a good idea so first of all we

70
00:03:05,880 --> 00:03:07,590
know that most of our assumptions

71
00:03:07,590 --> 00:03:09,950
actually lie in these two classes

72
00:03:09,950 --> 00:03:12,240
moreover they lie in these classes

73
00:03:12,240 --> 00:03:14,370
because they have some deep global

74
00:03:14,370 --> 00:03:16,770
properties for example factoring rise in

75
00:03:16,770 --> 00:03:18,960
NP intercept when P because factoring is

76
00:03:18,960 --> 00:03:21,360
unique and quadratic residue or city

77
00:03:21,360 --> 00:03:23,670
lies in a ZK because of its random self

78
00:03:23,670 --> 00:03:25,890
reducibility so we do actually want to

79
00:03:25,890 --> 00:03:28,340
capture these kinds of properties and

80
00:03:28,340 --> 00:03:30,300
finally we know that some of this

81
00:03:30,300 --> 00:03:32,900
structure actually implies crypto

82
00:03:32,900 --> 00:03:36,270
Ostrovsky showed that in average case

83
00:03:36,270 --> 00:03:38,880
height language in sdk actually implies

84
00:03:38,880 --> 00:03:40,770
one-way functions so we do want to

85
00:03:40,770 --> 00:03:42,230
understand these connections better

86
00:03:42,230 --> 00:03:47,640
maybe their title okay so right so this

87
00:03:47,640 --> 00:03:49,080
can brings us to the main question of

88
00:03:49,080 --> 00:03:50,700
this stuff like the script to actually

89
00:03:50,700 --> 00:03:54,870
require these structured assumptions so

90
00:03:54,870 --> 00:03:56,790
sometimes it turns out the dancer is yes

91
00:03:56,790 --> 00:03:59,490
for in some cases the cryptographic

92
00:03:59,490 --> 00:04:01,350
primitives themselves imply hard

93
00:04:01,350 --> 00:04:03,570
problems in these classes in which case

94
00:04:03,570 --> 00:04:05,610
the fact that the assumptions have to be

95
00:04:05,610 --> 00:04:08,460
structured is very natural for example

96
00:04:08,460 --> 00:04:10,200
fully homomorphic encryption implies

97
00:04:10,200 --> 00:04:13,170
high problems in a ZK and some very

98
00:04:13,170 --> 00:04:14,490
special kinds of public key encryption

99
00:04:14,490 --> 00:04:17,040
schemes and linear functions also imply

100
00:04:17,040 --> 00:04:19,310
hard problems in NP intersect 20

101
00:04:19,310 --> 00:04:22,470
but this is quite this is not understood

102
00:04:22,470 --> 00:04:25,710
very well let's take the case of a break

103
00:04:25,710 --> 00:04:28,410
encryption so we don't actually know if

104
00:04:28,410 --> 00:04:30,600
public key encryption implies hard

105
00:04:30,600 --> 00:04:33,630
problems in these classes given that

106
00:04:33,630 --> 00:04:35,310
public key encryption is usually based

107
00:04:35,310 --> 00:04:38,460
on assumptions which imply hard problems

108
00:04:38,460 --> 00:04:40,140
in these classes it would seem the case

109
00:04:40,140 --> 00:04:43,710
but we don't actually know similarly the

110
00:04:43,710 --> 00:04:45,210
case for other primitives the function

111
00:04:45,210 --> 00:04:46,030
encryption of the

112
00:04:46,030 --> 00:04:50,920
transfer IO and so on okay so this is

113
00:04:50,920 --> 00:04:52,480
the main question of the stock which

114
00:04:52,480 --> 00:04:54,100
cryptographic primitives require

115
00:04:54,100 --> 00:04:57,520
complexity theory at extraction so basic

116
00:04:57,520 --> 00:04:59,770
photography on minimal assumptions is a

117
00:04:59,770 --> 00:05:02,790
major goal in cryptography and

118
00:05:02,790 --> 00:05:04,990
understanding the complexity theoretical

119
00:05:04,990 --> 00:05:06,730
implications of these parameters helps

120
00:05:06,730 --> 00:05:08,770
shed light on what the minimal

121
00:05:08,770 --> 00:05:11,560
assumption has to be again today with

122
00:05:11,560 --> 00:05:14,800
four fhe we know that it implies hard

123
00:05:14,800 --> 00:05:15,940
problems in a decade

124
00:05:15,940 --> 00:05:18,670
so it has to be based on problems like

125
00:05:18,670 --> 00:05:21,880
lattice problems which also line a ZK

126
00:05:21,880 --> 00:05:24,100
under other hand with one wave functions

127
00:05:24,100 --> 00:05:26,770
we can dream we could hope to base them

128
00:05:26,770 --> 00:05:32,110
on and P hardness alone great so in this

129
00:05:32,110 --> 00:05:35,140
work we try to collect evidence that

130
00:05:35,140 --> 00:05:37,000
structure may not actually be that

131
00:05:37,000 --> 00:05:39,910
necessary so how do we go about doing it

132
00:05:39,910 --> 00:05:41,880
let's think of the simple case that

133
00:05:41,880 --> 00:05:44,500
showing that one-way functions do not

134
00:05:44,500 --> 00:05:47,470
imply hide structure problems the best

135
00:05:47,470 --> 00:05:48,880
way to do this would be to do it

136
00:05:48,880 --> 00:05:50,980
unconditional which would be in

137
00:05:50,980 --> 00:05:53,740
something like even if P was actually

138
00:05:53,740 --> 00:05:55,870
equal to ACK one way function still

139
00:05:55,870 --> 00:05:59,020
exists unfortunately this is too much to

140
00:05:59,020 --> 00:06:02,530
ask for because this will in particular

141
00:06:02,530 --> 00:06:07,030
imply proving P not equal to NP so we go

142
00:06:07,030 --> 00:06:09,250
for the next best thing which is we try

143
00:06:09,250 --> 00:06:11,350
to prove limitations on AI techniques an

144
00:06:11,350 --> 00:06:13,600
approach which was pioneered by bug

145
00:06:13,600 --> 00:06:16,750
layers and rootage okay so let me tell

146
00:06:16,750 --> 00:06:18,640
you about commonly used techniques in

147
00:06:18,640 --> 00:06:22,180
crypto right so black box constructions

148
00:06:22,180 --> 00:06:26,080
are very pervasive in all of crypto in

149
00:06:26,080 --> 00:06:27,850
this case let's think about how do we

150
00:06:27,850 --> 00:06:30,550
construct a language even paint a sec

151
00:06:30,550 --> 00:06:32,590
when P using one-way functions in a

152
00:06:32,590 --> 00:06:36,790
black box way right so a black box

153
00:06:36,790 --> 00:06:38,740
construction has two components the

154
00:06:38,740 --> 00:06:40,570
first half is affected is a construction

155
00:06:40,570 --> 00:06:45,370
which is a language in NP intersect 20

156
00:06:45,370 --> 00:06:47,230
you define using the one-way function

157
00:06:47,230 --> 00:06:49,960
which only uses input-output access to

158
00:06:49,960 --> 00:06:52,510
the one main function and additionally

159
00:06:52,510 --> 00:06:55,030
we have a security proof which says that

160
00:06:55,030 --> 00:06:58,100
given any adversary which breaks the

161
00:06:58,100 --> 00:07:02,419
we can use this adversary again only in

162
00:07:02,419 --> 00:07:05,360
an input-output access to invert the

163
00:07:05,360 --> 00:07:10,310
one-way function so it turns out that we

164
00:07:10,310 --> 00:07:12,290
can rule out such reductions and in

165
00:07:12,290 --> 00:07:14,360
particular you did show that one-way

166
00:07:14,360 --> 00:07:16,340
functions actually do not imply hard

167
00:07:16,340 --> 00:07:19,250
problems in NP intersect when P in such

168
00:07:19,250 --> 00:07:23,930
a blackbox way right so what do we know

169
00:07:23,930 --> 00:07:27,470
about these blackbox operations so when

170
00:07:27,470 --> 00:07:28,699
it comes to understanding the

171
00:07:28,699 --> 00:07:30,320
relationship between two complexity

172
00:07:30,320 --> 00:07:32,710
theoretic primitives we know quite a bit

173
00:07:32,710 --> 00:07:35,150
the landscape is quite well understood

174
00:07:35,150 --> 00:07:37,160
about how different primitives are

175
00:07:37,160 --> 00:07:39,460
related to each other in a blackbox way

176
00:07:39,460 --> 00:07:42,080
on the other hand when it comes to the

177
00:07:42,080 --> 00:07:44,860
complexity theoretic implications of a

178
00:07:44,860 --> 00:07:48,139
cryptographic primitives less is known

179
00:07:48,139 --> 00:07:50,060
so basically we know that when wave

180
00:07:50,060 --> 00:07:52,310
functions do not imply high problems in

181
00:07:52,310 --> 00:07:54,770
NP intersect when P and they do not

182
00:07:54,770 --> 00:07:56,570
imply average-case hard problems in a Z

183
00:07:56,570 --> 00:07:59,510
key so we would like to understand this

184
00:07:59,510 --> 00:08:01,280
better for example does public-key

185
00:08:01,280 --> 00:08:03,169
encryption imply hard problems in NP

186
00:08:03,169 --> 00:08:05,599
intercept in p how about IO

187
00:08:05,599 --> 00:08:09,860
does it imply hard problems in a ZK with

188
00:08:09,860 --> 00:08:14,150
that we come to our results so what do

189
00:08:14,150 --> 00:08:17,780
we show so at a high level this is how

190
00:08:17,780 --> 00:08:19,250
the world looks like right now there are

191
00:08:19,250 --> 00:08:20,930
some parameters which actually imply

192
00:08:20,930 --> 00:08:22,789
hard problems in NP intersect when P and

193
00:08:22,789 --> 00:08:25,250
n seek a and there are one-way functions

194
00:08:25,250 --> 00:08:28,220
which don't so we show that public key

195
00:08:28,220 --> 00:08:29,960
encryption does not imply hard problems

196
00:08:29,960 --> 00:08:33,770
in NP intersection P and a zk the same

197
00:08:33,770 --> 00:08:36,469
for OT so what we actually show is that

198
00:08:36,469 --> 00:08:37,070
IO

199
00:08:37,070 --> 00:08:39,349
along with one-way functions does not

200
00:08:39,349 --> 00:08:41,299
imply hard problems in either of these

201
00:08:41,299 --> 00:08:44,360
two classes proving separations for IO

202
00:08:44,360 --> 00:08:48,350
is great because it lets us infer the

203
00:08:48,350 --> 00:08:50,270
same for all the parameters which are

204
00:08:50,270 --> 00:08:54,940
implied by IO in a blackbox way okay and

205
00:08:54,940 --> 00:09:02,180
that list keeps going some remarks so

206
00:09:02,180 --> 00:09:04,670
first of all isn't IO very non blackbox

207
00:09:04,670 --> 00:09:07,280
I guess thanks I made for giving away

208
00:09:07,280 --> 00:09:08,000
the punchline

209
00:09:08,000 --> 00:09:11,419
it turns out that we can capture the

210
00:09:11,419 --> 00:09:14,239
most vaio does use most constructions in

211
00:09:14,239 --> 00:09:17,119
a black box non that box way it does so

212
00:09:17,119 --> 00:09:21,139
in a fairly restricted manner most

213
00:09:21,139 --> 00:09:22,939
instructions first construct some

214
00:09:22,939 --> 00:09:24,589
primitive using the one-way function in

215
00:09:24,589 --> 00:09:26,539
a black box way and then they are skated

216
00:09:26,539 --> 00:09:29,779
a show of incentive give a framework of

217
00:09:29,779 --> 00:09:31,909
or acylated circuits like circuits which

218
00:09:31,909 --> 00:09:33,649
have one-way function gates which

219
00:09:33,649 --> 00:09:36,679
captures such constructions and so we

220
00:09:36,679 --> 00:09:39,369
also work in this model and we show that

221
00:09:39,369 --> 00:09:42,499
in this model IO cannot construct hard

222
00:09:42,499 --> 00:09:46,029
problems in ACK or in winter second p

223
00:09:46,029 --> 00:09:49,219
second that's how you exist so the nice

224
00:09:49,219 --> 00:09:50,949
thing for this work is it doesn't matter

225
00:09:50,949 --> 00:09:53,419
even if I or did not exist

226
00:09:53,419 --> 00:09:55,429
we are still learned something for

227
00:09:55,429 --> 00:09:57,049
example these letters you know that

228
00:09:57,049 --> 00:09:58,939
public key encryption does not imply

229
00:09:58,939 --> 00:10:01,549
hard problems in a ZK and this holds

230
00:10:01,549 --> 00:10:03,319
regardless of whether I hire excists or

231
00:10:03,319 --> 00:10:09,349
not so a bit more formally what do we

232
00:10:09,349 --> 00:10:11,959
show so most of these constructions of

233
00:10:11,959 --> 00:10:12,769
hard

234
00:10:12,769 --> 00:10:14,839
most of these black box our patience

235
00:10:14,839 --> 00:10:18,339
construct a special oracle world where a

236
00:10:18,339 --> 00:10:21,109
one of the primitives exist but the

237
00:10:21,109 --> 00:10:23,539
complexity class is easy and this lets

238
00:10:23,539 --> 00:10:26,479
you infer that the complex primitive

239
00:10:26,479 --> 00:10:28,009
does not imply hard problems in the

240
00:10:28,009 --> 00:10:30,709
complexity class so in this case what we

241
00:10:30,709 --> 00:10:33,679
show is that there is an Oracle where

242
00:10:33,679 --> 00:10:37,309
one main functions exist io for these

243
00:10:37,309 --> 00:10:39,889
Oracle related circuits also exists and

244
00:10:39,889 --> 00:10:42,049
at the same time the complexity classes

245
00:10:42,049 --> 00:10:47,599
SDK and MP enter sequin P are easy okay

246
00:10:47,599 --> 00:10:53,119
so because of the lack of time I will

247
00:10:53,119 --> 00:10:55,129
not be talking about the whole thing so

248
00:10:55,129 --> 00:10:57,289
in this talk we would show that when way

249
00:10:57,289 --> 00:10:59,749
functions do not imply hard problems in

250
00:10:59,749 --> 00:11:02,299
SDK even worst case hard problems in SDK

251
00:11:02,299 --> 00:11:04,849
in a black box with rich and particular

252
00:11:04,849 --> 00:11:08,929
means we would show good so which in

253
00:11:08,929 --> 00:11:10,759
particular means that we would show and

254
00:11:10,759 --> 00:11:12,379
a lot of very one-way functions exist

255
00:11:12,379 --> 00:11:16,909
and yet essica is easy I would write

256
00:11:16,909 --> 00:11:20,059
eight this over okay so first let me

257
00:11:20,059 --> 00:11:21,499
tell you about statistical zero

258
00:11:21,499 --> 00:11:23,779
knowledge so when we think about the

259
00:11:23,779 --> 00:11:24,710
class of statistical

260
00:11:24,710 --> 00:11:27,350
so when we think about zero knowledge we

261
00:11:27,350 --> 00:11:28,850
think about proofs approval and a

262
00:11:28,850 --> 00:11:31,880
verifier and so on it turns out that

263
00:11:31,880 --> 00:11:33,650
statistical zero knowledge has a nice

264
00:11:33,650 --> 00:11:36,170
characterization in terms of complete

265
00:11:36,170 --> 00:11:38,870
problems so in this talk we'll be

266
00:11:38,870 --> 00:11:40,940
focusing on that characterization in

267
00:11:40,940 --> 00:11:42,770
particular the problem statistical

268
00:11:42,770 --> 00:11:44,960
difference which are shown to be

269
00:11:44,960 --> 00:11:47,770
complete for a CK by Sahai and Vardhan

270
00:11:47,770 --> 00:11:50,600
okay so the input in this problem

271
00:11:50,600 --> 00:11:52,880
consists of a pair of circuits which

272
00:11:52,880 --> 00:11:55,490
define two distributions so given a

273
00:11:55,490 --> 00:11:57,380
circuit the output distribution of the

274
00:11:57,380 --> 00:11:59,900
circuit is what we consider when the

275
00:11:59,900 --> 00:12:05,150
input is uniformly random so the problem

276
00:12:05,150 --> 00:12:07,370
is we have two distinct determine if the

277
00:12:07,370 --> 00:12:09,020
output distributions of these two

278
00:12:09,020 --> 00:12:11,180
circuits are close to each other or if

279
00:12:11,180 --> 00:12:14,060
they are far from each other so if the

280
00:12:14,060 --> 00:12:15,770
statistical distance between these two

281
00:12:15,770 --> 00:12:19,670
list circuits is distributions is small

282
00:12:19,670 --> 00:12:22,150
less than one third we have to say no

283
00:12:22,150 --> 00:12:24,620
otherwise if it's more than two-thirds

284
00:12:24,620 --> 00:12:26,360
we have to say yes note that this is a

285
00:12:26,360 --> 00:12:29,090
promise problem so in the case where

286
00:12:29,090 --> 00:12:31,940
this statistical distance is between to

287
00:12:31,940 --> 00:12:34,850
1/3 and 2/3 we don't have to say

288
00:12:34,850 --> 00:12:40,940
anything correct okay so if that is a

289
00:12:40,940 --> 00:12:43,610
language and in SDK and some X which is

290
00:12:43,610 --> 00:12:45,680
an instance it gets mapped to a pair of

291
00:12:45,680 --> 00:12:48,290
circuits if X is in the language it gets

292
00:12:48,290 --> 00:12:50,150
mapped to a pair of circuits which whose

293
00:12:50,150 --> 00:12:51,740
output distribution is far from each

294
00:12:51,740 --> 00:12:54,230
other and if X is not in the language it

295
00:12:54,230 --> 00:12:55,880
gets me up two circuits which I close to

296
00:12:55,880 --> 00:12:57,160
one another

297
00:12:57,160 --> 00:13:00,980
ok so let's see how would a hard problem

298
00:13:00,980 --> 00:13:04,090
in a CK from one way functions look like

299
00:13:04,090 --> 00:13:06,470
so the first half of it is a

300
00:13:06,470 --> 00:13:08,720
construction the construction starts

301
00:13:08,720 --> 00:13:11,180
with a one-way function and outputs a

302
00:13:11,180 --> 00:13:13,160
pair of circuits these circuits again

303
00:13:13,160 --> 00:13:15,410
make only input/output access to the one

304
00:13:15,410 --> 00:13:19,250
day functions and then the second half

305
00:13:19,250 --> 00:13:21,640
is a security proof which says that

306
00:13:21,640 --> 00:13:24,830
given any adversary which breaks a CK in

307
00:13:24,830 --> 00:13:26,660
particular I tells I these two circuits

308
00:13:26,660 --> 00:13:28,970
close to each other or far can be used

309
00:13:28,970 --> 00:13:32,840
to invert the one-way function so how do

310
00:13:32,840 --> 00:13:34,700
we rule this out there is a very

311
00:13:34,700 --> 00:13:36,470
canonical recipe given by impact layers

312
00:13:36,470 --> 00:13:38,110
and loaded which says

313
00:13:38,110 --> 00:13:40,180
first you construct a Oracle for the

314
00:13:40,180 --> 00:13:42,550
one-way function construct an adversary

315
00:13:42,550 --> 00:13:46,000
to break SDK and finally prove that even

316
00:13:46,000 --> 00:13:48,310
given this adversary that breaks a ZK

317
00:13:48,310 --> 00:13:50,370
you cannot invert the one-way function

318
00:13:50,370 --> 00:13:54,430
great so just to repeat we have to do

319
00:13:54,430 --> 00:13:55,060
three things

320
00:13:55,060 --> 00:13:57,220
design a linear function design an

321
00:13:57,220 --> 00:13:59,110
adversary to break a CK and show that

322
00:13:59,110 --> 00:14:00,940
the one-way function is secure even

323
00:14:00,940 --> 00:14:04,089
given this adversary so the first half

324
00:14:04,089 --> 00:14:06,430
designing of a my function is pretty

325
00:14:06,430 --> 00:14:07,600
standard we will pick a random

326
00:14:07,600 --> 00:14:10,750
permutation it's a great one a function

327
00:14:10,750 --> 00:14:14,589
on its own the second half which is we

328
00:14:14,589 --> 00:14:16,660
have to design an adversary to break SDK

329
00:14:16,660 --> 00:14:21,070
so just recall what the bowl is we are

330
00:14:21,070 --> 00:14:23,110
given two circuits we have to determine

331
00:14:23,110 --> 00:14:25,810
if the statistical distance is small on

332
00:14:25,810 --> 00:14:31,630
high so the Oracle the right so here's

333
00:14:31,630 --> 00:14:34,029
the first candidate what it does is it

334
00:14:34,029 --> 00:14:36,339
first compute the sophistical distance

335
00:14:36,339 --> 00:14:39,070
between the two given two circuits and

336
00:14:39,070 --> 00:14:40,750
put it first computes the statistical

337
00:14:40,750 --> 00:14:43,089
distance between them note that this is

338
00:14:43,089 --> 00:14:44,500
not really efficient it could make

339
00:14:44,500 --> 00:14:46,060
exponentially many queries to the one

340
00:14:46,060 --> 00:14:48,699
wave function but that's okay then if

341
00:14:48,699 --> 00:14:50,470
the statistical distance is less than

342
00:14:50,470 --> 00:14:52,959
half it says no if it's more than half

343
00:14:52,959 --> 00:14:56,649
it says yes so what's good about this so

344
00:14:56,649 --> 00:14:58,269
what's cool is that it actually works as

345
00:14:58,269 --> 00:15:00,269
a gate so at least we are halfway there

346
00:15:00,269 --> 00:15:03,550
unfortunately it turns out that this is

347
00:15:03,550 --> 00:15:06,399
too powerful it actually breaks all of

348
00:15:06,399 --> 00:15:10,000
NP and so it doesn't really help so we

349
00:15:10,000 --> 00:15:12,940
cannot really show that the F is one way

350
00:15:12,940 --> 00:15:15,699
even given this Oracle so just to give

351
00:15:15,699 --> 00:15:17,740
you some intuition about why it breaks

352
00:15:17,740 --> 00:15:21,940
and P so on any input X here's the

353
00:15:21,940 --> 00:15:23,649
construction one of the circuits is

354
00:15:23,649 --> 00:15:27,220
simply the verifier it takes as input a

355
00:15:27,220 --> 00:15:29,140
witness run the verify and sees if it

356
00:15:29,140 --> 00:15:31,589
accepts or not the other input is a

357
00:15:31,589 --> 00:15:35,949
identically 0 circuit so now if X was

358
00:15:35,949 --> 00:15:39,220
not in the language these two circuits

359
00:15:39,220 --> 00:15:42,070
are identical on the other hand if X was

360
00:15:42,070 --> 00:15:45,550
in the language best statistical

361
00:15:45,550 --> 00:15:48,420
distance is more than 0 we can actually

362
00:15:48,420 --> 00:15:51,430
so we can actually detect this using

363
00:15:51,430 --> 00:15:52,450
pairing

364
00:15:52,450 --> 00:15:54,580
come close to half and half and then

365
00:15:54,580 --> 00:15:57,820
it's possible to detect it okay so we

366
00:15:57,820 --> 00:16:00,100
need an Oracle which is somewhat less

367
00:16:00,100 --> 00:16:04,360
powerful than this one okay so the issue

368
00:16:04,360 --> 00:16:06,250
with this or Apple is that it is very

369
00:16:06,250 --> 00:16:08,890
sensitive to small changes especially

370
00:16:08,890 --> 00:16:13,480
around half so our fixes that we would

371
00:16:13,480 --> 00:16:18,960
add noise how do we do it so the new

372
00:16:18,960 --> 00:16:21,340
adversary to break SDK again first

373
00:16:21,340 --> 00:16:23,020
computes the statistical distance

374
00:16:23,020 --> 00:16:25,630
between the two seconds then it picks a

375
00:16:25,630 --> 00:16:30,150
random threshold between 1000 to 12 and

376
00:16:30,150 --> 00:16:32,950
if it's less than the threshold it says

377
00:16:32,950 --> 00:16:36,040
no if the statistical distance is more

378
00:16:36,040 --> 00:16:39,490
than the threshold it says yes so what's

379
00:16:39,490 --> 00:16:41,710
good about this is that it still breaks

380
00:16:41,710 --> 00:16:44,230
a CK because to break a CK all we need

381
00:16:44,230 --> 00:16:46,030
to do is to be correct if it's less than

382
00:16:46,030 --> 00:16:48,580
one third and more than two-thirds in

383
00:16:48,580 --> 00:16:51,160
between we don't really care the

384
00:16:51,160 --> 00:16:53,230
challenge here is that it is also still

385
00:16:53,230 --> 00:16:55,120
making exponentially many queries to F

386
00:16:55,120 --> 00:16:57,670
and so we still have to show that it's

387
00:16:57,670 --> 00:16:59,500
not powerful enough to actually break

388
00:16:59,500 --> 00:17:05,710
the one wave function good right so this

389
00:17:05,710 --> 00:17:07,720
is a goal we have to show that f is one

390
00:17:07,720 --> 00:17:10,420
way even given this bigger Oracle right

391
00:17:10,420 --> 00:17:13,060
so the earlier bug has now been

392
00:17:13,060 --> 00:17:15,010
transformed into a feature that this new

393
00:17:15,010 --> 00:17:17,500
Oracle is actually insensitive to random

394
00:17:17,500 --> 00:17:19,960
local changes and it turns out that for

395
00:17:19,960 --> 00:17:22,180
one-way functions random local changes

396
00:17:22,180 --> 00:17:24,250
are sufficient to change the hunts and

397
00:17:24,250 --> 00:17:26,740
adversity has to give so to illustrate

398
00:17:26,740 --> 00:17:28,630
consider the following that there is a

399
00:17:28,630 --> 00:17:30,490
one-way permutation and the challenge is

400
00:17:30,490 --> 00:17:33,250
this red box so the adversity has to

401
00:17:33,250 --> 00:17:34,960
return the position of the red box to

402
00:17:34,960 --> 00:17:38,110
succeed now we can do a random change

403
00:17:38,110 --> 00:17:40,360
which is pick a random place and swap

404
00:17:40,360 --> 00:17:41,580
these two

405
00:17:41,580 --> 00:17:44,650
now the answered adversary has to give

406
00:17:44,650 --> 00:17:46,210
has changed completely

407
00:17:46,210 --> 00:17:49,930
and yet we can show that every queried

408
00:17:49,930 --> 00:17:52,960
adversary makes to these every query the

409
00:17:52,960 --> 00:17:56,860
adversary makes to the adversary a to

410
00:17:56,860 --> 00:17:57,940
the breaker Oracle

411
00:17:57,940 --> 00:18:00,610
it would receive the same answer with

412
00:18:00,610 --> 00:18:03,400
very high probability and this lets us

413
00:18:03,400 --> 00:18:05,470
show that the adversary cannot in

414
00:18:05,470 --> 00:18:07,750
the one wavefunction even given access

415
00:18:07,750 --> 00:18:09,639
to this as a kill record so this was a

416
00:18:09,639 --> 00:18:11,679
really quick and dirty look at the paper

417
00:18:11,679 --> 00:18:15,190
for more details okay so with this let

418
00:18:15,190 --> 00:18:17,169
me conclude so first of all be sure that

419
00:18:17,169 --> 00:18:21,639
IO does not imply hard problems in ZK or

420
00:18:21,639 --> 00:18:25,200
MP intercept when P in a black box way

421
00:18:25,200 --> 00:18:28,120
okay so the concept of IO has garnered a

422
00:18:28,120 --> 00:18:30,159
lot of attention over the last couple of

423
00:18:30,159 --> 00:18:33,429
years it's extremely powerful and its

424
00:18:33,429 --> 00:18:35,259
existence still remains somewhat

425
00:18:35,259 --> 00:18:38,080
questionable this work interestingly

426
00:18:38,080 --> 00:18:42,480
does not rely on the existence of IO a

427
00:18:42,480 --> 00:18:44,740
few years ago we would have written a

428
00:18:44,740 --> 00:18:46,539
couple of papers showing each of these

429
00:18:46,539 --> 00:18:50,379
days and separately but due to IO we can

430
00:18:50,379 --> 00:18:53,470
show all of them in one chart and

431
00:18:53,470 --> 00:18:57,190
secondly so this one supports a

432
00:18:57,190 --> 00:18:58,960
theoretical possibility that we can

433
00:18:58,960 --> 00:19:00,610
construct public key encryption from

434
00:19:00,610 --> 00:19:04,179
very unstructured assumption yet the

435
00:19:04,179 --> 00:19:05,889
reality remains quite different

436
00:19:05,889 --> 00:19:07,929
most of our constructions of public

437
00:19:07,929 --> 00:19:09,490
encryption schemes are based on very

438
00:19:09,490 --> 00:19:12,220
structural assumptions there has been

439
00:19:12,220 --> 00:19:14,350
some work which has tried to diversify

440
00:19:14,350 --> 00:19:16,029
the assumptions behind public key

441
00:19:16,029 --> 00:19:18,610
encryption yet I success has been quite

442
00:19:18,610 --> 00:19:21,100
limited bridging this gap of

443
00:19:21,100 --> 00:19:23,049
constructing public encryption from

444
00:19:23,049 --> 00:19:25,779
unstructured assumptions remains a major

445
00:19:25,779 --> 00:19:28,720
open question even to be okay with that

446
00:19:28,720 --> 00:19:29,730
thank you

447
00:19:29,730 --> 00:19:34,749
[Applause]

