1
00:00:04,900 --> 00:00:07,779
yes my name is Michael Nelson and you

2
00:00:07,779 --> 00:00:09,420
already got the title so I guess just

3
00:00:09,420 --> 00:00:10,840
get going

4
00:00:10,840 --> 00:00:14,410
so on this talk and the or this protocol

5
00:00:14,410 --> 00:00:16,619
is called the tiny table protocol

6
00:00:16,619 --> 00:00:19,660
because it has something to do with tiny

7
00:00:19,660 --> 00:00:22,600
tables I guess and it's a new protocol

8
00:00:22,600 --> 00:00:26,890
for two PC and it's well my opinion is

9
00:00:26,890 --> 00:00:28,890
that once you see it is like obviously

10
00:00:28,890 --> 00:00:31,810
simple but I guess you'll see and

11
00:00:31,810 --> 00:00:34,660
decipher yourself so this short overview

12
00:00:34,660 --> 00:00:36,850
of what I'm gonna talk about and just

13
00:00:36,850 --> 00:00:38,200
how this talk is gonna be I'm gonna

14
00:00:38,200 --> 00:00:40,420
start by motivating warming up

15
00:00:40,420 --> 00:00:43,210
Sushil then I'm gonna jump straight to

16
00:00:43,210 --> 00:00:45,360
the protocol present the protocol

17
00:00:45,360 --> 00:00:47,800
present the pre-processing material

18
00:00:47,800 --> 00:00:50,559
which I'll come back to what is some

19
00:00:50,559 --> 00:00:52,390
property is an extension of the protocol

20
00:00:52,390 --> 00:00:55,120
and finally a benchmark like how does it

21
00:00:55,120 --> 00:00:56,700
perform in real life

22
00:00:56,700 --> 00:00:59,920
alright so two-party computation this is

23
00:00:59,920 --> 00:01:03,550
the session we are talking about this is

24
00:01:03,550 --> 00:01:05,800
our basic setting our setting is special

25
00:01:05,800 --> 00:01:07,330
here because we only consider boolean

26
00:01:07,330 --> 00:01:10,119
circuits but Alice and Bob each have an

27
00:01:10,119 --> 00:01:12,700
input X and why they want to evaluate

28
00:01:12,700 --> 00:01:15,550
some circuit C on their input such that

29
00:01:15,550 --> 00:01:17,550
the only thing that they learn is the

30
00:01:17,550 --> 00:01:19,509
evaluation of the circuit of their

31
00:01:19,509 --> 00:01:24,160
inputs so this is this is good we we

32
00:01:24,160 --> 00:01:27,940
really really like this box but we have

33
00:01:27,940 --> 00:01:30,250
to settle with a real life protocol

34
00:01:30,250 --> 00:01:34,420
instead the problem with many protocols

35
00:01:34,420 --> 00:01:36,340
or existing protocols are that they are

36
00:01:36,340 --> 00:01:40,119
too slow so to the rescue we have the

37
00:01:40,119 --> 00:01:43,810
pre processing model and a beloved child

38
00:01:43,810 --> 00:01:45,880
has many names it's also known as

39
00:01:45,880 --> 00:01:48,789
correlated randomness something else

40
00:01:48,789 --> 00:01:50,950
but the main idea is that just as before

41
00:01:50,950 --> 00:01:53,860
the parties run some slow offline

42
00:01:53,860 --> 00:01:56,200
pre-processing protocol where we push

43
00:01:56,200 --> 00:01:59,470
all the public key primitives and then

44
00:01:59,470 --> 00:02:02,289
later on we can do a super super fast

45
00:02:02,289 --> 00:02:05,440
online computation by using this

46
00:02:05,440 --> 00:02:08,580
pre-processing material D and D prime

47
00:02:08,580 --> 00:02:12,040
all right so this is our setting and and

48
00:02:12,040 --> 00:02:15,069
of course the tiny tail protocol is the

49
00:02:15,069 --> 00:02:17,590
online and I will return to how we

50
00:02:17,590 --> 00:02:20,889
generate the pre-processing material so

51
00:02:20,889 --> 00:02:22,900
just to sum up being a bit more formal

52
00:02:22,900 --> 00:02:24,969
about the setting to party computation

53
00:02:24,969 --> 00:02:27,400
in a pre-processing model malicious

54
00:02:27,400 --> 00:02:29,859
security static corruption and with this

55
00:02:29,859 --> 00:02:31,989
on its majority so one party can be

56
00:02:31,989 --> 00:02:33,209
corrupt

57
00:02:33,209 --> 00:02:37,000
alright so to get started with the

58
00:02:37,000 --> 00:02:40,150
protocol let's do a simple warm-up with

59
00:02:40,150 --> 00:02:43,150
computing a NAND gate which is due to

60
00:02:43,150 --> 00:02:46,359
each i/o doll from 13 and this is what a

61
00:02:46,359 --> 00:02:50,370
NAND gate looks like the pre-processing

62
00:02:50,370 --> 00:02:52,239
functionality now I'm just talking

63
00:02:52,239 --> 00:02:54,189
functionality is gonna do something very

64
00:02:54,189 --> 00:02:56,669
simple it's gonna sample two random bits

65
00:02:56,669 --> 00:03:00,129
then it's gonna scramble a NAND gate and

66
00:03:00,129 --> 00:03:02,590
by this I mean we simply take an and

67
00:03:02,590 --> 00:03:05,260
gate and then depending on the two masks

68
00:03:05,260 --> 00:03:07,540
we flip the and gate like horizontally

69
00:03:07,540 --> 00:03:12,310
vertically here horizontally then we

70
00:03:12,310 --> 00:03:15,639
secret share this table by a usual

71
00:03:15,639 --> 00:03:17,260
additive secret sharing scheme so we

72
00:03:17,260 --> 00:03:19,479
just take our table we just scrambled

73
00:03:19,479 --> 00:03:22,269
and then we secret share it by choosing

74
00:03:22,269 --> 00:03:24,519
a random sharing and making sure this

75
00:03:24,519 --> 00:03:27,280
invariant holds and finally we send one

76
00:03:27,280 --> 00:03:31,209
mask to Alice and the table a12 and the

77
00:03:31,209 --> 00:03:34,629
mask RB to Bob with the table B now to

78
00:03:34,629 --> 00:03:36,280
compute the and gate in the online

79
00:03:36,280 --> 00:03:39,310
protocol Alice and Bob now have real

80
00:03:39,310 --> 00:03:42,849
inputs x and y first they encrypt their

81
00:03:42,849 --> 00:03:45,669
input using this mask as a one-time pad

82
00:03:45,669 --> 00:03:48,909
so they simply I use the notation ei for

83
00:03:48,909 --> 00:03:52,030
the encryption of a then they share the

84
00:03:52,030 --> 00:03:54,479
one-time pad encryptions of their inputs

85
00:03:54,479 --> 00:03:57,250
then they simply look up in their table

86
00:03:57,250 --> 00:04:01,540
a and B and send the corresponding share

87
00:04:01,540 --> 00:04:04,449
in this index of the table and finally

88
00:04:04,449 --> 00:04:08,769
they reconstruct it so a very simple way

89
00:04:08,769 --> 00:04:11,530
to compute a NAND gate by making these

90
00:04:11,530 --> 00:04:14,109
correlated tables if you want and of

91
00:04:14,109 --> 00:04:15,519
course the tables and the mask is the

92
00:04:15,519 --> 00:04:18,789
pre-processing material here so now we

93
00:04:18,789 --> 00:04:20,469
are ready for the tiny table protocol

94
00:04:20,469 --> 00:04:21,430
that's good

95
00:04:21,430 --> 00:04:24,219
so the offline phase in the tiny table

96
00:04:24,219 --> 00:04:27,080
protocol is a bit similar

97
00:04:27,080 --> 00:04:29,210
I'll say we have a circuit see with n

98
00:04:29,210 --> 00:04:33,020
gates and my errs and now for each wire

99
00:04:33,020 --> 00:04:37,009
instead we select a random mask and we

100
00:04:37,009 --> 00:04:39,169
will compute with ei which is the

101
00:04:39,169 --> 00:04:44,389
encryption of the real bit di for each

102
00:04:44,389 --> 00:04:47,479
gate we do this table trick just as

103
00:04:47,479 --> 00:04:49,849
before so we secret share a table but

104
00:04:49,849 --> 00:04:53,120
but notice here that there are W is such

105
00:04:53,120 --> 00:04:55,190
that we also encrypt the output of the

106
00:04:55,190 --> 00:04:57,740
gate under the corresponding next mask

107
00:04:57,740 --> 00:05:01,580
on the output on the mask that we

108
00:05:01,580 --> 00:05:03,110
assigned to the output Y of this gate

109
00:05:03,110 --> 00:05:06,020
and then of course we send this to the

110
00:05:06,020 --> 00:05:07,880
players we send the corresponding input

111
00:05:07,880 --> 00:05:09,620
masks if they are gonna for which wires

112
00:05:09,620 --> 00:05:11,870
they're going to input and output masks

113
00:05:11,870 --> 00:05:13,729
in this case we just assume both parties

114
00:05:13,729 --> 00:05:16,009
are gonna learn the output and finally

115
00:05:16,009 --> 00:05:19,849
the tables just as before so for the

116
00:05:19,849 --> 00:05:23,419
online protocol I I bet this is maybe

117
00:05:23,419 --> 00:05:26,090
the simplest online protocol you have

118
00:05:26,090 --> 00:05:28,460
ever seen for two party computation for

119
00:05:28,460 --> 00:05:30,620
the inputs we send the one-time pad

120
00:05:30,620 --> 00:05:32,780
encryptions of the inputs just as before

121
00:05:32,780 --> 00:05:36,380
for each gate as an invariant we know

122
00:05:36,380 --> 00:05:39,349
the encryptions of the input wires we

123
00:05:39,349 --> 00:05:42,199
simply look up in the tables exchange

124
00:05:42,199 --> 00:05:45,169
the shares and reconstruct the encrypted

125
00:05:45,169 --> 00:05:49,099
output and finally for the output we

126
00:05:49,099 --> 00:05:51,680
just used the output mask for the

127
00:05:51,680 --> 00:05:54,080
circuit to sorry to decrypt the output

128
00:05:54,080 --> 00:05:57,590
and both parties knows this mask so a

129
00:05:57,590 --> 00:05:59,479
very simple two party computation

130
00:05:59,479 --> 00:06:02,889
protocol in basically three lines or so

131
00:06:02,889 --> 00:06:07,490
all right so of course this protocol is

132
00:06:07,490 --> 00:06:11,090
not actively secure so the parties can

133
00:06:11,090 --> 00:06:12,770
cheat somewhere with the bits that they

134
00:06:12,770 --> 00:06:17,330
have and recall that there is a mask fit

135
00:06:17,330 --> 00:06:19,699
for each wire there is the tables for

136
00:06:19,699 --> 00:06:22,729
each gate and also note that that if

137
00:06:22,729 --> 00:06:25,219
they wanna cheat somewhere they cannot

138
00:06:25,219 --> 00:06:26,840
really see that the input because that

139
00:06:26,840 --> 00:06:28,729
just constitute to choosing another

140
00:06:28,729 --> 00:06:31,069
input and of course in the output well

141
00:06:31,069 --> 00:06:33,710
they just return an hour I know their

142
00:06:33,710 --> 00:06:36,259
output for themselves so the the place

143
00:06:36,259 --> 00:06:38,360
that people can cheat is by sending the

144
00:06:38,360 --> 00:06:40,160
wrong table values when

145
00:06:40,160 --> 00:06:43,790
look up in the tables so we fix this

146
00:06:43,790 --> 00:06:45,370
simply by making the pre-processing

147
00:06:45,370 --> 00:06:47,660
functionality commit the players to each

148
00:06:47,660 --> 00:06:51,020
of the bits in these tables a simple way

149
00:06:51,020 --> 00:06:54,980
is that for each table entry one party

150
00:06:54,980 --> 00:06:56,810
now holds two random bit strings and the

151
00:06:56,810 --> 00:06:59,360
other one holds the one in the position

152
00:06:59,360 --> 00:07:05,420
for his corresponding share so when

153
00:07:05,420 --> 00:07:07,580
computing the nae way would be that

154
00:07:07,580 --> 00:07:09,680
after every single gate we also send a

155
00:07:09,680 --> 00:07:11,690
Mac for their share so the sender bit

156
00:07:11,690 --> 00:07:15,020
and a Mac but we can easily extend this

157
00:07:15,020 --> 00:07:16,990
and make it more efficient in by

158
00:07:16,990 --> 00:07:19,520
accumulating the Mac simply ignoring the

159
00:07:19,520 --> 00:07:20,630
random bit strings

160
00:07:20,630 --> 00:07:22,640
whenever you accumulate an end or a

161
00:07:22,640 --> 00:07:25,040
computer an ante and then finally just

162
00:07:25,040 --> 00:07:27,170
before the output phase you send this

163
00:07:27,170 --> 00:07:35,300
big accumulated Mac alright so some very

164
00:07:35,300 --> 00:07:37,850
short notation on secret sharing and

165
00:07:37,850 --> 00:07:39,440
Mac's if you're not familiar with it

166
00:07:39,440 --> 00:07:39,980
already

167
00:07:39,980 --> 00:07:42,080
now I'm God I'm warming up for the

168
00:07:42,080 --> 00:07:43,820
pre-processing functionality that is

169
00:07:43,820 --> 00:07:45,980
going to generate these tables now for

170
00:07:45,980 --> 00:07:48,920
now it's just a magic functionality so

171
00:07:48,920 --> 00:07:51,170
we say that the parties Alice and Bob

172
00:07:51,170 --> 00:07:54,920
each hold global key and we say that a

173
00:07:54,920 --> 00:07:57,830
secret sharing of X is such that XA plus

174
00:07:57,830 --> 00:08:00,380
xB which is held by each party forms a

175
00:08:00,380 --> 00:08:03,169
secret sharing of of X and that these

176
00:08:03,169 --> 00:08:05,540
Vedas and the Y's is simply a Mac a

177
00:08:05,540 --> 00:08:09,140
linear Mac now we have the terms a

178
00:08:09,140 --> 00:08:11,150
random sharing which is basically just

179
00:08:11,150 --> 00:08:12,950
an a secret sharing of a random value

180
00:08:12,950 --> 00:08:16,130
and the multiplication tables which is 3

181
00:08:16,130 --> 00:08:19,190
sharings but such that this relation

182
00:08:19,190 --> 00:08:22,760
holds that a B equals C and note that

183
00:08:22,760 --> 00:08:25,669
with this with these secret sharing and

184
00:08:25,669 --> 00:08:28,450
with this notation players can locally

185
00:08:28,450 --> 00:08:32,090
add secret shared values and they can

186
00:08:32,090 --> 00:08:34,039
use one of these multiplications rebels

187
00:08:34,039 --> 00:08:36,919
by Bieber standard trick to to compute a

188
00:08:36,919 --> 00:08:39,229
multiplication by series here of secret

189
00:08:39,229 --> 00:08:44,210
service all right so to generate the

190
00:08:44,210 --> 00:08:47,030
pre-processing material this is again in

191
00:08:47,030 --> 00:08:49,190
the pre-processing phase or whatever you

192
00:08:49,190 --> 00:08:50,510
want to call it so we

193
00:08:50,510 --> 00:08:52,610
attach ourself on the tiny ot protocol

194
00:08:52,610 --> 00:08:55,250
which exactly spits out these random

195
00:08:55,250 --> 00:08:57,440
sharings and multiplication tables which

196
00:08:57,440 --> 00:08:58,640
we're going to use to generate the

197
00:08:58,640 --> 00:09:01,820
tables and the core idea here is of

198
00:09:01,820 --> 00:09:04,160
course to use a random sharing for each

199
00:09:04,160 --> 00:09:06,800
wire and then a multiplication table for

200
00:09:06,800 --> 00:09:08,630
each gate the Scrambler gate that we are

201
00:09:08,630 --> 00:09:11,900
going to compute so for each random

202
00:09:11,900 --> 00:09:14,660
wires this is a protocol to generate the

203
00:09:14,660 --> 00:09:17,270
pre-processing material for each wire

204
00:09:17,270 --> 00:09:20,570
they now assign a random sharing for

205
00:09:20,570 --> 00:09:25,340
each gate which now have three sharings

206
00:09:25,340 --> 00:09:27,470
which corresponds to the the masking

207
00:09:27,470 --> 00:09:30,350
bits we we compute the table by first

208
00:09:30,350 --> 00:09:33,350
multiplying by using a triple the two

209
00:09:33,350 --> 00:09:36,710
input masks and finally we can by by

210
00:09:36,710 --> 00:09:38,960
knowing constant C and D there is like

211
00:09:38,960 --> 00:09:41,300
four entries we can simply compute the

212
00:09:41,300 --> 00:09:47,140
table locally also here the max are

213
00:09:47,140 --> 00:09:49,520
dependent they are using this linear max

214
00:09:49,520 --> 00:09:51,620
scheme so we just use a random Oracle to

215
00:09:51,620 --> 00:09:53,930
get two random bit strings if we want to

216
00:09:53,930 --> 00:09:57,260
use this max scheme I showed you just

217
00:09:57,260 --> 00:10:01,070
before and now for each input wire we

218
00:10:01,070 --> 00:10:03,680
open the wire to the guy who owns these

219
00:10:03,680 --> 00:10:05,120
wires who is kind of input on the wires

220
00:10:05,120 --> 00:10:07,580
and for each output wires we just open

221
00:10:07,580 --> 00:10:12,500
all the the masks so now we have exactly

222
00:10:12,500 --> 00:10:16,030
our pre-processing material that we want

223
00:10:16,030 --> 00:10:19,580
alright so a very simple protocols just

224
00:10:19,580 --> 00:10:22,340
to talk a bit about some properties this

225
00:10:22,340 --> 00:10:24,620
protocol has of course we have 3x or

226
00:10:24,620 --> 00:10:27,050
like every two party computation

227
00:10:27,050 --> 00:10:29,870
protocol or modern one and the idea here

228
00:10:29,870 --> 00:10:33,020
is simply we make the output mask which

229
00:10:33,020 --> 00:10:34,730
is going to encrypt the output of an XOR

230
00:10:34,730 --> 00:10:36,980
gate simply be the XOR of the two input

231
00:10:36,980 --> 00:10:39,230
masks and then in the online face they

232
00:10:39,230 --> 00:10:41,840
can simply just locally XOR the two

233
00:10:41,840 --> 00:10:43,940
encryptions together to obtain the

234
00:10:43,940 --> 00:10:46,700
output not gates we simply negate the

235
00:10:46,700 --> 00:10:49,520
mask and then we just remove the not

236
00:10:49,520 --> 00:10:52,670
gate from the circuit also we can

237
00:10:52,670 --> 00:10:54,500
generate large tables instead of just

238
00:10:54,500 --> 00:10:56,510
boolean fan and two tables we can

239
00:10:56,510 --> 00:10:59,210
generate say the AES sbox which has

240
00:10:59,210 --> 00:11:02,510
eight bits as input and it follows

241
00:11:02,510 --> 00:11:03,960
exactly the same pattern

242
00:11:03,960 --> 00:11:07,440
we regenerate a truth table with this

243
00:11:07,440 --> 00:11:09,990
input mask we encrypt it with the output

244
00:11:09,990 --> 00:11:14,910
mask and then we secret share to amb we

245
00:11:14,910 --> 00:11:16,710
can also use smaller max instead of

246
00:11:16,710 --> 00:11:19,440
these long bit strings then we can of

247
00:11:19,440 --> 00:11:21,480
course use the linear max scheme which

248
00:11:21,480 --> 00:11:23,670
is used for the pre-processing phase so

249
00:11:23,670 --> 00:11:25,350
that we obtain for example for the S

250
00:11:25,350 --> 00:11:29,070
boxes we don't need 256 random bit

251
00:11:29,070 --> 00:11:32,430
strings for each of the 256 entries in

252
00:11:32,430 --> 00:11:38,070
the tiny tables and finally we obtain I

253
00:11:38,070 --> 00:11:41,310
think the best complexity for a

254
00:11:41,310 --> 00:11:43,440
two-party computation protocol namely by

255
00:11:43,440 --> 00:11:45,990
constructing a special version of the

256
00:11:45,990 --> 00:11:48,360
tiny shield protocol using some coding

257
00:11:48,360 --> 00:11:51,510
schemes on top so one way to say if we

258
00:11:51,510 --> 00:11:53,100
just flatten out all the tables during

259
00:11:53,100 --> 00:11:54,630
the computation it's basically just a

260
00:11:54,630 --> 00:11:56,610
long bit string where we want to open

261
00:11:56,610 --> 00:11:59,310
some of the wires and and by using this

262
00:11:59,310 --> 00:12:02,390
view we can get the complexity down to

263
00:12:02,390 --> 00:12:10,709
to this K epsilon s all right so I want

264
00:12:10,709 --> 00:12:12,200
to talk a bit about a benchmark because

265
00:12:12,200 --> 00:12:15,959
this protocol is is fast as I promised

266
00:12:15,959 --> 00:12:17,940
you so we are benchmarking two versions

267
00:12:17,940 --> 00:12:19,320
one is binary

268
00:12:19,320 --> 00:12:22,080
AES which consists of a boolean circuit

269
00:12:22,080 --> 00:12:24,540
from Bristol University or University of

270
00:12:24,540 --> 00:12:29,310
Bristol which is the ax is expanded and

271
00:12:29,310 --> 00:12:34,020
this circuit has 41 layers another one

272
00:12:34,020 --> 00:12:36,690
and animal another more interesting view

273
00:12:36,690 --> 00:12:39,870
is yeah we also have the free X or no

274
00:12:39,870 --> 00:12:43,230
not here a more interesting version is

275
00:12:43,230 --> 00:12:47,670
what we call the optimized AES so

276
00:12:47,670 --> 00:12:50,459
basically in into PC AES is kind of the

277
00:12:50,459 --> 00:12:52,020
benchmark that you want to show you can

278
00:12:52,020 --> 00:12:55,350
do fast and that is really lucky for us

279
00:12:55,350 --> 00:12:59,160
because it's because of the structure so

280
00:12:59,160 --> 00:13:01,770
AES is basically something like this at

281
00:13:01,770 --> 00:13:04,380
around key some rounds and then some

282
00:13:04,380 --> 00:13:08,160
other subroutines but if we look at

283
00:13:08,160 --> 00:13:11,430
these subroutines we notice that all the

284
00:13:11,430 --> 00:13:13,140
green subroutines here they are linear

285
00:13:13,140 --> 00:13:15,570
and of course we want to take advantage

286
00:13:15,570 --> 00:13:16,610
of that

287
00:13:16,610 --> 00:13:21,410
so to make an optimized aes-128 version

288
00:13:21,410 --> 00:13:23,839
using the timetable protocol we can

289
00:13:23,839 --> 00:13:25,790
simply compute all the linear operations

290
00:13:25,790 --> 00:13:28,699
using AES and I so it's like we don't

291
00:13:28,699 --> 00:13:30,259
have to do any boolean circuits we

292
00:13:30,259 --> 00:13:32,540
simply just use like for operations

293
00:13:32,540 --> 00:13:36,290
directly on the CPU and for each in the

294
00:13:36,290 --> 00:13:39,410
sub byte which contains is it sixteen

295
00:13:39,410 --> 00:13:42,589
lookups we simply exchange each of the

296
00:13:42,589 --> 00:13:45,619
sbox lookups with a tiny tip a secret

297
00:13:45,619 --> 00:13:49,910
sharing instead and then of course we

298
00:13:49,910 --> 00:13:51,679
add max and we have two checks to make

299
00:13:51,679 --> 00:13:56,600
it actually secure all right so a binary

300
00:13:56,600 --> 00:14:00,850
AES version and an optimized version

301
00:14:00,850 --> 00:14:03,049
here is some numbers on what the

302
00:14:03,049 --> 00:14:05,360
pre-process data looks like in in real

303
00:14:05,360 --> 00:14:07,699
life for the optimized and the binary

304
00:14:07,699 --> 00:14:10,339
and of course it's a bit higher for the

305
00:14:10,339 --> 00:14:13,220
optimized especially so by this of

306
00:14:13,220 --> 00:14:15,410
course passive should make sense the

307
00:14:15,410 --> 00:14:17,209
linear is the linear max scheme and the

308
00:14:17,209 --> 00:14:19,730
lookup here is it's just these random

309
00:14:19,730 --> 00:14:21,860
bit string so I talked about before the

310
00:14:21,860 --> 00:14:23,989
max scheme used with different security

311
00:14:23,989 --> 00:14:28,160
parameters 32 and 64 bits and of course

312
00:14:28,160 --> 00:14:33,139
the linear is smaller in size and and of

313
00:14:33,139 --> 00:14:35,239
course the optimized version takes more

314
00:14:35,239 --> 00:14:37,610
space than the binary version because we

315
00:14:37,610 --> 00:14:40,730
have these large tables and here are

316
00:14:40,730 --> 00:14:43,669
some timings where the land setting is

317
00:14:43,669 --> 00:14:45,529
simply two computers in our department

318
00:14:45,529 --> 00:14:49,069
and the cloud is is using the large

319
00:14:49,069 --> 00:14:53,419
computation machines on Amazon and I

320
00:14:53,419 --> 00:14:56,239
think worth noticing here is that we are

321
00:14:56,239 --> 00:14:58,749
now in the microsecond range which is

322
00:14:58,749 --> 00:15:03,199
down to like I think this constitute to

323
00:15:03,199 --> 00:15:07,279
doing AES around to make a Hertz which

324
00:15:07,279 --> 00:15:11,089
is some somehow comparable to you know

325
00:15:11,089 --> 00:15:13,360
one computer doing it locally with no

326
00:15:13,360 --> 00:15:20,059
computation alright so this was the

327
00:15:20,059 --> 00:15:24,169
basic protocol we we simply have a mask

328
00:15:24,169 --> 00:15:27,619
we simply compute on these one-time pad

329
00:15:27,619 --> 00:15:29,779
encryptions for each wire and then we

330
00:15:29,779 --> 00:15:30,600
simply have a

331
00:15:30,600 --> 00:15:32,759
scrambled table for each gate during the

332
00:15:32,759 --> 00:15:36,810
protocol so the take-home message of

333
00:15:36,810 --> 00:15:39,779
this talk is that we like correlated

334
00:15:39,779 --> 00:15:43,620
tables and for linear functionalities

335
00:15:43,620 --> 00:15:45,660
like in the AES why not just compute

336
00:15:45,660 --> 00:15:48,029
these linear functionalities directly on

337
00:15:48,029 --> 00:15:51,199
one time pad encrypted values and

338
00:15:51,199 --> 00:15:54,420
finally let's just only propose the

339
00:15:54,420 --> 00:15:56,579
nonlinear blocks just as we shown you

340
00:15:56,579 --> 00:16:00,899
before yes so um that's all I got for

341
00:16:00,899 --> 00:16:04,090
you thank you

342
00:16:04,090 --> 00:16:10,940
[Applause]

