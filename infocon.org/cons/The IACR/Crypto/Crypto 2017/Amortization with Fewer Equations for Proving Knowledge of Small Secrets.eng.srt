1
00:00:05,359 --> 00:00:09,240
so behind this did Leslie complicated

2
00:00:09,240 --> 00:00:11,459
titles it's a very simple question can

3
00:00:11,459 --> 00:00:14,099
we make simple zero knowledge for

4
00:00:14,099 --> 00:00:22,260
lattices so first some definitions what

5
00:00:22,260 --> 00:00:26,340
are integer vector one-way functions so

6
00:00:26,340 --> 00:00:28,859
an integer vector one wave function will

7
00:00:28,859 --> 00:00:31,230
be a function going from Z to some power

8
00:00:31,230 --> 00:00:35,820
r2 into an abelian group such that it is

9
00:00:35,820 --> 00:00:38,940
automatically additively homomorphic and

10
00:00:38,940 --> 00:00:42,030
it is out to inverse for small vectors

11
00:00:42,030 --> 00:00:45,510
where smooth means with non bounded by

12
00:00:45,510 --> 00:00:48,350
some constant why do we care about

13
00:00:48,350 --> 00:00:50,570
integer vector one wave functions

14
00:00:50,570 --> 00:00:54,629
because because they are used in

15
00:00:54,629 --> 00:00:56,369
basically all latches based the

16
00:00:56,369 --> 00:00:58,949
constructions such that encryption are

17
00:00:58,949 --> 00:01:01,440
functions commitments and so on and so

18
00:01:01,440 --> 00:01:02,659
forth

19
00:01:02,659 --> 00:01:06,479
now what is their own alleged world very

20
00:01:06,479 --> 00:01:09,180
simple very simple approval wants to

21
00:01:09,180 --> 00:01:11,700
convince a verifier that you know the

22
00:01:11,700 --> 00:01:15,330
preimage X for some image why we have

23
00:01:15,330 --> 00:01:18,570
the usual properties correctness states

24
00:01:18,570 --> 00:01:20,280
that the protocol should finish if

25
00:01:20,280 --> 00:01:23,460
everyone is honest zero knowledge state

26
00:01:23,460 --> 00:01:26,100
that's a no leakage of information of

27
00:01:26,100 --> 00:01:29,730
pseudo cure except for the truth of this

28
00:01:29,730 --> 00:01:35,820
statement and as on des se says that no

29
00:01:35,820 --> 00:01:37,290
cheating prover should be able to

30
00:01:37,290 --> 00:01:40,680
convince a verifier somewhat more formal

31
00:01:40,680 --> 00:01:46,790
is to say that some Ness states that any

32
00:01:46,790 --> 00:01:48,960
deterministic Coover that succeeds with

33
00:01:48,960 --> 00:01:52,979
a Prada bgp from him one can extract a

34
00:01:52,979 --> 00:01:56,220
pre-major of why in expected time one

35
00:01:56,220 --> 00:02:01,500
over P linear and one over P now let's

36
00:02:01,500 --> 00:02:04,049
give a very simple example example of

37
00:02:04,049 --> 00:02:06,630
zero knowledge so we have a proverb we

38
00:02:06,630 --> 00:02:09,869
who knows a vector X and it's email

39
00:02:09,869 --> 00:02:13,250
image Y and verify our windows only Y

40
00:02:13,250 --> 00:02:16,470
the approval we start by sampling a

41
00:02:16,470 --> 00:02:17,580
small randomness

42
00:02:17,580 --> 00:02:21,150
and computing its image a send a to the

43
00:02:21,150 --> 00:02:23,880
verifier who sends back a challenge in

44
00:02:23,880 --> 00:02:27,810
0-1 and finally the prover computes that

45
00:02:27,810 --> 00:02:30,750
which is either express our if C equals

46
00:02:30,750 --> 00:02:34,920
1 or just R if C equals 0 sends that

47
00:02:34,920 --> 00:02:38,100
back to the verifier who checks both

48
00:02:38,100 --> 00:02:41,160
that f of that equals C times y plus a

49
00:02:41,160 --> 00:02:43,650
which will be true given the OMA morphic

50
00:02:43,650 --> 00:02:46,530
properties of F if everything has been

51
00:02:46,530 --> 00:02:49,800
done correctly and that's very small so

52
00:02:49,800 --> 00:02:51,660
that's import that good enough

53
00:02:51,660 --> 00:02:55,410
well no not at all first because that's

54
00:02:55,410 --> 00:02:58,350
not zero knowledge yield that depends on

55
00:02:58,350 --> 00:03:01,470
X because clearly when C equals 1 it's

56
00:03:01,470 --> 00:03:02,910
expressed as this leaks information

57
00:03:02,910 --> 00:03:06,120
about X there is a solution for this

58
00:03:06,120 --> 00:03:09,050
which is called rejection sampling so

59
00:03:09,050 --> 00:03:11,370
essentially rejection sampling states

60
00:03:11,370 --> 00:03:14,130
that the prover will only proceed to the

61
00:03:14,130 --> 00:03:16,800
third step if that does not leak

62
00:03:16,800 --> 00:03:19,440
anything about X so there is a

63
00:03:19,440 --> 00:03:21,420
probability that the prover will restart

64
00:03:21,420 --> 00:03:24,300
the whole protocol in this talk we will

65
00:03:24,300 --> 00:03:26,750
completely ignore rejection sampling

66
00:03:26,750 --> 00:03:29,640
because it's not we can we will just

67
00:03:29,640 --> 00:03:32,489
assume that rejection sampling is

68
00:03:32,489 --> 00:03:35,070
accepted with probability 1 it's not

69
00:03:35,070 --> 00:03:36,830
very important for the rest of our talk

70
00:03:36,830 --> 00:03:39,720
now another problem is that this is not

71
00:03:39,720 --> 00:03:42,000
really sound either because the prover

72
00:03:42,000 --> 00:03:44,040
can just guess the challenge since the

73
00:03:44,040 --> 00:03:47,610
change in Z in 0 1 and if it is

74
00:03:47,610 --> 00:03:51,540
guess is right so to achieve K bits of

75
00:03:51,540 --> 00:03:54,000
some Ness this protocol will have to be

76
00:03:54,000 --> 00:03:58,080
repeated catch up K times that's not

77
00:03:58,080 --> 00:04:01,830
really good so as I have said this is

78
00:04:01,830 --> 00:04:04,709
very inefficient having to do 100 or

79
00:04:04,709 --> 00:04:07,290
more repetitions of this protocol gives

80
00:04:07,290 --> 00:04:09,450
rather large large proofs of knowledge

81
00:04:09,450 --> 00:04:13,650
and huge computations so maybe we can do

82
00:04:13,650 --> 00:04:15,480
something better if instead of trying to

83
00:04:15,480 --> 00:04:17,880
prove knowledge of one secret we try to

84
00:04:17,880 --> 00:04:20,839
prove knowledge of many secrets at once

85
00:04:20,839 --> 00:04:25,020
so now the new context is that the

86
00:04:25,020 --> 00:04:27,450
prover wants to prove knowledge of pre

87
00:04:27,450 --> 00:04:30,760
image of y1 up to Y n

88
00:04:30,760 --> 00:04:32,680
so every as we have seen we can do this

89
00:04:32,680 --> 00:04:35,650
with this simple proof in which we will

90
00:04:35,650 --> 00:04:37,990
have an over ad linear in the security

91
00:04:37,990 --> 00:04:42,250
parameter slack what we call slack is

92
00:04:42,250 --> 00:04:44,590
the difference between the size of bed

93
00:04:44,590 --> 00:04:48,430
and the size of X so since we see that

94
00:04:48,430 --> 00:04:50,950
that is expressed our that will have to

95
00:04:50,950 --> 00:04:54,520
be larger than X and the slug dictates

96
00:04:54,520 --> 00:04:57,490
the parameter of the schemes that we

97
00:04:57,490 --> 00:05:01,300
will use those vectors on so you know

98
00:05:01,300 --> 00:05:03,400
the slack is constant at least in the

99
00:05:03,400 --> 00:05:06,400
bondage of K which with which is what we

100
00:05:06,400 --> 00:05:09,430
are interested in and amortization for

101
00:05:09,430 --> 00:05:11,680
the simple proof is basically 1 since we

102
00:05:11,680 --> 00:05:16,180
only need one equation a walk by a comma

103
00:05:16,180 --> 00:05:19,900
at all at your crib this year made a

104
00:05:19,900 --> 00:05:22,350
huge progress in this direction in which

105
00:05:22,350 --> 00:05:24,490
for amortized zero-knowledge

106
00:05:24,490 --> 00:05:26,350
they achieve constants you're on the

107
00:05:26,350 --> 00:05:28,510
ledge and the constant is a small one

108
00:05:28,510 --> 00:05:31,710
and the achieve linear slack which is

109
00:05:31,710 --> 00:05:34,120
totally ok considering the size of the

110
00:05:34,120 --> 00:05:37,930
vector we use on the other end then they

111
00:05:37,930 --> 00:05:41,770
need for K squared equations to for this

112
00:05:41,770 --> 00:05:44,020
amortization to kick in which is to set

113
00:05:44,020 --> 00:05:48,550
that for K 128 bits of security we will

114
00:05:48,550 --> 00:05:51,700
need nearly 70,000 equations to be able

115
00:05:51,700 --> 00:05:55,840
to prove zero knowledge our work is to

116
00:05:55,840 --> 00:05:58,450
reduce this amortization so what we

117
00:05:58,450 --> 00:06:00,880
achieve is over add linear in some

118
00:06:00,880 --> 00:06:03,910
logarithmic in some parameter alpha but

119
00:06:03,910 --> 00:06:06,160
any of the constants are very small so

120
00:06:06,160 --> 00:06:09,100
this basically does not matter at all we

121
00:06:09,100 --> 00:06:12,070
divide the slack by log alpha which is

122
00:06:12,070 --> 00:06:14,290
in itself nice but just a side effect

123
00:06:14,290 --> 00:06:17,230
but most importantly we get amortization

124
00:06:17,230 --> 00:06:19,960
over four times K divided by log alpha

125
00:06:19,960 --> 00:06:23,470
square equations which can reduce the

126
00:06:23,470 --> 00:06:26,980
number of equations quite a lot so how

127
00:06:26,980 --> 00:06:30,940
does first how does a crime rate Sal

128
00:06:30,940 --> 00:06:34,180
how did crime rate I'll do the this zero

129
00:06:34,180 --> 00:06:36,880
knowledge it's a very clever

130
00:06:36,880 --> 00:06:38,710
construction that uses two building

131
00:06:38,710 --> 00:06:40,690
blocks the first one is an imperfect

132
00:06:40,690 --> 00:06:44,409
amortized proof which is to say that

133
00:06:44,409 --> 00:06:47,639
animal ties proof would normally

134
00:06:47,639 --> 00:06:50,709
soundness would normally ensure that any

135
00:06:50,709 --> 00:06:52,959
proven success with provide g2 to the

136
00:06:52,959 --> 00:06:55,989
minor scale I should be able to extract

137
00:06:55,989 --> 00:06:58,809
all pre images from this prover but for

138
00:06:58,809 --> 00:07:01,959
imperfect amortize the proofs from an

139
00:07:01,959 --> 00:07:03,669
approval that success was provided to

140
00:07:03,669 --> 00:07:06,909
the - care I can extract all but K pre

141
00:07:06,909 --> 00:07:09,519
images which is not enough for soundness

142
00:07:09,519 --> 00:07:13,389
clearly but they use the OMA morphic

143
00:07:13,389 --> 00:07:15,699
properties of the function f and a very

144
00:07:15,699 --> 00:07:17,860
endo clever construction of a poppet

145
00:07:17,860 --> 00:07:20,589
bipartite graph to show that there

146
00:07:20,589 --> 00:07:23,229
exists a compiler that can turn every

147
00:07:23,229 --> 00:07:26,919
imperfect amortized proof for n greater

148
00:07:26,919 --> 00:07:29,409
than four K squared into a fool's errand

149
00:07:29,409 --> 00:07:31,449
alleged proof of knowledge and this

150
00:07:31,449 --> 00:07:34,659
comes at very small costs since this

151
00:07:34,659 --> 00:07:37,360
introduces multiplicative offer overhead

152
00:07:37,360 --> 00:07:42,219
of two and only linear slack we will not

153
00:07:42,219 --> 00:07:45,879
touch the compiler in this paper we will

154
00:07:45,879 --> 00:07:50,860
focus on the implies proof so we will

155
00:07:50,860 --> 00:07:55,419
work to reduce this number of things we

156
00:07:55,419 --> 00:07:57,849
can extract to K divided by log alpha

157
00:07:57,849 --> 00:08:00,999
for some parameter alpha and naturally

158
00:08:00,999 --> 00:08:03,159
just doing this means that when using

159
00:08:03,159 --> 00:08:06,309
the compiler we will now only need we

160
00:08:06,309 --> 00:08:08,289
will we will divide this guy by log

161
00:08:08,289 --> 00:08:11,379
alpha again and only need n greater than

162
00:08:11,379 --> 00:08:13,269
four K squared divided by log square

163
00:08:13,269 --> 00:08:16,389
alpha and same thing for the slack we

164
00:08:16,389 --> 00:08:20,229
will divide the slack by log alpha so

165
00:08:20,229 --> 00:08:23,379
let's see how they do to a motorized

166
00:08:23,379 --> 00:08:25,949
proof first

167
00:08:27,479 --> 00:08:30,789
so once again we have the same setting

168
00:08:30,789 --> 00:08:34,629
the prover knows n seek and secrets and

169
00:08:34,629 --> 00:08:36,849
their images and the verifier only knows

170
00:08:36,849 --> 00:08:42,729
the images first the prover will simple

171
00:08:42,729 --> 00:08:45,069
small random Nessie's compute their

172
00:08:45,069 --> 00:08:47,980
images and send the images to the

173
00:08:47,980 --> 00:08:51,370
verifier the verifier with sample zero

174
00:08:51,370 --> 00:08:53,410
one challenge again send the challenges

175
00:08:53,410 --> 00:08:57,160
and the prover will reveal all the

176
00:08:57,160 --> 00:08:59,500
randomness is where the challenge the

177
00:08:59,500 --> 00:09:02,920
corresponding challenge was a zero so

178
00:09:02,920 --> 00:09:05,050
basically the prover will reveal alpha

179
00:09:05,050 --> 00:09:07,389
viz randomness is what's really

180
00:09:07,389 --> 00:09:10,569
important here is that country contrary

181
00:09:10,569 --> 00:09:13,089
to what intuition we could have we don't

182
00:09:13,089 --> 00:09:16,329
use n randomness in this first step we

183
00:09:16,329 --> 00:09:18,309
have n cigarettes but we used three n

184
00:09:18,309 --> 00:09:22,360
randomness is simply because since we

185
00:09:22,360 --> 00:09:24,040
reveal each of them with probability one

186
00:09:24,040 --> 00:09:24,430
alpha

187
00:09:24,430 --> 00:09:26,379
after this first step we will have

188
00:09:26,379 --> 00:09:28,120
overwhelming probability that at least

189
00:09:28,120 --> 00:09:30,579
and randomness is have not been revealed

190
00:09:30,579 --> 00:09:34,540
if n is large enough so we can do this

191
00:09:34,540 --> 00:09:36,360
first step and then in the second step

192
00:09:36,360 --> 00:09:40,389
we will use n randomness that have not

193
00:09:40,389 --> 00:09:43,600
been revealed and computes that i equals

194
00:09:43,600 --> 00:09:46,509
x i + LJ well there's our joy the first

195
00:09:46,509 --> 00:09:49,180
end that have not been revealed we can

196
00:09:49,180 --> 00:09:53,410
then send the dead eyes to the verifier

197
00:09:53,410 --> 00:09:55,449
which exactly like before will verify

198
00:09:55,449 --> 00:09:59,860
that f of that i equals y plus AJ and

199
00:09:59,860 --> 00:10:04,329
that's that are you small so this is the

200
00:10:04,329 --> 00:10:07,779
imperfect proof why is it what does it

201
00:10:07,779 --> 00:10:10,809
have this omnis that i gave because the

202
00:10:10,809 --> 00:10:12,550
probability of revealing each randomness

203
00:10:12,550 --> 00:10:16,540
or i will be one earth now imagine the

204
00:10:16,540 --> 00:10:19,209
prover wants to cheat on K of these

205
00:10:19,209 --> 00:10:22,750
secrets how do they do it it will cheat

206
00:10:22,750 --> 00:10:25,329
on K of the randomness is hope the

207
00:10:25,329 --> 00:10:27,550
verifier does not ask to reveal them and

208
00:10:27,550 --> 00:10:30,009
then use this randomness is to cheat on

209
00:10:30,009 --> 00:10:34,389
the dead eyes so essentially to on

210
00:10:34,389 --> 00:10:36,730
caper images it will have to cheat on K

211
00:10:36,730 --> 00:10:39,550
random messes and the probability that

212
00:10:39,550 --> 00:10:40,930
none of this randomness is

213
00:10:40,930 --> 00:10:44,440
be revealed is to to the minus K more

214
00:10:44,440 --> 00:10:46,960
formally we can show that from approval

215
00:10:46,960 --> 00:10:49,240
who succeeds probably 2 to the minus K

216
00:10:49,240 --> 00:10:52,620
one can extract all but ke preimages

217
00:10:52,620 --> 00:10:55,750
now how to improve this what the

218
00:10:55,750 --> 00:10:58,240
solution is very simple we just increase

219
00:10:58,240 --> 00:10:59,589
the probability of revealing ish

220
00:10:59,589 --> 00:11:03,430
randomness so clearly if each randomness

221
00:11:03,430 --> 00:11:05,620
is revealed with probability 1 minus 1

222
00:11:05,620 --> 00:11:07,570
over alpha with alpha greater than 2

223
00:11:07,570 --> 00:11:12,220
then to have none of the K Secrets

224
00:11:12,220 --> 00:11:15,880
Revealed the the cheating prover will

225
00:11:15,880 --> 00:11:18,520
have a probability 1 over alpha to the K

226
00:11:18,520 --> 00:11:22,209
and once again more formally we can show

227
00:11:22,209 --> 00:11:24,430
that from approval who succeeds with

228
00:11:24,430 --> 00:11:26,920
probability 2 to the minus K one can

229
00:11:26,920 --> 00:11:29,680
extract all but K over lakpha over alpha

230
00:11:29,680 --> 00:11:30,399
log alpha

231
00:11:30,399 --> 00:11:34,420
preimages so we will do exactly exactly

232
00:11:34,420 --> 00:11:37,930
this on this protocol so instead of

233
00:11:37,930 --> 00:11:41,620
taking si from 0 1 to the 3 n we take C

234
00:11:41,620 --> 00:11:42,610
to be a Bernoulli

235
00:11:42,610 --> 00:11:45,490
Bernoulli very variable with parameter 1

236
00:11:45,490 --> 00:11:47,890
over alpha which is a fancy way of

237
00:11:47,890 --> 00:11:49,830
saying we reveal everything its

238
00:11:49,830 --> 00:11:53,529
randomness with probability 1 over 1

239
00:11:53,529 --> 00:11:58,089
minus 1 over alpha so this introduces an

240
00:11:58,089 --> 00:12:00,310
issue because for the next step we need

241
00:12:00,310 --> 00:12:03,010
n randomness is to not have been

242
00:12:03,010 --> 00:12:05,140
revealed and clearly if we reveal to

243
00:12:05,140 --> 00:12:06,520
many of them this will not work anymore

244
00:12:06,520 --> 00:12:10,240
so we have to increase the number of

245
00:12:10,240 --> 00:12:12,190
randomness is we take in the beginning

246
00:12:12,190 --> 00:12:15,430
and thus increase the number of images

247
00:12:15,430 --> 00:12:18,459
we send so now we have each achieved the

248
00:12:18,459 --> 00:12:21,940
somnus where that we asked us to get

249
00:12:21,940 --> 00:12:25,270
which is K divided by log alpha but we

250
00:12:25,270 --> 00:12:27,610
have introduced and overhead linear in

251
00:12:27,610 --> 00:12:30,190
alpha so this protocol as its tenth is

252
00:12:30,190 --> 00:12:32,290
completely useless it's not more

253
00:12:32,290 --> 00:12:33,640
efficient than the previous one in

254
00:12:33,640 --> 00:12:38,350
anyway so we will pass exam first we can

255
00:12:38,350 --> 00:12:41,500
compute a hash of all these images I

256
00:12:41,500 --> 00:12:44,740
want to a 3 alpha L and instead of

257
00:12:44,740 --> 00:12:48,220
sending this send the hash of course now

258
00:12:48,220 --> 00:12:50,260
these checks do not make any sense

259
00:12:50,260 --> 00:12:53,529
because the verifier does not have AI or

260
00:12:53,529 --> 00:12:54,850
AJ

261
00:12:54,850 --> 00:12:59,050
but we can replace them by one check in

262
00:12:59,050 --> 00:13:01,839
which the verifier will compute AI

263
00:13:01,839 --> 00:13:04,569
himself so for everything that was

264
00:13:04,569 --> 00:13:07,360
revealed you can compute F of RI which

265
00:13:07,360 --> 00:13:10,089
will be AI and for all those that were

266
00:13:10,089 --> 00:13:12,790
used in the distillation you can compute

267
00:13:12,790 --> 00:13:17,110
F of Z I minus y I which should be AJ

268
00:13:17,110 --> 00:13:20,170
for the remaining J so we can compute

269
00:13:20,170 --> 00:13:22,660
this reorder them in the right order and

270
00:13:22,660 --> 00:13:25,569
check that the hash is the right one if

271
00:13:25,569 --> 00:13:27,670
the hash is collision resistant then we

272
00:13:27,670 --> 00:13:30,360
keep the soundness of the protocol and

273
00:13:30,360 --> 00:13:35,050
this works fine so now how we done yet

274
00:13:35,050 --> 00:13:39,519
well know the soundness is the the

275
00:13:39,519 --> 00:13:41,230
overhead is still linear in alpha

276
00:13:41,230 --> 00:13:45,250
because in the third step we reveal most

277
00:13:45,250 --> 00:13:49,990
of the randomness is we will on average

278
00:13:49,990 --> 00:13:53,139
revealed three times alpha minus 1 times

279
00:13:53,139 --> 00:13:55,180
n randomness is which is clearly linear

280
00:13:55,180 --> 00:13:58,959
in alpha and clearly much too large so

281
00:13:58,959 --> 00:14:02,439
we need a more efficient way to reveal

282
00:14:02,439 --> 00:14:04,750
the randomness is to the river to the

283
00:14:04,750 --> 00:14:11,380
verifier so the prover will first first

284
00:14:11,380 --> 00:14:13,480
we it will extract each randomness from

285
00:14:13,480 --> 00:14:18,550
a seed simply by using a PRG and to do

286
00:14:18,550 --> 00:14:20,290
so it will structure the seeds as the

287
00:14:20,290 --> 00:14:23,939
tree this way instead of using all the

288
00:14:23,939 --> 00:14:25,060
seeds

289
00:14:25,060 --> 00:14:27,870
it will only need to reveal a few nodes

290
00:14:27,870 --> 00:14:31,569
so what with the prover do first it was

291
00:14:31,569 --> 00:14:32,230
simple

292
00:14:32,230 --> 00:14:35,610
one seed uniformly at random and with

293
00:14:35,610 --> 00:14:41,889
256 bits and use to p2p ahrefs

294
00:14:41,889 --> 00:14:45,939
so size preserving PRF which we call PRF

295
00:14:45,939 --> 00:14:49,689
0 and PRF one and get s 0 which will be

296
00:14:49,689 --> 00:14:52,269
the image of s using the first one and s

297
00:14:52,269 --> 00:14:54,759
1 which will be the image of s using the

298
00:14:54,759 --> 00:14:57,519
second one repeat the same thing to get

299
00:14:57,519 --> 00:15:00,250
the next layer of seeds and again until

300
00:15:00,250 --> 00:15:04,360
he has more seeds than needed which will

301
00:15:04,360 --> 00:15:06,730
be at least 3 times alpha times n seeds

302
00:15:06,730 --> 00:15:08,440
from this

303
00:15:08,440 --> 00:15:11,259
you can use a PRG on each seed to get

304
00:15:11,259 --> 00:15:12,959
the corresponding around the masses

305
00:15:12,959 --> 00:15:15,190
let's say needs on your eight random

306
00:15:15,190 --> 00:15:19,120
masses and then on the second step the

307
00:15:19,120 --> 00:15:21,490
verifier will send a challenge to the

308
00:15:21,490 --> 00:15:23,470
approval asking to review some of those

309
00:15:23,470 --> 00:15:24,730
random messes

310
00:15:24,730 --> 00:15:26,860
let's say it needs to reveal randomness

311
00:15:26,860 --> 00:15:31,360
1 2 3 5 6 7 8 then you can simply go

312
00:15:31,360 --> 00:15:34,389
back up this tree and see which nodes

313
00:15:34,389 --> 00:15:36,220
will be necessary to reveal this

314
00:15:36,220 --> 00:15:40,600
randomness so yeah if we we see that for

315
00:15:40,600 --> 00:15:43,689
example if he sends this seed to the

316
00:15:43,689 --> 00:15:44,259
verifier

317
00:15:44,259 --> 00:15:47,319
the verifier can apply PRF zero and PRF

318
00:15:47,319 --> 00:15:51,160
1 2 the seed and recover then using the

319
00:15:51,160 --> 00:15:52,120
PRG

320
00:15:52,120 --> 00:15:55,180
R 1 and R 2 same thing it needs to send

321
00:15:55,180 --> 00:15:58,029
this node this node and this node so

322
00:15:58,029 --> 00:16:00,639
only 3 not to be able to reveal all

323
00:16:00,639 --> 00:16:03,720
those seven seeds on average

324
00:16:03,720 --> 00:16:06,910
computations show that n times log alpha

325
00:16:06,910 --> 00:16:10,300
nodes will be sufficient so the prover

326
00:16:10,300 --> 00:16:12,699
will only need to send n Times log alpha

327
00:16:12,699 --> 00:16:15,490
seeds to be able to reconstruct the

328
00:16:15,490 --> 00:16:20,709
randomness needed to to to be able to

329
00:16:20,709 --> 00:16:22,959
construe the randomness that he must

330
00:16:22,959 --> 00:16:26,529
reveal so now we finally average over ad

331
00:16:26,529 --> 00:16:31,779
Big O of log alpha so another

332
00:16:31,779 --> 00:16:33,670
improvement that can be made on this

333
00:16:33,670 --> 00:16:37,060
protocol is to consider polynomial

334
00:16:37,060 --> 00:16:40,180
integer vector one wave functions so we

335
00:16:40,180 --> 00:16:43,360
change the setting that we had before a

336
00:16:43,360 --> 00:16:45,819
little instead of using that to the our

337
00:16:45,819 --> 00:16:49,029
we use a ring ^ ah the ring being

338
00:16:49,029 --> 00:16:52,180
usually Z of X divided by X to the n

339
00:16:52,180 --> 00:16:54,610
plus 1 it can be other rings but that's

340
00:16:54,610 --> 00:16:57,519
the most common one and now we have an

341
00:16:57,519 --> 00:17:00,040
additional property for our one wave

342
00:17:00,040 --> 00:17:04,659
function is that is linear for product

343
00:17:04,659 --> 00:17:07,959
with a polynomial well yeah

344
00:17:07,959 --> 00:17:11,349
C times X means that we multiply every

345
00:17:11,349 --> 00:17:15,059
coefficient of x by the polynomial C and

346
00:17:15,059 --> 00:17:20,470
this C goes goes out of the F when

347
00:17:20,470 --> 00:17:21,630
applied

348
00:17:21,630 --> 00:17:24,750
so still the same requirement that it is

349
00:17:24,750 --> 00:17:27,179
are two inverse for small X and why do

350
00:17:27,179 --> 00:17:29,520
we consider this because virtually all

351
00:17:29,520 --> 00:17:33,480
efficient lattice constructions of a

352
00:17:33,480 --> 00:17:37,320
polynomial ring and since we want

353
00:17:37,320 --> 00:17:40,020
efficient zero no edge this is a an

354
00:17:40,020 --> 00:17:43,230
important setting and now the challenge

355
00:17:43,230 --> 00:17:45,510
that used to be 0 1 can be taken to be a

356
00:17:45,510 --> 00:17:47,309
monomial which means that instead of

357
00:17:47,309 --> 00:17:48,990
having only 2 possibilities for the

358
00:17:48,990 --> 00:17:51,650
challenge we have 2 n plus 1

359
00:17:51,650 --> 00:17:53,460
possibilities for this challenge

360
00:17:53,460 --> 00:17:59,309
and we can do the exact same protocol by

361
00:17:59,309 --> 00:18:02,070
choosing these challenges with only need

362
00:18:02,070 --> 00:18:04,770
n greater than 4 K squared over the log

363
00:18:04,770 --> 00:18:07,169
square alpha times n equations to be

364
00:18:07,169 --> 00:18:10,830
amortized over I will not give the proof

365
00:18:10,830 --> 00:18:15,179
of Sun s for this setting bit because it

366
00:18:15,179 --> 00:18:17,490
is quite a bit more involved and I would

367
00:18:17,490 --> 00:18:21,809
not have that time so in conclusion the

368
00:18:21,809 --> 00:18:24,650
work of hammerheads I'll construct and

369
00:18:24,650 --> 00:18:26,580
amortized zero knowledge proof of

370
00:18:26,580 --> 00:18:29,220
knowledge for integer victor 1 wave

371
00:18:29,220 --> 00:18:31,409
function with constant overhead and

372
00:18:31,409 --> 00:18:34,250
linear slack this was a huge improvement

373
00:18:34,250 --> 00:18:39,450
upon prior walks but the motivation is

374
00:18:39,450 --> 00:18:42,090
really large the number of vectors

375
00:18:42,090 --> 00:18:43,799
needed for amortisation was quite large

376
00:18:43,799 --> 00:18:47,700
we reduce this number to 4 K squared

377
00:18:47,700 --> 00:18:50,400
divided by log square alpha for any

378
00:18:50,400 --> 00:18:54,090
parameter alpha and we can even further

379
00:18:54,090 --> 00:18:58,620
reduce this number of equations to 4 K

380
00:18:58,620 --> 00:19:01,980
squared divided by log square alpha N in

381
00:19:01,980 --> 00:19:04,169
the case of polynomial in vegetable when

382
00:19:04,169 --> 00:19:08,970
Y functions where I will not go into

383
00:19:08,970 --> 00:19:11,490
into details here but the zero knowledge

384
00:19:11,490 --> 00:19:14,909
proof is somewhat weaker in this in this

385
00:19:14,909 --> 00:19:18,510
context so to give you some numbers the

386
00:19:18,510 --> 00:19:21,360
original work needed around 70,000

387
00:19:21,360 --> 00:19:24,179
equations for amortization to kick in if

388
00:19:24,179 --> 00:19:28,559
we use by binary challenges we see that

389
00:19:28,559 --> 00:19:30,600
only a few thousand of equations are

390
00:19:30,600 --> 00:19:33,780
enough and if we use a monomial

391
00:19:33,780 --> 00:19:34,790
challenges

392
00:19:34,790 --> 00:19:36,320
even a few hundreds of equations are

393
00:19:36,320 --> 00:19:39,740
enough which will be a much more

394
00:19:39,740 --> 00:19:45,020
feasible in practical situations on the

395
00:19:45,020 --> 00:19:50,500
other end the overhead the somewhat more

396
00:19:50,500 --> 00:19:52,910
efficient implementation of the work of

397
00:19:52,910 --> 00:19:57,770
Camelot I'll give proof size secrets of

398
00:19:57,770 --> 00:20:02,750
8.8 kilobytes and we see that with our

399
00:20:02,750 --> 00:20:05,030
construction we reach at most ten point

400
00:20:05,030 --> 00:20:07,610
ten point three kilobytes per secret

401
00:20:07,610 --> 00:20:11,750
which is a 15 percent increase increase

402
00:20:11,750 --> 00:20:16,940
in size which is totally reasonable so

403
00:20:16,940 --> 00:20:19,060
thank you for your attention

404
00:20:19,060 --> 00:20:25,690
[Applause]

