1
00:00:04,880 --> 00:00:08,210
so this is joint work with my co-authors

2
00:00:08,210 --> 00:00:11,000
prevention and our shake so what is the

3
00:00:11,000 --> 00:00:13,369
question they were interested in namely

4
00:00:13,369 --> 00:00:15,440
what is the exact wrong complexity of

5
00:00:15,440 --> 00:00:17,960
MPC so obviously why do we even care

6
00:00:17,960 --> 00:00:20,570
about the wrong complexity of MPC it

7
00:00:20,570 --> 00:00:22,910
just so happens that wrong complexity is

8
00:00:22,910 --> 00:00:24,920
a fundamental measure of efficiency for

9
00:00:24,920 --> 00:00:27,920
multi-party computations and you know

10
00:00:27,920 --> 00:00:30,200
its importance the importance of round

11
00:00:30,200 --> 00:00:33,170
complexity that is extends to general

12
00:00:33,170 --> 00:00:36,079
interactive protocols as well so now

13
00:00:36,079 --> 00:00:37,640
that we have sort of the question out of

14
00:00:37,640 --> 00:00:41,239
the way let's sort of finalize the

15
00:00:41,239 --> 00:00:43,550
setting that we're going to walk in so

16
00:00:43,550 --> 00:00:45,140
we're interested in computational

17
00:00:45,140 --> 00:00:48,109
security we allow a malicious adversary

18
00:00:48,109 --> 00:00:50,479
to corrupt an arbitrary set of parties

19
00:00:50,479 --> 00:00:54,019
and we work in the plane model so

20
00:00:54,019 --> 00:00:55,940
specifically if we assume a trusted

21
00:00:55,940 --> 00:00:59,239
setup like the CRS then this problem has

22
00:00:59,239 --> 00:01:01,190
already been resolved and we know of two

23
00:01:01,190 --> 00:01:03,199
round protocols and we know of a bunch

24
00:01:03,199 --> 00:01:07,610
of them so I'm now sort of going to

25
00:01:07,610 --> 00:01:09,860
briefly take you through a history of

26
00:01:09,860 --> 00:01:12,380
the works that address this question of

27
00:01:12,380 --> 00:01:15,530
round complexity in MPC and this starts

28
00:01:15,530 --> 00:01:18,500
with the work by goal like McCauley and

29
00:01:18,500 --> 00:01:20,570
witnessin will show a polynomial round

30
00:01:20,570 --> 00:01:23,119
construction of a protocol obviously we

31
00:01:23,119 --> 00:01:25,579
want to do better and the constant round

32
00:01:25,579 --> 00:01:28,159
protocol the study was started by beaver

33
00:01:28,159 --> 00:01:30,859
McCauley and rockaway and it was

34
00:01:30,859 --> 00:01:33,079
followed by a sequencer works not

35
00:01:33,079 --> 00:01:35,630
limited to the ones on the slide which

36
00:01:35,630 --> 00:01:38,329
use various assumptions to construct

37
00:01:38,329 --> 00:01:40,759
these constant known protocols of course

38
00:01:40,759 --> 00:01:43,520
like we want to resolve the exact long

39
00:01:43,520 --> 00:01:45,679
complexity of MPC so we want to do

40
00:01:45,679 --> 00:01:48,770
better than constant so what about the

41
00:01:48,770 --> 00:01:51,560
exact long complexity do we know of even

42
00:01:51,560 --> 00:01:53,780
lower bounds so this is sort of

43
00:01:53,780 --> 00:01:55,909
established by an important result by

44
00:01:55,909 --> 00:01:58,909
cats and Ostrovsky who showed that you

45
00:01:58,909 --> 00:02:00,560
know for round is impossible with

46
00:02:00,560 --> 00:02:03,619
respect to blackbox simulation there is

47
00:02:03,619 --> 00:02:06,499
a caveat which is the communication

48
00:02:06,499 --> 00:02:08,690
channel is this unidirectional message

49
00:02:08,690 --> 00:02:11,750
model and this is sort of unique to the

50
00:02:11,750 --> 00:02:15,440
two-party setting it's sort of not going

51
00:02:15,440 --> 00:02:16,940
to be used in the multi-party setting

52
00:02:16,940 --> 00:02:17,730
and

53
00:02:17,730 --> 00:02:20,890
shortly tell you the different

54
00:02:20,890 --> 00:02:22,590
communication channels so what about

55
00:02:22,590 --> 00:02:24,700
we're interested in multi-party

56
00:02:24,700 --> 00:02:27,790
computation so what about MPC and this

57
00:02:27,790 --> 00:02:30,970
was a very recent result by gulf

58
00:02:30,970 --> 00:02:32,830
Mukherjee Pandey and Pollock Rania do

59
00:02:32,830 --> 00:02:35,770
and they showed that three rounds are

60
00:02:35,770 --> 00:02:37,510
impossible with respect to black box

61
00:02:37,510 --> 00:02:39,819
simulation and this is the simultaneous

62
00:02:39,819 --> 00:02:42,030
message model which is the more general

63
00:02:42,030 --> 00:02:44,709
model in MPC and that's the model that

64
00:02:44,709 --> 00:02:47,500
we are going to be working in okay so

65
00:02:47,500 --> 00:02:49,690
now we've got lower bounds do we have

66
00:02:49,690 --> 00:02:52,120
constructions or that are close enough

67
00:02:52,120 --> 00:02:54,790
to this so the same paper also showed a

68
00:02:54,790 --> 00:02:57,820
five-round protocol based on IO and some

69
00:02:57,820 --> 00:03:00,700
other assumptions so given that this is

70
00:03:00,700 --> 00:03:03,100
sort of the state of the art the natural

71
00:03:03,100 --> 00:03:05,560
questions that follow are this there

72
00:03:05,560 --> 00:03:07,510
exists a five-round protocol based on

73
00:03:07,510 --> 00:03:09,130
standard assumptions because the only

74
00:03:09,130 --> 00:03:12,310
one we know is from IO and does that is

75
00:03:12,310 --> 00:03:14,800
the sort of upper bound tight does there

76
00:03:14,800 --> 00:03:18,519
exist a foreign MPC protocol and the

77
00:03:18,519 --> 00:03:22,120
results in this talk show that if we

78
00:03:22,120 --> 00:03:24,519
assume bdh we construct a five-round

79
00:03:24,519 --> 00:03:26,500
protocol and if we assume one way

80
00:03:26,500 --> 00:03:29,380
permutation then sub-exponential DDH we

81
00:03:29,380 --> 00:03:31,750
construct a four-round protocol of

82
00:03:31,750 --> 00:03:35,230
course given the results the four round

83
00:03:35,230 --> 00:03:37,150
is optimal with respect to black box

84
00:03:37,150 --> 00:03:40,690
simulation now we should point out that

85
00:03:40,690 --> 00:03:44,079
there's a concurrent work by brickowski

86
00:03:44,079 --> 00:03:46,239
Arabia and polychron you do and they

87
00:03:46,239 --> 00:03:49,420
construct a photon protocol as well they

88
00:03:49,420 --> 00:03:51,100
use slightly different techniques and

89
00:03:51,100 --> 00:03:53,260
their assumptions are different as well

90
00:03:53,260 --> 00:03:55,480
they assume adaptive commitments and

91
00:03:55,480 --> 00:04:00,880
sub-exponential lwe so I'm sort of just

92
00:04:00,880 --> 00:04:03,790
going to sort of touch briefly upon the

93
00:04:03,790 --> 00:04:06,000
template of this state-of-the-art work

94
00:04:06,000 --> 00:04:09,489
and I'll show you why there's an

95
00:04:09,489 --> 00:04:11,769
inherent sort of limitation in extending

96
00:04:11,769 --> 00:04:15,030
this work to get the results that we do

97
00:04:15,030 --> 00:04:18,100
so they work the basis of their work is

98
00:04:18,100 --> 00:04:21,700
this - nan protocol in the crs model and

99
00:04:21,700 --> 00:04:25,659
we know of these from IO and lwe and

100
00:04:25,659 --> 00:04:28,690
specifically they construct the five Ron

101
00:04:28,690 --> 00:04:30,430
protocol from IO so that's sort of going

102
00:04:30,430 --> 00:04:30,710
to be

103
00:04:30,710 --> 00:04:35,180
focus yeah so you can think of it as

104
00:04:35,180 --> 00:04:37,610
being simple enough I have a CRS I need

105
00:04:37,610 --> 00:04:39,350
to get rid of the CRS so what am I going

106
00:04:39,350 --> 00:04:41,780
to do I'm going to replace with it with

107
00:04:41,780 --> 00:04:44,960
a coin tossing protocol and they

108
00:04:44,960 --> 00:04:46,850
construct a photon coin tossing protocol

109
00:04:46,850 --> 00:04:48,320
and it just so happens that it's

110
00:04:48,320 --> 00:04:50,960
possible to paralyze one round of the

111
00:04:50,960 --> 00:04:53,360
NPC with one round of the coin tossing

112
00:04:53,360 --> 00:04:55,580
protocol and this gives me a total of

113
00:04:55,580 --> 00:04:58,880
five rounds so what are the limitations

114
00:04:58,880 --> 00:05:02,060
then of this approach it seems almost

115
00:05:02,060 --> 00:05:04,940
inherent that one round of the NPC

116
00:05:04,940 --> 00:05:08,150
rather the second order of the NPC seems

117
00:05:08,150 --> 00:05:10,250
to depend on the CRS so we are sort of

118
00:05:10,250 --> 00:05:12,920
unsure of how you would paralyze both

119
00:05:12,920 --> 00:05:14,690
rounds of the coin tossing protocol with

120
00:05:14,690 --> 00:05:17,980
this or NPC and the other is

121
00:05:17,980 --> 00:05:20,570
irrespective of whether we can solve

122
00:05:20,570 --> 00:05:23,510
this this still limits our construction

123
00:05:23,510 --> 00:05:26,210
to the assumptions of the underlying MPC

124
00:05:26,210 --> 00:05:29,120
and that we know in for the five round

125
00:05:29,120 --> 00:05:33,110
case only from i/o so there's another

126
00:05:33,110 --> 00:05:35,840
methodology for constructing protocols

127
00:05:35,840 --> 00:05:40,070
and that's using this gmw compiler so

128
00:05:40,070 --> 00:05:42,140
what does it do it takes a protocol

129
00:05:42,140 --> 00:05:44,360
that's secured against semi or semi

130
00:05:44,360 --> 00:05:46,790
honest adversities and converts it into

131
00:05:46,790 --> 00:05:48,680
a protocol let's secure against

132
00:05:48,680 --> 00:05:51,050
malicious adversities so how does it do

133
00:05:51,050 --> 00:05:54,440
that I start with this phase which I'll

134
00:05:54,440 --> 00:05:57,680
called coin tossing and then for each

135
00:05:57,680 --> 00:05:59,600
round of the underlying semi honest

136
00:05:59,600 --> 00:06:01,430
protocol I'm going to prove on its

137
00:06:01,430 --> 00:06:05,290
behavior and that's going to be this

138
00:06:05,290 --> 00:06:07,730
underlying protocol and I'm going to

139
00:06:07,730 --> 00:06:09,740
attach a zero knowledge proof saying

140
00:06:09,740 --> 00:06:11,210
that look I behaved honestly in this

141
00:06:11,210 --> 00:06:13,670
song and I'm gonna sort of repeat this

142
00:06:13,670 --> 00:06:18,200
for each round and so on so in this work

143
00:06:18,200 --> 00:06:20,030
we're sort of going to consider a semi

144
00:06:20,030 --> 00:06:22,700
honest protocols that are secure against

145
00:06:22,700 --> 00:06:26,480
bad randomness and so I'm sort of going

146
00:06:26,480 --> 00:06:28,430
to just ignore the coin tossing protocol

147
00:06:28,430 --> 00:06:32,420
I come back to this point or later on so

148
00:06:32,420 --> 00:06:34,580
now that I've got rid of that no matter

149
00:06:34,580 --> 00:06:36,650
in terms of rounds no matter how

150
00:06:36,650 --> 00:06:39,050
efficient the underlying protocol is the

151
00:06:39,050 --> 00:06:41,120
main overhead is still in terms of the

152
00:06:41,120 --> 00:06:42,800
number of proofs which are of course

153
00:06:42,800 --> 00:06:43,750
Martir on

154
00:06:43,750 --> 00:06:48,010
and the idea is then can we reduce the

155
00:06:48,010 --> 00:06:49,960
number of proofs and so this is sort of

156
00:06:49,960 --> 00:06:53,290
what we are going to tackle so our

157
00:06:53,290 --> 00:06:55,420
strategy is then to start off with the

158
00:06:55,420 --> 00:06:57,700
semi honest protocol you know of a

159
00:06:57,700 --> 00:07:01,300
specific type so I'm going to have a

160
00:07:01,300 --> 00:07:02,770
protocol that split into this

161
00:07:02,770 --> 00:07:04,740
computation phase in the output phase a

162
00:07:04,740 --> 00:07:07,450
computation phase is when each party

163
00:07:07,450 --> 00:07:10,480
computes a share of the output and this

164
00:07:10,480 --> 00:07:12,880
can be multiple rounds as is denoted by

165
00:07:12,880 --> 00:07:15,280
these dotted lines and the output phase

166
00:07:15,280 --> 00:07:17,680
typically a single round just exchanges

167
00:07:17,680 --> 00:07:19,780
the shares and then they compute the

168
00:07:19,780 --> 00:07:23,020
output locally and this in turn actually

169
00:07:23,020 --> 00:07:25,900
is satisfied by most MPC protocols that

170
00:07:25,900 --> 00:07:30,390
we know of so this leads to this idea of

171
00:07:30,390 --> 00:07:34,810
can we prove on its behavior just once

172
00:07:34,810 --> 00:07:37,600
for the entire computation phase if so

173
00:07:37,600 --> 00:07:39,190
the protocol would look something like

174
00:07:39,190 --> 00:07:42,040
this I done with my computation phase I

175
00:07:42,040 --> 00:07:45,250
send a proof and so on well this is

176
00:07:45,250 --> 00:07:47,440
sounds bizarre right like it might be

177
00:07:47,440 --> 00:07:48,070
too late

178
00:07:48,070 --> 00:07:50,410
allowing an adversity to deviate from

179
00:07:50,410 --> 00:07:53,380
the protocol even in one round might

180
00:07:53,380 --> 00:07:56,830
break privacy completely so of course

181
00:07:56,830 --> 00:07:58,560
we're going to sort of require some

182
00:07:58,560 --> 00:08:01,330
additional properties from the

183
00:08:01,330 --> 00:08:04,630
underlying protocol specifically we are

184
00:08:04,630 --> 00:08:06,160
going to call this property robustness

185
00:08:06,160 --> 00:08:09,100
and it's going to be pertain to the

186
00:08:09,100 --> 00:08:11,830
computation phase and the computation

187
00:08:11,830 --> 00:08:13,240
phase is going to maintain privacy

188
00:08:13,240 --> 00:08:16,900
against malicious adversaries but it's

189
00:08:16,900 --> 00:08:19,419
not going to guarantee the correctness

190
00:08:19,419 --> 00:08:22,180
of the computation so why is this point

191
00:08:22,180 --> 00:08:25,060
sort of relevant and why can't I sort of

192
00:08:25,060 --> 00:08:28,510
push the output phase further up know

193
00:08:28,510 --> 00:08:30,040
that because the correctness of

194
00:08:30,040 --> 00:08:32,320
computation is not guaranteed the

195
00:08:32,320 --> 00:08:34,059
adversity could potentially change the

196
00:08:34,059 --> 00:08:36,640
function being computed to the identity

197
00:08:36,640 --> 00:08:38,799
function of course privacy is still

198
00:08:38,799 --> 00:08:39,909
guarantee till the end of the

199
00:08:39,909 --> 00:08:41,830
computation phase but if I don't

200
00:08:41,830 --> 00:08:44,380
complete my zero knowledge proof prior

201
00:08:44,380 --> 00:08:47,110
to revealing the output phase then the

202
00:08:47,110 --> 00:08:49,120
adversary learns the honest part is

203
00:08:49,120 --> 00:08:53,350
output so this proof in between sort of

204
00:08:53,350 --> 00:08:54,910
acts as a shield

205
00:08:54,910 --> 00:08:56,980
between the computation phase and the

206
00:08:56,980 --> 00:09:01,150
output phase so this technique so we

207
00:09:01,150 --> 00:09:02,920
call this underlying protocol or robust

208
00:09:02,920 --> 00:09:05,890
NPC and this technique is sort of called

209
00:09:05,890 --> 00:09:08,830
delayed verification and was introduced

210
00:09:08,830 --> 00:09:11,890
by this world Chandler and Goyle

211
00:09:11,890 --> 00:09:14,380
Ostrovsky inside and was introduced in a

212
00:09:14,380 --> 00:09:18,880
completely different context and I will

213
00:09:18,880 --> 00:09:20,710
point out as I've already said that this

214
00:09:20,710 --> 00:09:22,960
protocol is already secure against bad

215
00:09:22,960 --> 00:09:25,870
randomness so we can ignore the

216
00:09:25,870 --> 00:09:29,830
coin-tossing phase in our compiler so in

217
00:09:29,830 --> 00:09:31,600
the rest of the talk I am sort of going

218
00:09:31,600 --> 00:09:34,660
to talk about compiler from a four-round

219
00:09:34,660 --> 00:09:38,410
robust NPC to a five-round protocol and

220
00:09:38,410 --> 00:09:41,050
similarly to a photon protocol and for

221
00:09:41,050 --> 00:09:42,340
the construction of the four round

222
00:09:42,340 --> 00:09:44,620
robust NPC I'll just briefly talk about

223
00:09:44,620 --> 00:09:47,620
some of the key points I won't have too

224
00:09:47,620 --> 00:09:51,040
much time to really go into that so if I

225
00:09:51,040 --> 00:09:53,230
run protocol the template is simple

226
00:09:53,230 --> 00:09:57,040
enough if you remember this is what we

227
00:09:57,040 --> 00:10:00,040
had and if you see the number of rounds

228
00:10:00,040 --> 00:10:01,690
in the computation face is reduced to 1

229
00:10:01,690 --> 00:10:05,080
so it's 3 plus 1 4 so the idea is of

230
00:10:05,080 --> 00:10:07,420
course if I want to reduce the number of

231
00:10:07,420 --> 00:10:09,340
rounds I have to paralyze the proof

232
00:10:09,340 --> 00:10:13,000
somehow and if I want to paralyze the

233
00:10:13,000 --> 00:10:15,280
proof it's important to understand what

234
00:10:15,280 --> 00:10:17,080
the statement is the statement is the

235
00:10:17,080 --> 00:10:19,420
entire transcript so if I want to

236
00:10:19,420 --> 00:10:22,420
parallelize the proof it has to be input

237
00:10:22,420 --> 00:10:25,990
delayed and the next thing is of course

238
00:10:25,990 --> 00:10:27,430
we don't

239
00:10:27,430 --> 00:10:28,870
there are impossibly results for

240
00:10:28,870 --> 00:10:30,850
blackbox simulation for three rounds EK

241
00:10:30,850 --> 00:10:33,880
so this zero knowledge these proofs

242
00:10:33,880 --> 00:10:36,250
rather become four round and if I were

243
00:10:36,250 --> 00:10:38,740
to sort of push them up it would become

244
00:10:38,740 --> 00:10:41,860
it will look something like this in fact

245
00:10:41,860 --> 00:10:44,560
I can do even better I can sort of move

246
00:10:44,560 --> 00:10:46,720
the second zero knowledge proof up and

247
00:10:46,720 --> 00:10:49,480
sort of just leave the last round to be

248
00:10:49,480 --> 00:10:52,420
in parallel with the output phase of

249
00:10:52,420 --> 00:10:54,850
course one would hope that something

250
00:10:54,850 --> 00:10:56,500
like this would work but of course now

251
00:10:56,500 --> 00:10:59,740
we've paralyzed things and issues crop

252
00:10:59,740 --> 00:11:03,370
up mainly this issue of non mal

253
00:11:03,370 --> 00:11:05,880
abilities like a big concern for us

254
00:11:05,880 --> 00:11:08,850
why so it's because

255
00:11:08,850 --> 00:11:12,079
in the case of paralyzing the proofs

256
00:11:12,079 --> 00:11:15,899
standard soundness does not suffice so

257
00:11:15,899 --> 00:11:19,819
what do I mean by this in general I have

258
00:11:19,819 --> 00:11:23,549
proven and a verifier and then the sound

259
00:11:23,549 --> 00:11:25,350
is just guarantees that an adversarial

260
00:11:25,350 --> 00:11:28,589
prover can't prove a false statement but

261
00:11:28,589 --> 00:11:30,119
now when I'm sort of squishing these

262
00:11:30,119 --> 00:11:32,519
proofs and adversity is acting both as a

263
00:11:32,519 --> 00:11:35,369
prove or and verify so it's something

264
00:11:35,369 --> 00:11:38,609
like this so in the case that I am

265
00:11:38,609 --> 00:11:40,589
trying to prove the security in

266
00:11:40,589 --> 00:11:43,379
simulation the adverse is going to be a

267
00:11:43,379 --> 00:11:46,769
recipient of a simulated proof now in

268
00:11:46,769 --> 00:11:49,049
the case of a simulated proof can I

269
00:11:49,049 --> 00:11:50,579
still claim that the proof on the

270
00:11:50,579 --> 00:11:53,549
right-hand side is sound so this is sort

271
00:11:53,549 --> 00:11:56,129
of what is called simulation soundness

272
00:11:56,129 --> 00:11:58,769
and this is sort of inherently linked to

273
00:11:58,769 --> 00:12:02,539
non malleability so instead of now

274
00:12:02,539 --> 00:12:04,949
having these normal zero knowledge proof

275
00:12:04,949 --> 00:12:06,419
so I'm going to sort of switch them

276
00:12:06,419 --> 00:12:08,249
around and I'm going to replace them

277
00:12:08,249 --> 00:12:09,569
with non malleability of the knowledge

278
00:12:09,569 --> 00:12:14,039
flows fortunately we know of input delay

279
00:12:14,039 --> 00:12:16,919
nmz case and these can be constructed

280
00:12:16,919 --> 00:12:18,569
from collision resistant hash function

281
00:12:18,569 --> 00:12:21,689
and you'll hear about this later in

282
00:12:21,689 --> 00:12:26,069
crypto in one of the talks so this is

283
00:12:26,069 --> 00:12:28,470
sort of like a general overview of the

284
00:12:28,470 --> 00:12:30,689
construction of course the details I've

285
00:12:30,689 --> 00:12:34,589
sort of glossed over so what about the

286
00:12:34,589 --> 00:12:37,109
for Ron protocol I mean we saw the

287
00:12:37,109 --> 00:12:38,879
five-round case so what are the main

288
00:12:38,879 --> 00:12:41,549
challenges in terms of getting this down

289
00:12:41,549 --> 00:12:45,239
to four of course I explained as to why

290
00:12:45,239 --> 00:12:48,089
we can't let this output phase you know

291
00:12:48,089 --> 00:12:50,639
be revealed before the end of the proof

292
00:12:50,639 --> 00:12:53,729
so it seems like this is sort of a

293
00:12:53,729 --> 00:12:57,449
bottleneck and of course it might have

294
00:12:57,449 --> 00:13:00,049
been nice if we could reduce it to three

295
00:13:00,049 --> 00:13:03,059
but like I already pointed out three Ron

296
00:13:03,059 --> 00:13:04,709
zero knowledge proof with blackbox

297
00:13:04,709 --> 00:13:08,669
emulation is impossible and so this

298
00:13:08,669 --> 00:13:12,209
sounds a little tricky it almost seems

299
00:13:12,209 --> 00:13:15,059
like we don't know how to go beyond

300
00:13:15,059 --> 00:13:20,100
these five Ron's so let's look at a

301
00:13:20,100 --> 00:13:22,860
specific property of this robust

302
00:13:22,860 --> 00:13:26,430
I'm PC and the nice property of the

303
00:13:26,430 --> 00:13:28,440
robust MPC is that the simulator needs

304
00:13:28,440 --> 00:13:31,110
to cheat only in the final round and for

305
00:13:31,110 --> 00:13:33,810
the computation phase it can just run

306
00:13:33,810 --> 00:13:36,570
the protocol with a random input so in

307
00:13:36,570 --> 00:13:38,730
some sense the simulator uses the output

308
00:13:38,730 --> 00:13:41,550
phase to fix the computation that it has

309
00:13:41,550 --> 00:13:44,940
done in the computation phase so if I

310
00:13:44,940 --> 00:13:47,670
have the protocol like this if I'm

311
00:13:47,670 --> 00:13:49,800
simulating the output phase I can go

312
00:13:49,800 --> 00:13:52,170
from a computation faced with the real

313
00:13:52,170 --> 00:13:54,660
input to the computation phase with a

314
00:13:54,660 --> 00:13:58,950
random input so why is this relevant or

315
00:13:58,950 --> 00:14:03,450
important to us remember I had this but

316
00:14:03,450 --> 00:14:06,060
now I don't need to prove simulate the

317
00:14:06,060 --> 00:14:08,790
nmz K because I'm sort of behaving

318
00:14:08,790 --> 00:14:11,010
honestly in the computation phase with a

319
00:14:11,010 --> 00:14:13,140
different input but the behavior is

320
00:14:13,140 --> 00:14:15,930
honest with respect to that input so I

321
00:14:15,930 --> 00:14:18,240
can hope to you know use a weaker

322
00:14:18,240 --> 00:14:20,970
primitive than zero knowledge and this

323
00:14:20,970 --> 00:14:22,650
primitive that I'm going to use is

324
00:14:22,650 --> 00:14:25,380
called strong witness in distinguished

325
00:14:25,380 --> 00:14:29,820
ability or strong WI now I come back

326
00:14:29,820 --> 00:14:32,010
shortly - what's wrong WI is and why it

327
00:14:32,010 --> 00:14:34,440
suffices for us but say I had

328
00:14:34,440 --> 00:14:37,400
hypothetically a three-round strong WI

329
00:14:37,400 --> 00:14:40,920
then I could replace it there and then

330
00:14:40,920 --> 00:14:43,230
I'd push everything up and hopefully

331
00:14:43,230 --> 00:14:47,130
this would resolve the problem so what

332
00:14:47,130 --> 00:14:50,010
are these strong WI proof systems say I

333
00:14:50,010 --> 00:14:52,440
have a distribution D 1 and D 2 that are

334
00:14:52,440 --> 00:14:54,060
computationally indistinguishable and

335
00:14:54,060 --> 00:14:56,700
from them my sample a statement and a

336
00:14:56,700 --> 00:15:00,480
witness so strong WI guarantees that the

337
00:15:00,480 --> 00:15:03,450
proof associated with these statement

338
00:15:03,450 --> 00:15:05,400
witnesses all computationally

339
00:15:05,400 --> 00:15:08,400
indistinguishable so recall in our

340
00:15:08,400 --> 00:15:11,250
setting that the statement is the

341
00:15:11,250 --> 00:15:14,310
transcript of the protocol and the

342
00:15:14,310 --> 00:15:16,290
witness is the input that generates the

343
00:15:16,290 --> 00:15:19,110
transcript so when we're changing from

344
00:15:19,110 --> 00:15:20,760
sort of the real input to the random

345
00:15:20,760 --> 00:15:22,380
input the witnesses of course changing

346
00:15:22,380 --> 00:15:25,470
but also note that the transcript is

347
00:15:25,470 --> 00:15:28,890
going to change so your standard notion

348
00:15:28,890 --> 00:15:30,870
of witness indistinguishable D is not

349
00:15:30,870 --> 00:15:32,880
going to apply which is why we need this

350
00:15:32,880 --> 00:15:37,100
stronger notion of strong WI

351
00:15:37,100 --> 00:15:41,390
and but what about known constructions

352
00:15:41,390 --> 00:15:45,080
of strong WI in a recent work by Jane

353
00:15:45,080 --> 00:15:48,440
collector on an autumn they construct us

354
00:15:48,440 --> 00:15:51,620
three rounds from WI from ddh but the

355
00:15:51,620 --> 00:15:54,020
only caveat is that it's in limited

356
00:15:54,020 --> 00:15:55,790
setting so why is it in a limited

357
00:15:55,790 --> 00:16:00,680
setting it works only if the prover is

358
00:16:00,680 --> 00:16:04,040
sort of reveals the statement only at

359
00:16:04,040 --> 00:16:06,980
the last round of the proof within our

360
00:16:06,980 --> 00:16:08,510
case since the statement is the entire

361
00:16:08,510 --> 00:16:11,030
transcript and the transcript is sort of

362
00:16:11,030 --> 00:16:13,070
available to everyone before the last

363
00:16:13,070 --> 00:16:15,800
round they're setting their result is

364
00:16:15,800 --> 00:16:18,920
not applicable to our setting so what do

365
00:16:18,920 --> 00:16:21,800
we do we construct a three round strong

366
00:16:21,800 --> 00:16:24,500
WI I've put a star to denote some

367
00:16:24,500 --> 00:16:27,050
additional properties that we need so we

368
00:16:27,050 --> 00:16:29,570
construct them so based on one way

369
00:16:29,570 --> 00:16:31,160
permutation and sub exponent she'll

370
00:16:31,160 --> 00:16:34,430
secure DDH and since i've alluded to the

371
00:16:34,430 --> 00:16:35,750
fact that we require these non

372
00:16:35,750 --> 00:16:38,180
malleability properties it's also going

373
00:16:38,180 --> 00:16:39,680
to have the requisite non malleability

374
00:16:39,680 --> 00:16:45,320
properties so an important point to know

375
00:16:45,320 --> 00:16:46,640
that even though we are assuming

376
00:16:46,640 --> 00:16:48,620
sub-exponential security our final

377
00:16:48,620 --> 00:16:50,210
simulator is still going to run in

378
00:16:50,210 --> 00:16:51,110
polynomial time

379
00:16:51,110 --> 00:16:53,720
the sub-exponential security is sort of

380
00:16:53,720 --> 00:16:56,360
going to be only used and argued in the

381
00:16:56,360 --> 00:17:02,030
hybrids so there's some remarks on you

382
00:17:02,030 --> 00:17:05,209
know the security proof of bodies

383
00:17:05,209 --> 00:17:06,890
construction specifically I'd focus on

384
00:17:06,890 --> 00:17:09,650
the four round case there are you know

385
00:17:09,650 --> 00:17:11,480
several challenges and one of them

386
00:17:11,480 --> 00:17:13,250
already alluded to is the non

387
00:17:13,250 --> 00:17:15,290
malleability and you know specific

388
00:17:15,290 --> 00:17:17,449
instructions of the Constituent

389
00:17:17,449 --> 00:17:20,470
primitives are modified accordingly

390
00:17:20,470 --> 00:17:24,890
another point is that for the simulator

391
00:17:24,890 --> 00:17:27,800
to argue security it needs to extract

392
00:17:27,800 --> 00:17:30,980
the inputs of the adversity so for that

393
00:17:30,980 --> 00:17:34,130
we add this extractable commitment or

394
00:17:34,130 --> 00:17:36,620
three round extractable commitment where

395
00:17:36,620 --> 00:17:40,130
the address of the parties commit to the

396
00:17:40,130 --> 00:17:42,110
input that they are going to use in this

397
00:17:42,110 --> 00:17:44,990
robust MPC and now the proofs are also

398
00:17:44,990 --> 00:17:47,630
going to state you know that the value

399
00:17:47,630 --> 00:17:48,790
committed in the come

400
00:17:48,790 --> 00:17:51,190
mint is consistent with the rest of the

401
00:17:51,190 --> 00:17:55,390
protocol and these extractable

402
00:17:55,390 --> 00:17:57,880
commitments which are extractable by

403
00:17:57,880 --> 00:17:59,920
reminding are known from injective

404
00:17:59,920 --> 00:18:02,650
one-way functions the 3-round once of

405
00:18:02,650 --> 00:18:07,030
course so now we have primitives that

406
00:18:07,030 --> 00:18:10,060
require rewinding and because of this we

407
00:18:10,060 --> 00:18:12,700
now also need the other primitives in

408
00:18:12,700 --> 00:18:14,710
the protocol to be secure against

409
00:18:14,710 --> 00:18:18,040
rewinding specifically just think of

410
00:18:18,040 --> 00:18:20,320
right now just the strong WI in the

411
00:18:20,320 --> 00:18:22,540
extractable commitment so when I'm sort

412
00:18:22,540 --> 00:18:25,120
of rewinding to extract from the

413
00:18:25,120 --> 00:18:27,250
extractable commitment I require that

414
00:18:27,250 --> 00:18:29,740
the strong WI property still holds and

415
00:18:29,740 --> 00:18:32,110
there's no guarantee that this will

416
00:18:32,110 --> 00:18:34,510
actually happen so we need to sort of

417
00:18:34,510 --> 00:18:36,670
incorporate this into our protocol and

418
00:18:36,670 --> 00:18:40,060
primitives and we do this either by

419
00:18:40,060 --> 00:18:42,490
using primitives that are rebinding

420
00:18:42,490 --> 00:18:45,490
secure or we sort of entirely bypass the

421
00:18:45,490 --> 00:18:48,520
thing and use complexity leveraging and

422
00:18:48,520 --> 00:18:52,060
this is another place where we sort of

423
00:18:52,060 --> 00:18:54,190
use the sub-exponential security and

424
00:18:54,190 --> 00:18:56,350
again this is used entirely in the high

425
00:18:56,350 --> 00:18:57,970
bridges doesn't show up in the final

426
00:18:57,970 --> 00:19:03,190
simulator and finally I just like talk

427
00:19:03,190 --> 00:19:08,340
about a few key points of the robust NPC

428
00:19:08,340 --> 00:19:11,410
from the gmw construction we know that

429
00:19:11,410 --> 00:19:14,470
the non complexity is proportional to

430
00:19:14,470 --> 00:19:17,350
the depth of the computation and a

431
00:19:17,350 --> 00:19:20,350
common idea to reduce the depth is to

432
00:19:20,350 --> 00:19:24,280
use randomized n codings and Appelbaum

433
00:19:24,280 --> 00:19:27,250
is shy Sheila it's sure that I can

434
00:19:27,250 --> 00:19:29,860
reduce general functionality computation

435
00:19:29,860 --> 00:19:31,840
to computing degree three randomized

436
00:19:31,840 --> 00:19:35,560
polynomials so if I now compute these

437
00:19:35,560 --> 00:19:37,690
degree three randomized polynomials

438
00:19:37,690 --> 00:19:43,540
using this sort of gmw style I get a six

439
00:19:43,540 --> 00:19:45,940
round semi honest protocol if I use semi

440
00:19:45,940 --> 00:19:51,040
honest OT now if I use two round or ot

441
00:19:51,040 --> 00:19:53,340
which is maliciously secure

442
00:19:53,340 --> 00:19:57,190
indistinguishable I get six round robust

443
00:19:57,190 --> 00:20:01,250
MPC so we already have this robust MPC

444
00:20:01,250 --> 00:20:03,710
so sort of the main contribution is now

445
00:20:03,710 --> 00:20:05,720
of course to bring this down to four

446
00:20:05,720 --> 00:20:08,299
rounds and unfortunately I'm sort of not

447
00:20:08,299 --> 00:20:10,760
going to have time to go over this but

448
00:20:10,760 --> 00:20:14,270
this sort of gives me a 4 round robust

449
00:20:14,270 --> 00:20:16,820
MPC and it's important to know that we

450
00:20:16,820 --> 00:20:20,270
can construct it from DTH so the

451
00:20:20,270 --> 00:20:21,980
assumptions for the robust MPC is just

452
00:20:21,980 --> 00:20:25,669
EDH so yeah of course this now brings me

453
00:20:25,669 --> 00:20:28,730
to the end of the talk and yeah if you

454
00:20:28,730 --> 00:20:31,510
have any questions

455
00:20:31,720 --> 00:20:39,150
[Applause]

