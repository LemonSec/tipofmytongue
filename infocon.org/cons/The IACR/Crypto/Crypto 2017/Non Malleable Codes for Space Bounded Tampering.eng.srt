1
00:00:05,880 --> 00:00:07,649
good afternoon everyone thank you very

2
00:00:07,649 --> 00:00:10,770
much for introduction so as already said

3
00:00:10,770 --> 00:00:13,019
I'm gonna present about non malleable

4
00:00:13,019 --> 00:00:16,349
codes for a space bounded tempering so

5
00:00:16,349 --> 00:00:18,330
first of all what are non malleable

6
00:00:18,330 --> 00:00:21,300
codes and what are they're good for so

7
00:00:21,300 --> 00:00:25,350
non malleable code is a coding scheme so

8
00:00:25,350 --> 00:00:27,900
first of all we require correctness that

9
00:00:27,900 --> 00:00:30,060
means that if we have a message and we

10
00:00:30,060 --> 00:00:32,460
encode a message and then we run decode

11
00:00:32,460 --> 00:00:35,610
then we get the original message the

12
00:00:35,610 --> 00:00:38,030
second property is non malleability

13
00:00:38,030 --> 00:00:40,650
informally what it says is that in here

14
00:00:40,650 --> 00:00:42,960
if we have a message M which we encode

15
00:00:42,960 --> 00:00:46,049
and then we apply a tempering algorithm

16
00:00:46,049 --> 00:00:48,629
a to this code word we get some tempered

17
00:00:48,629 --> 00:00:51,030
code word C Prime and there are free

18
00:00:51,030 --> 00:00:53,040
options for this code word C prime

19
00:00:53,040 --> 00:00:55,710
either it decodes to the original

20
00:00:55,710 --> 00:00:59,040
message M or it's an invalid code word

21
00:00:59,040 --> 00:01:01,890
in that case the result of decoding is

22
00:01:01,890 --> 00:01:04,500
some failure message and the third

23
00:01:04,500 --> 00:01:07,170
option is that that C prime decodes to

24
00:01:07,170 --> 00:01:10,760
some M prime which is unrelated to M

25
00:01:10,760 --> 00:01:12,990
informally that means that it doesn't

26
00:01:12,990 --> 00:01:15,540
contain or reveal any information about

27
00:01:15,540 --> 00:01:18,900
the original message ever so let me

28
00:01:18,900 --> 00:01:21,300
emphasize here that we always define non

29
00:01:21,300 --> 00:01:23,580
malleable codes with respect to some

30
00:01:23,580 --> 00:01:26,580
tempering Class A but I will talk about

31
00:01:26,580 --> 00:01:28,950
this tempering class in more detail

32
00:01:28,950 --> 00:01:32,430
later so what are non-modal codes good

33
00:01:32,430 --> 00:01:35,040
for so let me demonstrate it on the

34
00:01:35,040 --> 00:01:37,650
following example assume that we have a

35
00:01:37,650 --> 00:01:40,940
device that executes some cryptographic

36
00:01:40,940 --> 00:01:42,900
functionality for example digital

37
00:01:42,900 --> 00:01:47,040
signature and the secret key is stored

38
00:01:47,040 --> 00:01:50,670
in the memory of the device and now what

39
00:01:50,670 --> 00:01:52,530
happens if someone tempers with the

40
00:01:52,530 --> 00:01:55,050
device by that I mean that we applied

41
00:01:55,050 --> 00:01:57,420
the tempering function on the content of

42
00:01:57,420 --> 00:02:00,870
the memory so this as SK the secret key

43
00:02:00,870 --> 00:02:03,510
gets tempered to SK Prime

44
00:02:03,510 --> 00:02:06,780
so now the input-output behavior can

45
00:02:06,780 --> 00:02:09,239
reveal information about the original

46
00:02:09,239 --> 00:02:11,879
secret key and this was demonstrated by

47
00:02:11,879 --> 00:02:15,209
Bernard M Miller and Lipton 2001 by the

48
00:02:15,209 --> 00:02:16,739
same

49
00:02:16,739 --> 00:02:20,470
fault injection in RSA digital signature

50
00:02:20,470 --> 00:02:23,349
and they show that injecting a single

51
00:02:23,349 --> 00:02:26,319
random part reveals the entire secret

52
00:02:26,319 --> 00:02:28,959
key so we have to be concerned about

53
00:02:28,959 --> 00:02:31,629
memory tempering and we need to look for

54
00:02:31,629 --> 00:02:34,269
ways how to protect against it and one

55
00:02:34,269 --> 00:02:36,209
way how to protect any cryptographic

56
00:02:36,209 --> 00:02:39,150
functionality is via non malleable codes

57
00:02:39,150 --> 00:02:42,879
so how does it work instead of storing

58
00:02:42,879 --> 00:02:44,980
the secret key in the memory of the

59
00:02:44,980 --> 00:02:47,860
device we store an encoding of the

60
00:02:47,860 --> 00:02:50,859
secret key so now of course in order to

61
00:02:50,859 --> 00:02:52,720
run the functionality we first have to

62
00:02:52,720 --> 00:02:55,660
run decode but by correctness of the non

63
00:02:55,660 --> 00:02:58,599
Mello block code the input-output

64
00:02:58,599 --> 00:03:01,510
behavior didn't change so what happens

65
00:03:01,510 --> 00:03:03,549
now if someone tampers with the memory

66
00:03:03,549 --> 00:03:07,150
of our device well by definition of non

67
00:03:07,150 --> 00:03:08,760
malleable codes there are three options

68
00:03:08,760 --> 00:03:12,310
either this C prime decodes to the

69
00:03:12,310 --> 00:03:15,069
original secret key and in that case the

70
00:03:15,069 --> 00:03:18,609
tempering was useless so the adversary

71
00:03:18,609 --> 00:03:21,970
didn't learn anything in the second case

72
00:03:21,970 --> 00:03:25,599
the C prime is an invalid code word and

73
00:03:25,599 --> 00:03:28,419
in this case the tempering was detected

74
00:03:28,419 --> 00:03:29,849
and the device which typically

75
00:03:29,849 --> 00:03:32,769
self-destruct and the third option is

76
00:03:32,769 --> 00:03:36,250
that SK prime and SK are unrelated in

77
00:03:36,250 --> 00:03:39,450
which case the input-output behavior

78
00:03:39,450 --> 00:03:42,489
don't reveal any information about the

79
00:03:42,489 --> 00:03:44,620
secret key so this is a very high-level

80
00:03:44,620 --> 00:03:47,799
idea why non malleable codes can protect

81
00:03:47,799 --> 00:03:51,220
against memory temporary so the big

82
00:03:51,220 --> 00:03:54,010
question is against which tempering

83
00:03:54,010 --> 00:03:56,859
algorithms can be protect what about

84
00:03:56,859 --> 00:03:59,949
this tempering Class A can be hoped that

85
00:03:59,949 --> 00:04:02,680
we can protect against all possible or

86
00:04:02,680 --> 00:04:06,669
all efficient algorithms well

87
00:04:06,669 --> 00:04:11,190
unfortunately not and here is attack so

88
00:04:11,190 --> 00:04:14,440
suppose that the tempering function can

89
00:04:14,440 --> 00:04:17,289
decode to learn the original message M

90
00:04:17,289 --> 00:04:20,380
then it changes this message m to some

91
00:04:20,380 --> 00:04:22,870
very related message m Prime for example

92
00:04:22,870 --> 00:04:25,570
flip has one bit and then it can encode

93
00:04:25,570 --> 00:04:29,050
this M prime to obtain C prime so now of

94
00:04:29,050 --> 00:04:30,180
course this time

95
00:04:30,180 --> 00:04:33,640
algorithm managed to temper two code

96
00:04:33,640 --> 00:04:35,680
words C prime which decodes to a related

97
00:04:35,680 --> 00:04:39,220
message and Prime so what the conclusion

98
00:04:39,220 --> 00:04:42,070
of this attack will have to restrict the

99
00:04:42,070 --> 00:04:44,290
tempering algorithms we cannot allowed

100
00:04:44,290 --> 00:04:46,510
all efficient tempering algorithms and

101
00:04:46,510 --> 00:04:48,880
in particular we can never allowed the

102
00:04:48,880 --> 00:04:51,580
tempering function to run both decode

103
00:04:51,580 --> 00:04:57,580
and encode so what are the possible

104
00:04:57,580 --> 00:05:00,160
tempering classes assumed in the

105
00:05:00,160 --> 00:05:02,890
literature we can classify it in two

106
00:05:02,890 --> 00:05:06,190
main groups either granular temporary or

107
00:05:06,190 --> 00:05:08,860
global temporary so what do I mean by

108
00:05:08,860 --> 00:05:12,520
the first category so let's have a look

109
00:05:12,520 --> 00:05:15,280
at this example the granular tempering

110
00:05:15,280 --> 00:05:18,970
says that the tempering functions can

111
00:05:18,970 --> 00:05:22,630
act on individual components of the

112
00:05:22,630 --> 00:05:25,420
codeword so in the in the picture you

113
00:05:25,420 --> 00:05:27,340
see that the code word was split in two

114
00:05:27,340 --> 00:05:30,340
different parts we can temper with both

115
00:05:30,340 --> 00:05:33,340
of these parts but independently so for

116
00:05:33,340 --> 00:05:35,260
people familiar with the topic this was

117
00:05:35,260 --> 00:05:39,820
an example of this late state model what

118
00:05:39,820 --> 00:05:42,910
I want to point out here is that in this

119
00:05:42,910 --> 00:05:44,830
regular tempering the tempering

120
00:05:44,830 --> 00:05:47,410
functions can never run decode because

121
00:05:47,410 --> 00:05:50,170
they don't see the entire code word so

122
00:05:50,170 --> 00:05:51,850
on the other hand in the global

123
00:05:51,850 --> 00:05:54,160
tempering the tempering function sees

124
00:05:54,160 --> 00:05:56,590
the entire code word so now it makes

125
00:05:56,590 --> 00:05:59,170
sense to distinguish if the tempering

126
00:05:59,170 --> 00:06:02,530
function can decode or cannot and all

127
00:06:02,530 --> 00:06:04,840
previous works on non malleable coats

128
00:06:04,840 --> 00:06:08,320
with global tempering do not allow the

129
00:06:08,320 --> 00:06:12,160
tempering function to decode and our

130
00:06:12,160 --> 00:06:15,070
focus is on the second part when we

131
00:06:15,070 --> 00:06:17,290
allow the tempering function to run

132
00:06:17,290 --> 00:06:19,450
decode because there's many natural

133
00:06:19,450 --> 00:06:22,270
tempering scenarios this is in detail

134
00:06:22,270 --> 00:06:24,610
desirable and why is that

135
00:06:24,610 --> 00:06:26,280
let me demonstrate it on the following

136
00:06:26,280 --> 00:06:29,200
example so assume that we have for

137
00:06:29,200 --> 00:06:31,090
example mobile phone or some very

138
00:06:31,090 --> 00:06:33,970
limited device and someone tampers with

139
00:06:33,970 --> 00:06:36,580
this device and now we need to put some

140
00:06:36,580 --> 00:06:39,730
restrictions on this for example virus

141
00:06:39,730 --> 00:06:42,460
that infected our mobile phone so what

142
00:06:42,460 --> 00:06:43,540
are the restriction

143
00:06:43,540 --> 00:06:46,060
well we're a natural restriction would

144
00:06:46,060 --> 00:06:47,320
be to say okay

145
00:06:47,320 --> 00:06:50,230
the virus can use all space and all

146
00:06:50,230 --> 00:06:52,810
resources available on the device but

147
00:06:52,810 --> 00:06:56,740
not more so what would it mean if I say

148
00:06:56,740 --> 00:06:59,170
that the tempering function cannot run

149
00:06:59,170 --> 00:07:01,690
decode in this scenario well that means

150
00:07:01,690 --> 00:07:03,670
that we cannot run decode on the device

151
00:07:03,670 --> 00:07:06,040
itself so we cannot execute the original

152
00:07:06,040 --> 00:07:08,230
functionality which is not what we want

153
00:07:08,230 --> 00:07:10,720
and it's a limitation in this specific

154
00:07:10,720 --> 00:07:14,500
case instead we want to run decode on

155
00:07:14,500 --> 00:07:16,600
the device but that implies that a

156
00:07:16,600 --> 00:07:18,700
tempering function can run decode as

157
00:07:18,700 --> 00:07:23,740
well so this motivates our model where

158
00:07:23,740 --> 00:07:26,860
we assume we were we restrict the

159
00:07:26,860 --> 00:07:28,810
tempering function by space or the

160
00:07:28,810 --> 00:07:31,930
memory of the device so our in other

161
00:07:31,930 --> 00:07:34,600
words our tempering class consists of

162
00:07:34,600 --> 00:07:37,060
all tempering algorithms which are s

163
00:07:37,060 --> 00:07:41,170
space bounded for some parameter s we

164
00:07:41,170 --> 00:07:43,870
want the space complexity of the decode

165
00:07:43,870 --> 00:07:46,390
algorithm to be less or equal than this

166
00:07:46,390 --> 00:07:49,570
s so these two conditions together imply

167
00:07:49,570 --> 00:07:51,760
the time tempering function can decode

168
00:07:51,760 --> 00:07:54,220
and of course we cannot go against the

169
00:07:54,220 --> 00:07:58,090
impossibility result so we we want the

170
00:07:58,090 --> 00:08:01,780
encoding algorithm to require more space

171
00:08:01,780 --> 00:08:06,100
than s so just very worried briefly why

172
00:08:06,100 --> 00:08:07,960
doesn't the trivial attack I showed at

173
00:08:07,960 --> 00:08:10,230
the beginning why doesn't it work well

174
00:08:10,230 --> 00:08:13,270
the tempering algorithm can run decode

175
00:08:13,270 --> 00:08:15,760
it can change it to some related message

176
00:08:15,760 --> 00:08:18,670
and Prime but the third steps fail it

177
00:08:18,670 --> 00:08:20,590
doesn't have enough space to run the

178
00:08:20,590 --> 00:08:24,040
encoding algorithm so that's the main

179
00:08:24,040 --> 00:08:27,610
idea so the rest of my talk will be a

180
00:08:27,610 --> 00:08:30,520
slightly more technical so first of all

181
00:08:30,520 --> 00:08:34,179
I will explain why in this model we

182
00:08:34,179 --> 00:08:36,280
cannot achieve the full non malleability

183
00:08:36,280 --> 00:08:37,929
the classical non malleability

184
00:08:37,929 --> 00:08:42,190
definition and best let us to define a

185
00:08:42,190 --> 00:08:44,140
notion of leaking non malleable codes

186
00:08:44,140 --> 00:08:46,930
and at the end of my talk i will briefly

187
00:08:46,930 --> 00:08:50,830
talk about our code construction so

188
00:08:50,830 --> 00:08:52,690
first of all let me be slightly more

189
00:08:52,690 --> 00:08:55,300
formal and explain

190
00:08:55,300 --> 00:08:58,190
more formally so we have the real world

191
00:08:58,190 --> 00:09:00,620
and the ideal world and in the real

192
00:09:00,620 --> 00:09:02,300
world we have the following tempering

193
00:09:02,300 --> 00:09:05,870
algorithm the message M gets encoded

194
00:09:05,870 --> 00:09:08,650
into a codeword now we apply a tempering

195
00:09:08,650 --> 00:09:12,020
function a and if this tempered code

196
00:09:12,020 --> 00:09:14,960
word C Prime decodes to the original

197
00:09:14,960 --> 00:09:17,990
message M then the tempering experiment

198
00:09:17,990 --> 00:09:20,660
outputs some symbol for example same

199
00:09:20,660 --> 00:09:23,870
otherwise it simply outputs the result

200
00:09:23,870 --> 00:09:26,690
of decoding so this M Prime

201
00:09:26,690 --> 00:09:29,270
so what does the classical definition of

202
00:09:29,270 --> 00:09:32,180
normally be did you say is that for any

203
00:09:32,180 --> 00:09:34,880
tempering front function from this class

204
00:09:34,880 --> 00:09:37,940
there exists a simulator which without

205
00:09:37,940 --> 00:09:40,430
knowing the original message M can

206
00:09:40,430 --> 00:09:44,210
simulate this tempering experiment so

207
00:09:44,210 --> 00:09:47,660
why can we not achieve this full

208
00:09:47,660 --> 00:09:50,690
non-male ability here is an attack so

209
00:09:50,690 --> 00:09:54,290
assume that we have a tempering function

210
00:09:54,290 --> 00:09:56,960
which has hardwired or pre computed two

211
00:09:56,960 --> 00:09:59,410
different code words C 0 and C 1 and

212
00:09:59,410 --> 00:10:02,330
they are encoding of two different

213
00:10:02,330 --> 00:10:05,900
messages and what the tempering function

214
00:10:05,900 --> 00:10:08,810
would do now it can decode to learn the

215
00:10:08,810 --> 00:10:11,660
message M it looks at the last bit of

216
00:10:11,660 --> 00:10:13,940
this message and depending on this last

217
00:10:13,940 --> 00:10:18,310
bit it tempers either to C 0 or to C 1

218
00:10:18,310 --> 00:10:22,400
so in this way exactly one bit of the

219
00:10:22,400 --> 00:10:26,320
original message was leaked so

220
00:10:26,320 --> 00:10:28,910
intuitively why does the simulator does

221
00:10:28,910 --> 00:10:31,310
cannot simulate this tempering game well

222
00:10:31,310 --> 00:10:33,380
it doesn't know the message M so it can

223
00:10:33,380 --> 00:10:38,060
only guess the last bit so this attack

224
00:10:38,060 --> 00:10:41,020
can be actually modified because the

225
00:10:41,020 --> 00:10:43,610
tempering function can have polynomially

226
00:10:43,610 --> 00:10:46,340
many hardwired code words and therefore

227
00:10:46,340 --> 00:10:49,670
it would leak logarithmically many bits

228
00:10:49,670 --> 00:10:53,920
of the original message so this

229
00:10:53,920 --> 00:10:58,180
motivates our likud non mobile code or a

230
00:10:58,180 --> 00:11:01,790
slightly weaker notion so what is the

231
00:11:01,790 --> 00:11:05,340
difference now we allow the simulator to

232
00:11:05,340 --> 00:11:09,000
learn some bits of the message em so in

233
00:11:09,000 --> 00:11:10,800
other words are more formally the

234
00:11:10,800 --> 00:11:13,650
simulator has access to a leakage Oracle

235
00:11:13,650 --> 00:11:18,510
and in total it can lead learn L bits of

236
00:11:18,510 --> 00:11:21,780
the original message M so let me say a

237
00:11:21,780 --> 00:11:25,340
few words about this leaky parameter L

238
00:11:25,340 --> 00:11:28,830
so first of all if L is equal to K which

239
00:11:28,830 --> 00:11:30,390
is the bit length of our original

240
00:11:30,390 --> 00:11:33,060
message then the simulation is trivial

241
00:11:33,060 --> 00:11:35,730
because we can simply leak the entire

242
00:11:35,730 --> 00:11:37,980
message and simulate the tempering

243
00:11:37,980 --> 00:11:39,420
experiment so this is not a very

244
00:11:39,420 --> 00:11:41,940
interesting case on the other hand I

245
00:11:41,940 --> 00:11:45,360
showed on the attack or I try to explain

246
00:11:45,360 --> 00:11:47,460
to you that the Guerette meekley many

247
00:11:47,460 --> 00:11:50,370
bits can always be leaked so this is

248
00:11:50,370 --> 00:11:51,990
this was our goal and we actually

249
00:11:51,990 --> 00:11:54,240
achieved it with our code construction

250
00:11:54,240 --> 00:11:56,450
which I will talk about in a little bit

251
00:11:56,450 --> 00:12:00,720
you might wonder if this leaking notion

252
00:12:00,720 --> 00:12:04,770
of non malleable code still satisfies

253
00:12:04,770 --> 00:12:06,660
for the main application of non

254
00:12:06,660 --> 00:12:08,580
malleable codes can we protect against

255
00:12:08,580 --> 00:12:10,290
memory tempering with leaky non

256
00:12:10,290 --> 00:12:13,920
malleable code and the answer is yes for

257
00:12:13,920 --> 00:12:17,840
some functionalities yes so if the

258
00:12:17,840 --> 00:12:21,390
functionality is resistant against L

259
00:12:21,390 --> 00:12:24,360
bits of leakage on the secret key then

260
00:12:24,360 --> 00:12:27,030
we can protect it with our L leaking non

261
00:12:27,030 --> 00:12:29,190
malleable code so for many applications

262
00:12:29,190 --> 00:12:34,410
it's still good enough so let me now

263
00:12:34,410 --> 00:12:36,900
switch and talk about our code

264
00:12:36,900 --> 00:12:39,210
construction and the main building

265
00:12:39,210 --> 00:12:41,880
blocks and why we actually satisfy the

266
00:12:41,880 --> 00:12:45,690
leaky non malleability so the main

267
00:12:45,690 --> 00:12:48,480
building block of our code construction

268
00:12:48,480 --> 00:12:51,750
is non interactive proof of space so

269
00:12:51,750 --> 00:12:53,760
there have been several works on proof

270
00:12:53,760 --> 00:12:55,950
of space or the non interactive or ient

271
00:12:55,950 --> 00:12:58,320
of it all of them are in the random

272
00:12:58,320 --> 00:13:01,710
Oracle model and based on broth

273
00:13:01,710 --> 00:13:04,980
babbling graph labeling techniques so

274
00:13:04,980 --> 00:13:06,990
what's the main idea I don't want to

275
00:13:06,990 --> 00:13:08,790
talk too much in detail about non

276
00:13:08,790 --> 00:13:10,500
interactive proof of space but what's

277
00:13:10,500 --> 00:13:14,040
the main idea of it so we have a party

278
00:13:14,040 --> 00:13:18,030
prover which has it's supposed to have a

279
00:13:18,030 --> 00:13:19,050
lot of space

280
00:13:19,050 --> 00:13:21,600
and interns to convinced a space bounded

281
00:13:21,600 --> 00:13:24,180
verifier that he indeed has a lot of

282
00:13:24,180 --> 00:13:27,330
space so how does he do it on challenge

283
00:13:27,330 --> 00:13:30,740
m he generates a proof and this

284
00:13:30,740 --> 00:13:33,420
generation of the proof requires a lot

285
00:13:33,420 --> 00:13:36,209
of space and it sends this proof to the

286
00:13:36,209 --> 00:13:39,690
verifier and now the space bounded very

287
00:13:39,690 --> 00:13:42,690
fire is able to verify if the prover

288
00:13:42,690 --> 00:13:45,390
indeed had a lot of space or not so the

289
00:13:45,390 --> 00:13:47,519
first property i just said is the

290
00:13:47,519 --> 00:13:49,529
efficient verification efficient in

291
00:13:49,529 --> 00:13:51,930
terms of space and the second property

292
00:13:51,930 --> 00:13:55,140
is completeness if both parties behave

293
00:13:55,140 --> 00:13:57,690
honestly then the very fires should be

294
00:13:57,690 --> 00:14:00,480
convinced and the third property is

295
00:14:00,480 --> 00:14:03,750
soundness which means that if the prover

296
00:14:03,750 --> 00:14:06,839
doesn't have enough space and cheats

297
00:14:06,839 --> 00:14:09,089
then the verifier with high probability

298
00:14:09,089 --> 00:14:14,040
is not convinced actually for our non

299
00:14:14,040 --> 00:14:16,730
malleable code we need slightly stronger

300
00:14:16,730 --> 00:14:19,769
stronger definition than South Ness it's

301
00:14:19,769 --> 00:14:21,750
a special form of soundest which we call

302
00:14:21,750 --> 00:14:25,020
extract ability I will refer to our

303
00:14:25,020 --> 00:14:27,360
paper for more details about extract

304
00:14:27,360 --> 00:14:30,240
ability and also for the proof that the

305
00:14:30,240 --> 00:14:32,820
construction of renin Devadas actually

306
00:14:32,820 --> 00:14:36,440
satisfy our extract ability definition

307
00:14:36,440 --> 00:14:40,050
so how do we now build a non malleable

308
00:14:40,050 --> 00:14:42,720
code from non interactive proof of space

309
00:14:42,720 --> 00:14:46,529
it's actually very simple the encoding

310
00:14:46,529 --> 00:14:50,540
algorithm gets us input a message m and

311
00:14:50,540 --> 00:14:55,020
runs the prover runs the proof algorithm

312
00:14:55,020 --> 00:14:57,360
to generate a proof of space this step

313
00:14:57,360 --> 00:15:00,750
requires a lot of space and now it

314
00:15:00,750 --> 00:15:04,079
outputs the message in plain text and

315
00:15:04,079 --> 00:15:07,170
attach the proof of space to it and how

316
00:15:07,170 --> 00:15:10,020
does the decoding algorithm work well it

317
00:15:10,020 --> 00:15:12,779
first parses the code word into a

318
00:15:12,779 --> 00:15:15,540
message and a proof of space and it runs

319
00:15:15,540 --> 00:15:18,000
the verification algorithm and if the

320
00:15:18,000 --> 00:15:20,430
verification algorithm says 1 then it

321
00:15:20,430 --> 00:15:22,860
simply outputs the message m otherwise

322
00:15:22,860 --> 00:15:27,750
it claims that it's invalid message so

323
00:15:27,750 --> 00:15:30,779
what we print the the main theorem of

324
00:15:30,779 --> 00:15:31,690
our

325
00:15:31,690 --> 00:15:35,490
is that if we have for some parameter as

326
00:15:35,490 --> 00:15:38,110
non-interactive proof of space then this

327
00:15:38,110 --> 00:15:39,520
construction that I just briefly

328
00:15:39,520 --> 00:15:42,790
explained is leaked in non malleable

329
00:15:42,790 --> 00:15:45,880
code with respect to all s space bounded

330
00:15:45,880 --> 00:15:49,750
algorithms so and I would like to

331
00:15:49,750 --> 00:15:51,790
emphasize that our construction is in

332
00:15:51,790 --> 00:15:55,540
the random Oracle model so what's the

333
00:15:55,540 --> 00:15:59,170
idea of our proof so first of all

334
00:15:59,170 --> 00:16:01,090
correctness of the scheme follows

335
00:16:01,090 --> 00:16:03,280
directly from the completeness of non

336
00:16:03,280 --> 00:16:05,440
interactive proof of space and the

337
00:16:05,440 --> 00:16:07,870
second part is more interesting non

338
00:16:07,870 --> 00:16:10,360
malleability so let me recall what we

339
00:16:10,360 --> 00:16:12,160
actually need to prove we need to prove

340
00:16:12,160 --> 00:16:15,130
that every for every s space bounded

341
00:16:15,130 --> 00:16:17,500
tempurung algorithm there exists a

342
00:16:17,500 --> 00:16:19,900
simulator which can simulate the

343
00:16:19,900 --> 00:16:21,820
tempering experiment with only

344
00:16:21,820 --> 00:16:23,890
logarithmically many bits of leakage on

345
00:16:23,890 --> 00:16:27,970
the original message so there are three

346
00:16:27,970 --> 00:16:30,490
options how this tempering function can

347
00:16:30,490 --> 00:16:33,040
actually temper either it tempers to a

348
00:16:33,040 --> 00:16:35,320
code word with decodes to the original

349
00:16:35,320 --> 00:16:37,930
message m or it's in a valid code word

350
00:16:37,930 --> 00:16:40,150
and the third option that it's some

351
00:16:40,150 --> 00:16:43,270
different decodes to some different

352
00:16:43,270 --> 00:16:45,940
message m Prime so let me discuss just a

353
00:16:45,940 --> 00:16:48,130
third case which is the most interesting

354
00:16:48,130 --> 00:16:52,990
case so what does it mean that a space

355
00:16:52,990 --> 00:16:55,900
bounded tempering algorithm tempers to

356
00:16:55,900 --> 00:16:59,110
such a code word C prime that means by

357
00:16:59,110 --> 00:17:00,700
the construction that he needs to know

358
00:17:00,700 --> 00:17:04,480
the proof of space and he needs to know

359
00:17:04,480 --> 00:17:06,939
a proof of space that verifies with this

360
00:17:06,939 --> 00:17:09,670
message m Prime 2 1 and how can he know

361
00:17:09,670 --> 00:17:11,650
it there are free options he can guess

362
00:17:11,650 --> 00:17:14,199
it he can always try to guess he can

363
00:17:14,199 --> 00:17:16,869
compute this proof of space or it can

364
00:17:16,869 --> 00:17:19,359
have it pre computed or hardwired in its

365
00:17:19,359 --> 00:17:21,760
code so first of all the third the

366
00:17:21,760 --> 00:17:23,770
second option is not possible because of

367
00:17:23,770 --> 00:17:26,439
the proof of space that's the key idea

368
00:17:26,439 --> 00:17:28,930
it doesn't have enough space to compute

369
00:17:28,930 --> 00:17:31,570
it he can always guess but he will be

370
00:17:31,570 --> 00:17:33,420
correct only with negligible probability

371
00:17:33,420 --> 00:17:37,180
so let me demonstrate how we build a

372
00:17:37,180 --> 00:17:42,970
simulator for this third case so the

373
00:17:42,970 --> 00:17:45,130
tempering algorithm had

374
00:17:45,130 --> 00:17:47,560
can have polynomially many hardwired

375
00:17:47,560 --> 00:17:51,250
code words as I said few slides ago and

376
00:17:51,250 --> 00:17:53,740
now by extract ability of the non

377
00:17:53,740 --> 00:17:56,410
interactive proof of space we can create

378
00:17:56,410 --> 00:18:00,460
a table that contains all messages so

379
00:18:00,460 --> 00:18:02,770
this step requires some technical

380
00:18:02,770 --> 00:18:04,960
arguments which I would like to refer to

381
00:18:04,960 --> 00:18:07,450
our paper for more details but I would

382
00:18:07,450 --> 00:18:09,490
like to give you a high-level idea how

383
00:18:09,490 --> 00:18:12,550
the proof works so we can extract a

384
00:18:12,550 --> 00:18:15,190
table of all these hard-wired messages

385
00:18:15,190 --> 00:18:19,270
so what the simulator does it asks the

386
00:18:19,270 --> 00:18:22,300
leakage Oracle the following function it

387
00:18:22,300 --> 00:18:25,570
first simulates the tempering algorithm

388
00:18:25,570 --> 00:18:28,540
to learn M Prime then it looks into this

389
00:18:28,540 --> 00:18:31,980
table and search where this M prime is

390
00:18:31,980 --> 00:18:35,140
finds the index of the in the table and

391
00:18:35,140 --> 00:18:38,080
then leaks the binary representation of

392
00:18:38,080 --> 00:18:41,140
the index so it essentially leaks the

393
00:18:41,140 --> 00:18:44,500
index in the table now the simulator can

394
00:18:44,500 --> 00:18:48,180
look in the table find this M Prime

395
00:18:48,180 --> 00:18:51,370
reconstructed and I'll have this as its

396
00:18:51,370 --> 00:18:54,100
output and the simulation was correct in

397
00:18:54,100 --> 00:18:58,950
this case our proof can we very easily

398
00:18:58,950 --> 00:19:01,090
extend that this was a very high-level

399
00:19:01,090 --> 00:19:04,330
idea to repeat it tempering adaptive

400
00:19:04,330 --> 00:19:07,540
repeated temporary not just one-time

401
00:19:07,540 --> 00:19:10,030
tempering as I was explaining during my

402
00:19:10,030 --> 00:19:14,800
talk so then we achieve a trade-off

403
00:19:14,800 --> 00:19:18,520
between a number of tempering rounds and

404
00:19:18,520 --> 00:19:21,340
the leakage so for every tempering round

405
00:19:21,340 --> 00:19:23,800
we need logarithmically many bits of

406
00:19:23,800 --> 00:19:28,090
leakage so let me quickly summarize my

407
00:19:28,090 --> 00:19:32,670
table so first of all we consider global

408
00:19:32,670 --> 00:19:36,640
tempering where the only constraint or

409
00:19:36,640 --> 00:19:39,280
only restriction we put on the tempering

410
00:19:39,280 --> 00:19:44,350
algorithms is the space they are allowed

411
00:19:44,350 --> 00:19:46,210
to have so there are a space bound that

412
00:19:46,210 --> 00:19:48,640
we show the impossibility in this model

413
00:19:48,640 --> 00:19:51,000
to achieve the full nan malleability

414
00:19:51,000 --> 00:19:54,220
therefore we introduce the leak in nan

415
00:19:54,220 --> 00:19:56,200
malleable codes and we show a very

416
00:19:56,200 --> 00:19:58,540
simple construction which is based on

417
00:19:58,540 --> 00:20:00,650
non-interactive proof of space and

418
00:20:00,650 --> 00:20:03,620
finally we also show that for many

419
00:20:03,620 --> 00:20:06,350
applications is still can protect

420
00:20:06,350 --> 00:20:10,220
against memory temporary so this is all

421
00:20:10,220 --> 00:20:12,320
thank you very much for your attention

422
00:20:12,320 --> 00:20:19,480
[Applause]

