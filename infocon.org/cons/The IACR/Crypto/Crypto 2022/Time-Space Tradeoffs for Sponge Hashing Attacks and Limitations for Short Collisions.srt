1
00:00:00,960 --> 00:00:02,639
hi i am

2
00:00:02,639 --> 00:00:04,400
this is joint work with cody freytag and

3
00:00:04,400 --> 00:00:07,279
elance very broadly this work is about

4
00:00:07,279 --> 00:00:08,559
new pre-progressing attacks and

5
00:00:08,559 --> 00:00:10,240
limitations for short collisions in the

6
00:00:10,240 --> 00:00:11,840
spawn construction

7
00:00:11,840 --> 00:00:13,200
hash functions are one of the

8
00:00:13,200 --> 00:00:14,799
fundamental primitives of cryptography

9
00:00:14,799 --> 00:00:16,800
that have many different applications

10
00:00:16,800 --> 00:00:18,400
certain applications like password

11
00:00:18,400 --> 00:00:20,560
hashing etc require a hash function to

12
00:00:20,560 --> 00:00:22,880
handle different input lengths however

13
00:00:22,880 --> 00:00:24,880
it is infeasible to design a different

14
00:00:24,880 --> 00:00:27,039
hash function for every length

15
00:00:27,039 --> 00:00:29,039
hence iterative hashing is used to

16
00:00:29,039 --> 00:00:30,800
construct variable input length hash

17
00:00:30,800 --> 00:00:33,040
function using fixed input length

18
00:00:33,040 --> 00:00:34,079
primitives

19
00:00:34,079 --> 00:00:35,600
the most popular example being the

20
00:00:35,600 --> 00:00:37,680
merkle dam guard construction

21
00:00:37,680 --> 00:00:39,920
after some proposed attacks against md5

22
00:00:39,920 --> 00:00:42,320
and char 0 in 2006 nish started a

23
00:00:42,320 --> 00:00:44,000
competition to standardize a new hash

24
00:00:44,000 --> 00:00:46,719
construction and after almost a decade

25
00:00:46,719 --> 00:00:49,039
cachack immerses the winner the ketchup

26
00:00:49,039 --> 00:00:50,800
family is based on the sponge

27
00:00:50,800 --> 00:00:52,079
construction which is a noble

28
00:00:52,079 --> 00:00:55,039
alternative to the merkle dumbbells

29
00:00:55,039 --> 00:00:56,640
here's a very simplified view of how

30
00:00:56,640 --> 00:00:58,559
sponge hashing works

31
00:00:58,559 --> 00:01:00,079
the fundamental primitive and the sponge

32
00:01:00,079 --> 00:01:02,160
construction is a permutation pie on r

33
00:01:02,160 --> 00:01:04,959
plus c bits uh message m is broken up

34
00:01:04,959 --> 00:01:06,880
into blocks of r bits after padding

35
00:01:06,880 --> 00:01:09,520
appropriately the hash of m with respect

36
00:01:09,520 --> 00:01:11,360
to the hash key or the initialization

37
00:01:11,360 --> 00:01:13,760
vector ib is computed as follows

38
00:01:13,760 --> 00:01:16,320
and initial state consisting of r zeros

39
00:01:16,320 --> 00:01:18,720
concatenated with iv is defined

40
00:01:18,720 --> 00:01:20,560
the first message block is exert to the

41
00:01:20,560 --> 00:01:22,240
first orbits of the state and the

42
00:01:22,240 --> 00:01:24,240
permutation is applied to it in order to

43
00:01:24,240 --> 00:01:26,479
compute the next state this is done till

44
00:01:26,479 --> 00:01:28,479
all the message blocks are consumed and

45
00:01:28,479 --> 00:01:30,560
the first r bits of the final state is

46
00:01:30,560 --> 00:01:33,040
the hash out

47
00:01:33,040 --> 00:01:34,960
one of the most basic properties that

48
00:01:34,960 --> 00:01:36,640
any hash function should satisfy is

49
00:01:36,640 --> 00:01:38,320
collision resistance

50
00:01:38,320 --> 00:01:41,119
it requires that given a random iv it is

51
00:01:41,119 --> 00:01:42,720
hard to find two different messages that

52
00:01:42,720 --> 00:01:45,040
hash to the same value

53
00:01:45,040 --> 00:01:46,880
ah we are interested in quantifying

54
00:01:46,880 --> 00:01:48,240
pollution resistance of the sponge

55
00:01:48,240 --> 00:01:49,920
construction and the usual approach is

56
00:01:49,920 --> 00:01:51,200
to model the

57
00:01:51,200 --> 00:01:53,520
model pi as a random permutation

58
00:01:53,520 --> 00:01:55,520
ah one can show that when pi is a random

59
00:01:55,520 --> 00:01:56,960
permutation there is an attack that

60
00:01:56,960 --> 00:01:58,880
finds pollution using a minimum of two

61
00:01:58,880 --> 00:02:00,719
power c by two and two power by two

62
00:02:00,719 --> 00:02:03,119
queries and in fact this proof attack is

63
00:02:03,119 --> 00:02:04,640
probably optimal

64
00:02:04,640 --> 00:02:06,799
however in the real world since pi is

65
00:02:06,799 --> 00:02:09,199
typically public an adversary can do

66
00:02:09,199 --> 00:02:11,440
pre-processing on it and it might make

67
00:02:11,440 --> 00:02:13,840
its job of finding collisions easier uh

68
00:02:13,840 --> 00:02:15,520
the scenario of pre-browsing attacks are

69
00:02:15,520 --> 00:02:17,280
first i read in several different works

70
00:02:17,280 --> 00:02:18,720
for example in the context of function

71
00:02:18,720 --> 00:02:21,599
inversion collision resistance

72
00:02:21,599 --> 00:02:23,280
currently at all introduce the auxiliary

73
00:02:23,280 --> 00:02:24,800
input random permutation model to

74
00:02:24,800 --> 00:02:26,319
capture pre-pressing adversaries in the

75
00:02:26,319 --> 00:02:28,640
context of random permutations uh here

76
00:02:28,640 --> 00:02:30,080
is how pollution resistance game is

77
00:02:30,080 --> 00:02:32,000
defined in this model diversity a

78
00:02:32,000 --> 00:02:34,560
consists of two stages a one and a two

79
00:02:34,560 --> 00:02:36,959
ah the first stage a one is unbounded

80
00:02:36,959 --> 00:02:38,080
and has complete access to the

81
00:02:38,080 --> 00:02:39,360
permutation pi

82
00:02:39,360 --> 00:02:41,120
uh it computes as bits of preprocessing

83
00:02:41,120 --> 00:02:42,959
which is input to the online phase along

84
00:02:42,959 --> 00:02:44,640
with the random id

85
00:02:44,640 --> 00:02:46,319
the online phase can make t queries to

86
00:02:46,319 --> 00:02:48,640
the permutation and it's inverse

87
00:02:48,640 --> 00:02:50,959
the adversary wins if the online phase

88
00:02:50,959 --> 00:02:52,800
outputs a pair of distinct messages that

89
00:02:52,800 --> 00:02:54,400
hash to the same up

90
00:02:54,400 --> 00:02:56,480
uh we refer to such an adversary a as an

91
00:02:56,480 --> 00:02:58,959
sd adversary and we define the advantage

92
00:02:58,959 --> 00:03:01,040
parameters by st as the maximum

93
00:03:01,040 --> 00:03:02,879
probability of an sd adversary winning

94
00:03:02,879 --> 00:03:06,080
this game uh quality at all gave a tight

95
00:03:06,080 --> 00:03:08,400
characterization of this advantage

96
00:03:08,400 --> 00:03:11,200
however the attack that they propose

97
00:03:11,200 --> 00:03:12,959
which achieves disadvantage finds

98
00:03:12,959 --> 00:03:15,360
positions of length nearly t

99
00:03:15,360 --> 00:03:18,319
ah for usual parameter values collisions

100
00:03:18,319 --> 00:03:20,480
this long are not very useful

101
00:03:20,480 --> 00:03:22,480
in addition short collisions seem harder

102
00:03:22,480 --> 00:03:24,879
to find the longer ones hence we ask the

103
00:03:24,879 --> 00:03:26,400
question can we characterize the

104
00:03:26,400 --> 00:03:28,159
hardness of finding b block collisions

105
00:03:28,159 --> 00:03:30,959
for sponge in a series of recent works

106
00:03:30,959 --> 00:03:32,480
this question has been studied for

107
00:03:32,480 --> 00:03:33,920
merkel lambda

108
00:03:33,920 --> 00:03:36,080
in this work we give new attacks and

109
00:03:36,080 --> 00:03:37,760
prove limitations for finding b block

110
00:03:37,760 --> 00:03:39,920
positions for the sponge construction

111
00:03:39,920 --> 00:03:41,519
uh here's a very brief summary of our

112
00:03:41,519 --> 00:03:44,319
results we give new at a new attack for

113
00:03:44,319 --> 00:03:45,760
finding one block position for the

114
00:03:45,760 --> 00:03:47,920
sponge construction that leverages the

115
00:03:47,920 --> 00:03:49,519
fact that the adversary can make inverse

116
00:03:49,519 --> 00:03:50,560
queries

117
00:03:50,560 --> 00:03:52,560
we also give an attack for other values

118
00:03:52,560 --> 00:03:55,120
of b which is inspired by input tables

119
00:03:55,120 --> 00:03:56,959
we prove limitations for best possible

120
00:03:56,959 --> 00:03:59,360
attacks for b equals 1 and 2 using

121
00:03:59,360 --> 00:04:01,439
different techniques ah for both b

122
00:04:01,439 --> 00:04:03,760
equals 1 and 2 our bounds are not tight

123
00:04:03,760 --> 00:04:05,120
which gives rise to several open

124
00:04:05,120 --> 00:04:07,680
problems the two main takeaways of our

125
00:04:07,680 --> 00:04:09,920
work are first the inverse queries are

126
00:04:09,920 --> 00:04:11,840
useful in sponge

127
00:04:11,840 --> 00:04:14,480
to give new and better attacks uh

128
00:04:14,480 --> 00:04:16,478
secondly shorter collisions are probably

129
00:04:16,478 --> 00:04:18,238
harder to find the longer ones for the

130
00:04:18,238 --> 00:04:20,320
sponge construction just like merkel

131
00:04:20,320 --> 00:04:23,840
denmark uh for more details i invite you

132
00:04:23,840 --> 00:04:26,000
to our longer talk during crypto and

133
00:04:26,000 --> 00:04:27,280
refer you to the full version of our

134
00:04:27,280 --> 00:04:31,719
paper on youtube thank you

