1
00:00:00,640 --> 00:00:01,439
hi

2
00:00:01,439 --> 00:00:03,520
i'm viktor kolovov and today i'm going

3
00:00:03,520 --> 00:00:05,600
to talk to you about programmable

4
00:00:05,600 --> 00:00:07,520
distributed weight functions

5
00:00:07,520 --> 00:00:09,599
uh this is the joint work with elite boy

6
00:00:09,599 --> 00:00:12,160
nib bilbo and diwali shy

7
00:00:12,160 --> 00:00:14,639
so first the point functions are just

8
00:00:14,639 --> 00:00:17,119
functions which can be non-zero on only

9
00:00:17,119 --> 00:00:19,359
one special point and zero everywhere

10
00:00:19,359 --> 00:00:20,240
else

11
00:00:20,240 --> 00:00:22,240
and the dpf allows the sticker share a

12
00:00:22,240 --> 00:00:24,640
point function between two servers in

13
00:00:24,640 --> 00:00:26,720
the in a way that allows

14
00:00:26,720 --> 00:00:28,840
for the servers to perform distributed

15
00:00:28,840 --> 00:00:33,279
evaluation uh such that

16
00:00:33,280 --> 00:00:35,360
it is possible to add the output shares

17
00:00:35,360 --> 00:00:38,000
of the servers to recover

18
00:00:38,000 --> 00:00:38,800
the

19
00:00:38,800 --> 00:00:42,079
evaluation of the point function

20
00:00:42,079 --> 00:00:44,559
now this primitive can be trivially

21
00:00:44,559 --> 00:00:46,719
achieved with linear key size by just

22
00:00:46,719 --> 00:00:48,399
secret sharing the truth table of the

23
00:00:48,399 --> 00:00:50,079
point function

24
00:00:50,079 --> 00:00:51,280
and

25
00:00:51,280 --> 00:00:53,199
assuming one-way functions this can be

26
00:00:53,199 --> 00:00:55,440
dramatically improved using a ggm

27
00:00:55,440 --> 00:00:57,199
electric construction

28
00:00:57,199 --> 00:01:00,879
uh yielding a scheme with a logarithmic

29
00:01:00,879 --> 00:01:01,920
key length

30
00:01:01,920 --> 00:01:03,440
and actually

31
00:01:03,440 --> 00:01:05,280
this construction is also tight in the

32
00:01:05,280 --> 00:01:07,040
sense that dpf

33
00:01:07,040 --> 00:01:09,280
270 implies

34
00:01:09,280 --> 00:01:11,760
one-way functions

35
00:01:11,760 --> 00:01:12,799
now

36
00:01:12,799 --> 00:01:15,600
solutions to some problems that dbf

37
00:01:15,600 --> 00:01:18,000
solves in the two-server setting seem to

38
00:01:18,000 --> 00:01:20,720
require a public key cryptography in the

39
00:01:20,720 --> 00:01:22,960
one-sample setting and this is something

40
00:01:22,960 --> 00:01:24,080
which we

41
00:01:24,080 --> 00:01:27,520
wanted to avoid in this work so

42
00:01:27,520 --> 00:01:29,759
hence we consider the next best

43
00:01:29,759 --> 00:01:31,200
alternative

44
00:01:31,200 --> 00:01:33,520
which is a form of one point five seven

45
00:01:33,520 --> 00:01:35,680
dpf which will repel two is programmable

46
00:01:35,680 --> 00:01:38,640
dpf of pdpf for short

47
00:01:38,640 --> 00:01:40,880
uh and it is essentially the same as a

48
00:01:40,880 --> 00:01:43,040
dpf except that the first key which will

49
00:01:43,040 --> 00:01:45,360
refer to also as the offline key is just

50
00:01:45,360 --> 00:01:47,119
a short random c

51
00:01:47,119 --> 00:01:50,240
and hence can be generated

52
00:01:50,240 --> 00:01:53,840
independently of the point function

53
00:01:53,840 --> 00:01:55,280
fact this notion implies an even

54
00:01:55,280 --> 00:01:57,920
stronger notion of reusable dpf where

55
00:01:57,920 --> 00:01:58,640
the

56
00:01:58,640 --> 00:02:00,880
offline key or the run this shorter

57
00:02:00,880 --> 00:02:02,799
conducts it can be used over multiple

58
00:02:02,799 --> 00:02:04,399
instances

59
00:02:04,399 --> 00:02:05,520
and

60
00:02:05,520 --> 00:02:09,440
as with dpf pdpf's also admit a trivial

61
00:02:09,440 --> 00:02:11,680
solution with linear key size by just

62
00:02:11,680 --> 00:02:13,840
having the open key be a plf key and

63
00:02:13,840 --> 00:02:17,200
having the online key correct that

64
00:02:17,200 --> 00:02:19,760
now regarding pdpf applications

65
00:02:19,760 --> 00:02:23,200
pdpfs imply privately punctual prfs over

66
00:02:23,200 --> 00:02:24,560
a small domain

67
00:02:24,560 --> 00:02:25,360
and

68
00:02:25,360 --> 00:02:27,280
these were

69
00:02:27,280 --> 00:02:28,560
privately functional pairs were

70
00:02:28,560 --> 00:02:30,640
previously constructed only from very

71
00:02:30,640 --> 00:02:33,680
cryptographic assumptions but here

72
00:02:33,680 --> 00:02:35,840
adding the small domain assumptions the

73
00:02:35,840 --> 00:02:37,760
assumption gives us construction from

74
00:02:37,760 --> 00:02:39,440
one-way function

75
00:02:39,440 --> 00:02:42,000
pdp is also useful in the 1.5 server

76
00:02:42,000 --> 00:02:43,519
setting where a single message is sent

77
00:02:43,519 --> 00:02:45,760
from the client to one of the servers

78
00:02:45,760 --> 00:02:47,200
and

79
00:02:47,200 --> 00:02:49,920
they are also useful for compressing dpn

80
00:02:49,920 --> 00:02:52,000
correlations which are useful for

81
00:02:52,000 --> 00:02:54,400
communication efficient mpc this is in

82
00:02:54,400 --> 00:02:56,160
the so called the trusted appliance

83
00:02:56,160 --> 00:02:58,560
setting where eyes secret shares have

84
00:02:58,560 --> 00:03:00,480
secret between yourself and both and

85
00:03:00,480 --> 00:03:03,440
then forgets about it

86
00:03:03,440 --> 00:03:04,959
in this way

87
00:03:04,959 --> 00:03:06,879
pdbf gives

88
00:03:06,879 --> 00:03:10,480
a way to compress many dpf collections

89
00:03:10,480 --> 00:03:12,720
instead of having to distribute the key

90
00:03:12,720 --> 00:03:16,800
generation protocol of dpf

91
00:03:16,840 --> 00:03:19,120
uh our construction is inspired by the

92
00:03:19,120 --> 00:03:21,760
punctuable set uh sets due to the work

93
00:03:21,760 --> 00:03:23,920
of korean gifts and corgan

94
00:03:23,920 --> 00:03:26,560
uh so suppose we throw a

95
00:03:26,560 --> 00:03:29,120
balls into beans and the end beans the

96
00:03:29,120 --> 00:03:31,440
same as the domain size and we count how

97
00:03:31,440 --> 00:03:33,519
many balls we have in each bin

98
00:03:33,519 --> 00:03:35,680
and this gives us the histogram and this

99
00:03:35,680 --> 00:03:38,080
histogram corresponds to the

100
00:03:38,080 --> 00:03:40,879
truth table of the offline function

101
00:03:40,879 --> 00:03:43,519
share this we give to alice to the first

102
00:03:43,519 --> 00:03:45,280
party

103
00:03:45,280 --> 00:03:48,799
to generate the online key we remove

104
00:03:48,799 --> 00:03:50,400
one

105
00:03:50,400 --> 00:03:52,879
ball from one of the bins the bin with

106
00:03:52,879 --> 00:03:55,439
index alpha and give it give this

107
00:03:55,439 --> 00:03:58,159
histogram to the second party now note

108
00:03:58,159 --> 00:04:00,000
that the difference between these two

109
00:04:00,000 --> 00:04:02,239
histograms gives us the dpf over the

110
00:04:02,239 --> 00:04:03,680
integers

111
00:04:03,680 --> 00:04:05,680
and in this work we show that these

112
00:04:05,680 --> 00:04:08,239
histograms can be compressed using uh

113
00:04:08,239 --> 00:04:11,040
privately controlled graphs uh

114
00:04:11,040 --> 00:04:14,000
this is in some sense in

115
00:04:14,000 --> 00:04:16,238
similar manner to how cultural sets can

116
00:04:16,238 --> 00:04:19,440
be compressed using punishable prx

117
00:04:19,440 --> 00:04:21,600
moving on to our results

118
00:04:21,600 --> 00:04:23,120
we showed that assuming the one way

119
00:04:23,120 --> 00:04:25,600
functions there is a pdpf of some linear

120
00:04:25,600 --> 00:04:26,720
key size

121
00:04:26,720 --> 00:04:28,479
such as the running time

122
00:04:28,479 --> 00:04:30,800
of german dival which is evaluation over

123
00:04:30,800 --> 00:04:33,199
the entire domain

124
00:04:33,199 --> 00:04:35,600
is polynomial in the domain size

125
00:04:35,600 --> 00:04:37,440
uh note that we we do not get an

126
00:04:37,440 --> 00:04:39,040
evaluation algorithm for a single point

127
00:04:39,040 --> 00:04:41,600
directly only to evaluate but for many

128
00:04:41,600 --> 00:04:43,840
applications such as pil private writing

129
00:04:43,840 --> 00:04:46,320
and pcgs this is sufficient also as an

130
00:04:46,320 --> 00:04:48,639
application we construct a standard or

131
00:04:48,639 --> 00:04:51,360
non programmable vpn with constant

132
00:04:51,360 --> 00:04:53,520
around the

133
00:04:53,520 --> 00:04:55,440
distributed general protocol which only

134
00:04:55,440 --> 00:04:57,840
makes black box used for prg and this

135
00:04:57,840 --> 00:04:59,840
imposes about the all organelles what we

136
00:04:59,840 --> 00:05:02,320
call a donor and

137
00:05:02,320 --> 00:05:03,759
and now in the full version of the talk

138
00:05:03,759 --> 00:05:05,680
we'll also discuss the virus

139
00:05:05,680 --> 00:05:07,440
simplification for monopoly to

140
00:05:07,440 --> 00:05:10,560
negligible in more detail and we discuss

141
00:05:10,560 --> 00:05:12,400
the distributed general protocol

142
00:05:12,400 --> 00:05:14,320
and the complete efficiency of our

143
00:05:14,320 --> 00:05:16,720
construction and optimizations so this

144
00:05:16,720 --> 00:05:19,759
is all i think

