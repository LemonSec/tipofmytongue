1
00:00:00,240 --> 00:00:02,960
hello my name is lakaya tyner and i am

2
00:00:02,960 --> 00:00:04,720
presenting nearly optimal property

3
00:00:04,720 --> 00:00:06,720
preserving caching

4
00:00:06,720 --> 00:00:09,280
this is joint work with justin homegroom

5
00:00:09,280 --> 00:00:13,120
ming hao lu and daniel wicks

6
00:00:13,440 --> 00:00:15,839
let's begin by defining a property

7
00:00:15,839 --> 00:00:18,880
preserving hash function

8
00:00:19,039 --> 00:00:21,119
we have this hash function h

9
00:00:21,119 --> 00:00:25,359
which takes as input some input string x

10
00:00:25,359 --> 00:00:28,000
and outputs a compressed inbit string h

11
00:00:28,000 --> 00:00:31,160
of x

12
00:00:31,359 --> 00:00:34,640
we can consider some binary property p

13
00:00:34,640 --> 00:00:36,320
which is equal to zero if the property

14
00:00:36,320 --> 00:00:38,160
does not hold and one if the property

15
00:00:38,160 --> 00:00:39,680
holds

16
00:00:39,680 --> 00:00:41,520
and we say that h is a property

17
00:00:41,520 --> 00:00:43,360
preserving hash function

18
00:00:43,360 --> 00:00:45,680
for the property p

19
00:00:45,680 --> 00:00:46,559
if

20
00:00:46,559 --> 00:00:49,280
given h of x and h of y

21
00:00:49,280 --> 00:00:51,520
we're able to determine if p of x y

22
00:00:51,520 --> 00:00:53,840
holds

23
00:00:55,440 --> 00:00:57,360
now in nmn property preserving hash

24
00:00:57,360 --> 00:00:58,399
family

25
00:00:58,399 --> 00:01:00,640
for some predicate p

26
00:01:00,640 --> 00:01:04,879
consists of a family of hash functions h

27
00:01:04,879 --> 00:01:08,080
and the following algorithms

28
00:01:08,080 --> 00:01:09,600
we have samp

29
00:01:09,600 --> 00:01:11,600
which samples one hash function from the

30
00:01:11,600 --> 00:01:13,680
hash family

31
00:01:13,680 --> 00:01:16,240
an eval which takes as input a

32
00:01:16,240 --> 00:01:18,080
description of h

33
00:01:18,080 --> 00:01:20,240
h of x and h of y

34
00:01:20,240 --> 00:01:23,759
and outputs 0 or 1.

35
00:01:24,240 --> 00:01:27,439
we also have the following properties

36
00:01:27,439 --> 00:01:28,960
for correctness

37
00:01:28,960 --> 00:01:32,000
we have that for every x y

38
00:01:32,000 --> 00:01:34,320
the probability that eval outputs

39
00:01:34,320 --> 00:01:36,640
something different than p of x y

40
00:01:36,640 --> 00:01:39,439
is negligible

41
00:01:39,840 --> 00:01:41,600
if we want robustness

42
00:01:41,600 --> 00:01:44,479
we must also also satisfy this next

43
00:01:44,479 --> 00:01:45,520
property

44
00:01:45,520 --> 00:01:47,759
which says that for every ppt algorithm

45
00:01:47,759 --> 00:01:49,840
a

46
00:01:49,840 --> 00:01:52,960
correctness still holds even when a who

47
00:01:52,960 --> 00:01:54,720
has seen a description of our hash

48
00:01:54,720 --> 00:01:55,759
function

49
00:01:55,759 --> 00:01:59,280
is able to choose x and y

50
00:02:00,960 --> 00:02:02,880
so why do we care about studying

51
00:02:02,880 --> 00:02:06,079
property preserving hashing

52
00:02:06,719 --> 00:02:09,360
pbh can be a useful tool in measuring

53
00:02:09,360 --> 00:02:11,840
the similarity between objects

54
00:02:11,840 --> 00:02:13,599
and can also have some practical

55
00:02:13,599 --> 00:02:16,080
applications in things such as facial

56
00:02:16,080 --> 00:02:18,720
recognition

57
00:02:19,840 --> 00:02:22,480
in this work we focus mainly on the

58
00:02:22,480 --> 00:02:24,560
hammock predicate

59
00:02:24,560 --> 00:02:26,239
and this is because

60
00:02:26,239 --> 00:02:28,080
hamming serves as a basic unit of

61
00:02:28,080 --> 00:02:29,200
measure

62
00:02:29,200 --> 00:02:31,040
and is also a prerequisite to

63
00:02:31,040 --> 00:02:35,640
understanding some more complex metrics

64
00:02:37,120 --> 00:02:39,519
hamming is also currently being used as

65
00:02:39,519 --> 00:02:41,360
a method for measuring similarity

66
00:02:41,360 --> 00:02:43,120
between feature vectors and machine

67
00:02:43,120 --> 00:02:45,519
learning

68
00:02:47,519 --> 00:02:48,840
here are our

69
00:02:48,840 --> 00:02:52,080
results we have conceptually more simple

70
00:02:52,080 --> 00:02:56,080
constructions compared to prior works

71
00:02:56,080 --> 00:02:57,760
and we're able to achieve better

72
00:02:57,760 --> 00:03:02,000
parameters under minimal assumptions

73
00:03:03,200 --> 00:03:05,680
our first construction is an information

74
00:03:05,680 --> 00:03:08,159
theoretic non-robust pph

75
00:03:08,159 --> 00:03:10,560
which uses essential decoding of linear

76
00:03:10,560 --> 00:03:12,800
error correcting codes

77
00:03:12,800 --> 00:03:14,159
and in our work

78
00:03:14,159 --> 00:03:16,879
we also prove a lower bound that shows

79
00:03:16,879 --> 00:03:18,800
that this construction is essentially

80
00:03:18,800 --> 00:03:21,280
optimal

81
00:03:22,560 --> 00:03:24,400
our next construction

82
00:03:24,400 --> 00:03:26,720
is a robust pph from homomorphic

83
00:03:26,720 --> 00:03:28,640
collision resistance

84
00:03:28,640 --> 00:03:30,080
which shows how to take our first

85
00:03:30,080 --> 00:03:31,440
construction

86
00:03:31,440 --> 00:03:33,360
and make it robust

87
00:03:33,360 --> 00:03:35,680
while requiring only only minimal

88
00:03:35,680 --> 00:03:37,840
overhead

89
00:03:37,840 --> 00:03:39,680
this construction is also able to

90
00:03:39,680 --> 00:03:41,360
achieve better compression than

91
00:03:41,360 --> 00:03:44,360
fireworks

92
00:03:46,080 --> 00:03:47,680
our third construction

93
00:03:47,680 --> 00:03:50,000
is a another robust property preserving

94
00:03:50,000 --> 00:03:51,760
hash

95
00:03:51,760 --> 00:03:54,560
which while achieving a slightly worse

96
00:03:54,560 --> 00:03:57,280
compression than our second construction

97
00:03:57,280 --> 00:03:59,760
is able to basically match the state of

98
00:03:59,760 --> 00:04:02,000
the art

99
00:04:02,000 --> 00:04:04,799
while only requiring minimal assumptions

100
00:04:04,799 --> 00:04:08,480
such as standard collision resistance

101
00:04:09,280 --> 00:04:10,640
and finally

102
00:04:10,640 --> 00:04:12,480
with our last construction

103
00:04:12,480 --> 00:04:15,360
we study a new notion of randomized

104
00:04:15,360 --> 00:04:17,839
robust property preserving hashing for

105
00:04:17,839 --> 00:04:19,199
hamming

106
00:04:19,199 --> 00:04:20,720
and we're able to

107
00:04:20,720 --> 00:04:22,880
provide a information theoretic

108
00:04:22,880 --> 00:04:24,000
construction

109
00:04:24,000 --> 00:04:28,440
that achieves optimal parameters

110
00:04:30,160 --> 00:04:31,759
thank you so much

111
00:04:31,759 --> 00:04:34,320
we are looking forward to presenting our

112
00:04:34,320 --> 00:04:36,639
work to you guys at crypto

113
00:04:36,639 --> 00:04:39,880
see you there

