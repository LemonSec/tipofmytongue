1
00:00:00,719 --> 00:00:04,000
hi everyone my name is adrian rania and

2
00:00:04,000 --> 00:00:06,399
in this short talk i will present

3
00:00:06,399 --> 00:00:08,720
implicit ybox implementation while

4
00:00:08,720 --> 00:00:11,840
boxing alex cyprus a joint work with

5
00:00:11,840 --> 00:00:14,880
joaquin van der messen and bar planet

6
00:00:14,880 --> 00:00:17,279
while in cryptography we mostly assume

7
00:00:17,279 --> 00:00:19,199
that the endpoints of the communication

8
00:00:19,199 --> 00:00:22,160
are secure this is not the case in some

9
00:00:22,160 --> 00:00:23,840
real-world scenarios

10
00:00:23,840 --> 00:00:26,560
and the worst case scenario is modeled

11
00:00:26,560 --> 00:00:29,119
by the white box model that assumes an

12
00:00:29,119 --> 00:00:31,679
attacker that has full control on the

13
00:00:31,679 --> 00:00:34,239
device running the cryptocomputation

14
00:00:34,239 --> 00:00:36,399
meaning that the attacker can observe

15
00:00:36,399 --> 00:00:39,360
and modify all the intimate values at

16
00:00:39,360 --> 00:00:40,320
will

17
00:00:40,320 --> 00:00:42,879
and software implementations of existing

18
00:00:42,879 --> 00:00:45,760
block ciphers like aes that try to

19
00:00:45,760 --> 00:00:48,239
protect again these white box attackers

20
00:00:48,239 --> 00:00:51,360
are called white box implementation

21
00:00:51,360 --> 00:00:54,079
and the main goal of this implementation

22
00:00:54,079 --> 00:00:55,920
is to prevent an attacker that has

23
00:00:55,920 --> 00:00:58,000
access to the implementation to the

24
00:00:58,000 --> 00:01:01,440
underlying code to extract the key from

25
00:01:01,440 --> 00:01:03,440
the implementation

26
00:01:03,440 --> 00:01:05,360
all the web box implementations

27
00:01:05,360 --> 00:01:08,560
published in academia follow the idea of

28
00:01:08,560 --> 00:01:11,200
encode wrong functions that consist of

29
00:01:11,200 --> 00:01:12,560
the following method

30
00:01:12,560 --> 00:01:14,880
first the cipher is decomposed into

31
00:01:14,880 --> 00:01:16,159
rounds

32
00:01:16,159 --> 00:01:18,880
then in each round one append a random

33
00:01:18,880 --> 00:01:21,680
permutation called wrong encodings to

34
00:01:21,680 --> 00:01:23,600
the input and to the output of each

35
00:01:23,600 --> 00:01:26,159
round and to cancel the effect of the

36
00:01:26,159 --> 00:01:28,560
encodings the input encoding of the next

37
00:01:28,560 --> 00:01:31,600
round is chosen as the inverse of the

38
00:01:31,600 --> 00:01:34,479
opponent coding of the previous round

39
00:01:34,479 --> 00:01:37,040
after this is done for all rounds the

40
00:01:37,040 --> 00:01:39,520
run codings are merged with the wrong

41
00:01:39,520 --> 00:01:42,640
functions and then each encoder function

42
00:01:42,640 --> 00:01:45,840
is implemented independently

43
00:01:45,840 --> 00:01:47,520
two methods to build webox

44
00:01:47,520 --> 00:01:49,200
implementation have been published in

45
00:01:49,200 --> 00:01:52,000
academia and they defer on the type of

46
00:01:52,000 --> 00:01:54,240
the wrong encodings and on the way that

47
00:01:54,240 --> 00:01:57,119
they implement the encoder on functions

48
00:01:57,119 --> 00:01:59,600
the first and most used method is the cu

49
00:01:59,600 --> 00:02:01,840
framework where the wrong incomings are

50
00:02:01,840 --> 00:02:04,079
concatenation of small nonlinear

51
00:02:04,079 --> 00:02:06,240
functions so that the encoder of

52
00:02:06,240 --> 00:02:08,399
functions can be implemented as a

53
00:02:08,399 --> 00:02:10,560
network of small look at tables the

54
00:02:10,560 --> 00:02:12,160
second method that has not been used

55
00:02:12,160 --> 00:02:12,959
much

56
00:02:12,959 --> 00:02:15,360
is the self-equivalence framework where

57
00:02:15,360 --> 00:02:16,800
the wrong encodings are sort of

58
00:02:16,800 --> 00:02:19,120
equivalents of the non-linear layer

59
00:02:19,120 --> 00:02:20,879
meaning a special type of a fiber

60
00:02:20,879 --> 00:02:22,959
mutation that commute with the

61
00:02:22,959 --> 00:02:24,800
nonlinearity of the cypher

62
00:02:24,800 --> 00:02:27,360
and thanks to this property the encoder

63
00:02:27,360 --> 00:02:28,879
functions can be implemented with

64
00:02:28,879 --> 00:02:31,840
matrices instead of look at tables

65
00:02:31,840 --> 00:02:34,640
and while many ybox implementation of

66
00:02:34,640 --> 00:02:36,400
existing block ciphers have been

67
00:02:36,400 --> 00:02:37,680
proposed

68
00:02:37,680 --> 00:02:39,680
all of them have been broken

69
00:02:39,680 --> 00:02:42,080
and no major progress has occurred

70
00:02:42,080 --> 00:02:44,800
recently in the design of white box

71
00:02:44,800 --> 00:02:46,480
implementation

72
00:02:46,480 --> 00:02:49,519
that is why in this work we propose a

73
00:02:49,519 --> 00:02:52,319
new method to build ybox implementation

74
00:02:52,319 --> 00:02:54,319
the implicit framework

75
00:02:54,319 --> 00:02:57,040
as opposed to previous method our method

76
00:02:57,040 --> 00:02:59,680
prevents all known genetic attacks by

77
00:02:59,680 --> 00:03:02,400
using large null linear encodings and

78
00:03:02,400 --> 00:03:04,720
still provide practical and efficient

79
00:03:04,720 --> 00:03:07,360
implementation not only that but our

80
00:03:07,360 --> 00:03:10,080
method is also the first one that can be

81
00:03:10,080 --> 00:03:13,840
applied to aorx ciphers ciphers that use

82
00:03:13,840 --> 00:03:16,159
the modern addition as the non-linear

83
00:03:16,159 --> 00:03:17,360
layer

84
00:03:17,360 --> 00:03:19,840
to have practical implementation with

85
00:03:19,840 --> 00:03:22,080
large nonlinear encodings the wrong

86
00:03:22,080 --> 00:03:24,720
encodings in an implicit implementations

87
00:03:24,720 --> 00:03:27,440
are built carefully as the composition

88
00:03:27,440 --> 00:03:30,720
of affine permutation and a fine neural

89
00:03:30,720 --> 00:03:33,920
linear self-equivalence very briefly to

90
00:03:33,920 --> 00:03:36,640
build an encoder on function we proceed

91
00:03:36,640 --> 00:03:38,560
as follows

92
00:03:38,560 --> 00:03:41,120
first we append an affine arrange of

93
00:03:41,120 --> 00:03:43,599
equivalence of the round that is a pair

94
00:03:43,599 --> 00:03:45,519
of permutation where the first one can

95
00:03:45,519 --> 00:03:48,000
define and the second one is non-linear

96
00:03:48,000 --> 00:03:50,720
and they cancel each other when used

97
00:03:50,720 --> 00:03:53,840
after and before the wrong function

98
00:03:53,840 --> 00:03:55,680
then we append a random affine

99
00:03:55,680 --> 00:03:58,799
permutation and its inverse between the

100
00:03:58,799 --> 00:04:00,640
output of the round and the second

101
00:04:00,640 --> 00:04:03,360
element of the sufficients and all these

102
00:04:03,360 --> 00:04:06,560
modifications still preserve the input

103
00:04:06,560 --> 00:04:10,319
and actual behavior of each round

104
00:04:10,319 --> 00:04:12,000
and finally we merge the fine

105
00:04:12,000 --> 00:04:14,400
permutation and self-equivalence with

106
00:04:14,400 --> 00:04:16,798
the wrong function forming the code

107
00:04:16,798 --> 00:04:18,238
rounds

108
00:04:18,238 --> 00:04:20,320
the encoder functions are built in this

109
00:04:20,320 --> 00:04:22,639
way so that the input encoding is

110
00:04:22,639 --> 00:04:25,040
non-linear and the opposite encoding is

111
00:04:25,040 --> 00:04:28,400
a fine and thanks to this restriction we

112
00:04:28,400 --> 00:04:30,800
can implement each encode round as a

113
00:04:30,800 --> 00:04:33,680
system of low degree equations that is

114
00:04:33,680 --> 00:04:36,960
easy to solve with gaussian elimination

115
00:04:36,960 --> 00:04:39,600
to apply the mpc framework to angular

116
00:04:39,600 --> 00:04:41,280
ciphers we need to sample

117
00:04:41,280 --> 00:04:43,520
self-equivalence of the modular vision

118
00:04:43,520 --> 00:04:46,639
and in this work we also proposed a new

119
00:04:46,639 --> 00:04:48,560
genetic method to find safe equivalence

120
00:04:48,560 --> 00:04:51,919
that we apply to the permute modulation

121
00:04:51,919 --> 00:04:53,440
we obtained for the first times of

122
00:04:53,440 --> 00:04:55,600
equivalence of this operation and with

123
00:04:55,600 --> 00:04:57,759
this effect evidence we can now build

124
00:04:57,759 --> 00:04:59,759
investing implementation of aortic

125
00:04:59,759 --> 00:05:00,960
ciphers

126
00:05:00,960 --> 00:05:03,199
and that was all for this preview but in

127
00:05:03,199 --> 00:05:05,199
the main talk i will be covering many

128
00:05:05,199 --> 00:05:08,000
more details like the two open source

129
00:05:08,000 --> 00:05:10,880
tools that we propose with this work so

130
00:05:10,880 --> 00:05:14,400
i hope to see you all there

