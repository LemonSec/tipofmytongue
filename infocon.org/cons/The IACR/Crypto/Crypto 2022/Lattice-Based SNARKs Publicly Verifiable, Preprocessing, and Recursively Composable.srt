1
00:00:01,439 --> 00:00:03,520
hi my name is valerio and i will be

2
00:00:03,520 --> 00:00:05,359
talking about the paper lattice-based

3
00:00:05,359 --> 00:00:07,040
snarks publicly verifiable

4
00:00:07,040 --> 00:00:08,720
pre-processing and recursively

5
00:00:08,720 --> 00:00:11,040
composable this is a joint work with

6
00:00:11,040 --> 00:00:13,920
martin albrecht rasalai julie malavolta

7
00:00:13,920 --> 00:00:17,039
and harabind tayagarajan

8
00:00:17,039 --> 00:00:18,560
before describing what we do in this

9
00:00:18,560 --> 00:00:21,279
work let us first fix some notation

10
00:00:21,279 --> 00:00:23,519
snark stands for succinal interactive

11
00:00:23,519 --> 00:00:25,279
argument of knowledge this is a proof

12
00:00:25,279 --> 00:00:27,599
system defined with respect to some np

13
00:00:27,599 --> 00:00:30,640
language l with the following interface

14
00:00:30,640 --> 00:00:32,479
the public parameters are generated by

15
00:00:32,479 --> 00:00:34,480
running the setup algorithm and are

16
00:00:34,480 --> 00:00:37,120
distributed to both prover and verifier

17
00:00:37,120 --> 00:00:38,719
whenever the approver wants to prove

18
00:00:38,719 --> 00:00:40,879
that some statement is in the language

19
00:00:40,879 --> 00:00:42,960
it runs the proof algorithm using the

20
00:00:42,960 --> 00:00:44,559
corresponding weakness

21
00:00:44,559 --> 00:00:46,320
and obtains a proof pie which is sent to

22
00:00:46,320 --> 00:00:47,840
the verifier

23
00:00:47,840 --> 00:00:50,000
using such a proof the verifier can run

24
00:00:50,000 --> 00:00:52,399
the verify algorithm and decide whether

25
00:00:52,399 --> 00:00:54,960
to accept or reject

26
00:00:54,960 --> 00:00:56,640
the properties that we require from such

27
00:00:56,640 --> 00:00:59,520
a proof system are completeness

28
00:00:59,520 --> 00:01:01,359
that is whenever the statement witness

29
00:01:01,359 --> 00:01:03,359
tuple used by the approver satisfies the

30
00:01:03,359 --> 00:01:06,880
relation are defining the mp language l

31
00:01:06,880 --> 00:01:09,119
the verifier should accept

32
00:01:09,119 --> 00:01:11,600
knowledge soundness that is whenever an

33
00:01:11,600 --> 00:01:13,920
adversary makes the verifier accept it

34
00:01:13,920 --> 00:01:15,680
should be possible to extract from such

35
00:01:15,680 --> 00:01:17,600
an adversary the weakness corresponding

36
00:01:17,600 --> 00:01:21,040
to the statement being proven

37
00:01:21,040 --> 00:01:22,720
these two properties alone are tribute

38
00:01:22,720 --> 00:01:24,799
to achieve by having the prover sending

39
00:01:24,799 --> 00:01:27,280
the witness to the verifier what makes

40
00:01:27,280 --> 00:01:29,119
the construction non-trivial are the

41
00:01:29,119 --> 00:01:30,960
efficiency requirements

42
00:01:30,960 --> 00:01:32,720
the first one is what we call

43
00:01:32,720 --> 00:01:35,200
succinctness and requires that the size

44
00:01:35,200 --> 00:01:37,119
of the proof should be poly logarithmic

45
00:01:37,119 --> 00:01:39,200
in the size of the statement

46
00:01:39,200 --> 00:01:41,600
an even stronger requirement is what we

47
00:01:41,600 --> 00:01:43,280
call preprocessing

48
00:01:43,280 --> 00:01:46,000
here the verifier can pre-process in an

49
00:01:46,000 --> 00:01:48,640
offline phase the public parameters so

50
00:01:48,640 --> 00:01:51,040
that the online verification runs in

51
00:01:51,040 --> 00:01:53,200
time poly logarithmic in the size of the

52
00:01:53,200 --> 00:01:55,600
statement

53
00:01:55,600 --> 00:01:57,360
now that we have recalled what a snark

54
00:01:57,360 --> 00:01:59,200
is we can state the question that we try

55
00:01:59,200 --> 00:02:01,119
to address in this work

56
00:02:01,119 --> 00:02:03,200
the question is is it possible to

57
00:02:03,200 --> 00:02:05,360
construct a snark that satisfies all

58
00:02:05,360 --> 00:02:07,520
these properties at the same time

59
00:02:07,520 --> 00:02:08,959
the properties are

60
00:02:08,959 --> 00:02:11,440
post quantum secure by which in a very

61
00:02:11,440 --> 00:02:13,360
liberal interpretation we mean any

62
00:02:13,360 --> 00:02:15,440
scheme not based on groups

63
00:02:15,440 --> 00:02:18,239
publicly verifiable which means

64
00:02:18,239 --> 00:02:20,080
that anyone could run the verification

65
00:02:20,080 --> 00:02:21,360
algorithm

66
00:02:21,360 --> 00:02:23,280
pre-processing which i have defined in

67
00:02:23,280 --> 00:02:24,720
the previous slide

68
00:02:24,720 --> 00:02:26,959
algebraic by which we mean that the

69
00:02:26,959 --> 00:02:29,040
construction uses only algebraic

70
00:02:29,040 --> 00:02:31,920
operations defined over the mathematical

71
00:02:31,920 --> 00:02:33,440
structure that the scheme is constructed

72
00:02:33,440 --> 00:02:34,560
over

73
00:02:34,560 --> 00:02:36,640
and structural preserving by which we

74
00:02:36,640 --> 00:02:38,000
mean that the relation checked by the

75
00:02:38,000 --> 00:02:40,160
verification algorithm should be

76
00:02:40,160 --> 00:02:42,879
supported by the snark itself

77
00:02:42,879 --> 00:02:44,879
in this work we answer positively to

78
00:02:44,879 --> 00:02:46,400
such a question

79
00:02:46,400 --> 00:02:48,000
and to the best of our knowledge this is

80
00:02:48,000 --> 00:02:49,280
the first construction achieving all

81
00:02:49,280 --> 00:02:52,239
these properties at the same time

82
00:02:52,239 --> 00:02:54,560
in particular we show how to construct a

83
00:02:54,560 --> 00:02:56,480
lattice-based narc which is publicly

84
00:02:56,480 --> 00:02:58,879
verifiable pre-processing algebraic and

85
00:02:58,879 --> 00:03:00,800
structural preserving all these

86
00:03:00,800 --> 00:03:02,560
properties lead to a snark that is

87
00:03:02,560 --> 00:03:04,400
friendly to recursive composition

88
00:03:04,400 --> 00:03:06,080
that is a snark where it is possible to

89
00:03:06,080 --> 00:03:08,080
prove knowledge of a snark proof using

90
00:03:08,080 --> 00:03:09,760
the snark itself

91
00:03:09,760 --> 00:03:12,239
this enables very powerful application

92
00:03:12,239 --> 00:03:13,680
such as incremental verifiable

93
00:03:13,680 --> 00:03:15,519
computation

94
00:03:15,519 --> 00:03:17,840
we show that the main analysis to obtain

95
00:03:17,840 --> 00:03:19,920
such a primitive is a lattice-based

96
00:03:19,920 --> 00:03:22,239
vector commitment which supports opening

97
00:03:22,239 --> 00:03:23,760
to constant degree multivariate

98
00:03:23,760 --> 00:03:25,920
polynomial and which is extractable and

99
00:03:25,920 --> 00:03:28,239
compact i do not have the time here to

100
00:03:28,239 --> 00:03:29,840
define all these properties but you can

101
00:03:29,840 --> 00:03:31,519
watch the longer presentation you feel

102
00:03:31,519 --> 00:03:32,799
interested

103
00:03:32,799 --> 00:03:35,280
in our work we show that it is possible

104
00:03:35,280 --> 00:03:37,680
to compile such a vc scheme into a snark

105
00:03:37,680 --> 00:03:40,959
that satisfies the required properties

106
00:03:40,959 --> 00:03:42,640
in this way we'll do the task of or

107
00:03:42,640 --> 00:03:44,480
constructing lesnark to that of

108
00:03:44,480 --> 00:03:46,400
constructing a vc scheme

109
00:03:46,400 --> 00:03:48,480
i will now sketch how to construct such

110
00:03:48,480 --> 00:03:50,640
a lattice-based vector commitment

111
00:03:50,640 --> 00:03:52,720
this requires the introduction of a new

112
00:03:52,720 --> 00:03:54,480
but natural class of lattice-based

113
00:03:54,480 --> 00:03:56,959
knowledge and our knowledge assumptions

114
00:03:56,959 --> 00:03:59,439
the roadmap that we use to obtain a vc

115
00:03:59,439 --> 00:04:01,360
scheme with the required properties is

116
00:04:01,360 --> 00:04:02,560
the following

117
00:04:02,560 --> 00:04:04,879
we start by translating a pairing based

118
00:04:04,879 --> 00:04:07,120
vc scheme that supports opening to

119
00:04:07,120 --> 00:04:08,480
linear function

120
00:04:08,480 --> 00:04:10,159
to the lattice word

121
00:04:10,159 --> 00:04:13,120
by doing so we obtain a lattice base vc

122
00:04:13,120 --> 00:04:14,959
which also supports opening to linear

123
00:04:14,959 --> 00:04:17,120
function that is weak binding and

124
00:04:17,120 --> 00:04:18,399
succinct

125
00:04:18,399 --> 00:04:20,000
while translating the construction we

126
00:04:20,000 --> 00:04:21,279
also have to map the underlying

127
00:04:21,279 --> 00:04:22,800
assumption under which the scheme is

128
00:04:22,800 --> 00:04:24,160
proved secure

129
00:04:24,160 --> 00:04:26,479
in doing so we obtain a new class of

130
00:04:26,479 --> 00:04:29,280
lattice-based assumptions that we call k

131
00:04:29,280 --> 00:04:31,440
ring in homogeneous short integer

132
00:04:31,440 --> 00:04:34,560
solution or crisis for short

133
00:04:34,560 --> 00:04:35,440
then

134
00:04:35,440 --> 00:04:37,280
using the fact that we are now working

135
00:04:37,280 --> 00:04:39,520
over rings we can show that the vc

136
00:04:39,520 --> 00:04:41,840
scheme actually supports opening to any

137
00:04:41,840 --> 00:04:45,520
polynomial map of constant degree

138
00:04:46,000 --> 00:04:47,919
then by introducing a knowledge version

139
00:04:47,919 --> 00:04:49,919
of the crisis assumption we showed that

140
00:04:49,919 --> 00:04:52,080
the security of the vc scheme can be

141
00:04:52,080 --> 00:04:53,520
improved from weak binding to

142
00:04:53,520 --> 00:04:55,280
extractability

143
00:04:55,280 --> 00:04:57,360
the only property left to upgrade is now

144
00:04:57,360 --> 00:04:58,800
succinctness

145
00:04:58,800 --> 00:05:01,039
we achieved this by introducing an

146
00:05:01,039 --> 00:05:02,720
aggregation trick that involves

147
00:05:02,720 --> 00:05:05,360
embedding a ring sis instance in the

148
00:05:05,360 --> 00:05:07,360
public parameters

149
00:05:07,360 --> 00:05:09,360
in this way we obtain a busy scheme that

150
00:05:09,360 --> 00:05:11,759
satisfies all the properties required

151
00:05:11,759 --> 00:05:15,039
and that can be compiled into a snark

152
00:05:15,039 --> 00:05:17,440
in the paper we also show other results

153
00:05:17,440 --> 00:05:19,600
in particular we study the hardness of

154
00:05:19,600 --> 00:05:21,039
this new family or lattice-based

155
00:05:21,039 --> 00:05:22,080
assumption

156
00:05:22,080 --> 00:05:24,800
and outline some native application of

157
00:05:24,800 --> 00:05:26,720
our snark

158
00:05:26,720 --> 00:05:28,240
if you are interested in knowing more

159
00:05:28,240 --> 00:05:30,080
about this work you can read our full

160
00:05:30,080 --> 00:05:31,919
paper on eprint or watch the full

161
00:05:31,919 --> 00:05:35,719
presentation of this work

