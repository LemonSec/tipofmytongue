1
00:00:00,799 --> 00:00:02,800
hi welcome to my talk on public

2
00:00:02,800 --> 00:00:04,400
relations extraction with ephemeral

3
00:00:04,400 --> 00:00:06,640
roles and worst case corruptions

4
00:00:06,640 --> 00:00:08,080
this was a really fun project with

5
00:00:08,080 --> 00:00:10,080
jasper from morris university and mache

6
00:00:10,080 --> 00:00:11,840
from cqt and the national university of

7
00:00:11,840 --> 00:00:13,440
singapore

8
00:00:13,440 --> 00:00:15,040
so it's well known that randomness is

9
00:00:15,040 --> 00:00:17,039
fundamental in cryptography and perhaps

10
00:00:17,039 --> 00:00:18,240
the simplest way of generating

11
00:00:18,240 --> 00:00:20,000
randomness is to assume some trusted

12
00:00:20,000 --> 00:00:22,320
randomness generator that samples bits

13
00:00:22,320 --> 00:00:24,320
uniformly at random and broadcast them

14
00:00:24,320 --> 00:00:26,160
to several parties

15
00:00:26,160 --> 00:00:28,800
and these parties all agree on the same

16
00:00:28,800 --> 00:00:30,880
bit and they all trust that this bit is

17
00:00:30,880 --> 00:00:32,960
indeed uniformly random

18
00:00:32,960 --> 00:00:35,040
but this is a very strong assumption and

19
00:00:35,040 --> 00:00:37,280
so we usually replace this trusted party

20
00:00:37,280 --> 00:00:38,800
by some distributed protocol where

21
00:00:38,800 --> 00:00:41,040
parties interact in order to agree on a

22
00:00:41,040 --> 00:00:42,800
common random bit

23
00:00:42,800 --> 00:00:44,399
but it is also complicated

24
00:00:44,399 --> 00:00:45,360
because

25
00:00:45,360 --> 00:00:46,960
many of these protocols require that

26
00:00:46,960 --> 00:00:48,800
parties maintain stateful environments

27
00:00:48,800 --> 00:00:51,600
for a long time and this is a hard task

28
00:00:51,600 --> 00:00:53,199
because for example there may be power

29
00:00:53,199 --> 00:00:55,680
outages or one computer may restart and

30
00:00:55,680 --> 00:00:57,520
start working on some updates

31
00:00:57,520 --> 00:00:59,600
and it's even worse under adversarial

32
00:00:59,600 --> 00:01:01,600
behavior because adversaries can mount

33
00:01:01,600 --> 00:01:04,799
targeted denial of service attacks

34
00:01:04,799 --> 00:01:06,560
so because of this prior work has

35
00:01:06,560 --> 00:01:08,880
studied a stateless mpc where the goal

36
00:01:08,880 --> 00:01:11,040
is to design protocols which do not

37
00:01:11,040 --> 00:01:13,680
require parties to keep state

38
00:01:13,680 --> 00:01:16,000
and this is also the focus of our work

39
00:01:16,000 --> 00:01:18,400
and we consider the recent you only

40
00:01:18,400 --> 00:01:21,280
speak once model or yozo for short of

41
00:01:21,280 --> 00:01:24,080
stateless mpc with ephemeral rules

42
00:01:24,080 --> 00:01:27,439
and a yoza protocol is composed by a

43
00:01:27,439 --> 00:01:29,920
series of roles few roles

44
00:01:29,920 --> 00:01:31,840
which are executed in sequence and the

45
00:01:31,840 --> 00:01:33,600
way we should think about this is that

46
00:01:33,600 --> 00:01:35,920
there is a large ground set of parties

47
00:01:35,920 --> 00:01:38,000
and there is a role selection mechanism

48
00:01:38,000 --> 00:01:39,040
that

49
00:01:39,040 --> 00:01:41,920
selects a party to execute

50
00:01:41,920 --> 00:01:43,439
a certain role in this case the first

51
00:01:43,439 --> 00:01:44,240
rule

52
00:01:44,240 --> 00:01:46,159
and executing a role entails

53
00:01:46,159 --> 00:01:49,200
broadcasting a public value x1

54
00:01:49,200 --> 00:01:51,520
and also sending private messages to

55
00:01:51,520 --> 00:01:53,280
future roles

56
00:01:53,280 --> 00:01:56,560
and after a role is executed the party

57
00:01:56,560 --> 00:01:59,200
that executed the role can basically

58
00:01:59,200 --> 00:02:01,439
blow itself up and go offline forever

59
00:02:01,439 --> 00:02:02,799
because it doesn't need to speak again

60
00:02:02,799 --> 00:02:05,040
anymore

61
00:02:05,040 --> 00:02:07,200
and the protocol proceeds like this

62
00:02:07,200 --> 00:02:10,160
so for the second roll the selection

63
00:02:10,160 --> 00:02:12,160
mechanism picks a party to execute the

64
00:02:12,160 --> 00:02:13,120
code

65
00:02:13,120 --> 00:02:16,879
and again more messages are sent etc

66
00:02:16,879 --> 00:02:18,640
until the protocol

67
00:02:18,640 --> 00:02:20,239
ends

68
00:02:20,239 --> 00:02:21,040
and

69
00:02:21,040 --> 00:02:23,520
in the original yozo work

70
00:02:23,520 --> 00:02:25,440
um the role selection mechanism was

71
00:02:25,440 --> 00:02:27,040
assumed to be uniformly random which

72
00:02:27,040 --> 00:02:28,879
means that worst case corruptions on the

73
00:02:28,879 --> 00:02:30,560
ground set become

74
00:02:30,560 --> 00:02:32,560
random corruptions on the rules and this

75
00:02:32,560 --> 00:02:35,519
allowed them to design mpc protocols

76
00:02:35,519 --> 00:02:37,120
with about half rate of random

77
00:02:37,120 --> 00:02:38,879
corruptions

78
00:02:38,879 --> 00:02:41,519
in this work we consider a modification

79
00:02:41,519 --> 00:02:43,440
of the original yoso setting where we

80
00:02:43,440 --> 00:02:45,440
replace random corruptions by static

81
00:02:45,440 --> 00:02:47,519
chosen corruptions and we specifically

82
00:02:47,519 --> 00:02:49,760
considered the task of public randomness

83
00:02:49,760 --> 00:02:51,519
extraction

84
00:02:51,519 --> 00:02:53,599
so here's an example we have four roles

85
00:02:53,599 --> 00:02:55,760
and before the protocol starts we allow

86
00:02:55,760 --> 00:02:57,599
the adversary to corrupt say two roles

87
00:02:57,599 --> 00:02:59,280
of its choice and then the protocol

88
00:02:59,280 --> 00:03:01,280
proceeds as before so roles are allowed

89
00:03:01,280 --> 00:03:03,280
to broadcast public values and to send

90
00:03:03,280 --> 00:03:05,519
private messages to future roles and

91
00:03:05,519 --> 00:03:07,599
furthermore corrupted rules are allowed

92
00:03:07,599 --> 00:03:10,560
to deviate arbitrarily from the protocol

93
00:03:10,560 --> 00:03:13,200
in the end we want to compute our coin

94
00:03:13,200 --> 00:03:16,080
by applying a deterministic function

95
00:03:16,080 --> 00:03:17,920
to only the public values of the

96
00:03:17,920 --> 00:03:20,239
protocol x1 through x4

97
00:03:20,239 --> 00:03:22,319
and this coin should be statistically

98
00:03:22,319 --> 00:03:23,840
close to uniform

99
00:03:23,840 --> 00:03:25,840
and the reason why we want the coin to

100
00:03:25,840 --> 00:03:28,080
be a function only of the public values

101
00:03:28,080 --> 00:03:30,000
that we wanted even people that did not

102
00:03:30,000 --> 00:03:32,239
participate in the protocol to be able

103
00:03:32,239 --> 00:03:34,879
to compute the coin by themselves

104
00:03:34,879 --> 00:03:37,040
now why is it interesting to consider

105
00:03:37,040 --> 00:03:39,200
worst case corruptions well first it

106
00:03:39,200 --> 00:03:40,959
captures settings where the role

107
00:03:40,959 --> 00:03:43,280
selection mechanism may be biased in

108
00:03:43,280 --> 00:03:45,040
which case previous protocols are

109
00:03:45,040 --> 00:03:46,480
insecure

110
00:03:46,480 --> 00:03:48,560
second it forces us to actually go

111
00:03:48,560 --> 00:03:50,720
beyond committee-based protocol design

112
00:03:50,720 --> 00:03:53,360
and to invent interesting techniques

113
00:03:53,360 --> 00:03:55,439
and finally we believe it is a clean

114
00:03:55,439 --> 00:03:56,799
model

115
00:03:56,799 --> 00:03:58,840
with many potential

116
00:03:58,840 --> 00:04:01,200
applications so in this work we are

117
00:04:01,200 --> 00:04:04,720
mainly interested in understanding the

118
00:04:04,720 --> 00:04:06,959
maximum rate of chosen corruptions that

119
00:04:06,959 --> 00:04:09,760
still allows for low bias public randos

120
00:04:09,760 --> 00:04:12,159
extraction in our yosef setting

121
00:04:12,159 --> 00:04:14,400
and we obtain both positive and negative

122
00:04:14,400 --> 00:04:16,478
results so with respect to positive

123
00:04:16,478 --> 00:04:19,279
results we obtain two types of zero

124
00:04:19,279 --> 00:04:21,680
error randomness extraction protocols

125
00:04:21,680 --> 00:04:24,400
depending on how the private messages to

126
00:04:24,400 --> 00:04:27,280
future roles are implemented in practice

127
00:04:27,280 --> 00:04:29,680
and these protocols are based on a yoho

128
00:04:29,680 --> 00:04:32,000
fight version of william our secure mpc

129
00:04:32,000 --> 00:04:34,479
made simple combined with some yozo

130
00:04:34,479 --> 00:04:36,400
specific techniques

131
00:04:36,400 --> 00:04:38,400
and to complement this we also show that

132
00:04:38,400 --> 00:04:40,479
in both models if you want to extract

133
00:04:40,479 --> 00:04:43,919
randomness with subconscious bias

134
00:04:43,919 --> 00:04:45,600
against t corruptions then we need at

135
00:04:45,600 --> 00:04:46,479
least

136
00:04:46,479 --> 00:04:48,960
four t plus one roles so in particular

137
00:04:48,960 --> 00:04:51,759
for one corruption we obtain the optimal

138
00:04:51,759 --> 00:04:55,880
number of rules for this problem

