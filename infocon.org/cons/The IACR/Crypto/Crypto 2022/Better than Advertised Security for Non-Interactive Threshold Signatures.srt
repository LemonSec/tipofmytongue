1
00:00:00,880 --> 00:00:02,879
my name is elizabeth kreitz and i'm

2
00:00:02,879 --> 00:00:04,799
going to be talking about the security

3
00:00:04,799 --> 00:00:07,759
of non-interactive threshold signatures

4
00:00:07,759 --> 00:00:10,080
this is joint work with mahir belare

5
00:00:10,080 --> 00:00:13,040
chelsea komlow mary mallor stefano

6
00:00:13,040 --> 00:00:17,400
tazzaro and chenzi zhu

7
00:00:18,880 --> 00:00:21,039
threshold signatures allow multiple

8
00:00:21,039 --> 00:00:23,439
parties to sign a message where some

9
00:00:23,439 --> 00:00:26,320
threshold of them is required to sign

10
00:00:26,320 --> 00:00:28,560
they're important for distributing trust

11
00:00:28,560 --> 00:00:30,560
because if we have a single key this

12
00:00:30,560 --> 00:00:32,960
represents a single point of failure

13
00:00:32,960 --> 00:00:34,960
however if we distribute the key amongst

14
00:00:34,960 --> 00:00:37,200
multiple parties then we can tolerate

15
00:00:37,200 --> 00:00:40,079
some fraction of corrupt signers

16
00:00:40,079 --> 00:00:41,760
this is important because threshold

17
00:00:41,760 --> 00:00:43,840
signatures are being used to secure

18
00:00:43,840 --> 00:00:46,399
cryptocurrency wallets

19
00:00:46,399 --> 00:00:48,640
threshold cryptography more generally is

20
00:00:48,640 --> 00:00:50,960
being standardized through nist as well

21
00:00:50,960 --> 00:00:54,719
as specific schemes like frost

22
00:00:55,920 --> 00:00:57,760
our focus in this work is on

23
00:00:57,760 --> 00:01:01,440
non-interactive threshold signatures

24
00:01:01,440 --> 00:01:03,600
consider an example where two out of

25
00:01:03,600 --> 00:01:07,439
three parties are required to sign

26
00:01:07,439 --> 00:01:09,840
a user called the leader requests a

27
00:01:09,840 --> 00:01:12,400
signature on a message m from these two

28
00:01:12,400 --> 00:01:14,320
parties

29
00:01:14,320 --> 00:01:16,880
each party produces a partial signature

30
00:01:16,880 --> 00:01:19,200
which they then send to the leader

31
00:01:19,200 --> 00:01:20,799
the leader combines these partial

32
00:01:20,799 --> 00:01:23,119
signatures into a final signature

33
00:01:23,119 --> 00:01:26,920
representing the group

34
00:01:27,360 --> 00:01:29,119
examples of fully non-interactive

35
00:01:29,119 --> 00:01:31,520
schemes include threshold bls and

36
00:01:31,520 --> 00:01:34,240
threshold rsa

37
00:01:34,240 --> 00:01:36,560
but what about discrete log base schemes

38
00:01:36,560 --> 00:01:40,320
in particular ones that are pairing free

39
00:01:40,320 --> 00:01:42,640
currently there do not exist any fully

40
00:01:42,640 --> 00:01:45,759
non-interactive schemes

41
00:01:45,759 --> 00:01:48,159
however for schnoor signatures there is

42
00:01:48,159 --> 00:01:50,479
the two-round frost threshold signature

43
00:01:50,479 --> 00:01:51,920
scheme

44
00:01:51,920 --> 00:01:54,079
this consists of a single message

45
00:01:54,079 --> 00:01:56,799
independent pre-processing followed by a

46
00:01:56,799 --> 00:01:59,119
single signing round

47
00:01:59,119 --> 00:02:00,960
we refer to this as partially

48
00:02:00,960 --> 00:02:03,839
non-interactive

49
00:02:06,079 --> 00:02:09,119
there is a scheme for ecdsa which also

50
00:02:09,119 --> 00:02:11,360
consists of a single message dependent

51
00:02:11,360 --> 00:02:12,800
signing round

52
00:02:12,800 --> 00:02:15,040
however it also includes multiple

53
00:02:15,040 --> 00:02:16,879
message independent pre-processing

54
00:02:16,879 --> 00:02:20,239
rounds which we do not

55
00:02:20,840 --> 00:02:24,160
cover in this paper we provide a formal

56
00:02:24,160 --> 00:02:26,400
framework for partially non-interactive

57
00:02:26,400 --> 00:02:28,480
threshold signatures

58
00:02:28,480 --> 00:02:31,200
we provide a formal syntax as well as a

59
00:02:31,200 --> 00:02:34,879
hierarchy of security notions

60
00:02:34,959 --> 00:02:38,319
our framework can be applied to bls

61
00:02:38,319 --> 00:02:39,680
frost

62
00:02:39,680 --> 00:02:41,519
and other schemes

63
00:02:41,519 --> 00:02:45,200
but why is this framework needed

64
00:02:48,080 --> 00:02:50,400
prior to this work there existed no

65
00:02:50,400 --> 00:02:52,400
formalization for partially

66
00:02:52,400 --> 00:02:55,680
non-interactive schemes

67
00:02:56,000 --> 00:03:00,400
so we provide the first formal syntax

68
00:03:01,519 --> 00:03:03,599
we also show that existing security

69
00:03:03,599 --> 00:03:06,000
notions are weaker than what schemes can

70
00:03:06,000 --> 00:03:08,879
actually achieve

71
00:03:09,200 --> 00:03:11,440
so we provide a fine-grained security

72
00:03:11,440 --> 00:03:13,360
hierarchy with stronger notions of

73
00:03:13,360 --> 00:03:16,000
security

74
00:03:17,120 --> 00:03:18,800
we note that the original proof for

75
00:03:18,800 --> 00:03:23,120
frost relied on heuristic assumptions

76
00:03:23,360 --> 00:03:25,519
so we analyzed the security of frost

77
00:03:25,519 --> 00:03:29,360
based on our security hierarchy

78
00:03:29,920 --> 00:03:32,640
we also analyzed the security of bls and

79
00:03:32,640 --> 00:03:34,640
show that it achieves a stronger notion

80
00:03:34,640 --> 00:03:36,640
of security which is implied by the

81
00:03:36,640 --> 00:03:39,599
concurrent work of yen's growth

82
00:03:39,599 --> 00:03:41,599
in this talk we're going to focus on the

83
00:03:41,599 --> 00:03:45,159
frost scheme

84
00:03:47,920 --> 00:03:50,239
our concrete contributions are as

85
00:03:50,239 --> 00:03:52,720
follows

86
00:03:52,799 --> 00:03:56,000
we present frost ii an optimized version

87
00:03:56,000 --> 00:03:57,920
of the original frost scheme that we

88
00:03:57,920 --> 00:04:00,560
call frost one

89
00:04:00,560 --> 00:04:02,400
frost2 reduces the number of

90
00:04:02,400 --> 00:04:05,200
exponentiations required for signing

91
00:04:05,200 --> 00:04:08,640
from t to 1.

92
00:04:10,560 --> 00:04:13,840
we prove the security of both 1 and

93
00:04:13,840 --> 00:04:16,160
frost 2 under the one more discrete

94
00:04:16,160 --> 00:04:17,918
logarithm assumption in the random

95
00:04:17,918 --> 00:04:19,759
oracle model

96
00:04:19,759 --> 00:04:23,600
this assumes a trusted dkg

97
00:04:25,120 --> 00:04:27,440
we proved the security of frost 2

98
00:04:27,440 --> 00:04:29,280
together with the distributed key

99
00:04:29,280 --> 00:04:31,520
generation protocol proposed in the

100
00:04:31,520 --> 00:04:34,320
original frost paper

101
00:04:34,320 --> 00:04:36,080
this allows any number of corrupt

102
00:04:36,080 --> 00:04:38,960
signers up to t minus 1.

103
00:04:38,960 --> 00:04:40,639
in particular it allows a dishonest

104
00:04:40,639 --> 00:04:43,639
majority

105
00:04:44,479 --> 00:04:45,520
finally

106
00:04:45,520 --> 00:04:48,080
our security hierarchy reveals a

107
00:04:48,080 --> 00:04:50,400
separation in the notions of security

108
00:04:50,400 --> 00:04:53,199
achieved by frost one and for us two

109
00:04:53,199 --> 00:04:54,479
to conclude

110
00:04:54,479 --> 00:04:56,320
both schemes achieve some of the highest

111
00:04:56,320 --> 00:05:00,719
notions of security in our framework

