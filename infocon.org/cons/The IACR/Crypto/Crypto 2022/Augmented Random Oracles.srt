1
00:00:00,560 --> 00:00:02,720
this talk will be about a new idealized

2
00:00:02,720 --> 00:00:04,720
model for hash functions called the

3
00:00:04,720 --> 00:00:07,759
augmented random oracle model

4
00:00:07,759 --> 00:00:09,519
so imagine we have some cryptosystem

5
00:00:09,519 --> 00:00:12,160
that makes use of a hash function h

6
00:00:12,160 --> 00:00:14,160
unfortunately no matter how hard we try

7
00:00:14,160 --> 00:00:15,759
we cannot prove security based on

8
00:00:15,759 --> 00:00:17,440
typical properties of h such as

9
00:00:17,440 --> 00:00:19,439
collision resistance

10
00:00:19,439 --> 00:00:21,359
nevertheless the scheme seems to resist

11
00:00:21,359 --> 00:00:24,880
attacks so what do we do

12
00:00:25,039 --> 00:00:27,519
one proposal by belarian ragaway is the

13
00:00:27,519 --> 00:00:30,480
famous random oracle model or rom here

14
00:00:30,480 --> 00:00:31,920
the hash function is modeled as a

15
00:00:31,920 --> 00:00:33,920
uniformly random function o that can

16
00:00:33,920 --> 00:00:37,360
only be accessed via queries the idea is

17
00:00:37,360 --> 00:00:39,360
to prove security in this idealized

18
00:00:39,360 --> 00:00:41,360
model this gives at least some

19
00:00:41,360 --> 00:00:42,879
assurances that we didn't totally mess

20
00:00:42,879 --> 00:00:45,039
up the cryptosystem design

21
00:00:45,039 --> 00:00:47,039
then we just pray that security holds

22
00:00:47,039 --> 00:00:49,360
when we replace the random oracle o with

23
00:00:49,360 --> 00:00:53,440
a concrete hash function say shot 2.

24
00:00:53,440 --> 00:00:56,559
unfortunately kinetic goldrick and levy

25
00:00:56,559 --> 00:00:58,399
showed that random oracles must

26
00:00:58,399 --> 00:01:00,480
sometimes fail they give what is called

27
00:01:00,480 --> 00:01:02,399
an uninstantiability result for the

28
00:01:02,399 --> 00:01:03,920
random oracle model

29
00:01:03,920 --> 00:01:05,760
by exhibiting a scheme

30
00:01:05,760 --> 00:01:07,840
s that is secure in the random oracle

31
00:01:07,840 --> 00:01:10,000
model but insecure under any concrete

32
00:01:10,000 --> 00:01:11,280
hash function

33
00:01:11,280 --> 00:01:12,880
since their work numerous other

34
00:01:12,880 --> 00:01:14,400
uninstantiability results have been

35
00:01:14,400 --> 00:01:15,520
shown

36
00:01:15,520 --> 00:01:17,680
despite these results the rom remains

37
00:01:17,680 --> 00:01:19,920
widely used and is a very important tool

38
00:01:19,920 --> 00:01:22,640
for analyzing practical cryptosystems in

39
00:01:22,640 --> 00:01:24,960
many cases the random oracle model is

40
00:01:24,960 --> 00:01:27,200
the only way we know how to justify the

41
00:01:27,200 --> 00:01:29,759
security of practical cryptosystems

42
00:01:29,759 --> 00:01:31,680
so the question is what can we do to get

43
00:01:31,680 --> 00:01:33,200
a better understanding of the guarantees

44
00:01:33,200 --> 00:01:36,560
of the rom despite these problems

45
00:01:36,560 --> 00:01:38,640
this brings us to the goal of our work

46
00:01:38,640 --> 00:01:41,200
which is to refine the random oracle

47
00:01:41,200 --> 00:01:43,600
model so as to avoid uninstantiability

48
00:01:43,600 --> 00:01:46,079
results we do exactly this

49
00:01:46,079 --> 00:01:47,920
by defining a model that captures all

50
00:01:47,920 --> 00:01:49,600
known techniques used to give

51
00:01:49,600 --> 00:01:51,680
uninstantiability results while still

52
00:01:51,680 --> 00:01:53,520
maintaining some of the utility of an

53
00:01:53,520 --> 00:01:54,960
idealized model

54
00:01:54,960 --> 00:01:56,880
please watch the talk for how we design

55
00:01:56,880 --> 00:02:01,240
such a model and what we can prove

