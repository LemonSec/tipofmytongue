1
00:00:00,320 --> 00:00:02,000
hi i'm alex and this is the abstract

2
00:00:02,000 --> 00:00:03,840
presentation for mozzarella efficient

3
00:00:03,840 --> 00:00:05,359
veg totally interesting launch proofs

4
00:00:05,359 --> 00:00:07,680
oversight uk this is joint work together

5
00:00:07,680 --> 00:00:09,120
with carsten baum then the bomb and

6
00:00:09,120 --> 00:00:10,559
peter joel

7
00:00:10,559 --> 00:00:12,000
we consider serenology proofs for

8
00:00:12,000 --> 00:00:13,840
circuits where the prover has a witness

9
00:00:13,840 --> 00:00:15,759
w so when that did so when this witness

10
00:00:15,759 --> 00:00:17,680
is input into circuit c the circuit

11
00:00:17,680 --> 00:00:19,920
outputs either accept the reject this

12
00:00:19,920 --> 00:00:21,359
must satisfy the three security

13
00:00:21,359 --> 00:00:23,119
properties called completeness soundness

14
00:00:23,119 --> 00:00:24,560
and zero knowledge

15
00:00:24,560 --> 00:00:25,920
we always consider the circuit as

16
00:00:25,920 --> 00:00:28,080
arithmetic over a large ring

17
00:00:28,080 --> 00:00:29,679
and we achieve zero knowledge by using

18
00:00:29,679 --> 00:00:31,199
the commit and proof paradigm where the

19
00:00:31,199 --> 00:00:33,760
approver commits to the entire witness

20
00:00:33,760 --> 00:00:35,840
and then finally you open the w out

21
00:00:35,840 --> 00:00:38,399
value to show that it's acceptor reject

22
00:00:38,399 --> 00:00:39,760
this can be done using only linear

23
00:00:39,760 --> 00:00:41,840
neuromorphic commitments provided the

24
00:00:41,840 --> 00:00:43,200
approval proves consistency of the

25
00:00:43,200 --> 00:00:46,320
commitments throughout the computations

26
00:00:46,320 --> 00:00:48,640
we always consider computation over 62k

27
00:00:48,640 --> 00:00:50,719
rather than finite fields so this is the

28
00:00:50,719 --> 00:00:52,399
ring of the integers modulo due to the

29
00:00:52,399 --> 00:00:54,719
game this has several advantages

30
00:00:54,719 --> 00:00:56,480
primarily it maps naturally to data

31
00:00:56,480 --> 00:00:58,160
types used by cpus and programming

32
00:00:58,160 --> 00:01:00,239
languages so that it's easier to convert

33
00:01:00,239 --> 00:01:02,079
programs to corresponding circuits and

34
00:01:02,079 --> 00:01:03,680
in turn leads to more efficient protocol

35
00:01:03,680 --> 00:01:05,119
implementations

36
00:01:05,119 --> 00:01:07,360
it has several disadvantages however set

37
00:01:07,360 --> 00:01:09,040
2k is not a field so you have zero

38
00:01:09,040 --> 00:01:10,799
devices meaning that polynomials can

39
00:01:10,799 --> 00:01:13,040
have lots of roots as well

40
00:01:13,040 --> 00:01:14,640
this means that common tricks don't work

41
00:01:14,640 --> 00:01:16,640
and protocols get more complicated but

42
00:01:16,640 --> 00:01:18,320
also the proofs of security can be quite

43
00:01:18,320 --> 00:01:20,320
a bit harder

44
00:01:20,320 --> 00:01:22,159
the way you usually generate these

45
00:01:22,159 --> 00:01:23,680
linear neuromorphic commitments is

46
00:01:23,680 --> 00:01:25,759
through vectoring

47
00:01:25,759 --> 00:01:28,159
only is meaning that it is a black box

48
00:01:28,159 --> 00:01:29,840
where the sender can input a vector x

49
00:01:29,840 --> 00:01:32,079
and then get out a vector m so that this

50
00:01:32,079 --> 00:01:33,360
causes the linear neuromorphic

51
00:01:33,360 --> 00:01:35,040
commitment to x provided that the

52
00:01:35,040 --> 00:01:37,200
receiver inputs are so called global key

53
00:01:37,200 --> 00:01:40,400
delta and a local key k

54
00:01:40,400 --> 00:01:42,159
the way you usually generate vector oe

55
00:01:42,159 --> 00:01:43,600
however is through certain random

56
00:01:43,600 --> 00:01:45,520
correlation generators

57
00:01:45,520 --> 00:01:47,280
this is where the proven the verifier

58
00:01:47,280 --> 00:01:49,200
they interact to generate a short seed

59
00:01:49,200 --> 00:01:50,799
but then they can non-interactively

60
00:01:50,799 --> 00:01:52,320
expand this into a long correlated

61
00:01:52,320 --> 00:01:54,399
string of length n

62
00:01:54,399 --> 00:01:55,920
this is usually done with only some

63
00:01:55,920 --> 00:01:57,520
linear communication in the vector

64
00:01:57,520 --> 00:01:58,960
length l

65
00:01:58,960 --> 00:02:00,640
it's based on the variance of learning

66
00:02:00,640 --> 00:02:02,479
parallel chip with noise and through

67
00:02:02,479 --> 00:02:04,240
this it has been proven actively secure

68
00:02:04,240 --> 00:02:05,920
only for fields

69
00:02:05,920 --> 00:02:07,600
in this paper we provide the first

70
00:02:07,600 --> 00:02:09,758
actively secure vector only for rings

71
00:02:09,758 --> 00:02:13,920
set 2k with sublinear communication

72
00:02:14,160 --> 00:02:16,239
to first recap lpn this is where you

73
00:02:16,239 --> 00:02:19,120
have a short cs you have a long and big

74
00:02:19,120 --> 00:02:21,440
public generating matrix a

75
00:02:21,440 --> 00:02:23,280
and then you have a sparse error vector

76
00:02:23,280 --> 00:02:24,239
e

77
00:02:24,239 --> 00:02:26,080
if you do this computation you get out a

78
00:02:26,080 --> 00:02:29,040
vector x that looks completely uniform

79
00:02:29,040 --> 00:02:31,760
the way we use this is by starting out

80
00:02:31,760 --> 00:02:34,000
with m vector leads that we call the

81
00:02:34,000 --> 00:02:36,640
seed and then we expand these into a

82
00:02:36,640 --> 00:02:38,640
step and vector of length n so that the

83
00:02:38,640 --> 00:02:40,400
vector only correlation still works for

84
00:02:40,400 --> 00:02:42,560
each of the indices and n

85
00:02:42,560 --> 00:02:44,319
so we start out with the base vector

86
00:02:44,319 --> 00:02:45,680
least of length m

87
00:02:45,680 --> 00:02:48,239
then we generate this error

88
00:02:48,239 --> 00:02:50,239
which is sparse it has exactly t errors

89
00:02:50,239 --> 00:02:52,560
where t is significantly less than n but

90
00:02:52,560 --> 00:02:54,319
this has three main issues though the

91
00:02:54,319 --> 00:02:55,840
way you usually do this is by using a

92
00:02:55,840 --> 00:02:57,519
sub protocol called single point vector

93
00:02:57,519 --> 00:03:00,159
only which uses the ggm tree now over

94
00:03:00,159 --> 00:03:01,920
rings establishing consistency is much

95
00:03:01,920 --> 00:03:03,599
more tricky than over a field when you

96
00:03:03,599 --> 00:03:05,760
use the ggm method

97
00:03:05,760 --> 00:03:07,440
so therefore we create a new consistency

98
00:03:07,440 --> 00:03:10,319
check so that neither party can cheat

99
00:03:10,319 --> 00:03:12,239
this new consistency check however leaks

100
00:03:12,239 --> 00:03:13,840
the index of a single error with

101
00:03:13,840 --> 00:03:16,239
probability a half so this requires an

102
00:03:16,239 --> 00:03:18,000
analysis of the parameters used within

103
00:03:18,000 --> 00:03:20,000
the lpn instance to ensure it's still

104
00:03:20,000 --> 00:03:21,280
secure

105
00:03:21,280 --> 00:03:23,360
now finally the noise values within this

106
00:03:23,360 --> 00:03:24,799
noise vector must be chosen very

107
00:03:24,799 --> 00:03:27,200
carefully so that you cannot break this

108
00:03:27,200 --> 00:03:29,599
through a recent attack

109
00:03:29,599 --> 00:03:31,599
now after all of this is done the proof

110
00:03:31,599 --> 00:03:32,959
and the verifier simply apply the

111
00:03:32,959 --> 00:03:35,280
generating matrix to all to the seed

112
00:03:35,280 --> 00:03:37,280
vectories and add the error vectories

113
00:03:37,280 --> 00:03:39,280
and out you get a vector x that looks

114
00:03:39,280 --> 00:03:41,200
completely uniformly random and then you

115
00:03:41,200 --> 00:03:43,920
simply save m and repeat

116
00:03:43,920 --> 00:03:46,000
we also provide a way of verifying

117
00:03:46,000 --> 00:03:47,280
multiplication since that decay

118
00:03:47,280 --> 00:03:48,480
efficiently

119
00:03:48,480 --> 00:03:50,080
this stems from an observation from

120
00:03:50,080 --> 00:03:51,760
quicksilver where you can convert the

121
00:03:51,760 --> 00:03:53,360
mag equations of a con of a

122
00:03:53,360 --> 00:03:56,000
multiplication triple a b and c

123
00:03:56,000 --> 00:03:58,720
into a polynomial and delta instead now

124
00:03:58,720 --> 00:04:00,480
the perks of having this as a polynomial

125
00:04:00,480 --> 00:04:01,760
in delta means that you have a linear

126
00:04:01,760 --> 00:04:04,400
relationship between multiple of these

127
00:04:04,400 --> 00:04:06,799
multiplication triples so now

128
00:04:06,799 --> 00:04:09,040
the prover can simply send a0 and a1 and

129
00:04:09,040 --> 00:04:10,959
then we can check the following

130
00:04:10,959 --> 00:04:12,799
equation by using a random linear

131
00:04:12,799 --> 00:04:14,480
combination

132
00:04:14,480 --> 00:04:17,040
the issue however is that over a ring

133
00:04:17,040 --> 00:04:18,720
this is not as straightforward as over a

134
00:04:18,720 --> 00:04:20,720
field since many routes may exist so we

135
00:04:20,720 --> 00:04:22,960
create a new consistency check and a new

136
00:04:22,960 --> 00:04:24,400
analysis to ensure that this is still

137
00:04:24,400 --> 00:04:25,280
good

138
00:04:25,280 --> 00:04:26,960
so our results are the following we are

139
00:04:26,960 --> 00:04:28,560
the first to provide an efficient vector

140
00:04:28,560 --> 00:04:30,240
leaf set 2k

141
00:04:30,240 --> 00:04:32,240
which is actively secure

142
00:04:32,240 --> 00:04:34,400
this only requires one one bit to 1.3

143
00:04:34,400 --> 00:04:36,160
bits communication perfectly for large

144
00:04:36,160 --> 00:04:37,680
batches and we can generate up to 50

145
00:04:37,680 --> 00:04:39,680
million of these

146
00:04:39,680 --> 00:04:42,240
a second we also provide the first way

147
00:04:42,240 --> 00:04:44,160
of efficiently

148
00:04:44,160 --> 00:04:46,160
checking multiplications in set 2k this

149
00:04:46,160 --> 00:04:47,440
only requires one ring element

150
00:04:47,440 --> 00:04:50,639
communication for multiplication

151
00:04:50,639 --> 00:04:52,240
you can watch the full presentation on

152
00:04:52,240 --> 00:04:53,919
august 18th or you can read the full

153
00:04:53,919 --> 00:04:56,240
version on eprint if you follow the link

154
00:04:56,240 --> 00:04:59,919
thank you so much for listening

