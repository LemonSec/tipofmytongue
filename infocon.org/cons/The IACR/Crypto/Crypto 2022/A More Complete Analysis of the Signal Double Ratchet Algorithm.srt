1
00:00:02,240 --> 00:00:06,160
okay hello uh i'm alexander beanstalk uh

2
00:00:06,160 --> 00:00:08,720
this paper is a more complete analysis

3
00:00:08,720 --> 00:00:10,960
of the signal double ratchet algorithm

4
00:00:10,960 --> 00:00:13,599
and this is work with jaden sundom

5
00:00:13,599 --> 00:00:17,279
pretty and srini

6
00:00:17,279 --> 00:00:19,359
okay so what is the signal protocol well

7
00:00:19,359 --> 00:00:21,520
it's a secure messaging protocol for

8
00:00:21,520 --> 00:00:24,480
long lived sessions that was based off

9
00:00:24,480 --> 00:00:27,199
of the uh off the record protocol and

10
00:00:27,199 --> 00:00:28,960
now of course it's used by billions of

11
00:00:28,960 --> 00:00:32,320
people via the signal app itself also

12
00:00:32,320 --> 00:00:35,520
whatsapp facebook messenger uh messages

13
00:00:35,520 --> 00:00:37,680
by google and also many more that aren't

14
00:00:37,680 --> 00:00:39,920
listed on on the slide

15
00:00:39,920 --> 00:00:42,079
okay so obviously it's a very practical

16
00:00:42,079 --> 00:00:43,200
protocol

17
00:00:43,200 --> 00:00:45,840
and in addition it won the leviton prize

18
00:00:45,840 --> 00:00:48,399
at real world crypto so you know this is

19
00:00:48,399 --> 00:00:51,280
how you know that uh it's really a real

20
00:00:51,280 --> 00:00:53,600
world protocol

21
00:00:53,600 --> 00:00:55,920
okay so what is the setting for secure

22
00:00:55,920 --> 00:00:57,360
messaging quickly

23
00:00:57,360 --> 00:01:00,160
uh so first of all uh it's an

24
00:01:00,160 --> 00:01:03,199
asynchronous protocol uh meaning that

25
00:01:03,199 --> 00:01:06,320
the two parties involved don't send in

26
00:01:06,320 --> 00:01:09,360
fixed rounds uh but rather they can sort

27
00:01:09,360 --> 00:01:13,119
of send in an overlapping fashion um and

28
00:01:13,119 --> 00:01:14,640
this is important to note because

29
00:01:14,640 --> 00:01:17,520
actually the off the record protocol

30
00:01:17,520 --> 00:01:20,000
was synchronous itself and really there

31
00:01:20,000 --> 00:01:22,479
were novel changes in signal

32
00:01:22,479 --> 00:01:26,080
that made this protocol asynchronous

33
00:01:26,080 --> 00:01:28,400
and also

34
00:01:28,400 --> 00:01:30,720
the the protocol should work over an

35
00:01:30,720 --> 00:01:33,040
unreliable network where messages may

36
00:01:33,040 --> 00:01:35,360
arrive arbitrarily out of order or even

37
00:01:35,360 --> 00:01:37,119
be completely lost

38
00:01:37,119 --> 00:01:39,920
and despite this we still want immediate

39
00:01:39,920 --> 00:01:41,040
decryption

40
00:01:41,040 --> 00:01:42,320
meaning that

41
00:01:42,320 --> 00:01:44,479
even if a message is completely out of

42
00:01:44,479 --> 00:01:47,439
order uh the receiver should be able to

43
00:01:47,439 --> 00:01:50,079
immediately decrypt it in place in the

44
00:01:50,079 --> 00:01:51,840
correct spot in the conversation

45
00:01:51,840 --> 00:01:54,560
transcript and also message lost

46
00:01:54,560 --> 00:01:56,880
resilience meaning that if one message

47
00:01:56,880 --> 00:01:59,439
is completely lost forever

48
00:01:59,439 --> 00:02:02,719
they shouldn't just doom the protocol

49
00:02:02,719 --> 00:02:04,240
okay

50
00:02:04,240 --> 00:02:05,600
and also

51
00:02:05,600 --> 00:02:06,960
parties are

52
00:02:06,960 --> 00:02:09,119
maybe offline for extended periods of

53
00:02:09,119 --> 00:02:12,000
time uh you know like if somebody is on

54
00:02:12,000 --> 00:02:14,319
an airplane or something like this uh so

55
00:02:14,319 --> 00:02:16,560
there should be a server that provides a

56
00:02:16,560 --> 00:02:20,000
uh mailbox service uh for messages so

57
00:02:20,000 --> 00:02:22,160
that when a party does come online it

58
00:02:22,160 --> 00:02:24,480
can download these messages from the

59
00:02:24,480 --> 00:02:26,319
server

60
00:02:26,319 --> 00:02:30,160
okay also these sessions are long lived

61
00:02:30,160 --> 00:02:32,560
so state leakage might

62
00:02:32,560 --> 00:02:34,879
be likely over the lifetime of the

63
00:02:34,879 --> 00:02:37,040
session and what i mean but by this is a

64
00:02:37,040 --> 00:02:40,400
sort of transient snapshot of the state

65
00:02:40,400 --> 00:02:43,120
okay and finally uh devices could be

66
00:02:43,120 --> 00:02:45,760
using bad randomness

67
00:02:45,760 --> 00:02:48,319
okay so the properties that we want from

68
00:02:48,319 --> 00:02:50,319
a secure messaging protocol are first of

69
00:02:50,319 --> 00:02:52,480
all end-to-end security

70
00:02:52,480 --> 00:02:54,319
uh meaning that messages should be

71
00:02:54,319 --> 00:02:55,519
secure

72
00:02:55,519 --> 00:02:56,800
even from

73
00:02:56,800 --> 00:02:59,360
this delivery server when there's no

74
00:02:59,360 --> 00:03:00,640
leakage

75
00:03:00,640 --> 00:03:03,440
okay and now if there is liquid leakage

76
00:03:03,440 --> 00:03:05,760
pass from past messages should still

77
00:03:05,760 --> 00:03:09,120
remain secure despite this leakage

78
00:03:09,120 --> 00:03:11,440
okay and furthermore uh we asked for

79
00:03:11,440 --> 00:03:14,080
post-compromise security meaning that

80
00:03:14,080 --> 00:03:16,159
the protocol should sort of naturally

81
00:03:16,159 --> 00:03:18,720
recover from a leakage

82
00:03:18,720 --> 00:03:20,879
if the attacker is passive once this

83
00:03:20,879 --> 00:03:23,120
leakage happens

84
00:03:23,120 --> 00:03:25,760
and i say naturally because you know

85
00:03:25,760 --> 00:03:27,840
the protocol doesn't know

86
00:03:27,840 --> 00:03:31,200
if a user is corrupted

87
00:03:31,200 --> 00:03:33,519
and so this recovery yeah should just be

88
00:03:33,519 --> 00:03:36,799
natural uh meaning that yeah like you

89
00:03:36,799 --> 00:03:38,080
shouldn't have to

90
00:03:38,080 --> 00:03:40,560
actually restart the protocol in order

91
00:03:40,560 --> 00:03:43,280
to get security again

92
00:03:43,280 --> 00:03:45,200
okay and finally

93
00:03:45,200 --> 00:03:47,920
um we ask for resilience against bad

94
00:03:47,920 --> 00:03:50,159
randomness meaning that if there is no

95
00:03:50,159 --> 00:03:51,680
leakage

96
00:03:51,680 --> 00:03:53,599
then bad randomness should not hurt the

97
00:03:53,599 --> 00:03:55,040
protocol

98
00:03:55,040 --> 00:03:57,280
okay and sort of the non-trivial

99
00:03:57,280 --> 00:03:59,280
part of signal

100
00:03:59,280 --> 00:04:01,360
is that we want to achieve all these

101
00:04:01,360 --> 00:04:03,680
properties simultaneously

102
00:04:03,680 --> 00:04:06,480
okay so sort of intuitively

103
00:04:06,480 --> 00:04:08,720
uh forward security

104
00:04:08,720 --> 00:04:09,680
um

105
00:04:09,680 --> 00:04:14,239
is achieved by deleting old keys

106
00:04:14,239 --> 00:04:16,720
uh post compromise security is achieved

107
00:04:16,720 --> 00:04:19,519
by refreshing keys with new randomness

108
00:04:19,519 --> 00:04:22,079
and resilience against bad randomness is

109
00:04:22,079 --> 00:04:24,080
achieved by leveraging the security of

110
00:04:24,080 --> 00:04:26,639
old secure keys

111
00:04:26,639 --> 00:04:29,280
okay so what we do in our paper

112
00:04:29,280 --> 00:04:31,919
well first of all we only study the core

113
00:04:31,919 --> 00:04:33,919
double ratchet algorithm and not

114
00:04:33,919 --> 00:04:35,520
actually the initial key exchange

115
00:04:35,520 --> 00:04:37,520
protocol of signal

116
00:04:37,520 --> 00:04:40,560
okay and we provide a uc-based

117
00:04:40,560 --> 00:04:42,479
simulation style definition for the

118
00:04:42,479 --> 00:04:44,479
double ratchet

119
00:04:44,479 --> 00:04:46,320
we capture the security of the of the

120
00:04:46,320 --> 00:04:47,600
double ratchet

121
00:04:47,600 --> 00:04:49,520
more tightly than previous works that

122
00:04:49,520 --> 00:04:52,400
study the double ratchet

123
00:04:52,400 --> 00:04:54,560
and along the way we also capture the

124
00:04:54,560 --> 00:04:56,880
intuitively necessary building box for

125
00:04:56,880 --> 00:04:59,280
the security of the double ratchet

126
00:04:59,280 --> 00:05:02,560
and finally we uncover a minor weakness

127
00:05:02,560 --> 00:05:04,800
of the double ratchet and provide a very

128
00:05:04,800 --> 00:05:06,800
efficient fix

129
00:05:06,800 --> 00:05:09,360
so thank you

130
00:05:09,360 --> 00:05:10,960
please come to the talk if you want to

131
00:05:10,960 --> 00:05:14,280
learn more

