1
00:00:01,120 --> 00:00:02,879
hello welcome to this teaser for

2
00:00:02,879 --> 00:00:04,480
correlated pseudo-randomness from expand

3
00:00:04,480 --> 00:00:07,040
accumulate codes by elect boyle jeff

4
00:00:07,040 --> 00:00:10,480
blakuto yid kilboa yuvali shai lisa cole

5
00:00:10,480 --> 00:00:13,519
myself nicholas resh and peter scholl so

6
00:00:13,519 --> 00:00:14,880
this talk concerns multi-party

7
00:00:14,880 --> 00:00:16,800
computation when we have say two parties

8
00:00:16,800 --> 00:00:18,160
alice and bob each holding their own

9
00:00:18,160 --> 00:00:19,760
private inputs but unfortunately they

10
00:00:19,760 --> 00:00:21,600
don't trust each other however together

11
00:00:21,600 --> 00:00:23,279
they would like to communicate back and

12
00:00:23,279 --> 00:00:24,720
forth such that they can compute the

13
00:00:24,720 --> 00:00:26,480
value of some function f applied to

14
00:00:26,480 --> 00:00:28,160
their private inputs but they want to do

15
00:00:28,160 --> 00:00:29,840
this in such a way that nothing more is

16
00:00:29,840 --> 00:00:32,079
leaked about their private inputs

17
00:00:32,079 --> 00:00:33,760
okay and for this talk i'd encourage you

18
00:00:33,760 --> 00:00:36,079
just to think of the case of two parties

19
00:00:36,079 --> 00:00:38,320
so this work will fit into the npc with

20
00:00:38,320 --> 00:00:40,879
pre-processing paradigm so what is this

21
00:00:40,879 --> 00:00:42,320
basically it's been known for many years

22
00:00:42,320 --> 00:00:44,399
that if alice and bob were given some

23
00:00:44,399 --> 00:00:46,079
pre-shared randomness which satisfies

24
00:00:46,079 --> 00:00:47,520
some useful correlations say from a

25
00:00:47,520 --> 00:00:49,920
trusted dealer then we could obtain very

26
00:00:49,920 --> 00:00:51,600
fast even information theoretically

27
00:00:51,600 --> 00:00:54,079
secure mpc protocols basically by going

28
00:00:54,079 --> 00:00:55,360
gate by gate through a circuit

29
00:00:55,360 --> 00:00:56,480
describing the function they wish to

30
00:00:56,480 --> 00:00:58,239
compute and consuming the randomness as

31
00:00:58,239 --> 00:01:00,000
required

32
00:01:00,000 --> 00:01:01,520
however unfortunately

33
00:01:01,520 --> 00:01:03,039
the the traditional methods for actually

34
00:01:03,039 --> 00:01:04,559
sharing this required pre-shared

35
00:01:04,559 --> 00:01:06,799
randomness are very inefficient and this

36
00:01:06,799 --> 00:01:08,479
is actually the main bottleneck in these

37
00:01:08,479 --> 00:01:10,320
protocol designs

38
00:01:10,320 --> 00:01:11,840
however in the last six or seven years a

39
00:01:11,840 --> 00:01:13,520
new idea has emerged where basically

40
00:01:13,520 --> 00:01:15,840
instead of requiring full uh pre-shared

41
00:01:15,840 --> 00:01:18,320
randomness we try to compress it in such

42
00:01:18,320 --> 00:01:20,640
a way that maybe after it's uh

43
00:01:20,640 --> 00:01:22,720
decompressing it it's only pseudorandom

44
00:01:22,720 --> 00:01:24,320
but then this compression of the

45
00:01:24,320 --> 00:01:25,840
required pseudo-randomness to be much

46
00:01:25,840 --> 00:01:27,680
more efficiently shared

47
00:01:27,680 --> 00:01:29,759
so let's make this a bit more concrete

48
00:01:29,759 --> 00:01:31,439
so firstly it was suggested to

49
00:01:31,439 --> 00:01:32,560
constructor called pseudorandom

50
00:01:32,560 --> 00:01:34,240
correlation generators where basically

51
00:01:34,240 --> 00:01:36,880
the idea is that alice and bob

52
00:01:36,880 --> 00:01:38,720
could use some sort of protocol to share

53
00:01:38,720 --> 00:01:40,799
very short c's sa and sb and then

54
00:01:40,799 --> 00:01:42,960
silently with no more communication they

55
00:01:42,960 --> 00:01:45,280
can expand them into longer strings and

56
00:01:45,280 --> 00:01:47,040
these longer strings then will have many

57
00:01:47,040 --> 00:01:48,960
instances of the required

58
00:01:48,960 --> 00:01:51,280
correlations that they can then use when

59
00:01:51,280 --> 00:01:54,479
running their mpc protocol

60
00:01:54,479 --> 00:01:56,399
now um just as you know we can go from

61
00:01:56,399 --> 00:01:57,759
pseudorandom generations to the random

62
00:01:57,759 --> 00:01:59,520
functions we can also go to pseudorandom

63
00:01:59,520 --> 00:02:01,520
correlation functions here basically

64
00:02:01,520 --> 00:02:04,320
alice and bob will get two uh keys k a

65
00:02:04,320 --> 00:02:06,560
and kb and then they can get a pointwise

66
00:02:06,560 --> 00:02:08,639
axis is say an exponentially long string

67
00:02:08,639 --> 00:02:10,720
with a whole bunch of uh correlated

68
00:02:10,720 --> 00:02:12,319
randomnesses which they can use while

69
00:02:12,319 --> 00:02:13,920
running their protocol

70
00:02:13,920 --> 00:02:16,480
now uh notice that uh the pseudorandom

71
00:02:16,480 --> 00:02:17,760
correlation generators all the work is

72
00:02:17,760 --> 00:02:19,040
done in the offline phase whereas in

73
00:02:19,040 --> 00:02:20,400
pseudonym correlation functions pretty

74
00:02:20,400 --> 00:02:21,680
much all the work is done in the online

75
00:02:21,680 --> 00:02:23,520
phase when they have to actually uh

76
00:02:23,520 --> 00:02:26,160
obtain the pre-shared randomnesses

77
00:02:26,160 --> 00:02:27,680
so in this work we suggest sort of a

78
00:02:27,680 --> 00:02:29,200
more equitable distribution of the work

79
00:02:29,200 --> 00:02:30,959
between the offline and the online phase

80
00:02:30,959 --> 00:02:32,959
constructing what we uh term offline

81
00:02:32,959 --> 00:02:35,280
online pcgs so here alice and bob will

82
00:02:35,280 --> 00:02:36,879
initially share what we call offline

83
00:02:36,879 --> 00:02:40,000
keys and then run some silent uh offline

84
00:02:40,000 --> 00:02:43,120
uh uh algorithms which expand uh their

85
00:02:43,120 --> 00:02:45,040
short offline keys into some long

86
00:02:45,040 --> 00:02:47,120
strings y and yb and this can be done

87
00:02:47,120 --> 00:02:48,319
very efficiently ideally more

88
00:02:48,319 --> 00:02:49,760
efficiently than what would be done for

89
00:02:49,760 --> 00:02:51,280
a pcg

90
00:02:51,280 --> 00:02:53,120
but however these strings y and yb that

91
00:02:53,120 --> 00:02:54,879
they construct are not actually of the

92
00:02:54,879 --> 00:02:56,720
desired target correlation however when

93
00:02:56,720 --> 00:02:59,120
they do need some uh some of the

94
00:02:59,120 --> 00:03:00,720
randomness from the desired target

95
00:03:00,720 --> 00:03:02,560
correlation they can run a very fast

96
00:03:02,560 --> 00:03:03,599
online

97
00:03:03,599 --> 00:03:05,440
algorithm and these online algorithms

98
00:03:05,440 --> 00:03:07,120
only require about you know say looking

99
00:03:07,120 --> 00:03:09,440
up ten coordinates from y a and again

100
00:03:09,440 --> 00:03:10,800
these online algorithms are done without

101
00:03:10,800 --> 00:03:13,040
any communication so the online phase is

102
00:03:13,040 --> 00:03:14,560
also much faster than would typically be

103
00:03:14,560 --> 00:03:16,800
the case for a pcf

104
00:03:16,800 --> 00:03:18,640
all right in my meaning a brief amount

105
00:03:18,640 --> 00:03:20,400
of time i'll try to give a brief hint as

106
00:03:20,400 --> 00:03:22,000
to how we could construct these things

107
00:03:22,000 --> 00:03:23,280
so let's focus on what we call the

108
00:03:23,280 --> 00:03:24,959
volley correlation which essentially

109
00:03:24,959 --> 00:03:26,480
means that alice and bob have an

110
00:03:26,480 --> 00:03:28,239
additive secret sharing of a scalar

111
00:03:28,239 --> 00:03:29,519
vector product

112
00:03:29,519 --> 00:03:31,120
and it's been known it's known how to

113
00:03:31,120 --> 00:03:33,519
actually compress this so long as the

114
00:03:33,519 --> 00:03:35,360
vector a here that alice receives is

115
00:03:35,360 --> 00:03:37,280
guaranteed to be sparse so we have some

116
00:03:37,280 --> 00:03:39,360
sort of black box which spits out

117
00:03:39,360 --> 00:03:41,360
vectors a c naught c one and b

118
00:03:41,360 --> 00:03:43,440
satisfying b times a equals c not plus c

119
00:03:43,440 --> 00:03:45,519
one and furthermore a is guaranteed to

120
00:03:45,519 --> 00:03:47,360
be sparse but asides from that they look

121
00:03:47,360 --> 00:03:48,959
uniformly random they look as random as

122
00:03:48,959 --> 00:03:50,640
possible

123
00:03:50,640 --> 00:03:52,000
okay so what could we do to try to

124
00:03:52,000 --> 00:03:53,439
convert this into a genuine volley

125
00:03:53,439 --> 00:03:55,439
instance well suppose that we have some

126
00:03:55,439 --> 00:03:57,680
linear map h and we apply it to all the

127
00:03:57,680 --> 00:03:59,680
vectors that we obtain notice that the

128
00:03:59,680 --> 00:04:02,000
outputs then will still satisfy the v

129
00:04:02,000 --> 00:04:04,720
times a equals c not plus c1 correlation

130
00:04:04,720 --> 00:04:07,040
and furthermore assuming h is you know

131
00:04:07,040 --> 00:04:08,239
not too structured it doesn't have any

132
00:04:08,239 --> 00:04:10,080
weird behavior it's reasonable to

133
00:04:10,080 --> 00:04:12,239
suspect that h times a will look

134
00:04:12,239 --> 00:04:13,760
uniformly random

135
00:04:13,760 --> 00:04:15,680
and indeed this is exactly what the lpn

136
00:04:15,680 --> 00:04:17,120
assumption tells you if h is chosen

137
00:04:17,120 --> 00:04:19,120
uniformly at random however we can try

138
00:04:19,120 --> 00:04:20,478
to be a bit more aggressive you know we

139
00:04:20,478 --> 00:04:21,759
have some desires in terms of

140
00:04:21,759 --> 00:04:23,600
constructing these pcgs in terms of

141
00:04:23,600 --> 00:04:26,160
efficiency how can we add maybe some

142
00:04:26,160 --> 00:04:28,880
structure to h while still making this

143
00:04:28,880 --> 00:04:30,320
whole thing work

144
00:04:30,320 --> 00:04:32,080
so this is exactly what we do we

145
00:04:32,080 --> 00:04:33,680
construct what we call expand accumulate

146
00:04:33,680 --> 00:04:35,199
codes which have very nice desirable

147
00:04:35,199 --> 00:04:37,440
properties so firstly in the offline

148
00:04:37,440 --> 00:04:39,280
phase we just need to basically compute

149
00:04:39,280 --> 00:04:41,040
a prefix sum of the vector which we have

150
00:04:41,040 --> 00:04:43,520
received which can be done in parallel

151
00:04:43,520 --> 00:04:45,120
and in a very cash friendly manner by

152
00:04:45,120 --> 00:04:47,199
prefix sum i mean the prefix on mod 2.

153
00:04:47,199 --> 00:04:49,840
so this is a very fast operation

154
00:04:49,840 --> 00:04:51,600
and then later when we need to go online

155
00:04:51,600 --> 00:04:53,199
all we have to do is look up say 10

156
00:04:53,199 --> 00:04:54,800
coordinates from the pre-computed vector

157
00:04:54,800 --> 00:04:56,400
this accumulated vector

158
00:04:56,400 --> 00:04:57,440
and then

159
00:04:57,440 --> 00:04:59,520
output their sum so this is a very fast

160
00:04:59,520 --> 00:05:01,919
online operation with low locality

161
00:05:01,919 --> 00:05:03,360
further or more we give some security

162
00:05:03,360 --> 00:05:05,759
analysis to say that even if this vector

163
00:05:05,759 --> 00:05:08,320
here is sparse once we apply this matrix

164
00:05:08,320 --> 00:05:10,080
h to it we have reason to suspect that

165
00:05:10,080 --> 00:05:11,360
it looks uniformly random to a

166
00:05:11,360 --> 00:05:13,919
computationally bounded adversary

167
00:05:13,919 --> 00:05:15,600
okay that's all i have time to say um of

168
00:05:15,600 --> 00:05:16,720
course there's some more results in the

169
00:05:16,720 --> 00:05:19,039
paper you can view the iacr eprint if

170
00:05:19,039 --> 00:05:21,440
you like or i'd uh alternatively come

171
00:05:21,440 --> 00:05:22,720
see me at crypto and i'd be happy to

172
00:05:22,720 --> 00:05:23,919
answer more questions and of course the

173
00:05:23,919 --> 00:05:25,759
longer talk we'll have more details

174
00:05:25,759 --> 00:05:28,919
thank you

