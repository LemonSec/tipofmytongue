1
00:00:01,599 --> 00:00:04,480
the title of our paper is on the insider

2
00:00:04,480 --> 00:00:07,120
insider security of mls this is a joint

3
00:00:07,120 --> 00:00:09,599
work with joel alvin and daniel yost and

4
00:00:09,599 --> 00:00:11,440
i am martha

5
00:00:11,440 --> 00:00:13,679
the general area is that of secure group

6
00:00:13,679 --> 00:00:15,440
communication

7
00:00:15,440 --> 00:00:18,400
here the goal is for a dynamic group of

8
00:00:18,400 --> 00:00:21,039
parties to exchange confidential data

9
00:00:21,039 --> 00:00:23,920
over an insecure network by dynamic i

10
00:00:23,920 --> 00:00:25,840
mean that the group property such as the

11
00:00:25,840 --> 00:00:26,800
name

12
00:00:26,800 --> 00:00:29,439
the set of parties etc

13
00:00:29,439 --> 00:00:31,039
can change dynamically within an

14
00:00:31,039 --> 00:00:32,399
execution

15
00:00:32,399 --> 00:00:34,399
examples are very well known that

16
00:00:34,399 --> 00:00:36,160
includes group chats

17
00:00:36,160 --> 00:00:38,480
think whatsapp telegram signal whatever

18
00:00:38,480 --> 00:00:40,480
you use to communicate some of them

19
00:00:40,480 --> 00:00:42,079
might be secure and this is what we are

20
00:00:42,079 --> 00:00:43,680
talking about

21
00:00:43,680 --> 00:00:46,000
another example would be secure

22
00:00:46,000 --> 00:00:50,320
video or conference calls etc

23
00:00:50,480 --> 00:00:52,320
the core

24
00:00:52,320 --> 00:00:53,840
primitive

25
00:00:53,840 --> 00:00:56,160
that enables secure group communication

26
00:00:56,160 --> 00:00:58,079
in my opinion is something called

27
00:00:58,079 --> 00:01:01,760
continuous group key agreement or cgka

28
00:01:01,760 --> 00:01:04,159
here the goal is for a dynamic group of

29
00:01:04,159 --> 00:01:06,720
parties to exchange or agree on a

30
00:01:06,720 --> 00:01:10,720
sequence of shared symmetric group keys

31
00:01:10,720 --> 00:01:13,200
the way to think about cgk executions is

32
00:01:13,200 --> 00:01:15,040
that they create a sequence of epochs an

33
00:01:15,040 --> 00:01:18,240
epoch is simply a period of time

34
00:01:18,240 --> 00:01:20,560
where when the group has a fixed set of

35
00:01:20,560 --> 00:01:22,560
properties effects set of members

36
00:01:22,560 --> 00:01:24,880
affects georgie etc

37
00:01:24,880 --> 00:01:26,960
at any point in time any group member

38
00:01:26,960 --> 00:01:28,880
can decide to

39
00:01:28,880 --> 00:01:30,479
change these properties which means that

40
00:01:30,479 --> 00:01:32,320
they create a new epoch for example

41
00:01:32,320 --> 00:01:34,159
alice removes charlie this creates a new

42
00:01:34,159 --> 00:01:36,799
epoch with a new key unknown to charlie

43
00:01:36,799 --> 00:01:39,040
then maybe she adds dave and another

44
00:01:39,040 --> 00:01:41,680
thing that that can happen is that bob

45
00:01:41,680 --> 00:01:43,920
simply decides to refresh his secrets

46
00:01:43,920 --> 00:01:45,280
because maybe they have been lying

47
00:01:45,280 --> 00:01:48,240
around for too long

48
00:01:48,880 --> 00:01:49,759
one

49
00:01:49,759 --> 00:01:51,840
special thing about continuous group key

50
00:01:51,840 --> 00:01:53,520
agreement and group communication in

51
00:01:53,520 --> 00:01:55,520
general as we mean it

52
00:01:55,520 --> 00:01:57,439
is that it should be secure in the

53
00:01:57,439 --> 00:02:00,079
presence of continuous state corruptions

54
00:02:00,079 --> 00:02:02,000
and we want fine-grained security in

55
00:02:02,000 --> 00:02:04,000
this setting

56
00:02:04,000 --> 00:02:06,240
this can be shown in the picture

57
00:02:06,240 --> 00:02:08,959
for instance if the state of a party

58
00:02:08,959 --> 00:02:11,680
let's say bob leaks in epoch 2 this

59
00:02:11,680 --> 00:02:14,160
makes some epochs inherently insecure it

60
00:02:14,160 --> 00:02:16,640
will be 2 and 3 in this case

61
00:02:16,640 --> 00:02:18,400
but past epochs in this case 1 are

62
00:02:18,400 --> 00:02:20,160
secure this is a property sometimes

63
00:02:20,160 --> 00:02:21,280
called

64
00:02:21,280 --> 00:02:23,200
forward secrecy

65
00:02:23,200 --> 00:02:24,239
and then

66
00:02:24,239 --> 00:02:26,000
afterwards but when bob actually

67
00:02:26,000 --> 00:02:29,520
refreshes his secrets uh this restores

68
00:02:29,520 --> 00:02:31,120
security in epoch four which is

69
00:02:31,120 --> 00:02:32,640
sometimes called post compromise

70
00:02:32,640 --> 00:02:33,920
security

71
00:02:33,920 --> 00:02:37,360
so a fine green security uh meaning that

72
00:02:37,360 --> 00:02:39,519
different that some epochs are secure

73
00:02:39,519 --> 00:02:41,680
even when someone is corrupted in in

74
00:02:41,680 --> 00:02:44,480
some other epoch

75
00:02:44,480 --> 00:02:47,680
to summarize cgka is the core primitive

76
00:02:47,680 --> 00:02:48,400
for

77
00:02:48,400 --> 00:02:51,040
secure group communication you can see

78
00:02:51,040 --> 00:02:53,040
you can probably already see that many

79
00:02:53,040 --> 00:02:55,599
applications will bootstrap their

80
00:02:55,599 --> 00:02:57,440
security properties from the security

81
00:02:57,440 --> 00:02:59,360
properties of the shared group key it

82
00:02:59,360 --> 00:03:01,280
will be used to encrypt

83
00:03:01,280 --> 00:03:04,159
messages video stream

84
00:03:04,159 --> 00:03:07,120
authenticate members etc

85
00:03:07,120 --> 00:03:09,200
and this is why we look at cgka in this

86
00:03:09,200 --> 00:03:10,159
work

87
00:03:10,159 --> 00:03:13,040
which brings me to our contribution

88
00:03:13,040 --> 00:03:15,280
which is to prove that a particular cgka

89
00:03:15,280 --> 00:03:18,400
construction in this case called itk

90
00:03:18,400 --> 00:03:21,280
is a secure cgka against in the setting

91
00:03:21,280 --> 00:03:23,760
with malicious insiders

92
00:03:23,760 --> 00:03:26,400
itk is the cgka

93
00:03:26,400 --> 00:03:28,560
construction of the messaging layer

94
00:03:28,560 --> 00:03:31,040
security or mls protocol it's an

95
00:03:31,040 --> 00:03:33,360
upcoming rfc standard

96
00:03:33,360 --> 00:03:34,799
and uh

97
00:03:34,799 --> 00:03:36,400
what part of our contribution was

98
00:03:36,400 --> 00:03:38,080
actually to isolate the parts of the

99
00:03:38,080 --> 00:03:40,799
protocol that make up idk it's not that

100
00:03:40,799 --> 00:03:41,599
in

101
00:03:41,599 --> 00:03:44,400
that easy task when if you know rfc

102
00:03:44,400 --> 00:03:47,040
standards and we also have pseudocode

103
00:03:47,040 --> 00:03:48,480
which makes it a bit easier to

104
00:03:48,480 --> 00:03:50,400
understand

105
00:03:50,400 --> 00:03:52,799
our next contribution was to define this

106
00:03:52,799 --> 00:03:55,040
malicious insider model

107
00:03:55,040 --> 00:03:57,280
where we prove security of idk it's the

108
00:03:57,280 --> 00:03:59,680
strongest model considered so far the

109
00:03:59,680 --> 00:04:02,239
adversary can fully control the network

110
00:04:02,239 --> 00:04:05,200
and unlike in any other model they also

111
00:04:05,200 --> 00:04:07,200
fully control the pki

112
00:04:07,200 --> 00:04:09,519
and we have very fine green guarantees

113
00:04:09,519 --> 00:04:12,319
depending on how pki behaves for example

114
00:04:12,319 --> 00:04:15,840
one epoch can be secure if a good pki

115
00:04:15,840 --> 00:04:18,560
keys are used another peak hip can be

116
00:04:18,560 --> 00:04:19,680
insecure

117
00:04:19,680 --> 00:04:22,240
because some parties use pad pki correct

118
00:04:22,240 --> 00:04:26,080
pki keys which destroys security

119
00:04:26,080 --> 00:04:29,280
that would be it except um life is never

120
00:04:29,280 --> 00:04:32,560
that great so actually we discovered uh

121
00:04:32,560 --> 00:04:35,199
real attacks on itk during our analysis

122
00:04:35,199 --> 00:04:36,320
because of these attacks we couldn't

123
00:04:36,320 --> 00:04:38,720
prove it secure but fortunately they

124
00:04:38,720 --> 00:04:40,720
could be easily fixed the fixes are now

125
00:04:40,720 --> 00:04:42,880
incorporated into the standard

126
00:04:42,880 --> 00:04:43,840
um

127
00:04:43,840 --> 00:04:46,080
and after the fixes we proved security

128
00:04:46,080 --> 00:04:47,280
of

129
00:04:47,280 --> 00:04:50,320
of idk so idk is a security k this is

130
00:04:50,320 --> 00:04:52,880
our result

131
00:04:52,880 --> 00:04:55,360
thank you and i invite you to

132
00:04:55,360 --> 00:04:58,320
look at the paper

