1
00:00:00,880 --> 00:00:02,960
hello everyone today i'm going to talk

2
00:00:02,960 --> 00:00:05,279
about oblivious message retrieval it's a

3
00:00:05,279 --> 00:00:08,719
joint work with iran trumper

4
00:00:08,800 --> 00:00:10,960
let's first talk about motivation for

5
00:00:10,960 --> 00:00:13,200
anonymous message delivery systems the

6
00:00:13,200 --> 00:00:14,960
sender wants to send some pillows that

7
00:00:14,960 --> 00:00:17,680
can be text messages or coin transfers

8
00:00:17,680 --> 00:00:20,400
to some central database in applications

9
00:00:20,400 --> 00:00:22,720
like cryptocurrency is realized by a

10
00:00:22,720 --> 00:00:24,800
bulletin board and in apps like signal

11
00:00:24,800 --> 00:00:26,400
is a central server

12
00:00:26,400 --> 00:00:28,080
then the recipients want to retrieve the

13
00:00:28,080 --> 00:00:31,599
messages addressed to them

14
00:00:31,599 --> 00:00:33,040
there have been lots of work studying

15
00:00:33,040 --> 00:00:34,800
about the sending privacy and bulletin

16
00:00:34,800 --> 00:00:36,640
board privacy but how about recipient

17
00:00:36,640 --> 00:00:37,760
privacy

18
00:00:37,760 --> 00:00:40,079
how can a recipient retrieve pertinent

19
00:00:40,079 --> 00:00:42,079
messages without leaking identity or

20
00:00:42,079 --> 00:00:44,800
metadata

21
00:00:44,800 --> 00:00:46,800
natively the recipient can simply

22
00:00:46,800 --> 00:00:49,120
download the whole database and then

23
00:00:49,120 --> 00:00:51,199
distill themselves locally but this can

24
00:00:51,199 --> 00:00:53,120
be too expensive in both bandwidth and

25
00:00:53,120 --> 00:00:54,559
computation

26
00:00:54,559 --> 00:00:56,719
alternatively we can introduce a third

27
00:00:56,719 --> 00:00:59,120
party which we call a detector the

28
00:00:59,120 --> 00:01:01,280
detector will hold the board and

29
00:01:01,280 --> 00:01:04,239
help the recipient distill the board and

30
00:01:04,239 --> 00:01:06,159
collect some digest and send back to the

31
00:01:06,159 --> 00:01:08,240
recipients that contain the pertinent

32
00:01:08,240 --> 00:01:10,640
messages

33
00:01:10,960 --> 00:01:12,799
there have been two reason works the

34
00:01:12,799 --> 00:01:15,119
first one is for the mass detection it

35
00:01:15,119 --> 00:01:18,159
provides decoy-based privacy

36
00:01:18,159 --> 00:01:19,840
therefore it has a relatively weak

37
00:01:19,840 --> 00:01:22,560
privacy guarantee and also

38
00:01:22,560 --> 00:01:24,720
the computation and communication cost

39
00:01:24,720 --> 00:01:27,360
are both dependent on the privacy it can

40
00:01:27,360 --> 00:01:29,840
it provides the second work is called

41
00:01:29,840 --> 00:01:31,520
private signaling it has two

42
00:01:31,520 --> 00:01:33,840
constructions but both both of them have

43
00:01:33,840 --> 00:01:35,439
slightly strong environmental

44
00:01:35,439 --> 00:01:36,560
assumptions

45
00:01:36,560 --> 00:01:38,400
the third one the first one assumes

46
00:01:38,400 --> 00:01:41,119
trusted hardware like intel sgx

47
00:01:41,119 --> 00:01:43,600
the second one assumes two communicating

48
00:01:43,600 --> 00:01:46,479
but not including servers

49
00:01:46,479 --> 00:01:48,159
for functionality we want to achieve

50
00:01:48,159 --> 00:01:50,720
oblivious message detection and an

51
00:01:50,720 --> 00:01:52,640
oblivious message retrieval for

52
00:01:52,640 --> 00:01:53,759
detection

53
00:01:53,759 --> 00:01:56,159
only the indices will be sent back

54
00:01:56,159 --> 00:01:58,079
to the recipients for retrieval the

55
00:01:58,079 --> 00:02:00,479
payloads will be sent back to the

56
00:02:00,479 --> 00:02:03,119
recipients

57
00:02:03,119 --> 00:02:04,560
the first goal is that we want the

58
00:02:04,560 --> 00:02:06,240
detector to learn nothing about a

59
00:02:06,240 --> 00:02:08,479
recipient it doesn't learn which

60
00:02:08,479 --> 00:02:10,160
messages are pertinent and which

61
00:02:10,160 --> 00:02:11,920
messages are not

62
00:02:11,920 --> 00:02:13,920
it also doesn't learn who is doing the

63
00:02:13,920 --> 00:02:16,000
retrieval with what keys

64
00:02:16,000 --> 00:02:17,760
the second goal is that we want the

65
00:02:17,760 --> 00:02:19,760
digest size to be much smaller than the

66
00:02:19,760 --> 00:02:21,840
bulleted size ideally it should only be

67
00:02:21,840 --> 00:02:24,000
proportional to the number of presented

68
00:02:24,000 --> 00:02:26,480
messages

69
00:02:26,640 --> 00:02:28,560
our solution is clue based detection

70
00:02:28,560 --> 00:02:30,160
retrieval

71
00:02:30,160 --> 00:02:31,920
the recipient holds some secret keys and

72
00:02:31,920 --> 00:02:33,519
it used the secret keys to generate some

73
00:02:33,519 --> 00:02:35,680
public keys that contain clue key and

74
00:02:35,680 --> 00:02:37,680
detection key the sender will use the

75
00:02:37,680 --> 00:02:39,840
glue key to generate the glue and put it

76
00:02:39,840 --> 00:02:41,360
together with the payload to the

77
00:02:41,360 --> 00:02:43,120
bulletin board

78
00:02:43,120 --> 00:02:45,280
and then the the recipient will send the

79
00:02:45,280 --> 00:02:47,120
detection key to the detector the

80
00:02:47,120 --> 00:02:49,200
detector will have the board then use

81
00:02:49,200 --> 00:02:51,760
the clues payloads and the detection

82
00:02:51,760 --> 00:02:54,080
keys to accumulate some digest and send

83
00:02:54,080 --> 00:02:56,480
this digest back to the recipient the

84
00:02:56,480 --> 00:02:58,640
recipient will then process and get the

85
00:02:58,640 --> 00:03:01,440
plaintext payloads

86
00:03:01,440 --> 00:03:03,200
our result is that we have constructed

87
00:03:03,200 --> 00:03:05,120
omr and omg

88
00:03:05,120 --> 00:03:06,480
our approach is based on fully

89
00:03:06,480 --> 00:03:08,319
homomorphic encryption based on standard

90
00:03:08,319 --> 00:03:10,159
ring output assumption together with

91
00:03:10,159 --> 00:03:11,760
some coding techniques like sparse

92
00:03:11,760 --> 00:03:13,840
random linear coding we have also

93
00:03:13,840 --> 00:03:15,280
applied some application driven

94
00:03:15,280 --> 00:03:17,920
optimizations like the hybrid use of bfv

95
00:03:17,920 --> 00:03:20,319
and pvw encryption and also vfe

96
00:03:20,319 --> 00:03:22,239
certificate circuit and

97
00:03:22,239 --> 00:03:25,280
error optimization etc

98
00:03:25,280 --> 00:03:26,959
we have fully implemented and

99
00:03:26,959 --> 00:03:29,599
benchmarked our constructions using sale

100
00:03:29,599 --> 00:03:33,159
and policy libraries

101
00:03:33,280 --> 00:03:35,280
for security our constructions are fully

102
00:03:35,280 --> 00:03:37,200
private and we have also observed that

103
00:03:37,200 --> 00:03:39,200
the privacy prior schemes are from

104
00:03:39,200 --> 00:03:40,959
vulnerable to attacks

105
00:03:40,959 --> 00:03:43,519
of envisioned applications like

106
00:03:43,519 --> 00:03:45,200
denial of service attacks and key

107
00:03:45,200 --> 00:03:47,120
linkability attacks we define the

108
00:03:47,120 --> 00:03:49,440
stronger notions of security and achieve

109
00:03:49,440 --> 00:03:52,080
them to against those attacks

110
00:03:52,080 --> 00:03:53,760
lastly let's take a look at the

111
00:03:53,760 --> 00:03:56,319
performance you may be wondering whether

112
00:03:56,319 --> 00:03:58,959
the use of fhe is practical as you can

113
00:03:58,959 --> 00:04:01,200
see it concretely is quite practical it

114
00:04:01,200 --> 00:04:02,959
costs roughly one dollar per minute

115
00:04:02,959 --> 00:04:04,799
message scan based on our benchmark

116
00:04:04,799 --> 00:04:07,680
using google cloud instances

117
00:04:07,680 --> 00:04:09,680
asymptotically our constructions are

118
00:04:09,680 --> 00:04:12,000
also the best for a large amount of

119
00:04:12,000 --> 00:04:14,159
messages and furthermore we have the

120
00:04:14,159 --> 00:04:16,959
fastest fastest detection even compared

121
00:04:16,959 --> 00:04:20,959
to mpc and sgx based solutions

122
00:04:20,959 --> 00:04:23,680
lastly as a bonus we have a new lattice

123
00:04:23,680 --> 00:04:25,759
hardness conjecture about ldb based

124
00:04:25,759 --> 00:04:26,880
encryption

125
00:04:26,880 --> 00:04:28,639
this is needed just for the os

126
00:04:28,639 --> 00:04:30,400
resistance but it's increasingly

127
00:04:30,400 --> 00:04:32,320
different from the standard lw

128
00:04:32,320 --> 00:04:34,320
assumptions

129
00:04:34,320 --> 00:04:36,720
if you are interested in our work you're

130
00:04:36,720 --> 00:04:38,880
very welcome to watch our food talk

131
00:04:38,880 --> 00:04:42,919
thank you all very much for listening

