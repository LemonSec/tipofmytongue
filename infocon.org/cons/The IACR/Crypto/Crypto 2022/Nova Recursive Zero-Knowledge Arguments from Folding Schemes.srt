1
00:00:00,399 --> 00:00:02,720
we will be presenting nova recursive

2
00:00:02,720 --> 00:00:04,400
zero knowledge arguments from a new

3
00:00:04,400 --> 00:00:07,200
notion known as folding schemes

4
00:00:07,200 --> 00:00:09,360
our goal is to design practical proofs

5
00:00:09,360 --> 00:00:11,920
for recursive computation what i mean by

6
00:00:11,920 --> 00:00:13,519
this is that we want to design a proof

7
00:00:13,519 --> 00:00:15,360
system that allows us to prove that a

8
00:00:15,360 --> 00:00:17,760
non-deterministic function f applied n

9
00:00:17,760 --> 00:00:20,320
times to an initial input z zero results

10
00:00:20,320 --> 00:00:22,720
in an output z n and i say

11
00:00:22,720 --> 00:00:24,240
non-deterministic because we want to

12
00:00:24,240 --> 00:00:26,400
allow f to take arbitrary witnesses

13
00:00:26,400 --> 00:00:28,000
along the way

14
00:00:28,000 --> 00:00:29,359
now there are various cryptographic

15
00:00:29,359 --> 00:00:31,679
applications where this could be useful

16
00:00:31,679 --> 00:00:33,920
for instance if f is a delay function

17
00:00:33,920 --> 00:00:35,520
then such a proof system allows us to

18
00:00:35,520 --> 00:00:37,840
build verifiable delay functions

19
00:00:37,840 --> 00:00:40,640
if f is a step of a virtual machine

20
00:00:40,640 --> 00:00:42,320
then we can use such a proof system to

21
00:00:42,320 --> 00:00:44,640
verifiably execute virtual machines

22
00:00:44,640 --> 00:00:46,960
potentially in xero knowledge

23
00:00:46,960 --> 00:00:49,600
and finally if f validates blockchain

24
00:00:49,600 --> 00:00:51,280
transactions then we can use such a

25
00:00:51,280 --> 00:00:53,440
proof system to very quickly and very

26
00:00:53,440 --> 00:00:55,840
efficiently prove many updates to the

27
00:00:55,840 --> 00:00:58,320
blockchain in fact such a system is

28
00:00:58,320 --> 00:01:00,399
being used today in practice and it's

29
00:01:00,399 --> 00:01:03,520
known as zk roll ups

30
00:01:03,520 --> 00:01:05,519
now the naive approach to building such

31
00:01:05,519 --> 00:01:07,760
a proof system is to use a snark to

32
00:01:07,760 --> 00:01:09,840
monolithically prove an enrolled

33
00:01:09,840 --> 00:01:12,240
statement that is we can take n copies

34
00:01:12,240 --> 00:01:14,240
of f squeeze it all into an arithmetic

35
00:01:14,240 --> 00:01:16,960
circuit and then prove satisfiability of

36
00:01:16,960 --> 00:01:18,320
this circuit

37
00:01:18,320 --> 00:01:20,320
while this approach nominally works

38
00:01:20,320 --> 00:01:22,240
there are several drawbacks

39
00:01:22,240 --> 00:01:24,240
first this fixes and ahead of time which

40
00:01:24,240 --> 00:01:26,400
makes it not very useful for any many

41
00:01:26,400 --> 00:01:28,240
practical applications

42
00:01:28,240 --> 00:01:29,920
for instance in the case of virtual

43
00:01:29,920 --> 00:01:32,079
machines the number of iterations n

44
00:01:32,079 --> 00:01:34,000
might actually depend on the input

45
00:01:34,000 --> 00:01:35,680
program

46
00:01:35,680 --> 00:01:37,360
moreover the prover memory and the

47
00:01:37,360 --> 00:01:39,360
verifier preprocessing time are

48
00:01:39,360 --> 00:01:44,000
dependent on f the size of f times n and

49
00:01:44,000 --> 00:01:46,320
moreover the verifier time might also

50
00:01:46,320 --> 00:01:48,560
depend on n depending on this note that

51
00:01:48,560 --> 00:01:51,119
we're using

52
00:01:51,200 --> 00:01:53,360
to get around these sorts of issues

53
00:01:53,360 --> 00:01:55,040
valiant introduces the notion of

54
00:01:55,040 --> 00:01:57,600
incrementally verifiable computation in

55
00:01:57,600 --> 00:01:59,680
which we can write a proof for a single

56
00:01:59,680 --> 00:02:02,240
iteration of f we can also increment

57
00:02:02,240 --> 00:02:05,759
this proof over time to capture more and

58
00:02:05,759 --> 00:02:07,040
more

59
00:02:07,040 --> 00:02:09,119
iterations of f

60
00:02:09,119 --> 00:02:10,800
eventually we want to be able to keep

61
00:02:10,800 --> 00:02:12,800
incrementing these proofs until we can

62
00:02:12,800 --> 00:02:16,640
get a proof for all n iterations of f

63
00:02:16,640 --> 00:02:18,480
there are two design challenges when

64
00:02:18,480 --> 00:02:20,879
designing an ivc proof system

65
00:02:20,879 --> 00:02:22,640
specifically we want to make sure these

66
00:02:22,640 --> 00:02:25,440
proofs can handle any arbitrary end that

67
00:02:25,440 --> 00:02:27,280
means we can increment to any level that

68
00:02:27,280 --> 00:02:28,480
we want to

69
00:02:28,480 --> 00:02:30,080
and moreover we want to make sure that

70
00:02:30,080 --> 00:02:32,640
these proofs do not grow in size in

71
00:02:32,640 --> 00:02:34,959
terms of n

72
00:02:34,959 --> 00:02:38,239
now nova is one of the most efficient zk

73
00:02:38,239 --> 00:02:40,720
snarks for recursive computation

74
00:02:40,720 --> 00:02:42,879
and the way we do it is to design the

75
00:02:42,879 --> 00:02:45,680
most efficient ibc scheme to date using

76
00:02:45,680 --> 00:02:49,280
a new notion known as folding schemes

77
00:02:49,280 --> 00:02:51,040
a floating scheme reduces the task of

78
00:02:51,040 --> 00:02:53,599
checking two instances in relation to

79
00:02:53,599 --> 00:02:56,000
the task of checking a single instance

80
00:02:56,000 --> 00:02:57,519
in that relation

81
00:02:57,519 --> 00:02:59,120
specifically we show that a folding

82
00:02:59,120 --> 00:03:03,440
scheme for np relations implies ivc

83
00:03:03,440 --> 00:03:05,599
we designed a new characterization of np

84
00:03:05,599 --> 00:03:07,519
called relaxed r1cs which is

85
00:03:07,519 --> 00:03:11,120
specifically amenable for folding

86
00:03:11,120 --> 00:03:14,000
the proofs resulting for our ibc scheme

87
00:03:14,000 --> 00:03:17,120
are linear in the size of the function f

88
00:03:17,120 --> 00:03:19,280
in the case that we want even more

89
00:03:19,280 --> 00:03:21,680
efficiency guarantees we introduce a

90
00:03:21,680 --> 00:03:24,400
layer of both succinctness and zero

91
00:03:24,400 --> 00:03:25,599
knowledge

92
00:03:25,599 --> 00:03:27,040
specifically we introduce a zero

93
00:03:27,040 --> 00:03:29,680
knowledge proof system for relaxed r1cs

94
00:03:29,680 --> 00:03:31,280
and we use this zero knowledge proof

95
00:03:31,280 --> 00:03:34,080
system to design efficient zk snarks

96
00:03:34,080 --> 00:03:38,159
that prove the existence of ivc proofs

97
00:03:38,159 --> 00:03:40,959
now these asymptotically and concretely

98
00:03:40,959 --> 00:03:43,440
reduce the size of our ivc proofs to

99
00:03:43,440 --> 00:03:45,360
make a very efficient recursive proof

100
00:03:45,360 --> 00:03:46,720
system

101
00:03:46,720 --> 00:03:49,920
all in all nova represents the fastest

102
00:03:49,920 --> 00:03:52,239
proof system for recursive computation

103
00:03:52,239 --> 00:03:54,480
specifically nova is implemented in rust

104
00:03:54,480 --> 00:03:56,879
in about 6 000 lines of code

105
00:03:56,879 --> 00:03:59,120
nova features the smallest per step

106
00:03:59,120 --> 00:04:02,239
period time that's dominated per step by

107
00:04:02,239 --> 00:04:05,120
just two multi exponentiations where the

108
00:04:05,120 --> 00:04:07,200
size of each multiple exponentiation

109
00:04:07,200 --> 00:04:10,560
depends on the size of f plus some small

110
00:04:10,560 --> 00:04:12,239
constant c

111
00:04:12,239 --> 00:04:14,239
in practice to prove a function

112
00:04:14,239 --> 00:04:16,880
representable as one million gates it

113
00:04:16,880 --> 00:04:20,238
takes roughly 1.1 seconds per recursion

114
00:04:20,238 --> 00:04:21,358
step

115
00:04:21,358 --> 00:04:23,600
the recursion overhead itself is also

116
00:04:23,600 --> 00:04:25,280
incredibly small

117
00:04:25,280 --> 00:04:26,479
roughly

118
00:04:26,479 --> 00:04:28,639
it's dominated by two scalar

119
00:04:28,639 --> 00:04:30,479
multiplications and translated to

120
00:04:30,479 --> 00:04:32,320
arithmetic circuit constraints this

121
00:04:32,320 --> 00:04:35,520
translates to 20 000 gates

122
00:04:35,520 --> 00:04:38,160
moreover adding the layer of sickness

123
00:04:38,160 --> 00:04:40,639
our proofs end up being logarithmic in

124
00:04:40,639 --> 00:04:43,440
the size of the original function f

125
00:04:43,440 --> 00:04:45,199
specifically these compressed proofs

126
00:04:45,199 --> 00:04:48,240
four million gauge circuits are roughly

127
00:04:48,240 --> 00:04:50,880
eight kilobytes and this is independent

128
00:04:50,880 --> 00:04:54,400
of the number of iterations n

129
00:04:54,400 --> 00:04:56,080
in the full talk we will be talking

130
00:04:56,080 --> 00:04:57,840
about how we derive

131
00:04:57,840 --> 00:04:58,560
a

132
00:04:58,560 --> 00:05:01,440
characterization of np relaxed r1cs that

133
00:05:01,440 --> 00:05:03,360
is amenable to folding

134
00:05:03,360 --> 00:05:05,440
we then talk about how to design a

135
00:05:05,440 --> 00:05:08,320
folding scheme for rockstar 1cs and then

136
00:05:08,320 --> 00:05:10,479
show how such a folding scheme can be

137
00:05:10,479 --> 00:05:12,960
used to construct ibc

138
00:05:12,960 --> 00:05:15,599
thank you

