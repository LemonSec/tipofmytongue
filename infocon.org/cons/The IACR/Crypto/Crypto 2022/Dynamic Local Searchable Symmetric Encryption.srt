1
00:00:00,240 --> 00:00:01,599
hello everyone my name is michael

2
00:00:01,599 --> 00:00:03,360
reichler and i quickly introduced the

3
00:00:03,360 --> 00:00:05,040
article dynamic local searchable

4
00:00:05,040 --> 00:00:07,680
symmetric encryption or sse for short

5
00:00:07,680 --> 00:00:09,280
that i wrote with please me know my

6
00:00:09,280 --> 00:00:11,280
supervisor

7
00:00:11,280 --> 00:00:12,799
even though this is only a short video

8
00:00:12,799 --> 00:00:14,480
abstract in the beginning i will quickly

9
00:00:14,480 --> 00:00:16,560
recap search with symmetric encryption

10
00:00:16,560 --> 00:00:17,840
so the definition and the main

11
00:00:17,840 --> 00:00:20,080
motivation behind it then i will talk

12
00:00:20,080 --> 00:00:22,400
about memory efficiency and the two

13
00:00:22,400 --> 00:00:25,439
variants so locality and page efficiency

14
00:00:25,439 --> 00:00:28,880
and then lastly i will recap our results

15
00:00:28,880 --> 00:00:30,480
the first result we obtained is the

16
00:00:30,480 --> 00:00:32,558
definition and analyzes of a weighted

17
00:00:32,558 --> 00:00:34,399
variant of two choice which is a very

18
00:00:34,399 --> 00:00:36,800
classical balls into bins problem

19
00:00:36,800 --> 00:00:38,480
then we use this variant in order to

20
00:00:38,480 --> 00:00:41,120
construct memory efficient dynamic sse

21
00:00:41,120 --> 00:00:42,239
schemes

22
00:00:42,239 --> 00:00:43,120
which

23
00:00:43,120 --> 00:00:44,960
are the first of its kind

24
00:00:44,960 --> 00:00:46,000
and

25
00:00:46,000 --> 00:00:48,480
have very good efficiency guarantees

26
00:00:48,480 --> 00:00:50,559
and lastly i will quickly

27
00:00:50,559 --> 00:00:52,160
recap the connection that we drew

28
00:00:52,160 --> 00:00:54,960
between locality and page efficiency

29
00:00:54,960 --> 00:00:56,239
the main goal behind searchable

30
00:00:56,239 --> 00:00:58,079
symmetric encryption is to outsource

31
00:00:58,079 --> 00:01:00,640
confidential information so assume for

32
00:01:00,640 --> 00:01:02,800
example we have a lot of documents such

33
00:01:02,800 --> 00:01:05,519
as medical information emails

34
00:01:05,519 --> 00:01:08,240
or police records

35
00:01:08,240 --> 00:01:11,680
all of which are identified via ids

36
00:01:11,680 --> 00:01:13,439
and we need to outsource this

37
00:01:13,439 --> 00:01:14,960
information because we might not have

38
00:01:14,960 --> 00:01:18,080
enough space locally

39
00:01:18,320 --> 00:01:22,000
so in order to do this generally

40
00:01:22,000 --> 00:01:24,720
we can just encrypt our data and put it

41
00:01:24,720 --> 00:01:27,360
on the server but of course this is not

42
00:01:27,360 --> 00:01:29,119
very satisfying because if we just

43
00:01:29,119 --> 00:01:30,880
encrypted without

44
00:01:30,880 --> 00:01:32,799
any preparation

45
00:01:32,799 --> 00:01:34,640
then if we later on want to retrieve

46
00:01:34,640 --> 00:01:36,720
information we would have to download

47
00:01:36,720 --> 00:01:39,439
the entire block of encrypted data

48
00:01:39,439 --> 00:01:42,240
because otherwise there is no guarantee

49
00:01:42,240 --> 00:01:43,200
of

50
00:01:43,200 --> 00:01:45,439
efficient interaction with our data

51
00:01:45,439 --> 00:01:46,960
and this is where searchable symmetric

52
00:01:46,960 --> 00:01:48,799
encryption comes in because it allows us

53
00:01:48,799 --> 00:01:51,520
to first encrypt our data and then later

54
00:01:51,520 --> 00:01:53,759
on efficiently interact with it in the

55
00:01:53,759 --> 00:01:56,799
form of sqli queries

56
00:01:56,799 --> 00:01:58,560
in this work we specifically looked at

57
00:01:58,560 --> 00:02:00,719
keyword queries where we first supply a

58
00:02:00,719 --> 00:02:03,200
keyword and then expect to retrieve the

59
00:02:03,200 --> 00:02:06,399
identifiers that match this keyword

60
00:02:06,399 --> 00:02:10,479
so given covet i expect to retrieve id1

61
00:02:10,479 --> 00:02:13,520
and id3 which are the identifiers of all

62
00:02:13,520 --> 00:02:15,760
the documents that match the keyword

63
00:02:15,760 --> 00:02:18,080
code

64
00:02:18,080 --> 00:02:20,959
so essentially the reverse index is a

65
00:02:20,959 --> 00:02:24,800
set of pairs of keywords and identifier

66
00:02:24,800 --> 00:02:28,080
lists drawn as such

67
00:02:28,959 --> 00:02:32,319
and in sse we now try to

68
00:02:32,319 --> 00:02:34,560
encrypt the reverse index

69
00:02:34,560 --> 00:02:37,519
such that we first of all can

70
00:02:37,519 --> 00:02:39,920
store the encrypted identifier lists on

71
00:02:39,920 --> 00:02:41,120
the server

72
00:02:41,120 --> 00:02:43,840
and also efficiently retrieve them if we

73
00:02:43,840 --> 00:02:47,200
supply an access token

74
00:02:47,200 --> 00:02:51,360
here drawn as squares

75
00:02:51,360 --> 00:02:53,599
in action we can use the setup of sse to

76
00:02:53,599 --> 00:02:55,840
encrypt our data then we can move the

77
00:02:55,840 --> 00:02:58,000
encrypted database to the server and

78
00:02:58,000 --> 00:02:59,840
delete all our information locally

79
00:02:59,840 --> 00:03:01,840
because now of course the server holds

80
00:03:01,840 --> 00:03:04,080
our information permanently

81
00:03:04,080 --> 00:03:06,000
and then later on we can still interact

82
00:03:06,000 --> 00:03:08,959
with our data by supplying for example

83
00:03:08,959 --> 00:03:10,959
search queries where we give the access

84
00:03:10,959 --> 00:03:13,519
token to the server for a given keyword

85
00:03:13,519 --> 00:03:15,280
and then we can retrieve the matching

86
00:03:15,280 --> 00:03:18,319
identifiers for this keyword in this

87
00:03:18,319 --> 00:03:20,400
work we also look at update queries

88
00:03:20,400 --> 00:03:22,319
where we can supply update tokens in

89
00:03:22,319 --> 00:03:25,680
order to add or remove identifiers

90
00:03:25,680 --> 00:03:27,920
here for example the blue update token

91
00:03:27,920 --> 00:03:30,480
allows us to add the pink identifier to

92
00:03:30,480 --> 00:03:33,120
the blue list and then later on if we

93
00:03:33,120 --> 00:03:36,080
were to search the blue list again we

94
00:03:36,080 --> 00:03:38,799
would expect to also retrieve the pink

95
00:03:38,799 --> 00:03:41,440
identifier into in addition to the blue

96
00:03:41,440 --> 00:03:43,760
identifiers

97
00:03:43,760 --> 00:03:45,680
and of course because we provide

98
00:03:45,680 --> 00:03:47,280
confidential information we want to

99
00:03:47,280 --> 00:03:48,879
ensure that the server learns as little

100
00:03:48,879 --> 00:03:50,560
information as possible

101
00:03:50,560 --> 00:03:52,480
so even though the server might be an

102
00:03:52,480 --> 00:03:54,159
honest but curious snake

103
00:03:54,159 --> 00:03:55,760
that tries to learn as much information

104
00:03:55,760 --> 00:03:58,000
as possible about the confidential data

105
00:03:58,000 --> 00:04:00,799
that we provided we want to provably

106
00:04:00,799 --> 00:04:03,360
ensure that not much information can be

107
00:04:03,360 --> 00:04:04,560
learned

108
00:04:04,560 --> 00:04:06,319
and if you're curious about how we

109
00:04:06,319 --> 00:04:08,560
quantify not much then i will refer you

110
00:04:08,560 --> 00:04:10,879
to the main talk at crypto where i will

111
00:04:10,879 --> 00:04:12,840
talk a bit more about the leakage of our

112
00:04:12,840 --> 00:04:15,680
schemes now that we know what soc is i

113
00:04:15,680 --> 00:04:17,759
will quickly recap the main notions of

114
00:04:17,759 --> 00:04:19,839
efficiency of sse

115
00:04:19,839 --> 00:04:22,240
the first notion is locality which is

116
00:04:22,240 --> 00:04:24,560
important for hdds

117
00:04:24,560 --> 00:04:26,479
so if you were to store your encrypted

118
00:04:26,479 --> 00:04:29,360
data on hdds and the second notion is

119
00:04:29,360 --> 00:04:31,120
page efficiency which is important if

120
00:04:31,120 --> 00:04:33,440
you store your data on ssds

121
00:04:33,440 --> 00:04:35,280
and in this work we basically construct

122
00:04:35,280 --> 00:04:37,840
efficient sse schemes for both notions

123
00:04:37,840 --> 00:04:40,479
of efficiency

124
00:04:40,479 --> 00:04:43,919
in more detail we first define the

125
00:04:43,919 --> 00:04:46,720
allocation scheme layer two choice which

126
00:04:46,720 --> 00:04:49,040
is basically a variant of standard two

127
00:04:49,040 --> 00:04:51,280
choice that also works with weighted

128
00:04:51,280 --> 00:04:53,600
items and has all these standard bounds

129
00:04:53,600 --> 00:04:56,560
we know and love from two choice

130
00:04:56,560 --> 00:04:58,639
then we define layered sse which is

131
00:04:58,639 --> 00:05:00,160
basically a very straightforward

132
00:05:00,160 --> 00:05:03,039
construction of a page efficient dynamic

133
00:05:03,039 --> 00:05:06,720
sse scheme given layer two choice and

134
00:05:06,720 --> 00:05:09,039
based on the layer two choice bounds

135
00:05:09,039 --> 00:05:11,919
we here get all tilde of log log n over

136
00:05:11,919 --> 00:05:14,080
p page efficiency where n is the number

137
00:05:14,080 --> 00:05:16,400
of items in the database and p is the

138
00:05:16,400 --> 00:05:18,160
page size

139
00:05:18,160 --> 00:05:20,000
then we define the generic local

140
00:05:20,000 --> 00:05:21,199
transform

141
00:05:21,199 --> 00:05:22,880
which draws a connection between page

142
00:05:22,880 --> 00:05:25,039
efficiency and locality

143
00:05:25,039 --> 00:05:28,080
and allows us to build a local scheme

144
00:05:28,080 --> 00:05:30,560
given a page efficient scheme

145
00:05:30,560 --> 00:05:33,840
and using this generic local transform

146
00:05:33,840 --> 00:05:36,960
applying it on layered sse we obtain a

147
00:05:36,960 --> 00:05:39,759
local dynamic sse scheme that again has

148
00:05:39,759 --> 00:05:42,639
all tilde of log log n read efficiency

149
00:05:42,639 --> 00:05:44,000
here is important to note that the

150
00:05:44,000 --> 00:05:46,479
maximal list size is bounded similar to

151
00:05:46,479 --> 00:05:49,039
other comparable local sse schemes

152
00:05:49,039 --> 00:05:51,440
lastly we define uncoined sse which does

153
00:05:51,440 --> 00:05:53,600
not have this restriction

154
00:05:53,600 --> 00:05:55,919
more concretely it is a static sse

155
00:05:55,919 --> 00:05:57,919
scheme with o of log to the power of

156
00:05:57,919 --> 00:06:00,639
epsilon n read efficiency where epsilon

157
00:06:00,639 --> 00:06:04,400
is any constant bigger than zero

158
00:06:04,479 --> 00:06:06,880
so i hope i got you interested in our

159
00:06:06,880 --> 00:06:08,880
results and in our schemes

160
00:06:08,880 --> 00:06:10,639
and if you're interested in any of the

161
00:06:10,639 --> 00:06:12,560
constructions then i invite you to come

162
00:06:12,560 --> 00:06:14,800
to my talk and i hope we see each other

163
00:06:14,800 --> 00:06:17,960
at crypto

