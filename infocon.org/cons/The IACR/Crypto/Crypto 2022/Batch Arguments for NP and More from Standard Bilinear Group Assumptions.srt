1
00:00:00,160 --> 00:00:02,320
welcome this talk will be about batch

2
00:00:02,320 --> 00:00:04,640
arguments for mp and his joint work with

3
00:00:04,640 --> 00:00:06,160
brent waters

4
00:00:06,160 --> 00:00:08,800
in a batch argument for mp approver has

5
00:00:08,800 --> 00:00:11,679
a collection of mp statements and their

6
00:00:11,679 --> 00:00:13,599
goal is to convince the verifier that

7
00:00:13,599 --> 00:00:15,759
all m statements are valid

8
00:00:15,759 --> 00:00:18,000
a simple approach to do so is to have

9
00:00:18,000 --> 00:00:20,400
the prover sent over a collection of m

10
00:00:20,400 --> 00:00:23,279
mp witnesses one for each statement the

11
00:00:23,279 --> 00:00:25,199
verifier then checks that each statement

12
00:00:25,199 --> 00:00:27,519
witness pair is valid and accepts if all

13
00:00:27,519 --> 00:00:29,840
of them are in this case the size of a

14
00:00:29,840 --> 00:00:31,840
proof scales linearly with the number of

15
00:00:31,840 --> 00:00:33,200
instances

16
00:00:33,200 --> 00:00:35,200
a natural question is whether we can do

17
00:00:35,200 --> 00:00:38,079
better namely can we authenticate m and

18
00:00:38,079 --> 00:00:40,559
p statements with a proof whose size is

19
00:00:40,559 --> 00:00:43,040
sublinear in m this is the setting of

20
00:00:43,040 --> 00:00:44,559
batch arguments

21
00:00:44,559 --> 00:00:46,800
the goal here is to amortize the cost of

22
00:00:46,800 --> 00:00:49,280
mp verification namely we seek a

23
00:00:49,280 --> 00:00:51,760
construction where a proof on m's np

24
00:00:51,760 --> 00:00:53,760
statements scales polynomially with the

25
00:00:53,760 --> 00:00:56,559
security parameter but importantly poly

26
00:00:56,559 --> 00:00:58,000
logarithmically with the number of

27
00:00:58,000 --> 00:01:00,559
instances being proved we do allow the

28
00:01:00,559 --> 00:01:02,160
proof size to grow with the size of

29
00:01:02,160 --> 00:01:04,000
checking a single instance and hence

30
00:01:04,000 --> 00:01:05,840
this is not a succinct argument or a

31
00:01:05,840 --> 00:01:08,400
snark the goal is really to amortize the

32
00:01:08,400 --> 00:01:10,640
proof size and verification cost over a

33
00:01:10,640 --> 00:01:12,400
batch of instances

34
00:01:12,400 --> 00:01:14,640
in this work we focus on constructing

35
00:01:14,640 --> 00:01:17,200
new non-interactive batch arguments for

36
00:01:17,200 --> 00:01:18,400
mp

37
00:01:18,400 --> 00:01:20,479
first batch arguments are a special case

38
00:01:20,479 --> 00:01:22,560
of succinct arguments or snarks and

39
00:01:22,560 --> 00:01:25,200
indeed any snark for mp automatically

40
00:01:25,200 --> 00:01:27,680
gives a batch argument for mp

41
00:01:27,680 --> 00:01:29,840
however existing snark constructions

42
00:01:29,840 --> 00:01:31,920
either rely on idealized models

43
00:01:31,920 --> 00:01:35,200
non-falsifiable knowledge assumptions or

44
00:01:35,200 --> 00:01:37,119
powerful cryptographic tools like

45
00:01:37,119 --> 00:01:39,759
indistinguishability obfuscation

46
00:01:39,759 --> 00:01:41,840
if we consider the relaxation to match

47
00:01:41,840 --> 00:01:43,840
arguments a pair of recent works by

48
00:01:43,840 --> 00:01:46,320
shodori jain and jin have shown how to

49
00:01:46,320 --> 00:01:47,759
realize them from either the

50
00:01:47,759 --> 00:01:49,920
subexponential ddh assumption together

51
00:01:49,920 --> 00:01:52,479
with qr or from the playing learning

52
00:01:52,479 --> 00:01:54,560
with errors assumption both of these

53
00:01:54,560 --> 00:01:56,000
constructions leverage correlation

54
00:01:56,000 --> 00:01:58,240
interactable hash functions to provably

55
00:01:58,240 --> 00:02:01,200
instantiate the fiatchemier heuristic

56
00:02:01,200 --> 00:02:03,040
finally if we consider pairing based

57
00:02:03,040 --> 00:02:05,360
assumptions kalai panneth and yang

58
00:02:05,360 --> 00:02:07,600
showed how to construct a batch argument

59
00:02:07,600 --> 00:02:09,679
using a non-standard q-type assumptions

60
00:02:09,679 --> 00:02:12,080
on groups with biolinear maps

61
00:02:12,080 --> 00:02:13,680
in this work we give the first

62
00:02:13,680 --> 00:02:15,920
construction of batch arguments for mp

63
00:02:15,920 --> 00:02:18,160
from standard assumptions on bi-linear

64
00:02:18,160 --> 00:02:20,400
groups we can instantiate our approach

65
00:02:20,400 --> 00:02:21,840
with either the subgroup decision

66
00:02:21,840 --> 00:02:23,760
assumption on composite order by linear

67
00:02:23,760 --> 00:02:26,080
groups or from the standard k-linear

68
00:02:26,080 --> 00:02:28,560
assumption over prime order groups

69
00:02:28,560 --> 00:02:30,879
a key feature of our construction is

70
00:02:30,879 --> 00:02:32,560
that it gives a direct construction of

71
00:02:32,560 --> 00:02:34,720
batch arguments that departs heavily

72
00:02:34,720 --> 00:02:36,480
from previous techniques in the study of

73
00:02:36,480 --> 00:02:39,680
succinct arguments namely we do not rely

74
00:02:39,680 --> 00:02:41,599
on heavyweight cryptographic tools like

75
00:02:41,599 --> 00:02:43,760
correlation interactable hash functions

76
00:02:43,760 --> 00:02:45,440
or on information theoretic building

77
00:02:45,440 --> 00:02:47,280
blocks like probabilistically checkable

78
00:02:47,280 --> 00:02:49,120
proofs both of which have featured

79
00:02:49,120 --> 00:02:51,120
prominently in nearly all previous

80
00:02:51,120 --> 00:02:53,680
constructions of similar primitives

81
00:02:53,680 --> 00:02:56,480
instead we give a direct construction in

82
00:02:56,480 --> 00:02:58,400
the manner of the classic non-succinct

83
00:02:58,400 --> 00:03:00,560
non-interactive zero-knowledge proof of

84
00:03:00,560 --> 00:03:02,959
gross ostrowski and sahai

85
00:03:02,959 --> 00:03:05,120
as corollaries to our main construction

86
00:03:05,120 --> 00:03:07,360
we also obtain a ram delegation scheme

87
00:03:07,360 --> 00:03:09,440
also known as a snark for p with a

88
00:03:09,440 --> 00:03:11,920
sublinear size crs from standardized

89
00:03:11,920 --> 00:03:14,000
bi-linear map assumptions as well as an

90
00:03:14,000 --> 00:03:15,840
aggregate signature scheme that supports

91
00:03:15,840 --> 00:03:18,879
bounded aggregation in a plane model

92
00:03:18,879 --> 00:03:21,120
our approach follows the commit improved

93
00:03:21,120 --> 00:03:23,040
strategy much like the nesigs of

94
00:03:23,040 --> 00:03:25,599
grossostrovsky and sahai the prover here

95
00:03:25,599 --> 00:03:27,680
has a batch of m statements and we

96
00:03:27,680 --> 00:03:29,840
consider the mp complete language a

97
00:03:29,840 --> 00:03:32,400
boolean circuit satisfiability

98
00:03:32,400 --> 00:03:34,640
for each wire in the boolean circuit the

99
00:03:34,640 --> 00:03:36,720
approver starts by constructing a vector

100
00:03:36,720 --> 00:03:39,440
commitment to the m wire assignment one

101
00:03:39,440 --> 00:03:41,440
assignment for each instance

102
00:03:41,440 --> 00:03:42,959
critically we require that the

103
00:03:42,959 --> 00:03:45,599
commitment is succinct in our case the

104
00:03:45,599 --> 00:03:47,360
size of the commitment is a single group

105
00:03:47,360 --> 00:03:49,440
element and independent of the number of

106
00:03:49,440 --> 00:03:50,640
instances

107
00:03:50,640 --> 00:03:52,400
next approver constructs a sequence of

108
00:03:52,400 --> 00:03:54,640
proofs for validating wire labels that

109
00:03:54,640 --> 00:03:56,720
each gate is properly computed and at

110
00:03:56,720 --> 00:03:58,159
all of the gates

111
00:03:58,159 --> 00:04:00,720
all of the circuit output gates output

112
00:04:00,720 --> 00:04:01,680
1.

113
00:04:01,680 --> 00:04:03,360
each of these validity checks is a

114
00:04:03,360 --> 00:04:05,599
quadratic operation and can be checked

115
00:04:05,599 --> 00:04:07,840
in the exponent the tricky part is

116
00:04:07,840 --> 00:04:10,239
arguing soundness in a grozo strategy

117
00:04:10,239 --> 00:04:12,239
sahaja music sound is relied on

118
00:04:12,239 --> 00:04:13,920
extracting the committed values from the

119
00:04:13,920 --> 00:04:15,840
commitment but that will no longer be

120
00:04:15,840 --> 00:04:17,440
possible since the commitments are now

121
00:04:17,440 --> 00:04:19,839
succinct for details here please come to

122
00:04:19,839 --> 00:04:22,000
our talk on tuesday

123
00:04:22,000 --> 00:04:23,919
to summarize the focus of this work is

124
00:04:23,919 --> 00:04:26,160
on constructing batch arguments for mp

125
00:04:26,160 --> 00:04:27,680
using standard assumptions over

126
00:04:27,680 --> 00:04:30,000
bi-linear maps a distinctive feature of

127
00:04:30,000 --> 00:04:31,600
our work is that the construction is

128
00:04:31,600 --> 00:04:34,639
simple direct and completely avoids any

129
00:04:34,639 --> 00:04:36,479
heavy cryptographic or information

130
00:04:36,479 --> 00:04:38,400
theoretic machinery characteristic of

131
00:04:38,400 --> 00:04:40,240
many previous approaches

132
00:04:40,240 --> 00:04:42,240
as corollaries to our main construction

133
00:04:42,240 --> 00:04:44,400
we also obtain a ram delegation scheme

134
00:04:44,400 --> 00:04:46,080
as well as an aggregate signature scheme

135
00:04:46,080 --> 00:04:47,759
in the standard model from standard

136
00:04:47,759 --> 00:04:50,160
bilinear map assumptions i hope to see

137
00:04:50,160 --> 00:04:52,160
you at the talk on tuesday and the paper

138
00:04:52,160 --> 00:04:54,160
is also available now on eprint thank

139
00:04:54,160 --> 00:04:56,960
you very much

