1
00:00:01,199 --> 00:00:03,540
I'm Enriquez and I'll be telling you

2
00:00:03,540 --> 00:00:05,759
about our work on universally composable

3
00:00:05,759 --> 00:00:08,280
fantastic

4
00:00:08,280 --> 00:00:11,099
so signal is a secure messaging protocol

5
00:00:11,099 --> 00:00:13,440
used to transmit hundreds of billions of

6
00:00:13,440 --> 00:00:16,199
messages each day and one of its key

7
00:00:16,199 --> 00:00:18,359
Innovations is it has a continuous key

8
00:00:18,359 --> 00:00:20,880
agreement with post compromise and

9
00:00:20,880 --> 00:00:22,320
forward security

10
00:00:22,320 --> 00:00:24,900
so recall that forward security protects

11
00:00:24,900 --> 00:00:26,939
the data transmitted before compromise

12
00:00:26,939 --> 00:00:29,760
and post-compromised security protects

13
00:00:29,760 --> 00:00:32,399
the data transmitted after this exposure

14
00:00:32,399 --> 00:00:34,140
event

15
00:00:34,140 --> 00:00:36,780
and in a number of settings the signal

16
00:00:36,780 --> 00:00:38,460
protocol is combined with other

17
00:00:38,460 --> 00:00:41,579
cryptographic protocols or parts of it

18
00:00:41,579 --> 00:00:44,280
are repurposed for other applications

19
00:00:44,280 --> 00:00:46,079
and so in order to understand the

20
00:00:46,079 --> 00:00:48,120
security guarantees of signal in these

21
00:00:48,120 --> 00:00:50,219
various settings we need a composable

22
00:00:50,219 --> 00:00:52,079
security analysis

23
00:00:52,079 --> 00:00:53,820
and the benefits of a composable

24
00:00:53,820 --> 00:00:56,820
security analysis are threefold first it

25
00:00:56,820 --> 00:00:58,739
lets us understand the guarantees that

26
00:00:58,739 --> 00:01:00,239
signal gives

27
00:01:00,239 --> 00:01:02,520
um to the protocols that use it

28
00:01:02,520 --> 00:01:05,159
it helps us understand why the protocol

29
00:01:05,159 --> 00:01:09,240
is secure and it helps us reuse the

30
00:01:09,240 --> 00:01:12,479
components of signal elsewhere

31
00:01:12,479 --> 00:01:15,659
so in this work we formulate the ideal

32
00:01:15,659 --> 00:01:17,880
functionality that captures secure

33
00:01:17,880 --> 00:01:19,020
messaging

34
00:01:19,020 --> 00:01:21,900
we then decompose this functionality

35
00:01:21,900 --> 00:01:24,060
into step functionalities

36
00:01:24,060 --> 00:01:27,000
and lastly we show how to realize these

37
00:01:27,000 --> 00:01:28,860
individual components using just

38
00:01:28,860 --> 00:01:31,020
standard Primitives and minimal hardness

39
00:01:31,020 --> 00:01:32,220
assumptions

40
00:01:32,220 --> 00:01:34,259
and so in this process we need to get

41
00:01:34,259 --> 00:01:35,460
around a number of technical

42
00:01:35,460 --> 00:01:37,799
difficulties and in this brief talk I'll

43
00:01:37,799 --> 00:01:40,140
just mention two of them so one is

44
00:01:40,140 --> 00:01:42,960
signals inherent circularity and the

45
00:01:42,960 --> 00:01:44,579
second one is dealing with adaptive

46
00:01:44,579 --> 00:01:46,619
Corruptions

47
00:01:46,619 --> 00:01:48,720
all right so let's begin with our secure

48
00:01:48,720 --> 00:01:51,600
messaging functionality so when Alice

49
00:01:51,600 --> 00:01:54,899
wants to send a message she asks FSM and

50
00:01:54,899 --> 00:01:56,939
in response she will get a cipher text

51
00:01:56,939 --> 00:01:59,340
header paired back and then Alice

52
00:01:59,340 --> 00:02:02,040
herself sends this pair over the network

53
00:02:02,040 --> 00:02:03,840
and later when Bob receives the

54
00:02:03,840 --> 00:02:06,960
ciphertext and header he can ask FSM for

55
00:02:06,960 --> 00:02:09,538
the original message back

56
00:02:09,538 --> 00:02:11,700
and so FSM has several desirable

57
00:02:11,700 --> 00:02:12,900
properties

58
00:02:12,900 --> 00:02:15,060
first Alice and Bob were guaranteed

59
00:02:15,060 --> 00:02:19,020
immediate decryption and encryption

60
00:02:19,020 --> 00:02:21,480
um and even against a fully adoptive

61
00:02:21,480 --> 00:02:23,220
adversary the parties will eventually

62
00:02:23,220 --> 00:02:25,739
heal from a state compromise and their

63
00:02:25,739 --> 00:02:27,300
messages are protected by forward

64
00:02:27,300 --> 00:02:28,739
secrecy

65
00:02:28,739 --> 00:02:30,780
and I should say that determining the

66
00:02:30,780 --> 00:02:33,000
exact moment when

67
00:02:33,000 --> 00:02:35,519
um security is regained post compromise

68
00:02:35,519 --> 00:02:38,040
is one of the analytical challenges of

69
00:02:38,040 --> 00:02:40,200
this work

70
00:02:40,200 --> 00:02:42,420
so let's decompose this ideal

71
00:02:42,420 --> 00:02:43,739
functionality

72
00:02:43,739 --> 00:02:45,959
right so signal achieves forward and

73
00:02:45,959 --> 00:02:48,420
backward secrecy via public ratchet and

74
00:02:48,420 --> 00:02:50,940
a symmetric ratchet

75
00:02:50,940 --> 00:02:54,720
um and we generally follow this

76
00:02:54,720 --> 00:02:57,480
um Paradigm so the public graduate

77
00:02:57,480 --> 00:02:59,819
um persists for the entire communication

78
00:02:59,819 --> 00:03:02,280
session and it guarantees that parties

79
00:03:02,280 --> 00:03:05,159
will heal after compromise at some point

80
00:03:05,159 --> 00:03:08,819
uh then within each epic we have a

81
00:03:08,819 --> 00:03:11,040
symmetric ratchet functionality that

82
00:03:11,040 --> 00:03:12,840
handles the encryption decryption of

83
00:03:12,840 --> 00:03:14,760
messages and it guarantees forward

84
00:03:14,760 --> 00:03:17,099
security

85
00:03:17,099 --> 00:03:18,480
all right

86
00:03:18,480 --> 00:03:21,540
so next we can further decompose the

87
00:03:21,540 --> 00:03:23,879
symmetric ratchet into a per message

88
00:03:23,879 --> 00:03:26,220
authenticated encryption functionality

89
00:03:26,220 --> 00:03:28,799
that does the encryption

90
00:03:28,799 --> 00:03:31,379
and now at this point in our modeling

91
00:03:31,379 --> 00:03:33,239
there's a problem of circularity that

92
00:03:33,239 --> 00:03:35,159
comes out

93
00:03:35,159 --> 00:03:37,440
so the way that the signal public

94
00:03:37,440 --> 00:03:40,620
ratchet works is it only advances its

95
00:03:40,620 --> 00:03:43,140
state if the correct public key from the

96
00:03:43,140 --> 00:03:45,239
art other party is given

97
00:03:45,239 --> 00:03:47,940
and in Signal the correctness of this

98
00:03:47,940 --> 00:03:51,000
public key is verified by checking

99
00:03:51,000 --> 00:03:53,599
uh the math of the psychotex

100
00:03:53,599 --> 00:03:56,939
but the message encryption key is

101
00:03:56,939 --> 00:03:59,819
actually derived from the public key so

102
00:03:59,819 --> 00:04:01,099
a circular

103
00:04:01,099 --> 00:04:04,200
because the public righteous behavior is

104
00:04:04,200 --> 00:04:05,879
now affected by the authenticated

105
00:04:05,879 --> 00:04:08,159
encryption modules Behavior which

106
00:04:08,159 --> 00:04:09,959
depends on what the public ratchet sent

107
00:04:09,959 --> 00:04:13,200
it so this is a problem because they

108
00:04:13,200 --> 00:04:15,780
can't both depend on each other and so

109
00:04:15,780 --> 00:04:20,180
the public ratchet seems unrealizable

110
00:04:20,820 --> 00:04:23,940
so our solution is to have the public

111
00:04:23,940 --> 00:04:26,940
ratchet functionality give random kind

112
00:04:26,940 --> 00:04:29,699
of nonsense message chain keys to the

113
00:04:29,699 --> 00:04:32,880
message key exchange module if the

114
00:04:32,880 --> 00:04:35,220
public exponent is incorrect

115
00:04:35,220 --> 00:04:38,340
and so the public ratchet then lets the

116
00:04:38,340 --> 00:04:40,680
caller decide which public key is

117
00:04:40,680 --> 00:04:43,100
correct

118
00:04:43,199 --> 00:04:45,419
so now let's try to realize these

119
00:04:45,419 --> 00:04:46,919
functionality starting with the public

120
00:04:46,919 --> 00:04:48,060
ratchet

121
00:04:48,060 --> 00:04:50,460
to realize the ideal functionality

122
00:04:50,460 --> 00:04:53,880
against an Adaptive adversary all those

123
00:04:53,880 --> 00:04:56,220
random nonsense keys that we gave out

124
00:04:56,220 --> 00:04:58,199
need to be consistent with a true

125
00:04:58,199 --> 00:05:00,180
internal root key that is used to

126
00:05:00,180 --> 00:05:02,580
generate the message chain keys

127
00:05:02,580 --> 00:05:05,160
and so one easy way of guaranteeing the

128
00:05:05,160 --> 00:05:07,680
consistency is by modeling the public

129
00:05:07,680 --> 00:05:09,800
gratitude as a random Oracle

130
00:05:09,800 --> 00:05:12,419
however instead we introduce a new

131
00:05:12,419 --> 00:05:16,160
primitive that we call the cascaded prfg

132
00:05:16,160 --> 00:05:20,220
it can be constructed from punctual prfs

133
00:05:20,220 --> 00:05:22,500
and it allows us to stimulate these

134
00:05:22,500 --> 00:05:25,699
adaptive Corruptions

135
00:05:26,520 --> 00:05:28,440
all right so next we can realize the

136
00:05:28,440 --> 00:05:30,240
authenticated encryption functionality

137
00:05:30,240 --> 00:05:32,660
with any denialable encryption scheme

138
00:05:32,660 --> 00:05:35,880
and here we do need a random Oracle but

139
00:05:35,880 --> 00:05:39,680
we can't get around that

140
00:05:39,720 --> 00:05:43,020
and lastly we can use Global UC to

141
00:05:43,020 --> 00:05:45,840
compose all these subprotocols into the

142
00:05:45,840 --> 00:05:48,180
original signal protocol so that it

143
00:05:48,180 --> 00:05:50,880
realizes our functionality our top level

144
00:05:50,880 --> 00:05:52,560
functionality

145
00:05:52,560 --> 00:05:54,600
all right so I'll just flash this slide

146
00:05:54,600 --> 00:05:57,840
you can pause if you want to read it

147
00:05:57,840 --> 00:06:00,479
um but I'll just end here so please see

148
00:06:00,479 --> 00:06:03,419
our 25 minute talk or read our paper for

149
00:06:03,419 --> 00:06:05,520
more details and also please use our

150
00:06:05,520 --> 00:06:08,280
Primitives and there you see analyzes on

151
00:06:08,280 --> 00:06:09,780
other protocols

152
00:06:09,780 --> 00:06:12,380
thanks

