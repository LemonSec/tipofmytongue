1
00:00:00,799 --> 00:00:03,199
hi my name is john thompson and at

2
00:00:03,199 --> 00:00:04,799
crypto i'll be presenting the work

3
00:00:04,799 --> 00:00:06,799
formalizing delayed adaptive corruptions

4
00:00:06,799 --> 00:00:09,360
and the security of flooding networks

5
00:00:09,360 --> 00:00:11,200
this is joint work with christian matt

6
00:00:11,200 --> 00:00:14,559
and my supervisor especially

7
00:00:14,559 --> 00:00:16,320
i like to motivate this work using the

8
00:00:16,320 --> 00:00:19,119
example of micromotor style blockchains

9
00:00:19,119 --> 00:00:21,039
this is the type of vertical group of

10
00:00:21,039 --> 00:00:22,880
parties which you see on the right

11
00:00:22,880 --> 00:00:25,039
participant in a lottery which you see

12
00:00:25,039 --> 00:00:27,119
on the left in order to be allowed to

13
00:00:27,119 --> 00:00:28,400
extend

14
00:00:28,400 --> 00:00:30,880
the current base chain with a new block

15
00:00:30,880 --> 00:00:34,000
so in this case where p1 wins you like i

16
00:00:34,000 --> 00:00:35,840
now like to disseminate this block to

17
00:00:35,840 --> 00:00:38,239
all other parties in the protocol

18
00:00:38,239 --> 00:00:40,800
the way this works is that p1 chooses a

19
00:00:40,800 --> 00:00:43,200
random neighborhood and then forwards

20
00:00:43,200 --> 00:00:45,440
the block only to this neighborhood

21
00:00:45,440 --> 00:00:47,039
the neighbors will then again forward

22
00:00:47,039 --> 00:00:48,480
the block to their neighbors and so on

23
00:00:48,480 --> 00:00:50,320
and so forth until all parties have

24
00:00:50,320 --> 00:00:52,320
received the block

25
00:00:52,320 --> 00:00:54,000
this works very well for a static

26
00:00:54,000 --> 00:00:56,399
adversary however as we are about to see

27
00:00:56,399 --> 00:00:58,480
this doesn't work when we consider an

28
00:00:58,480 --> 00:01:01,120
adaptive adversary

29
00:01:01,120 --> 00:01:03,039
let's try to analyze this flooding

30
00:01:03,039 --> 00:01:05,280
procedure with an adaptive adversary

31
00:01:05,280 --> 00:01:06,560
here we have two options either to

32
00:01:06,560 --> 00:01:08,400
consider non-atomic or atomic message

33
00:01:08,400 --> 00:01:09,600
set

34
00:01:09,600 --> 00:01:12,000
so if we first assume non-atomic message

35
00:01:12,000 --> 00:01:13,760
sent then the adversary has the

36
00:01:13,760 --> 00:01:16,640
possibility at the moment p1 wins and

37
00:01:16,640 --> 00:01:18,479
tries to send out the block then the

38
00:01:18,479 --> 00:01:20,560
adversary will learn that p1 is sending

39
00:01:20,560 --> 00:01:23,680
out the block and can now corrupt him

40
00:01:23,680 --> 00:01:26,240
furthermore once he corrupt him he can

41
00:01:26,240 --> 00:01:27,119
actually

42
00:01:27,119 --> 00:01:29,439
retract the message and thereby prevent

43
00:01:29,439 --> 00:01:32,000
the delivery of the block to all other

44
00:01:32,000 --> 00:01:34,159
honest parties

45
00:01:34,159 --> 00:01:37,040
therefore this doesn't work

46
00:01:37,040 --> 00:01:38,799
if we instead consider atomic message

47
00:01:38,799 --> 00:01:39,600
sent

48
00:01:39,600 --> 00:01:41,119
then the adversary does not have the

49
00:01:41,119 --> 00:01:42,960
possibility to corrupt the cylinder of

50
00:01:42,960 --> 00:01:45,920
the block and thereby retract the block

51
00:01:45,920 --> 00:01:47,920
however what the adversary can do

52
00:01:47,920 --> 00:01:49,759
is to corrupt the neighborhood of the

53
00:01:49,759 --> 00:01:51,200
sender

54
00:01:51,200 --> 00:01:53,119
and thereby prevent the delivery of the

55
00:01:53,119 --> 00:01:54,799
message to the remaining parties in the

56
00:01:54,799 --> 00:01:58,479
protocol so again this doesn't work

57
00:01:58,479 --> 00:02:00,240
of course what you can do is to send to

58
00:02:00,240 --> 00:02:02,000
all parties

59
00:02:02,000 --> 00:02:03,759
then the adversary cannot prevent the

60
00:02:03,759 --> 00:02:05,920
delivery but this leaves us with quite a

61
00:02:05,920 --> 00:02:07,439
heavy workload for each individual

62
00:02:07,439 --> 00:02:08,959
parties as they have to send to all

63
00:02:08,959 --> 00:02:11,520
other parties themselves

64
00:02:11,520 --> 00:02:14,319
in this work we consider a delta delayed

65
00:02:14,319 --> 00:02:15,520
adversary

66
00:02:15,520 --> 00:02:17,520
where once the adversary decides to

67
00:02:17,520 --> 00:02:20,480
corrupt a party it takes a certain time

68
00:02:20,480 --> 00:02:22,080
until the corruption actually becomes

69
00:02:22,080 --> 00:02:24,160
effective

70
00:02:24,160 --> 00:02:26,000
so let us now try to analyze the

71
00:02:26,000 --> 00:02:27,360
flooding procedure against such a

72
00:02:27,360 --> 00:02:29,040
delayed adversary that is the date for

73
00:02:29,040 --> 00:02:31,040
the time it takes to synth plus the time

74
00:02:31,040 --> 00:02:34,400
it takes to resend the message

75
00:02:34,800 --> 00:02:37,280
so as before party one sends out the

76
00:02:37,280 --> 00:02:39,519
message to his neighborhood

77
00:02:39,519 --> 00:02:41,280
but now of course the adversary can try

78
00:02:41,280 --> 00:02:43,440
to corrupt but as the corruption doesn't

79
00:02:43,440 --> 00:02:46,080
become effective until the party the

80
00:02:46,080 --> 00:02:47,519
neighborhood has already started to

81
00:02:47,519 --> 00:02:50,000
forward the message

82
00:02:50,000 --> 00:02:51,920
then it's too late for the adversary

83
00:02:51,920 --> 00:02:53,680
when selected once the corruption

84
00:02:53,680 --> 00:02:55,440
actually becomes effective and all

85
00:02:55,440 --> 00:02:58,800
parties will anyway learn the message

86
00:02:58,800 --> 00:03:01,200
our work has two main contributions

87
00:03:01,200 --> 00:03:03,040
first we provide a formal model for the

88
00:03:03,040 --> 00:03:06,560
semantics filtered adversaries within uc

89
00:03:06,560 --> 00:03:08,239
this is both useful for flooding but

90
00:03:08,239 --> 00:03:09,680
also for protocols with long-lived

91
00:03:09,680 --> 00:03:11,040
committees

92
00:03:11,040 --> 00:03:12,800
for example passenger used in an

93
00:03:12,800 --> 00:03:14,959
informal model that was similar to this

94
00:03:14,959 --> 00:03:17,599
2017

95
00:03:17,599 --> 00:03:19,519
secondly we provide two implementations

96
00:03:19,519 --> 00:03:21,360
of flooding networks

97
00:03:21,360 --> 00:03:23,200
within this model that i secure against

98
00:03:23,200 --> 00:03:25,280
an adaptive adversary delayed for the

99
00:03:25,280 --> 00:03:26,959
time it takes to send plus the time it

100
00:03:26,959 --> 00:03:29,200
takes to reset

101
00:03:29,200 --> 00:03:31,680
the first implementation has constant

102
00:03:31,680 --> 00:03:33,840
neighborhood with a logarithmic primary

103
00:03:33,840 --> 00:03:35,840
whereas the second implementation has a

104
00:03:35,840 --> 00:03:37,680
square root number of neighbors

105
00:03:37,680 --> 00:03:39,840
with a constant diameter

106
00:03:39,840 --> 00:03:43,560
thank you for your attention

