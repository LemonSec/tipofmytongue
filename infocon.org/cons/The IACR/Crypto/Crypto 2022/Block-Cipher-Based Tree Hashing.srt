1
00:00:00,480 --> 00:00:03,280
hello my name is alder grinsing and this

2
00:00:03,280 --> 00:00:05,359
is my presentation about block cipher

3
00:00:05,359 --> 00:00:07,680
based 3 hashing

4
00:00:07,680 --> 00:00:09,920
so a hash function is a function that

5
00:00:09,920 --> 00:00:10,800
maps

6
00:00:10,800 --> 00:00:13,599
absent input of arbitrary length to a

7
00:00:13,599 --> 00:00:15,280
fixed length output

8
00:00:15,280 --> 00:00:17,440
and there are multiple security notions

9
00:00:17,440 --> 00:00:19,840
for hash functions so a common one is

10
00:00:19,840 --> 00:00:22,160
the notion of collision resistance which

11
00:00:22,160 --> 00:00:23,920
means that it should be difficult to

12
00:00:23,920 --> 00:00:26,480
find two different inputs that map to

13
00:00:26,480 --> 00:00:28,560
the same output

14
00:00:28,560 --> 00:00:30,960
but there are also a stronger notion

15
00:00:30,960 --> 00:00:34,079
requires required so one is that it

16
00:00:34,079 --> 00:00:35,680
should basically behave like a random

17
00:00:35,680 --> 00:00:38,879
oracle so that all outputs are uniformly

18
00:00:38,879 --> 00:00:40,960
random and also independent from each

19
00:00:40,960 --> 00:00:42,079
other

20
00:00:42,079 --> 00:00:43,800
and this notion is formalized as

21
00:00:43,800 --> 00:00:46,480
indifferentiability by malware and

22
00:00:46,480 --> 00:00:47,440
others

23
00:00:47,440 --> 00:00:50,399
and also specified for hashing by goron

24
00:00:50,399 --> 00:00:52,960
and others

25
00:00:53,120 --> 00:00:55,039
and hash

26
00:00:55,039 --> 00:00:57,280
hashing modes are always built on top of

27
00:00:57,280 --> 00:00:58,960
a smaller

28
00:00:58,960 --> 00:01:00,879
compression function f which is often

29
00:01:00,879 --> 00:01:04,080
assumed to be ideal however such ideal

30
00:01:04,080 --> 00:01:06,000
compression functions

31
00:01:06,000 --> 00:01:08,159
cannot be built directly

32
00:01:08,159 --> 00:01:10,400
so they have to be built on top of a

33
00:01:10,400 --> 00:01:13,439
small of another building block and the

34
00:01:13,439 --> 00:01:14,560
common one

35
00:01:14,560 --> 00:01:17,680
is a block cipher

36
00:01:17,680 --> 00:01:19,360
and there's popular dave's meyer

37
00:01:19,360 --> 00:01:21,759
construction which

38
00:01:21,759 --> 00:01:23,360
transforms a block cipher to a

39
00:01:23,360 --> 00:01:25,360
compression function using a feed

40
00:01:25,360 --> 00:01:26,400
forward

41
00:01:26,400 --> 00:01:28,320
however this construction is not

42
00:01:28,320 --> 00:01:30,079
indifferentiable from an ideal

43
00:01:30,079 --> 00:01:31,680
compression function

44
00:01:31,680 --> 00:01:34,799
so we need a dedicated dedicated

45
00:01:34,799 --> 00:01:36,159
analysis

46
00:01:36,159 --> 00:01:39,119
using the block cipher as an assumption

47
00:01:39,119 --> 00:01:41,759
and this is what daemon and others

48
00:01:41,759 --> 00:01:42,720
did

49
00:01:42,720 --> 00:01:45,040
for hashing where they

50
00:01:45,040 --> 00:01:47,439
tried to find sufficient conditions for

51
00:01:47,439 --> 00:01:52,000
such constructions and also some other

52
00:01:52,560 --> 00:01:54,240
however it turns out that the paper

53
00:01:54,240 --> 00:01:55,360
contains

54
00:01:55,360 --> 00:01:58,079
an error and also proves some faulty

55
00:01:58,079 --> 00:02:00,399
construction secure so i was pointed out

56
00:02:00,399 --> 00:02:03,119
by samuel nevis

57
00:02:03,119 --> 00:02:06,240
and then in errata i

58
00:02:06,240 --> 00:02:08,318
provided a quick fix by having an

59
00:02:08,318 --> 00:02:11,120
additional condition which requires also

60
00:02:11,120 --> 00:02:14,000
sufficient truncation

61
00:02:14,000 --> 00:02:16,239
however more throw look

62
00:02:16,239 --> 00:02:18,400
reveals that the error is actually so

63
00:02:18,400 --> 00:02:20,160
more fundamental about the

64
00:02:20,160 --> 00:02:23,680
differentiability setting

65
00:02:23,680 --> 00:02:25,599
it's actually a more fundamental flaw

66
00:02:25,599 --> 00:02:27,200
that

67
00:02:27,200 --> 00:02:29,360
ignores a major part between the

68
00:02:29,360 --> 00:02:31,120
interaction between the construction and

69
00:02:31,120 --> 00:02:32,800
primitive oracles

70
00:02:32,800 --> 00:02:35,599
in the indifferentiability setting

71
00:02:35,599 --> 00:02:38,080
and the same reasoning is actually

72
00:02:38,080 --> 00:02:41,040
present in also many other

73
00:02:41,040 --> 00:02:43,200
individuality papers

74
00:02:43,200 --> 00:02:46,080
so two others are also based on hashing

75
00:02:46,080 --> 00:02:48,840
and also four are about the sum of

76
00:02:48,840 --> 00:02:51,920
permutations and this is actually also

77
00:02:51,920 --> 00:02:53,519
all the papers

78
00:02:53,519 --> 00:02:55,599
that are about the indifferentiability

79
00:02:55,599 --> 00:02:59,040
of the swim of permutations

80
00:02:59,120 --> 00:03:01,519
but the flat reasoning does hold in the

81
00:03:01,519 --> 00:03:04,400
sequential indifferentiability setting

82
00:03:04,400 --> 00:03:05,920
where the primitive carriers have to be

83
00:03:05,920 --> 00:03:08,879
made before the construction queries

84
00:03:08,879 --> 00:03:10,879
so the results

85
00:03:10,879 --> 00:03:13,599
can be downgraded to this weaker setting

86
00:03:13,599 --> 00:03:16,840
so as we still have some positive

87
00:03:16,840 --> 00:03:20,239
results and in the case of hashing

88
00:03:20,239 --> 00:03:23,760
we we had the errata that

89
00:03:23,760 --> 00:03:26,720
requires sufficient truncation

90
00:03:26,720 --> 00:03:27,440
but

91
00:03:27,440 --> 00:03:30,319
this is not that great of a fix

92
00:03:30,319 --> 00:03:33,599
as not all modes can apply this

93
00:03:33,599 --> 00:03:35,360
so in this work we

94
00:03:35,360 --> 00:03:37,680
consider three uh three other

95
00:03:37,680 --> 00:03:39,599
finalization options

96
00:03:39,599 --> 00:03:42,319
so the first one is truncation again but

97
00:03:42,319 --> 00:03:44,159
then also with some interesting

98
00:03:44,159 --> 00:03:45,840
variations

99
00:03:45,840 --> 00:03:47,360
the second one is an envelope

100
00:03:47,360 --> 00:03:48,720
finalization

101
00:03:48,720 --> 00:03:51,440
which is a generalization from enveloped

102
00:03:51,440 --> 00:03:54,239
mercury dam cards and the third one is a

103
00:03:54,239 --> 00:03:56,640
feed forward

104
00:03:56,640 --> 00:03:59,519
and the major application is blake 3

105
00:03:59,519 --> 00:04:01,840
which is a recent block cipher based 3

106
00:04:01,840 --> 00:04:04,400
hashing mode

107
00:04:04,400 --> 00:04:07,120
and that's an interesting

108
00:04:07,120 --> 00:04:09,040
has some interesting properties one is

109
00:04:09,040 --> 00:04:11,840
that the extendable output uses a

110
00:04:11,840 --> 00:04:15,120
counter so for the first outlook output

111
00:04:15,120 --> 00:04:16,238
block

112
00:04:16,238 --> 00:04:18,000
the counter is equal to zero for the

113
00:04:18,000 --> 00:04:19,358
second one

114
00:04:19,358 --> 00:04:23,199
it sets counter to one and so on

115
00:04:23,199 --> 00:04:25,520
and it turns out it has an interesting

116
00:04:25,520 --> 00:04:26,639
property

117
00:04:26,639 --> 00:04:29,199
namely that if you know a message in the

118
00:04:29,199 --> 00:04:31,120
hash output but not

119
00:04:31,120 --> 00:04:32,800
the offset t

120
00:04:32,800 --> 00:04:34,639
that you can actually compute that

121
00:04:34,639 --> 00:04:37,840
offsets directly or ideally

122
00:04:37,840 --> 00:04:39,680
that would only be possible by brute

123
00:04:39,680 --> 00:04:40,800
force

124
00:04:40,800 --> 00:04:42,960
and as a consequence you cannot really

125
00:04:42,960 --> 00:04:46,400
rely on the secrecy of this offset

126
00:04:46,400 --> 00:04:49,440
t which is not ideal behavior

127
00:04:49,440 --> 00:04:51,759
but in practice it's not that big of a

128
00:04:51,759 --> 00:04:53,360
problem

129
00:04:53,360 --> 00:04:55,440
so that's the end of my presentation

130
00:04:55,440 --> 00:04:59,199
thank you for your attention

