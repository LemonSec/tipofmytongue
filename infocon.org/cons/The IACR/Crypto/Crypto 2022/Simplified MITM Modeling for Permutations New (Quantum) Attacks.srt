1
00:00:01,439 --> 00:00:02,879
hi everyone i'm going to present this

2
00:00:02,879 --> 00:00:04,720
paper simplified meat in the middle

3
00:00:04,720 --> 00:00:06,000
modeling for permutations and new

4
00:00:06,000 --> 00:00:07,359
quantum attacks which is an uncooked

5
00:00:07,359 --> 00:00:09,440
with mark students

6
00:00:09,440 --> 00:00:11,519
so we're in the context of asymmetrical

7
00:00:11,519 --> 00:00:13,920
analysis and we're looking at attacks on

8
00:00:13,920 --> 00:00:14,920
cryptographic

9
00:00:14,920 --> 00:00:16,960
permutations and the problem we're

10
00:00:16,960 --> 00:00:19,199
trying to solve is finding an input x

11
00:00:19,199 --> 00:00:20,640
which has some relation with the output

12
00:00:20,640 --> 00:00:21,920
p of x

13
00:00:21,920 --> 00:00:24,000
for example you could say x equal p of x

14
00:00:24,000 --> 00:00:26,240
and this would be a fixed point of p

15
00:00:26,240 --> 00:00:27,840
this creates what we call a closed

16
00:00:27,840 --> 00:00:29,359
computational path because now we have

17
00:00:29,359 --> 00:00:30,720
constraints between the input and the

18
00:00:30,720 --> 00:00:31,760
output

19
00:00:31,760 --> 00:00:33,200
and the way to solve it using the mid

20
00:00:33,200 --> 00:00:35,440
individual technique is to select two

21
00:00:35,440 --> 00:00:37,360
subsets of the internal states in this

22
00:00:37,360 --> 00:00:39,440
path and that we call the forward path

23
00:00:39,440 --> 00:00:41,840
and that we call the backward path

24
00:00:41,840 --> 00:00:42,960
and we're going to compute all the

25
00:00:42,960 --> 00:00:44,320
possibilities for these states

26
00:00:44,320 --> 00:00:45,760
independently

27
00:00:45,760 --> 00:00:47,440
backwards and forwards

28
00:00:47,440 --> 00:00:49,760
and whenever they meet we're going to

29
00:00:49,760 --> 00:00:52,000
try to match these possibilities

30
00:00:52,000 --> 00:00:53,840
and any matching any pair of matching

31
00:00:53,840 --> 00:00:55,199
possibilities is going to give us

32
00:00:55,199 --> 00:00:57,280
something that we're going to recompute

33
00:00:57,280 --> 00:00:58,960
to check if this is a solution to a

34
00:00:58,960 --> 00:01:01,039
problem so this is probably the idea of

35
00:01:01,039 --> 00:01:03,039
the meeting the middle attack

36
00:01:03,039 --> 00:01:05,438
a typical example for this

37
00:01:05,438 --> 00:01:07,119
and how it applies to cryptographic

38
00:01:07,119 --> 00:01:08,400
primitives is

39
00:01:08,400 --> 00:01:10,479
the hard hash function it's a small

40
00:01:10,479 --> 00:01:12,080
range hash function so it only hashes

41
00:01:12,080 --> 00:01:16,080
inputs of 15 bits to 256 bits and it's

42
00:01:16,080 --> 00:01:18,960
defined using a permutation on 512 bits

43
00:01:18,960 --> 00:01:21,759
defined using aes operations

44
00:01:21,759 --> 00:01:23,920
and the way it does it is simply

45
00:01:23,920 --> 00:01:26,320
take the inputs and go it to the output

46
00:01:26,320 --> 00:01:27,840
of a permutation and truncate this to

47
00:01:27,840 --> 00:01:29,840
256 bits

48
00:01:29,840 --> 00:01:32,240
so for example finding a premature zero

49
00:01:32,240 --> 00:01:34,640
means finding an input x such as that so

50
00:01:34,640 --> 00:01:36,079
that this truncation is equal to the

51
00:01:36,079 --> 00:01:38,640
truncation of the output p of x this is

52
00:01:38,640 --> 00:01:40,079
exactly solving a meet in the middle

53
00:01:40,079 --> 00:01:42,640
problem on the permutation p

54
00:01:42,640 --> 00:01:44,960
hierarchica 512 the hash function is not

55
00:01:44,960 --> 00:01:47,360
used in sphinxus

56
00:01:47,360 --> 00:01:48,399
the

57
00:01:48,399 --> 00:01:50,079
sphinx plus haraca although it was

58
00:01:50,079 --> 00:01:51,520
proposed to

59
00:01:51,520 --> 00:01:54,799
to be used in digital signatures schemes

60
00:01:54,799 --> 00:01:57,200
but the permutation is used currently in

61
00:01:57,200 --> 00:02:00,719
the uh in the proposal

62
00:02:01,040 --> 00:02:02,560
so a bit in the middle attack is

63
00:02:02,560 --> 00:02:04,240
entirely defined by this choice of

64
00:02:04,240 --> 00:02:05,759
forward and backward path which we call

65
00:02:05,759 --> 00:02:07,680
the meet in the middle characteristic

66
00:02:07,680 --> 00:02:09,440
and of course we can

67
00:02:09,440 --> 00:02:11,120
search for them by hand and there are

68
00:02:11,120 --> 00:02:12,720
many techniques applicable

69
00:02:12,720 --> 00:02:14,959
problem is that this path can become

70
00:02:14,959 --> 00:02:16,720
quite complicated especially for example

71
00:02:16,720 --> 00:02:20,400
like karaka so here is an example

72
00:02:20,400 --> 00:02:22,720
the alternative to finding this by hand

73
00:02:22,720 --> 00:02:25,120
is to use an automatic tool

74
00:02:25,120 --> 00:02:27,040
this is something this is a more recent

75
00:02:27,040 --> 00:02:27,920
idea

76
00:02:27,920 --> 00:02:29,840
so what we're going to do is we model

77
00:02:29,840 --> 00:02:31,440
the space of possible emit in the middle

78
00:02:31,440 --> 00:02:33,680
characteristics and then we search the

79
00:02:33,680 --> 00:02:35,360
best of them and one that give us an

80
00:02:35,360 --> 00:02:37,920
attack using an automatic tool so what

81
00:02:37,920 --> 00:02:40,080
we say is searching for the maintenance

82
00:02:40,080 --> 00:02:42,080
attack becomes a problem of optimization

83
00:02:42,080 --> 00:02:43,360
we want to optimize the attack

84
00:02:43,360 --> 00:02:45,120
complexity

85
00:02:45,120 --> 00:02:47,200
on the search space which is the space

86
00:02:47,200 --> 00:02:49,840
of acceptable forward and backward path

87
00:02:49,840 --> 00:02:52,560
so at zerocrypt21 about ad showed that

88
00:02:52,560 --> 00:02:54,959
you could reduce this to an milp problem

89
00:02:54,959 --> 00:02:57,280
mixed digital linear programming

90
00:02:57,280 --> 00:02:58,720
and they had a modeling that allows to

91
00:02:58,720 --> 00:02:59,840
target

92
00:02:59,840 --> 00:03:02,319
all aes like hash functions so all hash

93
00:03:02,319 --> 00:03:04,959
functions that use operations like in

94
00:03:04,959 --> 00:03:06,879
the aes

95
00:03:06,879 --> 00:03:08,800
but the modeling is very complex the

96
00:03:08,800 --> 00:03:10,319
reason is that it's defined using

97
00:03:10,319 --> 00:03:11,840
propagation rules so there are many

98
00:03:11,840 --> 00:03:14,480
rules actually to to define to for all

99
00:03:14,480 --> 00:03:16,720
the different operations that that you

100
00:03:16,720 --> 00:03:18,879
use

101
00:03:18,879 --> 00:03:20,959
so in our paper we went into a different

102
00:03:20,959 --> 00:03:22,239
direction

103
00:03:22,239 --> 00:03:25,120
uh we actually restricted our study to

104
00:03:25,120 --> 00:03:27,440
permutations so the difference is that

105
00:03:27,440 --> 00:03:29,519
now we don't have any degree of freedom

106
00:03:29,519 --> 00:03:30,640
in the kids schedule because it's only a

107
00:03:30,640 --> 00:03:32,959
permutation so there is uh something

108
00:03:32,959 --> 00:03:35,760
that simplifies a lot in that

109
00:03:35,760 --> 00:03:37,599
um but it's also that

110
00:03:37,599 --> 00:03:39,680
so using this restricted setting you

111
00:03:39,680 --> 00:03:41,519
could expand this to more than aes like

112
00:03:41,519 --> 00:03:44,319
permutations and introduce an mip model

113
00:03:44,319 --> 00:03:46,560
still based on myap but which is very

114
00:03:46,560 --> 00:03:47,760
simple

115
00:03:47,760 --> 00:03:49,840
and this model we also include

116
00:03:49,840 --> 00:03:52,000
quantum attacks so we define quantum

117
00:03:52,000 --> 00:03:54,480
meet in the middle attacks and and

118
00:03:54,480 --> 00:03:57,680
include them as a new optimization goal

119
00:03:57,680 --> 00:04:00,319
this allows us to find new improved

120
00:04:00,319 --> 00:04:02,000
either improved classical attacks or

121
00:04:02,000 --> 00:04:04,239
quantum attacks on several primitives

122
00:04:04,239 --> 00:04:05,519
such as

123
00:04:05,519 --> 00:04:09,680
registrant aes and haraka of course

124
00:04:10,239 --> 00:04:11,840
so as an example we can have a look at

125
00:04:11,840 --> 00:04:14,480
the attacks on haraka 512. it's actually

126
00:04:14,480 --> 00:04:16,478
already known since europe 21 that are

127
00:04:16,478 --> 00:04:18,639
graphic 12 is broken

128
00:04:18,639 --> 00:04:20,880
there is a pretty much attack on that on

129
00:04:20,880 --> 00:04:22,400
this function which is for instance in

130
00:04:22,400 --> 00:04:27,520
time to do the 240 instead of 2d 256

131
00:04:27,520 --> 00:04:30,720
and has a memory complexity of 2d 128.

132
00:04:30,720 --> 00:04:32,800
now in our paper we don't reduce this

133
00:04:32,800 --> 00:04:34,400
time complexity but we showed that with

134
00:04:34,400 --> 00:04:35,520
a different

135
00:04:35,520 --> 00:04:37,199
characteristic we could reduce the

136
00:04:37,199 --> 00:04:39,440
memory down to the 16 which is very

137
00:04:39,440 --> 00:04:40,560
small

138
00:04:40,560 --> 00:04:42,400
and with the same characteristic

139
00:04:42,400 --> 00:04:44,160
it becomes also possible to run a

140
00:04:44,160 --> 00:04:46,400
quantum attack which is going to run in

141
00:04:46,400 --> 00:04:47,759
a basically the square root of the time

142
00:04:47,759 --> 00:04:50,320
complexity with some additional factors

143
00:04:50,320 --> 00:04:53,600
so to the 123

144
00:04:53,600 --> 00:04:55,280
applications of haraca the quantum

145
00:04:55,280 --> 00:04:56,320
circuit

146
00:04:56,320 --> 00:04:59,360
and the same memory complexity

147
00:04:59,360 --> 00:05:00,960
so

148
00:05:00,960 --> 00:05:03,039
for the rest of the results you can find

149
00:05:03,039 --> 00:05:04,639
the details

150
00:05:04,639 --> 00:05:07,680
in the print version of the paper and

151
00:05:07,680 --> 00:05:09,600
the code is available on make it pick

152
00:05:09,600 --> 00:05:13,960
nodes so thank you for attention

