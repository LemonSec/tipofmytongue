1
00:00:02,159 --> 00:00:04,080
hi so i'm erika swanberg and i'll be

2
00:00:04,080 --> 00:00:05,279
telling you about our work on

3
00:00:05,279 --> 00:00:07,600
universally composable end-to-end secure

4
00:00:07,600 --> 00:00:09,440
messaging

5
00:00:09,440 --> 00:00:12,080
so signal is a secure messaging protocol

6
00:00:12,080 --> 00:00:13,920
used to transmit hundreds of billions of

7
00:00:13,920 --> 00:00:15,839
messages each day

8
00:00:15,839 --> 00:00:18,080
and one of its key innovations is it has

9
00:00:18,080 --> 00:00:20,160
a continuous key agreement with both

10
00:00:20,160 --> 00:00:22,800
post compromise and forward security and

11
00:00:22,800 --> 00:00:24,800
recall that forward security protects

12
00:00:24,800 --> 00:00:27,439
the data transmitted before compromised

13
00:00:27,439 --> 00:00:29,199
and post compromised

14
00:00:29,199 --> 00:00:31,359
security protects data transmitted after

15
00:00:31,359 --> 00:00:33,440
the exposure event

16
00:00:33,440 --> 00:00:35,440
and so in a number of settings the

17
00:00:35,440 --> 00:00:37,520
signal protocol is combined with other

18
00:00:37,520 --> 00:00:40,079
cryptographic protocols or parts of it

19
00:00:40,079 --> 00:00:42,960
are repurposed for other applications

20
00:00:42,960 --> 00:00:44,800
and so in order to understand the

21
00:00:44,800 --> 00:00:46,800
security guarantees of signal in these

22
00:00:46,800 --> 00:00:48,960
various settings we need a composable

23
00:00:48,960 --> 00:00:52,000
security analysis

24
00:00:52,320 --> 00:00:54,719
so in this work we formulate the ideal

25
00:00:54,719 --> 00:00:56,960
functionality that captures secure

26
00:00:56,960 --> 00:00:58,559
messaging

27
00:00:58,559 --> 00:01:00,559
and we then decompose the secure

28
00:01:00,559 --> 00:01:02,399
messaging functionality into sub

29
00:01:02,399 --> 00:01:04,239
functionalities that are congruent with

30
00:01:04,239 --> 00:01:06,159
the signal protocol design

31
00:01:06,159 --> 00:01:08,479
and importantly the sub functionalities

32
00:01:08,479 --> 00:01:11,040
must be subroutine respecting so that we

33
00:01:11,040 --> 00:01:14,159
can then apply our composition theorems

34
00:01:14,159 --> 00:01:16,320
and lastly we show how to realize these

35
00:01:16,320 --> 00:01:18,159
individual components using standard

36
00:01:18,159 --> 00:01:19,759
primitives and minimal hardness

37
00:01:19,759 --> 00:01:22,240
assumptions

38
00:01:22,640 --> 00:01:24,640
all right so in this process we need to

39
00:01:24,640 --> 00:01:26,080
get around a number of technical

40
00:01:26,080 --> 00:01:28,240
difficulties and in this brief talk i'll

41
00:01:28,240 --> 00:01:30,159
just mention two of them

42
00:01:30,159 --> 00:01:32,880
so one is untangling signals inherent

43
00:01:32,880 --> 00:01:34,799
circularity

44
00:01:34,799 --> 00:01:36,400
and the second one is dealing with

45
00:01:36,400 --> 00:01:38,159
adaptive corruptions

46
00:01:38,159 --> 00:01:40,320
and for details on this third point see

47
00:01:40,320 --> 00:01:42,798
our paper

48
00:01:43,119 --> 00:01:45,680
so let's begin with our secure messaging

49
00:01:45,680 --> 00:01:48,000
functionality so when alice wants to

50
00:01:48,000 --> 00:01:51,040
send a message she asks fsm and in

51
00:01:51,040 --> 00:01:53,200
response she'll get a ciphertext header

52
00:01:53,200 --> 00:01:55,680
pair and then alice herself sends the

53
00:01:55,680 --> 00:01:57,520
pair over the network

54
00:01:57,520 --> 00:01:59,119
and later when bob receives the

55
00:01:59,119 --> 00:02:02,240
ciphertext and header he can ask fsm for

56
00:02:02,240 --> 00:02:05,439
the original message back

57
00:02:05,680 --> 00:02:08,720
so fsm has several desirable properties

58
00:02:08,720 --> 00:02:10,560
first alice and bob are guaranteed

59
00:02:10,560 --> 00:02:12,879
immediate encryption and decryption even

60
00:02:12,879 --> 00:02:15,200
for out-of-order messages

61
00:02:15,200 --> 00:02:16,800
and even against a fully adopted

62
00:02:16,800 --> 00:02:18,640
adversary the parties will eventually

63
00:02:18,640 --> 00:02:20,800
heal from a state compromise and their

64
00:02:20,800 --> 00:02:22,319
messages are protected by forward

65
00:02:22,319 --> 00:02:23,840
secrecy

66
00:02:23,840 --> 00:02:25,760
and note that determining the exact

67
00:02:25,760 --> 00:02:28,560
moment where security is regained post

68
00:02:28,560 --> 00:02:30,480
compromise is one of the analytical

69
00:02:30,480 --> 00:02:33,518
challenges of this work

70
00:02:33,840 --> 00:02:35,920
all right so let's decompose this ideal

71
00:02:35,920 --> 00:02:38,560
functionality so the signal protocol

72
00:02:38,560 --> 00:02:40,640
achieves forward and backward secrecy

73
00:02:40,640 --> 00:02:42,720
via a public ratchet and a symmetric

74
00:02:42,720 --> 00:02:44,720
ratchet

75
00:02:44,720 --> 00:02:46,879
so the public ratchet functionality

76
00:02:46,879 --> 00:02:48,720
persists for the entire communication

77
00:02:48,720 --> 00:02:50,640
session and it guarantees that parties

78
00:02:50,640 --> 00:02:52,879
will heal after compromise

79
00:02:52,879 --> 00:02:55,120
and then within each epic we have a

80
00:02:55,120 --> 00:02:57,360
symmetric graduate functionality that

81
00:02:57,360 --> 00:02:59,280
performs authenticated encryption and

82
00:02:59,280 --> 00:03:01,920
decryption of several messages

83
00:03:01,920 --> 00:03:03,840
with key evolution between them to

84
00:03:03,840 --> 00:03:06,879
provide forward security

85
00:03:06,879 --> 00:03:08,000
and

86
00:03:08,000 --> 00:03:10,159
this is the original signal design that

87
00:03:10,159 --> 00:03:14,079
we echo in our modular breakdown

88
00:03:14,879 --> 00:03:16,640
so next we can

89
00:03:16,640 --> 00:03:18,800
further decompose the symmetric ratchet

90
00:03:18,800 --> 00:03:20,400
into

91
00:03:20,400 --> 00:03:22,640
a per message authenticated encryption

92
00:03:22,640 --> 00:03:25,680
functionality that does the encryption

93
00:03:25,680 --> 00:03:27,680
and so at this point in our modeling

94
00:03:27,680 --> 00:03:29,360
there's a problem of circularity that

95
00:03:29,360 --> 00:03:32,159
comes up

96
00:03:32,159 --> 00:03:34,080
so the way that the signal public

97
00:03:34,080 --> 00:03:36,640
ratchet works is it only advances its

98
00:03:36,640 --> 00:03:38,239
state if the incoming message

99
00:03:38,239 --> 00:03:39,680
authenticates

100
00:03:39,680 --> 00:03:41,599
and the problem is that the incoming

101
00:03:41,599 --> 00:03:43,840
message is authenticated using a key

102
00:03:43,840 --> 00:03:46,400
that is derived from the message itself

103
00:03:46,400 --> 00:03:48,560
so the behavior of the public ratchet

104
00:03:48,560 --> 00:03:51,280
depends on the message authentication

105
00:03:51,280 --> 00:03:52,799
and vice versa

106
00:03:52,799 --> 00:03:54,799
and this is a problem when decomposing

107
00:03:54,799 --> 00:03:56,879
signal in a modular fashion so it

108
00:03:56,879 --> 00:04:01,399
requires care in our modeling

109
00:04:01,680 --> 00:04:03,120
all right

110
00:04:03,120 --> 00:04:05,439
so to break the circularity between

111
00:04:05,439 --> 00:04:08,400
these modules we have the public ratchet

112
00:04:08,400 --> 00:04:10,959
functionality give out random nonsense

113
00:04:10,959 --> 00:04:12,879
authentication keys to the message

114
00:04:12,879 --> 00:04:14,400
exchange module

115
00:04:14,400 --> 00:04:16,959
if the incoming message was mauled

116
00:04:16,959 --> 00:04:19,839
and crucially these random junk keys are

117
00:04:19,839 --> 00:04:22,079
mutually pseudorandom

118
00:04:22,079 --> 00:04:23,919
so the public ratchet then lets the

119
00:04:23,919 --> 00:04:26,400
caller decide when the public key is

120
00:04:26,400 --> 00:04:29,400
correct

121
00:04:30,080 --> 00:04:31,520
finally we sketched the issue of

122
00:04:31,520 --> 00:04:33,520
realizing these functionalities under

123
00:04:33,520 --> 00:04:36,000
adaptive corruptions so let's start with

124
00:04:36,000 --> 00:04:38,479
a public ratchet so to realize the ideal

125
00:04:38,479 --> 00:04:40,240
functionality against an adaptive

126
00:04:40,240 --> 00:04:42,960
adversary all of those random nonsense

127
00:04:42,960 --> 00:04:44,560
keys that we gave out need to be

128
00:04:44,560 --> 00:04:46,880
consistent with the true internal root

129
00:04:46,880 --> 00:04:48,880
key that is used to generate the message

130
00:04:48,880 --> 00:04:50,240
chain keys

131
00:04:50,240 --> 00:04:52,479
and so one easy way of guaranteeing the

132
00:04:52,479 --> 00:04:54,800
consistency while also providing

133
00:04:54,800 --> 00:04:56,800
adaptive security is to use a random

134
00:04:56,800 --> 00:04:58,800
oracle to model this

135
00:04:58,800 --> 00:05:00,880
public ratchet

136
00:05:00,880 --> 00:05:02,960
however instead we introduce a new

137
00:05:02,960 --> 00:05:06,880
primitive that we call the cascaded prfg

138
00:05:06,880 --> 00:05:09,120
it can be constructed from punctuable

139
00:05:09,120 --> 00:05:11,840
prfs and it allows us to simulate

140
00:05:11,840 --> 00:05:14,720
adaptive corruptions so see the paper

141
00:05:14,720 --> 00:05:16,479
for more details on this interesting

142
00:05:16,479 --> 00:05:18,960
primitive

143
00:05:19,440 --> 00:05:20,880
and next we can realize the

144
00:05:20,880 --> 00:05:22,800
authenticated encryption functionality

145
00:05:22,800 --> 00:05:24,720
with any adaptively secure encryption

146
00:05:24,720 --> 00:05:27,199
scheme like one time pad plus mac um

147
00:05:27,199 --> 00:05:29,919
here we do need the random oracle to

148
00:05:29,919 --> 00:05:33,359
guarantee adaptive security

149
00:05:33,919 --> 00:05:35,759
and lastly we make the public ratchet

150
00:05:35,759 --> 00:05:38,400
component a global uc functionality and

151
00:05:38,400 --> 00:05:41,520
this allows us to compose all these

152
00:05:41,520 --> 00:05:44,160
sub protocols into the original signal

153
00:05:44,160 --> 00:05:46,639
protocol

154
00:05:46,960 --> 00:05:48,720
all right so i'll just flash this slide

155
00:05:48,720 --> 00:05:51,199
of related work and you can pause

156
00:05:51,199 --> 00:05:53,600
the video if you want to read it

157
00:05:53,600 --> 00:05:55,600
but i'll just end by saying please watch

158
00:05:55,600 --> 00:05:57,919
our 25-minute talk

159
00:05:57,919 --> 00:05:59,919
and read our paper for more details and

160
00:05:59,919 --> 00:06:02,479
also use our

161
00:06:02,479 --> 00:06:04,560
functionalities and

162
00:06:04,560 --> 00:06:10,120
analyses in your future papers thanks

