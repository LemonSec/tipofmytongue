1
00:00:00,399 --> 00:00:02,000
my name is blake coleman and i'll be

2
00:00:02,000 --> 00:00:03,679
talking about sustained space and

3
00:00:03,679 --> 00:00:05,520
cumulative complexity trade-offs for

4
00:00:05,520 --> 00:00:07,680
data dependent memory hard functions

5
00:00:07,680 --> 00:00:11,440
this is work with jeremiah blocky

6
00:00:11,519 --> 00:00:13,679
memory hard functions are hash functions

7
00:00:13,679 --> 00:00:15,759
whose computational costs are dominated

8
00:00:15,759 --> 00:00:17,680
by memory cost

9
00:00:17,680 --> 00:00:19,600
our intuitive goal is to force an

10
00:00:19,600 --> 00:00:21,680
attacker to lock up a large amount of

11
00:00:21,680 --> 00:00:24,960
memory for a long amount of time

12
00:00:24,960 --> 00:00:26,720
memory hard functions protect low

13
00:00:26,720 --> 00:00:28,640
entropy secrets like passwords from

14
00:00:28,640 --> 00:00:30,800
brute force attacks

15
00:00:30,800 --> 00:00:32,479
they're also used for egalitarian

16
00:00:32,479 --> 00:00:35,279
impursive work

17
00:00:35,360 --> 00:00:37,280
a natural question is how can we

18
00:00:37,280 --> 00:00:39,040
formalize our intuitive notions of

19
00:00:39,040 --> 00:00:41,120
memory hardness

20
00:00:41,120 --> 00:00:43,920
one way is through cumulative complexity

21
00:00:43,920 --> 00:00:46,160
which is the sum of the memory used at

22
00:00:46,160 --> 00:00:48,959
each time step

23
00:00:50,559 --> 00:00:53,280
as an example script is a widely used

24
00:00:53,280 --> 00:00:55,680
memory heart function

25
00:00:55,680 --> 00:00:57,760
it has been proven to have maximal

26
00:00:57,760 --> 00:01:00,320
cumulative complexity of n squared where

27
00:01:00,320 --> 00:01:03,920
n is the running time parameter

28
00:01:03,920 --> 00:01:05,760
but does this maximal cumulative

29
00:01:05,760 --> 00:01:07,760
complexity actually align with our

30
00:01:07,760 --> 00:01:10,640
intuitions of memory hardness

31
00:01:10,640 --> 00:01:12,479
the answer is no because you can

32
00:01:12,479 --> 00:01:14,880
evaluate s script using constant memory

33
00:01:14,880 --> 00:01:17,119
for n squared time so it still has

34
00:01:17,119 --> 00:01:19,439
maximal cumulative complexity

35
00:01:19,439 --> 00:01:21,280
but it doesn't match our intuitive goal

36
00:01:21,280 --> 00:01:23,439
of forcing an attacker to allocate a

37
00:01:23,439 --> 00:01:25,439
large amount of space for a large amount

38
00:01:25,439 --> 00:01:27,839
of time

39
00:01:28,000 --> 00:01:29,680
a second approach for defining memory

40
00:01:29,680 --> 00:01:33,439
hardness is sustained space complexity

41
00:01:33,439 --> 00:01:35,360
this measures the time spent above a

42
00:01:35,360 --> 00:01:37,520
memory threshold s

43
00:01:37,520 --> 00:01:39,280
this matches our intuitive goal for

44
00:01:39,280 --> 00:01:41,119
memory hard functions because an

45
00:01:41,119 --> 00:01:42,720
attacker with high sustained space

46
00:01:42,720 --> 00:01:45,360
complexity must allocate a lot of space

47
00:01:45,360 --> 00:01:47,600
s for a long time t

48
00:01:47,600 --> 00:01:49,360
and this is stricter than cumulative

49
00:01:49,360 --> 00:01:51,680
complexity because such an attacker has

50
00:01:51,680 --> 00:01:55,840
cumulative cost s times t

51
00:01:55,920 --> 00:01:58,079
now a natural question is whether we can

52
00:01:58,079 --> 00:02:00,240
construct a memory hard function in

53
00:02:00,240 --> 00:02:03,119
which any evaluation strategy sustains

54
00:02:03,119 --> 00:02:06,719
in space for n steps

55
00:02:06,799 --> 00:02:09,679
and the answer is no it turns out that

56
00:02:09,679 --> 00:02:11,280
any memory hard function can be

57
00:02:11,280 --> 00:02:14,720
evaluated using n over login space

58
00:02:14,720 --> 00:02:16,879
however this attack isn't practical

59
00:02:16,879 --> 00:02:21,040
because it may have exponential run time

60
00:02:21,760 --> 00:02:24,640
now the key question is whether we can

61
00:02:24,640 --> 00:02:26,560
ensure that an attacker with low

62
00:02:26,560 --> 00:02:28,959
sustained space complexity has very

63
00:02:28,959 --> 00:02:31,680
large cumulative complexity

64
00:02:31,680 --> 00:02:33,680
in this work our goal is to construct

65
00:02:33,680 --> 00:02:35,840
memory hard functions such that any

66
00:02:35,840 --> 00:02:38,319
strategy either sustains in space for n

67
00:02:38,319 --> 00:02:41,200
steps or has cumulative complexity much

68
00:02:41,200 --> 00:02:43,280
greater than n squared we've already

69
00:02:43,280 --> 00:02:45,680
seen that script can be computed using

70
00:02:45,680 --> 00:02:48,720
constant space for n squared steps

71
00:02:48,720 --> 00:02:51,040
so we examine two memory hard functions

72
00:02:51,040 --> 00:02:52,959
with high trade-offs and then we give a

73
00:02:52,959 --> 00:02:54,400
theoretical construction with

74
00:02:54,400 --> 00:02:57,280
near-optimal trade-offs

75
00:02:57,280 --> 00:02:59,519
hybrid dr sample has the property that

76
00:02:59,519 --> 00:03:02,080
any strategy either sustains anova log

77
00:03:02,080 --> 00:03:04,800
in space for n steps or has cumulative

78
00:03:04,800 --> 00:03:08,400
complexity n cubed over login

79
00:03:08,400 --> 00:03:10,480
argon 2id won the password hashing

80
00:03:10,480 --> 00:03:13,280
competition in 2015 and is available in

81
00:03:13,280 --> 00:03:15,440
many cryptographic libraries

82
00:03:15,440 --> 00:03:17,120
we show that any strategy either

83
00:03:17,120 --> 00:03:20,640
sustains almost in space for n steps

84
00:03:20,640 --> 00:03:23,200
or it has cumulative complexity slightly

85
00:03:23,200 --> 00:03:25,840
more than n squared

86
00:03:25,840 --> 00:03:28,560
finally we give a construction in which

87
00:03:28,560 --> 00:03:30,879
any strategy either sustains in space

88
00:03:30,879 --> 00:03:34,159
for n steps or has cumulative complexity

89
00:03:34,159 --> 00:03:38,120
almost n cubed

