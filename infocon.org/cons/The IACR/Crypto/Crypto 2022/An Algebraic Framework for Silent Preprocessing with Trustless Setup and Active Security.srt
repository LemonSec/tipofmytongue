1
00:00:00,320 --> 00:00:02,240
we present an algebraic framework that

2
00:00:02,240 --> 00:00:04,960
can be used to build public kpcfs for ot

3
00:00:04,960 --> 00:00:06,560
and vector early and two-party

4
00:00:06,560 --> 00:00:08,559
homomorphic secret sharing for branching

5
00:00:08,559 --> 00:00:10,240
programs we consider and solve two

6
00:00:10,240 --> 00:00:11,920
problems in the first one we have two

7
00:00:11,920 --> 00:00:14,240
parties and a correlation rule c this is

8
00:00:14,240 --> 00:00:15,759
a function that outputs two random

9
00:00:15,759 --> 00:00:18,480
correlated values are 0 and r1 and we

10
00:00:18,480 --> 00:00:20,800
want to give our 0 only to p0 and r1

11
00:00:20,800 --> 00:00:23,039
only to q1

12
00:00:23,039 --> 00:00:24,800
we want to generate many of these

13
00:00:24,800 --> 00:00:27,199
correlated pairs using only one round of

14
00:00:27,199 --> 00:00:29,920
interaction and sub-linear communication

15
00:00:29,920 --> 00:00:32,880
in the size of the outputs

16
00:00:32,880 --> 00:00:34,960
a possible solution to this problem is

17
00:00:34,960 --> 00:00:36,399
called the public-key sheet random

18
00:00:36,399 --> 00:00:39,120
correlation function or pcf for short

19
00:00:39,120 --> 00:00:40,800
this is a one-round protocol in which

20
00:00:40,800 --> 00:00:43,280
the parties exchange simultaneously some

21
00:00:43,280 --> 00:00:45,680
public keys and then with the help of

22
00:00:45,680 --> 00:00:47,760
public nurses they can

23
00:00:47,760 --> 00:00:49,520
evaluate the public keys along with the

24
00:00:49,520 --> 00:00:51,920
secret counterparts obtaining their own

25
00:00:51,920 --> 00:00:56,320
part of the correlated randomness

26
00:00:56,320 --> 00:00:58,320
in our paper we present an efficient

27
00:00:58,320 --> 00:01:00,160
solution that works for ot and vector

28
00:01:00,160 --> 00:01:01,840
only correlation

29
00:01:01,840 --> 00:01:04,879
the second problem we analyzed is still

30
00:01:04,879 --> 00:01:06,880
in the two-party setting and now the

31
00:01:06,880 --> 00:01:09,680
parties have some private inputs x0 and

32
00:01:09,680 --> 00:01:12,560
x1 our goal is to apply a function f

33
00:01:12,560 --> 00:01:14,640
belonging to some clutch class on this

34
00:01:14,640 --> 00:01:15,520
input

35
00:01:15,520 --> 00:01:17,759
and we want to obtain the output using

36
00:01:17,759 --> 00:01:19,920
only two rounds of interaction

37
00:01:19,920 --> 00:01:22,000
a possible solution to this problem is

38
00:01:22,000 --> 00:01:24,720
called homomorphic secret sharing

39
00:01:24,720 --> 00:01:27,200
so a it is a construction in which in

40
00:01:27,200 --> 00:01:29,119
the first round the party's secret share

41
00:01:29,119 --> 00:01:30,720
their inputs according to some

42
00:01:30,720 --> 00:01:32,720
particular secret sharing scheme and

43
00:01:32,720 --> 00:01:35,600
then using only a local computation they

44
00:01:35,600 --> 00:01:38,159
can derive an additive secret sharing of

45
00:01:38,159 --> 00:01:39,280
the output

46
00:01:39,280 --> 00:01:41,200
in our paper represent a scheme that

47
00:01:41,200 --> 00:01:43,680
works for branching programs

48
00:01:43,680 --> 00:01:46,079
all right our starting point is the rise

49
00:01:46,079 --> 00:01:48,640
of palia it is a eurocrypt 2021 paper

50
00:01:48,640 --> 00:01:50,720
that solved both the problems i just

51
00:01:50,720 --> 00:01:51,840
described

52
00:01:51,840 --> 00:01:53,040
the solution

53
00:01:53,040 --> 00:01:56,320
is based on the polycryptosystem but all

54
00:01:56,320 --> 00:01:58,320
the constructions suffer from a problem

55
00:01:58,320 --> 00:02:00,000
namely that they need a trusted setup

56
00:02:00,000 --> 00:02:03,119
that generates a public rsa module

57
00:02:03,119 --> 00:02:05,520
in this work we observe that the

58
00:02:05,520 --> 00:02:07,280
techniques of the rise of pali can be

59
00:02:07,280 --> 00:02:09,280
generalized we don't need to work over

60
00:02:09,280 --> 00:02:12,160
the group anymore we can work over an

61
00:02:12,160 --> 00:02:14,080
abstract framework a group that

62
00:02:14,080 --> 00:02:16,959
satisfies some particular properties

63
00:02:16,959 --> 00:02:18,080
one of this

64
00:02:18,080 --> 00:02:20,400
instantiation of this framework allows

65
00:02:20,400 --> 00:02:22,319
to get rid of the trusted setups and

66
00:02:22,319 --> 00:02:23,120
this

67
00:02:23,120 --> 00:02:26,160
instantiation is based on class curves

68
00:02:26,160 --> 00:02:28,720
okay our framework is a group g that can

69
00:02:28,720 --> 00:02:31,599
be decomposed as the product of f and h

70
00:02:31,599 --> 00:02:33,360
where f is cyclic

71
00:02:33,360 --> 00:02:37,440
and d log is easy over f but hard over h

72
00:02:37,440 --> 00:02:39,360
in this setting it is possible to solve

73
00:02:39,360 --> 00:02:41,280
the distributed d log problem the

74
00:02:41,280 --> 00:02:43,040
technique at the base of all our

75
00:02:43,040 --> 00:02:45,120
constructions basically we have two

76
00:02:45,120 --> 00:02:47,599
parties that hold two values alpha beta

77
00:02:47,599 --> 00:02:49,920
whose quotient is a power of f f to the

78
00:02:49,920 --> 00:02:50,800
m

79
00:02:50,800 --> 00:02:54,000
and the goal is to convert these inputs

80
00:02:54,000 --> 00:02:56,480
into another secret sharing of them

81
00:02:56,480 --> 00:02:58,560
without any interaction

82
00:02:58,560 --> 00:02:59,599
okay

83
00:02:59,599 --> 00:03:01,840
in order to understand uh how to solve

84
00:03:01,840 --> 00:03:05,040
this problem we have to rewrite the

85
00:03:05,040 --> 00:03:07,760
group g as you see on the slide so

86
00:03:07,760 --> 00:03:10,640
we split it into cosets of f and we

87
00:03:10,640 --> 00:03:12,480
represent each of these causes as a ring

88
00:03:12,480 --> 00:03:15,440
because f is cyclic

89
00:03:15,440 --> 00:03:17,120
now we have these two elements alpha and

90
00:03:17,120 --> 00:03:18,800
beta whose question here is the power of

91
00:03:18,800 --> 00:03:21,040
f so that means that they belong to the

92
00:03:21,040 --> 00:03:23,599
same coset of f

93
00:03:23,599 --> 00:03:24,799
okay

94
00:03:24,799 --> 00:03:25,519
now

95
00:03:25,519 --> 00:03:28,000
we assume that the parties p0 and p1

96
00:03:28,000 --> 00:03:31,120
both know a canonical representative of

97
00:03:31,120 --> 00:03:33,360
the cost containing alpha beta

98
00:03:33,360 --> 00:03:35,519
in this setting solving the distributed

99
00:03:35,519 --> 00:03:38,239
d log is easy the parties just need to

100
00:03:38,239 --> 00:03:40,720
divide their input by gamma and then

101
00:03:40,720 --> 00:03:43,840
they compute the d log of the result

102
00:03:43,840 --> 00:03:46,080
uh and yes the result is a secret

103
00:03:46,080 --> 00:03:48,000
sharing of m

104
00:03:48,000 --> 00:03:50,560
the question is how can we obtain this

105
00:03:50,560 --> 00:03:53,760
canonical representative of the coset in

106
00:03:53,760 --> 00:03:56,319
a polynomial time and in order to solve

107
00:03:56,319 --> 00:03:58,000
this problem we introduced two new

108
00:03:58,000 --> 00:04:00,080
notions the first one is called the cost

109
00:04:00,080 --> 00:04:02,239
labeling function basically it is an

110
00:04:02,239 --> 00:04:04,319
efficient function that maps each of the

111
00:04:04,319 --> 00:04:06,799
cosets into a different element

112
00:04:06,799 --> 00:04:08,799
the second notion we introduce is called

113
00:04:08,799 --> 00:04:10,400
the lifting function and basically it

114
00:04:10,400 --> 00:04:12,480
does the opposite it takes an element in

115
00:04:12,480 --> 00:04:15,519
the image of the cost labeling function

116
00:04:15,519 --> 00:04:17,759
and it map maps it back into the

117
00:04:17,759 --> 00:04:19,358
corresponding coset

118
00:04:19,358 --> 00:04:20,160
okay

119
00:04:20,160 --> 00:04:22,400
now how can we find the representatives

120
00:04:22,400 --> 00:04:24,160
well it's pretty easy the parties just

121
00:04:24,160 --> 00:04:26,479
take their input they apply the cost

122
00:04:26,479 --> 00:04:28,320
labeling function they end up with the

123
00:04:28,320 --> 00:04:30,479
same element and then they lift it back

124
00:04:30,479 --> 00:04:32,080
into the coset using the lifting

125
00:04:32,080 --> 00:04:34,080
function now the question is how many

126
00:04:34,080 --> 00:04:36,400
groups have cosset labeling functions

127
00:04:36,400 --> 00:04:38,240
and lifting functions

128
00:04:38,240 --> 00:04:40,400
well we came up with instantiations the

129
00:04:40,400 --> 00:04:42,160
first one is pale as it was already

130
00:04:42,160 --> 00:04:44,639
known since europe in 2021

131
00:04:44,639 --> 00:04:46,720
the second one are groups in which f is

132
00:04:46,720 --> 00:04:49,040
small namely polynomial size then we

133
00:04:49,040 --> 00:04:50,960
have variants of joy early bird and

134
00:04:50,960 --> 00:04:53,199
finally we have class groups

135
00:04:53,199 --> 00:04:54,560
the first three

136
00:04:54,560 --> 00:04:56,560
instantiations still need trusted setups

137
00:04:56,560 --> 00:04:58,720
to build public epcfs and homomorphic

138
00:04:58,720 --> 00:05:00,560
secret sharing but the good thing is

139
00:05:00,560 --> 00:05:03,840
that the last one doesn't

