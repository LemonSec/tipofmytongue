1
00:00:01,680 --> 00:00:06,960
hello everyone i'm jun jill from cornell

2
00:00:04,799 --> 00:00:09,760
and the title of our work is nominally

3
00:00:06,960 --> 00:00:11,920
ability against polynomial temporary

4
00:00:09,760 --> 00:00:14,160
and this is a joint work with marshall

5
00:00:11,920 --> 00:00:16,400
bull and tomoki from colombia

6
00:00:14,160 --> 00:00:17,359
and my advisor ishan chattabadier also

7
00:00:16,400 --> 00:00:20,479
from cornell

8
00:00:17,359 --> 00:00:22,480
and the young time from stanford so

9
00:00:20,480 --> 00:00:24,080
first uh let me tell you what is an

10
00:00:22,480 --> 00:00:26,720
available code

11
00:00:24,080 --> 00:00:29,119
so now many book code is first

12
00:00:26,720 --> 00:00:33,040
introduced by gemboski pr track and wix

13
00:00:29,119 --> 00:00:35,360
in 2010 and it contains an encoding

14
00:00:33,040 --> 00:00:37,040
function and a decoding function

15
00:00:35,360 --> 00:00:38,800
and we'll consider a temporary

16
00:00:37,040 --> 00:00:41,440
experiment which take

17
00:00:38,800 --> 00:00:42,718
input message s and encode it into a

18
00:00:41,440 --> 00:00:44,399
code word c

19
00:00:42,719 --> 00:00:46,079
and then there will be an adversary who

20
00:00:44,399 --> 00:00:48,879
tempers this code word c

21
00:00:46,079 --> 00:00:51,360
to a temporal coordinate and then we'll

22
00:00:48,879 --> 00:00:54,480
apply a decoding function on tlc to get

23
00:00:51,360 --> 00:00:57,360
the temporary message to your dies

24
00:00:54,480 --> 00:00:59,519
so our goal in this temporary experiment

25
00:00:57,360 --> 00:01:02,480
is we want to guarantee that

26
00:00:59,520 --> 00:01:03,680
either the tempered message s remains

27
00:01:02,480 --> 00:01:06,798
unchanged

28
00:01:03,680 --> 00:01:09,200
or it becomes something unrelated to s

29
00:01:06,799 --> 00:01:11,360
which means it gets destroyed by this

30
00:01:09,200 --> 00:01:14,560
temporary experiment

31
00:01:11,360 --> 00:01:17,039
so formally we will consider

32
00:01:14,560 --> 00:01:19,119
a temporary function family f which we

33
00:01:17,040 --> 00:01:21,759
want to protect against

34
00:01:19,119 --> 00:01:23,759
and then we also need two properties so

35
00:01:21,759 --> 00:01:26,720
the first one is the correctness

36
00:01:23,759 --> 00:01:28,880
which says if we take a message as and

37
00:01:26,720 --> 00:01:30,000
then we encode it and decode it without

38
00:01:28,880 --> 00:01:32,158
any temporary

39
00:01:30,000 --> 00:01:33,600
then what we get is exactly the same

40
00:01:32,159 --> 00:01:34,960
message

41
00:01:33,600 --> 00:01:37,280
and the second property is a

42
00:01:34,960 --> 00:01:40,559
nominability which says

43
00:01:37,280 --> 00:01:43,680
uh for every function f

44
00:01:40,560 --> 00:01:46,000
there exists a simulator df

45
00:01:43,680 --> 00:01:47,360
for the corresponding temporary

46
00:01:46,000 --> 00:01:50,880
experiment for f

47
00:01:47,360 --> 00:01:54,799
which means the the temperament s will

48
00:01:50,880 --> 00:01:57,360
be roughly equivalent to applying this

49
00:01:54,799 --> 00:01:59,520
simulator df on the original message s

50
00:01:57,360 --> 00:02:01,040
and furthermore this simulator df should

51
00:01:59,520 --> 00:02:03,200
be a distribution

52
00:02:01,040 --> 00:02:04,399
over identity function or constant

53
00:02:03,200 --> 00:02:06,799
function

54
00:02:04,399 --> 00:02:08,878
so here identity function means the

55
00:02:06,799 --> 00:02:10,720
message will remain unchanged

56
00:02:08,878 --> 00:02:12,000
and constant function means it will be

57
00:02:10,720 --> 00:02:13,440
changed to something completely

58
00:02:12,000 --> 00:02:15,280
unrelated

59
00:02:13,440 --> 00:02:18,879
in other words the message gets

60
00:02:15,280 --> 00:02:22,160
destroyed by this template experiment

61
00:02:18,879 --> 00:02:24,480
and a simple observation here is it is

62
00:02:22,160 --> 00:02:25,120
impossible to construct an available

63
00:02:24,480 --> 00:02:27,280
code

64
00:02:25,120 --> 00:02:28,959
which is secure against arbitrary

65
00:02:27,280 --> 00:02:32,000
tempering function f

66
00:02:28,959 --> 00:02:33,200
because otherwise the adversary can just

67
00:02:32,000 --> 00:02:35,599
take the

68
00:02:33,200 --> 00:02:36,879
template function to be first decoding

69
00:02:35,599 --> 00:02:37,840
the code word to get the original

70
00:02:36,879 --> 00:02:39,920
message

71
00:02:37,840 --> 00:02:41,440
and change it to something related and

72
00:02:39,920 --> 00:02:44,399
then re-encode it

73
00:02:41,440 --> 00:02:46,000
then this will break the nominability so

74
00:02:44,400 --> 00:02:49,200
some restriction on this temporary

75
00:02:46,000 --> 00:02:51,360
function family is necessary

76
00:02:49,200 --> 00:02:53,119
and next we will see some tempering

77
00:02:51,360 --> 00:02:54,879
functions which have been considered in

78
00:02:53,120 --> 00:02:57,280
previous works

79
00:02:54,879 --> 00:02:59,440
so the most well studied one is probably

80
00:02:57,280 --> 00:03:01,599
the split state model

81
00:02:59,440 --> 00:03:03,760
so in a split state model a cold war

82
00:03:01,599 --> 00:03:05,760
will be split into several parts

83
00:03:03,760 --> 00:03:07,679
and the adversary is allowed to temper

84
00:03:05,760 --> 00:03:09,359
each part of the codeword individually

85
00:03:07,680 --> 00:03:11,040
and arbitrarily

86
00:03:09,360 --> 00:03:13,920
and there are a lot of great work in

87
00:03:11,040 --> 00:03:16,000
this line and remarkably a recent result

88
00:03:13,920 --> 00:03:17,839
by agawa and obronsky

89
00:03:16,000 --> 00:03:19,280
showed that it is possible to construct

90
00:03:17,840 --> 00:03:21,599
a numerical code

91
00:03:19,280 --> 00:03:24,239
with constant rate in the two-split

92
00:03:21,599 --> 00:03:26,238
state model

93
00:03:24,239 --> 00:03:27,599
and another line of work which recently

94
00:03:26,239 --> 00:03:30,239
received more attention

95
00:03:27,599 --> 00:03:32,238
are the global tempering functions so in

96
00:03:30,239 --> 00:03:33,280
the global tempering functions we can

97
00:03:32,239 --> 00:03:35,440
apply

98
00:03:33,280 --> 00:03:37,040
the adversary can apply a function

99
00:03:35,440 --> 00:03:38,799
temporary function on the whole code

100
00:03:37,040 --> 00:03:40,319
word

101
00:03:38,799 --> 00:03:42,560
however there should be some

102
00:03:40,319 --> 00:03:44,879
restrictions on the template function

103
00:03:42,560 --> 00:03:47,840
that the diversity can apply

104
00:03:44,879 --> 00:03:49,040
so some examples include permutations

105
00:03:47,840 --> 00:03:51,120
and b flipping

106
00:03:49,040 --> 00:03:53,760
local functions of fine functions modaf

107
00:03:51,120 --> 00:03:56,959
circuits for depth decision trees

108
00:03:53,760 --> 00:03:59,280
and um there are also some other

109
00:03:56,959 --> 00:04:00,000
beautiful works based on some possible

110
00:03:59,280 --> 00:04:02,640
cryptographic

111
00:04:00,000 --> 00:04:03,120
assumptions but in this talk we will

112
00:04:02,640 --> 00:04:05,200
focus

113
00:04:03,120 --> 00:04:07,040
on unconditional information theoretical

114
00:04:05,200 --> 00:04:09,920
results

115
00:04:07,040 --> 00:04:11,679
so the first result in our paper also

116
00:04:09,920 --> 00:04:14,399
falls in this category

117
00:04:11,680 --> 00:04:15,439
so we construct a nominal code which is

118
00:04:14,400 --> 00:04:19,519
secure against

119
00:04:15,439 --> 00:04:19,519
polynomials over prime field fq

120
00:04:19,600 --> 00:04:23,600
and formally we the code word in our

121
00:04:22,400 --> 00:04:28,000
numerical code

122
00:04:23,600 --> 00:04:30,880
will be an element over a prime field fq

123
00:04:28,000 --> 00:04:33,360
and then the tempering functions will be

124
00:04:30,880 --> 00:04:35,600
degree-d polynomials and unvariables

125
00:04:33,360 --> 00:04:38,880
over the prime field fq

126
00:04:35,600 --> 00:04:41,840
so if the adversary choose p1 to

127
00:04:38,880 --> 00:04:43,040
choose degree polynomials p1 to pn as a

128
00:04:41,840 --> 00:04:44,960
tempering function

129
00:04:43,040 --> 00:04:46,160
then the temperature code will become p

130
00:04:44,960 --> 00:04:49,599
on x p to x to p

131
00:04:46,160 --> 00:04:52,880
and x and our first result is

132
00:04:49,600 --> 00:04:55,919
we show that for every integer m

133
00:04:52,880 --> 00:04:56,880
and d and the sufficiently large prime q

134
00:04:55,919 --> 00:04:59,280
there exists

135
00:04:56,880 --> 00:05:02,719
a nominal code which is secure against

136
00:04:59,280 --> 00:05:02,719
the greedy polynomial temporary

137
00:05:03,759 --> 00:05:07,440
and interesting corollary of our result

138
00:05:06,560 --> 00:05:09,840
is

139
00:05:07,440 --> 00:05:12,000
our nominal code actually also works for

140
00:05:09,840 --> 00:05:15,119
arithmetic circuits

141
00:05:12,000 --> 00:05:15,919
so in arithmetic circuits it's a circuit

142
00:05:15,120 --> 00:05:18,560
which takes

143
00:05:15,919 --> 00:05:19,599
some variables and some constants and in

144
00:05:18,560 --> 00:05:23,120
this circuit

145
00:05:19,600 --> 00:05:26,479
each gate will compute the product

146
00:05:23,120 --> 00:05:28,240
or the sum of its two inputs

147
00:05:26,479 --> 00:05:29,599
and so we will consider the tempering

148
00:05:28,240 --> 00:05:32,160
function to be

149
00:05:29,600 --> 00:05:34,160
a size s arithmetic circuits on

150
00:05:32,160 --> 00:05:36,720
variables over f q

151
00:05:34,160 --> 00:05:37,759
and we define such a temporary function

152
00:05:36,720 --> 00:05:40,880
family to be

153
00:05:37,759 --> 00:05:42,400
e and qs and here the size s is the

154
00:05:40,880 --> 00:05:44,320
number of gates in their semantic

155
00:05:42,400 --> 00:05:47,359
circuits

156
00:05:44,320 --> 00:05:50,960
and it's not hard to see that a size

157
00:05:47,360 --> 00:05:53,840
s arithmetic circuits actually compute

158
00:05:50,960 --> 00:05:55,520
a polynomial with degree at most 2 3 s

159
00:05:53,840 --> 00:05:56,560
so this means this tempering function

160
00:05:55,520 --> 00:06:01,198
family e and q

161
00:05:56,560 --> 00:06:04,800
s is contained in f and q 2 3 s

162
00:06:01,199 --> 00:06:05,360
so our results for against polynomial

163
00:06:04,800 --> 00:06:07,919
temperature

164
00:06:05,360 --> 00:06:08,560
will also give a nominal code which is

165
00:06:07,919 --> 00:06:11,758
secure

166
00:06:08,560 --> 00:06:13,759
against arithmetic circuits

167
00:06:11,759 --> 00:06:15,280
so note that there is the the

168
00:06:13,759 --> 00:06:18,400
restriction of the

169
00:06:15,280 --> 00:06:19,840
prime should be larger than a polynomial

170
00:06:18,400 --> 00:06:22,239
into two

171
00:06:19,840 --> 00:06:23,119
however the code the length of the

172
00:06:22,240 --> 00:06:26,639
codeword is

173
00:06:23,120 --> 00:06:28,960
unlock q which means uh the length of

174
00:06:26,639 --> 00:06:31,919
the codeword is actually only have

175
00:06:28,960 --> 00:06:32,799
a linear dependence on the circuit size

176
00:06:31,919 --> 00:06:35,599
s

177
00:06:32,800 --> 00:06:36,639
so uh this restriction on the prime q is

178
00:06:35,600 --> 00:06:39,360
actually not

179
00:06:36,639 --> 00:06:39,360
unreasonable

180
00:06:40,080 --> 00:06:44,479
and our second result is the numerable

181
00:06:43,120 --> 00:06:46,720
secret sharing

182
00:06:44,479 --> 00:06:48,639
and before we introduce our result first

183
00:06:46,720 --> 00:06:49,840
let's briefly review what is a secret

184
00:06:48,639 --> 00:06:51,280
sharing

185
00:06:49,840 --> 00:06:54,560
so a secretary scheme is first

186
00:06:51,280 --> 00:06:58,318
introduced by xiaomi and blockly in 1979

187
00:06:54,560 --> 00:07:00,560
and in the t auto fund secretary scheme

188
00:06:58,319 --> 00:07:02,960
there are two functions a share function

189
00:07:00,560 --> 00:07:05,039
and a reconstruction function

190
00:07:02,960 --> 00:07:06,400
and a share function will take the

191
00:07:05,039 --> 00:07:09,440
secret s

192
00:07:06,400 --> 00:07:11,120
and produce unshares and we want to

193
00:07:09,440 --> 00:07:13,199
guarantee two properties

194
00:07:11,120 --> 00:07:14,479
the first one is the correctness which

195
00:07:13,199 --> 00:07:17,280
means given

196
00:07:14,479 --> 00:07:18,960
any we should be able to apply the

197
00:07:17,280 --> 00:07:20,960
reconstruction function on it

198
00:07:18,960 --> 00:07:22,400
to get to reconstruct the original

199
00:07:20,960 --> 00:07:24,638
secret

200
00:07:22,400 --> 00:07:27,039
and the second property is a secrecy

201
00:07:24,639 --> 00:07:28,560
which means if we are only given less

202
00:07:27,039 --> 00:07:30,880
than teachers

203
00:07:28,560 --> 00:07:32,160
then these share together should reveal

204
00:07:30,880 --> 00:07:35,520
no information

205
00:07:32,160 --> 00:07:37,919
about the original secret desk

206
00:07:35,520 --> 00:07:40,560
and the recent work by goyo and kumar

207
00:07:37,919 --> 00:07:43,599
consider an available secret sharing

208
00:07:40,560 --> 00:07:45,520
which is basically a secretary scheme

209
00:07:43,599 --> 00:07:47,039
with an additional nominability

210
00:07:45,520 --> 00:07:50,000
guarantee

211
00:07:47,039 --> 00:07:51,680
so in number six sharing we will

212
00:07:50,000 --> 00:07:54,400
consider an adversary

213
00:07:51,680 --> 00:07:56,960
who can temper the shares and what we

214
00:07:54,400 --> 00:08:00,000
want to guarantee is

215
00:07:56,960 --> 00:08:02,159
if we take t-temperatures and apply the

216
00:08:00,000 --> 00:08:04,800
reconstruction function on it to get

217
00:08:02,160 --> 00:08:06,400
a temper secret then this temperature

218
00:08:04,800 --> 00:08:08,879
secret should either

219
00:08:06,400 --> 00:08:10,318
be identical to the original sacred or

220
00:08:08,879 --> 00:08:13,680
it should become something

221
00:08:10,319 --> 00:08:16,879
unrelated to the original secret

222
00:08:13,680 --> 00:08:18,720
so similar to the nominative code it is

223
00:08:16,879 --> 00:08:20,400
also necessary to place some

224
00:08:18,720 --> 00:08:22,639
restrictions on the template function

225
00:08:20,400 --> 00:08:24,840
that the vessel can apply

226
00:08:22,639 --> 00:08:26,319
otherwise the anniversary will be able

227
00:08:24,840 --> 00:08:28,799
to

228
00:08:26,319 --> 00:08:29,360
reconstruct the secret and then temper

229
00:08:28,800 --> 00:08:31,599
it

230
00:08:29,360 --> 00:08:35,279
and then re-share this temper secret

231
00:08:31,599 --> 00:08:35,279
which will break the nominability

232
00:08:35,519 --> 00:08:41,120
so in prior works the

233
00:08:38,880 --> 00:08:42,958
most common temporary model is probably

234
00:08:41,120 --> 00:08:46,160
individual tempering

235
00:08:42,958 --> 00:08:49,439
so in individual tempering the adversary

236
00:08:46,160 --> 00:08:50,800
can temper each share individually and

237
00:08:49,440 --> 00:08:53,040
arbitrarily

238
00:08:50,800 --> 00:08:54,719
so the first temperature will only

239
00:08:53,040 --> 00:08:56,399
depend on the first year and the second

240
00:08:54,720 --> 00:08:58,480
temperature will only depend on second

241
00:08:56,399 --> 00:09:00,320
shard and so on

242
00:08:58,480 --> 00:09:01,600
and there's also another model which

243
00:09:00,320 --> 00:09:04,560
have been considered is

244
00:09:01,600 --> 00:09:06,560
a joint temporary model and in the joint

245
00:09:04,560 --> 00:09:09,439
tempering model the adversary can split

246
00:09:06,560 --> 00:09:13,199
the shears into two destroying sets

247
00:09:09,440 --> 00:09:17,040
and then the adversary can tamper

248
00:09:13,200 --> 00:09:17,040
the shares in each disjoint set

249
00:09:17,120 --> 00:09:23,680
jointly and arbitrarily but

250
00:09:20,720 --> 00:09:24,640
still the temperature in the first set

251
00:09:23,680 --> 00:09:26,319
can only depend

252
00:09:24,640 --> 00:09:28,000
on the shares in the first set and

253
00:09:26,320 --> 00:09:28,880
temperature in the second set can only

254
00:09:28,000 --> 00:09:31,920
depend on

255
00:09:28,880 --> 00:09:33,600
the share in the second set and finally

256
00:09:31,920 --> 00:09:36,560
there is another model

257
00:09:33,600 --> 00:09:38,160
which is global tempering function and

258
00:09:36,560 --> 00:09:41,599
in global tempering functions

259
00:09:38,160 --> 00:09:44,399
we allow the adversary

260
00:09:41,600 --> 00:09:46,240
we allow each temperature to depend on

261
00:09:44,399 --> 00:09:48,480
all the input shares

262
00:09:46,240 --> 00:09:49,360
however we will place some restrictions

263
00:09:48,480 --> 00:09:51,120
on the

264
00:09:49,360 --> 00:09:53,040
temporary function that the bursary can

265
00:09:51,120 --> 00:09:55,279
apply

266
00:09:53,040 --> 00:09:56,399
so some examples including a fine

267
00:09:55,279 --> 00:09:58,720
temporary

268
00:09:56,399 --> 00:10:00,480
which is by lean at all and the

269
00:09:58,720 --> 00:10:03,920
composition of joint temporary and

270
00:10:00,480 --> 00:10:04,720
fine function which is by shutter party

271
00:10:03,920 --> 00:10:07,120
and

272
00:10:04,720 --> 00:10:08,079
our second result is also false in this

273
00:10:07,120 --> 00:10:10,320
category

274
00:10:08,079 --> 00:10:11,359
we construct a numerical sql sharing

275
00:10:10,320 --> 00:10:13,600
which is secure

276
00:10:11,360 --> 00:10:16,079
against a polynomial tempering over

277
00:10:13,600 --> 00:10:19,120
prime field fq

278
00:10:16,079 --> 00:10:21,760
so our second result says for every uh

279
00:10:19,120 --> 00:10:23,120
integer m and dt and some sufficiently

280
00:10:21,760 --> 00:10:25,439
large prime q

281
00:10:23,120 --> 00:10:26,560
there exists a t out of the numerable

282
00:10:25,440 --> 00:10:29,519
sequential scheme

283
00:10:26,560 --> 00:10:32,000
for an mb secret against the degree

284
00:10:29,519 --> 00:10:33,839
polynomial temporary

285
00:10:32,000 --> 00:10:35,839
and furthermore we actually give a

286
00:10:33,839 --> 00:10:38,320
stronger security guarantee

287
00:10:35,839 --> 00:10:41,120
we allow the adversary to adaptively

288
00:10:38,320 --> 00:10:43,279
choose a temporary function

289
00:10:41,120 --> 00:10:44,399
more precisely the adversary can first

290
00:10:43,279 --> 00:10:46,720
take t minus one

291
00:10:44,399 --> 00:10:49,120
shares and then use the information from

292
00:10:46,720 --> 00:10:52,240
these shares to choose

293
00:10:49,120 --> 00:10:54,079
to choose a temporary function f then

294
00:10:52,240 --> 00:10:54,640
the reversal will apply this tempering

295
00:10:54,079 --> 00:10:57,599
function

296
00:10:54,640 --> 00:10:59,199
on all the shares to put to produce the

297
00:10:57,600 --> 00:11:02,079
temperatures

298
00:10:59,200 --> 00:11:02,560
and note that each temperature can still

299
00:11:02,079 --> 00:11:05,279
depend

300
00:11:02,560 --> 00:11:07,199
on all the input shares however this

301
00:11:05,279 --> 00:11:10,000
choice of the tempering function

302
00:11:07,200 --> 00:11:12,079
can only depend on t minus one shares

303
00:11:10,000 --> 00:11:14,320
otherwise the adversary will be able to

304
00:11:12,079 --> 00:11:18,479
apply a reconstruction attack

305
00:11:14,320 --> 00:11:20,720
which is impossible and

306
00:11:18,480 --> 00:11:20,720
so

307
00:11:22,399 --> 00:11:26,079
this adaptive choice of tempering

308
00:11:24,399 --> 00:11:26,800
function is actually a pretty strong

309
00:11:26,079 --> 00:11:30,959
security

310
00:11:26,800 --> 00:11:34,399
guarantee because it allows the battery

311
00:11:30,959 --> 00:11:35,760
to tamper these t-minus monitors jointly

312
00:11:34,399 --> 00:11:38,320
and arbitrarily

313
00:11:35,760 --> 00:11:40,079
and furthermore the adversary can use

314
00:11:38,320 --> 00:11:42,640
some information from these shares

315
00:11:40,079 --> 00:11:44,719
to choose some suitable tempering

316
00:11:42,640 --> 00:11:47,839
function for the other shears

317
00:11:44,720 --> 00:11:52,160
so the adversary can actually do a lot

318
00:11:47,839 --> 00:11:52,160
with this adaptive choice

319
00:11:53,760 --> 00:11:59,200
and also as a corollary

320
00:11:56,880 --> 00:12:02,320
this numeracy sharing also works for

321
00:11:59,200 --> 00:12:02,320
arithmetic circuits

322
00:12:02,720 --> 00:12:07,200
and next we will give a brief overview

323
00:12:04,560 --> 00:12:10,239
on how we get these two results

324
00:12:07,200 --> 00:12:13,040
so both of our results are based on a c

325
00:12:10,240 --> 00:12:13,680
less nominal effector against polynomial

326
00:12:13,040 --> 00:12:15,040
temporary

327
00:12:13,680 --> 00:12:18,239
which we will introduce in the next

328
00:12:15,040 --> 00:12:18,719
slide and then with this basic building

329
00:12:18,240 --> 00:12:21,920
block

330
00:12:18,720 --> 00:12:24,639
we will apply the reduction by chakri

331
00:12:21,920 --> 00:12:27,599
and guswami to get a nominable code

332
00:12:24,639 --> 00:12:28,959
and then we'll apply another uh scheme

333
00:12:27,600 --> 00:12:33,200
by the neto to get

334
00:12:28,959 --> 00:12:33,199
a noun numerical sequentially

335
00:12:33,279 --> 00:12:39,279
and also in order to

336
00:12:36,320 --> 00:12:39,600
apply these two reductions we also need

337
00:12:39,279 --> 00:12:42,160
an

338
00:12:39,600 --> 00:12:43,360
efficient inverter for this non-metallic

339
00:12:42,160 --> 00:12:46,240
structure

340
00:12:43,360 --> 00:12:48,720
which we believe to also contain some

341
00:12:46,240 --> 00:12:51,839
interesting new techniques

342
00:12:48,720 --> 00:12:53,839
and also to achieve the

343
00:12:51,839 --> 00:12:55,839
adaptive security guarantee in our

344
00:12:53,839 --> 00:12:59,120
nominative sequel sharing

345
00:12:55,839 --> 00:13:01,279
we actually use a specific

346
00:12:59,120 --> 00:13:03,040
and non-trivial instantiation of the

347
00:13:01,279 --> 00:13:04,959
linear scheme

348
00:13:03,040 --> 00:13:07,680
instead of just applying it as a black

349
00:13:04,959 --> 00:13:10,638
box

350
00:13:07,680 --> 00:13:12,638
so next let me define what is the c less

351
00:13:10,639 --> 00:13:15,120
nonmetal extractor

352
00:13:12,639 --> 00:13:15,920
so a c less than a metabolic extractor

353
00:13:15,120 --> 00:13:18,720
is first

354
00:13:15,920 --> 00:13:20,000
introduced by triaxia and guswami and it

355
00:13:18,720 --> 00:13:22,639
is a function

356
00:13:20,000 --> 00:13:24,720
which will be applied on a source s to

357
00:13:22,639 --> 00:13:27,519
produce a distribution which is

358
00:13:24,720 --> 00:13:29,760
a closer uniform and in other words this

359
00:13:27,519 --> 00:13:32,399
is the randomness extractor

360
00:13:29,760 --> 00:13:34,319
and furthermore it needs to satisfy an

361
00:13:32,399 --> 00:13:37,200
availability guarantee

362
00:13:34,320 --> 00:13:37,680
which says uh for every tempering

363
00:13:37,200 --> 00:13:40,800
function

364
00:13:37,680 --> 00:13:43,199
f from some temporary function family uh

365
00:13:40,800 --> 00:13:45,199
if we apply this temporary function f on

366
00:13:43,199 --> 00:13:47,359
the source to get a temperature source

367
00:13:45,199 --> 00:13:49,680
and feed this temperature source into

368
00:13:47,360 --> 00:13:52,160
the malleable extractor

369
00:13:49,680 --> 00:13:54,160
then what we get should be identical to

370
00:13:52,160 --> 00:13:56,240
the original output of the extractor

371
00:13:54,160 --> 00:13:59,279
or it should be independent of the

372
00:13:56,240 --> 00:14:01,519
output of the ejector

373
00:13:59,279 --> 00:14:03,519
so character and glue swami show that if

374
00:14:01,519 --> 00:14:06,240
we have a numerable extractor

375
00:14:03,519 --> 00:14:08,959
for uniform distribution then this rule

376
00:14:06,240 --> 00:14:11,760
implies an available code

377
00:14:08,959 --> 00:14:13,680
and the encoding against the same

378
00:14:11,760 --> 00:14:15,279
temporary function family

379
00:14:13,680 --> 00:14:16,719
and the encoding function in this

380
00:14:15,279 --> 00:14:19,360
numerical code

381
00:14:16,720 --> 00:14:20,560
will be an inverter for this number

382
00:14:19,360 --> 00:14:22,720
extractor

383
00:14:20,560 --> 00:14:23,760
which takes a uniform sample from its

384
00:14:22,720 --> 00:14:25,920
pre-image

385
00:14:23,760 --> 00:14:31,360
and the decoding function will be

386
00:14:25,920 --> 00:14:34,319
exactly this numerical extractor

387
00:14:31,360 --> 00:14:35,360
so our main result is we show that for

388
00:14:34,320 --> 00:14:37,920
every integer

389
00:14:35,360 --> 00:14:38,720
m and d and the sufficiently large prime

390
00:14:37,920 --> 00:14:41,599
q

391
00:14:38,720 --> 00:14:43,600
there we can construct an explicit c

392
00:14:41,600 --> 00:14:46,240
less than level extractor

393
00:14:43,600 --> 00:14:48,399
which output the mmb string and which

394
00:14:46,240 --> 00:14:50,480
works for uniform distribution

395
00:14:48,399 --> 00:14:53,279
and secure against the degree d

396
00:14:50,480 --> 00:14:55,519
polynomial tempering functions

397
00:14:53,279 --> 00:14:57,519
and furthermore we also show that there

398
00:14:55,519 --> 00:15:01,839
exists efficiently computable

399
00:14:57,519 --> 00:15:04,399
inverter for such number effector

400
00:15:01,839 --> 00:15:06,240
so with these two results we directly

401
00:15:04,399 --> 00:15:09,680
get the numerable code

402
00:15:06,240 --> 00:15:09,680
against polynomial temporary

403
00:15:11,199 --> 00:15:17,040
and actually uh what we prove is a

404
00:15:14,560 --> 00:15:18,479
stronger result so we show that this

405
00:15:17,040 --> 00:15:21,439
number extractor

406
00:15:18,480 --> 00:15:23,760
actually works for a skew of fine source

407
00:15:21,440 --> 00:15:26,240
which will define the next slice

408
00:15:23,760 --> 00:15:27,519
and this stronger result is actually

409
00:15:26,240 --> 00:15:31,279
important

410
00:15:27,519 --> 00:15:32,800
to support the the adaptive choice of

411
00:15:31,279 --> 00:15:36,079
tempering function in your

412
00:15:32,800 --> 00:15:36,079
nominatable security

413
00:15:36,639 --> 00:15:41,360
so we say a source x is a skew of fine

414
00:15:40,639 --> 00:15:44,639
source

415
00:15:41,360 --> 00:15:46,320
if it is a uniform distribution over and

416
00:15:44,639 --> 00:15:49,040
a fine subspace

417
00:15:46,320 --> 00:15:51,440
in other words it is a fine source and

418
00:15:49,040 --> 00:15:52,160
also it needs to satisfy the property

419
00:15:51,440 --> 00:15:56,079
that

420
00:15:52,160 --> 00:15:56,079
none of its is a constant

421
00:15:56,160 --> 00:15:59,759
and another way to view this skew of

422
00:15:58,480 --> 00:16:02,720
fine source is

423
00:15:59,759 --> 00:16:05,519
we can consider it as a uniform source

424
00:16:02,720 --> 00:16:08,720
condition on some a fine leakage

425
00:16:05,519 --> 00:16:11,040
and which doesn't reveal any any single

426
00:16:08,720 --> 00:16:14,240
coordinate x i

427
00:16:11,040 --> 00:16:16,560
so this view will be useful in our

428
00:16:14,240 --> 00:16:19,440
construction of non-level sequentially

429
00:16:16,560 --> 00:16:21,439
because we'll consider the other shares

430
00:16:19,440 --> 00:16:24,399
leaked to the adversary to be some

431
00:16:21,440 --> 00:16:27,920
fine equation for this source and more

432
00:16:24,399 --> 00:16:27,920
details can be found in our paper

433
00:16:28,720 --> 00:16:34,480
and next we will give a brief overview

434
00:16:30,800 --> 00:16:36,959
of this extractor construction

435
00:16:34,480 --> 00:16:38,399
so the construction of our extractor

436
00:16:36,959 --> 00:16:41,599
will be of the form

437
00:16:38,399 --> 00:16:42,800
uh which first apply a low degree

438
00:16:41,600 --> 00:16:46,240
polynomial edge

439
00:16:42,800 --> 00:16:47,199
on the input x1 to xn and then we'll

440
00:16:46,240 --> 00:16:50,320
take the less

441
00:16:47,199 --> 00:16:52,240
m bit of the output of h to be our

442
00:16:50,320 --> 00:16:54,160
extractor output

443
00:16:52,240 --> 00:16:55,759
and this construction have appeared

444
00:16:54,160 --> 00:16:58,240
several times in the context of

445
00:16:55,759 --> 00:16:59,759
extractors and what we want to do here

446
00:16:58,240 --> 00:17:03,199
is we want to choose

447
00:16:59,759 --> 00:17:05,360
a proper polynomial edge such that

448
00:17:03,199 --> 00:17:07,760
it is this extractor is actually not

449
00:17:05,359 --> 00:17:10,639
malleable

450
00:17:07,760 --> 00:17:13,280
so a first attempt will be uh choosing

451
00:17:10,640 --> 00:17:16,079
this extractor to be the same as

452
00:17:13,280 --> 00:17:17,839
the gabizon rust extractor which works

453
00:17:16,079 --> 00:17:18,879
for a fine source over a large prime

454
00:17:17,839 --> 00:17:21,280
field

455
00:17:18,880 --> 00:17:23,679
and in such extractor this polynomial

456
00:17:21,280 --> 00:17:26,720
edge is taken to be the summation

457
00:17:23,679 --> 00:17:29,760
of x i to the c i for some

458
00:17:26,720 --> 00:17:32,080
distinct integers you want to see n

459
00:17:29,760 --> 00:17:32,879
however such extractor is actually not

460
00:17:32,080 --> 00:17:35,678
numerical

461
00:17:32,880 --> 00:17:38,000
because it is not it is vulnerable to a

462
00:17:35,679 --> 00:17:40,640
linear temporary attack

463
00:17:38,000 --> 00:17:41,520
and more precisely we will choose some

464
00:17:40,640 --> 00:17:44,960
proper

465
00:17:41,520 --> 00:17:48,160
constant beta i such that

466
00:17:44,960 --> 00:17:48,720
beta i to the ci equals to some constant

467
00:17:48,160 --> 00:17:51,760
k

468
00:17:48,720 --> 00:17:53,440
which is different from one so uh this

469
00:17:51,760 --> 00:17:56,480
will imply that if we

470
00:17:53,440 --> 00:17:59,039
tamper each xi to beta ixi

471
00:17:56,480 --> 00:18:00,080
then the tempered output of h will be

472
00:17:59,039 --> 00:18:03,840
exactly k

473
00:18:00,080 --> 00:18:06,399
times hx so this

474
00:18:03,840 --> 00:18:07,120
even after we truncate it to the left

475
00:18:06,400 --> 00:18:09,600
and bits

476
00:18:07,120 --> 00:18:11,039
there will still be some correlation

477
00:18:09,600 --> 00:18:13,439
between the

478
00:18:11,039 --> 00:18:14,160
original output of h between the

479
00:18:13,440 --> 00:18:15,919
original

480
00:18:14,160 --> 00:18:18,240
of the extractor and the template output

481
00:18:15,919 --> 00:18:20,559
of the extractor so this will break the

482
00:18:18,240 --> 00:18:24,320
nominability

483
00:18:20,559 --> 00:18:26,720
so uh on next step is to try to

484
00:18:24,320 --> 00:18:28,159
change this construction to something

485
00:18:26,720 --> 00:18:31,600
different which prevents

486
00:18:28,160 --> 00:18:34,720
this linear attack so we will choose

487
00:18:31,600 --> 00:18:38,159
h to be the summation of x i 2 is c

488
00:18:34,720 --> 00:18:40,240
i plus x i to the c i plus b where b

489
00:18:38,160 --> 00:18:42,880
is the constant chosen to be called

490
00:18:40,240 --> 00:18:46,160
prime to q minus one

491
00:18:42,880 --> 00:18:49,679
and why we set why we set

492
00:18:46,160 --> 00:18:51,360
two terms for each x i and make the

493
00:18:49,679 --> 00:18:54,799
difference of the degree to be b

494
00:18:51,360 --> 00:18:55,439
is because it with such construction it

495
00:18:54,799 --> 00:18:58,720
is actually

496
00:18:55,440 --> 00:19:02,080
impossible to find a beta i such that

497
00:18:58,720 --> 00:19:05,039
beta i2 is ci and beta i2c b

498
00:19:02,080 --> 00:19:07,039
are the same and is different from one

499
00:19:05,039 --> 00:19:10,720
so therefore a linear attack

500
00:19:07,039 --> 00:19:14,080
doesn't work for this construction

501
00:19:10,720 --> 00:19:18,480
and um so actually we were taken

502
00:19:14,080 --> 00:19:19,918
uh h to be uh the summation of x i three

503
00:19:18,480 --> 00:19:22,960
c two i minus one plus

504
00:19:19,919 --> 00:19:25,919
x i two c two i where c i is

505
00:19:22,960 --> 00:19:29,520
a properly chosen arithmetic progression

506
00:19:25,919 --> 00:19:31,919
with a common difference being b

507
00:19:29,520 --> 00:19:32,720
and we don't have time to talk too much

508
00:19:31,919 --> 00:19:35,280
about

509
00:19:32,720 --> 00:19:37,039
why we choose this but we will give some

510
00:19:35,280 --> 00:19:40,240
brief ideas about

511
00:19:37,039 --> 00:19:43,039
how we prove that this works so

512
00:19:40,240 --> 00:19:44,080
the basic proof idea is first we will

513
00:19:43,039 --> 00:19:47,679
use some

514
00:19:44,080 --> 00:19:50,080
exponential some techniques to show that

515
00:19:47,679 --> 00:19:51,600
when this edge is taken to be a low

516
00:19:50,080 --> 00:19:54,000
degree polynomial

517
00:19:51,600 --> 00:19:55,280
then the only possible correlation of

518
00:19:54,000 --> 00:19:57,600
the uh

519
00:19:55,280 --> 00:20:00,000
real output and the temperature output

520
00:19:57,600 --> 00:20:03,280
is the linear correlation

521
00:20:00,000 --> 00:20:06,320
and which we we have seen in the

522
00:20:03,280 --> 00:20:09,360
uh like as in the linear attack for the

523
00:20:06,320 --> 00:20:11,520
original construction of gabes and ross

524
00:20:09,360 --> 00:20:12,719
and this can be proved using the whale

525
00:20:11,520 --> 00:20:15,039
bound uh

526
00:20:12,720 --> 00:20:19,120
from aspect geometry and the generalized

527
00:20:15,039 --> 00:20:21,039
extra lemma by rao and dodi sato

528
00:20:19,120 --> 00:20:22,879
and then after proving this we only need

529
00:20:21,039 --> 00:20:26,240
to show that uh the

530
00:20:22,880 --> 00:20:27,760
the polynomial edge we construct uh

531
00:20:26,240 --> 00:20:29,760
this will never happen for the

532
00:20:27,760 --> 00:20:32,799
polynomial as we construct

533
00:20:29,760 --> 00:20:34,640
so uh some so we will do some case

534
00:20:32,799 --> 00:20:35,360
analysis which we don't have time to go

535
00:20:34,640 --> 00:20:38,400
through

536
00:20:35,360 --> 00:20:41,039
but we'll briefly talk about uh

537
00:20:38,400 --> 00:20:42,240
like how we prevent all the possible

538
00:20:41,039 --> 00:20:45,120
attacks

539
00:20:42,240 --> 00:20:46,559
so uh first having two terms for each

540
00:20:45,120 --> 00:20:48,320
exercise will prevent

541
00:20:46,559 --> 00:20:49,840
linear tempering as we have seen in the

542
00:20:48,320 --> 00:20:51,678
previous slides

543
00:20:49,840 --> 00:20:53,199
and then the choice of ci being

544
00:20:51,679 --> 00:20:56,240
arithmetic progression

545
00:20:53,200 --> 00:20:59,679
will prevent the non-linear tempering

546
00:20:56,240 --> 00:21:02,960
uh like such as quadratic temporary

547
00:20:59,679 --> 00:21:05,760
and this is based on the lemma by uh

548
00:21:02,960 --> 00:21:06,559
by the vr gabizan and weaker said and

549
00:21:05,760 --> 00:21:08,799
finally

550
00:21:06,559 --> 00:21:10,399
uh because we restrict the input of fine

551
00:21:08,799 --> 00:21:12,879
source to be skew

552
00:21:10,400 --> 00:21:13,600
so this also prevents a text which says

553
00:21:12,880 --> 00:21:17,840
some

554
00:21:13,600 --> 00:21:17,840
which says some x i to be a constant

555
00:21:18,000 --> 00:21:22,720
okay next we'll briefly talk about

556
00:21:20,640 --> 00:21:24,799
efficient inverter which

557
00:21:22,720 --> 00:21:26,480
which will be the encoding function of

558
00:21:24,799 --> 00:21:28,639
the num level code

559
00:21:26,480 --> 00:21:29,840
so note that our number extractor

560
00:21:28,640 --> 00:21:32,400
consists of

561
00:21:29,840 --> 00:21:34,399
is a composition of a function sigma

562
00:21:32,400 --> 00:21:38,080
which truncates less than bits

563
00:21:34,400 --> 00:21:40,240
and the polynomial edge so

564
00:21:38,080 --> 00:21:41,678
to get the inverter for this

565
00:21:40,240 --> 00:21:45,200
straightforward construction

566
00:21:41,679 --> 00:21:47,840
is to first take a pre image of sigma

567
00:21:45,200 --> 00:21:50,000
to which is y and then we will take a

568
00:21:47,840 --> 00:21:53,199
pre-image of h

569
00:21:50,000 --> 00:21:56,480
of what for y and um

570
00:21:53,200 --> 00:21:57,360
to so taking a pre-image for sigma is

571
00:21:56,480 --> 00:21:59,679
trivial

572
00:21:57,360 --> 00:22:01,280
and taking a pre image of a polynomial

573
00:21:59,679 --> 00:22:05,120
edge can be based on

574
00:22:01,280 --> 00:22:06,720
an algorithm by a trajecular

575
00:22:05,120 --> 00:22:08,479
however there's a problem in this

576
00:22:06,720 --> 00:22:11,600
construction so

577
00:22:08,480 --> 00:22:14,799
because we need a uniform pre-image

578
00:22:11,600 --> 00:22:18,158
from the the composition of sigma and h

579
00:22:14,799 --> 00:22:21,520
so we actually cannot sample uh

580
00:22:18,159 --> 00:22:23,360
this pre-image y uniformly instead we

581
00:22:21,520 --> 00:22:24,559
need to sample y with probability

582
00:22:23,360 --> 00:22:28,399
proportional

583
00:22:24,559 --> 00:22:31,918
to the image of to the premise size of y

584
00:22:28,400 --> 00:22:34,720
but and a simple way to achieve this

585
00:22:31,919 --> 00:22:35,600
is by rejection sampling and a similar

586
00:22:34,720 --> 00:22:38,320
approach have been

587
00:22:35,600 --> 00:22:39,280
adopted by a child body and document in

588
00:22:38,320 --> 00:22:42,000
the

589
00:22:39,280 --> 00:22:43,440
uh tense fit in the in a work which

590
00:22:42,000 --> 00:22:47,760
construct attempts to

591
00:22:43,440 --> 00:22:50,880
split state numerical code however

592
00:22:47,760 --> 00:22:52,879
this doesn't work in our setting because

593
00:22:50,880 --> 00:22:56,400
in our setting uh

594
00:22:52,880 --> 00:22:59,760
our polynomial h works on un variables

595
00:22:56,400 --> 00:23:02,400
and this n can be a pretty large and

596
00:22:59,760 --> 00:23:03,600
and a large n will be especially useful

597
00:23:02,400 --> 00:23:06,480
in our construction of

598
00:23:03,600 --> 00:23:08,000
the numerable sql sharing and computing

599
00:23:06,480 --> 00:23:10,880
the pre-image size of edge

600
00:23:08,000 --> 00:23:11,760
will be expensive so in order to solve

601
00:23:10,880 --> 00:23:14,480
this problem

602
00:23:11,760 --> 00:23:15,679
we will actually temp we observe that

603
00:23:14,480 --> 00:23:18,799
the

604
00:23:15,679 --> 00:23:20,320
algorithm by traction chocolati is also

605
00:23:18,799 --> 00:23:22,960
a rejection sampling

606
00:23:20,320 --> 00:23:23,760
so we can embed this rejection sampling

607
00:23:22,960 --> 00:23:27,600
step

608
00:23:23,760 --> 00:23:29,760
uh into the structural clash algorithm

609
00:23:27,600 --> 00:23:30,879
so we are actually applying a rejection

610
00:23:29,760 --> 00:23:34,158
sampling on the

611
00:23:30,880 --> 00:23:36,720
on this uh on this composition of sigma

612
00:23:34,159 --> 00:23:39,440
and h

613
00:23:36,720 --> 00:23:40,559
okay finally we'll briefly go through

614
00:23:39,440 --> 00:23:43,120
how the

615
00:23:40,559 --> 00:23:46,000
nominal signaturing scheme works so the

616
00:23:43,120 --> 00:23:48,320
linux scheme works by first

617
00:23:46,000 --> 00:23:49,760
taking a share function to be first

618
00:23:48,320 --> 00:23:52,720
applying an inverter

619
00:23:49,760 --> 00:23:53,760
for the nominal extractor to get x then

620
00:23:52,720 --> 00:23:55,600
takes the

621
00:23:53,760 --> 00:23:58,640
erasure the encoding function of the

622
00:23:55,600 --> 00:24:01,678
erasure code to produce n shares

623
00:23:58,640 --> 00:24:04,159
and so in our setting it will be we will

624
00:24:01,679 --> 00:24:05,200
take the number effect to get a t out of

625
00:24:04,159 --> 00:24:07,200
unsecure sharing

626
00:24:05,200 --> 00:24:09,200
we will take a nominal effector which

627
00:24:07,200 --> 00:24:10,159
works on t elements in the prime field

628
00:24:09,200 --> 00:24:13,600
f2

629
00:24:10,159 --> 00:24:14,480
and then we will use a a erasure code

630
00:24:13,600 --> 00:24:18,240
which produce

631
00:24:14,480 --> 00:24:21,279
unshares of a prime element of

632
00:24:18,240 --> 00:24:22,960
uh which produce an element in the prime

633
00:24:21,279 --> 00:24:26,080
field fq

634
00:24:22,960 --> 00:24:28,640
and also we will take this encoding

635
00:24:26,080 --> 00:24:32,320
decoding function to be a systematic

636
00:24:28,640 --> 00:24:35,600
mds code and this will actually uh

637
00:24:32,320 --> 00:24:38,240
implies that uh any

638
00:24:35,600 --> 00:24:40,000
any t minus one share together will be

639
00:24:38,240 --> 00:24:42,159
uh some a fine leakage for

640
00:24:40,000 --> 00:24:43,039
x which doesn't reveal any single

641
00:24:42,159 --> 00:24:45,679
coordinating

642
00:24:43,039 --> 00:24:46,720
in x i so in other word condition on

643
00:24:45,679 --> 00:24:49,200
these shares

644
00:24:46,720 --> 00:24:49,919
the the source x will still be a skew of

645
00:24:49,200 --> 00:24:53,919
i source

646
00:24:49,919 --> 00:24:53,919
so the nominability still applies

647
00:24:55,279 --> 00:25:00,400
and finally we go through some open

648
00:24:57,919 --> 00:25:03,440
problems arise from this work

649
00:25:00,400 --> 00:25:05,840
so the first open problem uh so the

650
00:25:03,440 --> 00:25:08,640
first future direction will be

651
00:25:05,840 --> 00:25:11,120
trying to improve the parameters uh in

652
00:25:08,640 --> 00:25:12,960
our non-level code and sequentially

653
00:25:11,120 --> 00:25:14,959
such as improving the information rate

654
00:25:12,960 --> 00:25:16,880
or the arrow

655
00:25:14,960 --> 00:25:18,720
and the second reasonable problem would

656
00:25:16,880 --> 00:25:22,080
be trying to achieve

657
00:25:18,720 --> 00:25:24,960
numericality against polynomial

658
00:25:22,080 --> 00:25:26,240
over a field with smaller

659
00:25:24,960 --> 00:25:30,159
characteristics

660
00:25:26,240 --> 00:25:33,520
such as f2 and uh note that

661
00:25:30,159 --> 00:25:34,480
uh we this should uh if this is possible

662
00:25:33,520 --> 00:25:36,879
then this should be

663
00:25:34,480 --> 00:25:38,480
very different from our approach because

664
00:25:36,880 --> 00:25:41,600
our approach rely on

665
00:25:38,480 --> 00:25:44,000
whales bound which is only non-trivial

666
00:25:41,600 --> 00:25:47,918
when the

667
00:25:44,000 --> 00:25:49,520
over a large prime field and finally uh

668
00:25:47,919 --> 00:25:51,679
it will also be interesting to

669
00:25:49,520 --> 00:25:52,639
achieve nominability against other

670
00:25:51,679 --> 00:25:55,120
polynomial

671
00:25:52,640 --> 00:25:55,919
other global tempering functions

672
00:25:55,120 --> 00:25:57,520
especially

673
00:25:55,919 --> 00:25:59,600
those which already have some

674
00:25:57,520 --> 00:26:02,400
interesting average case for a bond

675
00:25:59,600 --> 00:26:04,320
such as small risk branching programs or

676
00:26:02,400 --> 00:26:11,279
ac0 circuit with parity gates

677
00:26:04,320 --> 00:26:11,279
etc thank you for your attention

