1
00:00:02,159 --> 00:00:04,880
hello

2
00:00:03,280 --> 00:00:07,520
i'm ray perlmer and i'm here to speak

3
00:00:04,880 --> 00:00:09,599
about cryptanalysis of lidocrypt joint

4
00:00:07,520 --> 00:00:12,719
work with daniel apon angela robinson

5
00:00:09,599 --> 00:00:12,719
and paulo santini

6
00:00:13,280 --> 00:00:17,840
so we're going to be talking about an

7
00:00:14,799 --> 00:00:20,960
attack on a nist pqc candidate

8
00:00:17,840 --> 00:00:23,359
in the second round called letacrypt

9
00:00:20,960 --> 00:00:25,599
and it's based on an older scheme called

10
00:00:23,359 --> 00:00:27,039
quasi cyclic low-density parity-check

11
00:00:25,599 --> 00:00:30,400
nicholase

12
00:00:27,039 --> 00:00:31,199
prior to our attack this construction

13
00:00:30,400 --> 00:00:33,360
had been

14
00:00:31,199 --> 00:00:34,800
around about 12 years without major

15
00:00:33,360 --> 00:00:38,399
break

16
00:00:34,800 --> 00:00:40,559
our attack was a major factor in why

17
00:00:38,399 --> 00:00:41,520
it didn't make it to the third round

18
00:00:40,559 --> 00:00:44,640
lolita crypt

19
00:00:41,520 --> 00:00:47,760
did publish a new spec

20
00:00:44,640 --> 00:00:49,920
which avoided the attack however nist

21
00:00:47,760 --> 00:00:51,680
decided that the attack was too large to

22
00:00:49,920 --> 00:00:54,160
tweak and made it too similar

23
00:00:51,680 --> 00:00:56,000
to its competitor bike based on the

24
00:00:54,160 --> 00:00:58,160
quasi cyclic moderate

25
00:00:56,000 --> 00:00:59,600
moderate density parity check michelin

26
00:00:58,160 --> 00:01:02,480
scheme

27
00:00:59,600 --> 00:01:02,480
from 2012.

28
00:01:03,280 --> 00:01:09,840
so conceptually the two schemes

29
00:01:06,479 --> 00:01:11,439
are quite similar in both cases the

30
00:01:09,840 --> 00:01:15,600
private key is a sparse

31
00:01:11,439 --> 00:01:19,119
binary quasi-cyclic parity check matrix

32
00:01:15,600 --> 00:01:19,520
which we've denoted as l here the public

33
00:01:19,119 --> 00:01:22,000
key

34
00:01:19,520 --> 00:01:23,920
is just the systematic form of a

35
00:01:22,000 --> 00:01:25,680
quasi-cyclic parity check matrix for the

36
00:01:23,920 --> 00:01:29,280
same code

37
00:01:25,680 --> 00:01:32,560
and cyclic blocks

38
00:01:29,280 --> 00:01:35,920
of dimension p can also be treated as

39
00:01:32,560 --> 00:01:39,200
polynomials important thing

40
00:01:35,920 --> 00:01:40,159
to know is that you can get a key

41
00:01:39,200 --> 00:01:43,600
recovery

42
00:01:40,159 --> 00:01:46,799
on this scheme by getting any row

43
00:01:43,600 --> 00:01:50,640
of l from the public

44
00:01:46,799 --> 00:01:53,680
key m what's unique

45
00:01:50,640 --> 00:01:56,719
about the unpatched version of letocrypt

46
00:01:53,680 --> 00:02:00,240
the qc ldpc scheme

47
00:01:56,719 --> 00:02:03,600
is that the private key factors

48
00:02:00,240 --> 00:02:09,519
into two sparser matrices h

49
00:02:03,600 --> 00:02:12,239
and q

50
00:02:09,520 --> 00:02:13,680
so let's look at the parameters because

51
00:02:12,239 --> 00:02:16,560
we'll refer back to these

52
00:02:13,680 --> 00:02:16,879
throughout the rest of the presentation

53
00:02:16,560 --> 00:02:21,120
so

54
00:02:16,879 --> 00:02:24,000
n0 is the number of cyclic blocks

55
00:02:21,120 --> 00:02:24,800
in h l and m which might be two three or

56
00:02:24,000 --> 00:02:28,000
four

57
00:02:24,800 --> 00:02:31,440
p is the dimension of the cyclic blocks

58
00:02:28,000 --> 00:02:33,599
d sub v is the row hamming weight of

59
00:02:31,440 --> 00:02:36,959
each block of h

60
00:02:33,599 --> 00:02:40,000
and m gives row weights

61
00:02:36,959 --> 00:02:43,280
of the blocks of q

62
00:02:40,000 --> 00:02:46,319
and which m's go to which

63
00:02:43,280 --> 00:02:50,319
weights is diagrammed in

64
00:02:46,319 --> 00:02:53,760
the matrix below with the colors

65
00:02:50,319 --> 00:02:56,480
finally there's another parameter t

66
00:02:53,760 --> 00:02:58,799
which is not terribly important to our

67
00:02:56,480 --> 00:02:58,799
attack

68
00:03:00,239 --> 00:03:07,840
so these are the actual

69
00:03:03,680 --> 00:03:11,440
parameters numbers that are given

70
00:03:07,840 --> 00:03:14,720
in the second round lead to crip spec

71
00:03:11,440 --> 00:03:17,680
and in particular we will be focusing on

72
00:03:14,720 --> 00:03:20,080
the parameters targeting 256 bits of

73
00:03:17,680 --> 00:03:23,680
security this category 5

74
00:03:20,080 --> 00:03:23,680
with n0 equals 2.

75
00:03:29,680 --> 00:03:33,840
so to summarize our attacks the most

76
00:03:32,799 --> 00:03:35,440
important

77
00:03:33,840 --> 00:03:38,640
version of our attack is a weak key

78
00:03:35,440 --> 00:03:40,959
attack and this applies to all parameter

79
00:03:38,640 --> 00:03:40,958
sets

80
00:03:41,040 --> 00:03:47,440
so the idea here is

81
00:03:44,080 --> 00:03:50,159
that we run some sort of an attack for

82
00:03:47,440 --> 00:03:50,720
computation equivalent to two to the y

83
00:03:50,159 --> 00:03:55,040
aes

84
00:03:50,720 --> 00:03:55,040
operations and this recovers

85
00:03:55,120 --> 00:04:00,879
keys that are chosen with probability

86
00:03:58,560 --> 00:04:03,599
two to the minus x by ledoc's key

87
00:04:00,879 --> 00:04:07,599
generation procedure

88
00:04:03,599 --> 00:04:10,319
as long as x and y add up to less

89
00:04:07,599 --> 00:04:14,238
than the security parameter this

90
00:04:10,319 --> 00:04:17,519
constitutes a real attack

91
00:04:14,239 --> 00:04:20,720
so for example with

92
00:04:17,519 --> 00:04:22,960
category 5 cpa parameters within 0

93
00:04:20,720 --> 00:04:25,520
equals 2

94
00:04:22,960 --> 00:04:26,799
which is where our attack is strongest

95
00:04:25,520 --> 00:04:30,639
relative to the claim

96
00:04:26,800 --> 00:04:34,639
security level we have

97
00:04:30,639 --> 00:04:38,160
one in two to the 47.72 keys

98
00:04:34,639 --> 00:04:39,680
being found in time equivalent to two to

99
00:04:38,160 --> 00:04:43,360
the 49.22

100
00:04:39,680 --> 00:04:47,120
aes operations and their x plus y

101
00:04:43,360 --> 00:04:47,120
is 96.94

102
00:04:48,080 --> 00:04:56,080
which is significantly less than the 256

103
00:04:52,800 --> 00:04:58,560
claimed uh by the

104
00:04:56,080 --> 00:04:58,560
submission

105
00:04:59,120 --> 00:05:03,360
now we can also apply this attack in

106
00:05:01,840 --> 00:05:06,960
settings

107
00:05:03,360 --> 00:05:10,240
that are less advantageous so

108
00:05:06,960 --> 00:05:11,280
probably the worst setting is where the

109
00:05:10,240 --> 00:05:14,720
security

110
00:05:11,280 --> 00:05:17,758
level claims is quite low category one

111
00:05:14,720 --> 00:05:20,639
and where

112
00:05:17,759 --> 00:05:21,520
n zero is chosen to be the largest value

113
00:05:20,639 --> 00:05:24,639
four

114
00:05:21,520 --> 00:05:26,960
but even there we expect

115
00:05:24,639 --> 00:05:30,560
to have x plus y something like 90 which

116
00:05:26,960 --> 00:05:33,440
is less than the claim security level of

117
00:05:30,560 --> 00:05:33,440
128.

118
00:05:37,199 --> 00:05:44,400
now there's also an average case

119
00:05:41,120 --> 00:05:48,160
version of the attack we can

120
00:05:44,400 --> 00:05:52,239
think of the fraction of weak keys

121
00:05:48,160 --> 00:05:55,680
approaching one and

122
00:05:52,240 --> 00:05:58,479
then as long as the attack is cheaper

123
00:05:55,680 --> 00:05:59,680
then standard attack there's an

124
00:05:58,479 --> 00:06:02,318
advantage there

125
00:05:59,680 --> 00:06:04,080
now it's a little difficult to estimate

126
00:06:02,319 --> 00:06:06,240
exactly how much of an advantage we're

127
00:06:04,080 --> 00:06:07,919
getting with concrete parameters but we

128
00:06:06,240 --> 00:06:10,400
do suspect

129
00:06:07,919 --> 00:06:12,960
there will be some significant advantage

130
00:06:10,400 --> 00:06:15,039
by the time you reach category five

131
00:06:12,960 --> 00:06:21,840
as long as we've chosen the more

132
00:06:15,039 --> 00:06:21,840
favorable n zero equals two

133
00:06:22,000 --> 00:06:27,360
so our attack is an extension of the

134
00:06:25,280 --> 00:06:28,960
standard attack which is information set

135
00:06:27,360 --> 00:06:31,600
decoding

136
00:06:28,960 --> 00:06:32,719
so the basic idea here is that we're

137
00:06:31,600 --> 00:06:37,199
just going to guess

138
00:06:32,720 --> 00:06:38,880
p bits of a low weight row of l

139
00:06:37,199 --> 00:06:40,800
and these rows are going to be in the

140
00:06:38,880 --> 00:06:41,520
row space of m so that means we can

141
00:06:40,800 --> 00:06:44,960
linearly

142
00:06:41,520 --> 00:06:46,560
solve for the rest of the row

143
00:06:44,960 --> 00:06:48,159
and the p bits that we're guessing are

144
00:06:46,560 --> 00:06:51,280
called the information set

145
00:06:48,160 --> 00:06:54,560
in more detail what we do is we

146
00:06:51,280 --> 00:06:58,400
choose a permutation we hope

147
00:06:54,560 --> 00:07:02,240
that the first p bits of a row are say

148
00:06:58,400 --> 00:07:06,159
a one and a bunch of zeros and if so

149
00:07:02,240 --> 00:07:08,639
we can just take the inverse

150
00:07:06,160 --> 00:07:10,880
of the first block of the permuted

151
00:07:08,639 --> 00:07:13,919
public key

152
00:07:10,880 --> 00:07:16,000
and multiply it through and

153
00:07:13,919 --> 00:07:18,799
the top row of that is going to be the

154
00:07:16,000 --> 00:07:20,400
permuted top row of l

155
00:07:18,800 --> 00:07:22,160
now there's more advanced versions of

156
00:07:20,400 --> 00:07:24,638
this

157
00:07:22,160 --> 00:07:26,080
but they have the same asymptotic

158
00:07:24,639 --> 00:07:28,319
complexity

159
00:07:26,080 --> 00:07:31,840
given by the formula at the bottom of

160
00:07:28,319 --> 00:07:31,840
the slide

161
00:07:34,400 --> 00:07:41,840
so how is our attack different

162
00:07:38,639 --> 00:07:42,319
we can look at the attack that leda

163
00:07:41,840 --> 00:07:44,479
crypt

164
00:07:42,319 --> 00:07:46,319
analyzed and there's one thing about it

165
00:07:44,479 --> 00:07:49,758
we can change

166
00:07:46,319 --> 00:07:53,039
so recall that we chose

167
00:07:49,759 --> 00:07:56,400
p columns to guess

168
00:07:53,039 --> 00:07:57,360
of the parity check matrix or p bits of

169
00:07:56,400 --> 00:08:01,198
a row

170
00:07:57,360 --> 00:08:02,720
and these p bits in the analysis used to

171
00:08:01,199 --> 00:08:03,280
set the parameters of ledocraft were

172
00:08:02,720 --> 00:08:06,960
chosen

173
00:08:03,280 --> 00:08:10,400
randomly so our idea is

174
00:08:06,960 --> 00:08:10,400
we pick the bits that we guess

175
00:08:10,840 --> 00:08:13,840
non-randomly

176
00:08:14,160 --> 00:08:20,400
so recall that we want to find

177
00:08:17,440 --> 00:08:21,919
key bits of a row of l that are more

178
00:08:20,400 --> 00:08:23,120
likely than average to be

179
00:08:21,919 --> 00:08:24,960
something that we're going to guess

180
00:08:23,120 --> 00:08:27,919
which is going to be mostly zeros

181
00:08:24,960 --> 00:08:31,599
because there's more zeros than ones

182
00:08:27,919 --> 00:08:32,718
equivalently we want almost all the

183
00:08:31,599 --> 00:08:35,598
non-zero bits

184
00:08:32,719 --> 00:08:37,680
of the row of l to be outside the

185
00:08:35,599 --> 00:08:41,279
information set

186
00:08:37,679 --> 00:08:44,319
and we can think of

187
00:08:41,279 --> 00:08:47,760
this set as the support of

188
00:08:44,320 --> 00:08:51,040
a polynomial that we've designed

189
00:08:47,760 --> 00:08:54,800
to mirror the structure of the

190
00:08:51,040 --> 00:08:58,880
polynomials that make up the

191
00:08:54,800 --> 00:09:01,519
uh the private key of litocrypt

192
00:08:58,880 --> 00:09:03,600
so we generate an h prime with the same

193
00:09:01,519 --> 00:09:05,760
structure as h a q prime with the same

194
00:09:03,600 --> 00:09:08,640
structure of q

195
00:09:05,760 --> 00:09:10,480
we have them be less sparse we have them

196
00:09:08,640 --> 00:09:12,880
over the integers

197
00:09:10,480 --> 00:09:14,000
but then we multiply just like we

198
00:09:12,880 --> 00:09:16,160
multiply to get l

199
00:09:14,000 --> 00:09:17,680
and so we have this l prime and if the

200
00:09:16,160 --> 00:09:20,319
support of

201
00:09:17,680 --> 00:09:21,599
h prime contains the support of h the

202
00:09:20,320 --> 00:09:23,600
support of q primes

203
00:09:21,600 --> 00:09:24,640
contains the support of q then the

204
00:09:23,600 --> 00:09:26,480
support of l

205
00:09:24,640 --> 00:09:27,760
will be contained in the support of l

206
00:09:26,480 --> 00:09:29,200
prime

207
00:09:27,760 --> 00:09:30,880
and we can use the complement of that

208
00:09:29,200 --> 00:09:36,240
support as an information set

209
00:09:30,880 --> 00:09:38,720
and recover the key

210
00:09:36,240 --> 00:09:39,440
unfortunately this attack is not very

211
00:09:38,720 --> 00:09:42,560
good

212
00:09:39,440 --> 00:09:45,839
for concrete parameters unless h prime

213
00:09:42,560 --> 00:09:49,518
and q prime are chosen carefully

214
00:09:45,839 --> 00:09:50,320
so we need some significant fraction of

215
00:09:49,519 --> 00:09:54,480
the bits

216
00:09:50,320 --> 00:09:57,519
of l prime to be zero so that we can use

217
00:09:54,480 --> 00:10:01,360
that as an information set but

218
00:09:57,519 --> 00:10:06,640
generally when we take two polynomials

219
00:10:01,360 --> 00:10:08,880
the weights of the polynomials multiply

220
00:10:06,640 --> 00:10:10,399
and so we would need h prime and q prime

221
00:10:08,880 --> 00:10:11,600
to be very sparse which makes the

222
00:10:10,399 --> 00:10:12,320
probability they will contain the

223
00:10:11,600 --> 00:10:16,079
support of h

224
00:10:12,320 --> 00:10:19,120
and q pretty low in contrast

225
00:10:16,079 --> 00:10:20,399
if we choose the coefficients the

226
00:10:19,120 --> 00:10:21,279
non-zero coefficients of these

227
00:10:20,399 --> 00:10:24,399
polynomials

228
00:10:21,279 --> 00:10:28,000
to be consecutive

229
00:10:24,399 --> 00:10:31,120
then the weights

230
00:10:28,000 --> 00:10:33,839
only add in the product

231
00:10:31,120 --> 00:10:35,680
and so we can use much less sparse h

232
00:10:33,839 --> 00:10:36,959
prime and q prime and have a much higher

233
00:10:35,680 --> 00:10:39,920
probability

234
00:10:36,959 --> 00:10:42,079
of guessing the support of h and q with

235
00:10:39,920 --> 00:10:42,079
it

236
00:10:42,880 --> 00:10:50,079
so now we will examine an example

237
00:10:46,560 --> 00:10:54,640
using these principles so here

238
00:10:50,079 --> 00:10:57,760
we're going to use the simplest possible

239
00:10:54,640 --> 00:11:00,240
form of the information set we're

240
00:10:57,760 --> 00:11:01,839
just going to have h prime and q prime

241
00:11:00,240 --> 00:11:05,519
be

242
00:11:01,839 --> 00:11:08,480
polynomials which have all

243
00:11:05,519 --> 00:11:10,079
the non-zero coefficients up to degree p

244
00:11:08,480 --> 00:11:13,200
over four

245
00:11:10,079 --> 00:11:16,239
and uh

246
00:11:13,200 --> 00:11:19,839
and zero for the rest so the products

247
00:11:16,240 --> 00:11:23,680
will have the proper weight

248
00:11:19,839 --> 00:11:23,680
so that we can choose an information set

249
00:11:24,399 --> 00:11:28,800
so the probability that each non-zero

250
00:11:27,760 --> 00:11:31,360
bit

251
00:11:28,800 --> 00:11:33,519
of h or q is contained in the support of

252
00:11:31,360 --> 00:11:36,880
h prime and q prime

253
00:11:33,519 --> 00:11:36,880
is about one-fourth

254
00:11:37,120 --> 00:11:45,839
and so the total number of non-zero bits

255
00:11:41,680 --> 00:11:49,519
that need to fall in this quarter of the

256
00:11:45,839 --> 00:11:51,920
coefficients is

257
00:11:49,519 --> 00:11:54,720
11 times 2 plus 7 times 2 plus 6 times 2

258
00:11:51,920 --> 00:11:54,719
which is 48

259
00:11:54,839 --> 00:11:59,120
so we might guess that a single

260
00:11:57,279 --> 00:12:01,519
iteration of information set decoding

261
00:11:59,120 --> 00:12:04,320
with this information set would recover

262
00:12:01,519 --> 00:12:05,200
one in four to the 48 or one two to the

263
00:12:04,320 --> 00:12:07,120
96

264
00:12:05,200 --> 00:12:08,480
private keys and this would already be

265
00:12:07,120 --> 00:12:11,839
an attack but

266
00:12:08,480 --> 00:12:11,839
there is in fact more

267
00:12:12,880 --> 00:12:18,079
in fact there are a large number of

268
00:12:16,480 --> 00:12:19,839
possible private keys

269
00:12:18,079 --> 00:12:22,079
that will produce the same public key

270
00:12:19,839 --> 00:12:26,720
and recovering any of these private keys

271
00:12:22,079 --> 00:12:26,719
will be sufficient to attack the scheme

272
00:12:28,000 --> 00:12:35,600
and we can parametrize these with

273
00:12:32,399 --> 00:12:37,760
numbers alpha beta and gamma

274
00:12:35,600 --> 00:12:39,920
now in fact changing alpha beta and

275
00:12:37,760 --> 00:12:43,040
gamma by a little bit

276
00:12:39,920 --> 00:12:45,439
is usually going to just get you

277
00:12:43,040 --> 00:12:47,279
a key that you would have gotten anyway

278
00:12:45,440 --> 00:12:49,279
or that

279
00:12:47,279 --> 00:12:50,880
you wouldn't have gotten if you didn't

280
00:12:49,279 --> 00:12:54,000
get it with this

281
00:12:50,880 --> 00:12:56,000
similar value of a alpha beta gamma but

282
00:12:54,000 --> 00:12:58,880
there's still enough freedom in there

283
00:12:56,000 --> 00:12:59,600
to increase the number of keys broken by

284
00:12:58,880 --> 00:13:01,839
a single

285
00:12:59,600 --> 00:13:03,680
information set up to about one to the

286
00:13:01,839 --> 00:13:07,839
80.

287
00:13:03,680 --> 00:13:07,839
but there's more

288
00:13:09,040 --> 00:13:15,839
so we also have freedom in how

289
00:13:12,720 --> 00:13:16,720
we interpret which h prime and which q

290
00:13:15,839 --> 00:13:19,680
prime

291
00:13:16,720 --> 00:13:20,800
were used to produce a given information

292
00:13:19,680 --> 00:13:23,839
set

293
00:13:20,800 --> 00:13:25,920
if we take the degree of

294
00:13:23,839 --> 00:13:27,120
h prime up a bit and the degree of q

295
00:13:25,920 --> 00:13:30,160
prime down a bit

296
00:13:27,120 --> 00:13:31,920
or vice versa we will produce the same

297
00:13:30,160 --> 00:13:35,760
information set

298
00:13:31,920 --> 00:13:37,760
and as long as any

299
00:13:35,760 --> 00:13:40,639
h and q is contained in the support of

300
00:13:37,760 --> 00:13:43,120
any h prime and q prime

301
00:13:40,639 --> 00:13:45,040
the key will be recovered so this

302
00:13:43,120 --> 00:13:48,320
consideration brings the number of keys

303
00:13:45,040 --> 00:13:50,800
broken by a single iteration up to one

304
00:13:48,320 --> 00:13:53,920
and two to the 72.8

305
00:13:50,800 --> 00:13:53,920
but there's more

306
00:13:54,160 --> 00:13:58,079
so we were just using the simplest

307
00:13:56,480 --> 00:13:59,199
version of information set decoding

308
00:13:58,079 --> 00:14:03,120
there's been

309
00:13:59,199 --> 00:14:06,319
lots of progress in making these

310
00:14:03,120 --> 00:14:09,519
algorithms a little bit more efficient

311
00:14:06,320 --> 00:14:11,440
and trying multiple guesses at once

312
00:14:09,519 --> 00:14:13,360
effectively

313
00:14:11,440 --> 00:14:15,120
so advanced information set decoding

314
00:14:13,360 --> 00:14:18,320
algorithms

315
00:14:15,120 --> 00:14:22,320
can tolerate something like six

316
00:14:18,320 --> 00:14:25,279
non-zero bits in the information set

317
00:14:22,320 --> 00:14:27,760
without increasing how much an iteration

318
00:14:25,279 --> 00:14:31,120
costs

319
00:14:27,760 --> 00:14:33,760
and we can model this by

320
00:14:31,120 --> 00:14:35,120
thinking of the support of h and q as

321
00:14:33,760 --> 00:14:39,040
being contained

322
00:14:35,120 --> 00:14:43,120
in higher weight polynomials

323
00:14:39,040 --> 00:14:45,120
h prime and q prime

324
00:14:43,120 --> 00:14:46,639
and if we think of it in this these

325
00:14:45,120 --> 00:14:49,920
terms

326
00:14:46,639 --> 00:14:53,760
we expect the non-zero bits of h

327
00:14:49,920 --> 00:14:58,160
and q to be distributed

328
00:14:53,760 --> 00:15:01,199
uh in this triangular pattern where

329
00:14:58,160 --> 00:15:03,839
only the tails will fall

330
00:15:01,199 --> 00:15:05,359
inside the information set as long as

331
00:15:03,839 --> 00:15:09,519
there's no more than

332
00:15:05,360 --> 00:15:09,519
six non-zero bits in these tails

333
00:15:09,680 --> 00:15:13,839
we still recover the key

334
00:15:15,360 --> 00:15:20,320
and so this consideration brings the

335
00:15:18,399 --> 00:15:23,120
number of keys broken by a single

336
00:15:20,320 --> 00:15:24,160
iteration of information set decoding

337
00:15:23,120 --> 00:15:29,199
all the way up to

338
00:15:24,160 --> 00:15:29,199
1 in 2 to the 62.66

339
00:15:32,720 --> 00:15:36,079
so that's one iteration how many can we

340
00:15:35,440 --> 00:15:38,399
get

341
00:15:36,079 --> 00:15:39,439
by multiple iterations well so we have

342
00:15:38,399 --> 00:15:41,040
to choose

343
00:15:39,440 --> 00:15:42,560
a different information set that's

344
00:15:41,040 --> 00:15:46,319
equally good

345
00:15:42,560 --> 00:15:49,279
one way we can do this is

346
00:15:46,320 --> 00:15:51,120
by um looking at the pattern of the

347
00:15:49,279 --> 00:15:54,160
information set

348
00:15:51,120 --> 00:15:57,600
which is the blank bits

349
00:15:54,160 --> 00:15:59,680
on this diagram so half of l is

350
00:15:57,600 --> 00:16:02,000
outside the information set half of each

351
00:15:59,680 --> 00:16:05,920
block

352
00:16:02,000 --> 00:16:08,240
so we can change which half

353
00:16:05,920 --> 00:16:09,680
of one of the blocks we can shift one of

354
00:16:08,240 --> 00:16:12,160
the blocks around

355
00:16:09,680 --> 00:16:13,839
there's also another way we can generate

356
00:16:12,160 --> 00:16:14,800
new information sets which we'll talk

357
00:16:13,839 --> 00:16:17,279
about later

358
00:16:14,800 --> 00:16:19,920
which is changing how the ring is

359
00:16:17,279 --> 00:16:19,920
represented

360
00:16:20,320 --> 00:16:27,440
so first thing we can do

361
00:16:24,320 --> 00:16:30,240
is we change the offset as

362
00:16:27,440 --> 00:16:30,639
in the diagram here note that if you

363
00:16:30,240 --> 00:16:32,560
shift

364
00:16:30,639 --> 00:16:33,920
both blocks this doesn't really do

365
00:16:32,560 --> 00:16:35,758
anything for us

366
00:16:33,920 --> 00:16:36,959
we're in fact recovering exactly the

367
00:16:35,759 --> 00:16:39,040
same keys

368
00:16:36,959 --> 00:16:40,719
and even if you shift one of the blocks

369
00:16:39,040 --> 00:16:43,519
by a small amount

370
00:16:40,720 --> 00:16:45,199
that doesn't help you all that much

371
00:16:43,519 --> 00:16:46,959
because

372
00:16:45,199 --> 00:16:48,240
usually if you move it a little bit

373
00:16:46,959 --> 00:16:49,040
you're not gonna get anything you didn't

374
00:16:48,240 --> 00:16:52,160
get already

375
00:16:49,040 --> 00:16:56,719
but we still think

376
00:16:52,160 --> 00:17:01,519
that you can do about 24 different

377
00:16:56,720 --> 00:17:01,519
offsets without too much overlap

378
00:17:02,800 --> 00:17:08,159
then there's ring representations

379
00:17:06,000 --> 00:17:09,679
so there's a bunch of ring isomorphisms

380
00:17:08,160 --> 00:17:11,919
that take

381
00:17:09,679 --> 00:17:13,039
the ring that's equivalent to a cyclic

382
00:17:11,919 --> 00:17:16,799
matrix

383
00:17:13,039 --> 00:17:19,439
to itself uh where you just take the

384
00:17:16,799 --> 00:17:22,000
polynomial variable x and replace it

385
00:17:19,439 --> 00:17:25,199
with x to the k

386
00:17:22,000 --> 00:17:28,319
and if the coefficients are consecutive

387
00:17:25,199 --> 00:17:32,000
under any of these representations

388
00:17:28,319 --> 00:17:34,480
then the same additivity thing

389
00:17:32,000 --> 00:17:34,480
happens

390
00:17:36,880 --> 00:17:40,880
now there is one factor that makes our

391
00:17:38,799 --> 00:17:44,080
attack not quite as good

392
00:17:40,880 --> 00:17:46,880
which is rejection sampling

393
00:17:44,080 --> 00:17:47,199
so our calculation above was assuming

394
00:17:46,880 --> 00:17:50,160
that

395
00:17:47,200 --> 00:17:50,720
any h and q with the correct weights

396
00:17:50,160 --> 00:17:52,880
would be

397
00:17:50,720 --> 00:17:54,960
a valid key but this is not really the

398
00:17:52,880 --> 00:17:56,799
case because

399
00:17:54,960 --> 00:17:58,160
in the letocrypt key generation

400
00:17:56,799 --> 00:18:01,360
procedure

401
00:17:58,160 --> 00:18:04,240
any key where

402
00:18:01,360 --> 00:18:05,280
the weight of l is not the maximum value

403
00:18:04,240 --> 00:18:08,240
it can be

404
00:18:05,280 --> 00:18:11,520
is rejected this results in the

405
00:18:08,240 --> 00:18:15,760
rejection of about 39.2 percent of keys

406
00:18:11,520 --> 00:18:19,200
but 67.4 of the weakest keys

407
00:18:15,760 --> 00:18:22,480
however this only results in about

408
00:18:19,200 --> 00:18:25,760
one bit of security difference from

409
00:18:22,480 --> 00:18:29,600
the simple way of calculating

410
00:18:25,760 --> 00:18:31,200
how effective our attack is

411
00:18:29,600 --> 00:18:33,120
so when we put this all together we have

412
00:18:31,200 --> 00:18:36,160
an attack that consists of

413
00:18:33,120 --> 00:18:38,639
two to the 18.72

414
00:18:36,160 --> 00:18:39,520
iterations each iteration costs

415
00:18:38,640 --> 00:18:43,360
something like

416
00:18:39,520 --> 00:18:46,240
2 to the 30 and a half as operations

417
00:18:43,360 --> 00:18:48,479
and we recover at least one in two to

418
00:18:46,240 --> 00:18:52,000
the 47.74

419
00:18:48,480 --> 00:18:54,240
private keys and

420
00:18:52,000 --> 00:18:54,240
so

421
00:18:55,039 --> 00:19:00,160
we've we find when we multiply those out

422
00:18:58,240 --> 00:19:01,679
the net cost of the attack is 2 to the

423
00:19:00,160 --> 00:19:05,520
49.2 aes

424
00:19:01,679 --> 00:19:05,520
operations as promised

425
00:19:07,280 --> 00:19:11,520
so now i'll talk a bit about what you do

426
00:19:10,640 --> 00:19:14,880
when n0

427
00:19:11,520 --> 00:19:17,760
is not to so naively you might think

428
00:19:14,880 --> 00:19:19,280
this makes the attack much less

429
00:19:17,760 --> 00:19:22,640
effective

430
00:19:19,280 --> 00:19:24,879
because well the number of blocks

431
00:19:22,640 --> 00:19:25,919
in h only increases linearly the number

432
00:19:24,880 --> 00:19:29,679
of blocks in q

433
00:19:25,919 --> 00:19:33,919
increases quadratically

434
00:19:29,679 --> 00:19:36,720
however we can

435
00:19:33,919 --> 00:19:37,120
instead of attacking the whole public

436
00:19:36,720 --> 00:19:39,840
key

437
00:19:37,120 --> 00:19:42,000
and private key we can simply look at

438
00:19:39,840 --> 00:19:46,000
the first two blocks of each

439
00:19:42,000 --> 00:19:51,679
and when we do that we're

440
00:19:46,000 --> 00:19:53,919
only guessing linearly more polynomials

441
00:19:51,679 --> 00:19:55,600
so there's only linearly many more

442
00:19:53,919 --> 00:19:58,640
non-zero bits that need to fall inside

443
00:19:55,600 --> 00:19:58,639
the information set

444
00:20:01,520 --> 00:20:05,679
and another and then we'll talk about

445
00:20:03,679 --> 00:20:06,720
one other extension of the attack which

446
00:20:05,679 --> 00:20:09,840
is

447
00:20:06,720 --> 00:20:12,400
we can attack a broader set

448
00:20:09,840 --> 00:20:14,799
than the weak keys we've been looking at

449
00:20:12,400 --> 00:20:18,240
now the downside of this

450
00:20:14,799 --> 00:20:19,360
is that our h primes and q primes will

451
00:20:18,240 --> 00:20:22,960
need to be

452
00:20:19,360 --> 00:20:25,280
somewhat sparser because we can't just

453
00:20:22,960 --> 00:20:28,799
use a single block of

454
00:20:25,280 --> 00:20:31,600
consecutive coefficients but we can use

455
00:20:28,799 --> 00:20:33,120
a small number of blocks of consecutive

456
00:20:31,600 --> 00:20:36,158
coefficients in each

457
00:20:33,120 --> 00:20:39,439
block of the public key

458
00:20:36,159 --> 00:20:42,400
and we did out an example

459
00:20:39,440 --> 00:20:45,280
which was too long and not quite

460
00:20:42,400 --> 00:20:47,360
rigorous enough to put in the paper

461
00:20:45,280 --> 00:20:49,600
but we were trying to overestimate

462
00:20:47,360 --> 00:20:52,559
slightly the complexity and we found

463
00:20:49,600 --> 00:20:54,799
that probably you're reducing the

464
00:20:52,559 --> 00:20:55,240
security level of the cpa parameters

465
00:20:54,799 --> 00:20:59,120
from

466
00:20:55,240 --> 00:21:03,760
256 bits of security to 248 or perhaps

467
00:20:59,120 --> 00:21:06,158
even a little bit less

468
00:21:03,760 --> 00:21:07,679
what we do know for sure is that

469
00:21:06,159 --> 00:21:11,679
asymptotically

470
00:21:07,679 --> 00:21:15,280
the attack must weak must work

471
00:21:11,679 --> 00:21:19,840
even without considering weak keys

472
00:21:15,280 --> 00:21:22,960
because for the standard attack

473
00:21:19,840 --> 00:21:25,120
the cost of key recovery

474
00:21:22,960 --> 00:21:26,240
is exponential in the square root of the

475
00:21:25,120 --> 00:21:28,559
size of the key

476
00:21:26,240 --> 00:21:30,240
whereas our attack is exponential in the

477
00:21:28,559 --> 00:21:34,158
fourth root

478
00:21:30,240 --> 00:21:36,400
of the size of the key that said

479
00:21:34,159 --> 00:21:37,600
there's another simpler attack that does

480
00:21:36,400 --> 00:21:40,880
this which is you just

481
00:21:37,600 --> 00:21:42,399
guess all the bits of h and q

482
00:21:40,880 --> 00:21:44,240
that is considered in the submission

483
00:21:42,400 --> 00:21:47,440
document but the complete

484
00:21:44,240 --> 00:21:48,640
crete complexity uh was significantly

485
00:21:47,440 --> 00:21:51,440
too high to affect

486
00:21:48,640 --> 00:21:53,679
the parameters and we think our attack

487
00:21:51,440 --> 00:21:55,280
is much closer

488
00:21:53,679 --> 00:21:59,280
to affecting the parameters if it

489
00:21:55,280 --> 00:22:02,879
doesn't in fact affect them

490
00:21:59,280 --> 00:22:05,039
so in conclusion our attack

491
00:22:02,880 --> 00:22:06,640
shows that litacrips product structure

492
00:22:05,039 --> 00:22:10,640
is a security problem

493
00:22:06,640 --> 00:22:13,919
both asymptotically and concretely

494
00:22:10,640 --> 00:22:15,600
and the weak key attacks are actually

495
00:22:13,919 --> 00:22:18,159
pretty close to being of practical

496
00:22:15,600 --> 00:22:20,879
relevance

497
00:22:18,159 --> 00:22:22,720
the fact that the weak key attacks grade

498
00:22:20,880 --> 00:22:24,840
smoothly

499
00:22:22,720 --> 00:22:26,000
into the more expensive attacks that

500
00:22:24,840 --> 00:22:29,199
attack

501
00:22:26,000 --> 00:22:31,520
a larger class of keys are all the keys

502
00:22:29,200 --> 00:22:32,480
makes security analysis and patching the

503
00:22:31,520 --> 00:22:35,918
scheme quite

504
00:22:32,480 --> 00:22:38,000
difficult except

505
00:22:35,919 --> 00:22:39,039
with what the leadercrypt team chose to

506
00:22:38,000 --> 00:22:42,400
do which is replace

507
00:22:39,039 --> 00:22:42,960
q with an identity matrix which simply

508
00:22:42,400 --> 00:22:45,600
makes

509
00:22:42,960 --> 00:22:48,559
the ldpc construction the same as the

510
00:22:45,600 --> 00:22:51,520
mdpc construction

511
00:22:48,559 --> 00:22:51,520
thank you

