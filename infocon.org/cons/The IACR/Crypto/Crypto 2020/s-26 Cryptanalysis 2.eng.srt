1
00:00:01,280 --> 00:00:08,639
yeah just let me know when i can start

2
00:00:04,640 --> 00:00:11,759
you are good to go cool

3
00:00:08,639 --> 00:00:13,280
um hi everyone i'm matthew jagalski i'm

4
00:00:11,759 --> 00:00:14,960
doing the lightning talk version of

5
00:00:13,280 --> 00:00:16,160
cryptanalytic extraction of neural

6
00:00:14,960 --> 00:00:18,160
network models

7
00:00:16,160 --> 00:00:19,600
this is joint work with nicholas carlini

8
00:00:18,160 --> 00:00:22,080
and elia mirenov

9
00:00:19,600 --> 00:00:23,439
and nicholas gave the 25 minute version

10
00:00:22,080 --> 00:00:25,680
of the talk and made all the slides so

11
00:00:23,439 --> 00:00:27,359
he deserves all the credit for that

12
00:00:25,680 --> 00:00:29,599
the main object of interest for this

13
00:00:27,359 --> 00:00:31,679
talk is going to be an adversary with

14
00:00:29,599 --> 00:00:32,800
black box access to a neural network

15
00:00:31,679 --> 00:00:34,399
model

16
00:00:32,800 --> 00:00:37,120
so a neural network consists of two

17
00:00:34,399 --> 00:00:38,800
pieces the weights and the architecture

18
00:00:37,120 --> 00:00:41,599
the architecture tells you how to use

19
00:00:38,800 --> 00:00:43,360
the weights to compute the function

20
00:00:41,600 --> 00:00:44,800
and then the adversary with black box

21
00:00:43,360 --> 00:00:46,640
access of course means that they can

22
00:00:44,800 --> 00:00:48,239
choose inputs to the neural network

23
00:00:46,640 --> 00:00:50,960
and they will receive the corresponding

24
00:00:48,239 --> 00:00:51,599
outputs this is a really common setup in

25
00:00:50,960 --> 00:00:54,239
practice

26
00:00:51,600 --> 00:00:54,879
so the way that this this happens is a

27
00:00:54,239 --> 00:00:57,360
company

28
00:00:54,879 --> 00:00:58,559
will build a machine learning model and

29
00:00:57,360 --> 00:01:02,000
then they'll deploy it

30
00:00:58,559 --> 00:01:03,919
and allow clients to to pay to query it

31
00:01:02,000 --> 00:01:05,600
and these models can be really expensive

32
00:01:03,920 --> 00:01:08,159
to train so

33
00:01:05,600 --> 00:01:09,119
openai recently released a model called

34
00:01:08,159 --> 00:01:10,799
gpt3

35
00:01:09,119 --> 00:01:12,720
which costs 10 million dollars per

36
00:01:10,799 --> 00:01:15,119
training run just to train

37
00:01:12,720 --> 00:01:16,400
and so an adversary has significant

38
00:01:15,119 --> 00:01:19,200
financial incentive

39
00:01:16,400 --> 00:01:20,400
uh to try to steal this model because

40
00:01:19,200 --> 00:01:23,200
you know they might not want to write

41
00:01:20,400 --> 00:01:25,200
that 10 million dollar check

42
00:01:23,200 --> 00:01:26,479
and so what we're interested in is the

43
00:01:25,200 --> 00:01:28,880
power of this adversary

44
00:01:26,479 --> 00:01:31,439
who has query access and potentially

45
00:01:28,880 --> 00:01:33,199
also access to the architecture

46
00:01:31,439 --> 00:01:35,360
at stealing the the weights of the

47
00:01:33,200 --> 00:01:37,040
neural network

48
00:01:35,360 --> 00:01:38,720
so the existing literature has taken

49
00:01:37,040 --> 00:01:39,680
kind of two different approaches to this

50
00:01:38,720 --> 00:01:42,079
problem

51
00:01:39,680 --> 00:01:43,600
the first and the most common is a

52
00:01:42,079 --> 00:01:45,600
machine learning approach

53
00:01:43,600 --> 00:01:47,199
right so a very key focus of machine

54
00:01:45,600 --> 00:01:48,880
learning is to learn the relationship

55
00:01:47,200 --> 00:01:51,600
between inputs and outputs

56
00:01:48,880 --> 00:01:52,640
and so one thing you can do for this

57
00:01:51,600 --> 00:01:54,880
extraction

58
00:01:52,640 --> 00:01:55,680
is you can query the model a thousand

59
00:01:54,880 --> 00:01:57,360
times

60
00:01:55,680 --> 00:01:59,040
and now you have a thousand input output

61
00:01:57,360 --> 00:01:59,520
pairs and then you can use machine

62
00:01:59,040 --> 00:02:01,280
learning

63
00:01:59,520 --> 00:02:03,520
to try to approximate the function that

64
00:02:01,280 --> 00:02:05,360
the black box computes

65
00:02:03,520 --> 00:02:08,160
the other approach and the one that we

66
00:02:05,360 --> 00:02:09,919
take is a direct analysis approach

67
00:02:08,160 --> 00:02:12,000
so by understanding the mathematical

68
00:02:09,919 --> 00:02:15,119
representation of the function

69
00:02:12,000 --> 00:02:16,720
you can use it to reverse engineer the

70
00:02:15,120 --> 00:02:19,760
the weights corresponding to

71
00:02:16,720 --> 00:02:22,160
the neural networks black box

72
00:02:19,760 --> 00:02:23,920
and so our key question is whether with

73
00:02:22,160 --> 00:02:25,760
query access to this neural network

74
00:02:23,920 --> 00:02:27,200
we can extract the hidden parameters of

75
00:02:25,760 --> 00:02:28,640
the model

76
00:02:27,200 --> 00:02:30,160
and what we find is actually that yes

77
00:02:28,640 --> 00:02:32,559
you can although there are several

78
00:02:30,160 --> 00:02:34,799
caveats that i can't get into

79
00:02:32,560 --> 00:02:36,560
and this is how we do it with these

80
00:02:34,800 --> 00:02:38,160
beautiful animations that nicholas made

81
00:02:36,560 --> 00:02:40,319
and actually explains in

82
00:02:38,160 --> 00:02:42,239
the 25 minute version of the talk so you

83
00:02:40,319 --> 00:02:45,119
should go check that out

84
00:02:42,239 --> 00:02:46,640
but uh what i do have time to explain is

85
00:02:45,120 --> 00:02:50,239
uh results

86
00:02:46,640 --> 00:02:53,599
so uh you can see here we have a

87
00:02:50,239 --> 00:02:56,800
100 000 parameter neural network

88
00:02:53,599 --> 00:02:58,000
model prior work is able to query this a

89
00:02:56,800 --> 00:02:59,920
million times

90
00:02:58,000 --> 00:03:02,000
and they get every weight with two or

91
00:02:59,920 --> 00:03:04,079
more bits of precision

92
00:03:02,000 --> 00:03:05,760
and we show how to do twice as many

93
00:03:04,080 --> 00:03:08,159
queries so two million queries

94
00:03:05,760 --> 00:03:09,040
and we get uh 29 or more bits of

95
00:03:08,159 --> 00:03:11,280
precision

96
00:03:09,040 --> 00:03:13,920
and we have uh better results for deeper

97
00:03:11,280 --> 00:03:15,680
networks as well

98
00:03:13,920 --> 00:03:18,159
so there are three main takeaways that

99
00:03:15,680 --> 00:03:20,000
uh that we want you to have from this um

100
00:03:18,159 --> 00:03:21,840
the first is that neural networks are

101
00:03:20,000 --> 00:03:24,640
very commonly analyzed in either like a

102
00:03:21,840 --> 00:03:27,280
black box or even an anthropomorphic way

103
00:03:24,640 --> 00:03:29,040
um but our work shows that direct

104
00:03:27,280 --> 00:03:30,959
mathematical analysis as them

105
00:03:29,040 --> 00:03:33,200
as a you know mathematical function can

106
00:03:30,959 --> 00:03:35,840
be a fruitful approach as well

107
00:03:33,200 --> 00:03:36,640
the second is that secure inference

108
00:03:35,840 --> 00:03:39,519
which is the

109
00:03:36,640 --> 00:03:42,079
secure multi-party computation approach

110
00:03:39,519 --> 00:03:44,959
to generating this black box

111
00:03:42,080 --> 00:03:46,720
query interface is only as secure as the

112
00:03:44,959 --> 00:03:48,640
query interfaces itself

113
00:03:46,720 --> 00:03:50,000
so if an adversary can steal the model

114
00:03:48,640 --> 00:03:51,200
by making queries

115
00:03:50,000 --> 00:03:53,439
it doesn't matter how secure the

116
00:03:51,200 --> 00:03:55,760
protocol for computing those queries is

117
00:03:53,439 --> 00:03:57,280
because the the interface will leak

118
00:03:55,760 --> 00:04:00,079
knowledge of the model

119
00:03:57,280 --> 00:04:02,080
and finally it's common in cryptography

120
00:04:00,080 --> 00:04:04,879
to model specific algorithms like

121
00:04:02,080 --> 00:04:06,080
aes as instantiations of some ideal

122
00:04:04,879 --> 00:04:09,359
functionality like

123
00:04:06,080 --> 00:04:10,799
an ideal block cipher um and it might be

124
00:04:09,360 --> 00:04:12,159
tempting to use neural networks to do

125
00:04:10,799 --> 00:04:14,000
such a thing

126
00:04:12,159 --> 00:04:16,159
but our paper kind of shows that there

127
00:04:14,000 --> 00:04:18,880
are subtle properties of neural networks

128
00:04:16,160 --> 00:04:21,120
that maybe should um you should have

129
00:04:18,880 --> 00:04:24,159
caution about applying in this way

130
00:04:21,120 --> 00:04:26,000
and so uh that's that's it and

131
00:04:24,160 --> 00:04:29,840
um i think all of us are here to take

132
00:04:26,000 --> 00:04:29,840
questions now

133
00:04:30,240 --> 00:04:34,800
so there is a question by kevin uh what

134
00:04:33,680 --> 00:04:37,520
do you think are the most

135
00:04:34,800 --> 00:04:40,840
important open questions area of reverse

136
00:04:37,520 --> 00:04:42,560
engineering neural networks models like

137
00:04:40,840 --> 00:04:44,799
kevin uh

138
00:04:42,560 --> 00:04:45,759
sure i yeah so i mean one of the big

139
00:04:44,800 --> 00:04:48,240
ones is like

140
00:04:45,759 --> 00:04:49,360
how do you defend against this um i

141
00:04:48,240 --> 00:04:50,320
think there's a lot of different

142
00:04:49,360 --> 00:04:51,919
approaches

143
00:04:50,320 --> 00:04:54,000
um and it's not really clear which one

144
00:04:51,919 --> 00:04:54,400
is the best so far and of course like

145
00:04:54,000 --> 00:04:57,199
also

146
00:04:54,400 --> 00:04:57,679
improving on these kinds of attacks um

147
00:04:57,199 --> 00:04:59,360
is

148
00:04:57,680 --> 00:05:01,120
is really interesting as well because

149
00:04:59,360 --> 00:05:03,199
like i said there are several caveats

150
00:05:01,120 --> 00:05:05,199
to to our approach that make it don't

151
00:05:03,199 --> 00:05:08,000
really not really work in practice

152
00:05:05,199 --> 00:05:10,479
um if the other authors have have more

153
00:05:08,000 --> 00:05:14,080
comments on that

154
00:05:10,479 --> 00:05:17,280
uh this is uh this is ilya

155
00:05:14,080 --> 00:05:20,320
i and uh um

156
00:05:17,280 --> 00:05:23,679
i would add to that a uh

157
00:05:20,320 --> 00:05:28,080
theoretical understanding of

158
00:05:23,680 --> 00:05:31,440
the learnability of neural networks

159
00:05:28,080 --> 00:05:34,479
uh so that's an open question that

160
00:05:31,440 --> 00:05:35,680
uh has been partially addressed in some

161
00:05:34,479 --> 00:05:37,758
prior work

162
00:05:35,680 --> 00:05:39,680
we provide empirical evidence that

163
00:05:37,759 --> 00:05:42,880
they're they are learnable

164
00:05:39,680 --> 00:05:46,000
but uh just understanding the theory

165
00:05:42,880 --> 00:05:50,840
of of of that

166
00:05:46,000 --> 00:05:53,280
interface of that functionality is still

167
00:05:50,840 --> 00:05:54,719
open

168
00:05:53,280 --> 00:05:56,318
and there's a question there two

169
00:05:54,720 --> 00:05:57,039
questions in the zoom chat the first is

170
00:05:56,319 --> 00:05:59,280
by john

171
00:05:57,039 --> 00:06:00,080
can you comment on the last bullet uh on

172
00:05:59,280 --> 00:06:03,599
this slide

173
00:06:00,080 --> 00:06:03,599
i was not sure what you meant

174
00:06:03,680 --> 00:06:08,720
uh yeah nicholas or ilia is probably

175
00:06:05,919 --> 00:06:08,719
best for that one

176
00:06:12,160 --> 00:06:15,840
elia if you want to go again you're the

177
00:06:13,280 --> 00:06:15,840
cryptographer

178
00:06:16,720 --> 00:06:24,000
so uh i think uh

179
00:06:20,880 --> 00:06:25,120
okay so uh we wanna put in ideal

180
00:06:24,000 --> 00:06:28,080
functionalities

181
00:06:25,120 --> 00:06:28,800
something that uh we understand and the

182
00:06:28,080 --> 00:06:32,840
parties

183
00:06:28,800 --> 00:06:34,639
agree on the implications of executive

184
00:06:32,840 --> 00:06:37,919
dysfunctionalities

185
00:06:34,639 --> 00:06:41,600
uh like the millionaire's problem like

186
00:06:37,919 --> 00:06:43,758
a x larger than y like compare x and y

187
00:06:41,600 --> 00:06:45,120
or as circuits like we understand what

188
00:06:43,759 --> 00:06:48,319
executing a a circuit

189
00:06:45,120 --> 00:06:52,080
is with neural neural networks

190
00:06:48,319 --> 00:06:55,280
they're complex they're subtle and uh

191
00:06:52,080 --> 00:06:58,960
um the uh it's just

192
00:06:55,280 --> 00:06:59,679
uh asking uh people to take on faith

193
00:06:58,960 --> 00:07:01,840
that

194
00:06:59,680 --> 00:07:03,759
executes ideal functionality like a

195
00:07:01,840 --> 00:07:06,318
neural network

196
00:07:03,759 --> 00:07:10,400
as an ideal functionality that is

197
00:07:06,319 --> 00:07:10,400
washing our hands of the heart problem

198
00:07:12,960 --> 00:07:18,479
okay then christina asks

199
00:07:16,639 --> 00:07:21,520
if you don't give up confidence levels

200
00:07:18,479 --> 00:07:24,400
does it block the attack

201
00:07:21,520 --> 00:07:25,758
at least this attack um so the the

202
00:07:24,400 --> 00:07:28,638
learning approach

203
00:07:25,759 --> 00:07:30,000
uh you know that'll that'll work maybe a

204
00:07:28,639 --> 00:07:32,080
little bit worse

205
00:07:30,000 --> 00:07:33,759
um because i mean machine learning

206
00:07:32,080 --> 00:07:35,440
learns from labels as well as it learns

207
00:07:33,759 --> 00:07:37,759
from confidence

208
00:07:35,440 --> 00:07:39,120
this attack we we don't know how to do

209
00:07:37,759 --> 00:07:42,800
it for confidence

210
00:07:39,120 --> 00:07:44,400
at least yet but you know who knows

211
00:07:42,800 --> 00:07:47,840
in the next couple years maybe someone

212
00:07:44,400 --> 00:07:47,840
will come up with a way to do that

213
00:07:49,440 --> 00:07:54,160
okay there's more questions coming in so

214
00:07:52,000 --> 00:07:58,400
john tell me when i should stop

215
00:07:54,160 --> 00:08:00,400
uh i think moti made more of a comment

216
00:07:58,400 --> 00:08:01,840
saying there's actually nothing ideal

217
00:08:00,400 --> 00:08:03,679
about them because there's no claim of

218
00:08:01,840 --> 00:08:06,479
security

219
00:08:03,680 --> 00:08:07,120
um so like i guess multi is also

220
00:08:06,479 --> 00:08:10,479
following up

221
00:08:07,120 --> 00:08:11,120
on the ideal functionality part but let

222
00:08:10,479 --> 00:08:14,159
me

223
00:08:11,120 --> 00:08:16,400
uh move on to questions from

224
00:08:14,160 --> 00:08:19,199
zulip have you tried your technique

225
00:08:16,400 --> 00:08:20,960
against gpt3

226
00:08:19,199 --> 00:08:23,520
and how complex is it compared to

227
00:08:20,960 --> 00:08:23,520
retraining

228
00:08:24,160 --> 00:08:27,440
yeah that's a good question so like uh

229
00:08:27,120 --> 00:08:28,720
the

230
00:08:27,440 --> 00:08:30,800
the only experiments we have around

231
00:08:28,720 --> 00:08:33,599
these fairly small neural networks

232
00:08:30,800 --> 00:08:34,959
um and we actually require uh a lot of

233
00:08:33,599 --> 00:08:37,360
assumptions that

234
00:08:34,958 --> 00:08:38,838
wouldn't really hold for like jpt3

235
00:08:37,360 --> 00:08:43,039
querying

236
00:08:38,839 --> 00:08:45,440
um and yeah i guess the the concrete

237
00:08:43,039 --> 00:08:48,399
uh requirement is we we need something

238
00:08:45,440 --> 00:08:51,200
like six or more queries per parameter

239
00:08:48,399 --> 00:08:51,760
um and so like these really big models

240
00:08:51,200 --> 00:08:53,920
uh

241
00:08:51,760 --> 00:08:56,240
we would need you know six times as many

242
00:08:53,920 --> 00:09:00,079
parameters as there are queries which

243
00:08:56,240 --> 00:09:00,080
could could very well get big

244
00:09:01,279 --> 00:09:06,240
ellen noah's asking if uh the attack

245
00:09:04,640 --> 00:09:07,600
also can learn something about the data

246
00:09:06,240 --> 00:09:09,760
that was used to train the neural

247
00:09:07,600 --> 00:09:12,240
network

248
00:09:09,760 --> 00:09:14,560
uh yeah so i mean this is this is

249
00:09:12,240 --> 00:09:17,680
something of an orthogonal question like

250
00:09:14,560 --> 00:09:20,239
how so i yeah i guess like there are

251
00:09:17,680 --> 00:09:21,439
black box attacks that you can use to

252
00:09:20,240 --> 00:09:23,920
understand the

253
00:09:21,440 --> 00:09:25,200
privacy leakage of models there's also

254
00:09:23,920 --> 00:09:27,040
white box attacks

255
00:09:25,200 --> 00:09:28,240
so if white box attacks are better than

256
00:09:27,040 --> 00:09:30,160
black box attacks

257
00:09:28,240 --> 00:09:32,160
then extracting the neural network is

258
00:09:30,160 --> 00:09:33,839
one way of doing better at that

259
00:09:32,160 --> 00:09:35,279
although you know this is orthogonal to

260
00:09:33,839 --> 00:09:37,040
the question of you know you can train

261
00:09:35,279 --> 00:09:38,880
to make your model more private and

262
00:09:37,040 --> 00:09:40,959
whatnot

263
00:09:38,880 --> 00:09:42,160
so i think uh i think the time is maybe

264
00:09:40,959 --> 00:09:43,760
up we should probably move on to the

265
00:09:42,160 --> 00:09:45,600
next talk

266
00:09:43,760 --> 00:09:47,040
yeah check out zulu though there's more

267
00:09:45,600 --> 00:09:51,519
questions for you guys

268
00:09:47,040 --> 00:09:54,800
thank you

269
00:09:51,519 --> 00:09:54,800
i'm trying to exit

270
00:10:01,920 --> 00:10:05,839
okay just do you see my screen

271
00:10:08,000 --> 00:10:10,320
yes

272
00:10:11,519 --> 00:10:15,040
okay shall i go on

273
00:10:17,680 --> 00:10:24,000
yeah you got a thumbs up okay

274
00:10:21,440 --> 00:10:24,959
good thank you for watching uh i'm

275
00:10:24,000 --> 00:10:27,279
emmanuel thome

276
00:10:24,959 --> 00:10:29,518
and our paper is john truck with a

277
00:10:27,279 --> 00:10:32,720
collection of six houses

278
00:10:29,519 --> 00:10:34,959
who are listed here we are reporting on

279
00:10:32,720 --> 00:10:36,800
three computational records two related

280
00:10:34,959 --> 00:10:38,959
to integer factoring and one related to

281
00:10:36,800 --> 00:10:40,800
the computation of discrete logs

282
00:10:38,959 --> 00:10:42,640
and one of the pretty new things that we

283
00:10:40,800 --> 00:10:44,399
have in this computation is that for the

284
00:10:42,640 --> 00:10:46,399
first time we are doing

285
00:10:44,399 --> 00:10:48,160
two records one for factoring and one

286
00:10:46,399 --> 00:10:49,440
for discrete logics at the same time for

287
00:10:48,160 --> 00:10:52,160
the same size

288
00:10:49,440 --> 00:10:53,760
which gives a nice comparison point so

289
00:10:52,160 --> 00:10:55,439
we show that cryptanalysis for these

290
00:10:53,760 --> 00:10:57,760
sizes is feasible

291
00:10:55,440 --> 00:10:59,040
and believe it or not you can still see

292
00:10:57,760 --> 00:11:01,279
products around that

293
00:10:59,040 --> 00:11:03,120
are implicitly relying on the fact that

294
00:11:01,279 --> 00:11:04,880
crypto analysis is not visible because

295
00:11:03,120 --> 00:11:07,200
these products are outdated

296
00:11:04,880 --> 00:11:08,240
so this serves as a gentle reminder that

297
00:11:07,200 --> 00:11:11,920
uh it's

298
00:11:08,240 --> 00:11:14,640
very time very much time to move on

299
00:11:11,920 --> 00:11:16,399
so to do those these records we use the

300
00:11:14,640 --> 00:11:18,079
number field save algorithm which is a

301
00:11:16,399 --> 00:11:20,240
complicated algorithm

302
00:11:18,079 --> 00:11:22,079
and uh most of what i'm going to talk

303
00:11:20,240 --> 00:11:23,920
about in this five minutes is related to

304
00:11:22,079 --> 00:11:25,199
the two most computationally expensive

305
00:11:23,920 --> 00:11:29,120
tasks which are

306
00:11:25,200 --> 00:11:32,800
sieving and lanyard algebra

307
00:11:29,120 --> 00:11:35,680
so for sieving or relation collection

308
00:11:32,800 --> 00:11:36,959
there's a difficult art which is the art

309
00:11:35,680 --> 00:11:39,199
of choosing parameters

310
00:11:36,959 --> 00:11:40,880
and we were pretty proud that our

311
00:11:39,200 --> 00:11:42,480
parameter choice was really good for

312
00:11:40,880 --> 00:11:45,519
these computations

313
00:11:42,480 --> 00:11:47,839
and we combined several techniques

314
00:11:45,519 --> 00:11:49,920
many of them were known already but have

315
00:11:47,839 --> 00:11:52,320
some of them been used for records

316
00:11:49,920 --> 00:11:54,240
specifically i'm thinking of what we

317
00:11:52,320 --> 00:11:56,639
call composite special cues

318
00:11:54,240 --> 00:11:57,440
and also batch smoothness detection uh

319
00:11:56,639 --> 00:11:58,880
both of which

320
00:11:57,440 --> 00:12:01,440
played an important role in the

321
00:11:58,880 --> 00:12:04,720
computation

322
00:12:01,440 --> 00:12:07,279
most of this was aimed at

323
00:12:04,720 --> 00:12:08,480
making the linear algebra computation

324
00:12:07,279 --> 00:12:11,200
that came next

325
00:12:08,480 --> 00:12:12,399
easier and all of these choices were

326
00:12:11,200 --> 00:12:14,959
guided by

327
00:12:12,399 --> 00:12:16,160
simulation tools that we used in order

328
00:12:14,959 --> 00:12:19,199
to decide

329
00:12:16,160 --> 00:12:22,719
which parameters were relevant

330
00:12:19,200 --> 00:12:22,720
and how we should tune them

331
00:12:23,200 --> 00:12:27,680
regarding linear algebra uh so here are

332
00:12:25,920 --> 00:12:28,399
the dimensions of the matrices that we

333
00:12:27,680 --> 00:12:31,680
encountered

334
00:12:28,399 --> 00:12:34,160
and these are large sparse matrices and

335
00:12:31,680 --> 00:12:35,760
the matrix for the glp problem is much

336
00:12:34,160 --> 00:12:37,920
smaller because

337
00:12:35,760 --> 00:12:39,680
the dlp linear system is defined over a

338
00:12:37,920 --> 00:12:42,479
large finite field so

339
00:12:39,680 --> 00:12:45,120
much of our effort was aiming at

340
00:12:42,480 --> 00:12:49,440
reducing this linear algebra

341
00:12:45,120 --> 00:12:52,160
dimension so that the task was feasible

342
00:12:49,440 --> 00:12:53,120
what we show in our computation is that

343
00:12:52,160 --> 00:12:57,120
linear algebra

344
00:12:53,120 --> 00:12:59,360
this at this sizes uh does scale

345
00:12:57,120 --> 00:13:01,440
and this is thanks to the use of the

346
00:12:59,360 --> 00:13:02,880
black vitamin algorithm and also

347
00:13:01,440 --> 00:13:04,959
thanks to the fact that we have an

348
00:13:02,880 --> 00:13:07,600
improved implementation of what we call

349
00:13:04,959 --> 00:13:10,160
the generator step

350
00:13:07,600 --> 00:13:12,000
which is the bottom next step in the

351
00:13:10,160 --> 00:13:14,000
black freedom and algorithm

352
00:13:12,000 --> 00:13:16,320
if i draw a picture with the time to

353
00:13:14,000 --> 00:13:16,959
solution with respect to the number of

354
00:13:16,320 --> 00:13:19,519
cores

355
00:13:16,959 --> 00:13:20,000
i'm using if i have something completely

356
00:13:19,519 --> 00:13:21,680
perfect

357
00:13:20,000 --> 00:13:23,360
in terms of scaling i have a straight

358
00:13:21,680 --> 00:13:25,760
line and what we have

359
00:13:23,360 --> 00:13:27,440
in this context is is approaching a

360
00:13:25,760 --> 00:13:30,079
straight line at least

361
00:13:27,440 --> 00:13:32,839
until several thousands of course so

362
00:13:30,079 --> 00:13:34,000
this is something we are pretty happy

363
00:13:32,839 --> 00:13:35,760
with

364
00:13:34,000 --> 00:13:38,320
we do the total of the cost of the

365
00:13:35,760 --> 00:13:40,160
computation we have for i will say 240

366
00:13:38,320 --> 00:13:41,600
something which is in the whereabouts of

367
00:13:40,160 --> 00:13:44,240
900 core years

368
00:13:41,600 --> 00:13:46,800
and for glp 240 something that is

369
00:13:44,240 --> 00:13:49,440
slightly above 3 000 crores

370
00:13:46,800 --> 00:13:50,800
so this tells us that we have a hardness

371
00:13:49,440 --> 00:13:53,040
ratio which is

372
00:13:50,800 --> 00:13:54,160
three point something which is

373
00:13:53,040 --> 00:13:56,560
significant but

374
00:13:54,160 --> 00:13:58,480
on the other hand it is not as large as

375
00:13:56,560 --> 00:13:59,199
people tend to think so it's something

376
00:13:58,480 --> 00:14:02,000
that we learn

377
00:13:59,199 --> 00:14:03,040
from this computation also we can make

378
00:14:02,000 --> 00:14:06,320
the comparison

379
00:14:03,040 --> 00:14:07,439
of our computation namely the dlp 240

380
00:14:06,320 --> 00:14:09,279
computation

381
00:14:07,440 --> 00:14:12,959
with the latest record of this kind

382
00:14:09,279 --> 00:14:15,360
which was dlp 768 which is 232 digits

383
00:14:12,959 --> 00:14:18,000
and that was four years ago and what we

384
00:14:15,360 --> 00:14:20,240
found out is that on identical hardware

385
00:14:18,000 --> 00:14:22,560
our harder computation would have taken

386
00:14:20,240 --> 00:14:26,560
less time so this is something

387
00:14:22,560 --> 00:14:26,560
we're also quite satisfied with

388
00:14:26,720 --> 00:14:30,959
at the conclusion more than just record

389
00:14:29,120 --> 00:14:32,880
we have developed parameterization

390
00:14:30,959 --> 00:14:34,560
strategies for further computations

391
00:14:32,880 --> 00:14:37,760
which were pretty effective

392
00:14:34,560 --> 00:14:38,399
in these instances and those were guided

393
00:14:37,760 --> 00:14:40,399
by

394
00:14:38,399 --> 00:14:41,839
the design of the simulation framework

395
00:14:40,399 --> 00:14:44,560
which we found

396
00:14:41,839 --> 00:14:46,800
pretty efficient it's not perfect but we

397
00:14:44,560 --> 00:14:49,920
were quite happy with it

398
00:14:46,800 --> 00:14:52,959
our implementation skills were and also

399
00:14:49,920 --> 00:14:54,719
it's important to notice that we used

400
00:14:52,959 --> 00:14:56,800
open source software

401
00:14:54,720 --> 00:14:58,000
cado nfs which we have been developing

402
00:14:56,800 --> 00:15:01,120
for more than 10 years

403
00:14:58,000 --> 00:15:03,120
in north sea and also all the parameters

404
00:15:01,120 --> 00:15:04,240
and some data to reproduce part of a

405
00:15:03,120 --> 00:15:09,040
computation

406
00:15:04,240 --> 00:15:11,839
can be found under this internet url

407
00:15:09,040 --> 00:15:12,399
we intend to go on with larger projects

408
00:15:11,839 --> 00:15:15,360
and

409
00:15:12,399 --> 00:15:17,199
most of the focus will be on our

410
00:15:15,360 --> 00:15:20,320
capacity to anticipate

411
00:15:17,199 --> 00:15:22,399
the hardness of the different steps and

412
00:15:20,320 --> 00:15:23,839
our capacity to use a large amount of

413
00:15:22,399 --> 00:15:25,440
computing power

414
00:15:23,839 --> 00:15:28,560
okay thank you for listening and i'm

415
00:15:25,440 --> 00:15:28,560
here to take your questions

416
00:15:29,360 --> 00:15:32,800
okay first emma sorry for not

417
00:15:31,120 --> 00:15:33,600
introducing you properly i'm learning on

418
00:15:32,800 --> 00:15:37,359
the job

419
00:15:33,600 --> 00:15:40,800
uh um they i don't see

420
00:15:37,360 --> 00:15:44,000
any questions yet but i have one okay

421
00:15:40,800 --> 00:15:47,359
so my question is how how stable is this

422
00:15:44,000 --> 00:15:48,880
uh so uh in terms of like you you made

423
00:15:47,360 --> 00:15:50,560
some progress and then like do you do

424
00:15:48,880 --> 00:15:52,639
you feel like it's saturating and we

425
00:15:50,560 --> 00:15:54,239
kind of have a good idea of like how

426
00:15:52,639 --> 00:15:55,680
much this actually costs or

427
00:15:54,240 --> 00:15:57,680
kind of do you expect there will be

428
00:15:55,680 --> 00:16:00,880
significant progress in speeding this up

429
00:15:57,680 --> 00:16:03,599
going forward well

430
00:16:00,880 --> 00:16:04,320
we can always expect some uh some

431
00:16:03,600 --> 00:16:06,639
progress

432
00:16:04,320 --> 00:16:08,240
uh based on the fact that we improve on

433
00:16:06,639 --> 00:16:09,360
the implementation and so on and so

434
00:16:08,240 --> 00:16:13,040
forth but

435
00:16:09,360 --> 00:16:14,880
uh what we found out is that uh

436
00:16:13,040 --> 00:16:16,480
i mean the different choices that we

437
00:16:14,880 --> 00:16:19,519
made in choosing the parameters

438
00:16:16,480 --> 00:16:20,399
ended up uh in costs that were pretty

439
00:16:19,519 --> 00:16:22,160
stable i mean

440
00:16:20,399 --> 00:16:24,079
at the end of the day we were talking a

441
00:16:22,160 --> 00:16:25,680
few percent difference between

442
00:16:24,079 --> 00:16:28,239
that parameter choice and that other

443
00:16:25,680 --> 00:16:31,359
parameter choice so in a way yes it's

444
00:16:28,240 --> 00:16:34,320
as stable as it can be well of course uh

445
00:16:31,360 --> 00:16:35,920
if tomorrow somebody comes up with a

446
00:16:34,320 --> 00:16:38,399
totally new algorithm is going to be

447
00:16:35,920 --> 00:16:38,399
different but

448
00:16:42,000 --> 00:16:47,199
kevin asks do new processor

449
00:16:44,320 --> 00:16:50,560
architectures like gpus help for saving

450
00:16:47,199 --> 00:16:54,560
nope uh i mean

451
00:16:50,560 --> 00:16:57,359
uh we tried but uh

452
00:16:54,560 --> 00:16:58,239
i mean the the people at gpfl try to use

453
00:16:57,360 --> 00:17:00,480
gpus

454
00:16:58,240 --> 00:17:01,440
uh and and the bottom line is that if

455
00:17:00,480 --> 00:17:04,559
you have them

456
00:17:01,440 --> 00:17:08,400
uh in large quantities uh maybe you can

457
00:17:04,559 --> 00:17:11,280
you could use them

458
00:17:08,400 --> 00:17:12,079
to some extent but if you have money to

459
00:17:11,280 --> 00:17:14,720
spend

460
00:17:12,079 --> 00:17:16,079
you're much better off spending it on

461
00:17:14,720 --> 00:17:20,480
normal cpus

462
00:17:16,079 --> 00:17:22,159
that's far and habenas can you comment

463
00:17:20,480 --> 00:17:23,039
on what these strategies for choosing

464
00:17:22,160 --> 00:17:26,720
parameters are

465
00:17:23,039 --> 00:17:30,240
exactly uh

466
00:17:26,720 --> 00:17:30,880
difficult i mean it's uh it's a question

467
00:17:30,240 --> 00:17:33,600
of uh

468
00:17:30,880 --> 00:17:34,400
making sure that you give enough legroom

469
00:17:33,600 --> 00:17:36,879
to the

470
00:17:34,400 --> 00:17:39,440
filtering process to reduce your matrix

471
00:17:36,880 --> 00:17:42,720
size as much as you can so

472
00:17:39,440 --> 00:17:44,640
it means that we want to pay attention

473
00:17:42,720 --> 00:17:46,640
for example to the fact that the special

474
00:17:44,640 --> 00:17:51,039
cues that we use to

475
00:17:46,640 --> 00:17:54,320
to divide the work into pieces do not uh

476
00:17:51,039 --> 00:17:56,240
actually cover a large part of the

477
00:17:54,320 --> 00:17:57,840
of the large prime range and do not

478
00:17:56,240 --> 00:18:00,720
interact badly with the

479
00:17:57,840 --> 00:18:02,320
filtering that that comes next this is

480
00:18:00,720 --> 00:18:04,720
one of the key aspects and this is

481
00:18:02,320 --> 00:18:07,360
detailed

482
00:18:04,720 --> 00:18:07,360
in the paper

483
00:18:09,840 --> 00:18:15,840
i don't see any more questions for now

484
00:18:19,520 --> 00:18:22,320
i guess if there are no other oh if

485
00:18:21,200 --> 00:18:23,760
there are no other questions i was going

486
00:18:22,320 --> 00:18:24,159
to say we can go on to the next talk did

487
00:18:23,760 --> 00:18:28,160
you

488
00:18:24,160 --> 00:18:29,760
want to say something no no

489
00:18:28,160 --> 00:18:31,760
okay so does the next speaker want to

490
00:18:29,760 --> 00:18:34,480
load up her slides

491
00:18:31,760 --> 00:18:34,480
share her screen

492
00:18:41,520 --> 00:18:47,679
okay so okay can you see slides and

493
00:18:44,559 --> 00:18:49,440
sound uh i don't see any slides right

494
00:18:47,679 --> 00:18:53,360
now actually

495
00:18:49,440 --> 00:18:56,559
oh okay i saw them a minute ago but not

496
00:18:53,360 --> 00:18:57,439
not not right now ah there we go there

497
00:18:56,559 --> 00:18:59,120
we go

498
00:18:57,440 --> 00:19:00,880
okay i need to enter the full screen

499
00:18:59,120 --> 00:19:02,000
mode though and that's when you lost the

500
00:19:00,880 --> 00:19:05,200
slides

501
00:19:02,000 --> 00:19:08,160
yeah oh i'll just

502
00:19:05,200 --> 00:19:08,960
share my desktop instead of the thing i

503
00:19:08,160 --> 00:19:12,180
think

504
00:19:08,960 --> 00:19:14,400
yesterday they had a similar issue so um

505
00:19:12,180 --> 00:19:19,470
[Music]

506
00:19:14,400 --> 00:19:22,519
let me just stop sharing

507
00:19:19,470 --> 00:19:22,519
[Music]

508
00:19:22,840 --> 00:19:25,840
okay

509
00:19:26,799 --> 00:19:31,600
is that better yeah

510
00:19:30,080 --> 00:19:33,120
the next talk i will be on discrete

511
00:19:31,600 --> 00:19:34,799
logarithm algorithms and pairing

512
00:19:33,120 --> 00:19:37,840
relevant finite fields

513
00:19:34,799 --> 00:19:40,480
uh by gabriella di mikelli

514
00:19:37,840 --> 00:19:41,918
godree and cecile perro and i apology

515
00:19:40,480 --> 00:19:43,280
apologies for the names if i got any of

516
00:19:41,919 --> 00:19:46,160
them wrong

517
00:19:43,280 --> 00:19:47,760
all right thanks for the introduction so

518
00:19:46,160 --> 00:19:50,400
as you just said this is a talk

519
00:19:47,760 --> 00:19:51,440
joint work with pierre godric and i'm

520
00:19:50,400 --> 00:19:53,039
going to be talking about discrete

521
00:19:51,440 --> 00:19:55,039
logarithm algorithms and pairing

522
00:19:53,039 --> 00:19:56,400
relevant finite fields

523
00:19:55,039 --> 00:19:58,720
so let me just start by briefly

524
00:19:56,400 --> 00:20:00,480
recalling the discrete logarithm problem

525
00:19:58,720 --> 00:20:02,559
so the definition is quite

526
00:20:00,480 --> 00:20:05,039
straightforward we're given a cyclic

527
00:20:02,559 --> 00:20:06,320
finite group g we have a generator small

528
00:20:05,039 --> 00:20:08,158
g from this group

529
00:20:06,320 --> 00:20:10,158
and then we have a target element h of

530
00:20:08,159 --> 00:20:11,200
this group and we want to be able to

531
00:20:10,159 --> 00:20:14,000
find the exponent

532
00:20:11,200 --> 00:20:14,960
x such that if i raise the generator g

533
00:20:14,000 --> 00:20:17,520
to the x then i

534
00:20:14,960 --> 00:20:18,720
end up with my target element h this is

535
00:20:17,520 --> 00:20:20,080
one of the two main

536
00:20:18,720 --> 00:20:22,720
mathematical problems on which the

537
00:20:20,080 --> 00:20:25,199
security of a lot of uh deployed

538
00:20:22,720 --> 00:20:26,559
today deployed um protocols based their

539
00:20:25,200 --> 00:20:27,840
security on so the other one being

540
00:20:26,559 --> 00:20:30,000
factorization

541
00:20:27,840 --> 00:20:31,360
and in this work we were motivated by an

542
00:20:30,000 --> 00:20:32,880
interesting example that uses the

543
00:20:31,360 --> 00:20:34,799
hardest of dlp which is a pairing

544
00:20:32,880 --> 00:20:36,080
parent-based protocols

545
00:20:34,799 --> 00:20:38,080
so why do we really care about

546
00:20:36,080 --> 00:20:38,320
pairing-based protocols well first of

547
00:20:38,080 --> 00:20:40,080
all

548
00:20:38,320 --> 00:20:42,480
they've been used there's quite a lot of

549
00:20:40,080 --> 00:20:45,760
protocols old ones more recently

550
00:20:42,480 --> 00:20:47,919
in blockchain for example zk snarks

551
00:20:45,760 --> 00:20:49,600
and what is interesting with pairings

552
00:20:47,919 --> 00:20:50,559
when looking at the hardness of dlp is

553
00:20:49,600 --> 00:20:53,678
that we want to

554
00:20:50,559 --> 00:20:56,399
have the hardness of dlp both on

555
00:20:53,679 --> 00:20:57,919
elliptic curves and on finite fields so

556
00:20:56,400 --> 00:20:58,559
these pairings that i'm not really

557
00:20:57,919 --> 00:21:00,799
defining

558
00:20:58,559 --> 00:21:02,559
are billionaire maps from a product of

559
00:21:00,799 --> 00:21:04,158
groups to a target group

560
00:21:02,559 --> 00:21:06,720
and so in order for a pairing to be

561
00:21:04,159 --> 00:21:07,360
secure we want the discrete logarithm to

562
00:21:06,720 --> 00:21:08,799
be hard

563
00:21:07,360 --> 00:21:10,559
and this comes from the definition of

564
00:21:08,799 --> 00:21:13,280
the group g that we have

565
00:21:10,559 --> 00:21:14,000
so here in this work we try to explain

566
00:21:13,280 --> 00:21:15,600
and

567
00:21:14,000 --> 00:21:17,520
ask the question so how do we construct

568
00:21:15,600 --> 00:21:19,840
a secure pairing based protocol

569
00:21:17,520 --> 00:21:21,440
and the answer which is um simple but

570
00:21:19,840 --> 00:21:22,480
not simple is that to look at dlp

571
00:21:21,440 --> 00:21:24,400
algorithms on both

572
00:21:22,480 --> 00:21:26,240
sides so i'm not really going to talk

573
00:21:24,400 --> 00:21:27,919
about the elliptic curve side um the

574
00:21:26,240 --> 00:21:29,280
complexity is the square root of the

575
00:21:27,919 --> 00:21:31,039
size of the subgroup that's been

576
00:21:29,280 --> 00:21:33,840
considered and that comes from

577
00:21:31,039 --> 00:21:35,039
the polaroid algorithm but on the other

578
00:21:33,840 --> 00:21:37,199
hand i'm going to be talking about the

579
00:21:35,039 --> 00:21:39,520
discrete logarithm on finite fields

580
00:21:37,200 --> 00:21:40,559
so this is a bit more complex first of

581
00:21:39,520 --> 00:21:42,879
all there's a lot of different

582
00:21:40,559 --> 00:21:44,720
algorithms that solve dlp on finite

583
00:21:42,880 --> 00:21:46,159
fields of the form fpn

584
00:21:44,720 --> 00:21:48,000
and not only there are a lot of them but

585
00:21:46,159 --> 00:21:49,280
also their complexity is going to depend

586
00:21:48,000 --> 00:21:51,280
on a relation

587
00:21:49,280 --> 00:21:54,320
we have between the characteristic p and

588
00:21:51,280 --> 00:21:55,918
the extension degree n

589
00:21:54,320 --> 00:21:58,000
so usually when we talk about

590
00:21:55,919 --> 00:21:58,880
complexities of these algorithms and

591
00:21:58,000 --> 00:22:01,440
also

592
00:21:58,880 --> 00:22:03,280
these finite fields we have this l

593
00:22:01,440 --> 00:22:06,960
notation which is the

594
00:22:03,280 --> 00:22:08,559
uh formula on the in the green rectangle

595
00:22:06,960 --> 00:22:10,159
and this is used to express the

596
00:22:08,559 --> 00:22:11,039
complexities of these algorithms but

597
00:22:10,159 --> 00:22:13,039
also to define

598
00:22:11,039 --> 00:22:14,720
different families of finite fields so

599
00:22:13,039 --> 00:22:16,799
we usually talk about small

600
00:22:14,720 --> 00:22:17,840
medium or large characteristic depending

601
00:22:16,799 --> 00:22:20,960
on this

602
00:22:17,840 --> 00:22:22,559
l l notation where um depending on

603
00:22:20,960 --> 00:22:24,159
whether the lp which is the first of the

604
00:22:22,559 --> 00:22:25,280
two parameters in the definition is

605
00:22:24,159 --> 00:22:26,960
smaller or equal

606
00:22:25,280 --> 00:22:29,520
or greater than the third or two-thirds

607
00:22:26,960 --> 00:22:31,440
were in either of these families

608
00:22:29,520 --> 00:22:33,679
so we're going to focus on a specific

609
00:22:31,440 --> 00:22:36,080
area which is the boundary case between

610
00:22:33,679 --> 00:22:37,520
small and medium characteristics

611
00:22:36,080 --> 00:22:39,600
and there's two main reasons why we

612
00:22:37,520 --> 00:22:40,320
focus on this area first of all it

613
00:22:39,600 --> 00:22:42,240
hasn't been

614
00:22:40,320 --> 00:22:44,320
studied before so we have a lot of

615
00:22:42,240 --> 00:22:45,679
algorithms in a medium characteristic

616
00:22:44,320 --> 00:22:47,520
and we know their complexity

617
00:22:45,679 --> 00:22:49,120
how they behave they've been a lot

618
00:22:47,520 --> 00:22:50,799
there's been a lot of work on small

619
00:22:49,120 --> 00:22:52,840
characteristics especially

620
00:22:50,799 --> 00:22:55,200
in the recent years with the whole

621
00:22:52,840 --> 00:22:56,879
quasi-polynomial time algorithms

622
00:22:55,200 --> 00:22:59,200
but specifically at this boundary case

623
00:22:56,880 --> 00:23:01,200
there's a lot of algorithms that coexist

624
00:22:59,200 --> 00:23:03,039
and we were interested in studying their

625
00:23:01,200 --> 00:23:05,440
complexities precisely there to see

626
00:23:03,039 --> 00:23:06,960
which one performs best

627
00:23:05,440 --> 00:23:09,200
and the other reason why we focus on

628
00:23:06,960 --> 00:23:10,640
this area is because this is the area

629
00:23:09,200 --> 00:23:14,720
where pairings takes their values

630
00:23:10,640 --> 00:23:16,559
and so this was our motivation

631
00:23:14,720 --> 00:23:18,080
so the main results of our paper

632
00:23:16,559 --> 00:23:20,158
obviously all the details are on the in

633
00:23:18,080 --> 00:23:23,199
the longer talk or in the actual paper

634
00:23:20,159 --> 00:23:24,880
are a thorough analysis of the behaviors

635
00:23:23,200 --> 00:23:25,840
of many algorithms which i haven't even

636
00:23:24,880 --> 00:23:27,919
mentioned yet

637
00:23:25,840 --> 00:23:29,439
in this specific uh boundary case at the

638
00:23:27,919 --> 00:23:31,440
specific band area case

639
00:23:29,440 --> 00:23:33,360
and this uh analysis allows us to

640
00:23:31,440 --> 00:23:35,280
estimate the security of pairing based

641
00:23:33,360 --> 00:23:36,559
protocols

642
00:23:35,280 --> 00:23:39,120
so in the end this is kind of the

643
00:23:36,559 --> 00:23:39,440
summary of uh our results for the first

644
00:23:39,120 --> 00:23:42,080
uh

645
00:23:39,440 --> 00:23:43,039
question so um the algorithms that we

646
00:23:42,080 --> 00:23:44,879
study are

647
00:23:43,039 --> 00:23:46,400
the number field sieve which was

648
00:23:44,880 --> 00:23:48,559
mentioned in the previous talk

649
00:23:46,400 --> 00:23:50,080
and all of its variants so there's a lot

650
00:23:48,559 --> 00:23:50,879
of variant that has been developed in

651
00:23:50,080 --> 00:23:54,158
the past

652
00:23:50,880 --> 00:23:55,679
years i mean some quite uh older uh we

653
00:23:54,159 --> 00:23:57,279
have the multiple number field sieve the

654
00:23:55,679 --> 00:23:58,960
tower number fill civ

655
00:23:57,279 --> 00:24:00,480
the special number fill sieve and then

656
00:23:58,960 --> 00:24:02,400
if you look at the

657
00:24:00,480 --> 00:24:04,400
plot there's some letters that come

658
00:24:02,400 --> 00:24:06,240
after the name of the algorithm this is

659
00:24:04,400 --> 00:24:07,760
the polynomial selection that is used to

660
00:24:06,240 --> 00:24:09,360
select the two polynomials at the

661
00:24:07,760 --> 00:24:12,640
beginning of the algorithm and

662
00:24:09,360 --> 00:24:15,360
this influences the complexity so

663
00:24:12,640 --> 00:24:16,480
there was a lot of um studying to do

664
00:24:15,360 --> 00:24:18,000
here and this

665
00:24:16,480 --> 00:24:19,760
are the resulting complexities that we

666
00:24:18,000 --> 00:24:21,200
have

667
00:24:19,760 --> 00:24:23,120
so there were some surprising fact that

668
00:24:21,200 --> 00:24:24,799
we noticed for example the special power

669
00:24:23,120 --> 00:24:25,600
number failsif so for combining two

670
00:24:24,799 --> 00:24:27,679
variants

671
00:24:25,600 --> 00:24:29,520
was not an algorithm that is applicable

672
00:24:27,679 --> 00:24:31,200
in this specific case because uh the

673
00:24:29,520 --> 00:24:32,158
complexity was much higher than any

674
00:24:31,200 --> 00:24:35,919
other

675
00:24:32,159 --> 00:24:37,200
algorithm so in the end we had um

676
00:24:35,919 --> 00:24:39,200
kind of an overview of what happens at

677
00:24:37,200 --> 00:24:40,559
this boundary case so we have the

678
00:24:39,200 --> 00:24:42,640
function field sieve which is another

679
00:24:40,559 --> 00:24:44,158
algorithm similar to nfs except for

680
00:24:42,640 --> 00:24:44,799
using function fields instead of number

681
00:24:44,159 --> 00:24:47,440
fields

682
00:24:44,799 --> 00:24:49,039
which is still the best algorithm for um

683
00:24:47,440 --> 00:24:49,520
in the left area and for kind of for

684
00:24:49,039 --> 00:24:52,640
small

685
00:24:49,520 --> 00:24:54,000
small cps and then at some point we have

686
00:24:52,640 --> 00:24:55,440
crossover points which we define

687
00:24:54,000 --> 00:24:57,279
precisely in the paper

688
00:24:55,440 --> 00:24:58,480
and all the variants of nfs depending on

689
00:24:57,279 --> 00:25:01,200
the considerations you're

690
00:24:58,480 --> 00:25:02,000
making on p and n uh that kind of fight

691
00:25:01,200 --> 00:25:04,640
to be the best

692
00:25:02,000 --> 00:25:06,000
um at this boundary case and if we fall

693
00:25:04,640 --> 00:25:09,039
into small and medium characteristic

694
00:25:06,000 --> 00:25:10,640
then these were unknown results

695
00:25:09,039 --> 00:25:12,559
so in the end after we've done all this

696
00:25:10,640 --> 00:25:13,919
analysis we were actually aiming to

697
00:25:12,559 --> 00:25:15,279
answer the following questions so

698
00:25:13,919 --> 00:25:16,960
asymptotically

699
00:25:15,279 --> 00:25:18,400
what finite field fbn should be

700
00:25:16,960 --> 00:25:19,600
considered if we want to achieve the

701
00:25:18,400 --> 00:25:20,880
highest level of security when

702
00:25:19,600 --> 00:25:22,399
constructing a pairing

703
00:25:20,880 --> 00:25:24,320
so basically we want to be able to say

704
00:25:22,400 --> 00:25:26,320
okay if you take this p and this n

705
00:25:24,320 --> 00:25:27,439
then um you're achieving the highest

706
00:25:26,320 --> 00:25:29,200
level of security

707
00:25:27,440 --> 00:25:30,799
and we did that by equating the

708
00:25:29,200 --> 00:25:32,159
complexity on both sides we wanted the

709
00:25:30,799 --> 00:25:33,600
discrete lower than problem to be as

710
00:25:32,159 --> 00:25:34,320
hard on the elliptic curve side and on

711
00:25:33,600 --> 00:25:36,879
the discrete

712
00:25:34,320 --> 00:25:37,840
log um sorry the finite field side and

713
00:25:36,880 --> 00:25:42,080
so

714
00:25:37,840 --> 00:25:43,760
we were able to um once we've uh

715
00:25:42,080 --> 00:25:45,760
computed sorry all the complexities in

716
00:25:43,760 --> 00:25:47,520
the plot and the few slides uh

717
00:25:45,760 --> 00:25:48,879
above we were able to determine these

718
00:25:47,520 --> 00:25:51,679
intersection points and

719
00:25:48,880 --> 00:25:53,440
for again uh whether you're choosing a n

720
00:25:51,679 --> 00:25:56,080
prime and composite or a p

721
00:25:53,440 --> 00:25:57,440
of a special form etc define which were

722
00:25:56,080 --> 00:26:00,879
um

723
00:25:57,440 --> 00:26:03,120
the intersection points so the cp um

724
00:26:00,880 --> 00:26:04,720
and the l notation and the um

725
00:26:03,120 --> 00:26:07,678
corresponding complexity for

726
00:26:04,720 --> 00:26:08,960
the best optimal finite field and again

727
00:26:07,679 --> 00:26:10,080
there were some surprising fact that we

728
00:26:08,960 --> 00:26:11,919
noticed

729
00:26:10,080 --> 00:26:13,360
for example if we use a special form of

730
00:26:11,919 --> 00:26:14,960
p which allows us to use

731
00:26:13,360 --> 00:26:17,678
a special number field save algorithm

732
00:26:14,960 --> 00:26:19,360
then we're not always necessarily

733
00:26:17,679 --> 00:26:22,159
making the pairing less secure which was

734
00:26:19,360 --> 00:26:23,840
a surprising fact that we noticed

735
00:26:22,159 --> 00:26:26,880
all the details are in the paper and

736
00:26:23,840 --> 00:26:26,879
thanks for listening

737
00:26:31,120 --> 00:26:36,799
um thanks so uh questions uh not yet on

738
00:26:34,480 --> 00:26:39,520
the chat but i have one

739
00:26:36,799 --> 00:26:41,120
so um the parrot selection is right at

740
00:26:39,520 --> 00:26:43,520
the boundary between small

741
00:26:41,120 --> 00:26:45,120
and medium does it make you nervous or

742
00:26:43,520 --> 00:26:47,200
should we be nervous about this being

743
00:26:45,120 --> 00:26:49,678
right at this boundary

744
00:26:47,200 --> 00:26:51,600
uh nervous in the sense that some ideas

745
00:26:49,679 --> 00:26:52,000
from the small characteristic could be

746
00:26:51,600 --> 00:26:53,918
applied

747
00:26:52,000 --> 00:26:55,279
to improve algorithms yeah that's uh

748
00:26:53,919 --> 00:26:57,520
that's one thing that we uh

749
00:26:55,279 --> 00:26:58,720
we hoped for and i i don't think nervous

750
00:26:57,520 --> 00:27:02,158
uh exciting

751
00:26:58,720 --> 00:27:03,440
it's uh um but yeah i mean it's it's

752
00:27:02,159 --> 00:27:04,320
right at this boundary point where we

753
00:27:03,440 --> 00:27:06,159
have very different

754
00:27:04,320 --> 00:27:07,918
i mean idea algorithms that share some

755
00:27:06,159 --> 00:27:09,120
similar ideas but use some different

756
00:27:07,919 --> 00:27:12,159
techniques so

757
00:27:09,120 --> 00:27:12,799
um yeah no i think it's uh it's it's

758
00:27:12,159 --> 00:27:14,400
interesting

759
00:27:12,799 --> 00:27:16,639
whether to understand whether some of

760
00:27:14,400 --> 00:27:18,320
the quasi-polynomial stuff can be used

761
00:27:16,640 --> 00:27:21,600
at this boundary point but so far we

762
00:27:18,320 --> 00:27:23,200
haven't um they they kind of blow at the

763
00:27:21,600 --> 00:27:23,840
boundary point they're not the optimal

764
00:27:23,200 --> 00:27:27,279
algorithms

765
00:27:23,840 --> 00:27:29,039
in this precise area okay sorry i forgot

766
00:27:27,279 --> 00:27:30,880
i was in the crypt analyze this uh

767
00:27:29,039 --> 00:27:33,760
session so we're excited about uh

768
00:27:30,880 --> 00:27:35,760
breaking stuff here yeah

769
00:27:33,760 --> 00:27:37,600
and then john asks if there's a lower

770
00:27:35,760 --> 00:27:38,960
upper bound for discrete log complexity

771
00:27:37,600 --> 00:27:42,639
as a function of p and n

772
00:27:38,960 --> 00:27:44,960
say when n is prime wait i i didn't

773
00:27:42,640 --> 00:27:46,720
hear the question a lower bound is there

774
00:27:44,960 --> 00:27:48,159
a lower or upper bound

775
00:27:46,720 --> 00:27:49,760
a simple i mean i'm looking for just a

776
00:27:48,159 --> 00:27:52,159
simple expression

777
00:27:49,760 --> 00:27:52,799
you know if you want to if you want to

778
00:27:52,159 --> 00:27:55,760
summarize

779
00:27:52,799 --> 00:27:55,760
what the results say

780
00:27:56,480 --> 00:28:00,399
uh if i want to summarize these would be

781
00:27:58,320 --> 00:28:02,000
upper bounds i think the values we give

782
00:28:00,399 --> 00:28:03,918
is for uh rho equals

783
00:28:02,000 --> 00:28:05,120
one when considering um elliptic curves

784
00:28:03,919 --> 00:28:06,480
so these would be upper bounds

785
00:28:05,120 --> 00:28:09,120
because then the complexity i mean i

786
00:28:06,480 --> 00:28:11,039
think i have an extra

787
00:28:09,120 --> 00:28:12,080
um the following slide i think may

788
00:28:11,039 --> 00:28:13,360
answer your question i'm not sure

789
00:28:12,080 --> 00:28:16,639
understood but

790
00:28:13,360 --> 00:28:19,678
um the complexities decrease

791
00:28:16,640 --> 00:28:21,840
when uh cp um

792
00:28:19,679 --> 00:28:23,440
increases so the values we give which

793
00:28:21,840 --> 00:28:25,039
are the intersection points would be uh

794
00:28:23,440 --> 00:28:26,399
upper bounds for uh

795
00:28:25,039 --> 00:28:28,320
for i mean i think i i think i was

796
00:28:26,399 --> 00:28:29,520
looking for i like i i didn't quite

797
00:28:28,320 --> 00:28:30,000
understand this graph because i was

798
00:28:29,520 --> 00:28:32,080
expecting

799
00:28:30,000 --> 00:28:33,840
some kind of a graph with like p on one

800
00:28:32,080 --> 00:28:35,520
axis and n on the other and then the

801
00:28:33,840 --> 00:28:37,360
complexity plotted as a function of p

802
00:28:35,520 --> 00:28:38,879
and n

803
00:28:37,360 --> 00:28:40,399
oh so the complexities of these

804
00:28:38,880 --> 00:28:41,919
algorithms are usually expressed with

805
00:28:40,399 --> 00:28:43,279
this l notation that i

806
00:28:41,919 --> 00:28:46,240
introduced in the very beginning where

807
00:28:43,279 --> 00:28:47,840
it's l but that only depended on p to

808
00:28:46,240 --> 00:28:49,919
the n it didn't affect didn't depend on

809
00:28:47,840 --> 00:28:51,678
p and n separately i thought

810
00:28:49,919 --> 00:28:53,360
yeah it depends on yeah a relation but

811
00:28:51,679 --> 00:28:55,919
you have a relation between p and n

812
00:28:53,360 --> 00:28:56,399
maybe another understanding quite well

813
00:28:55,919 --> 00:28:59,919
so

814
00:28:56,399 --> 00:29:02,639
go back to that slide uh

815
00:28:59,919 --> 00:29:05,039
sorry which one uh back at the beginning

816
00:29:02,640 --> 00:29:06,799
the one with the expression that you had

817
00:29:05,039 --> 00:29:08,559
yeah yeah that's one right so this only

818
00:29:06,799 --> 00:29:10,240
ha only depends on p to the n it doesn't

819
00:29:08,559 --> 00:29:13,279
depend on p and n separately

820
00:29:10,240 --> 00:29:15,120
so the point is that uh that c

821
00:29:13,279 --> 00:29:17,360
i guess depends on p and n separately

822
00:29:15,120 --> 00:29:17,360
right

823
00:29:18,159 --> 00:29:22,880
uh the com plex

824
00:29:21,200 --> 00:29:24,640
so no the complexity of your algorithm

825
00:29:22,880 --> 00:29:26,799
oh you mean on pnn

826
00:29:24,640 --> 00:29:28,320
so we're looking at i'm not sure i'm

827
00:29:26,799 --> 00:29:28,720
going to answer this quite correctly but

828
00:29:28,320 --> 00:29:30,240
uh

829
00:29:28,720 --> 00:29:32,080
my co-authors are also there if they

830
00:29:30,240 --> 00:29:33,760
want to add something um

831
00:29:32,080 --> 00:29:35,199
the complexities of these algorithms we

832
00:29:33,760 --> 00:29:37,520
looked at them exponent um

833
00:29:35,200 --> 00:29:38,720
asymptotically where p p and n kind of

834
00:29:37,520 --> 00:29:41,440
go to infinity

835
00:29:38,720 --> 00:29:41,919
uh following the relations that link

836
00:29:41,440 --> 00:29:44,559
them

837
00:29:41,919 --> 00:29:46,000
throughout this l notation so here we we

838
00:29:44,559 --> 00:29:48,720
look at the binary case where p

839
00:29:46,000 --> 00:29:50,320
equals l cube one third of cp which

840
00:29:48,720 --> 00:29:51,039
gives a family of finite fields and a

841
00:29:50,320 --> 00:29:53,678
link between

842
00:29:51,039 --> 00:29:55,919
n and p and when these uh tend to

843
00:29:53,679 --> 00:29:57,200
infinity then uh

844
00:29:55,919 --> 00:29:59,840
asymptotically we look at these

845
00:29:57,200 --> 00:29:59,840
complexities

846
00:30:00,559 --> 00:30:02,879
okay

847
00:30:04,559 --> 00:30:07,760
so there were more questions on the chat

848
00:30:06,720 --> 00:30:10,960
kevin asks

849
00:30:07,760 --> 00:30:11,600
how safe is it to extrapolate these into

850
00:30:10,960 --> 00:30:14,799
the future

851
00:30:11,600 --> 00:30:16,959
given that cpus are improving uh

852
00:30:14,799 --> 00:30:18,720
he wrote similar paper 25 years ago but

853
00:30:16,960 --> 00:30:22,799
his phone is now more powerful than the

854
00:30:18,720 --> 00:30:24,880
super computer he used back then

855
00:30:22,799 --> 00:30:27,520
so the question is how safe is it to

856
00:30:24,880 --> 00:30:30,080
extrapolate the

857
00:30:27,520 --> 00:30:34,158
these results yes into the future i gave

858
00:30:30,080 --> 00:30:34,158
them the advances in cpu architectures

859
00:30:34,840 --> 00:30:40,158
um

860
00:30:37,120 --> 00:30:41,678
uh so complementary to this work there

861
00:30:40,159 --> 00:30:43,919
are some papers that look at

862
00:30:41,679 --> 00:30:45,120
actual parameters um for pairing

863
00:30:43,919 --> 00:30:49,039
friendly curves

864
00:30:45,120 --> 00:30:50,479
and there's a mismatch between

865
00:30:49,039 --> 00:30:52,399
some of the results that are observed

866
00:30:50,480 --> 00:30:54,480
for lower um

867
00:30:52,399 --> 00:30:56,639
security levels and uh and

868
00:30:54,480 --> 00:31:00,480
asymptotically uh the behavior that

869
00:30:56,640 --> 00:31:00,480
is happening asymptotically so

870
00:31:00,559 --> 00:31:06,480
i i don't really know um

871
00:31:04,240 --> 00:31:07,600
if these results i mean i think there's

872
00:31:06,480 --> 00:31:10,159
a need for more

873
00:31:07,600 --> 00:31:12,000
uh analysis for these algorithms

874
00:31:10,159 --> 00:31:12,880
especially with growing uh finite field

875
00:31:12,000 --> 00:31:15,360
sizes

876
00:31:12,880 --> 00:31:18,240
um and also other algorithms so we just

877
00:31:15,360 --> 00:31:20,000
have an implementation of nfs and

878
00:31:18,240 --> 00:31:21,679
we could have an implementation of some

879
00:31:20,000 --> 00:31:23,039
of the variants of these algorithms to

880
00:31:21,679 --> 00:31:25,760
see how they behave uh

881
00:31:23,039 --> 00:31:25,760
in practice

882
00:31:26,799 --> 00:31:30,960
so probably we should go on to the next

883
00:31:29,200 --> 00:31:34,320
speaker i think at this point

884
00:31:30,960 --> 00:31:37,039
okay gabriele do check the zoom chat

885
00:31:34,320 --> 00:31:38,158
though because there's um there's more

886
00:31:37,039 --> 00:31:41,440
questions for you

887
00:31:38,159 --> 00:31:43,840
i will check it okay

888
00:31:41,440 --> 00:31:44,480
so the next talk uh is going to give me

889
00:31:43,840 --> 00:31:50,320
by

890
00:31:44,480 --> 00:31:50,320
uh i'm this so can you share your screen

891
00:31:56,240 --> 00:32:03,360
okay so this is presenting

892
00:32:00,720 --> 00:32:05,120
uh joint work with john sebastian cora

893
00:32:03,360 --> 00:32:06,799
on a polynomial time algorithm for

894
00:32:05,120 --> 00:32:09,120
solving the hidden substitution problem

895
00:32:06,799 --> 00:32:09,120
thank you

896
00:32:09,760 --> 00:32:13,120
okay hi everybody as you said my name is

897
00:32:12,480 --> 00:32:14,960
aneesa

898
00:32:13,120 --> 00:32:16,239
and i will present you our polynomial

899
00:32:14,960 --> 00:32:18,240
time algorithm

900
00:32:16,240 --> 00:32:20,480
for solving the hidden subsets and

901
00:32:18,240 --> 00:32:23,679
problem and this is the joint work with

902
00:32:20,480 --> 00:32:25,679
jean silverstein quran uh well we want

903
00:32:23,679 --> 00:32:29,440
to solve the hidden subset some problems

904
00:32:25,679 --> 00:32:32,000
so it's good to define the problem first

905
00:32:29,440 --> 00:32:32,640
in the hidden subset sum problem we

906
00:32:32,000 --> 00:32:36,159
consider

907
00:32:32,640 --> 00:32:38,640
an integer q and n

908
00:32:36,159 --> 00:32:40,559
random integers alpha 1 alpha n which

909
00:32:38,640 --> 00:32:43,600
are defined mod q

910
00:32:40,559 --> 00:32:44,320
in addition we consider n binary vectors

911
00:32:43,600 --> 00:32:47,360
x 1 x

912
00:32:44,320 --> 00:32:50,158
n of length m and

913
00:32:47,360 --> 00:32:52,158
a vector h which is a combination of

914
00:32:50,159 --> 00:32:55,279
these binary vectors with

915
00:32:52,159 --> 00:32:58,159
these weights of eyes mod q

916
00:32:55,279 --> 00:32:59,120
you can read the relation in this line

917
00:32:58,159 --> 00:33:02,320
then the problem

918
00:32:59,120 --> 00:33:03,518
is given the modulus q and the samples

919
00:33:02,320 --> 00:33:06,879
vector h

920
00:33:03,519 --> 00:33:10,399
to recover both the integers alpha i's

921
00:33:06,880 --> 00:33:12,720
and the binary vectors i's

922
00:33:10,399 --> 00:33:14,080
it's also convenient to write this

923
00:33:12,720 --> 00:33:16,799
relation using

924
00:33:14,080 --> 00:33:17,840
vectors and matrices like in the bottom

925
00:33:16,799 --> 00:33:20,799
of this light

926
00:33:17,840 --> 00:33:22,000
and then x is a binary matrix whose rows

927
00:33:20,799 --> 00:33:25,039
are the

928
00:33:22,000 --> 00:33:28,399
x size the binary vectors

929
00:33:25,039 --> 00:33:31,200
but why he didn't subset some problem

930
00:33:28,399 --> 00:33:33,678
well you can notice that actually each

931
00:33:31,200 --> 00:33:36,799
component of the sample's vector h

932
00:33:33,679 --> 00:33:40,480
is actually a subset sum respect to

933
00:33:36,799 --> 00:33:42,399
the weights alpha eyes and one in the

934
00:33:40,480 --> 00:33:44,320
classic subset some problem has to

935
00:33:42,399 --> 00:33:46,719
recover the

936
00:33:44,320 --> 00:33:47,439
only the binary coefficient but in this

937
00:33:46,720 --> 00:33:50,320
case

938
00:33:47,440 --> 00:33:51,279
the weights are hidden too and for this

939
00:33:50,320 --> 00:33:54,799
reason

940
00:33:51,279 --> 00:33:57,120
actually the classic attacks

941
00:33:54,799 --> 00:33:59,440
for the subset sum are not applicable in

942
00:33:57,120 --> 00:34:02,080
this case

943
00:33:59,440 --> 00:34:04,080
before showing your before speaking

944
00:34:02,080 --> 00:34:04,960
about the algorithm i just want to speak

945
00:34:04,080 --> 00:34:07,439
about briefly

946
00:34:04,960 --> 00:34:09,280
the history of this problem which was

947
00:34:07,440 --> 00:34:10,720
presented for the first time material

948
00:34:09,280 --> 00:34:13,359
group 98

949
00:34:10,719 --> 00:34:15,359
in the context of the generation of

950
00:34:13,359 --> 00:34:17,040
random dlp pairs

951
00:34:15,359 --> 00:34:19,199
the following year guinness there

952
00:34:17,040 --> 00:34:21,199
described a lattice-based algorithm for

953
00:34:19,199 --> 00:34:24,319
solving this problem

954
00:34:21,199 --> 00:34:27,359
uh well the fact is that despite for

955
00:34:24,320 --> 00:34:28,560
a small n this algorithm is quite

956
00:34:27,359 --> 00:34:30,399
efficient

957
00:34:28,560 --> 00:34:31,679
they at the time they were not capable

958
00:34:30,399 --> 00:34:35,440
to break the

959
00:34:31,679 --> 00:34:38,720
the problem for n greater than 90.

960
00:34:35,440 --> 00:34:40,399
so in our paper we analyzed we provide a

961
00:34:38,719 --> 00:34:41,759
detailed analysis of the ingredients to

962
00:34:40,399 --> 00:34:45,520
an algorithm

963
00:34:41,760 --> 00:34:47,520
explaining this practical behavior and

964
00:34:45,520 --> 00:34:49,918
we found the bottom neck of the

965
00:34:47,520 --> 00:34:52,239
algorithm and solved it

966
00:34:49,918 --> 00:34:54,319
providing a variant which works in

967
00:34:52,239 --> 00:34:57,200
polynomial time

968
00:34:54,320 --> 00:34:58,480
in this slide you can see a sketch of

969
00:34:57,200 --> 00:35:01,520
the structure

970
00:34:58,480 --> 00:35:04,240
of the inguinal stern attack

971
00:35:01,520 --> 00:35:06,240
remember that in as input we have h and

972
00:35:04,240 --> 00:35:09,118
q and we want to

973
00:35:06,240 --> 00:35:10,959
recover the binary matrix x and the

974
00:35:09,119 --> 00:35:13,280
vector of the weights alpha

975
00:35:10,960 --> 00:35:14,640
and at the top you have the relation

976
00:35:13,280 --> 00:35:17,760
holding

977
00:35:14,640 --> 00:35:18,560
the greens stern attack actually is

978
00:35:17,760 --> 00:35:22,000
divided

979
00:35:18,560 --> 00:35:24,078
into main steps and

980
00:35:22,000 --> 00:35:25,359
also our algorithm as the same over

981
00:35:24,079 --> 00:35:27,440
structure we decided

982
00:35:25,359 --> 00:35:28,400
to maintain destruction and i will

983
00:35:27,440 --> 00:35:32,000
explain you

984
00:35:28,400 --> 00:35:33,520
why in the next slide indeed analyzing

985
00:35:32,000 --> 00:35:36,079
the guinea stone attack

986
00:35:33,520 --> 00:35:37,520
we observed that actually the first step

987
00:35:36,079 --> 00:35:41,359
succeeds with good

988
00:35:37,520 --> 00:35:44,640
for probability in polynomial time

989
00:35:41,359 --> 00:35:47,839
when the modulus is large enough

990
00:35:44,640 --> 00:35:50,960
instead the second step is

991
00:35:47,839 --> 00:35:54,400
the bottleneck of their algorithm

992
00:35:50,960 --> 00:35:56,320
and the reason is that in

993
00:35:54,400 --> 00:35:58,480
this in the winston attack they use a

994
00:35:56,320 --> 00:36:01,280
lattice reduction algorithm

995
00:35:58,480 --> 00:36:02,240
to compute the binary vectors as short

996
00:36:01,280 --> 00:36:04,320
vectors

997
00:36:02,240 --> 00:36:06,799
but we observe that these are actually

998
00:36:04,320 --> 00:36:09,119
shortest vector of the algorithm

999
00:36:06,800 --> 00:36:10,400
and for this reason the asymptotic time

1000
00:36:09,119 --> 00:36:13,520
complexity

1001
00:36:10,400 --> 00:36:15,440
of the attack cannot cannot be

1002
00:36:13,520 --> 00:36:21,040
polynomial time

1003
00:36:15,440 --> 00:36:24,839
so in our paper we decided to

1004
00:36:21,040 --> 00:36:26,160
to have a new second step completely

1005
00:36:24,839 --> 00:36:29,200
different

1006
00:36:26,160 --> 00:36:29,598
using a different approach our second

1007
00:36:29,200 --> 00:36:33,279
step

1008
00:36:29,599 --> 00:36:34,240
is indeed an algorithm to recover binary

1009
00:36:33,280 --> 00:36:37,760
vectors using

1010
00:36:34,240 --> 00:36:40,078
a multivariate approach namely we are

1011
00:36:37,760 --> 00:36:41,200
we solve a multivariate quadratic

1012
00:36:40,079 --> 00:36:44,960
polynomial system

1013
00:36:41,200 --> 00:36:47,759
via linear algebra and

1014
00:36:44,960 --> 00:36:48,640
for these actually we require a number

1015
00:36:47,760 --> 00:36:52,079
of samples

1016
00:36:48,640 --> 00:36:55,118
m which is quadratic in n

1017
00:36:52,079 --> 00:36:56,240
and but in this way we obtain a

1018
00:36:55,119 --> 00:36:59,359
polynomial time

1019
00:36:56,240 --> 00:37:00,160
algorithm uh we needed to require more

1020
00:36:59,359 --> 00:37:03,759
samples

1021
00:37:00,160 --> 00:37:04,640
uh so we also had to improve the first

1022
00:37:03,760 --> 00:37:07,440
step

1023
00:37:04,640 --> 00:37:09,839
for generating fast more orthogonal

1024
00:37:07,440 --> 00:37:09,839
vectors

1025
00:37:10,079 --> 00:37:14,560
i just want to mention that actually in

1026
00:37:12,880 --> 00:37:17,040
we also consider the uh

1027
00:37:14,560 --> 00:37:18,078
the fun hidden subset some problem as in

1028
00:37:17,040 --> 00:37:21,119
the new stern

1029
00:37:18,079 --> 00:37:24,000
paper of 99 providing an analysis and

1030
00:37:21,119 --> 00:37:24,960
a variant also for this problem so

1031
00:37:24,000 --> 00:37:27,440
summarizing

1032
00:37:24,960 --> 00:37:29,359
in our paper we describe an algorithm

1033
00:37:27,440 --> 00:37:31,119
for solving the hidden subset sum

1034
00:37:29,359 --> 00:37:33,598
problem which works

1035
00:37:31,119 --> 00:37:35,520
in polynomial time with the same minimal

1036
00:37:33,599 --> 00:37:38,160
size of the modulus

1037
00:37:35,520 --> 00:37:40,240
but we need to require we require a

1038
00:37:38,160 --> 00:37:41,200
number of samples which is quadratic in

1039
00:37:40,240 --> 00:37:44,399
an instead of

1040
00:37:41,200 --> 00:37:47,520
linear and this was confirmed by

1041
00:37:44,400 --> 00:37:50,560
the practical experiments too so

1042
00:37:47,520 --> 00:37:53,200
the main questions left are

1043
00:37:50,560 --> 00:37:54,799
if we can reduce the minimal size of the

1044
00:37:53,200 --> 00:37:57,439
modulus log q

1045
00:37:54,800 --> 00:37:58,000
and if we can further reduce the number

1046
00:37:57,440 --> 00:38:01,280
of

1047
00:37:58,000 --> 00:38:04,160
samples indeed i mean would be nice to

1048
00:38:01,280 --> 00:38:06,720
have a polynomial time algorithm

1049
00:38:04,160 --> 00:38:08,160
requiring just a linear number of

1050
00:38:06,720 --> 00:38:11,598
samples

1051
00:38:08,160 --> 00:38:12,319
regarding this question i just want to

1052
00:38:11,599 --> 00:38:15,440
mention that

1053
00:38:12,320 --> 00:38:19,040
in the full version of the paper

1054
00:38:15,440 --> 00:38:19,680
we provide we describe two different

1055
00:38:19,040 --> 00:38:22,160
methods

1056
00:38:19,680 --> 00:38:23,680
to reduce to slightly reduce the number

1057
00:38:22,160 --> 00:38:26,720
of samples

1058
00:38:23,680 --> 00:38:28,879
but for both cases

1059
00:38:26,720 --> 00:38:30,000
uh we still need a quadratic number of

1060
00:38:28,880 --> 00:38:33,280
samples to achieve

1061
00:38:30,000 --> 00:38:35,280
a polynomial running time so that's it

1062
00:38:33,280 --> 00:38:39,200
thank you for your attention and if you

1063
00:38:35,280 --> 00:38:39,200
have questions i'll be happy to answer

1064
00:38:39,440 --> 00:38:46,160
great thank you i see one question

1065
00:38:42,560 --> 00:38:49,119
uh on the chat um

1066
00:38:46,160 --> 00:38:50,640
from alexei in your paper the eigenspace

1067
00:38:49,119 --> 00:38:52,160
exploration technique for pulling out

1068
00:38:50,640 --> 00:38:55,839
solutions from their span

1069
00:38:52,160 --> 00:38:55,839
looks generic have you seen it somewhere

1070
00:38:58,839 --> 00:39:02,170
before

1071
00:39:01,680 --> 00:39:05,339
uh

1072
00:39:02,170 --> 00:39:05,340
[Music]

1073
00:39:05,760 --> 00:39:12,800
well actually uh these

1074
00:39:08,800 --> 00:39:15,440
um using these techniques

1075
00:39:12,800 --> 00:39:16,400
for so using linear algebra techniques

1076
00:39:15,440 --> 00:39:18,560
in

1077
00:39:16,400 --> 00:39:19,839
uh for solving multivariate quadratic

1078
00:39:18,560 --> 00:39:23,680
system is something that

1079
00:39:19,839 --> 00:39:28,880
was already used there are other

1080
00:39:23,680 --> 00:39:32,879
uh works also from from the 80s i think

1081
00:39:28,880 --> 00:39:36,560
and this is a bit uh i mean

1082
00:39:32,880 --> 00:39:42,000
usually this everything this

1083
00:39:36,560 --> 00:39:45,680
to say this

1084
00:39:42,000 --> 00:39:48,960
uh the this system the motivate

1085
00:39:45,680 --> 00:39:52,319
this motivate uh system are

1086
00:39:48,960 --> 00:39:55,119
uses i use a different language

1087
00:39:52,320 --> 00:39:58,480
let's say and you can find something

1088
00:39:55,119 --> 00:40:01,599
similar in the group nervous language

1089
00:39:58,480 --> 00:40:04,640
but yeah so it but yes we

1090
00:40:01,599 --> 00:40:05,839
we had we used this we couldn't find

1091
00:40:04,640 --> 00:40:10,480
anything that

1092
00:40:05,839 --> 00:40:14,240
fitted as good as this

1093
00:40:10,480 --> 00:40:16,240
this technique uh and then another

1094
00:40:14,240 --> 00:40:19,040
i'm afraid way out of time sorry a

1095
00:40:16,240 --> 00:40:19,040
little bit okay

1096
00:40:19,680 --> 00:40:24,078
okay i'm just

1097
00:40:22,960 --> 00:40:26,400
conscious of the fact that there's

1098
00:40:24,079 --> 00:40:27,040
another session starting uh after this

1099
00:40:26,400 --> 00:40:30,480
one

1100
00:40:27,040 --> 00:40:34,000
um so i have it on good authority

1101
00:40:30,480 --> 00:40:39,440
uh that uh julian ross is here

1102
00:40:34,000 --> 00:40:42,240
can you who's giving the last talk

1103
00:40:39,440 --> 00:40:43,839
uh if that is correct could you please

1104
00:40:42,240 --> 00:40:46,879
share your screen

1105
00:40:43,839 --> 00:40:46,880
and that's your slides

1106
00:40:50,400 --> 00:40:54,800
um bother though is i've been giving the

1107
00:40:52,560 --> 00:40:54,799
talk

1108
00:40:57,839 --> 00:41:04,799
uh oh okay then uh my my good authority

1109
00:41:01,680 --> 00:41:05,919
wasn't uh wasn't correct uh but i said

1110
00:41:04,800 --> 00:41:21,839
can you

1111
00:41:05,920 --> 00:41:21,839
share your screen

1112
00:41:28,079 --> 00:41:30,400
hmm

1113
00:41:32,079 --> 00:41:36,240
okay i propose john you ask that uh

1114
00:41:35,280 --> 00:41:39,599
outstanding are you

1115
00:41:36,240 --> 00:41:42,479
eating me oh no now i hear you by the

1116
00:41:39,599 --> 00:41:42,480
side yeah okay

1117
00:41:47,599 --> 00:41:49,839
yep

1118
00:42:05,119 --> 00:42:10,960
i'm not sure if that's my connection but

1119
00:42:06,960 --> 00:42:10,960
i beg your your sound is very true

1120
00:42:12,900 --> 00:42:18,960
[Music]

1121
00:42:14,960 --> 00:42:18,960
sorry there is a little problem

1122
00:42:19,440 --> 00:42:25,119
do you hear me yeah we can hear you now

1123
00:42:22,000 --> 00:42:25,119
but we can't see your screen

1124
00:42:25,200 --> 00:42:32,799
okay i don't know why

1125
00:42:29,359 --> 00:42:34,980
oh it doesn't work anymore uh

1126
00:42:32,800 --> 00:42:38,070
sorry

1127
00:42:34,980 --> 00:42:38,070
[Music]

1128
00:42:38,240 --> 00:42:41,439
sorry uh i think i have to reload but it

1129
00:42:41,119 --> 00:42:45,839
will

1130
00:42:41,440 --> 00:42:45,839
take some few seconds

1131
00:42:56,839 --> 00:42:59,839
okay

1132
00:42:59,920 --> 00:43:04,720
so maybe uh if

1133
00:43:03,040 --> 00:43:06,240
if we're waiting we can we can go back

1134
00:43:04,720 --> 00:43:08,078
to the last talk and ask the remaining

1135
00:43:06,240 --> 00:43:12,319
question

1136
00:43:08,079 --> 00:43:16,079
yeah let's do that um so the question

1137
00:43:12,319 --> 00:43:17,680
uh was um suppose i want to use the hss

1138
00:43:16,079 --> 00:43:20,960
optimization to generate

1139
00:43:17,680 --> 00:43:22,799
many many pairs of the form x g to the x

1140
00:43:20,960 --> 00:43:27,839
uh how does your work affect uh how to

1141
00:43:22,800 --> 00:43:27,839
do that

1142
00:43:31,839 --> 00:43:35,920
i don't know if agnes is still on the

1143
00:43:34,560 --> 00:43:38,839
listening

1144
00:43:35,920 --> 00:43:41,839
yes sorry i was trying to answer a

1145
00:43:38,839 --> 00:43:41,839
question

1146
00:43:42,319 --> 00:43:45,759
are you speaking with me

1147
00:43:50,319 --> 00:43:54,960
yes the question john was asking the the

1148
00:43:53,200 --> 00:43:57,200
outstanding question why the

1149
00:43:54,960 --> 00:43:58,000
last speaker is fixing some technical

1150
00:43:57,200 --> 00:44:00,240
problem

1151
00:43:58,000 --> 00:44:01,680
oh sorry i i was trying to answer the

1152
00:44:00,240 --> 00:44:05,598
question in

1153
00:44:01,680 --> 00:44:09,118
the chat oh okay okay

1154
00:44:05,599 --> 00:44:12,400
this was the question you asked me yeah

1155
00:44:09,119 --> 00:44:13,359
sorry yes what i i was writing now

1156
00:44:12,400 --> 00:44:16,720
exactly now that

1157
00:44:13,359 --> 00:44:21,279
actually this our work

1158
00:44:16,720 --> 00:44:24,640
implies that one should not

1159
00:44:21,280 --> 00:44:28,640
generate many pairs using

1160
00:44:24,640 --> 00:44:31,759
that using that

1161
00:44:28,640 --> 00:44:33,359
optimization because as you reach a

1162
00:44:31,760 --> 00:44:36,240
quadratic

1163
00:44:33,359 --> 00:44:38,000
number of pairs it means that you reach

1164
00:44:36,240 --> 00:44:40,640
a quadratic number of samples and

1165
00:44:38,000 --> 00:44:42,240
uh sorry can i can i butt in because

1166
00:44:40,640 --> 00:44:43,040
they i just received a message from

1167
00:44:42,240 --> 00:44:44,319
balthazar yes

1168
00:44:43,040 --> 00:44:45,599
i'm from the internet is any of the

1169
00:44:44,319 --> 00:44:48,240
co-authors prepared to give his

1170
00:44:45,599 --> 00:44:48,240
presentation

1171
00:44:48,319 --> 00:44:52,640
well i'm on but i do not have the slides

1172
00:44:50,640 --> 00:44:53,200
so i'm asking him if he can send me the

1173
00:44:52,640 --> 00:44:57,359
slides

1174
00:44:53,200 --> 00:44:58,560
um okay agnes feel free to continue

1175
00:44:57,359 --> 00:45:00,078
answering the question sorry for

1176
00:44:58,560 --> 00:45:02,480
interrupting you

1177
00:45:00,079 --> 00:45:03,680
no that's it's fine now that was just

1178
00:45:02,480 --> 00:45:05,839
saying i don't know if i

1179
00:45:03,680 --> 00:45:06,879
could understood correctly the question

1180
00:45:05,839 --> 00:45:10,000
if you want to use the

1181
00:45:06,880 --> 00:45:12,720
this optimization to to generate

1182
00:45:10,000 --> 00:45:13,680
uh these pairs uh quadratic number of

1183
00:45:12,720 --> 00:45:16,799
samples when i

1184
00:45:13,680 --> 00:45:19,759
say these during the the presentation i

1185
00:45:16,800 --> 00:45:22,160
meant that as soon as you produce a

1186
00:45:19,760 --> 00:45:25,520
quadratic number of pairs

1187
00:45:22,160 --> 00:45:29,759
you you can be attacked by

1188
00:45:25,520 --> 00:45:29,759
our algorithm so

1189
00:45:30,880 --> 00:45:36,079
yes one should be careful to re

1190
00:45:36,240 --> 00:45:46,479
to re-use the same set

1191
00:45:40,319 --> 00:45:50,560
multiple times

1192
00:45:46,480 --> 00:45:53,200
okay julian any any update

1193
00:45:50,560 --> 00:45:54,560
um you know i can i still have not got

1194
00:45:53,200 --> 00:45:56,399
the slides so i guess

1195
00:45:54,560 --> 00:45:57,920
uh if there is a technical problem then

1196
00:45:56,400 --> 00:45:59,040
i can try to give the talk without the

1197
00:45:57,920 --> 00:46:01,359
slides

1198
00:45:59,040 --> 00:46:02,240
i mean yeah it might be safest for you

1199
00:46:01,359 --> 00:46:05,920
to

1200
00:46:02,240 --> 00:46:08,160
uh just restart it so um

1201
00:46:05,920 --> 00:46:09,520
so this this work is about a

1202
00:46:08,160 --> 00:46:11,440
classification of computational

1203
00:46:09,520 --> 00:46:14,960
assumptions in the algebraic group model

1204
00:46:11,440 --> 00:46:16,640
it's by tasa bauer cooksboro

1205
00:46:14,960 --> 00:46:18,880
going to give the freestyle a

1206
00:46:16,640 --> 00:46:21,520
presentation now thanks julian

1207
00:46:18,880 --> 00:46:22,000
yeah so sorry for the technical problems

1208
00:46:21,520 --> 00:46:25,520
um

1209
00:46:22,000 --> 00:46:28,160
so our talk or our paper is about

1210
00:46:25,520 --> 00:46:29,920
as you pointed out the classification

1211
00:46:28,160 --> 00:46:31,759
about computational assumptions in the

1212
00:46:29,920 --> 00:46:33,680
algebraic group model

1213
00:46:31,760 --> 00:46:35,119
so what do we mean by this so the

1214
00:46:33,680 --> 00:46:35,839
algebraic group model to give some

1215
00:46:35,119 --> 00:46:39,680
background

1216
00:46:35,839 --> 00:46:41,680
was a model that georg fuchsbauer

1217
00:46:39,680 --> 00:46:44,399
like kills and myself proposed in a

1218
00:46:41,680 --> 00:46:46,640
paper at crypto 2018

1219
00:46:44,400 --> 00:46:47,760
and it basically is a relaxation of the

1220
00:46:46,640 --> 00:46:49,440
generic group model

1221
00:46:47,760 --> 00:46:50,800
and it fits in between the generic root

1222
00:46:49,440 --> 00:46:55,119
model and the standard model

1223
00:46:50,800 --> 00:46:57,920
of computation and in this model

1224
00:46:55,119 --> 00:47:00,079
the adversary is limited in the sense

1225
00:46:57,920 --> 00:47:01,440
that it has to show how it computes new

1226
00:47:00,079 --> 00:47:04,560
group elements

1227
00:47:01,440 --> 00:47:06,960
but it is able to see the uh

1228
00:47:04,560 --> 00:47:08,400
actual representation of group elements

1229
00:47:06,960 --> 00:47:09,839
whereas in a generic group model

1230
00:47:08,400 --> 00:47:12,640
it does not get to see these group

1231
00:47:09,839 --> 00:47:15,040
elements now

1232
00:47:12,640 --> 00:47:16,560
um there are a lot of papers recently

1233
00:47:15,040 --> 00:47:19,920
that explored

1234
00:47:16,560 --> 00:47:21,920
new proofs and relations between

1235
00:47:19,920 --> 00:47:24,559
different assumptions in this model

1236
00:47:21,920 --> 00:47:26,640
for example you can show that the

1237
00:47:24,559 --> 00:47:28,640
computational diffie-hellman assumption

1238
00:47:26,640 --> 00:47:30,960
is tightly equivalent to the discrete

1239
00:47:28,640 --> 00:47:34,240
logarithm assumption in this model

1240
00:47:30,960 --> 00:47:36,319
you can also show that practical

1241
00:47:34,240 --> 00:47:37,118
signature schemes like the bls signature

1242
00:47:36,319 --> 00:47:39,440
scheme

1243
00:47:37,119 --> 00:47:41,280
have a tight reduction to the discrete

1244
00:47:39,440 --> 00:47:41,839
logarithm problem even though it is

1245
00:47:41,280 --> 00:47:43,839
known

1246
00:47:41,839 --> 00:47:45,359
that because this scheme is unique it

1247
00:47:43,839 --> 00:47:48,319
does not have a tight reduction if you

1248
00:47:45,359 --> 00:47:51,359
just assume the random oracle model

1249
00:47:48,319 --> 00:47:53,279
and so and in this paper we sort of ask

1250
00:47:51,359 --> 00:47:57,279
the question is it possible

1251
00:47:53,280 --> 00:48:00,400
to give a broad metatheorum

1252
00:47:57,280 --> 00:48:04,000
that lets us reduce a certain

1253
00:48:00,400 --> 00:48:05,200
type of assumption to another general

1254
00:48:04,000 --> 00:48:08,960
type of assumption

1255
00:48:05,200 --> 00:48:11,118
okay and let me make a bit more clear

1256
00:48:08,960 --> 00:48:13,920
what i mean by this

1257
00:48:11,119 --> 00:48:15,119
so basically in our paper we give

1258
00:48:13,920 --> 00:48:18,240
general theorems

1259
00:48:15,119 --> 00:48:20,480
for computational number theoretical

1260
00:48:18,240 --> 00:48:21,040
assumptions over groups let's say they

1261
00:48:20,480 --> 00:48:23,680
are

1262
00:48:21,040 --> 00:48:24,880
prime order we also consider pairing

1263
00:48:23,680 --> 00:48:27,598
groups

1264
00:48:24,880 --> 00:48:28,000
and we make theorems of the following

1265
00:48:27,599 --> 00:48:31,359
form

1266
00:48:28,000 --> 00:48:34,160
so we say that if some condition

1267
00:48:31,359 --> 00:48:35,598
in the exponent of the generator holds

1268
00:48:34,160 --> 00:48:37,279
so if the polynomial

1269
00:48:35,599 --> 00:48:38,559
which you have to compute as part of

1270
00:48:37,280 --> 00:48:40,319
solving this number of theoretical

1271
00:48:38,559 --> 00:48:42,160
assumption

1272
00:48:40,319 --> 00:48:43,599
if it satisfies a certain condition on

1273
00:48:42,160 --> 00:48:45,598
the degree

1274
00:48:43,599 --> 00:48:46,640
then we provide a generic and tight

1275
00:48:45,599 --> 00:48:50,079
reduction

1276
00:48:46,640 --> 00:48:52,319
from the uh associated

1277
00:48:50,079 --> 00:48:53,760
discrete logarithm problem where the

1278
00:48:52,319 --> 00:48:56,960
adversary gets to see

1279
00:48:53,760 --> 00:48:59,839
all of the degrees in x so i

1280
00:48:56,960 --> 00:49:01,359
would get to see if the degree of this

1281
00:48:59,839 --> 00:49:01,680
specific number theoretic problem would

1282
00:49:01,359 --> 00:49:04,880
be

1283
00:49:01,680 --> 00:49:07,040
q then the adversary in this

1284
00:49:04,880 --> 00:49:08,160
in this q d log assumption would get to

1285
00:49:07,040 --> 00:49:10,480
c

1286
00:49:08,160 --> 00:49:11,359
g to the x up to g to the x to the power

1287
00:49:10,480 --> 00:49:12,800
of q

1288
00:49:11,359 --> 00:49:14,839
and so now we show this generic

1289
00:49:12,800 --> 00:49:17,040
reduction in our in our

1290
00:49:14,839 --> 00:49:18,000
paper for many different types of

1291
00:49:17,040 --> 00:49:21,599
assumptions

1292
00:49:18,000 --> 00:49:24,559
and we also provide a separation result

1293
00:49:21,599 --> 00:49:26,240
and the separation result shows that you

1294
00:49:24,559 --> 00:49:29,280
can actually not only

1295
00:49:26,240 --> 00:49:30,479
classify these group assumptions but you

1296
00:49:29,280 --> 00:49:33,280
can also separate

1297
00:49:30,480 --> 00:49:35,040
different classes so one class is

1298
00:49:33,280 --> 00:49:37,920
strictly stronger than the other

1299
00:49:35,040 --> 00:49:39,200
with respect to algebraic reductions and

1300
00:49:37,920 --> 00:49:42,319
this is sort of the second part

1301
00:49:39,200 --> 00:49:44,319
of our paper um

1302
00:49:42,319 --> 00:49:46,079
yeah i think puzzle has now just put up

1303
00:49:44,319 --> 00:49:47,359
the slides so this is like the second

1304
00:49:46,079 --> 00:49:50,160
part so we show that

1305
00:49:47,359 --> 00:49:52,319
the q plus one d log assumption is a

1306
00:49:50,160 --> 00:49:54,240
strictly easier assumption than the q

1307
00:49:52,319 --> 00:49:56,319
d log assumption and that means that all

1308
00:49:54,240 --> 00:49:58,720
of the number of theoretical assumptions

1309
00:49:56,319 --> 00:49:59,440
that can be implied by the qd log

1310
00:49:58,720 --> 00:50:01,919
assumption

1311
00:49:59,440 --> 00:50:03,359
are strictly easier as strictly stronger

1312
00:50:01,920 --> 00:50:05,440
than the ones that we

1313
00:50:03,359 --> 00:50:06,799
can imply by the q plus one d log

1314
00:50:05,440 --> 00:50:08,800
assumption

1315
00:50:06,800 --> 00:50:10,480
and then we also have another theorem

1316
00:50:08,800 --> 00:50:12,240
that shows that there are some

1317
00:50:10,480 --> 00:50:13,760
assumptions which we cannot capture in

1318
00:50:12,240 --> 00:50:16,078
the framework such as the

1319
00:50:13,760 --> 00:50:17,520
one more discrete logarithm assumption

1320
00:50:16,079 --> 00:50:19,119
and that basically sums up

1321
00:50:17,520 --> 00:50:20,640
the results of my talk i'm sorry that

1322
00:50:19,119 --> 00:50:22,319
there were these technical

1323
00:50:20,640 --> 00:50:25,839
difficulties but please do check out our

1324
00:50:22,319 --> 00:50:29,839
paper it is on eprint

1325
00:50:25,839 --> 00:50:29,839
uh yeah thank you for your attention

1326
00:50:30,640 --> 00:50:36,078
great thank you uh so i are if there are

1327
00:50:33,839 --> 00:50:41,839
any questions

1328
00:50:36,079 --> 00:50:41,839
i don't currently see any

1329
00:50:43,040 --> 00:50:47,440
well john you asked a question in the

1330
00:50:45,119 --> 00:50:47,440
chat

1331
00:50:47,520 --> 00:50:50,559
yeah i wanted to know if you can share

1332
00:50:48,720 --> 00:50:52,399
your slides

1333
00:50:50,559 --> 00:50:54,079
oh yeah sure we can we can i'm kidding

1334
00:50:52,400 --> 00:50:55,680
i'm kidding actually

1335
00:50:54,079 --> 00:50:57,040
okay you know the yeah actually if you

1336
00:50:55,680 --> 00:50:58,960
want if you want them to be here in the

1337
00:50:57,040 --> 00:51:00,160
permanent uh video archive you can go

1338
00:50:58,960 --> 00:51:02,960
through them more slowly so at least

1339
00:51:00,160 --> 00:51:05,200
they'll be there in the background

1340
00:51:02,960 --> 00:51:06,400
i i still don't have the slides so i

1341
00:51:05,200 --> 00:51:09,839
know but officer

1342
00:51:06,400 --> 00:51:11,680
can do it yeah i'll just make a comment

1343
00:51:09,839 --> 00:51:13,520
to all speakers that if you upload your

1344
00:51:11,680 --> 00:51:13,919
slides to the link that was provided i

1345
00:51:13,520 --> 00:51:15,920
will

1346
00:51:13,920 --> 00:51:17,839
link them from the program after the

1347
00:51:15,920 --> 00:51:20,400
conference

1348
00:51:17,839 --> 00:51:22,000
okay let's let's do it like that

1349
00:51:20,400 --> 00:51:24,000
actually i was going to ask kevin the

1350
00:51:22,000 --> 00:51:25,119
the previous ones none of them are going

1351
00:51:24,000 --> 00:51:26,480
to be available until after the

1352
00:51:25,119 --> 00:51:28,559
conference

1353
00:51:26,480 --> 00:51:30,319
i haven't collected them i'm afraid i

1354
00:51:28,559 --> 00:51:34,000
had too many other things to do

1355
00:51:30,319 --> 00:51:34,000
okay no it's fine sorry

1356
00:51:34,319 --> 00:51:40,800
maybe on that note we uh should all

1357
00:51:37,359 --> 00:51:42,319
thank all speakers uh of this uh session

1358
00:51:40,800 --> 00:51:44,480
uh because we're a little bit over time

1359
00:51:42,319 --> 00:51:46,319
already um let's try this thing where we

1360
00:51:44,480 --> 00:51:48,319
are mute ourselves and give a round of

1361
00:51:46,319 --> 00:51:51,839
applause and see kind of how that kind

1362
00:51:48,319 --> 00:51:51,839
of plays out

1363
00:51:58,240 --> 00:52:01,839
okay thanks everyone thank you everybody

1364
00:52:00,480 --> 00:52:05,839
thank you yeah

1365
00:52:01,839 --> 00:52:05,839
thank you thanks

