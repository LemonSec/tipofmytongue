1
00:00:01,360 --> 00:00:05,920
hello i'm peihan meow i'm gonna present

2
00:00:03,840 --> 00:00:06,640
private set intersection in the internet

3
00:00:05,920 --> 00:00:09,280
setting from

4
00:00:06,640 --> 00:00:12,080
lightweight oblivious prf it is joint

5
00:00:09,280 --> 00:00:15,120
work with melissa chase

6
00:00:12,080 --> 00:00:17,920
first what is private set intersection

7
00:00:15,120 --> 00:00:20,560
let's start with a simple example let's

8
00:00:17,920 --> 00:00:22,400
say alice and bob are two cryptographers

9
00:00:20,560 --> 00:00:24,400
they meet at a crypto conference for the

10
00:00:22,400 --> 00:00:26,320
first time and they want to figure out

11
00:00:24,400 --> 00:00:28,720
who are their common friends

12
00:00:26,320 --> 00:00:31,039
for example here is a list of alice's

13
00:00:28,720 --> 00:00:32,879
friends here is a list of bob's friends

14
00:00:31,039 --> 00:00:34,079
and they want to figure out who are in

15
00:00:32,880 --> 00:00:36,480
common

16
00:00:34,079 --> 00:00:38,239
what can they do well they can take on

17
00:00:36,480 --> 00:00:40,480
their phones and put them together to

18
00:00:38,239 --> 00:00:42,239
compare the contact lists

19
00:00:40,480 --> 00:00:44,000
from this they can easily tell for

20
00:00:42,239 --> 00:00:46,879
example melissa and i

21
00:00:44,000 --> 00:00:47,600
are their common friends and so on

22
00:00:46,879 --> 00:00:49,760
however

23
00:00:47,600 --> 00:00:51,440
if they take this approach then alice

24
00:00:49,760 --> 00:00:52,480
would have to reveal all her other

25
00:00:51,440 --> 00:00:55,280
friends to bob

26
00:00:52,480 --> 00:00:57,120
and vice versa as cryptographers they

27
00:00:55,280 --> 00:00:59,359
might not want to reveal such kind of

28
00:00:57,120 --> 00:01:01,519
information to each other

29
00:00:59,359 --> 00:01:03,039
what is even worse nowadays all the

30
00:01:01,520 --> 00:01:06,640
conferences are virtual

31
00:01:03,039 --> 00:01:08,799
so this is not even an option

32
00:01:06,640 --> 00:01:10,479
what they can do instead is to run a

33
00:01:08,799 --> 00:01:12,640
cryptographic protocol

34
00:01:10,479 --> 00:01:14,880
where they exchange encrypted messages

35
00:01:12,640 --> 00:01:16,960
and compute unencrypted messages

36
00:01:14,880 --> 00:01:18,720
and somehow by the end of the protocol

37
00:01:16,960 --> 00:01:21,520
they will learn their common friends

38
00:01:18,720 --> 00:01:23,679
but nothing more in particular alice

39
00:01:21,520 --> 00:01:24,320
would have no idea about bob's other

40
00:01:23,680 --> 00:01:27,680
friends

41
00:01:24,320 --> 00:01:29,360
and vice versa this is what we call

42
00:01:27,680 --> 00:01:32,720
private setting transaction

43
00:01:29,360 --> 00:01:35,600
or psi for short it is a special case of

44
00:01:32,720 --> 00:01:37,200
secure two-party computation although

45
00:01:35,600 --> 00:01:38,320
the functionality that they want to

46
00:01:37,200 --> 00:01:41,360
jointly compute

47
00:01:38,320 --> 00:01:43,119
is very simple psi has found a lot of

48
00:01:41,360 --> 00:01:45,680
applications in practice

49
00:01:43,119 --> 00:01:47,200
for example private contact discovery

50
00:01:45,680 --> 00:01:51,280
password breach alert

51
00:01:47,200 --> 00:01:53,439
ads conversion measurement and many more

52
00:01:51,280 --> 00:01:54,399
there has been a lot of work on psi in

53
00:01:53,439 --> 00:01:56,079
the literature

54
00:01:54,399 --> 00:01:58,079
in different scenarios and different

55
00:01:56,079 --> 00:02:00,000
settings but in this work

56
00:01:58,079 --> 00:02:01,119
we will focus on the semi-honest

57
00:02:00,000 --> 00:02:03,360
security model

58
00:02:01,119 --> 00:02:04,159
where both parties follow the protocol

59
00:02:03,360 --> 00:02:06,240
honestly

60
00:02:04,159 --> 00:02:07,200
but are curious about the other party's

61
00:02:06,240 --> 00:02:09,679
input

62
00:02:07,200 --> 00:02:11,680
and we assume the two sets have roughly

63
00:02:09,679 --> 00:02:13,840
the same size

64
00:02:11,680 --> 00:02:16,879
in this scenario which protocol should

65
00:02:13,840 --> 00:02:19,920
we adopt in practice

66
00:02:16,879 --> 00:02:21,679
well obviously the most efficient one

67
00:02:19,920 --> 00:02:23,839
but when we think about the concrete

68
00:02:21,680 --> 00:02:25,760
efficiency

69
00:02:23,840 --> 00:02:27,120
most of the time there is a trade-off

70
00:02:25,760 --> 00:02:30,239
between computation and

71
00:02:27,120 --> 00:02:31,920
communication if we draw a line between

72
00:02:30,239 --> 00:02:33,920
computational efficiency and

73
00:02:31,920 --> 00:02:36,399
communication efficiency

74
00:02:33,920 --> 00:02:37,679
there is actually one psi protocol at

75
00:02:36,400 --> 00:02:41,280
each end

76
00:02:37,680 --> 00:02:43,840
on the one hand in 2016 kolesnikov at

77
00:02:41,280 --> 00:02:46,160
all gave a psi protocol that is

78
00:02:43,840 --> 00:02:48,480
computationally very efficient

79
00:02:46,160 --> 00:02:49,680
but it required it requires a bit more

80
00:02:48,480 --> 00:02:52,319
communication

81
00:02:49,680 --> 00:02:54,160
so it is the best fit for networks with

82
00:02:52,319 --> 00:02:56,640
very high bandwidth

83
00:02:54,160 --> 00:02:57,519
on the other hand last year pincas at

84
00:02:56,640 --> 00:03:01,279
all gave

85
00:02:57,519 --> 00:03:03,920
another psi protocol called spotlight

86
00:03:01,280 --> 00:03:04,319
which achieves very low communication

87
00:03:03,920 --> 00:03:06,640
but

88
00:03:04,319 --> 00:03:07,839
requires a bit more expensive

89
00:03:06,640 --> 00:03:10,640
computation

90
00:03:07,840 --> 00:03:12,879
so it is the best fit for networks with

91
00:03:10,640 --> 00:03:15,279
very low bandwidth

92
00:03:12,879 --> 00:03:17,359
in the same work they proposed a new

93
00:03:15,280 --> 00:03:19,360
metric called monetary cost

94
00:03:17,360 --> 00:03:21,760
which takes both computation and

95
00:03:19,360 --> 00:03:25,440
communication into consideration

96
00:03:21,760 --> 00:03:29,280
and ask what is the most cost effective

97
00:03:25,440 --> 00:03:31,040
psi protocol in this work

98
00:03:29,280 --> 00:03:32,640
we ask the question whether we can

99
00:03:31,040 --> 00:03:33,760
achieve a better balance between

100
00:03:32,640 --> 00:03:36,480
computation and

101
00:03:33,760 --> 00:03:38,000
communication and here is what we

102
00:03:36,480 --> 00:03:41,359
achieved

103
00:03:38,000 --> 00:03:43,680
first we construct a new psi protocol

104
00:03:41,360 --> 00:03:45,360
that achieves a battery balance between

105
00:03:43,680 --> 00:03:47,840
computation communication

106
00:03:45,360 --> 00:03:48,560
so it is the best fit for the internet

107
00:03:47,840 --> 00:03:50,640
setting

108
00:03:48,560 --> 00:03:52,080
where the network bandwidth is not too

109
00:03:50,640 --> 00:03:54,958
high and not too low

110
00:03:52,080 --> 00:03:55,840
for example between 30 and 100 megabits

111
00:03:54,959 --> 00:03:58,480
per second

112
00:03:55,840 --> 00:03:59,280
our protocol is the most efficient and

113
00:03:58,480 --> 00:04:02,319
second

114
00:03:59,280 --> 00:04:04,319
our psi protocol is semi on insecure

115
00:04:02,319 --> 00:04:06,560
but we can actually prove it's

116
00:04:04,319 --> 00:04:09,599
maliciously secure against one party

117
00:04:06,560 --> 00:04:12,000
almost for free i will get back to this

118
00:04:09,599 --> 00:04:14,399
point later in this talk

119
00:04:12,000 --> 00:04:15,519
and finally because we can achieve a

120
00:04:14,400 --> 00:04:18,079
better balance

121
00:04:15,519 --> 00:04:20,320
between computation communication our

122
00:04:18,079 --> 00:04:22,560
protocol also achieves the lowest

123
00:04:20,320 --> 00:04:25,919
monetary cost compared to the existing

124
00:04:22,560 --> 00:04:29,040
works in a lot of real world scenarios

125
00:04:25,919 --> 00:04:31,520
so this is our result now let's move on

126
00:04:29,040 --> 00:04:34,560
to the more technical part

127
00:04:31,520 --> 00:04:37,359
our starting point is the kkrt psi

128
00:04:34,560 --> 00:04:39,199
which is computationally very efficient

129
00:04:37,360 --> 00:04:42,400
and their major building block

130
00:04:39,199 --> 00:04:45,280
is a primitive called single point oprf

131
00:04:42,400 --> 00:04:45,919
and they constructed a single point oprf

132
00:04:45,280 --> 00:04:47,919
from

133
00:04:45,919 --> 00:04:50,400
ot extension and symmetric key

134
00:04:47,919 --> 00:04:52,560
cryptographic operations only

135
00:04:50,400 --> 00:04:54,479
so overall it is computationally very

136
00:04:52,560 --> 00:04:56,960
efficient

137
00:04:54,479 --> 00:04:57,599
however to construct psi from single

138
00:04:56,960 --> 00:05:00,960
point

139
00:04:57,600 --> 00:05:02,800
oprf they need to use the data structure

140
00:05:00,960 --> 00:05:05,680
called cuckoo hashing

141
00:05:02,800 --> 00:05:06,639
and that's why they require a bit more

142
00:05:05,680 --> 00:05:10,160
communication

143
00:05:06,639 --> 00:05:12,800
i will explain that later

144
00:05:10,160 --> 00:05:14,960
in our work we construct psi from

145
00:05:12,800 --> 00:05:18,320
another primitive called multi-point

146
00:05:14,960 --> 00:05:19,520
oprf so that we can get rid of the

147
00:05:18,320 --> 00:05:22,800
cuckoo hashing

148
00:05:19,520 --> 00:05:24,799
and reduce the overall communication

149
00:05:22,800 --> 00:05:27,039
but we can also construct multi-point

150
00:05:24,800 --> 00:05:30,479
oprf from ot extension and

151
00:05:27,039 --> 00:05:32,560
symmetric equipped operations only so

152
00:05:30,479 --> 00:05:34,479
our protocol is still computationally

153
00:05:32,560 --> 00:05:37,360
very efficient

154
00:05:34,479 --> 00:05:38,320
as a side note the work of prty or

155
00:05:37,360 --> 00:05:41,360
spotlight

156
00:05:38,320 --> 00:05:43,599
also follows the same paradigm but they

157
00:05:41,360 --> 00:05:45,600
constructed multi-point oprf

158
00:05:43,600 --> 00:05:47,919
from ot extension and polynomial

159
00:05:45,600 --> 00:05:49,919
interpolation over a large field

160
00:05:47,919 --> 00:05:53,520
and that's why they are computationally

161
00:05:49,919 --> 00:05:55,280
much more expensive

162
00:05:53,520 --> 00:05:58,318
in the remaining of the talk i will

163
00:05:55,280 --> 00:06:01,359
first tell you what is single point oprf

164
00:05:58,319 --> 00:06:02,400
and how to construct psi from single

165
00:06:01,360 --> 00:06:05,520
point opr

166
00:06:02,400 --> 00:06:06,799
using kukuhashi and then what is

167
00:06:05,520 --> 00:06:08,479
multi-point oprf

168
00:06:06,800 --> 00:06:11,039
and how to construct psi from

169
00:06:08,479 --> 00:06:13,680
multi-point oprf

170
00:06:11,039 --> 00:06:14,240
next i will briefly talk about how to

171
00:06:13,680 --> 00:06:17,440
construct

172
00:06:14,240 --> 00:06:20,000
single point oprf from ot extension and

173
00:06:17,440 --> 00:06:20,880
symmetric key crypto operations and how

174
00:06:20,000 --> 00:06:26,160
to generalize

175
00:06:20,880 --> 00:06:26,159
these ideas to achieve multi-point oprf

176
00:06:26,479 --> 00:06:31,840
first what is single point oprf

177
00:06:29,520 --> 00:06:33,440
it is short for single point oblivious

178
00:06:31,840 --> 00:06:35,599
pseudorandom function

179
00:06:33,440 --> 00:06:36,560
which is a special case of a secure

180
00:06:35,600 --> 00:06:38,960
two-party

181
00:06:36,560 --> 00:06:40,560
computation protocol between alice and

182
00:06:38,960 --> 00:06:44,239
bob where alice has no

183
00:06:40,560 --> 00:06:46,000
input and bob has a single input y

184
00:06:44,240 --> 00:06:48,319
and from the secure two-party

185
00:06:46,000 --> 00:06:51,120
computation protocol

186
00:06:48,319 --> 00:06:52,240
alice will learn a prf key k and bob

187
00:06:51,120 --> 00:06:57,919
will learn

188
00:06:52,240 --> 00:06:59,680
the prf evaluated on his on his input y

189
00:06:57,919 --> 00:07:01,120
this is the functionality of single

190
00:06:59,680 --> 00:07:03,599
point oprf

191
00:07:01,120 --> 00:07:04,240
and given this primitive we can

192
00:07:03,599 --> 00:07:07,440
construct

193
00:07:04,240 --> 00:07:10,800
a single point psi where alice has

194
00:07:07,440 --> 00:07:12,080
a set of elements while bob has a single

195
00:07:10,800 --> 00:07:16,240
element y

196
00:07:12,080 --> 00:07:19,039
in his element in his set

197
00:07:16,240 --> 00:07:19,759
to achieve the single point psi the two

198
00:07:19,039 --> 00:07:22,400
parties

199
00:07:19,759 --> 00:07:24,960
first around the single point oprf and

200
00:07:22,400 --> 00:07:27,840
then alice will evaluate the prf

201
00:07:24,960 --> 00:07:30,239
on every element in her set and send all

202
00:07:27,840 --> 00:07:32,719
the prf values to bob

203
00:07:30,240 --> 00:07:33,599
by comparing these prf values with the

204
00:07:32,720 --> 00:07:36,639
prf value

205
00:07:33,599 --> 00:07:40,880
fk of y bob can easily tell

206
00:07:36,639 --> 00:07:40,880
whether y is in the set x or not

207
00:07:41,199 --> 00:07:46,720
but how can we achieve general psi

208
00:07:44,560 --> 00:07:49,199
a naive approach would be to run a

209
00:07:46,720 --> 00:07:50,720
single point psi for each element in

210
00:07:49,199 --> 00:07:52,639
both set

211
00:07:50,720 --> 00:07:55,120
but then both computation and

212
00:07:52,639 --> 00:07:58,319
communication have to grow quadratically

213
00:07:55,120 --> 00:08:01,919
in the number of elements

214
00:07:58,319 --> 00:08:03,759
what they did in kkrt instead is to

215
00:08:01,919 --> 00:08:05,840
use the data structure called google

216
00:08:03,759 --> 00:08:08,319
hashing and the high level idea is the

217
00:08:05,840 --> 00:08:08,318
following

218
00:08:08,479 --> 00:08:12,400
bob will construct a hash table that is

219
00:08:10,960 --> 00:08:16,159
slightly bigger than his

220
00:08:12,400 --> 00:08:18,560
set and then for each element in his set

221
00:08:16,160 --> 00:08:19,919
he will compute two public hash

222
00:08:18,560 --> 00:08:22,720
functions

223
00:08:19,919 --> 00:08:23,840
on the element to generate two random

224
00:08:22,720 --> 00:08:26,800
positions

225
00:08:23,840 --> 00:08:28,080
in this hash table for example y1 could

226
00:08:26,800 --> 00:08:31,360
be put into

227
00:08:28,080 --> 00:08:33,039
these two beings of the hash table y2

228
00:08:31,360 --> 00:08:36,640
can be put into these two

229
00:08:33,039 --> 00:08:39,039
bins of the hash table and so on

230
00:08:36,640 --> 00:08:40,559
and the data structure of the google

231
00:08:39,039 --> 00:08:43,760
hashing has the guarantee

232
00:08:40,559 --> 00:08:46,959
that every element can be put into

233
00:08:43,760 --> 00:08:47,360
one of the two bins and every bin has at

234
00:08:46,959 --> 00:08:51,040
most

235
00:08:47,360 --> 00:08:55,279
one element and then the two parties

236
00:08:51,040 --> 00:09:00,160
will run a bunch of single point oprf's

237
00:08:55,279 --> 00:09:00,160
one oprf per being of the hash table

238
00:09:00,480 --> 00:09:05,360
and then for each element in alice's set

239
00:09:03,279 --> 00:09:07,920
she will also compute the two

240
00:09:05,360 --> 00:09:08,720
public hash functions on this element to

241
00:09:07,920 --> 00:09:11,680
generate

242
00:09:08,720 --> 00:09:12,959
two beings of the hash table but she

243
00:09:11,680 --> 00:09:15,040
doesn't know

244
00:09:12,959 --> 00:09:17,279
which being bob could have potentially

245
00:09:15,040 --> 00:09:20,719
put this element into

246
00:09:17,279 --> 00:09:21,279
so she has to evaluate the prf on this

247
00:09:20,720 --> 00:09:25,200
element

248
00:09:21,279 --> 00:09:31,279
under both keys and send both prf values

249
00:09:25,200 --> 00:09:31,279
to bob and similarly for x2 and so on

250
00:09:31,440 --> 00:09:35,120
in fact alice has to send more prf

251
00:09:33,920 --> 00:09:37,760
values per element

252
00:09:35,120 --> 00:09:39,279
in her set because if you are familiar

253
00:09:37,760 --> 00:09:42,240
with cuckoo hashing

254
00:09:39,279 --> 00:09:42,560
there is actually an extra small stash

255
00:09:42,240 --> 00:09:44,959
that

256
00:09:42,560 --> 00:09:46,079
elements could have been potentially put

257
00:09:44,959 --> 00:09:48,640
into

258
00:09:46,080 --> 00:09:49,839
and so alice has to compute a prf on

259
00:09:48,640 --> 00:09:53,120
every element

260
00:09:49,839 --> 00:09:54,320
under each key in the stash

261
00:09:53,120 --> 00:09:56,160
but if you're not familiar with

262
00:09:54,320 --> 00:09:58,720
kukahashi that's fine

263
00:09:56,160 --> 00:10:01,199
uh forget what i said the key takeaway

264
00:09:58,720 --> 00:10:02,959
here is that alice has to send multiple

265
00:10:01,200 --> 00:10:05,920
prf values per element

266
00:10:02,959 --> 00:10:07,040
in her set and that's why it requires

267
00:10:05,920 --> 00:10:10,160
more communication

268
00:10:07,040 --> 00:10:12,560
especially from alice to bob

269
00:10:10,160 --> 00:10:13,680
and the fundamental issue is that they

270
00:10:12,560 --> 00:10:16,719
can only achieve

271
00:10:13,680 --> 00:10:19,839
single point oprf

272
00:10:16,720 --> 00:10:22,959
if they can achieve multi-point oprf

273
00:10:19,839 --> 00:10:25,920
where bob has multiple elements as input

274
00:10:22,959 --> 00:10:26,959
and as the output bob learns the prf

275
00:10:25,920 --> 00:10:30,719
evaluated

276
00:10:26,959 --> 00:10:33,119
on all the elements then we can achieve

277
00:10:30,720 --> 00:10:35,279
psi very easily

278
00:10:33,120 --> 00:10:37,200
whether two parties first around a

279
00:10:35,279 --> 00:10:40,240
multi-point oprf

280
00:10:37,200 --> 00:10:41,839
and then alice will evaluate the prf on

281
00:10:40,240 --> 00:10:44,720
every element in her set

282
00:10:41,839 --> 00:10:47,120
and send all the prf values to bob by

283
00:10:44,720 --> 00:10:48,720
comparing these prf values

284
00:10:47,120 --> 00:10:52,800
bob can easily figure out the

285
00:10:48,720 --> 00:10:52,800
intersection of the two sets

286
00:10:53,360 --> 00:10:56,880
so far we have seen how to construct psi

287
00:10:55,839 --> 00:10:59,920
from single point

288
00:10:56,880 --> 00:11:03,040
oprf using cuckoo hashing and how to

289
00:10:59,920 --> 00:11:06,240
construct psi from multipoint oprf

290
00:11:03,040 --> 00:11:08,240
to get rid of the kukuhashi so

291
00:11:06,240 --> 00:11:11,839
we can reduce the communication

292
00:11:08,240 --> 00:11:14,160
especially from alice to bob

293
00:11:11,839 --> 00:11:16,320
in the remaining of the talk i will

294
00:11:14,160 --> 00:11:18,640
first briefly talk about how to

295
00:11:16,320 --> 00:11:20,959
construct a single point oprf

296
00:11:18,640 --> 00:11:21,920
from ot extension and symmetric key

297
00:11:20,959 --> 00:11:24,399
cryptographic

298
00:11:21,920 --> 00:11:25,279
operations and how to generalize these

299
00:11:24,399 --> 00:11:28,720
ideas to

300
00:11:25,279 --> 00:11:31,920
multipoint oprf but before that

301
00:11:28,720 --> 00:11:34,959
a key primitive that we will use is

302
00:11:31,920 --> 00:11:35,360
oblivious transfer or ot for short which

303
00:11:34,959 --> 00:11:38,239
is

304
00:11:35,360 --> 00:11:39,279
again a special secured two-party

305
00:11:38,240 --> 00:11:41,680
computation

306
00:11:39,279 --> 00:11:42,320
protocol between two parties we call

307
00:11:41,680 --> 00:11:45,599
them

308
00:11:42,320 --> 00:11:49,360
sender and receiver where the sender has

309
00:11:45,600 --> 00:11:51,600
two arbitrary messages m0 m1 as input

310
00:11:49,360 --> 00:11:53,519
and the receiver has a single bit b as

311
00:11:51,600 --> 00:11:54,880
input

312
00:11:53,519 --> 00:11:57,440
and from the secure two-party

313
00:11:54,880 --> 00:11:58,000
computation protocol the receiver will

314
00:11:57,440 --> 00:12:00,240
learn

315
00:11:58,000 --> 00:12:01,600
one of the two messages depending on her

316
00:12:00,240 --> 00:12:04,320
choice bit b

317
00:12:01,600 --> 00:12:05,040
and the other message is hidden to her

318
00:12:04,320 --> 00:12:06,480
while the

319
00:12:05,040 --> 00:12:08,800
sender learns nothing about the

320
00:12:06,480 --> 00:12:11,360
receiver's choice bit

321
00:12:08,800 --> 00:12:13,519
this primitive oblivious transfer

322
00:12:11,360 --> 00:12:17,120
requires public key operations

323
00:12:13,519 --> 00:12:19,200
so it is computationally expensive

324
00:12:17,120 --> 00:12:20,160
but if we are doing a large number of

325
00:12:19,200 --> 00:12:22,480
ots

326
00:12:20,160 --> 00:12:24,880
then they can actually be done by a

327
00:12:22,480 --> 00:12:27,200
small number of public key operations

328
00:12:24,880 --> 00:12:28,639
or the lambda of them where lambda is a

329
00:12:27,200 --> 00:12:31,279
security parameter

330
00:12:28,639 --> 00:12:32,639
and all the remaining operations are

331
00:12:31,279 --> 00:12:36,240
symmetric key

332
00:12:32,639 --> 00:12:37,200
using the ot extension so the overall

333
00:12:36,240 --> 00:12:40,720
computation

334
00:12:37,200 --> 00:12:43,040
is still very efficient now let's see

335
00:12:40,720 --> 00:12:47,120
how to construct a single point oprf

336
00:12:43,040 --> 00:12:47,680
from ot first alice will generate a

337
00:12:47,120 --> 00:12:50,320
random

338
00:12:47,680 --> 00:12:52,239
lambda bit string s where lambda is some

339
00:12:50,320 --> 00:12:54,560
security parameter

340
00:12:52,240 --> 00:12:55,279
and bob will generate two lambda bit

341
00:12:54,560 --> 00:12:58,399
strings

342
00:12:55,279 --> 00:13:02,880
r0 and r1 where r0 is

343
00:12:58,399 --> 00:13:05,839
random and r1 is computed as follows

344
00:13:02,880 --> 00:13:06,320
on his input y he will first compute a

345
00:13:05,839 --> 00:13:09,360
function

346
00:13:06,320 --> 00:13:12,639
f on y to output

347
00:13:09,360 --> 00:13:14,399
which outputs a lambda bit string

348
00:13:12,639 --> 00:13:16,720
we want this function f to be

349
00:13:14,399 --> 00:13:19,519
pseudo-random and deterministic

350
00:13:16,720 --> 00:13:20,399
for example you can think of it as a prf

351
00:13:19,519 --> 00:13:24,639
with the

352
00:13:20,399 --> 00:13:28,000
prf key known to both parties

353
00:13:24,639 --> 00:13:30,240
so this f of x produces a pseudo-random

354
00:13:28,000 --> 00:13:33,600
lambda bit string

355
00:13:30,240 --> 00:13:38,079
and then r1 is computed as a bitwise

356
00:13:33,600 --> 00:13:38,079
xor of r0 and f of y

357
00:13:38,240 --> 00:13:44,720
then after this alice and bob will run

358
00:13:41,920 --> 00:13:46,639
will run lambda instances of ot where

359
00:13:44,720 --> 00:13:47,839
alice is the receiver and bob is the

360
00:13:46,639 --> 00:13:51,680
sender

361
00:13:47,839 --> 00:13:54,079
in particular the first ot has these two

362
00:13:51,680 --> 00:13:55,519
as the messages and this bit as the

363
00:13:54,079 --> 00:13:58,719
choice bit

364
00:13:55,519 --> 00:13:59,760
and the second ot has these two as the

365
00:13:58,720 --> 00:14:03,680
messages

366
00:13:59,760 --> 00:14:06,240
and this bit as the choice bit and so on

367
00:14:03,680 --> 00:14:08,079
by the end of the ot alice will learn a

368
00:14:06,240 --> 00:14:10,959
lambda bit string q

369
00:14:08,079 --> 00:14:13,199
and you can actually rewrite it as r

370
00:14:10,959 --> 00:14:16,399
zero x or with the

371
00:14:13,199 --> 00:14:19,599
bitwise end of s and f of y

372
00:14:16,399 --> 00:14:21,279
but this string q looks random to alice

373
00:14:19,600 --> 00:14:23,519
so it doesn't reveal any information

374
00:14:21,279 --> 00:14:26,160
about y

375
00:14:23,519 --> 00:14:28,880
and then we are done so what is the

376
00:14:26,160 --> 00:14:32,160
output of alice and bob

377
00:14:28,880 --> 00:14:35,279
the output of bob is the prf evaluated

378
00:14:32,160 --> 00:14:39,279
on y which is computed as h of

379
00:14:35,279 --> 00:14:42,399
r0 where h is a hash function

380
00:14:39,279 --> 00:14:45,519
on ls side the output of alice

381
00:14:42,399 --> 00:14:46,320
is the prf key k which consists of two

382
00:14:45,519 --> 00:14:49,440
bit strings

383
00:14:46,320 --> 00:14:52,959
s and q to evaluate the prf

384
00:14:49,440 --> 00:14:55,680
on the input x alice will first compute

385
00:14:52,959 --> 00:14:57,279
f of x which produces a pseudo-random

386
00:14:55,680 --> 00:15:00,000
bit string

387
00:14:57,279 --> 00:15:00,639
and then she will first take the bitwise

388
00:15:00,000 --> 00:15:03,839
end of

389
00:15:00,639 --> 00:15:07,440
s and f of x and then x word

390
00:15:03,839 --> 00:15:10,880
with q and finally compute a

391
00:15:07,440 --> 00:15:14,880
computer hash function on top of it

392
00:15:10,880 --> 00:15:19,600
and this can actually be rewritten as

393
00:15:14,880 --> 00:15:22,880
this formula which is a bit hard to

394
00:15:19,600 --> 00:15:26,079
process but the key takeaways here is

395
00:15:22,880 --> 00:15:29,519
the following first if x is equal to

396
00:15:26,079 --> 00:15:32,000
y then f of x is equal to f of y

397
00:15:29,519 --> 00:15:34,720
so this will be cancelled out and then

398
00:15:32,000 --> 00:15:38,480
the output will be equal to h of r0

399
00:15:34,720 --> 00:15:42,000
no matter what s is chosen

400
00:15:38,480 --> 00:15:45,199
on the other hand if x is not equal to y

401
00:15:42,000 --> 00:15:46,240
then a lot of the bits between f of x

402
00:15:45,199 --> 00:15:48,160
and f of y

403
00:15:46,240 --> 00:15:49,440
would be different so they cannot be

404
00:15:48,160 --> 00:15:52,480
cancelled out

405
00:15:49,440 --> 00:15:55,279
as a result the output of f k of

406
00:15:52,480 --> 00:15:56,240
x would be harder to guess for bob

407
00:15:55,279 --> 00:16:00,639
unless he can

408
00:15:56,240 --> 00:16:00,639
guess correctly for a lot of bits in s

409
00:16:01,040 --> 00:16:06,480
so these are the two takeaways

410
00:16:04,240 --> 00:16:09,839
and now we're going to generalize these

411
00:16:06,480 --> 00:16:13,279
two takeaways to multi-point oprf

412
00:16:09,839 --> 00:16:16,160
and here is the construction first

413
00:16:13,279 --> 00:16:18,480
alice will generate a lambda random bit

414
00:16:16,160 --> 00:16:18,480
string

415
00:16:18,639 --> 00:16:25,759
s and bob will generate two

416
00:16:22,320 --> 00:16:29,199
matrices r0 r1 each of dimension

417
00:16:25,759 --> 00:16:30,000
n times lambda where r0 is a random

418
00:16:29,199 --> 00:16:34,079
matrix

419
00:16:30,000 --> 00:16:34,079
and r1 is constructed as follows

420
00:16:34,480 --> 00:16:37,519
for each element in his set for example

421
00:16:36,720 --> 00:16:40,399
y1

422
00:16:37,519 --> 00:16:41,440
he will first compute f of y1 which

423
00:16:40,399 --> 00:16:43,839
outputs

424
00:16:41,440 --> 00:16:45,920
one position in each column of the

425
00:16:43,839 --> 00:16:47,519
matrix

426
00:16:45,920 --> 00:16:49,759
again we want this function to be

427
00:16:47,519 --> 00:16:53,440
pseudorandom and deterministic

428
00:16:49,759 --> 00:16:56,320
so f of y1 would output

429
00:16:53,440 --> 00:16:58,639
one random pseudorandom position in each

430
00:16:56,320 --> 00:17:02,000
column of the matrix

431
00:16:58,639 --> 00:17:06,000
and then bob will copy these bits

432
00:17:02,000 --> 00:17:08,480
in these positions from r1 to from r0 to

433
00:17:06,000 --> 00:17:12,240
r1

434
00:17:08,480 --> 00:17:13,280
and similarly for y2 he will compute f

435
00:17:12,240 --> 00:17:16,640
of y2

436
00:17:13,280 --> 00:17:19,760
which produces a pseudo-random position

437
00:17:16,640 --> 00:17:23,039
in each column of the matrix

438
00:17:19,760 --> 00:17:24,000
and then you will copy the bits in these

439
00:17:23,039 --> 00:17:27,199
positions

440
00:17:24,000 --> 00:17:29,120
from r0 to r1

441
00:17:27,199 --> 00:17:32,799
and similarly you will do this for every

442
00:17:29,120 --> 00:17:34,959
element in instead

443
00:17:32,799 --> 00:17:36,879
and then for the remaining empty

444
00:17:34,960 --> 00:17:39,679
positions

445
00:17:36,880 --> 00:17:40,000
he will flip the bits in these positions

446
00:17:39,679 --> 00:17:43,120
from

447
00:17:40,000 --> 00:17:46,720
r0 to r1

448
00:17:43,120 --> 00:17:49,760
okay and then after this

449
00:17:46,720 --> 00:17:51,440
alice and bob will again run lambda

450
00:17:49,760 --> 00:17:53,520
instances of ot

451
00:17:51,440 --> 00:17:54,640
well alice is the receiver and bob is

452
00:17:53,520 --> 00:17:58,160
the sender

453
00:17:54,640 --> 00:18:01,200
in particular the first ot has these two

454
00:17:58,160 --> 00:18:04,320
columns of the matrices as the

455
00:18:01,200 --> 00:18:07,039
messages and this bit as the choice bit

456
00:18:04,320 --> 00:18:08,000
the second ot has these two columns as

457
00:18:07,039 --> 00:18:12,080
the messages

458
00:18:08,000 --> 00:18:14,720
and this bit as the choice bit and so on

459
00:18:12,080 --> 00:18:16,399
by the end of the ot alice will learn

460
00:18:14,720 --> 00:18:20,080
one column

461
00:18:16,400 --> 00:18:22,160
of the matrix per ot to form a matrix of

462
00:18:20,080 --> 00:18:25,360
dimension n times lambda

463
00:18:22,160 --> 00:18:29,760
and this matrix would be her prf

464
00:18:25,360 --> 00:18:32,959
key k to evaluate the

465
00:18:29,760 --> 00:18:36,160
prf on input x she will first

466
00:18:32,960 --> 00:18:39,200
compute f of x to produce a random

467
00:18:36,160 --> 00:18:42,720
position in each column of the matrix

468
00:18:39,200 --> 00:18:46,000
and then she will take all these bits

469
00:18:42,720 --> 00:18:49,360
to compute a hash on top of it

470
00:18:46,000 --> 00:18:52,559
this will be the output of the prf

471
00:18:49,360 --> 00:18:56,000
and then on bob's side

472
00:18:52,559 --> 00:18:58,960
to compute the prf on y i he will also

473
00:18:56,000 --> 00:19:00,240
first compute f of y i to produce the

474
00:18:58,960 --> 00:19:03,440
pseudo-random position

475
00:19:00,240 --> 00:19:05,679
in each column of of the matrix

476
00:19:03,440 --> 00:19:07,679
and then take all these bits to compute

477
00:19:05,679 --> 00:19:11,039
a hash on top

478
00:19:07,679 --> 00:19:12,720
this will be the prf value for f k of y

479
00:19:11,039 --> 00:19:14,960
i

480
00:19:12,720 --> 00:19:16,880
if you think about it we actually have

481
00:19:14,960 --> 00:19:20,640
the same guarantees as before

482
00:19:16,880 --> 00:19:22,720
in particular if x is equal to some y i

483
00:19:20,640 --> 00:19:24,720
then we have the guarantee that all

484
00:19:22,720 --> 00:19:28,799
these bits in these positions

485
00:19:24,720 --> 00:19:31,440
would be the same for both r0 and r1

486
00:19:28,799 --> 00:19:32,320
so the output of fk of x will be equal

487
00:19:31,440 --> 00:19:35,760
to fk of

488
00:19:32,320 --> 00:19:38,799
y i no matter what s is chosen

489
00:19:35,760 --> 00:19:39,120
on the other hand if x is not in the set

490
00:19:38,799 --> 00:19:42,799
of

491
00:19:39,120 --> 00:19:43,840
y then among these bits there will be a

492
00:19:42,799 --> 00:19:47,440
lot of differences

493
00:19:43,840 --> 00:19:50,559
between r0 and r1 so it will be hard

494
00:19:47,440 --> 00:19:52,559
to guess fk of x for bob

495
00:19:50,559 --> 00:19:53,600
unless you can guess correctly a lot of

496
00:19:52,559 --> 00:19:58,399
bits

497
00:19:53,600 --> 00:19:58,399
in s and then we are done

498
00:19:58,720 --> 00:20:01,840
i want to briefly mention that we can

499
00:20:00,720 --> 00:20:04,799
actually improve

500
00:20:01,840 --> 00:20:05,600
security against the malicious alice

501
00:20:04,799 --> 00:20:08,400
because

502
00:20:05,600 --> 00:20:10,000
if you think about it what alice can

503
00:20:08,400 --> 00:20:12,240
learn from this ot

504
00:20:10,000 --> 00:20:14,000
is a matrix that is information

505
00:20:12,240 --> 00:20:16,159
theoretically random

506
00:20:14,000 --> 00:20:17,760
so she doesn't learn anything about

507
00:20:16,159 --> 00:20:20,559
bob's inputs

508
00:20:17,760 --> 00:20:21,919
and if we assume the hash function to be

509
00:20:20,559 --> 00:20:24,000
a random oracle

510
00:20:21,919 --> 00:20:26,240
then it will be easy to extract her

511
00:20:24,000 --> 00:20:29,520
inputs

512
00:20:26,240 --> 00:20:29,520
okay and then we're done

513
00:20:29,600 --> 00:20:33,520
to summarize we construct a new psi

514
00:20:32,559 --> 00:20:36,480
protocol

515
00:20:33,520 --> 00:20:37,440
from multi-point oprf to get rid of the

516
00:20:36,480 --> 00:20:39,760
usage of

517
00:20:37,440 --> 00:20:40,960
google hashing so we can reduce the

518
00:20:39,760 --> 00:20:44,640
communication from

519
00:20:40,960 --> 00:20:47,360
alice to bob but since we can

520
00:20:44,640 --> 00:20:48,000
construct a multi-point oprf from ot

521
00:20:47,360 --> 00:20:49,840
extension

522
00:20:48,000 --> 00:20:51,360
and symmetric key cryptographic

523
00:20:49,840 --> 00:20:56,158
operations only

524
00:20:51,360 --> 00:20:56,158
our computation is also very efficient

525
00:20:56,400 --> 00:21:00,000
finally to mention a couple of open

526
00:20:58,720 --> 00:21:02,880
problems

527
00:21:00,000 --> 00:21:05,039
so our psi protocol is somewhere between

528
00:21:02,880 --> 00:21:07,200
kkrt and prty

529
00:21:05,039 --> 00:21:09,440
so an interesting question would be can

530
00:21:07,200 --> 00:21:11,679
we achieve the best of both worlds

531
00:21:09,440 --> 00:21:14,880
can we achieve the best computation as

532
00:21:11,679 --> 00:21:17,039
well as the best communication

533
00:21:14,880 --> 00:21:18,960
and the second question is our protocol

534
00:21:17,039 --> 00:21:20,799
can achieve malicious security against

535
00:21:18,960 --> 00:21:22,960
alice almost for free

536
00:21:20,799 --> 00:21:24,400
can we achieve malicious security

537
00:21:22,960 --> 00:21:28,480
against bob

538
00:21:24,400 --> 00:21:32,559
without much loss in the efficiency

539
00:21:28,480 --> 00:21:32,559
and that's it thank you for watching

