1
00:00:00,719 --> 00:00:05,839
hello everyone in this talk

2
00:00:03,120 --> 00:00:06,798
i will present our work about functional

3
00:00:05,839 --> 00:00:08,880
encryption

4
00:00:06,799 --> 00:00:12,160
which allows the computation of

5
00:00:08,880 --> 00:00:13,920
so-called attribute-weighted sum

6
00:00:12,160 --> 00:00:17,920
this is a joint work with michel

7
00:00:13,920 --> 00:00:17,920
abdellah and hotekui

8
00:00:18,320 --> 00:00:23,920
let me first motivate the notion of

9
00:00:20,560 --> 00:00:23,919
attribute weighted sum

10
00:00:24,160 --> 00:00:28,400
consider a database with four fields or

11
00:00:27,039 --> 00:00:31,199
attributes

12
00:00:28,400 --> 00:00:32,960
each record in a database corresponds to

13
00:00:31,199 --> 00:00:35,920
a particular person

14
00:00:32,960 --> 00:00:37,360
it contains some demographic information

15
00:00:35,920 --> 00:00:40,960
such as gender

16
00:00:37,360 --> 00:00:43,280
age and whether he or she smokes

17
00:00:40,960 --> 00:00:44,000
it also contains some sensitive

18
00:00:43,280 --> 00:00:48,160
information

19
00:00:44,000 --> 00:00:51,360
of whether he or she got cancer

20
00:00:48,160 --> 00:00:53,279
with this toy database we may want to

21
00:00:51,360 --> 00:00:58,559
count the number of smokers

22
00:00:53,280 --> 00:01:01,600
who is older than age 40 and got cancer

23
00:00:58,559 --> 00:01:04,640
this can be presented in this form

24
00:01:01,600 --> 00:01:05,680
it is the sum of five quantities each

25
00:01:04,640 --> 00:01:07,680
cement

26
00:01:05,680 --> 00:01:09,119
corresponds to one record in the

27
00:01:07,680 --> 00:01:11,680
database

28
00:01:09,119 --> 00:01:12,640
it equals one if the corresponding

29
00:01:11,680 --> 00:01:15,840
record

30
00:01:12,640 --> 00:01:16,640
comes from a person with cancer who is a

31
00:01:15,840 --> 00:01:20,080
smoker and

32
00:01:16,640 --> 00:01:20,080
older than age 40.

33
00:01:20,159 --> 00:01:27,119
we can consider this as a weighted sum

34
00:01:23,200 --> 00:01:30,240
of values in the sensitive field cancer

35
00:01:27,119 --> 00:01:32,079
the weight for each cement is computed

36
00:01:30,240 --> 00:01:34,798
by evaluating the function

37
00:01:32,079 --> 00:01:35,839
f on the corresponding three public

38
00:01:34,799 --> 00:01:39,439
attributes

39
00:01:35,840 --> 00:01:44,240
gender smoker and age

40
00:01:39,439 --> 00:01:44,240
so we call this attribute weighted sum

41
00:01:45,280 --> 00:01:49,600
if we use x i and zi to represent the

42
00:01:48,799 --> 00:01:52,840
public

43
00:01:49,600 --> 00:01:54,158
and the sensitive values in the i record

44
00:01:52,840 --> 00:01:56,000
respectively

45
00:01:54,159 --> 00:01:58,960
we can write the function in this

46
00:01:56,000 --> 00:02:01,200
compact form

47
00:01:58,960 --> 00:02:03,039
to allow a party to compute the

48
00:02:01,200 --> 00:02:06,960
attribute weighted sum

49
00:02:03,040 --> 00:02:09,520
without leaking the sensitive data zi

50
00:02:06,960 --> 00:02:12,000
we can use the functional encryption for

51
00:02:09,520 --> 00:02:15,120
attribute weighted sum

52
00:02:12,000 --> 00:02:18,480
in such a cryptal system we encrypt x

53
00:02:15,120 --> 00:02:21,440
i z i with x i being public

54
00:02:18,480 --> 00:02:22,640
and a zi being protected and issue a

55
00:02:21,440 --> 00:02:26,319
secret key

56
00:02:22,640 --> 00:02:29,119
for the function f to the party

57
00:02:26,319 --> 00:02:31,200
the decryption is required to recover

58
00:02:29,120 --> 00:02:34,319
the attribute weighted sum

59
00:02:31,200 --> 00:02:36,640
and reveal nothing else about zi

60
00:02:34,319 --> 00:02:38,958
we will formalize the security a bit

61
00:02:36,640 --> 00:02:38,958
later

62
00:02:39,120 --> 00:02:42,879
before that we want to first motivate

63
00:02:41,680 --> 00:02:47,200
another important

64
00:02:42,879 --> 00:02:49,840
notion in this setting for a database

65
00:02:47,200 --> 00:02:50,640
the number of attributes and their data

66
00:02:49,840 --> 00:02:53,120
types

67
00:02:50,640 --> 00:02:54,799
are determined when the database was

68
00:02:53,120 --> 00:02:57,360
established

69
00:02:54,800 --> 00:02:58,159
however the number of records will

70
00:02:57,360 --> 00:03:02,319
constantly

71
00:02:58,159 --> 00:03:06,079
increase after that namely

72
00:03:02,319 --> 00:03:07,359
x i and z i are small and have bounded

73
00:03:06,080 --> 00:03:10,879
size

74
00:03:07,360 --> 00:03:13,920
while the number of record n is larger

75
00:03:10,879 --> 00:03:16,239
and unbounded when we protect the

76
00:03:13,920 --> 00:03:18,879
sensitive data in the database

77
00:03:16,239 --> 00:03:20,319
by functional encryption for attribute

78
00:03:18,879 --> 00:03:23,359
weighted sum

79
00:03:20,319 --> 00:03:23,599
this means that m probably grows larger

80
00:03:23,360 --> 00:03:26,640
and

81
00:03:23,599 --> 00:03:29,119
larger after a secret key for f is

82
00:03:26,640 --> 00:03:29,119
issued

83
00:03:29,200 --> 00:03:35,280
therefore we require that a secret key

84
00:03:32,400 --> 00:03:39,360
should be able to decrypt the ciphertext

85
00:03:35,280 --> 00:03:41,840
for any a priority unbounded end

86
00:03:39,360 --> 00:03:44,560
this is called unbounded slot for short

87
00:03:41,840 --> 00:03:44,560
in this work

88
00:03:45,519 --> 00:03:49,519
furthermore in the above we have z i

89
00:03:48,480 --> 00:03:52,480
being boolean

90
00:03:49,519 --> 00:03:54,480
variable and a function f being boolean

91
00:03:52,480 --> 00:03:56,879
function

92
00:03:54,480 --> 00:03:57,760
we will actually consider a more general

93
00:03:56,879 --> 00:04:01,760
form

94
00:03:57,760 --> 00:04:04,000
where z i is a vector over larger field

95
00:04:01,760 --> 00:04:06,640
and the product becomes inner product

96
00:04:04,000 --> 00:04:06,640
operation

97
00:04:07,040 --> 00:04:10,480
this allows us to capture more

98
00:04:09,280 --> 00:04:13,360
applications

99
00:04:10,480 --> 00:04:16,719
such as computing average salaries of a

100
00:04:13,360 --> 00:04:16,720
particular group of people

101
00:04:16,880 --> 00:04:24,000
even with the one slot case

102
00:04:20,720 --> 00:04:29,040
this notion covers a set of classical

103
00:04:24,000 --> 00:04:31,600
and newly introduced functionalities

104
00:04:29,040 --> 00:04:33,199
now let me be more formal about the

105
00:04:31,600 --> 00:04:35,840
security notion

106
00:04:33,199 --> 00:04:36,320
we call that we want the secret key for

107
00:04:35,840 --> 00:04:39,359
f

108
00:04:36,320 --> 00:04:42,560
to only leak the attribute weighted sum

109
00:04:39,360 --> 00:04:47,440
with respect to x i z i and f

110
00:04:42,560 --> 00:04:47,440
but keep an information on zi secret

111
00:04:47,520 --> 00:04:51,599
this is formalized as the simulation

112
00:04:49,919 --> 00:04:54,639
based security

113
00:04:51,600 --> 00:04:57,840
against unbounded collusion

114
00:04:54,639 --> 00:05:01,199
the adversary is allowed to see the mass

115
00:04:57,840 --> 00:05:04,400
public key one cycle text and unbounded

116
00:05:01,199 --> 00:05:07,840
the number of secret keys

117
00:05:04,400 --> 00:05:09,840
we show two keys here as an example

118
00:05:07,840 --> 00:05:14,719
they can recover the attribute with its

119
00:05:09,840 --> 00:05:14,719
sum regarding f energy respectively

120
00:05:14,960 --> 00:05:18,239
the security means that the adversaries

121
00:05:17,680 --> 00:05:20,960
view

122
00:05:18,240 --> 00:05:21,919
is indistinguishable with the one on the

123
00:05:20,960 --> 00:05:24,080
lower row

124
00:05:21,919 --> 00:05:25,440
where the ciphertext does not contain

125
00:05:24,080 --> 00:05:28,639
any information about

126
00:05:25,440 --> 00:05:32,080
the eye and attribute with its sound

127
00:05:28,639 --> 00:05:35,440
with respect to f and the g is embedded

128
00:05:32,080 --> 00:05:35,440
into the corresponding key

129
00:05:35,840 --> 00:05:40,479
the solid lock and the key on the upper

130
00:05:38,080 --> 00:05:41,680
row refer to real ciphertext and a

131
00:05:40,479 --> 00:05:43,919
secret key

132
00:05:41,680 --> 00:05:46,720
the hollow lock and the key on the lower

133
00:05:43,919 --> 00:05:46,960
row refer to the simulated ciphertext

134
00:05:46,720 --> 00:05:50,080
and

135
00:05:46,960 --> 00:05:51,840
secret key we note that decrypting the

136
00:05:50,080 --> 00:05:54,800
simulated ciphertext

137
00:05:51,840 --> 00:05:55,520
using the simulated key gives the value

138
00:05:54,800 --> 00:05:58,080
embedded

139
00:05:55,520 --> 00:05:58,080
in the key

140
00:05:59,039 --> 00:06:04,560
our main result is an fe scheme

141
00:06:02,319 --> 00:06:05,560
for attribute weighted sum with

142
00:06:04,560 --> 00:06:08,479
selective

143
00:06:05,560 --> 00:06:09,600
simulation-based security from k-line

144
00:06:08,479 --> 00:06:12,479
assumption

145
00:06:09,600 --> 00:06:14,639
in the prime order by linear group it

146
00:06:12,479 --> 00:06:15,840
also satisfy the unbounded slot

147
00:06:14,639 --> 00:06:17,840
requirement

148
00:06:15,840 --> 00:06:19,359
that is a secret key can be used to

149
00:06:17,840 --> 00:06:23,840
decrypt ciphertext

150
00:06:19,360 --> 00:06:26,960
for any n we also mentioned that

151
00:06:23,840 --> 00:06:28,080
our proposed scheme is expressive in the

152
00:06:26,960 --> 00:06:30,638
sense that

153
00:06:28,080 --> 00:06:31,440
it allows the function f which defines

154
00:06:30,639 --> 00:06:34,880
the weight

155
00:06:31,440 --> 00:06:37,199
to be an arithmetic branching program

156
00:06:34,880 --> 00:06:38,080
which covers many important function

157
00:06:37,199 --> 00:06:42,319
classes

158
00:06:38,080 --> 00:06:42,318
such as nc1 and the log space

159
00:06:42,720 --> 00:06:47,520
besides that our ciphertext size is

160
00:06:45,440 --> 00:06:48,160
independent of the size of public

161
00:06:47,520 --> 00:06:50,560
attribute

162
00:06:48,160 --> 00:06:50,560
x i

163
00:06:51,680 --> 00:06:55,680
technically we build a one slot scheme

164
00:06:54,720 --> 00:06:58,160
first

165
00:06:55,680 --> 00:07:00,479
and bootstrap this basic scheme to

166
00:06:58,160 --> 00:07:02,800
support n slot

167
00:07:00,479 --> 00:07:05,120
this talk will focus on the bootstrap

168
00:07:02,800 --> 00:07:05,120
part

169
00:07:05,840 --> 00:07:10,960
let me begin with a brief sketch of our

170
00:07:08,479 --> 00:07:13,120
one slot scheme

171
00:07:10,960 --> 00:07:15,198
it is based on the partial hiding

172
00:07:13,120 --> 00:07:17,360
predict encryption by wii

173
00:07:15,199 --> 00:07:18,319
which basically correspond to the same

174
00:07:17,360 --> 00:07:21,039
function

175
00:07:18,319 --> 00:07:21,759
but reveal whether the result is zero or

176
00:07:21,039 --> 00:07:25,440
not

177
00:07:21,759 --> 00:07:27,440
rather than the actual value we inherit

178
00:07:25,440 --> 00:07:29,360
the expressiveness and security

179
00:07:27,440 --> 00:07:32,639
guarantee from with predict

180
00:07:29,360 --> 00:07:35,759
encryption we also make an

181
00:07:32,639 --> 00:07:38,160
optimization so that the ciphertext size

182
00:07:35,759 --> 00:07:39,919
is independent of the size of public

183
00:07:38,160 --> 00:07:42,000
attribute x

184
00:07:39,919 --> 00:07:43,280
and our bootstrapping technique

185
00:07:42,000 --> 00:07:46,639
described later

186
00:07:43,280 --> 00:07:46,638
preserves this feature

187
00:07:46,720 --> 00:07:50,800
with this basic one slot scheme we are

188
00:07:49,680 --> 00:07:53,199
ready to show

189
00:07:50,800 --> 00:07:58,000
how to build a scheme supporting a

190
00:07:53,199 --> 00:08:00,720
bounded end

191
00:07:58,000 --> 00:08:01,120
along the way we were always concerned

192
00:08:00,720 --> 00:08:04,560
about

193
00:08:01,120 --> 00:08:06,960
correctness security and unbounded slot

194
00:08:04,560 --> 00:08:06,960
feature

195
00:08:08,319 --> 00:08:12,639
for simplicity we will give an example

196
00:08:10,960 --> 00:08:16,400
for three slot case

197
00:08:12,639 --> 00:08:20,000
where x1 x2 x3 are public

198
00:08:16,400 --> 00:08:22,479
z1 z2 z3 a secret

199
00:08:20,000 --> 00:08:26,080
here f is the function supported by the

200
00:08:22,479 --> 00:08:29,280
one slot scheme

201
00:08:26,080 --> 00:08:33,199
a naive bootstrapping works like this

202
00:08:29,280 --> 00:08:36,079
we encrypt x i z i in each slot

203
00:08:33,200 --> 00:08:37,279
using the one slot encryption algorithm

204
00:08:36,080 --> 00:08:39,919
and the secret key is

205
00:08:37,279 --> 00:08:41,039
exactly the same as the one slot secret

206
00:08:39,919 --> 00:08:43,838
key

207
00:08:41,039 --> 00:08:44,720
namely the ciphertext for three slot

208
00:08:43,839 --> 00:08:47,760
case

209
00:08:44,720 --> 00:08:50,080
consists of three sub-cipher texts

210
00:08:47,760 --> 00:08:52,640
the sub-cipher text i corresponds to

211
00:08:50,080 --> 00:08:54,480
slot i

212
00:08:52,640 --> 00:08:56,319
using the secret key to decrypt the

213
00:08:54,480 --> 00:08:58,320
subcipher text 1

214
00:08:56,320 --> 00:08:59,519
we get a partial decryption result for

215
00:08:58,320 --> 00:09:01,920
slot 1

216
00:08:59,519 --> 00:09:04,240
according to the correctness of basic

217
00:09:01,920 --> 00:09:06,560
one slot scheme

218
00:09:04,240 --> 00:09:08,480
then we can do the same for sub cypher

219
00:09:06,560 --> 00:09:12,000
text 2

220
00:09:08,480 --> 00:09:14,640
and a sub-cypher text 3.

221
00:09:12,000 --> 00:09:16,480
adding up all partial decryption results

222
00:09:14,640 --> 00:09:19,040
for all three slots

223
00:09:16,480 --> 00:09:19,680
gives us the attribute with its sum and

224
00:09:19,040 --> 00:09:23,839
the scheme

225
00:09:19,680 --> 00:09:23,839
indeed satisfies the correctness

226
00:09:24,000 --> 00:09:28,640
furthermore this skin supports unbounded

227
00:09:26,880 --> 00:09:31,120
slot

228
00:09:28,640 --> 00:09:31,920
record that we decrypt all sub-cipher

229
00:09:31,120 --> 00:09:34,560
texts

230
00:09:31,920 --> 00:09:35,439
using the same secret key and this

231
00:09:34,560 --> 00:09:38,319
procedural

232
00:09:35,440 --> 00:09:40,640
can continue if we have more sub-cipher

233
00:09:38,320 --> 00:09:40,640
texts

234
00:09:40,880 --> 00:09:46,880
however this is insecure at all

235
00:09:44,399 --> 00:09:48,800
partial decryption results immediately

236
00:09:46,880 --> 00:09:51,839
leak intermediate cement

237
00:09:48,800 --> 00:09:56,719
of attribute weighted sum remember

238
00:09:51,839 --> 00:09:56,720
we only want to review the sum of them

239
00:09:56,880 --> 00:10:03,360
to fix the issue

240
00:10:00,080 --> 00:10:06,480
we introduce correlated randomness w i

241
00:10:03,360 --> 00:10:07,680
into sub-cipher text i and the

242
00:10:06,480 --> 00:10:10,720
randomness r

243
00:10:07,680 --> 00:10:11,920
in each key so that all partial

244
00:10:10,720 --> 00:10:15,440
decryption results

245
00:10:11,920 --> 00:10:19,199
contain a mask wi times r

246
00:10:15,440 --> 00:10:21,600
and height or cement we notice that

247
00:10:19,200 --> 00:10:22,560
the randomness r is crucial to support

248
00:10:21,600 --> 00:10:25,120
unbounded

249
00:10:22,560 --> 00:10:25,119
collusion

250
00:10:25,839 --> 00:10:30,880
for this we need to slightly extend the

251
00:10:28,880 --> 00:10:33,920
basic one slot scheme

252
00:10:30,880 --> 00:10:38,240
to capture the newly introduced w and

253
00:10:33,920 --> 00:10:42,959
r here w is considered to be a secret

254
00:10:38,240 --> 00:10:45,519
like z and r is public in some form

255
00:10:42,959 --> 00:10:46,319
fortunately the function is still an

256
00:10:45,519 --> 00:10:49,120
arithmetic

257
00:10:46,320 --> 00:10:50,240
branching program to serve as the

258
00:10:49,120 --> 00:10:53,120
building block

259
00:10:50,240 --> 00:10:56,720
we need some technical modification but

260
00:10:53,120 --> 00:10:56,720
we don't give the details here

261
00:10:56,800 --> 00:11:00,079
to check the correctness we know that

262
00:10:59,200 --> 00:11:03,120
the decryption

263
00:11:00,079 --> 00:11:05,439
works as warm-up scheme 1 we use the

264
00:11:03,120 --> 00:11:06,079
secret key to decrypt each sub-cipher

265
00:11:05,440 --> 00:11:08,800
text

266
00:11:06,079 --> 00:11:11,279
one by one and sum up all the partial

267
00:11:08,800 --> 00:11:14,560
decryption results

268
00:11:11,279 --> 00:11:15,680
by the relation of wi we can see that

269
00:11:14,560 --> 00:11:18,319
owi

270
00:11:15,680 --> 00:11:20,000
r will be cancelled out and the

271
00:11:18,320 --> 00:11:23,360
attribute weighted sum

272
00:11:20,000 --> 00:11:27,839
will be correctly reviewed namely

273
00:11:23,360 --> 00:11:30,240
the warm up scheme 2 is correct

274
00:11:27,839 --> 00:11:31,360
again the schemes support unbounded

275
00:11:30,240 --> 00:11:34,320
number of slots

276
00:11:31,360 --> 00:11:34,320
for the same reason

277
00:11:35,440 --> 00:11:41,360
let us see how the newly introduced w

278
00:11:38,560 --> 00:11:45,279
i times r in each partial decryption

279
00:11:41,360 --> 00:11:45,279
result can hide each cement

280
00:11:45,680 --> 00:11:53,040
technically the value is recovered

281
00:11:49,120 --> 00:11:56,399
in the exponent the ddh assumption

282
00:11:53,040 --> 00:11:59,760
allows us to change wi times r

283
00:11:56,399 --> 00:12:01,839
to w i prime which is fresh

284
00:11:59,760 --> 00:12:05,439
for each key and has the same

285
00:12:01,839 --> 00:12:05,440
restriction as wi

286
00:12:07,200 --> 00:12:12,560
then a direct statistical argument

287
00:12:10,240 --> 00:12:14,240
can show that the three partial

288
00:12:12,560 --> 00:12:17,279
decryption results

289
00:12:14,240 --> 00:12:19,920
are identically distributed like this

290
00:12:17,279 --> 00:12:20,639
which can be simulated only using the

291
00:12:19,920 --> 00:12:23,519
knowledge

292
00:12:20,639 --> 00:12:24,000
of the final attribute weighted sum

293
00:12:23,519 --> 00:12:27,200
instead

294
00:12:24,000 --> 00:12:27,600
of every cement this suffice to prove

295
00:12:27,200 --> 00:12:31,040
that

296
00:12:27,600 --> 00:12:33,600
only the sum is leaked however

297
00:12:31,040 --> 00:12:35,360
this does not work well with the warm-up

298
00:12:33,600 --> 00:12:37,360
scheme too

299
00:12:35,360 --> 00:12:39,600
especially with the unbounded slot

300
00:12:37,360 --> 00:12:42,399
requirement

301
00:12:39,600 --> 00:12:44,399
we only have a single secret key for all

302
00:12:42,399 --> 00:12:46,959
three sub-cipher text

303
00:12:44,399 --> 00:12:49,279
which has no room to embed all three

304
00:12:46,959 --> 00:12:52,239
partial decryption results

305
00:12:49,279 --> 00:12:53,760
in general we must embed n values in a

306
00:12:52,240 --> 00:12:56,959
single secret key

307
00:12:53,760 --> 00:12:57,760
of the basic one slot scheme in another

308
00:12:56,959 --> 00:13:00,000
word

309
00:12:57,760 --> 00:13:02,639
it seems to be true that the warm up

310
00:13:00,000 --> 00:13:05,600
scheme 2 only leaked the sum

311
00:13:02,639 --> 00:13:06,000
but further ideas are required in order

312
00:13:05,600 --> 00:13:08,800
to make

313
00:13:06,000 --> 00:13:08,800
the proof work

314
00:13:09,279 --> 00:13:13,760
the first idea is to split the previous

315
00:13:12,000 --> 00:13:16,480
statistical argument

316
00:13:13,760 --> 00:13:19,360
into several hybrids by which we

317
00:13:16,480 --> 00:13:22,880
gradually collect the partial sum

318
00:13:19,360 --> 00:13:26,320
in our example we have three slots

319
00:13:22,880 --> 00:13:27,360
so two hybrids are sufficient in general

320
00:13:26,320 --> 00:13:30,560
case where we have

321
00:13:27,360 --> 00:13:34,639
n slot n minus one hybrid

322
00:13:30,560 --> 00:13:36,719
are used by hybrid 0

323
00:13:34,639 --> 00:13:37,920
we just rewrite the first partial

324
00:13:36,720 --> 00:13:41,120
decryption result

325
00:13:37,920 --> 00:13:44,000
by the restriction of wi and do some

326
00:13:41,120 --> 00:13:47,680
rearrangement

327
00:13:44,000 --> 00:13:50,320
in hybrid 1 we use the entropy of w2

328
00:13:47,680 --> 00:13:50,800
to collect the partial sum involving the

329
00:13:50,320 --> 00:13:54,160
first

330
00:13:50,800 --> 00:13:58,079
two slot that is x1 z1

331
00:13:54,160 --> 00:14:00,240
and x2 z2 here we again need the help of

332
00:13:58,079 --> 00:14:03,680
ddh

333
00:14:00,240 --> 00:14:05,279
similarly in the hybrid 2 we use the

334
00:14:03,680 --> 00:14:07,920
entropy of w3

335
00:14:05,279 --> 00:14:09,360
to pick the last cement and get the

336
00:14:07,920 --> 00:14:12,560
final sum

337
00:14:09,360 --> 00:14:14,959
which involve all three slots

338
00:14:12,560 --> 00:14:16,479
this finished the argument and the

339
00:14:14,959 --> 00:14:19,599
resulting distribution

340
00:14:16,480 --> 00:14:20,240
is actually identical to our one-shot

341
00:14:19,600 --> 00:14:23,040
argument

342
00:14:20,240 --> 00:14:23,040
shown before

343
00:14:23,360 --> 00:14:29,040
how can this new strategy help us

344
00:14:26,639 --> 00:14:30,720
and how can we carry out the strategy in

345
00:14:29,040 --> 00:14:33,920
the proof

346
00:14:30,720 --> 00:14:37,519
observe that each hybrid only involves

347
00:14:33,920 --> 00:14:39,040
two slots this means we only need to

348
00:14:37,519 --> 00:14:41,680
have two places

349
00:14:39,040 --> 00:14:45,839
to embed the two corresponding partial

350
00:14:41,680 --> 00:14:45,839
decryption results

351
00:14:46,320 --> 00:14:50,399
this motivates our second idea to

352
00:14:49,519 --> 00:14:52,880
accommodate

353
00:14:50,399 --> 00:14:55,040
the two partial decryption results

354
00:14:52,880 --> 00:14:58,160
involved in each hybrid

355
00:14:55,040 --> 00:15:00,560
we employ two independent copies of the

356
00:14:58,160 --> 00:15:03,360
basic one slot scheme

357
00:15:00,560 --> 00:15:07,359
this means we need to generate two sets

358
00:15:03,360 --> 00:15:10,399
of fresh masked public secret key pairs

359
00:15:07,360 --> 00:15:13,440
in the talk we just use a subscript

360
00:15:10,399 --> 00:15:15,760
one and a two to indicate ciphertext

361
00:15:13,440 --> 00:15:18,160
and a secret key from the two copies

362
00:15:15,760 --> 00:15:21,279
respectively

363
00:15:18,160 --> 00:15:22,399
now the secret key consists of two sub

364
00:15:21,279 --> 00:15:25,439
keys

365
00:15:22,399 --> 00:15:27,920
sub key1 is from the first copy

366
00:15:25,440 --> 00:15:28,720
and the sub key 2 is from the second

367
00:15:27,920 --> 00:15:31,759
copy

368
00:15:28,720 --> 00:15:32,560
but both of them are generated for the

369
00:15:31,759 --> 00:15:35,680
same f

370
00:15:32,560 --> 00:15:38,479
and r roughly sub q 1

371
00:15:35,680 --> 00:15:39,359
is used to embed the partial decryption

372
00:15:38,480 --> 00:15:42,560
result

373
00:15:39,360 --> 00:15:44,880
of the first slot while sub key 2

374
00:15:42,560 --> 00:15:46,000
is used to embed another partial

375
00:15:44,880 --> 00:15:49,439
decryption result

376
00:15:46,000 --> 00:15:49,440
depending on the hybrid

377
00:15:50,000 --> 00:15:54,399
accordingly subcipher text 1 for x1 and

378
00:15:53,519 --> 00:15:57,040
z1

379
00:15:54,399 --> 00:15:59,839
is generated using the first copy of the

380
00:15:57,040 --> 00:16:03,040
basic one slot scheme

381
00:15:59,839 --> 00:16:06,320
subcipher text 2 and 3 are created

382
00:16:03,040 --> 00:16:06,319
using the second copy

383
00:16:06,639 --> 00:16:12,399
let me sketch how the proof actually

384
00:16:08,639 --> 00:16:12,399
works with our two ideas

385
00:16:12,560 --> 00:16:18,800
we switch sub ciphertext 1 and sub key 1

386
00:16:15,920 --> 00:16:21,199
to the simulated form this follows from

387
00:16:18,800 --> 00:16:24,719
the simulation based security

388
00:16:21,199 --> 00:16:27,839
of the first copy of one slot scheme

389
00:16:24,720 --> 00:16:28,480
by this we embed the partial decryption

390
00:16:27,839 --> 00:16:32,240
result

391
00:16:28,480 --> 00:16:34,720
for the first slot to the sub key one

392
00:16:32,240 --> 00:16:36,800
then we can deal with the remaining slot

393
00:16:34,720 --> 00:16:40,399
one by one

394
00:16:36,800 --> 00:16:43,599
we switch sub ciphertext2 and sub key2

395
00:16:40,399 --> 00:16:45,600
to the simulated form so that we embed

396
00:16:43,600 --> 00:16:47,519
the second partial decryption result

397
00:16:45,600 --> 00:16:49,279
into the secret key

398
00:16:47,519 --> 00:16:51,680
this follows from the simulation based

399
00:16:49,279 --> 00:16:54,079
security of the second copy

400
00:16:51,680 --> 00:16:56,959
and the independence of the two copies

401
00:16:54,079 --> 00:16:59,439
of the basic scheme

402
00:16:56,959 --> 00:17:01,119
then we can carry out the argument of

403
00:16:59,440 --> 00:17:04,400
moving from hybrid 0

404
00:17:01,120 --> 00:17:04,799
to hybrid 1 which collects the partial

405
00:17:04,400 --> 00:17:08,319
sum

406
00:17:04,799 --> 00:17:11,199
involving the first two slots

407
00:17:08,319 --> 00:17:12,159
then we switch sub cipher text 2 and sub

408
00:17:11,199 --> 00:17:15,199
key2

409
00:17:12,160 --> 00:17:18,400
back to the real form note that

410
00:17:15,199 --> 00:17:19,760
sub ciphertext2 does not contain z2

411
00:17:18,400 --> 00:17:22,799
anymore

412
00:17:19,760 --> 00:17:25,760
which has been embedded into partial sum

413
00:17:22,799 --> 00:17:25,760
in sub key1

414
00:17:26,000 --> 00:17:29,760
and it is crucial to switch back to the

415
00:17:28,480 --> 00:17:32,400
real ciphertext

416
00:17:29,760 --> 00:17:34,080
and the secret key since we can now

417
00:17:32,400 --> 00:17:36,640
reuse sub-key 2

418
00:17:34,080 --> 00:17:39,360
to handle sub-cipher text 3 with an

419
00:17:36,640 --> 00:17:42,000
analog strategy

420
00:17:39,360 --> 00:17:42,559
namely we switch sub-cycle take 3 and

421
00:17:42,000 --> 00:17:46,160
sub-key

422
00:17:42,559 --> 00:17:48,799
2 into simulated form and embed

423
00:17:46,160 --> 00:17:49,760
the partial decryption result for the

424
00:17:48,799 --> 00:17:53,360
third slot

425
00:17:49,760 --> 00:17:56,320
into sub key 2 again

426
00:17:53,360 --> 00:17:57,280
with this the argument for moving from

427
00:17:56,320 --> 00:18:00,799
hybrid 1

428
00:17:57,280 --> 00:18:04,160
to hybrid 2 allows us to reach the final

429
00:18:00,799 --> 00:18:07,760
attribute weighted sum and embed it

430
00:18:04,160 --> 00:18:07,760
into sub key 1.

431
00:18:07,840 --> 00:18:12,080
switching all sub cipher text and sub

432
00:18:10,160 --> 00:18:16,080
keys from the second copy

433
00:18:12,080 --> 00:18:17,199
back to the real one we get a simulated

434
00:18:16,080 --> 00:18:19,918
cycle text

435
00:18:17,200 --> 00:18:22,320
and a simulated secret key for our three

436
00:18:19,919 --> 00:18:24,799
slot scheme

437
00:18:22,320 --> 00:18:26,639
the simulated cipher text does not

438
00:18:24,799 --> 00:18:29,760
contain any information about

439
00:18:26,640 --> 00:18:33,039
the and the attribute weighted sum

440
00:18:29,760 --> 00:18:36,000
is now embedded into sub key 1.

441
00:18:33,039 --> 00:18:36,640
for this only subciphertext and a sub

442
00:18:36,000 --> 00:18:39,520
key

443
00:18:36,640 --> 00:18:40,480
from the first copy is in the simulated

444
00:18:39,520 --> 00:18:42,960
form

445
00:18:40,480 --> 00:18:44,000
while all remaining sub ciphertext and

446
00:18:42,960 --> 00:18:47,120
sub keys

447
00:18:44,000 --> 00:18:51,679
from the second copy are real

448
00:18:47,120 --> 00:18:51,678
and this is our actual final scheme

449
00:18:51,919 --> 00:18:56,480
in general in slot case we have n sub

450
00:18:54,960 --> 00:18:58,880
cipher texts

451
00:18:56,480 --> 00:18:59,520
sub cipher text 1 encrypts the first

452
00:18:58,880 --> 00:19:03,039
slot

453
00:18:59,520 --> 00:19:05,440
using the first copy of one slot scheme

454
00:19:03,039 --> 00:19:07,679
while all remaining slots are handled

455
00:19:05,440 --> 00:19:10,160
using the second copy

456
00:19:07,679 --> 00:19:10,960
the secret key will always have two sub

457
00:19:10,160 --> 00:19:15,120
keys

458
00:19:10,960 --> 00:19:15,120
from the two copies respectively

459
00:19:15,200 --> 00:19:20,720
let me summarize this talk in this work

460
00:19:18,400 --> 00:19:24,480
we study functional encryption for

461
00:19:20,720 --> 00:19:26,880
attribute weighted sum

462
00:19:24,480 --> 00:19:28,320
we give a construction in the prime

463
00:19:26,880 --> 00:19:31,600
order by linux group

464
00:19:28,320 --> 00:19:32,960
with simulation based security a key

465
00:19:31,600 --> 00:19:35,600
feature is that

466
00:19:32,960 --> 00:19:36,320
we consider the so-called unbounded slot

467
00:19:35,600 --> 00:19:39,120
feature

468
00:19:36,320 --> 00:19:41,039
which requires that a secret key can be

469
00:19:39,120 --> 00:19:43,840
used to decrypt the ciphertext

470
00:19:41,039 --> 00:19:43,840
for any end

471
00:19:45,120 --> 00:19:48,719
in this talk we sketched how to get an

472
00:19:47,600 --> 00:19:52,240
one slot scheme

473
00:19:48,720 --> 00:19:54,559
as basis and a bootstrap this to the n

474
00:19:52,240 --> 00:19:57,679
slot scheme

475
00:19:54,559 --> 00:20:00,879
we can also adapt our n slot scheme

476
00:19:57,679 --> 00:20:04,240
to the multi-client setting where each

477
00:20:00,880 --> 00:20:05,120
x i and zi is encrypted by different

478
00:20:04,240 --> 00:20:07,360
parties

479
00:20:05,120 --> 00:20:10,000
and the corruption of parties is also

480
00:20:07,360 --> 00:20:10,000
considered

481
00:20:10,640 --> 00:20:17,039
finally we leave several open problems

482
00:20:14,320 --> 00:20:18,480
first our scheme only achieves selective

483
00:20:17,039 --> 00:20:21,039
security

484
00:20:18,480 --> 00:20:24,080
it is generally desirable to have an

485
00:20:21,039 --> 00:20:27,360
adaptively secure scheme

486
00:20:24,080 --> 00:20:29,199
then by using the bilinear group we have

487
00:20:27,360 --> 00:20:32,799
to restrict the domain size

488
00:20:29,200 --> 00:20:33,760
to be polynomial so that we can use

489
00:20:32,799 --> 00:20:36,240
brute force

490
00:20:33,760 --> 00:20:39,919
discrete log algorithm to recover the

491
00:20:36,240 --> 00:20:41,840
final attribute weighted sum

492
00:20:39,919 --> 00:20:43,280
it would be interesting to have a

493
00:20:41,840 --> 00:20:46,840
lattice-based scheme

494
00:20:43,280 --> 00:20:48,960
so that we can get rid of this

495
00:20:46,840 --> 00:20:51,840
restriction

496
00:20:48,960 --> 00:20:53,039
finally our multi-client scheme require

497
00:20:51,840 --> 00:20:55,280
all parties

498
00:20:53,039 --> 00:20:56,480
to negotiate a fresh correlated

499
00:20:55,280 --> 00:20:59,760
randomness

500
00:20:56,480 --> 00:21:02,480
for each encryption it would

501
00:20:59,760 --> 00:21:04,320
make the scheme more practical to allow

502
00:21:02,480 --> 00:21:06,960
them to reuse the randomness

503
00:21:04,320 --> 00:21:06,960
in the future

504
00:21:08,000 --> 00:21:14,400
thank you for your attention

