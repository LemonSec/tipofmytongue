1
00:00:00,799 --> 00:00:05,200
hello everyone my name is baldwin

2
00:00:03,760 --> 00:00:08,160
and i'm going to be presenting some

3
00:00:05,200 --> 00:00:10,080
crypt analysis results on spook

4
00:00:08,160 --> 00:00:11,920
this was a joint work with patrick

5
00:00:10,080 --> 00:00:14,920
derbez virginia

6
00:00:11,920 --> 00:00:17,359
mariana placencia leopard and andrei

7
00:00:14,920 --> 00:00:20,000
schwartz

8
00:00:17,359 --> 00:00:22,320
all right so spook is an authenticated

9
00:00:20,000 --> 00:00:23,920
encryption scheme with associated data

10
00:00:22,320 --> 00:00:25,680
that was submitted to the nislite with

11
00:00:23,920 --> 00:00:27,680
crypto competition

12
00:00:25,680 --> 00:00:29,359
and it is currently part of the 32

13
00:00:27,680 --> 00:00:30,560
candidates that made it to the second

14
00:00:29,359 --> 00:00:32,160
round

15
00:00:30,560 --> 00:00:33,839
it was designed to achieve both

16
00:00:32,159 --> 00:00:37,440
resistance against side channel

17
00:00:33,840 --> 00:00:40,160
analysis and low energy implementations

18
00:00:37,440 --> 00:00:41,760
it has three sub-components the sponge

19
00:00:40,160 --> 00:00:46,239
one pass mode of operation

20
00:00:41,760 --> 00:00:48,320
s1p a tweakable block cipher clyde 128

21
00:00:46,239 --> 00:00:51,120
and the shadow permutation which comes

22
00:00:48,320 --> 00:00:55,600
in a 512 bit version

23
00:00:51,120 --> 00:00:58,879
and another one of 384 bits

24
00:00:55,600 --> 00:01:00,879
in the spook specification the security

25
00:00:58,879 --> 00:01:03,358
analysis of the mode of operation used

26
00:01:00,879 --> 00:01:04,239
s1p relies on the assumption that the

27
00:01:03,359 --> 00:01:06,400
permutations

28
00:01:04,239 --> 00:01:08,880
are random and that they provide

29
00:01:06,400 --> 00:01:10,799
collision resistance

30
00:01:08,880 --> 00:01:12,000
now it turns out that we were able to

31
00:01:10,799 --> 00:01:14,560
challenge this assumption

32
00:01:12,000 --> 00:01:15,600
by exhibiting distinguishers for the

33
00:01:14,560 --> 00:01:17,840
permutations

34
00:01:15,600 --> 00:01:19,479
which we then later used to find a

35
00:01:17,840 --> 00:01:22,799
practical collision on

36
00:01:19,479 --> 00:01:24,720
128 bits of the output

37
00:01:22,799 --> 00:01:27,119
and in doing so we also solved the first

38
00:01:24,720 --> 00:01:29,360
mathematical cryptanalysis challenge

39
00:01:27,119 --> 00:01:31,280
on the permutation that was proposed by

40
00:01:29,360 --> 00:01:34,400
the designers

41
00:01:31,280 --> 00:01:36,400
so what exactly did we do well first we

42
00:01:34,400 --> 00:01:38,320
found practical distinguishers

43
00:01:36,400 --> 00:01:40,000
one on the full six-step version of

44
00:01:38,320 --> 00:01:42,479
shadow 512

45
00:01:40,000 --> 00:01:44,479
and another one on a step reduced

46
00:01:42,479 --> 00:01:46,560
version of shadow 384

47
00:01:44,479 --> 00:01:48,880
that covers step one to step five

48
00:01:46,560 --> 00:01:52,240
instead of step zero to five

49
00:01:48,880 --> 00:01:54,079
so five steps instead of six we also

50
00:01:52,240 --> 00:01:57,679
found an attack against the integrity

51
00:01:54,079 --> 00:02:00,798
of spook reduced to steps two to five

52
00:01:57,680 --> 00:02:01,600
so that makes four steps now all the

53
00:02:00,799 --> 00:02:04,640
analysis

54
00:02:01,600 --> 00:02:09,679
are practical and they have been tested

55
00:02:04,640 --> 00:02:12,800
and the source code is available online

56
00:02:09,679 --> 00:02:16,480
okay so let's talk about shadow first

57
00:02:12,800 --> 00:02:19,040
shadow combines uh bundles now a bundle

58
00:02:16,480 --> 00:02:22,160
is a 4 by 32 array of bits

59
00:02:19,040 --> 00:02:24,000
so 128 bits in total and if you combine

60
00:02:22,160 --> 00:02:28,239
four of them you get a shadow state

61
00:02:24,000 --> 00:02:31,280
for shadow 512 for the smaller version

62
00:02:28,239 --> 00:02:34,480
shadow 384 you only need

63
00:02:31,280 --> 00:02:37,280
three of them so that's for

64
00:02:34,480 --> 00:02:39,760
a shadow state now let's talk about the

65
00:02:37,280 --> 00:02:43,360
encryption part

66
00:02:39,760 --> 00:02:45,760
both versions uh iterate six steps

67
00:02:43,360 --> 00:02:46,400
now one step is made of two rounds round

68
00:02:45,760 --> 00:02:49,200
a and

69
00:02:46,400 --> 00:02:50,000
round b and in between those rounds

70
00:02:49,200 --> 00:02:52,958
there are some

71
00:02:50,000 --> 00:02:55,519
round constant additions so here's one

72
00:02:52,959 --> 00:02:58,560
step for shadow 512

73
00:02:55,519 --> 00:03:00,879
shadow 384 is exactly the same

74
00:02:58,560 --> 00:03:04,159
except for the d-box layer which i'll

75
00:03:00,879 --> 00:03:07,280
show very soon

76
00:03:04,159 --> 00:03:10,000
so round a first applies a four bit s

77
00:03:07,280 --> 00:03:12,000
box on each column of each bundle

78
00:03:10,000 --> 00:03:16,400
then the l box transforms the first two

79
00:03:12,000 --> 00:03:18,480
row and the last two rows of each bundle

80
00:03:16,400 --> 00:03:20,959
round b starts with the same layer as

81
00:03:18,480 --> 00:03:24,079
round a but has a different linear layer

82
00:03:20,959 --> 00:03:24,720
that we're going to denote by d and the

83
00:03:24,080 --> 00:03:27,680
purpose

84
00:03:24,720 --> 00:03:29,599
of d is to provide diffusion between the

85
00:03:27,680 --> 00:03:31,920
bundles of the state

86
00:03:29,599 --> 00:03:32,640
to be more precise each bit of each

87
00:03:31,920 --> 00:03:35,359
bundle

88
00:03:32,640 --> 00:03:38,319
is modified by the application of a near

89
00:03:35,360 --> 00:03:38,319
mds matrix

90
00:03:38,560 --> 00:03:41,680
and between those rounds some constants

91
00:03:40,640 --> 00:03:44,559
are added

92
00:03:41,680 --> 00:03:45,680
they are generated using an lfsr and are

93
00:03:44,560 --> 00:03:48,640
added to column i

94
00:03:45,680 --> 00:03:48,640
of bundle i

95
00:03:48,799 --> 00:03:56,239
um so that's one step um and for a

96
00:03:52,319 --> 00:03:56,238
complete shadow you need six of them

97
00:03:56,720 --> 00:04:00,560
now let's have a look at the only

98
00:03:58,640 --> 00:04:02,238
component that differs between the two

99
00:04:00,560 --> 00:04:05,519
versions of shadow

100
00:04:02,239 --> 00:04:09,280
which is the d layer

101
00:04:05,519 --> 00:04:11,599
so d is the only diffusion layer between

102
00:04:09,280 --> 00:04:14,720
the bundles

103
00:04:11,599 --> 00:04:18,238
so for shadow 512

104
00:04:14,720 --> 00:04:21,759
d is actually an involution so

105
00:04:18,238 --> 00:04:24,880
for each bit of each bundle

106
00:04:21,759 --> 00:04:25,280
the value is updated by xoring the same

107
00:04:24,880 --> 00:04:28,560
bit

108
00:04:25,280 --> 00:04:31,599
of the three other bundles

109
00:04:28,560 --> 00:04:33,440
that's not the case for shadow 384

110
00:04:31,600 --> 00:04:35,120
which is part of the reason why our

111
00:04:33,440 --> 00:04:37,520
distinguisher doesn't cover the full

112
00:04:35,120 --> 00:04:37,520
version

113
00:04:39,199 --> 00:04:43,360
so looking at this d layer we wanted to

114
00:04:41,440 --> 00:04:45,520
see if there was a way to

115
00:04:43,360 --> 00:04:47,199
exploit the similarity between the

116
00:04:45,520 --> 00:04:50,320
functions applied

117
00:04:47,199 --> 00:04:52,960
on each bundle and for that we used

118
00:04:50,320 --> 00:04:55,199
truncated differentials which are a

119
00:04:52,960 --> 00:04:57,440
variant of differentials in which only a

120
00:04:55,199 --> 00:05:01,199
portion of the difference is fixed

121
00:04:57,440 --> 00:05:03,360
while the other part is undetermined

122
00:05:01,199 --> 00:05:04,880
so for instance if we start with two

123
00:05:03,360 --> 00:05:06,479
shadow states that are equal

124
00:05:04,880 --> 00:05:08,000
on the last bundle but we have no

125
00:05:06,479 --> 00:05:08,880
information whatsoever on the first

126
00:05:08,000 --> 00:05:11,919
three

127
00:05:08,880 --> 00:05:14,080
um then actually some properties are

128
00:05:11,919 --> 00:05:16,159
still kept after encryption

129
00:05:14,080 --> 00:05:17,840
and more precisely the first three

130
00:05:16,160 --> 00:05:22,840
bundles

131
00:05:17,840 --> 00:05:25,679
turn out to be equal if we invert the d

132
00:05:22,840 --> 00:05:28,400
layer so here the zero symbol denotes

133
00:05:25,680 --> 00:05:30,720
that the two bundles are identical

134
00:05:28,400 --> 00:05:32,400
and the star symbol means that the

135
00:05:30,720 --> 00:05:35,039
difference between the bundles is not

136
00:05:32,400 --> 00:05:35,039
determined

137
00:05:35,440 --> 00:05:39,520
so in order to study the differences and

138
00:05:37,520 --> 00:05:42,159
similarities in the bundles

139
00:05:39,520 --> 00:05:42,639
one thing we can do is rewrite shadow

140
00:05:42,160 --> 00:05:46,639
using

141
00:05:42,639 --> 00:05:49,600
super s boxes so here's a shadow step

142
00:05:46,639 --> 00:05:51,199
like i've already shown and what we can

143
00:05:49,600 --> 00:05:54,160
do is regroup the first four

144
00:05:51,199 --> 00:05:55,199
operations of the step so the s layer

145
00:05:54,160 --> 00:05:59,120
the linear layer

146
00:05:55,199 --> 00:06:00,720
l of round a the constant addition

147
00:05:59,120 --> 00:06:02,560
uh that is done on the different

148
00:06:00,720 --> 00:06:06,240
positions for each

149
00:06:02,560 --> 00:06:09,520
super s box and the s layer of round

150
00:06:06,240 --> 00:06:10,400
b um so we're gonna consider all these

151
00:06:09,520 --> 00:06:13,440
operations as

152
00:06:10,400 --> 00:06:16,719
one super s box uh so we're gonna

153
00:06:13,440 --> 00:06:18,319
let's call it sigma zero and uh

154
00:06:16,720 --> 00:06:20,000
obviously we can do the same thing for

155
00:06:18,319 --> 00:06:23,199
the three other

156
00:06:20,000 --> 00:06:24,639
bundles and now for the d-box

157
00:06:23,199 --> 00:06:27,840
application layer

158
00:06:24,639 --> 00:06:30,720
um we can also see it as

159
00:06:27,840 --> 00:06:31,919
one big linear permutation layer that's

160
00:06:30,720 --> 00:06:37,120
operating on

161
00:06:31,919 --> 00:06:40,318
on the full state just like that

162
00:06:37,120 --> 00:06:44,639
so what we have now is an spn structure

163
00:06:40,319 --> 00:06:48,800
with four 128 bit super s boxes

164
00:06:44,639 --> 00:06:51,440
and a linear permutation layer d

165
00:06:48,800 --> 00:06:53,280
oh the round counts the round constant

166
00:06:51,440 --> 00:06:56,160
addition after round b

167
00:06:53,280 --> 00:06:58,638
is not represented here but they are

168
00:06:56,160 --> 00:07:00,479
implicitly considered

169
00:06:58,639 --> 00:07:04,240
so now with this new representation what

170
00:07:00,479 --> 00:07:06,560
we can do is uh for instance consider

171
00:07:04,240 --> 00:07:08,240
two shadow states that are equal on the

172
00:07:06,560 --> 00:07:11,440
last three bundles

173
00:07:08,240 --> 00:07:13,919
well after this super s boxes uh we know

174
00:07:11,440 --> 00:07:17,039
that the last three bundles

175
00:07:13,919 --> 00:07:20,318
are still equal then

176
00:07:17,039 --> 00:07:23,039
after d-box since each bundle

177
00:07:20,319 --> 00:07:24,319
is updated with the xor of the three

178
00:07:23,039 --> 00:07:27,440
other bundles

179
00:07:24,319 --> 00:07:30,960
we know that the first bundle

180
00:07:27,440 --> 00:07:33,360
are equal

181
00:07:30,960 --> 00:07:34,479
now in the following i will present some

182
00:07:33,360 --> 00:07:40,240
of the properties

183
00:07:34,479 --> 00:07:40,240
that we exploited in our analysis

184
00:07:40,319 --> 00:07:45,120
um so one interesting observation is

185
00:07:42,560 --> 00:07:48,560
that even though

186
00:07:45,120 --> 00:07:50,080
the bundles go through different s boxes

187
00:07:48,560 --> 00:07:53,199
super s boxes

188
00:07:50,080 --> 00:07:55,359
because of the round constants

189
00:07:53,199 --> 00:07:57,599
it's possible to have a shadow state

190
00:07:55,360 --> 00:07:59,520
with four equal bundles

191
00:07:57,599 --> 00:08:00,960
that is transformed into a shadow state

192
00:07:59,520 --> 00:08:04,080
of the same form

193
00:08:00,960 --> 00:08:05,919
at the output of a step

194
00:08:04,080 --> 00:08:07,120
so that's something that we call i

195
00:08:05,919 --> 00:08:10,840
identical states

196
00:08:07,120 --> 00:08:12,160
whenever we have i bundles that are

197
00:08:10,840 --> 00:08:15,039
equal

198
00:08:12,160 --> 00:08:16,080
let's see let's see what happens when we

199
00:08:15,039 --> 00:08:19,120
start with a

200
00:08:16,080 --> 00:08:19,120
four identical state

201
00:08:19,360 --> 00:08:22,720
how can we end up with another for

202
00:08:21,759 --> 00:08:26,240
identical state

203
00:08:22,720 --> 00:08:28,960
at the end of the step so here are

204
00:08:26,240 --> 00:08:30,160
our four bond four bundles um and they

205
00:08:28,960 --> 00:08:31,520
are equal

206
00:08:30,160 --> 00:08:33,599
and whenever one difference is

207
00:08:31,520 --> 00:08:34,718
introduced it will be highlighted in

208
00:08:33,599 --> 00:08:37,839
color

209
00:08:34,719 --> 00:08:42,640
so here's our initial state um after the

210
00:08:37,839 --> 00:08:46,959
s box layer the bundles are still equal

211
00:08:42,640 --> 00:08:48,560
same thing after the out box layer

212
00:08:46,959 --> 00:08:50,079
now we're going to add the first

213
00:08:48,560 --> 00:08:53,439
constants

214
00:08:50,080 --> 00:08:56,720
so let's call them c so c

215
00:08:53,440 --> 00:08:58,320
is added to column i of bundle i

216
00:08:56,720 --> 00:09:02,480
so we've introduced four different

217
00:08:58,320 --> 00:09:02,480
values at column i of bundle i

218
00:09:02,720 --> 00:09:06,880
then we apply the s layer of rom b so

219
00:09:05,440 --> 00:09:08,080
now the values are changed but the

220
00:09:06,880 --> 00:09:11,200
positions are the same

221
00:09:08,080 --> 00:09:13,839
we still have four different values

222
00:09:11,200 --> 00:09:15,360
now the d layer is going to spread those

223
00:09:13,839 --> 00:09:18,880
differences

224
00:09:15,360 --> 00:09:18,880
to the other bundles

225
00:09:19,200 --> 00:09:26,399
and finally if we add the round constant

226
00:09:22,800 --> 00:09:29,519
let's call it c prime then we have

227
00:09:26,399 --> 00:09:31,120
a total of eight different values

228
00:09:29,519 --> 00:09:32,560
and what we can see here is that if we

229
00:09:31,120 --> 00:09:34,560
want the input state and the output

230
00:09:32,560 --> 00:09:37,920
states to be equal

231
00:09:34,560 --> 00:09:40,319
then um this

232
00:09:37,920 --> 00:09:42,399
highlighted equation needs to be

233
00:09:40,320 --> 00:09:44,640
satisfied

234
00:09:42,399 --> 00:09:45,600
now this happens with some probabilities

235
00:09:44,640 --> 00:09:48,080
that are

236
00:09:45,600 --> 00:09:50,240
round dependent and that's because the s

237
00:09:48,080 --> 00:09:54,000
bug the s box transitions

238
00:09:50,240 --> 00:09:55,839
need to well exist

239
00:09:54,000 --> 00:09:58,160
so for instance what we can see here is

240
00:09:55,839 --> 00:10:01,440
that uh starting from a four

241
00:09:58,160 --> 00:10:03,279
identical state we can only recover

242
00:10:01,440 --> 00:10:05,200
another four identical state at the end

243
00:10:03,279 --> 00:10:07,519
of step two and three

244
00:10:05,200 --> 00:10:09,120
and that's because for the other steps

245
00:10:07,519 --> 00:10:12,720
the transitions don't

246
00:10:09,120 --> 00:10:15,040
exist this also works for

247
00:10:12,720 --> 00:10:16,079
three identical states or two identical

248
00:10:15,040 --> 00:10:19,360
states

249
00:10:16,079 --> 00:10:21,279
and the choice of the positions

250
00:10:19,360 --> 00:10:23,200
that are of the bundles that are

251
00:10:21,279 --> 00:10:25,360
identical doesn't matter

252
00:10:23,200 --> 00:10:26,399
as long as the positions are the same in

253
00:10:25,360 --> 00:10:30,839
the input and

254
00:10:26,399 --> 00:10:33,040
in the output the probabilities are

255
00:10:30,839 --> 00:10:35,920
valid

256
00:10:33,040 --> 00:10:37,199
all right so now that we've seen this um

257
00:10:35,920 --> 00:10:39,279
interesting property

258
00:10:37,200 --> 00:10:42,000
i'm going to talk about uh our

259
00:10:39,279 --> 00:10:45,040
distinguisher

260
00:10:42,000 --> 00:10:46,000
so for shadow 512 we can exhibit pairs

261
00:10:45,040 --> 00:10:49,680
of states

262
00:10:46,000 --> 00:10:52,079
x x prime with a zero difference

263
00:10:49,680 --> 00:10:53,120
in the last bundle such that the states

264
00:10:52,079 --> 00:10:56,560
after encryption

265
00:10:53,120 --> 00:11:00,480
are equal on the first three bundles

266
00:10:56,560 --> 00:11:02,479
after inverting d so generating such

267
00:11:00,480 --> 00:11:03,680
pairs for a random permutation would

268
00:11:02,480 --> 00:11:07,440
require about

269
00:11:03,680 --> 00:11:10,719
2 to the power of 64 queries um

270
00:11:07,440 --> 00:11:12,160
but in our case we only need 2 to the

271
00:11:10,720 --> 00:11:16,480
barrel of 16 calls

272
00:11:12,160 --> 00:11:19,839
to the permutation so this distinguisher

273
00:11:16,480 --> 00:11:22,959
uh is based on two properties

274
00:11:19,839 --> 00:11:26,399
um first there's a probability one

275
00:11:22,959 --> 00:11:29,040
truncated differential and two

276
00:11:26,399 --> 00:11:32,000
there's uh the propagation of three

277
00:11:29,040 --> 00:11:32,000
identical states

278
00:11:32,880 --> 00:11:36,000
so what we're going to do is that uh

279
00:11:34,880 --> 00:11:39,200
we're going to start

280
00:11:36,000 --> 00:11:42,320
at step two and what we need

281
00:11:39,200 --> 00:11:45,279
is that the first three super s boxes

282
00:11:42,320 --> 00:11:45,839
transition from a difference alpha to a

283
00:11:45,279 --> 00:11:49,839
difference

284
00:11:45,839 --> 00:11:52,320
beta just like that um

285
00:11:49,839 --> 00:11:53,680
now we're going to go backward if we

286
00:11:52,320 --> 00:11:56,959
invert d

287
00:11:53,680 --> 00:11:57,519
on the input of step two then for each

288
00:11:56,959 --> 00:12:01,119
bundle

289
00:11:57,519 --> 00:12:04,720
we need to exor the three other bundles

290
00:12:01,120 --> 00:12:08,480
so we have um zero zero zero

291
00:12:04,720 --> 00:12:11,680
alpha then we invert the super s box

292
00:12:08,480 --> 00:12:14,639
um so we we have a

293
00:12:11,680 --> 00:12:17,120
something of the form zero zero zero and

294
00:12:14,639 --> 00:12:18,720
a difference that we don't know

295
00:12:17,120 --> 00:12:20,320
and then we do the same thing with step

296
00:12:18,720 --> 00:12:24,399
zero so

297
00:12:20,320 --> 00:12:27,680
in the end the the pattern propagates

298
00:12:24,399 --> 00:12:28,800
with probability one through steps one

299
00:12:27,680 --> 00:12:30,638
then zero

300
00:12:28,800 --> 00:12:32,160
and the input difference of step zero

301
00:12:30,639 --> 00:12:36,800
equals zero

302
00:12:32,160 --> 00:12:36,800
on the third bundle as expected

303
00:12:37,120 --> 00:12:42,639
all right so now going forward um

304
00:12:40,880 --> 00:12:44,240
we need something a bit stronger this

305
00:12:42,639 --> 00:12:47,440
time we need uh

306
00:12:44,240 --> 00:12:50,560
to propagate three identical states

307
00:12:47,440 --> 00:12:53,839
uh so this will be represented in the

308
00:12:50,560 --> 00:12:53,839
red dotted rectangles

309
00:12:54,240 --> 00:13:00,480
so we must ensure that

310
00:12:58,320 --> 00:13:02,079
at the end of step two the two output

311
00:13:00,480 --> 00:13:05,279
messages are three

312
00:13:02,079 --> 00:13:08,560
identical now in step three

313
00:13:05,279 --> 00:13:11,760
we want uh to keep this three

314
00:13:08,560 --> 00:13:12,800
identical property and as we've seen

315
00:13:11,760 --> 00:13:16,160
before

316
00:13:12,800 --> 00:13:19,359
this has a probability equal to two to

317
00:13:16,160 --> 00:13:21,839
the power of minus nine

318
00:13:19,360 --> 00:13:23,920
now next for step four we need

319
00:13:21,839 --> 00:13:27,920
differences to be

320
00:13:23,920 --> 00:13:31,599
the same after the first three s boxes

321
00:13:27,920 --> 00:13:34,880
um and this has a probability equals to

322
00:13:31,600 --> 00:13:38,079
two to the power of minus 7.245

323
00:13:34,880 --> 00:13:40,880
and i'll explain that in a bit

324
00:13:38,079 --> 00:13:42,079
and once this condition is fulfilled

325
00:13:40,880 --> 00:13:44,959
then we

326
00:13:42,079 --> 00:13:46,000
automatically have a difference of the

327
00:13:44,959 --> 00:13:49,359
form

328
00:13:46,000 --> 00:13:51,680
star star star zero at the end of step

329
00:13:49,360 --> 00:13:51,680
five

330
00:13:52,320 --> 00:13:59,040
all right so a bit of detail um

331
00:13:56,000 --> 00:14:02,000
so first uh for step two um

332
00:13:59,040 --> 00:14:04,319
how how how do we build a pair the right

333
00:14:02,000 --> 00:14:07,760
pair for step two

334
00:14:04,320 --> 00:14:10,480
well on the first three bundle

335
00:14:07,760 --> 00:14:12,639
we need the same differences before the

336
00:14:10,480 --> 00:14:15,920
super s boxes and the same differences

337
00:14:12,639 --> 00:14:17,839
after the super s boxes but there's

338
00:14:15,920 --> 00:14:18,800
actually more to that we also need the

339
00:14:17,839 --> 00:14:22,720
states

340
00:14:18,800 --> 00:14:25,120
to be three identical so how can we

341
00:14:22,720 --> 00:14:25,920
uh how can we do that how how are we

342
00:14:25,120 --> 00:14:29,040
going to choose

343
00:14:25,920 --> 00:14:31,439
alpha um

344
00:14:29,040 --> 00:14:32,399
well uh the first thing we can notice is

345
00:14:31,440 --> 00:14:35,600
that

346
00:14:32,399 --> 00:14:38,639
uh the impact of the constant additions

347
00:14:35,600 --> 00:14:41,839
is limited to these s boxes with

348
00:14:38,639 --> 00:14:42,839
indices in zero one two and three so the

349
00:14:41,839 --> 00:14:47,360
first four

350
00:14:42,839 --> 00:14:50,320
indices now a second observation is that

351
00:14:47,360 --> 00:14:51,600
bits with indices 22 and 23 in each of

352
00:14:50,320 --> 00:14:54,800
the four input words of

353
00:14:51,600 --> 00:14:57,519
a super s box have no influence

354
00:14:54,800 --> 00:14:59,040
on the output bits within this is in 0 1

355
00:14:57,519 --> 00:15:04,480
2 3

356
00:14:59,040 --> 00:15:07,680
and this stems from the l box layer

357
00:15:04,480 --> 00:15:11,040
so we can define a vector space nabla

358
00:15:07,680 --> 00:15:14,079
such that for every alpha

359
00:15:11,040 --> 00:15:17,120
and nabla the xor

360
00:15:14,079 --> 00:15:20,638
of sigma x and

361
00:15:17,120 --> 00:15:24,240
sigma x or alpha equals zero

362
00:15:20,639 --> 00:15:25,199
on the last four bits this means that if

363
00:15:24,240 --> 00:15:27,279
we add

364
00:15:25,199 --> 00:15:29,680
the round constants right after the

365
00:15:27,279 --> 00:15:31,360
super s boxes

366
00:15:29,680 --> 00:15:33,279
then they will cancel out in the

367
00:15:31,360 --> 00:15:36,320
difference and so

368
00:15:33,279 --> 00:15:40,160
the states can be

369
00:15:36,320 --> 00:15:43,199
equal identical

370
00:15:40,160 --> 00:15:44,959
so that's how we construct step uh the

371
00:15:43,199 --> 00:15:48,319
pair for step two

372
00:15:44,959 --> 00:15:50,319
um now step three um like i said

373
00:15:48,320 --> 00:15:51,519
it's simply a matter of propagating a

374
00:15:50,320 --> 00:15:53,680
three identical state

375
00:15:51,519 --> 00:15:56,720
and that has a probability of 2 to the

376
00:15:53,680 --> 00:15:56,719
power of minus 9.

377
00:15:56,800 --> 00:16:01,279
now for step 4 well we aim for a

378
00:16:00,160 --> 00:16:04,480
difference of the form

379
00:16:01,279 --> 00:16:06,079
0 0 0 delta at the end of the step

380
00:16:04,480 --> 00:16:08,720
so by writing the corresponding

381
00:16:06,079 --> 00:16:12,079
equations

382
00:16:08,720 --> 00:16:15,199
what we find is that these

383
00:16:12,079 --> 00:16:17,920
four equalities need to be satisfied and

384
00:16:15,199 --> 00:16:23,279
each of them has a probability of 2 to

385
00:16:17,920 --> 00:16:27,519
the power of minus 2.415

386
00:16:23,279 --> 00:16:30,639
and once that is um fulfilled

387
00:16:27,519 --> 00:16:33,120
then we automatically automatically have

388
00:16:30,639 --> 00:16:34,480
the required difference of the form star

389
00:16:33,120 --> 00:16:37,759
star star zero

390
00:16:34,480 --> 00:16:41,600
at the end of step 5. so

391
00:16:37,759 --> 00:16:47,680
in total we have a probability

392
00:16:41,600 --> 00:16:51,360
of 2 to the power of minus 16.245

393
00:16:47,680 --> 00:16:52,719
to summarize um first we are going to

394
00:16:51,360 --> 00:16:55,920
select a difference

395
00:16:52,720 --> 00:17:00,000
alpha in nabla

396
00:16:55,920 --> 00:17:01,360
then we are we can select a state that

397
00:17:00,000 --> 00:17:03,600
is three identical

398
00:17:01,360 --> 00:17:05,919
that is going to be the state at the end

399
00:17:03,600 --> 00:17:09,439
of step two

400
00:17:05,919 --> 00:17:12,720
then we can invert step two to obtain

401
00:17:09,439 --> 00:17:14,880
the input of step two and from that

402
00:17:12,720 --> 00:17:15,760
input we are going to create a pair of

403
00:17:14,880 --> 00:17:17,679
state

404
00:17:15,760 --> 00:17:19,039
such that the difference is alpha alpha

405
00:17:17,679 --> 00:17:21,919
alpha is zero

406
00:17:19,039 --> 00:17:23,599
and if we go backwards to step zero then

407
00:17:21,919 --> 00:17:26,480
we obtain a state a pair of

408
00:17:23,599 --> 00:17:28,559
shadow states with a zero difference in

409
00:17:26,480 --> 00:17:32,000
the last bundle

410
00:17:28,559 --> 00:17:36,240
and this pair satisfied the differential

411
00:17:32,000 --> 00:17:38,640
trail with a with high probability

412
00:17:36,240 --> 00:17:41,520
that is higher that than 2 to the power

413
00:17:38,640 --> 00:17:41,520
of minus 16.

414
00:17:42,320 --> 00:17:48,720
so that's that's it for the

415
00:17:45,440 --> 00:17:52,799
six step distinguisher

416
00:17:48,720 --> 00:17:55,120
now if we were to add two extra rounds

417
00:17:52,799 --> 00:17:56,080
to the complete version of shadow to

418
00:17:55,120 --> 00:17:58,399
create a

419
00:17:56,080 --> 00:18:00,639
seven step version then the

420
00:17:58,400 --> 00:18:03,440
distinguisher would actually

421
00:18:00,640 --> 00:18:05,760
extend to that seven step at no extra

422
00:18:03,440 --> 00:18:05,760
cost

423
00:18:07,280 --> 00:18:12,840
now real quick i will just show you the

424
00:18:10,400 --> 00:18:15,760
shadow 384 case

425
00:18:12,840 --> 00:18:16,639
um and as i said previously the

426
00:18:15,760 --> 00:18:20,720
distinguisher

427
00:18:16,640 --> 00:18:20,720
works from step one to step five

428
00:18:21,520 --> 00:18:28,080
if it could also extend to

429
00:18:24,559 --> 00:18:30,480
an extra seven step um

430
00:18:28,080 --> 00:18:33,600
and in that case it would it would be a

431
00:18:30,480 --> 00:18:36,640
shifted version of the full shadow 384

432
00:18:33,600 --> 00:18:38,000
um but the reason why we cannot cover

433
00:18:36,640 --> 00:18:41,520
step zero

434
00:18:38,000 --> 00:18:44,720
um is because of d

435
00:18:41,520 --> 00:18:45,918
and the round constants so the middle

436
00:18:44,720 --> 00:18:48,880
rounds of the attack

437
00:18:45,919 --> 00:18:50,880
cannot be moved and that's because of

438
00:18:48,880 --> 00:18:53,679
the round constants because we need to

439
00:18:50,880 --> 00:18:58,960
be able to cancel out the constants

440
00:18:53,679 --> 00:18:58,960
to propagate some identical states

441
00:18:59,200 --> 00:19:06,799
but because of the d layer we had to use

442
00:19:03,520 --> 00:19:09,200
a different path that only has

443
00:19:06,799 --> 00:19:11,200
two active bundles at each round which

444
00:19:09,200 --> 00:19:14,080
leads to two unknown differences

445
00:19:11,200 --> 00:19:14,880
at the beginning of step one and that

446
00:19:14,080 --> 00:19:18,559
gives

447
00:19:14,880 --> 00:19:18,559
no info on round zero

448
00:19:19,840 --> 00:19:23,600
i'm not going to go into more details

449
00:19:21,840 --> 00:19:24,639
but it's very similar to what we've done

450
00:19:23,600 --> 00:19:27,678
previously

451
00:19:24,640 --> 00:19:30,880
and more details are available

452
00:19:27,679 --> 00:19:32,880
in our paper so now

453
00:19:30,880 --> 00:19:34,480
we're going to enter the final part of

454
00:19:32,880 --> 00:19:39,440
this talk

455
00:19:34,480 --> 00:19:42,559
which is focused on forgery

456
00:19:39,440 --> 00:19:45,600
so our attack targets spook in

457
00:19:42,559 --> 00:19:46,399
its uh what is called uh aggressive

458
00:19:45,600 --> 00:19:47,760
parameters

459
00:19:46,400 --> 00:19:49,760
uh which were introduced by the

460
00:19:47,760 --> 00:19:52,480
designers as um

461
00:19:49,760 --> 00:19:54,640
an interesting target for cryptanalysis

462
00:19:52,480 --> 00:19:58,160
and these parameters

463
00:19:54,640 --> 00:20:01,360
specify 12 rounds for clyde 128

464
00:19:58,160 --> 00:20:05,760
and 4 rounds for shadow 512

465
00:20:01,360 --> 00:20:07,600
also four steps so our attack considers

466
00:20:05,760 --> 00:20:11,039
the shadow permutation

467
00:20:07,600 --> 00:20:14,158
um but restricted to rounds two to five

468
00:20:11,039 --> 00:20:16,000
so it's a shifted version and what we're

469
00:20:14,159 --> 00:20:19,120
going to do is that we're going to

470
00:20:16,000 --> 00:20:19,679
build two different plain texts that

471
00:20:19,120 --> 00:20:22,959
yield

472
00:20:19,679 --> 00:20:26,240
the same tag using the same nuns

473
00:20:22,960 --> 00:20:29,440
three times so we will be in the

474
00:20:26,240 --> 00:20:32,840
non-misused scenario but it is allowed

475
00:20:29,440 --> 00:20:35,520
by the security game considered by the

476
00:20:32,840 --> 00:20:39,120
authors

477
00:20:35,520 --> 00:20:42,559
so here is uh s1p s1p

478
00:20:39,120 --> 00:20:45,439
is a sponge based mode of authenticated

479
00:20:42,559 --> 00:20:45,918
encryption with associated data that

480
00:20:45,440 --> 00:20:50,240
uses

481
00:20:45,919 --> 00:20:54,559
shadow as its underlying permutation

482
00:20:50,240 --> 00:20:58,400
it has a rate of size 256 bits

483
00:20:54,559 --> 00:21:02,158
and a capacity of the same size so 256

484
00:20:58,400 --> 00:21:03,360
bits so bundles zero and one are the

485
00:21:02,159 --> 00:21:05,679
rate part

486
00:21:03,360 --> 00:21:06,959
and bundles two and three are the

487
00:21:05,679 --> 00:21:10,880
capacity part

488
00:21:06,960 --> 00:21:14,159
and we can't see the capacity part

489
00:21:10,880 --> 00:21:16,000
in our attack setting um so for the sake

490
00:21:14,159 --> 00:21:20,159
of simplicity we're going to consider

491
00:21:16,000 --> 00:21:22,880
a version of s1p without associated data

492
00:21:20,159 --> 00:21:24,400
and we are only going to consider two

493
00:21:22,880 --> 00:21:27,440
block messages

494
00:21:24,400 --> 00:21:31,600
um so four bundles

495
00:21:27,440 --> 00:21:34,080
uh m0 and m1

496
00:21:31,600 --> 00:21:35,360
pi is going to be the shadow permutation

497
00:21:34,080 --> 00:21:38,480
reduced to step

498
00:21:35,360 --> 00:21:41,600
two to five initialize

499
00:21:38,480 --> 00:21:43,039
is a procedure combining pi and the

500
00:21:41,600 --> 00:21:47,039
clyde block cipher

501
00:21:43,039 --> 00:21:50,960
to produce a 512-bit state

502
00:21:47,039 --> 00:21:54,400
from a nonce and and a secret key k

503
00:21:50,960 --> 00:21:57,960
and finalize is a procedure that

504
00:21:54,400 --> 00:22:01,280
produces a authentication tag of

505
00:21:57,960 --> 00:22:05,039
128 bits from

506
00:22:01,280 --> 00:22:05,039
a 512-bit state

507
00:22:05,600 --> 00:22:09,918
so here is um the differential trail

508
00:22:08,480 --> 00:22:13,120
that we are going to use

509
00:22:09,919 --> 00:22:14,640
um and i won't go into the details but

510
00:22:13,120 --> 00:22:15,600
it's very similar to what i've shown you

511
00:22:14,640 --> 00:22:17,520
before

512
00:22:15,600 --> 00:22:19,760
um in this case we only need to

513
00:22:17,520 --> 00:22:23,200
propagate two identical states

514
00:22:19,760 --> 00:22:30,000
and um the probability equals

515
00:22:23,200 --> 00:22:30,000
two to the power of minus uh 24.83

516
00:22:31,120 --> 00:22:36,639
so what do we have so we have this

517
00:22:34,559 --> 00:22:40,080
property for pi

518
00:22:36,640 --> 00:22:43,120
that's pi and um basically

519
00:22:40,080 --> 00:22:43,520
this allows us to find a collision on

520
00:22:43,120 --> 00:22:46,158
the

521
00:22:43,520 --> 00:22:48,480
capacity part of the state after

522
00:22:46,159 --> 00:22:51,520
applying pi

523
00:22:48,480 --> 00:22:53,840
but um we still need a

524
00:22:51,520 --> 00:22:55,760
collision on the part as well on the

525
00:22:53,840 --> 00:22:58,240
rate part

526
00:22:55,760 --> 00:23:00,720
because if we want two different plane

527
00:22:58,240 --> 00:23:04,400
types to yield the same tag

528
00:23:00,720 --> 00:23:07,760
then we need to generate two messages

529
00:23:04,400 --> 00:23:12,640
m0 m1 and m prime zero m prime 1

530
00:23:07,760 --> 00:23:12,640
that yield a 0 difference after pi

531
00:23:14,960 --> 00:23:22,240
so we're going to need three queries

532
00:23:18,480 --> 00:23:24,559
to do so so the first one will allow us

533
00:23:22,240 --> 00:23:28,320
to recover the value

534
00:23:24,559 --> 00:23:32,158
of the rate part after

535
00:23:28,320 --> 00:23:35,439
initialize so since the nonce is reused

536
00:23:32,159 --> 00:23:36,000
this value stays the same for the

537
00:23:35,440 --> 00:23:39,440
remaining

538
00:23:36,000 --> 00:23:40,559
of the attack and to recover this value

539
00:23:39,440 --> 00:23:43,840
we are going to encrypt

540
00:23:40,559 --> 00:23:47,678
a two block message so four bundles

541
00:23:43,840 --> 00:23:50,240
that is equal to zero zero zero zero

542
00:23:47,679 --> 00:23:51,279
and uh the first part the first block of

543
00:23:50,240 --> 00:23:54,799
the ciphertext

544
00:23:51,279 --> 00:23:55,679
c0 will give us the two bundle rate

545
00:23:54,799 --> 00:23:59,120
value

546
00:23:55,679 --> 00:24:04,320
after initialize so we're going to

547
00:23:59,120 --> 00:24:05,918
denote it x1 y1

548
00:24:04,320 --> 00:24:07,600
so now that we know the value of the

549
00:24:05,919 --> 00:24:10,400
rate after initialize

550
00:24:07,600 --> 00:24:11,520
um we can generate two pairs of raid

551
00:24:10,400 --> 00:24:14,559
bundles

552
00:24:11,520 --> 00:24:19,200
um x prime one y prime one and

553
00:24:14,559 --> 00:24:22,000
x second one y second one that satisfied

554
00:24:19,200 --> 00:24:24,720
the truncated channel that we found in

555
00:24:22,000 --> 00:24:26,400
our distinguisher

556
00:24:24,720 --> 00:24:28,000
now we need to know the value of the

557
00:24:26,400 --> 00:24:30,400
rate

558
00:24:28,000 --> 00:24:32,240
after pi and that way by choosing the

559
00:24:30,400 --> 00:24:34,799
right second block of the plain text

560
00:24:32,240 --> 00:24:36,240
we can cancel it out and find a

561
00:24:34,799 --> 00:24:40,000
collision on the tag

562
00:24:36,240 --> 00:24:42,080
but first let's recover that difference

563
00:24:40,000 --> 00:24:43,760
so we're going to encrypt two messages

564
00:24:42,080 --> 00:24:44,559
built from the pair that satisfy the

565
00:24:43,760 --> 00:24:47,279
trail

566
00:24:44,559 --> 00:24:48,559
exhort with the initialized value that

567
00:24:47,279 --> 00:24:51,679
we've recovered

568
00:24:48,559 --> 00:24:56,000
and each time the second part of this

569
00:24:51,679 --> 00:24:56,880
cyber text c1 will give us the value of

570
00:24:56,000 --> 00:24:59,200
the rates

571
00:24:56,880 --> 00:25:01,039
after pi so we're going to call this

572
00:24:59,200 --> 00:25:05,039
value denote this value by

573
00:25:01,039 --> 00:25:09,120
c prime 2 c prime 3 and c second to

574
00:25:05,039 --> 00:25:10,480
c second 3. now that we know the value

575
00:25:09,120 --> 00:25:14,239
of the rate parts

576
00:25:10,480 --> 00:25:17,440
after pi well we can cancel it by

577
00:25:14,240 --> 00:25:20,720
injecting it uh so by injecting

578
00:25:17,440 --> 00:25:23,840
um the previous ciphertext that we found

579
00:25:20,720 --> 00:25:28,799
into the second block of

580
00:25:23,840 --> 00:25:31,840
a plane and this will cancel out

581
00:25:28,799 --> 00:25:36,799
the rate parts after pi

582
00:25:31,840 --> 00:25:41,600
and so with a probability

583
00:25:36,799 --> 00:25:46,000
equals to about 2 to the power of -24

584
00:25:41,600 --> 00:25:48,879
then the internal states before finalize

585
00:25:46,000 --> 00:25:52,159
are equal which means that we have a

586
00:25:48,880 --> 00:25:52,159
collision on the tag

587
00:25:54,159 --> 00:26:00,400
so that's the end of uh my presentation

588
00:25:57,279 --> 00:26:03,679
uh to summarize i have presented

589
00:26:00,400 --> 00:26:04,640
um two practical distinguishers uh so

590
00:26:03,679 --> 00:26:07,840
one on the

591
00:26:04,640 --> 00:26:10,080
six step version of shadow 512 and

592
00:26:07,840 --> 00:26:11,199
one on a step step-reduced version of

593
00:26:10,080 --> 00:26:14,559
shadow 384

594
00:26:11,200 --> 00:26:18,000
are the full version but shifted

595
00:26:14,559 --> 00:26:21,039
and that some forgeries are possible

596
00:26:18,000 --> 00:26:22,400
with a four-step shadow for the s1p mode

597
00:26:21,039 --> 00:26:25,760
of operation

598
00:26:22,400 --> 00:26:29,200
in the non-misused scenario as a

599
00:26:25,760 --> 00:26:30,080
consequence of our work um the authors

600
00:26:29,200 --> 00:26:32,720
have proposed

601
00:26:30,080 --> 00:26:34,080
um a second version of a spook called

602
00:26:32,720 --> 00:26:37,200
spook v2

603
00:26:34,080 --> 00:26:40,399
which includes a new matrix

604
00:26:37,200 --> 00:26:42,640
which is mds this time for efficiency

605
00:26:40,400 --> 00:26:43,600
the round constants of shadow have been

606
00:26:42,640 --> 00:26:46,480
changed

607
00:26:43,600 --> 00:26:47,360
for efficiency as well and there is

608
00:26:46,480 --> 00:26:49,520
currently a

609
00:26:47,360 --> 00:26:51,520
second mathematical cryptanalysis

610
00:26:49,520 --> 00:26:54,559
challenge ongoing so

611
00:26:51,520 --> 00:26:56,879
feel free to go to their website and

612
00:26:54,559 --> 00:27:01,840
have a look

613
00:26:56,880 --> 00:27:01,840
um finally i think our work

614
00:27:02,000 --> 00:27:06,960
defines a new criterion for choosing the

615
00:27:04,480 --> 00:27:11,440
round constants

616
00:27:06,960 --> 00:27:14,559
in a way that they do not only prevent

617
00:27:11,440 --> 00:27:17,279
invariant subspaces attacks but they

618
00:27:14,559 --> 00:27:21,440
also need to be chosen carefully

619
00:27:17,279 --> 00:27:24,240
in such a way that their effect

620
00:27:21,440 --> 00:27:26,080
cannot be cancelled out in the internal

621
00:27:24,240 --> 00:27:28,720
symmetries

622
00:27:26,080 --> 00:27:29,360
so thank you for your attention and if

623
00:27:28,720 --> 00:27:33,679
you have

624
00:27:29,360 --> 00:27:36,240
any questions um i guess i'll see you

625
00:27:33,679 --> 00:27:36,240
at the

