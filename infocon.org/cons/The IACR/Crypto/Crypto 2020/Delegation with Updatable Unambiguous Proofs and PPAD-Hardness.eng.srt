1
00:00:01,040 --> 00:00:05,200
today we'll see how to obtain

2
00:00:03,040 --> 00:00:06,640
delegation schemes with updatable and

3
00:00:05,200 --> 00:00:10,000
unambiguous proofs

4
00:00:06,640 --> 00:00:12,480
and show ppad hardness this is based on

5
00:00:10,000 --> 00:00:15,920
joint work with yael talman kalai

6
00:00:12,480 --> 00:00:16,240
and omar panet the delegation scheme a

7
00:00:15,920 --> 00:00:18,400
weak

8
00:00:16,239 --> 00:00:19,840
machine such as a smartwatch wants to

9
00:00:18,400 --> 00:00:22,159
learn the outcome of a costly

10
00:00:19,840 --> 00:00:23,920
computation

11
00:00:22,160 --> 00:00:25,519
he doesn't have the resources to perform

12
00:00:23,920 --> 00:00:28,080
the computation himself

13
00:00:25,519 --> 00:00:30,000
so he'll delegate it to a more powerful

14
00:00:28,080 --> 00:00:32,238
machine such as the cloud

15
00:00:30,000 --> 00:00:35,760
who will perform the computation and

16
00:00:32,238 --> 00:00:35,760
return the output y

17
00:00:35,920 --> 00:00:40,719
now he doesn't just want to trust the

18
00:00:37,360 --> 00:00:43,360
cloud so he also asks for a proof pi

19
00:00:40,719 --> 00:00:45,360
to check that the output y is indeed the

20
00:00:43,360 --> 00:00:47,600
correct output

21
00:00:45,360 --> 00:00:49,039
and importantly checking this proof

22
00:00:47,600 --> 00:00:52,960
should take much less time than

23
00:00:49,039 --> 00:00:52,960
performing the original computation

24
00:00:53,360 --> 00:00:59,840
so the question we ask is can verifying

25
00:00:55,920 --> 00:00:59,840
actually be faster than computing

26
00:01:01,359 --> 00:01:05,600
in prior constructions of delegation

27
00:01:03,359 --> 00:01:08,880
schemes the verifier needed access

28
00:01:05,600 --> 00:01:12,479
to secret trap door information in order

29
00:01:08,880 --> 00:01:14,880
to check the proof

30
00:01:12,479 --> 00:01:16,560
and what we're after today is is a

31
00:01:14,880 --> 00:01:17,839
notion of a publicly verifiable

32
00:01:16,560 --> 00:01:19,600
delegation scheme

33
00:01:17,840 --> 00:01:21,119
where the prover can write down the

34
00:01:19,600 --> 00:01:23,919
statement and proof

35
00:01:21,119 --> 00:01:24,240
in in a public place such as a in a book

36
00:01:23,920 --> 00:01:27,280
or

37
00:01:24,240 --> 00:01:28,720
on the internet and anyone can come and

38
00:01:27,280 --> 00:01:33,200
verify the proof

39
00:01:28,720 --> 00:01:36,560
without needing any trapdoor information

40
00:01:33,200 --> 00:01:38,079
and to to actually realize such

41
00:01:36,560 --> 00:01:41,360
schemes will work in the common

42
00:01:38,079 --> 00:01:43,520
reference string or crs model

43
00:01:41,360 --> 00:01:45,520
now publicly verifiable delegation

44
00:01:43,520 --> 00:01:47,600
schemes are

45
00:01:45,520 --> 00:01:48,640
essential uh to decentralize

46
00:01:47,600 --> 00:01:50,960
applications

47
00:01:48,640 --> 00:01:52,399
such as cryptocurrencies and blockchains

48
00:01:50,960 --> 00:01:55,520
where you really want to

49
00:01:52,399 --> 00:01:57,920
allow anyone to be able to verify the

50
00:01:55,520 --> 00:01:57,920
proofs

51
00:01:59,439 --> 00:02:03,119
and there's been a lot of prior work on

52
00:02:01,040 --> 00:02:06,079
publicly verifiable delegation

53
00:02:03,119 --> 00:02:07,840
first we had many constructions but they

54
00:02:06,079 --> 00:02:10,639
were all based on pretty strong

55
00:02:07,840 --> 00:02:13,200
cryptographic assumptions

56
00:02:10,639 --> 00:02:15,599
more recently we have constructions of

57
00:02:13,200 --> 00:02:17,280
publicly verifiable delegation schemes

58
00:02:15,599 --> 00:02:19,280
based on weaker cryptographic

59
00:02:17,280 --> 00:02:21,840
assumptions so last year

60
00:02:19,280 --> 00:02:22,720
we had a delegation for bound to death

61
00:02:21,840 --> 00:02:24,400
circuits

62
00:02:22,720 --> 00:02:26,239
based on what was called the optimal

63
00:02:24,400 --> 00:02:28,959
security of lwe

64
00:02:26,239 --> 00:02:30,800
and this and this assumption was reduced

65
00:02:28,959 --> 00:02:33,599
to sub-exponential lwe

66
00:02:30,800 --> 00:02:33,599
in the recent work

67
00:02:33,840 --> 00:02:38,239
and also last year we had a construction

68
00:02:36,480 --> 00:02:39,679
of a delegation scheme for polynomial

69
00:02:38,239 --> 00:02:42,480
time computations

70
00:02:39,680 --> 00:02:44,560
based on a bilinear group assumption and

71
00:02:42,480 --> 00:02:47,200
today we'll be building upon this

72
00:02:44,560 --> 00:02:51,840
delegation scheme by making its proofs

73
00:02:47,200 --> 00:02:51,839
updateable and unambiguous

74
00:02:51,920 --> 00:02:56,238
so the first notion that we're after

75
00:02:54,000 --> 00:02:59,040
today is is the notion of updatable

76
00:02:56,239 --> 00:03:02,000
proofs which is introduced by valiant

77
00:02:59,040 --> 00:03:02,959
and in this setting we have a long

78
00:03:02,000 --> 00:03:06,640
computation

79
00:03:02,959 --> 00:03:07,040
going from c0 to ct which is carried out

80
00:03:06,640 --> 00:03:10,319
over

81
00:03:07,040 --> 00:03:10,319
b separate iterations

82
00:03:12,640 --> 00:03:19,679
and at at any point in time you'll have

83
00:03:16,080 --> 00:03:20,879
some prefix of the computation that's

84
00:03:19,680 --> 00:03:23,040
been carried out

85
00:03:20,879 --> 00:03:26,480
and and a proof for the computation

86
00:03:23,040 --> 00:03:26,480
that's been carried out so far

87
00:03:27,280 --> 00:03:32,879
now we want to allow any approver to

88
00:03:31,920 --> 00:03:36,319
perform

89
00:03:32,879 --> 00:03:39,280
the next block of the computation and

90
00:03:36,319 --> 00:03:41,760
to update the proof from pi i into pi i

91
00:03:39,280 --> 00:03:44,640
plus one

92
00:03:41,760 --> 00:03:46,560
and and importantly the time to update

93
00:03:44,640 --> 00:03:48,319
the proof should take

94
00:03:46,560 --> 00:03:50,000
time proportional to the amount of

95
00:03:48,319 --> 00:03:53,760
computation he performed

96
00:03:50,000 --> 00:03:55,120
so in particular if if a large amount of

97
00:03:53,760 --> 00:03:56,000
the computation has already been

98
00:03:55,120 --> 00:03:58,480
performed

99
00:03:56,000 --> 00:04:00,159
we don't want the prover to have to redo

100
00:03:58,480 --> 00:04:03,518
any of that computation

101
00:04:00,159 --> 00:04:03,519
in order to update his proof

102
00:04:04,319 --> 00:04:07,760
and secondly we also want the proofs to

103
00:04:06,159 --> 00:04:09,439
remain succinct

104
00:04:07,760 --> 00:04:10,879
so they shouldn't so the size of the

105
00:04:09,439 --> 00:04:14,879
proof should not grow with

106
00:04:10,879 --> 00:04:17,918
the number of iterations v

107
00:04:14,879 --> 00:04:19,599
a potential solution would be to have

108
00:04:17,918 --> 00:04:21,279
the prover

109
00:04:19,600 --> 00:04:22,880
simply perform the next block of the

110
00:04:21,279 --> 00:04:24,960
computation and

111
00:04:22,880 --> 00:04:26,479
append a fresh proof just for the part

112
00:04:24,960 --> 00:04:29,039
that he performed

113
00:04:26,479 --> 00:04:32,400
but of course then the proof uh would

114
00:04:29,040 --> 00:04:35,360
grow with the number of updates

115
00:04:32,400 --> 00:04:37,280
so today we'll see how to um get

116
00:04:35,360 --> 00:04:39,440
updatable proofs

117
00:04:37,280 --> 00:04:43,599
with both the efficiency and the six and

118
00:04:39,440 --> 00:04:46,160
the succinctness properties

119
00:04:43,600 --> 00:04:48,080
and previously uh the constructions of

120
00:04:46,160 --> 00:04:51,199
of updatable proofs

121
00:04:48,080 --> 00:04:53,440
were based on snarks which we only know

122
00:04:51,199 --> 00:04:56,160
under pretty strong assumptions whereas

123
00:04:53,440 --> 00:05:00,160
today will construct updatable proofs

124
00:04:56,160 --> 00:05:00,160
from a falsifiable assumption

125
00:05:00,560 --> 00:05:07,360
the second notion we're after is the

126
00:05:03,600 --> 00:05:09,440
notion of unambiguous proofs

127
00:05:07,360 --> 00:05:10,960
we say that the delegation scheme has

128
00:05:09,440 --> 00:05:14,479
unambiguous proofs

129
00:05:10,960 --> 00:05:16,719
if it's hard for approver to generate

130
00:05:14,479 --> 00:05:19,280
two different accepting proofs for the

131
00:05:16,720 --> 00:05:23,039
same statement

132
00:05:19,280 --> 00:05:25,440
so our result is a delegation scheme

133
00:05:23,039 --> 00:05:28,000
that's publicly verifiable and has both

134
00:05:25,440 --> 00:05:30,400
updatable and unambiguous proofs

135
00:05:28,000 --> 00:05:33,759
and is based on the following the

136
00:05:30,400 --> 00:05:36,320
decisional bilinear group assumption

137
00:05:33,759 --> 00:05:37,280
in the assumption the adversary is given

138
00:05:36,320 --> 00:05:40,320
this three by

139
00:05:37,280 --> 00:05:43,198
alpha matrix of a

140
00:05:40,320 --> 00:05:46,639
bilinear group elements where alpha is

141
00:05:43,199 --> 00:05:48,720
logarithmic in the security parameter

142
00:05:46,639 --> 00:05:49,919
and while this assumption is new it's

143
00:05:48,720 --> 00:05:51,680
similar in spirit

144
00:05:49,919 --> 00:05:53,680
to the wide range of bilinear group

145
00:05:51,680 --> 00:05:55,280
assumptions made previously

146
00:05:53,680 --> 00:05:57,600
and also holds in the generic group

147
00:05:55,280 --> 00:05:57,599
model

148
00:05:59,120 --> 00:06:02,400
so using this delegation scheme we show

149
00:06:01,440 --> 00:06:05,919
p-pad hardness

150
00:06:02,400 --> 00:06:08,080
based on the quasi-polynomial hardness

151
00:06:05,919 --> 00:06:11,120
of this bi-linear group assumption

152
00:06:08,080 --> 00:06:11,680
and also the existence of any hard

153
00:06:11,120 --> 00:06:13,840
language

154
00:06:11,680 --> 00:06:16,319
l that's decidable in super polynomial

155
00:06:13,840 --> 00:06:19,280
time and polynomial space

156
00:06:16,319 --> 00:06:20,319
and so for instance assuming the

157
00:06:19,280 --> 00:06:23,440
hardness of sat

158
00:06:20,319 --> 00:06:26,960
for subexponential size circuits or

159
00:06:23,440 --> 00:06:28,639
assuming a non-non-uniform eth

160
00:06:26,960 --> 00:06:30,799
would suffice to instantiate the hard

161
00:06:28,639 --> 00:06:32,720
language l

162
00:06:30,800 --> 00:06:34,240
and we use our delegation scheme to show

163
00:06:32,720 --> 00:06:35,039
p-pad hardness by following the

164
00:06:34,240 --> 00:06:37,840
blueprint of

165
00:06:35,039 --> 00:06:41,120
chanduri atel so today we'll just focus

166
00:06:37,840 --> 00:06:43,440
on the delegation scheme itself

167
00:06:41,120 --> 00:06:44,240
and for those who aren't familiar ppad

168
00:06:43,440 --> 00:06:46,800
is

169
00:06:44,240 --> 00:06:48,240
an important complexity class of total

170
00:06:46,800 --> 00:06:50,639
search problems

171
00:06:48,240 --> 00:06:52,720
that's known to contain the problem of

172
00:06:50,639 --> 00:06:54,960
computing nash equilibria

173
00:06:52,720 --> 00:06:55,840
and there's actually been a lot of work

174
00:06:54,960 --> 00:06:59,680
um

175
00:06:55,840 --> 00:07:02,159
trying to show ppad hardness based on

176
00:06:59,680 --> 00:07:03,840
cryptographic assumptions

177
00:07:02,160 --> 00:07:05,280
so the first of these works show p-pad

178
00:07:03,840 --> 00:07:06,880
harness based on pretty strong

179
00:07:05,280 --> 00:07:08,638
assumptions

180
00:07:06,880 --> 00:07:10,080
and just recently there were several

181
00:07:08,639 --> 00:07:14,240
works showing

182
00:07:10,080 --> 00:07:16,318
p-pad harness based on lwe assumptions

183
00:07:14,240 --> 00:07:18,479
and all of these works uh proceed by

184
00:07:16,319 --> 00:07:19,360
applying fiat shamir to an interactive

185
00:07:18,479 --> 00:07:22,159
protocol

186
00:07:19,360 --> 00:07:23,759
for a specific language and you can

187
00:07:22,160 --> 00:07:26,000
actually think of

188
00:07:23,759 --> 00:07:28,160
this as constructing a a publicly

189
00:07:26,000 --> 00:07:30,880
verifiable delegation scheme

190
00:07:28,160 --> 00:07:34,880
uh with updatable and unambiguous proofs

191
00:07:30,880 --> 00:07:34,880
but just for the particular language

192
00:07:35,039 --> 00:07:39,680
and so the first of these works relied

193
00:07:38,080 --> 00:07:42,719
on

194
00:07:39,680 --> 00:07:45,280
the security of fiat shimir or or

195
00:07:42,720 --> 00:07:46,319
the optimal security of lwe and just

196
00:07:45,280 --> 00:07:52,318
recently

197
00:07:46,319 --> 00:07:52,319
this was reduced to subexponential lwe

198
00:07:52,720 --> 00:07:56,160
another related work shows the hardness

199
00:07:55,680 --> 00:07:59,520
of

200
00:07:56,160 --> 00:08:01,599
pls which is another class

201
00:07:59,520 --> 00:08:03,280
of total search problems and they

202
00:08:01,599 --> 00:08:05,919
proceed by

203
00:08:03,280 --> 00:08:08,638
making the kpy delegation scheme have

204
00:08:05,919 --> 00:08:11,359
updatable proofs

205
00:08:08,639 --> 00:08:13,120
but for ppad hardness we will need both

206
00:08:11,360 --> 00:08:16,560
the updatability

207
00:08:13,120 --> 00:08:16,560
and unambiguity properties

208
00:08:17,840 --> 00:08:22,159
so so for the rest of this talk we'll

209
00:08:20,000 --> 00:08:24,560
just focus on the delegation scheme

210
00:08:22,160 --> 00:08:26,879
and we'll start with showing how to make

211
00:08:24,560 --> 00:08:30,639
its proofs updatable

212
00:08:26,879 --> 00:08:33,279
so as i mentioned previous works

213
00:08:30,639 --> 00:08:35,360
obtain updatable proofs but based on

214
00:08:33,279 --> 00:08:37,120
pretty strong assumptions and what we do

215
00:08:35,360 --> 00:08:38,959
is we use the same technique of

216
00:08:37,120 --> 00:08:40,880
recursive proof composition

217
00:08:38,958 --> 00:08:43,760
but we show how to do this without using

218
00:08:40,880 --> 00:08:43,760
strong assumptions

219
00:08:43,919 --> 00:08:50,399
and in particular we ex we extend the

220
00:08:47,920 --> 00:08:52,399
idea of local extraction which is

221
00:08:50,399 --> 00:08:54,880
introduced in kpy

222
00:08:52,399 --> 00:08:55,760
uh in in order to obtain updatable

223
00:08:54,880 --> 00:08:59,200
proofs under

224
00:08:55,760 --> 00:08:59,200
this bilinear group assumption

225
00:08:59,839 --> 00:09:04,000
so recall in the setting of updatable

226
00:09:01,680 --> 00:09:05,439
proofs we'll have a proof pie for the

227
00:09:04,000 --> 00:09:07,360
part of the computation that's been

228
00:09:05,440 --> 00:09:11,360
performed so far

229
00:09:07,360 --> 00:09:13,200
and to update pi we could just append a

230
00:09:11,360 --> 00:09:16,560
proof for the computation

231
00:09:13,200 --> 00:09:17,600
that we perform but then the proof will

232
00:09:16,560 --> 00:09:20,000
grow with the number of

233
00:09:17,600 --> 00:09:20,000
updates

234
00:09:20,800 --> 00:09:24,240
so at any point in time the proof could

235
00:09:23,519 --> 00:09:27,839
contain

236
00:09:24,240 --> 00:09:29,440
b proofs pi sub i for separate parts of

237
00:09:27,839 --> 00:09:31,360
the computation

238
00:09:29,440 --> 00:09:32,880
and what we'd like to do is we like to

239
00:09:31,360 --> 00:09:36,080
prevent the proof from growing

240
00:09:32,880 --> 00:09:37,839
by shrinking it back down so what we'd

241
00:09:36,080 --> 00:09:38,320
like to do is is we would like to merge

242
00:09:37,839 --> 00:09:41,680
the b

243
00:09:38,320 --> 00:09:42,720
proofs and replace the b proofs with the

244
00:09:41,680 --> 00:09:45,040
single proof pi

245
00:09:42,720 --> 00:09:45,040
prime

246
00:09:46,320 --> 00:09:50,560
and well and and our construction of

247
00:09:48,880 --> 00:09:52,720
this merge operation

248
00:09:50,560 --> 00:09:53,760
will just consist of verifying each of

249
00:09:52,720 --> 00:09:55,839
the b proofs

250
00:09:53,760 --> 00:09:59,600
and then generating a proof pi prime for

251
00:09:55,839 --> 00:09:59,600
this verification computation

252
00:10:00,880 --> 00:10:04,240
and now the proof of pi prime will be

253
00:10:03,200 --> 00:10:09,040
shorter than

254
00:10:04,240 --> 00:10:11,519
the length of the b proofs from before

255
00:10:09,040 --> 00:10:13,040
and so we've succeeded in reducing the

256
00:10:11,519 --> 00:10:15,680
size of the proof

257
00:10:13,040 --> 00:10:16,399
but unfortunately this verification

258
00:10:15,680 --> 00:10:19,680
computation

259
00:10:16,399 --> 00:10:21,920
is non-deterministic and so

260
00:10:19,680 --> 00:10:22,880
it's not actually clear how to prove uh

261
00:10:21,920 --> 00:10:25,199
that

262
00:10:22,880 --> 00:10:26,560
that this is that this transformation

263
00:10:25,200 --> 00:10:30,079
preserves soundness

264
00:10:26,560 --> 00:10:32,160
uh because we know from uh works on

265
00:10:30,079 --> 00:10:35,359
non-deterministic delegation

266
00:10:32,160 --> 00:10:37,519
that in general it's hard to extract

267
00:10:35,360 --> 00:10:40,000
a lot of information such as the b

268
00:10:37,519 --> 00:10:42,320
proofs from a single short proof pi

269
00:10:40,000 --> 00:10:42,320
prime

270
00:10:42,640 --> 00:10:46,160
so previous works actually assume that

271
00:10:44,800 --> 00:10:50,079
you can extract all b

272
00:10:46,160 --> 00:10:53,920
proofs by relying on strong assumptions

273
00:10:50,079 --> 00:10:56,239
what we do is we instead extract small

274
00:10:53,920 --> 00:10:57,839
parts of the proof

275
00:10:56,240 --> 00:11:00,800
and and show that each of these small

276
00:10:57,839 --> 00:11:03,120
parts can actually be pieced together

277
00:11:00,800 --> 00:11:05,760
via via a technique that we call local

278
00:11:03,120 --> 00:11:05,760
extraction

279
00:11:05,839 --> 00:11:10,320
and and this is how we'll get updatable

280
00:11:08,959 --> 00:11:15,040
proofs under

281
00:11:10,320 --> 00:11:16,720
a falsifiable assumption

282
00:11:15,040 --> 00:11:18,319
so for the rest of this talk we'll just

283
00:11:16,720 --> 00:11:21,760
focus on obtaining

284
00:11:18,320 --> 00:11:23,680
unambiguous proofs so first

285
00:11:21,760 --> 00:11:26,560
we need to understand a little bit more

286
00:11:23,680 --> 00:11:29,359
about the kpy delegation scheme

287
00:11:26,560 --> 00:11:30,319
so in the delegation scheme the prover

288
00:11:29,360 --> 00:11:33,519
performs

289
00:11:30,320 --> 00:11:37,200
the computation and and writes down

290
00:11:33,519 --> 00:11:40,480
the tableau which he encodes via a

291
00:11:37,200 --> 00:11:44,880
a polynomial f and now

292
00:11:40,480 --> 00:11:47,040
the crs contains homomorphic encryptions

293
00:11:44,880 --> 00:11:48,000
of queries to this tableau which you can

294
00:11:47,040 --> 00:11:51,599
just think of

295
00:11:48,000 --> 00:11:51,600
as inputs to this polynomial

296
00:11:51,760 --> 00:11:54,800
and the prover will homomorphically

297
00:11:53,279 --> 00:11:57,839
evaluate the answers and

298
00:11:54,800 --> 00:11:59,519
and send them back as a proof

299
00:11:57,839 --> 00:12:02,000
then the verifier will publicly check

300
00:11:59,519 --> 00:12:03,920
the proof pie using an operation called

301
00:12:02,000 --> 00:12:06,000
the zero test which acts on the cipher

302
00:12:03,920 --> 00:12:07,839
text themselves

303
00:12:06,000 --> 00:12:10,240
this notion was introduced in the work

304
00:12:07,839 --> 00:12:13,680
of pr and constructed

305
00:12:10,240 --> 00:12:15,040
in in the work of kpy and we won't go

306
00:12:13,680 --> 00:12:17,839
into the details

307
00:12:15,040 --> 00:12:21,279
today but this is how the public

308
00:12:17,839 --> 00:12:23,120
verifiability is obtained

309
00:12:21,279 --> 00:12:24,959
so next we'll see how to make this

310
00:12:23,120 --> 00:12:26,720
delegation scheme have unambiguous

311
00:12:24,959 --> 00:12:28,638
proofs

312
00:12:26,720 --> 00:12:30,800
so the first observation is since the

313
00:12:28,639 --> 00:12:32,480
proof consists of cipher text

314
00:12:30,800 --> 00:12:36,079
we'll have to use an encryption scheme

315
00:12:32,480 --> 00:12:39,279
that has an unambiguity property

316
00:12:36,079 --> 00:12:41,760
and our property will save

317
00:12:39,279 --> 00:12:42,800
and our property will require that any

318
00:12:41,760 --> 00:12:44,160
cheating prover

319
00:12:42,800 --> 00:12:45,760
cannot generate two different

320
00:12:44,160 --> 00:12:48,160
ciphertexts that encrypt the same

321
00:12:45,760 --> 00:12:48,160
message

322
00:12:48,480 --> 00:12:52,000
this property might seem a little

323
00:12:49,839 --> 00:12:53,920
counter-intuitive but it's pretty

324
00:12:52,000 --> 00:12:56,720
easy to see that it holds in the kpy

325
00:12:53,920 --> 00:12:56,719
encryption scheme

326
00:12:57,920 --> 00:13:03,360
in in this encryption scheme a secret

327
00:13:01,440 --> 00:13:07,120
key is a random field element

328
00:13:03,360 --> 00:13:10,000
s and a ciphertext is just an encoding

329
00:13:07,120 --> 00:13:12,720
of a low-degree polynomial r that passes

330
00:13:10,000 --> 00:13:17,279
through the message at the secret key

331
00:13:12,720 --> 00:13:19,360
and so now if if approver succeeds in

332
00:13:17,279 --> 00:13:20,480
in generating two different ciphertext c

333
00:13:19,360 --> 00:13:23,040
and c prime

334
00:13:20,480 --> 00:13:23,600
that encrypt the same message then r and

335
00:13:23,040 --> 00:13:26,639
r prime

336
00:13:23,600 --> 00:13:28,560
are two different polynomials that

337
00:13:26,639 --> 00:13:31,920
agree at a random point as with

338
00:13:28,560 --> 00:13:31,920
noticeable probability

339
00:13:32,480 --> 00:13:35,519
so with this unambiguous ciphertext

340
00:13:34,720 --> 00:13:38,079
property

341
00:13:35,519 --> 00:13:39,199
it suffices just to ensure that the

342
00:13:38,079 --> 00:13:41,839
answers underneath

343
00:13:39,199 --> 00:13:45,519
the encryption are unambiguous and this

344
00:13:41,839 --> 00:13:45,519
will give us unambiguous proofs

345
00:13:46,639 --> 00:13:51,279
so now we'll just focus on ensuring the

346
00:13:49,199 --> 00:13:53,920
unambiguity of the answers underneath

347
00:13:51,279 --> 00:13:53,920
the encryption

348
00:13:54,800 --> 00:13:58,560
so recall that the prover encodes the

349
00:13:57,600 --> 00:14:02,000
computation

350
00:13:58,560 --> 00:14:03,680
via a polynomial f and it and actually

351
00:14:02,000 --> 00:14:05,279
the honest proverb will encode this

352
00:14:03,680 --> 00:14:07,839
polynomial

353
00:14:05,279 --> 00:14:11,439
by by taking the multilinear extension

354
00:14:07,839 --> 00:14:11,440
of the computation tableau

355
00:14:12,079 --> 00:14:16,399
following the work of prr we can show

356
00:14:14,240 --> 00:14:17,920
that for queries in 0 1

357
00:14:16,399 --> 00:14:20,639
the corresponding answers will be

358
00:14:17,920 --> 00:14:24,560
unambiguous because they correspond to a

359
00:14:20,639 --> 00:14:27,199
deterministic computation tableau

360
00:14:24,560 --> 00:14:28,479
but for the unambiguous ciphertext

361
00:14:27,199 --> 00:14:30,959
property we need to

362
00:14:28,480 --> 00:14:31,680
ensure the unambiguity of answers for

363
00:14:30,959 --> 00:14:35,680
queries in

364
00:14:31,680 --> 00:14:38,800
f if we could ensure that the prover

365
00:14:35,680 --> 00:14:42,079
evaluates a multi-linear polynomial f

366
00:14:38,800 --> 00:14:45,040
then we could use the unambiguity for 0

367
00:14:42,079 --> 00:14:46,880
1 to show an ambiguity for for every

368
00:14:45,040 --> 00:14:49,279
query

369
00:14:46,880 --> 00:14:51,439
and so the idea is to ask the prover to

370
00:14:49,279 --> 00:14:54,800
send a proof of multilinearity

371
00:14:51,440 --> 00:14:55,839
for his evaluated cipher text but it's

372
00:14:54,800 --> 00:14:58,800
not clear that

373
00:14:55,839 --> 00:15:00,480
an adversarial prover has to evaluate

374
00:14:58,800 --> 00:15:02,959
any polynomial

375
00:15:00,480 --> 00:15:04,639
to compute his answers and even if we

376
00:15:02,959 --> 00:15:06,079
could ensure that he evaluates some

377
00:15:04,639 --> 00:15:08,079
polynomial

378
00:15:06,079 --> 00:15:10,839
it's not clear how to get a succinct

379
00:15:08,079 --> 00:15:12,959
proof that he's evaluating a multilinear

380
00:15:10,839 --> 00:15:15,279
polynomial

381
00:15:12,959 --> 00:15:17,199
for instance if he sends back the

382
00:15:15,279 --> 00:15:20,160
polynomial itself

383
00:15:17,199 --> 00:15:20,639
then the then the communication grows

384
00:15:20,160 --> 00:15:24,000
with

385
00:15:20,639 --> 00:15:26,720
the size of the computation

386
00:15:24,000 --> 00:15:27,279
and so again we're stuck with the task

387
00:15:26,720 --> 00:15:30,320
of

388
00:15:27,279 --> 00:15:31,519
designing a succinct proof for a

389
00:15:30,320 --> 00:15:34,880
potentially large

390
00:15:31,519 --> 00:15:34,880
non-deterministic statement

391
00:15:35,600 --> 00:15:40,720
and we do this by in introducing the

392
00:15:38,560 --> 00:15:43,518
notion of local multilinearity

393
00:15:40,720 --> 00:15:46,320
which will allow us to construct a a

394
00:15:43,519 --> 00:15:46,320
succinct proof

395
00:15:46,800 --> 00:15:53,279
so our proof of local multilinearity

396
00:15:50,880 --> 00:15:54,880
will ask the approver for the

397
00:15:53,279 --> 00:15:57,120
restriction of the polynomial

398
00:15:54,880 --> 00:15:58,800
f in each coordinate so this will

399
00:15:57,120 --> 00:16:01,839
consist of encryptions of a

400
00:15:58,800 --> 00:16:05,680
i b i that describe a line

401
00:16:01,839 --> 00:16:08,800
passing through the evaluation of f

402
00:16:05,680 --> 00:16:10,079
at the point q sub i

403
00:16:08,800 --> 00:16:12,079
and the verifier will check the

404
00:16:10,079 --> 00:16:14,560
consistency of

405
00:16:12,079 --> 00:16:16,880
these restrictions and the evaluation of

406
00:16:14,560 --> 00:16:19,599
f using the zero test

407
00:16:16,880 --> 00:16:20,160
the problem with this protocol is that

408
00:16:19,600 --> 00:16:22,240
since

409
00:16:20,160 --> 00:16:24,000
the encryption is homomorphic an

410
00:16:22,240 --> 00:16:25,680
adversarial approver can use the

411
00:16:24,000 --> 00:16:29,440
encryption of q sub i

412
00:16:25,680 --> 00:16:32,479
and compute different restrictions

413
00:16:29,440 --> 00:16:32,959
and so our idea is to encrypt the query

414
00:16:32,480 --> 00:16:35,360
again

415
00:16:32,959 --> 00:16:36,638
but without the if coordinate and to ask

416
00:16:35,360 --> 00:16:39,519
the prover

417
00:16:36,639 --> 00:16:42,240
for the restriction in in the

418
00:16:39,519 --> 00:16:42,240
i-coordinate

419
00:16:42,880 --> 00:16:49,680
and so now we'll have the guarantee that

420
00:16:47,120 --> 00:16:50,800
the second restriction is computed

421
00:16:49,680 --> 00:16:53,839
independently of

422
00:16:50,800 --> 00:16:56,319
q sub i and so all we have to do is

423
00:16:53,839 --> 00:16:59,600
test that this restriction agrees with

424
00:16:56,320 --> 00:17:01,600
the original restriction

425
00:16:59,600 --> 00:17:03,040
and to do this we construct what we call

426
00:17:01,600 --> 00:17:05,760
a proof of equality

427
00:17:03,040 --> 00:17:08,000
that allows approver to prove that he

428
00:17:05,760 --> 00:17:11,439
evaluated the same function

429
00:17:08,000 --> 00:17:12,319
on both encryptions and this will allow

430
00:17:11,439 --> 00:17:15,520
the prover

431
00:17:12,319 --> 00:17:17,199
to prove that a b and a prime b prime

432
00:17:15,520 --> 00:17:18,639
are the same

433
00:17:17,199 --> 00:17:20,880
then we'll have our proof of local

434
00:17:18,640 --> 00:17:23,439
multilinearity that ensures the

435
00:17:20,880 --> 00:17:25,199
unambiguity of answers

436
00:17:23,439 --> 00:17:27,520
and recall that together with the

437
00:17:25,199 --> 00:17:30,080
unambiguous ciphertext property

438
00:17:27,520 --> 00:17:32,080
this ensures the unambiguity of the

439
00:17:30,080 --> 00:17:33,600
provers proof

440
00:17:32,080 --> 00:17:35,520
so then we'll have constructed a

441
00:17:33,600 --> 00:17:38,799
delegation scheme with updatable

442
00:17:35,520 --> 00:17:38,799
and unambiguous proofs

443
00:17:39,039 --> 00:17:44,320
but we aren't quite done yet because to

444
00:17:42,559 --> 00:17:46,480
show the unambiguity of

445
00:17:44,320 --> 00:17:48,159
the entire proof we actually need to

446
00:17:46,480 --> 00:17:50,480
show the unambiguity of the other

447
00:17:48,160 --> 00:17:52,799
ciphertext in the kpy proof

448
00:17:50,480 --> 00:17:54,400
so far we've just described how to show

449
00:17:52,799 --> 00:17:57,600
the unambiguity

450
00:17:54,400 --> 00:18:01,440
of a ciphertext that corresponds to

451
00:17:57,600 --> 00:18:03,678
the computation tableau

452
00:18:01,440 --> 00:18:05,440
and we'll also have to show that the

453
00:18:03,679 --> 00:18:07,440
unambiguity of all the cipher checks

454
00:18:05,440 --> 00:18:09,160
that we added to the proof

455
00:18:07,440 --> 00:18:11,840
in constructing these equality and

456
00:18:09,160 --> 00:18:13,840
multilinearity proofs

457
00:18:11,840 --> 00:18:16,320
once we do that we'll have unambiguous

458
00:18:13,840 --> 00:18:19,439
proofs but we still need to ensure

459
00:18:16,320 --> 00:18:21,520
that the unambiguity is preserved in

460
00:18:19,440 --> 00:18:24,799
the in the recursive proof composition

461
00:18:21,520 --> 00:18:26,559
that allows us to get updatable proofs

462
00:18:24,799 --> 00:18:28,000
in the full version of our work we do

463
00:18:26,559 --> 00:18:31,678
indeed show how

464
00:18:28,000 --> 00:18:31,679
to perform these other steps

465
00:18:32,320 --> 00:18:36,080
and this allows us to obtain our

466
00:18:34,320 --> 00:18:37,520
delegation scheme with updatable and

467
00:18:36,080 --> 00:18:39,600
unambiguous proofs

468
00:18:37,520 --> 00:18:42,799
based on the bilinear group assumption

469
00:18:39,600 --> 00:18:45,360
introduced in kpy

470
00:18:42,799 --> 00:18:46,160
and recall that a corollary of this

471
00:18:45,360 --> 00:18:48,678
result

472
00:18:46,160 --> 00:18:50,480
is p-pad harness based on the

473
00:18:48,679 --> 00:18:54,080
quasi-polynomial hardness

474
00:18:50,480 --> 00:18:56,720
of this assumption to conclude

475
00:18:54,080 --> 00:18:57,840
i just want to highlight the idea that

476
00:18:56,720 --> 00:19:02,320
underlies

477
00:18:57,840 --> 00:19:03,879
our result which is the power of local

478
00:19:02,320 --> 00:19:07,120
proofs in the setting of

479
00:19:03,880 --> 00:19:10,480
non-deterministic statements

480
00:19:07,120 --> 00:19:13,280
so in in non-deterministic delegation

481
00:19:10,480 --> 00:19:15,280
we know that in general it's hard to

482
00:19:13,280 --> 00:19:18,720
extract a lot of information

483
00:19:15,280 --> 00:19:22,080
from from a very short proof

484
00:19:18,720 --> 00:19:25,200
but by using locality we're able to

485
00:19:22,080 --> 00:19:27,280
to construct succinct proofs for

486
00:19:25,200 --> 00:19:28,559
seemingly large non-deterministic

487
00:19:27,280 --> 00:19:31,200
statements obtain

488
00:19:28,559 --> 00:19:34,160
updatable and unambiguous proofs under

489
00:19:31,200 --> 00:19:34,160
standard assumptions

490
00:19:36,000 --> 00:19:39,840
thank you for your time

