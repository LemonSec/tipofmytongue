1
00:00:01,760 --> 00:00:06,798
i think we are good to go then

2
00:00:04,000 --> 00:00:08,160
so hello everyone and welcome to the

3
00:00:06,799 --> 00:00:11,120
session

4
00:00:08,160 --> 00:00:12,960
of crypto 2020 which is going to be

5
00:00:11,120 --> 00:00:15,759
about zero knowledge proofs

6
00:00:12,960 --> 00:00:17,520
mostly we're gonna have seven talks most

7
00:00:15,759 --> 00:00:19,199
of them are going to be about

8
00:00:17,520 --> 00:00:20,800
zero knowledge proofs but i think all of

9
00:00:19,199 --> 00:00:21,439
them are going to be about proofs so

10
00:00:20,800 --> 00:00:24,720
that's

11
00:00:21,439 --> 00:00:27,759
probably unifying all of them i

12
00:00:24,720 --> 00:00:31,198
am going to now introduce

13
00:00:27,760 --> 00:00:32,640
the authors of the first paper the paper

14
00:00:31,199 --> 00:00:34,399
is going to be called

15
00:00:32,640 --> 00:00:36,719
it's called compressed sigma protocol

16
00:00:34,399 --> 00:00:38,800
theory and practical application to plug

17
00:00:36,719 --> 00:00:42,239
and play secure algorithmics

18
00:00:38,800 --> 00:00:44,399
by thomas anthony and ronald cramer

19
00:00:42,239 --> 00:00:46,399
and i believe thomas is going to give

20
00:00:44,399 --> 00:00:51,280
the talk

21
00:00:46,399 --> 00:00:55,600
here we go oh ronald is giving the talk

22
00:00:51,280 --> 00:00:55,600
you hear me yes okay

23
00:00:57,360 --> 00:01:00,079
just a second

24
00:01:00,559 --> 00:01:06,798
okay good great um hello everyone

25
00:01:04,559 --> 00:01:08,080
so this is about compressed sigma

26
00:01:06,799 --> 00:01:10,080
protocol theory

27
00:01:08,080 --> 00:01:12,560
and uh just joined work with my student

28
00:01:10,080 --> 00:01:16,320
uh thomas atoma

29
00:01:12,560 --> 00:01:18,799
all right okay so um

30
00:01:16,320 --> 00:01:19,520
sigma protocol theory uh the you know

31
00:01:18,799 --> 00:01:22,720
the

32
00:01:19,520 --> 00:01:24,399
the theory around three move uh zero

33
00:01:22,720 --> 00:01:26,479
knowledge protocols

34
00:01:24,400 --> 00:01:28,880
is a well-established basis for zero

35
00:01:26,479 --> 00:01:32,320
knowledge proofs already for decades

36
00:01:28,880 --> 00:01:34,880
and if we uh zoom in on the question of

37
00:01:32,320 --> 00:01:36,880
uh how to base circuit zero knowledge on

38
00:01:34,880 --> 00:01:38,880
uh on sigma protocols

39
00:01:36,880 --> 00:01:41,199
there are lots of examples of how to

40
00:01:38,880 --> 00:01:43,520
achieve sort of linear communication

41
00:01:41,200 --> 00:01:46,520
complexity meaning circuit size

42
00:01:43,520 --> 00:01:49,439
time security parameter basically now in

43
00:01:46,520 --> 00:01:51,119
2016 and 2018

44
00:01:49,439 --> 00:01:54,559
bullet proofs have been introduced by

45
00:01:51,119 --> 00:01:56,960
bootlet all duracrypt 2016 and bins at

46
00:01:54,560 --> 00:01:59,240
all at crypto 2018

47
00:01:56,960 --> 00:02:00,880
where they dramatically reduce the

48
00:01:59,240 --> 00:02:03,119
communication

49
00:02:00,880 --> 00:02:04,640
it's no longer linear but logarithmic

50
00:02:03,119 --> 00:02:06,399
now at the core of this method

51
00:02:04,640 --> 00:02:08,720
is an ingenious recursive proof of

52
00:02:06,399 --> 00:02:10,800
knowledge for quadratic relations

53
00:02:08,720 --> 00:02:12,720
on a long secret committed vector in a

54
00:02:10,800 --> 00:02:14,800
compact commitment

55
00:02:12,720 --> 00:02:16,800
and this work has at least been

56
00:02:14,800 --> 00:02:18,480
presented as a drop-in replacement for

57
00:02:16,800 --> 00:02:20,400
sigma protocols

58
00:02:18,480 --> 00:02:22,000
due to this dramatic reduction in

59
00:02:20,400 --> 00:02:24,560
communication now in this

60
00:02:22,000 --> 00:02:26,080
work that i'm now presenting to you what

61
00:02:24,560 --> 00:02:28,080
we'll be discussing is

62
00:02:26,080 --> 00:02:29,840
how to reconcile bullet proofs with

63
00:02:28,080 --> 00:02:32,480
sigma protocol theory

64
00:02:29,840 --> 00:02:34,800
and the conclusion that we propose is

65
00:02:32,480 --> 00:02:37,040
that rather than being a replacement

66
00:02:34,800 --> 00:02:38,720
bullet actually presents a strengthening

67
00:02:37,040 --> 00:02:40,239
of sigma protocol theory so it's a

68
00:02:38,720 --> 00:02:43,519
completely diametric

69
00:02:40,239 --> 00:02:45,840
position now how we're going to do this

70
00:02:43,519 --> 00:02:46,879
uh now what we're going to introduce is

71
00:02:45,840 --> 00:02:49,599
a novel natural

72
00:02:46,879 --> 00:02:50,000
circuit zero knowledge protocol from

73
00:02:49,599 --> 00:02:52,879
sigma

74
00:02:50,000 --> 00:02:54,720
protocols with linear communication and

75
00:02:52,879 --> 00:02:57,599
then using an adapted

76
00:02:54,720 --> 00:02:58,720
an adaptation of the core bulletproof

77
00:02:57,599 --> 00:03:00,640
proof of knowledge

78
00:02:58,720 --> 00:03:02,800
we're going to compress this in a black

79
00:03:00,640 --> 00:03:04,079
box fashion as an afterthought

80
00:03:02,800 --> 00:03:05,760
and as a result we're going to get

81
00:03:04,080 --> 00:03:08,239
logarithmic communication or even

82
00:03:05,760 --> 00:03:08,239
constant

83
00:03:08,879 --> 00:03:12,399
okay so what is our high level approach

84
00:03:11,680 --> 00:03:14,239
so

85
00:03:12,400 --> 00:03:15,760
at the highest level what we're going to

86
00:03:14,239 --> 00:03:18,080
do is we're going to deal with

87
00:03:15,760 --> 00:03:19,679
linear instances first so linear

88
00:03:18,080 --> 00:03:22,159
circuits only so to speak

89
00:03:19,680 --> 00:03:23,120
and then linearize the non-linear

90
00:03:22,159 --> 00:03:25,040
instances

91
00:03:23,120 --> 00:03:26,560
and from a mathematical perspective this

92
00:03:25,040 --> 00:03:29,359
is perfectly natural

93
00:03:26,560 --> 00:03:30,000
problem solving strategy the point here

94
00:03:29,360 --> 00:03:32,159
is that

95
00:03:30,000 --> 00:03:33,360
bulletproof's pivotal proof of knowledge

96
00:03:32,159 --> 00:03:35,440
is for quadratic

97
00:03:33,360 --> 00:03:36,640
relation on compactly committed long

98
00:03:35,440 --> 00:03:39,359
vector and that

99
00:03:36,640 --> 00:03:40,319
necessitated some reinvention of

100
00:03:39,360 --> 00:03:43,360
protocol theory

101
00:03:40,319 --> 00:03:45,599
to an extent so we're going to do play

102
00:03:43,360 --> 00:03:46,959
this game in a completely different way

103
00:03:45,599 --> 00:03:50,319
so let me first

104
00:03:46,959 --> 00:03:52,480
explain how to uh approach the

105
00:03:50,319 --> 00:03:54,159
the linear instances so using

106
00:03:52,480 --> 00:03:57,200
appropriate appropriate compact

107
00:03:54,159 --> 00:03:59,840
commitments to long secret vectors

108
00:03:57,200 --> 00:04:01,839
there is a natural honest verifier zero

109
00:03:59,840 --> 00:04:04,560
knowledge sigma protocol for r

110
00:04:01,840 --> 00:04:05,760
for opening arbitrarily linear forms on

111
00:04:04,560 --> 00:04:08,560
the secret vector

112
00:04:05,760 --> 00:04:10,319
yeah so you can see this in the paper

113
00:04:08,560 --> 00:04:12,400
i'm not going to try to explain this to

114
00:04:10,319 --> 00:04:15,599
you now but it is very natural

115
00:04:12,400 --> 00:04:18,079
and this will have linear communication

116
00:04:15,599 --> 00:04:18,719
now the observation that we make here is

117
00:04:18,079 --> 00:04:20,400
that we

118
00:04:18,720 --> 00:04:22,079
make a suitable adaptation of the

119
00:04:20,399 --> 00:04:24,638
pivotal bulletproof uh

120
00:04:22,079 --> 00:04:26,639
proof of knowledge this recursive proof

121
00:04:24,639 --> 00:04:28,720
of knowledge for quadratic relation

122
00:04:26,639 --> 00:04:30,720
on a committed long vector that i spoke

123
00:04:28,720 --> 00:04:32,800
about in the previous slide

124
00:04:30,720 --> 00:04:33,919
then what we can do is we can use this

125
00:04:32,800 --> 00:04:36,479
adaptation

126
00:04:33,919 --> 00:04:37,599
to compress the sigma protocol

127
00:04:36,479 --> 00:04:39,758
essentially it's its

128
00:04:37,600 --> 00:04:41,280
third and final round which has linear

129
00:04:39,759 --> 00:04:43,040
size the rest is smaller

130
00:04:41,280 --> 00:04:45,280
but we can compress that in a black box

131
00:04:43,040 --> 00:04:47,360
fashion so the results the overall

132
00:04:45,280 --> 00:04:49,758
result is logarithmic communication

133
00:04:47,360 --> 00:04:51,919
and we've only used the core an

134
00:04:49,759 --> 00:04:54,840
adaptation of the core of bulletproof

135
00:04:51,919 --> 00:04:57,120
to just black box compress this last

136
00:04:54,840 --> 00:04:59,440
message

137
00:04:57,120 --> 00:05:01,440
to get logarithmic complexity now how do

138
00:04:59,440 --> 00:05:04,160
we handle the non-linear instances

139
00:05:01,440 --> 00:05:05,840
now what we use is an adaptation of a

140
00:05:04,160 --> 00:05:08,960
paper from 2012

141
00:05:05,840 --> 00:05:10,880
icits by damgard pastro and myself this

142
00:05:08,960 --> 00:05:13,120
paper ports techniques from information

143
00:05:10,880 --> 00:05:14,960
theoretic multi-party computation to

144
00:05:13,120 --> 00:05:16,800
of course two-party sigma protocol

145
00:05:14,960 --> 00:05:18,799
theory and this is inspired by a

146
00:05:16,800 --> 00:05:20,800
combination of my paper with dumgarten

147
00:05:18,800 --> 00:05:23,680
mauter from eurocrypt2000

148
00:05:20,800 --> 00:05:24,479
on mpc from linear secret sharing and

149
00:05:23,680 --> 00:05:26,240
the npc

150
00:05:24,479 --> 00:05:28,159
in the head paper by ishaiko shi

151
00:05:26,240 --> 00:05:30,880
levitostrovsky

152
00:05:28,160 --> 00:05:33,199
so what does our paper do from 2012

153
00:05:30,880 --> 00:05:35,440
using one-dimensional homomorphic commit

154
00:05:33,199 --> 00:05:37,120
commitments one-dimensional meaning

155
00:05:35,440 --> 00:05:38,479
single field elements are committed to

156
00:05:37,120 --> 00:05:40,800
no longer vectors

157
00:05:38,479 --> 00:05:42,639
and in addition with arithmetic secret

158
00:05:40,800 --> 00:05:43,440
sharing we get an efficient sigma

159
00:05:42,639 --> 00:05:45,840
protocol

160
00:05:43,440 --> 00:05:48,000
to prove long vectors of committed

161
00:05:45,840 --> 00:05:52,159
committed multiplication triples

162
00:05:48,000 --> 00:05:54,400
correct yeah all right so what the

163
00:05:52,160 --> 00:05:55,440
verifier does in this protocol that he

164
00:05:54,400 --> 00:05:58,638
chooses he does

165
00:05:55,440 --> 00:06:00,560
random randomly pokes randomly tests

166
00:05:58,639 --> 00:06:01,680
local multiplicative properties of

167
00:06:00,560 --> 00:06:03,520
multip of

168
00:06:01,680 --> 00:06:05,600
secret sharings that's the thing to

169
00:06:03,520 --> 00:06:06,639
remember now the observation that we

170
00:06:05,600 --> 00:06:10,319
make here

171
00:06:06,639 --> 00:06:12,400
is that given a compact commitment to

172
00:06:10,319 --> 00:06:13,759
well the multiplication triples

173
00:06:12,400 --> 00:06:16,000
themselves plus

174
00:06:13,759 --> 00:06:18,080
appropriate correlated randomness we can

175
00:06:16,000 --> 00:06:20,080
get a similar sigma protocol

176
00:06:18,080 --> 00:06:21,680
but with a constant number of black box

177
00:06:20,080 --> 00:06:23,520
calls to the

178
00:06:21,680 --> 00:06:25,440
uh protocol that i discussed in point

179
00:06:23,520 --> 00:06:27,680
one yeah so that is the

180
00:06:25,440 --> 00:06:28,479
the compressed sigma protocol for linear

181
00:06:27,680 --> 00:06:31,680
openings

182
00:06:28,479 --> 00:06:32,719
as a result we get a logarithmic size or

183
00:06:31,680 --> 00:06:35,120
constant size

184
00:06:32,720 --> 00:06:36,800
proof for lung vectors of compactly

185
00:06:35,120 --> 00:06:39,919
committed multiplication triple so

186
00:06:36,800 --> 00:06:44,080
that's a long way towards zero knowledge

187
00:06:39,919 --> 00:06:47,039
so um for the specialized reduction

188
00:06:44,080 --> 00:06:48,880
uh from circuit zero knowledge to this

189
00:06:47,039 --> 00:06:49,680
primitive of verifying multiplication

190
00:06:48,880 --> 00:06:52,560
triples

191
00:06:49,680 --> 00:06:54,240
what we do is we compactly commit we

192
00:06:52,560 --> 00:06:54,880
have the prover compactly commit to the

193
00:06:54,240 --> 00:06:57,000
inputs

194
00:06:54,880 --> 00:06:58,560
of a circuit the outputs of the

195
00:06:57,000 --> 00:07:00,479
multiplication gates

196
00:06:58,560 --> 00:07:02,560
and correlated randomness and now we do

197
00:07:00,479 --> 00:07:03,758
a reduction that combines point one with

198
00:07:02,560 --> 00:07:05,680
point two a

199
00:07:03,759 --> 00:07:07,840
now the inputs to multiplications in the

200
00:07:05,680 --> 00:07:08,720
circuit are linear forms on all ancestor

201
00:07:07,840 --> 00:07:10,239
variables

202
00:07:08,720 --> 00:07:12,639
so that means that the relevant secret

203
00:07:10,240 --> 00:07:14,960
sharings are accessible as linear forms

204
00:07:12,639 --> 00:07:16,000
so then it's uh it's easy to see that

205
00:07:14,960 --> 00:07:18,080
the rest of the

206
00:07:16,000 --> 00:07:21,440
argument boils down to verifying long

207
00:07:18,080 --> 00:07:23,919
vectors of multiplication triples

208
00:07:21,440 --> 00:07:24,560
so what we do in addition so that's that

209
00:07:23,919 --> 00:07:26,159
covers the

210
00:07:24,560 --> 00:07:27,680
zero knowledge the circuit zero

211
00:07:26,160 --> 00:07:29,039
knowledge but we also need auxiliary

212
00:07:27,680 --> 00:07:30,400
protocols that for what we call

213
00:07:29,039 --> 00:07:32,159
compactification

214
00:07:30,400 --> 00:07:34,159
so far the prover is committed to an

215
00:07:32,160 --> 00:07:35,840
input vector that he wants to prove

216
00:07:34,160 --> 00:07:38,960
something about

217
00:07:35,840 --> 00:07:40,799
and and and the outputs of the of the uh

218
00:07:38,960 --> 00:07:42,159
multiplication gates and he's committed

219
00:07:40,800 --> 00:07:44,479
in the same commitment to

220
00:07:42,160 --> 00:07:45,280
correlated randomness but the reality in

221
00:07:44,479 --> 00:07:47,039
practice

222
00:07:45,280 --> 00:07:49,039
would more likely be that at the start

223
00:07:47,039 --> 00:07:50,080
of a protocol the prover is just

224
00:07:49,039 --> 00:07:51,840
committed to some

225
00:07:50,080 --> 00:07:53,520
secret input vector that he wants to

226
00:07:51,840 --> 00:07:56,239
prove some property about

227
00:07:53,520 --> 00:07:58,479
so that could be that either he's

228
00:07:56,240 --> 00:08:00,960
compactly committed to this

229
00:07:58,479 --> 00:08:02,000
to this vector or this commitment is

230
00:08:00,960 --> 00:08:04,638
dispersed

231
00:08:02,000 --> 00:08:06,720
across several lower dimension no

232
00:08:04,639 --> 00:08:09,520
commitments for instance

233
00:08:06,720 --> 00:08:10,560
so if we use the machinery that i just

234
00:08:09,520 --> 00:08:13,758
discussed

235
00:08:10,560 --> 00:08:15,440
plus additional ideas we can compactify

236
00:08:13,759 --> 00:08:17,199
this all into a commitment that's

237
00:08:15,440 --> 00:08:19,039
suitable for the zero knowledge protocol

238
00:08:17,199 --> 00:08:20,800
that i discussed under two

239
00:08:19,039 --> 00:08:22,400
and the communication will be the same

240
00:08:20,800 --> 00:08:25,520
actually so this is

241
00:08:22,400 --> 00:08:26,638
uh this is another modular add-on of our

242
00:08:25,520 --> 00:08:29,758
work that is not so

243
00:08:26,639 --> 00:08:32,080
explicitly uh moderately discussed in in

244
00:08:29,759 --> 00:08:35,680
previous work

245
00:08:32,080 --> 00:08:36,880
now um when it comes to which platforms

246
00:08:35,679 --> 00:08:40,010
would support

247
00:08:36,880 --> 00:08:41,200
this type of uh this type of

248
00:08:40,010 --> 00:08:43,120
[Music]

249
00:08:41,200 --> 00:08:45,600
protocol that i've just discussed now

250
00:08:43,120 --> 00:08:48,080
for logarithmic communication

251
00:08:45,600 --> 00:08:49,920
um we can base it on the discrete log

252
00:08:48,080 --> 00:08:54,320
same as bullet proofs

253
00:08:49,920 --> 00:08:58,240
strong rsa in class groups uh

254
00:08:54,320 --> 00:08:59,200
on rsa if we assume a multi-party setup

255
00:08:58,240 --> 00:09:01,920
of

256
00:08:59,200 --> 00:09:03,519
the modulus we have to note that for the

257
00:09:01,920 --> 00:09:05,199
discrete log case which is what that

258
00:09:03,519 --> 00:09:07,680
bulletproofs looks at that we're that

259
00:09:05,200 --> 00:09:09,600
our communication complexity is the same

260
00:09:07,680 --> 00:09:11,760
even down to the constants in the big o

261
00:09:09,600 --> 00:09:13,600
the constant is equal to two

262
00:09:11,760 --> 00:09:15,360
now interestingly there are separate

263
00:09:13,600 --> 00:09:17,680
lines of works on zero knowledge

264
00:09:15,360 --> 00:09:18,959
snarks that get uh constant

265
00:09:17,680 --> 00:09:22,160
communication instead of

266
00:09:18,959 --> 00:09:24,319
logarithmic and our paradigm

267
00:09:22,160 --> 00:09:26,079
also supports that by sticking in a

268
00:09:24,320 --> 00:09:26,640
knowledge of exponent assumption and we

269
00:09:26,080 --> 00:09:29,519
get

270
00:09:26,640 --> 00:09:31,760
constant communication as for lattices

271
00:09:29,519 --> 00:09:34,000
it should also work based on lattices

272
00:09:31,760 --> 00:09:35,760
but more work is needed to establish the

273
00:09:34,000 --> 00:09:36,880
efficiency because with lattices you

274
00:09:35,760 --> 00:09:40,240
have all the

275
00:09:36,880 --> 00:09:43,680
issues about soundless slack so

276
00:09:40,240 --> 00:09:45,360
more study is is required now recent

277
00:09:43,680 --> 00:09:49,120
work

278
00:09:45,360 --> 00:09:52,080
is worked with my student

279
00:09:49,120 --> 00:09:54,560
atima and with sarah sphere we have used

280
00:09:52,080 --> 00:09:56,880
this theory plus additional ideas

281
00:09:54,560 --> 00:09:59,199
to give proofs of k comma and partial

282
00:09:56,880 --> 00:10:01,040
knowledge with logarithmic complexity

283
00:09:59,200 --> 00:10:02,640
and there's recent or an upcoming work

284
00:10:01,040 --> 00:10:04,719
by schumachers and segregas

285
00:10:02,640 --> 00:10:06,720
using the compressed sigma protocols for

286
00:10:04,720 --> 00:10:08,320
verifiable mpc

287
00:10:06,720 --> 00:10:10,240
so i don't know how much time i have

288
00:10:08,320 --> 00:10:12,240
left it's about

289
00:10:10,240 --> 00:10:13,600
one minute to including the time that

290
00:10:12,240 --> 00:10:16,160
you wanted for questions

291
00:10:13,600 --> 00:10:17,519
oh okay well so then let me just finish

292
00:10:16,160 --> 00:10:20,800
with some historical

293
00:10:17,519 --> 00:10:24,880
remark this idea of

294
00:10:20,800 --> 00:10:27,040
getting very fast zero knowledge out of

295
00:10:24,880 --> 00:10:28,320
compactly committed long vectors that

296
00:10:27,040 --> 00:10:31,279
allow

297
00:10:28,320 --> 00:10:31,600
fast opening of linear forms goes back

298
00:10:31,279 --> 00:10:35,279
to

299
00:10:31,600 --> 00:10:37,200
2010 in fact the paper is from 2012

300
00:10:35,279 --> 00:10:39,360
but when we started talking about it

301
00:10:37,200 --> 00:10:42,880
which was actually at the phd dinner

302
00:10:39,360 --> 00:10:46,000
of nacho cascudo we worked that out

303
00:10:42,880 --> 00:10:46,399
much later it became clear that we could

304
00:10:46,000 --> 00:10:48,399
do

305
00:10:46,399 --> 00:10:50,079
that result we had in the paper much

306
00:10:48,399 --> 00:10:51,839
nicer if we had

307
00:10:50,079 --> 00:10:53,760
compact commitments where we could open

308
00:10:51,839 --> 00:10:56,240
linear forms very efficiently

309
00:10:53,760 --> 00:10:57,120
so it took i asked around for several

310
00:10:56,240 --> 00:11:01,440
years nothing

311
00:10:57,120 --> 00:11:06,160
uh was known but then the work of uh

312
00:11:01,440 --> 00:11:08,399
of 2016 2018 came along

313
00:11:06,160 --> 00:11:10,160
and finally we did it now i know why it

314
00:11:08,399 --> 00:11:12,800
had to wait for so long because

315
00:11:10,160 --> 00:11:14,399
it waited this work waited to be done by

316
00:11:12,800 --> 00:11:15,599
thomas indian thomas started a few years

317
00:11:14,399 --> 00:11:18,000
back so i think that's a very good

318
00:11:15,600 --> 00:11:21,279
reason thank you very much

319
00:11:18,000 --> 00:11:22,480
thanks ronald we can have one quick very

320
00:11:21,279 --> 00:11:25,519
quick question while the

321
00:11:22,480 --> 00:11:27,200
next speaker puts the screen on

322
00:11:25,519 --> 00:11:29,120
which you can see in the chat questions

323
00:11:27,200 --> 00:11:31,360
is how does this relate to linear iop

324
00:11:29,120 --> 00:11:33,120
and linear pcp abstractions can you can

325
00:11:31,360 --> 00:11:35,360
one view your techniques as a method of

326
00:11:33,120 --> 00:11:36,240
compiling linear iops and pcps into

327
00:11:35,360 --> 00:11:38,000
logarithmic

328
00:11:36,240 --> 00:11:40,399
because nice or constant size

329
00:11:38,000 --> 00:11:44,079
cryptographic arguments

330
00:11:40,399 --> 00:11:45,120
um we discuss a lot of uh related work

331
00:11:44,079 --> 00:11:49,519
in the paper

332
00:11:45,120 --> 00:11:51,200
as as with respect to uh to linear pcps

333
00:11:49,519 --> 00:11:52,720
uh i remember having had some

334
00:11:51,200 --> 00:11:55,519
discussions on

335
00:11:52,720 --> 00:11:56,240
how related this work is to that to that

336
00:11:55,519 --> 00:11:58,800
part but

337
00:11:56,240 --> 00:12:00,639
uh i think i came to the uh to the

338
00:11:58,800 --> 00:12:02,880
conclusion at least uh

339
00:12:00,639 --> 00:12:04,880
preliminary conclusion that this is very

340
00:12:02,880 --> 00:12:08,000
much tied in with uh

341
00:12:04,880 --> 00:12:10,000
with uh techniques uh around uh

342
00:12:08,000 --> 00:12:13,360
complexity theoretic

343
00:12:10,000 --> 00:12:16,399
assumptions and it uses some tricks that

344
00:12:13,360 --> 00:12:19,600
cannot so easily be abstracted

345
00:12:16,399 --> 00:12:22,000
away from the complexity theory and most

346
00:12:19,600 --> 00:12:24,720
of the work on the linear pcp

347
00:12:22,000 --> 00:12:26,959
appears to me a complete uh

348
00:12:24,720 --> 00:12:28,639
transitioning from

349
00:12:26,959 --> 00:12:30,399
information theoretic methods to

350
00:12:28,639 --> 00:12:33,360
complexity theoretic methods

351
00:12:30,399 --> 00:12:35,760
part of our work is of that kind as well

352
00:12:33,360 --> 00:12:40,560
but especially at the part of the

353
00:12:35,760 --> 00:12:42,240
this recursive proof of knowledge

354
00:12:40,560 --> 00:12:43,680
that that seems so very much tied with

355
00:12:42,240 --> 00:12:44,560
the complexity theory so

356
00:12:43,680 --> 00:12:46,719
thank you i don't know that's an

357
00:12:44,560 --> 00:12:49,359
interesting question

358
00:12:46,720 --> 00:12:50,880
thank you everyone so i think we have no

359
00:12:49,360 --> 00:12:53,680
more questions and we can move

360
00:12:50,880 --> 00:12:53,920
go to the next talk so i think ronald if

361
00:12:53,680 --> 00:12:57,199
you

362
00:12:53,920 --> 00:12:59,920
unshare your screen the next speaker can

363
00:12:57,200 --> 00:13:01,760
share it thank you so much for the talk

364
00:12:59,920 --> 00:13:04,959
so the next stock is going

365
00:13:01,760 --> 00:13:06,560
the next one is going to be thai parlor

366
00:13:04,959 --> 00:13:08,638
repetition theorems for partially

367
00:13:06,560 --> 00:13:11,279
simulatable arguments

368
00:13:08,639 --> 00:13:12,399
by etai berman iftar hartner and elias

369
00:13:11,279 --> 00:13:14,959
fadia and eliot

370
00:13:12,399 --> 00:13:15,760
is giving the talk thank you do you hear

371
00:13:14,959 --> 00:13:19,199
me

372
00:13:15,760 --> 00:13:21,519
yes okay thank you so

373
00:13:19,200 --> 00:13:23,040
i'm eliad fadia and i'm going to briefly

374
00:13:21,519 --> 00:13:24,560
describe a work uh tight power

375
00:13:23,040 --> 00:13:25,439
repetition theorem for partially

376
00:13:24,560 --> 00:13:27,839
simulated

377
00:13:25,440 --> 00:13:28,560
arguments i'm going to work with a thai

378
00:13:27,839 --> 00:13:31,200
berman and

379
00:13:28,560 --> 00:13:32,319
if the heightener so basically this work

380
00:13:31,200 --> 00:13:35,279
is about

381
00:13:32,320 --> 00:13:35,839
a harness that in general it's one of

382
00:13:35,279 --> 00:13:37,680
the

383
00:13:35,839 --> 00:13:39,839
it's one of the most fundamental topics

384
00:13:37,680 --> 00:13:42,079
in computation in general it means can

385
00:13:39,839 --> 00:13:44,320
we turn a weekly hard primitive let's

386
00:13:42,079 --> 00:13:45,199
say a weekly secure algorithm or

387
00:13:44,320 --> 00:13:47,920
protocol

388
00:13:45,199 --> 00:13:49,279
into a very hard one or secure one

389
00:13:47,920 --> 00:13:51,360
usually you want to do it while

390
00:13:49,279 --> 00:13:53,120
preserving the other desired properties

391
00:13:51,360 --> 00:13:56,560
of the original primitive like

392
00:13:53,120 --> 00:13:58,000
efficiency and this the focus of this

393
00:13:56,560 --> 00:14:00,239
work is the amplification of

394
00:13:58,000 --> 00:14:02,160
interactive arguments also known as the

395
00:14:00,240 --> 00:14:03,440
computational sound moves where

396
00:14:02,160 --> 00:14:05,439
this outputs where the sound is

397
00:14:03,440 --> 00:14:07,440
guaranteed only holds against the

398
00:14:05,440 --> 00:14:10,000
computationally bounded movers

399
00:14:07,440 --> 00:14:10,959
and as you all know this is an important

400
00:14:10,000 --> 00:14:14,079
primitive in the

401
00:14:10,959 --> 00:14:15,518
critique cryptography so in the

402
00:14:14,079 --> 00:14:17,760
amplification of iterative

403
00:14:15,519 --> 00:14:19,519
arguments the the main goal is to find a

404
00:14:17,760 --> 00:14:20,160
generic transformation to reduce the

405
00:14:19,519 --> 00:14:22,639
sounds

406
00:14:20,160 --> 00:14:24,319
error of any argument so let's say we

407
00:14:22,639 --> 00:14:26,560
have some argument pv where

408
00:14:24,320 --> 00:14:27,839
p is the prover and v is the verifier

409
00:14:26,560 --> 00:14:30,560
and the sum cell has

410
00:14:27,839 --> 00:14:32,160
is one minus epsilon it means almost no

411
00:14:30,560 --> 00:14:34,079
sound is guaranteed a cheating move

412
00:14:32,160 --> 00:14:34,880
there can win with probability almost

413
00:14:34,079 --> 00:14:36,479
one

414
00:14:34,880 --> 00:14:38,560
and then we want to apply this genetic

415
00:14:36,480 --> 00:14:39,839
transformation and to turn it into a

416
00:14:38,560 --> 00:14:43,599
similar argument

417
00:14:39,839 --> 00:14:46,160
which has sounds l negligible okay

418
00:14:43,600 --> 00:14:47,760
so the most natural way of doing such a

419
00:14:46,160 --> 00:14:50,000
generic amplification is

420
00:14:47,760 --> 00:14:52,079
by repetition because hopefully if we

421
00:14:50,000 --> 00:14:53,600
repeat the execution many times

422
00:14:52,079 --> 00:14:56,079
then it will be much harder for the

423
00:14:53,600 --> 00:14:58,800
puller to win in all the executions

424
00:14:56,079 --> 00:15:00,000
and so the first option is do by uh do a

425
00:14:58,800 --> 00:15:02,079
sequential repetition

426
00:15:00,000 --> 00:15:03,920
just repeat the execution many times

427
00:15:02,079 --> 00:15:06,239
sequentially one after the other

428
00:15:03,920 --> 00:15:07,599
with uh independent coins and the

429
00:15:06,240 --> 00:15:10,160
verifier accepts the

430
00:15:07,600 --> 00:15:12,639
if all the server sub-verifies in all

431
00:15:10,160 --> 00:15:14,719
these executions too

432
00:15:12,639 --> 00:15:16,800
this in almost all settings reduces the

433
00:15:14,720 --> 00:15:18,800
sun cell if we start with mime reception

434
00:15:16,800 --> 00:15:20,319
and it reduces to one reception to the

435
00:15:18,800 --> 00:15:23,359
end to the power of n

436
00:15:20,320 --> 00:15:24,880
but the problem is that it blows up the

437
00:15:23,360 --> 00:15:27,040
round complexity

438
00:15:24,880 --> 00:15:29,439
so an alternative alternative way of

439
00:15:27,040 --> 00:15:32,000
doing repetition is by power repetition

440
00:15:29,440 --> 00:15:32,800
where each uh in each round each party

441
00:15:32,000 --> 00:15:34,720
sends the

442
00:15:32,800 --> 00:15:36,079
n messages that corresponds to the n

443
00:15:34,720 --> 00:15:39,040
executions

444
00:15:36,079 --> 00:15:40,719
and by that we preserve the rank of

445
00:15:39,040 --> 00:15:44,240
complexity which is great

446
00:15:40,720 --> 00:15:46,000
but does it improve the security so

447
00:15:44,240 --> 00:15:47,759
for specific type of arguments we know

448
00:15:46,000 --> 00:15:50,320
that he does like

449
00:15:47,759 --> 00:15:51,199
public coin arguments but in general the

450
00:15:50,320 --> 00:15:53,519
answer is no

451
00:15:51,199 --> 00:15:54,639
and there are concrete examples of

452
00:15:53,519 --> 00:15:57,360
arguments that

453
00:15:54,639 --> 00:15:58,560
let's say have some cell has you repeat

454
00:15:57,360 --> 00:16:01,040
them million times

455
00:15:58,560 --> 00:16:02,638
in parallel and the sums arrow remained

456
00:16:01,040 --> 00:16:06,160
remain health

457
00:16:02,639 --> 00:16:09,120
so but it turns out that there is

458
00:16:06,160 --> 00:16:10,079
a way to somewhat overcome this problem

459
00:16:09,120 --> 00:16:12,800
using a

460
00:16:10,079 --> 00:16:14,160
random termination so let's say we have

461
00:16:12,800 --> 00:16:16,959
some arbitrary argument

462
00:16:14,160 --> 00:16:18,959
pv which has the m round and now let's

463
00:16:16,959 --> 00:16:21,279
slightly change the verifier

464
00:16:18,959 --> 00:16:22,800
such that in each interaction round it

465
00:16:21,279 --> 00:16:25,519
it flips a coin

466
00:16:22,800 --> 00:16:27,040
which is one probability uh one over m

467
00:16:25,519 --> 00:16:29,759
if the coin is one it just

468
00:16:27,040 --> 00:16:31,599
uh accepts and aborts otherwise

469
00:16:29,759 --> 00:16:33,040
otherwise it acts like the original v

470
00:16:31,600 --> 00:16:35,120
continue to the next round

471
00:16:33,040 --> 00:16:36,880
and then if lifted going again it flips

472
00:16:35,120 --> 00:16:37,759
the coin again and again again at in the

473
00:16:36,880 --> 00:16:40,320
end

474
00:16:37,759 --> 00:16:41,440
and if none of the coins were one then

475
00:16:40,320 --> 00:16:44,800
it just acts

476
00:16:41,440 --> 00:16:47,920
like v and accepts if v does

477
00:16:44,800 --> 00:16:49,199
so er it does it seems like a very

478
00:16:47,920 --> 00:16:51,519
stupid thing to do because now the

479
00:16:49,199 --> 00:16:54,719
proverb has a better chance to win

480
00:16:51,519 --> 00:16:57,120
but the it turns out that no matter what

481
00:16:54,720 --> 00:16:59,360
protocol you started for pv if you look

482
00:16:57,120 --> 00:17:01,839
at the random terminating variate of it

483
00:16:59,360 --> 00:17:03,440
and repeat it end times in parallel then

484
00:17:01,839 --> 00:17:05,280
the sums of must reduce

485
00:17:03,440 --> 00:17:06,480
the exponential rate in the in the

486
00:17:05,280 --> 00:17:09,520
number of repetition

487
00:17:06,480 --> 00:17:12,640
n which is uh great

488
00:17:09,520 --> 00:17:15,199
uh the only problem is that it is still

489
00:17:12,640 --> 00:17:15,919
far the highest result is stiffer by a

490
00:17:15,199 --> 00:17:18,079
factor of

491
00:17:15,919 --> 00:17:19,039
m m to the four over epsilon in the

492
00:17:18,079 --> 00:17:21,280
exponent

493
00:17:19,039 --> 00:17:23,039
from an ideal decreasing rate of one

494
00:17:21,280 --> 00:17:25,760
minus epsilon to the n

495
00:17:23,039 --> 00:17:27,599
so after this work it's it's still left

496
00:17:25,760 --> 00:17:29,039
open whether there is a better generic

497
00:17:27,599 --> 00:17:31,760
method to amplify

498
00:17:29,039 --> 00:17:32,879
arbitrary arguments or maybe this method

499
00:17:31,760 --> 00:17:34,799
achieves a better

500
00:17:32,880 --> 00:17:36,960
a stronger decrease rate but just the

501
00:17:34,799 --> 00:17:38,799
analysis is not tight

502
00:17:36,960 --> 00:17:40,960
so it turns out that this is our result

503
00:17:38,799 --> 00:17:42,960
the analysis is indeed not tied

504
00:17:40,960 --> 00:17:44,400
and the sensor if you take an arbitrary

505
00:17:42,960 --> 00:17:46,160
argument and you repeat it

506
00:17:44,400 --> 00:17:48,480
you look at the random terminating valid

507
00:17:46,160 --> 00:17:50,240
of it repeat it n times in parallel

508
00:17:48,480 --> 00:17:51,600
then the sound cell reduces by a much

509
00:17:50,240 --> 00:17:54,320
stronger decreasing rate of

510
00:17:51,600 --> 00:17:54,719
n over m which is only far by one over m

511
00:17:54,320 --> 00:17:58,000
from

512
00:17:54,720 --> 00:17:59,360
optimal decreasing rate of n so this is

513
00:17:58,000 --> 00:18:00,640
a significant improvement over a

514
00:17:59,360 --> 00:18:03,199
highness result

515
00:18:00,640 --> 00:18:05,840
and this immediately needs a tighter

516
00:18:03,200 --> 00:18:07,679
bounce for many specific amplifications

517
00:18:05,840 --> 00:18:09,840
and also this is generalized to

518
00:18:07,679 --> 00:18:11,520
partially simulatable arguments which is

519
00:18:09,840 --> 00:18:13,199
an extension of feral terminating

520
00:18:11,520 --> 00:18:16,080
arguments

521
00:18:13,200 --> 00:18:17,840
and a few words about the the proof this

522
00:18:16,080 --> 00:18:20,320
is basically achieved by bounding

523
00:18:17,840 --> 00:18:22,320
a relaxed variant of the k and division

524
00:18:20,320 --> 00:18:25,280
between the distribution that induced by

525
00:18:22,320 --> 00:18:26,720
by the reduction and its ideal variant

526
00:18:25,280 --> 00:18:29,600
rather than the bounding the

527
00:18:26,720 --> 00:18:30,799
statistical distance like princess

528
00:18:29,600 --> 00:18:34,080
walker did

529
00:18:30,799 --> 00:18:35,840
which is inherently not tight and

530
00:18:34,080 --> 00:18:37,918
our second result is a matching lower

531
00:18:35,840 --> 00:18:41,280
bound we showed that for every

532
00:18:37,919 --> 00:18:43,280
an epsilon there exists an argument pv

533
00:18:41,280 --> 00:18:45,120
such that if you look at the random

534
00:18:43,280 --> 00:18:47,440
terminating value of it and repeat it

535
00:18:45,120 --> 00:18:48,799
n times in parallel then there exists an

536
00:18:47,440 --> 00:18:51,200
attack here that can win

537
00:18:48,799 --> 00:18:52,480
all the n random terminating verifies

538
00:18:51,200 --> 00:18:54,640
with probability

539
00:18:52,480 --> 00:18:55,679
one reception to the n over m which

540
00:18:54,640 --> 00:18:56,880
means that

541
00:18:55,679 --> 00:18:58,160
we cannot hope that the random

542
00:18:56,880 --> 00:19:00,080
termination will give us something

543
00:18:58,160 --> 00:19:00,880
better than this uh decreasing right

544
00:19:00,080 --> 00:19:04,159
this one over

545
00:19:00,880 --> 00:19:09,360
factor is really essential and that's it

546
00:19:04,160 --> 00:19:09,360
thank you thank you so much elliot

547
00:19:09,679 --> 00:19:13,200
if there is any questions please let us

548
00:19:12,240 --> 00:19:15,840
know

549
00:19:13,200 --> 00:19:17,120
in the chat on zulia or in the chat

550
00:19:15,840 --> 00:19:19,678
panel here we have

551
00:19:17,120 --> 00:19:21,520
about three minutes for questions we can

552
00:19:19,679 --> 00:19:23,200
go

553
00:19:21,520 --> 00:19:24,799
faster to the next talk if there is no

554
00:19:23,200 --> 00:19:27,360
question i have one myself

555
00:19:24,799 --> 00:19:28,879
which might be very easy so like maybe i

556
00:19:27,360 --> 00:19:29,918
go ahead and ask it so it does the

557
00:19:28,880 --> 00:19:32,000
reduction

558
00:19:29,919 --> 00:19:33,679
in the proof need to be non-uniform

559
00:19:32,000 --> 00:19:35,280
where it handles

560
00:19:33,679 --> 00:19:38,799
everything uniformly so you need to

561
00:19:35,280 --> 00:19:38,799
assume non-uniform

562
00:19:40,880 --> 00:19:44,000
it was also for non-uniform and for

563
00:19:42,320 --> 00:19:45,039
uniform it's not uniform is the

564
00:19:44,000 --> 00:19:46,400
strongest sure

565
00:19:45,039 --> 00:19:49,039
sometimes you need to kind of the

566
00:19:46,400 --> 00:19:52,960
reduction is sometimes uniform

567
00:19:49,039 --> 00:19:54,799
the reduction is uniform got it

568
00:19:52,960 --> 00:19:56,320
and it's the second one is not a very

569
00:19:54,799 --> 00:19:57,840
kind of well-formed question

570
00:19:56,320 --> 00:20:00,320
do we have a reason that the kl

571
00:19:57,840 --> 00:20:01,918
divergence can't be used it's not a

572
00:20:00,320 --> 00:20:03,760
well-defined question i understand this

573
00:20:01,919 --> 00:20:06,960
was a research question it's not an

574
00:20:03,760 --> 00:20:06,960
assumption it's a tool but

575
00:20:08,799 --> 00:20:12,320
so the problem is that uh in the this

576
00:20:11,440 --> 00:20:14,480
reduction the

577
00:20:12,320 --> 00:20:16,480
the so the you can bound the kinder

578
00:20:14,480 --> 00:20:18,960
version like in the public coin case

579
00:20:16,480 --> 00:20:20,880
but in the random terminating and the

580
00:20:18,960 --> 00:20:22,799
partial simulatable case decay the

581
00:20:20,880 --> 00:20:26,799
version might be infinite

582
00:20:22,799 --> 00:20:27,918
and it and somehow it's infinite because

583
00:20:26,799 --> 00:20:31,039
of

584
00:20:27,919 --> 00:20:34,000
some small events that makes it infinite

585
00:20:31,039 --> 00:20:36,000
and in our analysis we come up and came

586
00:20:34,000 --> 00:20:38,640
up with a relaxed variant that somehow

587
00:20:36,000 --> 00:20:39,679
eliminate these small events and by and

588
00:20:38,640 --> 00:20:42,640
but still use the

589
00:20:39,679 --> 00:20:44,960
the good properties of the kl diversion

590
00:20:42,640 --> 00:20:47,440
yeah so this is the basically

591
00:20:44,960 --> 00:20:49,679
i appreciate it so thanks again the

592
00:20:47,440 --> 00:20:50,080
speaker of this talk uh elliad and we

593
00:20:49,679 --> 00:20:53,200
can

594
00:20:50,080 --> 00:20:55,520
go to the next talk of the session if

595
00:20:53,200 --> 00:20:57,679
uh there is no more questions but there

596
00:20:55,520 --> 00:21:00,000
is one are there any reasons to use

597
00:20:57,679 --> 00:21:03,600
sequential repetition

598
00:21:00,000 --> 00:21:06,559
or is this just objectively better

599
00:21:03,600 --> 00:21:08,080
you mean as okay so i i mean well then

600
00:21:06,559 --> 00:21:11,039
the sequential repetition

601
00:21:08,080 --> 00:21:12,320
or in all settings decreases by an

602
00:21:11,039 --> 00:21:15,280
optimal rate but

603
00:21:12,320 --> 00:21:17,200
if you but you pay the uh the number of

604
00:21:15,280 --> 00:21:17,840
interaction rounds is n times small if

605
00:21:17,200 --> 00:21:20,400
you want to

606
00:21:17,840 --> 00:21:22,000
if you if it's okay with you then you

607
00:21:20,400 --> 00:21:22,480
can use the sequential repetition but

608
00:21:22,000 --> 00:21:24,240
the

609
00:21:22,480 --> 00:21:25,919
usually we want parallel repetition in

610
00:21:24,240 --> 00:21:26,400
order to save this interaction right

611
00:21:25,919 --> 00:21:30,000
which

612
00:21:26,400 --> 00:21:33,360
can be very expensive

613
00:21:30,000 --> 00:21:35,200
thank you okay so we're gonna move to

614
00:21:33,360 --> 00:21:38,399
the next talk

615
00:21:35,200 --> 00:21:41,039
which is going to be about i think if

616
00:21:38,400 --> 00:21:43,679
you unshare your screen

617
00:21:41,039 --> 00:21:45,360
thank you so much so now the next talk

618
00:21:43,679 --> 00:21:48,720
is going to be about

619
00:21:45,360 --> 00:21:51,439
interactive proofs for social graphs

620
00:21:48,720 --> 00:21:53,200
and i hope one of the speakers one of

621
00:21:51,440 --> 00:21:55,039
the authors who is going to present that

622
00:21:53,200 --> 00:21:58,400
paper would share their screen

623
00:21:55,039 --> 00:21:59,679
is it alon or so that i will introduce

624
00:21:58,400 --> 00:22:02,720
the authors

625
00:21:59,679 --> 00:22:04,400
liran katsir clara shikaraman and aylon

626
00:22:02,720 --> 00:22:07,679
you give

627
00:22:04,400 --> 00:22:13,840
and if any of them are here they should

628
00:22:07,679 --> 00:22:13,840
go ahead and share their screen

629
00:22:13,919 --> 00:22:18,559
so my guess is that maybe they're not

630
00:22:25,919 --> 00:22:29,200
in case yeah i don't find it yes we have

631
00:22:28,880 --> 00:22:32,320
the

632
00:22:29,200 --> 00:22:34,240
in case we have the presenter for the

633
00:22:32,320 --> 00:22:37,600
next paper which is

634
00:22:34,240 --> 00:22:41,039
the measure and reprogram technique uh

635
00:22:37,600 --> 00:22:42,399
if they are here they can go ahead and

636
00:22:41,039 --> 00:22:44,640
present and then

637
00:22:42,400 --> 00:22:46,080
and we can check with the presenter of

638
00:22:44,640 --> 00:22:49,760
the paper that we couldn't

639
00:22:46,080 --> 00:22:52,879
reach out to later on during the session

640
00:22:49,760 --> 00:22:54,320
yeah sure i can go yes okay so i guess i

641
00:22:52,880 --> 00:22:56,320
have to hand it to

642
00:22:54,320 --> 00:22:57,520
frank who is going to introduce you and

643
00:22:56,320 --> 00:22:59,678
the rest of the session

644
00:22:57,520 --> 00:23:00,720
in case we hear for about the other

645
00:22:59,679 --> 00:23:02,400
paper we will

646
00:23:00,720 --> 00:23:05,760
get back to them but fine go ahead

647
00:23:02,400 --> 00:23:09,200
please please all right i'll take over

648
00:23:05,760 --> 00:23:11,200
okay our next talk will be uh the mayor

649
00:23:09,200 --> 00:23:12,880
and reprogram technique 2.0

650
00:23:11,200 --> 00:23:14,880
multi-rom finishing me and more we are

651
00:23:12,880 --> 00:23:15,840
going to hear proofs and also something

652
00:23:14,880 --> 00:23:18,159
about quantum

653
00:23:15,840 --> 00:23:19,199
so this is from yellow dom search for

654
00:23:18,159 --> 00:23:21,840
christmas

655
00:23:19,200 --> 00:23:23,919
and yellow will be given a talk so yeah

656
00:23:21,840 --> 00:23:25,520
the floor is yours

657
00:23:23,919 --> 00:23:27,760
yes thanks thank you for the

658
00:23:25,520 --> 00:23:30,400
introduction

659
00:23:27,760 --> 00:23:32,080
uh our work is about proving fiat xiaomi

660
00:23:30,400 --> 00:23:33,840
digital signatures

661
00:23:32,080 --> 00:23:35,918
and in general fiat xiaomi zero

662
00:23:33,840 --> 00:23:37,760
knowledge proof systems secure against

663
00:23:35,919 --> 00:23:39,760
quantum attackers

664
00:23:37,760 --> 00:23:42,400
whereby secure we mean securing the

665
00:23:39,760 --> 00:23:45,039
quantum random oracle model

666
00:23:42,400 --> 00:23:47,039
we extend the existing qram technique by

667
00:23:45,039 --> 00:23:49,360
don fear mines and schaffner

668
00:23:47,039 --> 00:23:51,120
to a larger class of applications

669
00:23:49,360 --> 00:23:52,240
notably multi-round field xamarin

670
00:23:51,120 --> 00:23:55,199
signatures

671
00:23:52,240 --> 00:23:56,960
bullet proofs and sequential or proofs

672
00:23:55,200 --> 00:23:58,880
and finally we also show that the

673
00:23:56,960 --> 00:24:00,080
security reductions that we get from

674
00:23:58,880 --> 00:24:04,159
applying this technique

675
00:24:00,080 --> 00:24:07,039
are tight well our result concerns

676
00:24:04,159 --> 00:24:08,080
a general qram technique i'll start by

677
00:24:07,039 --> 00:24:10,960
explaining the

678
00:24:08,080 --> 00:24:14,720
main motivating example which is the

679
00:24:10,960 --> 00:24:14,720
multi-round fiat xiaomi transform

680
00:24:15,679 --> 00:24:19,200
there exists something called a two n

681
00:24:17,440 --> 00:24:20,080
plus one round public coin interactive

682
00:24:19,200 --> 00:24:22,240
proof system

683
00:24:20,080 --> 00:24:24,158
with constant or logarithmic number of

684
00:24:22,240 --> 00:24:26,000
rounds

685
00:24:24,159 --> 00:24:28,000
where some proofer can prove its

686
00:24:26,000 --> 00:24:31,520
knowledge of a secret key

687
00:24:28,000 --> 00:24:32,880
to a verifier by sending a sequence of

688
00:24:31,520 --> 00:24:35,600
messages

689
00:24:32,880 --> 00:24:36,480
uh the so-called commitments to which

690
00:24:35,600 --> 00:24:39,120
the verifier

691
00:24:36,480 --> 00:24:40,000
replies with a uniformly random

692
00:24:39,120 --> 00:24:41,520
challenge

693
00:24:40,000 --> 00:24:46,000
and approver sends the next commitment

694
00:24:41,520 --> 00:24:48,480
etc until it reaches its final response

695
00:24:46,000 --> 00:24:49,679
but if we want to apply this protocol in

696
00:24:48,480 --> 00:24:52,880
a signature scheme

697
00:24:49,679 --> 00:24:55,200
we need it to be non-interactive

698
00:24:52,880 --> 00:24:58,400
meaning that we want the proofer to send

699
00:24:55,200 --> 00:25:00,480
all of these messages in one go

700
00:24:58,400 --> 00:25:01,440
however since it will now no longer

701
00:25:00,480 --> 00:25:03,600
receive these

702
00:25:01,440 --> 00:25:05,919
random challenges from the verifier it

703
00:25:03,600 --> 00:25:08,080
will have to compute them himself

704
00:25:05,919 --> 00:25:10,000
and it does so by taking the hash of

705
00:25:08,080 --> 00:25:13,279
each of these commitments

706
00:25:10,000 --> 00:25:15,440
using some public hash function aids

707
00:25:13,279 --> 00:25:17,919
public so that also the verifiers access

708
00:25:15,440 --> 00:25:19,520
to it and can recompute the challenges

709
00:25:17,919 --> 00:25:21,679
and then check some verification

710
00:25:19,520 --> 00:25:24,879
predicates on these commitments

711
00:25:21,679 --> 00:25:28,400
the response and the challenges

712
00:25:24,880 --> 00:25:31,279
produced by aids now to

713
00:25:28,400 --> 00:25:32,240
prove security or more precisely to show

714
00:25:31,279 --> 00:25:34,480
that

715
00:25:32,240 --> 00:25:36,159
this non-interactive scheme is as secure

716
00:25:34,480 --> 00:25:38,000
as the interactive one

717
00:25:36,159 --> 00:25:40,559
we turn to the quantum random oracle

718
00:25:38,000 --> 00:25:41,840
model where we model this public hash

719
00:25:40,559 --> 00:25:44,480
function h as an

720
00:25:41,840 --> 00:25:46,879
external random oracle to which all

721
00:25:44,480 --> 00:25:49,039
parties have quantum query access

722
00:25:46,880 --> 00:25:50,159
which means that the function cannot be

723
00:25:49,039 --> 00:25:53,279
computed locally

724
00:25:50,159 --> 00:25:56,480
so any adversary in this particle

725
00:25:53,279 --> 00:25:59,600
will have to make queries to so to the

726
00:25:56,480 --> 00:26:03,440
external oracle but they can consist

727
00:25:59,600 --> 00:26:06,879
of a quantum superposition of inputs

728
00:26:03,440 --> 00:26:08,880
so if the adversary makes a query what

729
00:26:06,880 --> 00:26:12,000
it actually does is it sends over a

730
00:26:08,880 --> 00:26:14,720
quantum state to the oracle

731
00:26:12,000 --> 00:26:15,919
now in many also classical random oracle

732
00:26:14,720 --> 00:26:18,960
model proofs

733
00:26:15,919 --> 00:26:20,240
what we want to do is show the existence

734
00:26:18,960 --> 00:26:23,840
of some simulator

735
00:26:20,240 --> 00:26:26,240
s that can simulate the oracle a

736
00:26:23,840 --> 00:26:27,678
and also observe the queries that it

737
00:26:26,240 --> 00:26:30,799
makes

738
00:26:27,679 --> 00:26:33,760
but as you might be aware observing

739
00:26:30,799 --> 00:26:35,279
a quantum state may cause it to collapse

740
00:26:33,760 --> 00:26:37,200
which in turn can

741
00:26:35,279 --> 00:26:39,600
influence the behavior of the adversary

742
00:26:37,200 --> 00:26:40,559
so that in general we can no longer

743
00:26:39,600 --> 00:26:43,199
predict

744
00:26:40,559 --> 00:26:44,559
what the adversary is going to output

745
00:26:43,200 --> 00:26:46,400
which is a shame because

746
00:26:44,559 --> 00:26:48,879
the simulator might need this output in

747
00:26:46,400 --> 00:26:51,440
the security reduction

748
00:26:48,880 --> 00:26:53,440
but then comes our results on the

749
00:26:51,440 --> 00:26:54,960
multi-input reprogrammability of the

750
00:26:53,440 --> 00:26:56,799
qram

751
00:26:54,960 --> 00:26:58,480
which says that if we have such a

752
00:26:56,799 --> 00:27:01,360
scenario where

753
00:26:58,480 --> 00:27:01,760
some adversary makes q quantum queries

754
00:27:01,360 --> 00:27:05,279
to

755
00:27:01,760 --> 00:27:06,879
a random oracle h before outputting an

756
00:27:05,279 --> 00:27:10,240
array consisting of

757
00:27:06,880 --> 00:27:12,640
n different hash inputs x as well as

758
00:27:10,240 --> 00:27:17,279
some additional output c

759
00:27:12,640 --> 00:27:19,600
such that on some arbitrary predicate v

760
00:27:17,279 --> 00:27:22,480
holds of c these axes and the

761
00:27:19,600 --> 00:27:24,959
corresponding hash values

762
00:27:22,480 --> 00:27:26,080
then indeed there exists a simulator

763
00:27:24,960 --> 00:27:29,840
that can

764
00:27:26,080 --> 00:27:32,559
choose n of these queries at random

765
00:27:29,840 --> 00:27:33,760
measure them and upon the hash inputs

766
00:27:32,559 --> 00:27:36,480
found in the measurements

767
00:27:33,760 --> 00:27:38,480
reprogram the oracle to some fast random

768
00:27:36,480 --> 00:27:41,039
values theta

769
00:27:38,480 --> 00:27:42,080
and the adversary will now still produce

770
00:27:41,039 --> 00:27:45,520
some output

771
00:27:42,080 --> 00:27:45,840
x bar c bar of which the same predicate

772
00:27:45,520 --> 00:27:48,320
v

773
00:27:45,840 --> 00:27:50,639
holds but now with respect to the fresh

774
00:27:48,320 --> 00:27:52,399
random values theta

775
00:27:50,640 --> 00:27:54,320
and we can relate these probabilities

776
00:27:52,399 --> 00:27:57,600
for any particular choice of

777
00:27:54,320 --> 00:28:00,960
inputs x naught up to this

778
00:27:57,600 --> 00:28:03,600
loss of order q to the power 2 n

779
00:28:00,960 --> 00:28:04,320
uh and that is exactly what we need to

780
00:28:03,600 --> 00:28:07,760
show that

781
00:28:04,320 --> 00:28:08,399
the advantage of the best uh adversary

782
00:28:07,760 --> 00:28:10,559
against the

783
00:28:08,399 --> 00:28:13,039
fiat xiaomi transformed non-interactive

784
00:28:10,559 --> 00:28:13,360
scheme is at most or the q to the power

785
00:28:13,039 --> 00:28:16,080
two

786
00:28:13,360 --> 00:28:17,840
end times as big as the advantage of the

787
00:28:16,080 --> 00:28:18,799
best adversary against the interactive

788
00:28:17,840 --> 00:28:21,439
scheme

789
00:28:18,799 --> 00:28:23,840
which is what we needed for security

790
00:28:21,440 --> 00:28:23,840
thank you

791
00:28:24,559 --> 00:28:29,360
okay great thanks and i think we have we

792
00:28:27,039 --> 00:28:30,640
have time for a couple questions

793
00:28:29,360 --> 00:28:33,039
are there any questions from the

794
00:28:30,640 --> 00:28:33,039
audience

795
00:28:38,880 --> 00:28:42,720
okay now i have a question actually uh

796
00:28:41,679 --> 00:28:46,080
so your bond

797
00:28:42,720 --> 00:28:47,600
is kill to the two to the end is that

798
00:28:46,080 --> 00:28:51,918
tight

799
00:28:47,600 --> 00:28:54,559
yes yeah we show

800
00:28:51,919 --> 00:28:56,320
a grover based attack against the three

801
00:28:54,559 --> 00:28:59,600
round schemes

802
00:28:56,320 --> 00:29:03,120
showing that the q squared loss is

803
00:28:59,600 --> 00:29:05,520
uh is optimal in that case

804
00:29:03,120 --> 00:29:06,320
and this this holds for pretty general

805
00:29:05,520 --> 00:29:09,760
uh

806
00:29:06,320 --> 00:29:10,799
typical sigma protocols and then we

807
00:29:09,760 --> 00:29:13,760
built some

808
00:29:10,799 --> 00:29:15,360
some somewhat more artificial

809
00:29:13,760 --> 00:29:18,000
multi-round schemes by

810
00:29:15,360 --> 00:29:19,279
uh sequentially repeating these sigma

811
00:29:18,000 --> 00:29:21,039
protocols

812
00:29:19,279 --> 00:29:23,120
and then we show an attack against that

813
00:29:21,039 --> 00:29:26,000
scheme uh which uh

814
00:29:23,120 --> 00:29:27,279
which boosts the advantage of the

815
00:29:26,000 --> 00:29:31,200
adversary by

816
00:29:27,279 --> 00:29:31,760
um q to the power to n okay so that uh

817
00:29:31,200 --> 00:29:33,919
so yeah

818
00:29:31,760 --> 00:29:34,799
in general the reduction is tight cool

819
00:29:33,919 --> 00:29:36,960
thanks

820
00:29:34,799 --> 00:29:38,960
there are also questions in the chat uh

821
00:29:36,960 --> 00:29:40,080
first you have guinea asks how big is n

822
00:29:38,960 --> 00:29:43,760
in your application

823
00:29:40,080 --> 00:29:46,480
constant uh well yeah i mean

824
00:29:43,760 --> 00:29:47,600
it i guess for practical purposes it

825
00:29:46,480 --> 00:29:50,320
should be constant

826
00:29:47,600 --> 00:29:51,600
or logarithmic to to not blow up the the

827
00:29:50,320 --> 00:29:55,360
loss too much

828
00:29:51,600 --> 00:29:57,760
but it works for general and

829
00:29:55,360 --> 00:29:59,918
and ron asks how important is it that h

830
00:29:57,760 --> 00:30:02,399
is uniform over the

831
00:29:59,919 --> 00:30:04,159
boolean cube for example what if h has

832
00:30:02,399 --> 00:30:07,279
some structure

833
00:30:04,159 --> 00:30:09,970
uh well yeah our proof only works for

834
00:30:07,279 --> 00:30:11,200
uniform aids

835
00:30:09,970 --> 00:30:14,880
[Music]

836
00:30:11,200 --> 00:30:16,880
i'm not i'm not entirely sure if it

837
00:30:14,880 --> 00:30:18,480
if there isn't some some way to make it

838
00:30:16,880 --> 00:30:23,840
work in the other case but

839
00:30:18,480 --> 00:30:23,840
our proof works only for uniform x

840
00:30:25,360 --> 00:30:32,639
okay so how does it compare to gendry

841
00:30:28,960 --> 00:30:35,440
atoll's technique for fiat chemi

842
00:30:32,640 --> 00:30:36,559
well the sandri technique if you're

843
00:30:35,440 --> 00:30:40,320
referring to the

844
00:30:36,559 --> 00:30:43,440
2019 paper uh that has

845
00:30:40,320 --> 00:30:46,559
a loss of order uh q to the ninth

846
00:30:43,440 --> 00:30:51,039
first is our q to the

847
00:30:46,559 --> 00:30:52,799
power two in the in the three round case

848
00:30:51,039 --> 00:30:54,960
and and and i'm not aware of any

849
00:30:52,799 --> 00:30:58,480
extension of that technique to

850
00:30:54,960 --> 00:30:58,480
uh two multiple rounds

851
00:30:58,640 --> 00:31:02,720
thank you okay excellent thanks hello

852
00:31:01,279 --> 00:31:05,120
for the excellent talk and now

853
00:31:02,720 --> 00:31:05,760
thanks for the other nice questions and

854
00:31:05,120 --> 00:31:07,760
we can

855
00:31:05,760 --> 00:31:09,360
and we can take further questions to the

856
00:31:07,760 --> 00:31:12,480
zulub cat

857
00:31:09,360 --> 00:31:13,918
and okay we're going to move on to the

858
00:31:12,480 --> 00:31:17,440
next one

859
00:31:13,919 --> 00:31:19,279
so that our next talk will be

860
00:31:17,440 --> 00:31:23,039
fan sameer for repeated scoring with

861
00:31:19,279 --> 00:31:26,240
applications to p-pad harness and vdfs

862
00:31:23,039 --> 00:31:28,799
by alex lombardi and vinod vocal tennis

863
00:31:26,240 --> 00:31:31,039
and i think alex is going to give the

864
00:31:28,799 --> 00:31:31,039
talk

865
00:31:31,120 --> 00:31:37,678
so alex yes sorry one second uh

866
00:31:34,399 --> 00:31:47,840
i need to screen share sorry no problem

867
00:31:37,679 --> 00:31:47,840
that's okay

868
00:31:50,559 --> 00:31:53,840
yeah i want to remind everybody please

869
00:31:52,159 --> 00:31:56,480
type your questions in zulip

870
00:31:53,840 --> 00:32:01,840
and also if you like in zoom as well

871
00:31:56,480 --> 00:32:01,840
it's a little bit quiet in the tulip

872
00:32:10,320 --> 00:32:13,760
okay can you see yep okay sorry about

873
00:32:12,880 --> 00:32:15,840
that see everything

874
00:32:13,760 --> 00:32:17,519
so we see everything in case you want us

875
00:32:15,840 --> 00:32:20,080
to see the

876
00:32:17,519 --> 00:32:21,279
kind of uh just this is correct though

877
00:32:20,080 --> 00:32:23,199
right that's good yeah

878
00:32:21,279 --> 00:32:24,399
okay sorry about that all right the

879
00:32:23,200 --> 00:32:26,159
floor is yours

880
00:32:24,399 --> 00:32:28,639
okay hey everyone i'm alex i'm gonna be

881
00:32:26,159 --> 00:32:30,000
talking about repeated squaring uh

882
00:32:28,640 --> 00:32:31,519
fiat from here for repeated squaring

883
00:32:30,000 --> 00:32:32,559
with applications to ppad hardness and

884
00:32:31,519 --> 00:32:34,799
vdfs

885
00:32:32,559 --> 00:32:36,879
uh in in these in the short talk i'll

886
00:32:34,799 --> 00:32:38,799
explain to you what exactly we prove

887
00:32:36,880 --> 00:32:40,880
and i can refer you to the paper on

888
00:32:38,799 --> 00:32:43,840
eprint or a longer version of this talk

889
00:32:40,880 --> 00:32:43,840
on youtube for more details

890
00:32:44,240 --> 00:32:48,720
so the theatromir transform is a

891
00:32:46,880 --> 00:32:49,679
heuristic mechanism that we just heard

892
00:32:48,720 --> 00:32:51,600
about actually

893
00:32:49,679 --> 00:32:53,440
for converting public coin interactive

894
00:32:51,600 --> 00:32:55,439
protocols for some task

895
00:32:53,440 --> 00:32:57,360
into a corresponding non-interactive

896
00:32:55,440 --> 00:32:59,279
protocol for the same task

897
00:32:57,360 --> 00:33:01,039
and i know you all just heard this but

898
00:32:59,279 --> 00:33:02,960
the way it's done is you you take an

899
00:33:01,039 --> 00:33:04,879
interactive protocol where the verifiers

900
00:33:02,960 --> 00:33:08,240
messages are uniformly random

901
00:33:04,880 --> 00:33:10,000
and you replace the interaction with the

902
00:33:08,240 --> 00:33:11,279
computation of a hash function

903
00:33:10,000 --> 00:33:13,360
so in the non corresponding

904
00:33:11,279 --> 00:33:15,760
non-interactive protocol the prover

905
00:33:13,360 --> 00:33:17,600
iteratively computes its messages as it

906
00:33:15,760 --> 00:33:19,279
would in the interactive protocol

907
00:33:17,600 --> 00:33:21,360
but computes the verifier messages

908
00:33:19,279 --> 00:33:23,360
itself as hashes of the protocol

909
00:33:21,360 --> 00:33:26,000
transcript up until that point

910
00:33:23,360 --> 00:33:28,080
so this is a at least a candidate way to

911
00:33:26,000 --> 00:33:30,320
get a non-interactive protocol

912
00:33:28,080 --> 00:33:31,840
uh it's been around in cryptography for

913
00:33:30,320 --> 00:33:32,960
over 30 years by now it's quite

914
00:33:31,840 --> 00:33:35,039
ubiquitous

915
00:33:32,960 --> 00:33:36,880
uh what was said originally was that at

916
00:33:35,039 --> 00:33:38,080
least heuristically it appears that the

917
00:33:36,880 --> 00:33:40,240
soundness of the protocol

918
00:33:38,080 --> 00:33:42,000
is preserved by the transformation in

919
00:33:40,240 --> 00:33:44,159
terms of what we can prove

920
00:33:42,000 --> 00:33:46,320
at least classically we can show that

921
00:33:44,159 --> 00:33:48,480
soundness holds in the random oracle

922
00:33:46,320 --> 00:33:50,158
model in very high generality so

923
00:33:48,480 --> 00:33:51,600
for essentially any protocol you would

924
00:33:50,159 --> 00:33:53,200
care about if you model the hash

925
00:33:51,600 --> 00:33:53,918
function as a random oracle then you can

926
00:33:53,200 --> 00:33:57,279
show that the

927
00:33:53,919 --> 00:33:59,120
the chmir protocol is sound uh but

928
00:33:57,279 --> 00:34:01,200
if you want to argue soundness in the

929
00:33:59,120 --> 00:34:02,959
standard model that is with a hat with a

930
00:34:01,200 --> 00:34:04,640
concrete hash function that you can

931
00:34:02,960 --> 00:34:07,360
compute as opposed to

932
00:34:04,640 --> 00:34:08,320
querying as an oracle then very little

933
00:34:07,360 --> 00:34:10,719
was known

934
00:34:08,320 --> 00:34:11,599
uh it's a big open question in

935
00:34:10,719 --> 00:34:14,158
theoretical

936
00:34:11,599 --> 00:34:16,159
cryptography to figure out which

937
00:34:14,159 --> 00:34:17,919
interactive protocols we can actually

938
00:34:16,159 --> 00:34:19,040
instantiate fiercemeer for in the

939
00:34:17,918 --> 00:34:20,719
standard model

940
00:34:19,040 --> 00:34:22,480
and what cryptographic assumptions on

941
00:34:20,719 --> 00:34:24,560
the hash function need to make to prove

942
00:34:22,480 --> 00:34:27,440
the soundness of the protocol

943
00:34:24,560 --> 00:34:29,119
so up until a few years ago essentially

944
00:34:27,440 --> 00:34:32,320
no positive results were known

945
00:34:29,119 --> 00:34:33,839
about this but recently we've finally

946
00:34:32,320 --> 00:34:34,879
been able to show that at least in some

947
00:34:33,839 --> 00:34:37,119
special cases

948
00:34:34,879 --> 00:34:38,799
that that you can do feature mirror in

949
00:34:37,119 --> 00:34:41,599
the standard model

950
00:34:38,800 --> 00:34:43,520
so let me explain uh the state of the

951
00:34:41,599 --> 00:34:47,200
art as of this paper

952
00:34:43,520 --> 00:34:49,119
so first of all uh we're going to assume

953
00:34:47,199 --> 00:34:50,719
that the interactive protocol

954
00:34:49,119 --> 00:34:52,879
is statistically sound that is it's

955
00:34:50,719 --> 00:34:53,520
sound against computationally unbounded

956
00:34:52,879 --> 00:34:55,759
provers

957
00:34:53,520 --> 00:34:57,680
this is a fairly large restriction but

958
00:34:55,760 --> 00:35:00,720
subject to this restriction

959
00:34:57,680 --> 00:35:01,598
it's it's known that if you make a

960
00:35:00,720 --> 00:35:04,078
strong enough

961
00:35:01,599 --> 00:35:06,079
assumption about the hash function then

962
00:35:04,079 --> 00:35:06,480
fiat chamier for any such protocol at

963
00:35:06,079 --> 00:35:08,079
least

964
00:35:06,480 --> 00:35:09,680
if you say restrict to constant rounds

965
00:35:08,079 --> 00:35:12,400
or not too many rounds uh

966
00:35:09,680 --> 00:35:13,680
you'll you'll get soundness uh

967
00:35:12,400 --> 00:35:14,880
unfortunately the assumption is

968
00:35:13,680 --> 00:35:16,480
incredibly strong

969
00:35:14,880 --> 00:35:17,920
like very non-standard and you would not

970
00:35:16,480 --> 00:35:18,800
want to be caught making such an

971
00:35:17,920 --> 00:35:21,040
assumption

972
00:35:18,800 --> 00:35:22,480
uh but but from a theoretical

973
00:35:21,040 --> 00:35:24,240
perspective it's a it's a nice

974
00:35:22,480 --> 00:35:27,200
feasibility result

975
00:35:24,240 --> 00:35:27,520
um more recently we were able to show

976
00:35:27,200 --> 00:35:30,560
that

977
00:35:27,520 --> 00:35:31,680
for a very specific class of interactive

978
00:35:30,560 --> 00:35:33,440
proof systems

979
00:35:31,680 --> 00:35:35,359
you can do you can have a fiat from your

980
00:35:33,440 --> 00:35:37,040
compiler under a standard cryptographic

981
00:35:35,359 --> 00:35:38,400
assumption uh more recently it's been

982
00:35:37,040 --> 00:35:40,160
shown that you can do it under the

983
00:35:38,400 --> 00:35:42,240
learning with errors assumption

984
00:35:40,160 --> 00:35:44,000
and then finally i i want to say because

985
00:35:42,240 --> 00:35:46,240
the relevance to this work

986
00:35:44,000 --> 00:35:48,240
that's for a certain intermediate class

987
00:35:46,240 --> 00:35:48,799
of interactive proof systems not all of

988
00:35:48,240 --> 00:35:52,078
them but

989
00:35:48,800 --> 00:35:55,680
uh but more than the smaller class

990
00:35:52,079 --> 00:35:58,880
uh we know how to do fiat chaneer

991
00:35:55,680 --> 00:36:00,799
under a strong but a strong assumption

992
00:35:58,880 --> 00:36:02,960
that is not quite as strong as required

993
00:36:00,800 --> 00:36:05,359
for the general purpose results

994
00:36:02,960 --> 00:36:06,880
so i'm pointing this out because uh the

995
00:36:05,359 --> 00:36:10,000
sum check protocol which is

996
00:36:06,880 --> 00:36:12,079
quite important isn't is in this class

997
00:36:10,000 --> 00:36:13,920
but we don't know how to compile it

998
00:36:12,079 --> 00:36:15,200
under or we did not know how to compile

999
00:36:13,920 --> 00:36:17,359
it under standard cryptographic

1000
00:36:15,200 --> 00:36:19,919
assumption uh as of this work

1001
00:36:17,359 --> 00:36:20,880
so as you can see from from this state

1002
00:36:19,920 --> 00:36:23,680
of the art

1003
00:36:20,880 --> 00:36:24,480
uh there is no succinct interactive

1004
00:36:23,680 --> 00:36:26,240
proof system

1005
00:36:24,480 --> 00:36:27,520
that we could provably instantiate

1006
00:36:26,240 --> 00:36:29,680
theatromere for

1007
00:36:27,520 --> 00:36:31,520
uh under a standard assumption uh this

1008
00:36:29,680 --> 00:36:33,118
was uh this was an interesting open

1009
00:36:31,520 --> 00:36:35,119
problem

1010
00:36:33,119 --> 00:36:36,160
so in this work we're going to stare at

1011
00:36:35,119 --> 00:36:38,800
a particular

1012
00:36:36,160 --> 00:36:40,640
succinct interactive proof system and do

1013
00:36:38,800 --> 00:36:41,839
feature mirror for it under a reasonable

1014
00:36:40,640 --> 00:36:44,640
assumption

1015
00:36:41,839 --> 00:36:45,759
so the computational problem underlying

1016
00:36:44,640 --> 00:36:48,240
the protocol

1017
00:36:45,760 --> 00:36:49,280
uh is the repeated squaring problem so

1018
00:36:48,240 --> 00:36:52,240
you have some

1019
00:36:49,280 --> 00:36:53,440
rsa modulus n and a group element g in

1020
00:36:52,240 --> 00:36:55,839
zn start

1021
00:36:53,440 --> 00:36:57,760
and you want to iteratively compute or

1022
00:36:55,839 --> 00:37:00,320
you want to compute the result

1023
00:36:57,760 --> 00:37:01,599
of an iterated squaring of g done many

1024
00:37:00,320 --> 00:37:04,320
times so you want to compute

1025
00:37:01,599 --> 00:37:06,000
g to the 2 to the t mod n for some large

1026
00:37:04,320 --> 00:37:08,640
value of t

1027
00:37:06,000 --> 00:37:10,160
it's believed that this problem is hard

1028
00:37:08,640 --> 00:37:12,879
namely it should take about time

1029
00:37:10,160 --> 00:37:14,799
t even sequentially and there are uh

1030
00:37:12,880 --> 00:37:16,560
important cryptographic objects like

1031
00:37:14,800 --> 00:37:19,599
time lock puzzles based on

1032
00:37:16,560 --> 00:37:21,520
such an assumption uh so

1033
00:37:19,599 --> 00:37:23,520
more than more than this just being an

1034
00:37:21,520 --> 00:37:25,440
interesting computational problem

1035
00:37:23,520 --> 00:37:27,839
there's a nice succinct interactive

1036
00:37:25,440 --> 00:37:29,520
proof system for this computation

1037
00:37:27,839 --> 00:37:31,040
it was introduced by pieterzak a couple

1038
00:37:29,520 --> 00:37:32,640
of years ago

1039
00:37:31,040 --> 00:37:34,240
very quickly the way it the way it

1040
00:37:32,640 --> 00:37:36,240
essentially works is the prover

1041
00:37:34,240 --> 00:37:37,439
is repeatedly forced to send some

1042
00:37:36,240 --> 00:37:39,279
halfway point

1043
00:37:37,440 --> 00:37:40,720
of the computation it's supposed to be

1044
00:37:39,280 --> 00:37:42,960
uh doing

1045
00:37:40,720 --> 00:37:45,040
and then the verifier computes a random

1046
00:37:42,960 --> 00:37:46,000
two to one self reduction of two sub

1047
00:37:45,040 --> 00:37:49,119
problems

1048
00:37:46,000 --> 00:37:50,800
to a like to reduce the entire problem

1049
00:37:49,119 --> 00:37:53,920
to a statement of size

1050
00:37:50,800 --> 00:37:56,880
half of the original statement by

1051
00:37:53,920 --> 00:37:57,680
by doing this recursively many times you

1052
00:37:56,880 --> 00:37:59,440
can

1053
00:37:57,680 --> 00:38:01,680
you get a succinct interactive proof

1054
00:37:59,440 --> 00:38:04,240
system for this language

1055
00:38:01,680 --> 00:38:06,799
so you can at least heuristically apply

1056
00:38:04,240 --> 00:38:08,160
fiat chamier to this protocol

1057
00:38:06,800 --> 00:38:09,920
and you can get soundness in the random

1058
00:38:08,160 --> 00:38:11,680
oracle model uh

1059
00:38:09,920 --> 00:38:14,720
what that means again is replacing these

1060
00:38:11,680 --> 00:38:17,279
verifier random challenges with hashes

1061
00:38:14,720 --> 00:38:18,480
of the problem statement and the prover

1062
00:38:17,280 --> 00:38:19,920
messages

1063
00:38:18,480 --> 00:38:21,920
but our question is whether you can do

1064
00:38:19,920 --> 00:38:24,000
this in the standard model

1065
00:38:21,920 --> 00:38:25,280
and we show that under a reasonable

1066
00:38:24,000 --> 00:38:28,079
assumption you can

1067
00:38:25,280 --> 00:38:29,200
so here are results um if the learning

1068
00:38:28,079 --> 00:38:32,400
with errors problem

1069
00:38:29,200 --> 00:38:34,960
is sub exponentially hard for a six

1070
00:38:32,400 --> 00:38:35,839
large sub exponent like a it's not a two

1071
00:38:34,960 --> 00:38:37,599
to the n to the

1072
00:38:35,839 --> 00:38:39,839
epsilon type assumption but two to the n

1073
00:38:37,599 --> 00:38:42,240
to the one minus epsilon type assumption

1074
00:38:39,839 --> 00:38:42,960
uh then we can do feature mir for this

1075
00:38:42,240 --> 00:38:44,879
protocol

1076
00:38:42,960 --> 00:38:46,079
with verification time two to the n to

1077
00:38:44,880 --> 00:38:49,280
the epsilon so some small

1078
00:38:46,079 --> 00:38:50,800
sub-exponential verification time

1079
00:38:49,280 --> 00:38:52,240
just for for reference this is way less

1080
00:38:50,800 --> 00:38:54,000
the amount of time it takes to decide

1081
00:38:52,240 --> 00:38:57,680
the language

1082
00:38:54,000 --> 00:39:00,079
so this is our main results we can get

1083
00:38:57,680 --> 00:39:00,720
smaller verification time by making a

1084
00:39:00,079 --> 00:39:02,880
stronger

1085
00:39:00,720 --> 00:39:04,480
lwe assumption and all of the

1086
00:39:02,880 --> 00:39:05,200
assumptions we make for all of these

1087
00:39:04,480 --> 00:39:07,599
results

1088
00:39:05,200 --> 00:39:08,480
uh follow from some from hardness of

1089
00:39:07,599 --> 00:39:10,720
some worst-case

1090
00:39:08,480 --> 00:39:12,079
lattice problem uh even even the

1091
00:39:10,720 --> 00:39:13,839
assumption that uh that gives you

1092
00:39:12,079 --> 00:39:15,760
polynomial like native polynomial time

1093
00:39:13,839 --> 00:39:19,200
verification

1094
00:39:15,760 --> 00:39:20,160
uh so the i i think of uh the first

1095
00:39:19,200 --> 00:39:22,319
result as the

1096
00:39:20,160 --> 00:39:23,839
as the main one and the second and the

1097
00:39:22,320 --> 00:39:25,760
later two are just getting different

1098
00:39:23,839 --> 00:39:28,799
quantitative trade-offs

1099
00:39:25,760 --> 00:39:31,599
so this is our main result and

1100
00:39:28,800 --> 00:39:32,320
we immediately get two cool applications

1101
00:39:31,599 --> 00:39:34,640
uh

1102
00:39:32,320 --> 00:39:36,720
because doing fiat chamier for this

1103
00:39:34,640 --> 00:39:39,359
particular protocol gives nice

1104
00:39:36,720 --> 00:39:40,799
like has nice implications so one thing

1105
00:39:39,359 --> 00:39:43,119
that we get is hardness in the

1106
00:39:40,800 --> 00:39:45,359
complexity p-pad which captures uh the

1107
00:39:43,119 --> 00:39:46,480
hardness of computing nash equilibria in

1108
00:39:45,359 --> 00:39:48,720
game theory

1109
00:39:46,480 --> 00:39:50,240
so we can show that if the repeated

1110
00:39:48,720 --> 00:39:52,720
squaring problem is

1111
00:39:50,240 --> 00:39:54,839
sub-exponentially hard and lwe is

1112
00:39:52,720 --> 00:39:56,879
sub-exponentially hard for this larger

1113
00:39:54,839 --> 00:39:58,960
sub-exponential then we get hardness in

1114
00:39:56,880 --> 00:40:00,960
p-pattern

1115
00:39:58,960 --> 00:40:02,640
you again get similar results with

1116
00:40:00,960 --> 00:40:03,520
different trade-offs based on the other

1117
00:40:02,640 --> 00:40:06,960
two results from

1118
00:40:03,520 --> 00:40:09,359
the previous slide we also get standard

1119
00:40:06,960 --> 00:40:11,280
model verifiable delay functions

1120
00:40:09,359 --> 00:40:12,560
with sub-exponential evaluation time

1121
00:40:11,280 --> 00:40:14,240
based on this uh

1122
00:40:12,560 --> 00:40:16,319
based on the sub-exponential assumptions

1123
00:40:14,240 --> 00:40:17,839
and a smaller evaluation of time

1124
00:40:16,319 --> 00:40:18,720
evaluation time based on the stronger

1125
00:40:17,839 --> 00:40:21,359
assumptions

1126
00:40:18,720 --> 00:40:23,040
uh this of course requires uh assuming

1127
00:40:21,359 --> 00:40:24,000
sequential hardness of repeated squaring

1128
00:40:23,040 --> 00:40:27,520
so that you get

1129
00:40:24,000 --> 00:40:28,960
a guaranteed delay so what i like about

1130
00:40:27,520 --> 00:40:29,520
these results is that we're making

1131
00:40:28,960 --> 00:40:31,680
strong

1132
00:40:29,520 --> 00:40:33,280
but sub-exponential assumptions about

1133
00:40:31,680 --> 00:40:35,598
well-studied problems

1134
00:40:33,280 --> 00:40:36,960
and as a result we get a succinct

1135
00:40:35,599 --> 00:40:38,640
non-interactive argument for a

1136
00:40:36,960 --> 00:40:40,880
non-trivial language that has these cool

1137
00:40:38,640 --> 00:40:44,000
applications

1138
00:40:40,880 --> 00:40:46,400
so just a word on related work uh

1139
00:40:44,000 --> 00:40:47,920
in terms of verifiable delay functions

1140
00:40:46,400 --> 00:40:50,079
there isn't really there wasn't really

1141
00:40:47,920 --> 00:40:51,920
anything known in the standard model

1142
00:40:50,079 --> 00:40:53,280
based on standard cryptographic

1143
00:40:51,920 --> 00:40:55,599
assumptions before

1144
00:40:53,280 --> 00:40:56,640
uh for p-pad hardness we we have we have

1145
00:40:55,599 --> 00:40:58,880
a few works

1146
00:40:56,640 --> 00:41:00,240
uh they're not based on standard

1147
00:40:58,880 --> 00:41:02,480
assumptions but they're

1148
00:41:00,240 --> 00:41:03,839
they're works worth mentioning so we

1149
00:41:02,480 --> 00:41:05,200
were able to get p-pad hardest

1150
00:41:03,839 --> 00:41:08,240
previously based on

1151
00:41:05,200 --> 00:41:10,799
obfuscation as well as uh

1152
00:41:08,240 --> 00:41:13,040
based on the soundness of fiat chamier

1153
00:41:10,800 --> 00:41:14,560
for both the sum check protocol and the

1154
00:41:13,040 --> 00:41:17,200
squaring protocol

1155
00:41:14,560 --> 00:41:18,960
uh but these before we did not have an

1156
00:41:17,200 --> 00:41:21,279
instantiation for the thetromere hash

1157
00:41:18,960 --> 00:41:23,520
function based on a standard assumption

1158
00:41:21,280 --> 00:41:24,599
and then finally concurrently to this

1159
00:41:23,520 --> 00:41:26,560
work uh

1160
00:41:24,599 --> 00:41:29,359
kalayapanatanyang gave a different

1161
00:41:26,560 --> 00:41:31,040
construction of a p-pad hard instance

1162
00:41:29,359 --> 00:41:32,640
based on a falsifiable assumption on by

1163
00:41:31,040 --> 00:41:33,520
linear maps that does not go through

1164
00:41:32,640 --> 00:41:35,040
fietjamir

1165
00:41:33,520 --> 00:41:37,040
and you'll hear about this from lisa in

1166
00:41:35,040 --> 00:41:39,119
the next talk

1167
00:41:37,040 --> 00:41:40,560
so i of course don't really have time to

1168
00:41:39,119 --> 00:41:42,560
explain much about our techniques but

1169
00:41:40,560 --> 00:41:44,319
let me give a clickbaity one sentence

1170
00:41:42,560 --> 00:41:47,200
explanation of what we do

1171
00:41:44,319 --> 00:41:48,079
we we do homomorphic index calculus

1172
00:41:47,200 --> 00:41:49,759
meaning that

1173
00:41:48,079 --> 00:41:51,760
in our security proof we actually

1174
00:41:49,760 --> 00:41:52,800
evaluate an index calculus algorithm for

1175
00:41:51,760 --> 00:41:54,560
discrete logs

1176
00:41:52,800 --> 00:41:56,400
under the under a homomorphic encryption

1177
00:41:54,560 --> 00:41:58,960
scheme if that sounds ridiculous

1178
00:41:56,400 --> 00:42:00,880
it is but see the paper or the longer

1179
00:41:58,960 --> 00:42:03,119
talk for more details

1180
00:42:00,880 --> 00:42:05,119
and that's all i wanted to say thank you

1181
00:42:03,119 --> 00:42:07,760
okay thanks alex i think we can take a

1182
00:42:05,119 --> 00:42:07,760
quick question

1183
00:42:08,480 --> 00:42:19,359
is there any

1184
00:42:16,319 --> 00:42:20,560
okay maybe let me ask one so for the p

1185
00:42:19,359 --> 00:42:22,400
plant harness

1186
00:42:20,560 --> 00:42:24,560
is there any hope to reduce to kind of

1187
00:42:22,400 --> 00:42:26,480
remove one of the two

1188
00:42:24,560 --> 00:42:28,160
assumptions because right now you have

1189
00:42:26,480 --> 00:42:30,079
both so

1190
00:42:28,160 --> 00:42:31,839
i mean if you're doing theatromir for a

1191
00:42:30,079 --> 00:42:33,680
squaring protocol then you need to

1192
00:42:31,839 --> 00:42:34,160
assume that the underlying language is

1193
00:42:33,680 --> 00:42:36,319
hard

1194
00:42:34,160 --> 00:42:37,839
like the the per like the per like

1195
00:42:36,319 --> 00:42:39,759
getting a succinct

1196
00:42:37,839 --> 00:42:41,279
argument for a language is not

1197
00:42:39,760 --> 00:42:42,079
interesting if the language is itself

1198
00:42:41,280 --> 00:42:44,079
easy

1199
00:42:42,079 --> 00:42:45,920
um so it there's some there's some

1200
00:42:44,079 --> 00:42:47,200
follow-up work actually that appeared on

1201
00:42:45,920 --> 00:42:49,680
eprint a few weeks ago

1202
00:42:47,200 --> 00:42:51,040
that's that manages to instantiate fiat

1203
00:42:49,680 --> 00:42:53,040
mirror for some check

1204
00:42:51,040 --> 00:42:54,240
uh and uh and this gets rid of the

1205
00:42:53,040 --> 00:42:56,480
squaring assumption

1206
00:42:54,240 --> 00:42:57,279
and also weakens the lwb assumption so

1207
00:42:56,480 --> 00:42:58,720
i'm sure we'll be

1208
00:42:57,280 --> 00:43:00,319
the community will be hearing about this

1209
00:42:58,720 --> 00:43:04,240
more in the future

1210
00:43:00,319 --> 00:43:06,400
okay excellent all right thanks alex

1211
00:43:04,240 --> 00:43:09,839
again i think we can move on to the

1212
00:43:06,400 --> 00:43:12,640
next one so our next talk will be

1213
00:43:09,839 --> 00:43:13,520
also about p-pad harness it's uh it's

1214
00:43:12,640 --> 00:43:15,680
delegation with

1215
00:43:13,520 --> 00:43:16,960
updates well on ambiguous proofs and

1216
00:43:15,680 --> 00:43:20,399
p-band harness

1217
00:43:16,960 --> 00:43:21,359
by lisa yen yeah tommen clyde and armor

1218
00:43:20,400 --> 00:43:24,480
panet and i think

1219
00:43:21,359 --> 00:43:26,640
lisa will be giving the talk

1220
00:43:24,480 --> 00:43:28,480
so these are the floor is yours thank

1221
00:43:26,640 --> 00:43:32,160
you

1222
00:43:28,480 --> 00:43:32,160
so me

1223
00:43:38,400 --> 00:43:43,599
all right can you all see this okay

1224
00:43:41,839 --> 00:43:45,520
all right so uh yeah thank you for the

1225
00:43:43,599 --> 00:43:47,680
introduction um

1226
00:43:45,520 --> 00:43:48,640
so our work is about delegation schemes

1227
00:43:47,680 --> 00:43:51,759
uh and

1228
00:43:48,640 --> 00:43:54,640
their application to keypad hardness so

1229
00:43:51,760 --> 00:43:56,480
in a delegation scheme you typically

1230
00:43:54,640 --> 00:43:57,040
have a weak machine such as a smart

1231
00:43:56,480 --> 00:43:58,560
watch

1232
00:43:57,040 --> 00:44:00,480
that wants to learn the outcome of a

1233
00:43:58,560 --> 00:44:02,960
costly computation

1234
00:44:00,480 --> 00:44:05,200
so he asks a more powerful machine such

1235
00:44:02,960 --> 00:44:07,280
as the cloud to perform the computation

1236
00:44:05,200 --> 00:44:09,839
and to send back a proof and the

1237
00:44:07,280 --> 00:44:11,359
verifier will just check the proof

1238
00:44:09,839 --> 00:44:13,839
in much less time than it would take to

1239
00:44:11,359 --> 00:44:15,279
perform the original computation

1240
00:44:13,839 --> 00:44:17,119
and so the question underlying

1241
00:44:15,280 --> 00:44:18,079
delegation is can we actually construct

1242
00:44:17,119 --> 00:44:21,920
protocols

1243
00:44:18,079 --> 00:44:23,040
where verifying is faster than computing

1244
00:44:21,920 --> 00:44:26,160
so

1245
00:44:23,040 --> 00:44:27,920
our focus uh today will be on staying in

1246
00:44:26,160 --> 00:44:29,598
uh the standard model and relying on

1247
00:44:27,920 --> 00:44:32,640
falsifiable assumptions

1248
00:44:29,599 --> 00:44:34,240
and so in in this model uh the only

1249
00:44:32,640 --> 00:44:37,200
schemes we had

1250
00:44:34,240 --> 00:44:38,240
for delegating computations um up until

1251
00:44:37,200 --> 00:44:41,759
very recently

1252
00:44:38,240 --> 00:44:42,799
uh had were what we call privately

1253
00:44:41,760 --> 00:44:44,800
verifiable

1254
00:44:42,800 --> 00:44:46,800
where the verifier needs access to some

1255
00:44:44,800 --> 00:44:48,720
secret trap door information in order to

1256
00:44:46,800 --> 00:44:51,359
check the proof

1257
00:44:48,720 --> 00:44:52,799
and what we'd really like is to have

1258
00:44:51,359 --> 00:44:53,920
what we call publicly verifiable

1259
00:44:52,800 --> 00:44:56,640
delegation

1260
00:44:53,920 --> 00:44:57,119
where the statement and proof can just

1261
00:44:56,640 --> 00:44:58,960
be

1262
00:44:57,119 --> 00:45:01,119
checked by anyone without needing

1263
00:44:58,960 --> 00:45:03,599
trapdoor information

1264
00:45:01,119 --> 00:45:05,280
and the primary motivation for publicly

1265
00:45:03,599 --> 00:45:07,599
verifiable delegation

1266
00:45:05,280 --> 00:45:09,280
is there they're very essential to

1267
00:45:07,599 --> 00:45:11,200
decentralized applications such as

1268
00:45:09,280 --> 00:45:13,359
cryptocurrencies and blockchains

1269
00:45:11,200 --> 00:45:16,799
where you really want anyone to be able

1270
00:45:13,359 --> 00:45:20,160
to verify these public proofs

1271
00:45:16,800 --> 00:45:21,760
so um the prior works on publicly

1272
00:45:20,160 --> 00:45:24,960
verifiable delegation

1273
00:45:21,760 --> 00:45:25,280
uh up until last year and and this year

1274
00:45:24,960 --> 00:45:29,680
uh

1275
00:45:25,280 --> 00:45:32,960
relied on strong assumptions and um

1276
00:45:29,680 --> 00:45:34,879
last year uh the most like so

1277
00:45:32,960 --> 00:45:36,800
so the the only publicly verifiable

1278
00:45:34,880 --> 00:45:39,520
delegation scheme we have

1279
00:45:36,800 --> 00:45:39,920
for general polynomial time computations

1280
00:45:39,520 --> 00:45:41,839
um

1281
00:45:39,920 --> 00:45:43,839
is our previous work that constructs the

1282
00:45:41,839 --> 00:45:44,799
scheme based on a bilinear group

1283
00:45:43,839 --> 00:45:47,119
assumption

1284
00:45:44,800 --> 00:45:48,319
and what we do in this work is we build

1285
00:45:47,119 --> 00:45:50,960
upon this scheme

1286
00:45:48,319 --> 00:45:52,640
to make its proofs both updatable and

1287
00:45:50,960 --> 00:45:56,640
unambiguous

1288
00:45:52,640 --> 00:46:00,000
both based on this same assumption

1289
00:45:56,640 --> 00:46:03,040
so the first notion that we achieve

1290
00:46:00,000 --> 00:46:04,800
is updatable proofs and this notion

1291
00:46:03,040 --> 00:46:06,720
introduced by valiant

1292
00:46:04,800 --> 00:46:08,079
considers a long computation that's

1293
00:46:06,720 --> 00:46:10,879
carried out over

1294
00:46:08,079 --> 00:46:12,720
many separate iterations and the idea is

1295
00:46:10,880 --> 00:46:14,240
that as the computation progresses you

1296
00:46:12,720 --> 00:46:15,759
have a proof for the computation

1297
00:46:14,240 --> 00:46:18,479
performed so far

1298
00:46:15,760 --> 00:46:19,680
and as someone performs the next block

1299
00:46:18,480 --> 00:46:22,160
of the computation

1300
00:46:19,680 --> 00:46:23,279
uh he'll update the proof and this new

1301
00:46:22,160 --> 00:46:26,560
proof completely

1302
00:46:23,280 --> 00:46:28,480
replaces the old proof uh it proves

1303
00:46:26,560 --> 00:46:31,040
like all like all the computation that's

1304
00:46:28,480 --> 00:46:33,760
that's been performed up to this point

1305
00:46:31,040 --> 00:46:34,880
and what we want in updatable proofs is

1306
00:46:33,760 --> 00:46:38,079
for this update

1307
00:46:34,880 --> 00:46:39,839
procedure to be efficient uh and what we

1308
00:46:38,079 --> 00:46:40,800
also want is for the proof to remain

1309
00:46:39,839 --> 00:46:42,960
succinct so

1310
00:46:40,800 --> 00:46:44,480
the proof shouldn't grow with the the

1311
00:46:42,960 --> 00:46:47,040
number of updates

1312
00:46:44,480 --> 00:46:48,800
and the idea is that in like

1313
00:46:47,040 --> 00:46:51,520
decentralized applications

1314
00:46:48,800 --> 00:46:53,280
you may have a long computation uh

1315
00:46:51,520 --> 00:46:54,960
carried out

1316
00:46:53,280 --> 00:46:57,520
through many different updates and you

1317
00:46:54,960 --> 00:47:01,200
want the proof and verifying the proof

1318
00:46:57,520 --> 00:47:03,680
to still remain efficient so

1319
00:47:01,200 --> 00:47:05,520
previously we only had updatable proofs

1320
00:47:03,680 --> 00:47:08,078
based on snargs which are

1321
00:47:05,520 --> 00:47:10,640
only based on strong assumptions and as

1322
00:47:08,079 --> 00:47:14,319
i said we get updatable proofs based on

1323
00:47:10,640 --> 00:47:17,118
a falsifiable bilinear group assumption

1324
00:47:14,319 --> 00:47:19,359
so the second property we also get is

1325
00:47:17,119 --> 00:47:21,920
the notion of unambiguous proofs

1326
00:47:19,359 --> 00:47:22,480
which says that any prover cannot

1327
00:47:21,920 --> 00:47:24,400
produce

1328
00:47:22,480 --> 00:47:25,839
two different accepting proofs for this

1329
00:47:24,400 --> 00:47:28,720
same statement

1330
00:47:25,839 --> 00:47:31,200
except with a negligible probability and

1331
00:47:28,720 --> 00:47:32,000
the primary motivation for unambiguous

1332
00:47:31,200 --> 00:47:36,160
proofs is

1333
00:47:32,000 --> 00:47:36,160
uh their application to ppad hardness

1334
00:47:36,640 --> 00:47:40,879
so formally our result is uh publicly

1335
00:47:39,440 --> 00:47:43,440
verifiable delegation

1336
00:47:40,880 --> 00:47:46,400
with updatable and unambiguous proofs

1337
00:47:43,440 --> 00:47:48,880
based on this bilinear group assumption

1338
00:47:46,400 --> 00:47:51,280
which uh that in which the adversary is

1339
00:47:48,880 --> 00:47:53,839
given a three by alpha matrix of group

1340
00:47:51,280 --> 00:47:57,599
elements for logarithmic alpha

1341
00:47:53,839 --> 00:48:00,720
and it's hard to distinguish whether

1342
00:47:57,599 --> 00:48:01,680
this specific element t is a higher

1343
00:48:00,720 --> 00:48:05,200
power of

1344
00:48:01,680 --> 00:48:08,799
s or an independent random element

1345
00:48:05,200 --> 00:48:11,680
and this assumption we believe is uh new

1346
00:48:08,800 --> 00:48:12,720
uh but is similar in spirit to uh you

1347
00:48:11,680 --> 00:48:15,118
know the wide range of

1348
00:48:12,720 --> 00:48:16,799
some bilinear group assumptions made uh

1349
00:48:15,119 --> 00:48:19,760
throughout crypto and it holds in the

1350
00:48:16,800 --> 00:48:22,079
generic group model

1351
00:48:19,760 --> 00:48:23,599
and so we use this delegation scheme to

1352
00:48:22,079 --> 00:48:25,920
show p-pad hardness following the

1353
00:48:23,599 --> 00:48:28,240
blueprint of chanduriatel

1354
00:48:25,920 --> 00:48:29,839
and so what we obtain is p-pad hardness

1355
00:48:28,240 --> 00:48:30,799
just based on the quasi-polynomial

1356
00:48:29,839 --> 00:48:34,160
hardness of this

1357
00:48:30,800 --> 00:48:35,920
assumption and uh the sum and

1358
00:48:34,160 --> 00:48:38,720
any hard language else so if you're

1359
00:48:35,920 --> 00:48:42,480
willing to assume non-uniform eth

1360
00:48:38,720 --> 00:48:45,680
then this uh gives you a a hard language

1361
00:48:42,480 --> 00:48:45,680
l that suffices

1362
00:48:46,480 --> 00:48:50,720
so as as alex also mentioned showing

1363
00:48:49,680 --> 00:48:53,200
people hardness

1364
00:48:50,720 --> 00:48:55,359
has been an important problem and up

1365
00:48:53,200 --> 00:48:57,598
until recently we only had it based on

1366
00:48:55,359 --> 00:48:58,880
strong assumptions or the assumption

1367
00:48:57,599 --> 00:49:02,960
that fiat shamir

1368
00:48:58,880 --> 00:49:06,400
is heuristically secure and

1369
00:49:02,960 --> 00:49:09,280
only only recently did we have

1370
00:49:06,400 --> 00:49:10,319
p-pad harness based on action the lwe

1371
00:49:09,280 --> 00:49:12,880
assumption

1372
00:49:10,319 --> 00:49:13,599
and you can view these concurrent works

1373
00:49:12,880 --> 00:49:15,920
as

1374
00:49:13,599 --> 00:49:16,960
essentially constructing a delegation

1375
00:49:15,920 --> 00:49:19,119
scheme

1376
00:49:16,960 --> 00:49:21,280
but only for a particular language such

1377
00:49:19,119 --> 00:49:23,760
as the repeated scoring language

1378
00:49:21,280 --> 00:49:24,880
and so in our work we we kind of went

1379
00:49:23,760 --> 00:49:27,280
the other way we

1380
00:49:24,880 --> 00:49:28,559
constructed a delegation scheme for for

1381
00:49:27,280 --> 00:49:33,040
any language

1382
00:49:28,559 --> 00:49:33,040
and then use that to show p-pad hardness

1383
00:49:33,520 --> 00:49:39,759
so in summary our results are

1384
00:49:37,359 --> 00:49:41,839
a souped-up delegation scheme based on a

1385
00:49:39,760 --> 00:49:45,119
falsifiable assumption

1386
00:49:41,839 --> 00:49:46,720
and ppad hardness also based on this

1387
00:49:45,119 --> 00:49:49,760
assumption

1388
00:49:46,720 --> 00:49:52,959
and i'll just say in a nutshell

1389
00:49:49,760 --> 00:49:56,640
how we get our results is

1390
00:49:52,960 --> 00:49:59,119
we actually um obtain these updatability

1391
00:49:56,640 --> 00:50:03,839
and unambiguity properties

1392
00:49:59,119 --> 00:50:06,160
without relying on strong assumptions by

1393
00:50:03,839 --> 00:50:07,599
using the power of what we call local

1394
00:50:06,160 --> 00:50:10,720
proofs

1395
00:50:07,599 --> 00:50:12,480
in non-deterministic delegation so

1396
00:50:10,720 --> 00:50:14,399
essentially these two properties can be

1397
00:50:12,480 --> 00:50:15,520
obtained by relying on strong

1398
00:50:14,400 --> 00:50:19,119
assumptions for

1399
00:50:15,520 --> 00:50:21,040
for non-deterministic delegation but

1400
00:50:19,119 --> 00:50:22,240
we can relax that assumption

1401
00:50:21,040 --> 00:50:26,400
significantly

1402
00:50:22,240 --> 00:50:28,640
if we essentially use the

1403
00:50:26,400 --> 00:50:30,079
if we essentially use local proofs which

1404
00:50:28,640 --> 00:50:33,520
means that we

1405
00:50:30,079 --> 00:50:35,599
use a single proof to do many separate

1406
00:50:33,520 --> 00:50:38,559
extractions

1407
00:50:35,599 --> 00:50:41,119
and we piece together these extractions

1408
00:50:38,559 --> 00:50:43,119
by showing that they're consistent

1409
00:50:41,119 --> 00:50:46,000
and this is uh kind of in a nutshell how

1410
00:50:43,119 --> 00:50:48,240
we get updatability and unambiguity

1411
00:50:46,000 --> 00:50:50,480
and also p-pad hardness under our

1412
00:50:48,240 --> 00:50:53,680
assumption

1413
00:50:50,480 --> 00:50:55,680
and uh the full version of our work will

1414
00:50:53,680 --> 00:50:58,240
be up soon but in the meantime

1415
00:50:55,680 --> 00:51:00,078
feel free to refer to the proceedings or

1416
00:50:58,240 --> 00:51:04,000
email us

1417
00:51:00,079 --> 00:51:09,839
thank you okay thank you lisa

1418
00:51:04,000 --> 00:51:09,839
and we have time to ask for questions

1419
00:51:10,400 --> 00:51:13,599
let me let me start with one when people

1420
00:51:12,400 --> 00:51:15,760
are typing in their

1421
00:51:13,599 --> 00:51:17,520
questions so in this case is there any

1422
00:51:15,760 --> 00:51:21,599
real word motivation or

1423
00:51:17,520 --> 00:51:24,400
application for the unambiguous proofs

1424
00:51:21,599 --> 00:51:24,720
yeah so um this is actually a question

1425
00:51:24,400 --> 00:51:28,160
we

1426
00:51:24,720 --> 00:51:31,200
have as well uh because the only

1427
00:51:28,160 --> 00:51:32,078
motivation we had for it was to get ppad

1428
00:51:31,200 --> 00:51:35,118
hardness

1429
00:51:32,079 --> 00:51:36,960
so we don't know of any um any

1430
00:51:35,119 --> 00:51:38,559
applications but it seems like a very

1431
00:51:36,960 --> 00:51:41,040
interesting property that you kind of

1432
00:51:38,559 --> 00:51:43,680
have like this canonical proof

1433
00:51:41,040 --> 00:51:45,040
uh and so we'd be happy to you know talk

1434
00:51:43,680 --> 00:51:47,359
with anyone that wants to discuss it

1435
00:51:45,040 --> 00:51:47,359
further

1436
00:51:47,440 --> 00:51:52,480
cool nice there are other questions

1437
00:52:03,040 --> 00:52:07,440
well i don't see any from the zoom chat

1438
00:52:05,280 --> 00:52:07,440
and

1439
00:52:07,760 --> 00:52:10,559
zulip either

1440
00:52:12,480 --> 00:52:16,240
well actually i'm curious um

1441
00:52:17,599 --> 00:52:21,760
if i want to pick up you know p p

1442
00:52:20,000 --> 00:52:24,000
harness from crypto

1443
00:52:21,760 --> 00:52:26,079
crypto assumptions would be a good

1444
00:52:24,000 --> 00:52:28,160
starting point i was a little bit

1445
00:52:26,079 --> 00:52:30,000
scared about the slides with all the

1446
00:52:28,160 --> 00:52:32,480
references

1447
00:52:30,000 --> 00:52:34,000
uh so i think yeah the the thing i mean

1448
00:52:32,480 --> 00:52:36,160
alex and i probably both

1449
00:52:34,000 --> 00:52:37,680
would have liked to talk a little bit

1450
00:52:36,160 --> 00:52:40,399
about the reduction

1451
00:52:37,680 --> 00:52:41,839
from like these these delegation schemes

1452
00:52:40,400 --> 00:52:42,800
to ppad hardness because it's very

1453
00:52:41,839 --> 00:52:46,160
interesting

1454
00:52:42,800 --> 00:52:49,839
um that follows the blueprints that

1455
00:52:46,160 --> 00:52:52,879
that transformation is folklore but

1456
00:52:49,839 --> 00:52:56,160
probably first uh written in the

1457
00:52:52,880 --> 00:52:59,599
in the chandrayatel paper um i think

1458
00:52:56,160 --> 00:53:01,680
our proceedings also has a a general

1459
00:52:59,599 --> 00:53:05,119
proof from delegation to

1460
00:53:01,680 --> 00:53:07,919
to ppad hardness um so i think

1461
00:53:05,119 --> 00:53:10,480
that's where i would go to understand

1462
00:53:07,920 --> 00:53:13,599
how crypto can be

1463
00:53:10,480 --> 00:53:16,640
can be connected to ppad okay okay

1464
00:53:13,599 --> 00:53:20,400
excellent thank you thank you again lisa

1465
00:53:16,640 --> 00:53:23,598
if there are no further questions

1466
00:53:20,400 --> 00:53:25,920
let's move on to the next one

1467
00:53:23,599 --> 00:53:28,000
so our next talk will be new techniques

1468
00:53:25,920 --> 00:53:30,800
for their knowledge

1469
00:53:28,000 --> 00:53:31,520
by martial belt and duckman solid and

1470
00:53:30,800 --> 00:53:33,680
moku

1471
00:53:31,520 --> 00:53:34,720
kukarni and i believe marshall will be

1472
00:53:33,680 --> 00:53:43,839
given a talk

1473
00:53:34,720 --> 00:53:43,839
marsha the floor is yours

1474
00:53:45,760 --> 00:53:57,839
marshall are you there we can see your

1475
00:53:49,280 --> 00:53:57,839
share slides but we couldn't hear you

1476
00:54:00,000 --> 00:54:05,200
sorry can you see now yeah can you hear

1477
00:54:03,040 --> 00:54:07,759
me now i'm sorry about that

1478
00:54:05,200 --> 00:54:08,480
so yeah i'm excited to tease you with

1479
00:54:07,760 --> 00:54:10,960
some

1480
00:54:08,480 --> 00:54:12,960
new techniques to zero knowledge uh are

1481
00:54:10,960 --> 00:54:13,520
rather old techniques but new to zero

1482
00:54:12,960 --> 00:54:16,640
knowledge

1483
00:54:13,520 --> 00:54:19,920
uh this is with uh donna documents oled

1484
00:54:16,640 --> 00:54:21,759
and cool cool kearney um so

1485
00:54:19,920 --> 00:54:23,440
right we're interested in this work

1486
00:54:21,760 --> 00:54:26,720
we're interested in zero knowledge

1487
00:54:23,440 --> 00:54:28,720
and witness and distinguishability

1488
00:54:26,720 --> 00:54:30,319
i'm not going to go into detail about

1489
00:54:28,720 --> 00:54:33,200
what these notions are hopefully

1490
00:54:30,319 --> 00:54:34,079
all are familiar otherwise you can see

1491
00:54:33,200 --> 00:54:36,799
my talk or

1492
00:54:34,079 --> 00:54:36,800
other work

1493
00:54:37,520 --> 00:54:41,119
but uh we're particularly interested in

1494
00:54:40,160 --> 00:54:42,480
zero knowledge

1495
00:54:41,119 --> 00:54:43,839
protocols and witness and

1496
00:54:42,480 --> 00:54:45,440
distinguishable protocols where

1497
00:54:43,839 --> 00:54:48,000
interaction is very limited

1498
00:54:45,440 --> 00:54:51,200
so the ideally the prover is just

1499
00:54:48,000 --> 00:54:54,480
sending a single message to the verifier

1500
00:54:51,200 --> 00:54:58,160
we're interested in uh the setting

1501
00:54:54,480 --> 00:55:02,400
where uh you have very limited setup

1502
00:54:58,160 --> 00:55:03,279
uh uh at at most a uniform random string

1503
00:55:02,400 --> 00:55:05,839
and ideally

1504
00:55:03,280 --> 00:55:07,359
uh in the plane model with no crs

1505
00:55:05,839 --> 00:55:10,160
whatsoever

1506
00:55:07,359 --> 00:55:11,520
and we are also interested in such

1507
00:55:10,160 --> 00:55:14,480
protocols that are

1508
00:55:11,520 --> 00:55:15,359
very expressive so they hold for all of

1509
00:55:14,480 --> 00:55:19,280
np or

1510
00:55:15,359 --> 00:55:22,240
even am and sort of

1511
00:55:19,280 --> 00:55:23,839
our perspective in this work is uh

1512
00:55:22,240 --> 00:55:24,319
overarching perspective is to try to

1513
00:55:23,839 --> 00:55:26,720
trade

1514
00:55:24,319 --> 00:55:28,000
prover complexity so increase prover

1515
00:55:26,720 --> 00:55:31,200
complexity

1516
00:55:28,000 --> 00:55:33,359
uh for and by doing so

1517
00:55:31,200 --> 00:55:34,720
uh minimize the assumptions necessary to

1518
00:55:33,359 --> 00:55:36,558
achieve these notions

1519
00:55:34,720 --> 00:55:38,558
of journal and witness and

1520
00:55:36,559 --> 00:55:40,559
distinguishability

1521
00:55:38,559 --> 00:55:41,680
so we consider sort of two settings

1522
00:55:40,559 --> 00:55:44,880
where the prover

1523
00:55:41,680 --> 00:55:46,480
is uh much stronger computationally than

1524
00:55:44,880 --> 00:55:47,760
the verifier so one is sort of this

1525
00:55:46,480 --> 00:55:49,760
traditional setting where we have the

1526
00:55:47,760 --> 00:55:52,799
polytime verifier

1527
00:55:49,760 --> 00:55:55,920
and the prover is uh

1528
00:55:52,799 --> 00:55:57,599
running in super polynomial time and we

1529
00:55:55,920 --> 00:56:00,240
also consider a new setting

1530
00:55:57,599 --> 00:56:01,680
that we introduce called we call fine

1531
00:56:00,240 --> 00:56:03,520
grain zero knowledge or fine grained

1532
00:56:01,680 --> 00:56:05,359
witness and distinguishability

1533
00:56:03,520 --> 00:56:07,280
where the prover is polytime but the

1534
00:56:05,359 --> 00:56:07,920
verifier is actually in a much weaker

1535
00:56:07,280 --> 00:56:11,760
class so

1536
00:56:07,920 --> 00:56:14,839
here uh nc1 which is log depth

1537
00:56:11,760 --> 00:56:16,559
circuits so very fast parallel

1538
00:56:14,839 --> 00:56:18,880
computation um

1539
00:56:16,559 --> 00:56:20,079
and what exactly do we mean by

1540
00:56:18,880 --> 00:56:22,319
fine-grained

1541
00:56:20,079 --> 00:56:23,920
zero knowledge well in the same way that

1542
00:56:22,319 --> 00:56:24,960
we understand zero knowledge in the

1543
00:56:23,920 --> 00:56:27,920
traditional setting

1544
00:56:24,960 --> 00:56:29,680
where we should be able to like simulate

1545
00:56:27,920 --> 00:56:31,760
interaction with an adversarial

1546
00:56:29,680 --> 00:56:33,359
polytheism verifier in polynomial time

1547
00:56:31,760 --> 00:56:34,880
in the fine grain setting we want to

1548
00:56:33,359 --> 00:56:37,598
simulate the interaction with an

1549
00:56:34,880 --> 00:56:42,480
adversarial nc1 verifier

1550
00:56:37,599 --> 00:56:46,000
in nc1 okay

1551
00:56:42,480 --> 00:56:47,920
and so uh in this

1552
00:56:46,000 --> 00:56:49,440
this this with our perspective there's

1553
00:56:47,920 --> 00:56:52,079
sort of uh

1554
00:56:49,440 --> 00:56:53,200
some new challenges uh new obstacles are

1555
00:56:52,079 --> 00:56:56,240
introduced

1556
00:56:53,200 --> 00:56:59,118
and just very briefly uh

1557
00:56:56,240 --> 00:57:00,240
what happened so imagine we want to uh

1558
00:56:59,119 --> 00:57:01,839
we have a witness

1559
00:57:00,240 --> 00:57:03,279
indistinguishable proof system and we

1560
00:57:01,839 --> 00:57:04,400
want to prove something about

1561
00:57:03,280 --> 00:57:06,799
composability

1562
00:57:04,400 --> 00:57:08,400
we want to switch from witnesses one to

1563
00:57:06,799 --> 00:57:10,240
witnesses to we have an adversarial

1564
00:57:08,400 --> 00:57:11,599
verifier that's interacting with these

1565
00:57:10,240 --> 00:57:14,078
two provers

1566
00:57:11,599 --> 00:57:14,720
so typically what we would do right is

1567
00:57:14,079 --> 00:57:16,319
we would

1568
00:57:14,720 --> 00:57:17,919
show a hybrid argument we would first

1569
00:57:16,319 --> 00:57:20,960
switch the first witness on the left and

1570
00:57:17,920 --> 00:57:23,200
then switch the witness on the right

1571
00:57:20,960 --> 00:57:24,079
and this is shown via reduction right

1572
00:57:23,200 --> 00:57:25,359
the reduction

1573
00:57:24,079 --> 00:57:27,440
the sufficient reduction it's going to

1574
00:57:25,359 --> 00:57:30,000
run the verifier and the prover

1575
00:57:27,440 --> 00:57:31,040
on the witness one and then we'll use

1576
00:57:30,000 --> 00:57:32,960
this to break the witness and

1577
00:57:31,040 --> 00:57:35,759
distinguishability of the proof system

1578
00:57:32,960 --> 00:57:37,520
on the left here the problem in the

1579
00:57:35,760 --> 00:57:40,559
inefficient prover setting obviously

1580
00:57:37,520 --> 00:57:42,640
is this reduction can't actually run the

1581
00:57:40,559 --> 00:57:44,960
prover

1582
00:57:42,640 --> 00:57:47,040
and so for composition this isn't or

1583
00:57:44,960 --> 00:57:49,040
this specific composition releases isn't

1584
00:57:47,040 --> 00:57:51,520
too big of an issue but

1585
00:57:49,040 --> 00:57:53,279
we are interested in constructing uh we

1586
00:57:51,520 --> 00:57:55,119
were looking at this construction of

1587
00:57:53,280 --> 00:57:56,480
zaps which are two round witness and

1588
00:57:55,119 --> 00:57:59,520
distinguishable proofs from

1589
00:57:56,480 --> 00:58:03,040
musics and this becomes a quite a

1590
00:57:59,520 --> 00:58:06,000
serious problem here and our solution

1591
00:58:03,040 --> 00:58:08,880
is repurposing of an old idea due to

1592
00:58:06,000 --> 00:58:12,400
nissan and wigterson who are trying to

1593
00:58:08,880 --> 00:58:13,359
de-randomize uh based on hard on average

1594
00:58:12,400 --> 00:58:16,319
problems

1595
00:58:13,359 --> 00:58:18,400
and use this combinatorial designs that

1596
00:58:16,319 --> 00:58:21,200
they introduce

1597
00:58:18,400 --> 00:58:22,559
and i advise you to sort of look at my

1598
00:58:21,200 --> 00:58:25,919
longer form talk

1599
00:58:22,559 --> 00:58:28,400
where it's a pretty cute idea and we

1600
00:58:25,920 --> 00:58:31,839
believe it will have

1601
00:58:28,400 --> 00:58:32,799
other applications but just to sort of

1602
00:58:31,839 --> 00:58:35,279
summarize

1603
00:58:32,799 --> 00:58:37,119
uh here what are results so in the

1604
00:58:35,280 --> 00:58:38,640
traditional setting

1605
00:58:37,119 --> 00:58:40,240
i'm not going to tell you what all of

1606
00:58:38,640 --> 00:58:43,598
these acronyms are

1607
00:58:40,240 --> 00:58:46,000
here but just to yeah to highlight

1608
00:58:43,599 --> 00:58:48,720
in the traditional setting we show zaps

1609
00:58:46,000 --> 00:58:51,359
from one-way permutations

1610
00:58:48,720 --> 00:58:51,759
with inefficient provers and prior to

1611
00:58:51,359 --> 00:58:53,839
this

1612
00:58:51,760 --> 00:58:55,839
we only knew zaps these two round

1613
00:58:53,839 --> 00:58:59,119
witness and distinguishable proofs

1614
00:58:55,839 --> 00:59:01,040
uh from uh trapdoor permutations

1615
00:58:59,119 --> 00:59:02,799
so it's from kryptomania style

1616
00:59:01,040 --> 00:59:03,599
assumptions so we get it down to

1617
00:59:02,799 --> 00:59:05,680
minicrypt

1618
00:59:03,599 --> 00:59:06,960
in the fine-grained setting we show uh

1619
00:59:05,680 --> 00:59:10,799
sort of nc one

1620
00:59:06,960 --> 00:59:11,760
zaps uh from this worst-case hardness

1621
00:59:10,799 --> 00:59:15,280
assumption that

1622
00:59:11,760 --> 00:59:17,359
nc1 does not contain log space

1623
00:59:15,280 --> 00:59:18,480
or actually a sort of a strengthening of

1624
00:59:17,359 --> 00:59:23,040
this

1625
00:59:18,480 --> 00:59:23,040
but yeah that's it

1626
00:59:23,680 --> 00:59:28,000
excellent and thanks marshall as you can

1627
00:59:26,240 --> 00:59:30,078
see from the zoom chat

1628
00:59:28,000 --> 00:59:31,280
there are exponentially many appraisers

1629
00:59:30,079 --> 00:59:34,240
for your nice

1630
00:59:31,280 --> 00:59:34,960
slice maybe the first question would be

1631
00:59:34,240 --> 00:59:38,558
how did you met

1632
00:59:34,960 --> 00:59:43,280
how did you make it uh a keynote

1633
00:59:38,559 --> 00:59:47,839
i just drew on keynote but thank you

1634
00:59:43,280 --> 00:59:47,839
okay are there more serious questions

1635
00:59:55,200 --> 01:00:02,078
oh i saw one from zulip so

1636
00:59:58,400 --> 01:00:03,760
this is from is nc one more interesting

1637
01:00:02,079 --> 01:00:07,280
because of prime work on

1638
01:00:03,760 --> 01:00:10,559
any other intrinsic reason

1639
01:00:07,280 --> 01:00:13,200
uh yeah it's interesting i guess because

1640
01:00:10,559 --> 01:00:16,319
we have a lot of tools there

1641
01:00:13,200 --> 01:00:19,359
uh like the the this whole

1642
01:00:16,319 --> 01:00:21,300
ishai khusha levitz framework for

1643
01:00:19,359 --> 01:00:22,480
doing things

1644
01:00:21,300 --> 01:00:25,040
[Music]

1645
01:00:22,480 --> 01:00:26,400
that's why we look at it i think other

1646
01:00:25,040 --> 01:00:27,279
fine-grained regimes would be very

1647
01:00:26,400 --> 01:00:29,920
interesting but

1648
01:00:27,280 --> 01:00:30,640
yeah beyond nc1 we don't have a lot of

1649
01:00:29,920 --> 01:00:33,760
tools

1650
01:00:30,640 --> 01:00:33,759
i guess it's the issue

1651
01:00:37,200 --> 01:00:43,839
okay are there any other questions

1652
01:00:53,040 --> 01:00:58,480
okay if not we can come to the

1653
01:00:56,799 --> 01:01:00,480
last talk of this issue i'll hand it

1654
01:00:58,480 --> 01:01:02,799
over to muhammad

1655
01:01:00,480 --> 01:01:05,040
so thank you again so we are going to

1656
01:01:02,799 --> 01:01:08,720
now have the last talk of the session

1657
01:01:05,040 --> 01:01:12,480
on interactive proofs for social graphs

1658
01:01:08,720 --> 01:01:15,759
by liran katsir clara shikleman

1659
01:01:12,480 --> 01:01:16,640
and elon yogev and elon is going to give

1660
01:01:15,760 --> 01:01:21,839
the talk

1661
01:01:16,640 --> 01:01:25,759
go ahead hi thank you let me just

1662
01:01:21,839 --> 01:01:29,680
screen and minimize

1663
01:01:25,760 --> 01:01:29,680
yeah okay so can you guys see it

1664
01:01:32,079 --> 01:01:37,839
yeah okay everything good so

1665
01:01:36,160 --> 01:01:39,839
thank you this is joint work with leon

1666
01:01:37,839 --> 01:01:40,558
katsir and kava chickenman interactive

1667
01:01:39,839 --> 01:01:44,000
proofs

1668
01:01:40,559 --> 01:01:46,319
for social graphs so

1669
01:01:44,000 --> 01:01:48,000
let's start if it moves yeah let's start

1670
01:01:46,319 --> 01:01:50,640
with social graphs

1671
01:01:48,000 --> 01:01:51,040
um these are large and effortful parts

1672
01:01:50,640 --> 01:01:53,759
of

1673
01:01:51,040 --> 01:01:55,279
everyday lives of billions of people we

1674
01:01:53,760 --> 01:01:57,280
all use them

1675
01:01:55,280 --> 01:01:58,640
and it's not that only that they collect

1676
01:01:57,280 --> 01:02:00,720
data and we use them

1677
01:01:58,640 --> 01:02:03,440
they really become like this new and

1678
01:02:00,720 --> 01:02:05,279
modern approach to study society and

1679
01:02:03,440 --> 01:02:07,680
human relationship

1680
01:02:05,280 --> 01:02:09,280
there are many commercial companies and

1681
01:02:07,680 --> 01:02:13,038
private companies

1682
01:02:09,280 --> 01:02:15,920
uh facebook twitter tick tock others

1683
01:02:13,039 --> 01:02:17,520
but you could also think about dbmp or

1684
01:02:15,920 --> 01:02:20,880
even search engines

1685
01:02:17,520 --> 01:02:24,319
can be modeled as a social graph

1686
01:02:20,880 --> 01:02:24,319
and other virtual assets

1687
01:02:24,400 --> 01:02:30,000
um something important important is the

1688
01:02:28,000 --> 01:02:31,920
health of a social graph there's

1689
01:02:30,000 --> 01:02:34,319
different measures concerning the

1690
01:02:31,920 --> 01:02:36,640
helpful social graph these

1691
01:02:34,319 --> 01:02:38,319
companies publish reports concerning the

1692
01:02:36,640 --> 01:02:41,440
health of their graphs

1693
01:02:38,319 --> 01:02:43,839
um let's focus on one main measure

1694
01:02:41,440 --> 01:02:45,920
which is the size of the graph okay the

1695
01:02:43,839 --> 01:02:46,960
number of nodes the number of active

1696
01:02:45,920 --> 01:02:50,400
users

1697
01:02:46,960 --> 01:02:52,720
for example facebook acquired whatsapp

1698
01:02:50,400 --> 01:02:55,039
for this steep price of 16 billion

1699
01:02:52,720 --> 01:02:55,680
dollars and it was calculated by a forty

1700
01:02:55,039 --> 01:02:58,640
dollar

1701
01:02:55,680 --> 01:02:59,359
evaluation per user so the size of the

1702
01:02:58,640 --> 01:03:02,319
graph was

1703
01:02:59,359 --> 01:03:03,038
really a big issue and down here you can

1704
01:03:02,319 --> 01:03:05,599
see

1705
01:03:03,039 --> 01:03:08,960
a part of facebook reports saying that

1706
01:03:05,599 --> 01:03:12,880
they have 1.73 billion active users

1707
01:03:08,960 --> 01:03:16,160
um daily active users and 2.6 billion

1708
01:03:12,880 --> 01:03:19,839
monthly active users

1709
01:03:16,160 --> 01:03:24,000
and these reports might be

1710
01:03:19,839 --> 01:03:26,160
potentially um amendable by financial or

1711
01:03:24,000 --> 01:03:26,799
political incentives okay they have some

1712
01:03:26,160 --> 01:03:30,720
incentive

1713
01:03:26,799 --> 01:03:32,720
to report false numbers

1714
01:03:30,720 --> 01:03:34,720
and so should we trust these these

1715
01:03:32,720 --> 01:03:36,078
reports can we trust what's written

1716
01:03:34,720 --> 01:03:39,038
inside

1717
01:03:36,079 --> 01:03:40,960
and our answer is that it's crucial to

1718
01:03:39,039 --> 01:03:43,680
have an independent estimate

1719
01:03:40,960 --> 01:03:44,880
of these measures and the main challenge

1720
01:03:43,680 --> 01:03:47,839
is that

1721
01:03:44,880 --> 01:03:49,280
the graph is huge okay but not only that

1722
01:03:47,839 --> 01:03:51,599
it shows that it's a

1723
01:03:49,280 --> 01:03:54,079
hard computational problem but the

1724
01:03:51,599 --> 01:03:56,480
access to this graph is limited

1725
01:03:54,079 --> 01:03:59,359
okay we do not have access to the full

1726
01:03:56,480 --> 01:04:02,480
facebook or twitter network

1727
01:03:59,359 --> 01:04:03,440
instead what we have we have access to a

1728
01:04:02,480 --> 01:04:06,960
public

1729
01:04:03,440 --> 01:04:08,960
api okay we have public access

1730
01:04:06,960 --> 01:04:10,160
this usually contains two types of

1731
01:04:08,960 --> 01:04:12,319
queries

1732
01:04:10,160 --> 01:04:13,359
the first is membership queries where

1733
01:04:12,319 --> 01:04:16,480
you give an

1734
01:04:13,359 --> 01:04:18,640
id so you give some id from some very

1735
01:04:16,480 --> 01:04:20,319
large possible universe of ids

1736
01:04:18,640 --> 01:04:22,078
and then you can verify that this id

1737
01:04:20,319 --> 01:04:24,558
exists and

1738
01:04:22,079 --> 01:04:25,200
usually you get some user profiles you

1739
01:04:24,559 --> 01:04:28,240
get some

1740
01:04:25,200 --> 01:04:31,520
metadata about this this id this node

1741
01:04:28,240 --> 01:04:34,000
so perhaps uh the name the age

1742
01:04:31,520 --> 01:04:35,440
and so on and second you have a

1743
01:04:34,000 --> 01:04:37,680
neighborhood query

1744
01:04:35,440 --> 01:04:39,119
so again you you give an id and you get

1745
01:04:37,680 --> 01:04:42,000
the list of neighbors

1746
01:04:39,119 --> 01:04:42,559
of this node in the graph or if this

1747
01:04:42,000 --> 01:04:45,440
list

1748
01:04:42,559 --> 01:04:48,480
is large possibly you give a id and i

1749
01:04:45,440 --> 01:04:48,480
and you get the iphone

1750
01:04:49,280 --> 01:04:54,480
um so very very briefly there's a lot of

1751
01:04:52,480 --> 01:04:58,000
previous work uh

1752
01:04:54,480 --> 01:04:58,960
but our the result that use this public

1753
01:04:58,000 --> 01:05:01,760
interface

1754
01:04:58,960 --> 01:05:02,799
okay without relying on facebook or

1755
01:05:01,760 --> 01:05:05,119
other companies

1756
01:05:02,799 --> 01:05:07,280
to get a independent estimate of the

1757
01:05:05,119 --> 01:05:09,839
size of the graph

1758
01:05:07,280 --> 01:05:11,599
and for example yet island considered

1759
01:05:09,839 --> 01:05:14,558
thailand we respond

1760
01:05:11,599 --> 01:05:15,280
they needed n to the alpha queries so

1761
01:05:14,559 --> 01:05:17,200
for some

1762
01:05:15,280 --> 01:05:18,559
constant alpha that's small smaller than

1763
01:05:17,200 --> 01:05:20,640
one so

1764
01:05:18,559 --> 01:05:23,359
some polynomial in many queries to

1765
01:05:20,640 --> 01:05:25,520
estimate the size of the graph

1766
01:05:23,359 --> 01:05:26,400
so this is still a lot of queries and we

1767
01:05:25,520 --> 01:05:29,920
ask

1768
01:05:26,400 --> 01:05:34,480
can we estimate a social draft's measure

1769
01:05:29,920 --> 01:05:37,200
using few queries so let's say polylogin

1770
01:05:34,480 --> 01:05:39,200
while still having no trust in in the

1771
01:05:37,200 --> 01:05:43,038
graphs provider

1772
01:05:39,200 --> 01:05:45,439
and the the answer to this is to

1773
01:05:43,039 --> 01:05:46,480
introduce interactive proofs for social

1774
01:05:45,440 --> 01:05:48,480
graphs

1775
01:05:46,480 --> 01:05:49,599
so this is the model we have a verifier

1776
01:05:48,480 --> 01:05:52,559
we have approval

1777
01:05:49,599 --> 01:05:53,520
okay and standard interactive proof the

1778
01:05:52,559 --> 01:05:56,480
instance

1779
01:05:53,520 --> 01:05:58,079
that we're talking about is the graph

1780
01:05:56,480 --> 01:06:00,720
the verifier doesn't have

1781
01:05:58,079 --> 01:06:01,760
complete access to the graph so this is

1782
01:06:00,720 --> 01:06:04,558
very similar

1783
01:06:01,760 --> 01:06:05,359
to interactive proof of proximity okay

1784
01:06:04,559 --> 01:06:08,079
he has only

1785
01:06:05,359 --> 01:06:08,558
oracle access to the input but instead

1786
01:06:08,079 --> 01:06:10,960
of just

1787
01:06:08,559 --> 01:06:12,000
reading a special parts special bits of

1788
01:06:10,960 --> 01:06:14,480
the input

1789
01:06:12,000 --> 01:06:15,359
the access is is exactly through these

1790
01:06:14,480 --> 01:06:17,440
two

1791
01:06:15,359 --> 01:06:19,598
membership through these two oracle

1792
01:06:17,440 --> 01:06:21,680
queries so one is membership

1793
01:06:19,599 --> 01:06:22,720
okay i can see if id exists and the

1794
01:06:21,680 --> 01:06:25,038
second is

1795
01:06:22,720 --> 01:06:26,720
neighbors and let me already say at this

1796
01:06:25,039 --> 01:06:29,200
point these two things are important

1797
01:06:26,720 --> 01:06:30,078
let's it lets us do a random walk in the

1798
01:06:29,200 --> 01:06:32,000
graph

1799
01:06:30,079 --> 01:06:34,640
okay so you can take an id ask for

1800
01:06:32,000 --> 01:06:37,760
enables select a random neighbor

1801
01:06:34,640 --> 01:06:40,000
and then visit this uh this neighbor

1802
01:06:37,760 --> 01:06:41,680
and ask for its neighbors and so on so

1803
01:06:40,000 --> 01:06:45,359
you can perform a random

1804
01:06:41,680 --> 01:06:47,759
walk in the car um

1805
01:06:45,359 --> 01:06:48,558
let me already say some criticism about

1806
01:06:47,760 --> 01:06:51,599
our model

1807
01:06:48,559 --> 01:06:54,559
so we assume here that

1808
01:06:51,599 --> 01:06:57,119
the graph is fixed so the oracle answers

1809
01:06:54,559 --> 01:06:58,960
uh to the graph of return truthfully

1810
01:06:57,119 --> 01:07:00,799
and you can ask why is that like if

1811
01:06:58,960 --> 01:07:04,079
facebook is returning

1812
01:07:00,799 --> 01:07:04,960
our answers to this oracle you know they

1813
01:07:04,079 --> 01:07:08,160
might as well

1814
01:07:04,960 --> 01:07:11,280
lie uh there as well

1815
01:07:08,160 --> 01:07:13,200
so there's a few answers for that but

1816
01:07:11,280 --> 01:07:14,720
first it's very hard to distinguish

1817
01:07:13,200 --> 01:07:17,839
honest users

1818
01:07:14,720 --> 01:07:19,359
from this very file okay because it just

1819
01:07:17,839 --> 01:07:22,558
the his query seems like

1820
01:07:19,359 --> 01:07:24,799
legitimate queries and second

1821
01:07:22,559 --> 01:07:26,720
it says that if they want to lie in

1822
01:07:24,799 --> 01:07:29,200
their in the reports

1823
01:07:26,720 --> 01:07:31,279
they must materialize this lie

1824
01:07:29,200 --> 01:07:34,399
physically into the network

1825
01:07:31,280 --> 01:07:37,680
okay so this forces them um

1826
01:07:34,400 --> 01:07:40,000
to walk a lot for the for the to lie

1827
01:07:37,680 --> 01:07:42,399
instead of just modifying a few numbers

1828
01:07:40,000 --> 01:07:46,079
in a report

1829
01:07:42,400 --> 01:07:50,160
so what is our main result so

1830
01:07:46,079 --> 01:07:50,160
given a graph g on n vertices

1831
01:07:50,240 --> 01:07:54,240
and with mixing time tau okay so again

1832
01:07:53,760 --> 01:07:57,039
mixing

1833
01:07:54,240 --> 01:07:58,479
time is the number of steps you need to

1834
01:07:57,039 --> 01:08:00,079
do in the graph

1835
01:07:58,480 --> 01:08:01,520
until you reach the stationary

1836
01:08:00,079 --> 01:08:03,839
distribution

1837
01:08:01,520 --> 01:08:04,960
and average degree delta so just the

1838
01:08:03,839 --> 01:08:08,640
average degree of the

1839
01:08:04,960 --> 01:08:10,160
of the graph um we construct a double

1840
01:08:08,640 --> 01:08:12,240
efficient interactive proof

1841
01:08:10,160 --> 01:08:14,558
in the social graph model okay so in the

1842
01:08:12,240 --> 01:08:16,960
model we i just presented

1843
01:08:14,559 --> 01:08:18,480
for estimating the size of the graph

1844
01:08:16,960 --> 01:08:21,279
okay

1845
01:08:18,479 --> 01:08:22,238
well you give me approximation error

1846
01:08:21,279 --> 01:08:25,040
epsilon

1847
01:08:22,238 --> 01:08:26,318
and we verify that the size that they

1848
01:08:25,040 --> 01:08:30,238
claim this

1849
01:08:26,319 --> 01:08:31,440
and tilde is at most one plus minus

1850
01:08:30,238 --> 01:08:36,000
epsilon

1851
01:08:31,439 --> 01:08:38,399
times n so you just have some small

1852
01:08:36,000 --> 01:08:40,238
fraction of l okay let's say less than

1853
01:08:38,399 --> 01:08:42,559
one percent arrow

1854
01:08:40,238 --> 01:08:44,959
it's a two message protocol it's a

1855
01:08:42,560 --> 01:08:47,440
public coin protocol

1856
01:08:44,960 --> 01:08:48,399
the number of queries that the verifier

1857
01:08:47,439 --> 01:08:51,040
performs

1858
01:08:48,399 --> 01:08:51,439
is only one over epsilon squared times

1859
01:08:51,040 --> 01:08:55,759
tau

1860
01:08:51,439 --> 01:08:57,358
times delta so usually in social graphs

1861
01:08:55,759 --> 01:08:59,359
and this is why we call it social dots

1862
01:08:57,359 --> 01:09:02,640
the tau

1863
01:08:59,359 --> 01:09:06,000
is not large these graphs are well mixed

1864
01:09:02,640 --> 01:09:08,159
and delta is is not large uh

1865
01:09:06,000 --> 01:09:10,158
and epsilon you can think of it as some

1866
01:09:08,158 --> 01:09:14,080
small constant so this is really

1867
01:09:10,158 --> 01:09:15,839
a poly login uh and the prover

1868
01:09:14,080 --> 01:09:17,519
running time so we said it's doubly

1869
01:09:15,839 --> 01:09:20,719
efficient the polar learning time is

1870
01:09:17,520 --> 01:09:22,239
also small so it's quasi-linear in the

1871
01:09:20,719 --> 01:09:24,239
network size

1872
01:09:22,238 --> 01:09:25,278
so this is something really efficient

1873
01:09:24,238 --> 01:09:28,000
that can be

1874
01:09:25,279 --> 01:09:30,480
implemented by these social network

1875
01:09:28,000 --> 01:09:33,359
companies

1876
01:09:30,479 --> 01:09:34,879
um so just a few applications of our

1877
01:09:33,359 --> 01:09:38,080
main result

1878
01:09:34,880 --> 01:09:39,920
so you can estimate the size

1879
01:09:38,080 --> 01:09:41,679
of the of the graph but you can also

1880
01:09:39,920 --> 01:09:43,199
estimate the size of subgraphs

1881
01:09:41,679 --> 01:09:45,359
for example you want to estimate how

1882
01:09:43,198 --> 01:09:48,318
many users between the age

1883
01:09:45,359 --> 01:09:49,440
10 and 20 are there on facebook uh

1884
01:09:48,319 --> 01:09:51,440
conditioned on

1885
01:09:49,439 --> 01:09:53,678
that you can get this information about

1886
01:09:51,439 --> 01:09:55,519
every user okay in his profile

1887
01:09:53,679 --> 01:09:57,600
then you can just look at the subgraph

1888
01:09:55,520 --> 01:10:00,560
and estimate how many users

1889
01:09:57,600 --> 01:10:02,719
in this subgraph you can get other

1890
01:10:00,560 --> 01:10:05,120
things like the degree distribution

1891
01:10:02,719 --> 01:10:06,320
other health methods called the local

1892
01:10:05,120 --> 01:10:09,040
local clustering for

1893
01:10:06,320 --> 01:10:10,000
coefficients and more and in general we

1894
01:10:09,040 --> 01:10:12,080
have something

1895
01:10:10,000 --> 01:10:14,000
for any function f you can get the

1896
01:10:12,080 --> 01:10:17,440
median or other quantize

1897
01:10:14,000 --> 01:10:19,199
of the values f v one to fvn well we

1898
01:10:17,440 --> 01:10:23,120
want to be another nodes

1899
01:10:19,199 --> 01:10:26,639
um of the network and just fi

1900
01:10:23,120 --> 01:10:28,480
one final application uh is that you can

1901
01:10:26,640 --> 01:10:31,040
use via trmil

1902
01:10:28,480 --> 01:10:33,040
uh to transform this protocol to be

1903
01:10:31,040 --> 01:10:35,920
non-interactive

1904
01:10:33,040 --> 01:10:37,519
then you get an argument of course this

1905
01:10:35,920 --> 01:10:40,400
argument can be published

1906
01:10:37,520 --> 01:10:43,440
once and for all and be verified by any

1907
01:10:40,400 --> 01:10:46,159
user in the network using a few queries

1908
01:10:43,440 --> 01:10:47,239
so if you go back to this report then

1909
01:10:46,159 --> 01:10:50,320
they say they have

1910
01:10:47,239 --> 01:10:52,080
1.73 billion daily active users and here

1911
01:10:50,320 --> 01:10:54,880
in red they can just add the proof

1912
01:10:52,080 --> 01:10:55,600
for this fact and again you'll have some

1913
01:10:54,880 --> 01:10:59,120
error

1914
01:10:55,600 --> 01:11:01,360
less than one percent say and the hope

1915
01:10:59,120 --> 01:11:04,480
is that maybe this could be part

1916
01:11:01,360 --> 01:11:06,799
of some next generation regulation

1917
01:11:04,480 --> 01:11:10,400
that we have for privacy of data

1918
01:11:06,800 --> 01:11:10,400
specifically for social growth

1919
01:11:10,480 --> 01:11:14,480
um so we have to introduce the notion of

1920
01:11:13,440 --> 01:11:16,960
interactive

1921
01:11:14,480 --> 01:11:18,718
for social graphs we provided our

1922
01:11:16,960 --> 01:11:19,440
efficient protocol for monitoring the

1923
01:11:18,719 --> 01:11:22,400
health of

1924
01:11:19,440 --> 01:11:23,199
social graphs some open problem is

1925
01:11:22,400 --> 01:11:26,000
eliminating

1926
01:11:23,199 --> 01:11:28,000
eliminating this dependency on on delta

1927
01:11:26,000 --> 01:11:31,600
i don't think it's necessary

1928
01:11:28,000 --> 01:11:33,840
as opposed to the dependency and tau

1929
01:11:31,600 --> 01:11:35,440
of course we can talk about other health

1930
01:11:33,840 --> 01:11:38,800
measure except the ones that

1931
01:11:35,440 --> 01:11:42,799
i mentioned and maybe push this for

1932
01:11:38,800 --> 01:11:44,239
standout in regulation and

1933
01:11:42,800 --> 01:11:46,400
of course i don't have time to talk

1934
01:11:44,239 --> 01:11:48,320
about the proof but i'm

1935
01:11:46,400 --> 01:11:49,599
happy to do that if you have questions

1936
01:11:48,320 --> 01:11:52,480
offline

1937
01:11:49,600 --> 01:11:53,120
thank you thank you very much elon so

1938
01:11:52,480 --> 01:11:55,759
there is

1939
01:11:53,120 --> 01:11:57,679
one question posted to zulip for this

1940
01:11:55,760 --> 01:11:59,920
talk by cody says

1941
01:11:57,679 --> 01:12:02,159
do the mixing time tau and average

1942
01:11:59,920 --> 01:12:05,520
degree delta need to be known in the

1943
01:12:02,159 --> 01:12:08,879
to the protocol yeah that's an excellent

1944
01:12:05,520 --> 01:12:11,120
question so you don't need to know the

1945
01:12:08,880 --> 01:12:13,199
exactly the mixing time and the average

1946
01:12:11,120 --> 01:12:22,239
degree you do need to have

1947
01:12:13,199 --> 01:12:27,839
some upper bound on them

1948
01:12:22,239 --> 01:12:27,839
so is there any other questions for alan

1949
01:12:27,920 --> 01:12:31,679
we are kind of over time but if there is

1950
01:12:30,480 --> 01:12:34,159
another question for you

1951
01:12:31,679 --> 01:12:37,840
for this talk we can take it before

1952
01:12:34,159 --> 01:12:37,839
thanking everybody

1953
01:12:37,920 --> 01:12:42,080
so if you actually remembered any

1954
01:12:39,920 --> 01:12:43,679
questions you can post it to zulip so

1955
01:12:42,080 --> 01:12:44,640
this was already done for one of the

1956
01:12:43,679 --> 01:12:46,400
talks

1957
01:12:44,640 --> 01:12:48,560
to a question some of the questions for

1958
01:12:46,400 --> 01:12:50,879
lisa came after the talk was

1959
01:12:48,560 --> 01:12:52,719
over so hope uh hopefully you can check

1960
01:12:50,880 --> 01:12:55,520
the answers also in the same

1961
01:12:52,719 --> 01:12:57,520
zulu thread and if you had any other

1962
01:12:55,520 --> 01:12:58,960
questions or comments you can ask it you

1963
01:12:57,520 --> 01:13:00,960
can add it to that

1964
01:12:58,960 --> 01:13:02,719
thread we are a little bit over time so

1965
01:13:00,960 --> 01:13:03,600
you won't have a q a at the end of the

1966
01:13:02,719 --> 01:13:06,640
session

1967
01:13:03,600 --> 01:13:08,000
but i wanted to thank every speaker all

1968
01:13:06,640 --> 01:13:10,560
the contributors

1969
01:13:08,000 --> 01:13:11,040
and all the attendees of this session

1970
01:13:10,560 --> 01:13:14,480
and

1971
01:13:11,040 --> 01:13:18,000
we will we're gonna have the uh

1972
01:13:14,480 --> 01:13:21,759
isur meeting in about 15 minutes

1973
01:13:18,000 --> 01:13:21,760
so with that in mind hopefully we

