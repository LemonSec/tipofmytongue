1
00:00:00,960 --> 00:00:06,000
hi my name is chenda

2
00:00:03,600 --> 00:00:07,680
and i'm going to talk about always have

3
00:00:06,000 --> 00:00:10,800
a backup plan

4
00:00:07,680 --> 00:00:13,920
fully secure synchronous mpc with

5
00:00:10,800 --> 00:00:16,080
asynchronous fallback

6
00:00:13,920 --> 00:00:18,880
this is joint work with erika bloom and

7
00:00:16,079 --> 00:00:18,880
julian loss

8
00:00:20,960 --> 00:00:24,160
the paper is on secure multi-party

9
00:00:23,199 --> 00:00:28,000
computation

10
00:00:24,160 --> 00:00:31,679
or mpc at a very high level

11
00:00:28,000 --> 00:00:32,880
mpc allows a set of parties each with a

12
00:00:31,679 --> 00:00:36,320
private input

13
00:00:32,880 --> 00:00:38,399
to jointly compute an arbitrary function

14
00:00:36,320 --> 00:00:40,960
in such a way that nothing about the

15
00:00:38,399 --> 00:00:43,840
inputs is revealed

16
00:00:40,960 --> 00:00:47,280
of course beyond what is revealed by the

17
00:00:43,840 --> 00:00:47,280
computed output itself

18
00:00:47,360 --> 00:00:51,519
the parties want to achieve what can be

19
00:00:49,360 --> 00:00:53,840
achieved in an ideal setting with a

20
00:00:51,520 --> 00:00:56,079
trusted party

21
00:00:53,840 --> 00:01:00,079
and this is especially difficult because

22
00:00:56,079 --> 00:01:00,079
some of the parties might be corrupted

23
00:01:02,480 --> 00:01:08,158
so very roughly protocols for npc

24
00:01:05,840 --> 00:01:11,439
can be classified according to the

25
00:01:08,159 --> 00:01:13,840
underlying communication model

26
00:01:11,439 --> 00:01:15,119
on one hand we have the synchronous

27
00:01:13,840 --> 00:01:17,600
model

28
00:01:15,119 --> 00:01:20,240
which assumes that parties have access

29
00:01:17,600 --> 00:01:23,039
to synchronized clocks

30
00:01:20,240 --> 00:01:26,158
and also parties know an upper bound on

31
00:01:23,040 --> 00:01:29,520
the network communication delay

32
00:01:26,159 --> 00:01:32,320
that is when a party sends a message

33
00:01:29,520 --> 00:01:35,759
it is guaranteed to be delivered within

34
00:01:32,320 --> 00:01:35,758
a known quantity delta

35
00:01:36,240 --> 00:01:40,960
this model although widely used in the

36
00:01:39,119 --> 00:01:44,479
crypto literature

37
00:01:40,960 --> 00:01:46,158
is not very realistic consider for

38
00:01:44,479 --> 00:01:47,439
example a setting where the network

39
00:01:46,159 --> 00:01:50,640
delay is

40
00:01:47,439 --> 00:01:54,000
unpredictable and gets large

41
00:01:50,640 --> 00:01:56,240
at specific points in time

42
00:01:54,000 --> 00:01:58,159
maybe the weather is bad or maybe the

43
00:01:56,240 --> 00:02:01,679
communication network

44
00:01:58,159 --> 00:02:03,520
is under attack then synchronous

45
00:02:01,680 --> 00:02:05,040
protocols lose all the security

46
00:02:03,520 --> 00:02:09,679
guarantees

47
00:02:05,040 --> 00:02:11,920
which is highly undesirable

48
00:02:09,679 --> 00:02:14,720
a much more realistic model is the

49
00:02:11,920 --> 00:02:17,440
asynchronous model

50
00:02:14,720 --> 00:02:20,000
this model does not make any assumptions

51
00:02:17,440 --> 00:02:22,959
on the synchrony of the clocks

52
00:02:20,000 --> 00:02:25,280
and only uses the fact that messages

53
00:02:22,959 --> 00:02:28,720
sent by honest parties

54
00:02:25,280 --> 00:02:28,720
are eventually delivered

55
00:02:29,040 --> 00:02:38,319
so why do we design synchronous protocol

56
00:02:36,080 --> 00:02:39,680
i guess one of the main reasons is that

57
00:02:38,319 --> 00:02:43,839
they achieve

58
00:02:39,680 --> 00:02:46,560
a very strong security guarantees

59
00:02:43,840 --> 00:02:48,480
assuming standard setup assumptions it

60
00:02:46,560 --> 00:02:51,599
is known that synchronous

61
00:02:48,480 --> 00:02:54,879
npc protocols can tolerate up to t

62
00:02:51,599 --> 00:02:56,079
smaller and half corruptions and allow

63
00:02:54,879 --> 00:03:00,159
every party to give

64
00:02:56,080 --> 00:03:03,519
input in contrast

65
00:03:00,159 --> 00:03:04,159
asynchronous mpc protocols can only

66
00:03:03,519 --> 00:03:07,599
tolerate

67
00:03:04,159 --> 00:03:10,159
up to n third corruptions and

68
00:03:07,599 --> 00:03:13,280
unavoidably the inputs of up to t

69
00:03:10,159 --> 00:03:13,280
parties are ignored

70
00:03:13,519 --> 00:03:17,920
what does this mean formally this means

71
00:03:15,760 --> 00:03:19,920
that the adversary can choose up to t

72
00:03:17,920 --> 00:03:22,879
inputs

73
00:03:19,920 --> 00:03:23,359
and substitute them by a default value

74
00:03:22,879 --> 00:03:26,959
board

75
00:03:23,360 --> 00:03:26,959
before the output is computed

76
00:03:27,680 --> 00:03:33,200
so it would be great to have the

77
00:03:31,040 --> 00:03:36,480
advantages of both models

78
00:03:33,200 --> 00:03:39,119
namely to design a single protocol such

79
00:03:36,480 --> 00:03:41,440
that when the network is synchronous

80
00:03:39,120 --> 00:03:42,640
it achieves a very strong security

81
00:03:41,440 --> 00:03:44,840
guarantee

82
00:03:42,640 --> 00:03:46,000
and even when the network is

83
00:03:44,840 --> 00:03:50,000
asynchronous

84
00:03:46,000 --> 00:03:53,040
it also achieves reasonable guarantee

85
00:03:50,000 --> 00:03:54,799
and the question is not only motivated

86
00:03:53,040 --> 00:03:58,079
by theory

87
00:03:54,799 --> 00:04:00,000
but also the real world imagine a

88
00:03:58,080 --> 00:04:02,879
setting where the network

89
00:04:00,000 --> 00:04:04,560
conditions fluctuate but are mostly

90
00:04:02,879 --> 00:04:07,120
stable

91
00:04:04,560 --> 00:04:09,360
in periods where the network delays are

92
00:04:07,120 --> 00:04:12,560
stable and within delta

93
00:04:09,360 --> 00:04:15,439
our protocol achieves synchronous

94
00:04:12,560 --> 00:04:18,079
strong guarantees and even if parties

95
00:04:15,439 --> 00:04:20,399
experience a short outage

96
00:04:18,079 --> 00:04:23,120
our protocol still achieves asynchronous

97
00:04:20,399 --> 00:04:23,120
guarantees

98
00:04:23,280 --> 00:04:27,280
more concretely we would like to have

99
00:04:25,919 --> 00:04:30,719
input completeness

100
00:04:27,280 --> 00:04:33,039
and tolerate up to ts corruptions when

101
00:04:30,720 --> 00:04:34,880
the network is synchronous

102
00:04:33,040 --> 00:04:36,320
and even when the network is

103
00:04:34,880 --> 00:04:39,440
asynchronous

104
00:04:36,320 --> 00:04:42,719
we would like to at least tolerate ta

105
00:04:39,440 --> 00:04:44,160
corruptions of course allowing some of

106
00:04:42,720 --> 00:04:46,960
the inputs

107
00:04:44,160 --> 00:04:46,960
to be ignored

108
00:04:48,479 --> 00:04:53,919
so we answer the question by showing

109
00:04:51,199 --> 00:04:58,080
that such a protocol exists

110
00:04:53,919 --> 00:05:02,320
if and only if ta plus 2ts smaller than

111
00:04:58,080 --> 00:05:06,240
n and the number of

112
00:05:02,320 --> 00:05:08,800
ignored inputs is at least ts

113
00:05:06,240 --> 00:05:09,840
that is we cannot guarantee to ignore

114
00:05:08,800 --> 00:05:15,039
less than ts

115
00:05:09,840 --> 00:05:15,039
inputs when the network is asynchronous

116
00:05:16,400 --> 00:05:20,239
so we are not the first to ask this

117
00:05:18,240 --> 00:05:22,560
question

118
00:05:20,240 --> 00:05:24,160
the literature on hybrid security

119
00:05:22,560 --> 00:05:28,160
guarantees is extensive

120
00:05:24,160 --> 00:05:30,720
so we defer a detailed related work to

121
00:05:28,160 --> 00:05:30,720
the paper

122
00:05:31,280 --> 00:05:35,758
i guess the most closely related work is

123
00:05:34,400 --> 00:05:39,120
the recent work by

124
00:05:35,759 --> 00:05:40,479
bloom cuts and loss on achieving such

125
00:05:39,120 --> 00:05:42,560
tradeoffs

126
00:05:40,479 --> 00:05:43,599
for the case of byzantine agreement

127
00:05:42,560 --> 00:05:46,320
protocols

128
00:05:43,600 --> 00:05:49,840
and also later extended to the problem

129
00:05:46,320 --> 00:05:52,080
of state machine replication

130
00:05:49,840 --> 00:05:52,960
worth mentioning is also the work by

131
00:05:52,080 --> 00:05:56,719
here

132
00:05:52,960 --> 00:05:59,359
nielsen and bartosz which provide an

133
00:05:56,720 --> 00:06:01,759
asynchronous mpc protocol

134
00:05:59,360 --> 00:06:02,720
for up to n third corruptions with the

135
00:06:01,759 --> 00:06:05,440
feature that

136
00:06:02,720 --> 00:06:06,000
when the network is synchronous all

137
00:06:05,440 --> 00:06:07,919
inputs

138
00:06:06,000 --> 00:06:10,639
are taken into account for the

139
00:06:07,919 --> 00:06:10,639
computation

140
00:06:12,160 --> 00:06:16,000
so let's start with the feasibility

141
00:06:13,919 --> 00:06:18,960
result

142
00:06:16,000 --> 00:06:20,000
we make use of a core sub protocol which

143
00:06:18,960 --> 00:06:24,159
we call

144
00:06:20,000 --> 00:06:25,280
smpc this is an mpc protocol which

145
00:06:24,160 --> 00:06:27,919
achieves

146
00:06:25,280 --> 00:06:30,799
all the security guarantees we expect

147
00:06:27,919 --> 00:06:33,359
when the network is synchronous

148
00:06:30,800 --> 00:06:34,160
but in addition still achieves

149
00:06:33,360 --> 00:06:37,120
reasonably

150
00:06:34,160 --> 00:06:38,000
strong security guarantees even when the

151
00:06:37,120 --> 00:06:41,440
network is

152
00:06:38,000 --> 00:06:44,560
asynchronous in this case

153
00:06:41,440 --> 00:06:47,840
the protocol allows all honest parties

154
00:06:44,560 --> 00:06:51,520
to give a valid output y a with

155
00:06:47,840 --> 00:06:54,719
up to l ignored inputs or

156
00:06:51,520 --> 00:06:55,599
all honest parties output bot so there

157
00:06:54,720 --> 00:06:58,880
is agreement

158
00:06:55,599 --> 00:06:58,880
on what the output is

159
00:07:00,000 --> 00:07:03,360
we can then use this strong sub protocol

160
00:07:02,960 --> 00:07:08,000
with

161
00:07:03,360 --> 00:07:12,160
any asynchronous and third mpc protocol

162
00:07:08,000 --> 00:07:17,039
to get the guarantees we want the idea

163
00:07:12,160 --> 00:07:19,919
is simply to first run the smpc protocol

164
00:07:17,039 --> 00:07:23,919
and then run the asynchronous mpc

165
00:07:19,919 --> 00:07:23,919
protocol if the output is bought

166
00:07:24,000 --> 00:07:28,000
so let's see if the network is

167
00:07:26,880 --> 00:07:31,039
synchronous

168
00:07:28,000 --> 00:07:32,319
the security guarantees are inherited

169
00:07:31,039 --> 00:07:35,759
from the sub-protocol

170
00:07:32,319 --> 00:07:39,039
smpc and

171
00:07:35,759 --> 00:07:41,360
if the network is asynchronous either

172
00:07:39,039 --> 00:07:43,039
all parties obtain an asynchronous

173
00:07:41,360 --> 00:07:46,240
output y a

174
00:07:43,039 --> 00:07:47,680
that can ignore up to l inputs so we are

175
00:07:46,240 --> 00:07:50,960
fine

176
00:07:47,680 --> 00:07:53,440
or all parties obtain both

177
00:07:50,960 --> 00:07:55,680
in which case parties know the network

178
00:07:53,440 --> 00:07:58,080
is asynchronous

179
00:07:55,680 --> 00:07:59,120
so they can all execute a traditional

180
00:07:58,080 --> 00:08:01,919
mpc

181
00:07:59,120 --> 00:08:04,160
asynchronous protocol so we are fine as

182
00:08:01,919 --> 00:08:04,159
well

183
00:08:05,280 --> 00:08:11,679
so let's get into the sub protocol smpc

184
00:08:09,440 --> 00:08:12,719
the protocol uses a threshold

185
00:08:11,680 --> 00:08:16,319
homomorphic

186
00:08:12,720 --> 00:08:16,720
encryption scheme and this is a public

187
00:08:16,319 --> 00:08:19,039
key

188
00:08:16,720 --> 00:08:21,120
encryption scheme with the feature that

189
00:08:19,039 --> 00:08:24,080
the secret key is distributed

190
00:08:21,120 --> 00:08:24,879
among the parties all parties have a

191
00:08:24,080 --> 00:08:29,039
public key

192
00:08:24,879 --> 00:08:32,399
ek and each party pi

193
00:08:29,039 --> 00:08:36,080
also has a secret key

194
00:08:32,399 --> 00:08:40,640
dki with the public key

195
00:08:36,080 --> 00:08:42,719
any party can compute an encryption

196
00:08:40,640 --> 00:08:45,839
the encryption is homomorphic in the

197
00:08:42,719 --> 00:08:48,720
sense that given two ciphertexts

198
00:08:45,839 --> 00:08:49,920
one can compute a ciphertext containing

199
00:08:48,720 --> 00:08:54,080
the addition

200
00:08:49,920 --> 00:08:56,640
of the corresponding plain texts

201
00:08:54,080 --> 00:08:57,200
can then compute a decryption share from

202
00:08:56,640 --> 00:09:01,120
a

203
00:08:57,200 --> 00:09:01,760
cipher text and given enough decryption

204
00:09:01,120 --> 00:09:04,480
shares

205
00:09:01,760 --> 00:09:05,839
on the same ciphertext one can

206
00:09:04,480 --> 00:09:08,080
reconstruct

207
00:09:05,839 --> 00:09:09,760
the corresponding plaintext and in our

208
00:09:08,080 --> 00:09:11,839
protocol the number

209
00:09:09,760 --> 00:09:13,920
of decryption shares needed to

210
00:09:11,839 --> 00:09:16,800
reconstruct will be

211
00:09:13,920 --> 00:09:16,800
ts plus one

212
00:09:17,519 --> 00:09:22,959
the subprotocol snpc follows the cdn

213
00:09:21,519 --> 00:09:26,320
approach

214
00:09:22,959 --> 00:09:29,599
grammar nielsen approach based on

215
00:09:26,320 --> 00:09:32,080
threshold homomorphic encryption so the

216
00:09:29,600 --> 00:09:35,519
cdn protocol has three phases

217
00:09:32,080 --> 00:09:38,000
which roughly proceed as follows

218
00:09:35,519 --> 00:09:39,600
in the first phase each part api

219
00:09:38,000 --> 00:09:42,399
encrypts its input

220
00:09:39,600 --> 00:09:43,680
with the threshold encryption key and

221
00:09:42,399 --> 00:09:47,760
broadcasts

222
00:09:43,680 --> 00:09:49,760
the ciphertext the parties then jointly

223
00:09:47,760 --> 00:09:52,399
evaluate the circuit

224
00:09:49,760 --> 00:09:54,160
the addition gates are evaluated using

225
00:09:52,399 --> 00:09:56,640
the homomorphic property of the

226
00:09:54,160 --> 00:09:58,399
threshold encryption scheme

227
00:09:56,640 --> 00:10:02,839
and the multiplication gates are

228
00:09:58,399 --> 00:10:04,800
performed using a distributed

229
00:10:02,839 --> 00:10:07,360
protocol

230
00:10:04,800 --> 00:10:08,319
then after the circuit evaluation each

231
00:10:07,360 --> 00:10:11,519
party holds

232
00:10:08,320 --> 00:10:14,320
an encryption of the output

233
00:10:11,519 --> 00:10:17,120
and then each party computes a

234
00:10:14,320 --> 00:10:19,600
decryption share and distributes it

235
00:10:17,120 --> 00:10:21,600
and then parties can jointly reconstruct

236
00:10:19,600 --> 00:10:23,839
the output

237
00:10:21,600 --> 00:10:26,160
of course to achieve security against a

238
00:10:23,839 --> 00:10:27,519
malicious adversary parties need to make

239
00:10:26,160 --> 00:10:29,680
use of

240
00:10:27,519 --> 00:10:32,399
zero knowledge proofs in several steps

241
00:10:29,680 --> 00:10:35,519
of the protocol

242
00:10:32,399 --> 00:10:38,640
and the cdn protocol was

243
00:10:35,519 --> 00:10:41,600
designed under a synchronous network

244
00:10:38,640 --> 00:10:43,439
and intuitively it works because honest

245
00:10:41,600 --> 00:10:46,079
parties have agreement

246
00:10:43,440 --> 00:10:48,480
on the ciphertext to decrypt after the

247
00:10:46,079 --> 00:10:51,680
circuit evaluation

248
00:10:48,480 --> 00:10:54,240
and also no

249
00:10:51,680 --> 00:10:58,000
crucial information is revealed

250
00:10:54,240 --> 00:11:01,279
throughout the execution of the protocol

251
00:10:58,000 --> 00:11:03,920
when the network is asynchronous however

252
00:11:01,279 --> 00:11:04,880
several problems might arise because

253
00:11:03,920 --> 00:11:06,560
agreement

254
00:11:04,880 --> 00:11:08,399
is lost in critical points of the

255
00:11:06,560 --> 00:11:11,920
protocol

256
00:11:08,399 --> 00:11:13,680
for example when parties broadcast their

257
00:11:11,920 --> 00:11:16,079
input ciphertext

258
00:11:13,680 --> 00:11:17,279
it is possible that different parties

259
00:11:16,079 --> 00:11:20,399
receive

260
00:11:17,279 --> 00:11:23,200
different sets of inputs so if they

261
00:11:20,399 --> 00:11:24,959
evaluate this

262
00:11:23,200 --> 00:11:26,399
different parties will end up with

263
00:11:24,959 --> 00:11:28,560
different ciphertexts

264
00:11:26,399 --> 00:11:30,320
which if decrypted will lead to the

265
00:11:28,560 --> 00:11:33,599
adversary

266
00:11:30,320 --> 00:11:36,240
learning different outputs and breaking

267
00:11:33,600 --> 00:11:36,240
privacy

268
00:11:37,040 --> 00:11:41,199
we address these problems by using

269
00:11:39,120 --> 00:11:43,920
several primitives that guarantee

270
00:11:41,200 --> 00:11:46,560
different properties depending on the

271
00:11:43,920 --> 00:11:49,360
communication network

272
00:11:46,560 --> 00:11:50,239
in this talk i will only introduce two

273
00:11:49,360 --> 00:11:53,839
such

274
00:11:50,240 --> 00:11:58,240
sub protocols and this will serve to get

275
00:11:53,839 --> 00:12:00,079
a high level idea of our protocol

276
00:11:58,240 --> 00:12:02,160
the first protocol is a broadcast

277
00:12:00,079 --> 00:12:04,160
protocol that achieves

278
00:12:02,160 --> 00:12:06,240
all the security guarantees when the

279
00:12:04,160 --> 00:12:08,319
network is synchronous

280
00:12:06,240 --> 00:12:10,160
but also achieves so-called weak

281
00:12:08,320 --> 00:12:13,279
validity when the network

282
00:12:10,160 --> 00:12:15,600
is asynchronous meaning that when the

283
00:12:13,279 --> 00:12:19,760
sender is honest

284
00:12:15,600 --> 00:12:23,360
its recipient outputs the sender's input

285
00:12:19,760 --> 00:12:27,200
or bot such a protocol can be achieved

286
00:12:23,360 --> 00:12:27,200
using a dollar strong approach

287
00:12:27,279 --> 00:12:33,839
the second primitive is a so-called

288
00:12:30,000 --> 00:12:36,079
asynchronous common subset protocol

289
00:12:33,839 --> 00:12:37,200
and this primitive allows each party to

290
00:12:36,079 --> 00:12:39,519
give inputs

291
00:12:37,200 --> 00:12:41,279
and agree on a common subset of the

292
00:12:39,519 --> 00:12:43,440
inputs

293
00:12:41,279 --> 00:12:44,720
we need that if the network is

294
00:12:43,440 --> 00:12:47,760
synchronous

295
00:12:44,720 --> 00:12:50,240
some sort of validity is ensured

296
00:12:47,760 --> 00:12:50,800
this means that if all honest parties

297
00:12:50,240 --> 00:12:54,240
give

298
00:12:50,800 --> 00:12:57,040
the same input value then

299
00:12:54,240 --> 00:12:58,880
the output is a singleton containing

300
00:12:57,040 --> 00:13:02,319
this value

301
00:12:58,880 --> 00:13:04,560
also when the network is asynchronous

302
00:13:02,320 --> 00:13:05,839
all honest parties have consistency

303
00:13:04,560 --> 00:13:09,279
meaning that

304
00:13:05,839 --> 00:13:13,360
they all output the same set of values

305
00:13:09,279 --> 00:13:18,320
and moreover this set contains

306
00:13:13,360 --> 00:13:21,040
at least the input of an honest party

307
00:13:18,320 --> 00:13:22,399
such an acs protocol can be achieved

308
00:13:21,040 --> 00:13:26,399
using the traditional

309
00:13:22,399 --> 00:13:29,120
ben or kelmer and robin approach

310
00:13:26,399 --> 00:13:30,880
later modified by bloom cuts and loss

311
00:13:29,120 --> 00:13:33,680
where they give a twist to the

312
00:13:30,880 --> 00:13:35,439
traditional protocol to achieve higher

313
00:13:33,680 --> 00:13:37,839
validity

314
00:13:35,440 --> 00:13:39,040
meaning that it holds even when there

315
00:13:37,839 --> 00:13:42,560
are

316
00:13:39,040 --> 00:13:42,560
up to ts corruptions

317
00:13:44,959 --> 00:13:51,839
now we can plug in the described

318
00:13:47,680 --> 00:13:51,839
primitives into the cdn protocol

319
00:13:52,880 --> 00:13:57,760
so in the input distribution parties use

320
00:13:56,240 --> 00:14:01,199
this enhanced

321
00:13:57,760 --> 00:14:06,160
broadcast primitive and expect to obtain

322
00:14:01,199 --> 00:14:08,719
at least n minus ts good cipher texts

323
00:14:06,160 --> 00:14:10,160
for this particular's weight for a time

324
00:14:08,720 --> 00:14:12,720
t

325
00:14:10,160 --> 00:14:13,199
which is an upper bound on the execution

326
00:14:12,720 --> 00:14:15,519
time

327
00:14:13,199 --> 00:14:18,240
of the broadcast protocols when the

328
00:14:15,519 --> 00:14:20,320
network is synchronous

329
00:14:18,240 --> 00:14:22,320
if an honest party didn't receive this

330
00:14:20,320 --> 00:14:25,760
many good ciphertexts

331
00:14:22,320 --> 00:14:28,720
it simply skips the circuit evaluation

332
00:14:25,760 --> 00:14:31,839
and starts the acs with

333
00:14:28,720 --> 00:14:31,839
both as input value

334
00:14:31,920 --> 00:14:38,639
otherwise parties evaluate the circuit

335
00:14:35,440 --> 00:14:40,959
as before and after this

336
00:14:38,639 --> 00:14:42,079
instead of decrypting they jointly

337
00:14:40,959 --> 00:14:45,040
execute

338
00:14:42,079 --> 00:14:46,239
the acs protocol with the output

339
00:14:45,040 --> 00:14:50,000
ciphertext

340
00:14:46,240 --> 00:14:53,360
as input value parties then

341
00:14:50,000 --> 00:14:56,639
obtain a set of ciphertexts

342
00:14:53,360 --> 00:15:00,079
if the set is a singleton then

343
00:14:56,639 --> 00:15:01,199
parties proceed as in cdn as described

344
00:15:00,079 --> 00:15:04,638
before

345
00:15:01,199 --> 00:15:08,079
that is parties jointly decrypt

346
00:15:04,639 --> 00:15:11,519
the ciphertext and output the

347
00:15:08,079 --> 00:15:15,279
decrypted value otherwise

348
00:15:11,519 --> 00:15:18,800
if the set contains more than one value

349
00:15:15,279 --> 00:15:18,800
all parties output bots

350
00:15:19,199 --> 00:15:25,439
so note that

351
00:15:22,320 --> 00:15:27,040
when the network is synchronous the

352
00:15:25,440 --> 00:15:30,880
protocol proceeds

353
00:15:27,040 --> 00:15:34,399
similarly to cdn all parties obtain the

354
00:15:30,880 --> 00:15:36,880
same output ciphertext

355
00:15:34,399 --> 00:15:38,079
and the acs will output a singleton with

356
00:15:36,880 --> 00:15:41,839
this ciphertext

357
00:15:38,079 --> 00:15:41,839
which will be decrypted

358
00:15:42,480 --> 00:15:50,160
and when the network is asynchronous

359
00:15:46,320 --> 00:15:53,279
the acs current is consistency

360
00:15:50,160 --> 00:15:56,800
so all honest parties obtain the same

361
00:15:53,279 --> 00:15:58,320
set as output which contains the input

362
00:15:56,800 --> 00:16:01,519
of at least

363
00:15:58,320 --> 00:16:04,480
an honest party so either

364
00:16:01,519 --> 00:16:07,279
the output is a singleton set which

365
00:16:04,480 --> 00:16:09,839
contains the output ciphertext

366
00:16:07,279 --> 00:16:10,320
proposed by an honest party in which

367
00:16:09,839 --> 00:16:13,759
case

368
00:16:10,320 --> 00:16:15,600
it contains n minus ts inputs so we are

369
00:16:13,759 --> 00:16:19,360
happy

370
00:16:15,600 --> 00:16:22,880
or the acs outputs more than a value

371
00:16:19,360 --> 00:16:26,320
in which case the output of snpc is spot

372
00:16:22,880 --> 00:16:29,360
so we can evaluate the asynchronous

373
00:16:26,320 --> 00:16:32,079
mpc protocol as described before in the

374
00:16:29,360 --> 00:16:32,079
compiler

375
00:16:34,480 --> 00:16:42,160
so we talked about visibility

376
00:16:37,600 --> 00:16:42,160
and now we proceed to the lower bounds

377
00:16:42,880 --> 00:16:47,040
the first lower bound says that it is

378
00:16:45,839 --> 00:16:50,320
unavoidable

379
00:16:47,040 --> 00:16:53,639
to ignore the inputs of

380
00:16:50,320 --> 00:16:56,240
up to ts parties and this holds

381
00:16:53,639 --> 00:16:56,959
independently of what the corruption

382
00:16:56,240 --> 00:17:01,279
threshold

383
00:16:56,959 --> 00:17:05,918
is in the asynchronous case

384
00:17:01,279 --> 00:17:08,480
that is even when ta is equal zero

385
00:17:05,919 --> 00:17:10,000
and the the function that parties wish

386
00:17:08,480 --> 00:17:12,079
to compute

387
00:17:10,000 --> 00:17:14,559
and the one that we consider is the or

388
00:17:12,079 --> 00:17:14,559
function

389
00:17:14,799 --> 00:17:21,359
so um consider a scenario

390
00:17:18,240 --> 00:17:23,120
of the protocol execution under a

391
00:17:21,359 --> 00:17:27,280
synchronous network

392
00:17:23,119 --> 00:17:30,959
where parties are divided into two sets

393
00:17:27,280 --> 00:17:34,160
the first set in red contains

394
00:17:30,960 --> 00:17:36,480
ts corrupted parties which

395
00:17:34,160 --> 00:17:38,720
crash at the beginning of the protocol

396
00:17:36,480 --> 00:17:42,320
execution

397
00:17:38,720 --> 00:17:47,600
the second set contains n minus ts

398
00:17:42,320 --> 00:17:50,639
bonus parties all with input 0.

399
00:17:47,600 --> 00:17:51,360
because the parties are computing the or

400
00:17:50,640 --> 00:17:54,400
function

401
00:17:51,360 --> 00:17:55,039
on the received inputs and the protocol

402
00:17:54,400 --> 00:17:58,640
is

403
00:17:55,039 --> 00:18:02,000
secure up to ts corruptions all honest

404
00:17:58,640 --> 00:18:02,000
part is output 0.

405
00:18:02,960 --> 00:18:06,799
now consider a scenario where the

406
00:18:05,840 --> 00:18:11,520
network is

407
00:18:06,799 --> 00:18:11,520
asynchronous and all parties are honest

408
00:18:11,760 --> 00:18:19,520
the first set of parties has as input 1

409
00:18:16,559 --> 00:18:21,280
whereas the second set has as input 0 as

410
00:18:19,520 --> 00:18:23,918
before

411
00:18:21,280 --> 00:18:28,160
the adversary however delays the

412
00:18:23,919 --> 00:18:29,919
messages between these two sets since

413
00:18:28,160 --> 00:18:33,200
the parties in the second set

414
00:18:29,919 --> 00:18:34,000
cannot distinguish between being in the

415
00:18:33,200 --> 00:18:37,679
first

416
00:18:34,000 --> 00:18:39,120
or second scenario all parties in the

417
00:18:37,679 --> 00:18:42,000
second set

418
00:18:39,120 --> 00:18:44,239
output zero as well in the asynchronous

419
00:18:42,000 --> 00:18:46,960
case

420
00:18:44,240 --> 00:18:48,240
but this contradicts the fact that the

421
00:18:46,960 --> 00:18:51,919
output

422
00:18:48,240 --> 00:18:54,960
ignores less than ts parties

423
00:18:51,919 --> 00:18:56,000
if the input of any party on the first

424
00:18:54,960 --> 00:18:57,840
set

425
00:18:56,000 --> 00:18:59,600
is taking into account for the

426
00:18:57,840 --> 00:19:03,360
computation

427
00:18:59,600 --> 00:19:03,360
the output of would be one

428
00:19:05,280 --> 00:19:10,000
the second lower bound is inherited from

429
00:19:08,559 --> 00:19:13,120
the lower bound presented

430
00:19:10,000 --> 00:19:16,400
by bloom cuts and loss

431
00:19:13,120 --> 00:19:16,399
for byzantine agreement

432
00:19:16,880 --> 00:19:21,360
here parties compute the majority

433
00:19:19,200 --> 00:19:23,520
function

434
00:19:21,360 --> 00:19:24,399
and we divide the parties into three

435
00:19:23,520 --> 00:19:29,600
sets

436
00:19:24,400 --> 00:19:29,600
of sizes ts ts and ta

437
00:19:29,840 --> 00:19:33,439
so in the first scenario if ts parties

438
00:19:32,480 --> 00:19:37,440
are corrupted

439
00:19:33,440 --> 00:19:40,480
and crash and all honest parties have 0

440
00:19:37,440 --> 00:19:45,760
as input the output is 0

441
00:19:40,480 --> 00:19:45,760
because 0 is the majority value

442
00:19:46,160 --> 00:19:50,000
and the same argument holds

443
00:19:48,240 --> 00:19:54,000
symmetrically when the input

444
00:19:50,000 --> 00:19:54,000
is 1 for the other sets

445
00:19:54,720 --> 00:20:01,919
so now consider a scenario

446
00:19:58,080 --> 00:20:05,840
where that virtually corrupts ta parties

447
00:20:01,919 --> 00:20:08,960
and also in addition delays all messages

448
00:20:05,840 --> 00:20:11,120
between the upper two sets

449
00:20:08,960 --> 00:20:13,280
the adversary simply place the two

450
00:20:11,120 --> 00:20:16,959
strategies as in the synchronous

451
00:20:13,280 --> 00:20:18,080
execution with input 0 towards the left

452
00:20:16,960 --> 00:20:22,159
set

453
00:20:18,080 --> 00:20:24,879
and with input 1 towards the right set

454
00:20:22,159 --> 00:20:26,320
since the upper sets have the same view

455
00:20:24,880 --> 00:20:29,360
as in the synchronous

456
00:20:26,320 --> 00:20:34,080
execution the left set

457
00:20:29,360 --> 00:20:37,039
outputs 0 and the right set outputs 1.

458
00:20:34,080 --> 00:20:39,039
but this contradicts the fact that

459
00:20:37,039 --> 00:20:41,120
parties should get the same value

460
00:20:39,039 --> 00:20:44,640
since they compute the maturity function

461
00:20:41,120 --> 00:20:47,760
over the same set of inputs

462
00:20:44,640 --> 00:20:49,039
and note that these holds even when all

463
00:20:47,760 --> 00:20:51,840
the inputs

464
00:20:49,039 --> 00:20:51,840
are ignored

465
00:20:55,039 --> 00:21:01,520
so thank you very much for your

466
00:20:56,880 --> 00:21:01,520
attention and this is all from my side

467
00:21:01,679 --> 00:21:05,200
here you can find the references and the

468
00:21:03,840 --> 00:21:09,520
link to the full

469
00:21:05,200 --> 00:21:15,120
version of the paper yeah and i hope to

470
00:21:09,520 --> 00:21:15,120
see you all at the virtual conference

