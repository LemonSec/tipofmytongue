1
00:00:00,160 --> 00:00:03,520
hello and welcome to this talk my name

2
00:00:01,920 --> 00:00:05,520
is mark simkin and i'm going to present

3
00:00:03,520 --> 00:00:07,439
the paper black box transformations from

4
00:00:05,520 --> 00:00:08,799
passive to covert security with public

5
00:00:07,440 --> 00:00:10,559
verifiability

6
00:00:08,800 --> 00:00:11,840
this is joint work with ivan damgard and

7
00:00:10,559 --> 00:00:15,280
claudio orlandi

8
00:00:11,840 --> 00:00:16,640
from oahu's university in this talk we

9
00:00:15,280 --> 00:00:17,759
will focus on the setting of secure

10
00:00:16,640 --> 00:00:19,760
computation

11
00:00:17,760 --> 00:00:22,000
where we have two or more parties each

12
00:00:19,760 --> 00:00:23,600
of those parties holding a private input

13
00:00:22,000 --> 00:00:26,000
and they would like to jointly compute

14
00:00:23,600 --> 00:00:28,320
some function such that at the end they

15
00:00:26,000 --> 00:00:30,800
all learn the output of the computation

16
00:00:28,320 --> 00:00:32,558
but none of the parties learns anything

17
00:00:30,800 --> 00:00:33,520
that is not trivially revealed by the

18
00:00:32,558 --> 00:00:35,599
output

19
00:00:33,520 --> 00:00:37,280
so in particular the parties would

20
00:00:35,600 --> 00:00:40,559
really like to protect

21
00:00:37,280 --> 00:00:42,320
their inputs as much as possible

22
00:00:40,559 --> 00:00:44,239
in this setting we commonly consider two

23
00:00:42,320 --> 00:00:45,520
types of adversaries we consider passive

24
00:00:44,239 --> 00:00:47,120
adversaries which will

25
00:00:45,520 --> 00:00:49,280
follow the protocol specification

26
00:00:47,120 --> 00:00:50,959
honestly but they will still try to

27
00:00:49,280 --> 00:00:52,719
learn more than what they're supposed to

28
00:00:50,960 --> 00:00:55,120
learn by simply observing

29
00:00:52,719 --> 00:00:57,280
the messages that they receive and then

30
00:00:55,120 --> 00:00:58,879
we consider active adversaries

31
00:00:57,280 --> 00:01:00,640
which may deviate from the protocol

32
00:00:58,879 --> 00:01:02,879
description in an arbitrary fashion so

33
00:01:00,640 --> 00:01:05,920
they can send incorrect messages

34
00:01:02,879 --> 00:01:08,960
they may not respond to certain messages

35
00:01:05,920 --> 00:01:10,240
and such an adversary can not only

36
00:01:08,960 --> 00:01:12,080
potentially learn more

37
00:01:10,240 --> 00:01:13,839
about the private inputs of the honest

38
00:01:12,080 --> 00:01:16,080
parties it can also

39
00:01:13,840 --> 00:01:17,520
try to produce an incorrect output of

40
00:01:16,080 --> 00:01:19,280
the computation

41
00:01:17,520 --> 00:01:21,600
now both of those types of adversaries

42
00:01:19,280 --> 00:01:22,960
have their disadvantages

43
00:01:21,600 --> 00:01:25,119
protocols that are secure against

44
00:01:22,960 --> 00:01:26,720
passive adversaries make a strong

45
00:01:25,119 --> 00:01:27,920
assumption about the behavior of the

46
00:01:26,720 --> 00:01:29,759
adversary

47
00:01:27,920 --> 00:01:31,119
and thus such protocols may not be

48
00:01:29,759 --> 00:01:32,240
secure enough for real-world

49
00:01:31,119 --> 00:01:33,840
applications

50
00:01:32,240 --> 00:01:35,839
where we do actually want to prevent an

51
00:01:33,840 --> 00:01:38,079
adversary from misbehaving

52
00:01:35,840 --> 00:01:39,840
on the other end of the spectrum we have

53
00:01:38,079 --> 00:01:41,119
active adversaries and protocols that

54
00:01:39,840 --> 00:01:42,079
are secure against such a strong

55
00:01:41,119 --> 00:01:44,079
adversary

56
00:01:42,079 --> 00:01:46,639
don't come for free so such protocols

57
00:01:44,079 --> 00:01:48,880
usually incur some computational

58
00:01:46,640 --> 00:01:50,799
and bandwidth overhead so actively

59
00:01:48,880 --> 00:01:52,479
secure protocols tend to be at least an

60
00:01:50,799 --> 00:01:54,720
order of magnitude slower than their

61
00:01:52,479 --> 00:01:56,880
passively secure counterparts

62
00:01:54,720 --> 00:01:57,920
this was already observed in 2007 by

63
00:01:56,880 --> 00:01:59,839
allman and lindell

64
00:01:57,920 --> 00:02:02,560
and there the authors suggested a new

65
00:01:59,840 --> 00:02:05,119
notion of covert adversaries

66
00:02:02,560 --> 00:02:05,759
which basically requires a protocol to

67
00:02:05,119 --> 00:02:07,840
detect

68
00:02:05,759 --> 00:02:09,759
any active misbehavior with some

69
00:02:07,840 --> 00:02:13,040
constant probability

70
00:02:09,758 --> 00:02:14,160
as such the notion is placing itself in

71
00:02:13,040 --> 00:02:16,799
between passive

72
00:02:14,160 --> 00:02:18,319
and active security because it is a

73
00:02:16,800 --> 00:02:19,120
clearly stronger notion than passive

74
00:02:18,319 --> 00:02:21,119
security

75
00:02:19,120 --> 00:02:22,640
but because we allow the adversary to

76
00:02:21,120 --> 00:02:24,319
successfully cheat with some constant

77
00:02:22,640 --> 00:02:26,160
probability it is weaker than

78
00:02:24,319 --> 00:02:28,000
full active security and the hope here

79
00:02:26,160 --> 00:02:29,520
was to generate a notion

80
00:02:28,000 --> 00:02:31,440
that is good enough for real-world

81
00:02:29,520 --> 00:02:33,040
applications but for which we can still

82
00:02:31,440 --> 00:02:34,640
hope to construct more efficient

83
00:02:33,040 --> 00:02:37,280
protocols than the ones that we have for

84
00:02:34,640 --> 00:02:38,640
active security in 2012 a sheriff in

85
00:02:37,280 --> 00:02:40,640
orlando observed that

86
00:02:38,640 --> 00:02:42,079
we would actually like something that is

87
00:02:40,640 --> 00:02:42,879
a little bit stronger than just the

88
00:02:42,080 --> 00:02:45,200
notion of

89
00:02:42,879 --> 00:02:46,640
security against covert adversary we

90
00:02:45,200 --> 00:02:48,799
would additionally like that

91
00:02:46,640 --> 00:02:49,760
the protocol is publicly verifiable

92
00:02:48,800 --> 00:02:52,160
which means that

93
00:02:49,760 --> 00:02:53,280
if the honest parties detect cheating so

94
00:02:52,160 --> 00:02:54,640
if the adversary

95
00:02:53,280 --> 00:02:56,319
does not successfully cheat in a

96
00:02:54,640 --> 00:02:57,518
protocol execution then the honest

97
00:02:56,319 --> 00:02:59,760
parties should obtain

98
00:02:57,519 --> 00:03:01,519
some publicly verifiable certificate

99
00:02:59,760 --> 00:03:03,518
that they can show to some outside

100
00:03:01,519 --> 00:03:05,360
observer to convince this observer

101
00:03:03,519 --> 00:03:07,599
from the fact that the adversary did

102
00:03:05,360 --> 00:03:09,519
indeed cheat and the motivation here was

103
00:03:07,599 --> 00:03:11,359
to disincentivize the adversary from

104
00:03:09,519 --> 00:03:14,239
cheating by potentially

105
00:03:11,360 --> 00:03:17,040
incuring a financial penalty in case

106
00:03:14,239 --> 00:03:19,040
cheating is detected

107
00:03:17,040 --> 00:03:20,720
so what do we know so far about such

108
00:03:19,040 --> 00:03:23,760
protocols

109
00:03:20,720 --> 00:03:24,640
in 2008 goyal mohaslinsmith showed how

110
00:03:23,760 --> 00:03:27,280
to construct

111
00:03:24,640 --> 00:03:28,480
garbled circuits and the multi-party

112
00:03:27,280 --> 00:03:30,000
version of garbled circuit based

113
00:03:28,480 --> 00:03:32,720
particles called bmr

114
00:03:30,000 --> 00:03:34,239
with better efficiency by only requiring

115
00:03:32,720 --> 00:03:35,920
security against covert adversaries

116
00:03:34,239 --> 00:03:39,040
rather than security

117
00:03:35,920 --> 00:03:41,440
against active adversaries

118
00:03:39,040 --> 00:03:43,280
dam guard geyser nielsen showed how to

119
00:03:41,440 --> 00:03:44,400
compile certain secret sharing based

120
00:03:43,280 --> 00:03:46,080
protocols

121
00:03:44,400 --> 00:03:48,480
that are secured in an honest majority

122
00:03:46,080 --> 00:03:50,000
setting into protocols that are covertly

123
00:03:48,480 --> 00:03:53,920
secure

124
00:03:50,000 --> 00:03:56,239
and in 2013 dumb guard at all showed

125
00:03:53,920 --> 00:03:57,920
how to construct a very efficient

126
00:03:56,239 --> 00:04:01,120
pre-processing phase for

127
00:03:57,920 --> 00:04:04,798
the speeds protocol that is also

128
00:04:01,120 --> 00:04:07,200
only covertly secure and very recently

129
00:04:04,799 --> 00:04:09,360
in 2019 hong and all

130
00:04:07,200 --> 00:04:10,958
showed how to actually achieve very

131
00:04:09,360 --> 00:04:12,879
efficient garbled circuits

132
00:04:10,959 --> 00:04:14,080
with covert security and with public

133
00:04:12,879 --> 00:04:15,359
verifiability

134
00:04:14,080 --> 00:04:17,199
and here it should be pointed out that

135
00:04:15,360 --> 00:04:19,040
the first three protocols

136
00:04:17,199 --> 00:04:20,880
described here do not have public

137
00:04:19,040 --> 00:04:23,600
verifiability they just achieve the

138
00:04:20,880 --> 00:04:25,360
first notion of covert security

139
00:04:23,600 --> 00:04:27,440
and furthermore if we look at those four

140
00:04:25,360 --> 00:04:28,320
results we can see that three of those

141
00:04:27,440 --> 00:04:30,719
results provide

142
00:04:28,320 --> 00:04:33,440
specific protocols and only one of those

143
00:04:30,720 --> 00:04:34,960
results is a generic compiler

144
00:04:33,440 --> 00:04:36,880
and there is actually some advantage to

145
00:04:34,960 --> 00:04:38,400
studying compilers because if in the

146
00:04:36,880 --> 00:04:39,600
future we come up with some more

147
00:04:38,400 --> 00:04:42,000
efficient

148
00:04:39,600 --> 00:04:43,040
and new way of doing passively secure

149
00:04:42,000 --> 00:04:44,479
protocols

150
00:04:43,040 --> 00:04:46,160
then using the compiler we can

151
00:04:44,479 --> 00:04:49,120
potentially immediately

152
00:04:46,160 --> 00:04:51,040
obtain a covertly secure protocol or if

153
00:04:49,120 --> 00:04:54,479
we had such a compiler a covertly secure

154
00:04:51,040 --> 00:04:56,000
protocol with public verifiability

155
00:04:54,479 --> 00:04:57,520
and the only existing compiler that we

156
00:04:56,000 --> 00:04:58,960
have has some disadvantages

157
00:04:57,520 --> 00:05:00,400
because first of all it makes some

158
00:04:58,960 --> 00:05:02,000
specific assumptions about the

159
00:05:00,400 --> 00:05:04,320
underlying passively secure protocol

160
00:05:02,000 --> 00:05:06,240
that it compiles

161
00:05:04,320 --> 00:05:08,000
and it does not work for the two-party

162
00:05:06,240 --> 00:05:08,720
case because it does need an honest

163
00:05:08,000 --> 00:05:12,320
majority

164
00:05:08,720 --> 00:05:14,479
so in this work we focus on compilers

165
00:05:12,320 --> 00:05:16,080
that take a passively secure protocol

166
00:05:14,479 --> 00:05:18,000
and transform it into a protocol that is

167
00:05:16,080 --> 00:05:21,440
secure against covert adversaries and

168
00:05:18,000 --> 00:05:21,440
has public verifiability

169
00:05:21,680 --> 00:05:26,160
the first compiler that we present is a

170
00:05:24,400 --> 00:05:27,758
compiler that takes a passively secure

171
00:05:26,160 --> 00:05:29,440
two-party protocol

172
00:05:27,759 --> 00:05:31,440
that takes no private inputs from the

173
00:05:29,440 --> 00:05:32,960
parties and constructs

174
00:05:31,440 --> 00:05:34,960
a covert protocol with public

175
00:05:32,960 --> 00:05:37,120
verifiability

176
00:05:34,960 --> 00:05:38,799
and at first it may seem that a protocol

177
00:05:37,120 --> 00:05:41,039
that doesn't take any private inputs

178
00:05:38,800 --> 00:05:43,360
is useless but actually we will show

179
00:05:41,039 --> 00:05:44,960
that such protocols have applications in

180
00:05:43,360 --> 00:05:47,600
particular they are very useful

181
00:05:44,960 --> 00:05:49,198
for setting up correlated randomness and

182
00:05:47,600 --> 00:05:50,000
using this compiler we can then

183
00:05:49,199 --> 00:05:51,919
construct

184
00:05:50,000 --> 00:05:54,560
the most efficient two-party speeds

185
00:05:51,919 --> 00:05:56,639
protocol with public verifiability that

186
00:05:54,560 --> 00:05:58,720
exists in the state

187
00:05:56,639 --> 00:05:59,919
and furthermore we show how to use the

188
00:05:58,720 --> 00:06:02,319
first compiler

189
00:05:59,919 --> 00:06:04,639
to obtain a second compiler that works

190
00:06:02,319 --> 00:06:07,199
for arbitrary two-party protocols

191
00:06:04,639 --> 00:06:08,880
and constructs covertly secure protocols

192
00:06:07,199 --> 00:06:10,960
with public verifiability

193
00:06:08,880 --> 00:06:12,800
by just making black box use of a

194
00:06:10,960 --> 00:06:15,840
passively secure protocol

195
00:06:12,800 --> 00:06:18,880
and oblivious transfer

196
00:06:15,840 --> 00:06:20,400
and lastly we also show how to

197
00:06:18,880 --> 00:06:22,159
extend these protocols to the

198
00:06:20,400 --> 00:06:23,840
multi-party setting but this is

199
00:06:22,160 --> 00:06:26,000
not something we will discuss in this

200
00:06:23,840 --> 00:06:27,520
talk so let us start with the compiler

201
00:06:26,000 --> 00:06:29,280
for protocols with no inputs

202
00:06:27,520 --> 00:06:31,198
so we have alice and bob they have black

203
00:06:29,280 --> 00:06:32,000
box access to some passively secure

204
00:06:31,199 --> 00:06:33,360
functionality

205
00:06:32,000 --> 00:06:36,400
that computes whatever they would like

206
00:06:33,360 --> 00:06:38,240
to compute so to execute this protocol

207
00:06:36,400 --> 00:06:39,840
they exchange messages according to the

208
00:06:38,240 --> 00:06:41,600
protocol description and at the end of

209
00:06:39,840 --> 00:06:42,400
this execution alice will obtain some

210
00:06:41,600 --> 00:06:44,319
output a1

211
00:06:42,400 --> 00:06:46,000
and bob will obtain some output b1

212
00:06:44,319 --> 00:06:47,039
because the protocol is only passively

213
00:06:46,000 --> 00:06:48,720
secure

214
00:06:47,039 --> 00:06:50,159
alice could potentially send a

215
00:06:48,720 --> 00:06:52,080
maliciously formed message

216
00:06:50,160 --> 00:06:53,599
and this would result in bob producing

217
00:06:52,080 --> 00:06:56,960
an incorrect output

218
00:06:53,599 --> 00:06:59,199
now our first idea here is to do

219
00:06:56,960 --> 00:07:01,280
the same thing that virtually every

220
00:06:59,199 --> 00:07:03,440
single paper in covert security does

221
00:07:01,280 --> 00:07:04,400
namely execute the protocol many times

222
00:07:03,440 --> 00:07:06,800
in parallel

223
00:07:04,400 --> 00:07:07,919
with the idea to use some of those

224
00:07:06,800 --> 00:07:09,680
executions as

225
00:07:07,919 --> 00:07:11,520
check executions that check whether the

226
00:07:09,680 --> 00:07:13,520
parties behave honestly

227
00:07:11,520 --> 00:07:16,080
and use the last execution to actually

228
00:07:13,520 --> 00:07:18,960
produce the output that we want to use

229
00:07:16,080 --> 00:07:19,599
and here the hope is that for example

230
00:07:18,960 --> 00:07:21,599
alice

231
00:07:19,599 --> 00:07:24,000
can do no better than just randomly

232
00:07:21,599 --> 00:07:26,240
guessing which execution will be used

233
00:07:24,000 --> 00:07:28,960
and thus has a probability of one-third

234
00:07:26,240 --> 00:07:30,880
of successfully cheating

235
00:07:28,960 --> 00:07:32,080
so what do we mean by checking an

236
00:07:30,880 --> 00:07:34,000
execution

237
00:07:32,080 --> 00:07:36,479
more concretely how such a protocol will

238
00:07:34,000 --> 00:07:38,639
run is both alice and bob will first

239
00:07:36,479 --> 00:07:39,520
generate commitments to a random tape

240
00:07:38,639 --> 00:07:42,800
for alice

241
00:07:39,520 --> 00:07:44,639
and a random take for bob r a and rb

242
00:07:42,800 --> 00:07:45,919
then they will run the protocol where

243
00:07:44,639 --> 00:07:48,639
all random

244
00:07:45,919 --> 00:07:50,639
decisions that lsr bob will make will be

245
00:07:48,639 --> 00:07:52,879
deterministic functions of their random

246
00:07:50,639 --> 00:07:54,879
tapes

247
00:07:52,879 --> 00:07:56,639
after the protocol is finished the

248
00:07:54,879 --> 00:07:58,960
parties will

249
00:07:56,639 --> 00:08:00,400
reveal the random tapes that they were

250
00:07:58,960 --> 00:08:01,599
supposed to use by opening the

251
00:08:00,400 --> 00:08:04,000
commitments

252
00:08:01,599 --> 00:08:05,199
and then each party can check whether

253
00:08:04,000 --> 00:08:07,120
the messages

254
00:08:05,199 --> 00:08:10,639
that the parties received are consistent

255
00:08:07,120 --> 00:08:12,240
with the random tapes that were opened

256
00:08:10,639 --> 00:08:14,240
and to make this approach publicly

257
00:08:12,240 --> 00:08:16,319
verifiable we also would like the

258
00:08:14,240 --> 00:08:19,199
parties to sign the full transcript

259
00:08:16,319 --> 00:08:21,680
so after running the protocol both

260
00:08:19,199 --> 00:08:24,720
parties sign the transcript

261
00:08:21,680 --> 00:08:27,360
and then proceed to open the commitments

262
00:08:24,720 --> 00:08:28,639
and now if alice cheats and still opens

263
00:08:27,360 --> 00:08:32,240
the commitment

264
00:08:28,639 --> 00:08:34,320
then bob will have proof um of alice's

265
00:08:32,240 --> 00:08:36,000
misbehavior and can show

266
00:08:34,320 --> 00:08:37,680
the signed transcript and the opening of

267
00:08:36,000 --> 00:08:38,880
the commitment to a third party who will

268
00:08:37,679 --> 00:08:41,838
then be convinced

269
00:08:38,880 --> 00:08:41,838
of alice's misbehavior

270
00:08:42,479 --> 00:08:46,959
the problem however is that alice may

271
00:08:45,200 --> 00:08:47,920
simply decide to abort and to not open

272
00:08:46,959 --> 00:08:49,199
her execution

273
00:08:47,920 --> 00:08:52,079
if she doesn't like which of the

274
00:08:49,200 --> 00:08:53,760
executions is being checked

275
00:08:52,080 --> 00:08:55,760
and to avoid this we will do the

276
00:08:53,760 --> 00:08:57,600
following instead of

277
00:08:55,760 --> 00:08:59,760
publicly revealing which execution the

278
00:08:57,600 --> 00:09:01,680
parties will check each party will check

279
00:08:59,760 --> 00:09:02,160
some execution by itself so for example

280
00:09:01,680 --> 00:09:04,160
bob

281
00:09:02,160 --> 00:09:05,519
randomly selects the first execution to

282
00:09:04,160 --> 00:09:07,839
check

283
00:09:05,519 --> 00:09:09,279
and alice randomly selects the last

284
00:09:07,839 --> 00:09:11,440
execution to check

285
00:09:09,279 --> 00:09:13,519
but neither alice nor bob know which

286
00:09:11,440 --> 00:09:16,240
execution is checked by the other party

287
00:09:13,519 --> 00:09:18,160
and here the important part is that if

288
00:09:16,240 --> 00:09:18,880
each party checks less than half of the

289
00:09:18,160 --> 00:09:20,480
executions

290
00:09:18,880 --> 00:09:22,480
then we are guaranteed that at the end

291
00:09:20,480 --> 00:09:24,320
there is still at least one execution

292
00:09:22,480 --> 00:09:26,160
which we can use to produce the output

293
00:09:24,320 --> 00:09:27,600
of the computation

294
00:09:26,160 --> 00:09:29,360
so what does it mean to check an

295
00:09:27,600 --> 00:09:31,760
execution secretly

296
00:09:29,360 --> 00:09:32,720
alice will use oblivious transfer to

297
00:09:31,760 --> 00:09:35,200
obtain

298
00:09:32,720 --> 00:09:36,399
the random tape for this execution and

299
00:09:35,200 --> 00:09:39,600
bob will do the same

300
00:09:36,399 --> 00:09:41,839
and then we proceed as before

301
00:09:39,600 --> 00:09:43,440
so the parties execute the protocol and

302
00:09:41,839 --> 00:09:44,640
after the execution they can check

303
00:09:43,440 --> 00:09:46,320
whether everything was fine

304
00:09:44,640 --> 00:09:47,920
if this is the case they show which

305
00:09:46,320 --> 00:09:50,320
execution they checked

306
00:09:47,920 --> 00:09:51,920
and then they use the last execution to

307
00:09:50,320 --> 00:09:54,399
obtain the output

308
00:09:51,920 --> 00:09:55,760
and now importantly since alice doesn't

309
00:09:54,399 --> 00:09:58,000
know which execution bob

310
00:09:55,760 --> 00:09:59,519
checks she can only guess and if she

311
00:09:58,000 --> 00:10:00,480
cheats in an execution that is checked

312
00:09:59,519 --> 00:10:02,240
by bob

313
00:10:00,480 --> 00:10:04,320
then bob will obtain a certificate that

314
00:10:02,240 --> 00:10:06,079
he can show to a third party

315
00:10:04,320 --> 00:10:08,000
so now let us proceed with the compiler

316
00:10:06,079 --> 00:10:10,079
for arbitrary protocols

317
00:10:08,000 --> 00:10:12,480
here alice and bob now have private

318
00:10:10,079 --> 00:10:15,120
inputs x and y

319
00:10:12,480 --> 00:10:16,480
and our compiler will work by using

320
00:10:15,120 --> 00:10:19,040
something that is known as the player

321
00:10:16,480 --> 00:10:21,200
virtualization paradigm

322
00:10:19,040 --> 00:10:22,959
which works by letting alice and bob

323
00:10:21,200 --> 00:10:23,839
imagine some virtual parties in their

324
00:10:22,959 --> 00:10:25,680
head

325
00:10:23,839 --> 00:10:27,839
and then using those virtual parties in

326
00:10:25,680 --> 00:10:28,640
some way to execute a protocol on their

327
00:10:27,839 --> 00:10:30,720
behalf

328
00:10:28,640 --> 00:10:32,720
so what alice and bob will do is they

329
00:10:30,720 --> 00:10:34,399
will secret share their input

330
00:10:32,720 --> 00:10:36,880
each of the virtual parties will get one

331
00:10:34,399 --> 00:10:39,440
of the shares of this input

332
00:10:36,880 --> 00:10:41,439
and then the virtual parties will

333
00:10:39,440 --> 00:10:43,120
execute a passively secure protocol

334
00:10:41,440 --> 00:10:46,800
such that alice and bob in the end

335
00:10:43,120 --> 00:10:49,120
obtain the output of the computation

336
00:10:46,800 --> 00:10:51,199
since the protocol is passively secure

337
00:10:49,120 --> 00:10:52,880
we again have to deal with the fact that

338
00:10:51,200 --> 00:10:54,880
potentially one of alice's virtual

339
00:10:52,880 --> 00:10:55,920
parties will misbehave and send a bad

340
00:10:54,880 --> 00:10:59,120
message to one of

341
00:10:55,920 --> 00:11:00,000
bob's virtual parties the important

342
00:10:59,120 --> 00:11:02,320
observation here

343
00:11:00,000 --> 00:11:04,320
is that if alice wants to cheat in the

344
00:11:02,320 --> 00:11:06,480
overall protocol execution then alice

345
00:11:04,320 --> 00:11:08,480
has to necessarily cheat in one of those

346
00:11:06,480 --> 00:11:11,600
virtual parties there is no other way of

347
00:11:08,480 --> 00:11:14,079
misbehaving in this protocol

348
00:11:11,600 --> 00:11:16,720
so the idea here is again to use

349
00:11:14,079 --> 00:11:18,719
oblivious transfer to check some subset

350
00:11:16,720 --> 00:11:21,360
of these simulations of these virtual

351
00:11:18,720 --> 00:11:23,519
parties so for example bob in this case

352
00:11:21,360 --> 00:11:25,760
will try to check the first virtual

353
00:11:23,519 --> 00:11:27,279
party and alice will check the last

354
00:11:25,760 --> 00:11:29,200
virtual party of bob

355
00:11:27,279 --> 00:11:31,200
and since alice doesn't know which

356
00:11:29,200 --> 00:11:33,120
virtual party is checked

357
00:11:31,200 --> 00:11:35,040
the hope is that we can detect

358
00:11:33,120 --> 00:11:38,160
misbehavior with a probability

359
00:11:35,040 --> 00:11:40,319
of one-third but now

360
00:11:38,160 --> 00:11:41,600
we need to clarify what does it mean to

361
00:11:40,320 --> 00:11:44,320
check a virtual party

362
00:11:41,600 --> 00:11:46,000
so for this board needs several things

363
00:11:44,320 --> 00:11:47,920
bob needs to see the random tape that

364
00:11:46,000 --> 00:11:51,519
this party will use

365
00:11:47,920 --> 00:11:53,920
bob needs to see the input of that party

366
00:11:51,519 --> 00:11:55,120
and during the protocol execution bob

367
00:11:53,920 --> 00:11:57,040
will need to be able to see

368
00:11:55,120 --> 00:11:58,800
all of the incoming and outgoing

369
00:11:57,040 --> 00:12:01,040
messages of this party

370
00:11:58,800 --> 00:12:03,439
the input and the random tape we can do

371
00:12:01,040 --> 00:12:06,480
by ot as we did it before

372
00:12:03,440 --> 00:12:08,839
and we will show how to deal with the

373
00:12:06,480 --> 00:12:11,680
incoming and outgoing messages in the

374
00:12:08,839 --> 00:12:13,440
following

375
00:12:11,680 --> 00:12:14,800
so recall that these are virtual parties

376
00:12:13,440 --> 00:12:16,639
they don't actually exist

377
00:12:14,800 --> 00:12:18,479
so now we need to specify what happens

378
00:12:16,639 --> 00:12:19,920
if a virtual party of alice

379
00:12:18,480 --> 00:12:21,839
is supposed to send a message to a

380
00:12:19,920 --> 00:12:25,360
virtual party of bob

381
00:12:21,839 --> 00:12:26,880
in this case we can let alice faithfully

382
00:12:25,360 --> 00:12:30,079
simulate this virtual party

383
00:12:26,880 --> 00:12:32,240
and send the message directly to bob if

384
00:12:30,079 --> 00:12:34,239
bob checks this virtual party

385
00:12:32,240 --> 00:12:36,320
he can check whether this message is

386
00:12:34,240 --> 00:12:39,600
generated honestly

387
00:12:36,320 --> 00:12:41,360
and complain if this is not the case and

388
00:12:39,600 --> 00:12:43,680
implicitly you here we again assume that

389
00:12:41,360 --> 00:12:47,760
every message that is sent by alice

390
00:12:43,680 --> 00:12:47,760
also is sent along with the signature

391
00:12:48,480 --> 00:12:53,040
the more difficult case is when alice

392
00:12:51,839 --> 00:12:55,040
has to

393
00:12:53,040 --> 00:12:56,639
send a message from one of her virtual

394
00:12:55,040 --> 00:12:57,680
parties to another of her virtual

395
00:12:56,639 --> 00:13:00,880
parties

396
00:12:57,680 --> 00:13:03,040
and the issue here is that if bob checks

397
00:13:00,880 --> 00:13:05,120
either the sender or the receiver then

398
00:13:03,040 --> 00:13:07,199
he should be able to see the message

399
00:13:05,120 --> 00:13:08,560
because if he checks the sender he

400
00:13:07,200 --> 00:13:09,440
should be able to check whether the

401
00:13:08,560 --> 00:13:12,239
message is

402
00:13:09,440 --> 00:13:14,959
valid and if he checks the receiver then

403
00:13:12,240 --> 00:13:17,519
he needs to see the message to be able

404
00:13:14,959 --> 00:13:19,040
to check the execution at a later point

405
00:13:17,519 --> 00:13:21,440
because as we said before

406
00:13:19,040 --> 00:13:22,880
for checking a party bob needs to see

407
00:13:21,440 --> 00:13:26,639
all incoming and outgoing

408
00:13:22,880 --> 00:13:27,600
messages of a party however if bob does

409
00:13:26,639 --> 00:13:29,360
not check

410
00:13:27,600 --> 00:13:31,200
the sender or the receiver then bob

411
00:13:29,360 --> 00:13:32,720
should have no information about the

412
00:13:31,200 --> 00:13:35,760
message

413
00:13:32,720 --> 00:13:36,959
so how do we solve this problem we for

414
00:13:35,760 --> 00:13:38,959
the moment assume that

415
00:13:36,959 --> 00:13:40,079
somehow magically alice and bob have

416
00:13:38,959 --> 00:13:42,239
some symmetric

417
00:13:40,079 --> 00:13:43,359
secret keys which they will use to

418
00:13:42,240 --> 00:13:46,839
encrypt

419
00:13:43,360 --> 00:13:48,480
all communications between the virtual

420
00:13:46,839 --> 00:13:50,320
parties

421
00:13:48,480 --> 00:13:51,920
and in addition we will assume that

422
00:13:50,320 --> 00:13:54,959
somehow bob and alice

423
00:13:51,920 --> 00:13:56,719
magically get all keys that are

424
00:13:54,959 --> 00:13:58,079
associated with communication channels

425
00:13:56,720 --> 00:14:00,160
that are connected

426
00:13:58,079 --> 00:14:01,920
to the parties that they check so in

427
00:14:00,160 --> 00:14:03,920
this case bob checks the first virtual

428
00:14:01,920 --> 00:14:05,839
party of alice so he will obtain

429
00:14:03,920 --> 00:14:07,199
the two communication keys that are used

430
00:14:05,839 --> 00:14:08,000
for talking to the second virtual

431
00:14:07,199 --> 00:14:10,399
parties

432
00:14:08,000 --> 00:14:12,560
and talking for the third virtual party

433
00:14:10,399 --> 00:14:14,639
and now what we will do is that

434
00:14:12,560 --> 00:14:16,160
alice will encrypt the message that the

435
00:14:14,639 --> 00:14:17,839
first virtual party should send to the

436
00:14:16,160 --> 00:14:19,439
third virtual party

437
00:14:17,839 --> 00:14:20,959
and alice will send this encrypted

438
00:14:19,440 --> 00:14:23,600
message to bob

439
00:14:20,959 --> 00:14:25,279
now since bob is checking the sender bob

440
00:14:23,600 --> 00:14:27,839
has the corresponding

441
00:14:25,279 --> 00:14:29,519
secret key and he can decrypt a message

442
00:14:27,839 --> 00:14:31,040
however if the second virtual party

443
00:14:29,519 --> 00:14:32,000
sends a message to the third virtual

444
00:14:31,040 --> 00:14:34,000
party

445
00:14:32,000 --> 00:14:35,760
then bob will obtain an encryption of a

446
00:14:34,000 --> 00:14:36,320
message under a key that he does not

447
00:14:35,760 --> 00:14:39,120
possess

448
00:14:36,320 --> 00:14:41,120
and thus he cannot see the message in

449
00:14:39,120 --> 00:14:42,800
the previous description of the compiler

450
00:14:41,120 --> 00:14:44,160
we have assumed that the parties have

451
00:14:42,800 --> 00:14:46,000
quite a lot of

452
00:14:44,160 --> 00:14:47,439
correlated randomness set up between

453
00:14:46,000 --> 00:14:48,320
each other so for instance we assume

454
00:14:47,440 --> 00:14:51,120
that the parties

455
00:14:48,320 --> 00:14:52,639
all have honestly generated random tapes

456
00:14:51,120 --> 00:14:53,839
we're all virtual parties

457
00:14:52,639 --> 00:14:56,160
we have assumed that we have these

458
00:14:53,839 --> 00:14:58,720
symmetric keys and that bob knows some

459
00:14:56,160 --> 00:15:00,399
of the symmetric keys of alice and so on

460
00:14:58,720 --> 00:15:02,720
so here we'll just give like a very high

461
00:15:00,399 --> 00:15:04,399
level overview of how we generated this

462
00:15:02,720 --> 00:15:06,800
correlated randomness

463
00:15:04,399 --> 00:15:08,800
and for this we simply assumed that we

464
00:15:06,800 --> 00:15:10,800
have a passively secure functionality

465
00:15:08,800 --> 00:15:14,000
that generates this randomness

466
00:15:10,800 --> 00:15:15,439
and a bit more concretely this passively

467
00:15:14,000 --> 00:15:17,279
secure functionality

468
00:15:15,440 --> 00:15:19,760
generates commitments to all of this

469
00:15:17,279 --> 00:15:22,399
correlated randomness so it generates

470
00:15:19,760 --> 00:15:24,959
one commitment per secret key and one

471
00:15:22,399 --> 00:15:27,760
commitment per random tape

472
00:15:24,959 --> 00:15:28,479
and then it provides bob with all of the

473
00:15:27,760 --> 00:15:30,319
openings

474
00:15:28,480 --> 00:15:32,079
that are related to his virtual parties

475
00:15:30,320 --> 00:15:33,920
and alice with all the openings that are

476
00:15:32,079 --> 00:15:35,920
related to her virtual parties

477
00:15:33,920 --> 00:15:37,599
and in addition they also get the

478
00:15:35,920 --> 00:15:39,040
openings for the values

479
00:15:37,600 --> 00:15:41,120
that are related to the parties that

480
00:15:39,040 --> 00:15:42,880
they will check and

481
00:15:41,120 --> 00:15:44,800
here they don't actually choose which

482
00:15:42,880 --> 00:15:45,360
party they check by themselves we simply

483
00:15:44,800 --> 00:15:48,560
let

484
00:15:45,360 --> 00:15:51,199
the passively secure functionality pick

485
00:15:48,560 --> 00:15:52,638
a random party for each other and

486
00:15:51,199 --> 00:15:54,000
because this functionality doesn't get

487
00:15:52,639 --> 00:15:55,600
any inputs we can use our

488
00:15:54,000 --> 00:15:57,360
first compiler to make sure that this

489
00:15:55,600 --> 00:15:58,959
functionality will have covert security

490
00:15:57,360 --> 00:16:01,360
with public verifiability

491
00:15:58,959 --> 00:16:02,800
and here the important point is that now

492
00:16:01,360 --> 00:16:04,959
we have commitments

493
00:16:02,800 --> 00:16:05,920
for all of those things so we will let

494
00:16:04,959 --> 00:16:07,758
both parties

495
00:16:05,920 --> 00:16:09,599
sign those commitments before they start

496
00:16:07,759 --> 00:16:12,639
the protocol executions

497
00:16:09,600 --> 00:16:14,880
and this has the purpose that if else or

498
00:16:12,639 --> 00:16:19,519
bob cheat during the execution

499
00:16:14,880 --> 00:16:22,000
then the other party will have a message

500
00:16:19,519 --> 00:16:23,199
with a signature which is not consistent

501
00:16:22,000 --> 00:16:26,240
with a random tape

502
00:16:23,199 --> 00:16:28,479
and in addition it will have a signature

503
00:16:26,240 --> 00:16:29,279
of the committed random tape and an

504
00:16:28,480 --> 00:16:31,839
opening

505
00:16:29,279 --> 00:16:33,839
thereof so it can convince a third party

506
00:16:31,839 --> 00:16:35,040
that this cheating did indeed happen

507
00:16:33,839 --> 00:16:37,920
i would like to thank you for your

508
00:16:35,040 --> 00:16:39,839
attention and i welcome you to read our

509
00:16:37,920 --> 00:16:41,519
paper which is on eprint which contains

510
00:16:39,839 --> 00:16:43,920
all the details that i have skipped in

511
00:16:41,519 --> 00:16:43,920
this talk

