1
00:00:00,799 --> 00:00:04,640
hi thank you for taking some of your

2
00:00:02,560 --> 00:00:06,720
time to watch this pre-recorded crypto

3
00:00:04,640 --> 00:00:09,040
2020 video

4
00:00:06,720 --> 00:00:11,440
our paper reports on three computational

5
00:00:09,040 --> 00:00:13,280
records which we have recently obtained

6
00:00:11,440 --> 00:00:14,879
two related to integer factoring and one

7
00:00:13,280 --> 00:00:16,560
related to the computation of discrete

8
00:00:14,880 --> 00:00:18,160
logs observer financials

9
00:00:16,560 --> 00:00:19,919
i'm emmanuel tomey and this is a joint

10
00:00:18,160 --> 00:00:21,600
work with five courses

11
00:00:19,920 --> 00:00:24,400
four of us are from the same group in

12
00:00:21,600 --> 00:00:26,000
north sea france

13
00:00:24,400 --> 00:00:27,759
when we deploy cryptos as a major

14
00:00:26,000 --> 00:00:29,279
decision to make which is a decision

15
00:00:27,760 --> 00:00:31,359
on the key size depending on your

16
00:00:29,279 --> 00:00:33,760
internal interests you might have

17
00:00:31,359 --> 00:00:36,079
different things in mind if what you

18
00:00:33,760 --> 00:00:36,559
want is that your crypto computations be

19
00:00:36,079 --> 00:00:39,680
quick

20
00:00:36,559 --> 00:00:41,919
and be cheap then you want short keys

21
00:00:39,680 --> 00:00:43,840
if on the other hand you you are

22
00:00:41,920 --> 00:00:44,480
interested in security above anything

23
00:00:43,840 --> 00:00:46,719
else

24
00:00:44,480 --> 00:00:48,480
then you want longer keys so there is a

25
00:00:46,719 --> 00:00:50,000
compromise that is needed

26
00:00:48,480 --> 00:00:51,839
as an end user you might be very

27
00:00:50,000 --> 00:00:52,480
confident and trust the manufacturer to

28
00:00:51,840 --> 00:00:54,079
have done

29
00:00:52,480 --> 00:00:56,559
the right thing to have taken the wise

30
00:00:54,079 --> 00:00:57,760
decision but even if you are confident

31
00:00:56,559 --> 00:01:00,320
the sad fact that

32
00:00:57,760 --> 00:01:03,199
is that there are many outdated crypto

33
00:01:00,320 --> 00:01:06,080
products that are lingering

34
00:01:03,199 --> 00:01:06,560
what everybody can do or should do is

35
00:01:06,080 --> 00:01:08,158
check

36
00:01:06,560 --> 00:01:10,240
that the crypto product that we are

37
00:01:08,159 --> 00:01:13,360
about to use abide by the

38
00:01:10,240 --> 00:01:14,960
recommendations of nist for example

39
00:01:13,360 --> 00:01:16,960
now so the tricky question especially

40
00:01:14,960 --> 00:01:20,479
for publicly crypto is

41
00:01:16,960 --> 00:01:22,479
how do we make these recommendations

42
00:01:20,479 --> 00:01:23,840
we have to base them on harmless

43
00:01:22,479 --> 00:01:26,240
assumptions but

44
00:01:23,840 --> 00:01:27,360
this harness assumption assumptions have

45
00:01:26,240 --> 00:01:31,119
to be based

46
00:01:27,360 --> 00:01:33,280
on assessments of cryptanalysis

47
00:01:31,119 --> 00:01:34,400
four key sizes that by definition are

48
00:01:33,280 --> 00:01:36,159
out of which

49
00:01:34,400 --> 00:01:38,479
so how do we make these assessments

50
00:01:36,159 --> 00:01:41,040
convincing

51
00:01:38,479 --> 00:01:42,880
we need to base our assessments on hard

52
00:01:41,040 --> 00:01:44,799
facts we need to base them

53
00:01:42,880 --> 00:01:46,479
on state-of-the-art software

54
00:01:44,799 --> 00:01:49,600
implementations and

55
00:01:46,479 --> 00:01:51,920
what these implementations give for for

56
00:01:49,600 --> 00:01:52,720
sizes that are within reach and we need

57
00:01:51,920 --> 00:01:54,159
to

58
00:01:52,720 --> 00:01:56,000
go to some effort to obtain

59
00:01:54,159 --> 00:01:58,079
computational results that

60
00:01:56,000 --> 00:01:59,040
show that we have done our best to

61
00:01:58,079 --> 00:02:01,039
provide results

62
00:01:59,040 --> 00:02:03,200
so it means that we have to explore

63
00:02:01,040 --> 00:02:05,280
algorithmic ids that perhaps pay off

64
00:02:03,200 --> 00:02:07,360
only for very large sizes

65
00:02:05,280 --> 00:02:09,038
we need to explore the question of

66
00:02:07,360 --> 00:02:12,640
whether our algorithm

67
00:02:09,038 --> 00:02:13,599
scales whether we are encountering

68
00:02:12,640 --> 00:02:15,440
stumbling blocks

69
00:02:13,599 --> 00:02:17,280
whether we can harness a large amount of

70
00:02:15,440 --> 00:02:20,959
computing power

71
00:02:17,280 --> 00:02:23,440
and overall we need to show that

72
00:02:20,959 --> 00:02:25,520
this script analysis uh is more than

73
00:02:23,440 --> 00:02:27,760
just theory it's actually something

74
00:02:25,520 --> 00:02:29,360
that can happen for real so it's also

75
00:02:27,760 --> 00:02:32,959
important that we make our work

76
00:02:29,360 --> 00:02:33,920
reproducible another important aspect of

77
00:02:32,959 --> 00:02:36,400
our work is that

78
00:02:33,920 --> 00:02:37,839
we address both integer factoring and

79
00:02:36,400 --> 00:02:39,200
computation of discrete logs of our

80
00:02:37,840 --> 00:02:41,760
finite fields

81
00:02:39,200 --> 00:02:42,799
and it's like it's actually a fact that

82
00:02:41,760 --> 00:02:45,920
people

83
00:02:42,800 --> 00:02:48,239
uh believe that discrete logs

84
00:02:45,920 --> 00:02:49,599
of a finite fields are a lot harder than

85
00:02:48,239 --> 00:02:52,080
factoring integers

86
00:02:49,599 --> 00:02:53,119
and this is based on the observation

87
00:02:52,080 --> 00:02:55,680
that

88
00:02:53,120 --> 00:02:58,400
records for finance field discrete logs

89
00:02:55,680 --> 00:03:00,319
over the years have been lagging behind

90
00:02:58,400 --> 00:03:01,840
by several dozens if not hundreds of

91
00:03:00,319 --> 00:03:05,040
bits

92
00:03:01,840 --> 00:03:07,360
one of the takeaways of what we do is

93
00:03:05,040 --> 00:03:10,079
that this harness ratio is not as large

94
00:03:07,360 --> 00:03:10,080
as one can think

95
00:03:10,400 --> 00:03:13,120
so i'm going to give a brief

96
00:03:11,519 --> 00:03:15,280
introduction of the number filter which

97
00:03:13,120 --> 00:03:17,360
is the algorithm we used

98
00:03:15,280 --> 00:03:19,920
for our computational records and then

99
00:03:17,360 --> 00:03:23,519
highlight some of the key aspects

100
00:03:19,920 --> 00:03:25,920
of our work so the number field save

101
00:03:23,519 --> 00:03:29,200
algorithm is a complicated algorithm

102
00:03:25,920 --> 00:03:30,640
which goes through many steps so what i

103
00:03:29,200 --> 00:03:33,200
want people to have in mind is that

104
00:03:30,640 --> 00:03:36,238
there are two particular steps

105
00:03:33,200 --> 00:03:38,720
which are relation collection or sieving

106
00:03:36,239 --> 00:03:40,560
and linear algebra and these two steps

107
00:03:38,720 --> 00:03:42,319
are the most computationally expensive

108
00:03:40,560 --> 00:03:43,920
in the algorithm

109
00:03:42,319 --> 00:03:45,839
they have different characteristics but

110
00:03:43,920 --> 00:03:48,958
the bulk of the computation time

111
00:03:45,840 --> 00:03:51,040
actually goes in these two steps

112
00:03:48,959 --> 00:03:52,480
to give a brief explanation of nfs i

113
00:03:51,040 --> 00:03:54,959
need to to start

114
00:03:52,480 --> 00:03:56,238
with polynomial selection and explain

115
00:03:54,959 --> 00:03:58,319
what nfs does

116
00:03:56,239 --> 00:04:00,080
so polynomial selection is the first

117
00:03:58,319 --> 00:04:02,560
step of nfs

118
00:04:00,080 --> 00:04:03,120
and within polynomial selection we

119
00:04:02,560 --> 00:04:06,319
select

120
00:04:03,120 --> 00:04:09,120
a pair of integer polynomials

121
00:04:06,319 --> 00:04:11,359
and one of them defines a number field q

122
00:04:09,120 --> 00:04:14,159
of alpha

123
00:04:11,360 --> 00:04:16,479
and when nfs select when nfs collects

124
00:04:14,159 --> 00:04:18,159
relations

125
00:04:16,478 --> 00:04:20,079
what it does is that actually it

126
00:04:18,160 --> 00:04:22,720
searches for pairs of integers a

127
00:04:20,079 --> 00:04:23,840
and b such that two fairly exceptional

128
00:04:22,720 --> 00:04:26,960
events occur

129
00:04:23,840 --> 00:04:29,520
namely that the integer a minus bm

130
00:04:26,960 --> 00:04:30,000
and the principal ideal generated by the

131
00:04:29,520 --> 00:04:33,520
element

132
00:04:30,000 --> 00:04:35,520
a minus b alpha in the number field both

133
00:04:33,520 --> 00:04:37,039
factor into a small thing we say that

134
00:04:35,520 --> 00:04:40,320
both are smooth

135
00:04:37,040 --> 00:04:41,120
small things means here small prime

136
00:04:40,320 --> 00:04:44,479
numbers

137
00:04:41,120 --> 00:04:46,800
and here it means small prime ideals but

138
00:04:44,479 --> 00:04:48,159
you don't have to to bother with primary

139
00:04:46,800 --> 00:04:50,479
deals and that sort of things

140
00:04:48,160 --> 00:04:51,440
just have in mind small things and what

141
00:04:50,479 --> 00:04:54,159
you can think of

142
00:04:51,440 --> 00:04:55,440
with prime numbers is close enough to

143
00:04:54,160 --> 00:04:58,080
the reality

144
00:04:55,440 --> 00:05:00,000
when we when we have such pairs a b we

145
00:04:58,080 --> 00:05:01,440
say that we have relations and what we

146
00:05:00,000 --> 00:05:02,960
want to do with relations

147
00:05:01,440 --> 00:05:05,280
is that we want to combine them to

148
00:05:02,960 --> 00:05:08,840
combine a subset of them

149
00:05:05,280 --> 00:05:11,599
uh which is not easy to you to guess

150
00:05:08,840 --> 00:05:12,080
uh so that all the multiplicities that

151
00:05:11,600 --> 00:05:14,639
appear

152
00:05:12,080 --> 00:05:15,359
in the factorizations are even and this

153
00:05:14,639 --> 00:05:19,199
is done

154
00:05:15,360 --> 00:05:22,000
by linear algebra when we have

155
00:05:19,199 --> 00:05:24,160
such a combination with even

156
00:05:22,000 --> 00:05:26,160
multiplicities on both sides

157
00:05:24,160 --> 00:05:27,199
we have an equality of squares and we

158
00:05:26,160 --> 00:05:30,240
have actually many

159
00:05:27,199 --> 00:05:32,400
equalities of squares and each of these

160
00:05:30,240 --> 00:05:34,240
when mapped modulo n gives us a

161
00:05:32,400 --> 00:05:36,400
non-trivial factorization of n

162
00:05:34,240 --> 00:05:39,440
with probability at least one half so

163
00:05:36,400 --> 00:05:41,679
this is how nfs factors integers

164
00:05:39,440 --> 00:05:42,960
uh the funny thing is that nfs is also

165
00:05:41,680 --> 00:05:44,720
adapted to complete

166
00:05:42,960 --> 00:05:46,799
computing discrete logs of our finite

167
00:05:44,720 --> 00:05:48,720
fields and there's more or less a

168
00:05:46,800 --> 00:05:49,520
dictionary translation from one to the

169
00:05:48,720 --> 00:05:52,479
other

170
00:05:49,520 --> 00:05:54,080
the only major difference is in linear

171
00:05:52,479 --> 00:05:55,680
algebra because

172
00:05:54,080 --> 00:05:57,440
while in the context of factoring

173
00:05:55,680 --> 00:06:01,360
integers we had linear algebra

174
00:05:57,440 --> 00:06:04,880
z over 2z here it's over z over lz where

175
00:06:01,360 --> 00:06:08,240
l is something a lot bigger so

176
00:06:04,880 --> 00:06:10,800
some things change the balance of things

177
00:06:08,240 --> 00:06:12,400
change and we have to adapt to it but

178
00:06:10,800 --> 00:06:14,000
the general pattern of

179
00:06:12,400 --> 00:06:16,799
what the algorithm looks like is pretty

180
00:06:14,000 --> 00:06:16,800
much unchanged

181
00:06:17,039 --> 00:06:21,280
okay how do we collect relations i'm

182
00:06:19,919 --> 00:06:24,240
going to address

183
00:06:21,280 --> 00:06:27,758
two fairly classical aspects of relation

184
00:06:24,240 --> 00:06:27,759
collection in nfs and then

185
00:06:27,840 --> 00:06:31,840
give some description of what we did in

186
00:06:29,759 --> 00:06:35,280
order to choose the parameters

187
00:06:31,840 --> 00:06:36,159
for our computation when we search for

188
00:06:35,280 --> 00:06:39,039
these

189
00:06:36,160 --> 00:06:41,600
exceptional pairs id we are essentially

190
00:06:39,039 --> 00:06:43,199
searching for needles in a very large

191
00:06:41,600 --> 00:06:45,600
haystack

192
00:06:43,199 --> 00:06:46,479
so there's a question of how we divide

193
00:06:45,600 --> 00:06:48,479
the work

194
00:06:46,479 --> 00:06:49,758
how do we arrange so that several

195
00:06:48,479 --> 00:06:51,359
computing units

196
00:06:49,759 --> 00:06:53,039
can participate in the computation

197
00:06:51,360 --> 00:06:55,520
simultaneously

198
00:06:53,039 --> 00:06:56,318
so there's a trivial strategy uh that

199
00:06:55,520 --> 00:06:58,880
consists

200
00:06:56,319 --> 00:07:00,080
in splitting the search space in

201
00:06:58,880 --> 00:07:03,039
rectangles

202
00:07:00,080 --> 00:07:03,840
and then uh the downside of this is that

203
00:07:03,039 --> 00:07:06,639
the yield

204
00:07:03,840 --> 00:07:08,318
is pretty unstable and at the end of the

205
00:07:06,639 --> 00:07:10,800
day it doesn't work too well

206
00:07:08,319 --> 00:07:12,639
instead we prefer to do what all the

207
00:07:10,800 --> 00:07:13,840
computational records have been doing

208
00:07:12,639 --> 00:07:15,919
for years

209
00:07:13,840 --> 00:07:18,719
namely we use what is called special q

210
00:07:15,919 --> 00:07:22,479
saving we constrain a factor q to appear

211
00:07:18,720 --> 00:07:25,360
in one of the factorizations and then

212
00:07:22,479 --> 00:07:26,479
this defines many independent tasks one

213
00:07:25,360 --> 00:07:29,599
per q

214
00:07:26,479 --> 00:07:31,680
the yield becomes stable and

215
00:07:29,599 --> 00:07:33,440
because we have prescribed a factor to

216
00:07:31,680 --> 00:07:35,360
appear in one of the factorizations

217
00:07:33,440 --> 00:07:37,759
this is also one thing less that we have

218
00:07:35,360 --> 00:07:37,759
to find

219
00:07:38,639 --> 00:07:46,319
okay now how do we actually find

220
00:07:41,840 --> 00:07:49,599
within one of the smaller search spaces

221
00:07:46,319 --> 00:07:51,919
how do we find the smooth abs

222
00:07:49,599 --> 00:07:53,680
it's a question of finding potential

223
00:07:51,919 --> 00:07:56,878
prime factors that appear

224
00:07:53,680 --> 00:08:00,720
in the factorizations of a minus b m and

225
00:07:56,879 --> 00:08:03,759
a minus b alpha so the strategy

226
00:08:00,720 --> 00:08:05,759
pretty much depends on the size of these

227
00:08:03,759 --> 00:08:09,199
potential factors p

228
00:08:05,759 --> 00:08:12,560
for the prime factors below some bound b

229
00:08:09,199 --> 00:08:13,919
which we can choose freely we strive to

230
00:08:12,560 --> 00:08:16,479
find all pairs

231
00:08:13,919 --> 00:08:18,719
such that p appears so it means that we

232
00:08:16,479 --> 00:08:22,400
are going to go to some effort to find

233
00:08:18,720 --> 00:08:24,400
all the abs such that 17 appears in the

234
00:08:22,400 --> 00:08:25,679
factorization for example or such that

235
00:08:24,400 --> 00:08:29,120
73 appears

236
00:08:25,680 --> 00:08:30,000
in the factorization to do so we use a

237
00:08:29,120 --> 00:08:31,599
process which is called

238
00:08:30,000 --> 00:08:34,000
sieving and this accounts for the name

239
00:08:31,599 --> 00:08:36,399
sieve in naval filter

240
00:08:34,000 --> 00:08:37,279
on the other hand for primes above b and

241
00:08:36,399 --> 00:08:40,640
up to

242
00:08:37,279 --> 00:08:42,799
the bomb l which is the maximum bound

243
00:08:40,640 --> 00:08:44,399
of things that we allow to appear in the

244
00:08:42,799 --> 00:08:46,399
factorization

245
00:08:44,399 --> 00:08:48,240
which we can also choose freely and this

246
00:08:46,399 --> 00:08:51,120
is an important aspect

247
00:08:48,240 --> 00:08:52,080
of the parameter choice then in this

248
00:08:51,120 --> 00:08:55,519
range

249
00:08:52,080 --> 00:08:59,279
we are opportunistic uh meaning that

250
00:08:55,519 --> 00:09:02,080
if some factors show up

251
00:08:59,279 --> 00:09:02,720
then we take them but if we miss some

252
00:09:02,080 --> 00:09:07,120
then

253
00:09:02,720 --> 00:09:09,600
no big deal so how do the relations that

254
00:09:07,120 --> 00:09:13,120
we encounter look like

255
00:09:09,600 --> 00:09:15,279
here are some example relations we have

256
00:09:13,120 --> 00:09:17,360
the blue things that are the large

257
00:09:15,279 --> 00:09:20,640
primes above b

258
00:09:17,360 --> 00:09:21,440
the red one are the ones that we have

259
00:09:20,640 --> 00:09:24,240
constrained

260
00:09:21,440 --> 00:09:25,680
to appear in the factorization and then

261
00:09:24,240 --> 00:09:28,240
there's a question of

262
00:09:25,680 --> 00:09:29,920
how many blue things do we have because

263
00:09:28,240 --> 00:09:33,519
the the black things we know that

264
00:09:29,920 --> 00:09:35,839
we are going to have many of them uh so

265
00:09:33,519 --> 00:09:37,760
we're bound to use some non-trivial

266
00:09:35,839 --> 00:09:38,959
lining algebra to find a magic

267
00:09:37,760 --> 00:09:41,760
combination that has

268
00:09:38,959 --> 00:09:42,319
all the valuations even on the other

269
00:09:41,760 --> 00:09:44,399
hand

270
00:09:42,320 --> 00:09:45,440
the blue things are going to be rare and

271
00:09:44,399 --> 00:09:49,440
we are going to

272
00:09:45,440 --> 00:09:52,720
to keep this rare

273
00:09:49,440 --> 00:09:54,640
aspect of the blue things so in order to

274
00:09:52,720 --> 00:09:55,920
do so we are going to set a limit on the

275
00:09:54,640 --> 00:09:57,680
number of blue things that

276
00:09:55,920 --> 00:09:59,360
that can appear on each side it means

277
00:09:57,680 --> 00:10:01,760
that the two relations here

278
00:09:59,360 --> 00:10:03,760
i'm going to discard them because i say

279
00:10:01,760 --> 00:10:05,839
that we have too many of the blue things

280
00:10:03,760 --> 00:10:05,839
here

281
00:10:06,160 --> 00:10:10,240
so this means that before i do linear

282
00:10:08,959 --> 00:10:13,119
algebra proper

283
00:10:10,240 --> 00:10:14,480
i'm going to try to do some cheap linear

284
00:10:13,120 --> 00:10:17,600
combinations

285
00:10:14,480 --> 00:10:18,000
in order to to get a smaller matrix i'm

286
00:10:17,600 --> 00:10:21,279
going to

287
00:10:18,000 --> 00:10:23,519
to try to cancel uh

288
00:10:21,279 --> 00:10:25,279
a blue prime here with a blue prime

289
00:10:23,519 --> 00:10:28,240
somewhat some other place

290
00:10:25,279 --> 00:10:30,000
and this is going to to simplify the the

291
00:10:28,240 --> 00:10:30,839
linear algebra work this is that's going

292
00:10:30,000 --> 00:10:33,920
to happen

293
00:10:30,839 --> 00:10:37,040
afterwards okay

294
00:10:33,920 --> 00:10:40,319
next uh given this uh

295
00:10:37,040 --> 00:10:42,079
observations uh it's important to

296
00:10:40,320 --> 00:10:45,200
understand that the relations that

297
00:10:42,079 --> 00:10:46,160
have only two large primes and maybe

298
00:10:45,200 --> 00:10:47,680
even less

299
00:10:46,160 --> 00:10:49,839
they're really a blessing because they

300
00:10:47,680 --> 00:10:51,920
participate in the cheap combinations

301
00:10:49,839 --> 00:10:53,120
very easily essentially these relations

302
00:10:51,920 --> 00:10:56,160
are trading

303
00:10:53,120 --> 00:10:56,800
one blue thing for another so it's very

304
00:10:56,160 --> 00:10:59,839
good

305
00:10:56,800 --> 00:11:01,760
uh because it helps the set of cheap

306
00:10:59,839 --> 00:11:05,360
combinations going

307
00:11:01,760 --> 00:11:08,640
uh so we

308
00:11:05,360 --> 00:11:12,560
we will use these relations to do the

309
00:11:08,640 --> 00:11:15,600
early filtering these cheap combinations

310
00:11:12,560 --> 00:11:16,959
and if we have only relations with two

311
00:11:15,600 --> 00:11:19,040
large frames or less

312
00:11:16,959 --> 00:11:20,160
then the filtering will essentially get

313
00:11:19,040 --> 00:11:22,959
rid of all of them

314
00:11:20,160 --> 00:11:24,719
so of course because i have two sites to

315
00:11:22,959 --> 00:11:25,439
deal with it's a bit more complicated

316
00:11:24,720 --> 00:11:27,760
than

317
00:11:25,440 --> 00:11:29,120
what i'm saying but essentially this is

318
00:11:27,760 --> 00:11:30,880
the id

319
00:11:29,120 --> 00:11:32,160
also one thing we we want to pay

320
00:11:30,880 --> 00:11:35,279
attention to is

321
00:11:32,160 --> 00:11:38,319
uh how does q uh

322
00:11:35,279 --> 00:11:41,760
participate in all of this i mean does q

323
00:11:38,320 --> 00:11:44,880
uh go with the black things uh where i

324
00:11:41,760 --> 00:11:48,240
am going to have many uh

325
00:11:44,880 --> 00:11:51,200
appearances of each prime factor or

326
00:11:48,240 --> 00:11:51,839
is q going to to go with the blue things

327
00:11:51,200 --> 00:11:54,480
uh

328
00:11:51,839 --> 00:11:55,680
and is it going to to participate in the

329
00:11:54,480 --> 00:11:59,360
set of things where

330
00:11:55,680 --> 00:12:01,680
i want to eliminate uh the

331
00:11:59,360 --> 00:12:04,560
prime numbers as far as possible so it's

332
00:12:01,680 --> 00:12:07,359
also something important

333
00:12:04,560 --> 00:12:08,399
for rsa 240 the strategy that we used is

334
00:12:07,360 --> 00:12:11,600
that

335
00:12:08,399 --> 00:12:15,279
we used uh q from about

336
00:12:11,600 --> 00:12:19,120
half the the bound b to

337
00:12:15,279 --> 00:12:21,680
way above it and for q below b

338
00:12:19,120 --> 00:12:24,079
so q being among the black things which

339
00:12:21,680 --> 00:12:26,719
is exactly the situation i had

340
00:12:24,079 --> 00:12:27,279
in the example relations two slides ago

341
00:12:26,720 --> 00:12:29,920
uh

342
00:12:27,279 --> 00:12:32,000
i allow two large primes on side zero

343
00:12:29,920 --> 00:12:35,199
and three large primes in side one

344
00:12:32,000 --> 00:12:40,720
in contrast when q gets above b

345
00:12:35,200 --> 00:12:42,480
uh q also goes with the blue things

346
00:12:40,720 --> 00:12:44,560
then what's going to happen is that i'm

347
00:12:42,480 --> 00:12:45,519
going to decrease the maximum number of

348
00:12:44,560 --> 00:12:48,560
large primes that are

349
00:12:45,519 --> 00:12:51,279
low on side one so that

350
00:12:48,560 --> 00:12:52,079
the number of large primes plus q that

351
00:12:51,279 --> 00:12:54,720
also makes

352
00:12:52,079 --> 00:12:55,199
three so the relations with our q is

353
00:12:54,720 --> 00:12:59,360
here

354
00:12:55,200 --> 00:13:01,680
or here are more or less the same shape

355
00:12:59,360 --> 00:13:02,639
so this strategy was really effective in

356
00:13:01,680 --> 00:13:06,079
category of

357
00:13:02,639 --> 00:13:07,440
getting rid of most of the p above b on

358
00:13:06,079 --> 00:13:10,079
side zero

359
00:13:07,440 --> 00:13:12,000
and on side one i still had many of

360
00:13:10,079 --> 00:13:14,000
these but that's not too bad because in

361
00:13:12,000 --> 00:13:16,880
the context of factoring

362
00:13:14,000 --> 00:13:19,279
lania algebra is really relatively

363
00:13:16,880 --> 00:13:22,399
manageable

364
00:13:19,279 --> 00:13:25,839
so now for glp 240 which was

365
00:13:22,399 --> 00:13:29,120
which was our discrete log record uh

366
00:13:25,839 --> 00:13:31,440
we wanted to go to a lot of effort in

367
00:13:29,120 --> 00:13:35,200
order to reduce the matrix size because

368
00:13:31,440 --> 00:13:38,480
the the linear algebra task in

369
00:13:35,200 --> 00:13:39,920
the dlp context is much harder so we

370
00:13:38,480 --> 00:13:42,720
want you to go to some effort

371
00:13:39,920 --> 00:13:44,079
to to have a smaller matrix so what we

372
00:13:42,720 --> 00:13:46,959
did is that we chose

373
00:13:44,079 --> 00:13:48,719
to constrain factors q that were

374
00:13:46,959 --> 00:13:50,638
composite

375
00:13:48,720 --> 00:13:51,760
so that when we write down the

376
00:13:50,639 --> 00:13:54,800
factorization

377
00:13:51,760 --> 00:13:57,760
of all the relations the things that

378
00:13:54,800 --> 00:13:59,120
are related to q are actually two

379
00:13:57,760 --> 00:14:01,760
distinct

380
00:13:59,120 --> 00:14:03,199
prime factors that both belong to the

381
00:14:01,760 --> 00:14:05,920
range below b

382
00:14:03,199 --> 00:14:08,800
and they do not interact with the things

383
00:14:05,920 --> 00:14:11,040
that we want to cancel

384
00:14:08,800 --> 00:14:12,160
this strategy was extremely effective as

385
00:14:11,040 --> 00:14:16,399
we will see

386
00:14:12,160 --> 00:14:19,040
in reducing the the size of the matrix

387
00:14:16,399 --> 00:14:19,839
and essentially getting rid of all the

388
00:14:19,040 --> 00:14:23,279
primes

389
00:14:19,839 --> 00:14:27,760
on most of the primes between b

390
00:14:23,279 --> 00:14:31,279
and l so that was very important

391
00:14:27,760 --> 00:14:33,040
another aspect i want to mention

392
00:14:31,279 --> 00:14:34,959
not necessarily related to the previous

393
00:14:33,040 --> 00:14:36,959
but i want to mention it because it

394
00:14:34,959 --> 00:14:38,399
played a role in our computation

395
00:14:36,959 --> 00:14:41,279
is what we call batch smoothness

396
00:14:38,399 --> 00:14:44,560
detection it's an alternative to sieving

397
00:14:41,279 --> 00:14:45,439
it's a fun way to find the best most

398
00:14:44,560 --> 00:14:48,000
part

399
00:14:45,440 --> 00:14:49,839
of many integers this is due to burst

400
00:14:48,000 --> 00:14:51,760
bernstein in 2000

401
00:14:49,839 --> 00:14:54,160
and the idea is to multiply everything

402
00:14:51,760 --> 00:14:54,160
together

403
00:14:54,240 --> 00:14:58,639
by doing so and by keeping track of the

404
00:14:56,480 --> 00:15:01,519
tree of sub products

405
00:14:58,639 --> 00:15:02,480
it's actually possible to find the b

406
00:15:01,519 --> 00:15:05,440
smooth parts

407
00:15:02,480 --> 00:15:06,560
of all the a minus b m's and this

408
00:15:05,440 --> 00:15:09,199
algorithm does it

409
00:15:06,560 --> 00:15:10,719
in time that is quasi-linear in the

410
00:15:09,199 --> 00:15:13,760
input size

411
00:15:10,720 --> 00:15:17,600
thanks to the use of asymptotically fast

412
00:15:13,760 --> 00:15:20,240
fft like multiplication algorithms uh

413
00:15:17,600 --> 00:15:20,800
so this finds all the primes below the

414
00:15:20,240 --> 00:15:23,600
bound b

415
00:15:20,800 --> 00:15:24,880
for example so just like sieving does

416
00:15:23,600 --> 00:15:27,680
the downside is that

417
00:15:24,880 --> 00:15:29,600
it requires some memory but on the other

418
00:15:27,680 --> 00:15:32,800
hand in the context of nfs

419
00:15:29,600 --> 00:15:36,240
uh this this helps save memory

420
00:15:32,800 --> 00:15:39,279
in several occasions so overall

421
00:15:36,240 --> 00:15:40,800
this is very often the benefit so we

422
00:15:39,279 --> 00:15:42,880
used it

423
00:15:40,800 --> 00:15:46,479
in part of the parameter ranges for our

424
00:15:42,880 --> 00:15:49,600
computation not always but pretty often

425
00:15:46,480 --> 00:15:53,040
and this is detailed in the paper

426
00:15:49,600 --> 00:15:54,240
okay now on to linear algebra so linear

427
00:15:53,040 --> 00:15:56,880
algebra as i said

428
00:15:54,240 --> 00:15:58,160
is the second most important part in the

429
00:15:56,880 --> 00:16:00,079
computation

430
00:15:58,160 --> 00:16:01,839
and as i mentioned as well there's a

431
00:16:00,079 --> 00:16:03,359
huge difference between what we have in

432
00:16:01,839 --> 00:16:05,120
the context of factoring and in the

433
00:16:03,360 --> 00:16:06,839
context of discrete logs

434
00:16:05,120 --> 00:16:08,480
namely that the field of definition

435
00:16:06,839 --> 00:16:12,079
changes so

436
00:16:08,480 --> 00:16:15,839
many algebra for dlp is harder

437
00:16:12,079 --> 00:16:18,800
for this reason our strategy was

438
00:16:15,839 --> 00:16:19,440
aiming at having a smaller matrix for

439
00:16:18,800 --> 00:16:21,199
dlp

440
00:16:19,440 --> 00:16:23,040
and this was pretty effective as we can

441
00:16:21,199 --> 00:16:25,439
see

442
00:16:23,040 --> 00:16:28,319
because by spending a lot more effort in

443
00:16:25,440 --> 00:16:32,000
finding relations for dlp we were able

444
00:16:28,320 --> 00:16:34,160
to obtain a matrix that was much smaller

445
00:16:32,000 --> 00:16:35,360
it's important to notice as well that

446
00:16:34,160 --> 00:16:38,000
this matrix

447
00:16:35,360 --> 00:16:38,639
in both cases is very sparse because it

448
00:16:38,000 --> 00:16:41,519
has

449
00:16:38,639 --> 00:16:42,000
very few non-zero elements per row here

450
00:16:41,519 --> 00:16:45,519
this is

451
00:16:42,000 --> 00:16:48,000
less than one non-zero in a million

452
00:16:45,519 --> 00:16:50,560
uh with this kind of sparse matrices the

453
00:16:48,000 --> 00:16:53,279
algorithms that you want to use are

454
00:16:50,560 --> 00:16:55,040
iterative algorithms meaning that you

455
00:16:53,279 --> 00:16:55,839
essentially rely on a key operation

456
00:16:55,040 --> 00:16:57,839
which is

457
00:16:55,839 --> 00:16:59,279
the multiplication of a sparse matrix

458
00:16:57,839 --> 00:17:01,440
times a vector

459
00:16:59,279 --> 00:17:02,399
if you want such such an operation to

460
00:17:01,440 --> 00:17:04,400
scale

461
00:17:02,399 --> 00:17:06,400
it's not sufficient that you go to the

462
00:17:04,400 --> 00:17:08,480
computer cluster that is in the basement

463
00:17:06,400 --> 00:17:11,520
of your cs department building

464
00:17:08,480 --> 00:17:12,640
uh instead you want to use an algorithm

465
00:17:11,520 --> 00:17:15,359
that has

466
00:17:12,640 --> 00:17:16,959
this scaling functionality sort of built

467
00:17:15,359 --> 00:17:18,079
in and this is the case of copper

468
00:17:16,959 --> 00:17:20,319
smith's

469
00:17:18,079 --> 00:17:21,678
block vitamin algorithm which dates back

470
00:17:20,319 --> 00:17:24,720
to 94.

471
00:17:21,679 --> 00:17:27,919
this algorithm uses not one but

472
00:17:24,720 --> 00:17:30,320
n independent sequences compared to

473
00:17:27,919 --> 00:17:32,640
the original freedom and algorithm and

474
00:17:30,320 --> 00:17:35,678
these sequences are shorter so

475
00:17:32,640 --> 00:17:36,480
it means that uh in this case the

476
00:17:35,679 --> 00:17:39,280
scaling

477
00:17:36,480 --> 00:17:40,080
of the algorithm is almost perfect with

478
00:17:39,280 --> 00:17:42,480
respect to

479
00:17:40,080 --> 00:17:44,240
ns the number of sequences that you have

480
00:17:42,480 --> 00:17:44,960
so of course there is a downside which

481
00:17:44,240 --> 00:17:47,280
is

482
00:17:44,960 --> 00:17:49,360
that you need at some point to reconcile

483
00:17:47,280 --> 00:17:51,120
the work that you have done in several

484
00:17:49,360 --> 00:17:52,479
independent sequences i mean by

485
00:17:51,120 --> 00:17:55,199
independent i mean that

486
00:17:52,480 --> 00:17:56,880
i could be running a sequence uh in the

487
00:17:55,200 --> 00:17:58,880
us and one in france

488
00:17:56,880 --> 00:18:00,720
with no communications so it's very

489
00:17:58,880 --> 00:18:01,520
independent so you have to reconcile the

490
00:18:00,720 --> 00:18:04,080
work

491
00:18:01,520 --> 00:18:05,918
and the more sequences you have used the

492
00:18:04,080 --> 00:18:09,280
harder it gets

493
00:18:05,919 --> 00:18:10,880
so you can do a back of the envelope

494
00:18:09,280 --> 00:18:12,960
calculation of the complexity

495
00:18:10,880 --> 00:18:14,080
of the different steps and it's

496
00:18:12,960 --> 00:18:16,640
important to understand

497
00:18:14,080 --> 00:18:17,760
also that the underlying operations in

498
00:18:16,640 --> 00:18:19,760
most cases

499
00:18:17,760 --> 00:18:21,039
uh are slightly different here you are

500
00:18:19,760 --> 00:18:24,400
essentially

501
00:18:21,039 --> 00:18:25,840
measuring the performance of the memory

502
00:18:24,400 --> 00:18:28,559
of your computers

503
00:18:25,840 --> 00:18:30,720
while here you have operations that are

504
00:18:28,559 --> 00:18:32,720
slightly more delicate

505
00:18:30,720 --> 00:18:35,679
to deal with so i mean these are

506
00:18:32,720 --> 00:18:35,679
different characteristics

507
00:18:35,760 --> 00:18:42,480
okay good now onto software resources

508
00:18:39,919 --> 00:18:44,240
to do these records we use the cadre nfs

509
00:18:42,480 --> 00:18:46,640
software which we have been developing

510
00:18:44,240 --> 00:18:47,760
in nancy since 2007. it's a huge piece

511
00:18:46,640 --> 00:18:50,880
of software

512
00:18:47,760 --> 00:18:53,440
it's open source lgpl licensed

513
00:18:50,880 --> 00:18:55,679
it's an open an open development model i

514
00:18:53,440 --> 00:18:58,320
have a link to the gitlab here

515
00:18:55,679 --> 00:19:00,400
and regarding just relation collection

516
00:18:58,320 --> 00:19:04,000
uh it's a huge part of cadron fs

517
00:19:00,400 --> 00:19:06,880
which has undergone many improvements

518
00:19:04,000 --> 00:19:08,640
in the last four years relating to

519
00:19:06,880 --> 00:19:11,679
parallelism for example

520
00:19:08,640 --> 00:19:14,960
or to the freedom of choice that we have

521
00:19:11,679 --> 00:19:16,559
for the parameters and also uh

522
00:19:14,960 --> 00:19:19,039
we have many improvements that are

523
00:19:16,559 --> 00:19:22,000
pretty recent uh related to

524
00:19:19,039 --> 00:19:22,879
our capacity to predict the runtime and

525
00:19:22,000 --> 00:19:26,000
to assess

526
00:19:22,880 --> 00:19:28,400
the the validity of some parameter

527
00:19:26,000 --> 00:19:28,400
choices

528
00:19:28,480 --> 00:19:32,480
regarding lanyard algebra it's also an

529
00:19:31,280 --> 00:19:36,639
important part of

530
00:19:32,480 --> 00:19:39,360
cado nfs and likewise we have

531
00:19:36,640 --> 00:19:40,480
seen many improvements in the last four

532
00:19:39,360 --> 00:19:42,320
years

533
00:19:40,480 --> 00:19:43,600
some related to discrete logs

534
00:19:42,320 --> 00:19:45,600
specifically for the

535
00:19:43,600 --> 00:19:46,719
multiplication of sparse matrices times

536
00:19:45,600 --> 00:19:50,159
vectors

537
00:19:46,720 --> 00:19:53,200
and more recently we improved

538
00:19:50,160 --> 00:19:56,559
on the generator step computation

539
00:19:53,200 --> 00:19:59,760
uh by using uh more

540
00:19:56,559 --> 00:20:02,799
parallelism and uh this was key

541
00:19:59,760 --> 00:20:04,640
to enabling uh the use of

542
00:20:02,799 --> 00:20:06,320
many different sequences i mean this

543
00:20:04,640 --> 00:20:10,480
allowed us to

544
00:20:06,320 --> 00:20:13,760
to have an implementation that scaled no

545
00:20:10,480 --> 00:20:14,559
much more than previously if i draw this

546
00:20:13,760 --> 00:20:17,840
kind of

547
00:20:14,559 --> 00:20:19,918
pictures uh with the time to solution

548
00:20:17,840 --> 00:20:21,760
the functions of as a function of the

549
00:20:19,919 --> 00:20:22,799
number of number of cores that i am

550
00:20:21,760 --> 00:20:26,240
using

551
00:20:22,799 --> 00:20:28,559
uh a perfect algorithm uh one that

552
00:20:26,240 --> 00:20:30,480
scales perfectly achieves a straight

553
00:20:28,559 --> 00:20:32,399
line and thanks to

554
00:20:30,480 --> 00:20:34,080
our new implementation of the generator

555
00:20:32,400 --> 00:20:36,080
steps thanks to

556
00:20:34,080 --> 00:20:37,840
the flexibility that the block vietnam

557
00:20:36,080 --> 00:20:39,439
algorithm offers

558
00:20:37,840 --> 00:20:40,959
i have something that approaches a

559
00:20:39,440 --> 00:20:42,880
straight line

560
00:20:40,960 --> 00:20:46,840
up to several thousands of course so

561
00:20:42,880 --> 00:20:48,159
this is something we're pretty satisfied

562
00:20:46,840 --> 00:20:49,840
with

563
00:20:48,159 --> 00:20:52,080
we used many computer resources of

564
00:20:49,840 --> 00:20:53,039
course we used several in france in the

565
00:20:52,080 --> 00:20:54,960
us

566
00:20:53,039 --> 00:20:58,320
we also used the computer location on

567
00:20:54,960 --> 00:21:00,720
the uv and place infrastructure

568
00:20:58,320 --> 00:21:02,399
and since this means several different

569
00:21:00,720 --> 00:21:05,520
computer clusters

570
00:21:02,400 --> 00:21:07,760
it also means several

571
00:21:05,520 --> 00:21:10,000
software installations different job

572
00:21:07,760 --> 00:21:12,480
schedulers different policies

573
00:21:10,000 --> 00:21:14,320
different kinds of bugs it also means

574
00:21:12,480 --> 00:21:16,960
that we had to

575
00:21:14,320 --> 00:21:18,000
to have recovery procedures uh in some

576
00:21:16,960 --> 00:21:21,120
cases

577
00:21:18,000 --> 00:21:23,520
uh so that was also an important part of

578
00:21:21,120 --> 00:21:25,840
the work

579
00:21:23,520 --> 00:21:28,240
okay i can draw an approximative

580
00:21:25,840 --> 00:21:30,480
timeline of our computation

581
00:21:28,240 --> 00:21:32,480
here i have the different steps of the

582
00:21:30,480 --> 00:21:34,159
three computations that we are reporting

583
00:21:32,480 --> 00:21:36,799
in millions of co-houses

584
00:21:34,159 --> 00:21:38,080
so this is the hardness so to say of

585
00:21:36,799 --> 00:21:40,639
each step

586
00:21:38,080 --> 00:21:41,760
and here this is a timeline and the

587
00:21:40,640 --> 00:21:43,520
surface

588
00:21:41,760 --> 00:21:45,600
of each thing is proportional to the

589
00:21:43,520 --> 00:21:47,679
harness

590
00:21:45,600 --> 00:21:49,039
so we started with relation collection

591
00:21:47,679 --> 00:21:52,320
for dlp and then

592
00:21:49,039 --> 00:21:54,000
relation collection for fsa 240

593
00:21:52,320 --> 00:21:55,840
and then lanier algebra was in the

594
00:21:54,000 --> 00:21:56,720
summer last year and finished in the

595
00:21:55,840 --> 00:21:59,280
fall because

596
00:21:56,720 --> 00:22:00,559
i mean some implementation work uh had

597
00:21:59,280 --> 00:22:02,399
to be done

598
00:22:00,559 --> 00:22:03,678
and by the time we were nearing

599
00:22:02,400 --> 00:22:05,360
completion completion

600
00:22:03,679 --> 00:22:07,200
of our records it was pretty clear that

601
00:22:05,360 --> 00:22:08,879
we were going to have some of our

602
00:22:07,200 --> 00:22:12,559
allocation time left

603
00:22:08,880 --> 00:22:13,360
so we started lsa 250 in fall 2019 and

604
00:22:12,559 --> 00:22:16,879
this

605
00:22:13,360 --> 00:22:20,320
was over in february 2020.

606
00:22:16,880 --> 00:22:22,159
okay so it's also possible to give a

607
00:22:20,320 --> 00:22:25,280
total cost

608
00:22:22,159 --> 00:22:26,400
in 4 years or 4 hours depending on what

609
00:22:25,280 --> 00:22:28,559
you prefer

610
00:22:26,400 --> 00:22:30,000
and i want you to highlight here the

611
00:22:28,559 --> 00:22:32,720
fact that

612
00:22:30,000 --> 00:22:33,440
if you do the total of relation

613
00:22:32,720 --> 00:22:36,320
collection

614
00:22:33,440 --> 00:22:38,000
and linear algebra in both cases for fsa

615
00:22:36,320 --> 00:22:42,559
240 you reach something that's

616
00:22:38,000 --> 00:22:45,200
slightly below 900 core years

617
00:22:42,559 --> 00:22:45,600
while for glp 240 you get something that

618
00:22:45,200 --> 00:22:49,520
is

619
00:22:45,600 --> 00:22:50,399
slightly above 3000 coils so the ratio

620
00:22:49,520 --> 00:22:52,559
between the two

621
00:22:50,400 --> 00:22:55,440
is only slightly above a factor of three

622
00:22:52,559 --> 00:22:58,639
which is not that large

623
00:22:55,440 --> 00:22:59,600
also i i mentioned that our results are

624
00:22:58,640 --> 00:23:02,559
reproducible

625
00:22:59,600 --> 00:23:03,760
and uh this can be checked with this

626
00:23:02,559 --> 00:23:06,080
link

627
00:23:03,760 --> 00:23:08,480
where we give parameters of all the

628
00:23:06,080 --> 00:23:11,360
steps of our algorithms and

629
00:23:08,480 --> 00:23:14,720
of our computations and instructions on

630
00:23:11,360 --> 00:23:18,158
how to reproduce part of our computation

631
00:23:14,720 --> 00:23:18,960
so as a conclusion we did more than just

632
00:23:18,159 --> 00:23:20,960
records we

633
00:23:18,960 --> 00:23:22,080
developed parameterization strategies

634
00:23:20,960 --> 00:23:25,840
that can be used for

635
00:23:22,080 --> 00:23:28,240
further computations we also developed a

636
00:23:25,840 --> 00:23:30,000
framework for simulating nfs

637
00:23:28,240 --> 00:23:31,280
that is not perfect and there is some

638
00:23:30,000 --> 00:23:34,840
detail about it

639
00:23:31,280 --> 00:23:36,000
in a paper but it was essential in

640
00:23:34,840 --> 00:23:39,600
guiding

641
00:23:36,000 --> 00:23:41,919
our parameter choices we also showed

642
00:23:39,600 --> 00:23:44,799
that our implementation scales well and

643
00:23:41,919 --> 00:23:46,400
can tackle larger problems so we have

644
00:23:44,799 --> 00:23:47,360
the feeling at this point that we are

645
00:23:46,400 --> 00:23:50,320
not hitting

646
00:23:47,360 --> 00:23:52,639
a significant technology barrier and

647
00:23:50,320 --> 00:23:55,200
it's possible to go further

648
00:23:52,640 --> 00:23:56,159
comparisons are always good we can

649
00:23:55,200 --> 00:24:00,880
compare

650
00:23:56,159 --> 00:24:02,880
our dlp 240 which is 795 bits

651
00:24:00,880 --> 00:24:04,240
to the previous record which is the lp

652
00:24:02,880 --> 00:24:07,919
768 200

653
00:24:04,240 --> 00:24:09,760
232 digits and in fact

654
00:24:07,919 --> 00:24:12,320
we had access to hardware that was

655
00:24:09,760 --> 00:24:14,960
identical to the hardware that was

656
00:24:12,320 --> 00:24:16,799
reported as having been used for the dlp

657
00:24:14,960 --> 00:24:20,080
768 computation

658
00:24:16,799 --> 00:24:21,918
and what we found out is that all harder

659
00:24:20,080 --> 00:24:24,960
computation would have taken

660
00:24:21,919 --> 00:24:27,039
less time on that hardware than the

661
00:24:24,960 --> 00:24:29,039
reported time for the dlp 768

662
00:24:27,039 --> 00:24:32,559
computation so this is something

663
00:24:29,039 --> 00:24:35,360
that we are pretty happy with also as i

664
00:24:32,559 --> 00:24:36,879
mentioned we learned that the hardness

665
00:24:35,360 --> 00:24:39,199
ratio between

666
00:24:36,880 --> 00:24:40,320
finite field dlp and integer factoring

667
00:24:39,200 --> 00:24:43,679
is not as large

668
00:24:40,320 --> 00:24:44,720
as one can think so for future

669
00:24:43,679 --> 00:24:47,760
computations

670
00:24:44,720 --> 00:24:50,880
we intend to keep the focus on the

671
00:24:47,760 --> 00:24:54,158
anticipation of the computation cost and

672
00:24:50,880 --> 00:24:57,120
our ability to

673
00:24:54,159 --> 00:24:59,520
to anticipate that and also we want to

674
00:24:57,120 --> 00:25:01,918
show that we are able to harness a large

675
00:24:59,520 --> 00:25:03,600
amount of computing power

676
00:25:01,919 --> 00:25:05,279
okay thank you this is all i wanted to

677
00:25:03,600 --> 00:25:06,399
say so thank you for listening and

678
00:25:05,279 --> 00:25:08,960
looking forward to your

679
00:25:06,400 --> 00:25:08,960
questions

