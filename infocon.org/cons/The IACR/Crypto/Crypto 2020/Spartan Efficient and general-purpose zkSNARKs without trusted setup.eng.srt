1
00:00:00,080 --> 00:00:04,960
this talk is about a new family of ck

2
00:00:02,159 --> 00:00:07,040
snacks which we call spartan

3
00:00:04,960 --> 00:00:10,240
before i describe spartan let's recall

4
00:00:07,040 --> 00:00:13,120
what a zk snark is

5
00:00:10,240 --> 00:00:14,879
a zk snark is an argument of knowledge

6
00:00:13,120 --> 00:00:15,360
meaning that it's a protocol between a

7
00:00:14,880 --> 00:00:18,480
prover

8
00:00:15,360 --> 00:00:20,480
and a verifier in this protocol the

9
00:00:18,480 --> 00:00:22,160
prover wants to convince the verifier

10
00:00:20,480 --> 00:00:23,039
that it knows a witness to an empty

11
00:00:22,160 --> 00:00:26,800
statement

12
00:00:23,039 --> 00:00:28,640
by producing a proof specifically given

13
00:00:26,800 --> 00:00:30,400
a circuit c with public input

14
00:00:28,640 --> 00:00:31,679
x the prover wants to prove the

15
00:00:30,400 --> 00:00:36,079
knowledge of w

16
00:00:31,679 --> 00:00:36,079
such that the circuit c is satisfiable

17
00:00:36,320 --> 00:00:39,760
additionally it's a zero knowledge

18
00:00:37,840 --> 00:00:40,239
argument meaning that the proof does not

19
00:00:39,760 --> 00:00:42,399
reveal

20
00:00:40,239 --> 00:00:45,519
anything about the witness beyond what

21
00:00:42,399 --> 00:00:47,920
is implied by the statement

22
00:00:45,520 --> 00:00:49,520
a zika snark is non-interactive meaning

23
00:00:47,920 --> 00:00:50,000
that the prover can produce its proof

24
00:00:49,520 --> 00:00:53,520
without

25
00:00:50,000 --> 00:00:53,520
interacting with a verifier

26
00:00:53,680 --> 00:00:58,480
finally sdk snark is succinct there are

27
00:00:56,160 --> 00:01:00,398
two forms of success

28
00:00:58,480 --> 00:01:03,199
first the size of the proof is sublinear

29
00:01:00,399 --> 00:01:05,439
in the size of the statement

30
00:01:03,199 --> 00:01:06,560
second the cost of verifier proof is

31
00:01:05,438 --> 00:01:09,679
also sublinear

32
00:01:06,560 --> 00:01:11,040
in the size of the statement

33
00:01:09,680 --> 00:01:12,880
we are interested in this primitive

34
00:01:11,040 --> 00:01:15,360
because there are many applications in

35
00:01:12,880 --> 00:01:15,360
practice

36
00:01:16,240 --> 00:01:19,520
there are many approaches to build zika

37
00:01:18,159 --> 00:01:21,040
snacks in the literature

38
00:01:19,520 --> 00:01:24,399
starting with the works of killian and

39
00:01:21,040 --> 00:01:26,479
macaulay in the 90s

40
00:01:24,400 --> 00:01:28,400
unfortunately they rely on pcb so they

41
00:01:26,479 --> 00:01:30,640
remain too expensive to be used in

42
00:01:28,400 --> 00:01:32,479
practice

43
00:01:30,640 --> 00:01:36,079
a breakthrough result in this area was

44
00:01:32,479 --> 00:01:37,439
provided by the work of ggpr

45
00:01:36,079 --> 00:01:40,798
the scheme supports proving the

46
00:01:37,439 --> 00:01:42,639
satisfiability of arbitrary circuits

47
00:01:40,799 --> 00:01:44,560
more importantly the scheme features

48
00:01:42,640 --> 00:01:47,439
near optimal asymptotics with

49
00:01:44,560 --> 00:01:47,439
good constraints

50
00:01:47,920 --> 00:01:51,840
unfortunately a major problem with the

51
00:01:49,600 --> 00:01:54,000
scheme is that it requires a per circuit

52
00:01:51,840 --> 00:01:57,439
trusted setup

53
00:01:54,000 --> 00:01:59,759
to produce public parameters

54
00:01:57,439 --> 00:02:01,839
the setup is trusted because it requires

55
00:01:59,759 --> 00:02:04,799
a trapdoor that must be kept secret to

56
00:02:01,840 --> 00:02:04,799
ensure soundness

57
00:02:06,320 --> 00:02:10,799
this problem has motivated another class

58
00:02:08,800 --> 00:02:13,599
of works called zk snorts without

59
00:02:10,800 --> 00:02:16,319
trusted setup

60
00:02:13,599 --> 00:02:16,959
there are several schemes in this class

61
00:02:16,319 --> 00:02:18,720
some of them

62
00:02:16,959 --> 00:02:22,720
even achieve better performance than

63
00:02:18,720 --> 00:02:25,040
ggpr derived students

64
00:02:22,720 --> 00:02:26,800
unfortunately these existing schemes can

65
00:02:25,040 --> 00:02:31,040
support arbitrary circuits

66
00:02:26,800 --> 00:02:31,040
or a success verifier but not both

67
00:02:31,920 --> 00:02:36,559
for example hyrax incurs a sub-linear

68
00:02:34,560 --> 00:02:38,640
verification cost but it is restricted

69
00:02:36,560 --> 00:02:40,879
to data parallel circuits in a layered

70
00:02:38,640 --> 00:02:40,879
form

71
00:02:41,280 --> 00:02:45,360
similarly stark supports a succinct

72
00:02:43,280 --> 00:02:48,480
verifier but it requires a sequence of

73
00:02:45,360 --> 00:02:50,560
repeated sub-circuits

74
00:02:48,480 --> 00:02:52,720
on the other side ligero bulletproofs

75
00:02:50,560 --> 00:02:54,160
and aurora target arbitrary circuits but

76
00:02:52,720 --> 00:02:56,480
the verifier incurs

77
00:02:54,160 --> 00:02:58,959
cars that are linear in the size of the

78
00:02:56,480 --> 00:02:58,959
statement

79
00:02:59,440 --> 00:03:03,519
in contrast our works pattern can

80
00:03:01,640 --> 00:03:04,079
simultaneously support arbitrary

81
00:03:03,519 --> 00:03:07,360
circuits

82
00:03:04,080 --> 00:03:07,360
and a succinct verifier

83
00:03:09,200 --> 00:03:12,799
this is actually very challenging

84
00:03:10,720 --> 00:03:16,640
because arbitrary circuits by definition

85
00:03:12,800 --> 00:03:18,080
have no structure also the verifier must

86
00:03:16,640 --> 00:03:21,119
know the statement that it's very

87
00:03:18,080 --> 00:03:22,879
fine what this means is that

88
00:03:21,120 --> 00:03:26,480
verification cost must be at least

89
00:03:22,879 --> 00:03:26,480
linear in the size of the statement

90
00:03:27,040 --> 00:03:30,319
spartan avoids this problem by

91
00:03:28,640 --> 00:03:33,599
pre-processing circuits without

92
00:03:30,319 --> 00:03:35,760
employing secret trapdoors

93
00:03:33,599 --> 00:03:37,440
in particular the verifier retains a

94
00:03:35,760 --> 00:03:39,120
short cryptographic commitment to the

95
00:03:37,440 --> 00:03:42,239
statement which we refer to as a

96
00:03:39,120 --> 00:03:42,239
computation commitment

97
00:03:42,959 --> 00:03:46,959
creating computation commit takes time

98
00:03:45,040 --> 00:03:49,440
linear in the size of the statement but

99
00:03:46,959 --> 00:03:51,440
it's amortized

100
00:03:49,440 --> 00:03:54,640
this amortization is similar to that of

101
00:03:51,440 --> 00:03:54,640
ggpr 13.

102
00:03:56,000 --> 00:04:00,640
in more detail spartan is a new family

103
00:03:58,799 --> 00:04:01,680
of ck snarks that supports arbitrary

104
00:04:00,640 --> 00:04:03,439
circuits

105
00:04:01,680 --> 00:04:04,959
specifically the support are the rank

106
00:04:03,439 --> 00:04:06,400
one constraint satisfied b which

107
00:04:04,959 --> 00:04:09,200
generalizes arithmetic circuit

108
00:04:06,400 --> 00:04:11,360
satisfiability

109
00:04:09,200 --> 00:04:13,200
spartan includes a new recipe for

110
00:04:11,360 --> 00:04:15,120
constructing zk snarks

111
00:04:13,200 --> 00:04:16,320
which combines the subject protocol with

112
00:04:15,120 --> 00:04:19,759
polynomial commitments

113
00:04:16,320 --> 00:04:19,759
and computation commitments

114
00:04:20,079 --> 00:04:24,960
by using this recipe we design four zk

115
00:04:22,400 --> 00:04:26,080
snarks

116
00:04:24,960 --> 00:04:27,520
these schemes are not only

117
00:04:26,080 --> 00:04:30,639
asymptotically efficient but they are

118
00:04:27,520 --> 00:04:32,479
also concretely efficient

119
00:04:30,639 --> 00:04:34,720
we implement a member of this family in

120
00:04:32,479 --> 00:04:36,719
about 8 000 lines of rust

121
00:04:34,720 --> 00:04:38,560
and compare it with five prior z case

122
00:04:36,720 --> 00:04:40,479
nuts

123
00:04:38,560 --> 00:04:43,360
we find that spartan offers the fastest

124
00:04:40,479 --> 00:04:45,440
brewer and verifier

125
00:04:43,360 --> 00:04:47,120
its proofs are shortest except when

126
00:04:45,440 --> 00:04:49,040
compared to bulletproofs

127
00:04:47,120 --> 00:04:51,040
but bulletproofs incur slower

128
00:04:49,040 --> 00:04:53,680
verification both asymptotically and

129
00:04:51,040 --> 00:04:53,680
concretely

130
00:04:54,720 --> 00:04:58,560
spartan also unifies different strands

131
00:04:56,800 --> 00:05:00,560
of theory from the perspective of zika

132
00:04:58,560 --> 00:05:02,160
snarks

133
00:05:00,560 --> 00:05:04,960
for example with the work of kilian and

134
00:05:02,160 --> 00:05:05,840
macaulay we can combine short pcps of

135
00:05:04,960 --> 00:05:08,799
pfls

136
00:05:05,840 --> 00:05:10,719
with miracle trees to obtain zika snarks

137
00:05:08,800 --> 00:05:11,919
but these zika snarks are not concretely

138
00:05:10,720 --> 00:05:13,759
efficient

139
00:05:11,919 --> 00:05:17,520
they also achieve sublinear verification

140
00:05:13,759 --> 00:05:17,520
costs only for uniform circuits

141
00:05:17,600 --> 00:05:21,840
spartan can be seen as a way to compile

142
00:05:19,840 --> 00:05:23,039
these short pcps to zk snarks by

143
00:05:21,840 --> 00:05:25,520
employing more

144
00:05:23,039 --> 00:05:27,120
more powerful cryptographic machinery

145
00:05:25,520 --> 00:05:30,320
namely polynomial commitments and

146
00:05:27,120 --> 00:05:32,479
computational commitments

147
00:05:30,320 --> 00:05:34,240
the resulting snarks are both concretely

148
00:05:32,479 --> 00:05:36,719
efficient and can support arbitrary

149
00:05:34,240 --> 00:05:36,720
circuits

150
00:05:37,680 --> 00:05:42,320
similarly spartan can also be seen as a

151
00:05:39,600 --> 00:05:44,240
way to compile two prover mips to zk

152
00:05:42,320 --> 00:05:46,320
snarks

153
00:05:44,240 --> 00:05:48,240
prior compilers to achieve this usefully

154
00:05:46,320 --> 00:05:49,919
homomorphic encryption

155
00:05:48,240 --> 00:05:51,440
so the resulting snarks are concretely

156
00:05:49,919 --> 00:05:54,479
inefficient and they only produce

157
00:05:51,440 --> 00:05:56,560
designated verifier proofs

158
00:05:54,479 --> 00:05:57,919
but spartan produces publicly verifiable

159
00:05:56,560 --> 00:06:00,479
proofs that are also completely

160
00:05:57,919 --> 00:06:00,479
efficient

161
00:06:01,440 --> 00:06:05,360
finally spartan can also be seen as a

162
00:06:03,520 --> 00:06:08,799
way to compile the doubly efficient

163
00:06:05,360 --> 00:06:11,199
interactive proofs of gkr

164
00:06:08,800 --> 00:06:13,919
prior compilers result in zika snarks

165
00:06:11,199 --> 00:06:15,759
for low depth uniform circuits

166
00:06:13,919 --> 00:06:17,919
whereas part and produces zika snarks

167
00:06:15,759 --> 00:06:21,840
for arbitrary circuits without any depth

168
00:06:17,919 --> 00:06:21,840
or structure limitations

169
00:06:22,560 --> 00:06:26,000
the rest of this talk is in two parts

170
00:06:24,479 --> 00:06:26,960
first i'll provide an overview of

171
00:06:26,000 --> 00:06:28,560
spartan

172
00:06:26,960 --> 00:06:31,039
and then i'll describe some experimental

173
00:06:28,560 --> 00:06:31,039
results

174
00:06:32,400 --> 00:06:35,599
spartans foundation is the sum check

175
00:06:34,160 --> 00:06:37,919
protocol which is a seminal

176
00:06:35,600 --> 00:06:39,680
interactive proof protocol for it's a

177
00:06:37,919 --> 00:06:41,840
proof system for proving statements of

178
00:06:39,680 --> 00:06:44,160
the form depicted on the slide

179
00:06:41,840 --> 00:06:47,039
where g is a multivariate polynomial or

180
00:06:44,160 --> 00:06:48,800
a finite field

181
00:06:47,039 --> 00:06:50,080
this proof system does not require a

182
00:06:48,800 --> 00:06:51,840
trusted setup

183
00:06:50,080 --> 00:06:55,840
it can also be made zero knowledge and

184
00:06:51,840 --> 00:06:55,840
non-interactive using existing compilers

185
00:06:56,080 --> 00:07:00,840
unfortunately it does not lead to a zk

186
00:06:58,080 --> 00:07:03,120
snark without trusted setup for two

187
00:07:00,840 --> 00:07:05,280
reasons first we need an efficient

188
00:07:03,120 --> 00:07:07,759
reduction from r1cs instances to some

189
00:07:05,280 --> 00:07:09,679
check instances

190
00:07:07,759 --> 00:07:11,120
second the proof system is not success

191
00:07:09,680 --> 00:07:14,319
both in terms of proof sizes

192
00:07:11,120 --> 00:07:16,479
and verification times

193
00:07:14,319 --> 00:07:18,160
the primary reason is that the verifier

194
00:07:16,479 --> 00:07:20,240
must evaluate this multivariate

195
00:07:18,160 --> 00:07:22,560
polynomial g at a random point in its

196
00:07:20,240 --> 00:07:22,560
domain

197
00:07:23,280 --> 00:07:26,559
and now explain how spartan addresses

198
00:07:25,360 --> 00:07:31,840
these two problems

199
00:07:26,560 --> 00:07:31,840
but first let's recall what r1cs is

200
00:07:32,000 --> 00:07:36,639
given three public matrices or a finite

201
00:07:34,160 --> 00:07:38,880
field does there exist a secret fitness

202
00:07:36,639 --> 00:07:41,039
a z such that the equation on the slide

203
00:07:38,880 --> 00:07:42,719
holds

204
00:07:41,039 --> 00:07:44,240
this is an np complete problem that

205
00:07:42,720 --> 00:07:46,000
generalizes arithmetic circuit

206
00:07:44,240 --> 00:07:47,919
satisfiability

207
00:07:46,000 --> 00:07:50,400
this problem is implicit in the work of

208
00:07:47,919 --> 00:07:52,159
ggpr but is made explicit in subsequent

209
00:07:50,400 --> 00:07:54,159
works

210
00:07:52,160 --> 00:07:56,000
we are interested in r1cs because there

211
00:07:54,160 --> 00:07:57,680
exist many compiler tool change from

212
00:07:56,000 --> 00:08:00,479
high level programs of interest

213
00:07:57,680 --> 00:08:00,479
r1cs

214
00:08:02,800 --> 00:08:07,759
to encode r1cs instances as some check

215
00:08:05,120 --> 00:08:11,440
instances we can view the three matrices

216
00:08:07,759 --> 00:08:11,440
and the witness as functions

217
00:08:11,520 --> 00:08:16,639
here s is log m where m is the dimension

218
00:08:14,000 --> 00:08:18,560
of the matrix

219
00:08:16,639 --> 00:08:20,400
in the paper we show that an r1cs

220
00:08:18,560 --> 00:08:22,479
instance is satisfiable

221
00:08:20,400 --> 00:08:26,000
if and only if the depicted sum on the

222
00:08:22,479 --> 00:08:28,000
slide sums to zero

223
00:08:26,000 --> 00:08:30,000
here eq is a special multi-linear

224
00:08:28,000 --> 00:08:32,479
polynomial that evaluates to one if and

225
00:08:30,000 --> 00:08:35,919
only if the two arguments are equal

226
00:08:32,479 --> 00:08:35,919
otherwise it evaluates to zero

227
00:08:36,640 --> 00:08:40,640
also f is another polynomial depicted on

228
00:08:39,360 --> 00:08:43,039
the slide

229
00:08:40,640 --> 00:08:43,760
where a tilde is the unique multi-linear

230
00:08:43,039 --> 00:08:47,199
extension of

231
00:08:43,760 --> 00:08:49,200
a what this means is that a tilde is a

232
00:08:47,200 --> 00:08:49,440
multi-linear polynomial that agrees with

233
00:08:49,200 --> 00:08:55,279
a

234
00:08:49,440 --> 00:08:58,000
over a boolean hypercube

235
00:08:55,279 --> 00:08:59,680
to recap there were two problems with

236
00:08:58,000 --> 00:09:01,279
using the sum check protocol to build z

237
00:08:59,680 --> 00:09:02,640
case nuts

238
00:09:01,279 --> 00:09:04,320
we just described the solution to the

239
00:09:02,640 --> 00:09:06,160
first problem and the paper has more

240
00:09:04,320 --> 00:09:10,320
details on how to apply the subject

241
00:09:06,160 --> 00:09:10,319
protocol to this specific polynomial

242
00:09:10,959 --> 00:09:15,040
the second problem is that the protocol

243
00:09:12,800 --> 00:09:16,959
is not succinct

244
00:09:15,040 --> 00:09:20,719
this is because the verifier has to

245
00:09:16,959 --> 00:09:22,800
evaluate four multilinear polynomials

246
00:09:20,720 --> 00:09:23,760
of these four one of them depends on the

247
00:09:22,800 --> 00:09:25,680
proverbs witness

248
00:09:23,760 --> 00:09:28,240
and the other three depend only on the

249
00:09:25,680 --> 00:09:28,239
statement

250
00:09:30,480 --> 00:09:34,080
at a high level our solution is to

251
00:09:32,320 --> 00:09:36,560
employ an extractable polynomial

252
00:09:34,080 --> 00:09:38,640
commitment scheme

253
00:09:36,560 --> 00:09:42,079
in particular the prover commits to its

254
00:09:38,640 --> 00:09:44,160
witness before the sum check protocol

255
00:09:42,080 --> 00:09:45,760
we then run the subject protocol at the

256
00:09:44,160 --> 00:09:50,160
end of the subject the prover

257
00:09:45,760 --> 00:09:52,160
sends an evaluation along with the proof

258
00:09:50,160 --> 00:09:53,680
the verifier checks the proof against

259
00:09:52,160 --> 00:09:57,839
the commitment and then uses the

260
00:09:53,680 --> 00:09:57,839
supplied evaluation to evaluate g

261
00:10:00,160 --> 00:10:03,600
there are many suitable polynomial

262
00:10:01,920 --> 00:10:05,199
commitments in literature

263
00:10:03,600 --> 00:10:06,959
but the primary takeaway here is that

264
00:10:05,200 --> 00:10:09,120
the size of the evaluation proof

265
00:10:06,959 --> 00:10:11,439
and the cost to verify the proof are sub

266
00:10:09,120 --> 00:10:13,360
linear in the size of the witness

267
00:10:11,440 --> 00:10:18,399
which itself is sublinear in the size of

268
00:10:13,360 --> 00:10:20,320
the statement

269
00:10:18,399 --> 00:10:21,920
similarly for other three polynomials we

270
00:10:20,320 --> 00:10:23,279
can employ a polynomial commitment

271
00:10:21,920 --> 00:10:25,680
scheme

272
00:10:23,279 --> 00:10:28,079
since these depend only on the r1cs

273
00:10:25,680 --> 00:10:30,079
matrices in a pre-processing phase

274
00:10:28,079 --> 00:10:32,560
the verifier computes commitments to the

275
00:10:30,079 --> 00:10:34,079
three matrices

276
00:10:32,560 --> 00:10:36,479
we refer to this commitment as a

277
00:10:34,079 --> 00:10:38,319
computational commitment

278
00:10:36,480 --> 00:10:40,000
as in the previous slide the prover

279
00:10:38,320 --> 00:10:42,160
commits to its witness before the

280
00:10:40,000 --> 00:10:44,959
subject protocol begins

281
00:10:42,160 --> 00:10:47,040
we then run the subject protocol at the

282
00:10:44,959 --> 00:10:50,640
end of the sum check the prover sends

283
00:10:47,040 --> 00:10:52,719
four evaluations along with four proofs

284
00:10:50,640 --> 00:10:55,120
the verifier checks all the four proofs

285
00:10:52,720 --> 00:10:57,360
against the corresponding commitments

286
00:10:55,120 --> 00:11:01,839
and then uses these four evaluations to

287
00:10:57,360 --> 00:11:01,839
evaluate g at a random point

288
00:11:02,640 --> 00:11:05,839
unfortunately this does not completely

289
00:11:04,640 --> 00:11:08,000
solve the problem

290
00:11:05,839 --> 00:11:11,360
because in our context the three r1 cs

291
00:11:08,000 --> 00:11:12,800
matrices are sparse

292
00:11:11,360 --> 00:11:14,720
in fact in practice the number of

293
00:11:12,800 --> 00:11:17,199
non-zero entries in this matrices

294
00:11:14,720 --> 00:11:18,399
is linear in the number of rows but the

295
00:11:17,200 --> 00:11:20,320
total number of entries in these

296
00:11:18,399 --> 00:11:22,399
matrices is quadratic in the number of

297
00:11:20,320 --> 00:11:24,160
rows

298
00:11:22,399 --> 00:11:26,000
so if we apply existing polynomial

299
00:11:24,160 --> 00:11:26,640
commitment schemes the cost of creating

300
00:11:26,000 --> 00:11:28,880
commitments

301
00:11:26,640 --> 00:11:32,480
and producing evaluation proofs is could

302
00:11:28,880 --> 00:11:34,480
radical in the size of the statement

303
00:11:32,480 --> 00:11:37,279
so in theory this is efficient but in

304
00:11:34,480 --> 00:11:37,279
practice it's not

305
00:11:40,320 --> 00:11:44,800
our solution to this problem is called

306
00:11:41,920 --> 00:11:46,560
spark it's a cryptographic compiler that

307
00:11:44,800 --> 00:11:48,079
transforms existing polynomial

308
00:11:46,560 --> 00:11:50,560
commitment schemes for multi-leaf

309
00:11:48,079 --> 00:11:51,839
polynomials the ones that handle

310
00:11:50,560 --> 00:11:55,680
transparence polynomials

311
00:11:51,839 --> 00:11:56,000
efficiently at a high level there are

312
00:11:55,680 --> 00:11:59,040
two

313
00:11:56,000 --> 00:12:01,040
key ideas in spark first we create

314
00:11:59,040 --> 00:12:03,439
commitments to dense representations of

315
00:12:01,040 --> 00:12:05,519
sparse polynomials

316
00:12:03,440 --> 00:12:08,720
specifically each sparse polynomial is

317
00:12:05,519 --> 00:12:10,959
encoded with three dense polynomials

318
00:12:08,720 --> 00:12:12,800
each dense polynomial is of size equal

319
00:12:10,959 --> 00:12:14,319
to the number of uh

320
00:12:12,800 --> 00:12:16,160
non-zero entries in the sparse

321
00:12:14,320 --> 00:12:18,079
polynomial

322
00:12:16,160 --> 00:12:20,560
which itself is linear in the matrix

323
00:12:18,079 --> 00:12:20,560
dimension

324
00:12:20,880 --> 00:12:24,880
in this example we have three non-zero

325
00:12:22,959 --> 00:12:26,399
entries in the sparse polynomial

326
00:12:24,880 --> 00:12:29,760
so in the des representation each

327
00:12:26,399 --> 00:12:32,320
polynomial is of size three

328
00:12:29,760 --> 00:12:34,240
the row and call polynomials contain

329
00:12:32,320 --> 00:12:35,120
indices where the non-zero entries are

330
00:12:34,240 --> 00:12:36,880
present

331
00:12:35,120 --> 00:12:40,240
and the val polynomial contains the

332
00:12:36,880 --> 00:12:40,240
corresponding non-zero value

333
00:12:42,480 --> 00:12:46,079
our second idea in spa is in two

334
00:12:44,560 --> 00:12:48,479
subparts

335
00:12:46,079 --> 00:12:49,199
first we design a linear size uniform

336
00:12:48,480 --> 00:12:52,160
circuit for

337
00:12:49,200 --> 00:12:53,920
evaluating sparse polynomials this

338
00:12:52,160 --> 00:12:56,800
circuit relies on offline memory

339
00:12:53,920 --> 00:12:56,800
checking techniques

340
00:12:57,440 --> 00:13:01,040
second we employ a tailored z case not

341
00:12:59,440 --> 00:13:06,160
to prove the satisfiability of this

342
00:13:01,040 --> 00:13:09,199
linear size circuit

343
00:13:06,160 --> 00:13:10,560
so to summarize uh spartan uh introduces

344
00:13:09,200 --> 00:13:12,639
a new technique to reduce

345
00:13:10,560 --> 00:13:14,638
uh r1cs instances to some check

346
00:13:12,639 --> 00:13:17,040
instances

347
00:13:14,639 --> 00:13:18,720
we then uh employ the subject protocol

348
00:13:17,040 --> 00:13:20,399
in conjunction with polynomial

349
00:13:18,720 --> 00:13:23,279
commitments to get an interactive

350
00:13:20,399 --> 00:13:25,200
argument of knowledge

351
00:13:23,279 --> 00:13:27,360
by using existing compilers we can

352
00:13:25,200 --> 00:13:27,920
transform the interactive argument to a

353
00:13:27,360 --> 00:13:29,920
music

354
00:13:27,920 --> 00:13:31,599
which incurs linear time verification

355
00:13:29,920 --> 00:13:33,360
cost

356
00:13:31,600 --> 00:13:35,200
we then combine such physics with

357
00:13:33,360 --> 00:13:37,839
computation commitments to get zika

358
00:13:35,200 --> 00:13:39,760
snarks for r1cs

359
00:13:37,839 --> 00:13:41,519
but computational commitments rely on

360
00:13:39,760 --> 00:13:43,600
polynomial commitments for sparse

361
00:13:41,519 --> 00:13:45,920
polynomials

362
00:13:43,600 --> 00:13:47,680
so we design a compiler to transform

363
00:13:45,920 --> 00:13:49,360
existing polynomial commitments

364
00:13:47,680 --> 00:13:52,638
schemes to ones that handle sparse

365
00:13:49,360 --> 00:13:52,639
polynomials efficiently

366
00:13:54,079 --> 00:13:58,880
in the next part of the talk i will

367
00:13:55,199 --> 00:13:58,880
describe some experimental results

368
00:13:59,040 --> 00:14:02,480
we implemented a member of the spartan

369
00:14:01,199 --> 00:14:05,519
family which is secure

370
00:14:02,480 --> 00:14:07,839
under the discrete log assumption

371
00:14:05,519 --> 00:14:09,360
this took about 8 000 lines of frost the

372
00:14:07,839 --> 00:14:11,920
code is open source and it's available

373
00:14:09,360 --> 00:14:13,760
from github

374
00:14:11,920 --> 00:14:16,560
in our experimental evaluation we focus

375
00:14:13,760 --> 00:14:18,240
on three evaluation metrics

376
00:14:16,560 --> 00:14:20,399
we run our experiments on a microsoft

377
00:14:18,240 --> 00:14:22,160
surface laptop three with 16 gigabytes

378
00:14:20,399 --> 00:14:25,120
of ram

379
00:14:22,160 --> 00:14:26,880
as base lines we use five schemes graph

380
00:14:25,120 --> 00:14:30,959
16 is the state-of-the-art z case not

381
00:14:26,880 --> 00:14:33,680
with trusted setup based on gpr

382
00:14:30,959 --> 00:14:35,439
ligero aurora and hyrax do not require a

383
00:14:33,680 --> 00:14:37,040
trusted setup but they incur linear time

384
00:14:35,440 --> 00:14:38,480
verification costs for arbitrary

385
00:14:37,040 --> 00:14:40,319
circuits

386
00:14:38,480 --> 00:14:42,000
finally fractal is a recent zika stock

387
00:14:40,320 --> 00:14:43,600
that achieves sub-linear verification

388
00:14:42,000 --> 00:14:46,720
costs for arbitrary circuits using

389
00:14:43,600 --> 00:14:46,720
computational commitments

390
00:14:47,920 --> 00:14:52,959
here is a graph that depicts the provers

391
00:14:50,000 --> 00:14:54,720
cause for spartan and its baselines

392
00:14:52,959 --> 00:14:58,000
for spartan we depict two variants the

393
00:14:54,720 --> 00:14:59,920
nasik variant and the snark variant the

394
00:14:58,000 --> 00:15:01,600
key takeaway here is that spartan offers

395
00:14:59,920 --> 00:15:02,800
the fastest prover with speedups varying

396
00:15:01,600 --> 00:15:06,000
from a factor of two to

397
00:15:02,800 --> 00:15:06,000
two orders of magnitude

398
00:15:06,639 --> 00:15:13,440
here's another graph that depicts proof

399
00:15:08,320 --> 00:15:15,279
sizes and a spartan and its baselines

400
00:15:13,440 --> 00:15:16,800
the key takeaway here is that spartan

401
00:15:15,279 --> 00:15:20,079
offers smallest proofs except when

402
00:15:16,800 --> 00:15:20,079
compared to garage 16.

403
00:15:21,760 --> 00:15:26,319
here is another graph that depicts the

404
00:15:23,600 --> 00:15:29,440
verifiers cause cross

405
00:15:26,320 --> 00:15:31,440
under spartan and its base lines

406
00:15:29,440 --> 00:15:33,600
as with proof size spartans very far is

407
00:15:31,440 --> 00:15:36,160
faster than all its baselines except for

408
00:15:33,600 --> 00:15:38,560
graph 16.

409
00:15:36,160 --> 00:15:40,399
another takeaway here is that's part of

410
00:15:38,560 --> 00:15:42,479
this is that's not variant of smart and

411
00:15:40,399 --> 00:15:45,920
beats the music variant at about

412
00:15:42,480 --> 00:15:45,920
2017 constraints

413
00:15:48,160 --> 00:15:52,959
to summarize spartan is a new family of

414
00:15:50,320 --> 00:15:54,720
ck snarks without trusted setup

415
00:15:52,959 --> 00:15:56,719
it is the first zk-snap to achieve

416
00:15:54,720 --> 00:15:58,560
sub-linear verification costs for

417
00:15:56,720 --> 00:16:00,240
arbitrary circuits without requiring a

418
00:15:58,560 --> 00:16:04,239
trusted setup

419
00:16:00,240 --> 00:16:04,240
it also features a linear time cooler

420
00:16:04,959 --> 00:16:08,399
spartan introduces new techniques to

421
00:16:06,800 --> 00:16:10,079
achieve these results

422
00:16:08,399 --> 00:16:11,839
finally from our concrete implementation

423
00:16:10,079 --> 00:16:18,880
we find that pattern offers excellent

424
00:16:11,839 --> 00:16:18,880
performance and proof sizes

