1
00:00:01,040 --> 00:00:05,040
hello everyone welcome to my crypto 2020

2
00:00:03,840 --> 00:00:08,480
virtual talk

3
00:00:05,040 --> 00:00:09,440
i hope everyone is safe so in this talk

4
00:00:08,480 --> 00:00:12,200
i will present

5
00:00:09,440 --> 00:00:14,160
universally composable relaxed password

6
00:00:12,200 --> 00:00:16,400
authenticate exchange

7
00:00:14,160 --> 00:00:17,359
and this is short work with michelle

8
00:00:16,400 --> 00:00:20,640
abdullah

9
00:00:17,359 --> 00:00:21,920
manuel babosa tatiana bradley sunny

10
00:00:20,640 --> 00:00:24,800
suave yarosky

11
00:00:21,920 --> 00:00:26,000
and jonathan cass and we also have two

12
00:00:24,800 --> 00:00:28,720
guest stars here

13
00:00:26,000 --> 00:00:29,759
so this is ida loveless and this is

14
00:00:28,720 --> 00:00:32,320
charles fabric

15
00:00:29,760 --> 00:00:34,480
replacing allison ball so these were

16
00:00:32,320 --> 00:00:36,640
joined by my co-author tatiana and

17
00:00:34,480 --> 00:00:39,199
tatiana also contributed a lot to the

18
00:00:36,640 --> 00:00:41,680
slides in general

19
00:00:39,200 --> 00:00:43,840
okay so let me first introduce the

20
00:00:41,680 --> 00:00:45,039
concept of password authenticated key

21
00:00:43,840 --> 00:00:47,600
exchange or paid

22
00:00:45,039 --> 00:00:49,520
so this is a two-party protocol and the

23
00:00:47,600 --> 00:00:50,879
goal is to establish a shared

24
00:00:49,520 --> 00:00:52,879
cryptographic key

25
00:00:50,879 --> 00:00:54,559
in the server password-only setting

26
00:00:52,879 --> 00:00:56,960
which means that the only information

27
00:00:54,559 --> 00:00:59,919
shared by the two-party scenarios

28
00:00:56,960 --> 00:01:00,960
is a low entropy password so as you can

29
00:00:59,920 --> 00:01:05,600
see here

30
00:01:00,960 --> 00:01:08,000
either inputs a password her password pw

31
00:01:05,600 --> 00:01:09,199
and channels enters his password p

32
00:01:08,000 --> 00:01:12,080
double prime

33
00:01:09,200 --> 00:01:13,680
and at the end of the interaction if

34
00:01:12,080 --> 00:01:15,920
their passwords mesh

35
00:01:13,680 --> 00:01:18,000
then they will output the same key and

36
00:01:15,920 --> 00:01:19,119
otherwise if their passwords don't match

37
00:01:18,000 --> 00:01:22,000
then they will output

38
00:01:19,119 --> 00:01:22,000
independent keys

39
00:01:22,240 --> 00:01:27,439
so here's a very brief overview of

40
00:01:24,960 --> 00:01:30,720
previous constructions of take protocols

41
00:01:27,439 --> 00:01:32,960
so there have been two major paradigms

42
00:01:30,720 --> 00:01:34,798
the first one is to take the fulfillment

43
00:01:32,960 --> 00:01:36,880
key exchange and then you somehow

44
00:01:34,799 --> 00:01:38,320
blind the protocol messages using the

45
00:01:36,880 --> 00:01:40,640
password

46
00:01:38,320 --> 00:01:41,679
and this line of research started from

47
00:01:40,640 --> 00:01:45,040
the groundwater

48
00:01:41,680 --> 00:01:48,880
work by battling at merit in

49
00:01:45,040 --> 00:01:52,079
1992 called encrypted tea exchange

50
00:01:48,880 --> 00:01:55,039
or eke and since then there has

51
00:01:52,079 --> 00:01:56,639
there have been many subsequent works uh

52
00:01:55,040 --> 00:01:59,200
in this paradigm

53
00:01:56,640 --> 00:02:00,240
and the most efficient tech protocols

54
00:01:59,200 --> 00:02:02,799
fall into this

55
00:02:00,240 --> 00:02:03,520
category but on the other hand they

56
00:02:02,799 --> 00:02:05,759
require

57
00:02:03,520 --> 00:02:06,960
their security analysis requires an

58
00:02:05,759 --> 00:02:10,639
idealized model

59
00:02:06,960 --> 00:02:13,680
such as the random oracle model

60
00:02:10,639 --> 00:02:14,879
and another another paradigm is to use

61
00:02:13,680 --> 00:02:17,840
encryption plus

62
00:02:14,879 --> 00:02:19,920
most projective hash function and this

63
00:02:17,840 --> 00:02:23,200
usually allows the pipe protocol to be

64
00:02:19,920 --> 00:02:24,958
proven secure in the standard model so

65
00:02:23,200 --> 00:02:27,440
you usually still need a common

66
00:02:24,959 --> 00:02:29,200
reference string but no random oracle is

67
00:02:27,440 --> 00:02:31,519
needed

68
00:02:29,200 --> 00:02:34,319
but the cost is that they are usually

69
00:02:31,519 --> 00:02:34,319
less efficient

70
00:02:34,800 --> 00:02:41,040
for for a very long time there has been

71
00:02:38,160 --> 00:02:43,200
really no adoption of pike in practice

72
00:02:41,040 --> 00:02:44,000
but very recently from last year to this

73
00:02:43,200 --> 00:02:47,200
year

74
00:02:44,000 --> 00:02:49,599
the ietf the inter internet in

75
00:02:47,200 --> 00:02:50,799
engineering task force has two

76
00:02:49,599 --> 00:02:54,079
competitions

77
00:02:50,800 --> 00:02:57,040
on page one on pike and one on

78
00:02:54,080 --> 00:02:57,920
an extension called asymmetric pegs and

79
00:02:57,040 --> 00:03:01,280
this sparked

80
00:02:57,920 --> 00:03:03,599
much interest in the in the practical

81
00:03:01,280 --> 00:03:07,200
aspects of pig

82
00:03:03,599 --> 00:03:10,238
perhaps we will see paid implementations

83
00:03:07,200 --> 00:03:15,280
used in in the in real life

84
00:03:10,239 --> 00:03:15,280
say on the internet in in some years

85
00:03:16,560 --> 00:03:19,680
this work is about the security models

86
00:03:18,720 --> 00:03:22,480
of fake

87
00:03:19,680 --> 00:03:24,080
so again for pike security models there

88
00:03:22,480 --> 00:03:26,720
are also two prominent

89
00:03:24,080 --> 00:03:28,080
paradigms one is the game-based model

90
00:03:26,720 --> 00:03:31,280
and the other is the

91
00:03:28,080 --> 00:03:32,959
universally composable or uc model so

92
00:03:31,280 --> 00:03:35,040
you'll see as long as i'm getting based

93
00:03:32,959 --> 00:03:38,239
in general because uc allows for

94
00:03:35,040 --> 00:03:40,480
arbitrary protocol composition but

95
00:03:38,239 --> 00:03:42,480
in particular for pike you'll see also

96
00:03:40,480 --> 00:03:45,200
has some additional advantages

97
00:03:42,480 --> 00:03:46,959
such as modeling password reuse which

98
00:03:45,200 --> 00:03:49,679
means that

99
00:03:46,959 --> 00:03:51,440
a user can use the same password for

100
00:03:49,680 --> 00:03:54,080
multiple accounts

101
00:03:51,440 --> 00:03:55,920
and this is simply not covered by the

102
00:03:54,080 --> 00:03:58,560
game-based definition

103
00:03:55,920 --> 00:03:59,040
so for these reasons uc has been built

104
00:03:58,560 --> 00:04:02,959
as a

105
00:03:59,040 --> 00:04:06,480
gold standard for pike security analysis

106
00:04:02,959 --> 00:04:08,640
and indeed since uc allows for arbitrary

107
00:04:06,480 --> 00:04:10,798
protocol composition

108
00:04:08,640 --> 00:04:12,159
there are some previous results showing

109
00:04:10,799 --> 00:04:14,560
that a uc pipe

110
00:04:12,159 --> 00:04:15,359
can be composed to get some extensions

111
00:04:14,560 --> 00:04:18,320
such as

112
00:04:15,360 --> 00:04:19,120
a symmetric plate and an even stronger

113
00:04:18,320 --> 00:04:22,400
variant called

114
00:04:19,120 --> 00:04:22,400
strong asymmetric plate

115
00:04:23,919 --> 00:04:27,120
unfortunately the most efficient pipe

116
00:04:25,919 --> 00:04:29,198
particles

117
00:04:27,120 --> 00:04:30,639
are proven secure in the playing base

118
00:04:29,199 --> 00:04:32,960
setting only

119
00:04:30,639 --> 00:04:33,840
and not in the uc setting but on the

120
00:04:32,960 --> 00:04:37,919
other hand

121
00:04:33,840 --> 00:04:41,039
there has also been no explicit attack

122
00:04:37,919 --> 00:04:44,240
shown for any of them

123
00:04:41,040 --> 00:04:45,360
so a very natural question is is there

124
00:04:44,240 --> 00:04:47,840
really a gap

125
00:04:45,360 --> 00:04:50,160
between these efficient plate protocols

126
00:04:47,840 --> 00:04:52,080
and the ucpa model

127
00:04:50,160 --> 00:04:54,080
and this is this is it needs a

128
00:04:52,080 --> 00:04:59,120
motivation of our work

129
00:04:54,080 --> 00:05:01,359
and our work is exactly to fill this gap

130
00:04:59,120 --> 00:05:03,280
so we propose two relaxations of the

131
00:05:01,360 --> 00:05:07,199
standard peg functionality

132
00:05:03,280 --> 00:05:09,599
one is called the lazy extraction type

133
00:05:07,199 --> 00:05:10,800
or le peg and this is the main one we

134
00:05:09,600 --> 00:05:12,800
use

135
00:05:10,800 --> 00:05:14,720
and the other is a slightly stronger

136
00:05:12,800 --> 00:05:17,759
variant called relaxed ucp

137
00:05:14,720 --> 00:05:21,360
or rpac and then we show that

138
00:05:17,759 --> 00:05:24,560
all of these aspects to tb peak

139
00:05:21,360 --> 00:05:27,759
speak and see place so all of these

140
00:05:24,560 --> 00:05:30,240
efficient opaque

141
00:05:27,759 --> 00:05:32,479
particles which were proven secure in

142
00:05:30,240 --> 00:05:34,960
the game-based setting only previously

143
00:05:32,479 --> 00:05:36,960
all of these actually realize you'll see

144
00:05:34,960 --> 00:05:38,080
a laser extraction plate in the random

145
00:05:36,960 --> 00:05:42,000
oracle model

146
00:05:38,080 --> 00:05:45,359
so in other words we show that

147
00:05:42,000 --> 00:05:48,000
they are actually uc sql as long as

148
00:05:45,360 --> 00:05:50,639
you are willing to slightly relax the uc

149
00:05:48,000 --> 00:05:53,520
functionality itself

150
00:05:50,639 --> 00:05:54,240
and third we show that standard key

151
00:05:53,520 --> 00:05:57,840
confirmation

152
00:05:54,240 --> 00:06:01,440
converts a laser extraction plate

153
00:05:57,840 --> 00:06:04,159
for the stronger relaxed fake

154
00:06:01,440 --> 00:06:04,719
and finally we also do a sanity check

155
00:06:04,160 --> 00:06:08,000
that

156
00:06:04,720 --> 00:06:11,440
any uc relaxed plate is

157
00:06:08,000 --> 00:06:14,560
game based secure with the so-called

158
00:06:11,440 --> 00:06:17,360
perfect forward secrecy property

159
00:06:14,560 --> 00:06:18,160
so even if the pike functionality is

160
00:06:17,360 --> 00:06:20,400
relaxed

161
00:06:18,160 --> 00:06:22,960
it still implies the basic gain-based

162
00:06:20,400 --> 00:06:22,960
security

163
00:06:23,120 --> 00:06:30,000
so our key observation is as this

164
00:06:26,479 --> 00:06:31,680
um in a in an active attack the standard

165
00:06:30,000 --> 00:06:34,240
use effect functionality

166
00:06:31,680 --> 00:06:36,240
requires the simulator to extract the

167
00:06:34,240 --> 00:06:37,280
password to extract the adversary's

168
00:06:36,240 --> 00:06:40,160
password

169
00:06:37,280 --> 00:06:40,960
before the session completes so that is

170
00:06:40,160 --> 00:06:44,080
before the

171
00:06:40,960 --> 00:06:46,880
attack party outputs a key

172
00:06:44,080 --> 00:06:49,198
so if we take a look at the standard ucp

173
00:06:46,880 --> 00:06:51,280
functionality so here this picture is

174
00:06:49,199 --> 00:06:53,039
directly copied and pasted from the

175
00:06:51,280 --> 00:06:56,239
already original paper

176
00:06:53,039 --> 00:06:58,240
which part which proposed the standard

177
00:06:56,240 --> 00:07:02,160
ucpeg functionality

178
00:06:58,240 --> 00:07:03,599
so as you can see here the test password

179
00:07:02,160 --> 00:07:06,560
query

180
00:07:03,599 --> 00:07:07,520
corresponds to the simulator extracting

181
00:07:06,560 --> 00:07:10,800
the password

182
00:07:07,520 --> 00:07:12,719
the adversary's password and this

183
00:07:10,800 --> 00:07:14,840
query will be ignored by the

184
00:07:12,720 --> 00:07:18,479
functionality

185
00:07:14,840 --> 00:07:21,599
unless the protocol session is

186
00:07:18,479 --> 00:07:23,440
fresh and it is fresh only before the

187
00:07:21,599 --> 00:07:27,919
session completes

188
00:07:23,440 --> 00:07:30,560
so again this sun and oc functionality

189
00:07:27,919 --> 00:07:31,359
requires that the extraction of the

190
00:07:30,560 --> 00:07:35,919
password

191
00:07:31,360 --> 00:07:38,960
must happen before the session completes

192
00:07:35,919 --> 00:07:42,240
so now we can take an example and see

193
00:07:38,960 --> 00:07:44,159
why this aspect tool protocol does not

194
00:07:42,240 --> 00:07:45,280
seem to realize the standard of play

195
00:07:44,160 --> 00:07:47,919
functionality

196
00:07:45,280 --> 00:07:50,159
so this is a one-round protocol and the

197
00:07:47,919 --> 00:07:53,198
only messages sent during a session

198
00:07:50,160 --> 00:07:56,240
are the group elements x and y

199
00:07:53,199 --> 00:07:59,039
and if you if you look at how x and y

200
00:07:56,240 --> 00:08:00,720
are computed there are petersen

201
00:07:59,039 --> 00:08:03,840
commitments

202
00:08:00,720 --> 00:08:07,120
of the password which

203
00:08:03,840 --> 00:08:08,799
means that the password is information

204
00:08:07,120 --> 00:08:11,280
theoretically hidden

205
00:08:08,800 --> 00:08:12,240
and there's simply no hope to extract

206
00:08:11,280 --> 00:08:16,080
the password

207
00:08:12,240 --> 00:08:19,280
during the online session however

208
00:08:16,080 --> 00:08:22,960
after those online messages

209
00:08:19,280 --> 00:08:26,000
access my assigned if the adversary

210
00:08:22,960 --> 00:08:28,239
wants to get say either key then it

211
00:08:26,000 --> 00:08:29,520
needs to make a random oracle query at

212
00:08:28,240 --> 00:08:33,680
the end

213
00:08:29,520 --> 00:08:36,718
which can't be seen by the simulator

214
00:08:33,679 --> 00:08:39,598
so maybe the simulator

215
00:08:36,719 --> 00:08:40,000
can't extract the password after the

216
00:08:39,599 --> 00:08:43,279
online

217
00:08:40,000 --> 00:08:44,800
session completes so to summarize

218
00:08:43,279 --> 00:08:46,959
the simulator cannot extract the

219
00:08:44,800 --> 00:08:49,760
password during an online session

220
00:08:46,959 --> 00:08:51,760
and that is why aspect 2 doesn't seem to

221
00:08:49,760 --> 00:08:54,800
realize the standard uc

222
00:08:51,760 --> 00:08:55,279
functionality but there's still some

223
00:08:54,800 --> 00:08:57,040
hope

224
00:08:55,279 --> 00:08:59,680
that the password can be extracted

225
00:08:57,040 --> 00:08:59,680
afterwards

226
00:08:59,920 --> 00:09:06,560
and indeed this is exactly the idea

227
00:09:04,160 --> 00:09:07,439
of our relaxation of the uc pick

228
00:09:06,560 --> 00:09:10,640
functionality

229
00:09:07,440 --> 00:09:12,480
that is to allow the post execution

230
00:09:10,640 --> 00:09:16,160
password extraction

231
00:09:12,480 --> 00:09:16,880
so even after all protocol messages are

232
00:09:16,160 --> 00:09:19,120
sent

233
00:09:16,880 --> 00:09:20,000
either honest party already computes its

234
00:09:19,120 --> 00:09:22,000
key

235
00:09:20,000 --> 00:09:24,080
the simulator can still extract the

236
00:09:22,000 --> 00:09:25,440
password by observing the adversary's

237
00:09:24,080 --> 00:09:29,200
local computation

238
00:09:25,440 --> 00:09:31,440
such as random oracle queries

239
00:09:29,200 --> 00:09:33,440
and as in the standard ucpeg

240
00:09:31,440 --> 00:09:36,480
functionality we require that

241
00:09:33,440 --> 00:09:37,600
for obsession only a single password can

242
00:09:36,480 --> 00:09:40,000
be tested

243
00:09:37,600 --> 00:09:41,360
but the difference is that the

244
00:09:40,000 --> 00:09:44,880
difference with the startup

245
00:09:41,360 --> 00:09:45,440
functionality is that here the possible

246
00:09:44,880 --> 00:09:47,920
test

247
00:09:45,440 --> 00:09:48,959
can be done either during the session or

248
00:09:47,920 --> 00:09:52,959
after the session

249
00:09:48,959 --> 00:09:56,000
completes and what will happen

250
00:09:52,959 --> 00:09:56,719
in a late password test so we recall

251
00:09:56,000 --> 00:10:00,399
that we have

252
00:09:56,720 --> 00:10:03,040
two relaxations so in this

253
00:10:00,399 --> 00:10:04,560
lazy extraction type functionality the

254
00:10:03,040 --> 00:10:06,959
ideal adversary

255
00:10:04,560 --> 00:10:09,279
there's a certain key which is real if

256
00:10:06,959 --> 00:10:12,399
the late password test is real

257
00:10:09,279 --> 00:10:14,959
so if the late password test is correct

258
00:10:12,399 --> 00:10:15,920
and otherwise it is random in the

259
00:10:14,959 --> 00:10:17,839
stronger

260
00:10:15,920 --> 00:10:19,360
relaxed spike functionality the ideal

261
00:10:17,839 --> 00:10:21,360
adversary only learns

262
00:10:19,360 --> 00:10:22,480
whether the latest password test is

263
00:10:21,360 --> 00:10:24,640
correct or not

264
00:10:22,480 --> 00:10:27,279
as you can see relax like is indeed

265
00:10:24,640 --> 00:10:32,000
stronger because the adversary learns

266
00:10:27,279 --> 00:10:35,040
less information

267
00:10:32,000 --> 00:10:36,959
so here's the details of our relaxations

268
00:10:35,040 --> 00:10:39,920
of the ucpek functionality

269
00:10:36,959 --> 00:10:42,079
so first of all if that virtual wants to

270
00:10:39,920 --> 00:10:43,439
do a late password test then it needs to

271
00:10:42,079 --> 00:10:45,680
register

272
00:10:43,440 --> 00:10:48,240
register the late password test during

273
00:10:45,680 --> 00:10:48,239
the session

274
00:10:48,480 --> 00:10:54,880
and secondly the late test

275
00:10:51,839 --> 00:10:55,680
in a late test password query which

276
00:10:54,880 --> 00:10:58,079
reflects

277
00:10:55,680 --> 00:10:59,279
the post execution password extra

278
00:10:58,079 --> 00:11:03,599
extraction

279
00:10:59,279 --> 00:11:06,800
the ideal adversary may learn a key fear

280
00:11:03,600 --> 00:11:07,519
as in laser extraction pipe or learn a

281
00:11:06,800 --> 00:11:10,079
bit

282
00:11:07,519 --> 00:11:11,279
whether the last password test is

283
00:11:10,079 --> 00:11:15,760
correct or not

284
00:11:11,279 --> 00:11:19,439
as in relax

285
00:11:15,760 --> 00:11:22,640
so now we can look a little bit closer

286
00:11:19,440 --> 00:11:23,519
on how exactly the simulator can extract

287
00:11:22,640 --> 00:11:26,800
the password

288
00:11:23,519 --> 00:11:27,519
post execution in say aspect tool so we

289
00:11:26,800 --> 00:11:30,240
prove that

290
00:11:27,519 --> 00:11:32,079
aspect 2 you'll see realizes the laser

291
00:11:30,240 --> 00:11:33,440
extraction pack functionality in the

292
00:11:32,079 --> 00:11:37,040
random oracle model

293
00:11:33,440 --> 00:11:40,839
under the gap development assumption and

294
00:11:37,040 --> 00:11:42,000
we stress that the reduction here is

295
00:11:40,839 --> 00:11:45,519
tight

296
00:11:42,000 --> 00:11:49,040
so now let's say that charles

297
00:11:45,519 --> 00:11:51,440
is the adversary and either needs to be

298
00:11:49,040 --> 00:11:54,719
simulated

299
00:11:51,440 --> 00:11:55,600
so first of all there are two random

300
00:11:54,720 --> 00:11:58,639
group elements

301
00:11:55,600 --> 00:12:00,880
in the common reference string m and n

302
00:11:58,639 --> 00:12:01,920
and because it is the simulator who says

303
00:12:00,880 --> 00:12:03,839
the crs

304
00:12:01,920 --> 00:12:06,479
of course the simulator can know the

305
00:12:03,839 --> 00:12:10,160
discrete log of m and n

306
00:12:06,480 --> 00:12:12,480
and secondly the simulator

307
00:12:10,160 --> 00:12:13,199
also needs to simulate the protocol

308
00:12:12,480 --> 00:12:16,240
message

309
00:12:13,200 --> 00:12:17,760
of ada which is the group element x so

310
00:12:16,240 --> 00:12:20,320
recall that x

311
00:12:17,760 --> 00:12:21,439
is the peterson commitment of address

312
00:12:20,320 --> 00:12:23,839
password

313
00:12:21,440 --> 00:12:25,920
so at this point the simulator doesn't

314
00:12:23,839 --> 00:12:28,959
know it is password

315
00:12:25,920 --> 00:12:31,519
and on this x

316
00:12:28,959 --> 00:12:32,880
is a random group element so what the

317
00:12:31,519 --> 00:12:34,560
simulator will do

318
00:12:32,880 --> 00:12:36,639
is to just sample group element

319
00:12:34,560 --> 00:12:39,680
uniformly and again

320
00:12:36,639 --> 00:12:42,959
the simulator knows the squid log of x

321
00:12:39,680 --> 00:12:46,880
so now the simulator has three trebles

322
00:12:42,959 --> 00:12:49,439
the discrete logs of m n

323
00:12:46,880 --> 00:12:49,439
and x

324
00:12:51,200 --> 00:12:58,720
if the adversary wants to

325
00:12:54,240 --> 00:13:01,839
learn the the session key of ada

326
00:12:58,720 --> 00:13:03,040
then it needs to make a random oracle

327
00:13:01,839 --> 00:13:07,680
query

328
00:13:03,040 --> 00:13:10,719
here because this is how ada's

329
00:13:07,680 --> 00:13:13,199
either certainty is computed

330
00:13:10,720 --> 00:13:13,200
so now

331
00:13:13,760 --> 00:13:21,040
in particular the input of the

332
00:13:17,360 --> 00:13:26,000
random oracle contains the password

333
00:13:21,040 --> 00:13:29,760
and also a group element here and here

334
00:13:26,000 --> 00:13:32,880
so aspect 2 is designed in such a way

335
00:13:29,760 --> 00:13:36,240
that there's a relation between

336
00:13:32,880 --> 00:13:38,240
these two the password and the group

337
00:13:36,240 --> 00:13:41,680
element

338
00:13:38,240 --> 00:13:45,120
such that a correct

339
00:13:41,680 --> 00:13:48,239
ro query always

340
00:13:45,120 --> 00:13:52,399
in the correct arrow query will

341
00:13:48,240 --> 00:13:55,519
always satisfy certain relation

342
00:13:52,399 --> 00:13:58,480
and this relation can be checked

343
00:13:55,519 --> 00:13:59,680
given all these three chapters so what

344
00:13:58,480 --> 00:14:02,480
does this mean

345
00:13:59,680 --> 00:14:04,959
this means that when trials when this

346
00:14:02,480 --> 00:14:07,040
adversary queries the random oracle

347
00:14:04,959 --> 00:14:08,880
the simulator can check if the query is

348
00:14:07,040 --> 00:14:10,880
correct

349
00:14:08,880 --> 00:14:12,320
says that is if the query corresponds to

350
00:14:10,880 --> 00:14:14,320
a password test

351
00:14:12,320 --> 00:14:16,160
and if this is the case since the

352
00:14:14,320 --> 00:14:17,519
simulator can't extract the password

353
00:14:16,160 --> 00:14:21,040
guess

354
00:14:17,519 --> 00:14:23,519
so why does it only realize

355
00:14:21,040 --> 00:14:24,719
the lazy extraction pack functionality

356
00:14:23,519 --> 00:14:30,079
so this is because

357
00:14:24,720 --> 00:14:33,519
the simulator after extracting the

358
00:14:30,079 --> 00:14:36,000
aider's password it needs to prove

359
00:14:33,519 --> 00:14:37,040
it really needs to learn the key from

360
00:14:36,000 --> 00:14:41,120
the functionality

361
00:14:37,040 --> 00:14:41,120
in order to program the random oracle

362
00:14:41,519 --> 00:14:44,880
so why what why do we need gap determine

363
00:14:44,079 --> 00:14:47,279
here

364
00:14:44,880 --> 00:14:49,519
recall that the laser extraction peg

365
00:14:47,279 --> 00:14:51,040
functionality only allows a single

366
00:14:49,519 --> 00:14:54,480
password test procession

367
00:14:51,040 --> 00:14:58,160
so this means that if channels

368
00:14:54,480 --> 00:15:00,079
makes two run random oracle queries

369
00:14:58,160 --> 00:15:02,000
for the same session and both of them

370
00:15:00,079 --> 00:15:02,800
are correct since the simulator would

371
00:15:02,000 --> 00:15:06,240
get stuck

372
00:15:02,800 --> 00:15:10,839
because it doesn't know which password

373
00:15:06,240 --> 00:15:13,839
should be sent to the to the

374
00:15:10,839 --> 00:15:15,600
functionality but we can show that this

375
00:15:13,839 --> 00:15:17,600
essentially means that the adversary

376
00:15:15,600 --> 00:15:18,639
channels solves computational

377
00:15:17,600 --> 00:15:23,839
development

378
00:15:18,639 --> 00:15:23,839
on the on the crs group elements mn

379
00:15:23,920 --> 00:15:29,839
so in the reduction to ch

380
00:15:26,959 --> 00:15:31,040
the reduction doesn't know the chapters

381
00:15:29,839 --> 00:15:33,920
for mnn

382
00:15:31,040 --> 00:15:36,079
and to get around it needs a dna a

383
00:15:33,920 --> 00:15:39,279
decisional development oracle

384
00:15:36,079 --> 00:15:43,199
and that is why a gap wiser gap

385
00:15:39,279 --> 00:15:43,199
development assumption is needed

386
00:15:44,800 --> 00:15:51,040
okay our second result is about

387
00:15:47,920 --> 00:15:53,279
adding explicit mutual authentication

388
00:15:51,040 --> 00:15:54,560
recall that in a normal place in a plate

389
00:15:53,279 --> 00:15:57,519
with the so-called

390
00:15:54,560 --> 00:15:59,439
implicit authentication if the two

391
00:15:57,519 --> 00:16:02,399
parties passwords don't match

392
00:15:59,440 --> 00:16:05,040
since they will offer independent keys

393
00:16:02,399 --> 00:16:07,600
but here the difference is that

394
00:16:05,040 --> 00:16:10,880
if the passwords don't match since the

395
00:16:07,600 --> 00:16:10,880
parties were just abort

396
00:16:12,399 --> 00:16:18,800
so we show the results that you'll see

397
00:16:15,680 --> 00:16:20,079
lazy extraction pack plus standard key

398
00:16:18,800 --> 00:16:22,319
confirmation

399
00:16:20,079 --> 00:16:24,399
use a stronger you'll see relax break

400
00:16:22,320 --> 00:16:27,920
with explicit authentication

401
00:16:24,399 --> 00:16:31,519
so how is the key conformation done

402
00:16:27,920 --> 00:16:32,000
so you just use the laser extraction

403
00:16:31,519 --> 00:16:35,680
pick

404
00:16:32,000 --> 00:16:39,759
output small k here

405
00:16:35,680 --> 00:16:40,719
and you derive an authenticator called

406
00:16:39,759 --> 00:16:44,480
storage

407
00:16:40,720 --> 00:16:45,920
here and then you'll exchange the

408
00:16:44,480 --> 00:16:49,360
authenticators

409
00:16:45,920 --> 00:16:51,680
and after you receive the awesome

410
00:16:49,360 --> 00:16:53,759
authenticator from the counterparty

411
00:16:51,680 --> 00:16:55,758
you'll check if it is correct

412
00:16:53,759 --> 00:16:58,160
and if it is not correct then you're

413
00:16:55,759 --> 00:16:58,160
aboard

414
00:16:59,680 --> 00:17:03,120
so now let's see on a very high level

415
00:17:01,839 --> 00:17:08,640
why

416
00:17:03,120 --> 00:17:08,640
why the theorem holds so this is because

417
00:17:10,240 --> 00:17:16,559
um if the adversary

418
00:17:13,359 --> 00:17:19,198
doesn't do a test do a password test

419
00:17:16,559 --> 00:17:20,399
on the correct password then the

420
00:17:19,199 --> 00:17:22,720
adversary cannot

421
00:17:20,400 --> 00:17:24,240
simply cannot come up with a correct

422
00:17:22,720 --> 00:17:28,240
authenticator

423
00:17:24,240 --> 00:17:33,120
and since the lazy extraction

424
00:17:28,240 --> 00:17:36,559
key since this key is hidden

425
00:17:33,120 --> 00:17:39,918
the the adverse is

426
00:17:36,559 --> 00:17:42,879
the honest party will just abort

427
00:17:39,919 --> 00:17:44,960
in other words in other words if says if

428
00:17:42,880 --> 00:17:48,000
the honest party doesn't abort

429
00:17:44,960 --> 00:17:49,919
since the adversary must do a correct

430
00:17:48,000 --> 00:17:52,320
password guess

431
00:17:49,919 --> 00:17:55,200
yes which allows the simulator to

432
00:17:52,320 --> 00:17:58,159
extract the password

433
00:17:55,200 --> 00:18:00,320
and unlike aspect 2 here the simulator

434
00:17:58,160 --> 00:18:02,240
doesn't really need a key to program the

435
00:18:00,320 --> 00:18:04,399
random oracle

436
00:18:02,240 --> 00:18:05,360
learning whether the password test is

437
00:18:04,400 --> 00:18:08,320
correct or not

438
00:18:05,360 --> 00:18:09,280
is sufficient for computing the final

439
00:18:08,320 --> 00:18:12,879
certainty

440
00:18:09,280 --> 00:18:15,280
so we get a we did an

441
00:18:12,880 --> 00:18:17,600
arc which is slightly stronger than our

442
00:18:15,280 --> 00:18:20,160
e-paper

443
00:18:17,600 --> 00:18:22,320
and there are there are some properties

444
00:18:20,160 --> 00:18:23,840
here which prevents this to realize the

445
00:18:22,320 --> 00:18:26,080
standard page

446
00:18:23,840 --> 00:18:27,840
uh center pick functionality so wrongly

447
00:18:26,080 --> 00:18:28,720
speaking this is because the adversary

448
00:18:27,840 --> 00:18:32,240
can make a

449
00:18:28,720 --> 00:18:35,039
late date password test even after a

450
00:18:32,240 --> 00:18:35,039
session aboard

451
00:18:36,400 --> 00:18:40,160
furthermore we also do a sanity check

452
00:18:39,120 --> 00:18:43,280
here involving

453
00:18:40,160 --> 00:18:44,960
a game-based game-based paid security

454
00:18:43,280 --> 00:18:47,440
notion on

455
00:18:44,960 --> 00:18:49,679
the property of prophet's perfect

456
00:18:47,440 --> 00:18:52,000
forward secrecy or pfs

457
00:18:49,679 --> 00:18:52,960
so recall that prophet forward secrecy

458
00:18:52,000 --> 00:18:56,000
means that

459
00:18:52,960 --> 00:18:59,679
when after a party corruption all

460
00:18:56,000 --> 00:18:59,679
premise sessions are still secure

461
00:19:00,559 --> 00:19:06,399
so we show that you'll see relaxed break

462
00:19:04,080 --> 00:19:07,439
implies game-based both game-based

463
00:19:06,400 --> 00:19:10,559
security

464
00:19:07,440 --> 00:19:12,880
and pfs and the proof

465
00:19:10,559 --> 00:19:14,320
of this fact is very similar to the

466
00:19:12,880 --> 00:19:16,320
previous results that

467
00:19:14,320 --> 00:19:18,639
the standard authentic functionality has

468
00:19:16,320 --> 00:19:21,600
this property

469
00:19:18,640 --> 00:19:25,039
and we also show that the weaker you see

470
00:19:21,600 --> 00:19:28,879
lazy extraction peak

471
00:19:25,039 --> 00:19:32,000
it also implies game-based pike

472
00:19:28,880 --> 00:19:35,039
security and a weaker form

473
00:19:32,000 --> 00:19:35,039
of pfs

474
00:19:37,440 --> 00:19:41,280
we measure some related work here

475
00:19:41,440 --> 00:19:45,679
there has been some previous work

476
00:19:43,200 --> 00:19:47,200
modeling this post-execution extraction

477
00:19:45,679 --> 00:19:49,039
data in uc

478
00:19:47,200 --> 00:19:50,240
first in the context of another

479
00:19:49,039 --> 00:19:52,480
primitive called

480
00:19:50,240 --> 00:19:53,280
oblivious pseudo-random function and

481
00:19:52,480 --> 00:19:56,160
then in

482
00:19:53,280 --> 00:19:56,160
a symmetric peg

483
00:19:56,640 --> 00:20:00,559
and there's a concurrent work by shoop

484
00:19:59,600 --> 00:20:03,678
which shows that

485
00:20:00,559 --> 00:20:05,600
aspect 2 with key conformation actually

486
00:20:03,679 --> 00:20:06,400
realizes the functionality which is

487
00:20:05,600 --> 00:20:10,000
essentially

488
00:20:06,400 --> 00:20:11,440
equivalent to our relaxed page and the

489
00:20:10,000 --> 00:20:14,400
difference is that

490
00:20:11,440 --> 00:20:16,640
our analysis is done modularly so first

491
00:20:14,400 --> 00:20:19,760
we analyze the plane aspect

492
00:20:16,640 --> 00:20:21,919
as a lazy extraction plane and then we

493
00:20:19,760 --> 00:20:22,799
add key conformation to obtain the

494
00:20:21,919 --> 00:20:26,240
stronger

495
00:20:22,799 --> 00:20:29,039
the relaxed pink and we also analyzed

496
00:20:26,240 --> 00:20:29,919
some other efficient peg protocols but

497
00:20:29,039 --> 00:20:32,240
on the other hand

498
00:20:29,919 --> 00:20:34,799
troops analysis is based on a slightly

499
00:20:32,240 --> 00:20:37,919
weaker assumption than ours

500
00:20:34,799 --> 00:20:38,639
and finally there is the very recent

501
00:20:37,919 --> 00:20:41,760
result

502
00:20:38,640 --> 00:20:44,400
which shows that encrypted key exchange

503
00:20:41,760 --> 00:20:45,919
the first fake protocol ever proposed

504
00:20:44,400 --> 00:20:49,280
already realizes the

505
00:20:45,919 --> 00:20:53,440
sonar ucp functionality when the

506
00:20:49,280 --> 00:20:56,080
encryption scheme is some specific ones

507
00:20:53,440 --> 00:20:58,559
but regarding the computational costs of

508
00:20:56,080 --> 00:21:00,799
their protocol and hours

509
00:20:58,559 --> 00:21:01,760
there is some trade-off in the

510
00:21:00,799 --> 00:21:04,158
comparison

511
00:21:01,760 --> 00:21:05,120
and at this moment it is not completely

512
00:21:04,159 --> 00:21:06,720
clear

513
00:21:05,120 --> 00:21:08,719
which one is more efficient when

514
00:21:06,720 --> 00:21:11,440
implemented and also

515
00:21:08,720 --> 00:21:13,840
cs security reduction is not as tight as

516
00:21:11,440 --> 00:21:13,840
ours

517
00:21:14,400 --> 00:21:22,159
so in conclusion we show that

518
00:21:18,640 --> 00:21:22,880
practical pick protocols are actually uc

519
00:21:22,159 --> 00:21:26,640
sql

520
00:21:22,880 --> 00:21:28,640
as long as we slightly relax

521
00:21:26,640 --> 00:21:30,080
the standard usb picture pack

522
00:21:28,640 --> 00:21:33,200
functionality to

523
00:21:30,080 --> 00:21:33,199
laser extraction page

524
00:21:33,919 --> 00:21:40,000
and secondly adding key confirmation

525
00:21:37,280 --> 00:21:40,720
has two effects the first one is it

526
00:21:40,000 --> 00:21:42,799
allows

527
00:21:40,720 --> 00:21:44,400
explicit authentication and the second

528
00:21:42,799 --> 00:21:46,480
is that upgrades

529
00:21:44,400 --> 00:21:48,320
lays the extraction pipe to the slightly

530
00:21:46,480 --> 00:21:52,240
stronger relax fake

531
00:21:48,320 --> 00:21:54,879
and finally we show that every uc pike

532
00:21:52,240 --> 00:21:58,640
is actually game-based secure with

533
00:21:54,880 --> 00:22:00,159
perfect forward secrecy

534
00:21:58,640 --> 00:22:02,240
there are many interesting open

535
00:22:00,159 --> 00:22:03,280
questions on here i only want to mention

536
00:22:02,240 --> 00:22:06,960
one of them

537
00:22:03,280 --> 00:22:09,520
and that is is lazy extraction pace

538
00:22:06,960 --> 00:22:11,120
we proposed really weaker than the

539
00:22:09,520 --> 00:22:13,679
standard uc page

540
00:22:11,120 --> 00:22:14,239
and if that is the case then in what

541
00:22:13,679 --> 00:22:18,000
cases

542
00:22:14,240 --> 00:22:20,799
or in what sense are they weaker

543
00:22:18,000 --> 00:22:22,960
okay so this is the end of the talk um

544
00:22:20,799 --> 00:22:24,720
our paper is on imprint you can check it

545
00:22:22,960 --> 00:22:27,840
out if you are interested

546
00:22:24,720 --> 00:22:27,840
thank you very much

