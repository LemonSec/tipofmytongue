1
00:00:01,360 --> 00:00:05,680
good afternoon i'm going to present our

2
00:00:03,679 --> 00:00:07,279
paper node level versus implementation

3
00:00:05,680 --> 00:00:09,679
level physical security

4
00:00:07,279 --> 00:00:12,320
in symmetric cryptography a practical

5
00:00:09,679 --> 00:00:14,000
guide to the leakage resistance jungle

6
00:00:12,320 --> 00:00:16,480
this is joint work with colleagues from

7
00:00:14,000 --> 00:00:20,240
uc louvre in belgium cnrs in france

8
00:00:16,480 --> 00:00:22,000
and shandong university in china

9
00:00:20,240 --> 00:00:23,759
as an introduction i would like to start

10
00:00:22,000 --> 00:00:25,680
with a few words of motivation

11
00:00:23,760 --> 00:00:29,679
describe our goals and start with the

12
00:00:25,680 --> 00:00:31,279
question why a legacy resistant struggle

13
00:00:29,679 --> 00:00:33,199
so for this i first would like to

14
00:00:31,279 --> 00:00:35,360
discuss the differences and similarities

15
00:00:33,200 --> 00:00:38,480
between mathematical security reductions

16
00:00:35,360 --> 00:00:40,320
and physical security reductions in

17
00:00:38,480 --> 00:00:42,239
mathematical security reductions

18
00:00:40,320 --> 00:00:44,000
we have a full-fledged scheme and we

19
00:00:42,239 --> 00:00:47,199
want to reduce it to some mathematical

20
00:00:44,000 --> 00:00:48,079
assumptions for example here we have an

21
00:00:47,200 --> 00:00:50,399
encryption scheme

22
00:00:48,079 --> 00:00:51,440
based on a treatable block cipher and we

23
00:00:50,399 --> 00:00:53,120
want to reduce it

24
00:00:51,440 --> 00:00:54,800
to the assumption that the tweakable

25
00:00:53,120 --> 00:00:58,078
block cipher is an ideal cipher

26
00:00:54,800 --> 00:00:59,919
or absolute random permutation as a

27
00:00:58,079 --> 00:01:01,440
result mathematical assumptions can be

28
00:00:59,920 --> 00:01:03,920
seen as a specification

29
00:01:01,440 --> 00:01:05,600
of requirements that symmetric designs

30
00:01:03,920 --> 00:01:07,119
have to ensure

31
00:01:05,600 --> 00:01:08,798
therefore we have a trade-off between

32
00:01:07,119 --> 00:01:10,720
the efficiency of the mode and the

33
00:01:08,799 --> 00:01:12,640
efficiency of the primitive

34
00:01:10,720 --> 00:01:14,000
for example if you have to instantiate

35
00:01:12,640 --> 00:01:16,080
an ideal cipher

36
00:01:14,000 --> 00:01:17,920
it may require a few more rounds of your

37
00:01:16,080 --> 00:01:18,640
symmetric primitive than if you have to

38
00:01:17,920 --> 00:01:22,000
instantiate

39
00:01:18,640 --> 00:01:24,000
absolute random permutation yet

40
00:01:22,000 --> 00:01:26,560
the extent of the tradeoff is in general

41
00:01:24,000 --> 00:01:28,560
quite small and performance will vary by

42
00:01:26,560 --> 00:01:31,759
factors ranging between times 2

43
00:01:28,560 --> 00:01:33,119
and times 4 typically

44
00:01:31,759 --> 00:01:35,600
in the case of physical security

45
00:01:33,119 --> 00:01:37,119
reductions the main idea is the same

46
00:01:35,600 --> 00:01:38,880
we want to reduce the security of a

47
00:01:37,119 --> 00:01:41,759
full-fledged scheme to a combination of

48
00:01:38,880 --> 00:01:43,439
mathematical and physical assumptions

49
00:01:41,759 --> 00:01:45,200
the first difference here is that while

50
00:01:43,439 --> 00:01:47,439
we have a few mathematical assumptions

51
00:01:45,200 --> 00:01:49,040
that are well understood and established

52
00:01:47,439 --> 00:01:51,119
we have a wider zoo of physical

53
00:01:49,040 --> 00:01:52,079
assumptions all of them coming with pros

54
00:01:51,119 --> 00:01:54,079
and cons

55
00:01:52,079 --> 00:01:56,158
and current analysis usually combines

56
00:01:54,079 --> 00:01:58,079
several physical assumptions in order to

57
00:01:56,159 --> 00:01:59,520
gain insights about the security of the

58
00:01:58,079 --> 00:02:01,439
modes

59
00:01:59,520 --> 00:02:03,600
for the rest a physical assumption is

60
00:02:01,439 --> 00:02:06,079
again a specification of requirements

61
00:02:03,600 --> 00:02:07,919
that implementations must satisfy

62
00:02:06,079 --> 00:02:09,519
and therefore we have again a tradeoff

63
00:02:07,920 --> 00:02:11,760
between the efficiency of the modes and

64
00:02:09,520 --> 00:02:13,599
the efficiency of the primitives

65
00:02:11,760 --> 00:02:16,399
typically protected implementation will

66
00:02:13,599 --> 00:02:18,079
require expensive counter measures

67
00:02:16,400 --> 00:02:19,520
the important point here is that the

68
00:02:18,080 --> 00:02:20,720
extent of the trade-off will be much

69
00:02:19,520 --> 00:02:23,360
larger

70
00:02:20,720 --> 00:02:24,080
performances of protected implementation

71
00:02:23,360 --> 00:02:27,599
can decrease

72
00:02:24,080 --> 00:02:29,040
by factors of 2 times 100. therefore we

73
00:02:27,599 --> 00:02:30,959
have a stronger incentive to have a

74
00:02:29,040 --> 00:02:33,599
finer granularity in the modes

75
00:02:30,959 --> 00:02:34,560
and to use exactly what you need for

76
00:02:33,599 --> 00:02:36,000
example

77
00:02:34,560 --> 00:02:38,560
if you need to prevent leakage in

78
00:02:36,000 --> 00:02:39,360
encryption only you could design a more

79
00:02:38,560 --> 00:02:41,360
efficient mode

80
00:02:39,360 --> 00:02:44,000
than if you also need to prevent leakage

81
00:02:41,360 --> 00:02:44,000
in decryption

82
00:02:44,400 --> 00:02:47,760
a second reason why physical security

83
00:02:46,239 --> 00:02:49,599
analysis are difficult

84
00:02:47,760 --> 00:02:51,280
relates to the observation of michelin

85
00:02:49,599 --> 00:02:52,160
raizin that unpredictability with

86
00:02:51,280 --> 00:02:54,440
leakage

87
00:02:52,160 --> 00:02:57,599
is easier to capture and guarantee than

88
00:02:54,440 --> 00:02:59,359
indistinguishability with leakage

89
00:02:57,599 --> 00:03:00,879
applied to the case of authenticated

90
00:02:59,360 --> 00:03:03,040
encryption scheme it means that

91
00:03:00,879 --> 00:03:04,000
integrity guarantees are easier to reach

92
00:03:03,040 --> 00:03:06,720
than confidentiality

93
00:03:04,000 --> 00:03:07,840
guarantees for example it can happen

94
00:03:06,720 --> 00:03:10,159
that you can guarantee

95
00:03:07,840 --> 00:03:12,239
integrity with an unbounded leakage of

96
00:03:10,159 --> 00:03:13,599
all the ephemeral values of a scheme

97
00:03:12,239 --> 00:03:16,080
which is something that's not going to

98
00:03:13,599 --> 00:03:18,238
work for confidentiality

99
00:03:16,080 --> 00:03:20,319
as a result we have a stronger incentive

100
00:03:18,239 --> 00:03:22,080
to use composite definitions rather than

101
00:03:20,319 --> 00:03:22,958
all-in-one definitions at a regardless

102
00:03:22,080 --> 00:03:24,879
shrinktone

103
00:03:22,959 --> 00:03:27,200
which is more convenient in the blackbox

104
00:03:24,879 --> 00:03:27,200
world

105
00:03:27,519 --> 00:03:30,400
so if you look at the current state of

106
00:03:28,799 --> 00:03:31,440
the art you will find a zoo of

107
00:03:30,400 --> 00:03:34,159
definitions which

108
00:03:31,440 --> 00:03:35,120
in our opinion is unavoidable and a zoo

109
00:03:34,159 --> 00:03:36,560
of assumptions

110
00:03:35,120 --> 00:03:38,159
which could probably be improved with

111
00:03:36,560 --> 00:03:40,000
further research

112
00:03:38,159 --> 00:03:42,000
the combination of those zoos is what we

113
00:03:40,000 --> 00:03:43,360
call the leakage resistance jungle

114
00:03:42,000 --> 00:03:45,200
and the goal of this paper is to

115
00:03:43,360 --> 00:03:46,560
translate this complex state of the art

116
00:03:45,200 --> 00:03:48,000
into concrete guidelines for

117
00:03:46,560 --> 00:03:50,080
implementers

118
00:03:48,000 --> 00:03:51,840
that is trying to use formal security

119
00:03:50,080 --> 00:03:52,640
analysis in order to help hardware

120
00:03:51,840 --> 00:03:56,400
engineers

121
00:03:52,640 --> 00:03:56,399
designing more secure implementations

122
00:03:56,799 --> 00:04:00,560
the main tool that we will use for this

123
00:03:58,400 --> 00:04:02,480
purpose is a simplifying framework that

124
00:04:00,560 --> 00:04:04,720
will be in three parts

125
00:04:02,480 --> 00:04:06,560
first we will identify relevant steps in

126
00:04:04,720 --> 00:04:08,560
authenticated encryption schemes

127
00:04:06,560 --> 00:04:12,799
second we will simplify the assumption

128
00:04:08,560 --> 00:04:12,799
zoo and finally we will simplify the

129
00:04:12,840 --> 00:04:16,079
definitions

130
00:04:14,159 --> 00:04:17,839
starting with the steps of an a scheme

131
00:04:16,079 --> 00:04:18,400
and taking the example of an inner kid

132
00:04:17,839 --> 00:04:21,440
sponge

133
00:04:18,399 --> 00:04:24,400
we will consider four steps first

134
00:04:21,440 --> 00:04:26,160
an optional key generation function then

135
00:04:24,400 --> 00:04:27,840
double computation that processes the

136
00:04:26,160 --> 00:04:29,919
message blocks

137
00:04:27,840 --> 00:04:32,239
third the tag generation function and

138
00:04:29,919 --> 00:04:33,680
finally the verification

139
00:04:32,240 --> 00:04:35,600
we know that we do not consider

140
00:04:33,680 --> 00:04:36,240
associated data that doesn't have a lot

141
00:04:35,600 --> 00:04:39,280
of impact

142
00:04:36,240 --> 00:04:39,280
in leakage analysis

143
00:04:39,680 --> 00:04:43,759
as already mentioned the goal of a

144
00:04:41,360 --> 00:04:44,880
formal analysis is to reduce the mode to

145
00:04:43,759 --> 00:04:46,960
some assumptions

146
00:04:44,880 --> 00:04:48,240
ideally weak assumptions and in a tight

147
00:04:46,960 --> 00:04:49,919
manner

148
00:04:48,240 --> 00:04:51,440
all these physical assumptions can be

149
00:04:49,919 --> 00:04:52,479
viewed as sufficient conditions of

150
00:04:51,440 --> 00:04:54,160
security

151
00:04:52,479 --> 00:04:57,199
and they are expressed in quite

152
00:04:54,160 --> 00:04:59,360
different abstractions

153
00:04:57,199 --> 00:05:00,960
in this respect the observation we make

154
00:04:59,360 --> 00:05:02,880
in the paper is that if you translate

155
00:05:00,960 --> 00:05:03,758
these assumptions into necessary design

156
00:05:02,880 --> 00:05:05,520
goals

157
00:05:03,759 --> 00:05:07,759
you can reduce them to a few well-known

158
00:05:05,520 --> 00:05:10,159
attacks as would be investigated by

159
00:05:07,759 --> 00:05:12,160
security evaluation labs

160
00:05:10,160 --> 00:05:13,520
more precisely we will sometimes need

161
00:05:12,160 --> 00:05:15,360
dpa security

162
00:05:13,520 --> 00:05:17,359
for example against the long-term key or

163
00:05:15,360 --> 00:05:19,120
the tag which means that we need to

164
00:05:17,360 --> 00:05:21,039
prevent attacks where the adversary can

165
00:05:19,120 --> 00:05:22,960
observe the leakage of the primitive for

166
00:05:21,039 --> 00:05:25,440
many inputs

167
00:05:22,960 --> 00:05:27,840
we will sometimes need sps security for

168
00:05:25,440 --> 00:05:29,199
example against ephemeral secrets

169
00:05:27,840 --> 00:05:30,799
which means that we need to prevent

170
00:05:29,199 --> 00:05:32,560
attacks where the adversary can observe

171
00:05:30,800 --> 00:05:34,000
the leakage of the primitive for a few

172
00:05:32,560 --> 00:05:35,520
inputs

173
00:05:34,000 --> 00:05:37,680
we will sometimes need one block

174
00:05:35,520 --> 00:05:38,880
confidentiality which means that we need

175
00:05:37,680 --> 00:05:41,039
to prevent attacks

176
00:05:38,880 --> 00:05:42,800
where the adversary directly targets one

177
00:05:41,039 --> 00:05:44,719
single message block

178
00:05:42,800 --> 00:05:48,400
and finally we'll sometimes even

179
00:05:44,720 --> 00:05:48,400
tolerate unbounded leakages

180
00:05:49,039 --> 00:05:52,159
in order to illustrate that using a

181
00:05:50,720 --> 00:05:53,440
weaker physical assumption is

182
00:05:52,160 --> 00:05:55,199
practically relevant

183
00:05:53,440 --> 00:05:57,600
the table now contains approximate

184
00:05:55,199 --> 00:05:59,919
performance overheads

185
00:05:57,600 --> 00:06:01,759
we see the dpa security which can be

186
00:05:59,919 --> 00:06:02,880
obtained via higher order masking or

187
00:06:01,759 --> 00:06:07,199
shuffling

188
00:06:02,880 --> 00:06:09,440
implies overheads factor from 5 to 100

189
00:06:07,199 --> 00:06:11,680
sp security which can be obtained via

190
00:06:09,440 --> 00:06:14,960
parallel implementations or noise

191
00:06:11,680 --> 00:06:16,639
implies overheads factor from 1 to 5.

192
00:06:14,960 --> 00:06:19,359
one block confidentiality is not

193
00:06:16,639 --> 00:06:21,280
reported because let's explore so far

194
00:06:19,360 --> 00:06:23,840
and unbounded leakages of course come

195
00:06:21,280 --> 00:06:23,840
for free

196
00:06:24,160 --> 00:06:29,280
ok we now move to the simplification of

197
00:06:27,120 --> 00:06:30,639
the definition zoom

198
00:06:29,280 --> 00:06:32,880
for this we observe that for

199
00:06:30,639 --> 00:06:36,080
confidentiality we can have cpa security

200
00:06:32,880 --> 00:06:38,159
or cca security for integrity we can

201
00:06:36,080 --> 00:06:40,080
have plain text integrity or ciphertext

202
00:06:38,160 --> 00:06:42,160
integrity

203
00:06:40,080 --> 00:06:45,440
for leakage we can have it in encryption

204
00:06:42,160 --> 00:06:47,120
only or in encryption and decryption

205
00:06:45,440 --> 00:06:50,080
for the nonce we can have non-smith

206
00:06:47,120 --> 00:06:51,520
resistance or resilience

207
00:06:50,080 --> 00:06:55,039
and for leakage we can have leakage

208
00:06:51,520 --> 00:06:56,719
resistance or resilience

209
00:06:55,039 --> 00:06:58,960
by resistance we mean that we aim to

210
00:06:56,720 --> 00:07:02,000
maintain the security guarantees even in

211
00:06:58,960 --> 00:07:03,758
the presence of non-smith use or leakage

212
00:07:02,000 --> 00:07:05,520
by resilience we mean that the security

213
00:07:03,759 --> 00:07:07,360
guarantees vanish in the presence of

214
00:07:05,520 --> 00:07:09,198
non-speed use or leakage

215
00:07:07,360 --> 00:07:10,479
but they are restored as soon as

216
00:07:09,199 --> 00:07:11,840
nonspeed use or leakage

217
00:07:10,479 --> 00:07:14,479
are removed from the adversary's

218
00:07:11,840 --> 00:07:16,159
capabilities

219
00:07:14,479 --> 00:07:18,000
the result of all these options is

220
00:07:16,160 --> 00:07:19,919
represented by the two cubes at the

221
00:07:18,000 --> 00:07:21,360
bottom of the slides

222
00:07:19,919 --> 00:07:24,639
they represent all the composite

223
00:07:21,360 --> 00:07:24,639
definitions that we can have

224
00:07:25,520 --> 00:07:30,560
now the simplification we propose is the

225
00:07:27,440 --> 00:07:32,400
following one

226
00:07:30,560 --> 00:07:36,240
we will consider grade zero designs that

227
00:07:32,400 --> 00:07:38,560
have no mod level leakage resistance

228
00:07:36,240 --> 00:07:40,639
grade 1a designs ensure ciphertext

229
00:07:38,560 --> 00:07:43,599
integrity with leakage in encryption

230
00:07:40,639 --> 00:07:47,360
and cca security with dkh in encryption

231
00:07:43,599 --> 00:07:47,360
for example thanks to key evolution

232
00:07:47,599 --> 00:07:51,759
grade 1b designs ensure ciphertext

233
00:07:49,840 --> 00:07:54,159
integrity with misuse resistance

234
00:07:51,759 --> 00:07:55,759
and leakage in encryption and decryption

235
00:07:54,160 --> 00:07:57,440
for example thanks to strengthening the

236
00:07:55,759 --> 00:07:58,000
key generation function and attack

237
00:07:57,440 --> 00:08:02,960
generation

238
00:07:58,000 --> 00:08:03,360
function grade 2 designs combine ciml2

239
00:08:02,960 --> 00:08:05,919
with

240
00:08:03,360 --> 00:08:07,520
cc security with misused resilience and

241
00:08:05,919 --> 00:08:09,120
leakage in encryption

242
00:08:07,520 --> 00:08:11,840
for example by combining the two

243
00:08:09,120 --> 00:08:14,560
previous ids

244
00:08:11,840 --> 00:08:16,719
finally grade three designs add cc

245
00:08:14,560 --> 00:08:20,479
security with decryption leakage

246
00:08:16,720 --> 00:08:20,479
for example by using two passes

247
00:08:21,759 --> 00:08:25,280
the next step of our outline is to show

248
00:08:23,680 --> 00:08:27,039
that we can apply this taxonomy to

249
00:08:25,280 --> 00:08:28,719
existing a schemes

250
00:08:27,039 --> 00:08:30,479
and to illustrate the tradeoff between

251
00:08:28,720 --> 00:08:33,440
mode level and implementation level

252
00:08:30,479 --> 00:08:33,439
physical security

253
00:08:33,599 --> 00:08:38,159
we start with ocb pizza mask which is a

254
00:08:35,599 --> 00:08:39,760
great zero design

255
00:08:38,159 --> 00:08:41,200
in this case we see that even for the

256
00:08:39,760 --> 00:08:43,360
lowest security target

257
00:08:41,200 --> 00:08:44,959
which is cca security and ciphertext

258
00:08:43,360 --> 00:08:46,800
integrity with leakage in encryption

259
00:08:44,959 --> 00:08:48,719
only and no misuse

260
00:08:46,800 --> 00:08:52,160
we already need to protect all the block

261
00:08:48,720 --> 00:08:53,760
cipher calls with strong dpa protections

262
00:08:52,160 --> 00:08:55,199
this is not a bad thing in itself

263
00:08:53,760 --> 00:08:56,319
because the mode is quite efficient

264
00:08:55,200 --> 00:08:58,080
otherwise

265
00:08:56,320 --> 00:09:00,080
but it shows that site channel security

266
00:08:58,080 --> 00:09:02,399
will only depend on implementation level

267
00:09:00,080 --> 00:09:04,399
counter measures

268
00:09:02,399 --> 00:09:06,000
other ciphers provide the same type of

269
00:09:04,399 --> 00:09:08,399
guarantees

270
00:09:06,000 --> 00:09:09,920
ocbas is interesting to mention because

271
00:09:08,399 --> 00:09:10,880
it recalls something that we do not

272
00:09:09,920 --> 00:09:12,640
cover

273
00:09:10,880 --> 00:09:14,880
namely the fact that certain ciphers

274
00:09:12,640 --> 00:09:15,600
like pj masks are going to be easier to

275
00:09:14,880 --> 00:09:17,279
protect with

276
00:09:15,600 --> 00:09:18,640
implementation level quantum measures

277
00:09:17,279 --> 00:09:23,839
like masking than

278
00:09:18,640 --> 00:09:23,839
other ciphers for example the aes

279
00:09:23,920 --> 00:09:27,599
moving to a mode with slightly better

280
00:09:25,440 --> 00:09:30,640
leakage resistance we have photon beetle

281
00:09:27,600 --> 00:09:32,080
which is a grade 1a design what is

282
00:09:30,640 --> 00:09:34,880
interesting here is that if we have

283
00:09:32,080 --> 00:09:36,959
leakage in encryption only and no misuse

284
00:09:34,880 --> 00:09:39,439
then the bulk of the computation only

285
00:09:36,959 --> 00:09:41,359
has to be protected against spa

286
00:09:39,440 --> 00:09:42,959
and this is because every message is

287
00:09:41,360 --> 00:09:43,839
always going to be encrypted with a

288
00:09:42,959 --> 00:09:46,800
fresh key

289
00:09:43,839 --> 00:09:48,800
generated by the key generation function

290
00:09:46,800 --> 00:09:50,800
therefore such designs are calling for

291
00:09:48,800 --> 00:09:52,640
so-called leveled implementations where

292
00:09:50,800 --> 00:09:54,719
different security levels are used for

293
00:09:52,640 --> 00:09:56,640
different parts of the implementation

294
00:09:54,720 --> 00:09:59,360
and therefore lead to different levels

295
00:09:56,640 --> 00:09:59,360
of performance

296
00:09:59,600 --> 00:10:03,200
by contrast this doesn't work anymore if

297
00:10:01,760 --> 00:10:04,959
you add misused to the adversary's

298
00:10:03,200 --> 00:10:06,720
capabilities

299
00:10:04,959 --> 00:10:09,279
the reason is that the adversary can now

300
00:10:06,720 --> 00:10:11,440
fix the ephemeral key

301
00:10:09,279 --> 00:10:14,240
use multiple message blocks in order to

302
00:10:11,440 --> 00:10:17,120
recover this ephemeral key thanks to dpa

303
00:10:14,240 --> 00:10:18,000
and inverse the permutation so we are

304
00:10:17,120 --> 00:10:20,560
back in a situation

305
00:10:18,000 --> 00:10:22,480
where we need dpa security everywhere

306
00:10:20,560 --> 00:10:25,680
and this applies more or less to every

307
00:10:22,480 --> 00:10:25,680
inner kid sponge design

308
00:10:27,040 --> 00:10:30,719
in order to improve this great two

309
00:10:29,040 --> 00:10:32,240
designs like ascon

310
00:10:30,720 --> 00:10:33,839
are essentially strengthening the key

311
00:10:32,240 --> 00:10:35,360
generation function and the tag

312
00:10:33,839 --> 00:10:38,240
generation function

313
00:10:35,360 --> 00:10:39,839
in order to make them non-invertible

314
00:10:38,240 --> 00:10:42,240
this doesn't change anything

315
00:10:39,839 --> 00:10:44,000
in case you have no misuse but it means

316
00:10:42,240 --> 00:10:45,680
that even when you have misuse

317
00:10:44,000 --> 00:10:47,680
the fact that you can recover an

318
00:10:45,680 --> 00:10:49,120
ephemeral secret cannot leak to the

319
00:10:47,680 --> 00:10:51,839
long-term secret

320
00:10:49,120 --> 00:10:53,680
and as a result for confidentiality it

321
00:10:51,839 --> 00:10:57,920
is enough to protect the bulk of

322
00:10:53,680 --> 00:10:57,920
the competition against sba only

323
00:10:58,240 --> 00:11:02,399
yet this is not sufficient if you want

324
00:11:00,480 --> 00:11:04,720
to also have confidentiality

325
00:11:02,399 --> 00:11:06,880
in front of decryption leakage the

326
00:11:04,720 --> 00:11:09,200
reason is that despite the fmeral key

327
00:11:06,880 --> 00:11:11,279
cannot lead to the long-term secret

328
00:11:09,200 --> 00:11:12,560
it is sufficient to recover the message

329
00:11:11,279 --> 00:11:15,120
in full

330
00:11:12,560 --> 00:11:19,279
as a result here again we need to have

331
00:11:15,120 --> 00:11:19,279
dpa protections everywhere in the design

332
00:11:19,760 --> 00:11:23,200
interestingly integrity guarantees have

333
00:11:22,320 --> 00:11:26,079
even weaker

334
00:11:23,200 --> 00:11:27,760
requirements in the case of ascon namely

335
00:11:26,079 --> 00:11:28,800
ciphertext integrity with leakage in

336
00:11:27,760 --> 00:11:31,439
encryption only

337
00:11:28,800 --> 00:11:32,160
and no misuse can be guaranteed even if

338
00:11:31,440 --> 00:11:34,000
you leak

339
00:11:32,160 --> 00:11:35,920
all the ephemeral values of the bulk

340
00:11:34,000 --> 00:11:37,600
computation in full

341
00:11:35,920 --> 00:11:39,760
this shows the interest of composite

342
00:11:37,600 --> 00:11:40,720
definitions and this guarantee is even

343
00:11:39,760 --> 00:11:44,319
maintained

344
00:11:40,720 --> 00:11:44,320
if you have misused resistance

345
00:11:47,680 --> 00:11:51,359
eventually in order to reach the highest

346
00:11:49,920 --> 00:11:53,120
integrity guarantee which is

347
00:11:51,360 --> 00:11:54,880
ciphertext integrity with misuse

348
00:11:53,120 --> 00:11:57,360
resistance and leakage in encryption

349
00:11:54,880 --> 00:11:59,439
and encryption one additionally has to

350
00:11:57,360 --> 00:12:02,079
protect the tag verification against

351
00:11:59,440 --> 00:12:04,000
dpa otherwise the leakage of the

352
00:12:02,079 --> 00:12:05,680
verification can be used in order to

353
00:12:04,000 --> 00:12:07,760
mount forgeries

354
00:12:05,680 --> 00:12:09,199
this shows that key recovery security is

355
00:12:07,760 --> 00:12:10,959
not enough in order to analyze

356
00:12:09,200 --> 00:12:11,920
authenticated encryption schemes against

357
00:12:10,959 --> 00:12:14,160
leakage

358
00:12:11,920 --> 00:12:17,760
and it applies to other ciphers like ace

359
00:12:14,160 --> 00:12:17,760
gbon speaks or wage

360
00:12:17,839 --> 00:12:21,760
as an alternative grid to design we

361
00:12:19,839 --> 00:12:23,040
mention spook

362
00:12:21,760 --> 00:12:25,439
spook is pushing the level

363
00:12:23,040 --> 00:12:27,760
implementations concept one step further

364
00:12:25,440 --> 00:12:30,959
by using two primitives namely a

365
00:12:27,760 --> 00:12:32,800
treatable work cipher and a permutation

366
00:12:30,959 --> 00:12:34,000
the rational is that the smaller state

367
00:12:32,800 --> 00:12:37,120
size of the tbc

368
00:12:34,000 --> 00:12:38,160
should make it easier to mask for most

369
00:12:37,120 --> 00:12:40,079
of the analysis

370
00:12:38,160 --> 00:12:41,839
spook provides similar security

371
00:12:40,079 --> 00:12:44,399
guarantees as a scon

372
00:12:41,839 --> 00:12:46,079
the only difference is ciml2 where the

373
00:12:44,399 --> 00:12:48,240
fact that we have a tbc

374
00:12:46,079 --> 00:12:50,560
allows to perform attack verification

375
00:12:48,240 --> 00:12:52,320
based on the inverse of the tbc

376
00:12:50,560 --> 00:12:54,880
which is secure even with unbounded

377
00:12:52,320 --> 00:12:54,880
leakages

378
00:12:55,519 --> 00:13:00,160
we caused the last mile by describing

379
00:12:57,440 --> 00:13:01,760
great tree designs like tldt

380
00:13:00,160 --> 00:13:03,199
they provide strong confidentiality

381
00:13:01,760 --> 00:13:04,000
guarantees in front of decryption

382
00:13:03,200 --> 00:13:06,639
leakages

383
00:13:04,000 --> 00:13:08,399
by leveraging a second pass this

384
00:13:06,639 --> 00:13:10,320
guarantees that only well-formatted

385
00:13:08,399 --> 00:13:12,000
messages are going to leak

386
00:13:10,320 --> 00:13:14,079
leaving the adversary with the

387
00:13:12,000 --> 00:13:15,760
possibility to perform an spa against

388
00:13:14,079 --> 00:13:18,319
the ephemeral secrets of the bulk

389
00:13:15,760 --> 00:13:18,319
computation

390
00:13:19,040 --> 00:13:23,120
here again we have an alternative

391
00:13:20,480 --> 00:13:26,160
candidate called isap

392
00:13:23,120 --> 00:13:28,480
the differences between isap and tdt are

393
00:13:26,160 --> 00:13:30,560
that isap is based on permutations

394
00:13:28,480 --> 00:13:32,079
while tdt relies on treatable block

395
00:13:30,560 --> 00:13:34,800
ciphers

396
00:13:32,079 --> 00:13:35,920
also isap instantiates its key

397
00:13:34,800 --> 00:13:37,599
generation function

398
00:13:35,920 --> 00:13:39,120
and tag generation function with a

399
00:13:37,600 --> 00:13:41,519
hiking scheme

400
00:13:39,120 --> 00:13:42,480
the goal of the raking is to provide dp

401
00:13:41,519 --> 00:13:44,399
security

402
00:13:42,480 --> 00:13:46,839
thanks to multiple executions of a

403
00:13:44,399 --> 00:13:49,920
permutation that is only secure against

404
00:13:46,839 --> 00:13:51,680
sp okay

405
00:13:49,920 --> 00:13:53,360
so the previous discussion showed that

406
00:13:51,680 --> 00:13:55,359
different modes of operation can

407
00:13:53,360 --> 00:13:57,120
leverage different design tweaks

408
00:13:55,360 --> 00:13:59,839
in order to improve security against

409
00:13:57,120 --> 00:14:00,639
leakage and we now briefly discussed the

410
00:13:59,839 --> 00:14:04,639
concrete

411
00:14:00,639 --> 00:14:04,639
impact of these different design tricks

412
00:14:04,880 --> 00:14:08,480
so the main question is probably whether

413
00:14:07,120 --> 00:14:10,399
leveled implementations

414
00:14:08,480 --> 00:14:12,000
where different parts of a design have

415
00:14:10,399 --> 00:14:13,360
different levels of security against

416
00:14:12,000 --> 00:14:15,279
physical attacks

417
00:14:13,360 --> 00:14:16,480
can bring performance gains over

418
00:14:15,279 --> 00:14:19,439
uniformly protected

419
00:14:16,480 --> 00:14:21,360
implementations for this purpose we

420
00:14:19,440 --> 00:14:22,079
analyzed the energy performances in

421
00:14:21,360 --> 00:14:24,560
hardware

422
00:14:22,079 --> 00:14:27,920
of a leveled implementation of spook and

423
00:14:24,560 --> 00:14:30,479
a uniform implementation of ocb

424
00:14:27,920 --> 00:14:32,719
the main conclusions are that the

425
00:14:30,480 --> 00:14:34,399
overheads of leveled implementations are

426
00:14:32,720 --> 00:14:36,240
limited for short messages

427
00:14:34,399 --> 00:14:37,760
and the gains can be very significant

428
00:14:36,240 --> 00:14:39,519
for long messages

429
00:14:37,760 --> 00:14:41,519
especially when the physical security of

430
00:14:39,519 --> 00:14:42,639
the key generation function and the tag

431
00:14:41,519 --> 00:14:45,040
generation function

432
00:14:42,639 --> 00:14:47,760
increases because of higher order

433
00:14:45,040 --> 00:14:47,760
masking schemes

434
00:14:47,920 --> 00:14:52,240
we also analyzed other design tweaks for

435
00:14:50,560 --> 00:14:52,800
example we looked at the key generation

436
00:14:52,240 --> 00:14:54,399
function

437
00:14:52,800 --> 00:14:56,240
and the tag generation function

438
00:14:54,399 --> 00:14:57,600
implemented with a sponge or retrievable

439
00:14:56,240 --> 00:14:59,680
block cipher

440
00:14:57,600 --> 00:15:01,360
we conclude that treatable box ciphers

441
00:14:59,680 --> 00:15:04,560
can gain interest when high side channel

442
00:15:01,360 --> 00:15:04,560
security is needed

443
00:15:04,639 --> 00:15:08,399
we also looked at the tag verification

444
00:15:07,360 --> 00:15:10,639
implemented

445
00:15:08,399 --> 00:15:12,800
in the forward way and masked or

446
00:15:10,639 --> 00:15:14,880
implemented in the unprotected way with

447
00:15:12,800 --> 00:15:16,560
the inverse tbc

448
00:15:14,880 --> 00:15:18,480
there we conclude that overheads are

449
00:15:16,560 --> 00:15:19,760
quite similar and anyway limited

450
00:15:18,480 --> 00:15:20,800
compared to the cost of the key

451
00:15:19,760 --> 00:15:23,839
generation function

452
00:15:20,800 --> 00:15:26,240
and tag generation function

453
00:15:23,839 --> 00:15:27,920
and finally we discussed the

454
00:15:26,240 --> 00:15:29,839
instantiation of the key generation

455
00:15:27,920 --> 00:15:31,120
function and tag generation function

456
00:15:29,839 --> 00:15:34,399
with freshway keying

457
00:15:31,120 --> 00:15:36,000
or the mask to tweakable block cipher

458
00:15:34,399 --> 00:15:37,839
there are the short summaries that they

459
00:15:36,000 --> 00:15:39,440
aim at different goals

460
00:15:37,839 --> 00:15:42,639
for freshway keying the goal is to

461
00:15:39,440 --> 00:15:45,040
reduce dpa security to sps security

462
00:15:42,639 --> 00:15:47,120
it is therefore easy to implement but

463
00:15:45,040 --> 00:15:49,199
all the overheads are primitive based

464
00:15:47,120 --> 00:15:51,120
and they will always be there

465
00:15:49,199 --> 00:15:52,880
we also show in the paper that spsa

466
00:15:51,120 --> 00:15:53,360
critique can sometimes be broken on

467
00:15:52,880 --> 00:15:56,399
small

468
00:15:53,360 --> 00:15:58,320
unprotected devices for masking it

469
00:15:56,399 --> 00:16:01,040
rather aims at high security

470
00:15:58,320 --> 00:16:01,680
which will require expertise but the

471
00:16:01,040 --> 00:16:04,160
advantage

472
00:16:01,680 --> 00:16:06,160
is that the implementation overheads are

473
00:16:04,160 --> 00:16:07,680
more flexible because you can choose the

474
00:16:06,160 --> 00:16:11,040
security level that you want in

475
00:16:07,680 --> 00:16:11,040
encryption and decryption

476
00:16:11,519 --> 00:16:15,199
so this finally leads us to the

477
00:16:13,199 --> 00:16:17,599
conclusions and open problems of the

478
00:16:15,199 --> 00:16:17,599
paper

479
00:16:17,759 --> 00:16:22,079
in this respect one important conclusion

480
00:16:20,079 --> 00:16:24,160
for cryptographic research is that there

481
00:16:22,079 --> 00:16:25,839
is no single right definition of

482
00:16:24,160 --> 00:16:28,079
leakage-resistant authenticated

483
00:16:25,839 --> 00:16:30,240
encryption we rather have a kind of

484
00:16:28,079 --> 00:16:32,000
continuous trade-off between mode level

485
00:16:30,240 --> 00:16:33,600
and implementation level leakage

486
00:16:32,000 --> 00:16:35,519
resistance and

487
00:16:33,600 --> 00:16:37,199
as the security required by an

488
00:16:35,519 --> 00:16:39,680
application increases

489
00:16:37,199 --> 00:16:41,519
whether in terms of security target or

490
00:16:39,680 --> 00:16:43,199
quantitative security level

491
00:16:41,519 --> 00:16:45,040
we know that leveraging more level

492
00:16:43,199 --> 00:16:47,040
guarantees is going to gain more and

493
00:16:45,040 --> 00:16:49,519
more interest

494
00:16:47,040 --> 00:16:51,279
this leads to various open questions for

495
00:16:49,519 --> 00:16:53,279
example which mode is best

496
00:16:51,279 --> 00:16:54,399
in which context and this of course

497
00:16:53,279 --> 00:16:56,320
requires having

498
00:16:54,399 --> 00:16:58,399
concrete security evaluations and

499
00:16:56,320 --> 00:16:59,680
implementation results in order to be

500
00:16:58,399 --> 00:17:02,639
able to compare things

501
00:16:59,680 --> 00:17:04,000
very rigorously another question is

502
00:17:02,639 --> 00:17:05,839
whether we could find improved

503
00:17:04,000 --> 00:17:08,720
candidates for the various grades

504
00:17:05,839 --> 00:17:10,879
that we introduced a third question is

505
00:17:08,720 --> 00:17:12,400
about a finer grain analysis and whether

506
00:17:10,880 --> 00:17:14,160
other security targets could be

507
00:17:12,400 --> 00:17:17,120
interesting to capture certain

508
00:17:14,160 --> 00:17:18,559
applications and finally of course

509
00:17:17,119 --> 00:17:20,639
bridging the gaps between

510
00:17:18,559 --> 00:17:24,480
theory and practice and in particular

511
00:17:20,640 --> 00:17:24,480
finding better physical assumptions

512
00:17:24,559 --> 00:17:28,520
and with this i thank you for your

513
00:17:26,160 --> 00:17:31,520
attention and will be happy to answer

514
00:17:28,520 --> 00:17:31,520
questions

