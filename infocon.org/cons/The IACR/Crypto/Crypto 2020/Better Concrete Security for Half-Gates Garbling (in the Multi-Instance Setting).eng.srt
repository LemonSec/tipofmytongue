1
00:00:00,960 --> 00:00:05,279
thank you for watching this video i'm

2
00:00:02,639 --> 00:00:07,279
wun chenkai from northwestern university

3
00:00:05,279 --> 00:00:10,000
and in this video i'll talk about our

4
00:00:07,279 --> 00:00:11,759
paper better concrete security for half

5
00:00:10,000 --> 00:00:13,040
guest gardening in the multi-instance

6
00:00:11,759 --> 00:00:15,040
setting

7
00:00:13,040 --> 00:00:16,960
this is a joint work with professor's

8
00:00:15,040 --> 00:00:20,799
question johnson cats

9
00:00:16,960 --> 00:00:22,160
won xiao and first please let me review

10
00:00:20,800 --> 00:00:24,160
your scalpel circuits

11
00:00:22,160 --> 00:00:25,519
the yellow scope circuit is a two body

12
00:00:24,160 --> 00:00:27,599
computation protocol

13
00:00:25,519 --> 00:00:29,598
it allows two parties to join the

14
00:00:27,599 --> 00:00:31,439
compute function without revealing

15
00:00:29,599 --> 00:00:32,719
anything beyond the output of that

16
00:00:31,439 --> 00:00:36,160
function

17
00:00:32,719 --> 00:00:38,079
and the javascript circuits represents a

18
00:00:36,160 --> 00:00:40,879
function as a boolean circuit

19
00:00:38,079 --> 00:00:42,879
with and gates and xor gates and

20
00:00:40,879 --> 00:00:45,199
encrypts the computation gate by gates

21
00:00:42,879 --> 00:00:47,440
to maintain the privacy

22
00:00:45,200 --> 00:00:49,039
over years there are many optimizations

23
00:00:47,440 --> 00:00:52,640
for the governor circuits

24
00:00:49,039 --> 00:00:54,559
including point permute free exo and the

25
00:00:52,640 --> 00:00:57,039
garbage dual reduction

26
00:00:54,559 --> 00:00:57,599
another important optimization is a half

27
00:00:57,039 --> 00:01:00,559
case

28
00:00:57,600 --> 00:01:00,960
it is the state-of-the-art goblin scheme

29
00:01:00,559 --> 00:01:04,319
and

30
00:01:00,960 --> 00:01:06,400
as we know that uh before the

31
00:01:04,319 --> 00:01:08,158
double circuit has a huge burden on the

32
00:01:06,400 --> 00:01:10,799
network communication

33
00:01:08,159 --> 00:01:12,240
before the half gate the free xl

34
00:01:10,799 --> 00:01:15,200
technique has made the

35
00:01:12,240 --> 00:01:17,119
computation of the xor gate free and the

36
00:01:15,200 --> 00:01:18,560
half gates reduce the network

37
00:01:17,119 --> 00:01:22,080
communication on the

38
00:01:18,560 --> 00:01:24,320
computation of the and the gate

39
00:01:22,080 --> 00:01:26,240
and uh it's also compatible with all

40
00:01:24,320 --> 00:01:28,639
these optimizations

41
00:01:26,240 --> 00:01:30,560
another important optimization is the

42
00:01:28,640 --> 00:01:32,880
fixed key aes based scarlet

43
00:01:30,560 --> 00:01:34,000
it was first appeared in the just global

44
00:01:32,880 --> 00:01:37,439
scheme

45
00:01:34,000 --> 00:01:40,799
and it makes full use of the

46
00:01:37,439 --> 00:01:42,000
hardware support to instantiate the hash

47
00:01:40,799 --> 00:01:45,119
function in the

48
00:01:42,000 --> 00:01:47,280
double circuit using the fixed key aes

49
00:01:45,119 --> 00:01:48,560
so it reduce the overhead of the

50
00:01:47,280 --> 00:01:51,280
computation

51
00:01:48,560 --> 00:01:54,000
and we are pay attention to these two

52
00:01:51,280 --> 00:01:56,000
optimizations because we find that when

53
00:01:54,000 --> 00:01:59,600
the hash function the half gate

54
00:01:56,000 --> 00:02:04,000
is instantiated with the fixed key aes

55
00:01:59,600 --> 00:02:04,000
there could be a compromise of security

56
00:02:06,000 --> 00:02:11,280
in this paper we gave a systematic study

57
00:02:09,280 --> 00:02:12,400
on the concrete security of the half

58
00:02:11,280 --> 00:02:14,640
gauge

59
00:02:12,400 --> 00:02:17,360
and first i'll show an attack on the

60
00:02:14,640 --> 00:02:18,799
current health case implementations

61
00:02:17,360 --> 00:02:20,480
then i'll point out where the

62
00:02:18,800 --> 00:02:23,280
deficiencies are

63
00:02:20,480 --> 00:02:24,399
and it is directly caused by the

64
00:02:23,280 --> 00:02:26,720
inappropriate

65
00:02:24,400 --> 00:02:28,800
instantiation of the hash function based

66
00:02:26,720 --> 00:02:31,120
on the fixed key aes

67
00:02:28,800 --> 00:02:33,680
and also there is a lack of concrete

68
00:02:31,120 --> 00:02:36,160
security on the previous papers

69
00:02:33,680 --> 00:02:38,239
and mostly they just focus on the

70
00:02:36,160 --> 00:02:40,799
asymptotic security bond

71
00:02:38,239 --> 00:02:43,200
and that's that's also the reason that

72
00:02:40,800 --> 00:02:45,680
people ignore this attack

73
00:02:43,200 --> 00:02:48,640
at last i'll give a new abstraction and

74
00:02:45,680 --> 00:02:50,560
the construction of our hash function

75
00:02:48,640 --> 00:02:52,720
and it is called the multi-instance

76
00:02:50,560 --> 00:02:53,680
takable circular correlation robust hash

77
00:02:52,720 --> 00:02:56,560
function

78
00:02:53,680 --> 00:02:57,840
i'll provide a new and a better concrete

79
00:02:56,560 --> 00:02:59,599
security bond

80
00:02:57,840 --> 00:03:01,200
and at last i'll show our

81
00:02:59,599 --> 00:03:05,839
implementations and

82
00:03:01,200 --> 00:03:05,839
its performance

83
00:03:07,680 --> 00:03:11,680
the weakness of the half case

84
00:03:09,360 --> 00:03:14,720
implementation mainly lies on the fixed

85
00:03:11,680 --> 00:03:16,800
key aes based hash function

86
00:03:14,720 --> 00:03:17,840
and in our attacks the attackers succeed

87
00:03:16,800 --> 00:03:20,319
succeeding running

88
00:03:17,840 --> 00:03:21,120
time proportional to the 2 to the k over

89
00:03:20,319 --> 00:03:23,760
c

90
00:03:21,120 --> 00:03:24,239
here the k is the b length of the double

91
00:03:23,760 --> 00:03:26,879
label

92
00:03:24,239 --> 00:03:28,480
and the c is the number of and gates in

93
00:03:26,879 --> 00:03:31,920
the circuit

94
00:03:28,480 --> 00:03:32,399
if the third generator gobbles a circuit

95
00:03:31,920 --> 00:03:35,518
with

96
00:03:32,400 --> 00:03:38,080
8 80 bit label and the number of and

97
00:03:35,519 --> 00:03:40,159
gates in the circuit is 2 to the 40

98
00:03:38,080 --> 00:03:41,519
then this circuit can be completely

99
00:03:40,159 --> 00:03:45,920
broken

100
00:03:41,519 --> 00:03:46,560
and the run the attacking time would be

101
00:03:45,920 --> 00:03:49,440
wasting

102
00:03:46,560 --> 00:03:50,560
several days and if we run the at the

103
00:03:49,440 --> 00:03:54,159
attack in the cloud

104
00:03:50,560 --> 00:03:57,040
it would just cost several dollars and

105
00:03:54,159 --> 00:03:58,798
the circuit with the label b length of

106
00:03:57,040 --> 00:04:02,400
the label 128

107
00:03:58,799 --> 00:04:06,879
and the number of and gate 2 to the 40

108
00:04:02,400 --> 00:04:09,200
has only more than 80 b security left

109
00:04:06,879 --> 00:04:11,040
and we actually implemented our attack

110
00:04:09,200 --> 00:04:14,560
and the results of the attack

111
00:04:11,040 --> 00:04:16,079
is consistent with our analysis and also

112
00:04:14,560 --> 00:04:18,880
this attack can be

113
00:04:16,079 --> 00:04:19,680
being extended to multi-instance case it

114
00:04:18,880 --> 00:04:21,759
means that

115
00:04:19,680 --> 00:04:22,720
when the anniversary receives more

116
00:04:21,759 --> 00:04:25,520
circuits

117
00:04:22,720 --> 00:04:26,160
uh it can apply this attack on all of

118
00:04:25,520 --> 00:04:28,000
sun

119
00:04:26,160 --> 00:04:29,759
and there will be a higher chance for

120
00:04:28,000 --> 00:04:32,240
the anniversary to break out of the

121
00:04:29,759 --> 00:04:32,240
circuit

122
00:04:32,880 --> 00:04:36,320
before we step into the details of the

123
00:04:35,600 --> 00:04:39,520
attack

124
00:04:36,320 --> 00:04:41,120
let me introduce the half gate protocol

125
00:04:39,520 --> 00:04:43,120
in the hearthgate protocol there are two

126
00:04:41,120 --> 00:04:45,199
parties one is the circuit generator and

127
00:04:43,120 --> 00:04:47,520
another is the circuit evaluator

128
00:04:45,199 --> 00:04:50,240
when gobbling and gate the circuit

129
00:04:47,520 --> 00:04:52,479
generator will prepare the

130
00:04:50,240 --> 00:04:54,639
labels for each wire for example in each

131
00:04:52,479 --> 00:04:58,960
one in this wire

132
00:04:54,639 --> 00:05:00,400
double a0 is a zero label and the wa00xr

133
00:04:58,960 --> 00:05:04,000
is a one label

134
00:05:00,400 --> 00:05:06,638
and this r is a global delta it's a

135
00:05:04,000 --> 00:05:08,479
correlation between two labels and

136
00:05:06,639 --> 00:05:11,840
it's it makes it compatible with the

137
00:05:08,479 --> 00:05:11,840
free xl technique

138
00:05:12,320 --> 00:05:18,320
then a standard circuit generator will

139
00:05:15,440 --> 00:05:19,440
construct a global table consists of tg

140
00:05:18,320 --> 00:05:21,199
and te

141
00:05:19,440 --> 00:05:22,719
and then sends the global table to the

142
00:05:21,199 --> 00:05:24,800
circuit evaluator

143
00:05:22,720 --> 00:05:26,560
and the circuit evaluator at this time

144
00:05:24,800 --> 00:05:29,280
has two labels

145
00:05:26,560 --> 00:05:31,120
for the input wire it you are used to

146
00:05:29,280 --> 00:05:34,320
these two labels and

147
00:05:31,120 --> 00:05:35,120
the carbon table to compute the output

148
00:05:34,320 --> 00:05:38,159
label of the

149
00:05:35,120 --> 00:05:40,080
of this output wire and

150
00:05:38,160 --> 00:05:42,639
here we need to pay attention to these

151
00:05:40,080 --> 00:05:45,758
two elements one is the tg in the

152
00:05:42,639 --> 00:05:47,520
gable table it's a linear combination of

153
00:05:45,759 --> 00:05:51,039
the

154
00:05:47,520 --> 00:05:54,080
hash of the zero label and the one label

155
00:05:51,039 --> 00:05:56,800
and another is double a label in the

156
00:05:54,080 --> 00:05:56,800
input wire

157
00:05:57,759 --> 00:06:00,960
here is the details of the attack after

158
00:06:00,479 --> 00:06:03,039
the

159
00:06:00,960 --> 00:06:04,318
evaluator received the tg in the ground

160
00:06:03,039 --> 00:06:08,000
table it can compute

161
00:06:04,319 --> 00:06:11,199
wa which equals to t g x or

162
00:06:08,000 --> 00:06:14,479
the hash of w a and j this j is a

163
00:06:11,199 --> 00:06:17,520
gate identifier it's just a number

164
00:06:14,479 --> 00:06:20,800
indicating which gate it is and

165
00:06:17,520 --> 00:06:21,599
it equals to this and pb is just the

166
00:06:20,800 --> 00:06:24,639
random bit

167
00:06:21,600 --> 00:06:26,080
so there is a one half a chance that pv

168
00:06:24,639 --> 00:06:28,880
will equal to zero

169
00:06:26,080 --> 00:06:29,680
in this situation uh distance is

170
00:06:28,880 --> 00:06:33,199
cancelled

171
00:06:29,680 --> 00:06:36,319
and and the hda equals to the hedge of

172
00:06:33,199 --> 00:06:38,319
a x or r and j to look

173
00:06:36,319 --> 00:06:40,160
into more details we need to know how

174
00:06:38,319 --> 00:06:43,759
this hash is implemented

175
00:06:40,160 --> 00:06:46,880
currently uh it's a little bit like the

176
00:06:43,759 --> 00:06:50,960
mmo compression function except

177
00:06:46,880 --> 00:06:53,039
this as this pi now is a uh

178
00:06:50,960 --> 00:06:54,080
fixed key block cipher it means that it

179
00:06:53,039 --> 00:06:57,280
has a fixed

180
00:06:54,080 --> 00:06:59,359
and a public key and the k is the

181
00:06:57,280 --> 00:07:01,039
combination of input x and the gate

182
00:06:59,360 --> 00:07:04,880
identifier j

183
00:07:01,039 --> 00:07:09,039
so in detail this h a equals to

184
00:07:04,880 --> 00:07:09,680
distance and here the evaluator knows wa

185
00:07:09,039 --> 00:07:12,479
label

186
00:07:09,680 --> 00:07:12,880
it knows circuit identifier and it knows

187
00:07:12,479 --> 00:07:16,000
this

188
00:07:12,880 --> 00:07:20,719
a block cipher the only thing that

189
00:07:16,000 --> 00:07:25,360
the evaluator doesn't know is r uh

190
00:07:20,720 --> 00:07:28,800
so if it happens to know a w star

191
00:07:25,360 --> 00:07:29,199
where the hash of w star which according

192
00:07:28,800 --> 00:07:31,680
to

193
00:07:29,199 --> 00:07:33,039
the implementation of this hash function

194
00:07:31,680 --> 00:07:36,240
equals to

195
00:07:33,039 --> 00:07:39,840
this h a then it can reverse

196
00:07:36,240 --> 00:07:42,639
this turn and the guess r r is

197
00:07:39,840 --> 00:07:43,758
r is the thing that keeps the privacy of

198
00:07:42,639 --> 00:07:46,080
this circuit

199
00:07:43,759 --> 00:07:47,759
if the circuit evaluator knows r then it

200
00:07:46,080 --> 00:07:51,599
can break the whole

201
00:07:47,759 --> 00:07:54,720
circuit so for e and

202
00:07:51,599 --> 00:07:55,919
for each and gate the evaluator knows

203
00:07:54,720 --> 00:07:59,199
one of this

204
00:07:55,919 --> 00:08:02,639
knows one of these pairs then

205
00:07:59,199 --> 00:08:05,759
for the whole circuit the evaluator can

206
00:08:02,639 --> 00:08:10,160
collect all these pairs and make it into

207
00:08:05,759 --> 00:08:14,160
a table and here is what how the

208
00:08:10,160 --> 00:08:15,840
attack goes when the evaluator is

209
00:08:14,160 --> 00:08:18,479
controlled by an adversary

210
00:08:15,840 --> 00:08:19,359
the adversary will randomly generate a

211
00:08:18,479 --> 00:08:23,440
double star

212
00:08:19,360 --> 00:08:26,560
then puts this in this hash oracle

213
00:08:23,440 --> 00:08:27,759
and the oracle gives an output of this h

214
00:08:26,560 --> 00:08:31,680
star

215
00:08:27,759 --> 00:08:33,120
uh then it will check if this h star

216
00:08:31,680 --> 00:08:36,560
happens to

217
00:08:33,120 --> 00:08:38,719
uh equal to one of the h a here if it

218
00:08:36,559 --> 00:08:41,598
does there's a chance that it can it can

219
00:08:38,719 --> 00:08:43,760
reverse the term we just think and the

220
00:08:41,599 --> 00:08:46,560
guess are then it will just break the

221
00:08:43,760 --> 00:08:46,560
whole circuit

222
00:08:46,959 --> 00:08:51,920
and we actually implemented this attack

223
00:08:49,839 --> 00:08:54,800
here is the result of our

224
00:08:51,920 --> 00:08:57,279
implementation from the level figure we

225
00:08:54,800 --> 00:09:00,399
can see that

226
00:08:57,279 --> 00:09:03,439
when we collect more number of

227
00:09:00,399 --> 00:09:05,680
and gates it would take uh

228
00:09:03,440 --> 00:09:07,680
the adversary less queries to the oracle

229
00:09:05,680 --> 00:09:10,239
it means that it takes the anniversary

230
00:09:07,680 --> 00:09:12,719
last time to break this circuit

231
00:09:10,240 --> 00:09:12,720
and uh

232
00:09:13,279 --> 00:09:16,880
it means that the larger the circuit is

233
00:09:15,839 --> 00:09:19,200
it is

234
00:09:16,880 --> 00:09:20,160
easier the adversary will break this

235
00:09:19,200 --> 00:09:23,600
circuit

236
00:09:20,160 --> 00:09:27,360
and at the right side uh it is uh

237
00:09:23,600 --> 00:09:28,800
uh we tried that we tried to break the

238
00:09:27,360 --> 00:09:32,080
circuit of different

239
00:09:28,800 --> 00:09:35,760
b lengths of the labels we tried at most

240
00:09:32,080 --> 00:09:39,200
for a large circuit which has uh

241
00:09:35,760 --> 00:09:43,120
labels of 6 4 bit and it just takes it

242
00:09:39,200 --> 00:09:46,560
a couple of hours to break it

243
00:09:43,120 --> 00:09:49,680
if we interpolate this line and when the

244
00:09:46,560 --> 00:09:55,079
bit size of the label is

245
00:09:49,680 --> 00:09:59,199
80 we predict that we'll it'll take just

246
00:09:55,080 --> 00:10:01,200
207 machine months to break this circuit

247
00:09:59,200 --> 00:10:02,880
and if we want in the google cloud they

248
00:10:01,200 --> 00:10:06,000
will just take

249
00:10:02,880 --> 00:10:08,399
around 3500 dollars

250
00:10:06,000 --> 00:10:09,279
and because this attack is highly

251
00:10:08,399 --> 00:10:12,040
parallel

252
00:10:09,279 --> 00:10:13,839
if we set out more machines for example

253
00:10:12,040 --> 00:10:18,399
267 machines

254
00:10:13,839 --> 00:10:21,120
but we can breathe a circuit in a mouse

255
00:10:18,399 --> 00:10:23,120
after knowing uh what this attack is

256
00:10:21,120 --> 00:10:24,959
like it's time to think about how to fix

257
00:10:23,120 --> 00:10:27,839
this problem

258
00:10:24,959 --> 00:10:29,199
the first problem comes from the fixed

259
00:10:27,839 --> 00:10:32,720
key aes

260
00:10:29,200 --> 00:10:35,519
because the key is fixed in public

261
00:10:32,720 --> 00:10:35,760
the the adversary can continuously occur

262
00:10:35,519 --> 00:10:38,480
with

263
00:10:35,760 --> 00:10:38,880
oracle uh to the brute force attack and

264
00:10:38,480 --> 00:10:41,760
uh

265
00:10:38,880 --> 00:10:44,640
guess the pre-image of the hash values

266
00:10:41,760 --> 00:10:47,680
uh the second problem comes from

267
00:10:44,640 --> 00:10:51,600
the lack of the concrete security bond

268
00:10:47,680 --> 00:10:54,000
the synthetic security bond is not solid

269
00:10:51,600 --> 00:10:55,360
because the circuit size can be very

270
00:10:54,000 --> 00:10:58,079
large

271
00:10:55,360 --> 00:11:00,000
and the first step we need to do to get

272
00:10:58,079 --> 00:11:03,359
a better concrete security bond is

273
00:11:00,000 --> 00:11:06,160
to design a new abstraction for the

274
00:11:03,360 --> 00:11:07,440
half gate protocol and which can

275
00:11:06,160 --> 00:11:10,000
guarantee that

276
00:11:07,440 --> 00:11:11,440
the concrete security of the half gate

277
00:11:10,000 --> 00:11:13,680
protocol

278
00:11:11,440 --> 00:11:15,440
the next step is to design a new hash

279
00:11:13,680 --> 00:11:17,120
function which can satisfy all the

280
00:11:15,440 --> 00:11:19,760
security requirements from the

281
00:11:17,120 --> 00:11:19,760
abstraction

282
00:11:20,720 --> 00:11:26,480
this is abstraction design for the new

283
00:11:24,079 --> 00:11:27,920
cavegate goblin scheme it's called

284
00:11:26,480 --> 00:11:29,920
multi-instance checkable

285
00:11:27,920 --> 00:11:32,560
circular correlation robust hash

286
00:11:29,920 --> 00:11:35,760
function it takes three inputs

287
00:11:32,560 --> 00:11:38,959
the first w refers to the input

288
00:11:35,760 --> 00:11:41,360
label the second i refers to the gate

289
00:11:38,959 --> 00:11:45,040
identifier and now we call it a tweak

290
00:11:41,360 --> 00:11:47,519
the b refers to that random bit

291
00:11:45,040 --> 00:11:49,839
and clearly it models the use of the

292
00:11:47,519 --> 00:11:52,399
hash function in the goblin screen

293
00:11:49,839 --> 00:11:53,519
and the output is a hash of wx store

294
00:11:52,399 --> 00:11:56,720
global delta r

295
00:11:53,519 --> 00:11:59,120
with tweak i and the linear combination

296
00:11:56,720 --> 00:12:02,079
of the global delta

297
00:11:59,120 --> 00:12:03,920
and the security definition of this hash

298
00:12:02,079 --> 00:12:05,399
function requires that these hash

299
00:12:03,920 --> 00:12:07,439
functions should be

300
00:12:05,399 --> 00:12:08,959
indistinguishable from the random

301
00:12:07,440 --> 00:12:10,880
functions

302
00:12:08,959 --> 00:12:13,359
and there are two additional

303
00:12:10,880 --> 00:12:15,920
requirements for this hash function

304
00:12:13,360 --> 00:12:18,079
first that we assume the attacker is

305
00:12:15,920 --> 00:12:20,479
given new instances

306
00:12:18,079 --> 00:12:21,839
because our attack applies to the

307
00:12:20,480 --> 00:12:25,279
multi-instance setting

308
00:12:21,839 --> 00:12:27,760
so we take it into consideration and

309
00:12:25,279 --> 00:12:28,639
another requirement is that the queries

310
00:12:27,760 --> 00:12:30,560
of this form

311
00:12:28,639 --> 00:12:31,920
should be called for and the most new

312
00:12:30,560 --> 00:12:34,638
times

313
00:12:31,920 --> 00:12:36,000
and it also means that these tweaks can

314
00:12:34,639 --> 00:12:39,440
be used for at the most

315
00:12:36,000 --> 00:12:41,040
meal times

316
00:12:39,440 --> 00:12:44,320
this is the hash function that we

317
00:12:41,040 --> 00:12:48,160
designed in the sense of the abstraction

318
00:12:44,320 --> 00:12:50,800
it's called mmoe and it has two

319
00:12:48,160 --> 00:12:51,600
inputs the first input x is the input

320
00:12:50,800 --> 00:12:54,800
message

321
00:12:51,600 --> 00:12:57,920
the second input i is the trick

322
00:12:54,800 --> 00:13:00,800
here the sigma x is a linear osmosis

323
00:12:57,920 --> 00:13:01,279
it has two properties it is linear if

324
00:13:00,800 --> 00:13:05,439
sigma

325
00:13:01,279 --> 00:13:08,399
x x or y equals to sigma x x or sigma y

326
00:13:05,440 --> 00:13:11,200
it is also it is also more efficient if

327
00:13:08,399 --> 00:13:14,399
a sigma actually itself is a permutation

328
00:13:11,200 --> 00:13:16,880
and at the same time sigma x xor x

329
00:13:14,399 --> 00:13:18,240
is also a permutation and there are many

330
00:13:16,880 --> 00:13:20,480
ways to realize

331
00:13:18,240 --> 00:13:21,440
linear symmetry and we choose one that

332
00:13:20,480 --> 00:13:24,720
is simple and

333
00:13:21,440 --> 00:13:25,279
friendly to the hardware support here

334
00:13:24,720 --> 00:13:29,040
the e

335
00:13:25,279 --> 00:13:32,560
is modeled as an ideal cipher the key is

336
00:13:29,040 --> 00:13:33,199
this tweak i it means that every time we

337
00:13:32,560 --> 00:13:35,359
change

338
00:13:33,200 --> 00:13:37,200
this tweak i will have to do a key

339
00:13:35,360 --> 00:13:41,120
scheduling

340
00:13:37,200 --> 00:13:42,800
for this e which is ideal cipher

341
00:13:41,120 --> 00:13:44,480
it's different from the previous

342
00:13:42,800 --> 00:13:48,240
insecure implementation

343
00:13:44,480 --> 00:13:49,920
where they use a fixed key aes as a

344
00:13:48,240 --> 00:13:51,839
random permutation

345
00:13:49,920 --> 00:13:55,839
and they they just have to do the key

346
00:13:51,839 --> 00:13:55,839
scheduling runtime before the goblin

347
00:13:55,920 --> 00:13:59,199
after the design of the hash function we

348
00:13:58,639 --> 00:14:00,880
embed

349
00:13:59,199 --> 00:14:03,519
the hash function back to our

350
00:14:00,880 --> 00:14:05,199
abstraction and derive a new concrete

351
00:14:03,519 --> 00:14:08,320
security bound

352
00:14:05,199 --> 00:14:10,639
here the mu is the maximum time that a

353
00:14:08,320 --> 00:14:12,959
trick i can be reused

354
00:14:10,639 --> 00:14:14,240
and p is the number of queries the

355
00:14:12,959 --> 00:14:17,359
adversary can make

356
00:14:14,240 --> 00:14:19,279
to the ideal cipher e and the queue is

357
00:14:17,360 --> 00:14:21,519
the number of carriers that the other

358
00:14:19,279 --> 00:14:23,920
three made to other oracles

359
00:14:21,519 --> 00:14:25,600
and this row is the entropy of this

360
00:14:23,920 --> 00:14:29,120
global delta r

361
00:14:25,600 --> 00:14:31,440
and it's it this security bond can

362
00:14:29,120 --> 00:14:33,040
guarantee the concrete security for the

363
00:14:31,440 --> 00:14:35,199
single instance case

364
00:14:33,040 --> 00:14:36,719
but when we consider the multi-instance

365
00:14:35,199 --> 00:14:40,319
case

366
00:14:36,720 --> 00:14:41,519
actually this meal can contains a little

367
00:14:40,320 --> 00:14:44,639
uncertainty

368
00:14:41,519 --> 00:14:45,519
because when the gobbler regardless

369
00:14:44,639 --> 00:14:48,560
circuits

370
00:14:45,519 --> 00:14:52,639
it can go different circuits the

371
00:14:48,560 --> 00:14:56,000
it can use reuse this

372
00:14:52,639 --> 00:14:59,440
uh tweak for multiple times so this

373
00:14:56,000 --> 00:15:03,600
meal can be as large as this u

374
00:14:59,440 --> 00:15:06,000
so how do we fix this problem

375
00:15:03,600 --> 00:15:08,399
and there is an easy way to do this

376
00:15:06,000 --> 00:15:08,720
instead of starting this gate identifier

377
00:15:08,399 --> 00:15:11,279
i

378
00:15:08,720 --> 00:15:13,040
from one we can start it from a random

379
00:15:11,279 --> 00:15:16,240
point

380
00:15:13,040 --> 00:15:18,639
we for every time when the circuit

381
00:15:16,240 --> 00:15:22,320
generator generates a new circuit

382
00:15:18,639 --> 00:15:23,360
it generates a random point and uh start

383
00:15:22,320 --> 00:15:26,079
this tweak

384
00:15:23,360 --> 00:15:27,839
from the random point and then there is

385
00:15:26,079 --> 00:15:31,199
a low chance that

386
00:15:27,839 --> 00:15:34,000
this trick will be reduced

387
00:15:31,199 --> 00:15:35,839
and this can be proved using the boss

388
00:15:34,000 --> 00:15:38,000
and beans game

389
00:15:35,839 --> 00:15:39,040
putting all these efforts together we

390
00:15:38,000 --> 00:15:41,759
can derive

391
00:15:39,040 --> 00:15:42,560
our ultimate concur the security bond

392
00:15:41,759 --> 00:15:45,920
here the mu

393
00:15:42,560 --> 00:15:47,040
is times that trig can be reused it has

394
00:15:45,920 --> 00:15:50,160
been bounded

395
00:15:47,040 --> 00:15:50,959
by the starting the tweak from a random

396
00:15:50,160 --> 00:15:54,000
point

397
00:15:50,959 --> 00:15:57,758
and p is that the number of queries to

398
00:15:54,000 --> 00:16:00,240
the hash oracles and the c is the

399
00:15:57,759 --> 00:16:01,360
total sub total number of and gates in

400
00:16:00,240 --> 00:16:05,040
the circuit

401
00:16:01,360 --> 00:16:08,160
and the k is the bit less of the labels

402
00:16:05,040 --> 00:16:09,920
and the l is 128 because we instantiate

403
00:16:08,160 --> 00:16:14,319
our hash function using the

404
00:16:09,920 --> 00:16:15,360
aes 128 and and now even regarding to

405
00:16:14,320 --> 00:16:22,079
the

406
00:16:15,360 --> 00:16:25,360
practice this bond can be negligible

407
00:16:22,079 --> 00:16:29,120
that bundle we can get two important

408
00:16:25,360 --> 00:16:31,519
uh instructions for our implementation

409
00:16:29,120 --> 00:16:32,320
if we guard both circuits with atp

410
00:16:31,519 --> 00:16:34,639
labels

411
00:16:32,320 --> 00:16:36,399
and the total number of and gate is less

412
00:16:34,639 --> 00:16:39,279
than 2 to the 43

413
00:16:36,399 --> 00:16:40,480
then we can get 78 bit of computational

414
00:16:39,279 --> 00:16:44,160
security

415
00:16:40,480 --> 00:16:44,880
if we gobble circuits using the 128 bit

416
00:16:44,160 --> 00:16:47,199
label

417
00:16:44,880 --> 00:16:48,959
and the total number of and gate is less

418
00:16:47,199 --> 00:16:52,240
than 2 to the 61.

419
00:16:48,959 --> 00:16:54,880
we can get a 125 bit of computational

420
00:16:52,240 --> 00:16:54,880
security

421
00:16:56,560 --> 00:17:00,319
at last i'll introduce our

422
00:16:58,399 --> 00:17:02,560
implementation and performance

423
00:17:00,320 --> 00:17:04,559
as a reminder this is how we construct

424
00:17:02,560 --> 00:17:06,879
our hash function

425
00:17:04,559 --> 00:17:07,678
this is a pseudorandom permutation so we

426
00:17:06,880 --> 00:17:12,079
implement it

427
00:17:07,679 --> 00:17:13,280
using the aes 128 with the asni

428
00:17:12,079 --> 00:17:16,720
instructions

429
00:17:13,280 --> 00:17:19,839
and this sigma x is a linear osmosis

430
00:17:16,720 --> 00:17:23,280
and we implement it using the sse

431
00:17:19,839 --> 00:17:23,280
instructions from intel

432
00:17:23,679 --> 00:17:28,400
and uh because it's a key to random

433
00:17:26,559 --> 00:17:31,200
permutation so we have to do the key

434
00:17:28,400 --> 00:17:34,080
scheduling every time before we call it

435
00:17:31,200 --> 00:17:35,280
and it costs us it's all it will cost

436
00:17:34,080 --> 00:17:38,559
some time so we

437
00:17:35,280 --> 00:17:40,240
we find that uh grant has uh efficient

438
00:17:38,559 --> 00:17:42,879
implementation of the batch key

439
00:17:40,240 --> 00:17:45,120
scheduling in their ccs 15 paper

440
00:17:42,880 --> 00:17:47,200
and using their muscle we can batch

441
00:17:45,120 --> 00:17:50,399
eight key expansion together

442
00:17:47,200 --> 00:17:53,120
and maximize the efficiency

443
00:17:50,400 --> 00:17:53,520
and this table shows the original half

444
00:17:53,120 --> 00:17:56,000
gate

445
00:17:53,520 --> 00:17:57,200
performance and our new protocols

446
00:17:56,000 --> 00:18:01,360
performance

447
00:17:57,200 --> 00:18:04,880
and we can see from the security side

448
00:18:01,360 --> 00:18:08,879
we enhance the security from the 89

449
00:18:04,880 --> 00:18:12,799
bits from to the 125 bit bit

450
00:18:08,880 --> 00:18:15,120
when we use 128 bit label

451
00:18:12,799 --> 00:18:16,639
and for the efficiency when the network

452
00:18:15,120 --> 00:18:20,479
manufactures

453
00:18:16,640 --> 00:18:23,120
limited uh the performance are the same

454
00:18:20,480 --> 00:18:24,559
because in this situation the network is

455
00:18:23,120 --> 00:18:26,879
the main bottleneck

456
00:18:24,559 --> 00:18:28,720
and when there is enough network

457
00:18:26,880 --> 00:18:31,120
resource

458
00:18:28,720 --> 00:18:33,440
our implementation just 35 percent

459
00:18:31,120 --> 00:18:35,840
slower than zeros

460
00:18:33,440 --> 00:18:37,679
and after this paper is published we

461
00:18:35,840 --> 00:18:41,360
further optimize date now

462
00:18:37,679 --> 00:18:44,240
these numbers are 20. so each summary we

463
00:18:41,360 --> 00:18:47,600
enhanced the security but made later

464
00:18:44,240 --> 00:18:49,919
compromise on the efficiency

465
00:18:47,600 --> 00:18:53,199
and of this code has been published in

466
00:18:49,919 --> 00:18:56,960
the emp toolkit and this is

467
00:18:53,200 --> 00:18:59,039
this is a link to the codes

468
00:18:56,960 --> 00:19:00,960
and also there's a link to our full

469
00:18:59,039 --> 00:19:02,799
version of the paper

470
00:19:00,960 --> 00:19:06,160
and that's the full content of this

471
00:19:02,799 --> 00:19:06,160
video thank you

