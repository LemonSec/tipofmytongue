1
00:00:02,080 --> 00:00:05,520
hi everyone

2
00:00:03,280 --> 00:00:06,720
my name is janis and i will present our

3
00:00:05,520 --> 00:00:09,678
results on

4
00:00:06,720 --> 00:00:11,200
messagingless security this is a joint

5
00:00:09,679 --> 00:00:15,519
work with joel sandra and

6
00:00:11,200 --> 00:00:16,079
evgeny first i'll give some context by

7
00:00:15,519 --> 00:00:18,560
comparing

8
00:00:16,079 --> 00:00:20,000
secure messaging with secure

9
00:00:18,560 --> 00:00:22,320
communication

10
00:00:20,000 --> 00:00:24,080
and highlight the differences so in

11
00:00:22,320 --> 00:00:26,400
secure communication we assume reliable

12
00:00:24,080 --> 00:00:28,400
channels between parties

13
00:00:26,400 --> 00:00:30,080
so there is no message loss

14
00:00:28,400 --> 00:00:33,040
communication is synchronous

15
00:00:30,080 --> 00:00:34,800
and sessions are typically short-lived

16
00:00:33,040 --> 00:00:36,800
parties are online during sessions and

17
00:00:34,800 --> 00:00:38,559
resilience to compromise is a minor

18
00:00:36,800 --> 00:00:42,160
concern

19
00:00:38,559 --> 00:00:42,160
on the other hand on messaging

20
00:00:42,559 --> 00:00:46,480
channels are unreliable so messages may

21
00:00:44,960 --> 00:00:49,039
be lost

22
00:00:46,480 --> 00:00:49,919
uh communication is asynchronous users

23
00:00:49,039 --> 00:00:53,280
might send

24
00:00:49,920 --> 00:00:53,600
messages and then go offline sessions

25
00:00:53,280 --> 00:00:55,920
are

26
00:00:53,600 --> 00:00:57,680
long lived they might last for years and

27
00:00:55,920 --> 00:00:58,000
this is why state compromise is very

28
00:00:57,680 --> 00:01:02,800
likely

29
00:00:58,000 --> 00:01:05,280
to happen over the lifetime of a session

30
00:01:02,800 --> 00:01:06,960
in the two-party setting for messaging

31
00:01:05,280 --> 00:01:08,720
we have the success story of the signal

32
00:01:06,960 --> 00:01:10,720
protocol which is loosely based on the

33
00:01:08,720 --> 00:01:14,000
of the record protocol

34
00:01:10,720 --> 00:01:16,158
it is used uh by billions of people and

35
00:01:14,000 --> 00:01:19,040
uh by many applications like signal

36
00:01:16,159 --> 00:01:20,880
facebook messenger whatsapp and skype

37
00:01:19,040 --> 00:01:22,640
it won the 11th prize at real world

38
00:01:20,880 --> 00:01:24,798
crypto

39
00:01:22,640 --> 00:01:26,080
and its security is very very well

40
00:01:24,799 --> 00:01:29,759
studied and very well

41
00:01:26,080 --> 00:01:31,840
understood so

42
00:01:29,759 --> 00:01:34,159
what about security of messaging for

43
00:01:31,840 --> 00:01:34,159
groups

44
00:01:34,400 --> 00:01:37,840
so the native approach would be

45
00:01:35,680 --> 00:01:40,560
basically to use a two-party

46
00:01:37,840 --> 00:01:42,399
protocol in a pairwise manner however

47
00:01:40,560 --> 00:01:43,920
this solution

48
00:01:42,399 --> 00:01:45,680
is highly inefficient it requires

49
00:01:43,920 --> 00:01:47,680
complexity and square so we need

50
00:01:45,680 --> 00:01:49,920
something much better than that

51
00:01:47,680 --> 00:01:51,119
and this is the purpose of message list

52
00:01:49,920 --> 00:01:53,360
security

53
00:01:51,119 --> 00:01:56,880
so mls started about two years ago and

54
00:01:53,360 --> 00:01:58,560
currently we have its ninth version

55
00:01:56,880 --> 00:02:00,479
the goal is to standardize a protocol

56
00:01:58,560 --> 00:02:02,719
for secure group messaging

57
00:02:00,479 --> 00:02:05,920
with all login message complexity where

58
00:02:02,719 --> 00:02:05,919
n is the number of users

59
00:02:06,079 --> 00:02:09,598
there are many contributors in this

60
00:02:07,520 --> 00:02:10,639
project both like from the academia like

61
00:02:09,598 --> 00:02:14,399
many universities

62
00:02:10,639 --> 00:02:14,399
and also uh the industry

63
00:02:15,280 --> 00:02:18,800
the functionality provided by mls is

64
00:02:17,520 --> 00:02:22,239
like the following

65
00:02:18,800 --> 00:02:24,000
parties can basically join a group

66
00:02:22,239 --> 00:02:26,400
when they're invited by group members

67
00:02:24,000 --> 00:02:28,000
they can leave group at any time

68
00:02:26,400 --> 00:02:29,760
they perform updates to refresh key

69
00:02:28,000 --> 00:02:32,000
material

70
00:02:29,760 --> 00:02:34,319
and they can also send and receive

71
00:02:32,000 --> 00:02:37,360
messages

72
00:02:34,319 --> 00:02:38,720
the attacker controls the network and

73
00:02:37,360 --> 00:02:40,800
the server

74
00:02:38,720 --> 00:02:43,280
he sees all packets transmitted in the

75
00:02:40,800 --> 00:02:46,160
network he can change packets

76
00:02:43,280 --> 00:02:47,040
and he also controls message delivery it

77
00:02:46,160 --> 00:02:50,079
can also

78
00:02:47,040 --> 00:02:53,679
uh leak the state of uh group

79
00:02:50,080 --> 00:02:55,840
members the mls design

80
00:02:53,680 --> 00:02:57,840
considers several modular components and

81
00:02:55,840 --> 00:03:00,879
there is lots of inspiration from

82
00:02:57,840 --> 00:03:03,920
the two-party setting

83
00:03:00,879 --> 00:03:05,840
this is similar to the acd-19 paradigm

84
00:03:03,920 --> 00:03:08,799
in icd-19

85
00:03:05,840 --> 00:03:10,080
the author saw how to modularize the

86
00:03:08,800 --> 00:03:11,760
double ratchet

87
00:03:10,080 --> 00:03:13,840
using three primitives namely

88
00:03:11,760 --> 00:03:16,319
continuously agreement

89
00:03:13,840 --> 00:03:18,080
which is the public ratchet a forward

90
00:03:16,319 --> 00:03:19,518
secret authenticated encryption which is

91
00:03:18,080 --> 00:03:21,280
a symmetric ratchet

92
00:03:19,519 --> 00:03:22,640
and also the glue between them which is

93
00:03:21,280 --> 00:03:25,280
the prf png

94
00:03:22,640 --> 00:03:26,798
so acd 19 shows how to compose those

95
00:03:25,280 --> 00:03:29,440
three primitives and build

96
00:03:26,799 --> 00:03:30,799
two-party secure messaging now the good

97
00:03:29,440 --> 00:03:34,400
news is that

98
00:03:30,799 --> 00:03:36,080
the icd-19 paradigm also applies to mls

99
00:03:34,400 --> 00:03:38,560
of course by considering the group

100
00:03:36,080 --> 00:03:41,680
variance of the corresponding primitives

101
00:03:38,560 --> 00:03:42,879
so here we have a continuous group key

102
00:03:41,680 --> 00:03:44,400
agreement

103
00:03:42,879 --> 00:03:46,879
and end party forward secure

104
00:03:44,400 --> 00:03:50,799
authenticated encryption

105
00:03:46,879 --> 00:03:54,239
and also signatures for authentication

106
00:03:50,799 --> 00:03:55,439
in our work we focus on the continuous

107
00:03:54,239 --> 00:03:58,000
group key agreement

108
00:03:55,439 --> 00:03:58,000
primitive

109
00:03:58,560 --> 00:04:03,120
in more detail uh the contributions of

110
00:04:01,200 --> 00:04:05,119
our work are the following

111
00:04:03,120 --> 00:04:06,959
we provide a formal security model for

112
00:04:05,120 --> 00:04:10,560
cgka

113
00:04:06,959 --> 00:04:12,959
um we also prevent study security of

114
00:04:10,560 --> 00:04:15,439
the ccka protocol that is proposed by

115
00:04:12,959 --> 00:04:18,639
mls which is called tricken

116
00:04:15,439 --> 00:04:20,159
and their main surprise is here and we

117
00:04:18,639 --> 00:04:21,840
also propose

118
00:04:20,160 --> 00:04:25,040
a modified version of trichem that

119
00:04:21,839 --> 00:04:25,039
achieves better security

120
00:04:27,280 --> 00:04:30,960
so now present the simplified version of

121
00:04:30,080 --> 00:04:34,479
our cdk

122
00:04:30,960 --> 00:04:36,719
security definition uh

123
00:04:34,479 --> 00:04:38,800
our primitive supports the following

124
00:04:36,720 --> 00:04:42,479
functionalities group creation first of

125
00:04:38,800 --> 00:04:44,720
all so user you can create a group g

126
00:04:42,479 --> 00:04:47,280
a member you can add a non-member v to

127
00:04:44,720 --> 00:04:48,160
the group by executing add and similarly

128
00:04:47,280 --> 00:04:49,919
for remove

129
00:04:48,160 --> 00:04:52,320
so remember you can remove another

130
00:04:49,919 --> 00:04:54,240
member v from the group

131
00:04:52,320 --> 00:04:56,000
we also have the update operation which

132
00:04:54,240 --> 00:04:58,479
basically refreshes the group state

133
00:04:56,000 --> 00:05:00,240
and this is important for security as we

134
00:04:58,479 --> 00:05:02,960
will see later

135
00:05:00,240 --> 00:05:04,720
and then we have the process operation

136
00:05:02,960 --> 00:05:06,239
which enables processing of control

137
00:05:04,720 --> 00:05:07,360
messages generated by the above

138
00:05:06,240 --> 00:05:10,320
operations

139
00:05:07,360 --> 00:05:12,240
the goal is to synchronously maintain a

140
00:05:10,320 --> 00:05:14,479
certain secret in a dynamically changing

141
00:05:12,240 --> 00:05:14,479
group

142
00:05:14,800 --> 00:05:21,120
so protocol execution proceeds in epochs

143
00:05:19,280 --> 00:05:22,638
and with each operation we have a new

144
00:05:21,120 --> 00:05:25,520
epoch and a new

145
00:05:22,639 --> 00:05:26,639
group secret so for instance consider

146
00:05:25,520 --> 00:05:28,719
our example

147
00:05:26,639 --> 00:05:30,720
so here we have group creation by party

148
00:05:28,720 --> 00:05:33,919
a and we're in epoch number one

149
00:05:30,720 --> 00:05:36,000
with group secret i1 um

150
00:05:33,919 --> 00:05:37,120
then b is added and we move to epoch

151
00:05:36,000 --> 00:05:40,800
number two

152
00:05:37,120 --> 00:05:43,520
and a new group secret

153
00:05:40,800 --> 00:05:45,600
and then we update c is added c updates

154
00:05:43,520 --> 00:05:47,520
and a is removed

155
00:05:45,600 --> 00:05:49,440
so the group secrets are basically used

156
00:05:47,520 --> 00:05:50,479
by full messaging by the higher level

157
00:05:49,440 --> 00:05:55,440
protocol

158
00:05:50,479 --> 00:05:55,440
to refresh uh keys

159
00:05:56,240 --> 00:06:00,160
now the adversary controls the network

160
00:05:59,280 --> 00:06:02,080
and the server

161
00:06:00,160 --> 00:06:04,479
he sees all packets transmitted in the

162
00:06:02,080 --> 00:06:06,960
network but he cannot modify them

163
00:06:04,479 --> 00:06:08,800
so this is one restriction another one

164
00:06:06,960 --> 00:06:11,440
is that

165
00:06:08,800 --> 00:06:12,720
uh it controls message delivery but it

166
00:06:11,440 --> 00:06:15,120
must deliver

167
00:06:12,720 --> 00:06:16,000
all messages in the same order to all

168
00:06:15,120 --> 00:06:18,400
users

169
00:06:16,000 --> 00:06:21,039
so those two points are basically

170
00:06:18,400 --> 00:06:24,239
handled by the high level protocol

171
00:06:21,039 --> 00:06:26,000
how basically using signatures so the

172
00:06:24,240 --> 00:06:31,039
adversary will not be able to modify

173
00:06:26,000 --> 00:06:33,199
packets if messages are signed and also

174
00:06:31,039 --> 00:06:36,000
you can protect the order of messages by

175
00:06:33,199 --> 00:06:38,240
hashing the transcript

176
00:06:36,000 --> 00:06:40,479
so besides that the adversary fully

177
00:06:38,240 --> 00:06:44,319
controls the sequence of operations

178
00:06:40,479 --> 00:06:46,240
he can ask users to update their state

179
00:06:44,319 --> 00:06:47,360
to add other users or to remove users

180
00:06:46,240 --> 00:06:49,759
from the group

181
00:06:47,360 --> 00:06:52,160
and also he can lick the state of group

182
00:06:49,759 --> 00:06:52,160
members

183
00:06:53,599 --> 00:06:57,520
the privacy guarantees that we require

184
00:06:55,599 --> 00:06:59,599
is that group secrets should

185
00:06:57,520 --> 00:07:01,198
look random to the attacker unless they

186
00:06:59,599 --> 00:07:04,319
are trivially known

187
00:07:01,199 --> 00:07:06,800
and since sessions are long-lasting we

188
00:07:04,319 --> 00:07:09,120
also require post-compromise security

189
00:07:06,800 --> 00:07:12,160
so we should be able to recover from

190
00:07:09,120 --> 00:07:12,160
state compromise

191
00:07:12,319 --> 00:07:16,800
via normal protocol execution and also

192
00:07:15,120 --> 00:07:20,240
we require forward secrecy

193
00:07:16,800 --> 00:07:21,599
which basically uh means that privacy

194
00:07:20,240 --> 00:07:25,919
should hold even against

195
00:07:21,599 --> 00:07:25,919
future state corruption state compromise

196
00:07:26,639 --> 00:07:30,800
now consider an adversary that

197
00:07:28,560 --> 00:07:33,520
challenges epoch i

198
00:07:30,800 --> 00:07:36,240
so the question is like is epoch key

199
00:07:33,520 --> 00:07:40,560
also known as update secret of epoch i

200
00:07:36,240 --> 00:07:42,560
secure let's see the notion of optimal

201
00:07:40,560 --> 00:07:44,319
security optimal security which implies

202
00:07:42,560 --> 00:07:46,319
pcs and fs

203
00:07:44,319 --> 00:07:47,440
requires that all users that are

204
00:07:46,319 --> 00:07:51,680
corrupted

205
00:07:47,440 --> 00:07:53,599
at epoch j prior to i or less

206
00:07:51,680 --> 00:07:55,680
one and equal to i issuing a data

207
00:07:53,599 --> 00:07:58,878
operation at some epoch t

208
00:07:55,680 --> 00:08:00,160
in the rates j plus one comma i so

209
00:07:58,879 --> 00:08:01,919
basically this means

210
00:08:00,160 --> 00:08:03,199
if you have corrupted users before

211
00:08:01,919 --> 00:08:05,280
apocaly

212
00:08:03,199 --> 00:08:06,240
those users just need to issue an update

213
00:08:05,280 --> 00:08:08,318
operation

214
00:08:06,240 --> 00:08:11,280
uh before apokai we also allow

215
00:08:08,319 --> 00:08:14,000
corruptions after epoch i

216
00:08:11,280 --> 00:08:15,919
and we also consider uh two uh weaker

217
00:08:14,000 --> 00:08:17,360
notions of security forward security and

218
00:08:15,919 --> 00:08:20,560
isolation

219
00:08:17,360 --> 00:08:23,599
in which first corruption uh can happen

220
00:08:20,560 --> 00:08:26,720
only after the challenge epoch

221
00:08:23,599 --> 00:08:28,400
and also pcs in isolation which is like

222
00:08:26,720 --> 00:08:30,240
optimal security

223
00:08:28,400 --> 00:08:33,840
like optimal security but no corruptions

224
00:08:30,240 --> 00:08:33,840
are allowed after the challenged people

225
00:08:39,599 --> 00:08:44,399
now i will present uh the ctk protocol

226
00:08:42,880 --> 00:08:48,080
which is proposed by mls

227
00:08:44,399 --> 00:08:51,200
called tricken trichem was

228
00:08:48,080 --> 00:08:52,800
initially proposed in the mls mailing

229
00:08:51,200 --> 00:08:54,320
list in 2018

230
00:08:52,800 --> 00:08:56,959
and is based on an early work on

231
00:08:54,320 --> 00:09:00,160
asynchronous ratcheting trees

232
00:08:56,959 --> 00:09:02,000
the packet size is all again and we also

233
00:09:00,160 --> 00:09:03,040
have subsequent work which is causal

234
00:09:02,000 --> 00:09:05,839
tricking

235
00:09:03,040 --> 00:09:07,519
uh tainted trichyment also actively

236
00:09:05,839 --> 00:09:10,640
secures the gkea which is

237
00:09:07,519 --> 00:09:13,200
a completely different protocol

238
00:09:10,640 --> 00:09:14,000
for this talk i will omit add and remove

239
00:09:13,200 --> 00:09:16,000
operations

240
00:09:14,000 --> 00:09:18,320
and i will assume that no user is left

241
00:09:16,000 --> 00:09:21,360
behind meaning that all users

242
00:09:18,320 --> 00:09:23,040
process exactly all messages all control

243
00:09:21,360 --> 00:09:26,560
messages generated by

244
00:09:23,040 --> 00:09:28,880
operations our paper handles the general

245
00:09:26,560 --> 00:09:28,880
case

246
00:09:29,200 --> 00:09:33,120
so we only focus on update and corrupt

247
00:09:31,360 --> 00:09:34,959
operations for study groups

248
00:09:33,120 --> 00:09:36,800
and as we will see this is still

249
00:09:34,959 --> 00:09:40,000
non-trivial and

250
00:09:36,800 --> 00:09:41,599
captures the main difficulties

251
00:09:40,000 --> 00:09:44,800
so the goal is to maintain a short

252
00:09:41,600 --> 00:09:44,800
secret in a study group

253
00:09:45,680 --> 00:09:51,359
trichem uses a tree based structure

254
00:09:48,959 --> 00:09:53,040
so members group members are arranged at

255
00:09:51,360 --> 00:09:54,640
the leaves of the tree so here we have

256
00:09:53,040 --> 00:09:57,439
eight members

257
00:09:54,640 --> 00:09:59,760
each node consists of a public and

258
00:09:57,440 --> 00:10:02,160
secret key for public encryption

259
00:09:59,760 --> 00:10:03,920
and the environment is that parties know

260
00:10:02,160 --> 00:10:04,319
only the secret keys on the path to the

261
00:10:03,920 --> 00:10:06,079
root

262
00:10:04,320 --> 00:10:08,399
so this part here knows the secret key

263
00:10:06,079 --> 00:10:09,359
for this node this node this node and

264
00:10:08,399 --> 00:10:11,040
this node

265
00:10:09,360 --> 00:10:12,959
the root node is a special node which i

266
00:10:11,040 --> 00:10:16,240
will

267
00:10:12,959 --> 00:10:18,079
refer to it uh in more detail later

268
00:10:16,240 --> 00:10:19,600
so here we have eight parties and the

269
00:10:18,079 --> 00:10:20,800
eighth leaf corresponds to the eighth

270
00:10:19,600 --> 00:10:24,320
party from the

271
00:10:20,800 --> 00:10:26,240
left to the right let's see how the

272
00:10:24,320 --> 00:10:28,880
update operation works on tweaking

273
00:10:26,240 --> 00:10:29,600
assume that party one which is the first

274
00:10:28,880 --> 00:10:31,680
leaf

275
00:10:29,600 --> 00:10:32,720
executes an update operation the

276
00:10:31,680 --> 00:10:36,319
operation is

277
00:10:32,720 --> 00:10:37,120
basically using calls to a prg which is

278
00:10:36,320 --> 00:10:40,079
denoted by

279
00:10:37,120 --> 00:10:42,399
h so what party one does is the

280
00:10:40,079 --> 00:10:44,640
following it samples s0 a uniformly

281
00:10:42,399 --> 00:10:45,040
random see the zero and computes the prg

282
00:10:44,640 --> 00:10:48,640
over

283
00:10:45,040 --> 00:10:51,519
zero this gives a new scene s1 which

284
00:10:48,640 --> 00:10:54,880
will be used in the higher layer

285
00:10:51,519 --> 00:10:56,880
and also gives a secret key sk0 this

286
00:10:54,880 --> 00:10:58,079
is the secret key the new secret key for

287
00:10:56,880 --> 00:10:59,760
this node

288
00:10:58,079 --> 00:11:03,040
from this secret key we can also derive

289
00:10:59,760 --> 00:11:05,760
pk0 which is the public key of the node

290
00:11:03,040 --> 00:11:06,160
then we go to the next level and then

291
00:11:05,760 --> 00:11:08,959
using

292
00:11:06,160 --> 00:11:10,079
s1 we compute the prg versus one and we

293
00:11:08,959 --> 00:11:13,518
compute the

294
00:11:10,079 --> 00:11:16,079
seed for the next level s2 and we also

295
00:11:13,519 --> 00:11:18,160
compute the secret key for this node

296
00:11:16,079 --> 00:11:20,079
and using us through here we can compute

297
00:11:18,160 --> 00:11:21,760
the seed for the next level and the

298
00:11:20,079 --> 00:11:24,719
secret key for this node

299
00:11:21,760 --> 00:11:26,839
now the thing is that s3 is basically

300
00:11:24,720 --> 00:11:29,680
the update secret

301
00:11:26,839 --> 00:11:31,200
um is the secret or the group secrets

302
00:11:29,680 --> 00:11:33,199
the secret that is being computed that

303
00:11:31,200 --> 00:11:36,640
needs to be computed by uh by all

304
00:11:33,200 --> 00:11:37,440
uh group members so this is how the

305
00:11:36,640 --> 00:11:40,560
update

306
00:11:37,440 --> 00:11:42,640
operation works uh from the view of like

307
00:11:40,560 --> 00:11:44,079
party one and this is how party one

308
00:11:42,640 --> 00:11:47,199
updates the

309
00:11:44,079 --> 00:11:47,199
uh the tree

310
00:11:48,880 --> 00:11:52,320
how do other group members compute i how

311
00:11:50,959 --> 00:11:54,399
do other members compute the group

312
00:11:52,320 --> 00:11:56,480
secret

313
00:11:54,399 --> 00:11:57,600
what party one does is that and it

314
00:11:56,480 --> 00:12:02,240
encrypts the

315
00:11:57,600 --> 00:12:04,160
the seeds as i using um

316
00:12:02,240 --> 00:12:05,440
the public keys of what we call co-path

317
00:12:04,160 --> 00:12:08,560
nodes so

318
00:12:05,440 --> 00:12:11,519
basically uh s1 is encrypted under

319
00:12:08,560 --> 00:12:12,719
uh the public key of node a and since

320
00:12:11,519 --> 00:12:15,680
party 2 knows

321
00:12:12,720 --> 00:12:18,480
ska it can recover s1 and compute all

322
00:12:15,680 --> 00:12:22,399
the secrets to the root

323
00:12:18,480 --> 00:12:25,760
similarly party 1 encrypts s2

324
00:12:22,399 --> 00:12:26,480
under pkb and since those two parties 3

325
00:12:25,760 --> 00:12:29,040
and 4

326
00:12:26,480 --> 00:12:31,279
they know skb because this key is in

327
00:12:29,040 --> 00:12:33,839
their path to the root

328
00:12:31,279 --> 00:12:34,880
they can decrypt this cipher x recover

329
00:12:33,839 --> 00:12:38,079
s2 and compute

330
00:12:34,880 --> 00:12:39,600
s3 again and the same for node c

331
00:12:38,079 --> 00:12:41,120
and those four parties those four

332
00:12:39,600 --> 00:12:44,240
parties here from

333
00:12:41,120 --> 00:12:46,240
um four to eight they know skc

334
00:12:44,240 --> 00:12:49,680
and they can directly recap decrypt the

335
00:12:46,240 --> 00:12:49,680
ciphertext and recover strip

336
00:12:51,040 --> 00:12:54,240
for forward secrecy we need to delete

337
00:12:52,959 --> 00:12:56,719
intermediate values

338
00:12:54,240 --> 00:12:58,000
so the si values that we computed

339
00:12:56,720 --> 00:13:01,200
earlier need

340
00:12:58,000 --> 00:13:04,320
need to be deleted um

341
00:13:01,200 --> 00:13:06,160
and also for forward secrecy

342
00:13:04,320 --> 00:13:08,240
as soon as the group secret is being

343
00:13:06,160 --> 00:13:11,839
processed by the high level protocol

344
00:13:08,240 --> 00:13:11,839
it needs to be deleted from the state

345
00:13:12,240 --> 00:13:17,200
uh however we observe that the

346
00:13:15,120 --> 00:13:20,079
ciphertext that had been generated

347
00:13:17,200 --> 00:13:21,600
by the update operation have been are

348
00:13:20,079 --> 00:13:23,199
known to the attacker

349
00:13:21,600 --> 00:13:25,279
because the attacker has access to the

350
00:13:23,200 --> 00:13:25,760
network traffic so what we observe here

351
00:13:25,279 --> 00:13:28,000
is that

352
00:13:25,760 --> 00:13:29,680
if at some point in the future the

353
00:13:28,000 --> 00:13:32,880
adversary via some

354
00:13:29,680 --> 00:13:38,319
corruption manages to learn skaa

355
00:13:32,880 --> 00:13:38,320
or skb or skc then he's able to compute

356
00:13:39,680 --> 00:13:44,560
the update secret generated by party one

357
00:13:46,959 --> 00:13:50,319
now let's see an example that

358
00:13:48,240 --> 00:13:54,480
illustrates issues with triggers

359
00:13:50,320 --> 00:13:56,639
forward secrecy from now on we just

360
00:13:54,480 --> 00:13:58,959
write ebook numbers

361
00:13:56,639 --> 00:13:59,680
and we use the cross for blank notes so

362
00:13:58,959 --> 00:14:01,599
initially

363
00:13:59,680 --> 00:14:04,800
all nodes in the tree besides the leaves

364
00:14:01,600 --> 00:14:07,519
are blank we still have eight users

365
00:14:04,800 --> 00:14:08,959
and the leaves store the public and

366
00:14:07,519 --> 00:14:12,720
secret key of each user

367
00:14:08,959 --> 00:14:16,319
which like we refer to as a need keys

368
00:14:12,720 --> 00:14:18,639
this is a term used by mls

369
00:14:16,320 --> 00:14:20,560
so party one executes an update along

370
00:14:18,639 --> 00:14:22,079
the brown path and refreshes all keys

371
00:14:20,560 --> 00:14:25,040
along the brown path and

372
00:14:22,079 --> 00:14:27,839
also computes a new update secret and we

373
00:14:25,040 --> 00:14:30,000
move to epoch 1.

374
00:14:27,839 --> 00:14:32,160
party 3 executes another update

375
00:14:30,000 --> 00:14:34,800
operation so we have fresh keys along

376
00:14:32,160 --> 00:14:34,800
the red path

377
00:14:38,240 --> 00:14:44,000
then party 5 executes an update along

378
00:14:41,279 --> 00:14:46,480
the green path

379
00:14:44,000 --> 00:14:47,680
and refreshes all those keys and finally

380
00:14:46,480 --> 00:14:51,120
party 7

381
00:14:47,680 --> 00:14:53,920
executes an update along the yellow path

382
00:14:51,120 --> 00:14:56,839
now the question is whether the update

383
00:14:53,920 --> 00:14:59,839
secret for epoch 4 is

384
00:14:56,839 --> 00:14:59,839
secure

385
00:15:00,320 --> 00:15:03,519
we introduce the notion of a bomb so a

386
00:15:02,399 --> 00:15:07,920
bomb is

387
00:15:03,519 --> 00:15:07,920
a key that lets the adversary recover

388
00:15:08,160 --> 00:15:11,199
the update the update secret for epoch

389
00:15:10,240 --> 00:15:13,440
4.

390
00:15:11,199 --> 00:15:15,760
so observe that information about epoch

391
00:15:13,440 --> 00:15:21,360
4 update is encrypted under

392
00:15:15,760 --> 00:15:21,360
keys of nodes with a yellow bond

393
00:15:21,519 --> 00:15:24,800
so when part 7 executes the update

394
00:15:23,519 --> 00:15:27,839
operation it

395
00:15:24,800 --> 00:15:29,758
basically encrypts this secret

396
00:15:27,839 --> 00:15:32,000
under the secret key of this node this

397
00:15:29,759 --> 00:15:35,040
is why we have a bond here

398
00:15:32,000 --> 00:15:37,040
also this secret is being encrypted

399
00:15:35,040 --> 00:15:39,120
under the secret key of this node this

400
00:15:37,040 --> 00:15:41,519
is why we have another bomb here

401
00:15:39,120 --> 00:15:42,639
and finally the update secret is being

402
00:15:41,519 --> 00:15:44,399
encrypted under

403
00:15:42,639 --> 00:15:45,680
the secret of this node so we have a

404
00:15:44,399 --> 00:15:47,759
third bomb

405
00:15:45,680 --> 00:15:50,160
so each update operation generates logan

406
00:15:47,759 --> 00:15:50,160
bonds

407
00:15:50,880 --> 00:15:57,920
are those the only bombs that we have

408
00:15:54,320 --> 00:16:01,199
the answer is no and we can see why

409
00:15:57,920 --> 00:16:03,839
by checking previous update operations

410
00:16:01,199 --> 00:16:04,639
when party number five issued the update

411
00:16:03,839 --> 00:16:06,959
operation

412
00:16:04,639 --> 00:16:08,880
the secret for this node was encrypted

413
00:16:06,959 --> 00:16:11,599
under the secret key of this node

414
00:16:08,880 --> 00:16:13,279
so here we have a green bomb this green

415
00:16:11,600 --> 00:16:16,240
bulb basically says

416
00:16:13,279 --> 00:16:17,759
that the secret key of this node enables

417
00:16:16,240 --> 00:16:20,160
the recovery of

418
00:16:17,759 --> 00:16:21,120
the secret key and the update secret for

419
00:16:20,160 --> 00:16:24,719
epoch 3

420
00:16:21,120 --> 00:16:27,040
but recovery of this secret basically

421
00:16:24,720 --> 00:16:29,120
enables the recovery of the secret for

422
00:16:27,040 --> 00:16:32,160
epoch 4.

423
00:16:29,120 --> 00:16:36,560
similarly for previous update operations

424
00:16:32,160 --> 00:16:39,040
like for the red path for this update

425
00:16:36,560 --> 00:16:40,239
when user number three executed the

426
00:16:39,040 --> 00:16:43,199
update operation

427
00:16:40,240 --> 00:16:44,560
he encrypted this secret under the

428
00:16:43,199 --> 00:16:47,680
secret key

429
00:16:44,560 --> 00:16:48,719
this basically implies that we have a

430
00:16:47,680 --> 00:16:50,880
red bomb here

431
00:16:48,720 --> 00:16:52,800
that allows the recovery of the red path

432
00:16:50,880 --> 00:16:54,560
but if you recover the red path

433
00:16:52,800 --> 00:16:56,079
you can recover the secret key and the

434
00:16:54,560 --> 00:16:59,758
discovery of the secret key

435
00:16:56,079 --> 00:17:04,159
enables the recovery of epoch secret 4

436
00:16:59,759 --> 00:17:06,559
due to this bomb similarly for this node

437
00:17:04,160 --> 00:17:09,919
and of course for the first update and

438
00:17:06,559 --> 00:17:12,319
the bomb that we have here

439
00:17:09,919 --> 00:17:13,919
so forever for every level i we have 2

440
00:17:12,319 --> 00:17:17,678
to the i minus 1 active

441
00:17:13,919 --> 00:17:18,480
bombs which implies that half of the

442
00:17:17,679 --> 00:17:24,559
leaf

443
00:17:18,480 --> 00:17:28,400
keys are bonds so by corrupting any user

444
00:17:24,559 --> 00:17:33,039
still holding a bomb implies

445
00:17:28,400 --> 00:17:35,280
security bridge for a pop 4 secret

446
00:17:33,039 --> 00:17:36,559
what if users update so can the update

447
00:17:35,280 --> 00:17:39,840
operation help us

448
00:17:36,559 --> 00:17:43,440
you know make things better

449
00:17:39,840 --> 00:17:44,559
assume party 6 issues and update

450
00:17:43,440 --> 00:17:48,320
operations

451
00:17:44,559 --> 00:17:48,320
operational along the great path

452
00:17:48,880 --> 00:17:53,520
then this update operation overrides all

453
00:17:51,840 --> 00:17:56,879
the keys in this path

454
00:17:53,520 --> 00:17:58,879
so some bonds are diffused making

455
00:17:56,880 --> 00:18:00,559
critical keys inside those bonds no

456
00:17:58,880 --> 00:18:04,320
longer accessible since we

457
00:18:00,559 --> 00:18:08,399
override this path those secret keys are

458
00:18:04,320 --> 00:18:08,399
erased so are no longer accessible

459
00:18:09,039 --> 00:18:14,879
the thing is that at once

460
00:18:12,320 --> 00:18:17,360
one bomb is being diffused per level i

461
00:18:14,880 --> 00:18:19,440
with each update operation

462
00:18:17,360 --> 00:18:20,959
we have n over two leaf bonds and this

463
00:18:19,440 --> 00:18:28,640
implies that we need at least

464
00:18:20,960 --> 00:18:30,960
n over two updates to diffuse all bonds

465
00:18:28,640 --> 00:18:35,039
so every update has an over the keys at

466
00:18:30,960 --> 00:18:35,039
least which allow to recover new secrets

467
00:18:35,120 --> 00:18:40,399
why is this a problem because forward

468
00:18:37,360 --> 00:18:43,039
security takes a long time to kick in

469
00:18:40,400 --> 00:18:44,000
and each update over at at most one lift

470
00:18:43,039 --> 00:18:45,760
key so we need

471
00:18:44,000 --> 00:18:48,320
n over two epochs to get forward

472
00:18:45,760 --> 00:18:50,000
security even in the best case even if

473
00:18:48,320 --> 00:18:53,039
nobody's corrupted yet

474
00:18:50,000 --> 00:18:56,640
however forward secrecy requires

475
00:18:53,039 --> 00:18:58,960
uh security after a single update

476
00:18:56,640 --> 00:19:00,880
so in the worst case we will never

477
00:18:58,960 --> 00:19:02,799
achieve forward security

478
00:19:00,880 --> 00:19:06,799
if the right people don't perform and

479
00:19:02,799 --> 00:19:06,799
don't perform like an update operation

480
00:19:08,400 --> 00:19:12,000
so tricker achieves less an ideal

481
00:19:10,400 --> 00:19:16,480
forward security even

482
00:19:12,000 --> 00:19:16,480
under the most favorable circumstances

483
00:19:17,919 --> 00:19:21,760
in our paper we characterize precisely

484
00:19:20,320 --> 00:19:24,399
the set of secure keys

485
00:19:21,760 --> 00:19:25,919
given the sequence of attackers queries

486
00:19:24,400 --> 00:19:29,280
we use the notion of

487
00:19:25,919 --> 00:19:32,559
graphics ability on key graphs

488
00:19:29,280 --> 00:19:35,039
and we basically saw that the level of

489
00:19:32,559 --> 00:19:39,360
security achieved by tricam is very far

490
00:19:35,039 --> 00:19:42,160
from optimal

491
00:19:39,360 --> 00:19:44,240
the question is can we do better can we

492
00:19:42,160 --> 00:19:48,000
do optimal

493
00:19:44,240 --> 00:19:48,000
and the answer is yes we can

494
00:19:49,039 --> 00:19:52,480
by replacing standard public key

495
00:19:50,480 --> 00:19:54,320
encryption intriguing with updatable

496
00:19:52,480 --> 00:19:55,360
public encryption we get an optimal

497
00:19:54,320 --> 00:19:59,520
secure

498
00:19:55,360 --> 00:20:02,639
scheme for cdka

499
00:19:59,520 --> 00:20:04,559
this notion of updatable pk is closely

500
00:20:02,640 --> 00:20:06,159
related to key update wpk

501
00:20:04,559 --> 00:20:08,480
which is used in the two-party setting

502
00:20:06,159 --> 00:20:11,919
for secure messaging by jmm

503
00:20:08,480 --> 00:20:14,640
at eurocrypt18 um

504
00:20:11,919 --> 00:20:16,720
our id is inspired by proposal of conrad

505
00:20:14,640 --> 00:20:18,799
in the mls maiming list

506
00:20:16,720 --> 00:20:21,280
and basically the intuition is that this

507
00:20:18,799 --> 00:20:25,520
updatable pke

508
00:20:21,280 --> 00:20:25,520
it gives you practical forward security

509
00:20:26,559 --> 00:20:30,799
let's compare update wpk with standard

510
00:20:28,799 --> 00:20:33,120
pke so in standard pke

511
00:20:30,799 --> 00:20:34,158
we have kitchen which generates public

512
00:20:33,120 --> 00:20:35,840
and secret key

513
00:20:34,159 --> 00:20:38,080
the encryption operation generates the

514
00:20:35,840 --> 00:20:39,199
cipher text over the message in the

515
00:20:38,080 --> 00:20:42,399
public key

516
00:20:39,200 --> 00:20:45,760
and decryption recovers the message

517
00:20:42,400 --> 00:20:48,720
for correctness senders

518
00:20:45,760 --> 00:20:50,720
need not to be synchronized and cpa

519
00:20:48,720 --> 00:20:53,679
security requires encryptions of any two

520
00:20:50,720 --> 00:20:55,520
messages to be indistinguishable

521
00:20:53,679 --> 00:20:56,799
now for updatable public encryption the

522
00:20:55,520 --> 00:21:00,320
syntax

523
00:20:56,799 --> 00:21:03,679
is as follows keygen

524
00:21:00,320 --> 00:21:08,000
outputs uh a new public key secret key

525
00:21:03,679 --> 00:21:10,320
pair pk0 sk0 then the initial keys

526
00:21:08,000 --> 00:21:12,640
and the encryption operation receives

527
00:21:10,320 --> 00:21:14,399
public end methods and outputs a cipher

528
00:21:12,640 --> 00:21:16,000
text together with

529
00:21:14,400 --> 00:21:18,880
a new public key so the encryption

530
00:21:16,000 --> 00:21:22,640
operation refreshes the public key

531
00:21:18,880 --> 00:21:24,960
um pkm

532
00:21:22,640 --> 00:21:26,559
refreshes the public key the decryption

533
00:21:24,960 --> 00:21:28,720
operation receives the secret key in

534
00:21:26,559 --> 00:21:31,600
ciphertext and produces the method

535
00:21:28,720 --> 00:21:33,280
but also produces a new secret key which

536
00:21:31,600 --> 00:21:35,039
basically the secret key

537
00:21:33,280 --> 00:21:36,799
needs to be synchronized with this

538
00:21:35,039 --> 00:21:39,120
public key here

539
00:21:36,799 --> 00:21:41,039
for correctness we require all senders

540
00:21:39,120 --> 00:21:43,039
to be synchronized

541
00:21:41,039 --> 00:21:44,960
and this is guaranteed by the mls

542
00:21:43,039 --> 00:21:47,679
assumption

543
00:21:44,960 --> 00:21:49,440
and also encryptions of any two messages

544
00:21:47,679 --> 00:21:50,400
are indistinguishable like for cpa

545
00:21:49,440 --> 00:21:53,360
security

546
00:21:50,400 --> 00:21:55,520
even given the secret key obtained after

547
00:21:53,360 --> 00:21:57,600
decrypting the challenge cipher text

548
00:21:55,520 --> 00:21:58,879
so the idea here is that even if the

549
00:21:57,600 --> 00:22:02,158
adversary is given

550
00:21:58,880 --> 00:22:04,640
ci skii and pki

551
00:22:02,159 --> 00:22:06,320
he can not recover any information about

552
00:22:04,640 --> 00:22:09,520
ski i minus one

553
00:22:06,320 --> 00:22:11,840
and basically this means that mi is

554
00:22:09,520 --> 00:22:14,960
still protected so this it gives you

555
00:22:11,840 --> 00:22:14,959
like forward security

556
00:22:15,120 --> 00:22:19,520
our updatable public encryption uh

557
00:22:17,360 --> 00:22:22,520
construction is based on elgamal and the

558
00:22:19,520 --> 00:22:26,240
random oracle model and is similar to jm

559
00:22:22,520 --> 00:22:29,520
jm18 and now let's see how

560
00:22:26,240 --> 00:22:31,360
this uh new protocol works uh r tweaking

561
00:22:29,520 --> 00:22:32,799
which stands for uh re-randomized

562
00:22:31,360 --> 00:22:34,479
trickiem

563
00:22:32,799 --> 00:22:36,240
assume party one executes an update

564
00:22:34,480 --> 00:22:38,000
operation

565
00:22:36,240 --> 00:22:40,000
the update operation is very similar you

566
00:22:38,000 --> 00:22:42,000
generate basically the seeds along the

567
00:22:40,000 --> 00:22:43,919
direct path and then you encrypt

568
00:22:42,000 --> 00:22:45,440
with respect to the circuit nodes as we

569
00:22:43,919 --> 00:22:47,280
did before

570
00:22:45,440 --> 00:22:49,120
however the scheme that you use now is

571
00:22:47,280 --> 00:22:49,918
updatable public encryption instead of

572
00:22:49,120 --> 00:22:53,360
standard public

573
00:22:49,919 --> 00:22:54,720
encryption so s1 here is encrypted under

574
00:22:53,360 --> 00:22:58,158
the public key of

575
00:22:54,720 --> 00:23:00,960
node a the encryption operation

576
00:22:58,159 --> 00:23:03,039
generates ca but also randomizes the

577
00:23:00,960 --> 00:23:03,760
public key and produces a new public key

578
00:23:03,039 --> 00:23:06,960
pka

579
00:23:03,760 --> 00:23:09,679
prime also the decryption operation over

580
00:23:06,960 --> 00:23:12,960
ca recovers s1

581
00:23:09,679 --> 00:23:16,559
but also produces a randomized uh

582
00:23:12,960 --> 00:23:20,559
key ska prime and the same happens for

583
00:23:16,559 --> 00:23:23,678
nodes b and c like encryption other pkb

584
00:23:20,559 --> 00:23:26,320
of s2 produces cb and a new public key

585
00:23:23,679 --> 00:23:28,960
pkb prime and also decryption of cb

586
00:23:26,320 --> 00:23:30,158
produces a new secret key and now the

587
00:23:28,960 --> 00:23:33,840
idea is that

588
00:23:30,159 --> 00:23:35,520
if you have corruptions if

589
00:23:33,840 --> 00:23:37,360
the states of the users are linked to

590
00:23:35,520 --> 00:23:40,799
the adversary let's say

591
00:23:37,360 --> 00:23:43,918
for this node then the adversary learns

592
00:23:40,799 --> 00:23:47,039
sk prime a but

593
00:23:43,919 --> 00:23:48,880
by recovering sk prime a does not break

594
00:23:47,039 --> 00:23:52,559
security of

595
00:23:48,880 --> 00:23:54,799
of the skin right so ska remains secure

596
00:23:52,559 --> 00:23:57,678
and s1 remains secure and the same

597
00:23:54,799 --> 00:23:57,679
happens uh

598
00:23:58,000 --> 00:24:04,240
if you have uh

599
00:24:01,440 --> 00:24:04,480
states that are leaked for those nodes

600
00:24:04,240 --> 00:24:07,440
and

601
00:24:04,480 --> 00:24:07,840
also for those nodes so here if you if

602
00:24:07,440 --> 00:24:11,120
you have

603
00:24:07,840 --> 00:24:13,678
users uh

604
00:24:11,120 --> 00:24:14,959
compromised users here then the

605
00:24:13,679 --> 00:24:18,640
adversary learns

606
00:24:14,960 --> 00:24:21,760
sk prime b but it's not recovering skb

607
00:24:18,640 --> 00:24:24,240
or s2

608
00:24:21,760 --> 00:24:25,760
so this is the main idea in the paper we

609
00:24:24,240 --> 00:24:27,840
have more results

610
00:24:25,760 --> 00:24:30,080
uh we have security against adaptive

611
00:24:27,840 --> 00:24:32,080
adversaries and we also propose future

612
00:24:30,080 --> 00:24:34,399
directions and open programs for secure

613
00:24:32,080 --> 00:24:35,840
group messaging

614
00:24:34,400 --> 00:24:38,320
there are also other stuff like

615
00:24:35,840 --> 00:24:41,678
multiplicative upke

616
00:24:38,320 --> 00:24:45,439
for electric curves you can check

617
00:24:41,679 --> 00:24:49,360
the post by gel in the mls mailing list

618
00:24:45,440 --> 00:24:49,360
and also a draft on this topic

619
00:24:50,559 --> 00:24:54,320
and basically that's all i had to say

620
00:24:53,120 --> 00:24:58,799
and

621
00:24:54,320 --> 00:25:01,840
this is our imprint version of the paper

622
00:24:58,799 --> 00:25:01,840
and thank you

