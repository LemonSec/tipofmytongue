1
00:00:00,240 --> 00:00:05,679
let's see we are on youtube

2
00:00:05,920 --> 00:00:10,240
and being recorded and um session chairs

3
00:00:08,559 --> 00:00:13,440
take it away

4
00:00:10,240 --> 00:00:15,839
all right thanks leo welcome everyone to

5
00:00:13,440 --> 00:00:17,039
today's first session which is on real

6
00:00:15,839 --> 00:00:19,439
world crypto

7
00:00:17,039 --> 00:00:20,240
we'll have six talks in that session and

8
00:00:19,439 --> 00:00:23,279
we'll be

9
00:00:20,240 --> 00:00:24,320
kicking it off uh by the security

10
00:00:23,279 --> 00:00:28,160
analysis of

11
00:00:24,320 --> 00:00:29,039
nist ctrg drbg and vietng will be giving

12
00:00:28,160 --> 00:00:30,880
the talk

13
00:00:29,039 --> 00:00:33,359
yet please go ahead and share your

14
00:00:30,880 --> 00:00:33,359
slides

15
00:00:34,640 --> 00:00:39,040
can you guys see my screen now

16
00:00:42,360 --> 00:00:48,320
yes okay

17
00:00:44,480 --> 00:00:51,599
so hi everybody this is

18
00:00:48,320 --> 00:00:51,600
with yao bin shin

19
00:00:51,920 --> 00:00:58,960
so today i'll talk about the security of

20
00:00:55,520 --> 00:01:01,760
the vivg with a national standard of

21
00:00:58,960 --> 00:01:04,000
random number generator

22
00:01:01,760 --> 00:01:05,600
this tool has been used in numerous

23
00:01:04,000 --> 00:01:09,680
cryptographic libraries

24
00:01:05,600 --> 00:01:13,360
and operating systems such as open ssl

25
00:01:09,680 --> 00:01:14,159
or windows 10. the security of these

26
00:01:13,360 --> 00:01:17,520
systems

27
00:01:14,159 --> 00:01:19,920
crucially depends on counter drbg

28
00:01:17,520 --> 00:01:21,119
but for a long time there have been very

29
00:01:19,920 --> 00:01:24,960
few papers

30
00:01:21,119 --> 00:01:28,000
analyzing it the security analysis

31
00:01:24,960 --> 00:01:30,798
in those papers however very limited

32
00:01:28,000 --> 00:01:32,960
and cannot support the claims in the

33
00:01:30,799 --> 00:01:36,560
standard

34
00:01:32,960 --> 00:01:38,880
then in 2019 woulda and schumann

35
00:01:36,560 --> 00:01:40,240
point out that some options in the

36
00:01:38,880 --> 00:01:43,920
standard might be

37
00:01:40,240 --> 00:01:46,320
exploited and shortly after

38
00:01:43,920 --> 00:01:47,439
their theoretical observation is

39
00:01:46,320 --> 00:01:50,398
confirmed by

40
00:01:47,439 --> 00:01:51,279
carney at all by some side channel

41
00:01:50,399 --> 00:01:55,040
attacks on

42
00:01:51,280 --> 00:01:59,200
implementation of counter drbg

43
00:01:55,040 --> 00:02:01,680
so the lessons learned here number one

44
00:01:59,200 --> 00:02:02,399
we should deprecate some institute

45
00:02:01,680 --> 00:02:05,920
options

46
00:02:02,399 --> 00:02:08,959
in the overly flexible standard

47
00:02:05,920 --> 00:02:12,160
and number two you have to be mindful of

48
00:02:08,959 --> 00:02:16,000
some implementation issues

49
00:02:12,160 --> 00:02:18,000
but a big question still remains that is

50
00:02:16,000 --> 00:02:19,920
if we adopt the recommendations from

51
00:02:18,000 --> 00:02:23,120
those two papers

52
00:02:19,920 --> 00:02:26,480
then is the patched scouter diabetes

53
00:02:23,120 --> 00:02:29,200
secure so our

54
00:02:26,480 --> 00:02:30,480
gives an affirmative answer for these

55
00:02:29,200 --> 00:02:32,399
questions

56
00:02:30,480 --> 00:02:34,160
in particular we show that counter

57
00:02:32,400 --> 00:02:37,360
diabetes mr robertson's

58
00:02:34,160 --> 00:02:38,560
notion of notice at all which is the

59
00:02:37,360 --> 00:02:42,080
standard notion

60
00:02:38,560 --> 00:02:44,480
of random number generator

61
00:02:42,080 --> 00:02:47,040
so now let me show you a bird eye view

62
00:02:44,480 --> 00:02:50,000
of counter drbg

63
00:02:47,040 --> 00:02:50,879
it is based on a randomized extractor

64
00:02:50,000 --> 00:02:55,120
that we call

65
00:02:50,879 --> 00:02:59,120
condensed then encrypt our cte

66
00:02:55,120 --> 00:03:02,400
so underneath the counter drbg there is

67
00:02:59,120 --> 00:03:05,920
a state kv

68
00:03:02,400 --> 00:03:09,120
which consists of a block sample key k

69
00:03:05,920 --> 00:03:09,119
and an iv v

70
00:03:09,200 --> 00:03:12,560
counter diabg consists of the three

71
00:03:11,280 --> 00:03:15,040
algorithms

72
00:03:12,560 --> 00:03:16,400
one to derive the initial value of the

73
00:03:15,040 --> 00:03:19,040
state

74
00:03:16,400 --> 00:03:21,040
another to refresh the state if you have

75
00:03:19,040 --> 00:03:23,040
new random inputs

76
00:03:21,040 --> 00:03:24,640
and yet another one to generate the

77
00:03:23,040 --> 00:03:27,920
outputs

78
00:03:24,640 --> 00:03:29,279
for example if you have a new random

79
00:03:27,920 --> 00:03:31,920
input i

80
00:03:29,280 --> 00:03:33,280
and you want to refresh the state then

81
00:03:31,920 --> 00:03:36,480
you will first apply

82
00:03:33,280 --> 00:03:38,799
cte on i

83
00:03:36,480 --> 00:03:41,040
you would then use the counter mode to

84
00:03:38,799 --> 00:03:44,480
encrypt the extracted output

85
00:03:41,040 --> 00:03:47,679
with the key and iv from the state

86
00:03:44,480 --> 00:03:50,640
and the resulting output will be the new

87
00:03:47,680 --> 00:03:50,640
updated state

88
00:03:51,840 --> 00:03:58,640
so the technical core of our paper is to

89
00:03:54,319 --> 00:04:01,518
analyze the security of cpe

90
00:03:58,640 --> 00:04:02,319
so this tune is based on cbc mark to

91
00:04:01,519 --> 00:04:06,400
extract

92
00:04:02,319 --> 00:04:09,119
randomness uh but its use of cbc mac

93
00:04:06,400 --> 00:04:09,519
violates the guy in the classical work

94
00:04:09,120 --> 00:04:13,439
of

95
00:04:09,519 --> 00:04:15,200
notice at all in particular it uses cpc

96
00:04:13,439 --> 00:04:18,639
map multiple times

97
00:04:15,200 --> 00:04:20,560
on essentially the same input uh obey

98
00:04:18,639 --> 00:04:24,240
with the different distinct

99
00:04:20,560 --> 00:04:28,240
different constant ivs

100
00:04:24,240 --> 00:04:29,280
side first glance if you aim to prove

101
00:04:28,240 --> 00:04:31,919
that

102
00:04:29,280 --> 00:04:34,239
the outputs are pseudorandom then we are

103
00:04:31,919 --> 00:04:37,680
doomed

104
00:04:34,240 --> 00:04:40,639
to circumvent this theoretical obstacle

105
00:04:37,680 --> 00:04:41,440
we observe that the outputs of cde will

106
00:04:40,639 --> 00:04:44,720
be used to

107
00:04:41,440 --> 00:04:47,520
write a key and iv for

108
00:04:44,720 --> 00:04:48,400
the counter mode and if we model the

109
00:04:47,520 --> 00:04:52,080
block server

110
00:04:48,400 --> 00:04:55,520
as an ibu cipher then the outputs of c

111
00:04:52,080 --> 00:04:58,400
only need to be unbelievable instead of

112
00:04:55,520 --> 00:04:59,359
being pseudo-random so we can get around

113
00:04:58,400 --> 00:05:03,198
this

114
00:04:59,360 --> 00:05:03,680
theoretical issue so this allows us to

115
00:05:03,199 --> 00:05:06,880
start

116
00:05:03,680 --> 00:05:07,600
analyzing the security of cte but the

117
00:05:06,880 --> 00:05:11,120
existing

118
00:05:07,600 --> 00:05:15,039
analysis of cbc map will give us only a

119
00:05:11,120 --> 00:05:18,080
weak bow to improve about quality

120
00:05:15,039 --> 00:05:22,400
we observe that if you want to

121
00:05:18,080 --> 00:05:25,359
predict the output of cte because it is

122
00:05:22,400 --> 00:05:26,320
basically a cbc encryption output you

123
00:05:25,360 --> 00:05:29,440
need to predict

124
00:05:26,320 --> 00:05:33,120
both the key and iv of

125
00:05:29,440 --> 00:05:36,880
cbc encryption and

126
00:05:33,120 --> 00:05:39,560
in order to about this unpredictability

127
00:05:36,880 --> 00:05:40,719
well it's translates to bounding a

128
00:05:39,560 --> 00:05:44,080
multi-collision

129
00:05:40,720 --> 00:05:46,639
uh probability on cbc mac it's quite

130
00:05:44,080 --> 00:05:46,639
challenging

131
00:05:47,039 --> 00:05:54,000
so in conclusion our work shows that the

132
00:05:50,240 --> 00:05:56,400
counter drbg is now actually secured

133
00:05:54,000 --> 00:05:57,039
moreover we also shed some light on the

134
00:05:56,400 --> 00:06:00,479
design of

135
00:05:57,039 --> 00:06:03,599
counter drbg at the first lens

136
00:06:00,479 --> 00:06:06,880
this construction is very cumbersome

137
00:06:03,600 --> 00:06:10,319
but deep down underneath this ugly cover

138
00:06:06,880 --> 00:06:12,319
it contains quite interesting ideas for

139
00:06:10,319 --> 00:06:15,759
getting around the limitation of using

140
00:06:12,319 --> 00:06:18,960
cbc map to extract randomness

141
00:06:15,759 --> 00:06:18,960
that's it thank you

142
00:06:19,440 --> 00:06:24,880
thank you very much vietnam so

143
00:06:22,560 --> 00:06:25,680
we have quite some time for questions

144
00:06:24,880 --> 00:06:28,080
we'll

145
00:06:25,680 --> 00:06:29,600
again handle it as having questions on

146
00:06:28,080 --> 00:06:32,719
the talk right away

147
00:06:29,600 --> 00:06:35,280
roughly for uh five minutes for each

148
00:06:32,720 --> 00:06:37,440
talk depending on the length

149
00:06:35,280 --> 00:06:39,840
so if you have any questions and are on

150
00:06:37,440 --> 00:06:43,039
zoom please go ahead and raise your hand

151
00:06:39,840 --> 00:06:46,960
so we can address that uh

152
00:06:43,039 --> 00:06:46,960
john kelsey that's the question

153
00:06:47,440 --> 00:06:54,240
ah here we go okay can you hear me

154
00:06:50,720 --> 00:06:56,080
yes john okay so um

155
00:06:54,240 --> 00:06:58,000
i i like your work a lot this is very

156
00:06:56,080 --> 00:06:59,520
cool um

157
00:06:58,000 --> 00:07:01,680
one thing i wanted to point out i said

158
00:06:59,520 --> 00:07:02,560
this in the chat too the extractor that

159
00:07:01,680 --> 00:07:04,000
we use

160
00:07:02,560 --> 00:07:06,000
is actually called block cipher

161
00:07:04,000 --> 00:07:07,599
derivation function or bcdf

162
00:07:06,000 --> 00:07:09,199
in the standard i just thought it was

163
00:07:07,599 --> 00:07:10,800
useful to make sure everybody

164
00:07:09,199 --> 00:07:12,960
knows that because otherwise they might

165
00:07:10,800 --> 00:07:16,000
be looking for cte and it's

166
00:07:12,960 --> 00:07:18,880
not it's not called cte in the standard

167
00:07:16,000 --> 00:07:20,000
uh i know so we look at that the name is

168
00:07:18,880 --> 00:07:23,280
not a very uh

169
00:07:20,000 --> 00:07:24,160
mnemonic and so which a different name

170
00:07:23,280 --> 00:07:26,880
because uh

171
00:07:24,160 --> 00:07:27,520
we believe that it describes the design

172
00:07:26,880 --> 00:07:30,639
ideas quite

173
00:07:27,520 --> 00:07:31,840
well the other one is uh it's a

174
00:07:30,639 --> 00:07:36,080
reasonable name but

175
00:07:31,840 --> 00:07:38,960
uh i i i'm afraid that it's kind of

176
00:07:36,080 --> 00:07:38,960
hard to pronounce

177
00:07:39,120 --> 00:07:43,680
okay that's that's that was the comment

178
00:07:42,080 --> 00:07:46,639
i want to make thank you

179
00:07:43,680 --> 00:07:46,960
yeah so john i have questions for you so

180
00:07:46,639 --> 00:07:49,120
you

181
00:07:46,960 --> 00:07:51,520
add i think that you will involve in the

182
00:07:49,120 --> 00:07:55,120
design of counter drbg

183
00:07:51,520 --> 00:07:57,758
and that's my design you intentionally

184
00:07:55,120 --> 00:07:58,240
make it quite cumbersome that way

185
00:07:57,759 --> 00:08:00,560
because

186
00:07:58,240 --> 00:08:01,520
initially for a simple design that you

187
00:08:00,560 --> 00:08:04,800
had

188
00:08:01,520 --> 00:08:08,719
uh you couldn't pass the starting suite

189
00:08:04,800 --> 00:08:10,560
of needs somehow the entropy was

190
00:08:08,720 --> 00:08:12,240
somehow the randomness was not good

191
00:08:10,560 --> 00:08:15,520
enough

192
00:08:12,240 --> 00:08:18,400
somehow if you eat a twitter design this

193
00:08:15,520 --> 00:08:20,560
complicated way you will be able to

194
00:08:18,400 --> 00:08:24,840
bypass that

195
00:08:20,560 --> 00:08:28,960
so it seems that the the the design here

196
00:08:24,840 --> 00:08:31,840
actually the security of cathedral both

197
00:08:28,960 --> 00:08:34,000
theoretically and imperially is that

198
00:08:31,840 --> 00:08:36,399
correct

199
00:08:34,000 --> 00:08:37,519
well when we did the block cipher

200
00:08:36,399 --> 00:08:39,039
derivation function

201
00:08:37,519 --> 00:08:41,679
i'm having a little trouble hearing you

202
00:08:39,039 --> 00:08:44,319
but um when we did that when i did the

203
00:08:41,679 --> 00:08:44,880
i did the counter drpgs that's my design

204
00:08:44,320 --> 00:08:48,320
and

205
00:08:44,880 --> 00:08:50,240
the block cipher derivation function was

206
00:08:48,320 --> 00:08:51,680
it was certainly not the result of me

207
00:08:50,240 --> 00:08:54,880
having a deep analysis

208
00:08:51,680 --> 00:08:55,920
of the of the attacks it was me being

209
00:08:54,880 --> 00:08:59,760
uneasy with

210
00:08:55,920 --> 00:09:01,839
with just using cbc mac directly and

211
00:08:59,760 --> 00:09:03,680
wanting to have the ability also the

212
00:09:01,839 --> 00:09:05,839
other half derivation function also the

213
00:09:03,680 --> 00:09:08,479
hash derivation function also has this

214
00:09:05,839 --> 00:09:10,399
wanting the ability to get variable

215
00:09:08,480 --> 00:09:14,160
length outputs

216
00:09:10,399 --> 00:09:18,240
we've actually looked um later on

217
00:09:14,160 --> 00:09:21,839
at allowing just using cbc mac

218
00:09:18,240 --> 00:09:24,080
for for instantiating counter

219
00:09:21,839 --> 00:09:25,120
as a more efficient thing and we've been

220
00:09:24,080 --> 00:09:27,120
we've considered that

221
00:09:25,120 --> 00:09:28,560
so that's looking at your looking at

222
00:09:27,120 --> 00:09:30,560
your paper makes me

223
00:09:28,560 --> 00:09:32,079
makes me think about that again a little

224
00:09:30,560 --> 00:09:34,239
bit more

225
00:09:32,080 --> 00:09:36,080
so uh so you're so you're having an

226
00:09:34,240 --> 00:09:39,360
impact on what we're doing

227
00:09:36,080 --> 00:09:42,560
but with but but especially you know

228
00:09:39,360 --> 00:09:45,600
in general for for the these drbgs

229
00:09:42,560 --> 00:09:47,279
um i was looking i was very much looking

230
00:09:45,600 --> 00:09:48,720
at designing things and trying to attack

231
00:09:47,279 --> 00:09:50,640
them and if i could attack them than

232
00:09:48,720 --> 00:09:51,040
patching them so i wasn't really

233
00:09:50,640 --> 00:09:52,160
thinking

234
00:09:51,040 --> 00:09:54,319
in terms of writing something that i

235
00:09:52,160 --> 00:09:55,680
could prove anything about at that point

236
00:09:54,320 --> 00:09:58,080
and you definitely see that in all the

237
00:09:55,680 --> 00:09:58,079
designs

238
00:09:59,680 --> 00:10:04,640
thank you john all right thank you

239
00:10:02,800 --> 00:10:06,640
we have to move on to the next talk but

240
00:10:04,640 --> 00:10:08,000
uh there is some more questions in the

241
00:10:06,640 --> 00:10:11,040
chat so maybe your tune

242
00:10:08,000 --> 00:10:13,360
you can take a look uh that now or later

243
00:10:11,040 --> 00:10:15,040
and also for all the other speakers

244
00:10:13,360 --> 00:10:15,600
please after you talk also to take a

245
00:10:15,040 --> 00:10:17,279
look at

246
00:10:15,600 --> 00:10:20,000
questions which we might not cover in

247
00:10:17,279 --> 00:10:22,240
the time given here

248
00:10:20,000 --> 00:10:23,440
so let's move on to the second talk

249
00:10:22,240 --> 00:10:25,920
which will be given by

250
00:10:23,440 --> 00:10:27,839
uel on the security analysis and

251
00:10:25,920 --> 00:10:30,560
improvements for the ietf

252
00:10:27,839 --> 00:10:32,240
mls standard for group messaging please

253
00:10:30,560 --> 00:10:35,439
go ahead

254
00:10:32,240 --> 00:10:39,120
thank you can everybody see the slides

255
00:10:35,440 --> 00:10:39,920
yes thanks good so uh thanks for coming

256
00:10:39,120 --> 00:10:41,680
to my talk

257
00:10:39,920 --> 00:10:44,000
um i'm joelle and i'm going to tell you

258
00:10:41,680 --> 00:10:45,279
about some joint work with sandro evgeny

259
00:10:44,000 --> 00:10:47,839
and janis

260
00:10:45,279 --> 00:10:50,079
so in this work we looked at a primitive

261
00:10:47,839 --> 00:10:50,800
or protocol called continuous group key

262
00:10:50,079 --> 00:10:53,279
agreement

263
00:10:50,800 --> 00:10:55,040
you can think of this as group key

264
00:10:53,279 --> 00:10:57,760
agreement the older primitive

265
00:10:55,040 --> 00:10:59,439
but for dynamic groups with stronger

266
00:10:57,760 --> 00:11:02,880
security requirements

267
00:10:59,440 --> 00:11:04,800
and much less interaction so uh

268
00:11:02,880 --> 00:11:06,320
another it also comes under the name

269
00:11:04,800 --> 00:11:07,439
group ratcheting

270
00:11:06,320 --> 00:11:09,040
um you could think of it as the

271
00:11:07,440 --> 00:11:10,560
multi-party version of continuous key

272
00:11:09,040 --> 00:11:12,319
agreement for those familiar with that

273
00:11:10,560 --> 00:11:14,160
that was a primitive introduced for

274
00:11:12,320 --> 00:11:15,600
the analysis of the double ratchet last

275
00:11:14,160 --> 00:11:17,279
year

276
00:11:15,600 --> 00:11:19,200
what kind of features does this protocol

277
00:11:17,279 --> 00:11:21,760
have well as as i said

278
00:11:19,200 --> 00:11:23,360
it's got to support dynamic groups which

279
00:11:21,760 --> 00:11:25,760
means the group membership

280
00:11:23,360 --> 00:11:26,959
can change over the course of one

281
00:11:25,760 --> 00:11:28,800
session

282
00:11:26,959 --> 00:11:30,000
also these sessions are expected to last

283
00:11:28,800 --> 00:11:32,719
very long time

284
00:11:30,000 --> 00:11:33,760
years so we're interested in security

285
00:11:32,720 --> 00:11:36,000
notions that

286
00:11:33,760 --> 00:11:36,959
allow for compromise of an ongoing

287
00:11:36,000 --> 00:11:38,320
session

288
00:11:36,959 --> 00:11:40,160
for the purpose of this talk we'll

289
00:11:38,320 --> 00:11:42,320
mainly be interested in forward secrecy

290
00:11:40,160 --> 00:11:44,959
forward security

291
00:11:42,320 --> 00:11:46,880
which means that if you compromise a

292
00:11:44,959 --> 00:11:47,599
group member today you steal their local

293
00:11:46,880 --> 00:11:49,839
state

294
00:11:47,600 --> 00:11:52,079
this should not reveal old group keys

295
00:11:49,839 --> 00:11:54,399
from the past

296
00:11:52,079 --> 00:11:56,399
so the syntax for a cgk is very simple

297
00:11:54,399 --> 00:11:58,720
you can really only do four things

298
00:11:56,399 --> 00:12:00,320
you can initiate you can create a group

299
00:11:58,720 --> 00:12:02,160
you can add a new member

300
00:12:00,320 --> 00:12:03,519
to the group you can remove an existing

301
00:12:02,160 --> 00:12:05,680
number from the group

302
00:12:03,519 --> 00:12:06,800
and you can refresh your key material

303
00:12:05,680 --> 00:12:08,719
it's an update

304
00:12:06,800 --> 00:12:10,800
that's not as important for this talk

305
00:12:08,720 --> 00:12:12,800
actually really the main thing to

306
00:12:10,800 --> 00:12:14,719
remember about cgka

307
00:12:12,800 --> 00:12:16,399
is that each one of these operation

308
00:12:14,720 --> 00:12:19,120
begins a new epoch

309
00:12:16,399 --> 00:12:21,760
in the lifetime of this group and each

310
00:12:19,120 --> 00:12:24,000
epoch is equipped with a fresh group key

311
00:12:21,760 --> 00:12:24,800
that should be known to all the members

312
00:12:24,000 --> 00:12:26,560
of the group

313
00:12:24,800 --> 00:12:27,920
who are members during that epoch and

314
00:12:26,560 --> 00:12:29,599
nobody else

315
00:12:27,920 --> 00:12:31,439
so that's what a cgka is doing it's

316
00:12:29,600 --> 00:12:34,320
giving you this constant stream

317
00:12:31,440 --> 00:12:35,600
of group keys one prairie punk why are

318
00:12:34,320 --> 00:12:38,320
we interested in cgk

319
00:12:35,600 --> 00:12:40,399
well because it's closely related to the

320
00:12:38,320 --> 00:12:42,240
messaging layer security

321
00:12:40,399 --> 00:12:44,480
protocols this is a protocol that's

322
00:12:42,240 --> 00:12:48,160
under development by the ietf

323
00:12:44,480 --> 00:12:50,480
collaboration between academia industry

324
00:12:48,160 --> 00:12:52,800
and it aims to provide an end-to-end

325
00:12:50,480 --> 00:12:54,800
secure group messaging protocol

326
00:12:52,800 --> 00:12:57,439
um it's supposed to be a synchronous and

327
00:12:54,800 --> 00:12:59,279
crucially support very large groups

328
00:12:57,440 --> 00:13:00,959
the thing is if you look at the mls

329
00:12:59,279 --> 00:13:01,920
protocol the way it's defined

330
00:13:00,959 --> 00:13:04,880
constructed

331
00:13:01,920 --> 00:13:07,040
you'll find that really the critical

332
00:13:04,880 --> 00:13:10,399
novel component in mls

333
00:13:07,040 --> 00:13:12,079
is a cgka which is called treechem

334
00:13:10,399 --> 00:13:14,720
and again its primary function is to

335
00:13:12,079 --> 00:13:16,719
provide a key material with which to

336
00:13:14,720 --> 00:13:18,079
seed a bunch of like symmetric ratchets

337
00:13:16,720 --> 00:13:20,720
basically

338
00:13:18,079 --> 00:13:22,399
so when we want to look at mls we

339
00:13:20,720 --> 00:13:22,880
decided we're going to start with cg

340
00:13:22,399 --> 00:13:25,839
with the

341
00:13:22,880 --> 00:13:26,959
treechem cgk so here here are the things

342
00:13:25,839 --> 00:13:29,120
we found

343
00:13:26,959 --> 00:13:30,560
um first we found that the forward

344
00:13:29,120 --> 00:13:34,000
secrecy of the

345
00:13:30,560 --> 00:13:36,719
treecam cgk is really a lot poorer than

346
00:13:34,000 --> 00:13:38,240
what we had hoped for so more concretely

347
00:13:36,720 --> 00:13:41,920
suppose you've got a group of size

348
00:13:38,240 --> 00:13:44,079
n then each group key is not really

349
00:13:41,920 --> 00:13:47,680
going to be forward secure for at least

350
00:13:44,079 --> 00:13:48,160
another n epochs after that group key

351
00:13:47,680 --> 00:13:49,760
was

352
00:13:48,160 --> 00:13:51,760
you know after that puck with that group

353
00:13:49,760 --> 00:13:53,120
key that's really not

354
00:13:51,760 --> 00:13:55,120
what you would hope for you know for

355
00:13:53,120 --> 00:13:55,440
that as soon as everybody's moved on to

356
00:13:55,120 --> 00:13:58,560
just

357
00:13:55,440 --> 00:14:00,399
one next epoch the group key is already

358
00:13:58,560 --> 00:14:01,279
forward secure i.e even if you corrupted

359
00:14:00,399 --> 00:14:03,040
everybody you wouldn't be able to

360
00:14:01,279 --> 00:14:05,360
recover the group key

361
00:14:03,040 --> 00:14:06,959
so so treechem doesn't have this and

362
00:14:05,360 --> 00:14:09,120
what that means for mls

363
00:14:06,959 --> 00:14:11,599
is that mls is suboptimal in terms of

364
00:14:09,120 --> 00:14:13,760
resilience to repeated corruptions

365
00:14:11,600 --> 00:14:14,959
remember mls is also designed for long

366
00:14:13,760 --> 00:14:16,720
term sessions

367
00:14:14,959 --> 00:14:18,079
and so when we say repeated corruptions

368
00:14:16,720 --> 00:14:19,839
i mean something like you corrupt

369
00:14:18,079 --> 00:14:21,760
a group number today and then a thousand

370
00:14:19,839 --> 00:14:22,720
epochs later you corrupt another group

371
00:14:21,760 --> 00:14:24,720
member

372
00:14:22,720 --> 00:14:25,920
it turns out because of these poor fs

373
00:14:24,720 --> 00:14:28,160
properties of tree cam

374
00:14:25,920 --> 00:14:29,439
it could be that with those two

375
00:14:28,160 --> 00:14:31,279
corruptions you can recover

376
00:14:29,440 --> 00:14:33,920
all the messages that were sent in those

377
00:14:31,279 --> 00:14:35,839
intervening thousand epochs

378
00:14:33,920 --> 00:14:38,560
and in fact forward secrecy may never

379
00:14:35,839 --> 00:14:40,480
even kick in it's execution dependent

380
00:14:38,560 --> 00:14:41,599
so with that in mind we prove a weak

381
00:14:40,480 --> 00:14:44,079
security notion

382
00:14:41,600 --> 00:14:45,839
for tree cam against static and adaptive

383
00:14:44,079 --> 00:14:47,359
adversaries

384
00:14:45,839 --> 00:14:48,880
we went on then to look for a

385
00:14:47,360 --> 00:14:50,480
construction we wanted to you know fix

386
00:14:48,880 --> 00:14:51,519
this problem basically and indeed we

387
00:14:50,480 --> 00:14:52,800
found a construction

388
00:14:51,519 --> 00:14:54,560
a new construction which we call our

389
00:14:52,800 --> 00:14:56,959
tree chem and we

390
00:14:54,560 --> 00:14:58,560
we show that it enjoys optimal forward

391
00:14:56,959 --> 00:15:00,399
secrecy in other words

392
00:14:58,560 --> 00:15:02,319
group keys become forward secret the

393
00:15:00,399 --> 00:15:04,000
moment everybody's moved on to just one

394
00:15:02,320 --> 00:15:06,240
more epoch

395
00:15:04,000 --> 00:15:08,000
and we define security we prove it in

396
00:15:06,240 --> 00:15:10,560
albeit in a simplified model where we

397
00:15:08,000 --> 00:15:12,480
assume some sort of consistent broadcast

398
00:15:10,560 --> 00:15:14,000
although we do believe this archery

399
00:15:12,480 --> 00:15:16,160
protocol is secure

400
00:15:14,000 --> 00:15:17,440
also in a more general setting and most

401
00:15:16,160 --> 00:15:19,600
of the proof technique will really just

402
00:15:17,440 --> 00:15:21,440
carry over

403
00:15:19,600 --> 00:15:23,600
in order to define our tree cam we

404
00:15:21,440 --> 00:15:24,320
actually introduce a new primitive which

405
00:15:23,600 --> 00:15:26,000
i think is

406
00:15:24,320 --> 00:15:28,240
probably you know will be interesting in

407
00:15:26,000 --> 00:15:30,000
its own right we called it updatable

408
00:15:28,240 --> 00:15:31,440
public key encryption it's related to

409
00:15:30,000 --> 00:15:33,279
similar primitives in the two-party

410
00:15:31,440 --> 00:15:35,920
secure messaging literature

411
00:15:33,279 --> 00:15:36,399
and i think of this as forward-secure

412
00:15:35,920 --> 00:15:39,199
public

413
00:15:36,399 --> 00:15:40,560
encryption light by light i mean we

414
00:15:39,199 --> 00:15:42,079
relax the notion

415
00:15:40,560 --> 00:15:43,839
of forward security that we usually

416
00:15:42,079 --> 00:15:46,239
would consider for public key encryption

417
00:15:43,839 --> 00:15:48,560
and what this buys us is truly

418
00:15:46,240 --> 00:15:50,959
practically efficient constructions

419
00:15:48,560 --> 00:15:52,959
i'm talking one more group element than

420
00:15:50,959 --> 00:15:55,758
an elgamal encryption

421
00:15:52,959 --> 00:15:57,680
so this is something one can really use

422
00:15:55,759 --> 00:15:59,680
and you can think of this as you take

423
00:15:57,680 --> 00:16:01,359
normal public key encryption

424
00:15:59,680 --> 00:16:03,279
and now you augment it so that when you

425
00:16:01,360 --> 00:16:03,759
encrypt your decrypt to a key pair you

426
00:16:03,279 --> 00:16:05,360
actually

427
00:16:03,759 --> 00:16:07,040
as part of the process you're also

428
00:16:05,360 --> 00:16:09,040
re-randomizing that key pair

429
00:16:07,040 --> 00:16:10,240
so encryption outputs a cipher text and

430
00:16:09,040 --> 00:16:12,079
a re-randomized

431
00:16:10,240 --> 00:16:14,160
public key and decryption outputs the

432
00:16:12,079 --> 00:16:15,599
plain text and the re-randomized secret

433
00:16:14,160 --> 00:16:17,199
key

434
00:16:15,600 --> 00:16:19,440
so so how does this play into this

435
00:16:17,199 --> 00:16:21,758
problem of forward secrecy for treechem

436
00:16:19,440 --> 00:16:23,120
well think about if you want a cipher

437
00:16:21,759 --> 00:16:25,519
text you want to say that ciphertext is

438
00:16:23,120 --> 00:16:28,240
forward secret i.e there's no way left

439
00:16:25,519 --> 00:16:29,519
to decrypt the ciphertext well the

440
00:16:28,240 --> 00:16:30,000
minimum of what you're going to need to

441
00:16:29,519 --> 00:16:32,240
do

442
00:16:30,000 --> 00:16:33,839
is make sure that everybody has deleted

443
00:16:32,240 --> 00:16:35,199
from their local states the decryption

444
00:16:33,839 --> 00:16:37,839
keys

445
00:16:35,199 --> 00:16:38,479
if we look at treechem we see that there

446
00:16:37,839 --> 00:16:42,320
are

447
00:16:38,480 --> 00:16:44,160
actually only few operations that result

448
00:16:42,320 --> 00:16:45,759
in people deleting decryption keys and

449
00:16:44,160 --> 00:16:46,399
they really only delete a small number

450
00:16:45,759 --> 00:16:47,920
of

451
00:16:46,399 --> 00:16:50,079
all the decryption keys that are part of

452
00:16:47,920 --> 00:16:50,639
this distributed group state namely log

453
00:16:50,079 --> 00:16:53,199
n

454
00:16:50,639 --> 00:16:55,519
out of two n keys but what's worse and

455
00:16:53,199 --> 00:16:57,758
this was really the insight that we had

456
00:16:55,519 --> 00:16:59,920
was that these decryption keys that are

457
00:16:57,759 --> 00:17:01,839
protecting your target ciphertext

458
00:16:59,920 --> 00:17:03,759
those decryption keys are themselves

459
00:17:01,839 --> 00:17:05,679
encrypted under login keys that are

460
00:17:03,759 --> 00:17:07,439
again distributed over the network

461
00:17:05,679 --> 00:17:08,959
so really you want forward secrecy for

462
00:17:07,439 --> 00:17:10,799
that ciphertext not enough to

463
00:17:08,959 --> 00:17:12,240
delete those decryption keys you have to

464
00:17:10,799 --> 00:17:14,559
also delete those login

465
00:17:12,240 --> 00:17:16,319
other decryption keys and in fact this

466
00:17:14,559 --> 00:17:18,319
is recursive those login keys are

467
00:17:16,319 --> 00:17:20,079
themselves again distributed by login

468
00:17:18,319 --> 00:17:22,159
other what keys each one of them

469
00:17:20,079 --> 00:17:24,720
and so on so forth so that's really

470
00:17:22,160 --> 00:17:27,679
where the problem rises for treecam

471
00:17:24,720 --> 00:17:28,240
so what we did is just simply we said

472
00:17:27,679 --> 00:17:29,919
okay

473
00:17:28,240 --> 00:17:31,200
instead of using pke public key

474
00:17:29,919 --> 00:17:32,000
encryption to do your encrypting of

475
00:17:31,200 --> 00:17:33,679
ciphertext

476
00:17:32,000 --> 00:17:35,840
you should use updatable public key

477
00:17:33,679 --> 00:17:37,200
encryption because then what's the

478
00:17:35,840 --> 00:17:38,320
result as soon as you receive the

479
00:17:37,200 --> 00:17:40,400
ciphertext

480
00:17:38,320 --> 00:17:41,760
in the process of decrypting it you

481
00:17:40,400 --> 00:17:44,400
immediately re-randomize

482
00:17:41,760 --> 00:17:45,520
and overwrite the decryption key so as

483
00:17:44,400 --> 00:17:47,919
soon as you're finished with that

484
00:17:45,520 --> 00:17:50,480
compromising u does not reveal

485
00:17:47,919 --> 00:17:51,919
that decryption key anymore and indeed

486
00:17:50,480 --> 00:17:52,960
following through on that logic we're

487
00:17:51,919 --> 00:17:54,559
able to show

488
00:17:52,960 --> 00:17:56,320
that archery kim has optimal forward

489
00:17:54,559 --> 00:18:00,639
secrecy

490
00:17:56,320 --> 00:18:04,000
okay thank you

491
00:18:00,640 --> 00:18:06,320
all right thank you we have like a

492
00:18:04,000 --> 00:18:15,840
minute or so for a quick question

493
00:18:06,320 --> 00:18:15,840
if you have one please raise your hand

494
00:18:16,480 --> 00:18:20,559
okay maybe i have a very quick one can

495
00:18:18,559 --> 00:18:22,480
you briefly comment on how your new

496
00:18:20,559 --> 00:18:24,480
construction relates to what

497
00:18:22,480 --> 00:18:25,760
mls is doing how the draft is

498
00:18:24,480 --> 00:18:27,840
progressing

499
00:18:25,760 --> 00:18:28,960
so are they updating things based on

500
00:18:27,840 --> 00:18:32,559
that

501
00:18:28,960 --> 00:18:34,640
yeah so it was

502
00:18:32,559 --> 00:18:35,918
no they're not updating it it was a it

503
00:18:34,640 --> 00:18:38,640
was a longer debate

504
00:18:35,919 --> 00:18:40,400
and at the moment the consensus is not

505
00:18:38,640 --> 00:18:42,320
to take the new construction

506
00:18:40,400 --> 00:18:44,080
but that has to do with engineering

507
00:18:42,320 --> 00:18:46,320
constraints with implementing mls

508
00:18:44,080 --> 00:18:47,120
essentially because we're using upk not

509
00:18:46,320 --> 00:18:48,720
pke

510
00:18:47,120 --> 00:18:50,479
it means you cannot go to a standard

511
00:18:48,720 --> 00:18:51,760
crypto library and simply use its

512
00:18:50,480 --> 00:18:53,840
interface say

513
00:18:51,760 --> 00:18:55,280
and it's you know lib salt or openness

514
00:18:53,840 --> 00:18:57,600
to sell you would have to actually

515
00:18:55,280 --> 00:18:58,559
if you want to use the twisted edwards

516
00:18:57,600 --> 00:19:00,080
curves with

517
00:18:58,559 --> 00:19:01,918
with nist curves you could probably do

518
00:19:00,080 --> 00:19:03,439
it with you know the diffie-hellman

519
00:19:01,919 --> 00:19:05,280
basically but with twisted edwards

520
00:19:03,440 --> 00:19:08,000
curves you'd have to unwrap

521
00:19:05,280 --> 00:19:10,080
that that implementation and sort of go

522
00:19:08,000 --> 00:19:12,880
one layer below the api

523
00:19:10,080 --> 00:19:14,320
to build upke and that was that was

524
00:19:12,880 --> 00:19:16,240
problematic because it

525
00:19:14,320 --> 00:19:18,240
imposes a new constraint on implementing

526
00:19:16,240 --> 00:19:19,919
mls that's otherwise not there

527
00:19:18,240 --> 00:19:21,840
so at the moment that's not going to go

528
00:19:19,919 --> 00:19:25,039
into the standard

529
00:19:21,840 --> 00:19:29,039
okay thanks all right

530
00:19:25,039 --> 00:19:31,919
then let's move on to the next talk

531
00:19:29,039 --> 00:19:34,320
which will be on the paper anonymous

532
00:19:31,919 --> 00:19:36,559
tokens with private metadata bit

533
00:19:34,320 --> 00:19:38,559
and michaela will be giving the talk

534
00:19:36,559 --> 00:19:42,320
okay let's go ahead

535
00:19:38,559 --> 00:19:44,399
hello hi um so yeah i will be presenting

536
00:19:42,320 --> 00:19:48,799
onimus tokens this is a joint work with

537
00:19:44,400 --> 00:19:50,240
uh bankruptcy and mariana reichova

538
00:19:48,799 --> 00:19:51,918
anonymous tokens are basically

539
00:19:50,240 --> 00:19:53,600
lightweight single-use anonymous

540
00:19:51,919 --> 00:19:56,559
credentials

541
00:19:53,600 --> 00:19:58,799
you can think of them as a single-use

542
00:19:56,559 --> 00:20:00,960
authorizations

543
00:19:58,799 --> 00:20:02,158
throughout this work our work we focused

544
00:20:00,960 --> 00:20:04,400
on

545
00:20:02,159 --> 00:20:05,919
secret key tokens so the same entity

546
00:20:04,400 --> 00:20:07,840
that is issuing the token is also the

547
00:20:05,919 --> 00:20:11,039
entity that is redeeming them

548
00:20:07,840 --> 00:20:13,120
with private metadata what this means is

549
00:20:11,039 --> 00:20:15,840
that

550
00:20:13,120 --> 00:20:16,399
the issuer is able to embed a single bit

551
00:20:15,840 --> 00:20:19,039
within

552
00:20:16,400 --> 00:20:20,480
these tokens that can be later read off

553
00:20:19,039 --> 00:20:21,760
when they are redeeming the token and

554
00:20:20,480 --> 00:20:23,760
this bit cannot be read by the

555
00:20:21,760 --> 00:20:25,039
by the user this allows for instance for

556
00:20:23,760 --> 00:20:28,320
the creation of block list

557
00:20:25,039 --> 00:20:30,158
that are not detectable by the user

558
00:20:28,320 --> 00:20:31,840
more formally what are we looking for we

559
00:20:30,159 --> 00:20:33,280
have two parties we have a user we have

560
00:20:31,840 --> 00:20:36,639
an issuer

561
00:20:33,280 --> 00:20:39,120
the user can doing an issuance protocol

562
00:20:36,640 --> 00:20:40,960
um ask the issuer for a token given as

563
00:20:39,120 --> 00:20:41,840
input some public parameters and unknown

564
00:20:40,960 --> 00:20:43,679
st

565
00:20:41,840 --> 00:20:44,879
the issuer on the other side given as

566
00:20:43,679 --> 00:20:46,720
input the secret key

567
00:20:44,880 --> 00:20:49,440
and in the case of a private metadata

568
00:20:46,720 --> 00:20:51,280
bit the the bit b

569
00:20:49,440 --> 00:20:52,960
can sort of interact with the user and

570
00:20:51,280 --> 00:20:55,678
at the end the user will get visa

571
00:20:52,960 --> 00:20:56,080
anonymous token at a later time the user

572
00:20:55,679 --> 00:20:57,760
can

573
00:20:56,080 --> 00:20:59,439
give this anonymous token back to the

574
00:20:57,760 --> 00:21:01,360
issuer and the issuer can check

575
00:20:59,440 --> 00:21:03,919
whether a token is valid and extract the

576
00:21:01,360 --> 00:21:06,240
the private metadata bit from it

577
00:21:03,919 --> 00:21:07,360
we would like these uh anonymous tokens

578
00:21:06,240 --> 00:21:09,280
to satisfy

579
00:21:07,360 --> 00:21:10,879
some security properties namely it

580
00:21:09,280 --> 00:21:12,399
should be one more unforgeable the user

581
00:21:10,880 --> 00:21:15,600
shouldn't be able to produce

582
00:21:12,400 --> 00:21:18,480
more tokens than have been issued by

583
00:21:15,600 --> 00:21:20,158
by the issuer before um unlinkable it

584
00:21:18,480 --> 00:21:21,200
shouldn't be possible for the issuer to

585
00:21:20,159 --> 00:21:23,679
understand

586
00:21:21,200 --> 00:21:24,400
to link a redemption session with their

587
00:21:23,679 --> 00:21:26,480
respective

588
00:21:24,400 --> 00:21:28,080
issuance session um in the case of a

589
00:21:26,480 --> 00:21:29,280
private metadata bit we partition the

590
00:21:28,080 --> 00:21:32,320
anonymity set

591
00:21:29,280 --> 00:21:34,240
with a bit used and with demand that

592
00:21:32,320 --> 00:21:35,360
in the same partition the issuer is not

593
00:21:34,240 --> 00:21:37,919
able to link back

594
00:21:35,360 --> 00:21:40,000
the user and in the case of a private

595
00:21:37,919 --> 00:21:42,320
metadata bit we demand that

596
00:21:40,000 --> 00:21:43,840
um an issuance session with a bit set to

597
00:21:42,320 --> 00:21:46,000
zero should be indistinguishable from an

598
00:21:43,840 --> 00:21:47,678
initial session with a bit set to one

599
00:21:46,000 --> 00:21:49,120
these are roughly speaking the security

600
00:21:47,679 --> 00:21:51,600
properties that we have

601
00:21:49,120 --> 00:21:52,879
and modulo the fact the secret key this

602
00:21:51,600 --> 00:21:55,039
is very close to what you

603
00:21:52,880 --> 00:21:56,880
could think for example for um for a

604
00:21:55,039 --> 00:21:58,879
blind signature

605
00:21:56,880 --> 00:22:00,640
why are we interested in them because in

606
00:21:58,880 --> 00:22:01,679
uh on the internet it is very difficult

607
00:22:00,640 --> 00:22:03,679
to understand whether

608
00:22:01,679 --> 00:22:04,880
a user is honest or fraudulent if it's

609
00:22:03,679 --> 00:22:08,480
for instance

610
00:22:04,880 --> 00:22:10,320
a bot or a spammer um and oftentimes on

611
00:22:08,480 --> 00:22:11,600
the internet we have users that try to

612
00:22:10,320 --> 00:22:13,760
access some resource

613
00:22:11,600 --> 00:22:15,039
and this resource is finite or is a very

614
00:22:13,760 --> 00:22:17,440
sensible to spam

615
00:22:15,039 --> 00:22:18,799
what we do in general is that we put an

616
00:22:17,440 --> 00:22:19,360
edge server we put a server in the

617
00:22:18,799 --> 00:22:21,280
middle

618
00:22:19,360 --> 00:22:23,039
that tries to assess whether the user is

619
00:22:21,280 --> 00:22:26,240
fraudulent or not

620
00:22:23,039 --> 00:22:28,320
for instance by with a login page

621
00:22:26,240 --> 00:22:30,799
um which basically destroys the privacy

622
00:22:28,320 --> 00:22:32,320
of the user or with um

623
00:22:30,799 --> 00:22:33,679
making assessments on where will their

624
00:22:32,320 --> 00:22:35,840
requests come from for instance on the

625
00:22:33,679 --> 00:22:37,360
basis of their ip

626
00:22:35,840 --> 00:22:39,520
which also leads to a lot of false

627
00:22:37,360 --> 00:22:41,039
positives for instance if

628
00:22:39,520 --> 00:22:42,720
with people that are using anonymity

629
00:22:41,039 --> 00:22:45,200
services or vpns

630
00:22:42,720 --> 00:22:47,039
um well a solution to this is to use

631
00:22:45,200 --> 00:22:51,039
these anonymous tokens

632
00:22:47,039 --> 00:22:53,919
namely the user can receive these tokens

633
00:22:51,039 --> 00:22:54,640
at some point in time when the server

634
00:22:53,919 --> 00:22:57,600
the service

635
00:22:54,640 --> 00:22:58,240
can assess the trustworthiness of this

636
00:22:57,600 --> 00:22:59,840
user

637
00:22:58,240 --> 00:23:01,440
and then they can redeem them when they

638
00:22:59,840 --> 00:23:02,799
when they try to access this resource

639
00:23:01,440 --> 00:23:04,640
this resource can be even be

640
00:23:02,799 --> 00:23:08,240
for instance a cdn and our servers can

641
00:23:04,640 --> 00:23:10,320
be even like a content delivery service

642
00:23:08,240 --> 00:23:12,000
and because of the cryptographic

643
00:23:10,320 --> 00:23:13,600
properties of these tokens

644
00:23:12,000 --> 00:23:15,120
it is very difficult for the server to

645
00:23:13,600 --> 00:23:18,799
understand which user

646
00:23:15,120 --> 00:23:20,719
is redeeming which resource and

647
00:23:18,799 --> 00:23:22,480
and it's also very difficult for a user

648
00:23:20,720 --> 00:23:25,520
to forge tokens and to

649
00:23:22,480 --> 00:23:28,880
lead to a spam attack to to a spam to

650
00:23:25,520 --> 00:23:28,879
a denial service sorry

651
00:23:30,000 --> 00:23:33,280
why are we interested in a private

652
00:23:31,280 --> 00:23:35,760
metadata because

653
00:23:33,280 --> 00:23:38,000
if an issue if there is an adversarial

654
00:23:35,760 --> 00:23:40,960
user

655
00:23:38,000 --> 00:23:42,400
and this is recognized by the issuer and

656
00:23:40,960 --> 00:23:43,120
the user just decides not to give a

657
00:23:42,400 --> 00:23:46,240
token

658
00:23:43,120 --> 00:23:49,039
then this could lead to

659
00:23:46,240 --> 00:23:50,320
what we call spam learning the adversary

660
00:23:49,039 --> 00:23:52,080
can understand which

661
00:23:50,320 --> 00:23:53,520
behavior led to a detection and we sort

662
00:23:52,080 --> 00:23:56,080
of which sort of behavior

663
00:23:53,520 --> 00:23:57,520
would wouldn't lead to a detection and

664
00:23:56,080 --> 00:23:59,039
in these sort of cases

665
00:23:57,520 --> 00:24:01,520
what you would like to have is an

666
00:23:59,039 --> 00:24:03,440
issuance phase where

667
00:24:01,520 --> 00:24:04,639
the the server behaves exactly in the

668
00:24:03,440 --> 00:24:06,640
same way so

669
00:24:04,640 --> 00:24:08,400
it gives always a token and within this

670
00:24:06,640 --> 00:24:09,520
token there is a bit and whether this

671
00:24:08,400 --> 00:24:11,279
bit is set to zero one is

672
00:24:09,520 --> 00:24:12,879
indistinguishable so that's why we have

673
00:24:11,279 --> 00:24:14,559
a private metadata

674
00:24:12,880 --> 00:24:17,200
then at a later point in time when

675
00:24:14,559 --> 00:24:19,200
adversary tries to redeem

676
00:24:17,200 --> 00:24:21,039
this token well at that point we can

677
00:24:19,200 --> 00:24:22,320
make assessments based on the bit

678
00:24:21,039 --> 00:24:24,158
and so whether that bursaries for

679
00:24:22,320 --> 00:24:25,439
instance is in a block list or not

680
00:24:24,159 --> 00:24:26,880
and decide what to do with this

681
00:24:25,440 --> 00:24:27,840
adversary for instance whether to serve

682
00:24:26,880 --> 00:24:29,760
the content or not

683
00:24:27,840 --> 00:24:32,320
or whether to take it into account at a

684
00:24:29,760 --> 00:24:34,400
later point

685
00:24:32,320 --> 00:24:37,360
and is this really really useful in

686
00:24:34,400 --> 00:24:40,080
practice well it turns out it is the w3c

687
00:24:37,360 --> 00:24:41,360
and more precisely um an incubator the

688
00:24:40,080 --> 00:24:44,399
wi

689
00:24:41,360 --> 00:24:46,799
cg is trying to push

690
00:24:44,400 --> 00:24:47,919
for an api that will be integrated in

691
00:24:46,799 --> 00:24:51,360
the browser

692
00:24:47,919 --> 00:24:54,000
for issuing and redeeming these tokens

693
00:24:51,360 --> 00:24:55,840
and it's based on another standard the

694
00:24:54,000 --> 00:24:58,799
an ide that is being written right now

695
00:24:55,840 --> 00:25:00,158
from ietf that is trying to summarize

696
00:24:58,799 --> 00:25:01,918
anonymous token protocol

697
00:25:00,159 --> 00:25:03,360
called privacy pass by davidson and

698
00:25:01,919 --> 00:25:06,960
others and

699
00:25:03,360 --> 00:25:10,000
both in in both sort of standardizations

700
00:25:06,960 --> 00:25:11,679
there is a this idea of having an

701
00:25:10,000 --> 00:25:14,400
extension for private metadata

702
00:25:11,679 --> 00:25:16,000
which is what we provide more

703
00:25:14,400 --> 00:25:18,000
specifically in our our

704
00:25:16,000 --> 00:25:20,159
contribution to the literature has been

705
00:25:18,000 --> 00:25:22,000
to formalize these anonymous tokens

706
00:25:20,159 --> 00:25:23,760
and provide a number of protocols that

707
00:25:22,000 --> 00:25:25,039
satisfy this private metadata

708
00:25:23,760 --> 00:25:27,200
functionality

709
00:25:25,039 --> 00:25:28,960
and we describe also new techniques for

710
00:25:27,200 --> 00:25:31,279
the removal of zero knowledge proofs

711
00:25:28,960 --> 00:25:32,640
both in protocols that are being already

712
00:25:31,279 --> 00:25:34,240
um in their on the road for

713
00:25:32,640 --> 00:25:36,000
standardization as well in the new

714
00:25:34,240 --> 00:25:39,520
protocols that we introduced for

715
00:25:36,000 --> 00:25:39,520
having private metadata extension

716
00:25:40,240 --> 00:25:44,480
we also implemented our protocols uh

717
00:25:42,480 --> 00:25:47,760
they are in rust sorry kevin

718
00:25:44,480 --> 00:25:49,360
and uh um and we published our

719
00:25:47,760 --> 00:25:50,879
benchmarks for them so that

720
00:25:49,360 --> 00:25:52,959
everybody can sort of see what are the

721
00:25:50,880 --> 00:25:54,799
trade-offs not only between anonymity

722
00:25:52,960 --> 00:25:55,760
and functionality but also with uh with

723
00:25:54,799 --> 00:25:58,559
respect to

724
00:25:55,760 --> 00:26:00,080
how fast your server needs to be and

725
00:25:58,559 --> 00:26:02,158
speed is crucial in these services

726
00:26:00,080 --> 00:26:06,080
because some of the

727
00:26:02,159 --> 00:26:07,520
adopters for instance facebook one

728
00:26:06,080 --> 00:26:10,559
made public already that they want to

729
00:26:07,520 --> 00:26:12,000
use it for advertisement

730
00:26:10,559 --> 00:26:14,480
so i would like to leave you with a

731
00:26:12,000 --> 00:26:16,960
couple of resources

732
00:26:14,480 --> 00:26:17,679
like the full talk and the paper and the

733
00:26:16,960 --> 00:26:21,279
two standards

734
00:26:17,679 --> 00:26:24,320
that i invite you to read thank you

735
00:26:21,279 --> 00:26:27,520
all right thanks mikaela so again

736
00:26:24,320 --> 00:26:29,678
we have a minute or so or two for

737
00:26:27,520 --> 00:26:31,360
a quick question if you have one please

738
00:26:29,679 --> 00:26:34,480
raise your hand

739
00:26:31,360 --> 00:26:36,240
um also again the reminder to the

740
00:26:34,480 --> 00:26:39,039
speakers please take a look at the chat

741
00:26:36,240 --> 00:26:43,200
also there have been a few questions

742
00:26:39,039 --> 00:26:43,840
um piling up uh for previous talk so

743
00:26:43,200 --> 00:26:46,799
yeah

744
00:26:43,840 --> 00:26:48,240
have a look there um our tokens always

745
00:26:46,799 --> 00:26:50,799
one-time use like reversible

746
00:26:48,240 --> 00:26:52,240
yes can you describe how the issuer

747
00:26:50,799 --> 00:26:54,158
decides whether or not to embed

748
00:26:52,240 --> 00:26:55,760
the bit when issuing a token on the user

749
00:26:54,159 --> 00:26:57,600
for example if this bit determines if a

750
00:26:55,760 --> 00:26:58,799
user is an allow block list or track a

751
00:26:57,600 --> 00:27:02,080
user information or just

752
00:26:58,799 --> 00:27:04,240
mine um so at each one's time we always

753
00:27:02,080 --> 00:27:07,840
assume that

754
00:27:04,240 --> 00:27:10,000
the issuer can can understand who is the

755
00:27:07,840 --> 00:27:11,439
the user you can imagine for instance

756
00:27:10,000 --> 00:27:12,880
that if i'm using uh

757
00:27:11,440 --> 00:27:14,320
i don't know if i'm using chromium i can

758
00:27:12,880 --> 00:27:16,159
imagine that the user is logged in on

759
00:27:14,320 --> 00:27:17,760
google and then google can give me some

760
00:27:16,159 --> 00:27:20,320
some of these tokens that later can be

761
00:27:17,760 --> 00:27:22,320
redeemed or even in the case of

762
00:27:20,320 --> 00:27:23,439
of cloudflare maybe i don't want to tell

763
00:27:22,320 --> 00:27:24,639
the user that they are not solving

764
00:27:23,440 --> 00:27:27,760
captures correctly

765
00:27:24,640 --> 00:27:29,600
i can just keep on giving them tokens

766
00:27:27,760 --> 00:27:31,600
i just put them in a block list in this

767
00:27:29,600 --> 00:27:33,039
case i'm they're solving a challenge

768
00:27:31,600 --> 00:27:36,559
and in a certain way i'm sort of

769
00:27:33,039 --> 00:27:40,799
identifying whether they are bots or not

770
00:27:36,559 --> 00:27:44,240
um i hope this replies to you chelsea

771
00:27:40,799 --> 00:27:46,480
oh um yeah i think the the question is

772
00:27:44,240 --> 00:27:48,399
more like if these are anonymous tokens

773
00:27:46,480 --> 00:27:49,760
uh what is sort of the guarantee if

774
00:27:48,399 --> 00:27:51,678
you're using additional

775
00:27:49,760 --> 00:27:54,640
kind of meta information even though

776
00:27:51,679 --> 00:27:56,799
you're issuing anonymous tokens

777
00:27:54,640 --> 00:27:59,039
the guarantee of unlinkability is that

778
00:27:56,799 --> 00:28:01,918
as long as two persons have the same

779
00:27:59,039 --> 00:28:04,960
private metadata bit then they are they

780
00:28:01,919 --> 00:28:08,159
belong to the same anonymity set

781
00:28:04,960 --> 00:28:09,760
um and this is uh i mean i

782
00:28:08,159 --> 00:28:11,520
this is a this is a there is a trade-off

783
00:28:09,760 --> 00:28:12,158
at play here between anonymity of the

784
00:28:11,520 --> 00:28:13,600
user

785
00:28:12,159 --> 00:28:17,200
and the functionality that you want to

786
00:28:13,600 --> 00:28:19,678
give and uh in some in some use cases

787
00:28:17,200 --> 00:28:21,279
i think you want to play that trade-off

788
00:28:19,679 --> 00:28:22,880
and it's difficult to imagine that some

789
00:28:21,279 --> 00:28:24,240
people like uh

790
00:28:22,880 --> 00:28:26,159
um it's difficult to imagine that for

791
00:28:24,240 --> 00:28:28,640
instance facebook would uh

792
00:28:26,159 --> 00:28:29,440
um or like some entities would would

793
00:28:28,640 --> 00:28:33,360
just decide

794
00:28:29,440 --> 00:28:33,600
not to uh i find it difficult to decide

795
00:28:33,360 --> 00:28:35,760
that

796
00:28:33,600 --> 00:28:38,959
some people would rather give up on this

797
00:28:35,760 --> 00:28:43,200
feature in order to track down a user

798
00:28:38,960 --> 00:28:43,200
um does that make sense

799
00:28:43,600 --> 00:28:46,719
yeah i think that oh sorry all that

800
00:28:45,679 --> 00:28:48,880
someone else

801
00:28:46,720 --> 00:28:50,159
we are slightly over time so maybe we

802
00:28:48,880 --> 00:28:52,159
defer this to later

803
00:28:50,159 --> 00:28:53,919
i see there's also more questions on

804
00:28:52,159 --> 00:28:54,559
this presentation there's a little chat

805
00:28:53,919 --> 00:28:57,120
don't

806
00:28:54,559 --> 00:28:58,799
miss that one i'd like to call the

807
00:28:57,120 --> 00:29:03,918
fourth paper this is aldo

808
00:28:58,799 --> 00:29:03,918
hunting are these slides

809
00:29:04,000 --> 00:29:10,799
please screen share yes

810
00:29:07,760 --> 00:29:11,360
thank you thank you so much will be

811
00:29:10,799 --> 00:29:13,200
about

812
00:29:11,360 --> 00:29:15,439
the summation truncation hybrids we're

813
00:29:13,200 --> 00:29:17,520
using discarded bits for free

814
00:29:15,440 --> 00:29:20,240
my name is alder hunsing and this is a

815
00:29:17,520 --> 00:29:21,600
joint or creates bark manic

816
00:29:20,240 --> 00:29:23,600
so when we look at symmetric

817
00:29:21,600 --> 00:29:25,039
cryptographic schemes we see that a lot

818
00:29:23,600 --> 00:29:27,120
of them are based on pseudorandom

819
00:29:25,039 --> 00:29:31,679
permutations or prps

820
00:29:27,120 --> 00:29:33,918
like aes for example but a lot of them

821
00:29:31,679 --> 00:29:35,039
only use the forward directions of the

822
00:29:33,919 --> 00:29:37,919
prps

823
00:29:35,039 --> 00:29:39,840
and do not make use of the invertibility

824
00:29:37,919 --> 00:29:42,399
so instead we could also use a zero

825
00:29:39,840 --> 00:29:44,480
random function or prf instead

826
00:29:42,399 --> 00:29:46,158
and this is actually often more secure

827
00:29:44,480 --> 00:29:48,159
than the prp

828
00:29:46,159 --> 00:29:49,200
the prominent example of this is counter

829
00:29:48,159 --> 00:29:51,120
mode

830
00:29:49,200 --> 00:29:53,279
this mode achieves vertically bound

831
00:29:51,120 --> 00:29:56,158
security of n of two bits

832
00:29:53,279 --> 00:29:56,880
of security and we use a prp but it

833
00:29:56,159 --> 00:30:00,399
achieves full

834
00:29:56,880 --> 00:30:02,159
n-bit security when we use a brf instead

835
00:30:00,399 --> 00:30:04,719
so of course here we assume that we have

836
00:30:02,159 --> 00:30:07,440
a perfect brf but it still shows

837
00:30:04,720 --> 00:30:10,720
that brf is much more suitable for this

838
00:30:07,440 --> 00:30:12,960
mode than a brp is

839
00:30:10,720 --> 00:30:14,000
so we could try to design a dedicated

840
00:30:12,960 --> 00:30:16,000
brf

841
00:30:14,000 --> 00:30:17,120
wherever we have a little understanding

842
00:30:16,000 --> 00:30:20,240
in how to do that

843
00:30:17,120 --> 00:30:25,760
because we are much better in building

844
00:30:20,240 --> 00:30:28,559
erps based on invertible building blocks

845
00:30:25,760 --> 00:30:30,320
so instead we could try to design a prp

846
00:30:28,559 --> 00:30:34,080
to a prf conversion

847
00:30:30,320 --> 00:30:35,918
where we built a prf based on the prp

848
00:30:34,080 --> 00:30:37,678
so the most straightforward way and very

849
00:30:35,919 --> 00:30:40,399
common way is to just use

850
00:30:37,679 --> 00:30:42,080
a brp as a prf and this is known as the

851
00:30:40,399 --> 00:30:44,879
prp prf switch

852
00:30:42,080 --> 00:30:46,799
which is secured up to the brc band but

853
00:30:44,880 --> 00:30:48,640
there are also other constructions like

854
00:30:46,799 --> 00:30:50,879
summation and truncation

855
00:30:48,640 --> 00:30:52,320
that be achieved beyond brsa about

856
00:30:50,880 --> 00:30:54,880
security

857
00:30:52,320 --> 00:30:56,799
so now we will take a look at those so

858
00:30:54,880 --> 00:31:00,240
first of all we have summation

859
00:30:56,799 --> 00:31:01,279
this construction simply calls the prp

860
00:31:00,240 --> 00:31:03,279
two times and

861
00:31:01,279 --> 00:31:06,080
and sums their output together using an

862
00:31:03,279 --> 00:31:09,519
xor and it achieves the full n-bit

863
00:31:06,080 --> 00:31:12,639
security and truncation

864
00:31:09,519 --> 00:31:15,279
truncates the outputs of a prp to

865
00:31:12,640 --> 00:31:15,840
8 to the first a bits where a can be

866
00:31:15,279 --> 00:31:19,039
fairly

867
00:31:15,840 --> 00:31:20,639
chosen and it discards the other n minus

868
00:31:19,039 --> 00:31:22,320
a bits

869
00:31:20,640 --> 00:31:24,000
and this function is also used to

870
00:31:22,320 --> 00:31:24,720
develop in for example in the key

871
00:31:24,000 --> 00:31:28,720
direction

872
00:31:24,720 --> 00:31:30,960
function of gcm srv

873
00:31:28,720 --> 00:31:32,960
and this achieves n minus a of two bits

874
00:31:30,960 --> 00:31:35,440
of security

875
00:31:32,960 --> 00:31:36,960
however for the truncation we discard

876
00:31:35,440 --> 00:31:40,080
those n minus a

877
00:31:36,960 --> 00:31:41,760
last bits but they still may contain

878
00:31:40,080 --> 00:31:44,158
some valuable entropy

879
00:31:41,760 --> 00:31:46,320
so we can look what happens when we

880
00:31:44,159 --> 00:31:48,960
reuse those instead by

881
00:31:46,320 --> 00:31:51,360
applying summation to them and this

882
00:31:48,960 --> 00:31:54,640
leads to the summation truncation hybrid

883
00:31:51,360 --> 00:31:57,519
or sdh and as you can see it

884
00:31:54,640 --> 00:31:59,039
calls the prp two times and just applies

885
00:31:57,519 --> 00:32:02,320
truncation to it

886
00:31:59,039 --> 00:32:04,158
but instead of discarding those bits

887
00:32:02,320 --> 00:32:06,320
we export them together to get some

888
00:32:04,159 --> 00:32:08,720
extra output

889
00:32:06,320 --> 00:32:10,879
this means that we get n minus a extra

890
00:32:08,720 --> 00:32:13,760
bits compared to just a truncation

891
00:32:10,880 --> 00:32:14,880
construction but we show that it has

892
00:32:13,760 --> 00:32:17,679
equal security

893
00:32:14,880 --> 00:32:19,519
to the truncation construction so we

894
00:32:17,679 --> 00:32:22,720
basically get those extra bits

895
00:32:19,519 --> 00:32:27,120
for free because we do not have to

896
00:32:22,720 --> 00:32:29,200
trade the security for those extra bids

897
00:32:27,120 --> 00:32:31,039
and we also see that it is identical to

898
00:32:29,200 --> 00:32:31,760
the summation that our a is equal to

899
00:32:31,039 --> 00:32:33,120
zero

900
00:32:31,760 --> 00:32:36,559
so we can actually see it as a

901
00:32:33,120 --> 00:32:39,120
generalization of summation

902
00:32:36,559 --> 00:32:40,879
so i now i would like to compare those

903
00:32:39,120 --> 00:32:43,518
three constructions

904
00:32:40,880 --> 00:32:45,679
left we have a graph where that plots

905
00:32:43,519 --> 00:32:47,440
the security level denoted in bits

906
00:32:45,679 --> 00:32:48,880
against the efficiency and the

907
00:32:47,440 --> 00:32:52,320
efficiency is denoted

908
00:32:48,880 --> 00:32:55,039
in the rate which is the number of

909
00:32:52,320 --> 00:32:56,399
input bits on efforts needed to get an

910
00:32:55,039 --> 00:32:58,399
output bit

911
00:32:56,399 --> 00:33:00,719
so the lower the rate the more efficient

912
00:32:58,399 --> 00:33:03,360
a construction is

913
00:33:00,720 --> 00:33:04,159
first of all the summation denoted by

914
00:33:03,360 --> 00:33:06,479
plus

915
00:33:04,159 --> 00:33:08,320
it achieves the full n bits of security

916
00:33:06,480 --> 00:33:11,600
and that's a rate of two

917
00:33:08,320 --> 00:33:12,080
because it needs two uh calls to the prp

918
00:33:11,600 --> 00:33:16,000
to get

919
00:33:12,080 --> 00:33:18,639
one up one block of outputs

920
00:33:16,000 --> 00:33:20,720
and in red we have the truncation and

921
00:33:18,640 --> 00:33:23,200
then it

922
00:33:20,720 --> 00:33:24,399
doesn't discard anything and just keeps

923
00:33:23,200 --> 00:33:26,320
everything it

924
00:33:24,399 --> 00:33:28,799
starts in the bottom left that's just a

925
00:33:26,320 --> 00:33:30,960
normal prp prf switch

926
00:33:28,799 --> 00:33:32,879
that achieves uh the birthday bound

927
00:33:30,960 --> 00:33:34,720
security of n of two bits

928
00:33:32,880 --> 00:33:36,880
with a rate of one because it's very

929
00:33:34,720 --> 00:33:37,279
efficient and as we discard more and

930
00:33:36,880 --> 00:33:40,480
more

931
00:33:37,279 --> 00:33:42,480
bits the security increases

932
00:33:40,480 --> 00:33:46,000
and so does the rate but that means that

933
00:33:42,480 --> 00:33:46,000
the efficiency decreases

934
00:33:47,120 --> 00:33:51,518
and for the sdh construction it has the

935
00:33:49,679 --> 00:33:52,559
same security as the truncation

936
00:33:51,519 --> 00:33:54,559
construction

937
00:33:52,559 --> 00:33:57,039
but because there's more efficient it is

938
00:33:54,559 --> 00:34:00,158
always to the left

939
00:33:57,039 --> 00:34:04,240
of the truncation line

940
00:34:00,159 --> 00:34:04,240
so that was my talk thank you for your

941
00:34:04,840 --> 00:34:07,840
attention

942
00:34:08,079 --> 00:34:11,760
thanks for the presentation are there

943
00:34:09,599 --> 00:34:15,359
any questions raise your hand in the

944
00:34:11,760 --> 00:34:18,839
in the chat now in zoom and

945
00:34:15,359 --> 00:34:22,239
and speak or put your question into the

946
00:34:18,839 --> 00:34:24,239
chat is there anything not in the chat

947
00:34:22,239 --> 00:34:26,399
at the point

948
00:34:24,239 --> 00:34:27,279
and also a hand so then then let me put

949
00:34:26,399 --> 00:34:31,118
a question

950
00:34:27,280 --> 00:34:31,760
so i i understand that what you're doing

951
00:34:31,119 --> 00:34:34,240
is

952
00:34:31,760 --> 00:34:36,000
you given a fixed amount of prf

953
00:34:34,239 --> 00:34:38,799
invocation prp invocations

954
00:34:36,000 --> 00:34:40,879
for instance two you try to distill as

955
00:34:38,800 --> 00:34:44,800
many peer efforts as possible

956
00:34:40,879 --> 00:34:48,319
and prior constructions um and your

957
00:34:44,800 --> 00:34:51,280
improvement prior constructions my

958
00:34:48,320 --> 00:34:53,200
my question would be do you know any

959
00:34:51,280 --> 00:34:54,240
asymptotic bounds so you mentioned

960
00:34:53,199 --> 00:34:56,399
counter mode

961
00:34:54,239 --> 00:34:58,399
initially and in counter mode it's not

962
00:34:56,399 --> 00:35:00,240
two invocations that you have but you

963
00:34:58,400 --> 00:35:00,880
actually need a very very long stretch

964
00:35:00,240 --> 00:35:04,399
of

965
00:35:00,880 --> 00:35:07,520
prf bits so do you think

966
00:35:04,400 --> 00:35:12,160
your your techniques scale to

967
00:35:07,520 --> 00:35:14,240
to some specific asymptotics yeah so

968
00:35:12,160 --> 00:35:15,680
here we have the sdh construction and we

969
00:35:14,240 --> 00:35:18,640
have some inputs x

970
00:35:15,680 --> 00:35:19,359
but if we would use this in the counter

971
00:35:18,640 --> 00:35:22,879
mode we will

972
00:35:19,359 --> 00:35:23,680
first apply it for x equal to zero and

973
00:35:22,880 --> 00:35:26,880
then

974
00:35:23,680 --> 00:35:29,118
uh to one and then two and

975
00:35:26,880 --> 00:35:30,000
that is also what the security level

976
00:35:29,119 --> 00:35:33,119
notes

977
00:35:30,000 --> 00:35:33,920
is how many uh search blocks you can

978
00:35:33,119 --> 00:35:37,119
call before it

979
00:35:33,920 --> 00:35:38,960
becomes insecure oh yeah but but you do

980
00:35:37,119 --> 00:35:39,839
in this picture you do two invocations

981
00:35:38,960 --> 00:35:42,400
of p

982
00:35:39,839 --> 00:35:43,040
and you get n minus a extra bits for

983
00:35:42,400 --> 00:35:44,720
free

984
00:35:43,040 --> 00:35:46,560
so my question would be if you imagine

985
00:35:44,720 --> 00:35:48,879
you do 5p

986
00:35:46,560 --> 00:35:51,520
kind of can you over linearly scale the

987
00:35:48,880 --> 00:35:51,520
extra output

988
00:35:52,720 --> 00:35:56,160
that isn't this construction but you

989
00:35:54,640 --> 00:35:58,799
could also look at the

990
00:35:56,160 --> 00:36:02,078
search construction but you can still

991
00:35:58,800 --> 00:36:02,079
call it for different eggs

992
00:36:02,240 --> 00:36:04,799
okay thank you

993
00:36:05,760 --> 00:36:09,440
we have one question on the zoo lab

994
00:36:07,599 --> 00:36:11,839
which i can read out

995
00:36:09,440 --> 00:36:13,760
by dan bernstein the question is is

996
00:36:11,839 --> 00:36:17,359
summon truncate more efficient than

997
00:36:13,760 --> 00:36:17,359
using a double with prp

998
00:36:23,200 --> 00:36:29,040
no it isn't because if

999
00:36:27,040 --> 00:36:30,560
if you have a double with brp and you

1000
00:36:29,040 --> 00:36:33,599
just use it

1001
00:36:30,560 --> 00:36:36,160
directly you also get n bits

1002
00:36:33,599 --> 00:36:36,880
of security but you have to design such

1003
00:36:36,160 --> 00:36:41,839
prp

1004
00:36:36,880 --> 00:36:41,839
of course

1005
00:36:45,760 --> 00:36:49,839
okay we have one more question the zoom

1006
00:36:47,599 --> 00:36:52,079
chat um by jeff guiney

1007
00:36:49,839 --> 00:36:54,160
if gain do you want to ask the question

1008
00:36:52,079 --> 00:36:57,040
yourself

1009
00:36:54,160 --> 00:36:58,879
true um sure is there some low one this

1010
00:36:57,040 --> 00:37:00,560
is a really beautiful construction

1011
00:36:58,880 --> 00:37:02,640
is there some lower bounds that on the

1012
00:37:00,560 --> 00:37:05,440
best uh trader between rate and

1013
00:37:02,640 --> 00:37:08,560
the security and if yes how close is

1014
00:37:05,440 --> 00:37:10,720
your construction to this slow bound

1015
00:37:08,560 --> 00:37:13,599
i don't know such lower back but you

1016
00:37:10,720 --> 00:37:15,279
also have other constructions

1017
00:37:13,599 --> 00:37:18,240
there's also you also perform very well

1018
00:37:15,280 --> 00:37:21,119
for example the c anchor

1019
00:37:18,240 --> 00:37:22,560
is also decent but i don't think that

1020
00:37:21,119 --> 00:37:27,760
there are any known

1021
00:37:22,560 --> 00:37:27,759
bounds about about this one but not

1022
00:37:28,720 --> 00:37:32,399
thank you so ideally you would hear of

1023
00:37:31,760 --> 00:37:37,839
course

1024
00:37:32,400 --> 00:37:37,839
of course be in the top left corner

1025
00:37:39,839 --> 00:37:44,400
so i would like to leave christopher

1026
00:37:43,280 --> 00:37:46,720
patton's question

1027
00:37:44,400 --> 00:37:47,520
to the zulu chat please copy that

1028
00:37:46,720 --> 00:37:50,640
question over

1029
00:37:47,520 --> 00:37:53,200
and i would like to try you

1030
00:37:50,640 --> 00:37:53,839
shoe to unmute yourself and to share

1031
00:37:53,200 --> 00:37:55,598
your

1032
00:37:53,839 --> 00:37:58,000
slides and continue with the first

1033
00:37:55,599 --> 00:38:05,839
presentation of this session

1034
00:37:58,000 --> 00:38:05,839
let me share my screen um

1035
00:38:08,480 --> 00:38:13,760
can you see my screen now yes okay great

1036
00:38:11,760 --> 00:38:15,920
so hello everyone and thank you for the

1037
00:38:13,760 --> 00:38:16,560
introduction um today i'm going to talk

1038
00:38:15,920 --> 00:38:19,119
about

1039
00:38:16,560 --> 00:38:20,960
universally composable relaxed password

1040
00:38:19,119 --> 00:38:23,359
authenticated key exchange

1041
00:38:20,960 --> 00:38:24,160
and this is joint work with michelle

1042
00:38:23,359 --> 00:38:27,598
abdallah

1043
00:38:24,160 --> 00:38:31,200
manuel babosan patiana bradley sunnis of

1044
00:38:27,599 --> 00:38:32,960
yarosky and jonathan cars

1045
00:38:31,200 --> 00:38:35,040
so first of all what is the password

1046
00:38:32,960 --> 00:38:37,680
authenticated t exchange opaque

1047
00:38:35,040 --> 00:38:39,119
so this is a two-party protocol and the

1048
00:38:37,680 --> 00:38:41,118
goal is to establish

1049
00:38:39,119 --> 00:38:42,880
a shared cryptographic key in the

1050
00:38:41,119 --> 00:38:45,040
so-called password-only setting

1051
00:38:42,880 --> 00:38:47,200
which means that the only information

1052
00:38:45,040 --> 00:38:50,800
shared by the two parties in advance

1053
00:38:47,200 --> 00:38:53,520
is a low entropy password so here is a

1054
00:38:50,800 --> 00:38:54,400
graphical illustration so this is ada

1055
00:38:53,520 --> 00:38:57,599
love list

1056
00:38:54,400 --> 00:38:58,000
so she inputs her password pw and this

1057
00:38:57,599 --> 00:39:00,400
is

1058
00:38:58,000 --> 00:39:01,040
charles babbage and charles enters his

1059
00:39:00,400 --> 00:39:03,760
password

1060
00:39:01,040 --> 00:39:04,800
p double prime and at the end of the

1061
00:39:03,760 --> 00:39:08,160
interaction

1062
00:39:04,800 --> 00:39:10,480
if there are two two passwords match

1063
00:39:08,160 --> 00:39:12,480
then they output the same cryptographic

1064
00:39:10,480 --> 00:39:14,079
key and if they don't match

1065
00:39:12,480 --> 00:39:17,280
if the passwords don't match since they

1066
00:39:14,079 --> 00:39:17,280
output independent keys

1067
00:39:17,920 --> 00:39:21,839
so this work is about the security model

1068
00:39:20,240 --> 00:39:24,879
of page

1069
00:39:21,839 --> 00:39:26,000
there have been two major security

1070
00:39:24,880 --> 00:39:28,560
models for pick

1071
00:39:26,000 --> 00:39:30,560
one is the traditional game-based model

1072
00:39:28,560 --> 00:39:32,400
and the other is the universally

1073
00:39:30,560 --> 00:39:35,040
composable or uc model

1074
00:39:32,400 --> 00:39:36,560
which is a type of simulation based

1075
00:39:35,040 --> 00:39:39,520
security bonus

1076
00:39:36,560 --> 00:39:40,960
so as as we all know uc is generally

1077
00:39:39,520 --> 00:39:43,119
stronger than game-based

1078
00:39:40,960 --> 00:39:45,440
and the reason is uc allows for

1079
00:39:43,119 --> 00:39:49,040
arbitrary protocol composition

1080
00:39:45,440 --> 00:39:52,160
and as the name of uc itself suggests

1081
00:39:49,040 --> 00:39:54,880
and for password protocols in particular

1082
00:39:52,160 --> 00:39:55,680
uc has some additional advantages such

1083
00:39:54,880 --> 00:39:59,680
as

1084
00:39:55,680 --> 00:39:59,680
modeling password review reuse

1085
00:40:03,280 --> 00:40:07,280
there has been two major paradigms for

1086
00:40:05,599 --> 00:40:11,119
pike portable constructions

1087
00:40:07,280 --> 00:40:13,280
as well so one is you'll take a

1088
00:40:11,119 --> 00:40:15,119
rigorous kickstart such as development

1089
00:40:13,280 --> 00:40:17,680
exchange ideal blind

1090
00:40:15,119 --> 00:40:18,880
the protocol messages using the password

1091
00:40:17,680 --> 00:40:21,759
and this use

1092
00:40:18,880 --> 00:40:22,960
uh the most efficient paid particles

1093
00:40:21,760 --> 00:40:25,520
these days

1094
00:40:22,960 --> 00:40:27,680
um for example we have uh encrypted key

1095
00:40:25,520 --> 00:40:30,079
exchange or eke and this is the

1096
00:40:27,680 --> 00:40:33,040
very first tech protocol ever proposed

1097
00:40:30,079 --> 00:40:35,440
uh this is in 1992

1098
00:40:33,040 --> 00:40:36,079
and there are some subsequent works such

1099
00:40:35,440 --> 00:40:39,119
as

1100
00:40:36,079 --> 00:40:42,400
sp aspect 2 and pvp

1101
00:40:39,119 --> 00:40:45,920
so unfortunately all of these

1102
00:40:42,400 --> 00:40:48,079
efficient particles were shown in the

1103
00:40:45,920 --> 00:40:50,800
washroom secure in the game-based model

1104
00:40:48,079 --> 00:40:53,680
only and not in the uc setting

1105
00:40:50,800 --> 00:40:55,760
but there also has been no explicit

1106
00:40:53,680 --> 00:40:58,879
weakness or attack shown for

1107
00:40:55,760 --> 00:40:58,880
any of these particles

1108
00:40:59,440 --> 00:41:03,119
and on the other hand um there is

1109
00:41:01,680 --> 00:41:05,279
another paradigm

1110
00:41:03,119 --> 00:41:07,200
which uses smooth protective harsh

1111
00:41:05,280 --> 00:41:10,319
functions for paid protocols

1112
00:41:07,200 --> 00:41:12,960
and these many of our

1113
00:41:10,319 --> 00:41:13,520
paid protocols in this paradigm allows

1114
00:41:12,960 --> 00:41:16,240
for

1115
00:41:13,520 --> 00:41:17,520
proving proving security in the uc

1116
00:41:16,240 --> 00:41:20,078
setting

1117
00:41:17,520 --> 00:41:20,640
but on the other hand this paradigm

1118
00:41:20,079 --> 00:41:23,760
usually

1119
00:41:20,640 --> 00:41:28,400
imposes extra costs so it is not as

1120
00:41:23,760 --> 00:41:28,400
efficient as the first paradigm

1121
00:41:29,520 --> 00:41:33,040
so the natural question is is there

1122
00:41:31,760 --> 00:41:35,599
really a gap

1123
00:41:33,040 --> 00:41:36,960
between efficient peg particles and the

1124
00:41:35,599 --> 00:41:39,200
uc model

1125
00:41:36,960 --> 00:41:43,599
and this is the starting point of our

1126
00:41:39,200 --> 00:41:43,598
work and our work is to bridge this gap

1127
00:41:44,800 --> 00:41:50,640
so our main result is we define two

1128
00:41:48,240 --> 00:41:51,919
relaxations of the standard uc peg

1129
00:41:50,640 --> 00:41:54,640
functionality

1130
00:41:51,920 --> 00:41:54,960
um one is called lazy extraction uc pipe

1131
00:41:54,640 --> 00:41:58,319
or

1132
00:41:54,960 --> 00:41:59,520
le peg and the other is called relaxed

1133
00:41:58,319 --> 00:42:02,880
pig or rpeg

1134
00:41:59,520 --> 00:42:05,839
and rpeg is slightly stronger than lepak

1135
00:42:02,880 --> 00:42:07,440
so the idea of our relaxation is

1136
00:42:05,839 --> 00:42:10,560
actually very simple

1137
00:42:07,440 --> 00:42:13,280
um in the standard ucpa functionality

1138
00:42:10,560 --> 00:42:14,078
it requires that the password extraction

1139
00:42:13,280 --> 00:42:17,520
must happen

1140
00:42:14,079 --> 00:42:20,640
before an honest party session completes

1141
00:42:17,520 --> 00:42:22,160
and in both of our relaxations both le

1142
00:42:20,640 --> 00:42:24,560
pak and are paid

1143
00:42:22,160 --> 00:42:25,440
we allow the password extraction to

1144
00:42:24,560 --> 00:42:28,000
happen

1145
00:42:25,440 --> 00:42:30,240
even after the session completes and

1146
00:42:28,000 --> 00:42:34,720
what is the difference between

1147
00:42:30,240 --> 00:42:36,560
rpec and lepak so the difference lies in

1148
00:42:34,720 --> 00:42:38,319
what's the ideal adversary or what the

1149
00:42:36,560 --> 00:42:40,880
simulator learns

1150
00:42:38,319 --> 00:42:41,839
if it extracts the password after

1151
00:42:40,880 --> 00:42:45,359
certain completes

1152
00:42:41,839 --> 00:42:47,599
so in our it learns only a bit

1153
00:42:45,359 --> 00:42:48,480
which is whether it's password guess is

1154
00:42:47,599 --> 00:42:50,800
correct or not

1155
00:42:48,480 --> 00:42:52,240
just as in standard page functionality

1156
00:42:50,800 --> 00:42:54,560
and in le pak

1157
00:42:52,240 --> 00:42:56,959
it learns a key so if the password guess

1158
00:42:54,560 --> 00:42:58,880
is correct then it learns the real key

1159
00:42:56,960 --> 00:43:01,440
and if it is incorrect then it learns a

1160
00:42:58,880 --> 00:43:01,440
random key

1161
00:43:02,960 --> 00:43:09,920
and secondly we show that aspect 2

1162
00:43:06,319 --> 00:43:12,560
tbp speak and see phase so these are the

1163
00:43:09,920 --> 00:43:14,160
most efficient particles up to date so

1164
00:43:12,560 --> 00:43:16,400
all of these particles

1165
00:43:14,160 --> 00:43:17,359
were proven secure in the game-based

1166
00:43:16,400 --> 00:43:20,000
setting only

1167
00:43:17,359 --> 00:43:20,720
previously but now we show that these

1168
00:43:20,000 --> 00:43:22,960
particles

1169
00:43:20,720 --> 00:43:24,399
realize you see a laser extraction pack

1170
00:43:22,960 --> 00:43:27,440
in the random oracle model

1171
00:43:24,400 --> 00:43:29,599
so in other words if you are willing to

1172
00:43:27,440 --> 00:43:30,960
relapse the uc functionality itself a

1173
00:43:29,599 --> 00:43:34,000
little bit then these

1174
00:43:30,960 --> 00:43:35,680
efficient particles are all you see is

1175
00:43:34,000 --> 00:43:39,200
equal

1176
00:43:35,680 --> 00:43:42,078
and thirdly we show that

1177
00:43:39,200 --> 00:43:43,200
you'll see le peg plus standard key

1178
00:43:42,079 --> 00:43:45,920
confirmation

1179
00:43:43,200 --> 00:43:46,799
use you'll see a slightly stronger ucr

1180
00:43:45,920 --> 00:43:48,880
pick

1181
00:43:46,800 --> 00:43:50,560
and it also provides a explicit

1182
00:43:48,880 --> 00:43:52,800
authentication

1183
00:43:50,560 --> 00:43:54,078
and finally we also do a sanity check

1184
00:43:52,800 --> 00:43:57,520
which is uh

1185
00:43:54,079 --> 00:44:00,319
you see relax fake implies a game

1186
00:43:57,520 --> 00:44:02,000
game-based type security with a property

1187
00:44:00,319 --> 00:44:02,720
called perfect forward sequencing i

1188
00:44:02,000 --> 00:44:06,160
believe this

1189
00:44:02,720 --> 00:44:09,118
was already introduced by

1190
00:44:06,160 --> 00:44:09,680
by by previous stock um and also we

1191
00:44:09,119 --> 00:44:11,839
showed that

1192
00:44:09,680 --> 00:44:12,720
the slightly weaker you'll see le pak

1193
00:44:11,839 --> 00:44:14,960
it's also game

1194
00:44:12,720 --> 00:44:17,598
very secure but with a weaker version of

1195
00:44:14,960 --> 00:44:22,319
perfect forward sequencing

1196
00:44:17,599 --> 00:44:24,640
um so in other words this uh

1197
00:44:22,319 --> 00:44:26,560
even even though you see rpg as a

1198
00:44:24,640 --> 00:44:29,040
relaxation of the standard you see pack

1199
00:44:26,560 --> 00:44:32,078
it still implies the very basic

1200
00:44:29,040 --> 00:44:34,480
game-based definition

1201
00:44:32,079 --> 00:44:35,520
so there are actually quite a number of

1202
00:44:34,480 --> 00:44:37,760
interesting open

1203
00:44:35,520 --> 00:44:38,640
questions and i only want to mention one

1204
00:44:37,760 --> 00:44:41,599
of them here

1205
00:44:38,640 --> 00:44:42,960
so if you see lazy extraction pack

1206
00:44:41,599 --> 00:44:45,520
really weaker than

1207
00:44:42,960 --> 00:44:47,520
the standard you see functionality and

1208
00:44:45,520 --> 00:44:50,000
if it is indeed weaker than

1209
00:44:47,520 --> 00:44:51,359
in what sense or you know what

1210
00:44:50,000 --> 00:44:54,640
situations

1211
00:44:51,359 --> 00:44:57,759
as you see our e-pack weaker

1212
00:44:54,640 --> 00:44:58,640
yeah so this is the end of my talk our

1213
00:44:57,760 --> 00:45:00,240
papers are

1214
00:44:58,640 --> 00:45:03,040
different you can check it out if you

1215
00:45:00,240 --> 00:45:05,759
are interested thank you very much

1216
00:45:03,040 --> 00:45:06,079
thank you for the presentation uh hands

1217
00:45:05,760 --> 00:45:08,720
up

1218
00:45:06,079 --> 00:45:10,160
in the zoom if you want to put a

1219
00:45:08,720 --> 00:45:14,480
question

1220
00:45:10,160 --> 00:45:14,480
i see no question on the chats currently

1221
00:45:17,280 --> 00:45:23,839
then um then let me uh ask a question

1222
00:45:20,720 --> 00:45:26,078
quickly so the the old you see

1223
00:45:23,839 --> 00:45:26,960
model for pake is kind of considered a

1224
00:45:26,079 --> 00:45:29,280
reference model

1225
00:45:26,960 --> 00:45:31,040
in in pigs in general and it is kind of

1226
00:45:29,280 --> 00:45:33,599
as you mentioned it's kind of hard to

1227
00:45:31,040 --> 00:45:34,319
to build protocols that that fulfill

1228
00:45:33,599 --> 00:45:36,800
them

1229
00:45:34,319 --> 00:45:39,040
and and you are filling this gap uh on

1230
00:45:36,800 --> 00:45:40,880
the other hand it seems that you were

1231
00:45:39,040 --> 00:45:43,440
this was the impression to me that your

1232
00:45:40,880 --> 00:45:46,640
alternative models are more technical

1233
00:45:43,440 --> 00:45:48,800
do you see that your work will establish

1234
00:45:46,640 --> 00:45:50,720
like a reference model for pake that

1235
00:45:48,800 --> 00:45:53,040
will be seen as a reference in five

1236
00:45:50,720 --> 00:45:55,279
years from now or something

1237
00:45:53,040 --> 00:45:58,160
um to be honest i'm i really don't know

1238
00:45:55,280 --> 00:46:01,040
and i think only history can tell but

1239
00:45:58,160 --> 00:46:02,160
of course my hope is that this uc

1240
00:46:01,040 --> 00:46:05,440
relaxed plague

1241
00:46:02,160 --> 00:46:06,319
will be accepted as somewhat standard in

1242
00:46:05,440 --> 00:46:09,280
some years

1243
00:46:06,319 --> 00:46:10,079
but i believe before that there are i

1244
00:46:09,280 --> 00:46:13,680
mean

1245
00:46:10,079 --> 00:46:15,520
there must be some there are some open

1246
00:46:13,680 --> 00:46:17,919
questions which must be addressed before

1247
00:46:15,520 --> 00:46:21,200
that for example as i

1248
00:46:17,920 --> 00:46:23,920
um as i asked here so

1249
00:46:21,200 --> 00:46:24,240
is this you see a laser lazy extraction

1250
00:46:23,920 --> 00:46:26,800
pack

1251
00:46:24,240 --> 00:46:28,799
really weaker than the standard uc page

1252
00:46:26,800 --> 00:46:32,319
so often

1253
00:46:28,800 --> 00:46:33,760
in those efficient pipe particles which

1254
00:46:32,319 --> 00:46:36,640
are proven secure in the

1255
00:46:33,760 --> 00:46:37,440
random oracle model only we have shown

1256
00:46:36,640 --> 00:46:39,359
some

1257
00:46:37,440 --> 00:46:40,560
basically some separation results like

1258
00:46:39,359 --> 00:46:45,119
aspect 2 is

1259
00:46:40,560 --> 00:46:47,119
proven secure in this relaxed model but

1260
00:46:45,119 --> 00:46:50,319
it does not seem to realize the standard

1261
00:46:47,119 --> 00:46:53,680
uck but in the

1262
00:46:50,319 --> 00:46:56,000
if we restrict ourselves to

1263
00:46:53,680 --> 00:46:56,799
pike particles which are in the standard

1264
00:46:56,000 --> 00:46:58,240
model only

1265
00:46:56,800 --> 00:47:00,480
there is there's still a difference

1266
00:46:58,240 --> 00:47:01,839
between using laser extraction pack and

1267
00:47:00,480 --> 00:47:05,680
the standard ucb

1268
00:47:01,839 --> 00:47:08,160
so we our conjecture is there's no such

1269
00:47:05,680 --> 00:47:09,598
difference anymore but we somehow cannot

1270
00:47:08,160 --> 00:47:11,440
prove it right now

1271
00:47:09,599 --> 00:47:13,200
okay thank you so indeed i believe there

1272
00:47:11,440 --> 00:47:16,640
are some open questions and

1273
00:47:13,200 --> 00:47:20,799
and was exploring before

1274
00:47:16,640 --> 00:47:23,040
you'll see relax it becomes the standard

1275
00:47:20,800 --> 00:47:24,079
okay thank you i have one quick question

1276
00:47:23,040 --> 00:47:27,920
to ask by

1277
00:47:24,079 --> 00:47:29,520
scott is opaque covered by your analysis

1278
00:47:27,920 --> 00:47:32,000
like maybe not by your analysis but do

1279
00:47:29,520 --> 00:47:33,440
you see a problem in analyzing it in

1280
00:47:32,000 --> 00:47:35,200
your new models

1281
00:47:33,440 --> 00:47:36,640
um i can give you almost one minute to

1282
00:47:35,200 --> 00:47:39,439
answer please yeah so

1283
00:47:36,640 --> 00:47:41,520
uh opaque it's actually an extension of

1284
00:47:39,440 --> 00:47:44,559
play called a symmetric pick

1285
00:47:41,520 --> 00:47:48,079
um here we in this paper we only

1286
00:47:44,559 --> 00:47:51,359
analyze uh symmetrically

1287
00:47:48,079 --> 00:47:54,079
so we don't cover opaque um so

1288
00:47:51,359 --> 00:47:56,960
opaque actually realizes a uc

1289
00:47:54,079 --> 00:48:00,079
functionality which is analogous to

1290
00:47:56,960 --> 00:48:03,280
this uc rpg um

1291
00:48:00,079 --> 00:48:04,800
and i believe in the e-print version of

1292
00:48:03,280 --> 00:48:08,559
opaque this is already

1293
00:48:04,800 --> 00:48:11,520
proven so actually opaque is

1294
00:48:08,559 --> 00:48:12,720
the fact that opaque realizes uh

1295
00:48:11,520 --> 00:48:15,920
analogous or

1296
00:48:12,720 --> 00:48:19,040
analog analogy of this ucr pick

1297
00:48:15,920 --> 00:48:21,359
is one of the motivations of our work on

1298
00:48:19,040 --> 00:48:23,359
this symmetrically

1299
00:48:21,359 --> 00:48:24,400
okay thank you very much we need to

1300
00:48:23,359 --> 00:48:26,160
progress

1301
00:48:24,400 --> 00:48:27,760
and we're slightly over time so the next

1302
00:48:26,160 --> 00:48:35,839
speaker will be how one

1303
00:48:27,760 --> 00:48:35,839
one can you share your screen please

1304
00:48:38,240 --> 00:48:45,359
hi can you see me yes

1305
00:48:41,599 --> 00:48:47,119
okay so hi everyone uh i'm ho young uh

1306
00:48:45,359 --> 00:48:48,799
i'm going to talk about the malicious

1307
00:48:47,119 --> 00:48:51,280
framework embedding back doors

1308
00:48:48,800 --> 00:48:54,559
into quickbook block ciphers this is a

1309
00:48:51,280 --> 00:48:54,559
drawing work with thomas

1310
00:48:56,240 --> 00:49:01,118
a backdoor of a blog cipher should help

1311
00:48:59,040 --> 00:49:04,079
the one who knows it to break the

1312
00:49:01,119 --> 00:49:04,720
cipher and as a designer of the back

1313
00:49:04,079 --> 00:49:06,720
door

1314
00:49:04,720 --> 00:49:08,959
we also hope the back door should

1315
00:49:06,720 --> 00:49:11,598
satisfy the following requirement

1316
00:49:08,960 --> 00:49:12,400
firstly for anyone who doesn't know the

1317
00:49:11,599 --> 00:49:14,480
back door

1318
00:49:12,400 --> 00:49:17,200
it should be computationally difficult

1319
00:49:14,480 --> 00:49:20,240
for him to retrieve the backdoor even if

1320
00:49:17,200 --> 00:49:22,879
the general form is known secondly

1321
00:49:20,240 --> 00:49:24,558
if someone knows the backdoor then he

1322
00:49:22,880 --> 00:49:29,119
could use it in attack

1323
00:49:24,559 --> 00:49:30,720
and recover the secret key practically

1324
00:49:29,119 --> 00:49:32,800
however there are limited number of

1325
00:49:30,720 --> 00:49:33,200
works focusing on this topic especially

1326
00:49:32,800 --> 00:49:36,160
for

1327
00:49:33,200 --> 00:49:37,680
embedding backdoors into block ciphers

1328
00:49:36,160 --> 00:49:40,000
and as far as we know

1329
00:49:37,680 --> 00:49:41,118
almost all designs can't satisfy these

1330
00:49:40,000 --> 00:49:44,160
two requirements

1331
00:49:41,119 --> 00:49:46,160
at the same time some of them will

1332
00:49:44,160 --> 00:49:47,839
have already been broken while the

1333
00:49:46,160 --> 00:49:50,640
others can provide

1334
00:49:47,839 --> 00:49:51,599
solid security proof so in this work we

1335
00:49:50,640 --> 00:49:54,319
try to

1336
00:49:51,599 --> 00:49:55,359
uh design a back door satisfying these

1337
00:49:54,319 --> 00:49:58,800
requirements

1338
00:49:55,359 --> 00:50:01,279
so we propose a malicious framework

1339
00:49:58,800 --> 00:50:03,520
this framework is used to build a key

1340
00:50:01,280 --> 00:50:06,559
alternating tweakable block cipher

1341
00:50:03,520 --> 00:50:06,880
and this general structure looks normal

1342
00:50:06,559 --> 00:50:10,319
but

1343
00:50:06,880 --> 00:50:12,800
it has two special features firstly

1344
00:50:10,319 --> 00:50:14,160
the run function has a partial nonlinear

1345
00:50:12,800 --> 00:50:16,800
layer that is uh

1346
00:50:14,160 --> 00:50:17,598
for each one a part of the internal

1347
00:50:16,800 --> 00:50:19,839
state will

1348
00:50:17,599 --> 00:50:20,800
bypass the non-linear layer and will

1349
00:50:19,839 --> 00:50:24,240
directly

1350
00:50:20,800 --> 00:50:26,800
go to the linear layer and secondly the

1351
00:50:24,240 --> 00:50:31,118
tweak schedule used in this framework is

1352
00:50:26,800 --> 00:50:31,839
chosen xof is a generalization of a hash

1353
00:50:31,119 --> 00:50:35,440
function

1354
00:50:31,839 --> 00:50:38,240
and its output can be arbitrary long

1355
00:50:35,440 --> 00:50:42,000
then the concatenation of the subtweets

1356
00:50:38,240 --> 00:50:44,160
will be the output of the xof

1357
00:50:42,000 --> 00:50:45,040
the backdoor that can be embedded inside

1358
00:50:44,160 --> 00:50:46,720
this framework

1359
00:50:45,040 --> 00:50:50,160
is related tweak differential

1360
00:50:46,720 --> 00:50:53,359
characteristic with probability one

1361
00:50:50,160 --> 00:50:56,000
and the pattern of such a different

1362
00:50:53,359 --> 00:50:57,440
characteristic over one run is depicted

1363
00:50:56,000 --> 00:51:00,000
in this picture

1364
00:50:57,440 --> 00:51:00,960
the hashed blocks are nonzero difference

1365
00:51:00,000 --> 00:51:03,359
while the

1366
00:51:00,960 --> 00:51:04,079
empty blocks are zero difference the

1367
00:51:03,359 --> 00:51:07,200
principle

1368
00:51:04,079 --> 00:51:07,599
is simple the subtweet difference delta

1369
00:51:07,200 --> 00:51:10,558
t

1370
00:51:07,599 --> 00:51:11,040
is supposed to cancel the difference of

1371
00:51:10,559 --> 00:51:14,000
the

1372
00:51:11,040 --> 00:51:14,720
a part of the internal state that passed

1373
00:51:14,000 --> 00:51:16,880
to the

1374
00:51:14,720 --> 00:51:19,439
nonlinear layer so the differential

1375
00:51:16,880 --> 00:51:22,079
transition of the nonlinear layer

1376
00:51:19,440 --> 00:51:22,480
will happen with probability one then

1377
00:51:22,079 --> 00:51:25,680
the

1378
00:51:22,480 --> 00:51:27,599
characteristic will be probability one

1379
00:51:25,680 --> 00:51:29,839
and since this is the back door not

1380
00:51:27,599 --> 00:51:32,880
everyone can use it in attack

1381
00:51:29,839 --> 00:51:36,319
they cannot generate the sub tweak

1382
00:51:32,880 --> 00:51:38,480
difference that is required by the

1383
00:51:36,319 --> 00:51:40,800
different characteristic actually this

1384
00:51:38,480 --> 00:51:44,000
only can be done by a

1385
00:51:40,800 --> 00:51:44,559
secret tweak pair which is chosen at the

1386
00:51:44,000 --> 00:51:46,880
design

1387
00:51:44,559 --> 00:51:48,480
face of the backdoor and we call it

1388
00:51:46,880 --> 00:51:50,559
malicious tweak pair

1389
00:51:48,480 --> 00:51:51,920
so if you know this tweak pair then you

1390
00:51:50,559 --> 00:51:54,800
can use this back door

1391
00:51:51,920 --> 00:51:56,400
in a tag and recover the secret key

1392
00:51:54,800 --> 00:51:59,200
efficiently

1393
00:51:56,400 --> 00:52:01,040
and lastly the attacker using the back

1394
00:51:59,200 --> 00:52:04,720
door is under the chosen tweak scenario

1395
00:52:01,040 --> 00:52:07,200
because only a certain tweak will work

1396
00:52:04,720 --> 00:52:09,118
before i discuss the backdoor security i

1397
00:52:07,200 --> 00:52:11,279
would like to first introduce the

1398
00:52:09,119 --> 00:52:13,200
security notion we call it target

1399
00:52:11,280 --> 00:52:15,520
difference resistance

1400
00:52:13,200 --> 00:52:16,640
that is a hash function is target

1401
00:52:15,520 --> 00:52:18,880
difference resistant

1402
00:52:16,640 --> 00:52:20,640
if it's hard to find two inputs such

1403
00:52:18,880 --> 00:52:24,319
that the difference of the

1404
00:52:20,640 --> 00:52:26,400
output equals to a given non-zero value

1405
00:52:24,319 --> 00:52:28,480
and this notion is very similar to a

1406
00:52:26,400 --> 00:52:32,079
classical glacial resistance

1407
00:52:28,480 --> 00:52:34,559
and and the complexity is also the

1408
00:52:32,079 --> 00:52:35,680
same that is a birthday bond to the

1409
00:52:34,559 --> 00:52:39,040
power of one

1410
00:52:35,680 --> 00:52:42,720
n over two then we showed that

1411
00:52:39,040 --> 00:52:45,119
the back door is protected by the xof

1412
00:52:42,720 --> 00:52:46,160
even if the different characteristic is

1413
00:52:45,119 --> 00:52:48,400
publicly known

1414
00:52:46,160 --> 00:52:49,920
that is the plaintext difference the

1415
00:52:48,400 --> 00:52:52,640
internal state difference

1416
00:52:49,920 --> 00:52:53,599
subtweet difference is all known to the

1417
00:52:52,640 --> 00:52:55,598
public

1418
00:52:53,599 --> 00:52:56,960
we show that it's still different

1419
00:52:55,599 --> 00:52:59,040
difficult to finding

1420
00:52:56,960 --> 00:53:00,720
to find the malicious tweak pair

1421
00:52:59,040 --> 00:53:03,440
actually this task is

1422
00:53:00,720 --> 00:53:04,000
equivalent to the target difference

1423
00:53:03,440 --> 00:53:08,000
attack

1424
00:53:04,000 --> 00:53:10,240
on the xof is used in the framework

1425
00:53:08,000 --> 00:53:11,359
that is given the string of the sub

1426
00:53:10,240 --> 00:53:13,439
tweak difference

1427
00:53:11,359 --> 00:53:15,598
the attacker tries to find the

1428
00:53:13,440 --> 00:53:18,880
corresponding tweak pair

1429
00:53:15,599 --> 00:53:21,200
which is uh input of the xof

1430
00:53:18,880 --> 00:53:22,240
and the complexity could be very high as

1431
00:53:21,200 --> 00:53:26,839
we can see here

1432
00:53:22,240 --> 00:53:29,919
if we use shake 128 or shake 256 as

1433
00:53:26,839 --> 00:53:32,558
xof so next we

1434
00:53:29,920 --> 00:53:33,359
propose a concrete instantiation of this

1435
00:53:32,559 --> 00:53:37,280
framework

1436
00:53:33,359 --> 00:53:39,440
and we call it low mcm it is a family of

1437
00:53:37,280 --> 00:53:42,559
a tweakable block ciphers directly

1438
00:53:39,440 --> 00:53:45,599
right derived from the block cipher omc

1439
00:53:42,559 --> 00:53:47,920
by simply adding a tweak addition

1440
00:53:45,599 --> 00:53:49,839
in each round the size of the linear

1441
00:53:47,920 --> 00:53:53,280
layer can be set arbitrarily

1442
00:53:49,839 --> 00:53:56,160
and the linear layer is a binary matrix

1443
00:53:53,280 --> 00:53:57,599
which can be chosen randomly an instance

1444
00:53:56,160 --> 00:54:00,640
of a low misam

1445
00:53:57,599 --> 00:54:02,960
can have a back door or not so if you

1446
00:54:00,640 --> 00:54:06,400
want to embed a backdoor inside this

1447
00:54:02,960 --> 00:54:09,040
cipher the linear layer that is a

1448
00:54:06,400 --> 00:54:10,319
binary matrix has to be specially

1449
00:54:09,040 --> 00:54:12,880
designed

1450
00:54:10,319 --> 00:54:14,160
lastly the tweak schedule we used it in

1451
00:54:12,880 --> 00:54:18,400
this cipher is

1452
00:54:14,160 --> 00:54:21,279
chic 128 or 656 depending on the case

1453
00:54:18,400 --> 00:54:23,280
size of this cipher

1454
00:54:21,280 --> 00:54:24,720
we have also discussed several

1455
00:54:23,280 --> 00:54:27,680
properties about

1456
00:54:24,720 --> 00:54:28,000
backdoor security of this umcm the first

1457
00:54:27,680 --> 00:54:31,200
one

1458
00:54:28,000 --> 00:54:34,559
is that the backdoor is undetectable

1459
00:54:31,200 --> 00:54:36,160
as i just said an instance of umc could

1460
00:54:34,559 --> 00:54:38,160
have a back door or not

1461
00:54:36,160 --> 00:54:39,920
and we proved that the attacker is

1462
00:54:38,160 --> 00:54:42,720
unable to distinguish these

1463
00:54:39,920 --> 00:54:44,000
two kinds of instances the second is

1464
00:54:42,720 --> 00:54:46,879
that the back door

1465
00:54:44,000 --> 00:54:48,720
is undiscoverable it is computationally

1466
00:54:46,880 --> 00:54:49,599
difficult for the tiger to recover the

1467
00:54:48,720 --> 00:54:51,680
back door

1468
00:54:49,599 --> 00:54:53,200
this is because of the target difference

1469
00:54:51,680 --> 00:54:55,359
resistance of the xo

1470
00:54:53,200 --> 00:54:57,520
f used in the framework and the

1471
00:54:55,359 --> 00:54:58,799
complexity is as high as the cypher

1472
00:54:57,520 --> 00:55:01,920
security

1473
00:54:58,799 --> 00:55:05,200
lastly our back door is traceable

1474
00:55:01,920 --> 00:55:07,680
this is not a desired property because

1475
00:55:05,200 --> 00:55:08,480
the tag using the back door is a chosen

1476
00:55:07,680 --> 00:55:11,279
tweak

1477
00:55:08,480 --> 00:55:13,200
choosing plain text attacks so once the

1478
00:55:11,280 --> 00:55:16,240
backdoor is used it is reviewed

1479
00:55:13,200 --> 00:55:18,160
it will reveal the values of the tweaks

1480
00:55:16,240 --> 00:55:20,319
the plain text that are correlated to

1481
00:55:18,160 --> 00:55:22,799
the encryption oracle so

1482
00:55:20,319 --> 00:55:25,520
the attacker could use information to

1483
00:55:22,799 --> 00:55:27,839
recover the backdoor

1484
00:55:25,520 --> 00:55:30,160
for classical cypher security we will

1485
00:55:27,839 --> 00:55:32,880
discuss it into two aspects

1486
00:55:30,160 --> 00:55:33,759
for attacks without using the tweak we

1487
00:55:32,880 --> 00:55:36,799
showed that

1488
00:55:33,760 --> 00:55:38,720
the security of lumcm can be reduced to

1489
00:55:36,799 --> 00:55:42,000
the security of bluemc

1490
00:55:38,720 --> 00:55:43,839
and currently umc is very secure now so

1491
00:55:42,000 --> 00:55:46,559
our cipher is secure

1492
00:55:43,839 --> 00:55:47,359
then we also consider the text based on

1493
00:55:46,559 --> 00:55:50,079
the tweak

1494
00:55:47,359 --> 00:55:52,240
because the tweak input will provide

1495
00:55:50,079 --> 00:55:56,400
additional frame degrees for

1496
00:55:52,240 --> 00:55:59,919
attack possibly but however

1497
00:55:56,400 --> 00:56:02,079
our cipher used the xof as a tweak

1498
00:55:59,920 --> 00:56:03,200
schedule and because of the property of

1499
00:56:02,079 --> 00:56:05,520
the xof

1500
00:56:03,200 --> 00:56:07,680
the tech checker can't control its

1501
00:56:05,520 --> 00:56:10,160
output so we believe

1502
00:56:07,680 --> 00:56:12,960
the tag can be leveraged the tweak can

1503
00:56:10,160 --> 00:56:16,078
can't be elaborated by the attacker

1504
00:56:12,960 --> 00:56:19,440
so that's all thank you

1505
00:56:16,079 --> 00:56:19,839
thank you um i see a questioning coming

1506
00:56:19,440 --> 00:56:22,400
by

1507
00:56:19,839 --> 00:56:23,119
john oh there's actually quite quite

1508
00:56:22,400 --> 00:56:26,720
some

1509
00:56:23,119 --> 00:56:28,720
shot uh i see four questions

1510
00:56:26,720 --> 00:56:31,839
isha do you want to just unmute yourself

1511
00:56:28,720 --> 00:56:31,839
and ask a question directly

1512
00:56:36,799 --> 00:56:41,920
then i read the question the back door

1513
00:56:39,760 --> 00:56:42,559
can be inserted in the non-linear layers

1514
00:56:41,920 --> 00:56:45,440
only

1515
00:56:42,559 --> 00:56:47,200
or do we need to mold the linear as well

1516
00:56:45,440 --> 00:56:47,760
what is the effectiveness of linear

1517
00:56:47,200 --> 00:56:51,359
layer

1518
00:56:47,760 --> 00:56:53,359
in this regard uh

1519
00:56:51,359 --> 00:56:55,200
well the principle of this backdoor is

1520
00:56:53,359 --> 00:56:57,920
that we we want to

1521
00:56:55,200 --> 00:56:58,480
use the different characteristic just to

1522
00:56:57,920 --> 00:57:01,680
skip

1523
00:56:58,480 --> 00:57:02,240
the non-linear layer so and the linear

1524
00:57:01,680 --> 00:57:04,319
layer

1525
00:57:02,240 --> 00:57:05,680
the functionality of this linear layer

1526
00:57:04,319 --> 00:57:07,680
is to ensure that

1527
00:57:05,680 --> 00:57:09,440
the different characteristics will carry

1528
00:57:07,680 --> 00:57:12,078
on through this run and run

1529
00:57:09,440 --> 00:57:14,400
and to satisfy this uh pattern of

1530
00:57:12,079 --> 00:57:18,079
different characteristics

1531
00:57:14,400 --> 00:57:18,880
so yeah um so there's two more questions

1532
00:57:18,079 --> 00:57:22,000
of shafad

1533
00:57:18,880 --> 00:57:25,119
uh i will skip anyway to john kelsey

1534
00:57:22,000 --> 00:57:27,280
if you think it didn't real reveal trap

1535
00:57:25,119 --> 00:57:28,720
door this would be a public key

1536
00:57:27,280 --> 00:57:30,000
encryption scheme oh that's just a

1537
00:57:28,720 --> 00:57:31,759
comment that's not a question

1538
00:57:30,000 --> 00:57:33,280
so i have another question for back to

1539
00:57:31,760 --> 00:57:35,440
work uh using

1540
00:57:33,280 --> 00:57:37,760
the backdoor what is the effort needed

1541
00:57:35,440 --> 00:57:42,000
to recover the secret key

1542
00:57:37,760 --> 00:57:44,559
well the effort is like in one second

1543
00:57:42,000 --> 00:57:45,040
because the back door here is a per

1544
00:57:44,559 --> 00:57:47,599
different

1545
00:57:45,040 --> 00:57:49,279
characteristic with probability one so

1546
00:57:47,599 --> 00:57:52,160
you can just use like

1547
00:57:49,280 --> 00:57:52,720
one two quarries or three quarries to

1548
00:57:52,160 --> 00:57:56,240
the

1549
00:57:52,720 --> 00:57:58,399
uh oracles then you can just do some

1550
00:57:56,240 --> 00:58:01,520
small computations to recover the secret

1551
00:57:58,400 --> 00:58:01,520
case so it's very fast

1552
00:58:01,920 --> 00:58:06,000
so we are over time there is another two

1553
00:58:05,040 --> 00:58:08,319
questions

1554
00:58:06,000 --> 00:58:10,559
in in the zoom chat i would ask the

1555
00:58:08,319 --> 00:58:12,799
author to copy them over to zulip

1556
00:58:10,559 --> 00:58:14,480
beyond that there is another three

1557
00:58:12,799 --> 00:58:17,599
question by tom

1558
00:58:14,480 --> 00:58:20,880
dan and tim on

1559
00:58:17,599 --> 00:58:22,000
this loop chat which please uh can be

1560
00:58:20,880 --> 00:58:24,480
answered on this loop chat

1561
00:58:22,000 --> 00:58:26,079
itself i would like to thank all the

1562
00:58:24,480 --> 00:58:29,280
speakers of the session

1563
00:58:26,079 --> 00:58:32,640
uh the zulipchat is very lively recall

1564
00:58:29,280 --> 00:58:35,680
that the zoom chat will not be

1565
00:58:32,640 --> 00:58:36,078
uh backup so this will not be saved so

1566
00:58:35,680 --> 00:58:38,480
please

1567
00:58:36,079 --> 00:58:39,599
all the important questions be moved

1568
00:58:38,480 --> 00:58:42,960
over to the

1569
00:58:39,599 --> 00:58:44,400
to the zulipchat so i thank the authors

1570
00:58:42,960 --> 00:58:46,880
again

1571
00:58:44,400 --> 00:58:47,520
you can send some claps clappings into

1572
00:58:46,880 --> 00:58:51,839
the

1573
00:58:47,520 --> 00:58:51,839
zoom chat now thank you very much

1574
00:58:52,799 --> 00:59:05,839
thanks everyone for joining

1575
00:59:16,839 --> 00:59:19,839
foreign

