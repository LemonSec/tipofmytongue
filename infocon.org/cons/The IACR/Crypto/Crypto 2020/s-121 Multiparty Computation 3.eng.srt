1
00:00:06,960 --> 00:00:10,800
okay

2
00:00:08,880 --> 00:00:12,320
so it's an honor to be uh co-hosting the

3
00:00:10,800 --> 00:00:13,679
final session at least that's what they

4
00:00:12,320 --> 00:00:15,679
told me when they asked me

5
00:00:13,679 --> 00:00:16,880
um the first talk in the session is

6
00:00:15,679 --> 00:00:18,160
private side intersection in the

7
00:00:16,880 --> 00:00:19,759
internet setting from lightweight

8
00:00:18,160 --> 00:00:21,840
oblivious prf

9
00:00:19,760 --> 00:00:24,240
uh by melissa chase and payhan now and

10
00:00:21,840 --> 00:00:26,960
payhan will be giving the talk

11
00:00:24,240 --> 00:00:29,598
thank you for the introduction um can

12
00:00:26,960 --> 00:00:33,120
you see my sides

13
00:00:29,599 --> 00:00:36,160
yep okay uh it is hello everyone

14
00:00:33,120 --> 00:00:38,640
uh this is joint work with melissa chase

15
00:00:36,160 --> 00:00:41,040
so first what is private setting

16
00:00:38,640 --> 00:00:42,960
transaction or psi for short

17
00:00:41,040 --> 00:00:45,440
it is a special secure two-party

18
00:00:42,960 --> 00:00:48,079
computation between alice and bob

19
00:00:45,440 --> 00:00:48,718
where each of them has a private set

20
00:00:48,079 --> 00:00:50,960
let's say

21
00:00:48,719 --> 00:00:52,879
the list of their friends and they want

22
00:00:50,960 --> 00:00:53,760
to figure out the intersection of the

23
00:00:52,879 --> 00:00:55,760
two sets

24
00:00:53,760 --> 00:00:58,399
namely their common friends without

25
00:00:55,760 --> 00:01:00,480
revealing any other information

26
00:00:58,399 --> 00:01:02,719
so they can run such a secure 2pc

27
00:01:00,480 --> 00:01:04,479
protocol and by the end of the protocol

28
00:01:02,719 --> 00:01:06,240
they will learn their common friends for

29
00:01:04,479 --> 00:01:08,159
example they will learn melissa and i

30
00:01:06,240 --> 00:01:09,839
are their common friends but nothing

31
00:01:08,159 --> 00:01:12,080
more in particular

32
00:01:09,840 --> 00:01:12,960
alice would have no idea about bob's

33
00:01:12,080 --> 00:01:16,960
other friends

34
00:01:12,960 --> 00:01:19,439
and vice versa so this is a problem of

35
00:01:16,960 --> 00:01:21,280
private setting transaction although the

36
00:01:19,439 --> 00:01:23,679
functionality is very simple

37
00:01:21,280 --> 00:01:24,400
psi has found a lot of applications in

38
00:01:23,680 --> 00:01:26,799
practice

39
00:01:24,400 --> 00:01:28,400
for example private contact discovery

40
00:01:26,799 --> 00:01:32,159
password bridge alert

41
00:01:28,400 --> 00:01:34,400
ads conversion measurement and many more

42
00:01:32,159 --> 00:01:36,240
there has been a lot of work on psi in

43
00:01:34,400 --> 00:01:38,320
the literature

44
00:01:36,240 --> 00:01:40,399
but in this work we will focus on the

45
00:01:38,320 --> 00:01:42,559
semi-honest secure psi

46
00:01:40,400 --> 00:01:44,159
and we assume the two sets have roughly

47
00:01:42,560 --> 00:01:46,320
the same size

48
00:01:44,159 --> 00:01:48,560
in this setting which protocol should we

49
00:01:46,320 --> 00:01:51,439
adopt in practice

50
00:01:48,560 --> 00:01:51,920
well obviously the most efficient one

51
00:01:51,439 --> 00:01:53,439
but

52
00:01:51,920 --> 00:01:55,920
when we think about the concrete

53
00:01:53,439 --> 00:01:59,199
efficiency there is usually a trade-off

54
00:01:55,920 --> 00:02:01,360
between computation and communication

55
00:01:59,200 --> 00:02:04,240
if we draw a line between computational

56
00:02:01,360 --> 00:02:06,799
efficiency and communication efficiency

57
00:02:04,240 --> 00:02:08,160
there is in fact one psi protocol at

58
00:02:06,799 --> 00:02:10,800
each end

59
00:02:08,160 --> 00:02:11,920
on the one hand coalescing corvette in

60
00:02:10,800 --> 00:02:14,319
2016

61
00:02:11,920 --> 00:02:16,238
constructs a psi protocol that is

62
00:02:14,319 --> 00:02:18,879
computationally very efficient

63
00:02:16,239 --> 00:02:20,080
but is communication wise it's more

64
00:02:18,879 --> 00:02:22,799
expensive

65
00:02:20,080 --> 00:02:24,720
so it is the best fit for networks with

66
00:02:22,800 --> 00:02:27,200
very high bandwidth

67
00:02:24,720 --> 00:02:29,359
on the other hand last year pincasted

68
00:02:27,200 --> 00:02:31,920
all gave another psi protocol called

69
00:02:29,360 --> 00:02:33,040
spotlight which achieves very low

70
00:02:31,920 --> 00:02:35,920
communication

71
00:02:33,040 --> 00:02:37,120
but is computationally more expensive so

72
00:02:35,920 --> 00:02:40,238
it is the best fit

73
00:02:37,120 --> 00:02:42,959
for networks with very low bandwidth

74
00:02:40,239 --> 00:02:44,959
in this work we ask the question whether

75
00:02:42,959 --> 00:02:46,000
we can achieve a better balance between

76
00:02:44,959 --> 00:02:48,640
computation

77
00:02:46,000 --> 00:02:49,599
and communication and here is what we

78
00:02:48,640 --> 00:02:51,760
did

79
00:02:49,599 --> 00:02:53,440
we construct a new psi protocol that

80
00:02:51,760 --> 00:02:54,079
achieves a better balance between the

81
00:02:53,440 --> 00:02:56,079
two

82
00:02:54,080 --> 00:02:58,400
so it is the best fit for the internet

83
00:02:56,080 --> 00:02:59,280
setting where the network bandwidth is

84
00:02:58,400 --> 00:03:02,319
not too high

85
00:02:59,280 --> 00:03:04,480
and not too low for example between 30

86
00:03:02,319 --> 00:03:08,000
and 100 megabits per second

87
00:03:04,480 --> 00:03:10,480
our psi protocol is the fastest also

88
00:03:08,000 --> 00:03:12,480
our protocol is semi honest secure but

89
00:03:10,480 --> 00:03:14,159
we can actually prove it's maliciously

90
00:03:12,480 --> 00:03:17,679
secure against one party

91
00:03:14,159 --> 00:03:18,879
almost for free so this is what we

92
00:03:17,680 --> 00:03:21,440
achieved

93
00:03:18,879 --> 00:03:23,599
now let's uh go a little bit into the

94
00:03:21,440 --> 00:03:26,640
technical stuff

95
00:03:23,599 --> 00:03:29,518
our starting point is the kkrt psi

96
00:03:26,640 --> 00:03:31,040
which is computationally very efficient

97
00:03:29,519 --> 00:03:34,799
and their main building block

98
00:03:31,040 --> 00:03:36,640
is a primitive called single point oprf

99
00:03:34,799 --> 00:03:38,080
and they construct this single point

100
00:03:36,640 --> 00:03:40,238
oprf from only

101
00:03:38,080 --> 00:03:41,200
ot extension and symmetrically crypto

102
00:03:40,239 --> 00:03:44,400
operations

103
00:03:41,200 --> 00:03:46,798
so it is computationally very efficient

104
00:03:44,400 --> 00:03:48,159
however to construct psi from single

105
00:03:46,799 --> 00:03:49,920
point oprf

106
00:03:48,159 --> 00:03:51,200
they need to use the data structure

107
00:03:49,920 --> 00:03:53,200
called cuckoo hashing

108
00:03:51,200 --> 00:03:55,839
and that's why they need a bit more

109
00:03:53,200 --> 00:03:58,560
communication overall

110
00:03:55,840 --> 00:04:00,319
in our work we construct psi from

111
00:03:58,560 --> 00:04:01,200
another primitive called multi-point

112
00:04:00,319 --> 00:04:04,000
oprf

113
00:04:01,200 --> 00:04:07,040
to get rid of this cuckoo hashing so as

114
00:04:04,000 --> 00:04:09,280
to reduce the communication

115
00:04:07,040 --> 00:04:11,200
but we can also construct multi-point

116
00:04:09,280 --> 00:04:12,799
oprf from only ot extension and

117
00:04:11,200 --> 00:04:14,640
symmetrical crypto

118
00:04:12,799 --> 00:04:16,400
so it is still computationally very

119
00:04:14,640 --> 00:04:19,279
efficient

120
00:04:16,399 --> 00:04:20,159
as a side note the work of prty or

121
00:04:19,279 --> 00:04:22,559
spotlight

122
00:04:20,160 --> 00:04:25,040
also follows this paradigm but they

123
00:04:22,560 --> 00:04:26,960
constructed multi-point oprf from ot

124
00:04:25,040 --> 00:04:28,400
extension and polynomial interpolation

125
00:04:26,960 --> 00:04:30,400
over a large field

126
00:04:28,400 --> 00:04:32,719
and that's why it's computationally more

127
00:04:30,400 --> 00:04:35,039
expensive

128
00:04:32,720 --> 00:04:36,960
in the remaining about one minute i will

129
00:04:35,040 --> 00:04:37,840
briefly tell you what is multi-point

130
00:04:36,960 --> 00:04:41,198
oprf

131
00:04:37,840 --> 00:04:43,280
and why it implies psi

132
00:04:41,199 --> 00:04:45,120
multi-point oblivious pseudo-random

133
00:04:43,280 --> 00:04:48,320
function is again a

134
00:04:45,120 --> 00:04:50,800
special secure 2pc between alice and bob

135
00:04:48,320 --> 00:04:51,440
where alice has no input and bob has a

136
00:04:50,800 --> 00:04:54,960
bunch of

137
00:04:51,440 --> 00:04:57,759
elements as input from y1 to yn

138
00:04:54,960 --> 00:04:58,799
and from the secure 2 pc alice will

139
00:04:57,759 --> 00:05:01,360
learn a prf

140
00:04:58,800 --> 00:05:04,639
key k and bob will learn the prf

141
00:05:01,360 --> 00:05:07,280
evaluated on all his elements

142
00:05:04,639 --> 00:05:08,400
this is the functionality of multipoint

143
00:05:07,280 --> 00:05:10,559
oprf

144
00:05:08,400 --> 00:05:12,960
and given this primitive we can

145
00:05:10,560 --> 00:05:15,440
construct psi very easily

146
00:05:12,960 --> 00:05:17,280
in particular they first run the

147
00:05:15,440 --> 00:05:20,560
multi-point oprf

148
00:05:17,280 --> 00:05:23,198
and then alice will evaluate the prf on

149
00:05:20,560 --> 00:05:24,880
all her elements and send all the prf

150
00:05:23,199 --> 00:05:28,320
values to bob

151
00:05:24,880 --> 00:05:29,440
by comparing these prf values bob can

152
00:05:28,320 --> 00:05:32,960
easily figure out

153
00:05:29,440 --> 00:05:32,960
the intersection of the two sets

154
00:05:33,120 --> 00:05:37,680
the remaining technical details are

155
00:05:35,199 --> 00:05:41,600
presented in the full talk

156
00:05:37,680 --> 00:05:41,600
and that's it thank you

157
00:05:43,600 --> 00:05:48,720
all right thanks pehan for that talk uh

158
00:05:46,320 --> 00:05:51,039
if there's any questions

159
00:05:48,720 --> 00:05:52,560
for any of these talks feel free to ask

160
00:05:51,039 --> 00:05:55,919
here in the zoom chat or

161
00:05:52,560 --> 00:05:56,720
on the zulip chat i think the link was

162
00:05:55,919 --> 00:05:59,599
posted

163
00:05:56,720 --> 00:05:59,600
in the chat here

164
00:06:00,240 --> 00:06:05,039
good i see a question hot off the

165
00:06:02,160 --> 00:06:08,080
presses from olga nissenbaum

166
00:06:05,039 --> 00:06:10,560
why are the remaining bits in r1

167
00:06:08,080 --> 00:06:12,080
a multi-point oprah flipped and not just

168
00:06:10,560 --> 00:06:12,960
random is it to decrease the false

169
00:06:12,080 --> 00:06:21,680
positive rate

170
00:06:12,960 --> 00:06:24,560
does it not affect privacy

171
00:06:21,680 --> 00:06:24,560
on the flips

172
00:06:25,440 --> 00:06:31,120
so uh the all these opr values are just

173
00:06:28,319 --> 00:06:31,120
sent to bob

174
00:06:31,840 --> 00:06:35,520
oh so the question is the question is uh

175
00:06:34,160 --> 00:06:37,600
maybe referring to some

176
00:06:35,520 --> 00:06:38,799
some uh technical details in the full

177
00:06:37,600 --> 00:06:42,800
talk

178
00:06:38,800 --> 00:06:48,240
uh oh oh i see wow bits that are flipped

179
00:06:42,800 --> 00:06:52,800
uh and not just random

180
00:06:48,240 --> 00:06:55,840
and the remaining bits oh yeah um

181
00:06:52,800 --> 00:06:56,880
the remaining bits in r1 are flipped not

182
00:06:55,840 --> 00:06:59,119
just a random

183
00:06:56,880 --> 00:06:59,919
because we we actually want the two

184
00:06:59,120 --> 00:07:03,680
matrix

185
00:06:59,919 --> 00:07:06,639
matrices to be as different as possible

186
00:07:03,680 --> 00:07:08,000
so that it is hard to for bob to guess

187
00:07:06,639 --> 00:07:10,720
the choice bits

188
00:07:08,000 --> 00:07:10,720
of alice

189
00:07:11,039 --> 00:07:16,639
so uh

190
00:07:14,160 --> 00:07:18,639
yeah it is a little bit more technical

191
00:07:16,639 --> 00:07:20,960
but we can discuss it offline

192
00:07:18,639 --> 00:07:22,080
so at a high level uh we want to have

193
00:07:20,960 --> 00:07:25,599
two guarantees

194
00:07:22,080 --> 00:07:28,719
the first guarantee is that um for

195
00:07:25,599 --> 00:07:31,680
the elements in bob set

196
00:07:28,720 --> 00:07:34,479
the oprf evaluates the same on two

197
00:07:31,680 --> 00:07:35,199
matrices on both matrix matrices r0 and

198
00:07:34,479 --> 00:07:37,440
r1

199
00:07:35,199 --> 00:07:38,960
for the elements nodding bob said we

200
00:07:37,440 --> 00:07:42,000
want bob to

201
00:07:38,960 --> 00:07:45,198
we wanted hard to be to be guessed

202
00:07:42,000 --> 00:07:46,080
by bob uh to to have the second

203
00:07:45,199 --> 00:07:48,560
guarantee

204
00:07:46,080 --> 00:07:49,280
we want the two matrices are zero and i

205
00:07:48,560 --> 00:07:51,919
want to be

206
00:07:49,280 --> 00:07:53,520
as different as possible and that's why

207
00:07:51,919 --> 00:07:56,960
we flip the bits

208
00:07:53,520 --> 00:08:00,719
from r0 to r1 if r1

209
00:07:56,960 --> 00:08:02,719
is just randomly chosen these bits

210
00:08:00,720 --> 00:08:05,280
then there will be less difference

211
00:08:02,720 --> 00:08:07,280
between the two matrices

212
00:08:05,280 --> 00:08:09,599
i hope that answers the question but if

213
00:08:07,280 --> 00:08:12,799
you have more questions you can

214
00:08:09,599 --> 00:08:15,599
ask me offline sure and maybe just one

215
00:08:12,800 --> 00:08:16,479
quick question uh jonathan katz was

216
00:08:15,599 --> 00:08:18,639
asking

217
00:08:16,479 --> 00:08:19,599
um about your performance comparison you

218
00:08:18,639 --> 00:08:21,680
were comparing

219
00:08:19,599 --> 00:08:23,280
with respect to symmetric set sizes but

220
00:08:21,680 --> 00:08:25,440
does the answer change when it's

221
00:08:23,280 --> 00:08:28,479
asymmetric set sizes

222
00:08:25,440 --> 00:08:31,199
uh i think it depends on whether

223
00:08:28,479 --> 00:08:32,240
alice's set is smaller or bob's set is

224
00:08:31,199 --> 00:08:35,360
smaller

225
00:08:32,240 --> 00:08:38,799
if alice's set is smaller

226
00:08:35,360 --> 00:08:42,880
then it will be similar so

227
00:08:38,799 --> 00:08:46,719
it is i guess it's comparable to prty

228
00:08:42,880 --> 00:08:49,600
because we follow the same paradigm um

229
00:08:46,720 --> 00:08:51,440
but like communication wise overall it

230
00:08:49,600 --> 00:08:56,480
still has to grow with the

231
00:08:51,440 --> 00:08:56,480
bobset size and if

232
00:08:57,760 --> 00:09:01,839
bob's set is smaller so like overall i

233
00:09:00,480 --> 00:09:03,680
think because we follow the same

234
00:09:01,839 --> 00:09:07,680
paradigm as prty

235
00:09:03,680 --> 00:09:09,519
it will be more efficient in computation

236
00:09:07,680 --> 00:09:12,000
but communication wise it will be

237
00:09:09,519 --> 00:09:12,000
similar

238
00:09:13,040 --> 00:09:16,240
okay thanks i think in the interest of

239
00:09:14,959 --> 00:09:19,599
time we will

240
00:09:16,240 --> 00:09:21,360
move along uh apologies to those of you

241
00:09:19,600 --> 00:09:23,120
asking questions in the chat maybe uh

242
00:09:21,360 --> 00:09:24,560
pahan or melissa if they're available

243
00:09:23,120 --> 00:09:26,399
can

244
00:09:24,560 --> 00:09:27,680
respond to some questions in the zulip

245
00:09:26,399 --> 00:09:29,200
chat uh

246
00:09:27,680 --> 00:09:32,000
in the meantime let's start with the

247
00:09:29,200 --> 00:09:34,560
next talk um

248
00:09:32,000 --> 00:09:36,320
the next talk is about two-sided

249
00:09:34,560 --> 00:09:37,920
malicious security for

250
00:09:36,320 --> 00:09:39,360
private intersections some with

251
00:09:37,920 --> 00:09:42,000
cardinality

252
00:09:39,360 --> 00:09:42,480
uh i believe karn is going to give the

253
00:09:42,000 --> 00:09:47,040
talk

254
00:09:42,480 --> 00:09:49,360
uh if you're ready go right ahead

255
00:09:47,040 --> 00:09:51,199
okay awesome thanks so today i'll be

256
00:09:49,360 --> 00:09:52,959
talking about this work which is joint

257
00:09:51,200 --> 00:09:54,800
work with my co-authors at google and

258
00:09:52,959 --> 00:09:58,000
also with baehan

259
00:09:54,800 --> 00:09:58,560
um so what is the problem we're trying

260
00:09:58,000 --> 00:10:00,640
to solve

261
00:09:58,560 --> 00:10:02,319
our problem is a bit of a twist on

262
00:10:00,640 --> 00:10:04,079
private set intersection

263
00:10:02,320 --> 00:10:06,160
where two parties have sets and they

264
00:10:04,079 --> 00:10:07,839
want to not learn the items that they

265
00:10:06,160 --> 00:10:09,040
have in common but rather they want to

266
00:10:07,839 --> 00:10:11,040
learn some function

267
00:10:09,040 --> 00:10:13,439
of the items they have in common so in

268
00:10:11,040 --> 00:10:14,079
particular we want these two parties to

269
00:10:13,440 --> 00:10:15,760
learn

270
00:10:14,079 --> 00:10:17,359
the size of the intersection so that's

271
00:10:15,760 --> 00:10:20,240
the number of items in common

272
00:10:17,360 --> 00:10:22,320
and also the sum of some associated

273
00:10:20,240 --> 00:10:24,079
values held by one of the parties

274
00:10:22,320 --> 00:10:25,600
for those diagrams that are in the

275
00:10:24,079 --> 00:10:28,399
intersection so that we call the

276
00:10:25,600 --> 00:10:28,399
intersection sum

277
00:10:28,560 --> 00:10:31,760
and why do we care about this problem

278
00:10:30,240 --> 00:10:33,920
well actually it's a problem of

279
00:10:31,760 --> 00:10:34,959
great practical interests and google had

280
00:10:33,920 --> 00:10:37,439
a blog post about

281
00:10:34,959 --> 00:10:39,279
this last year uh where they dubbed this

282
00:10:37,440 --> 00:10:40,320
problem private joint and compute

283
00:10:39,279 --> 00:10:43,120
and they talked about a bunch of

284
00:10:40,320 --> 00:10:46,000
applications including to

285
00:10:43,120 --> 00:10:48,000
add conversion measurements and in fact

286
00:10:46,000 --> 00:10:48,880
facebook also recently had a blog post

287
00:10:48,000 --> 00:10:50,880
talking about

288
00:10:48,880 --> 00:10:52,240
uh private journal compute and other

289
00:10:50,880 --> 00:10:53,760
problems related to private set

290
00:10:52,240 --> 00:10:55,360
intersection and they've also

291
00:10:53,760 --> 00:10:56,959
given a bunch of examples where this

292
00:10:55,360 --> 00:10:59,279
thing is useful so it's a problem with a

293
00:10:56,959 --> 00:11:01,518
lot of practical interests

294
00:10:59,279 --> 00:11:02,399
and in this work we're focused on

295
00:11:01,519 --> 00:11:04,399
extending

296
00:11:02,399 --> 00:11:06,320
the private joint compute protocol to

297
00:11:04,399 --> 00:11:08,320
get security against malicious

298
00:11:06,320 --> 00:11:09,920
adversaries so the previous work had

299
00:11:08,320 --> 00:11:12,000
security against honestly curious i'm

300
00:11:09,920 --> 00:11:13,439
saying and in particular we wanted to

301
00:11:12,000 --> 00:11:14,720
maintain many of the properties that

302
00:11:13,440 --> 00:11:17,120
were in the previous work

303
00:11:14,720 --> 00:11:20,079
including that we want the ability for

304
00:11:17,120 --> 00:11:22,399
both sides to receive the output

305
00:11:20,079 --> 00:11:23,199
another constraint is that we care much

306
00:11:22,399 --> 00:11:25,839
more about

307
00:11:23,200 --> 00:11:28,240
communication costs and monetary costs

308
00:11:25,839 --> 00:11:31,760
versus end-to-end runtime

309
00:11:28,240 --> 00:11:33,760
and finally we are fine with revealing

310
00:11:31,760 --> 00:11:36,319
the size of the intersection so in some

311
00:11:33,760 --> 00:11:38,000
cases for in some psi works

312
00:11:36,320 --> 00:11:40,160
intersection size is an undesirable

313
00:11:38,000 --> 00:11:43,680
leakage but for us it's actually

314
00:11:40,160 --> 00:11:46,079
desirable and useful to learn

315
00:11:43,680 --> 00:11:47,359
and i'll just give a brief overview of

316
00:11:46,079 --> 00:11:48,959
our approach and you can look at the

317
00:11:47,360 --> 00:11:51,200
full talk for more details

318
00:11:48,959 --> 00:11:54,160
so our first idea is to construct

319
00:11:51,200 --> 00:11:56,639
something called a distributed opr

320
00:11:54,160 --> 00:11:57,920
so this is a sub protocol that's going

321
00:11:56,639 --> 00:12:00,720
to allow two parties

322
00:11:57,920 --> 00:12:01,760
each holding key shares for an opr to

323
00:12:00,720 --> 00:12:04,959
evaluate

324
00:12:01,760 --> 00:12:08,560
uh the oprf on all inputs that

325
00:12:04,959 --> 00:12:10,319
come from one party uh so this pr oprf

326
00:12:08,560 --> 00:12:12,479
has a two keys k1 and k2

327
00:12:10,320 --> 00:12:15,200
and both parties should learn the oprf

328
00:12:12,480 --> 00:12:16,800
evaluated on each party's input

329
00:12:15,200 --> 00:12:19,600
and this two-sided output is actually

330
00:12:16,800 --> 00:12:21,359
important and i'll discuss it shortly

331
00:12:19,600 --> 00:12:24,639
so the first thing is we construct this

332
00:12:21,360 --> 00:12:26,480
and of course with malicious security

333
00:12:24,639 --> 00:12:28,240
then the second thing is we layer this

334
00:12:26,480 --> 00:12:29,839
with a shuffle on top of it so the party

335
00:12:28,240 --> 00:12:31,600
that provides the inputs into the

336
00:12:29,839 --> 00:12:34,000
distributed opr protocol

337
00:12:31,600 --> 00:12:36,160
we modify it so that it receives its

338
00:12:34,000 --> 00:12:38,320
output in shuffled order

339
00:12:36,160 --> 00:12:39,360
and in order to maintain malicious

340
00:12:38,320 --> 00:12:41,279
security here

341
00:12:39,360 --> 00:12:42,639
the party that performs the shuffling

342
00:12:41,279 --> 00:12:44,160
which is party two here

343
00:12:42,639 --> 00:12:46,079
he uses a shuffle proof and there's

344
00:12:44,160 --> 00:12:49,120
several of these we use a specific one

345
00:12:46,079 --> 00:12:50,160
that you can see in the paper um and

346
00:12:49,120 --> 00:12:52,880
this on its own is

347
00:12:50,160 --> 00:12:54,480
enough to achieve just the cardinality

348
00:12:52,880 --> 00:12:55,920
so for both the parties to compute the

349
00:12:54,480 --> 00:12:57,600
size of the intersection

350
00:12:55,920 --> 00:12:59,519
and the way you can do this is to have

351
00:12:57,600 --> 00:13:01,839
the two parties first compute

352
00:12:59,519 --> 00:13:03,360
a shuffled doprf on one party's input

353
00:13:01,839 --> 00:13:05,680
and then a shuffled eopf

354
00:13:03,360 --> 00:13:07,200
on the other party's input and since as

355
00:13:05,680 --> 00:13:07,680
we said before both parties can see the

356
00:13:07,200 --> 00:13:09,680
opr

357
00:13:07,680 --> 00:13:12,800
outputs they can compute the cardinality

358
00:13:09,680 --> 00:13:14,079
just by counting how many oprf items

359
00:13:12,800 --> 00:13:16,800
were in common between the two

360
00:13:14,079 --> 00:13:20,239
evaluations

361
00:13:16,800 --> 00:13:20,880
and to extend this to the intersection

362
00:13:20,240 --> 00:13:23,839
sum

363
00:13:20,880 --> 00:13:25,360
what we do is we allow the second party

364
00:13:23,839 --> 00:13:27,040
to

365
00:13:25,360 --> 00:13:28,560
send homomorphic encryptions of its

366
00:13:27,040 --> 00:13:30,319
associated values

367
00:13:28,560 --> 00:13:31,839
under a scheme encryption scheme that

368
00:13:30,320 --> 00:13:35,920
allows uh split keys

369
00:13:31,839 --> 00:13:37,440
so key shares s1 and s2 and then

370
00:13:35,920 --> 00:13:39,360
these encryptions are going to be

371
00:13:37,440 --> 00:13:40,240
shuffled and re-randomized in the same

372
00:13:39,360 --> 00:13:43,600
shuffle order

373
00:13:40,240 --> 00:13:44,720
as the opr values were and the

374
00:13:43,600 --> 00:13:47,120
the shuffle proof is going to be

375
00:13:44,720 --> 00:13:49,440
extended to include these values

376
00:13:47,120 --> 00:13:50,399
and then now this is going to allow both

377
00:13:49,440 --> 00:13:53,199
parties to see

378
00:13:50,399 --> 00:13:54,000
oh these opr values are in common let me

379
00:13:53,199 --> 00:13:56,639
add together

380
00:13:54,000 --> 00:13:57,360
the associated homomorphic encryptions

381
00:13:56,639 --> 00:13:59,839
and

382
00:13:57,360 --> 00:14:01,120
they can both compute the encryption of

383
00:13:59,839 --> 00:14:02,800
the intersection sum

384
00:14:01,120 --> 00:14:05,279
by doing so and then they can

385
00:14:02,800 --> 00:14:07,279
interactively and probably decrypt

386
00:14:05,279 --> 00:14:08,800
and the fact that both parties can

387
00:14:07,279 --> 00:14:09,839
actually go through the transcript and

388
00:14:08,800 --> 00:14:11,519
on their own decide

389
00:14:09,839 --> 00:14:13,279
which encryptions to add together is

390
00:14:11,519 --> 00:14:14,880
actually really helpful because

391
00:14:13,279 --> 00:14:16,320
it's a major headache for one of the

392
00:14:14,880 --> 00:14:17,439
parties to prove to the other that it

393
00:14:16,320 --> 00:14:19,440
used the right thing

394
00:14:17,440 --> 00:14:21,519
but because it's on public information

395
00:14:19,440 --> 00:14:23,680
it saves a lot of headache

396
00:14:21,519 --> 00:14:26,160
and so the distributor prf we use is

397
00:14:23,680 --> 00:14:27,760
this dojo siempalski prf which has

398
00:14:26,160 --> 00:14:32,079
actually been used by

399
00:14:27,760 --> 00:14:32,079
some other folks in for computing uh

400
00:14:32,160 --> 00:14:36,240
psi one-sided psi uh we use the variant

401
00:14:35,040 --> 00:14:38,160
which has split keys

402
00:14:36,240 --> 00:14:39,360
and we leverage the manuscript

403
00:14:38,160 --> 00:14:42,839
cryptosystem

404
00:14:39,360 --> 00:14:44,560
in order to achieve our distributed over

405
00:14:42,839 --> 00:14:46,320
here

406
00:14:44,560 --> 00:14:48,160
that's kind of the outline of how we do

407
00:14:46,320 --> 00:14:50,000
the protocol and then

408
00:14:48,160 --> 00:14:51,279
in order to get communication efficiency

409
00:14:50,000 --> 00:14:52,399
especially we use a whole bunch of

410
00:14:51,279 --> 00:14:54,399
batching techniques

411
00:14:52,399 --> 00:14:56,320
so the first is that we use various

412
00:14:54,399 --> 00:14:58,639
kinds of batching to

413
00:14:56,320 --> 00:15:00,240
increase to decrease the communication

414
00:14:58,639 --> 00:15:03,519
expansion of command issue

415
00:15:00,240 --> 00:15:05,360
encryption so uh at a high level the

416
00:15:03,519 --> 00:15:06,959
idea is commander shoot encryption is

417
00:15:05,360 --> 00:15:08,720
kind of like a combination of alcohol

418
00:15:06,959 --> 00:15:09,279
encryption and pye encryption so we use

419
00:15:08,720 --> 00:15:11,519
some

420
00:15:09,279 --> 00:15:12,480
some of the optimizations from alcohol

421
00:15:11,519 --> 00:15:14,720
encryption some of the

422
00:15:12,480 --> 00:15:15,920
uh optimization from ie encryption and

423
00:15:14,720 --> 00:15:17,519
you can look in the paper for more

424
00:15:15,920 --> 00:15:19,279
details

425
00:15:17,519 --> 00:15:21,279
and the second is we do a whole bunch of

426
00:15:19,279 --> 00:15:23,040
batching of associated zero knowledge

427
00:15:21,279 --> 00:15:24,720
proofs so for each step we have an

428
00:15:23,040 --> 00:15:26,079
associated zero large proof

429
00:15:24,720 --> 00:15:27,440
and in order to make this communication

430
00:15:26,079 --> 00:15:28,638
efficient we use a whole bunch of

431
00:15:27,440 --> 00:15:31,199
batching and some of them

432
00:15:28,639 --> 00:15:32,800
is quite non-standard so we thought this

433
00:15:31,199 --> 00:15:34,719
was interesting also

434
00:15:32,800 --> 00:15:35,920
and in terms of the practical efficiency

435
00:15:34,720 --> 00:15:38,320
that we achieved

436
00:15:35,920 --> 00:15:39,360
uh we find that if for if we set the

437
00:15:38,320 --> 00:15:41,680
parameters

438
00:15:39,360 --> 00:15:44,079
aggressively we can actually get only a

439
00:15:41,680 --> 00:15:46,160
four to five x expansion over the semi

440
00:15:44,079 --> 00:15:47,120
honest ddh based private journal compute

441
00:15:46,160 --> 00:15:48,639
protocol

442
00:15:47,120 --> 00:15:51,040
even though we get to set it up with

443
00:15:48,639 --> 00:15:55,360
malicious security

444
00:15:51,040 --> 00:15:58,240
and if we at minimizing monetary costs

445
00:15:55,360 --> 00:16:00,240
then we get like a 24 to 25 x increase

446
00:15:58,240 --> 00:16:03,839
and for our monitor cost model we use

447
00:16:00,240 --> 00:16:05,279
uh costs from uh public cloud providers

448
00:16:03,839 --> 00:16:08,639
for example gcp

449
00:16:05,279 --> 00:16:12,240
in the lower uh low priority setting for

450
00:16:08,639 --> 00:16:14,079
computation and there's also some

451
00:16:12,240 --> 00:16:16,800
comparisons with other works but

452
00:16:14,079 --> 00:16:18,160
basically we do better than works based

453
00:16:16,800 --> 00:16:20,839
on carpool circuits

454
00:16:18,160 --> 00:16:24,000
and not as well as compared to worse set

455
00:16:20,839 --> 00:16:25,519
to malicious secure psi but those

456
00:16:24,000 --> 00:16:27,279
existing works that do malicious secure

457
00:16:25,519 --> 00:16:28,639
psi uh

458
00:16:27,279 --> 00:16:30,639
don't have a straightforward way to

459
00:16:28,639 --> 00:16:32,959
extend to two-sided output or to compete

460
00:16:30,639 --> 00:16:36,720
with the intersection

461
00:16:32,959 --> 00:16:38,239
okay that's all thank you very much

462
00:16:36,720 --> 00:16:40,079
good thanks so we have time maybe for

463
00:16:38,240 --> 00:16:41,920
one or two questions if there are any uh

464
00:16:40,079 --> 00:16:43,599
you can put them in the chat

465
00:16:41,920 --> 00:16:45,360
uh maybe in the meanwhile i can ask you

466
00:16:43,600 --> 00:16:46,399
a question uh and i don't know if you

467
00:16:45,360 --> 00:16:47,360
have the answer or can tell me the

468
00:16:46,399 --> 00:16:49,600
answer but

469
00:16:47,360 --> 00:16:50,959
um how important from from google's

470
00:16:49,600 --> 00:16:53,279
point of view or from the

471
00:16:50,959 --> 00:16:54,719
view of real world deployment uh how how

472
00:16:53,279 --> 00:16:56,480
important do you find malicious security

473
00:16:54,720 --> 00:16:59,680
versus semi-auto security versus maybe

474
00:16:56,480 --> 00:17:02,079
weaker forms like covert security

475
00:16:59,680 --> 00:17:03,680
that's a great question i mean uh it

476
00:17:02,079 --> 00:17:05,039
depends a lot of settings to setting

477
00:17:03,680 --> 00:17:07,039
of course i can't give you an exact

478
00:17:05,039 --> 00:17:08,879
answer on this sorry about that but

479
00:17:07,039 --> 00:17:10,079
it's really helpful to have options in

480
00:17:08,880 --> 00:17:11,839
different scenarios

481
00:17:10,079 --> 00:17:13,599
so in some scenarios you can offload

482
00:17:11,839 --> 00:17:15,280
trust assumptions to other enforcement

483
00:17:13,599 --> 00:17:16,399
mechanisms and in some scenarios you can

484
00:17:15,280 --> 00:17:18,639
so it is

485
00:17:16,400 --> 00:17:21,280
very helpful to have a ranger solution

486
00:17:18,640 --> 00:17:24,400
okay i'll try googling the answer

487
00:17:21,280 --> 00:17:25,280
um a question on the chat is that how

488
00:17:24,400 --> 00:17:28,880
does the shuffle

489
00:17:25,280 --> 00:17:32,000
affect the efficiency of sd opr

490
00:17:28,880 --> 00:17:33,520
compared to doprf

491
00:17:32,000 --> 00:17:35,280
so it actually turns out the shuffle

492
00:17:33,520 --> 00:17:37,679
cost is quite a small

493
00:17:35,280 --> 00:17:38,639
part of the overall communication and

494
00:17:37,679 --> 00:17:40,720
computation costs

495
00:17:38,640 --> 00:17:42,480
the bulk of the computation cost is the

496
00:17:40,720 --> 00:17:44,640
committed shoot encryption

497
00:17:42,480 --> 00:17:46,480
and the shuffle is sublinear

498
00:17:44,640 --> 00:17:48,320
communication and so are all the proofs

499
00:17:46,480 --> 00:17:50,720
so it actually has a very minimal

500
00:17:48,320 --> 00:17:50,720
impact

501
00:17:52,799 --> 00:17:56,400
i think if there are no more questions

502
00:17:55,280 --> 00:17:58,960
we can

503
00:17:56,400 --> 00:17:59,919
go ahead to the next talk i'm not sure

504
00:17:58,960 --> 00:18:03,520
who uh

505
00:17:59,919 --> 00:18:03,520
which which author is giving the talk

506
00:18:04,160 --> 00:18:07,679
so i'm giving the talk and actually okay

507
00:18:07,120 --> 00:18:09,120
so

508
00:18:07,679 --> 00:18:11,039
the next talk is on nearly optimal

509
00:18:09,120 --> 00:18:12,000
robust secret sharing against rushing

510
00:18:11,039 --> 00:18:15,280
adversaries

511
00:18:12,000 --> 00:18:19,600
uh by passing uh manurangsi uh akshay

512
00:18:15,280 --> 00:18:21,120
ram srinivasan and prashanth vasudevan

513
00:18:19,600 --> 00:18:22,639
thanks john for the introduction i'm

514
00:18:21,120 --> 00:18:24,479
going to talk about

515
00:18:22,640 --> 00:18:26,400
nearly optimal robust secret sharing

516
00:18:24,480 --> 00:18:28,000
against russian adversaries and this is

517
00:18:26,400 --> 00:18:29,840
based on joint work with

518
00:18:28,000 --> 00:18:31,840
prasan manurangsi and prasad nalini

519
00:18:29,840 --> 00:18:34,559
vasudeva

520
00:18:31,840 --> 00:18:35,280
so let me start this talk by uh first

521
00:18:34,559 --> 00:18:37,200
defining

522
00:18:35,280 --> 00:18:38,559
uh the notion of robust secret sharing

523
00:18:37,200 --> 00:18:42,240
which was introduced by

524
00:18:38,559 --> 00:18:42,960
ravin and benor in 1989. a robust secret

525
00:18:42,240 --> 00:18:44,799
sharing is

526
00:18:42,960 --> 00:18:46,960
just like any other threshold secret

527
00:18:44,799 --> 00:18:49,120
sharing satisfying both the correctness

528
00:18:46,960 --> 00:18:51,280
and the secrecy properties

529
00:18:49,120 --> 00:18:53,360
in addition to these two properties we

530
00:18:51,280 --> 00:18:56,720
need a third property which is the

531
00:18:53,360 --> 00:18:57,039
robustness criteria so roughly speaking

532
00:18:56,720 --> 00:19:00,160
a

533
00:18:57,039 --> 00:19:02,640
robustness criterion requires that eve

534
00:19:00,160 --> 00:19:03,679
an adversary who corrupts up to t

535
00:19:02,640 --> 00:19:05,760
parties

536
00:19:03,679 --> 00:19:07,520
cannot force an honest party in the

537
00:19:05,760 --> 00:19:10,879
reconstruction phase to

538
00:19:07,520 --> 00:19:12,080
output a wrong secret to give more

539
00:19:10,880 --> 00:19:13,760
details about this

540
00:19:12,080 --> 00:19:16,240
robustness let's consider the

541
00:19:13,760 --> 00:19:18,000
reconstruction phase of the protocol

542
00:19:16,240 --> 00:19:20,400
so in the reconstruction phase the

543
00:19:18,000 --> 00:19:23,039
parties start with the shares that was

544
00:19:20,400 --> 00:19:24,880
handed over to them by the dealer and

545
00:19:23,039 --> 00:19:25,919
let's consider an adversary that could

546
00:19:24,880 --> 00:19:29,039
corrupt up to

547
00:19:25,919 --> 00:19:31,200
t of these parties the reconstruction

548
00:19:29,039 --> 00:19:33,360
could proceed in multiple rounds and in

549
00:19:31,200 --> 00:19:33,840
each round a party could send a message

550
00:19:33,360 --> 00:19:37,039
to

551
00:19:33,840 --> 00:19:38,159
any other party the honest parties will

552
00:19:37,039 --> 00:19:40,640
follow the protocol

553
00:19:38,160 --> 00:19:42,080
whereas the adversarial or the corrupted

554
00:19:40,640 --> 00:19:43,600
parties could deviate

555
00:19:42,080 --> 00:19:45,199
arbitrarily from the protocol

556
00:19:43,600 --> 00:19:48,159
specification

557
00:19:45,200 --> 00:19:49,760
at the end of the protocol we want all

558
00:19:48,160 --> 00:19:52,400
the honest parties to

559
00:19:49,760 --> 00:19:52,879
output the secret s that was originally

560
00:19:52,400 --> 00:19:56,160
shared

561
00:19:52,880 --> 00:19:57,360
so this is the robustness property so we

562
00:19:56,160 --> 00:20:00,400
also allow a small

563
00:19:57,360 --> 00:20:03,039
error probability in the

564
00:20:00,400 --> 00:20:04,960
honest party's reconstruction so which

565
00:20:03,039 --> 00:20:07,280
is denoted by epsilon and

566
00:20:04,960 --> 00:20:09,440
we call such a secret sharing scheme to

567
00:20:07,280 --> 00:20:11,360
be a t comma n comma epsilon robust

568
00:20:09,440 --> 00:20:13,600
secret shell

569
00:20:11,360 --> 00:20:14,959
so here we might consider an adversary

570
00:20:13,600 --> 00:20:17,918
that could either be

571
00:20:14,960 --> 00:20:20,559
rushing or non-rushing so the more

572
00:20:17,919 --> 00:20:23,360
stronger rushing adversarial model

573
00:20:20,559 --> 00:20:24,000
allows the corrupted parties in each

574
00:20:23,360 --> 00:20:26,399
round

575
00:20:24,000 --> 00:20:29,600
to wait for the messages from the honest

576
00:20:26,400 --> 00:20:32,320
parties before sending its own message

577
00:20:29,600 --> 00:20:34,080
for applications related to constructing

578
00:20:32,320 --> 00:20:36,399
secure multi-party computation

579
00:20:34,080 --> 00:20:38,240
protocols it's extremely important that

580
00:20:36,400 --> 00:20:41,600
the robust secret sharing is secure

581
00:20:38,240 --> 00:20:44,240
against rushing adversaries

582
00:20:41,600 --> 00:20:45,199
so given this definition let me give you

583
00:20:44,240 --> 00:20:48,000
a couple of

584
00:20:45,200 --> 00:20:48,559
facts about robust secret sharing the

585
00:20:48,000 --> 00:20:51,360
first

586
00:20:48,559 --> 00:20:53,600
fact is that xiaomi secret sharing is

587
00:20:51,360 --> 00:20:54,559
perfectly robust when n is greater than

588
00:20:53,600 --> 00:20:57,280
or equal to three t

589
00:20:54,559 --> 00:20:58,799
plus one and this is due to the error

590
00:20:57,280 --> 00:21:02,000
correcting properties of

591
00:20:58,799 --> 00:21:04,799
read solvent codes on the other hand

592
00:21:02,000 --> 00:21:06,640
when n is less than or equal to 2t or in

593
00:21:04,799 --> 00:21:08,799
other words if an adversary is able to

594
00:21:06,640 --> 00:21:12,320
corrupt a majority of the parties

595
00:21:08,799 --> 00:21:14,480
then robustness is impossible to achieve

596
00:21:12,320 --> 00:21:16,158
so the interesting set of parameters is

597
00:21:14,480 --> 00:21:18,799
when n lies between

598
00:21:16,159 --> 00:21:21,120
two t plus one and three t plus one and

599
00:21:18,799 --> 00:21:23,520
the most challenging setting is when

600
00:21:21,120 --> 00:21:24,479
the extreme case when n is equal to two

601
00:21:23,520 --> 00:21:26,400
t plus one

602
00:21:24,480 --> 00:21:28,000
that is an adversary can corrupt t

603
00:21:26,400 --> 00:21:30,640
parties but we just have

604
00:21:28,000 --> 00:21:32,320
two t plus one uh total number of

605
00:21:30,640 --> 00:21:34,559
parties

606
00:21:32,320 --> 00:21:36,559
so in this setting uh the work of robin

607
00:21:34,559 --> 00:21:38,639
and bennor gave a construction of robust

608
00:21:36,559 --> 00:21:39,918
secret sharing with error two to the

609
00:21:38,640 --> 00:21:42,000
minus lambda

610
00:21:39,919 --> 00:21:43,120
and the share size of their construction

611
00:21:42,000 --> 00:21:46,799
was m plus

612
00:21:43,120 --> 00:21:48,719
order n times lambda here m denotes the

613
00:21:46,799 --> 00:21:50,799
length of the secret and n is the number

614
00:21:48,720 --> 00:21:52,720
of parties

615
00:21:50,799 --> 00:21:54,480
so when compared to the plain shamil

616
00:21:52,720 --> 00:21:55,760
secret sharing there is an additive

617
00:21:54,480 --> 00:21:57,840
overhead of order

618
00:21:55,760 --> 00:21:59,600
n times lambda in their construction and

619
00:21:57,840 --> 00:22:01,918
the natural question to ask is whether

620
00:21:59,600 --> 00:22:04,799
this over it necessary

621
00:22:01,919 --> 00:22:05,520
a work of carpentry at all in 94 showed

622
00:22:04,799 --> 00:22:08,720
that when n

623
00:22:05,520 --> 00:22:09,440
is equal to 2 t plus 1 and in order to

624
00:22:08,720 --> 00:22:12,320
achieve an

625
00:22:09,440 --> 00:22:14,480
error of 2 to the minus lambda every

626
00:22:12,320 --> 00:22:15,918
robust secret sharing scheme must have a

627
00:22:14,480 --> 00:22:19,360
share size which is

628
00:22:15,919 --> 00:22:21,280
m plus omega of lambda so couple of

629
00:22:19,360 --> 00:22:23,280
points to note about this result is that

630
00:22:21,280 --> 00:22:24,720
perfect robustness is impossible to

631
00:22:23,280 --> 00:22:26,799
achieve in this regime

632
00:22:24,720 --> 00:22:28,400
and furthermore the share size of a

633
00:22:26,799 --> 00:22:30,639
robust secret sharing is

634
00:22:28,400 --> 00:22:32,720
strictly larger than its non-robust

635
00:22:30,640 --> 00:22:34,880
counterpart

636
00:22:32,720 --> 00:22:36,720
so a long line of work followed in

637
00:22:34,880 --> 00:22:38,799
trying to optimize the share size of

638
00:22:36,720 --> 00:22:40,400
this robust secret shirt

639
00:22:38,799 --> 00:22:42,480
so i would like to remark that there are

640
00:22:40,400 --> 00:22:43,440
many interesting works that consider the

641
00:22:42,480 --> 00:22:46,559
setting where

642
00:22:43,440 --> 00:22:47,840
t is half minus delta times n where

643
00:22:46,559 --> 00:22:50,399
delta is some

644
00:22:47,840 --> 00:22:51,120
small constant however in this regime

645
00:22:50,400 --> 00:22:53,120
the

646
00:22:51,120 --> 00:22:54,559
the lower bound of carpentry at all does

647
00:22:53,120 --> 00:22:56,799
not hold

648
00:22:54,559 --> 00:22:58,720
so the focus of our work is in this

649
00:22:56,799 --> 00:23:01,200
extreme setting where n is 2 t

650
00:22:58,720 --> 00:23:01,919
plus 1 and in this regime the lower

651
00:23:01,200 --> 00:23:05,360
bound

652
00:23:01,919 --> 00:23:06,080
of carpentry at all codes so what do we

653
00:23:05,360 --> 00:23:07,760
know about

654
00:23:06,080 --> 00:23:09,280
constructing robust secret sharing in

655
00:23:07,760 --> 00:23:11,600
this regime so the

656
00:23:09,280 --> 00:23:12,559
the prior work can be uh summarized

657
00:23:11,600 --> 00:23:14,320
using this

658
00:23:12,559 --> 00:23:16,720
table so i wouldn't be going too much

659
00:23:14,320 --> 00:23:19,039
into the details but the main

660
00:23:16,720 --> 00:23:20,400
problem that was left open from this

661
00:23:19,039 --> 00:23:22,879
long line of work

662
00:23:20,400 --> 00:23:23,760
is to construct a robust secret sharing

663
00:23:22,880 --> 00:23:26,240
scheme

664
00:23:23,760 --> 00:23:26,879
that has a share size which nearly

665
00:23:26,240 --> 00:23:29,679
matches

666
00:23:26,880 --> 00:23:30,400
the lower bound of carpentry at all it

667
00:23:29,679 --> 00:23:33,440
has an

668
00:23:30,400 --> 00:23:34,720
efficient reconstruction procedure and

669
00:23:33,440 --> 00:23:37,840
it is secure against

670
00:23:34,720 --> 00:23:40,799
rushing adversaries so

671
00:23:37,840 --> 00:23:41,678
in this work we resolve this question in

672
00:23:40,799 --> 00:23:43,520
the positive

673
00:23:41,679 --> 00:23:44,799
by giving a construction of robust

674
00:23:43,520 --> 00:23:47,679
secret sharing

675
00:23:44,799 --> 00:23:49,440
when n is equal to 2t plus 1 and error 2

676
00:23:47,679 --> 00:23:51,520
to the minus lambda with security

677
00:23:49,440 --> 00:23:53,360
against rushing adversaries

678
00:23:51,520 --> 00:23:56,158
and the share size of our construction

679
00:23:53,360 --> 00:23:58,959
is only a small poly logarithmic factor

680
00:23:56,159 --> 00:23:59,600
away from the lower bond of carpentry at

681
00:23:58,960 --> 00:24:02,559
all

682
00:23:59,600 --> 00:24:04,399
so it nearly matches this lower bond

683
00:24:02,559 --> 00:24:06,080
furthermore it has an efficient

684
00:24:04,400 --> 00:24:08,480
reconstruction procedure

685
00:24:06,080 --> 00:24:09,120
and the reconstruction only involves two

686
00:24:08,480 --> 00:24:13,360
rounds of

687
00:24:09,120 --> 00:24:15,678
communication so i would like to

688
00:24:13,360 --> 00:24:18,000
conclude my talk with in comparison with

689
00:24:15,679 --> 00:24:20,400
the recent work of fair and new one

690
00:24:18,000 --> 00:24:21,279
that appeared in e-print so in a

691
00:24:20,400 --> 00:24:23,600
concurrent and

692
00:24:21,279 --> 00:24:24,720
independent work fair and yuan also gave

693
00:24:23,600 --> 00:24:26,639
a construction of

694
00:24:24,720 --> 00:24:27,919
robust secret sharing with a nearly

695
00:24:26,640 --> 00:24:29,760
optimal share size

696
00:24:27,919 --> 00:24:31,919
with security against rushing

697
00:24:29,760 --> 00:24:33,840
adversaries and with an efficient

698
00:24:31,919 --> 00:24:37,039
reconstruction procedure

699
00:24:33,840 --> 00:24:38,240
but when compared to our work there are

700
00:24:37,039 --> 00:24:40,080
some differences

701
00:24:38,240 --> 00:24:42,640
the first difference is that the share

702
00:24:40,080 --> 00:24:44,480
size in their work is slightly

703
00:24:42,640 --> 00:24:46,480
larger than the share size that we

704
00:24:44,480 --> 00:24:48,400
obtain further the

705
00:24:46,480 --> 00:24:50,080
the reconstruction procedure in their

706
00:24:48,400 --> 00:24:52,000
work requires five rounds of

707
00:24:50,080 --> 00:24:53,199
communication when compared to two

708
00:24:52,000 --> 00:24:55,919
rounds in our

709
00:24:53,200 --> 00:24:57,440
work and furthermore the techniques used

710
00:24:55,919 --> 00:25:00,880
in these two works are

711
00:24:57,440 --> 00:25:04,000
completely different so that's it

712
00:25:00,880 --> 00:25:04,000
thank you for your attention

713
00:25:06,000 --> 00:25:10,480
all right thanks uh we have time for

714
00:25:08,960 --> 00:25:11,440
questions if anyone wants to start

715
00:25:10,480 --> 00:25:14,159
writing in the chat

716
00:25:11,440 --> 00:25:16,240
um in the meantime i was wondering um so

717
00:25:14,159 --> 00:25:19,440
i noticed that this paper was about

718
00:25:16,240 --> 00:25:22,559
feasibility results would you consider

719
00:25:19,440 --> 00:25:23,520
any of these schemes you had a slide

720
00:25:22,559 --> 00:25:25,360
with many

721
00:25:23,520 --> 00:25:26,879
many comparable results do you consider

722
00:25:25,360 --> 00:25:30,479
any of them to be

723
00:25:26,880 --> 00:25:31,200
reasonably practical so i'm not very

724
00:25:30,480 --> 00:25:33,760
sure about

725
00:25:31,200 --> 00:25:34,320
the prior work but the the constants in

726
00:25:33,760 --> 00:25:37,520
our work

727
00:25:34,320 --> 00:25:38,799
are huge but we haven't tried optimizing

728
00:25:37,520 --> 00:25:41,200
the constant so it's uh

729
00:25:38,799 --> 00:25:42,639
open problem to try to get a concretely

730
00:25:41,200 --> 00:25:44,640
efficient construction of robust

731
00:25:42,640 --> 00:25:48,960
secretion

732
00:25:44,640 --> 00:25:48,960
that is also asymptotically optimal

733
00:25:49,600 --> 00:25:53,360
uh we have a question in the chat from

734
00:25:51,120 --> 00:25:54,559
juan garay he's asking about one round

735
00:25:53,360 --> 00:25:56,158
reconstruction

736
00:25:54,559 --> 00:25:58,158
i guess he's asking whether you think

737
00:25:56,159 --> 00:26:00,320
that's possible or not

738
00:25:58,159 --> 00:26:03,279
yeah so the rap and been on construction

739
00:26:00,320 --> 00:26:06,480
has a single round of reconstruction

740
00:26:03,279 --> 00:26:08,159
but it has a sub optimal share size

741
00:26:06,480 --> 00:26:09,679
so we don't know whether we can actually

742
00:26:08,159 --> 00:26:10,559
get a single round of reconstruction

743
00:26:09,679 --> 00:26:14,080
with

744
00:26:10,559 --> 00:26:15,440
an optimal share size that's an another

745
00:26:14,080 --> 00:26:17,600
open problem

746
00:26:15,440 --> 00:26:18,960
and there's no known uh impossibility

747
00:26:17,600 --> 00:26:24,080
the rules that there are no known

748
00:26:18,960 --> 00:26:26,880
impossibilities or barriers

749
00:26:24,080 --> 00:26:28,879
let me just check that i'm not missing

750
00:26:26,880 --> 00:26:31,760
any other questions here's one from

751
00:26:28,880 --> 00:26:33,600
eli how does this compare to works in

752
00:26:31,760 --> 00:26:36,158
the alternative model

753
00:26:33,600 --> 00:26:38,719
where the corruption threshold is like

754
00:26:36,159 --> 00:26:41,600
half minus delta

755
00:26:38,720 --> 00:26:43,760
oh so in those settings i think we can

756
00:26:41,600 --> 00:26:47,918
get a constant over it so we can get

757
00:26:43,760 --> 00:26:47,919
a share size of m plus order one

758
00:26:48,480 --> 00:26:53,279
where the corruption threshold is

759
00:26:50,799 --> 00:26:55,840
slightly uh there is a slack between the

760
00:26:53,279 --> 00:26:57,520
corruption threshold and the majority of

761
00:26:55,840 --> 00:27:00,399
the number of parties

762
00:26:57,520 --> 00:27:02,799
so in those setting the the the lower

763
00:27:00,400 --> 00:27:04,320
point of carpenter does not hold so

764
00:27:02,799 --> 00:27:06,720
we can actually get a share size which

765
00:27:04,320 --> 00:27:08,000
is n plus order one

766
00:27:06,720 --> 00:27:09,760
uh and can you also can you

767
00:27:08,000 --> 00:27:11,679
simultaneously get a one round

768
00:27:09,760 --> 00:27:14,960
reconstruction with all those

769
00:27:11,679 --> 00:27:16,080
other nice features this i'm not very

770
00:27:14,960 --> 00:27:18,840
sure

771
00:27:16,080 --> 00:27:20,639
it's probably true but i'm not pretty

772
00:27:18,840 --> 00:27:23,760
sure

773
00:27:20,640 --> 00:27:26,640
okay great um i'm not seeing

774
00:27:23,760 --> 00:27:28,240
any further questions uh thanks akshay

775
00:27:26,640 --> 00:27:30,720
um

776
00:27:28,240 --> 00:27:31,679
the the next we'll get ready for the

777
00:27:30,720 --> 00:27:34,799
next talk

778
00:27:31,679 --> 00:27:36,159
uh which has a large number of authors

779
00:27:34,799 --> 00:27:38,559
so as i'm reading off the list of

780
00:27:36,159 --> 00:27:40,399
authors maybe the speaker can

781
00:27:38,559 --> 00:27:42,720
start sharing their screen uh the next

782
00:27:40,399 --> 00:27:44,239
talk is multi-party generation of an rsa

783
00:27:42,720 --> 00:27:47,360
modulus by megan chen

784
00:27:44,240 --> 00:27:49,840
ron cohen jack darner uh yashvant

785
00:27:47,360 --> 00:27:49,840
kundi

786
00:27:51,039 --> 00:27:54,559
and it looks like uh we're ready with

787
00:27:53,200 --> 00:27:58,000
yash month ready to present

788
00:27:54,559 --> 00:28:00,559
go ahead yeah thanks for the intro um

789
00:27:58,000 --> 00:28:02,799
i'm yash i'll be talking about multiple

790
00:28:00,559 --> 00:28:04,399
degeneration of analysis modulus

791
00:28:02,799 --> 00:28:05,840
this is joint work with all of these

792
00:28:04,399 --> 00:28:07,520
wonderful people and

793
00:28:05,840 --> 00:28:09,760
i should thank jack turner especially

794
00:28:07,520 --> 00:28:11,520
for the slides

795
00:28:09,760 --> 00:28:13,919
right so in this work we construct a

796
00:28:11,520 --> 00:28:15,039
multi-party protocol to sample an rsa

797
00:28:13,919 --> 00:28:16,960
modulus with

798
00:28:15,039 --> 00:28:19,200
malicious security against a dishonest

799
00:28:16,960 --> 00:28:20,799
majority of corruptions

800
00:28:19,200 --> 00:28:22,640
and this is the first such end party

801
00:28:20,799 --> 00:28:23,200
protocol using only genetic tools such

802
00:28:22,640 --> 00:28:26,480
as ot

803
00:28:23,200 --> 00:28:27,679
and the factoring assumption also as is

804
00:28:26,480 --> 00:28:29,520
the first to achieve

805
00:28:27,679 --> 00:28:32,720
cubic communication complexity and the

806
00:28:29,520 --> 00:28:35,200
length of the modulus that it produces

807
00:28:32,720 --> 00:28:36,000
and so why are rsa moduli interesting

808
00:28:35,200 --> 00:28:38,320
specifically

809
00:28:36,000 --> 00:28:39,039
in the context of sampling them in a pc

810
00:28:38,320 --> 00:28:40,960
well

811
00:28:39,039 --> 00:28:42,720
they're useful for traditional crypto

812
00:28:40,960 --> 00:28:45,520
applications such as

813
00:28:42,720 --> 00:28:47,520
signatures and encryption and fancier

814
00:28:45,520 --> 00:28:48,559
things such as accumulators verified by

815
00:28:47,520 --> 00:28:51,279
delay functions

816
00:28:48,559 --> 00:28:52,879
zk snarks among others and of these

817
00:28:51,279 --> 00:28:54,559
applications many of these works are

818
00:28:52,880 --> 00:28:57,679
quite recent and they use

819
00:28:54,559 --> 00:28:59,520
an rsa modulus in the as a trusted setup

820
00:28:57,679 --> 00:29:01,360
so it's useful to have an mpc protocol

821
00:28:59,520 --> 00:29:02,080
to sample an rsa modulus so that we can

822
00:29:01,360 --> 00:29:03,760
have

823
00:29:02,080 --> 00:29:06,639
some distribution of this trust in

824
00:29:03,760 --> 00:29:06,640
creating the setup

825
00:29:06,799 --> 00:29:12,080
so to see why um sampling and now the

826
00:29:10,080 --> 00:29:14,240
same modulus in an npc is

827
00:29:12,080 --> 00:29:16,240
challenging it's instructive to look at

828
00:29:14,240 --> 00:29:18,640
the single party or the local

829
00:29:16,240 --> 00:29:21,440
canonical sampling algorithm first we

830
00:29:18,640 --> 00:29:23,919
start by picking a random k bit number p

831
00:29:21,440 --> 00:29:25,600
then we test primality of p and if it's

832
00:29:23,919 --> 00:29:27,200
not a prime we start again and we keep

833
00:29:25,600 --> 00:29:29,360
going until we get a prime

834
00:29:27,200 --> 00:29:31,520
we sample q in the same way and then we

835
00:29:29,360 --> 00:29:34,959
output the product of p and q that's n

836
00:29:31,520 --> 00:29:37,679
and that's what i'll say modulus

837
00:29:34,960 --> 00:29:39,279
over here primarily testing is done by

838
00:29:37,679 --> 00:29:40,960
the miller rabbin test which involves

839
00:29:39,279 --> 00:29:43,039
taking a random base to the and raising

840
00:29:40,960 --> 00:29:44,559
it to the power b minus one mod p

841
00:29:43,039 --> 00:29:46,640
and this is quite challenging to do in

842
00:29:44,559 --> 00:29:51,360
an npc because you had to keep p

843
00:29:46,640 --> 00:29:53,440
secret this problem has a long history

844
00:29:51,360 --> 00:29:56,000
starting with the work of bernay and

845
00:29:53,440 --> 00:29:58,880
franklin in 97

846
00:29:56,000 --> 00:30:00,399
and our work is more usefully examined

847
00:29:58,880 --> 00:30:01,120
in the context of the state of the art

848
00:30:00,399 --> 00:30:03,039
which is

849
00:30:01,120 --> 00:30:06,399
given by hazai and others and fredriksen

850
00:30:03,039 --> 00:30:07,919
and others from a few years ago

851
00:30:06,399 --> 00:30:09,760
so given the state of the art the

852
00:30:07,919 --> 00:30:12,320
following problem remains open

853
00:30:09,760 --> 00:30:14,720
uh we would like an n party protocol

854
00:30:12,320 --> 00:30:15,840
with security against n9 malicious

855
00:30:14,720 --> 00:30:18,000
corruptions

856
00:30:15,840 --> 00:30:20,480
without using specific tools such as

857
00:30:18,000 --> 00:30:22,000
homomorphic encryption which would imply

858
00:30:20,480 --> 00:30:24,880
which would need specific assumptions

859
00:30:22,000 --> 00:30:26,960
like dcr or ddh in the past

860
00:30:24,880 --> 00:30:28,480
and we don't want to have to prove uh

861
00:30:26,960 --> 00:30:29,919
statements in zero knowledge about

862
00:30:28,480 --> 00:30:31,840
crypto like we don't want to prove

863
00:30:29,919 --> 00:30:34,159
cryptographic statements

864
00:30:31,840 --> 00:30:35,918
and additionally recent work has in the

865
00:30:34,159 --> 00:30:38,000
interest of efficiency made a number of

866
00:30:35,919 --> 00:30:39,279
compromises like for instance uh

867
00:30:38,000 --> 00:30:41,520
allowing extra leakage

868
00:30:39,279 --> 00:30:42,640
on the private components of the modulus

869
00:30:41,520 --> 00:30:46,080
the blinds

870
00:30:42,640 --> 00:30:48,240
um and so and covert about uh

871
00:30:46,080 --> 00:30:49,678
techniques specifically uh the work of

872
00:30:48,240 --> 00:30:51,600
fedex and others allows

873
00:30:49,679 --> 00:30:53,679
the adversary to covertly abort the

874
00:30:51,600 --> 00:30:56,158
protocol without being detected

875
00:30:53,679 --> 00:30:57,279
and to fix this problem generically uh

876
00:30:56,159 --> 00:30:59,440
this needs

877
00:30:57,279 --> 00:31:00,720
like a fact a multiplicative factor on

878
00:30:59,440 --> 00:31:01,919
the security parameter

879
00:31:00,720 --> 00:31:03,600
or you have to keep repeating the

880
00:31:01,919 --> 00:31:04,159
protocol until you're sure that it's

881
00:31:03,600 --> 00:31:07,360
impossible

882
00:31:04,159 --> 00:31:09,360
it would have uh failed honestly

883
00:31:07,360 --> 00:31:11,279
right so all of it so this specific

884
00:31:09,360 --> 00:31:13,039
problem remains open

885
00:31:11,279 --> 00:31:15,279
and this is where our work comes in we

886
00:31:13,039 --> 00:31:16,879
achieve all of these nice things

887
00:31:15,279 --> 00:31:18,720
with the only additional assumption of

888
00:31:16,880 --> 00:31:21,039
factoring specifically the assumption

889
00:31:18,720 --> 00:31:22,799
that factoring moduli produced by the

890
00:31:21,039 --> 00:31:24,559
underlying sampling algorithm is hard

891
00:31:22,799 --> 00:31:26,879
and this is really not really

892
00:31:24,559 --> 00:31:28,240
this is not really an overhead because

893
00:31:26,880 --> 00:31:30,399
without this assumption the whole

894
00:31:28,240 --> 00:31:32,159
exercise would be mood

895
00:31:30,399 --> 00:31:34,320
additionally our protocol is very

896
00:31:32,159 --> 00:31:36,799
modular uh

897
00:31:34,320 --> 00:31:38,720
and this allows for a very simple

898
00:31:36,799 --> 00:31:40,399
analysis both for security as well as

899
00:31:38,720 --> 00:31:42,559
efficiency

900
00:31:40,399 --> 00:31:43,760
and we improve substantially on the

901
00:31:42,559 --> 00:31:45,678
state-of-the-art when it comes to

902
00:31:43,760 --> 00:31:48,399
communication costs

903
00:31:45,679 --> 00:31:51,120
um like i said earlier cubic in the size

904
00:31:48,399 --> 00:31:51,120
of the modulus

905
00:31:51,519 --> 00:31:56,240
so a quick overview of our protocol is

906
00:31:53,760 --> 00:31:59,519
as follows we begin by sampling p and q

907
00:31:56,240 --> 00:32:02,000
as integer shells then we compute that

908
00:31:59,519 --> 00:32:04,240
product securely that's n

909
00:32:02,000 --> 00:32:05,840
then we do a binomiality test on n or

910
00:32:04,240 --> 00:32:07,679
this is a technique introduced by bony

911
00:32:05,840 --> 00:32:09,360
and franklin where we test bipolarity of

912
00:32:07,679 --> 00:32:11,840
the product of b and q rather than the

913
00:32:09,360 --> 00:32:13,678
primality individually

914
00:32:11,840 --> 00:32:15,678
then we do a retroactive consistency

915
00:32:13,679 --> 00:32:16,240
check which basically just involves

916
00:32:15,679 --> 00:32:19,200
checking

917
00:32:16,240 --> 00:32:20,320
an algebraic predicate uh to sort of tie

918
00:32:19,200 --> 00:32:22,880
everything together and make sure

919
00:32:20,320 --> 00:32:24,720
everyone behaved honestly

920
00:32:22,880 --> 00:32:26,640
this approach is largely shared by

921
00:32:24,720 --> 00:32:29,919
previous works so

922
00:32:26,640 --> 00:32:31,679
to see where our work sort of uh

923
00:32:29,919 --> 00:32:33,760
stands up but we use the chinese

924
00:32:31,679 --> 00:32:34,880
remainder chinese omega theorem for

925
00:32:33,760 --> 00:32:37,039
efficiency

926
00:32:34,880 --> 00:32:38,799
uh this lets us get the saving speed of

927
00:32:37,039 --> 00:32:40,320
od based trial division such as the

928
00:32:38,799 --> 00:32:41,760
inherently two-party protocol the

929
00:32:40,320 --> 00:32:44,480
frendrickson and others but

930
00:32:41,760 --> 00:32:45,120
also this plugs the leakage and at the

931
00:32:44,480 --> 00:32:46,799
same time

932
00:32:45,120 --> 00:32:48,639
doing secure multiplication is a lot

933
00:32:46,799 --> 00:32:50,639
cheaper using both enough because we're

934
00:32:48,640 --> 00:32:52,559
going to operate over small fields

935
00:32:50,640 --> 00:32:54,159
and ot based multiplication especially

936
00:32:52,559 --> 00:32:55,760
over small fields is a lot cheaper than

937
00:32:54,159 --> 00:32:57,600
doing an equivalent multiplication in a

938
00:32:55,760 --> 00:32:59,760
larger field

939
00:32:57,600 --> 00:33:00,719
uh additionally this allows us to do a

940
00:32:59,760 --> 00:33:04,640
component-wise

941
00:33:00,720 --> 00:33:06,799
consistency check to provide uh plug the

942
00:33:04,640 --> 00:33:09,120
covert denial of service attack that i

943
00:33:06,799 --> 00:33:11,279
mentioned earlier

944
00:33:09,120 --> 00:33:12,239
and so uh these two see the longer talk

945
00:33:11,279 --> 00:33:14,399
for more details

946
00:33:12,240 --> 00:33:16,720
uh there are plenty of subtle issues

947
00:33:14,399 --> 00:33:19,840
that come up in this context and we have

948
00:33:16,720 --> 00:33:21,919
new techniques to surmount them uh also

949
00:33:19,840 --> 00:33:24,240
there's a component-wise analysis

950
00:33:21,919 --> 00:33:25,120
of all the costs and security and

951
00:33:24,240 --> 00:33:27,279
whatnot

952
00:33:25,120 --> 00:33:28,879
and the full talk is given by jack in

953
00:33:27,279 --> 00:33:30,480
all of his glorious maintenance hair so

954
00:33:28,880 --> 00:33:31,919
that's worth watching

955
00:33:30,480 --> 00:33:34,799
thanks for your attention i'll please

956
00:33:31,919 --> 00:33:34,799
find out people online

957
00:33:35,039 --> 00:33:39,120
great thank you so um any questions you

958
00:33:38,799 --> 00:33:40,879
can

959
00:33:39,120 --> 00:33:42,239
put them in the chat in the meanwhile

960
00:33:40,880 --> 00:33:43,519
i'll just ask you a quick question

961
00:33:42,240 --> 00:33:45,679
uh you talked about generating the

962
00:33:43,519 --> 00:33:46,960
modulus uh but i didn't

963
00:33:45,679 --> 00:33:48,640
hear you mention anything about

964
00:33:46,960 --> 00:33:49,919
generating like rsa parameters like the

965
00:33:48,640 --> 00:33:51,360
decryption exponent

966
00:33:49,919 --> 00:33:54,159
is it very difficult to extend your

967
00:33:51,360 --> 00:33:56,479
protocol to to do that

968
00:33:54,159 --> 00:33:58,159
no that's not particularly difficult uh

969
00:33:56,480 --> 00:34:01,919
we don't describe the protocol

970
00:33:58,159 --> 00:34:01,919
to achieve that but it's not hard

971
00:34:02,320 --> 00:34:05,439
and you have i'm looking to see if there

972
00:34:05,039 --> 00:34:06,879
are

973
00:34:05,440 --> 00:34:08,960
so here's a question from somebody else

974
00:34:06,880 --> 00:34:10,480
uh can you generate um or can you extend

975
00:34:08,960 --> 00:34:13,839
your techniques to generate a modulus

976
00:34:10,480 --> 00:34:13,839
with more than two prime factors

977
00:34:15,040 --> 00:34:18,320
uh with more than two prime factors i

978
00:34:16,800 --> 00:34:20,399
think that would need us to

979
00:34:18,320 --> 00:34:21,200
fundamentally change the like primality

980
00:34:20,399 --> 00:34:23,520
testing

981
00:34:21,199 --> 00:34:23,520
um

982
00:34:24,480 --> 00:34:31,918
i need to think about that but um

983
00:34:28,800 --> 00:34:34,879
i don't think it's trivia

984
00:34:31,918 --> 00:34:35,440
another question um do you see the your

985
00:34:34,879 --> 00:34:37,279
idea

986
00:34:35,440 --> 00:34:39,359
of using chinese remainder theorem to

987
00:34:37,280 --> 00:34:41,040
reduce multiplication in larger fields

988
00:34:39,359 --> 00:34:42,960
to smaller ones

989
00:34:41,040 --> 00:34:46,079
generalizing to other areas like perhaps

990
00:34:42,960 --> 00:34:46,079
beaver triple generation

991
00:34:47,440 --> 00:34:52,399
um certainly yeah um

992
00:34:50,879 --> 00:34:54,399
but like they'll look you'd have to work

993
00:34:52,399 --> 00:34:55,918
with caveats like you're emulating a

994
00:34:54,399 --> 00:34:58,078
multiplication in the ring

995
00:34:55,918 --> 00:35:00,400
like a specific thing that's modular

996
00:34:58,079 --> 00:35:01,680
like or the primordial modulus and i

997
00:35:00,400 --> 00:35:03,839
guess you'd have to find ways to work on

998
00:35:01,680 --> 00:35:03,839
that

999
00:35:05,839 --> 00:35:10,240
and i'm curious also did you did you

1000
00:35:08,960 --> 00:35:11,839
guys implement the protocol

1001
00:35:10,240 --> 00:35:14,479
or do you have an estimate of how on how

1002
00:35:11,839 --> 00:35:17,680
long it would actually take to run

1003
00:35:14,480 --> 00:35:18,720
um we have a detailed analysis of

1004
00:35:17,680 --> 00:35:21,759
communication

1005
00:35:18,720 --> 00:35:23,919
in our um in the paper like we have

1006
00:35:21,760 --> 00:35:25,119
a cost estimate uh the primitives aren't

1007
00:35:23,920 --> 00:35:27,520
particularly complex

1008
00:35:25,119 --> 00:35:28,240
or it should be we didn't implement it

1009
00:35:27,520 --> 00:35:31,680
ourselves

1010
00:35:28,240 --> 00:35:34,959
um certainly interesting for future work

1011
00:35:31,680 --> 00:35:36,720
um we don't have an estimate on how

1012
00:35:34,960 --> 00:35:39,040
sorry i was going to just say if you

1013
00:35:36,720 --> 00:35:42,319
have an order of magnitude you know

1014
00:35:39,040 --> 00:35:45,839
seconds minutes 10 minutes

1015
00:35:42,320 --> 00:35:45,839
uh probably a minute

1016
00:35:46,000 --> 00:35:51,440
okay so i don't see

1017
00:35:49,520 --> 00:35:52,800
any further questions so maybe we can

1018
00:35:51,440 --> 00:35:59,839
move on

1019
00:35:52,800 --> 00:35:59,839
to the final talk

1020
00:36:03,599 --> 00:36:08,079
so the last talk of the session uh is on

1021
00:36:06,320 --> 00:36:08,800
reverse firewalls for actively secure

1022
00:36:08,079 --> 00:36:12,079
mpc

1023
00:36:08,800 --> 00:36:14,640
which will be which is a joint work um

1024
00:36:12,079 --> 00:36:15,520
with uh super deep chakraborty stefan

1025
00:36:14,640 --> 00:36:18,319
zambowski

1026
00:36:15,520 --> 00:36:20,800
and jesper nelson and superdeep will

1027
00:36:18,320 --> 00:36:20,800
give the talk

1028
00:36:24,079 --> 00:36:29,119
we don't hear you if you're speaking uh

1029
00:36:26,400 --> 00:36:29,119
sorry yeah

1030
00:36:29,440 --> 00:36:35,359
uh can you see my slides uh yeah

1031
00:36:33,040 --> 00:36:36,960
we're fine okay great uh so welcome to

1032
00:36:35,359 --> 00:36:38,720
the last stop of crypto

1033
00:36:36,960 --> 00:36:40,000
so i'll be talking about reverse fire

1034
00:36:38,720 --> 00:36:42,160
was for actively secure

1035
00:36:40,000 --> 00:36:45,520
mpc this is a joint work with stefan

1036
00:36:42,160 --> 00:36:47,598
jambowski and esper boos nielsen

1037
00:36:45,520 --> 00:36:48,640
so the starting point of my talk is that

1038
00:36:47,599 --> 00:36:51,119
should alice

1039
00:36:48,640 --> 00:36:53,118
trust her computer the computer seems

1040
00:36:51,119 --> 00:36:54,480
nice and innocent but one can never be

1041
00:36:53,119 --> 00:36:56,240
too careful

1042
00:36:54,480 --> 00:36:57,920
and in practice there has been

1043
00:36:56,240 --> 00:36:59,439
apparently accidental bugs in

1044
00:36:57,920 --> 00:37:01,599
cryptographic software

1045
00:36:59,440 --> 00:37:02,720
as all of us are aware starting with

1046
00:37:01,599 --> 00:37:05,359
poodle

1047
00:37:02,720 --> 00:37:06,640
the heart bleed apple's go to failure

1048
00:37:05,359 --> 00:37:08,880
debian

1049
00:37:06,640 --> 00:37:10,480
logjam attacks and so on and so forth

1050
00:37:08,880 --> 00:37:12,560
and while these bugs seems

1051
00:37:10,480 --> 00:37:14,000
apparently accidental the state of the

1052
00:37:12,560 --> 00:37:16,320
affairs is rather

1053
00:37:14,000 --> 00:37:18,320
unfortunate because there has been cases

1054
00:37:16,320 --> 00:37:20,240
of widespread deliberate corruption of

1055
00:37:18,320 --> 00:37:23,760
hardware and software

1056
00:37:20,240 --> 00:37:24,560
like as um evidenced by the snowden

1057
00:37:23,760 --> 00:37:26,400
revolution

1058
00:37:24,560 --> 00:37:27,920
and more recently by the chinese chip

1059
00:37:26,400 --> 00:37:29,920
hack

1060
00:37:27,920 --> 00:37:32,160
so this presents our other sorry state

1061
00:37:29,920 --> 00:37:35,359
of affairs which says that our

1062
00:37:32,160 --> 00:37:38,078
standards and tools can be subverted

1063
00:37:35,359 --> 00:37:39,598
so this brings me to the area of

1064
00:37:38,079 --> 00:37:42,240
cryptography which is

1065
00:37:39,599 --> 00:37:43,040
post snowden cryptography which asks

1066
00:37:42,240 --> 00:37:46,160
this meaningly

1067
00:37:43,040 --> 00:37:48,079
absurd question can you do crypto on

1068
00:37:46,160 --> 00:37:49,598
tampered computers

1069
00:37:48,079 --> 00:37:51,599
in particular can you achieve any

1070
00:37:49,599 --> 00:37:52,400
meaningful security for cryptographic

1071
00:37:51,599 --> 00:37:54,560
protocols

1072
00:37:52,400 --> 00:37:56,000
in the presence of an adversary that may

1073
00:37:54,560 --> 00:38:00,000
arbitrarily tamper

1074
00:37:56,000 --> 00:38:01,920
with the victims machine to this end

1075
00:38:00,000 --> 00:38:03,440
the notion of cryptographic reverse

1076
00:38:01,920 --> 00:38:05,119
firewall was

1077
00:38:03,440 --> 00:38:08,480
introduced by miranov and stephen

1078
00:38:05,119 --> 00:38:11,040
davidavids from eurocrypt 2015

1079
00:38:08,480 --> 00:38:13,200
so a crf you can think of it as an

1080
00:38:11,040 --> 00:38:15,759
active intermediary or a router

1081
00:38:13,200 --> 00:38:17,200
that sits between alice's network and

1082
00:38:15,760 --> 00:38:20,480
the outside internet

1083
00:38:17,200 --> 00:38:22,960
represented by bob here and

1084
00:38:20,480 --> 00:38:25,200
the firewall sees the incoming and the

1085
00:38:22,960 --> 00:38:28,000
outgoing messages of alice

1086
00:38:25,200 --> 00:38:29,759
and it modifies them so in particular m1

1087
00:38:28,000 --> 00:38:31,839
is small to m1 tilde

1088
00:38:29,760 --> 00:38:34,160
the message from bob is modified to m2

1089
00:38:31,839 --> 00:38:36,320
tilde and so on

1090
00:38:34,160 --> 00:38:37,920
and one important requirement is that it

1091
00:38:36,320 --> 00:38:38,640
should be transparent to legitimate

1092
00:38:37,920 --> 00:38:40,640
traffic

1093
00:38:38,640 --> 00:38:42,720
so it's not the case that alice in the

1094
00:38:40,640 --> 00:38:45,040
firewall is exchanging 20 messages back

1095
00:38:42,720 --> 00:38:47,040
and forth

1096
00:38:45,040 --> 00:38:50,000
and the crucial point is that the

1097
00:38:47,040 --> 00:38:51,920
firewall shares no secret with arrows

1098
00:38:50,000 --> 00:38:54,240
so in particular we are not delegating

1099
00:38:51,920 --> 00:38:56,880
the trust to a third party

1100
00:38:54,240 --> 00:38:57,359
rather the firewall is a useful third

1101
00:38:56,880 --> 00:38:59,920
party

1102
00:38:57,359 --> 00:39:01,440
and in particular we don't place any

1103
00:38:59,920 --> 00:39:04,000
more trust in the firewall

1104
00:39:01,440 --> 00:39:07,440
than in the communication channel

1105
00:39:04,000 --> 00:39:08,800
however the firewall can be stateful

1106
00:39:07,440 --> 00:39:10,960
so let's see what are the properties

1107
00:39:08,800 --> 00:39:13,119
that one would want from such a firewall

1108
00:39:10,960 --> 00:39:14,000
first the most obvious is functionality

1109
00:39:13,119 --> 00:39:15,280
preserving

1110
00:39:14,000 --> 00:39:17,200
so for this suppose there is an

1111
00:39:15,280 --> 00:39:20,000
underlying classical protocol that

1112
00:39:17,200 --> 00:39:22,078
satisfies some functionality

1113
00:39:20,000 --> 00:39:24,320
in which alice and bob outputs y a and

1114
00:39:22,079 --> 00:39:25,440
yb say by exchanging a bunch of messages

1115
00:39:24,320 --> 00:39:27,119
back and forth

1116
00:39:25,440 --> 00:39:28,640
we want the firewall not to screw up

1117
00:39:27,119 --> 00:39:30,880
this functionality

1118
00:39:28,640 --> 00:39:32,078
so even the firewall protocol would

1119
00:39:30,880 --> 00:39:33,680
allow alice and bob

1120
00:39:32,079 --> 00:39:37,040
if they are honestly implemented to

1121
00:39:33,680 --> 00:39:38,799
output the same y a and yb

1122
00:39:37,040 --> 00:39:40,960
the second more important property is

1123
00:39:38,800 --> 00:39:42,320
that of security preservation

1124
00:39:40,960 --> 00:39:44,160
which says that suppose there is an

1125
00:39:42,320 --> 00:39:45,680
underlying classical protocol that comes

1126
00:39:44,160 --> 00:39:48,078
with some security requirement

1127
00:39:45,680 --> 00:39:49,680
modeled by some crazy game in which say

1128
00:39:48,079 --> 00:39:51,760
the adversary controls bob

1129
00:39:49,680 --> 00:39:53,919
and has oracle access to multiple copies

1130
00:39:51,760 --> 00:39:55,440
and of alice and still it's unable to

1131
00:39:53,920 --> 00:39:56,560
break the security properties of the

1132
00:39:55,440 --> 00:39:58,880
system

1133
00:39:56,560 --> 00:40:00,960
then the firewall protocol should

1134
00:39:58,880 --> 00:40:02,079
preserve the security of the protocol as

1135
00:40:00,960 --> 00:40:05,920
it is

1136
00:40:02,079 --> 00:40:09,359
but now alice can be corrupted

1137
00:40:05,920 --> 00:40:11,119
so in particular the adversary should

1138
00:40:09,359 --> 00:40:12,240
not be able to win in this firework

1139
00:40:11,119 --> 00:40:14,160
protocol as well

1140
00:40:12,240 --> 00:40:16,720
so we make a distinction between strong

1141
00:40:14,160 --> 00:40:19,598
versus weak security preservation

1142
00:40:16,720 --> 00:40:20,560
which loosely translates to the model of

1143
00:40:19,599 --> 00:40:23,200
corruption

1144
00:40:20,560 --> 00:40:23,759
so strong being the case where the

1145
00:40:23,200 --> 00:40:25,520
alice's

1146
00:40:23,760 --> 00:40:27,359
implementation can be any arbitrary

1147
00:40:25,520 --> 00:40:31,119
efficient corruption

1148
00:40:27,359 --> 00:40:33,920
and weak corruption means

1149
00:40:31,119 --> 00:40:35,280
the implementation might be any any

1150
00:40:33,920 --> 00:40:36,720
arbitrary corruption

1151
00:40:35,280 --> 00:40:39,359
as long as it does not break the

1152
00:40:36,720 --> 00:40:41,040
correctness of the protocol

1153
00:40:39,359 --> 00:40:42,880
and one point i want to stress is that

1154
00:40:41,040 --> 00:40:43,520
the protocol should be functional and

1155
00:40:42,880 --> 00:40:45,599
secure

1156
00:40:43,520 --> 00:40:47,119
without the reverse firewall when all

1157
00:40:45,599 --> 00:40:49,440
the parties are honest

1158
00:40:47,119 --> 00:40:52,240
so the protocols that are not functional

1159
00:40:49,440 --> 00:40:54,240
in the first place are not interesting

1160
00:40:52,240 --> 00:40:55,279
and the third property is exfiltration

1161
00:40:54,240 --> 00:40:56,640
resistance which

1162
00:40:55,280 --> 00:40:58,960
roughly says that a corrupted

1163
00:40:56,640 --> 00:41:00,400
implementation of alice cannot leak any

1164
00:40:58,960 --> 00:41:02,960
information to an attacker

1165
00:41:00,400 --> 00:41:03,920
via the firewall so this is modeled by

1166
00:41:02,960 --> 00:41:05,920
this game where

1167
00:41:03,920 --> 00:41:08,319
in one world alice's implementation is

1168
00:41:05,920 --> 00:41:09,599
tampered but we can now think of alice

1169
00:41:08,319 --> 00:41:12,079
as this joint party

1170
00:41:09,599 --> 00:41:13,760
with the firewall and in the second

1171
00:41:12,079 --> 00:41:14,720
world you have alice's honest

1172
00:41:13,760 --> 00:41:15,599
implementation

1173
00:41:14,720 --> 00:41:18,240
and these two words are

1174
00:41:15,599 --> 00:41:19,760
indistinguishable to a ppt adversary

1175
00:41:18,240 --> 00:41:21,359
and same as before we make the

1176
00:41:19,760 --> 00:41:23,920
distinction between strong

1177
00:41:21,359 --> 00:41:25,520
and weak exfiltration resistance when

1178
00:41:23,920 --> 00:41:26,720
bob is corrupted here we call it

1179
00:41:25,520 --> 00:41:28,640
security against

1180
00:41:26,720 --> 00:41:32,640
or exfiltration resistance against a pr

1181
00:41:28,640 --> 00:41:32,640
party versus an eavesdropper

1182
00:41:33,040 --> 00:41:36,160
so in the prior works on reverse

1183
00:41:34,880 --> 00:41:38,400
firewalls so

1184
00:41:36,160 --> 00:41:40,078
i won't read out the all the prior works

1185
00:41:38,400 --> 00:41:41,920
but essentially

1186
00:41:40,079 --> 00:41:43,359
the common theme is that all the prior

1187
00:41:41,920 --> 00:41:45,680
works are uh

1188
00:41:43,359 --> 00:41:47,520
catered to arbitrary two-party

1189
00:41:45,680 --> 00:41:49,200
functionalities and they achieve passive

1190
00:41:47,520 --> 00:41:52,400
security

1191
00:41:49,200 --> 00:41:54,160
they consider passive security and the

1192
00:41:52,400 --> 00:41:55,920
problem of whether you could do

1193
00:41:54,160 --> 00:41:57,839
active security and the multi-party

1194
00:41:55,920 --> 00:42:00,960
setting was left as an open problem and

1195
00:41:57,839 --> 00:42:03,759
this is what precisely we

1196
00:42:00,960 --> 00:42:04,960
address in this in our work so a brief

1197
00:42:03,760 --> 00:42:06,880
recap into uh

1198
00:42:04,960 --> 00:42:08,079
mpc here there is a bunch of parties

1199
00:42:06,880 --> 00:42:10,000
each with their respective

1200
00:42:08,079 --> 00:42:11,599
inputs they want to compute a joint

1201
00:42:10,000 --> 00:42:13,760
function of their inputs

1202
00:42:11,599 --> 00:42:16,319
and a subset of them can be corrupt so

1203
00:42:13,760 --> 00:42:18,319
we assume computational mpc so we assume

1204
00:42:16,319 --> 00:42:20,240
dishonest majority setting

1205
00:42:18,319 --> 00:42:21,520
and the security says that nothing other

1206
00:42:20,240 --> 00:42:23,279
than the output of the protocol should

1207
00:42:21,520 --> 00:42:25,920
be revealed which can be formalized by

1208
00:42:23,280 --> 00:42:28,000
the real versus ideal paradigm

1209
00:42:25,920 --> 00:42:29,280
so in the reverse firewall setting as

1210
00:42:28,000 --> 00:42:30,960
before

1211
00:42:29,280 --> 00:42:32,960
arbitrary subset of the parties can be

1212
00:42:30,960 --> 00:42:34,880
corrupted but now even

1213
00:42:32,960 --> 00:42:37,280
the rest of the honest parties can also

1214
00:42:34,880 --> 00:42:39,520
be corrupted albeit in a functionality

1215
00:42:37,280 --> 00:42:41,520
maintaining way

1216
00:42:39,520 --> 00:42:43,119
and we want that for all these corrupted

1217
00:42:41,520 --> 00:42:47,200
parties that are

1218
00:42:43,119 --> 00:42:48,880
whose implementation is tampered we um

1219
00:42:47,200 --> 00:42:51,279
we add a firewall on top of these

1220
00:42:48,880 --> 00:42:52,960
parties and the hope could be that

1221
00:42:51,280 --> 00:42:55,040
this firewall protocol preserves the

1222
00:42:52,960 --> 00:42:55,599
original security property of the mpc

1223
00:42:55,040 --> 00:42:58,640
protocol

1224
00:42:55,599 --> 00:43:00,400
when these parties were actually honest

1225
00:42:58,640 --> 00:43:03,118
an exfiltration resistance similarly

1226
00:43:00,400 --> 00:43:05,440
says that the corrupt implementation of

1227
00:43:03,119 --> 00:43:07,119
one party in this case say p3 cannot

1228
00:43:05,440 --> 00:43:09,680
leak its secret out

1229
00:43:07,119 --> 00:43:10,640
say its secret business plan to all

1230
00:43:09,680 --> 00:43:12,799
other parties

1231
00:43:10,640 --> 00:43:14,160
as long as it is the firewall sits on

1232
00:43:12,800 --> 00:43:16,079
top of the party

1233
00:43:14,160 --> 00:43:18,000
so in our paper we construct the first

1234
00:43:16,079 --> 00:43:19,200
actively secured mpc in the reverse

1235
00:43:18,000 --> 00:43:21,200
firewall setting

1236
00:43:19,200 --> 00:43:22,399
so we show a generic compiler that takes

1237
00:43:21,200 --> 00:43:25,520
any semi honest a

1238
00:43:22,400 --> 00:43:27,599
passively secured mpc and compile it

1239
00:43:25,520 --> 00:43:30,160
into an actively secure mpc

1240
00:43:27,599 --> 00:43:32,000
by following the gmw paradigm in fact we

1241
00:43:30,160 --> 00:43:33,759
show that the gmw compiler can be

1242
00:43:32,000 --> 00:43:37,440
upgraded to be made

1243
00:43:33,760 --> 00:43:39,040
rf compatible and the main key idea is

1244
00:43:37,440 --> 00:43:41,119
to how to construct a

1245
00:43:39,040 --> 00:43:42,960
multi-party coin tossing protocol in the

1246
00:43:41,119 --> 00:43:44,800
setting of reverse firewall

1247
00:43:42,960 --> 00:43:46,960
so we also show a generic composition

1248
00:43:44,800 --> 00:43:48,880
theorem and finally as a result of

1249
00:43:46,960 --> 00:43:50,640
independent interest we show that

1250
00:43:48,880 --> 00:43:52,400
a reverse firewall for the broadcast

1251
00:43:50,640 --> 00:43:55,680
model

1252
00:43:52,400 --> 00:43:56,160
so now uh very brief um two slides about

1253
00:43:55,680 --> 00:43:58,560
the

1254
00:43:56,160 --> 00:44:00,240
main technique for coin tossing so this

1255
00:43:58,560 --> 00:44:01,359
is the functionality where one party

1256
00:44:00,240 --> 00:44:03,118
would end up with a

1257
00:44:01,359 --> 00:44:04,880
random string and the other party would

1258
00:44:03,119 --> 00:44:06,160
get so i am talking about a two-party

1259
00:44:04,880 --> 00:44:08,480
setting here for simply

1260
00:44:06,160 --> 00:44:10,240
for simplification and the other party

1261
00:44:08,480 --> 00:44:11,680
would get a commitment to this random

1262
00:44:10,240 --> 00:44:14,959
string

1263
00:44:11,680 --> 00:44:19,200
and the protocol is just a classical

1264
00:44:14,960 --> 00:44:21,760
uh commit and proof paradigm oops sorry

1265
00:44:19,200 --> 00:44:23,200
so where party p1 sample some string s1

1266
00:44:21,760 --> 00:44:23,760
commits to it and proves in zero

1267
00:44:23,200 --> 00:44:25,839
knowledge

1268
00:44:23,760 --> 00:44:27,200
that the commitment is well formed party

1269
00:44:25,839 --> 00:44:30,319
p2 sends s2

1270
00:44:27,200 --> 00:44:31,839
and the final string output by p1 is the

1271
00:44:30,319 --> 00:44:33,680
xor of two strings

1272
00:44:31,839 --> 00:44:35,920
and p2 receives the commitment to the

1273
00:44:33,680 --> 00:44:37,118
string now in the setting of firewall

1274
00:44:35,920 --> 00:44:38,960
say p2 is corrupt

1275
00:44:37,119 --> 00:44:41,280
and p1 is corrupt in a functionality

1276
00:44:38,960 --> 00:44:42,960
maintaining way what can go wrong

1277
00:44:41,280 --> 00:44:44,400
first of all the commitment could act as

1278
00:44:42,960 --> 00:44:46,480
a subliminal channel

1279
00:44:44,400 --> 00:44:48,079
so p1 might commit to a bad string the

1280
00:44:46,480 --> 00:44:49,119
randomness in the commitment can be

1281
00:44:48,079 --> 00:44:51,280
leaky

1282
00:44:49,119 --> 00:44:52,960
and the final commitment proof pair can

1283
00:44:51,280 --> 00:44:54,720
also leak information about the final

1284
00:44:52,960 --> 00:44:56,720
string

1285
00:44:54,720 --> 00:44:58,000
for the other setting where p1 is

1286
00:44:56,720 --> 00:44:59,759
corrupt uh

1287
00:44:58,000 --> 00:45:01,520
in a maliciously and p2 is called in a

1288
00:44:59,760 --> 00:45:03,440
functionality maintaining way the string

1289
00:45:01,520 --> 00:45:04,720
s2 can directly act as a subliminal

1290
00:45:03,440 --> 00:45:07,839
channel

1291
00:45:04,720 --> 00:45:11,200
so the ideas how to get rid of

1292
00:45:07,839 --> 00:45:12,640
these problems are you running over on

1293
00:45:11,200 --> 00:45:14,240
time so maybe you want to just wrap up

1294
00:45:12,640 --> 00:45:15,040
quickly so there's a time for a question

1295
00:45:14,240 --> 00:45:17,520
at the end

1296
00:45:15,040 --> 00:45:19,359
okay sure so the idea is to first maul

1297
00:45:17,520 --> 00:45:20,160
the commitment to get a re-randomizable

1298
00:45:19,359 --> 00:45:21,759
commitment

1299
00:45:20,160 --> 00:45:23,440
however at this point the zero-knowledge

1300
00:45:21,760 --> 00:45:25,280
proof is not consistent

1301
00:45:23,440 --> 00:45:27,119
and in for technical reasons we want

1302
00:45:25,280 --> 00:45:28,880
this proof to be simulation extractable

1303
00:45:27,119 --> 00:45:30,880
which implies non-malleability so the

1304
00:45:28,880 --> 00:45:34,240
firewall cannot maul the proof

1305
00:45:30,880 --> 00:45:36,000
so we resolve this by

1306
00:45:34,240 --> 00:45:38,240
uh using an appropriate notion of

1307
00:45:36,000 --> 00:45:40,319
control malleable music proof system

1308
00:45:38,240 --> 00:45:42,000
so the open problems from this worker

1309
00:45:40,319 --> 00:45:44,400
can we construct more efficient and

1310
00:45:42,000 --> 00:45:46,400
round optimal mpc in this setting

1311
00:45:44,400 --> 00:45:47,680
can we construct adaptively secure mpc

1312
00:45:46,400 --> 00:45:50,319
in this setting

1313
00:45:47,680 --> 00:45:50,879
and since we use a new zig here can we

1314
00:45:50,319 --> 00:45:54,480
remove

1315
00:45:50,880 --> 00:45:55,280
the trusted setup um with this i would

1316
00:45:54,480 --> 00:45:57,680
like to

1317
00:45:55,280 --> 00:45:58,560
conclude my talk and i would encourage

1318
00:45:57,680 --> 00:46:00,560
to look up for

1319
00:45:58,560 --> 00:46:03,119
the full talk and the 18 version of our

1320
00:46:00,560 --> 00:46:05,520
paper for more details

1321
00:46:03,119 --> 00:46:05,520
thank you

1322
00:46:07,280 --> 00:46:10,640
okay great uh we may have time for some

1323
00:46:09,760 --> 00:46:14,720
questions if

1324
00:46:10,640 --> 00:46:16,720
someone can ask a quick one

1325
00:46:14,720 --> 00:46:19,359
one question that came to my mind was

1326
00:46:16,720 --> 00:46:22,160
whether is it feasible for the

1327
00:46:19,359 --> 00:46:23,440
this firewall device to sort of inform

1328
00:46:22,160 --> 00:46:25,839
the user that

1329
00:46:23,440 --> 00:46:27,599
hey i think you might be compromised in

1330
00:46:25,839 --> 00:46:29,359
some way

1331
00:46:27,599 --> 00:46:31,359
in addition to rubbing the protocol

1332
00:46:29,359 --> 00:46:34,480
messages but maybe giving some

1333
00:46:31,359 --> 00:46:36,640
feedback to the honest user so

1334
00:46:34,480 --> 00:46:39,359
in this model of firewall this is not

1335
00:46:36,640 --> 00:46:41,279
allowed because we want the firewall the

1336
00:46:39,359 --> 00:46:42,720
parties to be oblivious of the fireworks

1337
00:46:41,280 --> 00:46:43,839
so alice should not know that there's a

1338
00:46:42,720 --> 00:46:46,720
firewall sitting

1339
00:46:43,839 --> 00:46:47,119
and modifying the messages and that's

1340
00:46:46,720 --> 00:46:48,799
and

1341
00:46:47,119 --> 00:46:50,400
that's uh one of the crucial

1342
00:46:48,800 --> 00:46:53,680
requirements

1343
00:46:50,400 --> 00:46:53,680
so um yeah

1344
00:46:54,560 --> 00:46:58,319
i see and a quick question from uh ivan

1345
00:46:56,960 --> 00:47:00,720
viscanti

1346
00:46:58,319 --> 00:47:01,839
uh why use music instead of concurrent

1347
00:47:00,720 --> 00:47:04,640
non-malleable

1348
00:47:01,839 --> 00:47:04,960
zk proof of knowledge a great question

1349
00:47:04,640 --> 00:47:06,879
so

1350
00:47:04,960 --> 00:47:09,280
uh yeah this is a natural idea that use

1351
00:47:06,880 --> 00:47:11,599
an air control valuable interactive

1352
00:47:09,280 --> 00:47:13,200
zero knowledge proof so we tried it for

1353
00:47:11,599 --> 00:47:14,640
some time but it doesn't seem to

1354
00:47:13,200 --> 00:47:16,480
recompile with the protocol

1355
00:47:14,640 --> 00:47:18,240
so on a very high level the idea is that

1356
00:47:16,480 --> 00:47:21,280
the views of the parties

1357
00:47:18,240 --> 00:47:22,399
uh are very inconsistent in the final

1358
00:47:21,280 --> 00:47:23,599
mpc protocol

1359
00:47:22,400 --> 00:47:25,119
so even though you can have an

1360
00:47:23,599 --> 00:47:26,319
interactive zero knowledge proof that is

1361
00:47:25,119 --> 00:47:28,319
control malleable

1362
00:47:26,319 --> 00:47:29,599
it does not seem to go well with the

1363
00:47:28,319 --> 00:47:32,240
other components

1364
00:47:29,599 --> 00:47:34,880
of the protocol so that's a very high

1365
00:47:32,240 --> 00:47:38,319
level idea

1366
00:47:34,880 --> 00:47:40,319
okay thanks um so i think that's

1367
00:47:38,319 --> 00:47:41,440
that's about uh all the time we have for

1368
00:47:40,319 --> 00:47:43,920
the session uh

1369
00:47:41,440 --> 00:47:44,800
the last session of crypto uh i propose

1370
00:47:43,920 --> 00:47:46,800
that we uh

1371
00:47:44,800 --> 00:47:53,290
all unmute and give a round of applause

1372
00:47:46,800 --> 00:47:54,880
to the presenters for this session

1373
00:47:53,290 --> 00:47:57,200
[Applause]

1374
00:47:54,880 --> 00:47:58,559
as well as to the organization of all of

1375
00:47:57,200 --> 00:48:00,078
crypto and and the

1376
00:47:58,559 --> 00:48:01,760
zoom conferences as well that was really

1377
00:48:00,079 --> 00:48:04,640
great yeah

1378
00:48:01,760 --> 00:48:06,800
i'd like to just give a shout out to uh

1379
00:48:04,640 --> 00:48:09,118
kevin mccurley and kay mckelly who've

1380
00:48:06,800 --> 00:48:10,240
done so much technical work behind the

1381
00:48:09,119 --> 00:48:12,480
scenes getting all the virtual

1382
00:48:10,240 --> 00:48:13,359
conference stuff set up uh it's been a

1383
00:48:12,480 --> 00:48:15,359
pleasure

1384
00:48:13,359 --> 00:48:17,200
to attend uh at least from my

1385
00:48:15,359 --> 00:48:18,078
perspective and they put in a ton of

1386
00:48:17,200 --> 00:48:21,118
work

1387
00:48:18,079 --> 00:48:23,920
um and leo and leo as well

1388
00:48:21,119 --> 00:48:25,839
on that doing a great job behind behind

1389
00:48:23,920 --> 00:48:28,559
the scenes and in front of the scene

1390
00:48:25,839 --> 00:48:29,759
thank you thank you i had a couple of uh

1391
00:48:28,559 --> 00:48:33,680
brief announcements

1392
00:48:29,760 --> 00:48:35,280
um the chat that icr.org will remain up

1393
00:48:33,680 --> 00:48:38,399
for the foreseeable future

1394
00:48:35,280 --> 00:48:40,000
um it will be available for icr members

1395
00:48:38,400 --> 00:48:41,839
to interact through that

1396
00:48:40,000 --> 00:48:43,359
the social app we're using still needs

1397
00:48:41,839 --> 00:48:45,200
some work we know that it has a couple

1398
00:48:43,359 --> 00:48:46,960
of bugs in it and would like to receive

1399
00:48:45,200 --> 00:48:48,399
feedback on it if you have suggestions

1400
00:48:46,960 --> 00:48:51,280
for changes or

1401
00:48:48,400 --> 00:48:52,000
other bugs that you find the slides have

1402
00:48:51,280 --> 00:48:53,920
been

1403
00:48:52,000 --> 00:48:55,280
uploaded and linked from the program but

1404
00:48:53,920 --> 00:48:57,040
other speakers if they want to upload

1405
00:48:55,280 --> 00:48:58,640
their slides i can add those after the

1406
00:48:57,040 --> 00:49:01,599
fact i know a lot of speakers work on

1407
00:48:58,640 --> 00:49:04,319
their slides at the last minute

1408
00:49:01,599 --> 00:49:05,839
i think the the organization of virtual

1409
00:49:04,319 --> 00:49:07,920
conferences we're still working out

1410
00:49:05,839 --> 00:49:09,599
ourselves if people attend other virtual

1411
00:49:07,920 --> 00:49:11,599
conferences and observe

1412
00:49:09,599 --> 00:49:13,200
nice technologies or other experiences

1413
00:49:11,599 --> 00:49:15,200
they think we should adopt i'd like to

1414
00:49:13,200 --> 00:49:17,759
hear about them so send those to virtual

1415
00:49:15,200 --> 00:49:19,598
dash conferences at iacr.org

1416
00:49:17,760 --> 00:49:21,839
you know we're not the only source of

1417
00:49:19,599 --> 00:49:24,800
good ideas here that's for sure

1418
00:49:21,839 --> 00:49:26,799
and people should think about attending

1419
00:49:24,800 --> 00:49:27,599
ches and tcc in the future those are

1420
00:49:26,800 --> 00:49:29,040
going to be

1421
00:49:27,599 --> 00:49:30,800
virtual conferences you have the

1422
00:49:29,040 --> 00:49:32,240
opportunity to go hear about a topic you

1423
00:49:30,800 --> 00:49:33,839
might not ordinarily

1424
00:49:32,240 --> 00:49:36,000
think about or hear about you never know

1425
00:49:33,839 --> 00:49:37,839
what you'll learn from that experience

1426
00:49:36,000 --> 00:49:39,520
i just wanted to say a couple of uh

1427
00:49:37,839 --> 00:49:41,759
thank yous too that uh

1428
00:49:39,520 --> 00:49:44,400
it's been really good working with uh

1429
00:49:41,760 --> 00:49:47,680
kay and leo and uh

1430
00:49:44,400 --> 00:49:48,400
daniella and tom and the iacr emergency

1431
00:49:47,680 --> 00:49:50,078
committee

1432
00:49:48,400 --> 00:49:52,079
and also the moderators of all the

1433
00:49:50,079 --> 00:49:54,000
sessions but also the speakers who

1434
00:49:52,079 --> 00:49:55,599
uploaded their videos and did a good job

1435
00:49:54,000 --> 00:49:57,280
on putting together the whole thing it's

1436
00:49:55,599 --> 00:50:00,640
very much a community effort

1437
00:49:57,280 --> 00:50:03,200
and i'm very happy with the outcome and

1438
00:50:00,640 --> 00:50:05,920
uh with that i'd like to hand off to leo

1439
00:50:03,200 --> 00:50:08,078
if he has any final comments

1440
00:50:05,920 --> 00:50:09,839
um i've already said all the thanks and

1441
00:50:08,079 --> 00:50:12,000
i won't repeat them

1442
00:50:09,839 --> 00:50:13,279
although thanks again to everybody i

1443
00:50:12,000 --> 00:50:15,359
want to thank the audience

1444
00:50:13,280 --> 00:50:17,280
uh we managed to exceed the number of

1445
00:50:15,359 --> 00:50:21,520
registrations at eurocrypt by

1446
00:50:17,280 --> 00:50:23,520
two out of 1250 or so

1447
00:50:21,520 --> 00:50:25,040
despite the fact that one person asked

1448
00:50:23,520 --> 00:50:26,000
for a refund because we were not

1449
00:50:25,040 --> 00:50:29,279
allowing him to trade

1450
00:50:26,000 --> 00:50:33,359
cryptocurrency on his laptop

1451
00:50:29,280 --> 00:50:33,359
um so with that thanks everybody

1452
00:50:34,559 --> 00:50:38,480
thank you i'll just mention that there

1453
00:50:37,040 --> 00:50:40,640
is a social hour

1454
00:50:38,480 --> 00:50:42,400
that is uh labeled as a beer session and

1455
00:50:40,640 --> 00:50:45,040
i'm already way ahead of you guys

1456
00:50:42,400 --> 00:50:46,480
so uh bring your beer and come to the

1457
00:50:45,040 --> 00:50:48,880
beer session it's linked from the

1458
00:50:46,480 --> 00:50:48,880
program

1459
00:50:51,200 --> 00:50:53,439
did

