1
00:00:01,199 --> 00:00:04,560
hello my name is gabrielle de michieli

2
00:00:03,360 --> 00:00:06,480
and i'm going to be presenting some

3
00:00:04,560 --> 00:00:07,119
joint work with pierre godfrey and cecil

4
00:00:06,480 --> 00:00:08,960
pierro

5
00:00:07,120 --> 00:00:12,160
on discrete logarithm algorithms in

6
00:00:08,960 --> 00:00:14,000
pairing relevant finite fields

7
00:00:12,160 --> 00:00:16,320
so the discrete algorithm problem is one

8
00:00:14,000 --> 00:00:18,000
of the two major mathematical problems

9
00:00:16,320 --> 00:00:20,000
on which is based the security of

10
00:00:18,000 --> 00:00:22,720
asymmetric cryptography protocols

11
00:00:20,000 --> 00:00:24,560
the other one being factorization so the

12
00:00:22,720 --> 00:00:26,080
discrete logarithm problem can be found

13
00:00:24,560 --> 00:00:28,160
for key exchange protocols such as

14
00:00:26,080 --> 00:00:30,479
diffie-hellman elgamal or some signature

15
00:00:28,160 --> 00:00:34,559
protocol such as ecdsa dsa

16
00:00:30,480 --> 00:00:36,559
etc so the definition goes as follows

17
00:00:34,559 --> 00:00:38,718
given a finite cyclic group g a

18
00:00:36,559 --> 00:00:39,199
generator g of this group and a target

19
00:00:38,719 --> 00:00:41,440
element

20
00:00:39,200 --> 00:00:42,480
h of the group g we want to find the

21
00:00:41,440 --> 00:00:44,640
exponent x

22
00:00:42,480 --> 00:00:45,519
such that g to the x is equal to the

23
00:00:44,640 --> 00:00:50,000
target element

24
00:00:45,520 --> 00:00:50,800
h so one question that arises from this

25
00:00:50,000 --> 00:00:53,199
definition

26
00:00:50,800 --> 00:00:54,480
is what finite cyclic group g can i

27
00:00:53,199 --> 00:00:57,519
choose

28
00:00:54,480 --> 00:00:59,599
so for cryptographic purposes we want

29
00:00:57,520 --> 00:01:02,000
the group g to be chosen in such a way

30
00:00:59,600 --> 00:01:04,159
that dlp is as hard as possible

31
00:01:02,000 --> 00:01:06,400
so commonly used commonly used groups

32
00:01:04,159 --> 00:01:08,000
are prime finite fields finite fields or

33
00:01:06,400 --> 00:01:10,320
elliptic curves over finite fields for

34
00:01:08,000 --> 00:01:13,040
example

35
00:01:10,320 --> 00:01:14,639
dlp is used in protocols that are widely

36
00:01:13,040 --> 00:01:16,320
deployed such as for example the

37
00:01:14,640 --> 00:01:17,280
ephemeral diffie-hellman protocol as

38
00:01:16,320 --> 00:01:19,199
mentioned before

39
00:01:17,280 --> 00:01:21,920
which is present here for example in

40
00:01:19,200 --> 00:01:23,439
this tls handshake

41
00:01:21,920 --> 00:01:25,360
another interesting example which we're

42
00:01:23,439 --> 00:01:27,439
going to focus on is apparent-based

43
00:01:25,360 --> 00:01:29,360
protocols

44
00:01:27,439 --> 00:01:31,199
let me go back to definitions so what is

45
00:01:29,360 --> 00:01:33,280
a cryptographic pairing

46
00:01:31,200 --> 00:01:35,439
a pairing is a map between the product

47
00:01:33,280 --> 00:01:36,880
of two groups two additive groups into a

48
00:01:35,439 --> 00:01:41,279
target multiplicative group

49
00:01:36,880 --> 00:01:43,520
gt the map has a few properties that one

50
00:01:41,280 --> 00:01:44,479
needs to satisfy so first it has to be

51
00:01:43,520 --> 00:01:46,960
billionaire

52
00:01:44,479 --> 00:01:48,720
non-degenerate and also for practicality

53
00:01:46,960 --> 00:01:51,360
reasons we want e to be efficiently

54
00:01:48,720 --> 00:01:51,360
computable

55
00:01:51,920 --> 00:01:55,200
in cryptography the groups that are

56
00:01:53,680 --> 00:01:57,920
often chosen for bearings

57
00:01:55,200 --> 00:01:59,680
are g1 and g2 are often subgroups of

58
00:01:57,920 --> 00:02:00,719
elliptic curves over prime fields or

59
00:01:59,680 --> 00:02:02,960
finite fields

60
00:02:00,719 --> 00:02:04,479
and the target group gt is often a

61
00:02:02,960 --> 00:02:08,318
subgroup of a finite field

62
00:02:04,479 --> 00:02:10,800
fpn pairing has been used a lot in

63
00:02:08,318 --> 00:02:11,839
older uh protocols and then more recent

64
00:02:10,800 --> 00:02:14,000
protocols

65
00:02:11,840 --> 00:02:15,040
uh such as dk snarks which is an

66
00:02:14,000 --> 00:02:18,319
applicable um

67
00:02:15,040 --> 00:02:20,400
use for blockchain zcash etc

68
00:02:18,319 --> 00:02:22,238
so it is an interesting example not only

69
00:02:20,400 --> 00:02:24,000
because it is used in many protocols

70
00:02:22,239 --> 00:02:25,760
but also because it uses the discrete

71
00:02:24,000 --> 00:02:28,800
logarithm problems on both elliptic

72
00:02:25,760 --> 00:02:31,120
curves and also on finite fields

73
00:02:28,800 --> 00:02:32,959
so one question that we try to answer in

74
00:02:31,120 --> 00:02:35,120
this paper that we look at in

75
00:02:32,959 --> 00:02:36,959
in-depth is how to construct a secure

76
00:02:35,120 --> 00:02:39,360
parent-based protocol

77
00:02:36,959 --> 00:02:41,360
and the simple the simple answer which

78
00:02:39,360 --> 00:02:42,480
turns out to be not so simple is to look

79
00:02:41,360 --> 00:02:45,599
at dlp

80
00:02:42,480 --> 00:02:48,959
algorithms on both the elliptical side

81
00:02:45,599 --> 00:02:48,959
and on the finite field side

82
00:02:49,040 --> 00:02:52,640
so let us start with the discrete

83
00:02:50,480 --> 00:02:54,720
logarithm problems on elliptic curves

84
00:02:52,640 --> 00:02:56,238
the best known algorithm is polar row

85
00:02:54,720 --> 00:02:57,760
which has a complexity and square root

86
00:02:56,239 --> 00:02:59,360
of the size of the subgroup that is

87
00:02:57,760 --> 00:03:02,319
being considered

88
00:02:59,360 --> 00:03:04,080
and not much is said on the slide

89
00:03:02,319 --> 00:03:07,119
because there has not been

90
00:03:04,080 --> 00:03:09,360
many major um

91
00:03:07,120 --> 00:03:10,640
gain in the complexity since a few

92
00:03:09,360 --> 00:03:14,720
decades

93
00:03:10,640 --> 00:03:14,720
regarding dlp on elliptic curves

94
00:03:15,440 --> 00:03:20,400
however on discrete on the finite field

95
00:03:18,400 --> 00:03:21,120
side the discrete logarithm algorithms

96
00:03:20,400 --> 00:03:23,519
have a lot

97
00:03:21,120 --> 00:03:24,400
evolved a lot in the past decades there

98
00:03:23,519 --> 00:03:26,879
are many of them

99
00:03:24,400 --> 00:03:28,640
and their complexities often depend on

100
00:03:26,879 --> 00:03:30,399
uh the relation that there exists

101
00:03:28,640 --> 00:03:32,559
between the characteristic p and the

102
00:03:30,400 --> 00:03:33,280
extension degree n of a finite field

103
00:03:32,560 --> 00:03:37,200
which

104
00:03:33,280 --> 00:03:37,200
we define as fpn throughout this talk

105
00:03:37,920 --> 00:03:41,920
so as mentioned before the complexity of

106
00:03:40,159 --> 00:03:44,798
many algorithms

107
00:03:41,920 --> 00:03:46,079
for dlp on finite fields depends on this

108
00:03:44,799 --> 00:03:49,840
relation between p

109
00:03:46,080 --> 00:03:50,720
and n and one useful way uh to express

110
00:03:49,840 --> 00:03:53,280
this relation

111
00:03:50,720 --> 00:03:53,920
is to use this l notation so this l

112
00:03:53,280 --> 00:03:56,560
notation

113
00:03:53,920 --> 00:03:57,760
is this um very ugly formula in the

114
00:03:56,560 --> 00:04:00,640
green box

115
00:03:57,760 --> 00:04:01,439
which uh depends on two parameter lp and

116
00:04:00,640 --> 00:04:04,319
c

117
00:04:01,439 --> 00:04:05,680
and it is defined as the exponential of

118
00:04:04,319 --> 00:04:08,319
some constant c

119
00:04:05,680 --> 00:04:08,959
so the second parameter is the c in

120
00:04:08,319 --> 00:04:12,238
front of

121
00:04:08,959 --> 00:04:15,120
a log p n raised to the power l p

122
00:04:12,239 --> 00:04:17,358
and the log log p n raised to the power

123
00:04:15,120 --> 00:04:18,959
1 minus l p

124
00:04:17,358 --> 00:04:20,638
so what is interesting regarding the

125
00:04:18,959 --> 00:04:21,440
complexities of these algorithms that

126
00:04:20,639 --> 00:04:24,880
are expressed

127
00:04:21,440 --> 00:04:25,840
using this lp and notation is that if

128
00:04:24,880 --> 00:04:28,400
one tends

129
00:04:25,840 --> 00:04:30,560
makes lp tend to 0 then this whole

130
00:04:28,400 --> 00:04:32,400
formula goes to some log of pn

131
00:04:30,560 --> 00:04:34,160
which corresponds to a polynomial time

132
00:04:32,400 --> 00:04:37,758
algorithm

133
00:04:34,160 --> 00:04:41,199
on the other hand if lp tends to 1

134
00:04:37,759 --> 00:04:43,600
then we end up with pn which corresponds

135
00:04:41,199 --> 00:04:45,840
to some exponential time algorithm

136
00:04:43,600 --> 00:04:46,720
so this lp that varies between zero and

137
00:04:45,840 --> 00:04:49,280
n

138
00:04:46,720 --> 00:04:50,560
defines uh allows us throughout this l

139
00:04:49,280 --> 00:04:52,719
notation to define

140
00:04:50,560 --> 00:04:54,479
uh what is called a sub exponential time

141
00:04:52,720 --> 00:04:57,680
algorithm a complexity

142
00:04:54,479 --> 00:05:00,000
which is not as bad as exponential but

143
00:04:57,680 --> 00:05:01,600
not as good as polynomial

144
00:05:00,000 --> 00:05:03,840
so all the complexities that we are

145
00:05:01,600 --> 00:05:04,639
going to see most complexities that

146
00:05:03,840 --> 00:05:06,400
we're going to see

147
00:05:04,639 --> 00:05:08,400
i should um be careful with the

148
00:05:06,400 --> 00:05:11,120
quasi-polynomial time algorithms

149
00:05:08,400 --> 00:05:11,758
are expressed using this l notation

150
00:05:11,120 --> 00:05:16,160
where this

151
00:05:11,759 --> 00:05:18,080
l is a constant between 0 and 1.

152
00:05:16,160 --> 00:05:20,720
the cell notation also allows us to

153
00:05:18,080 --> 00:05:24,000
define three families of finite fields

154
00:05:20,720 --> 00:05:27,440
where the characteristic p is expressed

155
00:05:24,000 --> 00:05:28,800
using again this l notation so depending

156
00:05:27,440 --> 00:05:31,280
on this relation between p and

157
00:05:28,800 --> 00:05:32,800
n we have finite fields that are said to

158
00:05:31,280 --> 00:05:34,479
be a small characteristic

159
00:05:32,800 --> 00:05:35,919
medium characteristic and large

160
00:05:34,479 --> 00:05:37,039
characteristic

161
00:05:35,919 --> 00:05:39,039
and what is interesting with the

162
00:05:37,039 --> 00:05:39,599
algorithms that solve the lpn finite

163
00:05:39,039 --> 00:05:42,240
field

164
00:05:39,600 --> 00:05:44,479
is that depending on the area the zones

165
00:05:42,240 --> 00:05:45,919
where uh the finite fields are

166
00:05:44,479 --> 00:05:48,080
these algorithms are going to be

167
00:05:45,919 --> 00:05:50,159
different and are not going to perform

168
00:05:48,080 --> 00:05:51,199
as well so the complexities is also are

169
00:05:50,160 --> 00:05:53,600
also going to vary

170
00:05:51,199 --> 00:05:55,759
depending on which area organs we're

171
00:05:53,600 --> 00:05:57,440
looking at

172
00:05:55,759 --> 00:05:58,960
so we are interested in a particular

173
00:05:57,440 --> 00:06:00,800
area which is

174
00:05:58,960 --> 00:06:03,039
what we call the first boundary case

175
00:06:00,800 --> 00:06:04,960
which is exactly the area between small

176
00:06:03,039 --> 00:06:06,240
and medium characteristic

177
00:06:04,960 --> 00:06:08,318
so it is the area where the

178
00:06:06,240 --> 00:06:09,199
characteristic p is defined to be

179
00:06:08,319 --> 00:06:12,560
exactly

180
00:06:09,199 --> 00:06:14,720
of the form lpn of one-third

181
00:06:12,560 --> 00:06:15,840
the cp which is the second constant in

182
00:06:14,720 --> 00:06:19,759
the notation

183
00:06:15,840 --> 00:06:22,799
is often ignored if not important

184
00:06:19,759 --> 00:06:24,560
depending on the context so why do we

185
00:06:22,800 --> 00:06:27,280
look at this area for

186
00:06:24,560 --> 00:06:29,199
two main reasons the first one is

187
00:06:27,280 --> 00:06:29,679
concerning pairings this is the area

188
00:06:29,199 --> 00:06:32,160
where

189
00:06:29,680 --> 00:06:33,759
parents take their values and since one

190
00:06:32,160 --> 00:06:35,199
of our goals is to look at the security

191
00:06:33,759 --> 00:06:36,240
of parent-based protocols then we're

192
00:06:35,199 --> 00:06:38,800
interested

193
00:06:36,240 --> 00:06:40,560
in of course the area that concerns

194
00:06:38,800 --> 00:06:42,240
parents

195
00:06:40,560 --> 00:06:45,280
the other reason why we look at this

196
00:06:42,240 --> 00:06:47,840
area is because it is

197
00:06:45,280 --> 00:06:48,638
an area where a lot of algorithms

198
00:06:47,840 --> 00:06:50,239
overlap

199
00:06:48,639 --> 00:06:51,680
we have algorithms coming from the small

200
00:06:50,240 --> 00:06:53,120
characteristic world

201
00:06:51,680 --> 00:06:54,960
from the medium character's

202
00:06:53,120 --> 00:06:56,080
characteristic world which both apply to

203
00:06:54,960 --> 00:06:59,039
the boundary case

204
00:06:56,080 --> 00:07:00,560
but it is not entirely clear which one

205
00:06:59,039 --> 00:07:02,800
performs best

206
00:07:00,560 --> 00:07:03,919
and which one are actually applicable up

207
00:07:02,800 --> 00:07:09,280
to where

208
00:07:03,919 --> 00:07:09,280
so this area uh required some studying

209
00:07:09,599 --> 00:07:13,199
so going back to the first reason the

210
00:07:11,360 --> 00:07:15,680
first the first motivation for

211
00:07:13,199 --> 00:07:16,560
uh studying this first boundary case we

212
00:07:15,680 --> 00:07:19,120
go back to

213
00:07:16,560 --> 00:07:20,400
um the security of pairings and in order

214
00:07:19,120 --> 00:07:22,160
to have a secure pairing

215
00:07:20,400 --> 00:07:23,520
we want the dlp so the discrete

216
00:07:22,160 --> 00:07:26,000
logarithm problem to be

217
00:07:23,520 --> 00:07:28,400
as hard on the elliptic curve side and

218
00:07:26,000 --> 00:07:30,880
on the finite field side

219
00:07:28,400 --> 00:07:32,560
so one can look at the known complexity

220
00:07:30,880 --> 00:07:33,440
of known complexities of these

221
00:07:32,560 --> 00:07:36,639
algorithms

222
00:07:33,440 --> 00:07:38,400
for the finite field size side and the

223
00:07:36,639 --> 00:07:40,160
first thing one can do is to ignore the

224
00:07:38,400 --> 00:07:41,758
small characteristic area because we

225
00:07:40,160 --> 00:07:42,639
know there are some quasi-polynomial

226
00:07:41,759 --> 00:07:44,960
algorithms with

227
00:07:42,639 --> 00:07:47,120
with much better complexities this

228
00:07:44,960 --> 00:07:48,719
leaves us with a lpn of one third

229
00:07:47,120 --> 00:07:52,400
complexity for all the

230
00:07:48,720 --> 00:07:54,080
other um known algorithms in medium and

231
00:07:52,400 --> 00:07:55,599
high characteristic

232
00:07:54,080 --> 00:07:57,599
then the idea is to balance these

233
00:07:55,599 --> 00:07:59,199
complexities and we know that for uh the

234
00:07:57,599 --> 00:08:00,000
elliptical side we have the square root

235
00:07:59,199 --> 00:08:03,280
of p

236
00:08:00,000 --> 00:08:05,440
um which comes from a polar rho so

237
00:08:03,280 --> 00:08:07,198
when we balance all these complexities

238
00:08:05,440 --> 00:08:09,440
we end up with a characteristic p

239
00:08:07,199 --> 00:08:11,360
of the form lpn of one third and this

240
00:08:09,440 --> 00:08:12,080
corresponds exactly to this boundary

241
00:08:11,360 --> 00:08:16,000
case

242
00:08:12,080 --> 00:08:16,000
which we discussed before

243
00:08:16,240 --> 00:08:20,720
so now what do we focus on on this paper

244
00:08:18,240 --> 00:08:21,120
well the idea is to study the behavior

245
00:08:20,720 --> 00:08:23,520
of

246
00:08:21,120 --> 00:08:24,160
all these algorithms that exist in this

247
00:08:23,520 --> 00:08:26,159
area

248
00:08:24,160 --> 00:08:27,680
in order to then draw some conclusions

249
00:08:26,160 --> 00:08:30,240
for the security of pairing based

250
00:08:27,680 --> 00:08:30,240
protocols

251
00:08:31,840 --> 00:08:35,679
so let us now discuss about these

252
00:08:33,599 --> 00:08:37,279
algorithms that exist to solve dlp and

253
00:08:35,679 --> 00:08:39,039
finite fields

254
00:08:37,279 --> 00:08:40,958
so most of them come from a family of

255
00:08:39,039 --> 00:08:43,760
algorithms called index calculus

256
00:08:40,958 --> 00:08:47,439
algorithms and they all follow the same

257
00:08:43,760 --> 00:08:50,720
steps we consider a finite field fpn

258
00:08:47,440 --> 00:08:53,680
and a factor basis f which consists of

259
00:08:50,720 --> 00:08:54,160
a small element so f is a small set of

260
00:08:53,680 --> 00:08:56,959
small

261
00:08:54,160 --> 00:08:58,399
elements the three main step of any

262
00:08:56,959 --> 00:09:01,040
index calculus algorithms

263
00:08:58,399 --> 00:09:01,440
are a relation collection step when we

264
00:09:01,040 --> 00:09:03,199
find

265
00:09:01,440 --> 00:09:04,800
relations between these elements of our

266
00:09:03,200 --> 00:09:07,120
factor basis

267
00:09:04,800 --> 00:09:08,479
a linear algebra step where we solve the

268
00:09:07,120 --> 00:09:11,120
linear equations

269
00:09:08,480 --> 00:09:12,240
so if we have enough of these relations

270
00:09:11,120 --> 00:09:14,720
that we've collected

271
00:09:12,240 --> 00:09:15,600
in step one we can form assistive

272
00:09:14,720 --> 00:09:17,360
equations

273
00:09:15,600 --> 00:09:18,800
where the unknowns are the discrete

274
00:09:17,360 --> 00:09:21,920
logarithms of

275
00:09:18,800 --> 00:09:22,319
the elements of our factor bases if we

276
00:09:21,920 --> 00:09:24,000
have

277
00:09:22,320 --> 00:09:26,399
enough equations as many as we have

278
00:09:24,000 --> 00:09:28,240
unknowns we can solve this system

279
00:09:26,399 --> 00:09:30,160
and then we end up with the discrete

280
00:09:28,240 --> 00:09:32,240
logarithms of all the elements of our

281
00:09:30,160 --> 00:09:33,920
factor basis

282
00:09:32,240 --> 00:09:35,760
this allows us to proceed to the last

283
00:09:33,920 --> 00:09:38,160
step which is the individual logarithm

284
00:09:35,760 --> 00:09:41,200
step or also called a descend step

285
00:09:38,160 --> 00:09:42,079
where the goal is to solve a dlp for a

286
00:09:41,200 --> 00:09:45,519
target element

287
00:09:42,080 --> 00:09:46,160
h and we do so by using uh the discrete

288
00:09:45,519 --> 00:09:48,800
elements

289
00:09:46,160 --> 00:09:50,800
of the elements of f the discrete

290
00:09:48,800 --> 00:09:52,880
logarithm sorry of the elements of f

291
00:09:50,800 --> 00:09:56,079
which were computed in the step above in

292
00:09:52,880 --> 00:09:56,080
the linear algebra step

293
00:09:57,440 --> 00:10:01,200
so one of the most well-known algorithms

294
00:09:59,279 --> 00:10:04,079
from this index calculus algorithms

295
00:10:01,200 --> 00:10:06,000
family is the number field sieve the

296
00:10:04,079 --> 00:10:06,880
number felt sieve is often illustrated

297
00:10:06,000 --> 00:10:08,800
by

298
00:10:06,880 --> 00:10:09,920
this commutative diagram that is given

299
00:10:08,800 --> 00:10:11,599
on the slide

300
00:10:09,920 --> 00:10:13,680
and it starts by choosing two

301
00:10:11,600 --> 00:10:16,079
polynomials f1 and f2

302
00:10:13,680 --> 00:10:17,199
in such a way that this diagram commutes

303
00:10:16,079 --> 00:10:19,120
so f1 and f2

304
00:10:17,200 --> 00:10:20,480
allows to define two number fields one

305
00:10:19,120 --> 00:10:21,839
on the left one on the right

306
00:10:20,480 --> 00:10:23,920
and this is where the name of the

307
00:10:21,839 --> 00:10:26,399
algorithm comes from

308
00:10:23,920 --> 00:10:27,279
and now the idea of this diagram is to

309
00:10:26,399 --> 00:10:31,120
uh

310
00:10:27,279 --> 00:10:33,920
define to compute some um relations

311
00:10:31,120 --> 00:10:34,560
where relations come from um algebraic

312
00:10:33,920 --> 00:10:37,839
norms

313
00:10:34,560 --> 00:10:40,560
that are uh factored in both

314
00:10:37,839 --> 00:10:42,079
number fields and if they are b smooth b

315
00:10:40,560 --> 00:10:45,439
smooth uh means that

316
00:10:42,079 --> 00:10:47,680
for a given constant b that is defined

317
00:10:45,440 --> 00:10:49,680
they factor into elements that are

318
00:10:47,680 --> 00:10:52,959
smaller than b

319
00:10:49,680 --> 00:10:55,199
so if there are b smooths on both sides

320
00:10:52,959 --> 00:10:56,560
then this results in a relation so we

321
00:10:55,200 --> 00:10:59,200
have an equality

322
00:10:56,560 --> 00:11:00,160
because the diagram commutes between

323
00:10:59,200 --> 00:11:03,760
this uh

324
00:11:00,160 --> 00:11:05,680
product of elements smaller than b

325
00:11:03,760 --> 00:11:07,200
this allows this creates what we call a

326
00:11:05,680 --> 00:11:09,040
relation and

327
00:11:07,200 --> 00:11:11,040
as mentioned before if we have enough of

328
00:11:09,040 --> 00:11:13,519
those then

329
00:11:11,040 --> 00:11:14,719
we can solve our system and have the

330
00:11:13,519 --> 00:11:17,440
discrete logarithms

331
00:11:14,720 --> 00:11:19,040
of the elements of the factor basis so

332
00:11:17,440 --> 00:11:21,200
all the technical details are in the

333
00:11:19,040 --> 00:11:22,719
paper or in general in the literature

334
00:11:21,200 --> 00:11:25,120
it has been a lot of work on the number

335
00:11:22,720 --> 00:11:28,399
field sieve and in particular

336
00:11:25,120 --> 00:11:31,040
throughout the years many variants have

337
00:11:28,399 --> 00:11:34,240
been put forward to improve on the

338
00:11:31,040 --> 00:11:36,480
complexity of the number field zip

339
00:11:34,240 --> 00:11:38,000
one of these variants is called the

340
00:11:36,480 --> 00:11:40,720
multiple nfs

341
00:11:38,000 --> 00:11:42,160
so the multiple nfs simply considers a

342
00:11:40,720 --> 00:11:46,240
more number fields than just

343
00:11:42,160 --> 00:11:48,959
two as in the classical nfs setup

344
00:11:46,240 --> 00:11:50,560
so we have again a commutative diagram

345
00:11:48,959 --> 00:11:51,359
where instead of considering two number

346
00:11:50,560 --> 00:11:54,560
fields we have

347
00:11:51,360 --> 00:11:56,880
v ones which are defined by polynomials

348
00:11:54,560 --> 00:11:58,479
again two are chosen at the very

349
00:11:56,880 --> 00:11:59,279
beginning of the algorithm just as an

350
00:11:58,480 --> 00:12:00,800
nfs

351
00:11:59,279 --> 00:12:03,040
and then the other ones are just linear

352
00:12:00,800 --> 00:12:05,599
combinations of these two initial

353
00:12:03,040 --> 00:12:08,480
polynomials

354
00:12:05,600 --> 00:12:10,720
so this results in some tradeoffs in the

355
00:12:08,480 --> 00:12:11,360
complexity but overall the complexity is

356
00:12:10,720 --> 00:12:14,399
lowered

357
00:12:11,360 --> 00:12:14,399
using mnfs

358
00:12:14,639 --> 00:12:18,720
another variant is the tower number felt

359
00:12:16,560 --> 00:12:21,599
sieve where again the setup is

360
00:12:18,720 --> 00:12:23,760
very similar to nfs the steps of the

361
00:12:21,600 --> 00:12:25,440
algorithms are the same as for any index

362
00:12:23,760 --> 00:12:26,160
calculus algorithm but here we just

363
00:12:25,440 --> 00:12:29,440
simply add

364
00:12:26,160 --> 00:12:30,000
extra algebraic structure again in order

365
00:12:29,440 --> 00:12:32,880
to

366
00:12:30,000 --> 00:12:35,120
lower the complexity of nfs of the

367
00:12:32,880 --> 00:12:38,079
variant

368
00:12:35,120 --> 00:12:39,200
another variant of nfs is the special uh

369
00:12:38,079 --> 00:12:42,079
number fill civ

370
00:12:39,200 --> 00:12:43,440
where here the uh difference comes from

371
00:12:42,079 --> 00:12:45,680
the characteristic p

372
00:12:43,440 --> 00:12:48,079
which is defined as the evaluation of a

373
00:12:45,680 --> 00:12:50,399
polynomial of some degree lambda with

374
00:12:48,079 --> 00:12:51,279
some small coefficients so in this case

375
00:12:50,399 --> 00:12:53,760
p has this

376
00:12:51,279 --> 00:12:55,279
special form uh which gives the name to

377
00:12:53,760 --> 00:12:57,920
the algorithm and again

378
00:12:55,279 --> 00:12:59,360
in this particular setup with p of this

379
00:12:57,920 --> 00:13:02,160
particular form

380
00:12:59,360 --> 00:13:03,839
then uh we have an algorithm which with

381
00:13:02,160 --> 00:13:07,839
a lower complexity than

382
00:13:03,839 --> 00:13:09,839
the classical nfs

383
00:13:07,839 --> 00:13:11,120
so how do we evaluate the complexity of

384
00:13:09,839 --> 00:13:14,639
nfs and also

385
00:13:11,120 --> 00:13:16,800
all of its variants so nfs or any index

386
00:13:14,639 --> 00:13:19,120
calculus algorithm have these three

387
00:13:16,800 --> 00:13:20,160
steps and so the overall complexity of

388
00:13:19,120 --> 00:13:22,320
the algorithm is

389
00:13:20,160 --> 00:13:23,839
simply the sum of the three costs of

390
00:13:22,320 --> 00:13:26,320
each of these steps

391
00:13:23,839 --> 00:13:27,200
so in order to maximize to sorry to

392
00:13:26,320 --> 00:13:29,200
optimize

393
00:13:27,200 --> 00:13:30,959
the overall complexity we want to

394
00:13:29,200 --> 00:13:32,720
maximize

395
00:13:30,959 --> 00:13:35,680
optimize the maximum of these three

396
00:13:32,720 --> 00:13:38,320
costs so this is rather complicated for

397
00:13:35,680 --> 00:13:40,160
several reasons uh first of all nfs and

398
00:13:38,320 --> 00:13:42,720
its variants have a lot of parameters

399
00:13:40,160 --> 00:13:44,560
some are discrete some are continuous

400
00:13:42,720 --> 00:13:46,320
these parameters vary depending on the

401
00:13:44,560 --> 00:13:47,760
variance we're considering depending on

402
00:13:46,320 --> 00:13:49,440
the polynomial selection that we're

403
00:13:47,760 --> 00:13:52,160
using to select the first

404
00:13:49,440 --> 00:13:53,760
two polynomials f1 and f2 there are some

405
00:13:52,160 --> 00:13:56,719
boundary issues

406
00:13:53,760 --> 00:13:58,959
so this whole optimization problem for

407
00:13:56,720 --> 00:14:00,800
which we use lagrange multipliers

408
00:13:58,959 --> 00:14:02,638
becomes all the more complex because of

409
00:14:00,800 --> 00:14:04,319
the number of parameters that are being

410
00:14:02,639 --> 00:14:06,000
considered

411
00:14:04,320 --> 00:14:08,000
when we solve the polynomial system we

412
00:14:06,000 --> 00:14:10,000
use grouping basis algorithms

413
00:14:08,000 --> 00:14:11,279
and on top of all of this a lot of

414
00:14:10,000 --> 00:14:13,440
analytical

415
00:14:11,279 --> 00:14:15,519
analytic number theory results must be

416
00:14:13,440 --> 00:14:17,519
considered

417
00:14:15,519 --> 00:14:19,120
so in the end in this work we have

418
00:14:17,519 --> 00:14:20,079
looked at the complexity of all these

419
00:14:19,120 --> 00:14:23,519
algorithms

420
00:14:20,079 --> 00:14:24,719
along with all their variants uh

421
00:14:23,519 --> 00:14:26,959
both for the algorithms and the

422
00:14:24,720 --> 00:14:28,320
polynomial selection and this resulted

423
00:14:26,959 --> 00:14:31,119
in these two plots

424
00:14:28,320 --> 00:14:32,800
where we have the complexities as a

425
00:14:31,120 --> 00:14:34,720
function of cp which is the second

426
00:14:32,800 --> 00:14:36,880
constant in the l notation

427
00:14:34,720 --> 00:14:39,360
for all the variants and all the

428
00:14:36,880 --> 00:14:41,760
polynomial selections

429
00:14:39,360 --> 00:14:42,800
so a surprising fact that we've noticed

430
00:14:41,760 --> 00:14:44,720
when computing these

431
00:14:42,800 --> 00:14:46,719
complexities is that not all the

432
00:14:44,720 --> 00:14:47,839
variants are applicable at the boundary

433
00:14:46,720 --> 00:14:49,680
case

434
00:14:47,839 --> 00:14:50,880
for example if we want to use the

435
00:14:49,680 --> 00:14:54,399
special

436
00:14:50,880 --> 00:14:57,279
number field sieve so snfs

437
00:14:54,399 --> 00:14:58,000
with the tower setup then this results

438
00:14:57,279 --> 00:15:01,120
in norms that

439
00:14:58,000 --> 00:15:02,959
are much larger um than expected and

440
00:15:01,120 --> 00:15:05,279
thus a much higher complexity

441
00:15:02,959 --> 00:15:08,880
so some variants cannot be combined

442
00:15:05,279 --> 00:15:08,880
precisely in this boundary case

443
00:15:11,440 --> 00:15:14,639
now we can also look at algorithms that

444
00:15:13,600 --> 00:15:17,920
comes from the

445
00:15:14,639 --> 00:15:18,399
um small characteristic area since we

446
00:15:17,920 --> 00:15:20,319
are

447
00:15:18,399 --> 00:15:22,399
precisely at the boundary case we are

448
00:15:20,320 --> 00:15:24,480
interested in the ones that come from

449
00:15:22,399 --> 00:15:25,360
the medium characteristics so nfs and

450
00:15:24,480 --> 00:15:26,880
all these variants

451
00:15:25,360 --> 00:15:28,480
but we should also look at how

452
00:15:26,880 --> 00:15:29,920
applicable and how well

453
00:15:28,480 --> 00:15:31,600
these algorithms from the small

454
00:15:29,920 --> 00:15:34,079
characteristic area perform

455
00:15:31,600 --> 00:15:35,680
at the boundary case so one of these

456
00:15:34,079 --> 00:15:36,399
algorithms is called the function field

457
00:15:35,680 --> 00:15:38,399
zip

458
00:15:36,399 --> 00:15:39,759
and the function field sieve is very

459
00:15:38,399 --> 00:15:41,839
similar to nfs

460
00:15:39,759 --> 00:15:43,680
except you should think of function

461
00:15:41,839 --> 00:15:47,040
fields instead of number fields

462
00:15:43,680 --> 00:15:49,040
and look at it as a special variant

463
00:15:47,040 --> 00:15:50,319
so one result of our work was actually

464
00:15:49,040 --> 00:15:52,480
to uh reduce

465
00:15:50,320 --> 00:15:53,360
to lower the complexity of ffs by

466
00:15:52,480 --> 00:15:56,480
working in some

467
00:15:53,360 --> 00:15:57,920
shifted finite fields so this is a very

468
00:15:56,480 --> 00:16:00,560
similar argument as

469
00:15:57,920 --> 00:16:02,719
is done for the tower setup where if we

470
00:16:00,560 --> 00:16:05,279
consider a finite field fpn

471
00:16:02,720 --> 00:16:07,279
instead of actually working in fpn we

472
00:16:05,279 --> 00:16:11,360
work in a translated field

473
00:16:07,279 --> 00:16:13,920
f prime eta where p prime for example

474
00:16:11,360 --> 00:16:15,920
is uh p times kappa where n is this

475
00:16:13,920 --> 00:16:19,199
composite kappa times eta

476
00:16:15,920 --> 00:16:21,120
so we were working in a translated um

477
00:16:19,199 --> 00:16:22,319
finite field which allows us to lower

478
00:16:21,120 --> 00:16:24,399
the complexity

479
00:16:22,320 --> 00:16:26,880
all the technical details are given in

480
00:16:24,399 --> 00:16:26,880
the paper

481
00:16:27,360 --> 00:16:30,639
and finally from the small

482
00:16:28,639 --> 00:16:33,120
characteristic world we should mention

483
00:16:30,639 --> 00:16:34,839
the quasi-polynomial algorithms which um

484
00:16:33,120 --> 00:16:38,320
a lot of work has been done in the past

485
00:16:34,839 --> 00:16:40,160
decade up to very recently in 2019 where

486
00:16:38,320 --> 00:16:43,199
climbing in vesilowski

487
00:16:40,160 --> 00:16:47,839
proved this complexity

488
00:16:43,199 --> 00:16:47,839
given by the theorem just stated below

489
00:16:49,199 --> 00:16:52,800
so in the end what do we have we have

490
00:16:51,279 --> 00:16:55,040
this um

491
00:16:52,800 --> 00:16:56,639
little image that shows us which are the

492
00:16:55,040 --> 00:16:59,279
best algorithms

493
00:16:56,639 --> 00:17:00,160
depending on the area in which you are

494
00:16:59,279 --> 00:17:01,839
located

495
00:17:00,160 --> 00:17:03,680
so in the small characteristic on the

496
00:17:01,839 --> 00:17:05,760
very left we have these

497
00:17:03,680 --> 00:17:07,119
qp these quality quasi-polynomial

498
00:17:05,760 --> 00:17:08,319
algorithms

499
00:17:07,119 --> 00:17:09,599
on the right in the medium

500
00:17:08,319 --> 00:17:11,359
characteristic we have all these

501
00:17:09,599 --> 00:17:13,280
variants of nfs

502
00:17:11,359 --> 00:17:14,639
these variants of course uh are not

503
00:17:13,280 --> 00:17:16,160
always applicable it depends on the

504
00:17:14,640 --> 00:17:18,799
considerations that are made

505
00:17:16,160 --> 00:17:20,959
on n and p whether p is special or not

506
00:17:18,799 --> 00:17:24,240
whether n is composite or not

507
00:17:20,959 --> 00:17:25,439
and then we focus on this boundary case

508
00:17:24,240 --> 00:17:27,520
where not only do we have all the

509
00:17:25,439 --> 00:17:29,360
variants of nfs but we also have the

510
00:17:27,520 --> 00:17:30,559
function field sieve which is applicable

511
00:17:29,360 --> 00:17:33,439
in this area

512
00:17:30,559 --> 00:17:36,000
so one um part of our work has been to

513
00:17:33,440 --> 00:17:39,360
precisely identify the crossover points

514
00:17:36,000 --> 00:17:42,400
where fff stops uh ffs

515
00:17:39,360 --> 00:17:44,799
stops being uh the best algorithm and

516
00:17:42,400 --> 00:17:46,160
the um variance of nfs starts

517
00:17:44,799 --> 00:17:48,559
outperforming ffs

518
00:17:46,160 --> 00:17:49,840
and similarly we have an over um

519
00:17:48,559 --> 00:17:53,360
crossover point between

520
00:17:49,840 --> 00:17:57,520
ffs and the quasi polynomial algorithms

521
00:17:53,360 --> 00:17:59,439
in our paper so the motivation for

522
00:17:57,520 --> 00:18:00,639
having all this precise analysis about

523
00:17:59,440 --> 00:18:03,120
these algorithms

524
00:18:00,640 --> 00:18:04,559
is uh the security of parents so we

525
00:18:03,120 --> 00:18:05,120
would like to answer the following

526
00:18:04,559 --> 00:18:07,840
question

527
00:18:05,120 --> 00:18:09,039
asymptotically what finite fields fbn

528
00:18:07,840 --> 00:18:10,799
should be considered

529
00:18:09,039 --> 00:18:13,200
in order to achieve the highest level of

530
00:18:10,799 --> 00:18:15,918
security when constructing a pairing

531
00:18:13,200 --> 00:18:18,559
so the goal is to precisely find p and n

532
00:18:15,919 --> 00:18:20,240
that answers the question above

533
00:18:18,559 --> 00:18:21,918
so this question can be answered now

534
00:18:20,240 --> 00:18:23,440
that we have this entire analysis of all

535
00:18:21,919 --> 00:18:25,280
the algorithms at this

536
00:18:23,440 --> 00:18:26,720
at this boundary case which is the area

537
00:18:25,280 --> 00:18:29,600
where um

538
00:18:26,720 --> 00:18:30,400
parents take their values and so the

539
00:18:29,600 --> 00:18:32,879
idea here

540
00:18:30,400 --> 00:18:34,799
is to look for the value of cp so again

541
00:18:32,880 --> 00:18:35,600
cp is the second constant in the l

542
00:18:34,799 --> 00:18:38,240
notation

543
00:18:35,600 --> 00:18:40,159
that maximizes the minimum between the

544
00:18:38,240 --> 00:18:42,080
complexity and the elliptic curve side

545
00:18:40,160 --> 00:18:43,520
and the complexity on the finite field

546
00:18:42,080 --> 00:18:45,199
side

547
00:18:43,520 --> 00:18:46,879
so from this whole analysis we've seen

548
00:18:45,200 --> 00:18:48,400
that the complexities for the finite

549
00:18:46,880 --> 00:18:51,919
field side for dlp

550
00:18:48,400 --> 00:18:53,840
are decreasing functions functions of cp

551
00:18:51,919 --> 00:18:55,520
on the other hand for elliptic curves we

552
00:18:53,840 --> 00:18:56,639
have polar rho which is an increasing

553
00:18:55,520 --> 00:18:58,879
function

554
00:18:56,640 --> 00:18:59,919
the complexity depends on this value rho

555
00:18:58,880 --> 00:19:01,760
which

556
00:18:59,919 --> 00:19:03,200
characterizes the size of the subgroup

557
00:19:01,760 --> 00:19:05,600
considered

558
00:19:03,200 --> 00:19:06,559
so here in this plot we take rho equals

559
00:19:05,600 --> 00:19:08,959
one to two

560
00:19:06,559 --> 00:19:10,160
and again details about rho are given in

561
00:19:08,960 --> 00:19:11,919
the paper

562
00:19:10,160 --> 00:19:13,440
and so the optimal cp that has to be

563
00:19:11,919 --> 00:19:14,640
chosen in order to balance the two

564
00:19:13,440 --> 00:19:17,039
complexities

565
00:19:14,640 --> 00:19:18,880
are given is given by the intersection

566
00:19:17,039 --> 00:19:19,520
point between the complexity of polar

567
00:19:18,880 --> 00:19:21,760
row

568
00:19:19,520 --> 00:19:23,360
and the complexity of the best algorithm

569
00:19:21,760 --> 00:19:26,559
for dlp

570
00:19:23,360 --> 00:19:29,360
so as one can see ffs is um

571
00:19:26,559 --> 00:19:30,559
the plot in yellow orange yellow which

572
00:19:29,360 --> 00:19:34,399
is far on the left

573
00:19:30,559 --> 00:19:37,520
so it is not um considered

574
00:19:34,400 --> 00:19:40,160
in this analysis for pairings as its

575
00:19:37,520 --> 00:19:44,240
complexity becomes much higher

576
00:19:40,160 --> 00:19:44,240
for values of cp that are considered

577
00:19:44,400 --> 00:19:48,160
so this plot gives the intersection

578
00:19:47,600 --> 00:19:51,280
points

579
00:19:48,160 --> 00:19:55,039
for all the variants of nfs

580
00:19:51,280 --> 00:19:58,960
so not only mnfs but also mxtnfs

581
00:19:55,039 --> 00:20:02,000
when we have a composite n when we have

582
00:19:58,960 --> 00:20:03,360
the tower set up and also curves for the

583
00:20:02,000 --> 00:20:05,840
special

584
00:20:03,360 --> 00:20:07,360
number field sieve so one can then

585
00:20:05,840 --> 00:20:08,959
identify precisely

586
00:20:07,360 --> 00:20:10,479
depending on the considerations you want

587
00:20:08,960 --> 00:20:12,320
to make on uh

588
00:20:10,480 --> 00:20:14,240
the characteristic p and the extension

589
00:20:12,320 --> 00:20:15,678
degree n

590
00:20:14,240 --> 00:20:18,799
throughout this plot can precisely

591
00:20:15,679 --> 00:20:20,240
identify the crossover points

592
00:20:18,799 --> 00:20:22,879
this is summarized in the following

593
00:20:20,240 --> 00:20:25,919
table so for example if we take an

594
00:20:22,880 --> 00:20:28,640
uh prime non-composite and a normal p so

595
00:20:25,919 --> 00:20:30,799
no special form then one can see that

596
00:20:28,640 --> 00:20:32,960
the best algorithm to solve dlp

597
00:20:30,799 --> 00:20:34,000
for finite field is the multiple number

598
00:20:32,960 --> 00:20:37,039
filthy

599
00:20:34,000 --> 00:20:38,880
a is the polynomial selection that is

600
00:20:37,039 --> 00:20:41,600
being used and so the crossover point is

601
00:20:38,880 --> 00:20:44,000
for cp equals 4.45

602
00:20:41,600 --> 00:20:44,639
this allows one to define a precise p

603
00:20:44,000 --> 00:20:47,679
and then

604
00:20:44,640 --> 00:20:50,320
um and then the uh

605
00:20:47,679 --> 00:20:52,240
corresponding and in order to define uh

606
00:20:50,320 --> 00:20:54,720
the finite field that has to be used to

607
00:20:52,240 --> 00:20:56,400
construct a secure pairing

608
00:20:54,720 --> 00:20:58,240
so there were some surprising facts that

609
00:20:56,400 --> 00:20:59,760
we've noticed um

610
00:20:58,240 --> 00:21:02,080
when considering the security for

611
00:20:59,760 --> 00:21:03,919
pairings one of which is the fact that

612
00:21:02,080 --> 00:21:05,360
using a special form for p

613
00:21:03,919 --> 00:21:07,440
does not always make the pairing less

614
00:21:05,360 --> 00:21:09,760
secure as one could think because snfs

615
00:21:07,440 --> 00:21:13,120
would tend to lower the complexity

616
00:21:09,760 --> 00:21:14,080
indeed if we look at the first line of

617
00:21:13,120 --> 00:21:17,199
the table

618
00:21:14,080 --> 00:21:19,039
we see that if we take a special prime

619
00:21:17,200 --> 00:21:20,320
and a lambda which is the degree of the

620
00:21:19,039 --> 00:21:23,520
polynomial we use for

621
00:21:20,320 --> 00:21:24,320
uh defining p and this lambda is equal

622
00:21:23,520 --> 00:21:28,000
to 20

623
00:21:24,320 --> 00:21:31,039
then the curve of snf snfs sorry

624
00:21:28,000 --> 00:21:34,720
is above the curve of mnfs

625
00:21:31,039 --> 00:21:38,080
so snf fest does not perform better

626
00:21:34,720 --> 00:21:41,120
for this particular value of lambda

627
00:21:38,080 --> 00:21:43,600
so one can choose um

628
00:21:41,120 --> 00:21:45,360
values of lambda for which mnfs will

629
00:21:43,600 --> 00:21:46,559
outperform snf so this was one

630
00:21:45,360 --> 00:21:48,879
surprising fact

631
00:21:46,559 --> 00:21:50,799
that we've noticed um when studying the

632
00:21:48,880 --> 00:21:52,640
security of parents

633
00:21:50,799 --> 00:21:54,400
so this concludes my talk thank you for

634
00:21:52,640 --> 00:21:59,840
listening and i will be happy to answer

635
00:21:54,400 --> 00:21:59,840
questions during the session

636
00:22:01,919 --> 00:22:04,000
you

