1
00:00:02,000 --> 00:00:06,319
hi um

2
00:00:03,439 --> 00:00:07,200
welcome to this talk so today i'll be

3
00:00:06,319 --> 00:00:10,080
talking about

4
00:00:07,200 --> 00:00:10,719
lattice reduction for modules or how to

5
00:00:10,080 --> 00:00:14,160
reduce

6
00:00:10,719 --> 00:00:17,119
module svp to module sap

7
00:00:14,160 --> 00:00:21,119
i'm tamalika and this is joint work with

8
00:00:17,119 --> 00:00:21,119
noah stevens davidowitz from cornell

9
00:00:21,680 --> 00:00:25,840
so the first half of this talk will be

10
00:00:23,840 --> 00:00:28,960
background and motivation

11
00:00:25,840 --> 00:00:31,359
and the second half will be an overview

12
00:00:28,960 --> 00:00:33,760
of our techniques

13
00:00:31,359 --> 00:00:36,239
so let's begin um let's start with the

14
00:00:33,760 --> 00:00:39,760
basics so a euclidean lattice

15
00:00:36,239 --> 00:00:40,480
is just an additive a discrete additive

16
00:00:39,760 --> 00:00:44,559
subgroup

17
00:00:40,480 --> 00:00:45,440
of r to the d another way of defining a

18
00:00:44,559 --> 00:00:48,320
lattice

19
00:00:45,440 --> 00:00:52,800
of rank d is just taking the integer

20
00:00:48,320 --> 00:00:52,800
linear combination of its basis vectors

21
00:00:55,600 --> 00:00:59,039
so we care about the geometry of

22
00:00:58,239 --> 00:01:02,078
lattices

23
00:00:59,039 --> 00:01:04,080
and one of the most important quantities

24
00:01:02,079 --> 00:01:05,360
associated with the geometry of a

25
00:01:04,080 --> 00:01:08,000
lattice l

26
00:01:05,360 --> 00:01:08,960
is the length of its shortest non-zero

27
00:01:08,000 --> 00:01:13,840
vector

28
00:01:08,960 --> 00:01:13,839
and this is denoted by lambda 1 of l

29
00:01:14,880 --> 00:01:19,600
since this is a talk on module lattices

30
00:01:17,920 --> 00:01:21,360
let's actually define what a module

31
00:01:19,600 --> 00:01:25,119
lattice is

32
00:01:21,360 --> 00:01:28,560
so we fix a number field k of degree n

33
00:01:25,119 --> 00:01:32,799
and we fix a full rank discrete sub ring

34
00:01:28,560 --> 00:01:35,040
r in k so for example you can take k

35
00:01:32,799 --> 00:01:35,920
to be the power of two sub atomics and

36
00:01:35,040 --> 00:01:40,000
you can take r

37
00:01:35,920 --> 00:01:42,479
to be the ring of integers uh of that

38
00:01:40,000 --> 00:01:45,520
but essentially r can be any full rank

39
00:01:42,479 --> 00:01:48,079
discrete submariner

40
00:01:45,520 --> 00:01:50,079
and then we define a module lattice as

41
00:01:48,079 --> 00:01:53,439
being

42
00:01:50,079 --> 00:01:56,960
a modulitis of rank k over the ring r

43
00:01:53,439 --> 00:01:59,679
as the set of all r linear combinations

44
00:01:56,960 --> 00:02:00,399
of finitely many generating vectors y

45
00:01:59,680 --> 00:02:04,479
one through y

46
00:02:00,399 --> 00:02:07,439
m in our number field k to the k

47
00:02:04,479 --> 00:02:08,959
so notice that an ideal of a ring is

48
00:02:07,439 --> 00:02:12,879
just a rank 1

49
00:02:08,959 --> 00:02:16,239
module lattice and you can also

50
00:02:12,879 --> 00:02:18,879
observe that this definition is somewhat

51
00:02:16,239 --> 00:02:21,120
generalizing the definition i presented

52
00:02:18,879 --> 00:02:24,000
for euclidean lattices

53
00:02:21,120 --> 00:02:26,000
to see this uh essentially in the

54
00:02:24,000 --> 00:02:29,280
euclidean lattice definition

55
00:02:26,000 --> 00:02:32,560
we took the z-span of our basis vectors

56
00:02:29,280 --> 00:02:35,840
in euclidean space r to the d

57
00:02:32,560 --> 00:02:37,280
and here we're taking the r span of our

58
00:02:35,840 --> 00:02:41,120
generating vectors

59
00:02:37,280 --> 00:02:41,120
in our number field k to the k

60
00:02:41,360 --> 00:02:45,360
to make this association a little bit

61
00:02:43,200 --> 00:02:47,679
more concrete

62
00:02:45,360 --> 00:02:48,640
essentially module lattices are just a

63
00:02:47,680 --> 00:02:52,319
subset

64
00:02:48,640 --> 00:02:53,518
of euclidean lattices and we can see

65
00:02:52,319 --> 00:02:57,200
this in two ways

66
00:02:53,519 --> 00:03:00,959
so the first way is that if we equip our

67
00:02:57,200 --> 00:03:03,200
number field k the k with the norm

68
00:03:00,959 --> 00:03:04,080
then we can just embed our module

69
00:03:03,200 --> 00:03:07,280
lattice and k

70
00:03:04,080 --> 00:03:08,319
the k into euclidean space or into a

71
00:03:07,280 --> 00:03:11,440
euclidean lattice

72
00:03:08,319 --> 00:03:11,440
in r to the k n

73
00:03:11,840 --> 00:03:17,360
and by doing so we now have

74
00:03:14,959 --> 00:03:18,000
well-defined geometric properties like

75
00:03:17,360 --> 00:03:19,760
the length

76
00:03:18,000 --> 00:03:21,519
of vectors are well defined and the

77
00:03:19,760 --> 00:03:26,319
volume is well defined

78
00:03:21,519 --> 00:03:26,319
so determinant is well defined and so on

79
00:03:26,640 --> 00:03:29,679
um the second way of seeing this

80
00:03:28,440 --> 00:03:33,040
association

81
00:03:29,680 --> 00:03:35,040
is to notice that module lattices are

82
00:03:33,040 --> 00:03:36,798
just euclidean lattices with some

83
00:03:35,040 --> 00:03:40,319
symmetry

84
00:03:36,799 --> 00:03:41,519
more formally a modulitis is just a

85
00:03:40,319 --> 00:03:44,079
euclidean lattice that's

86
00:03:41,519 --> 00:03:45,599
closed under some set of linear

87
00:03:44,080 --> 00:03:47,599
transformations

88
00:03:45,599 --> 00:03:49,040
and these linear transformations

89
00:03:47,599 --> 00:03:52,959
correspond to

90
00:03:49,040 --> 00:03:52,959
multiplication by ring elements

91
00:03:53,840 --> 00:03:59,680
one of the most important problems in

92
00:03:57,200 --> 00:04:02,720
associated with lattices is the

93
00:03:59,680 --> 00:04:05,680
approximate shortest vector problem

94
00:04:02,720 --> 00:04:07,760
and the problem statement is as follows

95
00:04:05,680 --> 00:04:10,879
given a lot of space is b

96
00:04:07,760 --> 00:04:13,920
the problem is to find a non-zero vector

97
00:04:10,879 --> 00:04:15,120
v in our lattice l such that the length

98
00:04:13,920 --> 00:04:18,880
of this vector

99
00:04:15,120 --> 00:04:20,720
is at most gamma times the length of the

100
00:04:18,880 --> 00:04:25,280
shortest non-zero vector in

101
00:04:20,720 --> 00:04:27,919
l now you can see that we can

102
00:04:25,280 --> 00:04:28,559
generalize this problem to the context

103
00:04:27,919 --> 00:04:31,599
of

104
00:04:28,560 --> 00:04:32,639
module lattices and to do so we call

105
00:04:31,600 --> 00:04:35,680
this problem now

106
00:04:32,639 --> 00:04:38,560
gamma k module svp

107
00:04:35,680 --> 00:04:39,520
and this is essentially solving gamma

108
00:04:38,560 --> 00:04:43,840
svp

109
00:04:39,520 --> 00:04:43,840
on module lattices of brain k

110
00:04:44,160 --> 00:04:47,520
notice that based on our previous

111
00:04:46,320 --> 00:04:51,199
discussion

112
00:04:47,520 --> 00:04:54,400
gamma k module svp can be no harder

113
00:04:51,199 --> 00:04:56,080
than gamma svp over euclidean lattices

114
00:04:54,400 --> 00:04:59,280
with rank kn

115
00:04:56,080 --> 00:04:59,599
and to see this um essentially like we

116
00:04:59,280 --> 00:05:02,559
said

117
00:04:59,600 --> 00:05:03,440
before you can always embed a module

118
00:05:02,560 --> 00:05:06,160
lattice

119
00:05:03,440 --> 00:05:06,560
in a number field k to the k of rank k

120
00:05:06,160 --> 00:05:09,680
uh

121
00:05:06,560 --> 00:05:14,240
to a euclidean lattice in r to the k

122
00:05:09,680 --> 00:05:14,240
n and just solve gamma svp there

123
00:05:14,720 --> 00:05:19,520
so for crypto uh we care about

124
00:05:17,280 --> 00:05:22,320
approximation factor gamma to be

125
00:05:19,520 --> 00:05:24,240
polynomial in the rank or the dimension

126
00:05:22,320 --> 00:05:27,280
of the lattice

127
00:05:24,240 --> 00:05:29,120
and this will become relevant or this

128
00:05:27,280 --> 00:05:32,159
will come up again when we see the

129
00:05:29,120 --> 00:05:32,160
technical results

130
00:05:32,880 --> 00:05:37,039
since we're at crypto i'd be remiss to

131
00:05:35,680 --> 00:05:39,840
not mention

132
00:05:37,039 --> 00:05:41,520
the relevance of module lattices to

133
00:05:39,840 --> 00:05:44,719
crypto

134
00:05:41,520 --> 00:05:45,520
so essentially most lattice-based crypto

135
00:05:44,720 --> 00:05:48,639
schemes

136
00:05:45,520 --> 00:05:51,840
use module lattices as a building block

137
00:05:48,639 --> 00:05:53,759
and more specifically the candidates

138
00:05:51,840 --> 00:05:55,919
strong candidates for post-quantum

139
00:05:53,759 --> 00:05:57,520
control standardization by nist that are

140
00:05:55,919 --> 00:05:59,919
being considered

141
00:05:57,520 --> 00:06:01,280
they all use module lattices as building

142
00:05:59,919 --> 00:06:05,919
blocks

143
00:06:01,280 --> 00:06:07,520
and so faster algorithms for module svp

144
00:06:05,919 --> 00:06:10,479
would essentially

145
00:06:07,520 --> 00:06:11,840
break the security of these schemes and

146
00:06:10,479 --> 00:06:14,000
this is a very high level

147
00:06:11,840 --> 00:06:16,960
motivational idea of why we should care

148
00:06:14,000 --> 00:06:19,440
from a crypto perspective

149
00:06:16,960 --> 00:06:21,520
one thing i'll note here is that we use

150
00:06:19,440 --> 00:06:22,560
module lattices instead of euclidean

151
00:06:21,520 --> 00:06:24,400
lattices

152
00:06:22,560 --> 00:06:25,680
because the added structure of module

153
00:06:24,400 --> 00:06:27,198
lattices

154
00:06:25,680 --> 00:06:29,840
improves the efficiency of the

155
00:06:27,199 --> 00:06:29,840
cryptoscheme

156
00:06:30,479 --> 00:06:33,758
so i'll go into basis reduction

157
00:06:32,319 --> 00:06:35,600
algorithms for scp

158
00:06:33,759 --> 00:06:37,840
in more detail in the second half of

159
00:06:35,600 --> 00:06:40,160
this talk but it's useful

160
00:06:37,840 --> 00:06:41,919
to describe the general idea at this

161
00:06:40,160 --> 00:06:45,120
point here

162
00:06:41,919 --> 00:06:47,680
so essentially basis reduction

163
00:06:45,120 --> 00:06:50,479
algorithms for sap work as follows

164
00:06:47,680 --> 00:06:52,000
we want to try and solve gamma svp or

165
00:06:50,479 --> 00:06:55,039
approximate svp

166
00:06:52,000 --> 00:06:57,840
on a lattice of high rank say rank d

167
00:06:55,039 --> 00:06:58,639
and to do this we reduce the problem to

168
00:06:57,840 --> 00:07:02,159
solving

169
00:06:58,639 --> 00:07:03,039
approximate svp on lattices of lower

170
00:07:02,160 --> 00:07:06,000
rank say d

171
00:07:03,039 --> 00:07:08,400
prime and this d prime is known as a

172
00:07:06,000 --> 00:07:11,520
block size

173
00:07:08,400 --> 00:07:12,560
so a very famous and renowned

174
00:07:11,520 --> 00:07:16,479
application

175
00:07:12,560 --> 00:07:18,880
of this idea is the lll algorithm

176
00:07:16,479 --> 00:07:19,840
and so the ll algorithm the idea behind

177
00:07:18,880 --> 00:07:22,719
it is

178
00:07:19,840 --> 00:07:25,440
in order to solve approximate svp for

179
00:07:22,720 --> 00:07:27,919
lattices of large rank

180
00:07:25,440 --> 00:07:29,360
the algorithm reduces this to solving

181
00:07:27,919 --> 00:07:32,960
exact svp

182
00:07:29,360 --> 00:07:35,840
for lattices of rank 2.

183
00:07:32,960 --> 00:07:37,280
and as we've been seeing in the previous

184
00:07:35,840 --> 00:07:40,080
slides

185
00:07:37,280 --> 00:07:41,840
since module scp is just a special case

186
00:07:40,080 --> 00:07:44,639
of svp

187
00:07:41,840 --> 00:07:47,440
basis reduction algorithms for sap also

188
00:07:44,639 --> 00:07:49,759
solve module sap

189
00:07:47,440 --> 00:07:52,319
so this brings us to our broad

190
00:07:49,759 --> 00:07:55,199
motivational question

191
00:07:52,319 --> 00:07:58,000
so as we saw we can always embed our

192
00:07:55,199 --> 00:08:00,240
module lattices into euclidean space

193
00:07:58,000 --> 00:08:02,800
and perform the basis reduction

194
00:08:00,240 --> 00:08:06,080
algorithms for svp

195
00:08:02,800 --> 00:08:09,039
in that manner but the question that we

196
00:08:06,080 --> 00:08:11,758
ask is can we do better can we find

197
00:08:09,039 --> 00:08:14,000
faster algorithms for module svp

198
00:08:11,759 --> 00:08:15,280
if we actually take advantage of the

199
00:08:14,000 --> 00:08:18,319
added structure

200
00:08:15,280 --> 00:08:21,039
that module lattices have

201
00:08:18,319 --> 00:08:22,639
and from a crypto perspective this is uh

202
00:08:21,039 --> 00:08:23,840
the motivational question translates

203
00:08:22,639 --> 00:08:26,720
into

204
00:08:23,840 --> 00:08:28,638
does specializing to module lattices

205
00:08:26,720 --> 00:08:31,039
impact the security of our crypto

206
00:08:28,639 --> 00:08:31,039
schemes

207
00:08:31,680 --> 00:08:35,039
so there's been a vast and rich line of

208
00:08:33,919 --> 00:08:38,079
work that's

209
00:08:35,039 --> 00:08:39,120
looked at faster algorithms for solving

210
00:08:38,080 --> 00:08:42,000
module sap

211
00:08:39,120 --> 00:08:42,880
on rank one module lattices and there

212
00:08:42,000 --> 00:08:45,200
are indeed

213
00:08:42,880 --> 00:08:46,000
faster algorithms for the rank one

214
00:08:45,200 --> 00:08:49,920
module lattice

215
00:08:46,000 --> 00:08:52,160
module sap case but fortunately

216
00:08:49,920 --> 00:08:55,839
these uh most crypto schemes were not

217
00:08:52,160 --> 00:08:55,839
broken by these algorithms

218
00:08:56,880 --> 00:09:01,519
but if we have a similar improvement for

219
00:08:59,360 --> 00:09:04,880
higher ranked lattices

220
00:09:01,519 --> 00:09:07,200
this would indeed result

221
00:09:04,880 --> 00:09:08,320
in jeopardizing the security of the

222
00:09:07,200 --> 00:09:11,680
crypto schemes that

223
00:09:08,320 --> 00:09:14,480
use module lattices and again i

224
00:09:11,680 --> 00:09:16,079
am sweeping a lot of technical details

225
00:09:14,480 --> 00:09:18,800
under the rug

226
00:09:16,080 --> 00:09:19,839
but this is the general idea as to why

227
00:09:18,800 --> 00:09:23,839
we should care

228
00:09:19,839 --> 00:09:23,839
about this problem

229
00:09:24,800 --> 00:09:28,000
so what happens for higher rank what do

230
00:09:26,959 --> 00:09:30,719
we know

231
00:09:28,000 --> 00:09:32,160
for module scp for higher rank module

232
00:09:30,720 --> 00:09:35,360
lattices

233
00:09:32,160 --> 00:09:37,199
spoiler alert we actually don't answer

234
00:09:35,360 --> 00:09:38,080
the motivational question that i posed

235
00:09:37,200 --> 00:09:41,360
earlier

236
00:09:38,080 --> 00:09:44,480
so till date we still don't know if

237
00:09:41,360 --> 00:09:48,240
there there are faster algorithms for

238
00:09:44,480 --> 00:09:51,120
module svp for higher rank but our work

239
00:09:48,240 --> 00:09:54,160
actually makes progress towards

240
00:09:51,120 --> 00:09:57,519
understanding this problem better

241
00:09:54,160 --> 00:09:58,160
so last year uh lee pilot mary steli and

242
00:09:57,519 --> 00:10:00,880
wallet

243
00:09:58,160 --> 00:10:01,600
independently showed a reduction from a

244
00:10:00,880 --> 00:10:05,279
high rank

245
00:10:01,600 --> 00:10:06,959
module svp to rank two module svp

246
00:10:05,279 --> 00:10:09,760
and this and their results can be

247
00:10:06,959 --> 00:10:12,800
thought of as a generalization of lll

248
00:10:09,760 --> 00:10:15,760
to module lattices

249
00:10:12,800 --> 00:10:17,519
what we show is uh can be thought of as

250
00:10:15,760 --> 00:10:20,319
a generalization of

251
00:10:17,519 --> 00:10:22,640
block reduction or slide reduction to

252
00:10:20,320 --> 00:10:26,000
module lattices

253
00:10:22,640 --> 00:10:30,319
and so we show a reduction from rank k

254
00:10:26,000 --> 00:10:33,360
module svp to rank beta module sap

255
00:10:30,320 --> 00:10:35,440
for any k and beta between two and k

256
00:10:33,360 --> 00:10:39,440
with an appropriate trade-off between

257
00:10:35,440 --> 00:10:39,440
the approximation factor and the rank

258
00:10:40,160 --> 00:10:44,560
so the forefront of our knowledge

259
00:10:42,800 --> 00:10:47,279
regarding that question that i posed

260
00:10:44,560 --> 00:10:50,160
earlier about faster algorithms for

261
00:10:47,279 --> 00:10:51,360
module lattices for higher rank is the

262
00:10:50,160 --> 00:10:54,800
following

263
00:10:51,360 --> 00:10:57,920
we know that solving module sap

264
00:10:54,800 --> 00:10:59,120
for rank two module lattices is as hard

265
00:10:57,920 --> 00:11:01,360
as solving

266
00:10:59,120 --> 00:11:02,959
module sap for higher rank module

267
00:11:01,360 --> 00:11:05,040
lattices

268
00:11:02,959 --> 00:11:06,079
and so there could be two possible

269
00:11:05,040 --> 00:11:09,920
consequences

270
00:11:06,079 --> 00:11:12,479
of this result so the first

271
00:11:09,920 --> 00:11:13,120
consequence or scenario could be that

272
00:11:12,480 --> 00:11:14,800
maybe

273
00:11:13,120 --> 00:11:17,360
there is a large gap between the

274
00:11:14,800 --> 00:11:20,880
hardness of solving svp for rank 1

275
00:11:17,360 --> 00:11:23,279
versus rank 2 module lattices

276
00:11:20,880 --> 00:11:24,720
uh the second scenario is a little bit

277
00:11:23,279 --> 00:11:27,120
more weak

278
00:11:24,720 --> 00:11:28,240
since we already have faster algorithms

279
00:11:27,120 --> 00:11:31,440
for solving

280
00:11:28,240 --> 00:11:34,480
rank 1 module svp

281
00:11:31,440 --> 00:11:35,680
we only need to make progress in solving

282
00:11:34,480 --> 00:11:38,640
module scp

283
00:11:35,680 --> 00:11:41,199
or getting faster algorithms for module

284
00:11:38,640 --> 00:11:44,240
sap for rank 2 module lattices

285
00:11:41,200 --> 00:11:47,760
and even this progress would

286
00:11:44,240 --> 00:11:49,040
result in jeopardizing uh most crypto

287
00:11:47,760 --> 00:11:56,319
schemes that use

288
00:11:49,040 --> 00:11:59,120
module lattices as building blocks

289
00:11:56,320 --> 00:12:00,399
so before we move on to the overview of

290
00:11:59,120 --> 00:12:03,600
our techniques

291
00:12:00,399 --> 00:12:04,639
uh here is the formal statement of our

292
00:12:03,600 --> 00:12:07,680
result

293
00:12:04,639 --> 00:12:10,959
as i mentioned before we we essentially

294
00:12:07,680 --> 00:12:14,319
generalize the slide reduction

295
00:12:10,959 --> 00:12:17,518
of gamma and nuan from 2008

296
00:12:14,320 --> 00:12:19,519
to module lattices and so

297
00:12:17,519 --> 00:12:20,639
their result was is the current state of

298
00:12:19,519 --> 00:12:24,639
the art for

299
00:12:20,639 --> 00:12:26,639
lattices and their results as follows

300
00:12:24,639 --> 00:12:28,000
they showed that there is an efficient

301
00:12:26,639 --> 00:12:31,680
reduction from

302
00:12:28,000 --> 00:12:35,360
gamma k n svp to gamma prime beta n

303
00:12:31,680 --> 00:12:39,120
svp where the approximation factor is

304
00:12:35,360 --> 00:12:42,000
given here i'd like to note that

305
00:12:39,120 --> 00:12:42,240
the rank is parameterized as multiples

306
00:12:42,000 --> 00:12:45,200
of

307
00:12:42,240 --> 00:12:46,399
n just so we can compare their result to

308
00:12:45,200 --> 00:12:50,560
our result

309
00:12:46,399 --> 00:12:52,560
more easily so our main theorem

310
00:12:50,560 --> 00:12:53,599
is that there is an efficient reduction

311
00:12:52,560 --> 00:12:57,040
from gamma k

312
00:12:53,600 --> 00:12:59,360
module svp to gamma prime beta

313
00:12:57,040 --> 00:13:00,319
modulus of p where the approximation

314
00:12:59,360 --> 00:13:03,360
factor is

315
00:13:00,320 --> 00:13:05,440
as follows so

316
00:13:03,360 --> 00:13:06,639
i'd like to know three things on this

317
00:13:05,440 --> 00:13:09,200
slide

318
00:13:06,639 --> 00:13:10,639
the first is an interpretation of our

319
00:13:09,200 --> 00:13:13,760
result

320
00:13:10,639 --> 00:13:16,800
so our result is essentially saying that

321
00:13:13,760 --> 00:13:19,680
using a module svp oracle

322
00:13:16,800 --> 00:13:20,079
up to certain approximation factors is

323
00:13:19,680 --> 00:13:24,000
as

324
00:13:20,079 --> 00:13:26,319
good as using a generic sap oracle

325
00:13:24,000 --> 00:13:27,839
when it comes to basis reduction for

326
00:13:26,320 --> 00:13:31,120
module lattices

327
00:13:27,839 --> 00:13:33,600
and this is somewhat surprising

328
00:13:31,120 --> 00:13:34,639
the second point i'd like to make here

329
00:13:33,600 --> 00:13:36,800
is that

330
00:13:34,639 --> 00:13:38,399
the approximation factor as i mentioned

331
00:13:36,800 --> 00:13:41,519
earlier for crypto

332
00:13:38,399 --> 00:13:42,079
we care about gamma being polynomial in

333
00:13:41,519 --> 00:13:45,279
the rank

334
00:13:42,079 --> 00:13:45,599
or the dimension and so you should think

335
00:13:45,279 --> 00:13:49,839
of

336
00:13:45,600 --> 00:13:49,839
k as being linear in beta

337
00:13:50,320 --> 00:13:55,199
the third point is also regarding the

338
00:13:53,279 --> 00:13:58,240
approximation factor

339
00:13:55,199 --> 00:13:59,359
if you notice i haven't defined the

340
00:13:58,240 --> 00:14:02,880
underlying ring

341
00:13:59,360 --> 00:14:03,680
or the number field in this main theorem

342
00:14:02,880 --> 00:14:07,120
statement

343
00:14:03,680 --> 00:14:09,599
but in reality this approximation factor

344
00:14:07,120 --> 00:14:12,720
does depend on the underlying ring and

345
00:14:09,600 --> 00:14:15,360
the associated norm

346
00:14:12,720 --> 00:14:17,360
and so for this main theorem that we

347
00:14:15,360 --> 00:14:20,000
have here it's stated for

348
00:14:17,360 --> 00:14:21,680
the cycloatomic it's stated for the

349
00:14:20,000 --> 00:14:26,639
canonical embedding

350
00:14:21,680 --> 00:14:26,638
of the ring of integers of psychoatomic

351
00:14:28,839 --> 00:14:33,440
fields okay so

352
00:14:30,720 --> 00:14:34,800
now we move on to the second half of

353
00:14:33,440 --> 00:14:38,639
this talk

354
00:14:34,800 --> 00:14:39,359
and before we dive into our techniques

355
00:14:38,639 --> 00:14:41,279
for

356
00:14:39,360 --> 00:14:42,399
reduction basis reduction of module

357
00:14:41,279 --> 00:14:45,680
lattices

358
00:14:42,399 --> 00:14:48,240
it helps to provide some intuition

359
00:14:45,680 --> 00:14:50,959
by going over the basis reduction

360
00:14:48,240 --> 00:14:54,800
techniques of euclidean lattices

361
00:14:50,959 --> 00:14:57,680
so in for any euclidean lattice l

362
00:14:54,800 --> 00:14:58,880
with the basis b we can always do

363
00:14:57,680 --> 00:15:02,239
gram-schmidt

364
00:14:58,880 --> 00:15:05,360
and qr decomposition to get

365
00:15:02,240 --> 00:15:08,720
b as a product of two matrices

366
00:15:05,360 --> 00:15:12,079
where q is orthogonal matrix and

367
00:15:08,720 --> 00:15:13,199
r is the upper triangular matrix and

368
00:15:12,079 --> 00:15:17,199
here the bi

369
00:15:13,199 --> 00:15:17,199
tildes are the gram-schmidt vectors

370
00:15:17,360 --> 00:15:23,680
so since q is just a rotation matrix

371
00:15:20,959 --> 00:15:24,880
this doesn't change the length of the

372
00:15:23,680 --> 00:15:28,160
vectors

373
00:15:24,880 --> 00:15:31,199
and so we essentially can think of

374
00:15:28,160 --> 00:15:32,160
our lattice spaces to be the upper

375
00:15:31,199 --> 00:15:35,599
triangular

376
00:15:32,160 --> 00:15:37,600
matrix up to a rotation so we can just

377
00:15:35,600 --> 00:15:39,440
work with this

378
00:15:37,600 --> 00:15:42,000
upper triangular matrix as our lattice

379
00:15:39,440 --> 00:15:44,399
basis from now on and do block reduction

380
00:15:42,000 --> 00:15:44,399
on this

381
00:15:44,560 --> 00:15:48,560
now as i described earlier in the first

382
00:15:46,959 --> 00:15:51,920
half of this talk

383
00:15:48,560 --> 00:15:54,079
uh the idea for block reduction is

384
00:15:51,920 --> 00:15:56,319
essentially if you're given a if you

385
00:15:54,079 --> 00:15:59,599
want to solve approximate svp

386
00:15:56,320 --> 00:16:02,240
on a lattice of high rank say rank d

387
00:15:59,600 --> 00:16:04,240
we reduce this problem to solving

388
00:16:02,240 --> 00:16:08,320
approximate scp

389
00:16:04,240 --> 00:16:11,839
on lattices of lower rank say beta

390
00:16:08,320 --> 00:16:14,639
and to do so we use our svp oracle

391
00:16:11,839 --> 00:16:15,759
for rank beta and we call that on each

392
00:16:14,639 --> 00:16:18,800
of these blocks

393
00:16:15,759 --> 00:16:22,000
of size beta by beta and

394
00:16:18,800 --> 00:16:24,719
the goal is to essentially make the

395
00:16:22,000 --> 00:16:26,639
first vector in each of these blocks the

396
00:16:24,720 --> 00:16:29,759
shortest vector

397
00:16:26,639 --> 00:16:32,160
and by doing so we end up with

398
00:16:29,759 --> 00:16:33,440
the resulting basis for this entire

399
00:16:32,160 --> 00:16:36,000
lattice

400
00:16:33,440 --> 00:16:38,320
the first vector in that resulting basis

401
00:16:36,000 --> 00:16:39,360
will be the solution to our approximate

402
00:16:38,320 --> 00:16:43,199
svp problem

403
00:16:39,360 --> 00:16:43,199
for rank d

404
00:16:44,399 --> 00:16:50,720
so is there a way that we can generalize

405
00:16:47,920 --> 00:16:53,519
this idea that i just described for

406
00:16:50,720 --> 00:16:57,199
block reduction with euclidean lattices

407
00:16:53,519 --> 00:16:59,920
two module lattices um the first

408
00:16:57,199 --> 00:17:02,479
natural attempt at trying to generalize

409
00:16:59,920 --> 00:17:05,359
this idea could be the following

410
00:17:02,480 --> 00:17:07,120
we could think of doing qr decomposition

411
00:17:05,359 --> 00:17:10,319
over our number field

412
00:17:07,119 --> 00:17:11,438
on the r generating set of a module

413
00:17:10,319 --> 00:17:15,199
lattice

414
00:17:11,439 --> 00:17:18,480
now this idea doesn't work and

415
00:17:15,199 --> 00:17:22,880
it's because not all module lattices

416
00:17:18,480 --> 00:17:26,000
of rank k have r generating sets

417
00:17:22,880 --> 00:17:28,640
that have exactly k elements

418
00:17:26,000 --> 00:17:30,160
to illustrate this point uh take this

419
00:17:28,640 --> 00:17:33,120
example where

420
00:17:30,160 --> 00:17:35,120
we have the ideal generated by two and

421
00:17:33,120 --> 00:17:38,080
one plus square root of negative five

422
00:17:35,120 --> 00:17:38,879
over the ring z square root negative

423
00:17:38,080 --> 00:17:40,960
five

424
00:17:38,880 --> 00:17:41,919
now this ideal is generated by two

425
00:17:40,960 --> 00:17:44,880
elements

426
00:17:41,919 --> 00:17:47,840
but the rank of this ideal is one over

427
00:17:44,880 --> 00:17:47,840
the number field

428
00:17:47,919 --> 00:17:52,000
so this particular approach to

429
00:17:50,720 --> 00:17:55,440
generalizing

430
00:17:52,000 --> 00:17:58,000
lock reduction doesn't seem useful

431
00:17:55,440 --> 00:17:59,200
can we look at block reduction in a

432
00:17:58,000 --> 00:18:01,520
different way

433
00:17:59,200 --> 00:18:03,760
and perhaps generalize it from a

434
00:18:01,520 --> 00:18:07,120
different perspective

435
00:18:03,760 --> 00:18:10,000
so the key observation here is that

436
00:18:07,120 --> 00:18:12,959
uh in the block reduction or basis

437
00:18:10,000 --> 00:18:15,120
reduction that i showed you earlier

438
00:18:12,960 --> 00:18:16,080
if we if you want to do block reduction

439
00:18:15,120 --> 00:18:19,280
for lattices

440
00:18:16,080 --> 00:18:20,480
rank d we only need to know about the

441
00:18:19,280 --> 00:18:24,960
nested sequence

442
00:18:20,480 --> 00:18:28,000
of sub lattices l1 through ld

443
00:18:24,960 --> 00:18:29,760
where each of these lis is just the

444
00:18:28,000 --> 00:18:32,960
integer linear combination

445
00:18:29,760 --> 00:18:36,480
of the first i basis vectors

446
00:18:32,960 --> 00:18:39,600
and and the i the block is just given by

447
00:18:36,480 --> 00:18:42,640
the projection of the i plus beta

448
00:18:39,600 --> 00:18:43,360
sub lattice orthogonal to the i minus

449
00:18:42,640 --> 00:18:47,120
one

450
00:18:43,360 --> 00:18:50,240
sub lattice now can we take

451
00:18:47,120 --> 00:18:50,719
this key observation and generalize this

452
00:18:50,240 --> 00:18:54,720
to

453
00:18:50,720 --> 00:18:57,760
module lattices it turns out that we can

454
00:18:54,720 --> 00:19:00,160
and to do this to capture this idea

455
00:18:57,760 --> 00:19:02,720
we introduce filtrations for module

456
00:19:00,160 --> 00:19:02,720
lattices

457
00:19:02,960 --> 00:19:08,320
so a filtration of a module lattice is

458
00:19:05,919 --> 00:19:11,679
just a nested sequence

459
00:19:08,320 --> 00:19:12,240
of module lattices uh so for modulation

460
00:19:11,679 --> 00:19:16,640
frame k

461
00:19:12,240 --> 00:19:19,120
we have a nested sequence m1 through mk

462
00:19:16,640 --> 00:19:20,559
and uh it has to satisfy the following

463
00:19:19,120 --> 00:19:23,320
three properties

464
00:19:20,559 --> 00:19:26,000
the first one uh primitivity is just a

465
00:19:23,320 --> 00:19:29,039
non-degeneracy property

466
00:19:26,000 --> 00:19:30,559
the second one is

467
00:19:29,039 --> 00:19:33,520
required we require that it has

468
00:19:30,559 --> 00:19:35,678
increasing ranks and this follows the

469
00:19:33,520 --> 00:19:38,240
same intuition as i described earlier

470
00:19:35,679 --> 00:19:40,080
for our euclidean lattice setting so if

471
00:19:38,240 --> 00:19:42,160
we go back here

472
00:19:40,080 --> 00:19:43,439
these sub lattices indeed have

473
00:19:42,160 --> 00:19:48,400
increasing ranks

474
00:19:43,440 --> 00:19:48,400
where each li sub lattice has rank i

475
00:19:49,679 --> 00:19:54,000
and the third property is that we

476
00:19:52,720 --> 00:19:57,280
require that it has

477
00:19:54,000 --> 00:19:59,400
rank 1 projections and

478
00:19:57,280 --> 00:20:00,879
this is just an analog of grammation

479
00:19:59,400 --> 00:20:04,320
orthogonalization

480
00:20:00,880 --> 00:20:06,799
in the context of modulo lattices so

481
00:20:04,320 --> 00:20:07,840
these mi tildas are defined as the

482
00:20:06,799 --> 00:20:12,320
projection

483
00:20:07,840 --> 00:20:14,399
of mi orthogonal to ny minus one

484
00:20:12,320 --> 00:20:15,520
for the experts in the audience you

485
00:20:14,400 --> 00:20:18,720
might notice

486
00:20:15,520 --> 00:20:20,320
that actually the first property implies

487
00:20:18,720 --> 00:20:21,760
the second and the second implies the

488
00:20:20,320 --> 00:20:24,399
third

489
00:20:21,760 --> 00:20:26,799
but we state all three for the sake of

490
00:20:24,400 --> 00:20:26,799
clarity

491
00:20:27,440 --> 00:20:33,760
and also we do show that every

492
00:20:31,360 --> 00:20:34,959
module lattice of rank k there exists a

493
00:20:33,760 --> 00:20:37,520
filtration

494
00:20:34,960 --> 00:20:40,559
for every module lattice of rank k and

495
00:20:37,520 --> 00:20:42,480
this can be computed efficiently

496
00:20:40,559 --> 00:20:44,639
the last point i'll make on the side is

497
00:20:42,480 --> 00:20:46,960
that we need to be careful

498
00:20:44,640 --> 00:20:48,960
about the projection map or the way we

499
00:20:46,960 --> 00:20:50,880
define the projection map

500
00:20:48,960 --> 00:20:52,159
and in particular we need to be careful

501
00:20:50,880 --> 00:20:54,640
about uh

502
00:20:52,159 --> 00:20:56,880
regarding the space is defined over and

503
00:20:54,640 --> 00:20:58,240
the associated norm

504
00:20:56,880 --> 00:21:00,400
if you're interested in these technical

505
00:20:58,240 --> 00:21:03,840
details you should definitely go

506
00:21:00,400 --> 00:21:03,840
check out our full version

507
00:21:05,840 --> 00:21:09,199
okay so just to draw out that third

508
00:21:08,480 --> 00:21:12,640
property

509
00:21:09,200 --> 00:21:14,320
a little bit more as i mentioned

510
00:21:12,640 --> 00:21:17,039
the third property is a rank one

511
00:21:14,320 --> 00:21:20,480
projections and this is essentially

512
00:21:17,039 --> 00:21:22,080
the analog of gram-schmidt in the case

513
00:21:20,480 --> 00:21:24,799
of module lattices

514
00:21:22,080 --> 00:21:27,520
so as you see here on the left-hand side

515
00:21:24,799 --> 00:21:29,679
the grand short diagonalization

516
00:21:27,520 --> 00:21:31,039
for euclidean lattices is v one total

517
00:21:29,679 --> 00:21:34,480
through b d tilde

518
00:21:31,039 --> 00:21:37,440
of over the euclidean space r

519
00:21:34,480 --> 00:21:39,919
and now with uh now that we have our

520
00:21:37,440 --> 00:21:42,080
filtration definition we can define

521
00:21:39,919 --> 00:21:43,520
an analog of that in the context of

522
00:21:42,080 --> 00:21:46,960
module lattices

523
00:21:43,520 --> 00:21:50,960
and as m1 tilde through md tilde

524
00:21:46,960 --> 00:21:50,960
of a module that is over the ring r

525
00:21:52,960 --> 00:21:58,080
okay so you might be wondering uh

526
00:21:56,000 --> 00:21:59,679
we want to do block reduction now on

527
00:21:58,080 --> 00:22:02,480
these filtrations

528
00:21:59,679 --> 00:22:03,039
on the filtration but each of these

529
00:22:02,480 --> 00:22:06,080
blocks

530
00:22:03,039 --> 00:22:07,760
is now consisting of module lattices

531
00:22:06,080 --> 00:22:09,439
and they're not consisting of vectors

532
00:22:07,760 --> 00:22:12,640
anymore so if you remember

533
00:22:09,440 --> 00:22:15,520
the idea for block reduction when we had

534
00:22:12,640 --> 00:22:17,039
euclidean lattices was just to take each

535
00:22:15,520 --> 00:22:20,080
block of these vectors and make the

536
00:22:17,039 --> 00:22:22,720
first vector the shortest in each block

537
00:22:20,080 --> 00:22:24,240
in order to generalize that idea instead

538
00:22:22,720 --> 00:22:25,760
of making the short

539
00:22:24,240 --> 00:22:28,480
the first vector the shortest in each

540
00:22:25,760 --> 00:22:31,919
block what we do instead is we make the

541
00:22:28,480 --> 00:22:35,200
densest rank one module the first sub

542
00:22:31,919 --> 00:22:37,919
module in each block and

543
00:22:35,200 --> 00:22:38,480
to capture this we introduce a new

544
00:22:37,919 --> 00:22:41,840
problem

545
00:22:38,480 --> 00:22:41,840
called the dense ideal problem

546
00:22:42,000 --> 00:22:45,280
i'll give a little bit more intuition on

547
00:22:44,080 --> 00:22:47,600
this slide so

548
00:22:45,280 --> 00:22:48,879
we define density in terms of

549
00:22:47,600 --> 00:22:52,080
determinants

550
00:22:48,880 --> 00:22:53,280
and essentially the more dense module

551
00:22:52,080 --> 00:22:56,320
lattice is

552
00:22:53,280 --> 00:22:59,600
the smaller it's determinant and this

553
00:22:56,320 --> 00:23:02,480
implies that it contains a short vector

554
00:22:59,600 --> 00:23:04,879
and if you're interested in more details

555
00:23:02,480 --> 00:23:07,440
check out our full version

556
00:23:04,880 --> 00:23:08,480
but this is all i have to say about our

557
00:23:07,440 --> 00:23:11,600
techniques

558
00:23:08,480 --> 00:23:13,679
so to summarize our paper and this talk

559
00:23:11,600 --> 00:23:15,120
these are the key takeaways that you

560
00:23:13,679 --> 00:23:18,240
should have

561
00:23:15,120 --> 00:23:21,280
the first one is that module lattices

562
00:23:18,240 --> 00:23:22,799
are used in

563
00:23:21,280 --> 00:23:24,240
current last space crypto schemes

564
00:23:22,799 --> 00:23:26,799
especially the ones that are considered

565
00:23:24,240 --> 00:23:26,799
by nist

566
00:23:27,760 --> 00:23:32,559
and we do know that there exists faster

567
00:23:30,320 --> 00:23:34,000
algorithms for module sap for rank one

568
00:23:32,559 --> 00:23:37,600
module lattices

569
00:23:34,000 --> 00:23:42,880
but we still don't know if this is true

570
00:23:37,600 --> 00:23:45,600
for higher rank module lattices

571
00:23:42,880 --> 00:23:46,559
and we in our work we make progress

572
00:23:45,600 --> 00:23:49,199
towards

573
00:23:46,559 --> 00:23:50,720
answering that question more

574
00:23:49,200 --> 00:23:53,919
specifically we show

575
00:23:50,720 --> 00:23:55,600
that solving module scp on a module

576
00:23:53,919 --> 00:23:58,880
lattice of rank k

577
00:23:55,600 --> 00:24:01,360
is no harder than solving it for

578
00:23:58,880 --> 00:24:04,159
modulus rank beta where beta is between

579
00:24:01,360 --> 00:24:06,959
two and k

580
00:24:04,159 --> 00:24:11,039
we do this by generalizing basis

581
00:24:06,960 --> 00:24:11,039
reduction techniques on lattices

582
00:24:11,840 --> 00:24:18,559
so here's all the references feel free

583
00:24:14,320 --> 00:24:26,480
to pause on this slide

584
00:24:18,559 --> 00:24:26,480
thank you for listening to this talk

