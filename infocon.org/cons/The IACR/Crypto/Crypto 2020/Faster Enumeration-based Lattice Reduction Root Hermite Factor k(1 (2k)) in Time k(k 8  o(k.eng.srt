1
00:00:00,719 --> 00:00:03,679
hello everyone i'm wei chang and in this

2
00:00:03,280 --> 00:00:05,359
talk

3
00:00:03,679 --> 00:00:07,680
i'm going to present a faster

4
00:00:05,359 --> 00:00:09,360
elimination based latest reduction

5
00:00:07,680 --> 00:00:11,280
which can be used to reach a low-term

6
00:00:09,360 --> 00:00:13,280
vector k to the one over two k

7
00:00:11,280 --> 00:00:14,399
in time k to the k over a plus a small

8
00:00:13,280 --> 00:00:15,920
order of k

9
00:00:14,400 --> 00:00:18,880
this is a draw drywall with martin

10
00:00:15,920 --> 00:00:20,560
albert scherbai plm focus focus net and

11
00:00:18,880 --> 00:00:22,080
demonstrating

12
00:00:20,560 --> 00:00:24,080
in more details we give a new

13
00:00:22,080 --> 00:00:25,519
immigration based lattice reduction

14
00:00:24,080 --> 00:00:27,759
and compared to the parallels of the

15
00:00:25,519 --> 00:00:29,519
same type we can reach the same quality

16
00:00:27,760 --> 00:00:30,640
y with a smaller time complexity than

17
00:00:29,519 --> 00:00:32,320
before

18
00:00:30,640 --> 00:00:33,840
and when the input lattice has a large

19
00:00:32,320 --> 00:00:36,320
enough dimension we can prove this

20
00:00:33,840 --> 00:00:37,680
improvement under heuristic assumption

21
00:00:36,320 --> 00:00:39,520
and when the dimension is small we can

22
00:00:37,680 --> 00:00:40,640
still sort in our estimation that this

23
00:00:39,520 --> 00:00:42,719
improvement still works

24
00:00:40,640 --> 00:00:44,960
for varying algorithms i will give more

25
00:00:42,719 --> 00:00:46,559
details about this later

26
00:00:44,960 --> 00:00:48,160
and to continue i will need to first

27
00:00:46,559 --> 00:00:49,519
introduce some necessary background

28
00:00:48,160 --> 00:00:51,360
ability scissor

29
00:00:49,520 --> 00:00:53,120
solar test is a set of regularly

30
00:00:51,360 --> 00:00:54,320
distributed point as you can see the

31
00:00:53,120 --> 00:00:56,000
blue points here

32
00:00:54,320 --> 00:00:57,440
which can be generated with the sets or

33
00:00:56,000 --> 00:01:00,640
linearly independent vectors

34
00:00:57,440 --> 00:01:02,399
like b1 b2 here and this is also known

35
00:01:00,640 --> 00:01:04,320
as a basis of the lattice

36
00:01:02,399 --> 00:01:05,680
and the similarities can have arbitrary

37
00:01:04,319 --> 00:01:08,240
main different spaces

38
00:01:05,680 --> 00:01:09,760
like c1 c2 here from another basis for

39
00:01:08,240 --> 00:01:11,039
the simulation

40
00:01:09,760 --> 00:01:12,720
and there are also two important

41
00:01:11,040 --> 00:01:13,760
invariants in lattices like the first

42
00:01:12,720 --> 00:01:15,840
minimum

43
00:01:13,760 --> 00:01:18,080
which is used to denote the norm of the

44
00:01:15,840 --> 00:01:19,920
thoughts non-zero vector in the lattice

45
00:01:18,080 --> 00:01:21,119
and also the volume of the lattice which

46
00:01:19,920 --> 00:01:23,439
can be computed

47
00:01:21,119 --> 00:01:25,520
as the determinant of any one basis of

48
00:01:23,439 --> 00:01:27,199
the lattice

49
00:01:25,520 --> 00:01:29,119
one of the most interesting and

50
00:01:27,200 --> 00:01:31,600
important problems dividing matrices is

51
00:01:29,119 --> 00:01:33,680
known as the sortest vector problem

52
00:01:31,600 --> 00:01:35,919
so we are given a basis of the lattice

53
00:01:33,680 --> 00:01:38,159
and you are asked to find a sulfur

54
00:01:35,920 --> 00:01:40,000
with norm equal to the first minimum of

55
00:01:38,159 --> 00:01:41,680
the lattice

56
00:01:40,000 --> 00:01:43,040
in this world we consider a variant of

57
00:01:41,680 --> 00:01:45,840
this problem which is called

58
00:01:43,040 --> 00:01:46,720
approximate hermit svp so again you are

59
00:01:45,840 --> 00:01:48,000
given a basis

60
00:01:46,720 --> 00:01:50,320
but now you are asked to file a

61
00:01:48,000 --> 00:01:52,000
subvector with non-upper boundary by the

62
00:01:50,320 --> 00:01:54,559
normalized mole of direction

63
00:01:52,000 --> 00:01:55,680
up to some vector gamma and by minkowski

64
00:01:54,560 --> 00:01:57,439
upper bound we know that the first

65
00:01:55,680 --> 00:01:59,040
minimum can be upper bounded by the

66
00:01:57,439 --> 00:02:00,639
normalized volume of the antecedent up

67
00:01:59,040 --> 00:02:03,360
to a vector square root of n

68
00:02:00,640 --> 00:02:04,320
so whenever you have size and xvp solar

69
00:02:03,360 --> 00:02:05,920
correspondingly

70
00:02:04,320 --> 00:02:08,478
you have the same size of approximate

71
00:02:05,920 --> 00:02:10,399
hemisp solver with approximation factor

72
00:02:08,479 --> 00:02:12,800
square root n

73
00:02:10,399 --> 00:02:15,120
and to solve this problem the best-known

74
00:02:12,800 --> 00:02:17,520
solution is to reduce the given basis

75
00:02:15,120 --> 00:02:18,800
to obtain a good one and to quantify the

76
00:02:17,520 --> 00:02:21,120
quality of a basis

77
00:02:18,800 --> 00:02:22,160
one can use the so-called hermit vector

78
00:02:21,120 --> 00:02:24,560
which can be computed

79
00:02:22,160 --> 00:02:26,000
as the normal of the solid spaces vector

80
00:02:24,560 --> 00:02:27,760
normally the first one

81
00:02:26,000 --> 00:02:30,000
divided by the normalized volume of the

82
00:02:27,760 --> 00:02:30,640
lattice and once you can reduce the

83
00:02:30,000 --> 00:02:32,480
bases

84
00:02:30,640 --> 00:02:34,160
between a smaller hammock factor then

85
00:02:32,480 --> 00:02:35,920
you can use it to solve approximate

86
00:02:34,160 --> 00:02:37,920
hermit xvp problem with a smaller

87
00:02:35,920 --> 00:02:40,000
approximation factor

88
00:02:37,920 --> 00:02:41,518
in practice the best null accuracy for

89
00:02:40,000 --> 00:02:46,000
reducing the bases

90
00:02:41,519 --> 00:02:48,080
is known as the pkz lattice reduction

91
00:02:46,000 --> 00:02:49,599
and to quantify how good a lattice

92
00:02:48,080 --> 00:02:51,200
reduction algorithm ether

93
00:02:49,599 --> 00:02:54,000
one can use the so-called root time

94
00:02:51,200 --> 00:02:55,518
vector it is a normalized version of the

95
00:02:54,000 --> 00:02:56,879
hermit vector normalized by the

96
00:02:55,519 --> 00:02:59,120
dimension of the lattice

97
00:02:56,879 --> 00:03:00,959
and this also introduces a quantity

98
00:02:59,120 --> 00:03:02,480
which is independent from the dimension

99
00:03:00,959 --> 00:03:05,040
of the lattice

100
00:03:02,480 --> 00:03:06,399
and if you are further interested in the

101
00:03:05,040 --> 00:03:08,879
concrete effect

102
00:03:06,400 --> 00:03:09,760
of a lattice reduction you can further

103
00:03:08,879 --> 00:03:12,879
look into the

104
00:03:09,760 --> 00:03:15,120
transmit organization of the bases

105
00:03:12,879 --> 00:03:16,799
so intuitively latest reduction help to

106
00:03:15,120 --> 00:03:19,120
reduce the basis

107
00:03:16,800 --> 00:03:20,400
such that for the resulting bases it has

108
00:03:19,120 --> 00:03:23,280
the grand smith vectors

109
00:03:20,400 --> 00:03:25,120
like beyonce and b2 star here with norms

110
00:03:23,280 --> 00:03:29,280
are closer to each other than before

111
00:03:25,120 --> 00:03:31,760
so then the norms of c1 star and c2 star

112
00:03:29,280 --> 00:03:33,360
and next i like to first record the bkz

113
00:03:31,760 --> 00:03:35,359
lattice reduction algorithm

114
00:03:33,360 --> 00:03:37,200
and then see how it differs from our new

115
00:03:35,360 --> 00:03:38,720
algorithm

116
00:03:37,200 --> 00:03:40,480
and to continue i need to introduce

117
00:03:38,720 --> 00:03:41,440
another notation called orthogonal

118
00:03:40,480 --> 00:03:44,720
projection

119
00:03:41,440 --> 00:03:47,120
so here for example i will use b32d2

120
00:03:44,720 --> 00:03:48,000
to denote b3 after removing the

121
00:03:47,120 --> 00:03:49,760
projection

122
00:03:48,000 --> 00:03:51,920
over the space span by the first two

123
00:03:49,760 --> 00:03:55,280
basis vector

124
00:03:51,920 --> 00:03:57,518
so now here comes the b case algorithm

125
00:03:55,280 --> 00:03:58,799
the input include a basis b denoted from

126
00:03:57,519 --> 00:04:01,040
b1 to bnr

127
00:03:58,799 --> 00:04:02,560
and also cross parameter k denoting how

128
00:04:01,040 --> 00:04:03,439
wrong the lattice reduction is going to

129
00:04:02,560 --> 00:04:04,959
be

130
00:04:03,439 --> 00:04:07,439
and the b k is the algorithm start by

131
00:04:04,959 --> 00:04:10,319
running an svp over the first block

132
00:04:07,439 --> 00:04:12,400
from b1 to bk and then use the final

133
00:04:10,319 --> 00:04:14,560
solid vector in the first blocker

134
00:04:12,400 --> 00:04:16,239
to update the first basis vector and

135
00:04:14,560 --> 00:04:17,918
then move to the second block

136
00:04:16,238 --> 00:04:19,918
and again use the found solids vector in

137
00:04:17,918 --> 00:04:20,880
the second block to update the second

138
00:04:19,918 --> 00:04:22,159
basis vector

139
00:04:20,880 --> 00:04:24,000
and then move to the next row and so and

140
00:04:22,160 --> 00:04:25,680
so forth by saying the second block i

141
00:04:24,000 --> 00:04:28,880
mean the second block after removing the

142
00:04:25,680 --> 00:04:31,520
projection over the first basis vector

143
00:04:28,880 --> 00:04:32,240
so the b k is the algorithm run svp from

144
00:04:31,520 --> 00:04:34,479
first block

145
00:04:32,240 --> 00:04:36,240
to the last block and also repeat this

146
00:04:34,479 --> 00:04:37,520
process a sufficient remaining time

147
00:04:36,240 --> 00:04:39,360
until for each block

148
00:04:37,520 --> 00:04:42,080
the first vector reach the first minimum

149
00:04:39,360 --> 00:04:44,400
of the corresponding block

150
00:04:42,080 --> 00:04:45,680
and to evaluate the cost of the bkz

151
00:04:44,400 --> 00:04:47,679
algorithm one can instead look at the

152
00:04:45,680 --> 00:04:49,919
cost of the underlying suv solver

153
00:04:47,680 --> 00:04:51,520
which is the most costly step inside the

154
00:04:49,919 --> 00:04:53,599
case zeta

155
00:04:51,520 --> 00:04:54,639
and the two most practical svp software

156
00:04:53,600 --> 00:04:57,520
families

157
00:04:54,639 --> 00:04:58,560
are implemented by c f and enumeration

158
00:04:57,520 --> 00:05:00,320
respectively

159
00:04:58,560 --> 00:05:01,919
and the ones implemented by sieve taking

160
00:05:00,320 --> 00:05:04,240
exponentially large spacer

161
00:05:01,919 --> 00:05:05,440
y for n ratio is just a small polynomial

162
00:05:04,240 --> 00:05:07,759
space

163
00:05:05,440 --> 00:05:08,880
but for animation the running time is

164
00:05:07,759 --> 00:05:12,080
super exponential

165
00:05:08,880 --> 00:05:13,759
when y for c is just an exponential

166
00:05:12,080 --> 00:05:15,840
even though the dominating constant as

167
00:05:13,759 --> 00:05:17,120
you can see here for inimitation is more

168
00:05:15,840 --> 00:05:18,560
than the one for silver

169
00:05:17,120 --> 00:05:20,320
but the low k factor will anyway

170
00:05:18,560 --> 00:05:21,919
eliminate this one t-shirt one's case is

171
00:05:20,320 --> 00:05:23,520
large enough

172
00:05:21,919 --> 00:05:25,440
and in this way we focus on the

173
00:05:23,520 --> 00:05:27,359
immigration-based sup solver

174
00:05:25,440 --> 00:05:28,800
so we are in the region of using a small

175
00:05:27,360 --> 00:05:30,560
polynomial spacer

176
00:05:28,800 --> 00:05:32,240
but super exponentially larger running

177
00:05:30,560 --> 00:05:34,720
time

178
00:05:32,240 --> 00:05:36,000
and in our simulation we always refer to

179
00:05:34,720 --> 00:05:38,960
the israeli pruning

180
00:05:36,000 --> 00:05:40,479
by gamma and grenade 2010 for an

181
00:05:38,960 --> 00:05:42,960
efficient implementation of the

182
00:05:40,479 --> 00:05:45,440
iteration

183
00:05:42,960 --> 00:05:47,359
and for comparison between our results

184
00:05:45,440 --> 00:05:48,000
and the prior ones including like bk

185
00:05:47,360 --> 00:05:52,080
zeta

186
00:05:48,000 --> 00:05:54,160
or sdbk0 so sdbkz is the variant of bkz

187
00:05:52,080 --> 00:05:56,960
you can be roughly like to run the bkz

188
00:05:54,160 --> 00:05:58,560
not only over the given basis but also

189
00:05:56,960 --> 00:05:59,359
over the dual basis of the given base

190
00:05:58,560 --> 00:06:02,400
system

191
00:05:59,360 --> 00:06:04,800
so for bkz or sdbk zeta

192
00:06:02,400 --> 00:06:05,679
relying on the innovation based suv

193
00:06:04,800 --> 00:06:07,360
solver

194
00:06:05,680 --> 00:06:09,680
to reach a quality like low hammer

195
00:06:07,360 --> 00:06:12,000
vector equal to k to the r2 k

196
00:06:09,680 --> 00:06:13,840
the time complexity is dominated by the

197
00:06:12,000 --> 00:06:15,919
underlying svp solver

198
00:06:13,840 --> 00:06:18,479
which is given as k to the k over 2e

199
00:06:15,919 --> 00:06:20,719
plus a small of k as mentioned before

200
00:06:18,479 --> 00:06:23,199
and in this work for reaching the same

201
00:06:20,720 --> 00:06:26,160
quality so the same locating vector

202
00:06:23,199 --> 00:06:28,080
we achieve a smaller time complexity

203
00:06:26,160 --> 00:06:31,520
which is k to the k over eight

204
00:06:28,080 --> 00:06:32,400
plus a small order of k before i go into

205
00:06:31,520 --> 00:06:34,479
more details of

206
00:06:32,400 --> 00:06:37,120
our new solution i'd like to first

207
00:06:34,479 --> 00:06:38,240
review both quality and time complexity

208
00:06:37,120 --> 00:06:40,000
in more details

209
00:06:38,240 --> 00:06:42,160
about the paragraphs and then step by

210
00:06:40,000 --> 00:06:44,400
step to see how our new algorithm

211
00:06:42,160 --> 00:06:46,840
differs from the paragraphs

212
00:06:44,400 --> 00:06:48,080
first let's review the quality of the

213
00:06:46,840 --> 00:06:49,919
parameter

214
00:06:48,080 --> 00:06:51,520
so here suppose this is the grand

215
00:06:49,919 --> 00:06:54,719
schmidt log number

216
00:06:51,520 --> 00:06:57,680
of the reduced basis after running sdbkz

217
00:06:54,720 --> 00:06:58,080
with the size case svp solver in this

218
00:06:57,680 --> 00:06:59,840
case

219
00:06:58,080 --> 00:07:01,520
this quantity that i denoting the

220
00:06:59,840 --> 00:07:04,239
proportion of between two

221
00:07:01,520 --> 00:07:05,198
successive grain speed norms is well

222
00:07:04,240 --> 00:07:08,080
studied by the paper

223
00:07:05,199 --> 00:07:09,039
missenser in water in 2016 which tells

224
00:07:08,080 --> 00:07:12,318
that this quantity

225
00:07:09,039 --> 00:07:13,680
that i is fixed for different index eyes

226
00:07:12,319 --> 00:07:15,759
outside this last block

227
00:07:13,680 --> 00:07:17,280
so it introduced a straight line here

228
00:07:15,759 --> 00:07:18,800
outside the last block

229
00:07:17,280 --> 00:07:20,479
and in this case i will also call this

230
00:07:18,800 --> 00:07:23,280
data i as the slope

231
00:07:20,479 --> 00:07:24,960
of this slide and in this way we

232
00:07:23,280 --> 00:07:25,359
consider a slightly different variant of

233
00:07:24,960 --> 00:07:27,440
this

234
00:07:25,360 --> 00:07:28,800
resultant so we will replace the

235
00:07:27,440 --> 00:07:30,960
underlying suv solver

236
00:07:28,800 --> 00:07:32,720
with the same sizer but approximate

237
00:07:30,960 --> 00:07:35,198
hermes svp solar

238
00:07:32,720 --> 00:07:37,280
again if you run sdbk0 with the

239
00:07:35,199 --> 00:07:39,520
approximate hermit sup solver

240
00:07:37,280 --> 00:07:40,799
and again with size k then you will

241
00:07:39,520 --> 00:07:42,960
again obtain

242
00:07:40,800 --> 00:07:45,120
a straight line here outside the last

243
00:07:42,960 --> 00:07:47,359
block

244
00:07:45,120 --> 00:07:49,199
and we also know the slope of this of

245
00:07:47,360 --> 00:07:49,919
this line in this case is equal to the

246
00:07:49,199 --> 00:07:52,479
square

247
00:07:49,919 --> 00:07:54,960
of the root time vector achieved by the

248
00:07:52,479 --> 00:07:57,120
given approximate hermit xvp solver

249
00:07:54,960 --> 00:07:59,280
but this is not the case for b k zero so

250
00:07:57,120 --> 00:08:02,000
for because this quantity delta i

251
00:07:59,280 --> 00:08:03,919
is not fixer for difference index i so

252
00:08:02,000 --> 00:08:06,479
it does not give a line

253
00:08:03,919 --> 00:08:08,240
and we refer the audience the two to the

254
00:08:06,479 --> 00:08:09,359
appendix of our paper in april

255
00:08:08,240 --> 00:08:12,479
for more details for the case of

256
00:08:09,360 --> 00:08:13,199
vacation and also because of this good

257
00:08:12,479 --> 00:08:15,758
property

258
00:08:13,199 --> 00:08:16,560
the trip by sdkz we choose it as a sub

259
00:08:15,759 --> 00:08:19,199
routing

260
00:08:16,560 --> 00:08:20,240
in our new algorithm for reaching our

261
00:08:19,199 --> 00:08:21,840
new result

262
00:08:20,240 --> 00:08:23,840
but it does not mean that it is

263
00:08:21,840 --> 00:08:25,919
impossible to use bk0 for reaching the

264
00:08:23,840 --> 00:08:27,919
same result as well we can use

265
00:08:25,919 --> 00:08:30,960
as well we can reach using sdp cases

266
00:08:27,919 --> 00:08:34,000
here and we leave it as a future work

267
00:08:30,960 --> 00:08:36,640
and next let's move to the cost so

268
00:08:34,000 --> 00:08:37,519
let's focus on the last block to ensure

269
00:08:36,640 --> 00:08:38,718
the first place

270
00:08:37,519 --> 00:08:41,200
of the last block reach the first

271
00:08:38,719 --> 00:08:42,159
minimum of this blocker one need to run

272
00:08:41,200 --> 00:08:44,640
an enumeration

273
00:08:42,159 --> 00:08:47,519
over this full block and this is known

274
00:08:44,640 --> 00:08:50,080
to be realized by the kanan's algorithm

275
00:08:47,519 --> 00:08:50,720
so one need to first reduce this broker

276
00:08:50,080 --> 00:08:52,800
so that

277
00:08:50,720 --> 00:08:54,399
except for the first placer each place

278
00:08:52,800 --> 00:08:56,079
from second place to the anon

279
00:08:54,399 --> 00:08:57,600
reached the first minimum of the

280
00:08:56,080 --> 00:08:58,640
corresponding block from this place to

281
00:08:57,600 --> 00:09:01,519
the end

282
00:08:58,640 --> 00:09:03,360
and the last step is a full inrational

283
00:09:01,519 --> 00:09:05,760
over this full block

284
00:09:03,360 --> 00:09:08,320
and the time complexity is well analyzed

285
00:09:05,760 --> 00:09:10,720
by a host delay in 2007.

286
00:09:08,320 --> 00:09:13,360
is given as k to the k over 2e plus a

287
00:09:10,720 --> 00:09:15,680
small order of k

288
00:09:13,360 --> 00:09:16,959
and this is also known as the worst case

289
00:09:15,680 --> 00:09:19,279
inversion course

290
00:09:16,959 --> 00:09:21,199
over size case lattice but this worst

291
00:09:19,279 --> 00:09:23,920
case cost is not the case for each

292
00:09:21,200 --> 00:09:26,959
blocker for example for the first block

293
00:09:23,920 --> 00:09:29,599
over a three liner the iteration cost is

294
00:09:26,959 --> 00:09:30,800
only k to the k over eta plus a small

295
00:09:29,600 --> 00:09:33,360
dot key

296
00:09:30,800 --> 00:09:34,079
and this difference also introduce a

297
00:09:33,360 --> 00:09:37,279
conjecture

298
00:09:34,080 --> 00:09:39,279
for long time data it seems possible to

299
00:09:37,279 --> 00:09:41,920
achieve the same quality

300
00:09:39,279 --> 00:09:44,080
like the one achieved by sdbk zeta but

301
00:09:41,920 --> 00:09:46,719
with a reduced overall time complexity

302
00:09:44,080 --> 00:09:47,920
like k to the q8 instead of the category

303
00:09:46,720 --> 00:09:49,760
k over 3.

304
00:09:47,920 --> 00:09:51,760
and this will give a positive answer to

305
00:09:49,760 --> 00:09:53,760
this conjecture

306
00:09:51,760 --> 00:09:56,800
and before i continue i'd like to make

307
00:09:53,760 --> 00:09:59,760
one more remark over this last block

308
00:09:56,800 --> 00:10:00,880
so in the following i will always assume

309
00:09:59,760 --> 00:10:02,959
for this last block

310
00:10:00,880 --> 00:10:04,480
each placer reach the first minimum of

311
00:10:02,959 --> 00:10:05,839
the corresponding block from this place

312
00:10:04,480 --> 00:10:07,839
to the end

313
00:10:05,839 --> 00:10:09,600
and this corresponds to the so-called

314
00:10:07,839 --> 00:10:11,519
hkz reduce space scissor

315
00:10:09,600 --> 00:10:14,480
so that's why also why i will also call

316
00:10:11,519 --> 00:10:17,760
the corresponding block here

317
00:10:14,480 --> 00:10:20,000
the curve here as hkg curve

318
00:10:17,760 --> 00:10:21,439
and there are two remarks first this is

319
00:10:20,000 --> 00:10:24,000
not promised by the

320
00:10:21,440 --> 00:10:25,600
sd behavior reduction and second this

321
00:10:24,000 --> 00:10:27,200
additional assumption also does not

322
00:10:25,600 --> 00:10:28,640
introduce a larger overall time

323
00:10:27,200 --> 00:10:31,600
complexity

324
00:10:28,640 --> 00:10:34,480
so now let's move to our solution so how

325
00:10:31,600 --> 00:10:34,480
can we do better

326
00:10:34,640 --> 00:10:38,800
so we know that the the main obstacle is

327
00:10:36,800 --> 00:10:40,399
from the information cost over this last

328
00:10:38,800 --> 00:10:42,719
block of size kr

329
00:10:40,399 --> 00:10:44,720
which take a k to the k over to e so

330
00:10:42,720 --> 00:10:47,360
instead of one sdbk z

331
00:10:44,720 --> 00:10:48,079
with a size case svp solver now we

332
00:10:47,360 --> 00:10:50,800
change them

333
00:10:48,079 --> 00:10:52,479
to run the sdbk data with the reduced

334
00:10:50,800 --> 00:10:54,240
size suv server

335
00:10:52,480 --> 00:10:55,519
so that the innovation cost over this

336
00:10:54,240 --> 00:10:57,200
reduced sizer

337
00:10:55,519 --> 00:10:59,600
is well controlled within this expedited

338
00:10:57,200 --> 00:11:00,720
cluster but this also introduced a

339
00:10:59,600 --> 00:11:02,959
straight line

340
00:11:00,720 --> 00:11:03,760
outside the last block with a larger

341
00:11:02,959 --> 00:11:05,760
slope

342
00:11:03,760 --> 00:11:08,640
such that for the first basis vector

343
00:11:05,760 --> 00:11:10,720
node it has a larger normal than before

344
00:11:08,640 --> 00:11:12,079
so you achieve a worse hermit vector and

345
00:11:10,720 --> 00:11:14,320
luhami factor

346
00:11:12,079 --> 00:11:16,079
so we have to continue to reduce this

347
00:11:14,320 --> 00:11:19,279
basis

348
00:11:16,079 --> 00:11:20,319
such that for the resulting first basis

349
00:11:19,279 --> 00:11:22,480
vector

350
00:11:20,320 --> 00:11:23,760
we achieve the same norm as before so

351
00:11:22,480 --> 00:11:25,839
achieve the same

352
00:11:23,760 --> 00:11:28,160
hermit vector and low harmony vector so

353
00:11:25,839 --> 00:11:30,079
this is our target

354
00:11:28,160 --> 00:11:31,279
in more details as we promised now we

355
00:11:30,079 --> 00:11:34,000
changed to run

356
00:11:31,279 --> 00:11:34,640
sdbk zeta with the reduced size suv

357
00:11:34,000 --> 00:11:36,399
solar

358
00:11:34,640 --> 00:11:38,240
and here i'm going to denote the reduced

359
00:11:36,399 --> 00:11:40,560
side by k0 so e

360
00:11:38,240 --> 00:11:42,560
k times t of eta approximately equal to

361
00:11:40,560 --> 00:11:44,399
0.6 m time k

362
00:11:42,560 --> 00:11:45,839
such that the worst case emulation cost

363
00:11:44,399 --> 00:11:47,600
over this reduced sizer

364
00:11:45,839 --> 00:11:48,959
can well control reading this expected

365
00:11:47,600 --> 00:11:51,040
cluster and

366
00:11:48,959 --> 00:11:52,160
as you can see here and also you will

367
00:11:51,040 --> 00:11:54,639
see in the following a

368
00:11:52,160 --> 00:11:56,160
different block size like a k0 will get

369
00:11:54,639 --> 00:11:58,320
involved in our new algorithm

370
00:11:56,160 --> 00:12:01,839
and k here we only serve as a cross

371
00:11:58,320 --> 00:12:03,279
parameter instead of a block size

372
00:12:01,839 --> 00:12:06,079
and again by meaning koski upper mount

373
00:12:03,279 --> 00:12:08,959
we know that k0 dimensional svp server

374
00:12:06,079 --> 00:12:10,160
implies the same size approximate hermit

375
00:12:08,959 --> 00:12:12,719
xvp solver

376
00:12:10,160 --> 00:12:13,760
with approximation factor square root k0

377
00:12:12,720 --> 00:12:15,680
and this implies

378
00:12:13,760 --> 00:12:18,399
actually for the k0 dimensional layer

379
00:12:15,680 --> 00:12:20,160
tester we can already reach a hemifactor

380
00:12:18,399 --> 00:12:22,880
square root k0 and also the

381
00:12:20,160 --> 00:12:24,639
corresponding and locating factor here

382
00:12:22,880 --> 00:12:26,639
and together with the relation between k

383
00:12:24,639 --> 00:12:29,120
zero and k we can derive

384
00:12:26,639 --> 00:12:30,880
our starting lookup vector so k to the

385
00:12:29,120 --> 00:12:33,040
power of 1.36 time k

386
00:12:30,880 --> 00:12:33,920
and this is for sure much larger than

387
00:12:33,040 --> 00:12:36,800
our targeting

388
00:12:33,920 --> 00:12:37,519
location vector so now we already have a

389
00:12:36,800 --> 00:12:40,560
starting

390
00:12:37,519 --> 00:12:42,720
approximate hermes svp solver with

391
00:12:40,560 --> 00:12:45,040
reaching this starting local vector in

392
00:12:42,720 --> 00:12:47,360
time k to the k over eight

393
00:12:45,040 --> 00:12:48,079
and next we aim to contract from this

394
00:12:47,360 --> 00:12:51,040
starting one

395
00:12:48,079 --> 00:12:53,519
can draw a new one approximate sup

396
00:12:51,040 --> 00:12:55,120
server with a new approximation factor

397
00:12:53,519 --> 00:12:57,440
over a new dimension

398
00:12:55,120 --> 00:12:59,680
still in time k to the k of 8 while

399
00:12:57,440 --> 00:13:01,760
reaching a smaller row time vector

400
00:12:59,680 --> 00:13:03,920
if we can achieve this then we can

401
00:13:01,760 --> 00:13:05,360
repeat such processor sufficiently many

402
00:13:03,920 --> 00:13:08,479
times until we reach

403
00:13:05,360 --> 00:13:09,760
this target ruling vector so this is the

404
00:13:08,480 --> 00:13:12,720
general idea

405
00:13:09,760 --> 00:13:14,480
of our new algorithm and in the

406
00:13:12,720 --> 00:13:16,320
following slide i'm going to detail the

407
00:13:14,480 --> 00:13:18,240
first step

408
00:13:16,320 --> 00:13:19,440
so here for example i'm going to take k

409
00:13:18,240 --> 00:13:22,079
equal 1000

410
00:13:19,440 --> 00:13:24,560
so we can start with the svp over

411
00:13:22,079 --> 00:13:25,839
reduced size around 617

412
00:13:24,560 --> 00:13:27,839
and we can check the worst case

413
00:13:25,839 --> 00:13:30,800
inversion cost over this radius size

414
00:13:27,839 --> 00:13:32,800
as well reading this is a expected cost

415
00:13:30,800 --> 00:13:36,240
and also make a note on the starting

416
00:13:32,800 --> 00:13:37,120
rohmi effect now here comes the first

417
00:13:36,240 --> 00:13:40,000
step

418
00:13:37,120 --> 00:13:40,320
we are going to fit the sdbkz oracle

419
00:13:40,000 --> 00:13:42,320
with

420
00:13:40,320 --> 00:13:43,680
our starting approximate hermit svp

421
00:13:42,320 --> 00:13:46,079
solar

422
00:13:43,680 --> 00:13:47,599
and this helps to reduce a basis of

423
00:13:46,079 --> 00:13:49,120
larger dimension

424
00:13:47,600 --> 00:13:51,680
and for the corresponding grand smith

425
00:13:49,120 --> 00:13:53,600
log norms it has a one straight lighter

426
00:13:51,680 --> 00:13:55,359
outside last block with slope

427
00:13:53,600 --> 00:13:57,839
equal to the square of the root timing

428
00:13:55,360 --> 00:14:00,240
vector achieved by the given approximate

429
00:13:57,839 --> 00:14:02,079
hermite suv solar

430
00:14:00,240 --> 00:14:03,680
and knowing the slope and also the

431
00:14:02,079 --> 00:14:04,399
restriction of the elevation over this

432
00:14:03,680 --> 00:14:06,160
regional

433
00:14:04,399 --> 00:14:08,000
we can know the largest sizer that we

434
00:14:06,160 --> 00:14:10,399
can immerse over this straight line

435
00:14:08,000 --> 00:14:11,839
over this green region and together with

436
00:14:10,399 --> 00:14:14,480
the starting dimension k 0

437
00:14:11,839 --> 00:14:16,240
we can know the next dimension k1 and

438
00:14:14,480 --> 00:14:17,360
again by mean koski upper bound can know

439
00:14:16,240 --> 00:14:18,959
the upper bound of the norm of the

440
00:14:17,360 --> 00:14:19,360
solution returned by the animation over

441
00:14:18,959 --> 00:14:21,599
this

442
00:14:19,360 --> 00:14:23,120
straight line and together with the

443
00:14:21,600 --> 00:14:23,839
wallet of the whole lattice we can

444
00:14:23,120 --> 00:14:26,320
compute

445
00:14:23,839 --> 00:14:27,279
the new hermit vector in the new low

446
00:14:26,320 --> 00:14:28,839
time factor

447
00:14:27,279 --> 00:14:30,480
and as you can see here it's getting

448
00:14:28,839 --> 00:14:32,560
smaller

449
00:14:30,480 --> 00:14:34,160
and again with this new approximate

450
00:14:32,560 --> 00:14:36,719
hermit suvp solver

451
00:14:34,160 --> 00:14:37,600
reaching a smaller load time effector we

452
00:14:36,720 --> 00:14:40,639
can fit it

453
00:14:37,600 --> 00:14:42,079
to the sdbkj oracle and this can help to

454
00:14:40,639 --> 00:14:44,399
reduce a basis

455
00:14:42,079 --> 00:14:45,680
of even larger dimensions and for the

456
00:14:44,399 --> 00:14:48,160
corresponding grand seminal

457
00:14:45,680 --> 00:14:49,040
norms you can see a new segment of

458
00:14:48,160 --> 00:14:51,760
lighter

459
00:14:49,040 --> 00:14:52,639
with even smaller slope and this even

460
00:14:51,760 --> 00:14:56,079
smaller slope

461
00:14:52,639 --> 00:14:59,199
can help to introduce an even smaller

462
00:14:56,079 --> 00:15:01,359
root timing vector and once we can

463
00:14:59,199 --> 00:15:03,359
repeat this process of sufficiently many

464
00:15:01,360 --> 00:15:06,240
times then we can eventually approach

465
00:15:03,360 --> 00:15:08,639
our targeting local factor so this is

466
00:15:06,240 --> 00:15:11,040
our general idea in more details

467
00:15:08,639 --> 00:15:13,279
and next i wanted to first recall sorry

468
00:15:11,040 --> 00:15:17,360
i would like to first give an intuition

469
00:15:13,279 --> 00:15:19,439
about overall cost of our new algorithm

470
00:15:17,360 --> 00:15:21,519
so here first we know the enumeration

471
00:15:19,440 --> 00:15:22,720
cost at each iteration is well bounded

472
00:15:21,519 --> 00:15:25,440
by k 3k over 8

473
00:15:22,720 --> 00:15:26,079
as we decide and once we only need to

474
00:15:25,440 --> 00:15:27,839
run

475
00:15:26,079 --> 00:15:29,439
the logarithmic number of iteration for

476
00:15:27,839 --> 00:15:30,160
approaching our target logarithmic

477
00:15:29,440 --> 00:15:32,240
vector

478
00:15:30,160 --> 00:15:33,759
then the overall time complexity will be

479
00:15:32,240 --> 00:15:36,720
k to the cable later

480
00:15:33,759 --> 00:15:38,399
plus a small or a small of key and

481
00:15:36,720 --> 00:15:39,440
actually we can prove this is indeed the

482
00:15:38,399 --> 00:15:42,160
case

483
00:15:39,440 --> 00:15:43,839
and next if we look closer into the this

484
00:15:42,160 --> 00:15:45,839
grand seminal norms

485
00:15:43,839 --> 00:15:47,120
of the reduced basis by our new

486
00:15:45,839 --> 00:15:49,279
algorithm we can see

487
00:15:47,120 --> 00:15:50,880
there are different segments of liner

488
00:15:49,279 --> 00:15:52,399
with the different slope here

489
00:15:50,880 --> 00:15:54,160
and this is different from the one

490
00:15:52,399 --> 00:15:56,320
generated by sdbk zeta

491
00:15:54,160 --> 00:15:58,480
which only get one one straight line

492
00:15:56,320 --> 00:16:00,560
with one global slope

493
00:15:58,480 --> 00:16:02,320
and together with the picture below so

494
00:16:00,560 --> 00:16:03,279
as the algorithm procedure you can see

495
00:16:02,320 --> 00:16:06,160
the slope

496
00:16:03,279 --> 00:16:06,720
is getting smaller and smaller actually

497
00:16:06,160 --> 00:16:08,719
this match

498
00:16:06,720 --> 00:16:09,759
our intuition about the reduction of

499
00:16:08,720 --> 00:16:12,000
lattice reduction

500
00:16:09,759 --> 00:16:13,120
which help to reduce the bases such that

501
00:16:12,000 --> 00:16:14,560
the grand spin norms

502
00:16:13,120 --> 00:16:16,399
are getting closer and closer to each

503
00:16:14,560 --> 00:16:18,399
other that's why the proportion

504
00:16:16,399 --> 00:16:20,320
between two successive grain synonyms is

505
00:16:18,399 --> 00:16:22,399
getting smaller and smaller

506
00:16:20,320 --> 00:16:23,519
and as the accurate procedure will

507
00:16:22,399 --> 00:16:25,759
eventually reach

508
00:16:23,519 --> 00:16:27,519
one segment of light with slope

509
00:16:25,759 --> 00:16:31,040
approaching the one

510
00:16:27,519 --> 00:16:33,839
generated by sdbk-z and this

511
00:16:31,040 --> 00:16:34,399
slope also helps to to reach the lochem

512
00:16:33,839 --> 00:16:37,120
factor

513
00:16:34,399 --> 00:16:37,120
the expected

514
00:16:38,000 --> 00:16:42,160
and last i would like to make one more

515
00:16:40,079 --> 00:16:44,959
remark about the rookham effect

516
00:16:42,160 --> 00:16:47,120
after 10 times or iteration so 10 here

517
00:16:44,959 --> 00:16:50,638
equal to the logarithm of the cosmetic

518
00:16:47,120 --> 00:16:52,560
k equal 1000 so after logarith

519
00:16:50,639 --> 00:16:54,399
logarithmic number or iteration

520
00:16:52,560 --> 00:16:56,959
the local factor already covers very

521
00:16:54,399 --> 00:16:58,639
well so this match our intuition

522
00:16:56,959 --> 00:17:00,079
that we only need a logarithmic number

523
00:16:58,639 --> 00:17:02,320
of iterations for approaching our

524
00:17:00,079 --> 00:17:03,920
targeting aloha factor

525
00:17:02,320 --> 00:17:06,319
and next i'd like to keep the full

526
00:17:03,920 --> 00:17:08,000
description of our new algorithm which

527
00:17:06,319 --> 00:17:10,079
we call fast in new algorithm

528
00:17:08,000 --> 00:17:11,199
aims to control an approximate hermit

529
00:17:10,079 --> 00:17:13,678
svp solver

530
00:17:11,199 --> 00:17:16,160
with approximation factor gamma i i is

531
00:17:13,679 --> 00:17:18,400
the number or iteration level

532
00:17:16,160 --> 00:17:20,319
other inputs include cost parameter key

533
00:17:18,400 --> 00:17:21,919
and also basis b

534
00:17:20,319 --> 00:17:23,599
so once if you are in the first

535
00:17:21,919 --> 00:17:24,640
iteration you just run the worst case

536
00:17:23,599 --> 00:17:26,719
inversion

537
00:17:24,640 --> 00:17:28,160
over this reduce size with cost within

538
00:17:26,720 --> 00:17:29,440
this expanded cost

539
00:17:28,160 --> 00:17:31,440
and if you are not in the first

540
00:17:29,440 --> 00:17:34,240
iteration then pre-process with

541
00:17:31,440 --> 00:17:35,840
sdbkz with the approximate hermit sup

542
00:17:34,240 --> 00:17:37,600
solar from last iteration

543
00:17:35,840 --> 00:17:39,360
and then run an enumeration over this

544
00:17:37,600 --> 00:17:42,000
the region correspond to the first

545
00:17:39,360 --> 00:17:44,159
segment of line

546
00:17:42,000 --> 00:17:46,080
and for the analysis we need a heuristic

547
00:17:44,160 --> 00:17:47,760
assumption we need to assume that

548
00:17:46,080 --> 00:17:49,360
each gamma approximately hermit

549
00:17:47,760 --> 00:17:51,760
superserver return

550
00:17:49,360 --> 00:17:52,799
an answer with normal exactly equal to

551
00:17:51,760 --> 00:17:54,480
the normalized volume of the

552
00:17:52,799 --> 00:17:57,200
corresponding block after vector gamma

553
00:17:54,480 --> 00:17:57,200
and not smaller

554
00:17:57,760 --> 00:18:01,360
and formally in d we can prove that the

555
00:17:59,919 --> 00:18:03,360
omega 1 iteration

556
00:18:01,360 --> 00:18:05,439
will be sufficient for approaching the

557
00:18:03,360 --> 00:18:07,600
inspector aloha factor

558
00:18:05,440 --> 00:18:09,280
up to a vector one plus some order one

559
00:18:07,600 --> 00:18:11,439
in the small nano in time

560
00:18:09,280 --> 00:18:12,559
k to the k o a plus s mod of k times the

561
00:18:11,440 --> 00:18:15,600
polynomial of the psi

562
00:18:12,559 --> 00:18:17,360
input basis b and if you still remember

563
00:18:15,600 --> 00:18:18,879
for each iteration now we need to work

564
00:18:17,360 --> 00:18:20,719
over lattice

565
00:18:18,880 --> 00:18:23,280
of the dimension of this size k larger

566
00:18:20,720 --> 00:18:25,360
than before so with omega 1 iteration

567
00:18:23,280 --> 00:18:27,520
that's why we need the overall dimension

568
00:18:25,360 --> 00:18:28,399
to be roughly like omega 1 factor larger

569
00:18:27,520 --> 00:18:30,720
than k

570
00:18:28,400 --> 00:18:32,400
but this is not satisfiable for click

571
00:18:30,720 --> 00:18:33,440
analysis for cryptosystem magnus

572
00:18:32,400 --> 00:18:36,080
candidate

573
00:18:33,440 --> 00:18:37,360
where we require the dimension n to be

574
00:18:36,080 --> 00:18:40,399
relatively close to k

575
00:18:37,360 --> 00:18:43,520
like n over k is constant so

576
00:18:40,400 --> 00:18:44,240
instead to run an image over this 100

577
00:18:43,520 --> 00:18:47,440
lighter

578
00:18:44,240 --> 00:18:49,520
we proposed a new practical variant

579
00:18:47,440 --> 00:18:51,520
where the innovation journal also

580
00:18:49,520 --> 00:18:53,840
covered the hkg journal

581
00:18:51,520 --> 00:18:54,639
so for the practical variant now we inra

582
00:18:53,840 --> 00:18:58,240
also

583
00:18:54,640 --> 00:19:00,799
over the combination of stray light

584
00:18:58,240 --> 00:19:02,320
and part of the hkg curve so now the

585
00:19:00,799 --> 00:19:03,039
question becomes how can we distribute

586
00:19:02,320 --> 00:19:04,720
the proportion

587
00:19:03,039 --> 00:19:06,240
for the straight line and proportion for

588
00:19:04,720 --> 00:19:08,799
the hkg curve

589
00:19:06,240 --> 00:19:10,320
to answer this discretion we try to

590
00:19:08,799 --> 00:19:13,200
generate the cluster

591
00:19:10,320 --> 00:19:14,799
for a different distribution so for

592
00:19:13,200 --> 00:19:16,880
example when c equals zero

593
00:19:14,799 --> 00:19:19,039
it means to emulate over the hkg curve

594
00:19:16,880 --> 00:19:21,360
so this is the worst case cluster

595
00:19:19,039 --> 00:19:24,480
so when c corner it corresponds to em

596
00:19:21,360 --> 00:19:25,520
right over this 100 liner and as you can

597
00:19:24,480 --> 00:19:28,480
see here

598
00:19:25,520 --> 00:19:29,120
when c equals 0.25 we reach the lowest

599
00:19:28,480 --> 00:19:30,880
quarter

600
00:19:29,120 --> 00:19:32,959
that's why we choose this value for our

601
00:19:30,880 --> 00:19:34,720
practical variant

602
00:19:32,960 --> 00:19:36,799
and the second issue is about tearing

603
00:19:34,720 --> 00:19:38,400
block so for each middle block

604
00:19:36,799 --> 00:19:40,160
you can always be processed to have this

605
00:19:38,400 --> 00:19:42,320
straight line plus hkg curve and then

606
00:19:40,160 --> 00:19:44,880
you can emerge over this uh

607
00:19:42,320 --> 00:19:45,840
displacement scraper so 25 percent of

608
00:19:44,880 --> 00:19:48,320
strain line and

609
00:19:45,840 --> 00:19:49,840
rest the hkg curve to reach the lowest

610
00:19:48,320 --> 00:19:51,520
cost

611
00:19:49,840 --> 00:19:54,320
but for the tearing blow you can normal

612
00:19:51,520 --> 00:19:56,000
in ray of this presumed stripper

613
00:19:54,320 --> 00:19:58,080
so the immersion cost can be much larger

614
00:19:56,000 --> 00:20:00,080
than the expedited cost in this case

615
00:19:58,080 --> 00:20:01,199
so we have to reduce the size of this

616
00:20:00,080 --> 00:20:03,439
block

617
00:20:01,200 --> 00:20:04,559
and this will certainly introduce worse

618
00:20:03,440 --> 00:20:06,400
quality for this

619
00:20:04,559 --> 00:20:07,760
local blogger but in the simulation

620
00:20:06,400 --> 00:20:09,679
later as we will see

621
00:20:07,760 --> 00:20:11,520
this modification will not affect the

622
00:20:09,679 --> 00:20:13,760
global quality a lot

623
00:20:11,520 --> 00:20:15,120
and these two modifications together

624
00:20:13,760 --> 00:20:18,559
introduce our

625
00:20:15,120 --> 00:20:20,799
practical variant in the simulation and

626
00:20:18,559 --> 00:20:22,000
we can see the simulated cost of the

627
00:20:20,799 --> 00:20:25,679
practical variant of it

628
00:20:22,000 --> 00:20:27,280
one over a curve very well and also you

629
00:20:25,679 --> 00:20:29,840
can see there's a test slide

630
00:20:27,280 --> 00:20:30,879
even below this one away curve and this

631
00:20:29,840 --> 00:20:32,639
that's right

632
00:20:30,880 --> 00:20:34,159
correspond to the last step inversion

633
00:20:32,640 --> 00:20:37,280
cost without considering

634
00:20:34,159 --> 00:20:37,840
any processing cost and we will give

635
00:20:37,280 --> 00:20:39,760
more

636
00:20:37,840 --> 00:20:41,600
discussion about this later and in the

637
00:20:39,760 --> 00:20:43,120
picture below you can see the quality

638
00:20:41,600 --> 00:20:45,120
so the low current vector achieved by

639
00:20:43,120 --> 00:20:46,879
the practical variant

640
00:20:45,120 --> 00:20:50,719
is at least as good as the one achieved

641
00:20:46,880 --> 00:20:52,640
by the bk0 standard because it

642
00:20:50,720 --> 00:20:53,760
to conclude for reaching the same low

643
00:20:52,640 --> 00:20:55,919
timing vector

644
00:20:53,760 --> 00:20:58,320
we achieve a smaller time complexity k

645
00:20:55,919 --> 00:21:01,840
to the qa plus a small of k

646
00:20:58,320 --> 00:21:02,799
instead of the o1 and considering the

647
00:21:01,840 --> 00:21:04,559
contact acceleration

648
00:21:02,799 --> 00:21:06,080
we can get a further a factor of two

649
00:21:04,559 --> 00:21:08,480
improvement

650
00:21:06,080 --> 00:21:09,600
and this improvement is supported by a

651
00:21:08,480 --> 00:21:12,159
different evidence

652
00:21:09,600 --> 00:21:13,520
for different regional parameter so when

653
00:21:12,159 --> 00:21:16,240
the dimension is large enough

654
00:21:13,520 --> 00:21:17,760
like n over case or mecha1 we can prove

655
00:21:16,240 --> 00:21:18,880
this improvement under heuristic

656
00:21:17,760 --> 00:21:20,559
assumption

657
00:21:18,880 --> 00:21:22,320
but when the dimension is small like in

658
00:21:20,559 --> 00:21:24,080
our case constant 2

659
00:21:22,320 --> 00:21:25,600
this improvement is spotted by our

660
00:21:24,080 --> 00:21:28,799
simulation analysis

661
00:21:25,600 --> 00:21:31,199
of the practical variant

662
00:21:28,799 --> 00:21:32,960
for visual works so first it will be

663
00:21:31,200 --> 00:21:33,679
interesting to remove the heuristic

664
00:21:32,960 --> 00:21:36,799
assumption

665
00:21:33,679 --> 00:21:37,760
that used in our analysis we know that

666
00:21:36,799 --> 00:21:41,039
it is possible

667
00:21:37,760 --> 00:21:43,520
to follow the works of horse delay 2007

668
00:21:41,039 --> 00:21:44,559
plus either on hopefully study 11 or

669
00:21:43,520 --> 00:21:46,559
number 17

670
00:21:44,559 --> 00:21:48,158
so india was the managed to remove the

671
00:21:46,559 --> 00:21:50,080
heuristic assumption

672
00:21:48,159 --> 00:21:52,000
in the analysis of time complexity for

673
00:21:50,080 --> 00:21:54,000
bkz

674
00:21:52,000 --> 00:21:55,120
and second it will be interesting to see

675
00:21:54,000 --> 00:21:57,280
an extension

676
00:21:55,120 --> 00:22:00,239
of our worker to other lattice reduction

677
00:21:57,280 --> 00:22:02,559
algorithm l to pkz or slide reduction

678
00:22:00,240 --> 00:22:03,600
for bkz as we already mentioned it does

679
00:22:02,559 --> 00:22:06,799
not introduce

680
00:22:03,600 --> 00:22:08,559
a straight line outside the last block

681
00:22:06,799 --> 00:22:11,200
so it will introduce additional

682
00:22:08,559 --> 00:22:12,559
complications for the analysis

683
00:22:11,200 --> 00:22:14,480
and it will be more interesting for

684
00:22:12,559 --> 00:22:15,120
slight reduction so the expectation is

685
00:22:14,480 --> 00:22:16,480
that

686
00:22:15,120 --> 00:22:18,559
reaching the same improvement for the

687
00:22:16,480 --> 00:22:19,280
time complexity so from k to the cable

688
00:22:18,559 --> 00:22:22,158
to e

689
00:22:19,280 --> 00:22:24,158
to be k to k over eight by reaching

690
00:22:22,159 --> 00:22:25,760
while maintaining the same quality

691
00:22:24,159 --> 00:22:27,280
as the one achieved by a slight

692
00:22:25,760 --> 00:22:30,240
reduction

693
00:22:27,280 --> 00:22:31,678
and further without pre-processing cost

694
00:22:30,240 --> 00:22:32,640
the last step in relation cost can be

695
00:22:31,679 --> 00:22:35,760
even below

696
00:22:32,640 --> 00:22:36,960
k to the kelvin so it seems possible to

697
00:22:35,760 --> 00:22:38,080
do some trade off between the

698
00:22:36,960 --> 00:22:40,480
pre-processing cost

699
00:22:38,080 --> 00:22:41,840
and the last step iteration cost so that

700
00:22:40,480 --> 00:22:43,679
the overall cost can be

701
00:22:41,840 --> 00:22:44,959
below k to the l8 while maintaining the

702
00:22:43,679 --> 00:22:48,240
same quality as

703
00:22:44,960 --> 00:22:50,320
we can achieve for now

704
00:22:48,240 --> 00:22:52,080
or in other words using the same cost

705
00:22:50,320 --> 00:22:55,520
here while approaching

706
00:22:52,080 --> 00:22:58,879
even better quality and last is about

707
00:22:55,520 --> 00:23:00,240
the cryptography relevance of this work

708
00:22:58,880 --> 00:23:02,320
so in this way we already have some

709
00:23:00,240 --> 00:23:04,240
tries for this small n1k region

710
00:23:02,320 --> 00:23:06,639
which corresponds to the analysis for

711
00:23:04,240 --> 00:23:09,200
cryptosystem like next candidate

712
00:23:06,640 --> 00:23:10,640
but in our works we only have simulation

713
00:23:09,200 --> 00:23:13,280
results with our

714
00:23:10,640 --> 00:23:14,000
formal analysis so it will be very

715
00:23:13,280 --> 00:23:17,440
interesting

716
00:23:14,000 --> 00:23:19,600
to see a formal analysis to cover that

717
00:23:17,440 --> 00:23:20,960
we indeed have this improvement from k

718
00:23:19,600 --> 00:23:23,520
to the cable to e

719
00:23:20,960 --> 00:23:24,880
to capital q eta for this small nvk

720
00:23:23,520 --> 00:23:26,720
regional

721
00:23:24,880 --> 00:23:28,240
and after that it will be interesting to

722
00:23:26,720 --> 00:23:30,799
continue to see the

723
00:23:28,240 --> 00:23:31,280
the concrete new concrete crossover

724
00:23:30,799 --> 00:23:33,840
point

725
00:23:31,280 --> 00:23:35,280
between our new algorithm and the seed

726
00:23:33,840 --> 00:23:36,959
based lattice reduction like the justice

727
00:23:35,280 --> 00:23:39,600
card-based lattice reduction

728
00:23:36,960 --> 00:23:40,080
for concrete cryptography parameter in

729
00:23:39,600 --> 00:23:42,799
both

730
00:23:40,080 --> 00:23:45,799
classical and content setting and this

731
00:23:42,799 --> 00:23:48,799
completes my talk and thank you for your

732
00:23:45,799 --> 00:23:48,799
attention

