1
00:00:00,719 --> 00:00:04,720
hello welcome to this presentation on

2
00:00:02,560 --> 00:00:06,798
compressed sigma protocol theory

3
00:00:04,720 --> 00:00:07,759
my name is thomas atama and this is

4
00:00:06,799 --> 00:00:10,960
joint work with

5
00:00:07,759 --> 00:00:11,759
ronald kramer in this work we aim to

6
00:00:10,960 --> 00:00:14,480
find efficient

7
00:00:11,759 --> 00:00:16,480
circuit serial knowledge protocols and

8
00:00:14,480 --> 00:00:18,960
we know that sigma protocol theory

9
00:00:16,480 --> 00:00:21,119
forms a well-established theory for

10
00:00:18,960 --> 00:00:24,240
zero-knowledge proofs

11
00:00:21,119 --> 00:00:26,240
however applying this theory directly to

12
00:00:24,240 --> 00:00:28,080
find circuit share knowledge particles

13
00:00:26,240 --> 00:00:29,840
results in a communication complexity

14
00:00:28,080 --> 00:00:32,239
that is linear in the size of the

15
00:00:29,840 --> 00:00:32,240
circuit

16
00:00:32,558 --> 00:00:36,079
however recently an alternative became

17
00:00:34,880 --> 00:00:38,960
available

18
00:00:36,079 --> 00:00:41,040
bullet proofs bullet proofs achieve a

19
00:00:38,960 --> 00:00:43,600
logarithmic communication complexity for

20
00:00:41,040 --> 00:00:45,600
circuit share knowledge

21
00:00:43,600 --> 00:00:48,079
we note that bullet proofs were actually

22
00:00:45,600 --> 00:00:50,960
presented as a drop in replacement for

23
00:00:48,079 --> 00:00:50,960
sigma protocols

24
00:00:51,760 --> 00:00:56,239
in this work we follow a rather

25
00:00:54,239 --> 00:00:58,160
different approach

26
00:00:56,239 --> 00:01:00,559
we aim to reconcile bullet proofs with

27
00:00:58,160 --> 00:01:03,120
sigma protocol theory

28
00:01:00,559 --> 00:01:04,959
namely we show that bullet proofs or an

29
00:01:03,120 --> 00:01:07,200
adaptation of bullet proofs

30
00:01:04,959 --> 00:01:08,640
forms a significant strengthening of

31
00:01:07,200 --> 00:01:12,000
sigma protocol theory

32
00:01:08,640 --> 00:01:14,320
rather than a replacement

33
00:01:12,000 --> 00:01:15,920
our approach follows a linearization

34
00:01:14,320 --> 00:01:18,720
strategy

35
00:01:15,920 --> 00:01:20,799
namely we solve linear instances first

36
00:01:18,720 --> 00:01:22,640
and then the linearized than lon linear

37
00:01:20,799 --> 00:01:24,400
instances

38
00:01:22,640 --> 00:01:26,720
we believe that this linearization

39
00:01:24,400 --> 00:01:28,240
strategy is amongst the most natural

40
00:01:26,720 --> 00:01:30,240
problem-solving strategies in

41
00:01:28,240 --> 00:01:32,479
mathematics

42
00:01:30,240 --> 00:01:35,039
moreover it fits seamlessly with sigma

43
00:01:32,479 --> 00:01:37,439
protocol theory

44
00:01:35,040 --> 00:01:40,079
in contrast bullet-proof starting point

45
00:01:37,439 --> 00:01:43,279
is a protocol for a specific quadratic

46
00:01:40,079 --> 00:01:45,199
rather than linear relation

47
00:01:43,280 --> 00:01:47,200
our approach makes use of the following

48
00:01:45,200 --> 00:01:48,960
three observations

49
00:01:47,200 --> 00:01:50,720
first we show that an adaptation of

50
00:01:48,960 --> 00:01:54,000
bullet proofs gives a compression

51
00:01:50,720 --> 00:01:56,320
mechanism for standard sigma protocols

52
00:01:54,000 --> 00:01:59,119
we start with a compact commitment to a

53
00:01:56,320 --> 00:02:01,360
long vector

54
00:01:59,119 --> 00:02:03,840
second we show how to prove correctness

55
00:02:01,360 --> 00:02:07,280
of the evaluations of arbitrary linear

56
00:02:03,840 --> 00:02:09,039
forms in compactly committed factors

57
00:02:07,280 --> 00:02:11,680
we show how to do this with logarithmic

58
00:02:09,038 --> 00:02:14,799
communication

59
00:02:11,680 --> 00:02:16,000
in other words we show how to solve the

60
00:02:14,800 --> 00:02:18,560
linear instances

61
00:02:16,000 --> 00:02:20,400
of the circuit zero knowledge problem

62
00:02:18,560 --> 00:02:23,040
second we adapt the techniques from

63
00:02:20,400 --> 00:02:25,599
calmer domguard and pastro

64
00:02:23,040 --> 00:02:26,959
in our adaptation we start with a single

65
00:02:25,599 --> 00:02:28,959
compact commitment

66
00:02:26,959 --> 00:02:32,400
to all the coefficients of three long

67
00:02:28,959 --> 00:02:34,879
vectors of multiplication triples

68
00:02:32,400 --> 00:02:36,319
combining arithmetic secret sharing with

69
00:02:34,879 --> 00:02:39,518
point 1

70
00:02:36,319 --> 00:02:42,079
that is our compressed sigma protocol

71
00:02:39,519 --> 00:02:43,519
we obtain logarithmic size proof of

72
00:02:42,080 --> 00:02:45,440
correctness

73
00:02:43,519 --> 00:02:48,080
for the corresponding multiplicative

74
00:02:45,440 --> 00:02:48,079
relations

75
00:02:48,160 --> 00:02:52,560
finally we obtained circuit share

76
00:02:50,720 --> 00:02:54,560
knowledge protocols by reducing the

77
00:02:52,560 --> 00:02:58,720
circuitry knowledge problem to proven

78
00:02:54,560 --> 00:02:58,720
correctness of multiplication triples

79
00:02:59,040 --> 00:03:02,720
let us consider the following circuit

80
00:03:00,800 --> 00:03:04,319
serial knowledge setting

81
00:03:02,720 --> 00:03:06,159
in this setting we let the square

82
00:03:04,319 --> 00:03:07,518
brackets denote some vector commitment

83
00:03:06,159 --> 00:03:09,440
scheme

84
00:03:07,519 --> 00:03:11,599
this commitment scheme allows a proofer

85
00:03:09,440 --> 00:03:14,879
to commit to n-dimensional z-q

86
00:03:11,599 --> 00:03:17,599
factors in a single group element g

87
00:03:14,879 --> 00:03:20,159
in this notation we leave the commitment

88
00:03:17,599 --> 00:03:22,799
randomness implicit

89
00:03:20,159 --> 00:03:24,480
moreover we let c be some arithmetic

90
00:03:22,800 --> 00:03:26,319
circuit

91
00:03:24,480 --> 00:03:28,560
we will restrict ourselves to arithmetic

92
00:03:26,319 --> 00:03:30,720
circuits with output dimension 1 but all

93
00:03:28,560 --> 00:03:34,560
the results easily generalize

94
00:03:30,720 --> 00:03:34,560
to arbitrary output dimensions

95
00:03:35,040 --> 00:03:38,640
now we aim to find protocols that allow

96
00:03:37,840 --> 00:03:40,959
approver

97
00:03:38,640 --> 00:03:42,399
to prove knowledge of some commitment

98
00:03:40,959 --> 00:03:45,280
opening acts

99
00:03:42,400 --> 00:03:46,159
corresponding to some public commitment

100
00:03:45,280 --> 00:03:50,319
such that c

101
00:03:46,159 --> 00:03:52,399
of x equals zero moreover we aim to find

102
00:03:50,319 --> 00:03:55,200
a protocol that is honest verifier

103
00:03:52,400 --> 00:03:55,200
zero knowledge

104
00:03:55,599 --> 00:03:58,840
in this work we will focus on the

105
00:03:57,120 --> 00:04:01,760
communication efficiency of the

106
00:03:58,840 --> 00:04:03,439
protocols

107
00:04:01,760 --> 00:04:05,040
the remainder of this presentation will

108
00:04:03,439 --> 00:04:07,040
contain the following elements

109
00:04:05,040 --> 00:04:08,879
we will start with our main pivot which

110
00:04:07,040 --> 00:04:10,798
is a standard sigma protocol for opening

111
00:04:08,879 --> 00:04:12,159
linear forms on compactly committed

112
00:04:10,799 --> 00:04:14,239
factors

113
00:04:12,159 --> 00:04:16,079
second we will show how to reduce the

114
00:04:14,239 --> 00:04:20,000
communication complexity

115
00:04:16,079 --> 00:04:21,759
of this protocol down to logarithmic

116
00:04:20,000 --> 00:04:24,800
three we will show how to prove

117
00:04:21,759 --> 00:04:26,720
multiplicative relations

118
00:04:24,800 --> 00:04:28,400
four we will show how to combine these

119
00:04:26,720 --> 00:04:30,880
ingredients to achieve circuit serial

120
00:04:28,400 --> 00:04:33,320
knowledge protocols

121
00:04:30,880 --> 00:04:35,199
five we will supply some

122
00:04:33,320 --> 00:04:37,199
compactification techniques

123
00:04:35,199 --> 00:04:39,199
that are required for many practical

124
00:04:37,199 --> 00:04:42,639
scenarios

125
00:04:39,199 --> 00:04:44,320
six we will show that this entire

126
00:04:42,639 --> 00:04:47,440
framework can be instantiated from

127
00:04:44,320 --> 00:04:50,080
various cryptographic assumptions

128
00:04:47,440 --> 00:04:50,479
and finally we mention recent follow-up

129
00:04:50,080 --> 00:04:53,599
work

130
00:04:50,479 --> 00:04:55,360
on proofs of partial knowledge the

131
00:04:53,600 --> 00:04:58,000
remainder of this presentation we let

132
00:04:55,360 --> 00:05:02,560
gpu group of primordic q

133
00:04:58,000 --> 00:05:06,240
moreover we let g1 up to gn

134
00:05:02,560 --> 00:05:08,400
be a vector of group elements

135
00:05:06,240 --> 00:05:10,320
for such a factor we consider

136
00:05:08,400 --> 00:05:13,599
multi-exponentiation g to the power

137
00:05:10,320 --> 00:05:16,240
x where x is an n-dimensional z-q

138
00:05:13,600 --> 00:05:17,840
factor this multi-exponentiation is

139
00:05:16,240 --> 00:05:21,759
defined as the product of g

140
00:05:17,840 --> 00:05:25,198
i to the power x i for i ranging from 1

141
00:05:21,759 --> 00:05:27,280
to n

142
00:05:25,199 --> 00:05:29,280
moreover we assume that the proofer does

143
00:05:27,280 --> 00:05:30,239
not know a non-trivial discrete log

144
00:05:29,280 --> 00:05:34,479
relation

145
00:05:30,240 --> 00:05:36,880
for the the group elements g1 up to gn

146
00:05:34,479 --> 00:05:38,400
a non-trivial discrete log relation is

147
00:05:36,880 --> 00:05:40,880
simply a non-zero factor

148
00:05:38,400 --> 00:05:44,560
x such that g to the power x equals the

149
00:05:40,880 --> 00:05:44,560
identity element of the group g

150
00:05:46,160 --> 00:05:50,639
a peterson vector commitment is actually

151
00:05:48,479 --> 00:05:52,719
a multi-exponentiation

152
00:05:50,639 --> 00:05:54,880
more precisely a commitment to a vector

153
00:05:52,720 --> 00:05:57,680
x is equal to g to the power

154
00:05:54,880 --> 00:06:01,120
x times h to the power gamma or gamma is

155
00:05:57,680 --> 00:06:01,120
some random ring element

156
00:06:01,919 --> 00:06:05,680
the peterson vector commitment scheme is

157
00:06:04,240 --> 00:06:07,680
compact

158
00:06:05,680 --> 00:06:09,680
meaning that regardless of the dimension

159
00:06:07,680 --> 00:06:10,960
and a commitment is a single group

160
00:06:09,680 --> 00:06:13,360
element

161
00:06:10,960 --> 00:06:15,198
it is unconditionally hiding and it is

162
00:06:13,360 --> 00:06:16,639
computationally binding under the

163
00:06:15,199 --> 00:06:18,800
assumption that the proofer

164
00:06:16,639 --> 00:06:21,199
does not know a non-trivial discrete log

165
00:06:18,800 --> 00:06:25,280
relation between the group elements g1

166
00:06:21,199 --> 00:06:26,639
to gn and h for notational convenience

167
00:06:25,280 --> 00:06:29,039
we will work with

168
00:06:26,639 --> 00:06:30,479
more general multi-exponentiations

169
00:06:29,039 --> 00:06:32,000
rather than the peterson vector

170
00:06:30,479 --> 00:06:33,758
commitments

171
00:06:32,000 --> 00:06:36,080
now we have come to our pivotal sigma

172
00:06:33,759 --> 00:06:37,919
protocol for opening linear forms

173
00:06:36,080 --> 00:06:39,440
this protocol is a sigma protocol for

174
00:06:37,919 --> 00:06:41,280
the following relation

175
00:06:39,440 --> 00:06:42,719
in which we have a public group element

176
00:06:41,280 --> 00:06:47,119
b a linear form

177
00:06:42,720 --> 00:06:50,400
l and a scalar y and a secret witness

178
00:06:47,120 --> 00:06:53,759
x such that g to the power x

179
00:06:50,400 --> 00:06:57,198
equals b and l evaluated in x equals

180
00:06:53,759 --> 00:06:58,080
y the sigma protocol therefore allows a

181
00:06:57,199 --> 00:07:01,039
proofer

182
00:06:58,080 --> 00:07:02,000
to show that the secret witness x

183
00:07:01,039 --> 00:07:05,759
satisfy some

184
00:07:02,000 --> 00:07:07,280
linear relation we note that

185
00:07:05,759 --> 00:07:09,759
the functionality of this protocol

186
00:07:07,280 --> 00:07:10,880
trivially generalizes to opening of fine

187
00:07:09,759 --> 00:07:15,120
forms

188
00:07:10,880 --> 00:07:15,120
that is linear forms plus a constant

189
00:07:15,199 --> 00:07:19,120
this slide depicts the standard sigma

190
00:07:17,199 --> 00:07:21,120
protocol for the aforementioned linear

191
00:07:19,120 --> 00:07:23,680
relation r

192
00:07:21,120 --> 00:07:24,880
it takes as input three public elements

193
00:07:23,680 --> 00:07:28,639
the group element p

194
00:07:24,880 --> 00:07:31,599
the linear form l and the scalar y

195
00:07:28,639 --> 00:07:32,160
and has a secret input only known to the

196
00:07:31,599 --> 00:07:35,280
proofer

197
00:07:32,160 --> 00:07:37,039
namely the factor x without

198
00:07:35,280 --> 00:07:39,039
diving into the details we mentioned

199
00:07:37,039 --> 00:07:39,680
that the sigma protocol is perfectly

200
00:07:39,039 --> 00:07:42,240
complete

201
00:07:39,680 --> 00:07:45,840
special honest verifier zero knowledge

202
00:07:42,240 --> 00:07:48,000
and special sound

203
00:07:45,840 --> 00:07:49,919
we have shown our basic sigma protocol

204
00:07:48,000 --> 00:07:52,080
for opening linear forms

205
00:07:49,919 --> 00:07:53,680
next we show how to compress its

206
00:07:52,080 --> 00:07:56,240
communication complexity

207
00:07:53,680 --> 00:07:57,120
from linear down to logarithmic using an

208
00:07:56,240 --> 00:08:00,479
adaptation

209
00:07:57,120 --> 00:08:02,240
of bulletproof's compression mechanism

210
00:08:00,479 --> 00:08:03,680
the main bottleneck in the communication

211
00:08:02,240 --> 00:08:05,919
complexity of this

212
00:08:03,680 --> 00:08:06,800
standard sigma protocol is in the

213
00:08:05,919 --> 00:08:09,440
response

214
00:08:06,800 --> 00:08:12,400
z the response set is namely an

215
00:08:09,440 --> 00:08:14,400
n-dimensional vector

216
00:08:12,400 --> 00:08:16,239
however we can also observe that this

217
00:08:14,400 --> 00:08:18,560
final response set

218
00:08:16,240 --> 00:08:20,400
is actually a witness of another element

219
00:08:18,560 --> 00:08:23,919
in exactly the same relation

220
00:08:20,400 --> 00:08:23,919
r that we started off with

221
00:08:24,960 --> 00:08:30,000
hence sending this final message set

222
00:08:28,240 --> 00:08:30,800
this final response is actually a

223
00:08:30,000 --> 00:08:34,399
trivial

224
00:08:30,800 --> 00:08:36,320
proof of knowledge for this relation r

225
00:08:34,399 --> 00:08:38,399
the proofer namely proves knowledge of

226
00:08:36,320 --> 00:08:41,279
this witness set by simply revealing

227
00:08:38,399 --> 00:08:42,719
this witness set

228
00:08:41,279 --> 00:08:44,560
any other proof of knowledge for this

229
00:08:42,719 --> 00:08:45,920
relation would actually suffice in this

230
00:08:44,560 --> 00:08:47,680
stage

231
00:08:45,920 --> 00:08:50,079
moreover this proof of knowledge does

232
00:08:47,680 --> 00:08:53,439
not have to be zero knowledge

233
00:08:50,080 --> 00:08:55,440
because the trivial one clearly is not

234
00:08:53,440 --> 00:08:58,000
so our aim in the next couple of slides

235
00:08:55,440 --> 00:09:00,240
is going to be to replace this final

236
00:08:58,000 --> 00:09:02,959
response this trivial proof of knowledge

237
00:09:00,240 --> 00:09:03,920
by a more efficient proof of knowledge

238
00:09:02,959 --> 00:09:06,839
for relation

239
00:09:03,920 --> 00:09:08,240
r to this end we consider the following

240
00:09:06,839 --> 00:09:11,279
notation

241
00:09:08,240 --> 00:09:11,760
for a vector g of group elements g 1 up

242
00:09:11,279 --> 00:09:15,279
to g

243
00:09:11,760 --> 00:09:19,439
n we consider its left half g 1 up to

244
00:09:15,279 --> 00:09:20,839
g n over 2. and similarly we consider

245
00:09:19,440 --> 00:09:24,560
its right half

246
00:09:20,839 --> 00:09:27,839
gr we do exactly the same thing for

247
00:09:24,560 --> 00:09:30,880
zq factors and also for linear forms

248
00:09:27,839 --> 00:09:35,120
so for all of these vectors and forms

249
00:09:30,880 --> 00:09:37,279
we consider left and right halves

250
00:09:35,120 --> 00:09:39,680
given this notation we can continue to

251
00:09:37,279 --> 00:09:42,720
our compression mechanism

252
00:09:39,680 --> 00:09:44,719
this compression mechanism is a proof of

253
00:09:42,720 --> 00:09:46,560
knowledge for exactly the same relation

254
00:09:44,720 --> 00:09:48,880
r that we started off with

255
00:09:46,560 --> 00:09:51,920
it is an appropriate adaptation of the

256
00:09:48,880 --> 00:09:54,880
bulletproof compression mechanism

257
00:09:51,920 --> 00:09:55,920
the protocol now goes as follows the

258
00:09:54,880 --> 00:09:59,279
proofer first

259
00:09:55,920 --> 00:10:02,560
computes these four cross terms so

260
00:09:59,279 --> 00:10:03,600
the two group elements a and b namely gr

261
00:10:02,560 --> 00:10:07,760
to the power x

262
00:10:03,600 --> 00:10:10,959
l and vice versa g l to the power x r

263
00:10:07,760 --> 00:10:14,000
and similarly it computes these two

264
00:10:10,959 --> 00:10:19,040
cross terms l r x

265
00:10:14,000 --> 00:10:20,720
l and l l x r

266
00:10:19,040 --> 00:10:23,439
the proofer now sends these four cross

267
00:10:20,720 --> 00:10:25,360
terms to the verifier who samples

268
00:10:23,440 --> 00:10:27,680
a random challenge and sends this

269
00:10:25,360 --> 00:10:29,519
challenge back to the proofer

270
00:10:27,680 --> 00:10:30,719
the proofer now computes the final

271
00:10:29,519 --> 00:10:34,399
response x

272
00:10:30,720 --> 00:10:35,200
l plus c times x r and given this

273
00:10:34,399 --> 00:10:38,240
response

274
00:10:35,200 --> 00:10:43,760
the verifier performs the following two

275
00:10:38,240 --> 00:10:46,079
checks the protocol can be seen to be

276
00:10:43,760 --> 00:10:48,079
perfectly complete hence an honest

277
00:10:46,079 --> 00:10:51,359
verifier will accept any

278
00:10:48,079 --> 00:10:54,719
conversation with an honest prover

279
00:10:51,360 --> 00:10:58,000
moreover it can also be seen to be

280
00:10:54,720 --> 00:10:58,000
three special sounds

281
00:10:58,079 --> 00:11:02,640
in addition we see that this final

282
00:10:59,760 --> 00:11:05,760
response set

283
00:11:02,640 --> 00:11:08,959
as dimension n over two

284
00:11:05,760 --> 00:11:11,360
so the total communication complexity

285
00:11:08,959 --> 00:11:13,599
is roughly half of the communication

286
00:11:11,360 --> 00:11:15,279
complexity

287
00:11:13,600 --> 00:11:18,240
of the trivial proof of knowledge that

288
00:11:15,279 --> 00:11:18,240
we started off with

289
00:11:19,040 --> 00:11:23,360
finally we observed that this final

290
00:11:20,959 --> 00:11:27,518
response set is again

291
00:11:23,360 --> 00:11:28,320
a witness for a relation very similar to

292
00:11:27,519 --> 00:11:31,360
the relation

293
00:11:28,320 --> 00:11:34,640
r the only difference is that

294
00:11:31,360 --> 00:11:38,800
dimension in this relation is not n

295
00:11:34,640 --> 00:11:40,839
but n over two this final observation

296
00:11:38,800 --> 00:11:44,079
implies that we can apply this

297
00:11:40,839 --> 00:11:46,160
compression once again and again reduce

298
00:11:44,079 --> 00:11:49,199
the dimension of the witness by a factor

299
00:11:46,160 --> 00:11:51,279
two we can apply this compression

300
00:11:49,200 --> 00:11:53,279
mechanism therefore recursively

301
00:11:51,279 --> 00:11:56,639
until the dimension of the final witness

302
00:11:53,279 --> 00:11:58,320
equals one

303
00:11:56,639 --> 00:12:00,560
another way to look at this compression

304
00:11:58,320 --> 00:12:02,399
mechanism is to see that the final

305
00:12:00,560 --> 00:12:04,959
response of the proofer

306
00:12:02,399 --> 00:12:07,040
is actually an encoding of the secret

307
00:12:04,959 --> 00:12:09,839
exponent vector x

308
00:12:07,040 --> 00:12:10,560
this encoding is parametrized by the

309
00:12:09,839 --> 00:12:14,160
challenge

310
00:12:10,560 --> 00:12:16,399
c taking a closer look at this encoding

311
00:12:14,160 --> 00:12:20,079
we see that an encoding of a vector x

312
00:12:16,399 --> 00:12:22,839
is actually equal to c times set comma z

313
00:12:20,079 --> 00:12:25,519
for some n over two dimensional vector

314
00:12:22,839 --> 00:12:28,240
set hence the dimension of

315
00:12:25,519 --> 00:12:28,959
the image of this encoding function is n

316
00:12:28,240 --> 00:12:32,079
over 2

317
00:12:28,959 --> 00:12:33,518
for any challenge c this property

318
00:12:32,079 --> 00:12:36,319
results in the reduction of the

319
00:12:33,519 --> 00:12:39,200
communication complexity

320
00:12:36,320 --> 00:12:40,800
moreover it is easily seen that by

321
00:12:39,200 --> 00:12:43,440
lagrange interpolation

322
00:12:40,800 --> 00:12:45,120
we can reconstruct secret exponent x

323
00:12:43,440 --> 00:12:48,320
from any three different

324
00:12:45,120 --> 00:12:50,399
encodings of this vector x

325
00:12:48,320 --> 00:12:53,120
in other words the protocol is indeed

326
00:12:50,399 --> 00:12:56,240
tree special sound

327
00:12:53,120 --> 00:12:58,480
we now denote by c for the

328
00:12:56,240 --> 00:12:59,600
recursive composition of sigma protocol

329
00:12:58,480 --> 00:13:03,920
pi zero

330
00:12:59,600 --> 00:13:03,920
and compression protocol by one

331
00:13:04,079 --> 00:13:07,760
by c is actually a special honest

332
00:13:06,240 --> 00:13:08,480
verifier zero knowledge proof of

333
00:13:07,760 --> 00:13:11,839
knowledge

334
00:13:08,480 --> 00:13:13,839
for relation r it has a logarithmic

335
00:13:11,839 --> 00:13:16,320
communication complexity

336
00:13:13,839 --> 00:13:18,880
and we say it is a compressed sigma

337
00:13:16,320 --> 00:13:18,880
protocol

338
00:13:19,200 --> 00:13:22,399
we clearly see that the compression

339
00:13:21,120 --> 00:13:24,880
mechanism acts as an

340
00:13:22,399 --> 00:13:25,839
extension to the basic sigma protocol by

341
00:13:24,880 --> 00:13:28,480
zero

342
00:13:25,839 --> 00:13:31,760
and reduces its communication complexity

343
00:13:28,480 --> 00:13:33,440
from linear to logarithmic

344
00:13:31,760 --> 00:13:35,600
thus far we have seen how to handle

345
00:13:33,440 --> 00:13:37,120
linear instances of our circuit sharing

346
00:13:35,600 --> 00:13:40,160
knowledge problem

347
00:13:37,120 --> 00:13:41,920
let us now look at our cdp-12 adaptation

348
00:13:40,160 --> 00:13:43,680
and show how to prove multiplicative

349
00:13:41,920 --> 00:13:45,599
relations

350
00:13:43,680 --> 00:13:47,040
our approach uses a linearization

351
00:13:45,600 --> 00:13:49,279
strategy

352
00:13:47,040 --> 00:13:51,360
more precisely we linearize this

353
00:13:49,279 --> 00:13:53,199
nonlinear problem by using a packed

354
00:13:51,360 --> 00:13:55,199
secret sharing scheme

355
00:13:53,199 --> 00:13:57,279
this backed secret sharing scheme should

356
00:13:55,199 --> 00:14:00,959
have strong multiplicativity

357
00:13:57,279 --> 00:14:03,199
and one privacy in this presentation we

358
00:14:00,959 --> 00:14:04,959
consider shamir secret sharing scheme

359
00:14:03,199 --> 00:14:07,040
but any other linear secret sharing

360
00:14:04,959 --> 00:14:11,599
scheme with these two properties

361
00:14:07,040 --> 00:14:14,480
suffices our cdp 12 adaptation

362
00:14:11,600 --> 00:14:17,279
allows us to prove correctness of long

363
00:14:14,480 --> 00:14:20,399
vectors of multiplication triples

364
00:14:17,279 --> 00:14:22,639
that is we have factors a b and c

365
00:14:20,399 --> 00:14:24,480
such that c is the component-wise

366
00:14:22,639 --> 00:14:28,079
product of the vectors a

367
00:14:24,480 --> 00:14:30,160
and b to prove correctness of these long

368
00:14:28,079 --> 00:14:33,279
vectors of multiplication triples

369
00:14:30,160 --> 00:14:35,600
we define two polynomials f and g

370
00:14:33,279 --> 00:14:37,680
f is a polynomial of degree at most m

371
00:14:35,600 --> 00:14:40,959
that is uniquely defined by these

372
00:14:37,680 --> 00:14:44,560
m plus one evaluations namely f

373
00:14:40,959 --> 00:14:46,319
of i is equal to a i for i ranging from

374
00:14:44,560 --> 00:14:48,959
1 up to m

375
00:14:46,320 --> 00:14:49,839
and f 0 is equal to some random ring

376
00:14:48,959 --> 00:14:54,160
element

377
00:14:49,839 --> 00:14:56,839
sampled by the prover the polynomial g

378
00:14:54,160 --> 00:14:59,680
is defined in a completely analogous

379
00:14:56,839 --> 00:15:01,680
manner the polynomials f and g define

380
00:14:59,680 --> 00:15:02,800
backed secret sharings of the vectors a

381
00:15:01,680 --> 00:15:05,040
and b

382
00:15:02,800 --> 00:15:06,319
namely any m plus one distinct

383
00:15:05,040 --> 00:15:08,480
evaluations

384
00:15:06,320 --> 00:15:10,399
of these polynomials allow for

385
00:15:08,480 --> 00:15:14,240
reconstruction

386
00:15:10,399 --> 00:15:17,120
and any evaluation outside 1 up to m

387
00:15:14,240 --> 00:15:18,560
is a uniformly random ring element so

388
00:15:17,120 --> 00:15:22,079
this secret sharing scheme

389
00:15:18,560 --> 00:15:23,839
has one privacy next we define the

390
00:15:22,079 --> 00:15:26,479
polynomial h as the product of the

391
00:15:23,839 --> 00:15:29,199
polynomials f and g

392
00:15:26,480 --> 00:15:31,360
h is of degree at most 2m and it is

393
00:15:29,199 --> 00:15:34,959
therefore uniquely defined by any two

394
00:15:31,360 --> 00:15:38,240
m plus one evaluations moreover

395
00:15:34,959 --> 00:15:40,239
h i equals c i for all i ranging from

396
00:15:38,240 --> 00:15:42,720
one up to m

397
00:15:40,240 --> 00:15:44,639
for these reasons h of x actually

398
00:15:42,720 --> 00:15:48,000
defines the secret sharing

399
00:15:44,639 --> 00:15:51,040
of the vector c

400
00:15:48,000 --> 00:15:51,680
moreover we observe that for a uniformly

401
00:15:51,040 --> 00:15:54,800
random

402
00:15:51,680 --> 00:15:58,079
evaluation point alpha the triple

403
00:15:54,800 --> 00:16:00,880
f alpha g alpha h alpha

404
00:15:58,079 --> 00:16:02,319
forms a uniformly random multiplication

405
00:16:00,880 --> 00:16:04,320
triple

406
00:16:02,320 --> 00:16:06,079
for this reason revealing these

407
00:16:04,320 --> 00:16:08,560
evaluations does not reveal

408
00:16:06,079 --> 00:16:09,279
any information about the input vectors

409
00:16:08,560 --> 00:16:12,239
a b

410
00:16:09,279 --> 00:16:13,600
and c finally we know that if this

411
00:16:12,240 --> 00:16:17,040
multiplicative relation

412
00:16:13,600 --> 00:16:20,160
f alpha times g alpha equals h alpha

413
00:16:17,040 --> 00:16:23,599
holds for this random evaluation then it

414
00:16:20,160 --> 00:16:26,880
must also hold for the vectors a b and c

415
00:16:23,600 --> 00:16:26,880
with high probability

416
00:16:26,959 --> 00:16:31,040
combining the above observations with

417
00:16:29,279 --> 00:16:32,560
our compressed sigma protocol for

418
00:16:31,040 --> 00:16:34,639
opening linear forms

419
00:16:32,560 --> 00:16:36,479
results in efficient protocol for

420
00:16:34,639 --> 00:16:38,240
proving correctness of multiplication

421
00:16:36,480 --> 00:16:40,720
triples

422
00:16:38,240 --> 00:16:42,480
the protocol namely goes as follows

423
00:16:40,720 --> 00:16:44,160
first the proofer commits

424
00:16:42,480 --> 00:16:45,759
to the coefficients of the three

425
00:16:44,160 --> 00:16:49,120
polynomials f

426
00:16:45,759 --> 00:16:52,880
g and h in a single compact commitment

427
00:16:49,120 --> 00:16:56,320
so in a single vector commitment

428
00:16:52,880 --> 00:16:59,360
second the proofer opens the evaluations

429
00:16:56,320 --> 00:17:00,240
f alpha g alpha and h alpha for some

430
00:16:59,360 --> 00:17:04,000
random challenge

431
00:17:00,240 --> 00:17:06,319
alpha and here we make use of the fact

432
00:17:04,000 --> 00:17:07,119
that these three evaluations can all be

433
00:17:06,319 --> 00:17:09,520
computed

434
00:17:07,119 --> 00:17:11,599
as linear combinations of the committed

435
00:17:09,520 --> 00:17:13,918
coefficients

436
00:17:11,599 --> 00:17:15,198
in other words we can use our compressed

437
00:17:13,919 --> 00:17:18,799
sigma protocol

438
00:17:15,199 --> 00:17:20,559
for opening these three evaluations

439
00:17:18,799 --> 00:17:22,639
thus far we have seen how to handle

440
00:17:20,559 --> 00:17:24,000
linear instances of our circuit zero

441
00:17:22,640 --> 00:17:26,079
knowledge problem

442
00:17:24,000 --> 00:17:28,480
and how to prove a specific set of

443
00:17:26,079 --> 00:17:30,159
multiplicative relations

444
00:17:28,480 --> 00:17:32,000
next we show how to combine these

445
00:17:30,160 --> 00:17:34,000
ingredients to construct

446
00:17:32,000 --> 00:17:37,280
circuit share knowledge particles for

447
00:17:34,000 --> 00:17:39,440
arbitrary arithmetic circuits

448
00:17:37,280 --> 00:17:40,960
we consider the following textbook zero

449
00:17:39,440 --> 00:17:42,960
knowledge scenario

450
00:17:40,960 --> 00:17:44,640
in this scenario proofer commits to an

451
00:17:42,960 --> 00:17:47,600
input factor x

452
00:17:44,640 --> 00:17:49,360
plus some auxiliary information in a

453
00:17:47,600 --> 00:17:52,320
single compact commitment

454
00:17:49,360 --> 00:17:52,879
and subsequently proves that c of x

455
00:17:52,320 --> 00:17:56,159
equals

456
00:17:52,880 --> 00:17:57,440
zero the protocol now goes as follows

457
00:17:56,160 --> 00:17:59,200
the proofer first defines the

458
00:17:57,440 --> 00:18:02,080
polynomials f g and h

459
00:17:59,200 --> 00:18:03,760
as before however where these

460
00:18:02,080 --> 00:18:05,840
polynomials first defined

461
00:18:03,760 --> 00:18:07,679
packed secret sharings corresponding to

462
00:18:05,840 --> 00:18:10,720
the multiplication triples

463
00:18:07,679 --> 00:18:12,720
in the vectors a b and c

464
00:18:10,720 --> 00:18:14,960
they now correspond to packed secret

465
00:18:12,720 --> 00:18:16,880
sharings of the inputs and the outputs

466
00:18:14,960 --> 00:18:17,440
of the multiplication gates of the

467
00:18:16,880 --> 00:18:21,120
circuit

468
00:18:17,440 --> 00:18:21,760
c second the proofer commits to the

469
00:18:21,120 --> 00:18:24,320
vector

470
00:18:21,760 --> 00:18:25,440
x together with some auxiliary

471
00:18:24,320 --> 00:18:27,439
information

472
00:18:25,440 --> 00:18:29,039
this auxiliary information contains the

473
00:18:27,440 --> 00:18:31,679
evaluations f0

474
00:18:29,039 --> 00:18:33,600
and g0 and the first two apples-1

475
00:18:31,679 --> 00:18:36,720
evaluations of the polynomial

476
00:18:33,600 --> 00:18:39,520
h an important observation

477
00:18:36,720 --> 00:18:42,080
is that by lagrange interpolation any

478
00:18:39,520 --> 00:18:45,039
evaluation of the polynomials f

479
00:18:42,080 --> 00:18:46,879
g and h can now be computed as a fine

480
00:18:45,039 --> 00:18:48,879
combination of the coefficients of this

481
00:18:46,880 --> 00:18:52,000
long vector

482
00:18:48,880 --> 00:18:55,200
moreover any wire value can be computed

483
00:18:52,000 --> 00:18:55,760
as such in a fine combination for this

484
00:18:55,200 --> 00:18:57,919
reason

485
00:18:55,760 --> 00:19:00,240
our compressed sigma protocol allows

486
00:18:57,919 --> 00:19:02,880
approver to open any wire value

487
00:19:00,240 --> 00:19:04,960
and any polynomial evaluation

488
00:19:02,880 --> 00:19:07,120
efficiently

489
00:19:04,960 --> 00:19:09,200
so in the third step the verifier asks

490
00:19:07,120 --> 00:19:12,320
the proofer to open the output wire

491
00:19:09,200 --> 00:19:15,360
c of x and the evaluations f

492
00:19:12,320 --> 00:19:19,120
alpha g alpha and h alpha for some

493
00:19:15,360 --> 00:19:21,520
random challenge alpha finally

494
00:19:19,120 --> 00:19:22,799
the verifier checks that c of x is

495
00:19:21,520 --> 00:19:26,160
indeed equal to zero

496
00:19:22,799 --> 00:19:29,840
and that f of alpha times g of alpha

497
00:19:26,160 --> 00:19:31,520
equals h of alpha altogether

498
00:19:29,840 --> 00:19:33,439
circuit zero knowledge is therefore

499
00:19:31,520 --> 00:19:36,559
reduced to proven correctness

500
00:19:33,440 --> 00:19:38,400
of multiplication triples

501
00:19:36,559 --> 00:19:40,399
in the previous slides we have

502
00:19:38,400 --> 00:19:41,679
restricted ourselves to a textbook zero

503
00:19:40,400 --> 00:19:44,080
knowledge scenario

504
00:19:41,679 --> 00:19:46,240
however many practical scenarios deviate

505
00:19:44,080 --> 00:19:48,080
from this textbook scenario

506
00:19:46,240 --> 00:19:49,840
and additional techniques are required

507
00:19:48,080 --> 00:19:51,559
to handle them

508
00:19:49,840 --> 00:19:53,439
for this reason we introduce

509
00:19:51,559 --> 00:19:55,840
compactification

510
00:19:53,440 --> 00:19:57,600
compactification allows approver to

511
00:19:55,840 --> 00:20:01,120
combine various commitments

512
00:19:57,600 --> 00:20:03,520
in a single compact commitment

513
00:20:01,120 --> 00:20:04,399
thereby reducing various zero-knowledge

514
00:20:03,520 --> 00:20:06,559
scenarios

515
00:20:04,400 --> 00:20:08,799
to the aforementioned textbook zero

516
00:20:06,559 --> 00:20:11,039
knowledge scenario

517
00:20:08,799 --> 00:20:12,559
in particular compactification allows us

518
00:20:11,039 --> 00:20:14,879
to handle the scenario

519
00:20:12,559 --> 00:20:17,039
where there already exists a commitment

520
00:20:14,880 --> 00:20:19,600
to some input vector x

521
00:20:17,039 --> 00:20:21,919
that does not contain any auxiliary

522
00:20:19,600 --> 00:20:23,600
information

523
00:20:21,919 --> 00:20:25,440
moreover it allows us to handle the

524
00:20:23,600 --> 00:20:28,719
scenario where the input x

525
00:20:25,440 --> 00:20:30,720
is dispersed over multiple commitments

526
00:20:28,720 --> 00:20:32,559
additionally various amortization

527
00:20:30,720 --> 00:20:35,120
techniques known from

528
00:20:32,559 --> 00:20:37,200
standard sigma protocol theory applied

529
00:20:35,120 --> 00:20:38,879
to further improve the efficiency of our

530
00:20:37,200 --> 00:20:41,440
protocols

531
00:20:38,880 --> 00:20:43,200
moreover we show how to instantiate this

532
00:20:41,440 --> 00:20:45,840
entire framework from various

533
00:20:43,200 --> 00:20:47,679
cryptographic assumptions

534
00:20:45,840 --> 00:20:48,879
thus far we have focused on the discrete

535
00:20:47,679 --> 00:20:50,880
log assumption

536
00:20:48,880 --> 00:20:53,280
but we also show how to instantiate this

537
00:20:50,880 --> 00:20:54,960
framework from the strong rsa assumption

538
00:20:53,280 --> 00:20:56,399
or from the knowledge of exponent

539
00:20:54,960 --> 00:20:58,480
assumption

540
00:20:56,400 --> 00:21:00,640
in the latter case we actually achieve a

541
00:20:58,480 --> 00:21:04,240
constant communication complexity

542
00:21:00,640 --> 00:21:06,000
as in zk snarks finally we mentioned an

543
00:21:04,240 --> 00:21:08,640
application of this approach

544
00:21:06,000 --> 00:21:10,799
to other cryptographic protocols such as

545
00:21:08,640 --> 00:21:12,480
proofs of partial knowledge

546
00:21:10,799 --> 00:21:14,158
in a follow-up work we showed that an

547
00:21:12,480 --> 00:21:14,799
adaptation of our compressed stigma

548
00:21:14,159 --> 00:21:16,480
protocols

549
00:21:14,799 --> 00:21:18,480
gives rise to a proof of partial

550
00:21:16,480 --> 00:21:20,640
knowledge that is

551
00:21:18,480 --> 00:21:23,600
for example proving knowledge of k out

552
00:21:20,640 --> 00:21:25,200
of n discrete logarithms

553
00:21:23,600 --> 00:21:26,959
proofs of partial knowledge have found

554
00:21:25,200 --> 00:21:28,240
applications in for example ring

555
00:21:26,960 --> 00:21:31,520
signature schemes

556
00:21:28,240 --> 00:21:33,520
and confidential transaction systems

557
00:21:31,520 --> 00:21:38,080
thank you for your attention and enjoy

558
00:21:33,520 --> 00:21:38,080
the rest of this virtual conference

