1
00:00:01,839 --> 00:00:06,240
hello everyone

2
00:00:03,120 --> 00:00:09,040
and welcome to this virtual presentation

3
00:00:06,240 --> 00:00:10,320
i'm yao jian and this is a joint work

4
00:00:09,040 --> 00:00:13,678
with colleen garris

5
00:00:10,320 --> 00:00:14,719
and christian this talk is about

6
00:00:13,679 --> 00:00:17,119
defining new and

7
00:00:14,719 --> 00:00:19,600
stronger security properties for

8
00:00:17,119 --> 00:00:21,920
updatable encryption

9
00:00:19,600 --> 00:00:25,519
and constructing secure and efficient

10
00:00:21,920 --> 00:00:25,519
update for encryption sticks

11
00:00:27,680 --> 00:00:31,519
i will first talk about what updatable

12
00:00:30,080 --> 00:00:34,399
encryption is

13
00:00:31,519 --> 00:00:35,839
and offer a motivational example to show

14
00:00:34,399 --> 00:00:38,960
a use case of

15
00:00:35,840 --> 00:00:41,440
optical encryption

16
00:00:38,960 --> 00:00:44,719
then i will discuss two interesting

17
00:00:41,440 --> 00:00:47,039
problems of update for encryption

18
00:00:44,719 --> 00:00:48,719
the first is about understanding the

19
00:00:47,039 --> 00:00:52,079
security properties

20
00:00:48,719 --> 00:00:54,879
for update for encryption the second

21
00:00:52,079 --> 00:00:59,840
is about constructing efficient and

22
00:00:54,879 --> 00:00:59,839
secure update for encryption schemes

23
00:01:04,559 --> 00:01:08,880
let's consider a cloud problem a cloud

24
00:01:07,840 --> 00:01:11,200
user alice

25
00:01:08,880 --> 00:01:12,240
wishes to outsource some data to the

26
00:01:11,200 --> 00:01:16,320
cloud storage

27
00:01:12,240 --> 00:01:20,560
provider she has a key k0

28
00:01:16,320 --> 00:01:23,839
which can be used to encrypt data

29
00:01:20,560 --> 00:01:26,880
alice encrypts data m locally and sends

30
00:01:23,840 --> 00:01:31,119
the cipher text to the cloud

31
00:01:26,880 --> 00:01:31,119
the cloud will store this cipher text

32
00:01:31,520 --> 00:01:35,840
however alice might lose her key at some

33
00:01:34,799 --> 00:01:38,400
point

34
00:01:35,840 --> 00:01:39,520
the adversary who had this key under the

35
00:01:38,400 --> 00:01:42,079
cipher text

36
00:01:39,520 --> 00:01:45,119
stored in the cloud could recover the

37
00:01:42,079 --> 00:01:45,119
encrypted data

38
00:01:46,320 --> 00:01:50,240
the standard technique for mitigating

39
00:01:48,880 --> 00:01:52,839
key compromise

40
00:01:50,240 --> 00:01:54,000
is to regularly rotate the encryption

41
00:01:52,840 --> 00:01:57,280
keys

42
00:01:54,000 --> 00:01:58,159
that is generate new ones and switch the

43
00:01:57,280 --> 00:02:02,159
ciphertext

44
00:01:58,159 --> 00:02:02,159
to encryption under the new keys

45
00:02:05,280 --> 00:02:12,879
a cloud user can do key rotation by

46
00:02:08,720 --> 00:02:17,040
downloading decrypting

47
00:02:12,879 --> 00:02:22,959
re-encrypting and re-uploading

48
00:02:17,040 --> 00:02:26,000
it is a very expensive approach

49
00:02:22,959 --> 00:02:28,800
updatable encryption provides a solution

50
00:02:26,000 --> 00:02:30,160
that allows the cloud to update

51
00:02:28,800 --> 00:02:34,000
ciphertext

52
00:02:30,160 --> 00:02:38,239
from an old key to a new key

53
00:02:34,000 --> 00:02:42,000
the cloud user generates an update token

54
00:02:38,239 --> 00:02:44,879
and sends it to the cloud

55
00:02:42,000 --> 00:02:48,319
the cloud server uses this update token

56
00:02:44,879 --> 00:02:48,319
to update ciphertext

57
00:02:48,400 --> 00:02:52,720
the cloud user will delete the old key

58
00:02:51,280 --> 00:02:56,560
under the token

59
00:02:52,720 --> 00:02:59,200
when she sends out the update token

60
00:02:56,560 --> 00:03:00,159
a cloud server will delete all the old

61
00:02:59,200 --> 00:03:03,599
cipher tags

62
00:03:00,159 --> 00:03:07,040
under the update token after it has

63
00:03:03,599 --> 00:03:07,040
finished all the updates

64
00:03:08,560 --> 00:03:12,720
it is reasonable to expect that fresh

65
00:03:11,440 --> 00:03:15,920
encryptions

66
00:03:12,720 --> 00:03:18,000
updated cipher attacks and the tokens

67
00:03:15,920 --> 00:03:22,000
shouldn't reveal anything about plain

68
00:03:18,000 --> 00:03:22,000
text to an adversary

69
00:03:25,040 --> 00:03:29,679
the use case of updateable encryption

70
00:03:27,519 --> 00:03:32,319
appears promising

71
00:03:29,680 --> 00:03:34,159
we also want security for updateable

72
00:03:32,319 --> 00:03:36,440
encryption

73
00:03:34,159 --> 00:03:37,920
and it is natural to consider

74
00:03:36,440 --> 00:03:40,959
confidentiality

75
00:03:37,920 --> 00:03:40,958
and integrity

76
00:03:41,760 --> 00:03:48,159
before defining a security notion

77
00:03:44,879 --> 00:03:50,239
for updatable encryption it is crucial

78
00:03:48,159 --> 00:03:52,959
to consider what an attacker can

79
00:03:50,239 --> 00:03:52,959
possibly do

80
00:03:53,680 --> 00:03:57,599
security notions for update for

81
00:03:55,920 --> 00:04:01,839
inclusion have been

82
00:03:57,599 --> 00:04:04,319
considered by prior work in our paper

83
00:04:01,840 --> 00:04:05,360
we present a new security notion that

84
00:04:04,319 --> 00:04:08,480
implies

85
00:04:05,360 --> 00:04:12,239
all previous existing notions

86
00:04:08,480 --> 00:04:12,238
and it is strictly stronger

87
00:04:12,400 --> 00:04:19,040
except for security efficiency

88
00:04:15,920 --> 00:04:22,639
is another important element to consider

89
00:04:19,040 --> 00:04:24,880
for updatable encryption schemes

90
00:04:22,639 --> 00:04:27,199
a modern database may contain large

91
00:04:24,880 --> 00:04:30,880
numbers of files

92
00:04:27,199 --> 00:04:33,520
where the users make fresh encryptions

93
00:04:30,880 --> 00:04:36,719
and the server updates ciphertexts for

94
00:04:33,520 --> 00:04:36,719
millions of users

95
00:04:37,120 --> 00:04:43,840
encryption and update must therefore be

96
00:04:40,840 --> 00:04:43,840
efficient

97
00:04:46,880 --> 00:04:50,560
in a security game the environment

98
00:04:49,520 --> 00:04:53,520
provided by the

99
00:04:50,560 --> 00:04:57,840
challenger attempts to give as much

100
00:04:53,520 --> 00:05:00,560
power as possible to an adversary

101
00:04:57,840 --> 00:05:01,919
the adversary may corrupt keys and

102
00:05:00,560 --> 00:05:04,720
tokens

103
00:05:01,919 --> 00:05:07,680
the adversary may ask for cipher text

104
00:05:04,720 --> 00:05:10,240
stored in the cloud

105
00:05:07,680 --> 00:05:13,199
these are information the adversary can

106
00:05:10,240 --> 00:05:13,199
directly operate

107
00:05:13,600 --> 00:05:17,520
additionally the adversary can infer

108
00:05:15,919 --> 00:05:21,039
some information

109
00:05:17,520 --> 00:05:23,280
using known knowledge for example

110
00:05:21,039 --> 00:05:24,320
if the adversary knows two continuous

111
00:05:23,280 --> 00:05:27,280
keys

112
00:05:24,320 --> 00:05:28,479
key 5 and the key 6 then she can compute

113
00:05:27,280 --> 00:05:31,280
the update token

114
00:05:28,479 --> 00:05:31,280
token 6.

115
00:05:32,479 --> 00:05:36,320
when we consider the win condition of a

116
00:05:34,720 --> 00:05:38,400
security game

117
00:05:36,320 --> 00:05:40,240
we should consider our knowledge known

118
00:05:38,400 --> 00:05:42,719
to the adversary

119
00:05:40,240 --> 00:05:43,759
because the adversary might apply this

120
00:05:42,720 --> 00:05:47,440
information

121
00:05:43,759 --> 00:05:47,440
to trivially win the game

122
00:05:50,320 --> 00:05:56,719
in terms of the confidentiality property

123
00:05:53,600 --> 00:05:59,280
let's consider an example

124
00:05:56,720 --> 00:06:02,960
a journalist who stores a contact list

125
00:05:59,280 --> 00:06:06,080
with a cloud storage provider

126
00:06:02,960 --> 00:06:06,638
10 years ago she uses a key k0 to

127
00:06:06,080 --> 00:06:09,840
encrypt

128
00:06:06,639 --> 00:06:09,840
contact information

129
00:06:13,600 --> 00:06:19,039
this year she changes the old key to a

130
00:06:16,479 --> 00:06:22,800
new key k1

131
00:06:19,039 --> 00:06:25,520
the cloud server will help her updating

132
00:06:22,800 --> 00:06:28,720
all past encrypted contact information

133
00:06:25,520 --> 00:06:28,719
to new ciphertext

134
00:06:31,600 --> 00:06:36,160
the journalist continues storing contact

135
00:06:34,479 --> 00:06:39,120
information in the cloud

136
00:06:36,160 --> 00:06:39,120
under the new key

137
00:06:40,400 --> 00:06:49,039
at some point the storage is compromised

138
00:06:44,000 --> 00:06:52,160
and an adversary obtains all ciphertexts

139
00:06:49,039 --> 00:06:54,639
it is desirable that the cipher text

140
00:06:52,160 --> 00:06:56,080
doesn't reveal if they are recently

141
00:06:54,639 --> 00:06:59,039
added

142
00:06:56,080 --> 00:07:00,240
that is it must be hard to decide if

143
00:06:59,039 --> 00:07:03,440
some cipher text

144
00:07:00,240 --> 00:07:04,479
was recently created or if it has been

145
00:07:03,440 --> 00:07:07,599
updated from

146
00:07:04,479 --> 00:07:10,080
a cipher text stored in an early ebook

147
00:07:07,599 --> 00:07:10,080
period

148
00:07:12,520 --> 00:07:16,799
confidentiality notions have been

149
00:07:14,479 --> 00:07:18,960
studied in prior work

150
00:07:16,800 --> 00:07:21,680
le mans and tukman introduced two

151
00:07:18,960 --> 00:07:24,880
notions for ue skins

152
00:07:21,680 --> 00:07:27,199
in the ink and inked update

153
00:07:24,880 --> 00:07:28,560
in the ink notion tells that an

154
00:07:27,199 --> 00:07:31,280
adversary shouldn't

155
00:07:28,560 --> 00:07:32,880
be able to determine anything about the

156
00:07:31,280 --> 00:07:36,239
underlying plain text

157
00:07:32,880 --> 00:07:36,240
of a given cipher text

158
00:07:37,599 --> 00:07:41,840
in the in the ink game the adversary is

159
00:07:40,479 --> 00:07:45,840
sent to messages

160
00:07:41,840 --> 00:07:45,840
as an input of a challenge query

161
00:07:46,160 --> 00:07:50,000
the challenger randomly drops a coin b

162
00:07:49,120 --> 00:07:54,000
and the

163
00:07:50,000 --> 00:07:58,800
response of flash encryption of mb as a

164
00:07:54,000 --> 00:08:01,120
challenge ciphertext

165
00:07:58,800 --> 00:08:02,639
eventually the adversary guesses the

166
00:08:01,120 --> 00:08:05,599
value of b

167
00:08:02,639 --> 00:08:08,479
if she guesses correctly she wins the

168
00:08:05,599 --> 00:08:08,479
security game

169
00:08:11,199 --> 00:08:16,400
in the update notion states that an

170
00:08:14,240 --> 00:08:17,919
adversary shouldn't be able to tell

171
00:08:16,400 --> 00:08:20,479
which cipher text

172
00:08:17,919 --> 00:08:22,799
our current given ciphertext was updated

173
00:08:20,479 --> 00:08:22,800
from

174
00:08:23,440 --> 00:08:27,360
in the end update game different from

175
00:08:26,160 --> 00:08:30,479
the in the ink game

176
00:08:27,360 --> 00:08:30,960
the adversary sends to cipher text in

177
00:08:30,479 --> 00:08:33,838
the

178
00:08:30,960 --> 00:08:36,478
previous epoch as an input of a

179
00:08:33,839 --> 00:08:39,039
challenge query

180
00:08:36,479 --> 00:08:41,200
the challenger responds an updated

181
00:08:39,039 --> 00:08:46,399
ciphertext or cp

182
00:08:41,200 --> 00:08:49,839
and the challenge ciphertext again

183
00:08:46,399 --> 00:08:52,640
the adversary guesses the value of b

184
00:08:49,839 --> 00:08:55,839
if she guesses correctly she wins the

185
00:08:52,640 --> 00:08:55,839
security game

186
00:08:58,640 --> 00:09:04,080
note that none of the above two notions

187
00:09:01,760 --> 00:09:06,480
capture our journalists the motivation

188
00:09:04,080 --> 00:09:09,440
example

189
00:09:06,480 --> 00:09:10,959
now we have a question can we find a

190
00:09:09,440 --> 00:09:13,839
security notion that

191
00:09:10,959 --> 00:09:14,800
ensures that a freshly created

192
00:09:13,839 --> 00:09:19,360
ciphertext

193
00:09:14,800 --> 00:09:19,359
is indistinguishable from an updated

194
00:09:20,839 --> 00:09:25,200
ciphertext

195
00:09:22,000 --> 00:09:27,360
in our work we introduce a new security

196
00:09:25,200 --> 00:09:30,720
notion for ue skins

197
00:09:27,360 --> 00:09:30,720
we call it in the uee

198
00:09:32,399 --> 00:09:36,880
in the in the uae game the adversary

199
00:09:35,279 --> 00:09:38,800
sends a message

200
00:09:36,880 --> 00:09:39,920
and the cipher text in the previous

201
00:09:38,800 --> 00:09:44,959
e-book as

202
00:09:39,920 --> 00:09:44,959
an input of a challenge query

203
00:09:45,920 --> 00:09:52,640
the challenger responds either a fresh

204
00:09:49,200 --> 00:09:54,080
encryption or message m or an updated

205
00:09:52,640 --> 00:09:58,160
ciphertext of c

206
00:09:54,080 --> 00:09:58,160
as the challenge ciphertext

207
00:10:00,399 --> 00:10:05,920
the adversary's task is to guess

208
00:10:03,680 --> 00:10:07,279
whether the challenge ciphertext is

209
00:10:05,920 --> 00:10:11,040
freshly created

210
00:10:07,279 --> 00:10:11,040
or an update to the ciphertext

211
00:10:14,560 --> 00:10:18,640
note that skin that leaks e-book number

212
00:10:18,320 --> 00:10:21,680
of

213
00:10:18,640 --> 00:10:22,959
original upload can be in the ink and in

214
00:10:21,680 --> 00:10:26,160
the update

215
00:10:22,959 --> 00:10:26,160
but not in the ue

216
00:10:30,800 --> 00:10:34,479
ciphertext integrity for updatable

217
00:10:33,360 --> 00:10:37,360
encryption

218
00:10:34,480 --> 00:10:37,839
schemes have been studied in the work of

219
00:10:37,360 --> 00:10:43,120
clues

220
00:10:37,839 --> 00:10:43,120
at all in the intertext game

221
00:10:43,519 --> 00:10:48,240
an adversary attempts to provide a valid

222
00:10:46,880 --> 00:10:51,200
new cipher text

223
00:10:48,240 --> 00:10:51,200
to the challenger

224
00:10:51,600 --> 00:10:54,959
the challenger will evaluate if it is

225
00:10:54,480 --> 00:10:58,720
new

226
00:10:54,959 --> 00:11:01,680
and decrypted to a valid message

227
00:10:58,720 --> 00:11:04,880
if so the adversary wins the ciphertext

228
00:11:01,680 --> 00:11:04,880
integrity game

229
00:11:05,920 --> 00:11:11,040
for symmetric encryption there is a

230
00:11:08,560 --> 00:11:14,079
well-known composition result

231
00:11:11,040 --> 00:11:17,839
the combination of cpa security

232
00:11:14,079 --> 00:11:21,199
and ciphertex integrity

233
00:11:17,839 --> 00:11:23,920
gives cca security

234
00:11:21,200 --> 00:11:26,800
though this result applies to update

235
00:11:23,920 --> 00:11:31,199
book encryption

236
00:11:26,800 --> 00:11:31,199
we will show this is true in our work

237
00:11:32,079 --> 00:11:35,839
now we look at some relations among our

238
00:11:34,640 --> 00:11:39,760
new notion

239
00:11:35,839 --> 00:11:42,880
and the previous notions for ue skins

240
00:11:39,760 --> 00:11:45,920
we prove that our new notion implies in

241
00:11:42,880 --> 00:11:48,399
ink and in update notions

242
00:11:45,920 --> 00:11:49,040
but even the combination of ink and in

243
00:11:48,399 --> 00:11:53,120
the update

244
00:11:49,040 --> 00:11:55,760
notion don't implies our new notion

245
00:11:53,120 --> 00:11:56,800
which means our new notion is strictly

246
00:11:55,760 --> 00:12:01,120
stronger

247
00:11:56,800 --> 00:12:03,599
even than combinations of prior notions

248
00:12:01,120 --> 00:12:06,800
this result holds both in the randomized

249
00:12:03,600 --> 00:12:08,959
and the deterministic update settings

250
00:12:06,800 --> 00:12:10,000
under chosen plaintext attack and

251
00:12:08,959 --> 00:12:12,479
children's ciphertext

252
00:12:10,000 --> 00:12:12,480
attack

253
00:12:14,560 --> 00:12:18,079
in our work we also prove that the

254
00:12:17,200 --> 00:12:22,839
generic

255
00:12:18,079 --> 00:12:25,839
composition result is correct for ue

256
00:12:22,839 --> 00:12:25,839
skins

257
00:12:30,480 --> 00:12:34,480
next we present a new and highly

258
00:12:32,800 --> 00:12:37,680
efficient construction

259
00:12:34,480 --> 00:12:40,079
of ue skins that we collectively call

260
00:12:37,680 --> 00:12:40,079
shine

261
00:12:41,360 --> 00:12:45,600
our skin is based on a random looking

262
00:12:44,079 --> 00:12:49,040
permutation

263
00:12:45,600 --> 00:12:51,839
pi combined with the exponentiation map

264
00:12:49,040 --> 00:12:52,560
in a cyclic group there are three

265
00:12:51,839 --> 00:12:55,600
variants of

266
00:12:52,560 --> 00:12:58,399
shine skins for convenience we only show

267
00:12:55,600 --> 00:13:00,959
the construction idea

268
00:12:58,399 --> 00:13:01,920
the encryption algorithm runs one

269
00:13:00,959 --> 00:13:07,839
permutation

270
00:13:01,920 --> 00:13:07,839
and one exponentiation

271
00:13:08,320 --> 00:13:11,920
the decryption runs the exponentiation

272
00:13:11,040 --> 00:13:13,839
first

273
00:13:11,920 --> 00:13:16,639
and then runs the inverse of the

274
00:13:13,839 --> 00:13:16,639
permutation

275
00:13:19,040 --> 00:13:24,880
while updating a ciphertext simply

276
00:13:22,320 --> 00:13:28,399
requires one exponentiation

277
00:13:24,880 --> 00:13:28,399
using the update token

278
00:13:28,880 --> 00:13:32,880
the update token is the quotient of the

279
00:13:31,360 --> 00:13:36,480
current ipo key

280
00:13:32,880 --> 00:13:36,480
and the previous epoch key

281
00:13:37,839 --> 00:13:43,199
after a simple computation the output of

282
00:13:41,360 --> 00:13:46,399
the update algorithm

283
00:13:43,199 --> 00:13:48,959
is a valid updated ciphertext which

284
00:13:46,399 --> 00:13:51,600
decrypts to the same underlying message

285
00:13:48,959 --> 00:13:54,399
as the older ciphertext using the new

286
00:13:51,600 --> 00:13:54,399
epoch key

287
00:13:57,760 --> 00:14:02,480
the security proof is not that simple

288
00:14:00,399 --> 00:14:03,920
please refer to our paper for the

289
00:14:02,480 --> 00:14:06,480
details

290
00:14:03,920 --> 00:14:07,680
i now present a high level understanding

291
00:14:06,480 --> 00:14:11,360
of how the proof

292
00:14:07,680 --> 00:14:12,959
works we use a method called the

293
00:14:11,360 --> 00:14:15,120
firewall technique

294
00:14:12,959 --> 00:14:17,839
which partitions e-book sets into

295
00:14:15,120 --> 00:14:17,839
segments

296
00:14:20,800 --> 00:14:27,359
we define a pair of firewalls as

297
00:14:24,240 --> 00:14:30,399
no key inside the firewalls is crafted

298
00:14:27,360 --> 00:14:32,399
tokens on the firewalls are not crafted

299
00:14:30,399 --> 00:14:34,000
all tokens inside the firewalls are

300
00:14:32,399 --> 00:14:37,199
corrupted

301
00:14:34,000 --> 00:14:37,839
we also call the e-book sweding of para

302
00:14:37,199 --> 00:14:41,359
firewalls

303
00:14:37,839 --> 00:14:45,760
as an insulated region

304
00:14:41,360 --> 00:14:48,480
in this example k2 k5 k6 and the token 4

305
00:14:45,760 --> 00:14:48,480
are crafted

306
00:14:49,839 --> 00:14:55,120
hence epoch 3 and epoch 4 are a pair of

307
00:14:53,440 --> 00:14:57,920
firewalls

308
00:14:55,120 --> 00:15:00,639
the insulated region includes epoch3 and

309
00:14:57,920 --> 00:15:00,639
epoc4

310
00:15:01,199 --> 00:15:05,279
firewalls have the property that can be

311
00:15:03,440 --> 00:15:08,560
used to separate keys

312
00:15:05,279 --> 00:15:10,880
tokens and ciphertexts

313
00:15:08,560 --> 00:15:13,839
as a consequence cryptographic

314
00:15:10,880 --> 00:15:15,360
information within each insulated region

315
00:15:13,839 --> 00:15:19,120
is linked

316
00:15:15,360 --> 00:15:20,880
and information inside and outside of

317
00:15:19,120 --> 00:15:26,160
each insulated region

318
00:15:20,880 --> 00:15:30,480
are independent from each other

319
00:15:26,160 --> 00:15:30,480
now we're back to our security proof

320
00:15:31,120 --> 00:15:34,800
we will use firewall technique to play

321
00:15:33,360 --> 00:15:37,040
hybrid games

322
00:15:34,800 --> 00:15:41,839
and embed the challenge in the ice

323
00:15:37,040 --> 00:15:41,839
insulated region

324
00:15:45,519 --> 00:15:49,839
we now provide an overview to show how

325
00:15:48,399 --> 00:15:54,160
the hybrid argument

326
00:15:49,839 --> 00:15:56,480
works in the initial game

327
00:15:54,160 --> 00:15:57,199
the game responds the adversary with

328
00:15:56,480 --> 00:16:01,120
challenges

329
00:15:57,199 --> 00:16:04,000
are in the left sense in particular

330
00:16:01,120 --> 00:16:05,759
tw means if the adversary asks for a

331
00:16:04,000 --> 00:16:08,800
challenge yourself attacked

332
00:16:05,759 --> 00:16:11,680
in epoch 2 or 6 or 7 etc

333
00:16:08,800 --> 00:16:14,319
the triple win condition is triggered

334
00:16:11,680 --> 00:16:17,519
and the adversary trivially loses

335
00:16:14,320 --> 00:16:17,519
the security gain

336
00:16:18,079 --> 00:16:22,000
in the first game the game responds with

337
00:16:20,720 --> 00:16:25,120
challenges in the right

338
00:16:22,000 --> 00:16:27,600
sense in the first insulated region to

339
00:16:25,120 --> 00:16:29,920
the right of the first insulated region

340
00:16:27,600 --> 00:16:32,639
the gain responds with challenges in the

341
00:16:29,920 --> 00:16:32,639
left sense

342
00:16:33,279 --> 00:16:37,759
in the second game to the left of the

343
00:16:35,680 --> 00:16:39,599
second insulated region the gain

344
00:16:37,759 --> 00:16:41,920
responds with challenges

345
00:16:39,600 --> 00:16:43,759
in the right sense to the right of the

346
00:16:41,920 --> 00:16:45,839
second insulated region

347
00:16:43,759 --> 00:16:50,079
the gain responds with challenges in the

348
00:16:45,839 --> 00:16:53,360
left sense

349
00:16:50,079 --> 00:16:54,000
hybrid games continue and in the end's

350
00:16:53,360 --> 00:16:56,720
game

351
00:16:54,000 --> 00:16:57,759
the game responds third anniversary with

352
00:16:56,720 --> 00:17:01,440
challenges

353
00:16:57,759 --> 00:17:03,279
all in the right sense now we finish

354
00:17:01,440 --> 00:17:07,120
moving left to right across the

355
00:17:03,279 --> 00:17:10,160
epoch space we further construct

356
00:17:07,119 --> 00:17:13,359
a reduction playing the ddh experiment

357
00:17:10,160 --> 00:17:17,199
in each hybrid to bound advantage of

358
00:17:13,359 --> 00:17:19,678
each hybrid gain to the ddh advantage

359
00:17:17,199 --> 00:17:21,039
and have the results that shine is that

360
00:17:19,679 --> 00:17:23,439
in the uecpa

361
00:17:21,039 --> 00:17:23,439
secure

362
00:17:26,959 --> 00:17:32,080
to achieve the ciphertext integrity of

363
00:17:29,679 --> 00:17:34,400
our ue scheme

364
00:17:32,080 --> 00:17:36,960
we pad a big zero block in the

365
00:17:34,400 --> 00:17:36,960
encryption

366
00:17:37,679 --> 00:17:42,480
the decryption algorithm will check if

367
00:17:40,400 --> 00:17:46,000
the permutation outputs

368
00:17:42,480 --> 00:17:49,760
end by the zero block if not the input

369
00:17:46,000 --> 00:17:52,400
is an invalid set text the probability

370
00:17:49,760 --> 00:17:56,160
that an adversary can create a new valid

371
00:17:52,400 --> 00:17:56,160
ciphertext is near eligible

372
00:17:56,400 --> 00:18:01,520
now we have that shines into the text

373
00:17:58,880 --> 00:18:04,400
secure

374
00:18:01,520 --> 00:18:05,600
combining the generic composition result

375
00:18:04,400 --> 00:18:10,080
we have that

376
00:18:05,600 --> 00:18:10,080
shine that in the uec a secure

377
00:18:11,760 --> 00:18:16,080
in the table of this slide we provide a

378
00:18:15,120 --> 00:18:19,360
comparation

379
00:18:16,080 --> 00:18:22,399
of security between our new skins

380
00:18:19,360 --> 00:18:23,280
and those from prior literature the

381
00:18:22,400 --> 00:18:26,080
security

382
00:18:23,280 --> 00:18:28,720
results showed in this table are the

383
00:18:26,080 --> 00:18:32,080
best possible security results

384
00:18:28,720 --> 00:18:34,640
that each ue skin can achieve

385
00:18:32,080 --> 00:18:35,520
note that all three variants of our

386
00:18:34,640 --> 00:18:39,679
shine skins

387
00:18:35,520 --> 00:18:42,799
achieve cca security and satex security

388
00:18:39,679 --> 00:18:43,840
in the table of this slide we present a

389
00:18:42,799 --> 00:18:46,879
comparison of

390
00:18:43,840 --> 00:18:49,360
cipher text expansion and efficiency

391
00:18:46,880 --> 00:18:51,039
between our new skins and those wrongful

392
00:18:49,360 --> 00:18:55,199
literature

393
00:18:51,039 --> 00:18:57,600
sha zero is for small messages

394
00:18:55,200 --> 00:18:58,880
mirror shine is for medium-sized

395
00:18:57,600 --> 00:19:01,678
messages

396
00:18:58,880 --> 00:19:03,440
and ocv shine is for arbitrary large

397
00:19:01,679 --> 00:19:06,799
messages

398
00:19:03,440 --> 00:19:11,039
sure their cpa is shy zero with a zero

399
00:19:06,799 --> 00:19:14,799
lens integrity tag

400
00:19:11,039 --> 00:19:17,840
our ue skins are at least twice as fast

401
00:19:14,799 --> 00:19:21,918
as any previous skins in terms of

402
00:19:17,840 --> 00:19:24,639
computation on each message block

403
00:19:21,919 --> 00:19:27,039
as an aside for a cloud server that

404
00:19:24,640 --> 00:19:29,919
stores vast number of files

405
00:19:27,039 --> 00:19:31,200
it is desirable to construct ue skins

406
00:19:29,919 --> 00:19:34,400
that can minimize

407
00:19:31,200 --> 00:19:34,960
ciphertex expansion rate at the same

408
00:19:34,400 --> 00:19:38,160
time

409
00:19:34,960 --> 00:19:41,840
a client might want to upload huge files

410
00:19:38,160 --> 00:19:43,919
such as images or videos it is desirable

411
00:19:41,840 --> 00:19:47,039
to construct ue skins that can

412
00:19:43,919 --> 00:19:49,520
encrypt arbitrary large files

413
00:19:47,039 --> 00:19:51,039
i will also say be shiny and suitable

414
00:19:49,520 --> 00:19:53,918
for encrypting

415
00:19:51,039 --> 00:19:57,360
arbitrary large files with almost no

416
00:19:53,919 --> 00:19:57,360
cipher text expansion

417
00:19:57,919 --> 00:20:03,760
compared to blmr plus which

418
00:20:00,960 --> 00:20:04,240
also supports encryption of arbitrary

419
00:20:03,760 --> 00:20:07,360
sized

420
00:20:04,240 --> 00:20:10,720
messages our ocb shine has

421
00:20:07,360 --> 00:20:10,719
stronger security

422
00:20:13,360 --> 00:20:19,120
now i conclude our contributions

423
00:20:16,640 --> 00:20:21,520
we introduced a new security notion in

424
00:20:19,120 --> 00:20:24,399
the ue for uni skins

425
00:20:21,520 --> 00:20:25,918
we prove that our new notion implies

426
00:20:24,400 --> 00:20:29,679
prior notions

427
00:20:25,919 --> 00:20:29,679
and it is strictly stronger

428
00:20:29,919 --> 00:20:34,240
we also demonstrate the generic

429
00:20:32,480 --> 00:20:38,159
composition result for

430
00:20:34,240 --> 00:20:38,880
ue schemes combining these relation

431
00:20:38,159 --> 00:20:40,799
results

432
00:20:38,880 --> 00:20:42,159
we have a nice diagram showing the

433
00:20:40,799 --> 00:20:47,520
relation among all

434
00:20:42,159 --> 00:20:50,080
existing security notions for ue skins

435
00:20:47,520 --> 00:20:52,559
our second major contribution is

436
00:20:50,080 --> 00:20:55,760
designing a new fast

437
00:20:52,559 --> 00:20:57,200
updatable encryption skin shine let's

438
00:20:55,760 --> 00:21:03,039
achieve both cca

439
00:20:57,200 --> 00:21:05,120
and syntax security for ue skins

440
00:21:03,039 --> 00:21:06,960
we also further the understanding of

441
00:21:05,120 --> 00:21:10,559
skins with deterministic

442
00:21:06,960 --> 00:21:12,799
update mechanisms and show how to use

443
00:21:10,559 --> 00:21:17,440
firewall technique to improve the

444
00:21:12,799 --> 00:21:19,918
security for ue

445
00:21:17,440 --> 00:21:23,760
thank you for your attention and that is

446
00:21:19,919 --> 00:21:23,760
the end of my talk

