1
00:00:01,839 --> 00:00:06,398
hello everyone i am juan lugabrian

2
00:00:04,240 --> 00:00:08,400
and i am here to talk about our paper

3
00:00:06,399 --> 00:00:10,080
malleable secret sharing against bounded

4
00:00:08,400 --> 00:00:11,360
joint tampering attacks in the plane

5
00:00:10,080 --> 00:00:13,599
model

6
00:00:11,360 --> 00:00:15,360
so let's start with what secret sharing

7
00:00:13,599 --> 00:00:16,880
is

8
00:00:15,360 --> 00:00:18,800
secret sharing is a cryptographic

9
00:00:16,880 --> 00:00:20,799
primitive in which a dealer wants to

10
00:00:18,800 --> 00:00:21,760
share a secret message among internet

11
00:00:20,800 --> 00:00:24,160
parties

12
00:00:21,760 --> 00:00:26,640
so that only certain subsets of parties

13
00:00:24,160 --> 00:00:28,640
are able to reconstruct the message

14
00:00:26,640 --> 00:00:30,880
for simplicity in this talk i'll only

15
00:00:28,640 --> 00:00:32,719
consider the auto vent signal sharing

16
00:00:30,880 --> 00:00:36,160
however in our paper we actually

17
00:00:32,719 --> 00:00:37,840
consider more general access structures

18
00:00:36,160 --> 00:00:39,680
when considering the out of end signal

19
00:00:37,840 --> 00:00:40,239
sharing the correctness property states

20
00:00:39,680 --> 00:00:42,079
that t

21
00:00:40,239 --> 00:00:44,000
or more parties are allowed to fully

22
00:00:42,079 --> 00:00:46,079
reconstruct the message by pulling their

23
00:00:44,000 --> 00:00:47,280
shares together while the privacy

24
00:00:46,079 --> 00:00:49,520
property states that

25
00:00:47,280 --> 00:00:53,039
less than t colluding parties cannot

26
00:00:49,520 --> 00:00:55,120
learn any information about the secret

27
00:00:53,039 --> 00:00:56,800
now even if a single sharing scheme is

28
00:00:55,120 --> 00:00:57,839
secure in the sense of the privacy

29
00:00:56,800 --> 00:00:59,519
definition

30
00:00:57,840 --> 00:01:01,600
an attacker could try to obtain

31
00:00:59,520 --> 00:01:03,199
information about the secret in some

32
00:01:01,600 --> 00:01:05,600
other subtle ways

33
00:01:03,199 --> 00:01:07,600
for example the attacker could leak some

34
00:01:05,600 --> 00:01:08,559
information from possibly all the shares

35
00:01:07,600 --> 00:01:11,520
in order to obtain

36
00:01:08,560 --> 00:01:13,600
information about the secret or he could

37
00:01:11,520 --> 00:01:15,439
also try to manipulate the shares and

38
00:01:13,600 --> 00:01:19,119
then manage to see the result of this

39
00:01:15,439 --> 00:01:21,119
manipulation under a constructed message

40
00:01:19,119 --> 00:01:23,600
since this kind of attacks are quite

41
00:01:21,119 --> 00:01:25,439
powerful recent trends in cryptography

42
00:01:23,600 --> 00:01:28,559
initiated the study of proper counter

43
00:01:25,439 --> 00:01:30,880
measures in particular in 2018

44
00:01:28,560 --> 00:01:32,560
kumar meg and sahai came up with leakage

45
00:01:30,880 --> 00:01:34,479
resilient secret sharing

46
00:01:32,560 --> 00:01:36,159
in which they achieved a single sharing

47
00:01:34,479 --> 00:01:38,079
scheme that is secure even if the

48
00:01:36,159 --> 00:01:39,840
attacker manages to leak a small amount

49
00:01:38,079 --> 00:01:40,880
of information from possibly all the

50
00:01:39,840 --> 00:01:43,439
shares

51
00:01:40,880 --> 00:01:45,600
before them in the same year goyal and

52
00:01:43,439 --> 00:01:47,839
kumar came up with no malleable secret

53
00:01:45,600 --> 00:01:49,360
sharing that is a secret sharing scheme

54
00:01:47,840 --> 00:01:51,119
in which even if the attacker

55
00:01:49,360 --> 00:01:53,280
manipulates the shares

56
00:01:51,119 --> 00:01:56,399
the resulting reconstructed message is

57
00:01:53,280 --> 00:01:59,600
completely unrelated to the original one

58
00:01:56,399 --> 00:02:01,600
subsequent work keeps captaining these

59
00:01:59,600 --> 00:02:03,360
two properties and often they are

60
00:02:01,600 --> 00:02:04,158
achieved together in what is called

61
00:02:03,360 --> 00:02:07,680
liquidus

62
00:02:04,159 --> 00:02:08,959
and normal ability clearly we have to

63
00:02:07,680 --> 00:02:11,360
put some restrictions

64
00:02:08,959 --> 00:02:13,360
since for example the attacker could

65
00:02:11,360 --> 00:02:15,040
jointly leak from all the shares and

66
00:02:13,360 --> 00:02:16,080
simply output the reconstructed

67
00:02:15,040 --> 00:02:18,000
cigarette

68
00:02:16,080 --> 00:02:20,080
for this reason leakage resilience and

69
00:02:18,000 --> 00:02:21,680
normal ability are always defined

70
00:02:20,080 --> 00:02:23,360
against particular family source

71
00:02:21,680 --> 00:02:25,440
functions

72
00:02:23,360 --> 00:02:27,120
in our paper we consider joint leakage

73
00:02:25,440 --> 00:02:29,120
and tampering attack models

74
00:02:27,120 --> 00:02:32,319
both under selective partitioning and

75
00:02:29,120 --> 00:02:34,720
under semi-adaptive partitioning

76
00:02:32,319 --> 00:02:36,720
about the leakage model we consider

77
00:02:34,720 --> 00:02:37,920
bounded leakage in which the adversary

78
00:02:36,720 --> 00:02:40,640
is allowed to obtain

79
00:02:37,920 --> 00:02:41,119
a leakage string that is at most l bits

80
00:02:40,640 --> 00:02:44,399
long

81
00:02:41,120 --> 00:02:46,319
possibly also using multiple queries

82
00:02:44,400 --> 00:02:47,920
under selective partitioning we prove

83
00:02:46,319 --> 00:02:49,518
that any one time statistically

84
00:02:47,920 --> 00:02:52,079
non-malleable signal sharing scheme

85
00:02:49,519 --> 00:02:54,319
is also lit resilient and in this

86
00:02:52,080 --> 00:02:56,239
setting we also obtain a corollary for

87
00:02:54,319 --> 00:02:58,879
lower bounds in the size of the shares

88
00:02:56,239 --> 00:03:01,440
of non-valuable secret sharing schemes

89
00:02:58,879 --> 00:03:03,040
actually the proof of this fact is quite

90
00:03:01,440 --> 00:03:05,200
straightforward

91
00:03:03,040 --> 00:03:07,440
by proving that any non-malleable secret

92
00:03:05,200 --> 00:03:09,760
sharing scheme is also leakage resilient

93
00:03:07,440 --> 00:03:12,239
it only suffices to apply a result from

94
00:03:09,760 --> 00:03:14,239
nielsen and simkin in 2020

95
00:03:12,239 --> 00:03:15,519
for lower bounds in the sea in the size

96
00:03:14,239 --> 00:03:17,920
of the shares

97
00:03:15,519 --> 00:03:19,680
for leakage resilient cigarette sharing

98
00:03:17,920 --> 00:03:22,238
schemes

99
00:03:19,680 --> 00:03:24,480
as for semi-adaptive partitioning this

100
00:03:22,239 --> 00:03:26,239
is almost like adaptive partitioning but

101
00:03:24,480 --> 00:03:27,280
with some restrictions on the tampering

102
00:03:26,239 --> 00:03:29,440
query

103
00:03:27,280 --> 00:03:31,040
in this setting we construct a one-time

104
00:03:29,440 --> 00:03:33,280
malleable secret sharing scheme

105
00:03:31,040 --> 00:03:35,120
achieving security against joint leakage

106
00:03:33,280 --> 00:03:36,400
and tampering under semi-adaptive

107
00:03:35,120 --> 00:03:38,799
partitioning

108
00:03:36,400 --> 00:03:41,040
and finally we use known techniques to

109
00:03:38,799 --> 00:03:42,239
construct a compiler that takes any one

110
00:03:41,040 --> 00:03:44,720
time statistically

111
00:03:42,239 --> 00:03:45,519
malleable secret shell scheme and

112
00:03:44,720 --> 00:03:48,400
outputs a p

113
00:03:45,519 --> 00:03:50,480
time p times computationally malleable

114
00:03:48,400 --> 00:03:53,680
secret sharing scheme

115
00:03:50,480 --> 00:03:55,760
okay let's see more in detail how these

116
00:03:53,680 --> 00:03:58,159
models work

117
00:03:55,760 --> 00:04:00,079
in the case of selective partitioning

118
00:03:58,159 --> 00:04:02,798
the adversary commits to a particular

119
00:04:00,080 --> 00:04:04,239
authorized subset of its choice which we

120
00:04:02,799 --> 00:04:07,200
call the reconstruction

121
00:04:04,239 --> 00:04:08,239
set and also commits to a particular

122
00:04:07,200 --> 00:04:10,079
partition of

123
00:04:08,239 --> 00:04:12,159
nominal overlapping subsets of the

124
00:04:10,080 --> 00:04:15,120
reconstruction set

125
00:04:12,159 --> 00:04:16,000
after after that the adversary is free

126
00:04:15,120 --> 00:04:18,639
to leak from

127
00:04:16,000 --> 00:04:20,320
all the shares within each subset in

128
00:04:18,639 --> 00:04:23,040
particular a leakage query

129
00:04:20,320 --> 00:04:26,400
is the in a leakage query diversity

130
00:04:23,040 --> 00:04:28,880
outputs some functions g1 g2 and so on

131
00:04:26,400 --> 00:04:31,120
one for each subset and each function

132
00:04:28,880 --> 00:04:34,479
takes as input all the shares in its

133
00:04:31,120 --> 00:04:36,639
subset and outputs a binary string

134
00:04:34,479 --> 00:04:38,639
after the adversary is done with leakage

135
00:04:36,639 --> 00:04:40,880
he is also allowed to output a tampering

136
00:04:38,639 --> 00:04:42,960
query f1 f2 and so on

137
00:04:40,880 --> 00:04:44,960
and in this case each function takes as

138
00:04:42,960 --> 00:04:46,400
input all the shares within the subset

139
00:04:44,960 --> 00:04:48,638
where it is defined

140
00:04:46,400 --> 00:04:50,080
and outputs other shares within the same

141
00:04:48,639 --> 00:04:52,240
subset

142
00:04:50,080 --> 00:04:54,479
then the reconstruction is computed

143
00:04:52,240 --> 00:04:58,240
using the new shares and adversary only

144
00:04:54,479 --> 00:04:58,240
sees the result of the reconstruction

145
00:04:58,320 --> 00:05:02,320
in this setting we prove that any

146
00:05:00,560 --> 00:05:03,440
one-time non-malleable signal sharing

147
00:05:02,320 --> 00:05:06,159
scheme is also

148
00:05:03,440 --> 00:05:07,919
l-bounded leakage resilient we proceed

149
00:05:06,160 --> 00:05:10,000
by complexity leveraging and in

150
00:05:07,919 --> 00:05:12,080
particular we construct a reduction that

151
00:05:10,000 --> 00:05:14,080
tries to guess the leakage string

152
00:05:12,080 --> 00:05:15,520
first of all the reduction commits to

153
00:05:14,080 --> 00:05:16,240
the same reconstruction set and

154
00:05:15,520 --> 00:05:19,520
partition

155
00:05:16,240 --> 00:05:21,840
of the adversary then upon receiving

156
00:05:19,520 --> 00:05:24,000
a leakage query the reduction samples a

157
00:05:21,840 --> 00:05:25,440
random binary string of the size of the

158
00:05:24,000 --> 00:05:28,240
expected output

159
00:05:25,440 --> 00:05:29,440
and returns it to the adversary for

160
00:05:28,240 --> 00:05:32,400
simplicity here i

161
00:05:29,440 --> 00:05:34,000
only consider one leakage query however

162
00:05:32,400 --> 00:05:35,919
with the same technique we actually

163
00:05:34,000 --> 00:05:38,479
prove security even in the presence of

164
00:05:35,919 --> 00:05:40,799
multiple leakage queries

165
00:05:38,479 --> 00:05:42,880
after the leakage phase the adversary

166
00:05:40,800 --> 00:05:44,720
outputs its stamping query

167
00:05:42,880 --> 00:05:46,560
and now the reduction constructs a new

168
00:05:44,720 --> 00:05:47,600
tampering query that hardwires the

169
00:05:46,560 --> 00:05:49,520
original one

170
00:05:47,600 --> 00:05:52,880
and all the leakage functions with their

171
00:05:49,520 --> 00:05:55,198
respective randomly sampled answers

172
00:05:52,880 --> 00:05:56,719
the new tampering query checks if the

173
00:05:55,199 --> 00:05:59,440
guess on the leakage is correct

174
00:05:56,720 --> 00:06:01,039
if and if not invalidates the

175
00:05:59,440 --> 00:06:03,120
reconstructed message

176
00:06:01,039 --> 00:06:04,479
in particular since each dampening

177
00:06:03,120 --> 00:06:06,720
function fi

178
00:06:04,479 --> 00:06:09,280
takes as input the exact same shares of

179
00:06:06,720 --> 00:06:11,520
the corresponding leakage function gi

180
00:06:09,280 --> 00:06:12,719
the new tampering function fi hat

181
00:06:11,520 --> 00:06:15,440
computes gi

182
00:06:12,720 --> 00:06:16,800
and checks if the new the result is

183
00:06:15,440 --> 00:06:19,600
equal

184
00:06:16,800 --> 00:06:20,160
to the random guess if it is so then it

185
00:06:19,600 --> 00:06:22,479
applies

186
00:06:20,160 --> 00:06:24,000
a file to the shares and otherwise it

187
00:06:22,479 --> 00:06:26,159
destroys the shares so that the

188
00:06:24,000 --> 00:06:28,319
resulting reconstructed message is not a

189
00:06:26,160 --> 00:06:30,240
valid message

190
00:06:28,319 --> 00:06:32,560
moreover since we are considering

191
00:06:30,240 --> 00:06:34,319
tampering on a minimal authorized subset

192
00:06:32,560 --> 00:06:35,680
and we are considering a partition of

193
00:06:34,319 --> 00:06:37,680
that subset

194
00:06:35,680 --> 00:06:38,960
every share is needed in order to

195
00:06:37,680 --> 00:06:40,720
reconstruct the secret

196
00:06:38,960 --> 00:06:42,719
and therefore the adversary cannot

197
00:06:40,720 --> 00:06:44,560
bypass the check on the leakage

198
00:06:42,720 --> 00:06:45,759
in other words if the guess on the

199
00:06:44,560 --> 00:06:48,080
leakage is wrong

200
00:06:45,759 --> 00:06:51,120
then we are completely sure that the

201
00:06:48,080 --> 00:06:53,359
tempering fails and the reconstruction

202
00:06:51,120 --> 00:06:54,800
and the reduction resist both as an

203
00:06:53,360 --> 00:06:57,440
answer

204
00:06:54,800 --> 00:06:59,199
okay so the reduction now sends the new

205
00:06:57,440 --> 00:07:01,280
tampering query to the challenger and

206
00:06:59,199 --> 00:07:02,800
forwards the answer to the adversary and

207
00:07:01,280 --> 00:07:05,919
finally it outputs the same

208
00:07:02,800 --> 00:07:08,319
distinguishing bit as the diversity

209
00:07:05,919 --> 00:07:09,919
for the analysis suppose that adversary

210
00:07:08,319 --> 00:07:10,880
has an advantage of the more than

211
00:07:09,919 --> 00:07:12,880
epsilon

212
00:07:10,880 --> 00:07:14,800
and let's figure out what the advantage

213
00:07:12,880 --> 00:07:16,880
of the reduction is

214
00:07:14,800 --> 00:07:17,840
first when the adversary manages to

215
00:07:16,880 --> 00:07:20,000
guess the leakage

216
00:07:17,840 --> 00:07:21,359
the view of the adversary is the same as

217
00:07:20,000 --> 00:07:25,039
in the real experiment

218
00:07:21,360 --> 00:07:27,039
in fact the answer to the leakage query

219
00:07:25,039 --> 00:07:29,280
is correct and also the answer to the

220
00:07:27,039 --> 00:07:32,318
tampering queries computed by using the

221
00:07:29,280 --> 00:07:33,198
dampening function of the adversary on

222
00:07:32,319 --> 00:07:35,039
the other hand

223
00:07:33,199 --> 00:07:37,039
when the adversary does not guess the

224
00:07:35,039 --> 00:07:37,840
leakage then the view of the lead

225
00:07:37,039 --> 00:07:39,919
adversary

226
00:07:37,840 --> 00:07:42,239
is completely independent of the secret

227
00:07:39,919 --> 00:07:44,000
shared message and thus it is completely

228
00:07:42,240 --> 00:07:47,520
independent of the challenge

229
00:07:44,000 --> 00:07:48,800
bit and this is because when the gas on

230
00:07:47,520 --> 00:07:51,198
the leakage is wrong

231
00:07:48,800 --> 00:07:53,280
the adversary obtains a uniformly random

232
00:07:51,199 --> 00:07:54,879
string instead of the actual leakage

233
00:07:53,280 --> 00:07:56,719
and moreover the guess on the leakage

234
00:07:54,879 --> 00:07:58,720
being drawn causes the new tampering

235
00:07:56,720 --> 00:08:00,160
function of the reduction to replace the

236
00:07:58,720 --> 00:08:02,080
shares with garbage

237
00:08:00,160 --> 00:08:04,319
and therefore the reconstructed message

238
00:08:02,080 --> 00:08:04,878
is replaced with both regardless of the

239
00:08:04,319 --> 00:08:08,080
of it

240
00:08:04,879 --> 00:08:10,080
being m0 or m1 so

241
00:08:08,080 --> 00:08:11,440
being both the result of the leakage and

242
00:08:10,080 --> 00:08:14,240
the result of the tampering

243
00:08:11,440 --> 00:08:16,479
independent of the shared message so is

244
00:08:14,240 --> 00:08:19,840
the view of the adversary and therefore

245
00:08:16,479 --> 00:08:22,240
he has now no advantage at all

246
00:08:19,840 --> 00:08:25,198
finally since the adversary is limited

247
00:08:22,240 --> 00:08:26,960
to ask a model at most l bits of leakage

248
00:08:25,199 --> 00:08:29,440
the string that the reduction randomly

249
00:08:26,960 --> 00:08:31,120
samples is at most l bits long

250
00:08:29,440 --> 00:08:32,479
hence the probability of guessing the

251
00:08:31,120 --> 00:08:35,200
right league string

252
00:08:32,479 --> 00:08:36,000
is 2 to the minus l and the advantage of

253
00:08:35,200 --> 00:08:38,000
the reduction

254
00:08:36,000 --> 00:08:40,080
is more than 2 to the minus l times

255
00:08:38,000 --> 00:08:42,320
epsilon and this means that

256
00:08:40,080 --> 00:08:44,320
if there exists an adversary breaking

257
00:08:42,320 --> 00:08:46,080
liquid resilient normal ability

258
00:08:44,320 --> 00:08:47,920
then it is possible to break simple

259
00:08:46,080 --> 00:08:50,240
normal ability and this concludes the

260
00:08:47,920 --> 00:08:50,240
proof

261
00:08:50,880 --> 00:08:54,480
in the case of same adaptive

262
00:08:52,240 --> 00:08:56,160
partitioning diversity is allowed to

263
00:08:54,480 --> 00:08:57,279
perform the same queries as in the

264
00:08:56,160 --> 00:08:59,360
selective case

265
00:08:57,279 --> 00:09:01,120
however here the adversary does not

266
00:08:59,360 --> 00:09:02,399
commit to a particular reconstruction

267
00:09:01,120 --> 00:09:04,320
set or partition

268
00:09:02,399 --> 00:09:06,320
but he is allowed to choose a different

269
00:09:04,320 --> 00:09:08,640
partition for each query

270
00:09:06,320 --> 00:09:10,720
the only restriction we require is that

271
00:09:08,640 --> 00:09:12,480
there are no partial overlaps between

272
00:09:10,720 --> 00:09:14,240
the tampering partition and the leakage

273
00:09:12,480 --> 00:09:17,040
partitions

274
00:09:14,240 --> 00:09:18,399
in other words for each subset x of the

275
00:09:17,040 --> 00:09:21,040
dampening partition

276
00:09:18,399 --> 00:09:22,080
and each subset y of each leakage

277
00:09:21,040 --> 00:09:25,760
partition

278
00:09:22,080 --> 00:09:28,320
either y is inside x or it is outside x

279
00:09:25,760 --> 00:09:29,839
it is not allowed to have some shares of

280
00:09:28,320 --> 00:09:32,560
y inside x

281
00:09:29,839 --> 00:09:33,680
and some other shares of y outside x

282
00:09:32,560 --> 00:09:36,000
informally

283
00:09:33,680 --> 00:09:36,719
this allows us to treat the tampering

284
00:09:36,000 --> 00:09:38,720
query

285
00:09:36,720 --> 00:09:39,920
almost like if it was in the selected

286
00:09:38,720 --> 00:09:42,240
partitioning model

287
00:09:39,920 --> 00:09:44,800
while the leakage queries resemble more

288
00:09:42,240 --> 00:09:46,959
the adaptive partition model

289
00:09:44,800 --> 00:09:48,959
in the setting nominal ability is much

290
00:09:46,959 --> 00:09:50,399
easier to achieve than in the original

291
00:09:48,959 --> 00:09:52,880
adaptive partitioning

292
00:09:50,399 --> 00:09:55,760
and this allows us to prove security of

293
00:09:52,880 --> 00:09:58,080
our construction

294
00:09:55,760 --> 00:10:00,720
actually our construction is inspired by

295
00:09:58,080 --> 00:10:03,279
the construction of goyalan kumar

296
00:10:00,720 --> 00:10:04,079
and involves a normal level code and two

297
00:10:03,279 --> 00:10:05,920
distinct

298
00:10:04,079 --> 00:10:08,079
secret sharing schemes with different

299
00:10:05,920 --> 00:10:10,079
parameters in particular

300
00:10:08,079 --> 00:10:11,599
the normal level code outputs a left

301
00:10:10,079 --> 00:10:13,439
share and a right share

302
00:10:11,600 --> 00:10:15,040
and then we apply a joint leakage

303
00:10:13,440 --> 00:10:16,000
resilient secret sharing scheme to the

304
00:10:15,040 --> 00:10:18,560
left share

305
00:10:16,000 --> 00:10:19,040
realizing a t out of n access structure

306
00:10:18,560 --> 00:10:21,599
that is

307
00:10:19,040 --> 00:10:23,599
the same as the one we want to achieve

308
00:10:21,600 --> 00:10:25,200
and then we apply another joint leakage

309
00:10:23,600 --> 00:10:26,000
resilient secret sharing scheme to the

310
00:10:25,200 --> 00:10:28,079
right share

311
00:10:26,000 --> 00:10:29,200
with a reconstruction threshold of

312
00:10:28,079 --> 00:10:32,000
approximately

313
00:10:29,200 --> 00:10:34,480
the square root of d finally we obtain

314
00:10:32,000 --> 00:10:36,640
the new shirts by concatenating

315
00:10:34,480 --> 00:10:38,800
each left share with the respective

316
00:10:36,640 --> 00:10:40,640
right share

317
00:10:38,800 --> 00:10:42,800
as for the proof we generalize the

318
00:10:40,640 --> 00:10:44,720
analysis of kumar mckenza high and in

319
00:10:42,800 --> 00:10:46,640
particular we obtain the leakage and

320
00:10:44,720 --> 00:10:49,440
tampering sealants of the scheme

321
00:10:46,640 --> 00:10:49,760
to be against joint and joint attacks

322
00:10:49,440 --> 00:10:52,480
with

323
00:10:49,760 --> 00:10:55,760
up to square root of the shares in the

324
00:10:52,480 --> 00:10:57,920
semi-adaptive partitioning model

325
00:10:55,760 --> 00:11:00,079
the actual proof is quite long and full

326
00:10:57,920 --> 00:11:03,760
of details so i'll only summarize

327
00:11:00,079 --> 00:11:05,760
the k ideas here first of all

328
00:11:03,760 --> 00:11:07,839
once the tampering query arrives we

329
00:11:05,760 --> 00:11:09,600
split the reconstruction set in two

330
00:11:07,839 --> 00:11:12,959
non-overlapping subsets

331
00:11:09,600 --> 00:11:14,800
t0 and t1 so that t0 has sufficiently

332
00:11:12,959 --> 00:11:17,279
many shares to reconstruct the right

333
00:11:14,800 --> 00:11:20,319
share of the non-malleable code

334
00:11:17,279 --> 00:11:23,519
then we proceed by eyebrow argument

335
00:11:20,320 --> 00:11:26,640
in the first hybrid argument

336
00:11:23,519 --> 00:11:28,880
we replace all the left shares within t1

337
00:11:26,640 --> 00:11:30,640
with valid shares of the same secret

338
00:11:28,880 --> 00:11:33,680
message that are consistent with the

339
00:11:30,640 --> 00:11:36,240
leakage performed by the adversary

340
00:11:33,680 --> 00:11:38,399
here is where the restriction on the

341
00:11:36,240 --> 00:11:39,120
semi adaptive partitioning comes into

342
00:11:38,399 --> 00:11:41,680
play

343
00:11:39,120 --> 00:11:44,000
in fact without this restriction some of

344
00:11:41,680 --> 00:11:45,120
the shares in t1 may be related to

345
00:11:44,000 --> 00:11:47,519
shares of t0

346
00:11:45,120 --> 00:11:49,839
by the output of some leakage query

347
00:11:47,519 --> 00:11:52,399
however semi-adaptive partitioning

348
00:11:49,839 --> 00:11:54,560
ensures us that this does not happen and

349
00:11:52,399 --> 00:11:56,480
therefore it is safe to resample all the

350
00:11:54,560 --> 00:11:59,839
shares within tisa t1

351
00:11:56,480 --> 00:12:01,760
without actually knowing the shares in

352
00:11:59,839 --> 00:12:03,920
t0

353
00:12:01,760 --> 00:12:05,760
the rest of the proof is similar to the

354
00:12:03,920 --> 00:12:07,760
one by kumar mechan sahai

355
00:12:05,760 --> 00:12:09,920
and in particular we move to the second

356
00:12:07,760 --> 00:12:12,079
hybrid experiment by replacing all the

357
00:12:09,920 --> 00:12:14,399
left shares with left shares of a single

358
00:12:12,079 --> 00:12:16,000
sharing of a dummy value

359
00:12:14,399 --> 00:12:18,639
and for the third and the fourth i

360
00:12:16,000 --> 00:12:19,839
believe experiment we simply reapply the

361
00:12:18,639 --> 00:12:22,560
same ideas of

362
00:12:19,839 --> 00:12:24,240
the first and second hybrid experiments

363
00:12:22,560 --> 00:12:26,239
to the right shares

364
00:12:24,240 --> 00:12:28,240
the only difference in this case being

365
00:12:26,240 --> 00:12:29,440
that when resembling the right shares

366
00:12:28,240 --> 00:12:31,440
for the tampering

367
00:12:29,440 --> 00:12:33,360
we need to be consistent also with the

368
00:12:31,440 --> 00:12:35,839
modifications introduced in the previous

369
00:12:33,360 --> 00:12:38,160
hybrid experiments

370
00:12:35,839 --> 00:12:40,079
finally since the tampering on the left

371
00:12:38,160 --> 00:12:41,600
shares and on the right shares can be

372
00:12:40,079 --> 00:12:43,519
computed independently

373
00:12:41,600 --> 00:12:45,920
it is now safe to reduce the normal

374
00:12:43,519 --> 00:12:49,519
ability of the normal level code and

375
00:12:45,920 --> 00:12:49,519
this finally concludes the proof

376
00:12:49,760 --> 00:12:53,680
as an application we construct a

377
00:12:51,680 --> 00:12:54,959
compiler that takes a leakage resilient

378
00:12:53,680 --> 00:12:56,800
one-time statistically

379
00:12:54,959 --> 00:12:58,479
malleable signal sharing scheme and

380
00:12:56,800 --> 00:13:00,639
outputs a p times

381
00:12:58,480 --> 00:13:01,760
computationally malleable secret chain

382
00:13:00,639 --> 00:13:04,399
scheme

383
00:13:01,760 --> 00:13:05,120
actually we know we use known techniques

384
00:13:04,399 --> 00:13:07,600
from paper

385
00:13:05,120 --> 00:13:09,440
achieving continuous normal ability and

386
00:13:07,600 --> 00:13:11,360
in particular in our construction we

387
00:13:09,440 --> 00:13:12,240
simple random coins for a commitment

388
00:13:11,360 --> 00:13:14,639
scheme

389
00:13:12,240 --> 00:13:16,399
then we compute the commitment to the

390
00:13:14,639 --> 00:13:17,600
secret message using the simple

391
00:13:16,399 --> 00:13:19,519
randomness

392
00:13:17,600 --> 00:13:22,240
and we secretly share the concatenation

393
00:13:19,519 --> 00:13:24,480
of the secret message and the randomness

394
00:13:22,240 --> 00:13:26,320
the final height share is composed by

395
00:13:24,480 --> 00:13:28,399
the commitment and the added share of

396
00:13:26,320 --> 00:13:31,519
the underlying security

397
00:13:28,399 --> 00:13:33,519
underlying cigarette sharing message

398
00:13:31,519 --> 00:13:35,200
the reconstruction algorithm works as

399
00:13:33,519 --> 00:13:37,519
follows each share

400
00:13:35,200 --> 00:13:38,240
is parsed in a pair commitment inner

401
00:13:37,519 --> 00:13:40,240
share

402
00:13:38,240 --> 00:13:41,360
and then the algorithm checks that all

403
00:13:40,240 --> 00:13:44,320
the commitments

404
00:13:41,360 --> 00:13:46,320
are actually the same if it is the case

405
00:13:44,320 --> 00:13:47,040
the algorithm proceeds to reconstruct

406
00:13:46,320 --> 00:13:49,360
the secret

407
00:13:47,040 --> 00:13:51,120
along with the randomness and finally

408
00:13:49,360 --> 00:13:51,920
verifies that the pair message

409
00:13:51,120 --> 00:13:54,000
randomness

410
00:13:51,920 --> 00:13:55,040
is a valid opening for the received

411
00:13:54,000 --> 00:13:58,639
commitment

412
00:13:55,040 --> 00:13:59,040
if not it output outputs both otherwise

413
00:13:58,639 --> 00:14:02,320
it

414
00:13:59,040 --> 00:14:04,639
outputs the advanced message

415
00:14:02,320 --> 00:14:07,920
the key ideas of the proof are very

416
00:14:04,639 --> 00:14:09,600
similar to the ones in brian found 2019

417
00:14:07,920 --> 00:14:11,839
and in particular we proceed by

418
00:14:09,600 --> 00:14:13,920
induction over the number of queries

419
00:14:11,839 --> 00:14:15,600
in each step we simulate the tampering

420
00:14:13,920 --> 00:14:16,479
with leakage by obtaining the mould

421
00:14:15,600 --> 00:14:18,240
commitment

422
00:14:16,480 --> 00:14:19,680
and then extracting the respective

423
00:14:18,240 --> 00:14:22,959
secret secret mesh

424
00:14:19,680 --> 00:14:23,920
search when the final dampening query

425
00:14:22,959 --> 00:14:26,079
occurs

426
00:14:23,920 --> 00:14:27,439
we then check that everything we've done

427
00:14:26,079 --> 00:14:29,760
so far is correct and

428
00:14:27,440 --> 00:14:30,480
if not we're bored otherwise we proceed

429
00:14:29,760 --> 00:14:32,399
to forward

430
00:14:30,480 --> 00:14:34,480
dampening query to the challenger and

431
00:14:32,399 --> 00:14:36,720
the respective answer

432
00:14:34,480 --> 00:14:38,639
to the adversary since we use a

433
00:14:36,720 --> 00:14:40,079
perfectly binding commitment scheme we

434
00:14:38,639 --> 00:14:41,920
only achieve security in the

435
00:14:40,079 --> 00:14:43,760
computational setting and since we

436
00:14:41,920 --> 00:14:45,680
consider the abundant league model

437
00:14:43,760 --> 00:14:48,079
instead of the noisy leakage model

438
00:14:45,680 --> 00:14:49,359
considered by priyan found inventory we

439
00:14:48,079 --> 00:14:51,920
are only able

440
00:14:49,360 --> 00:14:53,920
to achieve beta number ability with p

441
00:14:51,920 --> 00:14:56,160
being fixed a priori

442
00:14:53,920 --> 00:14:57,599
however we obtain security against a

443
00:14:56,160 --> 00:14:59,519
larger class of attacks

444
00:14:57,600 --> 00:15:02,160
that is joint tampering under both

445
00:14:59,519 --> 00:15:04,079
selective and semi-adaptive partitioning

446
00:15:02,160 --> 00:15:05,439
moreover it is always possible to

447
00:15:04,079 --> 00:15:07,279
increase the parameter p

448
00:15:05,440 --> 00:15:09,120
by increasing the amount of leakage

449
00:15:07,279 --> 00:15:10,560
allowed by the early underlying secret

450
00:15:09,120 --> 00:15:12,880
sharing scheme

451
00:15:10,560 --> 00:15:13,760
so summing up our results are the

452
00:15:12,880 --> 00:15:15,760
following

453
00:15:13,760 --> 00:15:17,360
we prove that any non-malleable secret

454
00:15:15,760 --> 00:15:19,519
sharing scheme is also legal to

455
00:15:17,360 --> 00:15:21,440
resilient we construct a legal resilient

456
00:15:19,519 --> 00:15:22,560
one-time non-malleable secretary scheme

457
00:15:21,440 --> 00:15:25,440
that is secure

458
00:15:22,560 --> 00:15:26,719
against same adaptive partitioning and

459
00:15:25,440 --> 00:15:28,880
we find corollaries

460
00:15:26,720 --> 00:15:30,320
proving lower bounds on the size of the

461
00:15:28,880 --> 00:15:31,439
shares on a normal level cigarette

462
00:15:30,320 --> 00:15:33,440
sharing scheme

463
00:15:31,440 --> 00:15:35,040
and finally we construct a p-tine and

464
00:15:33,440 --> 00:15:37,120
malleable secret sharing scheme in the

465
00:15:35,040 --> 00:15:39,199
computational setting that is secure

466
00:15:37,120 --> 00:15:41,199
both against selective and semi-adaptive

467
00:15:39,199 --> 00:15:43,120
partitioning

468
00:15:41,199 --> 00:15:44,399
as for the open province we are

469
00:15:43,120 --> 00:15:46,720
currently currently

470
00:15:44,399 --> 00:15:48,560
working on this topic and actually we

471
00:15:46,720 --> 00:15:49,920
have some preliminary work in progress

472
00:15:48,560 --> 00:15:52,160
towards the following over

473
00:15:49,920 --> 00:15:54,160
problems the first one is the

474
00:15:52,160 --> 00:15:55,199
construction of a continuously malleable

475
00:15:54,160 --> 00:15:57,199
single sharing scheme

476
00:15:55,199 --> 00:15:59,519
against joint tampering under selective

477
00:15:57,199 --> 00:16:01,519
partitioning

478
00:15:59,519 --> 00:16:03,279
in this paper we only achieve bit time

479
00:16:01,519 --> 00:16:05,279
on malleability and at the moment

480
00:16:03,279 --> 00:16:06,639
the only two schemes achieving

481
00:16:05,279 --> 00:16:08,639
continuous nominal ability

482
00:16:06,639 --> 00:16:09,920
are either secure against independent

483
00:16:08,639 --> 00:16:11,680
tampering only

484
00:16:09,920 --> 00:16:13,279
or secure in the common reference

485
00:16:11,680 --> 00:16:15,519
training model but we

486
00:16:13,279 --> 00:16:17,759
would like to attain security against a

487
00:16:15,519 --> 00:16:18,320
larger class of attacks and at the same

488
00:16:17,759 --> 00:16:20,639
time

489
00:16:18,320 --> 00:16:22,639
we want to get rid of the necessity of

490
00:16:20,639 --> 00:16:25,680
either a trusted third party

491
00:16:22,639 --> 00:16:28,160
or untemperable swing however we leave

492
00:16:25,680 --> 00:16:30,000
it open to find out to construct

493
00:16:28,160 --> 00:16:31,680
a continuously malleable signal sharing

494
00:16:30,000 --> 00:16:33,519
scheme that is secure even in the

495
00:16:31,680 --> 00:16:35,839
presence of semi-adaptive or

496
00:16:33,519 --> 00:16:37,759
even more adaptive partitioning the

497
00:16:35,839 --> 00:16:40,399
second problem we are working on

498
00:16:37,759 --> 00:16:42,160
is to improve the rate that is the ratio

499
00:16:40,399 --> 00:16:44,320
between the size of the message and the

500
00:16:42,160 --> 00:16:46,319
size of the shares

501
00:16:44,320 --> 00:16:48,480
towards this we are going to improve

502
00:16:46,320 --> 00:16:50,720
this asymptotic rate thus for this in

503
00:16:48,480 --> 00:16:53,519
reducing the gap

504
00:16:50,720 --> 00:16:55,680
however we still do not know if the same

505
00:16:53,519 --> 00:16:57,519
optimal rate of classical secret sharing

506
00:16:55,680 --> 00:16:59,839
from craft sheets paper

507
00:16:57,519 --> 00:17:01,680
secret sharing made short also applies

508
00:16:59,839 --> 00:17:03,600
to non-malleable signal sharing or if

509
00:17:01,680 --> 00:17:05,918
non-malleability requires a further

510
00:17:03,600 --> 00:17:09,520
limitation on the size of the shares

511
00:17:05,919 --> 00:17:12,400
even in the computational setting

512
00:17:09,520 --> 00:17:15,240
and that's it thank you very much for

513
00:17:12,400 --> 00:17:18,240
your attention and enjoy the rest of the

514
00:17:15,240 --> 00:17:18,240
conference

