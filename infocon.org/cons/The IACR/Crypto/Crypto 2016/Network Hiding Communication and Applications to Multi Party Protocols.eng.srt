1
00:00:03,770 --> 00:00:09,920
okay so let's see we all know MPC you

2
00:00:09,920 --> 00:00:11,959
have n parties and your goal is somewhat

3
00:00:11,959 --> 00:00:14,090
to construct such a trusted guy in the

4
00:00:14,090 --> 00:00:16,760
middle there the challenge of course is

5
00:00:16,760 --> 00:00:19,430
that certain guys are dishonest and now

6
00:00:19,430 --> 00:00:22,010
it's well known that many protocols you

7
00:00:22,010 --> 00:00:24,380
can use to two chief this talk task

8
00:00:24,380 --> 00:00:28,789
however now let's look at this situation

9
00:00:28,789 --> 00:00:30,560
here we have an incomplete network okay

10
00:00:30,560 --> 00:00:32,689
we want to do the same wanna build the

11
00:00:32,689 --> 00:00:35,620
trust party okay well can you do well

12
00:00:35,620 --> 00:00:38,540
it's well known what you do first you

13
00:00:38,540 --> 00:00:40,220
complete the network using secure

14
00:00:40,220 --> 00:00:42,560
message transmission and then in the

15
00:00:42,560 --> 00:00:47,090
second step you can do npc on top now if

16
00:00:47,090 --> 00:00:49,100
you look at classical secure message

17
00:00:49,100 --> 00:00:51,710
transmission protocols what they have in

18
00:00:51,710 --> 00:00:54,290
common is that the network graph of the

19
00:00:54,290 --> 00:00:56,630
incomplete network is assumed to be

20
00:00:56,630 --> 00:00:58,910
public knowledge ok and the protocol may

21
00:00:58,910 --> 00:01:02,600
depend on that knowledge now if you

22
00:01:02,600 --> 00:01:04,819
consider certain networks like real life

23
00:01:04,819 --> 00:01:07,250
applications the network might contain

24
00:01:07,250 --> 00:01:09,499
confidential information for instance if

25
00:01:09,499 --> 00:01:12,229
your network is based on social a social

26
00:01:12,229 --> 00:01:14,959
network ok so you know certain guys and

27
00:01:14,959 --> 00:01:18,590
you talk with those well maybe you want

28
00:01:18,590 --> 00:01:22,249
to hide that information ok so therefore

29
00:01:22,249 --> 00:01:23,810
it would be bad if you would use a

30
00:01:23,810 --> 00:01:25,729
classic secure message transmission

31
00:01:25,729 --> 00:01:27,289
protocol if you want to hide this

32
00:01:27,289 --> 00:01:31,340
information this led to the notion of

33
00:01:31,340 --> 00:01:33,469
topology hiding communication which was

34
00:01:33,469 --> 00:01:37,009
introduced at last year's TCC and the

35
00:01:37,009 --> 00:01:38,929
goal there is ok you still want to

36
00:01:38,929 --> 00:01:41,270
complete the network but this time the

37
00:01:41,270 --> 00:01:43,520
graph is the secret ok so no one should

38
00:01:43,520 --> 00:01:46,069
learn it now it so if it's clear that

39
00:01:46,069 --> 00:01:48,829
somehow parties need to know at least

40
00:01:48,829 --> 00:01:51,619
some information about the graph ok for

41
00:01:51,619 --> 00:01:53,209
instance you need to communicate with

42
00:01:53,209 --> 00:01:55,630
your neighbors you know your friends ok

43
00:01:55,630 --> 00:01:59,869
so for instance if you consider that guy

44
00:01:59,869 --> 00:02:04,279
here he knows those his neighbors here

45
00:02:04,279 --> 00:02:06,079
but he should not learn more about the

46
00:02:06,079 --> 00:02:08,030
graph right if you don't learn that for

47
00:02:08,030 --> 00:02:10,758
instance those two guys here know each

48
00:02:10,758 --> 00:02:14,630
other ok so more formally here's our

49
00:02:14,630 --> 00:02:16,760
communication model

50
00:02:16,760 --> 00:02:19,430
we have this rose and parties up to t of

51
00:02:19,430 --> 00:02:21,319
them are dishonest we look at

52
00:02:21,319 --> 00:02:23,480
synchronous communications of protocols

53
00:02:23,480 --> 00:02:27,439
preceding rounds this incomplete network

54
00:02:27,439 --> 00:02:30,019
okay it consists of private secure

55
00:02:30,019 --> 00:02:33,470
channels then we have the network graph

56
00:02:33,470 --> 00:02:36,099
which is from some family of graphs okay

57
00:02:36,099 --> 00:02:38,299
they should be at least connected

58
00:02:38,299 --> 00:02:40,280
otherwise it's hard to complete the

59
00:02:40,280 --> 00:02:43,159
network and it could be an arbitrary

60
00:02:43,159 --> 00:02:45,440
graph out of this family of graphs okay

61
00:02:45,440 --> 00:02:47,299
and kind of this family that's all the

62
00:02:47,299 --> 00:02:50,510
information you know about the growth as

63
00:02:50,510 --> 00:02:52,220
I said before you can communicate with

64
00:02:52,220 --> 00:02:54,290
your neighbors and this means that the

65
00:02:54,290 --> 00:02:56,120
adversary knows the neighborhood of all

66
00:02:56,120 --> 00:03:00,409
these honest parties ok so the security

67
00:03:00,409 --> 00:03:02,209
we consider a simulation-based so the

68
00:03:02,209 --> 00:03:03,920
idea is in the real world you have the

69
00:03:03,920 --> 00:03:05,629
incomplete Network you you run your a

70
00:03:05,629 --> 00:03:08,319
secure message transition protocol and

71
00:03:08,319 --> 00:03:10,760
here on the writing the idea what you

72
00:03:10,760 --> 00:03:12,829
have is you have the complete network

73
00:03:12,829 --> 00:03:15,260
and additionally have still given the

74
00:03:15,260 --> 00:03:17,150
incomplete network and you have to

75
00:03:17,150 --> 00:03:18,709
simulate whatever you see in the real

76
00:03:18,709 --> 00:03:22,790
using this ideal world here the idea is

77
00:03:22,790 --> 00:03:24,440
that the incomplete network is

78
00:03:24,440 --> 00:03:26,810
completely independent of the graph of

79
00:03:26,810 --> 00:03:28,489
the graph of the net at the network you

80
00:03:28,489 --> 00:03:30,500
have given and so the only information

81
00:03:30,500 --> 00:03:33,590
the adversary learns in the ideal world

82
00:03:33,590 --> 00:03:35,359
is actually kind of the neighborhood of

83
00:03:35,359 --> 00:03:38,060
dishonest parties ok so that's kind of

84
00:03:38,060 --> 00:03:40,129
the idea of this topology hiding

85
00:03:40,129 --> 00:03:44,810
communication so what is known well as I

86
00:03:44,810 --> 00:03:46,459
said it was introduced at last year's

87
00:03:46,459 --> 00:03:50,239
TCC by more on it all and so they looked

88
00:03:50,239 --> 00:03:52,250
at the feasibility of this topology

89
00:03:52,250 --> 00:03:54,709
adding communication in various models

90
00:03:54,709 --> 00:03:57,230
so here's bad news if you consider

91
00:03:57,230 --> 00:03:59,540
unbounded adversary's it seems not to be

92
00:03:59,540 --> 00:04:02,060
possible there will be some leakage in

93
00:04:02,060 --> 00:04:04,940
general the same is true if you look at

94
00:04:04,940 --> 00:04:08,060
fail stop adversaries ok so kind of an

95
00:04:08,060 --> 00:04:09,620
advert so you can just make it party

96
00:04:09,620 --> 00:04:12,680
stop at any time the issue here is that

97
00:04:12,680 --> 00:04:14,780
if you have a cut vertex in your graph

98
00:04:14,780 --> 00:04:17,750
for instance this guy here so the

99
00:04:17,750 --> 00:04:19,370
adversary can actually find out whether

100
00:04:19,370 --> 00:04:22,789
guys cut vertex or not okay just stop it

101
00:04:22,789 --> 00:04:24,770
and then see whether you can still

102
00:04:24,770 --> 00:04:26,860
communicate over the whole graph or not

103
00:04:26,860 --> 00:04:29,660
ok so this limits the

104
00:04:29,660 --> 00:04:33,140
possibilities we have so what they show

105
00:04:33,140 --> 00:04:34,550
is actually that if you have

106
00:04:34,550 --> 00:04:37,010
computationally bounded semi honest

107
00:04:37,010 --> 00:04:40,250
adversary's so curious adversities then

108
00:04:40,250 --> 00:04:41,690
it's possible okay you can achieve a

109
00:04:41,690 --> 00:04:43,790
static security against an arbitrary

110
00:04:43,790 --> 00:04:47,330
amount of corruption the idea of that

111
00:04:47,330 --> 00:04:50,540
protocol is to use MPC in MPC in MPC in

112
00:04:50,540 --> 00:04:52,190
MPC okay to hide the network topology

113
00:04:52,190 --> 00:04:54,530
they use this recursive MPC approach

114
00:04:54,530 --> 00:04:58,280
like virtual parties however this makes

115
00:04:58,280 --> 00:05:01,400
it a bit involved and also inefficient

116
00:05:01,400 --> 00:05:03,770
okay it gives you a huge blow up for

117
00:05:03,770 --> 00:05:06,800
instance what they they need is public

118
00:05:06,800 --> 00:05:08,840
key encryption in a white box manner in

119
00:05:08,840 --> 00:05:12,800
an NPC so you need to do encryption and

120
00:05:12,800 --> 00:05:16,340
decryption of in the MPC and then you do

121
00:05:16,340 --> 00:05:19,520
this recursively okay so the question is

122
00:05:19,520 --> 00:05:22,280
can you do this with less heavy tools

123
00:05:22,280 --> 00:05:24,590
okay and for instance the natural

124
00:05:24,590 --> 00:05:25,820
question is can you do it just with

125
00:05:25,820 --> 00:05:27,260
encryption okay if we want to hide the

126
00:05:27,260 --> 00:05:30,440
information so let's encrypt and our

127
00:05:30,440 --> 00:05:32,750
results are well we have the same

128
00:05:32,750 --> 00:05:34,820
setting here so computationally bounded

129
00:05:34,820 --> 00:05:38,360
semi honest adversaries and in this work

130
00:05:38,360 --> 00:05:41,090
here we present a protocol which is just

131
00:05:41,090 --> 00:05:44,960
based on the d d8 assumption we only use

132
00:05:44,960 --> 00:05:48,020
black box encryption okay so we do not

133
00:05:48,020 --> 00:05:50,660
have any npc in MPC it's just plain

134
00:05:50,660 --> 00:05:53,300
encryption and sending around messages

135
00:05:53,300 --> 00:05:56,600
and this leads to a simple protocol

136
00:05:56,600 --> 00:05:59,960
structure okay and on top of such a

137
00:05:59,960 --> 00:06:01,910
protocol we then also describe

138
00:06:01,910 --> 00:06:04,310
applications I mean classical

139
00:06:04,310 --> 00:06:06,980
application as before is NPC as was

140
00:06:06,980 --> 00:06:09,919
introduced in the TCC result what we

141
00:06:09,919 --> 00:06:11,660
especially focus on in our paper is

142
00:06:11,660 --> 00:06:14,510
topology hiding anonymous broadcast so

143
00:06:14,510 --> 00:06:17,810
this is a broadcast way not only hides

144
00:06:17,810 --> 00:06:19,520
the sender of the message but you also

145
00:06:19,520 --> 00:06:21,530
had any information about the network so

146
00:06:21,530 --> 00:06:23,030
that's kind of complete anonymous

147
00:06:23,030 --> 00:06:25,850
communication now in the rest of this

148
00:06:25,850 --> 00:06:29,120
talk I wanna focus on this protocol I

149
00:06:29,120 --> 00:06:31,190
want to give you some idea of how you

150
00:06:31,190 --> 00:06:32,570
can achieve topology hiding

151
00:06:32,570 --> 00:06:35,300
communication just using a threshold

152
00:06:35,300 --> 00:06:38,000
encryption okay but first let's start

153
00:06:38,000 --> 00:06:41,229
simple let's try to do this

154
00:06:41,229 --> 00:06:43,420
communication so first of all as we are

155
00:06:43,420 --> 00:06:45,640
Semyon setting it's enough to actually

156
00:06:45,640 --> 00:06:47,830
construct binary broadcast okay once you

157
00:06:47,830 --> 00:06:49,810
have binary brokers you can bro cause

158
00:06:49,810 --> 00:06:52,210
public keys and then you can complete

159
00:06:52,210 --> 00:06:54,310
the network okay so from now on we just

160
00:06:54,310 --> 00:06:57,490
want to focus on binary brokers okay so

161
00:06:57,490 --> 00:06:59,020
here's the first attempt how can we do

162
00:06:59,020 --> 00:07:00,760
this well it's simple okay we have a

163
00:07:00,760 --> 00:07:03,760
sender here with its bit and we want to

164
00:07:03,760 --> 00:07:05,920
broadcast that value so simply flooded

165
00:07:05,920 --> 00:07:08,050
okay the is sends it to all its

166
00:07:08,050 --> 00:07:11,320
neighbors and so on and so on until you

167
00:07:11,320 --> 00:07:14,440
do this like diameter many rounds you're

168
00:07:14,440 --> 00:07:16,810
done okay then everyone in the network

169
00:07:16,810 --> 00:07:19,060
has actually learned this bit however

170
00:07:19,060 --> 00:07:20,890
it's quite clear that this approach is

171
00:07:20,890 --> 00:07:23,470
not topology hiding at all okay for

172
00:07:23,470 --> 00:07:25,900
instance if you consider that guy here

173
00:07:25,900 --> 00:07:28,060
you can actually learn its distance to

174
00:07:28,060 --> 00:07:31,360
the center by just timing we have rounds

175
00:07:31,360 --> 00:07:33,550
okay timing the number of rounds until

176
00:07:33,550 --> 00:07:36,910
it gets to beat okay it's even worse you

177
00:07:36,910 --> 00:07:38,530
can actually find the direction to the

178
00:07:38,530 --> 00:07:41,230
sender okay he now knows that those two

179
00:07:41,230 --> 00:07:43,900
guys sent him the bit so he knows the

180
00:07:43,900 --> 00:07:45,760
shortest path to the sender's actually

181
00:07:45,760 --> 00:07:48,490
over this or that note okay so this

182
00:07:48,490 --> 00:07:50,620
means the message pattern is case leaks

183
00:07:50,620 --> 00:07:52,900
information about the network topology

184
00:07:52,900 --> 00:07:56,860
okay so can we do better yes we can it's

185
00:07:56,860 --> 00:07:59,380
simply by using an or flooding okay so

186
00:07:59,380 --> 00:08:01,300
in this case when you not only have this

187
00:08:01,300 --> 00:08:03,820
bit of the sender but everyone has a bit

188
00:08:03,820 --> 00:08:06,250
okay the center has its Big B and the

189
00:08:06,250 --> 00:08:08,470
others have the input bit 0 and so what

190
00:08:08,470 --> 00:08:10,360
we do now in doing this or flooding is

191
00:08:10,360 --> 00:08:12,190
the following in each round you just

192
00:08:12,190 --> 00:08:13,780
send your current bit to all your

193
00:08:13,780 --> 00:08:16,930
neighbors okay and you compute the or of

194
00:08:16,930 --> 00:08:18,880
the received bit okay for instance if

195
00:08:18,880 --> 00:08:20,730
you consider that guy here in the middle

196
00:08:20,730 --> 00:08:23,080
he receives all the bits of its

197
00:08:23,080 --> 00:08:25,060
neighbors and from the center you

198
00:08:25,060 --> 00:08:26,680
actually receives the real bit okay

199
00:08:26,680 --> 00:08:29,380
compute the or and this gives him the

200
00:08:29,380 --> 00:08:31,390
actual bit of the center and you down

201
00:08:31,390 --> 00:08:34,240
repeat this process enough rounds and

202
00:08:34,240 --> 00:08:36,400
then everyone has actually the bit of

203
00:08:36,400 --> 00:08:38,110
the sender so in the end what we do in

204
00:08:38,110 --> 00:08:40,360
this or flooding we compute the or of

205
00:08:40,360 --> 00:08:42,729
all input bits however it's quite clear

206
00:08:42,729 --> 00:08:44,980
that this is also not topology hiding

207
00:08:44,980 --> 00:08:47,500
because if say the sender has an input 1

208
00:08:47,500 --> 00:08:50,020
then you can do the same timing attack

209
00:08:50,020 --> 00:08:51,850
as before you just count the number of

210
00:08:51,850 --> 00:08:53,800
rounds until you see a first one and

211
00:08:53,800 --> 00:08:56,080
then you know the distance to the sender

212
00:08:56,080 --> 00:08:58,030
okay so not only message pattern but

213
00:08:58,030 --> 00:08:59,620
also the message content leaks

214
00:08:59,620 --> 00:09:02,020
information about the topology and

215
00:09:02,020 --> 00:09:04,090
that's where we can now go and use

216
00:09:04,090 --> 00:09:06,220
encryption okay so here's a third

217
00:09:06,220 --> 00:09:08,770
attempt now assume that out of the

218
00:09:08,770 --> 00:09:11,110
nowhere suddenly pardons have a public

219
00:09:11,110 --> 00:09:12,730
key okay everyone has the same public

220
00:09:12,730 --> 00:09:15,700
key and there is some trusted guy here

221
00:09:15,700 --> 00:09:17,470
at the bottom who has the sea cookie

222
00:09:17,470 --> 00:09:20,140
okay no one else knows the secret key so

223
00:09:20,140 --> 00:09:22,480
what you can do now is you encrypt your

224
00:09:22,480 --> 00:09:24,910
message okay now we do the same as

225
00:09:24,910 --> 00:09:27,010
before we choose to this or flooding

226
00:09:27,010 --> 00:09:29,560
using encrypted values okay so you send

227
00:09:29,560 --> 00:09:31,930
around ciphertext you compute the or on

228
00:09:31,930 --> 00:09:34,090
the ciphertext and if you do this enough

229
00:09:34,090 --> 00:09:35,680
round in the end what you have is a

230
00:09:35,680 --> 00:09:38,560
cipher text here which contains your of

231
00:09:38,560 --> 00:09:41,350
all bits okay and then you can send this

232
00:09:41,350 --> 00:09:43,360
ciphertext to the trusted party the

233
00:09:43,360 --> 00:09:45,580
trust party decrypt it for you and voila

234
00:09:45,580 --> 00:09:49,210
you have binary broadcast okay there's

235
00:09:49,210 --> 00:09:51,910
there are some issues here okay first we

236
00:09:51,910 --> 00:09:54,760
have now assumed set up this is bad we

237
00:09:54,760 --> 00:09:56,850
would like to do this without setup

238
00:09:56,850 --> 00:09:59,920
second to compute the aura us on

239
00:09:59,920 --> 00:10:01,870
ciphertext that's not so easy normally

240
00:10:01,870 --> 00:10:03,970
cipher texts are homomorphic respect to

241
00:10:03,970 --> 00:10:06,790
addition so it's not so clear how we can

242
00:10:06,790 --> 00:10:09,400
do this or computation there and third

243
00:10:09,400 --> 00:10:11,350
obviously we do not have a trusted party

244
00:10:11,350 --> 00:10:14,950
which decrypts the values okay so how

245
00:10:14,950 --> 00:10:17,020
can we solve those problems well the

246
00:10:17,020 --> 00:10:19,330
answer is our main tool is stretch all

247
00:10:19,330 --> 00:10:21,490
decryption okay so here's a classical

248
00:10:21,490 --> 00:10:24,310
way of one looks at threshold encryption

249
00:10:24,310 --> 00:10:25,450
so you have a trusted party which

250
00:10:25,450 --> 00:10:28,300
computes you a public key and key

251
00:10:28,300 --> 00:10:30,790
secretly shares okay secret key shares

252
00:10:30,790 --> 00:10:32,560
are given to the shareholders and the

253
00:10:32,560 --> 00:10:33,970
public key is given to some guy who

254
00:10:33,970 --> 00:10:36,640
wants to encrypt the values okay the guy

255
00:10:36,640 --> 00:10:38,650
has a message he can encrypt it and give

256
00:10:38,650 --> 00:10:40,000
it to someone else whereas now the

257
00:10:40,000 --> 00:10:42,610
ciphertext and now to decrypt what you

258
00:10:42,610 --> 00:10:43,960
need to do is you need to send a

259
00:10:43,960 --> 00:10:46,780
ciphertext to the shareholders okay

260
00:10:46,780 --> 00:10:48,580
which then compute you what we call a

261
00:10:48,580 --> 00:10:51,730
decryption share and using all those

262
00:10:51,730 --> 00:10:53,710
decryption shares you then can get back

263
00:10:53,710 --> 00:10:55,990
the message okay now in our case the

264
00:10:55,990 --> 00:10:58,600
threshold it's a full threshold so and

265
00:10:58,600 --> 00:11:01,330
out of n threshold so you need all the

266
00:11:01,330 --> 00:11:03,490
corruption shares in order to decrypt

267
00:11:03,490 --> 00:11:05,590
the message however we cannot use

268
00:11:05,590 --> 00:11:07,810
directly this traditional threshold

269
00:11:07,810 --> 00:11:09,760
encryption because we do not have

270
00:11:09,760 --> 00:11:12,880
such a trusted guy who distributes keys

271
00:11:12,880 --> 00:11:15,700
so what we need is a decentralized way

272
00:11:15,700 --> 00:11:19,030
to generate the shared key so instead of

273
00:11:19,030 --> 00:11:20,800
having a trusted party what we need is

274
00:11:20,800 --> 00:11:23,440
we need a local key generation so part

275
00:11:23,440 --> 00:11:25,900
is the key the shareholders here they

276
00:11:25,900 --> 00:11:28,210
can actually compute their own key keys

277
00:11:28,210 --> 00:11:30,760
okay public key and seeker key and what

278
00:11:30,760 --> 00:11:32,170
you can do then you can send around

279
00:11:32,170 --> 00:11:33,970
those public keys you can homomorphic

280
00:11:33,970 --> 00:11:36,130
elad them up okay and what you get is

281
00:11:36,130 --> 00:11:38,440
then this kind of composed public key

282
00:11:38,440 --> 00:11:40,810
okay and with this publicly you can then

283
00:11:40,810 --> 00:11:43,630
do the same thing as before and we also

284
00:11:43,630 --> 00:11:46,630
assume same similar way that decryption

285
00:11:46,630 --> 00:11:49,000
shares are also homo work with you okay

286
00:11:49,000 --> 00:11:51,700
so now we no longer have a trusted party

287
00:11:51,700 --> 00:11:53,740
but we can now decentralize generate

288
00:11:53,740 --> 00:11:56,470
public keys and we can also

289
00:11:56,470 --> 00:11:59,920
decentralized do this decryption okay

290
00:11:59,920 --> 00:12:02,500
now now how can you achieve that that I

291
00:12:02,500 --> 00:12:04,030
mean that's a nice property but how can

292
00:12:04,030 --> 00:12:06,370
you do that well you can use do that

293
00:12:06,370 --> 00:12:08,380
using a DD h based encryption so

294
00:12:08,380 --> 00:12:10,990
el-gamal style threshold encryption will

295
00:12:10,990 --> 00:12:13,960
do the job okay this is a special

296
00:12:13,960 --> 00:12:16,240
property if you look at by a encryption

297
00:12:16,240 --> 00:12:17,950
it's not so clear if you have this

298
00:12:17,950 --> 00:12:22,300
property so that's quite cool that we

299
00:12:22,300 --> 00:12:24,940
have this type of encryption so how can

300
00:12:24,940 --> 00:12:28,360
we now do the setup okay so ideally as I

301
00:12:28,360 --> 00:12:30,820
said before ideally everyone has now

302
00:12:30,820 --> 00:12:32,830
this composed public key okay where

303
00:12:32,830 --> 00:12:35,680
shareholders all the parties have a key

304
00:12:35,680 --> 00:12:38,410
share okay and then you could do this

305
00:12:38,410 --> 00:12:40,270
encryption stuff however there is the

306
00:12:40,270 --> 00:12:42,340
problem you need to be able to

307
00:12:42,340 --> 00:12:44,320
distribute that key okay so that's kind

308
00:12:44,320 --> 00:12:47,230
of a circle so we have to weaken our

309
00:12:47,230 --> 00:12:50,260
goal and so the idea is each party gets

310
00:12:50,260 --> 00:12:54,040
its own key okay again the key is still

311
00:12:54,040 --> 00:12:56,260
shared among everyone so in order to

312
00:12:56,260 --> 00:12:58,090
decrypt under that public key you need

313
00:12:58,090 --> 00:12:59,920
actually all the key holder so all

314
00:12:59,920 --> 00:13:03,460
parties but now every party has their

315
00:13:03,460 --> 00:13:05,080
own key and moreover we do not

316
00:13:05,080 --> 00:13:06,790
distribute the key yet so the key is

317
00:13:06,790 --> 00:13:10,210
just locally okay and how can you do

318
00:13:10,210 --> 00:13:12,970
that well here's the idea if you have a

319
00:13:12,970 --> 00:13:16,210
graph of a diameter Delta all parties

320
00:13:16,210 --> 00:13:19,360
are within my Delta neighborhood okay so

321
00:13:19,360 --> 00:13:22,510
now you can recursively compute a public

322
00:13:22,510 --> 00:13:23,620
key which is shared

323
00:13:23,620 --> 00:13:26,170
among all parties okay so the idea is we

324
00:13:26,170 --> 00:13:28,089
do not compute one key we compute the

325
00:13:28,089 --> 00:13:31,120
whole series of keys okay like a PK k

326
00:13:31,120 --> 00:13:33,670
where this a PK k is actually shared

327
00:13:33,670 --> 00:13:35,589
among my k neighborhoods okay

328
00:13:35,589 --> 00:13:37,330
neighborhood means all parties within

329
00:13:37,330 --> 00:13:40,270
distance k of myself okay so this looks

330
00:13:40,270 --> 00:13:42,220
then like the following so we have here

331
00:13:42,220 --> 00:13:43,930
p I in middle who wants to have say a

332
00:13:43,930 --> 00:13:47,620
level K public key so what do we do well

333
00:13:47,620 --> 00:13:49,900
it's simple and apart all its neighbors

334
00:13:49,900 --> 00:13:52,089
actually compute the level K minus 1

335
00:13:52,089 --> 00:13:54,730
public key okay publicly which is shared

336
00:13:54,730 --> 00:13:57,240
among their k minus 1 neighborhood and

337
00:13:57,240 --> 00:14:01,450
send it to the p I and P and I can just

338
00:14:01,450 --> 00:14:05,050
add them up and then you have a level K

339
00:14:05,050 --> 00:14:07,870
public key okay why is this topology

340
00:14:07,870 --> 00:14:10,240
hiding well turns out you cannot do it

341
00:14:10,240 --> 00:14:12,820
for one party directly you have to do it

342
00:14:12,820 --> 00:14:14,920
in parallel for all parties okay

343
00:14:14,920 --> 00:14:16,900
otherwise the message pattern will get

344
00:14:16,900 --> 00:14:21,400
you so here's the protocol idea so in

345
00:14:21,400 --> 00:14:23,110
the first round okay you do a level 0

346
00:14:23,110 --> 00:14:25,360
kiez level 0 kiez that's just yourself

347
00:14:25,360 --> 00:14:27,279
you use this local key generation

348
00:14:27,279 --> 00:14:29,380
compute the public key and the secret

349
00:14:29,380 --> 00:14:32,020
key which is now your key share how can

350
00:14:32,020 --> 00:14:34,209
how do you get the level one key well

351
00:14:34,209 --> 00:14:37,660
simple send your level 0 key to all your

352
00:14:37,660 --> 00:14:40,690
neighbors okay and now you receive the

353
00:14:40,690 --> 00:14:43,690
bunch of level 0 kiez you just add them

354
00:14:43,690 --> 00:14:46,390
up and now we have a level one key okay

355
00:14:46,390 --> 00:14:49,029
so a key where the secret keys or is

356
00:14:49,029 --> 00:14:51,310
shared among your immediate neighborhood

357
00:14:51,310 --> 00:14:53,470
and now you can continue this scheme as

358
00:14:53,470 --> 00:14:56,529
i said before here for level k you just

359
00:14:56,529 --> 00:14:58,930
need k minus 1 keys and if you do this

360
00:14:58,930 --> 00:15:01,230
long enough like diameter many rounds

361
00:15:01,230 --> 00:15:04,060
eventually every party holds a public

362
00:15:04,060 --> 00:15:05,500
key which is shared among all the other

363
00:15:05,500 --> 00:15:07,870
parties okay so all we need to know here

364
00:15:07,870 --> 00:15:09,490
is let's say an upper bound on the

365
00:15:09,490 --> 00:15:13,959
diameter of the growth okay and that's

366
00:15:13,959 --> 00:15:15,850
how you actually compute the setup now

367
00:15:15,850 --> 00:15:18,700
here the next step was this or

368
00:15:18,700 --> 00:15:20,500
computation okay so in the flooding

369
00:15:20,500 --> 00:15:22,300
protocol we had the or computation

370
00:15:22,300 --> 00:15:24,040
during this flooding in each round you

371
00:15:24,040 --> 00:15:26,110
computed the nor however it's actually

372
00:15:26,110 --> 00:15:30,160
enough if you compute this or write once

373
00:15:30,160 --> 00:15:32,380
okay so the idea is each party has its

374
00:15:32,380 --> 00:15:34,720
own compost public key okay and it has

375
00:15:34,720 --> 00:15:36,819
an input bit the idea is the centering

376
00:15:36,819 --> 00:15:38,709
his real message with all the other

377
00:15:38,709 --> 00:15:41,829
party's input zero and so the ideal

378
00:15:41,829 --> 00:15:44,919
output would but kind of VD or which is

379
00:15:44,919 --> 00:15:46,689
encrypted of course under your own

380
00:15:46,689 --> 00:15:49,899
public key and the idea would be yeah if

381
00:15:49,899 --> 00:15:52,329
it's zero if all bits of zero otherwise

382
00:15:52,329 --> 00:15:54,429
it's one okay but you cannot have that

383
00:15:54,429 --> 00:15:57,189
okay the issue is here ciphertext

384
00:15:57,189 --> 00:15:59,559
homomorphic with respect to addition so

385
00:15:59,559 --> 00:16:03,579
you cannot directly get this so here we

386
00:16:03,579 --> 00:16:06,729
use a trick we encode the or okay so

387
00:16:06,729 --> 00:16:09,220
instead of saying 01 what we do is we

388
00:16:09,220 --> 00:16:12,100
just say okay if all bits are 0 we have

389
00:16:12,100 --> 00:16:13,929
0 and otherwise it's just the random

390
00:16:13,929 --> 00:16:17,049
value inside the encryption and that you

391
00:16:17,049 --> 00:16:19,119
can get actually again in a recursive

392
00:16:19,119 --> 00:16:22,059
manner using this neighborhood trick

393
00:16:22,059 --> 00:16:25,149
what you do is you actually compute sums

394
00:16:25,149 --> 00:16:27,669
waiting sums of the bits where the

395
00:16:27,669 --> 00:16:29,859
weights are random okay so if your bits

396
00:16:29,859 --> 00:16:31,660
are all 0 independent of the wake the

397
00:16:31,660 --> 00:16:34,299
whole sum is 0 otherwise if you have at

398
00:16:34,299 --> 00:16:36,819
least one bit which is nonzero you have

399
00:16:36,819 --> 00:16:39,549
a uniform random value in here so okay

400
00:16:39,549 --> 00:16:43,779
and hopefully with the debate is non

401
00:16:43,779 --> 00:16:45,819
zero okay so you have a slight error

402
00:16:45,819 --> 00:16:48,459
probability in here but if you have a

403
00:16:48,459 --> 00:16:52,059
large enough field that's fine okay so

404
00:16:52,059 --> 00:16:54,519
this way you can now actually compute a

405
00:16:54,519 --> 00:16:56,499
cipher text for each party which

406
00:16:56,499 --> 00:16:58,600
contains your ok you do this again in

407
00:16:58,600 --> 00:17:01,569
parallel for all parties to hide the

408
00:17:01,569 --> 00:17:04,449
message pattern now all remains is

409
00:17:04,449 --> 00:17:07,059
decryption and the idea of decryption is

410
00:17:07,059 --> 00:17:08,859
as follows the input is now this cipher

411
00:17:08,859 --> 00:17:11,709
text containing your encoded or and all

412
00:17:11,709 --> 00:17:13,898
the parties now have key shares okay for

413
00:17:13,898 --> 00:17:16,779
my public key and so what we do is we

414
00:17:16,779 --> 00:17:18,759
want to decrypt this and we can do this

415
00:17:18,759 --> 00:17:20,829
similar to this or computation so the

416
00:17:20,829 --> 00:17:24,099
idea is I send out my ciphertext okay

417
00:17:24,099 --> 00:17:27,039
which I want to do have decrypted you

418
00:17:27,039 --> 00:17:29,769
when I send out this ciphertext actually

419
00:17:29,769 --> 00:17:31,149
you have to be careful you cannot just

420
00:17:31,149 --> 00:17:32,649
send it out you have to blind it

421
00:17:32,649 --> 00:17:34,419
otherwise you leaked information and

422
00:17:34,419 --> 00:17:37,450
what I get back or those decryption

423
00:17:37,450 --> 00:17:39,309
shares which we can help more physically

424
00:17:39,309 --> 00:17:41,230
add up so essentially ciphertext goes

425
00:17:41,230 --> 00:17:43,840
out and decryption shares coming which

426
00:17:43,840 --> 00:17:46,950
allows me then to decrypt the ciphertext

427
00:17:46,950 --> 00:17:49,659
so in summary the protocol works as

428
00:17:49,659 --> 00:17:50,559
follows first

429
00:17:50,559 --> 00:17:53,169
generate is set up so in at the end of

430
00:17:53,169 --> 00:17:54,700
the set up every part it has its

431
00:17:54,700 --> 00:17:57,999
composed public key then we compute the

432
00:17:57,999 --> 00:18:01,690
or okay the idea is that this or a

433
00:18:01,690 --> 00:18:04,240
contains the actual bit of the sender if

434
00:18:04,240 --> 00:18:06,460
everyone else input zero we are in the

435
00:18:06,460 --> 00:18:09,399
semi on a setting that's fine and then

436
00:18:09,399 --> 00:18:11,980
we decrypt okay so this way you can

437
00:18:11,980 --> 00:18:14,169
actually achieve binary broadcast just

438
00:18:14,169 --> 00:18:19,659
using threshold encryption yeah that's

439
00:18:19,659 --> 00:18:23,490
it questions

