1
00:00:04,460 --> 00:00:07,319
so I I'm Noah Steven Sevilla whatz or no

2
00:00:07,319 --> 00:00:09,780
SD I'll be talking to you today about

3
00:00:09,780 --> 00:00:11,070
message transmission with reverse

4
00:00:11,070 --> 00:00:14,429
firewalls um aka how to do a secure

5
00:00:14,429 --> 00:00:19,170
computation on a corrupted machine this

6
00:00:19,170 --> 00:00:21,230
is joint work with yoga need Otis and

7
00:00:21,230 --> 00:00:24,600
Ilya mironov um so the question that we

8
00:00:24,600 --> 00:00:27,030
start with today is should Alice trust

9
00:00:27,030 --> 00:00:29,550
your computer right so here's Alice is

10
00:00:29,550 --> 00:00:31,320
trustworthy computer and you know he

11
00:00:31,320 --> 00:00:33,149
seems like a nice guy and all but one

12
00:00:33,149 --> 00:00:37,019
can never be too careful and um so the

13
00:00:37,019 --> 00:00:38,820
basic problem that we're concerned about

14
00:00:38,820 --> 00:00:40,379
is something like this right we don't

15
00:00:40,379 --> 00:00:41,940
want the last person to have touched our

16
00:00:41,940 --> 00:00:44,399
computer to be the person to be able to

17
00:00:44,399 --> 00:00:45,449
completely compromised our security

18
00:00:45,449 --> 00:00:48,440
certainly not our national security and

19
00:00:48,440 --> 00:00:50,699
this is not just a theoretical issue

20
00:00:50,699 --> 00:00:53,519
right so we now know that cryptographic

21
00:00:53,519 --> 00:00:55,589
software is broken in all sorts of ways

22
00:00:55,589 --> 00:00:57,449
perhaps the most common way is simply

23
00:00:57,449 --> 00:00:59,309
that there are bugs everywhere so they

24
00:00:59,309 --> 00:01:00,600
are apparently accidental bugs all over

25
00:01:00,600 --> 00:01:03,210
cryptographic software i'll simply flash

26
00:01:03,210 --> 00:01:04,709
the logos of all these things you guys

27
00:01:04,709 --> 00:01:06,810
seen before heartbleed in the poodle bug

28
00:01:06,810 --> 00:01:09,990
and apples go to fail etc i guess those

29
00:01:09,990 --> 00:01:13,110
of you who saw on the talk last night no

30
00:01:13,110 --> 00:01:15,469
this is honest but flaky implementations

31
00:01:15,469 --> 00:01:19,979
so this is one way in which crypto gets

32
00:01:19,979 --> 00:01:23,159
broken another way is that there's

33
00:01:23,159 --> 00:01:24,539
actually a deliberate corruption of

34
00:01:24,539 --> 00:01:26,219
hardware and software so I think most of

35
00:01:26,219 --> 00:01:27,630
you have seen this picture by now this

36
00:01:27,630 --> 00:01:30,079
is US government agents actually

37
00:01:30,079 --> 00:01:33,119
intercepting hardware on its way to a

38
00:01:33,119 --> 00:01:36,359
customer in order to tamper with it to

39
00:01:36,359 --> 00:01:41,430
compromise their security so perhaps

40
00:01:41,430 --> 00:01:43,200
we'd like to think the crypto in the

41
00:01:43,200 --> 00:01:44,729
real world goes goes something like this

42
00:01:44,729 --> 00:01:47,939
we have Alice we have Bob they interact

43
00:01:47,939 --> 00:01:51,270
in some way and some adversary whose

44
00:01:51,270 --> 00:01:53,039
present and wants to do them harm is

45
00:01:53,039 --> 00:01:55,679
completely unable to so he loses some

46
00:01:55,679 --> 00:01:57,179
security games I'm indistinguishability

47
00:01:57,179 --> 00:01:59,640
game or whatever but perhaps crypto in

48
00:01:59,640 --> 00:02:00,960
the real world actually looks more like

49
00:02:00,960 --> 00:02:03,210
this alice's computer replaces alice

50
00:02:03,210 --> 00:02:05,070
because Alice can't compute by linear

51
00:02:05,070 --> 00:02:08,070
maps in her head and this computer has

52
00:02:08,070 --> 00:02:10,410
been corrupted in some way and instead

53
00:02:10,410 --> 00:02:11,970
of sending the proper first message

54
00:02:11,970 --> 00:02:13,590
Alice's first message is simply her

55
00:02:13,590 --> 00:02:15,420
password and her second message is

56
00:02:15,420 --> 00:02:16,800
simply her credit card number

57
00:02:16,800 --> 00:02:18,960
and then maybe Bob will be a little

58
00:02:18,960 --> 00:02:21,000
confused but our adversary will

59
00:02:21,000 --> 00:02:23,310
certainly end up happy right so this is

60
00:02:23,310 --> 00:02:26,100
a rather terrifying prospect I think and

61
00:02:26,100 --> 00:02:29,310
of course one can argue that this is

62
00:02:29,310 --> 00:02:31,410
obviously detectable but one can do more

63
00:02:31,410 --> 00:02:33,120
sophisticated things right the adversary

64
00:02:33,120 --> 00:02:35,910
could use cryptography himself he could

65
00:02:35,910 --> 00:02:37,410
he could encrypt messages under his own

66
00:02:37,410 --> 00:02:39,600
key um so that we don't see what he's

67
00:02:39,600 --> 00:02:41,400
sending or he could use steganography so

68
00:02:41,400 --> 00:02:42,840
we can't even tell that anything's gone

69
00:02:42,840 --> 00:02:46,020
wrong um so this leads to a rather

70
00:02:46,020 --> 00:02:47,640
terrifying and seemingly observed

71
00:02:47,640 --> 00:02:50,310
question which is can we do crypto when

72
00:02:50,310 --> 00:02:54,120
our machine has been compromised and

73
00:02:54,120 --> 00:02:55,620
actually we're not the first to ask this

74
00:02:55,620 --> 00:02:57,180
question of course thurs there's lots of

75
00:02:57,180 --> 00:02:59,280
prior work unfortunately because I'm

76
00:02:59,280 --> 00:03:00,900
rather pressed for time I won't be able

77
00:03:00,900 --> 00:03:03,600
to do it its proper justice but

78
00:03:03,600 --> 00:03:06,900
essentially back in the 80s people start

79
00:03:06,900 --> 00:03:09,990
studying this it went through the 90s it

80
00:03:09,990 --> 00:03:11,280
was really started by Simmons with

81
00:03:11,280 --> 00:03:14,520
subliminal channels and the work really

82
00:03:14,520 --> 00:03:16,410
died out until the Snowden revelations

83
00:03:16,410 --> 00:03:19,530
in which it was resurrected some of the

84
00:03:19,530 --> 00:03:21,150
first work was viable area Patterson in

85
00:03:21,150 --> 00:03:23,370
raga way they call this stuff algorithm

86
00:03:23,370 --> 00:03:24,930
substitution attacks and they studied

87
00:03:24,930 --> 00:03:28,260
symmetric key encryption and I'll

88
00:03:28,260 --> 00:03:31,140
discuss that briefly so in particular

89
00:03:31,140 --> 00:03:33,120
Laurie Patterson arago a suggested using

90
00:03:33,120 --> 00:03:34,650
deterministic symmetric key encryption

91
00:03:34,650 --> 00:03:36,270
right so if you have Steve full

92
00:03:36,270 --> 00:03:37,980
symmetric encryption you can actually do

93
00:03:37,980 --> 00:03:39,450
it to terminus tickly you can have a

94
00:03:39,450 --> 00:03:41,190
unique valid cipher text for each plain

95
00:03:41,190 --> 00:03:43,590
text oh and this is nice because it

96
00:03:43,590 --> 00:03:45,780
prevents dekha na graffiti I Fiat right

97
00:03:45,780 --> 00:03:47,160
if you're going to if you're going to

98
00:03:47,160 --> 00:03:48,930
send the correct message as long as we

99
00:03:48,930 --> 00:03:51,480
enforce correctness there's no choices

100
00:03:51,480 --> 00:03:53,040
that can be made you can't substitute

101
00:03:53,040 --> 00:03:56,150
the algorithm with anything so this is

102
00:03:56,150 --> 00:03:58,530
this is nice and it actually forms the

103
00:03:58,530 --> 00:04:03,330
basis for much of our work but at least

104
00:04:03,330 --> 00:04:05,130
from my perspective the primary result

105
00:04:05,130 --> 00:04:07,080
of this paper was was a negative result

106
00:04:07,080 --> 00:04:09,750
showing that actually impossible to

107
00:04:09,750 --> 00:04:11,670
prevent steganography on any encryption

108
00:04:11,670 --> 00:04:13,650
that non trivial uses randomness right

109
00:04:13,650 --> 00:04:14,760
so if we're going to use randomness in

110
00:04:14,760 --> 00:04:15,930
any way the adverse are you can just

111
00:04:15,930 --> 00:04:18,238
tamper with the randomness and use this

112
00:04:18,238 --> 00:04:23,310
to to transmit information and in

113
00:04:23,310 --> 00:04:25,080
particular this means that semantically

114
00:04:25,080 --> 00:04:27,390
secure public key encryption is

115
00:04:27,390 --> 00:04:28,860
impossible on a corrupted machine

116
00:04:28,860 --> 00:04:30,420
adversary can mess with the random

117
00:04:30,420 --> 00:04:34,140
steganography is always possible so this

118
00:04:34,140 --> 00:04:35,850
is rather disappointing if we can't do

119
00:04:35,850 --> 00:04:36,870
semantically sphere public key

120
00:04:36,870 --> 00:04:38,490
encryption there's a lot that we can't

121
00:04:38,490 --> 00:04:43,710
do so in Europe of 2015 with Ilya

122
00:04:43,710 --> 00:04:45,840
mironov we introduced a new model called

123
00:04:45,840 --> 00:04:48,420
reverse firewalls to avoid impossibility

124
00:04:48,420 --> 00:04:50,550
results like this I mean the idea of

125
00:04:50,550 --> 00:04:52,410
rivers firewall has to add a third party

126
00:04:52,410 --> 00:04:54,480
into the game so the firewall is

127
00:04:54,480 --> 00:04:55,710
something that sits between alice's

128
00:04:55,710 --> 00:04:57,570
computer in the outside world so here's

129
00:04:57,570 --> 00:04:59,250
Alice computer here's the outside world

130
00:04:59,250 --> 00:05:01,230
represented by Bob firewall sits in the

131
00:05:01,230 --> 00:05:03,600
middle and what the firewall does is it

132
00:05:03,600 --> 00:05:05,640
modifies the messages that Alice sends

133
00:05:05,640 --> 00:05:08,190
and receives so Allison's m1 the

134
00:05:08,190 --> 00:05:10,530
firewall modifies it in some way and

135
00:05:10,530 --> 00:05:13,050
forwards it along to Bob Bob send some

136
00:05:13,050 --> 00:05:14,670
message having to back firewall modifies

137
00:05:14,670 --> 00:05:16,770
in some way and sends that along to

138
00:05:16,770 --> 00:05:20,700
Alice etc and we have some requirements

139
00:05:20,700 --> 00:05:21,690
in the firewall like it should be

140
00:05:21,690 --> 00:05:23,880
transparent to legitimate traffic so

141
00:05:23,880 --> 00:05:25,680
Allison Bob should neither know nor care

142
00:05:25,680 --> 00:05:28,230
the firewall is present in particular

143
00:05:28,230 --> 00:05:30,540
you'll notice that every message sent by

144
00:05:30,540 --> 00:05:31,980
Alice corresponds to one message

145
00:05:31,980 --> 00:05:34,200
received by Bob and vice versa so we

146
00:05:34,200 --> 00:05:35,670
don't have like 20 messages going back

147
00:05:35,670 --> 00:05:37,230
and forth between Alice and the firewall

148
00:05:37,230 --> 00:05:39,360
between before every message sent to Bob

149
00:05:39,360 --> 00:05:41,220
so we really want this to be stringent

150
00:05:41,220 --> 00:05:43,500
as possible and of course the firewall

151
00:05:43,500 --> 00:05:44,670
should not break the functionality

152
00:05:44,670 --> 00:05:46,050
you've done der Leyen protocol if in the

153
00:05:46,050 --> 00:05:47,430
end Alice and Bob are supposed to agree

154
00:05:47,430 --> 00:05:49,050
to a key or something they should still

155
00:05:49,050 --> 00:05:52,230
agree to a key and the firewall should

156
00:05:52,230 --> 00:05:54,540
Sara chair no secrets with Alice so I'm

157
00:05:54,540 --> 00:05:56,910
not just sort of moving the security to

158
00:05:56,910 --> 00:05:58,770
a new party I'm not I'm not creating a

159
00:05:58,770 --> 00:06:00,810
new trusted party I'm actually adding

160
00:06:00,810 --> 00:06:03,630
more security on and I'll just sort of

161
00:06:03,630 --> 00:06:05,070
put this in bold and kind of in scare

162
00:06:05,070 --> 00:06:06,870
quotes for now we don't trust the

163
00:06:06,870 --> 00:06:08,700
firewall I'll make that more explicit

164
00:06:08,700 --> 00:06:10,260
but I hope you keep that in mind and a

165
00:06:10,260 --> 00:06:14,010
few slides I'll make it concrete and

166
00:06:14,010 --> 00:06:15,630
finally of course we want the firewall

167
00:06:15,630 --> 00:06:17,490
to benefit us in some way and the way

168
00:06:17,490 --> 00:06:18,900
that the firewall benefit sauce is that

169
00:06:18,900 --> 00:06:20,640
it gives us some meaningful security

170
00:06:20,640 --> 00:06:23,550
notions when Alice has been corrupted

171
00:06:23,550 --> 00:06:25,110
right so the fire will improve security

172
00:06:25,110 --> 00:06:27,780
in the case when Alex's machine has been

173
00:06:27,780 --> 00:06:31,230
compromised in some way so let's make

174
00:06:31,230 --> 00:06:32,850
this formal we can define the

175
00:06:32,850 --> 00:06:34,650
functionality of reverse firewall it's

176
00:06:34,650 --> 00:06:36,690
actually quite simple so we have some

177
00:06:36,690 --> 00:06:38,460
underlying classical protocol so I

178
00:06:38,460 --> 00:06:39,900
always require that an underlying

179
00:06:39,900 --> 00:06:41,250
classical protocol exists that there

180
00:06:41,250 --> 00:06:43,740
exists a protocol out the firewall there

181
00:06:43,740 --> 00:06:45,599
and this should satisfy some some

182
00:06:45,599 --> 00:06:48,240
functionality notions say Alice and Bob

183
00:06:48,240 --> 00:06:50,400
output Y a and YB maybe their keys and

184
00:06:50,400 --> 00:06:53,910
they should match and the protocol with

185
00:06:53,910 --> 00:06:55,500
the firewall should simply satisfy the

186
00:06:55,500 --> 00:06:57,120
same security notion so extremely

187
00:06:57,120 --> 00:06:59,610
straightforward so we have our new

188
00:06:59,610 --> 00:07:01,349
protocol with the firewall Alice and Bob

189
00:07:01,349 --> 00:07:03,210
still output Y and YB and they should

190
00:07:03,210 --> 00:07:04,530
still match the firewall shouldn't screw

191
00:07:04,530 --> 00:07:07,229
that up security is defined in the same

192
00:07:07,229 --> 00:07:08,819
way it's slightly more subtle but the

193
00:07:08,819 --> 00:07:10,590
idea is the same so we have an

194
00:07:10,590 --> 00:07:12,630
underlying protocol that satisfies some

195
00:07:12,630 --> 00:07:14,280
security notion represented by some

196
00:07:14,280 --> 00:07:16,229
crazy game and which may be Bob's evil

197
00:07:16,229 --> 00:07:18,960
and the adversaries Oracle access to to

198
00:07:18,960 --> 00:07:20,909
Alice and somehow still the adversary is

199
00:07:20,909 --> 00:07:24,449
forded and we want our protocol with the

200
00:07:24,449 --> 00:07:26,099
firewall to satisfy the same security

201
00:07:26,099 --> 00:07:27,569
notion so you plug in your favorite

202
00:07:27,569 --> 00:07:29,190
security notion here we want the

203
00:07:29,190 --> 00:07:30,900
protocol with the firewall to satisfy

204
00:07:30,900 --> 00:07:33,659
the same notion now regardless of how

205
00:07:33,659 --> 00:07:35,430
Alice's machine behaves as long as the

206
00:07:35,430 --> 00:07:37,740
corruption is efficient so to be clear

207
00:07:37,740 --> 00:07:39,990
we view the exact same security game

208
00:07:39,990 --> 00:07:42,810
that we had before except now we view

209
00:07:42,810 --> 00:07:45,060
Alice or Alice's Club corrupted

210
00:07:45,060 --> 00:07:47,520
implementation and the firewall as one

211
00:07:47,520 --> 00:07:49,259
single joint party so we could think of

212
00:07:49,259 --> 00:07:50,639
the messages that they send between each

213
00:07:50,639 --> 00:07:52,500
other as being sort of the internal wire

214
00:07:52,500 --> 00:07:55,469
is one giant composed party and we want

215
00:07:55,469 --> 00:07:57,599
to guarantee security of this new

216
00:07:57,599 --> 00:07:59,940
protocol that we get by substituting in

217
00:07:59,940 --> 00:08:02,849
Alice substituting in for Alice this

218
00:08:02,849 --> 00:08:05,370
joint party which is one corrupted party

219
00:08:05,370 --> 00:08:09,000
and one honest firewall um so that's our

220
00:08:09,000 --> 00:08:10,560
security notion that's what we gain from

221
00:08:10,560 --> 00:08:14,159
a firewall and I want to point out I

222
00:08:14,159 --> 00:08:16,110
think I've emphasizes a bit already that

223
00:08:16,110 --> 00:08:18,240
the protocol should be functional and

224
00:08:18,240 --> 00:08:20,849
secure even without the firewall present

225
00:08:20,849 --> 00:08:22,259
so we want there to be an underlying

226
00:08:22,259 --> 00:08:24,199
protocol we want that to have functional

227
00:08:24,199 --> 00:08:26,430
have functionality guarantees and we

228
00:08:26,430 --> 00:08:27,840
want that to have security guarantees

229
00:08:27,840 --> 00:08:29,219
and it's an important design decision

230
00:08:29,219 --> 00:08:32,429
that we made so let's go back to our

231
00:08:32,429 --> 00:08:34,679
example from before if you remember in

232
00:08:34,679 --> 00:08:36,328
the algorithm substitution tech model

233
00:08:36,328 --> 00:08:37,440
semantically secure public key

234
00:08:37,440 --> 00:08:38,880
encryption is simply impossible because

235
00:08:38,880 --> 00:08:40,559
it requires randomness but with a

236
00:08:40,559 --> 00:08:42,179
firewall to actually rather trivial

237
00:08:42,179 --> 00:08:44,099
we're going to do is we're going to take

238
00:08:44,099 --> 00:08:45,480
some random eyes of a public key

239
00:08:45,480 --> 00:08:47,070
encryption scheme I think as soon as I

240
00:08:47,070 --> 00:08:48,779
say that the protocol is immediately

241
00:08:48,779 --> 00:08:51,270
obvious so we have three algorithms and

242
00:08:51,270 --> 00:08:53,279
crypt decrypt and randomize encrypt and

243
00:08:53,279 --> 00:08:55,500
decrypt behave as you expect they do

244
00:08:55,500 --> 00:08:56,730
what they say on the tin

245
00:08:56,730 --> 00:08:59,040
we randomized has a correct mr. pryor

246
00:08:59,040 --> 00:09:00,660
man so if I tree randomized a valid

247
00:09:00,660 --> 00:09:02,339
encryption it should decrypt to the

248
00:09:02,339 --> 00:09:05,639
correct plaintext and if I it has a

249
00:09:05,639 --> 00:09:07,050
security requirement as well which is

250
00:09:07,050 --> 00:09:08,730
that if I reran demise any ciphertext

251
00:09:08,730 --> 00:09:10,320
whatsoever doesn't matter how it was

252
00:09:10,320 --> 00:09:11,850
formed it should be indistinguishable

253
00:09:11,850 --> 00:09:15,570
from a pressure encryption of zero so

254
00:09:15,570 --> 00:09:17,220
given these these notions it's quite

255
00:09:17,220 --> 00:09:18,899
easy to construct a semantically secure

256
00:09:18,899 --> 00:09:20,430
public key encryption scheme with the

257
00:09:20,430 --> 00:09:23,040
firewall so the underlying protocol is

258
00:09:23,040 --> 00:09:25,050
completely trivial alice is simply going

259
00:09:25,050 --> 00:09:27,420
to send her plaintext encrypted under

260
00:09:27,420 --> 00:09:30,269
Bob's public key and the firewall is

261
00:09:30,269 --> 00:09:31,889
also trivial it's simply going to

262
00:09:31,889 --> 00:09:33,389
receive whatever horrible corrupted

263
00:09:33,389 --> 00:09:35,220
ciphertext Alice's corrupt

264
00:09:35,220 --> 00:09:37,079
implementation decides to send and it's

265
00:09:37,079 --> 00:09:39,449
going to be randomized soon so let's

266
00:09:39,449 --> 00:09:40,410
make sure we're all on the same page

267
00:09:40,410 --> 00:09:43,110
let's just see that this simple protocol

268
00:09:43,110 --> 00:09:45,269
actually does satisfy our definitions so

269
00:09:45,269 --> 00:09:47,010
we can ask does it satisfy functionality

270
00:09:47,010 --> 00:09:47,990
remember there are two requirements

271
00:09:47,990 --> 00:09:49,769
functionality first that the underlying

272
00:09:49,769 --> 00:09:51,870
protocol is functional so is this

273
00:09:51,870 --> 00:09:53,250
underlying protocol functional without

274
00:09:53,250 --> 00:09:55,050
the firewall the answer is of course yes

275
00:09:55,050 --> 00:09:56,459
as long as the encryption scheme is

276
00:09:56,459 --> 00:09:59,010
correct next we can ask if the protocol

277
00:09:59,010 --> 00:10:00,870
is functional with the firewall again

278
00:10:00,870 --> 00:10:02,370
the answer is yes as long as the rear

279
00:10:02,370 --> 00:10:05,610
itemization is correct now for security

280
00:10:05,610 --> 00:10:08,089
we can ask is the protocol secure

281
00:10:08,089 --> 00:10:11,130
without the firewall and here we're

282
00:10:11,130 --> 00:10:12,569
guaranteed security as long as the

283
00:10:12,569 --> 00:10:14,370
underlying encryption scheme is

284
00:10:14,370 --> 00:10:16,769
semantically secure similarly we can ask

285
00:10:16,769 --> 00:10:18,149
if the protocol is semantically secure

286
00:10:18,149 --> 00:10:20,130
with the firewall regardless of how

287
00:10:20,130 --> 00:10:21,990
alice's computer behaves and here we

288
00:10:21,990 --> 00:10:23,190
rely on the security of your

289
00:10:23,190 --> 00:10:24,810
randomization right so we said that our

290
00:10:24,810 --> 00:10:28,860
reorganization allows makes a vertex

291
00:10:28,860 --> 00:10:30,930
indistinguishable from zero an

292
00:10:30,930 --> 00:10:32,880
encryption of zero after we randomize it

293
00:10:32,880 --> 00:10:35,220
no matter what the initial ciphertext

294
00:10:35,220 --> 00:10:36,630
was even if the adversary knew it in

295
00:10:36,630 --> 00:10:39,600
advance right so here we have semantic

296
00:10:39,600 --> 00:10:42,029
security regardless of how alice's

297
00:10:42,029 --> 00:10:43,350
computer behaves this is a very simple

298
00:10:43,350 --> 00:10:45,720
example it makes the definitions clear I

299
00:10:45,720 --> 00:10:47,760
hope and it also shows that things are

300
00:10:47,760 --> 00:10:49,019
possible in this model that were not

301
00:10:49,019 --> 00:10:51,540
possible outside of this model so now

302
00:10:51,540 --> 00:10:54,540
I'm going to address a very very common

303
00:10:54,540 --> 00:10:56,310
complaint that people have which is what

304
00:10:56,310 --> 00:10:57,779
what if the firewall self is just

305
00:10:57,779 --> 00:10:59,069
corrupt like haven't we just passed the

306
00:10:59,069 --> 00:11:02,279
buck are we just adding a trusted third

307
00:11:02,279 --> 00:11:04,800
party and the answer is no so the most

308
00:11:04,800 --> 00:11:07,079
natural question to ask i think is what

309
00:11:07,079 --> 00:11:08,790
if alice is honest and the firewall is

310
00:11:08,790 --> 00:11:09,510
corrupt

311
00:11:09,510 --> 00:11:12,570
and in this case so here we have a

312
00:11:12,570 --> 00:11:14,340
corrupt firewall with his evil eyes of

313
00:11:14,340 --> 00:11:16,830
his horns and in this case we can really

314
00:11:16,830 --> 00:11:19,410
just view the corrupt firewall as part

315
00:11:19,410 --> 00:11:23,490
of a larger active adversary looking

316
00:11:23,490 --> 00:11:25,650
sharp join in with Bob or joining with

317
00:11:25,650 --> 00:11:27,990
whatever adversary you're ready had in

318
00:11:27,990 --> 00:11:31,680
your original security game so as long

319
00:11:31,680 --> 00:11:34,290
as our underlying protocol was secure

320
00:11:34,290 --> 00:11:37,110
against active adversaries adding a

321
00:11:37,110 --> 00:11:38,580
corrupted firewall doesn't change

322
00:11:38,580 --> 00:11:40,080
anything in the security game it's just

323
00:11:40,080 --> 00:11:42,690
like the adversary now has more wires

324
00:11:42,690 --> 00:11:44,580
going into it doesn't change anything um

325
00:11:44,580 --> 00:11:47,130
so this is why we require them to be an

326
00:11:47,130 --> 00:11:49,320
underlying secure protocol as long as

327
00:11:49,320 --> 00:11:50,700
it's secure gets active adversaries we

328
00:11:50,700 --> 00:11:51,780
don't have to worry about corrupted

329
00:11:51,780 --> 00:11:55,440
firewalls now another kid situation

330
00:11:55,440 --> 00:11:57,480
consider of courses if alice is corrupt

331
00:11:57,480 --> 00:11:59,730
in the firewall is honest and in this

332
00:11:59,730 --> 00:12:01,560
case this is what the firewall buys us

333
00:12:01,560 --> 00:12:03,390
right this is why we like firewalls it's

334
00:12:03,390 --> 00:12:05,550
because the firewall the security of the

335
00:12:05,550 --> 00:12:07,170
firewall himself guarantees that we

336
00:12:07,170 --> 00:12:08,850
still have a meaningful security notion

337
00:12:08,850 --> 00:12:12,000
even in this world and finally we can

338
00:12:12,000 --> 00:12:13,380
ask the question what if Alice and the

339
00:12:13,380 --> 00:12:15,090
firewall are both corrupt and here I

340
00:12:15,090 --> 00:12:16,620
make no promises right so if the entire

341
00:12:16,620 --> 00:12:19,050
world is corrupt I can't do anything but

342
00:12:19,050 --> 00:12:20,490
the purpose of this slide is to show you

343
00:12:20,490 --> 00:12:22,770
that the firewall helps us it doesn't

344
00:12:22,770 --> 00:12:25,410
hurt us right so in the first case we

345
00:12:25,410 --> 00:12:26,700
have security with or without the

346
00:12:26,700 --> 00:12:28,710
firewall in the second case we could not

347
00:12:28,710 --> 00:12:30,180
possibly have security without the

348
00:12:30,180 --> 00:12:32,040
firewall but with the firewall we obtain

349
00:12:32,040 --> 00:12:33,870
meaningful security guarantees and the

350
00:12:33,870 --> 00:12:35,910
third case we lose no matter what so the

351
00:12:35,910 --> 00:12:37,260
fire will helps us it doesn't hurt us

352
00:12:37,260 --> 00:12:38,910
it's not an it's not trusted third-party

353
00:12:38,910 --> 00:12:42,330
it's simply a useful third-party so this

354
00:12:42,330 --> 00:12:44,010
is kind of a crazy model what can we do

355
00:12:44,010 --> 00:12:49,650
in it and in our original paper we show

356
00:12:49,650 --> 00:12:51,510
that actually quite strong things so

357
00:12:51,510 --> 00:12:53,310
bluebies transfer and secure function

358
00:12:53,310 --> 00:12:54,870
evaluation are possible with reverse

359
00:12:54,870 --> 00:12:56,400
firewalls I think this is rather

360
00:12:56,400 --> 00:12:58,470
surprising because secure function

361
00:12:58,470 --> 00:13:00,150
evaluations some sense to party crypto

362
00:13:00,150 --> 00:13:01,710
complete so you can have sort of any

363
00:13:01,710 --> 00:13:03,920
functionality you want to party crypto

364
00:13:03,920 --> 00:13:06,840
with the reverse firewall admittedly

365
00:13:06,840 --> 00:13:09,750
very inefficiently in follow-up work

366
00:13:09,750 --> 00:13:11,940
ateneo same Audrey inventory showed that

367
00:13:11,940 --> 00:13:14,220
you can do signature so you can have

368
00:13:14,220 --> 00:13:15,570
attenti cated messages with reverse

369
00:13:15,570 --> 00:13:18,060
firewalls and in this work we handle

370
00:13:18,060 --> 00:13:19,650
probably the most natural primitive in

371
00:13:19,650 --> 00:13:21,060
cryptography which is secure message

372
00:13:21,060 --> 00:13:21,769
transmission

373
00:13:21,769 --> 00:13:23,420
of course message transmission has been

374
00:13:23,420 --> 00:13:24,350
studied in a variety of different

375
00:13:24,350 --> 00:13:25,670
contexts and photography it's very

376
00:13:25,670 --> 00:13:27,649
fundamental and we study in a variety of

377
00:13:27,649 --> 00:13:30,019
contexts to probably the most important

378
00:13:30,019 --> 00:13:31,249
thing that we do is we show that there's

379
00:13:31,249 --> 00:13:33,980
an efficient CCA secure scheme on it

380
00:13:33,980 --> 00:13:35,269
won't we have time I won't have time to

381
00:13:35,269 --> 00:13:37,220
get into that completely but I'll give

382
00:13:37,220 --> 00:13:40,549
you a rough feel for it i hope so now

383
00:13:40,549 --> 00:13:42,019
let's talk about message transmission

384
00:13:42,019 --> 00:13:44,239
protocols so a message transmission

385
00:13:44,239 --> 00:13:45,799
protocol is a protocol between Alice

386
00:13:45,799 --> 00:13:48,379
involve Alice's input is a message then

387
00:13:48,379 --> 00:13:50,149
they engage in some crazy protocol and

388
00:13:50,149 --> 00:13:52,249
in the end Bob outputs the same plain

389
00:13:52,249 --> 00:13:54,290
text message so this is the correctness

390
00:13:54,290 --> 00:13:57,290
has some security notions see PA

391
00:13:57,290 --> 00:13:59,269
security says intuitively that an

392
00:13:59,269 --> 00:14:00,769
eavesdropper cannot learn anything about

393
00:14:00,769 --> 00:14:02,839
the plaintext em of course we formalize

394
00:14:02,839 --> 00:14:04,549
this using an indistinguishable ax t

395
00:14:04,549 --> 00:14:06,889
game and there's a stronger security

396
00:14:06,889 --> 00:14:08,889
notion of course which is CCA security

397
00:14:08,889 --> 00:14:11,569
which says an active adversary with

398
00:14:11,569 --> 00:14:13,519
access to a decryption Oracle should not

399
00:14:13,519 --> 00:14:14,720
be able to learn anything about the

400
00:14:14,720 --> 00:14:16,279
plaintext em so here we have an

401
00:14:16,279 --> 00:14:17,689
adversary they can send messages to

402
00:14:17,689 --> 00:14:20,149
Alice and Bob can ask for descriptions

403
00:14:20,149 --> 00:14:22,279
of anything but the challenge ciphertext

404
00:14:22,279 --> 00:14:24,769
and still the adversary should be unable

405
00:14:24,769 --> 00:14:27,259
to tell anything about the message and

406
00:14:27,259 --> 00:14:28,790
there's an orthogonal notion known as

407
00:14:28,790 --> 00:14:30,470
forward secrecy in which we hope that

408
00:14:30,470 --> 00:14:33,079
security still holds even if later Alice

409
00:14:33,079 --> 00:14:37,339
and Bob leak their secret keys so I

410
00:14:37,339 --> 00:14:38,569
showed you the simple public key

411
00:14:38,569 --> 00:14:40,249
encryption scheme before but has some

412
00:14:40,249 --> 00:14:42,949
obvious problems perhaps the most

413
00:14:42,949 --> 00:14:44,990
blatant is that it's only CPA secure and

414
00:14:44,990 --> 00:14:46,639
this is not because i didn't use kramer

415
00:14:46,639 --> 00:14:47,689
shoe for something this is rather

416
00:14:47,689 --> 00:14:49,040
fundamental because i needed it to be

417
00:14:49,040 --> 00:14:50,299
reran demisa but we can't have

418
00:14:50,299 --> 00:14:52,069
randomized alone and CCA secure

419
00:14:52,069 --> 00:14:54,799
simultaneously but let's put that aside

420
00:14:54,799 --> 00:14:57,079
for a second the other problem that it

421
00:14:57,079 --> 00:14:58,730
has is that it requires you to encrypt

422
00:14:58,730 --> 00:15:01,040
potentially very long plain text using

423
00:15:01,040 --> 00:15:02,839
very slow public key operations right if

424
00:15:02,839 --> 00:15:04,369
I want to crimp the entire Bible I have

425
00:15:04,369 --> 00:15:06,169
to convert it into group elements then I

426
00:15:06,169 --> 00:15:07,639
have to run these complicated public key

427
00:15:07,639 --> 00:15:09,169
operations on each of these group

428
00:15:09,169 --> 00:15:11,419
elements going to take me forever so of

429
00:15:11,419 --> 00:15:13,939
course practitioners awesome often don't

430
00:15:13,939 --> 00:15:15,559
even consider such schemes that you just

431
00:15:15,559 --> 00:15:17,149
immediately jumped a hybrid encryption

432
00:15:17,149 --> 00:15:19,249
right so in hybrid encryption Alice and

433
00:15:19,249 --> 00:15:21,799
Bob Alice will send to Bob an encryption

434
00:15:21,799 --> 00:15:24,410
of some fresh random key for a symmetric

435
00:15:24,410 --> 00:15:26,480
encryption scheme and then she'll

436
00:15:26,480 --> 00:15:27,799
encrypt under the symmetric key

437
00:15:27,799 --> 00:15:29,329
encryption scheme her message and this

438
00:15:29,329 --> 00:15:30,439
will be much more efficient because we

439
00:15:30,439 --> 00:15:32,990
only use the public key primitive on say

440
00:15:32,990 --> 00:15:34,080
a 256

441
00:15:34,080 --> 00:15:36,990
you but unfortunately this doesn't work

442
00:15:36,990 --> 00:15:39,780
at all in the firewall world and the

443
00:15:39,780 --> 00:15:41,640
reason that doesn't is because we can't

444
00:15:41,640 --> 00:15:44,460
reran demise the secret key the

445
00:15:44,460 --> 00:15:47,490
symmetric key RK in fact we make this

446
00:15:47,490 --> 00:15:49,560
for when we show that if you have any

447
00:15:49,560 --> 00:15:51,510
scheme that's key randomized abow if we

448
00:15:51,510 --> 00:15:53,520
could reran demise the key RK so if we

449
00:15:53,520 --> 00:15:55,530
could convert an encryption under our k2

450
00:15:55,530 --> 00:15:57,180
encryption under our k prime for some

451
00:15:57,180 --> 00:15:59,130
new random p then this would imply

452
00:15:59,130 --> 00:16:00,780
public key encryption so in other word

453
00:16:00,780 --> 00:16:02,130
you can't use efficient symmetric key

454
00:16:02,130 --> 00:16:05,100
confirmative in order to build a rear

455
00:16:05,100 --> 00:16:07,380
and amides of a hybrid encryption scheme

456
00:16:07,380 --> 00:16:09,990
so things are non-trivial here but the

457
00:16:09,990 --> 00:16:11,640
next question you can ask is what about

458
00:16:11,640 --> 00:16:13,410
key agreement and it turns out the key

459
00:16:13,410 --> 00:16:16,730
agreement works in fact we have a

460
00:16:16,730 --> 00:16:19,410
composition theorem this is the informal

461
00:16:19,410 --> 00:16:21,240
layout which is that if you combine key

462
00:16:21,240 --> 00:16:22,710
agreement with the firewall and secret

463
00:16:22,710 --> 00:16:24,180
key encryption with the firewall you'll

464
00:16:24,180 --> 00:16:25,620
get message transmission with a firewall

465
00:16:25,620 --> 00:16:28,080
know this composition theorem exists

466
00:16:28,080 --> 00:16:29,880
classically as well it's so trivial that

467
00:16:29,880 --> 00:16:31,230
nobody ever mentions it right it's

468
00:16:31,230 --> 00:16:32,520
obvious that if you have secure key

469
00:16:32,520 --> 00:16:33,870
agreement and secure symmetric key

470
00:16:33,870 --> 00:16:36,150
encryption you get secure message

471
00:16:36,150 --> 00:16:38,520
transmission and firewalls it's not

472
00:16:38,520 --> 00:16:40,170
entirely trivial but we've proven it

473
00:16:40,170 --> 00:16:43,200
it's true you can use it and so this

474
00:16:43,200 --> 00:16:45,450
justifies the study of key agreement in

475
00:16:45,450 --> 00:16:47,730
the firewall model so we can see

476
00:16:47,730 --> 00:16:49,320
obviously the most natural key green

477
00:16:49,320 --> 00:16:50,790
protocol which is just diffie-hellman

478
00:16:50,790 --> 00:16:53,010
key agreement and which Bob said she to

479
00:16:53,010 --> 00:16:55,580
be essentially a and the output GTA be

480
00:16:55,580 --> 00:16:57,870
as their shared secret key this is

481
00:16:57,870 --> 00:16:59,910
secure as long as ddh is hard over the

482
00:16:59,910 --> 00:17:03,390
group and we can consider a natural

483
00:17:03,390 --> 00:17:06,240
firewall for this protocol in which the

484
00:17:06,240 --> 00:17:08,640
firewall simply raises Bob's message to

485
00:17:08,640 --> 00:17:10,709
a uniformly random exponent are getting

486
00:17:10,709 --> 00:17:14,400
g to the RV that when Allison she's a he

487
00:17:14,400 --> 00:17:17,430
raises Alice's message to the same to

488
00:17:17,430 --> 00:17:19,410
the same exponent are and what's cute

489
00:17:19,410 --> 00:17:20,730
about this it looks like the firewall

490
00:17:20,730 --> 00:17:22,050
just mulling everything and screwing it

491
00:17:22,050 --> 00:17:23,369
up but actually even though they see

492
00:17:23,369 --> 00:17:24,660
different transcripts they both will

493
00:17:24,660 --> 00:17:26,520
help with the same key this is actually

494
00:17:26,520 --> 00:17:28,020
rather cute it's not due to me it's due

495
00:17:28,020 --> 00:17:30,360
to a blaze bloomerang Strauss but

496
00:17:30,360 --> 00:17:32,070
unfortunately this does not work in our

497
00:17:32,070 --> 00:17:34,710
model this actually is insecure even

498
00:17:34,710 --> 00:17:36,330
though the exponent is uniformly random

499
00:17:36,330 --> 00:17:38,070
so houses message looks uniformly random

500
00:17:38,070 --> 00:17:40,920
it can depend on you to the RB in

501
00:17:40,920 --> 00:17:43,110
particular a corrupt implementation can

502
00:17:43,110 --> 00:17:44,820
essentially choose the key right so

503
00:17:44,820 --> 00:17:46,430
alice is corrupt an image

504
00:17:46,430 --> 00:17:48,800
you can sample many many keys and find

505
00:17:48,800 --> 00:17:50,660
one such that all the last bits say the

506
00:17:50,660 --> 00:17:52,370
last 10 bits or l0 or something like

507
00:17:52,370 --> 00:17:56,030
this so this is not a secure scheme in a

508
00:17:56,030 --> 00:17:58,010
paper we show actual secure scheme and

509
00:17:58,010 --> 00:17:59,870
the trick is simply to add a commitment

510
00:17:59,870 --> 00:18:02,990
right so we force Alice to commit before

511
00:18:02,990 --> 00:18:05,210
Bob sent you the B and then we asked us

512
00:18:05,210 --> 00:18:06,650
to open the commitment because the house

513
00:18:06,650 --> 00:18:10,010
has been forced to commit before before

514
00:18:10,010 --> 00:18:12,530
sending GTA she no longer has this

515
00:18:12,530 --> 00:18:14,360
attack and the paper we prove that such

516
00:18:14,360 --> 00:18:16,670
a scheme works of course there are lots

517
00:18:16,670 --> 00:18:17,870
of details that I'm skipping the

518
00:18:17,870 --> 00:18:19,280
commitment scheme itself has to be rerun

519
00:18:19,280 --> 00:18:21,530
demisa belit has to be malleable but it

520
00:18:21,530 --> 00:18:23,680
turns out that this actually does work

521
00:18:23,680 --> 00:18:27,350
so this is our CPA securus game I won't

522
00:18:27,350 --> 00:18:29,810
have time to show you our authenticated

523
00:18:29,810 --> 00:18:32,960
key agreement scheme but surprisingly

524
00:18:32,960 --> 00:18:34,160
you can do authenticated key agreement

525
00:18:34,160 --> 00:18:36,620
with a reverse firewall and I'll simply

526
00:18:36,620 --> 00:18:38,450
mention the main technical challenge

527
00:18:38,450 --> 00:18:40,880
that we had to overcome which is that

528
00:18:40,880 --> 00:18:43,010
typically in order to authenticate a key

529
00:18:43,010 --> 00:18:44,960
agreement what you do is you make your

530
00:18:44,960 --> 00:18:46,610
protocol non malleable in fact what you

531
00:18:46,610 --> 00:18:49,210
do is you take some secure signature and

532
00:18:49,210 --> 00:18:51,920
you ask the parties to sign the entire

533
00:18:51,920 --> 00:18:53,540
transcripts and the parties will only

534
00:18:53,540 --> 00:18:56,330
accept the key if both of them if they

535
00:18:56,330 --> 00:18:57,860
see this ain't askin sure of the same

536
00:18:57,860 --> 00:18:59,930
transcript that they've seen right so if

537
00:18:59,930 --> 00:19:01,250
either of them sees a different

538
00:19:01,250 --> 00:19:03,440
transcript nothing will go through but

539
00:19:03,440 --> 00:19:05,780
we have a firewall we want the firewall

540
00:19:05,780 --> 00:19:07,610
tamal the messages right if the firewall

541
00:19:07,610 --> 00:19:09,650
can't do anything then or then there's

542
00:19:09,650 --> 00:19:11,450
no point so we actually need to

543
00:19:11,450 --> 00:19:14,030
construct a malleable authenticated key

544
00:19:14,030 --> 00:19:15,680
or in a protocol so we can't use the

545
00:19:15,680 --> 00:19:17,270
standard tricks that everyone else uses

546
00:19:17,270 --> 00:19:18,830
at least not the ones that I'm aware of

547
00:19:18,830 --> 00:19:20,990
oh but it turns out that it works and

548
00:19:20,990 --> 00:19:23,300
very very surprisingly it's actually

549
00:19:23,300 --> 00:19:25,160
rather simple so this is this is the

550
00:19:25,160 --> 00:19:29,060
entire scheme it's just a rather slight

551
00:19:29,060 --> 00:19:31,940
variant of authenticating here at your

552
00:19:31,940 --> 00:19:34,010
mail with diffie-hellman with a couple

553
00:19:34,010 --> 00:19:36,380
tricks the uses of use as a pairing and

554
00:19:36,380 --> 00:19:38,960
it uses a unique signature but I'm a

555
00:19:38,960 --> 00:19:41,330
practitioners I'm not a practitioner so

556
00:19:41,330 --> 00:19:43,670
I don't really know but as far as I can

557
00:19:43,670 --> 00:19:45,530
tell this is reasonably efficient that I

558
00:19:45,530 --> 00:19:47,390
think this compare is fairly favourably

559
00:19:47,390 --> 00:19:49,670
with something like ecdsa which is

560
00:19:49,670 --> 00:19:52,280
actually deployed in practice so I think

561
00:19:52,280 --> 00:19:53,780
this is quite interesting and quite

562
00:19:53,780 --> 00:19:56,990
surprising and I'd love it if someone

563
00:19:56,990 --> 00:19:58,110
who actually is a practice

564
00:19:58,110 --> 00:20:02,370
were to look into it so that's

565
00:20:02,370 --> 00:20:03,690
essentially my talk I'll leave you with

566
00:20:03,690 --> 00:20:07,590
some open questions so first of all sort

567
00:20:07,590 --> 00:20:08,790
of the question i just asked when a

568
00:20:08,790 --> 00:20:11,070
reverse firewall is practical so we've

569
00:20:11,070 --> 00:20:13,590
already shown in earlier work that

570
00:20:13,590 --> 00:20:15,360
reverse firewalls can actually do really

571
00:20:15,360 --> 00:20:18,750
really powerful theoretical things but

572
00:20:18,750 --> 00:20:19,980
we're now curious about whether or not

573
00:20:19,980 --> 00:20:21,480
they're actually practical in particular

574
00:20:21,480 --> 00:20:24,630
is this firewall practical um I'm not

575
00:20:24,630 --> 00:20:25,980
the person to answer it but people in

576
00:20:25,980 --> 00:20:28,799
the audience can and would someone like

577
00:20:28,799 --> 00:20:30,510
to implement our CC a secure scheme I

578
00:20:30,510 --> 00:20:35,040
would love this another question is how

579
00:20:35,040 --> 00:20:36,660
do we handle adversary early chosen

580
00:20:36,660 --> 00:20:38,970
plaintext so currently we require some

581
00:20:38,970 --> 00:20:41,549
notion of correctness as far as I know

582
00:20:41,549 --> 00:20:44,160
all their models do the same it's fairly

583
00:20:44,160 --> 00:20:47,370
necessary um but it will be really

584
00:20:47,370 --> 00:20:49,140
really nice to get around this or to

585
00:20:49,140 --> 00:20:52,080
show that this is necessary and of

586
00:20:52,080 --> 00:20:53,669
course a natural question to ask is what

587
00:20:53,669 --> 00:20:55,080
else can we do with reverse firewalls

588
00:20:55,080 --> 00:20:57,030
NPCs not been done yet differential

589
00:20:57,030 --> 00:20:58,380
privacy has not been done yet I think

590
00:20:58,380 --> 00:21:01,200
these are really interesting areas and

591
00:21:01,200 --> 00:21:03,270
just a little question can we do lattice

592
00:21:03,270 --> 00:21:05,070
base crypto with reverse firewalls at

593
00:21:05,070 --> 00:21:07,980
first it seems like the idea the answer

594
00:21:07,980 --> 00:21:09,540
should obviously be yes but if you play

595
00:21:09,540 --> 00:21:10,650
with it for a little bit you'll see the

596
00:21:10,650 --> 00:21:13,020
attached pool rather subtle so that's my

597
00:21:13,020 --> 00:21:15,650
talk thank you

