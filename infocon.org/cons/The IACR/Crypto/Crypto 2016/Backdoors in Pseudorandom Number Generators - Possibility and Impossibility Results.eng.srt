1
00:00:04,170 --> 00:00:07,210
Hey so I'm going to be talking today

2
00:00:07,210 --> 00:00:10,000
about some recent work with John Porter

3
00:00:10,000 --> 00:00:12,429
Gabrielli Kenny Patterson and Jakob shot

4
00:00:12,429 --> 00:00:14,830
on back doors and pseudo-random number

5
00:00:14,830 --> 00:00:18,160
generators so the story really begins

6
00:00:18,160 --> 00:00:21,550
here with the Snowden leaks in 2013 so

7
00:00:21,550 --> 00:00:23,470
overnight the threat model changed and

8
00:00:23,470 --> 00:00:24,669
we needed to start considering

9
00:00:24,669 --> 00:00:27,300
government's as potential adversaries

10
00:00:27,300 --> 00:00:30,250
now among the Snowden revelations was

11
00:00:30,250 --> 00:00:32,259
evidence that the NSA had colluded with

12
00:00:32,259 --> 00:00:34,809
software providers to insert backdoors

13
00:00:34,809 --> 00:00:37,390
into their cryptographic software so

14
00:00:37,390 --> 00:00:38,710
when we talk about the backdoor

15
00:00:38,710 --> 00:00:40,360
we mean a deliberate formability in a

16
00:00:40,360 --> 00:00:42,430
scheme coupled with some secret backdoor

17
00:00:42,430 --> 00:00:44,920
information and it's designed in such a

18
00:00:44,920 --> 00:00:46,600
way that if you don't know the backdoor

19
00:00:46,600 --> 00:00:48,880
the scheme appears to be secure and

20
00:00:48,880 --> 00:00:49,870
doing its job

21
00:00:49,870 --> 00:00:52,060
but if you do know the backdoor then you

22
00:00:52,060 --> 00:00:53,560
get some advantage in subverting the

23
00:00:53,560 --> 00:00:56,829
scheme now a good source of randomness

24
00:00:56,829 --> 00:00:58,840
is essential for many cryptographic

25
00:00:58,840 --> 00:01:01,660
applications and correspondingly a

26
00:01:01,660 --> 00:01:03,310
pseudo-random generator or a

27
00:01:03,310 --> 00:01:05,259
pseudo-random number generator of input

28
00:01:05,259 --> 00:01:07,450
is pretty ubiquitous in cryptographic

29
00:01:07,450 --> 00:01:10,510
implementations and we'll define both

30
00:01:10,510 --> 00:01:12,940
more formally as we go through but the

31
00:01:12,940 --> 00:01:14,400
key difference is that a PRG is

32
00:01:14,400 --> 00:01:17,500
deterministic whereas a PRNG is able to

33
00:01:17,500 --> 00:01:19,180
gather entropy from its operating

34
00:01:19,180 --> 00:01:22,479
environment now it's the ubiquity of

35
00:01:22,479 --> 00:01:24,100
these primitives and implementations

36
00:01:24,100 --> 00:01:26,860
couple of the fact that often if the

37
00:01:26,860 --> 00:01:28,510
source of randomness fails then the

38
00:01:28,510 --> 00:01:30,070
security of the scheme which is relying

39
00:01:30,070 --> 00:01:33,820
on it crumbles as well which makes these

40
00:01:33,820 --> 00:01:37,260
very attractive targets for a target

41
00:01:37,260 --> 00:01:39,970
sorry okay so maybe very attractive

42
00:01:39,970 --> 00:01:42,010
targets for an attacker who might wish

43
00:01:42,010 --> 00:01:44,320
to optimize and the impact and the

44
00:01:44,320 --> 00:01:47,350
spread of a backdoor and this isn't just

45
00:01:47,350 --> 00:01:49,270
conjecture we know if it really happened

46
00:01:49,270 --> 00:01:51,909
with the infamous Julie C which were

47
00:01:51,909 --> 00:01:54,490
achieved widespread deployment and have

48
00:01:54,490 --> 00:01:56,350
been shown to be exploitable in practice

49
00:01:56,350 --> 00:01:58,900
and which more recently read as ugly had

50
00:01:58,900 --> 00:02:03,600
again in the Juniper firewalls thank you

51
00:02:03,600 --> 00:02:07,119
okay so in 2014 Volare

52
00:02:07,119 --> 00:02:09,758
Patterson and Rockaway revamp revamped

53
00:02:09,758 --> 00:02:11,950
the field of cryptography for the post

54
00:02:11,950 --> 00:02:14,280
Snowden world and in

55
00:02:14,280 --> 00:02:16,350
first says kickstart a whole new line of

56
00:02:16,350 --> 00:02:19,050
theoretical research into this area and

57
00:02:19,050 --> 00:02:21,060
it's very much into this strand of work

58
00:02:21,060 --> 00:02:24,720
that ours fits now in particular the

59
00:02:24,720 --> 00:02:26,550
first post nerdom treatment of

60
00:02:26,550 --> 00:02:29,550
backdoored PR G's was by dodo settle in

61
00:02:29,550 --> 00:02:32,489
2015 and we take this work of our

62
00:02:32,489 --> 00:02:36,150
jumping-off point here so the question

63
00:02:36,150 --> 00:02:39,209
we see to explore is to what extent can

64
00:02:39,209 --> 00:02:41,430
pseudo-random number generator be

65
00:02:41,430 --> 00:02:42,540
backdoored

66
00:02:42,540 --> 00:02:46,170
and simultaneously probably secure so to

67
00:02:46,170 --> 00:02:49,140
this end we strengthen existing results

68
00:02:49,140 --> 00:02:52,290
on backdoored PR G's and we initiate the

69
00:02:52,290 --> 00:02:54,450
first study of backdoored PRN G's of

70
00:02:54,450 --> 00:02:57,269
input so we come up with definitions and

71
00:02:57,269 --> 00:03:00,300
models we present a construction of a

72
00:03:00,300 --> 00:03:02,040
robust backdoored PRNG

73
00:03:02,040 --> 00:03:04,709
and we have an impossibility result this

74
00:03:04,709 --> 00:03:07,050
theoretical lower bound which links the

75
00:03:07,050 --> 00:03:09,300
so-called backdoor ability of a robust

76
00:03:09,300 --> 00:03:12,840
PRNG to its state size so I'm going to

77
00:03:12,840 --> 00:03:14,610
try and touch all of these today because

78
00:03:14,610 --> 00:03:16,380
whilst the work on PR India that's

79
00:03:16,380 --> 00:03:18,299
probably our main contribution I think

80
00:03:18,299 --> 00:03:20,489
the work on PR G's is quite a nice way

81
00:03:20,489 --> 00:03:22,260
of introducing some the ideas that we're

82
00:03:22,260 --> 00:03:24,680
altima going to use in that later work

83
00:03:24,680 --> 00:03:27,959
so what is the PRG so a PRG take the

84
00:03:27,959 --> 00:03:30,269
short truly random string of inputs and

85
00:03:30,269 --> 00:03:32,970
outputs pseudo-random bit strings of our

86
00:03:32,970 --> 00:03:35,280
go to polynomials length and we modified

87
00:03:35,280 --> 00:03:37,709
a syntax slightly here to facilitate our

88
00:03:37,709 --> 00:03:41,220
backdooring definitions so formally a

89
00:03:41,220 --> 00:03:44,220
PRG the tuple of algorithms we're set up

90
00:03:44,220 --> 00:03:46,230
outputs a pair of parameters for the

91
00:03:46,230 --> 00:03:48,959
generator and PP denotes the public

92
00:03:48,959 --> 00:03:50,730
parameter which is an input to all other

93
00:03:50,730 --> 00:03:53,190
algorithms and we're going to use BK to

94
00:03:53,190 --> 00:03:56,970
represent the secret backdoor key now in

95
00:03:56,970 --> 00:03:58,769
it outputs an initial state for the

96
00:03:58,769 --> 00:04:02,400
generator s0 and next take the input the

97
00:04:02,400 --> 00:04:04,019
current state of the generator and

98
00:04:04,019 --> 00:04:06,840
returns the public output R and an

99
00:04:06,840 --> 00:04:09,209
updated state as Prime and you can see

100
00:04:09,209 --> 00:04:10,650
is essential that the state is kept

101
00:04:10,650 --> 00:04:12,600
secret because any attacker that knows a

102
00:04:12,600 --> 00:04:14,609
state has everything they need to be

103
00:04:14,609 --> 00:04:18,720
able to compute all future output now

104
00:04:18,720 --> 00:04:20,910
when we talk about PRG security well at

105
00:04:20,910 --> 00:04:22,409
the very least you want these outputs to

106
00:04:22,409 --> 00:04:24,120
be indistinguishable from random bit

107
00:04:24,120 --> 00:04:26,580
strings but we're actually going to be

108
00:04:26,580 --> 00:04:27,340
interested in

109
00:04:27,340 --> 00:04:29,500
ah geez with a stronger property which

110
00:04:29,500 --> 00:04:32,530
is that afford security so food security

111
00:04:32,530 --> 00:04:35,470
says suppose at some point in time the

112
00:04:35,470 --> 00:04:37,180
state of your generator gets compromised

113
00:04:37,180 --> 00:04:39,280
now clearly all bets off about future

114
00:04:39,280 --> 00:04:41,919
output but what forward security asks is

115
00:04:41,919 --> 00:04:44,620
can previous outputs remain secure and

116
00:04:44,620 --> 00:04:46,630
pseudo-random even conditioned on

117
00:04:46,630 --> 00:04:50,050
knowledge of the state so now to

118
00:04:50,050 --> 00:04:52,780
backdoored p ideas which we define in

119
00:04:52,780 --> 00:04:54,370
line with the definitions given by

120
00:04:54,370 --> 00:04:57,669
donors hotel in their PayPal so our back

121
00:04:57,669 --> 00:05:00,250
door PRG is a tuple of algorithms we've

122
00:05:00,250 --> 00:05:03,040
set up in it so next just as before but

123
00:05:03,040 --> 00:05:04,870
now we add this new algorithm B which is

124
00:05:04,870 --> 00:05:06,520
highlighted in red where B stands for

125
00:05:06,520 --> 00:05:08,770
Big Brother and this modules our back

126
00:05:08,770 --> 00:05:12,340
door adversary now Big Brother is

127
00:05:12,340 --> 00:05:14,500
internal in the sense that he's built

128
00:05:14,500 --> 00:05:17,380
into the specification of the PRG itself

129
00:05:17,380 --> 00:05:20,020
but he's also kind of external and I've

130
00:05:20,020 --> 00:05:22,030
been getting the back door key he can

131
00:05:22,030 --> 00:05:24,039
only observe public outputs and

132
00:05:24,039 --> 00:05:27,070
parameters now there are various

133
00:05:27,070 --> 00:05:29,080
different ways that Big Brother might

134
00:05:29,080 --> 00:05:31,450
speak to benefit from a back door so for

135
00:05:31,450 --> 00:05:32,620
each of these different backdooring

136
00:05:32,620 --> 00:05:34,690
goals we write a game which captures

137
00:05:34,690 --> 00:05:36,940
that goal and an advantage term to

138
00:05:36,940 --> 00:05:38,620
measure how well Big Brother does and

139
00:05:38,620 --> 00:05:40,630
we'll see an example of this in a couple

140
00:05:40,630 --> 00:05:42,970
of slides time so putting it all

141
00:05:42,970 --> 00:05:45,070
together we say our tuple of algorithms

142
00:05:45,070 --> 00:05:47,620
is a back door forward secure PRG of a

143
00:05:47,620 --> 00:05:49,810
given type if without knowledge the back

144
00:05:49,810 --> 00:05:52,030
door the algorithms form a forward

145
00:05:52,030 --> 00:05:55,030
secure PRG but Big Brother with his back

146
00:05:55,030 --> 00:05:56,889
door key gets some advantage in

147
00:05:56,889 --> 00:06:00,729
subversion scheme so the orders in the

148
00:06:00,729 --> 00:06:02,680
paper from which we take our definitions

149
00:06:02,680 --> 00:06:04,210
present a number of different

150
00:06:04,210 --> 00:06:06,150
constructions of backdoored prgs

151
00:06:06,150 --> 00:06:08,830
however none of these allow Big Brother

152
00:06:08,830 --> 00:06:11,440
to recover past output values while

153
00:06:11,440 --> 00:06:14,020
simultaneously being forward secure and

154
00:06:14,020 --> 00:06:15,340
when you think about it the two's in

155
00:06:15,340 --> 00:06:16,539
kind of an odds right because for

156
00:06:16,539 --> 00:06:18,639
security is all about protecting past

157
00:06:18,639 --> 00:06:21,400
outputs and we want to subvert them so

158
00:06:21,400 --> 00:06:23,260
this is an open problem can these two

159
00:06:23,260 --> 00:06:25,870
properties coexist and it turns out the

160
00:06:25,870 --> 00:06:28,810
answer is yes they can and even worse so

161
00:06:28,810 --> 00:06:31,419
we come up with a new backdooring model

162
00:06:31,419 --> 00:06:34,330
in which we initialize the generator is

163
00:06:34,330 --> 00:06:35,500
some state s0

164
00:06:35,500 --> 00:06:37,900
and we run the generator forwards to

165
00:06:37,900 --> 00:06:39,590
produce Q outputs

166
00:06:39,590 --> 00:06:41,180
the Big Brother is given one of those

167
00:06:41,180 --> 00:06:43,639
outputs just one and the secret backdoor

168
00:06:43,639 --> 00:06:46,430
key and he challenged him to recover the

169
00:06:46,430 --> 00:06:48,740
very first date of the generator and you

170
00:06:48,740 --> 00:06:50,660
can see this is a very strong form of

171
00:06:50,660 --> 00:06:52,700
compromise because of the first date you

172
00:06:52,700 --> 00:06:54,500
can compute everything that happens

173
00:06:54,500 --> 00:06:56,570
subsequently and you can actually show

174
00:06:56,570 --> 00:06:58,220
that this is strictly stronger than any

175
00:06:58,220 --> 00:06:59,780
of the models given in the paper by

176
00:06:59,780 --> 00:07:01,060
dodeth's at all

177
00:07:01,060 --> 00:07:03,560
now we come up with a couple of

178
00:07:03,560 --> 00:07:05,660
constructions of prgs which achieves

179
00:07:05,660 --> 00:07:07,669
this but I'm going to talk about one in

180
00:07:07,669 --> 00:07:09,560
particular today because we're ultimate

181
00:07:09,560 --> 00:07:11,150
you're going to use a similar trick when

182
00:07:11,150 --> 00:07:15,620
we backdoor a PRNG so the key components

183
00:07:15,620 --> 00:07:17,930
are we take a forward secure but non

184
00:07:17,930 --> 00:07:20,240
backdoored PRG and we're going to

185
00:07:20,240 --> 00:07:22,400
augment it using a special encryption

186
00:07:22,400 --> 00:07:24,710
scheme to give it a backdoor so this

187
00:07:24,710 --> 00:07:27,290
encryption scheme has a ciphertext that

188
00:07:27,290 --> 00:07:29,540
look like random bit strings and it's

189
00:07:29,540 --> 00:07:31,669
statistically we randomized a bomb which

190
00:07:31,669 --> 00:07:33,350
means we have an efficient algorithm

191
00:07:33,350 --> 00:07:36,200
that takes input a ciphertext and some

192
00:07:36,200 --> 00:07:38,450
random coins and it returns the new

193
00:07:38,450 --> 00:07:39,950
ciphertext encrypting the same

194
00:07:39,950 --> 00:07:42,020
underlying message and to be

195
00:07:42,020 --> 00:07:43,880
statistically randomized the ball means

196
00:07:43,880 --> 00:07:46,580
that an honestly generated ciphertext

197
00:07:46,580 --> 00:07:48,470
and the rear and annihilation of a

198
00:07:48,470 --> 00:07:50,090
ciphertext generated with arbitrary

199
00:07:50,090 --> 00:07:53,570
randomness are statistically close now

200
00:07:53,570 --> 00:07:55,130
in the for construction we need a scheme

201
00:07:55,130 --> 00:07:57,590
to have a few extra properties I'm not

202
00:07:57,590 --> 00:07:59,810
really going to touch on here but it can

203
00:07:59,810 --> 00:08:01,310
easily be seen to be achieved with

204
00:08:01,310 --> 00:08:03,410
alkmaar with carefully chosen encoding

205
00:08:03,410 --> 00:08:07,640
schemes so for the construction we begin

206
00:08:07,640 --> 00:08:09,889
by simply generating the parameters for

207
00:08:09,889 --> 00:08:12,169
the underlying PRG and the encryption

208
00:08:12,169 --> 00:08:14,300
scheme and we make everything public

209
00:08:14,300 --> 00:08:16,639
except for the secret decryption key

210
00:08:16,639 --> 00:08:18,770
which perhaps unsurprisingly we're going

211
00:08:18,770 --> 00:08:21,160
to keep back and give to Big Brother

212
00:08:21,160 --> 00:08:23,810
so to cross the initial stay of our

213
00:08:23,810 --> 00:08:26,900
backdoor PRG we begin by generating a

214
00:08:26,900 --> 00:08:30,110
state s0 for the underlying PRG which we

215
00:08:30,110 --> 00:08:31,850
then encrypt and it's these two

216
00:08:31,850 --> 00:08:33,860
components together which form the state

217
00:08:33,860 --> 00:08:38,000
of the backdoor PRG so when next is

218
00:08:38,000 --> 00:08:39,740
called we need to do two things we need

219
00:08:39,740 --> 00:08:41,719
to produce output and we need to update

220
00:08:41,719 --> 00:08:45,350
the state so to produce output we simply

221
00:08:45,350 --> 00:08:46,970
output the side protect from the stage

222
00:08:46,970 --> 00:08:49,970
as it is and then to update the state we

223
00:08:49,970 --> 00:08:53,060
call the underlying PID on s they

224
00:08:53,060 --> 00:08:55,430
stay accordingly and use the output

225
00:08:55,430 --> 00:08:57,620
produced to reran demise that ciphertext

226
00:08:57,620 --> 00:09:00,650
in the state so to see how this helps

227
00:09:00,650 --> 00:09:02,779
Big Brother now by a construction

228
00:09:02,779 --> 00:09:05,210
whichever output he's given is a

229
00:09:05,210 --> 00:09:07,970
ciphertext encrypting s0 the first day

230
00:09:07,970 --> 00:09:10,760
of the underlying PRG I'm glossing over

231
00:09:10,760 --> 00:09:12,680
details here but essentially this gives

232
00:09:12,680 --> 00:09:14,839
him everything he needs to be able to

233
00:09:14,839 --> 00:09:16,339
reconstruct the first day of the

234
00:09:16,339 --> 00:09:18,680
backdoored PRG and in the process all

235
00:09:18,680 --> 00:09:20,950
other states and outputs

236
00:09:20,950 --> 00:09:23,420
now the encryption the correctness of

237
00:09:23,420 --> 00:09:25,010
the encryption scheme ensures that Big

238
00:09:25,010 --> 00:09:27,080
Brother succeeds of probability 1 this

239
00:09:27,080 --> 00:09:30,260
is a very effective backdoor and due to

240
00:09:30,260 --> 00:09:31,700
the properties of the encryption scheme

241
00:09:31,700 --> 00:09:32,990
all of these ciphertexts

242
00:09:32,990 --> 00:09:35,210
appear pseudo-random and independent of

243
00:09:35,210 --> 00:09:37,580
each other so the forward security

244
00:09:37,580 --> 00:09:40,010
follows from this and the fact that the

245
00:09:40,010 --> 00:09:43,570
underlying PRG itself is forward secure

246
00:09:43,570 --> 00:09:46,070
so at this point we're kind of forced to

247
00:09:46,070 --> 00:09:47,450
conclude that unfortunately

248
00:09:47,450 --> 00:09:49,430
deterministic prgs are totally

249
00:09:49,430 --> 00:09:52,160
susceptible to backdooring it's hard to

250
00:09:52,160 --> 00:09:54,050
think of a much more devastating form of

251
00:09:54,050 --> 00:09:55,310
compromise than that that we've just

252
00:09:55,310 --> 00:09:58,220
seen so it makes sensitive point to turn

253
00:09:58,220 --> 00:10:00,260
our attention to PR in keys of input

254
00:10:00,260 --> 00:10:02,960
both because they're widely deployed in

255
00:10:02,960 --> 00:10:05,060
practice but also because intuitively

256
00:10:05,060 --> 00:10:07,040
you feel that there's flow of entropy

257
00:10:07,040 --> 00:10:08,750
into system it's gonna make Big

258
00:10:08,750 --> 00:10:10,970
Brother's job harder and it turns out it

259
00:10:10,970 --> 00:10:15,860
does to an extent so what's the PRNG we

260
00:10:15,860 --> 00:10:18,170
define PR and G's in line with the model

261
00:10:18,170 --> 00:10:21,860
given by Dodd SSL in their 2013 paper so

262
00:10:21,860 --> 00:10:24,620
essentially a PRN J is a deterministic

263
00:10:24,620 --> 00:10:27,770
PRG with a refresh procedure added so

264
00:10:27,770 --> 00:10:30,410
refresh an algorithm that takes them put

265
00:10:30,410 --> 00:10:32,720
the generators state and some entropy

266
00:10:32,720 --> 00:10:35,600
input I and it combines these to produce

267
00:10:35,600 --> 00:10:38,990
an updated state as Prime now these

268
00:10:38,990 --> 00:10:41,510
entropy inputs are gathered from a

269
00:10:41,510 --> 00:10:42,920
source of randomness which may be

270
00:10:42,920 --> 00:10:45,290
imperfect in the real world this they'll

271
00:10:45,290 --> 00:10:47,510
be drawn from things like this timings

272
00:10:47,510 --> 00:10:49,760
and keystrokes so to model this process

273
00:10:49,760 --> 00:10:52,310
we use an algorithm deal which we call

274
00:10:52,310 --> 00:10:54,770
the distribution sampler and in

275
00:10:54,770 --> 00:10:56,510
particular the addition of this refresh

276
00:10:56,510 --> 00:10:59,060
algorithm means that we expect a good PR

277
00:10:59,060 --> 00:11:01,070
ng to be able to recover from state

278
00:11:01,070 --> 00:11:03,170
compromise provided sufficient and you

279
00:11:03,170 --> 00:11:03,510
pay

280
00:11:03,510 --> 00:11:07,019
than enter the system so to capture this

281
00:11:07,019 --> 00:11:10,709
the strongest security notion for PRNG

282
00:11:10,709 --> 00:11:14,610
is that of robustness so here we imagine

283
00:11:14,610 --> 00:11:16,410
a scenario where we set the generator

284
00:11:16,410 --> 00:11:18,750
running and we flip a bit B which

285
00:11:18,750 --> 00:11:20,760
determines whether the adversary will

286
00:11:20,760 --> 00:11:23,940
see real or random outputs now in

287
00:11:23,940 --> 00:11:26,100
contrast to the PRG setting where the

288
00:11:26,100 --> 00:11:27,959
adversary's passive and can just observe

289
00:11:27,959 --> 00:11:30,750
outputs here we give him a number of

290
00:11:30,750 --> 00:11:33,000
Oracle's which reflect different ways in

291
00:11:33,000 --> 00:11:35,760
which he might compromise the state of

292
00:11:35,760 --> 00:11:38,279
the generator or influence if entropy

293
00:11:38,279 --> 00:11:41,130
source and what robustness says is that

294
00:11:41,130 --> 00:11:43,440
even in the face of all this compromise

295
00:11:43,440 --> 00:11:46,290
and all this interference no bounded

296
00:11:46,290 --> 00:11:48,000
adversary can work out what that

297
00:11:48,000 --> 00:11:50,010
challenge bit is much better than

298
00:11:50,010 --> 00:11:52,709
guessing this is a very strong security

299
00:11:52,709 --> 00:11:56,820
property now the oysters in the paper

300
00:11:56,820 --> 00:11:58,350
from which we take our definitions

301
00:11:58,350 --> 00:12:01,019
present a construction of a provably

302
00:12:01,019 --> 00:12:03,139
robust PR and you have input and

303
00:12:03,139 --> 00:12:05,970
conveniently for us it has output which

304
00:12:05,970 --> 00:12:08,220
is produced by a deterministic for

305
00:12:08,220 --> 00:12:11,880
secure PRG so all we need to do is swap

306
00:12:11,880 --> 00:12:13,620
this with a backdoor one that we just

307
00:12:13,620 --> 00:12:15,690
spoken about creep the entropy

308
00:12:15,690 --> 00:12:17,670
accumulation a bit and we immediately

309
00:12:17,670 --> 00:12:20,699
obtain a PRG of m / which is backdoored

310
00:12:20,699 --> 00:12:22,470
in the sense that now big brother can

311
00:12:22,470 --> 00:12:24,990
take one output and he can compute

312
00:12:24,990 --> 00:12:26,399
everything going back to the previous

313
00:12:26,399 --> 00:12:28,769
refresh pool and everything up to the

314
00:12:28,769 --> 00:12:31,290
next refresh cool but there's a snag

315
00:12:31,290 --> 00:12:33,120
here right because as soon at the

316
00:12:33,120 --> 00:12:34,829
generators refresh with sufficient

317
00:12:34,829 --> 00:12:36,990
entropy the state is going to evolve to

318
00:12:36,990 --> 00:12:38,579
something which is statistically

319
00:12:38,579 --> 00:12:41,130
unpredictable and Big Brother is going

320
00:12:41,130 --> 00:12:43,230
to need to capture another output in

321
00:12:43,230 --> 00:12:45,649
order to regain his backdoor advantage

322
00:12:45,649 --> 00:12:47,880
it becomes clear that if we're gonna

323
00:12:47,880 --> 00:12:49,470
backdoor a PRNG

324
00:12:49,470 --> 00:12:51,930
in any meaningful kind of way we need to

325
00:12:51,930 --> 00:12:54,500
be able to move past these refresh calls

326
00:12:54,500 --> 00:12:57,360
this motivates our backdooring models

327
00:12:57,360 --> 00:13:00,300
the scenario we imagine is a PRNG

328
00:13:00,300 --> 00:13:02,310
it initialized with some state as

329
00:13:02,310 --> 00:13:05,910
pharaoh now s0 is the 'no bowl by our

330
00:13:05,910 --> 00:13:07,980
sequence of refresh and next schools

331
00:13:07,980 --> 00:13:10,709
which we record in a refresh pattern and

332
00:13:10,709 --> 00:13:12,329
ultimately we're going to use this

333
00:13:12,329 --> 00:13:15,820
pattern as a parameter of the experiment

334
00:13:15,820 --> 00:13:19,370
now at some point we stop and we give

335
00:13:19,370 --> 00:13:22,000
Big Brother some arbitrary output our I

336
00:13:22,000 --> 00:13:24,800
along with the secret backdoor key and

337
00:13:24,800 --> 00:13:27,350
we see what you can do with this can you

338
00:13:27,350 --> 00:13:30,890
produce some arbitrary output RJ awesome

339
00:13:30,890 --> 00:13:33,350
arbitary state or can you do even better

340
00:13:33,350 --> 00:13:35,540
and go all the way back to the beginning

341
00:13:35,540 --> 00:13:37,790
computing everything as we were able to

342
00:13:37,790 --> 00:13:41,590
in the setting of deterministic PR Keith

343
00:13:41,590 --> 00:13:45,110
so we present a construction of a robust

344
00:13:45,110 --> 00:13:48,080
PR and you have input which allows Big

345
00:13:48,080 --> 00:13:50,240
Brother to recover arbitrary past

346
00:13:50,240 --> 00:13:52,970
outputs even when they are separated by

347
00:13:52,970 --> 00:13:55,880
these refresh pools so the key

348
00:13:55,880 --> 00:13:58,790
components are we take a robust but non

349
00:13:58,790 --> 00:14:01,700
backdoored PRNG and again we're going to

350
00:14:01,700 --> 00:14:03,920
augment it using our special encryption

351
00:14:03,920 --> 00:14:06,740
skin so to construct the initial state

352
00:14:06,740 --> 00:14:10,370
we generate a state s for the underlying

353
00:14:10,370 --> 00:14:12,620
PRNG which is shown in yellow here and

354
00:14:12,620 --> 00:14:15,500
you can think of this as the active part

355
00:14:15,500 --> 00:14:17,540
of the state of the backdoored PRNG

356
00:14:17,540 --> 00:14:19,130
because we're then going to add to where

357
00:14:19,130 --> 00:14:21,170
a whole lot of redundant space which is

358
00:14:21,170 --> 00:14:23,570
shown here in blue and we're going to

359
00:14:23,570 --> 00:14:26,060
use this space to store encrypted

360
00:14:26,060 --> 00:14:28,640
snapshots of the active part of crucial

361
00:14:28,640 --> 00:14:31,580
points during its evolution namely after

362
00:14:31,580 --> 00:14:34,610
refresh pools so at a given point in

363
00:14:34,610 --> 00:14:37,010
time the state of our backdoor PRNG is

364
00:14:37,010 --> 00:14:39,260
going to look like this with a set of

365
00:14:39,260 --> 00:14:41,530
encrypted snapshots stored in the state

366
00:14:41,530 --> 00:14:44,780
so when refresh is called we simply

367
00:14:44,780 --> 00:14:46,460
apply the Refresh algorithm of the

368
00:14:46,460 --> 00:14:49,130
underlying PRNG to the active part and

369
00:14:49,130 --> 00:14:52,550
updated accordingly but now the

370
00:14:52,550 --> 00:14:55,550
conclusion of a period of refreshing we

371
00:14:55,550 --> 00:14:57,890
take an encrypted snapshot of the active

372
00:14:57,890 --> 00:15:00,470
part the state and we store it in the

373
00:15:00,470 --> 00:15:02,870
state of the backdoor PRNG by shifting

374
00:15:02,870 --> 00:15:05,290
everything else down to make room for it

375
00:15:05,290 --> 00:15:08,180
so you can see that as much as we have

376
00:15:08,180 --> 00:15:10,730
taken on new information here we've also

377
00:15:10,730 --> 00:15:11,840
lost something

378
00:15:11,840 --> 00:15:13,760
the last ciphertext has been pushed out

379
00:15:13,760 --> 00:15:15,020
the state and we're not gonna be able to

380
00:15:15,020 --> 00:15:17,870
get it back again and you can also see

381
00:15:17,870 --> 00:15:20,120
that the number of encrypted snapshots

382
00:15:20,120 --> 00:15:22,670
we can store is limited by the size of

383
00:15:22,670 --> 00:15:26,150
the state so now we have a state that

384
00:15:26,150 --> 00:15:27,860
has a lot of useful in from

385
00:15:27,860 --> 00:15:29,779
encoded in it and we need to get this

386
00:15:29,779 --> 00:15:32,120
out to Big Brother somehow so to do this

387
00:15:32,120 --> 00:15:34,399
we produce output in two distinct ways

388
00:15:34,399 --> 00:15:36,620
and we alternate between them in a way

389
00:15:36,620 --> 00:15:38,839
that appears pseudo-random so the first

390
00:15:38,839 --> 00:15:41,510
way is we simply leak leave encrypted

391
00:15:41,510 --> 00:15:44,450
snapshots in the form of output whereas

392
00:15:44,450 --> 00:15:46,820
the second way we compute output by

393
00:15:46,820 --> 00:15:49,670
applying the underlying PRG energy to

394
00:15:49,670 --> 00:15:51,399
the active part of the state and

395
00:15:51,399 --> 00:15:54,079
crucially output produced in the second

396
00:15:54,079 --> 00:15:56,630
way is reproducible if you have the

397
00:15:56,630 --> 00:15:59,390
right encrypted snapshot so four people

398
00:15:59,390 --> 00:16:01,670
have to succeed here a couple of things

399
00:16:01,670 --> 00:16:04,010
need to happen and firstly it needs to

400
00:16:04,010 --> 00:16:05,899
be the output is given consists of the

401
00:16:05,899 --> 00:16:08,060
encrypted snapshots and that the output

402
00:16:08,060 --> 00:16:10,310
is targeting is one that was produced in

403
00:16:10,310 --> 00:16:13,640
this latter way and biocera it needs to

404
00:16:13,640 --> 00:16:15,019
be that the output is targeting is

405
00:16:15,019 --> 00:16:17,420
arranged in the sensor there haven't

406
00:16:17,420 --> 00:16:19,130
been so many refresh calls between the

407
00:16:19,130 --> 00:16:21,290
two outputs and the snapshot he needs

408
00:16:21,290 --> 00:16:23,200
has been pushed out the stage and lost

409
00:16:23,200 --> 00:16:26,690
the correspondingly Big Brother succeed

410
00:16:26,690 --> 00:16:28,130
through probability approximately a

411
00:16:28,130 --> 00:16:30,410
quarter to target values in range and

412
00:16:30,410 --> 00:16:31,430
zero otherwise

413
00:16:31,430 --> 00:16:34,579
and throughout carefully randomization

414
00:16:34,579 --> 00:16:36,380
of all these ciphertexts ensure that

415
00:16:36,380 --> 00:16:37,699
they appear pseudo-random and

416
00:16:37,699 --> 00:16:40,640
independent of each other and security

417
00:16:40,640 --> 00:16:42,440
follows from this and the robustness of

418
00:16:42,440 --> 00:16:44,060
the underlying PRNG

419
00:16:44,060 --> 00:16:46,339
and there are many optimizations and

420
00:16:46,339 --> 00:16:48,320
variations possible on his basic scheme

421
00:16:48,320 --> 00:16:51,260
so suppose for example you were

422
00:16:51,260 --> 00:16:53,750
targeting a specific output value that

423
00:16:53,750 --> 00:16:55,310
was going to be exposed as a nonce and a

424
00:16:55,310 --> 00:16:57,709
protocol then you can make sure that the

425
00:16:57,709 --> 00:16:59,839
encrypted snapshot you need is always

426
00:16:59,839 --> 00:17:01,880
stored in the state and achieve a much

427
00:17:01,880 --> 00:17:04,880
better success probability now in

428
00:17:04,880 --> 00:17:06,919
reality as you can see the situation's

429
00:17:06,919 --> 00:17:09,169
not quite so simple and that's because

430
00:17:09,169 --> 00:17:11,689
your busters is such a strong security

431
00:17:11,689 --> 00:17:13,640
guarantee that to be able to give the

432
00:17:13,640 --> 00:17:16,010
state all this extra structure and still

433
00:17:16,010 --> 00:17:18,140
prove the generator to bust take some

434
00:17:18,140 --> 00:17:20,959
quite delicate work but it's possible

435
00:17:20,959 --> 00:17:22,579
and so we're forced to conclude that

436
00:17:22,579 --> 00:17:24,650
unfortunately a PRN G's are also

437
00:17:24,650 --> 00:17:27,140
susceptible to factoring and even the

438
00:17:27,140 --> 00:17:28,730
really strong property of a bust nurse

439
00:17:28,730 --> 00:17:32,090
is no guarantee against ER but there is

440
00:17:32,090 --> 00:17:33,770
some glimmer of hope here because you'll

441
00:17:33,770 --> 00:17:35,929
notice that our backdoor PRNG

442
00:17:35,929 --> 00:17:38,450
has a very large state and the Big

443
00:17:38,450 --> 00:17:39,860
Brother's ability to go

444
00:17:39,860 --> 00:17:41,870
it's fundamentally limited by the side

445
00:17:41,870 --> 00:17:44,570
of the state so this raises the question

446
00:17:44,570 --> 00:17:47,210
of is this somehow inherent and it turns

447
00:17:47,210 --> 00:17:48,940
out that the answer is yes

448
00:17:48,940 --> 00:17:52,429
so in our impossibility result we prove

449
00:17:52,429 --> 00:17:54,830
that for restricted but still important

450
00:17:54,830 --> 00:17:57,140
class of distribution sample is that the

451
00:17:57,140 --> 00:18:00,049
limit depended on the state size to how

452
00:18:00,049 --> 00:18:02,029
much information about previous States

453
00:18:02,029 --> 00:18:05,120
even an Amana mounded adversary can

454
00:18:05,120 --> 00:18:07,610
recover so to give this equation some

455
00:18:07,610 --> 00:18:10,039
context we're imagining a scenario where

456
00:18:10,039 --> 00:18:12,799
we run the generator Big Brother's given

457
00:18:12,799 --> 00:18:15,620
some output R and we challenge him to

458
00:18:15,620 --> 00:18:18,110
recover not just one previous state this

459
00:18:18,110 --> 00:18:21,019
time but a vector of J States each of

460
00:18:21,019 --> 00:18:22,970
which has been separated by a high end

461
00:18:22,970 --> 00:18:24,889
to be refreshed so that's the left-hand

462
00:18:24,889 --> 00:18:27,200
side of this equation and Baku's mean

463
00:18:27,200 --> 00:18:29,330
entropy measures how difficult it is for

464
00:18:29,330 --> 00:18:31,130
an unbounded attacker to predict

465
00:18:31,130 --> 00:18:33,679
something if Big Brother who is found it

466
00:18:33,679 --> 00:18:35,659
is gonna stand a chance the left-hand

467
00:18:35,659 --> 00:18:37,960
side is going to need to be very small

468
00:18:37,960 --> 00:18:40,549
now making Big Brother's life more

469
00:18:40,549 --> 00:18:42,980
difficult on the right-hand side the

470
00:18:42,980 --> 00:18:45,590
epsilon term corresponds to the level of

471
00:18:45,590 --> 00:18:47,659
robustness security of the generator

472
00:18:47,659 --> 00:18:50,389
Pistor generated for bust epsilon is

473
00:18:50,389 --> 00:18:52,789
gonna be very small and the log of its

474
00:18:52,789 --> 00:18:54,769
reciprocal is going to be very large and

475
00:18:54,769 --> 00:18:56,210
even worse

476
00:18:56,210 --> 00:18:58,820
this large term scales linearly with J

477
00:18:58,820 --> 00:19:01,100
so the R or refreshers we ask Big

478
00:19:01,100 --> 00:19:03,559
Brother to try and bypass the larger and

479
00:19:03,559 --> 00:19:06,860
larger this term get now the only thing

480
00:19:06,860 --> 00:19:09,019
making the right-hand side smaller it's

481
00:19:09,019 --> 00:19:12,169
as minus n term where n is the state

482
00:19:12,169 --> 00:19:14,899
size of the generator but of course this

483
00:19:14,899 --> 00:19:17,539
is fixed in the beginning so as we ask

484
00:19:17,539 --> 00:19:18,860
Big Brother to go back further and

485
00:19:18,860 --> 00:19:21,289
further and Jake continues to grow at

486
00:19:21,289 --> 00:19:23,750
some point it's going to hit a wall with

487
00:19:23,750 --> 00:19:25,340
the right-hand side was simply too large

488
00:19:25,340 --> 00:19:27,350
and big brother hasn't got a chance of

489
00:19:27,350 --> 00:19:28,549
being able to recover the information

490
00:19:28,549 --> 00:19:33,049
that he wants so in conclusion the bad

491
00:19:33,049 --> 00:19:35,600
news is that despite their strong

492
00:19:35,600 --> 00:19:38,120
security properties both forward secure

493
00:19:38,120 --> 00:19:41,210
PRG s i'ma bust PRN G's of Emperor Bo

494
00:19:41,210 --> 00:19:42,710
susceptible to backdooring

495
00:19:42,710 --> 00:19:45,860
but the bad news is that reverse prnt

496
00:19:45,860 --> 00:19:48,669
through offers some inherent resistance

497
00:19:48,669 --> 00:19:51,710
so in the full version of the paper we

498
00:19:51,710 --> 00:19:53,470
have strengthened our impossibility

499
00:19:53,470 --> 00:19:56,230
results to get bounds on recovery or

500
00:19:56,230 --> 00:19:58,690
pass output values and prediction of

501
00:19:58,690 --> 00:20:01,960
future output values and avenues for

502
00:20:01,960 --> 00:20:03,039
further work would be to consider

503
00:20:03,039 --> 00:20:05,710
immunizes so ways in which we compose

504
00:20:05,710 --> 00:20:08,289
process the output of the PRNG TransAm

505
00:20:08,289 --> 00:20:11,230
inish Big Brother's advantage and it

506
00:20:11,230 --> 00:20:12,940
would be good to have tighter balance

507
00:20:12,940 --> 00:20:15,000
for our impossibility results and

508
00:20:15,000 --> 00:20:18,130
perhaps most importantly of all we know

509
00:20:18,130 --> 00:20:20,169
robustness isn't enough but can we find

510
00:20:20,169 --> 00:20:22,539
another property of PRN G's which

511
00:20:22,539 --> 00:20:25,990
excludes the presence of a back door is

512
00:20:25,990 --> 00:20:27,730
that the conclusion of my talk thank you

513
00:20:27,730 --> 00:20:29,760
very

