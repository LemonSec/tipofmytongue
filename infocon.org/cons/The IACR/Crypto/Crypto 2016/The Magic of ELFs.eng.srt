1
00:00:03,790 --> 00:00:07,029
hi thank you for the introduction I'm

2
00:00:07,029 --> 00:00:08,920
gonna start off with a bit of motivation

3
00:00:08,920 --> 00:00:12,250
for this work take the following

4
00:00:12,250 --> 00:00:14,110
encryption scheme this is a very

5
00:00:14,110 --> 00:00:16,360
standard way of converting a trapdoor

6
00:00:16,360 --> 00:00:18,040
permutation into a public key encryption

7
00:00:18,040 --> 00:00:21,399
scheme choose some randomness are apply

8
00:00:21,399 --> 00:00:23,320
the trapdoor or permutation to this to

9
00:00:23,320 --> 00:00:25,960
get the message header then you hash the

10
00:00:25,960 --> 00:00:28,599
message are using some hash function and

11
00:00:28,599 --> 00:00:30,759
use it as a one-time pad to encrypt the

12
00:00:30,759 --> 00:00:35,170
message m now suppose that I asked you

13
00:00:35,170 --> 00:00:37,900
to prove the CPA security of this scheme

14
00:00:37,900 --> 00:00:41,050
I want you to be able to handle many bit

15
00:00:41,050 --> 00:00:43,990
messages using a single randomness R and

16
00:00:43,990 --> 00:00:46,000
I want your proof to work for arbitrary

17
00:00:46,000 --> 00:00:48,880
trapdoor permutations the one thing that

18
00:00:48,880 --> 00:00:50,530
I do allow you to play with is the

19
00:00:50,530 --> 00:00:54,640
actual hash function H the first idea

20
00:00:54,640 --> 00:00:57,700
these days might be to try to use random

21
00:00:57,700 --> 00:01:00,010
Oracle's so the random Oracle model

22
00:01:00,010 --> 00:01:02,640
introduced by Blair in raga way

23
00:01:02,640 --> 00:01:06,009
basically we pretend that the hash

24
00:01:06,009 --> 00:01:08,710
function H is actually a truly random

25
00:01:08,710 --> 00:01:10,710
function that sits up in this guy and

26
00:01:10,710 --> 00:01:13,659
the only way that we can interact with

27
00:01:13,659 --> 00:01:15,580
this function is by querying it on

28
00:01:15,580 --> 00:01:17,770
inputs of our choice so I send an input

29
00:01:17,770 --> 00:01:21,040
I get the output it's we can easily

30
00:01:21,040 --> 00:01:22,900
rewrite the scheme as a random Oracle

31
00:01:22,900 --> 00:01:25,330
scheme that obeys this restriction and

32
00:01:25,330 --> 00:01:27,580
the random Oracle model says that the

33
00:01:27,580 --> 00:01:30,400
adversary is also required to interact

34
00:01:30,400 --> 00:01:34,390
with the random Oracle in this way all

35
00:01:34,390 --> 00:01:34,600
right

36
00:01:34,600 --> 00:01:36,549
random Oracle's are actually very

37
00:01:36,549 --> 00:01:39,159
interesting objects they are great

38
00:01:39,159 --> 00:01:41,229
they're great extractors even for

39
00:01:41,229 --> 00:01:43,510
computational unpredictability so for

40
00:01:43,510 --> 00:01:46,330
example if I have some unknown input and

41
00:01:46,330 --> 00:01:49,810
I gave you some leakage about it maybe a

42
00:01:49,810 --> 00:01:52,210
one-way function on the input and now I

43
00:01:52,210 --> 00:01:53,979
also have the input using the random

44
00:01:53,979 --> 00:01:55,780
Oracle the output of the random Oracle

45
00:01:55,780 --> 00:01:59,560
is pseudo-random it's also hard to find

46
00:01:59,560 --> 00:02:03,130
outputs of the random Oracle that have

47
00:02:03,130 --> 00:02:05,650
known trapdoors and this is useful for

48
00:02:05,650 --> 00:02:08,019
say using hash functions to generate

49
00:02:08,019 --> 00:02:09,729
common reference strings where everyone

50
00:02:09,729 --> 00:02:11,220
believes that no one knows

51
00:02:11,220 --> 00:02:15,300
or another easy application of random

52
00:02:15,300 --> 00:02:18,210
Oracle's is to convert selectively to

53
00:02:18,210 --> 00:02:20,340
adaptive security for primitives like

54
00:02:20,340 --> 00:02:22,460
signatures and identity based encryption

55
00:02:22,460 --> 00:02:24,570
the in the case of signature is

56
00:02:24,570 --> 00:02:25,890
basically I just hash the message before

57
00:02:25,890 --> 00:02:29,310
signing there many other uses of random

58
00:02:29,310 --> 00:02:33,510
Oracle's but this is just a couple all

59
00:02:33,510 --> 00:02:35,640
right now unfortunately random Oracle's

60
00:02:35,640 --> 00:02:37,410
don't actually exist there is no object

61
00:02:37,410 --> 00:02:40,530
in the sky that contains a truly random

62
00:02:40,530 --> 00:02:43,620
function that people can query instead

63
00:02:43,620 --> 00:02:46,050
everyone really does have the code for

64
00:02:46,050 --> 00:02:47,670
hash function they evaluate it for

65
00:02:47,670 --> 00:02:50,730
themselves and therefore a proof in the

66
00:02:50,730 --> 00:02:51,840
random Oracle model is really a

67
00:02:51,840 --> 00:02:53,730
heuristic argument for security in the

68
00:02:53,730 --> 00:02:54,270
real world

69
00:02:54,270 --> 00:02:56,610
and there's a sequence of works showing

70
00:02:56,610 --> 00:02:58,800
that this heuristic actually does fail

71
00:02:58,800 --> 00:03:02,910
in many settings alright so the next

72
00:03:02,910 --> 00:03:05,250
approach if we don't want a heuristic we

73
00:03:05,250 --> 00:03:07,140
actually want a security proof is to

74
00:03:07,140 --> 00:03:09,090
look at some standard model definitions

75
00:03:09,090 --> 00:03:13,410
for the hash function H we could start

76
00:03:13,410 --> 00:03:15,450
with the standard definitions these are

77
00:03:15,450 --> 00:03:17,550
things like one-wayness pseudo-random

78
00:03:17,550 --> 00:03:19,080
generator or collision resistant hash

79
00:03:19,080 --> 00:03:21,390
function and so forth these definitions

80
00:03:21,390 --> 00:03:23,340
have the advantage of being very simple

81
00:03:23,340 --> 00:03:25,110
and easy to state there's some of the

82
00:03:25,110 --> 00:03:27,180
weakest assumptions used in cryptography

83
00:03:27,180 --> 00:03:30,000
and we can base them on a variety of

84
00:03:30,000 --> 00:03:32,300
number theoretic assumptions

85
00:03:32,300 --> 00:03:34,020
unfortunately they have limited

86
00:03:34,020 --> 00:03:35,760
usefulness for actually instantiating

87
00:03:35,760 --> 00:03:37,290
random Oracle's and for the scheme I

88
00:03:37,290 --> 00:03:39,540
described even if you assume H is one of

89
00:03:39,540 --> 00:03:42,930
these sort of standard definitions we

90
00:03:42,930 --> 00:03:46,590
don't know how to prove security so then

91
00:03:46,590 --> 00:03:49,350
we might turn to more exotic definitions

92
00:03:49,350 --> 00:03:51,360
such as universal computational

93
00:03:51,360 --> 00:03:53,310
extractors or you see ease or some

94
00:03:53,310 --> 00:03:57,420
variants of very strong one-wayness and

95
00:03:57,420 --> 00:04:00,420
pseudo randomness and these definitions

96
00:04:00,420 --> 00:04:02,850
are actually very useful for

97
00:04:02,850 --> 00:04:04,500
instantiating some random Oracle

98
00:04:04,500 --> 00:04:06,630
constructions for example by picking the

99
00:04:06,630 --> 00:04:08,280
right one of these definitions we can

100
00:04:08,280 --> 00:04:09,780
prove security for the scheme on the

101
00:04:09,780 --> 00:04:13,500
first slide unfortunately though for

102
00:04:13,500 --> 00:04:15,480
most of these the only way we know how

103
00:04:15,480 --> 00:04:19,200
to instantiate the security property is

104
00:04:19,200 --> 00:04:20,548
just to make the assumption that the

105
00:04:20,548 --> 00:04:22,860
security property holds for a given hash

106
00:04:22,860 --> 00:04:24,930
function we don't know how to reduce

107
00:04:24,930 --> 00:04:27,060
most of these two standard cryptographic

108
00:04:27,060 --> 00:04:30,539
assumptions okay and why is this a

109
00:04:30,539 --> 00:04:33,060
problem for these exotic security

110
00:04:33,060 --> 00:04:36,389
definitions I'm going to highlight the

111
00:04:36,389 --> 00:04:39,210
problem with an example so consider this

112
00:04:39,210 --> 00:04:41,280
the following notion of a strong

113
00:04:41,280 --> 00:04:43,500
pseudo-random generator that strengthens

114
00:04:43,500 --> 00:04:46,039
some other strong one-wayness

115
00:04:46,039 --> 00:04:49,560
definitions in the literature more or

116
00:04:49,560 --> 00:04:53,759
less the requirement is that I the

117
00:04:53,759 --> 00:04:55,949
function is a pseudo-random generator

118
00:04:55,949 --> 00:04:58,289
even if I give you arbitrary leakage of

119
00:04:58,289 --> 00:05:00,840
the seed the only condition on the

120
00:05:00,840 --> 00:05:02,610
leakage that I asked for is that given

121
00:05:02,610 --> 00:05:04,380
the leakage you can't actually compute

122
00:05:04,380 --> 00:05:06,570
the seed so as long as the seed remains

123
00:05:06,570 --> 00:05:08,580
computationally unpredictable given the

124
00:05:08,580 --> 00:05:10,440
leakage the output of the hash function

125
00:05:10,440 --> 00:05:15,150
is pseudo-random now how do we get in

126
00:05:15,150 --> 00:05:16,620
confidence in this assumption suppose I

127
00:05:16,620 --> 00:05:20,160
want to assume that sha-256 is a strong

128
00:05:20,160 --> 00:05:23,910
PRG well I might pose some challenges I

129
00:05:23,910 --> 00:05:28,110
might I'm going the web post a an output

130
00:05:28,110 --> 00:05:30,870
along with some leakage and say if you

131
00:05:30,870 --> 00:05:32,430
can solve this I'll give you a thousand

132
00:05:32,430 --> 00:05:35,639
bucks now unfortunately this might give

133
00:05:35,639 --> 00:05:37,740
me confidence after you know several

134
00:05:37,740 --> 00:05:40,680
months no one breaks this that the func

135
00:05:40,680 --> 00:05:42,570
the hash function is a strong pure G for

136
00:05:42,570 --> 00:05:45,240
that particular leakage I gave you but

137
00:05:45,240 --> 00:05:47,639
what about other leakages now I might

138
00:05:47,639 --> 00:05:49,380
have if I have want another leakage I

139
00:05:49,380 --> 00:05:50,880
have to post another challenge for that

140
00:05:50,880 --> 00:05:54,150
leakage function and so forth and it's

141
00:05:54,150 --> 00:05:56,789
not clear that this approach will work

142
00:05:56,789 --> 00:05:59,789
for general arbitrary leakages because

143
00:05:59,789 --> 00:06:03,419
there's infinitely many possible leakage

144
00:06:03,419 --> 00:06:06,630
functions and it might even be that some

145
00:06:06,630 --> 00:06:08,610
of for some particular really

146
00:06:08,610 --> 00:06:10,590
pathological leakage functions maybe

147
00:06:10,590 --> 00:06:12,449
those involving off e skating programs

148
00:06:12,449 --> 00:06:14,880
and stuff like that that this definition

149
00:06:14,880 --> 00:06:19,919
is actually unattainable alright and

150
00:06:19,919 --> 00:06:22,259
this is not just limited to this issue

151
00:06:22,259 --> 00:06:24,000
is not just limited to strong pair G's

152
00:06:24,000 --> 00:06:27,210
it's really an issue inherent to a lot

153
00:06:27,210 --> 00:06:29,070
of these exotic security definitions

154
00:06:29,070 --> 00:06:30,930
that take the form of assumption

155
00:06:30,930 --> 00:06:33,419
families really this definition is a

156
00:06:33,419 --> 00:06:35,820
family assumptions one assumption for

157
00:06:35,820 --> 00:06:37,050
every possible leakage

158
00:06:37,050 --> 00:06:41,190
function okay now these these

159
00:06:41,190 --> 00:06:43,500
definitions these definition families

160
00:06:43,500 --> 00:06:46,080
are actually very useful as security

161
00:06:46,080 --> 00:06:48,720
properties the literature defining these

162
00:06:48,720 --> 00:06:50,849
the whole point was to show how useful

163
00:06:50,849 --> 00:06:54,030
they are but they are the point I want

164
00:06:54,030 --> 00:06:54,810
to make is that they're highly

165
00:06:54,810 --> 00:06:56,759
undesirable as starting points as

166
00:06:56,759 --> 00:06:58,979
assumptions to start with for achieving

167
00:06:58,979 --> 00:07:02,490
tasks the ideal scenario is instead to

168
00:07:02,490 --> 00:07:05,460
use a single simple well studied

169
00:07:05,460 --> 00:07:07,470
assumption one that I can post

170
00:07:07,470 --> 00:07:09,060
challenges on the web gain confidence

171
00:07:09,060 --> 00:07:11,789
that it's secure because no one can

172
00:07:11,789 --> 00:07:14,190
break it and take this assumption and

173
00:07:14,190 --> 00:07:18,120
use that to derive these strong security

174
00:07:18,120 --> 00:07:20,699
properties and that's where this work

175
00:07:20,699 --> 00:07:22,560
comes in using a new tool called

176
00:07:22,560 --> 00:07:25,830
extremely lossy functions or else we

177
00:07:25,830 --> 00:07:28,259
show how to take a single simple

178
00:07:28,259 --> 00:07:30,650
assumption and derive interesting

179
00:07:30,650 --> 00:07:32,699
consequences for instantiating random

180
00:07:32,699 --> 00:07:36,030
Oracle's all right so what does a

181
00:07:36,030 --> 00:07:39,210
standard lossy function a standard lossy

182
00:07:39,210 --> 00:07:41,310
function is a function that comes in one

183
00:07:41,310 --> 00:07:43,080
of two flavors there is an injective

184
00:07:43,080 --> 00:07:45,360
mode where the function is actually

185
00:07:45,360 --> 00:07:47,159
one-to-one there are no collisions and

186
00:07:47,159 --> 00:07:50,219
there's a lossy mode where the image

187
00:07:50,219 --> 00:07:52,259
size is much much smaller than the

188
00:07:52,259 --> 00:07:54,029
domain size so there are many many

189
00:07:54,029 --> 00:07:56,400
collisions and it's called bossy because

190
00:07:56,400 --> 00:07:58,560
the output of the function SS totally

191
00:07:58,560 --> 00:08:02,909
loses information about the input the

192
00:08:02,909 --> 00:08:04,860
security requirements and ERDA lossy

193
00:08:04,860 --> 00:08:07,110
functions is that the injective mode in

194
00:08:07,110 --> 00:08:09,360
the lossy mode are indistinguishable to

195
00:08:09,360 --> 00:08:13,979
any efficient adversary just a couple

196
00:08:13,979 --> 00:08:16,919
notes on standard lossy functions even

197
00:08:16,919 --> 00:08:19,289
though the functions are very in the

198
00:08:19,289 --> 00:08:21,029
lossy mode are very lossy and have a

199
00:08:21,029 --> 00:08:22,740
small image size it's still typically

200
00:08:22,740 --> 00:08:24,629
exponential just a much smaller

201
00:08:24,629 --> 00:08:27,139
exponential size in the input and

202
00:08:27,139 --> 00:08:29,610
generally standard lossy functions also

203
00:08:29,610 --> 00:08:31,919
include trapdoors which are required for

204
00:08:31,919 --> 00:08:34,828
many of the applications for this work

205
00:08:34,828 --> 00:08:36,208
though we actually don't need any of the

206
00:08:36,208 --> 00:08:41,039
trapdoors so an extremely lossy function

207
00:08:41,039 --> 00:08:43,880
is a standard lossy function on steroids

208
00:08:43,880 --> 00:08:46,440
basically there's an injective mode like

209
00:08:46,440 --> 00:08:48,250
before that I'll represent with the

210
00:08:48,250 --> 00:08:51,850
human-sized elf and there is a lossy

211
00:08:51,850 --> 00:08:53,770
mode that are represented with a little

212
00:08:53,770 --> 00:08:56,440
doggie size elf that is so incredibly

213
00:08:56,440 --> 00:08:58,930
law see that the image size is actually

214
00:08:58,930 --> 00:09:01,330
a polynomial the total number of image

215
00:09:01,330 --> 00:09:04,690
points is just some polynomial okay now

216
00:09:04,690 --> 00:09:07,000
as I've described this this is not an

217
00:09:07,000 --> 00:09:08,410
attainable security notion I can't

218
00:09:08,410 --> 00:09:10,240
possibly have computational and

219
00:09:10,240 --> 00:09:12,130
distinguished ability between these two

220
00:09:12,130 --> 00:09:14,980
modes because there is a sort of trivial

221
00:09:14,980 --> 00:09:18,550
attack basically I can just try to

222
00:09:18,550 --> 00:09:20,080
evaluate the function I'm given on a

223
00:09:20,080 --> 00:09:22,030
bunch of inputs looking for a collision

224
00:09:22,030 --> 00:09:24,160
and this attack once and time roughly

225
00:09:24,160 --> 00:09:25,990
equal to the size of the image in the

226
00:09:25,990 --> 00:09:30,250
lossy mode and since our image size is

227
00:09:30,250 --> 00:09:33,190
polynomial we we can't possibly get

228
00:09:33,190 --> 00:09:37,390
security against this adversary okay so

229
00:09:37,390 --> 00:09:38,890
instead what we do instead of having

230
00:09:38,890 --> 00:09:42,190
just one lossy mode we produce there

231
00:09:42,190 --> 00:09:43,840
there are a bunch of lossy modes of

232
00:09:43,840 --> 00:09:47,320
varying image sizes and the security

233
00:09:47,320 --> 00:09:51,820
property is that for any adversary I can

234
00:09:51,820 --> 00:09:54,550
choose a lossy mode that fools that

235
00:09:54,550 --> 00:09:59,170
adversary so I don't just have again

236
00:09:59,170 --> 00:10:00,400
because every lossy mode has a

237
00:10:00,400 --> 00:10:03,010
polynomial size I can't have one lossy

238
00:10:03,010 --> 00:10:06,160
mode full all possible adversaries but I

239
00:10:06,160 --> 00:10:07,780
can reverse the order of quantifiers and

240
00:10:07,780 --> 00:10:09,430
say that for any adversary

241
00:10:09,430 --> 00:10:11,770
I can choose a lossy mode that fools

242
00:10:11,770 --> 00:10:17,470
that adversary okay so how do we

243
00:10:17,470 --> 00:10:21,460
construct these objects the first step

244
00:10:21,460 --> 00:10:23,860
is to build something that I'll call a

245
00:10:23,860 --> 00:10:26,589
bounded adversarial and this is one

246
00:10:26,589 --> 00:10:28,180
where we go back to actually just having

247
00:10:28,180 --> 00:10:31,660
a single lossy mode and as we said

248
00:10:31,660 --> 00:10:33,040
before we can't possibly have secured

249
00:10:33,040 --> 00:10:34,960
against all adversaries but instead I'll

250
00:10:34,960 --> 00:10:37,750
insist upon having security against a

251
00:10:37,750 --> 00:10:41,920
priority bounded adversaries all right

252
00:10:41,920 --> 00:10:44,890
and the details of this don't matter for

253
00:10:44,890 --> 00:10:46,510
the purposes of this talk but basically

254
00:10:46,510 --> 00:10:49,839
if you take deep the DDH based velocity

255
00:10:49,839 --> 00:10:52,210
functions in the literature and shrink

256
00:10:52,210 --> 00:10:53,950
the group size down to be a polynomial

257
00:10:53,950 --> 00:10:57,880
you get a lossy mode that is that has a

258
00:10:57,880 --> 00:11:00,940
polynomial image size and by making the

259
00:11:00,940 --> 00:11:01,880
assumption

260
00:11:01,880 --> 00:11:04,490
the DDH problem is actually actually

261
00:11:04,490 --> 00:11:07,250
takes exponential time to solve we get

262
00:11:07,250 --> 00:11:08,720
security against bounded time

263
00:11:08,720 --> 00:11:12,710
adversaries exactly as we needed okay so

264
00:11:12,710 --> 00:11:14,630
I need to make this assumption this

265
00:11:14,630 --> 00:11:17,090
exponential DDH assumption that DD H

266
00:11:17,090 --> 00:11:19,160
takes exponential time to solve it's

267
00:11:19,160 --> 00:11:20,990
definitely a non-standard assumption in

268
00:11:20,990 --> 00:11:23,240
cryptography we usually like the

269
00:11:23,240 --> 00:11:25,310
polynomial hardness assumptions or maybe

270
00:11:25,310 --> 00:11:29,270
sub-exponential hardness assumptions but

271
00:11:29,270 --> 00:11:31,010
I want to argue that this assumption is

272
00:11:31,010 --> 00:11:32,990
still very reasonable it's a it's a nice

273
00:11:32,990 --> 00:11:35,330
assumption it fits within the complexity

274
00:11:35,330 --> 00:11:37,070
threat of the complexity assumption

275
00:11:37,070 --> 00:11:38,990
framework of goldwasser and kalaiy and

276
00:11:38,990 --> 00:11:42,710
it also appears to be true on elliptic

277
00:11:42,710 --> 00:11:44,330
curves for example the best-known

278
00:11:44,330 --> 00:11:47,180
attacks take exponential time and in

279
00:11:47,180 --> 00:11:50,270
fact even in practice the parameters for

280
00:11:50,270 --> 00:11:54,890
elliptic curve schemes are set assuming

281
00:11:54,890 --> 00:11:57,110
that that takes exponential time to

282
00:11:57,110 --> 00:12:01,520
solve so exponential DDH is false we

283
00:12:01,520 --> 00:12:02,780
actually have much bigger pumps to worry

284
00:12:02,780 --> 00:12:04,190
about because a lot of the crypto on the

285
00:12:04,190 --> 00:12:06,380
web would be insecure at the current key

286
00:12:06,380 --> 00:12:10,910
sizes all right from bounded else we can

287
00:12:10,910 --> 00:12:13,100
get to unbounded else basically we just

288
00:12:13,100 --> 00:12:15,410
iterate at a bunch of security levels so

289
00:12:15,410 --> 00:12:17,630
a just string them together a bunch of

290
00:12:17,630 --> 00:12:20,270
bounded adversary elsewhere the lossy

291
00:12:20,270 --> 00:12:22,550
image size are very are growing

292
00:12:22,550 --> 00:12:27,200
polynomials and when I want to invoke

293
00:12:27,200 --> 00:12:29,420
glossiness against a particular T time

294
00:12:29,420 --> 00:12:30,230
adversary

295
00:12:30,230 --> 00:12:32,660
I just invoke the loss enos at the

296
00:12:32,660 --> 00:12:36,170
ifelse where i is large enough to fool

297
00:12:36,170 --> 00:12:37,970
that adversary but still have a

298
00:12:37,970 --> 00:12:43,130
polynomial image size as I've drawn this

299
00:12:43,130 --> 00:12:44,840
picture actually don't doesn't quite

300
00:12:44,840 --> 00:12:46,640
work because the output size might grow

301
00:12:46,640 --> 00:12:49,430
too fast but using pairwise independence

302
00:12:49,430 --> 00:12:52,340
hashing between the iterations we can

303
00:12:52,340 --> 00:12:57,380
keep the output size small okay so let's

304
00:12:57,380 --> 00:13:00,310
move on to how do we actually use

305
00:13:00,310 --> 00:13:04,280
to accomplish interesting things so

306
00:13:04,280 --> 00:13:06,650
using else I actually can give you a

307
00:13:06,650 --> 00:13:09,650
construction of a PRG satisfying the

308
00:13:09,650 --> 00:13:10,650
strong notion

309
00:13:10,650 --> 00:13:14,030
leakage resilience that I defined before

310
00:13:14,030 --> 00:13:16,590
basically what's going on here is the

311
00:13:16,590 --> 00:13:20,520
from the input X we derive a bunch of

312
00:13:20,520 --> 00:13:22,260
different gold right leaven hardcore

313
00:13:22,260 --> 00:13:25,890
bits all independent now these bits are

314
00:13:25,890 --> 00:13:27,630
hardcore if I give you just one of them

315
00:13:27,630 --> 00:13:29,250
they're not hardcore anymore if I give

316
00:13:29,250 --> 00:13:31,500
you all of them so instead what I do is

317
00:13:31,500 --> 00:13:33,150
I feed the hardcore bits into this

318
00:13:33,150 --> 00:13:35,520
alternating sequence of else and

319
00:13:35,520 --> 00:13:39,690
pairwise independent hashing now I'm

320
00:13:39,690 --> 00:13:41,280
going to prove that this actually

321
00:13:41,280 --> 00:13:44,310
satisfies the definition of strong

322
00:13:44,310 --> 00:13:48,750
pseudo randomness we call the set up we

323
00:13:48,750 --> 00:13:52,950
have X some leakage about X X gets fed

324
00:13:52,950 --> 00:13:54,060
through the hash function to produce

325
00:13:54,060 --> 00:13:57,570
some output Y and the leakage and Y are

326
00:13:57,570 --> 00:14:00,750
given to the adversary the guarantee

327
00:14:00,750 --> 00:14:04,740
that I'm given is that X is

328
00:14:04,740 --> 00:14:06,690
computationally unpredictable given the

329
00:14:06,690 --> 00:14:10,590
linkage and I want to prove to you that

330
00:14:10,590 --> 00:14:15,300
Y is indistinguishable from random to

331
00:14:15,300 --> 00:14:20,430
this adversary I'm gonna do this using a

332
00:14:20,430 --> 00:14:24,240
handful of hybrids in the first hybrid

333
00:14:24,240 --> 00:14:26,820
I'm going to invoke elf magic on the

334
00:14:26,820 --> 00:14:29,550
last elf in the sequence and replace it

335
00:14:29,550 --> 00:14:32,460
with a lossy mode elf as we've discussed

336
00:14:32,460 --> 00:14:34,500
before this necessarily requires knowing

337
00:14:34,500 --> 00:14:37,230
the adversaries running time but using

338
00:14:37,230 --> 00:14:39,780
the secure the guarantee of the elf I

339
00:14:39,780 --> 00:14:44,820
can do this the second step is to invoke

340
00:14:44,820 --> 00:14:48,450
gold right Clubman to simplify the

341
00:14:48,450 --> 00:14:50,220
picture I'm going to take this part of

342
00:14:50,220 --> 00:14:56,130
the construction and just call it L so L

343
00:14:56,130 --> 00:14:58,140
just takes as input X produces some

344
00:14:58,140 --> 00:14:58,710
output

345
00:14:58,710 --> 00:15:00,930
the only property I care about of elf

346
00:15:00,930 --> 00:15:04,560
for now is that the last part of L is to

347
00:15:04,560 --> 00:15:07,320
apply a lossy mode elf which means that

348
00:15:07,320 --> 00:15:11,820
L has a polynomial image size and

349
00:15:11,820 --> 00:15:14,460
because L has a polynomial image size

350
00:15:14,460 --> 00:15:17,190
it's very easy to prove this following

351
00:15:17,190 --> 00:15:19,650
lemma that if I give you the original

352
00:15:19,650 --> 00:15:22,230
leakage and i additionally give you the

353
00:15:22,230 --> 00:15:23,200
leakage that's

354
00:15:23,200 --> 00:15:26,130
the output of L X still remains

355
00:15:26,130 --> 00:15:28,990
computationally unpredictable and this

356
00:15:28,990 --> 00:15:30,700
falls from a simple argument just using

357
00:15:30,700 --> 00:15:32,410
the fact that L has a polynomial image

358
00:15:32,410 --> 00:15:36,850
size so what this means is that even now

359
00:15:36,850 --> 00:15:39,100
that I give you this additional leakage

360
00:15:39,100 --> 00:15:42,010
I can apply gold right leaven on this

361
00:15:42,010 --> 00:15:44,470
last hard core bit and replace it with

362
00:15:44,470 --> 00:15:48,970
truly random okay so let's open things

363
00:15:48,970 --> 00:15:51,670
up again the next step is to undo the

364
00:15:51,670 --> 00:15:54,610
elf magic replace the little lossy off

365
00:15:54,610 --> 00:15:57,760
with an injective elf and now we see

366
00:15:57,760 --> 00:15:59,770
that I actually have the exact same

367
00:15:59,770 --> 00:16:02,500
picture I showed you before except that

368
00:16:02,500 --> 00:16:04,300
I replaced the last bit with true

369
00:16:04,300 --> 00:16:08,470
randomness so I now what I do is I just

370
00:16:08,470 --> 00:16:10,930
repeat this I move down the chain take

371
00:16:10,930 --> 00:16:13,660
the second-class elf replace it with

372
00:16:13,660 --> 00:16:17,020
lossy because it's losting now I can

373
00:16:17,020 --> 00:16:18,520
apply gold by clevon to the second-class

374
00:16:18,520 --> 00:16:21,100
bit replace it with true randomness undo

375
00:16:21,100 --> 00:16:23,380
the elf magic and now I'm back where I

376
00:16:23,380 --> 00:16:25,030
started except the last two bits are

377
00:16:25,030 --> 00:16:29,590
truly random and I just repeat going

378
00:16:29,590 --> 00:16:33,640
down the chain alright so at the end of

379
00:16:33,640 --> 00:16:36,790
the day I have now all of the gold right

380
00:16:36,790 --> 00:16:38,170
clevon bits all right place with truly

381
00:16:38,170 --> 00:16:40,540
random and what this means is that the

382
00:16:40,540 --> 00:16:42,580
wine the atmosphere he sees is actually

383
00:16:42,580 --> 00:16:46,270
completely independent of the seed s and

384
00:16:46,270 --> 00:16:49,000
moreover it is straightforward to show

385
00:16:49,000 --> 00:16:51,160
that Y is actually statistically close

386
00:16:51,160 --> 00:16:54,280
to random if I if when all these bits

387
00:16:54,280 --> 00:16:57,490
are random so putting things together

388
00:16:57,490 --> 00:16:59,380
what I have is that for any

389
00:16:59,380 --> 00:17:01,290
computationally unpredictable source

390
00:17:01,290 --> 00:17:05,220
that the output of the seed is

391
00:17:05,220 --> 00:17:09,579
pseudo-random as desired and also as is

392
00:17:09,579 --> 00:17:11,260
useful for certain applications this

393
00:17:11,260 --> 00:17:14,699
function age we can show to be injective

394
00:17:14,699 --> 00:17:16,959
all right so what are the applications

395
00:17:16,959 --> 00:17:19,060
so here are just a few immediate

396
00:17:19,060 --> 00:17:22,270
applications one is anna-san shishun of

397
00:17:22,270 --> 00:17:24,819
the injective one-way fung

398
00:17:24,819 --> 00:17:26,530
of an injective 1 y function satisfying

399
00:17:26,530 --> 00:17:28,260
the definition of the tan skin penneth

400
00:17:28,260 --> 00:17:31,990
the previously basically we had to make

401
00:17:31,990 --> 00:17:33,850
these annoying assumption family

402
00:17:33,850 --> 00:17:36,190
to get any sort of injectable annoy

403
00:17:36,190 --> 00:17:41,740
function we also get a very simple point

404
00:17:41,740 --> 00:17:44,320
function hockey skater secure against

405
00:17:44,320 --> 00:17:48,039
auxilary input and again this more or

406
00:17:48,039 --> 00:17:49,720
less just required the injective one-way

407
00:17:49,720 --> 00:17:52,240
function from before so had the previous

408
00:17:52,240 --> 00:17:55,650
constructions had the same limitations

409
00:17:55,980 --> 00:17:59,289
one way of looking at the strong pair G

410
00:17:59,289 --> 00:18:01,630
is that what it actually is it's a way

411
00:18:01,630 --> 00:18:04,360
to extract call normally many hard core

412
00:18:04,360 --> 00:18:05,950
bits from any computationally

413
00:18:05,950 --> 00:18:08,860
unpredictable source this was previously

414
00:18:08,860 --> 00:18:11,049
known from universal computational

415
00:18:11,049 --> 00:18:12,850
extractors though this really can't

416
00:18:12,850 --> 00:18:14,679
Universal computational extractors is it

417
00:18:14,679 --> 00:18:16,390
more of a generalization of this

418
00:18:16,390 --> 00:18:20,409
definition or we had constructions from

419
00:18:20,409 --> 00:18:23,140
various very strong forms of occupation

420
00:18:23,140 --> 00:18:25,659
and and these have several limitations

421
00:18:25,659 --> 00:18:28,240
including being again annoying

422
00:18:28,240 --> 00:18:30,309
assumption families they only worked for

423
00:18:30,309 --> 00:18:32,169
one-way functions and they're incredibly

424
00:18:32,169 --> 00:18:37,559
inefficient and then lastly the CPA

425
00:18:37,559 --> 00:18:39,730
scheme that I gave you in the first

426
00:18:39,730 --> 00:18:40,179
slide

427
00:18:40,179 --> 00:18:42,070
actually is secured using this hash

428
00:18:42,070 --> 00:18:43,929
function H and this is really just a

429
00:18:43,929 --> 00:18:46,750
special case of the hard core bid

430
00:18:46,750 --> 00:18:49,480
extraction in the case of inductive one

431
00:18:49,480 --> 00:18:52,059
oi functions see that H of R is just

432
00:18:52,059 --> 00:18:53,620
extracting hard core bits from the

433
00:18:53,620 --> 00:18:58,690
trapdoor permutation ok so some other

434
00:18:58,690 --> 00:19:03,100
results that we get from else so this is

435
00:19:03,100 --> 00:19:05,830
selected to adaptive security conversion

436
00:19:05,830 --> 00:19:06,970
using random Oracle's we can actually

437
00:19:06,970 --> 00:19:10,179
just use an elf instead and the proof is

438
00:19:10,179 --> 00:19:13,960
very simple so the construction is to

439
00:19:13,960 --> 00:19:16,030
just hash the message that you're going

440
00:19:16,030 --> 00:19:17,679
to sign using the elf and then sign with

441
00:19:17,679 --> 00:19:19,750
whatever selective least secure

442
00:19:19,750 --> 00:19:21,789
signature scheme you had and the

443
00:19:21,789 --> 00:19:24,039
security proof first I switched to a

444
00:19:24,039 --> 00:19:28,539
lossy mode elf this is indistinguishable

445
00:19:28,539 --> 00:19:30,580
to the adversary and now because the

446
00:19:30,580 --> 00:19:32,890
lossy mode elf has only a polynomial

447
00:19:32,890 --> 00:19:36,640
image size I can guess the output of the

448
00:19:36,640 --> 00:19:38,919
hash that the value that actually gets

449
00:19:38,919 --> 00:19:40,750
signed by the selectively secure

450
00:19:40,750 --> 00:19:42,520
signature scheme incurring only a

451
00:19:42,520 --> 00:19:43,470
polynomial loss

452
00:19:43,470 --> 00:19:49,429
security all right we also give a

453
00:19:49,429 --> 00:19:52,350
definition of output intractability for

454
00:19:52,350 --> 00:19:54,539
hash functions and this captures the

455
00:19:54,539 --> 00:19:56,070
case where I want to use the hash

456
00:19:56,070 --> 00:19:57,450
function to generate common reference

457
00:19:57,450 --> 00:19:59,820
strings and ensure that no one knows a

458
00:19:59,820 --> 00:20:02,190
trapdoor for the output and the

459
00:20:02,190 --> 00:20:03,870
construction is extremely simple it's

460
00:20:03,870 --> 00:20:05,640
just composing an elf with the pairwise

461
00:20:05,640 --> 00:20:10,080
independent hash function all right so

462
00:20:10,080 --> 00:20:14,159
to conclude in this work we show that

463
00:20:14,159 --> 00:20:17,130
the exponential hardness of DDH is

464
00:20:17,130 --> 00:20:18,840
useful for constructing this object

465
00:20:18,840 --> 00:20:21,840
called an elf and also useful for a

466
00:20:21,840 --> 00:20:23,520
variety of interesting applications

467
00:20:23,520 --> 00:20:26,539
involving instantiating random Oracle's

468
00:20:26,539 --> 00:20:28,770
there are a handful of open questions

469
00:20:28,770 --> 00:20:31,350
that we leave sort of the biggest in my

470
00:20:31,350 --> 00:20:33,210
mind is can we build out some other

471
00:20:33,210 --> 00:20:34,919
assumptions right now we need the

472
00:20:34,919 --> 00:20:37,740
exponential hardness of DDH could we

473
00:20:37,740 --> 00:20:40,559
perhaps base it on the exponential

474
00:20:40,559 --> 00:20:43,159
hardness of learning with errors

475
00:20:43,159 --> 00:20:45,090
unfortunately it doesn't seem to be the

476
00:20:45,090 --> 00:20:48,510
case the current Bosse functions based

477
00:20:48,510 --> 00:20:50,159
on learning with errors just don't seem

478
00:20:50,159 --> 00:20:53,000
quite lossy enough for our purposes

479
00:20:53,000 --> 00:20:56,190
related question is can we get post

480
00:20:56,190 --> 00:20:58,260
quantum elves it's known that quantum

481
00:20:58,260 --> 00:21:00,659
computers can break DDH so can we get an

482
00:21:00,659 --> 00:21:03,030
elf that is secure against quantum

483
00:21:03,030 --> 00:21:04,799
adversaries this is very related if we

484
00:21:04,799 --> 00:21:06,120
could do it from lwe that would be

485
00:21:06,120 --> 00:21:07,169
fantastic

486
00:21:07,169 --> 00:21:09,210
and then lastly can we get more

487
00:21:09,210 --> 00:21:11,669
applications of elfs more interesting

488
00:21:11,669 --> 00:21:13,980
applications all right that's all I have

489
00:21:13,980 --> 00:21:16,909
for you thank you very much

