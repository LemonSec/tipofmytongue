1
00:00:04,259 --> 00:00:06,520
hello everybody my name is Sebastian

2
00:00:06,520 --> 00:00:07,930
rubella and i'll be talking about

3
00:00:07,930 --> 00:00:10,330
catalysis of the flip panel of stream

4
00:00:10,330 --> 00:00:12,580
ciphers that we did together with the

5
00:00:12,580 --> 00:00:16,119
agenda and more and y'know hotela so

6
00:00:16,119 --> 00:00:18,640
first I'm going to introduce the context

7
00:00:18,640 --> 00:00:21,610
which is symmetric ciphers for fully

8
00:00:21,610 --> 00:00:24,369
homomorphic encryption I'm going to

9
00:00:24,369 --> 00:00:26,380
introduce the cipher and I'm going to

10
00:00:26,380 --> 00:00:28,180
talk about our attack the possible

11
00:00:28,180 --> 00:00:29,470
improvements we have and the

12
00:00:29,470 --> 00:00:33,309
experimental kitchen with it so first

13
00:00:33,309 --> 00:00:35,469
let's go very fast to the basics of

14
00:00:35,469 --> 00:00:38,470
fully homomorphic encryption so the idea

15
00:00:38,470 --> 00:00:40,630
is you don't have much computational

16
00:00:40,630 --> 00:00:42,360
power so you want to delegate your

17
00:00:42,360 --> 00:00:45,160
computations to the cloud so you are

18
00:00:45,160 --> 00:00:47,440
going to send your data to the cloud but

19
00:00:47,440 --> 00:00:48,940
you don't want the cloud to get any

20
00:00:48,940 --> 00:00:51,340
information about your data so you are

21
00:00:51,340 --> 00:00:54,340
going to encrypt it using a homomorphic

22
00:00:54,340 --> 00:00:57,190
encryption algorithm and the cloud will

23
00:00:57,190 --> 00:00:59,920
perform its operations mortally and then

24
00:00:59,920 --> 00:01:01,899
send the data but to you you decrypt it

25
00:01:01,899 --> 00:01:04,000
and you get the message modified in the

26
00:01:04,000 --> 00:01:07,450
right manner there's one problem here

27
00:01:07,450 --> 00:01:09,490
which is that the morphic encryption

28
00:01:09,490 --> 00:01:11,890
algorithms we have output huge

29
00:01:11,890 --> 00:01:15,159
ciphertext so if you have many messages

30
00:01:15,159 --> 00:01:17,770
or or big messages it's not going to be

31
00:01:17,770 --> 00:01:22,510
very practical so one way to to go

32
00:01:22,510 --> 00:01:24,790
around this is to add a symmetric

33
00:01:24,790 --> 00:01:28,750
encryption on top of it what you what

34
00:01:28,750 --> 00:01:30,190
you encrypt using the homomorphic

35
00:01:30,190 --> 00:01:32,229
encryption algorithm is the key to the

36
00:01:32,229 --> 00:01:34,900
symmetric encryption that key is

37
00:01:34,900 --> 00:01:38,530
relatively small and it's a fixed stars

38
00:01:38,530 --> 00:01:40,570
and you send it only once so that's not

39
00:01:40,570 --> 00:01:44,049
too costly and in parallel to this you

40
00:01:44,049 --> 00:01:46,000
encrypt your message using the symmetric

41
00:01:46,000 --> 00:01:48,400
encryption algorithm you send all this

42
00:01:48,400 --> 00:01:50,320
to the cloud and the cloud on its side

43
00:01:50,320 --> 00:01:53,200
will be able to perform homomorphic lee

44
00:01:53,200 --> 00:01:55,570
the inverse evaluation of the symmetric

45
00:01:55,570 --> 00:01:57,460
encryption algorithm and get back the

46
00:01:57,460 --> 00:01:59,710
ciphertext like there was no symmetric

47
00:01:59,710 --> 00:02:02,460
encryption in the process whatsoever

48
00:02:02,460 --> 00:02:04,750
there's still a problem here which is

49
00:02:04,750 --> 00:02:06,939
that the homo fake encryption algorithms

50
00:02:06,939 --> 00:02:09,939
we have used a pervert called noise and

51
00:02:09,939 --> 00:02:13,150
if this noise grows too big it becomes

52
00:02:13,150 --> 00:02:14,680
very costly to handle

53
00:02:14,680 --> 00:02:18,010
so we have to limit the amount of noise

54
00:02:18,010 --> 00:02:20,920
and noise grows mostly for nonlinear

55
00:02:20,920 --> 00:02:23,409
operation is done homomorphic Lee so for

56
00:02:23,409 --> 00:02:26,379
instance multiplications so for all

57
00:02:26,379 --> 00:02:28,959
functions that are applied automatically

58
00:02:28,959 --> 00:02:30,489
you want to limit the number of

59
00:02:30,489 --> 00:02:32,230
multiplications here in the function

60
00:02:32,230 --> 00:02:33,879
that is applied what more fectly is the

61
00:02:33,879 --> 00:02:35,859
inverse evaluation of the symmetric

62
00:02:35,859 --> 00:02:38,170
encryption algorithm to want so you want

63
00:02:38,170 --> 00:02:39,909
to limit the number of multiplications

64
00:02:39,909 --> 00:02:44,370
in this there are very few ciphers that

65
00:02:44,370 --> 00:02:47,079
fit these kind of requirements one of

66
00:02:47,079 --> 00:02:49,389
them is a block cipher called low NC

67
00:02:49,389 --> 00:02:53,730
it's an spm with the specificity that

68
00:02:53,730 --> 00:02:57,340
the substation substitution layer is not

69
00:02:57,340 --> 00:02:59,469
applied on the entire word at every

70
00:02:59,469 --> 00:03:02,829
round to avoid having too many

71
00:03:02,829 --> 00:03:05,919
multiplications the advantage of block

72
00:03:05,919 --> 00:03:08,319
ciphers in this context is that each

73
00:03:08,319 --> 00:03:10,599
bits of the ciphertext depends on the

74
00:03:10,599 --> 00:03:12,819
same number of notifications but the

75
00:03:12,819 --> 00:03:17,950
number of vacations is quite big there

76
00:03:17,950 --> 00:03:19,599
are also stream ciphers Trivium and

77
00:03:19,599 --> 00:03:22,120
freedom with the advantage that in

78
00:03:22,120 --> 00:03:24,519
stream ciphers the first bits of the key

79
00:03:24,519 --> 00:03:25,989
stream so the first bits of the

80
00:03:25,989 --> 00:03:28,209
psychotics depend on very few

81
00:03:28,209 --> 00:03:30,639
multiplications but the number of

82
00:03:30,639 --> 00:03:33,459
multiplications grows with the number of

83
00:03:33,459 --> 00:03:36,609
cyber attacks bit so none of these are

84
00:03:36,609 --> 00:03:39,489
excellent solutions and the new solution

85
00:03:39,489 --> 00:03:41,500
was proposed recently with a better

86
00:03:41,500 --> 00:03:44,620
noise management it's called flip flip

87
00:03:44,620 --> 00:03:48,129
was designed by Pyrrhic mu antonio new

88
00:03:48,129 --> 00:03:50,439
for Xavier standard and Claude Kelly and

89
00:03:50,439 --> 00:03:53,229
was published at Europe this year but

90
00:03:53,229 --> 00:03:54,879
I'm not going to be talking about the

91
00:03:54,879 --> 00:03:56,949
pressure suit was published I'm going to

92
00:03:56,949 --> 00:03:58,599
talk about a version that was presented

93
00:03:58,599 --> 00:04:01,599
at the National similar it's also the

94
00:04:01,599 --> 00:04:04,000
version that was submitted and accepted

95
00:04:04,000 --> 00:04:05,409
that you record it was modified

96
00:04:05,409 --> 00:04:08,019
afterwards when we told the outers about

97
00:04:08,019 --> 00:04:10,299
our attack so the version that is

98
00:04:10,299 --> 00:04:13,060
published a doesn't have the flaws that

99
00:04:13,060 --> 00:04:17,440
the old one has so flip it flip is a

100
00:04:17,440 --> 00:04:19,298
stream cipher with very few

101
00:04:19,298 --> 00:04:21,039
multiplications and actually that number

102
00:04:21,039 --> 00:04:23,680
of multiplications is constant for every

103
00:04:23,680 --> 00:04:26,110
ciphertext bit

104
00:04:26,110 --> 00:04:29,349
they achieved this through constant to

105
00:04:29,349 --> 00:04:32,379
register and a low degree function in

106
00:04:32,379 --> 00:04:35,789
more details this is flip so there is a

107
00:04:35,789 --> 00:04:39,219
key register storing the key K there is

108
00:04:39,219 --> 00:04:41,979
a fermentation generator that outputs a

109
00:04:41,979 --> 00:04:44,169
random permutation at each time and

110
00:04:44,169 --> 00:04:47,949
there is a filter function f this cipher

111
00:04:47,949 --> 00:04:50,889
outputs a keystroke bit zi at each time

112
00:04:50,889 --> 00:04:53,800
and this Keystone bit is X Ord with the

113
00:04:53,800 --> 00:04:56,409
plaintext to obtain the ciphertext the

114
00:04:56,409 --> 00:04:59,139
way the keys to bedzie I is produced is

115
00:04:59,139 --> 00:05:01,719
first you reorder the key bits and then

116
00:05:01,719 --> 00:05:04,360
you feed this to the filtering function

117
00:05:04,360 --> 00:05:07,360
f the only thing that changes at each

118
00:05:07,360 --> 00:05:10,210
time is the permutation used to reorder

119
00:05:10,210 --> 00:05:13,270
the key bits this permutation but this

120
00:05:13,270 --> 00:05:15,520
invitation is public because it's the

121
00:05:15,520 --> 00:05:18,099
output of a public random permutation

122
00:05:18,099 --> 00:05:19,949
generator which depends on the public

123
00:05:19,949 --> 00:05:24,069
prng which depends on the public ivy so

124
00:05:24,069 --> 00:05:25,750
all this is public the only thing that's

125
00:05:25,750 --> 00:05:27,629
not now to an attacker is the key

126
00:05:27,629 --> 00:05:29,560
there's one more thing in a

127
00:05:29,560 --> 00:05:31,449
specification of flip which is that the

128
00:05:31,449 --> 00:05:35,770
key should be balanced so let's look

129
00:05:35,770 --> 00:05:37,779
deeper this is the filtering function f

130
00:05:37,779 --> 00:05:39,759
at least in the early version because

131
00:05:39,759 --> 00:05:41,919
that's what was changed the most in the

132
00:05:41,919 --> 00:05:45,190
new versions so the the filtering

133
00:05:45,190 --> 00:05:47,289
function f is the direct sum of three

134
00:05:47,289 --> 00:05:49,690
main components each of these components

135
00:05:49,690 --> 00:05:52,330
is going to add resistance against one

136
00:05:52,330 --> 00:05:54,819
type of attack there's a linear

137
00:05:54,819 --> 00:05:57,669
component L with n1 monomials of degree

138
00:05:57,669 --> 00:06:00,060
1 there's a quadratic component with

139
00:06:00,060 --> 00:06:03,520
only monomials of degree 2 and there is

140
00:06:03,520 --> 00:06:05,979
a triangle so Corran triangular function

141
00:06:05,979 --> 00:06:08,409
with one monomial of each degree between

142
00:06:08,409 --> 00:06:10,539
1 and a certain degree K which is the

143
00:06:10,539 --> 00:06:14,409
degree of the function f each bit of the

144
00:06:14,409 --> 00:06:16,509
key appears only once in the formula of

145
00:06:16,509 --> 00:06:19,900
F and what we can notice already is that

146
00:06:19,900 --> 00:06:21,610
there are very few monomials of the

147
00:06:21,610 --> 00:06:24,580
greater than or equal to 3 they are all

148
00:06:24,580 --> 00:06:27,159
in the function T and they are the 10 me

149
00:06:27,159 --> 00:06:29,050
of the grade 3 the monomial of degree 4

150
00:06:29,050 --> 00:06:31,300
until the monomial of the gray k there

151
00:06:31,300 --> 00:06:33,430
are only k minus 2 of those so that's

152
00:06:33,430 --> 00:06:36,870
very cube in the early versions

153
00:06:36,870 --> 00:06:39,720
the others proposed two sets of

154
00:06:39,720 --> 00:06:42,030
parameters one for 80 bed security with

155
00:06:42,030 --> 00:06:46,470
a key of 192 bits and one for security

156
00:06:46,470 --> 00:06:51,990
of 128 with a key of 400 bits and we

157
00:06:51,990 --> 00:06:53,970
identified several the lure bait is a

158
00:06:53,970 --> 00:06:56,430
flip because having a constant kill

159
00:06:56,430 --> 00:06:58,530
register and a low number of hydrogen

160
00:06:58,530 --> 00:07:00,390
monomials that's excellent when it comes

161
00:07:00,390 --> 00:07:02,130
to fhe but it can also be a witness

162
00:07:02,130 --> 00:07:05,640
against guessing attacks indeed having a

163
00:07:05,640 --> 00:07:07,590
Kentucky adjuster means that if you make

164
00:07:07,590 --> 00:07:09,780
a guess at some time that case will hold

165
00:07:09,780 --> 00:07:13,290
up any other time so that's pretty big

166
00:07:13,290 --> 00:07:15,600
and having a low number of high degree

167
00:07:15,600 --> 00:07:17,850
monomials means that with only a few

168
00:07:17,850 --> 00:07:22,440
guesses k minus 2 hair with Cade debris

169
00:07:22,440 --> 00:07:24,570
of the filtering function with only k

170
00:07:24,570 --> 00:07:26,070
minus two guesses you can manage to

171
00:07:26,070 --> 00:07:27,630
cancel all the monomials of degree

172
00:07:27,630 --> 00:07:29,700
greater than or equal to 3 if it's not

173
00:07:29,700 --> 00:07:31,350
clear how you do it I'll be talking

174
00:07:31,350 --> 00:07:35,070
about this in a minute that's also that

175
00:07:35,070 --> 00:07:36,780
also can be seen as an algebraic from

176
00:07:36,780 --> 00:07:38,460
the vulnerability in the sense that

177
00:07:38,460 --> 00:07:41,580
having very few Heydrich monomials the

178
00:07:41,580 --> 00:07:43,590
first inversion is often quadratic in

179
00:07:43,590 --> 00:07:48,270
the key bits so how do we proceed we're

180
00:07:48,270 --> 00:07:50,340
going to make a guess we're not exactly

181
00:07:50,340 --> 00:07:52,700
going to get the value of the kibbutz

182
00:07:52,700 --> 00:07:56,520
that's almost the same remember that the

183
00:07:56,520 --> 00:07:58,410
key is balanced so when there are

184
00:07:58,410 --> 00:08:00,630
positions that are zero we are going to

185
00:08:00,630 --> 00:08:02,550
get several positions of bits that are

186
00:08:02,550 --> 00:08:04,560
zero in the key which is almost

187
00:08:04,560 --> 00:08:07,110
equivalent to saying that several of the

188
00:08:07,110 --> 00:08:09,960
key base equals 0 then we are going to

189
00:08:09,960 --> 00:08:12,720
wait for time on all these kibbutz get /

190
00:08:12,720 --> 00:08:14,670
muted into autumn on mules of the

191
00:08:14,670 --> 00:08:17,400
greater than or equal to 3 meaning that

192
00:08:17,400 --> 00:08:20,460
you get one of the gas key bits in each

193
00:08:20,460 --> 00:08:22,380
monomial degree greater than or equal to

194
00:08:22,380 --> 00:08:24,840
3 so if the gas is correct all these

195
00:08:24,840 --> 00:08:26,910
monomials are canceled and you are left

196
00:08:26,910 --> 00:08:29,310
with a with an equation quadratic in the

197
00:08:29,310 --> 00:08:32,789
kibbutz so you turn in one equation

198
00:08:32,789 --> 00:08:34,530
quadratic in the kibbutz you fetch it

199
00:08:34,530 --> 00:08:36,510
and you start again until you have

200
00:08:36,510 --> 00:08:38,659
enough equations to solve a quadratic

201
00:08:38,659 --> 00:08:41,789
system you stop this product is it's

202
00:08:41,789 --> 00:08:44,130
this quadratic system using for instance

203
00:08:44,130 --> 00:08:47,100
learner is a shin techniques and you get

204
00:08:47,100 --> 00:08:49,110
one of two results either there

205
00:08:49,110 --> 00:08:50,970
a contradiction in which case the gas is

206
00:08:50,970 --> 00:08:52,589
wrong and you start again from the

207
00:08:52,589 --> 00:08:55,380
beginning with another gas or the gas is

208
00:08:55,380 --> 00:08:56,850
correct in which case you get the key

209
00:08:56,850 --> 00:08:59,360
because it is a system in the key bits

210
00:08:59,360 --> 00:09:02,070
so that's the attack so no for its

211
00:09:02,070 --> 00:09:05,310
complexity it depends on two main

212
00:09:05,310 --> 00:09:07,560
probabilities the first one is the

213
00:09:07,560 --> 00:09:10,320
probability that the gas is correct we

214
00:09:10,320 --> 00:09:14,010
do notice by prg its formula is not very

215
00:09:14,010 --> 00:09:16,820
hard to compute so it's just given here

216
00:09:16,820 --> 00:09:18,959
the second probability is the

217
00:09:18,959 --> 00:09:20,730
probability of obtaining a quadratic

218
00:09:20,730 --> 00:09:22,860
equation at some time which is

219
00:09:22,860 --> 00:09:26,490
equivalent to having all the guests of

220
00:09:26,490 --> 00:09:29,670
the gas best bets dispatched in all the

221
00:09:29,670 --> 00:09:31,170
money mules degree greater than or equal

222
00:09:31,170 --> 00:09:35,250
to 3 in a general case the formula of

223
00:09:35,250 --> 00:09:36,990
this probability is a bit complicated

224
00:09:36,990 --> 00:09:40,170
but if you if you make the minimum

225
00:09:40,170 --> 00:09:43,950
number of guesses which is the number of

226
00:09:43,950 --> 00:09:45,930
monomials of degree greater than or

227
00:09:45,930 --> 00:09:48,180
equal to 3 in that case expression

228
00:09:48,180 --> 00:09:52,740
simplifies those probabilities we can

229
00:09:52,740 --> 00:09:55,170
compute the attack complexity if we

230
00:09:55,170 --> 00:09:58,560
assume that we are going to solve the

231
00:09:58,560 --> 00:10:00,180
quadratic system using ionization

232
00:10:00,180 --> 00:10:03,600
techniques and a Gaussian elimination if

233
00:10:03,600 --> 00:10:06,990
we call via the number of variables in

234
00:10:06,990 --> 00:10:09,660
the nine yards system which was also the

235
00:10:09,660 --> 00:10:11,279
number of equations we need to solve the

236
00:10:11,279 --> 00:10:14,279
system the data complexity can be

237
00:10:14,279 --> 00:10:16,890
expressed as the number of equations we

238
00:10:16,890 --> 00:10:18,690
need multiplied by the time to get a

239
00:10:18,690 --> 00:10:22,170
quadratic equation that's the number of

240
00:10:22,170 --> 00:10:23,760
key stream bits we are going to need to

241
00:10:23,760 --> 00:10:25,980
perform the attack the time complexity

242
00:10:25,980 --> 00:10:29,670
can be seen as the time to solve the

243
00:10:29,670 --> 00:10:32,430
quadratic system x the number of guesses

244
00:10:32,430 --> 00:10:36,779
we need to get a correct system and the

245
00:10:36,779 --> 00:10:39,779
memory complexity is the space to store

246
00:10:39,779 --> 00:10:44,220
the poetic system plus in some models we

247
00:10:44,220 --> 00:10:47,130
have to store the data also this is in

248
00:10:47,130 --> 00:10:49,380
the known Ivy model but actually if we

249
00:10:49,380 --> 00:10:51,959
have chosen Ivy no no we can do a bit

250
00:10:51,959 --> 00:10:54,720
better than this for the data because we

251
00:10:54,720 --> 00:10:57,600
can see the data complexity as the

252
00:10:57,600 --> 00:10:58,110
number of

253
00:10:58,110 --> 00:11:00,630
raised we have to make to an Oracle for

254
00:11:00,630 --> 00:11:03,300
the value of the keystream bit so that's

255
00:11:03,300 --> 00:11:06,089
only the key stream beds we need to

256
00:11:06,089 --> 00:11:07,890
perform the attack not the kiss tribute

257
00:11:07,890 --> 00:11:10,200
that we have to generate the kisser

258
00:11:10,200 --> 00:11:12,720
image we will actually use and that's

259
00:11:12,720 --> 00:11:14,970
only the number of equations x the

260
00:11:14,970 --> 00:11:16,709
number of guesses who have to make which

261
00:11:16,709 --> 00:11:20,850
is actually quite smaller now with a few

262
00:11:20,850 --> 00:11:23,760
pictures so this is flip and down here

263
00:11:23,760 --> 00:11:25,500
we have the expression of the keystream

264
00:11:25,500 --> 00:11:28,709
bit at time zero in the key bits in red

265
00:11:28,709 --> 00:11:31,470
we have the line airport in blue that's

266
00:11:31,470 --> 00:11:33,959
the quadratic pot and in green it's the

267
00:11:33,959 --> 00:11:36,930
triangular function with one monomial of

268
00:11:36,930 --> 00:11:40,649
each agree between 1 and K so I'm going

269
00:11:40,649 --> 00:11:42,630
to make payments to guesses let's say k

270
00:11:42,630 --> 00:11:45,360
minus 2 that's the minimum i need i'm

271
00:11:45,360 --> 00:11:46,740
going to guess that the red positions

272
00:11:46,740 --> 00:11:50,160
here equals 0 and i'm going to wait

273
00:11:50,160 --> 00:11:52,680
until these positions get our muted into

274
00:11:52,680 --> 00:11:54,420
all the monomials of the greater than or

275
00:11:54,420 --> 00:11:59,610
equal to 3 so at time 0 doesn't work the

276
00:11:59,610 --> 00:12:01,050
still monomials of degree greater than

277
00:12:01,050 --> 00:12:03,600
or equal to 3 a time one there are also

278
00:12:03,600 --> 00:12:05,790
still monomials degree greater than or

279
00:12:05,790 --> 00:12:07,920
equal to 3 but at time to all these

280
00:12:07,920 --> 00:12:09,990
monomials get canceled and if the gas is

281
00:12:09,990 --> 00:12:11,940
correct this isn't a quadratic equation

282
00:12:11,940 --> 00:12:15,570
I fetch it and I start again until I

283
00:12:15,570 --> 00:12:17,550
have enough equations to solve the

284
00:12:17,550 --> 00:12:19,920
quadratic system if the gas is correct I

285
00:12:19,920 --> 00:12:23,579
will then get the key and there are

286
00:12:23,579 --> 00:12:24,930
several possible trade offs for this

287
00:12:24,930 --> 00:12:27,779
attack for instance we can make more

288
00:12:27,779 --> 00:12:30,510
than K minus two guesses what is going

289
00:12:30,510 --> 00:12:32,459
to change basically is that it will cry

290
00:12:32,459 --> 00:12:34,260
out more time because the probability

291
00:12:34,260 --> 00:12:36,480
that the gas will be correct will be

292
00:12:36,480 --> 00:12:39,269
smaller but it's going to require less

293
00:12:39,269 --> 00:12:42,690
data because at each time there are more

294
00:12:42,690 --> 00:12:44,070
chances that the equation will be

295
00:12:44,070 --> 00:12:48,779
quadratic having more it's yes 20 also

296
00:12:48,779 --> 00:12:50,579
we can do a lot of computation because

297
00:12:50,579 --> 00:12:52,589
at the pain text only comes at the end

298
00:12:52,589 --> 00:12:57,480
in this attack the quadratic system only

299
00:12:57,480 --> 00:12:59,190
depends on the positions of the key bits

300
00:12:59,190 --> 00:13:01,680
and on the guess so oh this you can do

301
00:13:01,680 --> 00:13:03,779
before as per computation you can

302
00:13:03,779 --> 00:13:05,550
generate the quadratic system and you

303
00:13:05,550 --> 00:13:07,589
can make its inversion all this can be

304
00:13:07,589 --> 00:13:09,889
done offline and then at the end you

305
00:13:09,889 --> 00:13:12,319
simply plug in the plain text by with a

306
00:13:12,319 --> 00:13:15,319
simple matrix vector multiplication so

307
00:13:15,319 --> 00:13:17,949
the online term will be reduced from

308
00:13:17,949 --> 00:13:22,249
basically the cube to be l squared so

309
00:13:22,249 --> 00:13:25,069
that's nice there are other possible

310
00:13:25,069 --> 00:13:27,290
improvements we can for instance may

311
00:13:27,290 --> 00:13:29,569
choose guess better than at random and

312
00:13:29,569 --> 00:13:31,669
one way to do this is to look at the

313
00:13:31,669 --> 00:13:33,790
first two to the sea permutations and

314
00:13:33,790 --> 00:13:37,129
make a guess that gets quadratic

315
00:13:37,129 --> 00:13:38,959
equations for many of these first

316
00:13:38,959 --> 00:13:41,269
permutations that way we don't have to

317
00:13:41,269 --> 00:13:42,799
wait as long to get exploitable

318
00:13:42,799 --> 00:13:46,220
permutations and we need less data we

319
00:13:46,220 --> 00:13:47,899
can also do a better solving because

320
00:13:47,899 --> 00:13:50,839
actually our system is quite specific

321
00:13:50,839 --> 00:13:52,489
it's sparse its binary and it's

322
00:13:52,489 --> 00:13:55,040
quadratic so there are better methods to

323
00:13:55,040 --> 00:13:56,929
solve less than an ionization techniques

324
00:13:56,929 --> 00:14:00,319
with a Goshen elimination but we didn't

325
00:14:00,319 --> 00:14:01,850
look too much into it because actually

326
00:14:01,850 --> 00:14:03,769
the attack is already good enough as it

327
00:14:03,769 --> 00:14:07,369
is and also the attack is entirely

328
00:14:07,369 --> 00:14:10,249
paralyzed about one way into power to

329
00:14:10,249 --> 00:14:13,100
paralyze it is to make for instance one

330
00:14:13,100 --> 00:14:18,679
gas on each computer and launch it we we

331
00:14:18,679 --> 00:14:20,540
made an experiment of verification of

332
00:14:20,540 --> 00:14:22,999
this and a tobie version of CC with the

333
00:14:22,999 --> 00:14:26,439
key or 64 bits and we compared the

334
00:14:26,439 --> 00:14:28,549
practical complexity with the

335
00:14:28,549 --> 00:14:31,189
theoretical one and what we get what do

336
00:14:31,189 --> 00:14:33,769
we get basically is that the practical

337
00:14:33,769 --> 00:14:35,929
complexity is almost the same as the

338
00:14:35,929 --> 00:14:39,439
theory so in fluid for instance we need

339
00:14:39,439 --> 00:14:43,040
to t to the 18.4 key stream beds in

340
00:14:43,040 --> 00:14:45,319
practice which is exactly the same as in

341
00:14:45,319 --> 00:14:49,790
theory so now for the for the sets of

342
00:14:49,790 --> 00:14:53,959
parameters for the early version so in

343
00:14:53,959 --> 00:14:57,110
the upper table you have the 80 bit

344
00:14:57,110 --> 00:15:00,379
security version we have a tomtom legacy

345
00:15:00,379 --> 00:15:03,319
of 2 to the 54 in without any

346
00:15:03,319 --> 00:15:05,539
optimizations with a known Ivy model

347
00:15:05,539 --> 00:15:08,929
that the first yellow line but if you

348
00:15:08,929 --> 00:15:11,749
put in optimizations and in a chosen IV

349
00:15:11,749 --> 00:15:13,970
model you can reduce this to an online

350
00:15:13,970 --> 00:15:17,119
time complexity of 2 to the 40 with 2 to

351
00:15:17,119 --> 00:15:21,079
the 54 was pre-computation for the 128

352
00:15:21,079 --> 00:15:23,110
bit version without any optimizer

353
00:15:23,110 --> 00:15:24,970
you have the time complexity of 22 the

354
00:15:24,970 --> 00:15:28,060
68 but if you if you optimize you have

355
00:15:28,060 --> 00:15:31,300
time complexity of 22 the 52 and what we

356
00:15:31,300 --> 00:15:32,950
managed to prove actually is that the

357
00:15:32,950 --> 00:15:35,019
time complexity is proportional to the

358
00:15:35,019 --> 00:15:37,810
square root of the key size so simply

359
00:15:37,810 --> 00:15:40,240
putting bigger keys is not the best way

360
00:15:40,240 --> 00:15:43,600
to patch this kind of ciphers we

361
00:15:43,600 --> 00:15:45,640
communicated these results to the

362
00:15:45,640 --> 00:15:48,160
designers of flip and they change their

363
00:15:48,160 --> 00:15:51,550
cipher to resist our attack basically

364
00:15:51,550 --> 00:15:53,050
what they did is they change the

365
00:15:53,050 --> 00:15:54,940
filtering function they didn't change

366
00:15:54,940 --> 00:15:56,920
the liner part or the quadratic part but

367
00:15:56,920 --> 00:15:58,480
they put in more of the so-called

368
00:15:58,480 --> 00:16:02,800
triangular functions and they putting

369
00:16:02,800 --> 00:16:05,370
much bigger keys also so now for the

370
00:16:05,370 --> 00:16:08,700
128-bit a security version the key is

371
00:16:08,700 --> 00:16:12,160
1394 bits long and as you can see in the

372
00:16:12,160 --> 00:16:14,620
table the attack is not it's not

373
00:16:14,620 --> 00:16:19,290
possible angle so that's it to conclude

374
00:16:19,290 --> 00:16:24,430
we have an attack on the the flippin

375
00:16:24,430 --> 00:16:26,829
funny your stream surface using gas and

376
00:16:26,829 --> 00:16:29,380
determine techniques that explored the

377
00:16:29,380 --> 00:16:31,180
constant key register and the low number

378
00:16:31,180 --> 00:16:33,459
hydro moment of hydrogen monomials in

379
00:16:33,459 --> 00:16:36,279
the ventricular function this attack is

380
00:16:36,279 --> 00:16:37,930
almost particle and we managed to

381
00:16:37,930 --> 00:16:40,029
verified experiment experimentally in a

382
00:16:40,029 --> 00:16:43,690
TOA version but there are still open

383
00:16:43,690 --> 00:16:46,390
questions about this because we attacked

384
00:16:46,390 --> 00:16:48,940
in one instance but doesn't mean that

385
00:16:48,940 --> 00:16:51,760
the structure in itself is a week so one

386
00:16:51,760 --> 00:16:53,589
question that we can we can ask is for

387
00:16:53,589 --> 00:16:56,740
instance whether the constant k register

388
00:16:56,740 --> 00:16:57,940
is still on next following an

389
00:16:57,940 --> 00:17:00,130
exploitable weakness in the new versions

390
00:17:00,130 --> 00:17:02,800
of flip so that's it for me thank you

391
00:17:02,800 --> 00:17:04,660
for your attention if you have any

392
00:17:04,660 --> 00:17:06,990
questions

