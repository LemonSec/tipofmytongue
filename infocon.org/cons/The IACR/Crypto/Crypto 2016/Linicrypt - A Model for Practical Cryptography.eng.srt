1
00:00:04,440 --> 00:00:10,660
hi interesting this before this as you

2
00:00:10,660 --> 00:00:13,030
said this is lynnie crypt this is work

3
00:00:13,030 --> 00:00:15,190
with me and my advisor at Oregon State

4
00:00:15,190 --> 00:00:20,560
and this get started so lynnie crypt is

5
00:00:20,560 --> 00:00:23,380
a special class of programs that

6
00:00:23,380 --> 00:00:25,899
captures some subset of practical

7
00:00:25,899 --> 00:00:28,480
cryptography in the sense that practical

8
00:00:28,480 --> 00:00:30,189
cryptography uses the one-way function

9
00:00:30,189 --> 00:00:32,590
and linear combinations of it or some

10
00:00:32,590 --> 00:00:35,860
combinations of it and that's all that

11
00:00:35,860 --> 00:00:37,930
lynnie crypt does but having this

12
00:00:37,930 --> 00:00:39,730
requirement that we only use linear

13
00:00:39,730 --> 00:00:44,470
combinations of things we know gives us

14
00:00:44,470 --> 00:00:47,440
the ability to synthesize many things in

15
00:00:47,440 --> 00:00:49,390
particular garbled circuit schemes like

16
00:00:49,390 --> 00:00:52,390
owls or optimizations to that like free

17
00:00:52,390 --> 00:00:56,620
XOR so this linear crap model is it's

18
00:00:56,620 --> 00:00:59,800
similar to mini crypt but in mini crypt

19
00:00:59,800 --> 00:01:03,210
you there's only a one-way function that

20
00:01:03,210 --> 00:01:05,710
the only thing that exists is a one-way

21
00:01:05,710 --> 00:01:07,840
function and you can use and programs

22
00:01:07,840 --> 00:01:09,100
can do whatever they want with the

23
00:01:09,100 --> 00:01:11,979
results of those calls but in linear

24
00:01:11,979 --> 00:01:14,409
crypt the only thing you can do is to

25
00:01:14,409 --> 00:01:18,280
combine things linearly so first for to

26
00:01:18,280 --> 00:01:19,930
be concrete the only things that a

27
00:01:19,930 --> 00:01:22,060
linear program could do are they can

28
00:01:22,060 --> 00:01:23,860
take some finite field elements as input

29
00:01:23,860 --> 00:01:26,200
oh by the way a linear crypt program is

30
00:01:26,200 --> 00:01:28,150
embedded in a particular finite field

31
00:01:28,150 --> 00:01:31,510
and they can also sample finite field

32
00:01:31,510 --> 00:01:33,909
elements they can query the random

33
00:01:33,909 --> 00:01:35,680
Oracle with a finite field element and

34
00:01:35,680 --> 00:01:37,659
get a finite field element in return and

35
00:01:37,659 --> 00:01:39,790
then they can combine variables they

36
00:01:39,790 --> 00:01:46,420
know with a fixed linear coefficient so

37
00:01:46,420 --> 00:01:49,450
for a concrete example and also so you

38
00:01:49,450 --> 00:01:54,040
cannot get used to my notation the first

39
00:01:54,040 --> 00:01:56,229
variable just takes some finite field

40
00:01:56,229 --> 00:01:58,900
element as input the second variable

41
00:01:58,900 --> 00:02:01,600
will sample the finite field to get a

42
00:02:01,600 --> 00:02:05,380
new variable the third one will query

43
00:02:05,380 --> 00:02:07,330
the random Oracle at that point using

44
00:02:07,330 --> 00:02:10,840
this H notation to get a new point the

45
00:02:10,840 --> 00:02:13,359
and the fourth variable just takes a

46
00:02:13,359 --> 00:02:15,310
linear combination they don't have to be

47
00:02:15,310 --> 00:02:16,980
just plus here we

48
00:02:16,980 --> 00:02:18,569
our fixed coefficient is one but it

49
00:02:18,569 --> 00:02:22,830
could be in any fixed coefficient and we

50
00:02:22,830 --> 00:02:25,340
can return any number of variables

51
00:02:25,340 --> 00:02:28,440
so using this our main result is we show

52
00:02:28,440 --> 00:02:30,870
for any two linear crypt programs we can

53
00:02:30,870 --> 00:02:31,890
tell whether they're indistinguishable

54
00:02:31,890 --> 00:02:34,459
in polynomial time

55
00:02:34,459 --> 00:02:38,690
this lets us synthesize in the sense of

56
00:02:38,690 --> 00:02:41,879
automatically generate linear programs

57
00:02:41,879 --> 00:02:43,560
that are indistinguishable from some

58
00:02:43,560 --> 00:02:47,970
specification and we demonstrate this

59
00:02:47,970 --> 00:02:49,739
technique by synthesizing free x or

60
00:02:49,739 --> 00:03:00,870
compatible garbling schemes okay so I've

61
00:03:00,870 --> 00:03:02,849
got three main parts of my talk most of

62
00:03:02,849 --> 00:03:04,680
this talk will be telling you about how

63
00:03:04,680 --> 00:03:07,920
linear crypt works itself and then I'll

64
00:03:07,920 --> 00:03:09,690
show you how we synthesize garbled

65
00:03:09,690 --> 00:03:13,709
circuits so we want to tell whether two

66
00:03:13,709 --> 00:03:15,239
linear programs have indistinguishable

67
00:03:15,239 --> 00:03:18,569
outputs in order to do this we'll need a

68
00:03:18,569 --> 00:03:20,879
few tools we need to know how to express

69
00:03:20,879 --> 00:03:23,790
a linear program as a matrix and then we

70
00:03:23,790 --> 00:03:25,470
need to know how to trim that down to a

71
00:03:25,470 --> 00:03:28,349
canonical representation and finally we

72
00:03:28,349 --> 00:03:30,480
need to be able to reason about how the

73
00:03:30,480 --> 00:03:35,549
the variables can be reordered so I'll

74
00:03:35,549 --> 00:03:37,500
show you how to express a linear program

75
00:03:37,500 --> 00:03:40,530
as a matrix here's a simple program

76
00:03:40,530 --> 00:03:42,599
there's no security here it's just it's

77
00:03:42,599 --> 00:03:46,370
just an instance of a linear program

78
00:03:46,370 --> 00:03:49,680
we're all to finite field twice we take

79
00:03:49,680 --> 00:03:51,690
a linear combination query the Oracle a

80
00:03:51,690 --> 00:03:55,470
couple times and return some stuff but

81
00:03:55,470 --> 00:03:59,519
if you look at it V 3 V 5 and the return

82
00:03:59,519 --> 00:04:02,160
variables are really just functions of

83
00:04:02,160 --> 00:04:08,239
these four lines in the program and

84
00:04:08,239 --> 00:04:10,650
those lines are special let's call it

85
00:04:10,650 --> 00:04:15,030
let's call them base variables the

86
00:04:15,030 --> 00:04:17,430
result of sampling the field or calling

87
00:04:17,430 --> 00:04:19,709
a random Oracle because the rest of the

88
00:04:19,709 --> 00:04:23,130
program can be based on them I guess so

89
00:04:23,130 --> 00:04:24,810
everything else is a linear function of

90
00:04:24,810 --> 00:04:28,020
these base variables and then the whole

91
00:04:28,020 --> 00:04:29,700
program is a function of these base

92
00:04:29,700 --> 00:04:30,420
variables

93
00:04:30,420 --> 00:04:33,390
so why don't we represent this program

94
00:04:33,390 --> 00:04:35,160
as a matrix in terms of these base

95
00:04:35,160 --> 00:04:38,010
variables so here on the right R is a

96
00:04:38,010 --> 00:04:40,020
vector of the base variables themselves

97
00:04:40,020 --> 00:04:42,000
and on the left is a vector of the

98
00:04:42,000 --> 00:04:43,980
internal variables and then we just have

99
00:04:43,980 --> 00:04:46,770
to fill in this matrix to express the

100
00:04:46,770 --> 00:04:51,000
relationships it makes sense that all

101
00:04:51,000 --> 00:04:52,590
the base variables are a function of

102
00:04:52,590 --> 00:04:54,780
themselves so we can just assign them

103
00:04:54,780 --> 00:04:58,110
directly and then the other two

104
00:04:58,110 --> 00:05:00,420
variables are some linear combination of

105
00:05:00,420 --> 00:05:03,990
the base variables so they get the

106
00:05:03,990 --> 00:05:09,360
obvious choice but this internal matrix

107
00:05:09,360 --> 00:05:11,370
it doesn't really capture anything about

108
00:05:11,370 --> 00:05:13,770
the fact that when that when a

109
00:05:13,770 --> 00:05:15,480
distinguish or an adversary remember

110
00:05:15,480 --> 00:05:17,310
we're trying to be able to tell whether

111
00:05:17,310 --> 00:05:19,200
two linear programs are

112
00:05:19,200 --> 00:05:21,750
indistinguishable when the distinguisher

113
00:05:21,750 --> 00:05:24,120
has the output of this program it

114
00:05:24,120 --> 00:05:25,890
doesn't have any access to the internals

115
00:05:25,890 --> 00:05:28,410
in these internal variables all it has

116
00:05:28,410 --> 00:05:33,750
is these two output rows v4 and v5 so

117
00:05:33,750 --> 00:05:36,480
let's just give it let's just use this

118
00:05:36,480 --> 00:05:39,450
as a representation and we'll call this

119
00:05:39,450 --> 00:05:42,140
the output matrix it's just the output

120
00:05:42,140 --> 00:05:46,920
variables however this output matrix is

121
00:05:46,920 --> 00:05:49,320
incomplete because there could be some

122
00:05:49,320 --> 00:05:52,020
correlations between the rows via the

123
00:05:52,020 --> 00:05:56,130
random Oracle so we need a way to

124
00:05:56,130 --> 00:06:01,350
account for these Oracle queries so

125
00:06:01,350 --> 00:06:02,700
that's where this Oracle constraint

126
00:06:02,700 --> 00:06:05,400
structure comes in the idea is simple on

127
00:06:05,400 --> 00:06:07,260
the left hand side of each Oracle

128
00:06:07,260 --> 00:06:10,490
constraint is the is a vector for the

129
00:06:10,490 --> 00:06:12,960
query and on the right hand side is the

130
00:06:12,960 --> 00:06:16,320
vector representing the response so for

131
00:06:16,320 --> 00:06:22,800
V 4 V 4 is querying the Oracle at V 3

132
00:06:22,800 --> 00:06:26,310
which is V 1 plus V 2 so the vector is

133
00:06:26,310 --> 00:06:28,530
just feet 1 plus V 2 and you get V 4 out

134
00:06:28,530 --> 00:06:30,680
of it similar

135
00:06:30,680 --> 00:06:34,370
similarly for V 5

136
00:06:36,180 --> 00:06:39,930
so we show that the the output matrix

137
00:06:39,930 --> 00:06:42,030
and Oracle constraints completely

138
00:06:42,030 --> 00:06:45,030
characterize a linear program so now we

139
00:06:45,030 --> 00:06:49,560
can use linear algebra just I think I'll

140
00:06:49,560 --> 00:06:50,760
show you how to trim down this

141
00:06:50,760 --> 00:06:54,210
representation to get to some canonical

142
00:06:54,210 --> 00:06:58,220
form first note that some of these

143
00:06:58,220 --> 00:07:00,150
Oracle queries don't affect the

144
00:07:00,150 --> 00:07:02,970
adversaries view if you see here v6

145
00:07:02,970 --> 00:07:05,250
isn't even I included in anyway in

146
00:07:05,250 --> 00:07:10,170
output and v4 well it's reachable but

147
00:07:10,170 --> 00:07:15,150
yeah we'll see oh I think I have an

148
00:07:15,150 --> 00:07:22,950
error here oh no nevermind okay so this

149
00:07:22,950 --> 00:07:25,110
first Oracle query is unreachable from

150
00:07:25,110 --> 00:07:26,760
the output there's no way that the

151
00:07:26,760 --> 00:07:29,640
adversary can reach this v2 variable see

152
00:07:29,640 --> 00:07:33,450
this has zeros down this has zeros in

153
00:07:33,450 --> 00:07:35,640
this column so there's no way it can get

154
00:07:35,640 --> 00:07:37,800
this one in order to query the random

155
00:07:37,800 --> 00:07:39,750
Oracle at this point and that sort of

156
00:07:39,750 --> 00:07:42,030
makes sense it this v2 variable isn't

157
00:07:42,030 --> 00:07:45,330
included in the output in any way so the

158
00:07:45,330 --> 00:07:47,130
left-hand side of the the Oracle

159
00:07:47,130 --> 00:07:48,690
constraint is not in the span of

160
00:07:48,690 --> 00:07:51,660
anything else in the in the mini correct

161
00:07:51,660 --> 00:07:52,260
program

162
00:07:52,260 --> 00:07:54,930
so therefore well in the output of the

163
00:07:54,930 --> 00:07:58,010
20 quid program therefore this this

164
00:07:58,010 --> 00:08:00,300
Oracle query is indistinguishable from

165
00:08:00,300 --> 00:08:02,130
random from the distinguishers point of

166
00:08:02,130 --> 00:08:04,620
view so we can just remove it and then

167
00:08:04,620 --> 00:08:08,040
it just looks random and it this doesn't

168
00:08:08,040 --> 00:08:11,150
affect output distribution at all

169
00:08:11,150 --> 00:08:17,790
similarly V 6 V 5 is reachable though it

170
00:08:17,790 --> 00:08:21,270
is literally the second output row here

171
00:08:21,270 --> 00:08:24,000
so you can the distinguisher can query

172
00:08:24,000 --> 00:08:26,990
at this point but the output of that is

173
00:08:26,990 --> 00:08:30,300
useless for trying to distinguish this

174
00:08:30,300 --> 00:08:31,770
program from anything else because it

175
00:08:31,770 --> 00:08:33,900
has zeros here the output has this one

176
00:08:33,900 --> 00:08:37,770
in the v6 position but there this won't

177
00:08:37,770 --> 00:08:40,710
help at all and this intuitive ain't

178
00:08:40,710 --> 00:08:43,440
makes sense because you query at v6 but

179
00:08:43,440 --> 00:08:45,840
v6 isn't doesn't appear now put in

180
00:08:45,840 --> 00:08:48,430
anyway so again we can remove this

181
00:08:48,430 --> 00:08:52,109
that looks random to the distinguisher

182
00:08:52,560 --> 00:08:55,960
so normalizes this function that removes

183
00:08:55,960 --> 00:08:58,510
these useless and unreachable Oracle

184
00:08:58,510 --> 00:09:02,440
constraints and it just removes the

185
00:09:02,440 --> 00:09:03,640
Oracle constraints that don't affect

186
00:09:03,640 --> 00:09:06,880
output but there's a subtlety and that's

187
00:09:06,880 --> 00:09:08,440
that these Oracle constraints we allow

188
00:09:08,440 --> 00:09:11,190
for them to be adaptive you can query

189
00:09:11,190 --> 00:09:13,540
you can query at a point that is the

190
00:09:13,540 --> 00:09:16,149
result of a previous query here's a

191
00:09:16,149 --> 00:09:18,720
stupid program that's an example of that

192
00:09:18,720 --> 00:09:22,000
you just query it you sample at v1 and

193
00:09:22,000 --> 00:09:23,800
then you query at that point and then

194
00:09:23,800 --> 00:09:25,570
you query again but then you just return

195
00:09:25,570 --> 00:09:30,670
v1 so the output matrix is just v1 and

196
00:09:30,670 --> 00:09:32,230
then you have these two Oracle bit

197
00:09:32,230 --> 00:09:33,790
strings so if we're just looking at the

198
00:09:33,790 --> 00:09:35,980
algebraic representation we don't know

199
00:09:35,980 --> 00:09:38,520
we don't know a priori whether these are

200
00:09:38,520 --> 00:09:41,680
reachable and useful it looks like this

201
00:09:41,680 --> 00:09:44,230
first one it's reachable and then its

202
00:09:44,230 --> 00:09:50,350
output v2 is used in another Oracle

203
00:09:50,350 --> 00:09:53,560
constraint so it looks useful all right

204
00:09:53,560 --> 00:09:55,240
so we go to the second one

205
00:09:55,240 --> 00:09:57,160
it's reachable since we already have

206
00:09:57,160 --> 00:10:00,520
this v2 but but its output is useless

207
00:10:00,520 --> 00:10:02,830
it's not in the span of anything else so

208
00:10:02,830 --> 00:10:05,740
we can delete it and that makes the

209
00:10:05,740 --> 00:10:08,380
first or quickest rate useless as well

210
00:10:08,380 --> 00:10:10,540
so we end up deleting that to keep

211
00:10:10,540 --> 00:10:16,209
skipping so well all this intuitively

212
00:10:16,209 --> 00:10:18,640
makes sense because you only return b1

213
00:10:18,640 --> 00:10:20,140
it doesn't matter these could do

214
00:10:20,140 --> 00:10:23,100
anything and an adversary wouldn't know

215
00:10:23,100 --> 00:10:26,830
so normalize is builds these reachable

216
00:10:26,830 --> 00:10:28,839
and useful sets and then just deletes

217
00:10:28,839 --> 00:10:30,730
everything else that isn't reachable or

218
00:10:30,730 --> 00:10:33,690
useful and we show that this is a

219
00:10:33,690 --> 00:10:35,650
normalized version of program is

220
00:10:35,650 --> 00:10:36,970
indistinguishable from the program

221
00:10:36,970 --> 00:10:41,020
itself so next I'll show you how to

222
00:10:41,020 --> 00:10:43,120
reorder to reason about reordering the

223
00:10:43,120 --> 00:10:47,040
variables so everything so far is

224
00:10:47,040 --> 00:10:49,000
talking about whether a particular

225
00:10:49,000 --> 00:10:52,149
vector is in the is linearly independent

226
00:10:52,149 --> 00:10:55,209
of everything else the left-hand side of

227
00:10:55,209 --> 00:10:57,190
a reasonable Oracle query is in the span

228
00:10:57,190 --> 00:10:57,890
of the

229
00:10:57,890 --> 00:11:00,950
of everything and the right hand side of

230
00:11:00,950 --> 00:11:03,200
a useful Oracle query is in also on the

231
00:11:03,200 --> 00:11:07,339
span of everything so a basis change

232
00:11:07,339 --> 00:11:09,410
preserves these linear independence

233
00:11:09,410 --> 00:11:11,990
relationships between the vectors and we

234
00:11:11,990 --> 00:11:15,200
could take a basis change on all of them

235
00:11:15,200 --> 00:11:20,120
and preserve all the linear property and

236
00:11:20,120 --> 00:11:23,930
we show that this is the case so now I

237
00:11:23,930 --> 00:11:26,209
think we're ready to show our main

238
00:11:26,209 --> 00:11:30,200
result and that's the tool in equip

239
00:11:30,200 --> 00:11:32,390
programs are indistinguishable if after

240
00:11:32,390 --> 00:11:35,360
you normalize them they only differ by a

241
00:11:35,360 --> 00:11:37,310
basis change you can find a basis change

242
00:11:37,310 --> 00:11:40,070
that brings them into alignment and the

243
00:11:40,070 --> 00:11:43,339
non-trivial direction of this is to is

244
00:11:43,339 --> 00:11:45,589
by contribution we need to show a

245
00:11:45,589 --> 00:11:48,440
distinguisher for when there is no basis

246
00:11:48,440 --> 00:11:49,940
change that brings two normalized

247
00:11:49,940 --> 00:11:51,860
programs into alignment we can't find

248
00:11:51,860 --> 00:11:55,160
such a basis change and the way this

249
00:11:55,160 --> 00:11:59,089
works is let these be these blobs

250
00:11:59,089 --> 00:12:02,060
represent the the vectors that each

251
00:12:02,060 --> 00:12:04,130
program has the output matrix and the

252
00:12:04,130 --> 00:12:06,050
Oracle constraints and then after we

253
00:12:06,050 --> 00:12:07,670
normalize them they come in to some

254
00:12:07,670 --> 00:12:11,269
regular form so inside these inner

255
00:12:11,269 --> 00:12:14,449
shapes these after the normalized spaces

256
00:12:14,449 --> 00:12:17,870
every Oracle constraint is both useful

257
00:12:17,870 --> 00:12:20,660
and reachable but since they're

258
00:12:20,660 --> 00:12:22,310
different since they can't be brought

259
00:12:22,310 --> 00:12:23,870
into alignment there's no way to take

260
00:12:23,870 --> 00:12:28,040
this triangle into a square there must

261
00:12:28,040 --> 00:12:29,959
be some Oracle constraint that exists in

262
00:12:29,959 --> 00:12:30,890
one but not the other

263
00:12:30,890 --> 00:12:33,320
so the distinguisher needs to find that

264
00:12:33,320 --> 00:12:36,800
Oracle constraint and then Cori and then

265
00:12:36,800 --> 00:12:40,130
query at that point and then the output

266
00:12:40,130 --> 00:12:42,140
will be random if it's in the presence

267
00:12:42,140 --> 00:12:44,180
of the second program and the linear

268
00:12:44,180 --> 00:12:45,709
combination of everything else that it

269
00:12:45,709 --> 00:12:46,970
knows in the presence of the first

270
00:12:46,970 --> 00:12:49,519
program and the proof itself is a lot

271
00:12:49,519 --> 00:12:50,750
more subtle than this and there's lots

272
00:12:50,750 --> 00:12:58,100
of complexities to see the paper so this

273
00:12:58,100 --> 00:13:01,370
normalized function it's it's kind of

274
00:13:01,370 --> 00:13:03,500
messy we don't know how many times we

275
00:13:03,500 --> 00:13:05,540
need to iterate it in order to get to a

276
00:13:05,540 --> 00:13:10,550
canonical form so this this is bad for

277
00:13:10,550 --> 00:13:11,350
synthesis

278
00:13:11,350 --> 00:13:14,590
give it find some formula to give to SMT

279
00:13:14,590 --> 00:13:18,640
SMT solver so that's where the space

280
00:13:18,640 --> 00:13:20,110
exchange comes in we've got a couple

281
00:13:20,110 --> 00:13:22,600
tricks that will let us just use the

282
00:13:22,600 --> 00:13:25,420
bases change for things that we need for

283
00:13:25,420 --> 00:13:27,940
synthesis in particular checking whether

284
00:13:27,940 --> 00:13:29,350
a function is indistinguishable from

285
00:13:29,350 --> 00:13:31,870
random and for composing programs to

286
00:13:31,870 --> 00:13:36,730
check correct this the first trick is

287
00:13:36,730 --> 00:13:39,310
for telling when a linear program is

288
00:13:39,310 --> 00:13:42,000
indistinguishable from random if you

289
00:13:42,000 --> 00:13:46,330
bugle in order for a program to be in a

290
00:13:46,330 --> 00:13:48,220
single from random there's two

291
00:13:48,220 --> 00:13:51,010
requirements the first is that all the

292
00:13:51,010 --> 00:13:52,870
output vectors should be linearly

293
00:13:52,870 --> 00:13:56,110
independent of each other well let's

294
00:13:56,110 --> 00:13:58,330
just say there's K of them and the other

295
00:13:58,330 --> 00:14:01,210
requirement is that all of the auricle

296
00:14:01,210 --> 00:14:02,610
constraints need to be unreachable

297
00:14:02,610 --> 00:14:04,330
otherwise there may be some

298
00:14:04,330 --> 00:14:08,710
relationships between output vectors so

299
00:14:08,710 --> 00:14:09,790
we can check both of these conditions

300
00:14:09,790 --> 00:14:12,930
using a basis change in the first case

301
00:14:12,930 --> 00:14:16,480
we if we can find a basis change that

302
00:14:16,480 --> 00:14:18,700
takes the output matrix to the K I did

303
00:14:18,700 --> 00:14:22,780
any matrix followed by zeros if we can

304
00:14:22,780 --> 00:14:25,000
do this then the first requirement is

305
00:14:25,000 --> 00:14:28,150
satisfied since trivially all the output

306
00:14:28,150 --> 00:14:31,380
vectors are linearly independent and

307
00:14:31,380 --> 00:14:33,580
then for the other requirement there's

308
00:14:33,580 --> 00:14:36,850
another trick if the rightmost n minus K

309
00:14:36,850 --> 00:14:38,620
elements of a particular vector are

310
00:14:38,620 --> 00:14:41,770
nonzero if any of them are non zero then

311
00:14:41,770 --> 00:14:44,020
it's unreachable given this output

312
00:14:44,020 --> 00:14:47,380
matrix and that's because there's no way

313
00:14:47,380 --> 00:14:49,750
if you have zeros on the right side pass

314
00:14:49,750 --> 00:14:52,060
the K the position there's no way to get

315
00:14:52,060 --> 00:14:53,890
a 1 in the right side of a particular

316
00:14:53,890 --> 00:14:58,120
vector so all we need to do is check

317
00:14:58,120 --> 00:15:00,070
that all the Oracle queries have this

318
00:15:00,070 --> 00:15:05,230
property and then then we have the the

319
00:15:05,230 --> 00:15:06,790
Oracle constraints unreachable

320
00:15:06,790 --> 00:15:10,319
satisfying the second property

321
00:15:14,230 --> 00:15:17,060
so our second trick is to use a basis

322
00:15:17,060 --> 00:15:20,779
change for composition we need this

323
00:15:20,779 --> 00:15:23,089
because the base variables in the first

324
00:15:23,089 --> 00:15:24,500
program might not agree with the base

325
00:15:24,500 --> 00:15:26,029
variables in the second program and we'd

326
00:15:26,029 --> 00:15:29,960
like to merge them when if we can do

327
00:15:29,960 --> 00:15:32,029
this in the output matrix for the second

328
00:15:32,029 --> 00:15:33,260
program is the output for the whole

329
00:15:33,260 --> 00:15:37,910
program here's an example got in a

330
00:15:37,910 --> 00:15:40,910
simple encryption scheme with that just

331
00:15:40,910 --> 00:15:42,560
takes a random element from the field

332
00:15:42,560 --> 00:15:45,170
and uses it to query the Oracle and mask

333
00:15:45,170 --> 00:15:48,410
the message and then the decryption

334
00:15:48,410 --> 00:15:50,630
reverses that and these are the

335
00:15:50,630 --> 00:15:52,940
algebraic representations corresponding

336
00:15:52,940 --> 00:15:56,660
to that but note that their base

337
00:15:56,660 --> 00:15:58,820
variables are not aligned we have an M

338
00:15:58,820 --> 00:16:02,900
where really we want or we have an R

339
00:16:02,900 --> 00:16:05,029
we're in the wrong position it should be

340
00:16:05,029 --> 00:16:06,740
in the second we have this C where

341
00:16:06,740 --> 00:16:10,100
actually we want M + H of R and H of R

342
00:16:10,100 --> 00:16:10,640
is fine

343
00:16:10,640 --> 00:16:14,150
so we need these two agree these output

344
00:16:14,150 --> 00:16:16,070
of the first program to agree without

345
00:16:16,070 --> 00:16:18,950
the input of the second program and we

346
00:16:18,950 --> 00:16:21,620
can do that using this basis change it

347
00:16:21,620 --> 00:16:24,560
takes our from the second program to the

348
00:16:24,560 --> 00:16:27,740
second to the second slot it takes the C

349
00:16:27,740 --> 00:16:30,680
to M + H of R and H of R is fine where

350
00:16:30,680 --> 00:16:32,690
it is but we also need to make these

351
00:16:32,690 --> 00:16:34,520
Oracle constraints line up they need to

352
00:16:34,520 --> 00:16:36,500
agree H of R in the presence of the

353
00:16:36,500 --> 00:16:37,910
first program should mean the same thing

354
00:16:37,910 --> 00:16:41,209
in the second program so I will apply

355
00:16:41,209 --> 00:16:44,510
this basis change and we get this result

356
00:16:44,510 --> 00:16:51,110
and it simplifies to that now the Oracle

357
00:16:51,110 --> 00:16:53,120
constraints are in agreement the basis

358
00:16:53,120 --> 00:16:54,770
change those are in agreement and we

359
00:16:54,770 --> 00:16:59,630
just output the second output matrix and

360
00:16:59,630 --> 00:17:01,610
that's a composition so this basis

361
00:17:01,610 --> 00:17:04,550
change as a bonus is a witness to the

362
00:17:04,550 --> 00:17:08,169
correctness of this scheme

363
00:17:11,098 --> 00:17:13,959
so next I'll show you how we use money

364
00:17:13,959 --> 00:17:17,819
crypt to synthesize garbled circuits

365
00:17:18,479 --> 00:17:21,608
we're in the free XOR land where there's

366
00:17:21,608 --> 00:17:25,118
a global Delta constant that is used to

367
00:17:25,118 --> 00:17:29,679
represent the true wire labels and our

368
00:17:29,679 --> 00:17:32,529
security in linear crypt reduces to

369
00:17:32,529 --> 00:17:34,509
whether or not this Delta is reachable

370
00:17:34,509 --> 00:17:39,759
by the adversaries view so our approach

371
00:17:39,759 --> 00:17:42,399
is to guess garble and eval for a single

372
00:17:42,399 --> 00:17:45,639
gate and we show that if you can if you

373
00:17:45,639 --> 00:17:49,169
can garble a single gate in this in this

374
00:17:49,169 --> 00:17:52,029
context you can build a whole garbled

375
00:17:52,029 --> 00:17:55,479
circuit scheme then we guess a basis

376
00:17:55,479 --> 00:17:57,159
change in the spaces change will be used

377
00:17:57,159 --> 00:17:59,679
to check the correctness by composing

378
00:17:59,679 --> 00:18:01,419
garbling eval and making sure you get

379
00:18:01,419 --> 00:18:03,070
the correct wire labels for all of your

380
00:18:03,070 --> 00:18:06,909
input combinations and then we'll check

381
00:18:06,909 --> 00:18:09,099
security by ensuring that Delta is

382
00:18:09,099 --> 00:18:11,489
unreachable from the adversaries view

383
00:18:11,489 --> 00:18:15,759
and then this basis change itself is a

384
00:18:15,759 --> 00:18:17,739
proof of correctness and security we

385
00:18:17,739 --> 00:18:20,409
give everything to a Sat solver and then

386
00:18:20,409 --> 00:18:23,049
the witness is a scheme and if it's

387
00:18:23,049 --> 00:18:27,009
unset then we have a proof of the fact

388
00:18:27,009 --> 00:18:29,289
that it's there's no such scheme for the

389
00:18:29,289 --> 00:18:33,429
parameters we chose so I'll show you our

390
00:18:33,429 --> 00:18:34,809
results

391
00:18:34,809 --> 00:18:37,299
oh yeah we were trying to beat half

392
00:18:37,299 --> 00:18:38,799
gates we wondered if we could beat this

393
00:18:38,799 --> 00:18:40,690
half gates it's a happy and optimization

394
00:18:40,690 --> 00:18:42,729
this shows that there's two that you

395
00:18:42,729 --> 00:18:46,389
need at least two ciphertext to garble a

396
00:18:46,389 --> 00:18:48,489
NAND gate and we wondered if we could do

397
00:18:48,489 --> 00:18:52,950
better so we implemented it in Python it

398
00:18:52,950 --> 00:18:55,119
uses the z3

399
00:18:55,119 --> 00:18:58,720
Sat solver it runs on my laptop it's

400
00:18:58,720 --> 00:19:03,609
available for free at this URL the way

401
00:19:03,609 --> 00:19:06,879
it works is you give it parameters that

402
00:19:06,879 --> 00:19:09,759
represent the size of the garbled table

403
00:19:09,759 --> 00:19:11,559
the number of Oracle queries you can

404
00:19:11,559 --> 00:19:14,409
make and these all in turn affect the

405
00:19:14,409 --> 00:19:15,820
size of the matrices that we will

406
00:19:15,820 --> 00:19:19,720
generate and then we create SAP

407
00:19:19,720 --> 00:19:21,429
variables for every element inside those

408
00:19:21,429 --> 00:19:23,720
matrices

409
00:19:23,720 --> 00:19:25,730
and then we write the security and

410
00:19:25,730 --> 00:19:27,140
correctness formulas from the previous

411
00:19:27,140 --> 00:19:30,919
slide in terms of these matrices of Sat

412
00:19:30,919 --> 00:19:33,530
variables then we give the whole thing

413
00:19:33,530 --> 00:19:37,490
to the Sat solver and if there's a riff

414
00:19:37,490 --> 00:19:39,860
it's satisfiable we just translate it

415
00:19:39,860 --> 00:19:43,100
into human readable form and this is a

416
00:19:43,100 --> 00:19:47,270
table of results so this is the

417
00:19:47,270 --> 00:19:48,860
functionality we're trying to garble so

418
00:19:48,860 --> 00:19:52,220
for instance we tried to recreate 3x or

419
00:19:52,220 --> 00:19:55,580
unfortunately we were able to this is

420
00:19:55,580 --> 00:19:56,360
the functionality

421
00:19:56,360 --> 00:19:58,640
here's XOR with two inputs and one

422
00:19:58,640 --> 00:20:03,590
output a size zero garbled table with no

423
00:20:03,590 --> 00:20:05,659
Oracle queries and we were able to do it

424
00:20:05,659 --> 00:20:09,260
it's satisfiable in one second we're

425
00:20:09,260 --> 00:20:12,340
also able to recreate half gate and with

426
00:20:12,340 --> 00:20:15,020
two cipher texts in the garbled table

427
00:20:15,020 --> 00:20:17,030
and for Oracle queries in the garbha and

428
00:20:17,030 --> 00:20:19,070
two in the evaluator and that was easily

429
00:20:19,070 --> 00:20:22,090
satisfiable we tried to beat half gates

430
00:20:22,090 --> 00:20:25,070
by reducing the number of cipher text by

431
00:20:25,070 --> 00:20:27,700
one but this was unsatisfiable

432
00:20:27,700 --> 00:20:30,470
and we tried to beat it also by reducing

433
00:20:30,470 --> 00:20:34,010
the number of evaluator queries or and

434
00:20:34,010 --> 00:20:35,990
garble icarus but both of these were

435
00:20:35,990 --> 00:20:41,049
unsatisfiable so after that we tried

436
00:20:41,049 --> 00:20:43,400
synthesizing some more exotic schemes or

437
00:20:43,400 --> 00:20:46,549
exotic gates like a MUX Gate inequality

438
00:20:46,549 --> 00:20:50,419
gate or comparison gate but this all

439
00:20:50,419 --> 00:20:52,370
sort of reduced to we need at least two

440
00:20:52,370 --> 00:20:55,039
cipher texts for every and gate inside

441
00:20:55,039 --> 00:20:57,919
of the the functionality we're trying to

442
00:20:57,919 --> 00:21:03,260
garble here's an example of one of the

443
00:21:03,260 --> 00:21:07,280
half gate schemes we synthesized we we

444
00:21:07,280 --> 00:21:10,250
can generate thousands of these just

445
00:21:10,250 --> 00:21:14,179
enumerate them endlessly it seems and

446
00:21:14,179 --> 00:21:18,409
there's two cipher texts in these g1 and

447
00:21:18,409 --> 00:21:20,120
g2 are the two cipher text in the Garlic

448
00:21:20,120 --> 00:21:22,880
table for Oracle queries in the GOG ler

449
00:21:22,880 --> 00:21:27,590
to in the evaluator they down here yeah

450
00:21:27,590 --> 00:21:29,870
the notation is tricky there's some

451
00:21:29,870 --> 00:21:31,340
subtleties with color bits and

452
00:21:31,340 --> 00:21:33,530
permutation bits that we support and

453
00:21:33,530 --> 00:21:35,440
expand on in the paper

454
00:21:35,440 --> 00:21:37,660
and yeah read the paper if you'd like to

455
00:21:37,660 --> 00:21:39,640
understand this but I just wanted to

456
00:21:39,640 --> 00:21:42,540
show you what it looks like

457
00:21:42,540 --> 00:21:46,180
so in conclusion we've we have this

458
00:21:46,180 --> 00:21:48,220
result to be able to show in the single

459
00:21:48,220 --> 00:21:51,940
stability of linear programs we can we

460
00:21:51,940 --> 00:21:53,920
used it to synthesize garbled circulate

461
00:21:53,920 --> 00:21:58,480
schemes we weren't able to be any half

462
00:21:58,480 --> 00:22:00,820
gates or any we didn't make any

463
00:22:00,820 --> 00:22:02,260
improvements on corbelled circuits but

464
00:22:02,260 --> 00:22:05,140
we were able to recreate everything and

465
00:22:05,140 --> 00:22:08,170
for a future work will try synthesizing

466
00:22:08,170 --> 00:22:10,210
other kinds of garbled circuits will try

467
00:22:10,210 --> 00:22:12,010
applying it to other kinds of crypto and

468
00:22:12,010 --> 00:22:15,400
we will try other kinds of Oracle's as

469
00:22:15,400 --> 00:22:17,550
well

