1
00:00:04,259 --> 00:00:06,790
so this is joint work with Ranjit Kumar

2
00:00:06,790 --> 00:00:10,240
son and srinivasan rugerman so as in the

3
00:00:10,240 --> 00:00:11,860
previous talk the tech task were

4
00:00:11,860 --> 00:00:13,570
interested in here is secure multi-party

5
00:00:13,570 --> 00:00:17,050
computation where n parties want to kick

6
00:00:17,050 --> 00:00:18,820
together compute a joint function of

7
00:00:18,820 --> 00:00:21,759
their inputs without revealing anything

8
00:00:21,759 --> 00:00:25,570
except the output value and the protocol

9
00:00:25,570 --> 00:00:27,189
should be secure in the face of an

10
00:00:27,189 --> 00:00:29,619
adversary who controls at most t of the

11
00:00:29,619 --> 00:00:32,470
end parties so we have a variety of

12
00:00:32,470 --> 00:00:33,969
protocols for secure multi-party

13
00:00:33,969 --> 00:00:36,850
computation both in the honest majority

14
00:00:36,850 --> 00:00:38,860
setting and also in the setting will be

15
00:00:38,860 --> 00:00:40,480
interested in in this talk where where

16
00:00:40,480 --> 00:00:41,710
more than half of the parties are

17
00:00:41,710 --> 00:00:44,310
allowed to be corrupted by the adverse a

18
00:00:44,310 --> 00:00:46,810
the protocols we know for oblivious

19
00:00:46,810 --> 00:00:48,490
transfer for for multi-party computation

20
00:00:48,490 --> 00:00:50,740
in the dishonest majority setting rely

21
00:00:50,740 --> 00:00:52,120
on the functionality of oblivious

22
00:00:52,120 --> 00:00:55,030
transfer where Alice has two input

23
00:00:55,030 --> 00:00:58,510
values x0 and x1 and Bob wants to learn

24
00:00:58,510 --> 00:01:01,239
one of them and there are two security

25
00:01:01,239 --> 00:01:03,970
requirements Bob should only learn one

26
00:01:03,970 --> 00:01:05,438
of Alice's values and not the other

27
00:01:05,438 --> 00:01:07,420
value and Alice should not learn which

28
00:01:07,420 --> 00:01:13,050
value Bob receives in order to achieve

29
00:01:13,050 --> 00:01:15,430
oblivious transfer the protocols that we

30
00:01:15,430 --> 00:01:17,260
have for secure multi-party computation

31
00:01:17,260 --> 00:01:20,380
in the dishonest majority setting rely

32
00:01:20,380 --> 00:01:23,580
on public key public key operations

33
00:01:23,580 --> 00:01:26,440
which are substantially slower than

34
00:01:26,440 --> 00:01:29,049
symmetric key cryptography and there's

35
00:01:29,049 --> 00:01:31,000
evidence that this dependence on public

36
00:01:31,000 --> 00:01:33,490
key operations may be inherent in light

37
00:01:33,490 --> 00:01:36,010
of the in light of the result of in

38
00:01:36,010 --> 00:01:37,960
Pagliacci unruh ditch that we cannot

39
00:01:37,960 --> 00:01:40,390
obtain oblivious transfer from one-way

40
00:01:40,390 --> 00:01:43,330
functions in a black box way the

41
00:01:43,330 --> 00:01:45,340
question we ask here is whether we can

42
00:01:45,340 --> 00:01:47,260
improve the efficiency of multi-party

43
00:01:47,260 --> 00:01:49,510
computation by relying on some kind of

44
00:01:49,510 --> 00:01:51,369
special infrastructure between the

45
00:01:51,369 --> 00:01:54,340
parties the infrastructure that were

46
00:01:54,340 --> 00:01:56,650
interested in is based on oblivious

47
00:01:56,650 --> 00:02:01,420
transfer so Killian showed that if the

48
00:02:01,420 --> 00:02:03,040
parties in a network can perform

49
00:02:03,040 --> 00:02:05,110
oblivious transfer then that's enough to

50
00:02:05,110 --> 00:02:07,240
secure the computer any function at all

51
00:02:07,240 --> 00:02:11,200
as long as every pair of parties in the

52
00:02:11,200 --> 00:02:13,499
network can compute oblivious transfer

53
00:02:13,499 --> 00:02:17,170
the question that we ask is what if only

54
00:02:17,170 --> 00:02:18,790
some pairs of parties can compute

55
00:02:18,790 --> 00:02:20,830
oblivious transfer and others are not

56
00:02:20,830 --> 00:02:22,930
allowed to can we still get secure

57
00:02:22,930 --> 00:02:27,099
multi-party computation so here's the

58
00:02:27,099 --> 00:02:31,360
model we have n parties and every pair

59
00:02:31,360 --> 00:02:33,400
of parties is assumed to be connected by

60
00:02:33,400 --> 00:02:37,300
secure point-to-point channels but some

61
00:02:37,300 --> 00:02:38,650
pairs of parties have these special

62
00:02:38,650 --> 00:02:40,959
oblivious transfer channels represented

63
00:02:40,959 --> 00:02:43,870
by edges a pair of party is connected by

64
00:02:43,870 --> 00:02:46,269
an oblivious transfer Channel can

65
00:02:46,269 --> 00:02:47,920
compute oblivious transfer securely as

66
00:02:47,920 --> 00:02:51,010
many times as they want so why is this a

67
00:02:51,010 --> 00:02:54,489
reasonable model first of all the

68
00:02:54,489 --> 00:02:57,610
protocols the way that we know how to

69
00:02:57,610 --> 00:03:00,280
get NPC and a dishonest majority setting

70
00:03:00,280 --> 00:03:03,850
is through oblivious transfer also we

71
00:03:03,850 --> 00:03:05,980
can achieve oblivious transfer not only

72
00:03:05,980 --> 00:03:08,290
from computational assumptions such as

73
00:03:08,290 --> 00:03:11,620
public key crypto but also even in a

74
00:03:11,620 --> 00:03:14,440
world where public key cryptography is

75
00:03:14,440 --> 00:03:16,750
impossible we can still get oblivious

76
00:03:16,750 --> 00:03:19,269
transfer from trusted Hardware in the

77
00:03:19,269 --> 00:03:21,519
force from special-purpose Hardware in

78
00:03:21,519 --> 00:03:25,799
the form of noisy channels also

79
00:03:25,799 --> 00:03:28,989
oblivious transfer the cost of oblivious

80
00:03:28,989 --> 00:03:32,709
transfer can be amortized we can perform

81
00:03:32,709 --> 00:03:35,680
a pair of parties can perform a one-time

82
00:03:35,680 --> 00:03:38,109
setup phase where they run oblivious

83
00:03:38,109 --> 00:03:40,329
transfer several times on random values

84
00:03:40,329 --> 00:03:43,480
and subsequently in a very fast online

85
00:03:43,480 --> 00:03:46,500
phase relying only on one-way functions

86
00:03:46,500 --> 00:03:50,109
they can perform additional that they

87
00:03:50,109 --> 00:03:52,810
can perform additional oblivious

88
00:03:52,810 --> 00:03:56,310
transfers under computational security

89
00:03:56,310 --> 00:03:59,709
so this means that it it makes sense to

90
00:03:59,709 --> 00:04:02,650
consider a network where some pairs of

91
00:04:02,650 --> 00:04:04,930
parties have invested a one-time

92
00:04:04,930 --> 00:04:07,600
computational cost to establish the

93
00:04:07,600 --> 00:04:09,519
ability to perform efficient oblivious

94
00:04:09,519 --> 00:04:11,590
transfer and other pairs of parties

95
00:04:11,590 --> 00:04:13,420
maybe that just joined the network or

96
00:04:13,420 --> 00:04:17,260
something don't have the ability to

97
00:04:17,260 --> 00:04:20,250
perform oblivious transfer efficiently

98
00:04:20,250 --> 00:04:22,450
so the question we ask is given a

99
00:04:22,450 --> 00:04:24,039
network where some pairs of parties can

100
00:04:24,039 --> 00:04:26,650
perform oblivious transfer can we still

101
00:04:26,650 --> 00:04:29,620
perform secure npc in the network

102
00:04:29,620 --> 00:04:33,070
and in particular which edges can we add

103
00:04:33,070 --> 00:04:35,350
to the network which other pairs of

104
00:04:35,350 --> 00:04:39,610
parties can can perform oblivious

105
00:04:39,610 --> 00:04:43,240
transfer so the starting point of our

106
00:04:43,240 --> 00:04:46,720
ever of our investigation is a paper of

107
00:04:46,720 --> 00:04:49,199
Hanukkah Cheyenne khushi Levites who

108
00:04:49,199 --> 00:04:52,570
showed that if ninety-nine percent of

109
00:04:52,570 --> 00:04:54,790
the parties are allowed to be corrupt

110
00:04:54,790 --> 00:04:58,560
there exists a particular sparse network

111
00:04:58,560 --> 00:05:02,199
that allows every pair that allows every

112
00:05:02,199 --> 00:05:04,180
pair of parties to perform oblivious

113
00:05:04,180 --> 00:05:09,280
transfer securely and there are also

114
00:05:09,280 --> 00:05:11,740
some lower bounds which I'll discuss in

115
00:05:11,740 --> 00:05:15,870
a couple of minutes our result is

116
00:05:15,870 --> 00:05:17,949
generalized as the result of Hanukkah

117
00:05:17,949 --> 00:05:19,419
shine khushi Levites rather than just

118
00:05:19,419 --> 00:05:22,060
talking about a particular graph in

119
00:05:22,060 --> 00:05:24,910
which it's possible to get out t we give

120
00:05:24,910 --> 00:05:28,600
a complete characterization of when it

121
00:05:28,600 --> 00:05:30,220
is possible to get oblivious transfer

122
00:05:30,220 --> 00:05:33,190
between a pair of vertices so so given a

123
00:05:33,190 --> 00:05:36,240
graph we give a categorization of

124
00:05:36,240 --> 00:05:38,680
exactly which edges which oblivious

125
00:05:38,680 --> 00:05:40,180
transfer edges can be added to the graph

126
00:05:40,180 --> 00:05:41,740
which pairs of parties can perform

127
00:05:41,740 --> 00:05:43,630
oblivious transfer in an

128
00:05:43,630 --> 00:05:45,669
information-theoretic setting so before

129
00:05:45,669 --> 00:05:48,070
we get into the details let's peek ahead

130
00:05:48,070 --> 00:05:53,650
and look at what's out there so so I'm

131
00:05:53,650 --> 00:05:57,729
let's look at a few examples of for

132
00:05:57,729 --> 00:05:59,440
party graphs where two of the parties

133
00:05:59,440 --> 00:06:01,930
are allowed to be corrupt and see in

134
00:06:01,930 --> 00:06:04,180
which cases we can get ot and in which

135
00:06:04,180 --> 00:06:07,000
cases we can't so in each of these

136
00:06:07,000 --> 00:06:08,770
examples we're going to ask is it

137
00:06:08,770 --> 00:06:09,970
possible to get oblivious transfer

138
00:06:09,970 --> 00:06:13,720
between party and party be in this first

139
00:06:13,720 --> 00:06:15,490
graph there's only a single oblivious

140
00:06:15,490 --> 00:06:19,300
transfer edge and it's between two

141
00:06:19,300 --> 00:06:21,880
parties that are not the parties that

142
00:06:21,880 --> 00:06:25,479
want to do ot and it's even possible

143
00:06:25,479 --> 00:06:27,310
that both of those parties are corrupt

144
00:06:27,310 --> 00:06:29,410
so it seems like there shouldn't be

145
00:06:29,410 --> 00:06:31,389
anything we can do but it turns out as

146
00:06:31,389 --> 00:06:33,880
we'll see you later that we have a

147
00:06:33,880 --> 00:06:35,380
product that it is possible to get

148
00:06:35,380 --> 00:06:38,590
oblivious transfer between an be so

149
00:06:38,590 --> 00:06:39,880
here's another graph that looks very

150
00:06:39,880 --> 00:06:43,689
similar but instead of instead of

151
00:06:43,689 --> 00:06:46,419
CND being connected by an edge we have

152
00:06:46,419 --> 00:06:48,189
ot between one of the parties we're

153
00:06:48,189 --> 00:06:52,149
interested in and and and party day and

154
00:06:52,149 --> 00:06:54,039
even though this looks almost identical

155
00:06:54,039 --> 00:06:56,409
in this setting we cannot get out here

156
00:06:56,409 --> 00:06:59,199
between a and B so here's another

157
00:06:59,199 --> 00:07:00,789
example or we actually have two OT

158
00:07:00,789 --> 00:07:05,379
channels so this seems like it should

159
00:07:05,379 --> 00:07:07,449
provide us more power but still we

160
00:07:07,449 --> 00:07:11,199
cannot get out to you between a and B so

161
00:07:11,199 --> 00:07:13,539
here's another example where the two OT

162
00:07:13,539 --> 00:07:17,709
channels meet at at party B party B has

163
00:07:17,709 --> 00:07:20,469
both of these are two channels and in

164
00:07:20,469 --> 00:07:22,209
this graph we can get oblivious transfer

165
00:07:22,209 --> 00:07:25,629
between a and B and finally if the two

166
00:07:25,629 --> 00:07:27,729
OT channels meet at one of the parties

167
00:07:27,729 --> 00:07:29,649
other than the party we're interested in

168
00:07:29,649 --> 00:07:32,229
then we can also in the setting get ot

169
00:07:32,229 --> 00:07:35,409
between a and B so from these examples

170
00:07:35,409 --> 00:07:39,459
we can see that it's not just the number

171
00:07:39,459 --> 00:07:41,079
of OT channels that are present in the

172
00:07:41,079 --> 00:07:44,799
network or or whether you know each

173
00:07:44,799 --> 00:07:46,389
party is connected to an OT channel

174
00:07:46,389 --> 00:07:50,529
that's relevant the exact structure of

175
00:07:50,529 --> 00:07:54,789
the graph of OT channels is necessary to

176
00:07:54,789 --> 00:07:56,439
determine whether or not we can compute

177
00:07:56,439 --> 00:08:01,869
securely so the key condition that we're

178
00:08:01,869 --> 00:08:03,610
going to be interested in is one of

179
00:08:03,610 --> 00:08:06,489
splitting splits which may be familiar

180
00:08:06,489 --> 00:08:07,899
from those of you who are watching the

181
00:08:07,899 --> 00:08:12,849
Olympics so an N over 2 so given a pair

182
00:08:12,849 --> 00:08:15,610
of vertices a and B an N over to split

183
00:08:15,610 --> 00:08:18,669
is a balanced cut in the graph so a

184
00:08:18,669 --> 00:08:20,679
partition of the vertex vertices into

185
00:08:20,679 --> 00:08:23,289
two sets of size n over 2 so that there

186
00:08:23,289 --> 00:08:24,969
are no edges from one set to the other

187
00:08:24,969 --> 00:08:27,339
set so this is an example of an N over

188
00:08:27,339 --> 00:08:29,409
to split but if we add an edge between

189
00:08:29,409 --> 00:08:32,169
these pairs this pair of vertices then

190
00:08:32,169 --> 00:08:34,479
then edge crosses the cut so it's not an

191
00:08:34,479 --> 00:08:38,169
N over to you split more generally we

192
00:08:38,169 --> 00:08:41,438
define AK split to be a pair of sets of

193
00:08:41,438 --> 00:08:44,259
size K with no edges from one set to the

194
00:08:44,259 --> 00:08:46,660
other set so we can have edges inside

195
00:08:46,660 --> 00:08:49,360
each set we can have edges from either

196
00:08:49,360 --> 00:08:51,880
set to the remaining vertices but there

197
00:08:51,880 --> 00:08:53,980
are no edges from one of the iron sets

198
00:08:53,980 --> 00:08:55,990
to the other orange set so this is an

199
00:08:55,990 --> 00:08:57,590
example of for split and again

200
00:08:57,590 --> 00:08:59,120
if we add an edge between the two sets

201
00:08:59,120 --> 00:09:01,670
then we have an edge crossing the cut so

202
00:09:01,670 --> 00:09:05,990
it's not a for split and we say that a

203
00:09:05,990 --> 00:09:10,010
graph is K unsplit able if it has no k

204
00:09:10,010 --> 00:09:16,300
splits this brings us to our main result

205
00:09:16,300 --> 00:09:20,210
in the dishonest majority setting a pair

206
00:09:20,210 --> 00:09:22,250
of a pair of parties can perform the

207
00:09:22,250 --> 00:09:25,160
oblivious transfer securely exactly when

208
00:09:25,160 --> 00:09:29,690
the graph is n minus T unsplit able so

209
00:09:29,690 --> 00:09:31,310
let's look at what this means in two

210
00:09:31,310 --> 00:09:35,540
parameter settings if half if half of

211
00:09:35,540 --> 00:09:37,970
the parties are allowed to be corrupt

212
00:09:37,970 --> 00:09:39,530
and the other half are guaranteed to be

213
00:09:39,530 --> 00:09:42,350
honest then we can perform we can

214
00:09:42,350 --> 00:09:46,150
perform secure oblivious transfer as

215
00:09:46,150 --> 00:09:49,310
long as for every balanced cut in the

216
00:09:49,310 --> 00:09:51,050
graph there's some edge crossing the cat

217
00:09:51,050 --> 00:09:53,720
and if there's a balanced cut with no

218
00:09:53,720 --> 00:09:55,340
edge crossing then we cannot perform it

219
00:09:55,340 --> 00:09:57,920
with oblivious transfer securely at the

220
00:09:57,920 --> 00:09:59,900
other extreme we can look at the case

221
00:09:59,900 --> 00:10:01,430
where all but one of the parties are

222
00:10:01,430 --> 00:10:02,660
allowed to be corrupt amor only

223
00:10:02,660 --> 00:10:06,700
guaranteed a single honest party so here

224
00:10:06,700 --> 00:10:10,880
the condition is is about one splits so

225
00:10:10,880 --> 00:10:12,620
there's only one vertex in each set of

226
00:10:12,620 --> 00:10:15,320
the partition and the requirement is the

227
00:10:15,320 --> 00:10:17,570
trivial requirement that we can only

228
00:10:17,570 --> 00:10:19,640
perform secure oblivious transfer if

229
00:10:19,640 --> 00:10:21,560
that pair of parties was already

230
00:10:21,560 --> 00:10:24,560
connected by an edge so even if we have

231
00:10:24,560 --> 00:10:26,630
an almost complete graph with a

232
00:10:26,630 --> 00:10:29,630
single-edged missing then that pair of

233
00:10:29,630 --> 00:10:32,630
parties cannot perform secure oblivious

234
00:10:32,630 --> 00:10:34,280
transfer if all but one party is allowed

235
00:10:34,280 --> 00:10:37,910
to be correct just one word about

236
00:10:37,910 --> 00:10:40,370
security for the pinnace work our

237
00:10:40,370 --> 00:10:42,950
protocols achieve perfect information

238
00:10:42,950 --> 00:10:44,840
theoretic security against adaptive semi

239
00:10:44,840 --> 00:10:47,840
honest adversaries and we can compile

240
00:10:47,840 --> 00:10:49,610
this using zero knowledge proofs to

241
00:10:49,610 --> 00:10:51,440
obtain computational security against

242
00:10:51,440 --> 00:10:55,850
adaptive malicious advertise so now I'd

243
00:10:55,850 --> 00:10:57,020
like to talk for a couple of minutes

244
00:10:57,020 --> 00:11:00,170
about lower bounds um so in the

245
00:11:00,170 --> 00:11:01,640
two-party setting where we have no

246
00:11:01,640 --> 00:11:04,150
special channel between the two parties

247
00:11:04,150 --> 00:11:06,740
the work of two and Khushi levites and

248
00:11:06,740 --> 00:11:09,410
of impact Leah so Andrew ditch tells us

249
00:11:09,410 --> 00:11:11,270
that we cannot achieve information

250
00:11:11,270 --> 00:11:12,620
they're a tech security we cannot

251
00:11:12,620 --> 00:11:13,880
achieve oblivious transfer with

252
00:11:13,880 --> 00:11:15,680
information theoretic security between a

253
00:11:15,680 --> 00:11:18,610
and B and what's more we cannot achieve

254
00:11:18,610 --> 00:11:20,630
computational security from one-way

255
00:11:20,630 --> 00:11:23,930
functions in a black box way so building

256
00:11:23,930 --> 00:11:26,180
on this Harnik issue and Khushi Levites

257
00:11:26,180 --> 00:11:29,000
considered the this three party graph

258
00:11:29,000 --> 00:11:32,060
below and reduced it to the previous

259
00:11:32,060 --> 00:11:34,700
case showing that oblivious transfer

260
00:11:34,700 --> 00:11:36,650
between a and B and this three party

261
00:11:36,650 --> 00:11:38,300
graph would give us a protocol for to

262
00:11:38,300 --> 00:11:40,460
party oblivious transfer and so it's

263
00:11:40,460 --> 00:11:44,180
impossible in the same settings so more

264
00:11:44,180 --> 00:11:48,170
generally we can look at a graph that

265
00:11:48,170 --> 00:11:51,320
has a split between a pair of vertices

266
00:11:51,320 --> 00:11:55,010
motor that has an N minus T split so we

267
00:11:55,010 --> 00:11:56,780
have two sets of size n minus T with no

268
00:11:56,780 --> 00:11:59,210
edges from one to the other and if we

269
00:11:59,210 --> 00:12:01,280
assume if we had a protocol for

270
00:12:01,280 --> 00:12:03,230
oblivious transfer between a and B in

271
00:12:03,230 --> 00:12:07,190
this graph then we could use it to

272
00:12:07,190 --> 00:12:08,630
obtain oblivious transfer in the

273
00:12:08,630 --> 00:12:12,440
three-party graph by basically put by

274
00:12:12,440 --> 00:12:13,940
party a and the three-party graph

275
00:12:13,940 --> 00:12:16,430
simulates one set of the partition party

276
00:12:16,430 --> 00:12:17,720
B simulates the other set of the

277
00:12:17,720 --> 00:12:19,550
partition and party see runs the

278
00:12:19,550 --> 00:12:22,550
protocol for the remaining vertices so

279
00:12:22,550 --> 00:12:25,250
this would give us a protocol for OT in

280
00:12:25,250 --> 00:12:27,010
the industry party graph and

281
00:12:27,010 --> 00:12:30,500
consequently it's impossible to get a to

282
00:12:30,500 --> 00:12:33,620
get oblivious transfer in in a graph

283
00:12:33,620 --> 00:12:35,870
that has an N minus T split and this

284
00:12:35,870 --> 00:12:38,690
gives us a lower bound due to Hanukkah

285
00:12:38,690 --> 00:12:41,690
shy and Khushi Levites that in the

286
00:12:41,690 --> 00:12:43,520
dishonest majority setting if a graph

287
00:12:43,520 --> 00:12:46,280
has an N minus T split then we cannot

288
00:12:46,280 --> 00:12:48,260
achieve oblivious transfer between a and

289
00:12:48,260 --> 00:12:52,820
be our main result is a matching upper

290
00:12:52,820 --> 00:12:56,380
bound so we show that for any graph if

291
00:12:56,380 --> 00:12:59,870
it is n minus TN splittable then we can

292
00:12:59,870 --> 00:13:03,550
get oblivious transfer between a and B

293
00:13:04,030 --> 00:13:06,980
before I get into the details are let me

294
00:13:06,980 --> 00:13:09,980
mention one technical tool OT combiners

295
00:13:09,980 --> 00:13:12,080
so let's say we have K candidate

296
00:13:12,080 --> 00:13:13,940
protocols for oblivious transfer and

297
00:13:13,940 --> 00:13:16,580
none of them is quite none of them is

298
00:13:16,580 --> 00:13:19,820
quite secure but but they're almost

299
00:13:19,820 --> 00:13:22,610
secure so for any set of corrupt parties

300
00:13:22,610 --> 00:13:25,420
a majority of the K protocols is secure

301
00:13:25,420 --> 00:13:28,190
then we can compile them to obtain a

302
00:13:28,190 --> 00:13:31,040
single protocol that's secure for any

303
00:13:31,040 --> 00:13:34,550
for all sets of corrupt parties so this

304
00:13:34,550 --> 00:13:37,040
is a way of taking some simple ideas and

305
00:13:37,040 --> 00:13:38,210
combining them to get more complicated

306
00:13:38,210 --> 00:13:40,700
protocols so it's a very nice tool for

307
00:13:40,700 --> 00:13:45,470
building protocols so now I'm going to

308
00:13:45,470 --> 00:13:48,530
talk about the protocol in the case when

309
00:13:48,530 --> 00:13:50,990
half of the parties are corrupt and the

310
00:13:50,990 --> 00:13:53,870
other half are known to be honest so the

311
00:13:53,870 --> 00:13:55,670
protocol of two main phase three main

312
00:13:55,670 --> 00:13:59,360
phases first for every pair of OT

313
00:13:59,360 --> 00:14:00,980
channels that meets at a vertex we're

314
00:14:00,980 --> 00:14:03,260
going to obtain the third of cheap

315
00:14:03,260 --> 00:14:06,020
channel completing the triangle second

316
00:14:06,020 --> 00:14:08,600
by iteratively applying this step we're

317
00:14:08,600 --> 00:14:11,210
going to turn it take each connected

318
00:14:11,210 --> 00:14:13,460
component in the OT graph and turn it

319
00:14:13,460 --> 00:14:17,060
into a click and finally given a graph

320
00:14:17,060 --> 00:14:20,870
that's a that's a disjoint collection of

321
00:14:20,870 --> 00:14:23,480
clicks we're going to obtain a protocol

322
00:14:23,480 --> 00:14:28,070
for RT so the first step of completing

323
00:14:28,070 --> 00:14:30,620
triangles uses some simple protocols and

324
00:14:30,620 --> 00:14:33,920
combiners complete obtaining clicks is

325
00:14:33,920 --> 00:14:35,870
done by iterating the triangle

326
00:14:35,870 --> 00:14:38,120
completion protocol and I'm going to

327
00:14:38,120 --> 00:14:39,590
focus on the third step without of

328
00:14:39,590 --> 00:14:41,390
turning a graph that's a collection of

329
00:14:41,390 --> 00:14:44,180
clicks taking a graph that's a

330
00:14:44,180 --> 00:14:45,500
collection of disjoint clicks and

331
00:14:45,500 --> 00:14:48,140
obtaining oblivious transfer so first

332
00:14:48,140 --> 00:14:50,870
let's look at a graph that consists of a

333
00:14:50,870 --> 00:14:53,240
single click plus the two vertices we're

334
00:14:53,240 --> 00:14:57,190
interested in a and B so in this graph

335
00:14:57,190 --> 00:15:00,170
since we know that oblivious transfer is

336
00:15:00,170 --> 00:15:01,820
enough to get secure multi-party

337
00:15:01,820 --> 00:15:04,240
computation if we have a complete graph

338
00:15:04,240 --> 00:15:08,060
we can use we can run secure npc on this

339
00:15:08,060 --> 00:15:11,810
clique and we can we can have as long as

340
00:15:11,810 --> 00:15:15,560
one party in the clique is honest then

341
00:15:15,560 --> 00:15:17,720
the cliq can simulate a single trusted

342
00:15:17,720 --> 00:15:22,160
party using secret sharing and and and

343
00:15:22,160 --> 00:15:26,420
end NBC techniques so as long as a

344
00:15:26,420 --> 00:15:29,080
single party and the clique is honest

345
00:15:29,080 --> 00:15:31,430
then the cliq functions of the trusted

346
00:15:31,430 --> 00:15:33,950
party and can mediate oblivious transfer

347
00:15:33,950 --> 00:15:37,010
between a and B so this lets us so so

348
00:15:37,010 --> 00:15:39,519
this lets us get OTA between a and B

349
00:15:39,519 --> 00:15:42,470
so now we have a graph that is a

350
00:15:42,470 --> 00:15:45,379
collection of disjoint clicks and we're

351
00:15:45,379 --> 00:15:48,230
going to define a series of protocols so

352
00:15:48,230 --> 00:15:51,410
for each party I in the graph define let

353
00:15:51,410 --> 00:15:54,589
protocol pie I be an execution of the

354
00:15:54,589 --> 00:15:57,259
cliq protocol I just described on the

355
00:15:57,259 --> 00:15:59,449
graph consisting of the cliq containing

356
00:15:59,449 --> 00:16:04,189
party I plus parties a and B and then

357
00:16:04,189 --> 00:16:06,769
this gives us n protocols one for each

358
00:16:06,769 --> 00:16:07,999
party in the graph and we're going to

359
00:16:07,999 --> 00:16:13,660
run a combiner on these n protocols so

360
00:16:13,660 --> 00:16:18,050
for each protocol we know that the cliq

361
00:16:18,050 --> 00:16:19,429
protocol will be secure if the

362
00:16:19,429 --> 00:16:21,379
corresponding click contains some honest

363
00:16:21,379 --> 00:16:26,029
party the full protocol will be secure

364
00:16:26,029 --> 00:16:27,800
as long as a majority of the protocols

365
00:16:27,800 --> 00:16:30,589
we're combining our secure so in

366
00:16:30,589 --> 00:16:34,129
particular whenever I is honest protocol

367
00:16:34,129 --> 00:16:36,350
pi is honest because there's an honest

368
00:16:36,350 --> 00:16:38,720
party in the corresponding click so in

369
00:16:38,720 --> 00:16:40,309
order for the combined protocol to be

370
00:16:40,309 --> 00:16:44,179
insecure protocol for every dishonest

371
00:16:44,179 --> 00:16:47,629
party I a protocol pi I needs to be

372
00:16:47,629 --> 00:16:52,959
insecure in order for this to be true

373
00:16:52,959 --> 00:16:55,519
every clique containing a dishonest

374
00:16:55,519 --> 00:16:57,920
party must contain only dishonest

375
00:16:57,920 --> 00:17:02,410
parties so if the protocol is insecure

376
00:17:02,410 --> 00:17:07,398
on honest parties must be connected only

377
00:17:07,398 --> 00:17:10,010
to honest parties and dishonest parties

378
00:17:10,010 --> 00:17:11,659
must be connected only to dishonest

379
00:17:11,659 --> 00:17:14,630
parties and there are n over two of each

380
00:17:14,630 --> 00:17:16,760
so this means that if the protocol is

381
00:17:16,760 --> 00:17:20,179
insecure then we have n over two honest

382
00:17:20,179 --> 00:17:22,250
parties and n over 2 dishonest parties

383
00:17:22,250 --> 00:17:24,380
with no edges from the honest parties to

384
00:17:24,380 --> 00:17:26,720
the dishonest parties and this gives us

385
00:17:26,720 --> 00:17:29,559
exactly an N over to split in the graph

386
00:17:29,559 --> 00:17:32,029
so what this means is if the protocol is

387
00:17:32,029 --> 00:17:34,549
insecure then there's an N over to split

388
00:17:34,549 --> 00:17:36,460
in the graph or said the other way

389
00:17:36,460 --> 00:17:39,380
whenever the graph is n over 2 unsplit

390
00:17:39,380 --> 00:17:43,820
able then the protocol is secure so this

391
00:17:43,820 --> 00:17:45,799
gives us a protocol a matching upper

392
00:17:45,799 --> 00:17:48,529
bound for the case where T equals n over

393
00:17:48,529 --> 00:17:52,730
2 we get a secure oblivious transfer

394
00:17:52,730 --> 00:17:55,130
ever whenever the graph is n over 2 on

395
00:17:55,130 --> 00:17:59,240
splittable now let me talk about the the

396
00:17:59,240 --> 00:18:02,330
general case when we have us when the

397
00:18:02,330 --> 00:18:03,770
number of crap parties is greater than

398
00:18:03,770 --> 00:18:06,740
ever to our approach here is going is

399
00:18:06,740 --> 00:18:09,230
will be to take an a graph an instance

400
00:18:09,230 --> 00:18:13,850
of the problem and break it in break it

401
00:18:13,850 --> 00:18:17,110
into many smaller instances basically

402
00:18:17,110 --> 00:18:19,730
we're going to try removing each

403
00:18:19,730 --> 00:18:22,880
possible vertex and running the and

404
00:18:22,880 --> 00:18:24,620
running recursively running a protocol

405
00:18:24,620 --> 00:18:28,900
on the smaller graph so to do this we

406
00:18:28,900 --> 00:18:33,530
need to argue two things we need to have

407
00:18:33,530 --> 00:18:36,110
that that when we were that when we

408
00:18:36,110 --> 00:18:39,470
remove a vertex we preserve the split

409
00:18:39,470 --> 00:18:41,570
ability criterium so that we can

410
00:18:41,570 --> 00:18:43,640
recursively apply our protocols with the

411
00:18:43,640 --> 00:18:46,309
smaller graphs and we also need that in

412
00:18:46,309 --> 00:18:49,130
a majority of the smaller graphs we will

413
00:18:49,130 --> 00:18:52,309
have one fewer corrupt party so that we

414
00:18:52,309 --> 00:18:54,590
can so that the protocol so that the

415
00:18:54,590 --> 00:18:56,480
smaller protocols are secure I'm not

416
00:18:56,480 --> 00:18:57,860
going to go into the details here but

417
00:18:57,860 --> 00:19:00,380
then we run a combined but we have both

418
00:19:00,380 --> 00:19:02,450
of these conditions and then we run a

419
00:19:02,450 --> 00:19:05,030
combiner on the end smaller protocols

420
00:19:05,030 --> 00:19:07,880
and this gives us a protocol inductively

421
00:19:07,880 --> 00:19:09,980
this gives us a protocol for the

422
00:19:09,980 --> 00:19:13,040
dishonest majority case where our base

423
00:19:13,040 --> 00:19:15,470
case is is the protocol I just described

424
00:19:15,470 --> 00:19:17,390
where half of the parties are honest and

425
00:19:17,390 --> 00:19:20,090
half are correct okay this gives us a

426
00:19:20,090 --> 00:19:24,410
protocol but what about efficiency we're

427
00:19:24,410 --> 00:19:26,030
taking a graph and we're breaking it

428
00:19:26,030 --> 00:19:28,910
into n smaller graphs and then we're

429
00:19:28,910 --> 00:19:31,280
recursing so each of these smaller

430
00:19:31,280 --> 00:19:33,140
graphs is broken into smaller graphs and

431
00:19:33,140 --> 00:19:35,390
so on until at the bottom we get many

432
00:19:35,390 --> 00:19:39,950
many instances of the base case so this

433
00:19:39,950 --> 00:19:42,530
gives us to t minus n levels of

434
00:19:42,530 --> 00:19:45,320
recursion so in general it will not be

435
00:19:45,320 --> 00:19:48,590
computationally efficient but in the

436
00:19:48,590 --> 00:19:50,929
special case where n over 2 plus a

437
00:19:50,929 --> 00:19:54,110
constant parties where the number of

438
00:19:54,110 --> 00:19:55,600
creb parties is n over 2 plus a constant

439
00:19:55,600 --> 00:19:59,960
then we can obtain a closet week we we

440
00:19:59,960 --> 00:20:02,360
can obtain closet we gotta-we the

441
00:20:02,360 --> 00:20:04,100
protocol will be quasi polynomial time

442
00:20:04,100 --> 00:20:05,330
with perfect information theoretic

443
00:20:05,330 --> 00:20:06,429
security

444
00:20:06,429 --> 00:20:09,070
or using extension we can obtain a

445
00:20:09,070 --> 00:20:12,159
protocol that is polynomial time with

446
00:20:12,159 --> 00:20:14,860
computational security we also have a

447
00:20:14,860 --> 00:20:18,129
second alternate protocol that's that I

448
00:20:18,129 --> 00:20:20,169
didn't describe that will be that is

449
00:20:20,169 --> 00:20:22,570
polynomial time if almost all of the

450
00:20:22,570 --> 00:20:24,789
parties are corrupt what about in

451
00:20:24,789 --> 00:20:29,279
between in general it won't be efficient

452
00:20:29,279 --> 00:20:33,159
but the property are but actually our

453
00:20:33,159 --> 00:20:35,320
theorem condition of testing whether the

454
00:20:35,320 --> 00:20:37,539
graph is splittable is not something we

455
00:20:37,539 --> 00:20:39,340
know how to test efficiently in general

456
00:20:39,340 --> 00:20:41,710
it's NP hard to determine whether the

457
00:20:41,710 --> 00:20:43,330
graph has a split it's a special case of

458
00:20:43,330 --> 00:20:44,919
sub graph isomorphism which we know to

459
00:20:44,919 --> 00:20:48,999
be np-hard so let me close by just

460
00:20:48,999 --> 00:20:52,889
restating the main result I and

461
00:20:52,889 --> 00:20:55,029
combining it with what we know in the

462
00:20:55,029 --> 00:20:58,389
honest majority setting so a pair of

463
00:20:58,389 --> 00:21:00,509
vertices can perform oblivious transfer

464
00:21:00,509 --> 00:21:04,869
in an OT network if and only if either

465
00:21:04,869 --> 00:21:07,720
we have an honest majority or in the

466
00:21:07,720 --> 00:21:09,850
dishonest majority of setting if the

467
00:21:09,850 --> 00:21:13,210
graph is n minus T unsplit able thank

468
00:21:13,210 --> 00:21:15,330
you

