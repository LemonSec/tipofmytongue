1
00:00:03,859 --> 00:00:07,200
hi everyone and me here this is joint

2
00:00:07,200 --> 00:00:09,420
work with Daniel Cain and Phil Rockaway

3
00:00:09,420 --> 00:00:12,599
and we're interested in using gigantic

4
00:00:12,599 --> 00:00:15,330
keys as a means to inhibit their

5
00:00:15,330 --> 00:00:18,570
exfiltration the backdrop for all this

6
00:00:18,570 --> 00:00:20,940
for us was the Snowden revelations a few

7
00:00:20,940 --> 00:00:23,760
years back which showed large government

8
00:00:23,760 --> 00:00:26,250
programs aimed at compromising privacy

9
00:00:26,250 --> 00:00:29,760
and for us it led us to kind of rethink

10
00:00:29,760 --> 00:00:32,279
what adversaries should look like in

11
00:00:32,279 --> 00:00:34,950
talks and papers in our community we

12
00:00:34,950 --> 00:00:37,350
kind of view them as little pictures

13
00:00:37,350 --> 00:00:40,199
that are more cute than scary and we set

14
00:00:40,199 --> 00:00:41,999
up the rules that they follow we tell

15
00:00:41,999 --> 00:00:45,239
them they have to in our models employ

16
00:00:45,239 --> 00:00:46,949
certain types of Oracle's and do this

17
00:00:46,949 --> 00:00:50,239
and not do that and they obey them and

18
00:00:50,239 --> 00:00:53,760
somehow the real world learn now looks a

19
00:00:53,760 --> 00:00:55,229
little different not only does the

20
00:00:55,229 --> 00:00:57,809
adversary look a little scarier but it

21
00:00:57,809 --> 00:01:00,149
has enormous resources billions of

22
00:01:00,149 --> 00:01:03,059
dollars in budget tens of thousands of

23
00:01:03,059 --> 00:01:05,970
employees and it's doing things that

24
00:01:05,970 --> 00:01:08,189
don't follow our rules it's planting

25
00:01:08,189 --> 00:01:11,130
malware opening packages and installing

26
00:01:11,130 --> 00:01:12,960
things while computers are in transit

27
00:01:12,960 --> 00:01:15,570
planting backdoors and standards and so

28
00:01:15,570 --> 00:01:19,049
forth so in this brave new world one

29
00:01:19,049 --> 00:01:21,060
thing we thought we might consider is

30
00:01:21,060 --> 00:01:22,920
what sometimes called an advanced

31
00:01:22,920 --> 00:01:25,170
persistent threat and according to

32
00:01:25,170 --> 00:01:28,530
Wikipedia it's something it's malware

33
00:01:28,530 --> 00:01:32,250
planted on your computer that aims to in

34
00:01:32,250 --> 00:01:35,070
particular exfiltrate your key so for

35
00:01:35,070 --> 00:01:36,600
example if you're using a symmetric

36
00:01:36,600 --> 00:01:39,180
encryption scheme like here then the

37
00:01:39,180 --> 00:01:41,759
malware sitting here has direct access

38
00:01:41,759 --> 00:01:44,399
to your key and could simply try to use

39
00:01:44,399 --> 00:01:46,679
your network to send it out where it

40
00:01:46,679 --> 00:01:48,679
will be picked up by an accomplice

41
00:01:48,679 --> 00:01:51,539
adversary and knowing the NSA's

42
00:01:51,539 --> 00:01:56,039
capabilities in malware this looked like

43
00:01:56,039 --> 00:01:59,250
something potential interest once an

44
00:01:59,250 --> 00:02:01,109
adversary can do this it may seem like

45
00:02:01,109 --> 00:02:02,670
you're lost there's nothing you can do

46
00:02:02,670 --> 00:02:04,530
if you're if your keys can simply be

47
00:02:04,530 --> 00:02:08,399
exfiltrated adi shamir disagreed and in

48
00:02:08,399 --> 00:02:10,919
RSA conference a few years back he

49
00:02:10,919 --> 00:02:12,629
suggested that you make secrets

50
00:02:12,629 --> 00:02:17,250
incredibly large and since you might

51
00:02:17,250 --> 00:02:20,580
imagine that there are some limitations

52
00:02:20,580 --> 00:02:23,340
on exfiltration it costs more and is

53
00:02:23,340 --> 00:02:24,960
more difficult and takes longer to

54
00:02:24,960 --> 00:02:26,610
accelerate a lot of stuff than a small

55
00:02:26,610 --> 00:02:28,950
amount of stuff and it's also possible

56
00:02:28,950 --> 00:02:31,260
to detect it if it's going on for a long

57
00:02:31,260 --> 00:02:34,260
time then this might get us some

58
00:02:34,260 --> 00:02:38,640
protection in the case that the secret

59
00:02:38,640 --> 00:02:42,030
is a key this corresponds to a model

60
00:02:42,030 --> 00:02:44,220
that was defined well before the Snowden

61
00:02:44,220 --> 00:02:47,550
revelations or Oddie's Annunciation of

62
00:02:47,550 --> 00:02:50,280
that idea in Frisian twork in the theory

63
00:02:50,280 --> 00:02:53,790
community starting with Zimbabwe in 2006

64
00:02:53,790 --> 00:02:55,800
and it evolved through the series of

65
00:02:55,800 --> 00:02:57,330
papers into what's now called the

66
00:02:57,330 --> 00:03:00,750
bounded retrieval model and this court

67
00:03:00,750 --> 00:03:03,330
by Alvin Doris and wicks in a survey in

68
00:03:03,330 --> 00:03:06,870
2010 says exactly the same thing that if

69
00:03:06,870 --> 00:03:09,300
you imagine that the malware can

70
00:03:09,300 --> 00:03:12,270
exfiltrate say 10 gigabytes you put some

71
00:03:12,270 --> 00:03:15,060
limit on it then by making keys longer

72
00:03:15,060 --> 00:03:16,770
than that you might hope to get some

73
00:03:16,770 --> 00:03:19,650
some security and the model has kind of

74
00:03:19,650 --> 00:03:22,350
three components first of all very large

75
00:03:22,350 --> 00:03:26,130
keys secondly leakage corresponding to

76
00:03:26,130 --> 00:03:28,170
what the adversary X filtrates and the

77
00:03:28,170 --> 00:03:30,209
only assumption about it is that it's

78
00:03:30,209 --> 00:03:32,550
short of the length of the key but

79
00:03:32,550 --> 00:03:34,560
otherwise it's arbitrary information

80
00:03:34,560 --> 00:03:36,450
about the key and you want to maintain

81
00:03:36,450 --> 00:03:38,459
security even in the presence of that

82
00:03:38,459 --> 00:03:41,880
leakage when you have a key as big as

83
00:03:41,880 --> 00:03:44,880
this will be very impractical to have to

84
00:03:44,880 --> 00:03:48,630
run a scheme which actually processes it

85
00:03:48,630 --> 00:03:50,760
for every encryption and so the third

86
00:03:50,760 --> 00:03:53,760
requirement locality says that when you

87
00:03:53,760 --> 00:03:56,130
use the key for one encryption you make

88
00:03:56,130 --> 00:03:58,680
say a small number of probes into it 500

89
00:03:58,680 --> 00:04:02,459
or so and by using only a limited part

90
00:04:02,459 --> 00:04:04,290
of the key you you have some efficiency

91
00:04:04,290 --> 00:04:06,390
so they treated a large number of

92
00:04:06,390 --> 00:04:08,430
problems in this model including being

93
00:04:08,430 --> 00:04:09,900
able to give public key encryption

94
00:04:09,900 --> 00:04:15,120
schemes so we came into this asking

95
00:04:15,120 --> 00:04:18,630
whether something like this could be a

96
00:04:18,630 --> 00:04:22,860
practical defense against malware apts

97
00:04:22,860 --> 00:04:27,180
and in that framework we decided to look

98
00:04:27,180 --> 00:04:28,860
at

99
00:04:28,860 --> 00:04:31,200
the problem with a bit of a practical

100
00:04:31,200 --> 00:04:33,000
slant and for that for us that meant

101
00:04:33,000 --> 00:04:35,220
first of all looking at symmetric rather

102
00:04:35,220 --> 00:04:36,870
than asymmetric encryption as the

103
00:04:36,870 --> 00:04:39,780
permitted more commonly used and hence

104
00:04:39,780 --> 00:04:41,280
for what happened is that you would have

105
00:04:41,280 --> 00:04:43,620
an encryption function here which takes

106
00:04:43,620 --> 00:04:46,290
the message it has access to the big key

107
00:04:46,290 --> 00:04:48,510
the decryption function of the other end

108
00:04:48,510 --> 00:04:50,670
also has access to the same big key on

109
00:04:50,670 --> 00:04:53,330
this same machine there's your leakage

110
00:04:53,330 --> 00:04:55,530
represented by a leak function that

111
00:04:55,530 --> 00:04:57,660
takes this key and exfiltrate some

112
00:04:57,660 --> 00:05:00,240
function of it and the adversary gets

113
00:05:00,240 --> 00:05:03,060
the ciphertext and the leakage and it's

114
00:05:03,060 --> 00:05:05,460
trying to compromise security of this

115
00:05:05,460 --> 00:05:09,330
message in this case these three

116
00:05:09,330 --> 00:05:12,270
elements correspond to again the key

117
00:05:12,270 --> 00:05:14,670
being very large but now the symmetric

118
00:05:14,670 --> 00:05:15,990
key recall it KK

119
00:05:15,990 --> 00:05:19,110
little K bits long maybe a terabyte the

120
00:05:19,110 --> 00:05:22,080
leakage is some arbitrary function of

121
00:05:22,080 --> 00:05:24,690
the big key and would be limited say for

122
00:05:24,690 --> 00:05:26,760
example to 10% of the length of the key

123
00:05:26,760 --> 00:05:29,580
and locality would correspond to that

124
00:05:29,580 --> 00:05:31,650
these two functions would only make a

125
00:05:31,650 --> 00:05:33,600
small number of probes into the key say

126
00:05:33,600 --> 00:05:37,230
about 500 we want in this context to

127
00:05:37,230 --> 00:05:39,300
give schemes that are not only efficient

128
00:05:39,300 --> 00:05:42,780
but we want to give concrete non

129
00:05:42,780 --> 00:05:45,060
asymptotic bounds an adversary advantage

130
00:05:45,060 --> 00:05:48,330
which of course translates also to

131
00:05:48,330 --> 00:05:50,430
efficiency since you can use smaller

132
00:05:50,430 --> 00:05:52,650
parameters and you know exactly what

133
00:05:52,650 --> 00:05:54,600
you're getting and we're willing in this

134
00:05:54,600 --> 00:05:56,250
context to use a random Oracle model

135
00:05:56,250 --> 00:06:01,700
unlike the prior theoretical works so

136
00:06:01,700 --> 00:06:05,660
rough briefly what we did then is we

137
00:06:05,660 --> 00:06:09,300
give a general lemma information

138
00:06:09,300 --> 00:06:11,430
theoretic lemma on a problem called sub

139
00:06:11,430 --> 00:06:14,490
key prediction which asks how hard it is

140
00:06:14,490 --> 00:06:17,820
for an address 3 is given leakage on a

141
00:06:17,820 --> 00:06:20,040
big key to say what are a small number

142
00:06:20,040 --> 00:06:23,610
of random bit positions in that key from

143
00:06:23,610 --> 00:06:25,890
that we can build a key encapsulation

144
00:06:25,890 --> 00:06:27,810
scheme which shows how you get small

145
00:06:27,810 --> 00:06:30,990
random looking keys out of a big key and

146
00:06:30,990 --> 00:06:32,610
thence we can get symmetric encryption

147
00:06:32,610 --> 00:06:36,360
in the bounded retrieval model the first

148
00:06:36,360 --> 00:06:38,340
scheme is around worker model 1 a

149
00:06:38,340 --> 00:06:41,220
slightly less efficient standard model

150
00:06:41,220 --> 00:06:43,980
these provide only privacy and then

151
00:06:43,980 --> 00:06:45,660
finally we look at what we call hatched

152
00:06:45,660 --> 00:06:48,030
encryption as a way to get a little bit

153
00:06:48,030 --> 00:06:51,000
of integrity so on the rest I'll tell

154
00:06:51,000 --> 00:06:53,280
you a little more about of all this

155
00:06:53,280 --> 00:06:55,380
mostly focusing on the random Oracle

156
00:06:55,380 --> 00:06:58,020
scheme so I'll start with a little more

157
00:06:58,020 --> 00:07:00,300
precise rendition of the security goal

158
00:07:00,300 --> 00:07:02,670
and this is called leakage and

159
00:07:02,670 --> 00:07:04,350
distinguishability that symbol there is

160
00:07:04,350 --> 00:07:06,870
not a one it's an outstanding for

161
00:07:06,870 --> 00:07:09,270
leakage we're in the same setting over

162
00:07:09,270 --> 00:07:12,120
here and we associate to any adversary a

163
00:07:12,120 --> 00:07:14,550
number this is known as antartic so it's

164
00:07:14,550 --> 00:07:17,760
just a number it's advantage to been

165
00:07:17,760 --> 00:07:19,020
breaking this leakage

166
00:07:19,020 --> 00:07:21,990
indistinguishability and informally what

167
00:07:21,990 --> 00:07:24,570
it means is that it's the probability or

168
00:07:24,570 --> 00:07:26,460
advantage of the adversary in

169
00:07:26,460 --> 00:07:28,470
compromising security of encrypted

170
00:07:28,470 --> 00:07:31,410
messages when it's given some function

171
00:07:31,410 --> 00:07:36,050
some information about the key and that

172
00:07:36,050 --> 00:07:38,280
corresponds to a function of the key of

173
00:07:38,280 --> 00:07:40,590
the adversary's choice a little more

174
00:07:40,590 --> 00:07:42,720
precisely in our usual cryptographic

175
00:07:42,720 --> 00:07:46,169
games the adversary is aiming to figure

176
00:07:46,169 --> 00:07:48,540
out a randomly chosen challenge bit and

177
00:07:48,540 --> 00:07:51,990
in the following process we're in the

178
00:07:51,990 --> 00:07:54,210
random Oracle model so it gets access to

179
00:07:54,210 --> 00:07:56,100
random Oracle and the first thing it

180
00:07:56,100 --> 00:07:58,370
does is specify a leakage function

181
00:07:58,370 --> 00:08:00,840
importantly the leakage function itself

182
00:08:00,840 --> 00:08:02,970
has access to the random Oracle and

183
00:08:02,970 --> 00:08:05,400
it'll map a big key to some amount of

184
00:08:05,400 --> 00:08:07,260
leakage of length somewhat shorter than

185
00:08:07,260 --> 00:08:10,800
K once that function is specified a big

186
00:08:10,800 --> 00:08:13,350
key is chosen at random and the leakage

187
00:08:13,350 --> 00:08:15,270
is computed by applying the function to

188
00:08:15,270 --> 00:08:17,220
that key and that's returned to the

189
00:08:17,220 --> 00:08:20,070
adversary now the adversary attacks the

190
00:08:20,070 --> 00:08:22,260
encryption in a kind of typical way it

191
00:08:22,260 --> 00:08:24,060
can ask for the encryption of a message

192
00:08:24,060 --> 00:08:26,310
and depending on the challenge bit

193
00:08:26,310 --> 00:08:28,260
either gets really the encryption of

194
00:08:28,260 --> 00:08:30,270
that message under the big key or the

195
00:08:30,270 --> 00:08:32,610
encryption of the string of all zeroes

196
00:08:32,610 --> 00:08:35,039
and it's got to figure out which of the

197
00:08:35,039 --> 00:08:37,950
two it got its advantage will depend on

198
00:08:37,950 --> 00:08:40,409
its resources these include things like

199
00:08:40,409 --> 00:08:42,599
the number of queries to this Oracle the

200
00:08:42,599 --> 00:08:44,610
maximum length of messages and its

201
00:08:44,610 --> 00:08:47,370
running time but also what fraction of

202
00:08:47,370 --> 00:08:48,630
bits of the

203
00:08:48,630 --> 00:08:51,360
key it it has been able to run allowed

204
00:08:51,360 --> 00:08:55,380
to leak okay so our scheme is quite

205
00:08:55,380 --> 00:08:58,760
simply described and it looks like this

206
00:08:58,760 --> 00:09:01,680
we have our encryption function here

207
00:09:01,680 --> 00:09:05,370
access to random Oracle it's as it's

208
00:09:05,370 --> 00:09:07,620
given the big key kk8 which it must make

209
00:09:07,620 --> 00:09:10,110
a small number of probes and the message

210
00:09:10,110 --> 00:09:12,900
n the first thing it does is pick a

211
00:09:12,900 --> 00:09:16,380
random selector say o 256 bit string

212
00:09:16,380 --> 00:09:19,500
something like that and now based on the

213
00:09:19,500 --> 00:09:21,240
it applies around of Oracle to that

214
00:09:21,240 --> 00:09:24,360
selector to get probes so what's a probe

215
00:09:24,360 --> 00:09:26,370
it's just you're poking your finger into

216
00:09:26,370 --> 00:09:29,640
the big key it's an index between 1 and

217
00:09:29,640 --> 00:09:31,770
the length of the key and we have P such

218
00:09:31,770 --> 00:09:35,820
indices those indices specify bits of

219
00:09:35,820 --> 00:09:38,370
the big key and we collect up all those

220
00:09:38,370 --> 00:09:40,650
bits and we call them J and that's our

221
00:09:40,650 --> 00:09:43,410
first pre key that will have some level

222
00:09:43,410 --> 00:09:44,820
of security and particularly be

223
00:09:44,820 --> 00:09:48,540
unpredictable but not a pseudo-random by

224
00:09:48,540 --> 00:09:50,670
applying a random Oracle to a 10 or we

225
00:09:50,670 --> 00:09:52,170
get something that looks pseudo-random

226
00:09:52,170 --> 00:09:55,980
and finally we just use that key little

227
00:09:55,980 --> 00:09:58,710
give the key K to apply some say

228
00:09:58,710 --> 00:10:00,810
standard symmetric encryption scheme

229
00:10:00,810 --> 00:10:02,850
which works with small keys like some

230
00:10:02,850 --> 00:10:05,940
AES mode of operation we return the

231
00:10:05,940 --> 00:10:09,060
ciphertext of the standard scheme plus

232
00:10:09,060 --> 00:10:11,430
the selector because once you need to

233
00:10:11,430 --> 00:10:15,570
select in order to decrypt and then

234
00:10:15,570 --> 00:10:18,090
that's that's it for the scheme looks

235
00:10:18,090 --> 00:10:22,830
like so now we turn to analyzing the

236
00:10:22,830 --> 00:10:25,500
scheme and what our result is about is

237
00:10:25,500 --> 00:10:27,510
saying consider some adversary attacking

238
00:10:27,510 --> 00:10:30,000
it we've defined our notional goal of

239
00:10:30,000 --> 00:10:31,400
security it's this leakage

240
00:10:31,400 --> 00:10:35,370
indistinguishability and it has some

241
00:10:35,370 --> 00:10:37,110
advantage and we want an upper bound on

242
00:10:37,110 --> 00:10:39,030
it and we give this upper bound as a

243
00:10:39,030 --> 00:10:41,520
function of the different resources of

244
00:10:41,520 --> 00:10:43,860
the adversary the queries time messages

245
00:10:43,860 --> 00:10:47,280
and of the fraction of bits leaked so

246
00:10:47,280 --> 00:10:48,780
looking at this bound it has some

247
00:10:48,780 --> 00:10:50,970
conventional terms kind of corresponding

248
00:10:50,970 --> 00:10:53,460
to the symmetric crypto here and the

249
00:10:53,460 --> 00:10:57,200
selector and they can be made small in

250
00:10:57,200 --> 00:11:01,520
usual ways or small and someone are not

251
00:11:01,520 --> 00:11:03,140
that interesting so we forget about

252
00:11:03,140 --> 00:11:05,330
those and we turn to what's really

253
00:11:05,330 --> 00:11:08,030
related to the big key part of the

254
00:11:08,030 --> 00:11:10,610
problem which is that the adversary

255
00:11:10,610 --> 00:11:13,070
advantage decreases exponentially in the

256
00:11:13,070 --> 00:11:16,400
number of probes so as you increase the

257
00:11:16,400 --> 00:11:20,090
number of probes there's some epsilon

258
00:11:20,090 --> 00:11:23,930
here and that will quickly pull down the

259
00:11:23,930 --> 00:11:26,540
our district advantage these functions

260
00:11:26,540 --> 00:11:29,300
are fairly complex so you start from the

261
00:11:29,300 --> 00:11:31,670
binary entropy function this W is some

262
00:11:31,670 --> 00:11:35,870
kind of inverse of it and and that's

263
00:11:35,870 --> 00:11:38,090
applied to the fraction of bits that are

264
00:11:38,090 --> 00:11:40,940
leaked it's kind of hard to get a sense

265
00:11:40,940 --> 00:11:43,250
of these functions from the formulas but

266
00:11:43,250 --> 00:11:45,740
we might plug in some numbers in the

267
00:11:45,740 --> 00:11:48,010
following way let's say we want the

268
00:11:48,010 --> 00:11:51,200
exponent in that denominator to be 256

269
00:11:51,200 --> 00:11:53,450
which would be reasonable security there

270
00:11:53,450 --> 00:11:56,510
and we have decided on some amount of

271
00:11:56,510 --> 00:11:58,520
fraction of leakage we want to tolerate

272
00:11:58,520 --> 00:12:00,830
then we can ask how many probes would it

273
00:12:00,830 --> 00:12:03,260
take for that to become true and

274
00:12:03,260 --> 00:12:05,180
according to this table if you want to

275
00:12:05,180 --> 00:12:08,590
tolerate 10% leakage then you would need

276
00:12:08,590 --> 00:12:11,510
468 probes if you want to tolerate 30%

277
00:12:11,510 --> 00:12:14,750
leakage 845 50 percent leakage about

278
00:12:14,750 --> 00:12:18,020
1,500 pros so this quite concretely

279
00:12:18,020 --> 00:12:20,450
tells you what um what you get out of

280
00:12:20,450 --> 00:12:26,660
this okay so so in the rest I'll try to

281
00:12:26,660 --> 00:12:29,830
give you some more technical sense about

282
00:12:29,830 --> 00:12:32,960
the elements of this scheme and it had

283
00:12:32,960 --> 00:12:35,840
three steps the first one was by making

284
00:12:35,840 --> 00:12:37,790
a small number of probes into the big

285
00:12:37,790 --> 00:12:40,790
key to extract a key that's somewhat

286
00:12:40,790 --> 00:12:43,700
secure unpredictable and this is what

287
00:12:43,700 --> 00:12:45,800
some the subject of our sub key

288
00:12:45,800 --> 00:12:48,800
prediction lemma the Lama itself is not

289
00:12:48,800 --> 00:12:51,430
about encryption there is no crypto or

290
00:12:51,430 --> 00:12:54,020
random Oracle's anywhere in it it just

291
00:12:54,020 --> 00:12:55,790
considers the simple information

292
00:12:55,790 --> 00:12:58,100
theoretic problem which is that you pick

293
00:12:58,100 --> 00:13:01,940
a large key well at this point the

294
00:13:01,940 --> 00:13:03,620
length is a parameter some key at random

295
00:13:03,620 --> 00:13:06,710
and then apply some leakage function to

296
00:13:06,710 --> 00:13:10,360
it to get L you also pick some round

297
00:13:10,360 --> 00:13:12,490
probes into the key that means some

298
00:13:12,490 --> 00:13:16,209
indices here in the range 1 through K P

299
00:13:16,209 --> 00:13:18,279
of them and look at the corresponding

300
00:13:18,279 --> 00:13:23,800
bits of the key and call that J now you

301
00:13:23,800 --> 00:13:26,050
give the adversary the leakage and you

302
00:13:26,050 --> 00:13:27,970
tell it what physicians you probed of

303
00:13:27,970 --> 00:13:29,350
course you don't give the addressee the

304
00:13:29,350 --> 00:13:32,769
key K but you ask it to figure out the

305
00:13:32,769 --> 00:13:35,470
result of the key on these probes from

306
00:13:35,470 --> 00:13:38,529
its leakage what for interested in is

307
00:13:38,529 --> 00:13:41,260
how well it can do if you fixed a

308
00:13:41,260 --> 00:13:43,570
particularly cage function this

309
00:13:43,570 --> 00:13:46,420
represents the best possible probability

310
00:13:46,420 --> 00:13:49,000
of figuring out J so it's the maximum

311
00:13:49,000 --> 00:13:51,820
over all adversaries that they can

312
00:13:51,820 --> 00:13:55,420
figure out what J is of course the

313
00:13:55,420 --> 00:13:57,160
advantage will depend on the leakage

314
00:13:57,160 --> 00:13:58,959
function so here what we do is say well

315
00:13:58,959 --> 00:14:00,190
watch the perform the addressee

316
00:14:00,190 --> 00:14:02,680
perspective the best leakage function so

317
00:14:02,680 --> 00:14:05,200
maximize over those and you get as a

318
00:14:05,200 --> 00:14:07,240
function of the fryer number of bits

319
00:14:07,240 --> 00:14:08,820
leaked

320
00:14:08,820 --> 00:14:14,170
how many what they disadvantage looks

321
00:14:14,170 --> 00:14:17,740
like and so now this is the thing we

322
00:14:17,740 --> 00:14:19,420
want to bound it depends on the key

323
00:14:19,420 --> 00:14:21,670
length the number of probes the number

324
00:14:21,670 --> 00:14:23,890
one here is just for consistency with a

325
00:14:23,890 --> 00:14:25,660
more general version in our paper but

326
00:14:25,660 --> 00:14:27,820
can be ignored and it will also depend

327
00:14:27,820 --> 00:14:31,959
on the fraction L of bits deep so if you

328
00:14:31,959 --> 00:14:33,670
want up about this we can say okay let's

329
00:14:33,670 --> 00:14:36,519
say how if we can look for a C such that

330
00:14:36,519 --> 00:14:38,920
this bound that this is at most to the

331
00:14:38,920 --> 00:14:41,829
minus C these kinds of problems have

332
00:14:41,829 --> 00:14:43,390
been looked at in the literature there's

333
00:14:43,390 --> 00:14:45,820
a lemma by Nissan encirclement back from

334
00:14:45,820 --> 00:14:49,420
96 and an extension by Vardhan we tried

335
00:14:49,420 --> 00:14:51,190
to apply these but it doesn't quite

336
00:14:51,190 --> 00:14:53,260
apply and also they're not entirely

337
00:14:53,260 --> 00:14:55,540
concretely of hidden constants in them

338
00:14:55,540 --> 00:14:58,990
and not the best things to get a precise

339
00:14:58,990 --> 00:15:02,620
bound there is however a lemma by all

340
00:15:02,620 --> 00:15:05,290
the notice and wicks some hidden in an

341
00:15:05,290 --> 00:15:07,029
appendix in their paper it's a very

342
00:15:07,029 --> 00:15:10,000
powerful elegant lemma and not only does

343
00:15:10,000 --> 00:15:12,279
it apply to this but it doesn't have any

344
00:15:12,279 --> 00:15:15,310
hidden constants so in fact a solution

345
00:15:15,310 --> 00:15:17,140
to this problem emerges directly by

346
00:15:17,140 --> 00:15:19,720
applying this lemma so what are we to

347
00:15:19,720 --> 00:15:21,190
say in addition to that well we're

348
00:15:21,190 --> 00:15:23,540
interested in concrete security

349
00:15:23,540 --> 00:15:28,180
and in the value of that constant and

350
00:15:28,180 --> 00:15:32,090
the difference or novelty of our work is

351
00:15:32,090 --> 00:15:35,000
to is to give an analysis with with a

352
00:15:35,000 --> 00:15:37,790
better value of that constant so if you

353
00:15:37,790 --> 00:15:39,230
look at their lemma and plug in our

354
00:15:39,230 --> 00:15:41,750
numbers you get this formula for what

355
00:15:41,750 --> 00:15:44,240
that C is and this represents the

356
00:15:44,240 --> 00:15:47,030
formula that we prove again this is the

357
00:15:47,030 --> 00:15:52,370
functions that correspond to it again

358
00:15:52,370 --> 00:15:53,990
since these things are kind of hard to

359
00:15:53,990 --> 00:15:56,600
evaluate analytically we can plug in

360
00:15:56,600 --> 00:15:58,490
some numbers and see the difference and

361
00:15:58,490 --> 00:16:00,890
this table looks at it in two ways one

362
00:16:00,890 --> 00:16:04,070
is number of probes so for example what

363
00:16:04,070 --> 00:16:07,100
do you get with 500 probes according to

364
00:16:07,100 --> 00:16:10,070
our formula the new one you would get 2

365
00:16:10,070 --> 00:16:13,970
to the negative 274 here which is a

366
00:16:13,970 --> 00:16:16,210
cryptographically good level of security

367
00:16:16,210 --> 00:16:18,530
according to the old formula you would

368
00:16:18,530 --> 00:16:21,470
only get 2 to the negative 5 so really

369
00:16:21,470 --> 00:16:23,810
not much security even with a thousand

370
00:16:23,810 --> 00:16:25,970
pros when this is 500 this is only about

371
00:16:25,970 --> 00:16:28,160
2 to the negative 10 so you see a pretty

372
00:16:28,160 --> 00:16:30,980
large improvement another way to look at

373
00:16:30,980 --> 00:16:32,630
it is how many probes do you need to

374
00:16:32,630 --> 00:16:34,730
make to make to get some amount of

375
00:16:34,730 --> 00:16:38,270
security for example 256 bits so when

376
00:16:38,270 --> 00:16:42,170
when is if you want C to be 256 how many

377
00:16:42,170 --> 00:16:44,330
probes do you need to make according to

378
00:16:44,330 --> 00:16:48,100
our formula 468 according to the old one

379
00:16:48,100 --> 00:16:52,700
about 25,000 so this this is a big

380
00:16:52,700 --> 00:16:54,590
enough difference to matter for for the

381
00:16:54,590 --> 00:16:59,120
efficiency of the schemes so this is the

382
00:16:59,120 --> 00:17:01,810
problem the main or if perhaps only

383
00:17:01,810 --> 00:17:05,390
technically novel thing in the paper and

384
00:17:05,390 --> 00:17:08,780
it gets quite subtle so type perhaps

385
00:17:08,780 --> 00:17:10,310
I'll give a little bit of a sense of

386
00:17:10,310 --> 00:17:12,589
what goes on in the sub key prediction

387
00:17:12,589 --> 00:17:15,770
lemma one evidence of the subtlety is

388
00:17:15,770 --> 00:17:17,930
that if you look at this you might think

389
00:17:17,930 --> 00:17:19,849
that the naive strategy for the

390
00:17:19,849 --> 00:17:22,940
adversary of simply leaking a certain

391
00:17:22,940 --> 00:17:24,980
number of bits of the key is the best if

392
00:17:24,980 --> 00:17:28,130
I'm allowed to leak four bits of a seven

393
00:17:28,130 --> 00:17:30,320
bit key why don't I just leak the first

394
00:17:30,320 --> 00:17:32,510
four why is that any worse than anything

395
00:17:32,510 --> 00:17:33,190
else

396
00:17:33,190 --> 00:17:36,030
so maybe the maximum occur

397
00:17:36,030 --> 00:17:39,630
there and what we illustrate here is

398
00:17:39,630 --> 00:17:42,180
that it doesn't and this kind of leads

399
00:17:42,180 --> 00:17:45,210
into how you figure out what the bound

400
00:17:45,210 --> 00:17:48,570
actually is and the it makes a

401
00:17:48,570 --> 00:17:50,160
connection with having balls and error

402
00:17:50,160 --> 00:17:53,970
correcting codes to show this and what

403
00:17:53,970 --> 00:17:55,950
happens is that if you look at this

404
00:17:55,950 --> 00:17:57,930
example where the key length is seven

405
00:17:57,930 --> 00:18:00,210
and you're leaking four bits and imagine

406
00:18:00,210 --> 00:18:02,580
there's only one probe you can easily

407
00:18:02,580 --> 00:18:04,950
figure out what the advantage for this

408
00:18:04,950 --> 00:18:07,350
strategy is and it turns out to be

409
00:18:07,350 --> 00:18:09,990
eleven fourteen now consider the

410
00:18:09,990 --> 00:18:12,630
alternative strategy which takes the 7/4

411
00:18:12,630 --> 00:18:16,020
Hamming code which has 16 code words all

412
00:18:16,020 --> 00:18:19,410
of them of length seven and gives you an

413
00:18:19,410 --> 00:18:21,930
encoding and decoding function and the

414
00:18:21,930 --> 00:18:25,290
leakage that is going to be provided is

415
00:18:25,290 --> 00:18:29,220
to take the key and decode it so think

416
00:18:29,220 --> 00:18:32,460
of it as a this seven bit string as

417
00:18:32,460 --> 00:18:35,010
falling in one of the Hamming balls

418
00:18:35,010 --> 00:18:37,710
which partition this space and return

419
00:18:37,710 --> 00:18:40,140
the corresponding consider the

420
00:18:40,140 --> 00:18:41,700
corresponding code word which is the

421
00:18:41,700 --> 00:18:43,980
center of the ball and then the message

422
00:18:43,980 --> 00:18:45,810
that corresponds to that code word which

423
00:18:45,810 --> 00:18:48,510
turns out to be only four bits if you

424
00:18:48,510 --> 00:18:51,750
leak that message then there's a simple

425
00:18:51,750 --> 00:18:53,700
strategy for the adversary to protect

426
00:18:53,700 --> 00:18:57,290
any bit of the original key which is to

427
00:18:57,290 --> 00:18:59,910
re-encode the leakage get back the code

428
00:18:59,910 --> 00:19:02,670
word and pretend it's the key and use

429
00:19:02,670 --> 00:19:04,380
the corresponding bit of that for

430
00:19:04,380 --> 00:19:06,450
prediction it takes a bit of analysis

431
00:19:06,450 --> 00:19:08,580
but when you do you see that you get an

432
00:19:08,580 --> 00:19:10,950
advantage significantly better than the

433
00:19:10,950 --> 00:19:16,080
naive strategy so pursuing that sort of

434
00:19:16,080 --> 00:19:18,270
Avenue the analysis showing our

435
00:19:18,270 --> 00:19:21,600
boundaries is quite technical and the

436
00:19:21,600 --> 00:19:23,760
result is here again with that

437
00:19:23,760 --> 00:19:26,310
particular function in there and very

438
00:19:26,310 --> 00:19:28,620
very roughly the way the analysis works

439
00:19:28,620 --> 00:19:31,380
is to indeed consider the partition of

440
00:19:31,380 --> 00:19:33,870
the space and the Hamming balls and then

441
00:19:33,870 --> 00:19:35,880
show a number of things first of all

442
00:19:35,880 --> 00:19:40,080
show by some kind of discreet concavity

443
00:19:40,080 --> 00:19:42,540
argument that the best case for the

444
00:19:42,540 --> 00:19:44,100
adversary's where all these balls are

445
00:19:44,100 --> 00:19:47,550
the same size and then show that in each

446
00:19:47,550 --> 00:19:48,720
particular case

447
00:19:48,720 --> 00:19:53,039
is you you get the best advantage for a

448
00:19:53,039 --> 00:19:57,510
particularly courage when the preimage

449
00:19:57,510 --> 00:20:00,030
of that leakage is either a Hamming ball

450
00:20:00,030 --> 00:20:02,070
or sandwiched between adjacent ones and

451
00:20:02,070 --> 00:20:04,919
when it's a corresponds to a set that's

452
00:20:04,919 --> 00:20:07,440
monotone which is something having this

453
00:20:07,440 --> 00:20:09,809
definition and all that is packaged up

454
00:20:09,809 --> 00:20:16,440
into it to this bound so the other steps

455
00:20:16,440 --> 00:20:18,630
are relatively straightforward the

456
00:20:18,630 --> 00:20:21,090
second step which is applying the hash

457
00:20:21,090 --> 00:20:24,559
function over here uses is effectively

458
00:20:24,559 --> 00:20:27,419
extraction one might ask why not use a

459
00:20:27,419 --> 00:20:29,970
standard randomness extractor and the

460
00:20:29,970 --> 00:20:31,200
answer is because that's information

461
00:20:31,200 --> 00:20:33,630
theoretic you would be limited to a very

462
00:20:33,630 --> 00:20:36,360
small number of extractions and by using

463
00:20:36,360 --> 00:20:37,530
a random Oracle or something

464
00:20:37,530 --> 00:20:43,350
computational you can get a lot more the

465
00:20:43,350 --> 00:20:46,460
standard model scheme is very similar

466
00:20:46,460 --> 00:20:50,520
what it doesn't do is apply the random

467
00:20:50,520 --> 00:20:54,120
Oracle to the selector in order to make

468
00:20:54,120 --> 00:20:55,860
the probes rather it picks the probes

469
00:20:55,860 --> 00:20:58,590
directly at random but otherwise it's

470
00:20:58,590 --> 00:21:00,659
the same what it does is that it derives

471
00:21:00,659 --> 00:21:02,970
the key here using in the place of an

472
00:21:02,970 --> 00:21:05,460
extraction function that you see e

473
00:21:05,460 --> 00:21:08,220
secure and this is a strong assumption

474
00:21:08,220 --> 00:21:11,010
but it's a standard model one and we

475
00:21:11,010 --> 00:21:13,650
with a some increase in ciphertext size

476
00:21:13,650 --> 00:21:18,210
we can get a standard model scheme it

477
00:21:18,210 --> 00:21:19,830
would be nice in this context to have

478
00:21:19,830 --> 00:21:21,780
integrity or authenticity but it turns

479
00:21:21,780 --> 00:21:23,940
out by a result of Alvin doodles and

480
00:21:23,940 --> 00:21:26,640
wicks on signatures whose technique also

481
00:21:26,640 --> 00:21:28,100
applies here that's simply impossible

482
00:21:28,100 --> 00:21:30,600
because the leakage can always include a

483
00:21:30,600 --> 00:21:33,419
valid ciphertext so what we do instead

484
00:21:33,419 --> 00:21:36,000
is say that perhaps it would be

485
00:21:36,000 --> 00:21:39,150
worthwhile if integrity was provided in

486
00:21:39,150 --> 00:21:41,640
the absence of leakage and privacy in

487
00:21:41,640 --> 00:21:43,770
the presence of it with the rationale

488
00:21:43,770 --> 00:21:46,200
that mass surveillance is largely about

489
00:21:46,200 --> 00:21:49,169
compromising privacy not integrity and

490
00:21:49,169 --> 00:21:51,450
then these types of head schemes we can

491
00:21:51,450 --> 00:21:56,940
build relatively easily so so to

492
00:21:56,940 --> 00:21:59,419
conclude

493
00:21:59,419 --> 00:22:01,369
the limitations of this work include

494
00:22:01,369 --> 00:22:04,279
that in this bounded retrieval model the

495
00:22:04,279 --> 00:22:07,849
leakage is upfront it's not adaptive its

496
00:22:07,849 --> 00:22:10,009
computed before encryption begins and

497
00:22:10,009 --> 00:22:11,929
before the key is chosen which is

498
00:22:11,929 --> 00:22:15,409
certainly a weakness one thing a lot of

499
00:22:15,409 --> 00:22:17,089
people ask is well I wouldn't it take a

500
00:22:17,089 --> 00:22:18,950
lot of randomness to generate the big

501
00:22:18,950 --> 00:22:21,379
key you can do it from a short seed and

502
00:22:21,379 --> 00:22:25,609
then discard the seed we certainly had

503
00:22:25,609 --> 00:22:27,739
as a goal to investigate how practical

504
00:22:27,739 --> 00:22:30,200
this might be as an actual defense we

505
00:22:30,200 --> 00:22:31,999
don't think we're really there there are

506
00:22:31,999 --> 00:22:35,809
lots of issues including the model the

507
00:22:35,809 --> 00:22:38,959
key distribution and other things which

508
00:22:38,959 --> 00:22:41,209
say that perhaps this has some scope and

509
00:22:41,209 --> 00:22:44,179
practice but it's it's not a solution at

510
00:22:44,179 --> 00:22:47,029
this point people asked also about

511
00:22:47,029 --> 00:22:49,099
whether you can make it more efficient

512
00:22:49,099 --> 00:22:51,079
by having probes return words rather

513
00:22:51,079 --> 00:22:53,719
than bits and definitely so it'd be nice

514
00:22:53,719 --> 00:22:57,709
to see a bound proven for that on the

515
00:22:57,709 --> 00:23:00,139
more theoretical side one might try to

516
00:23:00,139 --> 00:23:02,690
compact ciphertext in the absence of a

517
00:23:02,690 --> 00:23:07,749
random Oracle as well okay

