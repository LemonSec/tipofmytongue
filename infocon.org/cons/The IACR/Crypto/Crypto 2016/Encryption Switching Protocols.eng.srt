1
00:00:03,810 --> 00:00:07,259
hi everybody I'm Jeff akuto and so this

2
00:00:07,259 --> 00:00:08,549
talk is going to be about encryption

3
00:00:08,549 --> 00:00:10,379
switching protocols this is a joint work

4
00:00:10,379 --> 00:00:14,010
with Toma Peterson David Marshall so

5
00:00:14,010 --> 00:00:16,650
secured to body computation address the

6
00:00:16,650 --> 00:00:19,440
addresses challenge of computing some

7
00:00:19,440 --> 00:00:21,900
public function s so you have two

8
00:00:21,900 --> 00:00:23,880
players a listen Bob who each old some

9
00:00:23,880 --> 00:00:27,240
private input x1 and x2 and they would

10
00:00:27,240 --> 00:00:30,029
like to compute F on those inputs

11
00:00:30,029 --> 00:00:32,790
without revealing anything more than

12
00:00:32,790 --> 00:00:35,310
this result in particular they don't

13
00:00:35,310 --> 00:00:37,080
want to avail anything at all on their

14
00:00:37,080 --> 00:00:40,260
own input there have been various

15
00:00:40,260 --> 00:00:42,330
methods that have been designed in the

16
00:00:42,330 --> 00:00:44,820
past to address this cryptographic

17
00:00:44,820 --> 00:00:47,070
challenge based on a large variety of

18
00:00:47,070 --> 00:00:49,590
tools and primitives one of the most

19
00:00:49,590 --> 00:00:51,720
common primitives that have been used to

20
00:00:51,720 --> 00:00:55,020
build to body computation protocols is

21
00:00:55,020 --> 00:00:58,980
home morphic encryption so quickly a

22
00:00:58,980 --> 00:01:01,230
publicly homomorphic encryption scheme

23
00:01:01,230 --> 00:01:03,540
is a public key encryption scheme so you

24
00:01:03,540 --> 00:01:05,188
have a public key which allows you to

25
00:01:05,188 --> 00:01:06,570
encrypt and the secret key which allows

26
00:01:06,570 --> 00:01:09,030
you to decrypt and you have inhibitions

27
00:01:09,030 --> 00:01:12,539
an algorithm eval which takes as input

28
00:01:12,539 --> 00:01:15,719
an encrypted message m as a public key

29
00:01:15,719 --> 00:01:17,700
and some function from some class

30
00:01:17,700 --> 00:01:20,909
affection and output an encryption of

31
00:01:20,909 --> 00:01:24,630
this of f of em so it allows you to

32
00:01:24,630 --> 00:01:27,060
evaluate functions on the plain text

33
00:01:27,060 --> 00:01:29,159
without having to know the secret key of

34
00:01:29,159 --> 00:01:33,270
the schema and it's fairly easy to see

35
00:01:33,270 --> 00:01:37,409
how we can build a two-party computation

36
00:01:37,409 --> 00:01:39,569
out-of-home morphic encryption so if you

37
00:01:39,569 --> 00:01:41,850
have a homomorphic encryption scheme for

38
00:01:41,850 --> 00:01:43,710
some class on function thank for example

39
00:01:43,710 --> 00:01:46,139
of linear operations then you can let

40
00:01:46,139 --> 00:01:47,399
the players and create their input

41
00:01:47,399 --> 00:01:50,030
broadcast does Homer Figg encryption

42
00:01:50,030 --> 00:01:52,409
homomorphic a lien on the locally

43
00:01:52,409 --> 00:01:54,959
compute evaluate the function all those

44
00:01:54,959 --> 00:01:56,850
encrypted input and they end up with an

45
00:01:56,850 --> 00:01:58,709
encryption the output and then there is

46
00:01:58,709 --> 00:02:02,100
methods to recover the output from an

47
00:02:02,100 --> 00:02:04,499
encrypted output in using a joint

48
00:02:04,499 --> 00:02:07,409
protocol and so if for example now you

49
00:02:07,409 --> 00:02:09,270
want to build a two-party computation

50
00:02:09,270 --> 00:02:12,390
protocol for like linear operations then

51
00:02:12,390 --> 00:02:14,380
you can use the PI encryption scheme

52
00:02:14,380 --> 00:02:18,520
linearly home our home Orphic and if you

53
00:02:18,520 --> 00:02:20,950
want to evaluate a function which is

54
00:02:20,950 --> 00:02:23,590
like explanation monomers or any product

55
00:02:23,590 --> 00:02:25,660
function then you can let the players

56
00:02:25,660 --> 00:02:28,270
you'll use the automarketer system which

57
00:02:28,270 --> 00:02:31,660
is multiplicatively homomorphic if you

58
00:02:31,660 --> 00:02:34,570
want to do more well obviously it's way

59
00:02:34,570 --> 00:02:36,100
harder if for example you want to be

60
00:02:36,100 --> 00:02:38,290
able to evaluate both editions on

61
00:02:38,290 --> 00:02:40,840
multiplications then if you can do so

62
00:02:40,840 --> 00:02:42,820
you can evaluate any circuit in a gate

63
00:02:42,820 --> 00:02:44,890
by gate fashion but it's still possible

64
00:02:44,890 --> 00:02:46,570
and it's called for the homomorphic

65
00:02:46,570 --> 00:02:49,990
encryption so fully homomorphic

66
00:02:49,990 --> 00:02:51,670
encryption let's you evaluate any

67
00:02:51,670 --> 00:02:54,970
function given a ciphertext without

68
00:02:54,970 --> 00:02:58,000
having to decrypt the ciphertext but

69
00:02:58,000 --> 00:02:59,860
current implementation of fully

70
00:02:59,860 --> 00:03:02,290
homomorphic encryption scheme are quite

71
00:03:02,290 --> 00:03:06,760
slow so the natural approach for

72
00:03:06,760 --> 00:03:08,950
building secure data computation out of

73
00:03:08,950 --> 00:03:11,650
homomorphic encryption is to say instead

74
00:03:11,650 --> 00:03:14,920
well let's forget about having an

75
00:03:14,920 --> 00:03:16,230
encryption scheme which will be

76
00:03:16,230 --> 00:03:18,790
multiplicatively homomorphic we'll just

77
00:03:18,790 --> 00:03:21,100
assume that we have an additive before

78
00:03:21,100 --> 00:03:24,190
morphing encryption scheme and we will

79
00:03:24,190 --> 00:03:26,320
evaluate all the additive gates of our

80
00:03:26,320 --> 00:03:29,860
protocol homomorphic on locally but we

81
00:03:29,860 --> 00:03:31,780
will pay for each multiplicative gates

82
00:03:31,780 --> 00:03:34,210
using a dedicated multiplication

83
00:03:34,210 --> 00:03:36,600
protocol so this will cost interaction

84
00:03:36,600 --> 00:03:42,280
and communication still this way of

85
00:03:42,280 --> 00:03:46,590
building to body computation schemes as

86
00:03:46,590 --> 00:03:48,850
produced extremely efficient protocols

87
00:03:48,850 --> 00:03:51,310
so it's a it's a quite efficient method

88
00:03:51,310 --> 00:03:56,470
and but in in this work we try to have

89
00:03:56,470 --> 00:03:59,800
some different approach and so our our

90
00:03:59,800 --> 00:04:03,940
core of direction was well we already

91
00:04:03,940 --> 00:04:06,400
have so additively home morphic

92
00:04:06,400 --> 00:04:08,290
encryption scheme we do lowest with

93
00:04:08,290 --> 00:04:11,320
irate homomorphic le and locally any

94
00:04:11,320 --> 00:04:13,300
kind of linear operations without

95
00:04:13,300 --> 00:04:15,239
indirections communication whatever and

96
00:04:15,239 --> 00:04:17,920
we also already have multiplicatively

97
00:04:17,920 --> 00:04:19,930
homomorphic encryption scheme which let

98
00:04:19,930 --> 00:04:22,350
us evaluate multiplicative

99
00:04:22,350 --> 00:04:25,000
multiplications association and so on

100
00:04:25,000 --> 00:04:28,270
locally and homomorphic ally so what is

101
00:04:28,270 --> 00:04:30,160
we could somehow make them work together

102
00:04:30,160 --> 00:04:34,360
and by maksim war together I mean could

103
00:04:34,360 --> 00:04:37,180
we build some encryption switching

104
00:04:37,180 --> 00:04:39,580
protocol which is a product that would

105
00:04:39,580 --> 00:04:41,710
take as input a ciphertext encrypting

106
00:04:41,710 --> 00:04:44,979
some message m and output a ciphertext

107
00:04:44,979 --> 00:04:47,139
encrypting the same message m between

108
00:04:47,139 --> 00:04:50,919
the other crypto system and the corec

109
00:04:50,919 --> 00:04:52,990
security requirement for such a switch

110
00:04:52,990 --> 00:04:55,750
protocol is that during so this will be

111
00:04:55,750 --> 00:04:57,580
a tuba protocol and during this two

112
00:04:57,580 --> 00:05:00,370
batter protocol no players must learn

113
00:05:00,370 --> 00:05:02,800
anything about the message m the

114
00:05:02,800 --> 00:05:05,229
plaintext m which is contained both in

115
00:05:05,229 --> 00:05:07,300
the input ciphertext and be in the

116
00:05:07,300 --> 00:05:10,240
output type a text and if we had set

117
00:05:10,240 --> 00:05:13,000
sash reach protocol it's quite easy to

118
00:05:13,000 --> 00:05:16,360
see that we can really have a sexual

119
00:05:16,360 --> 00:05:19,090
battery computation for any function you

120
00:05:19,090 --> 00:05:21,219
write your circuit as layers of linear

121
00:05:21,219 --> 00:05:23,560
operations and multiplicative operations

122
00:05:23,560 --> 00:05:26,530
each time you want to evaluate linear

123
00:05:26,530 --> 00:05:31,210
operations you and you'd like pi

124
00:05:31,210 --> 00:05:33,099
encryptions of the inputs on you

125
00:05:33,099 --> 00:05:34,810
evaluate homomorphic letís these

126
00:05:34,810 --> 00:05:37,659
operations and each time you need to go

127
00:05:37,659 --> 00:05:40,270
to the next layer then you just have to

128
00:05:40,270 --> 00:05:42,699
switch to multiplicatively homomorphic

129
00:05:42,699 --> 00:05:44,319
ciphertext and you can keep on

130
00:05:44,319 --> 00:05:46,240
evaluating everything homomorphic le and

131
00:05:46,240 --> 00:05:48,639
so on until you get an encryption of the

132
00:05:48,639 --> 00:05:55,930
output and so okay but what will be the

133
00:05:55,930 --> 00:05:58,900
benefit of doing so because we already

134
00:05:58,900 --> 00:06:00,900
have as I said extremely efficient

135
00:06:00,900 --> 00:06:03,610
multi-party computation protocols based

136
00:06:03,610 --> 00:06:06,880
on paying for instrument implicit of

137
00:06:06,880 --> 00:06:08,349
gates so here the advantage is

138
00:06:08,349 --> 00:06:11,919
essentially that you won't have to pay

139
00:06:11,919 --> 00:06:14,080
for each multiplicative gates so think

140
00:06:14,080 --> 00:06:16,659
think for example of your circuit we're

141
00:06:16,659 --> 00:06:19,479
at some point many multiplicative gates

142
00:06:19,479 --> 00:06:21,370
are grouped together you can't think for

143
00:06:21,370 --> 00:06:23,289
example of a circuit which at some point

144
00:06:23,289 --> 00:06:26,469
computes an explanation this involved

145
00:06:26,469 --> 00:06:29,110
many multiplications and instead of

146
00:06:29,110 --> 00:06:31,120
paying in terms of communication for

147
00:06:31,120 --> 00:06:33,610
each of those multiplicative gates he

148
00:06:33,610 --> 00:06:37,000
you will just have to switch to to a

149
00:06:37,000 --> 00:06:38,259
multiplicative the whole morphic

150
00:06:38,259 --> 00:06:39,670
encryption scheme

151
00:06:39,670 --> 00:06:41,740
evaluate everything locally and then

152
00:06:41,740 --> 00:06:45,580
switch back so essentially doing tabari

153
00:06:45,580 --> 00:06:49,030
computation out of two complementary

154
00:06:49,030 --> 00:06:50,590
homomorphic encryption scheme together

155
00:06:50,590 --> 00:06:52,860
with an encryption switching protocols

156
00:06:52,860 --> 00:06:56,680
allows to have a two-body computation

157
00:06:56,680 --> 00:06:57,910
for the course with which might be

158
00:06:57,910 --> 00:07:00,220
subbing are in the size of the circuits

159
00:07:00,220 --> 00:07:02,590
if the circuit is well structure like

160
00:07:02,590 --> 00:07:04,780
multiplication gates are kind of grouped

161
00:07:04,780 --> 00:07:10,960
together and so on okay so I I say that

162
00:07:10,960 --> 00:07:13,540
we want we would like to build such an

163
00:07:13,540 --> 00:07:14,710
encryption switch in protocol this is

164
00:07:14,710 --> 00:07:17,560
our going this work for the pie

165
00:07:17,560 --> 00:07:18,730
encryption scheme and the algum

166
00:07:18,730 --> 00:07:20,710
encryption scheme so let me present them

167
00:07:20,710 --> 00:07:23,980
in slightly more details so the pie a

168
00:07:23,980 --> 00:07:27,430
cryptosystem is a semantically secure

169
00:07:27,430 --> 00:07:29,410
crypto system whose semantic security

170
00:07:29,410 --> 00:07:31,720
relies on the decisional composite

171
00:07:31,720 --> 00:07:33,910
residue setia assumption which states

172
00:07:33,910 --> 00:07:36,310
that if you take a narrow see modulus n

173
00:07:36,310 --> 00:07:38,160
the product of to save Prime it's

174
00:07:38,160 --> 00:07:40,090
computationally infeasible to

175
00:07:40,090 --> 00:07:42,460
distinguish ends for from random

176
00:07:42,460 --> 00:07:46,120
elements other than N squared on the

177
00:07:46,120 --> 00:07:47,980
other hand we are the Aragon are

178
00:07:47,980 --> 00:07:50,200
cryptosystem who semantic security rely

179
00:07:50,200 --> 00:07:51,010
on the decisional diffie-hellman

180
00:07:51,010 --> 00:07:53,170
assumption which states that you cannot

181
00:07:53,170 --> 00:07:55,780
distinguish temples of the from GG to

182
00:07:55,780 --> 00:07:57,730
the AG to the beach e to the a times B

183
00:07:57,730 --> 00:08:01,150
from uniformly random tuples and which

184
00:08:01,150 --> 00:08:03,600
which is multiplicative homomorphic and

185
00:08:03,600 --> 00:08:07,420
the important thing is the bio crypto

186
00:08:07,420 --> 00:08:09,430
system allows you to encrypt any plain

187
00:08:09,430 --> 00:08:13,660
text over 70 while the el-gamal

188
00:08:13,660 --> 00:08:16,870
cryptosystem allows you to encrypt while

189
00:08:16,870 --> 00:08:18,820
any plain text which belongs to a group

190
00:08:18,820 --> 00:08:21,130
over rich the decision of the element

191
00:08:21,130 --> 00:08:24,040
assumption is believed to hold and you

192
00:08:24,040 --> 00:08:25,690
might already see the problem here when

193
00:08:25,690 --> 00:08:27,640
I asked can we build encryption

194
00:08:27,640 --> 00:08:29,470
switching protocol the question that

195
00:08:29,470 --> 00:08:31,480
should come first is does that even make

196
00:08:31,480 --> 00:08:34,510
sense because my encryption switching

197
00:08:34,510 --> 00:08:35,979
for the whole idea will take an

198
00:08:35,979 --> 00:08:37,600
encryption of some message and output

199
00:08:37,600 --> 00:08:39,760
another encryption of the same message

200
00:08:39,760 --> 00:08:42,429
so it must at least be meaningful to

201
00:08:42,429 --> 00:08:44,560
talk about an encryption with the other

202
00:08:44,560 --> 00:08:47,950
scheme of the same message so we must at

203
00:08:47,950 --> 00:08:50,200
least have encryption scheme where the

204
00:08:50,200 --> 00:08:51,490
toon plane tech space

205
00:08:51,490 --> 00:08:54,910
is of some intersection and moreover we

206
00:08:54,910 --> 00:08:56,740
really need that the two plain text

207
00:08:56,740 --> 00:08:59,440
spaces are essentially the same because

208
00:08:59,440 --> 00:09:03,160
if it's not the case and our encryption

209
00:09:03,160 --> 00:09:04,690
switching photocall could be used to

210
00:09:04,690 --> 00:09:06,490
distinguish during the two-party

211
00:09:06,490 --> 00:09:08,709
computation protocol between inputs on

212
00:09:08,709 --> 00:09:11,380
which we can switch which does belong to

213
00:09:11,380 --> 00:09:12,970
the intersection of the plaintext paces

214
00:09:12,970 --> 00:09:15,310
from inputs on which we cannot switch

215
00:09:15,310 --> 00:09:17,770
which would cause a failure and so this

216
00:09:17,770 --> 00:09:20,740
will leak information on the inputs of

217
00:09:20,740 --> 00:09:22,390
the players in our two-party computation

218
00:09:22,390 --> 00:09:26,980
protocol so what we will need will be to

219
00:09:26,980 --> 00:09:29,470
our first two cryptosystem an additive

220
00:09:29,470 --> 00:09:30,850
leha morphic one on the multiplicative

221
00:09:30,850 --> 00:09:33,070
leha morphic one that operate on the

222
00:09:33,070 --> 00:09:35,560
simple in tech space and unfortunately

223
00:09:35,560 --> 00:09:38,649
while pi it does allow you to encrypt

224
00:09:38,649 --> 00:09:41,320
over say then the decisional

225
00:09:41,320 --> 00:09:42,550
diffie-hellman assumption doesn't hold

226
00:09:42,550 --> 00:09:44,800
the versa then nor does it all over 10 *

227
00:09:44,800 --> 00:09:47,230
the a set of invertible elements of

228
00:09:47,230 --> 00:09:52,240
arsudun and so our first task if we want

229
00:09:52,240 --> 00:09:55,720
even our goal to make sense will be to

230
00:09:55,720 --> 00:09:57,339
design a variant of the el-gamal

231
00:09:57,339 --> 00:09:59,290
cryptosystem which remains

232
00:09:59,290 --> 00:10:01,839
multiplicatively homomorphic but which

233
00:10:01,839 --> 00:10:04,209
will allow us to encrypt message of

234
00:10:04,209 --> 00:10:06,640
arsudun so as to complement the bio

235
00:10:06,640 --> 00:10:12,250
crypto system that makes sense okay so

236
00:10:12,250 --> 00:10:16,660
we will start with a slightly simpler

237
00:10:16,660 --> 00:10:19,240
goal which would be to design an El

238
00:10:19,240 --> 00:10:21,610
Gamal like multiplicatively homomorphic

239
00:10:21,610 --> 00:10:25,329
cryptosystem over the den star and so

240
00:10:25,329 --> 00:10:26,800
let's dig a bit into the structure of

241
00:10:26,800 --> 00:10:29,410
the den star so you can see the den star

242
00:10:29,410 --> 00:10:32,260
as being divided into four equal size

243
00:10:32,260 --> 00:10:35,950
parts so the two columns here correspond

244
00:10:35,950 --> 00:10:38,350
to a limit of a having Jacobi symbol 1

245
00:10:38,350 --> 00:10:41,230
or minus 1 while the two lines here

246
00:10:41,230 --> 00:10:42,700
corresponds to element having what I

247
00:10:42,700 --> 00:10:48,310
call sign 10 minus 1 and the group of

248
00:10:48,310 --> 00:10:50,260
elements with Jacobi symbol minus 1 here

249
00:10:50,260 --> 00:10:53,500
is JN this is a larger subgroup of our

250
00:10:53,500 --> 00:10:56,920
seven star and so as our goal is to

251
00:10:56,920 --> 00:10:58,959
build an El Gamal like encryption scheme

252
00:10:58,959 --> 00:11:01,390
we need to have some harness assumption

253
00:11:01,390 --> 00:11:04,710
to rely on so let's see what

254
00:11:04,710 --> 00:11:08,190
how about the over seven star so not ddh

255
00:11:08,190 --> 00:11:11,070
as we said before deh does it all over

256
00:11:11,070 --> 00:11:13,350
seven star but the decisional

257
00:11:13,350 --> 00:11:15,090
diffie-hellman assumption is believed to

258
00:11:15,090 --> 00:11:18,240
hold over the subgroup of squares even

259
00:11:18,240 --> 00:11:19,610
if the players know the factorization

260
00:11:19,610 --> 00:11:22,890
because it reduces to the decision of

261
00:11:22,890 --> 00:11:24,990
the film an assumption Oh versus a group

262
00:11:24,990 --> 00:11:27,780
of squares of both that p and that q

263
00:11:27,780 --> 00:11:30,980
where q are the factors of our models

264
00:11:30,980 --> 00:11:33,360
moreover it is believed to be

265
00:11:33,360 --> 00:11:34,860
computationally infeasible to

266
00:11:34,860 --> 00:11:37,620
distinguish between squares and minus

267
00:11:37,620 --> 00:11:41,040
squares / JM this is the quadratic

268
00:11:41,040 --> 00:11:44,790
residue City assumption and so but this

269
00:11:44,790 --> 00:11:46,860
holds when players do not know the

270
00:11:46,860 --> 00:11:51,390
factorization it's at least easier than

271
00:11:51,390 --> 00:11:54,450
factorization computing the Jacobi

272
00:11:54,450 --> 00:11:57,720
symbol is always easy even if players do

273
00:11:57,720 --> 00:12:00,720
not notify creation so the hard task

274
00:12:00,720 --> 00:12:03,270
essentially will be to hide this Jacobi

275
00:12:03,270 --> 00:12:04,980
symbol when encrypting the plain text

276
00:12:04,980 --> 00:12:07,920
from the den star because you can easily

277
00:12:07,920 --> 00:12:10,710
see that if we can encrypt we welcome

278
00:12:10,710 --> 00:12:13,080
all over the squares if it's impossible

279
00:12:13,080 --> 00:12:14,760
to distinguish squares from minus

280
00:12:14,760 --> 00:12:16,740
squares then essentially it means that

281
00:12:16,740 --> 00:12:19,320
if nobody knows vectorization we can use

282
00:12:19,320 --> 00:12:22,730
an El Gamal I cryptosystem / JM and

283
00:12:22,730 --> 00:12:25,940
everything works fine the hard part is

284
00:12:25,940 --> 00:12:27,900
encrypting and hiding the Jacobi symbol

285
00:12:27,900 --> 00:12:30,870
of the plain text so let's see how we

286
00:12:30,870 --> 00:12:36,420
will do it so to encrypt a message m we

287
00:12:36,420 --> 00:12:37,920
first add to the public is some

288
00:12:37,920 --> 00:12:40,080
uniformly random element with Jacobi

289
00:12:40,080 --> 00:12:42,000
symbol minus 1 so from the second column

290
00:12:42,000 --> 00:12:47,970
here and a generator G ljn and with a

291
00:12:47,970 --> 00:12:52,340
decomposition of em will be a tuple am-1

292
00:12:52,340 --> 00:12:56,010
so that a is a uniformly random value

293
00:12:56,010 --> 00:12:59,400
which will be even if M as Jacobi symbol

294
00:12:59,400 --> 00:13:02,640
1 and odd if J if Emma's Jacobi symbol

295
00:13:02,640 --> 00:13:05,520
minus 1 so that key to the a as the same

296
00:13:05,520 --> 00:13:09,810
Jacobi symbol than Emma an m1 is the

297
00:13:09,810 --> 00:13:11,700
value of the 35 m equals key to the a

298
00:13:11,700 --> 00:13:14,160
times m1 and you can easily see that m1

299
00:13:14,160 --> 00:13:16,110
always have check up a similar minus 1

300
00:13:16,110 --> 00:13:18,000
because the product

301
00:13:18,000 --> 00:13:20,070
of two elements with Jacobi symbol let's

302
00:13:20,070 --> 00:13:23,450
say alpha and beta is alpha beta so it

303
00:13:23,450 --> 00:13:28,830
so this n 1 part does belong to JM so we

304
00:13:28,830 --> 00:13:31,110
can simply encrypt it over JN using a

305
00:13:31,110 --> 00:13:36,330
standard el-gamal cryptosystem the hard

306
00:13:36,330 --> 00:13:39,530
part is adding this key to the a and

307
00:13:39,530 --> 00:13:44,160
this is done as follow while it is easy

308
00:13:44,160 --> 00:13:47,190
to distinguish between key to the 2x and

309
00:13:47,190 --> 00:13:49,500
get to the 2x plus 1 this is just

310
00:13:49,500 --> 00:13:51,720
computing the Jacobi symbol it's

311
00:13:51,720 --> 00:13:53,490
believed to be infeasible to distinguish

312
00:13:53,490 --> 00:13:56,220
between our two lines here so we will

313
00:13:56,220 --> 00:14:01,710
encode this key to a as G to the a so

314
00:14:01,710 --> 00:14:04,170
that key to the a as Jacobi symbol one

315
00:14:04,170 --> 00:14:05,880
is equivalent to G to the a Bingle

316
00:14:05,880 --> 00:14:08,430
square so from G to delay you cannot

317
00:14:08,430 --> 00:14:10,230
recover the Jacobi symbol unless you

318
00:14:10,230 --> 00:14:11,580
break the quadratic residues easy

319
00:14:11,580 --> 00:14:14,430
assumption and it's quite easy to see

320
00:14:14,430 --> 00:14:16,680
that this encryption remains

321
00:14:16,680 --> 00:14:18,750
multiplicatively homomorphic because

322
00:14:18,750 --> 00:14:20,490
that one is multiplicative Leo morphic

323
00:14:20,490 --> 00:14:24,720
and that one we just change the basis so

324
00:14:24,720 --> 00:14:27,180
what remains to see is whether we can

325
00:14:27,180 --> 00:14:29,460
they prove that because it looks like we

326
00:14:29,460 --> 00:14:30,930
won we might have to compute some

327
00:14:30,930 --> 00:14:33,600
discrete log here to decrypt so the

328
00:14:33,600 --> 00:14:36,330
intuitive way of avoiding to have to

329
00:14:36,330 --> 00:14:39,110
compute some discrete log will be to add

330
00:14:39,110 --> 00:14:41,880
let's say the discrete log of key in

331
00:14:41,880 --> 00:14:44,760
base G to our secret key so as to Rick

332
00:14:44,760 --> 00:14:46,710
to construct key to the a from G to the

333
00:14:46,710 --> 00:14:49,350
a using this discrete log but this

334
00:14:49,350 --> 00:14:51,720
doesn't make sense as a key and G

335
00:14:51,720 --> 00:14:53,100
doesn't belong to the same group at all

336
00:14:53,100 --> 00:14:55,830
g is the generative JMK africa visible

337
00:14:55,830 --> 00:14:58,860
minus 1 but what we does is essentially

338
00:14:58,860 --> 00:15:05,790
that mod p n mod Q so we generate p by

339
00:15:05,790 --> 00:15:08,400
picking to uniformly random value t1 and

340
00:15:08,400 --> 00:15:12,570
t2 with opposite parities and with that

341
00:15:12,570 --> 00:15:15,660
key to be g to the key one must be mg to

342
00:15:15,660 --> 00:15:19,830
the t to mod Q and we reconstruct key

343
00:15:19,830 --> 00:15:21,780
mod n using the Chinese remainder

344
00:15:21,780 --> 00:15:24,570
theorem and ask you want it to have

345
00:15:24,570 --> 00:15:26,490
opposite parity this is guaranteed to be

346
00:15:26,490 --> 00:15:29,580
an element with Jacob is a mul- one but

347
00:15:29,580 --> 00:15:30,150
now

348
00:15:30,150 --> 00:15:32,430
from G to the a is in t1 and t2 we can

349
00:15:32,430 --> 00:15:35,250
construct key to the a mod p n mod Q and

350
00:15:35,250 --> 00:15:38,070
again reconstruct key to the a and using

351
00:15:38,070 --> 00:15:40,350
the Chinese remainder theorem while

352
00:15:40,350 --> 00:15:41,790
waiting on part is quite easy to decrypt

353
00:15:41,790 --> 00:15:44,760
so we just we just reconstruct this key

354
00:15:44,760 --> 00:15:46,260
to the ad Cup the second part and

355
00:15:46,260 --> 00:15:50,040
recover the message m ok so this works

356
00:15:50,040 --> 00:15:54,150
it's fine but I promised the den um for

357
00:15:54,150 --> 00:15:55,650
the moment we only have an encryption

358
00:15:55,650 --> 00:15:59,160
scheme of a resident star so a first

359
00:15:59,160 --> 00:16:01,470
step a very small step toward getting

360
00:16:01,470 --> 00:16:04,740
the then would be to add a zero so

361
00:16:04,740 --> 00:16:07,670
that's what we will do first how to have

362
00:16:07,670 --> 00:16:10,050
how to build a multiplicative a home or

363
00:16:10,050 --> 00:16:11,400
fake encryption scheme of a resident

364
00:16:11,400 --> 00:16:14,190
style Union 0 and the trick here is

365
00:16:14,190 --> 00:16:18,120
quite simple any element over the NAFTA

366
00:16:18,120 --> 00:16:21,180
Union 0 will be included as a pair of

367
00:16:21,180 --> 00:16:24,360
element both of ours it and star we are

368
00:16:24,360 --> 00:16:26,490
so that we don't lose the multiplicative

369
00:16:26,490 --> 00:16:28,790
a home the multiplicative properties and

370
00:16:28,790 --> 00:16:32,790
so to encode a message m an encoding

371
00:16:32,790 --> 00:16:38,160
would be either m1 if m is an NGO a non

372
00:16:38,160 --> 00:16:41,220
0 and if M is 0 then our I'm cutting

373
00:16:41,220 --> 00:16:43,860
will be run down and random why because

374
00:16:43,860 --> 00:16:46,560
then if you multiply 10 x 10 x 10 many

375
00:16:46,560 --> 00:16:49,020
such an codings either the first part is

376
00:16:49,020 --> 00:16:50,760
what you're looking for the product of

377
00:16:50,760 --> 00:16:53,700
all the messages or at some point some

378
00:16:53,700 --> 00:16:54,990
random value have been in the

379
00:16:54,990 --> 00:16:56,820
computation it needs a uniformly random

380
00:16:56,820 --> 00:16:58,860
value that loses all information on the

381
00:16:58,860 --> 00:17:00,630
message and the second part of the

382
00:17:00,630 --> 00:17:01,980
encoding allows you to check whether

383
00:17:01,980 --> 00:17:04,290
this is a zero in which case you would

384
00:17:04,290 --> 00:17:10,380
have a random value or it would all the

385
00:17:10,380 --> 00:17:11,970
messages that one multiplied were non

386
00:17:11,970 --> 00:17:14,010
zero in which case the second part will

387
00:17:14,010 --> 00:17:18,359
be a one and so the what we do is simply

388
00:17:18,359 --> 00:17:21,959
we encode its message from the inside

389
00:17:21,959 --> 00:17:24,270
Union 0 as a pair of message over seven

390
00:17:24,270 --> 00:17:27,750
star and we encrypt both element above

391
00:17:27,750 --> 00:17:30,660
element of our pair with the skin that

392
00:17:30,660 --> 00:17:34,740
we just designed / sudden stop this is

393
00:17:34,740 --> 00:17:38,730
still not that but almost and by almost

394
00:17:38,730 --> 00:17:42,570
i mean that if no players know the

395
00:17:42,570 --> 00:17:43,800
factorization

396
00:17:43,800 --> 00:17:47,540
then it's computationally infeasible to

397
00:17:47,540 --> 00:17:50,610
find an element which will be incident

398
00:17:50,610 --> 00:17:53,310
but not in the den star Union 0 because

399
00:17:53,310 --> 00:17:55,410
any search element is a multiple of a

400
00:17:55,410 --> 00:17:57,900
sub P or Q and so finding such an

401
00:17:57,900 --> 00:17:59,250
element is perfectly equivalent to

402
00:17:59,250 --> 00:18:03,470
finding the factorization of em and so

403
00:18:03,470 --> 00:18:06,630
it is possible to assume that no players

404
00:18:06,630 --> 00:18:09,030
will know the factorization by relying

405
00:18:09,030 --> 00:18:11,700
by using a threshold encryption scheme

406
00:18:11,700 --> 00:18:13,800
instead of just a standard impressions

407
00:18:13,800 --> 00:18:15,870
encryption scheme so in our code

408
00:18:15,870 --> 00:18:18,150
construction rather than using a

409
00:18:18,150 --> 00:18:21,090
standard home or if encryption scheme we

410
00:18:21,090 --> 00:18:23,100
will use threshold schemes in which the

411
00:18:23,100 --> 00:18:25,110
secret key of the scheme is secretly

412
00:18:25,110 --> 00:18:27,990
shared between the two players so that

413
00:18:27,990 --> 00:18:29,820
each player and avoid individually has

414
00:18:29,820 --> 00:18:32,690
no knowledge on the full secret key and

415
00:18:32,690 --> 00:18:35,340
then decryption of some message is

416
00:18:35,340 --> 00:18:38,400
performed by using a joint decryption

417
00:18:38,400 --> 00:18:40,230
procedure which is a an interactive

418
00:18:40,230 --> 00:18:42,650
protocol which outputs the plain text

419
00:18:42,650 --> 00:18:45,740
containing the ciphertext and such

420
00:18:45,740 --> 00:18:47,820
distributed description procedure are

421
00:18:47,820 --> 00:18:50,640
known for most Homer Figg public key

422
00:18:50,640 --> 00:18:54,300
encryption schemes and so that's all

423
00:18:54,300 --> 00:18:56,550
what we can do is simply with the

424
00:18:56,550 --> 00:18:58,680
threshold scheme instead of a standard

425
00:18:58,680 --> 00:19:02,400
scheme and we can just assume that

426
00:19:02,400 --> 00:19:06,270
everything will be exactly as if our

427
00:19:06,270 --> 00:19:09,360
elgamal scheme / silenced on Union 0 was

428
00:19:09,360 --> 00:19:11,940
in fact a scheme / sedan and we know

429
00:19:11,940 --> 00:19:13,170
that we have a verbal mean probability

430
00:19:13,170 --> 00:19:15,570
this won't cause any error in the

431
00:19:15,570 --> 00:19:19,010
protocol this can be formally problem

432
00:19:19,010 --> 00:19:23,160
okay so now we we kind of have a null

433
00:19:23,160 --> 00:19:25,650
gamma a multiplicative you homomorphic

434
00:19:25,650 --> 00:19:27,210
violent of the algum encryption scheme

435
00:19:27,210 --> 00:19:30,030
and we can assume that it works over

436
00:19:30,030 --> 00:19:33,090
then somehow so our goal was to be the

437
00:19:33,090 --> 00:19:34,440
new encryption switching protocol out of

438
00:19:34,440 --> 00:19:37,140
that and so rather than presenting the

439
00:19:37,140 --> 00:19:39,960
for construction I will give a toy

440
00:19:39,960 --> 00:19:42,840
scheme which will give you the intuition

441
00:19:42,840 --> 00:19:46,830
on how we can do that and in particular

442
00:19:46,830 --> 00:19:48,810
our tour scheme won't even handle the

443
00:19:48,810 --> 00:19:53,550
case where m is 0 but the core ID in

444
00:19:53,550 --> 00:19:56,130
this encryption switching protocol is if

445
00:19:56,130 --> 00:19:57,520
we are the negatives

446
00:19:57,520 --> 00:20:00,310
Amin on a multiplicative skin they are

447
00:20:00,310 --> 00:20:02,080
likely to have very different algebraic

448
00:20:02,080 --> 00:20:05,110
properties however they must share at

449
00:20:05,110 --> 00:20:07,780
least one c'mon algebraic property which

450
00:20:07,780 --> 00:20:10,390
is that in both schemes you can have

451
00:20:10,390 --> 00:20:13,330
external multiplication a there on the

452
00:20:13,330 --> 00:20:15,220
additive scheme by using a square on

453
00:20:15,220 --> 00:20:20,410
multiple algorithm or on the

454
00:20:20,410 --> 00:20:21,780
multiplicative scheme by just like

455
00:20:21,780 --> 00:20:24,010
encrypting your external value before

456
00:20:24,010 --> 00:20:27,870
and then performing the multiplication

457
00:20:27,870 --> 00:20:31,660
okay so so we have two players in this

458
00:20:31,660 --> 00:20:33,220
type they start with an additive

459
00:20:33,220 --> 00:20:35,680
encryption of some message m and to make

460
00:20:35,680 --> 00:20:37,930
the presentation simpler we assume here

461
00:20:37,930 --> 00:20:40,240
that M is non zero on the players know

462
00:20:40,240 --> 00:20:43,210
that the first player clicks a uniform

463
00:20:43,210 --> 00:20:45,430
neuron value our and using the fact that

464
00:20:45,430 --> 00:20:47,890
you can do external multiplication on

465
00:20:47,890 --> 00:20:50,070
the additive scheme a multiplied are

466
00:20:50,070 --> 00:20:53,410
inside this encryption of em which give

467
00:20:53,410 --> 00:20:56,170
the new corruption of our times m and it

468
00:20:56,170 --> 00:20:57,670
sends a multiplicative Leo morphic

469
00:20:57,670 --> 00:21:02,470
encryption of our minus one then both

470
00:21:02,470 --> 00:21:03,880
player perform a joint encryption

471
00:21:03,880 --> 00:21:05,860
protocol using the their shares of the

472
00:21:05,860 --> 00:21:08,740
secret key on the additive scheme thing

473
00:21:08,740 --> 00:21:10,510
for example of the pie scheme so that

474
00:21:10,510 --> 00:21:13,210
only the second players run the result

475
00:21:13,210 --> 00:21:16,120
and as we assume here that mo at non

476
00:21:16,120 --> 00:21:18,850
zero this R times M leaks no information

477
00:21:18,850 --> 00:21:21,370
on em it's a uniformly random value over

478
00:21:21,370 --> 00:21:27,550
the lemon star and so with these are

479
00:21:27,550 --> 00:21:30,100
times M we can again use this external

480
00:21:30,100 --> 00:21:32,830
multiplicative external multiplication

481
00:21:32,830 --> 00:21:35,290
but on the other scheme so the second

482
00:21:35,290 --> 00:21:37,210
player simply multiply these are times M

483
00:21:37,210 --> 00:21:41,320
in the encryption of r minus 1 and sends

484
00:21:41,320 --> 00:21:42,790
back the result which is an encryption

485
00:21:42,790 --> 00:21:45,820
of em and that's it so that's a toy

486
00:21:45,820 --> 00:21:47,350
scheme you can see many problem here

487
00:21:47,350 --> 00:21:49,060
related to the fact that we would have

488
00:21:49,060 --> 00:21:52,540
to run demise thing but okay and so what

489
00:21:52,540 --> 00:21:55,900
do we have to do next to solve all the

490
00:21:55,900 --> 00:21:57,640
other problems reality to encryption

491
00:21:57,640 --> 00:21:59,320
switch in protocol well first we have to

492
00:21:59,320 --> 00:22:02,110
deal with the other direction which

493
00:22:02,110 --> 00:22:04,660
essentially requires to build a joint

494
00:22:04,660 --> 00:22:07,750
decryption procedure to the to the

495
00:22:07,750 --> 00:22:09,929
multiplicative scheme that we designed

496
00:22:09,929 --> 00:22:12,509
we need to accept the construction so

497
00:22:12,509 --> 00:22:15,179
that it under the case where the point x

498
00:22:15,179 --> 00:22:17,129
is 0 so that add some more

499
00:22:17,129 --> 00:22:19,470
technicalities in the paper Prue finale

500
00:22:19,470 --> 00:22:20,809
that if we have all of that

501
00:22:20,809 --> 00:22:22,289
complementary homomorphic encryption

502
00:22:22,289 --> 00:22:25,769
scheme and encryption switching protocol

503
00:22:25,769 --> 00:22:28,320
we can evaluate any function that's

504
00:22:28,320 --> 00:22:30,029
quite enough technical but there is

505
00:22:30,029 --> 00:22:33,119
nothing particularly exceptional with it

506
00:22:33,119 --> 00:22:35,490
with this and add security against

507
00:22:35,490 --> 00:22:38,039
malicious adversary's this is quite

508
00:22:38,039 --> 00:22:39,570
interesting because at some point it

509
00:22:39,570 --> 00:22:41,820
requires to be able to prove statements

510
00:22:41,820 --> 00:22:44,190
of the firm two different encryption

511
00:22:44,190 --> 00:22:45,960
scheme do encrypt the same message and

512
00:22:45,960 --> 00:22:49,080
no official proof for search statement

513
00:22:49,080 --> 00:22:51,480
do appear in the literature so we had to

514
00:22:51,480 --> 00:22:54,149
design one and it appears that this

515
00:22:54,149 --> 00:22:57,240
gives a new journal is proof for values

516
00:22:57,240 --> 00:22:59,519
more classical statements so this is a

517
00:22:59,519 --> 00:23:01,549
side contribution of the paper and

518
00:23:01,549 --> 00:23:05,539
that's all thank you for your attention

