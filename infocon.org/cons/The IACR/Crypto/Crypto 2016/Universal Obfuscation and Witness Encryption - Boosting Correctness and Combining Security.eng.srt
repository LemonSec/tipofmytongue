1
00:00:03,830 --> 00:00:06,080
I'm going to talk about Universal

2
00:00:06,080 --> 00:00:08,010
indistinguishability of fisken and

3
00:00:08,010 --> 00:00:10,139
witness encryption and this isn't joint

4
00:00:10,139 --> 00:00:14,490
work with Irish Moni Amit and a lawn so

5
00:00:14,490 --> 00:00:15,809
in the last few years we have seen

6
00:00:15,809 --> 00:00:18,930
numerous interesting results such as the

7
00:00:18,930 --> 00:00:20,910
feasibility of function encryption to

8
00:00:20,910 --> 00:00:23,450
around MPC cells by near maps and

9
00:00:23,450 --> 00:00:26,670
impossibility results and so on and the

10
00:00:26,670 --> 00:00:28,860
tool that enabled all these results is

11
00:00:28,860 --> 00:00:30,870
the notion of indistinguishability

12
00:00:30,870 --> 00:00:34,379
obfuscation so what does indistinct

13
00:00:34,379 --> 00:00:37,170
sugar deification it's just a circuit

14
00:00:37,170 --> 00:00:39,480
compiler that takes us input a circuit

15
00:00:39,480 --> 00:00:42,329
and spits out another circuit such that

16
00:00:42,329 --> 00:00:45,480
it satisfies two properties the first

17
00:00:45,480 --> 00:00:47,940
property is the correctness we require

18
00:00:47,940 --> 00:00:50,730
that the compiled Circuit agrees with

19
00:00:50,730 --> 00:00:54,140
the original circuit on all inputs and

20
00:00:54,140 --> 00:00:56,429
the second property is the security

21
00:00:56,429 --> 00:00:58,920
property suppose we start with two

22
00:00:58,920 --> 00:01:00,329
circuits that are functionally

23
00:01:00,329 --> 00:01:03,269
equivalent let's say you apply IO on

24
00:01:03,269 --> 00:01:05,760
both these circuits we require that the

25
00:01:05,760 --> 00:01:07,500
compiled circuits are computationally

26
00:01:07,500 --> 00:01:09,329
indistinguishable so this is the

27
00:01:09,329 --> 00:01:12,450
security guarantee so now that we have

28
00:01:12,450 --> 00:01:15,540
seen that iOS a powerful notion and it

29
00:01:15,540 --> 00:01:18,960
implies useful results the next natural

30
00:01:18,960 --> 00:01:21,240
question to ask is how do we construct

31
00:01:21,240 --> 00:01:25,229
this primitive okay and the very first

32
00:01:25,229 --> 00:01:28,320
construction of fire was given by Gentry

33
00:01:28,320 --> 00:01:31,710
Halevi right coerce and waters in 2013

34
00:01:31,710 --> 00:01:35,009
and they built this primitive using the

35
00:01:35,009 --> 00:01:38,280
notion of multi-layer maps since then

36
00:01:38,280 --> 00:01:39,750
there have been numerous constructions

37
00:01:39,750 --> 00:01:42,479
and all these constructions have been

38
00:01:42,479 --> 00:01:45,509
built using multi linear maps I can

39
00:01:45,509 --> 00:01:47,759
broadly classify all these constructions

40
00:01:47,759 --> 00:01:50,130
into two categories in the first

41
00:01:50,130 --> 00:01:53,429
category we have IO constructions whose

42
00:01:53,429 --> 00:01:55,859
security has been proven in ideal

43
00:01:55,859 --> 00:01:59,280
multi-layer map model so in this model

44
00:01:59,280 --> 00:02:01,499
we consider adversaries who can access

45
00:02:01,499 --> 00:02:04,999
the in codings in a blackbox manner and

46
00:02:04,999 --> 00:02:08,130
on this on the other hand we have some

47
00:02:08,130 --> 00:02:09,690
constructions which are based on

48
00:02:09,690 --> 00:02:13,100
concrete assumptions on a Maps

49
00:02:15,470 --> 00:02:18,020
so now that we have seen that we can

50
00:02:18,020 --> 00:02:20,210
build io from melting air maps the next

51
00:02:20,210 --> 00:02:21,590
question to ask is can we instantiate

52
00:02:21,590 --> 00:02:24,530
Moulton ear maps and the good news is

53
00:02:24,530 --> 00:02:26,510
that there are several candidates of

54
00:02:26,510 --> 00:02:28,820
multi in maps known starting from the

55
00:02:28,820 --> 00:02:32,840
work of Gentry in Hawaii but the bad

56
00:02:32,840 --> 00:02:35,270
news is is that several concrete

57
00:02:35,270 --> 00:02:39,080
assumptions on M maps are broken in fact

58
00:02:39,080 --> 00:02:42,230
there are also attacks on IO candidates

59
00:02:42,230 --> 00:02:47,810
from M maps as well so at this point

60
00:02:47,810 --> 00:02:50,780
given the attacks on multi maps it's

61
00:02:50,780 --> 00:02:53,540
natural to ask if all the candidates of

62
00:02:53,540 --> 00:02:56,600
AI or broken and the answer turns out to

63
00:02:56,600 --> 00:02:59,060
be no I should also confess that I'm not

64
00:02:59,060 --> 00:03:04,760
attaining the cryptanalysis talks so so

65
00:03:04,760 --> 00:03:06,470
I will show the status of all the IO

66
00:03:06,470 --> 00:03:09,440
candidates in this table so the rows

67
00:03:09,440 --> 00:03:11,540
indicate although your candidates and

68
00:03:11,540 --> 00:03:14,570
the columns indicate the functions for

69
00:03:14,570 --> 00:03:17,200
which these candidates are defined and

70
00:03:17,200 --> 00:03:19,580
we are going to mark an entry in this

71
00:03:19,580 --> 00:03:22,330
table to be pleased using cross mark if

72
00:03:22,330 --> 00:03:24,650
this particular candidate for this

73
00:03:24,650 --> 00:03:27,950
functionality is broken and we mark it

74
00:03:27,950 --> 00:03:30,769
with mark it with dot if we don't know

75
00:03:30,769 --> 00:03:35,750
if any attack so far and I'm not

76
00:03:35,750 --> 00:03:37,220
describing what are these class of

77
00:03:37,220 --> 00:03:39,739
functions these are the class of

78
00:03:39,739 --> 00:03:41,959
function says that it suffices to build

79
00:03:41,959 --> 00:03:45,320
io for the for them in order to get io

80
00:03:45,320 --> 00:03:49,040
for arbitrary class of functions this is

81
00:03:49,040 --> 00:03:49,820
obtained

82
00:03:49,820 --> 00:03:51,500
why are what we call bootstrapping

83
00:03:51,500 --> 00:03:55,940
theorems and the table extends to next

84
00:03:55,940 --> 00:03:57,920
page as well so as you can see there are

85
00:03:57,920 --> 00:04:03,620
a lot of dot marks here yeah so now that

86
00:04:03,620 --> 00:04:05,570
we have seen that we have so many

87
00:04:05,570 --> 00:04:07,790
candidates that we know we don't know

88
00:04:07,790 --> 00:04:10,760
whether they are broken or not we want

89
00:04:10,760 --> 00:04:13,430
to find a candidate that is the most

90
00:04:13,430 --> 00:04:17,660
secure among all of them perhaps the

91
00:04:17,660 --> 00:04:19,608
more ambitious goal is if you give me a

92
00:04:19,608 --> 00:04:23,360
set of fire candidates I need to find I

93
00:04:23,360 --> 00:04:26,330
owe candidate that is secure as long as

94
00:04:26,330 --> 00:04:27,000
there

95
00:04:27,000 --> 00:04:29,220
exists and IO candidate in your set that

96
00:04:29,220 --> 00:04:35,580
is secure okay and this is what we will

97
00:04:35,580 --> 00:04:37,950
call as IO combiner so I combined it

98
00:04:37,950 --> 00:04:40,110
essentially gives a mechanism of

99
00:04:40,110 --> 00:04:42,030
combining different candidates into a

100
00:04:42,030 --> 00:04:44,430
single candidate that is secure as long

101
00:04:44,430 --> 00:04:46,740
as any of the candidates you have

102
00:04:46,740 --> 00:04:51,120
combined is secure and in fact we

103
00:04:51,120 --> 00:04:53,400
achieve something stronger what is

104
00:04:53,400 --> 00:04:56,610
called as robust a combiner we only

105
00:04:56,610 --> 00:04:59,160
require that the secure candidate be

106
00:04:59,160 --> 00:05:01,830
correct so it could be that all the

107
00:05:01,830 --> 00:05:03,720
other insecure candidates have given me

108
00:05:03,720 --> 00:05:06,000
or incorrect and even then our combiner

109
00:05:06,000 --> 00:05:11,700
would work so let me define this notion

110
00:05:11,700 --> 00:05:14,850
more precisely but before that I want to

111
00:05:14,850 --> 00:05:17,270
mention the concurrent word by 15 at all

112
00:05:17,270 --> 00:05:19,980
they show how to get robust a combiner

113
00:05:19,980 --> 00:05:22,320
for constant number of candidates and

114
00:05:22,320 --> 00:05:25,980
they assume that an honest majority of

115
00:05:25,980 --> 00:05:28,860
them the majority of them are secure and

116
00:05:28,860 --> 00:05:32,130
correct okay and it's going to be this

117
00:05:32,130 --> 00:05:34,500
in the next stop so I don't want to talk

118
00:05:34,500 --> 00:05:37,410
about it in more detail so let me define

119
00:05:37,410 --> 00:05:41,100
what our robust our combined us in more

120
00:05:41,100 --> 00:05:44,520
formally so suppose let's say you give

121
00:05:44,520 --> 00:05:48,300
me n candidates P 1 2 P n so these are

122
00:05:48,300 --> 00:05:51,450
the descriptions of the candidates so my

123
00:05:51,450 --> 00:05:53,280
i/o combiner will have two algorithms

124
00:05:53,280 --> 00:05:55,260
the first algorithm is enough first gate

125
00:05:55,260 --> 00:05:57,810
algorithm that takes as input the

126
00:05:57,810 --> 00:06:00,780
description of all the candidates the

127
00:06:00,780 --> 00:06:03,080
circuit to be a FISC ated and it outputs

128
00:06:03,080 --> 00:06:05,700
C star which is the first gated circuit

129
00:06:05,700 --> 00:06:08,340
and then you have the evaluation

130
00:06:08,340 --> 00:06:10,890
algorithm that takes as input again the

131
00:06:10,890 --> 00:06:12,720
description of all the candidates the

132
00:06:12,720 --> 00:06:15,270
first created circuit the input on which

133
00:06:15,270 --> 00:06:16,830
you want to evaluate the FISC ated

134
00:06:16,830 --> 00:06:21,270
circuit on and it outputs y okay just as

135
00:06:21,270 --> 00:06:23,490
in any i/o scheme this needs to satisfy

136
00:06:23,490 --> 00:06:25,560
two properties which are correctness and

137
00:06:25,560 --> 00:06:28,650
security and both these properties will

138
00:06:28,650 --> 00:06:31,620
be parametrized by an index i from 1 to

139
00:06:31,620 --> 00:06:35,820
n that is let's say there exists so we

140
00:06:35,820 --> 00:06:37,680
want to define both these properties as

141
00:06:37,680 --> 00:06:40,940
a function of AI

142
00:06:41,330 --> 00:06:44,159
so the correctness guarantee just says

143
00:06:44,159 --> 00:06:45,629
that the output of the evaluation

144
00:06:45,629 --> 00:06:49,169
algorithm is C of X and this should be

145
00:06:49,169 --> 00:06:51,689
true as long as the eyuth candidate

146
00:06:51,689 --> 00:06:56,360
satisfies the correctness property and

147
00:06:56,360 --> 00:06:59,639
the security property says that if you

148
00:06:59,639 --> 00:07:02,099
give me two equivalent circuits then the

149
00:07:02,099 --> 00:07:04,469
output of the first gate algorithm on C

150
00:07:04,469 --> 00:07:05,819
zero is computationally

151
00:07:05,819 --> 00:07:07,649
indistinguishable from output of the

152
00:07:07,649 --> 00:07:10,919
first gate algorithm on C 1 and this

153
00:07:10,919 --> 00:07:13,439
again should hold as long as PA

154
00:07:13,439 --> 00:07:15,119
satisfies the security property of the I

155
00:07:15,119 --> 00:07:20,039
of scheme just to summarize if P I is a

156
00:07:20,039 --> 00:07:22,139
correct and secure scheme then the

157
00:07:22,139 --> 00:07:24,029
combined candidate is also correct and

158
00:07:24,029 --> 00:07:28,050
secure so and the the rest of the

159
00:07:28,050 --> 00:07:30,360
candidates could be incorrect and

160
00:07:30,360 --> 00:07:35,849
insecure that doesn't matter so let's

161
00:07:35,849 --> 00:07:39,779
see why robust combiners are useful it

162
00:07:39,779 --> 00:07:42,800
implies what we call the Universal i/o

163
00:07:42,800 --> 00:07:46,679
so what is Universal i/o a scheme is

164
00:07:46,679 --> 00:07:50,669
said to be a universal i/o scheme if at

165
00:07:50,669 --> 00:07:53,399
all io exists then this particular

166
00:07:53,399 --> 00:07:59,159
scheme is a secure I or scheme okay so

167
00:07:59,159 --> 00:08:01,919
in just restate it in a different way if

168
00:08:01,919 --> 00:08:04,769
you show that i/o exists then this

169
00:08:04,769 --> 00:08:08,309
particular description of of the

170
00:08:08,309 --> 00:08:10,319
universal i/o scheme is a Sakura of

171
00:08:10,319 --> 00:08:16,139
scheme and I am omitting parameters T

172
00:08:16,139 --> 00:08:18,539
and Q from this description where T

173
00:08:18,539 --> 00:08:20,459
denotes the running time of the IO

174
00:08:20,459 --> 00:08:23,550
scheme that exists and Q is the security

175
00:08:23,550 --> 00:08:30,509
loss and our work answers a question

176
00:08:30,509 --> 00:08:34,139
posed by cold washer cholai who who

177
00:08:34,139 --> 00:08:35,938
posed the question of constructing in

178
00:08:35,938 --> 00:08:38,299
versalife

179
00:08:40,719 --> 00:08:43,179
okay so let me straight over main

180
00:08:43,179 --> 00:08:45,879
theorem we show that assuming sub

181
00:08:45,879 --> 00:08:48,839
exponentially secure lwe there exists

182
00:08:48,839 --> 00:08:53,500
robust IO combiner we also have another

183
00:08:53,500 --> 00:08:56,139
result where we show how to get robust a

184
00:08:56,139 --> 00:08:59,019
combiner from sub exponentially secure

185
00:08:59,019 --> 00:09:03,449
DDH and as a corollary we get

186
00:09:03,449 --> 00:09:07,529
universally under the same assumptions

187
00:09:09,360 --> 00:09:12,939
so we also consider robust combiners for

188
00:09:12,939 --> 00:09:15,490
witness encryption I'm not going to

189
00:09:15,490 --> 00:09:17,439
define what is witness encryption but

190
00:09:17,439 --> 00:09:18,819
the only thing you need to know is that

191
00:09:18,819 --> 00:09:21,009
all constructions of witness encryption

192
00:09:21,009 --> 00:09:24,360
are currently based on multi linear maps

193
00:09:24,360 --> 00:09:26,529
and so suffer from the same

194
00:09:26,529 --> 00:09:30,759
vulnerabilities as that of io and we can

195
00:09:30,759 --> 00:09:32,740
also define robust witness encryption

196
00:09:32,740 --> 00:09:35,529
combiners along the same lines as that

197
00:09:35,529 --> 00:09:40,180
of robust i/o combiners so and in this

198
00:09:40,180 --> 00:09:41,980
work we show how to get robust our

199
00:09:41,980 --> 00:09:44,949
combiners from one-way functions and as

200
00:09:44,949 --> 00:09:46,899
a corollary you can also get Universal

201
00:09:46,899 --> 00:09:48,579
witness encryption assuming one-way

202
00:09:48,579 --> 00:09:55,089
functions okay so let me the notion of

203
00:09:55,089 --> 00:09:57,310
combiners and Universal constructions is

204
00:09:57,310 --> 00:10:00,699
not a new thing so let me briefly recall

205
00:10:00,699 --> 00:10:05,589
what is known the famous example is that

206
00:10:05,589 --> 00:10:09,329
of 11th universe of one-way function and

207
00:10:09,329 --> 00:10:12,850
as smooth studied combiners for

208
00:10:12,850 --> 00:10:15,880
encryption schemes there was a beautiful

209
00:10:15,880 --> 00:10:18,430
work with studies combiners for crypto

210
00:10:18,430 --> 00:10:21,490
some crypto parameters such as oblivious

211
00:10:21,490 --> 00:10:24,670
transfer and it also studies its

212
00:10:24,670 --> 00:10:26,829
connection to Universal constructions

213
00:10:26,829 --> 00:10:29,980
this is the work of hardening Killian

214
00:10:29,980 --> 00:10:34,300
our Rheingold and rosen and there were

215
00:10:34,300 --> 00:10:37,540
also some notions of robust combiners

216
00:10:37,540 --> 00:10:39,790
considered for obfuscation in the work

217
00:10:39,790 --> 00:10:42,420
of Hertzberg

218
00:10:43,760 --> 00:10:49,579
okay so let me show how to build robust

219
00:10:49,579 --> 00:10:52,070
toy combiner so let's start with a very

220
00:10:52,070 --> 00:10:54,320
big goal where we just have three

221
00:10:54,320 --> 00:10:56,510
candidates okay so we have P 1 P 2 and P

222
00:10:56,510 --> 00:10:58,820
3 and we want to build robust AI a

223
00:10:58,820 --> 00:11:02,600
combiner for these three candidates so

224
00:11:02,600 --> 00:11:04,760
the most natural approach that comes to

225
00:11:04,760 --> 00:11:08,870
your mind is that of reification so you

226
00:11:08,870 --> 00:11:11,389
start with the circuit C that you want

227
00:11:11,389 --> 00:11:13,490
off the skate or you are going to first

228
00:11:13,490 --> 00:11:16,760
off the skate C using P 1 and then

229
00:11:16,760 --> 00:11:18,529
you're going to first get this result

230
00:11:18,529 --> 00:11:20,870
using P 2 and then you are going to

231
00:11:20,870 --> 00:11:26,089
first get this result using P 3 so this

232
00:11:26,089 --> 00:11:28,550
is the net construction let's see

233
00:11:28,550 --> 00:11:31,190
whether it works or not so the question

234
00:11:31,190 --> 00:11:34,430
is whether it's secure so for simplicity

235
00:11:34,430 --> 00:11:37,010
let's just assume that the that all the

236
00:11:37,010 --> 00:11:41,589
candidates p1 p2 and p3 are correct

237
00:11:41,980 --> 00:11:45,079
let's take a simple case let us take a

238
00:11:45,079 --> 00:11:48,649
simple case where p2 is secure but p1

239
00:11:48,649 --> 00:11:51,199
and p3 are not secure but note that all

240
00:11:51,199 --> 00:11:55,399
three candidates are correct and it's an

241
00:11:55,399 --> 00:11:57,949
easy exercise to show that the security

242
00:11:57,949 --> 00:11:59,930
of p2 implies the security of the

243
00:11:59,930 --> 00:12:03,380
combined scheme and you realize that it

244
00:12:03,380 --> 00:12:06,380
is crucial that p1 satisfies correctness

245
00:12:06,380 --> 00:12:07,910
properties in order to prove this

246
00:12:07,910 --> 00:12:16,160
statement so the next natural question

247
00:12:16,160 --> 00:12:18,199
to ask is what if the candidates in

248
00:12:18,199 --> 00:12:20,690
secure candidates are incorrect whether

249
00:12:20,690 --> 00:12:23,630
this will work or not at first you might

250
00:12:23,630 --> 00:12:24,860
think that what is the connection

251
00:12:24,860 --> 00:12:26,690
between correctness and security it

252
00:12:26,690 --> 00:12:31,310
should still be secure right and the

253
00:12:31,310 --> 00:12:33,500
answer turns out to be that the i/o

254
00:12:33,500 --> 00:12:38,449
combiner is in fact insecure and let's

255
00:12:38,449 --> 00:12:41,269
see why let's see a counter example so

256
00:12:41,269 --> 00:12:42,709
let's start with two circuits easy you

257
00:12:42,709 --> 00:12:44,180
don't see one which are functional

258
00:12:44,180 --> 00:12:46,970
equivalent and let's start with the case

259
00:12:46,970 --> 00:12:51,769
when P 1 is incorrect so on the Left

260
00:12:51,769 --> 00:12:54,709
world p1 on input C 0 could potentially

261
00:12:54,709 --> 00:12:56,810
output a garbage circuit in which case

262
00:12:56,810 --> 00:12:57,630
the combined

263
00:12:57,630 --> 00:12:59,430
circuit on input X will always output

264
00:12:59,430 --> 00:13:03,930
bought on the right-hand side p1 on

265
00:13:03,930 --> 00:13:06,180
input c1 could output a functional

266
00:13:06,180 --> 00:13:08,490
equivalent circuit in which case the

267
00:13:08,490 --> 00:13:10,350
combined circuit the combined scheme

268
00:13:10,350 --> 00:13:14,280
behaves correctly so with this we have a

269
00:13:14,280 --> 00:13:16,110
trivial distinguisher to distinguish the

270
00:13:16,110 --> 00:13:18,990
left and the right quotes and so this

271
00:13:18,990 --> 00:13:24,510
doesn't work okay so even though this

272
00:13:24,510 --> 00:13:26,280
counter example doesn't work but there's

273
00:13:26,280 --> 00:13:30,180
still some message that we can take and

274
00:13:30,180 --> 00:13:33,060
the message is that if you have a

275
00:13:33,060 --> 00:13:35,460
circuit that needs to be associated then

276
00:13:35,460 --> 00:13:37,530
you have to hide this circuit from all

277
00:13:37,530 --> 00:13:42,510
the candidates so this sort of leads to

278
00:13:42,510 --> 00:13:46,020
a natural idea just do secret sharing of

279
00:13:46,020 --> 00:13:47,820
the circuit right so you want to a

280
00:13:47,820 --> 00:13:49,920
first-grader circuit see secret share

281
00:13:49,920 --> 00:13:52,620
this circuit and distribute the secret

282
00:13:52,620 --> 00:13:57,240
shares among all the candidates and once

283
00:13:57,240 --> 00:14:00,270
you do that we somehow on input X these

284
00:14:00,270 --> 00:14:04,530
candidates jointly compute C of X so

285
00:14:04,530 --> 00:14:06,720
it's not clear what this means and how

286
00:14:06,720 --> 00:14:10,880
to implement this step and in order to

287
00:14:10,880 --> 00:14:13,260
implement this step we are going to use

288
00:14:13,260 --> 00:14:19,830
techniques from MPC at this point you

289
00:14:19,830 --> 00:14:20,670
might be wondering what is the

290
00:14:20,670 --> 00:14:22,650
connection between MPC and the notion of

291
00:14:22,650 --> 00:14:25,530
i/o combiners right to see the

292
00:14:25,530 --> 00:14:29,150
connection we can view all the

293
00:14:29,150 --> 00:14:32,280
candidates as corresponding to parties

294
00:14:32,280 --> 00:14:36,690
in an MPC protocol ok so every party

295
00:14:36,690 --> 00:14:41,490
corresponds to a candidate and similarly

296
00:14:41,490 --> 00:14:44,250
all the honest players in the MPC

297
00:14:44,250 --> 00:14:46,230
protocol correspond to the secure and

298
00:14:46,230 --> 00:14:48,810
correct candidates and all the insecure

299
00:14:48,810 --> 00:14:50,640
or candidates correspond to the

300
00:14:50,640 --> 00:14:52,800
malicious adversaries in an MPC protocol

301
00:14:52,800 --> 00:14:55,340
so this is the analogy between MPC and

302
00:14:55,340 --> 00:15:02,340
and and the setting of u combiners so

303
00:15:02,340 --> 00:15:06,000
with this let's let's see how to build

304
00:15:06,000 --> 00:15:09,060
io combine or starting from NPC protocol

305
00:15:09,060 --> 00:15:11,370
so suppose let's say C

306
00:15:11,370 --> 00:15:13,220
the circuit that needs to be associated

307
00:15:13,220 --> 00:15:15,560
so we are going to start with the three

308
00:15:15,560 --> 00:15:18,000
three party secure computation protocol

309
00:15:18,000 --> 00:15:20,250
or note that we are still building i/o

310
00:15:20,250 --> 00:15:23,520
combiner for just three candidates so we

311
00:15:23,520 --> 00:15:25,140
just need a three three party secure

312
00:15:25,140 --> 00:15:27,060
computation protocol so you have these

313
00:15:27,060 --> 00:15:29,790
three parties you're going to secret

314
00:15:29,790 --> 00:15:32,190
share the circuit into three shares g1

315
00:15:32,190 --> 00:15:36,779
g2 and g3 and then you are going to

316
00:15:36,779 --> 00:15:38,790
office Kate the code of these parties

317
00:15:38,790 --> 00:15:40,710
with the shares hardwired inside them

318
00:15:40,710 --> 00:15:44,040
using the candidates so for instance

319
00:15:44,040 --> 00:15:45,510
you're going to hardwire the code of the

320
00:15:45,510 --> 00:15:48,020
first party with g1 hardwired into it

321
00:15:48,020 --> 00:15:51,240
using p1 sorry you are going to

322
00:15:51,240 --> 00:15:53,730
obfuscate the code of the party with

323
00:15:53,730 --> 00:15:58,110
Jeevan hardwired into it using p1 so

324
00:15:58,110 --> 00:16:00,210
this is the this is sort of the

325
00:16:00,210 --> 00:16:04,410
high-level approach the question is

326
00:16:04,410 --> 00:16:06,570
which NPC to use and how to actually

327
00:16:06,570 --> 00:16:10,230
implement this approach right in order

328
00:16:10,230 --> 00:16:12,900
to see which NPC to use the first thing

329
00:16:12,900 --> 00:16:15,210
we observe is that all the i/o

330
00:16:15,210 --> 00:16:18,240
candidates are actually stateless but if

331
00:16:18,240 --> 00:16:19,950
you think of NPC all the parties are

332
00:16:19,950 --> 00:16:22,190
actually stateful parties stateful

333
00:16:22,190 --> 00:16:25,560
algorithms right and since the ho

334
00:16:25,560 --> 00:16:27,600
candidates are stateless this actually

335
00:16:27,600 --> 00:16:29,910
reads to resetting attacks because the

336
00:16:29,910 --> 00:16:32,430
evaluator can potentially query the

337
00:16:32,430 --> 00:16:34,830
candidates on multiple inputs observe

338
00:16:34,830 --> 00:16:37,070
different values gain some information

339
00:16:37,070 --> 00:16:39,360
so this is something we have to keep in

340
00:16:39,360 --> 00:16:42,060
mind while choosing the appropriate NPC

341
00:16:42,060 --> 00:16:46,290
protocol so in order to avoid avoid

342
00:16:46,290 --> 00:16:47,610
resetting attacks we are just going to

343
00:16:47,610 --> 00:16:50,400
use a non interactive MPC and in

344
00:16:50,400 --> 00:16:51,810
particular we are going to use

345
00:16:51,810 --> 00:16:54,240
techniques from threshold fhe based and

346
00:16:54,240 --> 00:17:00,390
PC to actually obtain i/o combiner so

347
00:17:00,390 --> 00:17:03,660
let me present the construction of lwa

348
00:17:03,660 --> 00:17:08,609
style combiner and again just to keep

349
00:17:08,609 --> 00:17:10,349
things simple assume all candidates are

350
00:17:10,349 --> 00:17:13,079
correct and I'm going to present and I

351
00:17:13,079 --> 00:17:14,550
combine or for arbitrary number of

352
00:17:14,550 --> 00:17:18,449
candidates it's not just 3 now ok so in

353
00:17:18,449 --> 00:17:20,369
order to do this we are going to use a

354
00:17:20,369 --> 00:17:23,250
tool which I'm going to call threshold F

355
00:17:23,250 --> 00:17:25,400
which is star

356
00:17:25,400 --> 00:17:28,260
this has a setup algorithm that outputs

357
00:17:28,260 --> 00:17:31,650
the public key and n secret keys here n

358
00:17:31,650 --> 00:17:35,039
will be the number of parties and you

359
00:17:35,039 --> 00:17:37,010
have an encryption algorithm that

360
00:17:37,010 --> 00:17:41,250
encrypts em to obtain C T there is an

361
00:17:41,250 --> 00:17:44,580
Homeric evolution algorithm and you have

362
00:17:44,580 --> 00:17:46,919
a partial decryption algorithm that lets

363
00:17:46,919 --> 00:17:50,730
you decrypt this ciphertext using SK I

364
00:17:50,730 --> 00:17:53,159
to obtain the partial decrypted value

365
00:17:53,159 --> 00:17:58,409
CDI and then there is a public algorithm

366
00:17:58,409 --> 00:18:01,169
that lets you combine all these

367
00:18:01,169 --> 00:18:05,120
different cipher texts to obtain F of M

368
00:18:05,120 --> 00:18:10,590
and you can actually build threshold fhe

369
00:18:10,590 --> 00:18:13,409
star from threshold multi kechi which in

370
00:18:13,409 --> 00:18:15,929
turn can be based on learning with

371
00:18:15,929 --> 00:18:19,380
resolution so let me present the

372
00:18:19,380 --> 00:18:23,240
construction so we have a p1 to PN

373
00:18:23,240 --> 00:18:25,950
candidates so in order to have first

374
00:18:25,950 --> 00:18:27,840
gate C the first thing I'm going to do

375
00:18:27,840 --> 00:18:29,610
is to run the setup algorithm of the

376
00:18:29,610 --> 00:18:33,990
threshold fhe star scheme then I'm going

377
00:18:33,990 --> 00:18:36,330
to encrypt the circuit C to obtain the

378
00:18:36,330 --> 00:18:40,080
cipher text then I'm going to output the

379
00:18:40,080 --> 00:18:44,330
following for all indices in N 1 to N so

380
00:18:44,330 --> 00:18:46,950
we are going to construct this circuit H

381
00:18:46,950 --> 00:18:49,200
I which has hardwired into it the

382
00:18:49,200 --> 00:18:52,559
ciphertext C T along with the partial

383
00:18:52,559 --> 00:18:55,830
along with the secret key SK I so what

384
00:18:55,830 --> 00:18:59,390
does this circuit do it takes us input X

385
00:18:59,390 --> 00:19:02,460
first fully horrifically evaluates the

386
00:19:02,460 --> 00:19:06,419
universal circuit on C T and then it

387
00:19:06,419 --> 00:19:08,400
partially decrypts the resulting

388
00:19:08,400 --> 00:19:12,299
ciphertext using ASCII I and then you

389
00:19:12,299 --> 00:19:14,610
are going to obfuscate this H I circuit

390
00:19:14,610 --> 00:19:22,200
using P i okay so note that C T comma C

391
00:19:22,200 --> 00:19:26,270
I is essentially the ayats share of C

392
00:19:26,630 --> 00:19:30,840
okay so in other words the output of the

393
00:19:30,840 --> 00:19:33,659
first gate algorithm is essentially p1

394
00:19:33,659 --> 00:19:37,429
of H 1 to PN of fetcher

395
00:19:37,680 --> 00:19:41,100
the question is how do you evaluate so

396
00:19:41,100 --> 00:19:45,530
you have this fisken affiliated circuit

397
00:19:45,530 --> 00:19:48,930
for every eye you are going to feed an X

398
00:19:48,930 --> 00:19:52,950
and you're going to get CTI as the

399
00:19:52,950 --> 00:19:57,090
output of the circuit then you are going

400
00:19:57,090 --> 00:19:59,430
to combine all the partial decrypted

401
00:19:59,430 --> 00:20:04,190
value c t1 to CTN to produce the effects

402
00:20:04,190 --> 00:20:11,280
so this is how the evaluation works ok

403
00:20:11,280 --> 00:20:14,310
so now the question is how do we show

404
00:20:14,310 --> 00:20:17,820
that this is secure so let's say PA star

405
00:20:17,820 --> 00:20:23,040
is the secure candidate the goal will be

406
00:20:23,040 --> 00:20:26,790
to remove the I star a secret key from P

407
00:20:26,790 --> 00:20:30,630
I star and why do we want that suppose

408
00:20:30,630 --> 00:20:32,070
let's say you are able to remove as K a

409
00:20:32,070 --> 00:20:34,650
star from P I start then you can just

410
00:20:34,650 --> 00:20:37,290
use semantic security of CT to argue

411
00:20:37,290 --> 00:20:41,940
that C is hidden and how do you remove

412
00:20:41,940 --> 00:20:44,340
SK a star it's going to be removed one

413
00:20:44,340 --> 00:20:46,920
step at a time and the number of steps

414
00:20:46,920 --> 00:20:49,770
will be equal to the number of inputs if

415
00:20:49,770 --> 00:20:52,350
you are familiar with punctured

416
00:20:52,350 --> 00:20:54,270
programming techniques it follows along

417
00:20:54,270 --> 00:20:58,560
those lines but more specifically we are

418
00:20:58,560 --> 00:21:00,210
going to use a technique called

419
00:21:00,210 --> 00:21:03,840
partition programming technique where in

420
00:21:03,840 --> 00:21:08,610
the QH step you will have s ki star are

421
00:21:08,610 --> 00:21:11,340
not used for the first q inputs but it

422
00:21:11,340 --> 00:21:14,959
is used for all the rest of the inputs

423
00:21:16,310 --> 00:21:18,930
okay so this is the high-level proof

424
00:21:18,930 --> 00:21:23,370
intuition we can work it out and show

425
00:21:23,370 --> 00:21:26,720
that this was secure so let me move on

426
00:21:26,720 --> 00:21:30,360
so so far we have assumed that that all

427
00:21:30,360 --> 00:21:33,210
the candidates are correct right now the

428
00:21:33,210 --> 00:21:34,970
question is what if they are not correct

429
00:21:34,970 --> 00:21:39,120
and at first you might think that may be

430
00:21:39,120 --> 00:21:41,400
the work of batons KY equal to nothing

431
00:21:41,400 --> 00:21:45,780
might be directly applicable here and in

432
00:21:45,780 --> 00:21:48,830
particular let me recall what they show

433
00:21:48,830 --> 00:21:51,450
they show how to

434
00:21:51,450 --> 00:21:54,690
go from half plus 1by poly approximately

435
00:21:54,690 --> 00:21:57,869
correct IO for all circuits to perfectly

436
00:21:57,869 --> 00:22:00,499
correct correct IO for all circuits and

437
00:22:00,499 --> 00:22:02,849
the thing I want to emphasize here is

438
00:22:02,849 --> 00:22:07,919
that they require that the scheme they

439
00:22:07,919 --> 00:22:10,499
start with should be half this one by

440
00:22:10,499 --> 00:22:12,359
poly correct and that too it should hold

441
00:22:12,359 --> 00:22:18,570
for all circuits so but the natural

442
00:22:18,570 --> 00:22:20,070
question to ask here is that how do you

443
00:22:20,070 --> 00:22:21,979
even check if a candidate is half plus

444
00:22:21,979 --> 00:22:24,299
1by poly correct and the two for all

445
00:22:24,299 --> 00:22:27,509
circuits right and as you might have

446
00:22:27,509 --> 00:22:29,789
guessed this is not possible to do it in

447
00:22:29,789 --> 00:22:34,950
polynomial time okay so we are going to

448
00:22:34,950 --> 00:22:36,389
use a different approach to solve this

449
00:22:36,389 --> 00:22:39,089
problem so what are we going to do we

450
00:22:39,089 --> 00:22:42,419
are first going to check if the if'

451
00:22:42,419 --> 00:22:45,779
candidate is 1 minus 1 by NK correct on

452
00:22:45,779 --> 00:22:49,349
the specific circuit GI K here is the

453
00:22:49,349 --> 00:22:52,709
security parameter and this can be done

454
00:22:52,709 --> 00:22:55,769
by just sampling many random points and

455
00:22:55,769 --> 00:22:57,690
then checking if the phosphate Eighth

456
00:22:57,690 --> 00:23:00,179
Circuit agrees with the original circuit

457
00:23:00,179 --> 00:23:03,419
on these random points and if the check

458
00:23:03,419 --> 00:23:07,859
fails just discard this candidate and

459
00:23:07,859 --> 00:23:11,309
then we are going to observe that if you

460
00:23:11,309 --> 00:23:14,450
combine all the candidates that remain

461
00:23:14,450 --> 00:23:17,969
then that combined scheme is 1 minus 1

462
00:23:17,969 --> 00:23:20,579
by K correct and that - it is correct

463
00:23:20,579 --> 00:23:23,909
for all circuits and this you can show

464
00:23:23,909 --> 00:23:26,339
by Union bound and also exploiting the

465
00:23:26,339 --> 00:23:28,109
specific structure of the combined

466
00:23:28,109 --> 00:23:33,299
scheme we have once you have the second

467
00:23:33,299 --> 00:23:36,479
bullet now we can just apply BB 16 on

468
00:23:36,479 --> 00:23:38,999
top of this to show to get an

469
00:23:38,999 --> 00:23:40,259
obfuscation scheme that is correct for

470
00:23:40,259 --> 00:23:45,329
all the inputs so this is how you are

471
00:23:45,329 --> 00:23:46,739
going to we are going to deal with

472
00:23:46,739 --> 00:23:49,139
correctness issue so let me just

473
00:23:49,139 --> 00:23:52,079
conclude so we showed how to construct

474
00:23:52,079 --> 00:23:53,879
i/o combiner from subjects manually

475
00:23:53,879 --> 00:23:56,700
secure w/e what I did not talk about is

476
00:23:56,700 --> 00:23:59,639
to construct I combiner from DDH and

477
00:23:59,639 --> 00:24:01,409
also combine us for our witness

478
00:24:01,409 --> 00:24:03,659
encryption I encourage you to read the

479
00:24:03,659 --> 00:24:04,610
paper

480
00:24:04,610 --> 00:24:09,860
and if this the result of robust i

481
00:24:09,860 --> 00:24:12,290
combiner implies universal i/o from sub

482
00:24:12,290 --> 00:24:15,740
exponentially secure l debris the

483
00:24:15,740 --> 00:24:17,540
natural open question here is that can

484
00:24:17,540 --> 00:24:19,670
actually construct robust a combiner

485
00:24:19,670 --> 00:24:23,390
from one-way functions and also to

486
00:24:23,390 --> 00:24:25,549
construct combiners for other primitives

487
00:24:25,549 --> 00:24:29,049
from which are built from M Maps okay

488
00:24:29,049 --> 00:24:30,600
thank you

489
00:24:30,600 --> 00:24:35,669
[Applause]

