1
00:00:04,140 --> 00:00:07,660
so hello everybody thanks for coming

2
00:00:07,660 --> 00:00:10,480
here after the run session my voice

3
00:00:10,480 --> 00:00:13,000
didn't survive so bear with me but I

4
00:00:13,000 --> 00:00:15,460
know that you survived it's nice so I'm

5
00:00:15,460 --> 00:00:17,340
going to talk to you about a bunch of

6
00:00:17,340 --> 00:00:19,960
nice properties that we can get in you

7
00:00:19,960 --> 00:00:22,090
see commitments and the new techniques

8
00:00:22,090 --> 00:00:25,810
that we use to get there first of all I

9
00:00:25,810 --> 00:00:27,610
want to give you an introduction about

10
00:00:27,610 --> 00:00:30,130
water commitment so are they good for

11
00:00:30,130 --> 00:00:32,079
and more the properties you're looking

12
00:00:32,079 --> 00:00:34,989
at then I'll talk you talk to you a

13
00:00:34,989 --> 00:00:37,149
little bit about these related words

14
00:00:37,149 --> 00:00:39,100
which are kind of a long line of

15
00:00:39,100 --> 00:00:40,780
research the lads and the result we have

16
00:00:40,780 --> 00:00:44,589
here today and our results the general

17
00:00:44,589 --> 00:00:46,239
framework that we use to achieve that

18
00:00:46,239 --> 00:00:49,449
then yet our actual construction I'm

19
00:00:49,449 --> 00:00:51,670
gonna jump the broom cuz it takes a lot

20
00:00:51,670 --> 00:00:53,379
of time to talk about that then I'm

21
00:00:53,379 --> 00:00:54,639
going to talk to you a little bit about

22
00:00:54,639 --> 00:00:57,249
the concrete performance and the open

23
00:00:57,249 --> 00:01:00,069
problems that we still have in this line

24
00:01:00,069 --> 00:01:03,459
of work so first of all what our

25
00:01:03,459 --> 00:01:06,880
commitment schemes you can think of it

26
00:01:06,880 --> 00:01:10,440
as a box where you can put a message

27
00:01:10,440 --> 00:01:13,330
lock the bolts send the ball to the

28
00:01:13,330 --> 00:01:15,970
other side from Alastair bulb now ball

29
00:01:15,970 --> 00:01:17,970
has the bolts with the message inside

30
00:01:17,970 --> 00:01:20,920
but Bob doesn't know what the message

31
00:01:20,920 --> 00:01:24,100
inside the box is later on Ellis can

32
00:01:24,100 --> 00:01:26,800
just send Bob the keys which opened the

33
00:01:26,800 --> 00:01:29,800
box which allow Bob to get the message

34
00:01:29,800 --> 00:01:31,900
out of the box now Bob is also

35
00:01:31,900 --> 00:01:35,650
guaranteed that Alice didn't change the

36
00:01:35,650 --> 00:01:38,320
message from the time when she actually

37
00:01:38,320 --> 00:01:41,080
sent the box and the time when she sent

38
00:01:41,080 --> 00:01:44,590
them the key so this we call this hiding

39
00:01:44,590 --> 00:01:47,200
property that Bob cannot see the message

40
00:01:47,200 --> 00:01:52,090
and the binding property that Alice

41
00:01:52,090 --> 00:01:54,520
cannot change the message after she

42
00:01:54,520 --> 00:01:58,480
sends the box now why would care about

43
00:01:58,480 --> 00:02:01,210
these things so commitments are good for

44
00:02:01,210 --> 00:02:03,490
a number of applications in different

45
00:02:03,490 --> 00:02:05,729
cryptographic protocols for example

46
00:02:05,729 --> 00:02:09,158
multi-party computation I you might have

47
00:02:09,158 --> 00:02:11,859
heard about that already a lot but just

48
00:02:11,859 --> 00:02:13,659
a quick introduction let me learn his

49
00:02:13,659 --> 00:02:15,819
problem you have to reach people who

50
00:02:15,819 --> 00:02:17,680
want to know who's there

51
00:02:17,680 --> 00:02:19,959
just but they don't want to tell each

52
00:02:19,959 --> 00:02:21,519
other how much money they actually have

53
00:02:21,519 --> 00:02:24,250
so they can run a protocol that just

54
00:02:24,250 --> 00:02:27,609
tells them who's the richest but doesn't

55
00:02:27,609 --> 00:02:29,290
really reveal how much money each of

56
00:02:29,290 --> 00:02:31,930
them has so that's one of the

57
00:02:31,930 --> 00:02:34,209
applications Modi party computation can

58
00:02:34,209 --> 00:02:36,280
be used in a number of scenarios such as

59
00:02:36,280 --> 00:02:39,189
the beetroots auction which I have to

60
00:02:39,189 --> 00:02:40,480
mention of course because i work in

61
00:02:40,480 --> 00:02:43,569
denmark and we also have some new

62
00:02:43,569 --> 00:02:45,579
results showing that we can use this

63
00:02:45,579 --> 00:02:46,959
kind of commitments to get very

64
00:02:46,959 --> 00:02:49,659
efficient gavotte circuits not adaptive

65
00:02:49,659 --> 00:02:53,040
Zarah i was talking about but

66
00:02:53,040 --> 00:02:56,319
aesthetically secure playing y'all but

67
00:02:56,319 --> 00:02:58,989
it was very good efficiency so this is a

68
00:02:58,989 --> 00:03:01,389
nice primitive we have good applications

69
00:03:01,389 --> 00:03:05,109
for that now we also talked about

70
00:03:05,109 --> 00:03:08,139
universal composability so we get this

71
00:03:08,139 --> 00:03:10,299
universally composable commitment and

72
00:03:10,299 --> 00:03:13,780
why is that good for well in universal

73
00:03:13,780 --> 00:03:16,599
composability you can be sure that your

74
00:03:16,599 --> 00:03:18,879
protocol can be executed in parallel

75
00:03:18,879 --> 00:03:21,970
with copies of itself or with other

76
00:03:21,970 --> 00:03:24,609
protocols without losing security which

77
00:03:24,609 --> 00:03:26,799
is a property that we use when you

78
00:03:26,799 --> 00:03:29,919
especially for protocols for schemes

79
00:03:29,919 --> 00:03:31,810
like commitments they're an important

80
00:03:31,810 --> 00:03:35,439
building block of other protocols we

81
00:03:35,439 --> 00:03:37,810
also know that in the UC framework

82
00:03:37,810 --> 00:03:39,549
commitments are actually complete

83
00:03:39,549 --> 00:03:42,579
meaning that if you have commitments you

84
00:03:42,579 --> 00:03:45,879
can compute any other well-behaved let's

85
00:03:45,879 --> 00:03:49,419
say computable functionality and which

86
00:03:49,419 --> 00:03:51,509
is lies so there are very powerful

87
00:03:51,509 --> 00:03:54,879
primitives and if you get that with with

88
00:03:54,879 --> 00:03:58,150
certain efficiency it's nice so you have

89
00:03:58,150 --> 00:04:00,729
good applications so we also know that

90
00:04:00,729 --> 00:04:03,370
in you see you need set up assumptions

91
00:04:03,370 --> 00:04:05,849
if you want to do any interesting to

92
00:04:05,849 --> 00:04:08,470
multi-party protocol so you need

93
00:04:08,470 --> 00:04:09,879
something that was there in the

94
00:04:09,879 --> 00:04:12,459
beginning like a common reference string

95
00:04:12,459 --> 00:04:14,500
to come and random string a public a

96
00:04:14,500 --> 00:04:17,289
registration facility and so on in our

97
00:04:17,289 --> 00:04:19,839
case will we use old tea as I'm going to

98
00:04:19,839 --> 00:04:22,389
tell you later but just so you know that

99
00:04:22,389 --> 00:04:24,639
something you need it's not what it's

100
00:04:24,639 --> 00:04:26,800
not like we're cheating now a little bit

101
00:04:26,800 --> 00:04:29,110
of other properties the title is really

102
00:04:29,110 --> 00:04:31,240
big great one linear time

103
00:04:31,240 --> 00:04:32,979
and efficiently computable blah blah

104
00:04:32,979 --> 00:04:35,169
blah so what is all that stuff that we

105
00:04:35,169 --> 00:04:37,660
talked about first of all homomorphism

106
00:04:37,660 --> 00:04:39,669
we are going to talk about basically

107
00:04:39,669 --> 00:04:42,400
editing homomorphism which is the

108
00:04:42,400 --> 00:04:44,949
following imagine you have two boxes now

109
00:04:44,949 --> 00:04:48,550
one with a yellow-orange message and one

110
00:04:48,550 --> 00:04:50,800
with a blue message and you want to

111
00:04:50,800 --> 00:04:53,650
combine them in a way to get a box with

112
00:04:53,650 --> 00:04:56,830
a white message inside so you can do

113
00:04:56,830 --> 00:04:58,449
that if you have a negatively

114
00:04:58,449 --> 00:05:01,539
homomorphic commitment it means that you

115
00:05:01,539 --> 00:05:05,770
can give Bob both boxes with different

116
00:05:05,770 --> 00:05:09,130
messages and he can add those boxes in a

117
00:05:09,130 --> 00:05:12,280
way that he obtains the result the added

118
00:05:12,280 --> 00:05:16,060
message inside Oh later on you can send

119
00:05:16,060 --> 00:05:18,250
him a combination of opening information

120
00:05:18,250 --> 00:05:21,520
let's say the keys added together in a

121
00:05:21,520 --> 00:05:23,020
way that he can open this box and

122
00:05:23,020 --> 00:05:26,289
obtained only the addition of both

123
00:05:26,289 --> 00:05:30,030
messages but not the original messages

124
00:05:30,030 --> 00:05:33,039
now also rate we talked about rate one

125
00:05:33,039 --> 00:05:34,780
so what does it mean when I talk about

126
00:05:34,780 --> 00:05:37,150
right one let's say you have a message

127
00:05:37,150 --> 00:05:39,310
that sends its long and a commitment

128
00:05:39,310 --> 00:05:42,909
that's elbit slow the rate here is the

129
00:05:42,909 --> 00:05:45,669
ratio between the n bits and the L beats

130
00:05:45,669 --> 00:05:47,770
so in this case if you have a small

131
00:05:47,770 --> 00:05:50,740
message in a very long commitment we get

132
00:05:50,740 --> 00:05:53,800
a bad low rate because we have a huge

133
00:05:53,800 --> 00:05:56,259
communication overhead let's say where

134
00:05:56,259 --> 00:05:58,659
we blow up the commitment size compared

135
00:05:58,659 --> 00:06:01,569
to the message size now in the case

136
00:06:01,569 --> 00:06:04,270
where you have a message that is small

137
00:06:04,270 --> 00:06:05,949
its and beats and a commitment of our

138
00:06:05,949 --> 00:06:08,440
baits that it's also close message size

139
00:06:08,440 --> 00:06:10,719
you get a rate approaching one which is

140
00:06:10,719 --> 00:06:12,610
a good rate which is a high rate which

141
00:06:12,610 --> 00:06:15,729
means you don't have a large

142
00:06:15,729 --> 00:06:19,569
communication overhead now i'll start

143
00:06:19,569 --> 00:06:23,289
with related words pre 2014 what did we

144
00:06:23,289 --> 00:06:25,630
have in terms of you see commitments we

145
00:06:25,630 --> 00:06:28,539
had this work by yahoo darling down at

146
00:06:28,539 --> 00:06:30,940
first and then an improvement of that by

147
00:06:30,940 --> 00:06:33,580
blasi and others where they beautiful

148
00:06:33,580 --> 00:06:36,789
you see commitments from ddh they use a

149
00:06:36,789 --> 00:06:38,530
common reference string as a set of

150
00:06:38,530 --> 00:06:41,219
assumption but there are some problems

151
00:06:41,219 --> 00:06:44,199
they have highest in telecommunication

152
00:06:44,199 --> 00:06:44,800
income

153
00:06:44,800 --> 00:06:47,289
complexity why because they need to keep

154
00:06:47,289 --> 00:06:49,770
doing a lot of modular exponentiation

155
00:06:49,770 --> 00:06:52,120
for every message they compute their

156
00:06:52,120 --> 00:06:55,090
private message they commit you they

157
00:06:55,090 --> 00:06:57,220
need zero knowledge proofs which require

158
00:06:57,220 --> 00:06:59,919
several rounds unless you're willing to

159
00:06:59,919 --> 00:07:02,110
use a random Oracle which we're not

160
00:07:02,110 --> 00:07:04,330
dealing with here so you need several

161
00:07:04,330 --> 00:07:07,300
rounds for proving the statements they

162
00:07:07,300 --> 00:07:10,270
have lots of exponentiation and they

163
00:07:10,270 --> 00:07:11,560
have lots of rounds that are

164
00:07:11,560 --> 00:07:14,169
consequently applied by the zero

165
00:07:14,169 --> 00:07:16,720
knowledge chronicles so we want to get

166
00:07:16,720 --> 00:07:19,930
rid of all that we don't want the high

167
00:07:19,930 --> 00:07:21,699
complexity both computation and

168
00:07:21,699 --> 00:07:24,190
communication and we don't want this

169
00:07:24,190 --> 00:07:26,740
huge round complexity now how do we do

170
00:07:26,740 --> 00:07:32,039
that this is our general framework as a

171
00:07:32,039 --> 00:07:35,680
setup assumption we have ulti we assume

172
00:07:35,680 --> 00:07:38,110
Saturday's we do the center phase where

173
00:07:38,110 --> 00:07:41,009
we do a fixed number of ot's only and

174
00:07:41,009 --> 00:07:44,050
after that we can do it unbounded of

175
00:07:44,050 --> 00:07:45,430
course a polynomial number of

176
00:07:45,430 --> 00:07:47,740
commitments that only use primitives in

177
00:07:47,740 --> 00:07:50,889
mini crypt after the initial tekes which

178
00:07:50,889 --> 00:07:52,840
we can really minimize using with the

179
00:07:52,840 --> 00:07:55,360
extensions so let's say we do 200 OTS

180
00:07:55,360 --> 00:07:57,279
after that we can just use our

181
00:07:57,279 --> 00:08:00,490
correcting codes Citarum generators and

182
00:08:00,490 --> 00:08:04,300
hash functions to commit to an arbitrary

183
00:08:04,300 --> 00:08:06,430
number of messages which is nice because

184
00:08:06,430 --> 00:08:09,370
then the complexity of this 200 OTS gets

185
00:08:09,370 --> 00:08:11,949
amortized over the number of messages

186
00:08:11,949 --> 00:08:16,120
that we commit to now back to who did

187
00:08:16,120 --> 00:08:20,080
that I mean this started in 2014 we

188
00:08:20,080 --> 00:08:23,020
don't work by God I sheikha Morrison and

189
00:08:23,020 --> 00:08:27,340
we inherit where they show how to get

190
00:08:27,340 --> 00:08:30,370
rate one using more or less the general

191
00:08:30,370 --> 00:08:32,740
framework but still they didn't get

192
00:08:32,740 --> 00:08:34,360
linear computational complexity nor

193
00:08:34,360 --> 00:08:37,719
homomorphism then in the same year we

194
00:08:37,719 --> 00:08:41,019
mean me even tomboy in any giacomelli

195
00:08:41,019 --> 00:08:46,329
and yes for booze neason we showed how

196
00:08:46,329 --> 00:08:48,579
to get complete a linear computational

197
00:08:48,579 --> 00:08:51,100
complexity for the receiver getting

198
00:08:51,100 --> 00:08:53,380
fully homomorphism meaning that we can

199
00:08:53,380 --> 00:08:55,209
both compute additions and

200
00:08:55,209 --> 00:08:58,200
multiplication of commitments but still

201
00:08:58,200 --> 00:09:00,390
a straight one so you see we have a

202
00:09:00,390 --> 00:09:04,310
compromise you still on a related note

203
00:09:04,310 --> 00:09:09,240
but I'm don't show this year and pkc how

204
00:09:09,240 --> 00:09:12,240
to construct the similar results who got

205
00:09:12,240 --> 00:09:15,060
I and others where you have rate one but

206
00:09:15,060 --> 00:09:17,100
not the other properties using different

207
00:09:17,100 --> 00:09:20,310
techniques so God I and others used VSS

208
00:09:20,310 --> 00:09:23,100
Opie's and children and generators to

209
00:09:23,100 --> 00:09:25,940
construct this primitive why Oh Brando

210
00:09:25,940 --> 00:09:28,770
started from a standalone equivocal

211
00:09:28,770 --> 00:09:30,420
commitment instead alone extractable

212
00:09:30,420 --> 00:09:32,850
commitment and bound all those together

213
00:09:32,850 --> 00:09:34,770
with collision resistant hash functions

214
00:09:34,770 --> 00:09:37,200
and got efficiency through pseudo-random

215
00:09:37,200 --> 00:09:40,950
generators now last year we showed how

216
00:09:40,950 --> 00:09:43,890
to get full linear complexity for both

217
00:09:43,890 --> 00:09:47,580
the sender and receiver but still no

218
00:09:47,580 --> 00:09:50,760
right one and we got only additive

219
00:09:50,760 --> 00:09:53,730
homomorphism not full morphism but Ellis

220
00:09:53,730 --> 00:09:55,560
we got good computational black City

221
00:09:55,560 --> 00:10:00,500
then this year's TCC yes / booties sen

222
00:10:00,500 --> 00:10:05,190
tov ericsson and roberto facility and

223
00:10:05,190 --> 00:10:08,940
thomas jacobson showed how to get rate

224
00:10:08,940 --> 00:10:12,780
one and additive homomorphism but they

225
00:10:12,780 --> 00:10:15,660
lost linear computational complexity so

226
00:10:15,660 --> 00:10:18,450
we're here in a conundrum can you

227
00:10:18,450 --> 00:10:20,190
actually get all these properties at

228
00:10:20,190 --> 00:10:23,760
once in one single scheme the scheme

229
00:10:23,760 --> 00:10:26,400
that we had last seen pkc doesn't get

230
00:10:26,400 --> 00:10:28,110
rid one we get the other properties but

231
00:10:28,110 --> 00:10:31,110
not right one now the scheme by 80

232
00:10:31,110 --> 00:10:34,200
hellicksen and others this uccc gets

233
00:10:34,200 --> 00:10:37,400
rate what a normal morphism but still

234
00:10:37,400 --> 00:10:39,690
they have bad commutation of a black

235
00:10:39,690 --> 00:10:43,050
city can we actually get both yes we can

236
00:10:43,050 --> 00:10:46,200
let's make commitments great again we

237
00:10:46,200 --> 00:10:48,600
can combine the same general structure

238
00:10:48,600 --> 00:10:52,590
of our results from last year with new

239
00:10:52,590 --> 00:10:55,620
the first actually write one linear time

240
00:10:55,620 --> 00:10:58,530
in Kota Buchholz bless that new nice

241
00:10:58,530 --> 00:11:00,900
technique to check that many strings are

242
00:11:00,900 --> 00:11:04,170
actually cold words and we get that so

243
00:11:04,170 --> 00:11:07,650
on a theoretical side what do we do we

244
00:11:07,650 --> 00:11:09,860
get optimal communication complexity

245
00:11:09,860 --> 00:11:11,620
amortize communication

246
00:11:11,620 --> 00:11:14,140
let me be clear because we need the

247
00:11:14,140 --> 00:11:16,510
initial setup Faisal tease but after

248
00:11:16,510 --> 00:11:18,400
that the complaints that gets amortized

249
00:11:18,400 --> 00:11:20,380
over the many commitments that it can

250
00:11:20,380 --> 00:11:23,200
make we get written one asymptotically

251
00:11:23,200 --> 00:11:25,660
we also get optimal computational

252
00:11:25,660 --> 00:11:27,880
complexity the commitment and the

253
00:11:27,880 --> 00:11:30,730
opening phases are both linear time

254
00:11:30,730 --> 00:11:33,400
computable and we get additive

255
00:11:33,400 --> 00:11:35,350
homomorphism why do we put an asterisk

256
00:11:35,350 --> 00:11:37,660
there because we can actually get

257
00:11:37,660 --> 00:11:40,330
multiplicative homomorphism although

258
00:11:40,330 --> 00:11:43,150
unfortunately when we do that we lose

259
00:11:43,150 --> 00:11:45,130
our other nice properties and we

260
00:11:45,130 --> 00:11:47,260
actually have a very good reason to do

261
00:11:47,260 --> 00:11:51,640
so there is a basic fact an upper bound

262
00:11:51,640 --> 00:11:53,920
of coding theory that we can use the

263
00:11:53,920 --> 00:11:56,320
show that using our techniques you won't

264
00:11:56,320 --> 00:11:58,270
get motor purgative homomorphism with

265
00:11:58,270 --> 00:12:02,620
rate one or good computational

266
00:12:02,620 --> 00:12:04,570
complexity who need radically different

267
00:12:04,570 --> 00:12:06,370
techniques to do that so that's one of

268
00:12:06,370 --> 00:12:07,300
the open problems i'm going to talk

269
00:12:07,300 --> 00:12:10,170
about later we we also round optimal

270
00:12:10,170 --> 00:12:12,550
after the setup phase after the initial

271
00:12:12,550 --> 00:12:15,730
tease the sender only needs one round to

272
00:12:15,730 --> 00:12:18,220
commit and run round to open so that's

273
00:12:18,220 --> 00:12:20,770
also nice now on the practical side you

274
00:12:20,770 --> 00:12:22,420
can actually implement I mean if you

275
00:12:22,420 --> 00:12:23,980
read a tireless a very theoretical paper

276
00:12:23,980 --> 00:12:26,320
but it can actually plement that very

277
00:12:26,320 --> 00:12:27,610
efficiently I'm going to talk more about

278
00:12:27,610 --> 00:12:29,589
that later and the building blocks are

279
00:12:29,589 --> 00:12:32,589
readily available we can use any prgs

280
00:12:32,589 --> 00:12:35,200
based on a yes and I and so on and the

281
00:12:35,200 --> 00:12:37,150
actual error correcting codes that it

282
00:12:37,150 --> 00:12:38,850
can use to implement these efficiently

283
00:12:38,850 --> 00:12:40,660
although without their synthetic

284
00:12:40,660 --> 00:12:42,220
properties are readily available for

285
00:12:42,220 --> 00:12:45,790
example in the linux kernel now if you

286
00:12:45,790 --> 00:12:49,360
compare with the previous results in our

287
00:12:49,360 --> 00:12:51,900
results we get all the properties we get

288
00:12:51,900 --> 00:12:55,029
linear computational complexity we get

289
00:12:55,029 --> 00:12:56,650
rate one so optimal communication

290
00:12:56,650 --> 00:13:00,250
complexity and we get additive

291
00:13:00,250 --> 00:13:03,130
homomorphism one good thing I hope they

292
00:13:03,130 --> 00:13:04,900
will make you look at the paper we can

293
00:13:04,900 --> 00:13:07,209
get rate above one actually if we're

294
00:13:07,209 --> 00:13:09,640
committing to random messages so for

295
00:13:09,640 --> 00:13:12,459
random messages we do this funny trick

296
00:13:12,459 --> 00:13:14,680
and we can we actually reach a rate

297
00:13:14,680 --> 00:13:17,050
above one which seems funny but we have

298
00:13:17,050 --> 00:13:18,940
some words about that at the paper so

299
00:13:18,940 --> 00:13:20,980
please look at that now our building

300
00:13:20,980 --> 00:13:22,300
blocks we need our tracking codes

301
00:13:22,300 --> 00:13:24,420
together asymptotic

302
00:13:24,420 --> 00:13:27,420
sults we built the first rate one linear

303
00:13:27,420 --> 00:13:29,430
time in potable coats we had raped on

304
00:13:29,430 --> 00:13:31,500
coats and linear time incredible calls

305
00:13:31,500 --> 00:13:34,470
before but not goals that had both

306
00:13:34,470 --> 00:13:37,079
properties at once we built the first

307
00:13:37,079 --> 00:13:39,389
such codes from expanded rats I'm not

308
00:13:39,389 --> 00:13:41,010
going to elaborate much on that is it's

309
00:13:41,010 --> 00:13:44,040
a complex matter but you can of course

310
00:13:44,040 --> 00:13:46,829
look at the paper and we need oblivious

311
00:13:46,829 --> 00:13:49,800
transfer any to CLT will do so you can

312
00:13:49,800 --> 00:13:52,529
choose your assumptions these are

313
00:13:52,529 --> 00:13:54,930
basically the main public key

314
00:13:54,930 --> 00:13:57,329
assumptions we need so any if you like

315
00:13:57,329 --> 00:13:58,920
when a marker you can sense she ate our

316
00:13:58,920 --> 00:14:00,930
scheme from ana Moura call if you like

317
00:14:00,930 --> 00:14:02,310
to the age you can instance a shower

318
00:14:02,310 --> 00:14:04,019
skin from the eh if you want both

319
00:14:04,019 --> 00:14:06,240
grunting security you can stay shade our

320
00:14:06,240 --> 00:14:07,740
scheme from coding assumptions or

321
00:14:07,740 --> 00:14:09,870
lattice basic assumptions we need a

322
00:14:09,870 --> 00:14:12,860
cigarette and generator so to get our

323
00:14:12,860 --> 00:14:15,870
asymptotic results we need a linear time

324
00:14:15,870 --> 00:14:18,079
so the running generator there are some

325
00:14:18,079 --> 00:14:21,839
fortunately by um and others and we need

326
00:14:21,839 --> 00:14:23,850
a almost universal hash function that is

327
00:14:23,850 --> 00:14:27,570
both linear and linear and linear time

328
00:14:27,570 --> 00:14:30,959
computable which we also build in our

329
00:14:30,959 --> 00:14:33,300
paper the flu the first such function

330
00:14:33,300 --> 00:14:36,779
with some ideas from Michael's now a bit

331
00:14:36,779 --> 00:14:39,690
of other primitives little T you you're

332
00:14:39,690 --> 00:14:41,190
probably most familiar eyes with that

333
00:14:41,190 --> 00:14:44,640
but in OT a senator puts into messages a

334
00:14:44,640 --> 00:14:47,490
receiver gets only one of the messages

335
00:14:47,490 --> 00:14:50,550
and he's oblivious to which was the

336
00:14:50,550 --> 00:14:54,060
other message now we will start with the

337
00:14:54,060 --> 00:14:57,720
setup phase that is based on OT we start

338
00:14:57,720 --> 00:15:01,079
with several several random seeds to the

339
00:15:01,079 --> 00:15:04,110
pseudo-random generator we put them into

340
00:15:04,110 --> 00:15:07,800
all these so for every pair of seeds we

341
00:15:07,800 --> 00:15:10,319
put them into an OT BOTS the receiver

342
00:15:10,319 --> 00:15:12,540
will be actually putting in random

343
00:15:12,540 --> 00:15:16,350
choice bits and you'll get health of the

344
00:15:16,350 --> 00:15:21,269
seats alright health of the seeds in

345
00:15:21,269 --> 00:15:26,490
random subset now will next proceed to a

346
00:15:26,490 --> 00:15:28,649
commit face basically where we commit to

347
00:15:28,649 --> 00:15:31,529
a bunch of strings let me just be clear

348
00:15:31,529 --> 00:15:33,569
that you don't get to do only one of

349
00:15:33,569 --> 00:15:35,190
these batch commit phases after the

350
00:15:35,190 --> 00:15:37,260
setup you can do a link the number of

351
00:15:37,260 --> 00:15:37,490
the

352
00:15:37,490 --> 00:15:40,170
but of course I'm only describing one so

353
00:15:40,170 --> 00:15:42,590
in this phase you start by stretching

354
00:15:42,590 --> 00:15:47,400
each of the seats with the prg into big

355
00:15:47,400 --> 00:15:49,530
streets now this big strings will be

356
00:15:49,530 --> 00:15:51,810
composed by some random data that we

357
00:15:51,810 --> 00:15:54,570
want to stay random anyway and buy some

358
00:15:54,570 --> 00:15:57,120
trailing data that will eventually

359
00:15:57,120 --> 00:16:00,360
become error correction very very bit

360
00:16:00,360 --> 00:16:04,230
basically so you first get these random

361
00:16:04,230 --> 00:16:05,430
strings that you stretched from the

362
00:16:05,430 --> 00:16:08,040
seeds that's one of the reasons why we

363
00:16:08,040 --> 00:16:09,960
got actually right one you don't have to

364
00:16:09,960 --> 00:16:12,060
send all this information at the

365
00:16:12,060 --> 00:16:13,440
beginning you just send it a small seeds

366
00:16:13,440 --> 00:16:16,140
that get out more times later now for

367
00:16:16,140 --> 00:16:19,890
every of these big screens maybe you saw

368
00:16:19,890 --> 00:16:25,710
here I'm saying are 10 r 11 r 20 or 21 i

369
00:16:25,710 --> 00:16:28,950
have pairs of the strings for every pair

370
00:16:28,950 --> 00:16:32,070
of seats now for each of the spares what

371
00:16:32,070 --> 00:16:34,800
do you do you exhort them together is

372
00:16:34,800 --> 00:16:36,120
something together because this result

373
00:16:36,120 --> 00:16:38,430
actually works for any field then you

374
00:16:38,430 --> 00:16:40,820
get a final string which is your final

375
00:16:40,820 --> 00:16:44,160
random stuff and your final almost

376
00:16:44,160 --> 00:16:46,920
parity bits now what do you do with this

377
00:16:46,920 --> 00:16:49,380
you still don't have a code word because

378
00:16:49,380 --> 00:16:52,130
you're very bits are still random stuff

379
00:16:52,130 --> 00:16:55,530
so you compute the parity bits for this

380
00:16:55,530 --> 00:16:58,020
random string in the beginning of our

381
00:16:58,020 --> 00:17:01,920
long string you build and the final goal

382
00:17:01,920 --> 00:17:03,720
board let's say you have a code in

383
00:17:03,720 --> 00:17:07,200
systematic form so you have the your

384
00:17:07,200 --> 00:17:10,170
random data and then actual parity bits

385
00:17:10,170 --> 00:17:13,490
error correction data then you compute

386
00:17:13,490 --> 00:17:16,200
correction bits let's call them that

387
00:17:16,200 --> 00:17:19,410
when XOR with this random stuff will

388
00:17:19,410 --> 00:17:23,280
actually give the actual parity bits you

389
00:17:23,280 --> 00:17:27,000
compute it all now you end up with this

390
00:17:27,000 --> 00:17:29,910
information as a sander you have several

391
00:17:29,910 --> 00:17:31,560
Cold War's or at least they should be if

392
00:17:31,560 --> 00:17:34,020
you're honest and you have several

393
00:17:34,020 --> 00:17:36,590
correction bits that when X or to the

394
00:17:36,590 --> 00:17:39,810
first random parity bits that we sent

395
00:17:39,810 --> 00:17:44,270
will result in the actual parity bits

396
00:17:44,270 --> 00:17:48,000
now you use that's where the magic comes

397
00:17:48,000 --> 00:17:49,910
in in this paper when the

398
00:17:49,910 --> 00:17:53,030
our main techniques is that we show how

399
00:17:53,030 --> 00:17:54,770
to use this almost universal in your

400
00:17:54,770 --> 00:17:59,530
hash function to to prove that this

401
00:17:59,530 --> 00:18:02,420
strings are actually cold words because

402
00:18:02,420 --> 00:18:06,440
you see a adversary could just send you

403
00:18:06,440 --> 00:18:09,140
random stuff that when X or together

404
00:18:09,140 --> 00:18:10,580
later when you're doing homomorphic

405
00:18:10,580 --> 00:18:13,430
operations opens up to completely

406
00:18:13,430 --> 00:18:16,370
arbitrary messages they're unrelated to

407
00:18:16,370 --> 00:18:17,840
the actual messages they committed to

408
00:18:17,840 --> 00:18:20,510
but then we show this nice technique

409
00:18:20,510 --> 00:18:24,230
that you can use almost universal in

410
00:18:24,230 --> 00:18:27,260
your hash functions to show that these

411
00:18:27,260 --> 00:18:29,780
strings are actually cold words and but

412
00:18:29,780 --> 00:18:32,600
by only sending very little information

413
00:18:32,600 --> 00:18:34,910
only the result of the hash functions so

414
00:18:34,910 --> 00:18:38,590
what do we do we get this matrix of

415
00:18:38,590 --> 00:18:42,110
supposedly cold words and we hash each

416
00:18:42,110 --> 00:18:44,690
row with the almost universal linear

417
00:18:44,690 --> 00:18:47,840
hash functions we get the result of each

418
00:18:47,840 --> 00:18:51,020
probe oui oui of course send it all to

419
00:18:51,020 --> 00:18:54,890
the receiver and other receiver will

420
00:18:54,890 --> 00:18:58,460
only receive the correction bits that

421
00:18:58,460 --> 00:19:00,260
will turn the random stuff you receive

422
00:19:00,260 --> 00:19:03,670
the first into proper parity bits and

423
00:19:03,670 --> 00:19:08,750
the hash values now why is it good why

424
00:19:08,750 --> 00:19:11,030
is it because at first we don't have to

425
00:19:11,030 --> 00:19:12,470
say we're actually sending last

426
00:19:12,470 --> 00:19:15,170
information then the size of the

427
00:19:15,170 --> 00:19:17,030
messages were committing to we are

428
00:19:17,030 --> 00:19:19,490
committing to this big arse but are only

429
00:19:19,490 --> 00:19:22,700
sending the little correction bits so

430
00:19:22,700 --> 00:19:24,620
here we're actually getting rate above

431
00:19:24,620 --> 00:19:27,710
one that's why we can get right above

432
00:19:27,710 --> 00:19:29,540
one for random messages if you only want

433
00:19:29,540 --> 00:19:31,760
to have random messages here now the

434
00:19:31,760 --> 00:19:34,520
receiver gets this and the receiver does

435
00:19:34,520 --> 00:19:37,280
some checking that's far the technique

436
00:19:37,280 --> 00:19:40,030
as well the receiver only has some of

437
00:19:40,030 --> 00:19:43,580
this our values for each pair he cannot

438
00:19:43,580 --> 00:19:45,890
reconstruct the whole community string

439
00:19:45,890 --> 00:19:48,350
he only has half of it but we show that

440
00:19:48,350 --> 00:19:50,380
it is enough for him to have half of it

441
00:19:50,380 --> 00:19:53,960
such that when he does the computation

442
00:19:53,960 --> 00:19:55,790
of the hash values of the roles of the

443
00:19:55,790 --> 00:19:58,070
only of the columns he has which are

444
00:19:58,070 --> 00:20:00,680
only health he can still check with with

445
00:20:00,680 --> 00:20:03,380
high probability later on window

446
00:20:03,380 --> 00:20:06,140
opening happens that whatever the center

447
00:20:06,140 --> 00:20:10,280
committed to was actually a proper code

448
00:20:10,280 --> 00:20:13,460
word a proper commitment now to get the

449
00:20:13,460 --> 00:20:15,950
actual parity bits in he needs to add

450
00:20:15,950 --> 00:20:18,560
the correction bits but you see here

451
00:20:18,560 --> 00:20:21,350
that everything is doing is computing

452
00:20:21,350 --> 00:20:24,050
and an encoding of a linear time in

453
00:20:24,050 --> 00:20:25,930
color book called enter in addition

454
00:20:25,930 --> 00:20:28,820
lyric time operations so we get linear

455
00:20:28,820 --> 00:20:33,230
complexity and right right here what

456
00:20:33,230 --> 00:20:34,880
happens we are committed to random

457
00:20:34,880 --> 00:20:37,010
messages we're committed to this ours

458
00:20:37,010 --> 00:20:41,630
well not these ours the proper ours they

459
00:20:41,630 --> 00:20:45,070
were computed by X sorry each pair but

460
00:20:45,070 --> 00:20:47,210
actually you don't want to just commit

461
00:20:47,210 --> 00:20:48,950
to random stuff all the time you might

462
00:20:48,950 --> 00:20:50,540
want to commit to arbitrary messages so

463
00:20:50,540 --> 00:20:53,930
what you do stand a trick you use the

464
00:20:53,930 --> 00:20:55,880
random messages you're committed to is a

465
00:20:55,880 --> 00:20:59,960
one-time pad kee to one-time pad encrypt

466
00:20:59,960 --> 00:21:02,480
your actual arbitrary message then you

467
00:21:02,480 --> 00:21:05,930
get a commitment of the same size as a

468
00:21:05,930 --> 00:21:09,440
message now again ah now on the note of

469
00:21:09,440 --> 00:21:13,130
our rate one you get you got the

470
00:21:13,130 --> 00:21:14,630
correction bits and now you get the

471
00:21:14,630 --> 00:21:16,550
message but the correction bits can be

472
00:21:16,550 --> 00:21:18,530
really small because we have raped one

473
00:21:18,530 --> 00:21:20,660
codes that's why I get right right one

474
00:21:20,660 --> 00:21:23,180
in the opening we basically check the

475
00:21:23,180 --> 00:21:26,470
error correction parity bits and then we

476
00:21:26,470 --> 00:21:29,540
subtract the random message from this

477
00:21:29,540 --> 00:21:31,250
small commitment and we got the message

478
00:21:31,250 --> 00:21:34,520
standard trick we're linear time and we

479
00:21:34,520 --> 00:21:37,190
get right one by doing that now what can

480
00:21:37,190 --> 00:21:39,320
we do in practice I'm here to tell you

481
00:21:39,320 --> 00:21:41,780
you see commitments are practical you

482
00:21:41,780 --> 00:21:44,180
like ot extensions so you should like

483
00:21:44,180 --> 00:21:46,490
our our commitments we get basically the

484
00:21:46,490 --> 00:21:49,510
same performances of the extensions for

485
00:21:49,510 --> 00:21:52,820
50,000 commitments we can do commitments

486
00:21:52,820 --> 00:21:56,000
in 29 microseconds and decommit in 0.2

487
00:21:56,000 --> 00:21:58,370
we only need bch codes are implemented

488
00:21:58,370 --> 00:22:01,250
in Linux kernel and PR jeez asni of

489
00:22:01,250 --> 00:22:03,770
course you have a trade-off we need the

490
00:22:03,770 --> 00:22:06,770
OTS the satyr protease 50,000

491
00:22:06,770 --> 00:22:10,730
commitments takes 1.5 seconds so summer

492
00:22:10,730 --> 00:22:13,910
here and we have some open problems how

493
00:22:13,910 --> 00:22:15,200
to actually get multiplicative

494
00:22:15,200 --> 00:22:17,059
homomorphism basically

495
00:22:17,059 --> 00:22:19,789
while maintaining our nice complexities

496
00:22:19,789 --> 00:22:21,139
which we don't know how to do right now

497
00:22:21,139 --> 00:22:25,190
let's work on it and thank you for your

498
00:22:25,190 --> 00:22:27,309
attention

