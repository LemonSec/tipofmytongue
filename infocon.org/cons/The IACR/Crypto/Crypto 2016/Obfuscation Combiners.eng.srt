1
00:00:04,010 --> 00:00:08,039
alright thanks so this is joint work I

2
00:00:08,039 --> 00:00:09,750
mean Hertzberg hot been known in higher

3
00:00:09,750 --> 00:00:13,019
shulman it's a concurrent work to the

4
00:00:13,019 --> 00:00:16,560
talk you've just seen so some of the

5
00:00:16,560 --> 00:00:18,810
parts may even overlap but it's

6
00:00:18,810 --> 00:00:20,160
conceptually two different approaches

7
00:00:20,160 --> 00:00:24,720
how you can build such things alright so

8
00:00:24,720 --> 00:00:29,070
you have already seen how application

9
00:00:29,070 --> 00:00:32,579
works in theory just give me let me give

10
00:00:32,579 --> 00:00:35,219
you a quick reminder that you can find

11
00:00:35,219 --> 00:00:38,100
plenty of office carriers in the white

12
00:00:38,100 --> 00:00:42,320
and practice even free or for skaters

13
00:00:42,320 --> 00:00:44,820
even through web forms so this is an

14
00:00:44,820 --> 00:00:46,440
example I typed I just found it on the

15
00:00:46,440 --> 00:00:48,030
internet it just happen in a small

16
00:00:48,030 --> 00:00:50,999
JavaScript and this is what it produced

17
00:00:50,999 --> 00:00:53,760
and it's I think it's pretty obvious to

18
00:00:53,760 --> 00:00:57,569
say that that one is not really secure

19
00:00:57,569 --> 00:01:00,120
because you can see the hello world here

20
00:01:00,120 --> 00:01:02,460
appearing and clear I'm not claiming

21
00:01:02,460 --> 00:01:05,430
that all of the practical schemes are

22
00:01:05,430 --> 00:01:08,579
secure but you have plenty of them

23
00:01:08,579 --> 00:01:10,710
actually most of them are actually

24
00:01:10,710 --> 00:01:12,450
commercial so you pay a few hundred

25
00:01:12,450 --> 00:01:14,969
dollars to get an obfuscated ER the

26
00:01:14,969 --> 00:01:17,009
interesting thing is that it's not even

27
00:01:17,009 --> 00:01:18,860
clear what they really provide to you

28
00:01:18,860 --> 00:01:20,969
this is a quote from one of the

29
00:01:20,969 --> 00:01:23,219
commercial software saying our for

30
00:01:23,219 --> 00:01:25,049
skaters do not stop real engineering

31
00:01:25,049 --> 00:01:28,740
efforts if you're really determined they

32
00:01:28,740 --> 00:01:30,360
keep on answer saying that we basically

33
00:01:30,360 --> 00:01:33,170
only provide security against amateurs

34
00:01:33,170 --> 00:01:36,659
so I should mention that there are

35
00:01:36,659 --> 00:01:38,460
people in the software obfuscation

36
00:01:38,460 --> 00:01:40,200
community software engineering who try

37
00:01:40,200 --> 00:01:42,719
to atleast at least establish some form

38
00:01:42,719 --> 00:01:45,979
of formalism what it means to be secure

39
00:01:45,979 --> 00:01:48,210
especially the work by a call back at

40
00:01:48,210 --> 00:01:50,909
all for some talks about cyclomatic

41
00:01:50,909 --> 00:01:53,609
numbers which is a complexity measures

42
00:01:53,609 --> 00:01:58,049
for software now if you look at theory

43
00:01:58,049 --> 00:02:02,100
arm actually looks different we have so

44
00:02:02,100 --> 00:02:05,460
far we have a few fully rely reliable

45
00:02:05,460 --> 00:02:07,200
candidates and here I don't want to

46
00:02:07,200 --> 00:02:09,360
offend anyone who is working on

47
00:02:09,360 --> 00:02:11,909
proposing I know this is hard but giving

48
00:02:11,909 --> 00:02:14,670
the history from the first very nice

49
00:02:14,670 --> 00:02:17,150
work proposing the first

50
00:02:17,150 --> 00:02:20,689
that to me hard to keep track of the new

51
00:02:20,689 --> 00:02:22,340
proposals and the attacks and what

52
00:02:22,340 --> 00:02:24,709
exactly they break and so on and this is

53
00:02:24,709 --> 00:02:27,319
partly due to the fact that we have a

54
00:02:27,319 --> 00:02:29,720
clear vision of what kind of security we

55
00:02:29,720 --> 00:02:33,799
want and this is usually nowadays

56
00:02:33,799 --> 00:02:35,989
indistinguishable indistinct ability

57
00:02:35,989 --> 00:02:39,400
obfuscation saying for any circuits

58
00:02:39,400 --> 00:02:41,540
which computer same functions the

59
00:02:41,540 --> 00:02:44,239
obfuscated aversions look alike and of

60
00:02:44,239 --> 00:02:45,920
course achieving this is hard and this

61
00:02:45,920 --> 00:02:49,400
is why maybe in theory we don't have a

62
00:02:49,400 --> 00:02:53,900
fully satisfying solution yet now if you

63
00:02:53,900 --> 00:02:55,790
compare the two worlds and you talk

64
00:02:55,790 --> 00:02:58,250
about practice and theory actually on

65
00:02:58,250 --> 00:03:00,170
the face seems like they face different

66
00:03:00,170 --> 00:03:02,239
problems but in the end it boils down to

67
00:03:02,239 --> 00:03:04,549
the same questions which candidate

68
00:03:04,549 --> 00:03:06,200
should I use if I want to have a secure

69
00:03:06,200 --> 00:03:09,370
for scheduler and this is where the

70
00:03:09,370 --> 00:03:11,900
combiners enter the stage and you just

71
00:03:11,900 --> 00:03:14,420
seen that the basic idea is you take and

72
00:03:14,420 --> 00:03:17,540
candidates you don't know which of them

73
00:03:17,540 --> 00:03:21,919
are secure take your let's say five

74
00:03:21,919 --> 00:03:23,750
favorite ones then you combine them

75
00:03:23,750 --> 00:03:25,940
somehow into a single maybe bigger

76
00:03:25,940 --> 00:03:28,489
office cater and what you want to have

77
00:03:28,489 --> 00:03:31,819
from the final result is here should say

78
00:03:31,819 --> 00:03:33,049
you really want to build it

79
00:03:33,049 --> 00:03:34,819
constructively so not like purely

80
00:03:34,819 --> 00:03:37,159
existential saying in like in math there

81
00:03:37,159 --> 00:03:39,650
exists a secure for skater or assuming

82
00:03:39,650 --> 00:03:41,569
that the polynomial hierarchy collapses

83
00:03:41,569 --> 00:03:43,760
and so on really want to have a program

84
00:03:43,760 --> 00:03:48,979
here and so what the guarantee is what

85
00:03:48,979 --> 00:03:51,290
you want is that if at least T of these

86
00:03:51,290 --> 00:03:54,440
and other skaters are secure then the

87
00:03:54,440 --> 00:03:56,959
overall thing is secure so in this

88
00:03:56,959 --> 00:03:58,909
example if you have three T equal to

89
00:03:58,909 --> 00:04:00,739
three good ones and only two are

90
00:04:00,739 --> 00:04:03,079
malicious then the overall combiner

91
00:04:03,079 --> 00:04:05,900
should still be secure and here as in

92
00:04:05,900 --> 00:04:08,389
the previous talk we assume that all the

93
00:04:08,389 --> 00:04:10,370
malicious combine or the malicious

94
00:04:10,370 --> 00:04:12,590
candidates on the control of a single

95
00:04:12,590 --> 00:04:14,150
adversity and they may arbitrarily

96
00:04:14,150 --> 00:04:18,589
conspire so when we started thinking

97
00:04:18,589 --> 00:04:20,779
about this some especially my quarters

98
00:04:20,779 --> 00:04:23,870
or a mirror was really much into okay we

99
00:04:23,870 --> 00:04:25,190
should have a solution which really

100
00:04:25,190 --> 00:04:28,729
works in practice and he wanted to have

101
00:04:28,729 --> 00:04:30,710
one which works on both sides here

102
00:04:30,710 --> 00:04:33,740
and practice so in particular it should

103
00:04:33,740 --> 00:04:36,170
be fast enough to cover maybe the bad

104
00:04:36,170 --> 00:04:39,550
combine you've seen on the first slide

105
00:04:39,700 --> 00:04:43,610
okay um before I tell you how we do this

106
00:04:43,610 --> 00:04:46,580
let me tell you how it's not going to

107
00:04:46,580 --> 00:04:48,590
work and then partly the good news isn't

108
00:04:48,590 --> 00:04:50,990
party if you missed the argument in the

109
00:04:50,990 --> 00:04:53,150
previous talk why you can't nest

110
00:04:53,150 --> 00:04:55,880
obfuscator security you'll see a sort of

111
00:04:55,880 --> 00:04:58,490
rerun of this argument here okay so two

112
00:04:58,490 --> 00:05:00,650
of the three combines so let's say your

113
00:05:00,650 --> 00:05:03,680
three combiners your task is now in

114
00:05:03,680 --> 00:05:07,280
theory to build an obfuscated ER such

115
00:05:07,280 --> 00:05:12,130
that if you insert the X you get the

116
00:05:12,130 --> 00:05:18,920
circuit value C of X so here's what you

117
00:05:18,920 --> 00:05:20,690
can do you can just take your circuit

118
00:05:20,690 --> 00:05:22,460
viewed as a program run it through the

119
00:05:22,460 --> 00:05:24,770
Opera skaters so you get three programs

120
00:05:24,770 --> 00:05:29,710
you just put them into the circuit and

121
00:05:29,710 --> 00:05:33,080
then what you do is whenever you get

122
00:05:33,080 --> 00:05:35,270
some excess input to the office cated

123
00:05:35,270 --> 00:05:37,730
version you just put it into all the

124
00:05:37,730 --> 00:05:40,130
office cated circuits and then in the

125
00:05:40,130 --> 00:05:41,510
end you do a majority and the majority

126
00:05:41,510 --> 00:05:44,230
should exactly prevent all the trouble

127
00:05:44,230 --> 00:05:47,090
you've just seen the incorrectness of up

128
00:05:47,090 --> 00:05:49,670
for skaters because if you assume two of

129
00:05:49,670 --> 00:05:51,590
them are correct then it doesn't matter

130
00:05:51,590 --> 00:05:53,210
if the third one just even gives you a

131
00:05:53,210 --> 00:05:55,190
wrong answer as long as you do a

132
00:05:55,190 --> 00:05:56,990
majority a bitwise majority you can be

133
00:05:56,990 --> 00:06:00,620
sure that the output is correct now the

134
00:06:00,620 --> 00:06:02,900
problem is this gives you functional

135
00:06:02,900 --> 00:06:09,350
correctness but oops it does not give

136
00:06:09,350 --> 00:06:13,820
you the indistinct ability property so

137
00:06:13,820 --> 00:06:15,350
if you suppose that obfuscate the number

138
00:06:15,350 --> 00:06:18,500
two is corrupt then this obfuscator can

139
00:06:18,500 --> 00:06:20,450
just put anything it likes into the

140
00:06:20,450 --> 00:06:23,510
program here particularly may just print

141
00:06:23,510 --> 00:06:26,000
copy and clear of the input circuit see

142
00:06:26,000 --> 00:06:29,210
and then since this appears in clear in

143
00:06:29,210 --> 00:06:32,840
your office gated circuit you can just

144
00:06:32,840 --> 00:06:35,150
leaked information about the input

145
00:06:35,150 --> 00:06:39,470
circuit through that so this is now the

146
00:06:39,470 --> 00:06:42,950
sequential obfuscator I've just seen the

147
00:06:42,950 --> 00:06:44,300
case of three

148
00:06:44,300 --> 00:06:45,620
for skaters this is now in a simpler

149
00:06:45,620 --> 00:06:47,000
version of two up for skaters where you

150
00:06:47,000 --> 00:06:48,800
take the output of the first or pro

151
00:06:48,800 --> 00:06:50,780
skater the inner one and just insert it

152
00:06:50,780 --> 00:06:53,030
into the second one and then the Alpha

153
00:06:53,030 --> 00:06:56,180
skater is just the description of the

154
00:06:56,180 --> 00:06:59,360
program the output program of the second

155
00:06:59,360 --> 00:07:04,190
up for skater now here if office cater

156
00:07:04,190 --> 00:07:06,949
to the outer one is corrupt then you're

157
00:07:06,949 --> 00:07:09,590
still good in terms of leakage because

158
00:07:09,590 --> 00:07:11,060
you still have the inner obfuscator

159
00:07:11,060 --> 00:07:12,620
which basically hides everything about

160
00:07:12,620 --> 00:07:15,919
the input circuit so you can't really

161
00:07:15,919 --> 00:07:17,780
really leak through the second

162
00:07:17,780 --> 00:07:20,990
obfuscator now the problem appears if

163
00:07:20,990 --> 00:07:23,599
the inner obfuscator is corrupt because

164
00:07:23,599 --> 00:07:26,060
then it may just you may hope that it

165
00:07:26,060 --> 00:07:27,379
cannot leak because you still have the

166
00:07:27,379 --> 00:07:29,319
outer obfuscator which hides everything

167
00:07:29,319 --> 00:07:31,819
but this is where indistinguishability

168
00:07:31,819 --> 00:07:35,210
obfuscation arm is not sufficient

169
00:07:35,210 --> 00:07:39,139
because the only guarantees you that the

170
00:07:39,139 --> 00:07:41,750
output is indistinguishable if the input

171
00:07:41,750 --> 00:07:44,419
functions are the same so you can just

172
00:07:44,419 --> 00:07:46,430
you know the malicious of Cascadia

173
00:07:46,430 --> 00:07:48,500
engines output a different program like

174
00:07:48,500 --> 00:07:50,659
saying if you give me a certain input i

175
00:07:50,659 --> 00:07:52,940
will just output the circuiting clear

176
00:07:52,940 --> 00:07:55,069
and answer I will compute the original

177
00:07:55,069 --> 00:07:57,199
function and then if you run this to the

178
00:07:57,199 --> 00:07:58,580
second of the skater which may have

179
00:07:58,580 --> 00:08:01,430
escaped arbitrary programs it's easy

180
00:08:01,430 --> 00:08:03,620
really to trigger this event and have

181
00:08:03,620 --> 00:08:06,979
the circuit be printed so you can leak

182
00:08:06,979 --> 00:08:09,020
through the functions because of

183
00:08:09,020 --> 00:08:12,080
functional incorrectness basically you

184
00:08:12,080 --> 00:08:16,300
can taint the outer obfuscator by that

185
00:08:16,300 --> 00:08:21,469
okay so here's what works into the three

186
00:08:21,469 --> 00:08:23,150
out of four combiner so this means we

187
00:08:23,150 --> 00:08:25,129
need four candidates and you need to

188
00:08:25,129 --> 00:08:26,659
assume that three of them are actually

189
00:08:26,659 --> 00:08:31,430
secure so first what you do is you go

190
00:08:31,430 --> 00:08:33,020
back to the idea of having a majority

191
00:08:33,020 --> 00:08:34,490
combiner so you take three or four

192
00:08:34,490 --> 00:08:38,089
skaters and then you just build the

193
00:08:38,089 --> 00:08:40,219
majority over it right then you still

194
00:08:40,219 --> 00:08:42,500
know you can leak this this combined it

195
00:08:42,500 --> 00:08:44,208
can leak but at least it's functionally

196
00:08:44,208 --> 00:08:49,250
correct and the good news is if one of

197
00:08:49,250 --> 00:08:50,959
the Alpha skater the three of four

198
00:08:50,959 --> 00:08:54,740
skaters using here is malicious then

199
00:08:54,740 --> 00:08:56,480
again you can leak but you get the

200
00:08:56,480 --> 00:08:58,370
guarantee and I mean that the fourth one

201
00:08:58,370 --> 00:09:00,050
the complementing one is actually secure

202
00:09:00,050 --> 00:09:02,930
right one of the three used here is

203
00:09:02,930 --> 00:09:04,940
insecure the fourth one must be secure

204
00:09:04,940 --> 00:09:07,850
and we can use that to build our office

205
00:09:07,850 --> 00:09:13,089
cater so what we do is we layer

206
00:09:13,089 --> 00:09:15,470
obfuscated adverse ins of this majority

207
00:09:15,470 --> 00:09:18,230
combiner right so we take the majority

208
00:09:18,230 --> 00:09:20,690
combiner which we just seen and then use

209
00:09:20,690 --> 00:09:23,270
the fourth obfuscator to obfuscate the

210
00:09:23,270 --> 00:09:26,810
output and actually it's the physis to

211
00:09:26,810 --> 00:09:28,520
do it for any three combinations of the

212
00:09:28,520 --> 00:09:33,380
four numbers so in this example we have

213
00:09:33,380 --> 00:09:36,410
the outer up for skaters are four three

214
00:09:36,410 --> 00:09:38,060
and two and then you just take the

215
00:09:38,060 --> 00:09:39,589
complementing three numbers for the

216
00:09:39,589 --> 00:09:43,790
majority of fuskator and then you do

217
00:09:43,790 --> 00:09:46,490
another majority on top and we'll see in

218
00:09:46,490 --> 00:09:48,770
a second why this is the case and this

219
00:09:48,770 --> 00:09:50,870
is your your piscator yes this is your

220
00:09:50,870 --> 00:09:55,130
combiner that's how it works so let's

221
00:09:55,130 --> 00:09:56,720
look at the case that the obfuscator

222
00:09:56,720 --> 00:09:59,990
number three is malicious alright then

223
00:09:59,990 --> 00:10:01,750
you still have the guarantee that the

224
00:10:01,750 --> 00:10:04,930
Alpha skater in the majority combiner

225
00:10:04,930 --> 00:10:07,360
one two and four are still good

226
00:10:07,360 --> 00:10:09,380
basically they hide everything about

227
00:10:09,380 --> 00:10:13,730
this input circuit see at this point so

228
00:10:13,730 --> 00:10:15,860
if the malicious circuit to circuit

229
00:10:15,860 --> 00:10:18,800
sorries if obfuscator three is malicious

230
00:10:18,800 --> 00:10:20,480
then it also appears in the other

231
00:10:20,480 --> 00:10:22,820
majority circuits but they're you still

232
00:10:22,820 --> 00:10:24,410
at least provide functional correctness

233
00:10:24,410 --> 00:10:26,750
because of the majority and this means

234
00:10:26,750 --> 00:10:30,110
that the outer obfuscator sofa skater

235
00:10:30,110 --> 00:10:32,060
number four in this case and number two

236
00:10:32,060 --> 00:10:34,010
in this case they basically hide

237
00:10:34,010 --> 00:10:37,130
everything about the input so this means

238
00:10:37,130 --> 00:10:38,720
everything about the input circuit is

239
00:10:38,720 --> 00:10:41,890
shielded by the right choice of the

240
00:10:41,890 --> 00:10:45,890
Opera skaters and actually you can prove

241
00:10:45,890 --> 00:10:48,589
this if you go back to the formal

242
00:10:48,589 --> 00:10:49,940
requirements you can show that this

243
00:10:49,940 --> 00:10:52,459
combined our works for indistinguishable

244
00:10:52,459 --> 00:10:54,680
indistinguishable your post occasion and

245
00:10:54,680 --> 00:10:57,250
all the other stronger notions of

246
00:10:57,250 --> 00:11:00,890
obfuscation which we have there like BBB

247
00:11:00,890 --> 00:11:06,020
and bgb i should say if you dare to and

248
00:11:06,020 --> 00:11:07,820
even put in more candidates you can

249
00:11:07,820 --> 00:11:09,530
generalize this instead of hanging three

250
00:11:09,530 --> 00:11:12,230
out of four you have a to d plus one

251
00:11:12,230 --> 00:11:15,530
out of 3d plus one combines just doing

252
00:11:15,530 --> 00:11:17,780
more majorities and so on but still

253
00:11:17,780 --> 00:11:23,900
staying on a layer 2 circuit so we

254
00:11:23,900 --> 00:11:26,810
actually implemented this no we didn't

255
00:11:26,810 --> 00:11:28,580
implement any cryptographically secure

256
00:11:28,580 --> 00:11:31,670
obfuscator I'm sorry we just took one of

257
00:11:31,670 --> 00:11:34,250
these available open source of for

258
00:11:34,250 --> 00:11:38,810
skaters and we settled for JavaScript

259
00:11:38,810 --> 00:11:48,530
just to have an example so actually the

260
00:11:48,530 --> 00:11:50,780
two related up for skaters by yahoo one

261
00:11:50,780 --> 00:11:52,580
is more or less a randomized version for

262
00:11:52,580 --> 00:11:54,380
security purposes you should not do this

263
00:11:54,380 --> 00:11:56,480
for a relation purposes i think it was

264
00:11:56,480 --> 00:11:58,550
hard enough to get the implementations

265
00:11:58,550 --> 00:12:00,680
running so they are related but this

266
00:12:00,680 --> 00:12:03,350
should not affect the significantly the

267
00:12:03,350 --> 00:12:08,720
runtime or the output load ratio ok so

268
00:12:08,720 --> 00:12:11,200
here's an example a one's just a simple

269
00:12:11,200 --> 00:12:13,310
obfuscator is called compressor because

270
00:12:13,310 --> 00:12:15,260
very often in practice these office

271
00:12:15,260 --> 00:12:18,230
skaters come as also code optimizers and

272
00:12:18,230 --> 00:12:21,590
they really shrink the code and then we

273
00:12:21,590 --> 00:12:24,440
just use two versions different choices

274
00:12:24,440 --> 00:12:28,280
of how to order the upper skaters to buy

275
00:12:28,280 --> 00:12:29,690
yahoo and one by Google and one

276
00:12:29,690 --> 00:12:33,560
JavaScript pecker so we rent this for a

277
00:12:33,560 --> 00:12:35,780
couple of standard programs ranging from

278
00:12:35,780 --> 00:12:38,270
a few kilobytes so all the dots is a

279
00:12:38,270 --> 00:12:41,180
program or less to more or less a

280
00:12:41,180 --> 00:12:43,520
megabyte and you see the obfuscation

281
00:12:43,520 --> 00:12:46,580
time you just run the simple obfuscator

282
00:12:46,580 --> 00:12:49,100
01 which is the blue line essentially

283
00:12:49,100 --> 00:12:51,830
not not significant in the first part

284
00:12:51,830 --> 00:12:53,990
only if you really blow up the program

285
00:12:53,990 --> 00:12:58,010
size then you can spot some few seconds

286
00:12:58,010 --> 00:13:00,890
it takes a few seconds and for our

287
00:13:00,890 --> 00:13:03,590
combiners you see that for the bigger

288
00:13:03,590 --> 00:13:05,990
program well let's say the order does

289
00:13:05,990 --> 00:13:10,160
not really matter almost and then for

290
00:13:10,160 --> 00:13:11,840
the megabyte you see that it took us

291
00:13:11,840 --> 00:13:14,870
maybe three minutes to really output the

292
00:13:14,870 --> 00:13:17,990
final program so what's interesting is

293
00:13:17,990 --> 00:13:23,420
the size of the output program so here

294
00:13:23,420 --> 00:13:25,699
you can see again if you just run the

295
00:13:25,699 --> 00:13:28,069
simple obfuscator yahoo's compressor

296
00:13:28,069 --> 00:13:30,769
obfuscator on these programs then you

297
00:13:30,769 --> 00:13:32,389
get actually you would expect something

298
00:13:32,389 --> 00:13:34,279
like one you could actually because of

299
00:13:34,279 --> 00:13:35,720
the code optimization get actually

300
00:13:35,720 --> 00:13:38,419
something which is smaller I guess

301
00:13:38,419 --> 00:13:40,369
because standard programs carry a lot of

302
00:13:40,369 --> 00:13:42,980
redundancy like comments intelligible

303
00:13:42,980 --> 00:13:45,379
names and so on and they kind of throw

304
00:13:45,379 --> 00:13:47,899
all this away and if you compare this to

305
00:13:47,899 --> 00:13:49,879
our obfuscator here you see that you get

306
00:13:49,879 --> 00:13:53,059
a factor of between two and four maybe

307
00:13:53,059 --> 00:13:55,699
up to five depends of course on the

308
00:13:55,699 --> 00:14:02,329
program in code size increase and if

309
00:14:02,329 --> 00:14:03,919
you're really interested you want to

310
00:14:03,919 --> 00:14:06,799
play around with this I think God has

311
00:14:06,799 --> 00:14:09,919
put the programs on github and you can

312
00:14:09,919 --> 00:14:15,230
find a reference in the proceedings so

313
00:14:15,230 --> 00:14:16,579
the question is can we do better than

314
00:14:16,579 --> 00:14:19,249
three out of four so initially when we

315
00:14:19,249 --> 00:14:21,079
started designing the first schemes we

316
00:14:21,079 --> 00:14:22,790
actually had five out of six then we

317
00:14:22,790 --> 00:14:24,679
arrived at the three out of four and we

318
00:14:24,679 --> 00:14:26,509
were curious to see if we can do better

319
00:14:26,509 --> 00:14:29,749
the enter is yes you can if you just

320
00:14:29,749 --> 00:14:31,549
remember the previous talk they had a

321
00:14:31,549 --> 00:14:32,989
one out of n combiner so they just

322
00:14:32,989 --> 00:14:35,169
needed one of the candidates is secure

323
00:14:35,169 --> 00:14:37,639
they do have some extra steps and

324
00:14:37,639 --> 00:14:40,399
assumptions in there which we don't but

325
00:14:40,399 --> 00:14:41,959
in this sense of course you can beat the

326
00:14:41,959 --> 00:14:44,869
bound the answer is no if you look at

327
00:14:44,869 --> 00:14:46,459
the certain kind of way how you can

328
00:14:46,459 --> 00:14:48,259
build combine us and this is what we

329
00:14:48,259 --> 00:14:51,319
call structural combiners so what is the

330
00:14:51,319 --> 00:14:54,139
structural combiner it's basically what

331
00:14:54,139 --> 00:14:55,819
we've just done with the majority and so

332
00:14:55,819 --> 00:14:58,639
on you just layer all your up for

333
00:14:58,639 --> 00:15:00,709
skaters in a certain way and the

334
00:15:00,709 --> 00:15:02,359
structure how you layer this is actually

335
00:15:02,359 --> 00:15:05,569
independent of your input circuit and of

336
00:15:05,569 --> 00:15:08,059
the candidates so you start with saying

337
00:15:08,059 --> 00:15:11,720
i just put placeholders of my up for

338
00:15:11,720 --> 00:15:13,279
skaters into a circuit then i do some

339
00:15:13,279 --> 00:15:15,169
other step like majority or some Nan's

340
00:15:15,169 --> 00:15:18,799
or some x or whatever and i just put

341
00:15:18,799 --> 00:15:21,649
this into a so-called units and the

342
00:15:21,649 --> 00:15:23,749
structure then says if i have a unit it

343
00:15:23,749 --> 00:15:25,639
determines the output circuit and i can

344
00:15:25,639 --> 00:15:31,059
use this as input to the next level unit

345
00:15:32,760 --> 00:15:35,460
so and then if you want to you can you

346
00:15:35,460 --> 00:15:37,320
want to actually build your combiner

347
00:15:37,320 --> 00:15:39,360
what you do is you initialize the first

348
00:15:39,360 --> 00:15:41,820
level units with your input circuit so

349
00:15:41,820 --> 00:15:44,760
you just run see through all the up for

350
00:15:44,760 --> 00:15:46,320
skaters you get some output this gives

351
00:15:46,320 --> 00:15:48,030
you the first level unit in a full

352
00:15:48,030 --> 00:15:49,740
description of the first level units and

353
00:15:49,740 --> 00:15:52,860
then you can just run them through the

354
00:15:52,860 --> 00:15:54,780
through the office caters on the second

355
00:15:54,780 --> 00:15:56,730
level unit and so on and recursively you

356
00:15:56,730 --> 00:16:00,210
of course get then some output

357
00:16:00,210 --> 00:16:02,970
description and the actual combiner

358
00:16:02,970 --> 00:16:05,880
result is the final unit on this path

359
00:16:05,880 --> 00:16:11,310
and of course the our combined are three

360
00:16:11,310 --> 00:16:13,170
of out three out of four combined our

361
00:16:13,170 --> 00:16:15,900
boss structural in that sense okay so

362
00:16:15,900 --> 00:16:17,970
let's try to do it two out of three

363
00:16:17,970 --> 00:16:21,420
right just lower it by just one compared

364
00:16:21,420 --> 00:16:25,110
to our three out of four combiner so the

365
00:16:25,110 --> 00:16:26,700
first thing we notice that if there's

366
00:16:26,700 --> 00:16:29,520
exists a path on these units such that

367
00:16:29,520 --> 00:16:33,320
the same obfuscator appears in each unit

368
00:16:33,320 --> 00:16:36,150
then there's no hope to get a secure one

369
00:16:36,150 --> 00:16:38,220
so here's the example let's suppose that

370
00:16:38,220 --> 00:16:41,070
obfuscating number three is on this path

371
00:16:41,070 --> 00:16:43,560
from the first level unit to the actual

372
00:16:43,560 --> 00:16:46,350
output unit and suppose that this

373
00:16:46,350 --> 00:16:49,080
combined is malicious then if you

374
00:16:49,080 --> 00:16:52,410
initialize the combiner and on the first

375
00:16:52,410 --> 00:16:54,690
level unit the malicious obfuscator may

376
00:16:54,690 --> 00:16:56,670
just output information about seeing

377
00:16:56,670 --> 00:16:59,280
clear and if this is done on the first

378
00:16:59,280 --> 00:17:02,280
level unit then the militias combined on

379
00:17:02,280 --> 00:17:03,750
the second level unit can more or less

380
00:17:03,750 --> 00:17:05,369
forward this information so you can

381
00:17:05,369 --> 00:17:08,930
basically leak through the entire path

382
00:17:08,930 --> 00:17:11,880
so this means there's no path where

383
00:17:11,880 --> 00:17:14,819
there's the same obfuscator on in each

384
00:17:14,819 --> 00:17:17,339
unit this cannot be or you will not get

385
00:17:17,339 --> 00:17:20,579
a secure one so this means on each pass

386
00:17:20,579 --> 00:17:22,740
there is one unit and we can always take

387
00:17:22,740 --> 00:17:24,569
the rightmost one where there are only

388
00:17:24,569 --> 00:17:27,839
up for skaters number one and two ok

389
00:17:27,839 --> 00:17:31,080
let's see in this example it's these it

390
00:17:31,080 --> 00:17:32,190
doesn't matter what's happening in the

391
00:17:32,190 --> 00:17:34,020
other of four skaters or in the other

392
00:17:34,020 --> 00:17:36,450
units sorry what up for skaters are in

393
00:17:36,450 --> 00:17:40,410
the other units okay then assume that

394
00:17:40,410 --> 00:17:42,390
the office KD number one is malicious

395
00:17:42,390 --> 00:17:45,920
and it will try to confuse

396
00:17:45,920 --> 00:17:48,110
our combined abut just saying instead of

397
00:17:48,110 --> 00:17:50,330
really obfuscating something about see

398
00:17:50,330 --> 00:17:51,830
it will just appreciate something about

399
00:17:51,830 --> 00:17:56,300
sea star okay then basically our

400
00:17:56,300 --> 00:17:58,610
combiner doesn't really know because

401
00:17:58,610 --> 00:18:00,320
there are only two up for skaters one is

402
00:18:00,320 --> 00:18:02,330
saying the truth one is lying kind of

403
00:18:02,330 --> 00:18:04,690
really tell if c or c star is the actual

404
00:18:04,690 --> 00:18:07,400
application should work with if you want

405
00:18:07,400 --> 00:18:09,320
to do it more formally you can go to the

406
00:18:09,320 --> 00:18:11,420
case that obfuscating number two is

407
00:18:11,420 --> 00:18:13,490
malicious and now this time you actually

408
00:18:13,490 --> 00:18:16,910
wanted to obfuscate c star but now this

409
00:18:16,910 --> 00:18:18,470
malicious of a scalar tells you oh I

410
00:18:18,470 --> 00:18:23,420
obfuscated it see ok so both look alike

411
00:18:23,420 --> 00:18:25,430
from you so the combiner would have to

412
00:18:25,430 --> 00:18:27,410
give the same result in both cases which

413
00:18:27,410 --> 00:18:29,240
means it needs to give the same result

414
00:18:29,240 --> 00:18:32,180
for both sea and sea star and if they

415
00:18:32,180 --> 00:18:33,950
are different than this cannot be a good

416
00:18:33,950 --> 00:18:36,560
compiler ok this is why it doesn't work

417
00:18:36,560 --> 00:18:38,270
if you want to at least work with

418
00:18:38,270 --> 00:18:40,160
structure and combiners to get something

419
00:18:40,160 --> 00:18:44,570
better ok so then we thought about maybe

420
00:18:44,570 --> 00:18:46,370
we don't need a combined and which

421
00:18:46,370 --> 00:18:47,840
always works correctly and gives you a

422
00:18:47,840 --> 00:18:50,150
functional correctness so we introduce

423
00:18:50,150 --> 00:18:51,710
something which we call detecting

424
00:18:51,710 --> 00:18:54,860
combiners and basically they say this is

425
00:18:54,860 --> 00:18:57,110
as before if all candidates are secure

426
00:18:57,110 --> 00:18:59,540
then you get a secure combiner which

427
00:18:59,540 --> 00:19:01,100
provides functional correctness and so

428
00:19:01,100 --> 00:19:05,900
on if you have that only tea out of n

429
00:19:05,900 --> 00:19:07,820
combiners are secure there may be cases

430
00:19:07,820 --> 00:19:09,560
where the combiner tells you here's an

431
00:19:09,560 --> 00:19:11,060
error there's something going on which

432
00:19:11,060 --> 00:19:13,970
is fishy I cannot correct it but at

433
00:19:13,970 --> 00:19:15,410
least you should know that there's

434
00:19:15,410 --> 00:19:20,540
something Falls with that and if you do

435
00:19:20,540 --> 00:19:22,400
this then you can actually go to two out

436
00:19:22,400 --> 00:19:24,440
of three set of three out of four and

437
00:19:24,440 --> 00:19:26,840
you can also give a very similar lower

438
00:19:26,840 --> 00:19:28,370
bound saying that you cannot do one out

439
00:19:28,370 --> 00:19:30,740
of two but at least you can do a little

440
00:19:30,740 --> 00:19:35,960
bit better so to conclude let me wrap up

441
00:19:35,960 --> 00:19:39,230
and show again what we did I think we

442
00:19:39,230 --> 00:19:40,910
have a what I would consider reasonable

443
00:19:40,910 --> 00:19:42,740
three out of four combiners I know it's

444
00:19:42,740 --> 00:19:44,510
hard to get three secure candidates

445
00:19:44,510 --> 00:19:47,360
especially in theory currently but at

446
00:19:47,360 --> 00:19:49,100
least in practice maybe have hope that

447
00:19:49,100 --> 00:19:51,350
you know some of the problems are

448
00:19:51,350 --> 00:19:56,000
actually doing a good job we did

449
00:19:56,000 --> 00:19:58,130
implementations just to see how

450
00:19:58,130 --> 00:20:00,650
let's see bad it is and surprising you

451
00:20:00,650 --> 00:20:02,300
didn't look that bad we were expecting

452
00:20:02,300 --> 00:20:04,700
some blow up in output size for example

453
00:20:04,700 --> 00:20:07,340
by a factor of because it's layered like

454
00:20:07,340 --> 00:20:11,380
maybe nine or ten but it was about four

455
00:20:11,380 --> 00:20:16,550
which is an increase in size if you talk

456
00:20:16,550 --> 00:20:18,650
about structural combiners things would

457
00:20:18,650 --> 00:20:21,740
you wear nest basically outputs of the

458
00:20:21,740 --> 00:20:24,140
up with skaters then you cannot do any

459
00:20:24,140 --> 00:20:25,970
better unless you go to detecting

460
00:20:25,970 --> 00:20:28,850
combiners and there you can do two out

461
00:20:28,850 --> 00:20:31,880
of three but you cannot even go to one

462
00:20:31,880 --> 00:20:35,060
out of two all right so that concludes

463
00:20:35,060 --> 00:20:37,280
my talk about the post occasion

464
00:20:37,280 --> 00:20:40,360
combiners thanks

