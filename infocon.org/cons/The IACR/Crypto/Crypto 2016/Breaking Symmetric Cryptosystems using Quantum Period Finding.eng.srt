1
00:00:04,160 --> 00:00:06,750
so the main question we try to address

2
00:00:06,750 --> 00:00:08,849
here is basically what would be the

3
00:00:08,849 --> 00:00:11,429
impact of quantum computers on symmetric

4
00:00:11,429 --> 00:00:13,830
cryptography and we care about this

5
00:00:13,830 --> 00:00:15,749
because well basically some physicists

6
00:00:15,749 --> 00:00:17,670
think they can build a quantum computers

7
00:00:17,670 --> 00:00:19,050
so I'm not going to argue whether that's

8
00:00:19,050 --> 00:00:20,730
true or false maybe to bid five years

9
00:00:20,730 --> 00:00:21,930
maybe 200 maybe never

10
00:00:21,930 --> 00:00:24,090
but anyway it's something we we take

11
00:00:24,090 --> 00:00:26,490
seriously in the crypto community and we

12
00:00:26,490 --> 00:00:28,680
try to find out what would be impact of

13
00:00:28,680 --> 00:00:30,900
this and how to have security that would

14
00:00:30,900 --> 00:00:34,800
resist this kind of event so in a

15
00:00:34,800 --> 00:00:36,839
nutshell what would computer quantum

16
00:00:36,839 --> 00:00:39,719
computers do the idea is we they will be

17
00:00:39,719 --> 00:00:41,999
able to solve a class of problems much

18
00:00:41,999 --> 00:00:44,909
faster than classical computers so we

19
00:00:44,909 --> 00:00:46,620
don't expect it will break all problems

20
00:00:46,620 --> 00:00:48,329
but they won't break some problems much

21
00:00:48,329 --> 00:00:51,420
faster and that's interesting for us

22
00:00:51,420 --> 00:00:53,219
because in cryptography we like hard

23
00:00:53,219 --> 00:00:54,569
problems and we like to have crypto

24
00:00:54,569 --> 00:00:56,670
systems that rely on hard problems so

25
00:00:56,670 --> 00:00:58,589
it's it's important to understand

26
00:00:58,589 --> 00:01:00,390
whether those problems are still hard

27
00:01:00,390 --> 00:01:02,550
for quantum computers or whatever become

28
00:01:02,550 --> 00:01:05,790
easy so in very in the field of public

29
00:01:05,790 --> 00:01:07,170
key cryptography in particular but

30
00:01:07,170 --> 00:01:09,149
something that's been studied a lot and

31
00:01:09,149 --> 00:01:11,310
we know there's a short algorithm that

32
00:01:11,310 --> 00:01:14,340
can break factoring integers and also

33
00:01:14,340 --> 00:01:16,409
can break discrete logarithm and because

34
00:01:16,409 --> 00:01:18,329
of this a lot of public key cryptosystem

35
00:01:18,329 --> 00:01:19,560
would be broken by your quantum

36
00:01:19,560 --> 00:01:21,360
computers such as IRA said if you have

37
00:01:21,360 --> 00:01:23,130
an elliptic curve cryptography and

38
00:01:23,130 --> 00:01:24,390
there's been actually a very large

39
00:01:24,390 --> 00:01:26,280
effort in the public cryptography

40
00:01:26,280 --> 00:01:28,740
community to design new algorithms that

41
00:01:28,740 --> 00:01:32,250
would resist this kind of attacks on

42
00:01:32,250 --> 00:01:34,590
symmetric cryptography we don't have

43
00:01:34,590 --> 00:01:36,390
that much knowledge about what would

44
00:01:36,390 --> 00:01:38,670
happen we know that there's a new rhythm

45
00:01:38,670 --> 00:01:42,240
I Grover but basically can do exhaustive

46
00:01:42,240 --> 00:01:44,670
search of an n-bit key in times two to

47
00:01:44,670 --> 00:01:49,200
the N over two but we don't know whether

48
00:01:49,200 --> 00:01:51,479
that is really the only attack we have

49
00:01:51,479 --> 00:01:53,820
we don't really know what else it could

50
00:01:53,820 --> 00:01:57,000
be this is the wrong version of my

51
00:01:57,000 --> 00:01:59,539
slides but I try to make due minutes

52
00:01:59,539 --> 00:02:01,890
there is something else we know

53
00:02:01,890 --> 00:02:04,109
something more than corpus algorithm and

54
00:02:04,109 --> 00:02:06,659
that's a nice result back oh I can do

55
00:02:06,659 --> 00:02:09,119
one more e and they surely in 2012 that

56
00:02:09,119 --> 00:02:11,670
we can break the even monster cipher

57
00:02:11,670 --> 00:02:14,909
with quantum queries so I try to explain

58
00:02:14,909 --> 00:02:16,560
a little bit how this works so first

59
00:02:16,560 --> 00:02:17,550
what is the even monster

60
00:02:17,550 --> 00:02:20,070
Seifer it's a nice construction you

61
00:02:20,070 --> 00:02:21,840
start from a public permutation P and

62
00:02:21,840 --> 00:02:24,750
the idea is to build a block cipher and

63
00:02:24,750 --> 00:02:26,670
you build your block cipher by just X on

64
00:02:26,670 --> 00:02:28,230
your key at the beginning and at the end

65
00:02:28,230 --> 00:02:30,720
and this construction is very simple and

66
00:02:30,720 --> 00:02:32,490
you have a security proof so it's very

67
00:02:32,490 --> 00:02:34,620
nice it's it's not really used in

68
00:02:34,620 --> 00:02:36,240
practice but from a theoretical point of

69
00:02:36,240 --> 00:02:37,950
view it's very nice because it's quite

70
00:02:37,950 --> 00:02:41,510
some problem has a security proof and

71
00:02:41,510 --> 00:02:45,690
turns out so before looking at quantum

72
00:02:45,690 --> 00:02:46,560
attacks I'm going to talk about

73
00:02:46,560 --> 00:02:47,880
classical attacks so there are many

74
00:02:47,880 --> 00:02:50,340
different ways to attack it of course we

75
00:02:50,340 --> 00:02:51,750
don't break the security proof so they

76
00:02:51,750 --> 00:02:53,990
only reach the same security level and

77
00:02:53,990 --> 00:02:56,670
one of one of those attacks is called

78
00:02:56,670 --> 00:02:59,100
the slide with a twist attack and what

79
00:02:59,100 --> 00:03:00,660
you do is you start with two to the N

80
00:03:00,660 --> 00:03:02,550
over two known plaintext X I and the

81
00:03:02,550 --> 00:03:05,910
corresponding ciphertext why I and what

82
00:03:05,910 --> 00:03:08,010
you do is you assume that in this large

83
00:03:08,010 --> 00:03:09,390
set of plaintext well with high

84
00:03:09,390 --> 00:03:10,020
probability

85
00:03:10,020 --> 00:03:12,180
two of those values will have difference

86
00:03:12,180 --> 00:03:14,790
exactly k1 so we assume we have X and X

87
00:03:14,790 --> 00:03:17,580
Prime with difference exactly k1 and

88
00:03:17,580 --> 00:03:19,980
then when we encrypt them what happens

89
00:03:19,980 --> 00:03:21,900
is the first step in even monstro

90
00:03:21,900 --> 00:03:23,820
encryption is to X or a key K once but

91
00:03:23,820 --> 00:03:25,380
basically swap X and X Prime

92
00:03:25,380 --> 00:03:27,840
so what we have is encryption of X is P

93
00:03:27,840 --> 00:03:29,670
of X prime plus k2 and the corruption of

94
00:03:29,670 --> 00:03:33,150
X prime is P of X plus k2 so k1 goes

95
00:03:33,150 --> 00:03:34,530
away and now when you combine those two

96
00:03:34,530 --> 00:03:36,630
a question you can make also k2 go away

97
00:03:36,630 --> 00:03:38,970
and what you get is encryption of X plus

98
00:03:38,970 --> 00:03:40,920
P of X is equal to encryption of X prime

99
00:03:40,920 --> 00:03:44,280
plus P of X Prime and this is something

100
00:03:44,280 --> 00:03:45,780
that's easy to detect now because you

101
00:03:45,780 --> 00:03:47,730
can just text take all your known

102
00:03:47,730 --> 00:03:50,940
plaintext X now you just compute Y I

103
00:03:50,940 --> 00:03:53,190
plus P of X Y you compute this for all

104
00:03:53,190 --> 00:03:54,570
your data and you look for a collision

105
00:03:54,570 --> 00:03:57,030
and you know that if you have a pair of

106
00:03:57,030 --> 00:03:58,650
with a specific difference it will be a

107
00:03:58,650 --> 00:04:00,090
collision so every time you get a

108
00:04:00,090 --> 00:04:01,980
collision you get to conjugate for k1

109
00:04:01,980 --> 00:04:03,120
and you can try them

110
00:04:03,120 --> 00:04:05,190
that's that gives you an attack against

111
00:04:05,190 --> 00:04:07,770
you even box or cipher so this one is a

112
00:04:07,770 --> 00:04:11,220
classical attack and basically what I

113
00:04:11,220 --> 00:04:14,250
can do and Marie did is they built a

114
00:04:14,250 --> 00:04:19,380
quantum version of Office attack so yeah

115
00:04:19,380 --> 00:04:21,000
I won't go too much into the details of

116
00:04:21,000 --> 00:04:23,190
quantum computing here basically I'll

117
00:04:23,190 --> 00:04:24,990
only see quantum algorithm as a black

118
00:04:24,990 --> 00:04:26,610
box and because it's quantum there's

119
00:04:26,610 --> 00:04:29,729
probably a cat somewhere in the box

120
00:04:29,729 --> 00:04:34,029
so the way this attack works is the

121
00:04:34,029 --> 00:04:36,430
basic model is you're going to give a

122
00:04:36,430 --> 00:04:38,199
quantum Oracle to the adversary instead

123
00:04:38,199 --> 00:04:40,270
of just a classic Oracle so we can send

124
00:04:40,270 --> 00:04:42,069
superposition queries to the encryption

125
00:04:42,069 --> 00:04:44,169
Oracle and get a superposition of

126
00:04:44,169 --> 00:04:48,279
corresponding outputs before going

127
00:04:48,279 --> 00:04:49,990
further I like to say it's a very strong

128
00:04:49,990 --> 00:04:51,580
model of course I wouldn't really expect

129
00:04:51,580 --> 00:04:54,749
such attacks to be actually practical

130
00:04:54,749 --> 00:04:57,279
but also on the other hand it's hard to

131
00:04:57,279 --> 00:04:59,379
argue that we cannot do this kind of

132
00:04:59,379 --> 00:05:01,300
attack in practice like if you have a

133
00:05:01,300 --> 00:05:03,249
smart card that encrypts messages with

134
00:05:03,249 --> 00:05:05,319
some secret key we don't know what

135
00:05:05,319 --> 00:05:06,819
happens if you send a superposition of

136
00:05:06,819 --> 00:05:08,469
messages we don't really expect to get

137
00:05:08,469 --> 00:05:09,939
the superposition of outputs but it's

138
00:05:09,939 --> 00:05:11,620
also hard to say there are no quantum

139
00:05:11,620 --> 00:05:13,240
effects and everything is completely

140
00:05:13,240 --> 00:05:16,270
classical so we don't really have any

141
00:05:16,270 --> 00:05:17,650
model in between the completely

142
00:05:17,650 --> 00:05:19,509
classical one is completely quantum one

143
00:05:19,509 --> 00:05:21,490
so it's it's still interesting to look

144
00:05:21,490 --> 00:05:24,009
at this model and also as a general

145
00:05:24,009 --> 00:05:26,080
thing in cryptography we like to look at

146
00:05:26,080 --> 00:05:27,729
very strong models improve security in

147
00:05:27,729 --> 00:05:31,210
very strong models so so I think it's

148
00:05:31,210 --> 00:05:33,009
very interesting to really look inside

149
00:05:33,009 --> 00:05:34,839
at what happens in this model even

150
00:05:34,839 --> 00:05:36,699
though it's not really a direct threat

151
00:05:36,699 --> 00:05:40,750
on the cryptography we use it's also

152
00:05:40,750 --> 00:05:42,219
important to understand that it's quite

153
00:05:42,219 --> 00:05:44,589
different from what we do we say shows

154
00:05:44,589 --> 00:05:46,389
algorithm when you try to break

155
00:05:46,389 --> 00:05:47,889
everything with Shor's algorithm you

156
00:05:47,889 --> 00:05:49,689
just take the public key and you build a

157
00:05:49,689 --> 00:05:51,370
quantum circuit out of the public key

158
00:05:51,370 --> 00:05:53,860
and then you run this quantum circuit

159
00:05:53,860 --> 00:05:55,779
but the adversary only takes classical

160
00:05:55,779 --> 00:05:58,089
inputs in this model we assume that the

161
00:05:58,089 --> 00:05:59,949
adversary has a quantum box and those

162
00:05:59,949 --> 00:06:01,930
encryption with some secret key so it's

163
00:06:01,930 --> 00:06:06,990
really a different different thing so

164
00:06:06,990 --> 00:06:09,099
what we're going to do in this model

165
00:06:09,099 --> 00:06:10,599
we're going to use a very nice algorithm

166
00:06:10,599 --> 00:06:13,300
called Simon's algorithm that's

167
00:06:13,300 --> 00:06:15,159
basically a case of quantum periode

168
00:06:15,159 --> 00:06:17,740
finding and what this algorithm does is

169
00:06:17,740 --> 00:06:20,770
you start from this this assumption but

170
00:06:20,770 --> 00:06:22,210
you have a function with a very specific

171
00:06:22,210 --> 00:06:24,219
property and this function has

172
00:06:24,219 --> 00:06:27,069
collisions if and only if the input

173
00:06:27,069 --> 00:06:30,639
difference is some fixed value s and the

174
00:06:30,639 --> 00:06:33,879
goal is to recover this value s this is

175
00:06:33,879 --> 00:06:35,349
something that's relatively hard for

176
00:06:35,349 --> 00:06:37,990
classical algorithm it takes time to 3n

177
00:06:37,990 --> 00:06:39,699
over 2 but for quantum algorithms you

178
00:06:39,699 --> 00:06:41,129
can do it in time

179
00:06:41,129 --> 00:06:43,870
so I will not go into the details of how

180
00:06:43,870 --> 00:06:47,979
this works but basically it works we can

181
00:06:47,979 --> 00:06:51,069
also do it in slightly weaker cases so I

182
00:06:51,069 --> 00:06:53,169
said the initial Simon's algorithm you

183
00:06:53,169 --> 00:06:54,849
assume you have collision if and only if

184
00:06:54,849 --> 00:06:57,490
the difference is s but in our case we

185
00:06:57,490 --> 00:06:58,840
will sometimes have something a little

186
00:06:58,840 --> 00:07:00,970
bit weaker that we have collision if the

187
00:07:00,970 --> 00:07:03,490
difference is as but not only if the

188
00:07:03,490 --> 00:07:04,569
difference is less like there are some

189
00:07:04,569 --> 00:07:06,669
extra collisions I don't follow this

190
00:07:06,669 --> 00:07:09,099
exact difference and if those extra

191
00:07:09,099 --> 00:07:11,050
collisions are not structured they are

192
00:07:11,050 --> 00:07:13,479
mostly random then the algorithm would

193
00:07:13,479 --> 00:07:14,889
still work so you can look in the paper

194
00:07:14,889 --> 00:07:19,690
support for the details on this so now

195
00:07:19,690 --> 00:07:22,169
how do we break even mantra with this

196
00:07:22,169 --> 00:07:24,460
the idea is to do something very similar

197
00:07:24,460 --> 00:07:25,990
to be classical attack it's basically a

198
00:07:25,990 --> 00:07:28,030
quantization of classical attack I

199
00:07:28,030 --> 00:07:29,919
showed earlier even more true so I'm

200
00:07:29,919 --> 00:07:31,750
going to build a function f you build it

201
00:07:31,750 --> 00:07:33,849
like this you do encryption effects plus

202
00:07:33,849 --> 00:07:39,699
permutation effects and so you look at

203
00:07:39,699 --> 00:07:42,190
this function and the important thing is

204
00:07:42,190 --> 00:07:44,050
this function satisfies f of X is equal

205
00:07:44,050 --> 00:07:46,509
to f of X plus k1 and that's just the

206
00:07:46,509 --> 00:07:47,949
same thing as I showed in the classical

207
00:07:47,949 --> 00:07:49,479
attack that's just because when you

208
00:07:49,479 --> 00:07:50,830
write down what this function is it's

209
00:07:50,830 --> 00:07:52,300
something like this and this you input X

210
00:07:52,300 --> 00:07:54,069
plus k1 you just swap out those two

211
00:07:54,069 --> 00:07:56,349
terms so of course it's there will be

212
00:07:56,349 --> 00:07:58,719
collisions and so this is exactly what

213
00:07:58,719 --> 00:08:00,340
we want for Simon's algorithm so now we

214
00:08:00,340 --> 00:08:01,930
can run similar algorithm of this

215
00:08:01,930 --> 00:08:03,759
function will recover k1 and that's how

216
00:08:03,759 --> 00:08:06,460
we break even on some cipher and now

217
00:08:06,460 --> 00:08:08,650
this attack only takes like linear in n

218
00:08:08,650 --> 00:08:12,130
so it's a very efficient attack so

219
00:08:12,130 --> 00:08:13,990
that's what was known so far about

220
00:08:13,990 --> 00:08:16,870
quantum attacks on symmetric

221
00:08:16,870 --> 00:08:18,190
cryptography and now I'm going to show

222
00:08:18,190 --> 00:08:20,199
that actually it's a lot more general we

223
00:08:20,199 --> 00:08:22,150
can break a lot of modes of operation

224
00:08:22,150 --> 00:08:25,569
using the same techniques so I start

225
00:08:25,569 --> 00:08:28,479
with CBC max so I'm thinking everybody

226
00:08:28,479 --> 00:08:30,340
knows where the neck is but the

227
00:08:30,340 --> 00:08:32,559
important thing is a security notion

228
00:08:32,559 --> 00:08:34,208
we're going to use is security against

229
00:08:34,208 --> 00:08:36,039
chosen plaintext attacks so that's a

230
00:08:36,039 --> 00:08:37,839
very classical so what you do is you

231
00:08:37,839 --> 00:08:40,059
have some Oracle and the adversary can

232
00:08:40,059 --> 00:08:42,549
send messages and receive the

233
00:08:42,549 --> 00:08:44,709
corresponding attack and the goal of the

234
00:08:44,709 --> 00:08:47,290
adversary at the end is to predict the

235
00:08:47,290 --> 00:08:49,329
tag of a new message message that was

236
00:08:49,329 --> 00:08:51,160
not sent to me recall and you have to

237
00:08:51,160 --> 00:08:53,100
predict the message for this tag so

238
00:08:53,100 --> 00:08:54,740
that's the classic

239
00:08:54,740 --> 00:08:57,770
security notion now when we try to move

240
00:08:57,770 --> 00:09:01,550
to a quantum setting so what we want to

241
00:09:01,550 --> 00:09:03,620
do is change replace with classical

242
00:09:03,620 --> 00:09:05,899
Oracle by quantum one so it means now

243
00:09:05,899 --> 00:09:07,760
adversary sends a superposition of

244
00:09:07,760 --> 00:09:09,170
messages and get the corresponding

245
00:09:09,170 --> 00:09:13,130
superposition of Mac values but we also

246
00:09:13,130 --> 00:09:14,450
have to change a little bit what it

247
00:09:14,450 --> 00:09:15,820
means to do a forgery

248
00:09:15,820 --> 00:09:18,200
because if you send a superposition of

249
00:09:18,200 --> 00:09:19,279
messages you can just send a

250
00:09:19,279 --> 00:09:21,440
superposition of all messages and now we

251
00:09:21,440 --> 00:09:23,120
don't know what is a new message but

252
00:09:23,120 --> 00:09:24,320
you're ready send everything to the

253
00:09:24,320 --> 00:09:26,420
Oracle so instead of asking for a new

254
00:09:26,420 --> 00:09:28,610
message what we ask is is if you may

255
00:09:28,610 --> 00:09:31,339
take worries you have to create k plus 1

256
00:09:31,339 --> 00:09:34,700
valid tags on message as yet so that's

257
00:09:34,700 --> 00:09:36,680
the security notion we use when it's due

258
00:09:36,680 --> 00:09:41,330
to a bunion surgery so now let's look at

259
00:09:41,330 --> 00:09:44,570
CBC Mac so it's a very common Mac it's

260
00:09:44,570 --> 00:09:46,610
using a lot of protocols it's a pretty

261
00:09:46,610 --> 00:09:48,770
old one and it comes with security

262
00:09:48,770 --> 00:09:50,089
proofs so it's a it's a good

263
00:09:50,089 --> 00:09:51,920
construction on what you do is basically

264
00:09:51,920 --> 00:09:53,779
you start with your message you encrypt

265
00:09:53,779 --> 00:09:55,279
you XOR another message block you

266
00:09:55,279 --> 00:09:56,990
encrypt and so on and at the end you

267
00:09:56,990 --> 00:10:02,270
encrypt again so I'll skip the classical

268
00:10:02,270 --> 00:10:05,480
attacks so how do we do a quantum attack

269
00:10:05,480 --> 00:10:08,810
on CBC Mac so the line step of the

270
00:10:08,810 --> 00:10:11,000
attack will be to define a function f

271
00:10:11,000 --> 00:10:12,890
with good properties that's how all

272
00:10:12,890 --> 00:10:15,500
those attacks are going to work and then

273
00:10:15,500 --> 00:10:16,850
we're going to run Simon's algorithm in

274
00:10:16,850 --> 00:10:18,740
this function of course and the way

275
00:10:18,740 --> 00:10:20,420
we're going to build this function here

276
00:10:20,420 --> 00:10:23,690
we take two input a 1 bit input and one

277
00:10:23,690 --> 00:10:25,940
message block and what we do is we

278
00:10:25,940 --> 00:10:27,829
expand with one bit input to a full

279
00:10:27,829 --> 00:10:29,060
block but we concatenate

280
00:10:29,060 --> 00:10:33,589
the offer block and so when you write

281
00:10:33,589 --> 00:10:35,839
out what happens when you you evaluate

282
00:10:35,839 --> 00:10:37,579
this function so if you start with B

283
00:10:37,579 --> 00:10:39,890
equals 0 you're going the Mac is going

284
00:10:39,890 --> 00:10:41,720
to be just encryption decryption of X

285
00:10:41,720 --> 00:10:43,459
plus the encryption of 1 you should

286
00:10:43,459 --> 00:10:45,079
start with bit 1 you have encryption of

287
00:10:45,079 --> 00:10:47,540
encryption of x plus encryption of 0 and

288
00:10:47,540 --> 00:10:49,370
if you look at this function you can see

289
00:10:49,370 --> 00:10:51,620
that there is a hidden code in this

290
00:10:51,620 --> 00:10:54,560
function if you put if you change the

291
00:10:54,560 --> 00:10:57,110
bit B and you put a difference in X fat

292
00:10:57,110 --> 00:10:58,790
corresponds to the difference in those

293
00:10:58,790 --> 00:11:01,100
two terms here so if you put difference

294
00:11:01,100 --> 00:11:03,350
1 into first term and Delta in the

295
00:11:03,350 --> 00:11:04,790
second where Delta is the encryption of

296
00:11:04,790 --> 00:11:07,810
0 plus encryption of 1 you get

297
00:11:07,810 --> 00:11:09,610
so it's it's a it's basically a

298
00:11:09,610 --> 00:11:10,959
differential attack you put difference

299
00:11:10,959 --> 00:11:12,910
one here and here you put the

300
00:11:12,910 --> 00:11:14,440
corresponding difference two to cancel

301
00:11:14,440 --> 00:11:19,509
it so so this is nice though we can

302
00:11:19,509 --> 00:11:20,949
apply Simon's algorithm we're going to

303
00:11:20,949 --> 00:11:22,600
recover this value on terms that we can

304
00:11:22,600 --> 00:11:24,310
use this value to make forgeries for

305
00:11:24,310 --> 00:11:26,440
exactly the same reason now you just put

306
00:11:26,440 --> 00:11:28,060
again this difference corresponding

307
00:11:28,060 --> 00:11:29,170
difference here is the only difference

308
00:11:29,170 --> 00:11:31,000
here it's Consol's it's collision and

309
00:11:31,000 --> 00:11:33,730
you have forgeries so this is how we can

310
00:11:33,730 --> 00:11:38,440
break cbc-mac using quantum queries so

311
00:11:38,440 --> 00:11:40,480
the main structure is like this on all

312
00:11:40,480 --> 00:11:42,009
the attacks we have in this paper follow

313
00:11:42,009 --> 00:11:43,930
this same structure so the most

314
00:11:43,930 --> 00:11:46,149
important thing is to build some

315
00:11:46,149 --> 00:11:49,480
function f with a hidden structure

316
00:11:49,480 --> 00:11:52,720
hidden Delta in it that can be used

317
00:11:52,720 --> 00:11:54,790
later so that's where you have to be a

318
00:11:54,790 --> 00:11:56,350
little bit clever to see how you can

319
00:11:56,350 --> 00:11:58,389
build this function how you can build

320
00:11:58,389 --> 00:12:01,420
your inputs to your Mike on how you have

321
00:12:01,420 --> 00:12:03,970
to combine maybe the outputs and if you

322
00:12:03,970 --> 00:12:06,910
do this nicely well you you have such a

323
00:12:06,910 --> 00:12:09,190
function then you use Simon's algorithm

324
00:12:09,190 --> 00:12:11,350
you recover Delta and then you use data

325
00:12:11,350 --> 00:12:16,240
to make forgeries and yeah an important

326
00:12:16,240 --> 00:12:18,009
thing is you need to make a quantum

327
00:12:18,009 --> 00:12:19,779
implementation of this function f in

328
00:12:19,779 --> 00:12:21,550
order to run Simon's algorithm so of

329
00:12:21,550 --> 00:12:22,990
course you need a quantum version of

330
00:12:22,990 --> 00:12:25,089
your recall and you also need sometimes

331
00:12:25,089 --> 00:12:26,560
some extra bits of circuit that you're

332
00:12:26,560 --> 00:12:30,040
going to combine with it so we can use

333
00:12:30,040 --> 00:12:32,290
the same kind of ideas on on many

334
00:12:32,290 --> 00:12:34,300
different constructions actually and

335
00:12:34,300 --> 00:12:36,160
that's that's really something a bit

336
00:12:36,160 --> 00:12:38,079
surprising that we we can really drink a

337
00:12:38,079 --> 00:12:40,569
variety of amount of operations I'm

338
00:12:40,569 --> 00:12:42,579
going to show you a few of them so this

339
00:12:42,579 --> 00:12:46,540
one here is a PMAC so it's a permissible

340
00:12:46,540 --> 00:12:49,689
Mac and so the main structure is you

341
00:12:49,689 --> 00:12:51,189
encrypted parallel all your message

342
00:12:51,189 --> 00:12:53,019
blocks but before encrypting you have

343
00:12:53,019 --> 00:12:55,630
two X or some secret values Delta and

344
00:12:55,630 --> 00:12:57,579
then you basically XOR the outputs on

345
00:12:57,579 --> 00:12:59,560
the encrypt again and you should look at

346
00:12:59,560 --> 00:13:02,470
this structure here if you put on only

347
00:13:02,470 --> 00:13:05,230
two blocks of messages it's actually the

348
00:13:05,230 --> 00:13:06,970
same shape as cbc-mac so we can just

349
00:13:06,970 --> 00:13:11,649
choose the same attack we can also do an

350
00:13:11,649 --> 00:13:14,319
alternative attack if you're just for

351
00:13:14,319 --> 00:13:16,420
for psychotherapy maybe what we can do

352
00:13:16,420 --> 00:13:18,579
instead if is a build a different

353
00:13:18,579 --> 00:13:20,560
function where we start with one

354
00:13:20,560 --> 00:13:23,050
of message and we just repeat it twice

355
00:13:23,050 --> 00:13:26,110
then when we when we compute the Mac of

356
00:13:26,110 --> 00:13:29,529
Expo continuity with X it turns out that

357
00:13:29,529 --> 00:13:31,569
again you have some structure you have

358
00:13:31,569 --> 00:13:34,600
collisions if you input difference Delta

359
00:13:34,600 --> 00:13:36,699
zero X or Delta one let's just if you

360
00:13:36,699 --> 00:13:38,559
think of it if you have X on X here and

361
00:13:38,559 --> 00:13:41,019
issue I so Delta zero X or Delta one

362
00:13:41,019 --> 00:13:42,639
into this value X while you're just

363
00:13:42,639 --> 00:13:45,129
swapping around the first two encryption

364
00:13:45,129 --> 00:13:46,329
locks so of course you're going to have

365
00:13:46,329 --> 00:13:49,180
collisions so this is an alternative

366
00:13:49,180 --> 00:13:50,949
attack against PMAC and the nice thing

367
00:13:50,949 --> 00:13:52,990
is it's also going to work if you put an

368
00:13:52,990 --> 00:13:55,389
encryption block here and this happens

369
00:13:55,389 --> 00:13:56,949
in some conjugated encryption mode you

370
00:13:56,949 --> 00:13:58,779
have an extra encryption here and in

371
00:13:58,779 --> 00:14:00,579
this case the cbc-mac attack is not

372
00:14:00,579 --> 00:14:02,709
applicable to pee Mak but this variant

373
00:14:02,709 --> 00:14:05,410
will be applicable it's nice to have a

374
00:14:05,410 --> 00:14:07,709
number of different ways to attack them

375
00:14:07,709 --> 00:14:10,180
so next I'm going to look at

376
00:14:10,180 --> 00:14:14,439
GMAC so GMAC is basically the

377
00:14:14,439 --> 00:14:17,850
authentication part of GCM and it's a

378
00:14:17,850 --> 00:14:21,490
character of character of Eggman Mac so

379
00:14:21,490 --> 00:14:23,170
you have some polynomial evaluation on

380
00:14:23,170 --> 00:14:26,970
when you XOR an encryption of the notes

381
00:14:26,970 --> 00:14:29,769
I'm not going to go into those details

382
00:14:29,769 --> 00:14:31,839
the important thing is again it looks

383
00:14:31,839 --> 00:14:33,730
very similar to CBC Mac when you look at

384
00:14:33,730 --> 00:14:36,069
the picture you basically extra messages

385
00:14:36,069 --> 00:14:38,079
and apply some function so you really

386
00:14:38,079 --> 00:14:40,180
want to do the same kind of attack so

387
00:14:40,180 --> 00:14:41,559
you're going to define the same kind of

388
00:14:41,559 --> 00:14:43,389
function and turns out you have again

389
00:14:43,389 --> 00:14:46,930
that f of B X is equal to F of B plus 1

390
00:14:46,930 --> 00:14:48,730
X plus Delta so that's the same kind of

391
00:14:48,730 --> 00:14:50,050
structure we want for assignments

392
00:14:50,050 --> 00:14:53,350
algorithm however it's a little bit

393
00:14:53,350 --> 00:14:55,949
different because there is a notes here

394
00:14:55,949 --> 00:14:58,930
so every time we query this Oracle we're

395
00:14:58,930 --> 00:15:00,699
going to get actually a different

396
00:15:00,699 --> 00:15:02,680
function it's not the same function

397
00:15:02,680 --> 00:15:04,449
we're going to query all the time so

398
00:15:04,449 --> 00:15:05,470
that makes you attack a little bit

399
00:15:05,470 --> 00:15:07,750
different but even though all those

400
00:15:07,750 --> 00:15:09,610
functions are different they all have

401
00:15:09,610 --> 00:15:12,309
the same period because when nonce only

402
00:15:12,309 --> 00:15:15,519
had only appears at the ends of the

403
00:15:15,519 --> 00:15:17,199
computation so if you have collisions

404
00:15:17,199 --> 00:15:20,139
before you you input for nouns the the

405
00:15:20,139 --> 00:15:21,579
structure of a collision doesn't depend

406
00:15:21,579 --> 00:15:23,529
on the nodes and thanks to this we can

407
00:15:23,529 --> 00:15:25,300
actually apply an assignment algorithm

408
00:15:25,300 --> 00:15:27,160
so it's not exactly Simon's algorithm

409
00:15:27,160 --> 00:15:28,629
because we have a family or function but

410
00:15:28,629 --> 00:15:30,399
it's basically the same thing and it

411
00:15:30,399 --> 00:15:32,819
still works

412
00:15:33,540 --> 00:15:35,279
also it's nice to when you think about

413
00:15:35,279 --> 00:15:37,500
this structure which works because we

414
00:15:37,500 --> 00:15:39,570
notice at the end she would put vent on

415
00:15:39,570 --> 00:15:41,670
somewhere closer to the beginning those

416
00:15:41,670 --> 00:15:43,290
attacks would would not really work like

417
00:15:43,290 --> 00:15:45,920
this we have also looked at

418
00:15:45,920 --> 00:15:48,720
authenticated encryption with Associated

419
00:15:48,720 --> 00:15:52,889
data the basic idea is you have two

420
00:15:52,889 --> 00:15:54,720
inputs a message on some Associated data

421
00:15:54,720 --> 00:15:56,639
a and you want to encrypt a lot on

422
00:15:56,639 --> 00:15:58,050
schedule message or on your tone ticket

423
00:15:58,050 --> 00:16:00,199
in Sioux City data

424
00:16:00,199 --> 00:16:05,120
and something interesting is in a lot of

425
00:16:05,120 --> 00:16:07,500
AAG construction what you do is you

426
00:16:07,500 --> 00:16:09,300
first process you associated data

427
00:16:09,300 --> 00:16:12,029
independently of the nodes and when you

428
00:16:12,029 --> 00:16:13,470
process when onto a message and

429
00:16:13,470 --> 00:16:16,370
something that comes from this

430
00:16:16,370 --> 00:16:18,750
processing of the Associated data and

431
00:16:18,750 --> 00:16:20,579
because of this a lot of us that that

432
00:16:20,579 --> 00:16:22,380
will still be applicable because we will

433
00:16:22,380 --> 00:16:23,910
just attack the part when you process

434
00:16:23,910 --> 00:16:26,160
you can sketch in data and so if you

435
00:16:26,160 --> 00:16:27,990
have collisions before Vernon's comes in

436
00:16:27,990 --> 00:16:33,449
then we can just do the same thing so to

437
00:16:33,449 --> 00:16:36,480
summarize there's a lot of modes that we

438
00:16:36,480 --> 00:16:38,819
can break with this really so we can

439
00:16:38,819 --> 00:16:40,800
break a lot of course but I really use

440
00:16:40,800 --> 00:16:42,269
that a stolid I don't really use like a

441
00:16:42,269 --> 00:16:45,300
CBC Mac a Mac GCM OCB those are really

442
00:16:45,300 --> 00:16:46,889
important modes and turns out they are

443
00:16:46,889 --> 00:16:49,050
not secure if you can do quantum queries

444
00:16:49,050 --> 00:16:50,880
to be Oracle we have also looked at

445
00:16:50,880 --> 00:16:52,829
Ceaser candidates and it turns out we

446
00:16:52,829 --> 00:16:55,490
can break eight of them so that's also a

447
00:16:55,490 --> 00:16:58,050
non negligible fraction so there's

448
00:16:58,050 --> 00:16:59,970
really something happening happening

449
00:16:59,970 --> 00:17:04,169
here if you compare this to the

450
00:17:04,169 --> 00:17:06,199
situation with encryption modes

451
00:17:06,199 --> 00:17:09,089
surprisingly it's very different

452
00:17:09,089 --> 00:17:11,280
most encryption modes are actually

453
00:17:11,280 --> 00:17:13,140
secure against quantum queries so a lot

454
00:17:13,140 --> 00:17:15,119
of authentication moves are broken but

455
00:17:15,119 --> 00:17:17,130
encryption mode seems to be secure I

456
00:17:17,130 --> 00:17:18,329
don't show you have a good explanation

457
00:17:18,329 --> 00:17:20,400
for this but there's really something

458
00:17:20,400 --> 00:17:22,470
different happening and it's also

459
00:17:22,470 --> 00:17:24,329
important to see that even though we can

460
00:17:24,329 --> 00:17:26,549
break a lot of them it's still possible

461
00:17:26,549 --> 00:17:28,980
to build sexual max right it's not that

462
00:17:28,980 --> 00:17:30,390
the model is too strong when we break

463
00:17:30,390 --> 00:17:32,540
everything

464
00:17:32,990 --> 00:17:36,270
just before concluding I'd like to talk

465
00:17:36,270 --> 00:17:38,510
about something a little bit different

466
00:17:38,510 --> 00:17:40,440
everything so far was about a lot of

467
00:17:40,440 --> 00:17:42,540
operation I'm going to talk about crypt

468
00:17:42,540 --> 00:17:43,679
and then is this technique so I'm

469
00:17:43,679 --> 00:17:45,870
looking inside the block cipher

470
00:17:45,870 --> 00:17:48,000
and I'm going to look at a slide attacks

471
00:17:48,000 --> 00:17:50,309
so a slight attack is a class of attack

472
00:17:50,309 --> 00:17:52,500
where you look at an iterated block

473
00:17:52,500 --> 00:17:55,169
cipher and you assume that it's it's

474
00:17:55,169 --> 00:17:57,000
written exactly the same function so you

475
00:17:57,000 --> 00:17:58,799
eat the same permutation at every realm

476
00:17:58,799 --> 00:18:00,659
and jerks off the same key at every

477
00:18:00,659 --> 00:18:04,020
round and if you do this there's a nice

478
00:18:04,020 --> 00:18:06,210
attack where the idea is to find a pair

479
00:18:06,210 --> 00:18:07,950
of inputs X X prime so that they are

480
00:18:07,950 --> 00:18:10,710
basically shifted by one round so the

481
00:18:10,710 --> 00:18:12,390
encryption starts one round later and

482
00:18:12,390 --> 00:18:17,730
ends run wrong later and it turns out

483
00:18:17,730 --> 00:18:20,730
it's possible to find values with this

484
00:18:20,730 --> 00:18:24,270
kind of relations and if you want to do

485
00:18:24,270 --> 00:18:26,690
a classical attack to find this well I

486
00:18:26,690 --> 00:18:29,010
will skip the details but basically we

487
00:18:29,010 --> 00:18:31,500
can detect this use by finding

488
00:18:31,500 --> 00:18:34,799
collisions and if we and this attack can

489
00:18:34,799 --> 00:18:36,419
also be quantified so it's also possible

490
00:18:36,419 --> 00:18:38,340
to build a quantum version of it office

491
00:18:38,340 --> 00:18:40,799
attack and what we do is we build this

492
00:18:40,799 --> 00:18:43,770
over function in this way so it's a it's

493
00:18:43,770 --> 00:18:45,090
actually a little bit different from the

494
00:18:45,090 --> 00:18:45,570
attacks

495
00:18:45,570 --> 00:18:47,279
I should so far my function is now

496
00:18:47,279 --> 00:18:49,950
defined in a different way so we use a 1

497
00:18:49,950 --> 00:18:53,490
bit input plus 1 block of data and what

498
00:18:53,490 --> 00:18:55,740
we do is if a bit is 0 we're going to

499
00:18:55,740 --> 00:18:58,380
take X plus P of encryption of X and if

500
00:18:58,380 --> 00:19:00,029
a bit is 1 we're going to take X plus

501
00:19:00,029 --> 00:19:04,200
encryption of P of X and now if you try

502
00:19:04,200 --> 00:19:06,350
to write down exactly what this makes

503
00:19:06,350 --> 00:19:09,690
you can see that if you have F of 0 X

504
00:19:09,690 --> 00:19:12,120
and you write down what you get it's

505
00:19:12,120 --> 00:19:15,179
actually the same as F of 1 X plus K so

506
00:19:15,179 --> 00:19:16,620
you actually have a period or so in this

507
00:19:16,620 --> 00:19:19,049
function the period will give out a

508
00:19:19,049 --> 00:19:22,289
secret key K so if you have a block

509
00:19:22,289 --> 00:19:24,179
cipher with this a very strong structure

510
00:19:24,179 --> 00:19:26,970
well I should say that actual block

511
00:19:26,970 --> 00:19:28,590
cipher usually avoids a structure

512
00:19:28,590 --> 00:19:29,940
because we know there are issues with it

513
00:19:29,940 --> 00:19:32,070
but it's still interesting to see that

514
00:19:32,070 --> 00:19:33,809
if you have this structure you can

515
00:19:33,809 --> 00:19:36,210
actually break this in time that's only

516
00:19:36,210 --> 00:19:38,520
polynomial in and using quantum queries

517
00:19:38,520 --> 00:19:42,950
due to the construction so to conclude

518
00:19:42,950 --> 00:19:46,080
the first message is that Simon's

519
00:19:46,080 --> 00:19:48,390
algorithm actually breaks real problems

520
00:19:48,390 --> 00:19:50,309
that's something that was not completely

521
00:19:50,309 --> 00:19:53,669
obvious from the quantum side of this

522
00:19:53,669 --> 00:19:55,559
when Simon's algorithm was first

523
00:19:55,559 --> 00:19:58,110
introduced it was very important results

524
00:19:58,110 --> 00:19:59,070
because

525
00:19:59,070 --> 00:20:00,690
was the first case where we had a

526
00:20:00,690 --> 00:20:02,549
quantum algorithm that was exponentially

527
00:20:02,549 --> 00:20:04,830
faster than classical algorithms but the

528
00:20:04,830 --> 00:20:06,840
problem budget souls was considered as

529
00:20:06,840 --> 00:20:08,549
very artificial or naturally something

530
00:20:08,549 --> 00:20:11,490
but what was important in real life and

531
00:20:11,490 --> 00:20:13,200
turns out in photography this very

532
00:20:13,200 --> 00:20:15,299
problem is actually important for for a

533
00:20:15,299 --> 00:20:17,490
lot of systems that we use so that's

534
00:20:17,490 --> 00:20:19,919
that's something interesting here and in

535
00:20:19,919 --> 00:20:22,350
terms of applications we can break a lot

536
00:20:22,350 --> 00:20:23,909
of mac nodes and authenticated

537
00:20:23,909 --> 00:20:26,100
encryption modes with attacks that takes

538
00:20:26,100 --> 00:20:28,710
only linear time and we can also improve

539
00:20:28,710 --> 00:20:30,870
some cryptanalysis techniques so if a

540
00:20:30,870 --> 00:20:33,960
really big result is well there's not

541
00:20:33,960 --> 00:20:35,610
just grover algorithms if you look at

542
00:20:35,610 --> 00:20:37,230
the security of symmetric cryptography

543
00:20:37,230 --> 00:20:39,330
against quantum algorithms there are

544
00:20:39,330 --> 00:20:41,220
actually better attacks on Grover's

545
00:20:41,220 --> 00:20:43,259
algorithm so I think it's it's

546
00:20:43,259 --> 00:20:44,610
worthwhile looking at it and seeing

547
00:20:44,610 --> 00:20:47,820
really what we can do on the other hand

548
00:20:47,820 --> 00:20:49,620
this attack is not really practical in

549
00:20:49,620 --> 00:20:51,210
the sense that it uses a very strong

550
00:20:51,210 --> 00:20:53,100
model so we don't really expect but it

551
00:20:53,100 --> 00:20:55,710
will break actual implementations of our

552
00:20:55,710 --> 00:20:58,649
crypto and this will conclude my talk

553
00:20:58,649 --> 00:21:01,070
thank you

