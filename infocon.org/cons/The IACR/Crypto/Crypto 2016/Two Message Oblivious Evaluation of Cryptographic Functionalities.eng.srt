1
00:00:04,390 --> 00:00:07,250
thanks for the intro Minaj and thanks to

2
00:00:07,250 --> 00:00:09,830
all of you for holding out until now I'm

3
00:00:09,830 --> 00:00:13,430
Nico and this joint work with nice life

4
00:00:13,430 --> 00:00:15,350
like a Johannes coupe and Dominique

5
00:00:15,350 --> 00:00:19,310
scooter the title of this talk is to

6
00:00:19,310 --> 00:00:21,140
message oblivious evaluation of

7
00:00:21,140 --> 00:00:24,650
cryptographic functionalities but what I

8
00:00:24,650 --> 00:00:28,010
really want to talk about is how to use

9
00:00:28,010 --> 00:00:30,800
security proves in a non black box

10
00:00:30,800 --> 00:00:36,829
fashion to elaborate on that let me give

11
00:00:36,829 --> 00:00:38,890
you a little intro what I mean with that

12
00:00:38,890 --> 00:00:41,960
usually when we want to prove the cure

13
00:00:41,960 --> 00:00:44,930
security of more complex protocols we

14
00:00:44,930 --> 00:00:49,940
first try to reduce the security of this

15
00:00:49,940 --> 00:00:52,579
protocol to some the security of some

16
00:00:52,579 --> 00:00:56,210
primitive think of this primitive as for

17
00:00:56,210 --> 00:00:59,180
instance digital signatures then in turn

18
00:00:59,180 --> 00:01:01,670
those this primitive might come with a

19
00:01:01,670 --> 00:01:04,280
hardness reduction on its own of its own

20
00:01:04,280 --> 00:01:06,680
that reduces the security to some

21
00:01:06,680 --> 00:01:09,649
heartless assumption in turn if we

22
00:01:09,649 --> 00:01:12,289
compose those two reductions we will get

23
00:01:12,289 --> 00:01:14,719
a security reduction that basis the

24
00:01:14,719 --> 00:01:18,289
security of the protocol on the

25
00:01:18,289 --> 00:01:20,929
underlying assumption that's how you

26
00:01:20,929 --> 00:01:23,329
usually do it what I will show you today

27
00:01:23,329 --> 00:01:27,740
is a slightly different way of basing

28
00:01:27,740 --> 00:01:33,380
security of some protocol on a hardness

29
00:01:33,380 --> 00:01:36,740
assumption once this is not possible so

30
00:01:36,740 --> 00:01:40,929
i will show you a way to compile a

31
00:01:40,929 --> 00:01:44,840
primitive into a protocol and a

32
00:01:44,840 --> 00:01:47,779
corresponding way to compile the

33
00:01:47,779 --> 00:01:50,270
security proof of the primitive into a

34
00:01:50,270 --> 00:01:55,579
security proof for the protocol so let

35
00:01:55,579 --> 00:01:58,880
me set the stage for that we will do a

36
00:01:58,880 --> 00:02:01,399
secure function evaluation where we have

37
00:02:01,399 --> 00:02:03,409
two parties Alice Alice and Bob who want

38
00:02:03,409 --> 00:02:06,880
to compute a function f jointly with

39
00:02:06,880 --> 00:02:10,250
input X by Ellis and input Y by Bob say

40
00:02:10,250 --> 00:02:14,690
we have a protocol pie now we say such a

41
00:02:14,690 --> 00:02:17,130
protocol is secure against militia

42
00:02:17,130 --> 00:02:21,750
adversaries if say once one of the

43
00:02:21,750 --> 00:02:27,570
parties is corrupted in this case Bob if

44
00:02:27,570 --> 00:02:30,750
there exists a simulator that simulates

45
00:02:30,750 --> 00:02:34,590
the view of this corrupted party while

46
00:02:34,590 --> 00:02:37,650
having only black box access to some

47
00:02:37,650 --> 00:02:40,290
ideal functionality that computes the

48
00:02:40,290 --> 00:02:44,070
this function f and what is usually

49
00:02:44,070 --> 00:02:48,090
important is that this simulator s runs

50
00:02:48,090 --> 00:02:56,910
efficiently okay some well studied

51
00:02:56,910 --> 00:02:59,550
aspect of secure function evaluation is

52
00:02:59,550 --> 00:03:02,670
its round complexity maybe starting with

53
00:03:02,670 --> 00:03:08,150
the work of Goethe and Iran we know that

54
00:03:08,150 --> 00:03:13,230
yeah secure function evaluation is not

55
00:03:13,230 --> 00:03:16,260
possible in two rounds or with two

56
00:03:16,260 --> 00:03:18,350
messages if we require require

57
00:03:18,350 --> 00:03:20,780
efficiently value of efficient

58
00:03:20,780 --> 00:03:24,090
simulation sorry what guy advice and

59
00:03:24,090 --> 00:03:26,670
orange showed that was that zero

60
00:03:26,670 --> 00:03:29,250
knowledge which is an instance of secure

61
00:03:29,250 --> 00:03:32,010
function evaluation is not possible in

62
00:03:32,010 --> 00:03:34,050
two rounds and this is an unconditional

63
00:03:34,050 --> 00:03:38,180
impossibility result we also have

64
00:03:38,180 --> 00:03:43,020
further going results that that show

65
00:03:43,020 --> 00:03:45,330
that black box techniques are

66
00:03:45,330 --> 00:03:47,550
insufficient to go below five round

67
00:03:47,550 --> 00:03:49,800
there's the work of cats on ostrovsky

68
00:03:49,800 --> 00:03:53,370
who show that if we only use black box

69
00:03:53,370 --> 00:03:55,610
techniques we will need five rounds of

70
00:03:55,610 --> 00:04:00,690
interaction but then we know that if we

71
00:04:00,690 --> 00:04:05,130
grant ourselves a setup then we can do

72
00:04:05,130 --> 00:04:08,520
secure function evaluation in two rounds

73
00:04:08,520 --> 00:04:11,760
or with two messages a folklore result

74
00:04:11,760 --> 00:04:14,490
is to use fully homomorphic encryption

75
00:04:14,490 --> 00:04:19,350
and musics for instance this was

76
00:04:19,350 --> 00:04:21,180
mentioned in cracks crack Gentry's

77
00:04:21,180 --> 00:04:27,290
thesis so the motivation of this work is

78
00:04:27,290 --> 00:04:31,020
to look into what level of security can

79
00:04:31,020 --> 00:04:33,720
achieve in two rounds without any setup

80
00:04:33,720 --> 00:04:37,949
ah one possible route is of course to

81
00:04:37,949 --> 00:04:42,210
relax the simulation requirement as we

82
00:04:42,210 --> 00:04:45,750
know that these impossibility results do

83
00:04:45,750 --> 00:04:49,500
not hold for unbounded simulation so all

84
00:04:49,500 --> 00:04:52,259
the those two possibility results that I

85
00:04:52,259 --> 00:04:55,889
mentioned they assume that the simulator

86
00:04:55,889 --> 00:04:58,800
has to be efficient so there might be

87
00:04:58,800 --> 00:05:03,690
hope let me now show you a rather

88
00:05:03,690 --> 00:05:07,800
general blueprint to do secure function

89
00:05:07,800 --> 00:05:10,979
evaluation in two rounds a very

90
00:05:10,979 --> 00:05:14,310
intuitive approach based on fully

91
00:05:14,310 --> 00:05:18,710
homomorphic encryption now say Ellis

92
00:05:18,710 --> 00:05:24,719
where's the point how did I okay here it

93
00:05:24,719 --> 00:05:29,009
is Ellis has an input x1 she generates

94
00:05:29,009 --> 00:05:31,259
public and secret keys for a fully

95
00:05:31,259 --> 00:05:33,599
homomorphic encryption scheme and

96
00:05:33,599 --> 00:05:36,960
contribs her message x1 under this key

97
00:05:36,960 --> 00:05:40,590
and since both the public key and the

98
00:05:40,590 --> 00:05:43,380
ciphertext Bob who can homomorphic Lee

99
00:05:43,380 --> 00:05:48,300
evaluates a circuit see where he hard

100
00:05:48,300 --> 00:05:52,169
wires his own inputs on Alice's inputs

101
00:05:52,169 --> 00:05:58,409
or on Alice's ciphertext C 1 so Bob will

102
00:05:58,409 --> 00:06:01,710
get an output ciphertext C to sense this

103
00:06:01,710 --> 00:06:04,830
back to Alice who can use her secret key

104
00:06:04,830 --> 00:06:09,300
to decrypt this is an intriguingly

105
00:06:09,300 --> 00:06:12,000
simple protocol and of course natural

106
00:06:12,000 --> 00:06:15,469
question is what security does it offer

107
00:06:15,469 --> 00:06:19,020
now clearly uh if we use a fully

108
00:06:19,020 --> 00:06:21,150
homomorphic encryption scheme it should

109
00:06:21,150 --> 00:06:24,930
provide in CP a security so the privacy

110
00:06:24,930 --> 00:06:27,360
of the receivers input input is

111
00:06:27,360 --> 00:06:31,550
guaranteed by CPA security but for

112
00:06:31,550 --> 00:06:34,620
sender security or sender privacy we

113
00:06:34,620 --> 00:06:36,240
need a slightly different property

114
00:06:36,240 --> 00:06:39,719
called circuit privacy which guarantees

115
00:06:39,719 --> 00:06:42,820
that this circuit the ciphertext

116
00:06:42,820 --> 00:06:47,200
see to that the receiver the receiver of

117
00:06:47,200 --> 00:06:50,620
pains and codes no information about the

118
00:06:50,620 --> 00:06:53,080
circuit see and thus the input X to that

119
00:06:53,080 --> 00:06:58,260
Bob used to compute the ciphertext C 2

120
00:06:58,260 --> 00:07:01,600
okay let me elaborate a little bit more

121
00:07:01,600 --> 00:07:07,060
on circuit private fh e so usually we

122
00:07:07,060 --> 00:07:10,960
define circuit privacy via the existence

123
00:07:10,960 --> 00:07:15,100
of some simulator we say that a scheme

124
00:07:15,100 --> 00:07:18,780
has circuit privacy if given a

125
00:07:18,780 --> 00:07:22,530
ciphertext C which has been computed by

126
00:07:22,530 --> 00:07:25,570
homomorphic Lee evaluating a circuit see

127
00:07:25,570 --> 00:07:29,020
on input on some in well-formed input

128
00:07:29,020 --> 00:07:31,870
cipher texts if this is

129
00:07:31,870 --> 00:07:35,980
indistinguishable from a ciphertext C

130
00:07:35,980 --> 00:07:38,380
that has been computed by a simulator

131
00:07:38,380 --> 00:07:41,980
who just got the output of the circuit

132
00:07:41,980 --> 00:07:47,220
see on inputs x1 x2 x3 and so forth and

133
00:07:47,220 --> 00:07:49,210
this should still be indistinguishable

134
00:07:49,210 --> 00:07:55,240
if a distinguisher gets both the cipher

135
00:07:55,240 --> 00:07:57,400
the output ciphertext C the input

136
00:07:57,400 --> 00:08:01,290
ciphertext and public and secret keys

137
00:08:01,290 --> 00:08:06,940
now we are looking into a malicious

138
00:08:06,940 --> 00:08:10,780
security in this talk so semi on a

139
00:08:10,780 --> 00:08:14,170
circuit privacy is not enough therefore

140
00:08:14,170 --> 00:08:16,270
we're looking into malicious circuit

141
00:08:16,270 --> 00:08:18,430
privacy Malaysia circuit privacy

142
00:08:18,430 --> 00:08:22,710
requires an extra algorithm called the

143
00:08:22,710 --> 00:08:28,600
extractor in malicious circus privacy a

144
00:08:28,600 --> 00:08:31,890
distinguisher may actually choose the

145
00:08:31,890 --> 00:08:35,559
both the public key and the input

146
00:08:35,559 --> 00:08:38,200
privacy the input cipher texts that go

147
00:08:38,200 --> 00:08:42,179
into the circuit and thus those

148
00:08:42,179 --> 00:08:44,800
ciphertext texts might not even

149
00:08:44,800 --> 00:08:48,600
correspond to a well-defined message so

150
00:08:48,600 --> 00:08:51,340
we cannot just say they correspond to

151
00:08:51,340 --> 00:08:52,540
some

152
00:08:52,540 --> 00:08:55,899
to some message messages X so what we do

153
00:08:55,899 --> 00:09:00,910
is we define an extractor X that given

154
00:09:00,910 --> 00:09:04,570
those ciphertexts extracts plain text

155
00:09:04,570 --> 00:09:08,230
messages and we can now pass them on to

156
00:09:08,230 --> 00:09:11,589
the circuit see compute on C and pass

157
00:09:11,589 --> 00:09:13,740
the output again to this simulator and

158
00:09:13,740 --> 00:09:17,259
we require that those two distributions

159
00:09:17,259 --> 00:09:20,290
are indistinguishable under adversarial

160
00:09:20,290 --> 00:09:24,670
choice of public key c1 c2 c3 sure if

161
00:09:24,670 --> 00:09:27,130
the public key is maliciously chosen

162
00:09:27,130 --> 00:09:30,279
there might not be a well-defined secret

163
00:09:30,279 --> 00:09:34,779
key but we require that see those two

164
00:09:34,779 --> 00:09:37,170
distributions of C are indistinguishable

165
00:09:37,170 --> 00:09:40,060
given under this malicious choice of PK

166
00:09:40,060 --> 00:09:43,380
the site the input ciphertext C and some

167
00:09:43,380 --> 00:09:49,000
auxiliary input may be and one thing we

168
00:09:49,000 --> 00:09:51,009
immediately noticed is that this

169
00:09:51,009 --> 00:09:54,190
extractor here cannot be efficient right

170
00:09:54,190 --> 00:09:56,019
there is no setup assumptions involved

171
00:09:56,019 --> 00:09:59,709
here so if we if this is extractor was

172
00:09:59,709 --> 00:10:01,930
efficient we could directly use it to

173
00:10:01,930 --> 00:10:05,170
break the NCPA security of the

174
00:10:05,170 --> 00:10:10,209
homomorphic encryption scheme and let me

175
00:10:10,209 --> 00:10:12,910
remark 1 more thing ostrosky Paskin and

176
00:10:12,910 --> 00:10:15,610
paskin who introduced this notion showed

177
00:10:15,610 --> 00:10:19,180
that it can actually be a paint in a

178
00:10:19,180 --> 00:10:22,600
rather simple manner from semi on a

179
00:10:22,600 --> 00:10:24,029
circuit private homomorphic encryption

180
00:10:24,029 --> 00:10:28,149
basically what you do is once you're

181
00:10:28,149 --> 00:10:30,160
finished with a computation of some semi

182
00:10:30,160 --> 00:10:32,829
on a scheme you set some information

183
00:10:32,829 --> 00:10:35,110
theoretic garbled circuit on top that

184
00:10:35,110 --> 00:10:40,480
verifies that this computation has been

185
00:10:40,480 --> 00:10:43,060
done correctly and only then releases

186
00:10:43,060 --> 00:10:51,189
this ciphertext C all right so um when

187
00:10:51,189 --> 00:10:55,300
we use such a maliciously searched

188
00:10:55,300 --> 00:11:01,029
private fhe scheme to do secure function

189
00:11:01,029 --> 00:11:05,730
evaluation what we get is that the fh

190
00:11:05,730 --> 00:11:08,860
directly at security against a semi on a

191
00:11:08,860 --> 00:11:11,260
sender so as long as the sender only

192
00:11:11,260 --> 00:11:16,000
sees the cipher texts or behaves

193
00:11:16,000 --> 00:11:17,709
honestly then you can also see the

194
00:11:17,709 --> 00:11:20,050
output of the receiver everything is

195
00:11:20,050 --> 00:11:25,300
fine and we can simulate however it's

196
00:11:25,300 --> 00:11:27,100
different with security against

197
00:11:27,100 --> 00:11:32,380
malicious receivers right in order the

198
00:11:32,380 --> 00:11:35,320
security experiment for circuit privacy

199
00:11:35,320 --> 00:11:39,100
involves this unbounded extractor which

200
00:11:39,100 --> 00:11:41,649
means that if this circuit see that we

201
00:11:41,649 --> 00:11:45,040
want to compute comes with some security

202
00:11:45,040 --> 00:11:47,500
some computational security guarantee of

203
00:11:47,500 --> 00:11:50,079
its own we sort of sort of in a bad

204
00:11:50,079 --> 00:11:54,790
place so we can directly use this this

205
00:11:54,790 --> 00:11:59,110
protocol that I showed based on circuit

206
00:11:59,110 --> 00:12:02,500
private fh e to compute functionalities

207
00:12:02,500 --> 00:12:05,950
that have a sort of some information

208
00:12:05,950 --> 00:12:08,130
theoretic flavor that don't have any

209
00:12:08,130 --> 00:12:10,269
computational hardness notion attached

210
00:12:10,269 --> 00:12:15,430
to them as i said simulation in this

211
00:12:15,430 --> 00:12:18,850
case will turn any adversaries sorry

212
00:12:18,850 --> 00:12:20,680
also an efficient adversary into an

213
00:12:20,680 --> 00:12:23,290
unbounded adversary uh this will

214
00:12:23,290 --> 00:12:28,990
prohibit further composition ok but but

215
00:12:28,990 --> 00:12:31,600
then the question is what if we want to

216
00:12:31,600 --> 00:12:34,560
use this approach on some cryptographic

217
00:12:34,560 --> 00:12:38,649
functionality where we cannot hope for

218
00:12:38,649 --> 00:12:40,329
anything better than computational

219
00:12:40,329 --> 00:12:44,339
security this is where our work starts

220
00:12:44,339 --> 00:12:49,060
um we will first provide some

221
00:12:49,060 --> 00:12:52,350
well-defined security notion for

222
00:12:52,350 --> 00:12:55,029
cryptographic primitives in this setting

223
00:12:55,029 --> 00:12:57,329
so what happens if we take a

224
00:12:57,329 --> 00:13:00,399
cryptographic primitive and run this

225
00:13:00,399 --> 00:13:07,420
protocol on it who will provide a new

226
00:13:07,420 --> 00:13:11,680
secure security notion called SME with

227
00:13:11,680 --> 00:13:14,829
induced game based security for

228
00:13:14,829 --> 00:13:17,050
cryptographic primitives and this

229
00:13:17,050 --> 00:13:21,640
hold against malicious receivers and in

230
00:13:21,640 --> 00:13:25,000
our paper will also show that having a

231
00:13:25,000 --> 00:13:27,730
malicious party on one side is the best

232
00:13:27,730 --> 00:13:31,690
we can hope for since there's since

233
00:13:31,690 --> 00:13:35,079
otherwise we could overcome some some

234
00:13:35,079 --> 00:13:37,649
strong black box impossibility results

235
00:13:37,649 --> 00:13:43,089
and one crucial point will be that the

236
00:13:43,089 --> 00:13:45,850
underlying primitive that we're looking

237
00:13:45,850 --> 00:13:48,700
at comes with a certain kind of hardness

238
00:13:48,700 --> 00:13:53,649
reduction on its own so I'll show you a

239
00:13:53,649 --> 00:13:57,070
novel novel way of compute composing

240
00:13:57,070 --> 00:14:00,209
security proves in a non blackbox matter

241
00:14:00,209 --> 00:14:06,450
that allows us to compile the security

242
00:14:06,450 --> 00:14:09,100
reduction of some primitive into a

243
00:14:09,100 --> 00:14:13,300
security reduction for the for our

244
00:14:13,300 --> 00:14:19,329
output protocol set and the main idea of

245
00:14:19,329 --> 00:14:23,020
this technique is to take a reduction

246
00:14:23,020 --> 00:14:26,560
for a primitive and evaluate some part

247
00:14:26,560 --> 00:14:29,860
of this reduction inside a homomorphic

248
00:14:29,860 --> 00:14:32,320
encryption scheme will see that in a

249
00:14:32,320 --> 00:14:36,339
moment but first I'll define this notion

250
00:14:36,339 --> 00:14:41,260
of induced game based security think we

251
00:14:41,260 --> 00:14:43,740
have some cryptographic primitive F

252
00:14:43,740 --> 00:14:47,529
think of maybe again digital signatures

253
00:14:47,529 --> 00:14:50,829
they come with some security experiments

254
00:14:50,829 --> 00:14:54,970
say the EU f cma experiment where the

255
00:14:54,970 --> 00:14:57,899
adversary is provided access to some

256
00:14:57,899 --> 00:15:01,930
signature oracle can query messages and

257
00:15:01,930 --> 00:15:08,740
receives signatures on that and induced

258
00:15:08,740 --> 00:15:13,060
game based security is basically defined

259
00:15:13,060 --> 00:15:16,180
via a similar experiment we don't we

260
00:15:16,180 --> 00:15:18,880
don't change anything on this side but

261
00:15:18,880 --> 00:15:21,760
now instead of giving the adversary

262
00:15:21,760 --> 00:15:25,959
access to the primitive directly the

263
00:15:25,959 --> 00:15:28,589
primitive is evaluated underneath a

264
00:15:28,589 --> 00:15:30,430
homomorphic encryption scheme

265
00:15:30,430 --> 00:15:35,230
or any other sfe protocol you may think

266
00:15:35,230 --> 00:15:37,540
about but for simplicity let's stick

267
00:15:37,540 --> 00:15:39,910
with homomorphic encryption so instead

268
00:15:39,910 --> 00:15:42,880
of having direct access to f2f can

269
00:15:42,880 --> 00:15:45,279
choose public key and encrypt and

270
00:15:45,279 --> 00:15:48,390
encryptions sent this here and the

271
00:15:48,390 --> 00:15:53,110
primitive f is evaluated homomorphic lee

272
00:15:53,110 --> 00:15:58,959
so a gets an output ciphertext and as I

273
00:15:58,959 --> 00:16:02,830
said this homomorphic experiment is

274
00:16:02,830 --> 00:16:07,300
really identical to to the original

275
00:16:07,300 --> 00:16:09,630
experiment the only change that we do is

276
00:16:09,630 --> 00:16:15,670
in a's access to this primitive all

277
00:16:15,670 --> 00:16:19,300
right um let's start out with a naive

278
00:16:19,300 --> 00:16:23,589
try to base the security of this

279
00:16:23,589 --> 00:16:27,660
homomorphic experiment on the underlying

280
00:16:27,660 --> 00:16:31,209
security of the of the primitive that we

281
00:16:31,209 --> 00:16:33,540
use right so now we want to show that

282
00:16:33,540 --> 00:16:36,640
such an adversary here just has

283
00:16:36,640 --> 00:16:40,570
negligible advantage in winning such an

284
00:16:40,570 --> 00:16:43,900
experiment so we're building on circuit

285
00:16:43,900 --> 00:16:46,959
private homomorphic encryption so what

286
00:16:46,959 --> 00:16:50,290
we want to do is just plug in this

287
00:16:50,290 --> 00:16:53,470
notion of what circuit privacy provides

288
00:16:53,470 --> 00:16:56,170
us namely we replace this evaluation

289
00:16:56,170 --> 00:17:01,510
that we had by first extracting a's

290
00:17:01,510 --> 00:17:05,530
input to this primitive f and then once

291
00:17:05,530 --> 00:17:09,339
f is computed on on this will wrap the

292
00:17:09,339 --> 00:17:12,730
output of f into a cipher text via this

293
00:17:12,730 --> 00:17:16,890
simulator so what I can try to do now

294
00:17:16,890 --> 00:17:19,599
it's just regroup machines that take

295
00:17:19,599 --> 00:17:23,319
both extractor and simulator and pull

296
00:17:23,319 --> 00:17:26,199
them into this adversary a and I

297
00:17:26,199 --> 00:17:28,540
actually have an adversary that plays

298
00:17:28,540 --> 00:17:31,270
against the security experiment of this

299
00:17:31,270 --> 00:17:36,520
primitive only problem is this machine X

300
00:17:36,520 --> 00:17:39,580
is unbounded so we end up with an

301
00:17:39,580 --> 00:17:42,700
unbounded adversary and

302
00:17:42,700 --> 00:17:45,340
this setting cryptographic primitives

303
00:17:45,340 --> 00:17:47,860
usually don't provide any security

304
00:17:47,860 --> 00:17:52,840
guarantee so to get around this

305
00:17:52,840 --> 00:17:56,950
conundrum what we gonna do is we'll look

306
00:17:56,950 --> 00:17:59,200
into a security reduction for our

307
00:17:59,200 --> 00:18:02,620
primitive and we need a for our

308
00:18:02,620 --> 00:18:04,660
technique work we'll need a certain kind

309
00:18:04,660 --> 00:18:06,550
of security reduction we call this

310
00:18:06,550 --> 00:18:08,610
oblivious blackbox reduction now the

311
00:18:08,610 --> 00:18:11,200
reduction should are should be black box

312
00:18:11,200 --> 00:18:14,830
meaning it only makes black box access

313
00:18:14,830 --> 00:18:17,380
to the adversary a and it should be

314
00:18:17,380 --> 00:18:21,570
oblivious in some sense that now the

315
00:18:21,570 --> 00:18:26,070
Oracle to the primitive that a requires

316
00:18:26,070 --> 00:18:31,350
are should not be able to peek into ace

317
00:18:31,350 --> 00:18:35,710
query queries so the reduction can

318
00:18:35,710 --> 00:18:39,190
basically not memorize what it has seen

319
00:18:39,190 --> 00:18:43,210
about ace queries into this primitive

320
00:18:43,210 --> 00:18:49,000
and once we have such a by the way let

321
00:18:49,000 --> 00:18:52,150
me know let me remark that this kind of

322
00:18:52,150 --> 00:18:55,020
reduction is actually quite common

323
00:18:55,020 --> 00:19:00,520
there's many reductions basing security

324
00:19:00,520 --> 00:19:05,680
of adaptive primitives on to security of

325
00:19:05,680 --> 00:19:07,750
their selective version so this is not

326
00:19:07,750 --> 00:19:11,050
something non-standard but let's equip

327
00:19:11,050 --> 00:19:13,350
ourselves with something like this and

328
00:19:13,350 --> 00:19:16,470
try to finish this prove now so the

329
00:19:16,470 --> 00:19:20,890
first two steps are actually quite

330
00:19:20,890 --> 00:19:23,530
similar we're using circuit privacy and

331
00:19:23,530 --> 00:19:27,700
now we regroup our machines but now we

332
00:19:27,700 --> 00:19:31,570
we still have this unbounded adversary a

333
00:19:31,570 --> 00:19:34,210
here but what I'm going to do now is

334
00:19:34,210 --> 00:19:37,990
I'll take this adversary a prime here

335
00:19:37,990 --> 00:19:41,980
and I'll plug it into this reduction

336
00:19:41,980 --> 00:19:44,950
this oblivious reduction art why should

337
00:19:44,950 --> 00:19:48,160
this this even work now the reason is I

338
00:19:48,160 --> 00:19:50,740
required are to be a black box reduction

339
00:19:50,740 --> 00:19:56,050
and black box reductions don't care how

340
00:19:56,050 --> 00:19:57,850
how some adversary break some primitive

341
00:19:57,850 --> 00:20:00,760
it can use some super Poli powers do

342
00:20:00,760 --> 00:20:04,000
whatever it only cares that the

343
00:20:04,000 --> 00:20:06,910
adversary has some advantage in breaking

344
00:20:06,910 --> 00:20:10,720
this primitive so since the reduction r

345
00:20:10,720 --> 00:20:14,070
is black box it should still work with

346
00:20:14,070 --> 00:20:16,990
some unbounded adversary a prime and

347
00:20:16,990 --> 00:20:18,600
what I'm going to do now is I'm

348
00:20:18,600 --> 00:20:22,540
basically reversing the circuit privacy

349
00:20:22,540 --> 00:20:26,290
so first I regrow regroup both the

350
00:20:26,290 --> 00:20:29,490
extractor and simulator into this Oracle

351
00:20:29,490 --> 00:20:33,520
thereby ending up with an inefficient

352
00:20:33,520 --> 00:20:36,190
reduction but now i can use circuit

353
00:20:36,190 --> 00:20:39,790
privacy again to replace this with an

354
00:20:39,790 --> 00:20:43,840
efficient implementation of an home of a

355
00:20:43,840 --> 00:20:47,470
homomorphic evaluated Oracle right so

356
00:20:47,470 --> 00:20:49,630
even though this Oracle might do

357
00:20:49,630 --> 00:20:51,550
something completely different than the

358
00:20:51,550 --> 00:20:55,420
original primitive F I have established

359
00:20:55,420 --> 00:20:59,580
that this reduction are with a

360
00:20:59,580 --> 00:21:04,750
homomorphic Lee evaluated Oracle can

361
00:21:04,750 --> 00:21:08,400
actually break some heart problem p and

362
00:21:08,400 --> 00:21:10,690
in the remaining time let me quickly

363
00:21:10,690 --> 00:21:15,600
talk about two applications of this

364
00:21:15,600 --> 00:21:19,330
methods that the first one is a rather

365
00:21:19,330 --> 00:21:22,090
generic construction of blind signature

366
00:21:22,090 --> 00:21:29,620
schemes we can we can take any signature

367
00:21:29,620 --> 00:21:32,440
scheme within with a non adaptive

368
00:21:32,440 --> 00:21:34,900
security reduction for instance based on

369
00:21:34,900 --> 00:21:38,800
chameleon huffing and the requirements

370
00:21:38,800 --> 00:21:40,390
that we have for the homomorphic

371
00:21:40,390 --> 00:21:42,790
encryption are actually quite weak so we

372
00:21:42,790 --> 00:21:45,430
don't need compactness in this case we

373
00:21:45,430 --> 00:21:48,940
can start with a non compact homomorphic

374
00:21:48,940 --> 00:21:51,070
encryption based on oblivious transfer

375
00:21:51,070 --> 00:21:53,700
and garbled circuits another

376
00:21:53,700 --> 00:21:57,420
applications application is to message

377
00:21:57,420 --> 00:21:59,860
oblivious pseudo random functions and

378
00:21:59,860 --> 00:22:02,380
here are the primitive we start with our

379
00:22:02,380 --> 00:22:05,050
pseudo random functions with oblivious

380
00:22:05,050 --> 00:22:08,410
reductions and this can actually be

381
00:22:08,410 --> 00:22:12,010
obtained from the now or angled PRF but

382
00:22:12,010 --> 00:22:15,250
in this case we actually do need compact

383
00:22:15,250 --> 00:22:18,880
fhe so let me wrap up real quick what

384
00:22:18,880 --> 00:22:22,300
I've shown you is that certain security

385
00:22:22,300 --> 00:22:25,260
reductions can be used in a non-trivial

386
00:22:25,260 --> 00:22:30,720
non blackbox way for composition and

387
00:22:30,720 --> 00:22:35,230
this allows us to circumvent certain

388
00:22:35,230 --> 00:22:38,590
barriers in to message secure

389
00:22:38,590 --> 00:22:43,649
computation thanks for your attention

