1
00:00:04,150 --> 00:00:09,590
okay thank you - hello everybody I'm

2
00:00:09,590 --> 00:00:14,269
gonna talk today about Terim a protocol

3
00:00:14,269 --> 00:00:16,570
for oblivious RAM in two rounds

4
00:00:16,570 --> 00:00:22,519
johnross on demand payment so I'm gonna

5
00:00:22,519 --> 00:00:25,489
start with the motivation so the main

6
00:00:25,489 --> 00:00:27,230
motivation forum is private cloud

7
00:00:27,230 --> 00:00:30,319
storage and so the main problem have

8
00:00:30,319 --> 00:00:32,630
there is that we like to store our files

9
00:00:32,630 --> 00:00:34,910
in the cloud without revealing any

10
00:00:34,910 --> 00:00:38,329
information right so okay that's easy so

11
00:00:38,329 --> 00:00:40,370
on solution we can have as we can

12
00:00:40,370 --> 00:00:42,199
encrypt our files with a CPA secure

13
00:00:42,199 --> 00:00:45,320
scheme so that protects the content of

14
00:00:45,320 --> 00:00:47,149
the file but unfortunately it's not

15
00:00:47,149 --> 00:00:53,120
enough we want to achieve more ambitious

16
00:00:53,120 --> 00:00:56,030
goals so we want to if we observe which

17
00:00:56,030 --> 00:00:57,890
files are being accessed this will

18
00:00:57,890 --> 00:00:59,719
reveal anything about the corners on the

19
00:00:59,719 --> 00:01:03,109
file okay so we like to hide the access

20
00:01:03,109 --> 00:01:04,959
pattern where we're accessing the files

21
00:01:04,959 --> 00:01:07,940
okay and this is what oblivious Ram

22
00:01:07,940 --> 00:01:10,640
gives you okay so oblivious Ram

23
00:01:10,640 --> 00:01:12,260
basically is a way to access a

24
00:01:12,260 --> 00:01:15,230
collection of files in a way that the

25
00:01:15,230 --> 00:01:21,440
access pattern is not revealed okay so

26
00:01:21,440 --> 00:01:23,900
let me give an informal definition of

27
00:01:23,900 --> 00:01:26,660
oblivious Ram so we have an array of n

28
00:01:26,660 --> 00:01:31,280
entries and so what I want to have now

29
00:01:31,280 --> 00:01:33,590
is want to access one a tree out of this

30
00:01:33,590 --> 00:01:36,950
array access X okay so I'm gonna use

31
00:01:36,950 --> 00:01:39,260
this Orem protocol to access this entry

32
00:01:39,260 --> 00:01:41,990
X so this Orion protocol is going to

33
00:01:41,990 --> 00:01:44,890
start accessing a bunch of entries and

34
00:01:44,890 --> 00:01:49,040
then it's gonna output a of X okay so

35
00:01:49,040 --> 00:01:52,610
this is the real world so in the ideal

36
00:01:52,610 --> 00:01:55,240
world we have again we want to access X

37
00:01:55,240 --> 00:01:57,740
but we don't give this X to the

38
00:01:57,740 --> 00:02:00,140
simulator with just simulator only gets

39
00:02:00,140 --> 00:02:03,020
to see like the size of the array right

40
00:02:03,020 --> 00:02:06,010
and then he gets to perform some

41
00:02:06,010 --> 00:02:08,780
accesses in this in this array and it

42
00:02:08,780 --> 00:02:12,620
outputs something so now if adversary

43
00:02:12,620 --> 00:02:15,830
observes just this axis and

44
00:02:15,830 --> 00:02:17,870
made a brother simulator he cool she

45
00:02:17,870 --> 00:02:20,150
soon be able to distinguish which world

46
00:02:20,150 --> 00:02:23,540
he's in okay so this and from our

47
00:02:23,540 --> 00:02:31,400
definition of forum so some something

48
00:02:31,400 --> 00:02:35,600
about existing work so before so a knave

49
00:02:35,600 --> 00:02:37,160
way to solve the problems just access

50
00:02:37,160 --> 00:02:39,020
everything so this is basically to

51
00:02:39,020 --> 00:02:40,670
access one blog you need to access like

52
00:02:40,670 --> 00:02:42,050
a linear number of log so this is not

53
00:02:42,050 --> 00:02:42,530
good

54
00:02:42,530 --> 00:02:47,870
so in 1990 by the work of Rafael

55
00:02:47,870 --> 00:02:50,660
Ostrovsky we saw that we can do that in

56
00:02:50,660 --> 00:02:53,330
logarithmic overhead so if you access

57
00:02:53,330 --> 00:02:55,400
like to access obliviously one block you

58
00:02:55,400 --> 00:02:57,620
just need to access a point logarithmic

59
00:02:57,620 --> 00:02:59,980
number of blocks which was pretty cool

60
00:02:59,980 --> 00:03:03,080
that created a sequence of a lot of

61
00:03:03,080 --> 00:03:05,510
works based on this hierarchical

62
00:03:05,510 --> 00:03:08,660
framework I was introduced by Bharathi

63
00:03:08,660 --> 00:03:13,299
and there's a lot of papers since then

64
00:03:13,840 --> 00:03:16,340
there was another framework that was

65
00:03:16,340 --> 00:03:19,340
introduced in 2011 in Asia Creed by

66
00:03:19,340 --> 00:03:20,959
citizens the fan of anime which is a

67
00:03:20,959 --> 00:03:26,030
tree based framework okay and this solid

68
00:03:26,030 --> 00:03:27,530
is phenomenal different than the

69
00:03:27,530 --> 00:03:30,530
hierarchical one and again there were a

70
00:03:30,530 --> 00:03:37,160
lot of papers since then so three based

71
00:03:37,160 --> 00:03:39,440
approaches for oblivious from seem to be

72
00:03:39,440 --> 00:03:41,140
leading to more practical

73
00:03:41,140 --> 00:03:45,110
implementations so in particular a with

74
00:03:45,110 --> 00:03:47,030
a three based approach with Orem there's

75
00:03:47,030 --> 00:03:48,500
no need for the amortization of

76
00:03:48,500 --> 00:03:51,770
worst-case cost so everything is poor

77
00:03:51,770 --> 00:03:57,290
logarithmic in the worst case you can

78
00:03:57,290 --> 00:03:59,300
observe up to 100 X speed-up over here

79
00:03:59,300 --> 00:04:02,810
our process and there was actually shown

80
00:04:02,810 --> 00:04:04,070
that you can also implement it in

81
00:04:04,070 --> 00:04:08,209
hardware and they like secure oblivious

82
00:04:08,209 --> 00:04:10,370
and professional was was being built

83
00:04:10,370 --> 00:04:14,060
called phantom okay so so in essence I

84
00:04:14,060 --> 00:04:16,100
mean since that the three based

85
00:04:16,100 --> 00:04:17,720
framework is more practical than here

86
00:04:17,720 --> 00:04:24,520
article on okay so this work is about

87
00:04:24,520 --> 00:04:29,240
non interactive tree based or on okay

88
00:04:29,240 --> 00:04:34,910
so the problem is that most oblivious

89
00:04:34,910 --> 00:04:36,980
Rams require interaction and typically a

90
00:04:36,980 --> 00:04:40,190
pulley logarithmic number of rounds in

91
00:04:40,190 --> 00:04:42,560
particular when you do an access you're

92
00:04:42,560 --> 00:04:46,250
required to download decrypt do some

93
00:04:46,250 --> 00:04:48,889
computation early encrypts upload a

94
00:04:48,889 --> 00:04:51,229
number of times okay so this creates

95
00:04:51,229 --> 00:04:52,900
naturally this creates some interaction

96
00:04:52,900 --> 00:04:58,130
okay it's not hours of the first one

97
00:04:58,130 --> 00:05:00,500
that does not interactive Orem in

98
00:05:00,500 --> 00:05:03,710
particular it has been shown how you can

99
00:05:03,710 --> 00:05:06,470
turn hierarchical or arms to non

100
00:05:06,470 --> 00:05:09,229
interactive by Williamson in 2012 and by

101
00:05:09,229 --> 00:05:12,500
you know stroke in 2013 since they

102
00:05:12,500 --> 00:05:16,010
follow the here iframe the costs are

103
00:05:16,010 --> 00:05:17,840
linear in the worst case but you can be

104
00:05:17,840 --> 00:05:19,070
amortize them and make them pull

105
00:05:19,070 --> 00:05:23,650
logarithmic in the in the worst case and

106
00:05:23,650 --> 00:05:27,160
you can also have no interaction by just

107
00:05:27,160 --> 00:05:31,070
doing garbled around directly but this

108
00:05:31,070 --> 00:05:36,229
will have a big cost okay so so

109
00:05:36,229 --> 00:05:38,000
motivated by the fact that three based

110
00:05:38,000 --> 00:05:39,470
or am seem to be more practical and in

111
00:05:39,470 --> 00:05:41,150
her columns we want to build a

112
00:05:41,150 --> 00:05:44,479
non-interactive three based Orem our

113
00:05:44,479 --> 00:05:48,650
worst-case costs are poor logarithmic so

114
00:05:48,650 --> 00:05:50,810
there's no need for the amortization and

115
00:05:50,810 --> 00:05:54,550
we use the path Orem design

116
00:05:54,729 --> 00:05:58,669
okay so subsequent to our work that was

117
00:05:58,669 --> 00:06:00,770
also a non interactive or I'm based on

118
00:06:00,770 --> 00:06:03,950
the tree based framework bucket Orem the

119
00:06:03,950 --> 00:06:05,360
stability cause were similar and are

120
00:06:05,360 --> 00:06:08,740
something is either is a bit similar

121
00:06:09,669 --> 00:06:15,229
okay so so let me describe our approach

122
00:06:15,229 --> 00:06:17,810
now and I will start with some path or

123
00:06:17,810 --> 00:06:21,919
am basics so the goal is that we have

124
00:06:21,919 --> 00:06:24,349
here eight blocks okay and we want to

125
00:06:24,349 --> 00:06:27,139
academically viously the way we're going

126
00:06:27,139 --> 00:06:28,580
to do it is we're going to distribute it

127
00:06:28,580 --> 00:06:31,970
at random in a tree of eight lives okay

128
00:06:31,970 --> 00:06:33,950
so we just throw these blocks in this

129
00:06:33,950 --> 00:06:37,400
tree they can go into any node okay and

130
00:06:37,400 --> 00:06:40,750
now we're gonna keep a position map

131
00:06:40,750 --> 00:06:43,090
where it's going to tell us look if you

132
00:06:43,090 --> 00:06:45,699
to acess block one you should start from

133
00:06:45,699 --> 00:06:47,560
leaf three and go up the route and

134
00:06:47,560 --> 00:06:49,449
eventually out on this path you're going

135
00:06:49,449 --> 00:06:52,030
to find this block okay so you want

136
00:06:52,030 --> 00:06:55,270
access block for you so start from leaf

137
00:06:55,270 --> 00:06:57,729
eight go up and you're gonna find this

138
00:06:57,729 --> 00:06:59,560
block okay so this is what the position

139
00:06:59,560 --> 00:07:06,220
map tells you okay so so if you want to

140
00:07:06,220 --> 00:07:08,800
read for example block for now what's

141
00:07:08,800 --> 00:07:10,419
gonna happen is you're gonna read this

142
00:07:10,419 --> 00:07:12,460
path now you're going to download this

143
00:07:12,460 --> 00:07:14,770
path right locally you're going to

144
00:07:14,770 --> 00:07:17,200
decrypt it and you can read the

145
00:07:17,200 --> 00:07:19,720
information now the problem is when you

146
00:07:19,720 --> 00:07:21,700
want to write it back you need to make

147
00:07:21,700 --> 00:07:25,180
sure that you change you change the

148
00:07:25,180 --> 00:07:28,060
position of block four because you don't

149
00:07:28,060 --> 00:07:30,220
want to read the same position when you

150
00:07:30,220 --> 00:07:31,840
read block four again this will break

151
00:07:31,840 --> 00:07:35,110
security so what you do is you turn you

152
00:07:35,110 --> 00:07:37,510
pick another atom number and you assign

153
00:07:37,510 --> 00:07:40,510
block four to leave three okay and you

154
00:07:40,510 --> 00:07:42,880
rewrite this path again so now block

155
00:07:42,880 --> 00:07:44,650
four went up to the root and it can be

156
00:07:44,650 --> 00:07:47,590
accessed by just going up from firmly

157
00:07:47,590 --> 00:07:51,160
three I'm just talking about existing

158
00:07:51,160 --> 00:07:54,250
path or I'm not just okay so that's how

159
00:07:54,250 --> 00:07:56,800
it works I mean this is a very simple

160
00:07:56,800 --> 00:08:00,160
version of it now so there's a notion of

161
00:08:00,160 --> 00:08:02,889
recursion so this is linear space so it

162
00:08:02,889 --> 00:08:04,150
could go up like this but then we're

163
00:08:04,150 --> 00:08:06,520
gonna have to store linear space so you

164
00:08:06,520 --> 00:08:09,940
have to actually do a norm on the

165
00:08:09,940 --> 00:08:12,849
position map so the way to do that is to

166
00:08:12,849 --> 00:08:14,950
view this position map as an array of

167
00:08:14,950 --> 00:08:18,520
four entries instead of eight okay and

168
00:08:18,520 --> 00:08:20,110
now you're going to put that in a

169
00:08:20,110 --> 00:08:24,490
different aura okay so you're gonna this

170
00:08:24,490 --> 00:08:26,740
requires a position map of four entries

171
00:08:26,740 --> 00:08:29,229
itself so you store this data the actual

172
00:08:29,229 --> 00:08:31,479
data or another tree and now you have

173
00:08:31,479 --> 00:08:37,719
another position lab okay so okay so now

174
00:08:37,719 --> 00:08:39,520
let's see how it works if you want to

175
00:08:39,520 --> 00:08:41,740
read block seven you're gonna go to the

176
00:08:41,740 --> 00:08:43,719
first to the position map you have now

177
00:08:43,719 --> 00:08:47,529
and you say okay so seven will fall into

178
00:08:47,529 --> 00:08:51,010
the fourth bucket so I'm gonna be

179
00:08:51,010 --> 00:08:52,660
accessing the fourth leaf of the first

180
00:08:52,660 --> 00:08:55,300
three okay so you go there okay so you

181
00:08:55,300 --> 00:08:56,209
access this

182
00:08:56,209 --> 00:08:59,629
for cliff you start from the root going

183
00:08:59,629 --> 00:09:04,249
down okay you access the fourth leaf and

184
00:09:04,249 --> 00:09:06,619
all of a sudden at the second level you

185
00:09:06,619 --> 00:09:09,399
find the entry that corresponds to seven

186
00:09:09,399 --> 00:09:13,699
okay so you pick that entry so this is

187
00:09:13,699 --> 00:09:17,209
the entry here and this has two values

188
00:09:17,209 --> 00:09:20,209
the left value is from seven and the

189
00:09:20,209 --> 00:09:23,119
right value is for eight okay so you're

190
00:09:23,119 --> 00:09:24,769
gonna that means that you need to access

191
00:09:24,769 --> 00:09:28,519
leaf six in the other tree so that's how

192
00:09:28,519 --> 00:09:32,179
you continue the execution so you go

193
00:09:32,179 --> 00:09:37,879
down this other tree and you're

194
00:09:37,879 --> 00:09:41,329
guaranteed to find actual the value for

195
00:09:41,329 --> 00:09:47,449
leaf seven so this is G okay so you have

196
00:09:47,449 --> 00:09:49,519
a position map for the first three and

197
00:09:49,519 --> 00:09:52,910
the second and the this three stores the

198
00:09:52,910 --> 00:09:55,779
position map of the second tree okay

199
00:09:55,779 --> 00:09:57,769
so now what we observe now the

200
00:09:57,769 --> 00:09:59,660
interaction comes on the following thing

201
00:09:59,660 --> 00:10:01,610
right so you need to access the first

202
00:10:01,610 --> 00:10:04,749
three decrypt the information figure out

203
00:10:04,749 --> 00:10:07,519
what is the next leaf of the other tree

204
00:10:07,519 --> 00:10:09,439
right and then access the other tree

205
00:10:09,439 --> 00:10:14,290
okay so so that creates the interaction

206
00:10:14,290 --> 00:10:18,410
so how can we avoid it okay so let's

207
00:10:18,410 --> 00:10:20,319
abstract the problem out a little bit

208
00:10:20,319 --> 00:10:24,860
and let's consider like a like a morass

209
00:10:24,860 --> 00:10:26,240
the problem that that captures what I

210
00:10:26,240 --> 00:10:28,189
talked about before so the actual

211
00:10:28,189 --> 00:10:29,869
problem is imagine have a sequence of

212
00:10:29,869 --> 00:10:33,939
trees of binary trees okay and then

213
00:10:33,939 --> 00:10:37,999
every node of this binary tree is some

214
00:10:37,999 --> 00:10:40,939
computation right so it's some logical

215
00:10:40,939 --> 00:10:42,559
it stores some data and it has some

216
00:10:42,559 --> 00:10:45,199
logic take some input and it has some

217
00:10:45,199 --> 00:10:50,480
output okay so so now what you want to

218
00:10:50,480 --> 00:10:52,670
do is you have an encrypted input that

219
00:10:52,670 --> 00:10:55,069
you give it you give it at the first

220
00:10:55,069 --> 00:10:59,449
route okay and now you also give it a

221
00:10:59,449 --> 00:11:01,819
path a path number saying that okay you

222
00:11:01,819 --> 00:11:05,629
should go down the second path okay so

223
00:11:05,629 --> 00:11:08,480
you execute you execute the computation

224
00:11:08,480 --> 00:11:10,410
here you provide another out

225
00:11:10,410 --> 00:11:13,500
for this note here and then as you go

226
00:11:13,500 --> 00:11:16,019
down this path you guaranteed to output

227
00:11:16,019 --> 00:11:18,509
the path to be followed in the next

228
00:11:18,509 --> 00:11:22,829
three okay so the computation along this

229
00:11:22,829 --> 00:11:24,899
path will give you the path to follow in

230
00:11:24,899 --> 00:11:27,209
the next three and then the computation

231
00:11:27,209 --> 00:11:29,910
along this path will give you the path

232
00:11:29,910 --> 00:11:31,709
to following the next three and the

233
00:11:31,709 --> 00:11:33,329
computation along this path will give

234
00:11:33,329 --> 00:11:34,470
you the path to follow the next three

235
00:11:34,470 --> 00:11:36,449
and eventually by following the last

236
00:11:36,449 --> 00:11:38,519
path the output of the computation will

237
00:11:38,519 --> 00:11:43,529
be spit out by the last leaf okay so

238
00:11:43,529 --> 00:11:45,360
this is basically what's happening

239
00:11:45,360 --> 00:11:48,060
what's happening with tree around now

240
00:11:48,060 --> 00:11:50,459
with tea or on the with path around the

241
00:11:50,459 --> 00:11:52,949
data and logic is basically you know you

242
00:11:52,949 --> 00:11:55,050
just trying to check if the sink ribbit

243
00:11:55,050 --> 00:11:57,899
input matches the data that are stored

244
00:11:57,899 --> 00:12:00,720
in its node and once it matches there

245
00:12:00,720 --> 00:12:03,029
you can figure out the path to follow at

246
00:12:03,029 --> 00:12:07,680
the next three okay so we want to solve

247
00:12:07,680 --> 00:12:10,379
this problem without interaction right

248
00:12:10,379 --> 00:12:12,810
now this requires interaction because we

249
00:12:12,810 --> 00:12:16,290
have to download the paths decrypt run

250
00:12:16,290 --> 00:12:18,750
the computation ourselves and then

251
00:12:18,750 --> 00:12:20,939
continue the computation from the next

252
00:12:20,939 --> 00:12:25,800
three okay and we only want to leak the

253
00:12:25,800 --> 00:12:27,930
public inputs to one and six which are

254
00:12:27,930 --> 00:12:29,939
the paths but are being accesses we

255
00:12:29,939 --> 00:12:31,829
don't leak any information about the in

256
00:12:31,829 --> 00:12:33,329
credit input we give in the beginning

257
00:12:33,329 --> 00:12:34,980
you can think of physically disabled as

258
00:12:34,980 --> 00:12:37,079
the original index we would like to

259
00:12:37,079 --> 00:12:42,779
access okay so this is so if we solve

260
00:12:42,779 --> 00:12:44,670
this problem we can solve who can do

261
00:12:44,670 --> 00:12:48,300
non-interactive three ora path Aram okay

262
00:12:48,300 --> 00:12:50,250
so let's try to see how can solve let's

263
00:12:50,250 --> 00:12:52,230
try fully homomorphic encryption it's

264
00:12:52,230 --> 00:12:54,689
very powerful so what we can do is we

265
00:12:54,689 --> 00:12:57,120
can encrypt the input with a fully

266
00:12:57,120 --> 00:12:59,130
homomorphic encryption scheme right and

267
00:12:59,130 --> 00:13:02,430
then we have the public key input which

268
00:13:02,430 --> 00:13:04,290
is the the path we need to go down

269
00:13:04,290 --> 00:13:07,470
you run the computation here with a

270
00:13:07,470 --> 00:13:09,209
fully homomorphic encryption input it it

271
00:13:09,209 --> 00:13:10,889
gives you an output you ran it again

272
00:13:10,889 --> 00:13:12,930
here but the output of the fully

273
00:13:12,930 --> 00:13:14,610
homomorphic encryption scheme is always

274
00:13:14,610 --> 00:13:17,970
encrypted right so we expect that this

275
00:13:17,970 --> 00:13:21,089
computation will give you the next path

276
00:13:21,089 --> 00:13:24,000
to to access so I guess it's going

277
00:13:24,000 --> 00:13:25,140
give it to you but it's gonna be

278
00:13:25,140 --> 00:13:27,900
encrypted so it's useless so the server

279
00:13:27,900 --> 00:13:29,610
cannot use it right because fully

280
00:13:29,610 --> 00:13:31,350
homomorphic encryption will output the

281
00:13:31,350 --> 00:13:33,660
next path to be accessed encrypted so

282
00:13:33,660 --> 00:13:36,000
again to continue you have to send it

283
00:13:36,000 --> 00:13:37,890
back decrypt it and say ok continue the

284
00:13:37,890 --> 00:13:41,070
execution from this path so full how

285
00:13:41,070 --> 00:13:48,780
much encryption will not work ok so so

286
00:13:48,780 --> 00:13:50,460
one way to do it is remember who had

287
00:13:50,460 --> 00:13:53,130
this this computation here we have this

288
00:13:53,130 --> 00:13:55,770
computation here so one way to do it is

289
00:13:55,770 --> 00:13:58,410
we're gonna start computing garbled

290
00:13:58,410 --> 00:14:00,420
circuits for this computation on every

291
00:14:00,420 --> 00:14:01,050
node of the tree

292
00:14:01,050 --> 00:14:03,780
remember it's not in the street stores

293
00:14:03,780 --> 00:14:05,790
different data so the garbage circuit is

294
00:14:05,790 --> 00:14:07,320
going to be different right so we need

295
00:14:07,320 --> 00:14:08,700
to compute different garbled circuits

296
00:14:08,700 --> 00:14:12,450
for every node of the tree and it's very

297
00:14:12,450 --> 00:14:14,610
important to compute them bottom-up

298
00:14:14,610 --> 00:14:17,160
right and I'm gonna say why so you can

299
00:14:17,160 --> 00:14:18,780
put the garbage circuits of the previous

300
00:14:18,780 --> 00:14:21,810
circuit that I sent I saw to you for the

301
00:14:21,810 --> 00:14:25,050
leaves of this tree for this nodes and

302
00:14:25,050 --> 00:14:26,580
so on and so forth and you continue like

303
00:14:26,580 --> 00:14:30,930
this right so ok so say we have computed

304
00:14:30,930 --> 00:14:32,339
garbled circuit we have sent the garbage

305
00:14:32,339 --> 00:14:34,500
circuits and I want to do the execution

306
00:14:34,500 --> 00:14:36,030
so what's going to happen is we're going

307
00:14:36,030 --> 00:14:38,220
to send the garbled input for the first

308
00:14:38,220 --> 00:14:39,600
route ok

309
00:14:39,600 --> 00:14:42,630
that's going to execute right but then

310
00:14:42,630 --> 00:14:44,580
it's gonna output something if they're

311
00:14:44,580 --> 00:14:46,890
an encryption of the result of the out

312
00:14:46,890 --> 00:14:49,350
or not but then it's not going out with

313
00:14:49,350 --> 00:14:51,089
the garble inputs for the next thing

314
00:14:51,089 --> 00:14:53,460
right we want garble inputs for the next

315
00:14:53,460 --> 00:14:57,540
thing so one way to do it is to send the

316
00:14:57,540 --> 00:14:59,310
result back compute new garbled inputs

317
00:14:59,310 --> 00:15:04,680
and execute the second circuit ok so

318
00:15:04,680 --> 00:15:07,140
that's not gonna work so we need to

319
00:15:07,140 --> 00:15:09,810
change this circuit that would garble it

320
00:15:09,810 --> 00:15:12,240
it's not a little bit so the way to do

321
00:15:12,240 --> 00:15:15,030
it is that was our original circuit that

322
00:15:15,030 --> 00:15:17,250
we used to garble so it had input and

323
00:15:17,250 --> 00:15:20,100
output now what we're gonna do is we're

324
00:15:20,100 --> 00:15:23,430
gonna hard code in this circuit the

325
00:15:23,430 --> 00:15:26,940
garble labels of the left circuit and

326
00:15:26,940 --> 00:15:29,940
the garbled labels of the right circuit

327
00:15:29,940 --> 00:15:31,890
these are all garble inputs these are

328
00:15:31,890 --> 00:15:36,270
garbled labels ok and now we can also

329
00:15:36,270 --> 00:15:37,320
give us

330
00:15:37,320 --> 00:15:39,330
input to the circuit the path that is

331
00:15:39,330 --> 00:15:42,770
being followed okay so given the path

332
00:15:42,770 --> 00:15:45,720
the circuit now can figure out whether

333
00:15:45,720 --> 00:15:47,450
I'm going left or right

334
00:15:47,450 --> 00:15:50,490
okay so it can pick basically one of the

335
00:15:50,490 --> 00:15:54,750
garble one of the garbha labels either

336
00:15:54,750 --> 00:15:58,680
left or right and then it can combine it

337
00:15:58,680 --> 00:16:01,050
with the out of the logic and it can

338
00:16:01,050 --> 00:16:04,410
instantiate this garbled labels turning

339
00:16:04,410 --> 00:16:06,060
them from Gerber labels to to the

340
00:16:06,060 --> 00:16:09,570
garbled inputs right and then it's going

341
00:16:09,570 --> 00:16:12,770
to output the actual next garbled input

342
00:16:12,770 --> 00:16:15,420
right so there's no interaction now we

343
00:16:15,420 --> 00:16:17,970
just hardcore the garble labels of the

344
00:16:17,970 --> 00:16:20,760
next circuits to our current node and

345
00:16:20,760 --> 00:16:23,520
then the circuit the next circuit is

346
00:16:23,520 --> 00:16:30,240
ready to execute okay and then we also

347
00:16:30,240 --> 00:16:32,130
need to be careful because when we get

348
00:16:32,130 --> 00:16:34,530
at the leaf we don't have left and right

349
00:16:34,530 --> 00:16:36,720
so we have to put outs of the garbha

350
00:16:36,720 --> 00:16:39,900
labels of the next route right to do the

351
00:16:39,900 --> 00:16:44,130
computation on the encrypted three okay

352
00:16:44,130 --> 00:16:46,470
so let's see now how the execution will

353
00:16:46,470 --> 00:16:49,560
look like so we have the client that has

354
00:16:49,560 --> 00:16:51,270
the first path in the index that he

355
00:16:51,270 --> 00:16:52,950
wants to access locally right it

356
00:16:52,950 --> 00:16:55,230
computes a garbled input of this two

357
00:16:55,230 --> 00:16:58,010
values for the route of the first three

358
00:16:58,010 --> 00:17:01,920
these first three execute and it outputs

359
00:17:01,920 --> 00:17:05,849
garble inputs for the write for its

360
00:17:05,849 --> 00:17:10,109
writes out now the garbled inputs are

361
00:17:10,109 --> 00:17:12,420
used to X to execute this this last

362
00:17:12,420 --> 00:17:16,050
circuit it outputs the garbled inputs

363
00:17:16,050 --> 00:17:19,770
for the next route right and then it

364
00:17:19,770 --> 00:17:21,599
continues up the garbled inputs of the

365
00:17:21,599 --> 00:17:23,780
left the garble inputs of the left and

366
00:17:23,780 --> 00:17:26,490
eventually Intel it cut it outs of an

367
00:17:26,490 --> 00:17:29,940
encryption of the index of the of the

368
00:17:29,940 --> 00:17:34,490
actual value we're looking for okay

369
00:17:34,490 --> 00:17:39,390
so this is the this is how the basic

370
00:17:39,390 --> 00:17:41,280
scheme works but now there's a problem

371
00:17:41,280 --> 00:17:44,400
right now remember now I'll have here

372
00:17:44,400 --> 00:17:47,400
two trees for this tree we have to

373
00:17:47,400 --> 00:17:49,560
encode the Garba labels of the next

374
00:17:49,560 --> 00:17:50,200
route

375
00:17:50,200 --> 00:17:53,500
to every node of this tree okay

376
00:17:53,500 --> 00:17:55,809
and of course whenever we access a

377
00:17:55,809 --> 00:17:57,909
garble circuit it cannot be used anymore

378
00:17:57,909 --> 00:18:00,639
so have to refresh everything right so

379
00:18:00,639 --> 00:18:02,889
if we refresh the garbled circuit of

380
00:18:02,889 --> 00:18:06,100
this route since its garb levels are

381
00:18:06,100 --> 00:18:08,470
hard-coded in every garbled circuit of

382
00:18:08,470 --> 00:18:11,049
this tree we have to refresh every

383
00:18:11,049 --> 00:18:13,510
garble circuits of this tree which means

384
00:18:13,510 --> 00:18:17,529
that the access complexity is linear

385
00:18:17,529 --> 00:18:20,350
because you know you have to refresh all

386
00:18:20,350 --> 00:18:21,730
this garbage circuits that are hard

387
00:18:21,730 --> 00:18:23,710
because the hard called the garble

388
00:18:23,710 --> 00:18:28,029
labels of all the routes right so that's

389
00:18:28,029 --> 00:18:32,970
not good and the way to solve it is

390
00:18:32,970 --> 00:18:39,220
basically to instead of hard-coding the

391
00:18:39,220 --> 00:18:41,980
garbled labels of the next route you

392
00:18:41,980 --> 00:18:46,029
just pass them a simple right okay so

393
00:18:46,029 --> 00:18:49,029
the idea is okay initially I used to

394
00:18:49,029 --> 00:18:51,279
compute a garble input for the first

395
00:18:51,279 --> 00:18:52,990
route by having the first path in the

396
00:18:52,990 --> 00:18:55,659
index now I'm going to compute a garbled

397
00:18:55,659 --> 00:18:58,570
input for the first route by having a

398
00:18:58,570 --> 00:19:01,330
simple the first path the index and the

399
00:19:01,330 --> 00:19:05,019
garbled labels of the second route so by

400
00:19:05,019 --> 00:19:06,250
having all this three I'm going to

401
00:19:06,250 --> 00:19:07,630
compute a garbled input of the first

402
00:19:07,630 --> 00:19:10,240
route and then I'm going to keep passing

403
00:19:10,240 --> 00:19:15,730
down this garbled labels right I'm going

404
00:19:15,730 --> 00:19:17,590
to do the computation but here whenever

405
00:19:17,590 --> 00:19:19,960
I will have now to instantiate the

406
00:19:19,960 --> 00:19:22,179
garbha labels of the next route I don't

407
00:19:22,179 --> 00:19:24,190
need to have them hard-coded because I

408
00:19:24,190 --> 00:19:28,269
just get them as input okay and then I

409
00:19:28,269 --> 00:19:30,490
do the same here note now that the

410
00:19:30,490 --> 00:19:32,380
client will also need to come to give us

411
00:19:32,380 --> 00:19:34,149
improve the garbha labels of the third

412
00:19:34,149 --> 00:19:36,760
route which doesn't exist here because

413
00:19:36,760 --> 00:19:40,149
of the picture and then eventually you

414
00:19:40,149 --> 00:19:44,740
get to output the encrypted the actual

415
00:19:44,740 --> 00:19:49,299
encrypted value okay so so this

416
00:19:49,299 --> 00:19:50,950
basically achieves you can refresh

417
00:19:50,950 --> 00:19:53,429
everything now import logarithmic time

418
00:19:53,429 --> 00:19:56,380
okay you don't have to do this this

419
00:19:56,380 --> 00:19:59,250
linear time computation

420
00:19:59,680 --> 00:20:02,290
the cost of our approach is exactly the

421
00:20:02,290 --> 00:20:05,080
cost of path Orem times K where K is the

422
00:20:05,080 --> 00:20:07,090
security parameter and this comes from

423
00:20:07,090 --> 00:20:10,750
the fact that you have to keep this

424
00:20:10,750 --> 00:20:17,020
garbled circuit per node okay so for

425
00:20:17,020 --> 00:20:18,640
example when path or AM downloads a

426
00:20:18,640 --> 00:20:20,440
block of B bits we need to download this

427
00:20:20,440 --> 00:20:22,030
block hard code in a garbage circuit

428
00:20:22,030 --> 00:20:26,890
therefore this is K times B okay and

429
00:20:26,890 --> 00:20:29,110
multiple problem is to remove this

430
00:20:29,110 --> 00:20:30,760
multiplicative K have like an

431
00:20:30,760 --> 00:20:32,890
underactive Orem without this

432
00:20:32,890 --> 00:20:33,910
multiplicative K

433
00:20:33,910 --> 00:20:37,770
I don't know if this is even possible

434
00:20:38,010 --> 00:20:40,810
okay so this is the basic scheme so so

435
00:20:40,810 --> 00:20:41,890
what I presented so far is an

436
00:20:41,890 --> 00:20:44,740
abstraction of hapa farm words I solved

437
00:20:44,740 --> 00:20:46,540
this problem non-interactive

438
00:20:46,540 --> 00:20:48,940
computational on this sequence of trees

439
00:20:48,940 --> 00:20:50,920
and then I saw that you know this

440
00:20:50,920 --> 00:20:55,660
applies to to Orem ok so let's talk

441
00:20:55,660 --> 00:20:57,820
about the application of this thing of

442
00:20:57,820 --> 00:20:59,620
this non interactive forum to searchable

443
00:20:59,620 --> 00:21:02,710
encryption so let me remind you a little

444
00:21:02,710 --> 00:21:05,740
bit what searchable encryption is so

445
00:21:05,740 --> 00:21:09,160
searchable encryption we can store a set

446
00:21:09,160 --> 00:21:12,750
of nwa deep pairs in an encrypted form

447
00:21:12,750 --> 00:21:17,500
and give it an encryption of keyword W

448
00:21:17,500 --> 00:21:19,930
we want to return all like this matching

449
00:21:19,930 --> 00:21:22,780
W and all existing approaches liek a

450
00:21:22,780 --> 00:21:24,910
deterministic function of W which we

451
00:21:24,910 --> 00:21:29,350
call search pattern ok so we saw how to

452
00:21:29,350 --> 00:21:31,090
consider its pattern without using fully

453
00:21:31,090 --> 00:21:34,390
fledged or am mainly d x login rounds

454
00:21:34,390 --> 00:21:36,930
for search we use 4 rounds instead

455
00:21:36,930 --> 00:21:39,190
entire scheme can be potentially

456
00:21:39,190 --> 00:21:42,940
practical ok so again I'm gonna black

457
00:21:42,940 --> 00:21:45,880
things a little bit ok so we have the

458
00:21:45,880 --> 00:21:47,620
notion of adaptive computation you have

459
00:21:47,620 --> 00:21:50,050
a memory you give an input X and what

460
00:21:50,050 --> 00:21:52,300
happens is you know you execute

461
00:21:52,300 --> 00:21:55,720
instructions one at a time ok this is an

462
00:21:55,720 --> 00:21:57,370
adaptive computation you cannot expect

463
00:21:57,370 --> 00:21:58,900
execute things in parallel so this is

464
00:21:58,900 --> 00:22:01,930
one class of computations and if you

465
00:22:01,930 --> 00:22:05,590
just use normal Orem for that you need T

466
00:22:05,590 --> 00:22:08,980
n Times log n rounds right where T n is

467
00:22:08,980 --> 00:22:11,370
the computation

468
00:22:11,900 --> 00:22:14,930
now if you use to run for that you can

469
00:22:14,930 --> 00:22:17,960
do it with TN rounds because you need

470
00:22:17,960 --> 00:22:24,770
two rounds pair access okay this just

471
00:22:24,770 --> 00:22:27,050
follows from the from the previous right

472
00:22:27,050 --> 00:22:28,910
so now if you have a non adaptive

473
00:22:28,910 --> 00:22:30,980
computation here's what's happening

474
00:22:30,980 --> 00:22:33,800
right so you have an input X you get the

475
00:22:33,800 --> 00:22:36,470
result out and based on this result you

476
00:22:36,470 --> 00:22:39,350
can compute F some function f of Y and

477
00:22:39,350 --> 00:22:41,330
then you can figure out in parallel

478
00:22:41,330 --> 00:22:46,340
everything that you can access okay so

479
00:22:46,340 --> 00:22:47,870
let's see how we can make this

480
00:22:47,870 --> 00:22:51,140
computation oblivious so if you use an

481
00:22:51,140 --> 00:22:52,820
interactive forum you need to log in

482
00:22:52,820 --> 00:22:55,190
rounds for the first small array and you

483
00:22:55,190 --> 00:22:58,580
need to log in rounds for the big array

484
00:22:58,580 --> 00:23:00,380
if you assume that you have an arm that

485
00:23:00,380 --> 00:23:05,210
can send requests in parallel right okay

486
00:23:05,210 --> 00:23:07,790
so now if you use to Ram you can do the

487
00:23:07,790 --> 00:23:11,360
first array in two rounds and the last

488
00:23:11,360 --> 00:23:17,420
array in login rounds okay but now we

489
00:23:17,420 --> 00:23:21,620
want to have four rounds right so okay

490
00:23:21,620 --> 00:23:23,510
one could ask me guess it's easy to get

491
00:23:23,510 --> 00:23:25,130
four rounds why don't you use to ramp

492
00:23:25,130 --> 00:23:27,500
for the big array well you cannot use to

493
00:23:27,500 --> 00:23:30,590
run for parallel axes because you need

494
00:23:30,590 --> 00:23:32,450
to refresh garbled circuits first and

495
00:23:32,450 --> 00:23:35,840
then execute the next thing right so -

496
00:23:35,840 --> 00:23:38,240
um can not be used to execute the

497
00:23:38,240 --> 00:23:42,410
parallel yes so basically the idea is

498
00:23:42,410 --> 00:23:44,240
too small to store the small array

499
00:23:44,240 --> 00:23:47,420
interim and then to store the big array

500
00:23:47,420 --> 00:23:49,429
in path forum but without the position

501
00:23:49,429 --> 00:23:53,240
map right and then the position map is

502
00:23:53,240 --> 00:23:55,429
computed as this using the pseudo-random

503
00:23:55,429 --> 00:23:57,830
function and then you you can do

504
00:23:57,830 --> 00:24:01,160
basically everything parent okay in 30

505
00:24:01,160 --> 00:24:02,720
below encryption is a known adaptive

506
00:24:02,720 --> 00:24:04,700
computation because a small array stores

507
00:24:04,700 --> 00:24:08,120
W and the number of keywords document

508
00:24:08,120 --> 00:24:10,190
mapping to it and the big array stores

509
00:24:10,190 --> 00:24:16,070
all this w ID okay so to conclude I

510
00:24:16,070 --> 00:24:18,230
presented to Ram it's the first non

511
00:24:18,230 --> 00:24:21,140
interactive tree based or on our cost is

512
00:24:21,140 --> 00:24:24,340
K times path forum and then

513
00:24:24,340 --> 00:24:26,050
it's application stretchable encryption

514
00:24:26,050 --> 00:24:28,150
it's a foreign searchable encryption and

515
00:24:28,150 --> 00:24:30,250
potentially practical since we only used

516
00:24:30,250 --> 00:24:31,900
to run for an array of size equal to the

517
00:24:31,900 --> 00:24:34,150
number of unique keywords and for the

518
00:24:34,150 --> 00:24:36,190
rest we use this path Aram without the

519
00:24:36,190 --> 00:24:41,550
position map okay thank you very much

