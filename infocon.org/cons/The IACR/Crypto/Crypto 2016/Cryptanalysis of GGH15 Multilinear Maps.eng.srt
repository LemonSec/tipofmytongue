1
00:00:03,859 --> 00:00:08,730
so thank you for the introduction so as

2
00:00:08,730 --> 00:00:12,809
I said I will present another yet

3
00:00:12,809 --> 00:00:14,580
another cryptanalysis of multilinear

4
00:00:14,580 --> 00:00:19,680
maps this time for the G th 15 candidate

5
00:00:19,680 --> 00:00:21,240
and it's a joint work with John

6
00:00:21,240 --> 00:00:23,820
Sebastian Koch on moon soonly and Medici

7
00:00:23,820 --> 00:00:28,829
version so let's start with multi linear

8
00:00:28,829 --> 00:00:34,320
map application so one of the first

9
00:00:34,320 --> 00:00:36,060
application Multan in maps were

10
00:00:36,060 --> 00:00:39,120
described for was non interactive key

11
00:00:39,120 --> 00:00:41,760
exchange for more than 4 players so you

12
00:00:41,760 --> 00:00:43,470
have 4 players here and you have a

13
00:00:43,470 --> 00:00:46,290
public board with some public parameters

14
00:00:46,290 --> 00:00:49,110
and the idea is that each player is

15
00:00:49,110 --> 00:00:52,650
going to generate a secret value and it

16
00:00:52,650 --> 00:00:56,010
is also going to encode this secret

17
00:00:56,010 --> 00:00:58,740
value in a public encoding and send this

18
00:00:58,740 --> 00:01:01,140
public and publish podcast this public

19
00:01:01,140 --> 00:01:04,080
encoding and these public encodings are

20
00:01:04,080 --> 00:01:06,770
going to be on this public board and

21
00:01:06,770 --> 00:01:11,909
then each of the the the party can take

22
00:01:11,909 --> 00:01:15,270
the free over encoding error and their

23
00:01:15,270 --> 00:01:18,210
own secret value and apply this key

24
00:01:18,210 --> 00:01:21,600
generation procedure so on their secret

25
00:01:21,600 --> 00:01:23,880
value and the free and the encoding z'

26
00:01:23,880 --> 00:01:27,569
of the other parties so for example the

27
00:01:27,569 --> 00:01:29,880
party a here is gonna take the value a

28
00:01:29,880 --> 00:01:32,579
the secret value a and encoding of P and

29
00:01:32,579 --> 00:01:34,829
coding MC encoding of T and apply this

30
00:01:34,829 --> 00:01:38,369
key chain procedure and B here will take

31
00:01:38,369 --> 00:01:41,189
this public is secret value D and then

32
00:01:41,189 --> 00:01:43,889
take the free public encodings a C and D

33
00:01:43,889 --> 00:01:48,240
and apply the same keygen operation and

34
00:01:48,240 --> 00:01:51,539
the thing is what you want is that key

35
00:01:51,539 --> 00:01:55,020
chain in these four cases give the same

36
00:01:55,020 --> 00:01:57,539
result so that you can extract the same

37
00:01:57,539 --> 00:02:02,939
key K so if we look at instantiation of

38
00:02:02,939 --> 00:02:06,569
such key generation algorithm for two

39
00:02:06,569 --> 00:02:09,300
parties it's essentially defilement and

40
00:02:09,300 --> 00:02:12,420
it's it comes back to 1976

41
00:02:12,420 --> 00:02:15,780
so you just the secret values are

42
00:02:15,780 --> 00:02:16,470
element of

43
00:02:16,470 --> 00:02:19,200
EP and the encoding czar g2 the secret

44
00:02:19,200 --> 00:02:23,310
value then in 2001 jus explain how to

45
00:02:23,310 --> 00:02:25,830
use bi linear maps how to use pairings

46
00:02:25,830 --> 00:02:29,100
in order to achieve three parties and in

47
00:02:29,100 --> 00:02:32,850
2003 bonny and silver bird they said

48
00:02:32,850 --> 00:02:35,010
okay if we don't have a binary map but a

49
00:02:35,010 --> 00:02:38,310
multi linear map then we can achieve end

50
00:02:38,310 --> 00:02:42,240
parties for n as big as the size of the

51
00:02:42,240 --> 00:02:46,830
military Maps plus a plus one but also

52
00:02:46,830 --> 00:02:49,800
in this paper they say that it might not

53
00:02:49,800 --> 00:02:53,910
be possible to use the same technique as

54
00:02:53,910 --> 00:02:55,920
we used to obtain parents in order to

55
00:02:55,920 --> 00:02:59,430
obtain multilinear maps so it remains an

56
00:02:59,430 --> 00:03:02,700
operant problem it and it's still enough

57
00:03:02,700 --> 00:03:05,250
from open problem to get the melting in

58
00:03:05,250 --> 00:03:12,870
maps from Bonanza topic in 2013 what we

59
00:03:12,870 --> 00:03:15,410
used instead of multi minimizes

60
00:03:15,410 --> 00:03:17,340
approximate multilinear maps were

61
00:03:17,340 --> 00:03:20,220
introduced and this approximated mention

62
00:03:20,220 --> 00:03:23,220
in the maps they also allow to derive

63
00:03:23,220 --> 00:03:26,480
key generation procedure for n n parties

64
00:03:26,480 --> 00:03:29,910
so we essentially have free candidate

65
00:03:29,910 --> 00:03:32,910
schemes at this approximate machine in

66
00:03:32,910 --> 00:03:34,650
the map so the first one from guard

67
00:03:34,650 --> 00:03:37,320
country and Olivia at your crib 2013 and

68
00:03:37,320 --> 00:03:42,300
then the CLT scheme crypto 2013 and the

69
00:03:42,300 --> 00:03:44,750
Gentry gorbunov Olivie scheme of GCC

70
00:03:44,750 --> 00:03:48,480
2015 and in this talk I will actually

71
00:03:48,480 --> 00:03:50,820
describe Accra palaces on this third

72
00:03:50,820 --> 00:03:55,709
candidate so why do we care about

73
00:03:55,709 --> 00:03:58,140
Malkina map so nearly everyone here know

74
00:03:58,140 --> 00:04:00,450
that they they are really interesting so

75
00:04:00,450 --> 00:04:03,090
they're the one of the first application

76
00:04:03,090 --> 00:04:04,620
that is described is this non

77
00:04:04,620 --> 00:04:06,900
interactive key exchange so it's a

78
00:04:06,900 --> 00:04:08,730
simple application because it's a

79
00:04:08,730 --> 00:04:12,780
generalization of dmn but of course the

80
00:04:12,780 --> 00:04:19,820
key okay okay okay the key

81
00:04:19,820 --> 00:04:22,780
thing that we could build from

82
00:04:22,780 --> 00:04:25,280
approximate match engine maps where was

83
00:04:25,280 --> 00:04:28,400
I oh so industry indistinguishability

84
00:04:28,400 --> 00:04:32,240
obfuscation and this as on itself a lot

85
00:04:32,240 --> 00:04:35,270
of really exciting application a lot of

86
00:04:35,270 --> 00:04:39,080
theoretical consequences and everything

87
00:04:39,080 --> 00:04:42,070
so it's really really the big

88
00:04:42,070 --> 00:04:44,240
constructed construction from

89
00:04:44,240 --> 00:04:47,090
approximate multi minimaps and also we

90
00:04:47,090 --> 00:04:50,560
can build a lot of really exciting new

91
00:04:50,560 --> 00:04:53,000
technologies like multi input functional

92
00:04:53,000 --> 00:04:55,340
encryption optimal broadcast encryption

93
00:04:55,340 --> 00:04:57,800
witness encryption ad for circuit and a

94
00:04:57,800 --> 00:05:01,070
lot more so it's really really

95
00:05:01,070 --> 00:05:05,450
interesting to understand what how to

96
00:05:05,450 --> 00:05:09,410
construct such machine in maps so if we

97
00:05:09,410 --> 00:05:12,230
look at the candidates we are currently

98
00:05:12,230 --> 00:05:14,570
for approximate mention in maps they're

99
00:05:14,570 --> 00:05:17,660
unfortunately based on new ordinance

100
00:05:17,660 --> 00:05:20,360
assumption that are not standard so you

101
00:05:20,360 --> 00:05:23,930
have a lot of assumption so some of them

102
00:05:23,930 --> 00:05:26,210
are named them myself but you have this

103
00:05:26,210 --> 00:05:28,250
multi linear D D H which is a

104
00:05:28,250 --> 00:05:31,370
generalization of the G H in a public

105
00:05:31,370 --> 00:05:33,530
setting and in a private setting you

106
00:05:33,530 --> 00:05:35,420
have decision linear problem subgroup

107
00:05:35,420 --> 00:05:38,390
membership you have this these problems

108
00:05:38,390 --> 00:05:40,340
here that are kind of interesting on

109
00:05:40,340 --> 00:05:42,760
their own from for some theoretical work

110
00:05:42,760 --> 00:05:46,490
to get to construct IO you have this

111
00:05:46,490 --> 00:05:48,440
kind of straddling set induction

112
00:05:48,440 --> 00:05:51,530
assumption that also are used to build

113
00:05:51,530 --> 00:05:54,320
io subgroup elimination or graph endures

114
00:05:54,320 --> 00:05:57,920
inductions and what's what's happening

115
00:05:57,920 --> 00:06:00,440
right now in the community is to try to

116
00:06:00,440 --> 00:06:03,560
figure out how hard this assumption

117
00:06:03,560 --> 00:06:06,440
really hard so if you look for example

118
00:06:06,440 --> 00:06:10,280
at the GG h13 scheme you have some

119
00:06:10,280 --> 00:06:11,990
assumption we know that they are broken

120
00:06:11,990 --> 00:06:14,660
and we have attacks again them some

121
00:06:14,660 --> 00:06:16,870
assumption they're like kind of broken

122
00:06:16,870 --> 00:06:19,940
sometimes it depends on you instant

123
00:06:19,940 --> 00:06:22,730
intern instantiate dams so for example

124
00:06:22,730 --> 00:06:26,420
in this work will show that a graph

125
00:06:26,420 --> 00:06:29,540
induction assumption on GG h 13 is also

126
00:06:29,540 --> 00:06:33,470
broken in a way when you look at CLT

127
00:06:33,470 --> 00:06:36,590
13 it's not exactly the same thing so

128
00:06:36,590 --> 00:06:38,840
this one was orange before now it's red

129
00:06:38,840 --> 00:06:41,900
this one I put it in green but it's more

130
00:06:41,900 --> 00:06:43,940
like we don't really know if it's secure

131
00:06:43,940 --> 00:06:45,770
or not we're still trying to figure out

132
00:06:45,770 --> 00:06:48,620
what's happening and these are all like

133
00:06:48,620 --> 00:06:51,350
a subset of all the attacks again these

134
00:06:51,350 --> 00:06:55,430
are necessary th 15 so it's kind of a

135
00:06:55,430 --> 00:06:57,770
different melting in the map it's mainly

136
00:06:57,770 --> 00:07:01,490
this graph induction Arnaz essential and

137
00:07:01,490 --> 00:07:04,670
in this work we show that there are some

138
00:07:04,670 --> 00:07:07,850
graph for example the graph of the key

139
00:07:07,850 --> 00:07:12,650
exchange that is not secure okay so our

140
00:07:12,650 --> 00:07:13,850
result is the following

141
00:07:13,850 --> 00:07:16,190
so there exists a polynomial-time attack

142
00:07:16,190 --> 00:07:18,020
against the key agram

143
00:07:18,020 --> 00:07:19,760
the D film and key agreement protocol

144
00:07:19,760 --> 00:07:22,700
when instantiated with the g GH 15

145
00:07:22,700 --> 00:07:26,390
multilinear maps so what we do is

146
00:07:26,390 --> 00:07:31,280
actually we don't we're looking at a

147
00:07:31,280 --> 00:07:33,860
protocol that take place and we generate

148
00:07:33,860 --> 00:07:35,930
an equivalent encoding for one of the

149
00:07:35,930 --> 00:07:38,540
user and if we're using this including

150
00:07:38,540 --> 00:07:40,760
in the key exchange then we recover the

151
00:07:40,760 --> 00:07:46,370
secret ok so just small comments on the

152
00:07:46,370 --> 00:07:50,870
result we our attack comes from the fact

153
00:07:50,870 --> 00:07:54,590
that the graph that was used in the

154
00:07:54,590 --> 00:07:56,840
graph induction artist assumption for

155
00:07:56,840 --> 00:08:00,380
the key exchange protocol is there's a

156
00:08:00,380 --> 00:08:02,330
way to attack it it does not mean that

157
00:08:02,330 --> 00:08:04,850
all the graph induction assumption on

158
00:08:04,850 --> 00:08:08,420
ggh 15 are broken and in particular you

159
00:08:08,420 --> 00:08:10,720
can build a candidate for

160
00:08:10,720 --> 00:08:12,710
indistinguishability of education

161
00:08:12,710 --> 00:08:15,050
following a certain graph structure and

162
00:08:15,050 --> 00:08:18,560
we don't know how to break that and also

163
00:08:18,560 --> 00:08:20,570
there's a paper an apron but I didn't

164
00:08:20,570 --> 00:08:23,210
check the detail that says that some of

165
00:08:23,210 --> 00:08:27,140
the graph give sort of random encoding

166
00:08:27,140 --> 00:08:29,180
so you have security for some of the

167
00:08:29,180 --> 00:08:34,969
graphs also so a LaVey in this and this

168
00:08:34,969 --> 00:08:39,559
note and the a print try to X 2 to take

169
00:08:39,559 --> 00:08:41,780
this graph induction thing and to put it

170
00:08:41,780 --> 00:08:45,740
for ggh 14 and in that case also for the

171
00:08:45,740 --> 00:08:46,700
key argument

172
00:08:46,700 --> 00:08:49,550
Cole we can have another attack it's not

173
00:08:49,550 --> 00:08:51,470
really an extension of this one but it's

174
00:08:51,470 --> 00:08:53,780
it's similar in some of the idea that

175
00:08:53,780 --> 00:08:57,320
breaks also in that case the the key

176
00:08:57,320 --> 00:09:00,200
agreement protocol okay

177
00:09:00,200 --> 00:09:03,500
so in the rest of this talk I will

178
00:09:03,500 --> 00:09:07,730
describe multilinear maps what is the

179
00:09:07,730 --> 00:09:10,010
candidate what is the protocol and how

180
00:09:10,010 --> 00:09:13,850
we can break it okay so if we go back to

181
00:09:13,850 --> 00:09:16,580
a symmetric multi-lane maps so you have

182
00:09:16,580 --> 00:09:19,640
an encoding of an element a for in a

183
00:09:19,640 --> 00:09:22,250
group G to the L so that's why that's

184
00:09:22,250 --> 00:09:23,990
how it was described by bond and

185
00:09:23,990 --> 00:09:27,320
Silverberg you can add and subtract

186
00:09:27,320 --> 00:09:29,990
elements in the same group so that is it

187
00:09:29,990 --> 00:09:32,720
that's just the addition you can zero

188
00:09:32,720 --> 00:09:35,870
test at any in any group so the zero

189
00:09:35,870 --> 00:09:38,240
testing it's true so it means it encodes

190
00:09:38,240 --> 00:09:40,400
a zero if it's an element if it's a

191
00:09:40,400 --> 00:09:42,320
natural element of the group so it means

192
00:09:42,320 --> 00:09:44,900
the element that is encoded is zero and

193
00:09:44,900 --> 00:09:48,290
you can multiply so in the symmetric

194
00:09:48,290 --> 00:09:49,940
multi mean map described by Bunyon

195
00:09:49,940 --> 00:09:53,120
Silverberg you can take D elements and

196
00:09:53,120 --> 00:09:56,480
put all of them together and get an

197
00:09:56,480 --> 00:09:58,310
encoding in the target group of the

198
00:09:58,310 --> 00:10:01,670
product when you look at approximate

199
00:10:01,670 --> 00:10:04,670
multilinear maps it's it's it's nearly

200
00:10:04,670 --> 00:10:07,130
the same so instead of being in the

201
00:10:07,130 --> 00:10:10,340
group GL your encoding with respect to a

202
00:10:10,340 --> 00:10:15,200
lab lay a label L and now you can still

203
00:10:15,200 --> 00:10:17,750
add for the same level you can zero test

204
00:10:17,750 --> 00:10:19,940
it's the same except you can only zero

205
00:10:19,940 --> 00:10:22,940
test for a specific label and the

206
00:10:22,940 --> 00:10:24,800
multiplication is slightly different

207
00:10:24,800 --> 00:10:27,040
here it's graded so it means you can

208
00:10:27,040 --> 00:10:29,870
multi you can multiply two including

209
00:10:29,870 --> 00:10:32,630
corresponding to label I and Noble J if

210
00:10:32,630 --> 00:10:34,910
they are in relation in a search for

211
00:10:34,910 --> 00:10:38,180
certain relation and this certain

212
00:10:38,180 --> 00:10:42,710
relation it's what will be different in

213
00:10:42,710 --> 00:10:44,589
the different

214
00:10:44,589 --> 00:10:46,689
the candidates we have and for example

215
00:10:46,689 --> 00:10:49,239
for the ggh 15 candidate that will look

216
00:10:49,239 --> 00:10:52,029
at this relation are given by graph

217
00:10:52,029 --> 00:10:55,779
structure okay so what is this candidate

218
00:10:55,779 --> 00:11:00,969
so first we're working over a ring so

219
00:11:00,969 --> 00:11:05,079
it's polynomial mod F where F is an

220
00:11:05,079 --> 00:11:07,229
irreducible polynomial of degree N and

221
00:11:07,229 --> 00:11:10,239
you're also working in our queues or in

222
00:11:10,239 --> 00:11:13,619
our queue so it's R divided by Q R and

223
00:11:13,619 --> 00:11:16,119
we have some public values and this

224
00:11:16,119 --> 00:11:20,649
public values will be vectors in R that

225
00:11:20,649 --> 00:11:24,969
correspond to certain vertices so what

226
00:11:24,969 --> 00:11:26,919
is an encoding so actually you're

227
00:11:26,919 --> 00:11:29,139
including something with respect to a

228
00:11:29,139 --> 00:11:31,839
label label and this label will be a

229
00:11:31,839 --> 00:11:35,289
path so a path from vertices you to

230
00:11:35,289 --> 00:11:38,499
vertices V and an encoding for this

231
00:11:38,499 --> 00:11:43,479
label is actually a matrix in R such

232
00:11:43,479 --> 00:11:46,359
that this vector times this matrix is

233
00:11:46,359 --> 00:11:50,319
the secret value times the the vector

234
00:11:50,319 --> 00:11:54,699
that correspond to the to the vertices V

235
00:11:54,699 --> 00:12:00,369
plus an error vector not Q so once again

236
00:12:00,369 --> 00:12:02,649
the encoding here it's a matrix and it's

237
00:12:02,649 --> 00:12:05,019
and this vector to this vector

238
00:12:05,019 --> 00:12:08,079
multiplied by the secret value and it's

239
00:12:08,079 --> 00:12:11,979
a noisy encoding so obviously you can

240
00:12:11,979 --> 00:12:14,649
add or subtract so if you're taking two

241
00:12:14,649 --> 00:12:17,949
such matrices for the same label then

242
00:12:17,949 --> 00:12:19,779
when you multiply on the left by a to

243
00:12:19,779 --> 00:12:23,349
the U you get a times a to the D and

244
00:12:23,349 --> 00:12:26,289
plus B times a to the D so it's a plus B

245
00:12:26,289 --> 00:12:32,019
times a D and plus a vector of noise the

246
00:12:32,019 --> 00:12:34,089
question is what's happening for the

247
00:12:34,089 --> 00:12:35,769
multiplication and the multiplication

248
00:12:35,769 --> 00:12:40,119
will be possible if the paths are

249
00:12:40,119 --> 00:12:42,939
compatible so it means if you have an

250
00:12:42,939 --> 00:12:46,179
encoding for the pass UV and an encoding

251
00:12:46,179 --> 00:12:49,089
for the passed VW then you can have an

252
00:12:49,089 --> 00:12:52,029
encoding that will be for the pass you

253
00:12:52,029 --> 00:12:58,090
to W so if you write it down it's

254
00:12:58,090 --> 00:13:00,970
the matrix multiplication so you're

255
00:13:00,970 --> 00:13:03,760
multiplied these two matrices and when

256
00:13:03,760 --> 00:13:05,230
you write it down and you multiply on

257
00:13:05,230 --> 00:13:08,410
the left by the vector a you then you

258
00:13:08,410 --> 00:13:11,950
have a times P times a W and you have an

259
00:13:11,950 --> 00:13:14,470
error term here and these things it

260
00:13:14,470 --> 00:13:17,770
reveals a lot so first we it means we

261
00:13:17,770 --> 00:13:20,860
can only encode small plaintext because

262
00:13:20,860 --> 00:13:23,170
if you're including large min takes and

263
00:13:23,170 --> 00:13:26,260
then you're multiplying then this might

264
00:13:26,260 --> 00:13:27,970
becomes really big so if you keep on

265
00:13:27,970 --> 00:13:29,920
multiplying it will be really big and

266
00:13:29,920 --> 00:13:32,500
then you cannot do anything and the

267
00:13:32,500 --> 00:13:34,660
other thing is that here the encoding

268
00:13:34,660 --> 00:13:37,960
itself is its present so actually the

269
00:13:37,960 --> 00:13:40,930
encoding also are small they actually

270
00:13:40,930 --> 00:13:44,020
are nearly trap doors for these vectors

271
00:13:44,020 --> 00:13:49,090
here there are noisy trapdoors anyway so

272
00:13:49,090 --> 00:13:51,700
if we sum up we can do multiplication

273
00:13:51,700 --> 00:13:55,660
when the paths are compatible it's just

274
00:13:55,660 --> 00:13:59,830
the matrix multiplication and the the

275
00:13:59,830 --> 00:14:01,510
plain things are small and the encoding

276
00:14:01,510 --> 00:14:03,430
is are small it doesn't matter that much

277
00:14:03,430 --> 00:14:06,190
for the rest of the attacks but just I

278
00:14:06,190 --> 00:14:09,610
wanted to point that out also how do we

279
00:14:09,610 --> 00:14:11,140
zero test so actually there's an

280
00:14:11,140 --> 00:14:13,840
extraction procedure and the extraction

281
00:14:13,840 --> 00:14:17,260
procedure is you have an encoding of a

282
00:14:17,260 --> 00:14:22,450
secret S for a path you to D and if you

283
00:14:22,450 --> 00:14:25,420
have the a you the vector a you you can

284
00:14:25,420 --> 00:14:29,140
multiply and you get s time aw plus e

285
00:14:29,140 --> 00:14:31,900
and this thing is this e here is small

286
00:14:31,900 --> 00:14:34,240
so it means the most significant bits of

287
00:14:34,240 --> 00:14:37,150
this value here will only depend on the

288
00:14:37,150 --> 00:14:40,500
secret exponent s so if you have another

289
00:14:40,500 --> 00:14:45,790
encoding that also goes to that encodes

290
00:14:45,790 --> 00:14:49,150
the same value but then but it's

291
00:14:49,150 --> 00:14:51,280
randomized differently it will still

292
00:14:51,280 --> 00:14:53,200
give them the same most significant bits

293
00:14:53,200 --> 00:14:54,610
so it means you can extract something

294
00:14:54,610 --> 00:14:57,790
that only depends on s so in particular

295
00:14:57,790 --> 00:15:00,850
it's really easy because if the F is

296
00:15:00,850 --> 00:15:03,130
equal is a zero then when you will

297
00:15:03,130 --> 00:15:04,810
multiply this two thing you will get

298
00:15:04,810 --> 00:15:07,120
something that is small so you know that

299
00:15:07,120 --> 00:15:09,730
the encoded value is a zero so zero

300
00:15:09,730 --> 00:15:11,580
testing is

301
00:15:11,580 --> 00:15:13,650
means that the extracted value is the

302
00:15:13,650 --> 00:15:19,940
zero okay so if we sum up on this slide

303
00:15:19,940 --> 00:15:22,590
in the graph Hindus Multan in the mouse

304
00:15:22,590 --> 00:15:25,380
you incurred relative to a path it's a

305
00:15:25,380 --> 00:15:28,830
noisy encoding you can add our subtract

306
00:15:28,830 --> 00:15:31,470
such including for the same path you can

307
00:15:31,470 --> 00:15:33,060
zero test

308
00:15:33,060 --> 00:15:36,150
so there's your test is one if a 0 and u

309
00:15:36,150 --> 00:15:39,390
is actually the source there are text

310
00:15:39,390 --> 00:15:43,140
and you can multiply a long path so if

311
00:15:43,140 --> 00:15:45,720
you have a path u to V 1 and a path and

312
00:15:45,720 --> 00:15:49,170
including from the path V to W you can

313
00:15:49,170 --> 00:15:52,410
multiply them as v1 is equal to v2 and

314
00:15:52,410 --> 00:15:55,290
you get an encoding related to the pass

315
00:15:55,290 --> 00:16:00,270
you to W ok so what is the key exchange

316
00:16:00,270 --> 00:16:04,110
protocol so I will describe the protocol

317
00:16:04,110 --> 00:16:06,210
for free parties but you can extend it

318
00:16:06,210 --> 00:16:08,100
you can extend the attack for more

319
00:16:08,100 --> 00:16:12,300
parties so when you were using G th 15

320
00:16:12,300 --> 00:16:14,250
in application you have to specify the

321
00:16:14,250 --> 00:16:17,400
graph that you will be used using so

322
00:16:17,400 --> 00:16:20,820
this is a graph or the key exchange in G

323
00:16:20,820 --> 00:16:23,580
th 15 so the first row will correspond

324
00:16:23,580 --> 00:16:26,910
to user 1 the second row will correspond

325
00:16:26,910 --> 00:16:28,890
to user 2 and the third row will

326
00:16:28,890 --> 00:16:32,850
correspond to user free so what is an

327
00:16:32,850 --> 00:16:35,490
encoding so the encoding is they will be

328
00:16:35,490 --> 00:16:39,330
from this dirt dirt X to these vertices

329
00:16:39,330 --> 00:16:43,200
and then including so I J for example

330
00:16:43,200 --> 00:16:47,670
it's cert that a IJ times this including

331
00:16:47,670 --> 00:16:51,089
its small a times a I J plus 1 plus

332
00:16:51,089 --> 00:16:54,300
vector noise so actually the encoding

333
00:16:54,300 --> 00:16:58,380
will be here on the edges and your

334
00:16:58,380 --> 00:17:00,630
you're doing so you're multiplying here

335
00:17:00,630 --> 00:17:01,890
and you go here and you're multiplying

336
00:17:01,890 --> 00:17:03,780
here you go here you're multiplying here

337
00:17:03,780 --> 00:17:07,949
you go here okay so what is okay it's

338
00:17:07,949 --> 00:17:11,189
here so what is key exchange protocol so

339
00:17:11,189 --> 00:17:14,699
the user are generating encoding love

340
00:17:14,699 --> 00:17:17,220
secret values as 1 + 2 NS free and

341
00:17:17,220 --> 00:17:19,500
they're putting them in the graph in a

342
00:17:19,500 --> 00:17:21,480
round robin fashion it doesn't really

343
00:17:21,480 --> 00:17:22,920
matter that it's a round robin

344
00:17:22,920 --> 00:17:26,690
but it's it's it's described like that

345
00:17:26,690 --> 00:17:30,330
so the the thing is here you can see

346
00:17:30,330 --> 00:17:33,390
that each user can take this first the

347
00:17:33,390 --> 00:17:35,520
user one can take the first row multiply

348
00:17:35,520 --> 00:17:38,250
the encoding and get an encoding of s 1

349
00:17:38,250 --> 00:17:40,980
times S 2 times s free and same thing

350
00:17:40,980 --> 00:17:43,290
for user 2 and user free so what they do

351
00:17:43,290 --> 00:17:45,900
is actually the if they publish these

352
00:17:45,900 --> 00:17:48,840
encoding but keeps these include

353
00:17:48,840 --> 00:17:54,000
encoding secret and then this vector

354
00:17:54,000 --> 00:17:55,530
here they're not public so what they

355
00:17:55,530 --> 00:17:58,350
have is the public parameters contain

356
00:17:58,350 --> 00:18:02,040
these three vectors here and they only

357
00:18:02,040 --> 00:18:04,800
reveal this value here so it means if

358
00:18:04,800 --> 00:18:06,750
you're just looking at that you cannot

359
00:18:06,750 --> 00:18:09,720
you cannot recover as to here because it

360
00:18:09,720 --> 00:18:12,000
you cannot infer it from here or from

361
00:18:12,000 --> 00:18:15,650
here because it's not the same matrices

362
00:18:15,650 --> 00:18:19,830
so the user here but the user I himself

363
00:18:19,830 --> 00:18:22,500
he knows the secret value on the missing

364
00:18:22,500 --> 00:18:25,140
edge and it can compute the resulting

365
00:18:25,140 --> 00:18:29,580
entry and extract the key as a most

366
00:18:29,580 --> 00:18:32,100
significant bit of the result so that's

367
00:18:32,100 --> 00:18:36,030
a protocol and how do we do that if we

368
00:18:36,030 --> 00:18:39,870
don't have all the the small vectors so

369
00:18:39,870 --> 00:18:41,340
actually what happened is that you have

370
00:18:41,340 --> 00:18:44,700
a lot of public and coatings over these

371
00:18:44,700 --> 00:18:49,800
edges and your computing a subsets on so

372
00:18:49,800 --> 00:18:52,590
here user 1 for example it takes a set

373
00:18:52,590 --> 00:18:55,620
in 1 to the N and it generates an

374
00:18:55,620 --> 00:18:58,590
encoding of s 1 it doesn't know s 1 but

375
00:18:58,590 --> 00:19:01,880
this encoding it can generate it on this

376
00:19:01,880 --> 00:19:05,400
on this path here on this path here and

377
00:19:05,400 --> 00:19:07,830
on the path here and user 2 is doing the

378
00:19:07,830 --> 00:19:11,270
same and user free is doing the same

379
00:19:11,810 --> 00:19:16,910
question about the protocol okay so

380
00:19:16,910 --> 00:19:21,780
let's let's try to break it so the

381
00:19:21,780 --> 00:19:23,520
setting is the following we have all

382
00:19:23,520 --> 00:19:26,880
these public parameters so these perfect

383
00:19:26,880 --> 00:19:29,580
parameters just what I have shown here

384
00:19:29,580 --> 00:19:34,290
so it's these matrices C IJ and they

385
00:19:34,290 --> 00:19:35,670
verify that

386
00:19:35,670 --> 00:19:39,060
the vector time C IJ is equal to this

387
00:19:39,060 --> 00:19:43,350
secret value TI t IJ plus etc so you

388
00:19:43,350 --> 00:19:46,290
have all these public parameters and

389
00:19:46,290 --> 00:19:47,760
what you have is that you're actually

390
00:19:47,760 --> 00:19:50,520
looking and an ongoing key exchange so

391
00:19:50,520 --> 00:19:53,370
you have all this relation from the key

392
00:19:53,370 --> 00:19:55,200
exchange but this one you don't have

393
00:19:55,200 --> 00:19:57,630
because these are the secret from the

394
00:19:57,630 --> 00:20:01,140
users otherwise the relation is with s 1

395
00:20:01,140 --> 00:20:03,330
s 2 and s 3 and that's the secret of the

396
00:20:03,330 --> 00:20:07,710
users okay so the goal what is it it's

397
00:20:07,710 --> 00:20:09,540
to recover the shared secret key so it

398
00:20:09,540 --> 00:20:11,610
means you want to recover K which is an

399
00:20:11,610 --> 00:20:15,260
extraction that chichén of s 1 s 2 s 3

400
00:20:15,260 --> 00:20:18,690
over 1 of the path so either the first

401
00:20:18,690 --> 00:20:21,500
row the second row the third row

402
00:20:21,500 --> 00:20:25,440
so our attack is as follows we extract a

403
00:20:25,440 --> 00:20:30,240
linear relation over s 1 over the TI t 1

404
00:20:30,240 --> 00:20:32,970
J's and it's a variant of the shin hwal

405
00:20:32,970 --> 00:20:36,150
attack again the CLT 13 scheme it does

406
00:20:36,150 --> 00:20:37,680
not break the protocol right away

407
00:20:37,680 --> 00:20:39,720
because the coefficients are large but

408
00:20:39,720 --> 00:20:41,670
then we can compute an equivalent

409
00:20:41,670 --> 00:20:44,850
including with a with a small error and

410
00:20:44,850 --> 00:20:49,250
then we can use that in the protocol so

411
00:20:49,250 --> 00:20:52,140
so what is the ID in the nutshell is

412
00:20:52,140 --> 00:20:54,270
that we have including z' here of s1

413
00:20:54,270 --> 00:20:56,400
that are public so we'll just forget

414
00:20:56,400 --> 00:21:00,720
about the first row and we'll try to fix

415
00:21:00,720 --> 00:21:03,690
s2 and s3 at the same for the same value

416
00:21:03,690 --> 00:21:06,210
and then compute this line here and this

417
00:21:06,210 --> 00:21:08,760
line here and compute the difference it

418
00:21:08,760 --> 00:21:10,740
will give an N Kooning of 0 and we'll do

419
00:21:10,740 --> 00:21:12,840
that for a lot of different values of s

420
00:21:12,840 --> 00:21:14,700
2 and s 3 and this will allow to

421
00:21:14,700 --> 00:21:17,610
construct a matrix and then we can do

422
00:21:17,610 --> 00:21:22,800
something with the matrix so ok so if we

423
00:21:22,800 --> 00:21:26,460
look at the public parameters so these

424
00:21:26,460 --> 00:21:28,350
are the public parameters of the row 2 &

425
00:21:28,350 --> 00:21:31,830
3 what I do is first I fix T 3 I forget

426
00:21:31,830 --> 00:21:35,570
about the indices in the index J 4 T 3

427
00:21:35,570 --> 00:21:39,600
and then that's it's going to fast

428
00:21:39,600 --> 00:21:42,420
ok and then I'm merging the two first

429
00:21:42,420 --> 00:21:45,990
equation ok

430
00:21:45,990 --> 00:21:47,850
anyway I'm merging the two first

431
00:21:47,850 --> 00:21:48,940
equations

432
00:21:48,940 --> 00:21:52,570
so it means I can have to encoding 'z

433
00:21:52,570 --> 00:21:55,420
and this time it's from the first vertex

434
00:21:55,420 --> 00:21:59,260
to a second vertex here and it's an

435
00:21:59,260 --> 00:22:00,970
encoding of t1 times t3

436
00:22:00,970 --> 00:22:04,090
or and t2 times t3 and then an encoding

437
00:22:04,090 --> 00:22:09,070
of t2 and t1 and what I do then is I fix

438
00:22:09,070 --> 00:22:11,350
all the G's and that's the thing I will

439
00:22:11,350 --> 00:22:14,920
be varying after so then I get to

440
00:22:14,920 --> 00:22:16,900
encoding x' here and the thing is when I

441
00:22:16,900 --> 00:22:20,410
look at the difference of this encoding

442
00:22:20,410 --> 00:22:22,900
as I told you we have two rows that

443
00:22:22,900 --> 00:22:24,580
compute the same thing so I look at the

444
00:22:24,580 --> 00:22:26,830
difference when I look at the difference

445
00:22:26,830 --> 00:22:28,930
it will give something small that's what

446
00:22:28,930 --> 00:22:31,390
the protocol is so when you compute

447
00:22:31,390 --> 00:22:34,030
exactly and you write everything down

448
00:22:34,030 --> 00:22:37,900
you get that this difference is t1 times

449
00:22:37,900 --> 00:22:40,660
t3 time this error vector plus an error

450
00:22:40,660 --> 00:22:42,430
vector times the including the including

451
00:22:42,430 --> 00:22:45,580
ZAR small minus T 2 T 3 times an error

452
00:22:45,580 --> 00:22:48,280
vector minus an error times and

453
00:22:48,280 --> 00:22:50,740
including but all the values are small

454
00:22:50,740 --> 00:22:52,600
it means we get something that is true

455
00:22:52,600 --> 00:22:57,610
over the ring and not mod Q so then now

456
00:22:57,610 --> 00:23:00,340
if we only look at the first element of

457
00:23:00,340 --> 00:23:02,920
this encoding we can write this equation

458
00:23:02,920 --> 00:23:06,220
as as an inner product of two vectors

459
00:23:06,220 --> 00:23:08,470
and then I can do that for a lot of

460
00:23:08,470 --> 00:23:12,070
different public elements so it means I

461
00:23:12,070 --> 00:23:16,240
can extend that in two matrices so you

462
00:23:16,240 --> 00:23:20,130
have a product of matrix a times B and

463
00:23:20,130 --> 00:23:22,570
so if you're doing that but you're not

464
00:23:22,570 --> 00:23:25,180
building a square matrices you're

465
00:23:25,180 --> 00:23:27,370
building one matrices with one line more

466
00:23:27,370 --> 00:23:30,970
it means that you can find a vector in

467
00:23:30,970 --> 00:23:34,660
the kernel of W and since with I

468
00:23:34,660 --> 00:23:37,120
probability B will be invertible you can

469
00:23:37,120 --> 00:23:38,590
remove that so it means you have a

470
00:23:38,590 --> 00:23:41,230
vector in the kernel of a so it means

471
00:23:41,230 --> 00:23:43,930
you have a linear combination of the t1j

472
00:23:43,930 --> 00:23:46,390
that gives 0 and the interesting thing

473
00:23:46,390 --> 00:23:48,160
about that is that we only use public

474
00:23:48,160 --> 00:23:50,440
elements so if we use one secret element

475
00:23:50,440 --> 00:23:52,390
instead of one public element we have a

476
00:23:52,390 --> 00:23:56,460
relation with s1 and the TI J's and so

477
00:23:56,460 --> 00:24:01,330
once we have this relation the the

478
00:24:01,330 --> 00:24:02,320
problem is that

479
00:24:02,320 --> 00:24:04,419
when we look at the encoding we can

480
00:24:04,419 --> 00:24:06,580
create because we have the coefficient

481
00:24:06,580 --> 00:24:09,580
then the noise vector is really big so

482
00:24:09,580 --> 00:24:11,590
that's a problem we cannot use it

483
00:24:11,590 --> 00:24:14,649
directly in the protocol but what we can

484
00:24:14,649 --> 00:24:17,200
do is instead of using line two and

485
00:24:17,200 --> 00:24:19,419
three as we did we're using line one and

486
00:24:19,419 --> 00:24:21,340
three and we're running exactly the same

487
00:24:21,340 --> 00:24:23,889
thing and then we can correct this error

488
00:24:23,889 --> 00:24:25,720
vector get something with the same error

489
00:24:25,720 --> 00:24:27,700
vector so we can subtract and then we

490
00:24:27,700 --> 00:24:32,320
get an element that is verifying what we

491
00:24:32,320 --> 00:24:33,820
want and then we can use it in the

492
00:24:33,820 --> 00:24:35,409
protocol and recover to the shared

493
00:24:35,409 --> 00:24:40,419
secret so to conclude we described an

494
00:24:40,419 --> 00:24:43,000
attack again the key agreement of GTH 15

495
00:24:43,000 --> 00:24:45,700
even with the safeguards that were in

496
00:24:45,700 --> 00:24:49,090
the papers and it extends in a way to

497
00:24:49,090 --> 00:24:51,789
the violence of Halloween and we don't

498
00:24:51,789 --> 00:24:54,309
know with this attack we don't know to

499
00:24:54,309 --> 00:24:55,539
build a non-interactive

500
00:24:55,539 --> 00:24:57,309
for party exchange that is not going

501
00:24:57,309 --> 00:25:00,159
through i/o but and it gives some

502
00:25:00,159 --> 00:25:02,759
insight on the graph induced assumption

503
00:25:02,759 --> 00:25:06,279
yes so these are some open problems and

504
00:25:06,279 --> 00:25:09,570
thank you for your attention

