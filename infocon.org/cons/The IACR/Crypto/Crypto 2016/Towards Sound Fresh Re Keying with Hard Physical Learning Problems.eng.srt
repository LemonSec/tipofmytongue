1
00:00:04,420 --> 00:00:07,460
so actually in this talk I just want to

2
00:00:07,460 --> 00:00:09,049
consider the symmetric setting so we

3
00:00:09,049 --> 00:00:10,820
have two parties and they share some

4
00:00:10,820 --> 00:00:13,850
spirit key and they run some protocols

5
00:00:13,850 --> 00:00:17,390
and cryptographic protocol and yeah

6
00:00:17,390 --> 00:00:19,010
there are many settings we are leakage

7
00:00:19,010 --> 00:00:21,050
is really an issue like where there's

8
00:00:21,050 --> 00:00:23,300
some side channels for example the smart

9
00:00:23,300 --> 00:00:28,370
card or a RFID setting so an adversary

10
00:00:28,370 --> 00:00:30,320
it like even though this protocol might

11
00:00:30,320 --> 00:00:32,989
be secure there might be some side

12
00:00:32,989 --> 00:00:35,120
channels and visually learn some

13
00:00:35,120 --> 00:00:36,980
partition are like some partial

14
00:00:36,980 --> 00:00:39,620
information about the secret key so this

15
00:00:39,620 --> 00:00:41,690
is like really an issue of like the

16
00:00:41,690 --> 00:00:43,790
adversary can do that during many

17
00:00:43,790 --> 00:00:45,980
sessions or even if he just learns a

18
00:00:45,980 --> 00:00:48,680
small amount like in total you can learn

19
00:00:48,680 --> 00:00:51,980
like to recover the secret key so

20
00:00:51,980 --> 00:00:55,070
there's an approach to provide security

21
00:00:55,070 --> 00:00:57,050
in such a setting and it's called like

22
00:00:57,050 --> 00:00:59,540
fresh Ricky so the idea is basically

23
00:00:59,540 --> 00:01:02,899
that we just used a secret here to

24
00:01:02,899 --> 00:01:05,840
generate some session keys and then we

25
00:01:05,840 --> 00:01:08,479
use the session key is to perform the

26
00:01:08,479 --> 00:01:12,170
protocol and in such a setting that user

27
00:01:12,170 --> 00:01:13,959
you would like if it just targets

28
00:01:13,959 --> 00:01:17,090
protocol it would just learn some

29
00:01:17,090 --> 00:01:18,649
partial information about the secret

30
00:01:18,649 --> 00:01:21,049
keys at the session keys and this is not

31
00:01:21,049 --> 00:01:22,819
so harmful because when they are

32
00:01:22,819 --> 00:01:25,340
computationally independent then an

33
00:01:25,340 --> 00:01:27,859
adversary cannot take advantage of for

34
00:01:27,859 --> 00:01:30,079
future sessions you even the add like

35
00:01:30,079 --> 00:01:32,450
learned of lots of information but of

36
00:01:32,450 --> 00:01:35,090
course this is not like sufficient for

37
00:01:35,090 --> 00:01:37,130
security because like a clever advisory

38
00:01:37,130 --> 00:01:39,229
would just simply target the reef are

39
00:01:39,229 --> 00:01:42,619
the freaking scheme so we need like some

40
00:01:42,619 --> 00:01:44,899
kind of a leakage resilient rekeying

41
00:01:44,899 --> 00:01:48,020
scheme there have been some proposals

42
00:01:48,020 --> 00:01:50,899
but unfortunately there were also like

43
00:01:50,899 --> 00:01:55,099
vulnerable to some attacks and so our

44
00:01:55,099 --> 00:01:56,959
contribution in our paper we basically

45
00:01:56,959 --> 00:01:58,789
just first give a formal security

46
00:01:58,789 --> 00:02:00,829
definition and we also give a form of

47
00:02:00,829 --> 00:02:03,079
security proof then a certain leakage

48
00:02:03,079 --> 00:02:05,779
model and the constructions are

49
00:02:05,779 --> 00:02:09,800
basically hard on based on lwe in LPN so

50
00:02:09,800 --> 00:02:13,130
we have two constructions one on lwe and

51
00:02:13,130 --> 00:02:17,240
one on LPN and it shows that the scheme

52
00:02:17,240 --> 00:02:20,360
is like really efficient so we have like

53
00:02:20,360 --> 00:02:22,370
a certain leakage model and just in this

54
00:02:22,370 --> 00:02:25,340
leakage model that you usually share the

55
00:02:25,340 --> 00:02:26,900
secret key and it's like what's a

56
00:02:26,900 --> 00:02:29,240
correspond to countermeasure which is

57
00:02:29,240 --> 00:02:32,450
called masking and you can basically

58
00:02:32,450 --> 00:02:34,460
determine the hardness point adversary'

59
00:02:34,460 --> 00:02:36,200
to act texture such a scene by the

60
00:02:36,200 --> 00:02:39,700
amount of shares and our solution just

61
00:02:39,700 --> 00:02:42,530
grow like the complexity in our solution

62
00:02:42,530 --> 00:02:44,570
just grows linearly in the amount of

63
00:02:44,570 --> 00:02:48,920
shares while like for block ciphers for

64
00:02:48,920 --> 00:02:51,590
example this grows quadratically like

65
00:02:51,590 --> 00:02:54,620
windows very like a very an approach to

66
00:02:54,620 --> 00:02:56,780
cut to provide security that is also

67
00:02:56,780 --> 00:02:59,000
used in practice like it's like a really

68
00:02:59,000 --> 00:03:02,390
practical thing therefore we have also

69
00:03:02,390 --> 00:03:04,640
provided a concrete implementation for

70
00:03:04,640 --> 00:03:06,470
the scheme and it shows that even for

71
00:03:06,470 --> 00:03:08,780
low orders or like for low amount of

72
00:03:08,780 --> 00:03:12,620
shares we match the efficiency of AES

73
00:03:12,620 --> 00:03:15,170
like of mass AES and since it's like

74
00:03:15,170 --> 00:03:17,780
asymptotically more efficient we of

75
00:03:17,780 --> 00:03:20,120
course like we have a battery efficiency

76
00:03:20,120 --> 00:03:23,810
for higher orders so the nice thing is

77
00:03:23,810 --> 00:03:26,630
also that we have like security against

78
00:03:26,630 --> 00:03:29,720
so-called glitches for free which was

79
00:03:29,720 --> 00:03:32,090
not the case for the implementations

80
00:03:32,090 --> 00:03:33,950
that we were today as implementations

81
00:03:33,950 --> 00:03:36,650
that we confused for the comparison but

82
00:03:36,650 --> 00:03:38,660
if you want to have some implementations

83
00:03:38,660 --> 00:03:40,700
for AES which are secured against

84
00:03:40,700 --> 00:03:43,420
glitches then you have like a much more

85
00:03:43,420 --> 00:03:45,920
like much higher computational overhead

86
00:03:45,920 --> 00:03:48,440
so it's several magnitudes less

87
00:03:48,440 --> 00:03:51,890
efficient in our solution basically we

88
00:03:51,890 --> 00:03:53,630
have two schemes so the first one is

89
00:03:53,630 --> 00:03:56,420
called based on offset LWR so it's like

90
00:03:56,420 --> 00:03:59,720
somewhat a new assumption but actually

91
00:03:59,720 --> 00:04:02,180
behaves somewhat like LWR and we can

92
00:04:02,180 --> 00:04:04,010
show that it's basically at least as

93
00:04:04,010 --> 00:04:08,570
hard as lwe with uniform noise so also

94
00:04:08,570 --> 00:04:12,110
it uses like very simple as very simple

95
00:04:12,110 --> 00:04:14,650
rounding function and very efficient

96
00:04:14,650 --> 00:04:17,000
operations and also simple operations so

97
00:04:17,000 --> 00:04:18,980
it will be very but it's very easy to

98
00:04:18,980 --> 00:04:22,130
implement it's also very efficient so

99
00:04:22,130 --> 00:04:23,720
then we have a second scheme which is

100
00:04:23,720 --> 00:04:26,900
based on Hardware noise so in the

101
00:04:26,900 --> 00:04:29,270
setting so we can only provide security

102
00:04:29,270 --> 00:04:30,830
if we assume that there is

103
00:04:30,830 --> 00:04:32,900
certain hardware noise usually if

104
00:04:32,900 --> 00:04:34,250
someone performs the side-channel

105
00:04:34,250 --> 00:04:38,180
attacks attack then the values that he

106
00:04:38,180 --> 00:04:40,190
learns is always perturbed by some noise

107
00:04:40,190 --> 00:04:44,630
and we exploit that in that approach so

108
00:04:44,630 --> 00:04:47,030
we also introduce a new learning problem

109
00:04:47,030 --> 00:04:49,400
which is like quite specific to to this

110
00:04:49,400 --> 00:04:51,410
setting and we call it learning learning

111
00:04:51,410 --> 00:04:55,790
parity of leakage and we can show that

112
00:04:55,790 --> 00:04:58,060
this learning parity with leakage is

113
00:04:58,060 --> 00:05:02,270
more or less equivalent to LPN or

114
00:05:02,270 --> 00:05:04,400
basically is equivalent to a variant of

115
00:05:04,400 --> 00:05:07,460
LPN but we can reduce LPN to this very

116
00:05:07,460 --> 00:05:11,420
end so in this also operates on set too

117
00:05:11,420 --> 00:05:14,750
and it's also really simple operations

118
00:05:14,750 --> 00:05:17,440
and it's also very simple to implement

119
00:05:17,440 --> 00:05:20,060
so now I want to define a rekeying

120
00:05:20,060 --> 00:05:23,420
scheme so it's actually quite simple so

121
00:05:23,420 --> 00:05:25,370
first we what we need we have first

122
00:05:25,370 --> 00:05:27,830
generator algorithm so this generator

123
00:05:27,830 --> 00:05:29,900
are going just generates the secret key

124
00:05:29,900 --> 00:05:33,440
and then we have some generator

125
00:05:33,440 --> 00:05:36,050
algorithm for the session keys so this

126
00:05:36,050 --> 00:05:38,930
generator algorithm algorithm operates

127
00:05:38,930 --> 00:05:43,360
on some secret shares of the secret key

128
00:05:43,360 --> 00:05:46,160
because and we impractical I assume that

129
00:05:46,160 --> 00:05:48,560
only one party is subject to leakage

130
00:05:48,560 --> 00:05:50,330
like which is usually the case if we

131
00:05:50,330 --> 00:05:53,150
have like the smart card setting because

132
00:05:53,150 --> 00:05:56,840
the server won't be like like subject to

133
00:05:56,840 --> 00:06:00,070
leakage attacks or side-channel or text

134
00:06:00,070 --> 00:06:03,380
so and then we also need like a third

135
00:06:03,380 --> 00:06:09,080
algorithm which we call core sk so there

136
00:06:09,080 --> 00:06:11,240
might be some so it will also create a

137
00:06:11,240 --> 00:06:12,860
session secret key but for the other

138
00:06:12,860 --> 00:06:14,740
party so there might be some

139
00:06:14,740 --> 00:06:16,790
inconsistency therefore we also need

140
00:06:16,790 --> 00:06:19,130
some correction information we and we

141
00:06:19,130 --> 00:06:21,890
also have some randomness are that the

142
00:06:21,890 --> 00:06:25,160
core sk needs as input and then

143
00:06:25,160 --> 00:06:27,530
basically for correctness we require

144
00:06:27,530 --> 00:06:29,390
that both algorithms output the same

145
00:06:29,390 --> 00:06:33,440
session key so for the security we

146
00:06:33,440 --> 00:06:36,740
consider like the real world basically

147
00:06:36,740 --> 00:06:38,750
there's an adversary who has like some

148
00:06:38,750 --> 00:06:41,470
site channel arc received some leakage

149
00:06:41,470 --> 00:06:43,970
from the party but he also receives the

150
00:06:43,970 --> 00:06:44,689
randomness and the

151
00:06:44,689 --> 00:06:46,339
correction information but also the

152
00:06:46,339 --> 00:06:51,679
session heat and we say it's secure if

153
00:06:51,679 --> 00:06:53,869
the adversary cannot distinguish this

154
00:06:53,869 --> 00:06:56,089
real-world setting from an ideal setting

155
00:06:56,089 --> 00:06:58,639
in the ideal setting the session key is

156
00:06:58,639 --> 00:07:01,819
uniformly random and the leakage comes

157
00:07:01,819 --> 00:07:04,009
just from some simulator and the

158
00:07:04,009 --> 00:07:06,409
simulator just uses as input the

159
00:07:06,409 --> 00:07:08,689
randomness to uniformly random

160
00:07:08,689 --> 00:07:11,629
correction information and secret key so

161
00:07:11,629 --> 00:07:13,339
if an adversary cannot distinguish the

162
00:07:13,339 --> 00:07:15,319
two these two settings

163
00:07:15,319 --> 00:07:17,360
Stanny can also not profit from the

164
00:07:17,360 --> 00:07:19,489
leakage and you can also not distinguish

165
00:07:19,489 --> 00:07:21,379
to seek the session keys from uniformly

166
00:07:21,379 --> 00:07:25,489
random secret keys so this is sufficient

167
00:07:25,489 --> 00:07:28,009
for for the security so now I want to

168
00:07:28,009 --> 00:07:29,569
speak about the leakage molar so we

169
00:07:29,569 --> 00:07:31,579
assume a certain leakage model which is

170
00:07:31,579 --> 00:07:34,519
called the T probing model and the idea

171
00:07:34,519 --> 00:07:36,800
is that an adversary can request like

172
00:07:36,800 --> 00:07:41,139
any T value like intermediate values and

173
00:07:41,139 --> 00:07:44,899
learn them basically like when the blue

174
00:07:44,899 --> 00:07:48,409
party execute this Chen SK algorithm and

175
00:07:48,409 --> 00:07:51,610
the adversary can request like any T

176
00:07:51,610 --> 00:07:54,889
values that occur during the computation

177
00:07:54,889 --> 00:07:58,129
so an of course he could like simply try

178
00:07:58,129 --> 00:08:00,709
to learn all the shares of the of the

179
00:08:00,709 --> 00:08:05,029
masks or like of the of the secret and

180
00:08:05,029 --> 00:08:07,300
to prevent that that he learns them

181
00:08:07,300 --> 00:08:09,979
during step are like more than one

182
00:08:09,979 --> 00:08:11,959
session and we need some kind of a

183
00:08:11,959 --> 00:08:15,159
refreshing algorithm so after each

184
00:08:15,159 --> 00:08:17,629
session we simply need to refresh the

185
00:08:17,629 --> 00:08:20,209
shares and there are several proposals

186
00:08:20,209 --> 00:08:22,689
for such a refreshing algorithm and

187
00:08:22,689 --> 00:08:25,939
basically if we use these shares which

188
00:08:25,939 --> 00:08:29,179
has to be more than two times the amount

189
00:08:29,179 --> 00:08:31,219
of values that an adversary can retrieve

190
00:08:31,219 --> 00:08:33,649
um then we can provide or then we can

191
00:08:33,649 --> 00:08:37,429
get this secure refreshing Sonya

192
00:08:37,429 --> 00:08:39,679
basically we just need that this Chen SK

193
00:08:39,679 --> 00:08:42,558
algorithm refreshed that these shares

194
00:08:42,558 --> 00:08:46,550
like during each session so now I want

195
00:08:46,550 --> 00:08:48,259
to show you the schemes like the first

196
00:08:48,259 --> 00:08:51,829
one based on offset LWR so we use some

197
00:08:51,829 --> 00:08:54,620
two modularly like P and Q and then we

198
00:08:54,620 --> 00:08:57,110
also have like some really easy rounding

199
00:08:57,110 --> 00:08:57,980
function which

200
00:08:57,980 --> 00:09:00,260
drops the least significant bits and

201
00:09:00,260 --> 00:09:01,970
then the generator algorithm is really

202
00:09:01,970 --> 00:09:04,280
simple we just draw a secret key which

203
00:09:04,280 --> 00:09:07,640
is in uniformly random is that Q to the

204
00:09:07,640 --> 00:09:10,580
N we just use a very simple secret

205
00:09:10,580 --> 00:09:17,390
sharing scheme then for the chain SK the

206
00:09:17,390 --> 00:09:19,580
idea is basically that we compute some

207
00:09:19,580 --> 00:09:22,760
shares of the session secret key SK SK a

208
00:09:22,760 --> 00:09:27,950
I which is just R times ki and then we

209
00:09:27,950 --> 00:09:30,500
used applied a rounding function and

210
00:09:30,500 --> 00:09:33,560
then to obtain the session secret the

211
00:09:33,560 --> 00:09:36,680
session secret key we just compute the

212
00:09:36,680 --> 00:09:39,200
sum over all the shares shares of the

213
00:09:39,200 --> 00:09:45,680
secret of the session key so then the

214
00:09:45,680 --> 00:09:48,050
second algorithm basically compute

215
00:09:48,050 --> 00:09:50,780
something related or it doesn't operates

216
00:09:50,780 --> 00:09:53,360
on the shares but directly on the on the

217
00:09:53,360 --> 00:09:54,110
secret key

218
00:09:54,110 --> 00:09:57,380
so it just computes R times P and then

219
00:09:57,380 --> 00:10:00,530
round and because the rounding function

220
00:10:00,530 --> 00:10:03,620
is almost linear of operations are

221
00:10:03,620 --> 00:10:05,900
somewhat close and like we just need a

222
00:10:05,900 --> 00:10:09,470
very simple error correction information

223
00:10:09,470 --> 00:10:11,870
to provide like it will Berlin so I

224
00:10:11,870 --> 00:10:13,820
won't show that here but it's quite

225
00:10:13,820 --> 00:10:16,340
simple but for simplicity I did not

226
00:10:16,340 --> 00:10:17,960
sketch it because it's a bit technical

227
00:10:17,960 --> 00:10:23,510
so for the security I first I want to

228
00:10:23,510 --> 00:10:26,540
show you they offset LWR it's quite

229
00:10:26,540 --> 00:10:29,360
similar to normal LWR so basically it's

230
00:10:29,360 --> 00:10:32,870
about distinguishing a uniformly random

231
00:10:32,870 --> 00:10:37,610
r matrix r and basically the value B

232
00:10:37,610 --> 00:10:43,520
which is in a set P to the M basically

233
00:10:43,520 --> 00:10:46,130
this value B is 8 a uniformly random or

234
00:10:46,130 --> 00:10:49,940
it's just er rounded value or H the

235
00:10:49,940 --> 00:10:52,670
strands the value R times k plus some

236
00:10:52,670 --> 00:10:58,790
offset oh so so lwe which simply don't

237
00:10:58,790 --> 00:11:03,170
have this offset oh well WR we don't

238
00:11:03,170 --> 00:11:06,830
have this offset o and for lwe is

239
00:11:06,830 --> 00:11:09,110
actually quite easy to show that offset

240
00:11:09,110 --> 00:11:11,900
LW is the same as LW e but for

241
00:11:11,900 --> 00:11:14,510
other we are we cannot do this because

242
00:11:14,510 --> 00:11:17,510
the running function is not linear but

243
00:11:17,510 --> 00:11:19,730
actually it we show also that many of

244
00:11:19,730 --> 00:11:22,430
the reductions that we use to prove the

245
00:11:22,430 --> 00:11:24,529
hardness of LWR also work for this

246
00:11:24,529 --> 00:11:27,500
offset LWR so it's no problem so we

247
00:11:27,500 --> 00:11:29,960
don't really decrease the security even

248
00:11:29,960 --> 00:11:32,240
though we cannot relate directly to LWR

249
00:11:32,240 --> 00:11:34,160
you have to use this additional

250
00:11:34,160 --> 00:11:37,070
assumption it so yan for suitable

251
00:11:37,070 --> 00:11:39,020
parameters yes at least as hard as all

252
00:11:39,020 --> 00:11:41,779
of you with uniform noise so for the

253
00:11:41,779 --> 00:11:43,850
proof sketched is actually quite easy so

254
00:11:43,850 --> 00:11:46,279
we have some advisory you can learn like

255
00:11:46,279 --> 00:11:50,000
T values and the reduction will have

256
00:11:50,000 --> 00:11:53,990
access to some offset LWR Oracle you can

257
00:11:53,990 --> 00:11:56,210
request some offset and then receive

258
00:11:56,210 --> 00:11:59,420
some some sample R and B which is either

259
00:11:59,420 --> 00:12:03,010
uniform or this R times k plus Oh

260
00:12:03,010 --> 00:12:06,260
rounded and now this reduction simply

261
00:12:06,260 --> 00:12:09,410
has to somehow simulate this Chen SK

262
00:12:09,410 --> 00:12:12,170
algorithm so since the advisory can only

263
00:12:12,170 --> 00:12:14,960
learn T values and there will be much

264
00:12:14,960 --> 00:12:17,029
more shares there's at least one share

265
00:12:17,029 --> 00:12:19,339
that the advisory cannot learn and so we

266
00:12:19,339 --> 00:12:23,770
call this share decay chain so now the

267
00:12:23,770 --> 00:12:26,600
reduction can basically simply sample

268
00:12:26,600 --> 00:12:29,690
all the shares but only the K chafe

269
00:12:29,690 --> 00:12:32,300
share it won't are like the reduction

270
00:12:32,300 --> 00:12:33,200
won't know the key

271
00:12:33,200 --> 00:12:38,150
CheY CheY shared mmm but it will be

272
00:12:38,150 --> 00:12:40,610
quite easy to generate generate the

273
00:12:40,610 --> 00:12:44,890
corresponding session secret to share

274
00:12:44,890 --> 00:12:48,080
because we can simply simply sum over

275
00:12:48,080 --> 00:12:51,440
all the ki so we compute this value K

276
00:12:51,440 --> 00:12:55,100
Prime so in this value K prime will

277
00:12:55,100 --> 00:12:57,980
simply corresponds to minus k plus K J

278
00:12:57,980 --> 00:13:00,950
so we can simply request this value K

279
00:13:00,950 --> 00:13:06,410
prime to the offset LWR Oracle so in

280
00:13:06,410 --> 00:13:08,630
what we will receive is a door a truly

281
00:13:08,630 --> 00:13:11,200
uniform B or we will receive the

282
00:13:11,200 --> 00:13:15,529
corresponding session secret share so we

283
00:13:15,529 --> 00:13:18,110
can use this baby now in the simulation

284
00:13:18,110 --> 00:13:21,140
of the algorithm Chen SK and we can

285
00:13:21,140 --> 00:13:24,140
simply sum over all these sessions

286
00:13:24,140 --> 00:13:25,810
secret shares

287
00:13:25,810 --> 00:13:28,600
and also we can simply output this

288
00:13:28,600 --> 00:13:33,230
session key and now in the case when B

289
00:13:33,230 --> 00:13:34,730
is uniform the session key will be

290
00:13:34,730 --> 00:13:37,870
uniform in the other case when it's like

291
00:13:37,870 --> 00:13:41,000
offset LW are distributed then it will

292
00:13:41,000 --> 00:13:43,370
be exactly as in the scheme exactly as

293
00:13:43,370 --> 00:13:45,440
in the real world so that's the reason

294
00:13:45,440 --> 00:13:52,310
why is secure so for the the other

295
00:13:52,310 --> 00:13:55,630
scheme we basically use Hardware noise

296
00:13:55,630 --> 00:13:59,480
so usually is these side channel attacks

297
00:13:59,480 --> 00:14:01,820
are affected by Hardware noise in our

298
00:14:01,820 --> 00:14:03,860
model like in this probing model we

299
00:14:03,860 --> 00:14:05,660
assume that you cannot let that busy

300
00:14:05,660 --> 00:14:09,500
read doesn't learn a in the clear but

301
00:14:09,500 --> 00:14:11,830
usually there's some large portion noise

302
00:14:11,830 --> 00:14:15,050
which is like so that visitor you will

303
00:14:15,050 --> 00:14:17,089
learn something like the value plus e

304
00:14:17,089 --> 00:14:20,870
which is like a real value so it

305
00:14:20,870 --> 00:14:22,550
actually depends on the measure powdered

306
00:14:22,550 --> 00:14:25,430
advisory measures this real value what

307
00:14:25,430 --> 00:14:28,040
you will learn but you we model it in

308
00:14:28,040 --> 00:14:32,150
this way and and if we assume that this

309
00:14:32,150 --> 00:14:35,000
this this probe is just for example and

310
00:14:35,000 --> 00:14:36,770
in our product of some public value R

311
00:14:36,770 --> 00:14:41,150
and some key K then we can show that

312
00:14:41,150 --> 00:14:43,430
this is actually equivalent this problem

313
00:14:43,430 --> 00:14:46,180
of learning or recovering the secret key

314
00:14:46,180 --> 00:14:49,070
is equivalent to learning parity what

315
00:14:49,070 --> 00:14:51,279
noise

316
00:14:52,850 --> 00:14:56,839
and we really exploit that to construct

317
00:14:56,839 --> 00:14:59,360
a rekeying scheme so basically the

318
00:14:59,360 --> 00:15:01,310
reeking scheme will be as hard as LP n

319
00:15:01,310 --> 00:15:04,910
based on this learning learning parity

320
00:15:04,910 --> 00:15:06,920
with leakage was which is equivalent to

321
00:15:06,920 --> 00:15:09,050
learning parity with noise the nice

322
00:15:09,050 --> 00:15:11,839
thing about it is that we don't need to

323
00:15:11,839 --> 00:15:14,240
generate the noise on the chip because

324
00:15:14,240 --> 00:15:17,050
usually like there were some proposals

325
00:15:17,050 --> 00:15:20,450
which wanted to provide some side

326
00:15:20,450 --> 00:15:23,209
channel or like leakage resilient

327
00:15:23,209 --> 00:15:24,980
schemes based on LP n but there was

328
00:15:24,980 --> 00:15:26,930
always the issue if you generated noise

329
00:15:26,930 --> 00:15:29,630
on your chip then that visually might

330
00:15:29,630 --> 00:15:32,600
learn this noise but in our scheme there

331
00:15:32,600 --> 00:15:34,640
is no noise generated on the chip itself

332
00:15:34,640 --> 00:15:36,770
we just need that the side channels are

333
00:15:36,770 --> 00:15:38,810
affected by some noise - during

334
00:15:38,810 --> 00:15:43,700
side channel measurements yes so but for

335
00:15:43,700 --> 00:15:45,860
the security there is like a Trebek

336
00:15:45,860 --> 00:15:48,860
because it seems that we need ideal

337
00:15:48,860 --> 00:15:50,779
cypher mall or at least record like a

338
00:15:50,779 --> 00:15:52,940
random Oracle model because on the chip

339
00:15:52,940 --> 00:15:56,779
itself we don't have this noise so the

340
00:15:56,779 --> 00:16:00,650
session Keys won't be uniform or won't

341
00:16:00,650 --> 00:16:03,350
be indistinguishable from uniform itself

342
00:16:03,350 --> 00:16:05,180
only if that misery takes the side

343
00:16:05,180 --> 00:16:08,779
channel attack so so like as an input

344
00:16:08,779 --> 00:16:11,000
for the protocol we first need to hash

345
00:16:11,000 --> 00:16:14,660
it for example with random Oracle so

346
00:16:14,660 --> 00:16:17,710
yeah that was also my last slide so

347
00:16:17,710 --> 00:16:21,770
basically we have now like a former

348
00:16:21,770 --> 00:16:24,200
security definition for these shrieking

349
00:16:24,200 --> 00:16:27,110
screams we also have like a formal proof

350
00:16:27,110 --> 00:16:29,839
of these schemes so they are give like

351
00:16:29,839 --> 00:16:35,480
Anna and I yeah so we can quite sure

352
00:16:35,480 --> 00:16:37,460
that there is not like a trivial attack

353
00:16:37,460 --> 00:16:39,440
compared to choose or like some a text

354
00:16:39,440 --> 00:16:43,550
compared to the previous schemes as well

355
00:16:43,550 --> 00:16:45,080
we have like we based it on

356
00:16:45,080 --> 00:16:47,240
well-established assumptions for example

357
00:16:47,240 --> 00:16:49,940
on LPN or lwe and it's also very

358
00:16:49,940 --> 00:16:52,400
efficient to implement and and very

359
00:16:52,400 --> 00:16:55,610
simple so like if you have like some

360
00:16:55,610 --> 00:16:57,800
programmers who do not have like any

361
00:16:57,800 --> 00:17:00,020
knowledge and cryptography it will be

362
00:17:00,020 --> 00:17:02,390
still very simple for him to implement

363
00:17:02,390 --> 00:17:06,439
that while like symbol like comparable

364
00:17:06,439 --> 00:17:08,630
block cipher based solutions will be

365
00:17:08,630 --> 00:17:11,599
quite hard to implement because this

366
00:17:11,599 --> 00:17:13,490
this masking is highly non-trivial

367
00:17:13,490 --> 00:17:15,800
because there you have like nonlinear

368
00:17:15,800 --> 00:17:18,740
operations while in our case we use like

369
00:17:18,740 --> 00:17:21,319
LW are in LP n which are like really

370
00:17:21,319 --> 00:17:23,660
almost linear which makes the whole

371
00:17:23,660 --> 00:17:26,060
implementation really efficient and very

372
00:17:26,060 --> 00:17:29,210
simple so yeah thanks for your attention

373
00:17:29,210 --> 00:17:31,220
and also have the reference for ePrint

374
00:17:31,220 --> 00:17:34,870
and I'm happy to discuss

375
00:17:36,120 --> 00:17:38,179
you

