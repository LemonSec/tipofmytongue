1
00:00:03,859 --> 00:00:07,620
so this is yet another talk about fhc

2
00:00:07,620 --> 00:00:09,809
but this time it's on the secret privacy

3
00:00:09,809 --> 00:00:13,320
point of view so quick reminders first

4
00:00:13,320 --> 00:00:15,780
what is fhe and what is it is you'd what

5
00:00:15,780 --> 00:00:18,240
is it useful so let's say you want to

6
00:00:18,240 --> 00:00:20,250
compute something on the cloud let's say

7
00:00:20,250 --> 00:00:22,440
you want an online diagnostic because

8
00:00:22,440 --> 00:00:23,790
you are feeling symptoms and you don't

9
00:00:23,790 --> 00:00:25,710
know what they are you send your data

10
00:00:25,710 --> 00:00:28,920
your medical data to a server it runs

11
00:00:28,920 --> 00:00:31,140
some computation and return the

12
00:00:31,140 --> 00:00:34,829
diagnosis the thing is you want your

13
00:00:34,829 --> 00:00:36,929
medical data to remain private and even

14
00:00:36,929 --> 00:00:38,699
the diagnosis you don't want it out on

15
00:00:38,699 --> 00:00:42,179
the internet so you encrypt your data

16
00:00:42,179 --> 00:00:45,230
and you want to encrypt it in a way that

17
00:00:45,230 --> 00:00:48,719
so that I Barry Simms can still be run

18
00:00:48,719 --> 00:00:53,280
on your data that's what we call fhe an

19
00:00:53,280 --> 00:00:55,050
example of fhe which you might have seen

20
00:00:55,050 --> 00:00:56,940
a few times already at this conference

21
00:00:56,940 --> 00:01:04,519
is a Gentry site waters 2013 so the G

22
00:01:04,519 --> 00:01:08,579
matrix here is not the wages made is not

23
00:01:08,579 --> 00:01:12,479
really important what matters is how you

24
00:01:12,479 --> 00:01:16,890
encrypt on how you do corporations so to

25
00:01:16,890 --> 00:01:18,570
encourage you have a random part which

26
00:01:18,570 --> 00:01:21,030
is the matrix a you multiply it by the

27
00:01:21,030 --> 00:01:26,630
secret s and you are the noise pot so to

28
00:01:26,630 --> 00:01:29,369
just quickly to do operations to do a

29
00:01:29,369 --> 00:01:31,259
sum you do just the sum of encryption

30
00:01:31,259 --> 00:01:35,369
and the product is a bit more intriguing

31
00:01:35,369 --> 00:01:37,890
in that to do a product you need to

32
00:01:37,890 --> 00:01:40,439
multiply by G minus 1 which is not

33
00:01:40,439 --> 00:01:43,590
matrix it's an algorithm which is such

34
00:01:43,590 --> 00:01:46,500
that G times G minus 1 of something like

35
00:01:46,500 --> 00:01:48,570
G times G minus one of V is equal to D

36
00:01:48,570 --> 00:01:52,289
and G minus one has to be small so you

37
00:01:52,289 --> 00:01:54,479
know just some color coding or range

38
00:01:54,479 --> 00:01:57,659
means the uniform and blooming small for

39
00:01:57,659 --> 00:02:01,140
the rest of the talk so that's GSW

40
00:02:01,140 --> 00:02:05,280
encryption it was published in 2013 we

41
00:02:05,280 --> 00:02:09,240
walked a few times after world and the

42
00:02:09,240 --> 00:02:12,900
problem is that now you get fhg but the

43
00:02:12,900 --> 00:02:16,819
error term this error terms

44
00:02:17,000 --> 00:02:21,269
is modified during the operations so by

45
00:02:21,269 --> 00:02:24,150
analyzing the outfits the user can guess

46
00:02:24,150 --> 00:02:27,060
or maybe at least get some information

47
00:02:27,060 --> 00:02:29,519
but the algorithm that was run on the

48
00:02:29,519 --> 00:02:35,700
honest data and maybe the server is

49
00:02:35,700 --> 00:02:38,280
running some proprietary algorithm and

50
00:02:38,280 --> 00:02:41,519
does not want it leaked so the focus of

51
00:02:41,519 --> 00:02:45,500
this work is to see how we can hide the

52
00:02:45,500 --> 00:02:47,970
everything that other operations that

53
00:02:47,970 --> 00:02:52,680
were done on the data so toy example to

54
00:02:52,680 --> 00:02:55,290
see how information is leaked let's say

55
00:02:55,290 --> 00:02:57,599
you have three encryptions of zero it's

56
00:02:57,599 --> 00:02:58,889
not very interesting but while you are

57
00:02:58,889 --> 00:03:01,290
three encryption of 0 and the server's

58
00:03:01,290 --> 00:03:03,780
wants to some two of them the plain text

59
00:03:03,780 --> 00:03:05,700
associated would be zero because it's

60
00:03:05,700 --> 00:03:08,220
just to the sum of the opera 0 but if it

61
00:03:08,220 --> 00:03:11,040
sounds let's say c1 and c2 the error

62
00:03:11,040 --> 00:03:13,290
term which the user will be able to

63
00:03:13,290 --> 00:03:16,409
recover will be e1 plus e2 so we can

64
00:03:16,409 --> 00:03:18,750
know exactly which ciphertext to the

65
00:03:18,750 --> 00:03:21,750
server as a sound and then he gains the

66
00:03:21,750 --> 00:03:23,940
information about the algorithm he knows

67
00:03:23,940 --> 00:03:27,060
exactly what the user did so that's what

68
00:03:27,060 --> 00:03:28,889
we want to avoid we want that the

69
00:03:28,889 --> 00:03:31,410
evaluation of a function and on the

70
00:03:31,410 --> 00:03:33,389
bench of software ciphertext should

71
00:03:33,389 --> 00:03:35,819
reveal nothing but the odd part of the

72
00:03:35,819 --> 00:03:38,970
function on the associated plain text so

73
00:03:38,970 --> 00:03:43,500
this has been addressed not not that

74
00:03:43,500 --> 00:03:45,629
many times but a few times already so in

75
00:03:45,629 --> 00:03:48,569
the seminar work of Gentry I let's say

76
00:03:48,569 --> 00:03:50,370
you have a cipher text widget which is

77
00:03:50,370 --> 00:03:52,620
the result of an aberration and the

78
00:03:52,620 --> 00:03:54,810
first solution proposed by Gentry was to

79
00:03:54,810 --> 00:03:59,069
add some noise since the information is

80
00:03:59,069 --> 00:04:00,989
leaking the noise if we are the neurons

81
00:04:00,989 --> 00:04:03,269
of note that is super polynomial in what

82
00:04:03,269 --> 00:04:05,729
already exists all the noise all the

83
00:04:05,729 --> 00:04:07,979
information will be destroyed so the

84
00:04:07,979 --> 00:04:09,780
advantage is that you destroy all the

85
00:04:09,780 --> 00:04:12,479
information that was leaked the

86
00:04:12,479 --> 00:04:14,310
disadvantage is that you need to add

87
00:04:14,310 --> 00:04:15,959
super polynomial amount of noise and

88
00:04:15,959 --> 00:04:17,579
since the noise need to be smaller than

89
00:04:17,579 --> 00:04:18,570
the bar

90
00:04:18,570 --> 00:04:21,180
q which is the modulus the perimeter to

91
00:04:21,180 --> 00:04:23,000
needs to be super exponential and

92
00:04:23,000 --> 00:04:25,140
another problem is that you cannot do

93
00:04:25,140 --> 00:04:27,570
more operations on your cycle text since

94
00:04:27,570 --> 00:04:29,820
you have already i did a very high

95
00:04:29,820 --> 00:04:33,330
amount of noise more recent approach was

96
00:04:33,330 --> 00:04:36,560
baidu gangsta lean in europe 3 2016 and

97
00:04:36,560 --> 00:04:39,690
it consisted in first adding some noise

98
00:04:39,690 --> 00:04:41,550
but this time is only at the same size

99
00:04:41,550 --> 00:04:44,100
of the noise already in the sacred texts

100
00:04:44,100 --> 00:04:47,400
and then doing a bootstrapping so here

101
00:04:47,400 --> 00:04:49,350
it's a bit of a dead NSYNC way to write

102
00:04:49,350 --> 00:04:52,080
it but you evaluate the decryption side

103
00:04:52,080 --> 00:04:54,870
the decryption circuit on an encryption

104
00:04:54,870 --> 00:04:57,450
of the secret key which means that you

105
00:04:57,450 --> 00:04:59,700
get a new cipher text of the same plain

106
00:04:59,700 --> 00:05:02,490
text but with a non bonded amount of

107
00:05:02,490 --> 00:05:06,810
noise so this is not enough to hide the

108
00:05:06,810 --> 00:05:10,050
computations but we can repeat and each

109
00:05:10,050 --> 00:05:12,660
time we repeat this process we add some

110
00:05:12,660 --> 00:05:14,670
entropy to the noise and if we repeat it

111
00:05:14,670 --> 00:05:17,550
a number of time linear in the security

112
00:05:17,550 --> 00:05:20,000
parameter then all the noise will be a

113
00:05:20,000 --> 00:05:24,060
randomized so this works with polynomial

114
00:05:24,060 --> 00:05:25,380
mudras since we don't have to either

115
00:05:25,380 --> 00:05:27,990
submit to mesh noise we can do more

116
00:05:27,990 --> 00:05:31,440
operations so this is no job and the

117
00:05:31,440 --> 00:05:33,150
problem is that it requires

118
00:05:33,150 --> 00:05:35,670
bootstrapping so this requires a

119
00:05:35,670 --> 00:05:38,580
circular security assumption since we

120
00:05:38,580 --> 00:05:40,350
have an encryption of secret key under

121
00:05:40,350 --> 00:05:43,650
itself this is an assumption that is not

122
00:05:43,650 --> 00:05:47,670
very well known and it's require the

123
00:05:47,670 --> 00:05:50,040
linear number of time to boost wrapper

124
00:05:50,040 --> 00:05:52,470
in a level number of time bootstrapping

125
00:05:52,470 --> 00:05:55,650
can be quite expensive so this adds a

126
00:05:55,650 --> 00:05:59,070
lot of computation then there is our

127
00:05:59,070 --> 00:06:01,980
approach approach so still same

128
00:06:01,980 --> 00:06:04,470
ciphertext we had a noise that is

129
00:06:04,470 --> 00:06:07,110
practically the same size at the zoo

130
00:06:07,110 --> 00:06:09,830
previous noise and we do nothing else

131
00:06:09,830 --> 00:06:14,670
the trick here is that our noise is that

132
00:06:14,670 --> 00:06:17,550
blue is green which means that it's not

133
00:06:17,550 --> 00:06:19,860
just small it's a small goshen it has to

134
00:06:19,860 --> 00:06:21,950
come from the Gaussian distribution with

135
00:06:21,950 --> 00:06:26,130
appropriate parameters and what we did

136
00:06:26,130 --> 00:06:28,950
in our paper is to underlies in depth

137
00:06:28,950 --> 00:06:29,639
the

138
00:06:29,639 --> 00:06:32,729
of the noise to show that it's in fact

139
00:06:32,729 --> 00:06:35,999
just adding a small noise is enough to I

140
00:06:35,999 --> 00:06:40,229
hide everything so as before we are the

141
00:06:40,229 --> 00:06:41,310
small night so we have a polynomial

142
00:06:41,310 --> 00:06:44,099
measures we don't need any circular

143
00:06:44,099 --> 00:06:45,749
security here because we don't do

144
00:06:45,749 --> 00:06:48,229
bootstrapping and we can do multi hub

145
00:06:48,229 --> 00:06:52,249
the problem is that since this is for

146
00:06:52,249 --> 00:06:55,169
this applies to branching programs it

147
00:06:55,169 --> 00:06:57,870
only works for NC 1 which in itself is

148
00:06:57,870 --> 00:07:00,120
not really an issue because there is no

149
00:07:00,120 --> 00:07:02,939
fhe for all circuits without

150
00:07:02,939 --> 00:07:05,639
bootstrapping so as long as we don't

151
00:07:05,639 --> 00:07:07,379
choose bootstrapping it's normal that we

152
00:07:07,379 --> 00:07:10,229
are only for MC 1 circuits another issue

153
00:07:10,229 --> 00:07:13,080
is that it only works for the encryption

154
00:07:13,080 --> 00:07:15,779
that I have shown previously there are

155
00:07:15,779 --> 00:07:19,080
other encrypt fhe encryption schemes but

156
00:07:19,080 --> 00:07:21,599
this one is a tailor-made for GSW

157
00:07:21,599 --> 00:07:24,180
encryption and it leaks the size of the

158
00:07:24,180 --> 00:07:26,009
function or at least a bound on the size

159
00:07:26,009 --> 00:07:30,060
of a function so now how do we do this

160
00:07:30,060 --> 00:07:32,999
exactly so we will have to go a bit more

161
00:07:32,999 --> 00:07:35,969
in depth in the branching programs so a

162
00:07:35,969 --> 00:07:39,089
branching programs is a succession of

163
00:07:39,089 --> 00:07:44,520
states state v-0 v1 v2 and to progress

164
00:07:44,520 --> 00:07:46,500
from one state to the other there is we

165
00:07:46,500 --> 00:07:50,339
apply permutation according to choice

166
00:07:50,339 --> 00:07:53,490
variable which is to say if the viable

167
00:07:53,490 --> 00:07:55,469
x1 is equal to 1 we will go from this

168
00:07:55,469 --> 00:07:58,110
side to this one if x2 is equal to 0 we

169
00:07:58,110 --> 00:07:59,930
will go from this side to this one and

170
00:07:59,930 --> 00:08:02,819
at the end of the branching program

171
00:08:02,819 --> 00:08:04,830
evaluation if the state we reach is the

172
00:08:04,830 --> 00:08:07,379
first one the right top rightmost one

173
00:08:07,379 --> 00:08:09,870
the branching program returns one

174
00:08:09,870 --> 00:08:12,960
otherwise it returns zero so how do we

175
00:08:12,960 --> 00:08:15,270
write this down this is a multiplexer

176
00:08:15,270 --> 00:08:18,750
multiplexer so let's say that like VT of

177
00:08:18,750 --> 00:08:22,050
I will be this state it will be equal to

178
00:08:22,050 --> 00:08:25,589
this one if x2 is equal to 1 and you

179
00:08:25,589 --> 00:08:27,960
will be equal to this one if x2 is equal

180
00:08:27,960 --> 00:08:32,458
to 0 we follow the incoming arrows which

181
00:08:32,458 --> 00:08:34,589
is to say that VT minus 1 is a

182
00:08:34,589 --> 00:08:37,198
multiplexer of the viable choice the

183
00:08:37,198 --> 00:08:39,400
choice variable and the two previous

184
00:08:39,400 --> 00:08:45,280
locations so this can be rewritten as an

185
00:08:45,280 --> 00:08:48,470
polynomial equation like XD x VG minus

186
00:08:48,470 --> 00:08:50,330
one plus one minus sixty times EG minus

187
00:08:50,330 --> 00:08:53,510
one and now this is for branching

188
00:08:53,510 --> 00:08:55,430
programs on plain text and we want to do

189
00:08:55,430 --> 00:08:57,710
the same thing on cipher text and it's

190
00:08:57,710 --> 00:08:59,870
the exact same thing so instead of

191
00:08:59,870 --> 00:09:03,680
having plain text states we have

192
00:09:03,680 --> 00:09:07,520
encryption so we used to have like 100

193
00:09:07,520 --> 00:09:09,230
here we without an encryption of one

194
00:09:09,230 --> 00:09:10,940
year an encryption of zero and

195
00:09:10,940 --> 00:09:14,300
encryption of zero and we will have

196
00:09:14,300 --> 00:09:17,600
encrypted Troy's bit and to do the this

197
00:09:17,600 --> 00:09:19,400
operation we do the exact same thing on

198
00:09:19,400 --> 00:09:23,060
ciphertext so VT of I will be CT which

199
00:09:23,060 --> 00:09:25,100
is the encrypted Troy's bit to multiply

200
00:09:25,100 --> 00:09:28,250
we need to apply G minus 1 times VT

201
00:09:28,250 --> 00:09:30,230
minus one of J press G which is an

202
00:09:30,230 --> 00:09:32,390
encryption of one just a noiseless

203
00:09:32,390 --> 00:09:37,120
encryption of 1 minus CT times G minus 1

204
00:09:37,120 --> 00:09:40,430
applied to VT minus 1 of k so if not I'm

205
00:09:40,430 --> 00:09:42,700
seen as before but on ciphertext and

206
00:09:42,700 --> 00:09:45,710
this is what we want to analyze to show

207
00:09:45,710 --> 00:09:47,120
that it does not really leak any

208
00:09:47,120 --> 00:09:50,930
information so what do we do we will

209
00:09:50,930 --> 00:09:53,360
rewrite the choice ciphertext to be

210
00:09:53,360 --> 00:09:56,870
equal to matrix plus the choice bit

211
00:09:56,870 --> 00:09:59,780
times G it's just how the cipher text is

212
00:09:59,780 --> 00:10:02,450
formed and here you just have to trust

213
00:10:02,450 --> 00:10:05,060
me but if we reorder the terms we get

214
00:10:05,060 --> 00:10:08,270
this so what does this correspond to

215
00:10:08,270 --> 00:10:11,750
exactly this you can see is a previous

216
00:10:11,750 --> 00:10:14,480
step of computation this is VG minus 1

217
00:10:14,480 --> 00:10:17,930
so the previous state taken at the right

218
00:10:17,930 --> 00:10:21,140
place according to the choice meet so

219
00:10:21,140 --> 00:10:22,730
this will be the previous ciphertext and

220
00:10:22,730 --> 00:10:25,310
this will be an additional noise that

221
00:10:25,310 --> 00:10:28,670
comes from the operation we have made so

222
00:10:28,670 --> 00:10:31,820
if we should show that the additional

223
00:10:31,820 --> 00:10:33,440
noise does not leak any information

224
00:10:33,440 --> 00:10:35,180
about the operation that was made at

225
00:10:35,180 --> 00:10:37,340
this step we can just do an induction on

226
00:10:37,340 --> 00:10:40,580
each step and show that no nothing no

227
00:10:40,580 --> 00:10:42,380
information is leaked at all during the

228
00:10:42,380 --> 00:10:46,340
branching program so that's what we will

229
00:10:46,340 --> 00:10:50,050
be intent on doing and to do this we

230
00:10:50,050 --> 00:10:53,680
I will show the kalimba of our paper

231
00:10:53,680 --> 00:10:57,790
which is GSW randomization so let's say

232
00:10:57,790 --> 00:11:01,510
we have an encryption of 0 so just

233
00:11:01,510 --> 00:11:04,720
recycle text of the rule with an arrow

234
00:11:04,720 --> 00:11:07,060
victor e then we show that for any

235
00:11:07,060 --> 00:11:09,880
matrix V just any matrix if we do see

236
00:11:09,880 --> 00:11:14,170
times G minus one of v plus 0 times Z it

237
00:11:14,170 --> 00:11:16,300
is statistically English about from c

238
00:11:16,300 --> 00:11:18,339
prime i will explain what everything is

239
00:11:18,339 --> 00:11:21,070
so first observe that g minus 1 is no

240
00:11:21,070 --> 00:11:22,899
longer blue it's green which means that

241
00:11:22,899 --> 00:11:26,970
g minus 10 has to be a Gaussian so

242
00:11:26,970 --> 00:11:29,529
previously all we wanted was the g times

243
00:11:29,529 --> 00:11:33,490
G minus 1 V it was equal to me now we

244
00:11:33,490 --> 00:11:35,380
want G minus one ugly to be a Gaussian

245
00:11:35,380 --> 00:11:38,649
condition on this it's not hard to do it

246
00:11:38,649 --> 00:11:42,220
has been done by Gentry bakerton bike

247
00:11:42,220 --> 00:11:45,220
tonight on and it's just sampling a

248
00:11:45,220 --> 00:11:48,160
Gaussian on the lattice and the second

249
00:11:48,160 --> 00:11:50,350
thing we do is we add a small Gaussian

250
00:11:50,350 --> 00:11:54,610
noise in the form of Z and just by doing

251
00:11:54,610 --> 00:11:58,209
this we can show that real remaining

252
00:11:58,209 --> 00:12:00,220
ciphertext like this give the fresh

253
00:12:00,220 --> 00:12:03,010
encryption of 0 so it gives a new cipher

254
00:12:03,010 --> 00:12:05,770
text of 0 which has a Goshen parameter

255
00:12:05,770 --> 00:12:10,660
norm of e so it leaks the norm of the

256
00:12:10,660 --> 00:12:12,910
previous year but it is completely

257
00:12:12,910 --> 00:12:15,670
independent of the envy it does not

258
00:12:15,670 --> 00:12:18,300
matter at all what v's in this context

259
00:12:18,300 --> 00:12:21,610
so how do we modify our branching

260
00:12:21,610 --> 00:12:24,970
program evaluation this is a branching

261
00:12:24,970 --> 00:12:27,820
program evaluation first we take the

262
00:12:27,820 --> 00:12:31,120
Gaussian G minus 1 we replace the G

263
00:12:31,120 --> 00:12:33,880
minus 1 by the Gaussian one and then we

264
00:12:33,880 --> 00:12:35,980
add noise so here we are the two times

265
00:12:35,980 --> 00:12:37,839
because we have 2 times something times

266
00:12:37,839 --> 00:12:41,310
d minus 1 so if we reorder we are BTW

267
00:12:41,310 --> 00:12:44,350
which here is a cipher text of an

268
00:12:44,350 --> 00:12:46,959
encryption of 0 since as we have seen

269
00:12:46,959 --> 00:12:51,130
before city is quite a bt + XG so this

270
00:12:51,130 --> 00:12:53,500
is an encryption of 0 times G minus one

271
00:12:53,500 --> 00:12:55,720
of something plus a small arrow and

272
00:12:55,720 --> 00:12:59,020
second time the same thing which means

273
00:12:59,020 --> 00:13:01,089
that both of these can be replaced by

274
00:13:01,089 --> 00:13:01,900
ciphertext

275
00:13:01,900 --> 00:13:04,300
that increase zero and are completely

276
00:13:04,300 --> 00:13:08,530
independent of VT minus one and of J and

277
00:13:08,530 --> 00:13:11,680
VG minus 1 of k so everything that is

278
00:13:11,680 --> 00:13:16,030
leaked is on only the only d cage is

279
00:13:16,030 --> 00:13:20,440
dependent on the short vid city so we

280
00:13:20,440 --> 00:13:22,630
already hide all the permutations in the

281
00:13:22,630 --> 00:13:25,330
branching program and what we show is

282
00:13:25,330 --> 00:13:26,860
that it does not really matter that we

283
00:13:26,860 --> 00:13:29,200
lick some information about city because

284
00:13:29,200 --> 00:13:33,310
we only leak we only some new cipher

285
00:13:33,310 --> 00:13:34,990
text with deeper which depends on City

286
00:13:34,990 --> 00:13:38,560
so let's see how the noise evolves so we

287
00:13:38,560 --> 00:13:40,870
have our first first encrypted state

288
00:13:40,870 --> 00:13:43,660
which has noisezero we start with the

289
00:13:43,660 --> 00:13:45,970
noiseless encryptions then we do one

290
00:13:45,970 --> 00:13:49,060
round of operation so the noise on the

291
00:13:49,060 --> 00:13:52,690
new encrypted state will be the noise on

292
00:13:52,690 --> 00:13:54,760
the previous one plus something that

293
00:13:54,760 --> 00:13:57,970
depends on c1 so a Gaussian that depends

294
00:13:57,970 --> 00:14:02,350
on the error in c1 so it only depends on

295
00:14:02,350 --> 00:14:04,870
this version then we are we do the

296
00:14:04,870 --> 00:14:06,760
second step it will be the previous

297
00:14:06,760 --> 00:14:09,510
noise plus a Goshen that depends on c2

298
00:14:09,510 --> 00:14:11,830
so it will be the sum of two versions

299
00:14:11,830 --> 00:14:13,870
one that depends on c11 that dependency

300
00:14:13,870 --> 00:14:16,120
two and then we just repeat this until

301
00:14:16,120 --> 00:14:20,380
the last step so at the last step we

302
00:14:20,380 --> 00:14:22,750
will get something that the noise in the

303
00:14:22,750 --> 00:14:27,910
final ciphered the final state will only

304
00:14:27,910 --> 00:14:31,750
be the son of AB Goshen's that depend on

305
00:14:31,750 --> 00:14:35,410
the other choices a bit so what we can

306
00:14:35,410 --> 00:14:39,400
simply do is bad the branching program

307
00:14:39,400 --> 00:14:44,170
just add use less steps if you like put

308
00:14:44,170 --> 00:14:49,030
in humble amount of them so that each

309
00:14:49,030 --> 00:14:51,010
choice would be the same use the

310
00:14:51,010 --> 00:14:53,230
same number of time this way we do not

311
00:14:53,230 --> 00:14:55,930
leak all we leaked was the number of

312
00:14:55,930 --> 00:14:58,060
time each choice bit with you now they

313
00:14:58,060 --> 00:14:59,890
are all use the same number of time so

314
00:14:59,890 --> 00:15:02,860
all we leak is the size of the branching

315
00:15:02,860 --> 00:15:07,050
program and like this we have achieved

316
00:15:07,050 --> 00:15:09,790
secret privacy sees we do not no longer

317
00:15:09,790 --> 00:15:11,779
League either

318
00:15:11,779 --> 00:15:15,379
mutations no the choice beaches at each

319
00:15:15,379 --> 00:15:20,319
step and that's it

