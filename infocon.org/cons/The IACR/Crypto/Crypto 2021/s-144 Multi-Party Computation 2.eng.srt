1
00:00:03,120 --> 00:00:04,560
you're welcome to start the session have

2
00:00:04,560 --> 00:00:06,959
a good one

3
00:00:09,440 --> 00:00:12,719
all right to welcome everybody to the uh

4
00:00:12,719 --> 00:00:15,839
session on multi-party computation part

5
00:00:15,839 --> 00:00:18,240
two um

6
00:00:18,240 --> 00:00:21,439
my name is uh sandro coretti drayton

7
00:00:21,439 --> 00:00:23,119
be chairing this session

8
00:00:23,119 --> 00:00:25,279
um the format is we have too many

9
00:00:25,279 --> 00:00:27,519
sessions um

10
00:00:27,519 --> 00:00:30,320
that are separated by a 10-minute break

11
00:00:30,320 --> 00:00:31,920
in each mini session

12
00:00:31,920 --> 00:00:33,840
there will be five-minute talks and the

13
00:00:33,840 --> 00:00:35,120
question

14
00:00:35,120 --> 00:00:38,000
all the questions will be

15
00:00:38,000 --> 00:00:39,440
answered at the end of the of the

16
00:00:39,440 --> 00:00:41,280
mini-sessions

17
00:00:41,280 --> 00:00:43,280
for your questions please follow the

18
00:00:43,280 --> 00:00:45,840
link that kay just posted and then post

19
00:00:45,840 --> 00:00:48,079
them on zulip

20
00:00:48,079 --> 00:00:50,640
the first talk

21
00:00:50,640 --> 00:00:53,360
is about broadcast optimal to round nbc

22
00:00:53,360 --> 00:00:55,280
with an honest majority

23
00:00:55,280 --> 00:01:00,000
um and divya ravi will give the topic

24
00:01:00,000 --> 00:01:01,199
yeah

25
00:01:01,199 --> 00:01:03,760
thank you uh so this talk is about

26
00:01:03,760 --> 00:01:05,920
broadcast optimal two-round mpc with an

27
00:01:05,920 --> 00:01:08,240
honest majority and this is based on a

28
00:01:08,240 --> 00:01:10,640
joint work with ivan damgard bernardo

29
00:01:10,640 --> 00:01:13,040
mangri

30
00:01:14,960 --> 00:01:17,360
so let me begin with what mpc or secure

31
00:01:17,360 --> 00:01:19,680
multi-party computation means suppose

32
00:01:19,680 --> 00:01:21,920
you have n mutually distrusting parties

33
00:01:21,920 --> 00:01:24,240
out of which t are corrupt and the goal

34
00:01:24,240 --> 00:01:25,759
is that they want to compute some

35
00:01:25,759 --> 00:01:27,360
combined function on their private

36
00:01:27,360 --> 00:01:30,240
inputs now an mpc protocol gives them a

37
00:01:30,240 --> 00:01:32,640
way to do so while ensuring two main

38
00:01:32,640 --> 00:01:35,439
properties the first is correctness that

39
00:01:35,439 --> 00:01:38,159
is at the end of the protocol the output

40
00:01:38,159 --> 00:01:40,079
is the correct function output and the

41
00:01:40,079 --> 00:01:42,240
next is privacy meaning that nothing

42
00:01:42,240 --> 00:01:43,759
beyond the function output should be

43
00:01:43,759 --> 00:01:45,040
revealed

44
00:01:45,040 --> 00:01:47,040
now there are many types of mpc

45
00:01:47,040 --> 00:01:49,200
protocols which give different types of

46
00:01:49,200 --> 00:01:51,200
guarantees based on how robust the

47
00:01:51,200 --> 00:01:52,799
protocol is

48
00:01:52,799 --> 00:01:54,479
the weakest one is called selective

49
00:01:54,479 --> 00:01:57,119
abort and in such protocols it may so

50
00:01:57,119 --> 00:01:59,119
happen that some of the honest parties

51
00:01:59,119 --> 00:02:01,840
obtain the output while the others don't

52
00:02:01,840 --> 00:02:03,759
a slightly stronger notion is called

53
00:02:03,759 --> 00:02:06,399
unanimous support and in such protocols

54
00:02:06,399 --> 00:02:08,479
either all the honest parties obtain the

55
00:02:08,479 --> 00:02:11,440
output or all of them output bought

56
00:02:11,440 --> 00:02:13,840
an even stronger notion is identifiable

57
00:02:13,840 --> 00:02:16,160
award and in such protocols if the

58
00:02:16,160 --> 00:02:18,000
honest parties are not able to get the

59
00:02:18,000 --> 00:02:20,640
output then they identify at least one

60
00:02:20,640 --> 00:02:22,720
corrupt party

61
00:02:22,720 --> 00:02:24,720
now in all these three notions we saw so

62
00:02:24,720 --> 00:02:26,959
far it may happen that the adversary

63
00:02:26,959 --> 00:02:28,879
gets the output but the honest parties

64
00:02:28,879 --> 00:02:31,040
don't so there is a stronger notion

65
00:02:31,040 --> 00:02:32,400
called fairness

66
00:02:32,400 --> 00:02:34,480
in which like if the corrupt person gets

67
00:02:34,480 --> 00:02:37,519
the output then so do the honest parties

68
00:02:37,519 --> 00:02:39,440
and the last and strongest notion is

69
00:02:39,440 --> 00:02:41,519
guaranteed output delivery and in such

70
00:02:41,519 --> 00:02:43,760
protocols no matter what the adversary

71
00:02:43,760 --> 00:02:45,840
does he cannot prevent the honest

72
00:02:45,840 --> 00:02:48,640
parties from obtaining the output

73
00:02:48,640 --> 00:02:51,120
now let's uh understand the motivation

74
00:02:51,120 --> 00:02:53,200
and the problem that we are studying so

75
00:02:53,200 --> 00:02:55,519
the first basic question is that how

76
00:02:55,519 --> 00:02:57,519
many rounds are needed for an mpc

77
00:02:57,519 --> 00:03:00,959
protocol and the answer is at least two

78
00:03:00,959 --> 00:03:03,120
this is because if you had a one-round

79
00:03:03,120 --> 00:03:04,480
mpc protocol

80
00:03:04,480 --> 00:03:06,080
then the adversary could launch

81
00:03:06,080 --> 00:03:08,560
something called the residual attack

82
00:03:08,560 --> 00:03:09,760
so now

83
00:03:09,760 --> 00:03:11,760
there are many two-round mpc protocols

84
00:03:11,760 --> 00:03:14,720
in the literature but almost all of them

85
00:03:14,720 --> 00:03:17,599
use broadcast in both the rounds and our

86
00:03:17,599 --> 00:03:20,000
goal is that we want to minimize the use

87
00:03:20,000 --> 00:03:23,040
of broadcast into round mpc

88
00:03:23,040 --> 00:03:25,280
and why we want to minimize it that's

89
00:03:25,280 --> 00:03:27,360
because broadcast is an expensive

90
00:03:27,360 --> 00:03:29,760
resource and if you want to realize

91
00:03:29,760 --> 00:03:32,319
broadcast using an interactive protocol

92
00:03:32,319 --> 00:03:34,239
over point-to-point channel then that

93
00:03:34,239 --> 00:03:36,480
would incur a lot of communication and

94
00:03:36,480 --> 00:03:37,360
rounds

95
00:03:37,360 --> 00:03:39,680
so what we are trying to understand is

96
00:03:39,680 --> 00:03:41,840
that what kind of guarantees can

97
00:03:41,840 --> 00:03:44,319
two-round mpc give us if the use of

98
00:03:44,319 --> 00:03:47,040
broadcast is limited only to one round

99
00:03:47,040 --> 00:03:49,280
or we don't allow broadcast in either of

100
00:03:49,280 --> 00:03:51,440
the two rounds

101
00:03:51,440 --> 00:03:53,360
now we are not the first people to ask

102
00:03:53,360 --> 00:03:55,439
this question this was already resolved

103
00:03:55,439 --> 00:03:57,680
for the case of dishonest majority by

104
00:03:57,680 --> 00:04:00,480
the work of gohan and others now they

105
00:04:00,480 --> 00:04:02,879
considered all types of possibilities of

106
00:04:02,879 --> 00:04:05,040
using broadcast in both the rounds in

107
00:04:05,040 --> 00:04:07,599
one of the rounds and none of the rounds

108
00:04:07,599 --> 00:04:09,760
and for each of them they showed that

109
00:04:09,760 --> 00:04:11,920
what is the best possible guarantee that

110
00:04:11,920 --> 00:04:13,680
can be achieved for the case of

111
00:04:13,680 --> 00:04:15,760
dishonest majority

112
00:04:15,760 --> 00:04:17,759
now we want to address the same question

113
00:04:17,759 --> 00:04:20,478
for the case of honest majority assuming

114
00:04:20,478 --> 00:04:22,720
access to a public key infrastructure or

115
00:04:22,720 --> 00:04:24,320
pki

116
00:04:24,320 --> 00:04:26,000
now beginning with the setting where you

117
00:04:26,000 --> 00:04:28,240
allow broadcast in both the rounds in

118
00:04:28,240 --> 00:04:30,560
addition to point-to-point channel it is

119
00:04:30,560 --> 00:04:32,479
already known that even the strongest

120
00:04:32,479 --> 00:04:34,720
notion of guaranteed output delivery can

121
00:04:34,720 --> 00:04:37,040
be achieved meaning that everything

122
00:04:37,040 --> 00:04:39,040
weaker can also be achieved

123
00:04:39,040 --> 00:04:40,800
now this follows from the two round

124
00:04:40,800 --> 00:04:43,280
construction of gordon and others who

125
00:04:43,280 --> 00:04:45,440
use broadcast in both the rounds and

126
00:04:45,440 --> 00:04:48,320
they achieve guaranteed output delivery

127
00:04:48,320 --> 00:04:50,320
next we look at the other extreme in

128
00:04:50,320 --> 00:04:52,560
which we don't allow broadcast in both

129
00:04:52,560 --> 00:04:54,400
the rounds so

130
00:04:54,400 --> 00:04:56,800
here for this one we showed that you

131
00:04:56,800 --> 00:04:59,040
cannot get unanimous support meaning

132
00:04:59,040 --> 00:05:01,199
that anything stronger would also be

133
00:05:01,199 --> 00:05:02,400
impossible

134
00:05:02,400 --> 00:05:04,479
uh so what this means is that the best

135
00:05:04,479 --> 00:05:06,639
you can hope for in this setting will be

136
00:05:06,639 --> 00:05:09,199
selective award and for this there was

137
00:05:09,199 --> 00:05:11,440
already a matching positive result which

138
00:05:11,440 --> 00:05:14,000
was the work of jain and others who have

139
00:05:14,000 --> 00:05:15,759
a two round construction achieving

140
00:05:15,759 --> 00:05:17,759
selective abort and it does not use

141
00:05:17,759 --> 00:05:19,759
broadcast

142
00:05:19,759 --> 00:05:21,440
next we look at the setting where you

143
00:05:21,440 --> 00:05:23,919
allow broadcast only in the first round

144
00:05:23,919 --> 00:05:26,080
and for this it turned out that again

145
00:05:26,080 --> 00:05:27,759
the strongest notion of guaranteed

146
00:05:27,759 --> 00:05:30,080
output delivery is possible

147
00:05:30,080 --> 00:05:32,160
and lastly we looked at the setting

148
00:05:32,160 --> 00:05:34,000
where broadcast is used only in the

149
00:05:34,000 --> 00:05:36,560
second round and actually this one

150
00:05:36,560 --> 00:05:38,080
turned out to be the most interesting

151
00:05:38,080 --> 00:05:40,880
one for the case of honest majority

152
00:05:40,880 --> 00:05:43,680
and for this we showed that fairness and

153
00:05:43,680 --> 00:05:45,520
therefore guaranteed output delivery are

154
00:05:45,520 --> 00:05:48,080
impossible meaning that identifiable

155
00:05:48,080 --> 00:05:50,560
abort is the best that you can hope for

156
00:05:50,560 --> 00:05:52,880
and for this we also gave a matching

157
00:05:52,880 --> 00:05:54,960
positive result which is a two-round

158
00:05:54,960 --> 00:05:56,880
construction achieving identifiable

159
00:05:56,880 --> 00:05:59,199
abort that uses broadcast only in the

160
00:05:59,199 --> 00:06:00,479
second round

161
00:06:00,479 --> 00:06:03,199
and for this construction an important

162
00:06:03,199 --> 00:06:06,000
building block is a tool that we call as

163
00:06:06,000 --> 00:06:08,319
one or nothing secret sharing

164
00:06:08,319 --> 00:06:10,080
now this is a special type of secret

165
00:06:10,080 --> 00:06:12,240
sharing in which the dealer can share

166
00:06:12,240 --> 00:06:15,280
multiple secrets simultaneously and the

167
00:06:15,280 --> 00:06:17,840
parties can vote for which index they

168
00:06:17,840 --> 00:06:19,360
want to reconstruct

169
00:06:19,360 --> 00:06:21,840
and they also have an option to abstain

170
00:06:21,840 --> 00:06:24,080
if they are unsure about which value to

171
00:06:24,080 --> 00:06:26,800
reconstruct and this implicitly means

172
00:06:26,800 --> 00:06:28,800
that they will go along with whatever is

173
00:06:28,800 --> 00:06:30,560
the majority

174
00:06:30,560 --> 00:06:32,800
so the guarantee for this kind of secret

175
00:06:32,800 --> 00:06:34,800
sharing is that if there are no

176
00:06:34,800 --> 00:06:36,960
contradictory votes and majority of the

177
00:06:36,960 --> 00:06:39,919
parties vote for the same index then the

178
00:06:39,919 --> 00:06:41,440
secret at that index will be

179
00:06:41,440 --> 00:06:42,880
reconstructed

180
00:06:42,880 --> 00:06:44,560
so this tool turned out to be very

181
00:06:44,560 --> 00:06:46,639
useful for us for our construction with

182
00:06:46,639 --> 00:06:48,720
identifiable board and we believe that

183
00:06:48,720 --> 00:06:51,599
it may also be of independent interest

184
00:06:51,599 --> 00:06:54,240
and with this i conclude my talk and

185
00:06:54,240 --> 00:06:57,199
thank you for listening

186
00:06:57,199 --> 00:06:58,800
thank you very much

187
00:06:58,800 --> 00:07:00,160
[Music]

188
00:07:00,160 --> 00:07:02,080
again if you have any questions please

189
00:07:02,080 --> 00:07:03,520
post them in there

190
00:07:03,520 --> 00:07:05,360
to the chat and we'll move on with the

191
00:07:05,360 --> 00:07:07,599
next one

192
00:07:07,599 --> 00:07:11,280
can you see my screen and hear me

193
00:07:11,280 --> 00:07:12,400
both

194
00:07:12,400 --> 00:07:15,280
all right um the next talk will be given

195
00:07:15,280 --> 00:07:18,960
by akshayaram srinivasan and it will be

196
00:07:18,960 --> 00:07:20,720
about three-round secure multi-party

197
00:07:20,720 --> 00:07:22,880
computation from blackbox to round

198
00:07:22,880 --> 00:07:25,120
oblivious transfer

199
00:07:25,120 --> 00:07:26,880
so thanks for the introduction and this

200
00:07:26,880 --> 00:07:30,080
is based on joint work with uh

201
00:07:30,080 --> 00:07:32,000
so let me

202
00:07:32,000 --> 00:07:34,000
quickly recall this notion of secure

203
00:07:34,000 --> 00:07:36,479
multi-party computation so here we have

204
00:07:36,479 --> 00:07:38,560
multiple parties and each party has its

205
00:07:38,560 --> 00:07:41,120
own private input and the private input

206
00:07:41,120 --> 00:07:43,919
of the party is denoted by x i the

207
00:07:43,919 --> 00:07:46,560
parties also have a description of some

208
00:07:46,560 --> 00:07:48,639
function f and they want to learn the

209
00:07:48,639 --> 00:07:50,319
output of this function applied on their

210
00:07:50,319 --> 00:07:51,759
private inputs

211
00:07:51,759 --> 00:07:54,080
so secure multi-party computation is a

212
00:07:54,080 --> 00:07:56,639
distributed protocol that is run between

213
00:07:56,639 --> 00:07:58,720
these parties where the parties send and

214
00:07:58,720 --> 00:08:00,560
receive messages as well as do some

215
00:08:00,560 --> 00:08:02,160
local computation

216
00:08:02,160 --> 00:08:04,879
and we want this protocol to satisfy two

217
00:08:04,879 --> 00:08:06,879
properties the first is the correctness

218
00:08:06,879 --> 00:08:08,800
requirement which states that at the end

219
00:08:08,800 --> 00:08:11,199
of the protocol all the parties learn

220
00:08:11,199 --> 00:08:12,960
the output of this function applied on

221
00:08:12,960 --> 00:08:14,560
their private inputs

222
00:08:14,560 --> 00:08:16,160
and the second is the security

223
00:08:16,160 --> 00:08:18,080
requirement which states that an

224
00:08:18,080 --> 00:08:20,080
adversary which corrupts an arbitrary

225
00:08:20,080 --> 00:08:22,479
subset of the parties cannot learn

226
00:08:22,479 --> 00:08:24,720
anything about the honest party's inputs

227
00:08:24,720 --> 00:08:26,639
except what is leaked by the output of

228
00:08:26,639 --> 00:08:28,720
this functionality

229
00:08:28,720 --> 00:08:30,639
so in this talk we'll mainly focus on

230
00:08:30,639 --> 00:08:32,880
the semi honest security setting wherein

231
00:08:32,880 --> 00:08:34,719
the adversarial parties follow the

232
00:08:34,719 --> 00:08:37,440
protocol description but the adversary

233
00:08:37,440 --> 00:08:39,519
is allowed to corrupt a majority of the

234
00:08:39,519 --> 00:08:41,120
parties which is called as the dishonest

235
00:08:41,120 --> 00:08:42,880
majority

236
00:08:42,880 --> 00:08:45,120
and one of the key factors that

237
00:08:45,120 --> 00:08:46,880
determine the round

238
00:08:46,880 --> 00:08:48,720
determine the efficiency of an mpc

239
00:08:48,720 --> 00:08:51,519
protocol is its around complexity and we

240
00:08:51,519 --> 00:08:53,680
want to minimize the round complexity of

241
00:08:53,680 --> 00:08:56,640
an mpc protocol as much as possible

242
00:08:56,640 --> 00:08:58,000
so what do we know about round

243
00:08:58,000 --> 00:09:00,560
complexity of semi honest mpc

244
00:09:00,560 --> 00:09:02,480
so a folklore result that was formally

245
00:09:02,480 --> 00:09:04,560
shown in the work of haley v lindelof in

246
00:09:04,560 --> 00:09:07,120
case is that two rounds are necessary to

247
00:09:07,120 --> 00:09:09,360
securely compute certain uh

248
00:09:09,360 --> 00:09:11,279
functionalities

249
00:09:11,279 --> 00:09:13,279
and for the special case where there are

250
00:09:13,279 --> 00:09:15,839
only two parties the work of yao from

251
00:09:15,839 --> 00:09:18,640
the 1980 showed that you can construct a

252
00:09:18,640 --> 00:09:20,480
two-round protocol for securely

253
00:09:20,480 --> 00:09:23,040
computing any two-party functionality

254
00:09:23,040 --> 00:09:26,320
based on a two-round oblivious transfer

255
00:09:26,320 --> 00:09:28,640
so let me uh briefly recall this notion

256
00:09:28,640 --> 00:09:31,040
of oblivious transfer so this is a

257
00:09:31,040 --> 00:09:33,600
special two-party functionality between

258
00:09:33,600 --> 00:09:36,880
a sender who is on the left has inputs

259
00:09:36,880 --> 00:09:40,240
m0 m1 receiver on the right has a choice

260
00:09:40,240 --> 00:09:42,320
bit b and the receiver wants to learn

261
00:09:42,320 --> 00:09:43,200
the

262
00:09:43,200 --> 00:09:44,720
the string md

263
00:09:44,720 --> 00:09:46,640
so for security we require that the

264
00:09:46,640 --> 00:09:48,480
sender does not learn any information

265
00:09:48,480 --> 00:09:50,560
about the receiver's choice and the

266
00:09:50,560 --> 00:09:52,320
receiver in turn should not learn any

267
00:09:52,320 --> 00:09:54,480
information about the senders others

268
00:09:54,480 --> 00:09:56,959
namely m1 minus

269
00:09:56,959 --> 00:09:58,800
so in this work we are interested in a

270
00:09:58,800 --> 00:10:01,040
two round oblivious transfer protocol so

271
00:10:01,040 --> 00:10:03,120
in the first round the receiver sends a

272
00:10:03,120 --> 00:10:05,200
message to the sender

273
00:10:05,200 --> 00:10:07,680
ah the sender uses this message and its

274
00:10:07,680 --> 00:10:11,360
two inputs and computes a algorithm ot2

275
00:10:11,360 --> 00:10:13,440
and sends the result

276
00:10:13,440 --> 00:10:15,519
to this receiver

277
00:10:15,519 --> 00:10:17,839
and the receiver can now decode the

278
00:10:17,839 --> 00:10:20,079
sender's message using this algorithm

279
00:10:20,079 --> 00:10:21,600
ot3

280
00:10:21,600 --> 00:10:23,200
using the choice bit b and the

281
00:10:23,200 --> 00:10:25,760
randomness r that was used to generate

282
00:10:25,760 --> 00:10:28,320
the first round message

283
00:10:28,320 --> 00:10:30,720
so what yahoo's

284
00:10:30,720 --> 00:10:33,200
result showed that is that

285
00:10:33,200 --> 00:10:35,440
one can use a two-round oblivious

286
00:10:35,440 --> 00:10:37,519
transfer protocol to construct a

287
00:10:37,519 --> 00:10:39,200
two-round protocol for securely

288
00:10:39,200 --> 00:10:42,640
computing any two-party functionality

289
00:10:42,640 --> 00:10:44,399
and furthermore we know that two-round

290
00:10:44,399 --> 00:10:46,000
oblivious transfer is the minimal

291
00:10:46,000 --> 00:10:47,680
assumption from which we can construct a

292
00:10:47,680 --> 00:10:49,519
two round uh two-party computation

293
00:10:49,519 --> 00:10:52,079
protocol

294
00:10:52,560 --> 00:10:54,800
for the case of more than two parties

295
00:10:54,800 --> 00:10:56,880
the first round optimal construction was

296
00:10:56,880 --> 00:10:59,600
given by gerget all in 2014 and this was

297
00:10:59,600 --> 00:11:01,279
based on a strong assumption that

298
00:11:01,279 --> 00:11:04,399
indistinguishability obfuscation exists

299
00:11:04,399 --> 00:11:06,480
subsequent works uh improve the

300
00:11:06,480 --> 00:11:08,560
assumptions from which one can construct

301
00:11:08,560 --> 00:11:11,760
a two-round protocol and recent works

302
00:11:11,760 --> 00:11:13,839
bender buddha and lynn and gergens

303
00:11:13,839 --> 00:11:16,160
gave a construction based on two round

304
00:11:16,160 --> 00:11:17,760
oblivious transformers

305
00:11:17,760 --> 00:11:19,680
so for both the two party and the

306
00:11:19,680 --> 00:11:21,760
multi-party setting we knew of round

307
00:11:21,760 --> 00:11:24,399
optimal constructions based on uh

308
00:11:24,399 --> 00:11:26,079
the minimal computational hardness

309
00:11:26,079 --> 00:11:28,640
assumption namely two round 40

310
00:11:28,640 --> 00:11:29,440
but

311
00:11:29,440 --> 00:11:31,120
there is one crucial difference between

312
00:11:31,120 --> 00:11:34,000
the two party and the multi-parties

313
00:11:34,000 --> 00:11:35,519
specifically

314
00:11:35,519 --> 00:11:38,079
yahoo's protocol made black box use of a

315
00:11:38,079 --> 00:11:40,480
two-round oblivious transfer whereas the

316
00:11:40,480 --> 00:11:43,040
recent multi-party uh protocols made

317
00:11:43,040 --> 00:11:45,120
non-black box use of this oblivious

318
00:11:45,120 --> 00:11:46,240
transfer

319
00:11:46,240 --> 00:11:48,160
so let me explain what is meant by black

320
00:11:48,160 --> 00:11:50,720
box versus non-black boxes

321
00:11:50,720 --> 00:11:52,880
so a cryptographic protocol is said to

322
00:11:52,880 --> 00:11:55,920
make a black box use of a primitive such

323
00:11:55,920 --> 00:11:57,680
as an oblivious transfer

324
00:11:57,680 --> 00:12:00,079
if the protocol only makes

325
00:12:00,079 --> 00:12:02,160
input output calls to the algorithms

326
00:12:02,160 --> 00:12:05,040
that implement this building block

327
00:12:05,040 --> 00:12:07,279
on the other hand a protocol is said to

328
00:12:07,279 --> 00:12:10,560
make a non-black box use of such an

329
00:12:10,560 --> 00:12:12,320
oblivious transfer if the the

330
00:12:12,320 --> 00:12:14,240
implementation of the protocol requires

331
00:12:14,240 --> 00:12:15,360
the code

332
00:12:15,360 --> 00:12:17,040
of out this

333
00:12:17,040 --> 00:12:19,680
oblivious transfer is implement

334
00:12:19,680 --> 00:12:22,399
and generally black box protocol

335
00:12:22,399 --> 00:12:24,560
tend to be much more efficient than

336
00:12:24,560 --> 00:12:27,600
non-black box protocols and hence uh

337
00:12:27,600 --> 00:12:29,440
constructing black box protocols is

338
00:12:29,440 --> 00:12:31,360
viewed as the first step towards uh

339
00:12:31,360 --> 00:12:33,600
practical effections

340
00:12:33,600 --> 00:12:36,000
so a natural question to ask is whether

341
00:12:36,000 --> 00:12:38,720
we can construct two-round multi-party

342
00:12:38,720 --> 00:12:40,720
computation protocols that only make

343
00:12:40,720 --> 00:12:42,800
black box use of a two-round ot just

344
00:12:42,800 --> 00:12:45,120
like in the two-party case

345
00:12:45,120 --> 00:12:47,279
unfortunately uh the work of apple

346
00:12:47,279 --> 00:12:49,040
government all showed that

347
00:12:49,040 --> 00:12:50,399
such a

348
00:12:50,399 --> 00:12:52,560
black box protocol cannot exist

349
00:12:52,560 --> 00:12:54,639
specifically even for the case of three

350
00:12:54,639 --> 00:12:56,880
parties one cannot use a two round

351
00:12:56,880 --> 00:12:58,880
obvious transfer as a black box to

352
00:12:58,880 --> 00:13:01,839
construct a two round protocol

353
00:13:01,839 --> 00:13:03,680
so a question that was left open in

354
00:13:03,680 --> 00:13:05,839
their work is that can we construct a

355
00:13:05,839 --> 00:13:07,760
three-round protocol

356
00:13:07,760 --> 00:13:09,920
for any functionality that only makes

357
00:13:09,920 --> 00:13:12,240
black box use of a two-round oblivious

358
00:13:12,240 --> 00:13:13,839
transfer

359
00:13:13,839 --> 00:13:15,920
so in this work we resolve this question

360
00:13:15,920 --> 00:13:17,279
in the positive

361
00:13:17,279 --> 00:13:19,279
so specifically in the semi honest

362
00:13:19,279 --> 00:13:21,760
setting we show a three-round protocol

363
00:13:21,760 --> 00:13:23,600
for computing every multi-party

364
00:13:23,600 --> 00:13:25,440
functionality against semi-honest

365
00:13:25,440 --> 00:13:28,160
adversaries that only make a black box

366
00:13:28,160 --> 00:13:30,880
use of a two round semi on a secure put

367
00:13:30,880 --> 00:13:33,760
so this resolves the round complexity of

368
00:13:33,760 --> 00:13:36,240
black box mpc from the minimal

369
00:13:36,240 --> 00:13:37,600
assumption

370
00:13:37,600 --> 00:13:39,600
so we also consider the malicious

371
00:13:39,600 --> 00:13:41,519
setting where we assume the existence of

372
00:13:41,519 --> 00:13:44,399
a common reference or a random stream

373
00:13:44,399 --> 00:13:46,880
so here we show a three round protocol

374
00:13:46,880 --> 00:13:48,560
for computing every multi-party

375
00:13:48,560 --> 00:13:50,800
functionality in the crs model that is

376
00:13:50,800 --> 00:13:53,279
secure against malicious adversaries and

377
00:13:53,279 --> 00:13:55,680
this protocol makes black box use of a

378
00:13:55,680 --> 00:13:58,480
two-round malicious secure code that has

379
00:13:58,480 --> 00:14:00,639
a certain stronger

380
00:14:00,639 --> 00:14:02,320
form of security for the receiver

381
00:14:02,320 --> 00:14:04,880
section so namely we are

382
00:14:04,880 --> 00:14:07,680
require a certain form of adaptive

383
00:14:07,680 --> 00:14:09,360
security on the receiver side which we

384
00:14:09,360 --> 00:14:12,639
call as ap vocal uh receiver security

385
00:14:12,639 --> 00:14:14,880
and an interesting open problem is to

386
00:14:14,880 --> 00:14:16,880
remove this need for equal receiver

387
00:14:16,880 --> 00:14:18,800
security from our

388
00:14:18,800 --> 00:14:20,320
analysis

389
00:14:20,320 --> 00:14:22,880
and uh yeah that's it thank you for your

390
00:14:22,880 --> 00:14:25,279
attention

391
00:14:26,720 --> 00:14:28,800
okay thank you very much do you just

392
00:14:28,800 --> 00:14:32,479
want to continue with your next stop

393
00:14:52,240 --> 00:14:54,880
so can you see my screen

394
00:14:54,880 --> 00:14:58,120
uh yep

395
00:14:59,040 --> 00:15:01,360
all right take it away

396
00:15:01,360 --> 00:15:03,839
yeah so uh i'm now going to talk about

397
00:15:03,839 --> 00:15:06,639
the round complexity of uh black box mpc

398
00:15:06,639 --> 00:15:08,560
in the plain model and this is based on

399
00:15:08,560 --> 00:15:13,199
joint work with uh alishai dakshita

400
00:15:13,760 --> 00:15:14,480
so

401
00:15:14,480 --> 00:15:16,399
in this talk we are interested in

402
00:15:16,399 --> 00:15:18,320
answering the following question so what

403
00:15:18,320 --> 00:15:20,959
is the round complexity of black box

404
00:15:20,959 --> 00:15:24,560
malicious secure npc in the plane model

405
00:15:24,560 --> 00:15:27,760
so by plane model we uh mean a setting

406
00:15:27,760 --> 00:15:29,519
where we do not assume any form of

407
00:15:29,519 --> 00:15:32,160
trusted setup such as a common random or

408
00:15:32,160 --> 00:15:34,480
a reference string now we assume any

409
00:15:34,480 --> 00:15:36,240
sort of correlated randomness that is

410
00:15:36,240 --> 00:15:38,399
shared between the parties so this is

411
00:15:38,399 --> 00:15:40,160
the most basic setting under which we

412
00:15:40,160 --> 00:15:43,040
can construct an uh malicious secure mpc

413
00:15:43,040 --> 00:15:44,880
protocol and it's important to

414
00:15:44,880 --> 00:15:46,639
understand the round complexity of

415
00:15:46,639 --> 00:15:49,839
blackhawks protocols in the plane model

416
00:15:49,839 --> 00:15:52,000
so let me briefly uh

417
00:15:52,000 --> 00:15:54,880
recall the prior work in this area

418
00:15:54,880 --> 00:15:57,279
so the work of garget all from 2016

419
00:15:57,279 --> 00:15:58,399
showed that

420
00:15:58,399 --> 00:16:00,240
four rounds are necessary in order to

421
00:16:00,240 --> 00:16:02,399
construct malicious secure protocols in

422
00:16:02,399 --> 00:16:03,680
the plane mode

423
00:16:03,680 --> 00:16:06,160
and this lower bone holds even when we

424
00:16:06,160 --> 00:16:08,240
consider protocols that make non-black

425
00:16:08,240 --> 00:16:11,279
box use of cryptographic primitives

426
00:16:11,279 --> 00:16:13,440
a sequence of recent exciting works have

427
00:16:13,440 --> 00:16:15,120
shown that four rounds are in fact

428
00:16:15,120 --> 00:16:17,120
sufficient to construct a

429
00:16:17,120 --> 00:16:18,720
general-purpose secure multi-party

430
00:16:18,720 --> 00:16:20,240
computation against malicious

431
00:16:20,240 --> 00:16:22,560
adversaries in the play modes

432
00:16:22,560 --> 00:16:24,560
unfortunately all these works make

433
00:16:24,560 --> 00:16:26,240
non-black box use of cryptographic

434
00:16:26,240 --> 00:16:28,000
primitives and hence have a huge

435
00:16:28,000 --> 00:16:30,480
computational cost

436
00:16:30,480 --> 00:16:32,160
on the other hand the state-of-the-art

437
00:16:32,160 --> 00:16:34,240
black box protocols in the plane model

438
00:16:34,240 --> 00:16:36,320
have a large round competency

439
00:16:36,320 --> 00:16:37,680
for instance

440
00:16:37,680 --> 00:16:40,399
the work of goel from 2011 gave a black

441
00:16:40,399 --> 00:16:42,639
box protocol whose round complexity was

442
00:16:42,639 --> 00:16:44,720
more than 50.

443
00:16:44,720 --> 00:16:46,720
so a question we are interested here is

444
00:16:46,720 --> 00:16:49,120
that is such a large round complexity

445
00:16:49,120 --> 00:16:50,959
necessary in order to construct black

446
00:16:50,959 --> 00:16:53,519
box protocols

447
00:16:53,519 --> 00:16:55,360
so in this work we show that this is not

448
00:16:55,360 --> 00:16:57,440
the case

449
00:16:57,440 --> 00:16:59,120
for an interesting sub class of

450
00:16:59,120 --> 00:17:01,120
functions that i will explain in a few

451
00:17:01,120 --> 00:17:03,519
moments we construct a round optimal

452
00:17:03,519 --> 00:17:04,640
protocol

453
00:17:04,640 --> 00:17:06,319
that only makes black boxes of

454
00:17:06,319 --> 00:17:07,919
cryptographic primitives in the plain

455
00:17:07,919 --> 00:17:09,359
word

456
00:17:09,359 --> 00:17:12,240
and this protocol makes black box use of

457
00:17:12,240 --> 00:17:14,079
a public key encryption with

458
00:17:14,079 --> 00:17:16,559
pseudo-random publicly namely the public

459
00:17:16,559 --> 00:17:18,799
keys is indistinguishable from a random

460
00:17:18,799 --> 00:17:19,919
artist

461
00:17:19,919 --> 00:17:22,400
and this public key encryption can be

462
00:17:22,400 --> 00:17:24,079
instantiated based on most of the

463
00:17:24,079 --> 00:17:25,520
standard cryptographic hardness

464
00:17:25,520 --> 00:17:27,199
assumptions

465
00:17:27,199 --> 00:17:28,559
so using this

466
00:17:28,559 --> 00:17:30,240
protocol as a building block we

467
00:17:30,240 --> 00:17:32,559
construct a five-round black box mpcc

468
00:17:32,559 --> 00:17:34,080
protocol for computing general

469
00:17:34,080 --> 00:17:35,600
functionalities

470
00:17:35,600 --> 00:17:37,679
and this protocol makes black box use of

471
00:17:37,679 --> 00:17:39,120
a public key encryption with pseudo

472
00:17:39,120 --> 00:17:41,039
random public keys as well as a two

473
00:17:41,039 --> 00:17:43,120
round semi-malicious oblivious transfer

474
00:17:43,120 --> 00:17:44,720
in the play mode

475
00:17:44,720 --> 00:17:46,799
so semi-malicious security is a slight

476
00:17:46,799 --> 00:17:49,600
strengthening of semi-honest security uh

477
00:17:49,600 --> 00:17:51,360
where we allow the adversarial parties

478
00:17:51,360 --> 00:17:53,520
to choose their own random tapes

479
00:17:53,520 --> 00:17:55,679
again two-round semi-malicious ot can be

480
00:17:55,679 --> 00:17:57,520
constructed based on most of the

481
00:17:57,520 --> 00:17:59,360
standard cryptographic hardness

482
00:17:59,360 --> 00:18:01,280
assumptions

483
00:18:01,280 --> 00:18:03,120
somewhat surprisingly the techniques

484
00:18:03,120 --> 00:18:04,720
that we develop for constructing

485
00:18:04,720 --> 00:18:06,799
protocols in the plain model has

486
00:18:06,799 --> 00:18:08,559
applications to constructing better

487
00:18:08,559 --> 00:18:10,480
protocols in the correlated randomness

488
00:18:10,480 --> 00:18:11,520
city

489
00:18:11,520 --> 00:18:13,120
so assuming a special form of

490
00:18:13,120 --> 00:18:15,600
multi-party correlation we construct a

491
00:18:15,600 --> 00:18:18,000
two-round malicious secure protocol that

492
00:18:18,000 --> 00:18:20,160
makes black box use of a two-round

493
00:18:20,160 --> 00:18:22,720
augmented semi-malicious security

494
00:18:22,720 --> 00:18:26,559
so by augmented security we need a

495
00:18:26,559 --> 00:18:28,640
protocol that satisfies a weaker notion

496
00:18:28,640 --> 00:18:31,200
of adaptive security with aerations

497
00:18:31,200 --> 00:18:33,360
so prior protocols in the correlated

498
00:18:33,360 --> 00:18:35,600
randomness setting made complex use of

499
00:18:35,600 --> 00:18:36,320
the

500
00:18:36,320 --> 00:18:38,480
protocol garbling technique whereas our

501
00:18:38,480 --> 00:18:40,720
protocol is extremely simple and

502
00:18:40,720 --> 00:18:42,960
computationally efficient

503
00:18:42,960 --> 00:18:45,039
a couple of interesting corollaries of

504
00:18:45,039 --> 00:18:47,280
this result are as follows

505
00:18:47,280 --> 00:18:49,360
so we give the first two round protocol

506
00:18:49,360 --> 00:18:51,440
for computing branching programs that

507
00:18:51,440 --> 00:18:53,200
has statistical security against

508
00:18:53,200 --> 00:18:55,600
malicious adversaries

509
00:18:55,600 --> 00:18:57,280
and we also give the first two round

510
00:18:57,280 --> 00:18:59,440
protocol for computing log depth

511
00:18:59,440 --> 00:19:01,679
arithmetic circuits that makes black box

512
00:19:01,679 --> 00:19:04,160
use of the underlying shape

513
00:19:04,160 --> 00:19:07,200
so in the remaining time i'll try to uh

514
00:19:07,200 --> 00:19:08,880
explain what is the

515
00:19:08,880 --> 00:19:10,799
the interesting class of functions for

516
00:19:10,799 --> 00:19:12,799
which we construct this round optimal

517
00:19:12,799 --> 00:19:15,600
protocol and this passive functions is

518
00:19:15,600 --> 00:19:18,320
called as pairwise oblivious transform

519
00:19:18,320 --> 00:19:20,080
so let's consider

520
00:19:20,080 --> 00:19:22,640
multiple parties in the pair base ot

521
00:19:22,640 --> 00:19:25,520
functionality for each ordered pair of

522
00:19:25,520 --> 00:19:28,480
parties we compute an ot instance with

523
00:19:28,480 --> 00:19:30,880
one party acting as the sender another

524
00:19:30,880 --> 00:19:33,440
party acting as the receiver

525
00:19:33,440 --> 00:19:36,080
so for instance in the spareways ot we

526
00:19:36,080 --> 00:19:37,440
compute

527
00:19:37,440 --> 00:19:40,160
ot instance between the first and the

528
00:19:40,160 --> 00:19:42,000
the second party where the first party

529
00:19:42,000 --> 00:19:43,440
acts as the receiver and the second

530
00:19:43,440 --> 00:19:45,200
party access the center

531
00:19:45,200 --> 00:19:47,520
so simultaneously we compute another ot

532
00:19:47,520 --> 00:19:48,960
instance between the first and the

533
00:19:48,960 --> 00:19:51,039
second party but now the second party

534
00:19:51,039 --> 00:19:52,640
acts as the receiver and the first party

535
00:19:52,640 --> 00:19:54,160
access the sender

536
00:19:54,160 --> 00:19:55,600
similarly between the first and the

537
00:19:55,600 --> 00:19:58,880
fourth parties we compute an od instance

538
00:19:58,880 --> 00:20:00,160
where the fourth party access the

539
00:20:00,160 --> 00:20:01,919
receiver first party access the center

540
00:20:01,919 --> 00:20:04,240
and so on so between every ordered pair

541
00:20:04,240 --> 00:20:06,640
of parties we compute an oc instance

542
00:20:06,640 --> 00:20:08,559
where one party access the receiver

543
00:20:08,559 --> 00:20:10,640
other party access this line

544
00:20:10,640 --> 00:20:12,080
so why is this

545
00:20:12,080 --> 00:20:14,080
pairwise ot interesting

546
00:20:14,080 --> 00:20:16,000
this is interesting because it directly

547
00:20:16,000 --> 00:20:17,919
implies a protocol for

548
00:20:17,919 --> 00:20:19,600
computing pairwise two-party

549
00:20:19,600 --> 00:20:21,520
functionality where one party access the

550
00:20:21,520 --> 00:20:23,919
receiver another party access accent and

551
00:20:23,919 --> 00:20:25,600
this follows from the work of ishay at

552
00:20:25,600 --> 00:20:27,679
all in 2011

553
00:20:27,679 --> 00:20:28,960
and the question

554
00:20:28,960 --> 00:20:30,559
we are interested here is that can we

555
00:20:30,559 --> 00:20:32,480
construct a foreign protocol for the

556
00:20:32,480 --> 00:20:35,440
pairwise of the functionality

557
00:20:35,440 --> 00:20:36,799
and i'll

558
00:20:36,799 --> 00:20:38,400
explain the main challenge that is

559
00:20:38,400 --> 00:20:40,720
involved in obtaining such construction

560
00:20:40,720 --> 00:20:43,039
so natural starting point is to take any

561
00:20:43,039 --> 00:20:45,679
foreground malicious ot protocol that

562
00:20:45,679 --> 00:20:47,919
exists in the plane model and run this

563
00:20:47,919 --> 00:20:50,960
protocol in parallel for computing each

564
00:20:50,960 --> 00:20:53,440
instance of the oblivious transform

565
00:20:53,440 --> 00:20:55,919
of course this satisfies correctness but

566
00:20:55,919 --> 00:20:58,559
does it satisfy security

567
00:20:58,559 --> 00:21:00,559
unfortunately it's not the case

568
00:21:00,559 --> 00:21:03,120
so to see this consider a adversary that

569
00:21:03,120 --> 00:21:05,760
corrupts the the second party

570
00:21:05,760 --> 00:21:07,679
what this adversary could do is that it

571
00:21:07,679 --> 00:21:10,559
could take the messages that it received

572
00:21:10,559 --> 00:21:13,200
from an ot instance with the first party

573
00:21:13,200 --> 00:21:15,440
maul these messages and could generate

574
00:21:15,440 --> 00:21:17,360
the messages in an ot instance with a

575
00:21:17,360 --> 00:21:18,559
third party

576
00:21:18,559 --> 00:21:20,000
as a result it could make the

577
00:21:20,000 --> 00:21:22,159
adversarial inputs depend on the honest

578
00:21:22,159 --> 00:21:24,799
party's inputs and this violates the

579
00:21:24,799 --> 00:21:26,640
security requirement

580
00:21:26,640 --> 00:21:29,600
so in order to instantiate this

581
00:21:29,600 --> 00:21:30,799
compiler

582
00:21:30,799 --> 00:21:32,640
we need to

583
00:21:32,640 --> 00:21:34,400
make sure that the ot protocol that we

584
00:21:34,400 --> 00:21:36,880
start out with has some non malleability

585
00:21:36,880 --> 00:21:38,240
features

586
00:21:38,240 --> 00:21:40,400
and this is what we do in our work

587
00:21:40,400 --> 00:21:43,600
so our approach is to take a forerunned

588
00:21:43,600 --> 00:21:45,760
malicious secure ot protocol in the

589
00:21:45,760 --> 00:21:47,600
plane model that may not be non

590
00:21:47,600 --> 00:21:49,200
malleable but it satisfies certain

591
00:21:49,200 --> 00:21:51,120
special properties

592
00:21:51,120 --> 00:21:53,600
and transform it into a four round ot

593
00:21:53,600 --> 00:21:56,000
protocol that has send a non-malleable

594
00:21:56,000 --> 00:21:57,840
meaning that the adversarial sender

595
00:21:57,840 --> 00:21:59,600
inputs cannot depend on the honest

596
00:21:59,600 --> 00:22:01,440
party's inputs

597
00:22:01,440 --> 00:22:03,919
from the sender non-malleable ot we uh

598
00:22:03,919 --> 00:22:06,320
transform it into a four round firebase

599
00:22:06,320 --> 00:22:08,400
4d protocol

600
00:22:08,400 --> 00:22:10,320
so the second transformation from sender

601
00:22:10,320 --> 00:22:13,360
non-malleable ot to a foreign pair by ot

602
00:22:13,360 --> 00:22:16,240
uses standard tools whereas the first

603
00:22:16,240 --> 00:22:17,840
transformation makes

604
00:22:17,840 --> 00:22:19,919
use of split state non-malleable codes

605
00:22:19,919 --> 00:22:21,600
which are an

606
00:22:21,600 --> 00:22:24,000
information theoretic object

607
00:22:24,000 --> 00:22:25,039
and

608
00:22:25,039 --> 00:22:26,880
finally we construct this for round ot

609
00:22:26,880 --> 00:22:28,960
with special properties making black box

610
00:22:28,960 --> 00:22:31,039
use of a pke with uh pseudo random

611
00:22:31,039 --> 00:22:32,720
complexes

612
00:22:32,720 --> 00:22:35,120
uh so i encourage you to look into the

613
00:22:35,120 --> 00:22:36,880
full version of the talk for details

614
00:22:36,880 --> 00:22:39,200
about these transformations

615
00:22:39,200 --> 00:22:41,200
and that's it thank you for your

616
00:22:41,200 --> 00:22:43,600
attention

617
00:22:45,679 --> 00:22:47,600
all right thank you very much

618
00:22:47,600 --> 00:22:49,440
um

619
00:22:49,440 --> 00:22:53,200
the floor is open for questions um

620
00:22:53,200 --> 00:22:54,880
there it seems that nobody has posted

621
00:22:54,880 --> 00:22:56,880
any questions in the chat but if you

622
00:22:56,880 --> 00:22:59,200
have any questions spontaneously please

623
00:22:59,200 --> 00:23:00,400
feel

624
00:23:00,400 --> 00:23:04,200
free to unmute yourself

625
00:23:05,620 --> 00:23:08,400
[Music]

626
00:23:08,400 --> 00:23:10,240
otherwise

627
00:23:10,240 --> 00:23:13,840
um i guess let's uh

628
00:23:14,080 --> 00:23:16,559
let's go in in the order of the talks uh

629
00:23:16,559 --> 00:23:19,200
i guess i'll have a good question for uh

630
00:23:19,200 --> 00:23:20,480
for davia

631
00:23:20,480 --> 00:23:22,720
um

632
00:23:22,720 --> 00:23:23,840
yeah

633
00:23:23,840 --> 00:23:26,480
um if uh can you maybe give any

634
00:23:26,480 --> 00:23:29,360
intuition sort of why it is better to

635
00:23:29,360 --> 00:23:31,600
have um

636
00:23:31,600 --> 00:23:33,520
broadcasting the first round than having

637
00:23:33,520 --> 00:23:37,039
it in the second round

638
00:23:37,039 --> 00:23:38,320
so the main challenge that we were

639
00:23:38,320 --> 00:23:40,640
having when we don't have broadcast in

640
00:23:40,640 --> 00:23:44,320
the first round was because uh like

641
00:23:44,320 --> 00:23:46,000
first round is generally two if you have

642
00:23:46,000 --> 00:23:47,919
only two rounds typically the first

643
00:23:47,919 --> 00:23:49,520
round is the one where you commit to

644
00:23:49,520 --> 00:23:51,440
your input

645
00:23:51,440 --> 00:23:53,200
so then if you are allowing only

646
00:23:53,200 --> 00:23:55,120
point-to-point channels then uh it

647
00:23:55,120 --> 00:23:57,200
becomes like it's easy for the adversary

648
00:23:57,200 --> 00:23:59,120
to uh act with respect to different

649
00:23:59,120 --> 00:24:01,440
inputs and not be caught and by the time

650
00:24:01,440 --> 00:24:03,600
the parties respond to it it's already

651
00:24:03,600 --> 00:24:04,960
too late because they have responded

652
00:24:04,960 --> 00:24:07,039
with respect to different inputs so this

653
00:24:07,039 --> 00:24:08,720
was the main challenge but when we have

654
00:24:08,720 --> 00:24:10,480
broadcast in the first round itself and

655
00:24:10,480 --> 00:24:13,840
we are also assuming our crs so you can

656
00:24:13,840 --> 00:24:16,000
like broadcast some say for example a

657
00:24:16,000 --> 00:24:17,520
commitment of your input or and then

658
00:24:17,520 --> 00:24:19,600
proven zero knowledge that you will be

659
00:24:19,600 --> 00:24:20,799
um

660
00:24:20,799 --> 00:24:22,559
like behaving honestly with respect to

661
00:24:22,559 --> 00:24:23,360
that

662
00:24:23,360 --> 00:24:24,799
so i mean

663
00:24:24,799 --> 00:24:27,200
like very high level like i mean i would

664
00:24:27,200 --> 00:24:28,880
say that this is interesting but

665
00:24:28,880 --> 00:24:30,480
actually my co-authors are also online

666
00:24:30,480 --> 00:24:32,880
so if they want to add something then

667
00:24:32,880 --> 00:24:35,919
yeah you can feel free

668
00:24:36,240 --> 00:24:38,400
okay thank you very much

669
00:24:38,400 --> 00:24:39,760
um

670
00:24:39,760 --> 00:24:41,600
so and uh

671
00:24:41,600 --> 00:24:43,679
is there you mentioned this residual

672
00:24:43,679 --> 00:24:46,880
attack is there's is that something like

673
00:24:46,880 --> 00:24:48,720
specially involved or something

674
00:24:48,720 --> 00:24:51,760
so i mean if you just have one round mpc

675
00:24:51,760 --> 00:24:53,760
so i mean uh the adversary doesn't have

676
00:24:53,760 --> 00:24:55,520
to do anything he just waits for the

677
00:24:55,520 --> 00:24:57,919
messages from everyone and then he can

678
00:24:57,919 --> 00:25:00,080
compute the first round messages of the

679
00:25:00,080 --> 00:25:01,440
corrupt parties with respect to

680
00:25:01,440 --> 00:25:03,840
different inputs and he can get

681
00:25:03,840 --> 00:25:05,440
different outputs

682
00:25:05,440 --> 00:25:06,960
while the inputs of the honest parties

683
00:25:06,960 --> 00:25:09,360
remain fixed so he can get multiple

684
00:25:09,360 --> 00:25:11,440
outputs based on different choices of

685
00:25:11,440 --> 00:25:13,120
inputs of the corrupt person he just has

686
00:25:13,120 --> 00:25:14,960
to wait for all the messages from the

687
00:25:14,960 --> 00:25:17,200
honest parties so this would violate our

688
00:25:17,200 --> 00:25:19,120
privacy because according to the

689
00:25:19,120 --> 00:25:21,279
standard security you should just get

690
00:25:21,279 --> 00:25:24,880
output on a unique combination of inputs

691
00:25:24,880 --> 00:25:26,559
but now he's getting multiple on

692
00:25:26,559 --> 00:25:28,400
multiple combinations

693
00:25:28,400 --> 00:25:30,000
particularly with respect to his choice

694
00:25:30,000 --> 00:25:32,480
of corrupt parties

695
00:25:32,480 --> 00:25:34,000
uh thank you

696
00:25:34,000 --> 00:25:36,400
um there's a question by rohit i assume

697
00:25:36,400 --> 00:25:38,480
it's for you too he would like to know

698
00:25:38,480 --> 00:25:40,840
the protocol is standalone

699
00:25:40,840 --> 00:25:42,640
secure

700
00:25:42,640 --> 00:25:46,159
uh is this for us uh yeah i mean like

701
00:25:46,159 --> 00:25:46,960
we

702
00:25:46,960 --> 00:25:49,279
showed stand-alone security but i think

703
00:25:49,279 --> 00:25:51,520
that it should be uh like we don't see a

704
00:25:51,520 --> 00:25:54,840
reason why okay that was

705
00:25:54,840 --> 00:25:58,480
okay all right so uh was it for the the

706
00:25:58,480 --> 00:26:01,200
second result or for the the second or

707
00:26:01,200 --> 00:26:03,840
the third time

708
00:26:04,320 --> 00:26:05,679
so

709
00:26:05,679 --> 00:26:07,760
for the third talk it was uh it's

710
00:26:07,760 --> 00:26:11,400
standalone yeah

711
00:26:14,080 --> 00:26:16,400
yeah you have a quick question so the

712
00:26:16,400 --> 00:26:18,240
lower bound for mpc the four round low

713
00:26:18,240 --> 00:26:20,159
bond does it also i mean so you

714
00:26:20,159 --> 00:26:22,559
basically right now you construct uh mpc

715
00:26:22,559 --> 00:26:24,720
for this 4t mod what are you considering

716
00:26:24,720 --> 00:26:27,760
from pk with random security

717
00:26:27,760 --> 00:26:29,360
is it possible that this pk with

718
00:26:29,360 --> 00:26:30,799
pseudo-random security can give you like

719
00:26:30,799 --> 00:26:32,240
a three-round version of this sporty

720
00:26:32,240 --> 00:26:33,279
protocol

721
00:26:33,279 --> 00:26:36,159
is it does the doorbell supply no no so

722
00:26:36,159 --> 00:26:39,200
for uh even for us just a standalone ot

723
00:26:39,200 --> 00:26:41,039
you need four rounds

724
00:26:41,039 --> 00:26:43,360
in the manager in the plane mode

725
00:26:43,360 --> 00:26:45,279
i see okay this is the specific so the

726
00:26:45,279 --> 00:26:46,640
lower bound also applies for that pretty

727
00:26:46,640 --> 00:26:49,039
specific class yeah yeah

728
00:26:49,039 --> 00:26:50,400
it's it's standalone ot that you're

729
00:26:50,400 --> 00:26:51,279
starting with it's not like a

730
00:26:51,279 --> 00:26:53,200
specialized form of booty no no yeah

731
00:26:53,200 --> 00:26:53,919
yeah

732
00:26:53,919 --> 00:26:55,840
i see okay cool thank you because

733
00:26:55,840 --> 00:26:58,240
standalone ot can imply a

734
00:26:58,240 --> 00:26:59,600
protocol yeah

735
00:26:59,600 --> 00:27:00,799
yeah yeah i thought that there was some

736
00:27:00,799 --> 00:27:02,159
special properties to the ot and that's

737
00:27:02,159 --> 00:27:03,520
why you were able to construct it from

738
00:27:03,520 --> 00:27:05,600
you know so we have we

739
00:27:05,600 --> 00:27:07,760
construct some special properties yeah

740
00:27:07,760 --> 00:27:09,919
that is also uh implied by the

741
00:27:09,919 --> 00:27:11,760
standalone yeah

742
00:27:11,760 --> 00:27:14,159
but it's something yeah on on top of the

743
00:27:14,159 --> 00:27:15,679
standalone it's like it's not a

744
00:27:15,679 --> 00:27:17,200
relaxation of standard

745
00:27:17,200 --> 00:27:21,360
no no yeah yeah okay cool thank you

746
00:27:21,360 --> 00:27:24,000
um there michaela just posted a question

747
00:27:24,000 --> 00:27:26,159
in the chat uh do you want to just meet

748
00:27:26,159 --> 00:27:28,320
yourself and ask it

749
00:27:28,320 --> 00:27:30,000
or should i

750
00:27:30,000 --> 00:27:31,360
uh yeah sure

751
00:27:31,360 --> 00:27:35,360
so it's for uh akshay about your second

752
00:27:35,360 --> 00:27:36,720
talk

753
00:27:36,720 --> 00:27:38,720
like was there a fundamental reason why

754
00:27:38,720 --> 00:27:39,840
you used

755
00:27:39,840 --> 00:27:42,880
split state normal level code instead of

756
00:27:42,880 --> 00:27:44,640
just a normal about commitment for

757
00:27:44,640 --> 00:27:48,480
example why was it not sufficient

758
00:27:48,480 --> 00:27:51,200
yeah so that's a good question so uh

759
00:27:51,200 --> 00:27:52,000
yeah

760
00:27:52,000 --> 00:27:53,919
i think that the problem is for

761
00:27:53,919 --> 00:27:55,840
we wanted to make black box use of

762
00:27:55,840 --> 00:27:57,520
cryptographic primitives and it was

763
00:27:57,520 --> 00:27:59,919
non-trivial to just make use of this

764
00:27:59,919 --> 00:28:02,720
three-round non-malleable commitments

765
00:28:02,720 --> 00:28:04,399
along with this

766
00:28:04,399 --> 00:28:07,039
proof of correctness and so on

767
00:28:07,039 --> 00:28:08,880
yeah so that's why we

768
00:28:08,880 --> 00:28:11,600
made use of non-malleable codes and

769
00:28:11,600 --> 00:28:13,760
the techniques actually uh

770
00:28:13,760 --> 00:28:14,960
take a

771
00:28:14,960 --> 00:28:16,559
make use of non-violent inputs in order

772
00:28:16,559 --> 00:28:18,640
to add this non-malleability uh property

773
00:28:18,640 --> 00:28:22,320
on top of this standalone op

774
00:28:22,320 --> 00:28:23,279
okay

775
00:28:23,279 --> 00:28:25,919
okay thanks

776
00:28:28,640 --> 00:28:29,520
so

777
00:28:29,520 --> 00:28:31,360
there's still a gap if i understand it

778
00:28:31,360 --> 00:28:34,799
correctly between uh in your in the last

779
00:28:34,799 --> 00:28:36,720
talk uh between

780
00:28:36,720 --> 00:28:38,799
the four round lower bound and the five

781
00:28:38,799 --> 00:28:41,520
round protocol for uh yeah yeah

782
00:28:41,520 --> 00:28:44,000
yeah so yeah for the engine functions we

783
00:28:44,000 --> 00:28:46,399
give get a fire on protocol and it's

784
00:28:46,399 --> 00:28:48,480
open to construct a foreground protocol

785
00:28:48,480 --> 00:28:50,080
for general functions that only makes

786
00:28:50,080 --> 00:28:51,600
black boxes

787
00:28:51,600 --> 00:28:54,159
and we know such protocols uh that make

788
00:28:54,159 --> 00:28:56,159
non-black boxes of crypto but yeah

789
00:28:56,159 --> 00:28:57,279
that's

790
00:28:57,279 --> 00:29:00,720
an interesting open question

791
00:29:01,120 --> 00:29:01,919
all right

792
00:29:01,919 --> 00:29:03,919
perfect are there any other questions

793
00:29:03,919 --> 00:29:06,399
there was one more question by benny on

794
00:29:06,399 --> 00:29:07,840
the chat

795
00:29:07,840 --> 00:29:11,120
uh yeah so for this

796
00:29:11,120 --> 00:29:14,080
so we construct uh foreign protocols for

797
00:29:14,080 --> 00:29:15,039
this

798
00:29:15,039 --> 00:29:16,960
class of pairwise two-party

799
00:29:16,960 --> 00:29:19,520
functionalities where uh you consider

800
00:29:19,520 --> 00:29:21,600
any ordered pair of parties there is

801
00:29:21,600 --> 00:29:22,880
some function

802
00:29:22,880 --> 00:29:25,120
uh that they want to compute and one of

803
00:29:25,120 --> 00:29:26,399
these parties

804
00:29:26,399 --> 00:29:27,840
receives the output at the end of the

805
00:29:27,840 --> 00:29:30,320
fourth round and this is done

806
00:29:30,320 --> 00:29:32,080
simultaneously between every ordered

807
00:29:32,080 --> 00:29:34,159
pair of prices so this is the class of

808
00:29:34,159 --> 00:29:35,919
functionality for which we construct our

809
00:29:35,919 --> 00:29:38,919
forum

810
00:29:43,279 --> 00:29:45,600
okay i have no idea where you saw this

811
00:29:45,600 --> 00:29:48,639
other question but

812
00:29:50,640 --> 00:29:52,399
it doesn't show on my side anyway it

813
00:29:52,399 --> 00:29:54,640
doesn't matter uh okay are there any

814
00:29:54,640 --> 00:29:57,360
other questions

815
00:29:59,279 --> 00:30:02,159
if not then uh thank you to the speakers

816
00:30:02,159 --> 00:30:04,799
of this session um and we'll take a

817
00:30:04,799 --> 00:30:08,879
quick break and resume in 10 minutes

