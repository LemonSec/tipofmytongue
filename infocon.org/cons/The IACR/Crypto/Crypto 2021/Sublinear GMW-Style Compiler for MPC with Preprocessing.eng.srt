1
00:00:01,120 --> 00:00:03,120
hello everyone my name is ariel north

2
00:00:03,120 --> 00:00:04,960
and i will present the papers a linear

3
00:00:04,960 --> 00:00:07,600
dmw style compiler for mpc with

4
00:00:07,600 --> 00:00:09,200
pre-processing

5
00:00:09,200 --> 00:00:10,880
this is a joint work with the led boiler

6
00:00:10,880 --> 00:00:13,840
nibbler new variation

7
00:00:13,840 --> 00:00:16,160
so in this work we consider multi-party

8
00:00:16,160 --> 00:00:18,880
computation in the pre-processing model

9
00:00:18,880 --> 00:00:21,359
in this model the execution is divided

10
00:00:21,359 --> 00:00:24,560
into two phases an offline phase known

11
00:00:24,560 --> 00:00:26,480
also is the pre-processing phase and an

12
00:00:26,480 --> 00:00:27,680
online phase

13
00:00:27,680 --> 00:00:29,599
the goal of the offense phase is to

14
00:00:29,599 --> 00:00:31,920
produce correlated randomness and it can

15
00:00:31,920 --> 00:00:34,000
be executed even before the inputs are

16
00:00:34,000 --> 00:00:34,880
known

17
00:00:34,880 --> 00:00:37,040
in the online execution the parties use

18
00:00:37,040 --> 00:00:39,120
the correlated randomness to compute the

19
00:00:39,120 --> 00:00:41,440
desired functionality over their private

20
00:00:41,440 --> 00:00:43,600
inputs

21
00:00:43,600 --> 00:00:45,520
another way to look at this model is to

22
00:00:45,520 --> 00:00:47,200
view the execution as an execution with

23
00:00:47,200 --> 00:00:48,879
a trusted delay who gives the parties

24
00:00:48,879 --> 00:00:50,559
correlated randomness

25
00:00:50,559 --> 00:00:52,640
and then later

26
00:00:52,640 --> 00:00:57,160
design a secure protocol to distribute

27
00:00:58,160 --> 00:01:00,399
every mpc protocol can be modeled in

28
00:01:00,399 --> 00:01:02,320
this way but this model is in particular

29
00:01:02,320 --> 00:01:04,400
useful in the dishonest majority setting

30
00:01:04,400 --> 00:01:06,400
which we consider in this work

31
00:01:06,400 --> 00:01:08,159
it is a challenging setting where no one

32
00:01:08,159 --> 00:01:09,680
trusts no one achieving secure

33
00:01:09,680 --> 00:01:12,240
multipartic reputation requires using

34
00:01:12,240 --> 00:01:13,680
expensive tools

35
00:01:13,680 --> 00:01:15,520
tools that either have a lot of

36
00:01:15,520 --> 00:01:17,040
communication or that are

37
00:01:17,040 --> 00:01:19,119
computationally expensive

38
00:01:19,119 --> 00:01:20,880
whether in this model we can move all

39
00:01:20,880 --> 00:01:22,880
the expensive machinery to the offline

40
00:01:22,880 --> 00:01:25,200
phase and obtain an online execution

41
00:01:25,200 --> 00:01:27,360
which is fast cheap and information

42
00:01:27,360 --> 00:01:29,200
theoretic

43
00:01:29,200 --> 00:01:31,520
now in this talk we will mainly focus on

44
00:01:31,520 --> 00:01:33,840
the online execution and its efficiency

45
00:01:33,840 --> 00:01:36,240
and we will look at two main metrics

46
00:01:36,240 --> 00:01:38,159
the online communication cost and the

47
00:01:38,159 --> 00:01:39,759
amount of correlated randomness that the

48
00:01:39,759 --> 00:01:42,399
dealer needs to produce

49
00:01:42,399 --> 00:01:44,079
the standard approach for mpc in the

50
00:01:44,079 --> 00:01:45,759
pre-processing model is to use bible

51
00:01:45,759 --> 00:01:47,920
triples here the dealer gives the

52
00:01:47,920 --> 00:01:49,600
parties shares of a random

53
00:01:49,600 --> 00:01:51,200
multiplication triple

54
00:01:51,200 --> 00:01:53,280
and these are used to multiply shared

55
00:01:53,280 --> 00:01:55,600
values in the online execution

56
00:01:55,600 --> 00:01:57,439
now in this table we give

57
00:01:57,439 --> 00:01:59,280
the exact communication cost and the

58
00:01:59,280 --> 00:02:00,880
exact amount of correlated randomness

59
00:02:00,880 --> 00:02:03,360
per multiplication with this approach

60
00:02:03,360 --> 00:02:04,479
and as can be seen there are two

61
00:02:04,479 --> 00:02:06,000
variants for this approach one with

62
00:02:06,000 --> 00:02:07,759
circuit independent pre-processing and

63
00:02:07,759 --> 00:02:08,959
one with circuit dependent

64
00:02:08,959 --> 00:02:11,200
pre-processing when allowing circuit

65
00:02:11,200 --> 00:02:13,520
dependent pre-processing the dealer now

66
00:02:13,520 --> 00:02:15,120
knows the structure of the cell of the

67
00:02:15,120 --> 00:02:17,440
circuit and therefore this can be used

68
00:02:17,440 --> 00:02:20,879
to reduce the cost slightly

69
00:02:20,879 --> 00:02:23,040
furthermore if we allow prg-based

70
00:02:23,040 --> 00:02:24,800
compression then we can give each party

71
00:02:24,800 --> 00:02:27,200
a seed from which he derives all these

72
00:02:27,200 --> 00:02:28,239
shares

73
00:02:28,239 --> 00:02:30,480
but even in this case we still need to

74
00:02:30,480 --> 00:02:32,560
give one element

75
00:02:32,560 --> 00:02:35,360
per gate to one of the parties because

76
00:02:35,360 --> 00:02:37,920
a one shell of a times b is fixed and is

77
00:02:37,920 --> 00:02:39,680
not run

78
00:02:39,680 --> 00:02:41,920
so these are the costs uh for

79
00:02:41,920 --> 00:02:44,720
semi-honest activity

80
00:02:44,720 --> 00:02:46,800
to achieve malicious security

81
00:02:46,800 --> 00:02:48,800
the most popular approach currently is

82
00:02:48,800 --> 00:02:51,120
the speeds approach where the dinner

83
00:02:51,120 --> 00:02:53,680
also gives the parties an authenticated

84
00:02:53,680 --> 00:02:55,360
on authenticated version of each of the

85
00:02:55,360 --> 00:02:56,480
treatments

86
00:02:56,480 --> 00:02:58,800
by multiplying each value in each total

87
00:02:58,800 --> 00:03:02,640
with a global random secret mask

88
00:03:02,640 --> 00:03:04,560
the main advantage of this support is

89
00:03:04,560 --> 00:03:06,480
that the online communication cost with

90
00:03:06,480 --> 00:03:08,800
malicious security is the same as the

91
00:03:08,800 --> 00:03:11,280
cost with summer on security however the

92
00:03:11,280 --> 00:03:13,360
amount of correlated randomness grows

93
00:03:13,360 --> 00:03:15,519
specifically for large fields it goes by

94
00:03:15,519 --> 00:03:17,760
a factor of two but for small fails or

95
00:03:17,760 --> 00:03:19,680
for rings that grow it grows by a factor

96
00:03:19,680 --> 00:03:21,920
of kappa well kappa is the statistical

97
00:03:21,920 --> 00:03:24,159
security parameter

98
00:03:24,159 --> 00:03:25,920
because the authenticated triple needs

99
00:03:25,920 --> 00:03:28,000
to be generated over an extension field

100
00:03:28,000 --> 00:03:30,560
with psi with size that depends on the

101
00:03:30,560 --> 00:03:32,400
statistical parameter

102
00:03:32,400 --> 00:03:34,480
this is necessary to achieve cheating

103
00:03:34,480 --> 00:03:37,519
probability that is sufficiently small

104
00:03:37,519 --> 00:03:39,519
a different approach

105
00:03:39,519 --> 00:03:41,440
was first introduced in the minimak

106
00:03:41,440 --> 00:03:43,200
protocol for small fields

107
00:03:43,200 --> 00:03:45,680
and this approach achieves constant

108
00:03:45,680 --> 00:03:47,519
correlating randomness overhead that's

109
00:03:47,519 --> 00:03:49,440
that does not depend on the sixth on the

110
00:03:49,440 --> 00:03:51,280
statistical parameter and this is

111
00:03:51,280 --> 00:03:53,840
achieved by authenticating multiple

112
00:03:53,840 --> 00:03:55,920
treatments together

113
00:03:55,920 --> 00:03:57,680
but this comes at the expense of

114
00:03:57,680 --> 00:03:59,599
increasing the communication cost so now

115
00:03:59,599 --> 00:04:01,200
the communication cost with malicious

116
00:04:01,200 --> 00:04:03,439
security is higher than the cost with

117
00:04:03,439 --> 00:04:05,120
semi-undersecurity

118
00:04:05,120 --> 00:04:07,360
so as can be seen from this slide there

119
00:04:07,360 --> 00:04:08,959
is a trade-off between the communication

120
00:04:08,959 --> 00:04:11,439
overhead and the correlated randomness

121
00:04:11,439 --> 00:04:12,720
overhead

122
00:04:12,720 --> 00:04:15,840
for malicious security

123
00:04:15,920 --> 00:04:18,000
this raises the following question can

124
00:04:18,000 --> 00:04:19,759
we achieve malaysia security where both

125
00:04:19,759 --> 00:04:21,918
the amortized online communication cost

126
00:04:21,918 --> 00:04:23,440
and the amortized

127
00:04:23,440 --> 00:04:25,680
amount of goals and randomness are the

128
00:04:25,680 --> 00:04:28,560
same as with semi-honor security and of

129
00:04:28,560 --> 00:04:30,000
course without introducing any new

130
00:04:30,000 --> 00:04:31,759
assumption

131
00:04:31,759 --> 00:04:33,600
and in this work we give a positive

132
00:04:33,600 --> 00:04:36,080
answer to this question

133
00:04:36,080 --> 00:04:38,320
and our main result is the following so

134
00:04:38,320 --> 00:04:40,160
given an arithmetic circuit c which is

135
00:04:40,160 --> 00:04:42,720
defined over a finite field over the

136
00:04:42,720 --> 00:04:45,120
ring of integers modulo 2 to the k then

137
00:04:45,120 --> 00:04:47,199
we can take every natural semi-honest

138
00:04:47,199 --> 00:04:49,280
mpc protocol which computes c and i will

139
00:04:49,280 --> 00:04:51,759
explain what natural remains later and

140
00:04:51,759 --> 00:04:53,840
we can compile it into malicious acuity

141
00:04:53,840 --> 00:04:55,360
with both the additional amount of

142
00:04:55,360 --> 00:04:57,040
correlated randomness and the additional

143
00:04:57,040 --> 00:04:59,360
amount of communication are logarithmic

144
00:04:59,360 --> 00:05:01,919
in the size of the circuit times some

145
00:05:01,919 --> 00:05:04,000
statistical parameter kappa

146
00:05:04,000 --> 00:05:06,080
this implies that amortized over the

147
00:05:06,080 --> 00:05:07,199
circuit

148
00:05:07,199 --> 00:05:08,720
both the communication cost and the

149
00:05:08,720 --> 00:05:10,560
amount of correlation adoness per

150
00:05:10,560 --> 00:05:13,039
multiplication gate remains the same as

151
00:05:13,039 --> 00:05:16,479
for semi-honor security

152
00:05:16,639 --> 00:05:18,639
the high-level framework of our solution

153
00:05:18,639 --> 00:05:20,320
works as follows

154
00:05:20,320 --> 00:05:22,160
first the parties additively share their

155
00:05:22,160 --> 00:05:24,240
inputs then they run a semi-honest

156
00:05:24,240 --> 00:05:26,400
protocol to compute the circuit now

157
00:05:26,400 --> 00:05:28,160
addition gates can be locally computed

158
00:05:28,160 --> 00:05:30,560
because the sql sharing scheme is linear

159
00:05:30,560 --> 00:05:32,320
but the parties need to interact to

160
00:05:32,320 --> 00:05:34,240
compute multiplication gates and

161
00:05:34,240 --> 00:05:36,400
therefore they need to verify that all

162
00:05:36,400 --> 00:05:38,400
multiplications will compute us

163
00:05:38,400 --> 00:05:39,600
correctly

164
00:05:39,600 --> 00:05:40,960
our main contribution is a new

165
00:05:40,960 --> 00:05:42,560
verification protocol to verify

166
00:05:42,560 --> 00:05:44,880
correctness of all multiplications with

167
00:05:44,880 --> 00:05:47,039
logarithmic amount of communication and

168
00:05:47,039 --> 00:05:48,560
with logarithmic amount of correlated

169
00:05:48,560 --> 00:05:49,759
randomness

170
00:05:49,759 --> 00:05:51,280
if this step

171
00:05:51,280 --> 00:05:53,039
ends successfully then the parties

172
00:05:53,039 --> 00:05:55,199
proceed to reveal their outputs

173
00:05:55,199 --> 00:05:58,080
otherwise the parties approach

174
00:05:58,080 --> 00:05:59,840
now what are the requirements from our

175
00:05:59,840 --> 00:06:01,199
seminars protocol so we have two

176
00:06:01,199 --> 00:06:03,680
requirements first that it need it needs

177
00:06:03,680 --> 00:06:05,440
to be relatively secure meaning that

178
00:06:05,440 --> 00:06:07,360
adversary can only add errors to the

179
00:06:07,360 --> 00:06:08,319
wires

180
00:06:08,319 --> 00:06:10,319
and the second requirement is star

181
00:06:10,319 --> 00:06:12,880
sharing compliance and i will explain

182
00:06:12,880 --> 00:06:14,479
later what it means

183
00:06:14,479 --> 00:06:16,560
but the main point is that many secret

184
00:06:16,560 --> 00:06:19,199
sharing based seminars protocol

185
00:06:19,199 --> 00:06:21,759
including video style seminars protocol

186
00:06:21,759 --> 00:06:23,759
satisfy these properties and therefore

187
00:06:23,759 --> 00:06:25,840
they they can be used as the underlying

188
00:06:25,840 --> 00:06:29,440
semi-honest protocol in our framework

189
00:06:29,440 --> 00:06:31,280
so from now on let's focus on our

190
00:06:31,280 --> 00:06:33,520
verification protocol the main meaning

191
00:06:33,520 --> 00:06:35,759
block that we that we use is zero

192
00:06:35,759 --> 00:06:38,560
knowledge fully linear proof systems

193
00:06:38,560 --> 00:06:40,639
a notion that was increased introduced

194
00:06:40,639 --> 00:06:42,720
by bonnet alien crypto19

195
00:06:42,720 --> 00:06:44,479
so here we have a programmer verifier

196
00:06:44,479 --> 00:06:46,240
the prover holds

197
00:06:46,240 --> 00:06:47,919
a secret input x and it wants to prove

198
00:06:47,919 --> 00:06:49,840
some statement over x

199
00:06:49,840 --> 00:06:51,919
and the program and the verify interact

200
00:06:51,919 --> 00:06:55,280
in multiple rounds and in each round

201
00:06:55,280 --> 00:06:59,360
first the profile outputs approve by i

202
00:06:59,360 --> 00:07:00,240
then

203
00:07:00,240 --> 00:07:02,080
there are public coins that are being

204
00:07:02,080 --> 00:07:03,440
chosen

205
00:07:03,440 --> 00:07:06,400
and then the verifier can query

206
00:07:06,400 --> 00:07:09,680
both the input and and the proof and

207
00:07:09,680 --> 00:07:11,520
based on the answers

208
00:07:11,520 --> 00:07:13,840
to the queries it decides whether to

209
00:07:13,840 --> 00:07:15,520
accept or reject

210
00:07:15,520 --> 00:07:18,080
but the main property here is is that

211
00:07:18,080 --> 00:07:20,160
the verifier is only allowed to run

212
00:07:20,160 --> 00:07:22,240
linear queries on the proof and the

213
00:07:22,240 --> 00:07:23,360
input

214
00:07:23,360 --> 00:07:25,759
this is why these proof systems are

215
00:07:25,759 --> 00:07:27,840
called fully linear

216
00:07:27,840 --> 00:07:29,680
and of course we can define completely

217
00:07:29,680 --> 00:07:31,039
soundness and zero knowledge in the

218
00:07:31,039 --> 00:07:33,759
standard way

219
00:07:34,080 --> 00:07:36,319
now from this abstract building log we

220
00:07:36,319 --> 00:07:38,560
can derive a very useful tool called

221
00:07:38,560 --> 00:07:40,960
distributed zero knowledge proofs

222
00:07:40,960 --> 00:07:43,520
here we have multiple verifiers and the

223
00:07:43,520 --> 00:07:45,680
input x is distributed across the valid

224
00:07:45,680 --> 00:07:48,400
files or in our case x is secret shared

225
00:07:48,400 --> 00:07:50,639
across the verifies so now we will ask

226
00:07:50,639 --> 00:07:52,720
the provider to take the proof that is

227
00:07:52,720 --> 00:07:54,639
generated by the approval in the fully

228
00:07:54,639 --> 00:07:56,240
linear proof system

229
00:07:56,240 --> 00:07:59,120
and also secretary across the very files

230
00:07:59,120 --> 00:08:01,520
so now the verifiers hold shells of both

231
00:08:01,520 --> 00:08:03,840
the input and the proof

232
00:08:03,840 --> 00:08:05,680
now if the secret sharing scheme is

233
00:08:05,680 --> 00:08:06,879
linear

234
00:08:06,879 --> 00:08:09,360
then since the queries are also linear

235
00:08:09,360 --> 00:08:10,960
than the part then the value files can

236
00:08:10,960 --> 00:08:13,440
simply query independently their shares

237
00:08:13,440 --> 00:08:15,199
of the input and the proof and obtain a

238
00:08:15,199 --> 00:08:17,280
secret sharing of the answers

239
00:08:17,280 --> 00:08:19,599
to the queries and then they can simply

240
00:08:19,599 --> 00:08:21,919
exchange their shares of the answers and

241
00:08:21,919 --> 00:08:24,720
obtain the answers to the queries

242
00:08:24,720 --> 00:08:27,039
now what bonnet i showed is that if x is

243
00:08:27,039 --> 00:08:28,960
robustly shared across the parties

244
00:08:28,960 --> 00:08:31,280
meaning that the shares held by the by

245
00:08:31,280 --> 00:08:32,559
the honest parties are enough to

246
00:08:32,559 --> 00:08:34,320
reconcile the secret and if the

247
00:08:34,320 --> 00:08:36,000
statement to be proven is a degree to

248
00:08:36,000 --> 00:08:39,200
polynomial over the input x then there

249
00:08:39,200 --> 00:08:41,039
exists distributed zero knowledge proof

250
00:08:41,039 --> 00:08:43,279
where both the communication

251
00:08:43,279 --> 00:08:45,360
and the number of rounds are logarithmic

252
00:08:45,360 --> 00:08:47,040
in the size of the input

253
00:08:47,040 --> 00:08:50,560
and and some less holds even if a subset

254
00:08:50,560 --> 00:08:52,000
of the verifiers

255
00:08:52,000 --> 00:08:55,519
collude with the proverb

256
00:08:55,519 --> 00:08:57,200
now this tool is very useful to achieve

257
00:08:57,200 --> 00:08:59,200
malicious security in mpc

258
00:08:59,200 --> 00:09:00,480
because in order to achieve malicious

259
00:09:00,480 --> 00:09:02,080
security we need to prove that all

260
00:09:02,080 --> 00:09:05,279
multiplications were completed correctly

261
00:09:05,279 --> 00:09:07,760
now multiplications are degree two

262
00:09:07,760 --> 00:09:11,839
computations and now after the parties

263
00:09:11,839 --> 00:09:13,600
have computed the circuit they hold a

264
00:09:13,600 --> 00:09:15,680
secret sharing of the inputs and the

265
00:09:15,680 --> 00:09:18,560
outputs of each multiplication gate

266
00:09:18,560 --> 00:09:20,560
so this is what and this is what we need

267
00:09:20,560 --> 00:09:22,320
in order to apply the distributed zero

268
00:09:22,320 --> 00:09:24,399
knowledge proof machinery

269
00:09:24,399 --> 00:09:26,000
and indeed

270
00:09:26,000 --> 00:09:27,600
this tool was used in the honest

271
00:09:27,600 --> 00:09:30,399
majority setting in previous works to

272
00:09:30,399 --> 00:09:32,800
achieve many security with very

273
00:09:32,800 --> 00:09:34,160
low cost

274
00:09:34,160 --> 00:09:36,240
relying on the fact that in the honest

275
00:09:36,240 --> 00:09:38,080
majority setting the secret chain is

276
00:09:38,080 --> 00:09:40,160
inherently robust

277
00:09:40,160 --> 00:09:42,320
because the shells held by the honest

278
00:09:42,320 --> 00:09:43,839
parties are enough to reconstruct all

279
00:09:43,839 --> 00:09:45,600
the secrets

280
00:09:45,600 --> 00:09:47,200
now when we move to the dishonest

281
00:09:47,200 --> 00:09:49,120
majority setting

282
00:09:49,120 --> 00:09:51,360
this raises the question how to achieve

283
00:09:51,360 --> 00:09:53,360
the same robustness and without

284
00:09:53,360 --> 00:09:55,120
increasing the amount of correlated

285
00:09:55,120 --> 00:09:58,720
randomness multiplication

286
00:09:58,959 --> 00:10:01,279
so to solve this challenge we have two

287
00:10:01,279 --> 00:10:02,959
main technical ideas

288
00:10:02,959 --> 00:10:04,640
first we define a robustical sharing

289
00:10:04,640 --> 00:10:06,560
scheme using the delay which we call

290
00:10:06,560 --> 00:10:09,920
star sticker chunks star sequentially

291
00:10:09,920 --> 00:10:12,160
and then we show how to maintain this

292
00:10:12,160 --> 00:10:14,880
scheme and the robustness that it brings

293
00:10:14,880 --> 00:10:17,279
throughout the verification protocol and

294
00:10:17,279 --> 00:10:19,680
the idea here is that we use the dealer

295
00:10:19,680 --> 00:10:21,680
as one of the verifiers in the

296
00:10:21,680 --> 00:10:24,880
distributed zero knowledge proof

297
00:10:24,880 --> 00:10:28,560
so now let's look into the details

298
00:10:29,519 --> 00:10:31,839
so what is this mysterious style

299
00:10:31,839 --> 00:10:34,800
signature scheme so that is very simple

300
00:10:34,800 --> 00:10:36,399
for each

301
00:10:36,399 --> 00:10:39,600
secret x each party will hold

302
00:10:39,600 --> 00:10:40,880
a mask of the

303
00:10:40,880 --> 00:10:42,240
masked secret

304
00:10:42,240 --> 00:10:44,399
and an additive shell of the mask and

305
00:10:44,399 --> 00:10:46,720
the dealer will hold the

306
00:10:46,720 --> 00:10:48,480
the shares of the mask and therefore you

307
00:10:48,480 --> 00:10:50,399
will know the mask

308
00:10:50,399 --> 00:10:52,560
now this secret sharing scheme is robust

309
00:10:52,560 --> 00:10:53,600
because

310
00:10:53,600 --> 00:10:56,320
because we because the shares held by

311
00:10:56,320 --> 00:10:58,000
each party and the shares held by the

312
00:10:58,000 --> 00:10:59,360
dealer are enough to reconstruct this

313
00:10:59,360 --> 00:11:01,839
circuit in particular an honest party

314
00:11:01,839 --> 00:11:03,519
and the dealer can reconstruct the

315
00:11:03,519 --> 00:11:05,519
secret

316
00:11:05,519 --> 00:11:07,760
now of course this signature scheme is

317
00:11:07,760 --> 00:11:10,240
not new and is and it is in fact used in

318
00:11:10,240 --> 00:11:12,880
many seminars protocols including bible

319
00:11:12,880 --> 00:11:14,720
style protocols

320
00:11:14,720 --> 00:11:16,959
so the challenge that remains is how to

321
00:11:16,959 --> 00:11:19,200
maintain this invariant and the

322
00:11:19,200 --> 00:11:20,399
robustness

323
00:11:20,399 --> 00:11:24,880
also in the verification portal

324
00:11:26,640 --> 00:11:29,120
so how the verification protocol works

325
00:11:29,120 --> 00:11:31,360
so the goal of the parties is to verify

326
00:11:31,360 --> 00:11:33,279
that for each multiplication gate with

327
00:11:33,279 --> 00:11:37,360
inputs x and y and output z that z minus

328
00:11:37,360 --> 00:11:40,320
x times y equals zero

329
00:11:40,320 --> 00:11:42,720
now we can replace each secret with the

330
00:11:42,720 --> 00:11:44,399
masked secret which is known to the

331
00:11:44,399 --> 00:11:46,720
parties plus the mask which is known to

332
00:11:46,720 --> 00:11:48,320
the little the dealer

333
00:11:48,320 --> 00:11:51,600
and take a random linear combination of

334
00:11:51,600 --> 00:11:53,519
of all these equations while each

335
00:11:53,519 --> 00:11:55,519
equation corresponds to one

336
00:11:55,519 --> 00:11:57,279
multiplication gate

337
00:11:57,279 --> 00:12:00,480
and and obtain one expression that needs

338
00:12:00,480 --> 00:12:02,880
to be checked by uh by the parties and

339
00:12:02,880 --> 00:12:04,560
here the alpha k's are random

340
00:12:04,560 --> 00:12:07,360
coefficients that are chosen by the

341
00:12:07,360 --> 00:12:08,639
parties at the beginning of the

342
00:12:08,639 --> 00:12:13,200
publication protocol and become public

343
00:12:14,800 --> 00:12:17,200
now if we look at this expression that

344
00:12:17,200 --> 00:12:18,959
the parties want to check the quantity

345
00:12:18,959 --> 00:12:20,000
to zero

346
00:12:20,000 --> 00:12:21,839
and open it and do all the algebra we

347
00:12:21,839 --> 00:12:24,480
can split it into three parts the first

348
00:12:24,480 --> 00:12:26,800
part contains only masked values and

349
00:12:26,800 --> 00:12:30,160
therefore each party can locally compute

350
00:12:30,160 --> 00:12:30,959
it

351
00:12:30,959 --> 00:12:32,639
the second part contains only masks

352
00:12:32,639 --> 00:12:34,079
which are known to dealer and therefore

353
00:12:34,079 --> 00:12:36,639
can be computed locally by the dealer

354
00:12:36,639 --> 00:12:39,760
the third part is basically a

355
00:12:39,760 --> 00:12:42,480
sum of products between values that are

356
00:12:42,480 --> 00:12:44,800
known to the parties and values that are

357
00:12:44,800 --> 00:12:46,800
known to the delay but are also

358
00:12:46,800 --> 00:12:50,399
additively secret shared to the parties

359
00:12:50,399 --> 00:12:52,160
and therefore the parties can locally

360
00:12:52,160 --> 00:12:54,000
compute an additive sharing of this

361
00:12:54,000 --> 00:12:56,320
value

362
00:12:56,560 --> 00:12:58,880
now let's denote the first part by

363
00:12:58,880 --> 00:13:00,720
lambda the second part by omega and the

364
00:13:00,720 --> 00:13:03,920
last part by gamma

365
00:13:03,920 --> 00:13:05,440
this implies that the parties wish to

366
00:13:05,440 --> 00:13:08,320
verify that lambda plus omega plus gamma

367
00:13:08,320 --> 00:13:10,240
equals to zero

368
00:13:10,240 --> 00:13:12,160
now indeed in the first step of our

369
00:13:12,160 --> 00:13:14,320
revocation protocol the parties do the

370
00:13:14,320 --> 00:13:17,440
local computation each body computes

371
00:13:17,440 --> 00:13:20,560
lambda and his shell of gamma which we

372
00:13:20,560 --> 00:13:22,800
denote by gamma i and the zero computes

373
00:13:22,800 --> 00:13:24,160
omega

374
00:13:24,160 --> 00:13:25,839
in the second step of the verification

375
00:13:25,839 --> 00:13:28,240
protocol we ask each party to secret

376
00:13:28,240 --> 00:13:30,880
shell gamma using our star signature

377
00:13:30,880 --> 00:13:33,040
scheme this means that each party will

378
00:13:33,040 --> 00:13:34,959
broadcast

379
00:13:34,959 --> 00:13:36,720
the masked gamma i where the dealer

380
00:13:36,720 --> 00:13:38,079
knows the mask

381
00:13:38,079 --> 00:13:40,639
now of course our malicious api may

382
00:13:40,639 --> 00:13:43,440
cheat and signature and incorrect value

383
00:13:43,440 --> 00:13:45,519
so in third step we ask each party to

384
00:13:45,519 --> 00:13:49,199
prove that it shared the correct gamma i

385
00:13:49,199 --> 00:13:50,959
and we will go into the details of this

386
00:13:50,959 --> 00:13:53,199
step in a minute

387
00:13:53,199 --> 00:13:55,199
if this step

388
00:13:55,199 --> 00:13:57,199
passes successfully and all the proofs

389
00:13:57,199 --> 00:13:58,560
are accepted

390
00:13:58,560 --> 00:14:00,320
then the parties proceed to the next

391
00:14:00,320 --> 00:14:02,720
step where the dealer sends

392
00:14:02,720 --> 00:14:04,480
the sum of all the masks that we use to

393
00:14:04,480 --> 00:14:06,000
the parties and then the parties in the

394
00:14:06,000 --> 00:14:08,480
last step can check equality to zero to

395
00:14:08,480 --> 00:14:09,839
the final value

396
00:14:09,839 --> 00:14:11,920
if the quality holds they know with high

397
00:14:11,920 --> 00:14:14,079
probability that all multiplication

398
00:14:14,079 --> 00:14:15,839
gates will compute

399
00:14:15,839 --> 00:14:18,079
otherwise they know that cheating took

400
00:14:18,079 --> 00:14:21,760
place and they can avoid the platform

401
00:14:21,760 --> 00:14:23,360
now let's go into the details of the

402
00:14:23,360 --> 00:14:25,600
third step where each party proves that

403
00:14:25,600 --> 00:14:27,680
the gamma i he shared is the correct

404
00:14:27,680 --> 00:14:28,880
gamma i

405
00:14:28,880 --> 00:14:30,720
so basically each power dpi needs to

406
00:14:30,720 --> 00:14:33,839
prove that the following equation holds

407
00:14:33,839 --> 00:14:36,000
the idea that we take the

408
00:14:36,000 --> 00:14:37,839
mass gamma i we add the mask and

409
00:14:37,839 --> 00:14:39,279
subtract from it

410
00:14:39,279 --> 00:14:41,680
the gamma that should have been computed

411
00:14:41,680 --> 00:14:43,839
so if rtpi acted honestly then the

412
00:14:43,839 --> 00:14:45,760
result should be zero

413
00:14:45,760 --> 00:14:47,760
and now if we look at this expression

414
00:14:47,760 --> 00:14:50,160
without even understanding it we observe

415
00:14:50,160 --> 00:14:51,199
two things

416
00:14:51,199 --> 00:14:52,480
first that this is a degree two

417
00:14:52,480 --> 00:14:55,360
polynomial over the inputs and remember

418
00:14:55,360 --> 00:14:58,560
that the alpha case are public constants

419
00:14:58,560 --> 00:15:00,399
at this stage

420
00:15:00,399 --> 00:15:02,800
and second that each input to this

421
00:15:02,800 --> 00:15:04,800
expression is known to either all the

422
00:15:04,800 --> 00:15:06,880
parties or to the dealer

423
00:15:06,880 --> 00:15:08,639
specifically the values that are marked

424
00:15:08,639 --> 00:15:10,880
in blue are known to all parties and the

425
00:15:10,880 --> 00:15:12,880
values that are marked in yellow are

426
00:15:12,880 --> 00:15:15,519
known to the winner and we can use this

427
00:15:15,519 --> 00:15:17,760
fact in the following way

428
00:15:17,760 --> 00:15:19,279
so now we will run the distributed zero

429
00:15:19,279 --> 00:15:21,600
energy proof and use the dealer as one

430
00:15:21,600 --> 00:15:23,519
of the verifiers

431
00:15:23,519 --> 00:15:26,639
now the parties will define a vector of

432
00:15:26,639 --> 00:15:28,639
inputs where they take all the inputs

433
00:15:28,639 --> 00:15:30,160
and replace all the inputs that are

434
00:15:30,160 --> 00:15:32,880
unknown to them by zero

435
00:15:32,880 --> 00:15:34,320
the dealer will do the same thing he

436
00:15:34,320 --> 00:15:36,480
will define the vector of all inputs and

437
00:15:36,480 --> 00:15:38,079
replace all the inputs that are unknown

438
00:15:38,079 --> 00:15:41,519
to him by zero however since each each

439
00:15:41,519 --> 00:15:44,240
input is known to each of the parties or

440
00:15:44,240 --> 00:15:46,560
to the dealer this implies that now

441
00:15:46,560 --> 00:15:49,440
each party and the dealer hold a two out

442
00:15:49,440 --> 00:15:52,320
of two additive sharing of the input

443
00:15:52,320 --> 00:15:53,600
now we will ask

444
00:15:53,600 --> 00:15:56,639
him to share the proof in the same way

445
00:15:56,639 --> 00:15:58,560
meaning that he will send the masked

446
00:15:58,560 --> 00:16:00,480
proof to the parties and the dealer will

447
00:16:00,480 --> 00:16:01,519
hold

448
00:16:01,519 --> 00:16:02,639
the mask

449
00:16:02,639 --> 00:16:05,120
so now what we get is that the input and

450
00:16:05,120 --> 00:16:07,279
the proof are additively shared between

451
00:16:07,279 --> 00:16:09,279
each of the parties and the dealer

452
00:16:09,279 --> 00:16:11,120
so now we can ask each of the parties

453
00:16:11,120 --> 00:16:12,959
and the deal to run the linear queries

454
00:16:12,959 --> 00:16:16,480
on his shares of the proof and the input

455
00:16:16,480 --> 00:16:18,880
and this guarantees us that now

456
00:16:18,880 --> 00:16:21,199
the the parties and the dealer will

457
00:16:21,199 --> 00:16:23,360
obtain star secret sharing of the

458
00:16:23,360 --> 00:16:26,240
answers meaning that their answers are

459
00:16:26,240 --> 00:16:28,560
shared between each party and the deal

460
00:16:28,560 --> 00:16:30,800
so now for an honest party to receive

461
00:16:30,800 --> 00:16:32,480
the court answer he only needs the

462
00:16:32,480 --> 00:16:34,720
information held by the dealer

463
00:16:34,720 --> 00:16:36,800
this means that even if all the other

464
00:16:36,800 --> 00:16:37,839
parties

465
00:16:37,839 --> 00:16:40,000
collude with the approval

466
00:16:40,000 --> 00:16:42,240
then still the honest this one on this

467
00:16:42,240 --> 00:16:44,000
party will receive the correct answer to

468
00:16:44,000 --> 00:16:45,120
the queries

469
00:16:45,120 --> 00:16:47,440
and this is what eventually

470
00:16:47,440 --> 00:16:51,839
leads to the soundness that we require

471
00:16:51,920 --> 00:16:53,920
so let's sum up what we get from this

472
00:16:53,920 --> 00:16:55,519
process and what we get from using the

473
00:16:55,519 --> 00:16:58,079
delay as a verifier

474
00:16:58,079 --> 00:17:00,560
so since each piece of information is

475
00:17:00,560 --> 00:17:02,800
known by an honest participant which is

476
00:17:02,800 --> 00:17:05,359
either an honest party or the dealer

477
00:17:05,359 --> 00:17:07,439
this is what gives us robustness

478
00:17:07,439 --> 00:17:09,119
throughout the process and this is what

479
00:17:09,119 --> 00:17:12,079
leads to sadness even if

480
00:17:12,079 --> 00:17:14,319
all the other parties collude with the

481
00:17:14,319 --> 00:17:16,319
provo

482
00:17:16,319 --> 00:17:17,839
and since the statement to be proven is

483
00:17:17,839 --> 00:17:19,760
a two degree polynomial then we can run

484
00:17:19,760 --> 00:17:21,439
the disability knowledge both with

485
00:17:21,439 --> 00:17:23,679
logarithmic amount of communication in

486
00:17:23,679 --> 00:17:27,520
the numbers of multiplications to verify

487
00:17:27,520 --> 00:17:30,160
now since communication is logarithmic

488
00:17:30,160 --> 00:17:32,320
then this implies that also the the

489
00:17:32,320 --> 00:17:34,000
communication from the side of the

490
00:17:34,000 --> 00:17:36,080
biller who acts as a benefit is also is

491
00:17:36,080 --> 00:17:37,679
also logarithmic in the number of

492
00:17:37,679 --> 00:17:40,240
multiplications to verify

493
00:17:40,240 --> 00:17:41,840
now since the dealer performs

494
00:17:41,840 --> 00:17:43,440
communication only of the random data

495
00:17:43,440 --> 00:17:45,440
this implies that it can pre-process its

496
00:17:45,440 --> 00:17:47,520
computations you know then all the

497
00:17:47,520 --> 00:17:48,880
messages that it needs to send the

498
00:17:48,880 --> 00:17:52,480
delivery he can it can give it as is is

499
00:17:52,480 --> 00:17:54,240
correlated next to the parties with

500
00:17:54,240 --> 00:17:55,520
logarithmic

501
00:17:55,520 --> 00:17:56,880
size

502
00:17:56,880 --> 00:17:59,280
this is what eventually leads to our

503
00:17:59,280 --> 00:18:01,840
solution

504
00:18:02,000 --> 00:18:03,919
so if we go back to our verification

505
00:18:03,919 --> 00:18:06,480
protocol and estimate its cost

506
00:18:06,480 --> 00:18:08,320
then the first step is simply local

507
00:18:08,320 --> 00:18:10,320
computation in the second step each

508
00:18:10,320 --> 00:18:13,200
party need to seek a share one

509
00:18:13,200 --> 00:18:14,880
single value and therefore the

510
00:18:14,880 --> 00:18:16,960
communication cost is constant

511
00:18:16,960 --> 00:18:19,600
in the first step we have n proofs

512
00:18:19,600 --> 00:18:21,840
and the cost of each proof is a

513
00:18:21,840 --> 00:18:24,880
logarithm is logarithm of the number of

514
00:18:24,880 --> 00:18:27,120
multiplication to verify

515
00:18:27,120 --> 00:18:29,120
in the fair in the fourth step

516
00:18:29,120 --> 00:18:31,360
the dealer needs to send constant amount

517
00:18:31,360 --> 00:18:32,880
of data and therefore the communication

518
00:18:32,880 --> 00:18:35,520
cost is again constant and the last step

519
00:18:35,520 --> 00:18:38,160
is local computation so overall

520
00:18:38,160 --> 00:18:39,600
the communication cost of the

521
00:18:39,600 --> 00:18:41,679
application protocol is

522
00:18:41,679 --> 00:18:44,720
logarithmic in the size in the number of

523
00:18:44,720 --> 00:18:46,799
multiplication to verify time the number

524
00:18:46,799 --> 00:18:49,440
of properties

525
00:18:50,000 --> 00:18:52,160
now in the paper we also give a concrete

526
00:18:52,160 --> 00:18:54,400
instantiations to the building block

527
00:18:54,400 --> 00:18:56,640
used in our protocol

528
00:18:56,640 --> 00:18:58,559
in particular we show how to implement

529
00:18:58,559 --> 00:19:00,320
the distributed zero knowledge proof in

530
00:19:00,320 --> 00:19:02,000
the disorientation setting with high

531
00:19:02,000 --> 00:19:04,320
efficiency as can be seen

532
00:19:04,320 --> 00:19:06,400
from the numbers we show here

533
00:19:06,400 --> 00:19:08,320
and remember that

534
00:19:08,320 --> 00:19:11,440
if if the computation is carried out

535
00:19:11,440 --> 00:19:14,480
over a boolean circuits or over rings

536
00:19:14,480 --> 00:19:17,039
then the verification protocol needs to

537
00:19:17,039 --> 00:19:18,080
needs to be

538
00:19:18,080 --> 00:19:20,799
executed over an extension field

539
00:19:20,799 --> 00:19:24,160
which size that that depends on the the

540
00:19:24,160 --> 00:19:26,960
security parameter kappa

541
00:19:26,960 --> 00:19:30,080
however since kappa is independent of

542
00:19:30,080 --> 00:19:33,200
the size of the circuit the overall

543
00:19:33,200 --> 00:19:35,200
cost of the bifurcation protocol remains

544
00:19:35,200 --> 00:19:38,000
sublinear

545
00:19:38,000 --> 00:19:41,280
in addition we we can add the cost of

546
00:19:41,280 --> 00:19:43,280
our application protocol

547
00:19:43,280 --> 00:19:45,360
to the cost of the

548
00:19:45,360 --> 00:19:47,440
bible-style semi-honest multiplication

549
00:19:47,440 --> 00:19:49,280
protocols that we saw at the beginning

550
00:19:49,280 --> 00:19:51,679
of the talk and obtain the

551
00:19:51,679 --> 00:19:54,320
overall costs to compute circuit c with

552
00:19:54,320 --> 00:19:55,760
militia security

553
00:19:55,760 --> 00:19:58,720
shown in this table

554
00:19:58,720 --> 00:20:00,799
now it is worth mentioning that we can

555
00:20:00,799 --> 00:20:03,600
also use the recent results for

556
00:20:03,600 --> 00:20:04,799
efficient

557
00:20:04,799 --> 00:20:07,200
pcg-based compression to compress the

558
00:20:07,200 --> 00:20:08,960
correlated loudness

559
00:20:08,960 --> 00:20:11,280
for the semi-honest execution and then

560
00:20:11,280 --> 00:20:13,760
combining it with the sublinear related

561
00:20:13,760 --> 00:20:15,600
randomness

562
00:20:15,600 --> 00:20:18,559
of our compiler we can get overall sub

563
00:20:18,559 --> 00:20:20,880
linear correlated analyst to compute a

564
00:20:20,880 --> 00:20:25,039
circuit c with militia security

565
00:20:25,679 --> 00:20:28,320
finally a few words about this written

566
00:20:28,320 --> 00:20:31,840
dealer so in the paper we do not

567
00:20:31,840 --> 00:20:33,600
design a protocol to dissipate the

568
00:20:33,600 --> 00:20:36,799
dealer however we estimate the cost

569
00:20:36,799 --> 00:20:38,960
of using a generic mpc protocol to

570
00:20:38,960 --> 00:20:40,559
distribute the data

571
00:20:40,559 --> 00:20:42,320
the idea here is that we represent the

572
00:20:42,320 --> 00:20:44,240
dealer as a circuit and then use a

573
00:20:44,240 --> 00:20:46,240
generic mpc protocol to compute the

574
00:20:46,240 --> 00:20:49,360
dealer's circuit and the cost of this

575
00:20:49,360 --> 00:20:51,039
approach is

576
00:20:51,039 --> 00:20:53,039
depends on the number of multiplication

577
00:20:53,039 --> 00:20:55,200
gates in the dealer's circuit

578
00:20:55,200 --> 00:20:57,760
as as we can be seen here

579
00:20:57,760 --> 00:20:59,679
the number of multiplication gates

580
00:20:59,679 --> 00:21:01,600
is depends on the number of parties but

581
00:21:01,600 --> 00:21:03,840
for small number of parties it is almost

582
00:21:03,840 --> 00:21:05,600
equivalent to the size of the original

583
00:21:05,600 --> 00:21:08,720
circuit and this implies that even

584
00:21:08,720 --> 00:21:10,559
when using the generic npc to compute

585
00:21:10,559 --> 00:21:12,799
the data circuit the costs are still

586
00:21:12,799 --> 00:21:14,320
reasonable

587
00:21:14,320 --> 00:21:17,360
and we leave the question of optimizing

588
00:21:17,360 --> 00:21:20,000
the dealer's work or designing a

589
00:21:20,000 --> 00:21:21,679
specific protocol to disable the dealer

590
00:21:21,679 --> 00:21:24,400
for future work

591
00:21:24,400 --> 00:21:26,240
so with this with this i will end my

592
00:21:26,240 --> 00:21:28,000
talk thank you very much for watching

593
00:21:28,000 --> 00:21:31,080
and listening

