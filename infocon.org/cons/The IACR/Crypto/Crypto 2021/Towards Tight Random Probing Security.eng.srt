1
00:00:03,679 --> 00:00:06,160
hello welcome to the presentation of our

2
00:00:06,160 --> 00:00:08,240
paper towards tight random probing

3
00:00:08,240 --> 00:00:10,800
security have a joint work with gaiathan

4
00:00:10,800 --> 00:00:14,639
carcias sebastian faust from

5
00:00:14,639 --> 00:00:18,480
standard and me maximiliano old

6
00:00:18,480 --> 00:00:20,880
before guyton carcius and i are going to

7
00:00:20,880 --> 00:00:23,039
present our results we first want to

8
00:00:23,039 --> 00:00:25,920
give an introduction

9
00:00:25,920 --> 00:00:27,599
in the classical good regretfully we

10
00:00:27,599 --> 00:00:30,000
often use the black box mortar here the

11
00:00:30,000 --> 00:00:32,079
adversary only learns about the input

12
00:00:32,079 --> 00:00:33,840
output behavior of a cryptographic

13
00:00:33,840 --> 00:00:35,040
primitive

14
00:00:35,040 --> 00:00:36,960
for example the playing text ciphertext

15
00:00:36,960 --> 00:00:40,640
pair of an encryption scheme

16
00:00:40,640 --> 00:00:42,320
but this is not the case in the real

17
00:00:42,320 --> 00:00:44,719
world in the real world the adversary

18
00:00:44,719 --> 00:00:47,039
can learn even more

19
00:00:47,039 --> 00:00:49,360
the power consumption of a device might

20
00:00:49,360 --> 00:00:51,840
leak secret dependent data for example

21
00:00:51,840 --> 00:00:53,840
the key of an encryption scheme

22
00:00:53,840 --> 00:00:55,680
the same holds for electromagnetic

23
00:00:55,680 --> 00:00:59,760
radiation caused by current flows

24
00:00:59,760 --> 00:01:01,920
so we have to think about how to model

25
00:01:01,920 --> 00:01:04,239
those leakages to provide security

26
00:01:04,239 --> 00:01:05,360
proofs

27
00:01:05,360 --> 00:01:07,360
even in the presence of sectional

28
00:01:07,360 --> 00:01:09,680
leakage

29
00:01:09,680 --> 00:01:11,920
to define our security model we first

30
00:01:11,920 --> 00:01:13,680
have to decide on our computational

31
00:01:13,680 --> 00:01:16,720
model here we use the arithmetic circuit

32
00:01:16,720 --> 00:01:18,640
where each operation is described as a

33
00:01:18,640 --> 00:01:22,479
gate and all values are carried by wires

34
00:01:22,479 --> 00:01:24,799
the advantage of this model is that also

35
00:01:24,799 --> 00:01:27,040
the values the internal values are

36
00:01:27,040 --> 00:01:31,439
carried by wires so we define all values

37
00:01:31,439 --> 00:01:33,360
with the arithmetic circuit we can

38
00:01:33,360 --> 00:01:36,159
define our adversarial model we use the

39
00:01:36,159 --> 00:01:38,240
p1 and probing model originally

40
00:01:38,240 --> 00:01:40,960
introduced by ishai zahari and wagner at

41
00:01:40,960 --> 00:01:43,520
crypto 2003

42
00:01:43,520 --> 00:01:45,280
they assume that each wire leaks with

43
00:01:45,280 --> 00:01:46,640
probability tp

44
00:01:46,640 --> 00:01:48,560
the advantage of this model is that it's

45
00:01:48,560 --> 00:01:51,040
close to the real world since it's

46
00:01:51,040 --> 00:01:52,799
described the continuous nature of

47
00:01:52,799 --> 00:01:54,479
leakage

48
00:01:54,479 --> 00:01:57,040
if a value is used multiple times it is

49
00:01:57,040 --> 00:01:59,600
also carried by multiple wires and the

50
00:01:59,600 --> 00:02:02,479
leakage increase

51
00:02:03,840 --> 00:02:06,320
now we can use the model to try to

52
00:02:06,320 --> 00:02:10,000
protect circuits against leakage

53
00:02:10,000 --> 00:02:11,760
we take the example circuit of the

54
00:02:11,760 --> 00:02:14,000
previous slide and assume that it gets

55
00:02:14,000 --> 00:02:16,400
as inputs the sequence a and b

56
00:02:16,400 --> 00:02:17,440
it first

57
00:02:17,440 --> 00:02:19,840
copies a and multiplies it which is a

58
00:02:19,840 --> 00:02:22,400
simple square operation and then it adds

59
00:02:22,400 --> 00:02:24,959
b afterwards

60
00:02:24,959 --> 00:02:27,920
the result is c

61
00:02:28,400 --> 00:02:30,239
so to protect the secrets against

62
00:02:30,239 --> 00:02:32,480
leakage we first have to secret share

63
00:02:32,480 --> 00:02:34,239
the values a and b

64
00:02:34,239 --> 00:02:36,879
this we can do for example for n equals

65
00:02:36,879 --> 00:02:38,400
2.

66
00:02:38,400 --> 00:02:42,000
so a is shared into a 0 and a 1 and b is

67
00:02:42,000 --> 00:02:44,400
shared into b0 and b1

68
00:02:44,400 --> 00:02:46,560
this means that all values look uniform

69
00:02:46,560 --> 00:02:50,560
at random but a0 plus a1 is a and b0

70
00:02:50,560 --> 00:02:53,519
plus b1 is b

71
00:02:57,440 --> 00:02:59,680
now we only want to compute on the

72
00:02:59,680 --> 00:03:02,239
masked values this means that we have

73
00:03:02,239 --> 00:03:04,080
first to transform the simple square

74
00:03:04,080 --> 00:03:06,800
operation into a gadget

75
00:03:06,800 --> 00:03:09,440
which gets as input the masked values of

76
00:03:09,440 --> 00:03:13,599
a and outputs a masked value of a square

77
00:03:13,599 --> 00:03:16,800
then we want to transform the addition

78
00:03:16,800 --> 00:03:19,760
into a gadget which gets us inputs to

79
00:03:19,760 --> 00:03:21,920
shared values and outputs the shared

80
00:03:21,920 --> 00:03:24,239
values of the edition

81
00:03:24,239 --> 00:03:26,159
now you can see a value which only

82
00:03:26,159 --> 00:03:29,120
computes unmasked values but we can make

83
00:03:29,120 --> 00:03:31,040
the circuit even more secure by

84
00:03:31,040 --> 00:03:33,519
randomizing it

85
00:03:33,519 --> 00:03:34,959
this we can do

86
00:03:34,959 --> 00:03:37,519
by adding randomness to the wires such

87
00:03:37,519 --> 00:03:39,680
that the correctness of the resulting

88
00:03:39,680 --> 00:03:41,920
circuit still holds

89
00:03:41,920 --> 00:03:44,799
the resulting circuit cx

90
00:03:44,799 --> 00:03:47,200
is a masked circuit where we have masked

91
00:03:47,200 --> 00:03:49,760
the input values into two shares

92
00:03:49,760 --> 00:03:52,159
this we can do for any circuit and an

93
00:03:52,159 --> 00:03:54,879
arbitrary number of shares for example

94
00:03:54,879 --> 00:03:57,280
we could mask the iss box

95
00:03:57,280 --> 00:03:59,760
into three shares

96
00:03:59,760 --> 00:04:02,720
let's consider the iss box masked into

97
00:04:02,720 --> 00:04:06,000
two and three shares

98
00:04:06,000 --> 00:04:07,920
here you can see the security level of

99
00:04:07,920 --> 00:04:10,959
the resulting circuit the security level

100
00:04:10,959 --> 00:04:13,200
depends on our leakage probability and

101
00:04:13,200 --> 00:04:14,400
tells us

102
00:04:14,400 --> 00:04:16,238
with which probability we cannot

103
00:04:16,238 --> 00:04:18,720
guarantee security anymore

104
00:04:18,720 --> 00:04:20,720
the results you can see here

105
00:04:20,720 --> 00:04:23,120
are the results of bellaid with jan and

106
00:04:23,120 --> 00:04:28,000
talib published at eureka 2021

107
00:04:28,000 --> 00:04:29,840
the security level we can also give

108
00:04:29,840 --> 00:04:32,479
awake lower bound

109
00:04:32,479 --> 00:04:34,639
with our results we want to provide

110
00:04:34,639 --> 00:04:36,960
tighter proofs for the security level

111
00:04:36,960 --> 00:04:39,120
this means we want to

112
00:04:39,120 --> 00:04:41,360
improve the security level

113
00:04:41,360 --> 00:04:44,639
for larger p

114
00:04:45,919 --> 00:04:48,639
here you can see our results for n

115
00:04:48,639 --> 00:04:50,400
equals three

116
00:04:50,400 --> 00:04:52,800
we will discuss our results after we

117
00:04:52,800 --> 00:04:57,160
have presented our techniques

118
00:04:57,280 --> 00:04:58,080
so

119
00:04:58,080 --> 00:04:59,919
for our new techniques we use the new

120
00:04:59,919 --> 00:05:02,000
definition the prop distribution table

121
00:05:02,000 --> 00:05:03,919
pdt

122
00:05:03,919 --> 00:05:06,240
and the following we will first explain

123
00:05:06,240 --> 00:05:08,479
the pdt then we will give some

124
00:05:08,479 --> 00:05:10,960
composition results and explain how to

125
00:05:10,960 --> 00:05:13,360
compute them and in the end we will

126
00:05:13,360 --> 00:05:17,440
analyze the iss box with our pdd

127
00:05:17,440 --> 00:05:18,720
so let's

128
00:05:18,720 --> 00:05:21,120
define the prop distribution table for

129
00:05:21,120 --> 00:05:23,919
this we will consider our circuit again

130
00:05:23,919 --> 00:05:25,680
here you can see our example circuit

131
00:05:25,680 --> 00:05:27,520
with leakage l

132
00:05:27,520 --> 00:05:29,759
for definition of the probe distribution

133
00:05:29,759 --> 00:05:31,520
table we have to distinguish between

134
00:05:31,520 --> 00:05:33,840
internal leakage and output leakage

135
00:05:33,840 --> 00:05:39,199
therefore we split the l into l in and o

136
00:05:39,199 --> 00:05:41,280
our security proofs we will do with a

137
00:05:41,280 --> 00:05:43,840
simulator so we also need a simulator to

138
00:05:43,840 --> 00:05:46,960
simulate the leakage

139
00:05:47,440 --> 00:05:49,840
so let's consider an example for example

140
00:05:49,840 --> 00:05:53,280
the internal leakage a0s and l0 square

141
00:05:53,280 --> 00:05:54,560
and r

142
00:05:54,560 --> 00:05:56,800
and the output leakage c0

143
00:05:56,800 --> 00:05:59,280
so the simulator has to simulate all

144
00:05:59,280 --> 00:06:00,960
four values

145
00:06:00,960 --> 00:06:04,400
a0 s0 square r and c0

146
00:06:04,400 --> 00:06:07,199
for a0 the simulator needs a zero as

147
00:06:07,199 --> 00:06:09,280
input

148
00:06:09,280 --> 00:06:12,639
with a0 it can also simulate a0 square

149
00:06:12,639 --> 00:06:15,280
and the random value r it can simulate

150
00:06:15,280 --> 00:06:18,080
because it's chosen uniform at random

151
00:06:18,080 --> 00:06:21,280
since a0 square and r are already

152
00:06:21,280 --> 00:06:23,840
simulated the simulator also needs b0

153
00:06:23,840 --> 00:06:26,720
for the simulation of c0 so finally the

154
00:06:26,720 --> 00:06:29,440
simulator would say i need a 0 and b0

155
00:06:29,440 --> 00:06:31,919
for the simulation

156
00:06:31,919 --> 00:06:34,960
as you can see a0 and b0 are only one

157
00:06:34,960 --> 00:06:37,520
share of the secret a and b

158
00:06:37,520 --> 00:06:39,440
the simulator does not need

159
00:06:39,440 --> 00:06:40,880
a and b

160
00:06:40,880 --> 00:06:43,520
and this means that the values or the

161
00:06:43,520 --> 00:06:45,520
input the simulator needs is independent

162
00:06:45,520 --> 00:06:46,400
from the

163
00:06:46,400 --> 00:06:48,960
the secret a and b therefore we can say

164
00:06:48,960 --> 00:06:50,639
that the leakage is independent from the

165
00:06:50,639 --> 00:06:52,800
secret

166
00:06:52,800 --> 00:06:55,199
remember that this internal leakage is

167
00:06:55,199 --> 00:06:56,960
only a special case

168
00:06:56,960 --> 00:07:00,240
a0 and a0 square and r only leaks with a

169
00:07:00,240 --> 00:07:02,560
special probability

170
00:07:02,560 --> 00:07:04,960
since the internal random and leakage is

171
00:07:04,960 --> 00:07:07,360
randomized by the leakage probability p

172
00:07:07,360 --> 00:07:09,759
we know that the simulator only needs

173
00:07:09,759 --> 00:07:10,960
this

174
00:07:10,960 --> 00:07:13,759
input wires a0 and b0 with the given

175
00:07:13,759 --> 00:07:17,720
probability p prime

176
00:07:19,120 --> 00:07:22,080
we can compute this for all combinations

177
00:07:22,080 --> 00:07:25,440
of input values and output values

178
00:07:25,440 --> 00:07:28,000
so we can compute the probability that

179
00:07:28,000 --> 00:07:31,039
the simulator needs scx

180
00:07:31,039 --> 00:07:34,000
in case of leakage o prime and internal

181
00:07:34,000 --> 00:07:36,880
leakage element

182
00:07:36,880 --> 00:07:39,120
when we compute all these probabilities

183
00:07:39,120 --> 00:07:41,759
we have a table the resulting table is

184
00:07:41,759 --> 00:07:45,280
our prop distribution table in detail

185
00:07:45,280 --> 00:07:48,080
our prop distribution table pdt is a

186
00:07:48,080 --> 00:07:50,879
matrix where each

187
00:07:50,879 --> 00:07:53,680
column represents a possible output

188
00:07:53,680 --> 00:07:54,960
leakage

189
00:07:54,960 --> 00:07:57,680
and each row represents a possible input

190
00:07:57,680 --> 00:08:01,840
values which the simulator might need

191
00:08:02,879 --> 00:08:07,440
for example the bt pdt cx of a0 b0 and

192
00:08:07,440 --> 00:08:10,080
c0 is p51

193
00:08:10,080 --> 00:08:11,280
this means

194
00:08:11,280 --> 00:08:14,319
that the leakage elend and c0

195
00:08:14,319 --> 00:08:18,479
can be simulated with a0 and b0

196
00:08:18,479 --> 00:08:21,360
with the probability p51

197
00:08:21,360 --> 00:08:24,560
how to compute p51 we will explain after

198
00:08:24,560 --> 00:08:26,560
we have presented some

199
00:08:26,560 --> 00:08:29,440
pdt properties

200
00:08:29,440 --> 00:08:31,360
let's first consider the composition

201
00:08:31,360 --> 00:08:34,560
results of our pdt

202
00:08:35,120 --> 00:08:37,279
the complexity to compute the pdts is

203
00:08:37,279 --> 00:08:39,279
exponential with the number of wires

204
00:08:39,279 --> 00:08:41,360
this means it's impossible to compute

205
00:08:41,360 --> 00:08:44,000
the pdts for large circuits

206
00:08:44,000 --> 00:08:45,360
but we can

207
00:08:45,360 --> 00:08:47,600
split the circuit into smaller circuits

208
00:08:47,600 --> 00:08:49,519
and compute the pdts of the small

209
00:08:49,519 --> 00:08:51,920
circuits therefore we need composition

210
00:08:51,920 --> 00:08:54,000
results

211
00:08:54,000 --> 00:08:55,920
for this we can distinguish between two

212
00:08:55,920 --> 00:08:59,040
compositions the parallel composition

213
00:08:59,040 --> 00:09:01,120
where we compute two circuits probably

214
00:09:01,120 --> 00:09:02,560
independently

215
00:09:02,560 --> 00:09:04,800
and the sequential composition where the

216
00:09:04,800 --> 00:09:06,080
second

217
00:09:06,080 --> 00:09:08,080
circuit gets as input the output of the

218
00:09:08,080 --> 00:09:10,560
first circuit

219
00:09:10,560 --> 00:09:13,760
we can compose both compositions to a

220
00:09:13,760 --> 00:09:16,160
larger circuit c and now we can think

221
00:09:16,160 --> 00:09:19,600
about how to compute the pdt of this c

222
00:09:19,600 --> 00:09:22,560
theorem 1 tells us that we can compute

223
00:09:22,560 --> 00:09:25,200
the pdt of a parallel composition with a

224
00:09:25,200 --> 00:09:26,959
kronecker symbol

225
00:09:26,959 --> 00:09:30,480
anterior m2 tells us that we can

226
00:09:30,480 --> 00:09:32,720
upper bound the pdt of c

227
00:09:32,720 --> 00:09:37,080
with the standard matrix multiplication

228
00:09:37,519 --> 00:09:40,160
using these two composition results

229
00:09:40,160 --> 00:09:43,440
we can analyze our circuit example again

230
00:09:43,440 --> 00:09:45,839
as you can see here our cx can be

231
00:09:45,839 --> 00:09:51,839
described with the gadget g0 g1 and g2

232
00:09:51,839 --> 00:09:55,200
and we can compute the pdts of each gi

233
00:09:55,200 --> 00:09:56,959
now we can compose them together to

234
00:09:56,959 --> 00:09:59,040
compute the pdt prime

235
00:09:59,040 --> 00:10:02,240
and with theorem 1 and 2 we know that

236
00:10:02,240 --> 00:10:04,800
the pdt cx can be upper bounded with the

237
00:10:04,800 --> 00:10:07,120
pdt prime

238
00:10:07,120 --> 00:10:09,839
now we know that we have to split the

239
00:10:09,839 --> 00:10:12,800
circuit into smaller circuits to compute

240
00:10:12,800 --> 00:10:15,279
the pdt for large circuits but we also

241
00:10:15,279 --> 00:10:17,040
should avoid too many approximation

242
00:10:17,040 --> 00:10:19,519
steps due to the approximation and

243
00:10:19,519 --> 00:10:22,320
theorem too

244
00:10:22,640 --> 00:10:24,720
that's why guyton cassius will now

245
00:10:24,720 --> 00:10:28,560
explain us how to compute the pdts for

246
00:10:28,560 --> 00:10:31,760
circuits efficiently

247
00:10:31,760 --> 00:10:34,240
let us now discuss how to compute those

248
00:10:34,240 --> 00:10:35,519
pdts

249
00:10:35,519 --> 00:10:37,920
so as an example we have here on the

250
00:10:37,920 --> 00:10:40,800
left uh the simple refresh gadget with

251
00:10:40,800 --> 00:10:42,000
two shares

252
00:10:42,000 --> 00:10:44,240
so we'll first compute one and three on

253
00:10:44,240 --> 00:10:46,640
the pdt which is just one element of the

254
00:10:46,640 --> 00:10:49,600
matrix so this corresponds to one set of

255
00:10:49,600 --> 00:10:52,160
probes on the output and one set of

256
00:10:52,160 --> 00:10:53,600
inputs

257
00:10:53,600 --> 00:10:56,480
that we use to simulate so here we can

258
00:10:56,480 --> 00:10:58,640
we take the case where the output set is

259
00:10:58,640 --> 00:11:00,399
just a y0 probe

260
00:11:00,399 --> 00:11:03,040
and the input set would be just the x0

261
00:11:03,040 --> 00:11:04,720
input

262
00:11:04,720 --> 00:11:06,000
so let's now

263
00:11:06,000 --> 00:11:08,720
compute this pdt entry and in order to

264
00:11:08,720 --> 00:11:10,800
do that we'll iterate over all possible

265
00:11:10,800 --> 00:11:13,680
sets of probes and we'll sort them by

266
00:11:13,680 --> 00:11:14,560
size

267
00:11:14,560 --> 00:11:17,200
so if we take this i equals zero so an

268
00:11:17,200 --> 00:11:19,839
empty set of probes zero probe in it we

269
00:11:19,839 --> 00:11:22,880
see the only probe is y0

270
00:11:22,880 --> 00:11:25,600
and we don't need any input to simulate

271
00:11:25,600 --> 00:11:26,240
it

272
00:11:26,240 --> 00:11:29,760
just because y 0 is x 0 plus r and l is

273
00:11:29,760 --> 00:11:31,519
a fresh random so you don't need

274
00:11:31,519 --> 00:11:33,200
anything to simulate

275
00:11:33,200 --> 00:11:35,519
y 0 as it appears as a fresh random to

276
00:11:35,519 --> 00:11:37,200
the adversary

277
00:11:37,200 --> 00:11:39,760
so this ci which is the number of sets

278
00:11:39,760 --> 00:11:43,120
for which we need x 0 and exactly this

279
00:11:43,120 --> 00:11:46,720
x 0 as inputs i prime set

280
00:11:46,720 --> 00:11:47,680
is still

281
00:11:47,680 --> 00:11:50,000
just 0 cases for now

282
00:11:50,000 --> 00:11:52,880
let's now move to sets of size 1.

283
00:11:52,880 --> 00:11:54,320
the first set would be

284
00:11:54,320 --> 00:11:57,360
internal probe is just x0 so there if we

285
00:11:57,360 --> 00:11:59,040
have x0

286
00:11:59,040 --> 00:12:01,040
as a probe of course we need x0 to

287
00:12:01,040 --> 00:12:03,360
simulate it and we don't need x1 so we

288
00:12:03,360 --> 00:12:06,720
have a first set for which we need

289
00:12:06,720 --> 00:12:09,519
this i prime set to simulate so we

290
00:12:09,519 --> 00:12:11,600
increment ci to 1.

291
00:12:11,600 --> 00:12:14,160
let's now look at another leakage sets

292
00:12:14,160 --> 00:12:16,959
internal leakage is just a wire

293
00:12:16,959 --> 00:12:19,040
carrying the value l the fresh random

294
00:12:19,040 --> 00:12:20,560
and then you can see that if the address

295
00:12:20,560 --> 00:12:21,920
say observes

296
00:12:21,920 --> 00:12:25,760
y 0 and r since y zero x x zero plus r

297
00:12:25,760 --> 00:12:28,240
to simulate correctly the y zero uh we

298
00:12:28,240 --> 00:12:30,079
can't rely on the fair on the fact that

299
00:12:30,079 --> 00:12:31,920
r is a fresh random since it's already

300
00:12:31,920 --> 00:12:34,639
observed by the adversary so we need x0

301
00:12:34,639 --> 00:12:36,880
to simulate since we don't need x1 to

302
00:12:36,880 --> 00:12:40,160
simulate this we need exactly the y

303
00:12:40,160 --> 00:12:42,720
i prime so reset to simulate

304
00:12:42,720 --> 00:12:46,079
then we can increment again this c i

305
00:12:46,079 --> 00:12:48,320
and we can do the same for the otherwise

306
00:12:48,320 --> 00:12:50,720
most leakage value is r

307
00:12:50,720 --> 00:12:53,279
and finally if we like x 1 then we need

308
00:12:53,279 --> 00:12:56,000
the sets that contains x 1 and not x 0

309
00:12:56,000 --> 00:12:58,639
to simulate so we don't increment c i

310
00:12:58,639 --> 00:13:00,720
we can now move to sets of size 2. a

311
00:13:00,720 --> 00:13:02,160
first set here

312
00:13:02,160 --> 00:13:06,560
requires x 0 to be simulated but not x1

313
00:13:06,560 --> 00:13:09,760
a second one here requires both x0 and

314
00:13:09,760 --> 00:13:12,399
x1 to be simulated so we don't increment

315
00:13:12,399 --> 00:13:13,839
the ci

316
00:13:13,839 --> 00:13:15,839
and so on and so on and so on we iterate

317
00:13:15,839 --> 00:13:17,600
over all possible set of probes and we

318
00:13:17,600 --> 00:13:19,839
get this column of

319
00:13:19,839 --> 00:13:22,240
once we have the ci's we can associate

320
00:13:22,240 --> 00:13:23,279
to each

321
00:13:23,279 --> 00:13:25,519
size of set of prob probability to be

322
00:13:25,519 --> 00:13:27,680
leaked which is p to the i times one

323
00:13:27,680 --> 00:13:31,040
minus p to the w minus i so w is the

324
00:13:31,040 --> 00:13:33,360
number of wires excluding the output

325
00:13:33,360 --> 00:13:35,279
wires in secret

326
00:13:35,279 --> 00:13:38,240
and we get the pdt entry

327
00:13:38,240 --> 00:13:41,040
so this works well however there is one

328
00:13:41,040 --> 00:13:44,000
main limitations that we have to iterate

329
00:13:44,000 --> 00:13:46,240
over many many sets actually there are

330
00:13:46,240 --> 00:13:48,320
two to the w

331
00:13:48,320 --> 00:13:51,199
possible sets of internal per leakage

332
00:13:51,199 --> 00:13:54,160
and if the gadget becomes

333
00:13:54,160 --> 00:13:57,839
not so small like w can be 20 30 40 then

334
00:13:57,839 --> 00:14:00,560
it becomes infeasible to do

335
00:14:00,560 --> 00:14:03,680
so our solution to this would be to not

336
00:14:03,680 --> 00:14:05,600
consider all the possible set but for

337
00:14:05,600 --> 00:14:09,279
each size i we sample a limited number

338
00:14:09,279 --> 00:14:11,360
of sets that's fixed in advance for

339
00:14:11,360 --> 00:14:14,079
instance uh 10 millions

340
00:14:14,079 --> 00:14:15,760
and for each of those sets we do as

341
00:14:15,760 --> 00:14:17,920
previously we compute the number of

342
00:14:17,920 --> 00:14:19,920
offsets for which

343
00:14:19,920 --> 00:14:22,160
uh the inputs to

344
00:14:22,160 --> 00:14:24,000
used for the simulation corresponds

345
00:14:24,000 --> 00:14:26,160
exactly to our i prime sets under

346
00:14:26,160 --> 00:14:27,680
consideration

347
00:14:27,680 --> 00:14:30,079
and once we have this

348
00:14:30,079 --> 00:14:31,680
since we have taken the set randomly we

349
00:14:31,680 --> 00:14:33,920
can do a bit of statistics and get an

350
00:14:33,920 --> 00:14:37,040
upper bound ui such that ui is larger

351
00:14:37,040 --> 00:14:40,880
than ci with very high probability

352
00:14:40,880 --> 00:14:43,199
and once we have it we can then compute

353
00:14:43,199 --> 00:14:45,760
an upper bound for pdt entry

354
00:14:45,760 --> 00:14:47,519
you do it for all possible entries in

355
00:14:47,519 --> 00:14:49,760
the pdts and you get an upper bound for

356
00:14:49,760 --> 00:14:52,319
the pdt

357
00:14:52,639 --> 00:14:55,120
so once we have our pdts

358
00:14:55,120 --> 00:14:57,519
we can then

359
00:14:57,519 --> 00:15:00,000
compose them as maximilian explained

360
00:15:00,000 --> 00:15:01,040
before

361
00:15:01,040 --> 00:15:01,920
um

362
00:15:01,920 --> 00:15:04,000
and we can look for case study actually

363
00:15:04,000 --> 00:15:06,320
we took the aess box as a case study or

364
00:15:06,320 --> 00:15:08,560
more precisely just a nonlinear part of

365
00:15:08,560 --> 00:15:11,519
it which is the inversion in gf256

366
00:15:11,519 --> 00:15:13,360
that is implemented in a quite common

367
00:15:13,360 --> 00:15:15,120
way for masking that is a multiplication

368
00:15:15,120 --> 00:15:17,760
and exponentiation chain so we have

369
00:15:17,760 --> 00:15:19,639
there multiplication gadgets

370
00:15:19,639 --> 00:15:22,320
exponentiation to even powers

371
00:15:22,320 --> 00:15:23,120
and

372
00:15:23,120 --> 00:15:25,519
also if you copy gadgets in case it's

373
00:15:25,519 --> 00:15:27,360
needed and then we add a few refresh to

374
00:15:27,360 --> 00:15:29,360
improve the security in well chosen

375
00:15:29,360 --> 00:15:30,880
position actually so this is really

376
00:15:30,880 --> 00:15:32,000
based

377
00:15:32,000 --> 00:15:33,839
on state-of-the-art

378
00:15:33,839 --> 00:15:35,199
papers

379
00:15:35,199 --> 00:15:36,560
so we just take

380
00:15:36,560 --> 00:15:38,800
this implementation and based on this

381
00:15:38,800 --> 00:15:40,720
implementation we can compute the pdts

382
00:15:40,720 --> 00:15:42,800
for all the smaller gadgets and finally

383
00:15:42,800 --> 00:15:44,560
using our composition theorem we have a

384
00:15:44,560 --> 00:15:45,279
big

385
00:15:45,279 --> 00:15:47,839
multiplication of these pdts which gives

386
00:15:47,839 --> 00:15:50,399
us stability for the xbox and then from

387
00:15:50,399 --> 00:15:52,639
the pdt we can compute the security

388
00:15:52,639 --> 00:15:53,759
level

389
00:15:53,759 --> 00:15:56,079
which brings us to the results

390
00:15:56,079 --> 00:15:57,920
concretely this is the state of the art

391
00:15:57,920 --> 00:16:01,839
so the rp2 paper as we call it and it is

392
00:16:01,839 --> 00:16:05,440
like for 3 9 and 27 shares

393
00:16:05,440 --> 00:16:07,199
the security level

394
00:16:07,199 --> 00:16:09,600
and now we can see what we can have as a

395
00:16:09,600 --> 00:16:12,720
security level so for a different

396
00:16:12,720 --> 00:16:14,480
gadget because their implementation is

397
00:16:14,480 --> 00:16:16,240
slightly different but roughly it's

398
00:16:16,240 --> 00:16:17,680
quite similar

399
00:16:17,680 --> 00:16:20,480
and we have all results for three shares

400
00:16:20,480 --> 00:16:24,560
as you already saw it so we can improve

401
00:16:24,880 --> 00:16:27,040
the the results and we can also see that

402
00:16:27,040 --> 00:16:29,440
we can go to six shares

403
00:16:29,440 --> 00:16:32,240
and we have also a better security level

404
00:16:32,240 --> 00:16:34,480
so if we compare it with two main

405
00:16:34,480 --> 00:16:36,560
improvements the first improvement is on

406
00:16:36,560 --> 00:16:38,880
the minimum noise level that we tolerate

407
00:16:38,880 --> 00:16:41,199
that is the larger p

408
00:16:41,199 --> 00:16:42,320
for which

409
00:16:42,320 --> 00:16:44,720
uh we have some security that is the

410
00:16:44,720 --> 00:16:47,519
curve is lower than one so here we see

411
00:16:47,519 --> 00:16:49,360
that compared to the state of the art we

412
00:16:49,360 --> 00:16:51,839
move a bit to the right so we improve

413
00:16:51,839 --> 00:16:53,360
this tolerated

414
00:16:53,360 --> 00:16:55,279
leakage probability

415
00:16:55,279 --> 00:16:57,279
and second if you look at the slope of

416
00:16:57,279 --> 00:16:58,800
this curve

417
00:16:58,800 --> 00:17:00,800
this is related to the number of shares

418
00:17:00,800 --> 00:17:02,720
but also to the quality or tightness of

419
00:17:02,720 --> 00:17:05,039
the proof and here we can see that both

420
00:17:05,039 --> 00:17:06,559
if you look at the left this slope

421
00:17:06,559 --> 00:17:08,720
compared to ours we improve a bit the

422
00:17:08,720 --> 00:17:10,799
slope and then for six shares you can

423
00:17:10,799 --> 00:17:12,799
see that asymptotically the kind of the

424
00:17:12,799 --> 00:17:14,640
same

425
00:17:14,640 --> 00:17:17,199
security order so the same slope as the

426
00:17:17,199 --> 00:17:18,959
27 shares

427
00:17:18,959 --> 00:17:21,679
so that's a significant improvement in

428
00:17:21,679 --> 00:17:23,760
terms of reducing the number of shares

429
00:17:23,760 --> 00:17:25,760
that you need to achieve the same

430
00:17:25,760 --> 00:17:27,280
security level

431
00:17:27,280 --> 00:17:29,200
and lower number of shares means in

432
00:17:29,200 --> 00:17:32,480
practice better performance lower cost

433
00:17:32,480 --> 00:17:34,559
for any kind of cost metric that be like

434
00:17:34,559 --> 00:17:36,559
circuit size computation time or

435
00:17:36,559 --> 00:17:38,640
whatever

436
00:17:38,640 --> 00:17:40,480
so to conclude

437
00:17:40,480 --> 00:17:42,480
we have introduced this

438
00:17:42,480 --> 00:17:45,440
pdt probe distribution table which is a

439
00:17:45,440 --> 00:17:48,160
new approach for the security in the

440
00:17:48,160 --> 00:17:51,360
random probing model for side channel

441
00:17:51,360 --> 00:17:53,600
then in this random probing model using

442
00:17:53,600 --> 00:17:55,600
the pdts we can

443
00:17:55,600 --> 00:17:58,160
make a composition approach that allows

444
00:17:58,160 --> 00:17:59,919
to compute the security for very large

445
00:17:59,919 --> 00:18:02,640
gadgets based on smaller sub gadgets

446
00:18:02,640 --> 00:18:05,280
and finally we have a method that allows

447
00:18:05,280 --> 00:18:07,280
us to use to compute efficiently the

448
00:18:07,280 --> 00:18:08,880
pdps

449
00:18:08,880 --> 00:18:10,960
and a particularity of this method

450
00:18:10,960 --> 00:18:12,799
that's quite new in the field is to use

451
00:18:12,799 --> 00:18:15,840
a monte carlo method to do that

452
00:18:15,840 --> 00:18:18,240
so a statistical approach

453
00:18:18,240 --> 00:18:20,320
so basically this method

454
00:18:20,320 --> 00:18:23,200
improves concretely with title bounds

455
00:18:23,200 --> 00:18:25,360
and also interesting characteristic is

456
00:18:25,360 --> 00:18:27,360
it is not tied to any masking theme we

457
00:18:27,360 --> 00:18:29,440
don't introduce a new masking game we

458
00:18:29,440 --> 00:18:31,679
just introduced a new evaluation

459
00:18:31,679 --> 00:18:33,679
approach that can be a pro that can be

460
00:18:33,679 --> 00:18:35,360
applied to many different masking

461
00:18:35,360 --> 00:18:36,640
schemes

462
00:18:36,640 --> 00:18:38,320
however there are limitations to this

463
00:18:38,320 --> 00:18:41,360
approach the first one is still the

464
00:18:41,360 --> 00:18:43,520
complexity computational complexity of

465
00:18:43,520 --> 00:18:45,360
this evaluation when you go to two large

466
00:18:45,360 --> 00:18:47,760
gadgets even or monte carlo approach is

467
00:18:47,760 --> 00:18:50,240
limited and it's not able to get a tight

468
00:18:50,240 --> 00:18:52,080
enough results

469
00:18:52,080 --> 00:18:54,320
or good enough results to to improve the

470
00:18:54,320 --> 00:18:57,039
state of the art and also it is not

471
00:18:57,039 --> 00:18:59,039
fully tied so we have some untightness

472
00:18:59,039 --> 00:19:01,200
in the evaluation of the pdt's or in the

473
00:19:01,200 --> 00:19:02,640
computations

474
00:19:02,640 --> 00:19:04,640
and so the first

475
00:19:04,640 --> 00:19:06,960
natural improvement track is to try to

476
00:19:06,960 --> 00:19:08,400
improve still

477
00:19:08,400 --> 00:19:09,760
this tightness

478
00:19:09,760 --> 00:19:13,440
and also these compositions theorems uh

479
00:19:13,440 --> 00:19:16,080
they are quite nice when you compute

480
00:19:16,080 --> 00:19:19,360
um on for instance a nest box size but

481
00:19:19,360 --> 00:19:21,679
we are still not able to

482
00:19:21,679 --> 00:19:24,240
perform this matrix products and so on

483
00:19:24,240 --> 00:19:25,919
for very large size

484
00:19:25,919 --> 00:19:28,880
gadgets such as a full aes so there is

485
00:19:28,880 --> 00:19:30,240
also

486
00:19:30,240 --> 00:19:32,720
an improvement point so thank you for

487
00:19:32,720 --> 00:19:34,720
listening to this video and we'll be

488
00:19:34,720 --> 00:19:36,400
very happy to take and answer your

489
00:19:36,400 --> 00:19:38,559
questions either live at the conference

490
00:19:38,559 --> 00:19:41,879
or by email

