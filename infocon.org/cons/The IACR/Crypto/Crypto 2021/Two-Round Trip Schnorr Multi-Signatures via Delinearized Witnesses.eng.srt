1
00:00:02,560 --> 00:00:04,400
hello everyone today i'm going to

2
00:00:04,400 --> 00:00:07,040
present you our new two round and

3
00:00:07,040 --> 00:00:10,320
channel base mod signature scheme

4
00:00:10,320 --> 00:00:12,639
mult signature protocol is a signature

5
00:00:12,639 --> 00:00:15,599
scheme where um it allows multiple

6
00:00:15,599 --> 00:00:18,960
parties collaboratively sign a message

7
00:00:18,960 --> 00:00:21,760
and it can be verified by anyone who has

8
00:00:21,760 --> 00:00:24,160
a public keys of science

9
00:00:24,160 --> 00:00:27,439
and it consists of following algorithms

10
00:00:27,439 --> 00:00:29,439
the first algorithms the key generation

11
00:00:29,439 --> 00:00:30,640
algorithm

12
00:00:30,640 --> 00:00:32,399
with the secret it's which outputs the

13
00:00:32,399 --> 00:00:35,440
secrets and public key pair for assigner

14
00:00:35,440 --> 00:00:37,040
and the other one is the signing

15
00:00:37,040 --> 00:00:38,719
algorithm

16
00:00:38,719 --> 00:00:43,440
which runs with the input of the

17
00:00:43,520 --> 00:00:46,079
secret key and the message and it's an

18
00:00:46,079 --> 00:00:48,960
interactive algorithm run by the

19
00:00:48,960 --> 00:00:51,280
other signers

20
00:00:51,280 --> 00:00:53,680
there's also key aggregation already

21
00:00:53,680 --> 00:00:55,680
which receives the public key of the

22
00:00:55,680 --> 00:00:58,000
signers as an input and then outputs an

23
00:00:58,000 --> 00:01:00,960
aggregate and aggregated key

24
00:01:00,960 --> 00:01:03,199
there is also verification algorithm

25
00:01:03,199 --> 00:01:05,119
which verifies the signature with the

26
00:01:05,119 --> 00:01:08,400
aggregated public key

27
00:01:08,400 --> 00:01:10,080
as i said our

28
00:01:10,080 --> 00:01:12,400
scheme is based on schnorr signature

29
00:01:12,400 --> 00:01:14,400
skin therefore i would like to remind

30
00:01:14,400 --> 00:01:17,600
you how schnoor signature scheme works

31
00:01:17,600 --> 00:01:20,320
it works on a group of order p and g

32
00:01:20,320 --> 00:01:22,240
here is generator

33
00:01:22,240 --> 00:01:25,280
and the secret key is a is an element

34
00:01:25,280 --> 00:01:28,640
from set p and the public key is x

35
00:01:28,640 --> 00:01:30,799
multiply with g

36
00:01:30,799 --> 00:01:33,280
and signer signs the message as follows

37
00:01:33,280 --> 00:01:36,159
it first picks the random element from

38
00:01:36,159 --> 00:01:39,840
set p and then generates the t which is

39
00:01:39,840 --> 00:01:41,520
r multiply with g

40
00:01:41,520 --> 00:01:44,799
and here we call t the commitment of the

41
00:01:44,799 --> 00:01:47,600
schnoor signature scheme

42
00:01:47,600 --> 00:01:50,560
and also it hashes the message the

43
00:01:50,560 --> 00:01:52,799
public key and the commitment and

44
00:01:52,799 --> 00:01:54,720
obtains the c value

45
00:01:54,720 --> 00:01:58,159
and it obtains finally as s value which

46
00:01:58,159 --> 00:02:01,600
is the sum of r and xc and the signature

47
00:02:01,600 --> 00:02:05,280
consists of c and sc

48
00:02:06,079 --> 00:02:09,360
verification works as follows given the

49
00:02:09,360 --> 00:02:10,479
message

50
00:02:10,479 --> 00:02:12,000
and

51
00:02:12,000 --> 00:02:13,599
and signature

52
00:02:13,599 --> 00:02:16,000
the verifier checks

53
00:02:16,000 --> 00:02:18,080
whether hash of the message the public

54
00:02:18,080 --> 00:02:21,840
key and su minus cx is equal to c and if

55
00:02:21,840 --> 00:02:24,239
the signature is correctly constructed

56
00:02:24,239 --> 00:02:28,800
then sg minus cx should be equal to t

57
00:02:28,800 --> 00:02:31,519
one common approach to construct a a

58
00:02:31,519 --> 00:02:34,160
channel based smart signature scheme is

59
00:02:34,160 --> 00:02:36,319
letting parties to collaboratively

60
00:02:36,319 --> 00:02:38,400
little parties collaboratively generate

61
00:02:38,400 --> 00:02:40,480
a commitment t

62
00:02:40,480 --> 00:02:42,319
and then using the linearity of the

63
00:02:42,319 --> 00:02:45,519
schnorr signature scheme obtain the

64
00:02:45,519 --> 00:02:47,760
final signature

65
00:02:47,760 --> 00:02:50,319
um so in three-round case it is much

66
00:02:50,319 --> 00:02:53,120
easier to do the generation of the

67
00:02:53,120 --> 00:02:55,760
commitments collaboratively but in

68
00:02:55,760 --> 00:02:59,920
two-round case it is not um as easy as

69
00:02:59,920 --> 00:03:02,159
in the three-round case because in

70
00:03:02,159 --> 00:03:05,280
two-round case first each parties send

71
00:03:05,280 --> 00:03:08,000
and send some messages to generate this

72
00:03:08,000 --> 00:03:09,920
commitment

73
00:03:09,920 --> 00:03:12,000
and then they send their partial

74
00:03:12,000 --> 00:03:14,640
signatures to contain the s-value of

75
00:03:14,640 --> 00:03:17,200
sectional signatures

76
00:03:17,200 --> 00:03:18,879
however here we

77
00:03:18,879 --> 00:03:20,800
we should be very careful in the

78
00:03:20,800 --> 00:03:23,920
commitment generation process to prevent

79
00:03:23,920 --> 00:03:26,080
adversarial choice of randomness that

80
00:03:26,080 --> 00:03:27,360
depends on

81
00:03:27,360 --> 00:03:32,840
uh the parties on this party's randoms

82
00:03:32,879 --> 00:03:34,480
these are existing

83
00:03:34,480 --> 00:03:36,799
uh two ranch nor basement signature

84
00:03:36,799 --> 00:03:38,239
schemes

85
00:03:38,239 --> 00:03:41,040
um there has been many before but it has

86
00:03:41,040 --> 00:03:43,599
been proven it has been shown by drivers

87
00:03:43,599 --> 00:03:44,879
at all that

88
00:03:44,879 --> 00:03:48,560
uh the existing ones are not secure at

89
00:03:48,560 --> 00:03:50,720
all by showing an attack that is called

90
00:03:50,720 --> 00:03:51,840
case amount

91
00:03:51,840 --> 00:03:53,360
and this attack is based on the

92
00:03:53,360 --> 00:03:56,720
adversarial choice of randomness

93
00:03:56,720 --> 00:03:58,959
that depends on the unsparky's

94
00:03:58,959 --> 00:04:02,239
randomness and after that drivers at all

95
00:04:02,239 --> 00:04:06,959
proposed a new scheme that's called mbcj

96
00:04:06,959 --> 00:04:09,280
uh it's a snare-based

97
00:04:09,280 --> 00:04:10,879
scheme but

98
00:04:10,879 --> 00:04:12,239
the

99
00:04:12,239 --> 00:04:15,439
form of signature is not the same as

100
00:04:15,439 --> 00:04:17,440
schnorr signature scheme therefore the

101
00:04:17,440 --> 00:04:18,798
verification

102
00:04:18,798 --> 00:04:22,800
is less efficient and the domain

103
00:04:22,800 --> 00:04:24,960
size the public key size and signature

104
00:04:24,960 --> 00:04:26,720
size is bigger

105
00:04:26,720 --> 00:04:28,560
than additional signature

106
00:04:28,560 --> 00:04:30,479
and the rest of the

107
00:04:30,479 --> 00:04:33,919
existing ones actually are in the form

108
00:04:33,919 --> 00:04:36,240
of snare signature therefore they all

109
00:04:36,240 --> 00:04:38,479
have the same verification efficiency

110
00:04:38,479 --> 00:04:41,360
and the same domain

111
00:04:41,360 --> 00:04:44,080
okay the other interesting protocol uh

112
00:04:44,080 --> 00:04:48,240
is music tien um musician

113
00:04:48,240 --> 00:04:50,639
uh has a different approach to prevent

114
00:04:50,639 --> 00:04:54,080
the adversary choice of randomness

115
00:04:54,080 --> 00:04:58,240
it is based on a deterministic nonsense

116
00:04:58,240 --> 00:05:01,280
uh so that the adversary has only one

117
00:05:01,280 --> 00:05:04,160
option to choose his randomness

118
00:05:04,160 --> 00:05:07,520
however it requires many uh heavy zero

119
00:05:07,520 --> 00:05:09,440
knowledge proofs in the signing process

120
00:05:09,440 --> 00:05:11,199
therefore design process is not

121
00:05:11,199 --> 00:05:12,400
efficient

122
00:05:12,400 --> 00:05:15,759
music 2 is a concurrent word with ours

123
00:05:15,759 --> 00:05:18,800
and we both use a similar approach

124
00:05:18,800 --> 00:05:22,560
here our parameter m and v corresponds

125
00:05:22,560 --> 00:05:25,680
to the same parameter

126
00:05:25,680 --> 00:05:26,960
and they show

127
00:05:26,960 --> 00:05:29,440
music 2 is secure if they choose a

128
00:05:29,440 --> 00:05:32,400
parameter b equals 4

129
00:05:32,400 --> 00:05:34,880
in this standard model

130
00:05:34,880 --> 00:05:37,360
and if they choose the parameter equals

131
00:05:37,360 --> 00:05:40,240
to 2 then it is secure in the algebraic

132
00:05:40,240 --> 00:05:42,479
group model the version

133
00:05:42,479 --> 00:05:45,039
in the algebraic group model is the most

134
00:05:45,039 --> 00:05:47,919
efficient existing two-range nerve-based

135
00:05:47,919 --> 00:05:50,479
smart signature scheme

136
00:05:50,479 --> 00:05:53,520
and uh similarly we also show that our

137
00:05:53,520 --> 00:05:55,680
protocol is secure

138
00:05:55,680 --> 00:05:58,160
uh in the algebraic group model if we

139
00:05:58,160 --> 00:06:01,280
choose m equals to two

140
00:06:01,280 --> 00:06:03,759
and with an optimized network

141
00:06:03,759 --> 00:06:04,479
uh

142
00:06:04,479 --> 00:06:06,960
which is based on a tree structure

143
00:06:06,960 --> 00:06:09,520
a designing process can be executed much

144
00:06:09,520 --> 00:06:12,159
efficiently

145
00:06:12,319 --> 00:06:15,039
um in a nutshell in this paper our

146
00:06:15,039 --> 00:06:17,520
contribution is as follows we construct

147
00:06:17,520 --> 00:06:19,520
a two-range lower base

148
00:06:19,520 --> 00:06:23,039
signature protocol that we call dwms

149
00:06:23,039 --> 00:06:25,600
the final signature in our protocol is

150
00:06:25,600 --> 00:06:27,360
the channel signature

151
00:06:27,360 --> 00:06:29,840
and we prove that our protocol is secure

152
00:06:29,840 --> 00:06:32,319
in algebraic group mode

153
00:06:32,319 --> 00:06:34,880
and also we define a new computationally

154
00:06:34,880 --> 00:06:37,759
hard problem that we call and want some

155
00:06:37,759 --> 00:06:38,880
problem

156
00:06:38,880 --> 00:06:41,360
and show its hardness in agm under the

157
00:06:41,360 --> 00:06:43,039
assumption that the split logarithm

158
00:06:43,039 --> 00:06:45,919
problem is hard

159
00:06:45,919 --> 00:06:48,880
so first i will explain you how our

160
00:06:48,880 --> 00:06:52,400
protocol works and i will explain how

161
00:06:52,400 --> 00:06:53,360
uh

162
00:06:53,360 --> 00:06:56,800
we defined the entwine sum problem

163
00:06:56,800 --> 00:07:01,520
and finally i will briefly show how we

164
00:07:01,520 --> 00:07:05,680
through the security of dwms

165
00:07:07,039 --> 00:07:07,840
so

166
00:07:07,840 --> 00:07:09,840
the key generation algorithm of our

167
00:07:09,840 --> 00:07:11,759
scheme is the same

168
00:07:11,759 --> 00:07:14,560
as the schnorr signature scheme i will

169
00:07:14,560 --> 00:07:16,960
explain the designing process

170
00:07:16,960 --> 00:07:20,160
uh in the next slide and key aggregation

171
00:07:20,160 --> 00:07:22,080
works as follows

172
00:07:22,080 --> 00:07:24,160
given the public keys

173
00:07:24,160 --> 00:07:27,199
the key aggregation algorithm first

174
00:07:27,199 --> 00:07:30,800
finds the scalar which is the output of

175
00:07:30,800 --> 00:07:34,160
random oracle h2 for each signing key

176
00:07:34,160 --> 00:07:38,479
and then sums all all these

177
00:07:38,479 --> 00:07:41,120
public keys

178
00:07:41,599 --> 00:07:43,520
and verification process

179
00:07:43,520 --> 00:07:48,318
again is the same as rational signatures

180
00:07:49,120 --> 00:07:51,520
uh in the first round of our scheme in

181
00:07:51,520 --> 00:07:53,599
the signing process

182
00:07:53,599 --> 00:07:56,160
first of all the parties generate

183
00:07:56,160 --> 00:07:58,319
sends the necessary messages to each

184
00:07:58,319 --> 00:08:00,000
other to generate the commitment of

185
00:08:00,000 --> 00:08:03,039
decision signatures

186
00:08:04,000 --> 00:08:06,960
therefore each party generates first and

187
00:08:06,960 --> 00:08:08,400
random number

188
00:08:08,400 --> 00:08:09,680
from zp

189
00:08:09,680 --> 00:08:13,360
and then commits to this random numbers

190
00:08:13,360 --> 00:08:15,199
we call these random numbers as

191
00:08:15,199 --> 00:08:16,479
witnesses

192
00:08:16,479 --> 00:08:18,240
and these

193
00:08:18,240 --> 00:08:22,280
group elements as pre-commitments

194
00:08:22,800 --> 00:08:24,400
then they send the

195
00:08:24,400 --> 00:08:26,960
pre-commitments to each other and then

196
00:08:26,960 --> 00:08:28,479
first round ends

197
00:08:28,479 --> 00:08:30,560
the second round of our protocol works

198
00:08:30,560 --> 00:08:31,840
as follows

199
00:08:31,840 --> 00:08:33,919
first of all each party generates the

200
00:08:33,919 --> 00:08:37,200
station id of the signing process which

201
00:08:37,200 --> 00:08:38,799
consists of the

202
00:08:38,799 --> 00:08:41,599
public key of designers the message that

203
00:08:41,599 --> 00:08:43,919
is going to be signed and all the

204
00:08:43,919 --> 00:08:45,600
pre-commitments

205
00:08:45,600 --> 00:08:48,080
and here each party has er and

206
00:08:48,080 --> 00:08:50,800
pre-commitments

207
00:08:50,800 --> 00:08:52,240
and then they

208
00:08:52,240 --> 00:08:56,800
compute the commitment of the schnerski

209
00:08:57,279 --> 00:08:59,200
how do they do that

210
00:08:59,200 --> 00:09:00,720
they multiply

211
00:09:00,720 --> 00:09:02,160
each

212
00:09:02,160 --> 00:09:03,680
pre-commitment

213
00:09:03,680 --> 00:09:04,640
with a

214
00:09:04,640 --> 00:09:08,160
scalar that we define with alpha and

215
00:09:08,160 --> 00:09:10,880
then they sum all of them

216
00:09:10,880 --> 00:09:13,440
how we define the alpha alpha is the

217
00:09:13,440 --> 00:09:17,040
random oracle output of station id

218
00:09:17,040 --> 00:09:22,199
and in the corresponding index

219
00:09:22,320 --> 00:09:23,760
and here we

220
00:09:23,760 --> 00:09:25,600
call

221
00:09:25,600 --> 00:09:26,320
in

222
00:09:26,320 --> 00:09:28,240
combination of weaknesses with random

223
00:09:28,240 --> 00:09:31,760
output as delinearization

224
00:09:31,760 --> 00:09:34,399
and the reason that we use this naming

225
00:09:34,399 --> 00:09:36,720
is that the coefficients of the linear

226
00:09:36,720 --> 00:09:38,959
combinations are random

227
00:09:38,959 --> 00:09:41,920
and it cannot be known by the adversary

228
00:09:41,920 --> 00:09:44,080
before the adversary selects its own

229
00:09:44,080 --> 00:09:46,640
randomness

230
00:09:46,640 --> 00:09:49,519
so it reduces a bit of adaptive random

231
00:09:49,519 --> 00:09:51,680
selection of

232
00:09:51,680 --> 00:09:53,839
adopted random selection by the

233
00:09:53,839 --> 00:09:56,080
adversary

234
00:09:56,080 --> 00:09:59,980
after the commitment generation

235
00:09:59,980 --> 00:10:02,079
[Music]

236
00:10:02,079 --> 00:10:04,079
is in decisional signature scheme they

237
00:10:04,079 --> 00:10:06,959
compute the c value which is the hash of

238
00:10:06,959 --> 00:10:09,519
the message to aggregate public key and

239
00:10:09,519 --> 00:10:10,800
commitment

240
00:10:10,800 --> 00:10:12,560
and then they generate

241
00:10:12,560 --> 00:10:15,200
individual partial signatures

242
00:10:15,200 --> 00:10:17,200
and the individual pressure signature

243
00:10:17,200 --> 00:10:21,040
consists of two delinearized weaknesses

244
00:10:21,040 --> 00:10:25,599
plus the secret key multiplied with c

245
00:10:25,680 --> 00:10:27,680
and we call that as partial signature

246
00:10:27,680 --> 00:10:29,600
and they exchange the partial signatures

247
00:10:29,600 --> 00:10:30,959
with each other

248
00:10:30,959 --> 00:10:33,360
in the end the final signature

249
00:10:33,360 --> 00:10:34,240
is

250
00:10:34,240 --> 00:10:34,959
uh

251
00:10:34,959 --> 00:10:38,399
c and x and where s is the sum of all

252
00:10:38,399 --> 00:10:40,800
partial signatures

253
00:10:40,800 --> 00:10:43,680
okay now i'm going to explain you are a

254
00:10:43,680 --> 00:10:46,640
new uh hard problem that we call entwine

255
00:10:46,640 --> 00:10:49,200
some problem

256
00:10:49,200 --> 00:10:52,160
okay um so first of all i want to show

257
00:10:52,160 --> 00:10:55,360
you how we come up with this problem

258
00:10:55,360 --> 00:10:59,760
uh when we constructed the wms we first

259
00:10:59,760 --> 00:11:02,000
wanted to attack the protocol

260
00:11:02,000 --> 00:11:04,720
in our trials we see that actually the

261
00:11:04,720 --> 00:11:07,200
following attack is possible

262
00:11:07,200 --> 00:11:10,640
the adversary starts q signing sessions

263
00:11:10,640 --> 00:11:13,680
with a party on this party and therefore

264
00:11:13,680 --> 00:11:17,920
the honest party stands um

265
00:11:17,920 --> 00:11:20,560
pre-commitments for each session

266
00:11:20,560 --> 00:11:24,160
and after that adversary tries to find

267
00:11:24,160 --> 00:11:26,320
some pre-commitments

268
00:11:26,320 --> 00:11:28,880
and the forgery message and also sums

269
00:11:28,880 --> 00:11:31,839
the colors q number of cues colors

270
00:11:31,839 --> 00:11:36,240
that satisfies this equality

271
00:11:36,640 --> 00:11:39,040
and in this equality

272
00:11:39,040 --> 00:11:41,120
the linear combination of

273
00:11:41,120 --> 00:11:45,760
ci values here ci is the c value of id

274
00:11:45,760 --> 00:11:46,800
session

275
00:11:46,800 --> 00:11:48,880
the linear combination of c height

276
00:11:48,880 --> 00:11:51,040
values is going to be equal to the

277
00:11:51,040 --> 00:11:54,399
forgery c values

278
00:11:54,399 --> 00:11:56,880
and how we define the forgery values it

279
00:11:56,880 --> 00:11:59,519
is the hash of the forgery message

280
00:11:59,519 --> 00:12:00,240
the

281
00:12:00,240 --> 00:12:03,519
aggregated public key and also

282
00:12:03,519 --> 00:12:04,880
um

283
00:12:04,880 --> 00:12:07,279
the linear linear combination of the

284
00:12:07,279 --> 00:12:08,880
linearized

285
00:12:08,880 --> 00:12:11,839
pre-commitments of honest parties

286
00:12:11,839 --> 00:12:14,800
and the restriction here is that this

287
00:12:14,800 --> 00:12:17,040
that should be the same relate same with

288
00:12:17,040 --> 00:12:21,440
the linear relation here and also here

289
00:12:21,440 --> 00:12:23,920
and if the adversary can do that in that

290
00:12:23,920 --> 00:12:26,880
case he can forge the signature

291
00:12:26,880 --> 00:12:29,600
and um

292
00:12:29,600 --> 00:12:32,160
actually we showed in the paper that

293
00:12:32,160 --> 00:12:36,240
adversary can do that if m equals to one

294
00:12:36,240 --> 00:12:37,839
it's an interesting

295
00:12:37,839 --> 00:12:39,600
attack you can check the paper for the

296
00:12:39,600 --> 00:12:40,720
attack

297
00:12:40,720 --> 00:12:41,920
uh but

298
00:12:41,920 --> 00:12:44,639
uh we see that it's not possible

299
00:12:44,639 --> 00:12:47,839
when and greater than one as don't get

300
00:12:47,839 --> 00:12:50,160
distributing problems

301
00:12:50,160 --> 00:12:55,120
and from that uh attack we define our m

302
00:12:55,120 --> 00:12:57,200
and find some problem

303
00:12:57,200 --> 00:13:00,720
and it's it is as it works as follows

304
00:13:00,720 --> 00:13:03,519
he generates q challenges

305
00:13:03,519 --> 00:13:06,160
where each queue challenges consists of

306
00:13:06,160 --> 00:13:08,240
m group elements

307
00:13:08,240 --> 00:13:10,720
after that he sends the group structure

308
00:13:10,720 --> 00:13:12,720
and all these challenges to the

309
00:13:12,720 --> 00:13:14,480
adversary

310
00:13:14,480 --> 00:13:16,399
adversary has access to the random

311
00:13:16,399 --> 00:13:21,040
oracle h h1 and h h prime and all these

312
00:13:21,040 --> 00:13:24,240
random oracles maps to the

313
00:13:24,240 --> 00:13:26,720
set b

314
00:13:26,880 --> 00:13:28,720
in the end the

315
00:13:28,720 --> 00:13:31,680
adversary outputs a vector beta

316
00:13:31,680 --> 00:13:35,680
of size q plus one from set p

317
00:13:35,680 --> 00:13:38,880
and some um

318
00:13:39,120 --> 00:13:40,959
output

319
00:13:40,959 --> 00:13:45,120
q q output from ordinary set and also an

320
00:13:45,120 --> 00:13:47,760
output from ordinary set that we call

321
00:13:47,760 --> 00:13:50,000
omega here

322
00:13:50,000 --> 00:13:53,040
and here the adversary means if this

323
00:13:53,040 --> 00:13:56,079
equality is satisfied

324
00:13:56,079 --> 00:13:57,120
so

325
00:13:57,120 --> 00:13:59,839
basically in this equality if the linear

326
00:13:59,839 --> 00:14:02,720
combination of the uh

327
00:14:02,720 --> 00:14:03,839
of

328
00:14:03,839 --> 00:14:07,440
random oracle h outputs are equal to

329
00:14:07,440 --> 00:14:11,360
random oracle output of h

330
00:14:11,360 --> 00:14:13,760
and here the restriction as you can see

331
00:14:13,760 --> 00:14:14,800
is that

332
00:14:14,800 --> 00:14:17,600
this same linear relationship that is

333
00:14:17,600 --> 00:14:20,560
satisfied in this side of the

334
00:14:20,560 --> 00:14:23,040
equation in set b

335
00:14:23,040 --> 00:14:27,680
also must be satisfied as the input of

336
00:14:27,680 --> 00:14:32,399
random oracle h in g

337
00:14:32,399 --> 00:14:35,760
so here how we define t u t u is the

338
00:14:35,760 --> 00:14:37,360
delinearized

339
00:14:37,360 --> 00:14:38,480
uh

340
00:14:38,480 --> 00:14:42,680
some of the delinearized challenges

341
00:14:44,399 --> 00:14:46,320
and so um

342
00:14:46,320 --> 00:14:49,279
we showed that our knee problem is hard

343
00:14:49,279 --> 00:14:52,160
as long as m is greater than one

344
00:14:52,160 --> 00:14:54,399
and this quick algorithm problem is hard

345
00:14:54,399 --> 00:14:56,720
and we show this in the algebraic group

346
00:14:56,720 --> 00:14:59,040
model

347
00:14:59,040 --> 00:15:00,959
therefore this

348
00:15:00,959 --> 00:15:02,800
shows that

349
00:15:02,800 --> 00:15:05,360
m must be at least two in the in

350
00:15:05,360 --> 00:15:08,079
at least two in the wms

351
00:15:08,079 --> 00:15:11,800
in our mod signatures

352
00:15:14,959 --> 00:15:17,839
now i'm going to briefly explain you how

353
00:15:17,839 --> 00:15:21,199
we show the security of the wms and for

354
00:15:21,199 --> 00:15:23,839
that first i need to explain our secret

355
00:15:23,839 --> 00:15:27,360
mode so we consider the security of our

356
00:15:27,360 --> 00:15:29,279
mod signature scheme in the plain public

357
00:15:29,279 --> 00:15:32,880
key models and it works is in as very

358
00:15:32,880 --> 00:15:34,240
similar to

359
00:15:34,240 --> 00:15:36,880
existential unforgeability game

360
00:15:36,880 --> 00:15:39,120
so here challenger generates the secret

361
00:15:39,120 --> 00:15:40,480
and public key

362
00:15:40,480 --> 00:15:42,320
and then sends the parameters and the

363
00:15:42,320 --> 00:15:44,560
public key to the adversary and the

364
00:15:44,560 --> 00:15:48,000
adversary has access to signing oracle

365
00:15:48,000 --> 00:15:51,440
and for that he sends a message and

366
00:15:51,440 --> 00:15:54,560
receives a signature and he can do that

367
00:15:54,560 --> 00:15:58,000
as many as he can

368
00:15:58,000 --> 00:16:02,160
and in the end he outputs a 4g

369
00:16:02,399 --> 00:16:05,440
and we say that adversary means if the

370
00:16:05,440 --> 00:16:07,440
set of public keys

371
00:16:07,440 --> 00:16:08,959
include

372
00:16:08,959 --> 00:16:10,079
the anna's

373
00:16:10,079 --> 00:16:12,560
party's key pk

374
00:16:12,560 --> 00:16:16,079
and message star has never been queried

375
00:16:16,079 --> 00:16:18,240
to the signing oracle

376
00:16:18,240 --> 00:16:21,440
and the verification of the

377
00:16:21,440 --> 00:16:24,639
forgery works

378
00:16:25,440 --> 00:16:27,240
so we show that

379
00:16:27,240 --> 00:16:30,240
rdwms is a secure mass signature scheme

380
00:16:30,240 --> 00:16:31,279
in the

381
00:16:31,279 --> 00:16:33,360
algebraic group model and the random

382
00:16:33,360 --> 00:16:35,680
oracle model assuming that one more

383
00:16:35,680 --> 00:16:38,160
district location problem is hard

384
00:16:38,160 --> 00:16:41,839
and to end my sum problem is hard

385
00:16:41,839 --> 00:16:44,399
so how uh one more discrete logarithm

386
00:16:44,399 --> 00:16:45,839
problem works

387
00:16:45,839 --> 00:16:49,199
um the challenger generates

388
00:16:49,199 --> 00:16:50,560
a group

389
00:16:50,560 --> 00:16:54,880
a group structure and picks a q plus one

390
00:16:54,880 --> 00:16:56,560
elements from

391
00:16:56,560 --> 00:16:58,560
the group and sends them to the

392
00:16:58,560 --> 00:17:00,639
adversary as a challenge

393
00:17:00,639 --> 00:17:03,600
and then the adversary has access to the

394
00:17:03,600 --> 00:17:05,760
district logarithm oracle

395
00:17:05,760 --> 00:17:08,000
for that he sends a group element and

396
00:17:08,000 --> 00:17:09,679
receives the district algorithm of that

397
00:17:09,679 --> 00:17:11,039
component

398
00:17:11,039 --> 00:17:14,720
but he can do that at most few times

399
00:17:14,720 --> 00:17:17,599
and in the end if the adversary sends

400
00:17:17,599 --> 00:17:19,599
the district logarithm of all the

401
00:17:19,599 --> 00:17:23,039
charges than humans and now i'm going to

402
00:17:23,039 --> 00:17:25,760
explain you uh briefly how we prove the

403
00:17:25,760 --> 00:17:28,079
secret of the wms

404
00:17:28,079 --> 00:17:30,000
we assume that there exists therefore

405
00:17:30,000 --> 00:17:31,919
there exists a forger which breaks the

406
00:17:31,919 --> 00:17:35,120
dwms and given that forger we construct

407
00:17:35,120 --> 00:17:37,840
another adversary r which breaks omdl

408
00:17:37,840 --> 00:17:40,159
problem

409
00:17:40,320 --> 00:17:43,120
r receives the imdr challenges from the

410
00:17:43,120 --> 00:17:45,600
game and then

411
00:17:45,600 --> 00:17:48,480
in order to simulate the dwms he needs

412
00:17:48,480 --> 00:17:51,360
to pick he needs to pick a public key

413
00:17:51,360 --> 00:17:54,960
and he picks as a public key the last

414
00:17:54,960 --> 00:17:56,640
oem there challenge

415
00:17:56,640 --> 00:17:58,400
and then he gives the group structure

416
00:17:58,400 --> 00:18:00,720
and public key to the forger

417
00:18:00,720 --> 00:18:03,200
now he needs to he needs to

418
00:18:03,200 --> 00:18:05,039
simulate his

419
00:18:05,039 --> 00:18:08,000
signing oracle as well and for that when

420
00:18:08,000 --> 00:18:10,000
he receives for the first round when he

421
00:18:10,000 --> 00:18:12,640
receives a message to sign

422
00:18:12,640 --> 00:18:15,520
instead of uh picking

423
00:18:15,520 --> 00:18:19,200
witnesses as described in the dwms

424
00:18:19,200 --> 00:18:22,480
um he uses imdr challenges to generate

425
00:18:22,480 --> 00:18:26,720
the pre-commitments and for that he

426
00:18:26,720 --> 00:18:28,640
use random

427
00:18:28,640 --> 00:18:31,760
linear combination of the first queue

428
00:18:31,760 --> 00:18:34,960
on their challenges and obtains the

429
00:18:34,960 --> 00:18:37,120
two pre-commitments

430
00:18:37,120 --> 00:18:39,360
and in the second round when he receives

431
00:18:39,360 --> 00:18:41,760
the message the pre-commitment of the

432
00:18:41,760 --> 00:18:43,120
adversary

433
00:18:43,120 --> 00:18:44,799
and the public key

434
00:18:44,799 --> 00:18:45,760
of the

435
00:18:45,760 --> 00:18:47,200
adversary

436
00:18:47,200 --> 00:18:48,559
he

437
00:18:48,559 --> 00:18:51,600
cannot simulate it because he cannot

438
00:18:51,600 --> 00:18:54,400
obtain the partial signature since he

439
00:18:54,400 --> 00:18:57,360
doesn't know the secret key and also the

440
00:18:57,360 --> 00:18:59,760
discrete logarithm of the

441
00:18:59,760 --> 00:19:03,120
recommitments he gets heart from the

442
00:19:03,120 --> 00:19:05,840
discrete logarithm oracle of the omgs

443
00:19:05,840 --> 00:19:08,960
and for that he computes

444
00:19:08,960 --> 00:19:11,600
the group element s1 where its discrete

445
00:19:11,600 --> 00:19:13,840
logarithm is equal to

446
00:19:13,840 --> 00:19:14,960
uh

447
00:19:14,960 --> 00:19:17,200
partial signature and then he gives a

448
00:19:17,200 --> 00:19:19,120
partial signature to a

449
00:19:19,120 --> 00:19:22,880
in each signing request when he goes to

450
00:19:22,880 --> 00:19:23,679
the

451
00:19:23,679 --> 00:19:26,480
district logarithm oracle he obtains the

452
00:19:26,480 --> 00:19:29,360
linear equation with the unknowns of the

453
00:19:29,360 --> 00:19:33,360
discrete logarithm of ombre challenges

454
00:19:33,360 --> 00:19:36,799
and since he can do that two times

455
00:19:36,799 --> 00:19:39,360
in the end he obtains

456
00:19:39,360 --> 00:19:40,720
q

457
00:19:40,720 --> 00:19:43,520
linear equations with the q plus one

458
00:19:43,520 --> 00:19:44,960
unknowns

459
00:19:44,960 --> 00:19:47,200
and we can show that these linear

460
00:19:47,200 --> 00:19:50,640
equations are linearly independent

461
00:19:50,640 --> 00:19:53,919
now he needs one more uh linear equation

462
00:19:53,919 --> 00:19:55,360
in order to solve the system of

463
00:19:55,360 --> 00:19:56,559
equations

464
00:19:56,559 --> 00:19:59,360
and for that he receives uh after

465
00:19:59,360 --> 00:20:02,559
receiving the for three he generates

466
00:20:02,559 --> 00:20:05,120
another linear occasion

467
00:20:05,120 --> 00:20:06,960
and here uh

468
00:20:06,960 --> 00:20:08,960
is the place where we need the algebraic

469
00:20:08,960 --> 00:20:11,039
group model

470
00:20:11,039 --> 00:20:13,120
in algebra group model whenever the

471
00:20:13,120 --> 00:20:15,679
adversary submits the group element it

472
00:20:15,679 --> 00:20:18,159
also gives the representation of it

473
00:20:18,159 --> 00:20:20,960
and therefore um

474
00:20:20,960 --> 00:20:22,559
uh the

475
00:20:22,559 --> 00:20:25,520
adversary art obtains the representation

476
00:20:25,520 --> 00:20:27,919
of the forgery commitment

477
00:20:27,919 --> 00:20:30,320
and the representation of the public key

478
00:20:30,320 --> 00:20:33,200
of the adversary and we using that he

479
00:20:33,200 --> 00:20:34,960
obtains the last

480
00:20:34,960 --> 00:20:36,480
equation

481
00:20:36,480 --> 00:20:39,760
and last linear occasion is independent

482
00:20:39,760 --> 00:20:42,480
from the first q equations the

483
00:20:42,480 --> 00:20:44,240
allocations because

484
00:20:44,240 --> 00:20:47,039
uh if it is not then it means that the

485
00:20:47,039 --> 00:20:49,679
adversary a breaks the

486
00:20:49,679 --> 00:20:52,640
uh to and why some problem

487
00:20:52,640 --> 00:20:55,200
since it is an hard problem we can

488
00:20:55,200 --> 00:20:57,840
assume that this case never happens and

489
00:20:57,840 --> 00:21:00,960
then the adversary r can solve this

490
00:21:00,960 --> 00:21:02,960
system of equations and obtains the

491
00:21:02,960 --> 00:21:05,760
discrete logarithm of q plus one

492
00:21:05,760 --> 00:21:07,840
challenges

493
00:21:07,840 --> 00:21:09,679
of the rmdl gain

494
00:21:09,679 --> 00:21:12,159
and it outputs that

495
00:21:12,159 --> 00:21:15,919
now i will conclude my presentation uh

496
00:21:15,919 --> 00:21:18,159
by uh giving you

497
00:21:18,159 --> 00:21:19,600
uh

498
00:21:19,600 --> 00:21:22,559
our contribution in this paper so we

499
00:21:22,559 --> 00:21:24,960
constructed the wms

500
00:21:24,960 --> 00:21:27,039
uh which is an efficient two-round

501
00:21:27,039 --> 00:21:29,360
snore-based mass signature scheme

502
00:21:29,360 --> 00:21:31,360
and we introduce a new computational

503
00:21:31,360 --> 00:21:33,440
heart problem that we call m and find

504
00:21:33,440 --> 00:21:34,640
some problem

505
00:21:34,640 --> 00:21:38,000
uh we believe that this m and y sum

506
00:21:38,000 --> 00:21:41,280
problem can be useful against preventing

507
00:21:41,280 --> 00:21:45,039
uh k sum attacks

508
00:21:45,039 --> 00:21:46,799
and we show its hardness in the

509
00:21:46,799 --> 00:21:48,799
algebraic group model

510
00:21:48,799 --> 00:21:50,880
as the future work i think it is very

511
00:21:50,880 --> 00:21:53,919
interesting to see whether uh our knee

512
00:21:53,919 --> 00:21:55,760
problem is hardly

513
00:21:55,760 --> 00:21:58,559
hard in the standard model as well

514
00:21:58,559 --> 00:22:00,880
and also

515
00:22:00,880 --> 00:22:02,880
it will be interesting to see the

516
00:22:02,880 --> 00:22:06,240
security proof of twms in the

517
00:22:06,240 --> 00:22:08,240
standard model

518
00:22:08,240 --> 00:22:11,960
thanks for listening

519
00:22:12,559 --> 00:22:14,639
you

