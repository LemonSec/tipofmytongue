1
00:00:00,240 --> 00:00:03,919
hi everyone i'm waikai and i'm going to

2
00:00:03,919 --> 00:00:05,920
talk about our

3
00:00:05,920 --> 00:00:09,280
improved lower bond for oblivious ram

4
00:00:09,280 --> 00:00:11,840
this is a joint work with ilan komar

5
00:00:11,840 --> 00:00:12,960
goski

6
00:00:12,960 --> 00:00:14,920
from the hebrew

7
00:00:14,920 --> 00:00:18,160
university so the problem of oblivious

8
00:00:18,160 --> 00:00:21,279
ram or oram considers a scenario of

9
00:00:21,279 --> 00:00:24,480
outsourcing storage we have a client it

10
00:00:24,480 --> 00:00:27,599
has only a very small storage so we

11
00:00:27,599 --> 00:00:30,720
outsource a huge data array to a cloud

12
00:00:30,720 --> 00:00:33,680
server the data is accessed piece by

13
00:00:33,680 --> 00:00:36,719
piece in case the server is compromised

14
00:00:36,719 --> 00:00:39,840
or corrupted by an adversary we encrypt

15
00:00:39,840 --> 00:00:42,960
all the data on the server

16
00:00:42,960 --> 00:00:46,160
however encryption is not enough because

17
00:00:46,160 --> 00:00:49,120
the adversary can still see the location

18
00:00:49,120 --> 00:00:51,840
of the access the data if these

19
00:00:51,840 --> 00:00:55,680
locations depend on the data contents

20
00:00:55,680 --> 00:00:58,800
then just looking at these locations the

21
00:00:58,800 --> 00:01:01,600
adversary can infer very sensitive

22
00:01:01,600 --> 00:01:04,879
information about our data

23
00:01:04,879 --> 00:01:07,200
to defend the such an adversary

24
00:01:07,200 --> 00:01:10,240
goldright kendall ostrowski formalized

25
00:01:10,240 --> 00:01:12,960
this problem using the standard random

26
00:01:12,960 --> 00:01:15,680
access machine model of course at their

27
00:01:15,680 --> 00:01:18,000
time the cloud storage was not as

28
00:01:18,000 --> 00:01:20,080
popular as today

29
00:01:20,080 --> 00:01:23,200
so the correctness of orem is exactly

30
00:01:23,200 --> 00:01:24,840
the same as a

31
00:01:24,840 --> 00:01:27,040
standard array

32
00:01:27,040 --> 00:01:28,400
we can

33
00:01:28,400 --> 00:01:32,720
update or query an array entry using the

34
00:01:32,720 --> 00:01:36,400
index of this entry and just like the

35
00:01:36,400 --> 00:01:38,640
standard array

36
00:01:38,640 --> 00:01:42,159
a query has to be answered before the

37
00:01:42,159 --> 00:01:44,960
next operation either update or query

38
00:01:44,960 --> 00:01:49,040
comes in so it's totally the same as the

39
00:01:49,040 --> 00:01:52,000
standard array

40
00:01:52,000 --> 00:01:53,119
now

41
00:01:53,119 --> 00:01:56,560
the array is just an abstraction

42
00:01:56,560 --> 00:02:00,000
the processor or the client has no space

43
00:02:00,000 --> 00:02:02,159
to really store the content of this

44
00:02:02,159 --> 00:02:05,200
array so this array must be stored on

45
00:02:05,200 --> 00:02:08,479
the memory or the server side

46
00:02:08,479 --> 00:02:11,200
historically we say the memory is an

47
00:02:11,200 --> 00:02:15,040
array of memory sales and

48
00:02:15,040 --> 00:02:18,239
read or write a memory sale is called

49
00:02:18,239 --> 00:02:20,959
to probe the memory cell

50
00:02:20,959 --> 00:02:24,400
this terminology also distinguishes the

51
00:02:24,400 --> 00:02:27,680
physical memory array from the abstract

52
00:02:27,680 --> 00:02:30,959
data structure array

53
00:02:31,040 --> 00:02:33,840
so that's the correctness of all run

54
00:02:33,840 --> 00:02:35,599
just an array

55
00:02:35,599 --> 00:02:39,040
for security we consider an adversary

56
00:02:39,040 --> 00:02:42,640
that can see all the memory probes

57
00:02:42,640 --> 00:02:45,599
that is the locations of the memory

58
00:02:45,599 --> 00:02:47,280
sales

59
00:02:47,280 --> 00:02:50,400
for security we hope the

60
00:02:50,400 --> 00:02:54,239
adversary doesn't learn anything from

61
00:02:54,239 --> 00:02:57,120
the problem locations

62
00:02:57,120 --> 00:02:58,400
and

63
00:02:58,400 --> 00:03:00,640
especially we don't want the adversary

64
00:03:00,640 --> 00:03:02,080
to learn

65
00:03:02,080 --> 00:03:04,480
our top secret our

66
00:03:04,480 --> 00:03:06,959
operations performed on the abstract

67
00:03:06,959 --> 00:03:08,959
array

68
00:03:08,959 --> 00:03:10,159
to do so

69
00:03:10,159 --> 00:03:14,319
we require or recall an orem is secure

70
00:03:14,319 --> 00:03:17,680
if for any array operation on the top

71
00:03:17,680 --> 00:03:19,440
the produced

72
00:03:19,440 --> 00:03:21,040
memory probes

73
00:03:21,040 --> 00:03:21,840
are

74
00:03:21,840 --> 00:03:24,560
computationally indistinguishable to the

75
00:03:24,560 --> 00:03:27,840
adversary or even stronger identically

76
00:03:27,840 --> 00:03:29,519
distributed

77
00:03:29,519 --> 00:03:32,159
the identical distribution is a stronger

78
00:03:32,159 --> 00:03:34,080
notion of security but

79
00:03:34,080 --> 00:03:36,080
in this talk we are considering the

80
00:03:36,080 --> 00:03:38,959
lower bank side so stronger security

81
00:03:38,959 --> 00:03:42,640
makes it easier to think about later in

82
00:03:42,640 --> 00:03:45,200
this talk

83
00:03:45,440 --> 00:03:47,280
so that's the security and the

84
00:03:47,280 --> 00:03:48,799
correctness

85
00:03:48,799 --> 00:03:50,720
come back to the

86
00:03:50,720 --> 00:03:52,720
outsourcing

87
00:03:52,720 --> 00:03:54,879
data outsourcing scenario

88
00:03:54,879 --> 00:03:58,080
we have a client we want to run some

89
00:03:58,080 --> 00:04:02,319
program that is written in 64 bits so

90
00:04:02,319 --> 00:04:05,760
our oram wants to simulate an array of

91
00:04:05,760 --> 00:04:09,200
end entries each and she has 64 bits for

92
00:04:09,200 --> 00:04:11,760
the 64-bit program

93
00:04:11,760 --> 00:04:16,238
but the server speaks in network packets

94
00:04:16,238 --> 00:04:19,839
each pack each network package may be a

95
00:04:19,839 --> 00:04:22,880
million beats so we have the memory sale

96
00:04:22,880 --> 00:04:26,000
a million bits in size or alternatively

97
00:04:26,000 --> 00:04:29,199
the adversary can be extrapping a hard

98
00:04:29,199 --> 00:04:31,520
drive where the

99
00:04:31,520 --> 00:04:34,080
block size in this hard drive is one

100
00:04:34,080 --> 00:04:36,000
mega bits

101
00:04:36,000 --> 00:04:39,919
this introduces two extra parameters the

102
00:04:39,919 --> 00:04:42,800
entry size b and the sales size w in

103
00:04:42,800 --> 00:04:45,360
some scenarios the sale size is equal to

104
00:04:45,360 --> 00:04:47,360
the entry size but

105
00:04:47,360 --> 00:04:50,320
in the scenario here the sale size can

106
00:04:50,320 --> 00:04:54,720
be a million times greater than an entry

107
00:04:54,720 --> 00:04:57,600
with the parameters m b and

108
00:04:57,600 --> 00:04:58,800
w

109
00:04:58,800 --> 00:05:01,759
uh we define the efficiency of of o ram

110
00:05:01,759 --> 00:05:05,039
as the following that's the cost per

111
00:05:05,039 --> 00:05:07,680
operation the cost is measured in the

112
00:05:07,680 --> 00:05:09,680
number of memory probes this is the

113
00:05:09,680 --> 00:05:12,240
standard definition for

114
00:05:12,240 --> 00:05:15,039
standard efficiency for data structure

115
00:05:15,039 --> 00:05:16,880
problems we want to know the per

116
00:05:16,880 --> 00:05:19,600
operation cost and the cost is measured

117
00:05:19,600 --> 00:05:22,320
in the number of memory accesses

118
00:05:22,320 --> 00:05:24,639
in the literature of all ram

119
00:05:24,639 --> 00:05:27,120
this efficiency is also called the

120
00:05:27,120 --> 00:05:30,560
overhead but uh in our scenario

121
00:05:30,560 --> 00:05:33,199
we consider the sales size can be

122
00:05:33,199 --> 00:05:35,440
different from the

123
00:05:35,440 --> 00:05:37,360
entry size so

124
00:05:37,360 --> 00:05:39,840
if your io efficiency is more

125
00:05:39,840 --> 00:05:42,800
appropriate and avoids confusion

126
00:05:42,800 --> 00:05:45,759
i also want to stress that

127
00:05:45,759 --> 00:05:48,720
we care less about the number of beads

128
00:05:48,720 --> 00:05:50,000
possessed

129
00:05:50,000 --> 00:05:50,720
but

130
00:05:50,720 --> 00:05:52,400
of course the number of bits can be

131
00:05:52,400 --> 00:05:55,680
translated from number of probes by just

132
00:05:55,680 --> 00:05:59,600
multiplying a vector w

133
00:05:59,600 --> 00:06:01,440
with the model of

134
00:06:01,440 --> 00:06:04,800
orem there's a long list of upper bound

135
00:06:04,800 --> 00:06:06,880
constructions

136
00:06:06,880 --> 00:06:09,680
in one extreme when the sale size equals

137
00:06:09,680 --> 00:06:10,639
to

138
00:06:10,639 --> 00:06:12,000
entry size

139
00:06:12,000 --> 00:06:15,759
we have a recent construction optorama

140
00:06:15,759 --> 00:06:17,440
that'll choose

141
00:06:17,440 --> 00:06:21,520
log n in efficiency that's optimal

142
00:06:21,520 --> 00:06:23,360
on the other extreme

143
00:06:23,360 --> 00:06:25,840
when the cell size is square root we

144
00:06:25,840 --> 00:06:28,639
have the famous square root of ram

145
00:06:28,639 --> 00:06:31,440
proposed by goldrich and oshkovsky

146
00:06:31,440 --> 00:06:33,759
i want to note that when the sale size

147
00:06:33,759 --> 00:06:36,080
increases the same construction can

148
00:06:36,080 --> 00:06:38,960
still achieve the same i o efficiency

149
00:06:38,960 --> 00:06:39,680
so

150
00:06:39,680 --> 00:06:42,000
the i o efficiency can only be

151
00:06:42,000 --> 00:06:45,280
decreasing with respect to the sale size

152
00:06:45,280 --> 00:06:48,080
and the lower bank by larson and nielsen

153
00:06:48,080 --> 00:06:50,560
is consistent with this intuition

154
00:06:50,560 --> 00:06:53,520
the lowbank says that the efficiency

155
00:06:53,520 --> 00:06:56,160
increases with respect to

156
00:06:56,160 --> 00:07:00,240
sale size or inverse of cell size

157
00:07:00,240 --> 00:07:05,039
so the main question in this work and

158
00:07:05,039 --> 00:07:08,479
this in this talk is whether we can

159
00:07:08,479 --> 00:07:10,720
achieve better efficiency when the cell

160
00:07:10,720 --> 00:07:12,080
size w

161
00:07:12,080 --> 00:07:15,039
is greater

162
00:07:15,039 --> 00:07:17,440
on the upper bound side

163
00:07:17,440 --> 00:07:20,960
uh we now have better techniques

164
00:07:20,960 --> 00:07:22,960
from recent works

165
00:07:22,960 --> 00:07:24,000
also

166
00:07:24,000 --> 00:07:27,440
many classic algorithms like sorting can

167
00:07:27,440 --> 00:07:30,080
actually do better when the seal size is

168
00:07:30,080 --> 00:07:31,520
larger

169
00:07:31,520 --> 00:07:33,840
on the lower bound side this lower bound

170
00:07:33,840 --> 00:07:35,440
suggests that

171
00:07:35,440 --> 00:07:37,039
if the

172
00:07:37,039 --> 00:07:40,479
cell size w is a million times greater

173
00:07:40,479 --> 00:07:42,160
we could

174
00:07:42,160 --> 00:07:44,879
probably enhance the performance by a

175
00:07:44,879 --> 00:07:48,560
million times that would be amazing

176
00:07:48,560 --> 00:07:51,120
or speaking asymptotically

177
00:07:51,120 --> 00:07:52,400
if we could

178
00:07:52,400 --> 00:07:56,560
improve or increase the sale size by a

179
00:07:56,560 --> 00:07:58,560
logarithmic factor

180
00:07:58,560 --> 00:08:01,280
this suggests that we could

181
00:08:01,280 --> 00:08:04,560
improve the io efficiency from log n to

182
00:08:04,560 --> 00:08:05,919
a constant

183
00:08:05,919 --> 00:08:09,840
that is also a huge improvement

184
00:08:10,840 --> 00:08:13,199
so uh

185
00:08:13,199 --> 00:08:14,639
there's no

186
00:08:14,639 --> 00:08:16,720
possibility so far but

187
00:08:16,720 --> 00:08:17,759
like

188
00:08:17,759 --> 00:08:21,280
our title suggested we improved the

189
00:08:21,280 --> 00:08:23,120
lower bank side

190
00:08:23,120 --> 00:08:24,080
and

191
00:08:24,080 --> 00:08:26,800
our lower bank says that the efficiency

192
00:08:26,800 --> 00:08:29,039
can only be increased

193
00:08:29,039 --> 00:08:32,399
with respect by a low factor in sale

194
00:08:32,399 --> 00:08:34,080
size

195
00:08:34,080 --> 00:08:35,519
that means

196
00:08:35,519 --> 00:08:38,479
if we increase the sale size by a

197
00:08:38,479 --> 00:08:40,958
logarithmic factor or poly logarithmic

198
00:08:40,958 --> 00:08:42,320
factor

199
00:08:42,320 --> 00:08:46,080
the efficiency will only improve by

200
00:08:46,080 --> 00:08:49,760
roughly a logarithmic vector

201
00:08:49,760 --> 00:08:52,480
or speaking in the

202
00:08:52,480 --> 00:08:54,640
example if we increase

203
00:08:54,640 --> 00:08:57,279
if we have a sale size a million times

204
00:08:57,279 --> 00:09:00,000
greater than an entry then the speed up

205
00:09:00,000 --> 00:09:01,440
can only be

206
00:09:01,440 --> 00:09:06,080
something like 10 to 20 at most

207
00:09:07,200 --> 00:09:10,560
moreover our lower bound matches the

208
00:09:10,560 --> 00:09:13,040
upper bound in the other extreme when

209
00:09:13,040 --> 00:09:15,360
the sale size is

210
00:09:15,360 --> 00:09:18,720
very large like greater than

211
00:09:18,720 --> 00:09:21,920
any unto the epsilon

212
00:09:21,920 --> 00:09:25,519
so our lower bound leaves a very narrow

213
00:09:25,519 --> 00:09:29,200
range in parameters that is still open

214
00:09:29,200 --> 00:09:32,800
in upper and lower bounds

215
00:09:33,680 --> 00:09:36,959
next i will dive into our

216
00:09:36,959 --> 00:09:38,640
lower bound proof

217
00:09:38,640 --> 00:09:42,080
i will first use the correctness of

218
00:09:42,080 --> 00:09:44,480
orange that's an array

219
00:09:44,480 --> 00:09:47,360
to prove a technical lemma

220
00:09:47,360 --> 00:09:51,040
and then i will use the security of orm

221
00:09:51,040 --> 00:09:51,839
to

222
00:09:51,839 --> 00:09:55,120
improve our technical lemma to our for

223
00:09:55,120 --> 00:09:57,760
lower bond

224
00:09:57,760 --> 00:10:00,640
our starting point is the previous work

225
00:10:00,640 --> 00:10:03,040
by larson and nielsen

226
00:10:03,040 --> 00:10:06,800
they proposed a hard sequence consists

227
00:10:06,800 --> 00:10:09,200
of a update phase

228
00:10:09,200 --> 00:10:12,959
that stores a long list of random values

229
00:10:12,959 --> 00:10:16,880
into the abstract data array

230
00:10:16,880 --> 00:10:19,120
the abstract array

231
00:10:19,120 --> 00:10:21,760
and then there is a second phase

232
00:10:21,760 --> 00:10:24,800
the query phase that restores these

233
00:10:24,800 --> 00:10:27,600
random values back from the abstract

234
00:10:27,600 --> 00:10:30,720
array using queries

235
00:10:30,720 --> 00:10:34,720
because this uh random values is a very

236
00:10:34,720 --> 00:10:35,839
long

237
00:10:35,839 --> 00:10:39,600
random string of bits so the oreo has no

238
00:10:39,600 --> 00:10:41,680
way to store

239
00:10:41,680 --> 00:10:43,760
these random bits

240
00:10:43,760 --> 00:10:46,160
in the processor side or the client side

241
00:10:46,160 --> 00:10:49,120
this random long random string has to be

242
00:10:49,120 --> 00:10:52,880
stored on the memory cells

243
00:10:52,880 --> 00:10:56,160
and similarly in the query phase in

244
00:10:56,160 --> 00:10:58,880
order to answer the queries correctly

245
00:10:58,880 --> 00:11:02,079
the oram has to read memory sales

246
00:11:02,079 --> 00:11:05,440
to answer the queries so there is an

247
00:11:05,440 --> 00:11:08,480
imaginary wall between the update phase

248
00:11:08,480 --> 00:11:10,240
and the query phase

249
00:11:10,240 --> 00:11:13,200
any information from the update phase

250
00:11:13,200 --> 00:11:16,800
has to go through the memory cells to

251
00:11:16,800 --> 00:11:18,399
get to the

252
00:11:18,399 --> 00:11:22,160
the other side of the wall the queries

253
00:11:22,160 --> 00:11:25,040
more precisely

254
00:11:25,040 --> 00:11:26,320
every

255
00:11:26,320 --> 00:11:29,839
random bit in this random string had to

256
00:11:29,839 --> 00:11:33,040
be stored in the intersection of the

257
00:11:33,040 --> 00:11:36,000
blue and the brown sets

258
00:11:36,000 --> 00:11:39,360
to see why consider some random bits

259
00:11:39,360 --> 00:11:42,079
that is stored in the blue set or send

260
00:11:42,079 --> 00:11:45,040
information about the random string that

261
00:11:45,040 --> 00:11:47,680
is stored in the blue set button not

262
00:11:47,680 --> 00:11:50,639
stored in the intersection

263
00:11:50,639 --> 00:11:51,680
then

264
00:11:51,680 --> 00:11:53,519
that means

265
00:11:53,519 --> 00:11:55,600
when the query comes in

266
00:11:55,600 --> 00:11:58,639
the change in the random bit cannot be

267
00:11:58,639 --> 00:12:00,320
reflected

268
00:12:00,320 --> 00:12:03,839
in the outcome of these queries

269
00:12:03,839 --> 00:12:08,959
and then the oren cannot be correct

270
00:12:08,959 --> 00:12:12,000
so if this

271
00:12:12,000 --> 00:12:14,639
intersection has to store the whole long

272
00:12:14,639 --> 00:12:17,279
random string then this intersection has

273
00:12:17,279 --> 00:12:19,680
to be large enough the longer random

274
00:12:19,680 --> 00:12:22,480
string consists of n times b bits so

275
00:12:22,480 --> 00:12:25,279
this intersection is at least n times b

276
00:12:25,279 --> 00:12:29,760
divided by cell size w number of cells

277
00:12:29,760 --> 00:12:32,160
divided by the number of queries

278
00:12:32,160 --> 00:12:34,800
then we have a lower bound for

279
00:12:34,800 --> 00:12:40,560
the cost per query that's b over w

280
00:12:40,560 --> 00:12:44,320
however we argue that this b over w is

281
00:12:44,320 --> 00:12:48,160
too good to be true why because

282
00:12:48,160 --> 00:12:52,240
when the cell size w is extremely large

283
00:12:52,240 --> 00:12:54,639
it seemed like we could have a

284
00:12:54,639 --> 00:12:57,920
construction that answers a query

285
00:12:57,920 --> 00:13:00,399
without even reading

286
00:13:00,399 --> 00:13:02,959
one single memory sale

287
00:13:02,959 --> 00:13:05,360
that just doesn't happen in upper bound

288
00:13:05,360 --> 00:13:07,440
constructions

289
00:13:07,440 --> 00:13:09,600
but this can happen for this specific

290
00:13:09,600 --> 00:13:11,120
query because

291
00:13:11,120 --> 00:13:14,240
this query sequence is sequential one

292
00:13:14,240 --> 00:13:16,240
two three four five so there could be a

293
00:13:16,240 --> 00:13:19,519
construction that prepares all the

294
00:13:19,519 --> 00:13:23,760
future hundreds of queries in advance

295
00:13:23,760 --> 00:13:27,200
to address this our key ideas throughout

296
00:13:27,200 --> 00:13:28,480
this work

297
00:13:28,480 --> 00:13:32,560
is to use a even harder sequence of

298
00:13:32,560 --> 00:13:35,200
operations we use the

299
00:13:35,200 --> 00:13:37,680
same sequence same update sequence as

300
00:13:37,680 --> 00:13:38,880
before

301
00:13:38,880 --> 00:13:43,199
but now we query random entries in the

302
00:13:43,199 --> 00:13:46,079
whole array that means for every query

303
00:13:46,079 --> 00:13:48,399
we pick a uniformly random

304
00:13:48,399 --> 00:13:50,880
entry in the whole array and the queries

305
00:13:50,880 --> 00:13:53,440
essentially

306
00:13:53,440 --> 00:13:55,199
like before

307
00:13:55,199 --> 00:13:58,320
there is still a imaginary

308
00:13:58,320 --> 00:14:00,800
wall between the two faces before the

309
00:14:00,800 --> 00:14:04,160
wall in the update phase the oram has to

310
00:14:04,160 --> 00:14:05,519
somehow

311
00:14:05,519 --> 00:14:08,000
write down the long random string in

312
00:14:08,000 --> 00:14:11,519
this blue set of cells and then later

313
00:14:11,519 --> 00:14:14,720
in the query phase the olm has to read

314
00:14:14,720 --> 00:14:17,120
memory cells in order to correctly

315
00:14:17,120 --> 00:14:18,720
answer the queries

316
00:14:18,720 --> 00:14:21,360
and we hope that the intersection

317
00:14:21,360 --> 00:14:24,720
between the blue and the blunt side

318
00:14:24,720 --> 00:14:27,680
is still large enough even we changed

319
00:14:27,680 --> 00:14:31,839
the sequence of operations

320
00:14:32,399 --> 00:14:34,480
to do so

321
00:14:34,480 --> 00:14:37,519
uh let me take a closer look

322
00:14:37,519 --> 00:14:40,560
in the update phase

323
00:14:40,560 --> 00:14:42,639
the orm has to write down this long

324
00:14:42,639 --> 00:14:46,240
random string to prepare for any random

325
00:14:46,240 --> 00:14:49,440
query so the blue set is

326
00:14:49,440 --> 00:14:52,560
roughly large enough to store the whole

327
00:14:52,560 --> 00:14:54,720
random string

328
00:14:54,720 --> 00:14:55,920
and now

329
00:14:55,920 --> 00:14:57,760
in the query phase

330
00:14:57,760 --> 00:14:59,760
i want to prove that

331
00:14:59,760 --> 00:15:02,560
every random query

332
00:15:02,560 --> 00:15:05,839
will make the orange to

333
00:15:05,839 --> 00:15:09,920
read or pull a distinct memory cell in

334
00:15:09,920 --> 00:15:13,519
this blue set

335
00:15:13,519 --> 00:15:15,440
i clamp this

336
00:15:15,440 --> 00:15:18,560
indeed holds with high probability

337
00:15:18,560 --> 00:15:19,760
and

338
00:15:19,760 --> 00:15:23,360
this is actually intuitive

339
00:15:23,360 --> 00:15:25,760
to see why recall that

340
00:15:25,760 --> 00:15:28,160
in the update phase

341
00:15:28,160 --> 00:15:31,279
om has already written down the long

342
00:15:31,279 --> 00:15:34,480
random string in this blue cells in this

343
00:15:34,480 --> 00:15:37,199
blue set the orange may

344
00:15:37,199 --> 00:15:41,279
use any arbitrary maybe crazy encoding

345
00:15:41,279 --> 00:15:44,800
to write down this long random string

346
00:15:44,800 --> 00:15:47,519
for example the owner may use locally

347
00:15:47,519 --> 00:15:51,440
decodable code but anyway this

348
00:15:51,440 --> 00:15:54,399
long random string is fixed written in

349
00:15:54,399 --> 00:15:56,240
this blue set

350
00:15:56,240 --> 00:16:00,399
now a random query comes in

351
00:16:00,399 --> 00:16:03,279
as all ram in order to

352
00:16:03,279 --> 00:16:05,680
answer this query correctly is orange

353
00:16:05,680 --> 00:16:09,600
has to read a corresponding memory sale

354
00:16:09,600 --> 00:16:13,120
not any other cell but the specific

355
00:16:13,120 --> 00:16:15,839
memory cell that can answer the given

356
00:16:15,839 --> 00:16:17,839
query

357
00:16:17,839 --> 00:16:21,440
and we have a sequence of random queries

358
00:16:21,440 --> 00:16:25,199
this enforces orm to perform

359
00:16:25,199 --> 00:16:28,480
reads or probes on random memory sales

360
00:16:28,480 --> 00:16:31,519
in this blue set

361
00:16:31,519 --> 00:16:32,720
that way

362
00:16:32,720 --> 00:16:36,959
every random query will enforce the oren

363
00:16:36,959 --> 00:16:38,000
to

364
00:16:38,000 --> 00:16:41,199
probe or read a memory cell in this blue

365
00:16:41,199 --> 00:16:44,480
set until almost all the cells in the

366
00:16:44,480 --> 00:16:45,759
blue set

367
00:16:45,759 --> 00:16:46,480
are

368
00:16:46,480 --> 00:16:51,480
probed or touched by the orm

369
00:16:52,160 --> 00:16:56,000
and this is exactly why we use a shorter

370
00:16:56,000 --> 00:16:59,440
sequence of queries because we want to

371
00:16:59,440 --> 00:17:02,880
a pull or hit almost

372
00:17:02,880 --> 00:17:06,559
or a lot of cells in the blue set using

373
00:17:06,559 --> 00:17:07,839
a

374
00:17:07,839 --> 00:17:11,438
small number of queries

375
00:17:11,760 --> 00:17:14,480
putting it together

376
00:17:14,480 --> 00:17:16,400
we can prove that

377
00:17:16,400 --> 00:17:19,119
with high probability the intersection

378
00:17:19,119 --> 00:17:20,880
between the two faces

379
00:17:20,880 --> 00:17:24,400
is still roughly the same in

380
00:17:24,400 --> 00:17:26,880
size in the number of cells

381
00:17:26,880 --> 00:17:28,480
but now we

382
00:17:28,480 --> 00:17:31,840
we use a shorter query sequence so now

383
00:17:31,840 --> 00:17:33,919
the query cost

384
00:17:33,919 --> 00:17:34,960
is

385
00:17:34,960 --> 00:17:35,919
almost

386
00:17:35,919 --> 00:17:38,160
one probe or one io with high

387
00:17:38,160 --> 00:17:39,520
probability

388
00:17:39,520 --> 00:17:42,880
this is our main technical lemma it's

389
00:17:42,880 --> 00:17:46,080
very simple it's very intuitive but it

390
00:17:46,080 --> 00:17:49,760
is also very hard to prove because

391
00:17:49,760 --> 00:17:52,400
we don't assume any restriction on the

392
00:17:52,400 --> 00:17:54,799
oram construction

393
00:17:54,799 --> 00:17:57,919
i will briefly show the challenge in the

394
00:17:57,919 --> 00:18:01,360
proof later in almost in the end of this

395
00:18:01,360 --> 00:18:03,678
talk

396
00:18:03,840 --> 00:18:06,720
so now we have our technical lemma we

397
00:18:06,720 --> 00:18:09,440
use only the correctness of o-ram

398
00:18:09,440 --> 00:18:12,960
i will boost or enhance the technical

399
00:18:12,960 --> 00:18:15,039
lemma to a stronger lower bound using

400
00:18:15,039 --> 00:18:16,480
the security

401
00:18:16,480 --> 00:18:18,640
so in the security model we have an

402
00:18:18,640 --> 00:18:20,240
adversary

403
00:18:20,240 --> 00:18:24,160
the adversary sees all the memory probes

404
00:18:24,160 --> 00:18:26,559
it doesn't see the

405
00:18:26,559 --> 00:18:27,760
abstract

406
00:18:27,760 --> 00:18:31,120
operations perform the bank on the array

407
00:18:31,120 --> 00:18:34,000
so the adversary doesn't really know we

408
00:18:34,000 --> 00:18:38,240
are performing a hard sequence or not

409
00:18:38,240 --> 00:18:40,960
however our technical line must say is

410
00:18:40,960 --> 00:18:45,120
that if we perform a hard sequence then

411
00:18:45,120 --> 00:18:47,440
there is a sufficiently large

412
00:18:47,440 --> 00:18:50,160
intersection in the probes

413
00:18:50,160 --> 00:18:52,480
the adversary observes the probes can

414
00:18:52,480 --> 00:18:56,720
calculate this intersection easily

415
00:18:56,720 --> 00:19:00,799
so if we switch the sequence of of

416
00:19:00,799 --> 00:19:02,640
operation to any

417
00:19:02,640 --> 00:19:04,559
second sequence

418
00:19:04,559 --> 00:19:08,720
the second sequence must have the same

419
00:19:08,720 --> 00:19:12,160
set of intersection otherwise the

420
00:19:12,160 --> 00:19:14,400
adversary can distinguish between the

421
00:19:14,400 --> 00:19:16,799
first and the second and that

422
00:19:16,799 --> 00:19:20,559
would violate the security

423
00:19:20,880 --> 00:19:24,720
and we intentionally choose the second

424
00:19:24,720 --> 00:19:27,200
sequence to be another hard sequence

425
00:19:27,200 --> 00:19:29,120
that is

426
00:19:29,120 --> 00:19:30,960
padded with some

427
00:19:30,960 --> 00:19:33,919
more operation and shifted the wall a

428
00:19:33,919 --> 00:19:36,480
little bit

429
00:19:36,480 --> 00:19:39,200
this way the second sequence

430
00:19:39,200 --> 00:19:43,200
will also imply another sufficiently

431
00:19:43,200 --> 00:19:46,160
large intersection biotechnical lemma

432
00:19:46,160 --> 00:19:49,280
and this second intersection is defined

433
00:19:49,280 --> 00:19:51,919
with respect to a different range of

434
00:19:51,919 --> 00:19:54,080
operations so

435
00:19:54,080 --> 00:19:56,640
these two intersections both add to the

436
00:19:56,640 --> 00:19:58,640
total cost of all ram

437
00:19:58,640 --> 00:20:02,240
and we can switch to a third

438
00:20:02,240 --> 00:20:04,880
sequence of operation and so on to add

439
00:20:04,880 --> 00:20:08,240
more cost to the orm this slightly

440
00:20:08,240 --> 00:20:10,960
improves the lower bound and we are not

441
00:20:10,960 --> 00:20:12,799
stopping here

442
00:20:12,799 --> 00:20:15,679
we can in addition to move the wall we

443
00:20:15,679 --> 00:20:17,360
can

444
00:20:17,360 --> 00:20:21,280
scale down the hard sequence that's a

445
00:20:21,280 --> 00:20:23,760
shorter sequence of updates and even

446
00:20:23,760 --> 00:20:27,760
shorter number of queries

447
00:20:28,000 --> 00:20:30,480
this shorter hard sequence will give

448
00:20:30,480 --> 00:20:33,679
another intersection at some more cost

449
00:20:33,679 --> 00:20:37,440
and we can still move the wall and so on

450
00:20:37,440 --> 00:20:40,559
to add some more cost to the overall and

451
00:20:40,559 --> 00:20:42,799
we can keep doing so

452
00:20:42,799 --> 00:20:44,320
we can even

453
00:20:44,320 --> 00:20:47,679
further scale down the

454
00:20:47,679 --> 00:20:51,600
hard sequence recursively that will make

455
00:20:51,600 --> 00:20:55,200
a complete tree the three degree

456
00:20:55,200 --> 00:20:59,280
is proportional to cell size w

457
00:20:59,280 --> 00:21:01,360
and the average node

458
00:21:01,360 --> 00:21:05,039
will have a corresponding a

459
00:21:05,039 --> 00:21:07,039
it will have a corresponding hard

460
00:21:07,039 --> 00:21:08,080
sequence

461
00:21:08,080 --> 00:21:11,280
with a corresponding

462
00:21:11,280 --> 00:21:13,919
large sufficiently large intersection

463
00:21:13,919 --> 00:21:14,720
and

464
00:21:14,720 --> 00:21:15,520
so

465
00:21:15,520 --> 00:21:20,400
that will add an extra cost to the orem

466
00:21:20,400 --> 00:21:23,760
the remaining is just calculation

467
00:21:23,760 --> 00:21:26,320
we have a lower bound for

468
00:21:26,320 --> 00:21:29,440
inquiry or update operations

469
00:21:29,440 --> 00:21:32,480
and the the lower one is proportional to

470
00:21:32,480 --> 00:21:34,400
the tree height

471
00:21:34,400 --> 00:21:38,960
that is log n base w over b and this is

472
00:21:38,960 --> 00:21:42,000
exactly the lower bound i clamped

473
00:21:42,000 --> 00:21:45,200
earlier in our main result

474
00:21:45,200 --> 00:21:47,679
so at a higher level

475
00:21:47,679 --> 00:21:48,640
our

476
00:21:48,640 --> 00:21:51,520
proof consists of three steps the first

477
00:21:51,520 --> 00:21:54,799
step we use random queries the second

478
00:21:54,799 --> 00:21:57,760
step we prove our technical lemma and in

479
00:21:57,760 --> 00:22:00,240
the third step we

480
00:22:00,240 --> 00:22:04,159
enhance the technical lemma to our

481
00:22:04,159 --> 00:22:07,280
main result the lower bound

482
00:22:07,280 --> 00:22:09,600
i want to stress that our

483
00:22:09,600 --> 00:22:13,200
lower bound is very strong it is in it

484
00:22:13,200 --> 00:22:15,919
is unconditional in terms of no

485
00:22:15,919 --> 00:22:20,000
restriction on the oram construction and

486
00:22:20,000 --> 00:22:22,159
it is computational

487
00:22:22,159 --> 00:22:25,200
and the orm can use any arbitrary

488
00:22:25,200 --> 00:22:28,080
computational assumption because our

489
00:22:28,080 --> 00:22:30,960
adversary is extremely efficient is just

490
00:22:30,960 --> 00:22:35,919
need to calculate the intersections

491
00:22:36,000 --> 00:22:39,840
i promised earlier that i will show our

492
00:22:39,840 --> 00:22:42,400
main challenge in the technical lemma we

493
00:22:42,400 --> 00:22:43,919
prove it by

494
00:22:43,919 --> 00:22:46,559
a contradiction suppose the laymar

495
00:22:46,559 --> 00:22:50,080
doesn't hold then we have a too good to

496
00:22:50,080 --> 00:22:53,280
be true super efficient already

497
00:22:53,280 --> 00:22:57,440
then that means we can construct

498
00:22:57,440 --> 00:22:59,840
with our strategies to use this orange

499
00:22:59,840 --> 00:23:02,559
to construct an impossible

500
00:23:02,559 --> 00:23:05,120
and impossible compression that can

501
00:23:05,120 --> 00:23:08,480
compress down a random string if we can

502
00:23:08,480 --> 00:23:11,520
do so then that is already a

503
00:23:11,520 --> 00:23:13,919
contradiction because random string

504
00:23:13,919 --> 00:23:15,919
cannot be compressed

505
00:23:15,919 --> 00:23:18,559
the compression is based on the result

506
00:23:18,559 --> 00:23:21,039
of patrasco and the domain

507
00:23:21,039 --> 00:23:23,200
and the main challenge is in the

508
00:23:23,200 --> 00:23:26,640
analysis of this compression or more

509
00:23:26,640 --> 00:23:28,159
specifically

510
00:23:28,159 --> 00:23:32,320
the main challenge is to find a specific

511
00:23:32,320 --> 00:23:35,280
involved conditional probability

512
00:23:35,280 --> 00:23:38,480
we spend a lot of effort to reduce and

513
00:23:38,480 --> 00:23:41,360
simplify this conditional probability

514
00:23:41,360 --> 00:23:42,400
and

515
00:23:42,400 --> 00:23:45,840
the simplified simplified version is the

516
00:23:45,840 --> 00:23:47,840
following it is very

517
00:23:47,840 --> 00:23:51,360
simple and clean i'm not going to

518
00:23:51,360 --> 00:23:55,039
elaborate on this probability problem

519
00:23:55,039 --> 00:23:57,440
but i believe it

520
00:23:57,440 --> 00:24:00,559
is an interesting practice problem in

521
00:24:00,559 --> 00:24:04,559
for example probability course i hope

522
00:24:04,559 --> 00:24:06,880
this inequality in

523
00:24:06,880 --> 00:24:09,840
conditional probability will be useful

524
00:24:09,840 --> 00:24:12,080
in your future research

525
00:24:12,080 --> 00:24:14,880
hopefully useful for my own future

526
00:24:14,880 --> 00:24:16,640
research

527
00:24:16,640 --> 00:24:18,480
i'm wrapping up here

528
00:24:18,480 --> 00:24:21,840
we improved our lower bound and

529
00:24:21,840 --> 00:24:24,799
our technique extends to other settings

530
00:24:24,799 --> 00:24:28,000
for example multi server or ram there

531
00:24:28,000 --> 00:24:31,600
are still open problems for example

532
00:24:31,600 --> 00:24:34,159
the lower bound or upper bound for

533
00:24:34,159 --> 00:24:37,200
whichever or stronger notions of overran

534
00:24:37,200 --> 00:24:40,320
i also want to advertise for our

535
00:24:40,320 --> 00:24:43,440
new related results for example we

536
00:24:43,440 --> 00:24:48,000
constructed an optimal ram that runs in

537
00:24:48,000 --> 00:24:49,760
worst case time

538
00:24:49,760 --> 00:24:52,559
it is also published in the crypto

539
00:24:52,559 --> 00:24:54,799
conference this year

540
00:24:54,799 --> 00:24:57,039
thank you for your attention if you find

541
00:24:57,039 --> 00:25:00,159
this result interesting please read our

542
00:25:00,159 --> 00:25:03,279
fruit paper or send us an email

543
00:25:03,279 --> 00:25:06,279
bye

