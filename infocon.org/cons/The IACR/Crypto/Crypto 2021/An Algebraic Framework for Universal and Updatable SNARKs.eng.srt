1
00:00:04,960 --> 00:00:08,160
hi all my name is alenza fapico and

2
00:00:08,160 --> 00:00:10,480
today i'm going to present a joint work

3
00:00:10,480 --> 00:00:12,960
with color raffles that is called an

4
00:00:12,960 --> 00:00:14,799
algebraic framework for updatable

5
00:00:14,799 --> 00:00:16,720
universal snacks

6
00:00:16,720 --> 00:00:19,119
so since the introduction of interactive

7
00:00:19,119 --> 00:00:20,760
proof systems in

8
00:00:20,760 --> 00:00:24,240
1989 a huge line of research has drove

9
00:00:24,240 --> 00:00:26,720
us to what is nowadays most efficient

10
00:00:26,720 --> 00:00:29,840
construction of a snark due to rot in

11
00:00:29,840 --> 00:00:31,760
2016

12
00:00:31,760 --> 00:00:33,600
and

13
00:00:33,600 --> 00:00:35,840
when i talk about efficiency i mean we

14
00:00:35,840 --> 00:00:37,600
have proof system where approver wants

15
00:00:37,600 --> 00:00:39,680
to convince verified that some relation

16
00:00:39,680 --> 00:00:41,440
holds

17
00:00:41,440 --> 00:00:44,079
and we are going to consider in in this

18
00:00:44,079 --> 00:00:46,480
case the work the brewer has to do in

19
00:00:46,480 --> 00:00:47,440
order

20
00:00:47,440 --> 00:00:49,680
to convince the verifier the amount of

21
00:00:49,680 --> 00:00:51,600
information they have to send back and

22
00:00:51,600 --> 00:00:54,000
forward and the work of the verifier as

23
00:00:54,000 --> 00:00:55,360
well

24
00:00:55,360 --> 00:00:57,120
in this almost optimal construction

25
00:00:57,120 --> 00:00:59,440
there is a drawback that is that in

26
00:00:59,440 --> 00:01:02,719
order to achieve such sanctions

27
00:01:02,719 --> 00:01:03,440
the

28
00:01:03,440 --> 00:01:05,360
program the verifier both need to share

29
00:01:05,360 --> 00:01:06,960
some information

30
00:01:06,960 --> 00:01:08,799
that contains some description of the

31
00:01:08,799 --> 00:01:11,280
relation and this information also has a

32
00:01:11,280 --> 00:01:13,439
secret so whenever we talk about the

33
00:01:13,439 --> 00:01:16,560
secret we talk about a trusted party

34
00:01:16,560 --> 00:01:18,720
thinking on the applications that snarks

35
00:01:18,720 --> 00:01:21,920
have nowadays this condition is highly

36
00:01:21,920 --> 00:01:24,479
undesirable so the community has been

37
00:01:24,479 --> 00:01:26,400
working on solutions

38
00:01:26,400 --> 00:01:28,640
as multi-party computation which could

39
00:01:28,640 --> 00:01:31,119
be the most natural one

40
00:01:31,119 --> 00:01:35,040
but this still has its own drawbacks

41
00:01:35,040 --> 00:01:37,840
so in a multi-party computation model

42
00:01:37,840 --> 00:01:40,560
many parties collaborate in order to

43
00:01:40,560 --> 00:01:43,680
create a secret that none of them

44
00:01:43,680 --> 00:01:45,040
knows completely

45
00:01:45,040 --> 00:01:47,280
so they send messages back and forward

46
00:01:47,280 --> 00:01:49,520
and at the end of this interaction

47
00:01:49,520 --> 00:01:50,720
they have

48
00:01:50,720 --> 00:01:53,439
one srs that stands for structural

49
00:01:53,439 --> 00:01:55,680
reference ring and it's this information

50
00:01:55,680 --> 00:01:58,320
i mentioned before that both pro and

51
00:01:58,320 --> 00:02:01,119
very high and very fire have access to

52
00:02:01,119 --> 00:02:03,600
but this srs is specific for one

53
00:02:03,600 --> 00:02:05,680
relation so this

54
00:02:05,680 --> 00:02:08,000
quite expensive computation has to be

55
00:02:08,000 --> 00:02:09,038
performed

56
00:02:09,038 --> 00:02:09,919
for

57
00:02:09,919 --> 00:02:12,800
for every time we we need to use it for

58
00:02:12,800 --> 00:02:14,800
for a particular relation

59
00:02:14,800 --> 00:02:17,840
in 2018 rothetol introduced an

60
00:02:17,840 --> 00:02:19,920
alternative to this model that is the

61
00:02:19,920 --> 00:02:21,680
updatable model

62
00:02:21,680 --> 00:02:24,400
similar to multi-project computation

63
00:02:24,400 --> 00:02:26,959
there are many parties that collaborate

64
00:02:26,959 --> 00:02:28,720
in order to create

65
00:02:28,720 --> 00:02:31,519
this srs but in this case they don't do

66
00:02:31,519 --> 00:02:33,760
it interactively but they act one after

67
00:02:33,760 --> 00:02:35,360
the other

68
00:02:35,360 --> 00:02:38,879
and compute its part of

69
00:02:38,879 --> 00:02:41,920
the srs in a verifiable manner

70
00:02:41,920 --> 00:02:44,080
the output of this

71
00:02:44,080 --> 00:02:46,400
of this computation

72
00:02:46,400 --> 00:02:48,840
is an srs that we are going to call

73
00:02:48,840 --> 00:02:51,280
universal why because

74
00:02:51,280 --> 00:02:54,080
it will work for any relation up to some

75
00:02:54,080 --> 00:02:55,120
size

76
00:02:55,120 --> 00:02:58,239
and then from that universal srs we can

77
00:02:58,239 --> 00:03:00,720
derivate in an untrusted

78
00:03:00,720 --> 00:03:02,159
step

79
00:03:02,159 --> 00:03:05,440
other relation dependent srs right so we

80
00:03:05,440 --> 00:03:07,760
start from these

81
00:03:07,760 --> 00:03:10,720
this universal srs this um that contains

82
00:03:10,720 --> 00:03:12,959
the secrets and then

83
00:03:12,959 --> 00:03:15,519
construct descriptions of relations from

84
00:03:15,519 --> 00:03:18,000
that

85
00:03:18,000 --> 00:03:21,280
since the the appearance of this seminal

86
00:03:21,280 --> 00:03:22,159
work

87
00:03:22,159 --> 00:03:24,879
uh many constructions of snarks that use

88
00:03:24,879 --> 00:03:27,440
updates with universal srs

89
00:03:27,440 --> 00:03:29,519
have have been done

90
00:03:29,519 --> 00:03:32,480
and the nice thing is that all of them

91
00:03:32,480 --> 00:03:34,400
share some common principles which

92
00:03:34,400 --> 00:03:36,720
consist in breaking the construction of

93
00:03:36,720 --> 00:03:38,879
the snorkeling two-step

94
00:03:38,879 --> 00:03:41,519
first we work in the in an information

95
00:03:41,519 --> 00:03:44,159
theoretical object through its security

96
00:03:44,159 --> 00:03:45,920
and then by using

97
00:03:45,920 --> 00:03:48,080
cryptographic assumptions finally

98
00:03:48,080 --> 00:03:50,400
compile it into a snap

99
00:03:50,400 --> 00:03:53,200
this information theoretical object is a

100
00:03:53,200 --> 00:03:55,599
what we call an holographic proof and

101
00:03:55,599 --> 00:03:57,920
i'm going to talk about that in a second

102
00:03:57,920 --> 00:04:00,879
and the cryptographic compiler is done

103
00:04:00,879 --> 00:04:03,680
using a polynomial complement

104
00:04:03,680 --> 00:04:06,400
all the cons the the constructions that

105
00:04:06,400 --> 00:04:07,120
we

106
00:04:07,120 --> 00:04:09,519
we are aware of in

107
00:04:09,519 --> 00:04:11,439
in the updated universal model follow

108
00:04:11,439 --> 00:04:14,319
this blueprint i hope um we are not

109
00:04:14,319 --> 00:04:16,000
forgetting anymore

110
00:04:16,000 --> 00:04:18,320
so what is an holographic proof and here

111
00:04:18,320 --> 00:04:20,160
i'm going to use the notion

112
00:04:20,160 --> 00:04:22,479
introducing luna but with different

113
00:04:22,479 --> 00:04:23,759
flavors

114
00:04:23,759 --> 00:04:27,120
flavors and this come

115
00:04:27,120 --> 00:04:28,880
they are calling different ways in

116
00:04:28,880 --> 00:04:30,080
previous work

117
00:04:30,080 --> 00:04:32,720
so we have as always the prover that is

118
00:04:32,720 --> 00:04:34,160
going to be played

119
00:04:34,160 --> 00:04:37,600
by the pirate today and a verifier

120
00:04:37,600 --> 00:04:39,040
the vulture

121
00:04:39,040 --> 00:04:41,759
but also we have a third a

122
00:04:41,759 --> 00:04:44,400
a third entity which is the indexer

123
00:04:44,400 --> 00:04:46,960
played by the unm and the indexer is

124
00:04:46,960 --> 00:04:48,400
going to output polynomials that

125
00:04:48,400 --> 00:04:50,639
describe the relation then proven

126
00:04:50,639 --> 00:04:52,639
verifier will interact programmer

127
00:04:52,639 --> 00:04:54,320
messages will include polynomials as

128
00:04:54,320 --> 00:04:55,120
well

129
00:04:55,120 --> 00:04:57,919
and the verifier rather than having to

130
00:04:57,919 --> 00:05:00,560
read these polynomials will have access

131
00:05:00,560 --> 00:05:03,360
a oracle access to it so it can query

132
00:05:03,360 --> 00:05:05,280
them at a

133
00:05:05,280 --> 00:05:07,600
arbitrary point of their choice

134
00:05:07,600 --> 00:05:12,000
and perform their rejects among others

135
00:05:12,000 --> 00:05:13,440
so

136
00:05:13,440 --> 00:05:15,199
we want to construct a polynomial

137
00:05:15,199 --> 00:05:17,919
holographic proof for proving general

138
00:05:17,919 --> 00:05:19,759
relations

139
00:05:19,759 --> 00:05:21,919
what is the motivation of these of this

140
00:05:21,919 --> 00:05:24,560
work this work is

141
00:05:24,560 --> 00:05:27,680
it's meant to break this information

142
00:05:27,680 --> 00:05:30,400
theoretical object a bit more

143
00:05:30,400 --> 00:05:33,280
why first of all to extract the main

144
00:05:33,280 --> 00:05:34,479
ideas

145
00:05:34,479 --> 00:05:36,000
of all these

146
00:05:36,000 --> 00:05:37,039
very

147
00:05:37,039 --> 00:05:38,800
interesting constructions

148
00:05:38,800 --> 00:05:40,400
for two things first of all we want to

149
00:05:40,400 --> 00:05:42,080
compare we want to see what is that they

150
00:05:42,080 --> 00:05:44,800
have in common what is that they

151
00:05:44,800 --> 00:05:46,320
their differences what are their

152
00:05:46,320 --> 00:05:48,400
differences because

153
00:05:48,400 --> 00:05:50,560
what they have in common can be a bit

154
00:05:50,560 --> 00:05:53,199
more standard their difference may work

155
00:05:53,199 --> 00:05:54,880
different

156
00:05:54,880 --> 00:05:56,720
in a different manner for

157
00:05:56,720 --> 00:05:59,039
for a specific relation so maybe we can

158
00:05:59,039 --> 00:06:01,520
why not combine them and of course at

159
00:06:01,520 --> 00:06:04,639
the end the final goal is to to improve

160
00:06:04,639 --> 00:06:07,280
right to to get a more sufficient and

161
00:06:07,280 --> 00:06:10,400
more efficient constructions

162
00:06:10,400 --> 00:06:11,840
so for that let's start from the

163
00:06:11,840 --> 00:06:12,880
beginning

164
00:06:12,880 --> 00:06:14,800
and we want to prove general

165
00:06:14,800 --> 00:06:17,120
computations that we can model as empty

166
00:06:17,120 --> 00:06:19,759
problems and in this talk i'm going to

167
00:06:19,759 --> 00:06:22,080
consider secret satisfiability why

168
00:06:22,080 --> 00:06:24,479
because it has a very like

169
00:06:24,479 --> 00:06:25,520
uh

170
00:06:25,520 --> 00:06:28,000
a very nice representation

171
00:06:28,000 --> 00:06:30,080
an arithmetic circuit

172
00:06:30,080 --> 00:06:32,240
have three types of gates we have

173
00:06:32,240 --> 00:06:34,960
multiplicative gates additive gates and

174
00:06:34,960 --> 00:06:37,280
gates where the inputs gets multiplied

175
00:06:37,280 --> 00:06:41,440
by constants and for the first one

176
00:06:41,440 --> 00:06:43,840
we capture them in a set of quadratic

177
00:06:43,840 --> 00:06:44,960
constraints

178
00:06:44,960 --> 00:06:47,280
so if we can label all multiplicative

179
00:06:47,280 --> 00:06:49,440
gaits from 1 to m

180
00:06:49,440 --> 00:06:51,520
what we are going to require is that the

181
00:06:51,520 --> 00:06:52,880
left input

182
00:06:52,880 --> 00:06:53,840
of

183
00:06:53,840 --> 00:06:56,720
gate i times the right input equals the

184
00:06:56,720 --> 00:06:58,479
output of the gate

185
00:06:58,479 --> 00:07:01,599
so we label with a the left inputs will

186
00:07:01,599 --> 00:07:02,319
be

187
00:07:02,319 --> 00:07:05,280
the right inputs and we see the outputs

188
00:07:05,280 --> 00:07:06,160
then

189
00:07:06,160 --> 00:07:09,199
to capture uh both additive and

190
00:07:09,199 --> 00:07:11,039
multiplicative by

191
00:07:11,039 --> 00:07:13,440
by a constant gate

192
00:07:13,440 --> 00:07:15,759
we use linear constraints

193
00:07:15,759 --> 00:07:16,960
so

194
00:07:16,960 --> 00:07:18,639
every input

195
00:07:18,639 --> 00:07:20,800
will depend

196
00:07:20,800 --> 00:07:22,800
on previous outputs

197
00:07:22,800 --> 00:07:26,240
and some coefficients that describe the

198
00:07:26,240 --> 00:07:28,319
the circuit itself

199
00:07:28,319 --> 00:07:30,639
so if you remember what to say about the

200
00:07:30,639 --> 00:07:32,880
srs the intuition is that

201
00:07:32,880 --> 00:07:36,560
quadratic constraints are the same

202
00:07:36,560 --> 00:07:39,520
for every circuit of size and every

203
00:07:39,520 --> 00:07:41,919
circuit that has a multiplicative skate

204
00:07:41,919 --> 00:07:43,199
we have the same set of quality

205
00:07:43,199 --> 00:07:45,599
constraints but linear constraints

206
00:07:45,599 --> 00:07:47,360
include some

207
00:07:47,360 --> 00:07:50,160
constants that describe the circuit

208
00:07:50,160 --> 00:07:51,759
so this is

209
00:07:51,759 --> 00:07:55,039
why we need to derive the universal srs

210
00:07:55,039 --> 00:07:57,280
into a specific one

211
00:07:57,280 --> 00:07:58,700
to generate um

212
00:07:58,700 --> 00:07:59,919
[Music]

213
00:07:59,919 --> 00:08:01,199
a science in the description of the

214
00:08:01,199 --> 00:08:02,240
circuit

215
00:08:02,240 --> 00:08:04,240
because these concerns

216
00:08:04,240 --> 00:08:07,199
are not something general

217
00:08:07,199 --> 00:08:09,440
so algebraically the program wants to

218
00:08:09,440 --> 00:08:11,280
convince the verifier that there is an

219
00:08:11,280 --> 00:08:13,440
assignment that satisfies

220
00:08:13,440 --> 00:08:16,160
a specific circuit so what the prover

221
00:08:16,160 --> 00:08:19,680
wants to show is that for some vectors a

222
00:08:19,680 --> 00:08:21,039
b c

223
00:08:21,039 --> 00:08:22,800
of size m

224
00:08:22,800 --> 00:08:25,039
and given matrices f and g that

225
00:08:25,039 --> 00:08:26,879
describes the circuit

226
00:08:26,879 --> 00:08:28,639
two things happen the first one is that

227
00:08:28,639 --> 00:08:30,639
they have a product between a and b

228
00:08:30,639 --> 00:08:33,679
equals c so this entrywise

229
00:08:33,679 --> 00:08:34,719
probe

230
00:08:34,719 --> 00:08:37,599
includes all the quadratic constraints

231
00:08:37,599 --> 00:08:39,200
and then

232
00:08:39,200 --> 00:08:41,760
that summary some linear relation holds

233
00:08:41,760 --> 00:08:45,600
between matrix f and g and the vector of

234
00:08:45,600 --> 00:08:47,920
of the witness

235
00:08:47,920 --> 00:08:50,320
basically what the prover wants to prove

236
00:08:50,320 --> 00:08:52,959
is that a b and c are in the orthogonal

237
00:08:52,959 --> 00:08:55,680
space to this matrix w

238
00:08:55,680 --> 00:08:58,720
generated by the rows of this matrix w

239
00:08:58,720 --> 00:09:01,519
why because if if you see

240
00:09:01,519 --> 00:09:03,600
what this matrix this

241
00:09:03,600 --> 00:09:05,920
equation is say in this

242
00:09:05,920 --> 00:09:09,440
matrix vector probe is that element i of

243
00:09:09,440 --> 00:09:10,959
vector a

244
00:09:10,959 --> 00:09:13,120
equals a linear combination between

245
00:09:13,120 --> 00:09:14,320
vector c

246
00:09:14,320 --> 00:09:17,279
and the constants of rho i

247
00:09:17,279 --> 00:09:18,880
of matrix f

248
00:09:18,880 --> 00:09:20,399
and

249
00:09:20,399 --> 00:09:22,880
similar for b and g

250
00:09:22,880 --> 00:09:24,000
so let's see

251
00:09:24,000 --> 00:09:27,200
this uh a bit more in detail

252
00:09:27,200 --> 00:09:29,200
how can we prove that

253
00:09:29,200 --> 00:09:30,959
the vector abc

254
00:09:30,959 --> 00:09:34,959
is um in the subspace well we could take

255
00:09:34,959 --> 00:09:37,519
every row of w and perform an inner

256
00:09:37,519 --> 00:09:39,440
product with a vector of the witness and

257
00:09:39,440 --> 00:09:42,160
check that all of them are zero

258
00:09:42,160 --> 00:09:44,800
but this will require to prove 2m

259
00:09:44,800 --> 00:09:46,160
relations

260
00:09:46,160 --> 00:09:50,480
and we are pursuing sanctions so this is

261
00:09:50,480 --> 00:09:51,760
far from

262
00:09:51,760 --> 00:09:53,279
from optimal

263
00:09:53,279 --> 00:09:54,240
but

264
00:09:54,240 --> 00:09:56,640
thinking in an ad the right matter what

265
00:09:56,640 --> 00:09:59,279
we can do instead of checking one vector

266
00:09:59,279 --> 00:10:02,800
against every generator of a subspace we

267
00:10:02,800 --> 00:10:05,760
can sample one random

268
00:10:05,760 --> 00:10:09,600
element in that space by using a

269
00:10:09,600 --> 00:10:11,200
random

270
00:10:11,200 --> 00:10:12,800
coefficients

271
00:10:12,800 --> 00:10:15,839
and then just check one in a product

272
00:10:15,839 --> 00:10:16,560
so

273
00:10:16,560 --> 00:10:18,480
our prover wants to promise our verifier

274
00:10:18,480 --> 00:10:20,480
that the secret is satisfied

275
00:10:20,480 --> 00:10:23,760
he has to prove the hadamard probe

276
00:10:23,760 --> 00:10:26,640
he has to prove also the inner probe

277
00:10:26,640 --> 00:10:28,480
equals zero

278
00:10:28,480 --> 00:10:33,360
uh between abc and some random

279
00:10:33,360 --> 00:10:35,600
so that's in the world of vectors and

280
00:10:35,600 --> 00:10:38,079
matrices which is nice and intuitions

281
00:10:38,079 --> 00:10:39,920
came very fast but then we have to move

282
00:10:39,920 --> 00:10:43,279
to the word of polynomials so for that

283
00:10:43,279 --> 00:10:46,720
we are going to define a set h

284
00:10:46,720 --> 00:10:49,360
of size m where m is a

285
00:10:49,360 --> 00:10:52,720
is the number of multiplicative gates

286
00:10:52,720 --> 00:10:56,000
inside our field and then define the

287
00:10:56,000 --> 00:10:58,160
lagrange polynomials

288
00:10:58,160 --> 00:10:59,519
so lambda

289
00:10:59,519 --> 00:11:02,720
is a polynomial of degree m minus 1 that

290
00:11:02,720 --> 00:11:06,640
vanishes at every point in h but h i

291
00:11:06,640 --> 00:11:08,480
where it takes value 1

292
00:11:08,480 --> 00:11:11,440
and t x is a polynomial that vanishes at

293
00:11:11,440 --> 00:11:13,519
every point in h

294
00:11:13,519 --> 00:11:16,560
and there where it says rjh it's

295
00:11:16,560 --> 00:11:19,279
supposed to say hj

296
00:11:19,279 --> 00:11:21,440
and now we have a natural encoding we

297
00:11:21,440 --> 00:11:24,320
take a vector of size m

298
00:11:24,320 --> 00:11:26,160
and then we write

299
00:11:26,160 --> 00:11:28,880
the linear combination between these

300
00:11:28,880 --> 00:11:29,760
these

301
00:11:29,760 --> 00:11:31,519
the elements of this vector

302
00:11:31,519 --> 00:11:32,480
and

303
00:11:32,480 --> 00:11:35,040
the lagrange polynomials

304
00:11:35,040 --> 00:11:36,160
the

305
00:11:36,160 --> 00:11:38,880
the output is a polynomial y

306
00:11:38,880 --> 00:11:40,880
that when we evaluate it in

307
00:11:40,880 --> 00:11:46,160
h i give us the i element of oi

308
00:11:46,160 --> 00:11:47,200
so

309
00:11:47,200 --> 00:11:51,120
um so for so good we have the intuition

310
00:11:51,120 --> 00:11:53,440
of how to proceed with satisfiability in

311
00:11:53,440 --> 00:11:55,920
the algebraic world we have the tool to

312
00:11:55,920 --> 00:11:58,639
move to polynomials and now let's wrap

313
00:11:58,639 --> 00:12:00,160
up a bit

314
00:12:00,160 --> 00:12:01,360
what we need

315
00:12:01,360 --> 00:12:02,720
so

316
00:12:02,720 --> 00:12:04,639
we need um

317
00:12:04,639 --> 00:12:07,120
to sample very proven verifier need to

318
00:12:07,120 --> 00:12:08,000
sample

319
00:12:08,000 --> 00:12:10,480
this vector d and then compute the it's

320
00:12:10,480 --> 00:12:14,079
encoding as uh as polynomial

321
00:12:14,079 --> 00:12:16,399
and then from the encodings

322
00:12:16,399 --> 00:12:18,399
of the vectors

323
00:12:18,399 --> 00:12:21,760
of the witness and the encodings of of

324
00:12:21,760 --> 00:12:24,399
the vectors and the

325
00:12:24,399 --> 00:12:26,560
generate d

326
00:12:26,560 --> 00:12:28,480
two things have to be proven first of

327
00:12:28,480 --> 00:12:30,880
all that the hammer plugs between a and

328
00:12:30,880 --> 00:12:32,160
b equals c

329
00:12:32,160 --> 00:12:34,720
and there is a pretty standard way to do

330
00:12:34,720 --> 00:12:37,279
it when we work with orange polynomials

331
00:12:37,279 --> 00:12:39,519
we can write it as a divisibility

332
00:12:39,519 --> 00:12:41,920
problem so for example here the plural

333
00:12:41,920 --> 00:12:42,959
will send

334
00:12:42,959 --> 00:12:46,000
polynomials abc and h

335
00:12:46,000 --> 00:12:47,120
h1

336
00:12:47,120 --> 00:12:49,519
and the verifier has to check that

337
00:12:49,519 --> 00:12:52,880
basically a times b minus c is divisible

338
00:12:52,880 --> 00:12:53,680
by

339
00:12:53,680 --> 00:12:56,240
the vanishing polynomial

340
00:12:56,240 --> 00:12:58,880
and then also the prover has to convince

341
00:12:58,880 --> 00:13:01,040
the verifier that the inner product

342
00:13:01,040 --> 00:13:02,560
between this

343
00:13:02,560 --> 00:13:04,639
random vector d and the vector of the

344
00:13:04,639 --> 00:13:06,399
witness is you

345
00:13:06,399 --> 00:13:08,880
we present a scheme for this inner

346
00:13:08,880 --> 00:13:11,040
product relation in our paper i'm not

347
00:13:11,040 --> 00:13:13,760
going to get into the details but it it

348
00:13:13,760 --> 00:13:17,040
has a very similar structure to the to

349
00:13:17,040 --> 00:13:18,839
the mr probed

350
00:13:18,839 --> 00:13:21,760
scheme so

351
00:13:21,760 --> 00:13:23,519
the proverb wants to commit the verifier

352
00:13:23,519 --> 00:13:25,519
of this and we already know how to

353
00:13:25,519 --> 00:13:27,519
perform hammer probes and in approach

354
00:13:27,519 --> 00:13:30,079
how the prover can show to the verifier

355
00:13:30,079 --> 00:13:32,639
that these two relations are satisfied

356
00:13:32,639 --> 00:13:34,959
so the quadratic relations

357
00:13:34,959 --> 00:13:37,200
and the inner relation the linear

358
00:13:37,200 --> 00:13:39,680
relation is divided into steps one of

359
00:13:39,680 --> 00:13:41,760
them we have it recover which is the

360
00:13:41,760 --> 00:13:43,920
inner product so we have to focus on how

361
00:13:43,920 --> 00:13:46,399
to sample this vector g and compute the

362
00:13:46,399 --> 00:13:49,399
encodings

363
00:13:51,040 --> 00:13:53,680
these two this the last step is what we

364
00:13:53,680 --> 00:13:55,199
are going to call it check also by

365
00:13:55,199 --> 00:13:57,760
sampling so the prover

366
00:13:57,760 --> 00:14:00,320
has to sample this vector d because we

367
00:14:00,320 --> 00:14:02,399
cannot ask verifier to do it

368
00:14:02,399 --> 00:14:04,480
it will take a linear time

369
00:14:04,480 --> 00:14:06,880
and then it has to prove it to the

370
00:14:06,880 --> 00:14:08,800
verifier prove the correctness of the

371
00:14:08,800 --> 00:14:10,320
sample

372
00:14:10,320 --> 00:14:14,399
so to sample we need a vector of size 2m

373
00:14:14,399 --> 00:14:15,360
and

374
00:14:15,360 --> 00:14:16,800
because

375
00:14:16,800 --> 00:14:17,519
the

376
00:14:17,519 --> 00:14:18,720
the prover

377
00:14:18,720 --> 00:14:20,079
is trying to convince the verifier the

378
00:14:20,079 --> 00:14:22,160
proverb cannot choose his coefficient he

379
00:14:22,160 --> 00:14:24,320
cannot choose the vector in in the row

380
00:14:24,320 --> 00:14:26,720
space of w that is going to check

381
00:14:26,720 --> 00:14:27,680
against

382
00:14:27,680 --> 00:14:29,120
the witness

383
00:14:29,120 --> 00:14:31,360
but the verifier we don't want it to

384
00:14:31,360 --> 00:14:32,240
send

385
00:14:32,240 --> 00:14:32,959
two

386
00:14:32,959 --> 00:14:34,560
m

387
00:14:34,560 --> 00:14:37,040
field elements so we we solve this

388
00:14:37,040 --> 00:14:38,639
problem

389
00:14:38,639 --> 00:14:40,320
by including the description of the

390
00:14:40,320 --> 00:14:42,720
relation some vector of polynomials

391
00:14:42,720 --> 00:14:45,199
alpha

392
00:14:45,199 --> 00:14:46,800
this vector of polynomials you can think

393
00:14:46,800 --> 00:14:49,680
it as um the monomial basis

394
00:14:49,680 --> 00:14:52,480
or the lagrange

395
00:14:52,480 --> 00:14:55,279
the lagrange polynomials for a for a set

396
00:14:55,279 --> 00:14:56,880
of size 2m

397
00:14:56,880 --> 00:15:00,639
then the prover is going to evaluate

398
00:15:00,639 --> 00:15:03,199
this vector of polynomials

399
00:15:03,199 --> 00:15:05,199
in one element

400
00:15:05,199 --> 00:15:07,839
so we will get two

401
00:15:07,839 --> 00:15:08,880
m

402
00:15:08,880 --> 00:15:10,800
random coefficients

403
00:15:10,800 --> 00:15:12,639
but the point of evaluation will be sent

404
00:15:12,639 --> 00:15:15,199
by the verifier so the referral sends

405
00:15:15,199 --> 00:15:17,680
just one element

406
00:15:17,680 --> 00:15:20,000
and the prover use it to evaluate two m

407
00:15:20,000 --> 00:15:22,639
polynomials and generate uh the

408
00:15:22,639 --> 00:15:24,320
randomness that is going to use for the

409
00:15:24,320 --> 00:15:26,880
linear combination and then it performs

410
00:15:26,880 --> 00:15:27,920
the

411
00:15:27,920 --> 00:15:29,759
the sampling itself

412
00:15:29,759 --> 00:15:31,279
now

413
00:15:31,279 --> 00:15:33,519
next step how do we get the encoding of

414
00:15:33,519 --> 00:15:36,000
vector d we already know how to

415
00:15:36,000 --> 00:15:37,680
find vector v

416
00:15:37,680 --> 00:15:39,199
so for the

417
00:15:39,199 --> 00:15:41,199
encoding of vector d what we want is

418
00:15:41,199 --> 00:15:42,959
something like that looks like this

419
00:15:42,959 --> 00:15:46,560
because d has size 3m we need the

420
00:15:46,560 --> 00:15:48,720
lagrange polynomials

421
00:15:48,720 --> 00:15:51,199
that interpolates and set of

422
00:15:51,199 --> 00:15:52,839
of size 3m as

423
00:15:52,839 --> 00:15:55,040
well and

424
00:15:55,040 --> 00:15:57,279
and our encoding is

425
00:15:57,279 --> 00:15:58,639
is of this form

426
00:15:58,639 --> 00:15:59,440
but

427
00:15:59,440 --> 00:16:00,320
what

428
00:16:00,320 --> 00:16:02,240
is d what is vector d what are the

429
00:16:02,240 --> 00:16:03,839
elements of vector d

430
00:16:03,839 --> 00:16:06,399
well vector d is a linear combination

431
00:16:06,399 --> 00:16:08,880
between the rows of w and and this

432
00:16:08,880 --> 00:16:10,800
alphas

433
00:16:10,800 --> 00:16:11,920
so we

434
00:16:11,920 --> 00:16:12,880
patch

435
00:16:12,880 --> 00:16:14,800
all these rows

436
00:16:14,800 --> 00:16:17,680
in just one vector and then we'll use

437
00:16:17,680 --> 00:16:19,279
the large polynomials to match the

438
00:16:19,279 --> 00:16:20,480
columns

439
00:16:20,480 --> 00:16:22,800
so to match the elements of

440
00:16:22,800 --> 00:16:24,880
a vector d

441
00:16:24,880 --> 00:16:27,440
but at the same time these alpha

442
00:16:27,440 --> 00:16:28,720
coefficients

443
00:16:28,720 --> 00:16:31,519
are evaluations of polynomials in some

444
00:16:31,519 --> 00:16:33,120
point y

445
00:16:33,120 --> 00:16:34,639
and if you think this is the natural

446
00:16:34,639 --> 00:16:36,800
encoding of a matrix it's like we

447
00:16:36,800 --> 00:16:40,240
compress all the rows with some set of

448
00:16:40,240 --> 00:16:43,120
polynomials all the column with another

449
00:16:43,120 --> 00:16:45,199
set of polynomials and then in order to

450
00:16:45,199 --> 00:16:47,279
recover an element in w we basically

451
00:16:47,279 --> 00:16:49,600
play some novel but

452
00:16:49,600 --> 00:16:53,680
so d at the end is a partial evaluation

453
00:16:53,680 --> 00:16:56,160
of a vector

454
00:16:56,160 --> 00:16:58,240
sorry of a polynomial that describes

455
00:16:58,240 --> 00:16:59,600
matrix w

456
00:16:59,600 --> 00:17:02,560
a polynomial that naturally encodes it

457
00:17:02,560 --> 00:17:06,799
this may seem as already a solution

458
00:17:06,799 --> 00:17:08,160
but

459
00:17:08,160 --> 00:17:09,760
here we have a

460
00:17:09,760 --> 00:17:12,640
a problem here is where we need to focus

461
00:17:12,640 --> 00:17:14,240
and this is the bottleneck of all

462
00:17:14,240 --> 00:17:15,919
constructions

463
00:17:15,919 --> 00:17:18,640
this vector w

464
00:17:18,640 --> 00:17:20,559
has two variables with independent

465
00:17:20,559 --> 00:17:22,559
degree m

466
00:17:22,559 --> 00:17:24,640
of course the verifier cannot evaluate

467
00:17:24,640 --> 00:17:28,000
it it will take quadratic and

468
00:17:28,000 --> 00:17:30,559
quadratic work and we don't want it even

469
00:17:30,559 --> 00:17:32,799
to be linear

470
00:17:32,799 --> 00:17:36,080
and we cannot include it in the in the

471
00:17:36,080 --> 00:17:38,400
relation dependent srs because we will

472
00:17:38,400 --> 00:17:40,000
need from the

473
00:17:40,000 --> 00:17:42,559
the universal srs to be quadratic to

474
00:17:42,559 --> 00:17:44,960
include all the combination of powers

475
00:17:44,960 --> 00:17:47,679
between x and y

476
00:17:47,679 --> 00:17:49,039
so

477
00:17:49,039 --> 00:17:50,240
the

478
00:17:50,240 --> 00:17:52,320
the goal is to find a way that the

479
00:17:52,320 --> 00:17:54,559
verifier can have can partially evaluate

480
00:17:54,559 --> 00:17:56,240
this polynomial

481
00:17:56,240 --> 00:17:58,880
and prove its correctness or maybe not

482
00:17:58,880 --> 00:18:00,720
partially evaluated maybe evaluated in

483
00:18:00,720 --> 00:18:03,280
two variables sent by the verifier but

484
00:18:03,280 --> 00:18:04,320
then

485
00:18:04,320 --> 00:18:06,799
prove the correct values

486
00:18:06,799 --> 00:18:09,360
if matrix w is dense

487
00:18:09,360 --> 00:18:11,919
and it has a quadratic number of

488
00:18:11,919 --> 00:18:13,360
quadratic in them

489
00:18:13,360 --> 00:18:16,080
a number of non-zero elements

490
00:18:16,080 --> 00:18:19,440
this could get super tricky

491
00:18:19,440 --> 00:18:21,039
but

492
00:18:21,039 --> 00:18:22,960
there are some assumptions we can make

493
00:18:22,960 --> 00:18:25,760
in the shape of w and previous work made

494
00:18:25,760 --> 00:18:27,600
them and they are super fair assumptions

495
00:18:27,600 --> 00:18:30,000
we are going to talk about that in a in

496
00:18:30,000 --> 00:18:31,280
a way

497
00:18:31,280 --> 00:18:32,320
so

498
00:18:32,320 --> 00:18:34,960
to prove circuit satisfiability

499
00:18:34,960 --> 00:18:36,320
we will start

500
00:18:36,320 --> 00:18:38,480
from a checkable cells by sampling it

501
00:18:38,480 --> 00:18:40,320
has a structure of an algebraic

502
00:18:40,320 --> 00:18:43,280
holographic proof and then

503
00:18:43,280 --> 00:18:46,320
recall we add the inner product relation

504
00:18:46,320 --> 00:18:48,240
in order to prove the linear constraints

505
00:18:48,240 --> 00:18:49,600
and then we add

506
00:18:49,600 --> 00:18:50,720
the

507
00:18:50,720 --> 00:18:53,039
the halamer product relation in order to

508
00:18:53,039 --> 00:18:55,520
finally proceed with satisfiability so

509
00:18:55,520 --> 00:18:58,080
this is how we break the information

510
00:18:58,080 --> 00:18:59,520
theoretical object

511
00:18:59,520 --> 00:19:00,400
but

512
00:19:00,400 --> 00:19:03,200
for time constraints i'm going to focus

513
00:19:03,200 --> 00:19:05,200
only in the first primitive the checkout

514
00:19:05,200 --> 00:19:07,039
subspace sampling which is our main

515
00:19:07,039 --> 00:19:09,039
contribution

516
00:19:09,039 --> 00:19:11,280
so because it has the the structure of

517
00:19:11,280 --> 00:19:13,039
an algebraic proof

518
00:19:13,039 --> 00:19:14,880
polynomial algebraic proof

519
00:19:14,880 --> 00:19:17,600
a primarily graphical sorry

520
00:19:17,600 --> 00:19:20,960
we have the indexer that performs uh in

521
00:19:20,960 --> 00:19:23,600
an offline phase some computation to

522
00:19:23,600 --> 00:19:25,440
output polynomials that describe matrix

523
00:19:25,440 --> 00:19:27,039
w

524
00:19:27,039 --> 00:19:29,520
then in an online phase proven verifier

525
00:19:29,520 --> 00:19:32,000
will interact

526
00:19:32,000 --> 00:19:34,799
in two steps the first one is to sample

527
00:19:34,799 --> 00:19:38,240
so the verifier will send and the

528
00:19:38,240 --> 00:19:39,120
challenge

529
00:19:39,120 --> 00:19:40,240
a y

530
00:19:40,240 --> 00:19:42,160
and the prover will reply with encoding

531
00:19:42,160 --> 00:19:45,440
of the vector d it's a sample

532
00:19:45,440 --> 00:19:46,960
according to y

533
00:19:46,960 --> 00:19:48,400
and then

534
00:19:48,400 --> 00:19:49,679
the approver has to convince the

535
00:19:49,679 --> 00:19:51,919
verifier that the sampling has been

536
00:19:51,919 --> 00:19:53,280
performed correct

537
00:19:53,280 --> 00:19:54,480
at the end

538
00:19:54,480 --> 00:19:55,840
the verifier

539
00:19:55,840 --> 00:19:58,959
accepts or rejects

540
00:19:59,039 --> 00:20:01,440
depending on whether dx

541
00:20:01,440 --> 00:20:03,600
has been correctly computed

542
00:20:03,600 --> 00:20:06,080
so and this is a the first step to

543
00:20:06,080 --> 00:20:07,280
construct

544
00:20:07,280 --> 00:20:10,559
a snark and update on universal snark

545
00:20:10,559 --> 00:20:11,360
and

546
00:20:11,360 --> 00:20:13,360
it's implicit in all previous

547
00:20:13,360 --> 00:20:15,520
constructions that's

548
00:20:15,520 --> 00:20:19,120
that's the core of the work this work so

549
00:20:19,120 --> 00:20:21,440
in sonic it's called it's implicit in

550
00:20:21,440 --> 00:20:23,919
the signature of curry computation and

551
00:20:23,919 --> 00:20:26,480
the partial evaluation of of this

552
00:20:26,480 --> 00:20:29,120
b varied polynomial s is indeed a

553
00:20:29,120 --> 00:20:30,799
sampling

554
00:20:30,799 --> 00:20:33,200
er in the in the rows of the matrix that

555
00:20:33,200 --> 00:20:34,559
describes the

556
00:20:34,559 --> 00:20:36,640
the sequence

557
00:20:36,640 --> 00:20:38,320
then they present two constructions in

558
00:20:38,320 --> 00:20:41,520
the samsung construction they assume

559
00:20:41,520 --> 00:20:44,799
that w can be written as a sum of a

560
00:20:44,799 --> 00:20:47,120
permutation matrix which is a very

561
00:20:47,120 --> 00:20:50,159
assumption and the complexity depends on

562
00:20:50,159 --> 00:20:52,400
how many matrices we needed

563
00:20:52,400 --> 00:20:54,320
how many permutation matrices we need to

564
00:20:54,320 --> 00:20:55,840
compute w

565
00:20:55,840 --> 00:20:58,799
and then they present an amortized table

566
00:20:58,799 --> 00:21:00,320
subspace sampling

567
00:21:00,320 --> 00:21:02,240
that is unrestricted makes no

568
00:21:02,240 --> 00:21:04,480
assumptions on the size on the um on the

569
00:21:04,480 --> 00:21:08,000
structure of w and is super efficient

570
00:21:08,000 --> 00:21:10,320
in malignant lunar

571
00:21:10,320 --> 00:21:13,440
er they use a very a very smart chain

572
00:21:13,440 --> 00:21:14,400
calling

573
00:21:14,400 --> 00:21:17,039
of sparse matrices that is uh

574
00:21:17,039 --> 00:21:19,440
that is presented in malin

575
00:21:19,440 --> 00:21:22,080
which is again a fair assumption because

576
00:21:22,080 --> 00:21:24,080
what they assume is that the amount of

577
00:21:24,080 --> 00:21:26,880
non-serious elements is actually linear

578
00:21:26,880 --> 00:21:29,440
in the size of the circuit

579
00:21:29,440 --> 00:21:30,400
and

580
00:21:30,400 --> 00:21:31,520
the

581
00:21:31,520 --> 00:21:33,200
the protocols are super efficient but

582
00:21:33,200 --> 00:21:37,440
they have um quite a large srs

583
00:21:37,440 --> 00:21:39,840
in our work we first

584
00:21:39,840 --> 00:21:42,400
start from this algebraic intuition

585
00:21:42,400 --> 00:21:43,280
and

586
00:21:43,280 --> 00:21:46,960
and create a css that is um inspired in

587
00:21:46,960 --> 00:21:49,120
the blender modern assembly which is not

588
00:21:49,120 --> 00:21:52,799
very efficient uh by itself but it works

589
00:21:52,799 --> 00:21:54,559
very well with dense

590
00:21:54,559 --> 00:21:57,440
rows so because this is linear algebra

591
00:21:57,440 --> 00:21:59,679
we want to sample a

592
00:21:59,679 --> 00:22:02,799
a vector in the row space of a matrix

593
00:22:02,799 --> 00:22:06,880
so we can use one css for example to

594
00:22:06,880 --> 00:22:09,440
to work with the dense um

595
00:22:09,440 --> 00:22:11,760
rows and then if the rest of the matrix

596
00:22:11,760 --> 00:22:16,080
is sparse why not to use marginal rule

597
00:22:16,080 --> 00:22:19,039
we also present um

598
00:22:19,039 --> 00:22:20,880
a construction that is inspired by

599
00:22:20,880 --> 00:22:23,120
marlin but is

600
00:22:23,120 --> 00:22:24,559
generated from

601
00:22:24,559 --> 00:22:27,039
simpler building blocks and

602
00:22:27,039 --> 00:22:29,600
uh came out to be

603
00:22:29,600 --> 00:22:31,600
to be as efficient as the best

604
00:22:31,600 --> 00:22:33,840
construction in in luna

605
00:22:33,840 --> 00:22:34,640
but

606
00:22:34,640 --> 00:22:37,280
with a with a smaller surface

607
00:22:37,280 --> 00:22:39,520
and then in an extended version of our

608
00:22:39,520 --> 00:22:42,880
work while trying to include blanc in

609
00:22:42,880 --> 00:22:44,159
our

610
00:22:44,159 --> 00:22:46,240
in our framework we

611
00:22:46,240 --> 00:22:47,200
we

612
00:22:47,200 --> 00:22:49,679
combined somewhat the ideas

613
00:22:49,679 --> 00:22:52,559
of lunar um and plonk and came out with

614
00:22:52,559 --> 00:22:54,720
uh with our best construction

615
00:22:54,720 --> 00:22:57,360
that considers and secrets with limited

616
00:22:57,360 --> 00:22:59,120
fan out

617
00:22:59,120 --> 00:23:01,280
again after

618
00:23:01,280 --> 00:23:03,520
after assumption in the applications of

619
00:23:03,520 --> 00:23:05,840
snarks

620
00:23:05,840 --> 00:23:07,120
to wrap up

621
00:23:07,120 --> 00:23:10,720
why to use css why to think this um

622
00:23:10,720 --> 00:23:13,520
information theoretical object this

623
00:23:13,520 --> 00:23:15,280
holographic proof

624
00:23:15,280 --> 00:23:17,039
in in this way

625
00:23:17,039 --> 00:23:18,799
because

626
00:23:18,799 --> 00:23:20,159
decomposing

627
00:23:20,159 --> 00:23:21,600
the construction of a scheme in many

628
00:23:21,600 --> 00:23:22,400
steps

629
00:23:22,400 --> 00:23:25,200
is always useful also it comes

630
00:23:25,200 --> 00:23:26,080
with

631
00:23:26,080 --> 00:23:29,919
with an algebraic intuition that we i

632
00:23:29,919 --> 00:23:32,400
think we all feel comfortable working

633
00:23:32,400 --> 00:23:33,280
with

634
00:23:33,280 --> 00:23:34,840
like it

635
00:23:34,840 --> 00:23:37,840
simplifies then the framework it has cut

636
00:23:37,840 --> 00:23:39,840
through several constructions i would

637
00:23:39,840 --> 00:23:40,640
say

638
00:23:40,640 --> 00:23:43,200
all of them in the index and the version

639
00:23:43,200 --> 00:23:45,440
of our work

640
00:23:45,440 --> 00:23:48,880
and this css is the bottleneck it's what

641
00:23:48,880 --> 00:23:51,760
all these constructions defer on

642
00:23:51,760 --> 00:23:54,159
it's where the smartest idea

643
00:23:54,159 --> 00:23:55,600
came

644
00:23:55,600 --> 00:23:57,279
on the table

645
00:23:57,279 --> 00:23:58,559
so

646
00:23:58,559 --> 00:24:01,919
isolating it will allow us to again

647
00:24:01,919 --> 00:24:03,600
compare combine

648
00:24:03,600 --> 00:24:04,640
and then

649
00:24:04,640 --> 00:24:07,760
improve we now we know where to focus

650
00:24:07,760 --> 00:24:10,559
and a and as i mentioned before then we

651
00:24:10,559 --> 00:24:11,840
can

652
00:24:11,840 --> 00:24:14,000
mix this

653
00:24:14,000 --> 00:24:15,200
this works

654
00:24:15,200 --> 00:24:17,440
so that's all from me thank you for

655
00:24:17,440 --> 00:24:20,799
listening i hope this was useful if it

656
00:24:20,799 --> 00:24:23,279
was not please don't hesitate to contact

657
00:24:23,279 --> 00:24:24,720
us or if you have

658
00:24:24,720 --> 00:24:30,440
any doubts on on our of our results

659
00:24:34,080 --> 00:24:36,158
you

